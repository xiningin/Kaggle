{"cell_type":{"8babf69f":"code","e6a6ab8c":"code","d3259544":"code","727c5b6f":"code","f01f61b9":"code","eafec6d8":"code","face0150":"code","307eea23":"code","905f9eee":"code","912fd702":"code","e311dbcf":"code","708e83ad":"code","3473af5b":"code","3a793433":"code","4ecace76":"code","2aa96268":"code","6cea0f10":"code","1d1d99bc":"markdown"},"source":{"8babf69f":"\nimport numpy as np\nimport pandas as pd\nimport math\nimport os\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom keras.preprocessing.image import img_to_array\nimport random\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D,BatchNormalization\nfrom keras.layers import MaxPooling2D,Dropout\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nimport cv2\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\n\n","e6a6ab8c":"print(os.listdir(\"..\/input\/data\/natural_images\"))","d3259544":"\ndata=[]\nlabels=[]\nrandom.seed(42)\nimagePaths = sorted(list(os.listdir(\"..\/input\/data\/natural_images\")))\nrandom.shuffle(imagePaths)\nprint(imagePaths)\n","727c5b6f":"\nfor img in imagePaths:\n    path=sorted(list(os.listdir(\"..\/input\/data\/natural_images\/\"+img)))\n    for i in path:\n        image = cv2.imread(\"..\/input\/data\/natural_images\/\"+img+'\/'+i)\n        image = cv2.resize(image, (128,128), interpolation=cv2.INTER_AREA)\n        image = img_to_array(image)\n        data.append(image)\n        l = label = img\n        labels.append(l)\n        ","f01f61b9":"print(len(data), len(labels))","eafec6d8":"# data[0]","face0150":"\ndata = np.array(data, dtype=\"float\") \/ 255.0\nlabels = np.array(labels)\nmlb = LabelBinarizer()\nlabels = mlb.fit_transform(labels)\nprint(labels[0])\n","307eea23":"\n(x_train,x_test,y_train,y_test)=train_test_split(data,labels,test_size=0.2,random_state=42)\nprint(len(x_train), len(x_test))\n","905f9eee":"\n# Initialising the CNN\nclassifier = Sequential()\n\n# Step 1 - Convolution\nclassifier.add(Convolution2D(32, (3, 3), input_shape = (128, 128, 3), activation = 'relu',padding='same'))\n# Adding a second convolutional layer\nclassifier.add(Convolution2D(32, (3, 3), activation = 'relu',padding='same'))\n# step 2 - Pooling layer\n#classifier.add(BatchNormalization(axis=1))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Dropout(0.25))\n\n\nclassifier.add(Convolution2D(64, (3, 3), activation = 'relu',padding='same'))\nclassifier.add(Convolution2D(64, (3, 3), activation = 'relu',padding='same'))\n#classifier.add(BatchNormalization(axis=1))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Dropout(0.25))\n\n\nclassifier.add(Convolution2D(128, (3, 3), activation = 'relu',padding='same'))\nclassifier.add(Convolution2D(128, (3, 3), activation = 'relu',padding='same'))\n#classifier.add(BatchNormalization(axis=1))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Dropout(0.25))\n\n\nclassifier.add(Convolution2D(256, (3, 3), activation = 'relu',padding='same'))\nclassifier.add(Convolution2D(256, (3, 3), activation = 'relu',padding='same'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\nclassifier.add(Dropout(0.25))\n\n# Step 3 - Flattening\nclassifier.add(Flatten())\nclassifier.add(Dense(1024,activation='relu'))\nclassifier.add(BatchNormalization())\nclassifier.add(Dropout(0.5))\n\"\"\"\nclassifier.add(Dense(512,activation='relu'))\nclassifier.add(BatchNormalization())\nclassifier.add(Dropout(0.5))\n\"\"\"\n# Step 4 - Full connection\nclassifier.add(Dense(output_dim = 8, activation = 'softmax'))\n\n# Compiling the CNN\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n\nclassifier.summary()\n\n\n### 94% acc\n\n","912fd702":"\nclassifier.fit(x_train,y_train, batch_size = 100, epochs = 10, validation_split=0.1)\n\n","e311dbcf":"classifier.save('CNN_natural-images_ep10.h5')","708e83ad":"\npred_label = classifier.predict(x_test, batch_size=None, verbose=0)\n\ntotal = 0\naccurate = 0\naccurate_index = []\nwrong_index = []\n\nfor i in range(len(pred_label)):\n    if np.argmax(pred_label[i]) == np.argmax(y_test[i]):\n        accurate += 1\n        accurate_index.append(i)\n    else:\n        wrong_index.append(i)\n        \n    total += 1\n    \n    \nprint('Total test data;', total, '\\taccurately predicted data:', accurate, '\\t wrongly predicted data: ', total - accurate)\nprint('Accuracy:', round(accurate\/total*100, 3), '%')\n","3473af5b":"\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(zoom_range = 0.2, horizontal_flip=True, shear_range=0.2)\n\nbatch_size = 100\nclassifier.fit_generator(train_datagen.flow(x_train,y_train,batch_size=batch_size), steps_per_epoch=math.ceil(len(x_train)\/\/100), epochs = 10)\n\n","3a793433":"classifier.save('CNN_natural-images-with-augmentation_ep10.h5')","4ecace76":"\nprediction_label = classifier.predict(x_test, batch_size=None, verbose=0)\n\ntotal = 0\naccurate = 0\naccurate_index = []\nwrong_index = []\n\nfor i in range(len(prediction_label)):\n    if np.argmax(prediction_label[i]) == np.argmax(y_test[i]):\n        accurate += 1\n        accurate_index.append(i)\n    else:\n        wrong_index.append(i)\n        \n    total += 1\n    \n    \nprint('Total test data;', total, '\\taccurately predicted data:', accurate, '\\t wrongly predicted data: ', total - accurate)\nprint('Accuracy:', round(accurate\/total*100, 3), '%')\n","2aa96268":"\nlabelss=['airplane','car','cat','dog','flower','fruit','motorbike','person']\nim_idx = random.sample(accurate_index, k=9)\n\nnrows = 3\nncols = 3\nfig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True,figsize=(15, 12))\n\nn = 0\nfor row in range(nrows):\n    for col in range(ncols):\n            ax[row,col].imshow(x_test[im_idx[n]])\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(labelss[np.argmax(prediction_label[im_idx[n]])], labelss[np.argmax(y_test[im_idx[n]])]))\n            n += 1\n\nplt.show()\n","6cea0f10":"\nim_idx = random.sample(wrong_index, k=9)\n\nnrows = 3\nncols = 3\nfig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True,figsize=(15, 12))\n\nn = 0\nfor row in range(nrows):\n    for col in range(ncols):\n            ax[row,col].imshow(x_test[im_idx[n]])\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(labelss[np.argmax(prediction_label[im_idx[n]])], labelss[np.argmax(y_test[im_idx[n]])]))\n            n += 1\n\nplt.show()\n","1d1d99bc":"<center><h3>THE END"}}