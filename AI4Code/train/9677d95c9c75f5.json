{"cell_type":{"29deca47":"code","3b187c51":"code","ceb2af74":"code","eb57eb7c":"code","64f547bd":"code","7f761742":"code","fdeae054":"code","bf564d13":"code","f33f7e39":"code","6b5a526b":"code","a15de010":"markdown","ed2d32b2":"markdown","0dffe4d4":"markdown","34768d2b":"markdown","50a103a3":"markdown","eb28ba06":"markdown","441ea4c2":"markdown","babadceb":"markdown","41f9a6c2":"markdown"},"source":{"29deca47":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nfrom os import listdir\nfrom tensorflow.compat.v1.keras.preprocessing.image import load_img\nfrom tensorflow.compat.v1.keras.preprocessing.image import img_to_array\n\nprint(os.listdir('..\/input\/dogs-vs-cats\/'))","3b187c51":"# define location of dataset\nfolder = '..\/input\/dogs-vs-cats\/train\/train\/'\n# plot first few images\nfor i in range(9):\n\t# define subplot\n\tplt.subplot(330 + 1 + i)\n\t# define filename\n\tfilename = folder + 'dog.' + str(i) + '.jpg'\n\t# load image pixels\n\timage = imread(filename)\n\t# plot raw pixel data\n\tplt.imshow(image)\n# show the figure\nplt.show()","ceb2af74":"# define location of dataset\nfolder = '..\/input\/dogs-vs-cats\/train\/train\/'\n# plot first few images\nfor i in range(9):\n\t# define subplot\n\tplt.subplot(330 + 1 + i)\n\t# define filename\n\tfilename = folder + 'cat.' + str(i) + '.jpg'\n\t# load image pixels\n\timage = imread(filename)\n\t# plot raw pixel data\n\tplt.imshow(image)\n# show the figure\nplt.show()","eb57eb7c":"# define location of dataset\nfolder = '..\/input\/dogs-vs-cats\/train\/train\/'\nphotos, labels = list(), list()\n# enumerate files in the directory\nfor file in listdir(folder):\n\t# determine class\n\toutput = 0.0\n\tif file.startswith('cat'):\n\t\toutput = 1.0\n\t# load image\n\tphoto = load_img(folder + file, target_size=(100, 100))\n\t# convert to numpy array\n\tphoto = img_to_array(photo)\n\t# store\n\tphotos.append(photo)\n\tlabels.append(output)\n# convert to a numpy arrays\nphotos = np.asarray(photos)\nlabels = np.asarray(labels)\nprint(photos.shape, labels.shape)","64f547bd":"np.save('dogs_vs_cats_photos.npy', photos)\nnp.save('dogs_vs_cats_labels.npy', labels)","7f761742":"from numpy import load\nphotos = load('dogs_vs_cats_photos.npy')\nlabels = load('dogs_vs_cats_labels.npy')\nprint(photos.shape, labels.shape)","fdeae054":"\nfrom os import makedirs\nfrom os import listdir\nfrom shutil import copyfile\nfrom random import seed\nfrom random import random\n# create directories\ndataset_home = 'dataset_dogs_vs_cats\/'\nsubdirs = ['train\/', 'test\/']\nfor subdir in subdirs:\n\t# create label subdirectories\n\tlabeldirs = ['dogs\/', 'cats\/']\n\tfor labldir in labeldirs:\n\t\tnewdir = dataset_home + subdir + labldir\n\t\tmakedirs(newdir, exist_ok=True)\n# seed random number generator\nseed(1)\n# define ratio of pictures to use for validation\nval_ratio = 0.25\n# copy training dataset images into subdirectories\nsrc_directory = '..\/input\/dogs-vs-cats\/train\/train\/'\nfor file in listdir(src_directory):\n\tsrc = src_directory + '\/' + file\n\tdst_dir = 'train\/'\n\tif random() < val_ratio:\n\t\tdst_dir = 'test\/'\n\tif file.startswith('cat'):\n\t\tdst = dataset_home + dst_dir + 'cats\/'  + file\n\t\tcopyfile(src, dst)\n\telif file.startswith('dog'):\n\t\tdst = dataset_home + dst_dir + 'dogs\/'  + file\n\t\tcopyfile(src, dst)","bf564d13":"\nimport sys\nfrom matplotlib import pyplot\nfrom tensorflow.compat.v1.keras.utils import to_categorical\nfrom tensorflow.compat.v1.keras.models import Sequential\nfrom tensorflow.compat.v1.keras.layers import Conv2D\nfrom tensorflow.compat.v1.keras.layers import MaxPooling2D\nfrom tensorflow.compat.v1.keras.layers import Dense\nfrom tensorflow.compat.v1.keras.layers import Flatten\nfrom tensorflow.compat.v1.keras.optimizers import SGD\nfrom tensorflow.compat.v1.keras.preprocessing.image import ImageDataGenerator\n\n# define cnn model\ndef define_model():\n\tmodel = Sequential()\n\tmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(100, 100, 3)))\n\tmodel.add(MaxPooling2D((2, 2)))\n\tmodel.add(Flatten())\n\tmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\n\tmodel.add(Dense(1, activation='sigmoid'))\n\t# compile model\n\topt = SGD(lr=0.001, momentum=0.9)\n\tmodel.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])\n\treturn model\n\n# plot diagnostic learning curves\ndef summarize_diagnostics(history):\n\t# plot loss\n\tpyplot.subplot(211)\n\tpyplot.title('Cross Entropy Loss')\n\tpyplot.plot(history.history['loss'], color='blue', label='train')\n\tpyplot.plot(history.history['val_loss'], color='orange', label='test')\n\t# plot accuracy\n\tpyplot.subplot(212)\n\tpyplot.title('Classification Accuracy')\n\tpyplot.plot(history.history['acc'], color='blue', label='train')\n\tpyplot.plot(history.history['val_acc'], color='orange', label='test')\n\t# save plot to file\n\tfilename = sys.argv[0].split('\/')[-1]\n\tpyplot.show()\n\n# run the test harness for evaluating a model\ndef run_test_harness():\n\t# define model\n\tmodel = define_model()\n\t# create data generator\n\tdatagen = ImageDataGenerator(rescale=1.0\/255.0)\n\t# prepare iterators\n\ttrain_it = datagen.flow_from_directory('dataset_dogs_vs_cats\/train\/',\n\t\tclass_mode='binary', batch_size=64, target_size=(100, 100))\n\ttest_it = datagen.flow_from_directory('dataset_dogs_vs_cats\/test\/',\n\t\tclass_mode='binary', batch_size=64, target_size=(100, 100))\n\t# fit model\n\thistory = model.fit_generator(train_it, steps_per_epoch=len(train_it),\n\t\tvalidation_data=test_it, validation_steps=len(test_it), epochs=20, verbose=0)\n\t# evaluate model\n\t_, acc = model.evaluate_generator(test_it, steps=len(test_it), verbose=0)\n\tprint('> %.3f' % (acc * 100.0))\n\t# learning curves\n\tsummarize_diagnostics(history)\n\n# entry point, run the test harness\nrun_test_harness()","f33f7e39":"import sys\nfrom matplotlib import pyplot\nfrom tensorflow.compat.v1.keras.utils import to_categorical\nfrom tensorflow.compat.v1.keras.models import Sequential\nfrom tensorflow.compat.v1.keras.layers import Conv2D\nfrom tensorflow.compat.v1.keras.layers import MaxPooling2D\nfrom tensorflow.compat.v1.keras.layers import Dense\nfrom tensorflow.compat.v1.keras.layers import Flatten\nfrom tensorflow.compat.v1.keras.optimizers import SGD\nfrom tensorflow.compat.v1.keras.preprocessing.image import ImageDataGenerator\n\n# define cnn model\ndef define_model():\n\tmodel = Sequential()\n\tmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(100, 100, 3)))\n\tmodel.add(MaxPooling2D((2, 2)))\n\tmodel.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n\tmodel.add(MaxPooling2D((2, 2)))\n\tmodel.add(Flatten())\n\tmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\n\tmodel.add(Dense(1, activation='sigmoid'))\n\t# compile model\n\topt = SGD(lr=0.001, momentum=0.9)\n\tmodel.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])\n\treturn model\n\n# plot diagnostic learning curves\ndef summarize_diagnostics(history):\n\t# plot loss\n\tpyplot.subplot(211)\n\tpyplot.title('Cross Entropy Loss')\n\tpyplot.plot(history.history['loss'], color='blue', label='train')\n\tpyplot.plot(history.history['val_loss'], color='orange', label='test')\n\t# plot accuracy\n\tpyplot.subplot(212)\n\tpyplot.title('Classification Accuracy')\n\tpyplot.plot(history.history['acc'], color='blue', label='train')\n\tpyplot.plot(history.history['val_acc'], color='orange', label='test')\n\t# save plot to file\n\tfilename = sys.argv[0].split('\/')[-1]\n\tpyplot.show()\n\n# run the test harness for evaluating a model\ndef run_test_harness():\n\t# define model\n\tmodel = define_model()\n\t# create data generator\n\tdatagen = ImageDataGenerator(rescale=1.0\/255.0)\n\t# prepare iterators\n\ttrain_it = datagen.flow_from_directory('dataset_dogs_vs_cats\/train\/',\n\t\tclass_mode='binary', batch_size=64, target_size=(100, 100))\n\ttest_it = datagen.flow_from_directory('dataset_dogs_vs_cats\/test\/',\n\t\tclass_mode='binary', batch_size=64, target_size=(100, 100))\n\t# fit model\n\thistory = model.fit_generator(train_it, steps_per_epoch=len(train_it),\n\t\tvalidation_data=test_it, validation_steps=len(test_it), epochs=20, verbose=0)\n\t# evaluate model\n\t_, acc = model.evaluate_generator(test_it, steps=len(test_it), verbose=0)\n\tprint('> %.3f' % (acc * 100.0))\n\t# learning curves\n\tsummarize_diagnostics(history)\n\n# entry point, run the test harness\nrun_test_harness()","6b5a526b":"import sys\nfrom matplotlib import pyplot\nfrom tensorflow.compat.v1.keras.utils import to_categorical\nfrom tensorflow.compat.v1.keras.models import Sequential\nfrom tensorflow.compat.v1.keras.layers import Conv2D\nfrom tensorflow.compat.v1.keras.layers import MaxPooling2D\nfrom tensorflow.compat.v1.keras.layers import Dense\nfrom tensorflow.compat.v1.keras.layers import Flatten\nfrom tensorflow.compat.v1.keras.optimizers import SGD\nfrom tensorflow.compat.v1.keras.preprocessing.image import ImageDataGenerator\n\n# define cnn model\ndef define_model():\n\tmodel = Sequential()\n\tmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(100, 100, 3)))\n\tmodel.add(MaxPooling2D((2, 2)))\n\tmodel.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n\tmodel.add(MaxPooling2D((2, 2)))\n\tmodel.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n\tmodel.add(MaxPooling2D((2, 2)))\n\tmodel.add(Flatten())\n\tmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\n\tmodel.add(Dense(1, activation='sigmoid'))\n\t# compile model\n\topt = SGD(lr=0.001, momentum=0.9)\n\tmodel.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])\n\treturn model\n\n# plot diagnostic learning curves\ndef summarize_diagnostics(history):\n\t# plot loss\n\tpyplot.subplot(211)\n\tpyplot.title('Cross Entropy Loss')\n\tpyplot.plot(history.history['loss'], color='blue', label='train')\n\tpyplot.plot(history.history['val_loss'], color='orange', label='test')\n\t# plot accuracy\n\tpyplot.subplot(212)\n\tpyplot.title('Classification Accuracy')\n\tpyplot.plot(history.history['acc'], color='blue', label='train')\n\tpyplot.plot(history.history['val_acc'], color='orange', label='test')\n\t# save plot to file\n\tfilename = sys.argv[0].split('\/')[-1]\n\tpyplot.show()\n\n# run the test harness for evaluating a model\ndef run_test_harness():\n\t# define model\n\tmodel = define_model()\n\t# create data generator\n\tdatagen = ImageDataGenerator(rescale=1.0\/255.0)\n\t# prepare iterators\n\ttrain_it = datagen.flow_from_directory('dataset_dogs_vs_cats\/train\/',\n\t\tclass_mode='binary', batch_size=64, target_size=(100, 100))\n\ttest_it = datagen.flow_from_directory('dataset_dogs_vs_cats\/test\/',\n\t\tclass_mode='binary', batch_size=64, target_size=(100, 100))\n\t# fit model\n\thistory = model.fit_generator(train_it, steps_per_epoch=len(train_it),\n\t\tvalidation_data=test_it, validation_steps=len(test_it), epochs=20, verbose=0)\n\t# evaluate model\n\t_, acc = model.evaluate_generator(test_it, steps=len(test_it), verbose=0)\n\tprint('> %.3f' % (acc * 100.0))\n\t# learning curves\n\tsummarize_diagnostics(history)\n\n# entry point, run the test harness\nrun_test_harness()","a15de010":"\n# Save the reshaped photos","ed2d32b2":"# Plot dog photos from the dogs vs cats dataset","0dffe4d4":"# Cats images","34768d2b":"# Load dogs vs cats dataset, reshape and save to a new file","50a103a3":"# Organize dataset into a useful structure","eb28ba06":"# Baseline 1 Block VGG Model","441ea4c2":"# Two Block VGG Model","babadceb":"# Load and confirm the shape\n* The shape of photos should be **(25000, 100, 100, 3)** or **(25000, 100, 100, 3)** depending on the size of the preprocessed image\n* The shape of labels should be **(25000,)**","41f9a6c2":"# Three Block VGG Model"}}