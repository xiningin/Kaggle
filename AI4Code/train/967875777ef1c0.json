{"cell_type":{"2f570ef0":"code","fc2bf17f":"code","be24ec29":"code","306a08be":"code","5fd204ae":"code","68e682c9":"code","340f7184":"code","3d5e2126":"code","0e3bc1ab":"code","d6656e7f":"code","ae406f21":"code","6ac3a662":"code","f168fd89":"code","6d852d0d":"markdown","6be19131":"markdown","e46c9309":"markdown","bfb78ed2":"markdown","6d3ef172":"markdown"},"source":{"2f570ef0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc2bf17f":"heart = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","be24ec29":"heart.head()","306a08be":"heart.isnull().sum()","5fd204ae":"import matplotlib.pyplot as plt\nimport seaborn as sns","68e682c9":"heart.describe()","340f7184":"f, ax = plt.subplots(figsize=(6, 8))\nax = sns.countplot(x=\"output\", data=heart, palette=\"Set2\")\nplt.show()","3d5e2126":"plt.figure(figsize=(16,12))\nplt.title('Correlation Heatmap of Rain in Australia Dataset')\nax = sns.heatmap(heart.corr(), square=True, annot=True, fmt='.2f', linecolor='white')\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nax.set_yticklabels(ax.get_yticklabels(), rotation=30)           \nplt.show()","0e3bc1ab":"X = heart.drop(['output'], axis=1)\n\ny = heart['output']","d6656e7f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","ae406f21":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","6ac3a662":"from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score , confusion_matrix\nfrom sklearn.inspection import permutation_importance\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [[CatBoostClassifier(verbose=0),'CatBoost Classifier'],[XGBClassifier(),'XGB Classifier'], [RandomForestClassifier(),'Random Forest'], \n    [KNeighborsClassifier(), 'K-Nearest Neighbours'], [SGDClassifier(),'SGD Classifier'], [SVC(),'SVC'],[LGBMClassifier(),'LGBM Classifier'],\n              [GaussianNB(),'GaussianNB'],[DecisionTreeClassifier(),'Decision Tree Classifier'],[LogisticRegression(),'Logistic Regression']]","f168fd89":"for cls in classifiers:\n    model = cls[0]\n    model.fit(X_train, y_train)\n    \n    y_pred = model.predict(X_test)\n    print(cls[1])\n    print ('Confusion Matrix:')\n    print(confusion_matrix(y_test, y_pred))\n    print(\"Accuracy : \", accuracy_score(y_test, y_pred) *  100)\n    print(\"Recall : \", recall_score(y_test, y_pred) *  100)\n    print(\"Precision : \", precision_score(y_test, y_pred) *  100)\n    print(\"F1 score : \", f1_score(y_test, y_pred) *  100)","6d852d0d":"there is no missing values in our dataset","6be19131":"So the best algorithme in this case is SVC","e46c9309":"# second method","bfb78ed2":"Note : I used in this notebook the previous notebooks \nhttps:\/\/www.kaggle.com\/codingan\/heart-attack-prediction-acc-84-6","6d3ef172":"there is a hight correlation between :\n* slp and oldpeak -0,58\n* output and exng -0.44\n* cp and output 0.43\n* thalachh and output 0.42"}}