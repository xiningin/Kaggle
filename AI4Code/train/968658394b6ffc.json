{"cell_type":{"d39c5626":"code","fd5ce1a3":"code","b3c0f449":"code","2c3d0fc4":"code","5cde1a31":"code","37054c64":"code","25d59914":"code","baeb3142":"code","8a1dd83d":"code","c9ec4eeb":"code","6fb27d88":"code","8ca4792d":"code","48bf4d32":"code","70ef771d":"code","38e8a498":"code","3a781289":"code","391ea090":"code","be54a9ad":"code","c5d44abb":"code","c1123c39":"code","f67805c4":"code","293ba160":"code","a318f7b2":"markdown","d27f4836":"markdown","a004511e":"markdown","4f9ac38a":"markdown","ef554082":"markdown","387df3d4":"markdown","a35dd4d4":"markdown","0e672bf3":"markdown","678ce4cc":"markdown","7db5b01f":"markdown","c30c2658":"markdown","4fd83fe2":"markdown","04fb4a08":"markdown","846c1691":"markdown","f8b5fd4a":"markdown","eed28f8e":"markdown","27b6de15":"markdown","7a48251a":"markdown","ac99a3da":"markdown","a6f42b9a":"markdown","efadc037":"markdown","ab1b0f3a":"markdown","b279e4e9":"markdown","af5fb104":"markdown","947e9400":"markdown"},"source":{"d39c5626":"# \u57fa\u672c\u30e9\u30a4\u30d6\u30e9\u30ea\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# # \u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\n# from sklearn.model_selection import train_test_split\n# from sklearn.preprocessing import LabelEncoder\n# le = LabelEncoder()\n\n# # light GBM\n# ! pip install lightgbm\n# import lightgbm as lgb\n\n# Warning\u306e\u7121\u52b9\u5316\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0colum\u306e\u5168\u8868\u793a\npd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)\n\n# hdf5 \u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\u7528 python \u30d1\u30c3\u30b1\u30fc\u30b8\nimport h5py","fd5ce1a3":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntrain_df = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest_df = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\n\n# \u307e\u3068\u3081\u3066\u30c7\u30fc\u30bf\u52a0\u5de5\u3059\u308b\u305f\u3081\u306b\u4e00\u5ea6train or test\u306e\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u30c7\u30fc\u30bf\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3059\u308b\ntrain_df.insert(0, 'dataset', 'train')\ntest_df.insert(0, 'dataset', 'test')\nall_df = pd.concat([train_df, test_df])\n\n# \u30c7\u30fc\u30bf\u78ba\u8a8d\nall_df.head(83)","b3c0f449":"all_df['time_interval_bf'] = all_df['time_step']-all_df['time_step'].shift(1)\nall_df['time_interval_bf'][(all_df['breath_id']!=all_df['breath_id'].shift(1))] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\n\nall_df['time_interval_af'] = all_df['time_step']-all_df['time_step'].shift(-1)\nall_df['time_interval_af'][(all_df['breath_id']!=all_df['breath_id'].shift(-1))] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\n\nall_df.head(83)","2c3d0fc4":"all_df['u_out_diff'] = (all_df['u_out']-all_df['u_out'].shift(1))\nall_df['u_out_diff'][(all_df['breath_id']!=all_df['breath_id'].shift(1))] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\nall_df.head(83)","5cde1a31":"all_df['u_out_slope'] = all_df['u_out_diff'] \/ all_df['time_step']\nall_df['u_out_slope'][(all_df['breath_id']!=all_df['breath_id'].shift(1))] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\nall_df.head(83)","37054c64":"all_df['u_in_diff'] = (all_df['u_in']-all_df['u_in'].shift(1))\nall_df['u_in_diff'][(all_df['breath_id']!=all_df['breath_id'].shift(1))] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\nall_df.head(83)","25d59914":"all_df['u_in_slope'] = all_df['u_in_diff'] \/ all_df['time_step']\nall_df['u_in_slope'][(all_df['breath_id']!=all_df['breath_id'].shift(1))] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\nall_df.head(83)","baeb3142":"num_shift = 10\n\nfor i_shift in range(1, num_shift+1):\n    all_df[f'u_out_bf_{i_shift}'] = all_df['u_out'].shift(i_shift)\n    change_breath_id_flag = np.array((all_df['breath_id'] != all_df['breath_id'].shift(i_shift)))\n    all_df[f'u_out_bf_{i_shift}'][change_breath_id_flag] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\n    all_df[f'u_out_bf_{i_shift}'] = all_df[f'u_out_bf_{i_shift}'].astype('float32')\n\nall_df.head(83)","8a1dd83d":"num_shift = 10\n\nfor i_shift in range(1, num_shift+1):\n    all_df[f'u_out_diff_bf_{i_shift}'] = all_df['u_out_diff'].shift(i_shift)\n    change_breath_id_flag = np.array((all_df['breath_id'] != all_df['breath_id'].shift(i_shift)))\n    all_df[f'u_out_diff_bf_{i_shift}'][change_breath_id_flag] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\n    all_df[f'u_out_diff_bf_{i_shift}'] = all_df[f'u_out_diff_bf_{i_shift}'].astype('float32')\n\nall_df.head(83)","c9ec4eeb":"num_shift = 10\n\nfor i_shift in range(1, num_shift+1):\n    all_df[f'u_out_slope_bf_{i_shift}'] = all_df['u_out_slope'].shift(i_shift)\n    change_breath_id_flag = np.array((all_df['breath_id'] != all_df['breath_id'].shift(i_shift)))\n    all_df[f'u_out_slope_bf_{i_shift}'][change_breath_id_flag] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\n    all_df[f'u_out_slope_bf_{i_shift}'] = all_df[f'u_out_slope_bf_{i_shift}'].astype('float32')\n\nall_df.head(83)","6fb27d88":"num_shift = 30\n\nfor i_shift in range(1, num_shift+1):\n    all_df[f'u_in_bf_{i_shift}'] = all_df['u_in'].shift(i_shift)\n    change_breath_id_flag = np.array((all_df['breath_id'] != all_df['breath_id'].shift(i_shift)))\n    all_df[f'u_in_bf_{i_shift}'][change_breath_id_flag] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\n    all_df[f'u_in_bf_{i_shift}'] = all_df[f'u_in_bf_{i_shift}'].astype('float32')\n\nall_df.head(83)","8ca4792d":"num_shift = 30\n\nfor i_shift in range(1, num_shift+1):\n    all_df[f'u_in_diff_bf_{i_shift}'] = all_df['u_in_diff'].shift(i_shift)\n    change_breath_id_flag = np.array((all_df['breath_id'] != all_df['breath_id'].shift(i_shift)))\n    all_df[f'u_in_diff_bf_{i_shift}'][change_breath_id_flag] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\n    all_df[f'u_in_diff_bf_{i_shift}'] = all_df[f'u_in_diff_bf_{i_shift}'].astype('float32')\n\nall_df.head(83)","48bf4d32":"num_shift = 30\n\nfor i_shift in range(1, num_shift+1):\n    all_df[f'u_in_slope_bf_{i_shift}'] = all_df['u_in_slope'].shift(i_shift)\n    change_breath_id_flag = np.array((all_df['breath_id'] != all_df['breath_id'].shift(i_shift)))\n    all_df[f'u_in_slope_bf_{i_shift}'][change_breath_id_flag] = 0.0 # \u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f0.0\u3092\u4ee3\u5165\n    all_df[f'u_in_slope_bf_{i_shift}'] = all_df[f'u_in_slope_bf_{i_shift}'].astype('float32')\n\nall_df.head(83)","70ef771d":"num_shift_list = [1, 2, 3, 4, 5, 10, 20, 30]\nfor i_range in num_shift_list:\n    all_df[f'u_in_ave_bf_{i_range}'] = np.average(all_df.loc[:, f'u_in_bf_1':f'u_in_bf_{i_range}'], axis=1)\n    all_df[f'u_in_ave_bf_{i_range}'] = all_df[f'u_in_ave_bf_{i_range}'].astype('float32')\n    \nall_df.head(83)","38e8a498":"num_shift_list = [1, 2, 3, 4, 5, 10, 20, 30]\nfor i_range in num_shift_list:\n    all_df[f'u_in_var_bf_{i_range}'] = np.var(all_df.loc[:, f'u_in_bf_1':f'u_in_bf_{i_range}'], axis=1)\n    all_df[f'u_in_var_bf_{i_range}'] = all_df[f'u_in_var_bf_{i_range}'].astype('float32')\n    \nall_df.head(83)","3a781289":"num_shift_list = [1, 2, 3, 4, 5, 10, 20, 30]\nfor i_range in num_shift_list:\n    all_df[f'u_in_slope_ave_bf_{i_range}'] = np.var(all_df.loc[:, f'u_in_slope_bf_1':f'u_in_slope_bf_{i_range}'], axis=1)\n    all_df[f'u_in_slope_ave_bf_{i_range}'] = all_df[f'u_in_slope_ave_bf_{i_range}'].astype('float32')\n    \nall_df.head(83)","391ea090":"num_shift_list = [1, 2, 3, 4, 5, 10, 20, 30]\nfor i_range in num_shift_list:\n    all_df[f'u_in_slope_var_bf_{i_range}'] = np.var(all_df.loc[:, f'u_in_slope_bf_1':f'u_in_slope_bf_{i_range}'], axis=1)\n    all_df[f'u_in_slope_var_bf_{i_range}'] = all_df[f'u_in_slope_var_bf_{i_range}'].astype('float32')\n    \nall_df.head(83)","be54a9ad":"all_df","c5d44abb":"%%time\nwith h5py.File('all_df.h5', \"w\") as file:\n    # \u8f9e\u66f8\u3068\u540c\u3058\u3067\u9806\u756a\u304c\u4fdd\u6301\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u9806\u756a\u3092\u4fdd\u6301\u3057\u305fcolumns\u914d\u5217\u3092\u4fdd\u5b58\n    file.create_dataset('columns', data=all_df.columns, dtype=h5py.special_dtype(vlen=str), compression=\"gzip\")\n    \n    # \u30c7\u30fc\u30bf\u306e\u683c\u7d0d\n    for column in all_df.columns:\n        dt = all_df[column].dtype if all_df[column].dtype!=\"object\" else h5py.special_dtype(vlen=str)\n        file.create_dataset(column, data=all_df[column], dtype=dt, compression=\"gzip\")","c1123c39":"%%time\nwith h5py.File('all_df.h5', 'r') as file_r:\n    # colums\u3092\u5168\u8868\u793a\n    print(list(file_r.keys()))\n\n    # \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n    all_df = pd.DataFrame([])\n    for column, data in file_r.items():\n        all_df[column] = data","f67805c4":"all_df","293ba160":"%%time\nall_df.to_pickle('all_df.pkl')","a318f7b2":"### u_in\/time_interval\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_in_slope**","d27f4836":"\u8aad\u307f\u51fa\u3057\u4f8b","a004511e":"### 0~30\u30b5\u30f3\u30d7\u30eb\u524d\u306eu_in\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_in_bf_(num)**","4f9ac38a":"### u_out_diff\/time_interval_bf\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_out_slope**","ef554082":"### 1.1 \u30a4\u30f3\u30dd\u30fc\u30c8","387df3d4":"### pickle\u30c7\u30fc\u30bf\u3078\u306e\u4fdd\u5b58\n\n- \u30e1\u30ea\u30c3\u30c8:\n    - \u8aad\u307f\u8fbc\u307f\u3001\u66f8\u304d\u8fbc\u307f\u306b\u304b\u304b\u308b\u6642\u9593\u304c\u5c11\u306a\u3044\n    - \u8aad\u307f\u8fbc\u307f\u304c\u7c21\u5358(pd.read_pickle\u3067OK)\n- \u30c7\u30e1\u30ea\u30c3\u30c8:\n    - \u5727\u7e2e\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u5927\u304d\u304f\u306a\u308b\n    - \u66f8\u304d\u8fbc\u307f\u6642\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u30b3\u30d4\u30fc\u304c\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u30e1\u30e2\u30ea\u304c\u4fdd\u5b58\u3059\u308b\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306e2\u500d\u5fc5\u8981","a35dd4d4":"### hdf5\u30c7\u30fc\u30bf\u3078\u306e\u4fdd\u5b58\n\n- \u30e1\u30ea\u30c3\u30c8:\n    - \u5fc5\u8981\u306acolum\u3060\u3051\u3092\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u53ef\u80fd(\u5c11\u3057\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u5fc5\u8981)\n    - \u9010\u6b21\u4fdd\u5b58\u3092\u884c\u3046\u305f\u3081\u4fdd\u5b58\u6642\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u5927\u304d\u304f\u306a\u3089\u306a\u3044\n    - gzip\u306b\u3088\u308b\u5727\u7e2e\u304c\u53ef\u80fd(\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3092\u534a\u5206\u306b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd)\n- \u30c7\u30e1\u30ea\u30c3\u30c8:\n    - \u4fdd\u5b58\u3001\u8aad\u307f\u8fbc\u307f\u306b\u6642\u9593\u304c\u304b\u304b\u308b(\u305f\u3060\u3057\u3001\u8aad\u307f\u8fbc\u307f\u6642\u306fcolumn\u6307\u5b9a\u304c\u53ef\u80fd)\n- \u53c2\u8003:\n    - https:\/\/qiita.com\/sage-git\/items\/1d17d4058eca6a6a4826","0e672bf3":"### 0~20\u30b5\u30f3\u30d7\u30eb\u524d\u306eu_out\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_out_bf_(num)**","678ce4cc":"### u_out[i]-u_out[i-1]\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_out_diff**","7db5b01f":"# Google Brain Ventilator Pressure Prediction Feature Enginering\n\n- \u3053\u306enotebook\u306e\u76ee\u7684\n    - [Google Brain \u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3](https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction)\u306b\u3064\u3044\u3066\u3001\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u6709\u7528\u305d\u3046\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\n    - \u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u3092\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\n    \n- \u3053\u306enotebook\u3067\u51fa\u529b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n    - https:\/\/www.kaggle.com\/tetsuya777\/google-brain-ventilator-pressure-dataset","c30c2658":"### \u524d\u5f8c\u306etime_step\u9593\u9694\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**time_interval**\n\n\u5b58\u5728\u3057\u306a\u3044\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f0.0\u3092\u4ee3\u5165\u3059\u308b","4fd83fe2":"### 0~30\u30b5\u30f3\u30d7\u30eb\u524d\u307e\u3067\u306eu_in_slope\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_in_slope_bf_(num)**","04fb4a08":"\u4ee5\u4e0a","846c1691":"### 0~10\u30b5\u30f3\u30d7\u30eb\u524d\u307e\u3067\u306eu_out_diff\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_out_diff_bf_(num)**","f8b5fd4a":"## 1. \u6e96\u5099","eed28f8e":"### 0~30\u30b5\u30f3\u30d7\u30eb\u524d\u307e\u3067\u306eu_in_diff\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_in_diff_bf_(num)**","27b6de15":"### 0~30\u30b5\u30f3\u30d7\u30eb\u524d\u307e\u3067\u306eu_in_slope\u306e\u5206\u6563\u5024\u306e\u8ffd\u52a0...**u_in_slope_var_bf_(num)**","7a48251a":"### 0~30\u30b5\u30f3\u30d7\u30eb\u524d\u307e\u3067\u306eu_in\u306e\u5206\u6563\u5024\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_in_var_bf_(num)**","ac99a3da":"### 0~10\u30b5\u30f3\u30d7\u30eb\u524d\u307e\u3067\u306eu_out_slope\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_out_slope_bf_(num)**","a6f42b9a":"## 2 \u7279\u5fb4\u91cf\u306e\u4f5c\u6210","efadc037":"### 1.2 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f","ab1b0f3a":"### 0~30\u30b5\u30f3\u30d7\u30eb\u524d\u307e\u3067\u306eu_in_slope\u306e\u5e73\u5747\u5024\u306e\u8ffd\u52a0...**u_in_slope_ave_bf_(num)**","b279e4e9":"### 0~30\u30b5\u30f3\u30d7\u30eb\u524d\u307e\u3067\u306eu_in\u306e\u5e73\u5747\u5024\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_in_ave_bf_(num)**","af5fb104":"### 3. \u30d5\u30a1\u30a4\u30eb\u306e\u51fa\u529b","947e9400":"### u_in[i]-u_in[i-1]\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0...**u_in_diff**"}}