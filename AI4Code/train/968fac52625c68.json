{"cell_type":{"3b2cbd9a":"code","8302695f":"code","d27bdf3f":"code","95fae941":"code","c83e5158":"code","d7feee0d":"code","71cc6028":"code","75a3ea81":"code","79350f05":"code","b014a979":"code","2417470d":"code","77d1adf0":"code","7ca9c381":"code","9c99e545":"code","4a426f77":"code","39859213":"code","cea906ff":"code","0cd2dabc":"markdown","454ce593":"markdown","cffbbb45":"markdown","4006b55f":"markdown","01e5fee5":"markdown","3b6d5393":"markdown","67c7bde4":"markdown","1bb257de":"markdown","df1962b4":"markdown","c94603c4":"markdown","d28bf02c":"markdown","cdc275c4":"markdown","19bd4813":"markdown"},"source":{"3b2cbd9a":"# Import useful packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# If you have Jupyter Notebook installed, you can uncomment below \n#  to use interactive plots\n# !pip install ipympl\n# %matplotlib notebook","8302695f":"np.random.default_rng().uniform(low=0, high=1, size=7)","d27bdf3f":"s = np.random.default_rng().uniform(0,1,10000)\nplt.hist(s, 20, density=True)\n\nx = [0, 1]\ny_uniform = [1, 1]\nplt.plot(x, y_uniform, linewidth=2, color='r')\nplt.legend([\"PDF of Standard Uniform Distribution\",\"Histogram of random samples\"])\nplt.show()","95fae941":"np.random.default_rng().normal(size=7)","c83e5158":"from scipy.stats import norm\n\ns = np.random.default_rng().normal(size=5000)\nplt.hist(s, 30, density=True)\n\nx = np.linspace(-5, 5, 100)\ny_normal = norm.pdf(x)\nplt.plot(x, y_normal, linewidth=2, color='r')\nplt.legend([\"PDF of Standard Normal Distribution\",\"Histogram of random samples\"])\nplt.show()","d7feee0d":"sign = ((np.random.default_rng().uniform() > 0.5)*2-1)*1\/np.sqrt(4)\nprint(sign)","71cc6028":"s = 1\nM = 10\nsign = (np.random.default_rng().uniform() > 0.5)*2-1\nX = (np.random.default_rng().uniform(size=M) > 0.5)*2-1 \nprint(X)","75a3ea81":"Zi = np.sum(X)\nprint(Zi)","79350f05":"N = 1000\nM = 1\ns = 1\n\n# Initiate an empty array Z and fill in the values using a loop\nZ = np.empty((N))\nfor i in range(N):\n  X = ((np.random.default_rng().uniform(size=M) > 0.5)*2-1) * s\/np.sqrt(M)\n  Z[i] = np.sum(X)\n\n# Plot the histogram of the 1000 Zi's that we have generated\nn_bins = 2\nplt.hist(Z, bins=n_bins, density=True)\nx = np.linspace(-4, 4, 100)\ny_normal = norm.pdf(x)\nplt.plot(x, y_normal, linewidth=2, color='r')\n\nplt.title('Probability Distribution')\nplt.xlabel('Value')\nplt.ylabel('Probability Density')\n\n\nplt.legend([\"PDF of Standard Normal Distribution\",\"Histogram of random samples\"])\nplt.show()","b014a979":"N = 1000\nM = 4\ns = 1\n\n# Initiate an empty array Z and fill in the values using a loop\nZ = np.empty((N))\nfor i in range(N):\n  X = ((np.random.default_rng().uniform(size=M) > 0.5)*2-1) * s\/np.sqrt(M)\n  Z[i] = np.sum(X)\n\n# Plot the histogram of the 1000 Zi's that we have generated\nn_bins = 5\nplt.hist(Z, bins=n_bins, density=True)\nx = np.linspace(-4, 4, 100)\ny_normal = norm.pdf(x)\nplt.plot(x, y_normal, linewidth=2, color='r')\n\nplt.title('Probability Distribution')\nplt.xlabel('Value')\nplt.ylabel('Probability Density')\n\n\nplt.legend([\"PDF of Standard Normal Distribution\",\"Histogram of random samples\"])\nplt.show()","2417470d":"N = 1000\nM = 16\ns = 1\n\n# Initiate an empty array Z and fill in the values using a loop\nZ = np.empty((N))\nfor i in range(N):\n  X = ((np.random.default_rng().uniform(size=M) > 0.5)*2-1) * s\/np.sqrt(M)\n  Z[i] = np.sum(X)\n\n# Plot the histogram of the 1000 Zi's that we have generated\nn_bins = 10\nplt.hist(Z, bins=n_bins, density=True)\nx = np.linspace(-4, 4, 100)\ny_normal = norm.pdf(x)\nplt.plot(x, y_normal, linewidth=2, color='r')\n\nplt.title('Probability Distribution')\nplt.xlabel('Value')\nplt.ylabel('Probability Density')\n\n\nplt.legend([\"PDF of Standard Normal Distribution\",\"Histogram of random samples\"])\nplt.show()","77d1adf0":"N = 1000\nM = 32\ns = 1\n\n# Initiate an empty array Z and fill in the values using a loop\nZ = np.empty((N))\nfor i in range(N):\n  X = ((np.random.default_rng().uniform(size=M) > 0.5)*2-1) * s\/np.sqrt(M)\n  Z[i] = np.sum(X)\n\n# Plot the histogram of the 1000 Zi's that we have generated\nn_bins = 15\nplt.hist(Z, bins=n_bins, density=True)\nx = np.linspace(-4, 4, 100)\ny_normal = norm.pdf(x)\nplt.plot(x, y_normal, linewidth=2, color='r')\n\nplt.title('Probability Distribution')\nplt.xlabel('Value')\nplt.ylabel('Probability Density')\n\n\nplt.legend([\"PDF of Standard Normal Distribution\",\"Histogram of random samples\"])\nplt.show()","7ca9c381":"#calculating error of E using propagation formula\n\n#measurement\nL0 = 0.7\nh0 = 0.03\nb0 = 0.04\nF0 = 80\ndelta0 = 0.008\n\n#error\nL_sigma = 0.014\nh_sigma = 0.003\nb_sigma = 0.0004\nF_sigma = 0.8\ndelta_sigma = 0.00008\n\n#calculating partial derivative value\nL_d = 12*F0*L0**2\/(b0*delta0*h0**3)\nh_d = -12*F0*L0**3\/(b0*delta0*h0**4)\nb_d = -4*F0*L0**3\/(b0**2*delta0*h0**3)\nF_d = 4*L0**3\/(b0*delta0*h0**3)\ndelta_d = -4*F0*L0**3\/(b0**2*h0**3)\n\n#using propagation formula to calculate Young's modulus E error\nA = (L_d*L_sigma)**2 + (h_d*h_sigma)**2 + (b_d*b_sigma)**2 + (F_d*F_sigma)**2 + (delta_d*delta_sigma)**2\n\nE0 = 4*F0*L0**3\/(b0*delta0*h0**3)\nE_sigma = np.sqrt(A)\npercentage_error = E_sigma\/E0 * 100\n\nprint(E0)\nprint(E_sigma)\nprint(percentage_error)\n","9c99e545":"N = 10000  # Measure L for N times. You need to change this for your assignment.\n\nL = np.random.default_rng().normal(L0, L_sigma, N)\nh = np.random.default_rng().normal(h0, h_sigma, N)\nb = np.random.default_rng().normal(b0, b_sigma, N)\nF = np.random.default_rng().normal(F0, F_sigma, N)\ndelta = np.random.default_rng().normal(delta0, delta_sigma, N)\n\nE = 4*F*L**3\/(b*delta*h**3)\n","4a426f77":"E_mean = np.mean(E)\nprint(E_mean)\n\nE_sdt_rel = np.std(E)\/E0  # normalized st. d. of E\nmean_E = np.mean(E)\/E0 # normalized mean of E","39859213":"# Plot all measured variables in one histogram\nN_b = 30\n\nplt.hist(L\/L0, bins = N_b, density=True)\nplt.hist(h\/h0, bins = N_b, density=True)\nplt.hist(b\/b0, bins = N_b, density=True)\nplt.hist(F\/F0, bins = N_b, density=True)\nplt.hist(delta\/delta0, bins = N_b, density=True)\n\nplt.legend([\"L\", \"h\", \"b\", \"F\", \"delta\"])\nplt.xlim((0.7,1.3));","cea906ff":"# Plot the histogram of E\/E0\nplt.hist(E\/E0, bins = 50, density=True);","0cd2dabc":"`Zi` is the sum of M draws of the  random variable `Xj`:","454ce593":"Yes, it looks like a bel-shaped curve!\n\nChange `M`, `N`, `n_bins`, and see how things will change!\n\n## Hints for your assignment:\n- The $\\delta_j$ serves as the $X_j$ above; The $\\epsilon_i$ serves as the $Z_i$ above.\n- Note that $\\delta_j$ is a bit diffent than the  $X_j$ above so you need to modify the code!!\n- You are asked to \"Compare with a normal distribution with mean zero and standard deviation 1.\", so you need to plot your histogram against the standard normal distribution curve. Refer to figure(2) above to see how to plot the histogram and the PDF in the same plot.\n- Don't forget to add proper labels, figure captions, etc.\n- Besides the plots, you also need to write down your analysis and comments. What have you discovered when you change M, N and n_bins?\n\n---\n # Question 2: Error Propagation Formula\n## The Formula:\nWe are doing some experiments, and for every set of experiment, \nthere are $n$ independent measured variables:\n$$X_1, X_2, ... X_n$$\n\nAnd the uncertainty (error) of each measured variable is:\n$$\\sigma_1, \\sigma_2, ... \\sigma_n$$\n\nAnother quantity  is derived from the above measured variables as:\n$$Y=f(X_1, X_2, ..., X_n)$$\nSo the uncertainty (error) of $Y$ is just a propagation of the uncertainties of the $X_i$s:\n$$\\sigma_y = \\sqrt{(\\frac{\\partial f}{\\partial X_1})^2\\sigma_1^2 + (\\frac{\\partial f}{\\partial X_2})^2\\sigma_2^2 + ... + (\\frac{\\partial f}{\\partial X_n})^2\\sigma_n^2 }$$\n\n## The Assignment Scenario\nIn the assignment, \n- $F$, $L$, $\\delta$, $b$, $h$  corresponds to $X_i$'s in the above formula (the directly measured variables).\n- $E$ corresponds to $Y$ (the derived variable).\n\n\n### Question 2(a):\nYou can apply the error propagation formula analytically! You should explain in your report how you used the formula. Using LaTeX or MathType in Word to typeset your math equations is highly appreciated. Alternatively, you can take a photo of your handwitten equaitons and attache that to the report (not recommended).\n\n### Question 2(b): Monte Carlo Simulation\nInstead of going to the lab and measure $F$, $L$, $\\delta$, $b$, $h$  for 10000 times, we can use RNG to simulate the \"measurements\", now that we know the mean and standard deviation of each measured variable and assuming they obey normal distribution.\nFor example, for the measurement of $L$:\n","cffbbb45":"### Standard normal distribution RNG\nSyntax: `np.random.default_rng().normal(loc, scale, size)`\n\nDraw random samples from a normal (Gaussian) distribution.\n\n`loc`:\nMean (\u201ccentre\u201d) of the distribution.\n\n`scale`:\nStandard deviation (spread or \u201cwidth\u201d) of the distribution.\n\n`size`: Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. If size is None (default), a single value is returned if loc and scale are both scalars. \n\nDocumentaion: https:\/\/numpy.org\/doc\/stable\/reference\/random\/generated\/numpy.random.Generator.normal.html\n\nFor example, we draw 7 samples from a standard __normal__ distribution:","4006b55f":"### Report the simulation result\nFirst, from the theory,\n$$E = E_{best} \\pm \\sigma_E$$\nDon't forget the units in your report, or report the non-dimensionalzied results.","01e5fee5":"What have you observed? Is E\/E0 normal distribution? Why or why not?\nNO","3b6d5393":"We can demonstrate that the RNG works by plotting the histogram against the PDF (probability density function) of standard uniform distribution.","67c7bde4":"MECH 305\/6\n# Tutorial 3\nJacky Liang\n\nFeb 8, 2021\n\n**Contents**\n- Random Number Generator in Python\n- Central Limit Theorem (CLT)\n- Error Propagation Formula\n---\n## Random Number Generator\nWe are going to use functions from the `numpy.random` namespace to generate random numbers from different distributions. \n### Standard uniform distribution RNG\nSyntax: `np.random.default_rng().uniform(low, high, size)`\n\nDraw samples from a uniform distribution.\n\nSamples are uniformly distributed over the half-open interval [low, high) (includes low, but excludes high). In other words, any value within the given interval is equally likely to be drawn by uniform.\n\nDocumentaion: https:\/\/numpy.org\/doc\/stable\/reference\/random\/generated\/numpy.random.Generator.uniform.html\n\nFor example, we draw 7 samples from a standard uniform distribution:","1bb257de":"If we run this sections many times and record the value of `Zi` each time, according to CLT,  `Zi` should obey normal distribution. We are going to do this programmaically instead of manually.\n\nLet's get N=1000 `Zi`s:","df1962b4":"We do the coin-toss $M$ times, and record our result in an array `X`:","c94603c4":"We can demonstrate that the RNG works by plotting the histogram against the PDF (probability density function) of standard normal distribution. As the `s` array gets larger, the histogram will look more and more like the PDF of standard normal distribution.\n\nUse `scipy.stats.norm.pdf(x)` to generate the PDF of normal distribution. [Read more here](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.stats.norm.html)","d28bf02c":"# Question 1: Numerical Experiment of Central Limit Theorem\n\n## Central Limit Theorem Statement\n$X_j$: A random variable of __any__ distribution.\n\n$Z$: Another random variable that is **a sum of** many draws of the  random variable $X_j$.\n\n$$Z = X_1 + X_2 + ... + X_M$$\n\nWhen  $M$ is a large number, \n $Z$ will have normal distribution, i. e. if we generate a lot of  $Z$'s and make a histogram, we will see a bell-shaped curve.\n\n## Example to Demonstrate CLT\nCLT is difficult to prove mathematically, but it's easy to demonstrate through numerical experiments. Question 1 of your assignment does this exactly. Here in this tutorial, we are going to demonstrate CLT from a slightly different case than your assignment. Here, let's say,\n\n$X_j = \\pm 1$:  is the result of a \"coin-toss\", +1 meaning a \"head\"; -1 meaning a tail.\nWe use a standard uniform distribution generator, and define if the generated number is > 0.5, Xj is 1, if not, Xj is -1. (There are other ways to simulate the coin-toss. The way I show here is just am example.)","cdc275c4":"### RNG for other distributions\n\nRNG for other distributions are also available in `numpy.random.Generator`. Documentation:\nhttps:\/\/numpy.org\/doc\/stable\/reference\/random\/generator.html#distributions\n\nUsage of these functions are similar to the two examples above. You might use some of them (such as binomial and poisson distribution) in the future and you can easily read the examples for those functions in the documentation.\n\n---","19bd4813":"Is mean(E) and E_best the same? Why or why not? NO\n\nYou can also normalize the results relative to E0 and report the normalized values:"}}