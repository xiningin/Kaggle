{"cell_type":{"3133e0ce":"code","622b33b0":"code","1cc28dd0":"code","de0b7d16":"code","dab6dff9":"code","c317c78f":"code","efe24298":"code","b68ba572":"code","a002a89d":"code","0212f2d7":"code","a4f19aec":"code","f001cdfa":"code","3cc0d351":"code","49289d63":"code","1a99844c":"code","688b9ab3":"code","f92db7f8":"code","d3f86905":"code","cee7a7bc":"code","03663c81":"code","37c17fbe":"code","7fac622d":"code","d51152b3":"code","494e557b":"code","200f6a10":"code","ba76a95d":"code","2b246523":"code","074069bc":"code","5159c66b":"code","7c71e84c":"code","da4b85c2":"code","dc327b1f":"code","8a230d71":"code","d3e00dae":"code","c5434bc3":"code","16ad0d51":"code","1adcbb4a":"code","0481fc66":"code","1f85a909":"code","291717d9":"code","6c6e2ec6":"code","ada9abab":"code","611682ba":"code","d3b1a08c":"code","ac9b88df":"code","f52c17a4":"code","5d184140":"code","33766d7a":"code","774fd9be":"code","0f536256":"code","30d27630":"code","a7174e17":"code","211810d1":"code","61d97d9d":"code","c6e8f55f":"code","a5c4135c":"code","44f65166":"code","415b76e4":"code","9a1898cf":"markdown","dc632b00":"markdown","fa3a45a5":"markdown","6540c69b":"markdown","04dff8a1":"markdown","30ffb0ff":"markdown","90d338ea":"markdown","31d03eb9":"markdown","30378323":"markdown","4ca3a0d5":"markdown","ce207015":"markdown","3d8ea810":"markdown","c8697ea4":"markdown","a263f99c":"markdown","6fb16a3c":"markdown","b561c706":"markdown","35485d21":"markdown","d382b9d8":"markdown","dd8e97d4":"markdown","2cb5e0a0":"markdown","5b35c139":"markdown","ba471b94":"markdown","372b68cb":"markdown","a6fd9304":"markdown","f2400d0d":"markdown","586e3160":"markdown","11ad9599":"markdown","29726c4e":"markdown","1aef482f":"markdown","459ccc25":"markdown","b3d294c7":"markdown","9f57aea9":"markdown"},"source":{"3133e0ce":"import os\nimport re\nimport numpy as np \nimport pandas as pd \nfrom collections import Counter\nimport nltk","622b33b0":"with open('..\/input\/text-corpus\/wiki_corpus.txt', 'r', encoding='ISO-8859-1') as f:\n    file = f.readlines()","1cc28dd0":"# A small sample of the corpus\nfile[0][:3000]","de0b7d16":"def process_data(lines):\n    \"\"\"\n    Input: \n        A file_name which is found in your current directory. You just have to read it in. \n    Output: \n        words: a list containing all the words in the corpus (text file you read) in lower case. \n    \"\"\"\n    words = []        \n    for line in lines:\n        line = line.strip().lower()\n        word = re.findall(r'\\w+', line)\n        words.extend(word)\n    \n    return words","dab6dff9":"word_l = process_data(file)\nvocab = set(word_l)\nprint(f\"The first ten words in the text are: \\n{word_l[0:10]}\")\nprint(f\"There are {len(vocab)} unique words in the vocabulary.\")","c317c78f":"def find_wrong_word(sent, vocab):\n    wrong_words = []\n    sent = sent.strip().lower().split(\" \")\n    for word in sent:\n        if word not in vocab:\n            wrong_words.append(word)\n    return wrong_words","efe24298":"find_wrong_word('he is goinng home', vocab)","b68ba572":"def delete_letter(word, verbose=False):\n    '''\n    Input:\n        word: the string\/word for which you will generate all possible words \n                in the vocabulary which have 1 missing character\n    Output:\n        delete_l: a list of all possible strings obtained by deleting 1 character from word\n    '''\n    \n    delete_l = []\n    split_l = []\n    split_l = [(word[:i], word[i:]) for i in range(len(word))]\n    delete_l = [s[0]+s[1][1:] for s in split_l]\n    if verbose: print(f\"input word : {word} \\nsplit_l = {split_l}, \\ndelete_l = {delete_l}\")\n\n    return delete_l","a002a89d":"delete_word_l = delete_letter(word=\"cans\",\n                        verbose=True)","0212f2d7":"def switch_letter(word, verbose=False):\n    '''\n    Input:\n        word: input string\n     Output:\n        switches: a list of all possible strings with one adjacent charater switched\n    ''' \n    \n    switch_l = []\n    split_l = []\n    split_l = [(word[:i], word[i:]) for i in range(len(word))]\n    for s in split_l:\n        if len(s[1])>2:\n            temp = s[0] + s[1][1] + s[1][0] + s[1][2:]\n        elif len(s[1]) == 2:\n            temp = s[0] + s[1][1] + s[1][0]\n        elif len(s[1]) == 1:\n            continue\n        switch_l.append(temp)\n    \n    if verbose: print(f\"Input word = {word} \\nsplit_l = {split_l} \\nswitch_l = {switch_l}\") \n\n    return switch_l","a4f19aec":"switch_word_l = switch_letter(word=\"eta\",\n                         verbose=True)","f001cdfa":"def replace_letter(word, verbose=False):\n    '''\n    Input:\n        word: the input string\/word \n    Output:\n        replaces: a list of all possible strings where we replaced one letter from the original word. \n    ''' \n    \n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    replace_l = []\n    split_l = []\n    split_l = [(word[:i], word[i:]) for i in range(len(word))]\n    for s in split_l:\n        if len(s[1]) == 1:\n            for l in letters:\n                if l != s[1][0]:\n                    temp = l\n                    replace_l.append(s[0]+temp)\n        elif len(s) > 1:\n            for l in letters:\n                if l != s[1][0]:\n                    temp = l + s[1][1:]\n                    replace_l.append(s[0]+temp)\n        \n    replace_set = set(replace_l)\n    \n    # turn the set back into a list and sort it, for easier viewing\n    replace_l = sorted(list(replace_set))\n    \n    if verbose: print(f\"Input word = {word} \\nsplit_l = {split_l} \\nreplace_l {replace_l}\")   \n    \n    return replace_l","3cc0d351":"replace_l = replace_letter(word='can',\n                              verbose=True)","49289d63":"print(f\"Number of outputs of switch_letter('at') is {len(switch_letter('fate'))}\")","1a99844c":"def insert_letter(word, verbose=False):\n    '''\n    Input:\n        word: the input string\/word \n    Output:\n        inserts: a set of all possible strings with one new letter inserted at every offset\n    ''' \n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    insert_l = []\n    split_l = []\n    split_l = [(word[:i], word[i:]) for i in range(len(word)+1)]\n    for s in split_l:\n        for l in letters:\n            insert_l.append(s[0]+l+s[1])\n\n    if verbose: print(f\"Input word {word} \\nsplit_l = {split_l} \\ninsert_l = {insert_l}\")\n    \n    return insert_l","688b9ab3":"insert_l = insert_letter('at', True)\nprint(f\"Number of strings output by insert_letter('at') is {len(insert_l)}\")","f92db7f8":"def edit_one_letter(word, allow_switches = True):\n    \"\"\"\n    Input:\n        word: the string\/word for which we will generate all possible wordsthat are one edit away.\n    Output:\n        edit_one_set: a set of words with one possible edit. Please return a set. and not a list.\n    \"\"\"\n    \n    edit_one_set = set()\n    insert_l = insert_letter(word)\n    delete_l = delete_letter(word)\n    replace_l = replace_letter(word)\n    switch_l = switch_letter(word)\n    \n    if allow_switches:\n        ans = insert_l + delete_l + replace_l + switch_l\n    else:\n        ans = insert_l + delete_l + replace_l\n        \n    edit_one_set = set(ans)\n\n    return edit_one_set","d3f86905":"tmp_word = \"at\"\ntmp_edit_one_set = edit_one_letter(tmp_word)\n# turn this into a list to sort it, in order to view it\ntmp_edit_one_l = sorted(list(tmp_edit_one_set))\n\nprint(f\"input word : {tmp_word} \\nedit_one_l \\n{tmp_edit_one_l}\\n\")\n#print(f\"The type of the returned object should be a set {type(tmp_edit_one_set)}\")\nprint(f\"Number of outputs from edit_one_letter('at') is {len(edit_one_letter('at'))}\")","cee7a7bc":"def edit_two_letters(word, allow_switches = True):\n    '''\n    Input:\n        word: the input string\/word \n    Output:\n        edit_two_set: a set of strings with all possible two edits\n    '''\n    \n    edit_two_set = set()\n    one_edit = edit_one_letter(word)\n    ans = []\n    for w in one_edit:\n        ans.append(w)\n        ans.extend(edit_one_letter(w))\n        \n    edit_two_set = set(ans)\n    \n    return edit_two_set","03663c81":"tmp_edit_two_set = edit_two_letters(\"a\")\ntmp_edit_two_l = sorted(list(tmp_edit_two_set))\nprint(f\"Number of strings with edit distance of two: {len(tmp_edit_two_l)}\")\nprint(f\"First 10 strings {tmp_edit_two_l[:10]}\")\nprint(f\"Last 10 strings {tmp_edit_two_l[-10:]}\")\nprint(f\"The data type of the returned object should be a set {type(tmp_edit_two_set)}\")\nprint(f\"Number of strings that are 2 edit distances from 'at' is {len(edit_two_letters('at'))}\")","37c17fbe":"def get_count(word_l):\n    '''\n    Input:\n        word_l: a set of words representing the corpus. \n    Output:\n        word_count_dict: The wordcount dictionary where key is the word and value is its frequency.\n    '''\n    word_count_dict = {}  \n    word_count_dict = Counter(word_l)\n    return word_count_dict","7fac622d":"word_count_dict = get_count(word_l)\nprint(f\"There are {len(word_count_dict)} key values pairs\")\nprint(f\"The count for the word 'thee' is {word_count_dict.get('thee',0)}\")","d51152b3":"def get_probs(word_count_dict):\n    '''\n    Input:\n        word_count_dict: The wordcount dictionary where key is the word and value is its frequency.\n    Output:\n        probs: A dictionary where keys are the words and the values are the probability that a word will occur. \n    '''\n    probs = {} \n    total = 1\n    for word in word_count_dict.keys():\n        total = total + word_count_dict[word]\n        \n    for word in word_count_dict.keys():\n        probs[word] = word_count_dict[word]\/total\n    return probs","494e557b":"probs = get_probs(word_count_dict)\nprint(f\"Length of probs is {len(probs)}\")\nprint(f\"P('you') is {probs['you']:.4f}\")","200f6a10":"prob_df = pd.DataFrame({'word':probs.keys(), 'probability':probs.values()}).sort_values(by='probability', ascending=False)\nprob_df.sample(5)","ba76a95d":"prob_df.head().plot.bar(x='word', y='probability')","2b246523":"def get_corrections(word, probs, vocab, n=2, verbose = False):\n    '''\n    Input: \n        word: a user entered string to check for suggestions\n        probs: a dictionary that maps each word to its probability in the corpus\n        vocab: a set containing all the vocabulary\n        n: number of possible word corrections you want returned in the dictionary\n    Output: \n        n_best: a list of tuples with the most probable n corrected words and their probabilities.\n    '''\n    \n    suggestions = []\n    n_best = []\n    \n   \n    if word in probs.keys():\n        suggestions.append(word)\n    for w in edit_one_letter(word):\n        if len(suggestions) == n:\n            break\n        if w in probs.keys():\n            suggestions.append(w)\n    for w in edit_two_letters(word):\n        if len(suggestions) == n:\n            break\n        if w in probs.keys():\n            suggestions.append(w)\n        \n    best_words = {}\n    \n    for s in suggestions:\n        best_words[s] = probs[s]\n        \n    best_words = sorted(best_words.items(), key=lambda x: x[1], reverse=True)\n    \n    n_best = best_words \n    \n    if verbose: print(\"entered word = \", word, \"\\nsuggestions = \", suggestions)\n\n    return n_best","074069bc":"def get_correct_word(word, vocab, probs, n): \n    corrections = get_corrections(word, probs, vocab, n, verbose=False)\n#    print(corrections)\n    if len(corrections) == 0:\n        return word\n    \n    final_word = corrections[0][0]\n    final_prob = corrections[0][1]\n    for i, word_prob in enumerate(corrections):\n        #print(f\"word {i}: {word_prob[0]}, probability {word_prob[1]:.6f}\")\n        if word_prob[1] > final_prob:\n            final_word = word_prob[0]\n            final_prob = word_prob[1]\n    return final_word","5159c66b":"get_correct_word('annd', vocab, probs, 100)","7c71e84c":"def autocorrect(sentence, vocab, probs):\n    print(\"Input sentence : \", sentence)\n    wrong_words = find_wrong_word(sentence, vocab)\n    print(\"Wrong words : \", wrong_words)\n    #print(wrong_words)\n    correct_words = []\n    for word in sentence.strip().lower().split(\" \"):\n        if word in wrong_words:\n            correct_word = get_correct_word(word, vocab, probs, 15)\n            #print(word, correct_word)\n            word = correct_word\n        correct_words.append(word)\n    print(\"Output Sentence : \", \" \".join(correct_words).capitalize())","da4b85c2":"autocorrect(\"he is goinng home\", vocab, probs)","dc327b1f":"autocorrect(\"honsty is the best pooliccy\", vocab, probs)","8a230d71":"autocorrect(\"life is a diink annd lve is a druug\", vocab, probs)","d3e00dae":"def count_n_grams(data, n, start_token='<s>', end_token = '<e>'):\n    \n    # Initialize dictionary of n-grams and their counts\n    n_grams = {}\n\n    \n    for sentence in data: \n        \n        # prepend start token n times, and  append <e> one time\n        sentence = [start_token]*n + sentence + [end_token]\n        sentence = tuple(sentence)\n        \n        for i in range(len(sentence)-n): \n            n_gram = sentence[i:i+n]\n            if n_gram in n_grams.keys():\n                n_grams[n_gram] += 1\n            else:\n                n_grams[n_gram] = 1\n    return n_grams","c5434bc3":"### SOME UTILITY\n\ndef split_to_sentences(data):\n    #sentences = data.split(\"\\n\")\n    sentences = [s.strip() for s in data]\n    sentences = [s for s in sentences if len(s) > 0]\n    return sentences    \n\ndef tokenize_sentences(sentences):\n    tokenized_sentences = []\n    for sentence in sentences:\n        sentence = sentence.lower()\n        tokenized = nltk.tokenize.word_tokenize(sentence)\n        tokenized_sentences.append(tokenized)\n    return tokenized_sentences\n\n\ndef get_tokenized_data(data):\n    sentences = split_to_sentences(data)\n    tokenized_sentences = tokenize_sentences(sentences)\n    return tokenized_sentences","16ad0d51":"tokenized_data = get_tokenized_data(file)\nbigram_counts = count_n_grams(tokenized_data, 2)","1adcbb4a":"def get_bigram_prob(word, prev_word, bigram_counts, factor):\n    key = tuple([prev_word, word])\n    #print(key)  \n    \n    ksum = 0\n    occ = 0\n    for k, v in bigram_counts.items():\n        if k[0] == prev_word:\n            ksum = ksum + v\n            occ = occ + 1\n    #print(ksum)\n    #print(occ)\n    \n    count = 0\n    if key in bigram_counts.keys():\n        count = bigram_counts[key]\n    #print(type(occ))\n    \n    smooth_count = count + factor \n    smooth_occ = ksum + occ*factor\n    probability = smooth_count \/ smooth_occ\n    #print(probability)\n    return probability","0481fc66":"get_bigram_prob('is', 'that', bigram_counts, 1)","1f85a909":"def get_corrections_bigram(word, prev_word, probs, vocab, bigram_counts, unigram_weight=0.3, bigram_weight=0.7, n=5, verbose = False):\n    '''\n    Input: \n        word: a user entered string to check for suggestions\n        probs: a dictionary that maps each word to its probability in the corpus\n        vocab: a set containing all the vocabulary\n        n: number of possible word corrections you want returned in the dictionary\n    Output: \n        n_best: a list of tuples with the most probable n corrected words and their probabilities.\n    '''\n    \n    suggestions = []\n    n_best = []\n    \n   \n    if word in probs.keys():\n        suggestions.append(word)\n    for w in edit_one_letter(word):\n        if len(suggestions) == n:\n            break\n        if w in probs.keys():\n            suggestions.append(w)\n    for w in edit_two_letters(word):\n        if len(suggestions) == n:\n            break\n        if w in probs.keys():\n            suggestions.append(w)\n        \n        \n    best_words = {}\n    \n    for s in suggestions:\n        #best_words[s] = probs[s]\n        unigram_prob = probs[s]\n        #print(s)\n        try:\n            bigram_prob = get_bigram_prob(s, prev_word, bigram_counts, 1)\n        except:\n            bigram_prob = 0.0000000000000000001\n\n        final_score = unigram_weight*unigram_prob + bigram_weight*bigram_prob\n        \n        best_words[s] = final_score     \n        \n    best_words = sorted(best_words.items(), key=lambda x: x[1], reverse=True)\n    \n    n_best = best_words \n    \n    if verbose: print(\"entered word = \", word, \"\\nsuggestions = \", suggestions)\n\n    return n_best","291717d9":"def get_correct_word_bigram(word, prev_word, probs, vocab, bigram_counts, unigram_weight, bigram_weight, n): \n    corrections = get_corrections_bigram(word, prev_word, probs, vocab, \n                                         bigram_counts, unigram_weight, bigram_weight, n, verbose=False)\n    #print(corrections)\n    if len(corrections) == 0:\n        return word\n    \n    final_word = corrections[0][0]\n    final_prob = corrections[0][1]\n    for i, word_prob in enumerate(corrections):\n        #print(f\"word {i}: {word_prob[0]}, probability {word_prob[1]:.6f}\")\n        if word_prob[1] > final_prob:\n            final_word = word_prob[0]\n            final_prob = word_prob[1]\n    return final_word","6c6e2ec6":"def autocorrect_bigram(sentence, vocab, probs, bigram_counts):\n    print(\"Input sentence : \", sentence)\n    wrong_words = find_wrong_word(sentence, vocab)\n    print(\"Wrong words : \", wrong_words)\n    #print(wrong_words)\n    correct_words = []\n    word_list = sentence.strip().lower().split(\" \")\n    for i, word in enumerate(word_list):\n        #print(i, word)\n        \n        #### Previous word\n        if i==0:\n            prev_word = '<s>'\n        else:\n            prev_word = word_list[i-1]\n            \n        if word in wrong_words:\n            correct_word = get_correct_word_bigram(word, prev_word, probs, vocab, bigram_counts, 0.3, 0.7, 10)\n            #print(word, correct_word)\n            word = correct_word\n        correct_words.append(word)\n    print(\"Output Sentence : \", \" \".join(correct_words).capitalize())","ada9abab":"autocorrect_bigram('she is really beutifule', vocab, probs, bigram_counts)","611682ba":"autocorrect_bigram('you are not alowwed here', vocab, probs, bigram_counts)","d3b1a08c":"autocorrect_bigram('physics is the most amainzg subect', vocab, probs, bigram_counts)","ac9b88df":"def min_edit_distance(source, target, ins_cost = 1, del_cost = 1, rep_cost = 2):\n    '''\n    Input: \n        source: a string corresponding to the string you are starting with\n        target: a string corresponding to the string you want to end with\n        ins_cost: an integer setting the insert cost\n        del_cost: an integer setting the delete cost\n        rep_cost: an integer setting the replace cost\n    Output:\n        D: a matrix of len(source)+1 by len(target)+1 containing minimum edit distances\n        med: the minimum edit distance (med) required to convert the source string to the target\n    '''\n    \n    m = len(source) \n    n = len(target) \n    #initialize cost matrix with zeros and dimensions (m+1,n+1) \n    D = np.zeros((m+1, n+1), dtype=int) \n    \n    for row in range(1,m+1): \n        D[row,0] = D[row-1, 0] + del_cost\n        \n    for col in range(1,n+1):\n        D[0,col] = D[0, col-1] + ins_cost\n        \n    # Loop through row 1 to row m\n    for row in range(1,m+1): \n        # Loop through column 1 to column n\n        for col in range(1,n+1):\n            # Intialize r_cost to the 'replace' cost \n            r_cost = rep_cost\n            # Check to see if source character at the previous row\n            # matches the target character at the previous column, \n            if source[row-1] == target[col-1]:\n                # Update the replacement cost to 0 if source and target are the same\n                r_cost = 0\n            # Update the cost at row, col based on previous entries in the cost matrix\n            D[row,col] = D[row-1][col-1] + r_cost\n          \n    # Set the minimum edit distance with the cost found at row m, column n\n    med = D[m][n]\n    \n    return D, med","f52c17a4":"def get_correct_word_bigram_min_edit(word, prev_word, probs, vocab, bigram_counts, unigram_weight, bigram_weight, n, scale_dist): \n    corrections = get_corrections_bigram(word, prev_word, probs, vocab, \n                                         bigram_counts, unigram_weight, bigram_weight, n, verbose=False)\n    #print(corrections)\n    if len(corrections) == 0:\n        return word\n    \n    ### Make a dataframe of suggestions\n    words = []\n    probabs = []\n    dist = []\n    for pair in corrections:\n        words.append(pair[0])\n        probabs.append(pair[1])\n        _, distance = min_edit_distance(word, pair[0], 1, 1, 2)\n        dist.append(distance)\n        \n    df = pd.DataFrame({'suggestion':words, 'distance':dist, 'probability':probabs})\n    df['inv_dist'] = df['distance'].apply(lambda x : (1\/x)*scale_dist)\n    df['score'] = df['inv_dist'] + df['probability']\n    df = df.sort_values(by='score', ascending=False)\n    #df = df.sort_values(by=['distance', 'probability'], ascending=[True, False])\n    #display(df)\n    \n    final_word = df.iloc[0,0]\n    \n    return final_word","5d184140":"get_correct_word_bigram_min_edit('pulicy', 'best', probs, vocab, bigram_counts, 0.3, 0.7, 10, 0.001)","33766d7a":"def autocorrect_bigram_min_edit(sentence, vocab, probs, bigram_probability_df, scale_dist=0.001):\n    print(\"Input sentence : \", sentence)\n    wrong_words = find_wrong_word(sentence, vocab)\n    print(\"Wrong words : \", wrong_words)\n    #print(wrong_words)\n    correct_words = []\n    word_list = sentence.strip().lower().split(\" \")\n    for i, word in enumerate(word_list):\n        #print(i, word)\n        \n        #### Previous word\n        if i==0:\n            prev_word = '<s>'\n        else:\n            prev_word = word_list[i-1]\n            \n        if word in wrong_words:\n            correct_word = get_correct_word_bigram_min_edit(word, prev_word, probs, vocab, bigram_probability_df, 0.3, 0.7, 25, scale_dist)\n            #print(word, correct_word)\n            word = correct_word\n        correct_words.append(word)\n    print(\"Output Sentence : \", \" \".join(correct_words).capitalize())","774fd9be":"autocorrect_bigram_min_edit('I have acess to the lidrary', vocab, probs, bigram_counts)","0f536256":"autocorrect_bigram_min_edit('presnet for the meeating', vocab, probs, bigram_counts)","30d27630":"autocorrect_bigram_min_edit('he planed a game', vocab, probs, bigram_counts)","a7174e17":"tests1 = {'access': 'acess',\n          'accessing': 'accesing',\n          'accommodation': 'accomodation acommodation acomodation',\n          'account': 'acount',\n          'address': 'adress adres',\n          'addressable': 'addresable',\n          'arranged': 'aranged arrainged',\n          'arrangeing': 'aranging',\n          'arrangement': 'arragment',\n          'articles': 'articals',\n          'aunt': 'annt anut arnt',\n          'auxiliary': 'auxillary',\n          'available': 'avaible',\n          'awful': 'awfall afful',\n          'basically': 'basicaly',\n          'beginning': 'begining',\n          'benefit': 'benifit',\n          'benefits': 'benifits',\n          'between': 'beetween',\n          'bicycle': 'bicycal bycicle bycycle',\n          'biscuits': 'biscits biscutes biscuts bisquits buiscits buiscuts',\n          'built': 'biult',\n          'cake': 'cak',\n          'career': 'carrer',\n          'cemetery': 'cemetary semetary',\n          'centrally': 'centraly',\n          'certain': 'cirtain',\n          'challenges': 'chalenges chalenges',\n          'chapter': 'chaper chaphter chaptur',\n          'choice': 'choise',\n          'choosing': 'chosing',\n          'clerical': 'clearical',\n          'committee': 'comittee',\n          'compare': 'compair',\n          'completely': 'completly',\n          'consider': 'concider',\n          'considerable': 'conciderable',\n          'contented': 'contenpted contende contended contentid',\n          'curtains': 'cartains certans courtens cuaritains curtans curtians curtions',\n          'decide': 'descide',\n          'decided': 'descided',\n          'definitely': 'definately difinately',\n          'definition': 'defenition',\n          'definitions': 'defenitions',\n          'description': 'discription',\n          'desiccate': 'desicate dessicate dessiccate',\n          'diagrammatically': 'diagrammaticaally',\n          'different': 'diffrent',\n          'driven': 'dirven',\n          'ecstasy': 'exstacy ecstacy',\n          'embarrass': 'embaras embarass',\n          'establishing': 'astablishing establising',\n          'experience': 'experance experiance',\n          'experiences': 'experances',\n          'extended': 'extented',\n          'extremely': 'extreamly',\n          'fails': 'failes',\n          'families': 'familes',\n          'february': 'febuary',\n          'further': 'futher',\n          'gallery': 'galery gallary gallerry gallrey',\n          'hierarchal': 'hierachial',\n          'hierarchy': 'hierchy',\n          'inconvenient': 'inconvienient inconvient inconvinient',\n          'independent': 'independant independant',\n          'initial': 'intial',\n          'initials': 'inetials inistals initails initals intials',\n          'juice': 'guic juce jucie juise juse',\n          'latest': 'lates latets latiest latist',\n          'laugh': 'lagh lauf laught lugh',\n          'level': 'leval',\n          'levels': 'levals',\n          'liaison': 'liaision liason',\n          'lieu': 'liew',\n          'literature': 'litriture',\n          'loans': 'lones',\n          'locally': 'localy',\n          'magnificent': 'magnificnet magificent magnifcent magnifecent magnifiscant magnifisent magnificant',\n          'management': 'managment',\n          'meant': 'ment',\n          'minuscule': 'miniscule',\n          'minutes': 'muinets',\n          'monitoring': 'monitering',\n          'necessary': 'neccesary necesary neccesary necassary necassery neccasary',\n          'occurrence': 'occurence occurence',\n          'often': 'ofen offen offten ofton',\n          'opposite': 'opisite oppasite oppesite oppisit oppisite opposit oppossite oppossitte',\n          'parallel': 'paralel paralell parrallel parralell parrallell',\n          'particular': 'particulaur',\n          'perhaps': 'perhapse',\n          'personnel': 'personnell',\n          'planned': 'planed',\n          'poem': 'poame',\n          'poems': 'poims pomes',\n          'poetry': 'poartry poertry poetre poety powetry',\n          'position': 'possition',\n          'possible': 'possable',\n          'pretend': 'pertend protend prtend pritend',\n          'problem': 'problam proble promblem proplen',\n          'pronunciation': 'pronounciation',\n          'purple': 'perple perpul poarple',\n          'questionnaire': 'questionaire',\n          'really': 'realy relley relly',\n          'receipt': 'receit receite reciet recipt',\n          'receive': 'recieve',\n          'refreshment': 'reafreshment refreshmant refresment refressmunt',\n          'remember': 'rember remeber rememmer rermember',\n          'remind': 'remine remined',\n          'scarcely': 'scarcly scarecly scarely scarsely',\n          'scissors': 'scisors sissors',\n          'separate': 'seperate',\n          'singular': 'singulaur',\n          'someone': 'somone',\n          'sources': 'sorces',\n          'southern': 'southen',\n          'special': 'speaical specail specal speical',\n          'splendid': 'spledid splended splened splended',\n          'standardizing': 'stanerdizing',\n          'stomach': 'stomac stomache stomec stumache',\n          'supersede': 'supercede superceed',\n          'there': 'ther',\n          'totally': 'totaly',\n          'transferred': 'transfred',\n          'transportability': 'transportibility',\n          'triangular': 'triangulaur',\n          'understand': 'undersand undistand',\n          'unexpected': 'unexpcted unexpeted unexspected',\n          'unfortunately': 'unfortunatly',\n          'unique': 'uneque',\n          'useful': 'usefull',\n          'valuable': 'valubale valuble',\n          'variable': 'varable',\n          'variant': 'vairiant',\n          'various': 'vairious',\n          'visited': 'fisited viseted vistid vistied',\n          'visitors': 'vistors',\n          'voluntary': 'volantry',\n          'voting': 'voteing',\n          'wanted': 'wantid wonted',\n          'whether': 'wether',\n          'wrote': 'rote wote'}\n\ntests2 = {'forbidden': 'forbiden',\n          'decisions': 'deciscions descisions',\n          'supposedly': 'supposidly',\n          'embellishing': 'embelishing',\n          'technique': 'tecnique',\n          'permanently': 'perminantly',\n          'confirmation': 'confermation',\n          'appointment': 'appoitment',\n          'progression': 'progresion',\n          'accompanying': 'acompaning',\n          'applicable': 'aplicable',\n          'regained': 'regined',\n          'guidelines': 'guidlines',\n          'surrounding': 'serounding',\n          'titles': 'tittles',\n          'unavailable': 'unavailble',\n          'advantageous': 'advantageos',\n          'brief': 'brif',\n          'appeal': 'apeal',\n          'consisting': 'consisiting',\n          'clerk': 'cleark clerck',\n          'component': 'componant',\n          'favourable': 'faverable',\n          'separation': 'seperation',\n          'search': 'serch',\n          'receive': 'recieve',\n          'employees': 'emploies',\n          'prior': 'piror',\n          'resulting': 'reulting',\n          'suggestion': 'sugestion',\n          'opinion': 'oppinion',\n          'cancellation': 'cancelation',\n          'criticism': 'citisum',\n          'useful': 'usful',\n          'humour': 'humor',\n          'anomalies': 'anomolies',\n          'would': 'whould',\n          'doubt': 'doupt',\n          'examination': 'eximination',\n          'therefore': 'therefoe',\n          'recommend': 'recomend',\n          'separated': 'seperated',\n          'successful': 'sucssuful succesful',\n          'apparent': 'apparant',\n          'occurred': 'occureed',\n          'particular': 'paerticulaur',\n          'pivoting': 'pivting',\n          'announcing': 'anouncing',\n          'challenge': 'chalange',\n          'arrangements': 'araingements',\n          'proportions': 'proprtions',\n          'organized': 'oranised',\n          'accept': 'acept',\n          'dependence': 'dependance',\n          'unequalled': 'unequaled',\n          'numbers': 'numbuers',\n          'sense': 'sence',\n          'conversely': 'conversly',\n          'provide': 'provid',\n          'arrangement': 'arrangment',\n          'responsibilities': 'responsiblities',\n          'fourth': 'forth',\n          'ordinary': 'ordenary',\n          'description': 'desription descvription desacription',\n          'inconceivable': 'inconcievable',\n          'data': 'dsata',\n          'register': 'rgister',\n          'supervision': 'supervison',\n          'encompassing': 'encompasing',\n          'negligible': 'negligable',\n          'allow': 'alow',\n          'operations': 'operatins',\n          'executed': 'executted',\n          'interpretation': 'interpritation',\n          'hierarchy': 'heiarky',\n          'indeed': 'indead',\n          'years': 'yesars',\n          'through': 'throut',\n          'committee': 'committe',\n          'inquiries': 'equiries',\n          'before': 'befor',\n          'continued': 'contuned',\n          'permanent': 'perminant',\n          'choose': 'chose',\n          'virtually': 'vertually',\n          'correspondence': 'correspondance',\n          'eventually': 'eventully',\n          'lonely': 'lonley',\n          'profession': 'preffeson',\n          'they': 'thay',\n          'now': 'noe',\n          'desperately': 'despratly',\n          'university': 'unversity',\n          'adjournment': 'adjurnment',\n          'possibilities': 'possablities',\n          'stopped': 'stoped',\n          'mean': 'meen',\n          'weighted': 'wagted',\n          'adequately': 'adequattly',\n          'shown': 'hown',\n          'matrix': 'matriiix',\n          'profit': 'proffit',\n          'encourage': 'encorage',\n          'collate': 'colate',\n          'disaggregate': 'disaggreagte disaggreaget',\n          'receiving': 'recieving reciving',\n          'proviso': 'provisoe',\n          'umbrella': 'umberalla',\n          'approached': 'aproached',\n          'pleasant': 'plesent',\n          'difficulty': 'dificulty',\n          'appointments': 'apointments',\n          'base': 'basse',\n          'conditioning': 'conditining',\n          'earliest': 'earlyest',\n          'beginning': 'begining',\n          'universally': 'universaly',\n          'unresolved': 'unresloved',\n          'length': 'lengh',\n          'exponentially': 'exponentualy',\n          'utilized': 'utalised',\n          'set': 'et',\n          'surveys': 'servays',\n          'families': 'familys',\n          'system': 'sysem',\n          'approximately': 'aproximatly',\n          'their': 'ther',\n          'scheme': 'scheem',\n          'speaking': 'speeking',\n          'repetitive': 'repetative',\n          'inefficient': 'ineffiect',\n          'geneva': 'geniva',\n          'exactly': 'exsactly',\n          'immediate': 'imediate',\n          'appreciation': 'apreciation',\n          'luckily': 'luckeley',\n          'eliminated': 'elimiated',\n          'believe': 'belive',\n          'appreciated': 'apreciated',\n          'readjusted': 'reajusted',\n          'were': 'wer where',\n          'feeling': 'fealing',\n          'and': 'anf',\n          'false': 'faulse',\n          'seen': 'seeen',\n          'interrogating': 'interogationg',\n          'academically': 'academicly',\n          'relatively': 'relativly relitivly',\n          'traditionally': 'traditionaly',\n          'studying': 'studing',\n          'majority': 'majorty',\n          'build': 'biuld',\n          'aggravating': 'agravating',\n          'transactions': 'trasactions',\n          'arguing': 'aurguing',\n          'sheets': 'sheertes',\n          'successive': 'sucsesive sucessive',\n          'segment': 'segemnt',\n          'especially': 'especaily',\n          'later': 'latter',\n          'senior': 'sienior',\n          'dragged': 'draged',\n          'atmosphere': 'atmospher',\n          'drastically': 'drasticaly',\n          'particularly': 'particulary',\n          'visitor': 'vistor',\n          'session': 'sesion',\n          'continually': 'contually',\n          'availability': 'avaiblity',\n          'busy': 'buisy',\n          'parameters': 'perametres',\n          'surroundings': 'suroundings seroundings',\n          'employed': 'emploied',\n          'adequate': 'adiquate',\n          'handle': 'handel',\n          'means': 'meens',\n          'familiar': 'familer',\n          'between': 'beeteen',\n          'overall': 'overal',\n          'timing': 'timeing',\n          'committees': 'comittees commitees',\n          'queries': 'quies',\n          'econometric': 'economtric',\n          'erroneous': 'errounous',\n          'decides': 'descides',\n          'reference': 'refereence refference',\n          'intelligence': 'inteligence',\n          'edition': 'ediion ediition',\n          'are': 'arte',\n          'apologies': 'appologies',\n          'thermawear': 'thermawere thermawhere',\n          'techniques': 'tecniques',\n          'voluntary': 'volantary',\n          'subsequent': 'subsequant subsiquent',\n          'currently': 'curruntly',\n          'forecast': 'forcast',\n          'weapons': 'wepons',\n          'routine': 'rouint',\n          'neither': 'niether',\n          'approach': 'aproach',\n          'available': 'availble',\n          'recently': 'reciently',\n          'ability': 'ablity',\n          'nature': 'natior',\n          'commercial': 'comersial',\n          'agencies': 'agences',\n          'however': 'howeverr',\n          'suggested': 'sugested',\n          'career': 'carear',\n          'many': 'mony',\n          'annual': 'anual',\n          'according': 'acording',\n          'receives': 'recives recieves',\n          'interesting': 'intresting',\n          'expense': 'expence',\n          'relevant': 'relavent relevaant',\n          'table': 'tasble',\n          'throughout': 'throuout',\n          'conference': 'conferance',\n          'sensible': 'sensable',\n          'described': 'discribed describd',\n          'union': 'unioun',\n          'interest': 'intrest',\n          'flexible': 'flexable',\n          'refered': 'reffered',\n          'controlled': 'controled',\n          'sufficient': 'suficient',\n          'dissension': 'desention',\n          'adaptable': 'adabtable',\n          'representative': 'representitive',\n          'irrelevant': 'irrelavent',\n          'unnecessarily': 'unessasarily',\n          'applied': 'upplied',\n          'apologised': 'appologised',\n          'these': 'thees thess',\n          'choices': 'choises',\n          'will': 'wil',\n          'procedure': 'proceduer',\n          'shortened': 'shortend',\n          'manually': 'manualy',\n          'disappointing': 'dissapoiting',\n          'excessively': 'exessively',\n          'comments': 'coments',\n          'containing': 'containg',\n          'develop': 'develope',\n          'credit': 'creadit',\n          'government': 'goverment',\n          'acquaintances': 'aquantences',\n          'orientated': 'orentated',\n          'widely': 'widly',\n          'advise': 'advice',\n          'difficult': 'dificult',\n          'investigated': 'investegated',\n          'bonus': 'bonas',\n          'conceived': 'concieved',\n          'nationally': 'nationaly',\n          'compared': 'comppared compased',\n          'moving': 'moveing',\n          'necessity': 'nessesity',\n          'opportunity': 'oppertunity oppotunity opperttunity',\n          'thoughts': 'thorts',\n          'equalled': 'equaled',\n          'variety': 'variatry',\n          'analysis': 'analiss analsis analisis',\n          'patterns': 'pattarns',\n          'qualities': 'quaties',\n          'easily': 'easyly',\n          'organization': 'oranisation oragnisation',\n          'the': 'thw hte thi',\n          'corporate': 'corparate',\n          'composed': 'compossed',\n          'enormously': 'enomosly',\n          'financially': 'financialy',\n          'functionally': 'functionaly',\n          'discipline': 'disiplin',\n          'announcement': 'anouncement',\n          'progresses': 'progressess',\n          'except': 'excxept',\n          'recommending': 'recomending',\n          'mathematically': 'mathematicaly',\n          'source': 'sorce',\n          'combine': 'comibine',\n          'input': 'inut',\n          'careers': 'currers carrers',\n          'resolved': 'resoved',\n          'demands': 'diemands',\n          'unequivocally': 'unequivocaly',\n          'suffering': 'suufering',\n          'immediately': 'imidatly imediatly',\n          'accepted': 'acepted',\n          'projects': 'projeccts',\n          'necessary': 'necasery nessasary nessisary neccassary',\n          'journalism': 'journaism',\n          'unnecessary': 'unessessay',\n          'night': 'nite',\n          'output': 'oputput',\n          'security': 'seurity',\n          'essential': 'esential',\n          'beneficial': 'benificial benficial',\n          'explaining': 'explaning',\n          'supplementary': 'suplementary',\n          'questionnaire': 'questionare',\n          'employment': 'empolyment',\n          'proceeding': 'proceding',\n          'decision': 'descisions descision',\n          'per': 'pere',\n          'discretion': 'discresion',\n          'reaching': 'reching',\n          'analysed': 'analised',\n          'expansion': 'expanion',\n          'although': 'athough',\n          'subtract': 'subtrcat',\n          'analysing': 'aalysing',\n          'comparison': 'comparrison',\n          'months': 'monthes',\n          'hierarchal': 'hierachial',\n          'misleading': 'missleading',\n          'commit': 'comit',\n          'auguments': 'aurgument',\n          'within': 'withing',\n          'obtaining': 'optaning',\n          'accounts': 'acounts',\n          'primarily': 'pimarily',\n          'operator': 'opertor',\n          'accumulated': 'acumulated',\n          'extremely': 'extreemly',\n          'there': 'thear',\n          'summarys': 'sumarys',\n          'analyse': 'analiss',\n          'understandable': 'understadable',\n          'safeguard': 'safegaurd',\n          'consist': 'consisit',\n          'declarations': 'declaratrions',\n          'minutes': 'muinutes muiuets',\n          'associated': 'assosiated',\n          'accessibility': 'accessability',\n          'examine': 'examin',\n          'surveying': 'servaying',\n          'politics': 'polatics',\n          'annoying': 'anoying',\n          'again': 'agiin',\n          'assessing': 'accesing',\n          'ideally': 'idealy',\n          'scrutinized': 'scrutiniesed',\n          'simular': 'similar',\n          'personnel': 'personel',\n          'whereas': 'wheras',\n          'when': 'whn',\n          'geographically': 'goegraphicaly',\n          'gaining': 'ganing',\n          'requested': 'rquested',\n          'separate': 'seporate',\n          'students': 'studens',\n          'prepared': 'prepaired',\n          'generated': 'generataed',\n          'graphically': 'graphicaly',\n          'suited': 'suted',\n          'variable': 'varible vaiable',\n          'building': 'biulding',\n          'required': 'reequired',\n          'necessitates': 'nessisitates',\n          'together': 'togehter',\n          'profits': 'proffits'}","211810d1":"def test_autocorrect(utdata, vocab, probs, string):\n    tcount = 0\n    fcount = 0\n    rcount = 0\n    print(\"Running \"+string+\" : Basic Auto-correct system\")\n    for k, v in utdata.items():\n        incorrect_list = v.strip().split()\n        #print(incorrect_list)\n        for w in incorrect_list:\n            tcount = tcount + 1\n            cw = get_correct_word(w, vocab, probs, 25)\n            if cw==k:\n                #print('correct')\n                rcount = rcount + 1\n            else:\n                #print('wrong')\n                fcount = fcount + 1\n    print(\"Accuracy : {} %\".format((rcount\/tcount)*100))            ","61d97d9d":"def test_autocorrect_bigram(utdata, vocab, probs, string, bigram_counts):\n    tcount = 0\n    fcount = 0\n    rcount = 0\n    print(\"Running \"+string+\" : Bi-gram Auto-correct system\")\n    for k, v in utdata.items():\n        incorrect_list = v.strip().split()\n        #print(incorrect_list)\n        for w in incorrect_list:\n            tcount = tcount + 1\n            cw = get_correct_word_bigram(w, '<s>', probs, vocab, bigram_counts, 0.3, 0.7, 25)\n            if cw==k:\n                #print('correct')\n                rcount = rcount + 1\n            else:\n                #print('wrong')\n                fcount = fcount + 1\n    print(\"Accuracy : {} %\".format((rcount\/tcount)*100))            ","c6e8f55f":"def test_autocorrect_bigram_min_edit(utdata, vocab, probs, string, bigram_counts):\n    tcount = 0\n    fcount = 0\n    rcount = 0\n    print(\"Running \"+string+\" : Bi-gram (min-edit) Auto-correct system\")\n    for k, v in utdata.items():\n        incorrect_list = v.strip().split()\n        #print(incorrect_list)\n        for w in incorrect_list:\n            tcount = tcount + 1\n            cw = get_correct_word_bigram_min_edit(w, '<s>', probs, vocab, bigram_counts, 0.3, 0.7, 25, 0.000001)\n            if cw==k:\n                #print('correct')\n                rcount = rcount + 1\n            else:\n                #print('wrong')\n                fcount = fcount + 1\n    print(\"Accuracy : {} %\".format((rcount\/tcount)*100))            ","a5c4135c":"# Test basic auto-correct\ntest_autocorrect(tests1, vocab, probs, \"Unit Test 1\")\ntest_autocorrect(tests2, vocab, probs, \"Unit Test 2\")","44f65166":"# test_autocorrect_bigram(tests1, vocab, probs, \"Unit Test 1\", bigram_counts)\n# test_autocorrect_bigram(tests2, vocab, probs, \"Unit Test 2\", bigram_counts)","415b76e4":"# test_autocorrect_bigram_min_edit(tests1, vocab, probs, \"Unit Test 1\", bigram_counts)\n# test_autocorrect_bigram_min_edit(tests2, vocab, probs, \"Unit Test 2\", bigram_counts)","9a1898cf":"### Architecture Part 3 : (Probability Distribution)\n\nWe'll calculate the frequecies of each word using the corpus that we have. Then we'll divide each frequencies by word count to find the probabilities.","dc632b00":"### Architecture Part 2 : (Word Suggestion Mechanism)\n\nWe'll impliment separate functions of each of the steps (deletion, insertion, switching, replace) and then combine them to edit one or two letter of the original word.","fa3a45a5":"\n### If you liked this project consider **UPVOTING** it. Thanks!\n\nReferences - \n- [How to Write a Spelling Corrector](https:\/\/norvig.com\/spell-correct.html)\n- [Coursera NLP Specialization](https:\/\/www.coursera.org\/learn\/probabilistic-models-in-nlp\/home\/welcome)\n\n#### Happy Learning!!","6540c69b":"### Artchitecture Part 1 : (Filtering Mispells)\n\nA function that tokenizes the sentences and checks the availability of each word in the vocabulary.","04dff8a1":"### Architecture Part 4 : (Replace Misspells with correction)","30ffb0ff":"We have the second part implimented and it is working pretty well.","90d338ea":"Let's look at the probability distribution","31d03eb9":"Looks as expected! When we'll used larger corpus then we'll have more accurate probabilities.","30378323":"$$\\text{Per Cell Operations}$$\n\\begin{align}\n \\\\\nD[i,j] =min\n\\begin{cases}\nD[i-1,j] + del\\_cost\\\\\nD[i,j-1] + ins\\_cost\\\\\nD[i-1,j-1] + \\left\\{\\begin{matrix}\nrep\\_cost; & if src[i]\\neq tar[j]\\\\\n0 ; & if src[i]=tar[j]\n\\end{matrix}\\right.\n\\end{cases}\n\\end{align}","4ca3a0d5":"<hr>\n\n## Improvement 2 : Introducing min_edit_diatsnce functionality\n\nThe idea is derived from the intution that the suggestions that are less distance away from the misspelled word are more likely. Hence, the system can be further improved by introducing dynamic programming based min edit distance functionality.\n\nSo, given a string source[0..i] and a string target[0..j], we will compute all the combinations of substrings[i, j] and calculate their edit distance. To do this efficiently, we will use a table to maintain the previously computed substrings and use those to calculate larger substrings.\n\nWe'll first create a matrix and update each element in the matrix as follows:","ce207015":"#### All Done!! Let's wrap up everything!","3d8ea810":"<hr>\n\n## Improvement 1 : Introducing n-gram probabilities to get context from previous words","c8697ea4":"This idea is taken from the n-grams language models. In a n-gram language model\n- Assume the probability of the next word depends only on the previous n-gram.\n- The previous n-gram is the series of the previous 'n' words.\n\nThe conditional probability for the word at position 't' in the sentence, given that the words preceding it are $w_{t-1}, w_{t-2} \\cdots w_{t-n}$ is:\n\n$$ P(w_t | w_{t-1}\\dots w_{t-n}) \\tag{1}$$\n\nThis probability cab be estimated by counting the occurrences of these series of words in the training data.\n- The probability can be estimated as a ratio, where\n- The numerator is the number of times word 't' appears after words t-1 through t-n appear in the training data.\n- The denominator is the number of times word t-1 through t-n appears in the training data.\n\n$$ \\hat{P}(w_t | w_{t-1}\\dots w_{t-n}) = \\frac{C(w_{t-1}\\dots w_{t-n}, w_n)}{C(w_{t-1}\\dots w_{t-n})} \\tag{2} $$\n\nIn other words, to estimate probabilities based on n-grams, first find the counts of n-grams (for denominator) then divide it by the count of (n+1)-grams (for numerator).\n\n- The function $C(\\cdots)$ denotes the number of occurence of the given sequence. \n- $\\hat{P}$ means the estimation of $P$. \n- The denominator of the above equation is the number of occurence of the previous $n$ words, and the numerator is the same sequence followed by the word $w_t$.","a263f99c":"## Data Requirement\n\nWe need a trusted text corpus that we'll use to build the auto-correct system. There are many public domain text corpus. Since it's a unsupervised type of problem here what we need is just text. You can use any competition data or any other public dataset that has text field column. In the currect version I have used shakespeare corpus. Since. it's a very small corpus we need to compromise on word probabilities. I the next version I'll experiment with large corpuses. I'll be combining multiple datasets to making large corpus and then build the system on top of that.\n\nLet's look at the corpus.","6fb16a3c":"### Demo","b561c706":"Cool. Now we need to process this corpus. Since it's pretty clean corpus we need to do only two thisga - Tokenizing and Lowercasing.","35485d21":"This is impressive! Now let's implement the next improvement.","d382b9d8":"### We can see that it is working!\n\nThis gives a overview of what auto-correct systems are and how they work.\n\nNote - This is very simplified architecture compared to what is used in reality. You can see in the last example's output isn't good. It is supposed to be (\"Life is a drink and love is a drug\")\n\n#### Drawbacks \n- It has fixed outcome. i.e. 'hime' will be converted to 'time' only not 'home' oe anything else.\n- It is solely based on frequency of words in the corpus\n- Doesn't care about the contex.\n- Can't suggest something which is not in the vocabulary\n\n#### Improvements\n- It can be further improved by introducing bi-gram probabilities. Hence, it will get some inference from previous words.\n- The suggestions that are less distance away from the misspelled word are more likely. Hence, the system can be further improved by introducing dynamic programming based min edit distance functionality.\n\nLet's implement these improvements.","dd8e97d4":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:180%; text-align:center\">Architecture<\/p>\n\n<div>\n<img style=\"align:center\", src=\"https:\/\/github.com\/pashupati98\/kaggle-archives\/blob\/main\/img\/architecture.png?raw=true\">\n    <hr>\n<\/div>\n\nThis auto-correct architecture has 4 components -\n- 1) Filtering Mispells : One simple approach could be checking if a word is there in the vocabulary or not. \n- 2) Word Suggestion Mechanism : This mechnism suggests candidate words based on deletion, insertion, switch or replace of one\/two characters in the original word.\n- 3) Probability Distribution Mechanism : The probability distribution {key(word) : value(probability)} is created calculated using a large text corpus. Probability of each candidate is found using this distribution and the most probable candidate is the final one.\n- 4) Replace Mispells : Simple replace the mispelled word with the most probable suggestion.\n\nWe'll impliment each part separetely.","2cb5e0a0":"## Evaluation\n\nLet's design a unit test for the auto-correct system that we have develpoed.","5b35c139":"$$\\text{Initialization}$$\n\n\\begin{align}\nD[0,0] &= 0 \\\\\nD[i,0] &= D[i-1,0] + del\\_cost(source[i]) \\\\\nD[0,j] &= D[0,j-1] + ins\\_cost(target[j]) \\\\\n\\end{align}","ba471b94":"#### Let's combine these individual steps and impliment two function for for editing on or two characters from a word.","372b68cb":"### Conclusion\n\nThis project is a implementation of a statistical auto-correct system. The architecture that has been developed give the accuracy around 52% - 55%. The improved verion of this architecture could get inference from previous word by using bi-gram pobabilities and min edit distance functionality provided further enhancement. Overall, this simple probability based auto-correct system performed okay. In order to get better performance one can go for deep learning based auto-correct systems.","a6fd9304":"These tests aren't very suitable for bigram architecture because it uses previous word. We'll can pass start token as previous word to test the bigram based auto-correct. Same is the case with min-edit architecture. {currectly commnted the testing part to reduce the run-time of kaggle notebook.}","f2400d0d":"# Auto-correct systems\n<div>\n<p>The task of an auto-correct system is finding out which words in a document are misspelled. These mispelled words might be presented to a user by underlining that words. Correction is the task of substituting the well-spelled word for misspellings.\n<\/p>\n<img style=\"align:center\", src=\"https:\/\/github.com\/pashupati98\/kaggle-archives\/blob\/main\/img\/img2.PNG?raw=true\">\n    <hr>\n    <p>The very first requirement of auto-correct system is data. I have checked multiple data sources and will be using one of them.<\/p>\n<\/div>","586e3160":"Now the issue with above formula is that it doesn't work when a count of an n-gram is zero..\n- Suppose we encounter an n-gram that did not occur in the training data.  \n- Then, the equation (2) cannot be evaluated (it becomes zero divided by zero).\n\nA way to handle zero counts is to add k-smoothing.  \n- K-smoothing adds a positive constant $k$ to each numerator and $k \\times |V|$ in the denominator, where $|V|$ is the number of words in the vocabulary.\n\n$$ \\hat{P}(w_t | w_{t-1}\\dots w_{t-n}) = \\frac{C(w_{t-1}\\dots w_{t-n}, w_n) + k}{C(w_{t-1}\\dots w_{t-n}) + k|V|} \\tag{3} $$\n\n\nFor n-grams that have a zero count, the equation (3) becomes $\\frac{1}{|V|}$.\n- This means that any n-gram with zero count has the same probability of $\\frac{1}{|V|}$.\n\nNow, let's define a function that computes the probability estimate (3) from n-gram counts and a constant $k$.","11ad9599":"We have the bigram probabilities now we'll update our get_correction function to incorporate the changes.\n\nWe won't be ignoring the unigram probabilities completely instead we will assing weights to unigram and bigram. i.e. \n\n> final_score = unigram_weight*unigram_prob + bigram_weight*bigram_prob","29726c4e":"### Demo","1aef482f":"## Demo\n\nLet's check this system on some examples","459ccc25":"#### Run the tests!","b3d294c7":"The data looks fine. Before moving to the next step let's first look at the architectire of our syste.","9f57aea9":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:180%; text-align:center\">Introduction<\/p>\n\nI'm often amazed by the auto-correct systems that are used by Google, Grammerly, Android etc. I wanted to know how these systems work and I started reading about them. And as expected...They are really complex!! If you too want to read about them. Here you go - \n- [Using the Web for Language Independent Spellchecking and\nAutocorrection](http:\/\/static.googleusercontent.com\/media\/research.google.com\/en\/us\/pubs\/archive\/36180.pdf)\n- [How Difficult is it to Develop a Perfect Spell-checker?\nA Cross-linguistic Analysis through Complex Network Approach](http:\/\/citeseerx.ist.psu.edu\/viewdoc\/download;jsessionid=52A3B869596656C9DA285DCE83A0339F?doi=10.1.1.146.4390&rep=rep1&type=pdf)\n\n> Then I found an intutive auto correct system that uses statistics, probability and dynamic programming. In this project I have tried to impliment this auto-correct system. [References at the bottom]\n\nLet's begin!"}}