{"cell_type":{"fcad6fb8":"code","4ad270f9":"code","0b023782":"code","659f1ea6":"code","ad635186":"code","d9b75d0e":"code","32b796a7":"code","9d72d279":"code","7d949105":"code","6ce456c0":"code","ece815a6":"code","b8c1bd3e":"code","070b620a":"code","6e04d861":"code","fd339cec":"code","b28eb536":"code","1020fde3":"markdown","ae520f5c":"markdown","2a5a3110":"markdown","f84593e7":"markdown","0655c272":"markdown","96edee12":"markdown","e00d86fd":"markdown"},"source":{"fcad6fb8":"# import numpy and pandas\n# also import warnings and ignore them to keep notebook clean\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\") # ignores warnings\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4ad270f9":"# loading in the dataset and peeking at the first five rows\ndata = pd.read_csv('..\/input\/BostonHousing.csv')\ndata.head()","0b023782":"# Taking some time here to play with some Pandas methods\n#data.index # shows range of indices\n#data.to_numpy() # returns df as a matrix\n#data.describe() # some summary statistics. Notice the counts are all equal so there are no missing values--clean\n#data.info() # gives us some more information and count and datatypes\n#data.T # switches columns with rows\n#data.sort_index(axis=1, ascending = False)# sorts the dataset by the index of each row\n#data[\"tax\"] # returns a single column (series)\n#data[0:3] # row slicing\n#data[\"tax\"][3] # locate a specific value in column. Also can be done with data['tax'].loc[3]\n#data.loc[:, [\"tax\",\"nox\"]] # returns all the rows of two features\n#data.isnull().sum() the first checks for missing values, the second sums them up","659f1ea6":"# Create empty list for coefficients\ncoefficients = []","ad635186":"# Creating helper functions to make model more viewable\ndef reshape_X(X):\n    return X.reshape(-1,1) # numpy.reshape returns the m x n matrix of the arguments in this case","d9b75d0e":"# The second helper matrix concatenates a feature of ones to the matrix\ndef concatenate_ones(X):\n    ones = np.ones(shape=X.shape[0]).reshape(-1,1) # np.ones() creates an array of ones\n    return np.concatenate((ones, X), 1) # concatenate basically appends the newly created vector of ones","32b796a7":"# creating our function to fit the training data\ndef fit(X,y):\n    global coefficients\n    if len(X.shape) == 1:\n        X = reshape_X(X)\n    X = concatenate_ones(X)\n    coefficients = np.linalg.inv(X.transpose().dot(X)).dot(X.transpose()).dot(y) # math to obtain coeff ie. slope\n    print(coefficients)","9d72d279":"# creating a predict function to predict coefficient(??)\ndef predict(entry):\n    b0 = coefficients[0] #initial slope\n    other_betas = coefficients[1:] \n    prediction = b0 # initial prediction\n    \n    for xi, bi in zip(entry, other_betas): \n        # we avoid declaring two for loops by assigning xi to entry and bi to coef.\n        # zip function creates a tuple out of the entry and other_betas\n        prediction += (bi * xi)\n    return prediction\n        ","7d949105":"X = data.drop(\"medv\", axis=1).values # drops the medv column from the data\ny = data[\"medv\"].values # setting our target equal to the values we just dropped","6ce456c0":"fit(X,y) # fits our dataset with the model","ece815a6":"predict(X[0])","b8c1bd3e":"predictions = []\nfor row in X:\n    predictions.append(predict(row))","070b620a":"results = pd.DataFrame({\n    \"Actual\": y,\n    \"Predicted\": predictions\n})","6e04d861":"# importing matplotlib for graphs \nfrom matplotlib import pyplot as plt\nfrom sklearn.linear_model import LinearRegression","fd339cec":"linear_regressor = LinearRegression()\nlinear_regressor.fit(X,y)\nY_pred = linear_regressor.predict(X)","b28eb536":"plt.scatter(predictions, y)\nplt.plot(predictions, Y_pred, color='red')\nplt.show()","1020fde3":"First I am going to run OLS (ordinary least squares regression) on the model, then do a train-test split","ae520f5c":"### References ###\nInspiration for this primarily comes from: https:\/\/towardsdatascience.com\/multiple-linear-regression-from-scratch-in-numpy-36a3e8ac8014 <br>\n***Additional Resources*** <br>\nhttps:\/\/towardsdatascience.com\/linear-regression-in-6-lines-of-python-5e1d0cd05b8d <br>\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/getting_started\/10min.html <br>\nhttps:\/\/docs.scipy.org\/doc\/numpy\/ <br>\nhttps:\/\/www.markdownguide.org\/basic-syntax","2a5a3110":"So my prediction for the first median value is 30. Let's see for the whole dataset!","f84593e7":"### Training ###\nTo train the model, we will fit the dataset without the median value feature (because that is what we are trying to predict) and test how accurate it is in predicting the target","0655c272":"Some things to figure out: how to properly format pyplot, other ML models I can use, figuring out train-test split","96edee12":"## Learning Linear Regression ##\nIn this notebook I am going to try to understand what goes on behind the scenes of linear regression using numpy and pandas <br>\nI am going to load in the Boston Housing dataset and go from there","e00d86fd":"Let's try using scikit for linear regression"}}