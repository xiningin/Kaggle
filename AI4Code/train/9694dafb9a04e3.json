{"cell_type":{"bbe92f02":"code","bd3f52bf":"code","3a265e31":"code","c62a72d4":"code","abac4b1f":"code","4c86c2ad":"code","be6f8eda":"code","a9e070a2":"code","079f34d9":"code","82cd9c16":"code","b5f09087":"code","be64f456":"code","0597a1e1":"markdown","250588c9":"markdown","6a092c92":"markdown","d0bd2e25":"markdown","4ec8cf27":"markdown"},"source":{"bbe92f02":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\n\nfrom warnings import simplefilter\nimport gc\n\nsimplefilter('ignore')\nrs = 69420\ntrain_path = r'..\/input\/tabular-playground-series-aug-2021\/train.csv'\ntest_path = r'..\/input\/tabular-playground-series-aug-2021\/test.csv'\nsubmission_path = r'..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv'","bd3f52bf":"train = pd.read_csv(train_path, index_col=0)\ntest = pd.read_csv(test_path, index_col=0)","3a265e31":"train.head()","c62a72d4":"test.head()","abac4b1f":"y = train.loss.values\nX = train.drop([\"loss\"], axis = 1).values\n\nX.shape, y.shape","4c86c2ad":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, shuffle=True, random_state=rs, stratify=y)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","be6f8eda":"sc = RobustScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","a9e070a2":"clf = HistGradientBoostingRegressor(\n    learning_rate=0.01,\n    max_iter=10000,\n    random_state=rs,\n    early_stopping=True\n)","079f34d9":"%%time\nclf.fit(X_train, y_train)","82cd9c16":"y_pred = clf.predict(X_test)\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(f\"RMSE: {round(rmse, 5)}\")","b5f09087":"test_preds=None\nscores = []\n\nprint(\"Training...\")\n\nkf = StratifiedKFold(n_splits = 10 , shuffle = True , random_state = rs)\nfor fold, (tr_index , val_index) in enumerate(kf.split(X , y)):\n    print(\"\u2059\" * 20)\n    print(f\"Fold {fold + 1}\")\n    \n    X_train, X_val = X[tr_index] , X[val_index]\n    y_train, y_val = y[tr_index] , y[val_index]\n    \n    sc = RobustScaler()\n    X_train = sc.fit_transform(X_train)\n    X_val = sc.transform(X_val)\n        \n    eval_set = [(X_val, y_val)]\n    \n    model = HistGradientBoostingRegressor(\n        learning_rate=0.01,\n        max_iter=10000,\n        random_state=rs,\n        early_stopping=True\n    )\n    model.fit(X_train, y_train)\n    \n    train_preds = model.predict(X_train)    \n    val_preds = model.predict(X_val)\n    \n    rmse = np.sqrt(mean_squared_error(y_val, val_preds))\n    scores.append(rmse)\n    print(f\"RMSE: {round(rmse, 5)}\")\n    \n    test_sub = sc.transform(test)\n    if test_preds is None:\n        test_preds = model.predict(test_sub)\n    else:\n        test_preds += model.predict(test_sub)\n\nprint(\"-\" * 20)\nprint(\"Training Done!\")\nprint(f\"Mean RMSE: {round(np.mean(scores), 5)}\")\n\ntest_preds \/= 10","be64f456":"submission = pd.read_csv(submission_path)\nsubmission['loss'] = test_preds\nsubmission.to_csv(\"submission.csv\", index=False)","0597a1e1":"# Imports","250588c9":"# Preprocessing","6a092c92":"# HistGradientBoostingRegressor","d0bd2e25":"# Submission","4ec8cf27":"# Cross Validated"}}