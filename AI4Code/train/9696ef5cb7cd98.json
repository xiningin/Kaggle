{"cell_type":{"b7e7bacf":"code","c9021d90":"code","2b8fc9d9":"code","ff0eb51a":"code","bef80b79":"code","40450b31":"code","612b6daf":"code","1106b709":"code","5a07e006":"code","f800b77b":"code","49f66d87":"code","06d762a2":"code","f6b8996f":"code","7785367d":"code","94dec5bf":"code","5df67886":"code","1d57496d":"code","954fc1aa":"code","30e9619c":"code","1e292646":"code","2d56b64a":"code","a663aafa":"markdown","ad4d0c3a":"markdown","3ab61d79":"markdown","abeadd2e":"markdown"},"source":{"b7e7bacf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9021d90":"from colorama import Fore, Style\n\nnRowsRead = 1000 # specify 'None' if want to read whole file\n# ham_lyrics.csv has 3634 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('..\/input\/hackathon\/task_2-COVID-19-death_cases_per_country_after_first_death-till_22_September_2020.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'task_2-COVID-19-death_cases_per_country_after_first_death-till_22_September_2020.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\nprint(Fore.YELLOW + 'Data shape: ',Style.RESET_ALL,df.shape)\ndf.head()","2b8fc9d9":"# Let's find the null values in data\n\ntotal = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(10)","ff0eb51a":"# categorical features with missing values\ncategorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>0 and df[feature].dtypes=='O']\nprint(categorical_nan)","bef80b79":"# replacing missing values in categorical features\nfor feature in categorical_nan:\n    df[feature] = df[feature].fillna('None')","40450b31":"df[categorical_nan].isna().sum()","612b6daf":"# Lets handle numerical features with nan value\nnumerical_nan = [feature for feature in df.columns if df[feature].isna().sum()>1 and df[feature].dtypes!='O']\nnumerical_nan","1106b709":"## Replacing the numerical Missing Values\n\nfor feature in numerical_nan:\n    ## We will replace by using median since there are outliers\n    median_value=df[feature].median()\n    \n    df[feature].fillna(median_value,inplace=True)\n    \ndf[numerical_nan].isnull().sum()","5a07e006":"from sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import make_column_transformer, make_column_selector\nfrom sklearn.model_selection import train_test_split\n\n#fuel = pd.read_csv('..\/input\/dl-course-data\/fuel.csv')\n\nX = df.copy()\n# Remove target\ny = X.pop('stringency_index_10_days_after_first_death')\n\npreprocessor = make_column_transformer(\n    (StandardScaler(),\n     make_column_selector(dtype_include=np.number)),\n    (OneHotEncoder(sparse=False),\n     make_column_selector(dtype_include=object)),\n)\n\nX = preprocessor.fit_transform(X)\ny = np.log(y) # log transform target instead of standardizing\n\ninput_shape = [X.shape[1]]\nprint(\"Input shape: {}\".format(input_shape))","f800b77b":"df.head()\n# Uncomment to see processed features\npd.DataFrame(X[:10,:]).head()","49f66d87":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel = keras.Sequential([\n    layers.Dense(128, activation='relu', input_shape=input_shape),\n    layers.Dense(128, activation='relu'),    \n    layers.Dense(64, activation='relu'),\n    layers.Dense(1),\n])","06d762a2":"model.compile(\n    optimizer='adam',\n    loss='mae'\n)\n","f6b8996f":"history = model.fit(\n    X, y,\n    batch_size=128,\n    epochs=200\n)","7785367d":"import pandas as pd\n\nhistory_df = pd.DataFrame(history.history)\n# Start the plot at epoch 5. You can change this to get a different view.\nhistory_df.loc[5:, ['loss']].plot();","94dec5bf":"# Setup plotting\nimport matplotlib.pyplot as plt\nfrom learntools.deep_learning_intro.dltools import animate_sgd\nplt.style.use('seaborn-whitegrid')\n# Set Matplotlib defaults\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n       titleweight='bold', titlesize=18, titlepad=10)\nplt.rc('animation', html='html5')\n\n# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.deep_learning_intro.ex3 import *","5df67886":"import matplotlib.pyplot as plt\nfrom learntools.deep_learning_intro.dltools import animate_sgd\n\n# YOUR CODE HERE: Experiment with different values for the learning rate, batch size, and number of examples\nlearning_rate = 0.05\nbatch_size = 32\nnum_examples = 256\n\nanimate_sgd(\n    learning_rate=learning_rate,\n    batch_size=batch_size,\n    num_examples=num_examples,\n    # You can also change these, if you like\n    steps=50, # total training steps (batches seen)\n    true_w=3.0, # the slope of the data\n    true_b=2.0, # the bias of the data\n)","1d57496d":"ls ..\/input\/hackathon\/task_1-google_search_txt_files_v2\/UZ\/","954fc1aa":"Uzbekistan = '..\/input\/hackathon\/task_1-google_search_txt_files_v2\/UZ\/Uzbekistan-en-result-113-original.txt'","30e9619c":"text = open(Uzbekistan, 'r',encoding='utf-8',\n                 errors='ignore').read()","1e292646":"print(text[:2500])","2d56b64a":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thanks Ryan Holbrook, @mpwolke Was Here.' )","a663aafa":"#All script by Ryan Holbrook, Data Scientist (Kaggle Deep Learning Course - Exercise: Stochastic Gradient Descent)","ad4d0c3a":"#Tuberculosis: A Global Threat\n\n\"Despite nearly a century of use, the Bacille Calmette-Gu\u00e9rin (BCG) vaccine continues to be controversial, with known variations in BCG substrains and vaccine efficacy.\n\nBecause vaccination policies and practices vary across time and countries, they created the first searchable, online, open access database of global BCG vaccination policy and practices, the BCG World Atlas (http:\/\/www.bcgatlas.org\/), which contains detailed information on current and past BCG policies and practices for over 180 countries.\n\nThe Atlas is for clinicians, policymakers, and researchers and provides information that may be helpful for better interpretation of tuberculosis (TB) diagnostics as well as design of new TB vaccines.\" \n\nThose words are on the text (.txt) above.","3ab61d79":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcScFPlPBq5g8eSPa07gsjbAA1xLTUjdUh-56A&usqp=CAU)slideshare.net","abeadd2e":"#Handling Missing Values"}}