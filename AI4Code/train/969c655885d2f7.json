{"cell_type":{"8daa94c5":"code","4919cdbe":"code","65334fcb":"code","57f6df72":"code","0dafbee2":"code","300f2733":"code","611f539b":"code","0abacfc8":"code","ad2af08a":"code","28258525":"code","28b85b0e":"code","d41ef453":"code","68e8015e":"code","2bda80f0":"code","018c700c":"code","5f1a08e0":"code","ca517c40":"code","2b5e689c":"code","03a7514e":"code","c79c2787":"code","d730d3ce":"code","076dcfeb":"code","12bf5aa9":"code","12287745":"code","ae2d7b5b":"code","8dc33038":"code","514c2b85":"code","b8a0bfda":"code","24f96b5a":"code","6d54f48d":"code","e8d6f601":"code","6ca19256":"code","9a290283":"code","21485692":"markdown","392ff8e0":"markdown","685d6975":"markdown","b774b91b":"markdown","07a0191e":"markdown","3d4b4bd6":"markdown","3d10ac8f":"markdown","942c785d":"markdown","3d7cf158":"markdown","a724f439":"markdown","76e54418":"markdown","6a0d60f4":"markdown","9cc8eed5":"markdown","6bc12d4d":"markdown","da51a148":"markdown"},"source":{"8daa94c5":"import pandas as pd\nimport numpy as np\n\nimport warnings\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\n\nfrom IPython.display import display\n\nwarnings.filterwarnings('ignore')","4919cdbe":"apps = pd.read_csv('..\/input\/googleplaystore.csv')\nreviews = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')","65334fcb":"apps.head(3)","57f6df72":"len(apps)","0dafbee2":"def print_missing_values(data):\n    data_null = pd.DataFrame(len(data) - data.notnull().sum(), columns = ['Count'])\n    data_null = data_null[data_null['Count'] > 0].sort_values(by='Count', ascending=False)\n\n    trace = go.Bar(x=data_null.index, y=data_null['Count'], marker=dict(color='#c0392b'),\n              name = 'At least one missing value', opacity=0.9)\n    layout = go.Layout(barmode='group', title='Column with missing values in Apps dataset', showlegend=True,\n                   legend=dict(orientation=\"h\"))\n    fig = go.Figure([trace], layout=layout)\n    py.iplot(fig)","300f2733":"print_missing_values(apps)","611f539b":"apps[apps[['Type', 'Content Rating']].isnull().any(axis=1)]","0abacfc8":"apps.at[9148, 'Type'] = 'Free'\nfor i in reversed(range(2,len(apps.columns))):\n    apps.iat[10472, i]= apps.iloc[10472][i-1]\napps.at[10472, 'Category'] = 'UNKNOWN'","ad2af08a":"apps.loc[[9148,10472]]","28258525":"reviews.head(3)","28b85b0e":"len(reviews)","d41ef453":"print_missing_values(reviews)","68e8015e":"app = apps['App'].value_counts()\nlen(app[app > 1])","2bda80f0":"apps = apps.drop_duplicates(subset=['App'])","018c700c":"def genres_split(genres):\n    genres = genres.str.split(';', expand=True)\n    return genres[0].append(genres[1].dropna(), ignore_index=True)\n\ndef update_size(size):\n    size[size == 'Varies with device'] = '0k'\n    size = size.apply(lambda s: float(s[:-1])*1000 if s[-1] == 'M' else s[:-1])\n    size[size == '0'] = np.NAN\n    return size.astype('float64')","5f1a08e0":"apps[\"Reviews\"] = pd.to_numeric(apps[\"Reviews\"])\napps[\"Price\"] = pd.to_numeric(apps[\"Price\"].str.replace('$',''))\napps[\"Last Updated\"] = pd.to_datetime(apps[\"Last Updated\"])\napps['Size'] = update_size(apps['Size'])\napps['Installs'] = apps['Installs'].str.replace(',','')","ca517c40":"apps.describe()","2b5e689c":"def plot_bar(column, color='#2980b9', orientation = 'h', type=None):\n    data =  apps[column].dropna().value_counts(ascending=True) if column != 'Genres' else genres_split(apps[column]).value_counts(ascending=True)\n    if column == 'Installs':\n        data.index = data.index.str.replace('+','').astype('int64')\n        data.sort_index(inplace=True)\n    x, y = (data.values, data.index) if orientation == 'h' else (data.index, data.values)\n    trace = go.Bar(x=x, y=y, marker=dict(color=color)\n           , opacity=0.9, orientation = orientation)\n    layout = go.Layout(barmode='group', title='Bar plot for the '+column+' column', xaxis=dict(type=type))\n    fig = go.Figure([trace], layout=layout)\n    py.iplot(fig)\n    \ndef plot_histo(column, type=None):\n    trace = go.Histogram(x=apps[column].dropna())\n    layout = go.Layout(title='Histogram of the '+column+' column'\n                       , yaxis= dict(type=type,autorange=True))\n    fig = go.Figure([trace], layout=layout)\n    py.iplot(fig)","03a7514e":"plot_histo('Rating')","c79c2787":"plot_histo('Reviews', type='log')","d730d3ce":"plot_histo('Size')","076dcfeb":"plot_histo('Price', type='log')","12bf5aa9":"plot_bar('Category')","12287745":"plot_bar('Installs', orientation='v', type='category')","ae2d7b5b":"plot_bar('Content Rating')","8dc33038":"plot_bar('Type', orientation='v')","514c2b85":"plot_bar('Genres')","b8a0bfda":"plot_bar('Last Updated', orientation='v')","24f96b5a":"def top_n_plot(column, n=10):\n    data = apps[column].dropna().sort_values(ascending=False)[0:n]\n    data.index = apps.loc[data.index,'App']\n    \n    gold, silver, bronze, other = ('#FFA400','#bdc3c7','#cd7f32','#3498db')\n    color = [gold if i == 1 else silver if i == 2 else bronze if i == 3 else other for i in range(1,n+1)]\n    \n    x, y = (data.index, data.values)\n    trace = go.Bar(x=x, y=y, marker=dict(color=color)\n           , opacity=0.9, orientation = 'v')\n    layout = go.Layout(barmode='group', title='Top '+str(n)+' for the '+column+' column')\n    fig = go.Figure([trace], layout=layout)\n    py.iplot(fig)","6d54f48d":"top_n_plot('Price', n=20)","e8d6f601":"top_n_plot('Reviews', n=15)","6ca19256":"top_n_plot('Size', n=15)","9a290283":"top_n_plot('Rating', n=15)","21485692":"In a first place has a lot of missing values, for the moment I can only assume some hypothesis like :\n* Since the dataset was preprocess and translated in english some reviews didn't pass through the traduction process so the sentiment analysis also didn't perform.\n* reviews that only contains rating\n\n\n## <a id=\"3\">3. Data cleaning<\/a>\n\nBefore we start to plot each column let's check that some apps are not duplicated.","392ff8e0":"Then let's drop them.","685d6975":"## <a id=\"2\">2. Missing values<\/a>","b774b91b":"### <a id=\"4.2\">4.2 Visualisation<\/a>","07a0191e":"# EDA with Plotly : Play Store apps\n*November 2018*\n******\n![](https:\/\/images.frandroid.com\/wp-content\/uploads\/2017\/06\/google-play-store.png)\n\nHello everyone !\n\nToday, I'd like to share an eda kernel to improve my skills in data analysis, I'm a french student. \nSo if you have any suggestions to improve the kernel, I will be glad to hear them !\n\n## Table of content\n\n* <a href=\"#1\">1. Load libraries and read data<\/a>\n    * <a href=\"#1.1\">1.1 Load libraries<\/a>\n    * <a href=\"#1.2\">1.2 Read the data<\/a>\n* <a href=\"#2\">2. Missing values<\/a>\n* <a href=\"#3\">3. Data cleaning<\/a>\n* <a href=\"#4\">4. EDA<\/a>\n    * <a href=\"#4.1\">4.1 Define plotting functions<\/a>\n    * <a href=\"#4.2\">4.2 Visualisation<\/a>\n    * <a href=\"#4.3\">4.3 Get the top apps for each column<\/a>\n\n## <a id=\"1\">1. Load libraries and read data<\/a>\n\n### <a id=\"1.1\">1.1 Load libraries<\/a>","3d4b4bd6":"Then we check that we fixed the problem.","3d10ac8f":"*This kernel is in progress ...*\n\n> $Nathan$","942c785d":"### <a id=\"1.2\">1.2 Read the data<\/a>","3d7cf158":"### <a id=\"4.3\">4.3 Get the top apps for each column<\/a>","a724f439":"**Bingo** ! For the first line we can see that the Type is \"*Free*\" because the price is set to *0*. The second line is kind of weird, maybe an entry error but the result is that all column are moved from to the left (except the **App** column).\n\nLet's fix this ! \ud83d\udc4d","76e54418":"We can see that the **Rating** column have a lot of missing values (1474 rows) and it's logic because we can deduce that some apps don't have any rate. Also for the **Current Ver** and **Android Ver** columns we can't do something so let's take a look on the last 2 columns : **Type** and **Content Rating** to see what can we do about this.","6a0d60f4":"Now we update the columns types.","9cc8eed5":"We saw that Genres column contains an array per row and for the size column to have a better sense of the column we can convert the size into just Ko and without a term at the end of the word. For example : 100M become 100000 or 100k become 100","6bc12d4d":"## <a id=\"4\">4. EDA<\/a>\n### <a id=\"4.1\">4.1 Define plotting functions<\/a>\nThen let's code the plot functions. One for bar plots and one for histograms.","da51a148":"Now it's time to do the same missing value analysis on the second dataset : the **user reviews dataset**.\n\nThe description of this set : *This file contains the first 'most relevant' 100 reviews for each app. Each review text\/comment has been pre-processed and attributed with 3 new features - Sentiment, Sentiment Polarity and Sentiment Subjectivity.* suggest that it's already analysed data.\n\nSo I will not do a lot of analysis about this dataset, I hope you can understand \ud83d\ude09"}}