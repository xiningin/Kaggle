{"cell_type":{"05867455":"code","b955293a":"code","7df3f571":"code","4cc161be":"code","a86a5f7a":"code","596f8bb2":"code","3206c639":"code","4cc2937d":"code","50dbb561":"code","c79e8d9b":"code","0993ebf8":"code","5b1f41a4":"code","b3867adb":"code","41225e58":"code","a667b259":"code","4da86249":"code","cadfead2":"code","95e436b5":"code","bdea9cdd":"code","b9d96b2f":"code","0a3c3d71":"code","60e6f5d1":"code","22e6c22a":"code","d81378bb":"code","5c37288f":"code","21ea70d3":"code","979aad44":"code","1f04f3d3":"code","b139bd23":"code","1f117821":"code","12703fc4":"code","9dd5c8cd":"code","cc6b4d6a":"code","37161bfd":"code","e247bc80":"code","63ce357d":"code","42568d48":"code","4581586f":"code","85d8f5d4":"code","e70d0b36":"code","7f5f5249":"code","06e60991":"code","0275065a":"code","a50b2cac":"code","829f3b10":"code","0056d0b1":"code","2e8e6af6":"code","e2e6da57":"code","96bd90bf":"code","fd2dae1a":"code","7e4637e3":"code","4819914a":"code","4f10f59e":"code","9565d45a":"code","3ce21290":"code","e2025c12":"code","28136d31":"code","44a5db14":"code","3daa4da9":"code","68d64746":"code","02a9d6f9":"code","80ea431a":"code","6da10a6f":"code","f997d518":"code","a70a63a2":"code","a3994d34":"code","83c6ea1e":"code","58342972":"code","e008db32":"code","09a828ae":"code","a8ea9027":"code","e15e2732":"code","07ca036b":"code","d764e63a":"markdown","ffcfbf56":"markdown","5f4945a2":"markdown","03bddd4b":"markdown","a5ac69d0":"markdown","9dd81c63":"markdown","07d5d76d":"markdown","73037b46":"markdown","3e9f99b9":"markdown","99d10886":"markdown"},"source":{"05867455":"### Les Modules de Travail\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n#from pandas.plotting import scatter_matrix\nimport seaborn as sns","b955293a":"Dataset=pd.read_csv('..\/input\/california-housing-prices\/housing.csv')","7df3f571":"Dataset.head()","4cc161be":"Dataset.info()","a86a5f7a":"df=Dataset.copy()","596f8bb2":"print(df.columns)","3206c639":"print(df.shape)","4cc2937d":"print(df.dtypes.value_counts())\ndf.dtypes.value_counts().plot.pie()","50dbb561":"plt.figure(figsize=(20,10))\nsns.heatmap(df.isna(), cbar=False)","c79e8d9b":"df['ocean_proximity'].value_counts()","0993ebf8":"df['ocean_proximity'].value_counts(normalize=True)","5b1f41a4":"#Conversion de la variable qualitative en categories\ndf=df.astype({'ocean_proximity':'category'})","b3867adb":"print(df.dtypes.value_counts())\ndf.dtypes.value_counts().plot.pie()","41225e58":"df['rooms_per_household']=df['total_rooms']\/df['households']","a667b259":"df['bedrooms_per_household']=df['total_bedrooms']\/df['households']","4da86249":"df['population_per_household']=df['population']\/df['households']","cadfead2":"df.head()","95e436b5":"df=df.drop(['longitude','latitude' ], axis=1)  ","bdea9cdd":"df.describe()","b9d96b2f":"for col in df.select_dtypes('float'):\n    #print(col)\n    plt.figure()\n    sns.distplot(df[col])","0a3c3d71":"df['ocean_proximity'].value_counts().plot.pie()","60e6f5d1":"df['ocean_proximity'].value_counts().plot(kind='bar')","22e6c22a":"sns.pairplot(df.select_dtypes('float'))","d81378bb":"sns.heatmap(df.select_dtypes('float').corr())","5c37288f":"corr = df.select_dtypes('float').corr()\nplt.figure(figsize=(12, 10))\nsns.heatmap(corr[(corr >= 0.5) | (corr <= -0.4)],cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1, annot=True, annot_kws={\"size\": 8}, square=True);","21ea70d3":"sns.clustermap(df.select_dtypes('float').corr())","979aad44":"df.describe()['median_house_value']","1f04f3d3":"df['median_house_value'].hist(bins= 50)","b139bd23":"plt.figure(figsize=(10,6))\nsns.boxplot(data=df,x='ocean_proximity',y='median_house_value',palette='viridis')\nplt.plot()","1f117821":"plt.figure(figsize=(10,6))\n\nsns.stripplot(data=df,x='ocean_proximity',y='median_house_value',jitter=0.3)","12703fc4":"from sklearn.model_selection import train_test_split","9dd5c8cd":"trainset, testset = train_test_split(df, test_size=0.1, random_state=42)","cc6b4d6a":"X_train=trainset.drop(['median_house_value'],axis=1)\n","37161bfd":"y_train=trainset['median_house_value']\n","e247bc80":"print(trainset.shape)","63ce357d":"X_test=testset.drop(['median_house_value'],axis=1)\n","42568d48":"y_test=testset['median_house_value']\n","4581586f":"print(testset.shape)","85d8f5d4":"X_train.head()","e70d0b36":"X_test.head()","7f5f5249":"y_test","06e60991":"y_train","0275065a":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder,PolynomialFeatures\nfrom sklearn.compose import make_column_selector as selector\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nimport numpy as np","a50b2cac":"X_train.columns","829f3b10":"print(X_test.dtypes.value_counts())\nX_test.dtypes.value_counts().plot.pie()","0056d0b1":"numerical_features = list(X_train.select_dtypes(include=['float64']))\ncategorical_features = list(X_train.select_dtypes(include=['category']))","2e8e6af6":"numeric_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='median')),('scaler', StandardScaler())])","e2e6da57":"categorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='most_frequent')),('onehot', OneHotEncoder())])","96bd90bf":"preprocessor = ColumnTransformer(transformers=[('num', numeric_transformer, numerical_features),('cat', categorical_transformer, categorical_features)])","fd2dae1a":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import learning_curve\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error","7e4637e3":"model = Pipeline(steps=[('preprocessor', preprocessor),('LinearRegression', LinearRegression())])\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)\nprint(model.score(X_test, y_test))\ny_pred= model.predict(X_test)\ny_pred= y_pred.reshape(-1,1)\n\nprint('MAE:', mean_absolute_error(y_test, y_pred))\nprint('MSE:', mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(mean_squared_error(y_test, y_pred)))","4819914a":"TreeDecision =Pipeline(steps=[('preprocessor', preprocessor),('Decision', DecisionTreeRegressor(random_state=0))])\nRandomForest = Pipeline(steps=[('preprocessor', preprocessor),('RandomForest', RandomForestRegressor(n_estimators=10,random_state=0))]) \nSVCmodel = Pipeline(steps=[('preprocessor', preprocessor),('SVR', SVR(kernel='rbf'))])\nGradientRegressor =Pipeline(steps=[('preprocessor', preprocessor),('GradientRegressor', GradientBoostingRegressor(random_state=0))])\nKNN = Pipeline(steps=[('preprocessor', preprocessor),('KNN', KNeighborsRegressor(n_neighbors=5))])\n#SGDRegressor = Pipeline(steps=[('preprocessor', preprocessor),('SGDRegressor', SGDRegressor())])","4f10f59e":"dict_of_models = {'TreeDecision' : TreeDecision,\n                  'RandomForest':RandomForest,\n                  'SVCmodel':SVCmodel,\n                  'GradientRegressor':GradientRegressor,\n                  'KNN':KNN,\n                  #'SGDRegressor':SGDRegressor\n                  }","9565d45a":"from sklearn.metrics import mean_squared_error,mean_absolute_error","3ce21290":"def evaluation(model):\n    model.fit(X_train, y_train)#apprentissage des donn\u00e9es\n    model.score(X_test, y_test) \n    print(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\n    y_pred= model.predict(X_test) #prediction des valeurs\n    y_pred= y_pred.reshape(-1,1)\n    \n    print('SCORE:',model.score(X_test, y_test))\n    print('MAE:', mean_absolute_error(y_test, y_pred))\n    print('MSE:', mean_squared_error(y_test, y_pred))\n    print('RMSE:', np.sqrt(mean_squared_error(y_test, y_pred)))\n    print(\"\\n\")\n    \n    plt.figure(figsize=(15,8))\n    plt.scatter(X_test.iloc[:,1],y_test)\n    plt.scatter(X_test.iloc[:,1],y_pred,c='r')\n    plt.show()","e2025c12":"for name, model in dict_of_models.items():\n    print(name)\n    evaluation(model)","28136d31":"param_grid = [{'n_estimators':[3,10,30],'max_features':[2,4,6,8],'max_depth':[6,8,10]}]","44a5db14":"model_final=RandomForestRegressor(random_state=42, n_jobs=-1)","3daa4da9":"grid_search = GridSearchCV(model_final, param_grid, cv=5,scoring='neg_mean_squared_error')#initialisation\ngrid_search","68d64746":"X_train_prepared=preprocessor.fit_transform(X_train)","02a9d6f9":"print(X_train_prepared.shape)\nprint(X_train_prepared[0])","80ea431a":"grid_search.fit(X_train_prepared, y_train) #apprentissage du mod\u00e8le","6da10a6f":"RandomForest = Pipeline(steps=[('preprocessor', preprocessor),('RandomForest', RandomForestRegressor(n_estimators=30,random_state=42,max_depth=10,max_features=8))])","f997d518":"RandomForest","a70a63a2":"RandomForest.fit(X_train, y_train)\nRandomForest.score(X_test, y_test)\nprint(RandomForest.score(X_test, y_test))\ny_pred= RandomForest.predict(X_test)\ny_pred= y_pred.reshape(-1,1)\n\nprint('MAE:', mean_absolute_error(y_test, y_pred))\nprint('MSE:', mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(mean_squared_error(y_test, y_pred)))","a3994d34":"evaluation(RandomForest)","83c6ea1e":"encoder = OneHotEncoder()","58342972":"encoder.fit_transform(X_train[categorical_features])","e008db32":"encoded_name=encoder.get_feature_names()\nencoded_name","09a828ae":"list_features=np.append(numerical_features,encoded_name)\nlist_features=list(list_features)\nlist_features","a8ea9027":"df_features=pd.DataFrame(data=list_features,columns=['feature'])\ndf_features","e15e2732":"df_features['importance']=RandomForest.steps[1][1].feature_importances_","07ca036b":"df_features","d764e63a":"#### Etude de variation et correlation","ffcfbf56":"### prediction des prix","5f4945a2":"## TrainTest - Nettoyage - Encodage","03bddd4b":"Importation  dataset","a5ac69d0":"### Analyse de la variable categorielle","9dd81c63":"## Modellisation","07d5d76d":"### TARGET","73037b46":"### Feacture engineering","3e9f99b9":"### Pipeline  de transformation","99d10886":"#### Modele final"}}