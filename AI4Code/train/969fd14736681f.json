{"cell_type":{"33aeaa8b":"code","2b2576d6":"code","ebd03603":"code","2055ab2e":"code","31d74eb9":"code","8f593d0e":"code","4147f36d":"code","bde92f5d":"code","34e97727":"code","bc062e1f":"code","9bbe66f6":"code","8d79d6ce":"code","c02b1c50":"code","36dc1505":"code","83f9d343":"code","376b919e":"code","6f0c48e4":"code","8d3ffd89":"code","2e5bf280":"code","22793f02":"code","a83a28ab":"code","7465511f":"code","7f532c37":"code","16137f1a":"code","06a586c5":"code","97731d20":"code","aa81df02":"code","7f217418":"code","6852680e":"code","d36d5632":"code","649075d1":"code","8275ea5d":"code","2c6adb70":"code","08f4d760":"code","196c1249":"code","0a343549":"code","eca97f56":"code","b7aef4c3":"code","d5efa482":"code","17d5e0d3":"code","92ac1640":"code","90d69500":"code","4ea84206":"code","080fd5d7":"code","7ac60a82":"code","f894b341":"code","bc8fe01f":"code","98fadce9":"code","a74c6dbd":"code","abc9b235":"code","7e14c618":"code","6673a1ff":"code","b909ecfb":"code","13e5f129":"code","a2c708e7":"code","eb18e625":"code","ea753c73":"code","91051544":"code","56adc331":"code","c932fe09":"code","cde2ef08":"code","28b5d633":"code","2ccbc815":"code","b797e102":"code","5dc70317":"code","7a62ae37":"code","c411af28":"code","9719f224":"code","f949ad65":"code","84e8adca":"markdown","ed80609b":"markdown","602b9977":"markdown","38ab0e65":"markdown","e8805641":"markdown","8b87d57c":"markdown","50f2b560":"markdown","3e6f86a7":"markdown"},"source":{"33aeaa8b":"import os # for working with files\nimport torch # Pytorch module \nimport matplotlib.pyplot as plt # for plotting informations on graph and images using tensors\nimport torch.nn as nn # for creating  neural networks\nfrom torch.utils.data import DataLoader # for dataloaders \nfrom PIL import Image # for checking images\nimport torch.nn.functional as F # for functions for calculating loss\nimport torchvision.transforms as transforms # for transforming images into tensors \nfrom torchvision.utils import make_grid # for data checking\nfrom torchvision.datasets import ImageFolder # for working with classes and images\n%matplotlib inline","2b2576d6":"project_name = \"Plant-Disease-Classification\" # used by jovian","ebd03603":"Data_Dir = \"..\/input\/new-plant-diseases-dataset\/New Plant Diseases Dataset(Augmented)\/New Plant Diseases Dataset(Augmented)\"\nTrain_Dir = Data_Dir + \"\/train\"\nValid_Dir = Data_Dir + \"\/valid\"\nDiseases = os.listdir(Train_Dir)\nprint(Diseases)\nprint(len(Diseases))","2055ab2e":"plants = []\nNumberOfDiseases = 0\nfor plant in Diseases:\n    if plant.split('___')[0] not in plants:\n        plants.append(plant.split('___')[0])\n    if plant.split('___')[1] != 'healthy':\n        NumberOfDiseases += 1\nprint(plants)\nprint(len(plants))\nprint(NumberOfDiseases)","31d74eb9":"# Number of images for each disease\nnums = {}\nfor disease in Diseases:\n    nums[disease] = len(os.listdir(Train_Dir + '\/' + disease))\nprint(nums)","8f593d0e":"index = [n for n in range(38)]\nplt.bar(index, [n for n in nums.values()], width=0.3)\nplt.xlabel('Plants\/Diseases', fontsize=10)\nplt.ylabel('No of images available', fontsize=10)\nplt.xticks(index, Diseases, fontsize=5, rotation=90)\nplt.title('Images per each class of plant disease')","4147f36d":"add = 0\nfor val in nums.values():\n    add += val\nprint(add)","bde92f5d":"# datasets for validation and training\ntrain_ds = ImageFolder(Train_Dir, transform=transforms.ToTensor())\nval_ds = ImageFolder(Valid_Dir, transform=transforms.ToTensor()) ","34e97727":"img, label = train_ds[0]\nprint(img.shape, label)","bc062e1f":"train_ds.classes\n","9bbe66f6":"# for checking some images from training dataset\ndef show_image(image, label):\n    print(\"Label :\" + train_ds.classes[label] + \"(\" + str(label) + \")\")\n    plt.imshow(image.permute(1, 2, 0))","8d79d6ce":"show_image(*train_ds[0])","c02b1c50":"show_image(*train_ds[70000])","36dc1505":"show_image(*train_ds[30000])","83f9d343":"random_seed = 7\ntorch.manual_seed(random_seed)","376b919e":"batch_size = 32","6f0c48e4":"# DataLoaders for training and validation\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size, num_workers=2, pin_memory=True)","8d3ffd89":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(30, 30))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=8).permute(1, 2, 0))\n        break","2e5bf280":"show_batch(train_dl) # Images for first batch of training","22793f02":"# for moving data into GPU\ndef get_default_device():\n    if torch.cuda.is_available:\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\n\nclass DeviceDataLoader:\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for b in self.dl:\n            yield to_device(b, self.device)\n        \n    def __len__(self):\n        return len(self.dl)","a83a28ab":"device = get_default_device()\ndevice","7465511f":"# Moving data into GPU\ntrain_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","7f532c37":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n    \n\nclass DiseaseClassificationBase(nn.Module):\n    \n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        accur = accuracy(out, labels)\n        return {\"val_loss\": loss.detach(), \"val_accuracy\": accur}\n    \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x[\"val_loss\"] for x in outputs]\n        batch_accuracy = [x[\"val_accuracy\"] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()\n        epoch_accuracy = torch.stack(batch_accuracy).mean()\n        return {\"val_loss\": epoch_loss, \"val_accuracy\": epoch_accuracy}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_accuracy']))\n        ","16137f1a":"# Architecture for training\ndef ConvBlock(in_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),\n             nn.BatchNorm2d(out_channels),\n             nn.ReLU(inplace=True)]\n    if pool:\n        layers.append(nn.MaxPool2d(4))\n    return nn.Sequential(*layers)\n\n\nclass ResNet9(DiseaseClassificationBase):\n    def __init__(self, in_channels, num_diseases):\n        super().__init__()\n        \n        self.conv1 = ConvBlock(in_channels, 64)\n        self.conv2 = ConvBlock(64, 128, pool=True) # out_dim : 128 x 64 x 64 \n        self.res1 = nn.Sequential(ConvBlock(128, 128), ConvBlock(128, 128))\n        \n        self.conv3 = ConvBlock(128, 256, pool=True) # out_dim : 256 x 16 x 16\n        self.conv4 = ConvBlock(256, 512, pool=True) # out_dim : 512 x 4 x 44\n        self.res2 = nn.Sequential(ConvBlock(512, 512), ConvBlock(512, 512))\n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(4),\n                                       nn.Flatten(),\n                                       nn.Linear(512, num_diseases))\n        \n    def forward(self, xb): # xb is the loaded batch\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.classifier(out)\n        return out\n            \n        ","06a586c5":"model = to_device(ResNet9(3, len(train_ds.classes)), device) # defining the model and moving it to the GPU\nmodel","97731d20":"# for training\n@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n    \n\ndef fit_OneCycle(epochs, max_lr, model, train_loader, val_loader, weight_decay=0,\n                grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # scheduler for one cycle learniing rate\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, steps_per_epoch=len(train_loader))\n    \n    \n    for epoch in range(epochs):\n        # Training\n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # recording and updating learning rates\n            lrs.append(get_lr(optimizer))\n            sched.step()\n            \n    \n        # validation\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n        \n    return history\n    ","aa81df02":"%%time\nhistory = [evaluate(model, val_dl)]\nhistory","7f217418":"epochs = 2\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","6852680e":"%%time\nhistory += fit_OneCycle(epochs, max_lr, model, train_dl, val_dl, \n                             grad_clip=grad_clip, \n                             weight_decay=1e-4, \n                             opt_func=opt_func)","d36d5632":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return train_ds.classes[preds[0].item()]","649075d1":"test_dir = \"..\/input\/new-plant-diseases-dataset\/test\"\ntest_ds = ImageFolder(test_dir, transform=transforms.ToTensor())","8275ea5d":"test_ds.classes","2c6adb70":"test_images = sorted(os.listdir(test_dir + '\/test')) # since images in test folder are in alphabetical order\ntest_images","08f4d760":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return train_ds.classes[preds[0].item()]","196c1249":"Image.open('..\/input\/new-plant-diseases-dataset\/test\/test\/AppleCedarRust1.JPG')","0a343549":"img, label = test_ds[0]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[0], ', Predicted:', predict_image(img, model))","eca97f56":"img, label = test_ds[1]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[1], ', Predicted:', predict_image(img, model))","b7aef4c3":"img, label = test_ds[2]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[2], ', Predicted:', predict_image(img, model))","d5efa482":"img, label = test_ds[3]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[3], ', Predicted:', predict_image(img, model))","17d5e0d3":"img, label = test_ds[4]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[4], ', Predicted:', predict_image(img, model))","92ac1640":"img, label = test_ds[5]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[5], ', Predicted:', predict_image(img, model))","90d69500":"img, label = test_ds[6]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[6], ', Predicted:', predict_image(img, model))","4ea84206":"img, label = test_ds[7]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[7], ', Predicted:', predict_image(img, model))","080fd5d7":"img, label = test_ds[8]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[8], ', Predicted:', predict_image(img, model))","7ac60a82":"img, label = test_ds[9]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[9], ', Predicted:', predict_image(img, model))","f894b341":"img, label = test_ds[10]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[10], ', Predicted:', predict_image(img, model))","bc8fe01f":"img, label = test_ds[11]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[11], ', Predicted:', predict_image(img, model))","98fadce9":"img, label = test_ds[12]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[12], ', Predicted:', predict_image(img, model))","a74c6dbd":"img, label = test_ds[13]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[13], ', Predicted:', predict_image(img, model))","abc9b235":"img, label = test_ds[14]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[14], ', Predicted:', predict_image(img, model))","7e14c618":"img, label = test_ds[15]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[15], ', Predicted:', predict_image(img, model))","6673a1ff":"img, label = test_ds[16]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[16], ', Predicted:', predict_image(img, model))","b909ecfb":"img, label = test_ds[17]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[17], ', Predicted:', predict_image(img, model))","13e5f129":"img, label = test_ds[18]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[18], ', Predicted:', predict_image(img, model))","a2c708e7":"img, label = test_ds[19]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[19], ', Predicted:', predict_image(img, model))","eb18e625":"img, label = test_ds[20]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[20], ', Predicted:', predict_image(img, model))","ea753c73":"img, label = test_ds[21]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[21], ', Predicted:', predict_image(img, model))","91051544":"img, label = test_ds[22]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[22], ', Predicted:', predict_image(img, model))","56adc331":"img, label = test_ds[23]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[23], ', Predicted:', predict_image(img, model))","c932fe09":"img, label = test_ds[24]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[24], ', Predicted:', predict_image(img, model))","cde2ef08":"img, label = test_ds[25]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[25], ', Predicted:', predict_image(img, model))","28b5d633":"img, label = test_ds[26]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[26], ', Predicted:', predict_image(img, model))","2ccbc815":"img, label = test_ds[27]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[27], ', Predicted:', predict_image(img, model))","b797e102":"img, label = test_ds[28]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[28], ', Predicted:', predict_image(img, model))","5dc70317":"img, label = test_ds[29]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[29], ', Predicted:', predict_image(img, model))","7a62ae37":"img, label = test_ds[30]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[30], ', Predicted:', predict_image(img, model))","c411af28":"img, label = test_ds[31]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[31], ', Predicted:', predict_image(img, model))","9719f224":"img, label = test_ds[32]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[32], ', Predicted:', predict_image(img, model))","f949ad65":"torch.save(model.state_dict(), 'plantdiseaseclassification.pth')","84e8adca":"SO it is able to predict every image from the test data correctly","ed80609b":"### Images from training dataset","602b9977":"So there are 70295 images available for training.","38ab0e65":"Let's import required modules","e8805641":"## So it says, we got 99.21% accuracy. Let's test it.","8b87d57c":"While visualizing above information on graph","50f2b560":"# We will use resnet9 architecture to design and train a model for the prediction of disease in plants.\n","3e6f86a7":"So we have images of leaves of 14 plants and while excluding healthy leaves, we have 26 types of images that show a particular disease in a particular plant."}}