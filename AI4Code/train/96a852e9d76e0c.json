{"cell_type":{"f8067007":"code","d157a018":"code","898bd02e":"code","19fcfb9c":"code","4c002387":"code","41f2d615":"code","232bf926":"code","b02c13b1":"code","1b9fdb3c":"code","d5954bd1":"code","e27139d6":"code","bd8204f9":"code","74e034c7":"code","27cae597":"code","0f3ba940":"code","cae05c95":"code","1853cd56":"code","0f11cc36":"code","1cca0740":"code","d771001d":"code","f2ac2909":"code","df8cbbb6":"code","517df48e":"code","e118e024":"code","fa60653c":"code","faf82b69":"code","7588a966":"code","598f6a56":"code","75237106":"code","6d9e420e":"code","d2d87669":"code","e81a8039":"code","2d46ea90":"code","0a804536":"code","fa3cc0fe":"code","31d18bb1":"code","302ebd13":"code","60fe1cd3":"code","db6b48ea":"code","2ab22db3":"code","3aa9492a":"markdown","96bb1a4c":"markdown","b7563fc7":"markdown"},"source":{"f8067007":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n\n\n\n\n","d157a018":"train_df= pd.read_csv(\"..\/input\/train.csv\")\ntest_df= pd.read_csv(\"..\/input\/test.csv\")","898bd02e":"train_df.head()","19fcfb9c":"train_df.corr()","4c002387":"train_df= train_df.drop(['PassengerId','Name','Ticket'], axis=1)\ntest_df= test_df.drop(['Name','Ticket'], axis=1)","41f2d615":"train_df.head()","232bf926":"train_df['Embarked'].value_counts()","b02c13b1":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"S\")\ntest_df['Embarked']= test_df['Embarked'].fillna('S')","1b9fdb3c":"embark_dummies_titanic  = pd.get_dummies(train_df['Embarked'])\ntrain_df= train_df.join(embark_dummies_titanic)\n\nembark_dummies_test= pd.get_dummies(test_df['Embarked'])\ntest_df= test_df.join(embark_dummies_test)","d5954bd1":"train_df.head()","e27139d6":"sns.factorplot('Embarked','Survived', data=train_df,size=4,aspect=3)","bd8204f9":"train_df.corr().S","74e034c7":"train_df.corr().C","27cae597":"train_df.corr().C","0f3ba940":"train_df['Sex'].isnull().sum()","cae05c95":"train_df['Sex'].value_counts()","1853cd56":"train_df.info()","0f11cc36":"def bar_chart(feature):\n    survived = train_df[train_df['Survived']==1][feature].value_counts()\n    dead = train_df[train_df['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(15,7))\n    \nbar_chart('Sex')\n","1cca0740":"train_df.head()","d771001d":"test_df.info()","f2ac2909":"train_df= train_df.drop(['Cabin', 'Embarked', 'Sex'], axis=1)\ntest_df= test_df.drop(['Cabin','Embarked','Sex'], axis=1)","df8cbbb6":"train_df.info()","517df48e":"sns.boxplot(train_df['Age'])","e118e024":"test_df.info()\n","fa60653c":"train_df.corr().Age","faf82b69":"average_age_titanic   = train_df[\"Age\"].mean()\nstd_age_titanic       = train_df[\"Age\"].std()\ncount_nan_age_titanic = train_df[\"Age\"].isnull().sum()\n\n\naverage_age_test   = test_df[\"Age\"].mean()\nstd_age_test       = test_df[\"Age\"].std()\ncount_nan_age_test = test_df[\"Age\"].isnull().sum()\n\n\nrand_1 = np.random.randint(average_age_titanic - std_age_titanic, average_age_titanic + std_age_titanic, size = count_nan_age_titanic)\n\nrand_2 = np.random.randint(average_age_test - std_age_test, average_age_test + std_age_test, size = count_nan_age_test)\n\n\n","7588a966":"train_df['Age'].dropna().astype(int)\ntest_df['Age'].dropna().astype(int)\n\n\n\ntrain_df[\"Age\"][np.isnan(train_df[\"Age\"])] = rand_1\ntest_df[\"Age\"][np.isnan(test_df[\"Age\"])] = rand_2\n\ntrain_df['Age'] = train_df['Age'].astype(int)\ntest_df['Age']    = test_df['Age'].astype(int)\n        \ntrain_df['Fare'] = train_df['Fare'].astype(int)\n\n\ntest_df['Fare']    = test_df['Fare'].fillna(test_df['Fare'].median())\n        \n\n\n        ","598f6a56":"train_df.info()","75237106":"test_df.info()","6d9e420e":"X_train= train_df.drop('Survived', axis=1)\nY_train= train_df['Survived']\nX_test= test_df.drop('PassengerId', axis=1).copy()","d2d87669":"X_test.info()","e81a8039":"train_df.head()","2d46ea90":"M_train, M_test, n_train, n_test= train_test_split(X_train, Y_train, test_size= 0.4, random_state= 42)","0a804536":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\nc_space= np.logspace(-5, 8, 15)\nparam_grid= {'C': c_space, 'penalty': ['l1','l2']}\n\nlogreg= LogisticRegression(C= 0.0517, penalty= 'l2')\n\nlogreg.fit(M_train, n_train)\nlogreg.score(M_test, n_test)\n","fa3cc0fe":"logreg.fit(X_train, Y_train)\nlogreg.score(X_train, Y_train)\nY_pred= logreg.predict(X_test)\n","31d18bb1":"knn= KNeighborsClassifier(n_neighbors= 3)\nknn.fit(M_train, n_train)\n\n\nprint(knn.score(M_test, n_test))","302ebd13":"\"\"\"from sklearn.svm import SVC\nclf= SVC(gamma= 'auto')\nclf.fit(M_train, n_train)\n\nclf.score(M_test, n_test)\"\"\"\n","60fe1cd3":"\"\"\"from sklearn.ensemble import GradientBoostingClassifier as GBC\nfrom sklearn.model_selection import GridSearchCV\n\ngbr= GBC(max_depth=5, n_estimators= 100, random_state=1, subsample= 0.9)\ngbr.fit(X_train, Y_train)\nY_pred= gbr.predict(X_test)\"\"\"\n","db6b48ea":"\"\"\"gsc= GridSearchCV(estimator= GBC(), \n                  param_grid= {'max_depth': range(4,7), \n                              'n_estimators': (150,100),\n                               'subsample': (0.6,0.9)\n                              }, cv=7, scoring= 'neg_mean_squared_error'\n                 , verbose=0, n_jobs= -1)\ngrid_result= gsc.fit(X_train, Y_train)\nbest_params= grid_result.best_params_\nprint(best_params)\"\"\"","2ab22db3":"submission=pd.DataFrame({ 'PassengerId': test_df['PassengerId'], 'Survived': Y_pred\n                        })\n\nsubmission.to_csv('titanic.csv', index= False)","3aa9492a":"Since all of the three S,C,Q have survival correlations in the range of 14-16%, we cannot drop any of them.","96bb1a4c":"A barplot function","b7563fc7":"sex_dum= pd.get_dummies(train_df['Sex'])\ntrain_df= train_df.join(sex_dum)\n\nsex_dum_test= pd.get_dummies(test_df['Sex'])\ntest_df= test_df.join(sex_dum_test)\n\n\n\n"}}