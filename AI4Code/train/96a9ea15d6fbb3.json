{"cell_type":{"191ee8bd":"code","5d38f543":"code","3042e0fd":"code","e7a281f1":"code","e2ab5119":"code","4b80fff6":"code","4772356a":"code","7ba133b6":"code","b84b2888":"code","2cfe068b":"code","7306cdcb":"code","af9adfb5":"code","41ef553e":"code","69d94b88":"code","2b2edd55":"code","c0aeec43":"code","89207bc3":"code","d76a5868":"code","8d620fab":"code","b3c90caf":"code","700d8099":"code","3f629f65":"markdown","40c0a8f8":"markdown","b118e6c6":"markdown","50e25ba0":"markdown","a694652e":"markdown","2c6bf804":"markdown","ca051403":"markdown","ada68f80":"markdown","cb405f7d":"markdown","c762428d":"markdown","a9ea2b5b":"markdown","c0884cce":"markdown","d9a838a4":"markdown","892701c6":"markdown","de0fdaba":"markdown","9c1666ac":"markdown","5b87505b":"markdown","5260f4b0":"markdown","a2a286be":"markdown","1e2d8a3c":"markdown","0c8fa46f":"markdown","418b7eff":"markdown","493ed018":"markdown","1c645628":"markdown","1009fb43":"markdown","01ae348c":"markdown","13f62163":"markdown","de611eb8":"markdown","af087870":"markdown","b0f0bf28":"markdown","9908bf2f":"markdown","4a0860ea":"markdown","5dfd5dc1":"markdown","6cd5b890":"markdown","74384400":"markdown","35e3e19a":"markdown"},"source":{"191ee8bd":"import plotly.express as px\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport plotly\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.tools as tls\nimport seaborn as sns\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport numpy as np\n\npd.options.mode.chained_assignment = None \n\n# !pip install plotly --upgrade","5d38f543":"## Loading Football Data dataset\ndf = pd.read_csv('..\/input\/football-data\/Football_Data.csv', delimiter=',', index_col = 0)\n## Loading tabla with every transfer\ntransfers = pd.read_csv('..\/input\/football-data\/Transfer_data.csv', index_col = 0)\n## Loading data for every game\nstat_per_game = pd.read_csv('..\/input\/football-data\/stat_per_game.csv', index_col=0)","3042e0fd":"df.sample(5)","e7a281f1":"df.describe()","e2ab5119":"# So we create a scatter plot with Transfers expends on yaxis and transfers income in xaxis..\n\n# Try zooming into the graph (clicking and dragging on the graph)\n\nfig = px.scatter(df, y='Transfer_E', x='Transfer_I',size='wins',hover_name='Team',\n                 hover_data=['League', 'Year'], color='position')\n\nfig.update_layout(\n    title=\"Transfers Income and Expend\",\n    xaxis_title=\"Tran. Income\",\n    yaxis_title=\"Tran. Expend\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=16,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","4b80fff6":"Monaco_transf = transfers[(transfers.Team_from == 'Monaco') & (transfers.Season == 2018)]\nMonaco_transf","4772356a":"ManCity_transf = transfers[(transfers.Team_to == 'Manchester City') & (transfers.Season == 2017)]\nManCity_transf","7ba133b6":"import math\n# Copy df\ndiff_xpts = df.copy()\ncustomdata= list(diff_xpts['Year'])\n\n# Include subplots titles, we want a figure with two rows and one column\nfig = make_subplots(rows=2, cols=1, subplot_titles=('Relation between real points and expected points',\n                                                    'Relation between position and expected points diff'))\n\nfig.append_trace(\n    go.Scatter( y= df['xpts'], x=df['pts'], mode='markers',text=df['Team'],marker_line_width=1,\n               marker=dict(size=df['wins'],\n                color=df['position'], showscale=True\n                ),customdata=customdata,\n               hovertemplate=  \"<b>%{text}<\/b><br><br>\" +\n        \"Real points: %{x}<br>\" +\n        \"Expected Points: %{y:.1f}<br>\"+\n              'Year: %{customdata}'), row=1, col=1\n)\n\nfig.append_trace(\n    go.Scatter(x= diff_xpts['pts'], y=diff_xpts['xpts_diff'], mode='markers',text=df['Team'],marker_line_width=1.5,\n              marker=dict(color=diff_xpts['position'],\n                         size= 10, opacity=0.8),\n              customdata=customdata,\n               hovertemplate=  \"<b>%{text}<\/b><br><br>\" +\n        \"Points: %{x}<br>\" +\n        \"Exp. points diff: %{y:.1f}<br>\"+\n              'Year: %{customdata}')\n            , row=2, col=1)\n\n\n# Add diagonal line for both plots\n\nfig.add_shape(\n            type=\"line\",\n            x0=10,\n            y0=10,\n            x1=100,\n            y1=100,\n            line=dict(\n                color=\"Red\",\n                width=4,\n                dash=\"dot\",\n            ),\nrow=1,col=1)\n\nfig.add_shape(\n            type=\"line\",\n            x0=10,\n            y0=0,\n            x1=120,\n            y1=0,\n            line=dict(\n                color=\"Red\",\n                width=4,\n                dash=\"dot\",\n            ),\nrow=2,col=1)\n\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Real Points\", row=1, col=1)\nfig.update_xaxes(title_text=\"Real Points\", row=2, col=1)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Expected Points\", row=1, col=1)\nfig.update_yaxes(title_text=\"Expected points diff\", row=2, col=1)\n\n# Select the size \nfig.update_layout(height=800, width=800,\n                  title_text=\"Position and expected points\",\n                  showlegend= False,\n                 hoverlabel=dict(\n                 bgcolor=\"white\", \n                 font_size=13, \n                 font_family=\"Rockwell\"),\n                 )\n\n\nfig.show()","b84b2888":"# Filter by first and second position\nfirst_place = df[(df.position == 1) | (df.position == 2)]\n\n\nfig = px.scatter(first_place, y='xpts', x='pts',size='wins',hover_name='Team',\n                 hover_data=['League', 'Year'], color='League')\n\nfig.add_shape(\n        # Line Diagonal\n            type=\"line\",\n            x0=55,\n            y0=55,\n            x1=100,\n            y1=100,\n            line=dict(\n                color=\"Red\",\n                width=4,\n                dash=\"dot\",\n            )\n)\n\n\n\nfig.show()","2cfe068b":"## White color means the team didn't play that season.\n\n## Filter the dataframe by La Liga\nla_liga = df[df.League == 'La_liga']\n\ndfr = pd.DataFrame(la_liga.pivot('Team', 'Year', 'position'))\ndfr['Mean'] = (dfr[2014]+dfr[2015]+dfr[2016]+dfr[2017]+dfr[2018])\/5\ndfr = dfr.sort_values('Mean')\ndfr = dfr.drop(['Mean'],axis=1)\n\nplt.figure(figsize = (16,8))\nax = sns.heatmap(dfr, cmap='coolwarm', annot=True, linewidths=0.2, linecolor='white')","7306cdcb":"# Filter only for 2018\/2019 season\nla_liga_stats = la_liga[la_liga.Year == 2018]\n\n# Append a new column that shows total shots on target conceded\nla_liga_stats['RS_OnTarget'] = la_liga_stats['H_RS_OnTarget'] + la_liga_stats['A_RS_OnTarget']\n\n#Set to bar plots so they \nSOT = go.Bar(x = la_liga_stats['Team'], y = la_liga_stats['S_OnTarget'], name = 'Shots on Target')\nRSOT = go.Bar(x = la_liga_stats['Team'], y = la_liga_stats['RS_OnTarget'], name = 'Rivals Shots on Target')\n\ndata = [SOT, RSOT]\n\nlayout = go.Layout(\n    barmode='group',\n    title=\"Comparing shots on target for La Liga Teams in 2018\/2019\",\n    xaxis={'title': 'Teams'},\n    yaxis={'title': \"Shots on target\",\n    }\n)\n\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","af9adfb5":"\nfig = make_subplots(rows=1, cols=2, subplot_titles=('Relation between deep passes',\n                                                    'Relation between Passes allowed per defensive action'))\n\n\nfig.append_trace(\n    go.Scatter( y= la_liga_stats['deep_allowed'], x=la_liga_stats['deep'], mode='markers',text=la_liga_stats['Team'],marker_line_width=1,\n               marker=dict(size=10),\n                   hovertemplate=  \"<b>%{text}<\/b><br><br>\" +\n                                   \"Deep: %{x}<br>\" +\n                                   \"Deep allowed: %{y:.1f}<br>\"), row=1, col=1\n)\n\nfig.append_trace(\n    go.Scatter(y= la_liga_stats['oppda_coef'], x=la_liga_stats['ppda_coef'], mode='markers',text=la_liga_stats['Team'],marker_line_width=1.5,\n              marker=dict(size= 10),\n              hovertemplate=  \"<b>%{text}<\/b><br><br>\" +\n                              \"ppda_coef: %{x}<br>\" +\n                              \"oppda_coef: %{y:.1f}<br>\"), row=1, col=2)\n\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Deep passes\", row=1, col=1)\nfig.update_xaxes(title_text=\"ppda_coef\", row=1, col=2)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Deep passes allowed\", row=1, col=1)\nfig.update_yaxes(title_text=\"Oponent ppda_coef\", row=1, col=2)\n\n\nfig.update_layout(height=500, width=1000,\n                  title_text=\"Deep passes and ball pressure coef\",\n                  showlegend= False)\n\nfig.show()","41ef553e":"# Create a new variable that indicates how many expected goals have a team for every shot on target.\n\nla_liga_stats['Shot_Eff'] = la_liga_stats['S_OnTarget'] \/ la_liga_stats['xG']\n\nfig = make_subplots(rows=1, cols=2, subplot_titles=('Expected Goals',\n                                                    'Shot Effectiveness'))\n\n\nfig.append_trace(\n    go.Bar(x = la_liga_stats.sort_values('xG',ascending=False)['Team'],\n           y = la_liga_stats.sort_values('xG',ascending=False)['xG']), row=1, col=1)\n\nfig.append_trace(\n   go.Bar(x = la_liga_stats.sort_values('Shot_Eff')['Team'],\n          y = la_liga_stats.sort_values('Shot_Eff')['Shot_Eff']), row=1, col=2)\n\n\n\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Team\", row=1, col=1)\nfig.update_xaxes(title_text=\"Team\", row=1, col=2)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Goals Expected\", row=1, col=1)\nfig.update_yaxes(title_text=\"Shot Eff\", row=1, col=2)\n\n\nfig.update_layout(height=500, width=1000,\n                  \n                  showlegend= False)\n\nfig.show()","69d94b88":"# Correct the final positions becouse both had the same points..\n\nla_liga_stats.loc[la_liga_stats.Team == 'Sevilla', 'position'] = 6\nla_liga_stats.loc[la_liga_stats.Team == 'Getafe', 'position'] = 5\n\nfig = go.Figure(data=[go.Bar(x = la_liga_stats.sort_values('position')['Team'], \n                y = la_liga_stats.sort_values('position')['pts'],\n                text=la_liga_stats.sort_values('position')['Team'],\n                            )])\n\nfig.update_xaxes(tickangle=45, tickfont=dict(family='Rockwell', size=14))\n\n# Change colorbars characteristics\nfig.update_traces( marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1, opacity=0.6)\n\nfig.update_layout(\n\n    title=\"La Liga final positions 2018\/2019\",\n    xaxis={'title': 'Teams'},\n    yaxis={'title': \"Points\",\n    }\n)\n\n\nfig.show()","2b2edd55":"Sev = stat_per_game[stat_per_game.team == 'Sevilla']\nSev = Sev[Sev.year == 2018]\nSev['Matchday'] = range(1,39)\nSev['color'] = Sev['Matchday'].apply(lambda x: 1 if x == 26 else 0)\nfig = px.bar(Sev, y='xpts_diff', x='Matchday',text='Matchday',hover_name='Matchday',\n             hover_data=['pts', 'xpts', 'xpts_diff'], color='color',color_continuous_scale=[(0, \"green\"), (1, \"red\")])\n\nfig.add_shape(\n        # Line Diagonal\n            type=\"line\",\n            x0=0,\n            y0=0,\n            x1=40,\n            y1=0,\n            line=dict(\n                color=\"Red\",\n                width=2,))\n\nfig.update_xaxes(ticksuffix=\"\u00ba\")\n            \nfig.update_layout(coloraxis_showscale=False,\n                xaxis_title='Matchday',\n                yaxis_title=\"Expected points diff\",\n                font=dict(\n                family=\"'Rockwell'\",\n                size=13,\n                color=\"#7f7f7f\"))\n\nfig.show()","c0aeec43":"# Copy the df to a new one\nnewpoints= la_liga_stats.copy()\n# Change Sevilla's points to 62\nnewpoints.loc[newpoints.Team == 'Sevilla','pts'] = 62\n\n# Set colors so we can change only Sevilla's bar color\ncolors = ['blue',] * newpoints.shape[0]\ncolors[3] = 'red'\n\nfig = go.Figure(data=[go.Bar(x = newpoints.sort_values('pts',ascending=False)['Team'], y = newpoints.sort_values('pts',ascending=False)['pts'],\n                                 text=newpoints.sort_values('pts',ascending=False)['Team'],\n                                 hovertext=newpoints.sort_values('pts',ascending=False)['pts'],\n                                 textposition='auto',\n                         )\n                     ]\n               )\n\n# Change colorbars characteristics\nfig.update_traces(marker_color=colors, marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1, opacity=0.6)\n\nfig.update_xaxes(tickangle=50, tickfont=dict(family='Rockwell', size=14))\n\n\n\nfig.update_xaxes(title_text=\"Team\")\nfig.update_yaxes(title_text=\"Points\")\n\n\nfig = go.Figure(fig, layout=layout)\npy.iplot(fig)","89207bc3":"print( \"Winning Huesca's match would get Sevilla a money compensation difference of:  \"+\n        str(round(12.76 - 8.12 + 15, 2)) + \" Millions\")","d76a5868":"# So first we look to how would had Sevilla finishes all Seasons\n\n# Create a df for each different plot\nnewpoints1 = la_liga[la_liga.Year == 2014].sort_values('xpts', ascending=False)\nnewpoints2 = la_liga[la_liga.Year == 2015].sort_values('xpts', ascending=False)\nnewpoints3 = la_liga[la_liga.Year == 2016].sort_values('xpts', ascending=False)\nnewpoints4 = la_liga[la_liga.Year == 2017].sort_values('xpts', ascending=False)\nnewpoints5 = la_liga[la_liga.Year == 2018].sort_values('xpts', ascending=False)\n# Same for each barplot colors\ncolor1 = ['blue'] * newpoints.shape[0]\ncolor1[list(newpoints1.Team.unique()).index('Sevilla')] = 'red'\ncolor2 = ['blue'] * newpoints.shape[0]\ncolor2[list(newpoints2.Team.unique()).index('Sevilla')] = 'red'\ncolor3 = ['blue'] * newpoints.shape[0]\ncolor3[list(newpoints3.Team.unique()).index('Sevilla')] = 'red'\ncolor4 = ['blue'] * newpoints.shape[0]\ncolor4[list(newpoints4.Team.unique()).index('Sevilla')] = 'red'\ncolor5 = ['blue'] * newpoints.shape[0]\ncolor5[list(newpoints5.Team.unique()).index('Sevilla')] = 'red'\n\n# Initialize figure\nfig = go.Figure()\n\n# Add Traces\n\nfig.add_trace(\n    go.Bar(x = newpoints1['Team'], y = newpoints1['xpts'],\n                                 text=newpoints1['Team'],\n                                 hovertext=newpoints1['xpts'],\n                                 textposition='auto',\n                                 visible=False,\n                                 # Change bar colors\n                                 marker_color=color1, marker_line_color='rgb(8,48,107)',\n                                 marker_line_width=1, opacity=0.6\n                         ))\n\nfig.add_trace(\n    go.Bar(x = newpoints2['Team'], y = newpoints2['xpts'],\n                                 text=newpoints2['Team'],\n                                 hovertext=newpoints2['xpts'],\n                                 textposition='auto',\n                                 visible=False,\n                                 marker_color=color2, marker_line_color='rgb(8,48,107)',\n                                 marker_line_width=1, opacity=0.6\n                         ))\n\nfig.add_trace(\n    go.Bar(x = newpoints3['Team'], y = newpoints3['xpts'],\n                                 text=newpoints3['Team'],\n                                 hovertext=newpoints3['xpts'],\n                                 textposition='auto',\n                                 visible=False,\n                                 marker_color=color3, marker_line_color='rgb(8,48,107)',\n                                 marker_line_width=1, opacity=0.6\n           \n                         ))\n\nfig.add_trace(\n    go.Bar(x = newpoints4['Team'], y = newpoints4['xpts'],\n                                 text=newpoints4['Team'],\n                                 hovertext=newpoints4['xpts'],\n                                 textposition='auto',\n                                 visible=False,\n                                 marker_color=color4, marker_line_color='rgb(8,48,107)',\n                                 marker_line_width=1, opacity=0.6\n                         ))\n\nfig.add_trace(\n    go.Bar(x = newpoints5['Team'], y = newpoints5['xpts'],\n                                 text=newpoints5['Team'],\n                                 hovertext=newpoints5['xpts'],\n                                 textposition='auto',\n                                # We make this trace Visible=True so it's the one that appear automatically\n           marker_color=color5, marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1, opacity=0.6\n                         ))\n\n\n# Take care of buttons\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            active=4,\n            x=0.9,\n            y=1.2,\n            buttons=list([\n                dict(label=\"2014\",\n                     method=\"update\",\n                     args=[{\"visible\": [True, False, False, False, False]},\n                           {\"title\": \"Season 2014\/2015\"}]),\n                dict(label=\"2015\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, True, False, False, False]},\n                           {\"title\": \"Season 2015\/2016\"}]),\n                dict(label=\"2016\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, False, True, False, False]},\n                           {\"title\": \"Season 2016\/2017\"}]),\n                dict(label=\"2017\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, False, False, True, False]},\n                           {\"title\": \"Season 2017\/2018\"}]),\n                 dict(label=\"2018\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, True]},\n                           {\"title\": \"Season 2018\/2019\"}]),\n                \n            ]),\n        )\n    ])\n","8d620fab":"print(\"Sevilla final positions:\")\nfor year in range(2014,2019):\n    ran = la_liga[la_liga.Year == year]\n    ran['ranking'] = ran['xpts'].rank(ascending=False)\n    print(\"Season {}\/{}: \".format(year,year+1) + ' ' +  str(int(ran[ran.Team == 'Sevilla']['ranking'].values[0])) + '\u00ba')\n    ","b3c90caf":"# Check the website indicated above to look for the table with all the money obtained by each team\n\nprint(\"Sevilla tv compensation by final positions:\\n\")\nprint('-'*70)\nprint(\"\\n\"\n\"Season 2014\/2015 ----> 5.46 Millions for tv\\n\"\n\"Season 2015\/2016 ----> 5.46 Millions + 12 Millions for Champions \\n\"\n\"Season 2016\/2017 ----> 5.46 Millions\\n\"\n\"Season 2017\/2018 ----> 7.29 Millions + 13 Millions for Champions \\n\"\n\"Season 2018\/2019 ----> 15.08 Millions + 15 Millions for Champions \\n\")\nprint('-'*70)     \nprint(\"Total = {} Millions\".format(str(5.46*3+7.29+15.08+ 12+ 13+15)))","700d8099":"print('Real earnings for this seasons: 15.8 Millions for tv + 6 Millions for Europa League \\n'\n      'Expected earnings for this seasons: 78.15 Millions \\n'\n      'Difference: %.1f Millions'%(78.15-15.8-6))","3f629f65":"# Coclusion\n\nHow much of a game can be put down to randomness? how much of the game is luck and how much of it is skill?\nWe all know that even if a team plays brilliant, with a solid defense, skill players and lot of motivation, there always be a chance of losing against a team that is in last position. But, there is evidence that if a team maintains its great gameplay throughout a season, it will achieve great results. As it is not an exact science, we can never know what will happen during one season, or even in a cup like the Champions League or La Libertadores of America. *Leicester* in Premier League 2015\/2016, *Chelsea* in 2012 (Champions League) or *River Plate* in 2019 (Libertadores) are examples of this.\nSo, Sevilla lost against Huesca in a game that, perhaps, should not have lost, and those three points would have placed them in fourth place. But that is exactly why football is so exiting, unpredictable.  ","40c0a8f8":"We change Sevilla's position of each year and sum all the money that they would have earned by the distribution of the television rights, plus the money obtained just for participating in the Champions League. Of course it would be more if they go to next rounds...but that involve other analysis.","b118e6c6":"One last question so we can finish this kernel.  \nWhat would it be all the money compensation difference for Sevilla if they would have achieved the expected points      since 2014\/2015 season?","50e25ba0":"After all, Sevilla turn to fourth position, letting them participate in Champions League. And if we look for the tv money compensation, divide by position, we can\ncalculate the money that Sevilla would have won if Avila couldn't save that ball.","a694652e":" On this plots we try to analize the quantity of '**deep**' passes (left), that is to say,\n passes completed within an estimated 20 yards of goal. And the **ppda_coef** (right), passes allowed per defensive action,\n how many sequently passes does the rival defense give before a defensive action:","2c6bf804":"So, if Sevilla would have achieved the exact expected points, and also the other teams too, they would have earned 56.4 millions of euros more than what they earned. The big difference is the classification to the Champions League.","ca051403":"#### Difference between shots on target recieved and conceded","ada68f80":"## Let's look closer to Sevilla's season..","cb405f7d":"### Imports and initial configuration","c762428d":"## Okey, let's plot some stats of La Liga","a9ea2b5b":" It can clearly be seen that only a few teams finished on top of the table for the last five years.","c0884cce":" What could happened if Avila, Huesca Heros that night, couldn't save Munir goal at the end of the match.. okey that would\n cause Sevilla win 3 points, would that changed something? ","d9a838a4":"### For a few moments, forget about final positions and lets see some stats of 2018\/2019 season.","892701c6":"### How much do teams spend on transfers?","de0fdaba":"Expected points is a metric that together with lots of variables (**xG** is one and the most important of them), \nshows the average points expected for each game in condition with all of the variables given.","9c1666ac":"Eibar, with the lowest **ppda_coef**, of 7 passes allowed before a defensive action, is the La Liga team which had more pressure\non the ball on his attacking half. Also, is the third, behind Barcelona and Real Madrid, with less deep-passes allowed.\n","5b87505b":"The expected-goals metric reflects the probability of a given goal-scoring chance to be converted into a goal. So, let's dive into the most important feature in relation to the expected points, and therefore, the final position.","5260f4b0":" So now, knowing the final positions on the league, how can we not expect Sevilla being on top 4 in the league if:  \n \n**1.**   Third with more wins  \n\n**2.**   Third with more shots on target  \n\n**3.**   Second with more expected goals  \n\n**4.**   Best shot effectivness","a2a286be":"\nNow, I'd like to read your comments! And, of course, if you find an error, don't hesitate to inform me.  \n\nThank you!","1e2d8a3c":"The year corresponds to the year of the start of the season.\nAs we can see, in the five big leagues, the teams that spends more money and sells more players, usually finish in top 6.  Totally logical, no huge insights here.  \n\nMonaco, as an exception, in 2018, sold Mbappe, Lemar and Fabinho. Only these three players represent more than 250 millions! \n\nManager Pep Guardiola, in 2017, wanted a quartet of new defenders after seeing his team concede six goals over two games against Monaco in the last 16. Taking Manchester City to one of the team that more expended in a transfer window, and also has taken Pep Guardiola's spending as a coach to 1.307.9 billion euros in just 11 seasons on the benches of Europe's elite sides.","0c8fa46f":"### Relation between Expected points and Real points.","418b7eff":"### Loading datasets:","493ed018":" We can see that Barcelona, Sevilla and Real Madrid are the top three with more expected goals on the entire season.\n While the right plot show how much shots need a team to have one expected goal, in other way, the effectivness of the shots.","1c645628":"In this notebook we will explore some soccer statistics from a database that contains a wide variety of known metrics, such as goals and shots on target, plus some more modern metrics, such as expected goals. \n\nSo.. let's have some fun time!","1009fb43":"# What does bad luck in football involve?","01ae348c":"If you want to take a look of the tv income distribution I mention you can check here:  \n*https:\/\/eldesmarque.com\/actualidad\/futbol\/primera-laliga-santander\/1309924-cuanto-cobra-cada-equipo-de-laliga-por-posicion  *\nand Breakdown of prize money for Champions League here:  \n*https:\/\/www.palco23.com\/competiciones\/como-repartira-la-uefa-los-2550-millones-de-champions-y-europa-league-entre-los-clubes.html*","13f62163":"If we plot the **expected points** in each game of the season, we could know in which match Sevilla had, maybe, some lack of luck. Games where this metric is above the cero line are games in which Sevilla get less points than expected. So, let's dig deeper!","de611eb8":"4.64 millions of tv and others 15 millions just for participating in the Champions League!!","af087870":"Now, knowing this, we can calculate the difference of the money earned and the money that would have earned instead.","b0f0bf28":"It can see that Barcelona, Real Madrid, and Sevilla are the top 3 shoters of the season..  \nBarcelona shots the double than received !","9908bf2f":"We can look that in matchday 26 (against Huesca), Sevilla expect 2,57 points, almost the three points! and they lose. \nIf you watch again the game, on last minute of play, Sevilla had a clear chance that was saved in the line goal by a Huesca player,\nand after that, in the 98' minute, Huesca scored.  \n\nYou can watch the last minutes of the game here:* https:\/\/www.youtube.com\/watch?v=5hErvGbAgm4&t=6756s *","4a0860ea":"Teams on top of the red line obtained less points than expected, and vice versa. It definitely shows that teams which finished in top 6, obtained more points than expected.\n","5dfd5dc1":"<img src=\"https:\/\/piks-eldesmarqueporta.netdna-ssl.com\/thumbs\/680\/bin\/2019\/05\/17\/reparto_derechos_televisivos_001.jpg\" width=\"700px\">","6cd5b890":"#### Final positions for every team since 2014\/2015 season.","74384400":"#### Plotting only first and second teams","35e3e19a":"As we can see from these charts, there are teams that couldn't reach the expected points, and other teams exceeded them. In general, top of table teams tend to, in one way or another, get more points en average than those expected ones. On the other hand, worst teams of the league finished with less points than expected.\n\nDoes this mean that top teams had a factor of luck that might have played in favour to their shoots and that bottom teams have not luck at all?...or simply better teams have players that can score goals on more complicated situations?\n"}}