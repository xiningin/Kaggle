{"cell_type":{"b1415363":"code","d7f05737":"code","8d5075a3":"code","051a9dac":"code","02f827c7":"code","67e0c5b0":"code","cb1cebd8":"code","a93ef63d":"code","c52acc8c":"code","7747389c":"code","80adbb57":"code","97d9b151":"code","a23b66dc":"code","06f55609":"code","93f31c79":"code","15536763":"code","9514f660":"code","fd164ebd":"code","07987fae":"code","b91bab2a":"code","cd901f89":"code","0ea72aa7":"code","0d6115bb":"code","bcbdc3f1":"code","a18a75a7":"code","86fd642d":"code","4274ed21":"code","0937c23e":"code","f376303d":"code","13dc2d97":"code","0415e96b":"code","2778efcb":"code","66423625":"code","f324e7bf":"code","ff3c4d7f":"markdown","fbef3aec":"markdown","ae18addf":"markdown","6687ec00":"markdown","067e1027":"markdown","a01aa18d":"markdown","329e508d":"markdown","b1d6cb13":"markdown","18bce886":"markdown","6289d6e8":"markdown"},"source":{"b1415363":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7f05737":"df=pd.read_csv(\"\/kaggle\/input\/glass\/glass.csv\")","8d5075a3":"df.shape","051a9dac":"df.head(10)","02f827c7":"df.describe().T","67e0c5b0":"df.info()","cb1cebd8":"df.isnull().sum()","a93ef63d":"import seaborn as sns\np=sns.pairplot(df, hue = 'Type')","c52acc8c":"## checking the balance of the data by plotting the count of type by their value\ncolor_wheel = {1: \"#0392cf\",2: \"#7bc043\"}\ncolors = df[\"Type\"].map(lambda x: color_wheel.get(x + 1))\nprint(df.Type.value_counts())\np=df['Type'].value_counts().plot(kind=\"bar\")","7747389c":"#dividing data\nX = df.drop(\"Type\",axis = 1)\ny = df.Type","80adbb57":"X.head(10)","97d9b151":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","a23b66dc":"#scalling all data to be with the same scale \nscaler = StandardScaler()\nX =scaler.fit_transform(X)","06f55609":"X","93f31c79":"#importing train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.33,random_state=42,shuffle=True, stratify=y)","15536763":"print('X_train shape : ', X_train.shape )\nprint('y_train shape : ', y_train.shape )\nprint('X_test shape : ', X_test.shape )\nprint('y_test shape : ', y_test.shape )","9514f660":"from sklearn.neighbors import KNeighborsClassifier\n\n\ntest_scores = []\ntrain_scores = []\nK=[]\nfor i in range(1,15):\n\n    knn = KNeighborsClassifier(i)\n    knn.fit(X_train,y_train)\n    \n    train_scores.append(knn.score(X_train,y_train))\n    test_scores.append(knn.score(X_test,y_test))\n    K.append(i)","fd164ebd":"results= { 'train_scores':train_scores,\n         'test_scores':test_scores,\n         'K':K}\nresultsdf =  pd.DataFrame(results,\n        columns=['train_scores','test_scores', 'K'])\nresultsdf","07987fae":"print('train_scores  are :' , train_scores )\nprint('test_scores  are :' , test_scores )\nprint('K  are :' , K )","b91bab2a":"print('max_train score', max(train_scores))\nprint('min train score', min(train_scores))","cd901f89":"print('max test score', max(test_scores))\nprint('max test score', min(test_scores))","0ea72aa7":"import numpy as np # linear algebra\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#import confusion_matrix\nfrom sklearn.metrics import confusion_matrix\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","0d6115bb":"KNNModel = KNeighborsClassifier(1)\nKNNModel.fit(X_train,y_train)\n\ntrain_score = KNNModel.score(X_train,y_train)\ntest_score = KNNModel.score(X_test,y_test)\nprint( 'train_score ', train_score)\nprint( 'test_score ',test_score )","bcbdc3f1":"from sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","a18a75a7":"#prediction step\ny_pred = knn.predict(X_test)\n\n\nconfusion_matrix(y_test,y_pred)\npd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","86fd642d":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred))","4274ed21":"from sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test,y_pred))","0937c23e":"#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nRFclfModel.fit(X_train,y_train)\n\ny_pred_RFclfModel=RFclfModel.predict(X_test)","f376303d":"from sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred_RFclfModel))","13dc2d97":"confusion_matrix(y_test,y_pred)\npd.crosstab(y_test, y_pred_RFclfModel, rownames=['True'], colnames=['Predicted'], margins=True)","0415e96b":"print(classification_report(y_test, y_pred_RFclfModel))","2778efcb":"df.tail()","66423625":"sns.pairplot(df [[\"RI\", \"Na\", \"Mg\", \"Type\"]], diag_kind=\"kde\");","f324e7bf":"df.to_csv(\"result3.csv\")","ff3c4d7f":"## confusion_matrix","fbef3aec":"## classification_report","ae18addf":"## Accuracy","6687ec00":"## confusion_matrix","067e1027":"## K Neighbors Classifier","a01aa18d":"### chosing the best prameters","329e508d":"## Random Forest Model","b1d6cb13":"## Accuracy","18bce886":"## K Neighbors Classifier","6289d6e8":"## classification report"}}