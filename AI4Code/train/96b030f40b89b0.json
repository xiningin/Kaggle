{"cell_type":{"e0a07f5d":"code","b5ed647f":"code","f3da2842":"code","f7daba4a":"code","83ee0174":"code","4302e33a":"code","79683f34":"code","2415e453":"code","c45d3f50":"code","05972405":"code","78b34d3d":"code","4636a897":"code","786e89c1":"code","b18704bd":"code","14575f18":"code","04657420":"code","111e033c":"code","3b25e022":"code","5f8233f7":"code","ee9b7703":"code","4c641fc3":"code","54b8485f":"code","5248ca4c":"code","b5d42335":"code","1d0d02a3":"code","bedc5121":"code","6bba62d2":"code","1e73044c":"code","548e78b2":"code","e869f6c2":"code","d96f54aa":"code","dd295bb3":"code","a66e42ee":"code","22f989e1":"code","5411e061":"code","76a5d03a":"code","767aee8a":"code","e2b1c0c6":"code","6976cd20":"markdown","50c03c57":"markdown","f9f3c444":"markdown","4916827d":"markdown","2eee364c":"markdown","77b6f2b1":"markdown","b3e6c33b":"markdown","c117019d":"markdown","1e5d2f24":"markdown","0032e2eb":"markdown","eaa690c3":"markdown","65377377":"markdown","e06b6cb7":"markdown","d240b128":"markdown","87d9181e":"markdown","aa99bf54":"markdown","dbde70b1":"markdown","a7c5b165":"markdown","68b9d71f":"markdown","07b14131":"markdown","a5e1e6ab":"markdown","cd654678":"markdown","794c957b":"markdown","5219bf67":"markdown","c12500d7":"markdown","65748904":"markdown","c4e1058b":"markdown","291ad2ad":"markdown","14a6512a":"markdown","d2b33c82":"markdown","db661fb0":"markdown","42794733":"markdown","8b112ec6":"markdown","d4b3513b":"markdown","bcd1d6ec":"markdown","2bffc8f4":"markdown","aa5d29fe":"markdown","80358274":"markdown","27d4b833":"markdown"},"source":{"e0a07f5d":"import gc\nimport numpy as np\nimport pandas as pd\n# Seaborn and matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Plotly library\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\n# Sklearn and lightgbm\nfrom sklearn.preprocessing import LabelEncoder\nimport lightgbm as lgbm\n# Set some configurations\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=UserWarning)\npd.set_option('max_columns', 100)\npd.set_option('max_rows', 100)\ninit_notebook_mode(connected=True)\n\n# Set data types to save memory - from: https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data\ndtypes = {\n    'MachineIdentifier':                                    'category',\n    'ProductName':                                          'category',\n    'EngineVersion':                                        'category',\n    'AppVersion':                                           'category',\n    'AvSigVersion':                                         'category',\n    'IsBeta':                                               'int8',\n    'RtpStateBitfield':                                     'float16',\n    'IsSxsPassiveMode':                                     'int8',\n    'DefaultBrowsersIdentifier':                            'float16',\n    'AVProductStatesIdentifier':                            'float32',\n    'AVProductsInstalled':                                  'float16',\n    'AVProductsEnabled':                                    'float16',\n    'HasTpm':                                               'int8',\n    'CountryIdentifier':                                    'int16',\n    'CityIdentifier':                                       'float32',\n    'OrganizationIdentifier':                               'float16',\n    'GeoNameIdentifier':                                    'float16',\n    'LocaleEnglishNameIdentifier':                          'int8',\n    'Platform':                                             'category',\n    'Processor':                                            'category',\n    'OsVer':                                                'category',\n    'OsBuild':                                              'int16',\n    'OsSuite':                                              'int16',\n    'OsPlatformSubRelease':                                 'category',\n    'OsBuildLab':                                           'category',\n    'SkuEdition':                                           'category',\n    'IsProtected':                                          'float16',\n    'AutoSampleOptIn':                                      'int8',\n    'PuaMode':                                              'category',\n    'SMode':                                                'float16',\n    'IeVerIdentifier':                                      'float16',\n    'SmartScreen':                                          'category',\n    'Firewall':                                             'float16',\n    'UacLuaenable':                                         'float32',\n    'Census_MDC2FormFactor':                                'category',\n    'Census_DeviceFamily':                                  'category',\n    'Census_OEMNameIdentifier':                             'float16',\n    'Census_OEMModelIdentifier':                            'float32',\n    'Census_ProcessorCoreCount':                            'float16',\n    'Census_ProcessorManufacturerIdentifier':               'float16',\n    'Census_ProcessorModelIdentifier':                      'float16',\n    'Census_ProcessorClass':                                'category',\n    'Census_PrimaryDiskTotalCapacity':                      'float32',\n    'Census_PrimaryDiskTypeName':                           'category',\n    'Census_SystemVolumeTotalCapacity':                     'float32',\n    'Census_HasOpticalDiskDrive':                           'int8',\n    'Census_TotalPhysicalRAM':                              'float32',\n    'Census_ChassisTypeName':                               'category',\n    'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n    'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n    'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n    'Census_PowerPlatformRoleName':                         'category',\n    'Census_InternalBatteryType':                           'category',\n    'Census_InternalBatteryNumberOfCharges':                'float32',\n    'Census_OSVersion':                                     'category',\n    'Census_OSArchitecture':                                'category',\n    'Census_OSBranch':                                      'category',\n    'Census_OSBuildNumber':                                 'int16',\n    'Census_OSBuildRevision':                               'int32',\n    'Census_OSEdition':                                     'category',\n    'Census_OSSkuName':                                     'category',\n    'Census_OSInstallTypeName':                             'category',\n    'Census_OSInstallLanguageIdentifier':                   'float16',\n    'Census_OSUILocaleIdentifier':                          'int16',\n    'Census_OSWUAutoUpdateOptionsName':                     'category',\n    'Census_IsPortableOperatingSystem':                     'int8',\n    'Census_GenuineStateName':                              'category',\n    'Census_ActivationChannel':                             'category',\n    'Census_IsFlightingInternal':                           'float16',\n    'Census_IsFlightsDisabled':                             'float16',\n    'Census_FlightRing':                                    'category',\n    'Census_ThresholdOptIn':                                'float16',\n    'Census_FirmwareManufacturerIdentifier':                'float16',\n    'Census_FirmwareVersionIdentifier':                     'float32',\n    'Census_IsSecureBootEnabled':                           'int8',\n    'Census_IsWIMBootEnabled':                              'float16',\n    'Census_IsVirtualDevice':                               'float16',\n    'Census_IsTouchEnabled':                                'int8',\n    'Census_IsPenCapable':                                  'int8',\n    'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n    'Wdft_IsGamer':                                         'float16',\n    'Wdft_RegionIdentifier':                                'float16',\n    'HasDetections':                                        'int8'\n}","b5ed647f":"train = pd.read_csv('..\/input\/train.csv', dtype=dtypes)\ntest = pd.read_csv('..\/input\/test.csv', dtype=dtypes)\nprint(\"train shape\", train.shape, \"test shape\", test.shape)\ntrain.head(4)","f3da2842":"machine_id = pd.concat([train.MachineIdentifier, test.MachineIdentifier])\nprint(\"Max machines for each id:\", machine_id.value_counts().max())\ndel machine_id","f7daba4a":"target_count = train.HasDetections.value_counts()\npie_trace = go.Pie(labels=target_count.index, values=target_count.values)\nlayout = dict(title= \"HasDetections distribution\", height=400, width=800)\nfig = dict(data=[pie_trace], layout=layout)\niplot(fig)","83ee0174":"numeric_features_list = [\n    'AVProductsInstalled',\n    'AVProductsEnabled',\n    'Census_ProcessorCoreCount',\n    'Census_PrimaryDiskTotalCapacity',\n    'Census_SystemVolumeTotalCapacity',\n    'Census_TotalPhysicalRAM',\n    'Census_InternalPrimaryDiagonalDisplaySizeInInches',\n    'Census_InternalPrimaryDisplayResolutionHorizontal',\n    'Census_InternalPrimaryDisplayResolutionVertical',\n    'Census_InternalBatteryNumberOfCharges'\n]","4302e33a":"categorical_features_list = [f for f in train.columns if f not in numeric_features_list and \n                             train[f].dtype != 'int8' and f != 'MachineIdentifier' and f != 'HasDetections']\n\ncardinality = pd.DataFrame({\n    'feature': categorical_features_list,\n    'nunique_train': [train[f].nunique(dropna=False) for f in categorical_features_list],\n    'nunique_test': [test[f].nunique(dropna=False) for f in categorical_features_list],  \n})\ncardinality.sort_values(by='nunique_train', inplace=True)\n\ntrace0 = go.Bar(y=cardinality.feature, x=cardinality.nunique_train,\n                orientation='h', marker=dict(color='rgba(222,45,38,0.9)'), name='train')\ntrace1 = go.Bar(y=cardinality.feature, x=cardinality.nunique_test,\n                orientation='h', marker=dict(color='rgb(204,204,204)'), name='test')\n\nlayout = go.Layout(\n    title='Categorical cardinality', height=1600, width=800,\n    xaxis=dict(\n        title='Number of categories',\n        titlefont=dict(size=16, color='rgb(107, 107, 107)'),\n        domain=[0.3, 1]\n    ),\n    barmode='group',\n    bargap=0.1,\n    bargroupgap=0.1\n)\nfig = go.Figure(data=[trace0, trace1], layout=layout)\niplot(fig)","79683f34":"missing_train = train.isna().sum() \/ len(train)\nmissing_train = missing_train[missing_train > 0]\nmissing_train.sort_values(ascending=True, inplace=True)\n\nmissing_test = test.isna().sum() \/ len(test)\nmissing_test = missing_test[missing_test > 0]\nmissing_test.sort_values(ascending=True, inplace=True)\n\ntrace1 = go.Bar(y=missing_train.index, x=missing_train.values, orientation='h',\n                marker=dict(color='rgb(49,130,189)'), name='train')\ntrace2 = go.Bar(y=missing_train.index, x=missing_test[missing_train.index],\n                orientation='h', marker=dict(color='rgb(204,204,204)'), name='test')\n\nlayout = go.Layout(\n    title='Missing values', height=1600, width=800,\n    xaxis=dict(\n        title='Percentage of missing values',\n        titlefont=dict(size=16, color='rgb(107, 107, 107)'),\n        domain=[0.25, 1]\n    ),\n    barmode='group',\n    bargap=0.15,\n    bargroupgap=0.1\n)\n\nfig = go.Figure(data=[trace1, trace2], layout=layout)\niplot(fig)","2415e453":"tmp_df = pd.DataFrame()\ntmp_df['train_set'] = train.ProductName.value_counts() \/ len(train) * 100\ntmp_df['test_set'] = test.ProductName.value_counts() \/ len(test) * 100\ntmp_df","c45d3f50":"def target_test_barplot(col, title, max_items=None, percentage=False):\n    \"\"\"Custom barplot with train dataset split by target and test set.\"\"\"\n    test_count = test[col].value_counts().iloc[:max_items]\n    neg_count = train[train.HasDetections == 0][col].value_counts()\n    pos_count = train[train.HasDetections == 1][col].value_counts()\n    # Order the first plot by the number of examples in train\n    train_count = train[col].value_counts().iloc[:max_items]\n    if percentage:\n        test_count \/= len(test)\n        neg_count \/= len(train)\n        pos_count \/= len(train)\n    trace0 = go.Bar(\n        x=train_count.index.astype('str'),\n        y=neg_count[train_count.index],\n        name='Target 0',\n        marker=dict(color='rgba(204,204,204, 0.8)')\n    )\n    trace1 = go.Bar(\n        x=train_count.index.astype('str'),\n        y=pos_count[train_count.index],\n        name='Target 1',\n        marker=dict(color='rgba(222,45,38,0.9)')\n    )\n    trace2 = go.Bar(\n        x=test_count.index.astype('str'),\n        y=test_count.values,\n        name='Test set',\n        marker=dict(color='rgb(49,130,189)')\n        #marker=dict(color='rgba(204,204,204, 0.9)'),\n    )\n    fig = tools.make_subplots(rows=1, cols=2, print_grid=False)\n    fig.append_trace(trace0, 1, 1)\n    fig.append_trace(trace1, 1, 1)\n    fig.append_trace(trace2, 1, 2)\n\n    fig['layout'].update(height=400, width=800, title=title, barmode='stack')\n    fig['layout']['xaxis1'].update(type='category')\n    fig['layout']['xaxis2'].update(type='category')\n    iplot(fig)\n    del neg_count, pos_count, test_count; gc.collect()\n\ntarget_test_barplot('EngineVersion', 'Engine Version - top 6', 6, True)\ntarget_test_barplot('AppVersion', 'App Version - top 8', 8, True)","05972405":"print(train.IsBeta.value_counts(dropna=False)\/len(train)*100)\nprint(train.IsSxsPassiveMode.value_counts(dropna=False)\/len(train)*100)","78b34d3d":"target_test_barplot('RtpStateBitfield', 'RtpStateBitfield')","4636a897":"col1, col2 = 'AVProductsInstalled', 'AVProductsEnabled'\nf1 = train.groupby(col1)['HasDetections'].apply(lambda x: sum(x) \/ len(x))\nf2 = train.groupby(col2)['HasDetections'].apply(lambda x: sum(x) \/ len(x))\nf1 = f1[1:6]\n\nlen_items1 = train.groupby(col1)['HasDetections'].size() \/ len(train)\nlen_items2 = train.groupby(col2)['HasDetections'].size() \/ len(train)\n\ntrace0 = go.Scatter(\n    x=f1.index.astype('str'),\n    y=f1.values,\n    name=\"Target 1\",\n    marker=dict(color='rgba(222,45,38,0.8)')\n)\ntrace1 = go.Scatter(\n    x=f2.index.astype('str'),\n    y=f2.values,\n    name=\"Target 1\",\n    marker=dict(color='rgba(222,45,38,0.8)')\n)\ntrace2 = go.Scatter(\n    x=f1.index.astype('str'),\n    y=len_items1[f1.index],\n    name=\"Percentage from total\",\n    marker=dict(color='rgba(204,204,204, 0.9)')\n)\ntrace3 = go.Scatter(\n    x=f2.index.astype('str'),\n    y=len_items2[f2.index],\n    name=\"Percentage from total\",\n    marker=dict(color='rgba(204,204,204, 0.9)')\n)\nfig = tools.make_subplots(rows=1, cols=2, print_grid=False)\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 1, 1)\nfig.append_trace(trace3, 1, 2)\n\nfig['layout'].update(height=440, width=800, title=\"Antivirus installed and enabled\",\n                     showlegend=False)\nfig['layout']['xaxis1'].update(type='category', title=col1)\nfig['layout']['xaxis2'].update(type='category', title=col2)\niplot(fig)\ndel f1, f2; gc.collect();","786e89c1":"def scatter_train(col, title, color=None):\n    \"\"\"Plot the count of each category in y-axis and the positve label in x-axis.\"\"\"\n    count = train[col].value_counts(ascending=True)\n    positive = train[train.HasDetections == 1][col].value_counts()\n    trace = go.Scattergl(x=positive[count.index]\/count.values,\n                         y=count.values, mode='markers',\n                         text=count.index.values.astype('str'),\n                         marker=dict(color=color))\n\n    layout = go.Layout(\n        title=title, height=500, width=800,\n        xaxis=dict(title='Percentage of positive label'),\n        yaxis=dict(title='Number of samples in train'),\n    )\n    fig = go.Figure(data=[trace], layout=layout)\n    iplot(fig)\n\nscatter_train('AvSigVersion', 'Defender state (AvSigVersion)')","b18704bd":"col = 'AVProductStatesIdentifier'\ncount = train[col].value_counts(ascending=True)\ncount.drop(labels=[53447], inplace=True)\npositive = train[train.HasDetections == 1][col].value_counts()\ntrace = go.Scattergl(x=positive[count.index]\/count.values,\n                     y=count.values, mode='markers',\n                     text=count.index.values.astype('str'),\n                     marker=dict(color='#DA6C38'))\n\nlayout = go.Layout(\n    title=\"Antivirus product state\", height=600, width=800,\n    xaxis=dict(title='Percentage of positive label'),\n    yaxis=dict(title='Number of samples in train'),\n)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","14575f18":"train.HasTpm.value_counts(dropna=False) \/ len(train) * 100","04657420":"train.Firewall.value_counts(dropna=False) \/ len(train) * 100","111e033c":"scatter_train('CountryIdentifier', 'Countries in train set', color=None)","3b25e022":"scatter_train('CityIdentifier', 'Cities in train set', color='#DA6C38')","5f8233f7":"target_test_barplot('Platform', 'OS Platform')","ee9b7703":"target_test_barplot('Processor', 'processor')","4c641fc3":"target_test_barplot('OsBuild', 'OS Build', 8, percentage=True)","54b8485f":"target_test_barplot('SmartScreen', 'Windows Smart Screen', percentage=True)","5248ca4c":"target_test_barplot('Census_ChassisTypeName', 'Chassis Type - top 5', 5, percentage=True)","b5d42335":"target_test_barplot('Census_ChassisTypeName', 'Number of Cores - top 5', 5, percentage=True)","1d0d02a3":"def distplot(col, label):\n    plt.figure(figsize=(8,4))\n    ax = sns.kdeplot(train[col].dropna(), label=label)\n    ax = sns.kdeplot(train[train.HasDetections == 1][col].dropna(),\n                     label=label + '; target=1')\n\ndistplot('Census_TotalPhysicalRAM', 'Physical RAM')","bedc5121":"plt.figure(figsize=(8,4))\nlimit = 18000\nax = sns.kdeplot(train[train.Census_TotalPhysicalRAM < limit].Census_TotalPhysicalRAM.dropna(),\n                 label='Physical RAM')\nax = sns.kdeplot(train[(train.HasDetections == 1) & \n                       (train.Census_TotalPhysicalRAM < limit)].Census_TotalPhysicalRAM.dropna(),\n                 label='Physical RAM; target=1')","6bba62d2":"distplot('Census_PrimaryDiskTotalCapacity', 'Disk capacity')","1e73044c":"distplot('Census_SystemVolumeTotalCapacity', 'System volume capacity')","548e78b2":"# Sample rows from train data\ntrain = train.sample(n=5000000, random_state=2018)\n\ntarget = train['HasDetections']  # Save the target\ndel train['HasDetections'], test; gc.collect()\n\n# Drop some features that are not usefull\ndrop_feats = ['Census_ProcessorClass', 'IsBeta', 'HasTpm', 'Platform',\n              'AutoSampleOptIn', 'ProductName', 'MachineIdentifier', 'PuaMode']\ntrain.drop(drop_feats, axis=1, inplace=True)\nprint(\"train shape\", train.shape)","e869f6c2":"def label_encoder(df, categorical_cols, indexer=None):\n    if not indexer:\n        indexer = {}\n        for col in categorical_cols:\n            df[col], indexer[col] = pd.factorize(df[col])\n        return df, indexer\n    else:\n        for col in categorical_columns:\n            df[col] = indexer[col].get_indexer(df[col])\n        return df\n    \ncategorical_columns = [c for c in train.columns if c not in\n                       numeric_features_list and train[c].dtype != 'int8']\ntrain, indexer = label_encoder(train, categorical_columns)","d96f54aa":"def feature_engineering(df):\n    # Memory per CPU core\n    df['ram_per_core'] = df.Census_TotalPhysicalRAM \/ df.Census_ProcessorCoreCount\n    # Memory to disk space ratio\n    df['ram_to_disk_capacity'] = df.Census_TotalPhysicalRAM \/ df.Census_PrimaryDiskTotalCapacity\n    # Space on system partition to total space on disk\n    df['system_volume_to_disk_capacity'] = df.Census_SystemVolumeTotalCapacity \/ df.Census_PrimaryDiskTotalCapacity\n    return df\n\ntrain = feature_engineering(train)\ntrain.head(4)","dd295bb3":"def reduce_memory(df):\n    \"\"\"Reduce memory usage of a dataframe by setting data types. \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    print('Initial df memory usage is {:.2f} MB for {} columns'\n          .format(start_mem, len(df.columns)))\n\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type != object:\n            cmin = df[col].min()\n            cmax = df[col].max()\n            if str(col_type)[:3] == 'int':\n                # Can use unsigned int here too\n                if cmin > np.iinfo(np.int8).min and cmax < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif cmin > np.iinfo(np.int16).min and cmax < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif cmin > np.iinfo(np.int32).min and cmax < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif cmin > np.iinfo(np.int64).min and cmax < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if cmin > np.finfo(np.float16).min and cmax < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif cmin > np.finfo(np.float32).min and cmax < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    memory_reduction = 100 * (start_mem - end_mem) \/ start_mem\n    print('Final memory usage is: {:.2f} MB - decreased by {:.1f}%'.format(end_mem, memory_reduction))\n    return df\n\ntrain = reduce_memory(train)","a66e42ee":"params = {\n    'boosting': 'gbdt',\n    'objective': 'binary',\n    'metric': 'auc',\n    'random_state': 2018,\n    'verbosity': -1,\n    'learning_rate': 0.04,\n    'num_leaves': 68,\n    'max_depth': 7,\n    'colsample_bytree': 0.85,\n    'subsample': 0.85,\n    'min_data_in_leaf': 80,\n    'reg_alpha': 0.1\n}\n\nfeat_names = list(train.columns)\n# Select categorical features with reasonable cardinality; testing with all\ncategorical_features = [f for f in categorical_columns if train[f].nunique() < 999999]\n# Create lightgbm dataset\ntrain_dataset = lgbm.Dataset(train, label=target, feature_name=feat_names,\n                             categorical_feature=categorical_features,\n                             free_raw_data=False)\ndel train, target; gc.collect()\n\n# Perform cross-validation\ncv_auc = lgbm.cv(params, train_dataset, num_boost_round=6000, early_stopping_rounds=20)\ncv_best_round = len(cv_auc['auc-mean'])\nprint(\"CV score:\", cv_auc['auc-mean'][-1],\n      \"std between folds:\", cv_auc['auc-stdv'][-1],\n      \"num rounds\", cv_best_round)","22f989e1":"model = lgbm.train(params, train_dataset, num_boost_round=cv_best_round)\ndel train_dataset; gc.collect()","5411e061":"test = pd.read_csv('..\/input\/test.csv', dtype=dtypes)\ntest_id = test.MachineIdentifier  # Save machine ids for submission\ntest.drop(drop_feats, axis=1, inplace=True)\ntest = label_encoder(test, categorical_columns, indexer)\ntest = feature_engineering(test)\ntest = reduce_memory(test)","76a5d03a":"predictions = np.zeros(len(test))\nchunk_size = 100000\nfor i in range(0, len(test), chunk_size):\n    predictions[i:i + chunk_size] = model.predict(test.iloc[i:i + chunk_size])\ndel test; gc.collect()","767aee8a":"sub_df = pd.DataFrame({\"MachineIdentifier\": test_id.values})\nsub_df[\"HasDetections\"] = predictions\nsub_df.to_csv(\"submit.csv\", index=False)\nsub_df[:5]","e2b1c0c6":"feat_importance = pd.DataFrame()\nfeat_importance[\"feature\"] = feat_names\nfeat_importance[\"gain\"] = model.feature_importance(importance_type='gain')\nfeat_importance.sort_values(by='gain', ascending=True, inplace=True)\n\ntrace = go.Bar(y=feat_importance.feature, x=feat_importance.gain,\n               orientation='h', marker=dict(color='rgb(49,130,189)'))\n\nlayout = go.Layout(\n    title='Feature importance', height=1600, width=800,\n    showlegend=False,\n    xaxis=dict(\n        title='Importance by gain',\n        titlefont=dict(size=14, color='rgb(107, 107, 107)'),\n        domain=[0.25, 1]\n    ),\n)\n\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","6976cd20":"There are only 85,000 machines with more than 16 GB of RAM memory. I removed these items for better visualization:","50c03c57":"<h2>5. Platform and OS<\/h2>\n\nAll machines are running windows with most being windows 10; nothing relevant here.","f9f3c444":"<h3>AvSigVersion<\/h3>\n\nThis is the most important feature in the current kernels using GBM and is described as the current defender state information.\n\n<b>About the chart<\/b>: The next plot has the number of occurrences in y-axis and the percentage of positive labels in x-axis. You can check the category name with the hoover in each point.","4916827d":"<h3>Firewall<\/h3>","2eee364c":"<h3>AV Product State<\/h3>\n\nID for the specific configuration of a user's antivirus software. The configuration number 53447 has almost 6M machines with 55% detection rate, while the others 28.969 configurations have less than half million machines and very different detection ratios. In the next plot I'll remove configuration 53447 for better visualization:","77b6f2b1":"<h3>Engine and App version<\/h3>\n\nIn the next plots the left barplot is the train dataset and the right is the test dataset. The left plot (train data) is divided in positive and negative target. We can see that the most common versions are slightly different for train and test datasets.","b3e6c33b":"<h3>Missing values<\/h3>\n\nThere are some columns with almost all values missing. Another interesting thing is the difference between train and test for the SMode column:","c117019d":"<h3>Machine Type<\/h3>","1e5d2f24":"<h3>Feature importance<\/h3>","0032e2eb":"I'm also removing binary features from the next plot. As we can see, there are unseen categories in the test set and some features have thousands of categories, which means that One-Hot is not a good encoding option. It will be difficult to deal with these columns, especially because we only have an id for most items and not the real name for analysis (i.e. we don't know city name, only the identifier).\n\n<b>Note<\/b>: I'm considering NaN (missing value) as a category","eaa690c3":"<h2>6. Census<\/h2>\n\nStatistics about the hardware","65377377":"Reduce the memory usage:","e06b6cb7":"<h3>IsBeta, IsSxsPassiveMode<\/h3>\n\n* isBeta: binary feature; the name is self explanatory - only 67 machines have a beta defender.\n* IsSxsPassiveMode: Also binary; doesnt have any description yet.\n\nValues are in %","d240b128":"<h3>Disk capacity<\/h3>\n\nPrimary disk capacity in MB.","87d9181e":"<h2>3. Defender and Antivirus<\/h2>\n\n<h3>Product Name<\/h3>\n\nThe first feature in this section is the Microsoft Defender product. Almost 99% of computers are using win8defender and 1% Microsoft Security Essentials. The same happens for the test set.","aa99bf54":"<h2>2. Cardinality and missing values<\/h2>\n\nMost features are categorical in this dataset, so in this section we'll have a look at the number of categories that each features has in the train and test group. \n\nFirst, we need to list all numerical features. Some of these features can also be considered categorical, i.e. number of cores has discrete values 1, 2, 4, 6, 8...","dbde70b1":"The hidden cell above define the data type for each column. Now let's have a look at the data:","a7c5b165":"I was having problems with memory when making predictions, so I'm using batches of 100,000 machines:","68b9d71f":"<h3>System volume capacity<\/h3>\n\nCapacity (in MB) for the volume where the system is installed.","07b14131":"<h2>Work in progress...<\/h2>","a5e1e6ab":"<h3>OS Build<\/h3>\n\nBuild of the current operating system.","cd654678":"<h3>Trusted Platform Module<\/h3>\n\n> Trusted Platform Module (TPM, also known as ISO\/IEC 11889) is an international standard for a secure cryptoprocessor, a dedicated microcontroller designed to secure hardware through integrated cryptographic keys.\n\nIn this case I think this is actually the chip that provides this module for cryptographic keys and security.","794c957b":"<h3>Some basic Feature Engineering<\/h3>\n\nJust trying a few ratios with numerical features:","5219bf67":"<h2>4. Geographic location and Organization<\/h2>","c12500d7":"<h2>Microsoft Malware Prediction<\/h2>\n\n<h2>1. Introduction<\/h2>\n\nThe goal of this competition is to predict a Windows machine\u2019s probability of getting infected by malware, based on different properties of that machine. This is a binary classification problem and submissions are evaluated on the <b>area under the ROC curve<\/b>. For a great explanation about this metric, check [this link](https:\/\/developers.google.com\/machine-learning\/crash-course\/classification\/roc-and-auc).\n\nThis exploration notebook will cover all relevant data and show how to setup a simple model to predict the target at the end.\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/10683\/logos\/thumb76_76.png?t=2018-09-19-16-55-15)","65748904":"<h3>Submission file<\/h3>","c4e1058b":"<h3>Cross-validation<\/h3>\n\nI'm using the .cv function from lightgbm api to perform cross-validation. It's much shorter (in code) than using Sklearn KFold and has the advantage of returning the standard deviation between folds on each round. I'm also using early stopping rounds to avoid overfitting.\n\n<b>Categorical features parameter<\/b>: LightGBM has a partition method to deal with label encoded features, however when the cardinality is too high it's better to just leave the feature as integers (or use more advanced encoding like target encode). Refer to this [page](https:\/\/lightgbm.readthedocs.io\/en\/latest\/Advanced-Topics.html) for more details about this topic.","291ad2ad":"<h3>Train model<\/h3>\n\nThe .cv function doesn't return a booster class (model), so we have to train the model again, but now we have the right number of rounds from cross-validation. ","14a6512a":"<h3>City and Country<\/h3>\n\nThere are 222 countries and 107.366 cities in the train dataset:","d2b33c82":"<h3>CPU Cores and Memory<\/h3>\n\nThese two features can also be treated as categoricals.\n\nMost machines (around 95%)  are using 2, 4 or 8 cores: ","db661fb0":"The next feature, RtpStateBitfield, also doesnt have a description:","42794733":"<h2>7. Baseline for predictions<\/h2>\n\nLet's build a simple [Gradient boosting](http:\/\/blog.kaggle.com\/2017\/01\/23\/a-kaggle-master-explains-gradient-boosting\/) pipeline and see how it does.\n\nSince kernel memory is limited, I'll be using a sample with 5M rows of train data. I'm also deleting the test frame and reading it later.","8b112ec6":"<h3>Target variable<\/h3>\n\nThe data was sampled in a special way so that we have 50% of each label instead of a (probably) imbalanced dataset.","d4b3513b":"<h3>Smart Screen<\/h3>\n\n> Windows SmartScreen is a cloud-based anti-phishing and anti-malware component included in several Microsoft products, including Windows 8 and later, Internet Explorer, Microsoft Edge and Outlook.com. It is designed to help protect users against attacks that utilize social engineering and drive-by downloads to infect a system by scanning URLs accessed by a user against a blacklist of websites containing known threats. With the Windows 10 Creators Update, Microsoft placed the SmartScreen settings into the Windows Defender Security Center. (Wikipedia)","bcd1d6ec":"<h3>Antivirus installed and Enabled<\/h3>\n\nThese two numerical columns doesn't have a description yet, but I think it's the number of installed and enabled AV softwares.\n\n<b>About the chart<\/b>: The red line is the percentage of machines with malware for that number of antivirus. The gray line is the percentage of machines in that category compared to the total train size.\n\nIn the left chart we can see that most machines have one antivirus, but the probability of being infected is smaller as this number increases. In the right plot, 97% of machines have only one product enabled.","2bffc8f4":"We have almost nine millions rows for training and more than 80 features. Each row is a machine that should have a unique identifier, let's see if that's true:","aa5d29fe":"<h3>Load test and make predictions<\/h3>","80358274":"<h3>Label encode<\/h3>\n\nSimplified label encode for categorical features","27d4b833":"<h3>Processor<\/h3>\n\nIt seems that x86 architecture is less susceptible to malwares or maybe the users are more carefull:"}}