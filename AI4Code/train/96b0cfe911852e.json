{"cell_type":{"e01df27a":"code","4e1d35d2":"code","7d535665":"code","8d8210f4":"code","03f18d30":"code","3b99eb62":"code","b9457ccc":"code","e682adaf":"code","c2a6eac9":"code","96a3d9de":"code","4108c571":"code","1db2af39":"code","853822ac":"code","63f41233":"code","1e3c814c":"code","b6c17d13":"code","44bdc555":"code","bc6eef2c":"code","769f07a1":"code","3e8ac4ca":"markdown","230d247e":"markdown","d4794cf1":"markdown","4a64b812":"markdown","352b3a62":"markdown","30542303":"markdown","b20d6350":"markdown","b8da367c":"markdown","f28047dd":"markdown","13c724ec":"markdown","37032c00":"markdown","b2f7728a":"markdown","b316df9e":"markdown","71d2588b":"markdown","6c2f0d4f":"markdown"},"source":{"e01df27a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e1d35d2":"import pandas as pd\ndata=pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndata.head(2)","7d535665":"data.isnull().sum()","8d8210f4":"data=data.fillna('unknown')\ndata.isnull().sum()","03f18d30":"cast_series=data['cast'].str.split(',')\ncast_series[:3]","3b99eb62":"casts=[]\nfor i in cast_series:\n    casts=casts+i\nlen(casts),casts[:10]    ","b9457ccc":"data.columns","e682adaf":"col=data.columns.drop('cast')\ndic=dict()\nfor i in col:\n    dic['{}'.format(i)]=[]\ndic    ","c2a6eac9":"\nfor i,k in zip(cast_series,range(len(cast_series))):\n    for l in col:\n        dic['{}'.format(l)]= dic['{}'.format(l)]+[data[l][k] for j in range(len(i))]    \ndic['cast']=casts \ndf_unique_cast=pd.DataFrame(dic)\ndf_unique_cast.head(2)","96a3d9de":"country_series=data['country'].str.split(',')\ncountry_series[:3]\ncountry=[]\nfor i in country_series:\n    country=country+i\nlen(country),country[:2]    ","4108c571":"col=data.columns.drop('country')\ndic=dict()\nfor i in col:\n    dic['{}'.format(i)]=[]\nfor i,k in zip(country_series,range(len(country_series))):\n    for l in col:\n        dic['{}'.format(l)]= dic['{}'.format(l)]+[data[l][k] for j in range(len(i))]    \ndic['country']=country \ndf_unique_country=pd.DataFrame(dic)\ndf_unique_country.head(2)","1db2af39":"director_series=data['director'].str.split(',')\ndirector=[]\nfor i in director_series:\n    director=director+i \ncol=data.columns.drop('director')\ndic=dict()\nfor i in col:\n    dic['{}'.format(i)]=[]\nfor i,k in zip(director_series,range(len(director_series))):\n    for l in col:\n        dic['{}'.format(l)]= dic['{}'.format(l)]+[data[l][k] for j in range(len(i))]    \ndic['director']=director \ndf_unique_director=pd.DataFrame(dic)\ndf_unique_director.head(2)","853822ac":"genre_series=data['listed_in'].str.split(',')\ngenre=[]\nfor i in genre_series:\n    genre=genre+i \ncol=data.columns.drop('listed_in')\ndic=dict()\nfor i in col:\n    dic['{}'.format(i)]=[]\nfor i,k in zip(genre_series,range(len(genre_series))):\n    for l in col:\n        dic['{}'.format(l)]= dic['{}'.format(l)]+[data[l][k] for j in range(len(i))]    \ndic['genre']=genre \ndf_unique_genre=pd.DataFrame(dic)\ndf_unique_genre.head(2)","63f41233":"y=list(set(df_unique_cast['cast']))\ndf_cast=pd.DataFrame({'cast':y,'No of movies\/Tv shows casted':[casts.count(i) for i in y]})","1e3c814c":"df_cast=df_cast.sort_values('No of movies\/Tv shows casted')","b6c17d13":"#I am ignoring unknow cast cause there is no point when we choose unknown cast as most movies\/tvshow casted\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nx=[i+1 for i in range(10)]\nplt.bar(x,df_cast['No of movies\/Tv shows casted'][-11:-1],color=['r','b','g','y','orange','black','brown','y','r','b'])\nplt.xticks(x,df_cast['cast'][-11:-1],rotation=90)\nplt.xlabel('Cast')\nplt.ylabel('No of movies\/Tv shows casted')\nplt.title('Top 10 Cast')","44bdc555":"y=list(set(df_unique_country['country']))\ndf_country=pd.DataFrame({'country':y,'No of movies\/Tv shows in country':[country.count(i) for i in y]})\ndf_country=df_country.sort_values('No of movies\/Tv shows in country')\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nx=[i+1 for i in range(10)]\nplt.bar(x,df_country['No of movies\/Tv shows in country'][-10:],color=['r','b','g','y','orange','black','brown','y','r','b'])\nplt.xticks(x,df_country['country'][-10:],rotation=90)\nplt.xlabel('Country')\nplt.ylabel('No of movies\/Tv shows in country')\nplt.title('Top 10 Countries')","bc6eef2c":"y=list(set(df_unique_director['director']))\ndf_director=pd.DataFrame({'director':y,'No of movies\/Tv shows directed':[director.count(i) for i in y]})\ndf_director=df_director.sort_values('No of movies\/Tv shows directed')\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nx=[i+1 for i in range(10)]\n#THERE ARE SO MANY UNKOWN DIRECTORS SO I REMOVE UNKNOWN\nplt.bar(x,df_director['No of movies\/Tv shows directed'][-11:-1],color=['r','b','g','y','orange','black','brown','y','r','b'])\nplt.xticks(x,df_director['director'][-11:-1],rotation=90)\nplt.xlabel('Director')\nplt.ylabel('No of movies\/Tv shows Directed')\nplt.title('Top 10 Directors')","769f07a1":"y=list(set(df_unique_genre['genre']))\ndf_genre=pd.DataFrame({'genre':y,'No of movies\/Tv shows in genre':[genre.count(i) for i in y]})\ndf_genre=df_genre.sort_values('No of movies\/Tv shows in genre')\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nx=[i+1 for i in range(10)]\nplt.bar(x,df_genre['No of movies\/Tv shows in genre'][-10:],color=['r','b','g','y','orange','black','brown','y','r','b'])\nplt.xticks(x,df_genre['genre'][-10:],rotation=90)\nplt.xlabel('Genre')\nplt.ylabel('No of movies\/Tv shows in Genre')\nplt.title('Top 10 Genre')","3e8ac4ca":"Summing up all the rows contains list in above 'cast_series'.","230d247e":"# VISUALIZATIONS OF INSIGHTS","d4794cf1":"# AS SAME AS CASTS FOR COUNTRY","4a64b812":"Dropping the cast column in column names and creating the empty dictionary with the column keys inside them","352b3a62":"So INTERNATIONAL MOVIES is the most released Genre in Netflix","30542303":"# FOR THE DIRECTORS","b20d6350":"Splitting the unique casts in each and every rows of the cast column in the data","b8da367c":"# THAKS FOR VIEWING","f28047dd":"Creating the duplicates data for the each and every caste in non unique 'casts_series' casts. ","13c724ec":"So we conclude that Jan Suter Direvted the most Tvshows\/Movies","37032c00":"# IMPORTING THE DATA","b2f7728a":"# DATA PREPROCESSING","b316df9e":"So we coclude that most of the tv shows and movies released in UNITED STATES","71d2588b":"# FOR THE GENRE","6c2f0d4f":"So we conclude that Anupam kher casted the most no of movies or tv shows "}}