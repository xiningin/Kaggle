{"cell_type":{"83ec83c4":"code","fc920783":"code","c06fa08c":"code","a4e906ae":"code","a278d880":"code","75abb11c":"code","cb68ed12":"code","281f6736":"code","5f5bf82b":"code","d929f240":"code","2c829103":"code","b31cb792":"code","bcb4fcc7":"code","3cb926c6":"code","d64353ab":"code","50574be7":"code","49781390":"code","d04d58f7":"code","f3fe42db":"code","7bf792f0":"code","0b7128a1":"code","003f50dd":"code","8283c457":"code","b5b1c86e":"code","5461fe05":"code","d766c0f6":"code","8fceaa3e":"code","21f02e7e":"code","180ff6f5":"code","fe3f00ea":"code","588fefbb":"code","b4bc701c":"markdown","75edad20":"markdown","1d47444c":"markdown"},"source":{"83ec83c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc920783":"import numpy as np\n\nimport pandas as pd\n\n# Reading ratings file\nratings = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\n\n# Reading users file\ntag = pd.read_csv('..\/input\/movielens-20m-dataset\/tag.csv')\n\n# Reading movies file\nmovies = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')","c06fa08c":"ratings.head()","a4e906ae":"tag.head()","a278d880":"movies.head()","75abb11c":"movies['genres']=movies['genres'].str.replace('|',' ')","cb68ed12":"movies.head()","281f6736":"ratings.movieId.nunique()","5f5bf82b":"movies.movieId.nunique()","d929f240":"tag.movieId.nunique()","2c829103":"ratings.userId.nunique()","b31cb792":"movies.title.nunique()","bcb4fcc7":"#Importing movie title and joining with main data\nmy_df = pd.merge(ratings, movies, on='movieId')\nmy_df.head()","3cb926c6":"# Keep only the columns title, userId and rating\nmy_df = my_df[['title','userId','rating']]","d64353ab":"# Group the titles by number of ratings to see which movies where rated the most\ncount_rating = my_df.groupby(\"title\")['rating'].count().sort_values(ascending=False)\ncount_rating.head(10)","50574be7":"# Select the movies with at least 1500 ratings\nthreshold_v = 1500\nmore_than_1500_ratings = count_rating[count_rating.apply(lambda x: x >= threshold_v)].index\n\n# Keep only the movies with at least 1500 ratings in the DataFrame\nmy_df_n = my_df[my_df['title'].apply(lambda x: x in more_than_1500_ratings)]","49781390":"size_before = len(my_df.title.unique())\nsize_after = len(my_df_n.title.unique())\nrows_before = my_df.shape[0]\nrows_after = my_df_n.shape[0]\nprint(f'''There are {size_before} movies in the dataset before filtering and {size_after} movies after the filtering.\n\n{size_before} movies => {size_after} movies\n{rows_before} rows before filtering => {rows_after} rows after filtering''')","d04d58f7":"#creating mean ratings data\nratings_new = pd.DataFrame(my_df_n.groupby('title')['rating'].mean())\nratings_new.head()","f3fe42db":"#creating number of ratings data by counting rating by grouping particular title\nratings_new['no_of_ratings'] = my_df_n.groupby('title')['rating'].count()\nratings_new.head()","7bf792f0":"ratings_new['no_of_ratings'].max()","0b7128a1":"#Plotting the jointplot\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.jointplot(x='rating', y='no_of_ratings', data=ratings_new)","003f50dd":"#creating the user-item interaction matrix(uiim) or say movie_matrix_ using pivot table\nuiim =pd.pivot_table(my_df_n,index='userId', columns='title', values='rating')\nuiim.head()\n","8283c457":"#Most rated movies\nratings_new.sort_values('no_of_ratings', ascending=False).head(10)","b5b1c86e":"#Fetching ratings for Jurassic Park (1993)\nJurassic_Park_user_rating = uiim['Jurassic Park (1993)']","5461fe05":"#Finding the correlation with different movies\nsimilar_to_Jurassic_Park=uiim.corrwith(Jurassic_Park_user_rating)","d766c0f6":"#getting into the result\nsimilar_to_Jurassic_Park.head()","8fceaa3e":"#creating dataframe to bring in #of ratings\ncorr_jurasssic = pd.DataFrame(similar_to_Jurassic_Park, columns=['Correlation'])\ncorr_jurasssic.dropna(inplace=True)\ncorr_jurasssic.head()","21f02e7e":"#Bringining in ratings\ncorr_jurasssic = corr_jurasssic.join(ratings_new['no_of_ratings'])\n\ncorr_jurasssic.head()","180ff6f5":"corr_jurasssic[corr_jurasssic['no_of_ratings'] > 3330].sort_values(by='Correlation', ascending=False).head(10)","fe3f00ea":"def find_corr(df_movies, movie_name):\n    '''\n    Getting the correlation of one movie with the others\n    \n    Args\n        df_movies (DataFrame):  with user_id as rows and movie titles as column and ratings as values\n         movie_name (str): Name of the movie which you want to predict the similar movies\n    \n    Return\n        DataFrame with the correlation of the movie with all others\n    '''\n    \n    similar_to_movie = df_movies.corrwith(uiim[movie_name])\n    similar_to_movie = pd.DataFrame(similar_to_movie,columns=['Correlation'])\n    similar_to_movie = similar_to_movie.sort_values(by = 'Correlation', ascending = False)\n    return similar_to_movie\n","588fefbb":"# Let's try with the first movie\nmovie_name = 'Jurassic Park (1993)'\nfind_corr(uiim, movie_name).head(10)","b4bc701c":"tag.userId.nunique()","75edad20":"# **User & Item interaction Matrix**","1d47444c":"**Try With Just Creating the Function**"}}