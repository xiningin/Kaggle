{"cell_type":{"2c28b27d":"code","001ded5e":"code","23135b7a":"code","3e9e6a8a":"code","e4bf53d4":"code","a7193484":"code","c2d67a3a":"code","dfc2dc04":"code","456d64b2":"code","2eb0f354":"code","23857788":"code","97a39f1c":"code","1784a050":"code","9a6851bb":"markdown","3c41f62e":"markdown","d845a6ff":"markdown","a5550e75":"markdown","fd525006":"markdown","15b1da5a":"markdown","83641826":"markdown","83963f73":"markdown","5930d2a9":"markdown","00f43ef5":"markdown","78a109f4":"markdown","345d801b":"markdown","50893482":"markdown","6adf8066":"markdown","091714c6":"markdown","78eb4419":"markdown","bb2eeeef":"markdown","7e692d7b":"markdown","ccb4af04":"markdown","06ecc517":"markdown","1334a615":"markdown"},"source":{"2c28b27d":"import pandas   as pd             # dataframe\nimport seaborn  as sns            # plots\nimport matplotlib.pyplot as plt   # plots\n\ntry:\n    import yfinance as yf    # import  Yahoo! Finance\nexcept:\n    !pip install yfinance    # install Yahoo! Finance\n    import yfinance as yf    # import  Yahoo! Finance","001ded5e":"#  Securities to download\nsymbols     = [\"amzn\", \"gme\", \"BTC-USD\", \"VWUSX\", \"Amc\", \"qqq\"]\n\n#  time period and interval\nyf_period   = \"20y\"   # 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max\nyf_interval = \"1d\"    # 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo","23135b7a":"# always add S&P500\nif '^GSPC' not in symbols:  \n    symbols.append('^GSPC')\n\n#  uppercase and sort\nsymbols = [x.upper() for x in symbols]\nsymbols.sort()\nprint('stocks:\\t\\t{}\\nperiod:\\t\\t{}\\ninterval:\\t{}'.format(symbols,yf_period,yf_interval))","3e9e6a8a":"#  set parameters to download\nstock_parameters = [\"shortName\", \"sector\", \"industry\", \"quoteType\", \"exchange\", \"totalAssets\", \"marketCap\", \"beta\", \"trailingPE\", \"volume\", \"averageVolume\", \"fiftyTwoWeekLow\", \"fiftyTwoWeekHigh\", \"dividendRate\", \"phone\"]\n\n#  create dataframe\nyf_info = pd.DataFrame(index = stock_parameters, columns = symbols)\n\nfor i in symbols:\n    l = []             # initialize\n    x = yf.Ticker(i)   # get ticker info\n    for j in stock_parameters:\n        if 'date' in j.lower():\n            d = pd.to_datetime(x.info[j])\n            if d is not None:\n                l.append(d.strftime(\"%Y-%m-%d\"))  # format date\n        else:\n            try:      # some parameters error\n                l.append(x.info[j])\n            except:   # ignore error and continue\n                l.append(\"\")\n    yf_info[i] = l\n    print('{}\\t- financial information downloaded'.format(i))\n\n\nyf_info","e4bf53d4":"amzn = yf.Ticker('AMZN').info\npram = pd.DataFrame(amzn).transpose()\npram = pram.reset_index() \npram.rename(columns={'index':'PARAMETERS'}, inplace=True)\npram.sort_values(by=['PARAMETERS'],inplace=True)\npram.reset_index(drop=True, inplace=True)\n\npram.head(7)  # remove \".head\" to see the full list","a7193484":"#  1.  Create dataframe **yf_price** with **yf.download**\nyf_price = yf.download(\n        tickers = symbols,       # tickers list or string as well\n        period = yf_period,      # optional, default is '1mo'\n        interval = yf_interval,  # fetch data by interval\n        group_by = 'ticker',     # group by ticker\n        auto_adjust = True,      # adjust all OHLC (open-high-low-close)\n        prepost = True,          # download market hours data\n        threads = True,          # threads for mass downloading\n        proxy = None)            # proxy\n\n#  2.  Select 'Close' (price at market close) column only\nyf_price = yf_price.iloc[:, yf_price.columns.get_level_values(1) == 'Close']\nyf_price = round(yf_price[symbols],2)   # change order of columns\n\n#  3.  Remove the dataframe multi-index\nyf_price.columns = yf_price.columns.droplevel(1)   \n\n\nyf_price.tail(10)","c2d67a3a":"print('shape: ', yf_price.shape)","dfc2dc04":"#  calculate percentage changes with \"pct_change()\"\n#  multiply by 100 to get percentage value\n#  round off the percentages to 2 decimal points\nyf_percent = round(yf_price[symbols].pct_change() * 100, 2)\n\nyf_percent.tail(10)","456d64b2":"yf_percent['Year'] = pd.to_datetime(yf_percent.index).strftime(\"%Y\")\nyf_percent['YR-MTH'] = pd.to_datetime(yf_percent.index).strftime(\"%Y-%m\")\n\nyf_percent.tail(3)","2eb0f354":"#  performance for last \"perf_y\" years\nperf_y = 10\n\n# create dataframe\nperf_yrs = pd.DataFrame()   \nperf_yrs['Year'] = yf_percent['Year'].sort_values().unique()\n\n\n#  calculate returns\nfor x in symbols:\n    perf_yrs[x] = yf_percent[x].groupby(yf_percent['Year']).sum().values\n    perf_yrs[x] = round(perf_yrs[x],2)\n\n\n#  update dataframe to last \"perf_y\" years\nperf_yrs = perf_yrs.tail(perf_y)\n\n#  total returns per year rows\nperf_yrs.loc['total'] = perf_yrs.sum(numeric_only = True, axis = 0)\nperf_yrs.loc['total', 'Year'] = ''\n\n# col_name with max row_values\n# \"maxSYM\"  - symbol of best performing stock for time period\n# \"max\"     - return of best performing stock for time period\nperf_yrs['maxSYM'] = perf_yrs[symbols].idxmax(axis=1)\nperf_yrs['max']   = perf_yrs[symbols].max(axis=1)\n\n\nperf_yrs","23857788":"#  performance for last \"perf_m\" months\nperf_m = 24\n\n# create dataframe\nperf_mth = pd.DataFrame()   \nperf_mth['YR-MTH'] = yf_percent['YR-MTH'].sort_values().unique()\n\n\n#  calculate returns\nfor x in symbols:\n    perf_mth[x] = yf_percent[x].groupby(yf_percent['YR-MTH']).sum().values\n    perf_mth[x] = round(perf_mth[x],2)\n\n\n#  update dataframe to last \"perf_m\" years\nperf_mth = perf_mth.tail(perf_m)\n\n#  total returns per year rows\nperf_mth.loc['total'] = perf_mth.sum(numeric_only = True, axis = 0)\nperf_mth.loc['total', 'YR-MTH'] = ''\n\n\n# col_name with max row_values\nperf_mth['maxSYM'] = perf_mth[symbols].idxmax(axis=1)\nperf_mth['max']   = perf_mth[symbols].max(axis=1)\n\n\n#  performance for last 24 months (2 years)\nperf_m = 24\nperf_mth.tail(perf_m)","97a39f1c":"#    - head(-1)    - all rows except last\ndf_plot = perf_mth[symbols].head(-1).tail(perf_m)\ndf_plot['YR-MTH'] = perf_mth['YR-MTH'].head(-1).tail(perf_m)\n\n\n#  set up the subplot\nc = 2                         # columns for subplot\nr = int((len(symbols)+1)\/c)   # rows for subplot\ns = 1                         # initialize subplot counter\nfig_y = (c+r)*3               # multiple may need to be modified\n\n#  figure size\nplt.figure(figsize=(10, fig_y))\n\n#  subplot loop\nfor i in symbols:\n    if i != '^GSPC':\n        plt.subplot(r,c,s)\n        sns.lineplot(x = df_plot['YR-MTH'], y = df_plot[i])\n        sns.lineplot(x = df_plot['YR-MTH'], y = df_plot['^GSPC'], color='gray',ls='--')\n        plt.legend([i,'S&P500'],loc=2)  # top left\n        plt.title('{} vs S&P500 ({} months)'.format(i,perf_m), fontsize=14)\n        plt.xlabel('')\n        plt.ylabel('percent change')\n        plt.xticks(rotation=90)\n        s = s + 1  # increment subplot counter\n\nplt.tight_layout()\nplt.show()","1784a050":"yf_div = pd.DataFrame()   # initialize dataframe\n\nfor i in symbols:\n    if i != '^GSPC':\n        x = pd.DataFrame(yf.Ticker(i).dividends)\n        x.index = x.index.year\n        x = x.rename(columns={\"Dividends\":i})\n        x = round(x.groupby(x.index).sum(),2)\n        yf_div = pd.concat([yf_div,x], axis=1)\n        print('{}\\t- dividends'.format(i))\n        \nyf_div.tail(10)  # show last 10 years","9a6851bb":"### Analysis - Monthly:\n*  **AMC** performance has been very volatile for the past 2 years\n*  **AMZN** has consistently out-performed the S&P500 and has great returns for the last two years\n*  **BTC-USD** is volatile but has been going up considerable for the past 6 months\n*  **GME** has greatly benefited from the reddit-short squeeze in January\n*  **QQQ** has consistently out-performed the S&P500\n*  **VWUSX** has consistently out-performed the S&P500","3c41f62e":"[go to top of document](#top)     \n\n---\n\n# END\n\nPlease upvote if you found this useful :-)","d845a6ff":"<a id=\"top\"><\/a>  \n#  Stock Performance with Yahoo! Finance (yfinance)\n\nYahoo! Finance https:\/\/finance.yahoo.com\/ is an excellent website that provides financial news, stock quotes, press releases and financial reports.  \n\n<font color='darkred'>**This notebook is only a helpful investment tool and is NOT financial advice :-)**<\/font>\n\n---\nYahoo! Finance library **yfinance** will be used to download securities' financial information, prices and dividends.  The data will be used to compare annual and monthly performances of stocks against the S&P500, and with each other.\n\n- any valid **financial symbol** (market indexes, stocks, bonds, funds, etc.) can be used\n- **Stocks** and **Financial Instruments** can loosely be referred to as Security, Stock, Fund, ETF, Symbol, Ticker, etc.\n- stock performance is always be compared with the **S&P500**, the market benchmark\n\n\n---\n\n### Table of Content\n1. [Select Securities and Time Intervals](#symbols)<br>\n2. [Financial Information](#yf_ticker)<br>\n3. [Historical Prices](#yf_download)<br>\n4. [Percentage Change](#percent)<br>\n5. [Performance Analysis - Returns](#perf)<br>\n    5.1 [Performance - Yearly Returns](#perf_yrs)<br>\n    5.2 [Performance - Monthly Returns](#perf_mth)<br>\n    5.3 [Plot Monthly Returns](#perf_plt)<br>\n6. [Dividends](#dividends)<br>\n7. [Markets and Investment Overview](#stock_markets)<br>\n\n\n---\n\n**Please upvote if you found this useful** :-)","a5550e75":"---\n<a id=\"symbols\"><\/a>\n## 1.  Select Securities and Time Period\n<font color='darkgreen'>**NOTE: This is the only section where paramerters are set.**<\/font>\n<br>\n\nOnly need to set the following parameters:\n-  **symbols**$\\;\\;\\;\\;\\;$stocks to analyze\n-  **yf_period**$\\;\\;\\;$span of time to investigate\n-  **yf_interval** $\\;$increments within the yf_period","fd525006":"[go to top of section](#perf)\n\n---\n<a id=\"perf_mth\"><\/a>\n###  5.2  Performance - Monthly Returns\nLook at the monthly performance for the last 24 months.","15b1da5a":"[go to top](#top)\n\n---\n<a id=\"yf_ticker\"><\/a>\n## 2.  Financial Information\nThe **yf.Ticker** method gives general information about the symbol, such as name, sector, EPS, PE, market capitalization, etc.  See below for [full list](#parameters) of parameters.\n\nSteps:\n1.  Select the information parameters to download\n2.  Download symbol information using **yf.Ticker**\n3.  Create the dataframe, **yf_info**","83641826":"---\n<a id=\"parameters\"><\/a>\n###  Yahoo! Finance Financial Information Parameter List\n**yf.Ticker(symbol).info**  will give a full list of the parameters.","83963f73":"---\n###  Install Yahoo! Finance & Import Libraries","5930d2a9":"[go to top](#top)\n\n---\n<a id=\"yf_download\"><\/a>\n## 3.  Historical Prices\n**yf.download** is used to get the historical prices of securities for a certain time period (**yf_period**) with specified intervals (**yf_interval**).\n\n**Steps:**\n1.  Create dataframe **yf_price** with **yf.download**\n2.  Select 'Close' column only (price at market close) \n3.  Remove the dataframe multi-index","00f43ef5":"[go to top](#top)\n\n---\n<a id=\"stock_markets\"><\/a>\n#  7.  Markets and Investment Overview\n* All trading occurs in **financial markets** and the performances of the various components of the financial markets are measured by **market indexes**.  \n* **Financial** and **Investment Instruments** are traded in the financial markets and overall performances is tracked on the market indexes.\n\n\n<a id=\"fin_markets\"><\/a>\n##  7.1  Financial Markets\nFollowing are some of the major stock markets and their market capitalizations:\n\n|  STOCK EXCHANGE  |  SYMBOL  |  CITY  |  MARKET CAP 2019 (\\$B) | \n| :--- | :---: | :--- | ---: |\n| New York Stock Exchange | NYSE | New York City | 22,923 |\n| Nasdaq | NASDAQ | New York City | 10,857 |\n| Japan Exchange Group | JPX | Tokyo | 5,679 |\n| Shanghai Stock Exchange | SSE | Shanghai | 4,026 |\n| Hong Kong Stock Exchange | SEHK | Hong Kong | 3,936 |\n| London Stock Exchange | LSE | London | 3,767 |\n| Shenzhen Stock Exchange | SZSE | Shenzhen | 2,504 |\n| TMX Group | TSX | Toronto | 2,095 |\n| Bombay Stock Exchange | BSE | Mumbai | 2,056 |\n| Australian Securities Exchange | ASX | Sydney | 1,328 |\n| Ho Chi Minh Stock Exchange | HSX | Ho Chi Minh | 128 |\n| Pakistan Stock Exchange | PSX | Karachi | 54  |\n\n\n<a id=\"market_index\"><\/a>\n##  7.2  Market Indexes\nFollowing are the major market indexes:\n\n|  MARKET INDEX  |  SYMBOL |Description | \n| :--- | :--- | :--- | \n| **Dow Jones Industrial Average** | DJIA| or Dow, is an index that tracks the 30 largest, publicly owned companies trading on the New York Stock Exchange** | NYSE) and the NASDAQ. |\n|**Nasdaq Composite** | IXIC| or Nasdaq, is an index of more than 3,000 stocks listed on the Nasdaq exchange. |\n|**Standard & Poor's 500 Index** | GSPC| or S&P 500, is an index of the 500 largest U.S. publicly traded companies. The index is widely regarded as the best gauge of large-cap U.S. equities. S&P500 is the **market benchmark**. |\n|**CBOE Volatility Index10** | VIX | is a real-time market index that represents the market's expectation of 30-day forward-looking volatility and is derived from the price inputs of the S&P500 index options. It is also known by \"Fear Gauge\" or \"Fear Index.\" |\n|**Financial Times Stock Exchange 100 Share Index** | FTSE |or *Footsie*, is the dominant index, containing 100 of the top blue chips on the London Stock Exchange. |\n|**Nikkei Index** | N225 | is composed of Japan's top 225 blue-chip companies traded on the Tokyo Stock Exchange. |\n|**Hang Seng Index** | HSI | is an index of the largest companies that trade on the Hong Kong Exchange. |\n|**Sensex** | BSESB | also known as the S&P BSE Sensex index, is the benchmark index comprising of 30 of the largest and most actively-traded stocks on the Bombay Stock Exchange. |\n|**Karachi Stock Exchange** | KSE-100 | consists of 100 companies representing about 90 percent of market capitalization of the Pakistan Stock Exchange. |\n\n\n<a id=\"fin_inst\"><\/a>\n##  7.3  Financial Instruments\nFinancial instruments can also be referred to as **securities**, and typically comprise of:\n\n|  SECURITY |Description | \n| :--- | :--- |\n| **Stocks** | an ownership position in a publicly-traded corporation |\n| **Bonds** | a creditor relationship with a governmental body or a corporation |\n| **Derivative (Options)** | or rights to ownership \u2013 also called underlying financial instrument |\n\n\n<a id=\"inv_inst\"><\/a>\n##  7.4  Investment Instruments\nInvestment vehicles are very popular and are securities packaged in **portfolios** to maximize gains and minimize risks.\n\n|  INSTRUMENT |Description |  |\n| :--- | :--- | |\n| **Mutual Funds** | A mutual fund is a company that pools money from many investors and invests in securities such as stocks, bonds, and short-term debt (bonds). The combined holdings of the mutual fund are known as its *portfolio*. |\n| **Exchange-Traded Funds (ETF)** |are in many ways similar to mutual funds, however, they are listed on exchanges and ETF shares trade throughout the day just like ordinary stock. |\n| **Index and Sector Funds** |is similar to an ETF, except the index fund portfolio consists of securities listed on a particular market index (such as Nasdaq or S&P500). |\n| **Hedge Funds** |have very aggressive portfolios and are very high-risk. Hedge-funds are tailored to high-end investor. |\n| **Real Estate Investment Trusts (REITs)** |allow individuals to invest in large-scale, income-producing real estate. |\n| **Certificate of Deposit (CD)** |is a savings account that holds a fixed amount of money for a fixed period of time, and are considered to be one of the safest savings option. |","78a109f4":"---\n\n### DataFrames Created in this Notebook\n\n|  DataFrame | Description | library | method | download time |\n| :--- | :--- | :--- | :--- | :---: |\n| **yf_info** | financial information  | **yfinance** | `yf.Ticker.info()`| < 2 min. |\n| **yf_price** | historical prices  | **yfinance** | `yf.download()` | < 1 min. |\n| **yf_percent** | percentage change | **pandas** | `.pct_change()` | seconds |\n| **perf_yrs** | annual performance | **pandas** | `.groupby(YRS)` | seconds |\n| **perf_mth** | monthly performance | **pandas** | `.groupby(MTH)` | seconds |\n| **yf_div** | dividend payouts  | **yfinance** | `yf.Ticker.dividends()` | < 1 min. |","345d801b":"[go to top of section](#perf)\n\n---\n<a id=\"perf_yrs\"><\/a>\n###  5.1 Performance - Yearly Returns\nCreate **perf_yrs** to analyze yearly performances for the last 10 years.","50893482":"[go to top](#top) \n\n---\n<a id=\"dividends\"><\/a>\n##  6. Dividends\nDividends is a sum of money paid regularly by a company to its shareholders out of its profits.  Not all companies pay out dividends.","6adf8066":"### Analysis: \nStocks that loosely follow and out-perform the S&P500 are generally good long-term investments (in our case, AMZN, QQQ and VWUSX)","091714c6":"[go to top](#top)     \n\n---\n<a id=\"perf\"><\/a>\n## 5.  Performance Analysis - Returns\nThe stock prices have been downloaded and the percent changes have been caluculated.  Now we can look at the yearly and monthly performances.\n\n5.1 [Performance - Yearly Returns](#perf_yrs)<br>\n5.2 [Performance - Monthly Returns](#perf_mth)<br>\n5.3 [Plot Monthly Returns](#perf_plt)<br>\n\n---","78eb4419":"[go to top of section](#perf)\n\n---\n<a id=\"perf_plt\"><\/a>\n###  5.3  Plot Monthly Returns\nPlot the monthly percent changes for each stock against the S&P500.","bb2eeeef":"Putting the above table into words :-)\n\n**CRYPTOCURRENCY**\n*  Bitcoin USD (**BTC-USD**) is a **cryptocurrency** with a **market capitalization** of \\\\$ 940,633,751,552.  The stock has been trading for the past year with an **average daily volume** of 63,966,705,090 shares, with **share prices** ranging between \\\\$4106.98 and \\\\$58,330.60.  Bitcoin is traded 24-hours a day, 7-days a week.\n\n**EQUITY**\n*  AMC Entertainment Holdings, Inc (**AMC**) is an **equity** in the **communications services** sector and **entertainment** industry with a **market capitalization** of \\\\$2,729,537,536.  The stock has been trading for the past year with an **average daily volume** of 152,194,628 shares, with **share prices** ranging between \\\\$1.91 and \\\\$20.36.\n<br>\n\n*  Amazon.com, Inc. (**AMZN**) is an **equity** in the **consumer cyclical** sector and **internet retail** industry with a **market capitalization** of \\\\$1,510,926,581,760.  The stock has been trading for the past year with an **average daily volume** of 3,751,355 shares, with **share prices** ranging between \\\\$1626.03 and \\\\$3552.25.\n<br>\n\n*  GameStop Corporation (**GME**) is an **equity** in the **consumer cyclical** sector and **specialty retail** industry with a **market capitalization** of \\\\$9,606,951,936.  The stock has been trading for the past year with an **average daily volume** of 41,039,958 shares, with **share prices** ranging between \\\\$2.57 and \\\\$483.\n\n**EXCHANGE-TRADED FUND (ETF)**\n*  Invesco QQQ Trust, Series 1 (**QQQ**) is an **ETF** with \\\\$150,566,158,336 in assets.  The fund has been trading for the past year with **share prices** ranging between \\\\$164.93 and \\\\$338.19.\n\n\n**INDEX**\n*  S&P500 (**^GSPC**) is a **market index** with an **average daily volume** of 5,091,717,000 shares.  For the past year, the S&P500 index has ranged between 2,191.86 and 3,950.43.\n\n\n**MUTUAL FUND**\n*  Vanguard U.S. Growth Fund (**VWUSX**) is a **mutual fund** with \\\\$46,741,909,504 in assets.  The fund has been trading for the past year with **share prices** ranging between \\\\$33.42 and \\\\$72.43.","7e692d7b":"### Analysis - Yearly:\n*  **AMC** stocks has been doing poorly for several years.  GameStop reddit-short squeeze this has greatly benefited AMC\n*  **AMZN** has the best overall returns, consistently out-performing the S&P500 and is a great long-term investment\n*  **BTC-USD** had the best returns overall, however, there is a lot of volatility in BitCoin:  +314% in 2017 and -99% in 2018 \n*  **GME** has been in the news a lot.  Performance for this year and last has been incredible because of the reddit-short squeeze.  Future is very uncertain.\n*  **QQQ** consistently out-performed the S&P500\n*  **VWUSX** consistently out-performed the S&P500","ccb4af04":"[go to top](#top)\n\n---\n<a id=\"percent\"><\/a>\n## 4.  Percentage Change\nPercent change in prices is much more meaningful than the dollar value.  Using **.pct_change** to create dataframe **yf_percent** from **yf_price**.","06ecc517":"**Create Year, Month and YR-MTH columns**<br>\nCreate date columns in order to use pandas **groupby** function in the analysis.","1334a615":"###  Dividend Analysis:\n-  not all companies have dividend payouts\n-  dividend payouts are typically less than 5%\n-  AMC, GME and VWUSX have some dividend payouts\n-  mutual funds contain several large companies and usually have dividend payouts"}}