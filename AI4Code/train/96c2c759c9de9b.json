{"cell_type":{"11499de4":"code","d442a36d":"code","5064a196":"code","ae7bdbcf":"code","5d45a46a":"code","922294fe":"code","49ed0461":"code","784e7cc2":"code","56ff1171":"code","149d3173":"code","9b248c0e":"code","b29be7a8":"code","7a685879":"code","4878bb05":"code","427adc26":"code","054bf2d6":"code","d4b8fdf2":"code","97af0f13":"code","1200724d":"code","8c73d6fa":"code","444cd276":"code","39430459":"code","2d66b12e":"code","8f35c84a":"code","31344a73":"code","d126fa5b":"code","d4a747c1":"code","c7251558":"code","16546991":"code","a839b42c":"code","d3779f84":"code","19aee57c":"code","ec4d4f09":"code","281ab518":"code","e99cfac4":"code","169e05ee":"code","ba45a7d8":"code","7bad9345":"code","29a83b32":"markdown","f9950008":"markdown","bfc3d636":"markdown","fb11f93a":"markdown","b71e6558":"markdown","4bbaa87e":"markdown","981e86cf":"markdown","ad05a291":"markdown","33e3abcc":"markdown","e68375ef":"markdown","4e7c2f08":"markdown","270690ce":"markdown","51002f05":"markdown","869d7a1e":"markdown","efb0a251":"markdown","4105db06":"markdown","5b957856":"markdown","8b9db4bd":"markdown","91f09824":"markdown","57d9a52a":"markdown","bd583bf7":"markdown","57507f61":"markdown","2e3b5951":"markdown","c678cda8":"markdown","d5f050ae":"markdown","084a3f47":"markdown","dd7159c2":"markdown","048e6738":"markdown","f3a5f096":"markdown","f59064ce":"markdown","c468c14f":"markdown","a2e869f5":"markdown","6dd4c030":"markdown","2d23a6a7":"markdown","3666a4fb":"markdown","d65b8d5f":"markdown"},"source":{"11499de4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#import plotly.plotly as py\n\n#from plotly.offline import init_notebook_mode iplot\n#init_notebook_mode(connected=True)\nfrom wordcloud import WordCloud\n\n#plotly\n#import plotly.graph_objs as go\n#from plotly.offline import init_notebook_mode, plot\n#init_notebook_mode(connected=True)\n# import figure factory\n#import plotly.figure_factory as ff\n\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#needed for plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\nimport plotly as py\n\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)","d442a36d":"\ndata = pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")\ndata.head()","5064a196":"data.columns","ae7bdbcf":"data.describe()\n","5d45a46a":"data.info()#there are nan values in publisher and year","922294fe":"#publisher vs jp_sales    \ndata[[\"Publisher\",\"JP_Sales\"]].groupby([\"Publisher\"], as_index=False).mean().sort_values(by=\"JP_Sales\",ascending=False)","49ed0461":"data[[\"Publisher\",\"Global_Sales\",\"JP_Sales\"]].groupby([\"Publisher\"], as_index=False).mean().sort_values(by=[\"Global_Sales\",\"JP_Sales\"],ascending=False)","784e7cc2":"#comparing sale-publisher\ndata[[\"Publisher\",\"EU_Sales\",\"JP_Sales\"]].groupby([\"Publisher\"], as_index=False).mean().sort_values(by=[\"EU_Sales\",\"JP_Sales\"],ascending=False)\n","56ff1171":"#platform vs sales    \ndata[[\"Platform\",\"Global_Sales\"]].groupby([\"Platform\"], as_index=False).mean().sort_values(by=\"Global_Sales\",ascending=False)  ","149d3173":"data.isnull().sum()\n","9b248c0e":"#to show missing values on graph\nimport missingno as msno\nmsno.matrix(data)\nplt.xlabel(\"Variables\")\nplt.ylabel(\"Missing Values\")\nplt.figure(figsize=(15,9))\nplt.show()\n","b29be7a8":"# missingno bar plot\nmsno.bar(data)\nplt.ylabel(\"non-missing values\")\nplt.xlabel(\"Variables\")\nplt.show()","7a685879":"#Let's fill the nan years\n#according to graph, main sales are applyied between 1995-2017\n#according to graph, detected values between 1995-2017 gives us average year-frequency \naverage_year = (data[\"Year\"]>1995.0)\naverage_year2 = data[\"Year\"]<2017.0\ndata[average_year & average_year2].Year.mean() #average 2007\nplt.figure(figsize=(15,10))\nsns.countplot(data.Year)\nplt.xlabel(\"Years\"),plt.ylabel(\"Frequency(Quantity of Each Year)\"),plt.title(\"Year-Frequency\")\nplt.xticks(rotation=90)\nplt.grid()\n\n","4878bb05":"#year-firm\n#grafige gore ortlama yil 2006-2007 gibi bir sey\n#yukarida ortalamaya gore 2007 degeri baz alinabilir.\ndata[\"Genre\"].unique()\nplt.figure(figsize=(15,10))\nsns.boxplot(x=\"Genre\",y=\"Year\",data=data)\nplt.show()","427adc26":"data[data[\"Year\"].isnull()]","054bf2d6":"#done\ndata[\"Year\"] = data[\"Year\"].fillna(2017.0)\ndata[data[\"Year\"].isnull()]","d4b8fdf2":"#to fill publishwer\ndata[\"Publisher\"].unique()\n","97af0f13":"#when looked at the graph,frequency of 2004 and 2007 can be realized\n#let's focus on 2004-2007\n \ndata[data[\"Publisher\"].isnull()]","1200724d":"var1 = data[\"Publisher\"].value_counts().head(10)\nvar2 = data[\"Platform\"].value_counts().head(10)","8c73d6fa":"#Let's make frequency graph for publisher and platform\nplt.figure(figsize=(15,10))\nsns.barplot(x=var1,y=var1.index)\nplt.title(\"Publisher-Frequency\")\nplt.xticks()\nplt.grid()\n\nplt.figure(figsize=(15,10))\nsns.barplot(x=var2,y=var2.index)\nplt.title(\"Publisher-Frequency\")\nplt.xlabel(\"Frequency\")\nplt.grid()","444cd276":"#after filling publisher\ndata[\"Publisher\"] = data[\"Publisher\"].fillna(\"Nintendo\")\ndata[data[\"Publisher\"].isnull()]\n#done\n","39430459":"#year---count#\n#firstly year must be converted to int\ndata.Year = data.Year.astype(int)\nplt.figure(figsize=(15,10))\nsns.countplot(data.Year)\nplt.title(\"Year-Frequency\")\nplt.xticks(rotation=90)\nplt.show()","2d66b12e":"#genre---count#\nplt.figure(figsize=(15,10))\nsns.countplot(data.Genre)\nplt.xticks(rotation=90)\nplt.title(\"Genre-Frequency\")\nplt.show()","8f35c84a":"data.columns\ncorr_list = [\"Year\",\"NA_Sales\",\"EU_Sales\",\n             \"JP_Sales\",\"Other_Sales\",\"Global_Sales\"]\nsns.heatmap(data[corr_list].corr() , annot=True , fmt=\".2f\")\nplt.show()","31344a73":"NA_Sales = data.iloc[:,6]\nEU_Sales = data.iloc[:,7]\nJP_Sales = data.iloc[:,8]\nOther_Sales = data.iloc[:,9]\nGlobal_Sales = data.iloc[:,10]\ndata_plot = data.drop([\"Rank\",\"Name\",\"Year\",\"Genre\",\"Publisher\"],axis=1)\n# donut plot\nfeature_names = \"NA_Sales\",\"EU_Sales\",\"JP_Sales\",\"Other_Sales\",\"Global_Sales\"\nfeature_size = [len(NA_Sales),len(EU_Sales),len(JP_Sales),len(Other_Sales),len(Global_Sales)]\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.2,color = \"white\")\nplt.pie(feature_size, labels = feature_names, colors = [\"red\",\"green\",\"blue\",\"cyan\",\"yellow\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Features\")\nplt.show()\n","d126fa5b":"#top 20 publishers making discount (according to number of discount)\nvar3 = data[\"Publisher\"].value_counts().head(20)","d4a747c1":"publisher_list = [i for i in var3.index]\nna_sales = []\neu_sales = []\njp_sales = []\nother_sales = []\nglobal_sales = []\n\nfor i in publisher_list:\n    x = data[data[\"Publisher\"]==i] #x is dataframe\n    na_sales.append(sum(x.NA_Sales)\/len(x))\n    eu_sales.append(sum(x.EU_Sales)\/len(x))\n    jp_sales.append(sum(x.JP_Sales)\/len(x))\n    other_sales.append(sum(x.Other_Sales)\/len(x))\n    global_sales.append(sum(x.Global_Sales)\/len(x))\n\n# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=na_sales,y=publisher_list,color='green',alpha = 0.8,label='Nort America' )\nsns.barplot(x=eu_sales,y=publisher_list,color='red',alpha = 0.7,label='Europa')\nsns.barplot(x=jp_sales,y=publisher_list,color='cyan',alpha = 0.9,label='Japonia')\nsns.barplot(x=other_sales,y=publisher_list,color='yellow',alpha = 0.6,label='Other')\nsns.barplot(x=global_sales,y=publisher_list,color='orange',alpha = 0.6,label='Global')\n\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Regions', ylabel='Publisher'\n       ,title = \"Avarage of Discount's  According to Regions \")\nplt.show()","c7251558":"#Platforms making discount (with number of discount)\nvar4 = data[\"Platform\"].value_counts()\n","16546991":"platform_list = [i for i in var4.index]\n\nna_sales = []\neu_sales = []\njp_sales = []\nother_sales = []\nglobal_sales = []\n\nfor i in platform_list:\n    x = data[data[\"Platform\"]==i]\n    \n    na_sales.append(sum(x.NA_Sales)\/len(x))\n    eu_sales.append(sum(x.EU_Sales)\/len(x))\n    jp_sales.append(sum(x.JP_Sales)\/len(x))\n    other_sales.append(sum(x.JP_Sales)\/len(x))\n    global_sales.append(sum(x.Global_Sales)\/len(x))\n\nna_sales\n\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=na_sales,y=platform_list,color=\"green\",alpha=0.9,label=\"Nort America\")\nsns.barplot(x=eu_sales,y=platform_list,color=\"red\",alpha=0.7,label=\"Europa\")\nsns.barplot(x=jp_sales,y=platform_list,color=\"cyan\",alpha=0.9,label=\"Japonia\")\nsns.barplot(x=other_sales,y=platform_list,color=\"yellow\",alpha=0.6,label=\"Other\")\nsns.barplot(x=global_sales,y=platform_list,color=\"orange\",alpha=0.6,label=\"Global\")\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Regions', ylabel='Platforms'\n       ,title = \"Avarage of Discounts According to Regions \")\nplt.show()","a839b42c":"#top 30 video game making global discount (according to number of discount)\nvar5 = data[\"Name\"].value_counts().head(30)","d3779f84":"discount = []\nthe_games_list = [i for i in var5.index]\n\nfor i in the_games_list:\n    x = data[data[\"Name\"]==i]\n    discount.append(sum(x.Global_Sales)\/len(x))\n    \n#sorting to be shown more tidy in graph\ndata2 = pd.DataFrame({\"Name\":the_games_list,\"Global_Sales\":discount})\nnew_index = (data2[\"Global_Sales\"].sort_values(ascending=True)).index.values\nsorted_data = data2.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['Name'], y=sorted_data['Global_Sales'])\nplt.xticks(rotation=90)\nplt.xlabel('Video Games')\nplt.ylabel('Avarage Global Sales')\nplt.title('The Games with Global Sales')\nplt.grid()","19aee57c":"g = sns.factorplot(x=\"Platform\", y=\"Global_Sales\", data = data, kind = \"bar\", size = 10)\ng.set_ylabels(\"Global Sales Probability\")\nplt.xticks(rotation=90)\nplt.show()","ec4d4f09":"sales = []\nyears = []\nJP_sales = []\nNA_sales = []\nfor i in publisher_list:\n    x = data[data[\"Publisher\"]==i]\n    sales.append(sum(x.Global_Sales))\n    JP_sales.append(sum(x.JP_Sales))\n    NA_sales.append(sum(x.NA_Sales))\n    \n    \n\nplt.figure(figsize=(9,15))\nsns.barplot(x=publisher_list,y=sales)\nplt.xticks(rotation=90)\nplt.xlabel(\"Publisher\")\nplt.ylabel(\"Sum of Global Sales\")\nplt.title(\"Sum of Global Sales with Publisher\")\nplt.grid()","281ab518":"plt.figure(figsize=(9,15))\nsns.barplot(x=publisher_list,y=JP_sales)\nplt.xticks(rotation=90)\nplt.xlabel(\"Publisher\")\nplt.ylabel(\"Sum of Japonia Sales\")\nplt.title(\"Sum of Japonia Sales with Publisher\")\nplt.grid()\nplt.show()","e99cfac4":"plt.figure(figsize=(9,15))\nsns.barplot(x=publisher_list,y=NA_sales)\nplt.xticks(rotation=90)\nplt.xlabel(\"Publisher\")\nplt.ylabel(\"Sum of North America Sales\")\nplt.title(\"Sum of North America Sales with Publisher\")\nplt.grid()\nplt.show()","169e05ee":"#pip install plotly==3.10.0","ba45a7d8":"# prepare data frame\ndf = data.iloc[:100,:]\n# import graph objects as \"go\"\n#2017 must be evalueated because mots game selling is in 2007\ndf2007 = data[data.Year==2007].iloc[:10,:]\n\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.Rank,\n                    y = df.Global_Sales,\n                    mode = \"lines+markers\",\n                    name = \"Global Sales\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.Name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.Rank,\n                    y = df.NA_Sales,\n                    mode = \"lines+markers\",\n                    name = \"Nort America Sales\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.Name)\n\n\ntrace3 = go.Scatter(\n                    x = df.Rank,\n                    y = df.EU_Sales,\n                    mode = \"lines+markers\",\n                    name = \"Europe Sales\",\n                    marker = dict(color = 'pink'),\n                    text= df.Name)\n\ntrace4 = go.Scatter(\n                    x = df.Rank,\n                    y = df.JP_Sales,\n                    mode = \"lines+markers\",\n                    name = \"Japonia Sales\",\n                    marker = dict(color = 'orange'),\n                    text= df.Name)\n\ntrace5 = go.Scatter(\n                    x = df.Rank,\n                    y = df.Other_Sales,\n                    mode = \"lines+markers\",\n                    name = \"Other Sales\",\n                    marker = dict(color ='LightSkyBlue'),\n                    text= df.Name)\n\n\n\ndataa = [trace1, trace2,trace3,trace4,trace5]\nlayout = dict(title = 'Type of Sale vs World Rank of Top 100 Games',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = dataa, layout = layout)\niplot(fig)","7bad9345":"# create trace1 \ntrace1 = go.Bar(\n                x = df2007.Publisher,\n                y = df2007.EU_Sales,\n                name = \"Europa Sales\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2007.Platform)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2007.Publisher,\n                y = df2007.NA_Sales,\n                name = \"North America Sales\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2007.Platform)\n                \ntrace3 = go.Bar(\n                x = df2007.Publisher,\n                y = df2007.JP_Sales,\n                name = \"Japonia Sales\",\n                marker = dict(color = 'LightSkyBlue',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2007.Platform)\n                \n                \ndata = [trace1, trace2,trace3]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n","29a83b32":"* Global economic crisis happening between 2008-2012 does not affect sales.\n* After 2012, applyed sales decreased. \n","f9950008":"* Top 20 Publisher-JP_Sales","bfc3d636":"* Donut Plot","fb11f93a":"* when you look at data dataframe, you can realize that 2014 is related to GBA(nintendo game boy) also,GBA is related to nintendo\n* because of this missing publishers can be filled with Nintendo","b71e6558":"### The Graps finding average sales","4bbaa87e":"* Let's investigate some kind of variable frequency\n* Count plot must be used from seaborn","981e86cf":"as you can see these nan values must be changed by comparing variables ","ad05a291":"-as you can see, japanese firms are applying good sales for their own country ","33e3abcc":"* The grap show us average global sales in top 30 video games","e68375ef":"-actually, NES,GB,GEN,SCD are not consistent with global sales to analyzed","4e7c2f08":"* Publisher-Global Sales\n* top 20 publisher making discount (according to,numbmer of sales quantity)","270690ce":"* Publisher---NA_sales","51002f05":"### Basic Analysis about Variables","869d7a1e":"* Heat MaP","efb0a251":"-Actually, there are reletaions between all sale types.\n-There is no releation between years and sale types as well\n-In addititon, jp_sales more independent than than the other ones","4105db06":"## Missing Values","5b957856":"## Variable Frequencies","8b9db4bd":"-as you can see American firms are making good sales for their country like Activision\n-Actually every firm that belong their country is making good sales for their own country","91f09824":"## Extra Graph","57d9a52a":"old type genereation platforms apply more sale than new ones","bd583bf7":"### About Data","57507f61":"### Loading Data","2e3b5951":"-All types of sale are nearly close to each other(according to frequency)  ","c678cda8":"* Platform-Global Sales","d5f050ae":"* Average sales for top 20 publisher###","084a3f47":"the numbers above the bars show that filled data  ","dd7159c2":"* Generally North America is dominating for game sellers\n* Nintendo--> best seller of platform --> Wii and DS\n* Microsoft Game Studious --> best seller of platform --> X360\n* Activision --> best seller of platform --> X360 and PS3\n* Sega--> best seller of platform --> Wii\n* LucasArts--> best seller of platform --> Wii\n* Ubisoft--> best seller of platform --> X360","048e6738":"as you can see, japanes firms apply high sale to japania region","f3a5f096":"the graph show that sales are applyied in 2007,that is to say missing values can be 2007","f59064ce":"* Bar---Charts","c468c14f":"as you can see, GBA and Nintendo are very close to each other","a2e869f5":"* Line---Charts","6dd4c030":"-North America is mostly, except PS4 and PC","2d23a6a7":"## VISUAL\u0130ZAT\u0130ON","3666a4fb":"-As understood, the sales applyied by the publisher are in Nort America greatly ","d65b8d5f":"* Average sales for platforms"}}