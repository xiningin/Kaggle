{"cell_type":{"e9f24f3a":"code","8eaaf236":"code","88271efa":"code","c25e93c6":"code","421a6249":"code","66a27cc6":"code","668858be":"code","caffd822":"code","aa41b85e":"code","fa25d670":"code","d5d7c472":"code","f1412b24":"code","5cd12ce6":"code","1d3dd0b5":"code","4581db5a":"code","58b9f332":"code","82191063":"code","b5895201":"code","046e0f90":"code","29ac6376":"code","4e7a837d":"code","82ffb338":"code","528a44d4":"code","17334503":"code","8f6012de":"code","0236f519":"code","4ecfef79":"code","1a77922a":"code","08ac5366":"code","3a55e97c":"code","d7304f65":"code","f0465833":"code","96e800f3":"code","6e39458e":"code","a99e4ef1":"code","c2c9f05b":"code","8a3bf94b":"code","317998e8":"code","7051e4cb":"code","c7b3cb13":"code","1da79412":"code","9cd35ae4":"code","6d0719b7":"code","a6841a6c":"code","45ad42f6":"code","463bd71f":"code","e1d26292":"code","1ec2ad65":"code","29a3f618":"code","e36bc2fb":"markdown","e0c1f1c6":"markdown","578921eb":"markdown","7ac5b876":"markdown","dc2313d8":"markdown","032c8fed":"markdown","61f5e370":"markdown","567b1830":"markdown","ba9b3e1c":"markdown","326cedb7":"markdown","307c90f5":"markdown","94a7964c":"markdown","8d74f6a0":"markdown","50a1acda":"markdown","c48022ec":"markdown","41319915":"markdown","58ab660c":"markdown","6cb371d6":"markdown","fbaa9869":"markdown"},"source":{"e9f24f3a":"import pandas as pd \nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')","8eaaf236":"df = pd.read_csv('..\/input\/loandata\/Loan payments data.csv')\ndf.head()","88271efa":"df.info()","c25e93c6":"df.describe().T","421a6249":"df.isna().sum()","66a27cc6":"df.nunique()","668858be":"df.drop('Loan_ID', axis=1, inplace=True)","caffd822":"df.loan_status.value_counts()","aa41b85e":"df.Principal.value_counts()","fa25d670":"df.terms.value_counts()","d5d7c472":"df.effective_date.value_counts()","f1412b24":"# Convert to datetime data type\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf['effective_date'].dtype","5cd12ce6":"df.due_date.value_counts()","1d3dd0b5":"# Convert to datetime data type\ndf['due_date'] = pd.to_datetime(df['due_date'])\ndf['due_date'].dtype","4581db5a":"df[df['loan_status'] == 'COLLECTION_PAIDOFF']","58b9f332":"df[df['loan_status'] == 'COLLECTION']","82191063":"# Convert to datetime data type\ndf['paid_off_time'] = pd.to_datetime(df['paid_off_time']).dt.date\ndf['paid_off_time'].dtype","b5895201":"df['paid_off_time'] = pd.to_datetime(df['paid_off_time'])\ndf['paid_off_time']","046e0f90":"df['paid_off_time'].fillna(0,inplace=True)","29ac6376":"df[df['loan_status'] == 'PAIDOFF']","4e7a837d":"df['past_due_days'].fillna(0,inplace=True)","82ffb338":"df.isna().sum()","528a44d4":"i=1\nplt.figure(figsize=[20,15])\nif i<=3:\n    for col in df[['age','education','Gender']]:\n        plt.subplot(4,4,i)\n        sns.countplot(x=col,data=df)\n        plt.xticks(rotation=45)\n        i+=1","17334503":"plt.figure(figsize=[12,5])\nsns.barplot(x='loan_status',y='age',hue='Gender',data=df);","8f6012de":"df.groupby(['Gender','education'])['loan_status'].count().plot(kind='barh');","0236f519":"sns.pairplot(df);","4ecfef79":"df.drop(['effective_date', 'due_date', 'paid_off_time'], axis=1, inplace= True)\ndf.head()","1a77922a":"X = df.drop('loan_status', axis=1)\ny = df['loan_status']","08ac5366":"X= pd.get_dummies(X, drop_first=True)\nX.head()","3a55e97c":"y.replace({'PAIDOFF': 0, 'COLLECTION_PAIDOFF': 1, 'COLLECTION': 2}, inplace=True)\ny","d7304f65":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25,random_state=42)","f0465833":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","96e800f3":"models = [LogisticRegression,\n          KNeighborsClassifier,\n          SVC,\n          MLPClassifier,\n          DecisionTreeClassifier,\n          RandomForestClassifier,\n          GradientBoostingClassifier,\n          XGBClassifier,\n          LGBMClassifier,\n          CatBoostClassifier]","6e39458e":"Score_accuracy=[]\nScore_f1=[]\nModelName=[]\n\n\nfor model in models:\n    alg = model().fit(X_train,y_train)\n    y_pred = alg.predict(X_test)\n    Score_accuracy.append((accuracy_score(y_test, y_pred))*100)\n    Score_f1.append((f1_score(y_test, y_pred, average='weighted'))*100)\n    ModelName.append(model.__name__)\n    Results = pd.DataFrame({'ModelName':ModelName, 'Score_accuracy':Score_accuracy, 'Score_f1':Score_f1})","a99e4ef1":"Results","c2c9f05b":"plt.figure(figsize=[12,8])\nplt.subplot(2,2,1)\nsns.barplot(x='ModelName',y='Score_accuracy',data=Results.sort_values('Score_accuracy',ascending=False))\nplt.title('Score_accuracy')\nplt.xticks(rotation=90);\nplt.subplot(2,2,2)\nsns.barplot(x='ModelName',y='Score_f1',data=Results.sort_values('Score_f1',ascending=False))\nplt.title('Score_f1')\nplt.xticks(rotation=90);","8a3bf94b":"ModelName=[]\nScore_f1=[]\nScore_accuracy=[]","317998e8":"# LogisticRegression\ntuned=LogisticRegression(solver='liblinear').fit(X_train, y_train)\nModelName.append(LogisticRegression.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test))) ","7051e4cb":"# KNeighborsClassifier\nmodel=KNeighborsClassifier()\nparams = {'n_neighbors':np.arange(1,25)}\ntuned = KNeighborsClassifier(**(GridSearchCV(model,params,cv=5,verbose=2,n_jobs=-1).fit(X_train, y_train).best_params_)).fit(X_train, y_train)\nModelName.append(KNeighborsClassifier.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test))) ","c7b3cb13":"# Support Vector Machine\nmodel=SVC()\nparams = {'C': np.arange(1,10), 'kernel': ['linear', 'rbf']}\ntuned = SVC(**(GridSearchCV(model,params,cv=5,verbose=2,n_jobs=-1).fit(X_train, y_train).best_params_)).fit(X_train, y_train)\nModelName.append(SVC.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test)))","1da79412":"# MLPClassifier\nmodel=MLPClassifier()\nparams = {'alpha': [1,0.1,0.01,0.03,0.005,0.0001],'hidden_layer_sizes': [(10,10),(100,100),(3,5)]}\ntuned = MLPClassifier(**(GridSearchCV(model,params,cv=5,verbose=2,n_jobs=-1).fit(X_train, y_train).best_params_)).fit(X_train, y_train)\nModelName.append(MLPClassifier.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test)))","9cd35ae4":"# DecisionTreeClassifier\nmodel=DecisionTreeClassifier()\nparams = {'min_samples_split':[2,5,10,20],'max_depth':[3,5,8]}\ntuned = DecisionTreeClassifier(**(GridSearchCV(model,params,cv=5,verbose=2,n_jobs=-1).fit(X_train, y_train).best_params_)).fit(X_train, y_train)\nModelName.append(DecisionTreeClassifier.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test)))","6d0719b7":"# RandomForestClassifier\nmodel=RandomForestClassifier()\nparams = {'n_estimators':[100,200,500],'max_features':[3,5,8],'min_samples_split':[3,8]}\ntuned = RandomForestClassifier(**(GridSearchCV(model,params,cv=5,verbose=2,n_jobs=-1).fit(X_train, y_train).best_params_)).fit(X_train, y_train)\nModelName.append(RandomForestClassifier.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test))) ","a6841a6c":"# GradientBoostingClassifier\nmodel=GradientBoostingClassifier()\nparams = {'n_estimators':[100,300,500],'learning_rate':[0.1,0.01,0.001],'max_depth': [2,3,5]}\ntuned = GradientBoostingClassifier(**(GridSearchCV(model,params,cv=5,verbose=2,n_jobs=-1).fit(X_train, y_train).best_params_)).fit(X_train, y_train)\nModelName.append(GradientBoostingClassifier.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test)))","45ad42f6":"# XGBClassifier\ntuned=XGBClassifier().fit(X_train, y_train)\nModelName.append(XGBClassifier.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test))) ","463bd71f":"# LGBMClassifier\nmodel=LGBMClassifier()\nparams = {'learning_rate':[0.001,0.01,0.1],'n_estimators':[200,500,1000],'max_depth':[1,2,3,5,8]}        \ntuned = LGBMClassifier(**(GridSearchCV(model,params,cv=5,verbose=2,n_jobs=-1).fit(X_train, y_train).best_params_)).fit(X_train, y_train)\nModelName.append(LGBMClassifier.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test)))","e1d26292":"# CatBoostClassifier\nmodel=CatBoostClassifier()\nparams = {'iterations':[200,500],'learning_rate':[0.01,0.03,],'depth':[4,8]}        \ntuned = CatBoostClassifier(**(GridSearchCV(model,params,cv=5,verbose=2,n_jobs=-1).fit(X_train, y_train).best_params_)).fit(X_train, y_train)\nModelName.append(CatBoostClassifier.__name__)\nScore_f1.append(f1_score(y_test, tuned.predict(X_test), average='weighted'))\nScore_accuracy.append(accuracy_score(y_test, tuned.predict(X_test)))","1ec2ad65":"Results_best = pd.DataFrame({'ModelName':ModelName, 'Score_f1':Score_f1, 'Score_accuracy':Score_accuracy})\nResults_best","29a3f618":"plt.figure(figsize=[15,8])\nplt.subplot(2,2,1)\nsns.barplot(x='ModelName',y='Score_accuracy',data=Results_best.sort_values('Score_accuracy',ascending=False))\nplt.title('Score_accuracy')\nplt.xticks(rotation=90);\nplt.subplot(2,2,2)\nsns.barplot(x='ModelName',y='Score_f1',data=Results_best.sort_values('Score_f1',ascending=False))\nplt.title('Score_f1')\nplt.xticks(rotation=90);","e36bc2fb":"## Age, education, gender\nA customer\u2019s basic demographic information","e0c1f1c6":"### paid_off_time is 'NaN' when loan status is 'COLLECTION'","578921eb":"### No more missing values","7ac5b876":"## Hyperparameter Optimization","dc2313d8":"# EDA and Preprocessing","032c8fed":"# Splittting Features and label","61f5e370":"## loan_status \nWhether a loan is paid off, in collection, new customer yet to payoff, or paid off after the collection efforts","567b1830":"## First Modeling","ba9b3e1c":"## Effective_date\nWhen the loan got originated and took effects","326cedb7":"## Due_date\nSince it\u2019s one-time payoff schedule, each loan has one single due date","307c90f5":"## Loan_ID  \nA unique loan number assigned to each loan customers\n\nIt is just ID, No Predicted affect on Modelling","94a7964c":"## Principal\nBasic principal loan amount at the origination","8d74f6a0":"# Loan Payment Data","50a1acda":"### past_due_days is 'NaN' when loan status is 'PAIDOFF'","c48022ec":"## terms\nCan be weekly (7 days), biweekly, and monthly payoff schedule","41319915":"## Pastdue_days\nHow many days a loan has been past due","58ab660c":"##  We can consider only past_due_days and drop all dates ","6cb371d6":"## Paidoff_time\nThe actual time a customer pays off the loan","fbaa9869":"# Data Description\n\n### Context\nThis data set includes customers who have paid off their loans, who have been past due and put into collection without paying back their loan and interests, and who have paid off only after they were put in collection. The financial product is a bullet loan that customers should pay off all of their loan debt in just one time by the end of the term, instead of an installment schedule. Of course, they could pay off earlier than their pay schedule.\n\n### Content\n\n* **Loan_id**:  A unique loan number assigned to each loan customers\n\n* **Loan_status**:  Whether a loan is paid off, in collection, new customer yet to payoff, or paid off after the collection efforts\n\n* **Principal**:  Basic principal loan amount at the origination\n\n* **Effective_date**:  When the loan got originated and took effects\n\n* **Due_date**:  Since it\u2019s one-time payoff schedule, each loan has one single due date\n\n* **Paidoff_time**:  The actual time a customer pays off the loan\n\n* **Pastdue_days**:  How many days a loan has been past due\n\n* **Age, education, gender**:  A customer\u2019s basic demographic information"}}