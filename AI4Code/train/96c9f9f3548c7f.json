{"cell_type":{"63eecc64":"code","5b5fc4b0":"code","4b032ad0":"code","8add9c18":"code","6c0ad24c":"code","81eae11b":"code","ad7c44ab":"code","73819db4":"code","15e1a805":"code","8ee62248":"code","010ea777":"code","6dd786e4":"code","ecef4d05":"code","1af2e076":"code","a4533b73":"code","2a8dae51":"code","5672ac1b":"code","e4136c7d":"code","b8df6b1e":"code","7a4bedde":"code","5ad2ac45":"code","a68f755c":"markdown","e3b09acf":"markdown","9b6bd940":"markdown","5e5e0085":"markdown","bf5bd59c":"markdown","22473cfe":"markdown","ea735e14":"markdown","2fcc5e70":"markdown"},"source":{"63eecc64":"# EDA\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.utils import resample\nfrom sklearn.utils import shuffle\n\n# Model and Prediction\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n%matplotlib inline","5b5fc4b0":"wp=pd.read_csv('..\/input\/water-potability\/water_potability.csv')","4b032ad0":"wp.head()","8add9c18":"wp.shape","6c0ad24c":"wp.info()","81eae11b":"wp.describe()","ad7c44ab":"wp.isnull().sum()","73819db4":"wp = wp.dropna()","15e1a805":"sns.set_style(\"darkgrid\")\nsns.countplot(x='Potability',data=wp)","8ee62248":"wp['Potability'].value_counts()","010ea777":"# Resampling the data\nnp  = wp[wp['Potability']==0]\np = wp[wp['Potability']==1]\n\nwp_minority_upsampled = resample(p, replace = True, n_samples = 1200) \n\nwp = pd.concat([np, wp_minority_upsampled])\nwp = shuffle(wp)","6dd786e4":"wp.Potability.value_counts()","ecef4d05":"sns.pairplot(wp, hue = 'Potability')","1af2e076":"wp.corr()","a4533b73":"plt.figure(figsize=(14,10))\nsns.heatmap(wp.corr(), annot=True)","2a8dae51":"X = wp.drop(['Potability'], axis = 1)\nY = wp['Potability']","5672ac1b":"# Train-test split 30-70\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.3, \n                                                    random_state=101)","e4136c7d":"#Scaling the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)","b8df6b1e":"def models(X_train,y_train):\n    \n    #Logistic Regression\n    log = LogisticRegression(random_state=0)\n    log.fit(X_train, y_train)\n    \n    #Decision Tree\n    decision_tree = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\n    decision_tree.fit(X_train, y_train)\n    \n    #Random Forest\n    random_forest = RandomForestClassifier(n_estimators=10,criterion = 'entropy', random_state=0)\n    random_forest.fit(X_train, y_train)\n    \n    #KNN\n    knn = KNeighborsClassifier(n_neighbors = 3)\n    knn.fit(X_train, y_train)\n    \n    #Model Accuracy on Training Data\n    print('[0]Logistic Regression Training Acc:', log.score(X_train,y_train))\n    print('[1]Decision Tree Training Acc:', decision_tree.score(X_train,y_train))\n    print('[2]Random Forest Training Acc:', random_forest.score(X_train,y_train))\n    print('[3]KNN Training Acc:', knn.score(X_train,y_train))\n    \n    return log, decision_tree, random_forest, knn","7a4bedde":"model = models(X_train,y_train)","5ad2ac45":"# Accuracy on Testing Data\n\nfor i in range(len(model)):\n    print('Model ', i)\n    cm = confusion_matrix(y_test, model[i].predict(X_test))\n\n    tp = cm[0][0]\n    tn = cm[1][1]\n    fp = cm[1][0]\n    fn = cm[0][1]\n\n    print(cm)\n    print('Testing Acc = ', (tp + tn)\/(tp +tn +fn + fp))\n    print()","a68f755c":"**Splitting and Scaling the Data**","e3b09acf":"In this project, we will be prediciting if the water is save for human consumption based on the water quality metrics","9b6bd940":"# Water Potability Prediction ","5e5e0085":"**Importing Libraries**","bf5bd59c":"**The testing accuracies are:**\n* Logistic Regression : 0.48\n* Decision Tree : 0.7\n* Random Forest : 0.76\n* KNN : 0.66","22473cfe":"We can see that we have missing values in the data, so we will remove the missing values ","ea735e14":"**Models and Accuracy**","2fcc5e70":"**Exploratory Data Analysis**"}}