{"cell_type":{"f6435f71":"code","19594ab7":"code","62af355b":"code","0a8aa1e2":"code","03fd3b30":"code","6bbea91b":"code","02ee94e3":"code","47530784":"code","04846dfa":"code","8f97bf07":"code","61c89838":"code","0ecea689":"code","5691c83e":"code","810f787c":"code","65793abe":"code","33d3884c":"code","dfd6f168":"code","bb284bb6":"code","ca629bb6":"code","bdfb9e22":"code","77594cd3":"code","6a1ffbef":"code","899dff75":"code","c90edb59":"code","3ba9fdc4":"code","fd307e44":"code","2c3ff2c4":"code","2ce45366":"code","2ea81300":"markdown","534c721d":"markdown","c396712c":"markdown","7c3cded8":"markdown","0759e135":"markdown","968e2e03":"markdown","ad064b77":"markdown","fa9ee3e4":"markdown","c28992a8":"markdown"},"source":{"f6435f71":"##Import relevant libraries necessary for Exploratory Data Analysis\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime\n","19594ab7":"%matplotlib inline","62af355b":"##Import relevant\ndata = pd.read_csv(\"..\/input\/montcoalert\/911.csv\", parse_dates = [\"timeStamp\"])","0a8aa1e2":"data.info()","03fd3b30":"data.isna().sum()","6bbea91b":"clean_data = data.copy().dropna(axis=0).drop(\"e\", axis=1)\nclean_data.head()","02ee94e3":"clean_data.shape","47530784":"print(\"{} was the most emergency calls made by a town, while {} was the least 911 Emergency calls\"\\\n      .format(clean_data[\"twp\"].value_counts().max(),clean_data[\"twp\"].value_counts().min()))\n\n","04846dfa":"clean_data[\"title\"].nunique() ","8f97bf07":"## The title col\nclean_data[\"reason\"] = clean_data[\"title\"].apply(lambda x: x.split(\":\")[0])\n\nclean_data.head()","61c89838":"clean_data[\"reason\"].nunique() #A huge difference from 144","0ecea689":"#What is the reason for calling 911 regularly\nclean_data[\"reason\"].value_counts()","5691c83e":"## Ignore warnings from seaborn\nimport warnings\n\nwarnings.filterwarnings(action = \"ignore\", category = FutureWarning,module = \"seaborn\")\n","810f787c":"sns.countplot(clean_data[\"reason\"], palette = \"winter\")","65793abe":"time_0 = clean_data[\"timeStamp\"].iloc[0]\nprint(f\"This first day in the data's entry is {time_0.day_name()}\") #Special functions are available for this datatype\nprint(f\"This first month in the data's entry is {time_0.month_name()}\")","33d3884c":"clean_data[\"date\"] = clean_data[\"timeStamp\"].apply(lambda x: x.date())\nclean_data[\"day\"] = clean_data[\"timeStamp\"].apply(lambda x: x.day_name()[:3])\nclean_data[\"month\"] = clean_data[\"timeStamp\"].apply(lambda x: x.month)\nclean_data[\"hour\"] = clean_data[\"timeStamp\"].apply(lambda x: x.hour)\nclean_data[\"year\"] = clean_data[\"timeStamp\"].apply(lambda x: x.year)\n\nclean_data.head()","dfd6f168":"#How many emergency calls are sent in a day?\nplt.figure(figsize=(10,7))\nsns.countplot(clean_data[\"day\"], data = clean_data, hue=\"reason\", palette = \"rocket\")\nplt.legend(bbox_to_anchor = (1.15,1), loc = 0)","bb284bb6":"#How many emergency calls are sent in a month?\nplt.figure(figsize=(10,7))\nsns.countplot(clean_data[\"month\"], data = clean_data, hue=\"reason\", palette = \"rocket\")\nplt.legend(bbox_to_anchor = (1.15,1), loc = 0)","ca629bb6":"byDate = clean_data.groupby(\"date\").count()\nbyDate.head()","bdfb9e22":"byDate.head()","77594cd3":"def date_tick_gen(startDate: tuple, endDate: tuple, num_tick:int):\n    \"\"\"\n    startDate: Tuple. Input start date with tuple of 3 integers in format Y, M, d\n    endDate: Tuple. Input end date with tuple of 3 integers in format Y, M, d\n    num_tick: Int. Number of ticks to generate\n    \n    \"\"\" \n    Y, M, d = startDate\n    start = datetime.date(Y, M, d)\n    Y, M, d = endDate\n    end = datetime.date(Y, M, d)\n    diff = (end - start).days\n    step = int(diff\/num_tick)\n    ticks = list(start + datetime.timedelta(days=x) for x in range(0, diff, step))\n    \n    return ticks\n\nstart = datetime.date(2015,11,20) #I used these dates so the chart wont be truncated\nend = datetime.date(2020,8,10)\n\nticks = date_tick_gen((2015,11,20), (2020,8,10), 15) #Tweak the num_steps parameter to see effects on the plot\n\n\n\nplt.figure(figsize=(17,7))\n\nbyDate[\"zip\"].plot()\n\nplt.xlim((start, end))\nplt.xticks(ticks)\n\nplt.tight_layout()","6a1ffbef":"#Plot to show the date calls for Traffic related emergencies peaked\nplt.figure(figsize=(17,7))\n\nbyDateTraffic = clean_data[clean_data[\"reason\"] == \"Traffic\"].groupby(\"date\").count()\nbyDateTraffic[\"zip\"].plot()\n\nplt.xlim((start, end))\nplt.xticks(ticks)\n\nplt.tight_layout()","899dff75":"byMonthDay = clean_data.groupby([\"month\",\"day\"]).count()[\"zip\"].unstack(1)\nbyMonthDay.head()","c90edb59":"plt.figure(figsize=(14,10))\nsns.heatmap(byMonthDay, cmap=\"coolwarm\")","3ba9fdc4":"#Import necessary libraries\nimport geopandas as gpd\nimport folium\nfrom folium import Marker\nfrom folium.plugins import MarkerCluster","fd307e44":"warnings.filterwarnings(action = \"ignore\", category = FutureWarning,module = \"pyproj\")\n\ngeo_data = gpd.GeoDataFrame(data = clean_data[['lat', 'lng', 'desc', 'year','twp', 'date','addr','reason']],\n                            geometry = gpd.points_from_xy(clean_data[\"lng\"], clean_data[\"lat\"]))\ngeo_data.crs = {\"init\":\"epsg:4326\"}\n\ngeo_data.head()","2c3ff2c4":"map_1 = folium.Map(location=[37.6, -95.665], tiles=\"cartodbpositron\", zoom_start = 4) #Map of USA\nmap_1","2ce45366":"map_2 = folium.Map(location=[37.6, -95.665], tiles=\"cartodbpositron\", zoom_start = 10)\nsub_gData = geo_data[geo_data[\"year\"] == 2020]\n\nmc = MarkerCluster()\n\nfor idx, row in sub_gData.iloc[:100].iterrows():\n    popup = row[\"addr\"] +\" \" + row[\"twp\"].title()\n    tooltip = row[\"reason\"]\n    mc.add_child(Marker([row[\"lat\"],row[\"lng\"]], popup = popup,tooltip=tooltip))\n    \nmap_1.add_child(mc)","2ea81300":"The Data contains the following features\n\n* lat: String variable, Latitude\n* lng: String variable, Longitude\n* desc: String variable, Description of the Emergency Call\n* zip: String variable, Zip Code\n* title: String variable, Title\n* timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n* twp: String variable, Township\n* addr: String variable, Address\n* e: String variable, Always 1","534c721d":"Next we'll answer a few questions, such as;\n- What Townships call for emergency frequently?\n- Why do people call 911 frequently?, e.t.c","c396712c":"We can see from the information of the data provided by *Pandas* that some missing values exist in the `twp` and `zip` columns. Next the rows containing missing values will be dropped and the `e` column as well.","7c3cded8":"To further explore this data, a new feature will be derived from the `title` feature, this is because the title has many unique values as a result of expanded categories, the new feature will hold the compressed categories.","0759e135":"Next we'll discover how the days of week affect the rate of calls made, but first we have to create a new column, fortunately the dataset's `timeStamp` feature was parsed in a `datetime` format.","968e2e03":"From the data, it is deduced that Fridays of the month of March are associated with high emergency calls","ad064b77":"## Geo Spatial Plotting","fa9ee3e4":"Looking at these, a questions arises what days in a specific month are emergencies calls more prone to be made?\n\nTo answer this we would have to find the correlation between the days of week and the months.","c28992a8":"There was a surge in emergency calls between 25-Feb, 2018 and 29-Mar,2018. What event\/s could has originated this?"}}