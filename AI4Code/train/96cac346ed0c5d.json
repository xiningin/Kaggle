{"cell_type":{"12097020":"code","0bc32512":"code","bb435985":"code","943acf80":"code","71383846":"code","3a8b4557":"code","da50bd80":"code","7052c820":"code","f0763b69":"code","02af6970":"code","9ab91344":"code","cb01768e":"code","11bcbffa":"code","1a5093cf":"code","82783eac":"markdown"},"source":{"12097020":"#First things first\n#Let's start with data types\n# Textual data is stored in string data type\ntextual_data = 'Hello World'\n#Let's print the type of textual_data\nprint(type(textual_data))\n#Numbers are stored in integer data type\nnumber_data = 5\nprint(type(number_data))\n#Numbers with decimal point are stored in float type\nfloat_data = 3.3\nprint(type(float_data))","0bc32512":"#Hmm, can we have an array of these data types\n# yes, You can store a list of these data types in list\nlist_type = [1, 'text', 2, 'another text']\nprint(type(list_type))\n# We have tuples too and yes they are immutable, lists are mutable\ntuple_type = (1, 'text', 2, 'another text')\nprint(type(tuple_type))\n# Lets print our list\nprint(list_type)\n# Let's append something to list and print again\nlist_type.append('I am feeling lucky to use python')\nprint(list_type)\n# I know what you are thinking now\n# Yes, you can iterate a list very easily\nfor item in list_type:\n    print(item)\n# Let's slice and dice our list now, shall we?\nprint(list_type[-1])\nprint(list_type[0])\nprint(list_type[-3:-1])\nprint(list_type[:2])\nprint(list_type[2:])","bb435985":"# We have a very powerful and interesting data structure in python\n# It's called a dataframe\n# Let's explore it now\n# Dataframe is equivalent to a table in database\n# We will combine three series object's into a dataframe\n# Series(One dimensional ndarray) is another insteresting data structure \nimport pandas as pd\npurchase_1 = pd.Series({'Name': 'Ali',\n                        'Item': 'Item1',\n                        'Price': 11.50})\npurchase_2 = pd.Series({'Name': 'Hassan',\n                        'Item': 'Item2',\n                        'Price': 12.50})\npurchase_3 = pd.Series({'Name': 'Kamran',\n                        'Item': 'Item3',\n                        'Price': 15.00})\n# Think index like a key in your database column\ndf = pd.DataFrame([purchase_1, purchase_2, purchase_3], index=['Store 1', 'Store 2', 'Store 3'])\ndf.head()","943acf80":"# How to get a particular row\nprint(df.loc['Store 2'])\n# Get a particular column from a particular row\nprint(df.loc['Store 1', 'Price'])\n#print Price column\nprint(df['Price'])\n# store1's cost\nprint(df.loc['Store 1']['Price'])\n# name and cost of all\nprint(df.loc[:,['Name', 'Price']])","71383846":"# Well, if it's a table like structure. Can we query it?\n#You guessed it right, we can !!!\nprint(df['Price'] > 11.5)\n#similarly, you can do\nprint(df.where(df['Price'] > 11.5).dropna())\n#there is another way\nprint(df[df['Price'] > 11.5])","3a8b4557":"#Remember or\/and operations in sql, let's use them\n#Try or operation first\nprint(df[(df['Price'] > 11.5) | (df['Name'] == 'Ali')])\n#Let's try and operation now\nprint(df[(df['Price'] > 11.5) & (df['Name'] == 'Kamran')])","da50bd80":"# We can join our tables in database right, what about that in python?\nstaff_df = pd.DataFrame([{'Name': 'Imran', 'Role': 'Controller Examinations'},\n                         {'Name': 'Ali', 'Role': 'Academic Officer'},\n                         {'Name': 'Kamran', 'Role': 'Grader'}])\nstaff_df = staff_df.set_index('Name')\nstudent_df = pd.DataFrame([{'Name': 'Kamran', 'School': 'CS'},\n                           {'Name': 'Asif', 'School': 'EE'},\n                           {'Name': 'Ali', 'School': 'BBA'}])\nstudent_df = student_df.set_index('Name')\nprint(staff_df.head())\nprint()\nprint(student_df.head())","7052c820":"#Let's Start with Outer Join\npd.merge(staff_df, student_df, how='outer', left_index=True, right_index=True)","f0763b69":"# Inner join is cool too, right?\npd.merge(staff_df, student_df, how='inner', left_index=True, right_index=True)","02af6970":"# Left outer is handy too!!!\npd.merge(staff_df, student_df, how='left', left_index=True, right_index=True)","9ab91344":"# How can I miss your favourite Right outer join :)\npd.merge(staff_df, student_df, how='right', left_index=True, right_index=True)","cb01768e":"# But there is groupy by clause in SQL right?\n# Let's try that too\nimport numpy as np\ndf.groupby('Item').agg({'Price': np.average})","11bcbffa":"# One more thing, here is how we define functions in python\ndef add(x, y):\n    return x + y\nadd(1, 2)","1a5093cf":"# Enough from my side now\n# Your turn now\n# Upvote this notebook if you think you learned basics of python in a fun way!\n# Fork it, rename it and make following extensions\n# 1) Write a function to check a String is palindrome or not\n# 2) write a function which prints first n fibbonaci numbers\n# 3) Be innovative, write more queries over the dataframe we have\n","82783eac":"## The kernel is designed for beginners to get their hands dirty and quickly learn python\n## Estimated completion time ~ 15 mins"}}