{"cell_type":{"d1289d75":"code","c899965e":"code","6a9f90fc":"code","4dcda5d7":"code","00c0ed5a":"code","a0d880bb":"code","dc89d662":"code","1d3d9742":"code","45bc2130":"code","8589152a":"code","91078a08":"code","d436c3bd":"code","99a3fff4":"code","0da1c488":"code","e7dd9538":"code","5f78a28a":"code","f11098c5":"code","5bee3d6e":"code","eab3eab9":"code","e26d4adb":"markdown","19cbcdf9":"markdown","a14fd4d2":"markdown","c182a8ed":"markdown","fb6dd8bd":"markdown","bc7b668f":"markdown","dc04864b":"markdown","1db8ec90":"markdown","32b9ea01":"markdown","78c2c704":"markdown","be098655":"markdown","fd6a8933":"markdown","b5c6c671":"markdown","3bfec560":"markdown","7e8aae87":"markdown","3fbeb4e3":"markdown","dc515179":"markdown","de4cbec4":"markdown","3ff11eef":"markdown"},"source":{"d1289d75":"# \u5982\u679cpandas\u6ca1\u6709\u88ab\u5b89\u88c5\uff0c\u8bf7\u53d6\u6d88\u4e0b\u4e00\u53e5\u7684\u6ce8\u91ca\u3002\n# !pip install pandas\n!pip install d2l > d2l_install.out\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch import nn\nfrom d2l import torch as d2l\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nprint(device)","c899965e":"train_data = pd.read_csv('..\/input\/california-house-prices\/train.csv')\ntest_data = pd.read_csv('..\/input\/california-house-prices\/test.csv')","6a9f90fc":"print(train_data.shape)\nprint(test_data.shape)","4dcda5d7":"print(train_data.iloc[0:4, [0, 1, 2, 3, -3, -2, -1]])","00c0ed5a":"train_data_ = train_data.loc[:,train_data.columns != 'Sold Price']\ntrain_data_ = train_data_.loc[:,train_data_.columns != 'Summary']\nall_features = pd.concat((train_data_.iloc[:, 1:], test_data.iloc[:, 1:]))","a0d880bb":"numeric_features = all_features.dtypes[all_features.dtypes != 'object'].index\nall_features[numeric_features] = all_features[numeric_features].apply(\n    lambda x: (x - x.mean()) \/ (x.std()))\n# \u5728\u6807\u51c6\u5316\u6570\u636e\u4e4b\u540e\uff0c\u6240\u6709\u6570\u636e\u90fd\u610f\u5473\u7740\u6d88\u5931\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u7f3a\u5931\u503c\u8bbe\u7f6e\u4e3a0\nall_features[numeric_features] = all_features[numeric_features].fillna(0)\nprint(all_features[numeric_features].head())","dc89d662":"# non_numeric_features = all_features.dtypes[all_features.dtypes == 'object'].index\n# for feature in non_numeric_features:\n#     all_features[feature] = pd.to_numeric(all_features[feature].astype(str), errors='coerce')\n# all_features[non_numeric_features] = all_features[non_numeric_features].apply(\n#                                         lambda x: (x - x.mean()) \/ (x.std()))\n# all_features[non_numeric_features] = all_features[non_numeric_features].fillna(0)\n# print(all_features[non_numeric_features].head())","1d3d9742":"# `Dummy_na=True` \u5c06\u201cna\u201d\uff08\u7f3a\u5931\u503c\uff09\u89c6\u4e3a\u6709\u6548\u7684\u7279\u5f81\u503c\uff0c\u5e76\u4e3a\u5176\u521b\u5efa\u6307\u793a\u7b26\u7279\u5f81\u3002\nall_features = pd.get_dummies(all_features[numeric_features], dummy_na=True)\nprint(all_features.shape)\nprint(all_features.index)","45bc2130":"n_train = train_data.shape[0]\ntrain_features = torch.tensor(all_features[:n_train].values,\n                              dtype=torch.float32)\ntest_features = torch.tensor(all_features[n_train:].values,\n                             dtype=torch.float32)\ntrain_labels = torch.tensor(train_data['Sold Price'].iloc[all_features[:n_train].index].values.reshape(-1, 1),\n                            dtype=torch.float32)","8589152a":"loss = nn.MSELoss()\nin_features = train_features.shape[1]\nprint(in_features)\n\ndef get_net():\n    net = nn.Sequential(nn.Linear(in_features, 256),\n                        nn.ReLU(),\n                        nn.Linear(256, 64),\n                        nn.ReLU(),\n                        nn.Linear(64, 1),)\n    return net","91078a08":"def log_rmse(net, features, labels):\n    # \u4e3a\u4e86\u5728\u53d6\u5bf9\u6570\u65f6\u8fdb\u4e00\u6b65\u7a33\u5b9a\u8be5\u503c\uff0c\u5c06\u5c0f\u4e8e1\u7684\u503c\u8bbe\u7f6e\u4e3a1\n    clipped_preds = torch.clamp(net(features), 1, float('inf'))\n    rmse = torch.sqrt(loss(torch.log(clipped_preds), torch.log(labels)))\n    return rmse.item()","d436c3bd":"def train(net, train_features, train_labels, test_features, test_labels,\n          num_epochs, learning_rate, weight_decay, batch_size):\n    net = net.to(device)\n    train_ls, test_ls = [], []\n    train_iter = d2l.load_array((train_features, train_labels), batch_size)\n    train_features = train_features.to(device)\n    train_labels = train_labels.to(device)\n    if test_labels is not None:\n        test_features = test_features.to(device)\n        test_labels = test_labels.to(device)\n    # \u8fd9\u91cc\u4f7f\u7528\u7684\u662fAdam\u4f18\u5316\u7b97\u6cd5\n    optimizer = torch.optim.Adam(net.parameters(), lr=learning_rate,\n                                 weight_decay=weight_decay)\n    for epoch in range(num_epochs):\n        for X, y in train_iter:\n            X, y = X.to(device), y.to(device)\n            optimizer.zero_grad()\n            l = loss(net(X), y)\n            l.backward()\n            optimizer.step()\n        train_ls.append(log_rmse(net, train_features, train_labels))\n        if test_labels is not None:\n            test_ls.append(log_rmse(net, test_features, test_labels))\n    return train_ls, test_ls","99a3fff4":"def get_k_fold_data(k, i, X, y):\n    assert k > 1\n    fold_size = X.shape[0] \/\/ k\n    X_train, y_train = None, None\n    for j in range(k):\n        idx = slice(j * fold_size, (j + 1) * fold_size)\n        X_part, y_part = X[idx, :], y[idx]\n        if j == i:\n            X_valid, y_valid = X_part, y_part\n        elif X_train is None:\n            X_train, y_train = X_part, y_part\n        else:\n            X_train = torch.cat([X_train, X_part], 0)\n            y_train = torch.cat([y_train, y_part], 0)\n    return X_train, y_train, X_valid, y_valid","0da1c488":"def k_fold(k, X_train, y_train, num_epochs, learning_rate, weight_decay,\n           batch_size):\n    train_l_sum, valid_l_sum = 0, 0\n    for i in range(k):\n        data = get_k_fold_data(k, i, X_train, y_train)\n        net = get_net()\n        train_ls, valid_ls = train(net, *data, num_epochs, learning_rate,\n                                   weight_decay, batch_size)\n        train_l_sum += train_ls[-1]\n        valid_l_sum += valid_ls[-1]\n        d2l.plot(list(range(1, num_epochs + 1)), [train_ls, valid_ls],\n                     xlabel='epoch', ylabel='rmse', xlim=[1, num_epochs],\n                     legend=['train', 'valid'], yscale='log')\n        print(f'fold {i + 1}, train log rmse {float(train_ls[-1]):f}, '\n              f'valid log rmse {float(valid_ls[-1]):f}')\n    return train_l_sum \/ k, valid_l_sum \/ k","e7dd9538":"# for lr in np.arange(0.01, 0.12, 0.01):\n#     k, num_epochs, lr, weight_decay, batch_size = 5, 300, lr, 0, 128\n#     train_l, valid_l = k_fold(k, train_features, train_labels, num_epochs, lr,\n#                                     weight_decay, batch_size)\n#     print(f'{k}-\u6298\u9a8c\u8bc1: num_epochs:{num_epochs} lr:{lr} weight_decay:{weight_decay} \u5e73\u5747\u8bad\u7ec3log rmse: {float(train_l):f}, '\n#                     f'\u5e73\u5747\u9a8c\u8bc1log rmse: {float(valid_l):f}')","5f78a28a":"k, num_epochs, lr, weight_decay, batch_size = 5, 500, 0.05, 0, 128","f11098c5":"def train_and_pred(train_features, test_feature, train_labels, test_data,\n                   num_epochs, lr, weight_decay, batch_size):    \n    net = get_net()\n    train_ls, _ = train(net, train_features, train_labels, None, None,\n                        num_epochs, lr, weight_decay, batch_size)\n    d2l.plot(np.arange(1, num_epochs + 1), [train_ls], xlabel='epoch',\n             ylabel='log rmse', xlim=[1, num_epochs], yscale='log')\n    print(f'train log rmse {float(train_ls[-1]):f}')\n    # \u5c06\u7f51\u7edc\u5e94\u7528\u4e8e\u6d4b\u8bd5\u96c6\u3002\n    print(test_features.shape)\n    preds = net(test_features.to(device)).detach().cpu().numpy()\n    # \u5c06\u5176\u91cd\u65b0\u683c\u5f0f\u5316\u4ee5\u5bfc\u51fa\u5230Kaggle\n    test_data['Sold Price'] = pd.Series(preds.reshape(1, -1)[0])\n    submission = pd.concat([test_data['Id'], test_data['Sold Price']], axis=1)\n    submission.to_csv('submission.csv', index=False)\n    return submission","5bee3d6e":"submission = train_and_pred(train_features, test_features, train_labels, test_data,\n               num_epochs, lr, weight_decay, batch_size)","eab3eab9":"print(submission.head())","e26d4adb":"\u63a5\u4e0b\u6765\uff0c\u5982 :numref:`fig_kaggle_submit2` \u4e2d\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4ea4\u9884\u6d4b\u5230Kaggle\u4e0a\uff0c\u5e76\u67e5\u770b\u9884\u6d4b\u5728\u6d4b\u8bd5\u96c6\u4e0a\u4e0e\u5b9e\u9645\u623f\u4ef7\uff08\u6807\u7b7e\uff09\u7684\u6bd4\u8f83\u60c5\u51b5\u3002\u6b65\u9aa4\u975e\u5e38\u7b80\u5355\uff1a\n\n* \u767b\u5f55Kaggle\u7f51\u7ad9\uff0c\u8bbf\u95ee\u623f\u4ef7\u9884\u6d4b\u7ade\u8d5b\u9875\u9762\u3002\n* \u70b9\u51fb\u201cSubmit Predictions\u201d\u6216\u201cLate Submission\u201d\u6309\u94ae(\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0c\u8be5\u6309\u94ae\u4f4d\u4e8e\u53f3\u4fa7)\u3002\n* \u70b9\u51fb\u9875\u9762\u5e95\u90e8\u865a\u7ebf\u6846\u4e2d\u7684\u201cUpload Submission File\u201d\u6309\u94ae\uff0c\u9009\u62e9\u4f60\u8981\u4e0a\u4f20\u7684\u9884\u6d4b\u6587\u4ef6\u3002\n* \u70b9\u51fb\u9875\u9762\u5e95\u90e8\u7684\u201cMake Submission\u201d\u6309\u94ae\uff0c\u5373\u53ef\u67e5\u770b\u60a8\u7684\u7ed3\u679c\u3002\n\n![\u5411Kaggle\u63d0\u4ea4\u6570\u636e](..\/img\/kaggle-submit2.png)\n:width:`400px`\n:label:`fig_kaggle_submit2`\n\n## \u5c0f\u7ed3\n\n* \u771f\u5b9e\u6570\u636e\u901a\u5e38\u6df7\u5408\u4e86\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u9700\u8981\u8fdb\u884c\u9884\u5904\u7406\u3002\n* \u5c06\u5b9e\u503c\u6570\u636e\u91cd\u65b0\u7f29\u653e\u4e3a\u96f6\u5747\u503c\u548c\u5355\u4f4d\u65b9\u5dee\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u7528\u5b83\u4eec\u7684\u5e73\u5747\u503c\u66ff\u6362\u7f3a\u5931\u7684\u503c\u4e5f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002\n* \u5c06\u7c7b\u522b\u7279\u5f81\u8f6c\u5316\u4e3a\u6307\u6807\u7279\u5f81\uff0c\u53ef\u4ee5\u4f7f\u6211\u4eec\u628a\u5b83\u4eec\u5f53\u4f5c\u4e00\u4e2a\u72ec\u70ed\u5411\u91cf\u6765\u5bf9\u5f85\u3002\n* \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528$K$\u6298\u4ea4\u53c9\u9a8c\u8bc1\u6765\u9009\u62e9\u6a21\u578b\u5e76\u8c03\u6574\u8d85\u53c2\u6570\u3002\n* \u5bf9\u6570\u5bf9\u4e8e\u76f8\u5bf9\u8bef\u5dee\u5f88\u6709\u7528\u3002\n\n## \u7ec3\u4e60\n\n1. \u628a\u4f60\u7684\u9884\u6d4b\u63d0\u4ea4\u7ed9Kaggle\u3002\u4f60\u7684\u9884\u6d4b\u6709\u591a\u597d\uff1f\n1. \u4f60\u80fd\u901a\u8fc7\u76f4\u63a5\u6700\u5c0f\u5316\u4ef7\u683c\u7684\u5bf9\u6570\u6765\u6539\u8fdb\u4f60\u7684\u6a21\u578b\u5417\uff1f\u5982\u679c\u4f60\u8bd5\u56fe\u9884\u6d4b\u4ef7\u683c\u7684\u5bf9\u6570\u800c\u4e0d\u662f\u4ef7\u683c\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\n1. \u7528\u5e73\u5747\u503c\u66ff\u6362\u7f3a\u5931\u503c\u603b\u662f\u597d\u4e3b\u610f\u5417\uff1f\u63d0\u793a\uff1a\u4f60\u80fd\u6784\u9020\u4e00\u4e2a\u4e0d\u968f\u673a\u4e22\u5931\u503c\u7684\u60c5\u51b5\u5417\uff1f\n1. \u901a\u8fc7$K$\u6298\u4ea4\u53c9\u9a8c\u8bc1\u8c03\u6574\u8d85\u53c2\u6570\uff0c\u4ece\u800c\u63d0\u9ad8Kaggle\u7684\u5f97\u5206\u3002\n1. \u901a\u8fc7\u6539\u8fdb\u6a21\u578b\uff08\u4f8b\u5982\uff0c\u5c42\u3001\u6743\u91cd\u8870\u51cf\u548cdropout\uff09\u6765\u63d0\u9ad8\u5206\u6570\u3002\n1. \u5982\u679c\u6211\u4eec\u6ca1\u6709\u50cf\u672c\u8282\u6240\u505a\u7684\u90a3\u6837\u6807\u51c6\u5316\u8fde\u7eed\u7684\u6570\u503c\u7279\u5f81\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\n","19cbcdf9":"\u4e00\u79cd\u826f\u597d\u7684\u5b8c\u6574\u6027\u68c0\u67e5\u662f\u67e5\u770b\u6d4b\u8bd5\u96c6\u4e0a\u7684\u9884\u6d4b\u662f\u5426\u4e0e$K$\u500d\u4ea4\u53c9\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\u7684\u9884\u6d4b\u76f8\u4f3c\u3002\u5982\u679c\u662f\uff0c\u90a3\u5c31\u662f\u65f6\u5019\u628a\u5b83\u4eec\u4e0a\u4f20\u5230Kaggle\u4e86\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c06\u751f\u6210\u4e00\u4e2a\u540d\u4e3a`submission.csv`\u7684\u6587\u4ef6\u3002\n","a14fd4d2":"\u8ba9\u6211\u4eec\u770b\u770b\u524d\u56db\u4e2a\u548c\u6700\u540e\u4e24\u4e2a\u7279\u5f81\uff0c\u4ee5\u53ca\u524d\u56db\u4e2a\u6837\u672c\u7684\u6807\u7b7e\uff08\u623f\u4ef7\uff09\u3002\n","c182a8ed":"\u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u6b64\u8f6c\u6362\u4f1a\u5c06\u7279\u5f81\u7684\u6570\u91cf\u4ece79\u4e2a\u589e\u52a0\u5230331\u4e2a\u3002\u6700\u540e\uff0c\u901a\u8fc7`values`\u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece`pandas`\u683c\u5f0f\u4e2d\u63d0\u53d6NumPy\u683c\u5f0f\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u5f20\u91cf\u8868\u793a\u7528\u4e8e\u8bad\u7ec3\u3002\n","fb6dd8bd":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5904\u7406\u79bb\u6563\u503c\u3002\u8fd9\u5305\u62ec\u8bf8\u5982\u201cMSZoning\u201d\u4e4b\u7c7b\u7684\u7279\u5f81\u3002\u6211\u4eec\u7528\u4e00\u6b21\u72ec\u70ed\u7f16\u7801\u66ff\u6362\u5b83\u4eec\uff0c\u65b9\u6cd5\u4e0e\u524d\u9762\u5c06\u591a\u7c7b\u522b\u6807\u7b7e\u8f6c\u6362\u4e3a\u5411\u91cf\u7684\u65b9\u5f0f\u76f8\u540c(\u8bf7\u53c2\u89c1 :numref:`subsec_classification-problem` )\u3002\u4f8b\u5982\uff0c\u201cMSZoning\u201d\u5305\u542b\u503c\u201cRL\u201d\u548c\u201cRm\u201d\u3002\u5c06\u521b\u5efa\u4e24\u4e2a\u65b0\u7684\u6307\u793a\u5668\u7279\u5f81\u201cMSZoning_RL\u201d\u548c\u201cMSZoning_RM\u201d\uff0c\u5176\u503c\u4e3a0\u62161\u3002\u6839\u636e\u72ec\u70ed\u7f16\u7801\uff0c\u5982\u679c\u201cMSZoning\u201d\u7684\u539f\u59cb\u503c\u4e3a\u201cRL\u201d\uff0c\u5219:\u201cMSZoning_RL\u201d\u4e3a1\uff0c\u201cMSZoning_RM\u201d\u4e3a0\u3002`pandas`\u8f6f\u4ef6\u5305\u4f1a\u81ea\u52a8\u4e3a\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n","bc7b668f":"\u8bf7\u6ce8\u610f\uff0c\u6709\u65f6\u4e00\u7ec4\u8d85\u53c2\u6570\u7684\u8bad\u7ec3\u8bef\u5dee\u53ef\u80fd\u975e\u5e38\u4f4e\uff0c\u4f46$K$\u6298\u4ea4\u53c9\u9a8c\u8bc1\u7684\u8bef\u5dee\u8981\u9ad8\u5f97\u591a\u3002\u8fd9\u8868\u660e\u6211\u4eec\u8fc7\u62df\u5408\u4e86\u3002\u5728\u6574\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u5c06\u5e0c\u671b\u76d1\u63a7\u8fd9\u8bad\u7ec3\u8bef\u5dee\u548c\u9a8c\u8bc1\u8bef\u5dee\u4e24\u4e2a\u6570\u5b57\u3002\u8f83\u5c11\u7684\u8fc7\u62df\u5408\u53ef\u80fd\u8868\u660e\u73b0\u6709\u6570\u636e\u53ef\u4ee5\u652f\u6491\u4e00\u4e2a\u66f4\u5f3a\u5927\u7684\u6a21\u578b\u3002\u8f83\u5927\u7684\u8fc7\u62df\u5408\u53ef\u80fd\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6b63\u5219\u5316\u6280\u672f\u6765\u83b7\u76ca\u3002\n\n##  \u63d0\u4ea4Kaggle\u7684\u9884\u6d4b\n\n\u65e2\u7136\u6211\u4eec\u77e5\u9053\u5e94\u8be5\u9009\u62e9\u4ec0\u4e48\u6837\u7684\u8d85\u53c2\u6570\uff0c\u6211\u4eec\u4e0d\u59a8\u4f7f\u7528\u6240\u6709\u6570\u636e\u5bf9\u5176\u8fdb\u884c\u8bad\u7ec3\uff08\u800c\u4e0d\u662f\u4ec5\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u4e2d\u4f7f\u7528\u7684$1-1\/K$\u7684\u6570\u636e\uff09\u3002\u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u83b7\u5f97\u7684\u6a21\u578b\u53ef\u4ee5\u5e94\u7528\u4e8e\u6d4b\u8bd5\u96c6\u3002\u5c06\u9884\u6d4b\u4fdd\u5b58\u5728csv\u6587\u4ef6\u4e2d\u53ef\u4ee5\u7b80\u5316\u5c06\u7ed3\u679c\u4e0a\u4f20\u5230Kaggle\u7684\u8fc7\u7a0b\u3002\n","dc04864b":"## \u8bad\u7ec3\n\n\u9996\u5148\uff0c\u6211\u4eec\u8bad\u7ec3\u4e00\u4e2a\u5e26\u6709\u635f\u5931\u5e73\u65b9\u7684\u7ebf\u6027\u6a21\u578b\u3002\u6beb\u4e0d\u5947\u602a\uff0c\u6211\u4eec\u7684\u7ebf\u6027\u6a21\u578b\u4e0d\u4f1a\u8ba9\u6211\u4eec\u5728\u7ade\u8d5b\u4e2d\u83b7\u80dc\uff0c\u4f46\u7ebf\u6027\u6a21\u578b\u63d0\u4f9b\u4e86\u4e00\u79cd\u5065\u5168\u6027\u68c0\u67e5\uff0c\u4ee5\u67e5\u770b\u6570\u636e\u4e2d\u662f\u5426\u5b58\u5728\u6709\u610f\u4e49\u7684\u4fe1\u606f\u3002\u5982\u679c\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u80fd\u505a\u5f97\u6bd4\u968f\u673a\u731c\u6d4b\u66f4\u597d\uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u53ef\u80fd\u5b58\u5728\u6570\u636e\u5904\u7406\u9519\u8bef\u3002\u5982\u679c\u4e00\u5207\u987a\u5229\uff0c\u7ebf\u6027\u6a21\u578b\u5c06\u4f5c\u4e3a\u57fa\u7ebf\u6a21\u578b\uff0c\u8ba9\u6211\u4eec\u76f4\u89c2\u5730\u77e5\u9053\u7b80\u5355\u7684\u6a21\u578b\u79bb\u62a5\u544a\u6700\u597d\u7684\u6a21\u578b\u6709\u591a\u8fd1\uff0c\u8ba9\u6211\u4eec\u611f\u89c9\u5230\u6211\u4eec\u5e94\u8be5\u4ece\u66f4\u9177\u70ab\u7684\u6a21\u578b\u4e2d\u83b7\u5f97\u591a\u5c11\u6536\u76ca\u3002\n","1db8ec90":"## \u6a21\u578b\u9009\u62e9\n\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u7ec4\u672a\u8c03\u4f18\u7684\u8d85\u53c2\u6570\uff0c\u5e76\u5c06\u5176\u7559\u7ed9\u8bfb\u8005\u6765\u6539\u8fdb\u6a21\u578b\u3002\u627e\u5230\u4e00\u4e2a\u597d\u7684\u9009\u62e9\u53ef\u80fd\u9700\u8981\u65f6\u95f4\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4e00\u4e2a\u4eba\u4f18\u5316\u4e86\u591a\u5c11\u53d8\u91cf\u3002\u6709\u4e86\u8db3\u591f\u5927\u7684\u6570\u636e\u96c6\u548c\u8d85\u53c2\u6570\u7684\u5408\u9002\u8bbe\u7f6e\uff0c$K$\u6298\u4ea4\u53c9\u9a8c\u8bc1\u5f80\u5f80\u5bf9\u591a\u6b21\u6d4b\u8bd5\u5177\u6709\u76f8\u5f53\u7684\u9002\u5e94\u6027\u3002\u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4e86\u4e0d\u5408\u7406\u7684\u5927\u91cf\u9009\u9879\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u53d1\u73b0\u9a8c\u8bc1\u6548\u679c\u4e0d\u518d\u4ee3\u8868\u771f\u6b63\u7684\u8bef\u5dee\u3002\n","32b9ea01":"\u8bad\u7ec3\u6570\u636e\u96c6\u5305\u62ec1460\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c80\u4e2a\u7279\u5f81\u548c1\u4e2a\u6807\u7b7e\uff0c\u800c\u6d4b\u8bd5\u6570\u636e\u5305\u542b1459\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c80\u4e2a\u7279\u5f81\u3002\n","78c2c704":"## $K$\u6298\u4ea4\u53c9\u9a8c\u8bc1\n\n\u4f60\u53ef\u80fd\u8fd8\u8bb0\u5f97\uff0c\u6211\u4eec\u5728\u8ba8\u8bba\u6a21\u578b\u9009\u62e9\u7684\u90e8\u5206\uff08 :numref:`sec_model_selection` \uff09\u4e2d\u4ecb\u7ecd\u4e86$K$\u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002\u8fd9\u6709\u52a9\u4e8e\u6a21\u578b\u9009\u62e9\u548c\u8d85\u53c2\u6570\u8c03\u6574\u3002\u6211\u4eec\u9996\u5148\u9700\u8981\u4e00\u4e2a\u51fd\u6570\uff0c\u5728$K$\u6298\u4ea4\u53c9\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\u8fd4\u56de\u7b2c$i$\u6298\u7684\u6570\u636e\u3002\u5b83\u9009\u62e9\u7b2c$i$\u4e2a\u5207\u7247\u4f5c\u4e3a\u9a8c\u8bc1\u6570\u636e\uff0c\u5176\u4f59\u90e8\u5206\u4f5c\u4e3a\u8bad\u7ec3\u6570\u636e\u3002\u6ce8\u610f\uff0c\u8fd9\u5e76\u4e0d\u662f\u5904\u7406\u6570\u636e\u7684\u6700\u6709\u6548\u65b9\u6cd5\uff0c\u5982\u679c\u6211\u4eec\u7684\u6570\u636e\u96c6\u5927\u5f97\u591a\uff0c\u6211\u4eec\u80af\u5b9a\u4f1a\u505a\u4e00\u4e9b\u66f4\u806a\u660e\u7684\u6539\u53d8\u3002\u4f46\u662f\u8fd9\u79cd\u6539\u53d8\u6240\u589e\u52a0\u7684\u590d\u6742\u6027\u53ef\u80fd\u4f1a\u4f7f\u4ee3\u7801\u770b\u8d77\u6765\u66f4\u4e71\u3002\u5728\u8fd9\u91cc\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e9b\u6539\u53d8\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u95ee\u9898\u5f88\u7b80\u5355\u3002\n","be098655":"\u6211\u4eec\u4f7f\u7528`pandas`\u5206\u522b\u52a0\u8f7d\u5305\u542b\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u7684\u4e24\u4e2acsv\u6587\u4ef6\u3002\n","fd6a8933":"\u5f53\u6211\u4eec\u5728$K$\u6298\u4ea4\u53c9\u9a8c\u8bc1\u4e2d\u8bad\u7ec3$K$\u6b21\u540e\uff0c\u8fd4\u56de\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8bef\u5dee\u7684\u5e73\u5747\u503c\u3002\n","b5c6c671":"\u5bf9\u4e8e\u623f\u4ef7\uff0c\u5c31\u50cf\u80a1\u7968\u4ef7\u683c\u4e00\u6837\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u662f\u76f8\u5bf9\u6570\u91cf\uff0c\u800c\u4e0d\u662f\u7edd\u5bf9\u6570\u91cf\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u66f4\u5173\u5fc3\u76f8\u5bf9\u8bef\u5dee$\\frac{y - \\hat{y}}{y}$\uff0c\u800c\u4e0d\u662f\u7edd\u5bf9\u8bef\u5dee$y - \\hat{y}$\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5728\u4fc4\u4ea5\u4fc4\u5dde\u519c\u6751\u5730\u533a\u4f30\u8ba1\u4e00\u680b\u623f\u5b50\u7684\u4ef7\u683c\u65f6\uff0c\u6211\u4eec\u7684\u9884\u6d4b\u504f\u5dee\u4e8610\u4e07\u7f8e\u5143\uff0c\u5728\u90a3\u91cc\u4e00\u680b\u5178\u578b\u7684\u623f\u5b50\u7684\u4ef7\u503c\u662f12.5\u4e07\u7f8e\u5143\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u80fd\u505a\u5f97\u5f88\u7cdf\u7cd5\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6211\u4eec\u5728\u52a0\u5dde\u8c6a\u5b85\u533a\u7684\u9884\u6d4b\u51fa\u73b0\u4e86\u8fd9\u4e2a\u6570\u5b57\u7684\u504f\u5dee\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u60ca\u4eba\u7684\u51c6\u786e\u9884\u6d4b\uff08\u5728\u90a3\u91cc\uff0c\u623f\u4ef7\u5747\u503c\u8d85\u8fc7400\u4e07\u7f8e\u5143\uff09\u3002\n\n\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u7528\u4ef7\u683c\u9884\u6d4b\u7684\u5bf9\u6570\u6765\u8861\u91cf\u5dee\u5f02\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e5f\u662f\u6bd4\u8d5b\u4e2d\u5b98\u65b9\u7528\u6765\u8bc4\u4ef7\u63d0\u4ea4\u8d28\u91cf\u7684\u8bef\u5dee\u6307\u6807\u3002\u5373\u5c06$$\\delta$ for $|\\log y - \\log \\hat{y}| \\leq \\delta$\u8f6c\u6362\u4e3a$e^{-\\delta} \\leq \\frac{\\hat{y}}{y} \\leq e^\\delta$\u3002\u8fd9\u4f7f\u5f97\u9884\u6d4b\u4ef7\u683c\u7684\u5bf9\u6570\u4e0e\u771f\u5b9e\u6807\u7b7e\u4ef7\u683c\u7684\u5bf9\u6570\u4e4b\u95f4\u51fa\u73b0\u4ee5\u4e0b\u5747\u65b9\u6839\u8bef\u5dee\uff1a\n\n$$\\sqrt{\\frac{1}{n}\\sum_{i=1}^n\\left(\\log y_i -\\log \\hat{y}_i\\right)^2}.$$\n","3bfec560":"# \u5b9e\u6218 Kaggle \u6bd4\u8d5b\uff1a\u9884\u6d4b\u623f\u4ef7\n:label:`sec_kaggle_house`\n\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u5efa\u7acb\u548c\u8bad\u7ec3\u6df1\u5ea6\u7f51\u7edc\u7684\u57fa\u672c\u5de5\u5177\uff0c\u548c\u7f51\u7edc\u6b63\u5219\u5316\u7684\u6280\u672f\uff08\u5982\u6743\u91cd\u8870\u51cf\u3001Dropout\u7b49\uff09\u3002\u6211\u4eec\u51c6\u5907\u901a\u8fc7\u53c2\u52a0Kaggle\u6bd4\u8d5b\u6765\u5c06\u6240\u6709\u8fd9\u4e9b\u77e5\u8bc6\u4ed8\u8bf8\u5b9e\u8df5\u3002\u623f\u4ef7\u9884\u6d4b\u6bd4\u8d5b\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002\u8fd9\u4e2a\u6570\u636e\u662f\u76f8\u5f53\u901a\u7528\u7684\uff0c\u4e0d\u4f1a\u9700\u8981\u4f7f\u7528\u5e26\u7279\u6b8a\u7ed3\u6784\u7684\u6a21\u578b\uff08\u5c31\u50cf\u97f3\u9891\u6216\u89c6\u9891\u53ef\u80fd\u9700\u8981\u7684\u90a3\u6837\uff09\u3002\u6b64\u6570\u636e\u96c6\u7531Bart de Cock\u4e8e2011\u5e74\u6536\u96c6 :cite:`De-Cock.2011` \uff0c\u6db5\u76d6\u4e862006-2010\u5e74\u671f\u95f4\u4e9a\u5229\u6851\u90a3\u5dde\u57c3\u59c6\u65af\u5e02\u7684\u623f\u4ef7\u3002\u5b83\u6bd4\u54c8\u91cc\u68ee\u548c\u9c81\u5bbe\u83f2\u5c14\u5fb7\uff081978\u5e74\uff09\u7684[\u6ce2\u58eb\u987f\u623f\u4ef7](https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/housing\/housing.names)\u6570\u636e\u96c6\u8981\u5927\u5f97\u591a\uff0c\u4e5f\u6709\u66f4\u591a\u7684\u7279\u5f81\u3002\n\n\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u6570\u636e\u9884\u5904\u7406\u3001\u6a21\u578b\u8bbe\u8ba1\u548c\u8d85\u53c2\u6570\u9009\u62e9\u3002\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u4eb2\u8eab\u5b9e\u8df5\u7684\u65b9\u5f0f\uff0c\u4f60\u5c06\u83b7\u5f97\u4e00\u4e9b\u76f4\u89c9\u3002\u8fd9\u4e9b\u76f4\u89c9\u5c06\u6307\u5bfc\u4f60\u6570\u636e\u79d1\u5b66\u5bb6\u804c\u4e1a\u751f\u6daf\u3002\n\n## \u4e0b\u8f7d\u548c\u7f13\u5b58\u6570\u636e\u96c6\n\n\u5728\u6574\u672c\u4e66\u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u5404\u79cd\u4e0b\u8f7d\u7684\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6a21\u578b\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u51e0\u4e2a\u5b9e\u7528\u51fd\u6570\u6765\u65b9\u4fbf\u4e0b\u8f7d\u6570\u636e\u3002\u9996\u5148\uff0c\u6211\u4eec\u7ef4\u62a4\u5b57\u5178`DATA_HUB`\uff0c\u5176\u5c06\u6570\u636e\u96c6\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u6570\u636e\u96c6\u76f8\u5173\u7684\u4e8c\u5143\u7ec4\u4e0a\uff0c\u8fd9\u4e2a\u4e8c\u5143\u7ec4\u5305\u542b\u6570\u636e\u96c6\u7684url\u548c\u9a8c\u8bc1\u6587\u4ef6\u5b8c\u6574\u6027\u7684sha-1\u5bc6\u94a5\u3002\u6240\u6709\u8fd9\u6837\u7684\u6570\u636e\u96c6\u90fd\u6258\u7ba1\u5728\u5730\u5740\u4e3a`DATA_URL`\u7684\u7ad9\u70b9\u4e0a\u3002\n","7e8aae87":"[Discussions](https:\/\/discuss.d2l.ai\/t\/1824)\n","3fbeb4e3":"## Kaggle\n\n[Kaggle](https:\/\/www.kaggle.com)\u662f\u4e00\u4e2a\u73b0\u5728\u6d41\u884c\u7684\u4e3e\u529e\u673a\u5668\u5b66\u4e60\u6bd4\u8d5b\u7684\u5e73\u53f0\u3002\u6bcf\u573a\u6bd4\u8d5b\u90fd\u4ee5\u4e00\u4e2a\u6570\u636e\u96c6\u4e3a\u4e2d\u5fc3\u3002\u8bb8\u591a\u6bd4\u8d5b\u90fd\u662f\u7531\u5229\u76ca\u76f8\u5173\u8005\u8d5e\u52a9\u7684\uff0c\u4ed6\u4eec\u4e3a\u83b7\u80dc\u7684\u89e3\u51b3\u65b9\u6848\u63d0\u4f9b\u5956\u91d1\u3002\u8be5\u5e73\u53f0\u5e2e\u52a9\u7528\u6237\u901a\u8fc7\u8bba\u575b\u548c\u5171\u4eab\u4ee3\u7801\u8fdb\u884c\u4e92\u52a8\uff0c\u4fc3\u8fdb\u534f\u4f5c\u548c\u7ade\u4e89\u3002\u867d\u7136\u6392\u884c\u699c\u7684\u8ffd\u9010\u5f80\u5f80\u5931\u63a7\uff0c\u7814\u7a76\u4eba\u5458\u77ed\u89c6\u5730\u4e13\u6ce8\u4e8e\u9884\u5904\u7406\u6b65\u9aa4\uff0c\u800c\u4e0d\u662f\u8003\u8651\u57fa\u7840\u6027\u95ee\u9898\uff0c\u4f46\u4e00\u4e2a\u5ba2\u89c2\u7684\u5e73\u53f0\u6709\u5de8\u5927\u7684\u4ef7\u503c\u3002\u8be5\u5e73\u53f0\u4fc3\u8fdb\u4e86\u7ade\u4e89\u65b9\u6cd5\u4e4b\u95f4\u7684\u76f4\u63a5\u5b9a\u91cf\u6bd4\u8f83\uff0c\u4ee5\u53ca\u4ee3\u7801\u5171\u4eab\u3002\u8fd9\u4fbf\u4e8e\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4e86\u89e3\u54ea\u4e9b\u65b9\u6cd5\u8d77\u4f5c\u7528\uff0c\u54ea\u4e9b\u6ca1\u6709\u8d77\u4f5c\u7528\u3002\u5982\u679c\u4f60\u60f3\u53c2\u52a0Kaggle\u6bd4\u8d5b\uff0c\u4f60\u9996\u5148\u9700\u8981\u6ce8\u518c\u4e00\u4e2a\u8d26\u6237\uff08\u89c1 :numref:`fig_kaggle` \uff09\u3002\n\n![Kaggle\u7f51\u7ad9](..\/img\/kaggle.png)\n:width:`400px`\n:label:`fig_kaggle`\n\n\u5728\u623f\u4ef7\u9884\u6d4b\u6bd4\u8d5b\u9875\u9762\uff08\u5982 :numref:`fig_house_pricing` \u6240\u793a\uff09\uff0c\u4f60\u5728\"Data\"\u9009\u9879\u5361\u4e0b\u53ef\u4ee5\u627e\u5230\u6570\u636e\u96c6\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u7f51\u5740\u63d0\u4ea4\u9884\u6d4b\uff0c\u5e76\u67e5\u770b\u6392\u540d\uff1a\n\n>https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\n\n![\u623f\u4ef7\u9884\u6d4b\u6bd4\u8d5b\u9875\u9762](..\/img\/house-pricing.png)\n:width:`400px`\n:label:`fig_house_pricing`\n\n## \u8bbf\u95ee\u548c\u8bfb\u53d6\u6570\u636e\u96c6\n\n\u6ce8\u610f\uff0c\u7ade\u8d5b\u6570\u636e\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002\u6bcf\u6761\u8bb0\u5f55\u90fd\u5305\u62ec\u623f\u5c4b\u7684\u5c5e\u6027\u503c\u548c\u5c5e\u6027\uff0c\u5982\u8857\u9053\u7c7b\u578b\u3001\u65bd\u5de5\u5e74\u4efd\u3001\u5c4b\u9876\u7c7b\u578b\u3001\u5730\u4e0b\u5ba4\u72b6\u51b5\u7b49\u3002\u8fd9\u4e9b\u7279\u5f81\u7531\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7ec4\u6210\u3002\u4f8b\u5982\uff0c\u5efa\u7b51\u5e74\u4efd\u7531\u6574\u6570\u8868\u793a\uff0c\u5c4b\u9876\u7c7b\u578b\u7531\u79bb\u6563\u7c7b\u522b\u8868\u793a\uff0c\u5176\u4ed6\u7279\u5f81\u7531\u6d6e\u70b9\u6570\u8868\u793a\u3002\u8fd9\u5c31\u662f\u73b0\u5b9e\u8ba9\u4e8b\u60c5\u53d8\u5f97\u590d\u6742\u7684\u5730\u65b9\uff1a\u4f8b\u5982\uff0c\u4e00\u4e9b\u6570\u636e\u5b8c\u5168\u4e22\u5931\u4e86\uff0c\u7f3a\u5931\u503c\u88ab\u7b80\u5355\u5730\u6807\u8bb0\u4e3a\u201cNA\u201d\u3002\u6bcf\u5957\u623f\u5b50\u7684\u4ef7\u683c\u53ea\u51fa\u73b0\u5728\u8bad\u7ec3\u96c6\u4e2d\uff08\u6bd5\u7adf\u8fd9\u662f\u4e00\u573a\u6bd4\u8d5b\uff09\u3002\u6211\u4eec\u5c06\u5e0c\u671b\u5212\u5206\u8bad\u7ec3\u96c6\u4ee5\u521b\u5efa\u9a8c\u8bc1\u96c6\uff0c\u4f46\u662f\u5728\u5c06\u9884\u6d4b\u7ed3\u679c\u4e0a\u4f20\u5230Kaggle\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u80fd\u5728\u5b98\u65b9\u6d4b\u8bd5\u96c6\u4e2d\u8bc4\u4f30\u6211\u4eec\u7684\u6a21\u578b\u3002\u5728 :numref:`fig_house_pricing` \u4e2d\uff0c\"Data\"\u9009\u9879\u5361\u6709\u4e0b\u8f7d\u6570\u636e\u7684\u94fe\u63a5\u3002\n\n\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528`pandas`\u8bfb\u5165\u5e76\u5904\u7406\u6570\u636e\uff0c\u8fd9\u662f\u6211\u4eec\u5728 :numref:`sec_pandas` \u4e2d\u5f15\u5165\u7684\u3002\u56e0\u6b64\uff0c\u5728\u7ee7\u7eed\u64cd\u4f5c\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u786e\u4fdd\u5df2\u5b89\u88c5`pandas`\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5982\u679c\u4f60\u6b63\u5728\u7528Jupyter\u9605\u8bfb\u8be5\u4e66\uff0c\u4f60\u53ef\u4ee5\u5728\u4e0d\u79bb\u5f00\u7b14\u8bb0\u672c\u7684\u60c5\u51b5\u4e0b\u5b89\u88c5`pandas`\u3002\n","dc515179":"## \u6570\u636e\u9884\u5904\u7406\n\n\u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u6709\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u7c7b\u578b\u3002\u5728\u5f00\u59cb\u5efa\u6a21\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u3002\u8ba9\u6211\u4eec\u4ece\u6570\u5b57\u7279\u5f81\u5f00\u59cb\u3002\u9996\u5148\uff0c\u6211\u4eec\u5e94\u7528\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u5c06\u6240\u6709\u7f3a\u5931\u7684\u503c\u66ff\u6362\u4e3a\u76f8\u5e94\u7279\u5f81\u7684\u5e73\u5747\u503c\u3002\u7136\u540e\uff0c\u4e3a\u4e86\u5c06\u6240\u6709\u7279\u5f81\u653e\u5728\u4e00\u4e2a\u5171\u540c\u7684\u5c3a\u5ea6\u4e0a\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u7279\u5f81\u91cd\u65b0\u7f29\u653e\u5230\u96f6\u5747\u503c\u548c\u5355\u4f4d\u65b9\u5dee\u6765*\u6807\u51c6\u5316*\u6570\u636e\uff1a\n\n$$x \\leftarrow \\frac{x - \\mu}{\\sigma}.$$\n\n\u8981\u9a8c\u8bc1\u8fd9\u786e\u5b9e\u8f6c\u6362\u4e86\u6211\u4eec\u7684\u7279\u5f81\uff08\u53d8\u91cf\uff09\uff0c\u4f7f\u7279\u5f81\u5177\u6709\u96f6\u5747\u503c\u548c\u5355\u4f4d\u65b9\u5dee\uff0c\u5373 $E[\\frac{x-\\mu}{\\sigma}] = \\frac{\\mu - \\mu}{\\sigma} = 0$\u548c$E[(x-\\mu)^2] = (\\sigma^2 + \\mu^2) - 2\\mu^2+\\mu^2 = \\sigma^2$\u3002\u76f4\u89c2\u5730\u8bf4\uff0c\u6211\u4eec\u6807\u51c6\u5316\u6570\u636e\u6709\u4e24\u4e2a\u539f\u56e0\u3002\u9996\u5148\uff0c\u5b83\u65b9\u4fbf\u4f18\u5316\u3002\u5176\u6b21\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053\u54ea\u4e9b\u7279\u5f81\u662f\u76f8\u5173\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u60f3\u8ba9\u60e9\u7f5a\u5206\u914d\u7ed9\u4e00\u4e2a\u7279\u5f81\u7684\u7cfb\u6570\u6bd4\u5206\u914d\u7ed9\u5176\u4ed6\u4efb\u4f55\u7279\u5f81\u7684\u7cfb\u6570\u66f4\u5927\u3002\n","de4cbec4":"\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6bcf\u4e2a\u6837\u672c\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u7279\u5f81\u662fID\uff0c\u8fd9\u6709\u52a9\u4e8e\u6a21\u578b\u8bc6\u522b\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u3002\u867d\u7136\u8fd9\u5f88\u65b9\u4fbf\uff0c\u4f46\u5b83\u4e0d\u643a\u5e26\u4efb\u4f55\u7528\u4e8e\u9884\u6d4b\u7684\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u5728\u5c06\u6570\u636e\u63d0\u4f9b\u7ed9\u6a21\u578b\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u5176\u4ece\u6570\u636e\u96c6\u4e2d\u5220\u9664\u3002\n","3ff11eef":"\u4e0e\u524d\u9762\u7684\u90e8\u5206\u4e0d\u540c\uff0c\u6211\u4eec\u7684\u8bad\u7ec3\u51fd\u6570\u5c06\u4f9d\u8d56\u4e8eAdam\u4f18\u5316\u5668\uff08\u6211\u4eec\u5c06\u5728\u540e\u9762\u66f4\u8be6\u7ec6\u5730\u63cf\u8ff0\u5b83\uff09\u3002\u8fd9\u4e2a\u4f18\u5316\u5668\u7684\u4e3b\u8981\u5438\u5f15\u529b\u5728\u4e8e\uff0c\u5c3d\u7ba1\u5728\u63d0\u4f9b\u65e0\u9650\u8d44\u6e90\u8fdb\u884c\u8d85\u53c2\u6570\u4f18\u5316\u65b9\u9762\u6ca1\u6709\u505a\u5f97\u66f4\u597d\uff08\u6709\u65f6\u66f4\u5dee\uff09\uff0c\u4f46\u4eba\u4eec\u53d1\u73b0\u5b83\u5bf9\u521d\u59cb\u5b66\u4e60\u7387\u4e0d\u90a3\u4e48\u654f\u611f\u3002\n"}}