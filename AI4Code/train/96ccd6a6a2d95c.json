{"cell_type":{"725fbbb0":"code","97c298f8":"code","f6406cd4":"code","df7c0235":"code","8bccf328":"code","4078a7a1":"code","c56de7fc":"code","ff7b225d":"code","6a55acee":"code","5cb99596":"code","ba18b6b0":"code","92f310b4":"code","de0d22ff":"code","31148780":"code","bed58094":"code","72359f83":"markdown","964beda9":"markdown","09454c42":"markdown","b41bd48c":"markdown","49b2af0b":"markdown","b60d54dd":"markdown","3b45584c":"markdown","68fc659b":"markdown"},"source":{"725fbbb0":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\n\nimport plotly.express as px\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\nfrom sklearn.decomposition import PCA\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","97c298f8":"data = pd.read_csv('..\/input\/company-bankruptcy-prediction\/data.csv')","f6406cd4":"data","df7c0235":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop single-value column\n    df = df.drop('one if net income was negative for the last two year zero otherwise', axis=1)\n    \n    # Split df into X and y\n    y = df['Bankrupt?']\n    X = df.drop('Bankrupt?', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","8bccf328":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","4078a7a1":"X_train","c56de7fc":"y_train","ff7b225d":"original_models = {\n    \"                   Logistic Regression\": LogisticRegression(),\n    \"                   K-Nearest Neighbors\": KNeighborsClassifier(),\n    \"                         Decision Tree\": DecisionTreeClassifier(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVC(),\n    \"   Support Vector Machine (RBF Kernel)\": SVC(),\n    \"                        Neural Network\": MLPClassifier(),\n    \"                         Random Forest\": RandomForestClassifier(),\n    \"                     Gradient Boosting\": GradientBoostingClassifier()\n}\n\nfor name, model in original_models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","6a55acee":"original_results = []\n\nfor name, model in original_models.items():\n    result = model.score(X_test, y_test)\n    original_results.append(result)\n    print(name + \": {:.2f}%\".format(result * 100))","5cb99596":"n_components = 10\n\npca = PCA(n_components=n_components)\npca.fit(X_train)\n\nX_train_reduced = pd.DataFrame(pca.transform(X_train), index=X_train.index, columns=[\"PC\" + str(i) for i in range(1, n_components + 1)])\nX_test_reduced = pd.DataFrame(pca.transform(X_test), index=X_test.index, columns=[\"PC\" + str(i) for i in range(1, n_components + 1)])","ba18b6b0":"X_train_reduced","92f310b4":"fig = px.bar(\n    x=[\"PC\" + str(i) for i in range(1, n_components + 1)],\n    y=pca.explained_variance_ratio_,\n    labels={'x': \"Principal Component\", 'y': \"Variance Ratio\"},\n    color=pca.explained_variance_ratio_,\n    color_continuous_scale=[(0, 'lightblue'), (1, 'darkblue')],\n    title=\"Proportion of Variance in Principal Components\"\n)\n\nfig.show()","de0d22ff":"reduced_models = {\n    \"                   Logistic Regression\": LogisticRegression(),\n    \"                   K-Nearest Neighbors\": KNeighborsClassifier(),\n    \"                         Decision Tree\": DecisionTreeClassifier(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVC(),\n    \"   Support Vector Machine (RBF Kernel)\": SVC(),\n    \"                        Neural Network\": MLPClassifier(),\n    \"                         Random Forest\": RandomForestClassifier(),\n    \"                     Gradient Boosting\": GradientBoostingClassifier()\n}\n\nfor name, model in reduced_models.items():\n    model.fit(X_train_reduced, y_train)\n    print(name + \" trained.\")","31148780":"reduced_results = []\n\nfor name, model in reduced_models.items():\n    result = model.score(X_test_reduced, y_test)\n    reduced_results.append(result)\n    print(name + \": {:.2f}%\".format(result * 100))","bed58094":"fig = px.bar(\n    x=np.subtract(reduced_results, original_results),\n    y=original_models.keys(),\n    orientation='h',\n    labels={'x': \"Change in Performance\", 'y': \"Model\"},\n    color=np.subtract(reduced_results, original_results),\n    color_continuous_scale=[(0, 'red'), (1, 'blue')],\n    title=\"Change in Model Performance After Dimensionality Reduction\"\n)\n\nfig.show()","72359f83":"# Change in Performance After PCA","964beda9":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/ax3XvWO0Pk4","09454c42":"# Task for Today  \n\n***\n\n## Bankruptcy Prediction  \n\nGiven *financial client data*, let's try to predict whether a given client will go **bankrupt** or not.\n\nWe will use a variety of classification models to make our predictions.","b41bd48c":"# Dimensionality Reduction (PCA)","49b2af0b":"# Preprocessing","b60d54dd":"# Training (Original Data)","3b45584c":"# Training (Reduced Data)","68fc659b":"# Getting Started"}}