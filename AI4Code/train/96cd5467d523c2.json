{"cell_type":{"1c6909d0":"code","60c851eb":"code","7e2c58d7":"code","87855358":"code","26bfbd9c":"code","ac1b6be2":"code","f55645f0":"code","c7f6571c":"code","05fb7c4c":"code","377953b7":"code","72b2be0a":"code","af4bab37":"code","dd4d21e0":"code","34852629":"code","4395f4ed":"code","acb21329":"code","5a18ea4f":"code","141b8d58":"code","acd8ee39":"code","53573586":"code","40d4586a":"code","4593ae44":"code","f689489e":"code","26f33747":"code","e1876ded":"code","183db503":"code","7d1ce593":"code","612cd853":"code","21414aa6":"code","b0d41a72":"code","2f87ff86":"code","9cae8c35":"code","fbdeb441":"code","07f61c32":"code","62db35a5":"code","d47f0186":"markdown","473f490f":"markdown","7fbef833":"markdown","741c6e10":"markdown","5c8a0a3e":"markdown","3a399849":"markdown","724b4e65":"markdown","89545826":"markdown","998936a8":"markdown","694681fc":"markdown","3f097074":"markdown","f60f9e2d":"markdown","e07dfe4a":"markdown","9b0038da":"markdown","6da62dc8":"markdown","d6a14881":"markdown","8a514138":"markdown","250904d3":"markdown","73d34306":"markdown","2fc7a777":"markdown","bf0f9692":"markdown","c1402250":"markdown","67d0e8d2":"markdown","38e8420d":"markdown","a7421e09":"markdown","2802f93e":"markdown","a4eef189":"markdown","93096644":"markdown","b1766c40":"markdown","8c47d89a":"markdown"},"source":{"1c6909d0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport folium\nfrom folium import plugins\nimport geopandas as gpd\nimport branca\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom textwrap import wrap\nfrom matplotlib.lines import Line2D\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom scipy import stats\nfrom scipy.stats import ttest_ind\n\nplt.rcParams[\"font.family\"] = \"monospace\"\nplt.rcParams['figure.dpi'] = 150\nbackground_color='#F5F4EF'\n\n# Print colored text \n# https:\/\/stackoverflow.com\/questions\/287871\/how-to-print-colored-text-to-the-terminal\n# Includes other color options\n\nHEADER = '\\033[95m'\nOKBLUE = '\\033[94m'\nOKCYAN = '\\033[96m'\nOKGREEN = '\\033[92m'\nWARNING = '\\033[93m'\nFAIL = '\\033[91m'\nENDC = '\\033[0m'\nBOLD = '\\033[1m'\nUNDERLINE = '\\033[4m'\n\nclass color_font:\n    S = BOLD + OKBLUE +  UNDERLINE   #S = Start\n    E = ENDC #E = End\n    \nprint(color_font.S+\"Datasets & Libraries loaded\"+color_font.E)","60c851eb":"population = pd.read_csv('\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv')\nregions = pd.read_csv('\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv')\n\ndf = pd.read_csv('\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\ndf_21 = pd.read_csv('\/kaggle\/input\/olympic-games-2021-medals\/Tokyo 2021 dataset.csv')\ndf_21_full = pd.read_csv('\/kaggle\/input\/olympic-games-2021-medals\/Tokyo 2021 dataset.csv')\n\n\n# For geographic plotting\nurl = 'https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data'\ncountry_shapes = f'{url}\/world-countries.json'","7e2c58d7":"\nfig, ax = plt.subplots(figsize=(4, 5), facecolor=background_color)\n\ntemp = df_21_full[:15].sort_values(by='Total')\nmy_range=range(1,len(df_21_full[:15]['Team\/NOC'])+1)\n\n\nax.set_facecolor(background_color)\n\n#B73832\n\n\n\nplt.hlines(y=my_range, xmin=0, xmax=temp['Total'], color='gray')\nplt.plot(temp['Total'], my_range, \"o\",markersize=10, color='#244747')\nplt.plot(temp['Total'][2], my_range[10], \"o\",markersize=20,color='#B73832')\n\n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.tick_params(axis=u'both', which=u'both',length=0)\nax.set_xlabel(\"Total Medals\",fontfamily='monospace',loc='left',color='gray')\nax.set_axisbelow(True)\n\n\nfor s in ['top','right','bottom','left']:\n    ax.spines[s].set_visible(False)\n    \n\n\nax.text(-90,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(-90,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\n#ax.text(-100,Yend+1, 'Not Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#244747')\n\n\n\n# Add titles and axis names\nplt.yticks(my_range, temp['Team\/NOC'])\nplt.xlabel('')\n\n\nax.annotate(temp['Total'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)\n\n# Show the plot\nplt.show()","87855358":"def highlight(nation):\n    if nation['Team\/NOC'] == 'Japan':\n        return ['background-color: #f3f2f1']*6\n    else:\n        return ['background-color: white']*6\n\ndf_21_full[['Rank','Team\/NOC','Bronze Medal','Silver Medal','Gold Medal','Total']].iloc[:15].style.set_caption('Medals by Country: Summer Olympic Games sorted by Gold Medals [Top 15]')\\\n.bar(subset=['Gold Medal'], color='#f0c05a')\\\n.bar(subset=['Silver Medal'], color='Lightgray')\\\n.bar(subset=['Bronze Medal'], color='#a97142')\\\n.hide_index().apply(highlight, axis=1)","26bfbd9c":"# For geographic plotting\nglobal_polygons = gpd.read_file(country_shapes)\nglobal_polygons.to_file('global_polygons.geojson', driver = 'GeoJSON')\n\n#global_polygons.plot(figsize=(10,5)) we now have a map of the globe\n\n# Tabular\ndf = pd.merge(df,regions,left_on='NOC',right_on='NOC')\ndf = df.query('Season == \"Summer\"') # Only interested in Summer Olympics for this project","ac1b6be2":"#Replacing the country name with common values\ndf.replace('USA', \"United States of America\", inplace = True)\ndf.replace('Tanzania', \"United Republic of Tanzania\", inplace = True)\ndf.replace('Democratic Republic of Congo', \"Democratic Republic of the Congo\", inplace = True)\ndf.replace('Congo', \"Republic of the Congo\", inplace = True)\ndf.replace('Lao', \"Laos\", inplace = True)\ndf.replace('Syrian Arab Republic', \"Syria\", inplace = True)\ndf.replace('Serbia', \"Republic of Serbia\", inplace = True)\ndf.replace('Czechia', \"Czech Republic\", inplace = True)\ndf.replace('UAE', \"United Arab Emirates\", inplace = True)\ndf.replace('UK', \"United Kingdom\", inplace = True)\n\npopulation.replace('United States', \"United States of America\", inplace = True)\npopulation.replace('Czech Republic (Czechia)', \"Czech Republic\", inplace = True)\npopulation.replace('DR Congo', \"Democratic Republic of the Congo\", inplace = True)\npopulation.replace('Serbia', \"Republic of Serbia\", inplace = True)\npopulation.replace('Tanzania', \"United Republic of Tanzania\", inplace = True)\n\ndf_21_full.replace('Great Britain', \"United Kingdom\", inplace = True)\ndf_21_full.replace(\"People's Republic of China\", \"China\", inplace = True)\ndf_21_full.replace(\"ROC\", \"Russia\", inplace = True)\n","f55645f0":"# Function to map country to city\n\ndef host_country(col):\n    if col == \"Rio de Janeiro\":\n        return \"Brazil\"\n    elif col == \"London\":\n        return \"United Kingdom\"\n    elif col == \"Beijing\":\n        return  \"China\"\n    elif col == \"Athina\":\n        return  \"Greece\"\n    elif col == \"Sydney\" or col == \"Melbourne\":\n        return  \"Australia\"\n    elif col == \"Atlanta\" or col == \"Los Angeles\" or col == \"St. Louis\":\n        return  \"United States of America\"\n    elif col == \"Barcelona\":\n        return  \"Spain\"\n    elif col == \"Seoul\":\n        return  \"South Korea\"\n    elif col == \"Moskva\":\n        return  \"Russia\"\n    elif col == \"Montreal\":\n        return  \"Canada\"\n    elif col == \"Munich\" or col == \"Berlin\":\n        return  \"Germany\"\n    elif col == \"Mexico City\":\n        return  \"Mexico\"\n    elif col == \"Tokyo\":\n        return  \"Japan\"\n    elif col == \"Roma\":\n        return  \"Italy\"\n    elif col == \"Paris\":\n        return  \"France\"\n    elif col == \"Helsinki\":\n        return  \"Finland\"\n    elif col == \"Amsterdam\":\n        return  \"Netherlands\"\n    elif col == \"Antwerpen\":\n        return  \"Belgium\"\n    elif col == \"Stockholm\":\n        return  \"Sweden\"\n    else:\n        return \"Other\"\n\n\n# Applying this function\n\ndf['Host_Country'] = df['City'].apply(host_country)","c7f6571c":"df_new = df.groupby(['Year','Host_Country','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()\n\ndf_new['Is_Host'] = np.where(df_new['Host_Country'] == df_new['region'],1,0)\ndf_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']","05fb7c4c":"# Preparing to add 2021 data to our historic df\n\ndf_21_full_refined = df_21_full[['Team\/NOC', \"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"]]\ndf_21_full_refined['Total Medals'] = df_21_full_refined[[\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"]].sum(axis=1)\ndf_21_full_refined['Year'] = 2021\n\ndf_21_full_refined = df_21_full_refined.rename(columns={'Gold Medal':'Gold', 'Silver Medal':'Silver','Bronze Medal':'Bronze'})\n\ndf_21_full_refined['Is_Host'] = np.where(df_21_full_refined['Team\/NOC'] == 'Japan',1,0)\ndf_21_full_refined['Host_Country'] = 'Japan'\ndf_21_full_refined = df_21_full_refined.rename(columns={'Team\/NOC':'region'})\n\n# Adding 2021 data to historic\ndf_new = df_new.append(df_21_full_refined)\n\n# Removing Russia as many Olympic games were competed in as the Soviet Union, containing several modern day nations\n\ndf_new = df_new.query(\"region != 'Russia' | region != 'ROC'\")","377953b7":"# Function for lightening colors\n# https:\/\/www.python-graph-gallery.com\/\ndef adjust_lightness(color, amount=0.5):\n    import matplotlib.colors as mc\n    import colorsys\n    try:\n        c = mc.cnames[color]\n    except:\n        c = color\n    c = colorsys.rgb_to_hls(*mc.to_rgb(c))\n    return colorsys.hls_to_rgb(c[0], c[1] * amount, c[2])\n# Function for smoothing\ndef gaussian_smooth(x, y, grid, sd):\n    weights = np.transpose([stats.norm.pdf(grid, m, sd) for m in x])\n    weights = weights \/ weights.sum(0)\n    return (weights * y).sum(1)\n\n\n#Overall figure\nfig, ax = plt.subplots(3,1, figsize=(10, 6),dpi=250, facecolor=background_color)\n\n\ncolors = ['#a97142', 'lightgray', '#f0c05a']\n\nx_ticks = [1940,1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020]\n\nfor axes, country in enumerate(['Japan', 'Brazil', 'United Kingdom']):\n        # Define & transform data\n        stream = df_new.query(f\"region = ='{country}'\")[['Year','Gold', 'Silver','Bronze']]\n        y = [stream['Bronze'].values, stream['Silver'].values, stream['Gold'].values]\n        x = np.array(df_new.query(f\"region == '{country}'\")['Year'])\n\n        grid = np.linspace(x.min(), x.max(), num=250)\n        y_smoothed = [gaussian_smooth(x, y_, grid, 1) for y_ in y]\n        \n        # Build plot\n        ax[axes].stackplot(grid, y_smoothed, baseline=\"sym\", colors=colors)\n\n        line = np.array(y_smoothed).sum(0)\n        ax[axes].plot(grid, line \/ 2, lw=1.5, color=\"white\")\n        ax[axes].plot(grid, -line \/ 2, lw=1.5, color=\"white\")\n        \n        # Label\n        ax[axes].text(1938,0,f'{country}',ha='right',va='center',fontfamily='serif',fontweight='bold',color='#323232')\n        \n        # Axes tweaks & visual changes\n        ax[axes].set_ylim(-25, 25)\n        ax[axes].set_xlim(1940, 2021)\n        ax[axes].set_facecolor(background_color)\n        ax[axes].spines[:].set_visible(False)\n        ax[axes].yaxis.set_visible(False)\n        ax[axes].tick_params(axis=u'both', which=u'both',length=0)\n        for x_tick in x_ticks:\n                ax[axes].axvline(x_tick, color='#e0e0e0', ls=(0, (1, 3)),lw=1, zorder=10)\n\nfor axes in range(0,2):\n    ax[axes].xaxis.set_visible(False)\n\n# Hosting Olympics shaded areas\n\nax[2].tick_params(axis='x', labelsize=6, color='#4d4d4d')\nax[2].set_xticks(x_ticks)\n#ax[0].xaxis.tick_top()\n\nax[0].axvspan(2018,2022, facecolor='#244747',alpha=0.05)\nax[0].axvspan(1962,1966, facecolor='#244747',alpha=0.05)\n\nax[1].axvspan(2014,2018, facecolor='#244747',alpha=0.05)\n\nax[2].axvspan(2010,2014, facecolor='#244747',alpha=0.05)\nax[2].axvspan(1946,1950, facecolor='#244747',alpha=0.05)\n\n\n# Title & Subtitle\n\nfig.text(0,1,\"Previous Hosts and their Olympic performances\", fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nfig.text(0,0.95, 'The previous three hosts have all had successful games', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\nfig.text(0,0.9, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#244747',alpha=0.25)\n\n##\n\n# Additional Text annotations\n\nTEXTS = [\n    {\n        \"text\": 'Tokyo 2021\\nJapan had a successful\\ngames, winning more gold\\nmedals than the previous\\ntwo games combined',\n        \"ax\": 0,\n        \"x\": 0.8,\n        \"y\": 1,\n        \"color\": adjust_lightness(\"#323232\", 1.1)\n    },\n\n    {\n        \"text\": 'Rio 2016\\nNot only did Brazil win\\nmore golds than ever before,\\nbut these were the first\\nSouth American Olympics',\n        \"ax\": 1,\n        \"x\": 0.7,\n        \"y\": 1.02,\n        \"color\": adjust_lightness(\"#323232\", 1.1)\n    },\n    \n        {\n        \"text\": 'London 2012\\nThe hosts performed brilliantly,\\nwinning the most gold medals\\nfor decades, though this was \\nbeaten in the very next games',\n        \"ax\": 2,\n        \"x\": 0.6,\n        \"y\": 1.02,\n        \"color\": adjust_lightness(\"#323232\", 1.1)\n    }\n]\n\nfor text_box in TEXTS:\n    ax[text_box[\"ax\"]].text(\n        x = text_box[\"x\"],\n        y = text_box[\"y\"],\n        s = text_box[\"text\"], \n        ha=\"center\",\n        va=\"center\",\n        ma=\"left\",\n        fontsize=7.5,fontfamily='serif',\n        color=text_box[\"color\"],\n        bbox=dict(\n            boxstyle=\"round\", \n            facecolor='#244747',alpha=0.05,\n            edgecolor=text_box[\"color\"],\n            pad=0.6\n        ),\n        # This transform means we pass (0, 1) coordinates to locate\n        # the text block\n        transform=ax[text_box[\"ax\"]].transAxes,\n        zorder=999\n    )\n    # This ensures the text is on top of everything\n    fig.texts.append(ax[text_box[\"ax\"]].texts.pop())\n    \nfig.text(0.5, 0.02, \"\u2022 Visualization by Josh Swords \u2022 Inspired by C\u00e9dric Scherer \u2022\",color='#404040',fontsize=5,ha=\"center\")\n\nfig\n\n##\nplt.subplots_adjust(wspace=0, hspace=0)\n\nplt.show()\n    ","72b2be0a":"medals = df.groupby(['region','Medal'])['Medal'].count().unstack().fillna(0).astype(int)\n\nmedals['Total'] = medals['Bronze'] + medals['Silver'] + medals['Gold']\n\nmedals = medals[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)\n\nmedals.iloc[:15].style.set_caption('Medals by Country: Summer Olympic Games [Top 15]')\\\n.bar(subset=['Gold'], color='#f0c05a')\\\n.bar(subset=['Silver'], color='Lightgray')\\\n.bar(subset=['Bronze'], color='#a97142')\\\n#.background_gradient(subset=['Total'], cmap='BuGn')","af4bab37":"host_list = list(df_new.query(\"Is_Host == 1\")['Host_Country'].value_counts().index)\n\nmedals_temp = medals.reset_index()\nmedals_map = pd.merge(global_polygons, medals_temp, left_on='name',right_on='region')\nmedals_map['Hosted'] = np.where(medals_map['name'].isin(host_list),1,0)","dd4d21e0":"def rd2(x):\n    return round(x, 2)\n\nTemp = medals_map\n\nminimum, maximum = Temp[\"Total\"].quantile([0.05, 0.95]).apply(rd2)\nmean = round(Temp[\"Total\"].mean(), 2)\n\n\ncolormap = branca.colormap.LinearColormap(\n    colors=[\"#f2f0f7\", \"#cbc9e2\", \"#9e9ac8\", \"#756bb1\", \"#54278f\"],\n    index=Temp[\"Total\"].quantile([0.25, 0.5, 0.85, 0.95]),\n    vmin=minimum,\n    vmax=maximum,\n)\n\ncolormap.caption = \"Total medals\"\n\nfrom folium.plugins import Search\nfrom folium.plugins import HeatMap\n\n\nm = folium.Map(location=(50,0),zoom_start=3)\n\n\ndef style_function(x):\n    return {\n        \"fillColor\": colormap(x[\"properties\"][\"Total\"]),\n        \"color\": \"black\",\n        \"weight\": 2,\n        \"fillOpacity\": 0.5,\n    }\n\n\nMap_Layer = folium.GeoJson(\n    Temp,\n    name=\"Medals\",\n    style_function=style_function,\n    tooltip=folium.GeoJsonTooltip(\n        fields=[\"name\",\"Total\",\"Gold\",\"Silver\",\"Bronze\"], aliases=[\"Country\",\"Total Medals\",\"Gold\",\"Silver\",\"Bronze\"], localize=True\n    ),\n).add_to(m)\n\n\nplugins.Search(Map_Layer,position='topleft',\n                           search_zoom=5,placeholder=\"Search for a country\",weight=3,\n                           search_label='region',\n                           geom_type='Polygon').add_to(m)\n\n\nminimap = plugins.MiniMap()\nm.add_child(minimap)\n    \nfolium.LayerControl().add_to(m)\ncolormap.add_to(m)\n\nm","34852629":"fig, ax = plt.subplots(1,1, figsize=(10,4), facecolor=background_color)\n\nsns.scatterplot(data=df_new.query(\"Is_Host == 0\"), x='Year', y='Total Medals', s=45, ec='black', color='#244747',ax=ax)\nsns.scatterplot(data=df_new.query(\"Is_Host == 1\"), x='Year', y='Total Medals', s=75, ec='black', color='#B73832',ax=ax)\n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.tick_params(axis=u'both', which=u'both',length=0)\nax.set_ylabel(\"Total Medals\",fontfamily='monospace',loc='bottom',color='gray')\nax.set_xlabel(\"\")\n\nax.set_facecolor(background_color)\nax.set_axisbelow(True)\n\n\nfor s in ['top','right','bottom','left']:\n    ax.spines[s].set_visible(False)\n    \n\nax.text(Xstart,Yend+80, 'Olympic Medals by Country: Hosting always helps', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart,Yend+40, 'Host Medals', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\nax.text(Xstart,Yend+5, 'Others', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#244747')\n\nplt.show()\n","4395f4ed":"fig, ax = plt.subplots(1,1, figsize=(11, 5), facecolor=background_color)\n\n# top 20\ntop_list_ = df_new.groupby('region')['Total Medals'].mean().sort_values(ascending=False).reset_index()[:20].sort_values(by='Total Medals',ascending=True)\n\nplot = 1\nfor country in top_list_['region']:\n    mean = df_new[df_new['region'] == country].groupby('region')['Total Medals'].mean()\n    # historic scores\n    sns.scatterplot(data=df_new[df_new['region'] == country], y=plot, x='Total Medals',color='lightgray',s=50,ax=ax)\n    # mean score\n    sns.scatterplot(data=df_new[df_new['region'] == country], y=plot, x=mean,color='#244747',ec='black',linewidth=1,s=75,ax=ax)\n    # Hosting score\n    sns.scatterplot(data=(df_new[(df_new['region'] == country) & (df_new['Is_Host'] == 1)]), y=plot, x='Total Medals',color='#B73832',ec='black',linewidth=1,s=75,ax=ax)   \n    plot += 1\n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.set_yticks(top_list_.index+1)\nax.set_yticklabels(top_list_['region'][::-1], fontdict={'horizontalalignment': 'right'}, alpha=0.7)\nax.tick_params(axis=u'both', which=u'both',length=0)\nax.set_xlabel(\"Total Medals\",fontfamily='monospace',loc='left',color='gray')\nax.set_facecolor(background_color)\nax.hlines(y=top_list_.index+1, xmin=0, xmax=Xend, color='gray', alpha=0.5, linewidth=.3, linestyles='--')\nax.set_axisbelow(True)\n\n\nfor s in ['top','right','bottom','left']:\n    ax.spines[s].set_visible(False)\n    \n\n\nax.text(0,Yend+3.5, 'Olympic Medals by Country: Hosts through the years', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(0,Yend+2.1, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\nax.text(0,Yend+1, 'Average', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#244747')\n\n\nplt.show()","acb21329":"Temp = medals_map\n\ncolormap = branca.colormap.LinearColormap(\n    colors=[\"#f2f0f7\",  \"#B73832\"],\n    index=Temp[\"Hosted\"].quantile([0.05, 0.5]),\n    vmin=0,\n    vmax=1,\n)\n\ncolormap.caption = \"Hosted\"\n\nfrom folium.plugins import Search\nfrom folium.plugins import HeatMap\n\n\nm = folium.Map(location=(50,0),zoom_start=3)\n\n\ndef style_function(x):\n    return {\n        \"fillColor\": colormap(x[\"properties\"][\"Hosted\"]),\n        \"color\": \"black\",\n        \"weight\": 2,\n        \"fillOpacity\": 0.5,\n    }\n\n\nMap_Layer = folium.GeoJson(\n    Temp,\n    name=\"Hosted\",\n    style_function=style_function,\n    tooltip=folium.GeoJsonTooltip(\n        fields=[\"name\",\"Total\",\"Gold\",\"Silver\",\"Bronze\"], aliases=[\"Country\",\"Total Medals\",\"Gold\",\"Silver\",\"Bronze\"], localize=True\n    ),\n).add_to(m)\n\n\nplugins.Search(Map_Layer,position='topleft',\n                           search_zoom=5,placeholder=\"Search for a country\",weight=3,\n                           search_label='region',\n                           geom_type='Polygon').add_to(m)\n\n\nminimap = plugins.MiniMap()\nm.add_child(minimap)\n    \nfolium.LayerControl().add_to(m)\ncolormap.add_to(m)\n\nm","5a18ea4f":"sample = df_new.groupby(['region','Is_Host'])['Gold'].mean().unstack().dropna()\nsample = sample.rename(columns={0 : \"Not Hosting\", 1 : \"Hosting\"})\nsample = sample.reset_index().query(\"region == 'Japan' | region == 'Brazil' | region == 'United Kingdom' | region == 'China' | region == 'Greece' \").set_index('region')","141b8d58":"import matplotlib.lines as mlines\n\nlow_c = '#B73832'\nhigh_c = '#244747'\n\nleft_label = [str(c) + ', '+ str(round(y)) for c, y in zip(sample.index, sample['Not Hosting'])]\nright_label = [str(c) + ', '+ str(round(y)) for c, y in zip(sample.index, sample['Hosting'])]\nklass = [low_c if (y1-y2) < 0 else high_c for y1, y2 in zip(sample['Not Hosting'], sample['Hosting'])]\n\n# draw line\n# https:\/\/stackoverflow.com\/questions\/36470343\/how-to-draw-a-line-with-matplotlib\/36479941\ndef newline(p1, p2, color='black'):\n    ax = plt.gca()\n    l = mlines.Line2D([p1[0],p2[0]], [p1[1],p2[1]], color=low_c if p1[1]-p2[1] > 0 else high_c, marker='o', markersize=6)\n    ax.add_line(l)\n    return l\n\nfig, ax = plt.subplots(1,1,figsize=(6,5), dpi= 150, facecolor=background_color)\n\nax.set_facecolor(background_color)\nax.vlines(x=1, ymin=-5, ymax=100, color='black', alpha=0.7, linewidth=1, linestyles='dotted')\nax.vlines(x=3, ymin=-5, ymax=100, color='black', alpha=0.7, linewidth=1, linestyles='dotted')\n\n# Points\nax.scatter(y=sample['Not Hosting'], x=np.repeat(1, sample.shape[0]), s=75,linewidth=1.5, color='black', alpha=0.7)\nax.scatter(y=sample['Hosting'], x=np.repeat(3, sample.shape[0]), s=75, linewidth=1.5,color='black', alpha=0.7)\n\n# Line Segments and Annotation\nfor p1, p2, c in zip(sample['Not Hosting'], sample['Hosting'], sample.index):\n    newline([1,p1], [3,p2])\n    ax.text(1-0.1, p1, c + ', ' + str(round(p1,1)), horizontalalignment='right', verticalalignment='center', fontdict={'size':7})\n    ax.text(3+0.1, p2, c + ', ' + str(round(p2,1)), horizontalalignment='left', verticalalignment='center', fontdict={'size':7})\n\n\nax.text(0,87,\"Average Medals at Summer Olympic Games\", fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\n\nax.set(xlim=(0,4), ylim=(-10,sample.max().max()+5), ylabel='') #ylim=(), \nax.set_xticks([1,3])\nax.set_xticklabels([\"Not Hosting\", \"Hosting\"],fontsize=10)\n#ax.xaxis.tick_top()\n\nfor s in [\"top\",\"right\",\"left\",\"bottom\"]:\n    ax.spines[s].set_visible(False)\n    \nax.tick_params(axis='both',which='both',length=0,labelleft=False) \nplt.rcParams[\"font.family\"] = \"monospace\"\n\nplt.show()","acd8ee39":"fig, ax = plt.subplots(1,1, figsize=(8,3), facecolor=background_color)\n\nvalue1= sample['Not Hosting']\nvalue2=sample['Hosting']\n\n\nordered_df = sample.sort_values(by='Hosting', ascending=True)\nmy_range=range(1,len(ordered_df.index)+1)\n \n\nplt.hlines(y=my_range, xmin=ordered_df['Not Hosting'], xmax=ordered_df['Hosting'], color='lightgray', alpha=0.4,zorder=1)\nplt.scatter(ordered_df['Not Hosting'], my_range, color='#244747', alpha=1, ec='black',label='Not Hosting',s=150)\nplt.scatter(ordered_df['Hosting'], my_range, color='#B73832', alpha=1 , ec='black', label='Hosting',s=150)\n\n\nfor i in range(0,5):\n    ax.annotate(ordered_df.index[i], \n                   xy=((ordered_df[[\"Not Hosting\", \"Hosting\"]].max(axis=1)[i]+3),i+1), \n                   va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=8, color='black',rotation=0)\n\n\nax.axes.get_yaxis().set_ticks([])\n\n\nfor s in ['top','left', 'bottom', 'right']:\n    ax.spines[s].set_visible(False)\n    \nax.set_facecolor(background_color)    \nax.set_xlabel(\"Total Medals\",fontfamily='monospace',loc='left',color='gray')\nax.tick_params(axis='both', which='both',left=False, bottom=False,labelbottom=True) \nax.set_yticklabels([])\n    \nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\n\nax.text(Xstart,Yend+1.5, 'Average Olympic Medals by Country: Bet on the host', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart,Yend+0.9, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\nax.text(Xstart,Yend+0.4, 'Not Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#244747')\n\n\nplt.show()","53573586":"temp = df_new.query(\"region == 'United States of America'\")\n\n\nfig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=background_color)\n\ncolor = ['#B73832' if i == 1 else '#244747' for i in temp['Is_Host']]\n\nax.bar(temp['Year'], temp['Total Medals'],width=3, color=color, ec='black')\nax.set_facecolor(background_color)\nax.grid(which='both', axis='y', zorder=5, color='gray', linestyle=':', dashes=(1,5))\nax.set_axisbelow(True)\n\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.text(Xstart,Yend+50, 'Total Olympic Medals for the United States of America', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart,Yend+25, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\n\nplt.show()","40d4586a":"temp = df_new.query(\"region == 'United Kingdom'\")\n\n\nfig, ax = plt.subplots(1, 1, figsize=(18, 5), dpi=150, facecolor=background_color)\n\ncolor = ['#B73832' if i == 1 else '#244747' for i in temp['Is_Host']]\n\nax.bar(temp['Year'], temp['Total Medals'],width=3, color=color, ec='black')\nax.set_facecolor(background_color)\nax.grid(which='both', axis='y', zorder=5, color='gray', linestyle=':', dashes=(1,5))\nax.set_axisbelow(True)\n\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.text(Xstart,Yend+50, 'Total Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart,Yend+25, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\n\nplt.show()","4593ae44":"temp = df_new.query(\"region == 'United Kingdom' & Year > 1945\")\n\nfig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=background_color)\n\nax.set_facecolor(background_color)\n\ncolor = [\"#a97142\", \"lightgray\", '#f0c05a']\n\n\n# Host years\nax.axvspan(1949,1945.5, facecolor='lightgray',alpha=0.7)\nax.axvspan(2013,2009.5, facecolor='lightgray',alpha=0.7)\n\nmedals_list = ['Bronze', 'Silver', 'Gold']\nwidth = 0.75\nfor i, medal in enumerate(np.array(medals_list)):\n    ax.bar(temp['Year']+(width*(i-2)), temp[medal], width, color=color[i], label=medal, ec='black')\n    \nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n    \n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.text(Xstart+3,Yend+10, 'Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart+3,Yend+5, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')\n\n\nax.set_xlim(Xstart+3, Xend)\n\nax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))\n\nax.set_axisbelow(True)\n\nplt.show()","f689489e":"stack_temp = df_new.query(\"region == 'United Kingdom' & Year > 1945\")[['Year','Bronze','Silver','Gold']].set_index('Year')\nstack_temp = (stack_temp.T\/stack_temp.sum(axis=1)).cumsum().T\n\nfig, ax = plt.subplots(1,1, figsize=(18,5), facecolor=background_color)\n\n# Host years\nax.axvspan(1950,1946, facecolor='lightgray',alpha=0.7)\nax.axvspan(2014,2010, facecolor='lightgray',alpha=0.7)\n\n\ncolor = [\"#a97142\", \"lightgray\", '#f0c05a']\nmedals_list = ['Bronze', 'Silver', 'Gold']\n\nfor i, medal in enumerate(medals_list[::-1]):\n    sentims = stack_temp[medal]\n    ax.bar(sentims.index, sentims, color=color[::-1][i], label=medal, width=2.25, ec='black')\n\nax.set_facecolor(background_color)\n\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n    \n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.set_xlim(Xstart+3, Xend)\nax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))\nax.set_axisbelow(True)\nax.get_yaxis().set_visible(False)\n\nax.text(Xstart+3,Yend+0.13, 'Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart+3,Yend+0.055, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')\n\n\nplt.show()","26f33747":"temp = df_new.query(\"region == 'Japan'\")\n\n\nfig, ax = plt.subplots(1, 1, figsize=(18, 5), dpi=150, facecolor=background_color)\n\ncolor = ['#B73832' if i == 1 else '#244747' for i in temp['Is_Host']]\n\nax.bar(temp['Year'], temp['Total Medals'],width=3, color=color, ec='black')\nax.set_facecolor(background_color)\nax.grid(which='both', axis='y', zorder=5, color='gray', linestyle=':', dashes=(1,5))\nax.set_axisbelow(True)\n\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.text(Xstart,Yend+12, 'Total Olympic Medals for Japan', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart,Yend+5, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\n\nplt.show()","e1876ded":"stack_temp = df_new.query(\"region == 'Japan' & Year > 1945\")[['Year','Bronze','Silver','Gold']].set_index('Year')\nstack_temp = (stack_temp.T\/stack_temp.sum(axis=1)).cumsum().T\n\nfig, ax = plt.subplots(1,1, figsize=(18,5), facecolor=background_color)\n\n# Host years\nax.axvspan(2023,2019, facecolor='lightgray',alpha=0.7)\nax.axvspan(1966,1962, facecolor='lightgray',alpha=0.7)\n\n\ncolor = [\"#a97142\", \"lightgray\", '#f0c05a']\nmedals_list = ['Bronze', 'Silver', 'Gold']\n\nfor i, medal in enumerate(medals_list[::-1]):\n    sentims = stack_temp[medal]\n    ax.bar(sentims.index, sentims, color=color[::-1][i], label=medal, width=2.25, ec='black')\n\nax.set_facecolor(background_color)\n\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n    \n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.set_xlim(Xstart+3, Xend)\n\nax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))\n\nax.set_axisbelow(True)\nax.get_yaxis().set_visible(False)\n\nax.text(Xstart+3,Yend+0.13, 'Olympic Medals for Japan', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart+3,Yend+0.055, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')\n\nplt.show()","183db503":"temp = df_new.query(\"region == 'Japan' & Year > 1945\")\n\nfig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=background_color)\n\nax.set_facecolor(background_color)\n\ncolor = [\"#a97142\", \"lightgray\", '#f0c05a']\n\n\n# Host years\nax.axvspan(2022,2018.5, facecolor='lightgray',alpha=0.7)\nax.axvspan(1965,1961.5, facecolor='lightgray',alpha=0.7)\n\nmedals_list = ['Bronze', 'Silver', 'Gold']\nwidth = 0.75\nfor i, medal in enumerate(np.array(medals_list)):\n    ax.bar(temp['Year']+(width*(i-2)), temp[medal], width, color=color[i], ec='black')\n    \n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.text(Xstart+3,Yend+7, 'Olympic Medals for Japan', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart+3,Yend+3, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')\n\nax.set_xlim(Xstart+3, Xend)\nax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))\nax.set_axisbelow(True)\n\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n\nplt.show()","7d1ce593":"fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=background_color)\n\nax.set_facecolor(background_color)\n\ncolor = [\"#a97142\", \"lightgray\", '#f0c05a']\n\n# Host years\nax.axvspan(2023,2019, facecolor='lightgray',alpha=0.7)\nax.axvspan(1966,1962, facecolor='lightgray',alpha=0.7)\n\n\nfor i, medal in enumerate(medals_list):\n    temp = df_new.query(\"region == 'Japan' & Year > 1945\").groupby(['Year'])['Gold','Silver','Bronze'].sum().cumsum(axis=1)[medal]\n    ax.bar(temp.index, temp, color=color[i],width=1.5,ec='black')\n    \n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.text(Xstart+2,Yend+10, 'Olympic Medals for Japan: Hosts enjoy Gold rush', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart+2,Yend+4, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')\n\nax.set_xlim(Xstart+2, Xend)\nax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))\nax.set_axisbelow(True)\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\n    \nplt.show()","612cd853":"host_list = list(df_new.query(\"Is_Host == 1\")['Host_Country'].value_counts().index)\n\nNot_hosting = df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 0\")[['Bronze','Silver','Gold']].mean().reset_index()\nhosting = df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 1\")[['Bronze','Silver','Gold']].mean().reset_index()\n\nradar = pd.merge(hosting, Not_hosting, on='index')\nradar.columns = ['Medal','Hosting', 'Not Hosting']\nradar = radar.set_index('Medal').T.reset_index()\nradar = radar[['index','Gold','Silver','Bronze']]","21414aa6":"# Inpsired by Tuo Wang, https:\/\/tuowang.rbind.io\/\n# https:\/\/www.python-graph-gallery.com\/\n# Host or Not Host\nComparison = radar[\"index\"].values.tolist()\n\nmedals = ['Gold', 'Silver','Bronze']\nlength = len(medals)\n\ncolors = [\"#B73832\", \"#244747\"]\n\n# The angles at which the values of the numeric variables are placed\nANGLES = [n \/ length * 2 * np.pi for n in range(length)]\nANGLES += ANGLES[:1]\n \n# Angle values going from 0 to 2*pi\nHANGLES = np.linspace(0, 2 * np.pi)\n\n# Surrounding circles\nH0 = np.ones(len(HANGLES)) * 20\nH1 = np.ones(len(HANGLES)) * 40\nH2 = np.ones(len(HANGLES)) * 60\n\n# Plot\nfig = plt.figure(figsize=(6, 6), facecolor=background_color)\nax = fig.add_subplot(1,1,1, polar=True)\nax.set_facecolor(background_color)\n \n# rotate plot\nax.set_theta_offset(np.pi \/ 2.6)\nax.set_theta_direction(-1)\n\n# Radius of plot\nax.set_ylim(-0.1, radar[['Gold','Silver','Bronze']].max().max()+5)\n\n# Radar\nfor idx, host in enumerate(Comparison):\n    values = radar.iloc[idx].drop(\"index\").values.tolist()\n    values += values[:1]\n    ax.plot(ANGLES, values, c=colors[idx], linewidth=1.5, label=host)\n    ax.scatter(ANGLES, values, s=160, c=colors[idx],ec='white',zorder=10)\n\n# edit lines & fill between\nax.plot(HANGLES, H0, ls=(0, (3, 1)),lw=1, c='#b3b3b3')\nax.plot(HANGLES, H1, ls=(0, (5, 3)),lw=1, c='#b3b3b3')\nax.plot(HANGLES, H2, ls=(0, (6, 4)),lw=1, c='#b3b3b3')\nax.fill(HANGLES, H2, '#f2efe8')\n\n# Tidy up & labels\nax.set_xticks(ANGLES[:-1])\nax.set_xticklabels(medals, size=10, color='#323232')\nax.set_yticks([])\nax.yaxis.grid(False)\nax.xaxis.grid(False)\nax.spines[\"start\"].set_color(\"none\")\nax.spines[\"polar\"].set_color(\"none\")\n\n# Title\nfig.text(0,0.98, 'Average Olympic Medals:\\nIs this difference significant?', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nfig.text(0,0.93, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\nfig.text(0,0.89, 'Not Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#244747')\n\nplt.show()","b0d41a72":"# Wrote this for 4 variables\n\nfig = plt.figure(figsize=(18,10), facecolor=background_color)\n\ncolors = ['#a97142', 'lightgray', '#f0c05a', '#244747']\n\nnum = 0\nvariables = ['Bronze', 'Silver', 'Gold', 'Total Medals']\n\nplots = [(0,0), (0,1), (0,2), (1,0)]\n\ndata = df_new\n\nfor item in variables:\n    \n    if plots[num] == plots[-1]:\n        colspan=3\n    else: \n        colspan=1\n        \n    plt.subplot2grid((2,3), (plots[num]), colspan=colspan)\n    \n    ax = sns.kdeplot(data=data, x=item,color=colors[num],shade=True,  alpha=0.9, ec='black', cut=5)\n    ax.set_facecolor(background_color)\n    ax.tick_params(axis='y', left=False)\n    ax.get_yaxis().set_visible(False)\n    ax.set_axisbelow(True)\n    ax.set_xlabel(item)\n    ax.grid(which='major', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))\n    for s in [\"top\",\"right\",\"left\"]:\n        ax.spines[s].set_visible(False)\n    \n    plt.xticks(list(np.arange(0,data[item].max()+25,25)))\n        \n    num +=1 \n    \nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nfig.text(0.03,1.05, 'Overall Distribution of Medals: Positively Skewed', fontsize=25,fontweight='bold',fontfamily='serif',color='#323232')\n\n    \nplt.tight_layout()\nplt.show()","2f87ff86":"host_list = list(df_new.query(\"Is_Host == 1\")['Host_Country'].value_counts().index)\n\ndf_new['Total_Medals_NaturalLog'] = np.log(df_new['Total Medals'])\n\nNot_hosting_samples = df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 0\")['Total_Medals_NaturalLog'].count()\nhosting_samples = df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 1\")['Total_Medals_NaturalLog'].count()\n\nNot_hosting_mean = df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 0\")['Total_Medals_NaturalLog'].mean()\nhosting_mean = df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 1\")['Total_Medals_NaturalLog'].mean()\n\nNot_hosting_std = df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 0\")['Total_Medals_NaturalLog'].std()\nhosting_std = df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 1\")['Total_Medals_NaturalLog'].std()","9cae8c35":"print(color_font.S+\"Key Statistics\"+color_font.E)\nprint(\"Mean Natural Log of Total Medals when Not Hosting:\\n\",Not_hosting_mean)\nprint(\"Mean Natural Log of Total Medals when Hosting:\\n\",hosting_mean,\"\\n\")\n\n\nNot_hosting_std_error = Not_hosting_std\/np.sqrt(Not_hosting_samples)\nprint(\"Standard Error of Natural Log of Total Medals when Not Hosting:\\n\",Not_hosting_std_error)\n\nhosting_std_error = hosting_std\/np.sqrt(hosting_samples)\nprint(\"Standard Error of Natural Log of Total Medals when Not Hosting:\\n\",hosting_std_error)","fbdeb441":"top = (hosting_mean-Not_hosting_mean)\n\nbott1 = Not_hosting_std**2\/Not_hosting_samples\n\nbott2 = hosting_std**2\/hosting_samples\n\nprint(color_font.S+\"Standard Errors between means\"+color_font.E)\nprint(top\/(np.sqrt(bott1 + bott2)))","07f61c32":"fig, ax = plt.subplots(1,1, figsize=(18,6), facecolor=background_color)\nax.set_facecolor(background_color)\nsns.kdeplot(data=df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 1\"), x='Total_Medals_NaturalLog',shade=True,color='#B73832',alpha=0.9, ax=ax)\nsns.kdeplot(data=df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 0\"), x='Total_Medals_NaturalLog', shade=True, color='#244747',alpha=0.7, ax=ax)\n\nax.axvline(color='lightgray',x=Not_hosting_mean+(3*Not_hosting_std_error))\nax.axvline(color='lightgray',x=Not_hosting_mean-(3*Not_hosting_std_error))\nax.axvspan(Not_hosting_mean-(3*Not_hosting_std_error), Not_hosting_mean+(3*Not_hosting_std_error), alpha=0.5, color='#f3f2f1')\n\n#ax.axvline(x=Not_hosting_mean)\n\n#ax.axvline(x=hosting_mean)\nax.axvline(color='lightgray',x=hosting_mean+(3*hosting_std_error))\nax.axvline(color='lightgray',x=hosting_mean-(3*hosting_std_error))\nax.axvspan(hosting_mean-(3*hosting_std_error), hosting_mean+(3*hosting_std_error), alpha=0.5, color='#f3f2f1')\n\nfor s in ['top','left', 'bottom', 'right']:\n    ax.spines[s].set_visible(False)\n    \nax.set_xlabel(\"Natural Log of Total Medals\",fontfamily='monospace',loc='left',color='gray')\nax.get_yaxis().set_visible(False)\nax.tick_params(axis = 'both', which = 'major', labelsize = 10)\n\nax.tick_params(axis='both', which='both',left=False, bottom=False,labelbottom=True) \n\n\nXstart, Xend = ax.get_xlim()\nYstart, Yend = ax.get_ylim()\n\nax.text(Xstart,Yend, 'Comparing Means when Hosting & Not Hosting', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')\nax.text(Xstart,Yend-0.02, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')\n\n\n\nplt.show()\n","62db35a5":"from scipy.stats import ttest_ind\n\nprint(color_font.S+\"T-Test\"+color_font.E)\n# compare samples\nstat, p = ttest_ind(df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 0\")['Total_Medals_NaturalLog'], df_new[df_new['region'].isin(host_list)].query(\"Is_Host == 1\")['Total_Medals_NaturalLog'])\nprint('Statistics=%.3f, p=%.3f' % (stat, p))\n# interpret\nalpha = 0.05\nif p > alpha:\n    print('Same distributions (fail to reject H0)')\nelse:\n    print('Different distributions (reject H0)')","d47f0186":"Ceeating a new dataframe containing host nation data","473f490f":"**What does this show us?**\n\nThe UK, when hosting in 2012, had a great performance, with the highest number of gold medals ever. This was then surpassed in Rio 2016 though.\n\n**Proportions**\n\nLet's move away from totals, and towards proportions","7fbef833":"**What does this show us?**\n\nAgain, it appears that hosting does help performance.\n\nHowever, the UK was on an upward trend during the 2000's, so perhaps this would have continued anyway\n\n**What about Gold medals?**\n\nI've focussed on Total Medals so far, as I beleive all medals are impressive. \n\nHowever, we can view each separately...","741c6e10":"# **Does hosting the Olympics improve performance in the medals table?**\n\n# **Work in Progress**\n\n**Project Outline**\n\nWhilst watching the Olympics this year, I was struck by how well Japan were doing.\n\nAs they were the host nation of this Olympics, it got me thinking: **Does hosting the Olympics improve performance in the medals table?**\n\n\nTo answer this, I will perform an **exploratory data analysis** along with some **statistical tests**.\n\nI'll use past Olympic data, as well as data from the Tokyo Olympics.\n\n\n**Data Visualisation**\n\nFor this project the focus will be on visualising the data. Exploring the data. Learning something. Hopefully this will encourage other Kagglers to think of interesting questions, explore the data. and share their results.\n\n\nI'll be making extensive use of **maptlotlib** & **seaborn**, as well as **folium** for interactive geographic plotting.\n\n**References & Inspiration**\n\nThe incredible data visualisations of Cedric Scherer:\n\nhttps:\/\/www.cedricscherer.com\/\n\nThe stunning data visualisations of Tuo Wang:\n\nhttps:\/\/tuowang.rbind.io\/\n\nPython-Gallery:\n\nhttps:\/\/www.python-graph-gallery.com\/\n\n\nInspiration for the time-series plotting came from a cool notebook by Subin An:\n\nhttps:\/\/www.kaggle.com\/subinium\/all-you-need-is-time-series-visualization-20\n\n\n\n","5c8a0a3e":"**What does this show us?**\n\nAs mentioned previously, hosting does appear to have a positive effect on total medals, but this looks to be true of gold medals too.\n\n**What about Japan?**\n\nAs I mentioned at the beginning, I was impressed by Japan at this olympics. Did they perform better than usual?","3a399849":"**What does this show us?**\n\nThis shows what we've seen throughout this analysis.\n\nUsing only countries who have hosted an olympic games, what is their average medal tally when Hosting & Not Hosting. It is clear that Hosting provides the higher tally, but contries host very infrequently, therefore, we must conduct statistical tests to be sure of this intuition","724b4e65":"**What does this show us?**\n\nJapan, hosts for 2020 (2021), had a fantastic games in terms of gold medals; winning the highest proportion of golds for over 40 years.","89545826":"Hosting the olympics is an incredible honor for a country to have.\n\nThe previous three Olympics were hosted by: Japan, Brazil, and the United Kingdom.\n\nHere's an overview of their Olympic histories, with the years they hosted highlighted","998936a8":"# **Hosting The Olympics**","694681fc":"# **Tokyo 2021**\n\nBefore delving in to my investigation, let's take a look at how the medals table finished at Tokyo 2020 (2021).\n\nWe see familiar nations at the top: The USA, China, the United Kingdom, and notably, **Japan**.","3f097074":"**Overall: Summer Olympics**\n\nNow I'll widen my view. \n\nHere's how the leaderboard stacks up when we consider all Summer Olympic games.","f60f9e2d":"**What does this show us?**\n\nDepsite consistently performing well, it does look as though the USA performs even better when they are the tournament hosts.\n\nWhat about other nations. Let's try the UK","e07dfe4a":"Let us now view the distribution of medals on a map.\n\nThe darker the color, the more medals a country has won","9b0038da":"**What does this show us?**\n\nThis is a fantastic plot. I've focussed only on nations that have hosted the olympic games.\n\nWe gain so much information from just one visual. So, what do we see:\n\n* Historic performance (grey dots)\n\n* Average performance (blue dots)\n\n* Performance when hosting (red dots)\n\nIt seems clear that when a nation hosts the olympics, they perform better!\n\n\n**Let's view the host countries geographically**","6da62dc8":"**Does performance vary when hosting & not hosting?**\n\nLet's take a sample from the new dataframe and plot the average medal totals for each nation, both when they've not hosted the olympics, and when they have.","d6a14881":"**What does this show us?**\n\nThis visual is very interesting.\n\nWe see that all but one nations **drastically imrproved their average total medal tally when they hosted an olympic games.**\n\nCanada appear to be an anomaly - they performed much worse when they hosted.","8a514138":"**What does this show us?**\n\nWe note that the medals are not distributed normally. They are positively skewed. **To mitigate against this, I will take the natural log of the total medals.**","250904d3":"Next, I want an overview of how each country performs; when they host the olympics, when they don't, and on average.\n\nFirst, let's look at all nations over time","73d34306":"Based on the tests above, it appears that we can reject the null hypothesis that hosting has no impact on performance.\n\n# **Work in Progress**","2fc7a777":"**What does this show us?**\n\nAbove I have plotted the distributions of the natural log of the mean total medals host nations have acheived when they host, and when they do not host.\n\nThe grey boxes reprseent **3 standard errors above & below the mean values**. We note that these areas do not overlap. This suggests that the liklihood that hosting does not imprive performance is extremely small. In fact, it is overwhelmingly small.","bf0f9692":"Let's take a more detailed view at the medal tables, breaking down the medals into bronze, silver, and gold.","c1402250":"**What does this show us?**\n\nNot only is the proportion of gold medals higher than usual, so too is the absolute number. This was also the case when Japan hosted the games back in the 60's, too. We can view this more clearly below","67d0e8d2":"**Host Nations**\n\nSo we know that several nations seem to consistently perform well at the Olympic games. But that's not what this project is seeking to confirm.\n\nIt's now time to shift focus to those who have hosted the games.","38e8420d":"**What does this show us?**\n\nWe see that host nations seem to attain higher medal totals than other nations.\n\nHowever, we must view this with caution, as it's often the wealthy nations that host the games, therefore they are expected to do better anyway.","a7421e09":"**Medal Performance Over Time for Host Nations**\n\nWe've looked at static averages, but now let's view the games as they happened.\n\nFirst, we can view the USA's medal tally over time. I'll highlight the games that they hosted.","2802f93e":"This means that it is **incredibly** unlikely that the two means are from the same populations.","a4eef189":"**Is this difference enough to declare that the two means are from different distributions?**","93096644":"# **Statistical Testing**\n\nWe have seen through our visual journey that Hosting thw Olympics does seem to lead to an increased performance, but we will now do some statistical tests to find out whether or not these differences could be considered significant or not.","b1766c40":"Interestingly, Japan's total medal count is not too extraordinary compared to previous olympics. Though it is still impressive, in Japan's last 5 olympic appearances it would rank 4th.\n\nWhat about gold medals? This is, afterall, how the medal table it often calculated","8c47d89a":"# **Next Steps**\n\n**Data Engineering**\n\nBefore I can analyse the data over the years, I first need to do some data engineering.\n\nI'll first create a polygon for each country which I will be able to use later when I plot a geographic visual - showing which countries have hosted the Olympics, and where medals tend to go.\n\nI'll also join several datasets together and do some feature engineering to enable the joins to work correctly."}}