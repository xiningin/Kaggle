{"cell_type":{"ef4e59c8":"code","1bb34135":"code","6c521443":"code","9ae7e0cf":"code","9ad38b14":"code","8b11143d":"code","f575b5a9":"code","83e0a0af":"code","e224836e":"code","50d6481b":"code","a3597249":"code","c2ee683c":"code","ab7941c9":"code","5226912d":"code","074a8335":"code","348660f2":"code","bd38cc85":"code","d773f65b":"code","0d60f71e":"code","35f51d3c":"code","f5d76e35":"code","5985999e":"code","a946f732":"code","7fbf9ddd":"code","ce35d6ae":"code","e2f83338":"code","132900a4":"code","f758a77b":"code","694c6a5d":"code","e0e1b2ba":"code","2b0d4e16":"code","ccb195af":"code","d1379ddf":"code","f6d9a700":"code","a1c3fd14":"code","73ea6745":"code","928d4224":"code","c8edbeda":"code","b77cdf3a":"code","8bd4a0ed":"code","05805452":"code","49370642":"markdown","1886a224":"markdown","007ddd59":"markdown","71bbb529":"markdown","b92b6c06":"markdown","25fc37a5":"markdown","0e45c001":"markdown","4d343368":"markdown","4940d11f":"markdown","7b5f5a38":"markdown","717702e3":"markdown","3f14b9c6":"markdown","3bd6ec5b":"markdown","38d2d6ac":"markdown","f605af25":"markdown"},"source":{"ef4e59c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1bb34135":"import datetime\nimport matplotlib as mlt\nimport matplotlib.pyplot as plt\nimport os\nimport plotly.express as px \n\nmlt.rcParams['figure.figsize']=(10,8)\nmlt.rcParams['axes.grid']=False","6c521443":"df=pd.read_csv('https:\/\/raw.githubusercontent.com\/srivatsan88\/YouTubeLI\/master\/dataset\/nyc_energy_consumption.csv')","9ae7e0cf":"df.head()","9ad38b14":"df.tail()","8b11143d":"df.info()","f575b5a9":"df['timeStamp']=pd.to_datetime(df['timeStamp'])","83e0a0af":"df.info()","e224836e":"fig=px.line(df,x='timeStamp',y='demand',title='Energy demand vs time')\n\nfig.update_xaxes(\n    rangeslider_visible= True,\n    rangeselector=dict(\n                        buttons = list([\n                        dict(count = 1,label = '1m',step='month',stepmode = \"backward\"),\n                        dict(count = 2,label = '6m',step='month',stepmode = \"backward\"),\n                        dict(count = 3,label = '6mYTD',step='month',stepmode = \"todate\"),\n                        dict(count = 4,label = '2y',step='year',stepmode = \"backward\"),\n                        dict(count = 5,label = '3y',step='year',stepmode = \"backward\"),\n                        dict(step= 'all')\n                            ])        \n                        )\n                   )\nfig.show()","50d6481b":"ny_df=df.set_index('timeStamp')","a3597249":"ny_df.plot(subplots=True)","c2ee683c":"len(df)","ab7941c9":"df.isnull().any()","5226912d":"df.isnull().count()","074a8335":"df['demand']=df['demand'].fillna(method='ffill')\ndf['temp']=df['temp'].fillna(method='ffill')\ndf['precip']=df['precip'].fillna(method='ffill')","348660f2":"df.isnull().any()","bd38cc85":"ny_df.resample('M').mean().plot(subplots=True)","d773f65b":"ny_df_monthly=ny_df.resample('M').mean()","0d60f71e":"!pip install pmdarima","35f51d3c":"import pmdarima as pm\n#by default auto arima uses AIC,the lower aic the model is good","f5d76e35":"model=pm.auto_arima(ny_df_monthly['demand'],m=12,seasonal=True,start_p=0,start_q=0,max_order=4,test='adf',\n                   error_action='ignore',suppress_warnings=True,stepwise=True,trace=True)","5985999e":"model.summary()","a946f732":"train = ny_df_monthly[(ny_df_monthly.index.get_level_values(0)>='2012-01-31') & (ny_df_monthly.index.get_level_values(0)<='2017-04-30')]\ntest = ny_df_monthly[(ny_df_monthly.index.get_level_values(0)>'2017-04-30')]","7fbf9ddd":"train.shape","ce35d6ae":"test.shape","e2f83338":"test","132900a4":"model.fit(train['demand'])","f758a77b":"forecast=model.predict(n_periods=4,return_conf_int=True)\n#return_conf_int is True means it will print the confidance interval too\n#in forecasting model we always takes the confidence interval into the account","694c6a5d":"forecast","e0e1b2ba":"forecast_df=pd.DataFrame(forecast[0],index=test.index,columns=['Prediction'])","2b0d4e16":"forecast_df","ccb195af":"pd.concat([ny_df_monthly['demand'],forecast_df],axis=1).plot()","d1379ddf":"forecast1=model.predict(n_periods=8,return_conf_int=True)","f6d9a700":"forecast1","a1c3fd14":"fore_range=pd.date_range(start='2017-05-31',periods=8,freq='M')","73ea6745":"fore_df=pd.DataFrame(forecast1[0],index=fore_range,columns=['prediction'])","928d4224":"fore_df","c8edbeda":"pd.concat([ny_df_monthly['demand'],fore_df],axis=1).plot()","b77cdf3a":"lower=pd.Series(forecast1[1][:,0],index=fore_range)\nupper=pd.Series(forecast1[1][:,1],index=fore_range)","8bd4a0ed":"plt.plot(ny_df_monthly['demand'])\nplt.plot(fore_df,color='red')\nplt.fill_between(fore_range,lower,upper,alpha=1.5)","05805452":"model.plot_diagnostics()","49370642":"# Confidence interval","1886a224":"# ARIMA- auto regressive integrated moving average","007ddd59":"# Missing value","71bbb529":"**The first four is the predictions and the next four records are min and max confidence interval values**","b92b6c06":"# Train test split","25fc37a5":"**This is the energy consumption dataset, we have to predict the demand and the rest are features**","0e45c001":"**From the above info,it is known that the timestamp is of object type, we have to convert to of date type**","4d343368":"**As we can see, that many of the records have null values**","4940d11f":"**The plot shows the prediction captures the demand pattern**","7b5f5a38":"**We use forward fill for the missing values, as the data is hourly,it doesn't impact worse**","717702e3":"**Now we don't have any null values**","3f14b9c6":"**As the temperature increases, the demand also increases**","3bd6ec5b":"**We will see there is some seasonality in the plot**","38d2d6ac":"**It is a kind of grid search, like auto ml for time series forecasting**","f605af25":"**auto_arima performs test with various parameters and gives the better parameter**"}}