{"cell_type":{"744e3123":"code","9bc984be":"code","a14eca76":"code","ef71de5a":"code","f4f0458f":"code","dede2183":"code","1f09c3d8":"code","aa2c27dc":"code","f6838fb8":"code","d22aad72":"code","1eda6f3e":"code","d08595f9":"code","63775221":"code","714d76c1":"code","7b7cb2a4":"code","ce7e9891":"code","ca909936":"code","96521260":"code","ea507f28":"code","8cd2c70c":"code","c1c4f4ef":"code","aefd4b38":"code","ab935e08":"code","fdfa959b":"code","fea48e84":"code","be50527d":"markdown","dd7effd9":"markdown","be6e722c":"markdown","eff7bee8":"markdown","e5025866":"markdown","263d1c0f":"markdown","bff0e540":"markdown","cf23feb6":"markdown","a740de99":"markdown","c44d9a86":"markdown","a04a83bf":"markdown","b4f4ac89":"markdown","606d7a54":"markdown","ff0cb8e3":"markdown","c4eed49d":"markdown","87e65158":"markdown","2e6a98cf":"markdown"},"source":{"744e3123":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt # Visualisation Tool\nimport seaborn as sns # Visualisation Tool\n\nimport sys\nimport math\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n# Display Available Line\/Cell Magics\n%lsmagic","9bc984be":"cities = pd.read_csv('..\/input\/cities.csv')\ncities.head()\nprint(len(cities))","a14eca76":"# Show Scatter Plot of Original Data\n\nplt.figure(figsize=(15, 10))\nplt.scatter(cities.X, cities.Y, s=1)\nplt.scatter(cities.iloc[0: 1, 1], cities.iloc[0: 1, 2], s=10, c=\"red\")\nplt.grid(False)\nplt.show()\n\n# Reference: https:\/\/www.kaggle.com\/seshadrikolluri\/understanding-the-problem-and-some-sample-paths","ef71de5a":"# Reference: https:\/\/www.kaggle.com\/seshadrikolluri\/understanding-the-problem-and-some-sample-paths\n\n# To improve the performance, instead of checking whether each member is a prime, \n# we first a generate a list where each element tells whether the number indicated \n# by the position is a prime or not. \n\n# using sieve of eratosthenes\ndef sieve_of_eratosthenes(n):\n    primes = [True for i in range(n+1)] # Start assuming all numbers are primes\n    primes[0] = False # 0 is not a prime\n    primes[1] = False # 1 is not a prime\n    for i in range(2,int(np.sqrt(n)) + 1):\n        if primes[i]:\n            k = 2\n            while i*k <= n:\n                primes[i*k] = False\n                k += 1\n    return(primes)\nprime_cities = sieve_of_eratosthenes(max(cities.CityId))","f4f0458f":"sub1 = cities.copy()\nsub2 = cities.copy()","dede2183":"from collections import MutableMapping\nclass MapBase(MutableMapping):\n    \"\"\"Our own abstract base class that includes a nonpublic _Item class.\"\"\"\n\n    # ------------------------------- nested _Item class -------------------------------\n    class _Item:\n        \"\"\"Lightweight composite to store key-value pairs as map items.\"\"\"\n        __slots__ = '_key', '_value'\n\n        def __init__(self, k, v):\n            self._key = k\n            self._value = v\n\n        def __eq__(self, other):\n            return self._key == other._key  # compare items based on their keys\n\n        def __ne__(self, other):\n            return not (self == other)  # opposite of __eq__\n\n        def __lt__(self, other):\n            return self._key < other._key  # compare items based on their keys","1f09c3d8":"class SortedTableMap(MapBase):\n    \"\"\"Map implementation using a sorted table.\"\"\"\n\n    # ----------------------------- nonpublic behaviors -----------------------------\n    def _find_index(self, k, low, high):\n        \"\"\"Return index of the leftmost item with key greater than or equal to k.\n\n        Return high + 1 if no such item qualifies.\n\n        That is, j will be returned such that:\n           all items of slice table[low:j] have key < k\n           all items of slice table[j:high+1] have key >= k\n        \"\"\"\n        if high < low:\n            return high + 1  # no element qualifies\n        else:\n            mid = (low + high) \/\/ 2\n            if k == self._table[mid]._key:\n                return mid  # found exact match\n            elif k < self._table[mid]._key:\n                return self._find_index(k, low, mid - 1)  # Note: may return mid\n            else:\n                return self._find_index(k, mid + 1, high)  # answer is right of mid\n\n    # ----------------------------- public behaviors -----------------------------\n    def __init__(self):\n        \"\"\"Create an empty map.\"\"\"\n        self._table = []\n\n    def __len__(self):\n        \"\"\"Return number of items in the map.\"\"\"\n        return len(self._table)\n\n    def __getitem__(self, k):\n        \"\"\"Return value associated with key k (raise KeyError if not found).\"\"\"\n        j = self._find_index(k, 0, len(self._table) - 1)\n        if j == len(self._table) or self._table[j]._key != k:\n            raise KeyError('Key Error: ' + repr(k))\n        return self._table[j]._value\n\n    def __setitem__(self, k, v):\n        \"\"\"Assign value v to key k, overwriting existing value if present.\"\"\"\n        j = self._find_index(k, 0, len(self._table) - 1)\n        if j < len(self._table) and self._table[j]._key == k:\n            self._table[j]._value = v  # reassign value\n        else:\n            self._table.insert(j, self._Item(k, v))  # adds new item\n\n    def __delitem__(self, k):\n        \"\"\"Remove item associated with key k (raise KeyError if not found).\"\"\"\n        j = self._find_index(k, 0, len(self._table) - 1)\n        if j == len(self._table) or self._table[j]._key != k:\n            raise KeyError('Key Error: ' + repr(k))\n        self._table.pop(j)  # delete item\n\n    def __iter__(self):\n        \"\"\"Generate keys of the map ordered from minimum to maximum.\"\"\"\n        for item in self._table:\n            yield item._key\n\n    def __reversed__(self):\n        \"\"\"Generate keys of the map ordered from maximum to minimum.\"\"\"\n        for item in reversed(self._table):\n            yield item._key\n\n    def find_min(self):\n        \"\"\"Return (key,value) pair with minimum key (or None if empty).\"\"\"\n        if len(self._table) > 0:\n            return (self._table[0]._key, self._table[0]._value)\n        else:\n            return None\n\n    def find_max(self):\n        \"\"\"Return (key,value) pair with maximum key (or None if empty).\"\"\"\n        if len(self._table) > 0:\n            return (self._table[-1]._key, self._table[-1]._value)\n        else:\n            return None\n\n    def find_le(self, k):\n        \"\"\"Return (key,value) pair with greatest key less than or equal to k.\n\n        Return None if there does not exist such a key.\n        \"\"\"\n        j = self._find_index(k, 0, len(self._table) - 1)  # j's key >= k\n        if j < len(self._table) and self._table[j]._key == k:\n            return (self._table[j]._key, self._table[j]._value)  # exact match\n        elif j > 0:\n            return (self._table[j - 1]._key, self._table[j - 1]._value)  # Note use of j-1\n        else:\n            return None\n\n    def find_ge(self, k):\n        \"\"\"Return (key,value) pair with least key greater than or equal to k.\n\n        Return None if there does not exist such a key.\n        \"\"\"\n        j = self._find_index(k, 0, len(self._table) - 1)  # j's key >= k\n        if j < len(self._table):\n            return (self._table[j]._key, self._table[j]._value)\n        else:\n            return None\n\n    def find_lt(self, k):\n        \"\"\"Return (key,value) pair with greatest key strictly less than k.\n\n        Return None if there does not exist such a key.\n        \"\"\"\n        j = self._find_index(k, 0, len(self._table) - 1)  # j's key >= k\n        if j > 0:\n            return (self._table[j - 1]._key, self._table[j - 1]._value)  # Note use of j-1\n        else:\n            return None\n\n    def find_gt(self, k):\n        \"\"\"Return (key,value) pair with least key strictly greater than k.\n\n        Return None if there does not exist such a key.\n        \"\"\"\n        j = self._find_index(k, 0, len(self._table) - 1)  # j's key >= k\n        if j < len(self._table) and self._table[j]._key == k:\n            j += 1  # advanced past match\n        if j < len(self._table):\n            return (self._table[j]._key, self._table[j]._value)\n        else:\n            return None\n\n    def find_range(self, start, stop):\n        \"\"\"Iterate all (key,value) pairs such that start <= key < stop.\n\n        If start is None, iteration begins with minimum key of map.\n        If stop is None, iteration continues through the maximum key of map.\n        \"\"\"\n        if start is None:\n            j = 0\n        else:\n            j = self._find_index(start, 0, len(self._table) - 1)  # find first result\n        while j < len(self._table) and (stop is None or self._table[j]._key < stop):\n            yield (self._table[j]._key, self._table[j]._value)\n            j += 1\n","aa2c27dc":"# Use Merge Sort Algorithm to create sorted cities path\nsorted_cities_path = list(sub1.iloc[1:,].sort_values(['X','Y'], kind='mergesort')['CityId'])\nsorted_cities_path = [0] + sorted_cities_path + [0]\n\n# Record Time Taken\n%timeit sorted_cities_path = list(sub1.iloc[1:,].sort_values(['X','Y'], kind='mergesort')['CityId'])","f6838fb8":"# Altered function from: https:\/\/www.kaggle.com\/seshadrikolluri\/understanding-the-problem-and-some-sample-paths\n# Calculate euclidean distance and store in a Sorted Map\ndef calculate_distance(dfcity,path):\n    prev_city = path[0]\n    distance = 0\n    distances = SortedTableMap()\n    step_num = 1\n    for city_num in path[1:]:\n        next_city = city_num\n        distance = \\\n            np.sqrt(pow((dfcity.X[city_num] - dfcity.X[prev_city]),2) + pow((dfcity.Y[city_num] - dfcity.Y[prev_city]),2)) * \\\n            (1+ 0.1*((step_num % 10 == 0)*int(not(prime_cities[prev_city]))))\n        distances.__setitem__(city_num, distance)\n        prev_city = next_city\n        step_num = step_num + 1\n    return distances","d22aad72":"distances_sub1 = calculate_distance(sub1, sorted_cities_path)","1eda6f3e":"# Time function creating Map with calculated distances\n%timeit distances_sub1 = calculate_distance(sub1, sorted_cities_path)","d08595f9":"# Calculate Total Distance from Map\ndef total_distance(distances):\n    total_distance = 0\n    for i in distances:\n        total_distance += distances[i]\n    return total_distance\nprint('Total distance is '+ \"{:,}\".format(total_distance(distances_sub1)))","63775221":"df_path = pd.merge_ordered(pd.DataFrame({'CityId':sorted_cities_path}),sub1,on=['CityId'])\nfig, ax = plt.subplots(figsize=(20,20))\nax.plot(df_path.iloc[0:100,]['X'], df_path.iloc[0:100,]['Y'],marker = 'o')\nfor i, txt in enumerate(df_path.iloc[0:100,]['CityId']):\n    ax.annotate(txt, (df_path.iloc[0:100,]['X'][i], df_path.iloc[0:100,]['Y'][i]),size = 15)","714d76c1":"# Time function calculating total distance\n%timeit total_distance(distances_sub1)","7b7cb2a4":"class Tree:\n    \"\"\"Abstract base class representing a tree structure.\"\"\"\n\n    # ------------------------------- nested Position class -------------------------------\n    class Position:\n        \"\"\"An abstraction representing the location of a single element within a tree.\n\n        Note that two position instaces may represent the same inherent location in a tree.\n        Therefore, users should always rely on syntax 'p == q' rather than 'p is q' when testing\n        equivalence of positions.\n        \"\"\"\n\n        def element(self):\n            \"\"\"Return the element stored at this Position.\"\"\"\n            raise NotImplementedError('must be implemented by subclass')\n\n        def __eq__(self, other):\n            \"\"\"Return True if other Position represents the same location.\"\"\"\n            raise NotImplementedError('must be implemented by subclass')\n\n        def __ne__(self, other):\n            \"\"\"Return True if other does not represent the same location.\"\"\"\n            return not (self == other)  # opposite of __eq__\n\n    # ---------- abstract methods that concrete subclass must support ----------\n    def root(self):\n        \"\"\"Return Position representing the tree's root (or None if empty).\"\"\"\n        raise NotImplementedError('must be implemented by subclass')\n\n    def parent(self, p):\n        \"\"\"Return Position representing p's parent (or None if p is root).\"\"\"\n        raise NotImplementedError('must be implemented by subclass')\n\n    def num_children(self, p):\n        \"\"\"Return the number of children that Position p has.\"\"\"\n        raise NotImplementedError('must be implemented by subclass')\n\n    def children(self, p):\n        \"\"\"Generate an iteration of Positions representing p's children.\"\"\"\n        raise NotImplementedError('must be implemented by subclass')\n\n    def __len__(self):\n        \"\"\"Return the total number of elements in the tree.\"\"\"\n        raise NotImplementedError('must be implemented by subclass')\n\n    # ---------- concrete methods implemented in this class ----------\n    def is_root(self, p):\n        \"\"\"Return True if Position p represents the root of the tree.\"\"\"\n        return self.root() == p\n\n    def is_leaf(self, p):\n        \"\"\"Return True if Position p does not have any children.\"\"\"\n        return self.num_children(p) == 0\n\n    def is_empty(self):\n        \"\"\"Return True if the tree is empty.\"\"\"\n        return len(self) == 0\n\n    def depth(self, p):\n        \"\"\"Return the number of levels separating Position p from the root.\"\"\"\n        if self.is_root(p):\n            return 0\n        else:\n            return 1 + self.depth(self.parent(p))\n\n    def _height1(self):  # works, but O(n^2) worst-case time\n        \"\"\"Return the height of the tree.\"\"\"\n        return max(self.depth(p) for p in self.positions() if self.is_leaf(p))\n\n    def _height2(self, p):  # time is linear in size of subtree\n        \"\"\"Return the height of the subtree rooted at Position p.\"\"\"\n        if self.is_leaf(p):\n            return 0\n        else:\n            return 1 + max(self._height2(c) for c in self.children(p))\n\n    def height(self, p=None):\n        \"\"\"Return the height of the subtree rooted at Position p.\n\n        If p is None, return the height of the entire tree.\n        \"\"\"\n        if p is None:\n            p = self.root()\n        return self._height2(p)  # start _height2 recursion\n\n    def __iter__(self):\n        \"\"\"Generate an iteration of the tree's elements.\"\"\"\n        for p in self.positions():  # use same order as positions()\n            yield p.element()  # but yield each element\n\n    def positions(self):\n        \"\"\"Generate an iteration of the tree's positions.\"\"\"\n        return self.preorder()  # return entire preorder iteration\n\n    def preorder(self):\n        \"\"\"Generate a preorder iteration of positions in the tree.\"\"\"\n        if not self.is_empty():\n            for p in self._subtree_preorder(self.root()):  # start recursion\n                yield p\n\n    def _subtree_preorder(self, p):\n        \"\"\"Generate a preorder iteration of positions in subtree rooted at p.\"\"\"\n        yield p  # visit p before its subtrees\n        for c in self.children(p):  # for each child c\n            for other in self._subtree_preorder(c):  # do preorder of c's subtree\n                yield other  # yielding each to our caller\n\n    def postorder(self):\n        \"\"\"Generate a postorder iteration of positions in the tree.\"\"\"\n        if not self.is_empty():\n            for p in self._subtree_postorder(self.root()):  # start recursion\n                yield p\n\n    def _subtree_postorder(self, p):\n        \"\"\"Generate a postorder iteration of positions in subtree rooted at p.\"\"\"\n        for c in self.children(p):  # for each child c\n            for other in self._subtree_postorder(c):  # do postorder of c's subtree\n                yield other  # yielding each to our caller\n        yield p  # visit p after its subtrees\n\n    def breadthfirst(self):\n        \"\"\"Generate a breadth-first iteration of the positions of the tree.\"\"\"\n        if not self.is_empty():\n            fringe = LinkedQueue()  # known positions not yet yielded\n            fringe.enqueue(self.root())  # starting with the root\n            while not fringe.is_empty():\n                p = fringe.dequeue()  # remove from front of the queue\n                yield p  # report this position\n                for c in self.children(p):\n                    fringe.enqueue(c)  # add children to back of queue\n","ce7e9891":"class BinaryTree(Tree):\n    \"\"\"Abstract base class representing a binary tree structure.\"\"\"\n\n    # --------------------- additional abstract methods ---------------------\n    def left(self, p):\n        \"\"\"Return a Position representing p's left child.\n\n        Return None if p does not have a left child.\n        \"\"\"\n        raise NotImplementedError('must be implemented by subclass')\n\n    def right(self, p):\n        \"\"\"Return a Position representing p's right child.\n\n        Return None if p does not have a right child.\n        \"\"\"\n        raise NotImplementedError('must be implemented by subclass')\n\n    # ---------- concrete methods implemented in this class ----------\n    def sibling(self, p):\n        \"\"\"Return a Position representing p's sibling (or None if no sibling).\"\"\"\n        parent = self.parent(p)\n        if parent is None:  # p must be the root\n            return None  # root has no sibling\n        else:\n            if p == self.left(parent):\n                return self.right(parent)  # possibly None\n            else:\n                return self.left(parent)  # possibly None\n\n    def children(self, p):\n        \"\"\"Generate an iteration of Positions representing p's children.\"\"\"\n        if self.left(p) is not None:\n            yield self.left(p)\n        if self.right(p) is not None:\n            yield self.right(p)\n\n    def inorder(self):\n        \"\"\"Generate an inorder iteration of positions in the tree.\"\"\"\n        if not self.is_empty():\n            for p in self._subtree_inorder(self.root()):\n                yield p\n\n    def _subtree_inorder(self, p):\n        \"\"\"Generate an inorder iteration of positions in subtree rooted at p.\"\"\"\n        if self.left(p) is not None:  # if left child exists, traverse its subtree\n            for other in self._subtree_inorder(self.left(p)):\n                yield other\n        yield p  # visit p between its subtrees\n        if self.right(p) is not None:  # if right child exists, traverse its subtree\n            for other in self._subtree_inorder(self.right(p)):\n                yield other\n\n    # override inherited version to make inorder the default\n    def positions(self):\n        \"\"\"Generate an iteration of the tree's positions.\"\"\"\n        return self.inorder()  # make inorder the default","ca909936":"class LinkedBinaryTree(BinaryTree):\n    \"\"\"Linked representation of a binary tree structure.\"\"\"\n\n    # -------------------------- nested _Node class --------------------------\n    class _Node:\n        \"\"\"Lightweight, nonpublic class for storing a node.\"\"\"\n        __slots__ = '_element', '_parent', '_left', '_right'  # streamline memory usage\n\n        def __init__(self, element, parent=None, left=None, right=None):\n            self._element = element\n            self._parent = parent\n            self._left = left\n            self._right = right\n\n    # -------------------------- nested Position class --------------------------\n    class Position(BinaryTree.Position):\n        \"\"\"An abstraction representing the location of a single element.\"\"\"\n\n        def __init__(self, container, node):\n            \"\"\"Constructor should not be invoked by user.\"\"\"\n            self._container = container\n            self._node = node\n\n        def element(self):\n            \"\"\"Return the element stored at this Position.\"\"\"\n            return self._node._element\n\n        def __eq__(self, other):\n            \"\"\"Return True if other is a Position representing the same location.\"\"\"\n            return type(other) is type(self) and other._node is self._node\n\n    # ------------------------------- utility methods -------------------------------\n    def _validate(self, p):\n        \"\"\"Return associated node, if position is valid.\"\"\"\n        if not isinstance(p, self.Position):\n            raise TypeError('p must be proper Position type')\n        if p._container is not self:\n            raise ValueError('p does not belong to this container')\n        if p._node._parent is p._node:  # convention for deprecated nodes\n            raise ValueError('p is no longer valid')\n        return p._node\n\n    def _make_position(self, node):\n        \"\"\"Return Position instance for given node (or None if no node).\"\"\"\n        return self.Position(self, node) if node is not None else None\n\n    # -------------------------- binary tree constructor --------------------------\n    def __init__(self):\n        \"\"\"Create an initially empty binary tree.\"\"\"\n        self._root = None\n        self._size = 0\n\n    # -------------------------- public accessors --------------------------\n    def __len__(self):\n        \"\"\"Return the total number of elements in the tree.\"\"\"\n        return self._size\n\n    def root(self):\n        \"\"\"Return the root Position of the tree (or None if tree is empty).\"\"\"\n        return self._make_position(self._root)\n\n    def parent(self, p):\n        \"\"\"Return the Position of p's parent (or None if p is root).\"\"\"\n        node = self._validate(p)\n        return self._make_position(node._parent)\n\n    def left(self, p):\n        \"\"\"Return the Position of p's left child (or None if no left child).\"\"\"\n        node = self._validate(p)\n        return self._make_position(node._left)\n\n    def right(self, p):\n        \"\"\"Return the Position of p's right child (or None if no right child).\"\"\"\n        node = self._validate(p)\n        return self._make_position(node._right)\n\n    def num_children(self, p):\n        \"\"\"Return the number of children of Position p.\"\"\"\n        node = self._validate(p)\n        count = 0\n        if node._left is not None:  # left child exists\n            count += 1\n        if node._right is not None:  # right child exists\n            count += 1\n        return count\n\n    # -------------------------- nonpublic mutators --------------------------\n    def _add_root(self, e):\n        \"\"\"Place element e at the root of an empty tree and return new Position.\n\n        Raise ValueError if tree nonempty.\n        \"\"\"\n        if self._root is not None:\n            raise ValueError('Root exists')\n        self._size = 1\n        self._root = self._Node(e)\n        return self._make_position(self._root)\n\n    def _add_left(self, p, e):\n        \"\"\"Create a new left child for Position p, storing element e.\n\n        Return the Position of new node.\n        Raise ValueError if Position p is invalid or p already has a left child.\n        \"\"\"\n        node = self._validate(p)\n        if node._left is not None:\n            raise ValueError('Left child exists')\n        self._size += 1\n        node._left = self._Node(e, node)  # node is its parent\n        return self._make_position(node._left)\n\n    def _add_right(self, p, e):\n        \"\"\"Create a new right child for Position p, storing element e.\n\n        Return the Position of new node.\n        Raise ValueError if Position p is invalid or p already has a right child.\n        \"\"\"\n        node = self._validate(p)\n        if node._right is not None:\n            raise ValueError('Right child exists')\n        self._size += 1\n        node._right = self._Node(e, node)  # node is its parent\n        return self._make_position(node._right)\n\n    def _replace(self, p, e):\n        \"\"\"Replace the element at position p with e, and return old element.\"\"\"\n        node = self._validate(p)\n        old = node._element\n        node._element = e\n        return old\n\n    def _delete(self, p):\n        \"\"\"Delete the node at Position p, and replace it with its child, if any.\n\n        Return the element that had been stored at Position p.\n        Raise ValueError if Position p is invalid or p has two children.\n        \"\"\"\n        node = self._validate(p)\n        if self.num_children(p) == 2:\n            raise ValueError('Position has two children')\n        child = node._left if node._left else node._right  # might be None\n        if child is not None:\n            child._parent = node._parent  # child's grandparent becomes parent\n        if node is self._root:\n            self._root = child  # child becomes root\n        else:\n            parent = node._parent\n            if node is parent._left:\n                parent._left = child\n            else:\n                parent._right = child\n        self._size -= 1\n        node._parent = node  # convention for deprecated node\n        return node._element\n\n    def _attach(self, p, t1, t2):\n        \"\"\"Attach trees t1 and t2, respectively, as the left and right subtrees of the external Position p.\n\n        As a side effect, set t1 and t2 to empty.\n        Raise TypeError if trees t1 and t2 do not match type of this tree.\n        Raise ValueError if Position p is invalid or not external.\n        \"\"\"\n        node = self._validate(p)\n        if not self.is_leaf(p):\n            raise ValueError('position must be leaf')\n        if not type(self) is type(t1) is type(t2):  # all 3 trees must be same type\n            raise TypeError('Tree types must match')\n        self._size += len(t1) + len(t2)\n        if not t1.is_empty():  # attached t1 as left subtree of node\n            t1._root._parent = node\n            node._left = t1._root\n            t1._root = None  # set t1 instance to empty\n            t1._size = 0\n        if not t2.is_empty():  # attached t2 as right subtree of node\n            t2._root._parent = node\n            node._right = t2._root\n            t2._root = None  # set t2 instance to empty\n            t2._size = 0\n","96521260":"class TreeMap(LinkedBinaryTree, MapBase):\n    \"\"\"Sorted map implementation using a binary search tree.\"\"\"\n\n    # ---------------------------- override Position class ----------------------------\n    class Position(LinkedBinaryTree.Position):\n        def key(self):\n            \"\"\"Return key of map's key-value pair.\"\"\"\n            return self.element()._key\n\n        def value(self):\n            \"\"\"Return value of map's key-value pair.\"\"\"\n            return self.element()._value\n\n    # ------------------------------- nonpublic utilities -------------------------------\n    def _subtree_search(self, p, k):\n        \"\"\"Return Position of p's subtree having key k, or last node searched.\"\"\"\n        if k == p.key():  # found match\n            return p\n        elif k < p.key():  # search left subtree\n            if self.left(p) is not None:\n                return self._subtree_search(self.left(p), k)\n        else:  # search right subtree\n            if self.right(p) is not None:\n                return self._subtree_search(self.right(p), k)\n        return p  # unsucessful search\n\n    def _subtree_first_position(self, p):\n        \"\"\"Return Position of first item in subtree rooted at p.\"\"\"\n        walk = p\n        while self.left(walk) is not None:  # keep walking left\n            walk = self.left(walk)\n        return walk\n\n    def _subtree_last_position(self, p):\n        \"\"\"Return Position of last item in subtree rooted at p.\"\"\"\n        walk = p\n        while self.right(walk) is not None:  # keep walking right\n            walk = self.right(walk)\n        return walk\n\n    # --------------------- public methods providing \"positional\" support ---------------------\n    def first(self):\n        \"\"\"Return the first Position in the tree (or None if empty).\"\"\"\n        return self._subtree_first_position(self.root()) if len(self) > 0 else None\n\n    def last(self):\n        \"\"\"Return the last Position in the tree (or None if empty).\"\"\"\n        return self._subtree_last_position(self.root()) if len(self) > 0 else None\n\n    def before(self, p):\n        \"\"\"Return the Position just before p in the natural order.\n\n        Return None if p is the first position.\n        \"\"\"\n        self._validate(p)  # inherited from LinkedBinaryTree\n        if self.left(p):\n            return self._subtree_last_position(self.left(p))\n        else:\n            # walk upward\n            walk = p\n            above = self.parent(walk)\n            while above is not None and walk == self.left(above):\n                walk = above\n                above = self.parent(walk)\n            return above\n\n    def after(self, p):\n        \"\"\"Return the Position just after p in the natural order.\n\n        Return None if p is the last position.\n        \"\"\"\n        self._validate(p)  # inherited from LinkedBinaryTree\n        if self.right(p):\n            return self._subtree_first_position(self.right(p))\n        else:\n            walk = p\n            above = self.parent(walk)\n            while above is not None and walk == self.right(above):\n                walk = above\n                above = self.parent(walk)\n            return above\n\n    def find_position(self, k):\n        \"\"\"Return position with key k, or else neighbor (or None if empty).\"\"\"\n        if self.is_empty():\n            return None\n        else:\n            p = self._subtree_search(self.root(), k)\n            self._rebalance_access(p)  # hook for balanced tree subclasses\n            return p\n\n    def delete(self, p):\n        \"\"\"Remove the item at given Position.\"\"\"\n        self._validate(p)  # inherited from LinkedBinaryTree\n        if self.left(p) and self.right(p):  # p has two children\n            replacement = self._subtree_last_position(self.left(p))\n            self._replace(p, replacement.element())  # from LinkedBinaryTree\n            p = replacement\n        # now p has at most one child\n        parent = self.parent(p)\n        self._delete(p)  # inherited from LinkedBinaryTree\n        self._rebalance_delete(parent)  # if root deleted, parent is None\n\n    # --------------------- public methods for (standard) map interface ---------------------\n    def __getitem__(self, k):\n        \"\"\"Return value associated with key k (raise KeyError if not found).\"\"\"\n        if self.is_empty():\n            raise KeyError('Key Error: ' + repr(k))\n        else:\n            p = self._subtree_search(self.root(), k)\n            self._rebalance_access(p)  # hook for balanced tree subclasses\n            if k != p.key():\n                raise KeyError('Key Error: ' + repr(k))\n            return p.value()\n\n    def __setitem__(self, k, v):\n        \"\"\"Assign value v to key k, overwriting existing value if present.\"\"\"\n        if self.is_empty():\n            leaf = self._add_root(self._Item(k, v))  # from LinkedBinaryTree\n        else:\n            p = self._subtree_search(self.root(), k)\n            if p.key() == k:\n                p.element()._value = v  # replace existing item's value\n                self._rebalance_access(p)  # hook for balanced tree subclasses\n                return\n            else:\n                item = self._Item(k, v)\n                if p.key() < k:\n                    leaf = self._add_right(p, item)  # inherited from LinkedBinaryTree\n                else:\n                    leaf = self._add_left(p, item)  # inherited from LinkedBinaryTree\n        self._rebalance_insert(leaf)  # hook for balanced tree subclasses\n\n    def __delitem__(self, k):\n        \"\"\"Remove item associated with key k (raise KeyError if not found).\"\"\"\n        if not self.is_empty():\n            p = self._subtree_search(self.root(), k)\n            if k == p.key():\n                self.delete(p)  # rely on positional version\n                return  # successful deletion complete\n            self._rebalance_access(p)  # hook for balanced tree subclasses\n        raise KeyError('Key Error: ' + repr(k))\n\n    def __iter__(self):\n        \"\"\"Generate an iteration of all keys in the map in order.\"\"\"\n        p = self.first()\n        while p is not None:\n            yield p.key()\n            p = self.after(p)\n\n    # --------------------- public methods for sorted map interface ---------------------\n    def __reversed__(self):\n        \"\"\"Generate an iteration of all keys in the map in reverse order.\"\"\"\n        p = self.last()\n        while p is not None:\n            yield p.key()\n            p = self.before(p)\n\n    def find_min(self):\n        \"\"\"Return (key,value) pair with minimum key (or None if empty).\"\"\"\n        if self.is_empty():\n            return None\n        else:\n            p = self.first()\n            return (p.key(), p.value())\n\n    def find_max(self):\n        \"\"\"Return (key,value) pair with maximum key (or None if empty).\"\"\"\n        if self.is_empty():\n            return None\n        else:\n            p = self.last()\n            return (p.key(), p.value())\n\n    def find_le(self, k):\n        \"\"\"Return (key,value) pair with greatest key less than or equal to k.\n\n        Return None if there does not exist such a key.\n        \"\"\"\n        if self.is_empty():\n            return None\n        else:\n            p = self.find_position(k)\n            if k < p.key():\n                p = self.before(p)\n            return (p.key(), p.value()) if p is not None else None\n\n    def find_lt(self, k):\n        \"\"\"Return (key,value) pair with greatest key strictly less than k.\n\n        Return None if there does not exist such a key.\n        \"\"\"\n        if self.is_empty():\n            return None\n        else:\n            p = self.find_position(k)\n            if not p.key() < k:\n                p = self.before(p)\n            return (p.key(), p.value()) if p is not None else None\n\n    def find_ge(self, k):\n        \"\"\"Return (key,value) pair with least key greater than or equal to k.\n\n        Return None if there does not exist such a key.\n        \"\"\"\n        if self.is_empty():\n            return None\n        else:\n            p = self.find_position(k)  # may not find exact match\n            if p.key() < k:  # p's key is too small\n                p = self.after(p)\n            return (p.key(), p.value()) if p is not None else None\n\n    def find_gt(self, k):\n        \"\"\"Return (key,value) pair with least key strictly greater than k.\n\n        Return None if there does not exist such a key.\n        \"\"\"\n        if self.is_empty():\n            return None\n        else:\n            p = self.find_position(k)\n            if not k < p.key():\n                p = self.after(p)\n            return (p.key(), p.value()) if p is not None else None\n\n    def find_range(self, start, stop):\n        \"\"\"Iterate all (key,value) pairs such that start <= key < stop.\n\n        If start is None, iteration begins with minimum key of map.\n        If stop is None, iteration continues through the maximum key of map.\n        \"\"\"\n        if not self.is_empty():\n            if start is None:\n                p = self.first()\n            else:\n                # we initialize p with logic similar to find_ge\n                p = self.find_position(start)\n                if p.key() < start:\n                    p = self.after(p)\n            while p is not None and (stop is None or p.key() < stop):\n                yield (p.key(), p.value())\n                p = self.after(p)\n\n    # --------------------- hooks used by subclasses to balance a tree ---------------------\n    def _rebalance_insert(self, p):\n        \"\"\"Call to indicate that position p is newly added.\"\"\"\n        pass\n\n    def _rebalance_delete(self, p):\n        \"\"\"Call to indicate that a child of p has been removed.\"\"\"\n        pass\n\n    def _rebalance_access(self, p):\n        \"\"\"Call to indicate that position p was recently accessed.\"\"\"\n        pass\n\n    # --------------------- nonpublic methods to support tree balancing ---------------------\n\n    def _relink(self, parent, child, make_left_child):\n        \"\"\"Relink parent node with child node (we allow child to be None).\"\"\"\n        if make_left_child:  # make it a left child\n            parent._left = child\n        else:  # make it a right child\n            parent._right = child\n        if child is not None:  # make child point to parent\n            child._parent = parent\n\n    def _rotate(self, p):\n        \"\"\"Rotate Position p above its parent.\n\n        Switches between these configurations, depending on whether p==a or p==b.\n\n              b                  a\n             \/ \\                \/  \\\n            a  t2             t0   b\n           \/ \\                     \/ \\\n          t0  t1                  t1  t2\n\n        Caller should ensure that p is not the root.\n        \"\"\"\n        \"\"\"Rotate Position p above its parent.\"\"\"\n        x = p._node\n        y = x._parent  # we assume this exists\n        z = y._parent  # grandparent (possibly None)\n        if z is None:\n            self._root = x  # x becomes root\n            x._parent = None\n        else:\n            self._relink(z, x, y == z._left)  # x becomes a direct child of z\n        # now rotate x and y, including transfer of middle subtree\n        if x == y._left:\n            self._relink(y, x._right, True)  # x._right becomes left child of y\n            self._relink(x, y, False)  # y becomes right child of x\n        else:\n            self._relink(y, x._left, False)  # x._left becomes right child of y\n            self._relink(x, y, True)  # y becomes left child of x\n\n    def _restructure(self, x):\n        \"\"\"Perform a trinode restructure among Position x, its parent, and its grandparent.\n\n        Return the Position that becomes root of the restructured subtree.\n\n        Assumes the nodes are in one of the following configurations:\n\n            z=a                 z=c           z=a               z=c\n           \/  \\                \/  \\          \/  \\              \/  \\\n          t0  y=b             y=b  t3       t0   y=c          y=a  t3\n             \/  \\            \/  \\               \/  \\         \/  \\\n            t1  x=c         x=a  t2            x=b  t3      t0   x=b\n               \/  \\        \/  \\               \/  \\              \/  \\\n              t2  t3      t0  t1             t1  t2            t1  t2\n\n        The subtree will be restructured so that the node with key b becomes its root.\n\n                  b\n                \/   \\\n              a       c\n             \/ \\     \/ \\\n            t0  t1  t2  t3\n\n        Caller should ensure that x has a grandparent.\n        \"\"\"\n        \"\"\"Perform trinode restructure of Position x with parent\/grandparent.\"\"\"\n        y = self.parent(x)\n        z = self.parent(y)\n        if (x == self.right(y)) == (y == self.right(z)):  # matching alignments\n            self._rotate(y)  # single rotation (of y)\n            return y  # y is new subtree root\n        else:  # opposite alignments\n            self._rotate(x)  # double rotation (of x)\n            self._rotate(x)\n            return x  # x is new subtree root\n","ea507f28":"# Use Quick Sort Algorithm to create sorted cities path\nsorted_cities_path2 = list(sub2.iloc[1:,].sort_values(['X','Y'], kind='quicksort')['CityId'])\nsorted_cities_path2 = [0] + sorted_cities_path2 + [0]\n\n# Record Time Taken\n%timeit sorted_cities_path2 = list(sub2.iloc[1:,].sort_values(['X','Y'], kind='quicksort')['CityId'])","8cd2c70c":"# Altered function from: https:\/\/www.kaggle.com\/seshadrikolluri\/understanding-the-problem-and-some-sample-paths\n# Calculate euclidean distance and store in a Map\ndef calculate_distance(dfcity,path):\n    prev_city = path[0]\n    distance = 0\n    distances = TreeMap()\n    step_num = 1\n    for city_num in path[1:]:\n        next_city = city_num\n        distance = \\\n            np.sqrt(pow((dfcity.X[city_num] - dfcity.X[prev_city]),2) + pow((dfcity.Y[city_num] - dfcity.Y[prev_city]),2)) * \\\n            (1+ 0.1*((step_num % 10 == 0)*int(not(prime_cities[prev_city]))))\n        distances.__setitem__(city_num, distance)\n        prev_city = next_city\n        step_num = step_num + 1\n    return distances","c1c4f4ef":"distances_sub2 = calculate_distance(sub2, sorted_cities_path2)","aefd4b38":"%timeit distances_sub2 = calculate_distance(sub2, sorted_cities_path2)","ab935e08":"# Calculate Total Distance from TreeMap\ndef total_distance(distances):\n    total_distance = 0\n    for i in distances:\n        total_distance += distances[i]\n    return total_distance\nprint('Total distance is '+ \"{:,}\".format(total_distance(distances_sub2)))","fdfa959b":"# Time function calculating total distance\n%timeit total_distance(distances_sub2)","fea48e84":"df_path2 = pd.merge_ordered(pd.DataFrame({'CityId':sorted_cities_path2}),sub2,on=['CityId'])\nfig, ax = plt.subplots(figsize=(20,20))\nax.plot(df_path2.iloc[0:100,]['X'], df_path2.iloc[0:100,]['Y'],marker = 'o')\nfor i, txt in enumerate(df_path2.iloc[0:100,]['CityId']):\n    ax.annotate(txt, (df_path2.iloc[0:100,]['X'][i], df_path2.iloc[0:100,]['Y'][i]),size = 15)","be50527d":"# Display Plot Path (First 100 Points):","dd7effd9":"* TreeMap","be6e722c":"# Algorithm 2: QuickSort\n# Data Structure 2: BinarySearchTree\n\n# Import classes from TextbookSampleCode\n","eff7bee8":"# **Algorithm Analysis: Merge Sort**\n\n* Using MergeSort to sort the cities in X, Y order, takes O(n lg n) time regarding total running time.\n* The height of MergeSort results in O(lg n) time as each recursive call is dividing the sequence in half.\n* The operations executed at each node at such depth results in O(n) time.","e5025866":"# Comparing Merge Sort and Quick Sort Algorithms","263d1c0f":"# Algorithm 1: Merge Sort\n# Data Structure 1: Map\n\n# Import classes from TextbookSampleCode","bff0e540":"# Display Plot Path (First 100 Points):","cf23feb6":"* Both algorithms compare similarly to each other and would be efficient to use either algorithm regarding the application to this problem. However, the larger the data, it is safer to use Merge Sort as the total running time is always O(n lg n).","a740de99":"* Tree","c44d9a86":"# Chosen DataStructure: SortedMapTable\n\n* A SortedMapTable was implemented to store the calculated distances in.\n* By adding a key, value pair by using the __setitem__ function takes O(1) time, however, calculating the total distance took a total running time of O(n).","a04a83bf":"# Sort Path in X,Y Order Using QuickSort and Record Time Taken","b4f4ac89":"* SortedTableMap","606d7a54":"BinaryTree","ff0cb8e3":"# Sort Path in X,Y Order Using MergeSort and Record Time Taken","c4eed49d":"* MapBase","87e65158":"* LinkedBinaryTree","2e6a98cf":"# **Algorithm Analysis: Quick Sort**\n\n* Using QuickSort to sort the cities in X, Y order, takes an expected total running time of O(n lg n).\n* The algorithm uses a pivot (random chosen element) to partition the input data into sections that are less, equal or greater than the pivot. The running time consists of constant time (O(1)) regarding inserting and removing elements, however, regarding partitioning steps result in O(n) time.\n    * As the pivot point is chosen randomly, this can lead to running times resulting in O(n^2) when the pivot is the unique minimum or maximum element meaning that either the less or greater partitions will have a size of 0.\n    * Good and Bad calls are determined from the sizes of the lesser and greater partitions being less than 3n\/4 for good calls and one of either the lesser or greater partitions being greater than 3n\/4 regarding bad calls.\n    * As each recursive call happens, it creates a depth where the expected height of the quick sort algorithm results in O(lg n) time and all operations executed at each depth is running in O(n) time.\n* Therefore, the expected running time of Quick Sort is O(n lg n)\n\n# **Chosen Data Structure: BinarySearchTree**\n\n* A BinarySearchTree was implement to store the calculated distances.\n* Inserting distances using the __setitem__ function takes O(lg n) time as the keys stored are balanced and therefore split when inserting new key, value pairs.\n* Calculating the total distance in the BinarySearchTree, results in a total running time of O(n)"}}