{"cell_type":{"fd04e649":"code","4f970ffb":"code","5bec0298":"code","dc50b0da":"code","962a162e":"code","4fe99a4d":"code","46d2acc6":"code","069af1e5":"code","d19fd816":"code","950d4a97":"code","aefaadd7":"code","a6defb05":"code","6578ffa7":"code","07199356":"code","0acbb240":"code","52dfe89c":"code","5fea3e3d":"code","a9b65193":"code","dd43eaa0":"markdown","b44634f0":"markdown","1f11a663":"markdown"},"source":{"fd04e649":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom datetime import datetime as dt\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4f970ffb":"df = pd.read_csv('..\/input\/prices.csv') ","5bec0298":"df = df.loc[df['symbol']=='CSCO']\ndf.drop('symbol', axis=1, inplace=True)\nprint(np.shape(df))\ndf.head()","dc50b0da":"# changing the index to date\n\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.set_index('date')\n\ndf.head()","962a162e":"# finding NaNs\n\ndf.dropna(axis=0 , inplace=True)\ndf.isna().sum()","4fe99a4d":"Min_date = df.index.min()\nMax_date = df.index.max()\nprint (\"First date is\",Min_date)\nprint (\"Last date is\",Max_date)\nprint (Max_date - Min_date)","46d2acc6":"# Plotting Candlestick \nfrom plotly import tools\nfrom plotly.graph_objs import *\nfrom plotly.offline import init_notebook_mode, iplot, iplot_mpl\ninit_notebook_mode()\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ntrace = go.Ohlc(x=df.index,\n                open=df['open'],\n                high=df['high'],\n                low=df['low'],\n                close=df['close'])\ndata = [trace]\niplot(data, filename='simple_ohlc')","069af1e5":"from sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split","d19fd816":"# Creating new column \nnum = 20 # forcasting 20 days ahead\ndf['label'] = df['close'].shift(-num) # forcasting close column\n                                     \nprint(df.shape)","950d4a97":"Data = df.drop(['label'],axis=1)\nX = Data.values\nX = preprocessing.scale(X)\nX = X[:-num]\n\ndf.dropna(inplace=True)\nTarget = df.label\ny = Target.values\n\nprint(np.shape(X), np.shape(y))","aefaadd7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","a6defb05":"lr = LinearRegression()\nlr.fit(X_train, y_train)\nlr.score(X_test , y_test) #Returns the coefficient of determination R^2 of the prediction","6578ffa7":"# Prediction \n\nX_Predict = X[-num:]\nForecast = lr.predict(X_Predict)\nprint(Forecast)","07199356":"Date = np.array(df.index) \nlast_Date = Date[len(Date)-1]\nprint(last_Date)","0acbb240":"# creating timeserie from the last date\n\ntrange = pd.date_range('2016-12-2', periods=num, freq='d')\ntrange","52dfe89c":"# Adding the predicted values to dateframe\nPredict_df = pd.DataFrame(Forecast, index=trange)\nPredict_df.columns = ['forecast']\nPredict_df","5fea3e3d":"df_concat = pd.concat([df, Predict_df], axis=1)\ndf_concat.tail(num)","a9b65193":"# zooming in the forecast part\n\ndf_concat['forecast'].plot(color='orange', linewidth=3)\nplt.xlabel('Time')\nplt.ylabel('Price')\nplt.show()","dd43eaa0":"### Linear Regression","b44634f0":"### Plotting the results","1f11a663":"### Visualization\n### Plotting CandelStick : Depicts all data using candlestick charts"}}