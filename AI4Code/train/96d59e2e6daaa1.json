{"cell_type":{"108b7b37":"code","ab541df3":"code","eff1add2":"code","c7e519d4":"code","1ede2fd6":"code","87c42399":"code","e739e052":"code","256783ee":"code","312961e5":"code","fa21f309":"code","f0f68d98":"code","403b5f0c":"code","5b2c873d":"code","a7112d00":"code","9b24a23b":"code","5b0d7d84":"code","b2788ab0":"code","c8000718":"code","980da9f1":"code","1771b360":"code","3654779b":"code","2cd07bfd":"code","205e8b19":"code","d7a5d874":"code","dc56361b":"code","4674921d":"code","fdae69bd":"code","273b6edc":"code","d45f4fb2":"code","475b0a4d":"code","cd606175":"code","dbc63853":"code","6f18387b":"code","dfa31a7b":"code","47e71231":"code","77e34bd6":"code","f2446738":"code","b59e33bb":"code","484bf0db":"code","615d12cf":"code","e25bc5bf":"code","5d54a49b":"code","36e93535":"code","c34d6684":"code","26b4485b":"code","9d30e787":"code","f42c8a30":"code","6a014ec3":"code","a3ee2cd1":"code","509525dc":"code","bf2f60b3":"code","2010ce40":"code","17f0bdf5":"code","aae46a88":"code","44fae7b8":"code","bc33f403":"code","8e33b0ce":"code","7e4ca862":"code","6e1b4879":"code","fe691d19":"code","d5d8f990":"code","859d3c74":"code","0893ebcc":"code","26386dd5":"code","02cd2f04":"code","47019557":"code","037eb639":"code","59212dac":"code","c0c140e8":"markdown","136bb816":"markdown","b2fcfc1f":"markdown","b2e18af5":"markdown","89cf1573":"markdown","7cb4b8f8":"markdown","e061ff63":"markdown","0c4b40f9":"markdown","171a5a70":"markdown","d270b5d3":"markdown","6f2efd04":"markdown","7abfc313":"markdown","d365efb8":"markdown","c953ddd0":"markdown","47e63231":"markdown","0270c3b0":"markdown","4565a6d3":"markdown","4405c410":"markdown","f135474d":"markdown","d8db40f9":"markdown","77b9e556":"markdown","3743ba9a":"markdown","cae3663a":"markdown","9c60ddbe":"markdown","71678835":"markdown","d98d41c7":"markdown","d92e3871":"markdown","82b6695f":"markdown","3ff6180e":"markdown","b5a9536b":"markdown","cd54b231":"markdown","f391ecfa":"markdown","fde0ac88":"markdown","8aa94358":"markdown","9a9fc7a7":"markdown","8f42523e":"markdown","3a1da40b":"markdown","c480f3ef":"markdown","74ed6749":"markdown","59b8796c":"markdown","72175cfe":"markdown","a6c64f3e":"markdown"},"source":{"108b7b37":"pip install plotly==3.10.0 ","ab541df3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eff1add2":"data = pd.read_csv(\"..\/input\/2015.csv\")  # 2015 data\ndata_2016 = pd.read_csv(\"..\/input\/2016.csv\")    # 2016 data\ndata_2017 = pd.read_csv(\"..\/input\/2017.csv\")     # 2017 data\n\n","c7e519d4":"print(type(data))","1ede2fd6":"data.columns","87c42399":"data.columns = ['Country', 'Region', 'Happiness_Rank', 'Happiness_Score', 'Standard_Error', \n                'Economy', 'Family', 'Health','Freedom', 'Trust', 'Generosity', 'Dystopia']","e739e052":"data.shape","256783ee":"data.dtypes","312961e5":"data.info()","fa21f309":"assert  data['Country'].notnull().all() # returns nothing because we drop nan values","f0f68d98":"data.head()\n\n#data_head = data.head(10)\n#colorscale = [[0, '#4d004c'],[.5, '#f2e5ff'],[1, '#ffffff']]\n#table = ff.create_table(data_head, colorscale=colorscale, height_constant=20)\n#iplot(table)\n","403b5f0c":"data.tail()","5b2c873d":"data['Region'].unique()","a7112d00":"data.groupby(\"Region\").mean()","9b24a23b":"data.groupby(\"Region\")[\"Country\",\"Happiness_Score\"].max()\n","5b0d7d84":"data.loc[1,[\"Country\",\"Happiness_Score\"]]","b2788ab0":"data.loc[1:10,[\"Country\",\"Region\",\"Happiness_Score\"]]","c8000718":"print(data[\"Region\"].value_counts(dropna =False))","980da9f1":"data.describe()","1771b360":"data.corr()","3654779b":"# Line Plot for the top 25 countries with the highest happiness score\ndata.loc[0:25,\"Happiness_Score\"].plot(kind='line', color='g', label='2015', linewidth=2,alpha=0.5, grid=True)  # alpha = opacity\ndata_2016.loc[0:25,\"Happiness Score\"].plot(kind='line', color='b', label='2016', linewidth=2,alpha=0.5, grid=True)\ndata_2017.loc[0:25,\"Happiness.Score\"].plot(kind='line', color='r', label='2017', linewidth=2,alpha=0.5, grid=True)\nplt.legend(loc='upper right')\nplt.xlabel(\"Country Index\")\nplt.ylabel(\"Happiness Score\")\nplt.title(\"Top 25 Happiness Scores\" )\nplt.show()","2cd07bfd":"# Plotting all data \ndata1 = data.loc[:,[\"Economy\",\"Family\",\"Health\"]]\ndata1.plot()\n# plotting many features can be confusing. Instead we can use subplots","205e8b19":"data1.plot(subplots=True)\nplt.show()","d7a5d874":"# Scatter Plot \ndata.plot(kind='scatter', x='Economy', y='Health',  color='blue')\nplt.xlabel('Economy')\nplt.ylabel('Health')\nplt.title('Economy-Health Scatter Plot')\nplt.show()","dc56361b":"# Plotting 3 Features in the same plot\n\nplt.scatter(data.Happiness_Score,data.Health,  color='green')\nplt.scatter(data.Happiness_Score,data.Economy,  color='blue')\nplt.scatter(data.Happiness_Score,data.Freedom,  color='red')\nplt.legend()\nplt.xlabel('Happiness Score')\nplt.title('Scatter Plot')\nplt.show()","4674921d":"# scatter subplots\n\nf = plt.figure()    \nf, axes = plt.subplots(nrows = 2, ncols = 2, sharex=True, sharey = True)\n\naxes[0][0].scatter(data.Happiness_Score,data.Health,  color='green', marker = \"x\")\naxes[0][0].set_xlabel('Health', labelpad = 5)\n\naxes[0][1].scatter(data.Happiness_Score,data.Economy,  color='blue', marker = 'o')\naxes[0][1].set_xlabel('Economy', labelpad = 5)\n\naxes[1][0].scatter(data.Happiness_Score,data.Freedom,  color='red', marker = '*')\naxes[1][0].set_xlabel('Freedom')\n\naxes[1][1].scatter(data.Happiness_Score,data.Family,  color='orange', marker = 's')\naxes[1][1].set_xlabel('Family')\n\nplt.show()","fdae69bd":"data[\"Region\"].value_counts()","273b6edc":"# Histogram\n# bins = number of bar in figure\ndata[\"Region\"].value_counts().plot(kind='hist', bins=20, figsize=(20,5))\n#plt.show()","d45f4fb2":"data[\"Freedom\"].plot(kind='hist', bins=100, figsize=(20,5), range=(0,1), normed=True)","475b0a4d":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata.plot(kind = \"hist\",y = \"Economy\",bins = 50,range= (0,1),normed = True,ax = axes[0])\ndata.plot(kind = \"hist\",y = \"Economy\",bins = 50,range= (0,1),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","cd606175":"data.Region.value_counts()","dbc63853":"# Region ratios\nlabels = data.Region.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown','gold', 'orange', 'lightcoral', 'lightskyblue']\nexplode = [0.1,0,0,0,0,0,0,0,0,0]\nsizes = data.Region.value_counts().values\n\n#visualization\nplt.figure(figsize=(10,10))\nplt.pie(sizes, labels=labels, explode=explode, colors = colors, autopct='%1.1f%%', shadow=True)\nplt.title(\"Region Ratios\", color='red', fontsize=12)\nplt.show()","6f18387b":"data.boxplot(column=\"Economy\", by='Region', figsize=(30,10)) \n# there are outliers in Western Europe,Sub-Saharan Africa, Latin America and Caribbean","dfa31a7b":"# clf() = cleans it up again you can start a fresh\ndata.boxplot(column=\"Economy\", by='Region', figsize=(30,10)) \nplt.clf()\n# We cannot see plot due to clf()","47e71231":"data.groupby(\"Region\")[\"Happiness_Score\"].mean()","77e34bd6":"plt.figure(figsize=(15,10))\nsns.barplot(x= data[\"Region\"],y= data[\"Happiness_Score\"])\nplt.xticks(rotation=45)\nplt.xlabel(\"Regions\")\nplt.ylabel(\"Happiness Score\")\nplt.title(\"Happiness Scores of Regions\")\nplt.show()","f2446738":"region_list = list(data['Region'].unique())\nregion_happiness_ratio = []\nfor i in region_list:\n    x = data[data['Region']==i]\n    region_happiness_rate = sum(x.Happiness_Score)\/len(x)\n    region_happiness_ratio.append(region_happiness_rate)\ndata1 = pd.DataFrame({'region_list': region_list,'region_happiness_ratio':region_happiness_ratio})\nnew_index = (data1['region_happiness_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data1.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['region_list'], y=sorted_data['region_happiness_ratio'],palette = sns.cubehelix_palette(len(data.Region.unique())))\nplt.xticks(rotation= 75)\nplt.xlabel('Regions')\nplt.ylabel('Happiness Score')\nplt.title('Happiness Score of Regions')","b59e33bb":"# another way of sorting\ndata1 = data.pivot_table(index= [\"Region\"], values = \"Happiness_Score\", aggfunc=\"mean\")\ndata1.reset_index(inplace = True)\nsorted_data = data1.sort_values('Happiness_Score', ascending=False)\nsorted_data['happiness_mean'] = [np.mean(sorted_data['Happiness_Score'])]*len(sorted_data['Region'])\n\n# visualization\nplt.figure(figsize=(25,12))\nsns.barplot(x=sorted_data['Region'], y=sorted_data['Happiness_Score'],palette = sns.cubehelix_palette(len(sorted_data.Region.unique())))\n\n# Plot the average line\ntext1 = \"{:.2f}\".format(np.mean(sorted_data['Happiness_Score']))\nsorted_data['happiness_mean'].plot(kind='line', label='Mean', legend=True)\nplt.text(9,5.8,text1,color='red',fontsize = 12,style = 'italic')\n\nbar_label = sorted_data['Happiness_Score'] \nx=-0.05   # x location of bar label\ny=7      # y location of bar label\nfor i in range(len(sorted_data.Region)):\n    plt.text(x,y,\"{:.2f}\".format(bar_label[i]), color='red',fontsize = 12,style = 'italic')   # putting labels on the bars\n    x += 0.98    # increasing x location of bar label\n    y -= 0.39   # decreasing y location of bar label\n\nplt.xticks(rotation= 45)\nplt.xlabel('Regions')\nplt.ylabel('Happiness Score')\nplt.title('Happiness Score of Regions')\n\n","484bf0db":"# another way of labeling the columns\n\nfig, ax = plt.subplots()\n\nbar_x = range(len(sorted_data['Region']))\nbar_height = list(sorted_data['Happiness_Score'])\nbar_tick_label = list(sorted_data['Region'])\nbar_label = list(sorted_data['Happiness_Score'])\n\nbar_plot = plt.bar(bar_x,bar_height,tick_label=bar_tick_label)\n\n# function for autolabeling according to the height of columns\ndef autolabel(rects):\n    for idx,rect in enumerate(bar_plot):\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width()\/2., 1.05*height,\n                \"{:.2f}\".format(bar_label[idx]),\n                ha='center', va='bottom', rotation=0)\n\nautolabel(bar_plot)\n\n\nplt.ylim(0,10)\nplt.title('Happiness Scores of Regions')\nplt.xticks(rotation=90)\nplt.savefig(\"Happiness Scores of Regions.png\")\nplt.show()","615d12cf":"data.groupby(\"Region\").mean()","e25bc5bf":"data1 = data.pivot_table(index= [\"Region\"], aggfunc=\"mean\")\ndata2 = data1.loc[:,['Economy','Family','Freedom','Generosity','Health','Trust','Dystopia']]\n\nax = data2.plot.barh(stacked=True, legend=True);\nax.figure.set_size_inches(10,10)\nax.set(xlabel='Happiness Score', ylabel='Regions' ,title = \"Components of Happiness Score for Regions\")\nax.legend(loc='upper right')\n#plt.ylabel(data2.Regions)\n\nplt.show()","5d54a49b":"#another way\ndata2['Economy'].plot(kind='barh',stacked=True, legend=False)\nplt.xlabel('Economy')\nplt.show()","36e93535":"data1 = data.pivot_table(index= [\"Region\"], aggfunc=\"mean\")\ndata1.reset_index(inplace = True)\ndata2 = data1.loc[:,['Region','Happiness_Score','Economy','Family','Freedom','Generosity','Health','Trust','Dystopia']]\n#normalization\ndata2['Happiness_Score_norm'] = data2['Happiness_Score']\/max( sorted_data['Happiness_Score']) \ndata2['Health_norm'] = data2['Health']\/max( data2['Health'])\n#visualization\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='Region',y='Happiness_Score_norm',data=data2,color='lime',alpha=0.8)\nsns.pointplot(x='Region',y='Health_norm',data=data2,color='red',alpha=0.8)\nplt.text(0.5,0.6,'Happiness Score',color='red',fontsize = 17,style = 'italic')\nplt.text(0.5,0.55,'Health',color='lime',fontsize = 18,style = 'italic')\nplt.xticks(rotation= 45)\nplt.xlabel('Regions', fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('Happiness Score  VS  Health',fontsize = 20,color='blue')\nplt.legend(loc='upper right')\nplt.grid()","c34d6684":"# Show the joint distribution using kernel density estimation \nsns.jointplot(data.Happiness_Score, data.Health, kind=\"kde\", height=7)\nplt.savefig('graph.png')\nplt.show()","26b4485b":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\nsns.jointplot(\"Happiness_Score\", \"Health\", kind=\"hex\", data=data,size=5, ratio=3, color=\"r\")\nplt.show()","9d30e787":"#Correlation map (Heatmap)\nf, ax = plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(), annot=True, linewidths=.7, fmt='.3f', ax=ax)\nplt.show()","f42c8a30":"sns.lmplot(x='Happiness_Score', y ='Economy', data=data)\nplt.show()","6a014ec3":"sns.kdeplot(data.Happiness_Score, data.Family, shade=True, cut=3)\nplt.show()","a3ee2cd1":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\ndata_plot = data.loc[:,[\"Country\",\"Happiness_Score\",\"Family\"]]\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data_plot, palette=pal, inner=\"points\")\nplt.show()","509525dc":"sns.boxplot(data=data_plot, palette=\"PRGn\")\nplt.show()\n","bf2f60b3":"sns.swarmplot(data=data_plot)\nplt.show()","2010ce40":"sns.pairplot(data_plot)\nplt.show()","17f0bdf5":"region = data.Region.value_counts()\nprint(type(region))","aae46a88":"region = data.Region.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=region.index,y=region.values)\nplt.xlabel('Regions')\nplt.ylabel('Number of Regions')\nplt.xticks(rotation=90)\nplt.title('Regions',color = 'blue',fontsize=15)","44fae7b8":"happiness_mean = data.Happiness_Score.mean()\nabove_mean =['above mean' if i >= happiness_mean else 'below mean' for i in data.Happiness_Score]\ndf = pd.DataFrame({'Happiness_Score':above_mean})\nsns.countplot(x=df.Happiness_Score)\nplt.ylabel('Number of Countries')\nplt.title('Number of Countries According to Happiness Score',color = 'blue',fontsize=12)","bc33f403":"# Creating trace1\ntrace1 = go.Scatter(\n        x=data.Happiness_Rank,\n        y=data.Economy,\n        mode=\"lines\",\n        name=\"Economy\",\n        marker=dict(color='rgba(16,112,2,0.8)'),   #a=alpha=opacity\n        text = data.Country)\n\n# Creating trace2\ntrace2 = go.Scatter(\n        x=data.Happiness_Rank,\n        y=data.Health,\n        mode=\"lines+markers\",\n        name=\"Health\",\n        marker=dict(color='rgba(80,26,80,0.8)'),   \n        text = data.Country)\ndata_1=[trace1,trace2]\nlayout=dict(title=\"Economy and Health Index vs Happiness Rank of Countries\",\n           xaxis=dict(title=\"Happiness Rank\", ticklen=4,zeroline=False ))\nfig = dict(data=data_1, layout=layout)\niplot(fig)","8e33b0ce":"trace1 = go.Scatter(\n                    x = data.Happiness_Rank,\n                    y = data.Economy,\n                    mode = \"markers\",\n                    name = \"Economy\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= data.Country)\n# creating trace2\ntrace2 = go.Scatter(\n                    x = data.Happiness_Rank,\n                    y = data.Family,\n                    mode = \"markers\",\n                    name = \"Family\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= data_2016.Country)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = data.Happiness_Rank,\n                    y = data.Health,\n                    mode = \"markers\",\n                    name = \"Health\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= data_2017.Country)\ndata1 = [trace1, trace2, trace3]\nlayout = dict(title = 'Economy, Family, Health index values of countries with 2015 data',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Index Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data1, layout = layout)\niplot(fig)","7e4ca862":"data_top = data.iloc[:5,:]\n# create trace1 \ntrace1 = go.Bar(\n                x = data_top.Country,\n                y = data_top.Economy,\n                name = \"Economy\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_top.Region)\n# create trace2 \ntrace2 = go.Bar(\n                x = data_top.Country,\n                y = data_top.Health,\n                name = \"Health\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_top.Region)\ndata2 = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data2, layout = layout)\niplot(fig)","6e1b4879":"data_top = data.iloc[:5,:]\n\nx = data_top.Country\n\ntrace1 = {'x': x,'y': data_top.Economy,'name': 'Economy','type': 'bar'};\ntrace2 = {'x': x,'y': data_top.Family,'name': 'Family','type': 'bar'};\ntrace3 = {'x': x,'y': data_top.Health,'name': 'Health','type': 'bar'};\ntrace4 = {'x': x,'y': data_top.Freedom,'name': 'Freedom','type': 'bar'};\ntrace5 = {'x': x,'y': data_top.Trust,'name': 'Trust','type': 'bar'};\ntrace6 = {'x': x,'y': data_top.Generosity,'name': 'Generosity','type': 'bar'};\ntrace7 = {'x': x,'y': data_top.Dystopia,'name': 'Dystopia','type': 'bar'};\ndata_bar = [trace1, trace2, trace3, trace4, trace5, trace6, trace7];\nlayout = {\n  'xaxis': {'title': 'Top 5 Countries'},\n  'barmode': 'relative',\n  'title': 'Happiness Elements of top 5 countries'\n};\nfig = go.Figure(data = data_bar, layout = layout)\niplot(fig)","fe691d19":"# data preparation\nregion = pd.DataFrame(data.Region.value_counts())\nsizes = region.Region\nlabels = region.index\n\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": sizes,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number of Regions\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Regional Ratios\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Percentage of Regions\",\n                \"x\": 0.10,\n                \"y\": 1.05\n            },\n        ]\n    }\n}\niplot(fig)","d5d8f990":"data_Western_Europe = data[data.Region == \"Western Europe\"]\ndata_bubble = [\n    {\n        'x': data_Western_Europe.Happiness_Rank,\n        'y': data_Western_Europe.Economy,\n        'mode': 'markers',\n        'marker': {\n            'color': data_Western_Europe.Family,\n            'size': data_Western_Europe.Happiness_Score*5,\n            'showscale': True\n        },\n        \"text\" :  data_Western_Europe.Country\n    }\n]\niplot(data_bubble)","859d3c74":"\ntrace1 = go.Histogram(\n    x=data.Region,\n    opacity=0.75,\n    name = \"Region\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\n\ndata_histogram = [trace1]\nlayout = go.Layout(title=' Number of Regions in Happiness Data',\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data_histogram, layout=layout)\niplot(fig)","0893ebcc":"# data preparation\ndata_select = data.loc[:,[\"Economy\",\"Family\"]]\n\ntrace0 = go.Box(\n    y=data_select.Economy,\n    name = 'Economy',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=data_select.Family,\n    name = 'Family',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata_box = [trace0, trace1]\niplot(data_box)","26386dd5":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\n\ndata_s = data.loc[:,[\"Economy\",\"Family\", \"Happiness_Score\"]]\ndata_s[\"index\"] = np.arange(1,len(data_s)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data_s, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","02cd2f04":"# first line plot\ntrace1 = go.Scatter(\n    x=data.Happiness_Rank,\n    y=data.Economy,\n    name = \"Economy\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=data.Happiness_Rank,\n    y=data.Health,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Health\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata_inset = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Economy and Health vs World Rank of Countries'\n\n)\n\nfig = go.Figure(data=data_inset, layout=layout)\niplot(fig)","47019557":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=data.Happiness_Rank,\n    y=data.Economy,\n    z=data.Health,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata_3d = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n)\nfig = go.Figure(data=data_3d, layout=layout)\niplot(fig)","037eb639":"trace1 = go.Scatter(\n    x=data.Happiness_Rank,\n    y=data.Economy,\n    name = \"Economy\"\n)\ntrace2 = go.Scatter(\n    x=data.Happiness_Rank,\n    y=data.Family,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Family\"\n)\ntrace3 = go.Scatter(\n    x=data.Happiness_Rank,\n    y=data.Health,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"Health\"\n)\ntrace4 = go.Scatter(\n    x=data.Happiness_Rank,\n    y=data.Trust,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"Trust\"\n)\ndata_multiple = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Economy, Family, Health and Trust VS World Rank of Countries'\n)\nfig = go.Figure(data=data_multiple, layout=layout)\niplot(fig)","59212dac":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\ndata_word = data.Country\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(background_color=\"lavenderblush\",\n                      width=950,\n                      height=950\n                    ).generate(\" \".join(data_word))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","c0c140e8":"**Box Plot**","136bb816":"**Count Plot**","b2fcfc1f":"**Line Charts**","b2e18af5":"**Histogram**","89cf1573":"**Multiple Subplots**","7cb4b8f8":"**Point Plot**","e061ff63":"**BOXPLOTS**\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","0c4b40f9":"**Histogram**","171a5a70":"**Pie Chart**","d270b5d3":"**Bar Chart**","6f2efd04":"<a id=\"3\"><\/a> <br>\n# 3. SEABORN","7abfc313":"* Second Bar Charts Example: (style2) \n* Actually, if we change only the barmode from group to relative in previous example, we achieve the result wanted","d365efb8":"**Scatter Matrix Plots**\n* Scatter Matrix = it helps us to see covariance and relation between more than 2 features","c953ddd0":"<a id=\"1\"><\/a> <br>\n# 1. EXPLORATORY DATA ANALYSIS","47e63231":"<a id=\"2\"><\/a> <br>\n# 2. MATPLOTLIB","0270c3b0":"**Bubble Chart**\n\nAllthough this data is not very good input for bubble chart we will try a demonstration.","4565a6d3":"**Word Cloud**\n* It is not a pyplot. We will import wordcloud library. Lets look at which region is mentioned most ","4405c410":"**Violin Plot**","f135474d":"**Heatmap**","d8db40f9":"**Inset Plots**","77b9e556":"**Pie Charts**","3743ba9a":"As we can see heatmap above,  happiness score has the highest positive correlation with economy. We can show the same relationship with lm plot below.","cae3663a":"**INTRODUCTION**\n* In this kernel,  I will try to analyse Happiness Scores of Countries and Regions using data visualization tools like matplotlib, seaborn and plotly. This kernel has been prepared just for the sole purpose of practicing these libraries so it lacks interpretation of the charts. ","9c60ddbe":"**Line Plot**","71678835":"**Scatter**","d98d41c7":"**Kde Plot**","d92e3871":"**Scatter Plot**","82b6695f":"**Horizontal Bar**","3ff6180e":"<a id=\"4\"><\/a> <br>\n# 4. PLOTLY","b5a9536b":"According to the box plot, only Latin America, Sub-Saharan Africa and Western Europe reigons have outliers in the economy index","cd54b231":"**Pair Plot**","f391ecfa":"**Box Plot**","fde0ac88":"**Cleaning Plots**","8aa94358":"**Map Plot**","9a9fc7a7":"**References**\n\n1. https:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners\n2. https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners\n","8f42523e":"**Bar Plot**","3a1da40b":"**Joint Plot**","c480f3ef":"**3D Scatter Plot with Colorscaling**","74ed6749":"**Lm Plot**","59b8796c":"**Content:**\n1. [Exploratory Data Analysis](#1)\n1. [Matplotlib](#2)\n1. [Seaborn](#3)\n1. [Plotly](#4)","72175cfe":"**Swarm Plot**","a6c64f3e":"As we can see above Sub-Saharan Region has the most countries in the dataset. The distribution of countries according to regions is shown with pie-chart below."}}