{"cell_type":{"c96a740e":"code","b33ca7ad":"code","1d0425a4":"code","700f1ee5":"code","47dbf75e":"code","9124be48":"code","3dfb9563":"code","ee79970c":"code","a61033f0":"code","20071307":"code","6a0cf9e7":"code","bfd6307e":"markdown","82046efe":"markdown","99cdbc99":"markdown","d7ea30b7":"markdown","ca7e29a2":"markdown","e99d68bd":"markdown","d88892dc":"markdown"},"source":{"c96a740e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b33ca7ad":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","1d0425a4":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","700f1ee5":"print(\"Training Data Shape: \", train_data.shape)\nprint(\"Testing Data Shape: \", test_data.shape)","47dbf75e":"print(\"Training data info: \\n\")\ntrain_data.info()","9124be48":"print(\"Testing data info: \\n\")\ntest_data.info()","3dfb9563":"print(\"Missing data in training dataset: \\n\")\ntrain_data.isnull().sum()","ee79970c":"print(\"Missing data in testing dataset: \\n\")\ntest_data.isnull().sum()","a61033f0":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","20071307":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","6a0cf9e7":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","bfd6307e":"**5. Our ML model - `Random Forest`**","82046efe":"**3. Finding null values in training and testing datasets.**","99cdbc99":"**4. Exploring a pattern in the datasets.**","d7ea30b7":"- The code above calculates the percentage of male passengers (in train.csv) who survived.\n\n- From this you can see that almost 75% of the women on board survived, whereas only 19% of the men lived to tell about it.","ca7e29a2":"**2. Gathering information on the dataset provided.**","e99d68bd":"**1. Loading the dataset.**","d88892dc":"- This model is constructed of several \"trees\" that will individually consider each passenger's data and vote on whether the individual survived. \n- Then, the random forest model makes a democratic decision: the outcome with the most votes wins!"}}