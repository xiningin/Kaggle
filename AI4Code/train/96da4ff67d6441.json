{"cell_type":{"1a8a744e":"code","5c856ab0":"code","51b030fb":"code","7e7f2a06":"code","d316733f":"code","68a25f39":"code","0ef22099":"code","bfeef2c0":"code","91b93db8":"code","41880881":"code","7dff4ab9":"code","2d7ee62a":"code","2135aaec":"code","71c9502b":"code","417ff535":"code","5caa6aac":"code","5d3e0311":"code","0d49f1e3":"markdown","0ce2738a":"markdown","897ff2ad":"markdown","c8a25f4f":"markdown","5b4ba74f":"markdown","4cf13d4f":"markdown","95c4baee":"markdown","93aae54e":"markdown","5a777e40":"markdown"},"source":{"1a8a744e":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom tqdm import tqdm\nfrom keras.preprocessing import image\npd.options.display.max_columns = 50","5c856ab0":"train_df = pd.read_csv('\/kaggle\/input\/retinal-disease-classification\/Training_Set\/Training_Set\/RFMiD_Training_Labels.csv')\nval_df = pd.read_csv('\/kaggle\/input\/retinal-disease-classification\/Evaluation_Set\/Evaluation_Set\/RFMiD_Validation_Labels.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/retinal-disease-classification\/Test_Set\/Test_Set\/RFMiD_Testing_Labels.csv')","51b030fb":"train_df['img_path'] = [f'\/kaggle\/input\/retinal-disease-classification\/Training_Set\/Training_Set\/Training\/{id}.png' for id in train_df['ID']]\nval_df['img_path'] = [f'\/kaggle\/input\/retinal-disease-classification\/Evaluation_Set\/Evaluation_Set\/Validation\/{id}.png' for id in val_df['ID']]\ntest_df['img_path'] = [f'\/kaggle\/input\/retinal-disease-classification\/Test_Set\/Test_Set\/Test\/{id}.png' for id in test_df['ID']]","7e7f2a06":"train_df = train_df.drop(labels=['ID'],axis=1)","d316733f":"columns = list(train_df.columns)\ncolumns.remove('img_path')\nd_total = 0\nfor col in columns:\n    print(col)\n    print(train_df[col].value_counts())\n    print('----------------')\n    if col != 'Disease_Risk':\n        d_total += train_df[col].sum()\n        \nprint(d_total)\n","68a25f39":"train_df = train_df.drop(labels=['Disease_Risk','ODPM', 'HR'], axis=1)\nval_df = val_df.drop(labels=['ID', 'Disease_Risk', 'ODPM', 'HR'], axis=1)\ntest_df = test_df.drop(labels=['ID', 'Disease_Risk', 'ODPM', 'HR'], axis=1)","0ef22099":"train_df.columns","bfeef2c0":"train_df[train_df['PTCR']==1]","91b93db8":"def weight_calc(col):\n    total = len(train_df)\n    weight = (1 \/ train_df[col].sum()) *  total \/ 2\n    return weight","41880881":"Y_train = list(train_df.drop(['img_path'], axis=1).columns)\nY_val = list(val_df.drop(['img_path'], axis=1).columns)\nY_test = list(test_df.drop(['img_path'], axis=1).columns)\nunq_disease = len(Y_train)","7dff4ab9":"# Was going to implement class weights for this solution, but TF currently does not support using class weights in its metrics.\n# class_weights = {}\n# for i in range(0, unq_disease):\n#     class_weights[f'{i}'] = weight_calc(Y_train[i])","2d7ee62a":"plt.subplots(3, 4, figsize=(240, 160))\nfor i in range(12):\n    plt.subplot(3,4, i + 1)\n    img = mpimg.imread(train_df.iloc[i][43])\n    plt.imshow(img)","2135aaec":"train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255,\n                                                                horizontal_flip=True,\n                                                                vertical_flip=True,\n                                                                rotation_range=90,\n                                                                brightness_range=[0, 0.1])\nval_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255)\ntest_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255)\n# The value for class_mode in flow_from_dataframe MUST be 'raw' if you are attempting to do multilabel classification.\ntrain_gen = train_datagen.flow_from_dataframe(train_df, \n                                              x_col='img_path', \n                                              y_col=Y_train,\n                                              target_size=(150,150),\n                                              class_mode='raw',\n                                              batch_size=16,\n                                              shuffle=True)\nval_gen = val_datagen.flow_from_dataframe(val_df,\n                                          x_col='img_path',\n                                          y_col=Y_val,\n                                          target_size=(150,150),\n                                          class_mode='raw',\n                                          batch_size=8)\ntest_gen = test_datagen.flow_from_dataframe(test_df,\n                                            x_col='img_path',\n                                            y_col=Y_test,\n                                            target_size=(150,150),\n                                            class_mode='raw')","71c9502b":"def UNet(inputs):\n    # First convolution block\n    x = tf.keras.layers.Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(inputs)\n    d1_con = tf.keras.layers.Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(x)\n    d1 = tf.keras.layers.MaxPool2D(pool_size=2, strides=2)(d1_con)\n    \n    # Second convolution block\n    d2 = tf.keras.layers.Conv2D(128, 3, activation='relu', padding='same', kernel_initializer='he_normal')(d1)\n    d2_con = tf.keras.layers.Conv2D(128, 3, activation='relu', padding='same', kernel_initializer='he_normal')(d2)\n    d2 = tf.keras.layers.MaxPool2D(pool_size=2, strides=2)(d2_con)\n    \n    # Third convolution block\n    d3 = tf.keras.layers.Conv2D(256, 3, activation='relu', padding='same', kernel_initializer='he_normal')(d2)\n    d3_con = tf.keras.layers.Conv2D(256, 3, activation='relu', padding='same', kernel_initializer='he_normal')(d3)\n    d3 = tf.keras.layers.MaxPool2D(pool_size=2, strides=2)(d3_con)\n    \n    # Fourth convolution block\n    d4 = tf.keras.layers.Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(d3)\n    d4_con = tf.keras.layers.Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(d4)\n    d4 = tf.keras.layers.MaxPool2D(pool_size=2, strides=2)(d4_con)\n    \n    # Bottleneck layer\n    b = tf.keras.layers.Conv2D(1024, 3, activation='relu', padding='same', kernel_initializer='he_normal')(d4)\n    b = tf.keras.layers.Conv2D(1024, 3, activation='relu', padding='same', kernel_initializer='he_normal')(b)\n    \n    # First upsampling block\n    u1 = tf.keras.layers.Conv2DTranspose(512, 3, strides =(2,2),padding='same')(b)\n    u1 = tf.keras.layers.Concatenate(axis=3)([u1, d4_con])\n    u1 = tf.keras.layers.Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(u1)\n    u1 = tf.keras.layers.Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(u1)\n    \n    # Second upsampling block\n    u2 = tf.keras.layers.Conv2DTranspose(256, 3, strides =(2,2),padding='valid')(u1)\n    u2 = tf.keras.layers.Concatenate(axis=3)([u2, d3_con])\n    u2 = tf.keras.layers.Conv2D(256, 3, activation='relu', padding='same', kernel_initializer='he_normal')(u2)\n    u2 = tf.keras.layers.Conv2D(256, 3, activation='relu', padding='same', kernel_initializer='he_normal')(u2)\n    \n    # Third upsampling block\n    u3 = tf.keras.layers.Conv2DTranspose(128, 3, strides =(2,2),padding='valid')(u2)\n    u3 = tf.keras.layers.Concatenate(axis=3)([u3, d2_con])\n    u3 = tf.keras.layers.Conv2D(128, 3, activation='relu', padding='same', kernel_initializer='he_normal')(u3)\n    u3 = tf.keras.layers.Conv2D(128, 3, activation='relu', padding='same', kernel_initializer='he_normal')(u3)\n    \n    # Fourth upsampling block\n    u4 = tf.keras.layers.Conv2DTranspose(64, 3, strides =(2,2),padding='same')(u3)\n    u4 = tf.keras.layers.Concatenate(axis=3)([u4, d1_con])\n    u4 = tf.keras.layers.Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(u4)\n    u4 = tf.keras.layers.Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(u4)\n    \n    # Flatten and output\n    flat = tf.keras.layers.Flatten()(u4)\n    out = tf.keras.layers.Dense(units=unq_disease, activation='sigmoid')(flat)\n    model = tf.keras.Model(inputs=[inputs], outputs=[out])\n    return model","417ff535":"auc = tf.keras.metrics.AUC(multi_label=True,thresholds=[0,0.5])\naucpr = tf.keras.metrics.AUC(curve='PR',multi_label=True,thresholds=[0,0.5])\ninputs = tf.keras.layers.Input(shape=(150,150,3))\nunet = UNet(inputs)\nunet.compile(optimizer='adam', loss='binary_crossentropy', metrics=[auc, aucpr])\nunet.summary()","5caa6aac":"unet.fit(train_gen, epochs=5, validation_data=val_gen)","5d3e0311":"unet.evaluate(test_gen)","0d49f1e3":"# Glossary\nNot entirely necessary to know all of this for the classification tasks, but I wanted to know what all of these abbreviations stood for so I figured I'd put them down here. All definitions come from the source paper \"Retinal Fundus Multi-Disease Image Dataset (RFMiD): A Dataset for Multi-Disease Detection Research.\"\n\n* DR - Diabetic retinopathy\n* ARMD - Age-related macular degeneration \n* MH - Media haze\n* DN - Drusen\n* MYA - Myopia\n* BRVO - Branch retinal vein occlusion\n* TSLN - Tessellation \n* ERM - Epiretinal membrane \n* LS - Laser scars \n* MS - Macular scars \n* CSR - Central serous retinopathy \n* ODC - Optic disc cupping \n* CRVO - Central retinal vein occlusion \n* TV - Tortuous vessels\n* AH - Asteroid hyalosis \n* ODP - Optic disc pallor\n* ODE - Optic disc edema\n* ST - Optociliary shunt\n* AION - Anterior ischemic optic neuropathy\n* PT - Parafoveal telangiectasia\n* RT - Retinal traction\n* RS - Retinitis\n* CRS - Chorioretinitis\n* EDN - Exudation\n* RPEC - Retinal pigment epithelium changes\n* MHL - Macular hole\n* RP - Retinitis pigmentosa\n* CWS - Cotton-wool spots\n* CB - Coloboma\n* ODPM - Optic disc pit maculopathy\n* PRH - Preretinal hemorrhage\n* MNF - Myelinated nerve fibers\n* HR - Hemorrhagic retinopathy\n* CRAO - Central retinal artery occlusion\n* TD - Tilted disc\n* CME -Cystoid macular edema\n* PTCR - Post-traumatic choroidal rupture\n* CF - Choroidal folds\n* VH - Vitreous hemorrhage\n* MCA - Macroaneurysm\n* VS - Vasculitis\n* BRAO - Branch retinal artery occlusion\n* PLQ - Plaque\n* HPED - Hemorrhagic pigment epithelial detachment\n* CL - Collateral\n","0ce2738a":"# Exploration and Feature Engineering","897ff2ad":"We'll display some images just to get an idea of what kind of data we're working with.","c8a25f4f":"For the actual training, we'll use area under the curve (AUC) of the receiving operator characteristic (ROC) since it was one of the suggested metrics for the multilabel classification task. ROC is the default value for the curve parameter, so we just initialize the AUC metric from keras without passing any parameters to it.","5b4ba74f":"## Some notes from this:\n* We can see that ODPM and HR have no positive examples so we will drop the columns.\n* Since we're trying to predict specific diseases, we'll drop Disease_Risk to help with imbalancing.\n* A lot of the columns have very few examples, so we will have to do some oversampling and use class weights.\n* Some images are representative of more than one disease, since d_total is greater than the total number of images. We'll need to do multilabel classification.","4cf13d4f":"# Modeling\n\nTo approach this problem I'm creating a U-Net model to use for our classification.","95c4baee":"# Retinal Disease Classification: Multiclass Classification\nThis notebook seeks to classify diseased eyes through use of a computer vision model in TensorFlow.","93aae54e":"DR has our highest count for diseases, so we'll use that number as our target for rebalancing the dataframe with oversampling.","5a777e40":"We'll start off by loading our data into a pandas dataframe and adding the paths to the image files. Since it's already divided into train, validate, and test directories we'll start with making a dataframe for each."}}