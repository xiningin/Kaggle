{"cell_type":{"4b075b2f":"code","bf93b8b0":"code","d600f188":"code","cb6f3e6a":"code","fdb52eb5":"code","517a9025":"code","6968b00c":"code","e34a3a02":"code","091ec862":"code","7fd381a1":"code","df1c53be":"code","e49d96f4":"code","622bb535":"code","e51c42f3":"markdown","41350aa1":"markdown","960c10bc":"markdown","f0eacf76":"markdown","caecc006":"markdown"},"source":{"4b075b2f":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport\nfrom dataclasses import dataclass\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nimport librosa\nimport librosa.display\nimport IPython\n\nfrom sklearn.preprocessing import minmax_scale, MinMaxScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.ensemble import IsolationForest\n\nimport umap\n","bf93b8b0":"@dataclass(frozen=True)\nclass DataPath:\n    input_dir: str = '..\/input\/hah-data-science-challenge'\n    train_wav_dir: str = f'{input_dir}\/train\/train'\n    test_wav_dir: str = f'{input_dir}\/test\/test'\n    train_csv: str = f'{input_dir}\/train.csv'\n    test_csv: str = f'{input_dir}\/test.csv'\n\ndata_path = DataPath()","d600f188":"df_train = pd.read_csv(data_path.train_csv)\ndf_test = pd.read_csv(data_path.test_csv)\n\ndf_train['file_path'] = data_path.train_wav_dir +'\/' +df_train['\u30d5\u30a1\u30a4\u30eb']\ndf_test['file_path'] = data_path.test_wav_dir +'\/'+ df_test['\u30d5\u30a1\u30a4\u30eb']","cb6f3e6a":"file_names = df_train['file_path'].tolist()","fdb52eb5":"from typing import List\n\n# \u30d5\u30fc\u30ea\u30a8\u5909\u63db\u7528\u306ehepler\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3002\nclass FourieTransformHelper:\n    def __init__(self,  \n                 file_names: List[str],\n                 input_dir: str=None):\n        if isinstance(file_names, list):\n            self.file_names = file_names\n        else:\n            raise TypeError(f'file_names type is {type(file_names)} not list!')\n        self.input_dir = input_dir\n        self.spectra, self.frequencies = [], []\n        \n    def _get_spectrum(self, signal, sample_rate):\n        # \u53c2\u8003 https:\/\/medium.com\/analytics-vidhya\/simplifying-audio-data-fft-stft-mfcc-for-machine-learning-and-deep-learning-443a2f962e0e\n        fft = np.fft.fft(signal)\n        spectrum = np.abs(fft)\n        frequency = np.linspace(0, sample_rate, int(len(spectrum)\/2))\n        spectrum = spectrum[:int(len(spectrum)\/2)]\n        return spectrum, frequency\n    \n    def _get_filename(self, file_name):\n            if self.input_dir:\n                return f'{self.input_dir}\/{file_name}'\n            else:\n                return file_name\n    \n    def get_spectra(self):\n        for file_name in tqdm(self.file_names):\n            file_path = self._get_filename(file_name)\n            audio, sample_rate = librosa.load(file_path)\n            # \u9069\u5f53\u306a\u9577\u3055\u306b\u5207\u308a\u53d6\u308b\u3002\u30ad\u30ea\u306e\u3044\u3044\u6570\u5b57\u306b\u3057\u305f\u3002\n            audio = audio[:40000]\n            spectrum, frequency = self._get_spectrum(audio, sample_rate)\n            self.spectra.append(spectrum)\n            self.frequencies.append(frequency)   ","517a9025":"helper = FourieTransformHelper(file_names)\nhelper.get_spectra()","6968b00c":"spectra = minmax_scale(helper.spectra, axis=1)","e34a3a02":"df_frq = pd.DataFrame(spectra)","091ec862":"df = pd.concat([df_train.reset_index(drop=True), df_frq], axis=1)","7fd381a1":"tsne_embed = TSNE().fit_transform(df.iloc[:, 8:])\numap_embed = umap.UMAP().fit_transform(df.iloc[:, 8:])\n\nfig = px.scatter(x=tsne_embed[:,0],y=tsne_embed[:,1], \n                 color=df['Target'].astype(str).tolist(),\n                hover_name=df['\u30d5\u30a1\u30a4\u30eb'].tolist())\nfig.show()\nfig = px.scatter(x=umap_embed[:,0],y=umap_embed[:,1], \n                 color=df['Target'].astype(str).tolist(),               \n                 hover_name=df['\u30d5\u30a1\u30a4\u30eb'].tolist())\nfig.show()","df1c53be":"df_screw_big_plate_big = df[(df['\u306d\u3058']=='\u5927') & (df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')]\n\ntsne_embed = TSNE().fit_transform(df_screw_big_plate_big.iloc[:, 8:])\numap_embed = umap.UMAP().fit_transform(df_screw_big_plate_big.iloc[:, 8:])\n\nfig = px.scatter(x=tsne_embed[:,0],y=tsne_embed[:,1], \n                 color=df_screw_big_plate_big['Target'].astype(str).tolist(),\n                 hover_name=df_screw_big_plate_big['\u30d5\u30a1\u30a4\u30eb'].tolist())\nfig.show()\nfig = px.scatter(x=umap_embed[:,0],y=umap_embed[:,1], \n                 color=df_screw_big_plate_big['Target'].astype(str).tolist(),\n                 hover_name=df_screw_big_plate_big['\u30d5\u30a1\u30a4\u30eb'].tolist())\nfig.show()\n\n","e49d96f4":"df_screw_small_plate_big = df[(df['\u306d\u3058']=='\u5c0f') & (df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')]\n\ntsne_embed = TSNE().fit_transform(df_screw_small_plate_big.iloc[:, 8:])\numap_embed = umap.UMAP().fit_transform(df_screw_small_plate_big.iloc[:, 8:])\n\nfig = px.scatter(x=tsne_embed[:,0],y=tsne_embed[:,1], \n                 color=df_screw_small_plate_big['Target'].astype(str).tolist(),\n                 hover_name=df_screw_small_plate_big['\u30d5\u30a1\u30a4\u30eb'].tolist())\nfig.show()\nfig = px.scatter(x=umap_embed[:,0],y=umap_embed[:,1], \n                 color=df_screw_small_plate_big['Target'].astype(str).tolist(),\n                 hover_name=df_screw_small_plate_big['\u30d5\u30a1\u30a4\u30eb'].tolist())\nfig.show()\n","622bb535":"df_screw_big_plate_small = df[(df['\u306d\u3058']=='\u5927') & (df['\u30d7\u30ec\u30fc\u30c8']=='\u5c0f')]\n\ntsne_embed = TSNE().fit_transform(df_screw_big_plate_small.iloc[:, 8:])\numap_embed = umap.UMAP().fit_transform(df_screw_big_plate_small.iloc[:, 8:])\n\nfig = px.scatter(x=tsne_embed[:,0],y=tsne_embed[:,1], \n                 color=df_screw_big_plate_small['Target'].astype(str).tolist(),\n                 hover_name=df_screw_big_plate_small['\u30d5\u30a1\u30a4\u30eb'].tolist())\nfig.show()\nfig = px.scatter(x=umap_embed[:,0],y=umap_embed[:,1], \n                 color=df_screw_big_plate_small['Target'].astype(str).tolist(),\n                 hover_name=df_screw_big_plate_small['\u30d5\u30a1\u30a4\u30eb'].tolist())\nfig.show()\n\n","e51c42f3":"# \u30cd\u30b8\u3068\u30d7\u30ec\u30fc\u30c8\u3092\u5206\u3051\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u308b\n\n## \u30cd\u30b8\uff1a\u5927\u3000\u30d7\u30ec\u30fc\u30c8\uff1a\u5927","41350aa1":"# \u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u308b","960c10bc":"## \u30cd\u30b8\uff1a\u5c0f\u3000\u30d7\u30ec\u30fc\u30c8\uff1a\u5927","f0eacf76":"## \u30cd\u30b8\uff1a\u5927 \u30d7\u30ec\u30fc\u30c8\uff1a\u5c0f","caecc006":"# \u8208\u5473\n- \u3069\u3093\u306a\u30c7\u30fc\u30bf\u306e\u5f62\u3067\u5165\u308c\u308b\u306e\u304c\u826f\u3044\u306e\u304b\u691c\u8a0e\u3059\u308b\n - \u5168train\u30c7\u30fc\u30bf\n - \u5168train\u30c7\u30fc\u30bf\u3001\u30d7\u30ec\u30fc\u30c8\u30fb\u306d\u3058\u5225"}}