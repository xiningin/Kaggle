{"cell_type":{"a127ae23":"code","327b7644":"code","50723a7a":"code","8ad2a01e":"code","1a54c237":"code","0162aa6a":"code","c1b7dba7":"code","402f2b7e":"code","8d3f299d":"code","a6aff309":"code","3270a03a":"code","1e44e4dd":"code","c614ccc8":"markdown","5420a000":"markdown","c59153c7":"markdown","4852976b":"markdown","43d73a9a":"markdown","fe1f2f1e":"markdown","b87cfc91":"markdown","4244fd59":"markdown","96451bb3":"markdown","ee0d5dc8":"markdown","14c7652a":"markdown","570d7a02":"markdown"},"source":{"a127ae23":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nfrom IPython.display import display, HTML\nfrom itertools import combinations\nfrom tqdm import tqdm\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport os\n\n        \nfrom glob import glob\n\npath_ibov =  glob('\/kaggle\/input\/ibovespa-stocks\/b3*.csv')[0]\n","327b7644":"\ndef pad_time_array(full_time, ts):\n    pad = [i for i in full_time if i not in ts.index]\n    pad_array = np.empty(len(pad))\n    pad_array[:] = np.NaN\n    pad_ts = pd.Series(pad_array, index=pad)\n    ts_new = pd.concat([ts, pad_ts]).sort_index()\n    return ts_new\n\n\ndef get_corr_over_time(df,ticker1, ticker2, window=100):\n    ts1 = returns[ticker1]\n    ts2 = returns[ticker2]\n    corr = ts1.rolling(window).corr(ts2).dropna()\n    corr.name = \"{}_{}_corr_{}\".format(ticker1, ticker2, window)\n    return corr","50723a7a":"df = pd.read_csv(path_ibov)\ndf.loc[:, \"datetime\"] = df.datetime.map(pd.Timestamp)\n\ndf_sorted = df.set_index([\"ticker\", \"datetime\"]).sort_index()","8ad2a01e":"ibov = [\"ABEV3\", \"AZUL4\", \"B3SA3\", \"BBAS3\", \"BBDC3\", \"BBDC4\", \"BBSE3\", \"BPAC11\", \"BRAP4\",\n        \"BRDT3\", \"BRFS3\", \"BRKM5\", \"BRML3\", \"BTOW3\", \"CCRO3\", \"CIEL3\", \"CMIG4\", \"COGN3\", \"CRFB3\",\n        \"CSAN3\", \"CSNA3\", \"CVCB3\", \"CYRE3\", \"ECOR3\", \"EGIE3\", \"ELET3\", \"ELET6\", \"EMBR3\", \"ENBR3\",\n        \"EQTL3\", \"FLRY3\", \"GGBR4\", \"GNDI3\", \"GOAU4\", \"GOLL4\", \"HAPV3\", \"HGTX3\", \"HYPE3\", \"IGTA3\",\n        \"IRBR3\", \"ITSA4\", \"ITUB4\", \"JBSS3\", \"KLBN11\", \"LAME4\", \"LREN3\", \"MGLU3\", \"MRFG3\", \"MRVE3\", \"MULT3\",\n        \"NTCO3\", \"PCAR4\", \"PETR3\", \"PETR4\", \"QUAL3\", \"RADL3\", \"RAIL3\", \"RENT3\", \"SANB11\", \"SBSP3\", \"SMLS3\",\n        \"SULA11\", \"SUZB3\", \"TAEE11\", \"TIMP3\", \"TOTS3\", \"UGPA3\", \"USIM5\", \"VALE3\", \"VIVT4\", \"VVAR3\", \"WEGE3\", \"YDUQ3\"]\n\n\ndf_sort = df.set_index([\"ticker\", \"datetime\"]).sort_index()\nstart_date = \"2007-01-01\"\n\n\nibov_mini = []\nfor ticker in ibov:\n    ts = df_sort.xs(ticker)\n    if ts.index.min() <= pd.Timestamp(start_date):\n        ibov_mini.append(ticker)\n\nsizes = []\n\nfor ticker in ibov_mini:\n    ts = df_sort.xs(ticker).close[start_date:]\n    sizes.append(ts.shape[0])\nmax_size = np.max(sizes)\nmax_id = np.argmax(sizes)\nmax_ticker = ibov_mini[max_id]\n\n\nfull_time = df_sort.xs(max_ticker).close[start_date:].index\n\nall_ts = []\nfor ticker in tqdm(ibov_mini):\n    ts = df_sort.xs(ticker).close[start_date:]\n    ts = pad_time_array(full_time, ts)\n    ts.name = ticker\n    all_ts.append(ts)\n    \nprices = pd.concat(all_ts,1)\nprices = prices.interpolate(\"linear\", limit_direction=\"both\")\nreturns = prices.pct_change().dropna()\n\ndel df_sort\n\nratio = len(ibov_mini)\/len(ibov)\nprint(\"percentage of ibov's tickers that will be used in the analysis = {:.1%}\".format(ratio))\n\ndisplay(HTML(returns.head(5).to_html()))\ndisplay(HTML(returns.tail(5).to_html()))","1a54c237":"## Selecting the top_n most correlated tickers\ncorr = returns.corr().abs().unstack()\ncorr = corr.sort_values(kind=\"quicksort\")\ncorr= corr[corr < 1.0][::-1]\ntop_n = 4\nmost_ticker_corr = list(set([c[0] for c in corr[:top_n].index] + [c[1] for c in corr[:top_n].index]))\nsmall_returns = returns[most_ticker_corr]\n\n\nsns.pairplot(small_returns, diag_kind='hist')\nplt.show()","0162aa6a":"corr = returns.corr().abs().unstack()\ncorr = corr.sort_values(kind=\"quicksort\")\ncorr= corr[corr < 1.0][::-1]\ntop_n = 20\nmost_ticker_corr = list(set([c[0] for c in corr[:top_n].index] + [c[1] for c in corr[:top_n].index]))\nsmall_returns = returns[most_ticker_corr]\n\ncorr = small_returns.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nfig, ax = plt.subplots(figsize=(12,8))\nsns.heatmap(corr, mask=mask, cmap=\"Blues\", center=0, linewidths=1, annot=True, fmt=\".2f\", ax=ax);","c1b7dba7":"year_array = returns.index.map(lambda x: int(x.year))\nreturns.plot.scatter(\"PETR3\", \"PETR4\", c=year_array, cmap=plt.cm.viridis);","402f2b7e":"n = year_array.shape[0]\nrandom1 = np.random.normal(0,1,n)\nrandom2 = np.random.normal(0,1,n)\ndf_random = pd.DataFrame(np.stack([random1, random2]).T, columns=[\"R1\",\"R2\"])\n\ndf_random.plot.scatter(\"R1\", \"R2\", c=year_array, cmap=plt.cm.viridis);","8d3f299d":"time_array = returns[\"2018-01-01\":\"2018-05-01\"].index.map(lambda x: int(x.month))\nreturns[\"2018-01-01\":\"2018-05-01\"].plot.scatter(\"BBAS3\", \"BBDC4\", c=time_array, cmap=plt.cm.viridis);\n\ntime_array = returns[\"2019-01-01\":\"2019-05-01\"].index.map(lambda x: int(x.month))\nreturns[\"2019-01-01\":\"2019-05-01\"].plot.scatter(\"BBAS3\", \"BBDC4\", c=time_array, cmap=plt.cm.viridis);\n\ntime_array = returns[\"2020-01-01\":\"2020-05-01\"].index.map(lambda x: int(x.month))\nreturns[\"2020-01-01\":\"2020-05-01\"].plot.scatter(\"BBAS3\", \"BBDC4\", c=time_array, cmap=plt.cm.viridis);","a6aff309":"corr1 = get_corr_over_time(returns,\"BBAS3\",\"BBDC4\", 100)\ncorr2 = get_corr_over_time(returns,\"ITSA4\", \"BBDC4\", 100)\ncorr = pd.concat([corr1, corr2], 1)\n\nfig, ax = plt.subplots(figsize=(12,6))\ncorr.plot(ax=ax);","3270a03a":"combs = list(combinations(returns.columns, r=2))\nall_corr = []\nwindow = 60\n\nfor t1,t2 in tqdm(combs):\n    corr = get_corr_over_time(returns,t1,t2, window=window)\n    all_corr.append(corr)\n\nall_corr = pd.concat(all_corr, 1)\ncorr_mean = all_corr.mean(1)\ncorr_std = all_corr.std(1)\nindex = all_corr.index","1e44e4dd":"fig, ax = plt.subplots(figsize=(30,10))\nax.errorbar(index, corr_mean, yerr=corr_std,linewidth=2.5, elinewidth=0.15, fmt='-', label=\"Rolling Correlation (window = {})\".format(window));\nax.legend(loc=\"best\");\nax.set_xlabel(\"datetime\", fontsize=14);\nax.set_ylabel(\"Correlation coefficient\", fontsize=14);\nax.set_title(\"Mean rolling correlation for Ibovespa's tickers\", fontsize=18);\nax.vlines(pd.to_datetime(\"2020-03-13\"),0,1, color =\"k\", linestyle=\"--\", label=\"Covid-19\");\nax.vlines(pd.to_datetime(\"2008-10-06\"),0,1, color =\"k\", linestyle=\":\", label=\"Subprime Mortgage Crisis\");\nax.legend(loc=\"best\");\nplt.savefig(\"corr.png\")","c614ccc8":"# Visualizing Return Correlation\n","5420a000":"## Selecting Ibov tickers using a start date","c59153c7":"## Pairplot","4852976b":"### Basic Functions","43d73a9a":"## Heatmap","fe1f2f1e":"### Example of a non-correlated plot","b87cfc91":"### Plotting rolling correlation over time","4244fd59":"### All Import","96451bb3":"### Plotting mean rolling correlation for all tickers in the data","ee0d5dc8":"### Comparing correlation for different years\n#### January-May for 2018, 2019, 2020","14c7652a":"> ## Scatterplot\n\n### Example of a high-correlated plot","570d7a02":"### Loading data"}}