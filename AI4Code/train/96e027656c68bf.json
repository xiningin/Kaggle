{"cell_type":{"329f2165":"code","414c0305":"code","108c40bc":"code","5bae1f92":"code","3a30cb81":"code","7ed1539d":"code","e782ed63":"code","badeb351":"code","34f9f631":"code","43855e15":"code","925bed10":"code","6c589423":"code","e41d71e8":"code","70220ed7":"code","bd4c87f9":"code","d175cf9a":"code","39aa8561":"code","d53ea05b":"code","98ca2b7f":"code","fc47fbd3":"code","c2d3b56c":"code","ee68f56d":"markdown","5a2e4eef":"markdown","83890881":"markdown","a68e2d91":"markdown","2793d2f1":"markdown","98d2f04d":"markdown","bbe91ba5":"markdown","b54e5513":"markdown","f0b4280c":"markdown"},"source":{"329f2165":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-whitegrid')\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","414c0305":"df_train = pd.read_csv('..\/input\/ipl-2020-player-performance\/Training.csv')\nmatch2020 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\nprev_match = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\nplayers =  pd.read_csv('..\/input\/ipl-2020-player-performance\/IPL 2020 Squads.csv', encoding='windows-1254')\ndf_train.head()","108c40bc":"prev_match.isna().sum()","5bae1f92":"plt.subplots(figsize = (15,4))\nsns.countplot(x = prev_match['season'] , data = prev_match)\nplt.show()","3a30cb81":"plt.subplots(figsize = (15,4))\nsns.countplot(x = prev_match['city'] , data = prev_match , \n              order = prev_match.city.value_counts().iloc[:9].index)\nplt.show()","7ed1539d":"plt.subplots(figsize = (15,4))\nsns.countplot(x = prev_match['winner'] , data = prev_match ,\n              order = prev_match.winner.value_counts().iloc[:5].index)\nplt.show()","e782ed63":"best_player = df_train.nlargest(5 , ['Batting_Points'])\nplt.subplots(figsize = (20,4))\nplt.bar(best_player['Id'] , best_player['Batting_Points'] , color = 'lightblue')\nplt.show()","badeb351":"df_train['player'] = df_train['Id']\ndf_train['number'] = df_train['Id']\n\nfor i in range(len(df_train)):\n    df_train['player'][i] = df_train['Id'][i].split(\"_\")[-1]\n    df_train['number'][i] = int(df_train['Id'][i].split('_')[:1][0])\n    \ndf_train.head()","34f9f631":"df = pd.DataFrame()\ndf['match_number'] = df_train['number']\ndf['player'] = df_train['player']\ndf['total_score'] = df_train['Total Points']","43855e15":"df = df.groupby(['player', 'match_number'], axis = 0, as_index = False).sum()\ndf.index = df['player']\ndf.drop('player', axis = 1, inplace = True)\ndf","925bed10":"match1 = df[df.match_number == 1]['total_score'].sort_index(ascending = True)\nmatch2 = df[df.match_number == 2]['total_score'].sort_index(ascending = True)\nmatch3 = df[df.match_number == 3]['total_score'].sort_index(ascending = True)\nmatch4 = df[df.match_number == 4]['total_score'].sort_index(ascending = True)","6c589423":"train_df = df.groupby('player').apply(lambda x: x.iloc[1:-1])\ntest_df = df.groupby('player').tail(1)\ntest_df.head()","e41d71e8":"from statsmodels.tsa.holtwinters import ExponentialSmoothing \n\nmodel = ExponentialSmoothing(np.asarray(train_df['total_score']) , seasonal_periods = 10 , \n                            trend = 'additive' , seasonal = None)\n\nmodel_fit = model.fit(smoothing_level = 0.2 , smoothing_trend = 0.01 , optimized = False)\n\nparams = model_fit.params\n\ntest = test_df.copy()\n\ntest['forecast'] = model_fit.forecast(559)\ntest['forecast'].abs()","70220ed7":"pred_df = pd.read_csv('..\/input\/ipl-2020-player-performance\/sample_submission.csv')\n\npred_df['player'] = pred_df['Id']\npred_df['number'] = pred_df['Id']\n\nfor i in range(0, len(pred_df)):\n    pred_df['player'][i] = pred_df['Id'][i].split(\"_\")[-1]\n    pred_df['number'][i] = int(pred_df['Id'][i].split('_')[:1][0])\n    \ndf = pd.DataFrame()\ndf['match_number'] = pred_df['number']\ndf['player'] = df_train['player']\ndf.head()","bd4c87f9":"df = df.groupby(['player', 'match_number'], axis = 0, as_index = False).sum()\ndf.drop('player', axis = 1, inplace = True)\ndf","d175cf9a":"test_data = df.copy()\ntest_data['forecast'] = model_fit.forecast(1279)\npredictions = test_data['forecast'].abs() \n\npredictions","39aa8561":"df = pd.DataFrame()\ndf['match_number'] = pred_df['number']\ndf['player'] = df_train['player']\ndf = df.groupby(['player', 'match_number'], axis = 0, as_index = False).sum()\ndf['id'] = pred_df['number']\n\nfor i in range(len(df)):\n    df['id'][i] = df['match_number'][i].astype('str') + str('_') + df['player'][i]","d53ea05b":"# df.drop('player' , axis = 1 , inplace = True)\n# df","98ca2b7f":"df['Total Points'] = predictions\ndf = df.sort_values(by = ['match_number'])\ndf","fc47fbd3":"sub = pd.DataFrame()\nsub['id'] = df['id']\nsub['Total Points'] = df['Total Points']\nsub","c2d3b56c":"sub.to_csv('Neolen.csv', index = False)","ee68f56d":"Chris Gayle is the Best Player","5a2e4eef":"Quite a few Null Values","83890881":"# **Prepping Dataset for Submission**","a68e2d91":"Mumbai Indians Won the Most Matches","2793d2f1":"Most Matches Played in 2013","98d2f04d":"Most Matches played in Mumbai\n\n","bbe91ba5":"# **Visualization**","b54e5513":"# **Model**","f0b4280c":"# **Data Cleaning**"}}