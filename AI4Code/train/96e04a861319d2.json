{"cell_type":{"cbb2de8e":"code","1ee1cc6c":"code","5d43b916":"code","1b63cc33":"code","884bc347":"code","e52219c8":"code","e7dd6e71":"code","255b2c46":"code","22903e39":"code","49a9e988":"code","1cd0cc68":"code","d71103f7":"code","a6ff8ffd":"code","63753da7":"code","31d96a1a":"code","df6a4650":"code","4bf55cf5":"code","f64022f2":"code","fa47c978":"code","a706db73":"code","f04a7fc3":"code","ced29267":"code","f82b0696":"code","d96ad55f":"code","f1055659":"markdown","53993d90":"markdown","d82d3ab8":"markdown","6515c323":"markdown","9efcd0c7":"markdown","c240d08b":"markdown","a7d30f10":"markdown","4e15e494":"markdown","3c8d61ac":"markdown","108259e5":"markdown","47550b2e":"markdown","a4b0df32":"markdown","a3362291":"markdown","b0795144":"markdown","4454622b":"markdown","06f3ca79":"markdown","e060b74a":"markdown","644fa98f":"markdown","9f44e390":"markdown"},"source":{"cbb2de8e":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","1ee1cc6c":"from timeit import timeit\n\ndef concat_method():\n    num = 100\n    s = ''\n    for i in range(num):\n        s = s + 'python everyday'\n        \ndef join_method():\n    num = 100\n    ''.join('python everyday' for i in range(num))\n    \nprint(\"String concatenation using '+':\", timeit(concat_method,number=1000)*1000)\nprint(\"String concatenation using join:\", timeit(join_method,number=1000)*1000)","5d43b916":"def tmpvar_method():\n    x = 10\n    y = 5\n    tmp = x\n    x = y\n    y = tmp\n\ndef unpack_method():\n    x = 10\n    y = 5\n    x, y = y, x\n    \nprint(\"1:\", timeit(tmpvar_method,number=1000)*1000)\nprint(\"2:\", timeit(unpack_method,number=1000)*1000)","1b63cc33":"### Dictionary cant be added as is\nA = {'a':1, 'b':2, 'c':3}\nB = {'b':3, 'c':4, 'd':5}\nA+B","884bc347":"from collections import Counter\nA = Counter({'a':1, 'b':2, 'c':3})\nB = Counter({'b':3, 'c':4, 'd':5})\nA + B","e52219c8":"### Similarly subtraction, intersection and union\nA & B","e7dd6e71":"from collections import defaultdict\ns = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1), ('blue', 9)]\nd = defaultdict(list)\nfor k, v in s:\n    d[k].append(v)\n\nsorted(d.items())","255b2c46":"from collections import Counter\nfrom itertools import chain\nd = [{\"a\":\"politics\"}, {\"a\": \"sports\"}, {\"a\": \"politics\"}, {\"b\": \"politics\"}, {\"c\":\"politics\"}, {\"c\":\"movies\"},{\"c\":\"sports\"}, {\"c\":\"news\"}, {\"b\":\"sports\"}]\nCounter(chain.from_iterable(e.keys() for e in d))","22903e39":"Counter('python everyday').most_common(3)","49a9e988":"list_check = list(range(1000))\n%timeit list_check.pop; list_check.append(None)","1cd0cc68":"from collections import deque\ndeque_check = deque(list_check)\n%timeit deque.pop; deque_check.append(None)","d71103f7":"from collections import Counter, OrderedDict\nOrderedDict(Counter(\"mississippi\"))","a6ff8ffd":"d={'a':[1,2,1], 'b':[1,2,3], 'c':[2,2,3]}\nCounter(v for sublist in d.values() for v in sublist)","63753da7":"def even(k):\n    for i in range(k):\n        if i % 2 != 0:\n            yield i\neven(100)","31d96a1a":"import collections, types\nissubclass(types.GeneratorType, collections.Iterator)\nissubclass(collections.Iterator, collections.Iterable)","df6a4650":"add_list = [x+2 for x in range(10)]\nadd_list","4bf55cf5":"for i in range(5):\n    print(i)","f64022f2":"def in_method():\n    d = {\"a\": 10, \"b\": 20}\n\n    \"c\" in d\n    \ndef get_method():\n    bool(d.get('c', 0))\n    \nprint(\"1:\", timeit(in_method,number=1000)*1000)\nprint(\"2:\", timeit(get_method,number=1000)*1000)    ","fa47c978":"list1 = [1,2,3,4]\n%timeit bool(2 in list1)\n%timeit bool(2 in set(list1))","a706db73":"a = {1,2,3,4}\nb = {4,5,6}\n%timeit bool(a.intersection(b))\n%timeit bool(a & b)","f04a7fc3":"def dec_cache(func):\n    cache_dict = {}\n    def wrapper(arg):\n        if arg not in cache_dict:\n            cache_dict[arg] = func(arg)\n        return cache_dict[arg]\n    return wrapper\n\n\n@dec_cache\ndef fib(N):\n    if N < 0:\n        return None\n    if N < 2:\n        return N\n    else:\n        return fib(N-1) + fib(N-2)\nfib(10)","ced29267":"a, b, c = [1, 2, 3]\na, b, *c = [1,2,3,4,5]\nprint(c)","f82b0696":"import numpy as np\nimport functools\n\ndef func(x):\n    if x % 2 == 0:\n        return x\nlist(filter(func, range(1, 20)))\n\ndef exp(x): \n    return np.exp(x)\n\nlist(map(exp, range(1, 11)))\n\ndef add(x,y): \n    return x+y\nfunctools.reduce(add, range(1, 5))","d96ad55f":"import cProfile\nimport re\ndef fib(N):\n    if N < 0:\n        return None\n    if N < 2:\n        return N\n    else:\n        return fib(N-1) + fib(N-2)\n%prun fib(10)","f1055659":"### Generator object","53993d90":"### string concatenation","d82d3ab8":"### Decorator Fibonacci Example","6515c323":"### intersection vs & operator","9efcd0c7":"### Range","c240d08b":"### group a sequence of key-value pairs into a dictionary of lists","a7d30f10":"### Variable swapping","4e15e494":"### Deque ","3c8d61ac":"### in vs get","108259e5":"### Iterator","47550b2e":"### Lambda","a4b0df32":"### Flatten the dictionary","a3362291":"### OrderedDict","b0795144":"### in vs set for checking element","4454622b":"### dictionary","06f3ca79":"### Count in a string","e060b74a":"### Example of Counter","644fa98f":"### Unpacking operator","9f44e390":"### Python Tricks, code optimization and more"}}