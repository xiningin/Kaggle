{"cell_type":{"e052b236":"code","1324bf3a":"code","c0194aac":"code","0e403e4d":"code","450dba1b":"code","636a2bf7":"code","d4b0cda4":"code","3641357c":"code","8698041a":"code","94319804":"code","3c6b3318":"code","da5215de":"code","461d8e88":"code","ea9332a9":"code","e228ac6b":"code","e1ab7249":"code","07af2579":"code","0f3a6056":"code","9d556c37":"code","9a1a538e":"code","d2a95613":"code","01bd8afa":"code","0067e94f":"code","2f3f506a":"code","fa23046d":"code","e4694c96":"code","b0d4db13":"markdown","59e584a5":"markdown","0af3e1f3":"markdown","57d968f5":"markdown","9d85d164":"markdown","dc61091b":"markdown","3a3a3293":"markdown","2c612ac6":"markdown","9e34483f":"markdown","fecee31c":"markdown","c6c11d20":"markdown","831e7618":"markdown","fec813e2":"markdown"},"source":{"e052b236":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1324bf3a":"import numpy as np\nimport pandas as pd\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt","c0194aac":"data = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","0e403e4d":"data.head()","450dba1b":"data.info()","636a2bf7":"data.isnull().sum()","d4b0cda4":"data.describe()","3641357c":"data.corr()","8698041a":"plt.figure(figsize=(12,12))\nsns.heatmap(data=data.corr(),annot=True)\nplt.show()","94319804":"for i in data.columns:\n    if i ==\"quality\":\n        break\n    sns.boxplot(\"quality\",i,data=data)\n    plt.show()","3c6b3318":"data.corr()['quality']","da5215de":"data['quality'].value_counts()","461d8e88":"bins_ = (2,6,8)\nlabels_ = ['bad','good']\ndata['quality']=pd.cut(data['quality'],bins=bins_,labels=labels_)\nprint(data['quality'])","ea9332a9":"from sklearn.preprocessing import LabelEncoder\nlabelencoder_y = LabelEncoder()\ndata['quality'] = labelencoder_y.fit_transform(data['quality'])\ndata['quality']","e228ac6b":"from sklearn.model_selection import train_test_split, cross_val_score\n#Now separate the dataset as response variable and feature variabes\nX = data.drop('quality', axis = 1)\nY = data['quality']","e1ab7249":"#Train and Test splitting of data \nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)","07af2579":"sc = StandardScaler()\nX_train_scaled = sc.fit_transform(X_train)\nX_test_scaled = sc.fit_transform(X_test)\n","0f3a6056":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\n%matplotlib inline","9d556c37":"\nclassifier_knn = KNeighborsClassifier(weights = 'distance')\nclassifier_knn.fit(X_train_scaled, Y_train)\nY_pred_knn = classifier_knn.predict(X_test_scaled)","9a1a538e":"#Let's see how our model performed\nprint(classification_report(Y_test, Y_pred_knn))","d2a95613":"print (\"KNN ACCURACY : \",accuracy_score(Y_test, Y_pred_knn))","01bd8afa":"# Fitting classifier to the Training set\n\nclassifier_svm_linear = SVC()\nclassifier_svm_linear.fit(X_train_scaled, Y_train)\nY_pred_svm = classifier_svm_linear.predict(X_test_scaled)","0067e94f":"#Let's see how our model performed\nprint(classification_report(Y_test, Y_pred_svm))","2f3f506a":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train_scaled, Y_train)\nY_pred_rfc = rfc.predict(X_test_scaled)","fa23046d":"#Let's see how our model performed\nprint(classification_report(Y_test, Y_pred_rfc))","e4694c96":"print(\"KNN ACCURACY : \",accuracy_score(Y_test, Y_pred_knn))\nprint(\"SVM : \",accuracy_score(Y_test, Y_pred_svm))\nprint(\"RANDOM FOREST : \",accuracy_score(Y_test, Y_pred_rfc))","b0d4db13":"# **IMPORT LIBRARIES**","59e584a5":"# **MODELS**","0af3e1f3":"   # **Random Forest**","57d968f5":"0 : Bad   1 : Good","9d85d164":"# **EXPLORATORY DATA ANALYSIS**","dc61091b":"# **SCALING**","3a3a3293":"CORRELATION HEAT MAP","2c612ac6":"# **TRAIN - TEST SPLIT**","9e34483f":"# **SVM**","fecee31c":"# **READ THE DATA**","c6c11d20":"# **K Nearest Neighbour**","831e7618":"# **ACCURACIES**","fec813e2":"ENCODE"}}