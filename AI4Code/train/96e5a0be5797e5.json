{"cell_type":{"2377c678":"code","a5fb78c2":"code","132d0102":"code","cbc9a90d":"code","adbcd6fd":"code","2db915af":"code","cbb7bbe7":"code","202355a4":"code","15784729":"code","4ab2f654":"code","d0f2b089":"code","8a8d4517":"code","577556fd":"code","23e94bb0":"code","aa4f91a2":"code","13d65d75":"code","2f0db90e":"code","0215c3d5":"code","0f5bade9":"markdown","396973b0":"markdown","db00f819":"markdown","294ff1a9":"markdown","03d77930":"markdown","c1d1c4b1":"markdown","400e6672":"markdown","ce2452e8":"markdown","e754fee1":"markdown","1fb17c7b":"markdown","91d8fb40":"markdown","59a648b4":"markdown","8a34c3f9":"markdown","56f41643":"markdown","bd4106cc":"markdown","0bd08838":"markdown","2d1b1541":"markdown","8b048b48":"markdown","b077dd5f":"markdown","5b38d5fe":"markdown","6e87daf2":"markdown","5fa82271":"markdown","2fedf48c":"markdown","433d9acb":"markdown","1da9403e":"markdown","c5d043f2":"markdown","39d6104b":"markdown","73aaf494":"markdown"},"source":{"2377c678":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nplt.style.use('fivethirtyeight') # For plots","a5fb78c2":"pjme = pd.read_csv('..\/input\/hourly-energy-consumption\/PJME_hourly.csv',index_col=[0], parse_dates=[0])\nstart_date = '01-Jan-2008'\npjme = pjme.loc[pjme.index >= start_date]\npjme=pjme.reset_index()\npjme.head()","132d0102":"fig, ax = plt.subplots(1,1, figsize=(10,5))\nsns.lineplot(x=pjme.Datetime, y = pjme[\"PJME_MW\"], color = \"#00BA38\")\nax.title.set_text('Power consumption from 2008 to 2018')","cbc9a90d":"def create_features(df, label=None):\n    \"\"\"\n    Creates time series features from datetime index.\n    \"\"\"\n    df['date'] = df.Datetime\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    X = df[['date','hour','dayofweek','quarter','month','year','dayofyear','dayofmonth','weekofyear']]\n    \n    if label:\n        y = df[label]\n        return X, y\n    return X","adbcd6fd":"# See our features and target\nX, y = create_features(pjme, label='PJME_MW')\nfeatures_and_target = pd.concat([X, y], axis=1)\nfeatures_and_target.head()","2db915af":"sns.pairplot(features_and_target.dropna(),\n             hue='hour',\n             x_vars=['hour','dayofweek','year','weekofyear'],\n             y_vars='PJME_MW',\n             height=5,\n            )\nplt.suptitle('Energy consumption in MW by Hour, Day of Week, Year and Week of Year')\nplt.show()","cbb7bbe7":"split_date = '01-Jan-2015'\npjme_train = pjme.loc[pjme.date <= split_date].copy()\npjme_test = pjme.loc[pjme.date > split_date].copy()","202355a4":"# Plot train and test set to see the split\nsns.lineplot(x = pjme_train.date, y = pjme_train[\"PJME_MW\"], color = \"#00BA38\")\nsns.lineplot(x = pjme_test.date, y = pjme_test[\"PJME_MW\"], color = \"#00B9E3\")","15784729":"# Format data for prophet model using ds and y\npjme_train_prophet = pjme_train.reset_index().rename(columns={'Datetime':'ds','PJME_MW':'y'})\npjme_train_prophet.head()","4ab2f654":"# Setup and train model and fit\nmodel = Prophet()\nmodel.fit(pjme_train_prophet)","d0f2b089":"# Predict on training set with model\npjme_test_prophet = pjme_test.reset_index().rename(columns={'Datetime':'ds'})\npjme_test_forecast = model.predict(df=pjme_test_prophet)\npjme_test_forecast.head()","8a8d4517":"# Plot the components of the model\nfig = model.plot_components(pjme_test_forecast)","577556fd":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.Datetime, pjme_test['PJME_MW'], color='g')\nfig = model.plot(pjme_test_forecast, ax=ax)","23e94bb0":"# Plot the forecast with the actuals\nfrom datetime import datetime\ndatetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.Datetime, pjme_test['PJME_MW'], color='g')\nfig = model.plot(pjme_test_forecast, ax=ax)\nax.set_xbound(lower=datetime.strptime('04-01-2015', \"%m-%d-%Y\"),\n              upper=datetime.strptime('05-01-2015', \"%m-%d-%Y\"))\nax.set_ylim(0, 60000)\nplot = plt.suptitle('April 2015 Forecast vs Actuals')","aa4f91a2":"f, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(pjme_test.Datetime, pjme_test['PJME_MW'], color='g')\nfig = model.plot(pjme_test_forecast, ax=ax)\nax.set_xbound(lower=datetime.strptime('04-01-2015', \"%m-%d-%Y\"), upper=datetime.strptime('04-08-2015', \"%m-%d-%Y\"))\nax.set_ylim(0, 60000)\nplot = plt.suptitle('First Week of April Forecast vs Actuals')","13d65d75":"mse = mean_squared_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_forecast['yhat'])\n\nprint(\"The MSE on the test set is : \\n {}\".format(mse))","2f0db90e":"mae = mean_absolute_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_forecast['yhat'])\n\nprint(\"The MAE on the test set is : \\n {}\".format(mae))","0215c3d5":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nmape = mean_absolute_percentage_error(y_true=pjme_test['PJME_MW'],\n                   y_pred=pjme_test_forecast['yhat'])\n\nprint(\"The MAPE on the test set is : \\n {}\".format(mape))","0f5bade9":"## Table of Contents\n\n* [Part 1 : Exploratory Data Analysis (EDA) ](#chapter1)\n    \n* [Part 2 : Model forecast : with Facebook Prophet](#chapter2)\n\n* [Part 3 : Prediction analysis](#chapter3)\n\n* [Part 4 : Conclusion](#chapter4)","396973b0":"# Part 4 : Conclusion  <a class=\"anchor\" id=\"chapter4\"><\/a>","db00f819":"1. Import useful libraries","294ff1a9":"16. plot the first week of april data against the model's predictions","03d77930":"15. Compare in a graph predictions for the april month against reality.","c1d1c4b1":"# \ud83d\udcc8 Introduction to Time Series Forecasting (with Facebook's Prophet)","400e6672":"5. Create an object `features_and_target` containing both and display the first few lines","ce2452e8":"13. Plot the trend, the yearly seasonnality, the weekly seasonnality, and the daily seasonnality.","e754fee1":"4. Create this collection of new variables :\n* ```date``` equal to the Datetime\n* ```hour``` equal to the hour of the day\n* ```dayofweek```\n* ```quarter```\n* ```month```\n* ```year```\n* ```dayofyear```\n* ```dayofmonth```\n* ```weekofyear```\n\n--> Create an object X containing the above variables and y containing the time series","1fb17c7b":"## What Time Series Forecasting is ?","91d8fb40":"- `Dark` is the past Data\n- `Green` is the actual\n- `Dark blue` is the prediction\n- `Light blue` is the uncertainty","59a648b4":"3. Plot the time series","8a34c3f9":"\n6. Plot the time series against hour, dayofweek, year, weekofyear\n","56f41643":"11. Make predictions with your trained default prophet model on the test set","bd4106cc":"7. Cut off the data after 2015 to use as our validation set. We will train on earlier data.","0bd08838":"In this tutorial, I have showed how to use the Facebook Prophet library for time series forecasting.\n\nSpecifically, the following parts are covered:\n\n- What Facebook Prophet is and how to use it.\n- How to explore an univariate time series time series data\n- How to fit Prophet models and use them to make in-sample and out-of-sample forecasts.\n- How to evaluate a Prophet model on a hold-out dataset with 3 metrics.\n\nYou can find the Prophet documentation here : https:\/\/facebook.github.io\/prophet\/\n\nThanks for reading \ud83d\ude00","2d1b1541":"# Part 1 : Exploratory Data Analysis (EDA)  <a class=\"anchor\" id=\"chapter1\"><\/a>","8b048b48":"8. plot the series with different colors for the train and test set to visualize the separation.","b077dd5f":"![a.jfif](attachment:33ba305a-ba9d-4ec0-b459-920ab2025909.jfif)","5b38d5fe":"10. Create an instance of the Prophet model and fit it on the train data.","6e87daf2":"2. import the data","5fa82271":"14. Plot the forcasts against the actual values in the test set.","2fedf48c":"The goal of this project is to provide an introduction to time series forecasting by analyzing energy consumption in the United States between 2015 and 2019.\n\nThe energy consumption is expressed in Mega Watt (MW) and we have data available for all hours. \nWe will start by analyzing the time series and then we will predict with a degree of uncertainty the future consumption.","433d9acb":"## Project Description","1da9403e":"# Part 3 : Prediction analysis  <a class=\"anchor\" id=\"chapter3\"><\/a>","c5d043f2":"Time series forecasting occurs when you make scientific predictions based on historical time stamped data. It involves building models through historical analysis and using them to make observations and drive future strategic decision-making.\n\n**Application of Time Series forecasting :**\n\nForecasting has a range of applications in various industries. It has tons of practical applications including: weather forecasting, climate forecasting, economic forecasting, healthcare forecasting engineering forecasting, finance forecasting and more !\n\n**The Facebook Prophet library :**\n\nThe Prophet library is an open-source library designed for making forecasts for univariate time series datasets. It is easy to use and designed to automatically find a good set of hyperparameters for the model in an effort to make skillful forecasts for data with trends and seasonal structure by default.","39d6104b":"17. Calculate the MSE, the MAE and the MAPE (mean obsolute percentage error) for this model over the test dataset\n$$MAPE = \\frac{1}{n}\\sum_{t=1}^{n}|\\frac{Y_t - \\hat{Y_t}}{Y_t}|$$","73aaf494":"# Part 2 : Model forecast : with Facebook Prophet  <a class=\"anchor\" id=\"chapter2\"><\/a>\n9. In pjme_train rename the Datetime variable \"ds\" and PJME_MW \"y\" to fit into the Prophet framework"}}