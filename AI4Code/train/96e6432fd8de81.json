{"cell_type":{"02540e31":"code","363ad8ac":"code","3f7b93a1":"code","0a2e5830":"code","3358866a":"code","342d255a":"code","1c254002":"code","ed60a341":"code","11e07bf1":"markdown","25aad688":"markdown"},"source":{"02540e31":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer","363ad8ac":"train_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')","3f7b93a1":"train_text = train_data['question_text']\ntest_text = test_data['question_text']\ntrain_target = train_data['target']\nall_text = train_text.append(test_text)","0a2e5830":"tfidf_vectorizer = TfidfVectorizer()\ntfidf_vectorizer.fit(all_text)\n\ntrain_text_features_tf = tfidf_vectorizer.transform(train_text)\ntest_text_features_tf = tfidf_vectorizer.transform(test_text)","3358866a":"target0_index = list(train_data.query(\"target == 0\").index)\ntarget1_index = list(train_data.query(\"target == 1\").index)\nprint(len(target0_index))\nprint(len(target1_index))","342d255a":"# check the difference between target1 and target0\ntarget0_score = train_text_features_tf[target0_index]\ntarget1_score = train_text_features_tf[target1_index]\n\ndiff_score = np.mean(target1_score, axis=0) - np.mean(target0_score, axis=0)\ndiff_ary = np.argsort(-diff_score).tolist()[0]\nprint(diff_score)","1c254002":"# insincere words\nfor i in range(30):\n    insincere_word = tfidf_vectorizer.get_feature_names()[diff_ary[i]]\n    insincere_data = train_data[train_data['question_text'].str.contains(insincere_word)]\n    print(\"======================\")\n    print(insincere_word)\n    print(\"len: {}\".format(len(insincere_data)))\n    print(\"mean: {}\".format(np.mean(insincere_data[\"target\"])))\n    print(\"======================\")","ed60a341":"# NOT insincere words\nfor i in range(30):\n    insincere_word = tfidf_vectorizer.get_feature_names()[diff_ary[-(i+1)]]\n    insincere_data = train_data[train_data['question_text'].str.contains(insincere_word)]\n    print(\"======================\")\n    print(insincere_word)\n    print(\"len: {}\".format(len(insincere_data)))\n    print(\"mean: {}\".format(np.mean(insincere_data[\"target\"])))\n    print(\"======================\")","11e07bf1":"Below words may be insincere:\n\n* Race\n* Sex\n* skin color\n\nBelow words might not be insincere:\n* work (job, work, learn, business, ... engineering is very low! :D )\n* positive word(good, best)\n\n","25aad688":"I'm beginner at NLP, so I learn a lot from kernel. Thank you for post great kernel!<br>\nThis is my cheap approach, \"Which word make possibility of insincere sentence high?\""}}