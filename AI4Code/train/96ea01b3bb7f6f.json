{"cell_type":{"d39f7b1e":"code","aed0c201":"code","f0edfecf":"code","837fa592":"code","58728ee2":"code","3eba4b08":"code","1d85064a":"code","06dfcf23":"code","87c26b95":"code","28d220dd":"code","e2dcb184":"code","2d27a17d":"code","1ec6aecc":"code","65018e9a":"code","5cd473d2":"code","9e7ef453":"code","d34e1f67":"code","a379ed2c":"markdown"},"source":{"d39f7b1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os","aed0c201":"path = \"\/kaggle\/input\/utkface-new\/UTKFace\/\"\nfiles = os.listdir(path)\nsize = len(files)\nprint(\"Total samples:\",size)\nprint(files[0])","f0edfecf":"import cv2\nimages = []\nages = []\ngenders = []\nfor file in files:\n    image = cv2.imread(path+file,0)\n    image = cv2.resize(image,dsize=(64,64))\n    image = image.reshape((image.shape[0],image.shape[1],1))\n    images.append(image)\n    split_var = file.split('_')\n    ages.append(split_var[0])\n    genders.append(int(split_var[1]) )","837fa592":"import matplotlib.pyplot as plt\nx_ages = list(set(ages))\ny_ages = [ages.count(i) for i in x_ages]\nplt.bar(x_ages,y_ages)\nplt.show()\nprint(\"Max value:\",max(ages))","58728ee2":"def display(img):\n    plt.imshow(img[:,:,0])\n    plt.set_cmap('gray')\n    plt.show()\nidx = 500\nsample = images[idx]\nprint(\"Gender:\",genders[idx],\"Age:\",ages[idx])\ndisplay(sample)","3eba4b08":"def age_group(age):\n    if age >=0 and age < 18:\n        return 1\n    elif age < 30:\n        return 2\n    elif age < 80:\n        return 3\n    else:\n        return 4","1d85064a":"# pre processing\ntarget = np.zeros((size,2),dtype='float32')\nfeatures = np.zeros((size,sample.shape[0],sample.shape[1],1),dtype = 'float32')\nfor i in range(size):\n    target[i,0] = age_group(int(ages[i])) \/ 4\n    target[i,1] = int(genders[i])\n    features[i] = images[i]\nfeatures = features \/ 255\ndisplay(features[550])","06dfcf23":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.2,shuffle  = True)\nprint(\"Samples in Training:\",x_train.shape[0])\nprint(\"Samples in Testing:\",x_test.shape[0])","87c26b95":"print(\"Shape of image:\",sample.shape)","28d220dd":"import keras \nfrom keras.layers import *\nfrom keras.models import *\nfrom keras import backend as K","e2dcb184":"inputs = Input(shape=(64,64,1))\nconv1 = Conv2D(32, kernel_size=(3, 3),activation='relu')(inputs)\nconv2 = Conv2D(64, kernel_size=(3, 3),activation='relu')(conv1)\npool1 = MaxPooling2D(pool_size=(2, 2))(conv2)\nconv3 = Conv2D(128, kernel_size=(3, 3),activation='relu')(pool1)\npool2 = MaxPooling2D(pool_size=(2, 2))(conv3)\nx = Dropout(0.25)(pool2)\nflat = Flatten()(x)\n\ndropout = Dropout(0.5)\nage_model = Dense(128, activation='relu')(flat)\nage_model = dropout(age_model)\nage_model = Dense(64, activation='relu')(age_model)\nage_model = dropout(age_model)\nage_model = Dense(32, activation='relu')(age_model)\nage_model = dropout(age_model)\nage_model = Dense(1, activation='relu')(age_model)\n\ndropout = Dropout(0.5)\ngender_model = Dense(128, activation='relu')(flat)\ngender_model = dropout(gender_model)\ngender_model = Dense(64, activation='relu')(gender_model)\ngender_model = dropout(gender_model)\ngender_model = Dense(32, activation='relu')(gender_model)\ngender_model = dropout(gender_model)\ngender_model = Dense(16, activation='relu')(gender_model)\ngender_model = dropout(gender_model)\ngender_model = Dense(8, activation='relu')(gender_model)\ngender_model = dropout(gender_model)\ngender_model = Dense(1, activation='sigmoid')(gender_model)","2d27a17d":"model = Model(inputs=inputs, outputs=[age_model,gender_model])\nmodel.compile(optimizer = 'adam', loss =['mse','binary_crossentropy'],metrics=['accuracy'])","1ec6aecc":"model.summary()","65018e9a":"h = model.fit(x_train,[y_train[:,0],y_train[:,1]],validation_data=(x_test,[y_test[:,0],y_test[:,1]]),epochs = 25, batch_size=128,shuffle = True)","5cd473d2":"model.save('data.h5')","9e7ef453":"history = h\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","d34e1f67":"def display(img):\n    plt.imshow(img[:,:,0])\n    plt.set_cmap('gray')\n    plt.show()\n    \ndef age_group(age):\n    if age >=0 and age < 18:\n        return 1\n    elif age < 30:\n        return 2\n    elif age < 80:\n        return 3\n    else:\n        return 4\n\ndef get_age(distr):\n    distr = distr*4\n    if distr >= 0.65 and distr <= 1.4:return \"0-18\"\n    if distr >= 1.65 and distr <= 2.4:return \"19-30\"\n    if distr >= 2.65 and distr <= 3.4:return \"31-80\"\n    if distr >= 3.65 and distr <= 4.4:return \"80 +\"\n    return \"Unknown\"\n    \ndef get_gender(prob):\n    if prob < 0.5:return \"Male\"\n    else: return \"Female\"\n\ndef get_result(sample):\n    sample = sample\/255\n    val = model.predict( np.array([ sample ]) )    \n    age = get_age(val[0])\n    gender = get_gender(val[1])\n    print(\"Values:\",val,\"\\nPredicted Gender:\",gender,\"Predicted Age:\",age)\n    \n    \nindexes = [500,59,80,2,4546,7,9,256,45]\nfor idx in indexes:\n    sample = images[idx]\n    display(sample)\n    print(\"Actual Gender:\",get_gender(genders[idx]),\"Age:\",ages[idx])\n    res = get_result(sample)","a379ed2c":"Format of the file: age_gender_ethnicity_datetime "}}