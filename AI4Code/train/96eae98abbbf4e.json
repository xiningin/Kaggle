{"cell_type":{"98d69a8d":"code","71006460":"code","2d19316d":"code","9dcb5e45":"code","be4358d3":"code","6df0360c":"code","b026f6b2":"code","4b2ae9ba":"markdown","4948a3cd":"markdown","22e9ab93":"markdown","80de11d0":"markdown","c097353b":"markdown","d87660e5":"markdown","721a5dbc":"markdown"},"source":{"98d69a8d":"!pip install pyvis >> \/dev\/null","71006460":"# %load kagnet.py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\nfrom tqdm.notebook import tqdm\nimport multiprocessing\nfrom pyvis.network import Network\nimport networkx as nx\n\nfrom functools import partial\nfrom tqdm.contrib.concurrent import process_map\n\npd.set_option('max_columns', 500)\n\ndef load_data(data_dir=\"..\/input\/kaggle-survey-2020\/\", id_name=\"rid\"):\n    \"\"\"\n    Load the survey data and give each person a unique responder id (r_id)\n    Extract the question text into a seperate dataframe\n\n    id_name (str): The column name for the unique identifer for each responder.\n\n    \"\"\"\n    surv = pd.read_csv(data_dir + \"kaggle_survey_2020_responses.csv\", low_memory=False)\n    qtext = surv.loc[[0]]  # Text of questions\n    surv = surv.drop(0)  # Remove question text\n    surv = surv.reset_index().rename(columns={\"index\": id_name})\n    return surv, qtext\n\n\ndef get_edge(surv, rid, qs=[\"Q1\", \"Q3\", \"Q4\", \"Q5\", \"Q6\"]):\n    \"\"\"\n    Finds the edge connections for an individual responder.\n    Based on sum of similar answers to list of questions `qs`\n\n    Args:\n        rid (int): responder id to find associated links\n        surv (dataframe): survey response dataframe\n        qs (list, optional): list of questions to include\n            Defaults to ['Q1','Q3','Q4','Q5','Q6'].\n\n    Returns:\n        dataframe: edges between base_rid and neighbor rid\n    \"\"\"\n    qs_ = [f\"{c}_\" for c in qs]  # Count columns for questions\n    r_vals = surv.query(\"rid == @rid\")[qs]\n    assert len(r_vals) == 1\n    edge_df = surv[[\"rid\"] + qs].query(\"rid != @rid\").copy()\n    for q in qs:\n        edge_df[f\"{q}_\"] = 0\n        if r_vals[q].values[0] == np.nan:\n            continue\n        edge_df.loc[edge_df[q] == r_vals[q].values[0], f\"{q}_\"] = 1\n    edge_df[\"edge_weight\"] = edge_df[qs_].sum(axis=1)\n    edge_df[\"base_rid\"] = rid\n    return edge_df[[\"base_rid\", \"rid\", \"edge_weight\"]]\n\n\ndef create_links(\n    surv, min_weight=0, qs=[\"Q1\", \"Q3\", \"Q4\", \"Q5\", \"Q6\"], parallel=None, chunksize=100\n):\n    \"\"\"Creates the links between\n\n    Args:\n        surv (dataframe): survey dataframe\n        filter_weight (int): minimum weight of edge to include\n        qs (list): questions to include\n    \"\"\"\n\n    if parallel is not None:\n        func = partial(get_edge, surv)\n        lnks = process_map(\n            func, surv[\"rid\"].unique(), max_workers=parallel, chunksize=chunksize\n        )\n    else:\n        lnks = []\n        for r in surv[\"rid\"].unique():\n#         for r in tqdm(surv[\"rid\"].unique())\n            lnk = get_edge(surv, r, qs=qs)\n            lnks.append(lnk)\n\n    links = pd.concat(lnks).reset_index(drop=True)\n    links = links.query(\"edge_weight >= @min_weight\").reset_index(drop=True)\n    return links\n\n\ndef create_node_title(links, surv, responder_col, title_option=1):\n    \"\"\"Creates the apropriate title for each responder.\n\n    Args:\n        links (dataframe): contains links between rids\n        surv (dataframe): contains survey responses\n        title_option (int): title format option.\n        responder_col (str, optional): rid column. Defaults to 'base_rid'.\n    \"\"\"\n    links = links.merge(surv, how=\"left\", left_on=responder_col, right_on=\"rid\").copy()\n    if title_option == 1:\n        titles = (\n            links[\"Q1\"]\n            + \" year old \"\n            + links[\"Q5\"].str.lower()\n            + \" from \"\n            + links[\"Q3\"]\n        )\n    return titles\n\n\ndef create_kaggle_network(\n    links,\n    surv,\n    node_size=5,\n    heading=\"KaggleNet\",\n    height=\"500px\",\n    width=\"400px\",\n    bgcolor=\"#222222\",\n    font_color=\"white\",\n):\n    kag_net = Network(\n        height=height,\n        width=width,\n        bgcolor=bgcolor,\n        font_color=font_color,\n        heading=heading,\n        notebook=True,\n    )\n\n    sources = links[\"base_rid\"]\n    targets = links[\"rid\"]\n    weights = links[\"edge_weight\"]\n    titles = create_node_title(links, surv, responder_col=\"base_rid\")\n    titles_dst = create_node_title(links, surv, responder_col=\"rid\")\n    edge_data = zip(sources, targets, weights, titles, titles_dst)\n\n#     for e in tqdm(edge_data, total=len(sources)):\n    for e in edge_data:\n        src = e[0]\n        dst = e[1]\n        w = e[2] \/ 10\n        tsrc = e[3]\n        tdst = e[4]\n        kag_net.add_node(src, src, title=tsrc, size=node_size)\n        kag_net.add_node(dst, dst, title=tdst, size=node_size)\n        kag_net.add_edge(src, dst, width=w)\n\n    neighbor_map = kag_net.get_adj_list()\n\n    # add neighbor data to node hover data\n    for node in kag_net.nodes:\n        node[\"title\"] = str(node[\"title\"])\n    return kag_net\n\ndef create_kaggle_network_color(\n    links,\n    surv,\n    lcolor, rcolor,\n    node_size=5,\n    heading=\"KaggleNet\",\n    height=\"500px\",\n    width=\"400px\",\n    bgcolor=\"#222222\",\n    font_color=\"white\",\n):\n    kag_net = Network(\n        height=height,\n        width=width,\n        bgcolor=bgcolor,\n        font_color=font_color,\n        heading=heading,\n        notebook=True,\n    )\n\n    sources = links[\"base_rid\"]\n    targets = links[\"rid\"]\n    weights = links[\"edge_weight\"]\n    titles = create_node_title(links, surv, responder_col=\"base_rid\")\n    titles_dst = create_node_title(links, surv, responder_col=\"rid\")\n    edge_data = zip(sources, targets, weights, titles, titles_dst, lcolor, rcolor)\n\n#     for e in tqdm(edge_data, total=len(sources)):\n    for e in edge_data:\n        src = e[0]\n        dst = e[1]\n        w = e[2] \/ 10\n        tsrc = e[3]\n        tdst = e[4]\n        cl = e[5]\n        cr = e[6]\n        kag_net.add_node(src, src, title=tsrc, color=cl)\n        kag_net.add_node(dst, dst, title=tdst, color=cr)\n        kag_net.add_edge(src, dst, width=w)\n\n    neighbor_map = kag_net.get_adj_list()\n\n    # add neighbor data to node hover data\n    for node in kag_net.nodes:\n        node[\"title\"] = str(node[\"title\"])\n    return kag_net","2d19316d":"from IPython.display import Video\nVideo(\"https:\/\/i.imgur.com\/a0skoUX.mp4\")","9dcb5e45":"# Try on everyone\nsurv, qtext = load_data()\nsurv_ = surv.sample(500, random_state=529)\nlinks = create_links(surv_, min_weight=3, parallel=None, chunksize=10)\nkag_net = create_kaggle_network(links, surv_, node_size=5,\n                                height=\"1000px\",\n                                width=\"100%\",)\nkag_net.barnes_hut() #physics?\nkag_net.show(\"kagnet.html\")","be4358d3":"surv, qtext = load_data()\n\n# Questions to use for network\nqs = ['Q1', # Age\n#       'Q2', # Gender\n#       'Q3', # Country\n      'Q4', # Education\n      'Q5', # Title\n      'Q6', # How long coding\n#       'Q7_Part_1', # Prog Lang\n      'Q8', # Lang recommend\n#       'Q11', # Compute platform\n      'Q15', # Years using ML\n      'Q20', # Size of company\n      'Q21', # DS employees\n      'Q24', # Compensation\n      'Q30', # Big Data product\n#       'Q32', # BI Tools\n     ]\n\nsurv_ = surv[['rid','Q3'] + qs].dropna().query('Q3 == \"United States of America\"') \\\n    .sample(500, random_state=42)\n\nlinks = create_links(surv_, min_weight=6,\n                     qs=qs)\nlinks['edge_weight'] = links['edge_weight'] - links['edge_weight'].min() + 1\n\n\ncolor_col = 'Q5'\ncategories = surv[color_col].unique()\n# colors = np.linspace(0, 1, len(categories))\ncolors = sns.color_palette(\"deep\", len(categories)).as_hex()\ncolordict = dict(zip(categories, colors))  \nsurv_[\"color\"] = surv_[color_col].apply(lambda x: colordict[x])\n\nlcolor = links.merge(surv_[['rid','color']], how='left', left_on='base_rid', right_on='rid')['color'].values\nrcolor = links.merge(surv_[['rid','color']], how='left', left_on='rid', right_on='rid')['color'].values\n\nkag_net = create_kaggle_network_color(links, surv_, \n                                      lcolor, rcolor,\n                                      node_size=50,\n                                      font_color='white',\n                                      height=\"1000px\",\n                                      width=\"100%\",\n                                      heading=\"US Kagglers Colored by Career\")\nkag_net.barnes_hut() #physics?\nkag_net.show(\"kagnet_us.html\")","6df0360c":"surv, qtext = load_data()\n\n# Questions to use for network\nqs = ['Q1', # Age\n#       'Q2', # Gender\n      'Q3', # Country\n      'Q4', # Education\n      'Q5', # Title\n      'Q6', # How long coding\n#       'Q7_Part_1', # Prog Lang\n      'Q8', # Lang recommend\n#       'Q11', # Compute platform\n      'Q15', # Years using ML\n      'Q20', # Size of company\n      'Q21', # DS employees\n      'Q24', # Compensation\n      'Q30', # Big Data product\n#       'Q32', # BI Tools\n     ]\n\nsurv_ = surv[['rid','Q2'] + qs].dropna().query('Q2 == \"Woman\"')\nlinks = create_links(surv_, min_weight=6,\n                     qs=qs)\nlinks['edge_weight'] = links['edge_weight'] - links['edge_weight'].min() + 1\n\n\ncolor_col = 'Q5'\ncategories = surv[color_col].unique()\n# colors = np.linspace(0, 1, len(categories))\ncolors = sns.color_palette(\"deep\", len(categories)).as_hex()\ncolordict = dict(zip(categories, colors))  \nsurv_[\"color\"] = surv_[color_col].apply(lambda x: colordict[x])\n\nlcolor = links.merge(surv_[['rid','color']],\n                     how='left',\n                     left_on='base_rid',\n                     right_on='rid')['color'].values\nrcolor = links.merge(surv_[['rid','color']],\n                     how='left',\n                     left_on='rid',\n                     right_on='rid')['color'].values\n\nkag_net = create_kaggle_network_color(links, surv_, \n                                      lcolor, rcolor,\n                                      node_size=50,\n                                      font_color='white',\n                                      height=\"1000px\",\n                                      width=\"100%\",\n                                      heading=\"Women of Kaggle\")\nkag_net.barnes_hut() #physics?\nkag_net.show(\"kagnet_women.html\")","b026f6b2":"surv, qtext = load_data()\n\n# Questions to use for network\nqs = ['Q1', # Age\n      'Q2', # Gender\n      'Q3', # Country\n      'Q4', # Education\n      'Q5', # Title\n      'Q6', # How long coding\n#       'Q7_Part_1', # Prog Lang\n      'Q8', # Lang recommend\n#       'Q11', # Compute platform\n      'Q15', # Years using ML\n#       'Q20', # Size of company\n#       'Q21', # DS employees\n      'Q24', # Compensation\n#       'Q30', # Big Data product\n#       'Q32', # BI Tools\n     ]\n\nsurv_ = surv[['rid'] + qs].dropna().sample(500)\n\nlinks = create_links(surv_, min_weight=6,\n                     qs=qs)\nlinks['edge_weight'] = links['edge_weight'] - links['edge_weight'].min() + 1\nlinks['edge_weight'] = links['edge_weight'].clip(0, 1)\n\ncolor_col = 'Q3'\ncategories = surv[color_col].unique()\n# colors = np.linspace(0, 1, len(categories))\ncolors = sns.color_palette(\"pastel\", len(categories)).as_hex()\ncolordict = dict(zip(categories, colors))  \nsurv_[\"color\"] = surv_[color_col].apply(lambda x: colordict[x])\n\nlcolor = links.merge(surv_[['rid','color']],\n                     how='left',\n                     left_on='base_rid',\n                     right_on='rid')['color'].values\nrcolor = links.merge(surv_[['rid','color']],\n                     how='left',\n                     left_on='rid',\n                     right_on='rid')['color'].values\n\nkag_net = create_kaggle_network_color(links, surv_, \n                                      lcolor, rcolor,\n                                      font_color='white',\n                                      height=\"1000px\",\n                                      width=\"100%\",\n                                      heading=\"Kaggler Network Colored by Country\")\nkag_net.barnes_hut() #physics?\nkag_net.show(\"kagnet_global.html\")","4b2ae9ba":"# More Connections - Colored by Country.\nFinally we graph the entire community again, but this time coloring by country. It's inspiring to remember that each dot represents a human being who is engaged with the community enough to want to respond to the survey! What a strong showing!!\n\nA few things to note:\n- Several groups of misfits appear again, with clumps of 2-10 responders who share no strong connections to the main group, but are strongly connected to each other.\n- India is represented again as a very strong tight knit community in the center (purple colored).\n- Explore more yourself and see what interesting groupings you can find.","4948a3cd":"# Respondents from The United States\n\nNext I wanted to look at the connections between kagglers in my home country, the United States. I've expanded the list of questions that were included in this analysis to show relationships between the same as before (age, education, title, etc.) but also additional questions, like the coding language they would reccomend, size of their company and their annual compensation.\n\nI find it interesting that:\n- The dark red group appears to be those that hold the \"data scientist\" title.\n- A few edge groups emerge. If you zoom in on these groupings of 2-5 responders who aren't connected to the main group you will find: \n    - A pair of statisticians from the older age bracket (50-70)\n    - A pair of data analists who use similar coding tools\n    - More edge groups with some similarities that are especially unique in the community. I encourage you to zoom in and check them out!","22e9ab93":"# Women of Kaggle Networked\nWomen unfortunately are underrepresented in the kaggle community- a gap we all hope becomes more balanced in the future. We can take encouragement from the awesome group of female kagglers we have who responded to the survey. The graph again is colored by job title, and I find it interesting that this graph seems to show much more balance than the others. Software engineers, data scientists, and analyists are all well represented, and they share a lot of common responses in the survey.","80de11d0":"# Graph the Kaggle Community\n**Zoom in and hover over a node to see a description of that kaggler.**\n\nThis first graph network includes the entire community. Specifically we are looking at responses to 5 of the first 6 questions on the survey which describe their:\n- Age\n- Country\n- Education\n- Job Title\n- Years of Experience\n\nAny respondents who had 3 or more questions answered the same are assigned an edge connecting each other. It's interesting to see how clumps of responders form. The largest clump appears to be the younger crowd, and within that clump an even tighter group appears almost as a ball. Zooming in and hovering over some of these responders I've noticed that this tightest clump appears to be younger students, many from India. They are a strong sub-group of the kaggle population! At the same time it's cool to see that most every respondent is somehow connected to others, showing the fact that kaggle consists of a wide, diverse, group of data sciensts that are still tightly tied together.\n\nThis gif shows an example of how you can explore the graphs.....","c097353b":"# References:\n- **From DataFrame to Network Graph** https:\/\/towardsdatascience.com\/from-dataframe-to-network-graph-bbb35c8ab675\n- **pyvis tutorial** https:\/\/pyvis.readthedocs.io\/en\/latest\/tutorial.html","d87660e5":"# The Networks That Bind Kaggle\n\n![image](https:\/\/i.imgur.com\/FTP7mNR.png)\n\nIn this challenge we are provided response data from Kaggle's 2020 Survey. Out of the endless possible ways to explore the data I wanted to choose one that highlights the **community** of kaggle. Kaggle is a diverse community unlike any other - where people from different cultures and backgrounds interact with each other to solve interesting and compelling problems- aswell as discussing the latest trends and technology in the data science space.\n\n- **Methodology**\n\nThis notebook will focus on representing the kaggle community using *network* visualizations. Networks contain `nodes` and `edges`, in this data set each respondent is considered to be a `node` and the edges depend on how we define the relationship between them. We will explore a few different networks and hopefully find some interesting things about the community.\n\nSo, without further adeu.. let's take a look at the data!\n\nSome things to note:\n- Much of the code is hidden, but you can expand the hidden cells to see the full codebase used to create these visualizations.\n- The graphs take some time to load so please be patient after first opening the notebook.","721a5dbc":"# Thanks for reading!\n\nI appreciate you taking the time to read my notebook and hope you found something interesting! Please leave a comment if you have suggestions for things you would like to see."}}