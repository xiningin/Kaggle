{"cell_type":{"036d80e5":"code","e29e3524":"code","a2436424":"code","b38acb4a":"code","240eb864":"code","2c7a6b44":"code","e4eb373e":"code","05996959":"code","57784717":"code","3d34022d":"code","d179b570":"code","361934cc":"code","f61ae86d":"code","8324ed1a":"code","928ab836":"markdown","1d24e10a":"markdown"},"source":{"036d80e5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nfrom os.path import join\nimport random\nimport pathlib\nimport tensorflow as tf\ntf.enable_eager_execution()\nimport IPython.display as display\n\ntf.test.is_gpu_available()","e29e3524":"tf.random.set_random_seed(42)\nnp.random.seed(42)","a2436424":"basedir = '..\/input\/spoonvsfork\/spoon-vs-fork\/spoon-vs-fork'\nfork_dir = join(basedir, 'fork')\nspoon_dir = join(basedir, 'spoon')\nspoon_paths = [join(spoon_dir, img_path) for img_path in os.listdir(spoon_dir)]\nfork_paths = [join(fork_dir, img_path) for img_path in os.listdir(fork_dir)]\nimg_paths = spoon_paths + fork_paths\nlen(img_paths)","b38acb4a":"def load_data(basedir):\n    folders = os.listdir(basedir)\n    print(folders)\n    result = pd.DataFrame(columns=['filename', 'class'])\n    for folder in folders:\n        files = [join(basedir, folder, file) for file in os.listdir(join(basedir, folder))]\n        df = pd.DataFrame({'filename': files, 'class': folder})\n        result = pd.concat([result, df])\n    return result\n\nimage_df = load_data(basedir)","240eb864":"def validate_data(image_df):\n    result = image_df.copy()\n    allowed_extensions = ['jpg', 'jpeg', 'png', 'gif']\n    for img in image_df.filename:\n        extension = str.lower(os.path.splitext(img)[1])[1:]\n        if extension not in allowed_extensions:\n                    result = result[result.filename != img]\n                    print(\"Removed file with extension '{}'\".format(extension))\n    return result\n\nimage_df = validate_data(image_df)","2c7a6b44":"from sklearn.model_selection import train_test_split","e4eb373e":"X_train, X_test, y_train, y_test = train_test_split(image_df.filename, image_df['class'], test_size=0.2, random_state=42)","05996959":"from tensorflow.python.keras.applications import ResNet50\nresnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\nresnet = ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path)","57784717":"from tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D\n\nresnet_model = Sequential()\nresnet_model.add(resnet)\nresnet_model.add(Dense(2, activation='softmax'))\n\n# Say not to train first layer (ResNet) model. It is already trained\nresnet_model.layers[0].trainable = False","3d34022d":"resnet_model.compile(optimizer=tf.train.AdamOptimizer(), loss='categorical_crossentropy', metrics=['accuracy'])","d179b570":"from tensorflow.python.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator","361934cc":"batch_size=16\ngen = ImageDataGenerator(\n    preprocessing_function=preprocess_input,\n    horizontal_flip = True,\n    vertical_flip = True,\n    width_shift_range = 0.1,\n    height_shift_range = 0.1,\n    zoom_range = 0.1,\n    rotation_range = 10\n    )\ntrain_gen = gen.flow_from_dataframe(pd.DataFrame({'filename': X_train, 'class': y_train}), batch_size=batch_size)\nvalidation_gen = gen.flow_from_dataframe(pd.DataFrame({'filename': X_test, 'class': y_test}), batch_size=batch_size)\n","f61ae86d":"resnet_model.fit_generator(train_gen, validation_data=validation_gen)","8324ed1a":"resnet_model.fit_generator(train_gen, validation_data=validation_gen, epochs=8)","928ab836":"# Train the model","1d24e10a":"## Resnet model"}}