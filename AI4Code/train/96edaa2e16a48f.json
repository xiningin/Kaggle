{"cell_type":{"e1303b0d":"code","cc318627":"code","4ff5b2ba":"code","494b1007":"code","ee38f4d1":"code","1235bc63":"code","87507deb":"code","eb3f7a8c":"code","30bc5761":"code","914cb8c6":"code","18d98bbf":"code","69fc4ecb":"code","0df5bb46":"code","1e714060":"code","90ec733d":"code","fc5b8faf":"code","b222b8e0":"code","8b495df7":"code","54ec3aec":"code","c2357d1c":"code","f57c3a96":"code","618d3e74":"code","3433c417":"code","73527aa5":"code","c4a7d9ba":"code","91f2b851":"code","e3a4b0d4":"code","d66acfd9":"code","197436d8":"code","22cfc3c7":"code","ebd274bb":"code","663ee34e":"code","09686922":"code","85a442c8":"code","55d25b77":"code","ff27846e":"code","adfa56f9":"code","73ced000":"code","4b6facc9":"code","bebe626d":"code","a890ea16":"code","de023a2c":"code","175546f3":"code","c0007e67":"markdown","80faa94e":"markdown","e113bb34":"markdown","9f93ff89":"markdown","b937e7a4":"markdown","5e224e2e":"markdown","4c558534":"markdown","b3744db7":"markdown","2969d939":"markdown","d1fdb8c9":"markdown","b5335573":"markdown","a1251eb7":"markdown","6515221a":"markdown","dd414ed6":"markdown","b7b9e48b":"markdown","314a37b3":"markdown","f391d247":"markdown","8969ac96":"markdown","9b551dee":"markdown","9d6e59ca":"markdown","c1593666":"markdown","2a9bd97c":"markdown","e608aa4b":"markdown","8908072f":"markdown","6e194a2d":"markdown","8ed61a6f":"markdown","5cf44f44":"markdown","f12f21ba":"markdown","4ae8320c":"markdown","762fea01":"markdown","88936b33":"markdown","cdf73a55":"markdown","b429c53e":"markdown","7e407e31":"markdown","37e2fdce":"markdown","260a1c9e":"markdown","b34326ca":"markdown","8913a3c7":"markdown","ca557648":"markdown","da6930d4":"markdown","cc959077":"markdown","a7f77619":"markdown","c3f1697d":"markdown","3960539e":"markdown"},"source":{"e1303b0d":"#data analysis libraries \nimport numpy as np\nimport pandas as pd\n\n#visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","cc318627":"#import train and test CSV files\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\n#take a look at the training data\ntrain.describe(include=\"all\").T","4ff5b2ba":"#get a list of the features within the dataset\nprint(train.columns)","494b1007":"#see a sample of the dataset to get an idea of the variables\ntrain.head(5)","ee38f4d1":"#see a summary of the training dataset\ntrain.describe(include = \"all\").T","1235bc63":"#check for any other unusable values\nprint(pd.isnull(train).sum())","87507deb":"#draw a bar plot of survival by sex\nsns.barplot(x=\"Sex\", y=\"Survived\", data=train)\n\n#print percentages of females vs. males that survive\nprint(\"Percentage of females who survived:\", train[\"Survived\"][train[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of males who survived:\", train[\"Survived\"][train[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)","eb3f7a8c":"#draw a bar plot of survival by Pclass\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train)\n\n#print percentage of people by Pclass that survived\nprint(\"Percentage of Pclass = 1 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 2 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 2].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 3 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 3].value_counts(normalize = True)[1]*100)","30bc5761":"#draw a bar plot for SibSp vs. survival\nsns.barplot(x=\"SibSp\", y=\"Survived\", data=train)\n\n#I won't be printing individual percent values for all of these.\nprint(\"Percentage of SibSp = 0 who survived:\", train[\"Survived\"][train[\"SibSp\"] == 0].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of SibSp = 1 who survived:\", train[\"Survived\"][train[\"SibSp\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of SibSp = 2 who survived:\", train[\"Survived\"][train[\"SibSp\"] == 2].value_counts(normalize = True)[1]*100)","914cb8c6":"#draw a bar plot for Parch vs. survival\nsns.barplot(x=\"Parch\", y=\"Survived\", data=train)\nplt.show()","18d98bbf":"#sort the ages into logical categories\ntrain[\"Age\"] = train[\"Age\"].fillna(-0.5)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.5)\nbins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf] # a data preprosessing step\nlabels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\n\n#draw a bar plot of Age vs. survival\nplt.figure(figsize=(12,6))\nsns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train)\nplt.show()","69fc4ecb":"train[\"CabinBool\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"CabinBool\"] = (test[\"Cabin\"].notnull().astype('int'))\n\n#calculate percentages of CabinBool vs. survived\nprint(\"Percentage of CabinBool = 1 who survived:\", train[\"Survived\"][train[\"CabinBool\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of CabinBool = 0 who survived:\", train[\"Survived\"][train[\"CabinBool\"] == 0].value_counts(normalize = True)[1]*100)\n#draw a bar plot of CabinBool vs. survival\nsns.barplot(x=\"CabinBool\", y=\"Survived\", data=train)\nplt.show()","0df5bb46":"test.describe(include=\"all\").T","1e714060":"#we'll start off by dropping the Cabin feature since not a lot more useful information can be extracted from it.\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)\nprint('Feature Dropped!!')","90ec733d":"#we can also drop the Ticket feature since it's unlikely to yield any useful information\ntrain = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)\nprint('Feature Dropped!!')","fc5b8faf":"#now we need to fill in the missing values in the Embarked feature\nprint(\"Number of people embarking in Southampton (S):\")\nsouthampton = train[train[\"Embarked\"] == \"S\"].shape[0]\nprint(southampton)\n\nprint(\"Number of people embarking in Cherbourg (C):\")\ncherbourg = train[train[\"Embarked\"] == \"C\"].shape[0]\nprint(cherbourg)\n\nprint(\"Number of people embarking in Queenstown (Q):\")\nqueenstown = train[train[\"Embarked\"] == \"Q\"].shape[0]\nprint(queenstown)","b222b8e0":"#replacing the missing values in the Embarked feature with S\ntrain = train.fillna({\"Embarked\": \"S\"})\ntrain.head()","8b495df7":"#create a combined group of both datasets\ncombine = [train, test]\n\n#extract a title for each Name in the train and test datasets\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train['Title'], train['Sex'])","54ec3aec":"#replace various titles with more common names\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Capt', 'Col',\n    'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\n    \n    dataset['Title'] = dataset['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","c2357d1c":"#map each of the title groups to a numerical value\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Royal\": 5, \"Rare\": 6}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain.head()","f57c3a96":"# fill missing age with mode age group for each title\nmr_age = train[train[\"Title\"] == 1][\"AgeGroup\"].mode() #Young Adult\nmiss_age = train[train[\"Title\"] == 2][\"AgeGroup\"].mode() #Student\nmrs_age = train[train[\"Title\"] == 3][\"AgeGroup\"].mode() #Adult\nmaster_age = train[train[\"Title\"] == 4][\"AgeGroup\"].mode() #Baby\nroyal_age = train[train[\"Title\"] == 5][\"AgeGroup\"].mode() #Adult\nrare_age = train[train[\"Title\"] == 6][\"AgeGroup\"].mode() #Adult\n\nage_title_mapping = {1: \"Young Adult\", 2: \"Student\", 3: \"Adult\", 4: \"Baby\", 5: \"Adult\", 6: \"Adult\"}\n\nfor x in range(len(train[\"AgeGroup\"])):\n    if train[\"AgeGroup\"][x] == \"Unknown\":\n        train[\"AgeGroup\"][x] = age_title_mapping[train[\"Title\"][x]]\n        \nfor x in range(len(test[\"AgeGroup\"])):\n    if test[\"AgeGroup\"][x] == \"Unknown\":\n        test[\"AgeGroup\"][x] = age_title_mapping[test[\"Title\"][x]]","618d3e74":"#map each Age value to a numerical value\nage_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)\n\ntrain.head()\n\n#dropping the Age feature for now, might change\ntrain = train.drop(['Age'], axis = 1)\ntest = test.drop(['Age'], axis = 1)\nprint('Dropped!!')","3433c417":"#drop the name feature since it contains no more useful information.\ntrain = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)\nprint('Dropped!!')","73527aa5":"#map each Sex value to a numerical value\nsex_mapping = {\"male\": 0, \"female\": 1}\ntrain['Sex'] = train['Sex'].map(sex_mapping)\ntest['Sex'] = test['Sex'].map(sex_mapping)\n\ntrain.head()","c4a7d9ba":"test = test.fillna({\"Embarked\": \"S\"}) # as we did for train data\n\n#map each Embarked value to a numerical value\nembarked_mapping = {\"S\": 1, \"C\": 2, \"Q\": 3}\ntrain['Embarked'] = train['Embarked'].map(embarked_mapping)\ntest['Embarked'] = test['Embarked'].map(embarked_mapping)\n\ntrain.head()","91f2b851":"test.head()","e3a4b0d4":"#fill in missing Fare value in test set based on mean fare for that Pclass \nfor x in range(len(test[\"Fare\"])):\n    if pd.isnull(test[\"Fare\"][x]):\n        pclass = test[\"Pclass\"][x] #Pclass = 3\n        test[\"Fare\"][x] = round(train[train[\"Pclass\"] == pclass][\"Fare\"].mean(), 4)\n        \n#map Fare values into groups of numerical values\ntrain['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])\n\n#drop Fare values\ntrain = train.drop(['Fare'], axis = 1)\ntest = test.drop(['Fare'], axis = 1)\nprint('Dropped!!')","d66acfd9":"#check train data\ntrain.head()","197436d8":"#check test data\ntest.head()","22cfc3c7":"from sklearn.model_selection import train_test_split\n\npredictors = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train[\"Survived\"]\nx_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.22, random_state = 0)","ebd274bb":"# Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n\ngaussian = GaussianNB()\ngaussian.fit(x_train, y_train)\ny_pred = gaussian.predict(x_val)\nacc_gaussian = round(accuracy_score(y_pred, y_val) * 100, 2)","663ee34e":"print('gaussian accuracy score is:',acc_gaussian)","09686922":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_val)\nacc_logreg = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint('logreg accuracy score is:',acc_logreg)","85a442c8":"# Support Vector Machines\nfrom sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_val)\nacc_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint('svc accuracy score is:',acc_svc)","55d25b77":"# Linear SVC\nfrom sklearn.svm import LinearSVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(x_train, y_train)\ny_pred = linear_svc.predict(x_val)\nacc_linear_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint('linear svc accuracy score is:',acc_linear_svc)","ff27846e":"# Perceptron\nfrom sklearn.linear_model import Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(x_train, y_train)\ny_pred = perceptron.predict(x_val)\nacc_perceptron = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint('perceptron accuracy score is:',acc_perceptron)","adfa56f9":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\n\ndecisiontree = DecisionTreeClassifier()\ndecisiontree.fit(x_train, y_train)\ny_pred = decisiontree.predict(x_val)\nacc_decisiontree = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint('decision tree accuracy score is:',acc_decisiontree)","73ced000":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_val)\nacc_randomforest = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint('random forest accuracy score is:',acc_randomforest)","4b6facc9":"# KNN or k-Nearest Neighbors\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_val)\nacc_knn = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint('knn accuracy score is:',acc_knn)","bebe626d":"# Stochastic Gradient Descent\nfrom sklearn.linear_model import SGDClassifier\n\nsgd = SGDClassifier()\nsgd.fit(x_train, y_train)\ny_pred = sgd.predict(x_val)\nacc_sgd = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint('stochastic gradient descent accuracy score is:',acc_sgd)","a890ea16":"# Gradient Boosting Classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_val)\nacc_gbk = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint('gradient boosting accuracy score is:',acc_gbk)","de023a2c":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', 'Linear SVC', \n              'Decision Tree', 'Stochastic Gradient Descent', 'Gradient Boosting Classifier'],\n    'Score': [acc_svc, acc_knn, acc_logreg, \n              acc_randomforest, acc_gaussian, acc_perceptron,acc_linear_svc, acc_decisiontree,\n              acc_sgd, acc_gbk]})\nmodels.sort_values(by='Score', ascending=False)","175546f3":"#set ids as PassengerId and predict survival \nids = test['PassengerId']\npredictions = gbk.predict(test.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","c0007e67":"### SibSp Feature","80faa94e":"## 4) Data Visualization\nIt's time to visualize our data so we can see whether our predictions were accurate! ","e113bb34":"## 5) Cleaning Data\nTime to clean our data to account for missing values and unnecessary information!","9f93ff89":"#### Some Observations:\n* There are a total of 891 passengers in our training set.\n* The Age feature is missing approximately 19.8% of its values. I'm guessing that the Age feature is pretty important to survival, so we should probably attempt to fill these gaps. \n* The Cabin feature is missing approximately 77.1% of its values. Since so much of the feature is missing, it would be hard to fill in the missing values. We'll probably drop these values from our dataset.\n* The Embarked feature is missing 0.22% of its values, which should be relatively harmless.","b937e7a4":"### Sex Feature","5e224e2e":"### Embarked Feature","4c558534":"Thank you so much !!","b3744db7":"* We have a total of 418 passengers.\n* 1 value from the Fare feature is missing.\n* Around 20.5% of the Age feature is missing, we will need to fill that in.","2969d939":"## Sources:\n* [Titanic Data Science Solutions](https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)\n* [Scikit-Learn ML from Start to Finish](https:\/\/www.kaggle.com\/jeffd23\/scikit-learn-ml-from-start-to-finish?scriptVersionId=320209)\n\nAny and all feedback is welcome! ","d1fdb8c9":"As predicted, people with higher socioeconomic class had a higher rate of survival. (62.9% vs. 47.3% vs. 24.2%)","b5335573":"As predicted, females have a much higher chance of survival than males. The Sex feature is essential in our predictions.","a1251eb7":"### Splitting the Training Data\nWe will use part of our training data (22% in this case) to test the accuracy of our different models.","6515221a":"### Testing Different Models\nI will be testing the following models with my training data (got the list from [here](http:\/\/https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)):\n* Gaussian Naive Bayes\n* Logistic Regression\n* Support Vector Machines\n* Perceptron\n* Decision Tree Classifier\n* Random Forest Classifier\n* KNN or k-Nearest Neighbors\n* Stochastic Gradient Descent\n* Gradient Boosting Classifier\n\nFor each model, we set the model, fit it with 80% of our training data, predict for 20% of the training data and check the accuracy.","dd414ed6":"### Age Feature","b7b9e48b":"### Looking at the Test Data\nLet's see how our test data looks!","314a37b3":"### Ticket Feature","f391d247":"People with a recorded Cabin number are, in fact, more likely to survive. (66.6% vs 29.9%)","8969ac96":"### Cabin Feature\nI think the idea here is that people with recorded cabin numbers are of higher socioeconomic class, and thus more likely to survive. ","9b551dee":"Babies are more likely to survive than any other age group. ","9d6e59ca":"Let's compare the accuracies of each model!","c1593666":"## 1) Import Necessary Libraries\nFirst off, we need to import several Python libraries such as numpy, pandas, matplotlib and seaborn.","2a9bd97c":"Next we'll fill in the missing values in the Age feature. Since a higher percentage of values are missing, it would be illogical to fill all of them with the same value (as we did with Embarked). Instead, let's try to find a way to predict the missing ages. ","e608aa4b":"### Cabin Feature","8908072f":"* **Numerical Features:** Age (Continuous), Fare (Continuous), SibSp (Discrete), Parch (Discrete)\n* **Categorical Features:** Survived, Sex, Embarked, Pclass\n* **Alphanumeric Features:** Ticket, Cabin\n\n#### What are the data types for each feature?\n* Survived: int\n* Pclass: int\n* Name: string\n* Sex: string\n* Age: float\n* SibSp: int\n* Parch: int\n* Ticket: string\n* Fare: float\n* Cabin: string\n* Embarked: string\n\nNow that we have an idea of what kinds of features we're working with, we can see how much information we have about each of them.\n","6e194a2d":"## 6) Choosing the Best Model","8ed61a6f":"Next, we'll try to predict the missing Age values from the most common age for their Title.","5cf44f44":"I decided to use the Gradient Boosting Classifier model for the testing data.","f12f21ba":"### Age Feature","4ae8320c":"### Fare Feature\nIt's time separate the fare values into some logical groups as well as filling in the single missing value in the test dataset.","762fea01":"In general, it's clear that people with more siblings or spouses aboard were less likely to survive. However, contrary to expectations, people with no siblings or spouses were less to likely to survive than those with one or two. (34.5% vs 53.4% vs. 46.4%)","88936b33":"# Titanic Data Survival Predictions\nI am very new to Data Science and Machine Learning, and has attempted to work my way through the Titanic: Machine Learning Dataset. Welcome to any suggestions,I will improve myself!! :-)\n\n### Contents:\n1. Import Necessary Libraries\n2. Reading the Data\n3. Data Analysis\n4. Plots Data Visualization\n5. Cleaning Data\n6. Choosing the Best Model\n7. Creating the Submission File \n","cdf73a55":"People with less than four parents or children aboard are more likely to survive than those with four or more. Again, people traveling alone are less likely to survive than those with 1-3 parents or children.","b429c53e":"## 3) Data Analysis\nWe're going to consider the features in the dataset and how complete they are. ","7e407e31":"### Parch Feature","37e2fdce":"### Some Predictions:\nPlease find the below Plots to get more insights.\n* Sex: Females are more likely to survive.\n* SibSp\/Parch: People traveling alone are more likely to survive.\n* Age: Young children are more likely to survive.\n* Pclass: People of higher socioeconomic class are more likely to survive.","260a1c9e":"## 7) Creating Submission File\nIt's time to create a submission.csv file to upload to the Kaggle competition!","b34326ca":"### Sex Feature","8913a3c7":"### Pclass Feature","ca557648":"## 2) Reading the Data \nIt's time to read in our training and testing data using `pd.read_csv`, and take a first look at the training data using the `describe()` function.","da6930d4":"It's clear that the majority of people embarked in Southampton (S). Let's go ahead and fill in the missing values with S.","cc959077":"Now that we've filled in the missing values at some extent, it's time to map each age group to a numerical value.","a7f77619":"### Embarked Feature","c3f1697d":"### Name Feature\nWe can drop the name feature now that we've extracted the titles.","3960539e":"We can see that except for the abovementioned missing values, no NaN values exist."}}