{"cell_type":{"3cff9532":"code","a1ff9bfb":"code","466cb814":"code","e125643a":"code","3aeea7e3":"code","3b398e88":"code","6aa5767e":"code","bc5c332f":"code","9a03bb0f":"code","46fb9b15":"code","405c1b46":"code","1d18c3ef":"code","fe700b8f":"code","82ece9ba":"code","8952cf3c":"code","5efa85b4":"code","5582a413":"code","8428dece":"markdown","bf3bdd78":"markdown","7a686007":"markdown","136f69a8":"markdown","11b9697a":"markdown","60e152c5":"markdown"},"source":{"3cff9532":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport missingno\n\n%matplotlib inline","a1ff9bfb":"# let's import the titanic dataset for this purpose\ndata = pd.read_csv(\"..\/input\/titanic\/train.csv\")","466cb814":"# Fill empty and NaNs values with NaN\ndata = data.fillna(np.nan)","e125643a":"# check for null and missing values\ndata.isnull().sum()\n# data.isna().sum()","3aeea7e3":"# alternatively \ndata.info()","3b398e88":"# Visualize missing values with missingno\nmissingno.matrix(data, figsize = (30,5))\nplt.show()","6aa5767e":"data.dropna(subset=[\"Embarked\"], axis=0, inplace=True)\ndata.reset_index(inplace=True, drop=True)","bc5c332f":"data.groupby(data[\"Parch\"]).mean()","9a03bb0f":"# We will replace the missing age values by average age based on the Parch values\ndef replace_age(cols):\n    age = cols[0]\n    parch = cols[1]\n    \n    if pd.isna(age):\n        if parch == 0:\n            return 32\n        elif parch == 1:\n            return 24\n        elif parch == 2:\n            return 17\n        elif parch == 3:\n            return 33\n        elif parch == 4:\n            return 45\n        elif parch == 5:\n            return 39\n        else: \n            return 43\n    else:\n        return age","46fb9b15":"data['Age'] = data[['Age', 'Parch']].apply(replace_age, axis=1)","405c1b46":"data.drop(columns=[\"Name\", \"Ticket\", \"Cabin\"], inplace=True)","1d18c3ef":"data.isna().sum()","fe700b8f":"data.describe()","82ece9ba":"# https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling\ndef detect_outliers(df, features):\n    outlier_indices = []\n\n    for col in features:\n        # 1st quartile (25%)\n        Q1 = np.percentile(df[col], 25)\n        # 3rd quartile (75%)\n        Q3 = np.percentile(df[col],75)\n        # Interquartile range (IQR)\n        IQR = Q3 - Q1\n        \n        # outlier step\n        outlier_step = 5 * IQR\n        \n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n        outlier_indices.extend(outlier_list_col)\n\n    return outlier_indices","8952cf3c":"outliers_to_drop = detect_outliers(data, [\"SibSp\"])","5efa85b4":"data.loc[outliers_to_drop]","5582a413":"# Drop outliers\ndata = data.drop(outliers_to_drop, axis = 0).reset_index(drop=True)","8428dece":"### Dealing with missing values","bf3bdd78":"### Drop rows with missing values ","7a686007":"### Drop columns not important for analysis ","136f69a8":"## Data cleaning methods \n\n**What we will learn?**\n- Dealing with missing values \n- Visualize missing values with missingo\n- Drop rows with missing values\n- Replace missing values\n- Drop columns \n- Detect outliers (and drop rows with outliers if appropriate)","11b9697a":"### Outlier detection","60e152c5":"### Replace missing values with mean or frequency or another appropriate value"}}