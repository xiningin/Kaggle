{"cell_type":{"09a44997":"code","0febf613":"code","7c193183":"code","60086211":"code","da16f457":"code","7b928fca":"code","2d7474c1":"code","2c581e4d":"code","d9698f98":"code","0dc6786a":"code","f26250d7":"code","6686e5ef":"code","9e613fbc":"code","ae41d7dd":"code","e637a5e6":"code","f25de044":"code","c9ba1e50":"code","61f984ee":"code","6245b707":"code","0a4c4f08":"markdown","57d3df5c":"markdown","7c29e28d":"markdown","41f631bc":"markdown","c9d7040b":"markdown","3a4dfc6e":"markdown","af0f2f8d":"markdown","10beb14a":"markdown","ab676912":"markdown","a998405f":"markdown","9df1a718":"markdown","c60f19fe":"markdown","89edff4b":"markdown","fa6e674c":"markdown"},"source":{"09a44997":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0febf613":"train_data = pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/train.csv\", low_memory=False)\ntest_data =  pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/test.csv\", low_memory=False)\nsample_submission =  pd.read_csv(\"\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/sample_submission.csv\", low_memory=False)","7c193183":"train_data.describe()","60086211":"train_data.head()","da16f457":"test_data.describe()","7b928fca":"test_data.head()","2d7474c1":"irreleventColumns = ['id','Data As Of', 'End Date','Group','Year','Month','Week-Ending Date','Total Deaths', 'Footnote', 'HHS Region']\n\ntrain_data = train_data[train_data['Footnote'] != train_data['Footnote'].unique()[1]]\ntrain_data = train_data[train_data['HHS Region'] == train_data['HHS Region'].unique()[0]]\ntrain_data = train_data[~train_data['MMWR Week'].isnull()]\n\nfor i in irreleventColumns:\n    train_data = train_data.drop([str(i)],axis=1)\n\ntrain_data.head()","2c581e4d":"train_data.describe()\ntrain_data.columns\n\nfor i in train_data.columns:\n    print(\"Train Data Column {}: {} is null\".format(i, train_data[i].isnull().sum()))\ntrain_data.describe()","d9698f98":"irreleventColumns = ['id','Data As Of', 'End Date','Group','Year','Month','Week-Ending Date','Total Deaths', 'HHS Region']\n\ntest_data = test_data[test_data['HHS Region'] == test_data['HHS Region'].unique()[0]]\ntest_data = test_data[~test_data['MMWR Week'].isnull()]\n\nfor i in irreleventColumns:\n    test_data = test_data.drop([str(i)],axis=1)\n\ntrain_data.head()","0dc6786a":"test_data.describe()\ntest_data.columns\n\nfor i in test_data.columns:\n    print(\"Test Data Column {}: {} is null\".format(i, test_data[i].isnull().sum()))\ntest_data.describe()","f26250d7":"print(train_data.shape)\nage = train_data['Age Group'].unique()\nrace = train_data['Race and Hispanic Origin Group'].unique()\nMMWR = train_data['MMWR Week'].unique()\nages = []\nraces = []\nMMWRs = []\nfor i in range(len(age)):\n    ages.append(train_data[train_data['Age Group'] == age[i]])\n    print(\"Death for ages {}\\n{}\\n\".format(age[i],ages[i].describe()))\nfor i in range(len(race)):\n    races.append(train_data[train_data['Race and Hispanic Origin Group'] == race[i]])\n    print(\"Death for races {}\\n{}\\n\".format(race[i],races[i].describe()))\nfor i in range(len(MMWR)):\n    MMWRs.append(train_data[train_data['MMWR Week'] == MMWR[i]])\n#     print(\"Death for week {}\\n{}\\n\".format(MMWR[i],MMWRs[i].describe()))\n","6686e5ef":"import matplotlib.pyplot as plt\ntrain_data.plot()","9e613fbc":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(15,10))\nplt.scatter(train_data['Age Group'], train_data['COVID-19 Deaths'])\nplt.xlabel('Age')\nplt.ylabel('Deaths')\n","ae41d7dd":"plt.figure(figsize=(40,15))\nplt.scatter(train_data['Race and Hispanic Origin Group'], train_data['COVID-19 Deaths'])\nplt.xlabel('Race')\nplt.ylabel('Deaths')","e637a5e6":"\nfor i in range(len(ages)):\n    plt.figure(figsize=(40,15))\n    print(\"Age {}\".format(age[i]))\n    ages[i][['Age Group', 'COVID-19 Deaths']].plot()\n","f25de044":"for i in range(len(races)):\n    plt.figure(figsize=(40,15))\n    print(\"Race {}\".format(race[i]))\n    races[i][['Race and Hispanic Origin Group', 'COVID-19 Deaths']].plot()","c9ba1e50":"for i in range(len(train_data['Start Date'])):\n    if '2021' in train_data['Start Date'][i]:\n        train_data['Start Date'][i] = '3'\n    if '2019' in train_data['Start Date'][i]:\n        train_data['Start Date'][i] = '1'\n    if '2020' in train_data['Start Date'][i]:\n        train_data['Start Date'][i] = '2'\nfor i in range(len(test_data['Start Date'])):\n    if '2021' in test_data['Start Date'][i]:\n        test_data['Start Date'][i] = '3'\n    if '2019' in test_data['Start Date'][i]:\n        test_data['Start Date'][i] = '1'\n    if '2020' in test_data['Start Date'][i]:\n        test_data['Start Date'][i] = '2'\n\nfor i in range(len(train_data['Race and Hispanic Origin Group'])):\n    if train_data['Race and Hispanic Origin Group'][i] == 'Hispanic':\n       train_data['Race and Hispanic Origin Group'][i] = 1 \n    if train_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic American Indian or Alaska Native':\n       train_data['Race and Hispanic Origin Group'][i] = 2 \n    if train_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic Asian':\n       train_data['Race and Hispanic Origin Group'][i] = 3 \n    if train_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic Black':\n       train_data['Race and Hispanic Origin Group'][i] = 4 \n    if train_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic More than one race':\n       train_data['Race and Hispanic Origin Group'][i] = 5 \n    if train_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic Native Hawaiian or Other Pacific Islander':\n       train_data['Race and Hispanic Origin Group'][i] = 6 \n    if train_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic White':\n       train_data['Race and Hispanic Origin Group'][i] = 7 \n    if train_data['Race and Hispanic Origin Group'][i] == 'Unknown':\n       train_data['Race and Hispanic Origin Group'][i] = 8 \nfor i in range(len(test_data['Race and Hispanic Origin Group'])):\n    if test_data['Race and Hispanic Origin Group'][i] == 'Hispanic':\n       test_data['Race and Hispanic Origin Group'][i] = 1 \n    if test_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic American Indian or Alaska Native':\n       test_data['Race and Hispanic Origin Group'][i] = 2 \n    if test_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic Asian':\n       test_data['Race and Hispanic Origin Group'][i] = 3 \n    if test_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic Black':\n       test_data['Race and Hispanic Origin Group'][i] = 4 \n    if test_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic More than one race':\n       test_data['Race and Hispanic Origin Group'][i] = 5 \n    if test_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic Native Hawaiian or Other Pacific Islander':\n       test_data['Race and Hispanic Origin Group'][i] = 6 \n    if test_data['Race and Hispanic Origin Group'][i] == 'Non-Hispanic White':\n       test_data['Race and Hispanic Origin Group'][i] = 7 \n    if test_data['Race and Hispanic Origin Group'][i] == 'Unknown':\n       test_data['Race and Hispanic Origin Group'][i] = 8 \n\nfor i in range(len(train_data['Age Group'])):\n    if train_data['Age Group'][i] == '0-4 years':\n        train_data['Age Group'][i] = 1\n    if train_data['Age Group'][i] == '5-17 years':\n        train_data['Age Group'][i] = 2\n    if train_data['Age Group'][i] == '18-29 years':\n        train_data['Age Group'][i]= 3\n    if train_data['Age Group'][i] == '30-39 years':\n        train_data['Age Group'][i] = 4\n    if train_data['Age Group'][i] == '40-49 years':\n        train_data['Age Group'][i] = 5\n    if train_data['Age Group'][i] == '50-64 years':\n        train_data['Age Group'][i] = 6\n    if train_data['Age Group'][i] == '65-74 years':\n        train_data['Age Group'][i] = 7\n    if train_data['Age Group'][i] == '75-84 years':\n        train_data['Age Group'][i] = 8\n    if train_data['Age Group'][i] == '85 years and over':\n        train_data['Age Group'][i] = 9      \nfor i in range(len(test_data['Age Group'])):\n    if test_data['Age Group'][i] == '0-4 years':\n        test_data['Age Group'][i] = 1\n    if test_data['Age Group'][i] == '5-17 years':\n        test_data['Age Group'][i] = 2\n    if test_data['Age Group'][i] == '18-29 years':\n        test_data['Age Group'][i]= 3\n    if test_data['Age Group'][i] == '30-39 years':\n        test_data['Age Group'][i] = 4\n    if test_data['Age Group'][i] == '40-49 years':\n        test_data['Age Group'][i] = 5\n    if test_data['Age Group'][i] == '50-64 years':\n        test_data['Age Group'][i] = 6\n    if test_data['Age Group'][i] == '65-74 years':\n        test_data['Age Group'][i] = 7\n    if test_data['Age Group'][i] == '75-84 years':\n        test_data['Age Group'][i] = 8\n    if test_data['Age Group'][i] == '85 years and over':\n        test_data['Age Group'][i] = 9\n        \nprint(train_data['Race and Hispanic Origin Group'].unique(), test_data['Race and Hispanic Origin Group'].unique(),train_data['Age Group'].unique(),test_data['Age Group'].unique())","61f984ee":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Ridge,LinearRegression,Lasso,ElasticNet\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score,TimeSeriesSplit\nfrom sklearn.metrics import mean_squared_error\n\nsplits = [3,5,10,15,25]\nfeatures = ['Age Group','MMWR Week','Race and Hispanic Origin Group','Start Date']\nselectedFeatures = [features[0],features[1],features[2]]\nX = train_data[selectedFeatures]\ny = train_data[['COVID-19 Deaths']]\n\npredictAtNLg3 =[]\npredictAtNRd3 =[]\npredictAtNLs3 =[]\npredictAtNEn3 =[]\npredictAtNLg5 =[]\npredictAtNRd5 =[]\npredictAtNLs5 =[]\npredictAtNEn5 =[]\npredictAtNLg10 =[]\npredictAtNRd10 =[]\npredictAtNLs10 =[]\npredictAtNEn10 =[]\npredictAtNLg15 =[]\npredictAtNRd15 =[]\npredictAtNLs15 =[]\npredictAtNEn15 =[]\npredictAtNLg25 =[]\npredictAtNRd25 =[]\npredictAtNLs25 =[]\npredictAtNEn25 =[]\n\nfor i in splits:\n    rmsDistLg =[]\n    rmsDistRd =[]\n    rmsDistLs =[]\n    rmsDistEn =[]\n    tscv = TimeSeriesSplit(n_splits=i)\n    for train_index, test_index in tscv.split(X):\n        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n        lg.fit(X_train, y_train)\n        rd.fit(X_train,y_train)\n        ls.fit(X_train,y_train)\n        en.fit(X_train,y_train)\n\n        predictionsLg= lg.predict(X_test[selectedFeatures])\n        predictionsRd= rd.predict(X_test[selectedFeatures])\n        predictionsLs= ls.predict(X_test[selectedFeatures])\n        predictionsEn= en.predict(X_test[selectedFeatures])\n        if i == 3:\n            predictAtNLg3.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNRd3.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNLs3.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNEn3.append(lg.predict(test_data[selectedFeatures]))\n        if i == 5:\n            predictAtNLg5.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNRd5.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNLs5.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNEn5.append(lg.predict(test_data[selectedFeatures]))\n        if i == 10:\n            predictAtNLg10.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNRd10.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNLs10.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNEn10.append(lg.predict(test_data[selectedFeatures]))\n        if i == 15:\n            predictAtNLg15.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNRd15.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNLs15.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNEn15.append(lg.predict(test_data[selectedFeatures]))\n        if i == 25:\n            predictAtNLg25.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNRd25.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNLs25.append(lg.predict(test_data[selectedFeatures]))\n            predictAtNEn25.append(lg.predict(test_data[selectedFeatures]))\n        print('\\n')\n        print('{}'.format(i))\n        print(\"Feature Coefficients\\nLinearRegression: {}\\nRidge: {}\\nLasso: {}\\nElasticNet: {}\".format(lg.coef_, rd.coef_, ls.coef_, en.coef_))\n        print(\"Root Mean Squared\\nLinearRegression: {}\\nRidge: {}\\nLasso: {}\\nElasticNet: {}\".format(rmsLg,rmsRd,rmsLs,rmsEn))\n        print('\\n')\n        rmsLg = mean_squared_error(y_test,predictionsLg,squared=False)\n        rmsDistLg.append(rmsLg)\n        rmsRd = mean_squared_error(y_test,predictionsRd,squared=False)\n        rmsDistRd.append(rmsRd)\n        rmsLs = mean_squared_error(y_test,predictionsLs,squared=False)\n        rmsDistLs.append(rmsLs)\n        rmsEn = mean_squared_error(y_test,predictionsEn,squared=False)\n        rmsDistEn.append(rmsEn)\n    \n    distributions = pd.DataFrame({'Linear Regression':rmsDistLg, 'Ridge':rmsDistRd, 'Lasso':rmsDistLs, 'Elastic Net':rmsDistEn})\n    print(distributions.describe())\n    distributions.plot()\n","6245b707":"lgOutput = pd.DataFrame({'id':sample_submission.id})\nrdOutput = pd.DataFrame({'id':sample_submission.id})\nlsOutput = pd.DataFrame({'id':sample_submission.id})\nenOutput = pd.DataFrame({'id':sample_submission.id})\n# predictAtNLg3 =[]\n# predictAtNRd3 =[]\n# predictAtNLs3 =[]\n# predictAtNEn3 =[]\npredictionsRd = predictAtNRd25[12] \n# lgOutput['COVID-19 Deaths'] = abs(predictionsLg)\n# #Ridge best so far\nrdOutput['COVID-19 Deaths'] = abs(predictionsRd)\n# lsOutput['COVID-19 Deaths'] = abs(predictionsLs)\n# enOutput['COVID-19 Deaths'] = abs(predictionsEn)\n\n# lgOutput.to_csv('submission.csv', index=False)\nrdOutput.to_csv('submission.csv', index=False)\n# lsOutput.to_csv('submission.csv', index=False)\n# enOutput.to_csv('submission.csv', index=False)\nprint(rdOutput)","0a4c4f08":"# !!! Output and Submission !!!","57d3df5c":"# Now do the same for test data","7c29e28d":"# !!! Describe Data !!!","41f631bc":"# !!! EDA !!!","c9d7040b":"# Why we removed those columns and null\/nan?\n## id - Not relevent to time series\n## Data As Of - most updated time of data not relevent to this analysis of covid death\n## End Date, Group, Year, Month - These along with Start date, are redundent, so a point of reference to date was enough\n## Week Ending - We have MMWR date to represent which week we are in, although year is not taken into account at the moment\n## Total Death - We are looking at covid death at certain points, although total death could be relevent in looking at trends for rates of increase, and logarithmic curves of new cases (Hence, flatten the curve)\n## HHS Region - We are looking at deaths in the United States, not specific HHS regions. Although we could tally up all the regions death, this is an extra unnecessary when data has been provided to us. There is also missing data region by region\n## Footntoe - Not necessary for our analysis. But a note that some data was missing in HHS Region vs a single United States value was relevent. \n\n# Why we filtered HHS Region, Footnote and MMWR Week?\n## HHS Region - By searching for the United States, we have a summation of Covid Death for the United States as oppose to per region, We could then drop the column\n## FootNote - By filtering and then dropping footnote, we could quickly filter out the HHS region and find all in the United States\n## MMWR Week- By filtering out MMWR Week == nan, we can focus on just weekly covid deaths in the united states. Although year is not denoted, that can be extracted from start date","3a4dfc6e":"# !!! Load Data !!!","af0f2f8d":"## Left  print(\"Death for week {}\\n{}\\n\".format(MMWR[i],MMWRs[i].describe())) commented out otherwise really big output","10beb14a":"# Splitting MMWR to account for years, Reencoding race\/age for modeling\n\n## This is the worst code ever! Also I tried one hot encoding... didnt turn out so hot, the wall of red errors means nothing...","ab676912":"## Wow! Thats a lot more concise! Lets take gander at it.","a998405f":"# Outliers\n## I honestly chose to leave the data as it is because any boxplot I attempted did not explain the full story to why the outlier existed, so I assumed it was all relevent till I could go back and re-engineer the data","9df1a718":"## Engineered MMWR as years 1 2 3 for 2019,2020,2021, ended up having a worst effect on the outcome\n## Engineered Age\/Race 1-9 to use as features to great affect. We can see below in the coef that Age\/Race are the biggest factors in determining outcome\n## Honestly didnt create any new features","c60f19fe":"# !!! Building Models and Validation !!!","89edff4b":"# No missing Data!","fa6e674c":"## Now to determine important\/relevent features (columns). Because I went to class, we were privy to relevent columns to save time. Lets extract them!"}}