{"cell_type":{"c1457e2a":"code","2c6ce4c1":"code","a4788fb0":"code","fb2364e4":"code","cba32661":"code","e9d33e74":"code","a77fb2c2":"code","19196657":"code","2a79f57f":"code","db2349b4":"code","4966fefa":"code","2cf2d988":"code","f9cf5379":"code","c078f4c3":"code","5b14a47a":"code","a2db18eb":"code","0c74edcf":"code","74941d9e":"code","b975a3de":"code","82bc719c":"code","47dcb63a":"code","89fb5714":"code","9f21d3fd":"code","562b466e":"code","d663b9db":"code","0c1c4769":"code","0d79290f":"code","5f642a26":"code","519e1015":"code","51dc6a6f":"code","0f31c16a":"code","fc75f663":"code","e784e785":"code","7fd6ab1f":"code","bd035ed1":"code","c895797a":"markdown","d13fa8e0":"markdown","379d2023":"markdown","2b99656e":"markdown","195581dd":"markdown","eccc8068":"markdown","bee13ab4":"markdown","ad669c20":"markdown","680e678a":"markdown","e4886d95":"markdown","7791ce6e":"markdown","8b71dfae":"markdown","2f1dc87f":"markdown","11da0d1c":"markdown","011a7930":"markdown","ab2bfcc0":"markdown","7eabcea3":"markdown","c439d50a":"markdown","58621278":"markdown","c467bcda":"markdown","d060c809":"markdown","06317c39":"markdown","70b8edac":"markdown"},"source":{"c1457e2a":"import pandas as pd\nimport seaborn as sns\nfrom learntools.advanced_pandas.indexing_selecting_assigning import *\n\nreviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\npd.set_option(\"display.max_rows\", 5)","2c6ce4c1":"reviews.head()","a4788fb0":"check_q1(pd.DataFrame())","fb2364e4":"reviews.description","cba32661":"check_q1(reviews.description)","e9d33e74":"reviews.description[0]","a77fb2c2":"check_q2(reviews.description[0])","19196657":"reviews.iloc[0]\n","2a79f57f":"check_q3(reviews.iloc[0])","db2349b4":"reviews.iloc[0:10,1]\ncheck_q4(reviews.iloc[0:10,1])","4966fefa":"answer_q4()","2cf2d988":"check_q4(reviews.iloc[0:10,1])","f9cf5379":"reviews.iloc[[1,2,3,5,8]]","c078f4c3":"check_q5(reviews.iloc[[1,2,3,5,8]])","5b14a47a":"reviews[['country','province','region_1','region_2']].iloc[[0,1,10,100]]","a2db18eb":"check_q6(reviews[['country','province','region_1','region_2']].iloc[[0,1,10,100]])","0c74edcf":"reviews[['country','variety']].iloc[:100]","74941d9e":"check_q7(reviews[['country','variety']].iloc[:100])","b975a3de":"x=reviews[reviews.country=='Italy']\nx[['country','variety']]","82bc719c":"reviews[['country','variety']].loc[reviews.country =='Italy']","47dcb63a":"check_q8(reviews.loc[reviews.country =='Italy'])","89fb5714":"reviews[reviews.region_2.notnull()]","9f21d3fd":"check_q9(reviews[reviews.region_2.notnull()])","562b466e":"reviews.points","d663b9db":"check_q10(reviews.points)","0c1c4769":"reviews.points.iloc[0:999]","0d79290f":"check_q11(reviews.points.iloc[0:999])","5f642a26":"reviews['points'].iloc[-1000:]","519e1015":"check_q12(reviews['points'].iloc[-1000:])","51dc6a6f":"answer_q12","0f31c16a":"# Your code here\nreviews.points.loc[reviews.country=='Italy']","fc75f663":"check_q13(reviews.points.loc[reviews.country=='Italy'])","e784e785":"# Your code here\nreviews[reviews.country.isin(['Italy', 'France']) & (reviews.points>=90)].country","7fd6ab1f":"check_q14(reviews[reviews.country.isin([\"Italy\", \"France\"]) & (reviews.points >= 90)].country)","bd035ed1":"answer_q14()","c895797a":"**Exercise 11**: <!--What is the distribution of reviews scores for the first 1000 wines in the dataset?--> Select the `points` column for the first 1000 wines.","d13fa8e0":"**Exercise 1**: Select the `description` column from `reviews`.","379d2023":"**Exercise 7**: Select the `country` and `variety` columns of the first 100 records. \n\nHint: you may use `loc` or `iloc`. When working on the answer this question and the several of the ones that follow, keep the following \"gotcha\" described in the [reference](https:\/\/www.kaggle.com\/residentmario\/indexing-selecting-assigning-reference) for this tutorial section:\n\n> `iloc` uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. So `0:10` will select entries `0,...,9`. `loc`, meanwhile, indexes inclusively. So `0:10` will select entries `0,...,10`.\n\n> [...]\n\n> ...[consider] when the DataFrame index is a simple numerical list, e.g. `0,...,1000`. In this case `df.iloc[0:1000]` will return 999 entries, while `df.loc[0:1000]` return 1000 of them! To get 1000 elements using `iloc`, you will need to go one higher and ask for `df.iloc[0:1001]`.","2b99656e":"# Introduction\n\nMost projects requiring selecting specific values from a `DataFrame` or `Series`. You will work on that skill here using the [Wine Reviews dataset](https:\/\/www.kaggle.com\/zynicide\/wine-reviews). \n\n# Relevant Resources\n* **[Quickstart to indexing and selecting data](https:\/\/www.kaggle.com\/residentmario\/indexing-and-selecting-data\/)** \n* [Indexing and Selecting Data](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html) section of pandas documentation\n* [Pandas Cheat Sheet](https:\/\/assets.datacamp.com\/blog_assets\/PandasPythonForDataScience.pdf)\n\n\n","195581dd":"check_q4(reviews.iloc[0:10,1])","eccc8068":"**Exercise 8**: Select wines made in `Italy`. Hint: `reviews.country` equals what?","bee13ab4":"Look at an overview of your data by running the following line","ad669c20":"**Exercise 14**: Who produces more above-averagely good wines, France or Italy? Select the `country` column, but only  when said `country` is one of those two options, _and_ the `points` column is greater than or equal to 90.\n\nYour output should look roughly like this:\n```\n119       France\n120        Italy\n           ...  \n129969    France\n129970    France\nName: country, Length: 15840, dtype: object\n```","680e678a":"For the first set of questions, if you use `check_qN` on your answer, and your answer is right, a simple `True` value will be returned.\n\nFor the second set of questions, using this function to check a correct answer will present you will an informative graph!\n\nIf you get stuck, use `answer_qN` function to print the answer outright.","e4886d95":"The remaining exercises are visual.","7791ce6e":"**Exercise 2**: Select the first value from the description column of `reviews`.","8b71dfae":"# Exercises","2f1dc87f":"# Set Up\nRun the following cell to load your data and some utility functions","11da0d1c":"**Exercise 6**: Select the `country`, `province`, `region_1`, and `region_2` columns of the records with the `0`, `1`, `10`, and `100` index positions. In other words, generate the following `DataFrame`:\n\n![](https:\/\/i.imgur.com\/FUCGiKP.png)","011a7930":"## Keep going\n\nMove on to the [**Summary functions and maps workbook**](https:\/\/www.kaggle.com\/kernels\/fork\/595524).","ab2bfcc0":"**Exercise 13**: <!--What is the distribution of reviews scores for wines made in Italy?--> Select the `points` column, but only for wines made in Italy.","7eabcea3":"**Exercise 5**: Select the records with the `1`, `2`, `3`, `5`, and `8` row index positions. In other words, generate the following`DataFrame`:\n\n![](https:\/\/i.imgur.com\/sHZvI1O.png)","c439d50a":"# Checking Answers\n\nYou can check your answers in each of the exercises that follow using the  `check_qN` function provided in the code cell above (replacing `N` with the number of the exercise). For example here's how you would check an incorrect answer to exercise 1:","58621278":"**Exercise 12**: <!--What is the distribution of reviews scores for the last 1000 wines in the dataset?--> Select the `points` column for the last 1000 wines.","c467bcda":"**Exercise 4**: Select the first 10 values from the `description` column in `reviews`. Hint: format your output as a `pandas` `Series`.","d060c809":"**Exercise 9**: Select wines whose `region_2` is not `NaN`.","06317c39":"**Exercise 3**: Select the first row of data (the first record) from `reviews`. Hint: from this exercise onwards I strongly recommend using `loc` or `iloc`.","70b8edac":"**Exercise 10**: <!--What is the distribution of wine ratings assigned by Wine Magazine?--> Select the `points` column."}}