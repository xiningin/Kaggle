{"cell_type":{"a841371c":"code","fab40f42":"code","33bfa515":"code","3e8b86ff":"code","b407daf5":"code","22a90f6c":"code","a74b5ba9":"code","be7b9d17":"code","48450345":"code","3a683800":"code","0a110378":"code","36cfa856":"code","503e74fa":"code","1af80820":"code","d3c55ad4":"code","94259848":"code","99040911":"code","a29a9d8c":"code","dd40fe26":"code","d3bd65db":"code","af00b848":"markdown","bba89d8c":"markdown","8de0738e":"markdown","dcb19777":"markdown","d7eb0a7c":"markdown","04a8769a":"markdown","40597e84":"markdown","496db06f":"markdown","8ce41a12":"markdown","c4213f6f":"markdown","bbcdd66e":"markdown"},"source":{"a841371c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nprint(\"Tensorflow version \" + tf.__version__)","fab40f42":"!pip install -q efficientnet\n\nimport efficientnet.tfkeras as efn","33bfa515":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","3e8b86ff":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntrain.head()","b407daf5":"Y_train = train['label'].values.astype('float32')\nY_train = tf.keras.utils.to_categorical(Y_train, 10)\nY_train","22a90f6c":"X_train = train.drop(labels=['label'], axis=1)\nX_train.shape","a74b5ba9":"X_train = X_train.astype('float32')\nX_train = X_train \/ 255","be7b9d17":"X_train = X_train.values.reshape(42000,28,28,1)\nX_train.shape","48450345":"plt.imshow(X_train[1][:,:,0])","3a683800":"X_train = np.pad(X_train, ((0,0), (2,2), (2,2), (0,0)), mode='constant')\nX_train.shape","0a110378":"X_train = np.squeeze(X_train, axis=-1)\nX_train = stacked_img = np.stack((X_train,)*3, axis=-1)\nX_train.shape","36cfa856":"plt.imshow(X_train[1][:,:,0])","503e74fa":"def create_model():\n    enet = efn.EfficientNetB3(\n    input_shape=(32, 32, 3),\n    weights='imagenet',\n    include_top=False,\n    )        \n    \n    model = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(1024, activation=\"relu\"),\n        tf.keras.layers.Dropout(0.5),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ])\n    \n    return model","1af80820":"with strategy.scope():\n  model = create_model()\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","d3c55ad4":"%%time\n\nmodel.fit(\n    X_train, Y_train,\n    epochs=10,\n    batch_size = 210,\n    shuffle=True,\n    verbose = 1\n)","94259848":"test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ntest.head()","99040911":"test = test.astype('float32')\ntest = test \/ 255\ntest = test.values.reshape(len(test),28,28,1)\ntest = np.pad(test, ((0,0), (2,2), (2,2), (0,0)), mode='constant')\ntest = np.squeeze(test, axis=-1)\ntest = stacked_img = np.stack((test,)*3, axis=-1)\ntest.shape","a29a9d8c":"%%time\n\ntest_predictions = model.predict(test)","dd40fe26":"# select the index with the maximum probability\n\nresults = np.argmax(test_predictions,axis = 1)\nresults = pd.Series(results,name=\"Label\")","d3bd65db":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)\n\nsubmission.head()","af00b848":"### Prediction","bba89d8c":"### This kernel shows how to easy use TPU (tensor processing unit) with tf.keras","8de0738e":"### Submit","dcb19777":"### Load test data","d7eb0a7c":"### Enable TPU","04a8769a":"#### Reshape data","40597e84":"### Load train data","496db06f":"#### Show some image","8ce41a12":"### Train","c4213f6f":"### Model","bbcdd66e":"#### Normalize data"}}