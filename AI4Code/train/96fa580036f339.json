{"cell_type":{"3e2eb643":"code","86c0b3ce":"code","cb4d995d":"code","fb5b2b1a":"code","86440dec":"code","1017207b":"code","4056df69":"markdown","3014a7b7":"markdown"},"source":{"3e2eb643":"import sys\nsys.path.append('..\/input\/timm-pytorch-image-models\/pytorch-image-models-master')\nfrom timm import create_model\nfrom IPython.display import display\nimport gc\n\nfrom fastai.vision.all import *","86c0b3ce":"seed = 402\ntorch.manual_seed(seed)\ntorch.cuda.manual_seed(seed)\ntorch.backends.cudnn.deterministic = True\ntorch.use_deterministic_algorithms = True","cb4d995d":"class Data:\n    def __init__(self, data_path='..\/input\/petfinder-pawpularity-score\/', n_split=5):\n        self.batch_size = batch_size\n        self.dataset_path = Path('..\/input\/petfinder-pawpularity-score\/')\n        train_val_df = self.preprocess_df(pd.read_csv(self.dataset_path\/'train.csv'), is_train=True)\n        self.test_df = self.preprocess_df(pd.read_csv(self.dataset_path\/'test.csv'), is_train=False)\n        self.train_val_df = self.get_split_df(train_val_df, n_split=n_split)\n        \n    def preprocess_df(self, df, is_train):\n        if is_train:\n            img_dirname = \"train\"\n        else:\n            img_dirname = \"test\"\n            df['Pawpularity'] = [1] * len(df)\n        df['path'] = df['Id'].map(lambda x:str(self.dataset_path\/img_dirname\/x)+'.jpg')\n        df = df.drop(columns=['Id'])\n        df['norm_score'] = df['Pawpularity']\/100\n        if is_train:\n            df = df.sample(frac=1).reset_index(drop=True) #shuffle dataframe\n            return df\n        else:\n            return df\n    \n    def get_split_df(self, df, n_split=5):\n        from sklearn.model_selection import StratifiedKFold\n        \n        num_bins = int(np.floor(1+(3.3)*(np.log2(len(df)))))\n        print(num_bins)\n\n        df['bins'] = pd.cut(df['norm_score'], bins=num_bins, labels=False)\n        print()\n        display(df['bins'].hist())\n        plt.show()\n\n        df['fold'] = -1\n\n        strat_kfold = StratifiedKFold(n_splits=n_split, random_state=seed, shuffle=True)\n        for i, (_, train_index) in enumerate(strat_kfold.split(df.index, df['bins'])):\n            df.iloc[train_index, -1] = i\n\n        df['fold'] = df['fold'].astype('int')\n        df.fold.value_counts().plot.bar()\n        plt.show()\n        return df\n    \n    def get_test_dls(self, img_size, batch_size):\n        train_df_f = self.train_val_df.copy()\n        dls = ImageDataLoaders.from_df(train_df_f, #pass in train DataFrame\n                                       valid_pct=0.2,\n                                       seed=seed, #seed\n                                       fn_col='path', # filename\/path is in the second column of the DataFrame\n                                       label_col='norm_score', # label is in the first column of the DataFrame\n                                       y_block=RegressionBlock, # The type of target\n                                       bs=batch_size, # pass in batch size\n                                       num_workers=2,\n                                       item_tfms=Resize(img_size), #pass in item_tfms\n                                       batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) #pass in batch_tfms\n        return dls","fb5b2b1a":"def petfinder_rmse(input,target):\n    return 100*torch.sqrt(F.mse_loss(torch.sigmoid(input.flatten()), target))","86440dec":"n_split=5\nwith_1k = True\nbatch_size = 8\n\ndata = Data(n_split=n_split)\n\nall_preds = []\nfor fold in range(n_split):\n    print(f'Fold {fold} results')\n    dls = data.get_test_dls(batch_size=batch_size, img_size=224)\n    test_dl = dls.test_dl(data.test_df)\n    learn = load_learner(f\"..\/input\/pet-findder-img-size-224-1k\/model_fold_{fold}.pkl\")\n    preds, _ = learn.tta(dl=test_dl, n=5, beta=0)\n    all_preds.append(preds)\n    \n    dls = data.get_test_dls(batch_size=batch_size, img_size=384)\n    test_dl = dls.test_dl(data.test_df)\n    learn = load_learner(f\"..\/input\/pet-findder-img-size-384-1k\/model_fold_{fold}.pkl\")\n    preds, _ = learn.tta(dl=test_dl, n=5, beta=0)\n    all_preds.append(preds)\n    \n    del learn, dls, test_dl\n    torch.cuda.empty_cache()\n    gc.collect()\n    \n# for fold in range(10):\n#     dls = data.get_test_dls(batch_size=batch_size, img_size=224)\n#     test_dl = dls.test_dl(data.test_df)\n#     learn = load_learner(f\"..\/input\/pet-findder-img-size-224-1k-fold10\/model_fold_{fold}.pkl\")\n#     preds, _ = learn.tta(dl=test_dl, n=5, beta=0)\n#     all_preds.append(preds)\n    \n#     del learn, dls, test_dl\n#     torch.cuda.empty_cache()\n#     gc.collect()","1017207b":"sample_df = pd.read_csv('..\/input\/petfinder-pawpularity-score\/sample_submission.csv')\npreds = np.mean(np.stack(all_preds), axis=0) # In regeression, median is often better than mean. \nsample_df['Pawpularity'] = preds*100\nsample_df.to_csv('submission.csv',index=False)\ndisplay(pd.read_csv('submission.csv').head())","4056df69":"# 2 Trainer","3014a7b7":"# 1 Data"}}