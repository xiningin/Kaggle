{"cell_type":{"451bde97":"code","3be37a57":"code","dc6282e2":"code","23af8d58":"code","ed506c58":"code","bb389c28":"code","df3a7fa4":"code","d696fd26":"code","cae33322":"code","a63ac8fb":"code","97aefb1e":"code","2318497d":"code","a2b3d602":"code","216bd8e3":"code","bce0b0cc":"code","804ede8c":"code","72323e82":"code","cafbc99b":"code","2dc0d404":"code","00b096c0":"code","1f024757":"code","05b03a4a":"code","cecfe4ec":"code","cdab504c":"code","3b6b9a93":"code","10a7c759":"code","8ead2aed":"code","548fcecf":"code","2c6b778e":"code","f8101552":"markdown","33e6ab8d":"markdown","6926b498":"markdown","b9c83178":"markdown","ab472c3c":"markdown","5e0b9272":"markdown","0183a69f":"markdown","e17b099a":"markdown","8bbebc45":"markdown","693c3df3":"markdown","37886567":"markdown","33cc8b90":"markdown","789934bc":"markdown","a58693c4":"markdown","ae10ec71":"markdown","4b8ca683":"markdown","4be437e9":"markdown","c312fecb":"markdown"},"source":{"451bde97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport warnings\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport tensorflow\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3be37a57":"warnings.filterwarnings(\"ignore\")\ntrain1=pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntrain=pd.read_csv(\"..\/input\/new-digit-dataset\/Digit_Train_Final.csv\")\ntest=pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain.head()","dc6282e2":"x=train.drop(labels=[\"label\"],axis=1)\ny=train[\"label\"]","23af8d58":"train.head()","ed506c58":"del train['Unnamed: 0']","bb389c28":"x=train.drop(['label'],axis=1)\ny=train['label']","df3a7fa4":"def visualize_input(img, ax):\n    ax.imshow(img, cmap='hot')\n    width, height = img.shape\n    thresh = img.max()\/2.5\n    for x in range(width):\n        for y in range(height):\n            ax.annotate(str(round(img[x][y],2)), xy=(y,x),\n                        horizontalalignment='center',\n                        verticalalignment='center',\n                        color='white' if img[x][y]<thresh else 'black')\n\nfig = plt.figure(figsize = (12,12)) \nax = fig.add_subplot(111)\nvisualize_input(x.iloc[3].as_matrix().reshape(28,28), ax)\nplt.title(train.iloc[3,0])\nplt.axis(\"off\")\nplt.show()","d696fd26":"def visualize_input(img, ax):\n    ax.imshow(img, cmap='copper')\n    width, height = img.shape\n    thresh = img.max()\/2.5\n    for x in range(width):\n        for y in range(height):\n            ax.annotate(str(round(img[x][y],2)), xy=(y,x),\n                        horizontalalignment='center',\n                        verticalalignment='center',\n                        color='white' if img[x][y]<thresh else 'black')\n\nfig = plt.figure(figsize = (12,12)) \nax = fig.add_subplot(111)\nvisualize_input(x.iloc[9].as_matrix().reshape(28,28), ax)\nplt.title(train.iloc[9,0])\nplt.axis(\"off\")\nplt.show()","cae33322":"#x=x\/255.0\n#test=test\/255.0\nfrom sklearn.preprocessing import MinMaxScaler\nnorm=MinMaxScaler()\nx=norm.fit_transform(x)\ntest=norm.fit_transform(test)\n","a63ac8fb":"x=x.reshape(-1,28,28,1)\ntest=test.reshape(-1,28,28,1)\nprint(\"x shape:\",x.shape)\nprint(\"test shape:\",test.shape)","97aefb1e":"from keras.utils.np_utils import to_categorical\ny=to_categorical(y,num_classes=10)\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.009,random_state=33)","2318497d":"print(\"x_train shape:\",x_train.shape)\nprint(\"x_test shape:\",x_test.shape)\nprint(\"y_train shape:\",y_train.shape)\nprint(\"y_test shape:\",y_test.shape),\nprint(\"test shape:\",test.shape)","a2b3d602":"from keras.models import Sequential # to create a cnn model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D,LeakyReLU,BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 128, kernel_size = 3,padding = 'Same',input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 128, kernel_size = 3,padding = 'Same',input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(Dropout(0.1))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same'))\nmodel.add(Conv2D(filters = 64, kernel_size = 3,padding = 'Same'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(Dropout(0.1))","216bd8e3":"model.add(Flatten())\nmodel.add(Dense(256))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(BatchNormalization())\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()","bce0b0cc":"from keras.optimizers import RMSprop,Adam,SGD,Adagrad,Adadelta,Adamax,Nadam\n#optimizer=Nadam(lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=None, schedule_decay=0.004)\n#optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\noptimizer=Adamax(lr=0.0002, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0)\n#optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=None, decay=0.0)\n#optimizer=SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)\n#optimizer=Adadelta(lr=1.0, rho=0.95, epsilon=0.1, decay=0.1)\n#optimizer=Adagrad(lr=0.01, epsilon=None, decay=0.0)","804ede8c":"model.compile(optimizer = optimizer , loss = \"binary_crossentropy\", metrics=[\"accuracy\"])","72323e82":"from keras.callbacks import ReduceLROnPlateau,BaseLogger,EarlyStopping\nlr_reduction = ReduceLROnPlateau(monitor='val_acc', patience=2, verbose=1, factor=0.1, min_lr=0.00001)\nb_l=BaseLogger(stateful_metrics=None)\ne_stop = EarlyStopping(monitor='val_acc', patience=4, verbose=1)","cafbc99b":"callbacks=[lr_reduction,b_l,e_stop]\nbatch_size=89\nepochs=20","2dc0d404":"datagen = ImageDataGenerator()\ndatagen.get_random_transform(img_shape=(28,28,1),seed=3)\ndatagen.flow(x=x, y=y, batch_size=32, shuffle=True, sample_weight=None, seed=None, save_to_dir=None, save_prefix='', save_format='png', subset=None)\n\ndatagen.fit(x_train)","00b096c0":"information = model.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),epochs=epochs,validation_data = (x_test, y_test), steps_per_epoch=x_train.shape[0] \/\/ batch_size,callbacks=callbacks) ","1f024757":"plt.style.use('dark_background')\nplt.figure(figsize=(15,12))\nplt.plot(information.history[\"val_loss\"],color=\"silver\",linewidth=4,label=\"Validation Loss\")\nplt.plot(information.history[\"loss\"],color=\"yellowgreen\",linewidth=4,label=\"Train Loss\")\nplt.title(\"Train - Test Loss\", fontsize=25, color='lime')\nplt.xlabel(\"Number Of Epochs\", fontsize=15)\nplt.ylabel(\"Loss\", fontsize=15)\nplt.grid(True)\nplt.legend()\nplt.show()","05b03a4a":"plt.style.use('seaborn-white')\nY_head=model.predict(x_test)\nY_head_class=np.argmax(Y_head,axis=1)\nY_true=np.argmax(y_test,axis=1)\nconf_mtrx=confusion_matrix(Y_true,Y_head_class)\nplt.subplots(figsize=(20,15))\nsb.heatmap(conf_mtrx,annot=True, annot_kws={\"size\": 16}, linewidths=0.8,cmap=\"viridis\",fmt='d', linecolor=\"purple\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\", fontsize=25, color='indigo')\nplt.show()","cecfe4ec":"karsilastirma=pd.DataFrame()\nkarsilastirma[\"prediction\"]=Y_head_class\nkarsilastirma[\"true\"]=Y_true","cdab504c":"karsilastirma['correct'] = karsilastirma.prediction == karsilastirma.true \nkarsilastirma[\"correct\"].value_counts()","3b6b9a93":"karsilastirma[karsilastirma['correct']==False]","10a7c759":"predicted= model.predict(test)","8ead2aed":"predicted = np.argmax(predicted,axis = 1)\n\npredicted = pd.Series(predicted,name=\"Label\")","548fcecf":"result = pd.concat([pd.Series(range(1,len(test)+1),name = \"ImageId\"),predicted],axis = 1)\n\nresult.to_csv(\"Digit_Recognizer_predicted.csv\",index=False)","2c6b778e":"result.head()","f8101552":"# #Datam\u0131z\u0131 okutuyoruz - Reading data ","33e6ab8d":"# Periyotlardaki do\u011frulama kay\u0131plar\u0131 - Validation loss in epochs","6926b498":"# Normalization - Normalize etme","b9c83178":"# Etiket kodlamas\u0131 ve veri setimizin train-test olarak ayr\u0131lmas\u0131 - Label Encoding and Separation of our data set as train-test","ab472c3c":"# Elimizdeki verilerin farkl\u0131 rotasyonlar\u0131n\u0131 alarak verilerimizi \u00e7o\u011falt\u0131r. - Data Augmentation","5e0b9272":"# Optimizasyon fonksiyonlar\u0131n\u0131 tan\u0131mlamak - Define the optimizer","0183a69f":"# **If you like it, move it up. :)**","e17b099a":"# Ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler ve Hedef de\u011ferimizi se\u00e7iyoruz. - Independent Variable and target value","8bbebc45":"# Modelin uygunlugu - Fit the model","693c3df3":"# Modeli derlemek -  Compile the model","37886567":"# Python Keras K\u00fct\u00fcphanesiyle N\u00f6ral A\u011f\u0131 olu\u015fturma - Create Neural Network with Keras in Python","33cc8b90":"# Confusion Matrix ile tahminlerin do\u011frulu\u011fu - Prediction verification with Confusion Matrix","789934bc":"# Veri setinden g\u00f6rselle\u015ftirmeler - Vizualizations in dataset","a58693c4":"# Veri setinden \u00f6rnek bir g\u00f6rselle\u015ftirme - Vizualization in dataset digit image","ae10ec71":"# \u00d6\u011frenme oran\u0131 optimizasyonu - Optimum Learning Rate","4b8ca683":"# Tam ba\u011flant\u0131 - Fully connected","4be437e9":"# \u0130\u015flenecek g\u00f6rsellerin bi\u00e7imini ayarlama - Setting the shape of images","c312fecb":"![NN-1024x576.png](attachment:NN-1024x576.png)"}}