{"cell_type":{"f9395680":"code","38c67ef6":"code","08297cf0":"code","143566fd":"code","e63ee147":"code","7623f0bb":"code","8021e7d1":"code","b5e857c2":"markdown","c54aeb87":"markdown","85edd005":"markdown","a1f61d08":"markdown","1fd3fe52":"markdown","808ef3e5":"markdown"},"source":{"f9395680":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38c67ef6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom xgboost import XGBRegressor\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer","08297cf0":"train=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv',index_col='Id')\ntest=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\nsubmit=pd.DataFrame(test['Id'])\ntest=test.set_index('Id')","143566fd":"train.select_dtypes(exclude='object').hist(bins=10,figsize=(25,19))\nplt.show()\n\n\n#------------------------------------------------------------------------------------------------------------\nplt.figure(figsize=(25,19))\nsns.heatmap(train.corr('spearman'),annot=True)\nplt.show()","e63ee147":"#-----------------------------------------------\nnull=train.loc[:,train.isnull().sum()>500]\ntrain=train.drop(null,axis=1)\ntest=test.drop(null,axis=1)\n\n\n#-----------------------------------------------\n\nencode=LabelEncoder()\nfor i in train.select_dtypes(include='object'):\n    train[i]=encode.fit_transform(train[i])\n    test[i]=encode.fit_transform(test[i])","7623f0bb":"model=XGBRegressor(base_score=0.4, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.4603, gamma=0.05,\n             gpu_id=-1, importance_type='gain', interaction_constraints='',\n             learning_rate=0.05, max_delta_step=0, max_depth=3,\n             min_child_weight=1.7817, monotone_constraints='()',\n             n_estimators=2200, n_jobs=4, nthread=-1, num_parallel_tree=1,\n             random_state=7, reg_alpha=0.464, reg_lambda=0.8571,\n             scale_pos_weight=1, subsample=0.5213,silent = True,tree_method='exact',\n             validate_parameters=1, verbosity=0)\n\n\npipeline=Pipeline(steps=[('impute',IterativeImputer(max_iter=4)),('model',model)])\npipeline.fit(train.drop('SalePrice',axis=1),np.log(train['SalePrice']))\n\nyhat=np.exp(pipeline.predict(test))\n\nsubmit['SalePrice']=yhat*0.01234+yhat\nsubmit.to_csv('ind.csv',index=False)","8021e7d1":"\nyhat=np.exp(grid_result.predict(test))\n\nsubmit['SalePrice']=yhat*0.01+yhat\nsubmit.to_csv('ind.csv',index=False)","b5e857c2":"**Goal->**\nIt is your job to predict the sales price for each house. For each Id in the test set, you must predict the value of the SalePrice variable. \n\n**Metric->**\nSubmissions are evaluated on Root-Mean-Squared-Error (RMSE) between the logarithm of the predicted value and the logarithm of the observed sales price. (Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.)","c54aeb87":"# House price prediction using XGBRegressor","85edd005":"#   Loading modules    ","a1f61d08":"# #.Modelling and Prediction","1fd3fe52":"# #.Data Visualization","808ef3e5":"# #.Data Cleaning"}}