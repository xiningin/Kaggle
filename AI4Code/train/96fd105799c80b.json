{"cell_type":{"ea330ac0":"code","244723e6":"code","92f152b1":"code","b5ecf50e":"code","05ed3098":"code","485826c4":"code","8e008a07":"code","4dcb7ef1":"code","b8754a66":"code","4aa9689e":"code","9c9d1521":"code","08e1dac6":"code","b9d36387":"code","4cdd8dae":"code","0ec7071b":"code","c2965e0a":"code","ab9b50b5":"code","4384021f":"code","d2d6164a":"code","c6d65d87":"markdown","5d1537bd":"markdown","75569bf0":"markdown","2826cc52":"markdown","df7902b9":"markdown","eb2a477c":"markdown","5e3e092f":"markdown","aecbc485":"markdown","4e021cf5":"markdown","eb9c91f9":"markdown","d2c6d08f":"markdown","0bee162c":"markdown","79eb1394":"markdown","7752f28d":"markdown","bcbe477b":"markdown","c253807f":"markdown","98e3d420":"markdown","ea0367f4":"markdown","f3db2668":"markdown","fde66439":"markdown","e7515573":"markdown","c9a77a7c":"markdown","9c8de24a":"markdown"},"source":{"ea330ac0":"# Pandas - Data manipulation and analysis library\nimport pandas as pd\n# NumPy - mathematical functions on multi-dimensional arrays and matrices\nimport numpy as np\n# Matplotlib - plotting library to create graphs and charts\nimport matplotlib.pyplot as plt\n# Re - regular expression module for Python\nimport re\n# Calendar - Python functions related to the calendar\nimport calendar\n\n# Manipulating dates and times for Python\nfrom datetime import datetime\n\n# Scikit-learn algorithms and functions\nfrom sklearn import linear_model\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import VotingRegressor\n\n# Settings for Matplotlib graphs and charts\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 12, 8\n\n# Display Matplotlib output inline\n%matplotlib inline\n\n# Additional configuration\nnp.set_printoptions(precision=2)","244723e6":"def scatterData(X_train, y_train, X_test, y_test, title):\n    plt.title('Prediction using ' + title)\n    plt.xlabel('Month sequence', fontsize=20)\n    plt.ylabel('Sales', fontsize=20)\n\n    # Use Matplotlib Scatter Plot\n    plt.scatter(X_train, y_train, color='blue', label='Training observation points')\n    plt.scatter(X_test, y_test, color='cyan', label='Testing observation points')","92f152b1":"def predictLinearRegression(X_train, y_train, X_test, y_test):\n\n    y_train = y_train.reshape(-1, 1)\n    y_test = y_test.reshape(-1, 1)\n\n    scatterData(X_train, y_train, X_test, y_test, 'Linear Regression')\n\n    reg = linear_model.LinearRegression()\n    reg.fit(X_train, y_train)\n    plt.plot(X_train, reg.predict(X_train), color='red', label='Linear regressor')\n    plt.legend()\n    plt.show()\n\n    # LINEAR REGRESSION - Predict\/Test model\n    y_predict_linear = reg.predict(X_test)\n\n    # LINEAR REGRESSION - Predict for January 2020\n    linear_predict = reg.predict([[predictFor]])\n    # linear_predict = reg.predict([[predictFor]])[0]\n\n    # LINEAR REGRESSION - Accuracy\n    accuracy = reg.score(X_train, y_train)\n\n    # LINEAR REGRESSION - Error\n    # error = round(np.mean((y_predict_linear-y_test)**2), 2)\n    \n    # Results\n    print('Linear Regression: ' + str(linear_predict) + ' (Accuracy: ' + str(round(accuracy*100)) + '%)')\n\n    return {'regressor':reg, 'values':linear_predict}","b5ecf50e":"def predictPolynomialRegression(X_train, y_train, X_test, y_test):\n\n    y_train = y_train.reshape(-1, 1)\n    y_test = y_test.reshape(-1, 1)\n\n    scatterData(X_train, y_train, X_test, y_test, 'Polynomial Regression')\n    \n    poly_reg = PolynomialFeatures(degree = 2)\n    X_poly = poly_reg.fit_transform(X_train)\n    poly_reg_model = linear_model.LinearRegression()\n    poly_reg_model.fit(X_poly, y_train)\n    plt.plot(X_train, poly_reg_model.predict(poly_reg.fit_transform(X_train)), color='green', label='Polynomial regressor')\n    plt.legend()\n    plt.show()\n\n    # Polynomial Regression - Predict\/Test model\n    y_predict_polynomial = poly_reg_model.predict(X_poly)\n\n    # Polynomial Regression - Predict for January 2020\n    polynomial_predict = poly_reg_model.predict(poly_reg.fit_transform([[predictFor]]))\n\n    # Polynomial Regression - Accuracy\n    # X_poly_test = poly_reg.fit_transform(X_test)\n    accuracy = poly_reg_model.score(X_poly, y_train)\n\n    # Polynomial Regression - Error\n    # error = round(np.mean((y_predict_polynomial-y_train)**2), 2)\n\n    # Result\n    print('Polynomial Regression: ' + str(polynomial_predict) + ' (Accuracy: ' + str(round(accuracy*100)) + '%)')\n    return {'regressor':poly_reg_model, 'values':polynomial_predict}","05ed3098":"def predictSVR(X_train, y_train, X_test, y_test):\n\n    y_train = y_train.reshape(-1, 1)\n    y_test = y_test.reshape(-1, 1)\n\n    scatterData(X_train, y_train, X_test, y_test, 'Simple Vector Regression (SVR)')\n\n    svr_regressor = SVR(kernel='rbf', gamma='auto')\n    svr_regressor.fit(X_train, y_train.ravel())\n\n    # plt.scatter(X_train, y_train, color='red', label='Actual observation points')\n    plt.plot(X_train, svr_regressor.predict(X_train), label='SVR regressor')\n    plt.legend()\n    plt.show()\n\n    # Simple Vector Regression (SVR) - Predict\/Test model\n    y_predict_svr = svr_regressor.predict(X_test)\n\n    # Simple Vector Regression (SVR) - Predict for January 2020\n    svr_predict = svr_regressor.predict([[predictFor]])\n\n    # Simple Vector Regression (SVR) - Accuracy\n    accuracy = svr_regressor.score(X_train, y_train)\n\n    # Simple Vector Regression (SVR) - Error\n    # error = round(np.mean((y_predict_svr-y_train)**2), 2)\n    \n    # Result\n    print('Simple Vector Regression (SVR): ' + str(svr_predict) + ' (Accuracy: ' + str(round(accuracy*100)) + '%)')\n    return {'regressor':svr_regressor, 'values':svr_predict}","485826c4":"product = 'N02BA'\n\n# For storing all regression results\nregResults = pd.DataFrame(columns=('Linear', 'Polynomial', 'SVR', 'Voting Regressor'), index=[product])\n\n# To display a larger graph than a default with specify some additional parameters for Matplotlib library.\nrcParams['figure.figsize'] = 12, 8\n\n# We will be using monthly data for our predictions\ndf = pd.read_csv(\"\/kaggle\/input\/pharma-sales-data\/salesmonthly.csv\")\n\n# We will use monthly sales data from 2014-2019.\ndf = df.loc[df['datum'].str.contains(\"2014\") | df['datum'].str.contains(\"2015\") | df['datum'].str.contains(\"2016\") | df['datum'].str.contains(\"2017\") | df['datum'].str.contains(\"2018\") | df['datum'].str.contains(\"2019\")]\ndf = df.reset_index()","8e008a07":"df.head()","4dcb7ef1":"df['datumNumber'] = 1\nfor index, row in df.iterrows():\n    df.loc[index, 'datumNumber'] = index+1","b8754a66":"# The first and the last available month is quite low which may indicate that it might be incomplete\n# and skewing results so we're dropping it\ndf.drop(df.head(1).index,inplace=True)\ndf.drop(df.tail(1).index,inplace=True)","4aa9689e":"df = df[df[product] != 0]","9c9d1521":"df.head()","08e1dac6":"predictFor = len(df)+5\nprint('Predictions for the product ' + str(product) + ' sales in January 2020')","b9d36387":"regValues = {}","4cdd8dae":"dfSplit = df[['datumNumber', product]]\n\n# We are going to keep 30% of the dataset in test dataset\ntrain, test = train_test_split(dfSplit, test_size=3\/10, random_state=0)\n\ntrainSorted = train.sort_values('datumNumber', ascending=True)\ntestSorted = test.sort_values('datumNumber', ascending=True)\n\nX_train = trainSorted[['datumNumber']].values\ny_train = trainSorted[product].values\nX_test = testSorted[['datumNumber']].values\ny_test = testSorted[product].values","0ec7071b":"# LINEAR REGRESSION\nlinearResult = predictLinearRegression(X_train, y_train, X_test, y_test)\nreg = linearResult['regressor']\nregValues['Linear'] = round(linearResult['values'][0][0])","c2965e0a":"# POLYNOMIAL REGRESSION\npolynomialResult = predictPolynomialRegression(X_train, y_train, X_test, y_test)\npolynomial_regressor = polynomialResult['regressor']\nregValues['Polynomial'] = round(polynomialResult['values'][0][0])","ab9b50b5":"# SIMPLE VECTOR REGRESSION (SVR)\nsvrResult = predictSVR(X_train, y_train, X_test, y_test)\nsvr_regressor = svrResult['regressor']\nregValues['SVR'] = round(svrResult['values'][0])","4384021f":"vRegressor = VotingRegressor(estimators=[('reg', reg), ('polynomial_regressor', polynomial_regressor), ('svr_regressor', svr_regressor)])\n\nvRegressorRes = vRegressor.fit(X_train, y_train.ravel())\n\n# VotingRegressor - Predict for January 2020\nvRegressor_predict = vRegressor.predict([[predictFor]])\nregValues['Voting Regressor'] = round(vRegressor_predict[0])\nprint('Voting Regressor January 2020 predicted value: ' + str(round(vRegressor_predict[0])))\nregResults.loc[product] = regValues","d2d6164a":"regResults","c6d65d87":"### Voting Regressor","5d1537bd":"### Defining predict sales and display Simple Vector Regression (SVR) function.","75569bf0":"### Performing and saving results for Polynomial Regression.","2826cc52":"Both Linear Regression and Polynomial Regression gives similar results with about 60% accuracy score.\n\nSimple Vector Regression (SVR) gives much lower accuracy score of around 10%.\n\nAny comments and feedback regarding the code and how the accuracy of the regressions can be improved is very much appreciated.","df7902b9":"## Summary","eb2a477c":"### Let's look at the data again.","5e3e092f":"### Cleaning up any rows with the product value = 0.","aecbc485":"### For storing regression results.","4e021cf5":"### Preparing training and testing data by using train_test_split function. 70% for training and 30% for testing.","eb9c91f9":"### Defining predict sales and display Polynomial Regression model function.","d2c6d08f":"### What value we predict for? January 2020. Because we have data until August 2019 we're predicting for 5 months ahead.","0bee162c":"### Let's look at the data.","79eb1394":"In this task I'm predicting sales data for a selected product in January 2020 using Linear Regression, Polynomial Regression and Support Vector Regression (SVR)","7752f28d":"### Displaying all results.","bcbe477b":"### Defining the scattering function that will display scattered sales data on the chart.","c253807f":"### Performing and saving results for Simple Vector Regression (SVR).","98e3d420":"### We are defining a product that we will be predicting the January 2020 sales for. We can change it to a differnt one and use the same calculations for a different product.","ea0367f4":"### Performing and saving results for Linear Regression","f3db2668":"### We are adding a sequence number for each month as an independent variable.","fde66439":"### Loading necessary libraries.","e7515573":"### Removing the first and the last incompleted record from Pandas Data Frame.","c9a77a7c":"### Defining predict sales and display Linear Regression model function.","9c8de24a":"# Predicting pharmaceutical sales data using different regression models."}}