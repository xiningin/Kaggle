{"cell_type":{"0546a4da":"code","c4cbe16c":"code","c34802c7":"code","b05fc198":"code","5cb4b07f":"code","3951d5e8":"code","59920b86":"code","8f43c95f":"code","776d15a3":"code","6aca9beb":"code","254ae167":"code","c9f6d837":"code","d3d95b89":"code","af124c42":"code","0859695e":"code","ae5d8222":"code","e926fd51":"code","2768bbf8":"code","f931bb86":"code","afc7f5e0":"code","b8438da1":"code","be3b8113":"code","2b036ea5":"code","35546b8b":"code","10371dd7":"code","987ab769":"code","31db1475":"code","02ec01ea":"code","8002f85f":"code","746f5c5c":"code","9a96acad":"code","da716268":"code","125a0252":"markdown","a6492c7a":"markdown","3970daf9":"markdown","ed4b43cd":"markdown","ae241962":"markdown","e2001099":"markdown","0799e428":"markdown"},"source":{"0546a4da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4cbe16c":"train = pd.read_csv('\/kaggle\/input\/shelter-animal-outcomes\/train.csv')","c34802c7":"train.info()","b05fc198":"train.head()","5cb4b07f":"train.head()","3951d5e8":"sns.heatmap(train.isnull(), yticklabels= False, cbar= False, cmap='viridis')","59920b86":"plt.figure(figsize= (10,6))\nplt.title('Count plot of AnimalType')\nsns.countplot(train['AnimalType'])","8f43c95f":"plt.figure(figsize= (10,6))\nplt.title('Count plot of Sex upon Outcome')\nsns.countplot(train['SexuponOutcome'])","776d15a3":"# Sort breed into list\nbreed_list = []\n\nfor item in train['Breed']:\n    if 'Mix' in item.split():\n        breed_list.append('mixed')\n    else:\n        breed_list.append('pure')\n        \ntrain['New_Breed'] = breed_list","6aca9beb":"plt.figure(figsize= (10,6))\nplt.title('Count plot of Breed consist of \"mixed\" and \"pure\" ')\nsns.countplot(train['New_Breed'])","254ae167":"plt.figure(figsize= (10,6))\nplt.title('Count plot of Outcome Type')\nsns.countplot(train['OutcomeType'])","c9f6d837":"plt.figure(figsize= (10,6))\nplt.title('Count plot of Outcome Type by Animal Type')\nsns.countplot(x='OutcomeType',data = train, hue= 'AnimalType')","d3d95b89":"plt.figure(figsize=(14,6))\nplt.title('Count plot of Sex by Outcome Type')\nsns.countplot(x='SexuponOutcome',data=train,hue='OutcomeType')","af124c42":"plt.title('Count plot of New Breed by Outcome Type')\nsns.countplot(x='New_Breed', data=train, hue='OutcomeType')","0859695e":"train.head()","ae5d8222":"# Drop less important features\ntrain.drop(['AnimalID','Name','DateTime','OutcomeSubtype','AgeuponOutcome','Breed','Color'],axis=1,inplace=True)","e926fd51":"train.head()","2768bbf8":"outcome = pd.get_dummies(train['OutcomeType'])\nanimal = pd.get_dummies(train['AnimalType'],drop_first=True)\nsex = pd.get_dummies(train['SexuponOutcome'],drop_first=True)\nbreed = pd.get_dummies(train['New_Breed'],drop_first=True)","f931bb86":"train = pd.concat([train,outcome,animal,sex,breed],axis=1)","afc7f5e0":"train.head()","b8438da1":"train.drop(['OutcomeType','AnimalType','SexuponOutcome','New_Breed','Transfer','Euthanasia','Return_to_owner','Died'],axis=1,inplace=True)","be3b8113":"train.head()","2b036ea5":"X = train[['Dog','Intact Male','Neutered Male','Spayed Female','Unknown','pure']]\ny = train['Adoption']","35546b8b":"from sklearn.model_selection import train_test_split","10371dd7":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size= 0.3, random_state= 101)","987ab769":"from sklearn.linear_model import LogisticRegression","31db1475":"lm = LogisticRegression()\nlm.fit(X_train, y_train)","02ec01ea":"prediction = lm.predict(X_test)","8002f85f":"from sklearn.metrics import classification_report","746f5c5c":"print(classification_report(y_test,prediction))","9a96acad":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, prediction))","da716268":"result = prediction.to_csv('submission.csv', index = False )","125a0252":"\n**VISUALIZATION**","a6492c7a":"**TRAINING MODEL USING LOGISTIC REGRESSION**","3970daf9":"**EVALUATE MODEL AND ADD SUBMISSION**","ed4b43cd":"# **BASELINE**\n**Ref**: https:\/\/www.kaggle.com\/fayomi\/data-exploration-predict-adoption","ae241962":"> **Title 1: Shelter Animals Outcomes Classification**\n\n> Description:\n>* D\u1ef1 \u0111o\u00e1n t\u00ecnh tr\u1ea1ng c\u1ee7a \u0111\u1ed9ng v\u1eadt sau khi r\u1eddi kh\u1ecfi tr\u1ea1i c\u1ee9u h\u1ed9.\n>* Target: Feature 'Outcomes' bao g\u1ed3m: Adoption, Died, Euthanasia, Return to owner, Transfer.\n>* Test v\u00e0 Train \u0111\u01b0\u1ee3c ph\u00e2n lo\u1ea1i ng\u1eabu nhi\u00ean.\n\n> Data:\n> https:\/\/www.kaggle.com\/c\/shelter-animal-outcomes\/data\n> * Data ch\u1ee9a g\u1ea7n 27,000 d\u1eef li\u1ec7u, s\u1eed d\u1ee5ng file 'acc_shelter_cat_outcomes_eng.csv'\n> C\u00f3 10 features.\n\n> Evaluate Ways of approach:\n> * V\u00ec \u0111\u00e2y l\u00e0 b\u00e0i to\u00e1n unsupervised classification, n\u00ean s\u1ebd khuy\u1ebfn kh\u00edch s\u1eed d\u1ee5ng K-Means Clustering, RandomForests, Logistict Regression.\n\n> Why I choose this:\n> * Xoay quanh unsupervised classification \u0111\u1ec3 c\u00f3 th\u1ec3 adjust learning rate ph\u00f9 h\u1ee3p (kh\u00f4ng b\u1ecb overfitting, underfitting...)\n> * \u0110\u1ec1 t\u00e0i \u0111\u1ed9ng v\u1eadt gi\u00fap tuy\u00ean truy\u1ec1n v\u1ec1 vi\u1ec7c ng\u01b0\u1ee3c \u0111\u00e3i \u0111\u1ed9ng v\u1eadt.\n> * \u0110\u1ec1 t\u00e0i d\u1ec5 hi\u1ec3u, features \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 r\u00f5 r\u00e0ng.\n\n","e2001099":"**DROP UNECESSARY FEATURES**","0799e428":"**SPLIT TRAIN TEST**"}}