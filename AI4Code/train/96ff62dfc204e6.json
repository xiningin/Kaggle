{"cell_type":{"f3a71d29":"code","169b28e3":"code","1c77b1c6":"code","a05b8953":"code","cb1a709d":"code","cfcd1344":"code","9df74e52":"code","9b7c15aa":"code","3015c8ae":"code","8da7c942":"markdown","12ea5f70":"markdown","79be2b5f":"markdown","8d3b3e31":"markdown","d0e2f5f2":"markdown","26ade1f5":"markdown","ff0562f9":"markdown","84a110b4":"markdown"},"source":{"f3a71d29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","169b28e3":"pd.options.mode.chained_assignment = None\nimport math","1c77b1c6":"#Load the matches that have already occurred \ndf = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/ufc-master.csv\")\n\n#df[\"Winner\"] = df[\"Winner\"].astype('category')\ndf = df[(df['Winner'] == 'Blue') | (df['Winner'] == 'Red')]\n\n#Let's fix the date\ndf['date'] = pd.to_datetime(df['date'])\n","a05b8953":"#This function is to be used with lambda\n#DQs seem to generally count in the KO\/TKO category.  So that's where I will put them\n\ndef return_finish_type(winner, finish):\n    #print(winner, finish)\n    #Why overcomplicate things?  We can just use a few if statements\n    if winner == 'Red':\n        #print(\"HI\")\n        if finish in ['U-DEC', 'S-DEC', 'M-DEC']:\n            return ('Red - DEC')\n        if finish in ['SUB']:\n            return('Red - SUB')\n        if finish in ['KO\/TKO', 'DQ']:\n            return('Red - KO\/TKO')\n    if winner == 'Blue':\n        if finish in ['U-DEC', 'S-DEC', 'M-DEC']:\n            return ('Blue - DEC')\n        if finish in ['SUB']:\n            return('Blue - SUB')\n        if finish in ['KO\/TKO', 'DQ']:\n            return('Blue - KO\/TKO')\n        \n    #Test for NaN\n    if finish != finish:\n        return('')\n    \n    if finish == 'Overturned':\n        return('')\n    \n    \n    return ('error')\n    #","cb1a709d":"#This calls for the power of lambda!\ndf['finish_type'] = df.apply(lambda x: return_finish_type(x['Winner'], x['finish']), axis=1)\n\nmask = df['finish_type'] == 'error'\n\ndisplay(df[['Winner', 'finish', 'finish_type']][mask])\n\n#Let's remove the blank finish_types\nmask = df['finish_type'] != ''\ndf = df[mask]\ndisplay(df[['Winner', 'finish', 'finish_type']])\n\n","cfcd1344":"from sklearn import preprocessing #Used for LabelEncoder\n\nle = preprocessing.LabelEncoder()\n\nle.fit(df['finish_type'])\n\ndisplay(le.classes_)\n\ndf['label'] = le.transform(df['finish_type'])\n\ndisplay(df)\n\n#OK looks good!","9df74e52":"#Create a label df:\nlabel_df = df['label']\n\n\ndf_train = df[200:]\nlabel_train = label_df[200:]\n\ndf_test = df[:200]\nlabel_test = label_df[:200]\n\nprint(len(df_test))\nprint(len(label_test))\n\nprint(len(df_train))\nprint(len(label_train))","9b7c15aa":"#Pick some features and a model\nfrom sklearn.tree import DecisionTreeClassifier\n#Pick a model\nmy_model = DecisionTreeClassifier(max_depth=10)\n\n#Pick some features\n#There isn't really much logic to this collection.  Don't use this in real life to make bets\nmy_features = ['R_odds', 'B_odds','weight_class', 'gender',\n       'B_avg_SIG_STR_landed', 'B_avg_SIG_STR_pct', 'B_avg_SUB_ATT',\n       'B_avg_TD_landed', 'B_avg_TD_pct', 'B_longest_win_streak', 'B_losses',\n       'B_total_rounds_fought', 'B_total_title_bouts',\n       'B_win_by_Decision_Majority', 'B_win_by_Decision_Split',\n       'B_win_by_Decision_Unanimous', 'B_win_by_KO\/TKO', 'B_win_by_Submission',\n       'B_win_by_TKO_Doctor_Stoppage', 'B_wins', 'B_Stance', 'B_Height_cms',\n       'B_Reach_cms', 'B_Weight_lbs', 'R_current_lose_streak',\n       'R_current_win_streak', 'R_draw', 'R_avg_SIG_STR_landed',\n       'R_avg_SIG_STR_pct', 'R_avg_SUB_ATT', 'R_avg_TD_landed', 'R_avg_TD_pct',\n       'R_longest_win_streak', 'R_losses', 'R_total_rounds_fought',\n       'R_total_title_bouts', 'R_win_by_Decision_Majority',\n       'R_win_by_Decision_Split', 'R_win_by_Decision_Unanimous',\n       'R_win_by_KO\/TKO', 'R_win_by_Submission',\n       'R_win_by_TKO_Doctor_Stoppage', 'R_wins', 'R_Stance', 'R_Height_cms',\n       'R_Reach_cms', 'R_Weight_lbs', 'R_age', 'B_age', 'lose_streak_dif',\n       'win_streak_dif', 'longest_win_streak_dif', 'win_dif', 'loss_dif',\n       'total_round_dif', 'total_title_bout_dif', 'ko_dif', 'sub_dif',\n       'height_dif', 'reach_dif', 'age_dif', 'sig_str_dif', 'avg_sub_att_dif',\n       'avg_td_dif', 'empty_arena']\n\n\n#Categorize strings.  Remove nulls... \ndf_train = df_train[my_features].copy()\ndf_test = df_test[my_features].copy()\ndf_train = df_train.dropna()\ndf_test = df_test.dropna()\n\ndf_train = pd.get_dummies(df_train)\ndf_test = pd.get_dummies(df_test)\ndf_train, df_test = df_train.align(df_test, join='left', axis=1)    #Ensures both sets are dummified the same\ndf_test = df_test.fillna(0)\n\nlabel_train = label_train [label_train.index.isin(df_train.index)]\nlabel_test = label_test[label_test.index.isin(df_test.index)]\n\nmy_model.fit(df_train, label_train) \npred = my_model.predict(df_test) \n  \n ","3015c8ae":"from sklearn.metrics import plot_confusion_matrix\nimport matplotlib.pyplot as plt\n\ndisp = plot_confusion_matrix(my_model, df_test, label_test,\n                                 display_labels=le.classes_,\n                                 cmap=plt.cm.Blues,\n                                 normalize=None)\nplt.xticks(rotation=60)\n","8da7c942":"# 4. Train a model and see how we did","12ea5f70":"# Conclusion\n\nIs this good?  Is this bad?  I have no idea.  I'll look into that in the next tutorial.  I'll show how to judge a multiclassification model based on whether it can predict profitable bets.","79be2b5f":"# 3. Split into Train and Test sets","8d3b3e31":"# 2. Create label\n\nWe have the finish types in the format we want.  Now we need to turn the strings into ints for machine learning purposes","d0e2f5f2":"# 1. Prep the Dataset\n\nThis part is the same as the other tutorials.  We need to do some cleaning of the dataset to make it usable.","26ade1f5":"# Purpose\n\nI will show how to use multiclass classification to predict how a fight will finish.  For my purposes I will break the possible outcomes into 6 possibilities:\n\n* Red - KO\/TKO\n* Red - Submission\n* Red - Decision\n* Blue - KO\/TKO\n* Blue - Submission\n* Blue - Decision\n\nThere are other ways to do this.  For example you could make Split Decision, Majority Decision, and Unanimous Decision are unique possibilities, but the general method will be the same","ff0562f9":"Looks good!  Now we will use `finish_type` for a multi-class classification model.","84a110b4":"# 2. Create a new 'finish_type' Feature \n\nWe will use `Winner` and `finish` to create a new feature of 6 possibilities"}}