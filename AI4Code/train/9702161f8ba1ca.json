{"cell_type":{"a0d1327e":"code","7f3decbd":"code","25acd442":"code","c8f2875b":"code","b894d38e":"code","6d4587e7":"code","1866e295":"code","483083d8":"code","54320278":"code","652dab6a":"code","07478a6e":"code","3acdeab1":"code","a5eb692f":"code","39392e3c":"code","1896fdad":"code","d9e03ccc":"code","d05d12d4":"markdown","f57dfd73":"markdown","b9f954fb":"markdown","a5466711":"markdown","47cc9d0a":"markdown","a2ac2f48":"markdown","49dc95fa":"markdown"},"source":{"a0d1327e":"from numpy.random import seed\n#!pip install tensorflow==1.14\nimport cv2\nfrom sklearn.model_selection import train_test_split\nimport os\nimport numpy as np\nimport skimage\nfrom skimage.transform import resize\nimport csv\nimport itertools\nfrom tqdm import tqdm\nfrom glob import glob\nfrom matplotlib import pyplot as plt\nfrom numpy import floor\nimport random\nimport tensorflow.compat.v1 as tf\ntf.disable_v2_behavior()\n#from keras.layers import Conv2D, Dense, Dropout, Flatten\n#from keras.models import Sequential\n#from keras.preprocessing.image import ImageDataGenerator","7f3decbd":"def load_images(directory):\n    images = []\n    labels = []\n    for idx, label in enumerate(uniq_labels):\n        print(label,\" is ready to load\")\n        for file in os.listdir(directory + \"\/\" + label):\n            filepath = directory + \"\/\" + label + \"\/\" + file\n            image = cv2.resize(cv2.imread(filepath), (64, 64))\n            images.append(image)\n            labels.append(idx)\n    images = np.array(images)\n    labels = np.array(labels)\n    return(images, labels)","25acd442":"import keras\n#train_dir='\/content\/asl_alphabet_train'\ntrain_dir = \"..\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train\"\n\nuniq_labels = sorted(os.listdir(train_dir))\n#print(uniq_labels)\nimages, labels = load_images(directory = train_dir)\nprint(\"Data has been loaded\")\n\n","c8f2875b":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(images, labels, test_size = 0.2, stratify = labels)\n\nn = len(uniq_labels)\ntrain_n = len(X_train)\ntest_n = len(X_test)\n\nprint(\"Total number of symbols: \", n)\nprint(\"Number of training images: \" , train_n)\nprint(\"Number of testing images: \", test_n)\n\n","b894d38e":"def print_images(image_list):\n    n = int(len(image_list) \/ len(uniq_labels))\n    cols = 8\n    rows = 4\n    fig = plt.figure(figsize = (24, 12))\n\n    for i in range(len(uniq_labels)):\n        ax = plt.subplot(rows, cols, i + 1)\n        plt.imshow(image_list[int(n*i)])\n        plt.title(uniq_labels[i])\n        ax.title.set_fontsize(20)\n        ax.axis('off')\n    plt.show()","6d4587e7":"y_train_in = y_train.argsort()\ny_train = y_train[y_train_in]\nX_train = X_train[y_train_in]\n\nprint(\"Training Images: \")\nprint_images(image_list = X_train)","1866e295":"y_test_in = y_test.argsort()\ny_test = y_test[y_test_in]\nX_test = X_test[y_test_in]\n\nprint(\"Testing images: \")\nprint_images(image_list = X_test)","483083d8":"y_train = keras.utils.to_categorical(y_train)\ny_test = keras.utils.to_categorical(y_test)","54320278":"X_train = X_train.astype('float32')\/255.0\nX_test = X_test.astype('float32')\/255.0","652dab6a":"from keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Conv2D, Dense, Dropout, Flatten\nfrom keras.layers import Flatten, Dense\nfrom keras.models import Sequential\n\nmodel = Sequential()\nmodel.add(Conv2D(filters = 64, kernel_size = 5, padding = 'same', activation = 'relu',input_shape = (64, 64, 3)))\nmodel.add(Conv2D(filters = 64, kernel_size = 5, padding = 'same', activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (4, 4)))\nmodel.add(Dropout(0.5))\nmodel.add(Conv2D(filters = 128 , kernel_size = 5, padding = 'same', activation = 'relu'))\nmodel.add(Conv2D(filters = 128 , kernel_size = 5, padding = 'same', activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (4, 4)))\nmodel.add(Dropout(0.5))\nmodel.add(Conv2D(filters = 256 , kernel_size = 5, padding = 'same', activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(29, activation='softmax'))\n\nmodel.summary()","07478a6e":"my_model = Sequential()\nmy_model.add(Conv2D(64, kernel_size=4, strides=1, activation='relu', input_shape=(64, 64, 3)))\nmy_model.add(Conv2D(64, kernel_size=4, strides=2, activation='relu'))\nmy_model.add(Dropout(0.5))\nmy_model.add(Conv2D(128, kernel_size=4, strides=1, activation='relu'))\nmy_model.add(Conv2D(128, kernel_size=4, strides=2, activation='relu'))\nmy_model.add(Dropout(0.5))\nmy_model.add(Conv2D(256, kernel_size=4, strides=1, activation='relu'))\nmy_model.add(Conv2D(256, kernel_size=4, strides=2, activation='relu'))\nmy_model.add(Flatten())\nmy_model.add(Dropout(0.5))\nmy_model.add(Dense(512, activation='relu'))\nmy_model.add(Dense(29, activation='softmax'))\n\nmy_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=[\"accuracy\"])\nmy_model.summary()","3acdeab1":"model.compile(optimizer = 'rmsprop', loss = 'categorical_crossentropy', metrics = ['accuracy'])","a5eb692f":"hist = model.fit(X_train, y_train, epochs = 5, batch_size = 64)","39392e3c":"score = model.evaluate(x = X_test, y = y_test, verbose = 0)\nprint('Accuracy for test images:', round(score[1]*100, 3), '%')","1896fdad":"def plot_confusion_matrix(y, y_pred):\n    y = np.argmax(y, axis = 1)\n    y_pred = np.argmax(y_pred, axis = 1)\n    cm = confusion_matrix(y, y_pred)\n    plt.figure(figsize = (24, 20))\n    ax = plt.subplot()\n    plt.imshow(cm, interpolation = 'nearest', cmap = plt.cm.Purples)\n    plt.colorbar()\n    plt.title(\"Confusion Matrix\")\n    tick_marks = np.arange(len(uniq_labels))\n    plt.xticks(tick_marks, uniq_labels, rotation=45)\n    plt.yticks(tick_marks, uniq_labels)\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    ax.title.set_fontsize(20)\n    ax.xaxis.label.set_fontsize(16)\n    ax.yaxis.label.set_fontsize(16)\n    limit = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], 'd'), horizontalalignment = \"center\",color = \"white\" if cm[i, j] > limit else \"black\")\n    plt.show()","d9e03ccc":"from sklearn.metrics import confusion_matrix\nimport itertools\n\ny_test_pred = model.predict(X_test, batch_size = 64, verbose = 0)\nplot_confusion_matrix(y_test, y_test_pred)","d05d12d4":"# **Training**\n\n","f57dfd73":"Load images from the directory path passed as input.","b9f954fb":"# **Data preparation**","a5466711":"# **Evaluating Results**","47cc9d0a":"Load Train images from  the Train folder","a2ac2f48":"# Important Libraries to be installed","49dc95fa":"Print some sample image from each class to look the dataset before start training"}}