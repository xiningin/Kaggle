{"cell_type":{"e181cdfe":"code","444d3d2d":"code","36d2976a":"code","1f4f7f8c":"code","51e16033":"code","c46509e6":"code","18e107a8":"code","a68be716":"code","b8580685":"code","869dfe57":"code","b2b195bc":"code","3ebfcda9":"code","3e28da82":"code","09647eb1":"code","2f553f16":"code","7b70a8d2":"code","e70271f9":"code","ef7cbffb":"code","c6e8bab1":"code","3e1c1a7f":"markdown","a1dff18c":"markdown"},"source":{"e181cdfe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","444d3d2d":"# Carregando os dados\ndf = pd.read_csv('..\/input\/StudentsPerformance.csv')","36d2976a":"# Verificando os dados\ndf.head()","1f4f7f8c":"# Verificando o nome das colunas\ndf.columns","51e16033":"# Caracter\u00edsticas do conjunto de dados\ndf.info()","c46509e6":"# Verificando valores nulos no conjunto de dados\ndf.isnull().sum()","18e107a8":"# Verificando recursos descritos no conjunto de dados\ndf.describe()","a68be716":"f,ax = plt.subplots(figsize=(15,6))\nsns.heatmap(df.corr(), annot=True, fmt='.2f', ax=ax, linecolor='black', lw=.7)","b8580685":"sns.pairplot(df, hue = 'gender')\nplt.show()","869dfe57":"# Visualizando o n\u00famero de homens e mulheres no conjunto de dados\n\ndf['gender'].value_counts(normalize = True)\ndf['gender'].value_counts(dropna = False).plot.bar(color = 'magenta')\nplt.title('Comparass\u00e3o entre Homens e Mulheres')\nplt.xlabel('Genero')\nplt.ylabel('Quantidade')\nplt.show()","b2b195bc":"# Visualizando os diferentes grupos no conjunto de dados\n\ndf['race\/ethnicity'].value_counts(normalize = True)\ndf['race\/ethnicity'].value_counts(dropna = False).plot.bar(color = 'cyan')\nplt.title('Compara\u00e7\u00e3o entre v\u00e1rios grupos')\nplt.xlabel('Grupos')\nplt.ylabel('Qunatidade')\nplt.show()","3ebfcda9":"# Visualizando os diferentes n\u00edveis de educa\u00e7\u00e3o dos pais\n\ndf['parental level of education'].value_counts(normalize = True)\ndf['parental level of education'].value_counts(dropna = False).plot.bar()\nplt.title('Compara\u00e7\u00e3o entre edu\u00e7\u00e3o dos pais')\nplt.xlabel('Grau')\nplt.ylabel('Quantidade')\nplt.show()","3e28da82":"# Distribui\u00e7\u00e3o das Notas de matem\u00e1tica\nplt.figure(figsize=(8,5))\nsns.distplot(df['math score'], kde = False, color='m', bins = 30)\nplt.ylabel('Frequ\u00eancia')\nplt.title('Distribui\u00e7\u00e3o das notas de matem\u00e1tica')\nplt.show()","09647eb1":"# Compara\u00e7\u00e3o entre Gen\u00earo vs Ra\u00e7a \n\nx = pd.crosstab(df['gender'], df['race\/ethnicity'])\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True, figsize = (4, 4))","2f553f16":"# Compara\u00e7\u00e3o de ra\u00e7a \/ etnia e n\u00edvel de educa\u00e7\u00e3o dos pais\n\nx = pd.crosstab(df['race\/ethnicity'], df['parental level of education'])\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = 'True', figsize = (7, 4) )","7b70a8d2":"# Gr\u00e1fico de pizza para representar a propor\u00e7\u00e3o de status de aprova\u00e7\u00e3o e reprova\u00e7\u00e3o entre os alunos\n\nsize = [960, 40]\ncolors = ['red', 'pink']\nlabels = \"Aprovado\", \"Reprovado\"\nexplode = [0, 0.2]\n\nplt.pie(size, colors = colors, labels = labels, autopct = '%.2f%%', explode = explode, shadow = True)\nplt.legend()\nplt.show()","e70271f9":"# Tra\u00e7ar um gr\u00e1fico de pizza para a distribui\u00e7\u00e3o de v\u00e1rias notas entre os alunos\n\nlabels = ['Grade 0', 'Grade A', 'Grade B', 'Grade C', 'Grade D', 'Grade E']\nsizes = [58, 156, 260, 252, 223, 51]\ncolors = ['yellow', 'gold', 'lightskyblue', 'lightcoral', 'pink', 'cyan']\nexplode = (0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001)\n\npatches, texts = plt.pie(sizes, colors=colors, shadow=True, startangle=90)\nplt.legend(patches, labels)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()\n","ef7cbffb":"# N\u00famero de alunos com pontua\u00e7\u00e3o m\u00e1xima em todas as tr\u00eas categorias\nperfect_writing = df['writing score'] == 100\nperfect_reading = df['reading score'] == 100\nperfect_math = df['math score'] == 100\n\nperfect_score = df[(perfect_math) & (perfect_reading) & (perfect_writing)]\nperfect_score","c6e8bab1":"# Bar Plot de Notas de acordo com o g\u00eanero\nplt.figure(figsize=(10,4))\n\nplt.subplot(1,3,1)\nsns.barplot(x = 'gender', y = 'reading score', data = df)\n\nplt.subplot(1,3,2)\nsns.barplot(x = 'gender', y = 'writing score', data = df)\n\nplt.subplot(1,3,3)\nsns.barplot(x = 'gender', y = 'math score', data = df)\n\nplt.tight_layout()","3e1c1a7f":"**Trabalho Final - An\u00e1lise de Dados - Base Pr\u00f3pria**","a1dff18c":"Disciplina - Ferramentas de Softwarepara uso em Ci\u00eancia de Dados II"}}