{"cell_type":{"f3e66fac":"code","2119ecc3":"code","681c244e":"code","a69afa78":"code","7c39651d":"code","150dc916":"code","57127f4f":"code","bb58ae1a":"code","fe601177":"code","c77ab7ad":"code","9595aede":"code","0541b6ec":"code","8c41e68d":"code","71fc5f23":"code","f683630f":"code","94a294d6":"code","f60618a3":"code","7a21abdb":"code","56834576":"code","b05a82e0":"code","f617040b":"code","4abd4eba":"code","085860e9":"code","d0c65b1e":"code","c9309e3f":"code","f8a91e3e":"markdown"},"source":{"f3e66fac":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2119ecc3":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntrain.head()","681c244e":"sns.countplot(data = train, x = 'claim')\nplt.show()","a69afa78":"def hist_plot(data):\n    fig, axes = plt.subplots(20,6, figsize = (20,70))\n    i= 1\n    for ax in axes:\n        for a in ax:\n            if i <= 118:\n                col = 'f{}'.format(i)\n                sns.histplot(data = data, x = col, ax = a)\n                a.set_title(col)\n                a.set_xlabel('')\n                a.set_ylabel('')\n                i +=1\nhist_plot(train.drop(['id', 'claim'], axis = 1))","7c39651d":"train.shape","150dc916":"train.isna().mean()","57127f4f":"print('Unique values counts')\nfor col in train.columns:\n    print('{}: {}'.format(col, len(train[col].unique())))","bb58ae1a":"train.drop(['id', 'claim'], axis = 1).describe()[1:-1].style.background_gradient(cmap ='YlOrBr', axis = None)","fe601177":"train.drop(['id', 'claim','f35', 'f116'], axis = 1).describe()[1:-1].style.background_gradient(cmap ='YlOrBr', axis = None)\n","c77ab7ad":"pd.DataFrame(train.skew()).style.background_gradient(cmap ='YlOrBr')","9595aede":"from sklearn.impute import KNNImputer, SimpleImputer\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import Pipeline, make_pipeline\n\npipeline = make_pipeline(\n    (SimpleImputer(strategy='mean')),\n    (RobustScaler())\n)","0541b6ec":"train.iloc[:,1:-1] = pipeline.fit_transform(train.drop(['id', 'claim'], axis = 1))","8c41e68d":"from sklearn.model_selection import train_test_split\ntrain_, valid_ = train_test_split(train, test_size = 0.2, stratify=train['claim'], random_state = 42)","71fc5f23":"train_.shape","f683630f":"!pip install -U lightautoml","94a294d6":"from lightautoml.automl.presets.tabular_presets import TabularAutoML\nfrom lightautoml.tasks import Task\nfrom lightautoml.tasks.common_metric import roc_auc_score","f60618a3":"task = Task('binary', metric= roc_auc_score)\nroles = {\n    'target' : 'claim',\n    'drop' : 'id'\n}\nautoml = TabularAutoML(task=task, general_params={'use_algos': [['linear_l2','cb','lgb_tuned'],['lgb', 'cb_tuned']]})","7a21abdb":"oof_pred = automl.fit_predict(train_, roles= roles)","56834576":"valid_pred = automl.predict(valid_)","b05a82e0":"roc_auc_score(valid_['claim'], valid_pred.data[:, 0])","f617040b":"oof_pred = automl.fit_predict(train, roles= roles)","4abd4eba":"test = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\ntest","085860e9":"test.iloc[:, 1:] = pipeline.transform(test.drop('id', axis = 1))","d0c65b1e":"test_pred = automl.predict(test)","c9309e3f":"submiss = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv', index_col=0)\nsubmiss['claim'] = test_pred.data\nsubmiss.to_csv('.\/my_submissv2.csv')","f8a91e3e":"Upvote for me, thank you!!!"}}