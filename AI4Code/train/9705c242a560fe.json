{"cell_type":{"870d1e4c":"code","c79e3e57":"code","addde901":"code","81ddc6ca":"code","275d2009":"code","38c03481":"code","95022558":"code","d1bee5a9":"code","e913c013":"code","01d494a3":"code","925ee013":"code","b170e015":"code","97628003":"code","6a31f62c":"code","49623b07":"code","af761ca1":"code","f671eae9":"code","5c6dddd1":"code","c7982410":"code","5580dc6f":"code","2ddde116":"code","0d8cbda9":"code","e0642679":"code","a376622a":"code","a7ba425e":"code","2d45465a":"code","5de45457":"code","f765abea":"code","4248d695":"code","26ca452b":"code","fca9a54f":"code","af13d449":"code","688d1fbe":"code","cc67b10c":"code","74f68d52":"code","e8064342":"code","e61f2fe6":"code","f678797b":"code","6d607131":"code","9eea3c94":"code","01a06759":"code","7de2b137":"code","d703035c":"code","7884366c":"code","6b88ef03":"code","5c3ba66d":"code","06e07ff7":"code","0cef6e5a":"code","d016471a":"code","3c4558d5":"code","648a23fc":"code","9ed695f7":"code","bebbe57a":"code","33ad6bd9":"code","79470f09":"code","d35a97ba":"code","a8b5be73":"code","bc7ce625":"code","a5d1e67e":"markdown","7b8b0236":"markdown","f4f5a3f1":"markdown","2978c0cd":"markdown","48c1cf65":"markdown","c06b0c29":"markdown","66770472":"markdown","566a3182":"markdown","9c21b550":"markdown","bbe324af":"markdown","ccc6a0f2":"markdown","e76eaf2a":"markdown","417ce6a4":"markdown","e370990f":"markdown","c108c8e9":"markdown","a3f18c3a":"markdown","5b0fc7cd":"markdown","2cdc888c":"markdown","cb5861bd":"markdown","864df0d9":"markdown","d59e0875":"markdown","46b4b573":"markdown","fd7a965d":"markdown","c92d8135":"markdown","2fb689cf":"markdown","49ee8e72":"markdown","7711dac7":"markdown","6284fa2c":"markdown","47f7eb55":"markdown","19276636":"markdown","d5614bb9":"markdown","007fbbe8":"markdown","60daf5d9":"markdown","19e639f7":"markdown","7bb4a2bc":"markdown","972798fe":"markdown","8f196345":"markdown","e7df9b7b":"markdown","66636b3a":"markdown","3f7b60c1":"markdown","d195d533":"markdown","007b9f2e":"markdown"},"source":{"870d1e4c":"import pandas as pd\nimport numpy as np\n\nimport plotly.express as px\nimport plotly.graph_objects as go","c79e3e57":"df = pd.read_csv('\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\ndf.head()","addde901":"df.describe()","81ddc6ca":"df.info()","275d2009":"df.shape","38c03481":"df[\"Age\"].fillna((df[\"Age\"].mean()), inplace = True)\ndf[\"Height\"].fillna((df[\"Height\"].mean()), inplace = True)\ndf[\"Weight\"].fillna((df[\"Weight\"].mean()), inplace = True)","95022558":"df[[\"Age\", \"Height\", \"Weight\"]] = df[[\"Age\", \"Height\", \"Weight\"]].astype(int)","d1bee5a9":"df_stat_player = df.groupby(\"Sport\")[[\"Age\", \"Height\", \"Weight\"]].agg([np.mean,np.max, np.min]).reset_index()\ndf_stat_player","e913c013":"fig = px.scatter(df, x = \"Weight\", y = \"Height\", size = \"Age\", color = \"Sport\")\n\nfig.update_layout(title = \"<b>Distribution of height and weight according to sport<\/b>\",\n                 plot_bgcolor = \"#ECECEC\")\n\nfig.show()","01d494a3":"fig = px.scatter(df, x=\"Height\", y=\"Weight\", trendline=\"ols\", color = \"Sex\", facet_col = \"Season\",\n             color_discrete_map= {'M': '#3C8DD6', 'F': '#EC2781'})\n\nfig.update_layout(title = \"<b>Height of male and female players according to the season<\/b>\",\n                 plot_bgcolor = \"#ECECEC\")\n\nfig.show()","925ee013":"fig = px.box(df, x = \"Year\", y = \"Age\", color = \"Sex\", color_discrete_map= {'M': '#3C8DD6', 'F': '#EC2781'})\n\nfig.update_layout(title = \"<b>Age variation of male and female athelete over time<\/b>\",\n                 plot_bgcolor = \"#ECECEC\")\n\nfig.show()","b170e015":"fig = px.box(df, x = \"Year\", y = \"Height\", color = \"Sex\", \n             color_discrete_map= {'M': '#3C8DD6', 'F': '#EC2781'})\n\nfig.update_layout(title = \"<b>Variation in height with time<\/b>\",\n                 plot_bgcolor = \"#ECECEC\")\n\nfig.show()","97628003":"fig = px.box(df, x = \"Year\", y = \"Weight\", color = \"Sex\", color_discrete_map= {'M': '#3C8DD6', 'F': '#EC2781'})\n\nfig.update_layout(\ntitle = \"<b>Distribution of weight according to year<\/b>\",\nplot_bgcolor = \"#ECECEC\")\n\nfig.show()","6a31f62c":"fig = px.histogram(df, x=\"Season\", color=\"Sex\", barmode = \"group\", \n             color_discrete_map= {'M': '#3C8DD6', 'F': '#EC2781'},\n            )\nfig.update_layout(\n            title = \"<b>Participation of male and female athelete in both season<\/b>\",\n            yaxis_title = \"Athelete count\",\n            plot_bgcolor = \"#ECECEC\")","49623b07":"total_athelete = df.groupby(\"Season\")[\"Sex\"].count()\nprint(\"Total number of athelete in both season\\n\", total_athelete)","af761ca1":"total_count = df.groupby(\"Season\")[[\"Team\", \"NOC\", \"Event\", \"City\", \"Sport\"]].nunique().reset_index()\ntotal_count","f671eae9":"x = total_count[\"Season\"]\nfig = go.Figure(go.Bar(x=x, y=total_count[\"Team\"], name='Countries', marker_color = \"#ff6b00\"))\nfig.add_trace(go.Bar(x=x, y=total_count[\"NOC\"], name='Regions', marker_color = \"#FFEE00\"))\nfig.add_trace(go.Bar(x=x, y=total_count[\"Event\"], name='Event', marker_color = \"#180051\"))\nfig.add_trace(go.Bar(x = x, y = total_count[\"City\"], name = \"City\", marker_color = \"#008237\"))\nfig.add_trace(go.Bar(x = x, y = total_count[\"Sport\"], name = \"Sport\", marker_color = \"#510020\"))\n\nfig.update_layout(barmode='group', \n                  title = \"<b>Total Count In Different Season<\/b>\",\n                 plot_bgcolor = \"#ECECEC\",\n                 yaxis_title = \"Count\")\n\nfig.show()","5c6dddd1":"df_sports = df.groupby(\"Sport\")[\"ID\"].count()\nprint(\"Participation of atheletes in each sport:\\n\", df_sports)","c7982410":"df_year = df.groupby(\"Year\")[\"Sport\"].count().reset_index()\ndf_year.head()","5580dc6f":"fig = px.bar(df_year, x = \"Year\", y = \"Sport\", color_discrete_sequence= [\"#ff6b00\"] * len(df_year))\n\nfig.update_layout(plot_bgcolor = \"#ECECEC\",\n            yaxis_title = \"Sport count\",\n    title = \"<b>Total athelete participation in each year<\/b>\")\n\nfig.show()","2ddde116":"gold_medals = df[(df.Medal == 'Gold')]\ngold_medals.head()","0d8cbda9":"gold_medals = gold_medals[np.isfinite(gold_medals['Age'])]\ngold_medals.head()","e0642679":"fig = px.histogram(gold_medals, x = \"Age\", color_discrete_sequence = [\"#ffd514\"] * len(gold_medals))\n\nfig.update_layout(\nplot_bgcolor = \"#ECECEC\",\ntitle = \"<B>Distribution of gold medal according to age<\/B>\",\nyaxis_title = \"Medal count\")\n\nfig.show()","a376622a":"mean_age = gold_medals[\"Age\"].mean()","a7ba425e":"gold_medals['ID'][gold_medals['Age'] > mean_age].count()","2d45465a":"gold_medals['ID'][gold_medals['Age'] < mean_age].count()","5de45457":"event_medal_above = gold_medals['Sport'][gold_medals['Age'] > mean_age]\nevent_medal_above.head()","f765abea":"event_medal_below = gold_medals['Sport'][gold_medals['Age'] < mean_age]\nevent_medal_below.head()","4248d695":"gold_medals.NOC.value_counts().sort_values(ascending = False).head()","26ca452b":"fig = px.histogram(gold_medals, x = \"NOC\", color_discrete_sequence = [\"#EC2781\"] * len(gold_medals))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'},\n                 plot_bgcolor = \"#ECECEC\",\n                  yaxis_title = \"Gold Medal Count\",\n                  title = \"<b>Gold medal count according to NOC<\/b>\"\n                 )\nfig.show()","fca9a54f":"medals_USA = df[(df.NOC == 'USA')]\nmedals_USA.head()","af13d449":"medals_USA.groupby(\"Medal\")[\"ID\"].count()","688d1fbe":"fig = px.pie(medals_USA, names = medals_USA[\"Season\"], color = medals_USA[\"Season\"],\n            color_discrete_map={'Winter': '#2377a4', 'Summer': '#ffd514'})\n\nfig.update_layout(title = \"<b>Distribution of medal winners according to season<\/b>\")\n\nfig.show()","cc67b10c":"df_medal_seperate = medals_USA.groupby(\"Sport\")[\"Medal\"].value_counts()\ndf_medal_seperate = pd.DataFrame(df_medal_seperate)\ndf_medal_seperate = df_medal_seperate.rename(columns = {\"Medal\" : \"Medal Count\"})\ndf_medal_seperate.reset_index(level=['Sport', 'Medal'], inplace = True)","74f68d52":"df_medal_seperate.head()","e8064342":"fig = px.bar(df_medal_seperate, x=\"Sport\", y=\"Medal Count\", color=\"Medal\",\n            color_discrete_map={'Gold': '#ffd514', 'Silver': '#d6d6d6', 'Bronze': '#6d6240'})\n\nfig.update_layout(\n            title = \"<b> Medal distribution according to sports <\/b>\",\n            yaxis_title = \"Medal count \",\n            plot_bgcolor = \"#ECECEC\")\n\nfig.show()","e61f2fe6":"USA_olympic_gold = df[(df.NOC == 'USA') & (df.Medal == 'Gold')]","f678797b":"total_medal_per_edition = USA_olympic_gold.groupby(\"Year\")[\"Sport\"].count().reset_index()","6d607131":"fig = px.bar(total_medal_per_edition, x=\"Year\", y=\"Sport\", color=\"Sport\",\n             color_continuous_scale=px.colors.sequential.PuRd\n                )\nfig.update_layout(\n                title=\"<b>Total Gold medal Won By USA per Edition<\/b>\" ,\n                plot_bgcolor = \"#ECECEC\")\n\nfig.show()","9eea3c94":"fig = px.histogram(medals_USA, x= medals_USA[\"Medal\"], color = \"Season\", barmode = \"group\",\n                   color_discrete_map={'Winter': '#2377a4', 'Summer': '#ffd514'})\n\nfig.update_layout(title = \"<b>Total count of medal won according to season and category<\/b>\",\n                 yaxis_title = \"Medal count\",\n                 plot_bgcolor = \"#ECECEC\")\n\nfig.show()","01a06759":"fig = px.histogram(medals_USA, x= medals_USA[\"Medal\"], color = \"Sex\",\n            barmode = \"group\",  color_discrete_map={'M': '#3C8DD6', 'F': '#EC2781'})\n\nfig.update_layout(title = \"<b>Medal count according to sex<\/b>\",\n                 yaxis_title = \"Medal count\",\n                 plot_bgcolor = \"#ECECEC\")\n\nfig.show()","7de2b137":"yearly_medal_plot = medals_USA.groupby(['Medal', \n'Year']).size().reset_index().pivot(columns='Medal', index='Year', values=0).reset_index()\nyearly_medal_plot.head()","d703035c":"fig = px.bar(yearly_medal_plot, x =  \"Year\", barmode = \"stack\", y=[\"Bronze\", \"Gold\",\"Silver\"],\n            color_discrete_map={'Gold': '#ffd514', 'Silver': '#d6d6d6', 'Bronze': '#6d6240'})\nfig.update_layout(plot_bgcolor = \"#ECECEC\",\n                 title = \"<b>Total medals won in each edition<\/b>\",\n                 yaxis_title = \"Medal Count\")\n\nfig.show() ","7884366c":"fig = px.histogram(medals_USA, x=\"Sport\", color=\"Season\", barmode=\"group\", facet_col=\"Sex\",\n                  color_discrete_map={'Winter': '#2377a4', 'Summer': '#ffd514'})\nfig.update_layout(plot_bgcolor = \"#ECECEC\",\n                 title = \"<b>Distribution sport organized according to season and sex<\/b>\",\n                 yaxis_title = \"Sports Count\")\n\nfig.show()","6b88ef03":"women_olympic = df[(df.Sex == 'F') & (df.Season == 'Summer')] \nwomen_olympic.head()","5c3ba66d":"fig = px.histogram(women_olympic, x =  \"Year\",\n                  color_discrete_sequence = [\"#EC2781\"] * len(women_olympic))\nfig.update_layout(plot_bgcolor = \"#ECECEC\",\n                 title = \"<b>Women athelete count in olympics<\/b>\",\n                 yaxis_title = \"Number of women athelete\")\nfig.show() ","06e07ff7":"women_medal_count = women_olympic.groupby(['Medal', \n'NOC']).size().reset_index().pivot(columns='Medal', index='NOC', values=0).reset_index()","0cef6e5a":"fig = px.bar(women_medal_count, x =  \"NOC\", barmode = \"stack\", y=[\"Bronze\", \"Gold\",\"Silver\"],\n            color_discrete_map={'Gold': '#ffd514', 'Silver': '#d6d6d6', 'Bronze': '#6d6240'})\n\nfig.update_layout(\nplot_bgcolor = \"#F8F8F8\",\ntitle = \"<b>Country with medal distribution and its count<\/b>\",\nxaxis_title = \"NOC\",\nyaxis_title = \"Medal count\")\n\n#fig.update_traces(marker_color='green')\n\nfig.show() ","d016471a":"df_summer = df[df[\"Season\"] == \"Summer\"]\ndf_summer.head()","3c4558d5":"df_athelete = df_summer.groupby(\"Year\")[[\"ID\", \"Medal\"]].count()\ndf_athelete.head()","648a23fc":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = df_athelete.index, y =df_athelete[\"ID\"] ,\n                    mode='lines',\n                    name='Athelets',\n                    line=dict(color='firebrick', width=2)\n                        ))\n\n\nfig.update_layout(\n    plot_bgcolor = \"#ECECEC\",\n    title = \"<b>Change in total athelete number over time<\/b>\",\n    xaxis_title = \"Year\",\n    yaxis_title = \"Athelete Count\")\n\nfig.show()","9ed695f7":"df_M_F = df_summer.groupby(['Sex', \n'Year']).size().reset_index().pivot(columns='Sex', index='Year', values=0).reset_index()\ndf_M_F.head()","bebbe57a":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Create figure with secondary y-axis\n\n\nx = df_M_F[\"Year\"]\ny1 = df_M_F[\"F\"]\ny2 = df_M_F[\"M\"]\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Scatter(x = x, y = y1, mode = \"lines+markers\", name = \"Female\",\n                        line=dict(color='#EC2781', width=2)), secondary_y=False,)\nfig.add_trace(go.Scatter(x = x, y = y2, mode = \"lines+markers\", name = \"Male\",\n                        line=dict(color='#3C8DD6', width=2)), secondary_y=True,)\n\n# Add figure title\nfig.update_layout(\n    title_text=\"<b>Number of men and women athelete over time<\/b>\"\n)\n\n# Set x-axis title\nfig.update_layout(plot_bgcolor = \"#ECECEC\",\n                title=\"<b>Variation in count of male and female players<\/b>\",\n                 xaxis_title = \"Year\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>Female<\/b>\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>Male<\/b>\", secondary_y=True)\n\nfig.show()\n","33ad6bd9":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=df_athelete.index,\n    y=df_athelete[\"ID\"],\n    name=\"Total Athelets\",\n    line = dict(color = \"firebrick\", width = 2)\n))\n\n\nfig.add_trace(go.Scatter(\n    x=df_athelete.index,\n    y=df_athelete[\"Medal\"],\n    name=\"Medal Winner\",\n    line = dict(color = \"#6D38D6\", width = 2)\n))\n\n\nfig.update_layout(plot_bgcolor = \"#ECECEC\",\n                 title = \"<b>Count of athelets and medal winner<\/b>\",\n                 xaxis_title = \"Year\",\n                 yaxis_title = \"Count\")\nfig.show()","79470f09":"df_event = df_summer.groupby(\"Year\")[[\"Event\", \"Sport\"]].nunique().reset_index()\ndf_event.head()","d35a97ba":"# Sport is swimming and it has many event inside it\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = df_event[\"Year\"], y = df_event[\"Event\"], mode = \"lines+markers\", name = \"Event\",\n                        line = dict(color = \"#D66989\", width = 3)))\nfig.add_trace(go.Scatter(x = df_event[\"Year\"], y = df_event[\"Sport\"], mode = \"lines+markers\", name = \"Sport\",\n                        line = dict(color = \"#378A15\")))\nfig.update_layout(plot_bgcolor = \"#ECECEC\",\n                 title = \"<b>Count of sport and its event over time<\/b>\",\n                 xaxis_title = \"Year\",\n                 yaxis_title = \"Count\")\nfig.show()","a8b5be73":"df_country = df_summer.groupby(\"Year\")[[\"Team\", \"NOC\"]].nunique().reset_index()\ndf_country.head()","bc7ce625":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x = df_country[\"Year\"], y = df_country[\"Team\"], name = \"Team\"))\nfig.add_trace(go.Scatter(x = df_country[\"Year\"], y = df_country[\"NOC\"], name = \"NOC\"))\nfig.update_layout(title = \"<b>Team and NOC over time<\/b>\",\n                 xaxis_title = \"Year\",\n                 yaxis_title = \"Count of Teams and NOC\",\n                 plot_bgcolor = \"#ECECEC\")\n\nfig.show()","a5d1e67e":"##  Total team, regions, events in winter olympics and summer olympics","7b8b0236":"## Has the number of athletes changed over time?","f4f5a3f1":"To see about the particular game double click on the name in legend section. The variation in size of the bubble is according to the age of players.","2978c0cd":"## Has the number of countries changed over time?","48c1cf65":"## Variation of age with time","c06b0c29":"## Total athelete and the medal winner","66770472":"### Change in number of men and women over time","566a3182":"## Fill Nan values as average except in medal","9c21b550":"##  Has the number of event and sport changed over time?","bbe324af":"## Participation according to the year in sport","ccc6a0f2":"## Athelete Participation according to sport","e76eaf2a":"## Medal count according to sex and season","417ce6a4":"## Total medal in each category ","e370990f":"## Mean Aage analysis","c108c8e9":"## Number of men and women over time","a3f18c3a":"## Total medal won according to sex","5b0fc7cd":"# USA participation","2cdc888c":"# The top 5 countries with max number of medals","cb5861bd":"## Medal distribution for each year","864df0d9":"## Gold medal distribution according to age","d59e0875":"# More athletes, nations, and events","46b4b573":"## Total gold medal per edition","fd7a965d":"## Distribution according to sex in both season","c92d8135":"## Count of medal for each sport according to medal category","2fb689cf":"## Medal counts for women of different nations:","49ee8e72":"Please give upvote if you like the notebook :)","7711dac7":"## Information about the column type","6284fa2c":"## Plot shows the distribution of height and weight of male and female athelete over time in both seasons","47f7eb55":"## Statistics of the data","19276636":"# Read the csv file","d5614bb9":"#  Women in olympics\n## Determing number of women in summer olympics","007fbbe8":"## Creating gold medal dataframe","60daf5d9":"## Medal won according to season and medal category","19e639f7":"# Analysis of age, height and weight of athelete","7bb4a2bc":"## Variation of weight with time","972798fe":"## Calculation of number of rows and columns in data","8f196345":"## Variation of height with time","e7df9b7b":"I wanted to find out which sports are finished with time. For example art competition is no longer held. So when was the last time it was held and similarly if their is addition of new sport with time. <br>\nIf you know please help me!","66636b3a":"## Plotting number of medals in winter and summer olympics seperately","3f7b60c1":"## Plotting the growth in the participation of women in olympics","d195d533":"## Plot showing the sport with value of height and weight relation according to age","007b9f2e":"## Number of atheletes "}}