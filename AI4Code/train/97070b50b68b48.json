{"cell_type":{"64c294ee":"code","530db69c":"code","8568234f":"code","30ffd0a5":"code","4b152bdd":"code","4e081a5f":"code","f723a3c2":"code","e09946bd":"code","6e047702":"code","50c0d91e":"code","77326f0d":"code","217a4590":"markdown","79508309":"markdown","2298d09f":"markdown"},"source":{"64c294ee":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve, precision_recall_curve, auc,roc_auc_score,average_precision_score\nimport seaborn as sns\nfrom IPython.display import display\nimport seaborn as sns","530db69c":"df=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndf.head()\ndisplay(df.describe())","8568234f":"df.isna().sum()","30ffd0a5":"print(f\"Fraud = {pd.value_counts(df['Class'])[1]} ,Normal = {pd.value_counts(df['Class'])[0]}\")\n\nsns.countplot(x = 'Class', data = df)\nplt.xticks(np.arange(2), ['Normal', 'Fraud'])\nplt.show()","4b152bdd":"from sklearn.preprocessing import MinMaxScaler, RobustScaler\nfrom sklearn.decomposition import PCA","4e081a5f":"x_data = df.drop(['Time', 'Class'], axis = 1)\nscaler = RobustScaler()\nx_data = scaler.fit_transform(x_data)","f723a3c2":"pca = PCA(n_components = 2)\nx2d = pca.fit_transform(x_data)\nx2d = pd.DataFrame(x2d, columns = ['pca1', 'pca2'])\nx2d['Class'] = df['Class']","e09946bd":"samp=x2d.sample(frac=0.6)\n\nprint(f\"Fraud = {pd.value_counts(samp['Class'])[1]} ,Normal = {pd.value_counts(samp['Class'])[0]}\")\nsns.countplot(x = 'Class', data =samp)\nplt.xticks(np.arange(2), ['Normal', 'Fraud'])\nplt.show()\n\nplt.scatter(samp['pca1'],samp['pca2'],c=samp['Class'],alpha=0.1);\nplt.title('PCA for abnormality detection');\nplt.xlabel('PCA_1');\nplt.ylabel('PCA_2');\nplt.show()","6e047702":"pca=PCA(n_components=3)\nx3d=pca.fit_transform(x_data)\n\nx3d=pd.DataFrame(x3d,columns=['pca1','pca2','pca3'])\nx3d['Class']=df['Class']\n\nsamp=x3d.sample(frac=0.6)\nimport plotly.express as px\nfig = px.scatter_3d(samp, x='pca1', y='pca2', z='pca3',\n              color='Class')\nfig.show()","50c0d91e":"from sklearn.ensemble import IsolationForest\n\nIF=IsolationForest(n_estimators=100,n_jobs=-1,contamination=0.1,random_state=7,max_samples=0.25)\n\ndf['isolation_forest_predict']=IF.fit_predict(x_data)\n\ndf['isolation_forest_predict'].replace({1:0,-1:1},inplace=True)","77326f0d":"df['isolation_forest_predict'].value_counts()\nprint('AUC score is {}'.format(roc_auc_score(df['Class'],-1*IF.score_samples(x_data))))\nprint('AUCPR score is {}'.format(average_precision_score(df['Class'],-1*IF.score_samples(x_data))))","217a4590":"### Scaling","79508309":"### To check if the Data is clean","2298d09f":"### PCA"}}