{"cell_type":{"78008941":"code","91a7cf1c":"code","02e18f2a":"code","b555caa7":"code","3d5e777d":"code","ace0040a":"code","f75b0c28":"code","23b5f0ac":"code","56dadf43":"code","4494d3e8":"code","eaebb8aa":"code","94cf14e1":"code","3d695e2c":"code","ea2b06f3":"code","4f0a1e5b":"code","27b81cd5":"code","d92baea5":"markdown","94c76360":"markdown","97a6073e":"markdown"},"source":{"78008941":"import pandas as pd\nfrom sklearn.ensemble import GradientBoostingClassifier","91a7cf1c":"df_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")","02e18f2a":"#Quick look at the training dataframe\ndf_train.head(5)","b555caa7":"#keep the important features \n    #(this step is based on intuition but should be revised after serious analysis)\ndf_train = df_train[['PassengerId','Pclass','Survived','Sex','Age','SibSp','Parch','Fare','Embarked']]","3d5e777d":"#description of features\ndf_train.describe()\n","ace0040a":"#There are clearly some missing values in feature 'Age' (I'll replace them with Zeros)\nprint(\"number of missing values from Age = \",df_train['Age'].isnull().sum(),\"\\n\")\n#eliminate missing values\ndf_train['Age'] = df_train['Age'].fillna(0)","f75b0c28":"#search for categorical non numerical features\ndf_train.describe(include=['O']) #O mean Object type , to check the type : column.dtype\n","23b5f0ac":"#replace with numerical features\ndf_train['Sex']=df_train['Sex'].map(lambda x : 1 if x=='male' else 0 )\ndf_train['Embarked']=df_train['Embarked'].map(lambda x : 1 if x=='S' else 2 if x=='C' else 3)\n#set id\ndf_train.set_index('PassengerId',inplace=True)","56dadf43":"#Create simple model\nmodel = GradientBoostingClassifier(random_state=0)\n\nfeatures = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\nX_train = df_train[features]\ny_train = df_train['Survived']\n\n#fit our model models\nmodel.fit(X_train,y_train)","4494d3e8":"#preprocessing the test dataframe\ndf_test['Sex']=df_test['Sex'].map(lambda x : 1 if x=='male' else 0 )\ndf_test['Embarked']=df_test['Embarked'].map(lambda x : 1 if x=='S' else 2 if x=='C' else 3)\ndf_test['Age'] = df_test['Age'].fillna(0)\ndf_test = df_test[['PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]","eaebb8aa":"#search for missing values\ndf_test.describe()","94cf14e1":"#one missing value in Fare feature\ndf_test['Fare'] = df_test['Fare'].fillna(-1) #all other values are positives (min == 0)","3d695e2c":"#get predictions\nX_test = df_test[features]\npredictions = model.predict(X_test)","ea2b06f3":"#prediction dataframe\ndf_predictions = pd.DataFrame(predictions,columns =['Survived'])\ndf_predictions['PassengerId'] = df_test.PassengerId\ndf_predictions = df_predictions[['PassengerId','Survived']]","4f0a1e5b":"df_predictions","27b81cd5":"df_predictions.to_csv ('predictions.csv', index = False, header=True)","d92baea5":"## Simple Analysis","94c76360":"## Simple GradientBoostingClassifier","97a6073e":"### Prepare the submission file"}}