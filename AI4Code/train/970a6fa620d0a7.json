{"cell_type":{"d5cf56f5":"code","bc466b51":"code","4b51bac5":"code","174e47dc":"code","4fccca7f":"code","0a3ce130":"code","b3f16f45":"code","5a694a04":"code","add4634e":"markdown"},"source":{"d5cf56f5":"# installation\n! pip install -q calmap\n! pip install -q requests\n! pip install -q geopy","bc466b51":"# import\n# essential libraries\nimport json\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport calmap\nimport folium\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# date and time\nimport time\nfrom datetime import datetime\n\n# requests for getting data file from Google Sheet link\nimport requests\n\n# geopy + geocoder = Nominatim for searching location using OpenStreetMap data.\nfrom geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"Vietnam SARS-CoV-2 \/ COVID-19 Infographics\", timeout=3)","4b51bac5":"# define function to get latitude, longitude\ndef latlongGet (addressStr):\n    #addressStr = \"Cu Chi, Ho Chi Minh, Vietnam\"\n    #addressStr = \"Cu Chi District, Ho Chi Minh, Vietnam\"\n\n    location = geolocator.geocode(addressStr)\n    if location is None:\n        print(\"Cannot find address\", addressStr)\n        #return NaN, NaN;\n    else:\n        #print(location.address)\n        print((location.latitude, location.longitude))\n        return location.latitude, location.longitude;","174e47dc":"# get latest Vietnam SARS-CoV-2 | COVID-19 data\nimport io\nfrom io import BytesIO\n\n# get data from shared Google Sheet\nresponse = requests.get('https:\/\/docs.google.com\/spreadsheet\/ccc?key=1i2ox2Ii-SCt1qiv3I3UxO37LSVWFdq7EJR1_ETaxx6M&output=csv')\nassert response.status_code == 200, 'Wrong status code'\ndata = response.content\n\n# import data to dataframe\ndf = pd.read_csv(BytesIO(data)) #unprocessed data\n\n# print few rows\nprint(df.head(5))","4fccca7f":"# process data frame\n\n# select cols of interest\ndfi = df[['Case', 'Current Location', 'Confirmed', 'Recovered']]\n\n# create an unattached column with an index\ndfState = dfi[['Current Location']]\ndfState.columns = ['State']\n#print(dfState)\n\n# extract state \/ province name from dfState\nnrow,_ = dfState.shape    \nfor i in range(nrow):\n    addr = dfState.iloc[i,0]\n    if (str(addr) == 'nan'):\n        print('index = ', i, ' addr = ', addr, ' -> no address')\n    else:\n        s = addr.split(',')    #delimiter = ','\n        state = s[len(s) - 2]  #get province \/ state\n        state = state.strip()\n        dfState.at[i,'State'] = state\n        #print('state = ', dfState.iloc[i,1])\nprint(dfState)\n\n# attach dfState to dfi\ndfiNew = pd.concat([dfi, dfState], axis=1)\n#print(dfiNew.tail(10))\n\n# select only confirmed cases & not recovered yet\ndfi = dfiNew[(dfiNew['Confirmed']==1) & (dfiNew['Recovered'].isnull())]\n#print(dfi)\nprint(dfi.head(10))\nprint(dfi.tail(10))","0a3ce130":"'''\n# test latlongGet function + searchable locations stored in data file\naddressStr = \"Cu Chi District, Ho Chi Minh, Vietnam\"\naddressStr = \"Dong Anh, Hanoi, Vietnam\"\n#addressStr = \"Binh Thuan Province, Vietnam\"\n#addressStr = \"Ninh Binh Province, Vietnam\"\n#addressStr = \"District 10, Ho Chi Minh, Vietnam\"\n#addressStr = \"Lao Cai, Vietnam\"\n#addressStr = \"Hanoi, Vietnam\"\n#addressStr = \"Da Nang, Vietnam\"\n#addressStr = \"Hoi An, Quang Nam, Vietnam\"\n#addressStr = \"Pasteur Hospital, Ho Chi Minh, Vietnam\"\n#addressStr = \"Hue, Vietnam\"\n#addressStr = \"Cao Xanh, Ha Long, Quang Ninh Province, Vietnam\"\n#addressStr = \"District 12, Ho Chi Minh, Vietnam\"\n\ntry:\n    lat, long = latlongGet(addressStr)\n    print(lat, long)\nexcept:\n    print('')\n'''","b3f16f45":"#get no. of rows in dfi\nnrow,_ = dfi.shape\n#print(nrow)\n#print(dfi.iloc[1,1])\n\n'''\n# test getting lat, long from dataframe of interest\n\nfor i in range(nrow):\n    time.sleep(1) #delay 1s to avoid #except OSError as err: # timeout error\n    addr = dfi.iloc[i,1]\n    if (str(addr) == 'nan'):\n        print('index = ', i, ' addr = ', addr, ' -> no address')\n    else:\n        lat, long = latlongGet(addr)\n        print('index = ', i, ' addr = ', addr, ' -> ', lat, long)\n'''","5a694a04":"# create map\n# country center - position country map in the middle\ncenterLat = 16.4637 #Hue city Lat Long\ncenterLong = 107.5909\n\n# display country map\nm = folium.Map(location=[centerLat, centerLong], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=10, zoom_start=6)\n\n# add SARS-CoV-2 | COVID-19 areas\n#nrow = 10 #fix value for testing purpose\n\ndfi[\"Lat\"] = np.nan\ndfi[\"Long\"] = np.nan\n\nfor i in range(0, nrow):\n    time.sleep(1) #delay 1s to avoid #except OSError as err: # timeout error\n    addr = dfi.iloc[i,1]\n    print(i,\"-\", addr)\n    if (str(addr) == 'nan'):\n        print('no address')\n    else:\n        #search if address appear once, lat long are available already, then no need to retrieve lat long again\n        alreadyExist = 0\n        foundPos = 0\n        for j in range(0, i-1):\n            addr2 = dfi.iloc[j,1]\n            if (str(addr) == str(addr2)):\n                alreadyExist = 1\n                foundPos = j\n                break\n        if (alreadyExist):\n            lat = dfi.iloc[foundPos,5]  #col Lat\n            long = dfi.iloc[foundPos,6] #col Long\n        else:\n            try:\n                lat, long = latlongGet(addr)\n                print(lat, long)\n            except:\n                print('')\n        \n            if(lat):\n                dfi.iloc[i,5] = lat         #col Lat\n            if(long):\n                dfi.iloc[i,6] = long        #col Long\n        #print(lat, long)\n    \n    state = dfi.iloc[i]['State'].strip()\n    print(state)\n    noCaseInState = dfi.State.str.count(state).sum()\n    print(noCaseInState)\n    \n    folium.Circle(\n        location=[lat, long],\n        color='crimson', \n        tooltip =   '<li><bold>Province : '+str(dfi.iloc[i]['State'])+\n                    '<li><bold>Confirmed : '+str(noCaseInState),\n                    #'<li><bold>Recovered : '+str(dfi.iloc[i]['Recovered']),\n                    #'<li><bold>Deaths : '+str(dfi.iloc[i]['Deaths'])+\n        radius=int(noCaseInState)*10).add_to(m)\n'''\n#testing to find total cases for each state\nprint(dfi.groupby([\"Confirmed\", \"State\"]).size())\nprint(dfi.groupby([\"Confirmed\", \"State\"]).size()[1])\nprint(dfi.groupby([\"Confirmed\", \"State\"]).size()[1][1])\nprint(dfi.groupby([\"Confirmed\", \"State\"]).size()[1]['Hanoi'])\n'''\n#display map\nm","add4634e":"References:\nhttps:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-viz-prediction-comparisons"}}