{"cell_type":{"7bb774b7":"code","660bd6e9":"code","ba6102cf":"code","31cd8b15":"code","45c872d5":"code","376f09ed":"code","e5c4a94f":"code","505ec9b8":"code","6e4834f1":"code","8c2d3af8":"code","39bc8f3e":"code","6f27dfb7":"code","edb977f9":"code","868a84b5":"code","4c7da8b0":"code","921e24db":"code","8e5e0293":"code","e5a955bc":"code","929bd859":"code","b1c984a2":"code","a4cd9943":"code","71d03c58":"code","21e27c8c":"code","34db5fb9":"code","b8a931f3":"code","ab60dbc4":"code","0657cdce":"code","ca77c17c":"code","f1fd1e4a":"code","357e821b":"code","8e477b4a":"code","f024f308":"code","96fcff3c":"code","f37c1f26":"code","0ebc0899":"code","674fcb81":"code","1c474c66":"code","a783956f":"code","0e3882ed":"code","219c8dbb":"code","b50846df":"code","76feea5f":"code","37a582fe":"code","cbc42228":"code","9f5b88b7":"code","2d590150":"code","5faeef10":"code","22ce3237":"code","46a436d5":"code","bd8accea":"code","5defe720":"code","b855783d":"code","ab385cac":"code","5b0836be":"code","ce93e5e6":"code","b54ffb2c":"code","05a6f72b":"code","af23e086":"code","990d28c8":"code","eeeeeca7":"code","8a0d7669":"code","dd105afa":"code","5f020393":"code","372396de":"code","b4d59b7d":"code","d99ac633":"code","7f8878b0":"code","57b6fad1":"markdown","91dd0db5":"markdown","258db88d":"markdown","5b3d1186":"markdown","cd7a58cf":"markdown","463eac14":"markdown","98a413b1":"markdown","31fbe441":"markdown","63f66dd5":"markdown","7192e02c":"markdown","50173e58":"markdown","ff0e0ce1":"markdown","0fdbac01":"markdown","2abb02d5":"markdown","6c7bd2b9":"markdown","0965713d":"markdown","e391ae50":"markdown","6d6fd43e":"markdown","5cb487ae":"markdown","0cd7d1a2":"markdown","17dd269e":"markdown","5020be7a":"markdown","59f75b2a":"markdown","858f7e83":"markdown","4835387a":"markdown","307a0590":"markdown","ab314345":"markdown","79596dd6":"markdown","c88c734a":"markdown","354ba6d1":"markdown","00a519c1":"markdown","99dc4f0c":"markdown","62bf5f3b":"markdown","4e537244":"markdown","07808a54":"markdown","d915fd10":"markdown","958c21da":"markdown","f9e72bde":"markdown","9b80d12e":"markdown","571978ed":"markdown","7701a15f":"markdown","7152faf3":"markdown","7c93f8f7":"markdown","64831e8d":"markdown","6619ad59":"markdown","b61f1471":"markdown"},"source":{"7bb774b7":"import warnings\nwarnings.filterwarnings('ignore')\n\n#importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","660bd6e9":"cars = pd.read_csv('..\/input\/CarPrice_Assignment.csv')\ncars.head()","ba6102cf":"cars.shape","31cd8b15":"cars.describe()","45c872d5":"cars.info()","376f09ed":"#Splitting company name from CarName column\nCompanyName = cars['CarName'].apply(lambda x : x.split(' ')[0])\ncars.insert(3,\"CompanyName\",CompanyName)\ncars.drop(['CarName'],axis=1,inplace=True)\ncars.head()","e5c4a94f":"cars.CompanyName.unique()","505ec9b8":"cars.CompanyName = cars.CompanyName.str.lower()\n\ndef replace_name(a,b):\n    cars.CompanyName.replace(a,b,inplace=True)\n\nreplace_name('maxda','mazda')\nreplace_name('porcshce','porsche')\nreplace_name('toyouta','toyota')\nreplace_name('vokswagen','volkswagen')\nreplace_name('vw','volkswagen')\n\ncars.CompanyName.unique()","6e4834f1":"#Checking for duplicates\ncars.loc[cars.duplicated()]","8c2d3af8":"cars.columns","39bc8f3e":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Car Price Distribution Plot')\nsns.distplot(cars.price)\n\nplt.subplot(1,2,2)\nplt.title('Car Price Spread')\nsns.boxplot(y=cars.price)\n\nplt.show()","6f27dfb7":"print(cars.price.describe(percentiles = [0.25,0.50,0.75,0.85,0.90,1]))","edb977f9":"plt.figure(figsize=(25, 6))\n\nplt.subplot(1,3,1)\nplt1 = cars.CompanyName.value_counts().plot('bar')\nplt.title('Companies Histogram')\nplt1.set(xlabel = 'Car company', ylabel='Frequency of company')\n\nplt.subplot(1,3,2)\nplt1 = cars.fueltype.value_counts().plot('bar')\nplt.title('Fuel Type Histogram')\nplt1.set(xlabel = 'Fuel Type', ylabel='Frequency of fuel type')\n\nplt.subplot(1,3,3)\nplt1 = cars.carbody.value_counts().plot('bar')\nplt.title('Car Type Histogram')\nplt1.set(xlabel = 'Car Type', ylabel='Frequency of Car type')\n\nplt.show()","868a84b5":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Symboling Histogram')\nsns.countplot(cars.symboling, palette=(\"cubehelix\"))\n\nplt.subplot(1,2,2)\nplt.title('Symboling vs Price')\nsns.boxplot(x=cars.symboling, y=cars.price, palette=(\"cubehelix\"))\n\nplt.show()","4c7da8b0":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Engine Type Histogram')\nsns.countplot(cars.enginetype, palette=(\"Blues_d\"))\n\nplt.subplot(1,2,2)\nplt.title('Engine Type vs Price')\nsns.boxplot(x=cars.enginetype, y=cars.price, palette=(\"PuBuGn\"))\n\nplt.show()\n\ndf = pd.DataFrame(cars.groupby(['enginetype'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(figsize=(8,6))\nplt.title('Engine Type vs Average Price')\nplt.show()\n","921e24db":"plt.figure(figsize=(25, 6))\n\ndf = pd.DataFrame(cars.groupby(['CompanyName'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Company Name vs Average Price')\nplt.show()\n\ndf = pd.DataFrame(cars.groupby(['fueltype'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Fuel Type vs Average Price')\nplt.show()\n\ndf = pd.DataFrame(cars.groupby(['carbody'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Car Type vs Average Price')\nplt.show()","8e5e0293":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Door Number Histogram')\nsns.countplot(cars.doornumber, palette=(\"plasma\"))\n\nplt.subplot(1,2,2)\nplt.title('Door Number vs Price')\nsns.boxplot(x=cars.doornumber, y=cars.price, palette=(\"plasma\"))\n\nplt.show()\n\nplt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Aspiration Histogram')\nsns.countplot(cars.aspiration, palette=(\"plasma\"))\n\nplt.subplot(1,2,2)\nplt.title('Aspiration vs Price')\nsns.boxplot(x=cars.aspiration, y=cars.price, palette=(\"plasma\"))\n\nplt.show()\n","e5a955bc":"def plot_count(x,fig):\n    plt.subplot(4,2,fig)\n    plt.title(x+' Histogram')\n    sns.countplot(cars[x],palette=(\"magma\"))\n    plt.subplot(4,2,(fig+1))\n    plt.title(x+' vs Price')\n    sns.boxplot(x=cars[x], y=cars.price, palette=(\"magma\"))\n    \nplt.figure(figsize=(15,20))\n\nplot_count('enginelocation', 1)\nplot_count('cylindernumber', 3)\nplot_count('fuelsystem', 5)\nplot_count('drivewheel', 7)\n\nplt.tight_layout()","929bd859":"def scatter(x,fig):\n    plt.subplot(5,2,fig)\n    plt.scatter(cars[x],cars['price'])\n    plt.title(x+' vs Price')\n    plt.ylabel('Price')\n    plt.xlabel(x)\n\nplt.figure(figsize=(10,20))\n\nscatter('carlength', 1)\nscatter('carwidth', 2)\nscatter('carheight', 3)\nscatter('curbweight', 4)\n\nplt.tight_layout()","b1c984a2":"def pp(x,y,z):\n    sns.pairplot(cars, x_vars=[x,y,z], y_vars='price',size=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('enginesize', 'boreratio', 'stroke')\npp('compressionratio', 'horsepower', 'peakrpm')\npp('wheelbase', 'citympg', 'highwaympg')","a4cd9943":"np.corrcoef(cars['carlength'], cars['carwidth'])[0, 1]","71d03c58":"#Fuel economy\ncars['fueleconomy'] = (0.55 * cars['citympg']) + (0.45 * cars['highwaympg'])","21e27c8c":"#Binning the Car Companies based on avg prices of each Company.\ncars['price'] = cars['price'].astype('int')\ntemp = cars.copy()\ntable = temp.groupby(['CompanyName'])['price'].mean()\ntemp = temp.merge(table.reset_index(), how='left',on='CompanyName')\nbins = [0,10000,20000,40000]\ncars_bin=['Budget','Medium','Highend']\ncars['carsrange'] = pd.cut(temp['price_y'],bins,right=False,labels=cars_bin)\ncars.head()","34db5fb9":"plt.figure(figsize=(8,6))\n\nplt.title('Fuel economy vs Price')\nsns.scatterplot(x=cars['fueleconomy'],y=cars['price'],hue=cars['drivewheel'])\nplt.xlabel('Fuel Economy')\nplt.ylabel('Price')\n\nplt.show()\nplt.tight_layout()","b8a931f3":"plt.figure(figsize=(25, 6))\n\ndf = pd.DataFrame(cars.groupby(['fuelsystem','drivewheel','carsrange'])['price'].mean().unstack(fill_value=0))\ndf.plot.bar()\nplt.title('Car Range vs Average Price')\nplt.show()","ab60dbc4":"cars_lr = cars[['price', 'fueltype', 'aspiration','carbody', 'drivewheel','wheelbase',\n                  'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'boreratio','horsepower', \n                    'fueleconomy', 'carlength','carwidth', 'carsrange']]\ncars_lr.head()","0657cdce":"sns.pairplot(cars_lr)\nplt.show()","ca77c17c":"# Defining the map function\ndef dummies(x,df):\n    temp = pd.get_dummies(df[x], drop_first = True)\n    df = pd.concat([df, temp], axis = 1)\n    df.drop([x], axis = 1, inplace = True)\n    return df\n# Applying the function to the cars_lr\n\ncars_lr = dummies('fueltype',cars_lr)\ncars_lr = dummies('aspiration',cars_lr)\ncars_lr = dummies('carbody',cars_lr)\ncars_lr = dummies('drivewheel',cars_lr)\ncars_lr = dummies('enginetype',cars_lr)\ncars_lr = dummies('cylindernumber',cars_lr)\ncars_lr = dummies('carsrange',cars_lr)","f1fd1e4a":"cars_lr.head()","357e821b":"cars_lr.shape","8e477b4a":"from sklearn.model_selection import train_test_split\n\nnp.random.seed(0)\ndf_train, df_test = train_test_split(cars_lr, train_size = 0.7, test_size = 0.3, random_state = 100)","f024f308":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nnum_vars = ['wheelbase', 'curbweight', 'enginesize', 'boreratio', 'horsepower','fueleconomy','carlength','carwidth','price']\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])","96fcff3c":"df_train.head()","f37c1f26":"df_train.describe()","0ebc0899":"#Correlation using heatmap\nplt.figure(figsize = (30, 25))\nsns.heatmap(df_train.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","674fcb81":"#Dividing data into X and y variables\ny_train = df_train.pop('price')\nX_train = df_train","1c474c66":"#RFE\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","a783956f":"lm = LinearRegression()\nlm.fit(X_train,y_train)\nrfe = RFE(lm, 10)\nrfe = rfe.fit(X_train, y_train)","0e3882ed":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","219c8dbb":"X_train.columns[rfe.support_]","b50846df":"X_train_rfe = X_train[X_train.columns[rfe.support_]]\nX_train_rfe.head()","76feea5f":"def build_model(X,y):\n    X = sm.add_constant(X) #Adding the constant\n    lm = sm.OLS(y,X).fit() # fitting the model\n    print(lm.summary()) # model summary\n    return X\n    \ndef checkVIF(X):\n    vif = pd.DataFrame()\n    vif['Features'] = X.columns\n    vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return(vif)","37a582fe":"X_train_new = build_model(X_train_rfe,y_train)","cbc42228":"X_train_new = X_train_rfe.drop([\"twelve\"], axis = 1)","9f5b88b7":"X_train_new = build_model(X_train_new,y_train)","2d590150":"X_train_new = X_train_new.drop([\"fueleconomy\"], axis = 1)","5faeef10":"X_train_new = build_model(X_train_new,y_train)","22ce3237":"#Calculating the Variance Inflation Factor\ncheckVIF(X_train_new)","46a436d5":"X_train_new = X_train_new.drop([\"curbweight\"], axis = 1)","bd8accea":"X_train_new = build_model(X_train_new,y_train)","5defe720":"checkVIF(X_train_new)","b855783d":"X_train_new = X_train_new.drop([\"sedan\"], axis = 1)","ab385cac":"X_train_new = build_model(X_train_new,y_train)","5b0836be":"checkVIF(X_train_new)","ce93e5e6":"X_train_new = X_train_new.drop([\"wagon\"], axis = 1)","b54ffb2c":"X_train_new = build_model(X_train_new,y_train)","05a6f72b":"checkVIF(X_train_new)","af23e086":"#Dropping dohcv to see the changes in model statistics\nX_train_new = X_train_new.drop([\"dohcv\"], axis = 1)\nX_train_new = build_model(X_train_new,y_train)\ncheckVIF(X_train_new)","990d28c8":"lm = sm.OLS(y_train,X_train_new).fit()\ny_train_price = lm.predict(X_train_new)","eeeeeca7":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)   ","8a0d7669":"#Scaling the test set\nnum_vars = ['wheelbase', 'curbweight', 'enginesize', 'boreratio', 'horsepower','fueleconomy','carlength','carwidth','price']\ndf_test[num_vars] = scaler.fit_transform(df_test[num_vars])\n","dd105afa":"#Dividing into X and y\ny_test = df_test.pop('price')\nX_test = df_test","5f020393":"# Now let's use our model to make predictions.\nX_train_new = X_train_new.drop('const',axis=1)\n# Creating X_test_new dataframe by dropping variables from X_test\nX_test_new = X_test[X_train_new.columns]\n\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)","372396de":"# Making predictions\ny_pred = lm.predict(X_test_new)","b4d59b7d":"from sklearn.metrics import r2_score \nr2_score(y_test, y_pred)","d99ac633":"#EVALUATION OF THE MODEL\n# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)   ","7f8878b0":"print(lm.summary())","57b6fad1":"dropping `wagon` because of high p-value.","91dd0db5":"#### Inference :\n\n1. `fueleconomy` has an obvios `negative correlation` with price and is significant.","258db88d":"### Step 2 : Data Cleaning and Preparation","5b3d1186":"PLEASE UPVOTE IT IF YOU FIND USEFUL","cd7a58cf":"### Step 6 : Dummy Variables","463eac14":"### Step 10 : Prediction and Evaluation","98a413b1":"#### Evaluation of the model using Statistics","31fbe441":"### Step 4 : Deriving new features","63f66dd5":"dropping `curbweight` because of high VIF value. (shows that curbweight has high multicollinearity.)","7192e02c":"#### Inference :\n\n1. `Jaguar` and `Buick` seem to have highest average price.\n2. `diesel` has higher average price than  gas.\n3. `hardtop` and `convertible` have higher average price.","50173e58":"### Step 8 : Model Building","ff0e0ce1":"#### Inference :\n\n1. High ranged cars prefer `rwd` drivewheel with `idi` or `mpfi` fuelsystem.","0fdbac01":"Highly correlated variables to price are - `curbweight`, `enginesize`, `horsepower`,`carwidth` and `highend`.","2abb02d5":"#### MODEL 4\n","6c7bd2b9":"#### MODEL 7","0965713d":"### Step 7 : Train-Test Split and feature scaling","e391ae50":"### Step 9 : Residual Analysis of Model","6d6fd43e":"### Step 1: Reading and Understanding the Data\n\nLet's start with the following steps:\n\n1. Importing data using the pandas library\n2. Understanding the structure of the data","5cb487ae":"#### MODEL 6","0cd7d1a2":"Error terms seem to be approximately normally distributed, so the assumption on the linear modeling seems to be fulfilled.","17dd269e":"p-vale of `twelve` seems to be higher than the significance value of 0.05, hence dropping it as it is insignificant in presence of other variables.","5020be7a":"#### Inference :\n\n1. Very few datapoints for `enginelocation` categories to make an inference.\n2. Most common number of cylinders are `four`, `six` and `five`. Though `eight` cylinders have the highest price range.\n3. `mpfi` and `2bbl` are most common type of fuel systems. `mpfi` and `idi` having the highest price range. But there are few data for other categories to derive any meaningful inference\n4. A very significant difference in drivewheel category. Most high ranged cars seeme to prefer `rwd` drivewheel.","59f75b2a":"dropping `sedan` because of high VIF value.","858f7e83":"#### Inference :\n\n1. It seems that the symboling with `0` and `1` values have high number of rows (i.e. They are most sold.)\n2. The cars with `-1` symboling seems to be high priced (as it makes sense too, insurance risk rating -1 is quite good). But it seems that symboling with `3` value has the price range similar to `-2` value. There is a dip in price at symboling `1`.","4835387a":"#### MODEL 2","307a0590":"### Problem Statement\nA Chinese automobile company Geely Auto aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts. \n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market. The company wants to know:\n\n    - Which variables are significant in predicting the price of a car\n    - How well those variables describe the price of a car\n\nBased on various market surveys, the consulting firm has gathered a large dataset of different types of cars across the Americal market. ","ab314345":"#### Inference :\n\n1. `enginesize`, `boreratio`, `horsepower`, `wheelbase` - seem to have a significant positive correlation with price.\n2. `citympg`, `highwaympg` - seem to have a significant negative correlation with price.","79596dd6":"#### Step 3.2 : Visualising numerical data","c88c734a":"#### MODEL 3","354ba6d1":"#### Evaluation of test via comparison of y_pred and y_test","00a519c1":"#### MODEL 1","99dc4f0c":"# Car Price Prediction\n","62bf5f3b":"### List of significant variables after Visual analysis :\n\n    - Car Range \n    - Engine Type \n    - Fuel type \n    - Car Body \n    - Aspiration \n    - Cylinder Number \n    - Drivewheel \n    - Curbweight \n    - Car Length\n    - Car width\n    - Engine Size \n    - Boreratio \n    - Horse Power \n    - Wheel base \n    - Fuel Economy ","4e537244":"#### Building model using statsmodel, for the detailed statistics","07808a54":"### Step 3: Visualizing the data\n","d915fd10":"### Step 5 : Bivariate Analysis","958c21da":"### Business Goal \n\nYou are required to model the price of cars with the available independent variables. It will be used by the management to understand how exactly the prices vary with the independent variables. They can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. Further, the model will be a good way for management to understand the pricing dynamics of a new market. ","f9e72bde":"#### Inference :\n\n1. The plot seemed to be right-skewed, meaning that the most prices in the dataset are low(Below 15,000).\n2. There is a significant difference between the mean and the median of the price distribution.\n3. The data points are far spread out from the mean, which indicates a high variance in the car prices.(85% of the prices are below 18,500, whereas the remaining 15% are between 18,500 and 45,400.)","9b80d12e":"#### Step 3.1 : Visualising Categorical Data\n\n    - CompanyName\n    - Symboling\n    - fueltype\n    - enginetype\n    - carbody\n    - doornumber\n    - enginelocation\n    - fuelsystem\n    - cylindernumber\n    - aspiration\n    - drivewheel","571978ed":"#### Inference :\n\n1. `carwidth`, `carlength` and `curbweight` seems to have a poitive correlation with `price`. \n2. `carheight` doesn't show any significant trend with price.","7701a15f":"#### Inference :\n\n1. `Toyota` seemed to be favored car company.\n2. Number of `gas` fueled cars are more than `diesel`.\n3. `sedan` is the top car type prefered.","7152faf3":"##### Fixing invalid values\n- There seems to be some spelling error in the CompanyName column.\n\n    - `maxda` = `mazda`\n    - `Nissan` = `nissan`\n    - `porsche` = `porcshce`\n    - `toyota` = `toyouta`\n    - `vokswagen` = `volkswagen` =  `vw`","7c93f8f7":"#### Inference :\n\n1. `ohc` Engine type seems to be most favored type.\n2. `ohcv` has the highest price range (While `dohcv` has only one row), `ohc` and `ohcf` have the low price range.","64831e8d":"#### Inference :\n\n1. *R-sqaured and Adjusted R-squared (extent of fit)* - 0.899 and 0.896 - `90%` variance explained.\n2. *F-stats and Prob(F-stats) (overall model fit)* - 308.0 and 1.04e-67(approx. 0.0) - Model fir is significant and explained `90%` variance is just not by chance.\n3. *p-values* - p-values for all the coefficients seem to be less than the significance level of 0.05. - meaning that all the predictors are statistically significant.","6619ad59":"#### MODEL 5","b61f1471":"#### Inference :\n\n1. `doornumber` variable is not affacting the price much. There is no sugnificant difference between the categories in it.\n2. It seems aspiration with `turbo` have higher price range than the `std`(though it has some high values outside the whiskers.)"}}