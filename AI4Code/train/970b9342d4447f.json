{"cell_type":{"16e5bea2":"code","dacbdd46":"code","4b071981":"code","8b737003":"code","a86a7411":"code","9c296667":"code","2e0b8836":"code","6aa71735":"code","70b41ffc":"code","448f2e05":"code","67728f98":"code","9816b445":"code","1c05bb0a":"code","3f45e20e":"code","5e9666ab":"code","6493cdbd":"code","0af9687b":"code","811b0320":"code","aedb67fc":"code","158edfb4":"code","67130d4b":"code","0aac9cd9":"code","a075aafa":"code","ead5bf88":"code","22031c91":"code","5c398f5d":"code","3c91422c":"code","1e26e03c":"code","2dea9424":"code","66b207bb":"code","a760a073":"code","b03ce5c1":"code","f6133492":"code","762e21ba":"code","f017b7f7":"code","5d369886":"code","78b8931e":"code","3a2e6c97":"code","c79a3569":"code","19b025e5":"code","de4a0dc5":"code","bed2c2de":"code","c922651a":"code","297f4368":"code","cec1cb8b":"code","0053c323":"code","82a47414":"code","ae407a14":"code","c3960ce5":"code","2757c37c":"code","0c800ddb":"code","e7997781":"code","464e4843":"code","4c15cdda":"code","3ff0fd8b":"code","d9853e83":"code","f34368b8":"code","ce1a9dd4":"code","614d9a5d":"code","024543e1":"code","7f00faa9":"code","86dbe844":"code","72675087":"code","91ba60f4":"code","75469305":"code","84197415":"code","3712e699":"code","a429ce6a":"code","492a9041":"code","947bc8ee":"code","75c9ce9b":"code","e0839270":"code","6c4eaa28":"code","180bf53d":"code","d4b1d524":"markdown","1c8c23ad":"markdown","c7873726":"markdown","bdbcd6af":"markdown","ad7ffbbe":"markdown","1d978366":"markdown","91531f4e":"markdown","bac1202d":"markdown","95413ddc":"markdown","1bed9f28":"markdown","d484c2f3":"markdown","0adfe9f4":"markdown","1f048afe":"markdown","44781938":"markdown","cd3f9199":"markdown","edd1b961":"markdown","d3e2e57c":"markdown","7990f73f":"markdown","c87c0fd2":"markdown","ae91cf9d":"markdown","d6a97bf3":"markdown","dc5ebca0":"markdown","25926f4a":"markdown","ecbbecb9":"markdown","5953ee72":"markdown","9fbddade":"markdown","fee891ad":"markdown","f4eec9ce":"markdown","dd1adf61":"markdown","5b3d93d1":"markdown","f6c60b79":"markdown","d5b93619":"markdown","df48bf35":"markdown","4715044c":"markdown","17a1750d":"markdown","d17bc266":"markdown"},"source":{"16e5bea2":"import pandas as pd\npd.set_option('display.max_columns', None)\nparse_date = lambda val : pd.datetime.strptime(val, '%y%m%d%H')\ntrain = pd.read_csv(\"..\/input\/100k-records\/100k.csv\", parse_dates=['hour'])\ntrain.head()","dacbdd46":"train.columns","4b071981":"train.info()","8b737003":"col=train.columns.tolist()\ncol.remove('hour')\ncol","a86a7411":"train[col]=train[col].astype('object')\ntrain.info()","9c296667":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (10,5))\nax=sns.countplot(x='click',data=train, palette='hls')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.1 , p.get_height() * 1.01))\nplt.show();","2e0b8836":"round(train['click'].value_counts()*100\/len(train),2)","6aa71735":"train.hour.describe()","70b41ffc":"ax=train.groupby('hour').agg({'click':'sum'}).plot(figsize=(20,6))\nplt.ylabel('Number of clicks')\nplt.title('Number of clicks by hour');\nax.get_legend().remove()\nplt.grid()","448f2e05":"train['hour_of_day'] = train.hour.apply(lambda x: x.hour)\nax=train.groupby('hour_of_day').agg({'click':'sum'}).plot(figsize=(25,6))\nplt.ylabel('Number of clicks')\nplt.title('click trends by hour of day');\nax.get_legend().remove()\nplt.grid()","67728f98":"train.groupby(['hour_of_day', 'click']).size().unstack().plot(kind='bar', title=\"Hour of Day\", figsize=(20,6))\nplt.ylabel('count')\nplt.title('Hourly impressions vs. clicks');\nplt.xticks(rotation = 0)\nplt.grid()","9816b445":"import seaborn as sns\n\ndf_click = train[train['click'] == 1]\ndf_hour = train[['hour_of_day','click']].groupby(['hour_of_day']).count().reset_index()\ndf_hour = df_hour.rename(columns={'click': 'impressions'})\ndf_hour['clicks'] = df_click[['hour_of_day','click']].groupby(['hour_of_day']).count().reset_index()['click']\ndf_hour['CTR'] = df_hour['clicks']\/df_hour['impressions']*100\n\nplt.figure(figsize=(24,6))\nax=sns.barplot(y='CTR', x='hour_of_day', data=df_hour)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Hourly CTR')\nplt.grid();","1c05bb0a":"train['day_of_week'] = train['hour'].dt.day_name()\ncats = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nax=train.groupby('day_of_week').agg({'click':'sum'}).reindex(cats).plot(figsize=(20,6))\nticks = list(range(0, 7, 1)) # points on the x axis where you want the label to appear\nlabels = \"Mon Tues Weds Thurs Fri Sat Sun\".split()\nplt.xticks(ticks, labels)\nplt.title('click trends by day of week');\nax.get_legend().remove()\nplt.grid()","3f45e20e":"ax=train.groupby(['day_of_week','click']).size().unstack().reindex(cats).plot(kind='bar', title=\"Day of the Week\", \n                                                                           figsize=(20,6))\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nticks = list(range(0, 7, 1)) # points on the x axis where you want the label to appear\nlabels = \"Mon Tues Weds Thurs Fri Sat Sun\".split()\nplt.xticks(ticks, labels)\nplt.title('Impressions vs. clicks by day of week');\nplt.xticks(rotation = 0)\nplt.grid()","5e9666ab":"df_click = train[train['click'] == 1]\ndf_dayofweek = train[['day_of_week','click']].groupby(['day_of_week']).count().reset_index()\ndf_dayofweek = df_dayofweek.rename(columns={'click': 'impressions'})\ndf_dayofweek['clicks'] = df_click[['day_of_week','click']].groupby(['day_of_week']).count().reset_index()['click']\ndf_dayofweek['CTR'] = df_dayofweek['clicks']\/df_dayofweek['impressions']*100\n\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='day_of_week', data=df_dayofweek, order=['Monday', 'Tuesday',\n                                                                   'Wednesday', 'Thursday', 'Friday',\n                                                                   'Saturday', 'Sunday'])\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Day of week CTR');\nplt.xticks(rotation = 0)\nplt.grid()","6493cdbd":"print(train.C1.value_counts()*100\/len(train))","0af9687b":"import numpy as np\nC1_values = train.C1.unique()\nC1_values.sort()\nctr_avg_list=[]\nfor i in C1_values:\n    ctr_avg=train.loc[np.where((train.C1 == i))].click.mean()*100\n    ctr_avg_list.append(ctr_avg)\n    print(\"for C1 value: {},  click through rate: {}\".format(i,round(ctr_avg,2)))","811b0320":"ax=train.groupby(['C1', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='C1 histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","aedb67fc":"df_c1 = train[['C1','click']].groupby(['C1']).count().reset_index()\ndf_c1 = df_c1.rename(columns={'click': 'impressions'})\ndf_c1['clicks'] = df_click[['C1','click']].groupby(['C1']).count().reset_index()['click']\ndf_c1['CTR'] = df_c1['clicks']\/df_c1['impressions']*100\n\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='C1', data=df_c1)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('CTR by C1');\nplt.grid()","158edfb4":"train['click'].mean()*100 # formula","67130d4b":"df_c1.CTR.describe()","0aac9cd9":"print(train.banner_pos.value_counts()*100\/len(train))","a075aafa":"banner_pos = train.banner_pos.unique()\nbanner_pos.sort()\nctr_avg_list=[]\nfor i in banner_pos:\n    ctr_avg=train.loc[np.where((train.banner_pos == i))].click.mean()*100\n    ctr_avg_list.append(ctr_avg)\n    print(\"for banner position: {},  click through rate: {}\".format(i,round(ctr_avg,2)))","ead5bf88":"ax=train.groupby(['banner_pos', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), \n                                                             title='banner position histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","22031c91":"df_banner = train[['banner_pos','click']].groupby(['banner_pos']).count().reset_index()\ndf_banner = df_banner.rename(columns={'click': 'impressions'})\ndf_banner['clicks'] = df_click[['banner_pos','click']].groupby(['banner_pos']).count().reset_index()['click']\ndf_banner['CTR'] = df_banner['clicks']\/df_banner['impressions']*100\nsort_banners = df_banner.sort_values(by='CTR',ascending=False)['banner_pos'].tolist()\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='banner_pos', data=df_banner, order=sort_banners)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nplt.title('CTR by banner position');\nplt.grid()","5c398f5d":"df_banner.CTR.describe()","3c91422c":"print(\"There are {} sites in the data set\".format(train.site_id.nunique()))","1e26e03c":"print('The top 10 site ids that have the most impressions')\nprint((train.site_id.value_counts()*100\/len(train))[0:10])","2dea9424":"top10_ids = (train.site_id.value_counts()\/len(train))[0:10].index\nclick_avg_list=[]\n\nfor i in top10_ids:\n    click_avg=train.loc[np.where((train.site_id == i))].click.mean()*100\n    click_avg_list.append(click_avg)\n    print(\"for site id value: {},  click through rate: {}\".format(i,round(click_avg,2)))","66b207bb":"top10_sites = train[(train.site_id.isin((train.site_id.value_counts()\/len(train))[0:10].index))]\ntop10_sites_click = top10_sites[top10_sites['click'] == 1]\nax=top10_sites.groupby(['site_id', 'click']).size().unstack().plot(kind='bar',\n                                                                figsize=(20,6), title='Top 10 site ids histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","a760a073":"df_site = top10_sites[['site_id','click']].groupby(['site_id']).count().reset_index()\ndf_site = df_site.rename(columns={'click': 'impressions'})\ndf_site['clicks'] = top10_sites_click[['site_id','click']].groupby(['site_id']).count().reset_index()['click']\ndf_site['CTR'] = df_site['clicks']\/df_site['impressions']*100\nsort_site = df_site.sort_values(by='CTR',ascending=False)['site_id'].tolist()\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='site_id', data=df_site, order=sort_site)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('CTR by top 10 site id');\nplt.grid()","b03ce5c1":"print(\"There are {} site domains in the data set\".format(train.site_domain.nunique()))","f6133492":"print('The top 10 site domains that have the most impressions')\nprint((train.site_domain.value_counts()*100\/len(train))[0:10])\n","762e21ba":"top10_domains = (train.site_domain.value_counts()\/len(train))[0:10].index\nclick_avg_list=[]\n\nfor i in top10_domains:\n    click_avg=train.loc[np.where((train.site_domain == i))].click.mean()*100\n    click_avg_list.append(click_avg)\n    print(\"for site domain value: {},  click through rate: {}\".format(i,round(click_avg,2)))","f017b7f7":"top10_domain = train[(train.site_domain.isin((train.site_domain.value_counts()\/len(train))[0:10].index))]\ntop10_domain_click = top10_domain[top10_domain['click'] == 1]\nax=top10_domain.groupby(['site_domain', 'click']).size().unstack().plot(kind='bar',\n                                                                     figsize=(20,6), title='Top 10 site domains histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","5d369886":"df_domain = top10_domain[['site_domain','click']].groupby(['site_domain']).count().reset_index()\ndf_domain = df_domain.rename(columns={'click': 'impressions'})\ndf_domain['clicks'] = top10_domain_click[['site_domain','click']].groupby(['site_domain']).count().reset_index()['click']\ndf_domain['CTR'] = df_domain['clicks']\/df_domain['impressions']*100\nsort_domain = df_domain.sort_values(by='CTR',ascending=False)['site_domain'].tolist()\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='site_domain', data=df_domain, order=sort_domain)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('CTR by top 10 site domain');\nplt.grid()","78b8931e":"print(\"There are {} site categories in the data set\".format(train.site_category.nunique()))","3a2e6c97":"print('The top 10 site categories that have the most impressions')\nprint((train.site_category.value_counts()*100\/len(train))[0:10])","c79a3569":"top10_categories = (train.site_category.value_counts()\/len(train))[0:10].index\nclick_avg_list=[]\n\nfor i in top10_categories:\n    click_avg=train.loc[np.where((train.site_category == i))].click.mean()*100\n    click_avg_list.append(click_avg)\n    print(\"for site category value: {},  click through rate: {}\".format(i,round(click_avg,2)))","19b025e5":"top10_category = train[(train.site_category.isin((train.site_category.value_counts()\/len(train))[0:10].index))]\ntop10_category_click = top10_category[top10_category['click'] == 1]\nax=top10_category.groupby(['site_category', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), \n                                                                         title='Top 10 site categories histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","de4a0dc5":"df_category = top10_category[['site_category','click']].groupby(['site_category']).count().reset_index()\ndf_category = df_category.rename(columns={'click': 'impressions'})\ndf_category['clicks'] = top10_category_click[['site_category',\n                                              'click']].groupby(['site_category']).count().reset_index()['click']\ndf_category['CTR'] = df_category['clicks']\/df_category['impressions']*100\nsort_category = df_category.sort_values(by='CTR',ascending=False)['site_category'].tolist()\nplt.figure(figsize=(20,6))\nax=sns.barplot(y='CTR', x='site_category', data=df_category, order=sort_category)\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nplt.title('CTR by top 10 site category');\nplt.grid()","bed2c2de":"print(\"There are {} devices in the data set\".format(train.device_id.nunique()))","c922651a":"print('The top 10 devices that have the most impressions')\nprint((train.device_id.value_counts()*100\/len(train))[0:10])","297f4368":"top10_devices = (train.device_id.value_counts()\/len(train))[0:10].index\nclick_avg_list=[]\n\nfor i in top10_devices:\n    click_avg=train.loc[np.where((train.device_id == i))].click.mean()*100\n    click_avg_list.append(click_avg)\n    print(\"for device id value: {},  click through rate: {}\".format(i,round(click_avg,2)))","cec1cb8b":"top10_device = train[(train.device_id.isin((train.device_id.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['device_id', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10 device ids histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","0053c323":"print(\"There are {} device ips in the data set\".format(train.device_ip.nunique()))\nprint(\"There are {} device types in the data set\".format(train.device_type.nunique()))\nprint(\"There are {} device models in the data set\".format(train.device_model.nunique()))\nprint(\"There are {} device cnn types in the data set\".format(train.device_conn_type.nunique()))","82a47414":"print('The impressions by device types')\nprint((train.device_type.value_counts()*100\/len(train)))","ae407a14":"ax=train[['device_type','click']].groupby(['device_type','click']).size().unstack().plot(kind='bar',figsize=(20,6),\n                                                                                         title='device types');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","c3960ce5":"ax=df_click[df_click['device_type']==1].groupby(['hour_of_day',\n                                              'click']).size().unstack().plot(kind='bar',\n                                                                              title=\"Clicks from device type 1 by hour of day\", \n                                                                              figsize=(20,6));\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.get_legend().remove()\nplt.grid()","2757c37c":"device_type_click = df_click.groupby('device_type').agg({'click':'sum'}).reset_index()\ndevice_type_impression = train.groupby('device_type').agg({'click':'count'}).reset_index().rename(columns={'click': 'impressions'})\nmerged_device_type = pd.merge(left = device_type_click , right = device_type_impression, how = 'inner', on = 'device_type')","0c800ddb":"merged_device_type['CTR'] = round(merged_device_type['click'] \/ merged_device_type['impressions']*100,2)\nmerged_device_type","e7997781":"print(\"There are {} apps in the data set\".format(train.app_id.nunique()))\nprint(\"There are {} app domains in the data set\".format(train.app_domain.nunique()))\nprint(\"There are {} app categories in the data set\".format(train.app_category.nunique()))","464e4843":"print('The impressions by app categories')\nprint(round(train.app_category.value_counts()*100\/len(train),2))","4c15cdda":"ax=train['app_category'].value_counts().plot(kind='bar', title='App Category v\/s Clicks',figsize=(20,6))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 90)\nax.set_yscale('log')    \nplt.grid()","3ff0fd8b":"train_app_category = train.groupby(['app_category', 'click']).size().unstack()\ntrain_app_category.div(train_app_category.sum(axis=1), axis=0).plot(kind='bar', stacked=True, \n                                                                    title=\"Intra-category CTR\",figsize=(20,6));\nplt.grid()","d9853e83":"print(\"There are {} C14 in the data set\".format(train.C14.nunique()))\nprint(\"There are {} C15 in the data set\".format(train.C15.nunique()))\nprint(\"There are {} C16 in the data set\".format(train.C16.nunique()))\nprint(\"There are {} C17 in the data set\".format(train.C17.nunique()))\nprint(\"There are {} C18 in the data set\".format(train.C18.nunique()))\nprint(\"There are {} C19 in the data set\".format(train.C19.nunique()))\nprint(\"There are {} C20 in the data set\".format(train.C20.nunique()))\nprint(\"There are {} C21 in the data set\".format(train.C21.nunique()))","f34368b8":"print(\"There are {} C14 values in the data set\".format(train.C14.nunique()))","ce1a9dd4":"print('The top C14 values that have the most impressions')\nprint((train.C14.value_counts()*100\/len(train))[0:10])","614d9a5d":"top10_device = train[(train.C14.isin((train.C14.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C14', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C14 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 90)\nax.set_yscale('log')    \nplt.grid()","024543e1":"top10_device.groupby(['C14', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C14 distribution',figsize=(20,6));   \nplt.grid()","7f00faa9":"ax=train[['C15','click']].groupby(['C15','click']).size().unstack().plot(kind='bar',figsize=(20,6),\n                                                                                         title='C15');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","86dbe844":"ax=train.groupby(['C15', 'click']).size().unstack().plot(kind='bar', stacked=True, title='C15 distribution',figsize=(20,6));   \nax.set_yscale('log')\nplt.xticks(rotation = 0)\nplt.grid()","72675087":"ax=train[['C16','click']].groupby(['C16','click']).size().unstack().plot(kind='bar',figsize=(20,6),\n                                                                                         title='C16');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","91ba60f4":"ax=train.groupby(['C16', 'click']).size().unstack().plot(kind='bar', stacked=True, title='C16 distribution',figsize=(20,6));   \nax.set_yscale('log')\nplt.xticks(rotation = 0)\nplt.grid()","75469305":"top10_device = train[(train.C17.isin((train.C17.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C17', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C17 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 90)\nax.set_yscale('log')    \nplt.grid()","84197415":"top10_device.groupby(['C17', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C17 distribution',figsize=(20,6));   \nplt.grid()","3712e699":"ax=train[['C18','click']].groupby(['C18','click']).size().unstack().plot(kind='bar',figsize=(20,6),\n                                                                                         title='C18');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')\nplt.grid()","a429ce6a":"ax=train.groupby(['C18', 'click']).size().unstack().plot(kind='bar', stacked=True, title='C18 distribution',figsize=(20,6));   \nax.set_yscale('log')\nplt.xticks(rotation = 0)\nplt.grid()","492a9041":"top10_device = train[(train.C19.isin((train.C19.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C19', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C19 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')    \nplt.grid()","947bc8ee":"top10_device.groupby(['C19', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C19 distribution',figsize=(20,6));   \nplt.xticks(rotation = 0)\nplt.grid()","75c9ce9b":"top10_device = train[(train.C20.isin((train.C20.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C20', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C20 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')    \nplt.grid()","e0839270":"top10_device.groupby(['C20', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C20 distribution',figsize=(20,6));   \nplt.xticks(rotation = 0)\nplt.grid()","6c4eaa28":"top10_device = train[(train.C21.isin((train.C21.value_counts()\/len(train))[0:10].index))]\n\nax=top10_device.groupby(['C21', 'click']).size().unstack().plot(kind='bar', figsize=(20,6), title='Top 10  C21 values histogram');\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\n    plt.xticks(rotation = 0)\nax.set_yscale('log')    \nplt.grid()","180bf53d":"top10_device.groupby(['C21', 'click']).size().unstack().plot(kind='bar', stacked=True, title='Top 10 C21 distribution',figsize=(20,6));   \nplt.xticks(rotation = 0)\nplt.grid()","d4b1d524":"We've heard that there are several aspects that influence the effectiveness of our banner advertisements, but the banner location is the most important. Let us check whether this is true.","1c8c23ad":"Hours 13 and 14 (1 p.m. and 2 p.m.) had the most clicks, whereas hour 0 has the fewest clicks (mid-night). For approximate estimate, it appears to be a valuable feature.","c7873726":"Extract hour from date time feature","bdbcd6af":"#  Site features","ad7ffbbe":"## C14 - C21 features","1d978366":"Every day, the hourly clicks pattern seems extremely similar. However, there were a couple of peak hours, one in the middle of the day on Oct 22 and another in the middle of the day on Oct 28. On October 24, one off-peak hour is close to midnight.","91531f4e":"## device id","bac1202d":"## site id","95413ddc":"C1 value = 1005 has the most data, almost 92%. Let's see whether we can find value of C1 indicates something about CTR.","1bed9f28":"The average CTR in the data is almost 17","d484c2f3":"# Banner position","0adfe9f4":"Although banner positions 0 and 1 have the most impressions and clicks, banner position 7 has the greatest click through rate. Increasing the amount of adverts in banner position 7 appears to be a smart idea.","1f048afe":"## Hour","44781938":"Device ip is more of a users ip address, so, there are a lot of them.","cd3f9199":"## site domain","edd1b961":"## device type","d3e2e57c":"They all have same CTR","7990f73f":"The majority of clicks from device type 1 occurred during business hours, as predicted. The device type is unquestionably a significant feature.","c87c0fd2":"It appears that the app category is something worth investigating.","ae91cf9d":"## site category","d6a97bf3":"Thye have almost same CTR","dc5ebca0":"The data covers 10 days of clicks data from 2014-10-21 to 2014-10-30, that is 240 hours.","25926f4a":"# Feature Engineering","ecbbecb9":"No trends identified","5953ee72":"C1 is one of the categorical characteristics that has been anonymised. Even if we don't know what it means, we'd like to see how it's distributed.","9fbddade":"The highest CTR comes from device type 0.","fee891ad":"The most impressions and clicks are generated by C15 as 320.","f4eec9ce":"You will see that most of device_id is a99f214a : Approx. 83% of the data, and the second major device_id is only 0.125% of the data. ","dd1adf61":"## device ip","5b3d93d1":"## Day of week","f6c60b79":"# Device features","d5b93619":"Tuesdays had the highest number of impressions and clicks, followed by Tuesdays, Wednesdays and Thursdays. Mondays and Fridays had the fewest impressions and clicks.","df48bf35":"The most impressions and clicks are generated by device type 1. Other device kinds receive the fewest impressions and clicks. We may need  to investigate device type 1 in further depth.","4715044c":"Now that we have click and impression, we may go on to the next step. The click-through rate may be calculated (CTR). The click-through rate (CTR) is the ratio of ad impressions to clicks. It calculates the number of times each ad is clicked.","17a1750d":"## app features","d17bc266":"# C1 feature"}}