{"cell_type":{"1a74cbb1":"code","ab91441c":"code","cf368403":"markdown"},"source":{"1a74cbb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab91441c":"#!\/usr\/bin\/env python\n# coding: utf-8\nfrom IPython import get_ipython\n# In[1]:\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n# In[2]:\n\n\nimport sympy as sp\nfrom sympy import oo\nimport numpy as np\nfrom itertools import product\nfrom scipy.linalg import eig\nfrom sympy import diff\nimport time as time\nimport matplotlib.pyplot as plt\nfrom sympy.plotting import plot\n# %matplotlib notebook\nfrom IPython.display import Math\n\nsp.init_printing()\n\nr, r1, r2, r3, zeta, zeta1, zeta2 = sp.symbols(\"r, r1, r2,r3 zeta, zeta1, zeta2\")\nn = sp.Symbol('n', integer=True)\n\n\ndef STO(zeta, n, r=r):\n    return (2 * zeta) ** n * (2 * zeta \/ sp.factorial(2 * n)) ** (1 \/ 2) * r ** (n - 1) * sp.exp(-zeta * r)\n\n\n# S Overlap Integrate\ndef S_int(f1, f2):\n    return sp.integrate(f1 * f2 * r * r, (r, 0, +oo))\n\n\n# H core = kinetics energy + electron and nuclear potential energy\ndef Hs_int(f1, f2, Z):\n    return sp.integrate(f1 * (-((1 \/ 2) * (1 \/ r) * diff(diff(r * f2, r), r)) - ((Z \/ r) * f2)) * r * r, (r, 0, +oo))\n\n\n# H core = kinetics energy + electron and nuclear potential energy\ndef Hp_int(f1, f2, Z):\n    return sp.integrate(\n        f1 * (-((1 \/ 2) * (1 \/ r) * diff(diff(r * f2, r), r)) + ((1 \/ r ** 2) * f2) - ((Z \/ r) * f2)) * r * r,\n        (r, 0, +oo))\n\n\n# Returns the core hamiltonian matrix\ndef Hs_matrix(fs, Z):\n    H = np.zeros((len(fs), len(fs)))\n    for i in range(len(fs)):\n        for j in range(len(fs)):\n            H[i, j] = Hs_int(fs[i], fs[j], Z)\n\n    return H\n\n\n# Returns the overlap matrix\ndef S_matrix(fs):\n    S = np.zeros((len(fs), len(fs)))\n    for i in range(len(fs)):\n        for j in range(len(fs)):\n            S[i, j] = S_int(fs[i], fs[j])\n\n    return S\n\n\n# Returns the core hamiltonian matrix\ndef Hp_matrix(fp, Z):\n    H = np.zeros((len(fp), len(fp)))\n    for i in range(len(fp)):\n        for j in range(len(fp)):\n            H[i, j] = Hp_int(fp[i], fp[j], Z)\n\n    return H\n\n\ndef Repulsion_electron(zetas, l):\n\n    f1 = STO(zetas[0][0], zetas[0][1], r1)\n    f2 = STO(zetas[1][0], zetas[1][1], r1)\n    f3 = STO(zetas[2][0], zetas[2][1], r2)\n    f4 = STO(zetas[3][0], zetas[3][1], r2)\n    # f5 = STO(zetas[4][0], zetas[4][1], r3)\n    # f6 = STO(zetas[5][0], zetas[5][1], r3)\n    fs = [f1, f2, f3, f4]\n    # need to fix var B and A\n    B = (1 \/ r1 ** (l + 1)) * sp.integrate(f3 * f4 * r2 ** (l + 2), (r2, 0, r1)) + r1 ** l * sp.integrate(\n        f3 * f4 * r2 ** (1 - l), (r2, r1, +oo))\n    A = sp.integrate(f1 * f2 * r1 * r1 * B, (r1, 0, +oo))\n    return A\n\n\n# Calculates Density matrix\n# P need to be changed if the atom have unpaired electron\ndef Ps_matrix(Co):\n    P = np.zeros([Co.shape[0], Co.shape[0]])\n\n    for t in range(Co.shape[0]):\n        for u in range(Co.shape[0]):\n            P[t][u] = 2 * Co[t][0] * Co[u][0] + 2 * Co[t][1] * Co[u][1]\n    return P\n\n\n# Calculates Density matrix\n# P need to be changed if the atom have unpaired electron\ndef Pp_matrix(Co):\n    P = np.zeros([Co.shape[0], Co.shape[0]])\n\n    for t in range(Co.shape[0]):\n        for u in range(Co.shape[0]):\n            P[t][u] = 2 * Co[t][0] * Co[u][0]\n    return P\n\n\ndef J_matrix(zetai, zetaj, l):\n    J = np.zeros((len(zetai), len(zetai), len(zetaj), len(zetaj)))\n\n    rs = list(product(range(len(zetai)), repeat=2))\n    tu = list(product(range(len(zetaj)), repeat=2))\n\n    for r, s in rs:\n        for t, u in tu:\n            J[r, s, t, u] = Repulsion_electron((zetai[r], zetai[s], zetaj[t], zetaj[u]), l)\n    return J\n\n\ndef K_matrix(zetai, zetaj, l):\n    K = np.zeros((len(zetai), len(zetai), len(zetaj), len(zetaj)))\n\n    rs = list(product(range(len(zetai)), repeat=2))\n    tu = list(product(range(len(zetaj)), repeat=2))\n\n    for r, s in rs:\n        for t, u in tu:\n            K[r, s, t, u] = Repulsion_electron((zetai[r], zetaj[u], zetaj[t], zetai[s]), l)\n    return K\n\n\n# Caculate G Matrix for 1s\ndef Gs_matrix(Cos, Cop, Jss, Kss, Jsp, Ksp):\n    G = np.zeros((Cos.shape[0], Cos.shape[0]))\n    Ps = Ps_matrix(Cos)\n    Pp = Pp_matrix(Cop)\n\n    rs = list(product(range(Cos.shape[0]), repeat=2))\n    tu = list(product(range(Cos.shape[0]), repeat=2))\n    ij = list(product(range(Cop.shape[0]), repeat=2))\n\n    for r, s in rs:\n        g = 0\n        for t, u in tu:\n            int1 = Jss[r, s, t, u]\n            int2 = Kss[r, s, t, u]\n            g += Ps[t, u] * (int1 - 0.5 * int2)\n        for i, j in ij:\n            int1 = Jsp[r, s, i, j]\n            int2 = Ksp[r, s, i, j]\n            g += Pp[i, j] * (int1 - 0.5 * int2)\n        G[r, s] = g\n    return G\n\n\n# Returns the Fock matrix\ndef Fs_matrix(fs, Z, Cos, Cop, Jss, Kss, Jsp, Ksp):\n    return Hs_matrix(fs, Z) + Gs_matrix(Cos, Cop, Jss, Kss, Jsp, Ksp)\n\n\n# Caculate G Matrix for p\ndef Gp_matrix(Cos, Cop, Jpp, Kpp, Jps, Kps):\n    G = np.zeros((Cop.shape[0], Cop.shape[0]))\n    Ps = Ps_matrix(Cos)\n    Pp = Pp_matrix(Cop)\n\n    rs = list(product(range(Cop.shape[0]), repeat=2))\n    tu = list(product(range(Cop.shape[0]), repeat=2))\n    ij = list(product(range(Cos.shape[0]), repeat=2))\n\n    for r, s in rs:\n        g = 0\n        for t, u in tu:\n            int1 = Jpp[r, s, t, u]\n            int2 = Kpp[r, s, t, u]\n            g += Pp[t, u] * 0.5 * (int1 - int2)\n        for i, j in ij:\n            int1 = Jps[r, s, i, j]\n            int2 = Kps[r, s, i, j]\n            g += Ps[i, j] * (int1 - 0.5 * int2)\n        G[r, s] = g\n    return G\n\n\n# Returns the Fock matrix\ndef Fp_matrix(fp, Z, Cos, Cop, Jpp, Kpp, Jps, Kps):\n    return Hp_matrix(fp, Z) + Gp_matrix(Cos, Cop, Jpp, Kpp, Jps, Kps)\n\n\n# slove secular equation, return the energy and improved coeffients\n# the energy here is orbital energy for 1 electron\ndef secular_eqn(F, S):\n    ei, C = eig(F, S)\n\n    # sort eigvalue and eigvector from lower to higher\n    idx = ei.argsort()[::1]\n    ei = ei[idx]\n    C = C[:, idx]\n\n    # eigvector from scipy.linalg.eig is not normalized, which is a bug\n    # this is to fix it\n    Co = np.zeros((C.shape[0], C.shape[0]))\n    inte = np.matmul(np.matmul(C.T, S), C)\n    for i in range(C.shape[0]):\n        for j in range(C.shape[0]):\n            Co[j][i] = C[j][i] \/ np.sqrt(inte[i][i])\n\n    return ei, Co\n\n\n# return energy of atom\ndef get_E0(e1, e2, Ps, Pp, Hs, Hp):\n    E0 = e1[0].real + e1[1].real + e2[0].real + 0.5 * (Ps * Hs).sum() + 0.5 * (Pp * Hp).sum()\n    return E0\n\n\n# input\n# zeta obtained from https:\/\/www.scm.com\/zorabasis\/periodic.dzae.html\nzetas = [[10.88, 1], [7.70, 1], [3.22, 2], [1.92, 2]]\nzetap = [[3.52, 2], [1.48, 2]]\n\n# input nuclear charge (element number)\nZ = 11\n\n# build basis function\nfs1 = STO(zetas[0][0], zetas[0][1])\nfs2 = STO(zetas[1][0], zetas[1][1])\nfs3 = STO(zetas[2][0], zetas[2][1])\nfs4 = STO(zetas[3][0], zetas[3][1])\n\nfs = [fs1, fs2, fs3, fs4]\n\nfp1 = STO(zetap[0][0], zetap[0][1])\nfp2 = STO(zetap[1][0], zetap[1][1])\n\nfp = [fp1, fp2]\n\n# initialization\nJss = np.zeros((len(zetas), len(zetas), len(zetas), len(zetas)))\nKss = np.zeros((len(zetas), len(zetas), len(zetas), len(zetas)))\nJsp = np.zeros((len(zetas), len(zetas), len(zetap), len(zetap)))\nKsp = np.zeros((len(zetas), len(zetas), len(zetap), len(zetap)))\nJps = np.zeros((len(zetap), len(zetap), len(zetas), len(zetas)))\nKps = np.zeros((len(zetap), len(zetap), len(zetas), len(zetas)))\nJpp = np.zeros((len(zetas), len(zetas), len(zetap), len(zetap)))\nKpp = np.zeros((len(zetas), len(zetas), len(zetap), len(zetap)))\nHs = Hs_matrix(fs, Z)\nHp = Hp_matrix(fp, Z)\nSs = S_matrix(fs)\nSp = S_matrix(fp)\nes, Cos = secular_eqn(Hs, Ss)\nep, Cop = secular_eqn(Hp, Sp)\nPs = Ps_matrix(Cos)\nPp = Pp_matrix(Cop)\nscf_H = get_E0(es, ep, Ps, Pp, Hs, Hp)\n\n##############################################print information below#################################################\nprint('-' * 30, \"Initialization\", '-' * 30)\nprint('-' * 25, \"Ignore repulsion integral\", '-' * 24)\ndisplay(Math(\n    '\\zeta_1 = {0} \\quad \\zeta_2 = {1} \\quad \\zeta_3 = {2} \\quad \\zeta_4 = {3} \\quad \\zeta_5 = {4} \\quad \\zeta_6 = {5}'.format(\n        format(zetas[0][0], '0.3f'), format(zetas[1][0], '0.3f'), format(zetas[2][0], '0.3f'),\n        format(zetas[3][0], '0.3f'), format(zetap[0][0], '0.3f'), format(zetap[1][0], '0.3f'))))\ndisplay(Math('Orbitals:'))\ndisplay(Math(' \\phi_1s = c_{11} \\chi_1 + c_{21} \\chi_2 + c_{31} \\chi_3 + c_{41} \\chi_4'))\ndisplay(Math(' \\phi_2s = c_{12} \\chi_1 + c_{22} \\chi_2 + c_{32} \\chi_3 + c_{42} \\chi_4'))\ndisplay(Math(' \\phi_2p = c_{52} \\chi_5 + c_{62} \\chi_6'))\ndisplay(Math('c11 = {0} \\quad c21 = {1} \\quad c31 = {2} \\quad c41 = {3}'.format(format(Cos[0][0], '0.3f'),\n                                                                                format(Cos[1][0], '0.3f'),\n                                                                                format(Cos[2][0], '0.3f'),\n                                                                                format(Cos[3][0], '0.3f'))))\ndisplay(Math('c12 = {0} \\quad c22 = {1} \\quad c32 = {2} \\quad c42 = {3}'.format(format(Cos[0][1], '0.3f'),\n                                                                                format(Cos[1][1], '0.3f'),\n                                                                                format(Cos[2][1], '0.3f'),\n                                                                                format(Cos[3][1], '0.3f'))))\ndisplay(Math('c52 = {0} \\quad c62 = {1}'.format(format(Cop[0][0], '0.3f'), format(Cop[1][0], '0.3f'))))\n\n# plot density graph\ncolorlist = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'black', 'red', 'orange', 'yellow', 'green', 'blue',\n             'purple', 'black']\nphi1 = Cos[0, 0] * fs1 + Cos[1, 0] * fs2 + Cos[2, 0] * fs3 + Cos[3, 0] * fs4\nphi2 = Cos[0, 1] * fs1 + Cos[1, 1] * fs2 + Cos[2, 1] * fs3 + Cos[3, 1] * fs4\nphi3 = Cop[0, 0] * fp1 + Cop[1, 0] * fp2\ndensity_1 = phi1 * phi1 * r * r\ndensity_2 = phi2 * phi2 * r * r\ndensity_3 = phi3 * phi3 * r * r\np = plot((density_1, (r, 0, 5)), (density_2, (r, 0, 5)), (density_3, (r, 0, 5)), show=False, legend=True)\np[0].label = 'electron density $r^2 \\phi_1^2$ '\np[1].label = 'electron density $r^2 \\phi_2^2$ '\np[2].label = 'electron density $r^2 \\phi_2^2$ '\np[0].line_color = colorlist[0]\np[1].line_color = 'blue'\np[2].line_color = 'green'\np.show()\n# print energy result\ndisplay(Math(' \\epsilon_1 \\; for \\; \\phi_1  = {0} '.format(format(es[0].real, '0.3f'))))\ndisplay(Math(' \\epsilon_2 \\; for \\; \\phi_2 = {0} '.format(format(es[1].real, '0.3f'))))\ndisplay(Math(' \\epsilon_3 \\; for \\; \\phi_3 = {0} '.format(format(ep[0].real, '0.3f'))))\ndisplay(Math(' Hartree \\ Fork \\; atom \\; energy = {0} \\ hartree = {1} \\ eV'.format(format(scf_H, '0.5f'),\n                                                                                   format(scf_H * 27.211, '0.5f'))))\n\n##############################################print information above#################################################\n\nfor i in range(10):\n    print('-' * 30, \"Iteration\", i + 1, '-' * 30)\n    if (i == 0):\n        print('-' * 7, \"Iteration 1 needs more time to caculate Repulsion Integral\", '-' * 6)\n        start = time.time()\n        Jss = J_matrix(zetas, zetas, 0)\n        Kss = K_matrix(zetas, zetas, 0)\n        Jsp = J_matrix(zetas, zetap, 0)\n        Ksp = 1 \/ 3 * K_matrix(zetas, zetap, 1)\n        Jps = J_matrix(zetap, zetas, 0)\n        Kps = 1 \/ 3 * K_matrix(zetap, zetas, 1)\n        Jpp = J_matrix(zetap, zetap, 0) + 2 \/ 25 * J_matrix(zetap, zetap, 2)  # 1\/25 for minimum\n        Kpp = 1 \/ 5 * K_matrix(zetap, zetap, 2)  # 6\/25 for minimum\n\n    else:\n        start = time.time()\n    Fs = Fs_matrix(fs, Z, Cos, Cop, Jss, Kss, Jsp, Ksp)\n    Fp = Fp_matrix(fp, Z, Cos, Cop, Jpp, Kpp, Jps, Kps)\n    S = S_matrix(fs)\n    es, Cos = secular_eqn(Fs, Ss)\n    ep, Cop = secular_eqn(Fp, Sp)\n    Ps = Ps_matrix(Cos)\n    Pp = Pp_matrix(Cop)\n    scf_H = get_E0(es, ep, Ps, Pp, Hs, Hp)\n    ##########################################print information below#################################################\n    # print information\n    display(Math(\n        '\\zeta_1 = {0} \\quad \\zeta_2 = {1} \\quad \\zeta_3 = {2} \\quad \\zeta_4 = {3} \\quad \\zeta_5 = {4} \\quad \\zeta_6 = {5}'.format(\n            format(zetas[0][0], '0.3f'), format(zetas[1][0], '0.3f'), format(zetas[2][0], '0.3f'),\n            format(zetas[3][0], '0.3f'), format(zetap[0][0], '0.3f'), format(zetap[1][0], '0.3f'))))\n    display(Math('Orbitals:'))\n    display(Math(' \\phi_1s = c_{11} \\chi_1 + c_{21} \\chi_2 + c_{31} \\chi_3 + c_{41} \\chi_4'))\n    display(Math(' \\phi_2s = c_{12} \\chi_1 + c_{22} \\chi_2 + c_{32} \\chi_3 + c_{42} \\chi_4'))\n    display(Math(' \\phi_2p = c_{52} \\chi_5 + c_{62} \\chi_6'))\n    display(Math('c11 = {0} \\quad c21 = {1} \\quad c31 = {2} \\quad c41 = {3}'.format(format(Cos[0][0], '0.3f'),\n                                                                                    format(Cos[1][0], '0.3f'),\n                                                                                    format(Cos[2][0], '0.3f'),\n                                                                                    format(Cos[3][0], '0.3f'))))\n    display(Math('c12 = {0} \\quad c22 = {1} \\quad c32 = {2} \\quad c42 = {3}'.format(format(Cos[0][1], '0.3f'),\n                                                                                    format(Cos[1][1], '0.3f'),\n                                                                                    format(Cos[2][1], '0.3f'),\n                                                                                    format(Cos[3][1], '0.3f'))))\n    display(Math('c52 = {0} \\quad c62 = {1}'.format(format(Cop[0][0], '0.3f'), format(Cop[1][0], '0.3f'))))\n    # plot density graph\n    phi1 = Cos[0, 0] * fs1 + Cos[1, 0] * fs2 + Cos[2, 0] * fs3 + Cos[3, 0] * fs4\n    phi2 = Cos[0, 1] * fs1 + Cos[1, 1] * fs2 + Cos[2, 1] * fs3 + Cos[3, 1] * fs4\n    phi3 = Cop[0, 0] * fp1 + Cop[1, 0] * fp2\n    density_1 = phi1 * phi1 * r * r\n    density_2 = phi2 * phi2 * r * r\n    density_3 = phi3 * phi3 * r * r\n    p = plot((density_1, (r, 0, 5)), (density_2, (r, 0, 5)), (density_3, (r, 0, 5)), show=False)\n    p[0].label = 'electron density $r^2 \\phi_1^2$ '\n    p[1].label = 'electron density $r^2 \\phi_2^2$ '\n    p[2].label = 'electron density $r^2 \\phi_2^2$ '\n    p[0].line_color = colorlist[0]\n    p[1].line_color = 'blue'\n    p[2].line_color = 'green'\n    p.show()\n    # print energy result\n    display(Math(' \\epsilon_1 \\; for \\; \\phi_1  = {0} '.format(format(es[0].real, '0.3f'))))\n    display(Math(' \\epsilon_2 \\; for \\; \\phi_2 = {0} '.format(format(es[1].real, '0.3f'))))\n    display(Math(' \\epsilon_3 \\; for \\; \\phi_3 = {0} '.format(format(ep[0].real, '0.3f'))))\n    display(Math(' Hartree \\ Fork \\; atom \\; energy = {0} \\ hartree = {1} \\ eV'.format(format(scf_H),\n                                                                                       format(scf_H * 27.211, '0.5f'))))\n    stop = time.time()\n    print('Time used:', format(stop - start), 's')\n    ##########################################print information above#################################################","cf368403":"**code here**"}}