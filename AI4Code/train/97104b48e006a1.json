{"cell_type":{"8ac9d7de":"code","ce5903be":"code","0fea010e":"code","878be4a8":"code","18f481cf":"code","3dc0eeea":"code","9c0a2460":"code","d6eb086c":"code","7fdcf2e9":"code","43a52d04":"code","6c59de9e":"code","6279ac92":"code","8d9e8ce5":"code","cd539a5d":"code","349ecfd2":"code","93b46fc2":"code","7a8651c0":"code","906bcfb2":"code","0e9636c1":"code","0ee481a3":"code","ed506a81":"code","201132a7":"code","1c5ba0de":"code","19729405":"code","e0912667":"code","ef393bdf":"code","a598ea99":"code","ba871eee":"code","aa019282":"code","91c6eeeb":"code","62e5c4c2":"code","d17738aa":"code","ec37d60d":"code","9c77d338":"code","2fe86cdf":"code","889da739":"code","07b3187e":"code","dc02ca7c":"code","069fefc0":"code","21b87727":"code","513fbe3f":"code","a91962c7":"code","3b5c41a6":"code","82d9326a":"markdown","5b360b8e":"markdown","593712de":"markdown","b8859f34":"markdown","3ae49ebf":"markdown","a618bd64":"markdown","17afd2fc":"markdown","cf89aa81":"markdown","bcba2d51":"markdown","03c4feed":"markdown","87e1f49a":"markdown","09445ca5":"markdown","7f134166":"markdown"},"source":{"8ac9d7de":"from fastai.tabular import *","ce5903be":"path = Path('..\/input\/titanic')\nw_path = Path('\/kaggle\/working')\npath.ls()","0fea010e":"train = pd.read_csv(path\/'train.csv')\nkaggle_test_df = pd.read_csv(path\/'test.csv')\nlen(train), len(kaggle_test_df)\n","878be4a8":"train.info()","18f481cf":"train.describe()","3dc0eeea":"train.head()","9c0a2460":"plt.hist(train.Pclass)\n","d6eb086c":"train.Age.hist()","7fdcf2e9":"plt.scatter(train['Age'], train['Survived'])","43a52d04":"train['Age'].idxmax()","6c59de9e":"train = train.drop(train['Age'].idxmax())\ntrain.reset_index(drop=True, inplace=True)","6279ac92":"plt.scatter(train['Age'], train['Survived'])","8d9e8ce5":"train = train[train['Fare'] < 400]\ntrain.reset_index(drop=True, inplace=True)","cd539a5d":"plt.scatter(train.Fare, train.Survived)","349ecfd2":"train.Fare.describe()","93b46fc2":"df_all = pd.concat([train, kaggle_test_df], sort=False)\nlen(df_all)","7a8651c0":"fare_med = df_all['Fare'].median()\n\nfor i, fare in enumerate(kaggle_test_df['Fare']):\n  if pd.isna(fare):\n    kaggle_test_df.loc[i, 'Fare'] = fare_med\n","906bcfb2":"age_med = df_all['Age'].median()\n\nfor dfa in [train, kaggle_test_df]:\n  for i, age in enumerate(dfa['Age']):\n    if pd.isna(age):\n      dfa.loc[i, 'Age'] = age_med","0e9636c1":"kaggle_test_df.isna().sum(),train.isna().sum()","0ee481a3":"for dfa in [train, kaggle_test_df]:\n  for i, cabin in enumerate(dfa['Cabin']):\n    if pd.isna(cabin):\n      dfa.loc[i, 'Cabin'] = 0\n    else:\n      dfa.loc[i, 'Cabin'] = 1\n  ","ed506a81":"train['Title'] =  train['Name'].str.split(', ').str[1].str.split('.').str[0]\nkaggle_test_df['Title'] =  kaggle_test_df['Name'].str.split(', ').str[1].str.split('.').str[0]","201132a7":"train.columns","1c5ba0de":"def make_fares(df):\n    fare_intervals = pd.qcut(df['Fare'], 4, labels =['fare_0-8', 'fare_8-14', 'fare_14-31', 'fare_31-263'])\n    fares = pd.get_dummies(fare_intervals, dtype=np.int64)\n    df.drop(['Fare'], inplace=True, axis=1)\n    return pd.concat([df, fares], axis=1)","19729405":"train = make_fares(train)\nkaggle_test_df = make_fares(kaggle_test_df)","e0912667":"def make_rich_fem(df):\n    df['rich_fem'] = 0\n    index = (df['Sex'] == 'female') & ((df['fare_31-263'] == 1) | df['Pclass'] == 1)\n    df.loc[index, 'rich_fem'] = 1\n    return df","ef393bdf":"train = make_rich_fem(train)\nkaggle_test_df = make_rich_fem(kaggle_test_df)","a598ea99":"plt.matshow(train.corr())\nplt.show()","ba871eee":"corr = train.corr()\ncorr.style.background_gradient(cmap='coolwarm')","aa019282":"train.head()","91c6eeeb":"kaggle_test_df.head()","62e5c4c2":"train.drop(['Name', 'Ticket'], inplace=True, axis=1)\nkaggle_test_df.drop(['Name', 'Ticket'], inplace=True, axis=1)","d17738aa":"train.head()\ntrain.info()","ec37d60d":"dep_var = 'Survived'\ncat_names = ['Sex', 'Pclass', 'Cabin', 'SibSp', 'Parch', 'Embarked', 'Title', 'fare_0-8', 'fare_8-14', 'fare_14-31','fare_31-263', 'rich_fem']\ncont_names = ['Age']\nprocs = [FillMissing, Categorify, Normalize]","9c77d338":"test = TabularList.from_df(train.iloc[600:800].copy(), path=w_path, cat_names=cat_names, cont_names=cont_names)","2fe86cdf":"test = TabularList.from_df(kaggle_test_df, path=w_path, cat_names=cat_names, cont_names=cont_names)","889da739":"data = (TabularList.from_df(train, path=w_path, cat_names=cat_names, cont_names=cont_names, procs=procs)\n                           #.split_by_idx(list(range(600,800)))\n                           .split_none()\n                           .label_from_df(cols=dep_var)\n                           .add_test(test)\n                           .databunch())","07b3187e":"data.show_batch(rows=10)","dc02ca7c":"learn.destroy()","069fefc0":"learn = tabular_learner(data, layers=[200,100], ps=[0.01, 0.1], emb_drop=0.2, metrics=accuracy)","21b87727":"learn.lr_find()\nlearn.recorder.plot()","513fbe3f":"learn.fit(2, 1e-2)","a91962c7":"learn.recorder.plot_losses()","3b5c41a6":"predictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)\n\n\nsub_df = pd.DataFrame({'PassengerId': kaggle_test_df['PassengerId'], 'Survived': labels})\nsub_df.to_csv(w_path\/'submission_6_rfem.csv', index=False)","82d9326a":"Divide fare into 3-4 groups and create hot one encoding.\n\nTODO: Look at sex, pclass, something? and survival rate. These correlate om some way and maybe I can Create a feature of it. \u00a0","5b360b8e":"Replace N\/A with median for fare in test. Train contains no N\/A.","593712de":"# Export","b8859f34":"> **Extract titel from Name**","3ae49ebf":"**Merge train och test**\n\nto calculate fare median","a618bd64":"**Remove outlier from Fare i train**","17afd2fc":"**remove Age outlier in train**\n\nidmax = index in train for max-value","cf89aa81":"## Intro \nThis kernel is based on a kernel that I unfortunately can't find again, and therefor can not give its well earned credit. Sorry about that. \n\nBecause the dataset is small, all data is used in the final fitting of the model. During development uncomment\/comment the proper lines when creating the databunches to get some metrics to keep you on track. \nI encourage you to keep experimenting and try more feature engineering to make the model perform even better. Good luck! ","bcba2d51":"**Replace NA in cabin with 0, else 1**","03c4feed":"## Create databunch","87e1f49a":"## Explore data","09445ca5":"# Setup","7f134166":"> **Replace NA in Age with age median**"}}