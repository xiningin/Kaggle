{"cell_type":{"6f5df9f4":"code","8f21eaf8":"code","2d1e9fa5":"code","5f50c9bd":"code","f868daf0":"code","21eb8678":"code","7a4c60f7":"code","42669f4c":"code","5eaa0c01":"code","ac922727":"code","8a90b370":"code","1da07210":"code","c4517618":"code","210caf6a":"code","e0bf893b":"code","09bb8186":"code","01f60cba":"code","a016bb23":"code","f23de0c0":"code","67e0c174":"code","524f4d05":"code","ca87952a":"code","49e54f93":"code","69b6b63a":"code","fe54dc06":"code","e8a6cf51":"code","f9923f6a":"code","08539761":"code","81daaac6":"code","45b78aa9":"code","6e08f415":"code","d27944a1":"code","bf81ed7e":"code","eab3b94c":"markdown","a167dba7":"markdown","3b6cdcef":"markdown","0e4b22d5":"markdown"},"source":{"6f5df9f4":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8f21eaf8":"# !python3.7 -m pip install --upgrade pip\n# !pip install --upgrade transformers\n!pip install datasets\n!pip install --upgrade seaborn","2d1e9fa5":"import os\nimport seaborn as sns\nimport numpy as np\nimport random\nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom collections import namedtuple  \nimport plotly.express as px\nimport transformers\nimport tokenizers\nimport datetime\nimport time\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support, matthews_corrcoef\nimport tensorflow\n\nfrom datasets import load_dataset\nimport torch\nfrom torch import nn\nfrom transformers import BertTokenizer, AutoTokenizer, TrainingArguments, AutoModel, AutoModelForSequenceClassification\nfrom torch.utils.data import TensorDataset, random_split\nfrom torch.utils.data import DataLoader, RandomSampler, SequentialSampler\nfrom transformers import BertForSequenceClassification, AdamW, BertConfig\nfrom transformers import get_linear_schedule_with_warmup\nfrom transformers import RobertaTokenizer, RobertaForSequenceClassification, XLMRobertaModel","5f50c9bd":"mnli = load_dataset('glue', 'mnli')\nlen (mnli)","f868daf0":"xnli = load_dataset ('xnli', 'all_languages')\n# xnli   = load_dataset ('xnli')\nlen (xnli)","21eb8678":"# snli doesn't gives good accuracy, hence ignoring this\n# snli = load_dataset('snli')\n# len (snli)","7a4c60f7":"# shuffle and randomly sample 25% as dev\/valid and rest 75% as train\noriginal_train_df = pd.read_csv (\"..\/input\/contradictory-my-dear-watson\/train.csv\")\noriginal_train_df = shuffle (original_train_df)\nprint (original_train_df.shape)\noriginal_valid_df = original_train_df[:len(original_train_df)\/\/2]\noriginal_train_df = original_train_df[(len(original_train_df)\/\/2):]\nprint (original_train_df.shape, original_valid_df.shape)\noriginal_train_df.head()","42669f4c":"original_test_df = pd.read_csv(\"..\/input\/contradictory-my-dear-watson\/test.csv\")\noriginal_test_df.shape","5eaa0c01":"bert_model_name = 'joeddav\/xlm-roberta-large-xnli'   # 'xlm-roberta-large'\nmax_len         = 128\ntokenizer       = AutoTokenizer.from_pretrained (bert_model_name)","ac922727":"def encode (premise, hypothesis, label):\n    \n    encoded_dict = tokenizer (\n                        premise,                   # 1st of the Sentence pair to encode.\n                        hypothesis,                # 2nd of the Sentence pair to encode. \n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        truncation=True,           # just max_len will not automatically truncate\n                        max_length = max_len,      # Pad & truncate all sentences.\n                        padding='max_length',\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n    ) \n    # print ('encoded_dict =', encoded_dict)\n    # 1-D tensors are expected for a sample. Hence squeeze these 2-D tensors e.g [1,256] shaped tensors to 1-D [256] shape \n    for k in encoded_dict:\n        encoded_dict[k] = torch.squeeze (encoded_dict[k])\n    encoded_dict['labels'] = label\n    # encoded_dict['lang'] = lang\n    return encoded_dict","8a90b370":"def _get_features(elt):\n    '''\n    Args:\n        elt: elements of a `nlp.arrow_dataset.Dataset` that we have seen above\n    \n    Yields: tuples of 3 elements: (premise, hypothesis, language)\n    '''\n\n    if type (elt) == pd.core.series.Series:\n        yield (elt['premise'], elt['hypothesis'], elt['lang_abv'])\n    \n    elif type (elt['premise']) == str:  \n        yield (elt['premise'], elt['hypothesis'], 'en')\n    \n    elif type (elt) == dict:\n        \n        # dict of strings\n        premises = elt['premise']\n        \n        # dict of lists\n        hypotheses_dict = elt['hypothesis']\n        \n        # lists\n        langs = hypotheses_dict['language']\n        translations = hypotheses_dict['translation']\n        \n        hypotheses = {k: v for k, v in zip (langs, translations)}\n                \n        for lang in elt['premise']:\n            if lang in hypotheses:\n                yield (elt['premise'][lang], hypotheses[lang], lang)\n    return\n        \ndef _get_raw_datasets_from_nlp (ds):\n    \"\"\" From a `ds: nlp.arrow_dataset.Dataset` that we have seen above to a generator of dictionaries with unified format.\n    \n    Yield a dictionary with keys: 'premise', 'hypothesis', 'label', 'lang'\n    \"\"\"\n    \n    for _, elt in enumerate (ds):\n        \n        label = -1\n        if 'label' in elt:\n            label = elt['label']\n        for features in _get_features (elt):    \n            # yield {'premise': features[0], 'hypothesis': features[1], 'label': label, 'lang': features[2]}\n            yield (encode (features[0], features[1], torch.tensor(label))) #, features[2]))\n    return\n            \ndef _get_raw_datasets_from_dataframe (ds: pd.core.frame.DataFrame):\n    \"\"\"\n    ds: pd.core.frame.DataFrame\n    \"\"\"\n    \n    result = []\n    \n    for idx, elt in ds.iterrows ():\n        for features in _get_features (elt):\n            \n            label = -1\n            if 'label' in elt:\n                label= elt['label']            \n            # yield (encode {'premise': features[0], 'hypothesis': features[1], 'label': label, 'lang': features[2]})\n            yield (encode (features[0], features[1], torch.tensor(label))) #, features[2]))\n    return","1da07210":"raw_ds_mapping = {\n    'original train': (_get_raw_datasets_from_dataframe, original_train_df, len(original_train_df)),\n    'original valid': (_get_raw_datasets_from_dataframe, original_valid_df, len(original_valid_df)),\n    # 'snli train'  : (_get_raw_datasets_from_nlp, snli['train'], snli['train'].num_rows),\n    # 'snli valid'  : (_get_raw_datasets_from_nlp, snli['validation'], snli['validation'].num_rows),\n    'mnli train'    : (_get_raw_datasets_from_nlp, mnli['train'], mnli['train'].num_rows),\n    'mnli valid 1'  : (_get_raw_datasets_from_nlp, mnli['validation_matched'], mnli['validation_matched'].num_rows),\n    'mnli valid 2'  : (_get_raw_datasets_from_nlp, mnli['validation_mismatched'], mnli['validation_mismatched'].num_rows),\n    'xnli valid'    : (_get_raw_datasets_from_nlp, xnli['validation'], xnli['validation'].num_rows * 15), # 15 languages\n    'xnli test'     : (_get_raw_datasets_from_nlp, xnli['test'], xnli['test'].num_rows * 15), # 15 languages\n    'original test' : (_get_raw_datasets_from_dataframe, original_test_df, len(original_test_df)),\n}\n\ndef get_raw_dataset (ds_name):\n    \n    fn, ds, nb_examples = raw_ds_mapping[ds_name]\n    for x in fn (ds):\n        yield x\n    return","c4517618":"# sanity check\nfor k in raw_ds_mapping:\n    for idx, x in enumerate (get_raw_dataset (k)):\n        print (x)\n        print (x['input_ids'].shape)\n        if idx >= 0:\n            break","210caf6a":"train_ds_names = ['original train', 'mnli train', 'mnli valid 1', 'mnli valid 2', 'xnli valid', 'xnli test']\neval_ds_names  = ['original valid']\ntest_ds_names  = ['original test']","e0bf893b":"class MyIterableDataset (torch.utils.data.IterableDataset):\n    \n    def __init__(self, ds_names, isLabeledDataset=False):\n        \n        super (MyIterableDataset).__init__()\n        self.ds_names = ds_names\n        self.length   = self.getLen ()\n        self.isLabeledDataset = isLabeledDataset\n        return\n    \n    def getLen (self):\n        \n        length = 0\n        for ds_name in self.ds_names:\n            \n            fn, ds, nb_examples = raw_ds_mapping[ds_name]\n            length += nb_examples\n        return length  # 64\n    \n    def __iter__(self):\n        \n        # junk = 0\n        for ds_name in self.ds_names:\n            \n            fn, ds, nb_examples = raw_ds_mapping[ds_name]\n            for x in fn(ds):\n                # strangely sometimes label is not found i.e label=-1 by default, so filter such instanes\n                if self.isLabeledDataset and x['labels'] == -1:\n                    continue\n                # junk += 1\n                # if junk >=64:\n                #     return\n                yield x\n        return\n    \n    def __len__(self):\n        return self.length","09bb8186":"# total count = 1018941, valid count i.e where label != -1, is = 1017997 i.e 944 bad data records\ntrain_dataset = MyIterableDataset (train_ds_names, True)\n\n# sanity test\n# this will not work since __getitem__() is not implemented in MyIterableDataset\n# print (train_dataset[0])\nfor i, d in enumerate (train_dataset):\n    # print (i, d)\n    if i==0:\n        print (d)\n        break","01f60cba":"# test the train_dataset with dataloader\ndef get_dataLoaders (train_dataset, per_device_train_batch_size=64, epochs=1):        \n    \n    # Create the DataLoaders for our training and validation sets.\n    if isinstance (train_dataset, torch.utils.data.IterableDataset):\n        train_sampler = None\n    else:\n        train_sampler = SequentialSampler (train_dataset)\n\n    train_dataloader = DataLoader (\n                train_dataset,  # The training samples.\n                sampler = train_sampler,\n                batch_size = per_device_train_batch_size  # Trains with this batch size.\n    )\n    return train_dataloader\n\ndef test_iterate_dataloader (train_dataloader):\n\n    for step, batch in enumerate (train_dataloader):\n        print (step, batch)\n    return\n\n# train_dataloader = get_dataLoaders (train_dataset)\n# test_iterate_dataloader (train_dataloader)","a016bb23":"# create a custom map type dataset\nclass My_Dataset (torch.utils.data.Dataset):\n    \n    def __init__(self, encodings, labels):\n        \n        self.encodings = encodings\n        self.labels = labels\n        return\n\n    def __getitem__(self, idx):\n        \n        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\n        if self.labels is not None and len (self.labels)>0:\n            item['labels'] = self.labels[idx]\n        return item\n\n    def __len__(self):\n        return len(self.labels)","f23de0c0":"def get_mapType_Dataset (ds_names, isLabeledDataset):\n    \n    # test\/eval dataset is not supposed to be infinite i.e generator\/iterable dataset. \n    # It has to be an ordinary dataset which is based on a sampler. Hence, convert to an ordinary dataset\n    input_ids          = []\n    # token_type_ids   = []\n    attention_mask     = []\n    labels             = []\n    lang               = []\n    dataset_iter  = MyIterableDataset (ds_names, isLabeledDataset)\n    for encoded_dict in dataset_iter:\n        \n        input_ids.append (encoded_dict['input_ids'])\n        # token_type_ids.append (encoded_dict['token_type_ids'])\n        attention_mask.append (encoded_dict['attention_mask'])\n        labels.append (encoded_dict['labels'])\n        # lang.append (encoded_dict['lang'])\n\n    # Combine the training inputs into a TensorDataset. This arranges a row as a tuple of tensors.\n    # Convert the lists into tensors.\n    # input_ids = torch.cat (input_ids, dim=0)\n    # attention_mask = torch.cat (attention_mask, dim=0)\n    # token_type_ids = torch.cat (token_type_ids, dim=0)\n    # label = torch.tensor (label)\n    # But this works only in manually training the model because then you assign each element of the tuple \n    # to the corresponding model params. In the trainer you need to assign your custom map type dataset\n    # my_dataset = TensorDataset (input_ids, attention_mask, token_type_ids, label)\n    \n    encodings  = {'input_ids':input_ids, 'attention_mask':attention_mask}\n    my_dataset = My_Dataset (encodings,  labels)\n    return my_dataset","67e0c174":"eval_dataset = get_mapType_Dataset (eval_ds_names, True)\ntest_dataset = get_mapType_Dataset (test_ds_names, False)","524f4d05":"len (train_dataset), len (eval_dataset), len (test_dataset), isinstance (train_dataset, torch.utils.data.IterableDataset), isinstance (test_dataset, torch.utils.data.IterableDataset)","ca87952a":"# sanity test\nfor i, row in enumerate (test_dataset):\n    print (row)\n    if i >=0:\n        break","49e54f93":"def save_my_model_and_tokenizer (model, tokenizer=None, output_dir='.\/model_save\/'):\n    \"\"\"\n    to load the saved model just do: \n    model     = BertForSequenceClassification.from_pretrained (output_dir)\n    tokenizer = BertTokenizer.from_pretrained (output_dir, do_lower_case=False)\n    \"\"\"\n    \n    model_state_file = output_dir + 'my_model.bin'\n    \n    # Create output directory if needed\n    if not os.path.exists (output_dir):\n        os.makedirs (output_dir)\n\n    print (\"Saving model to %s\" % model_state_file)\n\n    # Save a trained model, configuration and tokenizer using `save_pretrained()`.\n    # They can then be reloaded using `from_pretrained()`\n    model.cpu ()\n    state = model.state_dict ()    \n    torch.save (state, model_state_file) \n    if tokenizer is not None:\n        tokenizer.save_pretrained (output_dir)\n    model.cuda ()\n    \n    # Good practice: save your training arguments together with the trained model\n    # torch.save(args, os.path.join(output_dir, 'training_args.bin'))\n    return","69b6b63a":"def load_model (bert_model_name, output_dir='.\/model_save\/'):\n    \n    model_state_file = output_dir + 'my_model.bin'\n    model            = MyGAPModelForSeqClf (bert_model_name)    \n    state            = torch.load (model_state_file)\n    model.load_state_dict (state)\n    return model","fe54dc06":"def format_time (elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    \n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str (datetime.timedelta (seconds=elapsed_rounded))","e8a6cf51":"def compute_metrics (labels, pred_logits):\n    \n    preds = pred_logits.argmax (-1)\n    precision, recall, f1, _ = precision_recall_fscore_support (labels, preds, average='macro')\n    acc = accuracy_score (labels, preds)\n    mcc = matthews_corrcoef (labels, preds)        # matthews correlation coefficient\n    metrics = {\n        'mcc': mcc,\n        'accuracy': acc,\n        'f1': f1,\n        'precision': precision,\n        'recall': recall\n    }\n    return metrics","f9923f6a":"class MyTrainer:\n    \n    def __init__(self, model, args, train_dataset, eval_dataset, tokenizer, compute_metrics=compute_metrics):\n        \n        self.model           = model\n        self.args            = args\n        self.train_dataset   = train_dataset\n        self.eval_dataset    = eval_dataset\n        self.tokenizer       = tokenizer\n        self.compute_metrics = compute_metrics\n        self.isTrained       = False\n        self.device          = self.get_device_type ()\n        \n        # Note: AdamW is a class from the huggingface library (as opposed to pytorch) \n        # I believe the 'W' stands for 'Weight Decay fix\"\n        self.optimizer = AdamW (model.parameters (),\n                           lr  = args.learning_rate,\n                           eps = args.adam_epsilon # args.adam_epsilon  - default is 1e-8 is \u201ca very small number to prevent any division by zero\"\n        )\n\n        # Number of training epochs. The BERT authors recommend between 2 and 4. \n        # We chose to run for 4, but we'll see later that this may be over-fitting the\n        # training data.\n        self.epochs = self.args.num_train_epochs\n        self.train_dataloader, self.validation_dataloader, self.lr_scheduler, self.num_training_steps = self.get_dataLoaders ()        \n        return\n    \n    def get_device_type (self):\n        \n        # If there's a GPU available...\n        if torch.cuda.is_available ():    \n\n            # Tell PyTorch to use the GPU.    \n            device = torch.device (\"cuda\")\n\n            print('There are %d GPU(s) available.' % torch.cuda.device_count ())\n\n            print('We will use the GPU:', torch.cuda.get_device_name(0))\n        # If not...\n        else:\n            print('No GPU available, using the CPU instead.')\n            device = torch.device (\"cpu\")\n        return device\n    \n    def get_dataLoaders (self):        \n        \n        # Create the DataLoaders for our training and validation sets.\n        if isinstance (self.train_dataset, torch.utils.data.IterableDataset):\n            train_sampler = None\n        else:\n            train_sampler = SequentialSampler (self.train_dataset)\n        train_dataloader = DataLoader (\n                    self.train_dataset,  # The training samples.\n                    sampler = train_sampler,\n                    batch_size = self.args.per_device_train_batch_size  # Trains with this batch size.\n        )\n        \n        # For validation the order doesn't matter, so we'll just read them sequentially.\n        validation_dataloader = DataLoader (\n                    self.eval_dataset,             # The validation\/dev samples.\n                    sampler = SequentialSampler (self.eval_dataset),\n                    batch_size = self.args.per_device_eval_batch_size  # Evaluate with this batch size.\n        )\n        \n        # Total number of training steps is [number of batches] x [number of epochs]. \n        # (Note that this is not the same as the number of training samples).\n        num_training_steps = len (train_dataloader) * self.epochs\n\n        # Create the learning rate scheduler.\n        lr_scheduler = get_linear_schedule_with_warmup (self.optimizer, \n                                                        num_warmup_steps   = self.args.warmup_steps, # Default value in run_glue.py = 0\n                                                        num_training_steps = num_training_steps)\n        return train_dataloader, validation_dataloader, lr_scheduler, num_training_steps\n    \n    \n    def test_iterate_dataloader ():\n        \n        for step, batch in enumerate (self.train_dataloader):\n            print (step, batch)\n        return\n    \n    \n    def train (self, is_train_base_encoding_model=True):\n        \n        # for tuning only the outer classifier layar and not the base bert encoding layer\n        if is_train_base_encoding_model:\n            self.model.unfreez ()\n        else:\n            self.model.freez ()\n        \n        # This training code is based on the `run_glue.py` script here:\n        # https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128\n\n        # Set the seed value all over the place to make this reproducible.\n        seed_val = 42\n        random.seed (seed_val)\n        np.random.seed (seed_val)\n        torch.manual_seed (seed_val)\n        torch.cuda.manual_seed_all (seed_val)\n\n        # We'll store a number of quantities such as training and validation loss, \n        # validation accuracy, and timings.\n        training_stats = []\n        # Measure the total training time for the whole run.\n        total_t0 = time.time ()\n        # inint min_val_loss to a large val, if after each epoch eval-loss < min_val_loss, then save the model\n        min_val_loss = 99999999\n        \n        # For each epoch...\n        for epoch_i in range (0, self.epochs):\n\n            # ========================================\n            #               Training\n            # ========================================\n\n            # Perform one full pass over the training set.\n\n            print(\"\")\n            print('======== Epoch {:} \/ {:} ========'.format (epoch_i + 1, self.epochs))\n            print('Training...')\n\n            # Measure how long the training epoch takes.\n            t0 = time.time ()\n\n            # Reset the total loss for this epoch.\n            total_train_loss = 0\n\n            # Put the model into training mode. Don't be mislead--the call to \n            # `train` just changes the *mode*, it doesn't *perform* the training.\n            # `dropout` and `batchnorm` layers behave differently during training\n            # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-model-train-do-in-pytorch)\n            self.model.train ()\n\n            # For each batch of training data...\n            for step, batch in enumerate (self.train_dataloader):\n\n                # Progress update every 40 batches.\n                # print ('batch =', batch)\n                if step % 50 == 0 and not step == 0:\n                    \n                    # Calculate elapsed time in minutes.\n                    elapsed = format_time (time.time() - t0)\n                    # Report progress.\n                    print ('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len (self.train_dataloader), elapsed))\n                if (self.args.max_steps > 0 and self.args.max_steps < step) or  \\\n                   (is_train_base_encoding_model and self.args.eval_steps>0 and step % self.args.eval_steps==0 and step>0):\n                    \n                    avg_train_loss = total_train_loss \/ step\n                    training_time = format_time (time.time () - t0)\n                    print (\"Running Validation...\")\n                    avg_val_loss, avg_val_f1, avg_val_mcc, avg_val_precision, avg_val_recall, avg_val_accuracy, validation_time = self.evaluate ()\n                    training_stats.append ({\n                            'epoch'         : epoch_i + 1,\n                            'training_loss' : avg_train_loss,\n                            'eval_loss'     : avg_val_loss,\n                            'eval_f1'       : avg_val_f1,\n                            'eval_mcc'      : avg_val_mcc, \n                            'eval_precision': avg_val_precision,\n                            'eval_recall'   : avg_val_recall,\n                            'eval_accuracy' : avg_val_accuracy,\n                            'training_time' : training_time,\n                            'eval_time'     : validation_time                   \n                    })\n                    # save this model if the eval loss decreases from the minimum so far\n                    if avg_val_loss < min_val_loss: \n\n                        min_val_loss = avg_val_loss\n                        save_my_model_and_tokenizer (self.model, self.tokenizer, output_dir='.\/model_save\/')\n                    if self.args.max_steps > 0 and self.args.max_steps < step:\n                        \n                        return training_stats\n                # Unpack this training batch from our dataloader. \n                #\n                # As we unpack the batch, we'll also copy each tensor to the GPU using the \n                # `to` method.\n                #\n                # `batch` contains four pytorch tensors:\n                #   [0]: input ids \n                #   [1]: attention masks\n                #   [2]: segment_ids\n                #   [3]: labels \n                # b_input_ids = batch[0].to(device)\n                # b_input_mask = batch[1].to(device)\n                # b_segment_ids = batch[2].to(device)\n                # b_labels = batch[3].to(device)\n\n                # Always clear any previously calculated gradients before performing a\n                # backward pass. PyTorch doesn't do this automatically because \n                # accumulating the gradients is \"convenient while training RNNs\". \n                # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n                self.model.zero_grad ()        \n\n                # Perform a forward pass (evaluate the model on this training batch).\n                # The documentation for this `model` function is here: \n                # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n                # It returns different numbers of parameters depending on what arguments\n                # arge given and what flags are set. For our useage here, it returns\n                # the loss (because we provided labels) and the \"logits\"--the model\n                # outputs prior to activation.\n                # loss, logits = self.model (b_input_ids, \n                #                            token_type_ids=b_segment_ids, \n                #                            attention_mask=b_input_mask, \n                #                            labels=b_labels)\n                for k in batch:\n                    batch[k] = batch[k].to (self.device)\n                output = self.model (**batch)\n                loss   = output.loss\n                logits = output.logits                  #;print (output); print (logits.shape); return\n                \n                # Accumulate the training loss over all of the batches so that we can\n                # calculate the average loss at the end. `loss` is a Tensor containing a\n                # single value; the `.item()` function just returns the Python value \n                # from the tensor.\n                total_train_loss += loss.item ()\n\n                # Perform a backward pass to calculate the gradients.\n                loss.backward ()\n\n                # Clip the norm of the gradients to 1.0.\n                # This is to help prevent the \"exploding gradients\" problem.\n                torch.nn.utils.clip_grad_norm_(self.model.parameters(), 1.0)\n\n                # Update parameters and take a step using the computed gradient.\n                # The optimizer dictates the \"update rule\"--how the parameters are\n                # modified based on their gradients, the learning rate, etc.\n                self.optimizer.step ()\n\n                # Update the learning rate.\n                self.lr_scheduler.step ()\n                \n            # if not is_train_base_encoding_model or self.args.eval_steps <= 0:                \n            # Calculate the average loss over all of the batches.\n            avg_train_loss = total_train_loss \/ len (self.train_dataloader)\n            # Measure how long this epoch took.\n            training_time = format_time (time.time () - t0)            \n            print(\"  Average training loss: {0:.2f}\".format (avg_train_loss))\n            print(\"  Training epcoh took: {:}\".format (training_time))\n            # At the end of each epoch measure stats and eval:\n            print (\"\\n  Running Validation...\")\n            avg_val_loss, avg_val_f1, avg_val_mcc, avg_val_precision, avg_val_recall, avg_val_accuracy, validation_time = self.evaluate ()\n            # Record all statistics from this epoch.\n            training_stats.append ({\n                    'epoch'         : epoch_i + 1,\n                    'training_loss' : avg_train_loss,\n                    'eval_loss'     : avg_val_loss,\n                    'eval_f1'       : avg_val_f1,\n                    'eval_mcc'      : avg_val_mcc, \n                    'eval_precision': avg_val_precision,\n                    'eval_recall'   : avg_val_recall,\n                    'eval_accuracy' : avg_val_accuracy,\n                    'training_time' : training_time,\n                    'eval_time'     : validation_time                   \n            })\n            # save this epoch's model if the eval loss decreases from the minimum so far\n            if avg_val_loss < min_val_loss: \n\n                min_val_loss = avg_val_loss\n                save_my_model_and_tokenizer (self.model, self.tokenizer, output_dir='.\/model_save\/')\n        \n        print (\"\")\n        print (\"Training complete!\")\n        print (\"Total training took {:} (h:mm:ss)\".format (format_time (time.time ()-total_t0)))\n        self.isTrained = True\n        self.plot_train_stats (training_stats)\n        return training_stats\n    \n    def evaluate (self):\n        \n        t0 = time.time ()\n        # Put the model in evaluation mode--the dropout layers behave differently\n        # during evaluation.\n        self.model.eval ()\n\n        # Tracking variables \n        total_eval_mcc       = 0\n        total_eval_f1        = 0\n        total_eval_precision = 0\n        total_eval_recall    = 0\n        total_eval_accuracy  = 0\n        total_eval_loss      = 0\n        nb_eval_steps        = 0\n\n        # Evaluate data for one epoch\n        for batch in self.validation_dataloader:\n\n            # Unpack this training batch from our dataloader. \n            #\n            # As we unpack the batch, we'll also copy each tensor to the GPU using \n            # the `to` method.\n            #\n            # `batch` contains four pytorch tensors:\n            #   [0]: input ids \n            #   [1]: attention masks\n            #   [2]: segment_ids\n            #   [3]: labels \n            # b_input_ids = batch[0].to (device)\n            # b_input_mask = batch[1].to (device)\n            # b_segment_ids = batch[2].to (device)\n            # b_labels = batch[3].to (device)\n\n            # Tell pytorch not to bother with constructing the compute graph during\n            # the forward pass, since this is only needed for backprop (training).\n            with torch.no_grad ():        \n\n                # Forward pass, calculate logit predictions.\n                # token_type_ids is the same as the \"segment ids\", which \n                # differentiates sentence 1 and 2 in 2-sentence tasks.\n                # The documentation for this `model` function is here: \n                # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n                # Get the \"logits\" output by the model. The \"logits\" are the output\n                # values prior to applying an activation function like the softmax.\n                # output = self.model (b_input_ids, \n                #                      token_type_ids=b_segment_ids, \n                #                      attention_mask=b_input_mask,\n                #                      labels=b_labels)\n                for k in batch:\n                    batch[k] = batch[k].to (self.device)\n                output = self.model (**batch)\n                loss   = output.loss\n                logits = output.logits\n\n            # Accumulate the validation loss.\n            total_eval_loss += loss.item ()\n\n            # Move logits and labels to CPU\n            logits    = logits.detach ().cpu ().numpy ()\n            label_ids = batch['labels'].to ('cpu').numpy ()\n\n            # Calculate the accuracy for this batch of test sentences, and\n            # accumulate it over all batches.\n            metrics = self.compute_metrics (label_ids, logits)\n            total_eval_mcc       += metrics['mcc']\n            total_eval_f1        += metrics['f1']\n            total_eval_precision += metrics['precision']\n            total_eval_recall    += metrics['recall']\n            total_eval_accuracy  += metrics['accuracy']\n\n\n        # Report the final accuracy for this validation run.\n        avg_val_f1 = total_eval_f1 \/ len (self.validation_dataloader)\n        print (\"  F1: {0:.3f}\".format (avg_val_f1))\n        avg_val_mcc = total_eval_mcc \/ len (self.validation_dataloader)\n        print (\"  MCC: {0:.3f}\".format (avg_val_mcc))\n        avg_val_precision = total_eval_precision \/ len (self.validation_dataloader)\n        print (\"  Precision: {0:.3f}\".format (avg_val_precision))\n        avg_val_recall = total_eval_recall \/ len (self.validation_dataloader)\n        print (\"  Recall: {0:.3f}\".format (avg_val_recall))\n        avg_val_accuracy = total_eval_accuracy \/ len (self.validation_dataloader)\n        print (\"  Accuracy: {0:.3f}\".format (avg_val_accuracy))\n        # Calculate the average loss over all of the batches.\n        avg_val_loss = total_eval_loss \/ len (self.validation_dataloader)\n        # Measure how long the validation run took.\n        validation_time = format_time (time.time () - t0)\n        print (\"  Validation Loss: {0:.2f}\".format (avg_val_loss))\n        print (\"  Validation took: {:}\".format (validation_time))            \n        return avg_val_loss, avg_val_f1, avg_val_mcc, avg_val_precision, avg_val_recall, avg_val_accuracy, validation_time\n    \n    def plot_train_stats (self, training_stats):\n        \n        # Classification Report curve\n        mccs       = [e['eval_mcc'] for e in training_stats]\n        accuracies = [e['eval_accuracy'] for e in training_stats]\n        f1_scores  = [e['eval_f1'] for e in training_stats]\n        precisions = [e['eval_precision'] for e in training_stats]\n        recalls    = [e['eval_recall'] for e in training_stats]\n        losses     = [e['eval_loss'] for e in training_stats]\n        epochs     = training_stats[-1]['epoch']\n\n        print ('mccs:',       mccs)\n        print ('accuracies:', accuracies)\n        print ('precisions:', precisions)\n        print ('recalls:',    recalls)\n        print ('f1_scores:',  f1_scores)\n        print ('losses:',     losses)\n\n        sns.lineplot (x=np.arange(1, epochs + 1), y=mccs,       label='val_mcc')\n        sns.lineplot (x=np.arange(1, epochs + 1), y=accuracies, label='val_accuracy')\n        sns.lineplot (x=np.arange(1, epochs + 1), y=precisions, label='val_precision')\n        sns.lineplot (x=np.arange(1, epochs + 1), y=recalls,    label='val_recall')\n        sns.lineplot (x=np.arange(1, epochs + 1), y=f1_scores,  label='val_f1') \n        plt.show ()\n        return\n    \n    \n    def getTrainedModel (self):\n        \n        if self.isTrained:\n            return self.model\n        return None\n    \n    \n    def predict (self, prediction_dataset, isRemoveLabels=True):\n        \"\"\"\n        return: pred_logits, true_labels, metrics (if true 'labels' are input in the prediction_dataset)\n        \"\"\"     \n        \n        prediction_sampler    = SequentialSampler (prediction_dataset)\n        prediction_dataloader = DataLoader (prediction_dataset, sampler=prediction_sampler, batch_size=self.args.per_device_eval_batch_size)\n        print ('Predicting labels for {:,} test sentences...'.format (len (prediction_dataset)))\n        \n        # Put model in evaluation mode\n        self.model.eval ()\n\n        # Tracking variables \n        predictions = []\n        # true_labels = []\n        \n        # Predict \n        for batch in prediction_dataloader:\n            \n            # Add batch to GPU\n            batch = {t:batch[t].to (self.device) for t in batch}\n\n            # Unpack the inputs from our dataloader\n            # b_input_ids, b_input_mask, b_segment_ids = batch\n\n            # Telling the model not to compute or store gradients, saving memory and \n            # speeding up prediction\n            with torch.no_grad ():\n                # Forward pass, calculate logit predictions\n                if isRemoveLabels:\n                    batch.pop ('labels')\n                for k in batch:\n                    batch[k] = batch[k].to (self.device)\n                outputs = model (**batch)\n            logits = outputs[0]\n            # logits = outputs.logits\n\n            # Move logits and labels to CPU\n            logits = logits.detach ().cpu ().numpy ()\n            # label_ids = b_labels.to ('cpu').numpy ()\n\n            # Store predictions and true labels\n            predictions.append (logits)\n            # true_labels.append (label_ids)\n            print ('Done predictions for ', len(predictions), '\/', len(prediction_dataloader), 'batches')\n        print ('Done prediction')\n        \n        # Combine the results across all batches to get the predicted logits\n        pred_logits = np.concatenate (predictions, axis=0)\n        # For each sample, pick the label (0,1,2) with the highest score.\n        # pred_labels = np.argmax (pred_logits, axis=1).flatten()\n        # returns the predicted logits\n        return pred_logits, None, None","08539761":"class MyGAPModelForSeqClf (nn.Module):\n    \n    def __init__(self, bert_model_name, outputCount=3, drop_prob=0.1, nonlin=nn.ReLU ()):\n        \n        super (MyGAPModelForSeqClf, self).__init__()\n        self.model       = AutoModelForSequenceClassification.from_pretrained (bert_model_name).base_model  # adding .base_model if using pretrained XLMRobertaForSequenceClassification\n        self.drop_prob   = drop_prob\n        self.nonlin      = nonlin\n        self.outputCount = outputCount\n        hidden_size      = self.model.config.hidden_size\n        self.dense       = nn.Linear (hidden_size, hidden_size)\n        self.batchnorm   = nn.BatchNorm1d (hidden_size)\n        self.outDense    = nn.Linear (hidden_size, outputCount)\n        self.dropout     = nn.Dropout (drop_prob)\n        self.outActivtn  = nn.LogSoftmax (dim=1)\n        self.NLLLoss     = nn.NLLLoss ()\n        return\n    \n    def freez (self):\n        \n        for param in self.model.base_model.parameters ():\n            param.requires_grad = False\n        return\n    \n    def unfreez (self):\n        \n        for param in self.model.base_model.parameters ():\n            param.requires_grad = True\n        return\n    \n    def forward (self, input_ids, attention_mask, token_type_ids=None, labels=None, **kwargs):\n        \n        last_hidden_states = None\n        \n        # The base bert model do not take labels as input\n        if token_type_ids is None:\n            moutput = self.model (input_ids=input_ids, attention_mask=attention_mask)\n            last_hidden_states = moutput[0]\n        else:\n            moutput = self.model (input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)\n            last_hidden_states = moutput[0]\n        #print('last_hidden_states.size=', last_hidden_states.size())\n        \n        # GAP: last_hidden_states shape = batch_size * max_seq_len * emb_dim(1024?)\n        # output shape = batch_size * emb_dim(1024?)  i.e avg across the sequence\n        last_hidden_states = torch.mean (last_hidden_states, 1)             #;print('GAP last_hidden_states.size=', last_hidden_states.size())\n        # fcnn\n        X = self.dropout (self.nonlin (self.batchnorm (self.dense (last_hidden_states))))        #;print('X.size=', X.size())\n        out_logits = self.outDense (X)                #;print('out_logits.size=', out_logits.size())\n        if labels is None:\n            \n            # return a named tuple\n            Logits = namedtuple ('Logits',['logits'])\n            out_logits = Logits (out_logits)\n            return out_logits\n        log_ps = self.outActivtn (out_logits)         #;print('log_ps.size=', log_ps.size())\n        batchLoss = self.NLLLoss (log_ps, labels)\n        \n        # return a named tuple\n        Loss_Logits = namedtuple('Loss_Logits',['loss','logits'])\n        loss_logits = Loss_Logits (batchLoss, out_logits)\n        return loss_logits","81daaac6":"model = MyGAPModelForSeqClf (bert_model_name)\n\n# load the pretrained model which was trained this code only (by commenting out these 4 line)\ntry:\n    model.load_state_dict (torch.load (\"..\/input\/robertagapxnlimnlirishi\/roberta-gap-xnli-mnli-rishi\/my_model.bin\"))\nexcept:\n    model.load_state_dict (torch.load (\"..\/input\/robertagapxnlimnlirishi\/roberta-gap-xnli-mnli-rishi\/my_model.bin\", map_location='cpu'))\n\n\nimport warnings\nwarnings.filterwarnings (\"ignore\")\n# Tell pytorch to run this model on the GPU.\nmodel.cuda()","45b78aa9":"training_args = TrainingArguments (\n    \n    output_dir='.\/results',          # output directory\n    num_train_epochs=1,              # total # of training epochs\n    warmup_steps=1000,               # for lr scheduling\n    eval_steps=5000,                 # Number of update steps between two evaluations, if <=0 then eval at end of each epoch\n    max_steps=5000,                  # If set to a positive number, the total number of training steps to perform. Overrides num_train_epochs\n    learning_rate=5e-4,              # args.learning_rate - default is 5e-5, our notebook has 2e-5\n    # adam_epsilon=1e-8,             # - default is 1e-8 is \u201ca very small number to prevent any division by zero\"\n    per_device_train_batch_size=16,  # batch size per device during training\n    per_device_eval_batch_size=16,   # batch size for evaluation\n)\n\ntrainer = MyTrainer (\n    \n    model=model,                         # the instantiated \ud83e\udd17 Transformers model to be trained\n    args=training_args,                  # training arguments, defined above\n    train_dataset=train_dataset,         # training dataset\n    eval_dataset=eval_dataset,           # evaluation dataset\n    tokenizer=tokenizer,                 # this is used only to save the tokenizer along with the model during training\n    compute_metrics=compute_metrics,\n)\n\n# training_stats = trainer.train (False)   # To train from scratch, uncomment this line!","6e08f415":"training_args = TrainingArguments (\n    \n    output_dir='.\/results',          # output directory\n    num_train_epochs=1,              # total # of training epochs\n    warmup_steps=1000,               # for lr scheduling\n    eval_steps=5000,                 # Number of update steps between two evaluations, if <=0 then eval at end of each epoch\n    # max_steps=5000,                # If set to a positive number, the total number of training steps to perform. Overrides num_train_epochs\n    learning_rate=1e-5,              # args.learning_rate - default is 5e-5, our notebook has 2e-5\n    # adam_epsilon=1e-8,             # - default is 1e-8 is \u201ca very small number to prevent any division by zero\"\n    per_device_train_batch_size=24,  # batch size per device during training\n    per_device_eval_batch_size=24,   # batch size for evaluation\n)\n\ntrainer = MyTrainer (\n    \n    model=model,                         # the instantiated \ud83e\udd17 Transformers model to be trained\n    args=training_args,                  # training arguments, defined above\n    train_dataset=train_dataset,         # training dataset\n    eval_dataset=eval_dataset,           # evaluation dataset\n    tokenizer=tokenizer,                 # this is used only to save the tokenizer along with the model during training\n    compute_metrics=compute_metrics,\n)\n\ntraining_stats = trainer.train ()      # To train from scratch, uncomment this line!","d27944a1":"predictions, true_labels, metrics_dummy = trainer.predict (test_dataset)\n# The predictions for this batch are a 2-column ndarray (one column for \"0\" \n# and one column for \"1\"). Pick the label with the highest value and turn this\n# in to a list of 0s and 1s.\npred_labels = np.argmax (predictions, axis=1)\npred_labels","bf81ed7e":"submitDF = original_test_df[['id']]\nsubmitDF['prediction'] = pred_labels\nsubmitDF.prediction    = submitDF.prediction.astype (int)\nsubmitDF.to_csv ('submission.csv', index=False)\nsubmitDF.head ()","eab3b94c":"# My Trainer","a167dba7":"# Intro:\n    1. train_dataset of type IterableDataset for streaming data with no sampler. \n    2. Datasets used: mnli + xnli (+ snli: removed it as it gave poor results). These are combined to a common format into train_dataset.\n    3. eval_dataset and test_dataset: map type datasets for random\/sequential sampler\n    4. Error in the automatic Trainer api at the end of eval step throws error <KeyError: 'eval_loss'>\n    5. Hence manually training now\n    6. model = xlm-roberta-large. Fine tune this model on the train_dataset as described above.\n    7. instead of using only the 'CLS' output features, we will do a Global Avg. Pooling of the whole output layer.","3b6cdcef":"# load the saved model\nmodel.cpu()\ndel trainer, model, tokenizer\nmodel     = load_model (bert_model_name)\ntokenizer = RobertaTokenizer.from_pretrained ('.\/model_save\/', do_lower_case=False)\nmodel","0e4b22d5":"# Mount Google Drive to this Notebook instance.\nfrom google.colab import drive\ndrive.mount ('\/content\/drive')\n\n# Copy the model files to a directory in your Google Drive.\n!cp -r .\/model_save\/ \"\/content\/drive\/Shared_Drives\/RishiChandra.ai\/BERT_Fine-Tuning\/\""}}