{"cell_type":{"0d3ce65b":"code","d090f47a":"code","5f5852eb":"code","1a948e49":"code","0399be5c":"code","9b3d45d1":"code","34446de9":"code","3e968b56":"code","94480590":"code","549430fd":"code","1a7dc458":"code","c71b8b96":"code","14be7340":"code","70ca7409":"code","963a8d87":"code","e886c690":"code","ff677fb8":"code","1f8a7a40":"code","18416722":"code","03305c1d":"code","5be7c436":"code","80ac1851":"code","6291836b":"code","6a2d771a":"code","932921bb":"code","beaef1cf":"code","94fce347":"code","21e43f6b":"code","083a9069":"code","ff0dcd8d":"code","ae20c957":"code","32ece9e5":"code","7bdc83f4":"code","cf13afd0":"code","f03b6699":"code","7b61d17e":"code","9219232f":"code","3b1161da":"code","be54a0be":"code","85d062d0":"code","88232bcb":"code","326bdef8":"code","c20d7241":"code","b5be99a6":"code","b9d4b672":"code","1eb099d5":"code","6566769a":"code","83b0561a":"code","cd393956":"code","fa5f0cd9":"code","ece60cbb":"code","d26e3a6d":"code","8b1fa4e7":"code","064384c1":"code","6a34ce02":"code","39dfece6":"code","3ac66fe3":"code","38b09ac4":"code","4651f155":"code","0cc4a067":"code","41a76ede":"code","2da3d88b":"code","fcf54350":"code","9fdade76":"code","aa2ac830":"code","07445adf":"code","b0ca9302":"code","f416ec94":"code","f80de88b":"markdown","7713e554":"markdown","4600fa84":"markdown","574635f7":"markdown","6cfd6569":"markdown","bb362347":"markdown","382677d7":"markdown","55f6c7e9":"markdown","013881ee":"markdown","e3ac2380":"markdown","3abbd61c":"markdown","e4c89ca4":"markdown","ab9e5da2":"markdown","f3d9dd78":"markdown","7a994215":"markdown","57290785":"markdown","92cc6461":"markdown","d0c86088":"markdown"},"source":{"0d3ce65b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d090f47a":"!pip install feature-engine\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder\n\nimport plotly.offline as pyoff\nimport plotly.graph_objs as go\nimport plotly.express as px\n\nimport datetime as dt\nimport feature_engine\n\nfrom feature_engine.outliers import Winsorizer\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5f5852eb":"#loading data\ndf = pd.read_csv('\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv', sep=\"\\t\")\ndf.head()","1a948e49":"df.info()","0399be5c":"df.shape","9b3d45d1":"df.describe()","34446de9":"NaN = df.isna().sum()\nNaN","3e968b56":"df = df.dropna()\ndf = df.reset_index(drop=True)\ndf.info()","94480590":"df.isnull().mean()","549430fd":"df['Monetary'] = df['MntWines']+df['MntFruits']+df['MntMeatProducts']+df['MntFishProducts']+df['MntSweetProducts']+df['MntGoldProds']\ndf['Frequency'] = df['NumWebPurchases']+df['NumCatalogPurchases']+df['NumStorePurchases']\ndf.info()","1a7dc458":"print(df['ID'].duplicated().sum())","c71b8b96":"df['Age'] = 2021-df['Year_Birth']\ndf['Age'].unique()","14be7340":"age_distribution = df['Age'].value_counts()\nage_distribution","70ca7409":"#delete the customer records with an age over 100\ndf = df[df.Age<100]\ndf = df.reset_index(drop=True)\ndf['Age'].unique()","963a8d87":"df['Marital_Status'].unique()","e886c690":"def get_relationship_status(x):\n    if x in ['Single','Divorced','Widow','Alone']:\n        return \"Not in Relationship\"\n    elif x in ['Together','Married']:\n        return \"in Relationship\"\n    else:\n        return \"Not Sure\"","ff677fb8":"df['Relationship_Status'] = df['Marital_Status'].apply(get_relationship_status)\ndf['Relationship_Status'].head()","1f8a7a40":"df['Relationship_Status'].value_counts()","18416722":"df = df[df.Relationship_Status != 'Not Sure']\ndf = df.reset_index(drop=True)","03305c1d":"df['Relationship_Status'].value_counts()","5be7c436":"df['Children_Home'] = df['Kidhome']+df['Teenhome']","80ac1851":"df['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'])\ndf['Dt_Customer'].dtype","6291836b":"df['Years_as_customer'] = 2021 - df['Dt_Customer'].dt.year\ndf['Years_as_customer'].head()","6a2d771a":"df['Z_CostContact'].unique()","932921bb":"df['Z_Revenue'].unique()","beaef1cf":"df['Complain'].unique()","94fce347":"df = df.drop(['Year_Birth','Marital_Status','Kidhome','Teenhome','Dt_Customer',\n             'Z_CostContact','Z_Revenue'],axis=1)\ndf = df.reset_index(drop=True)\ndf.info()","21e43f6b":"#Rearrange the order of columns\norder = [0,24,1,2,25,26,27,4,5,6,7,8,9,11,12,13,14,18,19,15,16,17,21,10,20,3,23,22]\ndf = df[[df.columns[i] for i in order]]\ndf.head()","083a9069":"#detect the income outliers\nsns.boxplot(x=df[\"Income\"])","ff0dcd8d":"#remove the income outliers\ndf = df[df['Income']<150000]\ndf = df.reset_index(drop=True)","ae20c957":"sns.set(font_scale=1)\nsns.relplot(x='Age',y='Monetary',hue='Relationship_Status',alpha=.5,palette='muted',\n           height=6,data=df)\nsns.lineplot(x='Age',y='Monetary',hue='Relationship_Status',data=df)\nplt.ylabel('Expenses')\nplt.title('Expenses by Age')\nplt.legend(bbox_to_anchor=(1.02,1),loc='upper left',borderaxespad=0)","32ece9e5":"edu_income = df['Income'].groupby(df['Education']).mean().to_frame()\nedu_expense = df['Monetary'].groupby(df['Education']).mean().to_frame()\nedu_income_expense = pd.merge(edu_income, edu_expense, on='Education')\nedu_income_expense['expense_ratio(%)'] = edu_income_expense['Monetary']*100\/edu_income_expense['Income']\nedu_income_expense","7bdc83f4":"f, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(8,12), sharex=True)\n\nplot_order=df.groupby('Education')['Income'].mean().sort_values(ascending=True).index.values\nsns.barplot(data=df,x='Education',y='Income',palette=\"Blues\",order=plot_order,ax=ax1)\nax1.axhline(0, color=\"k\", clip_on=False)\nax1.set_ylabel(\"Income\")\nax1.set(xlabel=None)\n\nsns.barplot(data=df,x='Education',y='Monetary',palette=\"pink\",order=plot_order,ax=ax2)\nax2.axhline(0, color=\"k\", clip_on=False)\nax2.set_ylabel(\"Expenses\")\nax2.set(xlabel=None)\n\nsns.barplot(data=edu_income_expense,x=edu_income_expense.index,y='expense_ratio(%)',palette=\"Greens\",order=plot_order,ax=ax3)\nax3.axhline(0, color=\"k\", clip_on=False)\nax3.set_ylabel(\"expense_ratio(%)\")\nplt.tight_layout()","cf13afd0":"plt.figsize=(15,8)\nsns.barplot(x='Education',y='Monetary',hue='Relationship_Status',data=df,\n           palette='hls',order=plot_order)\nplt.legend(bbox_to_anchor=(1.02,1),loc='upper left',borderaxespad=0)\nplt.ylabel(\"Expenses\")\nplt.title(\"Expenses by Education & Relationship Status\")\nplt.show()","f03b6699":"df['MntGroceries'] = df['MntFruits']+df['MntMeatProducts']+df['MntFishProducts']+df['MntSweetProducts']","7b61d17e":"fields=['MntGroceries','MntWines','MntGoldProds']\ncolors=['#8390FA', '#6EAF46', '#FAC748']\nlabels=df['Age'].unique()","9219232f":"df_grouped=df.groupby('Age').mean()[['MntGroceries','MntWines','MntGoldProds']]\ndf_grouped","3b1161da":"fig, ax = plt.subplots(1, figsize=(10, 12))\nleft = len(df_grouped) * [0]\nfor idx, name in enumerate(fields):\n    plt.barh(df_grouped.index, df_grouped[name], left = left, color=colors[idx])\n    left = left + df_grouped[name]\nplt.title('Expenses in Different Categories by Age', loc='center')\nplt.legend(fields,bbox_to_anchor=(1.02,1),loc='upper left',borderaxespad=0)\nplt.xlabel('Expenses')\nplt.ylabel('Age')\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)","be54a0be":"plt.figure(figsize=(12,8))\nfig=px.treemap(df,path=['Education','Children_Home'],\n              values='Monetary',color='MntWines')\nfig.show()","85d062d0":"age_places=df.groupby('Age').mean()[['NumWebPurchases','NumCatalogPurchases','NumStorePurchases']]\nfields2=['NumWebPurchases','NumCatalogPurchases','NumStorePurchases']\nage_places","88232bcb":"fig, ax = plt.subplots(1, figsize=(10, 10))\nbottom = len(age_places) * [0]\nfor idx, name in enumerate(fields2):\n    plt.bar(age_places.index, age_places[name], bottom = bottom, color=colors[idx])\n    bottom = bottom + age_places[name]\nplt.title('Purchasing Places by Age', loc='center',fontsize=18)\nplt.legend(fields2,bbox_to_anchor=(1.02,1),loc='upper left',borderaxespad=0)\nplt.xlabel('Age',fontsize=14)\nplt.ylabel('Number of Purchases',fontsize=14)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)","326bdef8":"plt.figure(figsize=(10,6))\nsns.scatterplot(data=df, x='Income', y='Frequency', hue='Children_Home')\nplt.title(\"Correlation of Income and Shopping Frequency\")\nplt.show()","c20d7241":"plt.figure(figsize=(10,6))\nsns.scatterplot(data=df, x='Income', y='NumDealsPurchases', hue='Children_Home')\nplt.title(\"Correlation of Income and Number of Deals Purchases\")\nplt.show()","b5be99a6":"#prepare the dataset for correlation heatmap\ncate = []\nfor i in df.columns:\n    if (df[i].dtypes == \"object\"):\n        cate.append(i)\n        \nprint(\"Object are:\", cate)","b9d4b672":"lbl_encode = LabelEncoder()\nfor i in cate:\n    df[i]=df[[i]].apply(lbl_encode.fit_transform)","1eb099d5":"df_heat = df.copy()\ndf_heat = df_heat.drop(columns = ['ID','MntFruits','MntMeatProducts','MntFishProducts','MntSweetProducts'],axis=1)\ndf_heat.head()","6566769a":"plt.figure(figsize=(20,20))\ncorrelation=sns.heatmap(df_heat.corr(),vmin=-1,vmax=1,annot=True,linewidths=1, linecolor='black')\ncorrelation.set_title('Correlation Graph', fontdict={'fontsize': 24})","83b0561a":"RFM_df = df[['Recency','Frequency','Monetary']]\nRFM_df.head()","cd393956":"quantiles = RFM_df.quantile(q=[0.25, 0.50, 0.75])\nquantiles = quantiles.to_dict()","fa5f0cd9":"def Rscore(x,p,d):\n    if x <= d[p][0.25]:\n        return 1\n    elif x <= d[p][0.50]:\n        return 2\n    elif x <= d[p][0.75]:\n        return 3\n    else:\n        return 4\n    \ndef FMscore(x,p,d):\n    if x <= d[p][0.25]:\n        return 4\n    elif x <= d[p][0.50]:\n        return 3\n    elif x <= d[p][0.75]:\n        return 2\n    else:\n        return 1","ece60cbb":"RFM_df['R_quartile'] = RFM_df['Recency'].apply(Rscore, args=('Recency',quantiles))\nRFM_df['F_quartile'] = RFM_df['Frequency'].apply(FMscore, args=('Frequency',quantiles))\nRFM_df['M_quartile'] = RFM_df['Monetary'].apply(FMscore, args=('Monetary',quantiles))\nRFM_df.head()","d26e3a6d":"RFM_df['RFM_Segment'] = RFM_df.R_quartile.map(str)+RFM_df.F_quartile.map(str)+RFM_df.M_quartile.map(str)\n\nRFM_df['RFM_Score'] = RFM_df[['R_quartile','F_quartile','M_quartile']].sum(axis=1)\nRFM_df.head()","8b1fa4e7":"print(\"Best Customers: \",len(RFM_df[RFM_df['RFM_Segment']=='111']))\nprint(\"Loyal Customers: \",len(RFM_df[RFM_df['F_quartile']==1]))\nprint(\"Big Spenders: \",len(RFM_df[RFM_df['M_quartile']==1]))\nprint(\"Almost Lost: \",len(RFM_df[RFM_df['RFM_Segment']=='134']))\nprint(\"Lost Customers: \",len(RFM_df[RFM_df['RFM_Segment']=='344']))\nprint(\"Lost Cheap Customer: \",len(RFM_df[RFM_df['RFM_Segment']=='444']))","064384c1":"##Function to check skewness\ndef check_skew(df_skew, column):\n    skew = stats.skew(df_skew[column])\n    skewtest = stats.skewtest(df_skew[column])\n    plt.title('Distribution of' + column)\n    sns.distplot(df_skew[column])\n    print(\"{}'s: Skew: {}, : {}\".format(column, skew, skewtest))\n    return","6a34ce02":"R_skewness = check_skew(RFM_df,'Recency')","39dfece6":"F_skewness = check_skew(RFM_df,'Frequency')","3ac66fe3":"M_skewness = check_skew(RFM_df,'Monetary')","38b09ac4":"#Removing Skewness\nmonetary_sqrt = RFM_df['Monetary'].apply(lambda x: np.sqrt(x)).to_frame()\n\nplt.figure(figsize=(9,9))\n\nplt.plot()\ncheck_skew(monetary_sqrt,'Monetary')\nplt.show()","4651f155":"RFM_df_2 = pd.DataFrame()\n#RFM_df_2['ID'] = RFM_df['ID']\nRFM_df_2['Recency'] = RFM_df['Recency']\nRFM_df_2['Frequency'] = RFM_df['Frequency']\nRFM_df_2['Monetary'] = monetary_sqrt\nRFM_df_2","0cc4a067":"scaler = StandardScaler()\nscaler.fit(RFM_df_2)\nrfm_df_scaled = scaler.transform(RFM_df_2)\nrfm_df_scaled = pd.DataFrame(rfm_df_scaled, columns = RFM_df_2.columns)\nrfm_df_scaled.head()","41a76ede":"from scipy.spatial.distance import cdist\ndistortions = [] \ninertias = [] \nmapping1 = {} \nmapping2 = {} \nK = range(1,10) \n  \nfor k in K: \n    #Building and fitting the model \n    kmeanModel = KMeans(n_clusters=k).fit(rfm_df_scaled) \n    kmeanModel.fit(rfm_df_scaled)     \n      \n    distortions.append(sum(np.min(cdist(rfm_df_scaled, kmeanModel.cluster_centers_, \n                      'euclidean'),axis=1)) \/ rfm_df_scaled.shape[0]) \n    inertias.append(kmeanModel.inertia_) \n  \n    mapping1[k] = sum(np.min(cdist(rfm_df_scaled, kmeanModel.cluster_centers_, \n                 'euclidean'),axis=1)) \/ rfm_df_scaled.shape[0] \n    mapping2[k] = kmeanModel.inertia_\n\nplt.plot(K, inertias, 'bx-')\nplt.xlabel('Values of K')\nplt.ylabel('Intertia')\nplt.title('The Elbow Method using Inertia')\nplt.show()","2da3d88b":"def kmeans(normalised_df_rfm, clusters_number, original_df_rfm):\n    \n    kmeans = KMeans(n_clusters = clusters_number, random_state = 1)\n    kmeans.fit(normalised_df_rfm)\n# Extract cluster labels\n    cluster_labels = kmeans.labels_\n        \n    # Create a cluster label column in original dataset\n    df_new = original_df_rfm.assign(Cluster = cluster_labels)\n    \n    # Initialise TSNE\n    model = TSNE(random_state=1)\n    transformed = model.fit_transform(df_new)\n    \n    # Plot t-SNE\n    plt.title('Flattened Graph of {} Clusters'.format(clusters_number))\n    sns.scatterplot(x=transformed[:,0], y=transformed[:,1], hue=cluster_labels, \n                    style=cluster_labels, palette=\"Set1\")\n    \n    return df_new\nplt.figure(figsize=(10, 10))\nplt.subplot(3, 1, 1)\ndf_rfm_k3 = kmeans(rfm_df_scaled[['Recency','Frequency','Monetary']], 3, RFM_df_2)\nplt.subplot(3, 1, 2)\ndf_rfm_k4 = kmeans(rfm_df_scaled[['Recency','Frequency','Monetary']], 4, RFM_df_2)\nplt.subplot(3, 1, 3)\ndf_rfm_k5 = kmeans(rfm_df_scaled[['Recency','Frequency','Monetary']], 5, RFM_df_2)\nplt.tight_layout()","fcf54350":"def snake_plot(normalised_df_rfm, df_rfm_kmeans, df_rfm_original):\n    normalised_df_rfm = pd.DataFrame(normalised_df_rfm, \n                                       index=RFM_df_2.index, \n                                       columns=RFM_df_2.columns)\n    normalised_df_rfm['Cluster'] = df_rfm_kmeans['Cluster']\n# Melt data into long format\n    df_melt = pd.melt(normalised_df_rfm.reset_index(), \n                        id_vars=['Cluster'],\n                        value_vars=['Recency', 'Frequency', 'Monetary'], \n                        var_name='Metric', \n                        value_name='Value')\n    plt.xlabel('Metric')\n    plt.ylabel('Value')\n    sns.pointplot(data=df_melt, x='Metric', y='Value', hue='Cluster')\n    \n    return","9fdade76":"snake_plot(rfm_df_scaled, df_rfm_k3, RFM_df_2)","aa2ac830":"snake_plot(rfm_df_scaled, df_rfm_k4, RFM_df_2)","07445adf":"snake_plot(rfm_df_scaled, df_rfm_k5, RFM_df_2)","b0ca9302":"def rfm_values(df):\n    df_new = df.groupby(['Cluster']).agg({'Recency':'mean',\n                                         'Frequency':'mean',\n                                         'Monetary':['mean','count']}).round(0)\n    return df_new","f416ec94":"rfm_values(df_rfm_k5)","f80de88b":"**Data Visualization**","7713e554":"Observations: \n* Most customers are between the age of 30 and 75.\n* Customers who are not in a relationship spend more from 25 to their early 30's.\n* Customer average spending lies between 400 and 1000. \n* The number of customers aged over 75 is considerably rare, resulting in high average spending for this age group.","4600fa84":"From the flattened graphs and the snack plots, it is evident that having a cluster value of 5 segments our customers well. ","574635f7":"Observation:\n\n* There is a positive correlation between customers' income and shopping frequency. \n* Most of the high frequently shoppers have no more than two children. \n* Most of the high income (over $80000) customers have no children.","6cfd6569":"# Customer Segmentation based on RFM variables","bb362347":"Observarion:\n\n* High-income customers with no kids are not sensitive to promotions.\n* Promotion lovers are middle-level income customers, with $30000 - 80000 annual income. \n* Customers with two or more children are more likely to make deals purchases. ","382677d7":"# Customer Personality Analysis","55f6c7e9":"Observation:\n\n* Customers who receive higher education tend to spend more on Wines. \n* With customers' family size growing, their expenses drop.","013881ee":"Monetary data is quite skewed. We will perform square root transformations to reduce the skewness of the data. ","e3ac2380":"**Data Preprocessing**","3abbd61c":"# Imperpretation of the clusters formed using k_means: \n\n* Cluster 0: Important Customers who need to be Recalled\n* Cluster 1: New Customers\n* Cluster 2: Promising Customers\n* Cluster 3: Lost Cusomters\n* Cluster 4: Best Customers \/ Very Important Valuable Customers","e4c89ca4":"# Data Summary\n\nAttributes\n\nPeople\n\n* ID: Customer's unique identifier\n* Year_Birth: Customer's birth year\n* Education: Customer's education level\n* Marital_Status: Customer's marital status\n* Income: Customer's yearly household income\n* Kidhome: Number of children in customer's household\n* Teenhome: Number of teenagers in customer's household\n* Dt_Customer: Date of customer's enrollment with the company\n* Recency: Number of days since customer's last purchase\n* Complain: 1 if customer complained in the last 2 years, 0 otherwise\n\nProducts\n\n* MntWines: Amount spent on wine in last 2 years\n* MntFruits: Amount spent on fruits in last 2 years\n* MntMeatProducts: Amount spent on meat in last 2 years\n* MntFishProducts: Amount spent on fish in last 2 years\n* MntSweetProducts: Amount spent on sweets in last 2 years\n* MntGoldProds: Amount spent on gold in last 2 years\n\nPromotion\n\n* NumDealsPurchases: Number of purchases made with a discount\n* AcceptedCmp1: 1 if customer accepted the offer in the 1st campaign, 0 otherwise\n* AcceptedCmp2: 1 if customer accepted the offer in the 2nd campaign, 0 otherwise\n* AcceptedCmp3: 1 if customer accepted the offer in the 3rd campaign, 0 otherwise\n* AcceptedCmp4: 1 if customer accepted the offer in the 4th campaign, 0 otherwise\n* AcceptedCmp5: 1 if customer accepted the offer in the 5th campaign, 0 otherwise\n* Response: 1 if customer accepted the offer in the last campaign, 0 otherwise\n\nPlace\n\n* NumWebPurchases: Number of purchases made through the company\u2019s web site\n* NumCatalogPurchases: Number of purchases made using a catalogue\n* NumStorePurchases: Number of purchases made directly in stores\n* NumWebVisitsMonth: Number of visits to company\u2019s web site in the last month","ab9e5da2":"**Libraries**","f3d9dd78":"# Goal of this Notebook\n\nIn this notebook, I will run EDA and data visualizations to illustrate customer personality and use k-means clustering to segment customers based on RFM variables.\n\nThe Customer Segmentation part in this notebook followed the concept and process in this article https:\/\/medium.com\/web-mining-is688-spring-2021\/using-k-means-to-segment-customers-based-on-rfm-variables-9d4d683688c8 written by Jasneek Chugh. ","7a994215":"Observation:\n\n* Most of the purchases are taking place in stores, followed by online shopping. \n* There are no specific shopping places preferences between different age groups.","57290785":"Observation: \n\n* Customers tend to spend more on Wines after 50. \n* The big spenders are customers younger than 30 or older than 70. They also spend more on Groceries than people in other age groups do.\n* More than half of the sales are contributed by Wines, followed by Groceries.","92cc6461":"Observation:\n\nCustomers' income increases with their education. Their expenses and expense ratio roughly follow the same rule, except the \"Graduation\" spends slightly more than the \"Master\".","d0c86088":"Now we will apply Elbow Method to find the optimal number of clusters."}}