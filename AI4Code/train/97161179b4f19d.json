{"cell_type":{"7a6c4351":"code","ad19df82":"code","f047c518":"code","9aa1ed43":"code","2f8652f4":"code","dee11b97":"code","07762525":"code","3938582e":"code","6bef1b3e":"code","5c766ecb":"code","641b764c":"code","bacb4bf9":"code","ee84b2fd":"code","91cdc382":"code","42879699":"code","48769117":"markdown","69ea4e85":"markdown","fb970f1d":"markdown","d40c5b45":"markdown","93932eb1":"markdown","743e41a2":"markdown","2c636c76":"markdown","fa803840":"markdown","125ac0e8":"markdown","ee4217d4":"markdown","433b157c":"markdown","66c923a3":"markdown","a4da483d":"markdown","5a169391":"markdown","0e68c59b":"markdown"},"source":{"7a6c4351":"!pip install spacytextblob\n!python -m spacy download en_core_web_sm\n!pip install pywaffle","ad19df82":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport missingno as msno\nfrom pywaffle import Waffle\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f047c518":"data = pd.read_csv('..\/input\/reddit-vaccine-myths\/reddit_vm.csv')\ndata = data[['title','body']].fillna('')\ndata['title'] = data['title'].replace(to_replace='Comment',value='')","9aa1ed43":"'''import spacy\nfrom spacytextblob.spacytextblob import SpacyTextBlob\n\npolarity = []\nsubjectivity = []\nassessments = []\nfor i in range(data.shape[0]):\n    print(f'Processing row no {i}')\n    nlp = spacy.load('en_core_web_sm')\n    nlp.add_pipe('spacytextblob')\n    text = data['body'].iloc[i]\n    doc = nlp(text)\n    polarity.append(doc._.polarity)      \n    subjectivity.append(doc._.subjectivity)  \n    assessments.append(doc._.assessments) '''","2f8652f4":"import json\nfile = open('..\/input\/sentimentanalysisresults\/assessments_full.json')\nassessments_result = json.load(file)\n\ntitle_sentiment_words = [ele for ele in assessments_result['assessments_title'] if len(ele)!=0]\ntitle_positive_words = [ele[0][0][0] for ele in title_sentiment_words if ele[0][1] > 0]\ntitle_negative_words = [ele[0][0][0] for ele in title_sentiment_words if ele[0][1] < 0]\ntitle_neutral_words = [ele[0][0][0] for ele in title_sentiment_words if ele[0][1] == 0]\n\nbody_sentiment_words = [ele for ele in assessments_result['assessments_body'] if len(ele)!=0]\nbody_positive_words = [ele[0][0][0] for ele in body_sentiment_words if ele[0][1] > 0]\nbody_negative_words = [ele[0][0][0] for ele in body_sentiment_words if ele[0][1] < 0]\nbody_neutral_words = [ele[0][0][0] for ele in body_sentiment_words if ele[0][1] == 0]","dee11b97":"ratio_positive_title = round((len(title_positive_words)\/len(title_sentiment_words)),2)\nratio_negative_title = round((len(title_negative_words)\/len(title_sentiment_words)),2)\nratio_neutral_title = round((len(title_neutral_words)\/len(title_sentiment_words)),2)\npercents_df = pd.DataFrame.from_dict({'ratio':'ratio','positive_ratio':[ratio_positive_title],'negative_ratio':[ratio_negative_title],'neutral_ratio':[ratio_neutral_title]})\npercents_df = percents_df.set_index('ratio')\n\nratio_positive_body = round((len(body_positive_words)\/len(body_sentiment_words)),2)\nratio_negative_body = round((len(body_negative_words)\/len(body_sentiment_words)),2)\nratio_neutral_body = round((len(body_neutral_words)\/len(body_sentiment_words)),2)\npercents_body_df = pd.DataFrame.from_dict({'ratio':'ratio','positive_ratio':[ratio_positive_body],'negative_ratio':[ratio_negative_body],'neutral_ratio':[ratio_neutral_body]})\npercents_body_df = percents_body_df.set_index('ratio')","07762525":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(1,1,figsize=(10, 2.5))\n\nax.barh(percents_df.index, percents_df['positive_ratio'], \n        color='#0000FF', alpha=0.9)\nax.barh(percents_df.index, percents_df['negative_ratio'], left=percents_df['positive_ratio'], \n        color='#221f1f', alpha=0.9)\nax.barh(percents_df.index, percents_df['neutral_ratio'], left=percents_df['positive_ratio']+percents_df['negative_ratio'],\n        color='#C0C0C0', alpha=0.9)\n\n# ax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticks([])\n\n\nfor i in percents_df.index:\n    ax.annotate(f\"{int(percents_df['positive_ratio'][i]*100)}%\", \n                   xy=(percents_df['positive_ratio'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='san-serif',\n                   color='white')\n\n    ax.annotate(\"Positives\", \n                   xy=(percents_df['positive_ratio'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='san-serif',\n                   color='white')\n    \n    \nfor i in percents_df.index:\n    ax.annotate(f\"{int(percents_df['negative_ratio'][i]*100)}%\", \n                   xy=(percents_df['positive_ratio'][i]+percents_df['negative_ratio'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='san-serif',\n                   color='white')\n    ax.annotate(\"Negatives\", \n                   xy=(percents_df['positive_ratio'][i]+percents_df['negative_ratio'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='san-serif',\n                   color='white')\n\nfor i in percents_df.index:\n    ax.annotate(f\"{int(percents_df['neutral_ratio'][i]*100)}%\", \n                   xy=(percents_df['positive_ratio'][i]+percents_df['neutral_ratio'][i]+percents_df['negative_ratio'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='san-serif',\n                   color='black')\n    ax.annotate(\"Neutrals\", \n                   xy=(percents_df['positive_ratio'][i]+percents_df['neutral_ratio'][i]+percents_df['negative_ratio'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='san-serif',\n                   color='black')\n\n\nfig.text(0.125,0.92,'Sentiment Distribution from Titles Based on Polarity', fontfamily='san-serif',fontsize=15, fontweight='bold')  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n\nax.legend().set_visible(False)\nplt.show()\n\nfig = plt.figure(figsize=(5, 1),dpi=150,facecolor='#fafafa',\n    FigureClass=Waffle,\n    rows=1,\n    values=[4, 6],\n    colors=['#4C8CB5', \"lightgray\"],\n    icons='thumbs-up',\n    font_size=20,vertical=False,\n)\n\nfig.text(0,1,'Four in every Ten Titles are positive',fontfamily='monospace',fontsize=10)\n\nfig = plt.figure(figsize=(5, 1),dpi=150,facecolor='#fafafa',\n    FigureClass=Waffle,\n    rows=1,\n    values=[3, 7],\n    colors=['#FF0000', \"lightgray\"],\n    icons='thumbs-down',\n    font_size=20,vertical=False,\n)\n\nfig.text(0,1,'Three in every Ten Titles are Negative',fontfamily='monospace',fontsize=10)\nplt.show()","3938582e":"from wordcloud import WordCloud\nimport random\nfrom PIL import Image\nimport matplotlib\nimport requests\n\ndef word_cloud_string(words_list):\n    words_string = ''\n    for word in words_list:\n        words_string = words_string +' '+ word    \n    return words_string\n    \ndef color_map(colors_list):\n    cmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors_list)\n    return cmap\n\ndef mask_generation(img_url):\n    mask = np.array(Image.open(requests.get(img_url, stream=True).raw).convert('LA'))\n    mask = mask[:,:,0]\n\n    def transform_zeros(val):\n        if val == 251:\n            return 255\n        else:\n            return val\n\n    maskable_image = np.ndarray((mask.shape[0],mask.shape[1]), np.int32)\n\n    for i in range(len(mask)):\n        maskable_image[i] = list(map(transform_zeros, mask[i]))\n    return maskable_image","6bef1b3e":"maskable_image = mask_generation('https:\/\/raw.githubusercontent.com\/vineethbabu\/coronavaccine_images\/main\/positive_review.png')\ncmap = color_map(['#4C8CB5','#b20710'])\nwordcloud = WordCloud(background_color = 'white', max_font_size=100,relative_scaling=0,colormap=cmap, max_words = 5000, mask = maskable_image, contour_width=3, contour_color='steelblue').generate(word_cloud_string(title_positive_words))\n\nplt.figure( figsize=(8,8))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","5c766ecb":"maskable_image = mask_generation('https:\/\/raw.githubusercontent.com\/vineethbabu\/coronavaccine_images\/main\/negative_review.png')\ncmap = color_map(['#000000','#b20710'])\nwordcloud = WordCloud(background_color = 'white', max_font_size=250,relative_scaling=0,colormap=cmap, max_words = 5000, mask = maskable_image, contour_width=3, contour_color='black').generate(word_cloud_string(title_negative_words))\n\nplt.figure( figsize=(8,8))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","641b764c":"maskable_image = mask_generation('https:\/\/raw.githubusercontent.com\/vineethbabu\/coronavaccine_images\/main\/neutral_review.png')\ncmap = color_map(['#000000','#b20710'])\nwordcloud = WordCloud(background_color = 'white', max_font_size=250,relative_scaling=0,colormap=cmap, max_words = 5000, mask = maskable_image, contour_width=3, contour_color='darkgrey').generate(word_cloud_string(title_neutral_words))\n\nplt.figure( figsize=(8,8))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","bacb4bf9":"fig, ax = plt.subplots(1,1,figsize=(10, 2.5))\n\nax.barh(percents_body_df.index, percents_body_df['positive_ratio'], \n        color='#0000FF', alpha=0.9)\nax.barh(percents_body_df.index, percents_body_df['negative_ratio'], left=percents_body_df['positive_ratio'], \n        color='#221f1f', alpha=0.9)\nax.barh(percents_body_df.index, percents_body_df['neutral_ratio'], left=percents_body_df['positive_ratio']+percents_body_df['negative_ratio'],\n        color='#C0C0C0', alpha=0.9)\n\n# ax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticks([])\n\n\nfor i in percents_body_df.index:\n    ax.annotate(f\"{int(percents_body_df['positive_ratio'][i]*100)}%\", \n                   xy=(percents_body_df['positive_ratio'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='san-serif',\n                   color='white')\n\n    ax.annotate(\"Positives\", \n                   xy=(percents_body_df['positive_ratio'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='san-serif',\n                   color='white')\n    \n    \nfor i in percents_body_df.index:\n    ax.annotate(f\"{int(percents_body_df['negative_ratio'][i]*100)}%\", \n                   xy=(percents_body_df['positive_ratio'][i]+percents_body_df['negative_ratio'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='san-serif',\n                   color='white')\n    ax.annotate(\"Negatives\", \n                   xy=(percents_body_df['positive_ratio'][i]+percents_df['negative_ratio'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='san-serif',\n                   color='white')\n\nfor i in percents_body_df.index:\n    ax.annotate(f\"{int(percents_body_df['neutral_ratio'][i]*100)}%\", \n                   xy=(percents_body_df['positive_ratio'][i]+percents_body_df['neutral_ratio'][i]+percents_body_df['negative_ratio'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='san-serif',\n                   color='black')\n    ax.annotate(\"Neutrals\", \n                   xy=(percents_body_df['positive_ratio'][i]+percents_body_df['neutral_ratio'][i]+percents_body_df['negative_ratio'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='san-serif',\n                   color='black')\n\n\n\n\n\n\nfig.text(0.125,0.92,'Sentiments Distribution from Body Based on Polarity', fontfamily='san-serif',fontsize=15, fontweight='bold')  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n\nax.legend().set_visible(False)\nplt.show()\n\nfig = plt.figure(figsize=(5, 1),dpi=150,facecolor='#fafafa',\n    FigureClass=Waffle,\n    rows=1,\n    values=[5, 5],\n    colors=['#4C8CB5', \"lightgray\"],\n    icons='thumbs-up',\n    font_size=20,vertical=False,\n)\n\nfig.text(0,1,'Five in every Ten Body Texts are positive',fontfamily='monospace',fontsize=10)\n\n\nfig = plt.figure(figsize=(5, 1),dpi=150,facecolor='#fafafa',\n    FigureClass=Waffle,\n    rows=1,\n    values=[3, 7],\n    colors=['#FF0000', \"lightgray\"],\n    icons='thumbs-down',\n    font_size=20,vertical=False,\n)\n\nfig.text(0,1,'Three in every Ten Body Texts are Negative',fontfamily='monospace',fontsize=10)\nplt.show()","ee84b2fd":"maskable_image = mask_generation('https:\/\/raw.githubusercontent.com\/vineethbabu\/coronavaccine_images\/main\/positive_review.png')\ncmap = color_map(['#4C8CB5','#b20710'])\nwordcloud = WordCloud(background_color = 'white', max_font_size=100,relative_scaling=0,colormap=cmap, max_words = 5000, mask = maskable_image, contour_width=3, contour_color='darkblue').generate(word_cloud_string(body_positive_words))\n\nplt.figure( figsize=(8,8))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","91cdc382":"maskable_image = mask_generation('https:\/\/raw.githubusercontent.com\/vineethbabu\/coronavaccine_images\/main\/negative_review.png')\ncmap = color_map(['#4C8CB5','#b20710'])\nwordcloud = WordCloud(background_color = 'white', max_font_size=100,relative_scaling=0,colormap=cmap, max_words = 5000, mask = maskable_image, contour_width=3, contour_color='black').generate(word_cloud_string(body_negative_words))\n\nplt.figure( figsize=(8,8))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","42879699":"maskable_image = mask_generation('https:\/\/raw.githubusercontent.com\/vineethbabu\/coronavaccine_images\/main\/neutral_review.png')\ncmap = color_map(['#4C8CB5','#b20710'])\nwordcloud = WordCloud(background_color = 'white', max_font_size=100,relative_scaling=0,colormap=cmap, max_words = 5000, mask = maskable_image, contour_width=3, contour_color='darkgrey').generate(word_cloud_string(body_neutral_words))\n\nplt.figure( figsize=(8,8))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","48769117":"> We have forty percent of titles detected as positives, where as remaining sixty is negative and neutral with nearly equal share for both.","69ea4e85":"Here I am performing sentiment analysis only on title and body. As part of data cleaning I have removed the word \"Comment\" from title because it occured more times.","fb970f1d":"> We have nearly half of the body text is detected as positives where as in remaining half negatives and positives again have near equal share. ","d40c5b45":"# **Body Neutral Words - WordCloud**","93932eb1":"# **Title Neutral Words WordCloud**","743e41a2":"I have used spacy text blob for my sentiment classification. It gives us polarity, subjectivity and assessments on each sentence. \n\nPolarity is a value in the range [-1,1]. If polarity is less than 0 it is negative, else if it is greater than 0 it is positive. If polarity is equal to 0 it is considered as neutral.","2c636c76":"# **Visualisations from Body**","fa803840":"# **Body Negative Words - WordCloud**","125ac0e8":"# **Title Positive Words WordCloud**","ee4217d4":"# **Body Positive Words - WordCloud**","433b157c":"I have dumped all the results in an assesments file as json. Let us now load the file and visualise the results.","66c923a3":"**Observations:**\n1. Based on results from spacy textblob nearly half of the data are positive posts both from title and body.\n2. The other half is nearly equally shared by negative and neutral posts.\n","a4da483d":"# **Visualisation from Titles:**","5a169391":"# **Title Negative Words WordCloud**","0e68c59b":"<center> <h2><b> Sentiment Analysis on Reddit Vaccine Myths<\/b><\/h2><\/center>"}}