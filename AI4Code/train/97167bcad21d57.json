{"cell_type":{"a9904ff0":"code","0a66e778":"code","89542a61":"code","55554edb":"code","5a420c0d":"code","3573b5a7":"code","a24a24cf":"code","9fa6adc6":"code","5a9bfcd2":"code","47bd0d71":"code","2b122438":"code","55959969":"code","dd86df64":"code","517a7f8a":"code","3618fc94":"code","a171f70e":"code","08b7498b":"code","b3313c84":"code","06e8f317":"code","31580f9c":"code","47bb020b":"code","28fbd929":"code","910506cc":"code","5cd44bd7":"code","a1db6f27":"code","b886259c":"code","60f6f506":"code","beda9f6f":"code","03ca0540":"code","6d94f2f2":"code","cbad2e59":"code","6c5003be":"code","93350403":"code","9b8b3977":"code","d58e3816":"code","2ef909e0":"code","e2c6491d":"code","7b506448":"code","dce6a683":"code","54e886f0":"code","f62be23e":"code","51d769a3":"code","91d4617a":"code","4d9051ba":"code","6d7f52d5":"code","532de44b":"code","89096f46":"code","3c925bc6":"code","fccd8950":"code","a6f6f78c":"code","febc475d":"code","c3874894":"code","d1b12236":"code","6cc91fc3":"code","f140f67d":"code","7b8292ea":"markdown","79d12f4f":"markdown","87fa09eb":"markdown","be36ccb7":"markdown","41914e67":"markdown","86fa3d64":"markdown","cd09ae32":"markdown","77a48e1f":"markdown","c779844e":"markdown","c718f3b3":"markdown","2947960b":"markdown","6ad913ae":"markdown","9768da5f":"markdown","56ccab8c":"markdown","c8144d89":"markdown","30daba60":"markdown","386479d1":"markdown","393be5d5":"markdown","3aebbf24":"markdown","71b6dcdf":"markdown","53bc2060":"markdown","9021b56c":"markdown","df30198d":"markdown","8cfe64d4":"markdown","c8ee8fe0":"markdown","7ad36d47":"markdown","8224ad41":"markdown","a7b363f3":"markdown","dd05f8a2":"markdown","b08f83bc":"markdown","77cf856c":"markdown","cc294378":"markdown","faa4a3d5":"markdown","40aa4ef7":"markdown","3880d5f9":"markdown","27bd83ab":"markdown","02cc2652":"markdown","833d3c2b":"markdown","0136fbef":"markdown","418966db":"markdown","9f439b7b":"markdown","643ccfcd":"markdown","016707a2":"markdown","09e56129":"markdown","a0ec37cf":"markdown","c27f36aa":"markdown","f8e26a05":"markdown","1fe00e3c":"markdown","5f5659ce":"markdown","29c6aee8":"markdown","503cad62":"markdown"},"source":{"a9904ff0":"!pip install pyspark","0a66e778":"#Initializing PySpark\nfrom pyspark import SparkContext, SparkConf\n\n#Spark Config\nconf = SparkConf().setAppName(\"sample_app\")\nsc = SparkContext(conf=conf)","89542a61":"from pyspark.sql import SQLContext\nfrom pyspark.sql import DataFrameNaFunctions\n\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.classification import DecisionTreeClassifier\n\nfrom pyspark.ml.feature import Binarizer\nfrom pyspark.ml.feature import VectorAssembler, StringIndexer, VectorIndexer","55554edb":"sqlContext = SQLContext(sc)\ndf = sqlContext.read.load('..\/input\/san-diego-daily-weather-data\/daily_weather.csv', \n                          format='com.databricks.spark.csv', \n                          header='true',inferSchema='true')","5a420c0d":"print(df.columns)","3573b5a7":"featureColumns = ['air_pressure_9am','air_temp_9am','avg_wind_direction_9am','avg_wind_speed_9am',\n        'max_wind_direction_9am','max_wind_speed_9am','rain_accumulation_9am',\n        'rain_duration_9am']","a24a24cf":"df = df.drop('number')\ndf = df.na.drop()","9fa6adc6":"print(df.count(),\",\",len(df.columns))","5a9bfcd2":"binarizer = Binarizer(threshold=24.99999,\n                     inputCol = \"relative_humidity_3pm\",\n                     outputCol = \"label\")\n\nbinarizedDF = binarizer.transform(df)","47bd0d71":"binarizedDF.select('relative_humidity_3pm','label').show(5)","2b122438":"binarizedDF.toPandas().head(2)","55959969":"assembler = VectorAssembler(inputCols=featureColumns,\n                           outputCol = 'features')\n\nassembled = assembler.transform(binarizedDF)","dd86df64":"assembled.select('features').show(2)","517a7f8a":"(trainingData, testData) = assembled.randomSplit([0.8,0.2], seed=13234)","3618fc94":"trainingData.count(),testData.count()","a171f70e":"dt = DecisionTreeClassifier(labelCol='label',featuresCol='features',maxDepth=5,\n                           minInstancesPerNode = 20, impurity = 'gini')","08b7498b":"pipeline = Pipeline(stages=[dt])\nmodel = pipeline.fit(trainingData)","b3313c84":"predictions = model.transform(testData)","06e8f317":"predictions.select('prediction','label').show(5)","31580f9c":"predictions.select('prediction','label').write.save('low_humidity_prediction.csv', \n                          format='com.databricks.spark.csv', \n                          header='true',inferSchema='true')","47bb020b":"from pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.mllib.evaluation import MulticlassMetrics","28fbd929":"predictions = sqlContext.read.load('.\/low_humidity_prediction.csv', \n                          format='com.databricks.spark.csv', \n                          header='true',inferSchema='true')","910506cc":"predictions.show(5)","5cd44bd7":"evaluator = MulticlassClassificationEvaluator(labelCol='label',\n                                             predictionCol = 'prediction',\n                                             metricName = 'accuracy')","a1db6f27":"acc = evaluator.evaluate(predictions)\nprint(acc)","b886259c":"predictions.rdd.take(2)","60f6f506":"predictions.rdd.map(tuple).take(5)","beda9f6f":"metrics = MulticlassMetrics(predictions.rdd.map(tuple))","03ca0540":"\nmetrics.confusionMatrix().toArray().T","6d94f2f2":"from pyspark.sql import SQLContext\nfrom pyspark.ml.clustering import KMeans\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.feature import StandardScaler\n%matplotlib inline","cbad2e59":"from itertools import cycle, islice\nfrom math import sqrt\nfrom numpy import array\nfrom pandas.plotting import parallel_coordinates\nfrom pyspark.ml.clustering import KMeans as KM\nfrom pyspark.mllib.linalg import DenseVector\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\ndef computeCost(featuresAndPrediction, model):\n    allClusterCenters = [DenseVector(c) for c in model.clusterCenters()]\n    arrayCollection   = featuresAndPrediction.rdd.map(array)\n\n    def error(point, predictedCluster):\n        center = allClusterCenters[predictedCluster]\n        z      = point - center\n        return sqrt((z*z).sum())\n    \n    return arrayCollection.map(lambda row: error(row[0], row[1])).reduce(lambda x, y: x + y)\n\n\ndef elbow(elbowset, clusters):\n    wsseList = []\t\n    for k in clusters:\n        print(\"Training for cluster size {} \".format(k))\n        kmeans = KM(k = k, seed = 1)\n        model = kmeans.fit(elbowset)\n        transformed = model.transform(elbowset)\n        featuresAndPrediction = transformed.select(\"features\", \"prediction\")\n\n        W = computeCost(featuresAndPrediction, model)\n        print(\"......................WSSE = {} \".format(W))\n\n        wsseList.append(W)\n    return wsseList\n\ndef elbow_plot(wsseList, clusters):\n    wsseDF = pd.DataFrame({'WSSE' : wsseList, 'k' : clusters })\n    wsseDF.plot(y='WSSE', x='k', figsize=(15,10), grid=True, marker='o')\n\ndef pd_centers(featuresUsed, centers):\n    colNames = list(featuresUsed)\n    colNames.append('prediction')\n\n    # Zip with a column called 'prediction' (index)\n    Z = [np.append(A, index) for index, A in enumerate(centers)]\n\n    # Convert to pandas for plotting\n    P = pd.DataFrame(Z, columns=colNames)\n    P['prediction'] = P['prediction'].astype(int)\n    return P\n\ndef parallel_plot(data, P):\n    my_colors = list(islice(cycle(['b', 'r', 'g', 'y', 'k']), None, len(P)))\n    plt.figure(figsize=(15,8)).gca().axes.set_ylim([-3,+3])\n    parallel_coordinates(data, 'prediction', color = my_colors, marker='o')","6c5003be":"df = sqlContext.read.load('..\/input\/san-diego-daily-weather-data\/minute_weather.csv', \n                          format='com.databricks.spark.csv', \n                          header='true',inferSchema='true')","93350403":"df.count()","9b8b3977":"filteredDF = df.filter((df.rowID % 10 == 0))\nfilteredDF.count()","d58e3816":"filteredDF.describe().toPandas().T","2ef909e0":"filteredDF.filter(filteredDF.rain_accumulation == 0).count()","e2c6491d":"filteredDF.filter(filteredDF.rain_duration == 0).count()","7b506448":"workingDF = filteredDF.drop('rain_accumulation').drop('rain_duration').drop('hpwren_timestamp')","dce6a683":"before = workingDF.count()\nworkingDF = workingDF.na.drop()\nafter = workingDF.count()\nprint(before - after)","54e886f0":"workingDF.columns","f62be23e":"featuresUsed = ['air_pressure','air_temp','avg_wind_direction','avg_wind_speed','max_wind_direction',\n                'max_wind_speed','relative_humidity']\nassembler = VectorAssembler(inputCols=featuresUsed,outputCol='features_unscaled')\nassembled = assembler.transform(workingDF)","51d769a3":"assembled.show(2)","91d4617a":"scaler = StandardScaler(inputCol='features_unscaled',outputCol='features',withMean=True,withStd=True)\nscalerModel = scaler.fit(assembled)\nscalerData = scalerModel.transform(assembled)","4d9051ba":"scalerData.show(2)","6d7f52d5":"scalerData = scalerData.select(\"features\",\"rowID\")\n\nelbowset = scalerData.filter(scalerData.rowID % 3 == 0).select(\"features\")\nelbowset.persist()","532de44b":"clusters = range(2,31)\n\nwsseList = elbow(elbowset,clusters)","89096f46":"elbow_plot(wsseList,clusters)","3c925bc6":"scaledDataFeat = scalerData.select('features')\nscaledDataFeat.persist()","fccd8950":"kmeans = KMeans(k = 12, seed=1)\nmodel = kmeans.fit(scaledDataFeat)\n\ntransformed = model.transform(scaledDataFeat)","a6f6f78c":"centers = model.clusterCenters()\ncenters","febc475d":"P = pd_centers(featuresUsed,centers)\nP.head()","c3874894":"parallel_plot(P[P['relative_humidity']<-0.5],P)","d1b12236":"parallel_plot(P[P['air_temp']>0.5],P)","6cc91fc3":"parallel_plot(P[(P['relative_humidity']>0.5) & (P['air_temp']<0.5) ],P)","f140f67d":"parallel_plot(P.iloc[[2]],P)","7b8292ea":"`There are over 1.5 million rows in the DataFrame. Clustering this data on your computer in the Cloudera VM can take a long time, so let's only one-tenth of the data. We can subset by calling filter() and using the rowID column.`","79d12f4f":"Scale the data. Since the features are on different scales (e.g., air pressure values are in the 900\u2019s, while relative humidities range from 0 to 100), they need to be scaled. We will scale them so that each feature will have a value of 0 for the mean, and a value of 1 for the standard deviation.\n\n`First, we will combine the columns into a single vector column. Let's look at the columns in the DataFrame.`","87fa09eb":"`Now, print the columns in DataFrame.`","be36ccb7":"`Next, let's use StandardScaler to scale the data.`","41914e67":"Let's aggregate the features we will use to make predictions into a single column: The inputCols argument specifies our list of column names we defined earlier, and outputCol is the name of the new column. The second line creates a new DataFrame with the aggregated features in a column.","86fa3d64":"# Unsupervised Learning\n\n![](https:\/\/miro.medium.com\/max\/1280\/1*HU617gljScDVnanadMzCcQ.gif)\n\nUnsupervised learning is a type of machine learning that looks for previously undetected patterns in a data set with no pre-existing labels and with a minimum of human supervision. In contrast to supervised learning that usually makes use of human-labeled data, unsupervised learning, also known as self-organization allows for modeling of probability densities over inputs. It forms one of the three main categories of machine learning, along with supervised and reinforcement learning. Semi-supervised learning, a related variant, makes use of supervised and unsupervised techniques.","cd09ae32":"`Execute the next cell to load the classes used in this activity.`","77a48e1f":"# Supervised Learning\n\n![](https:\/\/www.livewireindia.com\/blog\/wp-content\/uploads\/2019\/06\/Supervised-ML-1.gif)\n\nSupervised learning is the machine learning task of learning a function that maps an input to an output based on example input-output pairs. It infers a function from labeled training data consisting of a set of training examples. In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. ","c779844e":"`Let's show clusters for \"Dry Days\", i.e., weather samples with low relative humidity.`","c718f3b3":"## Data Preprocessing\n\nSplit training and test data. We can split the data by calling randomSplit():The first argument is how many parts to split the data into and the approximate size of each. This specifies two sets of 80% and 20%. Normally, the seed should not be specified, but we use a specific value here so that everyone will get the same decision tree.\n\n`We can print the number of rows in each DataFrame to check the sizes (1095 * 80% = 851.2).`","2947960b":"`Now , Let us print shape of dataframe.`","6ad913ae":"The first two arguments specify the names of the label and prediction columns, and the third argument specifies that we want the overall precision.\n\n`We can compute the accuracy by calling evaluate().`","9768da5f":"Create categorical variable. Let's create a categorical variable to denote if the humidity is not low. If the value is less than 25%, then we want the categorical value to be 0, otherwise the categorical value should be 1. We can create this categorical variable as a column in a DataFrame using Binarizer:\n\nThe threshold argument specifies the threshold value for the variable, inputCol is the input column to read, and outputCol is the name of the new categorical column. The second line applies the Binarizer and creates a new DataFrame with the categorical column.","56ccab8c":"# PySpark\n\n![](https:\/\/luminousmen.com\/media\/spark-tips.jpg)\n\nPySpark is a Python API for Spark released by the Apache Spark community to support Python with Spark. Using PySpark, one can easily integrate and work with RDDs in Python programming language too. There are numerous features that make PySpark such an amazing framework when it comes to working with huge datasets. Whether it is to perform computations on large datasets or to just analyze them, Data Engineers are switching to this tool.\n\n### Key Features of PySpark\n\n1. Real-time computations: Because of the in-memory processing in the PySpark framework, it shows low latency.\n\n2. Polyglot: The PySpark framework is compatible with various languages such as Scala, Java, Python, and R, which makes it one of the most preferable frameworks for processing huge datasets.\n\n3. Caching and disk persistence: This framework provides powerful caching and great disk persistence.\n\n4. Fast processing: The PySpark framework is way faster than other traditional frameworks for Big Data processing.\n\n5. Works well with RDDs: Python programming language is dynamically typed, which helps when working with RDDs.\n","c8144d89":"`Let's create an instance of MulticlassMetrics with this RDD:`","30daba60":"`We can also look at data using Pandas Interface.`","386479d1":"`We can look at the first four values in the new DataFrame. The first row's humidity value is greater than 25% and the label is 1. The other humidity values are less than 25% and have labels equal to 0.`","393be5d5":"`Cluster 2 captures days with mild weather.`\n\n#### Thank you for reading my Notebook. I hope you learned something new and interesting today !! :)","3aebbf24":"## Data Cleaning\n\n1. Drop unused and missing data. We do not need the number column in our data, so let's remove it from the DataFrame.\n\n2. Next, let's remove all rows with missing data:","71b6dcdf":"`I am making this extra codes to make plots. Please feel free to explore.`","53bc2060":"`Execute the cell to load the minute weather data in minute_weather.csv.`","9021b56c":"The labelCol argument is the column we are trying to predict, featuresCol specifies the aggregated features column, maxDepth is stopping criterion for tree induction based on maximum depth of tree, minInstancesPerNode is stopping criterion for tree induction based on minimum number of samples in a node, and impurity is the impurity measure used to split nodes.\n\n`We can create a model by training the decision tree. This is done by executing it in a Pipeline.`","df30198d":"The first line creates a new KMeans instance with 12 clusters and a specific seed value. (As in previous hands-on activities, we use a specific seed value for reproducible results.) The second line fits the data to the model, and the third applies the model to the data.\n\n`Once the model is created, we can determine the center measurement of each cluster.`","8cfe64d4":"## Problem Description\n\nThis activity guides you through the process of performing cluster analysis on a dataset using k-means. In this activity, we will perform cluster analysis on the minute-weather.csv dataset using the k-means algorithm. Recall that this dataset contains weather measurements such as temperature, relative humidity, etc., from a weather station in San Diego, California, collected at one-minute intervals. The goal of cluster analysis on this data is to identify different weather patterns for this weather station.","c8ee8fe0":"The first line creates an array with the numbers 2 through 30, and the second line calls the elbow() function defined in the utils.py library to perform clustering. The first argument to elbow() is the dataset, and the second is the array of values for k. The elbow() function returns an array of the WSSE for each number of clusters.\n\n`Let's plot the results by calling elbow_plot().`","7ad36d47":"Instead, we can map the RDD to tuple to get an RDD of numbers:","8224ad41":"## KMeans Clustering\n\n![](https:\/\/sharpneat.sourceforge.io\/research\/kmeans_example_animation.gif)\n\nk-means clustering is a method of vector quantization, originally from signal processing, that aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean (cluster centers or cluster centroid), serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells. It is popular for cluster analysis in data mining. k-means clustering minimizes within-cluster variances (squared Euclidean distances), but not regular Euclidean distances, which would be the more difficult Weber problem: the mean optimizes squared errors, whereas only the geometric median minimizes Euclidean distances. For instance, better Euclidean solutions can be found using k-medians and k-medoids.","a7b363f3":"The withMean argument specifies to center the data with the mean before scaling, and withStd specifies to scale the data to the unit standard deviation.","dd05f8a2":"`The weather measurements in this dataset were collected during a drought in San Diego. We can count the how many values of rain accumulation and duration are 0.`","b08f83bc":"## Decision Tree Classifier\n\n![](https:\/\/lh4.googleusercontent.com\/v9UQUwaQTAXVH90b-Ugyw2_61_uErfYvTBtG-RNRNB_eHUFq9AmAN_2IOdfOETnbXImnQVN-wPC7_YzDgf7urCeyhyx5UZmuSwV8BVsV8VnHxl1KtgpuxDifJ4pLE23ooYXLlnc)\n\nDecision tree learning is one of the predictive modelling approaches used in statistics, data mining and machine learning. It uses a decision tree (as a predictive model) to go from observations about an item (represented in the branches) to conclusions about the item's target value (represented in the leaves). Tree models where the target variable can take a discrete set of values are called classification trees; in these tree structures, leaves represent class labels and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees. Decision trees are among the most popular machine learning algorithms given their intelligibility and simplicity.","77cf856c":"`Let's compute the summary statistics using describe().`","cc294378":"The values for k are plotted against the WSSE values, and the elbow, or bend in the curve, provides a good estimate for the value for k. In this plot, we see that the elbow in the curve is between 10 and 15, so let's choose k = 12. We will use this value to set the number of clusters for k-means.","faa4a3d5":"`It is difficult to compare the cluster centers by just looking at these numbers. So we will use plots in the next step to visualize them.`","40aa4ef7":"`Since most the values for these columns are 0, let's drop them from the DataFrame to speed up our analyses. We can also drop the hpwren_timestamp column since we do not use it.`","3880d5f9":"## Confusion Metrics\n\nThe MulticlassMetrics class can be used to generate a confusion matrix of our classifier model. However, unlike MulticlassClassificationEvaluator, MulticlassMetrics works with RDDs of numbers and not DataFrames, so we need to convert our predictions DataFrame into an RDD.\n\nIf we use the rdd attribute of predictions, we see this is an RDD of Rows.","27bd83ab":"The first argument to parallel_plot selects the clusters whose relative humidities are centered less than 0.5 from the mean value. All clusters in this plot have relative_humidity < -0.5, but they differ in values for other features, meaning that there are several weather patterns that include low humidity.\n\nNote in particular cluster 4. This cluster has samples with lower-than-average wind direction values. Recall that wind direction values are in degrees, and 0 means wind coming from the North and increasing clockwise. So samples in this cluster have wind coming from the N and NE directions, with very high wind speeds, and low relative humidity. These are characteristic weather patterns for Santa Ana conditions, which greatly increase the dangers of wildfires.\n\n`Let's show clusters for \"Warm Days\", i.e., weather samples with high air temperature:`","02cc2652":"`Let's drop rows with missing values and count how many rows were dropped.`","833d3c2b":"## Read Data","0136fbef":"The last line calls the persist() method to tell Spark to keep the data in memory (if possible), which will speed up the computations.\n\n`Let's compute the k-means clusters for k = 2 to 30 to create an elbow plot.`","418966db":"`Let's make predictions using our test data set.`","9f439b7b":"## Model Evaluation\n\nModel evaluation aims to estimate the generalization accuracy of a model on future (unseen\/out-of-sample) data.\nMethods for evaluating a model\u2019s performance are divided into 2 categories: namely, holdout and Cross-validation. Both methods use a test set (i.e data not seen by the model) to evaluate model performance. It\u2019s not recommended to use the data we used to build the model to evaluate it. This is because our model will simply remember the whole training set, and will therefore always predict the correct label for any point in the training set. This is known as overfitting.\n\n`Execute the next cell to load the classes.`","643ccfcd":"Create parallel plots of clusters and analysis. A parallel coordinates plot is a great way to visualize multi-dimensional data. Each line plots the centroid of a cluster, and all of the features are plotted together. Recall that the feature values were scaled to have mean = 0 and standard deviation = 1. So the values on the y-axis of these parallel coordinates plots show the number of standard deviations from the mean. For example, +1 means one standard deviation higher than the mean of all samples, and -1 means one standard deviation lower than the mean of all samples.\n\nWe'll create the plots with matplotlib using a Pandas DataFrame each row contains the cluster center coordinates and cluster label. (Matplotlib can plot Pandas DataFrames, but not Spark DataFrames.) Let's use the pd_centers() function.","016707a2":"All clusters in this plot have relative_humidity > 0.5 and air_temp < 0.5. These clusters represent cool temperature with high humidity and possibly rainy weather patterns. For cluster 5, note that the wind speed values are high, suggesting stormy weather patterns with rain and wind.\n\n`So far, we've seen all the clusters except 2 since it did not fall into any of the other categories. Let's plot this cluster.`","09e56129":"All clusters in this plot have air_temp > 0.5, but they differ in values for other features.\n\n`Let's show clusters for \"Cool Days\", i.e., weather samples with high relative humidity and low air temperature.`","a0ec37cf":"**Create elbow plot.** The k-means algorithm requires that the value of k, the number of clusters, to be specified. To determine a good value for k, we will use the \u201celbow\u201d method. This method involves applying k-means, using different values for k, and calculating the within-cluster sum-of-squared error (WSSE). Since this means applying k-means multiple times, this process can be very compute-intensive. To speed up the process, we will use only a subset of the dataset. We will take every third sample from the dataset to create this subset.","c27f36aa":"`The confusionMatrix() function returns a Spark Matrix, which we can convert to a Python Numpy array, and transpose to view.`","f8e26a05":"`Let's create an instance of MulticlassClassificationEvaluator to determine the accuracy of the predictions.`","1fe00e3c":"`Execute the next cell, which defines the columns in the weather data we will use for the decision tree classifier.`","5f5659ce":"Save predictions to CSV. Finally, let's save the predictions to a CSV file. In the next Spark hands-on activity, we will evaluate the accuracy.\n\n`Let's save only the prediction and label columns to a CSV file.`","29c6aee8":"## Classification\n\n![](https:\/\/data-flair.training\/blogs\/wp-content\/uploads\/sites\/2\/2020\/05\/Cats-Dogs-Classification-deep-learning.gif)\n\nClassification is a type of supervised learning. It specifies the class to which data elements belong to and is best used when the output has finite and discrete values. It predicts a class for an input variable as well.\n\nThere are 2 types of Classification: \n\n1. Binomial\n2. Multi-Class\n\n### Classification: Use Cases\n\nSome of the key areas where classification cases are being used:\n\n1. To find whether an email received is a spam or ham\n2. To identify customer segments\n3. To find if a bank loan is granted\n4. To identify if a kid will pass or fail in an examination","503cad62":"`Execute the cell in the notebook to load the classes.`"}}