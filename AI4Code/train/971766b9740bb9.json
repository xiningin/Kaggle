{"cell_type":{"270dc43a":"code","035e486b":"code","193e5a24":"code","600beca1":"code","eb99ef77":"code","82ad8598":"code","643719bd":"code","aaf34c93":"code","8b47aacd":"code","e8e43551":"code","ac7fd837":"code","880d48e0":"code","b3b3084c":"code","dec6741b":"code","e91f1863":"code","77454132":"code","7faf138c":"code","f0fd7177":"code","4a83872f":"code","63309914":"code","80dd1498":"code","1170455c":"code","bb8a7e6d":"code","9c687c80":"code","67fb78df":"code","df88dcd3":"code","3f3911f5":"code","faea9a15":"code","ff2a3a0b":"code","6e14fa51":"code","0524f8d7":"code","4bee3493":"code","766b9695":"code","81725d06":"code","3893b9c4":"code","6c6a77be":"code","1911be4c":"code","2a3800bd":"code","4b7ff0e1":"code","5e4c488c":"code","db919e09":"code","7bb7d6fd":"code","3736d471":"code","aad544a6":"code","7c7f7e5a":"code","525bc77f":"code","99a513dc":"code","de33bea7":"code","12d085e1":"code","7e3e8843":"code","5d7df445":"code","34e3b0bc":"code","073d73ea":"code","1398a286":"code","bad284ac":"code","bdb166bf":"code","82afa029":"code","325b267a":"markdown","0a2572d4":"markdown","c8a03c85":"markdown","981272df":"markdown","845c966d":"markdown","5e050ee0":"markdown","d4a19384":"markdown","2d763fe1":"markdown","6cb69bfe":"markdown","93b2180c":"markdown","2b720c90":"markdown","36b5fff1":"markdown","abcdff03":"markdown","4b674514":"markdown","6d5ca444":"markdown","cd77f629":"markdown","7abc8fca":"markdown","c80f0c6d":"markdown","a0ff0b05":"markdown","b9e85b38":"markdown","e256770a":"markdown","b94e8a11":"markdown","58defea0":"markdown","3dee67e8":"markdown","7e95ed0c":"markdown","01ae48ce":"markdown","db1f38c9":"markdown","93399d9b":"markdown","e4eae848":"markdown","086e2339":"markdown","da84c390":"markdown","d8757471":"markdown","4979edbc":"markdown","c43bc874":"markdown","c2de6bb3":"markdown","9b71b330":"markdown","db21178d":"markdown","87ea1111":"markdown"},"source":{"270dc43a":"from warnings import filterwarnings\nfilterwarnings('ignore')","035e486b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import StratifiedKFold, train_test_split, cross_val_score, RandomizedSearchCV, KFold, GridSearchCV\nfrom sklearn.metrics import SCORERS, confusion_matrix, classification_report, accuracy_score, roc_curve, roc_auc_score\n\nfrom sklearn.linear_model import LogisticRegression, PassiveAggressiveClassifier, RidgeClassifier, SGDClassifier, Perceptron\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.ensemble import AdaBoostClassifier, BaggingClassifier, ExtraTreesClassifier, GradientBoostingClassifier, RandomForestClassifier\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","193e5a24":"data = pd.read_csv(\"..\/input\/titanic\/train.csv\")","600beca1":"print(f\"There are {data.shape[0]} rows and {data.shape[1]} columns in Data\")","eb99ef77":"data.isna().sum()","82ad8598":"data['Survived'] = data['Survived'].apply(lambda x: 'Not Survived' if x == 0 else 'Survived')","643719bd":"data.head()","aaf34c93":"data.drop(columns=['Cabin'], inplace=True)","8b47aacd":"data_group_by_survived = data.groupby(['Survived'])[\"Name\"].agg({'count'}).reset_index()\n\n\nf,ax=plt.subplots(1,2, figsize=(18,8))\nax[0].pie(data_group_by_survived['count'], \n       labels=data_group_by_survived['Survived'], \n       shadow=True,\n       autopct='%1.2f%%',\n       explode=(0, .04),\n       textprops={'color': 'black', 'fontsize': 14})\nax[0].set_title(\"Passengers Distribution Survied\/NotSurvived\", fontsize=18)\nax[0].set_ylabel('')\n\ng = sns.countplot('Survived',data=data,ax=ax[1])\nfor p in g.patches:\n    ax[1].annotate('{:}({:.2f}%)'.format(p.get_height(), (p.get_height()\/len(data))*100), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nax[1].set_yticks(range(0, 601, 100))\nax[1].set_xlabel(\"\")\nax[1].set_ylabel(\"Passengers Count\", fontsize=16)\nax[1].set_title('Passengers Distribution Survied\/NotSurvived', fontsize=18)\nax[1].set_xticklabels([\"Not Survived\", \"Survived\"],fontsize=14)\nax[1].set_ylabel(\"Passengers Count\", fontsize=16)\n\nplt.show()","e8e43551":"data.groupby(['Sex','Survived'])['Survived'].agg({'count'}).reset_index()","ac7fd837":"data_group_by_sex = data.groupby(['Sex'])[\"Name\"].agg({'count'}).reset_index()\n\nf,ax=plt.subplots(1,2, figsize=(18,8))\nax[0].pie(data_group_by_sex['count'], \n       labels=data_group_by_sex['Sex'], \n       shadow=True,\n       autopct='%1.2f%%',\n       explode=(0, .04),\n       textprops={'color': 'black', 'fontsize': 14})\nax[0].set_title(\"Passengers Sex Distribution\", fontsize=18)\nax[0].set_ylabel('')\n    \ng2 = sns.countplot('Survived', hue=\"Sex\", data=data,ax=ax[1])\nfor p in g2.patches:\n    ax[1].annotate('{:}({:.2f}%)'.format(p.get_height(), (p.get_height()\/len(data))*100), \n                   (p.get_x()+0.2, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\nax[1].set_title('Sex:Survived vs Dead', fontsize=18)\nplt.show()","880d48e0":"233\/(233+109), 109\/(233+109)","b3b3084c":"data.groupby(['Pclass','Survived'])['Survived'].agg({'count'}).reset_index()","dec6741b":"data_group_by_pclass = data.groupby(['Pclass'])[\"Name\"].agg({'count'}).reset_index()\n\nf,ax=plt.subplots(1,2, figsize=(18,8))\nax[0].pie(data_group_by_pclass['count'], \n       labels=data_group_by_pclass['Pclass'], \n       shadow=True,\n       autopct='%1.2f%%',\n       explode=(.02, .02, .02),\n       textprops={'color': 'black', 'fontsize': 14})\nax[0].set_title(\"Passengers Pclass Distribution\", fontsize=18)\nax[0].set_ylabel('')\n    \ng2 = sns.countplot('Survived', hue=\"Pclass\", data=data,ax=ax[1])\nfor p in g2.patches:\n    ax[1].annotate('{:}({:.2f}%)'.format(p.get_height(), (p.get_height()\/len(data))*100), \n                   (p.get_x()+0.14, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=10)\nax[1].set_title('Pclass:Survived vs Dead', fontsize=18)\nplt.show()","e91f1863":"data.groupby(['Pclass', 'Sex','Survived'])['Survived'].count()","77454132":"data_fplot_pc_du_sx = data[[\"Pclass\", 'Survived', \"Sex\"]]\ndata_fplot_pc_du_sx[\"Survived\"] = data_fplot_pc_du_sx[\"Survived\"].apply(lambda x: 1 if x == 'Survived' else 0)\nsns.factorplot('Pclass','Survived',hue='Sex',data=data_fplot_pc_du_sx)\nplt.show()","7faf138c":"print('Oldest Passenger was of:',data['Age'].max(),'Years')\nprint('Youngest Passenger was of:',data['Age'].min(),'Years')\nprint('Average Age on the ship:',data['Age'].mean(),'Years')","f0fd7177":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=data,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\n\n\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=data,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","4a83872f":"data['Initial']=0\nfor i in data:\n    data['Initial']=data.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations\n    \ndata['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)\n","63309914":"data.head(3)","80dd1498":"data.groupby('Initial')['Age'].mean()","1170455c":"## Assigning the NaN Values with the Ceil values of the mean ages\ndata.loc[(data.Age.isnull())&(data.Initial=='Mr'),'Age']=33\ndata.loc[(data.Age.isnull())&(data.Initial=='Mrs'),'Age']=36\ndata.loc[(data.Age.isnull())&(data.Initial=='Master'),'Age']=5\ndata.loc[(data.Age.isnull())&(data.Initial=='Miss'),'Age']=22\ndata.loc[(data.Age.isnull())&(data.Initial=='Other'),'Age']=46","bb8a7e6d":"data.Age.isnull().any() #So no null values left finally","9c687c80":"f,ax=plt.subplots(1,2,figsize=(20,10))\n\ndata[data['Survived']=='Not Survived'].Age.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='red')\nax[0].set_title('Not Survived')\nx1=list(range(0,85,5))\nax[0].set_xticks(x1)\n\ndata[data['Survived']=='Survived'].Age.plot.hist(ax=ax[1],color='green',bins=20,edgecolor='black')\nax[1].set_title('Survived')\nx2=list(range(0,85,5))\nax[1].set_xticks(x2)\nplt.show()","67fb78df":"data_fplot_pc_du_sx = data[[\"Pclass\", 'Survived', \"Sex\"]]\ndata_fplot_pc_du_sx[\"Survived\"] = data_fplot_pc_du_sx[\"Survived\"].apply(lambda x: 1 if x == 'Survived' else 0)\n\nsns.factorplot('Pclass','Survived',data=data_fplot_pc_du_sx)\nplt.show()","df88dcd3":"f,ax=plt.subplots(4,1,figsize=(20,20))\n\ng1 = sns.countplot('Embarked',data=data,ax=ax[0])\nax[0].set_title('No. Of Passengers Boarded')\nfor p in g1.patches:\n    ax[0].annotate('{:}({:.2f}%)'.format(p.get_height(), (p.get_height()\/len(data))*100), \n                   (p.get_x()+0.4, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\n\ng2 = sns.countplot('Embarked',hue='Sex',data=data,ax=ax[1])\nax[1].set_title('Male-Female Split for Embarked')\nfor p in g2.patches:\n    ax[1].annotate('{:}({:.2f}%)'.format(p.get_height(), (p.get_height()\/len(data))*100), \n                   (p.get_x()+0.2, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\n\ng3 = sns.countplot('Embarked',hue='Survived',data=data,ax=ax[2])\nax[2].set_title('Embarked vs Survived')\nfor p in g3.patches:\n    ax[2].annotate('{:}({:.2f}%)'.format(p.get_height(), (p.get_height()\/len(data))*100), \n                   (p.get_x()+0.2, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\n\ng4 = sns.countplot('Embarked',hue='Pclass',data=data,ax=ax[3])\nax[3].set_title('Embarked vs Pclass')\nfor p in g4.patches:\n    ax[3].annotate('{:}({:.2f}%)'.format(p.get_height(), (p.get_height()\/len(data))*100),\n                   (p.get_x()+0.14, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', \n                    fontsize=12)\n\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","3f3911f5":"data_fplot_pc_du_sx = data[[\"Pclass\", 'Survived', \"Sex\", \"Embarked\"]]\ndata_fplot_pc_du_sx[\"Survived\"] = data_fplot_pc_du_sx[\"Survived\"].apply(lambda x: 1 if x == 'Survived' else 0)\n\n\nsns.factorplot('Pclass','Survived',hue='Sex',col='Embarked',data=data_fplot_pc_du_sx)\nplt.show()","faea9a15":"data['Embarked'].mode()","ff2a3a0b":"data['Embarked'].fillna(data['Embarked'].mode()[0],inplace=True)","6e14fa51":"print('Highest Fare was:',data['Fare'].max())\nprint('Lowest Fare was:',data['Fare'].min())\nprint('Average Fare was:',data['Fare'].mean())","0524f8d7":"data.groupby(['Pclass'])['Fare'].agg({'min', 'mean', 'max'}).reset_index()","4bee3493":"f,ax=plt.subplots(1,3,figsize=(20,8))\nsns.distplot(data[data['Pclass']==1].Fare,ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\n\nsns.distplot(data[data['Pclass']==2].Fare,ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\n\nsns.distplot(data[data['Pclass']==3].Fare,ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nplt.show()","766b9695":"data['Age_band']=0\ndata.loc[data['Age']<=16,'Age_band']=0\ndata.loc[(data['Age']>16)&(data['Age']<=32),'Age_band']=1\ndata.loc[(data['Age']>32)&(data['Age']<=48),'Age_band']=2\ndata.loc[(data['Age']>48)&(data['Age']<=64),'Age_band']=3\ndata.loc[data['Age']>64,'Age_band']=4","81725d06":"data['Age_band'].value_counts().to_frame().style.background_gradient(cmap='summer')#checking the number of passenegers in each band\n","3893b9c4":"data_fplot_pc_du_sx = data[[\"Pclass\", 'Survived', \"Age_band\"]]\ndata_fplot_pc_du_sx[\"Survived\"] = data_fplot_pc_du_sx[\"Survived\"].apply(lambda x: 1 if x == 'Survived' else 0)\n\n\nsns.factorplot('Age_band','Survived',data=data_fplot_pc_du_sx,col='Pclass')\nplt.show()","6c6a77be":"data['Family_Size']=1\ndata['Family_Size']=data['Parch']+data['SibSp']#family size\n","1911be4c":"data_fplot_pc_du_sx = data[[\"Family_Size\", 'Survived']]\ndata_fplot_pc_du_sx[\"Survived\"] = data_fplot_pc_du_sx[\"Survived\"].apply(lambda x: 1 if x == 'Survived' else 0)\n\n\nsns.factorplot('Family_Size','Survived',data=data_fplot_pc_du_sx)\nplt.show()","2a3800bd":"data['Survived'] = data['Survived'].apply(lambda x: 0 if x == 'Not Survived' else 1)","4b7ff0e1":"data['Fare_Range']=pd.qcut(data['Fare'],4)\ndata.groupby(['Fare_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')","5e4c488c":"data['Fare_cat']=0\ndata.loc[data['Fare']<=7.91,'Fare_cat']=0\ndata.loc[(data['Fare']>7.91)&(data['Fare']<=14.454),'Fare_cat']=1\ndata.loc[(data['Fare']>14.454)&(data['Fare']<=31),'Fare_cat']=2\ndata.loc[(data['Fare']>31)&(data['Fare']<=513),'Fare_cat']=3","db919e09":"sns.factorplot('Fare_cat','Survived',data=data,hue='Sex')\nplt.show()","7bb7d6fd":"data['Sex'].replace(['male','female'],[0,1],inplace=True)\ndata['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\ndata['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)","3736d471":"data.drop(['Name','Age','Ticket','Fare','Fare_Range','PassengerId'],axis=1,inplace=True)","aad544a6":"sns.heatmap(data.corr(),annot=True,cmap='RdYlGn',linewidths=0.2,annot_kws={'size':20})\nfig=plt.gcf()\nfig.set_size_inches(18,15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","7c7f7e5a":"X = data.drop(columns=['Survived'])\ny = data['Survived']","525bc77f":"std_scaler = StandardScaler()\nX = std_scaler.fit_transform(X)","99a513dc":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, stratify=y, test_size=.25, shuffle=True)","de33bea7":"def model_name(key):\n    model_dict = {\n        'lrc': \"LogisticRegression\", \n        'pac': \"PassiveAggressiveClassifier\",\n        'rdc': \"RidgeClassifier\",\n        'sgc': \"SGDClassifier\",\n        'pcn': \"Perceptron\",\n        'gpc': \"GaussianProcessClassifier\",\n        'lda': \"LinearDiscriminantAnalysis\",\n        'qda': \"QuadraticDiscriminantAnalysis\",\n        'knn': \"KNeighborsClassifier\",\n        'dtc': \"DecisionTreeClassifier\", \n        'etc': \"ExtraTreesClassifier\", \n        'knn': \"KNeighborsClassifier\",\n        'gnb': \"GaussianNB\",\n        'bnb': \"BernoulliNB\",\n        'rfc': \"RandomForestClassifier\",\n        'svc': \"SVC\",\n        'lvc': \"LinearSVC\",\n        'nvc': \"NuSVC\",\n        'bgc': \"BaggingClassifier\",\n        'abc': \"AdaBoostClassifier\",\n        'gbc': \"GradientBoostingClassifier\",\n        'lgb': \"LGBMClassifier\",\n        'cgb': \"CatBoostClassifier\",\n        'xgb': \"XGBClassifier\"\n    }\n    return model_dict[key]\n\n\n\ndef init(X, y, scoring='accuracy'):    \n    result = pd.DataFrame(columns=['model', f'mean-{scoring}', f'std-{scoring}'])\n    \n    skf = StratifiedKFold(n_splits=10)\n    model_dict = {\n        'lrc': LogisticRegression(), \n        'pac': PassiveAggressiveClassifier(),\n        'rdc': RidgeClassifier(),\n        'sgc': SGDClassifier(),\n        'pcn': Perceptron(),\n        'gpc': GaussianProcessClassifier(),\n        'lda': LinearDiscriminantAnalysis(),\n        'qda': QuadraticDiscriminantAnalysis(),\n        'knn': KNeighborsClassifier(),\n        'dtc': DecisionTreeClassifier(), \n        'etc': ExtraTreesClassifier(), \n        'knn': KNeighborsClassifier(),\n        'gnb': GaussianNB(),\n        'bnb': BernoulliNB(),\n        'rfc': RandomForestClassifier(),\n        'svc': SVC(),\n        'lvc': LinearSVC(),\n        'nvc': NuSVC(),\n        'bgc': BaggingClassifier(),\n        'abc': AdaBoostClassifier(),\n        'gbc': GradientBoostingClassifier(),\n        'lgb': LGBMClassifier(),\n        'cgb': CatBoostClassifier(verbose=0),\n        'xgb': XGBClassifier()\n    }\n\n    for key in tqdm(model_dict.keys()):\n        res = cross_val_score(model_dict[key], X, y=y, scoring=scoring, cv=skf, n_jobs=-1, verbose=0)\n        res_p = pd.DataFrame(data={\n            'model': [key],\n            f'mean-{scoring}': [res.mean()],\n            f'std-{scoring}': [res.std()]\n        })\n        result = pd.concat([result, res_p], axis=0)\n    result = result.sort_values(by=[f'mean-{scoring}'], ascending=False)\n    \n    fig,ax =  plt.subplots(figsize=(20, 8), sharey=True)\n    plt.title(f\"Model vs mean {scoring}\")\n    auc_chart = sns.barplot(ax = ax, x='model', y=f'mean-{scoring}', data=result)\n    for p in auc_chart.patches:\n        auc_chart.annotate('{:.4f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', fontsize=9)\n    \n    ax.set_ylim((0,1))\n    plt.ylabel(f\"Mean of {scoring}\")\n    plt.xlabel(\"Model\")\n    plt.show()\n    \n    fig,ax =  plt.subplots(figsize=(20, 8), sharey=True)\n    plt.title(f\"Model vs {scoring} standard deviation\")\n    std_chart = sns.barplot(ax = ax, x='model', y=f'std-{scoring}', data=result)\n    for p in std_chart.patches:\n        std_chart.annotate('{:.4f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black', fontsize=9)\n    \n    ylim_val = max(result[f'std-{scoring}']) + max(result[f'std-{scoring}'])*.1\n    ax.set_ylim((0,ylim_val))\n    plt.ylabel(f\"Standard deviation of  {scoring}\")\n    plt.xlabel(\"Model\")\n    plt.show()\n    \n    return result","12d085e1":"res = init(X_train, y_train, scoring='accuracy')","7e3e8843":"res","5d7df445":"model_name('abc')","34e3b0bc":"%%time\nclf = AdaBoostClassifier()\nclf.fit(X_train, y_train)","073d73ea":"clf.score(X_train, y_train), clf.score(X_valid, y_valid)","1398a286":"roc_auc_score(y_train, clf.predict(X_train))","bad284ac":"accuracy_score(y_train, clf.predict(X_train))","bdb166bf":"print(classification_report(y_train, clf.predict(X_train)))","82afa029":"pred_prob1 = clf.predict_proba(X_train)\n\nfpr1, tpr1, thresh1 = roc_curve(y_train, pred_prob1[:,1], pos_label=1)\n\n\n# roc curve for tpr = fpr \nrandom_probs = [0 for i in range(len(y))]\np_fpr, p_tpr, _ = roc_curve(y, random_probs, pos_label=1)\n\n# plot roc curves\nfig,ax =  plt.subplots(figsize=(20, 8), sharey=True)\nplt.plot(fpr1, tpr1, linestyle='--',color='orange', label='Model Guess')\nplt.plot(p_fpr, p_tpr, linestyle='--', color='blue', label='Random Guess ')\n# title\nplt.title('ROC curve')\n# x label\nplt.xlabel('False Positive Rate')\n# y label\nplt.ylabel('True Positive rate')\n\nplt.legend(loc='best')\nplt.savefig('ROC',dpi=300)\nplt.show();","325b267a":"### Survived by Pclass","0a2572d4":"### Create new feature age_band","c8a03c85":"- clearly showing Out of 891 passengers there are only 342(38.38%) survived","981272df":"### Load useful libraries","845c966d":"### Chart for Pclass, Survived, sex","5e050ee0":"- There are 34.24% female passengers and 64.76% male passengers.\n- Out of 891 passengers total 233 female passenger survived(which is 26.15% of whole passengers)\n- Out of 891 passengers total 109 male passenger survived(which is 12.23% of whole passengers)\n- Out of 342 survived passengers, 233 are female(which is 68.13% of total survived passengers)\n- Out of 342 survived passengers, 109 are male(which is 31.87% of total survived passengers)","d4a19384":"### How many people survived","2d763fe1":" - female boarded from port C,Q, S and class 1,2 have almost 100% chance of survival.\n - Male boarded from port Q an class 1,2 have 0% chance of survival\n - Male boarded from port C and class 1 have 40% chnace of survival","6cb69bfe":"### Create new feature Family Size","93b2180c":"- Target variable have positive correlation with Fare_cat, Initial, Sex, Embarked\n- Target variable have negative correlation with Age_band, Pclass","2b720c90":"### Scale data","36b5fff1":"### Encoding features","abcdff03":"### Check for missing values","4b674514":"- lowest fare is 0.0","6d5ca444":"### Creating new feature Name Initial","cd77f629":"### Age distribution for both survived and not survived","7abc8fca":"### Create new feature Fare range","c80f0c6d":"### Survived by Sex","a0ff0b05":"### Load files","b9e85b38":"### Check correlation between features","e256770a":"- Column Age, Cabin and Embarked have missing values","b94e8a11":"### Survived by Embarked","58defea0":"### Survived by Fare","3dee67e8":"- Age_band 4 have lowest or no chance to survive\n- Age_band 0,1,2,3 have 60% ch1nce of survival in class 1\n- Age_band 1 have 90% chance of survival in class 1","7e95ed0c":"### Depp dive into age","01ae48ce":"- female have more than 70% chance of survival irrespective of Fare category\n- as fare increases chance of survival increases","db1f38c9":"- It is clear from factorplot, female have higher survival rate in all classes.\n- In class 1, 2 female passengers have more than 90% chance of survival\n- In class 2, 3 male passengers have veyr low chance","93399d9b":"- As you can see passengers age 0<=5 have survived more.\n- passengers age > 75 survived\n- most people between 30 to 40 not survuved","e4eae848":"### Problem - use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.\n<hr>\n\n\n- On April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\n- While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\n- In this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).\n\n\n#### Goal\nIt is your job to predict if a passenger survived the sinking of the Titanic or not.\nFor each in the test set, you must predict a 0 or 1 value for the variable.\n\n#### Metric\nYour score is the percentage of passengers you correctly predict. This is known as accuracy.\n\n\n#### Data Dictionary\n<br\/>\n<table width=\"100%\">\n<tbody>\n<tr><th><b>Variable<\/b><\/th><th><b>Definition<\/b><\/th><th><b>Key<\/b><\/th><\/tr>\n<tr>\n<td>survival<\/td>\n<td>Survival<\/td>\n<td>0 = No, 1 = Yes<\/td>\n<\/tr>\n<tr>\n<td>pclass<\/td>\n<td>Ticket class<\/td>\n<td>1 = 1st, 2 = 2nd, 3 = 3rd<\/td>\n<\/tr>\n<tr>\n<td>sex<\/td>\n<td>Sex<\/td>\n<td><\/td>\n<\/tr>\n<tr>\n<td>Age<\/td>\n<td>Age in years<\/td>\n<td><\/td>\n<\/tr>\n<tr>\n<td>sibsp<\/td>\n<td># of siblings \/ spouses aboard the Titanic<\/td>\n<td><\/td>\n<\/tr>\n<tr>\n<td>parch<\/td>\n<td># of parents \/ children aboard the Titanic<\/td>\n<td><\/td>\n<\/tr>\n<tr>\n<td>ticket<\/td>\n<td>Ticket number<\/td>\n<td><\/td>\n<\/tr>\n<tr>\n<td>fare<\/td>\n<td>Passenger fare<\/td>\n<td><\/td>\n<\/tr>\n<tr>\n<td>cabin<\/td>\n<td>Cabin number<\/td>\n<td><\/td>\n<\/tr>\n<tr>\n<td>embarked<\/td>\n<td>Port of Embarkation<\/td>\n<td>C = Cherbourg, Q = Queenstown, S = Southampton<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n\n\n\n\n#### Notes\n\npclass: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\nage: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.","086e2339":"- Fare for class 1 between 0 to 512.3292 and average is 84.15\n- Fare for class 2 between 0 to 073.5000 and average is 20.66\n- Fare for class 3 between 0 to 069.5500 and average is 13.67","da84c390":"### Changing traget variable value from 0, 1 to \"Not Survived\" and \"Survived\"","d8757471":"- Out of 891 passengers there are 216 (24.24%) passengers in class 1\n- Out of 891 passengers there are 184 (20.65%) passengers in class 2\n- Out of 891 passengers there are 491 (55.11%) passengers in class 3\n\n- Out of 891 passengers 136 survived(15.26%) belongs to class 1\n- Out of 891 passengers 87 survived(09.76%) belongs to class 2\n- Out of 891 passengers 119 survived(13.36%) belongs to class 3\n\n- Out of 891 passengers 80 not survived(8.8%) belongs to class 1\n- Out of 891 passengers 97 not survived(10.89%) belongs to class 2\n- Out of 891 passengers 372 not survived(41.75%) belongs to class 3\n\n- Out of 342 survived passengers 136 (39.76%) belongs to class 1\n- Out of 342 survived passengers 87 (25.43%) belongs to class 2\n- Out of 342 survived passengers 139 (34.79%) belongs to class 3\n\n- Out of 216 passengers in class 1, 136 survived which is 62.96% \n- Out of 184 passengers in class 2, 87 survived which is 45.65% \n- Out of 391 passengers in class 3, 119 survived which is 30.43% ","4979edbc":"### Drop Cabin column\n\n\nCabin column have almost 70% na values. so it's better to remove it.","c43bc874":"- Passengers who boared from S port have lowest survival chance\n- C port have highest chance of survival","c2de6bb3":"- Out of 891 passengers, 644(72.28%) boarded from S embarked\n- Out of 891 passengers, 168(18.86%) boarded from C embarked\n- Out of 891 passengers, 077(08.64%) boarded from Q embarked\n\n- Out of 891 passengers, 441(49.49%) male and 203(22.78%) female boarded from S embarked\n- Out of 891 passengers, 095(10.66%) male and 073(08.19%) female boarded from S embarked\n- Out of 891 passengers, 041(04.60%) male and 036(04.04%) female boarded from S embarked\n\n- Out of 891 passengers, 217 (24.35%) survived from S embarked\n- Out of 891 passengers, 093 (10.44%) survived from C embarked\n- Out of 891 passengers, 030 (03.37%) survived from Q embarked","9b71b330":"### Create feature, target variable","db21178d":"- As we know Age have around 177 missing values.\n- We can create a new feature Salutation\/Initial from Name. And then fill age based on Name Initial.","87ea1111":"### Drop unused features"}}