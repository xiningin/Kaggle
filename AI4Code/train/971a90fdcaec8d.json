{"cell_type":{"57c8083b":"code","c3a3b69d":"code","bb548ef8":"code","66beb036":"code","643ca184":"code","d23ffb02":"code","e21bcf50":"code","f82f1360":"code","cd91edbb":"code","9c145370":"code","20b9b8c4":"code","db192f29":"code","b549457b":"code","a3cf4e85":"code","914003be":"code","56fc18db":"code","aaecdada":"code","cf281370":"code","d8e32651":"code","763320ed":"code","9c9b545a":"code","a37f4eaf":"code","260cd2b1":"code","067fe432":"code","24925b11":"code","166560df":"code","c3d63bc5":"code","0ac22b3c":"code","a938892b":"code","cc293da1":"code","3ce96e5b":"code","527b3813":"code","252fd99a":"code","1b273869":"code","7c302894":"code","279420ad":"code","7605fe15":"code","c4c27134":"code","5e6b13f7":"code","a2ab4d42":"code","b82dc3b9":"code","5cc9fa86":"code","22662056":"code","fb541abe":"code","19c2e7f5":"code","a9a436fa":"code","409f0e82":"code","b37f6148":"markdown","f298893e":"markdown","37495941":"markdown","dff28414":"markdown","d69564b4":"markdown","44dfe806":"markdown","a23d1dbe":"markdown","52cc25dc":"markdown","0d973f5b":"markdown","7e2552f6":"markdown","6475d70e":"markdown","fd93f3aa":"markdown","f6f32da3":"markdown","ccd7cd78":"markdown","39860c8d":"markdown","b339293c":"markdown","46d74c76":"markdown","23894b81":"markdown","9c2afdb6":"markdown","8caf4b39":"markdown","887c6c74":"markdown","da788715":"markdown","19a372c6":"markdown","54fab119":"markdown","f925d9e9":"markdown","2a947db2":"markdown","ee30b722":"markdown","47c618c7":"markdown","b2bc0260":"markdown","7973cbb3":"markdown","11934c41":"markdown"},"source":{"57c8083b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","c3a3b69d":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","bb548ef8":"train.head(5)","66beb036":"train.isnull().sum()","643ca184":"sb.countplot(\"Survived\", data=train)\nplt.show()","d23ffb02":"train['Survived'].mean()\n","e21bcf50":"train.groupby(['Sex','Pclass']).mean()\n","f82f1360":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True)","cd91edbb":"bar_chart('Pclass')","9c145370":"bar_chart('Sex')","20b9b8c4":"bar_chart('Embarked')","db192f29":"bar_chart('SibSp')","b549457b":"survived = train[train['Survived']==1][train['Cabin'].isnull()==False]['Survived'].value_counts()\ndead = train[train['Survived']==0][train['Cabin'].isnull()==False]['Survived'].value_counts()\ndf = pd.DataFrame([survived,dead])\ndf.index = ['Survived','Dead']\ndf.plot(kind='bar',stacked=True)","a3cf4e85":"survived = train[train['Survived']==1][train['Cabin'].isnull()==True]['Survived'].value_counts()\ndead = train[train['Survived']==0][train['Cabin'].isnull()==True]['Survived'].value_counts()\ndf = pd.DataFrame([survived,dead])\ndf.index = ['Survived','Dead']\ndf.plot(kind='bar',stacked=True)","914003be":"import re\ncombine=[train,test]\n# train_test_df = train.append(test, ignore_index=True)\npattern = re.compile('([A-Za-z]+)\\.')\nfor dataset in combine:\n    dataset['Title'] = dataset['Name'].str.extract('([A-Za-z]+)\\.', expand=False)\ntrain['Title'].value_counts()","56fc18db":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \n                 \"Master\": 4, \"Dr\": 5, \"Rev\": 5, \"Col\": 5, \"Major\": 5, \"Mlle\": 2,\"Countess\": 4,\n                 \"Ms\": 2, \"Lady\": 4, \"Jonkheer\": 5, \"Don\": 5, \"Dona\" : 5, \"Mme\": 3,\"Capt\": 5,\"Sir\": 4 }\n\nfor dataset in combine:\n    #Mr. is 1\n    dataset['Title'] = dataset['Title'].replace(['Capt.', 'Col.', \n        'Don.', 'Dr.', 'Major.', 'Rev.', 'Jonkheer.', 'Dona.'], 'Other.')    #Other. is 5  \n\n    dataset['Title'] = dataset['Title'].replace(['Ms.', 'Mlle.'], 'Miss.')   #Miss. is 2\n\n    dataset['Title'] = dataset['Title'].replace('Mme.', 'Mrs.') # Mrs. is 4\n\n    dataset['Title'] = dataset['Title'].replace(['Lady.', 'Master.', 'Countess.', 'Sir.'], 'Royal.') # Mrs. is 4\n\n\n","aaecdada":"pd.crosstab(train['Title'], train['Sex'])","cf281370":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","d8e32651":"train.sample(10)","763320ed":"sex_mapping = {\"male\":0 , \"female\":1}\nfor dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","9c9b545a":"# I assume that these 2 features does not affect the result\ntrain.drop('Ticket', axis=1, inplace=True)\ntest.drop('Ticket', axis=1, inplace=True)","a37f4eaf":"train[\"CabinBool\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"CabinBool\"] = (test[\"Cabin\"].notnull().astype('int'))","260cd2b1":"train.drop('Cabin', axis=1, inplace=True)\ntest.drop('Cabin', axis=1, inplace=True)","067fe432":"train.sample(10)","24925b11":"train = train.fillna({\"Embarked\": \"S\"})\ntest = test.fillna({\"Embarked\": \"S\"})","166560df":"embark_mapping = {\"S\": 1, \"C\": 2, \"Q\":3}\ntrain['Embarked'] = train['Embarked'].map(embark_mapping)\ntest['Embarked'] = test['Embarked'].map(embark_mapping)","c3d63bc5":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","0ac22b3c":"train.loc[ train['Age'] <= 5, 'Age'] = 0, #Baby\ntrain.loc[(train['Age'] > 5) & (train['Age'] <= 12), 'Age'] = 1, #Child\ntrain.loc[(train['Age'] > 12) & (train['Age'] <= 18), 'Age'] = 2, #Teenager\ntrain.loc[(train['Age'] > 18) & (train['Age'] <= 24), 'Age'] = 3, #Student\ntrain.loc[(train['Age'] > 24) & (train['Age'] <= 35), 'Age'] = 4, #Young Adult\ntrain.loc[(train['Age'] > 35) & (train['Age'] <= 60), 'Age'] = 5, #Adult\ntrain.loc[ train['Age'] > 60, 'Age'] = 6 #Senior","a938892b":"test.loc[ test['Age'] <= 5, 'Age'] = 0, #Baby\ntest.loc[(test['Age'] > 5) & (test['Age'] <= 12), 'Age'] = 1, #Child\ntest.loc[(test['Age'] > 12) & (test['Age'] <= 18), 'Age'] = 2, #Teenager\ntest.loc[(test['Age'] > 18) & (test['Age'] <= 24), 'Age'] = 3, #Student\ntest.loc[(test['Age'] > 24) & (test['Age'] <= 35), 'Age'] = 4, #Young Adult\ntest.loc[(test['Age'] > 35) & (test['Age'] <= 60), 'Age'] = 5, #Adult\ntest.loc[ test['Age'] > 60, 'Age'] = 6 #Senior","cc293da1":"train.isnull().sum()","3ce96e5b":"# I assume that Fare attribute won't affect much to survivor rate so I will drop it.\ntest.drop(['Fare'], axis=1, inplace=True)\ntrain.drop(['Fare'], axis=1, inplace=True)","527b3813":"train.sample(10)","252fd99a":"combine","1b273869":"from sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nimport numpy as np","7c302894":"train_data = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train['Survived']","279420ad":"train_data.sample(15)","7605fe15":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","c4c27134":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","5e6b13f7":"round(np.mean(score)*100, 2)","a2ab4d42":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","b82dc3b9":"round(np.mean(score)*100, 2)","5cc9fa86":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","22662056":"round(np.mean(score)*100, 2)","fb541abe":"clf = LogisticRegression()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","19c2e7f5":"round(np.mean(score)*100, 2)","a9a436fa":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","409f0e82":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","b37f6148":"### 2.7 Fare Feature","f298893e":"## 3. Modelling","37495941":"### 2.2 Sex Feature","dff28414":"Most of people are come from S, followed by C and Q. The rate of survived\/unsurvived people still keep the ratio with number of people from S, C, Q","d69564b4":"### 2.3 Ticket Feature","44dfe806":"### 3.1 Using SVM","a23d1dbe":"### 2.1 Name Feature","52cc25dc":"Going without or only one Sibling or Spouse has higher chance to survive  \nGoing without any Sibling or Spouse also more likely to be dead","0d973f5b":"People whose cabin numbers not recorded are more likely to be dead","7e2552f6":"## 1. Exploring Data","6475d70e":"## 4. Testing","fd93f3aa":"### 3.4 Using Logistic Regression","f6f32da3":"### 3.2 Using Random Forest","ccd7cd78":"**Age** field lost many data  \n**Embarked** just lost 2 cell data so we can easily fill it by the most common data  \n**Cabin** lost the most with around 700 per 900 records","39860c8d":"## 5. References","b339293c":"Pclass = 3 (the lower class) is more likely to be unsurvived  \nPclass = 1 (the higher class) has more chance to overcome the disaster","46d74c76":"**Female** has higher chance to survive than **male**","23894b81":"### 1.6 Cabin feature","9c2afdb6":"**Female** tended to alive more than **Male**","8caf4b39":"- [Titanic Survival Prediction Beginner](https:\/\/www.kaggle.com\/nadintamer\/titanic-survival-predictions-beginner)\n- [Titanic Kaggle Solution by Minsuk](https:\/\/github.com\/minsuk-heo\/kaggle-titanic)","887c6c74":"### 2.4 Cabin Feature","da788715":"People whose cabin numbers are recorded has higher chance to survive","19a372c6":"### 2.5 Embark Feature","54fab119":"## 2. Feature engineering","f925d9e9":"### 1.5 SibSp feature","2a947db2":"### 1.1 Survived feature","ee30b722":"### 1.3 Sex feature","47c618c7":"### 1.2 Pclass feature","b2bc0260":"### 3.3 Using K-NN","7973cbb3":"### 1.4 Embarked feature","11934c41":"### 2.6 Age Feature"}}