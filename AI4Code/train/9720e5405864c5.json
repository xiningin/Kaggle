{"cell_type":{"971103aa":"code","065578bb":"code","4ece3a9e":"code","30c79bad":"code","ffea1088":"code","36001cef":"code","a955c1fa":"code","b8ca92f7":"code","4a434551":"code","729e1229":"code","ea0c7cbc":"code","18da9405":"code","06da1260":"code","7cafbe5b":"code","20b61a2c":"code","a55c5ee7":"code","ab945a73":"code","d78217ad":"code","95494f8f":"code","6461824b":"code","35609af8":"code","92a1fc4b":"code","b4cbce94":"code","980f2e28":"code","d142a071":"code","bbb615f5":"markdown","a98e065c":"markdown","204c7fdd":"markdown","3ec29be2":"markdown","1dbea994":"markdown","4f337a1a":"markdown","4e57f9c1":"markdown","2713a259":"markdown","c9df0040":"markdown","1575fa85":"markdown","6bb3de0a":"markdown"},"source":{"971103aa":"# Importing required packages\nimport os\nimport pandas as pd","065578bb":"data = pd.read_csv('..\/input\/d-tribe-hackathon-2020\/train\/train map.csv')","4ece3a9e":"data.head()","30c79bad":"# Creating folders with labels\nlabels = list(data.LABEL)\nfor label in labels:\n    os.makedirs(os.path.join('Training', str(label)), exist_ok = True)\n","ffea1088":"# Copying training images to their respective folder of label\noriginalTrainImage = '..\/input\/d-tribe-hackathon-2020\/train\/train'\nimport shutil\nfor i,j in data.iterrows():\n    shutil.copy(os.path.join(originalTrainImage,j.IMAGE), os.path.join('Training', str(j.LABEL), j.IMAGE))","36001cef":"import tensorflow as tf\nimport numpy as np\nimport os\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adam","a955c1fa":"# Training parameters\nDIR = '.\/Training'\nIMG_WIDTH = 128\nIMG_HEIGHT = 128\nCHANNELS = 3\nINPUT_SHAPE = (IMG_WIDTH, IMG_HEIGHT, CHANNELS)\nBATCH_SIZE = 512\nCLASSES = 291","b8ca92f7":"# Creating the Training & validation Data\n\nDIR = '.\/Training'\n\ndatagen = ImageDataGenerator(rotation_range=360, validation_split=0.20)\n\n\ntrain_generator = datagen.flow_from_directory(DIR,\n                                              target_size = (IMG_WIDTH, IMG_HEIGHT),\n                                              batch_size = BATCH_SIZE,\n                                              class_mode = 'categorical',\n                                              subset='training',\n                                              shuffle = True)\n                                                  \n\nval_generator = datagen.flow_from_directory(DIR,\n                                            target_size =(IMG_WIDTH, IMG_HEIGHT),\n                                            batch_size = BATCH_SIZE,\n                                            class_mode = 'categorical', \n                                            subset='validation',\n                                            shuffle = False)\n\ntest_generator = datagen.flow_from_directory('..\/input\/d-tribe-hackathon-2020\/test',\n                                              target_size = (IMG_WIDTH, IMG_HEIGHT),\n                                              batch_size = 768,\n                                              class_mode = 'categorical',\n                                              shuffle = False)\n                                                  ","4a434551":"# defining the model\nfrom tensorflow.keras import datasets, layers, models\n\n\nmodelCNN = models.Sequential()\n\n# adding first convolutional layer\nmodelCNN.add(layers.Conv2D(64, (3, 3), activation='relu', input_shape=INPUT_SHAPE))\nmodelCNN.add(layers.MaxPooling2D((2, 2)))\n\n# adding second convolutional layer\nmodelCNN.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodelCNN.add(layers.MaxPooling2D((2, 2)))\n\n# adding third convolutional layer\nmodelCNN.add(layers.Conv2D(128, (3, 3), activation='relu'))\n\n# flatenning\nmodelCNN.add(layers.Flatten())\n\n# Adding hidden layers \nmodelCNN.add(layers.Dense(1024))\nmodelCNN.add(layers.Dropout(0.25))\nmodelCNN.add(layers.Dense(512))\nmodelCNN.add(layers.Dropout(0.25))\nmodelCNN.add(layers.Dense(64, activation='relu'))\n\n# Adding output dense layer\nmodelCNN.add(layers.Dense(CLASSES))\n\n\n","729e1229":"modelCNN.summary()","ea0c7cbc":"from tensorflow.keras.callbacks import ModelCheckpoint\nfrom datetime import datetime\nimport tensorflow as tf","18da9405":"\nlogdir = \"logs\/logging\/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n\n\nos.makedirs('.\/model')\nmc = ModelCheckpoint('model\/eff.h5', monitor='val_loss', save_best_only = True, verbose=1)\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)\n\n","06da1260":"modelCNN.compile(loss='categorical_crossentropy',\n              optimizer=Adam(lr=1e-2), \n              metrics=['acc'])","7cafbe5b":"# Fitting the Model \nmodelCNN.fit(train_generator,\n                    steps_per_epoch=train_generator.samples \/\/ BATCH_SIZE,\n                    epochs=5,\n                    validation_data=val_generator,\n                    validation_steps = val_generator.samples \/\/ BATCH_SIZE,\n                    callbacks=[ mc, tensorboard_callback])","20b61a2c":"%load_ext tensorboard\n\n%tensorboard --logdir logs\/logging","a55c5ee7":"# You will use this dictionary to map prediction to the correct class id for it\npredMapDictionary = train_generator.class_indices\nprint(predMapDictionary)","ab945a73":"# Predicting\nprediction = modelCNN.predict(test_generator, test_generator.samples\/\/768)","d78217ad":"# list out keys and values separately\nkey_list = list(predMapDictionary.keys())\nval_list = list(predMapDictionary.values())","95494f8f":"pred = []\nfor p in prediction:\n    pred.append(key_list[val_list.index(np.argmax(p))])\nprint(pred[-10:])","6461824b":"submission = pd.read_csv('..\/input\/d-tribe-hackathon-2020\/sample submission.csv')","35609af8":"submission.head()","92a1fc4b":"# Making list of files corresponding to prediction\nfile_test = []\n\nfor files in test_generator.filenames:\n    file_test.append(files.split('\/')[1].split('.')[0])\nprint(f\"File corresponding to prediction: {file_test[:10]} ...\")","b4cbce94":"# putting prediction according to the image name\nfor i in range(len(file_test)):\n    submission.loc[submission.IMAGE == file_test[i]+\".jpg\", 'LABEL'] = int(pred[i])","980f2e28":"submission.head()","d142a071":"submission.to_csv(\"submission.csv\", index=None)","bbb615f5":"## Loading tensorboard","a98e065c":"## Compiling & Training","204c7fdd":"## Evaluation","3ec29be2":"## Creating seperate folder according to label for training to use ImageGenerator from Keras","1dbea994":"## Creating a sequential CNN model","4f337a1a":"## Creating train and test generator","4e57f9c1":"## Preparing submission","2713a259":"# **Starter Notebook**\nThis notebook is just to showcase on how you can build a model, train it using the provided dataset and predict from test set. \nYou can take your own approach and framework of your choice.","c9df0040":"## Creating checkpoint","1575fa85":"## Importing required packages from tensorflow","6bb3de0a":"Accuracy from above is less than 1% but you can change the architecture, can do some transfer learning from other CNN architecture like vgg, alexnet, resnet etc."}}