{"cell_type":{"43b8bf35":"code","454de6f5":"code","5bc81b05":"code","0bc92b7d":"code","5d384ae4":"code","36727c68":"code","66029251":"code","c852ea47":"code","0d42ac98":"code","1e849326":"code","88aa800c":"code","c2b22886":"code","0830ad64":"code","9efae0b5":"code","b3d77941":"code","51ae2d10":"code","179e9cb4":"code","f76bba05":"code","1f0c6ce1":"code","a93e86d5":"code","5628c238":"code","e5516f62":"code","4b39bd5c":"code","f2339d55":"code","b87f74e8":"code","bbc1e97e":"code","ba51aa8c":"code","f939370a":"code","63bebfa7":"code","039eb7c4":"code","b90b752c":"code","6d2a3cb4":"code","02dc88fe":"code","15012f05":"code","d239b0b9":"code","c949dd43":"code","873b10f1":"code","56c82f6e":"code","3b42b9c5":"code","8e305a66":"code","2ff062aa":"code","9b4faade":"code","32cb3d8c":"code","963fcd14":"markdown","f733322b":"markdown","90798154":"markdown","39eb6093":"markdown","afa0f642":"markdown","897faef6":"markdown","c873df30":"markdown","40504a13":"markdown","28c1d147":"markdown"},"source":{"43b8bf35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","454de6f5":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report, roc_auc_score, make_scorer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC \nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cluster import KMeans\nfrom kmodes.kmodes import KModes\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport lightgbm\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_uniform\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.metrics.pairwise import pairwise_kernels\nfrom sklearn.metrics.pairwise  import cosine_similarity\nfrom sklearn.metrics.pairwise import chi2_kernel","5bc81b05":"train= pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv', sep=',')\nsub_sample = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv', sep=',')\ntest= pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv', sep=',')","0bc92b7d":"test.info()","5d384ae4":"print(train.shape, test.shape, sub_sample.shape)","36727c68":"sub_sample.head()","66029251":"train.info()","c852ea47":"train.head()","0d42ac98":"train.isna().sum()","1e849326":"train.describe()","88aa800c":"train = train.set_index('PassengerId')","c2b22886":"train['Age'] = train['Age'].replace(np.nan, train['Age'].median())\ntrain['Fare'] = train['Fare'].replace(np.nan, train['Fare'].median())","0830ad64":"#it must require a most accurate strategy to fillna\ntrain['Embarked']= train['Embarked'].replace(np.nan, 'S')","9efae0b5":"train = train.drop(columns=['Ticket', 'Cabin'])","b3d77941":"train['Name'] = train['Name'].str.split(',',1).str[0]","51ae2d10":"train.dtypes","179e9cb4":"Define the Features to be Encoded","f76bba05":"l=[]\nfor i in train.columns:\n    if train[i].dtype=='O':\n        l.append(i)\nprint(l)","1f0c6ce1":"l2=[]\nfor i in train.columns:\n    if train[i].dtype!='O':\n        l2.append(i)\nprint(l2)","a93e86d5":"df_num = train[l2[1:]]\ndf_cat = train[l]\ndf_target = train[l2[0]]","5628c238":"import category_encoders as ce\nwoe=ce.woe.WOEEncoder(return_df=True, drop_invariant=True, handle_missing='value')\nwoe_enc=woe.fit_transform(df_cat, df_target)\nwoe_enc= woe_enc.set_index(df_cat.index)","e5516f62":"df = pd.concat([df_num, woe_enc, df_target], axis=1)","4b39bd5c":"plt.figure(figsize=(10,5))\nsns.heatmap(data=df.corr())","f2339d55":"df = df.drop(columns='Survived')","b87f74e8":"df.head()","bbc1e97e":"df_target.head()","ba51aa8c":"import optuna","f939370a":"def objective(trial , data = df , target = df_target):\n    train_x , test_x , train_y , test_y = train_test_split(data , target , \\\n            test_size = 0.028059109276941666 , random_state = 22)\n\n    #test_size = 0.028059109276941666\n    params = {\n        'reg_alpha' : trial.suggest_loguniform('reg_alpha' , 1e-5 , 10),\n        'reg_lambda' : trial.suggest_loguniform('reg_lambda' , 1e-5 , 10),\n        'num_leaves' : trial.suggest_int('num_leaves' , 11 , 800),\n        'learning_rate' : trial.suggest_uniform('learning_rate' , 0.0000001 , 0.1),\n        'max_depth' : trial.suggest_int('max_depth' , 5 , 400),\n        'n_estimators' : trial.suggest_int('n_estimators' , 1 , 9999),\n        'min_child_samples' : trial.suggest_int('min_child_samples' , 1 , 110),\n        'min_child_weight' : trial.suggest_loguniform('min_child_weight' , 1e-5 , 1),\n        'subsample' : trial.suggest_uniform('subsample' , 1e-5 , 1.0),\n        'colsample_bytree' : trial.suggest_loguniform('colsample_bytree' , 1e-5 , 1),\n        'random_state' : trial.suggest_categorical('random_state' , [1,22,2022,1509]),\n        'metric' : 'auc',\n        'device_type' : 'cpu',\n    }\n    model = lightgbm.LGBMClassifier(**params)\n    model.fit(train_x , train_y , eval_set = [(test_x , test_y)] , early_stopping_rounds = 1000 , \\\n             verbose = False)\n    preds = model.predict_proba(test_x)[:,1]\n    auc = roc_auc_score(test_y , preds)\n    return auc","63bebfa7":"study = optuna.create_study(direction = 'maximize' , study_name = 'lgbm')\nstudy.optimize(objective , n_trials = 100)\nprint('numbers of the finished trials:' , len(study.trials))\nprint('the best params:' , study.best_trial.params)\nprint('the best value:' , study.best_value)","039eb7c4":"#the best value: 0.8600080851524926\nparams={'reg_alpha': 3.5207906746166246e-05, 'reg_lambda': 9.571210867333512, 'num_leaves': 23, 'learning_rate': 0.042076158882403084, 'max_depth': 367, 'n_estimators': 3606, 'min_child_samples': 102, 'min_child_weight': 0.01526093257122045, 'subsample': 0.9975048106315406, 'colsample_bytree': 0.19751970469246108, 'random_state': 2022}","b90b752c":"test = test.set_index('PassengerId')\ntest['Age'] = test['Age'].replace(np.nan, test['Age'].median())\ntest['Fare'] = test['Fare'].replace(np.nan, test['Fare'].median())\ntest['Embarked']= test['Embarked'].replace(np.nan, 'S')\ntest = test.drop(columns=['Ticket', 'Cabin'])\ntest['Name'] = test['Name'].str.split(',',1).str[0]","6d2a3cb4":"lt=[]\nfor i in test.columns:\n    if test[i].dtype=='O':\n        lt.append(i)\nprint(lt)","02dc88fe":"lt2=[]\nfor i in test.columns:\n    if test[i].dtype!='O':\n        lt2.append(i)\nprint(lt2)","15012f05":"dft_num = test[lt2]\ndft_cat = test[lt]\ndft_target = test[lt2[0]]","d239b0b9":"woet_enc=woe.transform(dft_cat)\nwoet_enc= woet_enc.set_index(dft_cat.index)","c949dd43":"dft= pd.concat([dft_num,woet_enc], axis=1)","873b10f1":"df.head()","56c82f6e":"dft.head()","3b42b9c5":"params['metric'] = 'auc'\nparams['device'] = 'cpu'\npreds = np.zeros(dft.shape[0])\noof_preds = np.zeros(df.shape[0])\nkf = StratifiedKFold(n_splits = 10 , random_state = 22 , shuffle = True)\nroc = []\nn = 0\nfor trn_idx , val_idx in kf.split(df , df_target):\n    train_x = df.iloc[trn_idx]\n    train_y = df_target.iloc[trn_idx]\n    val_x = df.iloc[val_idx]\n    val_y = df_target.iloc[val_idx]\n    \n    model = lightgbm.LGBMClassifier(**params)\n    model.fit(train_x , train_y , eval_set = [(val_x , val_y)] , early_stopping_rounds = 2000 , \\\n             verbose = False)\n    clf = CalibratedClassifierCV(model, cv='prefit', method='sigmoid')\n    clf.fit(train_x , train_y)\n    preds += clf.predict_proba(dft)[:,1]\/kf.n_splits\n    oof_preds += clf.predict_proba(df)[:,1]\/kf.n_splits\n    roc.append(roc_auc_score(val_y , clf.predict_proba(val_x)[:,1]))\n    print(n+1 , roc[n])\n    n+=1","8e305a66":"sub_sample.head()","2ff062aa":"sub_sample['Survived'] = preds","9b4faade":"#simple threshold\nsub_sample['Survived'] = sub_sample['Survived'].apply(lambda x: 1 if x>0.5 else 0)","32cb3d8c":"sub_sample.to_csv('submission.csv',index=False)","963fcd14":"Using Only the Surname from the \"Name\" field","f733322b":"## Preprocessing the Test_set","90798154":"### Utils","39eb6093":"Fill Embarked NAN with the mode 'S'","afa0f642":"## Load Data","897faef6":"Discard for the moment Ticket and Cabin","c873df30":"# Using Optuna with Lgbm","40504a13":"### Data Preprocessing","28c1d147":"using the Median to fill all the NAN for Age and Ticket Fare"}}