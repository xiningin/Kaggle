{"cell_type":{"b0d988b2":"code","cecdbed1":"code","a9bb60fa":"code","20855755":"code","df1f9e8f":"code","b540216a":"code","654b49f0":"code","f546165b":"code","2fa1f3d5":"code","6d317b93":"code","509a0fc7":"code","f8b99e06":"code","42c34206":"code","20225bde":"code","0b35f7bc":"code","5ed9f37d":"code","0aeb2223":"code","33ade3f6":"code","4c813ff2":"code","0b5ef346":"code","7ae3a7fc":"code","94b6003f":"code","7d689645":"code","e7097714":"code","4020a8ae":"code","598d6564":"code","b7b7a3c2":"code","7268098e":"code","971d3b06":"code","384f3902":"code","6b71f45a":"code","26bb9ec1":"code","03fa1ca0":"code","c7238dce":"code","17d03678":"code","987d9c23":"code","9e9a7fea":"code","3e40ccc7":"code","e5ee7839":"code","6d489d0b":"code","adeabca5":"code","321f19a8":"code","d6cd202c":"code","076508b1":"code","dd2eccec":"code","6e46744d":"markdown","dc849475":"markdown","d0cf44c3":"markdown","b3aa3513":"markdown","51adba9a":"markdown","e22ceb8b":"markdown","e9cd1c74":"markdown","73f0d30a":"markdown","b6e304f9":"markdown","f1e1f5b9":"markdown","6c41764e":"markdown","8e8ec58c":"markdown","d141465b":"markdown","f7025fe7":"markdown","b4705560":"markdown"},"source":{"b0d988b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cecdbed1":"pd.set_option('display.max_columns', None)\ndf=pd.read_csv(\"\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv\")\ndf.head()","a9bb60fa":"df.shape","20855755":"df.info()","df1f9e8f":"df.describe()","b540216a":"df.isnull().sum()","654b49f0":"df=df.drop(\"Unnamed: 0\",axis=1)","f546165b":"df.head()","2fa1f3d5":"len(df.customerID.unique())","6d317b93":"df[\"customerID\"]=df.customerID.str.split('-').str[0]","509a0fc7":"df.head()","f8b99e06":"df_cols=[\"gender\",\"Partner\",\"Dependents\",\"PhoneService\",\"MultipleLines\",\"InternetService\",\"OnlineSecurity\",\"OnlineBackup\",\"DeviceProtection\",\"TechSupport\",\"StreamingTV\",\"StreamingMovies\",\"Contract\",\"PaperlessBilling\",\"PaymentMethod\"]\nnum_cols= ['SeniorCitizen', 'tenure', 'MonthlyCharges']","42c34206":"plt.figure(figsize= (20,40))\n\ni=1\nfor col in df_cols:\n    plt.subplot(8,2,i)\n    sns.countplot(x= 'Churn', hue=col, data=df)\n    plt.title(col + 'Variation')\n    i=i+1","20225bde":"plt.figure(figsize=(15,15))\nn= 1\nfor col in ['tenure', 'MonthlyCharges']:\n    plt.subplot(4,2,n)\n    sns.boxplot(x='Churn', y= col, data=df)\n    plt.title(col + 'Variation')\n    n=n+1","0b35f7bc":"df[num_cols].hist()","5ed9f37d":"sns.distplot(df[\"MonthlyCharges\"], bins=10, kde=True)","0aeb2223":"for i in num_cols:   \n    g = sns.FacetGrid(df, col='Churn')\n    g = g.map(sns.kdeplot, i)","33ade3f6":"def convert_x(x):\n    try:\n        return float(x)\n    except:\n        return np.NaN\ndf['TotalCharges'] = df['TotalCharges'].apply(convert_x)\ndf[\"customerID\"]=df[\"customerID\"].apply(convert_x)","4c813ff2":"x=df[\"TotalCharges\"].median()\ndf[\"TotalCharges\"]=df[\"TotalCharges\"].fillna(x)","0b5ef346":"df.isnull().sum()","7ae3a7fc":"for i in df_cols:\n    print(i,\":\",len(df[i].unique()),\"unique values\")","94b6003f":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()","7d689645":"for i in df_cols:\n    df[i]=le.fit_transform(df[i])","e7097714":"df[\"Churn\"]=le.fit_transform(df[\"Churn\"])","4020a8ae":"df.head()","598d6564":"df.info()","b7b7a3c2":"corr=df.corr()","7268098e":"plt.figure(figsize=(20,20))\nsns.heatmap(corr,annot=True)","971d3b06":"sns.pairplot(df)","384f3902":"X = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","6b71f45a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","26bb9ec1":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","03fa1ca0":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","c7238dce":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","17d03678":"from sklearn.ensemble import RandomForestClassifier\nclassifier_1 = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state = 0)\nclassifier_1.fit(X_train, y_train)","987d9c23":"y_pred_1 = classifier_1.predict(X_test)\nprint(np.concatenate((y_pred_1.reshape(len(y_pred_1),1), y_test.reshape(len(y_test),1)),1))","9e9a7fea":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred_1)\nprint(cm)\naccuracy_score(y_test, y_pred_1)","3e40ccc7":"from sklearn.naive_bayes import GaussianNB\nclassifier_2 = GaussianNB()\nclassifier_2.fit(X_train, y_train)","e5ee7839":"y_pred_2 = classifier_2.predict(X_test)\nprint(np.concatenate((y_pred_2.reshape(len(y_pred_2),1), y_test.reshape(len(y_test),1)),1))","6d489d0b":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred_2)\nprint(cm)\naccuracy_score(y_test, y_pred_2)","adeabca5":"from sklearn.neighbors import KNeighborsClassifier\nclassifier_3 = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier_3.fit(X_train, y_train)","321f19a8":"y_pred_3 = classifier_3.predict(X_test)\nprint(np.concatenate((y_pred_3.reshape(len(y_pred_3),1), y_test.reshape(len(y_test),1)),1))","d6cd202c":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred_3)\nprint(cm)\naccuracy_score(y_test, y_pred_3)","076508b1":"acc=[accuracy_score(y_test, y_pred),accuracy_score(y_test, y_pred_1),accuracy_score(y_test, y_pred_1),accuracy_score(y_test, y_pred_3)]","dd2eccec":"plt.figure(figsize= (5,6))\nsns.barplot(x= ['LogReg', 'RandomForest', 'NaiveBayes',  'KNeighbors'], y= acc)\nplt.title('Accuracy of Models')\nplt.xlabel('Training Models')\nplt.ylabel('Accuracy')\nplt.show()","6e46744d":"**PLOTTING AND COMPARING THE ACCURACIES OF THE DIFFERENT MODELS**","dc849475":"![yDe48mPiqy27ZngYUHUvdR.jpg](attachment:dfc96219-d622-456f-9a3a-e364be087e25.jpg)","d0cf44c3":"As we can see that total charges and customerID column are of 'object' datatype. So we have to convert it to either 'float' or 'int' datatype. So that we can use them in the classification model.","b3aa3513":"**K-NEAREST NEIGHBOUR**","51adba9a":"**SPLITTING THE DATASET INTO TRAINING SET AND TEST SET**","e22ceb8b":"Some more Visualisation","e9cd1c74":"**Data Visualisation**","73f0d30a":"**NAIVE BAYES**","b6e304f9":"**IMPORTING DATASETS**","f1e1f5b9":"So as we see that the column \"customerID\" is consisting of numerical and categorical values. So we will split the dataset from '-' , so that we will have the first half which is numerical.","6c41764e":"**LOGISTIC REGRESSION**","8e8ec58c":"**RANDOM FOREST CLASSIFIER**","d141465b":"Filling the missing values ","f7025fe7":"**APPLYING LABEL ENCODING TO OTHER CATEGORICAL COLUMNS**","b4705560":"**SPLITTING THE DATASET INTO DEPENDENT AND INDEPENDENT DATASET**"}}