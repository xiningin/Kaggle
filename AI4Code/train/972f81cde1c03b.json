{"cell_type":{"81c3cbbd":"code","6a0985f9":"code","3bd243f1":"code","10db3867":"code","d2834793":"code","d54a98e7":"code","d4aff97f":"code","04ceefed":"markdown","47b712ff":"markdown","a25f0716":"markdown","dc8b0fdf":"markdown","e0553a3c":"markdown","85033d92":"markdown","8fcebc02":"markdown"},"source":{"81c3cbbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a0985f9":"house_df = pd.read_csv('\/kaggle\/input\/housepricing\/HousePrices_HalfMil.csv')\nhouse_df.head()","3bd243f1":"house_df.dtypes","10db3867":"house_df.isna().any()","d2834793":"import statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\n\nX = house_df.drop(['Prices'], axis = 1)\ny = house_df[['Prices']]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\nlinear_regression = sm.OLS(y_train, sm.add_constant(X_train)).fit()\n\ny_predict = linear_regression.predict(sm.add_constant(X_test))\n\nprint('R2: ', r2_score(y_test, y_predict))","d54a98e7":"linear_regression.params","d4aff97f":"def calculate_prediction(area, garage, fireplace, baths, white_mar, black_mar, indian_mar, floors, city, solar, electric, fiber, glass_doors, pool, garden):\n    X_test = [area, garage, fireplace, baths, white_mar, black_mar, indian_mar, floors, city, solar, electric, fiber, glass_doors, pool, garden]\n    \n    result = linear_regression.params[0]\n    \n    for i, x in enumerate(X_test):\n        result += linear_regression.params[i+1] * x\n    \n    return result\n\n\nprediction = calculate_prediction(150, 1, 0, 3, 1, 0, 0, 2, 3, 0, 1, 0, 0, 0, 1)\n\nprint(f'The expected price for the above described house is of ${prediction:.2f}')","04ceefed":"## Linear regression prediction\n","47b712ff":"Attempting to predict what the cost of a house should be if it has the following values for its features:\n\nArea: 150\nGarage: 1\nFirePlace: 0\nBaths: 3\nWhite Marble: 1\nBlack Marble: 0\nIndian Marble: 0\nFloors: 2\nCity: 3\nSolar: 0\nElectric: 1\nFiber: 0\nGlass Doors: 0\nSwiming Pool: 0\nGarden: 1","a25f0716":"All columns are numerical, no need for categorical treatment\n\nChecking whether the dataset has null values","dc8b0fdf":"# House Pricing\n\n![](https:\/\/images.pexels.com\/photos\/186077\/pexels-photo-186077.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940)\n\nThis notebook intends to predict the value for a house according to determined values for its features. The implemented model is multiple linear regression","e0553a3c":"## Extracting and checking the data","85033d92":"No null values found on any colum. Operating normally","8fcebc02":"Correlation coefficient looks promising. Checking the regression coefficients"}}