{"cell_type":{"86db448f":"code","664a4aef":"code","87cfc3ed":"code","213c8c19":"code","329e3b07":"code","fa2103c2":"code","6aa5a157":"code","7c39ed4d":"code","4ebd7070":"code","23416a28":"code","59b13139":"code","344847cd":"code","1be37420":"markdown","e82d0c08":"markdown","46147d0b":"markdown","1afc51c2":"markdown","75814a2a":"markdown","f8e155ab":"markdown","44030a2f":"markdown","d8966916":"markdown","f4c3db66":"markdown","a00c6d07":"markdown","d6632e65":"markdown","633db3b9":"markdown","dcef2368":"markdown","bc6a4f9b":"markdown","3e131607":"markdown","14bbee70":"markdown","c888e05c":"markdown"},"source":{"86db448f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom keras.utils import plot_model # plot the model for visulization\nfrom sklearn.model_selection import train_test_split # split train and test set \nfrom keras.models import Sequential # sequential model to build CNN model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D # layer units that will be used to build model\nfrom keras.optimizers import Adam # optimizer that will be used\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# The output is the path that the data is stored","664a4aef":"# Read train and test data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\n# Let's have a look at how the data looks like by listing 10 data row from train data\ntrain_data.head(10)","87cfc3ed":"# Split the train data into X(features) and y(value)\nX_train = train_data.drop(labels='label', axis=1)\ny_train = train_data['label']","213c8c19":"# Check for null values in train data\nX_train.isnull().any().describe()","329e3b07":"# Check for null values in test data\ntest_data.isnull().any().describe()","fa2103c2":"# Split train and test data\n# Set the random seed\nrandom_seed = 1\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.2, random_state=random_seed)","6aa5a157":"# Convert X(features) to image-like form\nX_train = X_train.values.reshape(-1, 28, 28, 1)\nX_val = X_val.values.reshape(-1, 28, 28, 1)\ntest_data = test_data.values.reshape(-1, 28, 28, 1)\n\n\n# Do one hot encoding for both training and validation y(value)\ny_train = pd.get_dummies(y_train)\ny_val = pd.get_dummies(y_val)\n","7c39ed4d":"# Implement CNN model and fit \nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (4,4),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (4,4),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dense(10, activation = \"softmax\"))\n\noptimizer = Adam()\n\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nepochs = 3 \nbatch_size = 100\n\nhistory = model.fit(X_train, y_train, batch_size = batch_size, epochs = epochs, \\\n          validation_data = (X_val, y_val))","4ebd7070":"plot_model(model, to_file='model.png', show_shapes=True)","23416a28":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='pink', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='green', label=\"validation loss\",axes =ax[0])\n\n\nax[1].plot(history.history['accuracy'], color='pink', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='green',label=\"Validation accuracy\")","59b13139":"# For each data row, pick the one with the largest probability to be the result\nprob_result = model.predict(test_data)\nresult = np.argmax(prob_result, axis=1)\n","344847cd":"# Rename the column\nid_column = pd.Series(range(1,28001), name=\"ImageId\")\nresult_column = pd.Series(result, name=\"Label\")\nsubmission  = pd.concat([id_column, result_column], axis=1)\nsubmission.to_csv(\"output.csv\",index=False)","1be37420":"* 4.2 Set optimizer and train the model \n\nOptimizer: Adam  \nGoal: to minimize categorical crossentropy loss  \nbatch size: 100  \nepoch: 3(since the first 1-2 epoch makes the loss drops greatly, we just make it 3 to get a relatively stable validation accuracy, and save time)","e82d0c08":"# 3. Data Preparation\nRead data and do some necessary preprocessing.","46147d0b":"# 6.Submission","1afc51c2":"Make the prediction with test set, format it and submit","75814a2a":"Now let's see what the model looks like","f8e155ab":"* 4.3 Visualization of the CNN model","44030a2f":"# 5.Evaluation\nSee the trend of validation accuracy change and evaluate the validation accuracy\n","d8966916":"* 6.1 Make prediction\n","f4c3db66":"6.2 Final submission","a00c6d07":"* 5.2 Evaluate validation accuracy  \n\nThe validation accuracy is slightly higher than training accuracy, indicating the model does not overfit    \nThe validation accuracy achieves 98%, which is a good result in general","d6632e65":"* 5.1 Trend of validation accuracy \n\nThe trend of validation accuracy change is shown in the plot, the validation accuracy is increasing over epoch, as expected\n","633db3b9":"# 1.Introduction\nThe task is to recognize number(0-9) from given pictures. As for the model, we'll use and implment a CNN ","dcef2368":"* 3.2 Convert X(features) to image-like data and use one hot encoding to y(value) ","bc6a4f9b":"* 4.1 Model Design:  \n\nThe model sturcture is as fllowed:  \n\nconvolutional layer 1: 2 sets of 32 filters with 4 \\* 4 kernel size   \nmax pooling1: with size 2 \\* 2 kernel size  \nconvolutional layer 2: 2 sets of 64 filters with 3 \\* 3 kernel size  \nmax pooling2: with size 2 \\* 2 kernel size  \nflatten: convert feature maps back to 1D array  \nfully connectted layer1: 128 parameters, with activation function relu  \nfully connectted layer2: 10 parameters, with activation function softmax(10 probability to 10 separate class)  ","3e131607":"# 2.Environment setup\nGet information necessary data, and import necessary libraries ","14bbee70":"# 4. Model\nBuild and train the CNN model ","c888e05c":"* 3.1 Read data, check for null values and split it into training and validation set"}}