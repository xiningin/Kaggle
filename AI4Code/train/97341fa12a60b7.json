{"cell_type":{"c9f67801":"code","35c47e18":"code","8e61e1ae":"code","d3539daa":"code","86565164":"code","3e8b20bb":"code","ed2c0bd7":"code","e4fa27d7":"code","469c3af7":"code","1cb395db":"code","6aea181d":"code","84a3be04":"code","17a55d73":"code","b5c6f445":"code","bb9bf9f3":"code","5ff97904":"code","6aa6bd99":"markdown","4f2763ff":"markdown","6ae947d1":"markdown","3fc30889":"markdown","e31fca82":"markdown","5505fd8a":"markdown","6ac817c3":"markdown","a4022c9f":"markdown","6d19382c":"markdown","8c01fe3b":"markdown","93ea73bc":"markdown","d7d5e8b1":"markdown","ce7090ae":"markdown","1c889522":"markdown","27ce4eb4":"markdown","14e0481e":"markdown","6155cc2f":"markdown","eae3a51a":"markdown","83fb92b0":"markdown","8ef59ecf":"markdown","3a537030":"markdown","559113a3":"markdown","81104b24":"markdown"},"source":{"c9f67801":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nfrom sklearn.model_selection import train_test_split\ndef split(df,label):\n    X_tr, X_te, Y_tr, Y_te = train_test_split(df, label, test_size=0.25, random_state=42)\n    return X_tr, X_te, Y_tr, Y_te\n\n\nfrom sklearn.feature_selection import VarianceThreshold\ndef variance_threshold(df,th):\n    var_thres=VarianceThreshold(threshold=th)\n    var_thres.fit(df)\n    new_cols = var_thres.get_support()\n    return df.iloc[:,new_cols]\n    \n\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport xgboost as xgb\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold, cross_val_score\n\nclassifiers = ['LinearSVM', 'RadialSVM', \n               'Logistic',  'RandomForest', \n               'AdaBoost',  'DecisionTree', \n               'KNeighbors','GradientBoosting']\n\nmodels = [svm.SVC(kernel='linear'),\n          svm.SVC(kernel='rbf'),\n          LogisticRegression(max_iter = 1000),\n          RandomForestClassifier(n_estimators=200, random_state=0),\n          AdaBoostClassifier(random_state = 0),\n          DecisionTreeClassifier(random_state=0),\n          KNeighborsClassifier(),\n          GradientBoostingClassifier(random_state=0)]\n\ndef acc_score(df,label):\n    Score = pd.DataFrame({\"Classifier\":classifiers})\n    j = 0\n    acc = []\n    X_train,X_test,Y_train,Y_test = split(df,label)\n    for i in models:\n        model = i\n        model.fit(X_train,Y_train)\n        predictions = model.predict(X_test)\n        acc.append(accuracy_score(Y_test,predictions))\n        j = j+1     \n    Score[\"Accuracy\"] = acc\n    Score.sort_values(by=\"Accuracy\", ascending=False,inplace = True)\n    Score.reset_index(drop=True, inplace=True)\n    return Score\n\ndef acc_score_thr(df,label,thr_list):\n    Score = pd.DataFrame({\"Classifier\":classifiers})\n    for k in range(len(thr_list)):\n        df2 = variance_threshold(df,thr_list[k])\n        X_train,X_test,Y_train,Y_test = split(df2,label)\n        j = 0\n        acc = []\n        for i in models:\n            model = i\n            model.fit(X_train,Y_train)\n            predictions = model.predict(X_test)\n            acc.append(accuracy_score(Y_test,predictions))\n            j = j+1  \n        feat = str(thr_list[k])\n        Score[feat] = acc\n    return Score\n\n        \ndef plot2(df,l1,l2,p1,p2,c = \"b\"):\n    feat = []\n    feat = df.columns.tolist()\n    feat = feat[1:]\n    plt.figure(figsize = (16, 18))\n    for j in range(0,df.shape[0]):\n        value = []\n        k = 0\n        for i in range(1,len(df.columns.tolist())):\n            value.append(df.iloc[j][i])\n        plt.subplot(4, 4,j+1)\n        ax = sns.pointplot(x=feat, y=value,color = c )\n        plt.text(p1,p2,df.iloc[j][0])\n        plt.xticks(rotation=90)\n        ax.set(ylim=(l1,l2))\n        k = k+1\n        \n\ndef highlight_max(data, color='aquamarine'):\n    attr = 'background-color: {}'.format(color)\n    if data.ndim == 1:  \n        is_max = data == data.max()\n        return [attr if v else '' for v in is_max]\n    else: \n        is_max = data == data.max().max()\n        return pd.DataFrame(np.where(is_max, attr, ''),\n                            index=data.index, columns=data.columns)","35c47e18":"data_bc = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\nlabel_bc = data_bc[\"diagnosis\"]\nlabel_bc = np.where(label_bc == 'M',1,0)\ndata_bc.drop([\"id\",\"diagnosis\",\"Unnamed: 32\"],axis = 1,inplace = True)\n\nprint(\"Breast Cancer dataset:\\n\",data_bc.shape[0],\"Records\\n\",data_bc.shape[1],\"Features\")","8e61e1ae":"display(data_bc.head())\nprint(\"All the features in this dataset have continuous values\")","d3539daa":"score1 = acc_score(data_bc,label_bc)\nscore1","86565164":"threshold_bc = [0.04,0.02,0.01,0.008,0.004,0.001]\nclassifiers = score1[\"Classifier\"].tolist()\nscore_bc = acc_score_thr(data_bc,label_bc,threshold_bc)\nscore_bc.style.apply(highlight_max, subset = score_bc.columns[1:], axis=None)","3e8b20bb":"plot2(score_bc,0.90,1,2.5,0.91,c = \"gold\")","ed2c0bd7":"data_pd = pd.read_csv(\"..\/input\/parkinson-disease-detection\/Parkinsson disease.csv\")\nlabel_pd = data_pd[\"status\"]\ndata_pd.drop([\"status\",\"name\"],axis = 1,inplace = True)\n\nprint(\"Parkinson's disease dataset:\\n\",data_pd.shape[0],\"Records\\n\",data_pd.shape[1],\"Features\")","e4fa27d7":"display(data_pd.head())\nprint(\"All the features in this dataset have continuous values\")","469c3af7":"score3 = acc_score(data_pd,label_pd)\nscore3","1cb395db":"threshold_pd = [0.05,0.01,0.005,0.001,0.0001,0.0005]\nclassifiers = score3[\"Classifier\"].tolist()\nscore_pd = acc_score_thr(data_pd,label_pd,threshold_pd)\nscore_pd.style.apply(highlight_max, subset = score_pd.columns[1:], axis=None)","6aea181d":"plot2(score_pd,0.65,1.0,1,0.7,c = \"orange\")","84a3be04":"data_pcos = pd.read_csv(\"..\/input\/pcos-dataset\/PCOS_data.csv\")\nlabel_pcos = data_pcos[\"PCOS (Y\/N)\"]\ndata_pcos.drop([\"Sl. No\",\"Patient File No.\",\"PCOS (Y\/N)\",\"Unnamed: 44\",\"II    beta-HCG(mIU\/mL)\",\"AMH(ng\/mL)\"],axis = 1,inplace = True)\ndata_pcos[\"Marraige Status (Yrs)\"].fillna(data_pcos['Marraige Status (Yrs)'].describe().loc[['50%']][0], inplace = True) \ndata_pcos[\"Fast food (Y\/N)\"].fillna(1, inplace = True) \n\nprint(\"PCOS dataset:\\n\",data_pcos.shape[0],\"Records\\n\",data_pcos.shape[1],\"Features\")","17a55d73":"display(data_pcos.head())\nprint(\"The features in this dataset have both discrete and continuous values\")","b5c6f445":"score4 = acc_score(data_pcos,label_pcos)\nscore4","bb9bf9f3":"threshold_pcos = [0.17,0.19,0.21,0.23,0.5,0.8]\nclassifiers = score4[\"Classifier\"].tolist()\nscore_pcos = acc_score_thr(data_pcos,label_pcos,threshold_pcos)\nscore_pcos.style.apply(highlight_max, subset = score_pcos.columns[1:], axis=None)","5ff97904":"plot2(score_pcos,0.3,1.0,1,0.35,c = \"limegreen\")","6aa6bd99":"_______\n### Function Description\n#### 1. split():\nSplits the dataset into training and test set.\n#### 2. variance_threshold():\nReturns the dataframe after dropping features with lower variance than the threshold value.\n#### 3. acc_score():\nReturns accuracy for all the classifiers.\n#### 4. acc_score_thr():\nReturns accuracy for all the classifiers for the respective threshold value.\n#### 5. plot2():\nFor plotting the results.\n___________\n### The following 3 datasets are used:\n1. Breast Cancer\n2. Parkinson's Disease\n3. PCOS\n________\n### Plan of action:\n* Looking at dataset (includes a little preprocessing)\n* Checking Accuracy (comparing accuracies with the new dataset)\n* Visualization (Plotting the graphs)\n_______","4f2763ff":"#### Best Accuracy with all features : RandomForest Classifier - 0.972\n#### Best Accuracy after applying with VarianceThreshold() : LinearSVM - for threshold = (0.04,0.02,0.01,0.008) - 0.979\n#### Here we can only see a slight improvement.","6ae947d1":"________\n# PCOS\n________","3fc30889":"### 3. Visualization","e31fca82":"![](https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2020\/10\/Image-6-1.png)\n\n#### Features having variance lower than or equal to the threshold value will be returned as 'False' (in the array returned by .get_support()) and will be dropped. \n#### After dropping these features  we check the accuracy of the new dataset and compare it with original.\n#### For choosing the threshold values, I experimented with different numbers and chose the suitable ones.","5505fd8a":"## Feature Selection\n#### Feature selection is the process of reducing the number of input variables when developing a predictive model. It is desirable to reduce the number of input variables to both reduce the computational cost of modeling and, in some cases, to improve the performance of the model.","6ac817c3":"### 2. Checking Accuracy","a4022c9f":"## Variance Threshold\n________\n#### Variance threshold is a simple baseline approach to feature selection. It removes all features whose variance doesn\u2019t meet some threshold as it is assumed that features with a higher variance may contain more useful information. \n#### Here it is used as a feature selector that removes all low-variance features.","6d19382c":"#### From looking at these results we can see that there is a possibility of slight improvement in the accuracy after removing certain features with low variance.\n#### Link to other feature selection methods:\n##### [Genetic Algorithm](https:\/\/www.kaggle.com\/tanmayunhale\/genetic-algorithm-for-feature-selection)\n##### [Pearson Correlation](https:\/\/www.kaggle.com\/tanmayunhale\/feature-selection-pearson-correlation)\n##### [F-score](https:\/\/www.kaggle.com\/tanmayunhale\/feature-selection-f-score)\n","8c01fe3b":"#### Best Accuracy with all features : RandomForest Classifier - 0.889\n#### Best Accuracy after applying with VarianceThreshold() : DecisionTree Classifier - for threshold = (0.19) - 0.897\n#### Here we can see an improvement of ~1%.","93ea73bc":"__________","d7d5e8b1":"### 3. Visualization","ce7090ae":"### 2. Checking Accuracy","1c889522":"### 1. Looking at dataset","27ce4eb4":"#### Best Accuracy with all features : RandomForest Classifier - 0.918\n#### Best Accuracy after applying with VarianceThreshold() : RandomForest Classifier - for threshold = (0.005,0.0001,0.0005) - 0.938 and LiearSVM - for threshold = (0.0005) - 0.938\n#### Here we can see an improvement of 2%.","14e0481e":"______\n# Parkinson's disease\n_______","6155cc2f":"### 1. Looking at dataset","eae3a51a":"### 3. Visualization","83fb92b0":"______________\n# Breast Cancer\n_____________","8ef59ecf":"### 1. Looking at dataset","3a537030":"### 2. Checking Accuracy","559113a3":"________","81104b24":"### Importing the required libraries "}}