{"cell_type":{"2147c245":"code","bd4aa304":"code","a9f66372":"code","c82add9c":"code","56e3c72d":"code","d34a257c":"code","529e285c":"code","fa5e5650":"code","a3e52df8":"code","875ef5c2":"code","99172e6c":"code","1cd2aebb":"code","6015b793":"code","8c52e88f":"code","24052425":"code","c9e9126f":"code","b039aa23":"code","9c82795f":"code","5f08a5fe":"code","7a07a4ca":"code","2e8696b9":"code","26ab1817":"code","68619543":"code","9955bdba":"code","69b142b1":"code","872e536f":"code","05ac2860":"code","1f20f940":"code","cf966cb8":"code","1dcbdb14":"code","2415ab3b":"code","09e92066":"code","beb8073f":"code","c5d20db4":"code","a2912822":"code","b5ee3ac8":"code","6a10c257":"code","7f2a0d92":"code","4b5f02b8":"code","e600a00d":"code","3d297501":"code","faff277c":"code","13b235ef":"code","498c8df7":"code","0fd80bb2":"code","435adcd9":"code","45264128":"code","68be3dc4":"code","70ee9857":"code","4e999985":"code","fc87b108":"code","fa7cb8e9":"code","05083381":"code","41ae4c0e":"code","15a297da":"code","097e0ced":"code","2a493cbe":"code","5e43e3d3":"code","82e92855":"code","482ff197":"code","736893bd":"code","a579b42c":"code","2d1ded65":"code","e4594b0e":"code","b31e84db":"code","af7fac1d":"code","a913d147":"code","6c6987bc":"code","414cbeeb":"markdown","b35bb5cc":"markdown","1c103815":"markdown","f093b049":"markdown","7c79e60d":"markdown","af661ded":"markdown","4902c7e9":"markdown","e314c0e4":"markdown","584dc4ff":"markdown","4b144b5d":"markdown","84fe358d":"markdown","51d620f5":"markdown","124b262f":"markdown","d5131220":"markdown","23058ae5":"markdown","58bcd0de":"markdown","67722477":"markdown","4537491c":"markdown","afc7f925":"markdown","0bb32b86":"markdown","d3eb621c":"markdown","05505d61":"markdown","5190fba1":"markdown","1252baa9":"markdown","2c539db7":"markdown","dc9a2402":"markdown","787b4671":"markdown","c1e63f42":"markdown","336d5c78":"markdown","dba794fa":"markdown","b11582f1":"markdown","cccf6d81":"markdown","26f172b5":"markdown","3f0d8201":"markdown","e8b29d30":"markdown","946e14ee":"markdown","7df932e8":"markdown","8f8175de":"markdown","0cd4d254":"markdown","c2636cba":"markdown","8dd81c22":"markdown","62c8c1de":"markdown","89caa353":"markdown"},"source":{"2147c245":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bd4aa304":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df['PassengerId']","a9f66372":"train_df.columns","c82add9c":"train_df.head()","56e3c72d":"train_df.describe()","d34a257c":"train_df.info()","529e285c":"def bar_plot(variable):\n    \"\"\"\n        input: variable example: 'Survived'\n        output: bar plot & value count\n    \"\"\"\n    # get variable\n    var = train_df[variable]\n    # count number of categorical variable\n    varValue = var.value_counts()\n    \n    # visualization\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n{}\".format(variable, varValue))","fa5e5650":"category1 = ['Survived', 'Pclass', 'Sex', 'Embarked', 'Cabin', 'Name', 'Ticket', 'SibSp', 'Parch']\nfor c in category1:\n    bar_plot(c)","a3e52df8":"category2 = ['Cabin', 'Name', 'Ticket']\nfor c in category2:\n    print('{}\\n'.format(train_df[c].value_counts()))","875ef5c2":"def hist_plot(variable):\n    # visualization\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel('Frequency')\n    plt.title('{} distribution with histogram'.format(variable))\n    plt.show()","99172e6c":"numericVar = ['Age', 'Fare']\nfor n in numericVar:\n    hist_plot(n)","1cd2aebb":"# Pclass - Survived\ntrain_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","6015b793":"# Sex - Survived\ntrain_df[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","8c52e88f":"# SibSp - Survived\ntrain_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","24052425":"# Parch - Survived\ntrain_df[['Parch', 'Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","c9e9126f":"def detect_outlier(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # Outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step )].index\n        # Store indices\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v >2)\n    \n    return(multiple_outliers)\n    \n    ","b039aa23":"train_df.loc[detect_outlier(train_df, ['Age', 'SibSp', 'Parch', 'Fare'])]","9c82795f":"# Drop outliers\ntran_df = train_df.drop(detect_outlier(train_df, ['Age', 'SibSp', 'Parch', 'Fare']), axis = 0).reset_index(drop = True)","5f08a5fe":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","7a07a4ca":"train_df.columns[train_df.isnull().any()]","2e8696b9":"train_df.isnull().sum()","26ab1817":"train_df[train_df['Embarked'].isnull()]","68619543":"train_df.boxplot(column = 'Fare', by = 'Embarked')\nplt.show()","9955bdba":"train_df['Embarked'] = train_df['Embarked'].fillna('C')\ntrain_df[train_df['Embarked'].isnull()]","69b142b1":"train_df[train_df['Fare'].isnull()]","872e536f":"train_df['Fare'] = train_df['Fare'].fillna(np.mean(train_df[train_df['Pclass'] == 3]['Fare']))\ntrain_df[train_df['Fare'].isnull()]","05ac2860":"list1 = ['SibSp', 'Parch', 'Age', 'Fare', 'Survived']\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = '.2f')","1f20f940":"y = sns.factorplot(x= \"Pclass\", y=\"Survived\",data = train_df, kind='bar', size = 6)\ny.set_ylabels(\"Survived Probability\")\nplt.show","cf966cb8":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 20)\nplt.show()","1dcbdb14":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\")\ng.map(plt.hist, \"Age\", bins=20)\ng.add_legend()\nplt.show()","2415ab3b":"g = sns.FacetGrid(train_df, row = \"Embarked\")\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","09e92066":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\")\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","beb8073f":"train_df[train_df[\"Age\"].isnull()]","c5d20db4":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","a2912822":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"Parch\",\"SibSp\",\"Pclass\"]].corr(), annot = True)","b5ee3ac8":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","6a10c257":"train_df[train_df[\"Age\"].isnull()]","7f2a0d92":"train_df[\"Name\"].head(5)","4b5f02b8":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","e600a00d":"train_df[\"Title\"].head(10)","3d297501":"sns.countplot(x= \"Title\", data = train_df)\nplt.xticks(rotation= 90)\nplt.show()","faff277c":"#category\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(10)","13b235ef":"sns.countplot(x=\"Title\", data = train_df)\nplt.show()","498c8df7":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\ntrain_df.head()","0fd80bb2":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","435adcd9":"train_df[\"Embarked\"].head()","45264128":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","68be3dc4":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","70ee9857":"train_df[\"Ticket\"].head(10)","4e999985":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","fc87b108":"train_df[\"Ticket\"].head(10)","fa7cb8e9":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","05083381":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","41ae4c0e":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","15a297da":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","097e0ced":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","2a493cbe":"train_df.columns","5e43e3d3":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","82e92855":"train_df_len","482ff197":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","736893bd":"test.head()","a579b42c":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","2d1ded65":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","e4594b0e":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","b31e84db":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","af7fac1d":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","a913d147":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","6c6987bc":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","414cbeeb":"<a id = '6'><\/a>\n# Basic Data Analysis\nProbability of survival:\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","b35bb5cc":"<a id = '3'><\/a>\n# Univarite Variable Analysis\n * Categorical Variable\n * Numerical Variable","1c103815":"Fare seems to have correlation  with survival.","f093b049":"<a id = \"26\"><\/a><br>\n# Modeling","7c79e60d":"The function I prepared to visually see some of the values in the table.","af661ded":"<a id = \"28\"><\/a><br>\n## Simple Logistic Regression","4902c7e9":"<a id = '16'><\/a>\n### Embarked - Sex - Pclass - Survived\n\nI divided these tables into groups according to the port from which people boarded.","e314c0e4":"* float64(2) : Age and Fare\n* int64(5) : PassengerId, Survived, Pclass, SibSp and Parch\n* object(5) : Name, Sex, Ticket, Cabin, Embarked","584dc4ff":"<a id = '5'><\/a>\n## Numerical Variable\n*PassengerId, Age and Fare*","4b144b5d":"<a id = '11'><\/a>\n# Visualization","84fe358d":"<a id = '20'><\/a>\n## Name - Title","51d620f5":"<a id = '9'><\/a>\n## Find Missing Value","124b262f":"A small sample of the table","d5131220":"<a id = '10'><\/a>\n## Fill Missing Value","23058ae5":"<a id = '17'><\/a>\n### Embarked - Sex - Fare - Survived","58bcd0de":"<a id = \"30\"><\/a><br>\n## Ensemble Modeling","67722477":"<a id = \"24\"><\/a><br>\n## Sex","4537491c":"Convert sex to numeric","afc7f925":"Higher fare have more survival chance","0bb32b86":"Looked for the columns in the data set.","d3eb621c":"<a id = '19'><\/a>\n# Machine Learning","05505d61":"<a id = \"21\"><\/a><br>\n## Embarked","5190fba1":"<a id = '18'><\/a>\n### Fill missing age value","1252baa9":"<a id = \"25\"><\/a><br>\n## Drop Passenger ID and Cabin ","2c539db7":"<a id = '2'><\/a>\n# Variable Description\n1. PassengerId : Unique id to each passenger\n1. Survived : Survived = 1, Died = 0\n1. Pclass : Passenger class\n1. Name : Name of passenger\n1. Sex : Gender of passenger\n1. Age : Age of passenger\n1. SibSp : Number of Siblings\/Spouses\n1. Parch : Number of Parents\/Children\n1. Ticket : Ticket number of passenger\n1. Fare : Amount of money spent on ticket\n1. Cabin : Cabin category\n1. Embarked : Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampten)","dc9a2402":"<a id = '13'><\/a>\n### Pclass - Survived\n\nI created this table to see if the ticket class has anything to do with the chance of survival, and as you can see, someone in the higher class is more likely to survive.","787b4671":"<a id = \"31\"><\/a><br>\n## Prediction and Submission","c1e63f42":"<a id = \"29\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression\n","336d5c78":"<a id = \"23\"><\/a><br>\n## Pclass","dba794fa":"Female passenger have much more survival rate than male pasengers.","b11582f1":"Values in the table. such as total, average, standard deviation","cccf6d81":"<a id = '15'><\/a>\n### Pclass - Survived - Age\n\nI combined the two tables above and looked at the average age of survivors and deceased for each class.","26f172b5":"<a id = '4'><\/a>\n## Categorical Variable\n*Survived, Pclass, Sex, Embarked, Cabin, Name, Ticket, SibSp and Parch*","3f0d8201":"<a id = '12'><\/a>\n### Correlation between Sibsp -- Parch -- Age -- Fare -- Survived","e8b29d30":"<a id = '14'><\/a>\n### Age - Survived\n\nI created this table to see the average age of survivors and deceased.","946e14ee":"<a id = '7'><\/a>\n# Outlier Detection","7df932e8":"Age is not correlated with sex but it's correlated with parch, sibsp and pclass","8f8175de":"<a id = \"22\"><\/a><br>\n## Ticket","0cd4d254":"I created these tables to see the age and ticket price distribution on the ship.\n\nAvg age is like ~25,\nAvg fare is ~8","c2636cba":"<a id = '1'><\/a>\n# Load and Check Data\n\nRead data files.","8dd81c22":"# Introduction\nRMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean in the early morning hours of April 15, 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking one of modern history's deadliest peacetime commercial marine disasters.\n\n<font color = 'orange'>\nContent:\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univarite Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation between Sibsp - Parch - Age -- Fare - Survived](#12)\n    * [Pclass - Survived](#13)\n    * [Age - Survived](#14)\n    * [Pclass - Survived - Age](#15)\n    * [Embarked - Sex - Pclass - Survived](#16)\n    * [Embarked - Sex - Fare - Survived](#17)\n    * [Fill missing age value](#18)\n1. [Machine Learning](#19)\n    * [Name -- Title](#20)\n    * [Embarked](#21)\n    * [Ticket](#22)\n    * [Pclass](#23)\n    * [Sex](#24)\n    * [Drop Passenger ID and Cabin](#25)\n1. [Modeling](#26)\n    * [Train - Test Split](#27)\n    * [Simple Logistic Regression](#28)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#29) \n    * [Ensemble Modeling](#30)\n    * [Prediction and Submission](#31)\n    ","62c8c1de":"<a id = \"27\"><\/a><br>\n## Train - Test Split","89caa353":"<a id = '8'><\/a>\n# Missing Value\n   * Find Missing Value\n   * Fill Missing Value"}}