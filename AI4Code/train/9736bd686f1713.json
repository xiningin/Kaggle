{"cell_type":{"88bfb510":"code","58780844":"code","d66aa032":"code","ec3c53d1":"code","74c1046c":"code","3a1e7e46":"code","01880e08":"code","f0dff66e":"code","aff18666":"code","fedae693":"code","ccec5042":"code","30d7aa36":"code","36ecfaf0":"code","237c9d2a":"code","cf48a956":"code","8a0c4e0b":"code","dc0ed618":"code","0dc696a9":"code","c080f64b":"code","0a2158cb":"code","1d7e3eca":"code","f5f386ca":"code","380bccde":"markdown","61f28d90":"markdown","4e30f75e":"markdown","9b251363":"markdown","6dc1c786":"markdown","a2c7fdd2":"markdown","0be6c24b":"markdown","01a2636f":"markdown","b227acfe":"markdown","79043ec4":"markdown","ef9209a1":"markdown","35084362":"markdown","b1a00ef3":"markdown","a39b0f8f":"markdown","c5f17ef9":"markdown","9501176c":"markdown","1eb72244":"markdown","a8aac49e":"markdown","04ec2b6d":"markdown","5aaaf8c4":"markdown","08d65f92":"markdown","102763a8":"markdown"},"source":{"88bfb510":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow.keras import models, layers\nimport missingno\nimport matplotlib\nprint(\"Imports Complete\")","58780844":"# Note, the testing dataset is without the \"Survived\" column\ntrain_X = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_Y = pd.Series(train_X.Survived)\ntest_X = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine = [train_X, train_Y]\nprint(train_X.columns)\n\n# This will be useful for separating print statements\nseparator = ('\\n') + \"-\" * 80 + ('\\n')","d66aa032":"print('train_X shape is: {}'.format(train_X.shape))\nprint('test_X shape is: {}'.format(test_X.shape))","ec3c53d1":"print(train_X.head())\nprint(separator)\nprint(test_X.head())","74c1046c":"genders = {\n    \"male\": 0,\n    \"female\": 1\n}\n\n# Changing gender from string to int. So that computer can better understand the data.\nfor i in range(0, len(train_X.Sex)):\n    train_X.Sex[i] = genders[train_X.Sex[i]]\nfor i in range(0, len(test_X.Sex)):\n    test_X.Sex[i] = genders[test_X.Sex[i]]","3a1e7e46":"# Vizualization for missing data in the training set\nprint(missingno.matrix(train_X))\nblack_line = matplotlib.patches.Patch(color='gray', label='Value Present')\nwhite_line = matplotlib.patches.Patch(color='white', label='Missing Value')\nplt.legend(handles=[black_line, white_line])\n\n\n# Vizualization for missing data in the validation set\nprint(missingno.matrix(test_X))\nblack_line = matplotlib.patches.Patch(color='gray', label='Value Present')\nwhite_line = matplotlib.patches.Patch(color='white', label='Missing Value')\nplt.legend(handles=[black_line, white_line])","01880e08":"train_X.info()\nprint(separator)\ntest_X.info()","f0dff66e":"# Train\nprint(f'The number of people in the TRAINING set with missing ages is: ' + str(len(train_X.loc[train_X.Age.isnull()])))\n# There are 177 people whos age attribute is empty. \nprint('The rounded average age in the TRAINING set is: {}'.format(round(train_X.Age.mean())))\n# Since we know the average age, well fill in each row that is missing a age value as \"30\".\n\nprint(separator)\n\n# Val\nprint(f'The number of people in the VALIDATION set with missing ages is: ' + str(len(test_X.loc[test_X.Age.isnull()])))\n# There are 177 people whos age attribute is empty. \nprint('The rounded average age in the VALIDATION set is: {}'.format(round(test_X.Age.mean())))\n# Since we know the average age, well fill in each row that is missing a age value as \"30\".","aff18666":"# genders = {\n#     \"male\": 0,\n#     \"female\": 1\n# }\n\n# # Changing gender from string to int. So that computer can better understand the data.\n# for i in range(0, len(train_X.Sex)):\n#     train_X.Sex[i] = genders[train_X.Sex[i]]\n# for i in range(0, len(test_X.Sex)):\n#     test_X.Sex[i] = genders[test_X.Sex[i]]\n\n\n# If a recorded age is set to \"nan\". This will set that number to be 30. This is done for both training and val sets.\nfor i in range(0, len(train_X.Age)):\n    if train_X.Age.isnull()[i] == True:\n        train_X.Age[i] = 30\ntrain_X.Sex = train_X.Sex.astype(int)\n\nfor i in range(0, len(test_X.Age)):\n    if test_X.Age.isnull()[i] == True:\n        test_X.Age[i] = 30\ntest_X.Sex = test_X.Sex.astype(int)","fedae693":"# del train_X['Cabin']\n# del train_X['Embarked']\n# del train_X['Name']\n# del train_X['Survived']\n# del train_X['Ticket']\n\n# del test_X['Cabin']\n# del test_X['Embarked']\n# del test_X['Name']\n# del test_X['Ticket']\n\nprint(test_X.dtypes)\nprint(train_X.describe())","ccec5042":"# Plot which class had the highest survival percentage.\ntrain_X.loc[:, \"Pclass\"]\nsns.countplot(x=train_X.loc[:,\"Pclass\"], hue=train_X.Survived).legend((\"Died\", \"Survived\"))","30d7aa36":"# train_X.loc[:, (\"Pclass\", \"Survived\")].value_counts(normalize=True)\n# z = train_X.loc[:, (\"Pclass\", \"Survived\")].value_counts(normalize=True, ascending=False)\nclass_sirv_percent = train_X[[\"Survived\", \"Pclass\"]].groupby(\"Pclass\", as_index=False).mean()\nprint(class_sirv_percent)\n","36ecfaf0":"sns.barplot(x=class_sirv_percent.Pclass, y=class_sirv_percent.Survived).legend((\"First Class: 63%\", \"Second Class: 47%\", \"Third Class: 24%\"))\n# plt.figure(figsize=(16,6))\nplt.title(\"Survival Percentage With Respect to Own Class\")\nplt.ylim(0, 1)\n\n# Not sure its the best idea to have y axis range set to 1, but I think it shows how low of a chance class 3 passengers had of survival.","237c9d2a":"# plt.figure(figsize=(16,6))\ngender_plot = sns.countplot(x=train_X.Sex)","cf48a956":"# plt.figure(figsize=(16,6))\nsns.countplot(x=train_X.loc[:, \"Survived\"], hue=train_X.Sex).legend((\"Male\", \"Female\"))","8a0c4e0b":"sex_surv_perent = train_X[[\"Sex\", \"Survived\"]].groupby(\"Sex\", as_index=False).mean()\nprint(sex_surv_perent)","dc0ed618":"sns.barplot(x=train_X.Sex, y=sex_surv_perent.Survived).legend((\"Male: 18%\",\"Female: 74%\"))\nplt.title(\"Male(0) and Female(1) Survival Percentage\")\nplt.ylim((0,1))","0dc696a9":"# passengerid_series = pd.DataFrame(test_X['PassengerId'])\n# submission_df = pd.DataFrame(data={'PassengerId': passengerid_series}, dtype=int, index='PassengerId')\n# print(submission_df.head())","c080f64b":"# del train_X['PassengerId']\n# del test_X['PassengerId']","0a2158cb":"# predictions = []\n# callback = tf.keras.callbacks.EarlyStopping(\n#     min_delta=0.01,\n#     patience=20\n# )\n\n# model = models.Sequential([\n# #     layers.BatchNormalization(),\n#     layers.Dense(200, activation='sigmoid', input_shape = train_X.shape),\n#     layers.Dense(162, activation='sigmoid'),\n#     layers.Dense(32, activation='sigmoid'),\n#     layers.Dropout(.80),\n#     layers.Dense(2, activation='softmax')\n# ])\n# model.compile(optimizer='adam', loss='sparse_categorical_crossentropy')\n\n# history = model.fit(train_X, train_Y, epochs=500, callbacks=callback, verbose=0)\n# Y = model.predict(test_X)\n# for i in range(0, len(Y)):\n#     if Y[i][0] > Y[i][1]:\/\n#         predictions.append(0)\n#     else:\n#         predictions.append(1)\n# # print(predictions)\n# epochs = range(1, len(history.history['loss']) + 1)","1d7e3eca":"# print(passengerid_series.shape)\n# print(len(predictions))","f5f386ca":"# plt.figure(figsize=(16,6))\n# plt.xlabel(\"Epochs\")\n# plt.ylabel('Loss')\n# # history_df = pd.DataFrame(history.history)\n# prediction_df = pd.DataFrame({\"Survived\": predictions}, dtype=int)\n# # print(submission_df.Survived)\n# sns.lineplot(x=epochs, y=history.history['loss'])\n# # sns.lineplot(x=epochs, y=history.history['val_loss'])","380bccde":"<img src='https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/9\/91\/Titanic_Boat_Deck_plan_with_lifeboats.png\/600px-Titanic_Boat_Deck_plan_with_lifeboats.png' width=1000 height=200>","61f28d90":"<h2>Importing needed libraries<\/h2>","4e30f75e":"NOTE SECTION:\nPerhaps it may be useful for me to create a feature that is categorical. Its value would be 1 if passenger is female and first class, and 0 if not. This is because if True, it is very likely that a passenger would survive. This feature may not be neccsary though, as i may be able to do the same thing with a DescisionTreeRegressor.","9b251363":"<h2>Data Preparation<\/h2>","6dc1c786":"<img src='https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Fwww.encyclopedia-titanica.org%2Ffiles%2F1%2Ffigure-one-side-view.gif&f=1&nofb=1' width=auto height=200>","a2c7fdd2":"As we can see below, 62% of people in first class survived. Which is a really high number. This may be very useful in modeling survival.","0be6c24b":"We must understand, that this shows the percentage of survival of a passenger, with respect to everyone else in the SAME class. Not at with respecnt to everyone else aboard the titanic. As we can see from the plot, if you booked in Third Class, passengers had a 24% chance of survival or a 76% chance of mortality. On the other hand, if a passenger booked first class, they had a 63 percent chance of survival, or a 37% chance of mortality.","01a2636f":"As we can see here, there is a lot of missing data in the Age column, as well as missing data in the Cabin column. We'll have to handle the missing data below","b227acfe":"Hmm interesting, first class is closest to the deck, and has access to 2 different stair cases. I wonder which class had the highest survival percentage. Lets take a look!","79043ec4":"<center><h1>Titanic Survival Prediction Model (In progress)<\/h1><\/center>","ef9209a1":"The plot shows that if you were a female passenger, you had a 74 percent chance of surival, whereas, males only had an 18% chance of survival.","35084362":"<h2>Data Visualization Insights<\/h2>","b1a00ef3":"Notice how the Sex columns in both data sets use strings. In order to feed this feature to the neural network, we'll have to change each value to a number.","a39b0f8f":"Since the average age of each passenger in both data sets is \"30\". We'll fill in each missing value with the age \"30\". This is because 30 even though it may be incorrect for a given person, is likely the closest to their actual age.","c5f17ef9":"There are about twice as many men on the ship as there are females. Being that there were more men than female. Should males have a higer survival count than females? Lets find out.","9501176c":"<h3>Below are some pictures of the titanic. So that we can better understand where the lifeboats were located, and who had the quickest access to them.<h3>","1eb72244":"It seems that if you were in the Third Class, you had the highest chance of dying on the titanic. Lets seee how the \"Sex\" feature affected survival probability.","a8aac49e":"Initially the model was going to be a form of a deep nerual network. However, it may be more practicle to do something less complicated. Such as logistic regression.","04ec2b6d":"<h2>Model Building<\/h2>","5aaaf8c4":"It seems that the Third class had the highest chance of mortality. Lets express each class's survival rate as a percentage.","08d65f92":"Interestingly, dispite there being more male onboard than females. More females survived than males did. This makes sense, as female passengers were proitized over males, when loading passengers onto saftey boats. Hmmm, it seems that there were more men who died than female.","102763a8":"Im stuck trying to figure out how to create a datafranme where passengerId is the index, and survived is a column."}}