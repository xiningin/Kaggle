{"cell_type":{"292dbb93":"code","8028792a":"code","6eb684f2":"code","fde777a9":"code","a3aa8e03":"code","8807a8a9":"code","80e49e88":"code","913cebaf":"code","614dacc9":"code","e1907bd1":"code","5283a227":"code","d0ff932e":"code","42abea61":"code","54ccc5f8":"code","9a2e1f20":"code","a639a70e":"code","fff393e7":"code","764cddcc":"code","58b0667d":"code","7cc3db39":"code","14c2bf98":"code","66267bf7":"code","6b539910":"code","b6777cad":"code","670415df":"code","165bbf33":"code","5a2cae3d":"code","0c73f7d6":"code","2a4b3e5b":"code","343c2bff":"code","d224f226":"code","3de79f4a":"code","5879cb17":"code","46788454":"code","8796cf0d":"code","1acff5cb":"code","305e9425":"code","cf2b599e":"code","116dd7f3":"code","6fbe25d1":"code","bdfd3bd3":"code","26488d7d":"code","443924bb":"code","854df49e":"code","ba942d1d":"code","29aa99a2":"code","c80d66ce":"code","8bf28a1f":"code","c8bf4056":"code","95d84417":"code","e4edd379":"code","0ccc870a":"code","6961fa98":"code","92d438d3":"code","79cf8463":"code","916d0228":"code","e421ea23":"code","ec86b569":"code","56bf25c3":"code","56d33849":"code","58439caa":"code","b0ea3150":"code","dcaa337e":"code","baba3ab4":"code","3667ce50":"code","dfb6023e":"code","84f44fde":"code","95fa5ec2":"code","59803b03":"code","0cd63697":"code","b791db50":"code","a5974a80":"code","6a7565e9":"code","c1cb1c34":"code","b254fd89":"code","16e3f177":"code","d3f26b28":"code","b723e619":"code","2ab04c1f":"code","a211edcc":"code","e7074473":"code","c407ca41":"code","0f948896":"code","88ee72e5":"code","89708327":"code","a2329725":"code","46e9a402":"code","9fb7fbc7":"code","12a439f1":"code","d96dc374":"code","4f3b9ad1":"code","8400288e":"code","d77de5c8":"code","e8ea08b9":"code","563039ef":"code","833cc853":"code","e0dcd10b":"code","7fff8f69":"code","4c55e312":"code","6bc4506e":"code","5a322325":"code","e9890ff9":"code","c038350b":"code","485ee0d5":"code","f668e9f4":"code","49230cf9":"code","905b464b":"code","4e62076e":"code","f4e1d7d3":"code","5e0d295c":"code","0b24a046":"code","ef1a08cf":"code","e98cf3ba":"code","3506b01f":"code","eef860a6":"code","918583c6":"code","722bc972":"code","5748737d":"code","4a37c1e3":"code","ee8f13fc":"markdown","09339a79":"markdown","b1c2bd86":"markdown","0e3e3828":"markdown","8bd2b020":"markdown","bf14f534":"markdown","bf6b5bc2":"markdown","22873ad9":"markdown","b3e0aca2":"markdown","20c4f2a2":"markdown","ad3200c3":"markdown","eb23d995":"markdown","5658fbd7":"markdown","b895b773":"markdown","49c7ed30":"markdown","b57a73df":"markdown","e7bcb074":"markdown","5027fab6":"markdown","eb2dcedc":"markdown","7903ac6f":"markdown","5f3bd3bf":"markdown","3b4d578b":"markdown","1c0ae553":"markdown","2e6ac274":"markdown","132b9b90":"markdown"},"source":{"292dbb93":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","8028792a":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","6eb684f2":"train.head()","fde777a9":"X = train.drop(['PassengerId','Survived','Name','Ticket'],axis=1)\ny = train['Survived']","a3aa8e03":"X.head(15)","8807a8a9":"X.isnull().sum()[X.isnull().sum()>0]","80e49e88":"# % MISSING\n\nX.isnull().sum()[X.isnull().sum()>0]\/len(X)*100","913cebaf":"corr = X.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(7, 5))\n    ax = sns.heatmap(corr, mask=mask, vmax=.3, square=True,annot=True)","614dacc9":"def hist(column):\n    plt.hist(X[column],bins=50)\n    plt.title(column)\n    plt.show()","e1907bd1":"num_and_continuous_cols = [col for col in X.columns if X[col].dtype != 'O' and len(X[col].unique())>=5]\ncat_cols = [col for col in X.columns if X[col].dtype == 'O']","5283a227":"for col in num_and_continuous_cols:\n    hist(col)","d0ff932e":"for col in [c for c in cat_cols if c != 'Cabin']:\n    print(col)\n    print(X[col].value_counts())","42abea61":"train.head(1)","54ccc5f8":"# How many people survived in each class\n\ntrain.groupby('Pclass')['Survived'].sum().sort_values(ascending=False)","9a2e1f20":"# How many people were actually there.\n\ntrain['Pclass'].value_counts()","a639a70e":"x = ['Class 1','Class 2','Class 3']\ns1 = [136\/216*100,87\/184*100,119\/491*100]\nplt.bar(x,s1)\nplt.title(\"% of people who survived from each Passenger Class\")\n# plt.xlabel(\"Class\")\nplt.ylabel(\"% Survived\")\nplt.show()","fff393e7":"# How many people survived from each gender\n\ntrain.groupby('Sex')['Survived'].sum().sort_values(ascending=False)","764cddcc":"# How many people from each gender were actually there.\n\ntrain['Sex'].value_counts()","58b0667d":"x = ['Female','Male']\ns2 = [233\/314*100,109\/577*100]\nplt.bar(x,s2)\nplt.title(\"% of people who survived from each gender\")\nplt.xlabel(\"Gender\")\nplt.ylabel(\"% Survived\")\nplt.show()","7cc3db39":"# How many people survived for different number of siblings\/spouse they had\n\ntrain.groupby('SibSp')['Survived'].sum().sort_values(ascending=False)","14c2bf98":"# How many people of different number of siblings\/spouse were actually there.\n\ntrain['SibSp'].value_counts()","66267bf7":"x = ['0','1','2','3','4','5+']\ns3 = [210\/608*100,112\/209*100,13\/28*100,4\/16*100,3\/18*100,0\/12*100]\nplt.bar(x,s3)\nplt.title(\"% of people who survived vs # of Siblings\/Spouse\")\nplt.xlabel(\"# of Siblings\/Spouse\")\nplt.ylabel(\"% Survived\")\nplt.show()","6b539910":"# How many people survived for different Number of parents \/ children aboard the Titanic\n\ntrain.groupby('Parch')['Survived'].sum().sort_values(ascending=False)","b6777cad":"# How many people of different Number of parents \/ children aboard the Titanic were actually there.\n\ntrain['Parch'].value_counts()","670415df":"x = ['0','1','2','3','4','5+']\ns4 = [233\/678*100,65\/118*100,40\/80*100,3\/5*100,0\/4*100,1\/6*100]\nplt.bar(x,s4)\nplt.title(\"% of people who survived vs Number of parents \/ children aboard\")\nplt.xlabel(\"Number of parents \/ children aboard\")\nplt.ylabel(\"% Survived\")\nplt.show()","165bbf33":"cabin_missing = train[train['Cabin'].isnull()==True]","5a2cae3d":"cabin_missing.groupby('Pclass')['Pclass'].count().sort_values(ascending=False)","0c73f7d6":"train.groupby('Pclass')['Pclass'].count().sort_values(ascending=False)","2a4b3e5b":"cabin_missing.groupby(['Pclass','Survived'])['Survived'].count()","343c2bff":"train.groupby(['Pclass','Survived'])['Survived'].count()","d224f226":"X = train.drop(['PassengerId','Survived','Name','Ticket'],axis=1)\ny = train['Survived']","3de79f4a":"X['Embarked']=np.where(X['Embarked'].isnull(),X['Embarked'].mode()[0],X['Embarked'])","5879cb17":"X['Age'].mean()","46788454":"X['Age'].median()","8796cf0d":"X['Age']=np.where(X['Age'].isnull(),X['Age'].mean(),X['Age'])","1acff5cb":"a = np.array(X['Cabin'].isnull())\nb = np.array(X['Pclass'].isin([2,3]))\nX['Cabin']=np.where(np.logical_and(a, b),'Imp','Not Imp')","305e9425":"sns.heatmap(X.isnull(),yticklabels=False,cbar=False,cmap=\"YlGnBu\")","cf2b599e":"X.head()","116dd7f3":"s1 = np.array(s1)\ns1 = s1\/np.sum(s1)\ns2 = np.array(s2)\ns2 = s2\/np.sum(s2)\ns3 = np.array(s3)\ns3 = s3\/np.sum(s3)\ns4 = np.array(s4)\ns4 = s4\/np.sum(s4)","6fbe25d1":"s1, s2, s3, s4","bdfd3bd3":"X['Class_wts']=0\nfor i in range(len(X)):\n    if X['Pclass'].iloc[i]==1:\n        X['Class_wts'].iloc[i]=0.468\n    elif X['Pclass'].iloc[i]==2:\n        X['Class_wts'].iloc[i]=0.351\n    else:\n        X['Class_wts'].iloc[i]=0.180","26488d7d":"X['Sex_wts']=np.where(X['Sex']=='female',0.797,0.202)","443924bb":"X['SibSp_wts']=0\nfor i in range(len(X)):\n    if X['SibSp'].iloc[i]==0:\n        X['SibSp_wts'].iloc[i]=0.195\n    elif X['SibSp'].iloc[i]==1:\n        X['SibSp_wts'].iloc[i]=0.304\n    elif X['SibSp'].iloc[i]==2:\n        X['SibSp_wts'].iloc[i]=0.263\n    elif X['SibSp'].iloc[i]==3:\n        X['SibSp_wts'].iloc[i]=0.141\n    elif X['SibSp'].iloc[i]==4:\n        X['SibSp_wts'].iloc[i]=0.094\n    else:\n        X['SibSp_wts'].iloc[i]=0.0\n                        ","854df49e":"X['Parch_wts']=0\nfor i in range(len(X)):\n    if X['Parch'].iloc[i]==0:\n        X['Parch_wts'].iloc[i]=0.159\n    elif X['Parch'].iloc[i]==1:\n        X['Parch_wts'].iloc[i]=0.254\n    elif X['Parch'].iloc[i]==2:\n        X['Parch_wts'].iloc[i]=0.231\n    elif X['Parch'].iloc[i]==3:\n        X['Parch_wts'].iloc[i]=0.277\n    elif X['Parch'].iloc[i]==4:\n        X['Parch_wts'].iloc[i]=0.0\n    else:\n        X['Parch_wts'].iloc[i]=0.077","ba942d1d":"X['Cabin_wts']=np.where(X['Cabin']=='Imp',0.2,0.8)","29aa99a2":"X.head()","c80d66ce":"Full = X.copy()\nfor column in ['Embarked']:\n    temp = pd.get_dummies(Full[column],prefix=column,drop_first=True)\n    Full.drop([column],axis=1,inplace=True)\n    Full=pd.concat([Full,temp],axis=1)","8bf28a1f":"Full.head()","c8bf4056":"Full.drop(['Sex','Cabin','Fare','Cabin_wts'],axis=1,inplace=True)","95d84417":"X = Full.copy()","e4edd379":"test.head()","0ccc870a":"test.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)","6961fa98":"# % MISSING\n\ntest.isnull().sum()[test.isnull().sum()>0]\/len(test)","92d438d3":"test['Age'].mean()","79cf8463":"test['Age'].median()","916d0228":"test['Age']=np.where(test['Age'].isnull(),test['Age'].mean(),test['Age'])","e421ea23":"test['Fare'].mean()","ec86b569":"test['Fare'].median()","56bf25c3":"test['Fare']=np.where(test['Fare'].isnull(),test['Fare'].median(),test['Fare'])","56d33849":"a = np.array(test['Cabin'].isnull())\nb = np.array(test['Pclass'].isin([2,3]))\ntest['Cabin']=np.where(np.logical_and(a, b),'Imp','Not Imp')","58439caa":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap=\"YlGnBu\")","b0ea3150":"test['Class_wts']=0\nfor i in range(len(test)):\n    if test['Pclass'].iloc[i]==1:\n        test['Class_wts'].iloc[i]=0.468\n    elif test['Pclass'].iloc[i]==2:\n        test['Class_wts'].iloc[i]=0.351\n    else:\n        test['Class_wts'].iloc[i]=0.180","dcaa337e":"test['Sex_wts']=np.where(test['Sex']=='female',0.797,0.202)","baba3ab4":"test['SibSp_wts']=0\nfor i in range(len(test)):\n    if test['SibSp'].iloc[i]==0:\n        test['SibSp_wts'].iloc[i]=0.195\n    elif test['SibSp'].iloc[i]==1:\n        test['SibSp_wts'].iloc[i]=0.304\n    elif test['SibSp'].iloc[i]==2:\n        test['SibSp_wts'].iloc[i]=0.263\n    elif test['SibSp'].iloc[i]==3:\n        test['SibSp_wts'].iloc[i]=0.141\n    elif test['SibSp'].iloc[i]==4:\n        test['SibSp_wts'].iloc[i]=0.094\n    else:\n        test['SibSp_wts'].iloc[i]=0.0\n                        ","3667ce50":"test['Parch_wts']=0\nfor i in range(len(test)):\n    if test['Parch'].iloc[i]==0:\n        test['Parch_wts'].iloc[i]=0.159\n    elif test['Parch'].iloc[i]==1:\n        test['Parch_wts'].iloc[i]=0.254\n    elif test['Parch'].iloc[i]==2:\n        test['Parch_wts'].iloc[i]=0.231\n    elif test['Parch'].iloc[i]==3:\n        test['Parch_wts'].iloc[i]=0.277\n    elif test['Parch'].iloc[i]==4:\n        test['Parch_wts'].iloc[i]=0.0\n    else:\n        test['Parch_wts'].iloc[i]=0.077","dfb6023e":"test['Cabin_wts']=np.where(test['Cabin']=='Imp',0.2,0.8)","84f44fde":"test.head()","95fa5ec2":"Full = test.copy()\nfor column in ['Embarked']:\n    temp = pd.get_dummies(Full[column],prefix=column,drop_first=True)\n    Full.drop([column],axis=1,inplace=True)\n    Full=pd.concat([Full,temp],axis=1)","59803b03":"Full.head()","0cd63697":"Full.drop(['Sex','Cabin','Fare','Cabin_wts'],axis=1,inplace=True)","b791db50":"test = Full.copy()\ntest.head()","a5974a80":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\nn_estimators=[int(x) for x in np.linspace(100,2000,num=20)]\nmax_features=['auto','sqrt','log2']\nmax_depth=[int(x) for x in np.linspace(10,10000,num=20)]\nmin_samples_split=[2,5,10,14]\nmin_samples_leaf=[1,2,4,6,8]\ncriterion=['entropy','gini']","6a7565e9":"random_grid = {'n_estimators':n_estimators,\n              'max_features':max_features,\n              'max_depth':max_depth,\n              'min_samples_split':min_samples_split,\n              'min_samples_leaf':min_samples_leaf,\n              'criterion':criterion}","c1cb1c34":"rf = RandomForestClassifier()\nrf_randomCV = RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=40,\n                                cv=5,verbose=True,n_jobs=-1)","b254fd89":"rf_randomCV.fit(X,y)","16e3f177":"rf_randomCV.best_params_","d3f26b28":"rf_randomcv = rf_randomCV","b723e619":"param_grid = {\n    'criterion': [rf_randomcv.best_params_['criterion']],\n    'max_depth': [rf_randomcv.best_params_['max_depth']],\n    'max_features': [rf_randomcv.best_params_['max_features']],\n    'min_samples_leaf': [rf_randomcv.best_params_['min_samples_leaf'], \n                         rf_randomcv.best_params_['min_samples_leaf']+2, \n                         rf_randomcv.best_params_['min_samples_leaf'] + 4],\n    'min_samples_split': [rf_randomcv.best_params_['min_samples_split'] - 2,\n                          rf_randomcv.best_params_['min_samples_split'] - 1,\n                          rf_randomcv.best_params_['min_samples_split'], \n                          rf_randomcv.best_params_['min_samples_split'] +1,\n                          rf_randomcv.best_params_['min_samples_split'] + 2],\n    'n_estimators': [rf_randomcv.best_params_['n_estimators'] - 200, rf_randomcv.best_params_['n_estimators'] - 100, \n                     rf_randomcv.best_params_['n_estimators'], \n                     rf_randomcv.best_params_['n_estimators'] + 100, rf_randomcv.best_params_['n_estimators'] + 200]\n}\n\nprint(param_grid)","2ab04c1f":"rf=RandomForestClassifier()\ngrid_search=GridSearchCV(estimator=rf,param_grid=param_grid,cv=10,n_jobs=-1,verbose=2)\ngrid_search.fit(X,y)","a211edcc":"best_grid=grid_search.best_estimator_","e7074473":"y_pred=best_grid.predict(test)","c407ca41":"sub=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","0f948896":"submission=pd.concat([pd.Series(sub.PassengerId),pd.Series(y_pred)],axis=1)\nsubmission.columns = ['PassengerId','Survived']","88ee72e5":"submission.head()","89708327":"submission.to_csv('sample_submission_RF.csv',index=False)","a2329725":"import xgboost\nclf=xgboost.XGBClassifier()","46e9a402":"n_estimators = [100, 200, 400, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.01,0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4,5]\nbase_score=[0.05,0.15,0.25,0.5,0.75,1]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","9fb7fbc7":"random_cv = RandomizedSearchCV(estimator=clf,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=30,\n            n_jobs = -1,\n            verbose = True, \n            return_train_score = True)","12a439f1":"random_cv.fit(X,y)","d96dc374":"random_cv.best_estimator_","4f3b9ad1":"clf=xgboost.XGBClassifier(base_score=0.15, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.05, max_delta_step=0, max_depth=2,\n              min_child_weight=2, missing=np.nan, monotone_constraints='()',\n              n_estimators=1100, n_jobs=0, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)","8400288e":"clf.fit(X,y)","d77de5c8":"y_pred = clf.predict(test)","e8ea08b9":"submission=pd.concat([pd.Series(sub.PassengerId),pd.Series(y_pred)],axis=1)\nsubmission.columns = ['PassengerId','Survived']","563039ef":"submission.head()","833cc853":"submission.to_csv('sample_submission_XGB.csv',index=False)","e0dcd10b":"from sklearn.linear_model import LogisticRegression","7fff8f69":"logit=LogisticRegression(max_iter=500)","4c55e312":"params={'penalty':['l1','l2'],\n       'C':[0,0.05, 0.2,0.5,1,2,5]}","6bc4506e":"random_cv = RandomizedSearchCV(estimator=logit,\n            param_distributions=params,\n            cv=5, n_iter=500,\n            n_jobs = -1,\n            verbose = True, \n            return_train_score = True)","5a322325":"random_cv.fit(X,y)","e9890ff9":"random_cv.best_estimator_","c038350b":"clf=LogisticRegression(C=5, max_iter=500)","485ee0d5":"clf.fit(X,y)","f668e9f4":"y_pred = clf.predict(test)","49230cf9":"submission=pd.concat([pd.Series(sub.PassengerId),pd.Series(y_pred)],axis=1)\nsubmission.columns = ['PassengerId','Survived']","905b464b":"submission.to_csv('sample_submission_logit.csv',index=False)","4e62076e":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler","f4e1d7d3":"scaler = StandardScaler()\nscaler.fit(X)\nscaled = scaler.transform(X)\nX_scaled = pd.DataFrame(scaled,columns=X.columns[:])\nX_scaled.head()","5e0d295c":"scaler.fit(test)\nscaled = scaler.transform(test)\ntest_scaled = pd.DataFrame(scaled,columns=test.columns[:])\ntest_scaled.head()","0b24a046":"accuracy_rate = []\nfrom sklearn.model_selection import cross_val_score\n\nfor i in range(1,30):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    score=cross_val_score(knn,X_scaled,y,cv=10)\n    accuracy_rate.append(score.mean())","ef1a08cf":"plt.figure(figsize=(10,6))\nplt.plot(range(1,30),accuracy_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nplt.show()","e98cf3ba":"knn = KNeighborsClassifier(n_neighbors=22)\n\nknn.fit(X_scaled,y)\ny_pred = knn.predict(test_scaled)\nsubmission=pd.concat([pd.Series(sub.PassengerId),pd.Series(y_pred)],axis=1)\nsubmission.columns = ['PassengerId','Survived']\nsubmission.head()","3506b01f":"submission.to_csv('sample_submission_KNN.csv',index=False)","eef860a6":"from sklearn.svm import SVC\n\nparams={'C':[i for i in range(1,10)],\n       'kernel':['linear', 'poly', 'rbf', 'sigmoid'],\n       'degree':[i for i in range(1,10)],\n       'gamma':['scale', 'auto']}\n\nsvc=SVC()","918583c6":"random_cv = RandomizedSearchCV(estimator=svc,\n            param_distributions=params,\n            cv=5, n_iter=500,\n            n_jobs = -1,\n            verbose = True, \n            return_train_score = True)\n\nrandom_cv.fit(X_scaled,y)\n\nrandom_cv.best_estimator_","722bc972":"random_cv.best_params_","5748737d":"clf=SVC(kernel='rbf',gamma= 'scale', degree=2, C= 1)\nclf.fit(X_scaled,y)\ny_pred = clf.predict(test_scaled)\nsubmission=pd.concat([pd.Series(sub.PassengerId),pd.Series(y_pred)],axis=1)\nsubmission.columns = ['PassengerId','Survived']\nsubmission.to_csv('sample_submission_SVC.csv',index=False)","4a37c1e3":"clf=['Random Forest','XGBoost','Logistic Regression','KNN','SVC']\nacc_score=[0.77751,0.76555,0.77272,0.76555,0.77033]\n\nplt.barh(clf,acc_score)\nplt.xlabel('Accuracy Score')\nplt.title('Accuracy achieved by different classifiers')\nplt.xlim(0.75,0.8)\nplt.show()","ee8f13fc":"# 3. ML Models","09339a79":"## 3.3 Logistic Regression","b1c2bd86":"# 1. EDA","0e3e3828":"## 1.4 Category count of each categorical column","8bd2b020":"## 3.4 KNN","bf14f534":"# 2. Feature Engineering","bf6b5bc2":"## Let's explore how different features impacted chance of survival on Titanic","22873ad9":"Let's give weights according to probability of survival based on various features.","b3e0aca2":"- Sex","20c4f2a2":"## 3.1 Random Forest","ad3200c3":"K=22 seems a good fit.","eb23d995":"## 2.1 Handle Missing Values","5658fbd7":"## 1.3 Distribution of numerical & continuous columns","b895b773":"- Passenger Class","49c7ed30":"### There is no use of Name, PassengerId and Ticket features in prediction. Let's drop them and make X and y datasets.","b57a73df":"# 4. Various Accuracy scores I got.","e7bcb074":"Because only 2 rows are there where Embarked data is missing, we can safely substitute the NaN values with highest frequency.","5027fab6":"## 3.2 XgBoost","eb2dcedc":"## How many missing values of Cabin are there for each Passenger Class","7903ac6f":"- Number of parents \/ children aboard the Titanic","5f3bd3bf":"## 3.5 SVC","3b4d578b":"- Number of Siblings\/Spouse aboard the Titanic","1c0ae553":"## 1.2 Correlations","2e6ac274":"## 1.1 Missing Values","132b9b90":"Doing the same feature engineering in Test data as well."}}