{"cell_type":{"85155c9b":"code","6ce4c8f5":"code","32b2778d":"code","92ed0f41":"code","3f31ab17":"code","8ddba858":"code","5e250f8d":"code","379ccd44":"code","6301b7df":"code","4905a56e":"code","42ee792f":"code","86a14772":"code","cf82cc19":"code","5bf944a1":"code","ce3800a4":"code","a080b9a1":"code","1d76c18c":"code","ca32f92f":"code","177c9d20":"code","c6173779":"code","76d80729":"code","4df3a2a2":"code","09bed7f9":"code","f51fe051":"code","c9efeee9":"code","b17b4990":"code","6c1f3f78":"code","999a6a00":"code","688fa8b6":"markdown","d6cb7305":"markdown","6761951d":"markdown","df132ba1":"markdown","70f4c261":"markdown","38d2546c":"markdown","1d76c799":"markdown","29b1bca6":"markdown","9524c1ca":"markdown","a3689d54":"markdown","de120a33":"markdown","887a9de5":"markdown","1bdecb03":"markdown","58b018e6":"markdown","223e6406":"markdown","503c01d2":"markdown","9e784f96":"markdown","e56f45c9":"markdown","be0e00ec":"markdown","a9411705":"markdown","b0e29bee":"markdown","66bff93c":"markdown","d44d383b":"markdown","c568d940":"markdown","c1ae5106":"markdown","918c51ff":"markdown","6156a44a":"markdown","3de073ef":"markdown","2719db48":"markdown","b7d30a01":"markdown"},"source":{"85155c9b":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\ndf = pd.read_csv(\"..\/input\/chess\/games.csv\")","6ce4c8f5":"plt.style.use('fivethirtyeight')\ncust_color = ['#fdc029',\n'#f7c14c',\n'#f0c268',\n'#e8c381',\n'#dfc498',\n'#d4c5af',\n'#c6c6c6',\n'#a6a6a8',\n'#86868a',\n'#68686d',\n'#4b4c52',\n'#303138',\n'#171820', '#171820', '#171820', '#171820', '#171820']\nplt.rcParams['figure.figsize'] = (24,10)","32b2778d":"df[\"avg_rating\"] = (df[\"black_rating\"] + df[\"white_rating\"])\/2","92ed0f41":"df[\"avg_rating\"].max()","3f31ab17":"df[\"avg_rating\"].min()","8ddba858":"def brackets(x):\n    n=900\n    while n<2600:\n        if x <=n:\n            return f\"{n-100} - {n}\"\n        n += 100\n\ndf[\"rating_bracket\"] = df[\"avg_rating\"].apply(brackets)","5e250f8d":"df[\"rating_bracket\"].value_counts()","379ccd44":"df[\"rating_bracket\"].replace(\"800 - 900\", \"900 - 1000\", inplace = True)\ndf[\"rating_bracket\"].replace(\"900 - 1000\", \"1000 -\", inplace = True)\ndf[\"rating_bracket\"].replace(\"2400 - 2500\", \"2300 - 2400\", inplace = True)\ndf[\"rating_bracket\"].replace(\"2300 - 2400\", \"2300 +\", inplace = True)","6301b7df":"df[\"rating_bracket\"].value_counts()","4905a56e":"sns.barplot(x = df[\"rating_bracket\"].value_counts().index, y=df[\"rating_bracket\"].value_counts().values,  \n            palette=cust_color, edgecolor='black', linewidth=1.5, saturation=1.5, order = sorted(set(df[\"rating_bracket\"])))\n\nplt.title('Ratings distribution', fontname = 'monospace', weight='bold')\nplt.xlabel(\"Rating bracket\", fontname = 'monospace', weight='semibold')\nplt.ylabel(\"Count\", fontname = 'monospace', weight='semibold')\nplt.xticks(fontsize=20, rotation = 45)\nplt.yticks(fontsize=20)\nplt.show()","42ee792f":"plots = sns.barplot(x = df.groupby(\"rating_bracket\")[\"turns\"].mean().index, y=df.groupby(\"rating_bracket\")[\"turns\"].mean(),  \n            palette=cust_color, edgecolor='black', linewidth=1.5, saturation=1.5)\n\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=16, xytext=(0, 8),\n                   textcoords='offset points')\n\nplt.title('Turns by rating brackets', fontname = 'monospace', weight='bold')\nplt.xlabel(\"Rating bracket\", fontname = 'monospace', weight='semibold')\nplt.xticks(fontsize=20, rotation = 45)\nplt.ylabel(\"Average turns\", fontname = 'monospace', weight='semibold')\nplt.yticks(fontsize=20)\nplt.show()","86a14772":"len(df[\"opening_name\"].value_counts())","cf82cc19":"openings = set(df[\"opening_name\"])\nfor i in openings:\n    print(i)","5bf944a1":"df[\"opening_name\"] = df[\"opening_name\"].apply(lambda x: x.split(\":\")[0])\ndf[\"opening_name\"] = df[\"opening_name\"].apply(lambda x: x.split(\" |\")[0])\ndf[\"opening_name\"] = df[\"opening_name\"].apply(lambda x: x.split(\" #\")[0])\ndf[\"opening_name\"] = df[\"opening_name\"].apply(lambda x: x.split(\" Accepted\")[0])\ndf[\"opening_name\"] = df[\"opening_name\"].apply(lambda x: x.split(\" Declined\")[0])\ndf[\"opening_name\"] = df[\"opening_name\"].apply(lambda x: x.split(\" Refused\")[0])\n\ndf[\"opening_name\"].replace(\"King's Pawn Game\", \"King's Pawn\", inplace = True)\ndf[\"opening_name\"].replace(\"King's Pawn Opening\", \"King's Pawn\", inplace = True)\ndf[\"opening_name\"].replace(\"Old Indian Defense\", \"Old Indian\", inplace = True)\ndf[\"opening_name\"].replace(\"Queen's Pawn Game\", \"Queen's Pawn\", inplace = True)\ndf[\"opening_name\"].replace(\"Queen's Pawn Opening\", \"Queen's Pawn\", inplace = True)\ndf[\"opening_name\"].replace(\"Ware Defense\", \"Ware Opening\", inplace = True)","ce3800a4":"len(df[\"opening_name\"].value_counts())","a080b9a1":"df2 = df.groupby(\"opening_name\").filter(lambda x: len(x)>100)","1d76c18c":"df2[\"opening_name\"].value_counts()","ca32f92f":"z = df2.groupby([\"rating_bracket\", \"opening_name\"]).size().unstack().fillna(0).astype(int)\nfig, ax = plt.subplots(figsize=(32, 16))\n\nsns.heatmap(z.apply(lambda x: x\/x.sum(), axis=1), xticklabels=True, yticklabels=True, cmap='YlOrBr',\n        annot=True, linewidths=0.005, linecolor='black', annot_kws={\"fontsize\":16}, fmt='.2f', cbar=False)\n\nplt.title('Openings by ratings', fontname = 'monospace', weight='bold')\nplt.xticks(fontsize = 16)\nplt.xlabel(\"Openings\", fontname = 'monospace', weight='semibold')\nplt.yticks(fontsize=16, rotation = 45)\nplt.ylabel(\"Rating brackets\", fontname = 'monospace', weight='semibold')\nplt.show()\ndel z","177c9d20":"df3 = df.groupby([\"rating_bracket\", \"winner\"]).size().unstack().astype(int)\ndf3 = df3.div(df3.sum(axis=1), axis=0).mul(100).round(2)","c6173779":"plots = df3.plot(kind = \"bar\", alpha=0.75, color = ['#171820','#a6a6a8','#fdc029'], figsize = (24, 12),\n    width = 0.85, title = \"Outcomes by ratings\", edgecolor = \"black\")\n\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=10, xytext=(0, 8),\n                   textcoords='offset points')\n    \nplots.grid(alpha = 0.25)    \nplt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5), prop={'size': 16})\nplt.xlabel(\"Rating brackets\", fontsize = 16)\nplt.xticks(fontsize = 14, rotation = 0)\nplt.ylabel(\"Outcome percentages\", fontsize = 16)\nplt.yticks(fontsize=16)\nplt.show()","76d80729":"df2.groupby(\"opening_name\")[\"turns\"].mean().nlargest(39)","4df3a2a2":"df2.groupby(\"opening_name\")[\"turns\"].mean().nlargest(39).index","09bed7f9":"df4 = df2.groupby([\"winner\", \"opening_name\"]).size().unstack().fillna(0).astype(int)\ndf4 = df4.div(df4.sum(axis=0), axis=1).mul(100).round(2).transpose()\ndf4 = df4.reindex([\"King's Indian Defense\", \"Semi-Slav Defense\", \"Nimzo-Indian Defense\",\n       \"Indian Game\", \"Modern Defense\", 'Caro-Kann Defense', 'Slav Defense',\n       \"Queen's Pawn\", 'Ruy Lopez', 'Hungarian Opening', 'Nimzo-Larsen Attack',\n       'Philidor Defense', 'English Opening', 'Sicilian Defense',\n       \"Queen's Gambit\", 'Vienna Game', 'Four Knights Game', 'French Defense',\n       'Dutch Defense', 'Pirc Defense', 'Three Knights Opening',\n       'Horwitz Defense', 'Zukertort Opening', 'Alekhine Defense',\n       'Giuoco Piano', 'Owen Defense', 'Italian Game', 'Nimzowitsch Defense',\n       \"King's Gambit\", 'Scandinavian Defense', 'Scotch Game',\n       \"Bishop's Opening\", \"Van't Kruijs Opening\", 'Russian Game',\n       'Bird Opening', 'Center Game', \"King's Pawn\", \"King's Knight Opening\",\n       'Mieses Opening'])","f51fe051":"fig, ax = plt.subplots(figsize=(24, 10))\nsns.lineplot(data = df4, palette=['#171820','#a6a6a8','#fdc029'], dashes=[(1, 0), (1, 0), (1, 0)],\n            sort = False)\n\nplt.annotate(\"Highest draw rate (11.1%)\", xy=(1,11), xytext=(2,13), horizontalalignment=\"center\",\n             arrowprops=dict(arrowstyle='simple',lw=1, color='red') )\nplt.annotate(\"Highest white w\/r (65.6%)\", xy=(27,65.5), xytext=(28,67), horizontalalignment=\"center\",\n             arrowprops=dict(arrowstyle='simple',lw=1, color='red') )\nplt.annotate(\"Highest black w\/r (61.4%)\", xy=(32,61.4), xytext=(32,65), horizontalalignment=\"center\",\n             arrowprops=dict(arrowstyle='simple',lw=1, color='red') )\n\nplt.title('Opening victors (sorted by descending average turns per opening)', \n          fontname = 'monospace', weight='bold')\nplt.legend(prop={'size': 16})\nplt.xlabel(\"Openings\", fontsize = 16)\nplt.xticks(fontsize = 16, rotation = 90)\nplt.ylabel(\"Outcome (%)\", fontsize = 16)\nplt.yticks(fontsize=16)\n\nplt.show()","c9efeee9":"df2[\"victory_status\"].value_counts()","b17b4990":"df5 = df2.groupby([\"victory_status\", \"opening_name\"]).size().unstack().fillna(0).astype(int)\ndf5 = df5.div(df5.sum(axis=0), axis=1).mul(100).round(2).transpose()\ndf5 = df5.reindex([\"King's Indian Defense\", \"Semi-Slav Defense\", \"Nimzo-Indian Defense\",\n       \"Indian Game\", \"Modern Defense\", 'Caro-Kann Defense', 'Slav Defense',\n       \"Queen's Pawn\", 'Ruy Lopez', 'Hungarian Opening', 'Nimzo-Larsen Attack',\n       'Philidor Defense', 'English Opening', 'Sicilian Defense',\n       \"Queen's Gambit\", 'Vienna Game', 'Four Knights Game', 'French Defense',\n       'Dutch Defense', 'Pirc Defense', 'Three Knights Opening',\n       'Horwitz Defense', 'Zukertort Opening', 'Alekhine Defense',\n       'Giuoco Piano', 'Owen Defense', 'Italian Game', 'Nimzowitsch Defense',\n       \"King's Gambit\", 'Scandinavian Defense', 'Scotch Game',\n       \"Bishop's Opening\", \"Van't Kruijs Opening\", 'Russian Game',\n       'Bird Opening', 'Center Game', \"King's Pawn\", \"King's Knight Opening\",\n       'Mieses Opening'])","6c1f3f78":"fig, ax = plt.subplots(figsize=(24, 10))\nsns.lineplot(data = df5, palette=['#a6a6a8', \"#171820\", '#dfc498','#fdc029'], dashes=[(1, 0), (1, 0), (1, 0), (1, 0)],\n            sort = False)\n\nplt.annotate(\"Draw rate is different from previous table!(10.2%)\", xy=(1,11), xytext=(6,16), horizontalalignment=\"center\",\n             arrowprops=dict(arrowstyle='simple',lw=1, color='red') )\n\nplt.title('Openings outcomes (sorted by descending average turns per opening)', \n          fontname = 'monospace', weight='bold')\nplt.legend(prop={'size': 16})\nplt.xlabel(\"Openings\", fontsize = 16)\nplt.xticks(fontsize = 16, rotation = 90)\nplt.ylabel(\"Outcome (%)\", fontsize = 16)\nplt.yticks(fontsize=16)\n\nplt.show()","999a6a00":"df2[(df2[\"winner\"] == \"draw\") & (df2[\"victory_status\"] != \"draw\")]\nlen(df2[(df2[\"winner\"] == \"draw\") & (df2[\"victory_status\"] != \"draw\")])","688fa8b6":"As we can see, roughly half of all the games end in a resignation. Which is to be expected: if a player feels dominated, or has some immediate responsibilities to address, he'll end the game prematurely.","d6cb7305":"Now that we're done with cleaning up our dataset, let's continue exploring. Let's take a look at each opening's frequency at every rating bracket.","6761951d":"Great. Now we'll create another dataframe where we'll compare each opening's outcomes. Also, we'll sort the openings by how many turns they last. If this sounds confusing, I promise it'll be much clearer once we visualize our findings.","df132ba1":"Now to the elephant: there are 2 (3 if you're attentive) openings that stand out. Each of them has a tendency:\n1. King's Pawn - decreases gradually as the rating bracket goes up. Meaning that as a player's rating increases, the likelihood of him encountering this opening decreases.\n2. Scandinavian Defence - same as King's Pawn, just not as sharp of a decline.\n3. Sicilian Defense - the opposite of the two previously mentioned. As a player's rating increases, the likelihood of him encountering this opening increases as well.","70f4c261":"Great. Let's take a look at the visual representation of our ratings brackets:","38d2546c":"2. There is a single opening, where \"mate\" rate is higher than \"resign\" rate. It's the Center Game.\n3. There are three instances of openings having a higher \"draw\" rate than \"out-of-time\" rate: Semi-Slav Defense, Zukertort Opening, Bird Opening.","1d76c799":"We can clearly see a gradual increase in average turns count, as we move up the rating bracket axis. This can be explained by the following insights: \n* The more experienced the two players are, the bigger the likelihood for a game to reach the end-game stage.\n* Experienced players are less likely to be caught off-guard by an unseen opening, knowing exactly how to react.\n* The smaller the ratings of two players, the higher the likelihood of blunders occuring, meaning that a player might lose a winning game in just one turn.","29b1bca6":"Before visualizing this distribution, let's merge the smallest brackets, thus decreasing bias.","9524c1ca":"# 2.2. Openings by Ratings\n\nNext, let's take a look at our openings.","a3689d54":"Before tackling the elephant in the room (or, in this case, the table), I will mention that the table functions as expected: the more instances an opening has, the darker it's overall \"column\".","de120a33":"Something seems off. There's 1,477 openings for 20,058 games. Let's inspect.","887a9de5":"Let's see if this is the case with all of the openings. We'll create a similar lineplot as before, keeping the x axis sort. Only this time we'll compare the outcome types, rather than player color distribution.","1bdecb03":"Now lets take a look at what we're dealing here.","58b018e6":"# 1. Introduction\n\n\nHello, kagglers. In this Notebook we'll be analyzing data from 20,000 + chess matches. Before we continue, two disclaimers:\n\n1. I would like to give a shout-out to a fellow kaggler ERTU\u011eRUL DEMIR. A few days ago I stumbled upon his notebook called \"What Takes to be a Data Scientist: Story of Robert\" and I was greatly inspired by his style of visualizations, so I'll be using some parts of his code here.\n\n2. By no means am I a good at chess. All of the insights and findings will be coming from the perspective of a below-average chess player who knows only the fundamentals of the game and some basic openings.","223e6406":"Interesting: \n* As we move up in rating brackets, the tendency remains clear: \"white\" player has a slight advantage. \n* Up until we reach the highest \"2300+\" bracket. Here, \"black\" is much more likely to win than \"white\". Have in mind that this bracket has the smallest sample size, thus it is most likely to be biased.\n* Overall, as we move up the rating brackets, the overall tendency for a game to end in a draw increases.","503c01d2":"# 2. Data Analysis\n\nAlright. Let's begin by analyzing the rating distribution of our dataset's players. Our original dataset has rating values of both players. \nLet's create a new column, which will show the average rating of both players for every match:","9e784f96":"# 2.3. Outcomes by Ratings\n\nAs far as I know, \"white\" player has the first move's advantage. Let's see if this is a significant advantage and whether it changes as we go up the rating brackets.","e56f45c9":"From first glance, it seems like these outcomes follow a pattern: resignations are most frequent, followed by mates, then by out-of-time games, and, finally, draws.","be0e00ec":"The heatmap above shows every opening's frequency of use per rating bracket. The darker the square, the more often that opening is played in that bracket.","a9411705":"Voil\u00e0! There's a lot to discuss about our lineplot above, so without further ado:\n* As mentioned before, the openings, represented by the x axis, are sorted by how many turns, on average, their respected games last(descending). Having this in mind, we can see that there is no visible correlation between a game's outcome and it's duration in turns.\n* 11\/39 openings favor the \"black\" player. Two of them have a winrate of 60%+ (Van't Kruijs Opening - 61.41% and Mieses Opening - 60.19%).\n* Semi-slav Defense opening has a whopping 11.11% chance of ending in a draw.\n* The overall highest winrate of 65.62% goes to Nimzowitsch Defense's \"white\" players, beating second place by quite a margin (Russian Game's 57.94%).","b0e29bee":"Bingo! There are 42 instances when a draw occured in a game where a player ran out of time! With my limited chess knowledge, I had to ask google when this would be the case. Sure enough, google answered: \"In online chess, if your opponent has insufficient mating material when you run out of time, the game is scored as a draw\"","66bff93c":"As expected, we're dealing with a normal distribution shape (bell curve). A quick google search confirms that lychess' median and mean player ratings are close to 1500, which is exactly what we see here.","d44d383b":"Alright. We're left with 39 openings, which comprise 17,969 \/ 20,058 = 89.6% of our dataset's entries,","c568d940":"Looks like there are many duplicate openings with slight variations in their names. Let's clean that up. I will also merge all the \"Accepted\/Refused\" variations.","c1ae5106":"Let's create a second dataframe to analyze only those openings, which have 100+ occurences.","918c51ff":"# 2.5. Opening Outcomes\n\nAnother thing that interests me is the victory status parameter. Let's explore that now!","6156a44a":"However, there are some very interesting insights to be found:\n1. Although very similar, the \"draw\" line is slightly different from the \"draw\" line we've seen in the previous plot. We can see that Semi-Slav Defense has a 1% lower occurence rate here. How can this be true? How can \"draws\" differ in these contexts? Let's investigate.","3de073ef":"# 2.4. Opening Victors\n\nNext, let's sort the openings by how many turns their respective games last.","2719db48":"# 2.1. Turns by Rating Brackets\n\nNext, let's take a look at how many turns, on average, each rating bracket takes to finish a game.","b7d30a01":"Great. We're left with 122 openings. Which sounds way more realistic. However, most of them were played less than 100 times, meaning that any findings associated with them might have high bias. "}}