{"cell_type":{"c3a6f883":"code","5c2be5bf":"code","2e7cdf73":"code","57b9dc8d":"code","2c9a2c6f":"code","e298481b":"code","5d0b4544":"code","d58f92ea":"code","23081a42":"code","37ef85ac":"code","cd61a3bf":"code","fd4c44c0":"code","b5fdb00a":"code","99692946":"code","3a4413b9":"code","43985d47":"code","fd932fa3":"code","872793d5":"code","d28db279":"code","4630fe29":"code","cfa4ef40":"code","370b5adb":"markdown","3fa60a49":"markdown"},"source":{"c3a6f883":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c2be5bf":"data = pd.read_csv(\"\/kaggle\/input\/test-file\/tested.csv\")\ndata.head()","2e7cdf73":"data.tail()","57b9dc8d":"data.drop(['PassengerId', 'Name', 'Ticket', 'Fare'], axis = 1, inplace = True)","2c9a2c6f":"sns.heatmap(data.isnull(), yticklabels = False)","e298481b":"data.drop(\"Cabin\", axis = 1, inplace = True)","5d0b4544":"sns.countplot(x = \"Survived\",hue = \"Sex\" ,data =data)","d58f92ea":"sns.boxplot(x = \"Pclass\", y = \"Age\", data = data)","23081a42":"def age_modify(col):\n    Age = col[0] \n    Pclass = col[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 42\n        \n        elif Pclass == 2:\n            return 27\n\n        elif Pclass == 3:\n            return 25\n\n    else:\n        return Age","37ef85ac":"data[\"Age\"] = data[[\"Age\", \"Pclass\"]].apply(age_modify, axis = 1)\n","cd61a3bf":"sns.heatmap(data.isnull())","fd4c44c0":"data[\"Sex\"] = pd.get_dummies(data[\"Sex\"], drop_first = True)\ndata.head()","b5fdb00a":"data[\"Embarked\"] = pd.get_dummies(data[\"Embarked\"], drop_first = True)\ndata.head()","99692946":"y = data[\"Survived\"]\ndata.drop(\"Survived\", inplace = True, axis =1)","3a4413b9":"from sklearn.model_selection import train_test_split","43985d47":"train_X, test_X, train_y,test_y = train_test_split(data, y, random_state = 0)","fd932fa3":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(train_X, train_y)\n\n\n","872793d5":"preds = model.predict(test_X)","d28db279":"from sklearn.metrics import confusion_matrix\nconfu = confusion_matrix(preds, test_y)\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(preds, test_y)\nprint(confu)\nprint(accuracy)","4630fe29":"preds","cfa4ef40":"from sklearn.metrics import classification_report\nprint(classification_report(preds, test_y))\n","370b5adb":"Basically, in this dataset, no females died and no males survived.","3fa60a49":"Since Cabin has a lot of Nans, we''ll kick it. Age ko modify."}}