{"cell_type":{"3e8eca9f":"code","2f4e10f0":"code","a582a8d1":"code","e4bef5cb":"code","7fced998":"code","51cbc286":"code","bdd68da3":"code","6a7f9456":"code","579113be":"code","ba6c7f73":"code","3ee33977":"code","824922cf":"code","fa50423c":"code","2e5ce4db":"code","21436e05":"code","fae2b748":"code","2f117a2c":"code","618eed57":"code","adcacd6b":"code","1c08f48e":"code","abae91e5":"code","1c5ca26e":"code","84d646f3":"code","45a20ead":"code","85a1a67e":"code","81fd543b":"markdown"},"source":{"3e8eca9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f4e10f0":"import seaborn as sns\nimport matplotlib.pyplot as plt","a582a8d1":"treino=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nteste=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nresp=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ntreino","e4bef5cb":"women = treino.loc[treino.Sex == 'female']['Survived']\nrate_women = sum(women)\/len(women)\n#len conta todos, inclusives os zeros, enquanto o sum soma, mas somar zero n\u00e3o muda o resultado.\n\nprint(\"% of women who survived:\", rate_women)","7fced998":"treino.describe(include='all')","51cbc286":"treino.head(5)","bdd68da3":"mask = np.triu(np.ones_like(treino.corr(), dtype=np.bool))\nplt.figure(figsize=(10,8))\nsns.heatmap(treino.corr(), mask=mask, square = True, annot=True, vmin=-1, vmax=1)\nplt.show()","6a7f9456":"from sklearn.model_selection import train_test_split","579113be":"treino","ba6c7f73":"#del treino['Cabin']\n#del treino['Name']\n#del treino['Ticket']\n#del treino['PassengerId']\ntreino=pd.DataFrame(treino, columns=['Pclass','Age','Sex','SibSp','Parch','Fare','Survived'])\ntreino=treino.fillna(0)\nteste=teste.fillna(0)\ntreino","3ee33977":"#n\u00e3o rodar, apenas se necess\u00e1rio usar os atributos a seguir\nfrom sklearn import preprocessing\nle=preprocessing.LabelEncoder()\ntreino['Sex'] = le.fit_transform(treino['Sex'])\nteste['Sex'] = le.fit_transform(teste['Sex'])\n#del treino['Embarked']\n#del teste['Embarked']","824922cf":"treino_x=treino.drop(columns='Survived')\n#treino_x=treino.drop (columns='Name')\ntreino_y=treino['Survived']\ntreino_x","fa50423c":"treino_y","2e5ce4db":"subtre_x, tes_x,subtre_y, tes_y=train_test_split(treino_x,treino_y,random_state=1,train_size=0.8)\nsubtre_x","21436e05":"subtre_x['Embarked'].unique()","fae2b748":"subtre_x.shape","2f117a2c":"subtre_y.shape","618eed57":"from sklearn.metrics import accuracy_score","adcacd6b":"from sklearn.neighbors import KNeighborsClassifier,RadiusNeighborsClassifier,NearestCentroid\nfrom sklearn.naive_bayes import GaussianNB,MultinomialNB,ComplementNB,BernoulliNB,CategoricalNB\nfrom sklearn.svm import SVC, NuSVC, LinearSVC\nfrom sklearn.ensemble import BaggingClassifier, RandomForestClassifier,AdaBoostClassifier, GradientBoostingClassifier,VotingClassifier","1c08f48e":"#clfy=KNeighborsClassifier(15,weights='uniform')\n#clfy=RadiusNeighborsClassifier(radius=1.0)\n#clfy=NearestCentroid()\n#clfy=CategoricalNB()\n#clfy=MultinomialNB()\n#clfy=ComplementNB()\n#clfy=BernoulliNB()\nclfy=GaussianNB()\n#clfy=SVC()\n#clfy=NuSVC()\n#clfy=LinearSVC()\n#clfy=BaggingClassifier(KNeighborsClassifier(),max_samples=0.5, max_features=0.5)\n#clfy=RandomForestClassifier(n_estimators=10)\n#clfy=AdaBoostClassifier(n_estimators=100)\n#clfy=GradientBoostingClassifier()\n#clfy = VotingClassifier(estimators=[('ng', clfy1), ('nb', clfy2), ('ld', clfy3),('en', clfy4)],voting='hard')","abae91e5":"\nclfy.fit(subtre_x,subtre_y)","1c5ca26e":"prev= clfy.predict(tes_x)","84d646f3":"accuracy_score(tes_y, prev)","45a20ead":"features = ['Pclass','Age','Sex','SibSp','Parch', 'Fare']\nX_test = pd.get_dummies(teste[features])\nX_test.fillna(0)\npredictions = clfy.predict(X_test)","85a1a67e":"output = pd.DataFrame({'PassengerId': teste.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","81fd543b":"# pclass, age, Sibsp, parch"}}