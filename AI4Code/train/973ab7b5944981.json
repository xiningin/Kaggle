{"cell_type":{"1f2838d6":"code","1f51e13b":"code","d232cc28":"code","99a3f1d3":"code","3da76692":"code","1bec5104":"code","a394f5f2":"code","44738465":"code","d6a7baed":"code","967eb364":"code","7b86b74e":"code","0754706c":"code","02218503":"code","fe883b13":"code","110f4016":"code","ddf5870d":"code","f34f8599":"code","fa919574":"code","32c63e23":"code","c8c01412":"code","25960fd1":"code","708d3c52":"code","bfa4071e":"code","f98cbdfc":"code","e61d2e49":"code","3a0b513c":"code","1f75d39d":"code","15a0321f":"code","2156b865":"code","f8e45cb1":"code","650d90c2":"code","bbcbd106":"code","b7e35473":"code","1d945645":"code","3824225a":"code","529734d7":"code","b3e6b1e7":"code","71e7d168":"code","c1a61727":"code","34b8eb10":"code","f4d3bcee":"code","3c71fb5c":"code","19cad341":"code","179d43a2":"code","9202dde1":"code","8b9d28a5":"code","f69aa9fc":"code","e50cf878":"code","00cdf235":"code","8809e70a":"code","de6078ec":"code","6b045d4b":"code","35ba9421":"code","46f54259":"code","05f07eaf":"code","9f0ca90f":"code","71c0ae33":"code","7cf1c205":"code","61471ab4":"code","eefcbd6b":"code","1e77abdf":"code","83b0bd96":"markdown","6833e151":"markdown","cb522e3b":"markdown","43ad5d81":"markdown","85c89e01":"markdown","b673f144":"markdown","75f33c66":"markdown","b357b14c":"markdown","8bd2fc65":"markdown","6de5f551":"markdown","1a572687":"markdown","b9d60906":"markdown","4c7334a6":"markdown","9b5424a2":"markdown","827208b7":"markdown","05e39bbd":"markdown","66846ea0":"markdown"},"source":{"1f2838d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f51e13b":"import matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv('\/kaggle\/input\/employee-attrition\/HR-Employee-Attrition.csv')","d232cc28":"df","99a3f1d3":"def graph(col):\n    plt.figure(figsize = (16,8))\n    ax = sns.countplot(x = df[col], hue = df['Attrition'])\n\n   ","3da76692":"graph('Age')","1bec5104":"df.isnull().sum()","a394f5f2":"df.dtypes","44738465":"df['Attrition'] = np.where(df['Attrition'] == 'No', 1, 0)","d6a7baed":"df['Attrition'].value_counts()","967eb364":"df['BusinessTravel'].value_counts()","7b86b74e":"df['BusinessTravel'] = df['BusinessTravel'].replace({'Travel_Rarely' : 0, 'Travel_Frequently' : 1, 'Non-Travel' : 2})","0754706c":"df['BusinessTravel'].value_counts()","02218503":"df['Department'].value_counts()","fe883b13":"df['Department'] = df['Department'].replace({'Research & Development' : 1, 'Sales' : 0, 'Human Resources' : 2})","110f4016":"df['Department'].value_counts()","ddf5870d":"df['EducationField'].value_counts()","f34f8599":"df_EducationField = pd.get_dummies(df['EducationField'])","fa919574":"df_EducationField ","32c63e23":"df1 = pd.concat([df, df_EducationField], axis = 1)","c8c01412":"df1","25960fd1":"EducationField = df1.pop('EducationField')","708d3c52":"df1","bfa4071e":"df1['Gender'].value_counts()","f98cbdfc":"df1['Gender'] = np.where(df.Gender == 'Male', 0, 1)","e61d2e49":"df1['Gender'].value_counts()","3a0b513c":"df1['JobRole'].value_counts()","1f75d39d":"from sklearn.preprocessing import LabelEncoder ","15a0321f":"Le = LabelEncoder()\ndf1['JobRole'] = Le.fit_transform(df1.JobRole)","2156b865":"df1['JobRole'].value_counts()","f8e45cb1":"df1['MaritalStatus'].value_counts()","650d90c2":"df1['MaritalStatus'] = df1['MaritalStatus'].replace({'Married' : 1, 'Single' : 0, 'Divorced' : 2})","bbcbd106":"df1['MaritalStatus'].value_counts()","b7e35473":"df1['Over18'].value_counts()","1d945645":"del df1['Over18']","3824225a":"df1['OverTime'].value_counts()","529734d7":"df1['OverTime'] = np.where(df1['OverTime'] == 'Yes', 1, 0)","b3e6b1e7":"df1['HourlyRate'].value_counts()","71e7d168":"df1.dtypes","c1a61727":"y = df1.pop('Attrition')","34b8eb10":"df1.corr()","f4d3bcee":"df1['EmployeeCount'].value_counts()","3c71fb5c":"del df1['EmployeeCount']","19cad341":"df1['StandardHours'].value_counts()","179d43a2":"del df1['StandardHours']","9202dde1":"del df1['EmployeeNumber']","8b9d28a5":"df1.corr()","f69aa9fc":"from sklearn.model_selection import train_test_split","e50cf878":"x_train, x_test, y_train, y_test = train_test_split( df1, y, test_size = 0.25, random_state = 26)","00cdf235":"x_train.shape, y_train.shape, x_test.shape, y_test.shape","8809e70a":"from sklearn.preprocessing import RobustScaler, StandardScaler ","de6078ec":"scaler = StandardScaler()\ns_train = scaler.fit_transform(x_train)\ns_test = scaler.fit_transform(x_test)","6b045d4b":"s_train.shape, s_test.shape","35ba9421":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree  import DecisionTreeRegressor\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report , plot_roc_curve\nfrom sklearn.ensemble import RandomForestClassifier","46f54259":"lr = LogisticRegression()\ntr = DecisionTreeRegressor()\ngn  = GaussianNB()\nbn  = BernoulliNB()\nmn  = MultinomialNB()\nrf = RandomForestClassifier(n_estimators = 100)","05f07eaf":"lr.fit(s_train, y_train)\nlrpred = lr.predict(s_test)\nlrscore = accuracy_score(y_test, lrpred) \nprint('Logistic Regression Accuracy: ', lrscore) \nprint(confusion_matrix(y_test, lrpred))\nprint(classification_report(y_test, lrpred))\nplot_roc_curve(lr, s_train, y_train)\nplot_roc_curve(lr, s_test, y_test)","9f0ca90f":"tr.fit(s_train, y_train)\ntrpred = tr.predict(s_test)\ntrscore = accuracy_score(y_test, trpred) \nprint('Decision Tree Accuracy: ', trscore) \nprint(confusion_matrix(y_test, trpred))\nprint(classification_report(y_test, trpred))\n","71c0ae33":"gn.fit(s_train, y_train)\ngnpred = tr.predict(s_test)\ngnscore = accuracy_score(y_test, gnpred) \nprint('Gaussian NB Accuracy: ', gnscore) \nprint(confusion_matrix(y_test, gnpred))\nprint(classification_report(y_test, gnpred))\n","7cf1c205":"bn.fit(s_train, y_train)\nbnpred = tr.predict(s_test)\nbnscore = accuracy_score(y_test, bnpred) \nprint('Bernoulli NB Accuracy: ', bnscore) \nprint(confusion_matrix(y_test, bnpred))\nprint(classification_report(y_test, bnpred))","61471ab4":"kn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', n_jobs = -1)\nkn.fit(x_train, y_train)\nknpred = tr.predict(x_test)\nknscore = accuracy_score(y_test, knpred) \nprint('KNN NB Accuracy: ', knscore) \nprint(confusion_matrix(y_test, knpred))\nprint(classification_report(y_test, knpred))","eefcbd6b":"mn.fit(x_train, y_train)\nmnpred = tr.predict(x_test)\nmnscore = accuracy_score(y_test, bnpred) \nprint('Multinomial NB Accuracy: ', mnscore) \nprint(confusion_matrix(y_test, mnpred))\nprint(classification_report(y_test, mnpred))\n","1e77abdf":"rf.fit(s_train, y_train)\nrfpred = rf.predict(s_test)\nrfscore = accuracy_score(y_test,rfpred) \nprint('Random Forest Accuracy: ', rfscore) \nprint(confusion_matrix(y_test, rfpred))\nprint(classification_report(y_test, rfpred))","83b0bd96":"Train Test Split & Feature Scaling","6833e151":"Model Selection","cb522e3b":"# Columns Preprocessing\n1. Business Travel","43ad5d81":"5. JobRole ","85c89e01":"# **Multinomial NB**","b673f144":"#  **Decision Tree Result**","75f33c66":"2. Department ","b357b14c":"# **Logistic Regression Result**","8bd2fc65":"# **Gaussian NB Result**","6de5f551":"4. Gender","1a572687":"6. MaritalStatus ","b9d60906":"7. Over18","4c7334a6":"# **RANDOM FOREST PREDICTION**","9b5424a2":"# **Bernoulli NB Result**","827208b7":"# **KNN Result**","05e39bbd":"3. Education Field","66846ea0":"8. OverTime"}}