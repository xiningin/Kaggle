{"cell_type":{"d7abc6f6":"code","dcc0002d":"code","4a8f801c":"code","aa8bb2bc":"code","3ff05529":"code","195caa17":"code","ff52bd20":"code","9397010b":"code","a6433d4b":"markdown","e9903909":"markdown","b069457f":"markdown","7d8f5e90":"markdown","1f04147c":"markdown","1906f31c":"markdown"},"source":{"d7abc6f6":"import json\nimport numpy as np\nimport pandas as pd\nimport datetime\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nimport lightgbm as lgb\nfrom collections import Counter\nfrom pathlib import Path\nimport pickle\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import KFold, StratifiedKFold, GroupKFold\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, cohen_kappa_score\n\n#  pandas setting\npd.set_option(\"display.max_colwidth\", 100)\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\npd.options.display.float_format = '{:,.5f}'.format\n\ndef unpickle(filename):\n    with open(filename, 'rb') as fo:\n        p = pickle.load(fo)\n    return p\n\ndef to_pickle(filename, obj):\n    with open(filename, 'wb') as f:\n        pickle.dump(obj, f, -1)\n        \n# \u30b0\u30e9\u30d5\u63cf\u753b\u7cfb\nimport matplotlib\nfrom matplotlib import font_manager\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib import rc\n# from matplotlib_venn import venn2, venn2_circles\nfrom matplotlib import animation as ani\nfrom IPython.display import Image\n\nplt.rcParams[\"patch.force_edgecolor\"] = True\n#rc('text', usetex=True)\nfrom IPython.display import display # Allows the use of display() for DataFrames\nimport seaborn as sns\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\nsns.set_style(\"whitegrid\", {'grid.linestyle': '--'})\nred = sns.xkcd_rgb[\"light red\"]\ngreen = sns.xkcd_rgb[\"medium green\"]\nblue = sns.xkcd_rgb[\"denim blue\"]\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'","dcc0002d":"train = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train.csv\", nrows=None)","4a8f801c":"cnt = train.title.value_counts()\ntitle_type = train[[\"title\", \"type\"]].drop_duplicates()\ntitle_type = title_type.merge(pd.DataFrame(cnt).reset_index(), left_on=\"title\", right_on=\"index\", how=\"left\")\ntitle_type.columns = [\"title\", \"type\", \"_\", \"count\"]\ntitle_type.drop(\"_\", axis=1, inplace=True)\ntitle_type.sort_values(\"count\", ascending=False, inplace=True)\ntitle_type","aa8bb2bc":"def display_json_structure(title_list):\n    for title in title_list: \n        print(\"=\"*80,)\n        print(\"=\"*30, f\" title: {title} \", \"=\"*30,)\n        print(\"=\"*80,)\n        train_focused_event = train[train.title==title]\n        event_df = pd.DataFrame(train_focused_event.event_code.value_counts()).reset_index()\n        cols_list = {}\n        for event_code in np.sort(event_df[\"index\"].values):\n            df_s = train_focused_event[train_focused_event.event_code==event_code]\n             # check all rows in order to check the structure of all data, even though displaying only 3 rows.\n            event_data_df = pd.DataFrame([json.loads(d) for d in df_s.event_data.values])\n            print(f\"event_code: {event_code}\")\n            display(event_data_df.head(3))\n            cols_list[event_code] = event_data_df.columns.tolist()\n\n        col_all = set(np.hstack([cols_list[k] for k in cols_list.keys()]))\n        col_dict_list = []\n        for k in cols_list.keys():\n            col_dict = {}\n            for c in col_all:\n                col_dict[c]= c in cols_list[k]\n            col_dict[\"event_code\"] = k\n            col_dict_list.append(col_dict)    \n        col_dict_df = pd.DataFrame(col_dict_list)\n        col_dict_df[col_dict_df.sum().sort_values(ascending=False).index.tolist()]\n\n        item_name_df = col_dict_df[col_dict_df.sum().sort_values(ascending=False).index.tolist()].sort_values(\"event_code\")\n        item_name_df[\"num_item\"] = item_name_df.iloc[:, 1:].sum(axis=1)\n        display(item_name_df)","3ff05529":"game_title = title_type[title_type[\"type\"]==\"Game\"]\ngame_title","195caa17":"display_json_structure(game_title.title.values)","ff52bd20":"activity_title = title_type[title_type[\"type\"]==\"Activity\"]\nactivity_title","9397010b":"display_json_structure(activity_title.title.values)","a6433d4b":"# Displaying json data of \"Activity\" groupbying \"title\" and \"event_code\"","e9903909":"# Displaying json data of `Game` groupbying \"title\" and \"event_code\"","b069457f":"### Purpose of this kernel\n* Clarifying the structure of event_data which is stored as JSON format.\n* The structure is defined with group of title and event_code, so showing each pattern of the json data as Pandas DataFrame.\n\n### Finding\n* I found that the structure of the json file is same in the same `title` and `event_code`.","7d8f5e90":"# Function for display","1f04147c":"# loading Data","1906f31c":"# Title list\nDisplaying all titles in train data order by row count. In this kernel, we focus on `Game` to show the structure of the event_data."}}