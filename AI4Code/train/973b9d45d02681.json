{"cell_type":{"c2a43a46":"code","d9039c9a":"code","6e87da7a":"code","9c4dea6c":"code","9e0ad01b":"code","c3331c19":"code","c0038659":"code","2713ff61":"code","50027f31":"code","490b3f0e":"code","79ffcd0a":"code","7ca8aa37":"code","e9355b64":"code","b081a0d2":"code","afd71c88":"code","9c5d3cd9":"markdown","d8099e4e":"markdown","c7ff1ccf":"markdown","db292e75":"markdown","3ec4823e":"markdown","5139baf0":"markdown","12bf6983":"markdown","5aa8bfea":"markdown","d78f9cf8":"markdown","82150be5":"markdown","7d1d7bbf":"markdown","88ed1643":"markdown","e21fcff5":"markdown","114a049b":"markdown"},"source":{"c2a43a46":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as col\nimport matplotlib.cm as cm\nimport seaborn as sns\n\n%matplotlib inline","d9039c9a":"plt.style.use('seaborn-white')","6e87da7a":"# Data Set for gaming hours of steam\n\nst = pd.read_csv('..\/input\/steam-video-games\/steam-200k.csv',names=['User_ID','Game','Action','Value','Other'])\nst.head(10)","9c4dea6c":"# Data Set for Metacritic Ratings\n\nrt = pd.read_csv('..\/input\/metacritic-games-stats-20112019\/metacritic_games.csv')\nrt.head(10)","9e0ad01b":"#Removing User ID's as they are of no interest in this EDA \n\nst = st[['Game','Action','Value']]\n\n#Taking only play hours of the games and dropping the absolete action column\n\nst = st[st['Action'] == 'play']\nst.drop(['Action'],inplace=True,axis=1)\nst.rename(columns={'Value':'Hours Played'},inplace=True)\n\n#Taking Cumulative Playing time of all the users\n\nst = st.groupby('Game').sum().reset_index()\nst = st.sort_values('Hours Played',ascending = False).reset_index(drop=True)\n\n#top 10 Most Played Games\n\nst.head(10)","c3331c19":"#Keeping only relevant columns\n\ncol = rt.columns\nrt = rt[col[:2].tolist()+col[7:-2].tolist()]\n\n#Taking only PC games\nrt = rt[rt['platform'] == 'PC']\nrt.drop(['platform'],axis=1,inplace=True)\n\nrt.head()","c0038659":"#Score\n\nrt['neutral_critics'] = rt['neutral_critics']*0.5\nrt['negative_critics'] = rt['negative_critics']*(-1)\nrt['neutral_users'] = rt['neutral_users']*0.5\nrt['negative_users'] = rt['negative_users']*(-1)\nrt['Score'] = rt['positive_critics'] + rt['neutral_critics'] + rt['negative_critics'] + rt['neutral_users'] + rt['negative_users'] + rt['positive_users']\nrt = rt[['game','Score']].rename(columns={'game':'Game'})\nrt = rt.sort_values('Score',ascending=False).reset_index(drop=True)\n\n#Top 10 Rated Games\nrt.head(10)","2713ff61":"# Developing the merge Datasets\n\nfinal = pd.merge(st,rt,how='inner',left_on='Game',right_on='Game')\ntopst = final.sort_values('Hours Played',ascending=False)[2:12]\ntopst","50027f31":"toprt = final.sort_values('Score',ascending=False)[2:12]\ntoprt","490b3f0e":"#Function to normalize the values\n\ndef Normalize(lst):\n    norm = []\n    mx = max(lst)\n    mn = min(lst)\n    for i in lst:\n        norm.append( ((i - mn) \/ (mx - mn)) * 2 )\n    return norm","79ffcd0a":"# Normalizing the Scores\n\ntopst['Play Score'] = Normalize(topst['Hours Played'].tolist())\ntopst['Rating Score'] = Normalize(topst['Score'].tolist())\ntopst.reset_index(drop=True,inplace=True)\ntopst","7ca8aa37":"# Normalizing the Scores\n\ntoprt['Play Score'] = Normalize(toprt['Hours Played'].tolist())\ntoprt['Rating Score'] = Normalize(toprt['Score'].tolist())\ntoprt.reset_index(drop=False,inplace=True)\ntoprt","e9355b64":"#testing for trends in most played games\n\nfig1 = plt.figure(figsize=(8,6.5))\nplt.plot(topst['Play Score'],'-o',label='Play Score',c='orange')\nplt.plot(topst['Rating Score'],'-o',label='Rating Score',c='b')\nplt.legend(title='Legend');\nspines1 = plt.gca().spines\nspines1['right'].set_visible(False)\nspines1['top'].set_visible(False)\nspines1['left'].set_visible(False)\nspines1['bottom'].set_visible(False)\nplt.grid()\nplt.title('Play Time of Most Played games V\/S Rating Score.');\nplt.xlabel('Top Game Ranks');\nplt.ylabel('Normalized Score Scale');","b081a0d2":"#testing for trends in top rated games\n\nfig2 = plt.figure(figsize=(8.,6.5))\nplt.plot(toprt['Play Score'],'-o',label='Play Score',c='orange')\nplt.plot(toprt['Rating Score'],'-o',label='Rating Score',c='b')\nplt.legend()\nspines2 = plt.gca().spines\nspines2['right'].set_visible(False)\nspines2['top'].set_visible(False)\nspines2['left'].set_visible(False)\nspines2['bottom'].set_visible(False)\nplt.title('Play Time of Top Rated games V\/S Rating Score.');\nplt.xlabel('Top Game Ranks');\nplt.ylabel('Normalized Score Scale');\nplt.legend(title='Legend')\nplt.grid()","afd71c88":"canv,((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2)\ncanv.set_size_inches(18,15)\ncanv.tight_layout(pad=5.0)\n\n#First Plot,(0,0)\n\nplt.sca(ax1)\nplt.rcParams.update({'font.size': 14})\nbars = plt.barh(np.arange(len(topst['Game'])),topst['Hours Played'].iloc[::-1],color='lightslategrey',alpha=0.7)\nbars[-1].set_color('orange')\n\nfor bar,name,value in zip(bars,topst['Game'].iloc[::-1].tolist(),topst['Hours Played'].iloc[::-1].tolist()):\n    plt.text((bar.get_width()\/4)-2500,(bar.get_y()+0.3),name + ' ({:.0f} Hours)'.format(value),color='w',fontweight='bold',fontsize=13)\n\nplt.yticks(np.arange(len(topst['Game'])),np.array([10,9,8,7,6,5,4,3,2,1]));\nax1.set_xticks([])\nplt.xlabel('Hours Played on Steam.',fontsize=15)\nplt.ylabel('Ranking Based on Play Time on Steam.',fontsize=15)\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n#Second Plot,(0,1)\n\nplt.sca(ax2)\nplt.rcParams.update({'font.size': 14})\nplt.plot(topst['Play Score'],'-o',label='Play Score',c='orange')\nplt.plot(topst['Rating Score'],'-o',label='Rating Score',c='b')\nplt.legend(title='Legend');\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\nplt.grid(alpha=0.8)\nplt.title('Play Time of Most Played games V\/S Rating Score.');\nplt.xticks(np.arange(len(topst['Game'])),np.array([1,2,3,4,5,6,7,8,9,10]));\nplt.xlabel('Ranking Based on Play Time on Steam.',fontsize=15);\nplt.ylabel('Normalized Score Scale.',fontsize=15);\n\n#Third Plot,(1,0)\n\nplt.sca(ax3)\nplt.rcParams.update({'font.size': 14})\nbars = plt.barh(np.arange(len(toprt['Game'])),toprt['Score'].iloc[::-1],color='lightslategrey',alpha=0.7)\nbars[-1].set_color('b')\n\nfor bar,name,value in zip(bars,toprt['Game'].iloc[::-1].tolist(),toprt['Score'].iloc[::-1].tolist()):\n    plt.text((bar.get_width()\/4-10),(bar.get_y()+0.3),name + ' ({:.0f})'.format(value),color='w',fontweight='bold',fontsize=13)\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\nplt.yticks(np.arange(len(toprt['Game'])),np.array([10,9,8,7,6,5,4,3,2,1]));\nax3.set_xticks([])\nplt.xlabel('Rating Score on Steam.',fontsize=15)\nplt.ylabel('Ranking Based on Rating Score on Steam.',fontsize=15)\n\n#Fourth Plot(1,1)\n\nplt.sca(ax4)\nplt.rcParams.update({'font.size': 14})\nplt.plot(toprt['Play Score'],'-o',label='Play Score',c='orange')\nplt.plot(toprt['Rating Score'],'-o',label='Rating Score',c='b')\nplt.legend()\n\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\nplt.title('Play Time of Top Rated games V\/S Rating Score.');\nplt.xlabel('Ranking Based on Rating Score on Steam.',fontsize=15);\nplt.xticks(np.arange(len(toprt['Game'])),np.array([1,2,3,4,5,6,7,8,9,10]));\nplt.ylabel('Normalized Score Scale.',fontsize=15);\nplt.legend(title='Legend');\nplt.grid(alpha=0.8)","9c5d3cd9":"# Final Viusalization ","d8099e4e":"# This is an Exploratory Analysis on Steam Game Statistics Focusing on the Rating of Games and Hours Played on steam\n\n## Research Question or Motivation For this Project\/Analysis\n\n### \u0472 To Determine the relation if any between the rating of a game and its market Success (Measured as Hours the game was played)","c7ff1ccf":"## Importing The Required Libraries and Magic\n","db292e75":"## Uploading Data Sets","3ec4823e":"## Generating a rating index by using the overall ratings of both the critics and users\n\n### Assigning scroes to all the rating\n\n- Postive Critic = + 1\n- Neutral Critic = + 0.5\n- Negative Critic = - 1\n- Positive User = + 1\n- Neutral User = + 0.5\n- Negative User = - 1\n\n### Calculating the final Score","5139baf0":"### Conclusion 1. The set of Most Played games and Top rated games turns out to be  disjoint. As an outcome of which the EDA from this point on will be divided into two section namely :-\n  1.  Comparing the Play Time of Most Played games with thier respective rating.\n###    \n  2.  Comparing the Play Time of Top Rated games with thier respective Play Time.\n","12bf6983":"#### 2. [Steam Game Played by Hours DataSet On Kaggle](https:\/\/www.kaggle.com\/tamber\/steam-video-games)\n\n####     -> This Data Set contains different game played on steam along with the number of hours the game was played by different users this information is used to calculate Normalized Play Score for each game in this Analysis","5aa8bfea":"### To have the rating and the play time on the same scale we have to Normalize Both values to a scale of [0,2]\n### Normalizing the Play Time To a Range of [0,2] by :-\n   ##       $ Normalized~Hours =  (\\frac{Hours - Min(Hours)}{Max(Hours) - Min(Hours)})*2$      \n### Normalizing the Final Score To a Range of [0,2] by :-\n   ##       $ Normalized~Score =  (\\frac{Score - Min(Score)}{Max(Score) - Min(Score)})*2$","d78f9cf8":"### The Data Sets Used in this Analysis :-\n\n#### 1. [MetaCritic Rating DataSet On Kaggle for Games On Steam](https:\/\/www.kaggle.com\/skateddu\/metacritic-games-stats-20112019)\n\n####     -> This Data Set contains different ratings and user feedback on different games on steam which are used to calculate the Normalized Rating Score for each game in this Analysis\n\n#### 2. [Steam Game Played by Hours DataSet On Kaggle](https:\/\/www.kaggle.com\/tamber\/steam-video-games)\n\n####     -> This Data Set contains different game played on steam along with the number of hours the game was played by different users this information is used to calculate Normalized Play Score for each game in this Analysis","82150be5":"## Data Cleaning\n","7d1d7bbf":"## Corollary :-\n### First, As we can see there are really next to no co-relation between the rating and the play time of a game, This Peculiar phenomena is described below:\n\n1. The rating system is found to be skewed along the genre of a game i.e if a game is a FPS(first person shooting) type game then you cannot compare its rating to the rating of a non FPS game\n\n2. The Rating is developed as soon as the game hits the market whereas the play time increases gradually over the years therefor new game with better rating has infinitesimally small chance of having a play time more than the older games\n\n3. Then there are the challenge of competitive games which demands rigorous play time and determination, this act skews our analysis\n\n4. The nature of rating and repeated gaming is highlighted in the visualization in the fact that the set of top rated games and the set of most played games is disjoint in nature\n\n## Final Summary:\n#### To Further increase the accuracy of this analysis clustering is a good option and as of now rating and Play Hours Does not carry or Does but very little co-relation and hence rating is not a good indictor of a games market success","88ed1643":"$-----------------------------------------------------------$","e21fcff5":"## Data Visualiztion","114a049b":"#### 1. [MetaCritic Rating DataSet On Kaggle for Games On Steam](https:\/\/www.kaggle.com\/skateddu\/metacritic-games-stats-20112019)\n\n####     -> This Data Set contains different ratings and user feedback on different games on steam which are used to calculate the Normalized Rating Score for each game in this Analysis"}}