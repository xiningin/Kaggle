{"cell_type":{"65fd721e":"code","3f899eb3":"code","2a2bfb8e":"code","f8d9f862":"code","b90e3b5e":"code","e3e0a002":"code","5f00758e":"code","9ba306ef":"code","668911ec":"code","9069f213":"markdown","9a6d9027":"markdown","c3919148":"markdown","1c7e862c":"markdown","558ef8be":"markdown","4ad1695f":"markdown"},"source":{"65fd721e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualization\n\nfrom sklearn import datasets # datasets library\nfrom sklearn.svm import SVC # machine learning algorithm library\nfrom sklearn.model_selection import train_test_split # seperating the dataset into test and train\nfrom sklearn.metrics import confusion_matrix # describe the performance of a classification model\n\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f899eb3":"digit = datasets.load_digits()","2a2bfb8e":"# Features\nX = digit.data \nX","f8d9f862":"# Target\ny = digit.target\ny","b90e3b5e":"X_train , X_test , y_train , y_test = train_test_split(X, y, test_size = 0.33 , random_state = 16) ","e3e0a002":"object_svc = SVC(C=100 , gamma=0.001 , kernel=\"rbf\")","5f00758e":"model = object_svc.fit(X_train , y_train)","9ba306ef":"y_pred = model.predict(X_test)","668911ec":"cm = confusion_matrix(y_test , y_pred)\nsns.heatmap(cm , annot = True , cbar = False);","9069f213":"### Fit Model","9a6d9027":"### Control","c3919148":"### Split Data Into Train and Test ","1c7e862c":"### Create An Object Of Classifier : SVC","558ef8be":"### Load Dataset","4ad1695f":"### Prediction"}}