{"cell_type":{"8c408ee9":"code","bce23a02":"code","b362e15b":"code","f0187c8f":"code","901c43ef":"code","c9fb3a1a":"code","b1c60e09":"code","695d7608":"code","8f284846":"code","fcd47259":"code","a18de112":"code","a60dad7b":"code","de136fe6":"code","e8332975":"code","e56f585b":"code","ef8fd509":"code","da87e9e0":"code","478e87df":"code","12de25a2":"code","260175a4":"code","c57c1340":"code","e074a915":"code","10bc25ed":"code","a3b65035":"code","e89f7b22":"code","0803d841":"code","0494ae80":"code","b2a6ab8b":"code","0bdbbdb5":"code","0e985a5d":"code","8465ddfe":"code","856ba992":"code","0a2b7442":"code","b7ccb5f2":"code","6d511ef4":"code","00bb89f4":"code","3406604c":"code","f402824b":"code","98d57a32":"code","25aeea1b":"code","d9119a1f":"code","e3da4022":"code","49c0072a":"code","3d26ee33":"code","109dfef8":"code","b496ff7f":"code","836a4854":"code","c6d46f7a":"markdown","90925933":"markdown","30e7bedd":"markdown","932490b0":"markdown","3458348a":"markdown","1d8ab2f5":"markdown","b3f56c75":"markdown","106d0901":"markdown","1209df68":"markdown","4a3756f6":"markdown","2fe2418a":"markdown","fbfef287":"markdown","4a266ef7":"markdown","447e0103":"markdown","f2e0da74":"markdown","aae99d5f":"markdown","6830b80b":"markdown","1f6de79b":"markdown","39b7341c":"markdown","cbcc0367":"markdown","0d6bceb7":"markdown","0362ac61":"markdown","114841b6":"markdown","bdcc80de":"markdown","8b764027":"markdown","87f17ab1":"markdown","93293b37":"markdown","5c036d52":"markdown","ffc62cd4":"markdown","1b53f85a":"markdown","7dd67ee5":"markdown","ea23cf02":"markdown","c3145991":"markdown","8c160bd2":"markdown","9c7665b8":"markdown","9dde3e71":"markdown","f030366c":"markdown","35c65587":"markdown","5dfdd36d":"markdown","52ba3ed2":"markdown","9a5c4791":"markdown","1ba2d1a9":"markdown","8f0b73cd":"markdown","86b36bf5":"markdown","6b1101b8":"markdown","82566dc4":"markdown","a7d6e052":"markdown","f55e4296":"markdown","0d63a502":"markdown","04b13e60":"markdown","67b471e7":"markdown","3b2e7e18":"markdown","83df1822":"markdown","6238279d":"markdown","1eba9bac":"markdown","43d41bd6":"markdown","d9933d95":"markdown","620c02fb":"markdown","188e92fe":"markdown","6c6886bd":"markdown","59949c25":"markdown","49814a41":"markdown","54e3235b":"markdown","bb20883e":"markdown","e4f0741c":"markdown","d1e2756e":"markdown","a5d53b3e":"markdown","514591d4":"markdown","69afe435":"markdown","8c806c0c":"markdown","9349a3d6":"markdown","08a938d1":"markdown","e10be9f4":"markdown","faf0a8dc":"markdown","04872324":"markdown","b4358874":"markdown"},"source":{"8c408ee9":"# efficientnet\u306einstall\n!pip install -q efficientnet","bce23a02":"# \u57fa\u672c\n\n## \u30bf\u30fc\u30df\u30ca\u30eb\u306e\u8a18\u8ff0\u306a\u3069\u3092\u884c\u3048\u308b\u3002\nimport os\n\n## numpy pandas\nimport numpy as np\nimport pandas as pd\n\n## \u753b\u50cf\u89e3\u6790\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nimport cv2\n\n## \u53ef\u8996\u5316\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm #\u5b8c\u4e86\u307e\u3067\u306e\u30d0\u30fc\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u308b\n\ntqdm.pandas()\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nnp.random.seed(0)\n\n## \u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom IPython.display import SVG\nimport efficientnet.tfkeras as efn\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras.models import Model\nfrom kaggle_datasets import KaggleDatasets #\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u306a\u304f\u3066\u3082aggle\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\nfrom tensorflow.keras.applications import DenseNet121\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b362e15b":"EPOCHS = 20 #\u30a8\u30dd\u30c3\u30af\u6570\u309220\u306b\u8a2d\u5b9a\n\nSAMPLE_LEN = 100 #\u9069\u5f53\u306b\u753b\u50cf\u3092\u9078\u5225\u3059\u308b\u969b\u306a\u3069\n\n## \u3053\u3053\u3067\u8a2d\u5b9a\u3057\u305fpath\u3092\u4f7f\u3063\u3066\u753b\u50cf\u30c7\u30fc\u30bf\u3084\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\nimage_path = \"..\/input\/plant-pathology-2020-fgvc7\/images\/\"\ntest_path = \"..\/input\/plant-pathology-2020-fgvc7\/test.csv\"\ntrain_path = \"..\/input\/plant-pathology-2020-fgvc7\/train.csv\"\nsubmission_path = \"..\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv\"\n\ntest = pd.read_csv(test_path) #\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ntrain = pd.read_csv(train_path) #\u8a13\u7df4\u30c7\u30fc\u30bf\n\n## path\u304c\u3061\u3083\u3093\u3068\u901a\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\ntrain.head()","f0187c8f":"## train\u30c7\u30fc\u30bf\u306f\u8aad\u307f\u8fbc\u3081\u3066\u3044\u305f\u306e\u3067\u30d5\u30a9\u30eb\u30c0\u5185\u306e\u753b\u50cf\u3092\u8a8d\u8b58\u3067\u304d\u308b\u5f62\u3067\u8aad\u307f\u8fbc\u3081\u308b\u304b\u8abf\u3079\u308b\n\n## \u753b\u50cf\u8aad\u307f\u8fbc\u307f\u306e\u95a2\u6570\ndef load_image(image_id):\n    file_path = image_id + \".jpg\"\n    image = cv2.imread(image_path + file_path)\n    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n# 100\u679a\u3092\u30e9\u30f3\u30c0\u30e0\u306bimages\u30d5\u30a9\u30eb\u30c0\u304b\u3089\u53d6\u5f97\ntrain_images = train[\"image_id\"][:SAMPLE_LEN].progress_apply(load_image)","901c43ef":"leaf_fig = px.imshow(cv2.resize(train_images[42], (200, 150))) #\u30b5\u30a4\u30ba\u3092\u8abf\u6574\u3057\u305f\u4e0a\u3067cv2\u3092\u4f7f\u3063\u3066\u8aad\u307f\u8fbc\u307f\nleaf_fig.show()","c9fb3a1a":"## \u3055\u3089\u306b\u9069\u5f53\u306a1\u679a\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\nleaf_fig_2 = px.imshow(cv2.resize(train_images[1],(450, 300))) #\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u3066\u307f\u308b\nleaf_fig_2.show()","b1c60e09":"# 1\u3064\u76ee\u306e\u6b21\u5143\u304c\u8d64\uff08[:,:,0]\uff09\nred_values = [np.mean(train_images[idx][:,:,0]) for idx in range(len(train_images))] #\u53d6\u5f97\u3057\u305f100\u679a\u5168\u90e8\u306e\u8d64\u5206\u5e03\u306e\u5272\u5408\u306e\u5e73\u5747\u5024\u3092\u53d6\u5f97\n\n# 2\u3064\u76ee\u306e\u6b21\u5143\u304c\u7dd1\uff08[:,:,1]\uff09\ngreen_values = [np.mean(train_images[idx][:,:,1]) for idx in range(len(train_images))]\n# 3\u3064\u76ee\u306e\u6b21\u5143\u304c\u9752\uff08[:,:,2]\uff09\nblue_values = [np.mean(train_images[idx][:,:,2]) for idx in range(len(train_images))]\n\n# \u8272\u5f69\u5168\u4f53\u306e\u5e73\u5747\nvalues = [np.mean(train_images[idx]) for idx in range(len(train_images))]","695d7608":"fig = ff.create_distplot([values], group_labels=[\"Channel\u5168\u4f53\"], colors=[\"purple\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"\u30c1\u30e3\u30cd\u30eb\u5168\u4f53\u306e\u5206\u5e03\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","8f284846":"fig = ff.create_distplot([red_values], group_labels=[\"R\"], colors=[\"red\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"\u8d64\u306e\u5206\u5e03\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","fcd47259":"fig = ff.create_distplot([green_values], group_labels=[\"G\"], colors=[\"green\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"\u7dd1\u306e\u5206\u5e03\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","a18de112":"fig = ff.create_distplot([blue_values], group_labels=[\"B\"], colors=[\"blue\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"\u9752\u306e\u5206\u5e03\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","a60dad7b":"### 3\u8272\u306e\u5206\u5e03\u3092\u7bb1\u30d2\u30b2\u56f3\u3067\u898b\u3066\u307f\u308b\none_leaf = go.Figure()\n\nfor idx, values in enumerate([red_values, green_values, blue_values]):\n    if idx == 0:\n        color = \"Red\"\n    if idx == 1:\n        color = \"Green\"\n    if idx == 2:\n        color = \"Blue\"\n    one_leaf.add_trace(go.Box(x=[color]*len(values), y=values, name=color, marker=dict(color=color.lower())))\n\none_leaf.update_layout(yaxis_title=\"\u5e73\u5747\u5024\", xaxis_title=\"\u8272\", title=\"\u8272\u3054\u3068\u5e73\u5747\u5024\", template=\"plotly_white\")","de136fe6":"## \u30c1\u30e3\u30cd\u30eb\u5024\u30921\u3064\u306e\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\n\nfig = ff.create_distplot([red_values, green_values, blue_values],group_labels=[\"R\", \"G\", \"B\"],colors=[\"red\", \"green\", \"blue\"])\nfig.update_layout(title_text=\"Distribution all channel values\", template=\"simple_white\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig.data[1].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[1].marker.line.width = 0.5\nfig.data[2].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[2].marker.line.width = 0.5\nfig","e8332975":"## \u753b\u50cf\u8aad\u307f\u8fbc\u307f\u306e\u95a2\u6570\u3092\u4f5c\u6210\n### \u72b6\u614b\u306e\u540d\u79f0\u3092train\u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u304b\u3089\u53d6\u5f97\u3057\u3001\u305d\u308c\u3092\u6307\u5b9a\u3057\u3066\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\u4ed5\u7d44\u307f\u306b\u3059\u308b\ndef visualize_leaves(cond=[0, 0, 0, 0], cond_cols=[\"healthy\"], is_cond=True):\n    if not is_cond:\n        cols, rows = 3, min([3, len(train_images)\/\/3])\n        fig, ax = plt.subplots(nrows=rows, ncols=cols, figsize=(30, rows*20\/3))\n        for col in range(cols):\n            for row in range(rows):\n                ax[row, col].imshow(train_images.loc[train_images.index[-row*3-col-1]])\n        return None\n        \n    cond_0 = \"healthy == {}\".format(cond[0])\n    cond_1 = \"scab == {}\".format(cond[1])\n    cond_2 = \"rust == {}\".format(cond[2])\n    cond_3 = \"multiple_diseases == {}\".format(cond[3])\n    \n    cond_list = []\n    for col in cond_cols:\n        if col == \"healthy\":\n            cond_list.append(cond_0)\n        if col == \"scab\":\n            cond_list.append(cond_1)\n        if col == \"rust\":\n            cond_list.append(cond_2)\n        if col == \"multiple_diseases\":\n            cond_list.append(cond_3)\n    \n    data = train.loc[:99]\n    for cond in cond_list:\n        data = data.query(cond)\n        \n    images = train_images.loc[list(data.index)]\n    cols, rows = 3, min([3, len(images)\/\/3])\n    \n    fig, ax = plt.subplots(nrows=rows, ncols=cols, figsize=(30, rows*20\/3))\n    for col in range(cols):\n        for row in range(rows):\n            ax[row, col].imshow(images.loc[images.index[row*3+col]])\n    plt.show()","e56f585b":"visualize_leaves(cond=[1, 0, 0, 0], cond_cols=[\"healthy\"])","ef8fd509":"visualize_leaves(cond=[0, 1, 0, 0], cond_cols=[\"scab\"])","da87e9e0":"visualize_leaves(cond=[0, 0, 1, 0], cond_cols=[\"rust\"])","478e87df":"visualize_leaves(cond=[0, 0, 0, 1], cond_cols=[\"multiple_diseases\"])","12de25a2":"## \u5186\u30b0\u30e9\u30d5\u3067train\u30c7\u30fc\u30bf\u306e\u8449\u3063\u3071\u306e\u5272\u5408\u5206\u5e03\u3092\u898b\u3066\u307f\u308b\nfig = go.Figure([go.Pie(labels=train.columns[1:], values=train.iloc[:,1:].sum().values)])\nfig.update_layout(title_text=\"\u72b6\u614b\u5206\u5e03\", template=\"simple_white\")\nfig.data[0].marker.line.color = 'rgb(0,0,0)'\nfig.data[0].marker.line.width = 0.5\nfig.show()","260175a4":"## \u68d2\u30b0\u30e9\u30d5\u3067train\u30c7\u30fc\u30bf\u306e\u8449\u3063\u3071\u306e\u5272\u5408\u5206\u5e03\u3092\u898b\u3066\u307f\u308b\nfig = go.Figure([go.Bar(x=train.columns[1:], y=train.iloc[:,1:].sum().values)])\nfig.update_layout(title_text=\"\u72b6\u614b\u5206\u5e03\", template=\"simple_white\")\nfig.data[0].marker.line.color = 'rgb(0,0,0)'\nfig.data[0].marker.line.width = 0.5\nfig.show()","c57c1340":"## \u30a8\u30c3\u30b8\u691c\u51fa\u306e\u95a2\u6570\ndef edge_and_cut(img):\n    emb_img = img.copy()\n    edges = cv2.Canny(img, 100, 200)\n    edge_coors = []\n    for i in range(edges.shape[0]):\n        for j in range(edges.shape[1]):\n            if edges[i][j] != 0:\n                edge_coors.append((i, j))\n    \n    row_min = edge_coors[np.argsort([coor[0] for coor in edge_coors])[0]][0]\n    row_max = edge_coors[np.argsort([coor[0] for coor in edge_coors])[-1]][0]\n    col_min = edge_coors[np.argsort([coor[1] for coor in edge_coors])[0]][1]\n    col_max = edge_coors[np.argsort([coor[1] for coor in edge_coors])[-1]][1]\n    new_img = img[row_min:row_max, col_min:col_max]\n    \n    emb_img[row_min-10:row_min+10, col_min:col_max] = [255, 0, 0]\n    emb_img[row_max-10:row_max+10, col_min:col_max] = [255, 0, 0]\n    emb_img[row_min:row_max, col_min-10:col_min+10] = [255, 0, 0]\n    emb_img[row_min:row_max, col_max-10:col_max+10] = [255, 0, 0]\n    \n    fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 20))\n    ax[0].imshow(img, cmap='gray')\n    ax[0].set_title('original', fontsize=24)\n    ax[1].imshow(edges, cmap='gray')\n    ax[1].set_title('canny edge', fontsize=24)\n    ax[2].imshow(emb_img, cmap='gray')\n    ax[2].set_title('trimming', fontsize=24)\n    plt.show()","e074a915":"edge_and_cut(train_images[42])\nedge_and_cut(train_images[25])\nedge_and_cut(train_images[31])","10bc25ed":"def invert(img):\n    fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 20))\n    ax[0].imshow(img)\n    ax[0].set_title('original', fontsize=24)\n    ax[1].imshow(cv2.flip(img, 0))\n    ax[1].set_title('upside down', fontsize=24)\n    ax[2].imshow(cv2.flip(img, 1))\n    ax[2].set_title('horizontal flip', fontsize=24)\n    plt.show()","a3b65035":"invert(train_images[42])\ninvert(train_images[25])\ninvert(train_images[31])","e89f7b22":"def conv(img):\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 20))\n    kernel = np.ones((7, 7), np.float32)\/25\n    conv = cv2.filter2D(img, -1, kernel)\n    ax[0].imshow(img)\n    ax[0].set_title('original', fontsize=24)\n    ax[1].imshow(conv)\n    ax[1].set_title('convolved', fontsize=24)\n    plt.show()","0803d841":"conv(train_images[42])\nconv(train_images[25])\nconv(train_images[31])","0494ae80":"def blur(img):\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 20))\n    ax[0].imshow(img)\n    ax[0].set_title('original', fontsize=24)\n    ax[1].imshow(cv2.blur(img, (100, 100)))\n    ax[1].set_title('blurred', fontsize=24)\n    plt.show()","b2a6ab8b":"blur(train_images[42])\nblur(train_images[25])\nblur(train_images[31])","0bdbbdb5":"AUTO = tf.data.experimental.AUTOTUNE\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\n\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()","0e985a5d":"def format_path(st):\n    return GCS_DS_PATH + '\/images\/' + st + '.jpg'\n\ntest_paths = test.image_id.apply(format_path).values\ntrain_paths = train.image_id.apply(format_path).values\n\ntrain_labels = np.float32(train.loc[:, 'healthy':'scab'].values)\ntrain_paths, valid_paths, train_labels, valid_labels =\\\ntrain_test_split(train_paths, train_labels, test_size=0.15, random_state=2020)","8465ddfe":"def decode_image(filename, label=None, image_size=(512, 512)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n\ndef data_augment(image, label=None):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    \n    if label is None:\n        return image\n    else:\n        return image, label","856ba992":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .map(data_augment, num_parallel_calls=AUTO)\n    .repeat()\n    .shuffle(512)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((valid_paths, valid_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(test_paths)\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n)","0a2b7442":"def build_lrfn(lr_start=0.00001, lr_max=0.00005, \n               lr_min=0.00001, lr_rampup_epochs=5, \n               lr_sustain_epochs=0, lr_exp_decay=.8):\n    lr_max = lr_max * strategy.num_replicas_in_sync\n\n    def lrfn(epoch):\n        if epoch < lr_rampup_epochs:\n            lr = (lr_max - lr_start) \/ lr_rampup_epochs * epoch + lr_start\n        elif epoch < lr_rampup_epochs + lr_sustain_epochs:\n            lr = lr_max\n        else:\n            lr = (lr_max - lr_min) *\\\n                 lr_exp_decay**(epoch - lr_rampup_epochs\\\n                                - lr_sustain_epochs) + lr_min\n        return lr\n    return lrfn","b7ccb5f2":"lrfn = build_lrfn()\nSTEPS_PER_EPOCH = train_labels.shape[0] \/\/ BATCH_SIZE\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)","6d511ef4":"with strategy.scope():\n    model = tf.keras.Sequential([DenseNet121(input_shape=(512, 512, 3),\n                                             weights='imagenet',\n                                             include_top=False),\n                                 L.GlobalAveragePooling2D(),\n                                 L.Dense(train_labels.shape[1],\n                                         activation='softmax')])\n        \n    model.compile(optimizer='adam',\n                  loss = 'categorical_crossentropy',\n                  metrics=['categorical_accuracy'])\n    model.summary()","00bb89f4":"SVG(tf.keras.utils.model_to_dot(Model(model.layers[0].input, model.layers[0].layers[13].output), dpi=70).create(prog='dot', format='svg'))","3406604c":"SVG(tf.keras.utils.model_to_dot(model, dpi=70).create(prog='dot', format='svg'))","f402824b":"history = model.fit(train_dataset,\n                    epochs=EPOCHS,\n                    callbacks=[lr_schedule],\n                    steps_per_epoch=STEPS_PER_EPOCH,\n                    validation_data=valid_dataset)","98d57a32":"## DenseNet\u306e\u30a8\u30dd\u30c3\u30af\u3054\u3068\u306eLoss\u3068\u6b63\u89e3\u7387\u3092\u53ef\u8996\u5316\ndef display_training_curves(training, validation, yaxis):\n    if yaxis == \"loss\":\n        ylabel = \"Loss\"\n        title = \"\u30a8\u30dd\u30c3\u30af\u3054\u3068\u306eloss\"\n    else:\n        ylabel = \"Accuracy\"\n        title = \"\u30a8\u30dd\u30c3\u30af\u3054\u3068\u306e\u6b63\u89e3\u7387\"\n        \n    fig = go.Figure()\n        \n    fig.add_trace(\n        go.Scatter(x=np.arange(1, EPOCHS+1), mode='lines+markers', y=training, marker=dict(color=\"dodgerblue\"),\n               name=\"Train\"))\n    \n    fig.add_trace(\n        go.Scatter(x=np.arange(1, EPOCHS+1), mode='lines+markers', y=validation, marker=dict(color=\"darkorange\"),\n               name=\"Val\"))\n    \n    fig.update_layout(title_text=title, yaxis_title=ylabel, xaxis_title=\"Epochs\", template=\"plotly_white\")\n    fig.show()","25aeea1b":"display_training_curves(\n    history.history['categorical_accuracy'], \n    history.history['val_categorical_accuracy'], \n    'accuracy')","d9119a1f":"def process(img):\n    return cv2.resize(img\/255.0, (512, 512)).reshape(-1, 512, 512, 3)\ndef predict(img):\n    return model.layers[2](model.layers[1](model.layers[0](process(img)))).numpy()[0]\n\nfig = make_subplots(rows=4, cols=2)\npreds = predict(train_images[2])\n\ncolors = {\"Healthy\":px.colors.qualitative.Plotly[0], \"Scab\":px.colors.qualitative.Plotly[0], \"Rust\":px.colors.qualitative.Plotly[0], \"Multiple diseases\":px.colors.qualitative.Plotly[0]}\nif list.index(preds.tolist(), max(preds)) == 0:\n    pred = \"Healthy\"\nif list.index(preds.tolist(), max(preds)) == 1:\n    pred = \"Scab\"\nif list.index(preds.tolist(), max(preds)) == 2:\n    pred = \"Rust\"\nif list.index(preds.tolist(), max(preds)) == 3:\n    pred = \"Multiple diseases\"\n\ncolors[pred] = px.colors.qualitative.Plotly[1]\ncolors[\"Healthy\"] = \"seagreen\"\ncolors = [colors[val] for val in colors.keys()]\nfig.add_trace(go.Image(z=cv2.resize(train_images[2], (205, 136))), row=1, col=1)\nfig.add_trace(go.Bar(x=[\"Healthy\", \"Multiple diseases\", \"Rust\", \"Scab\"], y=preds, marker=dict(color=colors)), row=1, col=2)\nfig.update_layout(height=1200, width=800, title_text=\"DenseNet Predictions\", showlegend=False)\n\npreds = predict(train_images[0])\ncolors = {\"Healthy\":px.colors.qualitative.Plotly[0], \"Scab\":px.colors.qualitative.Plotly[0], \"Rust\":px.colors.qualitative.Plotly[0], \"Multiple diseases\":px.colors.qualitative.Plotly[0]}\nif list.index(preds.tolist(), max(preds)) == 0:\n    pred = \"Healthy\"\nif list.index(preds.tolist(), max(preds)) == 1:\n    pred = \"Multiple diseases\"\nif list.index(preds.tolist(), max(preds)) == 2:\n    pred = \"Rust\"\nif list.index(preds.tolist(), max(preds)) == 3:\n    pred = \"Scab\"\n    \ncolors[pred] = px.colors.qualitative.Plotly[1]\ncolors[\"Multiple diseases\"] = \"seagreen\"\ncolors = [colors[val] for val in colors.keys()]\nfig.add_trace(go.Image(z=cv2.resize(train_images[0], (205, 136))), row=2, col=1)\nfig.add_trace(go.Bar(x=[\"Healthy\", \"Multiple diseases\", \"Rust\", \"Scab\"], y=preds, marker=dict(color=colors)), row=2, col=2)\n\npreds = predict(train_images[3])\ncolors = {\"Healthy\":px.colors.qualitative.Plotly[0], \"Scab\":px.colors.qualitative.Plotly[0], \"Rust\":px.colors.qualitative.Plotly[0], \"Multiple diseases\":px.colors.qualitative.Plotly[0]}\nif list.index(preds.tolist(), max(preds)) == 0:\n    pred = \"Healthy\"\nif list.index(preds.tolist(), max(preds)) == 1:\n    pred = \"Multiple diseases\"\nif list.index(preds.tolist(), max(preds)) == 2:\n    pred = \"Rust\"\nif list.index(preds.tolist(), max(preds)) == 3:\n    pred = \"Scab\"\n    \ncolors[pred] = px.colors.qualitative.Plotly[1]\ncolors[\"Rust\"] = \"seagreen\"\ncolors = [colors[val] for val in colors.keys()]\nfig.add_trace(go.Image(z=cv2.resize(train_images[3], (205, 136))), row=3, col=1)\nfig.add_trace(go.Bar(x=[\"Healthy\", \"Multiple diseases\", \"Rust\", \"Scab\"], y=preds, marker=dict(color=colors)), row=3, col=2)\n\npreds = predict(train_images[1])\ncolors = {\"Healthy\":px.colors.qualitative.Plotly[0], \"Scab\":px.colors.qualitative.Plotly[0], \"Rust\":px.colors.qualitative.Plotly[0], \"Multiple diseases\":px.colors.qualitative.Plotly[0]}\nif list.index(preds.tolist(), max(preds)) == 0:\n    pred = \"Healthy\"\nif list.index(preds.tolist(), max(preds)) == 1:\n    pred = \"Multiple diseases\"\nif list.index(preds.tolist(), max(preds)) == 2:\n    pred = \"Rust\"\nif list.index(preds.tolist(), max(preds)) == 3:\n    pred = \"Scab\"\n    \ncolors[pred] = px.colors.qualitative.Plotly[1]\ncolors[\"Scab\"] = \"seagreen\"\ncolors = [colors[val] for val in colors.keys()]\nfig.add_trace(go.Image(z=cv2.resize(train_images[1], (205, 136))), row=4, col=1)\nfig.add_trace(go.Bar(x=[\"Healthy\", \"Multiple diseases\", \"Rust\", \"Scab\"], y=preds, marker=dict(color=colors)), row=4, col=2)\n\nfig.update_layout(template=\"plotly_white\")","e3da4022":"with strategy.scope():\n    model = tf.keras.Sequential([efn.EfficientNetB7(input_shape=(512, 512, 3),\n                                                    weights='imagenet',\n                                                    include_top=False),\n                                 L.GlobalAveragePooling2D(),\n                                 L.Dense(train_labels.shape[1],\n                                         activation='softmax')])\n    \n    \n        \n    model.compile(optimizer='adam',\n                  loss = 'categorical_crossentropy',\n                  metrics=['categorical_accuracy'])\n    model.summary()","49c0072a":"SVG(tf.keras.utils.model_to_dot(Model(model.layers[0].input, model.layers[0].layers[11].output), dpi=70).create(prog='dot', format='svg'))","3d26ee33":"SVG(tf.keras.utils.model_to_dot(model, dpi=70).create(prog='dot', format='svg'))","109dfef8":"history = model.fit(train_dataset,\n                    epochs=EPOCHS,\n                    callbacks=[lr_schedule],\n                    steps_per_epoch=STEPS_PER_EPOCH,\n                    validation_data=valid_dataset)","b496ff7f":"## densenet\u3068\u540c\u3058\u304f\u5b66\u7fd2\u7cbe\u5ea6\u306e\u63a8\u79fb\u3092\u53ef\u8996\u5316\ndisplay_training_curves(\n    history.history['categorical_accuracy'], \n    history.history['val_categorical_accuracy'], \n    'accuracy')","836a4854":"## densenet\u3068\u540c\u3058\u95a2\u6570\u3092\u4f7f\u7528\ndef process(img):\n    return cv2.resize(img\/255.0, (512, 512)).reshape(-1, 512, 512, 3)\ndef predict(img):\n    return model.layers[2](model.layers[1](model.layers[0](process(img)))).numpy()[0]\n\nfig = make_subplots(rows=4, cols=2)\npreds = predict(train_images[2])\n\ncolors = {\"Healthy\":px.colors.qualitative.Plotly[0], \"Scab\":px.colors.qualitative.Plotly[0], \"Rust\":px.colors.qualitative.Plotly[0], \"Multiple diseases\":px.colors.qualitative.Plotly[0]}\nif list.index(preds.tolist(), max(preds)) == 0:\n    pred = \"Healthy\"\nif list.index(preds.tolist(), max(preds)) == 1:\n    pred = \"Scab\"\nif list.index(preds.tolist(), max(preds)) == 2:\n    pred = \"Rust\"\nif list.index(preds.tolist(), max(preds)) == 3:\n    pred = \"Multiple diseases\"\n\ncolors[pred] = px.colors.qualitative.Plotly[1]\ncolors[\"Healthy\"] = \"seagreen\"\ncolors = [colors[val] for val in colors.keys()]\nfig.add_trace(go.Image(z=cv2.resize(train_images[2], (205, 136))), row=1, col=1)\nfig.add_trace(go.Bar(x=[\"Healthy\", \"Multiple diseases\", \"Rust\", \"Scab\"], y=preds, marker=dict(color=colors)), row=1, col=2)\nfig.update_layout(height=1200, width=800, title_text=\"EfficientNet Predictions\", showlegend=False)\n\npreds = predict(train_images[0])\ncolors = {\"Healthy\":px.colors.qualitative.Plotly[0], \"Scab\":px.colors.qualitative.Plotly[0], \"Rust\":px.colors.qualitative.Plotly[0], \"Multiple diseases\":px.colors.qualitative.Plotly[0]}\nif list.index(preds.tolist(), max(preds)) == 0:\n    pred = \"Healthy\"\nif list.index(preds.tolist(), max(preds)) == 1:\n    pred = \"Multiple diseases\"\nif list.index(preds.tolist(), max(preds)) == 2:\n    pred = \"Rust\"\nif list.index(preds.tolist(), max(preds)) == 3:\n    pred = \"Scab\"\n    \ncolors[pred] = px.colors.qualitative.Plotly[1]\ncolors[\"Multiple diseases\"] = \"seagreen\"\ncolors = [colors[val] for val in colors.keys()]\nfig.add_trace(go.Image(z=cv2.resize(train_images[0], (205, 136))), row=2, col=1)\nfig.add_trace(go.Bar(x=[\"Healthy\", \"Multiple diseases\", \"Rust\", \"Scab\"], y=preds, marker=dict(color=colors)), row=2, col=2)\n\npreds = predict(train_images[3])\ncolors = {\"Healthy\":px.colors.qualitative.Plotly[0], \"Scab\":px.colors.qualitative.Plotly[0], \"Rust\":px.colors.qualitative.Plotly[0], \"Multiple diseases\":px.colors.qualitative.Plotly[0]}\nif list.index(preds.tolist(), max(preds)) == 0:\n    pred = \"Healthy\"\nif list.index(preds.tolist(), max(preds)) == 1:\n    pred = \"Multiple diseases\"\nif list.index(preds.tolist(), max(preds)) == 2:\n    pred = \"Rust\"\nif list.index(preds.tolist(), max(preds)) == 3:\n    pred = \"Scab\"\n    \ncolors[pred] = px.colors.qualitative.Plotly[1]\ncolors[\"Rust\"] = \"seagreen\"\ncolors = [colors[val] for val in colors.keys()]\nfig.add_trace(go.Image(z=cv2.resize(train_images[3], (205, 136))), row=3, col=1)\nfig.add_trace(go.Bar(x=[\"Healthy\", \"Multiple diseases\", \"Rust\", \"Scab\"], y=preds, marker=dict(color=colors)), row=3, col=2)\n\npreds = predict(train_images[1])\ncolors = {\"Healthy\":px.colors.qualitative.Plotly[0], \"Scab\":px.colors.qualitative.Plotly[0], \"Rust\":px.colors.qualitative.Plotly[0], \"Multiple diseases\":px.colors.qualitative.Plotly[0]}\nif list.index(preds.tolist(), max(preds)) == 0:\n    pred = \"Healthy\"\nif list.index(preds.tolist(), max(preds)) == 1:\n    pred = \"Multiple diseases\"\nif list.index(preds.tolist(), max(preds)) == 2:\n    pred = \"Rust\"\nif list.index(preds.tolist(), max(preds)) == 3:\n    pred = \"Scab\"\n    \ncolors[pred] = px.colors.qualitative.Plotly[1]\ncolors[\"Scab\"] = \"seagreen\"\ncolors = [colors[val] for val in colors.keys()]\nfig.add_trace(go.Image(z=cv2.resize(train_images[1], (205, 136))), row=4, col=1)\nfig.add_trace(go.Bar(x=[\"Healthy\", \"Multiple diseases\", \"Rust\", \"Scab\"], y=preds, marker=dict(color=colors)), row=4, col=2)\nfig.update_layout(template=\"plotly_white\")","c6d46f7a":"EfficientNet\u306e\u57fa\u672c\u7684\u306a\u69cb\u9020\u3002","90925933":"\u6591\u70b9\u3084\u8d64\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u7b87\u6240\u304c\u307b\u307c\u306a\u3044\u3001\u7dd1\u306e\u5272\u5408\u304c\u591a\u3044\u753b\u50cf","30e7bedd":"# \u30e2\u30c7\u30eb\u69cb\u7bc9 <a id=\"3\"><\/a>","932490b0":"### \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","3458348a":"# EDA <a id=\"1\"><\/a>","1d8ab2f5":"## Canny\u95a2\u6570\u306b\u3088\u308b\u30a8\u30c3\u30b8\u691c\u51fa <a id=\"2.1\"><\/a>","b3f56c75":"### scab","106d0901":"train\u3082valid\u3082\u304a\u304a\u3088\u305d\u5b66\u7fd2\u304c\u51fa\u6765\u3066\u3044\u308b\u3002\u7279\u306bvalidation\u306e\u65b9\u304cdensenet\u306b\u6bd4\u3079\u3066\u6bd4\u8f03\u7684\u65e9\u3044\u30a8\u30dd\u30c3\u30af\u306790%\u8fd1\u304f\u306e\u7cbe\u5ea6\u307e\u3067\u4e0a\u304c\u3063\u3066\u3044\u308b\u3002\n\nefficientnet\u306e\u65b9\u304c\u5b66\u7fd2\u30b9\u30d4\u30fc\u30c9\u306f\u65e9\u3044\u306e\u304b\u3002","1209df68":"## \u30c7\u30fc\u30bf\u306e\u4e0b\u6e96\u5099 <a id=\"3.1\"><\/a>\n\n\u4eca\u56de\u306f\u591a\u304f\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u305fDenseNet\u3068EfficientNet\u306e2\u3064\u3092\u4f5c\u6210\u3057\u3001\u7cbe\u5ea6\u3092\u6bd4\u3079\u3066\u307f\u308b\u3002","4a3756f6":"### Healthy","2fe2418a":"### \u30b0\u30e9\u30d5","fbfef287":"### \u5186\u30b0\u30e9\u30d5","4a266ef7":"# \u753b\u50cf\u51e6\u7406 <a id=\"2\"><\/a>","447e0103":"\u4ed6\u306e\u30ab\u30fc\u30cd\u30eb\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u30a8\u30c3\u30b8\u691c\u51fa\u306e\u95a2\u6570\u3092\u8a18\u8ff0\u3059\u308b\u3002","f2e0da74":"### rust","aae99d5f":"### EfficientNet\u306e\u57fa\u672c\u7684\u306a\u69cb\u9020","6830b80b":"## Flipping\uff08\u753b\u50cf\u306e\u56de\u8ee2\u3068\u53cd\u8ee2\uff09 <a id=\"2.2\"><\/a>\n\n\u3053\u3053\u304b\u3089\u5148\u306f\u753b\u50cf\u306e\u6c34\u5897\u3057\u30923\u30d1\u30bf\u30fc\u30f3\u306b\u3088\u3063\u3066\u884c\u3046\u3002\u307e\u305a\u306f\u56de\u8ee2\u3068\u53cd\u8ee2","1f6de79b":"### \u5b66\u7fd2\u7d50\u679c\u306e\u53ef\u8996\u5316","39b7341c":"## \u8449\u3063\u3071\u306e\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f <a id=\"1.4\"><\/a>","cbcc0367":"\u8d64\u3001\u9ec4\u8272\u306e\u6591\u70b9\u304c\u3044\u304f\u3064\u304b\u306e\u7b87\u6240\u306b\u5b58\u5728\u3059\u308b\u3002rust\u306e\u753b\u50cf\u306f\u8d64\u306e\u5272\u5408\u304c\u4ed6\u3088\u308a\u9ad8\u304f\u306a\u3063\u3066\u3044\u305d\u3046","0d6bceb7":"## \u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f <a id=\"1.2\"><\/a>","0362ac61":"### \u8d64\u306e\u5206\u5e03","114841b6":"## \u68d2\u30b0\u30e9\u30d5","bdcc80de":"# \u307e\u3068\u3081\u3068\u8003\u5bdf <a id=\"4\"><\/a>\n\n## 1. EDA\u306b\u3064\u3044\u3066\n\u6df1\u5c64\u5b66\u7fd2\u306e\u305f\u3081\u7279\u5fb4\u91cf\u306f\u3053\u3061\u3089\u3067\u7528\u610f\u3057\u3066\u3044\u306a\u3044\u304c\u3001\u591a\u304f\u306e\u30ab\u30fc\u30cd\u30eb\u3067rgb\u306e\u30c1\u30e3\u30cd\u30eb\u5024\u306e\u5206\u5e03\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u305f\u305f\u3081\u3001\u753b\u50cf\u306e\u8272\u5f69\u5206\u5e03\u306f\u5b66\u7fd2\u306e\u969b\u306b\u4f7f\u308f\u308c\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u308b\u3002\n\n\u307e\u305f\u3001multi disease\u304c\u753b\u50cf\u6570\u304c\u4ed6\u306b\u6bd4\u3079\u3066\u5c11\u306a\u304f\u7cbe\u5ea6\u3078\u306e\u5f71\u97ff\u3092\u61f8\u5ff5\u3057\u3066\u3044\u305f\u304c\u3001\u3069\u3061\u3089\u306e\u30e2\u30c7\u30eb\u3067\u3082\u554f\u984c\u306a\u304f\u5b66\u7fd2\u304c\u9032\u3093\u3067\u3044\u305f\u305f\u3081\u753b\u50cf\u306e\u5098\u5897\u3057\u304c\u52b9\u3044\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u3066\u3044\u308b\u3002\n\n## 2. \u5b66\u7fd2\u524d\u306e\u4e0b\u6e96\u5099\u306b\u3064\u3044\u3066\n\u30a8\u30c3\u30b8\u691c\u51fa\u3092Canny\u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u884c\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u305f\u3002\u4ed5\u7d44\u307f\u304c\u5b8c\u5168\u306b\u7406\u89e3\u3067\u304d\u305f\u308f\u3051\u3067\u306f\u306a\u3044\u304c\u3001\u5149\u306e\u52fe\u914d\u3092\u7b97\u51fa\u3057\u3066\u305d\u3053\u304c\u5927\u304d\u3044\u7b87\u6240\u304c\u7269\u4f53\u304c\u5909\u308f\u3063\u305f\u4f4d\u7f6e\u3068\u6349\u3048\u3066\u3001\u307b\u307c\u6b63\u78ba\u306a\u8449\u306e\u4f4d\u7f6e\u3092\u691c\u51fa\u3059\u308b\u3068\u3044\u3046\u304a\u304a\u3088\u305d\u306e\u4ed5\u7d44\u307f\u306f\u7406\u89e3\u3067\u304d\u305f\u3002\n\n## 3. \u5b66\u7fd2\u7cbe\u5ea6\u306b\u3064\u3044\u3066\n\u4eca\u56de\u306fdensenet\u3068efficientnet\u306e2\u3064\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3092\u884c\u3044\u3001densenet\u3088\u308a\u3082efficientnet\u306e\u65b9\u304c\u3088\u308a\u5c11\u306a\u3044\u30a8\u30dd\u30c3\u30af\u3067\u826f\u3044\u7cbe\u5ea6\u304c\u51fa\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u3063\u305f\u3002\u753b\u50cf\u89e3\u6790\u306f\u4e8b\u524d\u306b\u4f55\u3092\u884c\u3046\u304b\u3067\u306f\u306a\u304f\u3001\u3069\u306e\u3088\u3046\u306a\u30e2\u30c7\u30eb\u3092\u9069\u5207\u306a\u72b6\u6cc1\u306b\u304a\u3044\u3066\u4f7f\u3048\u308b\u304b\u304c\u5b66\u7fd2\u7cbe\u5ea6\u306e\u9375\u306b\u306a\u3063\u3066\u304d\u305d\u3046\u306a\u306e\u3067\u3001\u3053\u306e\u8fba\u306e\u30e2\u30c7\u30eb\u306e\u7279\u5fb4\u306f\u305c\u3072\u62bc\u3055\u3048\u3066\u304a\u304d\u305f\u3044\u3002","8b764027":"### \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","87f17ab1":"- \u4e0a\u4e0b\u53cd\u8ee2\u3001\u5de6\u53f3\u53cd\u8ee2\u3057\u305f\u72b6\u614b\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3066\u3082\u5b66\u7fd2\u3092\u884c\u3046\u3053\u3068\u3067\u6c4e\u7528\u6027\u306e\u9ad8\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b","93293b37":"## \u30c1\u30e3\u30cd\u30eb\u5024\u8abf\u67fb <a id=\"1.3\"><\/a>","5c036d52":"### \u4f7f\u3046\u30e2\u30c7\u30eb\u306e\u56f3\u89e3\n\n\u53c2\u8003\u306b\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u3067\u4f7f\u308f\u308c\u3066\u3044\u305fDenseNet\u304b\u3089pooling\u3078\u3068\u7d9a\u304f\u30e2\u30c7\u30eb\u3092\u771f\u4f3c\u3057\u3066\u69cb\u7bc9\u3057\u3066\u307f\u308b","ffc62cd4":"### DenseNet\u306e\u5206\u985e\u7d50\u679c\u3092\u3044\u304f\u3064\u304b\u8868\u793a","1b53f85a":"- multiple\u306e\u5272\u5408\u304c\u5c11\u306a\u304f\u5b66\u7fd2\u306b\u5f71\u97ff\u304c\u3042\u308b\u304b\u3082\n- \u305d\u308c\u4ee5\u5916\u306e\u3082\u306e\u306f\u304a\u304a\u3088\u305d\u5747\u7b49\u306b\u753b\u50cf\u30c7\u30fc\u30bf\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b","7dd67ee5":"### \u5b66\u7fd2\u7d50\u679c\u3092\u53d6\u5f97","ea23cf02":"## \u4eca\u5f8c\u306e\u5c55\u671b\n\u4eca\u56de\u5b66\u7fd2\u306e\u7cbe\u5ea6\u306f\u826f\u304b\u3063\u305f\u306e\u3060\u304c\u3001DenceNet\u30fbEfficientNet\u5171\u306b\u304b\u306a\u308a\u8a08\u7b97\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u5b66\u7fd2\u3057\u305fMobileNet\u3092\u4f7f\u3046\u3053\u3068\u3067\u591a\u5c11\u7cbe\u5ea6\u304c\u4e0b\u304c\u3063\u305f\u3068\u3057\u3066\u3082\u3069\u308c\u304f\u3089\u3044\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u524a\u6e1b\u3067\u304d\u308b\u306e\u304b\u3092\u8abf\u67fb\u3057\u3066\u307f\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u308b\u3002\n\n\u307e\u305f\u3001\u4eca\u56de\u306e\u958b\u767a\u3067\u306f\u6c4e\u5316\u6027\u80fd\u306b\u3064\u3044\u3066\u307e\u3067\u306f\u3042\u307e\u308a\u8a00\u53ca\u3067\u304d\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u5b9f\u969b\u306ekaggle\u7b49\u3067\u306fdropout\u7b49\u3082\u7528\u3044\u306a\u304c\u3089\u6c4e\u5316\u6027\u80fd\u306b\u3064\u3044\u3066\u3082\u691c\u8a3c\u3057\u3066\u3044\u304d\u305f\u3044\u3002","c3145991":"### \u75c5\u6c17\u306e\u30e9\u30d9\u30eb\u3068path\u306e\u8aad\u307f\u8fbc\u307f","8c160bd2":"\u3053\u3061\u3089\u306f\u5225\u306e\u75c5\u72b6\u306e\u8449\u306e\u753b\u50cf\u3002\u8aad\u307f\u8fbc\u307f\u306f\u554f\u984c\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3042\u3068\u306f\u3069\u3046\u3084\u3063\u3066\u75c5\u6c17\u3092\u898b\u5206\u3051\u3066\u3044\u304f\u304b\u3092\u8003\u3048\u308b","9c7665b8":"11\u30a8\u30dd\u30c3\u30af\u3042\u305f\u308a\u304b\u3089\u6b63\u89e3\u7387\u306f90%\u3092\u8d85\u3048\u3066\u3044\u308b\u3002\u6700\u521d\u306e\u65b9\u306ftrain\u3068validation\u306e\u6b63\u89e3\u7387\u306b\u30d0\u30e9\u30c4\u30ad\u304c\u3042\u308b\u304c\u4e00\u5b9a\u4ee5\u4e0a\u5b66\u7fd2\u304c\u9032\u3080\u3068\u3069\u3061\u3089\u3082\u9ad8\u3044\u6b63\u89e3\u7387\u3092\u793a\u3059\u3002","9dde3e71":"\u5168\u4f53\u304c\u304a\u304a\u3088\u305d\u306a\u6b63\u898f\u5206\u5e03\u3060\u3063\u305f\u306e\u306b\u5bfe\u3057\u3066\u3001\u8d64\u306f\u53f3\u306b\u6b6a\u307f\u304c\u3042\u308b\u3002\u3064\u307e\u308a\u3001\u3042\u307e\u308a\u30e1\u30a4\u30f3\u306e\u8272\u3067\u306f\u306a\u3044\u3002","f030366c":"### \u4eca\u56de\u898b\u5206\u3051\u308b\u75c5\u6c17\n- healthy\n- multiple_diseases\n- rust\n- scab\n\n\u3053\u308c\u3089\u306ergb\u306e\u5272\u5408\u3092\u5b66\u7fd2\u3055\u305b\u308c\u3070\u826f\u3055\u305d\u3046","35c65587":"### \u7dd1\u306e\u5206\u5e03","5dfdd36d":"### Canny\u3092\u4f7f\u3063\u305f\u30a8\u30c3\u30b8\u691c\u51fa\u306b\u95a2\u3059\u308b\u53c2\u8003\u6587\u732e\u3092\u4e00\u90e8\u629c\u7c8b\n1. \u30ce\u30a4\u30ba\u524a\u6e1b\n\u30a8\u30c3\u30b8\u691c\u51fa\u306f\u753b\u50cf\u4e2d\u306e\u30ce\u30a4\u30ba\u306b\u5bfe\u3057\u3066\u654f\u611f\u306a\u305f\u3081\uff0c\u307e\u305a\u521d\u3081\u306b\u753b\u50cf\u3092\u5e73\u6ed1\u5316\u3057\u3066\u30ce\u30a4\u30ba\u3092\u524a\u6e1b\u3057\u307e\u3059\uff0e\u5177\u4f53\u7684\u306b\u306f5x5\u306e\u30b5\u30a4\u30ba\u306e Gaussian\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u3044\u307e\u3059\uff0e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u65b9\u6cd5\u306f\u65e2\u306b\u524d\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u898b\u3066\u3044\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n2. \u753b\u50cf\u306e\u8f1d\u5ea6\u52fe\u914d\u3092\u898b\u3064\u3051\u308b\n\u6b21\u306b\uff0c\u5e73\u6ed1\u5316\u3055\u308c\u305f\u753b\u50cf\u304b\u3089Sobel\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u3063\u3066\u7e26\u65b9\u5411(G_y)\u3068\u6a2a\u65b9\u5411(G_x)\u306e1\u6b21\u5fae\u5206\u3092\u53d6\u5f97\u3057\u307e\u3059\uff0e\u3053\u308c\u30892\u3064\u306e\u5fae\u5206\u753b\u50cf\u304b\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a8\u30c3\u30b8\u306e\u52fe\u914d\u3068\u65b9\u5411\u3092\u6c42\u3081\u307e\u3059:\n\n$$\nEdge\\_Gradient \\; (G) = \\sqrt{G_x^2 + G_y^2}\n$$\n\n$$\nAngle \\; (\\theta) = \\tan^{-1} \\bigg(\\frac{G_y}{G_x}\\bigg)\n$$\n\n\u52fe\u914d\u65b9\u5411\u306f\u5e38\u306b\u30a8\u30c3\u30b8\u306b\u5bfe\u3057\u3066\u76f4\u4ea4\u3057\u307e\u3059\uff0e\u52fe\u914d\u65b9\u5411\u306f\u6a2a\uff0c\u7e26\uff0c\u4e8c\u3064\u306e\u5bfe\u89d2\u65b9\u5411\u306e\u5185\u3069\u308c\u304b\u4e00\u3064\u306b\u306a\u308a\u307e\u3059\uff0e\n\n3. \u975e\u6975\u5927\u5024\u306e\u6291\u5236\n\u52fe\u914d\u306e\u65b9\u5411\u3068\u5f37\u5ea6\u3092\u8a08\u7b97\u3057\u305f\u5f8c\u306f\uff0c\u30a8\u30c3\u30b8\u3068\u95a2\u4fc2\u306a\u3044\u753b\u7d20\u3092\u53d6\u308a\u9664\u304d\u307e\u3059\uff0e\u5177\u4f53\u7684\u306b\u306f\uff0c\u5404\u753b\u7d20\u306b\u5bfe\u3057\u3066\u305d\u306e\u753b\u7d20\u304c\u52fe\u914d\u65b9\u5411\u306b\u5bfe\u3057\u3066\u6975\u5927\u5024\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\n\n4. \u30d2\u30b9\u30c6\u30ea\u30b7\u30b9(Hysteresis)\u3092\u4f7f\u3063\u305f\u3057\u304d\u3044\u5024\u51e6\u7406\n\u524d\u51e6\u7406\u3067\u691c\u51fa\u3055\u308c\u305f\u30a8\u30c3\u30b8\u306e\u5185\uff0c\u6b63\u3057\u3044\u30a8\u30c3\u30b8\u3068\u305d\u3046\u3067\u306a\u3044\u3082\u306e\u3092\u533a\u5225\u3057\u307e\u3059\uff0e\u3053\u306e\u533a\u5225\u3092\u3059\u308b\u305f\u3081\u306b\uff0c minVal \u3068 maxVal \u3068\u3044\u3046\u4e8c\u3064\u306e\u3057\u304d\u3044\u5024\u3092\u4f7f\u3044\u307e\u3059\uff0e\u753b\u7d20\u5024\u306e\u5fae\u5206\u5024\u304c maxVal \u4ee5\u4e0a\u3067\u3042\u308c\u3070\u6b63\u3057\u3044\u30a8\u30c3\u30b8\u3068\u307f\u306a\u3057\uff0c minVal \u4ee5\u4e0b\u306e\u5024\u3067\u3042\u308c\u3070\u30a8\u30c3\u30b8\u3067\u306f\u306a\u3044\u3068\u307f\u306a\u3057\u9664\u5916\u3057\u307e\u3059\uff0e\u5fae\u5206\u5024\u304c\u4e8c\u3064\u306e\u3057\u304d\u3044\u5024\u306e\u9593\u3067\u3042\u308c\u3070\uff0c\u6b63\u3057\u3044\u30a8\u30c3\u30b8\u3068\u305d\u3046\u3067\u306a\u3044\u30a8\u30c3\u30b8\u3068\u306e\u96a3\u63a5\u95a2\u4fc2\u3092\u57fa\u306b\u533a\u5225\u3057\u307e\u3059\uff0e\u6b63\u3057\u3044\u30a8\u30c3\u30b8\u3068\u533a\u5225\u3055\u308c\u305f\u753b\u7d20\u306b\u3064\u306a\u304c\u3063\u3066\u3044\u308c\u3070\u6b63\u3057\u3044\u30a8\u30c3\u30b8\u3068\u307f\u306a\u3057\uff0c\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u30a8\u30c3\u30b8\u3067\u306f\u306a\u3044\u753b\u7d20\u3068\u307f\u306a\u3057\u307e\u3059\n\n\u3053\u306e\u51e6\u7406\u3067\u306f\uff0c\u30a8\u30c3\u30b8\u306f\u9577\u3044\u7dda\u3067\u3042\u308b\u3068\u3044\u3046\u524d\u63d0\u306e\u3082\u3068\uff0c\u5c11\u6570\u306e\u753b\u7d20\u3067\u69cb\u6210\u3055\u308c\u308b\u30a8\u30c3\u30b8\u3082\u524a\u9664\u3057\u307e\u3059\uff0e\n\n\u6700\u7d42\u7684\u306b\u753b\u50cf\u4e2d\u306e\u5f37\u3044\u30a8\u30c3\u30b8\u3092\u691c\u51fa\u3067\u304d\u307e\u3059\uff0e","52ba3ed2":"\u8907\u5408\u306a\u306e\u3067rust\u304b\u3064scab\u306a\u3069\u3082\u898b\u3089\u308c\u308b\u3002\u3053\u308c\u3089\u3092\u3069\u3046\u898b\u5206\u3051\u308b\u304b","9a5c4791":"### \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u8a2d\u5b9a","1ba2d1a9":"\u6b63\u76f4\u3053\u306e\u8fba\u307e\u3067\u306fTPU\u306e\u30b3\u30d4\u30da\u3002\u3053\u306e\u5148\u306edensenet\u3068efficientnet\u306e2\u3064\u3092\u4f7f\u3063\u3066\u7cbe\u5ea6\u306e\u9055\u3044\u3092\u691c\u8a3c","8f0b73cd":"\u60f3\u50cf\u4ee5\u4e0a\u306b\u307c\u3084\u3051\u305f\u304c\u3001rust\u306a\u3069\u306f\u7279\u5fb4\u304c\u63b4\u3081\u3066\u3044\u305d\u3046\u306a\u306e\u3067\u5b66\u7fd2\u306f\u51fa\u6765\u305d\u3046","86b36bf5":"# \u76ee\u6b21\n\n* [<font size=4>EDA<\/font>](#1)\n    * [\u30c7\u30fc\u30bf\u306e\u4e0b\u6e96\u5099](#1.1)\n    * [\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f](#1.2)\n    * [\u30c1\u30e3\u30cd\u30eb\u5024\u8abf\u67fb](#1.3)\n    * [\u8449\u3063\u3071\u306e\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f](#1.4)\n    * [\u305d\u306e\u4ed6EDA](#1.5)\n\n\n* [<font size=4>\u753b\u50cf\u51e6\u7406<\/font>](#2)\n    * [Canny\u95a2\u6570\u306b\u3088\u308b\u30a8\u30c3\u30b8\u691c\u51fa](#2.1)\n    * [Flipping\uff08\u753b\u50cf\u306e\u56de\u8ee2\u3068\u53cd\u8ee2\uff09](#2.2)\n    * [Convolution(\u7573\u307f\u8fbc\u307f)](#2.3)\n    * [Blurring(\u307c\u3084\u3051\u305f\u753b\u50cf)](#2.4)\n  \n\n* [<font size=4>\u30e2\u30c7\u30eb\u69cb\u7bc9<\/font>](#3)\n    * [\u30c7\u30fc\u30bf\u306e\u4e0b\u6e96\u5099](#3.1)\n    * [DenseNet](#3.2)\n    * [EfficientNet](#3.3)\n\n* [<font size=4>\u307e\u3068\u3081\u3068\u8003\u5bdf<\/font>](#4)","6b1101b8":"\u53c2\u8003\u306b\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u3068\u540c\u3058\u6d41\u308c\u3067\u30e2\u30c7\u30eb\u3092\u8a2d\u8a08\u3057\u3066\u307f\u308b\u3002","82566dc4":"### \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210","a7d6e052":"train\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u3081\u3066\u3044\u305f\u306e\u3067\u6210\u529f\uff01","f55e4296":"\u3053\u3061\u3089\u3082\u6c34\u5897\u3057\u306e\u5f79\u5272\u3002\u65e5\u5149\u3092\u6d74\u3073\u3066\u3044\u308b\u3088\u3046\u306a\u753b\u50cf\u306b\u306a\u3063\u305f","0d63a502":"### \u30c7\u30fc\u30bf\u306epath\u306e\u8a2d\u5b9a","04b13e60":"## Blurring(\u307c\u3084\u3051\u305f\u753b\u50cf) <a id=\"2.4\"><\/a>\n\n\u5143\u306e\u753b\u50cf\u3092\u307c\u3084\u3051\u3055\u305b\u308bblur\u95a2\u6570\u3092\u4f7f\u7528","67b471e7":"\u591a\u304f\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u300c\u30a8\u30c3\u30b8\u691c\u51fa\u300d\u3068\u3044\u3046\u660e\u308b\u3055\u5909\u5316\u304c\u5927\u304d\u3044\u70b9\u3092\u62bd\u51fa\u3059\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u53c2\u8003\u6587\u732e\u306e\u8a18\u4e8b\u3092\u771f\u4f3c\u3057\u306a\u304c\u3089\u30a8\u30c3\u30b8\u691c\u51fa\u3092\u884c\u3063\u3066\u307f\u308b\u3002\n\n\u30a8\u30c3\u30b8\u691c\u51fa\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u753b\u50cf\u306e\u4e2d\u306e\u3069\u306e\u90e8\u5206\u304c\u8449\u3063\u3071\u306a\u306e\u304b\u3092AI\u304c\u7406\u89e3\u3057\u3084\u3059\u304f\u306a\u308a\u3001\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u304c\u4e0a\u304c\u308b\u3089\u3057\u3044\u3002\n\n\u3053\u3053\u3067\u306fOpenCV\u306eCanny\u95a2\u6570\u3092\u4f7f\u7528\u3002","3b2e7e18":"- 255\u306ergb\u306e\u632f\u308a\u5206\u3051\u3067\u898b\u308b\u3068\u7dd1\u304c\u4e00\u756a\u591a\u304f\u3001\u3064\u3044\u3067\u8d64\u3001\u9752\u3068\u3044\u3046\u9806\u3002\n- \u75c5\u6c17\u306b\u3088\u3063\u3066\u306f\u3053\u3053\u306e\u5272\u5408\u304c\u9055\u3063\u305f\u308a\u3057\u305d\u3046","83df1822":"### TPU\u306e\u4e0b\u6e96\u5099\nkaggle\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bTRU\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u4e0b\u6e96\u5099\u3092\u771f\u4f3c\u308b\u3002\uff08notebook\u306eAccelerator\u306fTPUv3-8\u306b\u5909\u66f4\u6e08\u307f\uff09","6238279d":"\u8aad\u307f\u8fbc\u307f\u306f\u6210\u529f\u3057\u3066\u3044\u308b\uff01","1eba9bac":"## DenseNet <a id=\"3.2\"><\/a>","43d41bd6":"- healthy, rust, scab\u306f\u826f\u3044\u304cmultiple_diseases\u306f\u679a\u6570\u304c\u5c11\u306a\u3044\u305f\u3081\u6c34\u5897\u3057\u3092\u3057\u305f\u3044\n- \u591a\u304f\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u884c\u308f\u308c\u3066\u3044\u305f\u8ee2\u7f6e\u306a\u3069\u3092\u884c\u3046\u306e\u304c\u826f\u3055\u305d\u3046","d9933d95":"### RGB\u5168\u3066\u306e\u30c1\u30e3\u30cd\u30eb","620c02fb":"\u8449\u306e\u3044\u304f\u3064\u304b\u306e\u7b87\u6240\u306b\u9ed2\u305a\u3093\u3067\u3057\u307e\u3063\u3066\u3044\u308b\u7b87\u6240\u304c\u5b58\u5728\u3059\u308b","188e92fe":"## EfficientNet <a id=\"3.3\"><\/a>\n\nEfficientNet\u306fCNN\u30d9\u30fc\u30b9\u306eImageNet\u30e2\u30c7\u30eb\u3002\u4eca\u56de\u306f\u3053\u308c\u3092\u7528\u3044\u3066\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b","6c6886bd":"### \u8ffd\u52a0\u6a5f\u80fd\u3092\u8a2d\u5b9a","59949c25":"DenseNet\u306e\u57fa\u672c\u30d6\u30ed\u30c3\u30af\u306e\u69cb\u9020\u3092\u56f3\u89e3\u3002","49814a41":"\u591a\u304f\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u3001channel distributions\u3068\u3044\u3046rgb\u3067\u753b\u50cf\u3092\u898b\u305f\u969b\u306e\u8d64\u3001\u7dd1\u3001\u9752\u306e\u5272\u5408\u3092\u8abf\u3079\u3066\u3044\u305f\u306e\u3067\u771f\u4f3c\u3057\u3066\u307f\u308b\u3002\n\n\u5065\u5eb7\u306a\u8449\u3063\u3071\u306f\u7dd1\u306e\u5272\u5408\u304c\u591a\u304f\u3001rust\uff08\u3055\u3073\uff09\u3084multiple diseases\uff08\u8907\u5408\uff09\u306f\u8d64\u306e\u5272\u5408\u304c\u591a\u3044\u306a\u3069\u3042\u308a\u305d\u3046\u3002","54e3235b":"### \u9069\u5f53\u306a\u4e00\u679a\u3092\u8aad\u307f\u8fbc\u3080","bb20883e":"### multiple diseases","e4f0741c":"\u753b\u50cf\u3068\u4f55\u306e\u75c5\u6c17\u306b\u5206\u985e\u3055\u308c\u305f\u304b\u304c\u53ef\u8996\u5316\u3067\u304d\u305f\u3002\u826f\u3044\u7cbe\u5ea6\u3067\u5b66\u7fd2\u3067\u304d\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3002","d1e2756e":"- \u30a8\u30c3\u30b8\u691c\u51fa\u306b\u3088\u3063\u3066\u8449\u306e\u8f2a\u90ed\u3092\u5149\u306e\u52fe\u914d\u304c\u6025\u306b\u5909\u5316\u3059\u308b\u7b87\u6240\u3092\u898b\u5206\u3051\u3001\u753b\u50cf\u306e\u4e2d\u306e\u3069\u306e\u90e8\u5206\u304c\u8449\u306a\u306e\u304b\u3092\u691c\u51fa\u3002\n- \u8d64\u67a0\u306e\u4e2d\u3092\u4e3b\u306b\u5206\u6790\u3057\u3001\u753b\u50cf\u306e\u75c5\u72b6\u3092\u5206\u985e\u3059\u308b","a5d53b3e":"\u753b\u50cf\u8a8d\u8b58\u30e2\u30c7\u30eb\u306fkaggle\u3067\u306fdensenet\u3068efficientnet\u3092\u3088\u304f\u4f7f\u3063\u3066\u3044\u308b\u30ab\u30fc\u30cd\u30eb\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3053\u306e2\u3064\u3092\u4f7f\u3063\u3066\u307f\u308b","514591d4":"# \u5c0e\u5165","69afe435":"### \u9752\u306e\u5206\u5e03","8c806c0c":"## Convolution(\u7573\u307f\u8fbc\u307f)<a id=\"2.3\"><\/a>","9349a3d6":"## \u30c7\u30fc\u30bf\u306e\u4e0b\u6e96\u5099 <a id=\"1.1\"><\/a>","08a938d1":"### DenseNet \u57fa\u672c\u30d6\u30ed\u30c3\u30af","e10be9f4":"# \u53c2\u8003\u6587\u732e\n\n1. [OpenCV\u306eCanny\u95a2\u6570\u306b\u3088\u308b\u30a8\u30c3\u30b8\u691c\u51fa\u306b\u3064\u3044\u3066](http:\/\/labs.eecs.tottori-u.ac.jp\/sd\/Member\/oyamada\/OpenCV\/html\/py_tutorials\/py_imgproc\/py_canny\/py_canny.html)\n2. [Flip\u306b\u3064\u3044\u3066](https:\/\/qiita.com\/yu4u\/items\/855ff350e6d93c82afd5)","faf0a8dc":"## \u305d\u306e\u4ed6EDA <a id=\"1.5\"><\/a>","04872324":"\u8449\u306e\u753b\u50cf\u306a\u306e\u3067\u5f53\u305f\u308a\u524d\u3060\u304c\u8d64\u3088\u308a\u3082\u5206\u5e03\u304c\u591a\u3044\u3002","b4358874":"### \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f"}}