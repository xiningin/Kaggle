{"cell_type":{"5930e13b":"code","6183c2f7":"code","71286c00":"code","80d1efa2":"code","a6166b2e":"code","0d361fca":"code","a6b0e286":"code","7fd564a1":"code","b7781f51":"code","3446dd1d":"code","94904353":"code","1b194b52":"code","0a914500":"code","a9820918":"code","0af0002c":"code","bf1f253a":"code","f9e27c86":"code","ec820216":"code","2a846294":"code","72a3999c":"code","5627466e":"code","a3fb1bd2":"code","54f80ac0":"code","32279f15":"code","6005a3dd":"code","6b24ff0a":"code","6b5e66c7":"code","b8d2983f":"code","21383799":"code","7cf04038":"code","1d4e214d":"code","feae86ce":"code","624372d6":"code","f2073ee9":"code","15961b1e":"code","57c25a69":"code","dffe1111":"code","425a5ae3":"code","e620025e":"code","a50b8b34":"code","b8670b28":"code","1b6f33f3":"code","854eae41":"code","b6bddd6a":"code","cb555b30":"code","a1f830b0":"code","121756d0":"code","fece6f28":"code","e5f8095d":"code","852e1d3e":"markdown","a025030a":"markdown","f66eece4":"markdown","95d9b9f0":"markdown","81793026":"markdown","d610e0e7":"markdown"},"source":{"5930e13b":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\n%matplotlib inline\nimport math\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \n        ","6183c2f7":"# Load our warnings libraries\nimport warnings\nwarnings.filterwarnings('ignore')","71286c00":"# Read train data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n\n# Read test data\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n","80d1efa2":"train.head()","a6166b2e":"print(\"no. of passengers:\" +str(len(train.index)))\n#prints the total n0. of passengers","0d361fca":"sns.countplot(x =\"Survived\", data = train)\n#no. of survivived passengers","a6b0e286":"sns.countplot(x =\"Survived\",hue =\"Sex\", data = train)\n#no. of male survived vs female survived","7fd564a1":"sns.countplot(x =\"Survived\",hue = \"Pclass\", data = train)\n#survival passenger class (Pclass) wise","b7781f51":"train[\"Age\"].plot.hist()","3446dd1d":"train[\"Fare\"].plot.hist()","94904353":"train.info()\n#gives the info of the data","1b194b52":"sns.countplot(x =\"SibSp\", data = train)","0a914500":"train.isnull()\n#checking null values","a9820918":"train.isnull().sum()\n#sum of null values in each column","0af0002c":"sns.boxplot(x=\"Pclass\", y =\"Age\",data = train)\n#pclass vs age box plot","bf1f253a":"train.head()","f9e27c86":"train.drop(\"Cabin\", axis =1, inplace=True)","ec820216":"train.head()","2a846294":"train.dropna(inplace=True)\n#droping all nan values","72a3999c":"train.isnull().sum()\n#checking if there is any nan values","5627466e":"sex =pd.get_dummies(train['Sex'], drop_first = True)\nsex.head()\n#there should not be any string values in data so get dummy values using get_dummies","a3fb1bd2":"embarked =pd.get_dummies(train['Embarked'], drop_first = True)\nembarked.head()","54f80ac0":"pcl =pd.get_dummies(train['Pclass'], drop_first = True)\npcl.head()","32279f15":"train = pd.concat([train,sex,embarked,pcl],axis = 1)\n#concat all three","6005a3dd":"train.head()","6b24ff0a":"train.drop(['Sex', 'Embarked', 'Name', 'Ticket','Pclass'], axis=1,inplace=True)","6b5e66c7":"train.head()","b8d2983f":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_test, y_train, y_test = train_test_split(train.drop(['Survived','PassengerId'], axis=1), \n                                                    train['Survived'], test_size = 0.2, \n                                                    random_state = 0)","21383799":"from sklearn.linear_model import LogisticRegression","7cf04038":"logmodel = LogisticRegression()","1d4e214d":"logmodel.fit(X_train,y_train)","feae86ce":"predictions = logmodel.predict(X_test)","624372d6":"from sklearn.metrics import classification_report","f2073ee9":"classification_report(y_test,predictions)","15961b1e":"from sklearn.metrics import confusion_matrix","57c25a69":"confusion_matrix(y_test,predictions)","dffe1111":"from sklearn.metrics import accuracy_score","425a5ae3":"accuracy_score(y_test,predictions)","e620025e":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\npred = gbk.predict(X_test)\nacc_gbk = round(accuracy_score(pred, y_test) * 100, 2)\nprint(acc_gbk)\n","a50b8b34":"test.head()","b8670b28":"test.drop(\"Cabin\", axis =1, inplace=True)\n#drop cabin because of nan values","1b6f33f3":"sex1 =pd.get_dummies(test['Sex'], drop_first = True)\nsex1.head()\n\n# do the same what we have done to train data set, get dummy values .","854eae41":"embarked1 =pd.get_dummies(test['Embarked'], drop_first = True)\nembarked1.head()","b6bddd6a":"pcl1 =pd.get_dummies(test['Pclass'], drop_first = True)\npcl1.head()","cb555b30":"test = pd.concat([test,sex1,embarked1,pcl1],axis = 1)","a1f830b0":"test.drop(['Sex', 'Embarked', 'Name', 'Ticket','Pclass'], axis=1,inplace=True)","121756d0":"test.head()","fece6f28":"test.fillna(test.mean(), inplace=True)\n#fill nan values with mean values.to avoid errors","e5f8095d":"# submit your predictions in csv format\nids = test['PassengerId']\npredictions = gbk.predict(test.drop('PassengerId', axis=1))\n\n\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","852e1d3e":"Import the all Necessary Libraries","a025030a":"# Yeah we are done. hope my notebook is useful to you. Thanks for Reading, Upvote if you like it. ","f66eece4":"Now Lets Explore the train data .\n\n# Data Analysis and Visualization","95d9b9f0":"# 2. Gradient Boost Classifier\n","81793026":"#  we got an accuracy of 81.8% and 83.22% which is not bad actually.\n# now, lets look into test data set\n\n\n","d610e0e7":"# Now lets Train our model and apply algorithms\n\n# 1. Logistic Regression\n\n"}}