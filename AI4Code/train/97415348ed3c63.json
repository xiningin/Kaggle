{"cell_type":{"e4c88301":"code","509831c9":"code","77381f1a":"code","43cceb7d":"code","60fea81d":"code","1d295bff":"code","e8ab769e":"code","4699bf9c":"code","4b3399f8":"code","38de6658":"code","93745f6c":"code","e3f574ed":"code","03361167":"code","01319bfa":"code","7beee647":"code","1082c276":"code","a298a27b":"markdown","666fb557":"markdown","5c50681e":"markdown","4c344625":"markdown","015ed41a":"markdown","9ce145a1":"markdown"},"source":{"e4c88301":"import sys\n!cp ..\/input\/rapids\/rapids.0.14.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","509831c9":"import time\n\nimport pandas as pd\n\nfrom sklearn.preprocessing import OneHotEncoder\nimport sklearn.neighbors\nimport sklearn.svm\nimport sklearn.ensemble\nfrom sklearn.model_selection import KFold\n\nimport cudf\nimport cuml\n\nimport matplotlib.pyplot as plt\nimport numpy as np","77381f1a":"NFOLDS = 5\nITERATION = 300","43cceb7d":"train_orig_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_orig_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")","60fea81d":"train_df = train_orig_df.copy()\ntrain_df.drop([\"Cabin\", \"Ticket\", \"Name\"], axis=1, inplace=True)\ntrain_df = pd.get_dummies(train_df.iloc[:, 1:], columns=[\"Pclass\", \"Sex\", \"Embarked\"])\ntrain_df.dropna(inplace=True)\n\nX_all = train_df.drop([\"Survived\"], axis=1).astype(\"float32\")\ny_all = train_df[\"Survived\"].astype(\"int32\")\n\nX_all_gpu = cudf.from_pandas(X_all)\ny_all_gpu = cudf.from_pandas(y_all)","1d295bff":"def bench(X, y, classifiers, params):\n    elapsed = {}\n    for name, clf_class in classifiers.items():\n        elapsed_list = []\n\n        for _ in range(ITERATION):\n            kf = KFold(n_splits=NFOLDS)\n            clf = clf_class()\n            clf.set_params(**params[name])\n\n            elapsed_sum = 0\n            for i, (train_idx, val_idx) in enumerate(kf.split(X, y)):\n                X_train = X_all.iloc[train_idx]\n                y_train = y_all.iloc[train_idx]\n                X_val = X_all.iloc[val_idx]\n                y_val = y_all.iloc[val_idx]\n\n                start = time.time()\n                clf.fit(X_train, y_train)\n                elapsed_sum += time.time() - start\n\n            elapsed_list.append(elapsed_sum)\n\n        elapsed[name] = pd.Series(elapsed_list).mean()\n    return elapsed","e8ab769e":"classifiers = {\n    \"KNN\": sklearn.neighbors.KNeighborsClassifier,\n    \"SVM\": sklearn.svm.SVC,\n    \"RandomForest\": sklearn.ensemble.RandomForestClassifier\n}\n\nparams = {\n    \"KNN\": {},\n    \"SVM\": {\n        \"random_state\": 47\n    },\n    \"RandomForest\": {\n        \"n_estimators\": 100,\n        \"random_state\": 47\n    }\n}\n\nelapsed_sklearn = bench(X_all, y_all, classifiers, params)","4699bf9c":"classifiers = {\n    \"KNN\": cuml.neighbors.KNeighborsClassifier,\n    \"SVM\": cuml.svm.SVC,\n    \"RandomForest\": cuml.ensemble.RandomForestClassifier\n}\n\nparams = {\n    \"KNN\": {},\n    \"SVM\": {},\n    \"RandomForest\": {\n        \"n_estimators\": 100\n    }\n}\n\nelapsed_cuml = bench(X_all_gpu, y_all_gpu, classifiers, params)","4b3399f8":"left = np.arange(len(elapsed_sklearn.keys()))\nwidth = 0.3\n\nfig = plt.figure(figsize=(6, 6))\nfig.patch.set_alpha(1)\n\nplt.subplot(1, 1, 1)\n\nplt.bar(left, elapsed_sklearn.values(), color='b', width=width, label=\"scikit-learn\", align=\"center\")\nplt.bar(left + width, elapsed_cuml.values(), color=\"g\", width=width, label=\"cuML\", align=\"center\")\n\nplt.xticks(left + width \/ 2, elapsed_sklearn.keys())\nplt.legend(loc=2)\nplt.ylabel(\"sec \/ iter\")\nplt.title(\"fit() performance\")\nplt.show()","38de6658":"train_df = pd.read_csv(\"..\/input\/home-credit-default-risk\/application_train.csv\")\ntest_df = pd.read_csv(\"..\/input\/home-credit-default-risk\/application_test.csv\")","93745f6c":"ITERATION = 10","e3f574ed":"data_df = train_df.copy()\ndata_df.dropna(axis=1, inplace=True)\n\nfeatures_to_encode = [\n    \"NAME_CONTRACT_TYPE\", \"CODE_GENDER\", \"FLAG_OWN_CAR\", \"FLAG_OWN_REALTY\",\n    \"NAME_INCOME_TYPE\", \"NAME_EDUCATION_TYPE\", \"NAME_FAMILY_STATUS\", \"NAME_HOUSING_TYPE\",\n    \"WEEKDAY_APPR_PROCESS_START\", \"ORGANIZATION_TYPE\"\n]\n\nencoder = OneHotEncoder(sparse=False)\nencoded = encoder.fit_transform(data_df[features_to_encode])\nlabels = encoder.get_feature_names(features_to_encode)\nencoded_df = pd.DataFrame(encoded, columns=labels)\n\ndata_df = pd.concat([data_df, encoded_df], axis=1)\ndata_df = data_df.drop(features_to_encode, axis=1)\ndata_df = data_df.drop([\"SK_ID_CURR\"], axis=1)\n\nX_train = data_df.drop([\"TARGET\"], axis=1)\ny_train = data_df[\"TARGET\"]","03361167":"def bench(X, y, classifiers, params):\n    elapsed = {}\n    for name, clf_class in classifiers.items():\n        elapsed_list = []\n        for i in range(ITERATION):\n            print(\"{}: Trial {}\".format(name, i))\n            clf = clf_class()\n            if not params:\n                clf.set_params(**params)\n            \n            start = time.time()\n            clf.fit(X, y)\n            elapsed_list.append(time.time() - start)\n        elapsed[name] = pd.Series(elapsed_list).mean()\n    return elapsed","01319bfa":"classifiers = {\n    \"KNN\": sklearn.neighbors.KNeighborsClassifier,\n    \"RandomForest\": sklearn.ensemble.RandomForestClassifier\n}\n\nparams = {\n    \"KNN\": {\n        \"n_jobs\": -1,\n    },\n    \"RandomForest\": {\n        \"n_estimators\": 100,\n        \"random_state\": 47,\n        \"n_jobs\": -1,\n    }\n}\n\nelapsed_sklearn = bench(X_train, y_train, classifiers, params)","7beee647":"classifiers = {\n    \"KNN\": cuml.neighbors.KNeighborsClassifier,\n    \"RandomForest\": cuml.ensemble.RandomForestClassifier\n}\n\nparams = {\n    \"KNN\": {},\n    \"RandomForest\": {\n        \"n_estimators\": 100\n    }\n}\n\nelapsed_cuml = bench(X_train, y_train, classifiers, params)","1082c276":"left = np.arange(len(elapsed_sklearn.keys()))\nwidth = 0.3\n\nfig = plt.figure(figsize=(6, 6))\nfig.patch.set_alpha(1)\n\nplt.subplot(1, 1, 1)\n\nplt.bar(left, elapsed_sklearn.values(), color='b', width=width, label=\"scikit-learn\", align=\"center\")\nplt.bar(left + width, elapsed_cuml.values(), color=\"g\", width=width, label=\"cuML\", align=\"center\")\n\nplt.xticks(left + width \/ 2, elapsed_sklearn.keys())\nplt.legend(loc=2)\nplt.ylabel(\"sec \/ iter\")\nplt.title(\"fit() performance\")\nplt.show()","a298a27b":"# cuML","666fb557":"# Pre-process","5c50681e":"# Load data","4c344625":"# scikit-learn","015ed41a":"# Results","9ce145a1":"# Benchmark code"}}