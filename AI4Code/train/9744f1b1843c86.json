{"cell_type":{"079dc9e3":"code","4317d650":"code","4751b5d2":"code","a72f1ad2":"code","23c75482":"code","6ce93d82":"markdown"},"source":{"079dc9e3":"from matplotlib import pyplot as plt\nimport pandas as pd\nimport requests","4317d650":"%pylab inline\npylab.rcParams['figure.figsize'] = (18, 5)","4751b5d2":"url = 'http:\/\/192.168.33.158:3002\/v1\/cost\/over-time'\nurl = 'http:\/\/qcpricingapi-duuheqjwr2lgq.lbb7lk8hq4v71.hms-dev.cloud\/v1\/cost\/over-time'\ntoken = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ3dTU5LVBpU1BqZkdGTVBGTWRjZnJncllxQ1VJVV95aXRZcG9EbWtFWUZVIn0.eyJqdGkiOiJlYjRmNGEyNC03MzVhLTRkYTAtYjM0Zi1mYjViZjFkNGUwZTciLCJleHAiOjE1Njc3Nzc2MDAsIm5iZiI6MCwiaWF0IjoxNTY3Nzc0MDAwLCJpc3MiOiJodHRwczovL2F1dGgubGJiN2xrOGhxNHY3MS5obXMtZGV2LmNsb3VkL2F1dGgvcmVhbG1zL3FjIiwiYXVkIjpbInFjLWNvc3QtaHViLWFwaSIsInFjLWV2ZW50LWh1Yi1hcGkiLCJxYy1jbHVzdGVyLWFwaSIsInFjLW1ldHJpYy1odWItYXBpIiwicWMtZWxhc3RpY3NlYXJjaCIsInFjLXJpb3QiLCJxYy1hdXRvbWF0aW9uLWFwaSIsInFjLW5vdGlmaWNhdGlvbi1odWItYXBpIiwicW1jLXRyYW5zY29kZSIsInFjLWNhdGFsb2ctYXBpIiwicWMtb3hhZ2lsZSIsInFtYy1tZXRhZGF0YSIsInFjLWRhc2hib2FyZC1hcGkiLCJxYy1zY2hlZHVsZXItYXBpIiwicWMtaWFtLWFwaSIsInFtYy1yZXNvdXJjZXNjYW4iLCJxYy1vcGVuZGlzdHJvLWtpYmFuYSIsInFjLXZ1bG5lcmFiaWxpdHktc2Nhbm5lciIsInFjLXBvcnRhbC1hcGkiLCJxYy1raWJhbmEiLCJxYy1kZXBsb3ltZW50LWFwaSIsInFjLWxvZy1odWItYXBpIiwicWNmaWxldHJhbnNmZXJzcWw3emFxMWtvMHhsIiwicWNmaWxldHJhbnNmZXJzNzc0emZlODFjcDNwIiwicWNkb2NzOTVvd3kzMnh6NnJsMSIsInFjbWV0YWRhdGFhcGltcG54Y2VqZXZqNWNpIiwiYWNjb3VudCJdLCJzdWIiOiI4NzFjYWM1Mi1kYjEyLTRmYmItYWFlZC1jZTZhZWNjYzhiM2YiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJxYy1wb3J0YWwtdWkiLCJub25jZSI6ImFmOGY5ODk0LTA5NDctNGJmZC04NDFlLTQwNzNmY2VjZjlmNCIsImF1dGhfdGltZSI6MTU2Nzc3Mzk5OSwic2Vzc2lvbl9zdGF0ZSI6IjFlZDIzZmI5LTlkYjAtNGJmMC1hZmE3LTFhNjZkZDZjN2JjMiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiY2FuVmlld092ZXJ2aWV3U2VjdGlvbiIsImNhblZpZXdBdXRvbWF0aW9uU2VjdGlvbiIsImxvZ2dpbmctYWRtaW4iLCJzY2hlZHVsZXItYWRtaW4iLCJyZWFkZXIiLCJhdXRvbWF0aW9uLWFkbWluIiwiaGVhbHRoLWFkbWluIiwiYWRtaW4iLCJjbHVzdGVyLWFkbWluIiwic3BhY2UtYWRtaW4iLCJjb3N0LWFkbWluIiwiY2FuVmlld0NvbXBvbmVudHNTZWN0aW9uIiwib2ZmbGluZV9hY2Nlc3MiLCJEZXZlbG9wbWVudCIsImNhblZpZXdFdmVudHNTZWN0aW9uIiwiY2F0YWxvZy1hZG1pbiIsInVtYV9hdXRob3JpemF0aW9uIiwiYmlsbGluZy1hZG1pbiIsImNhblZpZXdMb2dzU2VjdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7InFjZG9jczk1b3d5MzJ4ejZybDEiOnsicm9sZXMiOlsicmVhZGVyIl19LCJxY21ldGFkYXRhYXBpbXBueGNlamV2ajVjaSI6eyJyb2xlcyI6WyJyZWFkIiwid3JpdGUiLCJ1c2VyIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInVzZXJfaWQiOiI4NzFjYWM1Mi1kYjEyLTRmYmItYWFlZC1jZTZhZWNjYzhiM2YiLCJuYW1lIjoiQW5hdG9seSBHcmFib3Zza2l5IiwiZ3JvdXBzIjpbImNhblZpZXdPdmVydmlld1NlY3Rpb24iLCJjYW5WaWV3QXV0b21hdGlvblNlY3Rpb24iLCJsb2dnaW5nLWFkbWluIiwic2NoZWR1bGVyLWFkbWluIiwicmVhZGVyIiwiYXV0b21hdGlvbi1hZG1pbiIsImhlYWx0aC1hZG1pbiIsImFkbWluIiwiY2x1c3Rlci1hZG1pbiIsInNwYWNlLWFkbWluIiwiY29zdC1hZG1pbiIsImNhblZpZXdDb21wb25lbnRzU2VjdGlvbiIsIm9mZmxpbmVfYWNjZXNzIiwiRGV2ZWxvcG1lbnQiLCJjYW5WaWV3RXZlbnRzU2VjdGlvbiIsImNhdGFsb2ctYWRtaW4iLCJ1bWFfYXV0aG9yaXphdGlvbiIsImJpbGxpbmctYWRtaW4iLCJjYW5WaWV3TG9nc1NlY3Rpb24iXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWdyYWJvdnNraXkiLCJnaXZlbl9uYW1lIjoiQW5hdG9seSIsInVzZXJpZCI6Ijg3MWNhYzUyLWRiMTItNGZiYi1hYWVkLWNlNmFlY2NjOGIzZiIsImZhbWlseV9uYW1lIjoiR3JhYm92c2tpeSIsImVtYWlsIjoiYW5hdG9seS5ncmFib3Zza2l5QG94YWdpbGUuY29tIn0.QIjQqftfRKEODLusv7I_M9QdXctoKac3tcvCIud8FXxpZNxrG5PQYR_fQ6iggQYqII7edaJadAi54XOW3Ocmmgc4SbVDLMWgRHk458ibVp2olSb086yA_nlgbIxIsvNJDuF_rSXu8uxS6ddXL6yf_Ea2L6qPrCYd7nIgKchkUKnkCVMXHDoJXrGbiIg43YGdmV8SAyzdQr3-Vy3Bd1LB8dKLMAzIG1plT2W2pDsSF9ZWys337MmLHC1TwQB1zuHsjBhT-Az909tt93CsLZJnmR_LvlITp6W6afTvIgp91S1xa_z5SFLDCc8YMuXFGR8Xz_n3fSR3zIIz-_FRvR3GLQ'\nheaders = { 'authorization': token }\nparams = {\n    'startDate': '2019-09-04',\n    'endDate': '2019-09-05',\n    'interval': 'PT1H',\n    'tenantId': 'autogenerated',\n}\nresponse = requests.get(url, headers=headers, params=params)\nprint(response)\nresponse_json = response.json()","a72f1ad2":"costs = pd.DataFrame(response_json['costs'])\ncosts.index = pd.to_datetime(costs['periodEnd'])\ncosts\ncosts['totalCost'].plot.bar()\ncosts['totalCost'].sum()","23c75482":"# url = 'http:\/\/192.168.33.158:3002\/v1\/cost\/over-time'\nurl = 'http:\/\/qcpricingapi-duuheqjwr2lgq.lbb7lk8hq4v71.hms-dev.cloud\/v1\/cost\/over-time'\n\nheaders = { 'authorization': token }\nparams = {\n    'startDate': '2019-09-06T12:00',\n    'endDate': '2019-09-06T14:00',\n    'interval': 'PT5M',\n    'tenantId': 'autogenerated',\n}\nresponse = requests.get(url, headers=headers, params=params)\nprint(response)\nresponse_json = response.json()\n\ncosts = pd.DataFrame(response_json['costs'])\ncosts.index = pd.to_datetime(costs['periodStart'])\ncosts['discount'] = costs['totalCostWithoutDiscounts'] - costs['totalCost']\ndisplay(costs)\ncosts[['totalCost', 'discount']].plot(kind='bar', stacked=True)","6ce93d82":"# Realtime\n"}}