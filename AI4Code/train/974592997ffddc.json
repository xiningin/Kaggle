{"cell_type":{"e57ca3f2":"code","f63ae8d1":"code","c44fcab9":"code","2e6aef18":"code","6ff336d5":"code","b3429f1f":"code","02335c5f":"code","1c4c276e":"code","0c98dacd":"code","d372c006":"code","bdd0f301":"code","b89a1923":"code","fa1fe3ba":"code","6ae36838":"code","015ab4d9":"code","e3517af2":"code","155e8b08":"code","0df2307e":"code","3c0bbaaa":"code","afe63db1":"code","1562298f":"code","31941e17":"code","7ef3519b":"code","dc446d2b":"code","41011a1a":"code","fe371fcc":"code","9033a012":"code","a29c49b9":"code","a31ce903":"code","d494b2f8":"code","292056d8":"code","77e945b3":"code","97154300":"code","75c8f675":"code","4a58a6d1":"markdown"},"source":{"e57ca3f2":"# del model\n# del X_train,Y_train","f63ae8d1":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow import one_hot\nfrom tensorflow.keras.applications import xception\nfrom tensorflow.keras.preprocessing import image\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nfrom IPython.display import clear_output\nimport gc","c44fcab9":"CATEGORIES = os.listdir(\"\/kaggle\/input\/plant-seedlings-classification\/train\")\nCATEGORIES","2e6aef18":"\n# initial_learning_rate = 0.003 #initial rate\n# # Rate decay with exponential decay\n# # new rate = initial_learning_rate * decay_rate ^ (step \/ decay_steps)\n# #step per epoch = 95\n# lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n#     initial_learning_rate,\n#     decay_steps=480,\n#     decay_rate=0.5,\n#     staircase=False)","6ff336d5":"pretrained = xception.Xception(input_shape=[240,240, 3], include_top=False)","b3429f1f":"pretrained.trainable = False","02335c5f":"model = tf.keras.Sequential([\n    pretrained,\n    tf.keras.layers.GlobalAveragePooling2D(),\n    tf.keras.layers.Dense(100, activation=\"relu\"),\n    tf.keras.layers.BatchNormalization(trainable = True,axis=1),\n    \n    tf.keras.layers.Dropout(0.5),\n    \n    tf.keras.layers.Dense(50, activation=\"relu\"),\n    tf.keras.layers.BatchNormalization(trainable = True,axis=1),\n    \n    tf.keras.layers.Dense(12,activation='softmax')\n])","1c4c276e":"model.summary()","0c98dacd":"model.compile(optimizer=tf.keras.optimizers.Nadam(learning_rate=0.001),\n              loss=tf.keras.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])","d372c006":"train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rotation_range=20,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    brightness_range=[0.4,1],\n    rescale=1.0\/255.0)\n\ntest_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.0\/255.0)\npathh = \"\/kaggle\/input\/plant-seedlings-classification\/train\/\"","bdd0f301":"result = model.fit(train_datagen.flow_from_directory(pathh,\n                                        target_size=(240, 240), \n                                        color_mode='rgb', \n                                        class_mode='categorical', \n                                        batch_size=64, \n                                        shuffle=True),\n                    epochs=20,\n                    verbose=1)","b89a1923":"result.history.keys()","fa1fe3ba":"plt.plot(result.history['accuracy'], label='train')\n# plt.plot(result.history['val_accuracy'], label='valid')\nplt.legend(loc='upper left')\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.show()\nplt.plot(result.history['loss'], label='train')\n# plt.plot(result.history['val_loss'], label='test')\nplt.legend(loc='upper right')\nplt.title('Model Cost')\nplt.ylabel('Cost')\nplt.xlabel('Epoch')\nplt.show()","6ae36838":"pretrained.trainable = True\nmodel.get_layer('xception').trainable","015ab4d9":"model.summary()","e3517af2":"model.compile(optimizer=tf.keras.optimizers.Nadam(learning_rate=0.0006),\n              loss=tf.keras.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])","155e8b08":"result = model.fit(train_datagen.flow_from_directory(pathh,\n                                        target_size=(240, 240), \n                                        color_mode='rgb', \n                                        class_mode='categorical', \n                                        batch_size=64, \n                                        shuffle=True),\n                    epochs=40,\n                    initial_epoch=20,\n                    verbose=1)","0df2307e":"plt.plot(result.history['accuracy'], label='train')\n# plt.plot(result.history['val_accuracy'], label='valid')\nplt.legend(loc='upper left')\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.show()\nplt.plot(result.history['loss'], label='train')\n# plt.plot(result.history['val_loss'], label='test')\nplt.legend(loc='upper right')\nplt.title('Model Cost')\nplt.ylabel('Cost')\nplt.xlabel('Epoch')\nplt.show()","3c0bbaaa":"gc.collect()","afe63db1":"model.compile(optimizer=tf.keras.optimizers.Nadam(learning_rate=0.000006),\n              loss=tf.keras.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])","1562298f":"result = model.fit(train_datagen.flow_from_directory(pathh,\n                                        target_size=(240, 240), \n                                        color_mode='rgb', \n                                        class_mode='categorical', \n                                        batch_size=64, \n                                        shuffle=True),\n                    epochs=60,\n                    initial_epoch=40,\n                    verbose=1)","31941e17":"plt.plot(result.history['accuracy'], label='train')\nplt.legend(loc='upper left')\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.show()\nplt.plot(result.history['loss'], label='train')\n# plt.plot(result.history['val_loss'], label='test')\nplt.legend(loc='upper right')\nplt.title('Model Cost')\nplt.ylabel('Cost')\nplt.xlabel('Epoch')\nplt.show()","7ef3519b":"gc.collect()","dc446d2b":"valid = model.evaluate(test_datagen.flow_from_directory(pathh,\n                                                        target_size=(240, 240), \n                                                        color_mode='rgb',\n                                                        class_mode='categorical',))","41011a1a":"a = test_datagen.flow_from_directory(pathh,\n                                    target_size=(240, 240), \n                                    color_mode='rgb',\n                                    class_mode='categorical',\n                                    batch_size=1)","fe371fcc":"CATEGORIES = list(a.class_indices.keys())","9033a012":"CATEGORIES","a29c49b9":"R_categories = {y:x for x,y in a.class_indices.items()}\nR_categories","a31ce903":"del valid\ngc.collect()","d494b2f8":"X=[]\nfile = []\n(IMG_S1, IMG_S2) = (240,240)\ndef createTestData():\n    a=0\n    pathh = \"\/kaggle\/input\/plant-seedlings-classification\/\"\n    types = [\"test\"]\n    for typ in types:\n        PATH = os.path.join(pathh,typ)\n        for img in os.listdir(PATH):\n            file.append(img)\n            image = os.path.join(PATH, img)\n            image = cv2.imread(image, cv2.IMREAD_ANYCOLOR)\n            image = cv2.resize(image , (IMG_S1, IMG_S2))\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n            X.append(image)\n            a+=1\n    print(a)\n\ncreateTestData()\nX = np.array(X)\/255.0 #normalize the data ","292056d8":"species = model.predict_classes(X)","77e945b3":"ans = pd.DataFrame(file,columns = [\"file\"])\n\nans = ans.join(pd.DataFrame(species,columns=[\"species\"]))\nans[\"species\"] = ans[\"species\"].apply(lambda x: CATEGORIES[int(x)])\nans.head(20)","97154300":"ans.to_csv(\"answers.csv\",index=False)","75c8f675":"model.save(\"saved_model\")","4a58a6d1":"140\n0.0006\n160\n0.0001\n180\n0.00001"}}