{"cell_type":{"878170c9":"code","cec32c06":"code","f1777db7":"code","08a3272f":"code","c81da630":"code","7a2fd237":"code","bac54bf3":"code","70ee5d85":"code","fa9ed003":"code","116d2a93":"code","22539342":"code","adcd4ce3":"markdown","81c106cc":"markdown","2a797e49":"markdown","2d6df543":"markdown","489728ad":"markdown","64efb6c7":"markdown","729ec109":"markdown","b76a05eb":"markdown"},"source":{"878170c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cec32c06":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt","f1777db7":"data = pd.read_csv('..\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv')\ndata.head()","08a3272f":"#DELETE FROM Games\n#WHERE [Average User Rating] = ''\n\n#DELETE FROM Games\n#WHERE [User Rating Count] = ''\ndata = pd.read_csv('..\/input\/appstore17k\/appstore_games2.csv')\ndata.head()","c81da630":"#SELECT DATEDIFF(day, [Original Release Date], '2019-08-04') [Number_Of_Days], [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') [Ratings_Per_Day]\n#,*\n#FROM Games\n\n# Number of days = Number of days between Original Release Date and Data Extraction Date\n# Ratings Per Day = Total Number of Ratings \/ Number of days  \n\ndata_3 = pd.read_csv('..\/input\/appstore17k\/appstore_games3.csv')\ndata_3.head()","7a2fd237":"\n#SELECT DATEDIFF(day, [Original Release Date], '2019-08-04') [Number_Of_Days], [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') [Ratings_Per_Day]\n#,*\n#FROM Games\n#WHERE [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') >0\n#ORDER BY [User Rating Count] DESC\ndata_4 = pd.read_csv('..\/input\/appstore17k\/appstore_games4.csv')\ndata_4.shape","bac54bf3":"plt.figure(figsize=(20,16))\nnyc_img=plt.imread('..\/input\/appstore17k\/Boston-Matrix2.jpg')\n#scaling the image based on the latitude and longitude max and mins for proper output specially when drawing scattter plot\nplt.imshow(nyc_img,zorder=0,extent=[1, 20000, 1,12000], alpha=0.5)\np = plt.axis('off')\ntitle = plt.title('BCG Matrix', fontsize=20)\ntitle.set_position([0.5, 1.05])","70ee5d85":"#SELECT DATEDIFF(day, [Original Release Date], '2019-08-04') [Number_Of_Days], [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') [Ratings_Per_Day],[User Rating Count],\n#CASE WHEN [User Rating Count] >= 10000 THEN 10000\/3032734.00*[User Rating Count]+10000 ELSE [User Rating Count] END Adj_Rate_Count,\n#CASE WHEN [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') >= 40 THEN 6000\/1414.00*[User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04')+6000 ELSE 6000\/39.99*[User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') END Adj_Rating_Per_Day\n#FROM Games\n#WHERE [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') >0\n#ORDER BY [User Rating Count] DESC\ndata_5 = pd.read_csv('..\/input\/appstore17k\/appstore_games5.csv')\ndata_5.head()","fa9ed003":"plt.figure(figsize=(20,16))\nnyc_img=plt.imread('..\/input\/appstore17k\/Boston-Matrix2.jpg')\n#scaling the image based on the latitude and longitude max and mins for proper output specially when drawing scattter plot\nplt.imshow(nyc_img,zorder=0,extent=[1, 20000, 1,12000], alpha=0.1)\ntitle = plt.title('BCG Matrix', fontsize=20)\ntitle.set_position([0.5, 1.05])\nax=plt.gca()\nsns.scatterplot(data_5.Adj_Rate_Count, data_5.Adj_Rating_Per_Day, ax=ax)\nc = ax.set_xticklabels(['1', '', '', '', '', '10000', '', '', '', '3032734'], rotation=0, horizontalalignment='center')\nc = ax.set_yticklabels(['', '', '', '40', '', '', '1414'], rotation=0, horizontalalignment='right')\nax.set_xlabel('Ratings Per Day')\nax.set_ylabel('Number of Ratings')","116d2a93":"#SELECT [Average User Rating], DATEDIFF(day, [Original Release Date], '2019-08-04') [Number_Of_Days], [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') [Ratings_Per_Day],[User Rating Count],\n#CASE WHEN [User Rating Count] >= 10000 THEN 10000\/300000.00*[User Rating Count]+10000 ELSE [User Rating Count] END Adj_Rate_Count,\n#CASE WHEN [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') >= 40 THEN 6000\/259.00*[User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04')+6000 ELSE 6000\/39.99*[User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') END Adj_Rating_Per_Day\n#FROM Games\n#WHERE [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') >0\n#AND [User Rating Count] < 300000 AND [User Rating Count]\/DATEDIFF(day, [Original Release Date], '2019-08-04') < 300\n#ORDER BY [Ratings_Per_Day] DESC\ndata_6 = pd.read_csv('..\/input\/appstore17k\/appstore_games6.csv')\ndata_6.head()","22539342":"plt.figure(figsize=(20,16))\nnyc_img=plt.imread('..\/input\/appstore17k\/Boston-Matrix2.jpg')\n#scaling the image based on the latitude and longitude max and mins for proper output specially when drawing scattter plot\nplt.imshow(nyc_img,zorder=0,extent=[1, 20000, 1,12000], alpha=0.1)\ntitle = plt.title('BCG Matrix Zoomed In', fontsize=20)\ntitle.set_position([0.5, 1.05])\nax=plt.gca()\nsns.scatterplot(data_6.Adj_Rate_Count, data_6.Adj_Rating_Per_Day, ax=ax, hue=data_6[\"Average User Rating\"],palette=\"Set3\", legend=\"full\", size=data_6[\"Average User Rating\"])\nc = ax.set_xticklabels(['1', '', '', '', '', '10000', '', '', '', '300000'], rotation=0, horizontalalignment='center')\nc = ax.set_yticklabels(['', '', '', '40', '', '', '259'], rotation=0, horizontalalignment='right')\nax.set_xlabel('Ratings Per Day')\nax.set_ylabel('Number of Ratings')","adcd4ce3":"# 4. BCG Matrix\n\nDividing all the rows into four categories\n\n##### High Growth and High Market Share:\n         Those apps that gets reviewed more than or equal to 40 times a day (on average)and have more than 10000 reviews, no matter what their rating is.\n##### High Growth and Low Market Share:\n         Apps that gets reviewed more than or equal to 40 times a day (on average) but are reviewed less than 10000 times.\n##### Low Growth and High Market Share:\n         Apps that have been reviewd more than 10000 times but does not gets reviewd frequently.\n##### Low Growth and Low Market Share:\n         Apps that have both reviews and reviews per day are on low side.","81c106cc":"### 3.1 Adding two more columns ","2a797e49":"### 3.2 Removing Ratings Per Day = 0","2d6df543":"# 2. Data Load and Libraries Import","489728ad":"# 3. Data Cleaning","64efb6c7":"### 4.1 Adjusting Reviews Per Day and Total Reviews Count\n\nSince the data is segregated in non-semtric way while we want to show it symetrically that is why we have to intriduce a couple of new columns\n\n1) Adjusted Rating Count    \n2) Adjusted Rating Per Day\n\n\n__*Formula to calculate*__\n\n__Adj_Rate_Count__ = If *User Rating Count* is greater than or equal to 10000 then 10000\/3032734*[User Rating Count]+10000 Else *User Rating Count*\nwhere:\n    10000: is the offset and maximmum a *User Rating Count* can be\n    3032734: is the largest User Rating Count in data\n    \n__Adj_Rating_Per_Day__: If Rating Per day is greater than or equal to 40 then 6000\/1414*[Rating Per Day]+6000\n                    Else 6000\/1414*[Rating Per Day]\nwhere:\n    6000: is the offset and maximmum a *Rating Per Day* can be\n    1414: is the largest *Rating Per Day*\n    We have to adjust both segments that is greater than ","729ec109":"### 4.2 Zooming in\n\nSince data is very much scattered and we have a few records which is not letting us view proper scatter in the data, so removing a few records from data ","b76a05eb":"# 1. Foreword\n\nThis Notebook is created for learning purpose for beginners specially for those who have very little knowledge of Python but have nice experience with other programming languages for example c#, java, c++, SQL. I will be using lot od SQL in there for data wrangling instead of Pandas or any other library.\n\nIn addition to that I have created a small utility to load data from\/to CSV\/SQL while I will upload once it gets stabalized."}}