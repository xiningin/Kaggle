{"cell_type":{"a11404f0":"code","66083839":"code","d4b7aade":"code","72ba312e":"code","dc551a29":"code","43136aa7":"code","d44af76c":"code","dd630da5":"code","5ebc4537":"code","95feb348":"code","4db06278":"code","c0f1941d":"code","8e3f3642":"code","6e0d648b":"code","0feabe68":"code","72c9beeb":"code","384c0dd3":"code","9040f231":"code","25da1221":"code","9457a84d":"code","8fe86c2b":"code","f816a992":"code","d2ce161a":"code","c2a7a6b7":"code","79764af4":"code","e601d805":"code","d9bec8a0":"code","d4c2a434":"code","f0368812":"code","06d7ef5a":"code","74c31a98":"code","ebfc70bb":"markdown","8e656a04":"markdown","36ab4fe5":"markdown","2145dc8c":"markdown","62f08dfc":"markdown","ba01e3a0":"markdown","1e2632c0":"markdown","48771446":"markdown","6e698db0":"markdown","0f3e2724":"markdown","fb4294f4":"markdown"},"source":{"a11404f0":"# Import dataset\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","66083839":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head()","d4b7aade":"plt.figure(figsize=(10,5))\nsns.scatterplot(data=train, x='LotArea', y='SalePrice');","72ba312e":"train['SaleCondition'].value_counts()","dc551a29":"labels = ['Normal', 'Partial', 'Abnormal', 'Family', 'Alloca', 'AdjLand']\n\ncolors = ['gold', 'silver', 'red', 'maroon', 'grey', 'green']\n\nfig, ax = plt.subplots(figsize=(10,5))\nax.pie(train['SaleCondition'].value_counts(), labels=labels, colors=colors,autopct='%1.1f%%', shadow=True,startangle=30)\nplt.axis('equal')\nplt.show()\n","43136aa7":"pd.set_option('display.max_columns', None)","d44af76c":"train.head()","dd630da5":"train.isna().sum()","5ebc4537":"train.dtypes","95feb348":"# Create a function , to fill missing values and turn object to numerical\n\ndef preprocess_data(df):\n    for label, content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isnull(content).sum():\n                df[label] = content.fillna(content.median())\n        \n        if not pd.api.types.is_numeric_dtype(content):\n            df[label] = pd.Categorical(content).codes+1\n        \n    return df","4db06278":"train = preprocess_data(df=train)\ntrain.head()","c0f1941d":"# check again\ntrain.isna().sum()","8e3f3642":"train.dtypes","6e0d648b":"X = train.drop('SalePrice', axis=1)\ny= train['SalePrice']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)\n","0feabe68":"from xgboost import XGBRegressor\n\nnp.random.seed(42)\nreg = XGBRegressor()\nreg.fit(X_train, y_train)\ny_preds = reg.predict(X_val)\ny_preds\n\nreg.score(X_val, y_val)","72c9beeb":"from sklearn.ensemble import RandomForestRegressor\n\nnp.random.seed(42)\nreg2 = RandomForestRegressor()\nreg2.fit(X_train, y_train)\ny_preds = reg2.predict(X_val)\ny_preds\n\nreg2.score(X_val, y_val)","384c0dd3":"from sklearn.ensemble import GradientBoostingRegressor\n\nnp.random.seed(42)\nreg3 = GradientBoostingRegressor()\nreg3.fit(X_train, y_train)\ny_preds = reg3.predict(X_val)\ny_preds\n\nreg3.score(X_val, y_val)","9040f231":"from catboost import CatBoostRegressor\n\nnp.random.seed(42)\nreg4 = CatBoostRegressor(verbose=0)\nreg4.fit(X_train, y_train)\ny_preds4 = reg4.predict(X_val)\ny_preds4\n\nprint(reg4.score(X_val, y_val))","25da1221":"from sklearn.metrics import mean_squared_error\n\nRMSE = mean_squared_error(y_val, y_preds4, squared=False)\nRMSE","9457a84d":"from sklearn.model_selection import RandomizedSearchCV\n\nparams = {'depth':[3,1,2,6,4,5,7,8,9,10],\n          'iterations':[250,100,500,1000],\n          'learning_rate':[0.03,0.001,0.01,0.1,0.2,0.3], \n          'l2_leaf_reg':[3,1,5,10,100],\n          'border_count':[32,5,10,20,50,100,200]}\n\nideal_model = RandomizedSearchCV(CatBoostRegressor(verbose=0),\n                                param_distributions=params,\n                                cv=3,\n                                n_iter=10,\n                                verbose=True)\n","8fe86c2b":"ideal_model.fit(X_train, y_train)","f816a992":"ideal_model.predict(X_val)","d2ce161a":"ideal_model.best_params_","c2a7a6b7":"model = CatBoostRegressor(learning_rate=0.2, l2_leaf_reg=5, iterations=1000, depth=6,border_count=32, verbose=0)\nmodel.fit(X_train, y_train)\nmodel.predict(X_val)","79764af4":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.head()","e601d805":"test = preprocess_data(df=test)\ntest.head()","d9bec8a0":"model = CatBoostRegressor(learning_rate=0.2, l2_leaf_reg=5, iterations=1000, depth=6,border_count=32, verbose=0)\nmodel.fit(X_train, y_train)\npredictions = model.predict(test)","d4c2a434":"predictions","f0368812":"sample = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsample","06d7ef5a":"Submission = pd.DataFrame()\nSubmission['Id'] = test['Id']\nSubmission['SalePrice'] = predictions\nSubmission","74c31a98":"Submission.to_csv('Sample_Submission', index=False)","ebfc70bb":"## Data Cleaning","8e656a04":"## RandomForestRegressor","36ab4fe5":"## GradientBoostingRegressor","2145dc8c":"## Modelling with best model","62f08dfc":"## Evaluation metrics","ba01e3a0":"## Data Cleaning","1e2632c0":"## CatBoostRegressor","48771446":"## XGBoost","6e698db0":"## Import Test Dataset","0f3e2724":"## Split the dataset","fb4294f4":"## Hyperparmeter tuning"}}