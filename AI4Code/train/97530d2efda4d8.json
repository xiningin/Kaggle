{"cell_type":{"5354e65f":"code","cafaf783":"code","a591761f":"code","f2c0d175":"code","7d0c4fb9":"code","d9b54e03":"code","1b732914":"code","67678c65":"code","a9035872":"code","319355a9":"code","d6305802":"code","07db1cc4":"code","0cbc29b0":"markdown","6d07bf94":"markdown","614c465a":"markdown","95528e5a":"markdown","8db67d27":"markdown","21d947fe":"markdown","6a7912af":"markdown","e726e610":"markdown","c21b1cee":"markdown"},"source":{"5354e65f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nsongs = []\ncwd = '\/kaggle\/input\/birdsongs-from-europe\/mp3\/'\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        songs.append(filename)\ndata = pd.read_csv('\/kaggle\/input\/birdsongs-from-europe\/metadata.csv')\nsongs.pop(0)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cafaf783":"print(data.head())\nprint(data.info(verbose=True))","a591761f":"! pip install pydub","f2c0d175":"from pydub import AudioSegment\nimport IPython\n\n# We will listen to this file:\n# 213_1p5_Pr_mc_AKGC417L.wav\nfile = '\/kaggle\/input\/birdsongs-from-europe\/mp3\/Aegolius-funereus-131493.mp3'\nprint(cwd+songs[0])\nIPython.display.Audio(cwd+songs[2])","7d0c4fb9":"# https:\/\/www.kaggle.com\/rakibilly\/extract-audio-starter\nimport subprocess\nimport glob\nimport os\nfrom pathlib import Path\nimport shutil\nfrom zipfile import ZipFile","d9b54e03":"! tar xvf ..\/input\/ffmpeg-static-build\/ffmpeg-git-amd64-static.tar.xz","1b732914":"# Convert MP3s to WAV for easy conversion to numpy arrays:\noutput_format = 'wav'  # can also use aac, wav, etc\noutput_dir = Path(f\"{output_format}s\")\nPath(output_dir).mkdir(exist_ok=True, parents=True)\n\n#Only do first 50 because notebook memory limitations...\nfor song in songs[:50]:\n    file = cwd+song\n    file_name = song.replace(\".mp3\",\"\")\n    command = f\"..\/working\/ffmpeg-git-20191209-amd64-static\/ffmpeg -i {file} -ab 192000 -ac 2 -ar 44100 -vn {output_dir\/file_name}.{output_format}\"\n    subprocess.call(command, shell=True)","67678c65":"from scipy.io.wavfile import read, write\n#a = read(\"adios.wav\")\nwavs = []\nnp_arrays = []\nfor dirname, _, filenames in os.walk('\/kaggle\/working\/wavs\/'):\n    for filename in filenames:\n        wav_file = dirname+filename\n        #print(wav_file)\n        wavs.append(wav_file)\n        try:\n            fs, io_file = read(wav_file)\n        except ValueError:\n            continue\n        data = np.array(io_file,dtype=float)\n        wav_info= {\n            'name': filename,\n            'fs' : fs,\n            'left': data[:,0],\n            'right': data[:,1]\n        }\n        \n        np_arrays.append(wav_info)\n\nprint(\"Succesfully converted: \"+str(len(np_arrays)))","a9035872":"from scipy import signal\nfrom scipy.fft import fftshift\nimport matplotlib.pyplot as plt\n\nsong_data = np_arrays[26]\nstart = 0\nend = 10\n\nif end != None:\n    wav = song_data['left'][fs*start:fs*end]\nelse:\n    wav = song_data['left'][fs*start:]\nfs = song_data['fs']\nplt.specgram(wav,Fs=fs)\nplt.ylim(top=15000)\nprint(song_data['name'].replace(\".wav\",\"\"))\nplt.show() \n\nIPython.display.Audio(wav, rate=fs)","319355a9":"! pip install pyyawt","d6305802":"# Load a noisy signal\n# Phylloscopus-collybita-171141\n\nsong_data = np_arrays[4]\nstart = 1\nend = 12\n\nif end != None:\n    wav = song_data['left'][fs*start:fs*end]\nelse:\n    wav = song_data['left'][fs*start:]\nfs = song_data['fs']\nplt.specgram(wav,Fs=fs)\nplt.ylim(top=15000)\nprint(song_data['name'].replace(\".wav\",\"\"))\nplt.show() \n\nIPython.display.Audio(wav, rate=fs)","07db1cc4":"import seaborn as sns\nimport pywt\nimport pyyawt\n\nstds = []\nmeans = []\ndecomps = []\nthrs = []\nwavelets = pywt.wavedec(wav, 'db5', level=10)\n\nfor i, wavelet in enumerate(wavelets):\n    thrs.append(pyyawt.thselect(wavelet, 'heursure'))\n    stds.append(wavelet.std(0))\n    means.append(wavelet.mean(0))\n    decomps.append(wavelet)\n    \n    #ax[i+1,0].plot(wavelet)\n    #ax[i+1,0].plot(wavelet)\n    #sns.distplot(wavelet, ax=ax[i+1,1], hist=False, vertical=True)\n\nthresholded = []\n\nfig, ax = plt.subplots(len(wavelets), figsize=(20,20))\n\n\nfor i, decomp in enumerate(decomps):\n    thresh =((np.amax(decomp)-means[i])*thrs[i])\n    print(thrs[i], np.amax(decomp), thresh)\n    thresholded.append(pywt.threshold(decomp, thresh, 'soft'))\n    ax[i].plot(wavelets[i])\n    ax[i].plot(thresholded[i])\n\nprint(\"Denoised: \"+song_data['name'].replace(\".wav\",\"\"))\nreconstructed = pywt.waverec(thresholded, 'db5')\nplt.specgram(reconstructed,Fs=fs)\nplt.show()\nIPython.display.Audio(reconstructed, rate=fs)","0cbc29b0":"#All codes from Brett Smith https:\/\/www.kaggle.com\/bretts\/plot-spectrogram-play-audio","6d07bf94":"#DENOISE","614c465a":"Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","95528e5a":"#Convert WAVs to numpy arrays\n\nThese data objects will be dictionaries that include the name of the original mp3 file, the sample rate, and left & right audio","8db67d27":"#Converting MP3 into WAVs","21d947fe":"#Plot & Play\n\nTo avoid ERROR we must add another file: ffmpeg-git-20191209-amd64-static\/mode","6a7912af":"#MP3","e726e610":"#Codes from Brett Smith  https:\/\/www.kaggle.com\/bretts\/plot-spectrogram-play-audio\/notebook","c21b1cee":"#We must ADD this file https:\/\/www.kaggle.com\/rakibilly\/ffmpeg-static-build so that the code below works. \n\nWithout this file we can't move on (Brett Smith) ffmpeg-git-20191209-amd64-static\/mode"}}