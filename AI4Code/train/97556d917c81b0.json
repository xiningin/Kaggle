{"cell_type":{"9ddd1c57":"code","c6872aa3":"code","bf5d3780":"code","43239d48":"code","0f81f362":"code","cd654e44":"code","563e8337":"code","6fe54c96":"code","55e06583":"code","c3d0bc4e":"code","262b2dfc":"code","828fdb02":"code","f2ed9341":"code","5cf5123f":"code","3fd8e82b":"code","a0a6a804":"code","b2f36d81":"code","9f460a52":"code","0dca2183":"code","41307eff":"code","c5390cfb":"code","af50db93":"code","a25e8589":"code","feeca344":"code","750a5722":"code","66280622":"code","481d063f":"code","584611b5":"code","7878781d":"code","32f31f20":"code","812b934f":"code","e37f63e4":"code","3a837290":"code","a0c5986f":"code","77b23d91":"markdown","85136e62":"markdown","5bee18fa":"markdown","73236ae4":"markdown","a853ca12":"markdown","166ddbe0":"markdown","09ff75ea":"markdown","9aea0305":"markdown","153891fa":"markdown","d9697a94":"markdown"},"source":{"9ddd1c57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6872aa3":"import warnings\nwarnings.filterwarnings('ignore')","bf5d3780":"df=pd.read_csv('\/kaggle\/input\/men-women-shoes-reviews\/Shoes_Data.csv')","43239d48":"df.info()","0f81f362":"df.head()","cd654e44":"df['rating']=df['rating'].apply(lambda x: str(x).replace(' out of 5 stars','') if ' out of 5 stars' in str(x) else str(x))\ndf['price']=df['price'].apply(lambda x: str(x).replace('\u20b9','') if '\u20b9' in str(x) else str(x))\ndf['total_reviews']=df['total_reviews'].apply(lambda x: str(x).replace(' ratings','') if ' ratings' in str(x) else str(x))\ndf['total_reviews']=df['total_reviews'].apply(lambda x: str(x).replace(' rating','') if ' rating' in str(x) else str(x))\ndf['rating']=df['rating'].astype(float)\ndf['price']=df['price'].astype(float)\ndf['total_reviews']=df['total_reviews'].astype(int)","563e8337":"import matplotlib.pyplot as plt\nimport seaborn as sns","6fe54c96":"sns.heatmap(df.corr(),annot=True)","55e06583":"plt.figure(figsize=(10, 5))\nsns.distplot(df[df[\"Shoe Type\"]==\"Men\"].price,kde=False,rug=False)\nsns.distplot(df[df[\"Shoe Type\"]==\"Women\"].price,kde=False,rug=False)\n\nplt.legend(labels=['Men', 'Women'])\nplt.show()","c3d0bc4e":"fig = plt.figure()\nax = fig.add_subplot(1, 1, 1)\nsns.boxplot(x='Shoe Type', y='price', data=df, showfliers=False, ax=ax)\nsns.stripplot(x='Shoe Type', y='price', data=df, jitter=True, color='black', ax=ax)\n\nplt.show()","262b2dfc":"plt.figure(figsize=(12, 12))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df['rating'],y=df['price'],hue=df['Shoe Type'],size=df['total_reviews'],data=df,sizes=(50,500))\nplt.xticks(rotation=0)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","828fdb02":"from nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom string import punctuation\nimport string\n\nlist_stopwords = set(stopwords.words('english'))\ndf['reviews2'] = df['reviews'].str.lower()\ndf['reviews2'] = df['reviews2'].apply(word_tokenize)\ndf['reviews2'] = df['reviews2'].apply(lambda x: [word for word in x if word not in list_stopwords])\ndf['reviews2'] = df['reviews2'].apply(lambda x : [word.translate(str.maketrans('', '', string.punctuation)) for word in x])\ndf['reviews2'] = df['reviews2'].apply(lambda x : [word for word in x if len(word) > 1])","f2ed9341":"df1=pd.DataFrame(df['reviews2'].explode())","5cf5123f":"pd.set_option('display.max_rows',50)\ndf1.groupby('reviews2')['reviews2'].count().sort_values(ascending=False).head(50).plot.bar(figsize=(10,5))","3fd8e82b":"def rating_judge(ex):\n    if ex <3 :\n        return -1\n    elif ex>3 :\n        return 1\n    else:\n        return 0","a0a6a804":"df.loc[:,'Rpolarity']=df.loc[:,'rating'].apply(rating_judge)\ndf","b2f36d81":"df.groupby('Rpolarity')['title'].count().plot.bar()","9f460a52":"pip install vaderSentiment","0dca2183":"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer","41307eff":"def rounder(num):\n    return round(num)\n    if num > 0: return 1\n    if num < 0: return -1\n    return 0","c5390cfb":"analyzer = SentimentIntensityAnalyzer()","af50db93":"Vpol = []\n\nfor text in df['reviews']:\n    Vpol.append(rounder(analyzer.polarity_scores(text)['compound']))\n\ndf['VPolarity'] = Vpol \n\nvnotagree = df[df['Rpolarity']!=df['VPolarity']]\nvagree = df[df['Rpolarity']==df['VPolarity']]\n\nprint(f\"Overall length {len(df)} \")\nprint(f\"VADER agreements\/disagreements {len(vagree)}\/{len(vnotagree)}\")\nprint(f\"Accuracy: {len(vagree)\/len(df)*100}% \")","a25e8589":"df.head()","feeca344":"df=df.replace({'Men':1, 'Women': 0})","750a5722":"df_ana=df.loc[:,['price','rating','total_reviews','Shoe Type','Rpolarity','VPolarity']]","66280622":"pip install pycaret","481d063f":"from pycaret.clustering import *\ndata_clust = setup(df_ana, normalize = True,session_id = 123,silent=True)","584611b5":"kmeans = create_model('kmeans',num_clusters = 4 )","7878781d":"kmean_results = assign_model(kmeans)\nkmean_results.head()","32f31f20":"kmean_results.groupby('Cluster').count()","812b934f":"kmean_results.groupby('Cluster').mean()","e37f63e4":"plot_model(kmeans)","3a837290":"plot_model(kmeans, plot = 'silhouette')","a0c5986f":"plot_model(kmeans, plot = 'distribution', feature = 'price')","77b23d91":"# So I tried to use both 'VPolarity' and 'Rpolarity' for clustering with 'price', 'rating' and 'total_reviews.","85136e62":"# Most people rate 'Positive'(over 3)  in rating.","5bee18fa":"# I got 70% accuracy between 'Rpolarity' and 'VPolarity'. It may be that there are some negative factors in Rpolarity '1'.","73236ae4":"# I tried NLP- Sentiment Analysis by Vader, clustering and PCA to find the segments.","a853ca12":"# 0. Preprocessing","166ddbe0":"# 2. NLP- Sentiment Analysis by Vader.","09ff75ea":"# 1. Visualization","9aea0305":"# Next, I tried Vader for sentiment analysis.","153891fa":"# 4. Clustering and PCA by PyCaret","d9697a94":"# I divided rating into three, 'over 3 '=1, '3'=0 and 'under 3' = -1 as Rpolarity."}}