{"cell_type":{"45694d65":"code","b3d993b4":"code","8ef6d9f8":"code","09117f2a":"code","59b163d8":"code","19abf479":"code","6c0323bd":"code","014adef9":"code","66f70422":"code","4e829c3a":"code","3851840e":"code","7adfa955":"code","64e7cf37":"code","50aefacb":"code","3e3bc546":"code","37b18427":"code","3bab98ad":"code","88f45837":"code","ddf8eb08":"markdown","3e7e4974":"markdown","23031cf2":"markdown","c87a575c":"markdown","a0e95f22":"markdown"},"source":{"45694d65":"# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n# lists all files in input directory\nimport pandas as pd\nimport numpy as np\nimport fbprophet\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet.plot import add_changepoints_to_plot\nimport datetime\nimport os\nimport holidays\nimport seaborn as sns\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b3d993b4":"# function for seaborn linear regression\ndef plot_regression(original,forecast):\n    regression_data=list(zip(original,forecast))\n    regression_df=pd.DataFrame(regression_data,\\\n                                 columns=['original','forecast'])\n    sns.jointplot('original','forecast',data=regression_df,kind='reg')\n    print('the root mean square error is:',\\\n          np.sqrt(metrics.mean_squared_error(original, forecast)))","8ef6d9f8":"df=pd.read_csv('\/kaggle\/input\/population-time-series-data\/POP.csv')\nind = int(len(df)*0.8)\ndf.head(3)","09117f2a":"df = df[['date','value']]\ndf.columns=['ds','y']\ndf['ds']=df['ds'].apply(lambda x: datetime.datetime.strptime(x,'%Y-%m-%d'))\ntrain_set,test_set = df.iloc[:ind],df.iloc[ind:]\ntrain_set.head()","59b163d8":"holidays_df = pd.DataFrame([],columns = ['ds','holiday'])\ndates, names = [],[]\nfor date, name in sorted(holidays.US(years=np.arange(1952,2021)).items()):\n    dates.append(date)\n    names.append(name)\nholidays_df['ds'] = dates\nholidays_df['holiday'] = names\nholidays_df.head()","19abf479":"yearly_seasonality = list(range(0,20))\nholidays_prior_scale = [0.01,0.025, 0.05, 0.1,0.5,0.75, 1, 2, 5, 7, 10]\nchangepoint_prior_scale = [0.01,0.025, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.5, 2.5, 5]\ntrainrmse, testrmse, params = [],[],[]\nfor ys in yearly_seasonality:\n    for hps in holidays_prior_scale:\n        for cps in changepoint_prior_scale:\n            model = Prophet(holidays=holidays_df, yearly_seasonality=ys, holidays_prior_scale=hps, changepoint_prior_scale=cps)\n            model.fit(train_set)\n            future = model.make_future_dataframe(periods=len(test_set),freq='1M')\n            future.tail()\n            forecast=model.predict(future)\n            train_original=train_set['y'].values.tolist()\n            train_forecast=forecast['yhat'].iloc[:ind].values.tolist()\n            test_original=test_set['y'].values.tolist()\n            test_forecast=forecast['yhat'].iloc[ind:].values.tolist()\n            train_rmse = np.sqrt(metrics.mean_squared_error(train_original, train_forecast))\n            test_rmse = np.sqrt(metrics.mean_squared_error(test_original, test_forecast))\n            trainrmse.append(train_rmse)\n            testrmse.append(test_rmse)\n            parameters = '{},{},{}'.format(str(ys), str(hps), str(cps))\n            params.append(parameters)\nmin_error = test_rmse.index(min(test_rmse))\nprint(params[min_error])","6c0323bd":"params=params[min_error].split(',')\nyearly_seasonality=params[0]\nholidays_prior_scale=params[1]\nchangepoint_prior_scale=params[2]","014adef9":"# instantiate the model\nmodel = Prophet(holidays=holidays_df, yearly_seasonality=yearly_seasonality, changepoint_prior_scale=changepoint_prior_scale, holidays_prior_scale=holidays_prior_scale)","66f70422":"# fit the model to the training data\nmodel.fit(train_set)","4e829c3a":"# create future dataframe\nfuture = model.make_future_dataframe(periods=len(test_set),freq='1M')\nfuture.tail()","3851840e":"forecast=model.predict(future)","7adfa955":"forecast.head()","64e7cf37":"fig = model.plot(forecast)\n# adds changepoints (red dotted lines show a change in trend)\na = add_changepoints_to_plot(fig.gca(), model, forecast)","50aefacb":"# plotting components\ncomponents = model.plot_components(forecast)","3e3bc546":"# values.tolist() takes a dataframe column and makes into a normal python list\ntrain_original=train_set['y'].values.tolist()\ntrain_forecast=forecast['yhat'].iloc[:ind].values.tolist()","37b18427":"# the plot_regression function bascially makes a new dataframe from the lists (train_original, train_forecast) above\nplot_regression(train_original, train_forecast)","3bab98ad":"# values.tolist() takes a dataframe column and makes into a normal python list\ntest_original=test_set['y'].values.tolist()\ntest_forecast=forecast['yhat'].iloc[ind:].values.tolist()","88f45837":"plot_regression(test_original, test_forecast)","ddf8eb08":"# plotting regression\nThere's the data trained from the model, and the original training and testing sets. There's 2 comparisons:\n1. Data from the training set is compared to the first 80% of data predicted with the model\n2. Data from the testing set is compared to the last 20% of data predicted with the model\nBut model has only seen the first 80% of the model\u2013so if the ","3e7e4974":"# fbprophet prediction\n1. instantiate the model\n2. create future dataframe\n3. forecast","23031cf2":"# import libraries ","c87a575c":"# creates holidays_df","a0e95f22":"# read data into dataframe\n1. reads data with pd.read_csv()\n2. only keeps the date and value columns"}}