{"cell_type":{"a5323026":"code","a770732d":"code","e2f89a0d":"code","f6d0171b":"code","76c4c582":"code","7a7d71dc":"code","583267d1":"code","c3e9b647":"code","b910741a":"code","33cbb9ee":"code","e7403812":"code","5926f131":"code","0071b0fc":"code","cb299b75":"code","4a178513":"code","ae477eeb":"code","3a6f4981":"code","0b3508a6":"code","f9524408":"code","89fc82df":"code","5a98425d":"code","7f4d949b":"markdown","bdb8b6ab":"markdown","f701f0dc":"markdown","65eedcf1":"markdown","bc24953d":"markdown","a9d29a17":"markdown","a5beaab0":"markdown","60ab05e9":"markdown"},"source":{"a5323026":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport optuna\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, auc, roc_auc_score\n\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", None)\nsns.set_style('darkgrid')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a770732d":"train = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\nsubmit = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')","e2f89a0d":"train.head(10)","f6d0171b":"test.head(10)","76c4c582":"train.info()","7a7d71dc":"test.info()","583267d1":"print(train.shape)\nprint(test.shape)","c3e9b647":"train.isnull().sum()","b910741a":"train.duplicated().sum()","33cbb9ee":"train.corr()","e7403812":"train.describe()","5926f131":"plt.figure(figsize=(7,6))\nsns.countplot(x = 'target', data = train, palette=\"mako\")","0071b0fc":"train.corr()[\"target\"].plot(y='target',figsize=(20, 10),kind=\"bar\", color=['black'])","cb299b75":"plt.figure(figsize=(35, 30))\nsns.heatmap(train.corr(), linewidths = 0.5, linecolor = 'black', annot=True, cmap='vlag')\nplt.xticks(rotation=90)\nplt.yticks(rotation=0)","4a178513":"test_id = test.loc[:, 'id']\ntrain_target = train.loc[:, 'target']\ntrain.drop(['id', 'target'], axis=1, inplace=True)","ae477eeb":"X_train, X_test, y_train, y_test = train_test_split(train, train_target, test_size=0.25, shuffle=True, \n                                                    random_state=42)\n(X_train.shape, X_test.shape)","3a6f4981":"def objective(trial):\n    \n    # Hyperparameters for XGBClassifier\n    xgb_params = {\n        'random_state': 1, \n        'n_jobs': 3,\n        'booster': 'gbtree',\n        'eval_metric': 'auc',\n        'n_estimators': 5000,\n        'learning_rate': 0.05,\n        'eta': trial.suggest_loguniform('eta', 1e-8, 1.0),  \n        'lambda': trial.suggest_loguniform('lambda', 1e-8, 1.0),\n        'alpha': trial.suggest_loguniform('alpha', 1e-8, 1.0),\n        'subsample': trial.suggest_float('subsample', 0.2, 1.),\n        'colsample_bytree': trial.suggest_float('colsample_bytree',0.2, 1.),\n        'max_depth': trial.suggest_int('max_depth', 3, 10),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1, 7),\n        'use_label_encoder': False,\n    }\n    \n    #K-Fold Split\n    skf = StratifiedKFold(n_splits=5, shuffle=False, random_state=42)\n    final = []\n    \n    for train_idx, test_idx in skf.split(X_train, y_train):\n        X_train_val, X_test_val = X_train.iloc[train_idx], X_train.iloc[test_idx]\n        y_train_val, y_test_val = y_train.iloc[train_idx], y_train.iloc[test_idx]\n        \n        model = XGBClassifier(**xgb_params, tree_method = 'gpu_hist')\n        model.fit(\n            X_train_val, y_train_val,\n            eval_metric='auc',\n            early_stopping_rounds = 200,\n            eval_set = [(X_test_val, y_test_val)], \n            verbose = 0\n        )\n        \n        pred = model.predict_proba(X_test)\n        pred = pred[:, 1]\n        final.append(pred)\n    \n    score = np.mean(final, axis = 0)\n    return roc_auc_score(y_test, score)","0b3508a6":"study_xgb = optuna.create_study(direction='maximize')\nstudy_xgb.optimize(objective, n_trials = 30)","f9524408":"study_xgb.best_trial, study_xgb.best_params","89fc82df":"final_preds = []\n\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\nfor train_idx, test_idx in skf.split(train, train_target):\n        X_train, X_test = train.iloc[train_idx], train.iloc[test_idx]\n        y_train, y_test = train_target.iloc[train_idx], train_target.iloc[test_idx]\n        \n        xgb_model = XGBClassifier(**study_xgb.best_params, tree_method = 'gpu_hist', use_label_encoder=False, objective='binary:logistic',\n                                 eval_metric='auc')\n        xgb_model.fit(\n            X_train, y_train,\n            eval_metric='auc',\n            early_stopping_rounds = 200,\n            eval_set = [(X_test, y_test)], \n            verbose = 0\n        )\n        \n        print(xgb_model.best_score)\n        test_preds = xgb_model.predict_proba(test.drop('id', axis=1))\n        test_preds = test_preds[:, 1]\n        final_preds.append(test_preds)","5a98425d":"submit.target = np.mean(final_preds, axis=0)\nsubmit.to_csv('submission.csv', index=False)","7f4d949b":"# EDA","bdb8b6ab":"# Model Building & Predictions (Using Best Parameters)","f701f0dc":"# Load Data","65eedcf1":"# Submissions","bc24953d":"# Optuna (Studying Various Parameters)","a9d29a17":"# Prepare Data (train_test_spilt)","a5beaab0":"# Model Building","60ab05e9":"# Importing Libraries"}}