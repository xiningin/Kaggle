{"cell_type":{"7f22d0c1":"code","141fb7e5":"code","4f448526":"code","46bc441f":"code","fb6d886a":"code","0bef2239":"code","ae2b3b73":"code","81786319":"code","e0dae3b9":"code","289707ba":"code","6084ed19":"code","a17a2e71":"code","5521251e":"code","808f6404":"code","6d021506":"code","e6eda0fe":"code","a34d0624":"code","897911ba":"code","b3de8f5c":"code","034101a1":"code","4e1b303b":"code","a9a97fe1":"code","240c067e":"code","51270d51":"code","6e7f252e":"code","1b1d8df7":"code","674cac82":"code","f6e3866b":"code","21679fa6":"code","d61a51e7":"code","1a057bb8":"code","74a4e868":"code","9c749229":"code","10af2bcd":"code","0dbab405":"code","21851992":"code","7a52c9aa":"markdown","a0075f96":"markdown","0f4324af":"markdown","31210131":"markdown","29520253":"markdown","085f6335":"markdown","a59a39e2":"markdown","9335f5c8":"markdown","f379a8c2":"markdown","3ef89cd7":"markdown","7f15f218":"markdown","8718ae81":"markdown","684e19d6":"markdown"},"source":{"7f22d0c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","141fb7e5":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression","4f448526":"train = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\") \ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\") \nsub=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","46bc441f":"train.head()","fb6d886a":"data = train.drop(labels=['Id','Province_State','Country_Region','Date'], axis=1)","0bef2239":"print(data.head(2))\nprint(test.head(2))","ae2b3b73":"data2 = train.drop(labels=['Province_State','Country_Region','Date'], axis=1)","81786319":"print(data2.head(2))","e0dae3b9":"pd.merge(data2,data)","289707ba":"print(data.shape)\nprint(data2.shape)\nprint(data2.head(2))\n","6084ed19":"df_new = data2.rename(columns={'Id': 'ForecastId'})","a17a2e71":"print(df_new.head())\nprint(df_new.info())","5521251e":"df_new.isna()","808f6404":"df_new.shape","6d021506":"Group_features = ['ConfirmedCases','Fatalities']\nfig, ax = plt.subplots(figsize=(10,10)) \nsns.heatmap(df_new[Group_features].corr(), annot = True, fmt = '.2f')\nplt.show()","e6eda0fe":"corr = df_new[Group_features].corr()\nsns.set(style=\"white\")\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(10, 10))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","a34d0624":"sns.pairplot(df_new)","897911ba":"plt.figure(figsize=(10,5))\nsns.kdeplot(df_new['Fatalities'],color='red')\nsns.kdeplot(df_new['ConfirmedCases'],color='blue')\nplt.title(' ConfirmedCases - Fatalities',size=20)\nplt.show()","b3de8f5c":"plt.figure(figsize=(10,8))\ndf = df_new\nsns.lineplot(x=\"ConfirmedCases\", y=\"Fatalities\",data=df_new,label='ConfirmedCases')\n\nplt.title(\"ConfirmedCases\")","034101a1":"# line plot \n# first of all check columns 'data.columns'\n# budget vs revenue \ndf_new.ConfirmedCases.plot(kind = 'line', color = 'r', label = ' ConfirmedCases', linewidth=1,alpha =0.8  ,grid = True, linestyle = ':')\ndf_new.Fatalities.plot(color = 'b',label = 'Fatalities',linewidth=1,alpha = 0.8,grid = True, linestyle = '-.')\nplt.legend(loc='upper right')\nplt.xlabel(' ConfirmedCases ')\nplt.ylabel(' Fatalities ')\nplt.title('ConfirmedCases vs Fatalities')\nplt.show()","4e1b303b":"# x ConfirmedCases , y Fatalities\ndf_new.plot(kind='scatter',x='ConfirmedCases',y='Fatalities',alpha=0.5,color='red')\nplt.xlabel('ConfirmedCases')\nplt.ylabel('Fatalities')\nplt.title('ConfirmedCases Count \/ Fatalities Scatter plot')\nplt.show()","a9a97fe1":"sns.set(style=\"white\")\ndf = df_new.loc[:,['ConfirmedCases','Fatalities']]\ng = sns.PairGrid(df, diag_sharey=False)\ng.map_lower(sns.kdeplot, cmap=\"Blues_d\")\ng.map_upper(plt.scatter)\ng.map_diag(sns.kdeplot, lw=3)","240c067e":"# histogram\n# values of ConfirmedCases \n\nplt.plot(df_new.ConfirmedCases,df_new.Fatalities)\nplt.xlabel('ConfirmedCases')\nplt.ylabel('Fatalities')\nplt.show()","51270d51":"# histogram\n# values of Fatalities \ndf_new.Fatalities.plot(kind = 'hist',bins = 10,figsize = (10,10),color='r')\nplt.show()","6e7f252e":"fig, ax = plt.subplots()\nfor a in [df_new.ConfirmedCases, df_new.Fatalities]:\n    sns.distplot(a, bins=range(1, 110, 10), ax=ax, kde=False)\nax.set_xlim([0, 100])","1b1d8df7":"plt.hist([df_new.Fatalities, df_new.ConfirmedCases], color=['r','b'], alpha=0.5)","674cac82":"df_new = df_new[:-22536]","f6e3866b":"X = df_new['ConfirmedCases'].values\ny = df_new['Fatalities'].values","21679fa6":"print(X.shape)\nprint(y.shape)","d61a51e7":"X = X.reshape(-1,1)\ny = y.reshape(-1,1)","1a057bb8":"print(X.shape)\nprint(y.shape)","74a4e868":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.2, random_state=42)","9c749229":"# !!! DO NOT FORGET TO LIBRARIES\n\n\n# Create a k-NN classifier with 7 neighbors: knn\nknn = KNeighborsClassifier(n_neighbors=12)\n\n# Fit the classifier to the training data\nknn.fit(X_train,y_train)\n\n# Print the accuracy\nprint('Score', knn.score(X_test, y_test))\n","10af2bcd":"# !!! DO NOT FORGET TO LIBRARIES\nreg = LinearRegression()\n\nreg.fit(X_train,y_train)\npreds = reg.predict(X_test)\nrmse = np.sqrt(mean_squared_error(y_test,preds))\nprint(rmse)\nprint('Score',reg.score(X_test,y_test))","0dbab405":"# !!! DO NOT FORGET TO LIBRARIES\n\nlog_reg = LogisticRegression(random_state=0)\nlog_reg.fit(X_train, y_train)\nlog_reg.predict(X_test)\nprint(\"Score :\",log_reg.score(X_test, y_test))","21851992":"# !!! DO NOT FORGET TO LIBRARIES\n\n\n# Instantiate model with 1000 decision trees\nrf = RandomForestRegressor(n_estimators = 100, random_state = 42)\n# Train the model on training data\nrf.fit(X_train, y_train);\n# Use the forest's predict method on the test data\npredictions = rf.predict(X_test)\n# Calculate the absolute errors\nerrors = abs(predictions - y_test)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n#Score\nprint(\"Score :\",rf.score(X_test, y_test))\n","7a52c9aa":"# Introduction COVID19\n## COVID-19 Visualizations and ML models With sklearn \/ scikit-learn\n\n### ML models: KNN, Linear Regression, Logistic Regression and RandomForestRegressor \n\nThe first case may be traced back to 17 November 2019.[12] As of 7 June 2020, more than 6.91 million cases have been reported across 188 countries and territories, resulting in more than 400,000 deaths.\n\nSource: https:\/\/en.wikipedia.org\/wiki\/Coronavirus_disease_2019\n\n<font color = 'blue'>\nContents:\n1. [Importing data and libraries](#1)\n1. [Load and Check Data](#2)\n    * [Combining Data](#3)\n1. [Visualizations](#4)\n1. [Modelling](#5)\n    * [preparing data for train test split](#6)\n    * [train test split](#7)\n    * [KNN](#8)\n    * [Linear regression](#9)\n    * [LogisticRegression](#10) \n    * [RandomForestRegressor](#11)\n\n","a0075f96":"<a id = '3'> <\/a> <\/br>\n# Combining Data\n* recheck data","0f4324af":"<a id = '4'> <\/a> <\/br>\n# Visualizations","31210131":"If you like it, please vote. (:","29520253":"<a id = '11'> <\/a> <\/br>\n### RandomForestRegressor","085f6335":"<a id = '10'> <\/a> <\/br>\n### LogisticRegression","a59a39e2":"<a id = '8'> <\/a> <\/br>\n### KNN ","9335f5c8":"<a id = '7'> <\/a> <\/br>\n### train_test_split","f379a8c2":"<a id = '1'> <\/a> <\/br>\n# Importing data and libraries","3ef89cd7":"<a id = '5'> <\/a> <\/br>\n# Modelling \n* preparing data for train test split\n* train test split\n* KNN\n* Linear regression\n* LogisticRegression\n* RandomForestRegressor","7f15f218":"<a id = '2'> <\/a> <\/br>\n# Load and Check Data","8718ae81":"<a id = '6'> <\/a> <\/br>\n### Preparing data for train test split","684e19d6":"<a id = '9'> <\/a> <\/br>\n### LinearRegression"}}