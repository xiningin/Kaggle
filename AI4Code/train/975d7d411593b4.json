{"cell_type":{"3e060d70":"code","b1f983ed":"code","85b07c6c":"code","1e458645":"code","b322db5d":"code","e09c023a":"code","518bb26a":"code","f6c4f9a8":"code","e73d32a5":"code","b2eb0aed":"code","63ad5786":"code","7ab6e31b":"code","9bf24c2e":"code","efd3c43e":"code","07237518":"code","22e25470":"code","2f2909b8":"code","e1d3a90b":"code","03b28efb":"code","9b9ca32b":"code","a6146655":"code","72fbef9a":"code","49c3ae22":"code","ebbdfcbd":"code","48b2c53c":"code","1746f454":"code","4b054cad":"code","3535cc0f":"code","5305b852":"code","e8a4088a":"code","fa534857":"code","52e58cd5":"code","def47edc":"code","8d62a5fc":"code","be477a08":"code","5afa71c3":"code","de31653f":"code","a655d8c5":"code","c4c6c175":"code","e9a8d541":"code","a22bb24a":"code","6c937543":"code","4d6e3fd5":"code","e7f5bb38":"code","3c8f3c65":"code","59673462":"code","54afd02e":"code","4e619efb":"code","e8b86d0f":"code","36faeeb9":"code","1eddeffa":"code","a888a420":"code","4276fd09":"code","3af507a5":"code","43d835b7":"code","523f6bef":"code","3d836ed8":"code","69044af1":"code","472d8ff1":"code","11293fb1":"code","b8abdd27":"code","8736cda1":"code","99a86c58":"code","646304ff":"code","38e48a13":"code","e6dd386e":"code","353c7cf0":"code","ec3c6299":"code","712582ed":"code","22cd64bb":"code","cc4ed573":"code","851b31dd":"markdown","696bb8b7":"markdown","52717620":"markdown","8df35262":"markdown","313e468e":"markdown","a14fa334":"markdown","b6913d6d":"markdown","5e8debf2":"markdown","d0e58893":"markdown","8728a192":"markdown","64ec69fb":"markdown","4b656a93":"markdown"},"source":{"3e060d70":"import numpy as np\nimport pandas as pd","b1f983ed":"loan_data_inputs_train = pd.read_csv('..\/input\/lendingclub-cleaneddata-withdummies\/loan_data_inputs_train.csv', index_col = 0)\nloan_data_targets_train = pd.read_csv('..\/input\/lendingclub-cleaneddata-withdummies\/loan_data_targets_train.csv', index_col = 0, header = None)\nloan_data_inputs_test = pd.read_csv('..\/input\/lendingclub-cleaneddata-withdummies\/loan_data_inputs_test.csv', index_col = 0)\nloan_data_targets_test = pd.read_csv('..\/input\/lendingclub-cleaneddata-withdummies\/loan_data_targets_test.csv', index_col = 0, header = None)","85b07c6c":"loan_data_inputs_train.head()","1e458645":"loan_data_targets_train.head()","b322db5d":"loan_data_inputs_train.shape","e09c023a":"loan_data_targets_train.shape","518bb26a":"loan_data_inputs_test.shape","f6c4f9a8":"loan_data_targets_test.shape","e73d32a5":"# Here we select a limited set of input variables in a new dataframe.\ninputs_train_with_ref_cat = loan_data_inputs_train.loc[: , ['grade:A',\n'grade:B',\n'grade:C',\n'grade:D',\n'grade:E',\n'grade:F',\n'grade:G',\n'home_ownership:RENT_OTHER_NONE_ANY',\n'home_ownership:OWN',\n'home_ownership:MORTGAGE',\n'addr_state:ND_NE_IA_NV_FL_HI_AL',\n'addr_state:NM_VA',\n'addr_state:NY',\n'addr_state:OK_TN_MO_LA_MD_NC',\n'addr_state:CA',\n'addr_state:UT_KY_AZ_NJ',\n'addr_state:AR_MI_PA_OH_MN',\n'addr_state:RI_MA_DE_SD_IN',\n'addr_state:GA_WA_OR',\n'addr_state:WI_MT',\n'addr_state:TX',\n'addr_state:IL_CT',\n'addr_state:KS_SC_CO_VT_AK_MS',\n'addr_state:WV_NH_WY_DC_ME_ID',\n'verification_status:Not Verified',\n'verification_status:Source Verified',\n'verification_status:Verified',\n'purpose:educ__sm_b__wedd__ren_en__mov__house',\n'purpose:credit_card',\n'purpose:debt_consolidation',\n'purpose:oth__med__vacation',\n'purpose:major_purch__car__home_impr',\n'initial_list_status:f',\n'initial_list_status:w',\n'term:36',\n'term:60',\n'emp_length:0',\n'emp_length:1',\n'emp_length:2-4',\n'emp_length:5-6',\n'emp_length:7-9',\n'emp_length:10',\n'mths_since_issue_d:<38',\n'mths_since_issue_d:38-39',\n'mths_since_issue_d:40-41',\n'mths_since_issue_d:42-48',\n'mths_since_issue_d:49-52',\n'mths_since_issue_d:53-64',\n'mths_since_issue_d:65-84',\n'mths_since_issue_d:>84',\n'int_rate:<9.548',\n'int_rate:9.548-12.025',\n'int_rate:12.025-15.74',\n'int_rate:15.74-20.281',\n'int_rate:>20.281',\n'mths_since_earliest_cr_line:<140',\n'mths_since_earliest_cr_line:141-164',\n'mths_since_earliest_cr_line:165-247',\n'mths_since_earliest_cr_line:248-270',\n'mths_since_earliest_cr_line:271-352',\n'mths_since_earliest_cr_line:>352',\n'delinq_2yrs:0',\n'delinq_2yrs:1-3',\n'delinq_2yrs:>=4',\n'inq_last_6mths:0',\n'inq_last_6mths:1-2',\n'inq_last_6mths:3-6',\n'inq_last_6mths:>6',\n'open_acc:0',\n'open_acc:1-3',\n'open_acc:4-12',\n'open_acc:13-17',\n'open_acc:18-22',\n'open_acc:23-25',\n'open_acc:26-30',\n'open_acc:>=31',\n'pub_rec:0-2',\n'pub_rec:3-4',\n'pub_rec:>=5',\n'total_acc:<=27',\n'total_acc:28-51',\n'total_acc:>=52',\n'acc_now_delinq:0',\n'acc_now_delinq:>=1',\n'total_rev_hi_lim:<=5K',\n'total_rev_hi_lim:5K-10K',\n'total_rev_hi_lim:10K-20K',\n'total_rev_hi_lim:20K-30K',\n'total_rev_hi_lim:30K-40K',\n'total_rev_hi_lim:40K-55K',\n'total_rev_hi_lim:55K-95K',\n'total_rev_hi_lim:>95K',\n'annual_inc:<20K',\n'annual_inc:20K-30K',\n'annual_inc:30K-40K',\n'annual_inc:40K-50K',\n'annual_inc:50K-60K',\n'annual_inc:60K-70K',\n'annual_inc:70K-80K',\n'annual_inc:80K-90K',\n'annual_inc:90K-100K',\n'annual_inc:100K-120K',\n'annual_inc:120K-140K',\n'annual_inc:>140K',\n'dti:<=1.4',\n'dti:1.4-3.5',\n'dti:3.5-7.7',\n'dti:7.7-10.5',\n'dti:10.5-16.1',\n'dti:16.1-20.3',\n'dti:20.3-21.7',\n'dti:21.7-22.4',\n'dti:22.4-35',\n'dti:>35',\n'mths_since_last_delinq:Missing',\n'mths_since_last_delinq:0-3',\n'mths_since_last_delinq:4-30',\n'mths_since_last_delinq:31-56',\n'mths_since_last_delinq:>=57',\n'mths_since_last_record:Missing',\n'mths_since_last_record:0-2',\n'mths_since_last_record:3-20',\n'mths_since_last_record:21-31',\n'mths_since_last_record:32-80',\n'mths_since_last_record:81-86',\n]]","b2eb0aed":"# Here we store the names of the reference category dummy variables in a list.\nref_categories = ['grade:G',\n'home_ownership:RENT_OTHER_NONE_ANY',\n'addr_state:ND_NE_IA_NV_FL_HI_AL',\n'verification_status:Verified',\n'purpose:educ__sm_b__wedd__ren_en__mov__house',\n'initial_list_status:f',\n'term:60',\n'emp_length:0',\n'mths_since_issue_d:>84',\n'int_rate:>20.281',\n'mths_since_earliest_cr_line:<140',\n'delinq_2yrs:>=4',\n'inq_last_6mths:>6',\n'open_acc:0',\n'pub_rec:0-2',\n'total_acc:<=27',\n'acc_now_delinq:0',\n'total_rev_hi_lim:<=5K',\n'annual_inc:<20K',\n'dti:>35',\n'mths_since_last_delinq:0-3',\n'mths_since_last_record:0-2']","63ad5786":"inputs_train = inputs_train_with_ref_cat.drop(ref_categories, axis = 1)\n# From the dataframe with input variables, we drop the variables with variable names in the list with reference categories. \ninputs_train.head()","7ab6e31b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","9bf24c2e":"reg = LogisticRegression()\n# We create an instance of an object from the 'LogisticRegression' class.","efd3c43e":"pd.options.display.max_rows = None\n# Sets the pandas dataframe options to display all columns\/ rows.","07237518":"reg.fit(inputs_train, loan_data_targets_train)\n# Estimates the coefficients of the object from the 'LogisticRegression' class\n# with inputs (independent variables) contained in the first dataframe\n# and targets (dependent variables) contained in the second dataframe.","22e25470":"reg.intercept_\n# Displays the intercept contain in the estimated (\"fitted\") object from the 'LogisticRegression' class.","2f2909b8":"reg.coef_\n# Displays the coefficients contained in the estimated (\"fitted\") object from the 'LogisticRegression' class.","e1d3a90b":"inputs_train.columns.values","03b28efb":"feature_name = inputs_train.columns.values\n# Stores the names of the columns of a dataframe in a variable.","9b9ca32b":"summary_table = pd.DataFrame(columns = ['Feature name'], data = feature_name)\n# Creates a dataframe with a column titled 'Feature name' and row values contained in the 'feature_name' variable.\nsummary_table['Coefficients'] = np.transpose(reg.coef_)\n# Creates a new column in the dataframe, called 'Coefficients',\n# with row values the transposed coefficients from the 'LogisticRegression' object.\nsummary_table.index = summary_table.index + 1\n# Increases the index of every row of the dataframe with 1.\nsummary_table.loc[0] = ['Intercept', reg.intercept_[0]]\n# Assigns values of the row with index 0 of the dataframe.\nsummary_table = summary_table.sort_index()\n# Sorts the dataframe by index.\nsummary_table","a6146655":"# P values for sklearn logistic regression.\n\n# Class to display p-values for logistic regression in sklearn.\n\nfrom sklearn import linear_model\nimport scipy.stats as stat\n\nclass LogisticRegression_with_p_values:\n    \n    def __init__(self,*args,**kwargs):#,**kwargs):\n        self.model = linear_model.LogisticRegression(*args,**kwargs)#,**args)\n\n    def fit(self,X,y):\n        self.model.fit(X,y)\n        \n        #### Get p-values for the fitted model ####\n        denom = (2.0 * (1.0 + np.cosh(self.model.decision_function(X))))\n        denom = np.tile(denom,(X.shape[1],1)).T\n        F_ij = np.dot((X \/ denom).T,X) ## Fisher Information Matrix\n        Cramer_Rao = np.linalg.inv(F_ij) ## Inverse Information Matrix\n        sigma_estimates = np.sqrt(np.diagonal(Cramer_Rao))\n        z_scores = self.model.coef_[0] \/ sigma_estimates # z-score for eaach model coefficient\n        p_values = [stat.norm.sf(abs(x)) * 2 for x in z_scores] ### two tailed test for p-values\n        \n        self.coef_ = self.model.coef_\n        self.intercept_ = self.model.intercept_\n        #self.z_scores = z_scores\n        self.p_values = p_values\n        #self.sigma_estimates = sigma_estimates\n        #self.F_ij = F_ij","72fbef9a":"from sklearn import linear_model\nimport scipy.stats as stat\n\nclass LogisticRegression_with_p_values:\n    \n    def __init__(self,*args,**kwargs):\n        self.model = linear_model.LogisticRegression(*args,**kwargs)\n\n    def fit(self,X,y):\n        self.model.fit(X,y)\n        denom = (2.0 * (1.0 + np.cosh(self.model.decision_function(X))))\n        denom = np.tile(denom,(X.shape[1],1)).T\n        F_ij = np.dot((X \/ denom).T,X)\n        Cramer_Rao = np.linalg.inv(F_ij)\n        sigma_estimates = np.sqrt(np.diagonal(Cramer_Rao))\n        z_scores = self.model.coef_[0] \/ sigma_estimates\n        p_values = [stat.norm.sf(abs(x)) * 2 for x in z_scores]\n        self.coef_ = self.model.coef_\n        self.intercept_ = self.model.intercept_\n        self.p_values = p_values","49c3ae22":"reg = LogisticRegression_with_p_values()\n# We create an instance of an object from the newly created 'LogisticRegression_with_p_values()' class.","ebbdfcbd":"reg.fit(inputs_train, loan_data_targets_train)\n# Estimates the coefficients of the object from the 'LogisticRegression' class\n# with inputs (independent variables) contained in the first dataframe\n# and targets (dependent variables) contained in the second dataframe.","48b2c53c":"# Same as above.\nsummary_table = pd.DataFrame(columns = ['Feature name'], data = feature_name)\nsummary_table['Coefficients'] = np.transpose(reg.coef_)\nsummary_table.index = summary_table.index + 1\nsummary_table.loc[0] = ['Intercept', reg.intercept_[0]]\nsummary_table = summary_table.sort_index()\nsummary_table","1746f454":"# This is a list.\np_values = reg.p_values\n# We take the result of the newly added method 'p_values' and store it in a variable 'p_values'.","4b054cad":"# Add the intercept for completeness.\np_values = np.append(np.nan, np.array(p_values))\n# We add the value 'NaN' in the beginning of the variable with p-values.","3535cc0f":"summary_table['p_values'] = p_values\n# In the 'summary_table' dataframe, we add a new column, called 'p_values', containing the values from the 'p_values' variable.","5305b852":"summary_table","e8a4088a":"# We are going to remove some features, the coefficients for all or almost all of the dummy variables for which,\n# are not tatistically significant.\n\n# We do that by specifying another list of dummy variables as reference categories, and a list of variables to remove.\n# Then, we are going to drop the two datasets from the original list of dummy variables.\n\n# Variables\ninputs_train_with_ref_cat = loan_data_inputs_train.loc[: , ['grade:A',\n'grade:B',\n'grade:C',\n'grade:D',\n'grade:E',\n'grade:F',\n'grade:G',\n'home_ownership:RENT_OTHER_NONE_ANY',\n'home_ownership:OWN',\n'home_ownership:MORTGAGE',\n'addr_state:ND_NE_IA_NV_FL_HI_AL',\n'addr_state:NM_VA',\n'addr_state:NY',\n'addr_state:OK_TN_MO_LA_MD_NC',\n'addr_state:CA',\n'addr_state:UT_KY_AZ_NJ',\n'addr_state:AR_MI_PA_OH_MN',\n'addr_state:RI_MA_DE_SD_IN',\n'addr_state:GA_WA_OR',\n'addr_state:WI_MT',\n'addr_state:TX',\n'addr_state:IL_CT',\n'addr_state:KS_SC_CO_VT_AK_MS',\n'addr_state:WV_NH_WY_DC_ME_ID',\n'verification_status:Not Verified',\n'verification_status:Source Verified',\n'verification_status:Verified',\n'purpose:educ__sm_b__wedd__ren_en__mov__house',\n'purpose:credit_card',\n'purpose:debt_consolidation',\n'purpose:oth__med__vacation',\n'purpose:major_purch__car__home_impr',\n'initial_list_status:f',\n'initial_list_status:w',\n'term:36',\n'term:60',\n'emp_length:0',\n'emp_length:1',\n'emp_length:2-4',\n'emp_length:5-6',\n'emp_length:7-9',\n'emp_length:10',\n'mths_since_issue_d:<38',\n'mths_since_issue_d:38-39',\n'mths_since_issue_d:40-41',\n'mths_since_issue_d:42-48',\n'mths_since_issue_d:49-52',\n'mths_since_issue_d:53-64',\n'mths_since_issue_d:65-84',\n'mths_since_issue_d:>84',\n'int_rate:<9.548',\n'int_rate:9.548-12.025',\n'int_rate:12.025-15.74',\n'int_rate:15.74-20.281',\n'int_rate:>20.281',\n'mths_since_earliest_cr_line:<140',\n'mths_since_earliest_cr_line:141-164',\n'mths_since_earliest_cr_line:165-247',\n'mths_since_earliest_cr_line:248-270',\n'mths_since_earliest_cr_line:271-352',\n'mths_since_earliest_cr_line:>352',\n'inq_last_6mths:0',\n'inq_last_6mths:1-2',\n'inq_last_6mths:3-6',\n'inq_last_6mths:>6',\n'acc_now_delinq:0',\n'acc_now_delinq:>=1',\n'annual_inc:<20K',\n'annual_inc:20K-30K',\n'annual_inc:30K-40K',\n'annual_inc:40K-50K',\n'annual_inc:50K-60K',\n'annual_inc:60K-70K',\n'annual_inc:70K-80K',\n'annual_inc:80K-90K',\n'annual_inc:90K-100K',\n'annual_inc:100K-120K',\n'annual_inc:120K-140K',\n'annual_inc:>140K',\n'dti:<=1.4',\n'dti:1.4-3.5',\n'dti:3.5-7.7',\n'dti:7.7-10.5',\n'dti:10.5-16.1',\n'dti:16.1-20.3',\n'dti:20.3-21.7',\n'dti:21.7-22.4',\n'dti:22.4-35',\n'dti:>35',\n'mths_since_last_delinq:Missing',\n'mths_since_last_delinq:0-3',\n'mths_since_last_delinq:4-30',\n'mths_since_last_delinq:31-56',\n'mths_since_last_delinq:>=57',\n'mths_since_last_record:Missing',\n'mths_since_last_record:0-2',\n'mths_since_last_record:3-20',\n'mths_since_last_record:21-31',\n'mths_since_last_record:32-80',\n'mths_since_last_record:81-86',\n]]\n\nref_categories = ['grade:G',\n'home_ownership:RENT_OTHER_NONE_ANY',\n'addr_state:ND_NE_IA_NV_FL_HI_AL',\n'verification_status:Verified',\n'purpose:educ__sm_b__wedd__ren_en__mov__house',\n'initial_list_status:f',\n'term:60',\n'emp_length:0',\n'mths_since_issue_d:>84',\n'int_rate:>20.281',\n'mths_since_earliest_cr_line:<140',\n'inq_last_6mths:>6',\n'acc_now_delinq:0',\n'annual_inc:<20K',\n'dti:>35',\n'mths_since_last_delinq:0-3',\n'mths_since_last_record:0-2']","fa534857":"inputs_train = inputs_train_with_ref_cat.drop(ref_categories, axis = 1)\ninputs_train.head()","52e58cd5":"# Here we run a new model.\nreg2 = LogisticRegression_with_p_values()\nreg2.fit(inputs_train, loan_data_targets_train)","def47edc":"feature_name = inputs_train.columns.values","8d62a5fc":"# Same as above.\nsummary_table = pd.DataFrame(columns = ['Feature name'], data = feature_name)\nsummary_table['Coefficients'] = np.transpose(reg2.coef_)\nsummary_table.index = summary_table.index + 1\nsummary_table.loc[0] = ['Intercept', reg2.intercept_[0]]\nsummary_table = summary_table.sort_index()\nsummary_table","be477a08":"# We add the 'p_values' here, just as we did before.\np_values = reg2.p_values\np_values = np.append(np.nan,np.array(p_values))\nsummary_table['p_values'] = p_values\nsummary_table\n# Here we get the results for our final PD model.","5afa71c3":"import pickle","de31653f":"pickle.dump(reg2, open('pd_model.sav', 'wb'))\n# Here we export our model to a 'SAV' file with file name 'pd_model.sav'.","a655d8c5":"# Here, from the dataframe with inputs for testing, we keep the same variables that we used in our final PD model.\ninputs_test_with_ref_cat = loan_data_inputs_test.loc[: , ['grade:A',\n'grade:B',\n'grade:C',\n'grade:D',\n'grade:E',\n'grade:F',\n'grade:G',\n'home_ownership:RENT_OTHER_NONE_ANY',\n'home_ownership:OWN',\n'home_ownership:MORTGAGE',\n'addr_state:ND_NE_IA_NV_FL_HI_AL',\n'addr_state:NM_VA',\n'addr_state:NY',\n'addr_state:OK_TN_MO_LA_MD_NC',\n'addr_state:CA',\n'addr_state:UT_KY_AZ_NJ',\n'addr_state:AR_MI_PA_OH_MN',\n'addr_state:RI_MA_DE_SD_IN',\n'addr_state:GA_WA_OR',\n'addr_state:WI_MT',\n'addr_state:TX',\n'addr_state:IL_CT',\n'addr_state:KS_SC_CO_VT_AK_MS',\n'addr_state:WV_NH_WY_DC_ME_ID',\n'verification_status:Not Verified',\n'verification_status:Source Verified',\n'verification_status:Verified',\n'purpose:educ__sm_b__wedd__ren_en__mov__house',\n'purpose:credit_card',\n'purpose:debt_consolidation',\n'purpose:oth__med__vacation',\n'purpose:major_purch__car__home_impr',\n'initial_list_status:f',\n'initial_list_status:w',\n'term:36',\n'term:60',\n'emp_length:0',\n'emp_length:1',\n'emp_length:2-4',\n'emp_length:5-6',\n'emp_length:7-9',\n'emp_length:10',\n'mths_since_issue_d:<38',\n'mths_since_issue_d:38-39',\n'mths_since_issue_d:40-41',\n'mths_since_issue_d:42-48',\n'mths_since_issue_d:49-52',\n'mths_since_issue_d:53-64',\n'mths_since_issue_d:65-84',\n'mths_since_issue_d:>84',\n'int_rate:<9.548',\n'int_rate:9.548-12.025',\n'int_rate:12.025-15.74',\n'int_rate:15.74-20.281',\n'int_rate:>20.281',\n'mths_since_earliest_cr_line:<140',\n'mths_since_earliest_cr_line:141-164',\n'mths_since_earliest_cr_line:165-247',\n'mths_since_earliest_cr_line:248-270',\n'mths_since_earliest_cr_line:271-352',\n'mths_since_earliest_cr_line:>352',\n'inq_last_6mths:0',\n'inq_last_6mths:1-2',\n'inq_last_6mths:3-6',\n'inq_last_6mths:>6',\n'acc_now_delinq:0',\n'acc_now_delinq:>=1',\n'annual_inc:<20K',\n'annual_inc:20K-30K',\n'annual_inc:30K-40K',\n'annual_inc:40K-50K',\n'annual_inc:50K-60K',\n'annual_inc:60K-70K',\n'annual_inc:70K-80K',\n'annual_inc:80K-90K',\n'annual_inc:90K-100K',\n'annual_inc:100K-120K',\n'annual_inc:120K-140K',\n'annual_inc:>140K',\n'dti:<=1.4',\n'dti:1.4-3.5',\n'dti:3.5-7.7',\n'dti:7.7-10.5',\n'dti:10.5-16.1',\n'dti:16.1-20.3',\n'dti:20.3-21.7',\n'dti:21.7-22.4',\n'dti:22.4-35',\n'dti:>35',\n'mths_since_last_delinq:Missing',\n'mths_since_last_delinq:0-3',\n'mths_since_last_delinq:4-30',\n'mths_since_last_delinq:31-56',\n'mths_since_last_delinq:>=57',\n'mths_since_last_record:Missing',\n'mths_since_last_record:0-2',\n'mths_since_last_record:3-20',\n'mths_since_last_record:21-31',\n'mths_since_last_record:32-80',\n'mths_since_last_record:81-86'\n]]","c4c6c175":"# And here, in the list below, we keep the variable names for the reference categories,\n# only for the variables we used in our final PD model.\nref_categories = ['grade:G',\n'home_ownership:RENT_OTHER_NONE_ANY',\n'addr_state:ND_NE_IA_NV_FL_HI_AL',\n'verification_status:Verified',\n'purpose:educ__sm_b__wedd__ren_en__mov__house',\n'initial_list_status:f',\n'term:60',\n'emp_length:0',\n'mths_since_issue_d:>84',\n'int_rate:>20.281',\n'mths_since_earliest_cr_line:<140',\n'inq_last_6mths:>6',\n'acc_now_delinq:0',\n'annual_inc:<20K',\n'dti:>35',\n'mths_since_last_delinq:0-3',\n'mths_since_last_record:0-2']","e9a8d541":"inputs_test = inputs_test_with_ref_cat.drop(ref_categories, axis = 1)\ninputs_test.head()","a22bb24a":"y_hat_test = reg2.model.predict(inputs_test)\n# Calculates the predicted values for the dependent variable (targets)\n# based on the values of the independent variables (inputs) supplied as an argument.","6c937543":"y_hat_test\n# This is an array of predicted discrete classess (in this case, 0s and 1s).","4d6e3fd5":"y_hat_test_proba = reg2.model.predict_proba(inputs_test)\n# Calculates the predicted probability values for the dependent variable (targets)\n# based on the values of the independent variables (inputs) supplied as an argument.","e7f5bb38":"y_hat_test_proba\n# This is an array of arrays of predicted class probabilities for all classes.\n# In this case, the first value of every sub-array is the probability for the observation to belong to the first class, i.e. 0,\n# and the second value is the probability for the observation to belong to the first class, i.e. 1.","3c8f3c65":"y_hat_test_proba[:][:,1]\n# Here we take all the arrays in the array, and from each array, we take all rows, and only the element with index 1,\n# that is, the second element.\n# In other words, we take only the probabilities for being 1.","59673462":"y_hat_test_proba = y_hat_test_proba[: ][: , 1]\n# We store these probabilities in a variable.","54afd02e":"y_hat_test_proba\n# This variable contains an array of probabilities of being 1.","4e619efb":"loan_data_targets_test_temp = loan_data_targets_test","e8b86d0f":"loan_data_targets_test_temp.reset_index(drop = True, inplace = True)\n# We reset the index of a dataframe.","36faeeb9":"df_actual_predicted_probs = pd.concat([loan_data_targets_test_temp, pd.DataFrame(y_hat_test_proba)], axis = 1)\n# Concatenates two dataframes.","1eddeffa":"df_actual_predicted_probs.shape","a888a420":"df_actual_predicted_probs.columns = ['loan_data_targets_test', 'y_hat_test_proba']","4276fd09":"df_actual_predicted_probs.index = loan_data_inputs_test.index\n# Makes the index of one dataframe equal to the index of another dataframe.","3af507a5":"df_actual_predicted_probs.head()","43d835b7":"tr = 0.9\n# We create a new column with an indicator,\n# where every observation that has predicted probability greater than the threshold has a value of 1,\n# and every observation that has predicted probability lower than the threshold has a value of 0.\ndf_actual_predicted_probs['y_hat_test'] = np.where(df_actual_predicted_probs['y_hat_test_proba'] > tr, 1, 0)","523f6bef":"pd.crosstab(df_actual_predicted_probs['loan_data_targets_test'], df_actual_predicted_probs['y_hat_test'], rownames = ['Actual'], colnames = ['Predicted'])\n# Creates a cross-table where the actual values are displayed by rows and the predicted values by columns.\n# This table is known as a Confusion Matrix.","3d836ed8":"pd.crosstab(df_actual_predicted_probs['loan_data_targets_test'], df_actual_predicted_probs['y_hat_test'], rownames = ['Actual'], colnames = ['Predicted']) \/ df_actual_predicted_probs.shape[0]\n# Here we divide each value of the table by the total number of observations,\n# thus getting percentages, or, rates.","69044af1":"(pd.crosstab(df_actual_predicted_probs['loan_data_targets_test'], df_actual_predicted_probs['y_hat_test'], rownames = ['Actual'], colnames = ['Predicted']) \/ df_actual_predicted_probs.shape[0]).iloc[0, 0] + (pd.crosstab(df_actual_predicted_probs['loan_data_targets_test'], df_actual_predicted_probs['y_hat_test'], rownames = ['Actual'], colnames = ['Predicted']) \/ df_actual_predicted_probs.shape[0]).iloc[1, 1]\n# Here we calculate Accuracy of the model, which is the sum of the diagonal rates.","472d8ff1":"from sklearn.metrics import roc_curve, roc_auc_score","11293fb1":"roc_curve(df_actual_predicted_probs['loan_data_targets_test'], df_actual_predicted_probs['y_hat_test_proba'])\n# Returns the Receiver Operating Characteristic (ROC) Curve from a set of actual values and their predicted probabilities.\n# As a result, we get three arrays: the false positive rates, the true positive rates, and the thresholds.","b8abdd27":"fpr, tpr, thresholds = roc_curve(df_actual_predicted_probs['loan_data_targets_test'], df_actual_predicted_probs['y_hat_test_proba'])\n# Here we store each of the three arrays in a separate variable. ","8736cda1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","99a86c58":"plt.plot(fpr, tpr)\n# We plot the false positive rate along the x-axis and the true positive rate along the y-axis,\n# thus plotting the ROC curve.\nplt.plot(fpr, fpr, linestyle = '--', color = 'k')\n# We plot a seconary diagonal line, with dashed line style and black color.\nplt.xlabel('False positive rate')\n# We name the x-axis \"False positive rate\".\nplt.ylabel('True positive rate')\n# We name the x-axis \"True positive rate\".\nplt.title('ROC curve')\n# We name the graph \"ROC curve\".","646304ff":"AUROC = roc_auc_score(df_actual_predicted_probs['loan_data_targets_test'], df_actual_predicted_probs['y_hat_test_proba'])\n# Calculates the Area Under the Receiver Operating Characteristic Curve (AUROC)\n# from a set of actual values and their predicted probabilities.\nAUROC","38e48a13":"from sklearn.metrics import classification_report","e6dd386e":"a = classification_report(df_actual_predicted_probs['loan_data_targets_test'], df_actual_predicted_probs['y_hat_test'])","353c7cf0":"print(a)","ec3c6299":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(max_depth=2, random_state=0)","712582ed":"clf.fit(inputs_train, loan_data_targets_train)","22cd64bb":"preds = clf.predict(inputs_test)","cc4ed573":"a = classification_report(df_actual_predicted_probs['loan_data_targets_test'], preds)\nprint(a)","851b31dd":"### Selecting the Features","696bb8b7":"# Import Libraries","52717620":"## Logistic Regression","8df35262":"## Build a Logistic Regression Model with P-Values","313e468e":"# PD Model Validation (Test)","a14fa334":"### Explore Data","b6913d6d":"# Loading the Data and Selecting the Features","5e8debf2":"# Random Forest","d0e58893":"### Import Data","8728a192":"### Accuracy and Area under the Curve","64ec69fb":"### Out-of-sample validation (test)","4b656a93":"# PD Model Estimation"}}