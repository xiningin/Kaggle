{"cell_type":{"1fd8b50b":"code","d237fc32":"code","252197b9":"code","8fb90dda":"code","1eced168":"code","c72048ea":"code","35515c5d":"code","d8aaa5cc":"code","9caa5a71":"code","59865d04":"code","d604ec07":"code","6087fc76":"code","a1043379":"code","6e3fbfff":"code","5f042b8e":"code","bce53470":"code","4a3cf987":"code","5f3c4048":"code","959b6118":"code","80eb49d1":"code","856b8324":"code","8c8249b4":"code","7b5fdecb":"code","b4f97951":"code","dcce38fa":"code","71c1adf5":"code","52a16a8e":"code","a9066747":"code","d647ec1a":"code","c2ce7a08":"code","d0896f4e":"code","4afec04c":"code","81fb3680":"code","5ac2c04e":"code","98aabd8f":"code","e77504a8":"code","e6713b2e":"code","dc85667c":"code","583f865c":"code","c9e74e9c":"code","cd36203f":"code","e657b896":"code","038d5ac9":"markdown"},"source":{"1fd8b50b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d237fc32":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","252197b9":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","8fb90dda":"gender_sub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","1eced168":"print(gender_sub.shape)\ngender_sub.head()","c72048ea":"y_test = gender_sub.iloc[: , 1]\nprint(y_test)","35515c5d":"x = train_data.iloc[: , :]\nprint(x.shape)\nx = train_data.drop([\"Survived\"], axis= 1)\ny = train_data[\"Survived\"]\nx.head()\nx_test = test_data.iloc[: , :]\nprint(x.shape)\nprint(x_test.shape)","d8aaa5cc":"y.head()","9caa5a71":"analisys_df = train_data.drop(['PassengerId', 'Survived', 'Name', 'Ticket', 'Cabin', 'Embarked'], axis = 1)\n\ncorr = train_data.corr()\nsns.heatmap(corr)","59865d04":"sns.countplot(x = 'Sex', data = train_data)","d604ec07":"sns.stripplot(x='Sex', y = 'Survived', data=train_data,\n           hue='Pclass')","6087fc76":"sns.countplot(x = 'Embarked', data = train_data)","a1043379":"sns.distplot(analisys_df.Age)","6e3fbfff":"fig, ax = plt.subplots(figsize=(6,10))\nsns.boxplot(data = analisys_df)\nplt.ylim(1,180)","5f042b8e":"sns.lmplot(x='Sex', y = 'Age', data=train_data,\n           fit_reg=False, \n           hue='Survived')","bce53470":"sns.lmplot(x = 'Pclass', y = 'Fare', data = analisys_df)\n\nplt.xlim(0,3)\nplt.ylim(0,250)","4a3cf987":"x = x.drop([\"Ticket\"], axis =1)\nx.head()","5f3c4048":"x['Family'] = x['Parch'] + x['SibSp']\nx = x.drop([\"Parch\",  \"SibSp\"], axis = 1)","959b6118":"x = x.drop([\"Pclass\", \"PassengerId\", \"Cabin\", \"Name\"], axis = 1)\n\nprint(x.shape)","80eb49d1":"x_test['Family'] = test_data['Parch'] + test_data['SibSp']\nx_test = test_data.drop(['Pclass', 'Name', 'Parch', 'SibSp', 'Cabin', 'Ticket', 'PassengerId'], axis = 1)","856b8324":"print(x_test.shape)\nprint(x.shape)","8c8249b4":"x.head()","7b5fdecb":"x_test.head()","b4f97951":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\noe = ColumnTransformer(transformers = [(\"encoder\", OrdinalEncoder(), [0])], remainder= \"passthrough\")\n\nx = np.array(oe.fit_transform(x))","dcce38fa":"x_test = np.array(oe.fit_transform(x_test))","71c1adf5":"print(x.shape)\nprint(x_test.shape)","52a16a8e":"print(x)","a9066747":"ohe = ColumnTransformer(transformers = [(\"encoder\", OneHotEncoder(), [3])], remainder = \"passthrough\")\n\nx = np.array(ohe.fit_transform(x))","d647ec1a":"x_test = np.array(ohe.transform(x_test))","c2ce7a08":"print(x.shape)\nprint(x_test.shape)","d0896f4e":"from sklearn.impute import SimpleImputer \n\nimputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')\n\nimputed_X_train = pd.DataFrame(imputer.fit_transform(x))\n","4afec04c":"imputer_X_test = pd.DataFrame(imputer.fit_transform(x_test))","81fb3680":"imputed_X_train.head()","5ac2c04e":"imputed_X_train = imputed_X_train.astype('float64')\nimputer_X_test = imputer_X_test.astype('float64')","98aabd8f":"from sklearn.model_selection import train_test_split \nimputed_X_train, x_valid, y, y_valid = train_test_split(imputed_X_train, y, train_size = 0.75, random_state = 0)","e77504a8":"print(imputed_X_train.shape)\nprint(imputer_X_test.shape)\nprint(x_valid.shape)","e6713b2e":"import keras\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping","dc85667c":"nn = keras.Sequential([ \nlayers.Dense(1024, activation='relu', input_shape=[8]), \nlayers.Dropout(rate = 0.3), \nlayers.Dense(1024, activation='relu'), \nlayers.Dropout(rate = 0.3), \nlayers.Dense(1024, activation='relu'), \nlayers.Dropout(rate = 0.3), \nlayers.Dense(1, activation = 'sigmoid'), \n]) \nearly_stopping = EarlyStopping(min_delta = 0.01, patience = 30, restore_best_weights = True)","583f865c":"nn.compile(\n    optimizer = 'rmsprop',\n    loss = 'binary_crossentropy',    \n    metrics = 'binary_accuracy',)","c9e74e9c":"nn.fit(imputed_X_train,  y,\n       validation_data = (x_valid,  y_valid),\n       epochs = 100,\n       batch_size = 100,      \n       verbose = 2,\n      )","cd36203f":"y_pred = np.array(nn.predict(imputer_X_test))\ny_preds = y_pred.reshape(-1)","e657b896":"output = pd.DataFrame({'PassengerId' : test_data.PassengerId, 'Survived' : y_preds})\noutput.to_csv(\"my_submission.csv\", index = False)","038d5ac9":"Please share your opinion and\/or tips. Looking forward to getting better \ud83d\ude00"}}