{"cell_type":{"38fa55b1":"code","8605508d":"code","6000a76a":"code","bd37b96f":"code","5e3b75c3":"code","d840c0c3":"code","706e7b6c":"code","b0cc8bd8":"code","36888144":"code","b6ff8c17":"code","8b98ab74":"code","c6904e6b":"code","122d5532":"code","1f5528d9":"code","aa5abc37":"code","2ad11dd4":"code","f5e05ed8":"code","7fd6cfe6":"code","eb6cd0cf":"code","5ffd9699":"code","61e504bc":"code","3d61b062":"code","af3b4be9":"code","522c6f3b":"code","c6aa704c":"code","1cb397e0":"markdown","d941412b":"markdown","c9ee51ab":"markdown","2be89e68":"markdown","6e86e49f":"markdown","84825816":"markdown","4ecc99d5":"markdown","fc54f200":"markdown","246fb744":"markdown","5b8d42ae":"markdown","18c16f3b":"markdown","ec47df61":"markdown","e5879695":"markdown","b1e97266":"markdown","5fc05cfb":"markdown","05a6dc7d":"markdown","dbfc0a58":"markdown","4110d7ec":"markdown","546c6220":"markdown","9141ce1a":"markdown","227ea30f":"markdown","06fc5351":"markdown"},"source":{"38fa55b1":"%matplotlib inline","8605508d":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\n\nfrom IPython.core.display import HTML","6000a76a":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(est, X_train, y_train) :\n    train_sizes, train_scores, test_scores = learning_curve(estimator=est, X=X_train, y=y_train, train_sizes=np.linspace(0.1, 1.0, 10),\n                                                        cv=5,\n                                                        n_jobs=-1)\n    train_mean = np.mean(train_scores, axis=1)\n    train_std = np.std(train_scores, axis=1)\n    test_mean = np.mean(test_scores, axis=1)\n    test_std = np.std(test_scores, axis=1)\n    plt.figure(figsize=(8,10))\n    plt.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training accuracy')\n    plt.fill_between(train_sizes, train_mean + train_std, train_mean - train_std, alpha=0.15, color='blue')\n    plt.plot(train_sizes, test_mean,color='green', linestyle='--',marker='s', markersize=5,label='validation accuracy')\n    plt.fill_between(train_sizes,test_mean + test_std,test_mean - test_std,alpha=0.15, color='green')\n    plt.grid(b='on')\n    plt.xlabel('Number of training samples')\n    plt.ylabel('Accuracy')\n    plt.legend(loc='lower right')\n    plt.ylim([0.6, 1.0])\n    plt.show()","bd37b96f":"def plot_roc_curve(est,X_test,y_test) :\n    probas = est.predict_proba(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    plt.figure(figsize=(8,8))\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\n    plt.legend(loc='lower right')\n    plt.plot([0,1],[0,1],'r--')        # plus mauvaise courbe\n    plt.plot([0,0,1],[0,1,1],'g:')     # meilleure courbe\n    plt.xlim([-0.05,1.2])\n    plt.ylim([-0.05,1.2])\n    plt.ylabel('Taux de vrais positifs')\n    plt.xlabel('Taux de faux positifs')\n    plt.show","5e3b75c3":"df = pd.read_csv('..\/input\/fashion-mnist\/fashion-mnist_train.csv')","d840c0c3":"df.head()","706e7b6c":"labels = [\"T-shirt\/top\",\"Trouser\",\"Pullover\",\"Dress\",\"Coat\",\"Sandal\",\"Shirt\",\n          \"Sneaker\",\"Bag\",\"Ankle boot\"]","b0cc8bd8":"print(labels[df.label[0]])","36888144":"df.shape","b6ff8c17":"y = df['label']","8b98ab74":"X = df.drop(['label'], axis=1)","c6904e6b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","122d5532":"X1 = np.array(X)","1f5528d9":"print(X1[0])","aa5abc37":"image = X1[0].reshape(28,28)\nprint(image)","2ad11dd4":"plt.imshow(image)","f5e05ed8":"plt.imshow(image, cmap=\"gray_r\")\nplt.axis('off')\nplt.title(y[0])","7fd6cfe6":"n_samples = len(df.index)\nimages = X1.reshape(n_samples,28,28)","eb6cd0cf":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(labels[df.label[i]])","5ffd9699":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","61e504bc":"plot_learning_curve(rf, X, y)","3d61b062":"print(classification_report(y_test, y_rf))","af3b4be9":"cm = confusion_matrix(y_test, y_rf)\nprint(cm)","522c6f3b":"!pip install xgboost","c6aa704c":"import xgboost as XGB\nxgb  = XGB.XGBClassifier()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)\ncm = confusion_matrix(y_test, y_xgb)\nprint(cm)\nprint(classification_report(y_test, y_xgb))","1cb397e0":"Fonction pour tracer la courbe ROC :","d941412b":"On cr\u00e9e la cible y (colonne 'label')","c9ee51ab":"## Visualisation des data avec leur label","2be89e68":"On a 785 colonnes : \n- une colonne 'label' identifiant le chiffre\n- et 784 colonnes de pixels (image de 28x28 pixels)","6e86e49f":"## Librairies et fonctions utiles","84825816":"On affiche la premi\u00e8re ligne","4ecc99d5":"Fonction pour tracer les courbes d'apprentissage sur l'ensemble d'apprentissage et l'ensemble de validation :","fc54f200":"On affiche les 50 premiers \u00e9l\u00e9ments avec leurs labels","246fb744":"On s\u00e9pare les ensembles d'apprentissage et de test","5b8d42ae":"On peut maintenant afficher cette matrice","18c16f3b":"<img src=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\/blob\/master\/doc\/img\/fashion-mnist-sprite.png?raw=true\">","ec47df61":"Pour visualiser les images, on va convertir une ligne de 784 pixels en une matrice 28x28.\nIl faut en premier transformer le dataframe X en un tableau","e5879695":"On redimensionne toutes les lignes","b1e97266":"La premi\u00e8re image du dataset est un pull :","5fc05cfb":"# Exercice : Zalando Fashion MNIST","05a6dc7d":"## XGBoost","dbfc0a58":"## Zalando Fashion MNIST","4110d7ec":"Le dataset a \u00e9t\u00e9 constitu\u00e9 par Zalando :  \nhttps:\/\/github.com\/zalandoresearch\/fashion-mnist  \n  \nOn a un ensemble d'apprentissage de 60 000 images 28x28 pixels en niveaux de gris, et 10 classes de v\u00eatements : jupes, pantalons, baskets, ...","546c6220":"en niveaux de gris, sans graduation des axes, et avec le label comme titre","9141ce1a":"On applique la m\u00e9thode reshape pour convertir cette ligne de 784 \u00e9l\u00e9ments en une matrice 28x28","227ea30f":"et les caract\u00e9ristiques X","06fc5351":"**Appliquer des m\u00e9thodes de machine learning \u00e0 la reconnaissance des objets (for\u00eats al\u00e9atoires, xgboost, ...)**  "}}