{"cell_type":{"ce5a5942":"code","6c7927f9":"code","b0e838ad":"code","c1d11d2a":"code","f6667610":"code","cf569fe7":"code","92705b47":"code","2a937c1b":"code","a8f99a5d":"code","2e553b1a":"code","6e27a94a":"code","b3857cdc":"code","68cde664":"code","c6c38708":"code","ca7b9469":"code","31238cd4":"code","3071f113":"markdown","3f9ff7b7":"markdown","bf7b9c4a":"markdown","be0e2a80":"markdown"},"source":{"ce5a5942":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\n","6c7927f9":"data=pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')","b0e838ad":"data\n","c1d11d2a":"data.columns","f6667610":"mappings=list()\nencoder=LabelEncoder()\n\n\nfor column in range(len(data.columns)):\n    data[data.columns[column]] = encoder.fit_transform(data[data.columns[column]])\n    mappings_dict = {index: label for index, label in enumerate(encoder.classes_)}\n    mappings.append(mappings_dict)","cf569fe7":"mappings","92705b47":"y = data['class']\nX = data.drop('class', axis=1)","2a937c1b":"scaler = StandardScaler()\n\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","a8f99a5d":"X","2e553b1a":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)","6e27a94a":"log_model = LogisticRegression()\nsvm_model = SVC(C=1.0, kernel='rbf')\nnn_model = MLPClassifier(hidden_layer_sizes=(128, 128))","b3857cdc":"np.sum(y) \/ len(y)","68cde664":"log_model.fit(X_train, y_train)\nsvm_model.fit(X_train, y_train)\nnn_model.fit(X_train, y_train)","c6c38708":"print(f\"---Logistic Regression: {log_model.score(X_test, y_test)}\")\nprint(f\"Support Vector Machine: {svm_model.score(X_test, y_test)}\")\nprint(f\"--------Neural Network: {nn_model.score(X_test, y_test)}\")","ca7b9469":"X_test.shape","31238cd4":"corr = data.corr()\n\nsns.heatmap(corr)","3071f113":"**Visualization**","3f9ff7b7":"Model Selection","bf7b9c4a":"> **Preprocessing**","be0e2a80":"**Training**"}}