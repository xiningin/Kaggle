{"cell_type":{"bd1e8fa9":"code","e92fb6e2":"code","4ecf6da4":"code","6f1c4eac":"code","45a85024":"code","f7573325":"code","2e82863f":"code","cf7f37fb":"code","23f1f06b":"code","71242d63":"code","b94f6761":"code","377f6358":"code","be43c509":"code","c3903591":"code","4b2a3afa":"code","c5f5aa93":"code","04ea2179":"code","299d4e3d":"code","42e798e8":"code","f919c32d":"code","392db5ee":"code","5ea68885":"code","5cbb6d87":"code","599e879e":"code","7aa42613":"code","4b9b01c9":"code","b4cf3713":"code","0d0eff15":"code","dd0dc515":"code","927f1129":"code","1ebbd5c1":"markdown","aa3c70bb":"markdown","484dfbc3":"markdown","c2b680ef":"markdown","be215b17":"markdown"},"source":{"bd1e8fa9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nimport tensorflow as tf\nimport keras\n","e92fb6e2":"print('tf version:',tf.__version__,'\\n' ,'keras version:',keras.__version__,'\\n' ,'numpy version:',np.__version__)","4ecf6da4":"# load previous prediction results\npredicted_data = pd.read_hdf('..\/input\/105-sol-elec-gas-2-d-multivariate-parallel-multi-o\/predicted_data5.hdf5')","6f1c4eac":"\nsolarpower = pd.read_csv(\"..\/input\/solarpanelspower\/PV_Elec_Gas3.csv\",\n                         header = None,skiprows=1 ,names = ['date','cum_power','Elec_kW','Gas_mxm'], sep=',',\n                         usecols = [0,1,2,3],\n                     parse_dates={'dt' : ['date']}, infer_datetime_format=True,index_col='dt')\nprint(solarpower.head(2))\n","45a85024":"# make cum_power stationary\n\nsolarpower2 = solarpower.shift(periods=1, freq='D', axis=0)\nsolarpower['cum_power_shift'] = solarpower2.loc[:,'cum_power']\nsolarpower['day_power'] = solarpower['cum_power'].values - solarpower['cum_power_shift']\nsolarpower.iloc[0:1].day_power.value = 0.\nA = solarpower.dropna()\ndel A['cum_power'], A['cum_power_shift']\nsolarpower = A","f7573325":"solarpower.head(2), solarpower.tail(2)","2e82863f":"X_train = solarpower[:'2019-10-28']\nX_valid = solarpower['2019-10-29':'2020-10-27'] # is 365 days\nX_train.shape, X_valid.shape","cf7f37fb":"X_train.tail(2), X_valid.head(2)","23f1f06b":"# we devide the series into multiple input and output patterns\n\ndef my_split_window(series, window_in, window_out):\n    '''\n    the series is split into output sequences of length window_in and \n    output sequences of lenght window_out\n    returns arrays X, y\n    '''\n    X = []\n    y = []\n    n_steps = len(series) - window_in + 1\n    for step in range(n_steps):\n        if (step + window_in + window_out) > (len(series)):\n                    break\n        X_w = []\n        for i in range(window_in):\n            X_w.append(series[i+step])\n            y_w = []\n            for j in range(window_out):\n                n = i + j + step + 1\n\n                y_w.append(series[n])\n        X_w = np.array(X_w)\n        X.append(X_w)\n        y_w = np.array(y_w)\n        y.append(y_w)   \n    X = np.array(X)\n    y = np.array(y)\n    return X, y","71242d63":"# test my_split_window\n\nseries = [10,20,30,40,50,60,70,80,90]\nwindow_in = 3\nwindow_out = 2\nX_, y_ = my_split_window(series, window_in, window_out)\nX_, y_\n","b94f6761":"X_.shape, y_.shape","377f6358":"# apply my_split_window on daily solar power with a window of 365 days (we do not make account for leap years)\n\nwindow_in = 365\nwindow_out = 365\nX, y = my_split_window(X_train.day_power.values,  window_in, window_out)\n# print a sample\nfor i in range(3):\n    print(X[i][-2:], y[i][-2:])","be43c509":"X.shape","c3903591":"# vector output model:\n# model for univariate series input and prediction of  timestep vector\n# we have an input shape = (number of windows, window_in) \n#  and we have a window size of one year (365 days)\n# the output vector is of shape(number of window_out)\nn_features = 1 # it is a series\nwindow_in = 365\nwindow_out = 365\n# we have to reshape from (samples, timesteps) to (samples, timesteps, n_features)\nX = X.reshape((X.shape[0], X.shape[1], n_features ))\n\n# define model\ndef cnn_model(window_in, window_out, n_features):\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Conv1D(filters=32, kernel_size=2, activation='relu',\n                                input_shape=(window_in, n_features)))\n    model.add(tf.keras.layers.MaxPool1D(pool_size=2))\n    model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dense(50, activation='relu'))\n    model.add(tf.keras.layers.Dense(window_out))\n    return model\n    \nmodel = cnn_model(window_in, window_out, n_features)\n# compile the model:\nmodel.compile(optimizer='adam', loss='mae')\n\n# fit model\nhistory = model.fit(X, y, epochs=200, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","4b2a3afa":"# predicting next year based on X_valid to see if model works\n# the model expects an input of shape(1, window_in, n_features  )\nX_input = X_valid.day_power.ravel()\nX_input = X_input.reshape(1, window_in, n_features)\n\ny_hat = model.predict(X_input, verbose=0)","c5f5aa93":"plt.plot(y_hat[0], label='predicted_power')\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","04ea2179":"first_r2_score = r2_score(y_true, y_hat[0]) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat[0])\nprint('r2_score %.5f' % first_r2_score)\nprint('mae %.2f' % first_mae)","299d4e3d":"# 100 epochs : 0.42520212661926315","42e798e8":"def cumulate(series, start=0):\n    '''\n    start is the starting cumulative power, the series is the daily solar power\n    a list with daily cumulative power is the result\n    '''\n    cum = [start]\n    for i in range(len(series)):\n        sum_plus = cum[i] + series[i]\n        cum.append(sum_plus)\n    return cum","f919c32d":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat[0])\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","392db5ee":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.2f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","5ea68885":"# adding a feature:\nX_train = X_train.copy()\nX_valid = X_valid.copy()\nX_train['Gas_plus_Elek'] = X_train.Gas_mxm + X_train.Elec_kW\nX_valid['Gas_plus_Elek'] = X_valid.Gas_mxm + X_valid.Elec_kW","5cbb6d87":"# apply split window\n# apply my_split_window on daily solar power with a window of 365 days (we do not make account for leap years)\n\nwindow_in = 365\nwindow_out = 365\nX, y = my_split_window(X_train.day_power.values,  window_in, window_out)\n# print a sample\nfor i in range(3):\n    print(X[i][-2:], y[i][-2:])","599e879e":"# vector output model:\n# model for univariate series input and prediction of  timestep vector\n# we have an input shape = (number of windows, window_in) \n#  and we have a window size of one year (365 days)\n# the output vector is of shape(number of window_out)\nn_features = 1 # it is a series\nwindow_in = 365\nwindow_out = 365\n# we have to reshape from (samples, timesteps) to (samples, timesteps, n_features)\nX = X.reshape((X.shape[0], X.shape[1], n_features ))\n    \nmodel = cnn_model(window_in, window_out, n_features)\n# compile the model:\nmodel.compile(optimizer='adam', loss='mae')\n\n# fit model\nhistory = model.fit(X, y, epochs=200, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","7aa42613":"# predicting next year based on X_valid to see if model works\n# the model expects an input of shape(1, window_in, n_features  )\nX_input = X_train[-365:].day_power.ravel()\nX_input = X_input.reshape(1, window_in, n_features)\n\ny_hat = model.predict(X_input, verbose=0)","4b9b01c9":"plt.plot(y_hat[0], label='predicted_power')\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","b4cf3713":"first_r2_score = r2_score(y_true, y_hat[0]) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat[0])\nprint('r2_score %.5f' % first_r2_score)\nprint('mae %.2f' % first_mae)","0d0eff15":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat[0])\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","dd0dc515":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","927f1129":"predicted_data['106_4f_CNN_univariate_multi_ouput_200epochs'] = y_hat[0,:]\npredicted_data.to_hdf('predicted_data.hdf5',key='predicted_data', table='true',mode='a')","1ebbd5c1":"test 106 : test prediction solarpower with *univariate multi-step cnn* \n","aa3c70bb":"These notebooks are based on the excellent article by Jason Brownlee:\nHow to Develop Convolutional Neural Network Models for Time Series Forecasting.  \nhttps:\/\/machinelearningmastery.com\/how-to-develop-convolutional-neural-network-models-for-time-series-forecasting\/\n\nThese are the notebooks of the work on Daily Power Production of Solar Panels:\n101_Univariate_and_CNN_model_on_daily_solar_power\n102_Multivariate_multiple_input_series_CNN\n103_Sol_Elec_Gas_2_1B_Multivariate_mulitple_input\n104_Sol_Elec_Gas_2_C_Multivariate_parallel_series_CNN_Model\n105_Sol_Elec_Gas_2_D_Multivariate_parallel_multi_output_CNN_Model\n106_Sol_Elec_Gas_3_Univariate_Multi_Step_CNN_Model\n107_Sol_Elec_Gas_4_Multivariate_Multi_Step_CNN_Model\n108_Sol_Elec_Gas_1_Univariate_LSTM_and_CNN_Model","484dfbc3":"# but the cumulative power is actually much more intersting.#\n# It tels us what the the total expected solar power of that year will be. #","c2b680ef":"We want to use a one-dimensional Convolutional Neural Network (1D CNN). Just like in a CNN for images,  \na 1D CNN extracts features. It is very usefull in timeseries. More info is on the links:  \nhttps:\/\/missinglink.ai\/guides\/keras\/keras-conv1d-working-1d-convolutional-neural-networks-keras\/  \nhttps:\/\/machinelearningmastery.com\/cnn-models-for-human-activity-recognition-time-series-classification\/  \n","be215b17":"This notbook uses :  \ntf version: 2.0.0-beta1 ;\n keras version: 2.2.4 ; \n numpy version: 1.16.4 "}}