{"cell_type":{"2e2deeea":"code","f1198f42":"code","4adc5f0f":"code","c694594b":"code","94b9e27b":"code","0936917b":"code","6c77f280":"code","c64d7c32":"code","41edb6d9":"markdown","dfbe0b87":"markdown","edc5864f":"markdown","ce407220":"markdown","aa87e4ae":"markdown","060f8026":"markdown","2e3da540":"markdown","14612c7b":"markdown","475c6a83":"markdown"},"source":{"2e2deeea":"# For TF-IDF\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom nltk.corpus import stopwords ","f1198f42":"# For Word Count Visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","4adc5f0f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\/train\"))","c694594b":"# loading CSV data to check the Description content\ntrain_csv = pd.read_csv(\"..\/input\/train\/train.csv\")\ntrain_csv.head()","94b9e27b":"train_csv.sample(20).Description","0936917b":"train_csv.loc[[6440,10779]].Description","6c77f280":"print('There are ' + str(len(train_csv[train_csv.Description.isna()])) + ' records without description. They were removed!')\ntrain_csv.dropna(subset=['Description'], inplace=True)","c64d7c32":"def get_top_n_words(corpus, n=None):\n    \"\"\"\n    List the top n words in a vocabulary according to occurrence in a text corpus.\n    \"\"\"\n    vec = CountVectorizer(\n            strip_accents='unicode',\n            analyzer='word',\n            token_pattern=r'\\w{3,}', # vectorize 3-character words or more\n            stop_words='english',\n            ngram_range=(1, 2),\n            max_features=30000\n        ).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\nwords_count_by_adoption_speed = []\nfor adoption_speed in range(5):\n    descriptions_by_adoption_speed = train_csv[train_csv.AdoptionSpeed == adoption_speed].Description\n    top_words = get_top_n_words(descriptions_by_adoption_speed, 25)\n    words_count_by_adoption_speed.append(pd.DataFrame(top_words, columns = ['Word', 'Count'])) \n    words_count_by_adoption_speed[adoption_speed].plot.bar(x='Word',y='Count',title=\"Top 25 words X Adoption Speed \" + str(adoption_speed))","41edb6d9":"### Removing records without Description","dfbe0b87":"### Non-english text content\n\nSome descriptions are not in English language, so we will need to clean it for the analysis.","edc5864f":"# to be continued...\n\nWe can explore tecniques like stemming to improve\n","ce407220":"## About the data","aa87e4ae":"### Showing 20 random description samples","060f8026":"## Text data source\n\nWe have some text content into:\n* **Description** feature (train.csv): a short description about the pet.\n\n\n## Definitions\n\nThe following terms are used in this kernel:\n* Corpus: a corpus (plural corpora) or text corpus is a large and structured set of texts.\n* n-gram: a fragment of text consisting of 1 to n words, considering an n-gram as a single unit.\n* Unigram: a 1-gram (e.g. \u201ccuteness\u201d)\n* Bigram: a 2-gram (e.g. \u201cGuard dog\u201d).\n* Trigram is a 3-gram (e.g. \u201cDomestic Short Hair\u201d).\n* Term Frequency: summarizes how often a given word appears within a document.\n* Inverse Document Frequency: downscales words that appear a lot across documents.\n* TF-IDF: short for term frequency\u2013inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus. \n* Stop words: are some of the most common, short function words, such as the, is, at, which, and on. Usually we remove them from our text input.","2e3da540":"# Exploratory Data Analysis focused on text content\n\nIn this kernel I will explore the available text data for PetFinder.com competition.\n\nThe objective is to get any insights from available text content.","14612c7b":"# Words Count\n\nShowing the words count from Description content.","475c6a83":"## Import libraries\n\nSome libraries like sklearn to help us into the text analysis. "}}