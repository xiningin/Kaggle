{"cell_type":{"8e84fb9a":"code","dc12ff18":"code","c86f2a0b":"code","10d5d300":"code","6c1a5e1a":"code","a41dbbd9":"code","db69bc59":"code","5e5f1032":"code","eaaf1726":"code","779bacda":"code","bd520d84":"code","6ca5259d":"code","92d1c77f":"code","3e080b08":"code","faed5782":"code","ecf23cf7":"code","cb021cd9":"code","9cd540a5":"code","eae9d9a3":"code","ff118ea2":"code","d4b15a0e":"code","c559a204":"code","e18955b3":"code","ddc7a386":"code","0e2e78a0":"code","2d784fda":"code","c0351f3f":"code","ee9e0cbd":"code","0d74fc98":"markdown","0c9848ba":"markdown","c9f5f8e2":"markdown","cb40161d":"markdown","8319017c":"markdown","c56565c0":"markdown","21804d6a":"markdown","5c4373a3":"markdown","670c40b2":"markdown","5e2b1b5b":"markdown","6aa7fd24":"markdown","8c036b2b":"markdown","95a082fc":"markdown","94bccfca":"markdown","38dc92d4":"markdown","6af00fe1":"markdown","3b8a6a88":"markdown"},"source":{"8e84fb9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        pass\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc12ff18":"import numpy as np\nimport torch \nimport matplotlib.pylab as plt\nimport numpy as np\nimport pandas as pd\nimport time, os, random\nimport h5py\nfrom torch.utils.data import Dataset, DataLoader\nfrom keras.utils import to_categorical\nfrom torchvision import transforms\nprint(torch.__version__)\nimport nibabel as nib\nfrom torch.autograd import Variable\nimport torch\nfrom torch import nn\nfrom torch import optim\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms, models\nfrom torch.utils.data import Dataset, DataLoader\nimport torchvision\nfrom torchvision import transforms, utils\n#!pip install torchsummary --quiet\n!pip install torchsummaryX  --quiet\nfrom torchsummaryX import summary","c86f2a0b":"def func(df):\n    return os.path.join('\/kaggle\/input\/retinopathy-train-2015\/rescaled_train_896\/', df.image+\".png\")\n    \ndf = pd.read_csv('\/kaggle\/input\/retinopathy-train-2015\/trainLabels.csv')\ndf['image_path'] = df.apply(func, axis=1)\n#df.to_csv('\/kaggle\/working\/DR.csv',index=False)\ndf.head()","10d5d300":"for i in range(5):\n    print(\"label {} - Total Count {}\".format(i,df.level[df.level==i].count()))","6c1a5e1a":"import seaborn as sns\nsns.countplot(df['level'])","a41dbbd9":"df_final = pd.DataFrame()\nsample = 5500 # Provide your choice of number of samples per class\n\nfor i in range(5):\n    min_val = len(df[df.level==i])\n    temp_df = df[df.level==i].sample(min(sample,min_val))\n    df_final = df_final.append(temp_df, ignore_index = True)\n    print(\"Extracted {} samples from label\/level {}\".format(len(temp_df), i))\n    \nprint()\nprint(df_final.shape)\ndf_final.head()\n","db69bc59":"fold = ['train']*(int(len(df_final)*0.9)) + ['valid']*(len(df_final) - int(len(df_final)*0.9))\nrandom.shuffle(fold)\ndf_final['fold'] = fold\ndf_final.head()","5e5f1032":"import seaborn as sns\nsns.countplot(df_final['level'])","eaaf1726":"for i in range(5):\n    train = valid = 0\n    train = df_final[(df_final['level'] == i) & (df_final['fold'] ==\"train\")].shape[0]\n    valid = df_final[(df_final['level'] == i) & (df_final['fold'] ==\"valid\")].shape[0]\n    print(\"For level {}, total number of training samples is {} and testing samples is {}\".format(i, train, valid))\n    print()","779bacda":"df_final.to_csv('\/kaggle\/working\/DR.csv',index=False)","bd520d84":"NUM_SAMP=5\nfig = plt.figure(figsize=(25, 16))\nimport cv2\nIMG_SIZE = 512\nfor jj in range(5):\n    for i, (idx, row) in enumerate(df_final.sample(NUM_SAMP,random_state=123+jj).iterrows()):\n        ax = fig.add_subplot(5, NUM_SAMP, jj * NUM_SAMP + i + 1, xticks=[], yticks=[])\n        path=f\"..\/input\/retinopathy-train-2015\/rescaled_train_896\/{row['image']}.png\"\n        image = plt.imread(path)\n        plt.imshow(image)\n        ax.set_title('%d-%s' % (idx, row['image']) )","6ca5259d":"def load_ben_color(path, IMG_SIZE, sigmaX=10):\n    image = cv2.imread(path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = crop_image_from_gray(image)\n    image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))\n    image = cv2.addWeighted ( image,4, cv2.GaussianBlur( image , (0,0) , sigmaX) ,-4 ,128)\n    \n    image = image.astype(np.float32) #\n    image \/= 255. #\n    return image, IMG_SIZE\n\ndef crop_image_from_gray(img,tol=7):\n    if img.ndim ==2:\n        mask = img>tol\n        return img[np.ix_(mask.any(1),mask.any(0))]\n    elif img.ndim==3:\n        gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n        mask = gray_img>tol\n        \n        check_shape = img[:,:,0][np.ix_(mask.any(1),mask.any(0))].shape[0]\n        if (check_shape == 0): # image is too dark so that we crop out everything,\n            return img # return original image\n        else:\n            img1=img[:,:,0][np.ix_(mask.any(1),mask.any(0))]\n            img2=img[:,:,1][np.ix_(mask.any(1),mask.any(0))]\n            img3=img[:,:,2][np.ix_(mask.any(1),mask.any(0))]\n            img = np.stack([img1,img2,img3],axis=-1)\n        return img","92d1c77f":"path1 = \"..\/input\/retinopathy-train-2015\/rescaled_train_896\/10003_left.png\"\nimage = cv2.imread(path)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nprint(image.shape, type(image), image.dtype)\nimage = crop_image_from_gray(image)\nprint(image.shape, type(image), image.dtype)\nimage = cv2.resize(image, (512, 512))\nimage = cv2.addWeighted ( image,4, cv2.GaussianBlur( image , (0,0) , sigmaX=10) ,-4 ,128)\nimage = image.astype(np.float32)\nimage \/= 255.\nprint(image.shape, type(image), image.dtype)\nplt.imshow(image)\nplt.show()","3e080b08":"NUM_SAMP=5\nfig = plt.figure(figsize=(25, 16))\nimport cv2\nIMG_SIZE = 512\nfor jj in range(5):\n    for i, (idx, row) in enumerate(df_final.sample(NUM_SAMP,random_state=123+jj).iterrows()):\n        ax = fig.add_subplot(5, NUM_SAMP, jj * NUM_SAMP + i + 1, xticks=[], yticks=[])\n        path=f\"..\/input\/retinopathy-train-2015\/rescaled_train_896\/{row['image']}.png\"\n        image, _ = load_ben_color(path,IMG_SIZE,sigmaX=30)  \n        #image = np.array(image, dtype=\"float32\")\n        plt.imshow(image)\n        ax.set_title('%d-%s' % (idx, row['image']) )","faed5782":"classifier = True # input as False makes the model regressor.\n\n# Flag for feature extracting. When False, we finetune the whole model,\n#   when True we only update the reshaped layer params\nfeature_extract = False","ecf23cf7":"# Number of classes in the dataset\n# https:\/\/www.machinecurve.com\/index.php\/2020\/01\/30\/what-are-max-pooling-average-pooling-global-max-pooling-and-global-average-pooling\/\nif classifier:\n    num_classes = 5 # Classifier\n    criterion =  nn.CrossEntropyLoss() \nelse:\n    num_classes = 1 # Regressor\n    criterion =  nn.MSELoss() \n\n\n\ndef set_parameter_requires_grad(model, feature_extracting):\n    if feature_extracting:\n        for param in model.parameters():\n            param.requires_grad = False\n\ndef initialize_model(model_name, num_classes, feature_extract, use_pretrained=True):\n    # Initialize these variables which will be set in this if statement. Each of these\n    #   variables is model specific.\n    model_ft = None\n    input_size = 0\n\n    if model_name == \"resnet\":\n        \"\"\" Resnet18\n        \"\"\"\n        model_ft = models.resnet18(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.fc.in_features\n        model_ft.avgpool = nn.AdaptiveMaxPool2d(output_size=(1, 1))\n        model_ft.fc = nn.Linear(num_ftrs, num_classes)\n        input_size = 224\n\n    elif model_name == \"alexnet\":\n        \"\"\" Alexnet\n        \"\"\"\n        model_ft = models.alexnet(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.classifier[6].in_features\n        model_ft.classifier[6] = nn.Linear(num_ftrs,num_classes)\n        input_size = 224\n\n    elif model_name == \"vgg\":\n        \"\"\" VGG11_bn\n        \"\"\"\n        model_ft = models.vgg11_bn(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.classifier[6].in_features\n        model_ft.classifier[6] = nn.Linear(num_ftrs,num_classes)\n        input_size = 224\n\n    elif model_name == \"squeezenet\":\n        \"\"\" Squeezenet\n        \"\"\"\n        model_ft = models.squeezenet1_0(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        model_ft.classifier[1] = nn.Conv2d(512, num_classes, kernel_size=(1,1), stride=(1,1))\n        model_ft.num_classes = num_classes\n        input_size = 224\n\n    elif model_name == \"densenet\":\n        \"\"\" Densenet\n        \"\"\"\n        model_ft = models.densenet121(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        num_ftrs = model_ft.classifier.in_features\n        model_ft.classifier = nn.Linear(num_ftrs, num_classes)\n        input_size = 224\n\n    elif model_name == \"inception\":\n        \"\"\" Inception v3\n        Be careful, expects (299,299) sized images and has auxiliary output\n        \"\"\"\n        model_ft = models.inception_v3(pretrained=use_pretrained)\n        set_parameter_requires_grad(model_ft, feature_extract)\n        # Handle the auxilary net\n        num_ftrs = model_ft.AuxLogits.fc.in_features\n        model_ft.AuxLogits.fc = nn.Linear(num_ftrs, num_classes)\n        # Handle the primary net\n        num_ftrs = model_ft.fc.in_features\n        model_ft.fc = nn.Linear(num_ftrs,num_classes)\n        input_size = 299\n\n    else:\n        print(\"Invalid model name, exiting...\")\n        exit()\n\n    return model_ft, input_size","cb021cd9":"# Initialize the model for this run\nmodel_name = \"resnet\" # Models to choose [\"resnet\", \"alexnet\", \"vgg\", \"squeezenet\", \"densenet\", \"inception\"]\nmodel_ft, input_size = initialize_model(model_name, num_classes, feature_extract, use_pretrained=True)\n\n# Print the model we just instantiated\nprint(model_ft)\nprint()\nprint(\"Input image size format\",(input_size,input_size))","9cd540a5":"summary(model_ft, torch.zeros((1, 3, input_size, input_size)))","eae9d9a3":"# Flag for feature extracting. When False, we finetune the whole model,\n#   when True we only update the reshaped layer params\nfeature_extract = True\n\nBATCH_SIZE =  32 # Desired batch size\nSAMPLE = 0 # Increase the sample size if you want to train only on a specific number of samples, otherwise to train on entire datset, set sample = 0\nimg_size = input_size # This sets the input image size based on the model's you choose\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\nprint(\"Running on\",device)\nmodel_ft = model_ft.to(device)\n\nparams_to_update = model_ft.parameters()\nprint(\"Params to learn:\")\nif feature_extract:\n    params_to_update = []\n    for name,param in model_ft.named_parameters():\n        if param.requires_grad == True:\n            params_to_update.append(param)\n            print(\"\\t\",name)\nelse:\n    for name,param in model_ft.named_parameters():\n        if param.requires_grad == True:\n            print(\"\\t\",name)\n\n\nlearning_rate=0.01\n# optimizer = optim.Adam(params_to_update, lr=learning_rate)\noptimizer = optim.SGD(params_to_update, lr=learning_rate , momentum=0.9)\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, factor=0.85, patience=2, verbose=True)","ff118ea2":"class DRDataset(Dataset):\n    # Constructor\n    def __init__(self, csv_file, csv_dir, fold , img_size, transform=None, sample=0):\n        # Image directory\n        self.transform = transform\n        self.img_size = img_size\n        self.fold = fold\n        self.df = pd.read_csv(os.path.join(csv_dir , csv_file), index_col=0)\n        self.df = self.df[self.df['fold'] == fold]\n        self.sample = sample\n        if self.sample > 0:\n            self.df = self.df.sample(self.sample, random_state=42) # sample\n\n    # Get the length\n    def __len__(self):\n        return len(self.df)\n    \n    # Getter\n    def __getitem__(self, idx):\n        path = self.df.image_path[idx]\n        image, size = load_ben_color(path,sigmaX=30, IMG_SIZE=self.img_size)\n        assert size == self.img_size\n        image = np.array(image)\n        image = torch.from_numpy(image)\n        \n        label = np.array(df.level[idx])\n        label = label.astype(np.uint8)\n        label = torch.from_numpy(label)\n        return image, label","d4b15a0e":"transformed_datasets = {}\ntransformed_datasets['train'] = DRDataset(csv_file = \"DR.csv\",csv_dir = \"\/kaggle\/working\",  fold=\"train\" ,img_size = img_size, sample=SAMPLE)\ntransformed_datasets['valid'] = DRDataset(csv_file = \"DR.csv\", csv_dir= \"\/kaggle\/working\",  fold=\"valid\" ,img_size = img_size, sample=SAMPLE)\n \ndataloaders = {}\ndataloaders['train'] = torch.utils.data.DataLoader(transformed_datasets['train'],batch_size=BATCH_SIZE,shuffle=True,num_workers=8)\ndataloaders['valid'] = torch.utils.data.DataLoader(transformed_datasets['valid'],batch_size=BATCH_SIZE,shuffle=True,num_workers=8)  \nprint()\nprint(len(dataloaders['train']))\nprint(len(dataloaders['valid']))","c559a204":"for data in dataloaders['valid']:\n    images, labels = data\n    images = images.to('cpu')\n    print(labels, labels.shape)\n    break\nplt.figure(figsize=(20,10)) \nfor i in range(16):\n    plt.subplot(4,4, i+1)\n    plt.imshow(images[i,:,:,:])","e18955b3":"from IPython.display import HTML, display\n \nclass ProgressMonitor(object):\n    \"\"\"\n    Custom IPython progress bar for training\n    \"\"\"\n    \n    tmpl = \"\"\"\n        <p>Loss: {loss:0.4f}   {value} \/ {length}<\/p>\n        <progress value='{value}' max='{length}', style='width: 100%'>{value}<\/progress>\n    \"\"\"\n \n    def __init__(self, length):\n        self.length = length\n        self.count = 0\n        self.display = display(self.html(0, 0), display_id=True)\n        \n    def html(self, count, loss):\n        return HTML(self.tmpl.format(length=self.length, value=count, loss=loss))\n        \n    def update(self, count, loss):\n        self.count += count\n        self.display.update(self.html(self.count, loss))\n\ndef checkpoint_and_save(model, best_loss, epoch, optimizer, epoch_valid_loss):\n    print('saving')\n    print()\n    state = {'model': model,'best_loss': best_loss,'epoch': epoch,'rng_state': torch.get_rng_state(), 'optimizer': optimizer.state_dict(),}\n    torch.save(state, '\/kaggle\/working\/checkpoint-DR')\n    torch.save(model.state_dict(),'\/kaggle\/working\/checkpoint-statedict-DR')\n    \ndef train_new(model,criterion,optimizer,num_epochs,dataloaders,dataset_sizes,first_epoch=1):\n    since = time.time() \n    best_loss = 999999\n    best_epoch = -1\n    last_train_loss = -1\n    plot_train_loss = []\n    plot_valid_loss = []\n    plot_train_acc = []\n    plot_valid_acc = []\n \n \n    for epoch in range(first_epoch, first_epoch + num_epochs):\n        print()\n        print('Epoch', epoch)\n        running_loss = 0.0\n        valid_loss = 0.0\n        training_accuracy = 0\n        validation_accuracy = 0\n      \n        # train phase\n        model.train(True)\n \n      # create a progress bar\n        progress = ProgressMonitor(length=dataset_sizes[\"train\"])\n \n        for data in dataloaders[\"train\"]:\n            inputs, labels  = data # (Batch_size, width, height, channels)\n            batch_size = inputs.shape[0]\n            inputs = inputs.permute(0,3,1,2) # Batch_size, channels, width, height\n            inputs = inputs.to(device)\n            if classifier:\n                labels = labels.to(device,dtype=torch.long)\n            else:\n                labels = labels.to(device,dtype=torch.float).view(-1, 1)\n            inputs = Variable(inputs)\n            labels = Variable(labels)\n \n            # clear previous gradient computation\n            optimizer.zero_grad()\n            outputs = model(inputs) # batch, 2, 240, 240\n\n            loss = criterion(outputs, labels)\n \n            loss.backward()\n            optimizer.step()\n                      \n            running_loss += loss.data * batch_size\n            if classifier:\n                training_accuracy += (outputs.argmax(1) == labels).sum().item()\n            else:\n                training_accuracy += (outputs.round().int() == labels).sum().item()\n          # update progress bar\n            progress.update(batch_size, running_loss)\n \n        epoch_loss = running_loss \/ dataset_sizes[\"train\"]\n        \n        print('Training Accuracy is {} and Training loss {}'.format(training_accuracy \/ dataset_sizes[\"train\"],epoch_loss.item()))\n        plot_train_loss.append(epoch_loss)\n        plot_train_acc.append(training_accuracy \/ dataset_sizes[\"train\"])\n \n \n      # validation phase\n        model.eval()\n      # We don't need gradients for validation, so wrap in \n      # no_grad to save memory\n        with torch.no_grad():\n            for data in dataloaders[\"valid\"]:\n                inputs, labels  = data\n                batch_size = inputs.shape[0]\n                inputs = inputs.permute(0,3,1,2)\n                inputs = inputs.to(device)\n                if classifier:\n                    labels = labels.to(device,dtype=torch.long)\n                else:\n                    labels = labels.to(device,dtype=torch.float).view(-1, 1)\n                inputs = Variable(inputs)\n                labels = Variable(labels)\n                \n                outputs = model(inputs)\n \n            # calculate the loss\n                optimizer.zero_grad()\n                loss = criterion(outputs, labels)\n            \n            # update running loss value\n                valid_loss += loss.data * batch_size\n                if classifier:\n                    validation_accuracy += (outputs.argmax(1) == labels).sum().item()\n                else:\n                    validation_accuracy += (outputs.round().int() == labels).sum().item()\n                    \n \n        epoch_valid_loss = valid_loss \/ dataset_sizes[\"valid\"]\n        scheduler.step(epoch_valid_loss)\n        print('Validation Accuracy is {} and Validation loss {}'.format(validation_accuracy \/ dataset_sizes[\"valid\"],epoch_valid_loss.item()))\n        plot_valid_loss.append(epoch_valid_loss)\n        plot_valid_acc.append(validation_accuracy \/ dataset_sizes[\"valid\"])\n          \n        if epoch_valid_loss < best_loss:\n            best_loss = epoch_valid_loss\n            best_epoch = epoch\n            checkpoint_and_save(model, best_loss, epoch, optimizer, epoch_valid_loss.item()) \n        if ((epoch - best_epoch) >= 10):\n            print(\"no improvement in 10 epochs, break\")\n            break\n \n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed \/\/ 60, time_elapsed % 60))\n \n    return plot_train_loss, plot_valid_loss, plot_train_acc, plot_valid_acc, model","ddc7a386":"%%time\ndataset_sizes = {x: len(transformed_datasets[x]) for x in ['train', 'valid']}\nepochs = 16\nif __name__==\"__main__\":\n    train_losses, valid_losses, train_accuracy, valid_accuracy, model = train_new(model = model_ft ,criterion = criterion,optimizer = optimizer,\n                                                                                  num_epochs=epochs,dataloaders = dataloaders,\n                                                                                  dataset_sizes = dataset_sizes)","0e2e78a0":"# Plot Accuracy\nplt.title('Training and Validation Accuracy')\nplt.plot(train_accuracy)\nplt.plot(valid_accuracy)\nplt.legend(['Training_Accuracy','Validation_Accuracy'])","2d784fda":"plt.title('Training and Validation Loss')\nplt.plot(train_losses)\nplt.plot(valid_losses)\nplt.legend(['Training_loss','Validation_loss'])","c0351f3f":"plt.figure(figsize=(12,8))\nplt.title('Training & Validation Accuracy and Loss')\nplt.plot(train_accuracy)\nplt.plot(valid_accuracy)\nplt.plot(train_losses)\nplt.plot(valid_losses)\nplt.legend(['Training_Accuracy','Validation_Accuracy','Training_loss','Validation_loss'])","ee9e0cbd":"def tester(image, model):\n    img = torch.from_numpy(image).to(device)\n    img = img.unsqueeze(0)\n    img = img.permute(0,3,1,2) # (bs, width, height, channels) --> (bs, channels, width, height)\n    output = model(img)\n    if classifier:\n        return output.argmax(1).item()\n    else:\n        return output.round().item()\n    \nNUM_SAMP=10\nfig = plt.figure(figsize=(25, 16))\ncount = 0\nfor jj in range(5):\n    for i, (idx, row) in enumerate(df_final[df_final.fold==\"valid\"].sample(NUM_SAMP,random_state=123+jj).iterrows()):\n        ax = fig.add_subplot(5, NUM_SAMP, jj * NUM_SAMP + i + 1, xticks=[], yticks=[])\n        path=f\"..\/input\/retinopathy-train-2015\/rescaled_train_896\/{row['image']}.png\"\n        orig_label = int(row['level'])\n        image, _ = load_ben_color(path,img_size,sigmaX=30) #224,224,3\n        pred_label = tester(image, model)\n        if (orig_label == pred_label):\n            count +=1\n        plt.imshow(image)\n        ax.set_title('%d - %d' % (orig_label, pred_label))\nprint()\nprint(\"Out of {} samples, model predicted {} samples correctly\".format((NUM_SAMP*5), count))\nprint()","0d74fc98":"# Training Loop","0c9848ba":"# Hyper-Parameters","c9f5f8e2":"# Fact check on how many train and test split exists for each class.","cb40161d":"# Assigning folds (Train (90%) & Valid (10%))","8319017c":"# Model Selection","c56565c0":"# DATASET and DATALOADERS for pytorch","21804d6a":"# Training Process","5c4373a3":"# End of Exploratory analysis and dataframe preprocessing","670c40b2":"# Model's Accuracy","5e2b1b5b":"# From the images, we can see it's hard to extract features from these images directly, therefore we need to apply some preprocessing to make CNN extract features efficiently. \n# Here I am using ben's technique to do that.","6aa7fd24":"# Image preprocessing starts","8c036b2b":"# Inference","95a082fc":"# **Exploratory Analysis**","94bccfca":"# Pytorch Model Building","38dc92d4":"# Since the dataset is highly imbalanced, let's take say a maximum of 5000 samples from the available classses.","6af00fe1":"# We can build the model as a classifier (5 output classes) or regressor (1 output class). Here I am adding the provision, so that we can choose the model type and we use CrossEntropyLoss(classifier) or MSELoss(regressor)","3b8a6a88":"# Excerpts from the training samples"}}