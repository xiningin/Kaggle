{"cell_type":{"0bbdf5b4":"code","723ee551":"code","f1c4e4a2":"code","affc86b3":"code","76365f20":"code","83cc5192":"code","4bc7719b":"code","adf1cc66":"code","767fa941":"code","a5507653":"code","ed3885c1":"code","fd4d1c0f":"code","33cb0439":"code","c14d62e6":"code","e243e4f8":"code","179ef1b6":"code","115e7a9e":"code","abc1e764":"code","f03a7cdb":"code","f74fb1c0":"code","8dff5235":"code","59949573":"code","7deaea1b":"code","e17eb6d3":"code","8469cfcb":"code","6e2f948e":"code","c54aa918":"code","d90f3457":"code","07a75c67":"code","15aff32f":"code","19eb9a8b":"code","ee228f08":"code","8a731632":"code","2c614d09":"code","b7361c25":"code","412fab86":"code","aaaf7901":"code","212dd8b6":"code","466f9e09":"code","e2da416d":"markdown","81d765f7":"markdown","f443bdb2":"markdown","0b3689ff":"markdown","051bef07":"markdown","49ec3b2a":"markdown","de82c9c7":"markdown","a2dc2687":"markdown","ee083053":"markdown","2690b6a9":"markdown","9f58bcfc":"markdown","ba3a82db":"markdown","d14e975c":"markdown","39d13a23":"markdown","614b8bf7":"markdown","461c21bc":"markdown","460c0a33":"markdown","7ccaff6f":"markdown","95b522d2":"markdown","47d6ae7c":"markdown","7d59a038":"markdown","a6406460":"markdown","e865460b":"markdown"},"source":{"0bbdf5b4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","723ee551":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain.info()","f1c4e4a2":"train.head()","affc86b3":"train.describe()","76365f20":"train.isnull().sum()","83cc5192":"test.info()","4bc7719b":"# For Train\nmedian_1 = train['Age'].median()\ntrain['Age'].fillna(median_1,inplace = True)\n\n# For Test\nmedian_2 = test['Age'].median()\ntest['Age'].fillna(median_2,inplace = True)","adf1cc66":"a = train['Embarked'].value_counts()\nprint(\"Embarked Count:\\n\", a)\ntrain[train['Embarked'].isnull()]","767fa941":"train['Embarked'].fillna('S',inplace = True)","a5507653":"print(\"Count of Missing value for Fare Feature in Test Data: \",test['Fare'].isnull().sum())\ntest[test['Fare'].isnull()]","ed3885c1":"mean_fare = test[test['Pclass'] == 3]['Fare'].mean()\ntest['Fare'].fillna(mean_fare,inplace = True)","fd4d1c0f":"Id = test['PassengerId']\ntrain = train.drop(['PassengerId','Cabin','Ticket','Name'],axis = 1)\ntest = test.drop(['PassengerId','Cabin','Ticket','Name'],axis = 1)","33cb0439":"print(\"Check of Null Values for Train Dataset : \\n\",train.isnull().sum())","c14d62e6":"print(\"Check of Null Values for Test Dataset : \\n\",test.isnull().sum())","e243e4f8":"plt.figure(figsize=[14,10])\n\nplt.subplot(221)\ntrain['Survived'].value_counts().plot(kind = 'bar',color = 'c',legend = True)\nplt.xlabel(\"Not-Survived vs Survived\")\nplt.ylabel(\"Count\")\nplt.title(\"Distribution by Survival\")\n\nplt.subplot(222)\ntrain['Pclass'].value_counts().plot(kind = 'bar',color = 'c',legend = True)\nplt.xlabel(\"Classes\")\nplt.ylabel(\"Count\")\nplt.title(\"Distribution of People by class\")\n\nplt.subplot(223)\ntrain['Sex'].value_counts().plot(kind = 'bar',color = 'c',legend = True)\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Count\")\nplt.title(\"Distribution of People by Sex\")\n\nplt.subplot(224)\ntrain['Embarked'].value_counts().plot(kind = 'bar',color = 'c',legend = True)\nplt.xlabel(\"Port of Embarkation\")\nplt.ylabel(\"Count\")\nplt.title(\"Distribution of People by Embarked\")","179ef1b6":"grp_sex = train.groupby('Survived')['Sex'].value_counts()\ngrp_sex.unstack().plot(kind = 'bar')\nplt.xlabel(\"Not-Survived vs Survived\")\nplt.ylabel(\"Count\")\nplt.title(\"Survival Distribution by Sex\")","115e7a9e":"age_0_10 = train[train['Age'] < 10]['Age'].count()\nage_10_20 = train[(train['Age'] >= 10) & (train['Age'] < 20) ]['Age'].count()\nage_20_30 = train[(train['Age'] >= 20) & (train['Age'] < 30) ]['Age'].count()\nage_30_40 = train[(train['Age'] >= 30) & (train['Age'] < 40) ]['Age'].count()\nage_40_50 = train[(train['Age'] >= 40) & (train['Age'] < 50) ]['Age'].count()\nage_50_60 = train[(train['Age'] >= 50) & (train['Age'] < 60) ]['Age'].count()\nage_60_70 = train[(train['Age'] >= 60) & (train['Age'] < 70) ]['Age'].count()\nage_70_80 = train[(train['Age'] >= 70) & (train['Age'] <= 80) ]['Age'].count()\n\nAge_dist = [age_0_10,age_10_20,age_20_30,age_30_40,age_40_50,age_50_60,age_60_70,age_70_80]\nAge_graph = pd.DataFrame({'Age Range':['0-10','10-20','20-30','30-40','40-50','50-60','60-70','70-80'],'Count' : Age_dist})\n\nAge_graph.set_index('Age Range',inplace = True)\n\nAge_graph.plot(kind = 'bar',color = 'g')\n\n#plt.pie(Age_graph['Count'],labels = Age_graph['Age Range'])\nplt.xlabel(\"Age Range\")\nplt.ylabel(\"Count\")\nplt.title(\"Distribution by Age\")","abc1e764":"grp_class = train.groupby('Survived')['Pclass'].value_counts()\ngrp_class.unstack().plot(kind = 'bar')\nplt.xlabel(\"Not-Survived vs Survived\")\nplt.ylabel(\"Count\")\nplt.title(\"Survival Distribution by Class\")","f03a7cdb":"grp_emb = train.groupby('Survived')['Embarked'].value_counts()\ngrp_emb.unstack().plot(kind = 'bar',stacked = True)\nplt.xlabel(\"Not-Survived vs Survived\")\nplt.ylabel(\"Count\")\nplt.title(\"Survival Distribution by Embarked\")","f74fb1c0":"plt.figure(figsize=(12,9))\nsns.countplot(x=\"SibSp\", hue=\"Survived\", data=train)\nplt.title(\"Survival On Basis of Number of sibling\")\nplt.legend(loc='best')","8dff5235":"plt.figure(figsize=(12,9))\nsns.countplot(x=\"Parch\", hue=\"Survived\", data=train)\nplt.title(\"Survival On Basis of Number of Parent\")\nplt.legend()","59949573":"age_0_10 = train[train['Age'] < 10]\nage_10_20 = train[(train['Age'] >= 10) & (train['Age'] < 20) ]\nage_20_30 = train[(train['Age'] >= 20) & (train['Age'] < 30) ]\nage_30_40 = train[(train['Age'] >= 30) & (train['Age'] < 40) ]\nage_40_50 = train[(train['Age'] >= 40) & (train['Age'] < 50) ]\nage_50_60 = train[(train['Age'] >= 50) & (train['Age'] < 60) ]\nage_60_70 = train[(train['Age'] >= 60) & (train['Age'] < 70) ]\nage_70_80 = train[(train['Age'] >= 70) & (train['Age'] <= 80) ]\n\nx1 = age_0_10.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()\na1 = x1[x1['Survived'] == 0]['Count'].sum()\nb1 = x1[x1['Survived'] == 1]['Count'].sum()\n\nx2 = age_10_20.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()\na2 = x2[x2['Survived'] == 0]['Count'].sum()\nb2 = x2[x2['Survived'] == 1]['Count'].sum()\n\nx3 = age_20_30.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()\na3 = x3[x3['Survived'] == 0]['Count'].sum()\nb3 = x3[x3['Survived'] == 1]['Count'].sum()\n\nx4 = age_30_40.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()\na4 = x4[x4['Survived'] == 0]['Count'].sum()\nb4 = x4[x4['Survived'] == 1]['Count'].sum()\n\nx5 = age_40_50.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()\na5 = x5[x5['Survived'] == 0]['Count'].sum()\nb5 = x5[x5['Survived'] == 1]['Count'].sum()\n\nx6 = age_50_60.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()\na6 = x6[x6['Survived'] == 0]['Count'].sum()\nb6 = x6[x6['Survived'] == 1]['Count'].sum()\n\nx7 = age_60_70.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()\na7 = x7[x7['Survived'] == 0]['Count'].sum()\nb7 = x7[x7['Survived'] == 1]['Count'].sum()\n\nx8 = age_70_80.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()\na8 = x8[x8['Survived'] == 0]['Count'].sum()\nb8 = x8[x8['Survived'] == 1]['Count'].sum()\n\nAge_distribution = pd.DataFrame({'Age Range':['0-10','10-20','20-30','30-40','40-50','50-60','60-70','70-80'],\n                         'Not-Survived' : [a1,a2,a3,a4,a5,a6,a7,a8],'Survived' : [b1,b2,b3,b4,b5,b6,b7,b8]})\nAge_distribution.set_index('Age Range',inplace = True)\nAge_distribution.plot(kind = 'bar')\nplt.ylabel(\"Count\")\nplt.title(\"Survival Distribution by Age Ranges\")","7deaea1b":"#Mapping\nsex_map = {'male':0,'female': 1}\ntrain['Sex'] = train['Sex'].map(sex_map)\ntest['Sex'] = test['Sex'].map(sex_map)","e17eb6d3":"embarked_map = {'S':1,'C':2,'Q':3}\ntrain['Embarked'] = train['Embarked'].map(embarked_map)\ntest['Embarked'] = test['Embarked'].map(embarked_map)","8469cfcb":"#Check if all values are numerical or not\ntrain.head()\ntest.head()","6e2f948e":"X = train.drop(['Survived'],axis = 1)\ny = train['Survived']","c54aa918":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X, y, test_size=0.3)","d90f3457":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","07a75c67":"LR = LogisticRegression(solver = 'lbfgs')\nLR.fit(X_train,y_train)\ny_pred = LR.predict(X_test)\nLR_Score = accuracy_score(y_pred,y_test)\nprint(\"Accuracy Using Naive Bayes : \", LR_Score)","15aff32f":"gaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\ny_pred = gaussian.predict(X_test)\nGB_Score = accuracy_score(y_pred,y_test)\nprint(\"Accuracy Using Logistic Regression : \", GB_Score)","19eb9a8b":"DT = DecisionTreeClassifier()\nDT.fit(X_train, y_train)\ny_pred = DT.predict(X_test)\nDT_Score = accuracy_score(y_pred,y_test)\nprint(\"Accuracy Using Decision Tree : \",DT_Score)","ee228f08":"RF = RandomForestClassifier(n_estimators=100)\nRF.fit(X_train, y_train)\ny_pred = RF.predict(X_test)\nRF_Score = accuracy_score(y_pred,y_test)\nprint(\"Accuracy Using Random Forest : \",RF_Score)","8a731632":"'''\nfrom sklearn.model_selection import GridSearchCV\nparams = {'n_estimators' : [50,100,200,500,750],\n         'max_depth' : [3,4,5,7,10],\n         'colsample_bytree':[i\/10.0 for i in range(6,10)],\n         'learning_rate' : [0.01, 0.05,0.1,0.4,0.5,0.55],\n         'min_child_weight' : [1],\n         'gamma':[i\/10.0 for i in range(6,10)],\n         'subsample' : [0.8,0.9,1],\n         }\n\nG_search = GridSearchCV(estimator = XGBClassifier(), \n                       param_grid = params,\n                       scoring = 'accuracy')\n                       \nG_search.fit(X_train,y_train)\n\nG_search.best_params_\n'''","2c614d09":"xg_boost = XGBClassifier(colsample_bytree= 0.6,\n gamma= 0.7,\n learning_rate= 0.05,\n max_depth= 7,\n min_child_weight= 1,\n n_estimators= 100,\n subsample= 1)\n\nxg_boost.fit(X_train, y_train)\npred = xg_boost.predict(X_test)\nXG_score = accuracy_score(y_pred,y_test)","b7361c25":"#XG_score = G_search.best_score_\nprint(\"Accuracy Using XGBoost with parameters tuned : \", XG_score)","412fab86":"Results = pd.DataFrame({'Model': ['Logistic Regression','Gaussian Naive Bayes','Decision Tree','Random Forest','XGBoost'],\n                        'Accuracy Score' : [LR_Score,GB_Score,DT_Score,RF_Score,XG_score]})","aaaf7901":"Results","212dd8b6":"Final_Results = Results.sort_values(by = 'Accuracy Score', ascending=False)\nFinal_Results = Final_Results.set_index('Model')\nprint(Final_Results)","466f9e09":"Predictions = xg_boost.predict(test)\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : Id, 'Survived': Predictions })\noutput.to_csv('submission.csv', index=False)","e2da416d":"## Title : Titanic - Machine Learning from Disaster\n### Problem Statement : To create a model that predict which passengers survived the Titanic shipwreck.","81d765f7":"Observation : People from class 1 have higher chances of survival and People from class 3 have less chances of survival","f443bdb2":"Removing unnecessary variables :","0b3689ff":"### Load and Explore Dataset","051bef07":"One Record is missing for 'Fare' Feature in test dataset.The records missing is of class 3 Hence we fill missing value with mean value of that particular class i.e. class 3","49ec3b2a":"Import Necessary Libraries","de82c9c7":"2. Gaussian Naive Bayes Algorithm","a2dc2687":"Check for Null Values","ee083053":"Convert Features into Numerical Values","2690b6a9":"Observation : There are more number of people in the range 20-30","9f58bcfc":"As Most of the records embarked at port S, Filling missing values for two records with values S","ba3a82db":"Fill Null Values for Age Feature in train and test dataset","d14e975c":"### Implement Machine Learning Algorithms","39d13a23":"Split into Train and Test data   \nTrain = 70 % and Test = 30%","614b8bf7":"Observation :  Most of the people are embarked at port 'S'","461c21bc":"3. Decision Tree Algorithm","460c0a33":"### Data Visualization","7ccaff6f":"Observation : Female have higher chances of Survival","95b522d2":"Observations : \n    1. There are total 891 passengers \n    2. Age of passengers ranges from 0.4 to 80 and Average age is 30\n    3. 687 records are missing for 'Cabin' feature which contributes around 77%.Hence, we will remove that variable.\n    4. I think 'Age' is an important feature while predicting survival rate.Around 20% values are missing.Fill missing values by Median Age\n    5. 'Passenger_ID','Ticket','Name' does not contribute much for survival prediction.Hence removing these columns\n    6. For 'Embarked' Feature,Only 2 values are missing . Hence it should not be a problem.","47d6ae7c":"Fill Null Values for Embarked Feature in Train Dataset","7d59a038":"1. Logistic Regression Algorithm","a6406460":"4. Random Forest Algorithm","e865460b":"### Import Necessary Libraries"}}