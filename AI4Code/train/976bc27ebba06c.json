{"cell_type":{"8ae2dddf":"code","ee868bf3":"code","995d25d1":"code","15c67d01":"code","cc500797":"code","98fcfd8c":"code","37d4a13e":"code","5fe232ba":"code","8a0986ad":"code","2a4afd3f":"code","3aabdfea":"code","c42cd813":"code","ca4a53f6":"code","d02175e9":"code","8fe66371":"markdown","165aebdd":"markdown","8dc5080d":"markdown","10be2af7":"markdown","996bb4ee":"markdown"},"source":{"8ae2dddf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee868bf3":"import numpy as np\nimport itertools\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","995d25d1":"def split_data(data,split_size):\n    np.random.seed(0)\n    np.random.shuffle(data)\n    \n    split=int(len(data)*split_size)\n    train=data[:split]\n    test=data[split:]\n    \n    return train,test","15c67d01":"def generate_features_labels(data):\n    features=np.zeros((data.shape[0],13))\n    labels=data['class']\n    \n    features[:,0]=data['u-g']\n    features[:,1]=data['g-r']\n    features[:,2]=data['r-i']\n    features[:,3]=data['i-z']\n    features[:,4]=data['ecc']\n    features[:,5]=data['m4_u']\n    features[:,6]=data['m4_g']\n    features[:,7]=data['m4_r']\n    features[:,8]=data['m4_i']\n    features[:,9]=data['m4_z']\n    \n    features[:,10]=data['petroR50_u']\/data['petroR90_u']\n    features[:,11]=data['petroR50_r']\/data['petroR90_r']\n    features[:,12]=data['petroR50_z']\/data['petroR90_z']\n\n    \n    return features,labels\n    ","cc500797":"def decision_tree_predict_actual(data,split_size):\n    train_data,test_data=split_data(data,split_size)\n    train_features,train_labels=generate_features_labels(train_data)\n    test_features,test_labels=generate_features_labels(test_data)\n    \n    dtr=DecisionTreeClassifier()\n    dtr.fit(train_features,train_labels)\n    predictions=dtr.predict(test_features)\n    \n    return predictions,test_labels\n    \n    ","98fcfd8c":"def calculate_accuracy(pred,actual):\n    n=len(actual)\n    acc=sum([1 for i,j in zip(pred,actual) if i==j])\/n\n    return acc","37d4a13e":"def plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n \n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=0)\n    plt.yticks(tick_marks, classes)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, \"{}\".format(cm[i, j]),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True Class')\n    plt.xlabel('\\nPredicted Class')","5fe232ba":"data=np.load('\/kaggle\/input\/galaxy_catalogue.npy')\nsplit_size=0.7\npred_label,test_label=decision_tree_predict_actual(data,split_size)\nprint('some results of galaxy classifications')\nfor i in range(10):\n    print(\"{}.{},{}\".format(i,pred_label[i],test_label[i]))","8a0986ad":"model_acc=calculate_accuracy(pred_label,test_label)\nprint('Model Accuracy:',model_acc)","2a4afd3f":"class_labels = list(set(test_label))\nmodel_cm=confusion_matrix(y_pred=pred_label,y_true=test_label,labels=class_labels)\nprint(model_cm)\nplt.figure()\nplot_confusion_matrix(model_cm, classes=class_labels)\nplt.show()","3aabdfea":"def random_forest_actual(data,estimators):\n    features,labels=generate_features_labels(data)\n    rfc=RandomForestClassifier(n_estimators=estimators)\n    predictions=cross_val_predict(rfc,features,labels,cv=10)\n    return predictions,labels","c42cd813":"data=np.load('\/kaggle\/input\/galaxy_catalogue.npy')\nnp.random.seed(0)\nnp.random.shuffle(data)\nestimators=50  #number of trees\npred_label,test_label=random_forest_actual(data,estimators)\nprint('some results of galaxy classifications')\nfor i in range(10):\n    print(\"{}.{},{}\".format(i,pred_label[i],test_label[i]))","ca4a53f6":"model_acc=calculate_accuracy(pred_label,test_label)\nprint('Model Accuracy:',model_acc)","d02175e9":"class_labels = list(set(test_label))\nmodel_cm=confusion_matrix(y_pred=pred_label,y_true=test_label,labels=class_labels)\nprint(model_cm)\nplt.figure()\nplot_confusion_matrix(model_cm, classes=class_labels)\nplt.show()","8fe66371":"![image.png](attachment:image.png)","165aebdd":"# Random Forest Classifier","8dc5080d":"random forest improves accuracy of the model","10be2af7":"# Decision Tree Classifier","996bb4ee":"# Features:\n1.Color Indices <br>\n2.Eccentricity <br>\n3.Adaptive Moments(shape analysis)<br>\n4.Concentration --> http:\/\/spiff.rit.edu\/classes\/phys443\/lectures\/gal_1\/petro\/petro.html\n"}}