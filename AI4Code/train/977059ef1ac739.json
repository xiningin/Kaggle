{"cell_type":{"f72d88ae":"code","024f1326":"code","74c475c4":"code","f19a56e9":"code","c07adfc4":"code","6da94068":"code","08df99bf":"code","15bc64d8":"code","c7272938":"code","e1dfdd86":"code","dc8abaf8":"code","225a9309":"code","a3aad574":"code","f47ff181":"code","1c4ccb0a":"code","bfb787b7":"code","206af401":"code","b62aaf62":"code","66eadddd":"code","d85057d3":"code","e971d8bf":"code","3067cc1c":"code","596485f7":"markdown","75d57db4":"markdown","a35e653c":"markdown","4337d746":"markdown","1d8eeb69":"markdown","614e5b23":"markdown","9868228d":"markdown","2f3b2e10":"markdown","e80f9642":"markdown","c9e0c372":"markdown","fa76cde0":"markdown","c3ded318":"markdown"},"source":{"f72d88ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","024f1326":"POS_CASH_balance=pd.read_csv('..\/input\/home-credit-default-risk\/POS_CASH_balance.csv',encoding='cp932')\napplication_test=pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv',encoding='cp932')\napplication_train=pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv',encoding='cp932')\nbureau=pd.read_csv('..\/input\/home-credit-default-risk\/bureau.csv',encoding='cp932')\nbureau_balance=pd.read_csv('..\/input\/home-credit-default-risk\/bureau_balance.csv',encoding='cp932')\ncredit_card_balance=pd.read_csv('..\/input\/home-credit-default-risk\/credit_card_balance.csv',encoding='cp932')\ninstallments_payments=pd.read_csv('..\/input\/home-credit-default-risk\/installments_payments.csv',encoding='cp932')\nprevious_application=pd.read_csv('..\/input\/home-credit-default-risk\/previous_application.csv',encoding='cp932')\nsample_submission=pd.read_csv('..\/input\/home-credit-default-risk\/sample_submission.csv',encoding='cp932')","74c475c4":"df_list = [application_test, application_train, bureau, bureau_balance, POS_CASH_balance, credit_card_balance, previous_application, installments_payments, sample_submission]\n","f19a56e9":"application_train['DAYS_EMPLOYED_ANOM'] = application_train[\"DAYS_EMPLOYED\"] == 365243\napplication_train['DAYS_EMPLOYED'].replace({365243: np.nan}, inplace = True)","c07adfc4":"application_test['DAYS_EMPLOYED_ANOM'] = application_test[\"DAYS_EMPLOYED\"] == 365243\napplication_test[\"DAYS_EMPLOYED\"].replace({365243: np.nan}, inplace = True)","6da94068":"def missing_values_table(df):\n        # Total missing values\n        mis_val = df.isnull().sum()\n        \n        # Percentage of missing values\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # Make a table with the results\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # Rename the columns\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # Sort the table by percentage of missing descending\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # Print some summary information\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        \n        # Return the dataframe with missing information\n        return mis_val_table_ren_columns","08df99bf":"missing_values = missing_values_table(application_train)\nmissing_values.head(20)","15bc64d8":"delete_columns = ['COMMONAREA_MODE'\n, 'COMMONAREA_AVG'\n, 'COMMONAREA_MEDI'\n, 'NONLIVINGAPARTMENTS_MEDI'\n,'NONLIVINGAPARTMENTS_MODE'\n,'NONLIVINGAPARTMENTS_AVG'\n,'FONDKAPREMONT_MODE'\n,'LIVINGAPARTMENTS_MEDI'\n,'LIVINGAPARTMENTS_AVG'\n,'LIVINGAPARTMENTS_MODE'\n,'FLOORSMIN_AVG'\n,'FLOORSMIN_MEDI'\n,'FLOORSMIN_MODE'\n,'YEARS_BUILD_MEDI'\n,'YEARS_BUILD_MODE'\n,'YEARS_BUILD_AVG'\n,'OWN_CAR_AGE']\n\napplication_train.drop(delete_columns, axis=1, inplace=True)","c7272938":"# Find correlations with the target and sort\ncorrelations = application_train.corr()['TARGET'].sort_values()\n\n# Display correlations\nprint('Most Positive Correlations:\\n', correlations.tail(6))\nprint('\\nMost Negative Correlations:\\n', correlations.head(5))","e1dfdd86":"features=['DAYS_LAST_PHONE_CHANGE'\n,'REGION_RATING_CLIENT' \n,'REGION_RATING_CLIENT_W_CITY'\n,'DAYS_BIRTH'\n,'EXT_SOURCE_3'\n,'EXT_SOURCE_2'\n,'EXT_SOURCE_1'\n,'DAYS_EMPLOYED'\n,'FLOORSMAX_AVG'\n,'AMT_INCOME_TOTAL'\n,'NAME_HOUSING_TYPE']","dc8abaf8":"train = application_train[features]\ntest = application_test[features]\ndata = pd.concat([train, test], sort=False)","225a9309":"data.head()","a3aad574":"def get_df_name(df):\n    name =[x for x in globals() if globals()[x] is df][0]\n    return name","f47ff181":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle_count = 0\nfor col in data:\n    if data[col].dtype == 'object':\n        # If 2 or fewer unique categories\n        if len(list(data[col].unique())) <= 2:\n            # Train on the training data\n            le.fit(data[col])\n            # Transform both training and testing data\n            data[col] = le.transform(data[col])\n            \n            # Keep track of how many columns were label encoded\n            le_count += 1\n            \nprint('%d columns were label encoded.' % le_count)","1c4ccb0a":"data = pd.get_dummies(data)\n\nprint('Training Features shape: ', data.shape)","bfb787b7":"data['EXT_SOURCE_1'].fillna(data['EXT_SOURCE_1'].median(), inplace=True)\ndata['EXT_SOURCE_3'].fillna(data['EXT_SOURCE_3'].median(), inplace=True)\ndata['FLOORSMAX_AVG'].fillna(data['FLOORSMAX_AVG'].median(), inplace=True)","206af401":"train=data[:len(train)]\ntest=data[len(train):]\n\ny_train = application_train['TARGET']\nX_train = train\nX_test = test","b62aaf62":"X_train.head()","66eadddd":"X_test.head()","d85057d3":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nimport lightgbm as lgb\n\ny_preds = []\nmodels = []\n\n#\u521d\u671f\u5024\u304c0\u3067\u9577\u3055\u304c\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u5206\u306e\u9577\u3055\u306e\u914d\u5217\noof_train = np.zeros((len(X_train),))\n#\u30c7\u30fc\u30bf\u30925\u500b\u306b\u5206\u3051\u308b\u3002random_state\uff1d0\u306f\u521d\u671fseed\u3001shuffle=True\u306f\u8981\u7d20\u304c\u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b\ncv = KFold(n_splits=10, shuffle=True, random_state=0)\n\n\n\nparams = {\n    'objective': 'binary',\n    'max_bin': 300,\n    'learning_rate': 0.05,\n    'num_leaves': 40\n}\n#enumerate\u306ffold_id \u3092index\u756a\u53f7\u3068\u3057\u3066\u305d\u306e\u307e\u307e\u4f7f\u3048\u308b\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X_train)):\n#     print(train_index, valid_index)\n    # : \u306f\u5168\u3066\u306e\u30e9\u30d9\u30eb\u3001\u3064\u307e\u308a\u3001train_index\u884c\u306e\u5168\u3066\u306e\u5217\u30e9\u30d9\u30eb\u3092\u9078\u629e\u3057\u3066\u3044\u308b\n    X_tr = X_train.loc[train_index, :]\n    X_val = X_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n    \n    #\u3053\u3053\u304b\u3089\u6a5f\u68b0\u5b66\u7fd2\u306b\u901a\u3059\n    lgb_train = lgb.Dataset(X_tr, y_tr)\n    lgb_eval = lgb.Dataset(X_val, y_val, reference=lgb_train)\n\n    model = lgb.train(\n        params, lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        verbose_eval=10,\n        num_boost_round=1000,\n        early_stopping_rounds=10\n    )\n\n    oof_train[valid_index] = model.predict(X_val, num_iteration=model.best_iteration)\n    y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n    #\u8907\u6570\u56de\u3084\u3063\u3066\u308b\u304b\u3089\u5206\u5272\u3054\u3068\u306e\u30e2\u30c7\u30eb\u3068\u4e88\u6e2c\u7d50\u679c\u4fdd\u5b58\u3059\u308b\u3088\n    y_preds.append(y_pred)\n    models.append(model)","e971d8bf":"y_pred_oof = (oof_train > 0.5).astype(int)\nroc_auc_score(y_train, y_pred_oof)","3067cc1c":"sub = sample_submission\n\ny_pred = (y_pred > 0.5).astype(int)\n\nsub['TARGET'] = y_pred\nsub.to_csv(\"submission_lightgbm_optuna.csv\", index=False)\n\nsub.head()","596485f7":"\u3068\u308a\u3042\u3048\u305atrain\u30c7\u30fc\u30bf\u3068test\u30c7\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u307f\u308b","75d57db4":"test\u30c7\u30fc\u30bf\u306b\u3082\u540c\u3058\u3082\u306e\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001train\u3068\u540c\u69d8\u306e\u51e6\u7f6e\u3092\u3059\u308b","a35e653c":"\u4e0a\u8a18\u306e\u7279\u5fb4\u91cf\u306f\u3042\u308b\u7a0b\u5ea6\u76ee\u7684\u5909\u6570\u3068\u306e\u95a2\u4fc2\u304c\u307f\u3089\u308c\u308b\u305f\u3081\u3001\u63a1\u7528\u3059\u308b\n\n\u3042\u3068\u306f\u3001\u500b\u4eba\u7684\u306b\u95a2\u4fc2\u3042\u308a\u305d\u3046\u306a\u7279\u5fb4\u91cf\u3092\u8907\u6570\u9078\u3076\n\nAMT_INCOME_TOTAL(\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u53ce\u5165)\u3000NAME_HOUSING_TYPE(\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u4f4f\u5b85\u60c5\u5831)","4337d746":"\u4eca\u56de\u306f\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u307e\u3067\u3092\u6271\u3046","1d8eeb69":"\u6700\u5f8c\u306b\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u3066\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u7d42\u4e86","614e5b23":"\u6b20\u640d\u738760%\u4ee5\u4e0a\u306f\u8db3\u5207\u308a\n\n\u3069\u308c\u307b\u3069\u306e\u6b20\u640d\u7387\u3067\u8db3\u5207\u308a\u3059\u308b\u3079\u304d\u304b\u306f\u308f\u304b\u3089\u305a\n\n\u3082\u3063\u3068\u3044\u3044\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u3042\u3063\u305f\u306f\u305a","9868228d":"\u4eca\u56de\u4f7f\u3046\u7279\u5fb4\u91cf\u306e\u4e2d\u306b\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u304c\u3042\u308b\u306e\u3067\u3001\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3068\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u3046\n\n\u3053\u306e\u8fba\u3082\u5c11\u3057\u66d6\u6627\u3060\u304c\u3001\u4eca\u56de\u306f\u7279\u5fb4\u91cf\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u304c2\u500b\u4ee5\u4e0b\u306a\u3089\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3001\u305d\u308c\u4ee5\u4e0a\u306a\u3089\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3068\u3059\u308b(\u6c7a\u5b9a\u6728\u306b\u304a\u3044\u3066\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f\u6709\u52b9\u3089\u3057\u3044\u306e\u3067\u3001LightGBM\u3092\u6700\u521d\u304b\u3089\u4f7f\u3046\u4e88\u5b9a\u306a\u3089\u3001\u30e1\u30e2\u30ea\u3082\u7bc0\u7d04\u3067\u304d\u308b\u306e\u3067\u3001\u3059\u3079\u3066\u3092\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u3057\u3066\u3082\u3044\u3044\u304b\u3082\uff1f)","2f3b2e10":"\u4eca\u56de\u4f7f\u3046\u7279\u5fb4\u91cf\u306b\u306f\u6b20\u640d\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306e\u3067\u3001\u57cb\u3081\u3066\u3044\u304f\n\n\u9069\u5207\u306a\u30c7\u30fc\u30bf\u306e\u57cb\u3081\u65b9\u304c\u73fe\u5728\u66d6\u6627\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u6b20\u640d\u3057\u3066\u3044\u308b\u6570\u5024\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u305f","e80f9642":"\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306fpandas\u306eget_dummies\u306b\u3088\u308a\u53ef\u80fd","c9e0c372":"\u3053\u3053\u3067\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u7387\u3092\u78ba\u8a8d","fa76cde0":"\u4eca\u56de\u6271\u3046\u7570\u5e38\u5024\u306fDAYS_EMPLOYED\u306e\u307f(\u7570\u5e38\u5024\u306e\u57fa\u6e96\u308f\u304b\u3089\u305a\u30fb\u7570\u5e38\u5024\u3092\u898b\u3064\u3051\u308b\u65b9\u6cd5\u66d6\u6627)","c3ded318":"\u8db3\u5207\u308a\u3057\u305f\u7279\u5fb4\u91cf\u4ee5\u5916\u306e\u76f8\u95a2\u3092\u78ba\u8a8d\u3059\u308b\n\n\u76ee\u7684\u5909\u6570\u3068\u306e\u76f8\u95a2\u304c\u5f37\u3044\u7279\u5fb4\u91cf\u3092\u6319\u3052\u308b"}}