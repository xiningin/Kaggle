{"cell_type":{"640e464f":"code","ff3fa213":"code","c1c96124":"code","ee78ff66":"code","fb9b53ec":"code","e099abba":"code","a1253a5a":"code","44707797":"code","fb2045af":"code","4a78092e":"code","b0d5bbf5":"code","5455c175":"code","49d8ad2e":"code","5828fa7f":"code","bdda54af":"code","71729a28":"code","f2bd38b6":"code","6b140052":"code","462f0efe":"code","9b5aec27":"code","d0702a5a":"code","a84b3496":"code","6a7cd886":"code","a3dfe400":"code","88664a06":"code","9cc95f8a":"code","4771020f":"code","fef8fbca":"code","991aa636":"code","c1be5cc8":"code","28d71ab2":"code","05a45463":"code","dc2c0463":"code","a629fd36":"code","d9776719":"code","88cec098":"code","c4f462e3":"code","4d2be543":"code","d3fd98db":"code","d70020a7":"code","cc5536b6":"code","ae46cee3":"code","1fe19727":"markdown","de3aa02c":"markdown","0026987f":"markdown","7ae87072":"markdown","24d8fab3":"markdown","3d38c024":"markdown","e7769bff":"markdown","7796e9ab":"markdown","d76c08f0":"markdown","0e411ecc":"markdown","aa3abb8c":"markdown","73325a7c":"markdown","7c71b9a5":"markdown","5298b873":"markdown","ffb0919c":"markdown","80c84fec":"markdown","ac9c0ff6":"markdown","36ee931c":"markdown","e71e69f1":"markdown","4cf16ee0":"markdown","2f749b02":"markdown","a2e2a991":"markdown","36520a65":"markdown","bd30c236":"markdown"},"source":{"640e464f":"import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ff3fa213":"dataset_path = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/'\n\ntrain_df = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n\ntest_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))","c1c96124":"print(\"The shape of the dataset is {}.\\n\\n\".format(train_df.shape))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(test_df.shape))","ee78ff66":"train_df.head()","fb9b53ec":"train_df.info()","e099abba":"cols_to_rename = {'Temperature(\ufffdC)': 'temperature',\n                   'Humidity(%)': 'humidity',\n                  'Wind speed (m\/s)': 'windspeed',\n                  'Visibility (10m)': 'visibility',\n                  'Dew point temperature(\ufffdC)': 'dewpoint',\n                  'Solar Radiation (MJ\/m2)': 'solarradiation',\n                  'Rainfall(mm)': 'rainfall',\n                  'Snowfall (cm)': 'snowfall',\n                  'Functioning Day': 'functioningday'}\nfor df in [train_df, test_df]:\n    df.rename(columns= cols_to_rename, inplace=True)","a1253a5a":"train_df.info()","44707797":"train_df.duplicated().sum()","fb2045af":"for df in [train_df, test_df]:\n    df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)","4a78092e":"train_df.info()","b0d5bbf5":"train_df.head()","5455c175":"train_df.describe()","49d8ad2e":"#add month , day, year columns\nfor df in [train_df, test_df]:\n    df['month'] = df['Date'].dt.month\n    df['year'] = df['Date'].dt.year","5828fa7f":"train_df_copy = train_df.copy() #contains main columns without feature processing","bdda54af":"for df in [train_df, test_df]:\n    df['dayofweek'] = df['Date'].dt.dayofweek","71729a28":"for df in [train_df, test_df]:\n    df['weekend'] = (df['dayofweek'] >= 5 )*1","f2bd38b6":"train_df.head()","6b140052":"train_df.head()","462f0efe":"for df in [train_df, test_df]:\n    df['Holiday'] = df['Holiday'].map({'Holiday': 1, 'No Holiday':0})\n    df['functioningday'] = df['functioningday'].map({'Yes': 1, 'No':0})","9b5aec27":"print(train_df.Hour.describe())\n_ = plt.scatter(train_df['Hour'] ,train_df['y'])\n_ = plt.xlabel('Hours')\n_ = plt.ylabel('y Rental Prediction')\nplt.show()","d0702a5a":"# ranges bins\nbins = [0, 6, 12, 18, 24]\n#categorized hour\ncategorized_hour = pd.cut(train_df['Hour'], bins)\ntrain_df['categorized_hour'] = categorized_hour\n\n#test_df\ncategorized_hour = pd.cut(test_df['Hour'], bins)\ntest_df['categorized_hour'] = categorized_hour","a84b3496":"print(train_df.temperature.min())\nprint(train_df.temperature.max())\nplt.hist(train_df.temperature)\nplt.show()","6a7cd886":"# ranges bins\nbins = [-20, -10, 0, 10, 20, 30, 40]\n#categorized temperature\ncategorized_temp = pd.cut(train_df['temperature'], bins)\ntrain_df['categorized_temp'] = categorized_temp\ntrain_df.categorized_temp\n\n#test_df\ncategorized_temp = pd.cut(test_df['temperature'], bins)\ntest_df['categorized_temp'] = categorized_temp\ntest_df.categorized_temp","a3dfe400":"print(train_df.dewpoint.min())\nprint(train_df.dewpoint.max())\nplt.hist(train_df.dewpoint)\nplt.show()","88664a06":"# ranges bins\nbins = [-35, -20, -10, 0, 10, 20, 28]\n#categorized temperature\ncategorized_dewpoint = pd.cut(train_df['dewpoint'], bins)\ntrain_df['categorized_dewpoint'] = categorized_dewpoint\n\n#test_df\ncategorized_dewpoint = pd.cut(test_df['dewpoint'], bins)\ntest_df['categorized_dewpoint'] = categorized_dewpoint","9cc95f8a":"train_df.columns","4771020f":"train_df.info()","fef8fbca":"#transform to object to make getdummies\ntrain_df['year'] = train_df['year'].astype('object')\ntrain_df['month'] = train_df['month'].astype('object')\ntrain_df['dayofweek'] = train_df['dayofweek'].astype('object')\n\ncols_to_onehot = ['year','month','dayofweek','Seasons',\n                  'categorized_temp', 'categorized_dewpoint', 'categorized_hour']\n\nonehot_columns = pd.get_dummies(train_df[cols_to_onehot])\ntrain_df = pd.concat([train_df, onehot_columns], axis=1)\n# drop columns\ntrain_df.drop(cols_to_onehot, axis=1, inplace=True)\n\n#onhot encoding for test_df\ntest_df['year'] = test_df['year'].astype('object')\ntest_df['month'] = test_df['month'].astype('object')\ntest_df['dayofweek'] = test_df['dayofweek'].astype('object')\n\nonehot_columns = pd.get_dummies(test_df[cols_to_onehot])\ntest_df = pd.concat([test_df, onehot_columns], axis=1)\n# drop columns\ntest_df.drop(cols_to_onehot, axis=1, inplace=True)","991aa636":"train_df.info()","c1be5cc8":"test_df.info()","28d71ab2":"cor_mx=train_df.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(cor_mx,fmt='0.01f',annot=True)","05a45463":"cor_mx['y'].sort_values(ascending=False)","dc2c0463":"train_df.columns","a629fd36":"import math\nimport numpy as np\ndef RMSLE(predict, target):\n    total = 0 \n    for k in range(len(predict)):\n        LPred= np.log1p(predict[k]+1)\n        LTarg = np.log1p(target[k] + 1)\n        if not (math.isnan(LPred)) and  not (math.isnan(LTarg)): \n            total = total + ((LPred-LTarg) **2)\n        \n    total = total \/ len(predict)        \n    return np.sqrt(total)","d9776719":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import preprocessing \n#train_df.info()\n# d = 5\npoly =PolynomialFeatures(degree = 13, interaction_only=True, include_bias=False,)\nx=poly.fit_transform(train_df[[ 'Hour','temperature' ,'humidity','windspeed','visibility','dewpoint','solarradiation','rainfall','snowfall']])\n# quantile_transformer = preprocessing.PowerTransformer()\n# X_train_trans = quantile_transformer.fit_transform(x)\n# #test_poly=poly.transform(test_df.drop(columns=['ID','Date']))\n# x =np.concatenate([x,X_train_trans],axis=1)\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(x,train_df['y'], test_size=0.2, random_state=42)\n","88cec098":"train_df.values.shape","c4f462e3":"from sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom catboost import CatBoostRegressor\nL1_model = linear_model.Lasso(alpha =0.5,normalize= True ).fit(X_train, y_train)\n\n\nmask=L1_model.coef_ >0\nx=x[:,mask]\n#x = np.unique(x, axis=1)\nx =np.concatenate([x,train_df.drop(columns=['y', 'ID','Date']).values],axis=1)\n#x = np.unique(x, axis=1)\nprint(\"Training coef :\",x.shape)\n\n\n#test_poly=test_poly[:,mask]\nX_train, X_test, y_train, y_test = train_test_split(x,train_df['y'], test_size=0.2, random_state=42)\n\n\ncat  = CatBoostRegressor(objective='Poisson',iterations=3000, learning_rate=0.05,random_seed=45\n                        ,verbose=200,loss_function=\"Huber:delta=200\")\ncat.fit(X_train,y_train,eval_set=(X_test, y_test),use_best_model=True)\n\nscore = cat.score(X_train, y_train)  \nprint(\"Training score: \", score)\nvald_score = cat.score(X_test, y_test) \nprint(\"Validation score: \", vald_score)\n\nprint ('My RMSLE for vald: ' + str(RMSLE(cat.predict(X_test),np.array(y_test))) )\nprint ('My RMSLE for train: ' + str(RMSLE(cat.predict(X_train),np.array(y_train))) )\n\nprint(\"Training coef :\",len(L1_model.coef_))","4d2be543":"from sklearn.model_selection import train_test_split\n\nfull_train_df = train_df.copy() #to be used for trainig with all data\n\ntrain_df, val_df = train_test_split(train_df, test_size=0.2, random_state=42)\n\nX_train = train_df.drop(columns=['y', 'ID'])\ny_train = train_df['y']\n\nX_val = val_df.drop(columns=['y', 'ID'])\ny_val = val_df['y']\nX_train.info()","d3fd98db":"# import math\n# import numpy as np\n# def RMSLE(predict, target):\n#     total = 0 \n#     for k in range(len(predict)):\n#         LPred= np.log1p(predict[k]+1)\n#         LTarg = np.log1p(target[k] + 1)\n#         if not (math.isnan(LPred)) and  not (math.isnan(LTarg)): \n#             total = total + ((LPred-LTarg) **2)\n        \n#     total = total \/ len(predict)        \n#     return np.sqrt(total)","d70020a7":"from catboost import CatBoostRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\n\ncat  = CatBoostRegressor(objective='Poisson',iterations=3000, learning_rate=0.05, depth=7,random_seed=45\n                         ,verbose=200,loss_function=\"Huber:delta=200\")\n\n\ncat.fit(X_train,y_train,eval_set=(X_val, y_val),use_best_model=True)\n\nscore = cat.score(X_train, y_train)  \nprint(\"Training score: \", score)\nvald_score = cat.score(X_val, y_val) \nprint(\"Validation score: \", vald_score)\n\ny_predicted = cat.predict(X_val)\n\nprint ('My RMSLE for vald: ' + str(RMSLE(cat.predict(X_val),np.array(y_val))) )\nprint ('My RMSLE for train: ' + str(RMSLE(cat.predict(X_train),np.array(y_train))) )","cc5536b6":"X_test = test_df.copy()\n\n# You should update\/remove the next line once you change the features used for training\nX_test = X_test.drop(columns=['ID'])\n\ny_test_predicted = cat.predict(X_test)\n\ntest_df['y'] = y_test_predicted.astype(int)\n\ntest_df.head()","ae46cee3":"test_df[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)","1fe19727":"## check duplicates","de3aa02c":"# Exploratory Data Analysis","0026987f":"# Import The Libraries","7ae87072":"## RMSLE Root mean squared logarithmic error","24d8fab3":"# working with Hour column","3d38c024":"# Data Splitting","e7769bff":"# working with dewpoint","7796e9ab":"# Convert Date to datetime ","d76c08f0":"# CatBoost","0e411ecc":"## bining temperature into ranges","aa3abb8c":"# Correlation matrix","73325a7c":"## bining hours","7c71b9a5":"# working with temperature column","5298b873":"## transform functioning day, holiday to 0,1","ffb0919c":"# add weekend","80c84fec":"# Generate some new features","ac9c0ff6":"# Submission File Generation","36ee931c":"# add day of week","e71e69f1":"## bining dewpoint","4cf16ee0":"# working with Date column","2f749b02":"# Model Training","a2e2a991":"# Read Data","36520a65":"## onehot encoding year, month, dayofweek, Seasons, categorized_temp, categorized_dewpoint, categorized_hour","bd30c236":"## Rename columns"}}