{"cell_type":{"62f33bc2":"code","96792c7e":"code","d0ef87a2":"code","7d91135d":"code","3ceb8660":"code","da9f4ef9":"code","36518bee":"code","6c3b2c5f":"code","09971038":"markdown","f1741ebb":"markdown","dcff5b5d":"markdown","be122eb6":"markdown","0a484693":"markdown"},"source":{"62f33bc2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96792c7e":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn import datasets\nimport numpy as np\nfrom sklearn.model_selection import cross_validate","d0ef87a2":"iris = datasets.load_iris()\ndata = np.c_[iris.data, iris.target]\ncolumns = np.append(iris.feature_names, [\"Species\"])\niris_data = pd.DataFrame(data, columns=columns)\niris_data","7d91135d":"plt.title(\"IRIS Data Correlation\")\nsns.heatmap(iris_data.corr(), annot=True)","3ceb8660":"iris_data.columns = [\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\", \"species\"] \niris_data","da9f4ef9":"y = iris_data.pop('species')\nX = iris_data\n\nX","36518bee":"train_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.3, random_state = 1)\ntrain_X.shape","6c3b2c5f":"rfc = RandomForestClassifier(n_estimators=16)\nrfc.fit(train_X, train_y)\ncv_results = cross_validate(rfc, X, y, cv=5)\nprint(\"CV: \" + str(cv_results['test_score']))\nprint(\"CV mean Error: \" + str(cv_results['test_score'].sum() \/ 5))","09971038":"<h3>Split data<\/h3>","f1741ebb":"<h3>Load dataset<\/h3>","dcff5b5d":"<h3>Feature Correlation<\/h3>","be122eb6":"<h3>Imports<\/h3>","0a484693":"<h3>Create Random Forest Model<\/h3>"}}