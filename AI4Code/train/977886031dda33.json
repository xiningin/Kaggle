{"cell_type":{"29ff5e1d":"code","049d6217":"code","763ac971":"code","78708131":"code","497b4407":"code","3b9835d3":"code","c0a3d146":"code","bf59c251":"code","480fb946":"code","9dfecb3c":"code","edd329ef":"code","08402196":"code","3bb3f9b6":"code","8ba05561":"code","76399302":"code","f6c851c0":"code","4558009c":"code","7cdd7394":"code","8a284775":"code","bbc80d19":"code","b8839288":"code","b0e804dc":"code","730916e2":"code","5ddb46c0":"code","2220287b":"code","c72f0773":"code","25bd741c":"code","ab8fd16f":"code","5a62aa67":"code","1a07e779":"markdown","bf4a0f70":"markdown","4f035dea":"markdown","dcafe895":"markdown","2cf546d4":"markdown","1ad45881":"markdown","8db1291f":"markdown","3f3cba6a":"markdown","4c4b8e2a":"markdown","c66dfef1":"markdown","a46bd344":"markdown","9896a8cc":"markdown"},"source":{"29ff5e1d":"import numpy as np\nimport pandas as pd\nimport os\nfrom sklearn.linear_model import LogisticRegression as LR\nfrom sklearn.model_selection import train_test_split as tts, cross_val_score\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import *\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import *\nimport warnings\nwarnings.filterwarnings('ignore')\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","049d6217":"# Load the files\ntrain = pd.read_csv('..\/input\/Train.csv').dropna(how='all').fillna(0)\ntest = pd.read_csv('..\/input\/test.csv')\ny = train.iloc[:, 3:].dropna(how='all')\ndata = pd.concat([train.iloc[:,:3], test], axis=0)\n\nbasket = pd.read_csv('..\/input\/Product_sales_train_and_test.csv')\nsample = pd.read_csv('..\/input\/Sample_Submission.csv')","763ac971":"def view_counts(train):\n    for frame, group in train.groupby('Customer'):\n        print(frame, 'present ', len(group), 'times')\n        print(\"5% : \", (group['5'] == 1).sum())\n        print(\"12% : \", (group['12'] == 1).sum())\n        print(\"18% : \", (group['18'] == 1).sum())\n        print(\"28% : \", (group['28'] == 1).sum())","78708131":"baskets = []\nfor i in basket['Customer_Basket'].values:\n    i = i.strip('][')\n    l = pd.to_numeric(i.split(' '))\n    baskets.append(l)\n    \nbasket['Baskets'] = baskets\nbasket = basket.drop('Customer_Basket', axis=1)","497b4407":"tmp = pd.DataFrame()\ntmp['BillNo'] = data['BillNo']\ntmp = pd.merge(tmp, basket, how='inner', on='BillNo')\ncounts = []\nfor i, row in tmp.iterrows():\n    c = len(row['Baskets'])\n    counts.append(c)","3b9835d3":"X = pd.DataFrame(columns = ['BillNo'])\nX['BillNo'] = data['BillNo']\nX = pd.merge(X, basket, how='inner', on='BillNo')\nx = pd.DataFrame(columns=[str(i) for i in range(1001, 1810)])\nX = pd.concat([X, x], axis=1)","c0a3d146":"def get_products(X):\n    for i, row in X.iterrows():\n        for value in row['Baskets']:\n            if row[str(value)] == 1:\n                row[str(value)] += 1\n            else:\n                row[str(value)] = 1\n    return X","bf59c251":"X = get_products(X)\nX = X.fillna(0)\nX.drop('Baskets', axis=1, inplace=True)\nX['counts'] = counts","480fb946":"# Prepare y \nlabel=[]\ny.columns = ['5','12','18','28']\nfor i, row in y.iterrows():\n    if row['5'] == 1:\n        label.append(1)\n    elif row['12'] == 1:\n        label.append(2)\n    elif row['18'] == 1:\n        label.append(3)\n    elif row['28'] == 1:\n        label.append(4)\n    else:\n        label.append(0)\n        \ny['label'] = label\ny.drop(['5','12','18','28'], axis=1, inplace=True)\ny = pd.Series(y['label'].values)","9dfecb3c":"dates = pd.get_dummies(data['Date'])\ndates = dates.reset_index(drop=True)\ncust = pd.get_dummies(data['Customer'])\ncust = cust.reset_index(drop=True)\n#X_tmp = pd.concat([X, dates], axis=1)\nX_tmp = pd.concat([X, dates, cust], axis=1)","edd329ef":"X_train, X_test = X_tmp.iloc[:12200, 1:], X_tmp.iloc[12200:, 1:]","08402196":"def prob_to_labels(dec):\n    dec_pred = []\n    for i, row in dec.iterrows():\n        l = [0,0,0,0,0]\n        index = np.argmax(row)\n        l[index] = 1\n        dec_pred.append(l)\n    dec_pred = pd.DataFrame(dec_pred, columns = [1,2,3,4])\n    return dec_pred\n\ndef get_prob_scores(dec):\n    normalizedArray = []\n    for row in range(0, len(dec)):\n        l = []\n        Min =  min(dec[row])\n        Max = max(dec[row])\n        for element in dec[row]:\n            l.append(float(element-Min)\/float(Max- Min) )\n        normalizedArray.append(l)\n        \n    #Normalize to 1\n    newArray = []\n    for row in range(0, len(normalizedArray)):\n        li = [x \/ sum(normalizedArray[row]) for x in normalizedArray[row]]\n        newArray.append(li)\n        \n    sample_p = pd.DataFrame(newArray, columns=[1,2,3,4])\n    return sample_p","3bb3f9b6":"def cross_validate(clf, X_train, y, cv=3):\n    prob_scores, scores = 0, 0\n    for j in range(cv):\n        train, test, y_train, y_test = tts(X_train, y, test_size=0.2, \n                                           random_state=j)\n    \n    \n        clf.fit(train, y_train)\n        \n        ### Decision scores\n        #dec = clf.decision_function(test)\n        #dec = get_prob_scores(dec)\n        #dec_pred = prob_to_label(dec)\n        \n        # Verify\n        #y_dec = pd.get_dummies(y_test)\n        #print(\"\\n\", j, \" iteration\")\n        #print(\"log loss: \", log_loss(y_dec, dec))\n        #print(\"predicted log loss: \", log_loss(y_dec, dec_pred))\n        #a = accuracy_score(pd.get_dummies(y_test), dec_pred)\n        #print(\"Accuracy using prob scores: \", a)\n        \n        ### Straight up predictions\n        pred = clf.predict(test)\n        s = accuracy_score(y_test, pred)\n        #print(\"Normal predictions: \", s)\n        #prob_scores += a\n        scores += s\n        \n    #print(\"final prob scores mean: \", prob_scores\/cv)\n    return (scores\/cv)","8ba05561":"clf1 = LR()\n#clf2 = GradientBoostingClassifier()\nclf3 = RandomForestClassifier(n_estimators=100)\n#clf4 = SVC()","76399302":"train, test, y_train, y_test = tts(X_train, y, test_size=0.2, random_state=0)\nclf1.fit(train, y_train)\n#clf2.fit(train, y_train)\nclf3.fit(train, y_train)","f6c851c0":"print(\"Logistic Regression : \", clf1.score(test, y_test))\nprint(\"Random Forest: \", clf3.score(test, y_test))","4558009c":"\"\"\"clf = RandomForestClassifier()\ngrid_values = {'n_estimators': [100, 200]}\n\ngrid_clf_acc = GridSearchCV(clf, param_grid = grid_values)\ngrid_clf_acc.fit(train, y_train)\n\ngrid_pred = grid_clf_acc.predict(test)\nprint(\"Grid Search accuracy: \", accuracy_score(y_test, grid_pred))\n\nprint('Grid best parameter (max. accuracy): ', grid_clf_acc.best_params_)\"\"\"","7cdd7394":"print(\"Logistic Regression cross-validation: \", cross_validate(clf1, X_train, y, cv=3))","8a284775":"print(\"Random Forest cross-validation: \", cross_validate(clf3, X_train, y, cv=3))","bbc80d19":"clf3.fit(train, y_train)","b8839288":"pred_prob = clf3.predict_proba(test)[:, 1:]\npred = clf3.predict(test)\npred_dummy = pd.get_dummies(pred)\ny_test_dummy = pd.get_dummies(y_test).iloc[:, 1:]","b0e804dc":"if 1 not in pred_dummy.columns:\n    temp = pd.DataFrame(columns = [1])\n    pred_dummy = pd.concat([temp, pred_dummy], axis=1)\n    pred_dummy[1] = 0\npred_dummy","730916e2":"print(\"Probability log loss: \", log_loss(y_test_dummy, pred_prob))\nprint(\"Labels log loss: \", log_loss(y_test_dummy, pred_dummy))","5ddb46c0":"final_clf = RandomForestClassifier(n_estimators=100)\nfinal_clf.fit(X_train, y)","2220287b":"sample_pred_prob = pd.DataFrame(final_clf.predict_proba(X_test)[:, 1:], columns=[1,2,3,4])\nsample_pred = final_clf.predict(X_test)\nsample_pred = pd.get_dummies(sample_pred)\nif 1 not in sample_pred.columns:\n    sample_pred = pd.concat([pd.DataFrame(columns=[1]), sample_pred], axis=1)\n    sample_pred[1] = 0\nsample_pred.head()\n#sample_pred_prob.head()\n#sample_pred_prob.shape","c72f0773":"sample = pd.read_csv('..\/input\/Sample_Submission.csv')\nsample['Discount 5%'] = sample_pred_prob[1]\nsample['Discount 12%'] = sample_pred_prob[2]\nsample['Discount 18%'] = sample_pred_prob[3]\nsample['Discount 28%'] = sample_pred_prob[4]\nsample.to_csv('output_probabilities.csv', index=False)\n\nsample['Discount 5%'] = sample_pred[1]\nsample['Discount 12%'] = sample_pred[2]\nsample['Discount 18%'] = sample_pred[3]\nsample['Discount 28%'] = sample_pred[4]\nsample.to_csv('output_labels.csv', index=False)","25bd741c":"def get_predictions(per, sample_pred_prob):\n    actual = []\n    for i, row in sample_pred_prob.iterrows():\n        r = list(row.sort_values(ascending=False))\n        maxx = r[0]\n        second_max = r[1]\n        l = [0,0,0,0]\n        if maxx - second_max > per:\n            for j in range(1,5):\n                if row[j] == maxx:\n                    l[j-1] = 1\n                    break\n        actual.append(l)\n    return actual","ab8fd16f":"def check_result(one):\n    s = 0\n    for col in one.columns:\n        print(len(one) - one[col].value_counts()[0])\n        s += len(one) - one[col].value_counts()[0]\n    print(\"Count: \", s, '\/', len(one))","5a62aa67":"for i in [50, 98]:\n    one = pd.DataFrame(get_predictions(i\/100.00, sample_pred_prob), columns=[1,2,3,4])\n    sample['Discount 5%'] = one[1]\n    sample['Discount 12%'] = one[2]\n    sample['Discount 18%'] = one[3]\n    sample['Discount 28%'] = one[4]\n    filename = 'output_' + str(i) + '.csv'\n    sample.to_csv(filename, index=False)","1a07e779":"**Obtain counts of items bought in every bill**","bf4a0f70":"**Own cross-validation function**","4f035dea":"**Grid Search tuning**\n","dcafe895":"**Prepare y to contain the labels in the correct format**","2cf546d4":"We have submitted 4 output files of predictions, that have the output probabilities of the corresponding classes as well as the predicted labels.","1ad45881":"**Output files**","8db1291f":"**Convert the dates and customer names into categorical**","3f3cba6a":"**Loading the files**","4c4b8e2a":"**Predictions on the given Test data**","c66dfef1":"**Predicting on given Validation Data**","a46bd344":"**Creating a probability function and convert probabilities to labels**","9896a8cc":"**Creating the customer baskets**"}}