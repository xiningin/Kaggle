{"cell_type":{"9b2e553c":"code","a4c4d11b":"code","5d8f5b98":"code","bcc14ccb":"code","c9b1948a":"code","66a55fa7":"code","adabf75e":"code","4f56d2b7":"code","3788d278":"code","cf2c8d09":"code","02df26f3":"code","7d5c2a0b":"code","576c59ee":"code","f46fe772":"code","6eafc114":"code","324edf71":"code","4a96c012":"code","df1f5feb":"code","db431141":"code","25eb9fb3":"code","4595e70f":"code","f6054681":"code","862e7ca6":"code","127d45cd":"code","3a89ff1e":"markdown","195a49c1":"markdown","963d0aae":"markdown","cdef67e0":"markdown","2c77c509":"markdown","de68146e":"markdown","8402a4d8":"markdown","1bc1e54b":"markdown","a5f35611":"markdown","ea4c5b58":"markdown","7f48e9bd":"markdown"},"source":{"9b2e553c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4c4d11b":"%matplotlib inline\nimport torchvision\nimport torchvision.datasets as dset\nimport torchvision.transforms as transforms\nfrom torch.utils.data import DataLoader,Dataset\nimport matplotlib.pyplot as plt\nimport torchvision.utils\nimport random\nfrom PIL import Image\nimport torch\nfrom torch.autograd import Variable\nimport torch.nn as nn\nfrom torch import optim\nimport torch.nn.functional as F","5d8f5b98":"train_dir=\"\/kaggle\/input\/signature-verification-dataset\/sign_data\/train\"\ntrain_csv=\"\/kaggle\/input\/signature-verification-dataset\/sign_data\/train_data.csv\"\ntest_csv=\"\/kaggle\/input\/signature-verification-dataset\/sign_data\/test_data.csv\"\ntest_dir=\"\/kaggle\/input\/signature-verification-dataset\/sign_data\/test\"","bcc14ccb":"df_train=pd.read_csv(train_csv)\ndf_train.sample(10)","c9b1948a":"df_test=pd.read_csv(test_csv)\ndf_test.sample(10)","66a55fa7":"df_train.shape","adabf75e":"df_test.shape","4f56d2b7":"df_train[4:5]","3788d278":"image1_path=os.path.join(train_dir,df_train.iat[4,0])\nimage1_path","cf2c8d09":"class Dataset(Dataset):\n    #default constuctor for assigning values\n    def __init__(self,train_dir=None,train_csv=None,transform=None):\n        self.train_dir=train_dir\n        self.train_data=pd.read_csv(train_csv)\n        self.train_data.columns=['image1','image2','class']\n        self.transform=transform\n        \n    def __getitem__(self,idx): ## __getitem__ returns a sample data given index, idx=index\n        \n        img1_path=os.path.join(self.train_dir,self.train_data.iat[idx,0])\n        img2_path=os.path.join(self.train_dir,self.train_data.iat[idx,1])\n        \n        img1=Image.open(img1_path)\n        img2=Image.open(img2_path)\n        \n        img1=img1.convert('L') #L mode image, that means it is a single channel image - normally interpreted as greyscale.\n        img2=img2.convert('L')\n        \n        img1=self.transform(img1)\n        img2=self.transform(img2)\n        \n        return img1, img2, torch.from_numpy(np.array([int(self.train_data.iat[idx,2])],dtype=np.float32))\n    \n    \n    def __len__(self): ## __len__ returns the size of the dataset..\n        return len(self.train_data)","02df26f3":"dataset = Dataset(train_dir,train_csv,transform=transforms.Compose([transforms.Resize((100,100)),transforms.ToTensor()]))","7d5c2a0b":"dataset","576c59ee":"class SiameseNetwork(nn.Module):\n    \n    def __init__(self):\n        super(SiameseNetwork, self).__init__()\n        \n        \n        self.conv1=nn.Conv2d(1,50,kernel_size=5)\n        self.pool1 = nn.MaxPool2d(kernel_size = 2, stride = 2, padding = 0)\n         # L1 ImgIn shape=(?, 28, 28, 1)      # (n-f+2*p\/s)+1\n        #    Conv     -> (?, 24, 24, 50)\n        #    Pool     -> (?, 12, 12, 50)\n        \n        \n        self.conv2 = nn.Conv2d(50,60, kernel_size = 5)\n        self.pool2 = nn.MaxPool2d(kernel_size = 2, stride = 2, padding = 0)\n        # L2 ImgIn shape=(?, 12, 12, 50)\n        #    Conv      ->(?, 8, 8, 60)\n        #    Pool      ->(?, 4, 4, 60)\n        \n        \n        self.conv3 = nn.Conv2d(60, 80,  kernel_size = 3)\n        # L3 ImgIn shape=(?, 4, 4, 60)\n        #    Conv      ->(?, 2, 2, 80)\n       \n        \n        \n        self.batch_norm1 = nn.BatchNorm2d(50)\n        self.batch_norm2 = nn.BatchNorm2d(60)\n        \n#         self.dropout1 = nn.Dropout2d()\n        \n        # L4 FC 2*2*80 inputs -> 250 outputs\n        self.fc1 = nn.Linear(32000, 128) \n        self.fc2 = nn.Linear(128, 2)\n        \n      \n    \n    \n    def forward1(self,x):\n        x=self.conv1(x)\n        x = self.batch_norm1(x)\n        x=F.relu(x)\n        x=self.pool1(x)\n        \n        x=self.conv2(x)\n        x = self.batch_norm2(x)\n        x=F.relu(x)\n        x=self.pool2(x)\n        \n        x=self.conv3(x)\n        x=F.relu(x)\n#         print(x.size())\n        x = x.view(x.size()[0], -1)\n#         print('Output2')\n#         print(x.size()) #32000 thats why the input of fully connected layer is 32000\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        \n        return x\n    \n\n    def forward(self, input1, input2):\n        # forward pass of input 1\n        output1 = self.forward1(input1)\n        # forward pass of input 2\n        output2 = self.forward1(input2)\n        \n        return output1, output2\n","f46fe772":"class ContrastiveLoss(torch.nn.Module):\n    \n    def __init__(self, margin=1.5):\n        super(ContrastiveLoss, self).__init__()\n        self.margin = margin\n\n    def forward(self, output1, output2, label):\n        euclidean_distance = F.pairwise_distance(output1, output2)\n        loss_contrastive = torch.mean((1-label) * torch.pow(euclidean_distance, 2) +\n                                      (label) * torch.pow(torch.clamp(self.margin - euclidean_distance, min=0.0), 2))\n\n\n        return loss_contrastive\n    ","6eafc114":"train_dataloader = DataLoader(dataset,\n                        shuffle=True,\n                        num_workers=8,\n                        batch_size=32)","324edf71":"train_dataloader","4a96c012":"if torch.cuda.is_available():\n    print('Yes')","df1f5feb":"net = SiameseNetwork().cuda()\n\ncriterion = ContrastiveLoss()               \noptimizer = torch.optim.SGD(net.parameters(), lr = 3e-4) \n\noptimizer = optim.RMSprop(net.parameters(), lr=1e-4, alpha=0.99)","db431141":"def train():\n    loss= [] \n\n    for epoch in range(1,10):\n        for i, data in enumerate(train_dataloader,0):\n            img0, img1 , label = data\n            img0, img1 , label = img0.cuda(), img1.cuda() , label.cuda()\n            optimizer.zero_grad()\n            output1,output2 = net(img0,img1)\n            loss_contrastive = criterion(output1,output2,label)\n            loss_contrastive.backward()\n            optimizer.step()\n            \n        print(\"Epoch {}\\n Current loss {}\\n\".format(epoch,loss_contrastive.item()))\n\n        loss.append(loss_contrastive.item())\n        \n    return net","25eb9fb3":"model = train()\ntorch.save(model.state_dict(), \"model.pt\")\nprint(\"Model Saved Successfully\")","4595e70f":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel = SiameseNetwork().to(device)\nmodel.load_state_dict(torch.load(\"model.pt\"))\n","f6054681":"test_dataset = Dataset(test_dir,test_csv,transform=transforms.Compose([transforms.Resize((100,100)),transforms.ToTensor()]))\n\ntest_dataloader = DataLoader(test_dataset,num_workers=8,batch_size=1,shuffle=True)","862e7ca6":"def imshow(img,text=None,should_save=False):\n    npimg = img.numpy()\n    plt.axis(\"off\")\n    if text:\n        plt.text(75, 8, text, style='italic',fontweight='bold',\n            bbox={'facecolor':'white', 'alpha':0.8, 'pad':10})\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.show()    ","127d45cd":"count=0\nfor i, data in enumerate(test_dataloader,0): \n  x0, x1 , label = data\n  concat = torch.cat((x0,x1),0)\n  output1,output2 = model(x0.to(device),x1.to(device))\n\n  eucledian_distance = F.pairwise_distance(output1, output2)\n    \n  if label==torch.FloatTensor([[0]]):\n    label=\"Original Pair Of Signature\"\n  else:\n    label=\"Forged Pair Of Signature\"\n    \n  imshow(torchvision.utils.make_grid(concat))\n  print(\"Predicted Eucledian Distance:-\",eucledian_distance.item())\n  print(\"Actual Label:-\",label)\n  count=count+1\n  if count ==10:\n     break","3a89ff1e":"# All imports are defined here:-","195a49c1":"# Making Custom Pytorch Siamese Dataset:-","963d0aae":"# Defining Training Directories and CSV's:-","cdef67e0":"# Constrastive Loss Function:-","2c77c509":"# Mostly our model is predicting the distances quite well.","de68146e":"# Siamese Network:-","8402a4d8":"the ____len____ function which returns the size of the dataset, and\n\nthe ____getitem____ function which returns a sample from the dataset given an index.","1bc1e54b":"# Returns Image1, Image2 and the class label(whether 0 or 1).","a5f35611":"# Here we are seeing that 1 denotes for forged pair and 0 denotes for geniune pair of signatures..","ea4c5b58":"# Testing the model by comparing the model's distance prediction between two pairs of Signature:-","7f48e9bd":"Contrastive loss:-\nContrastive loss is widely-used in unsupervised and self-supervised learning. Originally developed by Hadsell et al. in 2016 from Yann LeCun\u2019s group, this loss function operates on pairs of samples instead of individual samples. It defines a binary indicator Y for each pair of samples stating whether they should be deemed similar, and a learnable distance function D_W(x_1, x_2) between a pair of samples x_1, x_2, parameterized by the weights W in the neural network. \n\n, where m>0 is a margin. The margin defines a radius around the embedding space of a sample so that dissimilar pairs of samples only contribute to the contrastive loss function if the distance D_W is within the margin.\n\n\nIntuitively, this loss function encourages the neural network to learn a embedding to place samples with the same labels close to each other, while distancing the samples with different labels in the embedding space."}}