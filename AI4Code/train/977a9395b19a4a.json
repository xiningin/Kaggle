{"cell_type":{"b7347364":"code","31c6d443":"code","022ed5e2":"code","367a4f05":"code","9e7176b0":"code","ba91647c":"code","56556b3f":"code","bfd4e439":"code","759758e6":"code","d1823031":"code","5a776b28":"code","157cc330":"code","ef50b1e0":"code","22ad67e0":"code","eef6c91f":"code","eacc44b8":"code","be5abdff":"code","da1a14f2":"code","e50c0b21":"code","9710b1fa":"code","3b6ff480":"code","c2909b61":"code","35fd4674":"code","90db9176":"code","7a21a2b3":"code","012f8c70":"code","928f6561":"code","3749f5cf":"code","699cd5de":"code","60cb6a96":"code","6d688f50":"code","95ac5042":"code","9eae7050":"code","c59a292d":"code","7b92bdde":"code","ff8c4fe8":"code","9375646c":"code","c435b1cc":"code","af9927e7":"code","4c98d22f":"code","f8406573":"code","53b590d5":"code","231353ad":"code","36f2986b":"code","187f8daa":"code","6836d743":"code","393a2364":"code","398fca96":"code","2e98aeb2":"code","3c3beaa5":"code","f86fda87":"code","985112b0":"code","52aa9150":"code","9aa2105e":"code","e18152c2":"code","11eafa83":"code","893ce3e9":"markdown","d472818b":"markdown","f492222c":"markdown","3f8aaa12":"markdown","fa9183a5":"markdown","847bd3e8":"markdown","eff9daa6":"markdown","376161c3":"markdown","bbf0addc":"markdown","4daab0e2":"markdown","abe948ef":"markdown","9641496f":"markdown","59f3eb13":"markdown","655beb0e":"markdown","fcba1ffa":"markdown","7a9a41c2":"markdown","675e0d91":"markdown","63ba9da8":"markdown","d765257a":"markdown","6d43c3dc":"markdown","ce03ae46":"markdown","2160b29d":"markdown","1d25c974":"markdown","4fba9039":"markdown","bd6c2084":"markdown","049ce3bb":"markdown","a3cfea93":"markdown","eced33dd":"markdown","68de6478":"markdown","83b78c91":"markdown","1d430b9f":"markdown","1f7b3ec0":"markdown","bf4ccfa3":"markdown","6bb1ef8f":"markdown","6d4609a9":"markdown","37bc87de":"markdown","2460b2d1":"markdown","3e151fe2":"markdown","3604da78":"markdown","bfe1f08b":"markdown","2f216c4d":"markdown","824ec0a3":"markdown","5420614b":"markdown","94f58d8a":"markdown","cde13fa7":"markdown","16cc2b83":"markdown","b6673e32":"markdown","41e5d69c":"markdown","17c5809c":"markdown","cae8b5a4":"markdown","380eed99":"markdown","ae369e9d":"markdown","5688e468":"markdown","29c39e6e":"markdown","c6aa1ed8":"markdown","0b6b02e3":"markdown","4349ebe7":"markdown","d4e671ef":"markdown","5827b953":"markdown","ff76f10a":"markdown","9fcb931d":"markdown","ca03b710":"markdown","a9d5eaf9":"markdown","4055903a":"markdown","ee75ac1d":"markdown","ea602b6b":"markdown","aeefaade":"markdown","8693d350":"markdown","ec51ca24":"markdown","d07958f8":"markdown","ac5a1905":"markdown","3d8d5d64":"markdown","b4a58ac0":"markdown","f7bcf899":"markdown","869008ca":"markdown","f19f4682":"markdown","f274671d":"markdown","8679526b":"markdown","b1cc2df9":"markdown","ac728de0":"markdown","443dae0a":"markdown","07119d5d":"markdown","d1e961e5":"markdown"},"source":{"b7347364":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31c6d443":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","022ed5e2":"# load the traning data\ntrain_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","367a4f05":"#load test data\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","9e7176b0":"# view the data\ntrain_data.sample(5)","ba91647c":"train_data.set_index('PassengerId',inplace = True)\ntest_data.set_index('PassengerId',inplace = True)","56556b3f":"# check the information of datasets\nprint('*' *20,'Training Data', '*' * 20)\nprint(train_data.info())\nprint('*' * 20,'Test Data','*' *20)\nprint(test_data.info())","bfd4e439":"# Descriptive mesure of data\ntrain_data.describe(include='all')","759758e6":"print(train_data.Cabin.describe())\nprint('*' * 20,'Unique value in cabin','*' *20)\nprint(train_data['Cabin'].unique())","d1823031":"train_data.Cabin.isnull().sum()\/len(train_data) * 100","5a776b28":"#checking the skewness\ntrain_data.skew()","157cc330":"#Pclass\nprint('*' * 20,\"Passenger's count by socio- economic status\",'*' * 20)\nprint(train_data['Pclass'].value_counts())\n#Sex\nprint('*' * 20, \"Passenger's count by Gender\", '*' * 20)\nprint(train_data['Sex'].value_counts())\n# Embarked\n\nprint('*' * 20, \"Passenger's count by Port of Embarkation\", '*' * 20)\nprint(train_data['Embarked'].value_counts())","ef50b1e0":"print('*' * 20,\"Frequency count of passengers ny Passenger's class and gender\",'*'*20)\ntable1 = pd.crosstab(train_data['Pclass'],train_data['Sex'],margins = True,margins_name = 'Sum')\nprint(table1)\n# Pclass and Embarked\nprint('*' * 20, \"Frequency count of passengers by Passenger's class and their port of Embarkation\", '*' * 20)\ntable2 = pd.crosstab(train_data['Pclass'],train_data['Embarked'],margins = True,margins_name = 'Sum')\nprint(table2)\n#Gender and embarked\nprint('*' * 20, \"Frequency count of passengers by Passenger's port of Embarkation and gender\", '*' * 20)\ntable3 = pd.crosstab(train_data['Sex'],train_data['Embarked'],margins =True,margins_name ='Sum')\nprint(table3)","22ad67e0":"# Age\nplt.figure(figsize = (10,6))\nplot = plt.hist(train_data.Age,bins = 8,histtype = 'bar')\n#plot a histogram\nplt.xlabel('Count of values in each bin')\nplt.ylabel('Ranges')\nfor i in range(8):\n    print(plt.text(plot[1][i],plot[0][i],str(plot[0][1])))# display the count of values falling in each range\n    ","eef6c91f":"#check the skewness of age\ntrain_data.Age.skew()","eacc44b8":"#fare \nplt.figure(figsize = (10,6))\nplot = plt.hist(train_data.Fare,bins = 10,histtype = 'bar')\nplt.xlabel('count of value in each bin')\nplt.ylabel('Ranges')\nfor i in range(10):\n    plt.text(plot[1][i],plot[0][i],str(plot[0][i]))   # display the count of values falling in each range","be5abdff":"# check skewess of fare visible\ntrain_data.Fare.skew()","da1a14f2":"# boxplot : to abserve outliers\nplt.figure(figsize = (10,6))\nplt.boxplot(train_data.Fare)\nplt.ylabel('Fare')","e50c0b21":"# SibSp\nsns.countplot(train_data.SibSp)\n# count the frequency each values","9710b1fa":"#parch\nsns.countplot(train_data.Parch) # count the frequency each values","3b6ff480":"#survived\nsns.countplot(train_data.Survived)","c2909b61":"# Sex\nsns.countplot(train_data.Sex)","35fd4674":"# Pclass\nsns.countplot(train_data.Pclass)","90db9176":"# Boxplot: shows the distribution of quantitative data in a way \n# that facilitates comparisons between variables or across levels of a categorical variable\n\nplt.figure(figsize=(10,6))\nbox_plot = sns.boxplot(x = train_data.Survived, y = train_data.Age, data = train_data)\n\n\n# Adding text in the boxplot like median value, first quartile value and third quartile value\nmedians = train_data.groupby(['Survived'])['Age'].median()\nfirst_quartile = train_data.groupby(['Survived'])['Age'].quantile(0.25)\nthird_quartile = train_data.groupby(['Survived'])['Age'].quantile(0.75)\n\n# Vertical distance from lines to display the particular value\nvertical_offset_median = train_data['Age'].median() * 0.05 \nvertical_offset_fquartile = train_data['Age'].quantile(0.25) * 0.05 \nvertical_offset_tquartile = train_data['Age'].quantile(0.75) * 0.05\nfor xtick in box_plot.get_xticks():\n    \n    # Display text at median (Second quartile)\n    box_plot.text(xtick,medians[xtick] + vertical_offset_median,medians[xtick], \n            horizontalalignment='center',size='medium',color='w',weight='semibold')\n    \n    # Display text at first quartile\n    box_plot.text(xtick,first_quartile[xtick] + vertical_offset_fquartile,first_quartile[xtick], \n            horizontalalignment='center',size='medium',color='w',weight='semibold')\n    \n    # Display text at third quartile\n    box_plot.text(xtick,third_quartile[xtick] + vertical_offset_tquartile,third_quartile[xtick], \n            horizontalalignment='left',size='medium',color='b',weight='semibold')","7a21a2b3":"# Boxplot:shows the distribution of quantitative data in a way\n# That Facilitative comparision between variables or across levels of a categorial variable\nplt.figure(figsize = (10,6))\nbox_plot = sns.boxplot(x = train_data.Survived,y = train_data.Fare,data = train_data)\n#Adding text in the boxplot like median value ,first qurtile value and third quartile value\nmedians =train_data.groupby(['Survived']) ['Fare'].median()\nfirst_qyrtile = train_data.groupby(['Survived'])['Fare'].quantile(0.25)\nthird_quartile = train_data.groupby(['Survived'])['Fare'].quantile(0.75)\n\n# Vertical distance from lines to display the particular value\nvertical_offset_median = train_data['Fare'].median() * 0.05 \nvertical_offset_fquartile = train_data['Fare'].quantile(0.25) * 0.05 \nvertical_offset_tquartile = train_data['Fare'].quantile(0.75) * 0.05\nfor xtick in box_plot.get_xticks():\n    #display text at median(second qurtile)\n     box_plot.text(xtick,medians[xtick] + vertical_offset_median,medians[xtick], \n            horizontalalignment='center',size='medium',color='w',weight='semibold')\n        # Display text at third quartile\n     box_plot.text(xtick,third_quartile[xtick] + vertical_offset_tquartile,third_quartile[xtick], \n            horizontalalignment='left',size='medium',color='b',weight='semibold')","012f8c70":"# Boxplot: shows the distribution of quantitative data in a way \n# that facilitates comparisons between variables or across levels of a categorical variable\n\nplt.figure(figsize=(10,6))\nbox_plot = sns.boxplot(x = train_data.Sex, y = train_data.Age, data = train_data)\n\n\n# Adding text in the boxplot like median value, first quartile value and third quartile value\nmedians = train_data.groupby(['Sex'])['Age'].median()\nfirst_quartile = train_data.groupby(['Sex'])['Age'].quantile(0.25)\nthird_quartile = train_data.groupby(['Sex'])['Age'].quantile(0.75)\n\n# Vertical distance from lines to display the particular value\nvertical_offset_median = train_data['Age'].median() * 0.05 \nvertical_offset_fquartile = train_data['Age'].quantile(0.25) * 0.05 \nvertical_offset_tquartile = train_data['Age'].quantile(0.75) * 0.1\nfor xtick in box_plot.get_xticks():\n    \n    # Display text at median (Second quartile)\n    box_plot.text(xtick,medians[xtick] + vertical_offset_median,medians[xtick], \n            horizontalalignment='center',size='medium',color='w',weight='semibold')\n    \n    # Display text at first quartile\n    box_plot.text(xtick,first_quartile[xtick] + vertical_offset_fquartile,first_quartile[xtick], \n            horizontalalignment='center',size='medium',color='b',weight='semibold')\n    \n    # Display text at third quartile\n    box_plot.text(xtick,third_quartile[xtick] + vertical_offset_tquartile,third_quartile[xtick], \n            horizontalalignment='left',size='medium',color='b',weight='semibold')","928f6561":"plt.figure(figsize = (10,6))\ncount_plot  = sns.countplot(x = train_data.Sex,hue = train_data.Survived)","3749f5cf":"plt.figure(figsize = (10,6))\nsns.countplot(x = train_data.Pclass,hue = train_data.Survived)","699cd5de":"plt.figure(figsize = (10,6))\nsns.countplot(x = train_data.Embarked,hue = train_data.Survived)","60cb6a96":"plt.figure(figsize = (10,6))\nsns.countplot(x = train_data.SibSp,hue = train_data.Survived)","6d688f50":"plt.figure(figsize=(10,6))\nsns.countplot(x = train_data.Parch, hue = train_data.Survived)\nplt.legend(bbox_to_anchor=(1, 1))","95ac5042":"plt.figure(figsize=(12,8))\nsns.heatmap(train_data.corr(),annot = True)# Returns correlation among features which have numerical observations\n","9eae7050":"# Function to calculate missing values\ndef calc_missing_values(df):\n    \"\"\"\n    this function will take dataframne as input and return the missing value information for each features as a dataframe.\n    \"\"\"\n    missing_count = df.isnull().sum().sort_values(ascending=False)\n    missing_percent = round(missing_count\/len(df)* 100,2)\n    missing_info = pd.concat([missing_count,missing_percent],axis = 1,keys = ['Missing Value','Percent of missing value'])\n    return missing_info\nprint('*' * 20,'Missing values information of Traning data','*'*20)\nprint(calc_missing_values(train_data))\nprint()\nprint('*'*20,'Missing values information of Test data','*'*20)\nprint(calc_missing_values(test_data))","c59a292d":"print('Mean age of passengers:',train_data.Age.mean())\nprint('Median age of passengers:',train_data.Age.median())","7b92bdde":"train_data.Age.fillna(29.6,inplace = True)\ntest_data.Age.fillna(29.6,inplace = True)","ff8c4fe8":"train_data.Embarked.fillna(train_data.Embarked.mode().values[0],inplace = True)","9375646c":"test_data.Fare.fillna(test_data.Fare.median(),inplace = True)","c435b1cc":"print(calc_missing_values(train_data))\nprint(calc_missing_values(test_data))","af9927e7":"# Fare column have some outliers as observed during visylization\nplt.figure(figsize = (10,6))\nbox_plot = sns.boxplot(x = train_data.Survived,y = train_data.Fare,data = train_data)","4c98d22f":"train_data[train_data.Fare> 300]","f8406573":"columns_to_drop =['Cabin','Name','Ticket']\ntrain_data.drop(columns = columns_to_drop,axis =1,inplace = True)\ntest_data.drop(columns = columns_to_drop,axis = 1, inplace = True)","53b590d5":"# Traning  Data\ntrain_data = pd.get_dummies(train_data,columns =['Sex','Embarked'],drop_first = True)\n#test Data\ntest_data = pd.get_dummies(test_data,columns =['Sex','Embarked'],drop_first = True )","231353ad":"def age_bucket(r):\n    if r<=12:\n        return 0\n    elif r<=18:\n        return 1\n    elif r<=59:\n        return 2\n    else:\n        return 3\n# Apply the above function on age column for both train data and test data\ntrain_data['age_class'] = train_data.Age.apply(age_bucket)\ntest_data['age_class'] = test_data.Age.apply(age_bucket)","36f2986b":"first_quartile_fare = train_data.Fare.quantile(0.25)\nsecond_quartile_fare = train_data.Fare.quantile(0.5)\nthird_quartile_fare = train_data.Fare.quantile(0.75)\ndef fare_bucket(r):\n    if r<=first_quartile_fare:\n        return 0\n    elif r <= second_quartile_fare:\n        return 1\n    elif r<= third_quartile_fare:\n        return 2\n    else:\n        return 3\n# Apply above function to fare column of train dataand testdata\ntrain_data['fare_class'] = train_data.Fare.apply(fare_bucket)\ntest_data['fare_class'] = test_data.Fare.apply(fare_bucket)","187f8daa":"# drop Ageand fare columns\ntrain_data.drop(columns = ['Age','Fare'], axis = 1,inplace = True)\ntest_data.drop(columns = ['Age','Fare'],axis = 1,inplace = True)","6836d743":"train_data.head()","393a2364":"feature_data = train_data.drop(columns = ['Survived'])\ntarget = train_data.Survived\nfrom sklearn.model_selection import train_test_split\ntrainX,testX,trainY,testY = train_test_split(feature_data,target,test_size = 0.3, random_state = 42)","398fca96":"models = [] # to store all the models\naccuracy = [] # to store the accoracy of respective model","2e98aeb2":"from sklearn.linear_model import LogisticRegression\nlog_model = LogisticRegression()\n#fit the model\nlog_model.fit(trainX,trainY)\n#predict the data\nlog_pred = log_model.predict(testX)\n# store the model in models\nmodels.append('Logistic Regression')","3c3beaa5":"from sklearn.metrics import confusion_matrix,accuracy_score\nprint(confusion_matrix(testY,log_pred))\nprint(round(accuracy_score(testY,log_pred),2))\n# store the accuracy score\naccuracy.append(round(accuracy_score(testY,log_pred),2))","f86fda87":"from sklearn.neighbors import KNeighborsClassifier\n# checking differnt values of k\nfor k in range(1,15):\n    knn = KNeighborsClassifier(k)\n    knn.fit(trainX,trainY)\n    print(k)\n    print(knn.score(trainX,trainY))\n    print(knn.score(testX,testY))","985112b0":"# Fitting model for k = 7\nknn = KNeighborsClassifier(7)\n\n# store the model\nmodels.append('KNN')\n\n# fit the model\nknn.fit(trainX, trainY)\n\n# predict for X_test\nknn_pred = knn.predict(testX)\n\nprint(confusion_matrix(testY, knn_pred))\nprint(round(accuracy_score(testY, knn_pred),2))\n\n# store the accuracy score\naccuracy.append(round(accuracy_score(testY, knn_pred),2))","52aa9150":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\n\n# store the model in models\nmodels.append('Decision Tree')\n\n# fit the data\ndtree.fit(trainX, trainY)\n\n# predict the data\ndtree_pred = dtree.predict(testX)\n\n\nprint(confusion_matrix(testY, dtree_pred))\nprint(round(accuracy_score(testY, dtree_pred),2))\n\n# store the accuracy score\naccuracy.append(round(accuracy_score(testY, dtree_pred),2))","9aa2105e":"model_compare = pd.DataFrame({'models': models, 'accuracy': accuracy})\nmodel_compare\n\n","e18152c2":"test_data.index","11eafa83":"# prediction for test data\ntest_prediction = knn.predict(test_data)\n\n\n# creating dataframe for the predicted value with their passenger id\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_data.index,\n        \"Survived\": test_prediction\n    })\n\n# type conversion\nsubmission.PassengerId = submission.PassengerId.astype(int)\nsubmission.Survived = submission.Survived.astype(int)\n\n# Creating a csv file with test prediction\n\nsubmission.to_csv(\"titanic_submission.csv\", index=False)","893ce3e9":"### Descrete variables\n","d472818b":"#### Attribute Selection Measures\n* It starts with the root node.\n* It iterates through the unused attributes and calculates Entropy(H) and Information Gain(IG) of this attribute.\n* It then selects the attribute with highest Information Gain.\n* Then again the set is split by the selected attribute in order to produce subset of data.\n* The algorithm continues to recur on each subset considering unused attributes.","f492222c":"#### Working of  K Nearest Neighbours\nLets's have simple case to understand this algorithm. We have some data points of two classes as shown in the figure below .Let two classes be class yellow amd purple .There is a test data point.\n<img src = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQEAYABgAAD\/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT\/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT\/wAARCADuAScDASIAAhEBAxEB\/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL\/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6\/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL\/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6\/9oADAMBAAIRAxEAPwD6z\/bi\/bisf2L9K8IySeEbjxfqXiOa5WC3W+WyhiigWPzHaTZId26aIKoTBG8ll2gN9AfD3xtY\/ErwD4a8XaZFcQabr+mW2q2sV2qrMkU8SyorhWYBgrjIBIznBPWvzL\/4Lnf80T\/7jf8A7YV9\/wD7J3\/JrPwb\/wCxM0b\/ANIYaAPVaKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA\/Kv\/AILnf80T\/wC43\/7YV9\/\/ALJ3\/JrPwb\/7EzRv\/SGGvgD\/AILnf80T\/wC43\/7YV9\/\/ALJ3\/JrPwb\/7EzRv\/SGGgD1WiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPyr\/4Lnf80T\/7jf8A7YV9\/wD7J3\/JrPwb\/wCxM0b\/ANIYa+AP+C53\/NE\/+43\/AO2Fff8A+yd\/yaz8G\/8AsTNG\/wDSGGgD1WiiigArzP4\/fGi3+Cvgv+0hDHe6vdubews5JAoZ8EmRxkMY04zt5yyjK7tw9MrwP9sD4P6l8TvBNjf6JDJeatokkkq2cbDM0LqPMCLjLSAohAyMjcBklRXfgY0p4mEa3w\/8DT8bEy5bx53aN43faN1zP7r69D5p\/wCGzPih\/bH2z+1rX7L5\/m\/2f9hi8nZuz5W7bv24+XO7dj+LPNfY3wB+NFv8avBf9pGGOy1e0cW9\/ZxyBgr4BEiDJYRvzjdzlWGW27j+bH\/CPap\/bH9k\/wBm3X9qef8AZfsfkt53nbtvl7MZ3buMdc8V97\/sf\/B\/Uvhj4Jvr\/W4ZLPVtbkjlazkYZhhRT5YdcZWQl3JGTgbQcEMK+nzXD0KeGcpQUZaWskr6+W+h62ZUsspKn\/Z9RSk3qlNz92z1d5O2ttep75RRRXxJ5YUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAH5V\/8Fzv+aJ\/9xv\/ANsK+\/8A9k7\/AJNZ+Df\/AGJmjf8ApDDXwB\/wXO\/5on\/3G\/8A2wr7\/wD2Tv8Ak1n4N\/8AYmaN\/wCkMNAHqtFeE\/tZfGrVfhH4U0qHQJPs2tarcMI7p4UlWKKIKZMBjjcS6AZVhgv0ODXyx8K\/2oPG3gzxXZTap4g1DW9FluIxfWt85umaIEhvLLtlGAYkYZQSF3ZAxXt4bKauJoqrFpX2Xfp8vL8bblxo4ipRq4mnC8Kfxa67J+6utk7u7XlzPQ\/R2iiivEICiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD8q\/+C53\/NE\/+43\/AO2Fff8A+yd\/yaz8G\/8AsTNG\/wDSGGvgD\/gud\/zRP\/uN\/wDthX3\/APsnf8ms\/Bv\/ALEzRv8A0hhoAv8Axy+Cun\/G7wtBpd1df2Ze2s4ntdQSBZWj7OhBwSrDqAw5VCc7cHwj4W\/sN3ui+KbPVPF2safd2VlPHOmn2MbTLdbckpIZFUBchMja24Fh8vBr69or0qOY4jD0vZQenTuvT+tOlmK9RQnSjNqE\/iS2lpbXqtNHZq60ldaBRRRXmjCiiigAorO8ReItN8J6JeaxrF5HYabZx+ZNcTH5VHT6kkkAAZJJAAJNeTfD79rbwJ8RPFFtoNqdQ0u9uvlt21OKOOOWTIxGGV2+c9gcAkYByQD1U8LWrQdSnG6REpqN9HpvZNperStG\/S9r2fY9qooorlLCiiuc8bfETw38OdPW98SaxbaVA3+rErEySYKg7I1BZ8F1ztBwDk4FXCE6klCCu30RE5xprmm7LzOjorkfAvxa8IfEsTDw1r1rqcsOd8A3RzADblvLcBtvzqN2MZOM5rrqdSnOlLkqRafZ6BCpCorwd15BRRRWZYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAflX\/wXO\/5on\/3G\/8A2wr7\/wD2Tv8Ak1n4N\/8AYmaN\/wCkMNfAH\/Bc7\/mif\/cb\/wDbCvv\/APZO\/wCTWfg3\/wBiZo3\/AKQw0Aeq0UUUAFFFFABRRRQB4r+1t8Pta+InwnNroNt9tvbC9S\/a1UnzJY0jkVljGPmf5wdvUgEDJwD8IfDn4c698SvFlnomiWbS3Uh3vJJlYoIwRukkbHyqMj3JIABJAP6s0V72DzaWEpez5LtbO+3qra6+hrTxFahRrYek1yVb811d6xUXZ3VtEt09dQooorwTIK\/Pn9toav8A8LsmOoD\/AEH7Db\/2b9z\/AFGDu+7z\/rfO+9z+GK\/QasLxn4H0L4haG+keItNi1PT2dZfKkLKVdTwyspDKeoyCOCR0JFenl+Ljg6rnNXTVvNap3X3GlGrPD16eIgk3B3s+t0479N97P0Pzy\/Zd\/wCEm\/4XRoH\/AAjX2nPnL\/aXkY2fYt6+d5mfl246Z53bdvzba\/SquR8C\/CXwh8NBMfDWg2umSzZ3zjdJMQduV8xyW2\/Ip25xkZxmuuq8xxkMXUTprRd9\/wBdP+CVia88ZiZ4mcVFysrJ326t2V5Pa9tlFdLsoooryTEKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPyr\/AOC53\/NE\/wDuN\/8AthX3\/wDsnf8AJrPwb\/7EzRv\/AEhhr4A\/4Lnf80T\/AO43\/wC2Fff\/AOyd\/wAms\/Bv\/sTNG\/8ASGGgD1WiiigAooooAKKKKACiiigAooooAKK4DXvj58PvDXiKPQtR8VWMGps4iMalpEicuU2ySKCkZDA5DkbepwOa7mzvINQtILq1mjubadFlimhcOkiMMqysOCCCCCK2qUKtJKVSDSe11a5jCtTqO0JJvyZNRRRWJsFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB+Vf\/Bc7\/mif\/cb\/APbCvv8A\/ZO\/5NZ+Df8A2Jmjf+kMNfAH\/Bc7\/mif\/cb\/APbCvv8A\/ZO\/5NZ+Df8A2Jmjf+kMNAHqtFFFABRRRQAUUV5n8fvjRb\/BXwX\/AGkIY73V7tzb2FnJIFDPgkyOMhjGnGdvOWUZXduG1GlOvNU4LVibtayu3ZLzbdkvmz0yivlr4C\/tiXvxC8cQ+HPFOn6fp5vxssbuyLRoJQCfLkEjnO\/gLtOd2Bg7sr9S1ricLUwk1Cp1KlGpTm6daDjJbp2v5bNp\/JvtumgrJ8Xf2r\/wietf2H\/yG\/sU32H7n\/Hx5beX9\/5fvbfvcevFa1Fc8JcklK17dzKpH2kHC7V1a63Xp5n4\/SbvMbf97Jz9a\/Qz9i\/+1v8AhRtl\/aX\/AB6\/bLj+zvuf8e+4Z+7z\/rfO+9z+GK7bXvgH8PvEviKPXdR8K2M+pq4lMiho0lcOX3SRqQkhLE5Lg7uhyOK7mzs4NPtILW1gjtraBFiihhQIkaKMKqqOAAAAAK+izDM6WKo+zpxd27u\/T07vz00vpqehi8dVx0KNOdKMFT\/le+lrJWVo9bXeqjr7us1FFcp8WPHX\/Cr\/AIV+MvGX2H+0\/wDhHdGvNX+xeb5X2j7PA8vl79rbd2zG7acZzg9K+aOM6uivFP2L\/jFqnx8\/Zf8AAHjjW49mtahZPBfSblPnz280ltJPhERV81oTJsVQE37RkDJ9roAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPyr\/AOC53\/NE\/wDuN\/8AthX3\/wDsnf8AJrPwb\/7EzRv\/AEhhr4A\/4Lnf80T\/AO43\/wC2Fff\/AOyd\/wAms\/Bv\/sTNG\/8ASGGgD1WiiigAooooAK8J\/ay+Cuq\/FzwppU2gR\/ada0q4Yx2rzJEssUoUSYLDG4FEIyyjAfqcCvdqK6cPXnhqqqw3X\/DCd7pxdmmmn5p3X4o+DP2bf2bfF158RNG1\/X9GvNC0bSbr7UzXg8iaSWPa8arGwLFSxXJwBhXAYMAK+86KK3xmMnjJptWS2X9dTSrVq4mq69d3m7LRWVlsktdNW9W3dvUKKKK88gKKKKACvzA\/4KB\/su\/tNa34E8Taw\/xl\/wCE++GWh2U+qXGh3McWj3hgSUSss0VtElveeTHDHKJJGU7kk8uJWID\/AKaz6pZWt1HbTXkENxJjZDJKqu2TgYBOTk8VT8WeFtL8ceFdZ8N63a\/bdF1iym0++tvMePzoJY2jkTchDLlWIypBGeCDWcakKjcYSTa38vUpxcbNrc\/Iz\/gnL+yl+0B4o8G2Xj3wj8Yrj4UeCbua7msLaEHU1vrhSLaSaTTmdbcqdkqb5SZA1upCY2OP0cu\/iRrVrHb2Vpqkl3HaIsH9o3MMX2i92qF86ULGqBmILEIiKCxAUAADrfgD8HdL\/Z\/+DfhP4faRJ9otNDslge62uv2mdiZJ59rO5TzJnkk2biF37RwBXOeIfhVqlvqEraZDHdWcjs0arIFaNeoU7zz1xkE5xk4r8t8Qf7e+qUf7F57XfP7O\/P05bcvvW3vbyvofQ5L9T9rL63byvt576X7Hd+AvGDeLNPmadI4ry3fbIsQO0qeVYZ6dCMZP3c966iuX8BeD28JafMs7xy3lw+6RoidoUcKoz16k5wPvY7V1FfacO\/2h\/ZVD+1f49ve+92v58tr+dzysd7D6zP6v8F9P69dgooor6I4QooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPyr\/4Lnf8ANE\/+43\/7YV9\/\/snf8ms\/Bv8A7EzRv\/SGGvgD\/gud\/wA0T\/7jf\/thX3\/+yd\/yaz8G\/wDsTNG\/9IYaAPVaKKKACiiigAooooAKKKKACiiigAooooA+btZvLrUNWu7i9DLdSSMZEYEFDnG3B5AHTHbGK928FXl1qHhXTZ7wMLho8EsDlgCQrHPJJABz3zmqGrfDXRtY1Y38qTRuxDSRQuFSQ55JGM5PfBHr15rp4okgiSONFjjQBVRRgKBwAB2FfkPB3CeY5DmWKxWMqqUZ6Kzu5e9fml2f+bPps0zKhjKFOnSjZr8NNl\/XQfRRRX68fMhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB+Vf\/AAXO\/wCaJ\/8Acb\/9sK+\/\/wBk7\/k1n4N\/9iZo3\/pDDXwB\/wAFzv8Amif\/AHG\/\/bCvv\/8AZO\/5NZ+Df\/YmaN\/6Qw0Aeq0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABXnXiz4rNpeoTWOmW0czwPskmuM7dwyGUKMHg45z2PHQ16LXlPjL4Y6jNq1xfaZtu47mQyNEzhXRmJLdcArn3zzjHGa\/O+N62eUcvi8ji3K\/vcqvK1ui1672V\/xPcymOElWaxb0tpfRX8zrPA\/jhPF0U0ckK217AFLIr5Dg8FlHUDPUc4yOTmuqrifh14Gm8M+feXxjN5MgRUjJPlrwSCehJOOmcbeDzXbV7XC9TNKuVUp5wrVtb9Ha7tdLRO3\/B1ucmYRw8cTJYX4P62CiiivqjzgooooAKKKKACiiigAooooA\/Kv8A4Lnf80T\/AO43\/wC2Fff\/AOyd\/wAms\/Bv\/sTNG\/8ASGGvgD\/gud\/zRP8A7jf\/ALYV9\/8A7J3\/ACaz8G\/+xM0b\/wBIYaAPVaKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA\/Kv\/gud\/wA0T\/7jf\/thX3\/+yd\/yaz8G\/wDsTNG\/9IYa+AP+C53\/ADRP\/uN\/+2Fff\/7J3\/JrPwb\/AOxM0b\/0hhoA9VooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACq99fW+mWct1dSrDbxDc7t0H+J9u9WK4v4oeHL7XtJgksmaQ2pZ3tVzmXIHIHdhg4Hfccc8Hxc6xmJy\/L62KwlL2tSKuo9\/87b2WrtZanXhaUK1eNOrLli3ub2i+K9K8QyyR6feLPJGNzJtZDjpkBgMj6dMj1rWrxfwH4N1iTxDbXUkFxpsNq6yPJMjIXGfuKDjORkHsATnsD7RXhcI5xmGd4B4jMaHspJtKyaUl3SbbVtt2m9uy68ywtDCVuShPmVvu+4KKKK+3PJCiiigAoorBuvHWhWeoNYzajGlwr+Ww2sVVvQtjaMd+eOc9K4sVjsLgYqWKqxppuy5mo3fZXa1NadGpWbVOLduyub1FFFdpkFFFFABRRRQAUUUUAFFFFAH5V\/8ABc7\/AJon\/wBxv\/2wr7\/\/AGTv+TWfg3\/2Jmjf+kMNfAH\/AAXO\/wCaJ\/8Acb\/9sK+\/\/wBk7\/k1n4N\/9iZo3\/pDDQB6rRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAFXVPtP8AZd59i\/4\/PJfyen39p29eOuOvFfNdfT1Y1x4P0W61AX02mwPcc5JX5WJzksv3WPJ5Iz+VflfG3B+I4nlQqYesoundNSvaztqrX10+emqsfRZTmkMvU1ON79vL9CLwL9p\/4RHS\/tf+t8kben3MnZ0\/2Nvv681vUUV+j4HDfU8LSw3M5ckVG73dkld+bPCrVPa1JVLWu2\/vCiiiu0yCiiigAooooAKKKKAPwr\/4KQ\/treCP2wv+Fd\/8IbpXiDTP+Ed\/tH7X\/btvBFv+0fZdnl+VNJnHkPnOOq4zzj6g+CP\/AAV2+D3w1+C\/gHwjqfhvxxPqWgeH9P0q6ltLCzaF5YLaOJ2QtdqSpZDgkA4xkDpXhX\/BVr9lv4Yfs1\/8Ku\/4Vx4Z\/wCEc\/tr+1Pt\/wDp91ded5P2Pyv9fK+3HmyfdxndznAx9f8A7Pf\/AATh\/Z28cfAL4aeJNb+Hn23WtY8M6ZqF9c\/23qMfnTy2sckj7UuAq5ZicKABngAUAZX\/AA+r+CH\/AEK3xA\/8F1j\/APJlH\/D6v4If9Ct8QP8AwXWP\/wAmV6r\/AMOuP2Yv+iZ\/+V\/VP\/kmj\/h1x+zF\/wBEz\/8AK\/qn\/wAk0AeVf8Pq\/gh\/0K3xA\/8ABdY\/\/JlH\/D6v4If9Ct8QP\/BdY\/8AyZXqv\/Drj9mL\/omf\/lf1T\/5Jo\/4dcfsxf9Ez\/wDK\/qn\/AMk0AeVf8Pq\/gh\/0K3xA\/wDBdY\/\/ACZR\/wAPq\/gh\/wBCt8QP\/BdY\/wDyZXqv\/Drj9mL\/AKJn\/wCV\/VP\/AJJo\/wCHXH7MX\/RM\/wDyv6p\/8k0AeVf8Pq\/gh\/0K3xA\/8F1j\/wDJlH\/D6v4If9Ct8QP\/AAXWP\/yZXqv\/AA64\/Zi\/6Jn\/AOV\/VP8A5Jo\/4dcfsxf9Ez\/8r+qf\/JNAHlX\/AA+r+CH\/AEK3xA\/8F1j\/APJlH\/D6v4If9Ct8QP8AwXWP\/wAmV6r\/AMOuP2Yv+iZ\/+V\/VP\/kmj\/h1x+zF\/wBEz\/8AK\/qn\/wAk0AeVf8Pq\/gh\/0K3xA\/8ABdY\/\/JlH\/D6v4If9Ct8QP\/BdY\/8AyZXqv\/Drj9mL\/omf\/lf1T\/5Jo\/4dcfsxf9Ez\/wDK\/qn\/AMk0AeVf8Pq\/gh\/0K3xA\/wDBdY\/\/ACZR\/wAPq\/gh\/wBCt8QP\/BdY\/wDyZXqv\/Drj9mL\/AKJn\/wCV\/VP\/AJJo\/wCHXH7MX\/RM\/wDyv6p\/8k0AeVf8Pq\/gh\/0K3xA\/8F1j\/wDJlH\/D6v4If9Ct8QP\/AAXWP\/yZXqv\/AA64\/Zi\/6Jn\/AOV\/VP8A5Jo\/4dcfsxf9Ez\/8r+qf\/JNAHlX\/AA+r+CH\/AEK3xA\/8F1j\/APJlH\/D6v4If9Ct8QP8AwXWP\/wAmV6r\/AMOuP2Yv+iZ\/+V\/VP\/kmj\/h1x+zF\/wBEz\/8AK\/qn\/wAk0AeVf8Pq\/gh\/0K3xA\/8ABdY\/\/JlH\/D6v4If9Ct8QP\/BdY\/8AyZXqv\/Drj9mL\/omf\/lf1T\/5Jo\/4dcfsxf9Ez\/wDK\/qn\/AMk0AeVf8Pq\/gh\/0K3xA\/wDBdY\/\/ACZR\/wAPq\/gh\/wBCt8QP\/BdY\/wDyZXqv\/Drj9mL\/AKJn\/wCV\/VP\/AJJo\/wCHXH7MX\/RM\/wDyv6p\/8k0AeVf8Pq\/gh\/0K3xA\/8F1j\/wDJlH\/D6v4If9Ct8QP\/AAXWP\/yZXqv\/AA64\/Zi\/6Jn\/AOV\/VP8A5Jo\/4dcfsxf9Ez\/8r+qf\/JNAHlX\/AA+r+CH\/AEK3xA\/8F1j\/APJlH\/D6v4If9Ct8QP8AwXWP\/wAmV6r\/AMOuP2Yv+iZ\/+V\/VP\/kmj\/h1x+zF\/wBEz\/8AK\/qn\/wAk0AeVf8Pq\/gh\/0K3xA\/8ABdY\/\/JlH\/D6v4If9Ct8QP\/BdY\/8AyZXqv\/Drj9mL\/omf\/lf1T\/5Jo\/4dcfsxf9Ez\/wDK\/qn\/AMk0AeVf8Pq\/gh\/0K3xA\/wDBdY\/\/ACZR\/wAPq\/gh\/wBCt8QP\/BdY\/wDyZXqv\/Drj9mL\/AKJn\/wCV\/VP\/AJJo\/wCHXH7MX\/RM\/wDyv6p\/8k0AeVf8Pq\/gh\/0K3xA\/8F1j\/wDJlH\/D6v4If9Ct8QP\/AAXWP\/yZXqv\/AA64\/Zi\/6Jn\/AOV\/VP8A5Jo\/4dcfsxf9Ez\/8r+qf\/JNAHlX\/AA+r+CH\/AEK3xA\/8F1j\/APJlH\/D6v4If9Ct8QP8AwXWP\/wAmV6r\/AMOuP2Yv+iZ\/+V\/VP\/kmj\/h1x+zF\/wBEz\/8AK\/qn\/wAk0Ae6\/Bf4veHvj18L\/D\/j3wrJcSaFrULSwC7hMU0bK7RyRuvIDJIjoSpKkqSrMpDErV8AeAPD3wt8G6T4T8J6Tb6H4e0qEW9nY2wO2NckkkkkszMSzOxLMzMzEkkkoA\/\/2Q=='>\nHere we are trying to find the class of the start.Let's take k = 3. Now constructing a boundary including black star and those 3 points which are nearest to it.\n<img src = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQEAYABgAAD\/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT\/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT\/wAARCADyASsDASIAAhEBAxEB\/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL\/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6\/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL\/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6\/9oADAMBAAIRAxEAPwD9CP2kPjfY\/s4fBLxT8RtQ0y41m30WGNlsLZ1jaeWWZIYkLtwimSVNzYYqu4hWICnlf2Nv2qbH9r74RzeNLTw\/ceGLi01ObSrzTprlblVlRI5A0coVS6mOaM5KKQ24YIAZuK\/4Kj\/8mJ\/E3\/uGf+nS0ryr\/gip\/wAms+Kf+xzuv\/SGxoA+\/wCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPlX\/gqP\/yYn8Tf+4Z\/6dLSvKv+CKn\/ACaz4p\/7HO6\/9IbGvVf+Co\/\/ACYn8Tf+4Z\/6dLSvKv8Agip\/yaz4p\/7HO6\/9IbGgD7\/ooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD5V\/4Kj\/8AJifxN\/7hn\/p0tK8q\/wCCKn\/JrPin\/sc7r\/0hsa9V\/wCCo\/8AyYn8Tf8AuGf+nS0ryr\/gip\/yaz4p\/wCxzuv\/AEhsaAPv+iiigArI8XeKLDwT4Z1PXdTk8qx0+Bp5PmUM2Bwi7iAWY4VQSMkgd6165H4teBR8S\/hzr3hsTeRLfW+IZN21RKjB49x2t8u9V3YBOM45regoSqwVV2jdX9L6mNZyjTk4b2dvU+J\/Ff7avxE1rWJLjSLq18PWHKxWcNtHOdu4kF3kViWwQCRtB25CjmveP2Yf2nrr4q30vhrxLFbQa7FB5ttdwkRreKoUOChP+t6v8g2ld3C7efibxX4H1\/wPrEml67pN1pt6mT5c0ZAdQxXeh6MpKthlJBxwa+kv2Mfgjrcfi+LxxrFjc6Zptpbt\/Z\/nDy2unljxvClctF5bsdwIyxXBOGA+3xmGw8cLKUoKKto0ktemvW79T3cfRyinhlLA1VKpeNvfcm1dc14tvpd7K34H2rRRRXwJ5AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHyr\/AMFR\/wDkxP4m\/wDcM\/8ATpaV5V\/wRU\/5NZ8U\/wDY53X\/AKQ2Neq\/8FR\/+TE\/ib\/3DP8A06WleVf8EVP+TWfFP\/Y53X\/pDY0Aff8ARXI\/Frx0Php8Ode8SCHz5bG3zDHt3KZXYJHuG5fl3su7BBxnHNfnv\/w0r8TP+Ei\/tr\/hL7\/7V\/zxyv2X7mz\/AI98eV05+71+brzXr4PLZ4yDqKSS2+f+Wv8AwGb4fDYnGTlDDQu4pN3dtHeyW95OzsnZd5LQ\/TaiuR+EvjofEv4c6D4kMPkS31vmaPbtUSoxSTaNzfLvVtuSTjGea66vMqU5Upypz3Ts\/kctOaqQU1s9QooorMsKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA+Vf8AgqP\/AMmJ\/E3\/ALhn\/p0tK8q\/4Iqf8ms+Kf8Asc7r\/wBIbGvVf+Co\/wDyYn8Tf+4Z\/wCnS0ryr\/gip\/yaz4p\/7HO6\/wDSGxoA+6PF3hew8beGdT0LU4\/NsdQgaCT5VLLkcOu4EBlOGUkHBAPavkD\/AIYC1r\/hIvK\/4Suw\/sL\/AJ+\/s7\/avuZ\/1P3fv8f6zpz1+WvtaivQw2Or4WLjTej7q+vf+tO6KhOrRk5Uajg2rO3Vdtb230atJdGjI8I+F7DwT4Z0zQtMj8qx0+BYI\/lUM2By7bQAWY5ZiAMkk9616KK4ZSc5OUndszjFQiox2QUUUVJQUUV4Vq\/7Zvw50fxRLozTahdxxTiB9UtYFktOoDOG37mVSTkqpztJXcME9NHDVsQ2qUb2JcrOyTb8k3p30Tsl1ey0PdaKhs7yDULSC6tZo7m2nRZYpoXDpIjDKsrDgggggipq53daMaaaugooqpq2r2Og6fLfane2+nWUWPMubuVYo0yQoyzEAZJA+pFCTk0ktRSkopyk7JFuivOvCv7Q\/wAOvGmrR6ZpPim1mvpMeXDPHJb+YSwUKpkVQzEsAFBJPYcGvRa1q0atF8tWLi\/NWJhUhUvySTt2CiiisTQKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPlX\/AIKj\/wDJifxN\/wC4Z\/6dLSvKv+CKn\/JrPin\/ALHO6\/8ASGxr1X\/gqP8A8mJ\/E3\/uGf8Ap0tK8q\/4Iqf8ms+Kf+xzuv8A0hsaAPv+iiigAooooAKKKKAMPx1oc\/ibwT4h0e1eOO51DTri0ieYkIryRMiliATjJGcA1+Wmr+B9f0LxRL4cvdJuo9bjnFsbJYy7tIxAULjO7dkbSMhgQRnIr9Z6K9nA5j9Ti4SjzJ6721+5nThcVXwNSdXDtXkkndNrS9tmu7PP\/gH4L1L4e\/CPw7oGsLGmpWsUjTRwvvVC8rybd3QkBwDjIyDgkcn0CiivLrVZVqkqst5Nv7zjpwVOCgumgV8tft8DVz4L8M\/ZxnRPt0n2v7n+v8v9z1+b7vn9OPX+GvqWobyzg1C0ntbqCO5tp0aKWGZA6SIwwysp4IIJBBrfB4hYWvGq1e1\/xVhvmTjONrxcZa7e60\/0+W5+SGhf2l\/bVh\/Y\/wBp\/tbz0+yfY93neduGzZt53bsYxzmv1f8ACP8Aav8Awiei\/wBuf8hv7FD9u+5\/x8eWvmfc+X7277vHpxXIeFf2ePh14L1aPU9J8LWsN9Hjy5p5JLjyyGDBlEjMFYFQQwAI7Hk16LXo5lj6WKjGFJOy6ta\/LV\/P5djtx2MnmGIVecFDlVtHe+t9XZbfZXS8u+hRRRXhHIFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHyr\/wVH\/5MT+Jv\/cM\/wDTpaV5V\/wRU\/5NZ8U\/9jndf+kNjXqv\/BUf\/kxP4m\/9wz\/06WleVf8ABFT\/AJNZ8U\/9jndf+kNjQB9\/0UUUAFFFFABRRRQAUUUUAFFFFABXP+NviF4V+GulRan4u8S6P4V02aYW0d5rd\/FZwvKVZhGHkZQWKo525zhSexryb4oftEWNlqk+h6Tr+m+H9Njnax1LxXPIZp7aUM6yJp9osUgupYzFJE80u2CCYhT9peKe2XrfhD4O8CbT4v8AD18PF+vXkH2e58Walc\/bdSkR9krwGRv+PaIvtl+yRLFDGzErCmcVs6FWMFVcHyvrbT7zFVqcpcikr9r6lb\/hfv8Aa3\/Iq\/Dj4geK\/L\/4+f8AiR\/2J5Gfuf8AIXksvN3Yb\/U+Zt2\/Ps3JuP8Ahcni7\/ohPxA\/8DvD3\/y1r1WisTY8q\/4ag+HNn8+t6vqHgu0PC3\/jXQtQ8PWcj9okuL+CGJ5SMsI1YuVR2CkIxHqtFeVf8KU\/4V\/\/AKd8LLr\/AIRTyf3n\/CI+Zt8O3uP+WX2fY\/2DdmU+bZiPMsnmzR3W3y2APVaK5TwL46\/4Sr7dpupWP9h+KtK2LqmjNL5vk793lzwybV862l2OY5gq7tjo6xyxSxR9XQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB8q\/8ABUf\/AJMT+Jv\/AHDP\/TpaV5V\/wRU\/5NZ8U\/8AY53X\/pDY16r\/AMFR\/wDkxP4m\/wDcM\/8ATpaV5V\/wRU\/5NZ8U\/wDY53X\/AKQ2NAH3\/RRRQAUUUUAFFFZHi7xRYeCfDOp67qcnlWOnwNPJ8yhmwOEXcQCzHCqCRkkDvVRjKclGKu2TKShFylsjXor4q0f9vfW38VQnU\/D2np4da4Ikjtd5u44STjDs+xmXgn5VDYI+XOR9n2d5BqFpBdWs0dzbTossU0Lh0kRhlWVhwQQQQRXbisFWwlnU2fb8jSdOrRlyV6bhJq6Ttqu+jf3brqldE1eaePtWvvGHjKz+Hmh3lxYBYYtT8UX1rK1vPbaXKLmOCK3mB3LPcT27JvjG6OGG5YSQSm2ZvS68q\/Z5\/wCJ1oPivxk3Mni7xNqGpI8X\/HvNawMun2FxAed0U1lYWk4fcyuZmdCEdFXgJPhP4\/6TcaD8XvEWmTWVvp1vZTLbWFnaRRRQwWKIq2kaJGAqqsAiAUDIAAPOa9r\/AGAv7W\/4SjxX5X\/IC+xxfafuf8fG\/wDc\/wC19zz+nHrztr6o8dfCXwh8SxCfEug2upyw42TndHMAN2F8xCG2\/Ox25xk5xmtfwv4R0bwTpMemaFpltpVjHj9zbIF3EKF3MerMQqgsxJOOSa+nrZrSqYV0lF8zSX91bba\/craadjoli6lTA08A4JKDXvX952d72tpKX23fW8v5tNeiiivmDnCivmr9lf8Aac1T46fGT9obwnf6b9jtPAniZNP0+Tz1f9xiS2KYEaHmaxmnyxYj7VsziMFvpWgDivih4JvvEmlDVfDUtvp\/j3R4ZpNB1G5ZkhErKCba52qS9pMyRrNHgnCpIm2aKGSPV8AeNrH4jeDdJ8R6fFcWtvfwiRrO9VUubOUErLbXCKzCOeGRXikjySkkbqeVNdBXlXgb\/ij\/AI4eOfCkX+jaLqtlaeK9Ogl+QG6mlng1NLVeF8pWhsriQKCwn1KSSRibhAAD1WiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPlX\/gqP\/wAmJ\/E3\/uGf+nS0ryr\/AIIqf8ms+Kf+xzuv\/SGxr1X\/AIKj\/wDJifxN\/wC4Z\/6dLSvKv+CKn\/JrPin\/ALHO6\/8ASGxoA+\/6KKKACiiigArkfi14FHxL+HOveGxN5Et9b4hk3bVEqMHj3Ha3y71XdgE4zjmuuorSnUlSnGpDdO6+RFSCqQcHs9D81dL\/AGWfiXqPio6HJ4ans3Ta0t7cMq2iISuWEwyr4DglULNw3BIIr9GfDuhweGfD+l6PavJJbafaxWkTzEF2SNAiliABnAGcAVo0V6OMzCeMUYuKSXbv\/W36nRXxFfF1FVxMuZxVlpay6\/N2V3torJLQK8q\/ZO\/5NZ+Df\/YmaN\/6Qw16rXlXwK\/4p28+IHgqfi70XxNfalFJJ8j3drqcz6klwsZ5ESzXV1aBwWV3sJSCCGjTyjI9VooooAK+Vf2vPgL+0N8UPtP\/AAqL43\/8IlpV95Edx4evLdLL7PsyzS2+pW0LXS7mSLMRzndL+82ERV9RXmoWunRCS7uYbWMnaHmcICeuMnvwfyqWKVJ4kkjdZI3AZXU5DA8gg9xWaqQc3TUlzLp1+4rldua2h+B37G\/7Jfxt+IXxo8ZaB4L8VXHwu1LwlMNJ8U61aarJDNahrko9sn2Z83DFreVwoYRMbcZkXKE\/r1oeqeOPhf4dTw54k8fSfEPxMrtPd+IbjSLbTwu4gxwxW8KhFVUCkljIzM7Hco2qvS\/B\/wDZz8MfBfx38UvFWhQ7L\/x9rSave\/NKfLxEMx\/PIwObiS8n3KFx9p2Y2xpWh8Qvh7d61qB1PTBHJK6Ks0DNtZ2GAGBJx93HHH3e5NfD8a\/2v\/ZEv7Gv7S6vy\/Fy635ba3vbbW17Hr5T9W+sr618PS+1\/MPh78QrvWtQGmamY5JXRmhnVdrOwySpAGPu554+73JrP8R\/8nTfDz\/sTPE3\/pdoNaHw9+Ht3ouoDU9TEccqIywwK25kY5BYkHH3c8c\/e7EVn\/DX\/ipvjJ8UfFsXy2EX9n+EbZk+eK7+wCe4muEkHB23Gpz2jIM7JLCQFtxZIzgr+1\/7Ij\/bN\/aXdub4uXS3NfW97762tcM2+rfWX9V+Hrba\/keq0UUV94eMFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB8q\/8ABUf\/AJMT+Jv\/AHDP\/TpaV5V\/wRU\/5NZ8U\/8AY53X\/pDY16r\/AMFR\/wDkxP4m\/wDcM\/8ATpaV5V\/wRU\/5NZ8U\/wDY53X\/AKQ2NAH3\/RRRQAUUUUAFFFFABRRRQAV5\/wDELwtqlrr2l+NvCtr9o17Tv3OpabDIsL69poWX\/Q97kRiWOWQTwNJjDrJF5kEd1PJXoFFAGT4W8U6X400G11jR7r7XYXG4KzRvE6OjFJIpI3AeKVHV0eNwro6MrKrKQNavP\/FPw91S11668VeCdU\/sjXptst9pFxtGl686KET7X+7eSGURDy1uYMONsPmrcxwRw1lf8NDaH4T\/ANF+JsP\/AAq2\/X5ftWv3CLo90w4za6lkQPuKyFIZTFdFI2ka3jWgDK+LF5dT+KmgmDLbwRqIBggMCAWYZ4JzkZH90DtXT\/Bu8uptJvreQMbWGRTC7A4ywJZQemBgHA\/vE966XxN4L07xV5LXayRzRcLNAQr7f7pyDkZ59u3U5v6Jolp4f0+Ozs49kS8ljyzt3Zj3J\/8ArdBX5Dl3CeY4XiutnNSqnRlzNa6vmWkWu0f\/AG1fL6evmVCplscLGPvK3pp1+f6sv0Vynjr4seCPhf8AYf8AhMvGXh\/wl9u3\/ZP7d1SCy+0bNu\/y\/Ndd23emcZxuXPUVyv8Awm3i\/wCJ\/wDovg\/QtQ8JeH5vkm8XeJLc2V4qH7zWOmzRmVpQVkTdepAiMY5Vju48o368fMGr8TPFOqXXn+CvBt15PjjUrJnTUBGssWgQPvRdRuFYFWwyv5MBGbiSNlG2OO4mh6rwn4W0vwP4V0bw3olr9i0XR7KHT7G28x5PJgijWONNzks2FUDLEk45JNVfBPgmx8DaVLa2stxfXl1MbvUdVvmV7vUbplVWnnZVUFiqIoVVVI0SOONUjjRF6CgAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD5V\/4Kj\/8mJ\/E3\/uGf+nS0ryr\/gip\/wAms+Kf+xzuv\/SGxr1X\/gqP\/wAmJ\/E3\/uGf+nS0ryr\/AIIqf8ms+Kf+xzuv\/SGxoA+\/6KKKACiiigAooooAKKKKACiiigAooooA8q\/4ZZ+FFp8+ieCdP8F3Z4a\/8FGTw9eSJ3ie4sGhleInDGNmKFkRipKKQf8ADNPhH\/oL\/ED\/AMOP4h\/+Tq9VooA5TwL8J\/BHwv8At3\/CG+DfD\/hL7ds+1\/2FpcFl9o2btnmeUi7tu98Zzjc2Oprq6KKACiiigAooooAKKKKACuS8cePY\/Cfl28UP2m+lQuqsSEReQGJ78joPQ8jjPW1w3xE8B3HiaWK+spF+1RR+W0MhwHUZYbT2bJI5456jHPyfFFTNaWVVJZMr1tOibtfWyejdvXy1sell8cPLERWKfu\/1uVfB\/wAUX1rUorDUbeGGSYkRzQttTOOFIYnk88g9SBjvXodeV+CfhnqFrrFvf6qkcEVu+9YN+52YYKn5TgAHnr\/DjGDXqleVwTWzutlzlnaanze7zK0uWy3Vl1va+vfSx05tHCRrpYR6W1ttfyCiiiv0E8QKKKKACiiigAooooAKKKKAPlX\/AIKj\/wDJifxN\/wC4Z\/6dLSvKv+CKn\/JrPin\/ALHO6\/8ASGxr1X\/gqP8A8mJ\/E3\/uGf8Ap0tK8q\/4Iqf8ms+Kf+xzuv8A0hsaAPv+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPlX\/gqP8A8mJ\/E3\/uGf8Ap0tK8q\/4Iqf8ms+Kf+xzuv8A0hsa9V\/4Kj\/8mJ\/E3\/uGf+nS0ryr\/gip\/wAms+Kf+xzuv\/SGxoA+\/wCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKy\/E2lza3oN5Y28\/2aaZNqyc46gkHHYgYPsTwelc2JqVKNCdSlDnkk2o7czS0V+l9jSnFSmoydk3v28yra+OtCvNQWxh1GN7hn8tRtYKzegbG057c88Y61vV8\/wBr4H1y51BbP+zbiFi+wyyxkRLjqS+MY+mc9s17xp9u9nY20EkzXEkUao0zdXIABY8nk9etfAcH8QZrnir\/ANpYX2Sg9Gk0n\/dtJt3W7a012XX2c0wWGwfJ7CpzX9H89CxRRRX6QeEFFFFABRRWTrXivSvD0sceoXiwSSDcqbWc46ZIUHA+vXB9K5cTisPg6brYmooQXWTSX3vQ0p051ZctOLb7LU1qKr2N9b6nZxXVrKs1vKNyOvQ\/4H27VYreFSNWCnB3T1TWzXdENOLaa1CiiirEFFFFABRRRQAUUUUAfKv\/AAVH\/wCTE\/ib\/wBwz\/06WleVf8EVP+TWfFP\/AGOd1\/6Q2Neq\/wDBUf8A5MT+Jv8A3DP\/AE6WleVf8EVP+TWfFP8A2Od1\/wCkNjQB9\/0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAV8\/wDjr7T\/AMJdqn2v\/W+cdvT7mBs6f7G339ea+gKy9Y8M6X4g2m\/s452XGJOVfAzxuBBxyeM4r8\/404br8TYGGHw9RQlCXNrflejWtru+ujs+qtqe1lWPhl9ZznG6atpucd8GPtP9l6jv\/wCPPzl8vp9\/b8\/v02dePTvXotRWtrDZQLDbwxwQr92OJQqjJycAe9S19Bw\/lcslyyjl8p87gt\/Vt6eSvZeSRxY3ELF4idZK1wooor6A4gooooAKKKKACiiigD8lf2zP+CoHws\/aJ\/Zs8YfD3w3oHjCy1rWPsfkT6pZ2sduvlXkE7b2S5dhlYmAwp5I6DkcV\/wAE9P8AgoX8Ov2TfgvrXhHxdovijUdSvfEE2qxy6Ja20sIie2togpMlxGd26F+MYwRz1A+gP24v+CefwX+GH7K\/jzxV8PPhzcWvizSYba5t7i21LULtoYhdw\/aJDG8zqVWAzMzMpCqGbjbkef8A\/BMv9h34V\/Hj9nnUPFnxN8B3GralN4gubfTr6a+vrNZrJIbcAxiKVEdRN9oXeAfmVlJ+XAAPYP8Ah9X8EP8AoVviB\/4LrH\/5Mo\/4fV\/BD\/oVviB\/4LrH\/wCTK9V\/4dcfsxf9Ez\/8r+qf\/JNH\/Drj9mL\/AKJn\/wCV\/VP\/AJJoA8q\/4fV\/BD\/oVviB\/wCC6x\/+TKP+H1fwQ\/6Fb4gf+C6x\/wDkyvVf+HXH7MX\/AETP\/wAr+qf\/ACTR\/wAOuP2Yv+iZ\/wDlf1T\/AOSaAPKv+H1fwQ\/6Fb4gf+C6x\/8Akyj\/AIfV\/BD\/AKFb4gf+C6x\/+TK9V\/4dcfsxf9Ez\/wDK\/qn\/AMk0f8OuP2Yv+iZ\/+V\/VP\/kmgDyr\/h9X8EP+hW+IH\/gusf8A5Mo\/4fV\/BD\/oVviB\/wCC6x\/+TK9V\/wCHXH7MX\/RM\/wDyv6p\/8k0f8OuP2Yv+iZ\/+V\/VP\/kmgDyr\/AIfV\/BD\/AKFb4gf+C6x\/+TKP+H1fwQ\/6Fb4gf+C6x\/8AkyvVf+HXH7MX\/RM\/\/K\/qn\/yTR\/w64\/Zi\/wCiZ\/8Alf1T\/wCSaAPKv+H1fwQ\/6Fb4gf8Agusf\/kyj\/h9X8EP+hW+IH\/gusf8A5Mr1X\/h1x+zF\/wBEz\/8AK\/qn\/wAk0f8ADrj9mL\/omf8A5X9U\/wDkmgDyr\/h9X8EP+hW+IH\/gusf\/AJMo\/wCH1fwQ\/wChW+IH\/gusf\/kyvVf+HXH7MX\/RM\/8Ayv6p\/wDJNH\/Drj9mL\/omf\/lf1T\/5JoA8q\/4fV\/BD\/oVviB\/4LrH\/AOTKP+H1fwQ\/6Fb4gf8Agusf\/kyvVf8Ah1x+zF\/0TP8A8r+qf\/JNH\/Drj9mL\/omf\/lf1T\/5JoA8q\/wCH1fwQ\/wChW+IH\/gusf\/kyj\/h9X8EP+hW+IH\/gusf\/AJMr1X\/h1x+zF\/0TP\/yv6p\/8k0f8OuP2Yv8Aomf\/AJX9U\/8AkmgDyr\/h9X8EP+hW+IH\/AILrH\/5Mo\/4fV\/BD\/oVviB\/4LrH\/AOTK9V\/4dcfsxf8ARM\/\/ACv6p\/8AJNH\/AA64\/Zi\/6Jn\/AOV\/VP8A5JoA8q\/4fV\/BD\/oVviB\/4LrH\/wCTKP8Ah9X8EP8AoVviB\/4LrH\/5Mr1X\/h1x+zF\/0TP\/AMr+qf8AyTR\/w64\/Zi\/6Jn\/5X9U\/+SaAPKv+H1fwQ\/6Fb4gf+C6x\/wDkyj\/h9X8EP+hW+IH\/AILrH\/5Mr1X\/AIdcfsxf9Ez\/APK\/qn\/yTR\/w64\/Zi\/6Jn\/5X9U\/+SaAPKv8Ah9X8EP8AoVviB\/4LrH\/5Mo\/4fV\/BD\/oVviB\/4LrH\/wCTK9V\/4dcfsxf9Ez\/8r+qf\/JNH\/Drj9mL\/AKJn\/wCV\/VP\/AJJoA8q\/4fV\/BD\/oVviB\/wCC6x\/+TKP+H1fwQ\/6Fb4gf+C6x\/wDkyvVf+HXH7MX\/AETP\/wAr+qf\/ACTR\/wAOuP2Yv+iZ\/wDlf1T\/AOSaAPKv+H1fwQ\/6Fb4gf+C6x\/8Akyj\/AIfV\/BD\/AKFb4gf+C6x\/+TK9V\/4dcfsxf9Ez\/wDK\/qn\/AMk0f8OuP2Yv+iZ\/+V\/VP\/kmgDyr\/h9X8EP+hW+IH\/gusf8A5Mo\/4fV\/BD\/oVviB\/wCC6x\/+TK9V\/wCHXH7MX\/RM\/wDyv6p\/8k0f8OuP2Yv+iZ\/+V\/VP\/kmgDyr\/AIfV\/BD\/AKFb4gf+C6x\/+TKP+H1fwQ\/6Fb4gf+C6x\/8AkyvVf+HXH7MX\/RM\/\/K\/qn\/yTR\/w64\/Zi\/wCiZ\/8Alf1T\/wCSaAO1\/ZW\/bJ8BftfaV4gu\/BcOsWFxoU0MV7Y63apDMqyqxikBjeRGVjHKuA+4GM5UAqW91rzT4Ifs3\/Db9nDStT0\/4c+Frfw5b6nMtxeOs01xNOyrtQNLM7uVUFtqbtql3IALsT6XQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAf\/9k='>\nOut of 3 closest point two belongs to class yellow and confidently we can say that black star also belongs to class yellow as majority vote from the nerest neighbour went for class yellow.\n","3f8aaa12":"# load Dataset","fa9183a5":"### Correlation between different features","847bd3e8":"### fare and Survived","eff9daa6":"#### Sex and survived","376161c3":"### Survived and Parch","bbf0addc":"* <b>Ouantitative\/Numerical<\/b>: Data is numeric in nature,describes measure of an attribute\n    * <b>Descrete<\/b>:Finite number of possible values(only integers)(can also be treated as categorical)\n    \n    sibSp and parch are og this type\n    \n    * <b>Continuous<\/b>:infinite number of possible values (decimal or integers,usually decimals)\n    \n    Age and Fare ore of this Type","4daab0e2":"### Age and Sex","abe948ef":"### Data Visualization and Feature Relation\n<b> Data => Information, Visualization => Pictorial \/ Graphical Representation<\/b>\nThe pictorial or graphical representation of data is termed as data visualization\nWhy data Visualization\n* For understanding the data clearly\n* To find relationship among fifferent features of data\n* To do comparrative analysis\n* The information gained through visual is far beyond any other way.","9641496f":"### Outliers Detection and Treating Outliers\n* Outliers are extrime values which occurs on both sides(minimum and maximum)\n* An outlier can be natural or non-natural.\n* An outlier can be univariate pr multivariate.\n* Outliers ar subjective one analyst can take a point as outlier while other analyst may not take the same point as outlier.Some analyst considerd outliers beyond 2.7 standard deviation on both positive and negative sides of of mean while other may consider outliers as 3 standerd deviation on both positive and negative sides of mean.\n* In a normal distribution 0.4% are outliers(> 2.7 standerd deviation)  and one in a million is extrime outlier(>4.72 standerd deviation).\n* Outliers affects all the mechine learning algorithm.","59f3eb13":"#### Distribution of continous Variablem","655beb0e":"### Decision Tree\n* Decision Tree is a graph that uses a branching method to illustrate every possible outcome of a decision.\n* In decision tree, each internal node tests an attribute, each branch corresponds to attribute value, and each leaf node assigns a decision.","fcba1ffa":"### K Nerest Neighbours(KNN)\n* KNN is a non parametric method used for classification problems.\n* It is one of the simplest yet very powerful classification algorithm.\n* Here K is nothing but the number of nearest neighbours voting for the test data.\n* It uses the least distance(like Euclidean distance, Manhattan distance ,etc) to find the nearest neighbour.\n* It is also said as lasy learning algorithm because there is no learning phase of the model and the computations are hold off untill the classification.\n* Here the dunction or the test data is predicted locally and so it is also said  as an instance learning algorithm.","7a9a41c2":"### Treatment of missing values\n* Filling the missing values with right technique can change our results drastically.\n* Also, there is no fixed rule of filling the missing values.\n* No method is perfect for filling the missing values. We need to use our common sense, our logic, or may need to see what works for that particular data set.","675e0d91":"### Age\n* As per our visulization ,there are no outliers in the age variable So,we will fill the missing value wiyh mean age.","63ba9da8":"#### Pclass and survived ","d765257a":"### identification of Outliers\n1. Visualization\n    * Boxplot\n    * Histogram\/Density plots\n    * Scatter plots\n2. The Mathematical way of finding outliers: Using statistical formula.\n    * Lower limit = Q1-1.5 IQR, Upper limit = Q3+ 1.5 IQR. Observations < Lower limit and observations > Upper limit are considerd as as outliers. This is most commonly used value lower limit and upper limit,analyist also use 2 instead of 1.5\n","6d43c3dc":"* Pclass, SibSp and Age are negatively correlated with survival of passengers\n* Fare and Parch are positively correlated with the survival of passengers\n* Pclass and Fare have relativley high negative correlation","ce03ae46":"### Categorical Data analysis\ncategorical columns\/variables are:\n* <b>pclass:<\/b>A proxyfor socio-economic state (SES):1st = Upper, 2nd = Middle,3rd = Lower\n* <b>Sex:<\/b> Gender of the passenger:Male or Female\n* <b>Embarked:<\/b> Port of embarkation:C= Cherbourg,Q = Queenstown,S = Southhampon","2160b29d":"#### Survived and Embarked","1d25c974":"### Logistic Regression\n* This model is used to fit the line that best fits the data such that the line seprates two classes.\n* This model is used only when target variable is categorical in nature.for eg in this case to predict if the passenger survived or not.\n* The line euquation given as :\n\n<img src='data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAG8AAAARCAYAAADT7fLRAAAC0UlEQVRYCd2XAbHCMAyGJwENSEADEtCABDQgAQ1IQAMS0ICFvvt6\/d9lXbZ2UDbe427XtU2aP\/mTdHSPxyMcj8fQdV3YbDZ67\/KfZPb7fbjdbsiv8ns+n+FyuYTr9RrO53McVwHiGH0HG7qn0ylyABeHwyGwJjP4K47yvY4FNiWcjwSMJ19fcq7gWJu73S6QgHZtjfdW2EhIeMh94nwKx\/UtVZObyff73V13D\/rgYnKsZ6FVJ7BZ3jNQOWmFLeGIVWhNU5V2PninbebscpgHbKD84QUy0WvXYH438ECnq3jn17jVGhtdEL9ku0gcgkmoF4wqRVn54Oi1bO7hVon1DnmtsdHpaJ2616uSU0oCA3FVih8kTUcLE1nJw13XMrFakNcS23a7jdWX332KhzuiRGBwZpaiOY2KkCOlsZYAkUdr4yHR8hZvIMx+bUFeS2z6up\/FQQrmy\/1\/dtQqFCDKcwIH0yd0hwwtVK2m4tieyKvk1WCje4GrNtlIguTX6F+3HnhNII\/q0\/wbRlVdjsXeeTYwyI\/pcIbXGeg2PHmnKHWGMTsWG0TwcH7uQz4nGRJx8e+b\/XDJZQdzDGB4sLHiwliAwKpWRdAFkQBYMrU+NWKDs6ZkvL0SNunQOUrkIWPPww8+XOyazhsbf5kfEyite5mdZ7TmpczGlieDo+oQtEubcDg9K2Pf+KtQwqZYlcijtXpnQXiJ9GgjZd7XfGECCiIsMazhKJWVMjOSa2UI1BLk1WCrIQ+8tnNIhzFV3a+vdi++i\/WUyTEDFJiB8MIL9H\/w4YTuDiqNNUFZq\/JqsAmjV3nEOLX3mGx5zJmnqotdBj913p8YdXlPgaVj2MxlvsSdV4NNuD3ytPdvx9rL2t4L6NTqKXBUsq1mrU+Nc2xAnu7oqTP\/zR4O561kzDnkaCtUg3fxj+m9uj4HG50ATNzDEI7uq3b\/jN6ctrS0U9+A7Qfo+IEHK+EFdgAAAABJRU5ErkJggg=='>\n* The output class is classified using logit\/sigmoid function\n* Mathematically ,sigmoid function is:\n<img src = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAQ8AAAB5CAYAAAAnI6RWAAAOdElEQVR4Ae2d65HjthKFJc2Oa6vuH0fgGByEY3AUzkFpOIebwsSwOWwMDmDtQ\/bhtLAkBRANio8zVSpKFPH6gD5oNCjO5aI\/ERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABEVhG4NfL5ddlKZVKBETglAR+efvlz+v19u16vX6cEoAaLQIikE8AXsb7+\/tfEI3L5fIDL3ufn4muFAEROA+Br1+\/\/na5XO7X6\/UfigaPEo\/zjAO1VASKCbxd3\/5vy5O79zrkeRSjVAIROBcBHxSFF+I9EHke5xoLaq0IVBG4XW\/ftWypQqjEInBOAhKPc\/a7Wi0C1QQkHtUIlYEInJOAxOOc\/a5Wi0A1AYlHNUJlIALnI4CdF4nH+fpdLRaBEAISjxCMykQEzkdA4nG+PleLRSCEgMQjBKMyEYHzEZB4nK\/P1WIRCCEg8QjBqExE4FwEtNtyrv5Wa0UglIA8j1CcykwEzkNA4nGevu5aCnfT\/7R6jebj59trl7lGu85ehsTjRCOgf97k9Z8vX778sWazUS4G2vv7\/35fs1yV1ZaAxKMt383kjmdO4tkLt9vb32tXCl4HnkCFh8dASNYuX+W1ISDxaMN1U7m+Ujg8CD66TgLiqezzPSYEicc++y671maoP7bwaHw+ug4eiJYw2V242QslHpvtmvqKwUBhqHjZk6\/rM63MgWKGgacgaiXMFyeXeLy4A+aKr92lMG\/jhy1b5opa9TvWC0\/jXrVgFRZKQOIRirM+M3gLMCp0DF\/4XOrmD3GODc7w1pbunwWtvfNT30PKAQTQb\/Bo+QBkHNWXLxwbthPS\/fctuPfwPKjuOOYuPWx3o+vYV+yu5CBk8FSP7M+htY1rTBzwT5\/wryU78U+P5k3eSye7bbRwp7WgcHhX3sRi6KQCZb+zUwvSrEqOsQ\/Uc2vLqlVB7KgwjEf0G14YV2Mvfp870e2o+dusKoUD3oUPIqIDMDPDPYSo+O+mWvLgdfT\/V2Pq0pee98Jo3tVL66PCRWB3BBibwAxss\/FPbcgRDSby+Xkvht9v6ejd3616SFvipbqIwECg9yz6oFPU7MtYwh6WA\/S4UNetC93QaXojAlsgYAbDmAbiFFV\/fhejF49t\/5bEPK2u\/VialXhYVaCUWAT2TMAbeuBNXEOgdA\/G6BnMLdv23M+quwiEE\/Beh639q8vwMYQ9bIH64C7EY6vbytUdowxEIIqABQe5XAnZqkwNMUqQoto8lY+P0UTFfabK0nkR2CUBGDcCpNgNwZICMy1fEBN8j9fSxqVLgIhZHPVBvhabuM\/VzwTxjvbNXZe279Fb2s5vcNJ66rMIvIRA6mlQNNJjzVLDb9EiX\/tc3F4YPpZUqEsqclM7In7XBGWXCFeadmq7urghSiACRyBgXgGCmd3LG6UJRne+xnBSI7SyivFBPJAXXj4uQ6EzIRzyHbumZPmR1nup6A0V0hsROCoBGKcXjyhj8e4\/DD018qU8kY+vr\/c+aPg458u387lFDjtEqLfPPycDWyINwkyBrj1G9UtOG3SNCGQRsEE5xDvMK8lKO3eRN14YYVS+KJMigXzpVXAp5oUC50pFy9\/rsUQ8rJ0DT+QR+JpDru9EYF0C3shpiLU16JYa\/e9YBsOJFA8KBY0Sn1F3a0tV9VPxKGUiz6MKvxLvhUBq5KUu+lQ7\/W3uNPBI8UC9\/dLFhCPkjtBa8ZhiovMicCgCqYsdta5OjRsCEike6AQTusGzqQnu+k49gnhwC742zqL0\/YbCXjhg7Jrn64d0m\/c+3oGZHIMuoqQ1xCOtexS0I4iHX4rS89MxNPY0TFpb4+pjfhG2PJmHn71r7ulIC1hHPLof2Q2dWBoYTevMz0cQD2MRvuOzlxn4zPWM9vBpFw9HGLgFAzsDjFSs1jEPNCQNmtqAeWjjkg9HEI8l7VYaEcgmkBqfGU12+rkLW4tHKnxwHSN2WtCmWvGwtuO\/0YW+ooLZc\/2m70Qgl8BwM1RkvIOF2zJoWFZEulPwklBn85a6MvA5Iu6RikepKFncaGh31JoY7SNbHUXgpQR8UC0y3sFGpeIR5dlwhwj58T0NNCLukYpH6YwPAUM9ol+R4ss+0lEEiglggNtMxhkSXkjonw\/GmnGHlNHf03H7hsqm7fBbzfgOdSg1Or+LE1nvULjKbJME4HWa57m4fhi3pWN2cWFLEqbxjogZe6Qew7IIRugNe+Ta0VMA6b+gIPkOevSguv\/f0SXh0ibNw+c39t4vhZbWeyxfnTs2AdgQJrZaw8d4Na89ZLINp+4NBA0uNbCcCqXuv5WZk7S7hsYPcUCHsM4jIjSIFLwpCAu9hyUdyXLM6wj7QV92w3Xh7ghwrEdNwhjDthO6PQHx8YhSo87tWQDwS6OSwGPqGdGQx+o6da11aG51h+sSTyYkCDtkrjeHI2AT1CLPeg4G8106jufyXvxdatRRajlWIVNP2w3p4xRj16XnnPIyJoPjpAp7MYRg1QB\/zCu\/zmkb9PkcBDBebJyHNxjLdHrT4ZkvyZAuFmZzM5Ql2WSl8UsAQChZHkFAeKfgs+WH5QtxuVu6rPqlF6XCOidYaVp9Ph8B2tLIUjoEho3l4mfKhBQ+lok36JoZeizv9Fy6pHgmAmn6tT\/TVeQyaev1XZuPynskQC+1ZsJ6zPHnT1xGtyzj51InznAp0drrYPEsDwbZWqxY5tIjA62oaytXdGndlG5bBDjRrGBH3BCYXLavQsZ7AmsZsvd0xgKeqzQ8sxBfVy1ZMqGd9DKOldZjmkuj1SYzxADG4gu8T6Jk56N2bFCh14ix1NaVbuimglS1jVL6JgQ4VlrFO1hpbz\/Nl9FoDAY\/lMoXxkrg\/JiwsLItjhQtCIivU4uyluZJPqij1XdpVkp3cAJ+rOTsViJegetgm+n4N8\/inp4nQtgq7Lm3nfe\/eD78aKIwbG9yaYLzEA1UYqqS4ZVxGXrYG14OcG25WYFzSPX2hQT88v+ZeEA4sLShAPjJm0ufOa+ctotrmi6RHgq63r6j4lOeyNrs6X0A3tpl55Rn9ZLXkQPr5NfYUgWPgci+\/aATEXsoOAQHEzvGnNnnh+U5SpY7Ls3DDZjlUQgahsrZ2mz2XzOO1jj4JOBRfekRBRexODurTzcYUM\/FGSnhWQh0XirGc8l4oafR2+ftW27aT\/FY6aZFeCG5lVurx2mkW\/M+1gp+rcU5pxyMD8x2WxPynLpHXIPZv\/QFZij705jLxIPjvzR+4ctjHSIY7C6PYflye\/t7I5XvZpGzBEkpGmdfprH9MOTcF+MbHMOlngfY0\/sumdglHk4pONO\/etazwdA9wvDoio7B6gN3NJimQTjX51t7i\/4ufbEN3phLRMCLx1yMg+Xw6Ms7+jhlmyePAE4BecXuDyrmhWOyogf5Ykw0zi4eNV3rYhfFMQ96HiWeLsUD3tLpxQMdBwgAWOr61XQ603LrGOUfvTOsfd19BHjPgS\/x4GgoP5rXULTbgskKE+Zn2s\/g57MxSPGwY3mFD5xi8gaZVm225dJrfyvQqnFP8qVwSjyegJr52gc+GQcZuxys4WV3on29fUc6EwrGWbqn9T9bOlI8SryVsfronAhUEbA1Ogdv2xuPqmq63cRegKfEg9fAs8ZywwsEg7XmeX\/MxU0gNlzqbPgGy+12lmoWR4CDurXn0bvp\/f+umTOOuJatmxMFYCrwiTbjmk48kp1FpMF5LGOescH3FI8poVq35SrttATWEg+u7SFSzwxkj51hS4hZzw1egy1Tfmri1Pn0QhOMovhKmoc+i0AIgSOKB9oEsbKlwR3vrZ0hzMYycUb9MfZ91DmKsF\/2ROWtfESgiMCRxINLI3g3XVzBfjvCJRmWBS3vJeLSJdeLKOoou5geTmsxXFI3pTkZgaOIxzAjjzx6grsTFBG7NrynWYdWAgVRYmwkvPLKUARKCRxBPLhVipl\/bNbvja67j2LYVWpl4H1Q9POejdL+mLue4iSvY46SvluNwN7Fw+8+zAkCBYbex5TQ1IJn7GOuLkvLGNupWZqX0olANYG9iwdjAPbzhkketsMzeB4QETP0yTRLv6CHELmrhKXXszYura\/SicAiAnsWDyxHGKSEYUEMpl40aHoedmx2VzHKQ90iBKS\/eez2bWxJtqjTlUgEIghEiAcG9bOXN16U+ez6HEPhEiERhAfvgt\/1gUbciPX5an2HJpYuxndxV4GDsVuchxKKQBMCteKB9N4g597PGfJIuqf3S3hBgueRI0jpNU2gKlMROAOBtcSDwoHjiFA8eAT991k7Ft2Dm\/o8s64\/Q5eqjSKwDoFa8UAt09l87LP3ElDm2DXpuWcEGCyVeDwjpe9FoAGBCPHIqZYXj4ggopU5eB4QkMB8c5qka0Tg3AT2LB5ekCAeJQFQ7sqcu\/fVehGoILBn8Uh3WxAryfU+cG2J2FQgVlIROCaBPYsHYiQmAsP2bOaj+brljrX9mB2rVolAawJ7Fg+wsZ+mD+KB5QsCqVMeCJc6mSLTGr\/yF4H9EjAjG4yv1XMiaLTRgc0x7wNlwCNBW3CjFpY3KN\/\/ulZex37HrGq+EQKp59Hq9xOtxAMY0x+9WfB0EMT0s9VlIz2gaojAjghgtobHAaMzsUgNrXuC\/ZTrv6SpLcUD9enb0gVB07akn5v9nmUJF6URgV0RgCHzx1YQj\/4Xm\/3Difv3\/bm52EFpg8248Q\/XZ58OXpqvvx5ih6XKSBAVd7B+2O6MT6L3IiACIvBJAJ4V7+PAMdKD+ixF70RABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABERABP4j8C8JW2i2wxZwbwAAAABJRU5ErkJggg=='>\n* Graphically sigmoid function is: \n<img src = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAfIAAADYCAYAAAAQ0WE0AAAgAElEQVR4Ae2dz4smx3nH508YiE8+Dfjiwx5GJ+HbhCAdZOwsbHJVVjoEArtmTs5Bhx0QiMSwYgnIsCwiL8SOYFHwHIxYsLAGjNdYPmhYJDA2yOusfdDBsJaN8a3Dt7X1pt56q\/vtqrd\/PNX9GWi63urq6qc+1fN+36d+HhzwBwEIQAACEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQAACEIDATgL\/+vffq3YmIgEEIAABCEAAAvYInN\/9sHrpS28g5PaqBosgAAEIQAACzQTuvvaj6pXn3qpFHCFv5sQVCEAAAhCAgEkCn378WfXop7+t8MhNVg9GQQACEIAABLoRkJjjkXdjRSoIQAACcyFQfXJZVQ8vxj0enFfV7bNlHfdXw3ddI+Rz+bekHBCAQKkEqs+fbgvqvTvNgnftpKqajheOq+rLBxxWGFw7sSPkp6en1cnJCQcMeAd4B3gHdrwD\/\/R3J9XZi18cP\/j6SfXBN06qj74ZiK8VocGOQX\/0fPSVQztCLhEv9dcudm8ToD63mZQac3FxUZ2dnfH\/OWIFrpukXTOx846\/ejioKOBpl9fS8MHfHAz\/v9m1aZ0v\/hG\/JUZ4FPU5AuSRHoGQDwe6Fuz7qy+auCXWCDU\/VBJbMBDy4f4\/F58zQj6fVwAh76cua9FWv\/Tp9aqy3s8s+1wrQOzsWgrazvqBMvZgt4cXw3un\/bwOveUyynetpqF1WdltFGN6Q0dGuwhQn7sIlXMdIc+rq1rEJHQSwkQvKzu9L8C3TjcHsz0T1dU\/X68++u6dqnryeHGil1eTtu8y9V1ryhjb9VaEdavVCFMiiiBRvpEIebc6lDBW8rhfvdq\/cD9\/9MUPAuXtvGDn7SYKsurz8WNEvFut2k9lSjtNGWO\/7rAQAqMR0Je+vvxHe2BBD1qLdx9N5U6sJdT6QSChThTpgtBhak8ETGmnKWN6Akw2EJgDgadPn+LBeRVZz8mW0O4j3rpXfeVOsD9\/yg8ljzHB7gRMaacpY7ozJCUEZk\/g8vKyoqvk4KD2kCW+qf3dGomuJnGJ9ieXCPbs\/2PGLaAp7TRlzLj1wNMgAAGjBGrvW6Ov1eydIuAa4IZwG63VeZllSjtNGTOveqY0ENiLwBIHu9UCrr7qrvO6lU7eukSfZvK93jduTiNgSjtNGZPGkdQQgMBMCCQLuJrMEe+Z1H6ZxdhLOzU\/XEfXon\/2v0\/rbU2b0u9lTFOmxEMAAnsTWEIfeZKAq5ldzeYFeN5P\/\/Kn6uy971aXv\/tl5+\/qvV8YMhiVQJZ2SpBvnLxdb02q7UkVVlyT5X\/+41\/rBWGU1h13X\/vRVvosY5oeSjwEINAbgbmPWq+09WWXPnB53w\/Ot767egPdY0ZOwA+\/\/bXq4OaV6uLXvyjC7h4RLCarLO3UKm2vv\/xuJYHWoXDbym0S7Veee2vtvWvt9X\/8ypvVz9771caLlWXMYqqKgkJgOgJznUdezwHvsuqa+r4Lms+9+vl5dXTrxVrAJeII+XT\/O2M8OVk71ZQur9r3wBUO43zjJeLvv\/NoQ7Ql7voB4KdLNsa\/mTAEIDAYgTkKeb062q6BbIUJuF4AibhrRr9671trMccjH+zfY\/KMk7VTgqym9NByxYVi7dJI5OWFu886f\/87P6nF349LNsa\/mTAEIDAYgTk1rXfywgsU8Fjlq28cjzxGZl5xydopAY41oytO12J4JPLhNaWXwPvpk43xbyYMAQgMRmAug93q0eVtXrhWW5vR7lkI+WD\/EqYyTtbOHCFXX7hE+80bP6wFXSKu5naE3NS7gDEQmC2BekS6Bqo1Legicb93Z8OxmAMMhHwOtbi7DMlCfn73w0aPXNeaHqmmdQm5RFzpYvnImPBgWcgmosRDYDwCJS8IoyVRW9dE12C3ggaypdQ6Qp5Cq5y0oU4eHh42am+0VBJkedIare4SKKy4pjnlusdPr\/s00C2cgpb8q8IZwBkCEIBAhEC9NnpTU\/pMvXAfA0Lu05hvOEs71Szu93krrDiHKVwoRqLtj1B3Pwb8ke+6N8sY91DOEIDAYARK7COv+8ObmtLVF76AzUsQ8sH+JUxlnKWd6vPWPHANYtOhsMTZlUzN5zrcZwm7S694ee+xEe5ZxriHcIYABAYjUNqo9XrN8yYRv3W6\/m4aDJiRjBFyIxUxsBnZ2ilv2vV1h5516JGrDC69vPemJvhsYwaGRPYQWDqBkuaRt4r4\/dViRFzvLEK+jP9cU9ppyphl1D+lhEAnAqUIeaOIqz98RtPKOlUaQt4VU\/HpTGmnKWOKr1oKAIH+CFhvWq+nl2kRl1hz+kL6w2O1jUceozK\/OFPaacqY+dU1JYJANgHLg91qEZdYN4l4ATuUZVfMjhsR8h2AZnLZlHaaMmYmFUwxIDBnAoh4e+0i5O185nLVlHaaMmYuNUw5INADAasLwjT2ictDX7An7qocIXck5n02pZ2mjJl3vVM6CBRPoFHE1VeOiNf1i5AX\/5p3KoAp7TRlTCd8JILAMghY6yNvE\/Fl1Ei3UiLk3TiVnipbO7UojFuxTeFdILRgjFtrXUuzhnPPdX+2MbseznUIQGAvApZGrTeu2EZz+lYdI+RbSGYZkaWdWghGK7VJkHUorLgmQm5JVn\/3M90TinmWMU0PJR4CEOiNgJV55Ih4WpVe\/95r7EeehqzI1Mnaqc1PJML+EqsKK66JgDx3ibh\/XWuzh+KfbIyfIWEIQGAwAhaEvN7FjClmnev4\/NGPq8Nvf20t5Ffvfat6\/Iffb3wPd86MhKYJJGunvOuYaCvOX2\/dLzVC7tMgDIHyCEzdtF5PM3v+aHuuuFZsW8DmJylvzMWvf1GpSb3tQNBTiNpPmyzkWivd3xDFFVFx\/o5oLl5nt2mK37SuzVbCrU2TjfEfQhgCEBiMwNSD3SrtGR5644j4YPVNxmURSNbOXCFXU7oOCb4Lh5unJBtTFmushQAEMghUt8+2RVyi\/uCcZuIMntwyPwLJ2pkj5BJvfz9yYdTn0LOXMWdnZxuHFqKYH3ZKBIGyCEy1IIzEessTl4gvaCvSst4UrB2DQKiTR0dHaTqpqWbyqENjFdc0DU37j4f9524ku5+PhFxfGP6hQTZ+GsIQgMAyCFRPHleVms\/DJvVrJ3wnLOMVoJQNBHyNVPj4+Djtf0JTxkJhdqIc9nk7G8JR7orXSPfwB0Fy84B7AGcIQGBQAlP0kVexjVA04I1V2watazIvj0CWdmrQmgaryQPXobA\/vczNL3c43FxzibdE301XCwfHZRnjHsIZAhAYjMDYo9Yb+8UZoT5YHZNxuQSytFOetxNnedsK+whCIdc1ibYEX968PPFQxJUmyxj\/wYQhAIFBCIw5j7x6eLHdnK7m9Xt3Nr5nBikomUKgQAKmtNOUMQVWJiZDYCgCYwl543zxV68i4kNVLvkWT8CUdpoypviqpQAQ6I\/AWE3r0c1QNOCNfvH+KpOcZkfAlHaaMmZ2VU2BIJBPYIzBbo1TzZgvnl9x3LkIAqa005Qxi6h+CgkBGwTqJvXYVDPmi9uoIKwwTcCUdpoyxnS1YRwExiWguapahGKop1avXt0e4Ma2pEPhJt+ZETClnaaMmVlFUxwIWCXQ2KTOVDOrVYZdxgiY0k5TxhirKMyBwJQEhuojb2xSvz2c99+F48l\/vFJx2GRw+btfDtYy1OXdsJjGlHaaMsZibWETBCYiMNSoda2ZvrUE6wuJy00OwAQRtyniqheEfPuFz9bOtgVh\/MdohzNtjtJ0+GmzjfEzIQwBCPROYIh55I0Lvzxko6TeK5AMZ00gSzt3LdHqE9Pa7FrFLTy0ypsOP22WMX4GhCEAgUEI9C3kjQu\/MEp9kPoj03kTSNbOnE1TQoRan11Luyov\/1qyMf7NhCEAgcEI9N20Hl1LnQ1RBqs\/Mp43gWTtlAiHu5YJUds2pj5CrdMe2w1NaZKN8TMmDAEIDEagz8Fu9fak4dak+kyT+mD1R8bzJpCsnWoiV393iEVxsY1QwnRN9ytdsjFh5nyGAATME6iunWwPcGMtdfP1hoF2CSRrZ5MQdxHyWLO8jybZGP9mwhCAwGAE+loQJjrAjbXUB6s3Ml4GgWTt3EfINdI91izvUMuY8FitVlvev0vPGQIQKItApX7wsFmd7UnLqkSsnZxAqJOHh4dpOvnop7+t+7jDkqjfW9fCeP+z0pzf\/bAxTfKvCj9zwhCAwGAE+ugjbxrgNpjRZAyBhRBI1s7YYLX333kUFXefoQbJvfSlN7ZGqvtpko3xbyYMAQgMRmDfUeuNK7gVOsDt6V\/+VJ0\/+nGjUzJYRZAxBCIEsrRTzevyrtVU7haG8T1tt\/iL\/7xdzepKm2WM\/xDCEIDAIAT2nUce3We8wAFuEvCz975bHX77a\/USroPAJlMIJBLI1k552K+\/\/G59KOw\/Vx66jl1x\/nWFs40JM+IzBCDQK4F9hLz65HK7X1z95E8eb3xH9GrwAJmtfn5eC\/jBzSuVDi0XOsBjFpOlllp9\/IffbzBUnH4sLQZCTwU1pZ2mjOkJMNlAYA4E9mlaj043m3hTlJQ6kdjIC1dT+p0P\/qsW8TGF\/OLXv6ifH4peShkspXXlEcPjf\/uHtWhf\/95rNdur9761jrNkt2VbTGmnKWMs1xq2QWBkArmD3aJblJY+3Wxkj1w\/IiR6EsCRq33Qx9WCffNK7YGrjPLG9WOJTVHSsZvSTlPGpLPkDghAICAQnW52v\/AppQh5UMt5H13rxun\/\/DsDB\/MQru8ypZ2mjFkjIgABCOQsCFPdX233jRvYonTv2kTIDyS+4VavikthW7cwMNYgBVljWlPaacqYRmRcgAAEdhGY23SzjfIi5L0Iec0UId94tXI\/mNJOU8bkEuU+CMyQQGofeXTxl2snSR6bWYwLEHINrFPTt\/qx5XnL2+57NLnzyDWVz2xdF2KYKe00ZUwhFYiZEBiDQMqo9Xp3Mw1oC5di\/eRyHl\/YMxZyibVGjx\/denHdb+36svucbuee4wbyMcBtv\/\/ibO3UBihaBEZHuK94k0mffvxZnV5zzLVCXJgu25gwIz5DAAK9EkiZRx5d\/OX0+tb\/e68GjpnZTIVcYirvWFPCfO\/bec4aOd8XZv1Y0DPq1fFuXqk0R195u3Nfz1lKPlna6dZbv3HydqWjyzrrb974Yb1Eq1Z908Ypuif8AZBlzFJqinJCYEICXYU8ute4vPPCFn9pRT1DIXciLiEP56s7r3lfj1zN88pLHr7zwOsfDM\/6yRXPsretb17jxSztlBBrmVaXq8Jtu5pJ+LXOujxyd49WhZO4u886ZxnjZ0AYAhAYhEDXpvXSF3\/pBG9mQi7hrvupb175YsEbD4KE1l3bV2Tl6Suv0OuWwMfiPTMI7iCQrJ1OlP2mcYVDofafK8EORVveuC\/sSp9sjP8QwhCAwGAEugx2W8xe4z0JuQRUzda7DrfimTzWXWl13W8W7\/JC1Kur3bxS94v76ZWPu1bb4F8kbIpAsnaqT1zN42EpFOdvnOJfl7eu9djdvRL12Janycb4DyEMAQhMSiDqjc9xr\/GehNw1Wdd9z8\/y7CMsMe\/6ItTe8bNn+56yvG8NeJOnvK8n3tUW0uUTSNZONaM3Cbnf3O6bJG9dYq77lEZCrrhws5VkY\/yHEIYABAYjsGtBmKg3\/vxRZ0EZzPAhMu5JyCW4EvNdR903ffNKPZp8V1pdD\/u42xBIrPXjQYKtfmt5\/YrTobxSvfu2Z3FtOALJ2pkr5KH4Kx8NlPOLJmPOzs42Dn2B+GkIQwAC9ghEvfHSl2JtwtyTkDdlH8ZLUCW2KZ52mEfscz3g7FlZJNzqq5ZX7gaixe4hzgaBUCePjhJ\/NGvqWCjAKpriwq1LXZE1Qj301l1fu0ujs4Rcwu0fGi3rpyEMAQiMT6Ctj3xR3rjQz0TIm5rVx3+7eGIqAV8jFT4+Pk7TSQ1QU7O4P3VM4TDON0wj1O++9qONB0n0w5Huyc0D\/kMIQwACgxFoG7W+KG9chGci5M7TH8LbH+xFJOMogSztVDO5xFmj1XUo7DedS6R971x94f5ccwm\/RDz00rOMiRaLSAhAoE8CTfPIF+eNC+pMhFz94a4sbQPa1NTedr3P94y88ghkaae8cjWlywvXobDvoUvUfWGXaRJtl15nXfensClNljF55eYuCEAggUCjkD9\/tL0U61z7xg8ODurBXzMR8npQ3I6ySOw12I5Bbwn\/LBMk3Us7JejhXPC2Mki41Tfui76ffi9j\/IwIQwACvRKINa1Htymd60j1ZzR9L1YjvccQONcE3vdgNxVJm6I4r1yCLc9bz1H\/uT5rAFyvLxKZDULAlHaaMmYQ3GQKgTIJxAa7VTFv\/OE8Z5lITLUoisQtPHTNn4Pddw0PKeT6IeIWnHGCrrPiUqax9V1m8ksjYEo7TRmTxpHUEFgUgag3PpdtSo3V5JBC7ooqQZcnPoTX757BeTgCprTTlDHDMSdnCBRHQFNcNHfVGb4kb9yVearzGEI+Vdl4bj8ETGmnKWP64UsuEJgdAbzxcatUXrLEnKbucbmX9DRT2mnKmJJqEVshMDABv48cb3xg2GQPgUQCprTTlDGJIEkOgTkTcKPW8cbnXMuUrVQCprTTlDGl1ih2Q2AAAm4eOd74AHDJEgJ7EsjWTi25qtXadITLr8ZscovE+Gd\/9Tfdk21M7IHEQQACvRGQkH\/wL9e3F39hpHpvjMkIArkEsrRT25BqNTctvapDYcW1GaHV3LS6m3+Ee5JnGdP2UK5BAAK9EFDTOt54LyjJBAK9E0jWTrdBii\/CbiezcMlVZ6277j43nZONacqIeAhAoFcC9I33ipPMINArgWTtlAce7lomixSnazHrFO\/WXpeos0RrjBJxELBLAG\/cbt1gGQSShVxN406UfXyK0zU\/zoUV7\/rT3cYpSh968MnGuAdwhgAEBiOANz4YWjKGQC8EkrUzR8hdn7rzxOWVy4MP+9WTjekFAZlAAAJtBPDG2+hwDQLTE0jWzhwhjxVTI9blpfvXZEx4rFarjTR+esIQgMCwBPDGh+VL7hDIIRDq5OHhYZpOypsOBViGKE7XYkYpPmxGV5ya2f30yb8q\/JsJQwACvRPAG+8dKRlCoHcCydopQZZo+3PAY961b6nSh3PN1az++svvIuQ+KMIQMEQAb9xQZWAKBFoIJAu58nKD1yTObmGY87sfrkVZA9n8AXESennfEm\/dKwGXuH\/68Wfre5RvljEtheMSBCCQTwBvPJ8dd0JgTALZ2qkpZRJkHeG0Mwm377GrQGpKl5BL4CX+buCbX9hsY\/xMCEMAAnsTwBvfGyEZQGA0Aqa005Qxo1UBD4KAPQIxb\/w3\/83AU3s1hUUQMNaajZDzSkJgegJ449PXARZAIIWAKe00ZUwKRdJCYEYEYt74B2+cVWdnZxtjWmZUZIoCgaIJmNJOU8YUXa0YD4E8Anjjedy4CwJTEjClnaaMmbJWeDYEJiIQ88arhxfV5eVlxeJME1UKj4XADgKmtNOUMTvAcRkCcyPQ5o1rG1PtST63MlMeCMyBgCntNGXMHGqXMkAggUCTN64sJOIXFxcIeQJPkkJgLAJ7aacWdAkXdeliuOaQM4+8CynSQGAcAm3euCxAyMepB54CgRwCWUIuEb5x8na9WptWbFM4Jswxg5ROq7pphbfwepYxYSZ8hgAEkgm0eePKjKb1ZKTcAIHRCGRpp1Zn04puWnddh8L+kqxt1rsfAAh5GyWuQWA8Aru8cVnCYLfx6oMnQSCVQLKQqyldXrjvgSscxsUMkXhL8HUg5DFCxEFgXALV50+rXd74uBbxNAhAIJVAspBrDXV51eGDFBeur+6n0VrralKXB4+Q+2QIQ2A6AtXts6r68sHmce1k6\/9bA91YEGa6euLJEGgjkCzkzqsOM20SZ6VzW5+6zVWa0iYbExrBZwhAoDOB2hv\/6uGmiEvUHzI6vTNEEkLAAIFk7cwRcvWha+czV942Idcvf\/9g7qqjxhkC\/RKIeuOn19f\/p\/7T6CP3aRCGwLQEfI1U+Pj4OPp\/22il9h2XEIcJFOfvSe6uq0ld\/efaulQ\/AnS88txb0eZ1\/apQ851\/yEiXF2cIQKAfAo3e+JP4oi+MWu+HO7lAoA8CvkYqfHR0lKaTTpjVXO4MUlhiHZtTrjiJvH+or9yJuctD5+TmAf9mwhCAQGcCKd64MmUeeWe0JITA6ASytFMiLM\/aWeu8bPdZ4h0TdXddou7f7+KzjHE3c4YABDoRSPXGlSlC3gktiSAwCYEs7dSgNXnVGqmuQ2F56q4Ezvt2n8MzQh4S4TMExiOQ6o3LMprWx6sfngSBVAJZQq6HaO64+sR1+HPKdW2XR67r4T26L9uY1FKTHgILJVA9ebw9Sl0j1Rv6xh0mBrs5EpwhYI+AKe00ZYy9usIiCOxNoDq9vi3kDSPV934YGUAAAqMQMKWdpowZBT8PgcB4BDQ\/fGvxF80j\/\/zpulusyRrNHtHo2KbrxEMAAtMRMKWdpoyZrk54MgQGIVBdO9kW8tuI8yCwyRQCIxIwpZ2mjBmxEngUBIYmUD043xbx5486eeOyjT7yoWuI\/CGQT8CUdpoyJp8pd0LAHIHoxij3V52byhm1bq5KMQgCawKmtNOUMWtEBCBQNoHq3p1tb\/yFtCUdmUde9juA9fMmYEo7TRkz73qndAsh0Lj4S+LGKAj5Ql4YilkkgWzt1KIw2gxFh9vVrI2AFozRxilaDEbrrjOPvI0W1yDQD4Ho4i+RbUp3PY2m9V2EuA6B6QhkCbkWgdFqbhJkHQrHNkxxxZLQay12CbmWZpWY6x5\/vXalzTLGPYQzBCCwQSB38ZeNTJ59YLBbjApxELBBIFk73d7i77\/zaD1QRmEJc1ORtIyrBN+\/rvXaQ\/FPNsbPkDAEILBBIDrdjMVfNhjxAQJzIJCsnWoij4m24vz11n048sDDTVQk7gi5T4kwBPojsM\/iLzErWBAmRoU4CNggkCzkrmk8NL9pIxQ\/nfrFJfbKQ8If9pMnG+NnThgCEFgTiE43u3dno1VsnZgABCBQNIFk7dxHyHWv+sp1yCOnj7zodwfjjRKITjd7\/mgvEaeP3GhlYxYEcsaX7SPkjrg8cQm5vHgXp7N+VYTHatV90Qo\/L8IQWCKBvqabhewYtR4S4TMEpiMQ6uTh4eGGlu60TCPQNVAtTKi42DQ0ibbEP0yvJnZ55n58cvOAfzNhCEDgILq7WcZ0sxAl88hDInyGgB0CydopYZYA+wPbnCiHTeUqpkuvs19sjXQPfxAkG+NnSBgCCycQHeDWYa\/xLtgQ8i6USAOBaQhkaafmg6tpXB64DoUV54rg5pe7z2pCd+kl+m4eeuipZxnjHsIZAgsnUL1wvL0Ua0+7m9G0vvCXi+KbJpClnfK83UIwGn0ezhEPhVzpJfTywN1At3DqmShlGWMaL8ZBYBwC0RXcOu413sVCBrt1oUQaCExDwJR2mjJmmvrgqRBIJlB9crntiatJ\/cH5upUsOVNugAAEiiFgSjtNGVNMFWLo0glEV3B79WqvIs6CMEt\/yyi\/ZQKmtNOUMZZrDdsg8IxAdM54j03qgIYABOwTMKWdpoyxX3dYuHAC9aYoEm01o\/vHACu40Ue+8JeN4psmYEo7TRljutowDgIHB9Em9R7mjMfYMmo9RoU4CNggYEo7TRljo36wAgJRAo1N6k8e99o37h7OPHJHgjME7BEwpZ2mjLFXV1gEgZpA4yj1nuaMxzAj5DEqxEHABoG9tFNbk4bbk7YVS\/PJtSBMbAU43beXMW0P5hoEZkQguvDLQE3qDhtN644EZwjYI5ClnVpuVSu1aXEXt8BLuASrX1QJ9+svv7tOr3vCRWSUPssY\/0GEITBzAtWt082BbRrkpgFvAzWpO5wMdnMkOEPAHoEs7dSSqxJmCbQT6XAnM7+oWopVq7o5sZdXrhXhwtXdsozxH0QYAjMm0LiWOgu\/zLjWKRoEdhNI1k41pcujdqKsRygcxvmPlohrkxQ\/Th55KP7JxvgZEobAjAk0bk\/a88IvTQhZEKaJDPEQmJ5AsnZKkNWsHpquuFCsXRp55L7wK15CLq\/epdE52Rj\/ZsIQmDGB6FSz548qCfyMi03RIACBDgSStVOiHHrSeo7iwt3Mmp7vtj0NhT\/ZmKYHEA+BGRGI9ourb\/zhxWgiTh\/5jF4oijI7AsnauY+Qyyt3g95iop9szOyqgwJBYJOANj7ZWLXNreB263Q0EZdFjFrfrBc+QcASgWTt1AC1Jo88HLzmF1TX1I+ue5umrMmY8FitVqN+Yfk2E4bAlATq+eKxJVgHnmoWKzPzyGNUiIPANARCnTw8PEzTSdcs7s8FV1gi3STQEnGNUte9bcVO\/lXRlhnXIFAwgXpw2wvH2974RP3iCHnBLxOmz55AlnZqFLrfNK6w4hwtCbov6hJx\/7NLF56zjAkz4TMEZkCgOr2+LeJqVv\/kcv1\/NmYxaVofkzbPgkAagSzt\/Nl7v6o9bI1U1xF622o+d83vEnB567HDpXEmZxnjbuYMgZkQaBTx+9N1MzHYbSYvF8WYJYFs7dTANTWZ6winlvkeuZrd1aQeO0IvPduYWVYNhVoiger2WdwTP70+iSe+xDqgzBAojYAp7TRlTGk1ib3FE6jur+Ii\/sLx5CLOgjDFv14UYMYETGmnKWNmXOkUzR6BNhFn0Rd79YVFELBEwJR2mjLGUi1hy6wJNG5LqqlnRlZuo4981q8ghSucgCntNGVM4RWL+WUQqD3x2FxxxU00Qj1GjlHrMSrEQcAGAVPaacoYG\/WDFTMm0NicbkzEVQXMI5\/xi0jRiidgSjtNGVN81VIAywQaRXzkNdS7MkLIu5IiHQTGJ2BKO00ZM35d8MSFEGgUcXniE84Vb8NP03obHa5BYFoC2dqpRWG0AYoOhbsWQzuehbueuXuzjXEZcBvVM0IAAAi+SURBVIaAcQKN88QNNqf7KBns5tMgDAFbBLK0062drj3FdWhlN8XtKpoWhwmXd\/XvyTLGz4AwBAwTaFyxzbiIG0aKaRCAwMHBQbJ2Sowl3L5XrbDimohqBTctx+qWafXXaffvSTbGv5kwBIwSaNwARf3hhYg4C8IYfbkwCwI5Qq6lVmOirbim3c38ZVq1NjtCzru3FAL1HHHtWOb2EffPhYj4UuqKckKgVALJTrBEONzsRIVXXJNA+3Da0iUb42dMGALGCFT37sQFXGKuLUqNLPbSBRt95F0okQYC0xBI1k6EfJqK4qnlEKiePK6qayfNIq4tSgsScZFn1Ho57x+WLo+AOSE\/Ozur\/EN9c8urFkpcKoHqwfkX\/d5+E7ofvn1W5PvMPPJS30jsniMBXyMVPjo6Svte0VQzjTwP4SiuyzS0XU3rEm7\/0BdI+Cw+Q8AagZ1euPrDH5wX+y4j5NbeOOxZMgFfIxU+Pk7cIVF7j2v0uT+wTWHFaVDbLri7hHzX\/VyHgDUC9dxwCbXvefthNbM\/KfsHKU3r1t467IHA\/xNIblrXrW\/e+GGl0efywHUorDiXrZtf7j77Z4Tcp0G4ZALVw4uqahqR7oT83p31\/0XJZWWwW8m1h+1zJ5Al5PK83UIwmnamsA+qTch1zZ+D7t+XZYyfAWEIjECgFvC2wWwScY1KN7R72QhYeAQEIDARAVPaacqYiSqEx9ol0EnA1cRe6IC2NvLqh9OgmrY0XIMABKYhYEo7TRkzTX3wVGME6lXZ7q92N6HLC3\/1avF94cbwYw4EINCBgCntNGVMB3gkmS+BehS65nu3DWJz\/eDqJ38472mS9JHP912nZOUTMKWdpowpv24pQSKBWry1Gpv6t51It50l4Ea3HU0s+s7kjFrfiYgEEJiMgCntNGXMZFXCg8ckUIu3ms7VLN4m2v61BQm4qwvmkTsSnCFgj4Ap7TRljL26wqKeCNQbmdw+6+55OxGX2Be8qMs++BDyfehxLwSGJWBKO00ZMyx3ch+RQC3cajKXEHfp83bCrbPS3zpd\/CA2mtZHfGF5FAQSCZjSTlPGJIIkuQ0C9RQxibbEd9dcb1+ww7BEfyH9311qjsFuXSiRBgLTEBhcO9sWjgmLPLgx4QP5XCyBWrC1QYmayCW6u1ZYC4U69vmZeJe2M1mxlYjhEIBALwQG1c5dS7mGJRjUmPBhfB6cwGq1ylpApG4K1\/KnTqgl1vKu9\/GwY8KtZnPEu9N7wIIwnTAVk0j1yYZUxVTXTkMH086czVUGM2YnBhIMQUD1WS+oIlF2hy\/OrvlbAt11yldMkFPi9Cz9MJj5vO++6xMh75votPlplT7V6bRW8PS+CAymnTnbnQ5mTF+0CstnS0SdmLadJXJth\/OMY+exxLircMseLeqCcO\/95iLkeyM0lQFCbqo69jZmMO38\/nd+Ummns9DCtt3P\/vOlZ82nMZGYIi51hHNXgSFd9znbXVipnvR+yMPXQDe87fDfbu\/PCPneCE1lgJCbqo69jTEl5B9846TfL\/guIkCaMphrMJvE2nnYWsRFLQuF7\/O993\/wSBkg5COBHukxCPlIoEd6jCkh\/82N62WICuLfXz2p+ftZa8tH3zyp9GPuB18\/qc5e\/OK4+rcnlV5SDhjwDvAO8A40vwOD\/GZ49NPfVtqrPMxccboWxutz3ZeJSPYnkkOw9ITXCfDGOda\/HvTJx+qeOAhAAAIQMEbgz3\/8ay3k77\/zaC3aCsfE3ZmuBTg2RGGKfnH\/ma4ZNyZOpcQFIroePd4UT1O1ex05QwACEICABrxJuLUojFsY5vzuh2thhxAEIAABCEAAAsYJaBra6y+\/Wx8KGzcX8yAAAQhAAAIQgAAEIAABCEAAAgslcOPk7ehguE8\/\/qzStZe+9EZ91ueFIiqq2KonrR0QHtRfUdV44LrGXFdZWdZjrU9AdRn+PyrOT0O4DAJNeqkxamoJl16+8txblT9WbdCS6cHqP9eDw1HtbrlX9bnrms5Kp\/hBjSLzvQmovvQiqc78g7rbG+1oGaTumTCaYTwoi4BEXHXq\/z+O9kWfZTE3hQTa9FJp9Z0rIdf3rxtkPngdO2GWOMeEXC+dXj6\/MPrMr0ifiM2w6jasO5uWYlWMgPsR7f+4Vlj\/p\/oyid1DnG0Cse9Y2xZjnU9gl1464fb\/P3WPvHc\/n0HDsZdMBoS\/JvR5VMMGLfV8M9ePLb1EeqkkAP7LNd9Sz6dkOXsmzKf08yuJ\/v\/0HauSqXuLLq6y6ziml\/rOlfPrl8z9IB\/t+zdmWCzOeQW+sYTtEZA3rmYe1aE7aEmxV09NFjW1qKheda3pPuJtEnDfm\/7\/pMIIus362mVVTBub\/jdjaXflH72uXwV6kdwR+3UQe1gszr2Q0QcROTqBprrVl4R+Hbq6VkuK6jNsYRndYB7YiQBC3glTMYn0f+evrqn\/W\/dju5hCYOiaQEwbBxdyfSnowe6QGK8tehaIGRaLQ8hDctN+7lK3zkIJuwZiuM+c7RJAyO3WTV+WuWZXvPK+iI6XT0wbBxfyLsVrMixcEU6fZXCXPEkzDQF54bEfa03iMI2VPLWNgOovtqyy79W13c81WwQk1hLu0KrY926Yhs\/2CMTqTd+voaOkelfa0UrQZJiaaH0j9DkUd\/864ekJuJcnXNGPupu+brpaoB9jEm2\/K8Q1z3bNg3R2COgLPhwkTH3aqZ9US2J66Vqr\/R9so7eCxgxzXyauyUBniYHrd00tPOnHI6AXSELgRq\/rS0QHdTdeHez7JP3Cd3WoelSYH9H7Up3mfv24Vv2571LVp75z\/R9q01jGU3MIxPRS+TiN1P+u+w6OtY7mPLPTPXqw\/0vC3aQvfr10MlBnhMCRsX\/Wl4Q8AdWdBIC6s19noYXsmRASKfezvl\/dd6m+5Ef9gi8Xm0nLm\/RSxrruZ9WxfsCZLABGQQACEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAATsE\/g\/JhJdYFZbfXkAAAAASUVORK5CYII='>\n* f(x) value ranges between 0 to 1\n* Sigmoid function crosses 0.5 at origin\n* This  model calculates:\n<img src = 'data:image\/gif;base64,R0lGODlhlgAnALMAAP\/\/\/wAAANzc3GZmZhAQEERERLq6ulRUVJiYmKqqqszMzO7u7oiIiHZ2diIiIjIyMiH5BAEAAAAALAAAAACWACcAAAT+EMhJq7046827NI\/ijWRpnmhaCYwSiGosz3T91niu79PN\/8BgxycsGoPEo3I5SzKf0JEzSq1WptZsFKvtKgMGr0QwCBAGlXIhLI4tGofAowHzxi0IRHu\/MwQSFAqAfIQ4BAUTCwyFjDQNAQsSDY2UMS56DZGVmycODwgCHQMHpKWmk5x8j2yprR4NDkABs7S1tre4ubq7vL2+v7YUD2iuxRx\/I6Omy6jGWX6aztISbw4BdNMdixMCCQnNJd3fGWTIAAcFg+DZJgzRC+p1I\/CS8hYEIooU+lEg9kcLiEnQIwGRBgOsJhAEYDBDA0TbKAyIpoSFi38XKNJAMEiCtwf+DkIlMADKAkILH0MCeINxwbULCRY+4VIBQcIZDUJNYKNggABUB0zeBMATjYEBQyUMu0CGCk0KNk8waEC16rYC0QxoWvBpW6yVVUlVjaSV2gNJSTkGwNBwJkY8SVFyjJgB64SORxkQ\/ErhJAW8xBoMTRDqAV1qQbe8rRmXwoFtfjP4nCCwgAAEXoWmmWAZbQXCHvlOULBuyVOFjQfyzbnBm0K9LQD8lJC4703MmOsIHn2AL4IAE6F2dItBGakHD05ZcJAOc+oJiRf8s1myQuSV\/wwUwDaiNpTTA1O71DkigYjhJ9CnEFQFPICoGVyeQEBPhfoTC2R+fx5+g4M65rEaY8QbccyxWH8a\/OQNfQLyAV+DziygEYQXRAAAOw=='>\n\n* if Y<0.5, class 0 is the output else class else the output\n\n","4fba9039":"* In each classes of passengers travelling in titanic, male counts were more than female.\n* In each classes of passengers travelling in titanic, passengers from Southampton were maximum in count.\n* From each port of Embarkation, Male passengers were more than female passengers.","bd6c2084":"### Handling Outliers\n1. Deleting outliers: Delete if the dataset id large.\n2. Transforming Values: use Transformation like log(x)\n3. Imputation: Using mean, median or mode.\n4. Flooring or Capping : Setting lower limit(Flooring) or Upper limit(capping).Replacement the value greater than'X' with x lower than 'x' with x. ","049ce3bb":"* There are total 891 observations with 11 columns\/variables\/features.\n* There are both numerical and categorical data.\n* Age,cabin and Embark variables have 714,204and 889 non null values respectively. so there are some missing values in these columns.","a3cfea93":"Working of the algorithm\n* It starts with the root node.\n* It iterates through the unused attributes and calculates Entropy(H) and Information Gain(IG) of this attribute.\n* It then selects the attribute with highest Information Gain.\n* Then again the set is split by the selected attribute in order to produce subset of data.\n* The algorithm continues to recur on each subset considering unused attributes.","eced33dd":"* Descrete varibles can aslo be considered as categorical variables.\n* Maximum passengers travelling in titanic had no Sibling or Spouse aboard the titanic\n* Maximum passengers travelling in titanic had no parent \/ children aboard the titanic\n* 0 = Not Survived, 1 = Survived, Maximum passengers had died. ","68de6478":"### Data Preprocessing","83b78c91":"### One way frequency Table\nA way to display frequency or relative frequencies of one categorical column","1d430b9f":"### confusion Matrix and Accuracy","1f7b3ec0":"### Skewness\n* Describe how are distributed\n* it is mesure of shape : Symemetrical or Asymmetrical","bf4ccfa3":"* Median age for both survived passengers and not survived passengers are eual","6bb1ef8f":"### Bucketizing Continous feature Fare","6d4609a9":"* There are no missing values in both traning and test data","37bc87de":"###  Pre-Modelling","2460b2d1":"### Submission","3e151fe2":"#### Important points about KNN\n* This algorithm is simple and easy to implement.\n* This algorithm can be used when there is non linear decision boundry between class.\n* It is good to use when there is large amount of data.\n* It is a supervised learning algorithm.","3604da78":"#### categorical Variables","bfe1f08b":"* K Nearest Neighbours is the model with highest accuracy.","2f216c4d":"### Test Data\n* There are total 418 observations with 10 columns\/variables\/features.\n* the missing variable is Survived as it is the target column that we want to predict.\n* There are both numerical and categorical data.\n* Age and Cabin variables have 332 and 91 non-null values respectively so there are missing values in these columns","824ec0a3":"#### Bucketizing Continuous Feature Age.\n* Divide age feature into 4 parts:\n    * age <= 12:Child(0)\n    * age <= 18 :Teenage(1)\n    * age <= 59 :Adult(2)\n    * age >=60: Old(3)\n    ","5420614b":"* Median fare for those who did not survived was 10.5 and those who survived was 26.5 we can say that the survived of the passenger was dependent on the fare.\n* There seems to be some outliers greater than 300","94f58d8a":"### Training Data","cde13fa7":"#### Ways of filling missing values:\n\n* <b>Default value:<\/b> One can fill the missing value by default value on the basis of one's 1) understanding of variable, 2) context \/ data insight or 3) common sense \/ logic. For example, suppose if we had some missing values in SibSp (i.e. # of siblings\/spouses aboard the titanic), we could think of that the passenger had 0 sibling\/spouses and that is why he might have left that particular field blank.\n* <b>Deleting:<\/b> Suppose in our dataset we have too many missing values in\n\n    * <b>Column<\/b>, we can drop the column\n    * <b>Row<\/b>, drop the row. Usually we do this for a large enough dataset.\n* <b>Mean\/Median\/Mode<\/b> - Imputation: We fill missing values by mean or median or mode(i.e. maximum occuring value). Generally we use mean but if there are some outliers, we fill missing values with median. Mode is used to fill missing values for categorical column.\n","16cc2b83":"* Maximum passengers were embarked from Sounthampton.\n* Number of passengers died and survived are more from Southampton than other two port of embarkation.\n* In case of Southampton and Queenstown, more passengers died than survived.\n* Survived passengers count is more than died in case of Cherbourg","b6673e32":"* Cabin has missing values more than 77% we can think of removing this feature too","41e5d69c":"* Age variable is moderately skewed (-0.5 < skewness < 0.5 are moderately skewed)\n* The distribution of the Age variable is nearly symmetrical.","17c5809c":"### Important points for Logistic Regression\n* It is  a suoervised learning algorithm.\n* Widely used for Classification problems\n* Does't require linear relationship between dependent variables and independent variables\n* Works well for large sample size.\n* If the value to target variable is ordinal, then it is called as ordinal logistic regression\n* If dependent variable is multi-class then it is konwn as multinomial","cae8b5a4":"* Survived,Pclass and Age are nearly Symmetrical in shape\n* sibSp,Parch and Fare variables are positively skewd(asysmmetrical in shape)","380eed99":"#### Gini Index and Gini Gain\n#### Gini Index\n* A cost function used to evaluate splits in the data set.\n* Calculated by subtracting the sum of the squared of probabilities of each class from 1.\n<img src = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAANAAAABdCAYAAADUiuhyAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAABhKSURBVHhe7Z0HVBRXG4ZdOgKCoGBBFGtiixqNicZCrBEjMYrYGyaKUaNo7NHYo7GXWCIxamJH+WM3KGgULKAYUQjSFKQtLGV7ff+Z2RGBBWELqMt9zvlOzMwsOzszz+33Tg0QCAZEpVQiJ\/MFQi+dxcY1azB\/wULMnjEN+w6fBDeXzx5lPBCBCAYlLioMM33HYojXCAReCgUvLw97V89E3QYt8Nupv6FSsQcaCUQggsHgJj\/E4M8+wcceXgiPegqFUkUJo8TWH75GHbf38evJK1CyxxoLRCCCQVCIszGpZxc41KmPHYfPQaZQZzUqKstJTfoPYbfvISsnj9lmTBCBCAbh+qm9sDA1ReuOA5EulLNbjR8iEEF\/VBIsnTgcJhwORs\/7md1YPSACEfRGKeJi9Jce4HBq4MctF9itRTGyloMiEIEIeqMUZmGUVy9GoMU\/n2a3qlHKpYh5EIkMnoDdYlwQgQj6o5Rg1bdjmCLcZ8O\/Ra5QyjQeSEUF+HP3RixZtg6ZeSL2YOOCCETQG1qWuH8uwNXaCta1HDFh1mKcPPEnxvbvg8Ejv0Fiei6UxtYBxEIEIhgAur9HhZykR\/hqqBf69+uHgYM8sevQGcgUCmafsUIEIhgMTVGMV5yXEIEIBD0gAhEIekAEIhD0gAhEIOgBEYhA0AMiEIGgB0QgAkEPiEAEgh4QgQgEPSACEQhFoKegSyQSiERiSKWycsfwEYEIBAYVsl4kY\/8vW+E\/5zvMnDkLc\/znYdO2fYhLTqdEYg8rARGIQKBIT4nHtxMGw8nBDjVq1GCDAxs7Rwz80g\/xzzLZI4tDBCJooJBJkRT3BGG3buLmzaqNiPsPkcuv2rlD9Fp2RzbNRpeeg3A+5A7S0tLwLDEOq+eMR01LU5iY1cTS9X+UOqqcCETQQCEVIXD\/ZjR2rl0kNa6aeP\/DrrgRFcOeSdUgExdgjGdXHL\/wT6Ek9H8LeOlY+M0wmJtw0G34DChLKccRgSoJOZWKK6iU7Z2Eenj4vDQs\/24SbK0tS33QKyta0wI9rFqBBFnR8J35A\/glbpdSIUVQwBa42lqgWc\/xlECa91MrgYT8PNwMCUZgYCBOnz5dIgJx\/vI1SBTGtnSedijlMiQ8jsCWdevw5DmX3foOolLi+eN7+Lzb+6U+6HS41G+PiZN9MWXKlArHpEkTMcJ7OHp07QBHezuYlPibb0IgmTAPCSkZdLpRDJVSjstHd6JZXUv0GTdP\/xxIKhbiUWQ4FvtPRavmTeHq6spEI7fGGOQzBRdDwyF\/V1NdfaGufj43FdtXL0D3zu1Qy8YFF+8msDvfTVRKBSKuHoEpp\/hD\/jIauXfG6cv3wOPxKhzZ2VykvUhFbPRDXAg6gaGf94aZqUnh33wTApWFUi7Bkd0\/wdneFkv3BBYW74qidRFOSV1Ufh4PM3x6Ff7ozv2+ws3HzyFXKNijqhMqKKgLffbIDrRzd4K1lQU4zHWpjQt33m2BaJQKGU5tmcH+puJhamYBr7HTkJSh24qjtKDclP8wZtgAmLISvU0C0XWgBdOGok23IXgYl8JuLY5OdSC5mIeRPVqqL6KFA6bP3wGJvJrmPHIBvh7dG98tWI4\/DuxEl7Zu7ANmHALRiS5dF\/Ab3RdmVGX6pTwvw9zSCYvWB6BAImM\/oSXUF2TE30P35o2Yv\/f2CKTCneCT6NKxNX458j9Iy8gbdBIoLfoG3mvckPnBdRq447czodVg9nvpFM3W+TnPMXbEIPbhMg6BaOifmPjvLXz2YUuYlFKca9C0PQKv3maO0wmVHFcC1sOKw3lrBMp+FovRA3rC\/4ctyMwTs1s10V4glQJBe9bB2cGWuXgt2\/ZEZEIWu7N6Y6wC0cglQpw5vB3urnULxXkVHLTv8RWSs3VdPFEFUe5zdG5S560QKCvhAab7DMbcJauRmpn72oRBa4Hk4jws8RsLa3NTcDgmGOQzDfni6lj30cSYBaIpyONi9dyJqGVtXkSel2GBQVMWQCzXLRuiW7x+9On\/xgWii5PTRntiwc+\/IitPUG6uqrVA3ORHGNb\/EyYrNzEzx\/xtJ6n0Q9e827gwdoHonCInNRZD+nQuIs6rMDG3xPxNgTo\/DSHH1usskEIhR1b6C0TcuoEjBwOwZsUyTJs2FSl5cuRx03D8992YMHYUhnz5Jeb+sBoPYp9pjG\/jpSVg1jejsHTTrxBK5cWK5yqqHrht82pk8Yu\/eUI7gZQK3L58HB1aujIXzNLKCVcjE9+gPirqlBSQy+V6h8IALYjGL5Ca+HtX4O5YdMzYq3Bxa4GgkIdar0RKHx334G94DvDE7ein6o1a8CzyBiaO8UGr5m6FLXptu4zArevn0PujdqjnUg8uLs6wMDOl9nHQpGUn\/BUcDgV7nvk56Vg6dyp8pi9AVMxTpKamFsazpHj8vHwOPhu3jHlBWNFfppVAcokABzf\/ABc7C+YEG7z3KdIK3ty7YAQFPFy5EIQ9e\/boHcdOn4dIpl9LYnURSKWU4dyBdXCysWJ\/66swMbXEgK++wdNUrnYJK3Uw3UVCTyUorcPy9ahXRqX7bf73x3Y0rmdPnQsHgybOgc\/QL7B09TbEJb5ARmo8vh7al+nX4lDnOd5\/JbLzhVDIxNi3ZTkc7CxhweHA1MQEJiXCzNIeR649Lm4PhVYC5We\/wLxvRsCcNfwL3xWoSLpN5xJZ6am4dSMUZ8+exfnzF3A74gG4vHwq5VeCz8vA0yQ6S9Xuwj1PjMaXn3crdgN1jTY9BiJbzxdDVReBaGSCXKyYOR52Vq86QV+GvVMDLP15H3hVPChUSYnw5851qGdvQ52HJVp96IEdv50DX8TeV+rxenz9OFxr0efMQXuPcUhMzYaQm4RJY73Rv3\/\/MmPYpJnIEmg+H1oJlPzfA3j2aKvuVDOzxs6g+9TWsh96uqMsIfom\/L+dgs9698Jgr6FYuOQHLFsyH8MH90Hf\/p9j6vQZmDDSG1v2B0Gu5TAgXlYqdm5ZA19fX71jydpN4Ev0K8ZVJ4Ho+56e+BhjvdTvBSouEQf1m7TH8UvhWieK+iDMy8CK2eNhbUYJwrHBjJUBVF2m+DP14sEVtHWmi3E10Lz9EMQlZTAlq\/j4+NdGcloW9ZM1f0vFBVIpcefv43B3dmC+vJZTCzwTKMrURy4W4LefV6BZo\/qwsrLC73\/dQEYmFwV8Pvj8AnAz03Fs\/2Zm\/oW1TS0cunCLKo+yH64gdJYvFosgEAj0DqFIXKzSqAuGFEgi5CM89BqCg4N1jr+DQ\/H8RWa5LUm6oqQq7vevBqFb68bsby4SHBM0ad8N\/6VV3XtRU+L\/xVcDPmIS+FqOHyNLJNV4PlOjKIFc1PWg93qOQUJKNrtHNyoskEIuw4F1M2Bnqc6yOw+dUaY8Yip737tpCerYW8DOvjEiknKKt2iw\/xZTdZiNi\/3g0rI77kRpX3F82zCkQEmP\/0EjpsJb4sHUJiycsfPg2cIX\/lYGCpkIu3+m73XNUs+hZ\/+FyBFJ2KMrD3oq9r1rgWjXkKqXUfWYcfNW0FvVO4tw59zvcKSrIJTgXr7fI51XwO7RjQoLJBbmw7tvJ+aicDim+GEb\/SYyzRNUSPk4QFXInGpZwcHZDYf+CikzZaeLeLeDAzF7\/kIkvHiHRy6zGFKg9OSH1PXuAw8PD92j\/1CcuRIGudaV8opD31t++jNM9\/6cecFWUXmYoLb5Ld2CXEHlSqSQS3Fo6zJYUMU3a8eGOH3rieZzp5Rj07xRTBeMRc06WLPlT4gk+tV7KywQNzkSzeuoUxmr2u64Gvkfu6c4UVcPomV9e5iaW2P0N0uQkZ1fpkC0gJkpSQi7F4UCkfZjqYT8XIRevYTDhw\/rHeeuhECqZ0ptSIHoB4KXk4McvYIHsUSzGGNo6Pv7LCYc3dq4vxKnSNSu546dh\/6q1PGSYqrIO3vkZ0zxrd2nw5CUppkg5794go7N61PnRBXfOvXCtbvRmmsdqGSIunkdx06cQnpO+blThQUKOboBlqbqFKajxygkpWqeoFKaD9+hXZkfUa9JOxyl6j3lNQzQF5+eqFSmY6\/hxbNYTBjlibp16+odvbxGgveytUZHqlcjQhGom6dSKXA\/NBANbTUFokss7T7pj5DIJ+wHDE9eVhI6uDuDY2KKyd+vQy6\/xPg1qoj3x8ZFsDDhwNzWEVOXbSs1V8z4LwreHt1Rv0FDrNt3HCXaIDSosECLR32kvhim5vh2+RbklfLlz578AycbCyrbNkXvwWMQk1y5Y+RSkx5jhJcH00ihb3zQy5M0Y+sJ3ajwx\/al6lbaEkGPWhk+YT5SM\/Src5TFk+uHYG9tQsnRGDsPX2TejFeU9Kdh6NyqCSUzBx\/39WImO5aWaKc\/DkOPtk2oc+Zg9qo9kBhCIHl+MpqylURzayds++1kqTNPQw5vgBlVvjSzsMYU\/xXIFWsew0tPReSdcISGXMO1a+oIvX4D96OeaF1Wp2+YgF+AvLw8\/SOfr3eTa3GBHCiB4tk91QTq+mW\/SMLkQd1hQqX0RQWio0E7D9x9VDnXZO9yX0Zct7af4NKth1Spht1BFWD53FT4jf8KlhbmaEztv3gnljrV0u81XS+PeXALJ0+dBTdXWOZxLylXIIVMgrN7NzBZH30RrJzcsffEJcrwknIo8NvKOcyPsKxVD4s3nWCGPZTkecy\/OLBrA3p1acX08Na0q42BX43GoeNnKSnf9KBU\/QTKfv4fvD092AfGCn9ciWL3VB\/oCXg3Lp1ExxaNik3XtnN0wY+b9yNfWAmNCQoRhnel5xNx0OnTL3A3Oll9J6mHn5eZis0LvkMjx7ro1scTf0eULc9LXu4v7ziaMgWiy7TRkf9gw6rF6NCCztLUF8LMshY8h4\/BqjXrEfFvGns0BXX8L8tnMMfY1m2M9YdD2B3FoU+KtnzLghFMC80H3fvh5sOn6u0VOOG3EalEhNTkp9i2fAGaNXAuvFZe42fjTlQM8vkCZsRFdYC+h89j7mF47w9hyl4Hc0srePvOQnw6j9rPHmhAePHhqGNHL37Cgat7e2zZdwzxiYkIPheIb6eMwwftO+HrWUvw6Olz9XPGfq4oCrkceTweEp\/G4tJfJ7D70FEIZHoJpERy\/GMEBR7H0aNHi8WxY8dw4kQgniZlv7og1D\/+98syJtWp6dgIa\/ZeZndoohBxMdKjHVUutsaIyQuRLZCye95FVDh\/aCOmTpmMXt26ok2b1mjdWh0dO3aBz5gJ+O7HDYhLyWCPN24kwnzs\/mlhsX6hVp944vaTBM0WLwNx+fBPMDOhEm6HOpjoNwvbt2\/Dpk0bsWrlKuzZfwjBN8LAzeMz8pRFZmo8tq9fC6\/P+6FZ4\/rwGLG8QlMzXluEU+cKSqaVTDPofeyBDCrER1xELXMzKsWxxfQFGyAoo2U6PiwQ7g4WsLF3wqqdB6GoxH6Kyoa+RoJ8HrKyssqObB6k8jddPK0aIkNPws2RHoumlsfepRkuhD2uxHssw4JhA5nvcm3eGYFXHkEkFDD1WnrUi4y67q8T5yVyuQxpCdHwHd4H5pSM285HlXi+S6dCjQgVgZFNXkBVID+mciGqLNptEMIexGuePCXkvrUzmUqmi2srBIVUXtMmoWoR5CSiQ4PahfJY27viwOUHTONMRR5iXRBkPMGnH7gykzs\/6TccCdlCdo\/2vIh\/iCF9Poa5c3sk5NB\/p\/xzNphANPRFSr4bioEd34e1lS28fKbjangUhGIJM99GIhbg0d2r6Nm5LdM30KXHECRl5rOfJrzL5GamYMLADoXy2NR2xrLtRyqcA+hKRMgpuNSpDRNzC4yYvQoinTtrVbgTHIiOLerjI89xkChKlrBKx6AC0dBFvtj71+HvNxEd27yPDt37YO73i7BmzVqsWLYEnv17o1tPD\/jN8MfxoFCqaFN5F5dQNYgKsrFh8bTCVXssa9ph9PRFeJZBNxpU3v2l5yXt\/8kftWpawtLaBj\/tP6NzV4RSLsXxXzfC2d4a01fvr\/B5G1wgGrqOlJedhYjwWwg6fQoHAn7DoUOHcfTocZw7fwFRj54gv0DIZu3shwjvJMwktoO70LxhHXXuY2KGLp8NRdijp5W6tLFMIkJU2BUM6NEJppS4tEDLdp1Gdm6+1tNiaMR8HtYunArL2g1x+OItOidg97yeShHoJbTF9Mr3dPGNDlqsykyRCFUMdS9jI0MxoHv7woGkdRs0wZ\/nb5fST2hAVAqqKhAM3wnjMGjgAPTt2xf9+vWD98ix8F+xERFxKVq3+HFTEzDpi+5o2r47ImMqvkxBpQpEMG4KstMwf6p6dDMtj4mJOcYv2sG0uFVuMqkeP1nW2hbaTwkH4h5HoGsbV\/QY8S2SM3PZreVDBCLohEIqRMDmxXCyZYfsmFjAw2sq8qW6DQwuCT2hMDOTq\/UkS91QIezyEThbW2HOys1ajZYgAhG0hl7qN\/jkDrg60Yt3qHOfTr2G4Ekqjz1Cf0LOBGCK7xxkV0EfOz0yJmDNLNjWdceeYxch06LuRgQiaIkK9y+dQpumr4YsubTqjKDgcJ2KTqWiEGDmBC\/YNfeAsAr6n+nZ1r6DPkS7rh64+YAeK8fuqABEIIJWcBMj0b\/7B4XyWNvaY83OfRBIdVxcvhTSH0XCo1N7fOrtx\/x\/ZZTi6LqSjF08UZwTgwa2NhjtNw9ZfO2yPCIQocKI8tIxd\/wwWLL9PWYWNTH0myVI4hlu+Sq6b+f4vnVo4FgTXy\/9g9pgeH0kghysX+SH+k3aIPR+LI6u8UO9xi1x6OwtRihtIAIRKoRUxMeBrStQz1H9UoEaNUzQbcBwRMWlaf3QlQk9gDkmAsPppaNrmGLfpQeVkvtIBDxsWzsXTVu2w5atG9G7c0f8uGEbRDp06hOBCBVAhdtXz6ATu6QzHW6tuuDC3Vide\/5Lg\/ciEQunjIQDvXi9ZX3cfVpkuowBofsmUxJjELBrK9auXIOgi7cgluk25IgIRCgXUW4qRvb7qLC\/x9alKQLO0MOw1B3jOgfdyU5V4Pn5uYi4ehGTfIbAwVL95gfHlt2RkplTKTkQA\/v9+nbuE4EIr4V+K8GmBeNhSa\/2yeY+zdp0xY+rVmPt2rV6xepVK+E\/ezp69\/gQDV3qwrzIOnhd+o1Edl7lrJ9gSIhAhDKhZyWHBmxiHuySi61XdgydtQH5wrd\/oiURiFAmkvwMLFvkDx8fnyoNb+\/h+PMcvU5fJY6nMxBEIMJr0ai3VGG8CxCBCAQ9IAIRKoRMJgaXm820vBkWFRKiw+H39WREJFfdmxwMBRGIUC70YMtl4wbAyro21mw\/CLGeb\/KjoRfFTHsWh8WzJ8HJwRZmNg4IidHvVSNvAiIQoVxUSinmjfZE7dqOWLV9P4RS\/Ud4psTex9LFizBx2Jdwtq0Js5oOCCUCEYwRukIfE3kdu3btxaPYZIOMPpDLpJBIZXgccgaftGoEcyIQwZhRrwVo+Cn5CXfOotcHbjCninBEIIJRQcuinjotRW4OF2np6RBL9XuDRUmIQAQjRYWk6LuYPGYEGjWoBxsbGwwZNRmpPCHkUrHm6qvlBhcCoUhjbBsRiGC00JPO6Jc4757hw9RRZq7YDrFcgbjwIDjZ28POrk7Fo1ZjrN56CNISs1aJQASjRqmUY+6wbnCq54Z9J68yr6zJTLyPeXNnY\/ZsbWI+zgeHoeSUGyIQwaiR8tPwgXNNNG3VFWHRKcw2evXZ0paUKi9KW2iRCEQwapLDj8OMw8Gng0cjk2\/YBgQaIhDBiFHi15WzmPeKTp63Cyq2CSAz8QG+nz8P\/v7+FY+5i3Dx2m1ShCNUH5QyPqZ4dYWJqQUCzt5ktwKJkZfRolkTuLm5aRHvY+Ouo6QRgVB9KEh7jI9aN4O1fUNExOcWNkELeGk4f\/4czp2raJyl4iJinz7TWLM69mYQurdpxAgU8oTLbn13IAIRykCFyL+Pwb2hM9y6DIPA0K+hUakgEfFx9Jf1aFzXASZmVtgReAMyudygC5VUNkQgQqnQy\/f+vmkenGpZ4esVAfTzblCyU59gyoSRaP9ec9RxcmQGqrZs0xETfL\/D9fCHGh2ubytEIEKpSAqyMH2CNyytbHEhmqqbGNggephQaU3dcvY1OO8KRCBCIfzcbCQkJkEoliI5OhyDPu2A5l18IDfUmtdGCBGIoEYlxb6NP6JPv89x9sYDBB3cirYtW2HH4YtMbkEoHSIQQY1SgkV+3jA1tcDEqf7wHjQAcxatQ3r2uzfNuiohAhEY6EwmMyUBRwL2YN\/e\/bhy9R9wefkk9ykHIhCBRXMpKaJO+RCBCAQ9IAIRCDoD\/B+uGl7je0LGhAAAAABJRU5ErkJggg=='>\n\n#### Gini Gain\n* It is again the decrease in gini index.\n* It is the difference between gini index before split and average gini index afer split.","ae369e9d":"### Converting Categorical Data to Numerical\n* These are two categorical features:\n    * Sex:Male or Female\n    * Embarked: port of Embarkation, C =  Cherbourg, Q = Queenstown, S = Southampton","5688e468":"* Passengers with 0 parent \/ children aboard the titanic died more than survived\n* Passengers with 1 parent \/ children aboard the titanic survived more than died","29c39e6e":"#### ntropy and Information Gain\nEntropy\n* Entropy is the measure of the randomness in the information being produced.\n* Entropy can also be roughly thought as how much variance the data has.\n* Higher Entropy makes hard to come to a decision.\n* Mathematically, entropy is:\n<img src = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAvUAAAFwCAYAAAA414R7AAAgAElEQVR4Ae2di5XsNNdtO4QTAyEQwx8CMRACORACMRACMRACMRBC37H6svgWOpIs2\/KramqMwi5b3o+pbWvZ7VN8fHx8fPKBATVADVAD1AA1QA1QA9QANfDoGvj4\/L\/\/+z8+MKAGqAFqgBqgBqgBaoAaoAYeVgPfvn3zA\/qPTxoEIAABCEAAAhCAAAQg8DwCejj\/z19YEPXPGz4ihgAEIAABCEAAAhCAwOfXX1YQ9VQCBCAAAQhAAAIQgAAEHkyAJ\/UPHjxChwAEIAABCEAAAhCAgAgg6qkDCEAAAhCAAAQgAAEIPJwAov7hA0j4EIAABCAAAQhAAAIQQNRTAxCAAAQgAAEIQAACEHg4AUT9wweQ8CEAAQhAAAIQgAAEIICopwYgAAEIQAACEIAABCDwcAKI+ocPIOFDAAIQgAAEIAABCEAAUU8NQAACEIAABCAAAQhA4OEEEPUPH0DChwAEIAABCEAAAhCAAKKeGoAABCAAAQhAAAIQgMDDCSDqHz6AhA8BCEAAAhCAAAQgAAFEPTUAAQhAAAIQgAAEIACBhxNA1D98AAkfAhCAAAQgAAEIQAACiHpqAAIQgAAEIAABCEAAAg8ngKh\/+AASPgQgAAEIQAACEIAABBD1E2vg77\/\/\/vz27dvnx8fH1M8ff\/wxMUpMQQACEIAABCAAAQi8GgFE\/eQR\/eWXX74T9D\/99NOnto981DcG5csWon7yIGEOAhCAAAQgAAEIvBiB0I8fL5baNenUntYL8tr2119\/ff74449fov7XX39de\/it+yu3P\/\/889YxEhwEIAABCEAAAhB4EoFTRL0EnBwtffQku2zatnSc9t+pKebyFZwtT9t1gyA7NS53yncpFuXx+++\/f+Xxww8\/vEROSzmzHwIQgAAEIAABCJxJQHr4H\/157JN6Czs\/fU7RqyfRenrbaropqAll2doillt+Zm2f9bRe8fjVnVmxnW0nb+hyzJ9+o3I2R\/xBAAIQgAAEIACBHoHTRL2D0BPbFHc\/\/\/yzdy0uyxuC3o3AorGDO9RuQrbcgOiG51UEsMbaY\/8qOR1cRpiHAAQgAAEIQAACQwROF\/USthZ2Wq4RdxHsl42hDC\/qNPNp\/UUpTHebNzprxn16IBiEAAQgAAEIQAACL0YgdPKxr9+Y27uIeuWbItY3Mlue1pvd05fJA1H\/9NEkfghAAAIQgAAE7kQAUX\/gaPC0\/r9wEfX\/5cE3CEAAAhCAAAQgMIsAon4WyYadFLJ+Wv\/bb781er\/25mTBk\/rXHmuygwAEIAABCEDgXAKI+oN5157W62cdz276R8X6R8rZ9CqQxLX+Me4Zvxu\/VtQ7Zh2nj+IVzy1NtnQzJTtaHpGv4834zmacvlmHAAQgAAEIQOB9CCDqTxjrFLNnPq2XAJaA1c9iyq8GW03i\/tu3b\/\/5B8vev1U0j2BMDlpvNf8MpmLyT3o6B23Tr+hIQI809VPeylfHya9\/K19LfZfw9met2L8b4xEm9IEABCAAAQhA4PUIIOpPGFMJv1JEH\/20PgW0hLBFu39WUj8PqsG3wHUfbT9K2GdMWq813YQoFsVRCncJbv+sqXhKiPeajlc\/fVKsKz\/bcd5e+sanZ9f7Mp88\/krGjo0lBCAAAQhAAALvReDlRL0SmvGZXQY1ASgBe3RLvxK3YlOKZb1+Y1GqpUTpES1j0XrZJNIdR4rw7KftykP9SrGe\/bTu4q7lk75kZ8+NTOZ1NeOSAd8hAAEIQAACEHgPAtY9HxJJZ7QUU\/KpJ8WjItxizsKvFq\/37V3WbO\/ZdsXTesWbvHt\/HUhhKnal8N+Tu49NHzVR778a6FWbXks7euJeaxL\/roGaLx2TT+vLf29Qs9nadifGrRjZDgEIQAACEIDAaxN4OVEvATfjc8SwpxiV4Kw9QZ7tNwWnBrvVypsOPb3PJpHfenqe\/Xrrmb\/Ws\/m1G3EpfWc\/rSsWC3YtlWPZer7cd6SP+\/aWd2Lci5N9EIAABCAAAQi8LoHLRX0p7nqoI9gvUdfre8d9Es4Wo3tf+RjNb1Rwyp7fBVeM+bQ8Bf8eYd8T0fkPYWsivcw3n7LXaqjny7aSTc2G+y0t007vxkl2jma8FCv7IQABCEAAAhB4TQKhk695\/WaNmIpgTxP1eios0db7SPSOtBR\/a\/Iesd3qkz6XBGcK4bKvbkL02fNaTtov8\/erN60n72V+aauMVX3z3wnU9qtPstnz7xvSTsuX4+\/FPYOx\/bCEAAQgAAEIQOC9CEiD\/PPwGFFfG\/oUYX7KXi4l6kaany733m0fsbOmzxrBudR39OalFV+y1Hq2ZDrCM23VhHT5ik7tZkTv0dtvbX\/G11tf4pbHLvXdyzh9sQ4BCEAAAhCAwPsQQNQvjHWKRwvAcjkiQvPJ8Z5\/lLkQ7ne7l0RkHrCmbx43up4se6J+6Z16+UtbNVFf9snXiRyvX\/nZ85RettZwW9PXcbKEAAQgAAEIQAACSwReTtQroRmfJXBr9uc76S0Busbemr5rRGT2LUX3Gp+tvinES\/v+K4ZumMp9NXtpq\/cPjiXY9VqL7Iq9bqiUpwS9tu8V9IotuS2Nb\/YdybOWO9sgAAEIQAACEIBASUAa5J8Hz6\/x+k35FH3r9xLUnu\/5jyP3\/EPTLTGkiFwSnK2\/JuimROJXQlj2trYU4qWgTUYS+EstbS0Jc9lW7DpGS31XrrNedbkT4yVu7IcABCAAAQhA4DUJvJyoV0IzPrOGOwWfxOTZLf0viXoLaz3BdtPxKaD1fWtLO1rPlnHqRmzpHXeJc\/VTrD1xrpyWRH\/GsWU9Y7+a8Zb4OQYCEIAABCAAgecTkAb552H2azypv9uQ+LWSJfF5VNyjgjNfESoFt2JzoRwl6tOHCrIWgxktxep+EvQjT\/3df+vyToy35sBxEIAABCAAAQg8m4C12mX\/R9meeCvRRrBfdyK9J7TlsVd8z9dZ1uRZi9Wvv9T29bal4NSv7rSYKT6J6ZYINvsjRb1eTdLNj5\/At57WL8UqHpm3+ouftuWnx23NvvR1NeM1cdMXAhCAAAQgAIHXIWCtdpqo92sT\/\/x54FMiqCXeErMEn4\/xcq9QTvuz1\/Np8t6fsJQt2Rj5VZgyjxSc4ibRrm3ZUiS3RL8LpTw27Syt+68WikP2ai2FvfqX\/wZB4tx5tGKV3TJv10xtKbZ7aqn0dSXjGlO2QQACEIAABCDw+gSs1Q4V9RJmcuSnsDVhJSFUE1balmKwPFY2WwLxyuGzUFa8e37CUjc8HqRS4I7kl4JTdhyXhKzHRAxr7NO+Y1gr6hW\/XoORv3LsPOblTZ3Euo5xvci3PrKhz+jNjfrZRum79l03nFva1Yy3xMwxEIAABCAAAQi8FgFrtUNF\/WshW85G4tui0YJZonn0I0GrgcmbGdnZ0krBKRsSzdruz4hdF4qOObM5Ri3X3tToGMWt47Sum6vaGKiPxb\/6rW06xuMtW2pPYrw2X\/pDAAIQgAAEIHA\/AtZqiPqJYxNQ\/xV7Fn1bl7OeIm9N0zltEb1bfe45Tq\/pSKiP3ghIhCvHpb9Y1GKqifpav6VtT2O8lA\/7IQABCEAAAhA4j4B1BKJ+EnO\/871VvLeOG33lpEzjHQWnnsiL41qBrv5bOL8j47LO+A4BCEAAAhCAwLUEEPUT+etpr1\/jaInzrdvL985Hw54tOPf8+4DRmPf28\/v7a0S9xk6vO23h\/I6M944Rx0MAAhCAAAQgMJcAon4iT73qISF5xGdrmHsFp99D982IhO+Wp9lb499ynGPVDZbyX2oS8spLf2XZ0t6R8RZOHAMBCEAAAhCAwHEEEPXHsb2FZb+KIqGrwX6HppsqC3vnrW0S3\/5IwGubxLzE\/1ZBL57vyPgd6ogcIQABCEAAAk8igKh\/0mitjNWvlKTAHXlyvdLNLbuXwj4ZeF1iXr80tOWVGyf9zozNgCUEIAABCEAAAtcTQNRfPwaHRCBRq8FtfbT\/1ZvEul4V0i8HJQflrqfrEuR7Goz30ONYCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACEIAABCAAAQhAYCYBRP1MmtiCAAQgAAEIQAACEIDABQQQ9RdAxyUEIAABCEAAAhCAAARmEkDUz6SJLQhAAAIQgAAEIAABCFxAAFF\/AXRcQgACr0Hg77\/\/\/vzjjz++Plp3++uvvz5\/\/fXXTy2vaopLMeijddqxBO4w5sdmiHUIQODuBBD1dx8h4vuOwJ9\/\/vmpwl36\/PLLL98dq21Lx2k\/DQIjBH777bfPj4+Pr0+K+m\/fvv27\/WxhLxH\/ww8\/fKrWf\/zxx3\/j0DadO7RjCFw55sdkhFUIQOBpBKRf\/pmTPp4WO\/G+MQEJqN9\/\/\/0\/osXiaukJqYSNBI\/7eykBxBPNNy6qDan\/9NNPX3WkpZtqyDWlperxrOa6TvEeF\/nPjPOsmN7Bz5Vj\/g58yRECEBgjENd7RP0YMnrdiYCEfQqon3\/+eTi8fIopG2c\/UR0OlI63JKAbS9eenthnc23p6e1ZdWVhWf6lSf79FFmin3YMgSvG\/JhMsAoBCDyVAKL+qSNH3F8ELGQsrtaIlij+L3H2jkj9F493zH1vzq1Xb2xXtZmv5Hj7UUv\/1aAU9fInYZ9P74+K4dXsrj0\/zh7zV+NNPhCAwD4CoWt4Ur8PJUdfQQBRv4+6boLW3Ajt8\/ZaR1tE3+WVFt\/Y1kT9a5E\/LxvOj\/NY4wkCENhPAFG\/nyEWLiSAqN8O30+aEfXrGfZevVlvbf8ReR4g6vfzlAXOjzkcsQIBCJxHAFF\/Hms8HUAgxYyeVK4RqFH8b\/f6jV7F4D3r7QVpwaeaO\/MVm1bEeR4g6luUxrdzfoyzoicEIHAfAqFreP3mPsNCJKMEUsw8VdRLQEgk6oZE\/\/B39B9Wqp\/6Z5Mt2en9AlAKljXMyveL5V9+9OkJW8epuPTRmPX6Zz5etw1\/11J2nKtyOrONvnqjuJZiq+WmY5yb9i+1PA\/WiHr73jo2W2pCx6jes3mb4lBNt+pDebrmlrim\/TLPng\/Z9Q3vmvPD\/nT8SGxlTGvPCx9vv1rK75q6yWNZhwAEnk8AUf\/8MXzrDFLMrJ2Ao\/gveVIvYaHfDlfc\/uUMreujX\/GpCRtN5BI1jt0CTtu9zTa01ASfTT5zf21dTLPpGMWjvvYnUZbCx9vzOAkMxyQRrFgshmVLNhV3q1no+Rj7UDzp2zlof8lMuTgG97Pvko3iUF7Zv9ZHPmyrFKey4THymNZsuI99aeljvc0+tKzZKGs\/+5frX8bjP3vHZm1NlGOp+NyUWzme5W\/qy5\/Plcxt6deufF7Ivvz4o+\/e5ji0lJ+0X1svzw8d5\/Hsjbn97GFvP66RLXXjOFhCAAKvR8DXho+8yL5emmT0qgRKYVMTP63co\/i\/JvJWvyO2W8iUAsHiWeejBEKKVAkOxZwCSN8lErTNwjltyE5NeMq\/BUuLmWN0Py3lTzHLXymykpN8qr9ykBDJpngtfmSnZKC+GZ\/9y7dz0\/H6XsZQMrNf9U073l5buqZaXJyb7OX4KE\/nZV9alnZmjqPjd8zyp1x7zfEr1rVjs6UmLGLLsXIdKA7Z1SfHSdvVNOY61n3KGGr1reN8XoiJ1rPpu8dIN8llkw\/v13qrjY65j9\/D\/oi6cVwsIQCB1yAQ19D\/PTl5jdTI4h0IpJjRJNybgEseUfxfE3i5X9\/VZ8YnbUtEKFZN0rWWwrCWj46z4LC4LkWLfaifxVH6GhUtOib7ypZ4WAx6n4SXW45JGZf7aLtiV3xatvrZvvulb9vKXNUvY3GfjEl9Uoy7j5e25xy93Uv\/5UDLVksBqxxqbcY42m7mJ0atlv1azEfGJsdlpCYUj5iLvT86TvGULdkpl6XxrNW3bOpY+yp96LuO0375K1vm1xq\/8piMu3bMLPYz66bMge8QgMCzCcR1D1H\/7KF8z+hzovQEraIe+VhU9iZ+79u79OhI2FiIe1u5tKiUT\/UtW+YsIdESqBlzaWONaEl\/stkSg\/ZhcdMTveqbMbSEWfquiS\/7TFuKsSbI42LXvflTLK3YU5i2nhArJglR868JPPUpc9syjs4\/bSnPVps1NulvpCYcj5m0xkj9cixbdaF+zkW2am3JV9ZDeXzG0Bq\/8pilMXe8rdqyvfRdyz\/Zy+aeurFPlhCAwGsQiOta\/cL4GmmSxasSyAlOk7gmORX1yGdE1GuCnfExfwv22tNH9ylz0vdsuV95tpoEgYVNKXJTOGi910b9yYZfL5Bf5dprisnxaVnmqWNHfUvY5HjWfJdPOGuxOaaWYM\/8WmJKdkf4jubWG0fnMGIrY6\/xsS0tzcHjU47NiL+053Xb07LVMs5efWuf7ZXxybZFdstG7\/iR8Svj7x2TOZ3FfqRuyhz4DgEIPJtAXNfaF9lnp0j0r0wgxYUm+CWBmiyi+L\/EQe47ar30aVHSW5YiIHOWvVZLX6Xo6QmQ0t6oPx2np5DOpfRZ2tX3FB61sVvj2yJO\/ltPQ\/20VH0ktMqmGGp\/HXE\/59ey734jfEdz642j\/Y3YcuzKfe\/YjPhzbLl0bWjZaqO2R7i0fOimJWuh5DEyfqXt3jFXsN\/Dp8yN7xCAwDMIxHnfvsg+IxWifEcCKQAkFDSxjrYo\/tNEvUXNmjjLfDJn5dBqmd8e0TLqT3H0hFItzhRCtVzW+F6yJf\/5xFSxlk3bWn9F0ZN5j1\/thiBtZSytsR7NrTeO9jlia+bYjPhzbLk0Py1bbdT2CJfSh\/5ao+Mksns8RsavtN07puertKPvaas8L47kU4uFbRCAwHMIxHWxfZF9TjpE+m4EcoKTUGgJqBqXKH5EfQ3QP9uScSkwysNStOm4pdYTLzp2je\/RvimwJPLc9G8FFH\/r3wzkDYGe9PZa5tWqydF4s05bTEdszRybEX81PhlDbb+2jdoe4SJ7uhnTX7s07rph89j1jh8ZvzL+3jGZd2sM017aKs+52XzSL+sQgMCzCcR1DVH\/7KF8z+hzgtPE2RJQNTpR\/KeL+nKirsXX2pY59+xkfqWQSNGwxGzUn+JN8VK+NlTLJ+Oo5bLG92hfxeU406dikfBrNb9CoVeGllrm1eI7Gm9vHB3HiC3nrOXesRnx59hymTHk9lwftT3CRTdtep1KY1berPWOHxm\/jFnrvWMy77PY9\/IrY+c7BCDwGgTivEfUv8aQvlcWKQA0cbYEVI1KFH9T1KvPjI\/9e3Lvvbftvq1l5qzYWi3z0zHZegIk+2l91J\/6Lr0jX9rOOGqvvazxnX17dVD+o1qz0Zi0BFe+etPqk7llXq1YMt6t42ifI7Zmjs2IP8eWS9e\/lq02artX37Ltv6xoXDV+ZesdPzJ+pb3eMVew7+VXxs53CEDgNQjEed++yL5GqmTxigRSABwh6lOE7Fk3ewkM28lXP7y\/tixFYeasE7jV4uT+7h9G9gRIaW\/Un47Lf6wqIbPUMo7ae+prfEtsj7JNv4pZY6Fj\/WpGGbf39\/rkMWlf67U2mltvHG13xNbMsRnx59hy6fHRstVGbfe4aBztq8W\/d\/zI+JXx9465gn0vvzJ2vkMAAq9BIM779kX2NVIli1ckkAJAk3hrAq\/lHsX\/JQBafdRv78e2\/QqHYh0RvRK6EgTZMmfF1WqZn47J1hMg2U\/ro\/7KvsqxJZLtwzxaT1PX+LZwkq2lVj6tFyvF0mq2PTJmsjHCdzS33jg63hFb2Wfv2KStXg06Pi\/l1x9vK5ejtntcRvjvPb6Mu+czczqLfS+\/Mna+QwACr0EgzntE\/WsM6XtlUU6WmlhHWxR\/U9SP2hrt51cCLGxKwZ521FcCtRTGmbNyaLXMT8dk6wmQ7Kf1UX8+Lv32xiOFdavfqO8RW47Py2Sg8ej95cR\/YRl59Ub20\/be3JJnOY7OZZRT2mrFJZtLPEf9OT4vXfdattqo7cyl5JL7WueYbtAcT3n8yPiV8S8dkzGdwT79lfmVsfMdAhB4DQJx3rcvsq+RKlm8IoEUAJqge5NlmX8U\/9fkLiFzRksxoZj1XQJe\/5BPH4lLPxnW9rJlzsqh1SxE5aOc1PN1kvIfh5bCddSf41AO9l27KXE\/i6De0+\/0rThbYzRiy369TOGqOFstWZU3WK1jsrZaNZm5bR1H+8+bxZ6tWWMzGrvj89IiWstWS969XJKx4snmerA\/5e2mMfRfiLxfPtVcXxnD0vlhuxlPbczPZu9zUDmWfBwzSwhA4LUIxHWofZF9rZTJ5pUIlJOzJuAR4aUJ1hO6l7WJ+AhWii8nXPsvlzVBr3hSwOkYC5GMtcyvtKVj0p8uBMpf\/Mq+pUAa5escJdpTVGUO2leL37mkeFS86l8KFMe3ZMs2c+mbp97Yu4\/sjzTlI47m23qtZ8Y4Op48D8S9xzTFpXLaMjZm7hxHa8L9tSzH0bmk7VYuys\/1JVvl+Cme9KV11bjy1brYpx+Nl\/Z7rGQ\/j++dH4p7dMxnsJ9ZN2bOEgIQeA0Culb9c+1C1L\/GkL5+FpoYVbg5qecErHVN3uVELzLa5om9PEbfZVO2j24SARaLZRzyXxM8Eiop3nycBIlsWVhpvcZGx7qP8ivFgY7RNjc9sU9xan\/qJ1vZ18fk0jk6FuWlj2zqU\/5FII\/1eop6HWshpuP1Xbb1qY21bfSWtlcK2zzG8S\/Fq1jFvsYs63HWOMpOq54Vs8aoxWXr2GypCXMxx6wj8XKtq540pt7vpXgqD9dui3FZk7JX+pR9j7WW9qGl9omLm47P\/bJV1rxzWxpz29RyK\/tZdZOxsA4BCLwWgbiGIupfa2jJ5gkENMFLGPiTouKM+CUUzvBtH1paVI3kp\/4WVrpYqZXMRuy0+kgISnC3moVzispW36du3zo2T8g3a8U3BRm3679Vk94vRkecm6\/MPjmzDgEInEMAUX8OZ7xAAAIbCNRE\/QYz1UMk0nTDUD59rXZmIwQgAAEIQODmBBD1Nx8gwoPAOxM4UtTr6bteqTjiCew7jxm5QwACEIDANQQQ9ddwxysEIDBA4ChRLyEvQd9653wgNLpAAAIQgAAEbkUAUX+r4SAYCEAgCcwQ9Xq9Rhc6ffQPPWVT79HzlD5Jsw4BCEAAAk8ngKh\/+ggSPwRemED+XrguVluaxLv\/sW0ueZd+C02OgQAEIACBuxJA1N91ZIgLAm9OQK\/IlD8\/qqfsa5t+4SbFvNb1s4g0CEAAAhCAwCsRQNS\/0miSCwRehIDeddfFqfVZ8y68bg5sTwLf\/\/fQF0FFGhCAAAQgAIEvAoh6CgECEIAABCAAAQhAAAIPJ4Cof\/gAEj4EIAABCEAAAhCAAAQQ9dQABCAAAQhAAAIQgAAEHk4AUf\/wASR8CEAAAhCAAAQgAAEIIOqpAQhAAAIQgAAEIAABCDycAKL+4QNI+BCAAAQgAAEIQAACEEDUUwMQgAAEIAABCEAAAhB4OAFE\/cMHkPAhAAEIQAACEIAABCCAqKcGIAABCEAAAhCAAAQg8HACiPqHDyDhQwACEIAABCAAAQhAAFFPDUAAAhCAAAQgAAEIQODhBBD1Dx9AwocABCAAAQhAAAIQgACinhqAAAQgAAEIQAACEIDAwwkg6h8+gIQPAQhAAAIQgAAEIAABRD01AAEIQAACEIAABCAAgYcTQNQ\/fAAJHwIQgAAEIAABCEAAAoh6agACEMizL64AACAASURBVIAABCAAAQhAAAIPJ4Cof\/gAEj4EIAABCEAAAhCAAAQQ9dQABCAAAQhAAAIQgAAEHk4AUf\/wASR8CEAAAhCAAAQgAAEIIOqpAQhAAAIQgAAEIAABCDycAKL+4QNI+BCAAAQgAAEIQAACEEDUUwMQgAAEIAABCEAAAhB4OAFE\/cMHkPAhAAEIQAACEIAABCCAqKcGIAABCEAAAhCAAAQg8HACiPqHDyDhQwACEIAABCAAAQhAAFFPDUAAAhCAAAQgAAEIQODhBBD1Dx9AwocABCAAAQhAAAIQgACinhqAAAQgAAEIQAACEIDAwwkg6h8+gIQPAQhAAAIQgAAEIAABRD01AAEIQAACEIAABCAAgYcTQNQ\/fAAJHwIQgAAEIAABCEAAAoh6agACEIAABCAAAQhAAAIPJ4Cof\/gAEj4EIAABCEAAAhCAAAQQ9dQABCAAAQhAAAIQgAAEHk4AUf\/wASR8CEAAAhCAAAQgAAEIIOqpAQhAAAIQgAAEIAABCDycAKL+4QNI+BCAAAQgAAEIQAACEEDUUwMQgAAEIAABCEAAAhB4OAFE\/cMHkPAhAAEIQAACEIAABCCAqKcGIAABCEAAAhCAAAQg8HACiPqHDyDhQwACEIAABCAAAQhAAFFPDUAAAhCAAAQgAAEIQODhBBD1Dx9AwocABCAAAQhAAAIQgACinhqAAAQgAAEIQAACEIDAwwkg6h8+gIQPAQhAAAIQgAAEIAABRD01AAEIQAACEIAABCAAgYcTQNQ\/fAAJHwIQgAAEIAABCEAAAoh6agACEIAABCAAAQhAAAIPJ4Cof\/gAEj4EIAABCEAAAhCAAAQQ9dQABCDQJPDXX399\/vnnn839Z+2YEYds\/Prrr59aLrUlf2tsLfl6tf1\/\/PHHF2ex1vrZbWnsrohntO7Oju1O\/q6umzuxIBYIbCWAqN9KjuMg8KIENLn+8ssvnz\/++OPnx8fH1\/oVqc6O49u3b1\/5KKdS2P\/999+fv\/\/++1euP\/zww2LePVtXsLqDTwlXscvaEWttO\/rGUPbl\/+qarY0DtVKj8r9tV9bN\/6JgDQKvQQBR\/xrjSBYQmELgp59++oyLwqK4neK0YmR2HLpBkMD0R0LCTYJQOY\/m3bNlm++2lJAX2xTvyVPjeVST7\/SlOLTtDo1a6Y\/ClXXTj4y9EHgmgbgWfjwzA6KGAASmE\/j555\/\/FcBXCqSZcfgprp6clk\/qDXDU34gt23z1pYWrJpNsYuyn1GfUkAXinUS9eFArWRX\/W79L3fwvItYg8HwCiPrnjyEZQGA6gbsIpNlxSEjoVZtWW+NvyZZ8+LWelr9X2K6n8BLSpahXbme+375m7M7mPlIrZ8d0tb+71M3VHPAPgZkEEPUzaWILAi9C4C4C6ew4ZvuTPX1euUnQt0T9mXnPHrszY39HX3epm3dkT86vSwBR\/7pjS2YQ2EzgLgLp7Dhm+vvtt9++xK5svmrzKxSI+lcd4WPyulPdHJMhViFwDQFE\/TXc8QqBWxOYKW73JHp2HLP86R+Mnvk++R7Ge469kzibNXZ7eHDsGIE71c1YxPSCwDMIIOqfMU5E2SGg93b1c4TZNGloktevnOQvcmSfo9dnxVW+ly27ykuf3vvhys8xiIU+4rJ0jI5rCSTZ0xNo7RfzEVvmXMYycvwRcageWjXR8uccymXNlrZZ0OsJtmzetZVjMlofzudIcabayvNY673WG7u00xr7mu29fNJmrVZyv9bX5lwer+\/yk+eocpjd9nI5sm5m54o9CDyJAKL+SaNFrP8S0OSniav8x1YSiimo8r3NNQL0X0crV2bGpVz8ayw6UdWUc+bn7WWYmth9couRBI9ZiYns9ib7UiApL8dipl4uiVb5USyKW3390XdvK+P391lxKAbdBPmXSFoxl\/4cRy57tjRm5tJapjjVuscp+4t1LUaNf\/av9clYW+t76iMFWcZcW2\/5720XX9eaclWOHjf95r3GsdZqY1eeL45R9nttD5+026uVst+WnNOGas\/\/jwXzynxnXP\/2cDm6bpIF6xB4VwIxP\/CTlu9aBE\/LOydvT1oqZE+KmtD03ROc+2j7jImtxWtWXLKTwl3xKx9Nitpe5lXGIyGjY5SvREU2Tcqe8GVLNmstc9G6j9HS6+aqZUskyZ9z0Xo2fbeNUaFm36NxKH8fY19aKqdaK\/POPmts9eykTa\/HhfhrrL29trQ4auVQOya3zagP23MsYqoc9jbflGvMytrNm9Ja7iVz56na1D5fH1wHNRuK38fVYhg9f9bUyp6czVu51M7nzFn57Ln+zeDieGfXje2yhMC7E4i5BFH\/7sXwtPxzEteEpmIuhYDEoidxLUvxqWNmfJLdjLhkL+1oQs78vK\/MJyfLUkQ7Rm230Nay1s\/2xUx9JKiSrdYVT7KtCfPsY\/+5VF6yoRuVWpsVh2znzZDs1lr6a\/UZsTVqxzHkuIlHT3y5pnM8bGdpmX5q467jR+rDftKexnpPk1\/l3hKf5V9ByvyTuWzoU\/Yxu1bNZT4z+IhHr+725iz7zkl8as3nmHLu1XTtWG+bzSXt7a0bx8gSAhD4zHkZUU9BPItATgwtUaiMcrLXxJYTvb7P+CS5GXHJXtpRjC2Rkb4tICTCey2ZaNIvW+7vTbopGCT+y5Zsk7v7LYn+WXHIXz61lN1aS3+tPiO2Ru1kDMmi51vMl8Y37eb6rPqwzazRXp24f2\/p2FriVDc6vhmtnQ\/JXIxaN0Zpo6xJx7DEt\/TVy6tXd\/a3NWczkZ1Ws+gXs9o52joutzvOWVxm1k3GyToE3p1AzCOI+ncvhqflPzoxeOKzwNQk56bJecbH9rScEdcaO\/btP48rz8zR+3MpMWMeWirmbClatN5qmavslOLEgqYl+OIC9F0M8jkrjlFbo\/6W+i3tr\/EUO49JS3x53DTWa9vM+rDvHP\/WGLtvb+nYWnn7WDGSn1p9jzJv1Zxj0BjU7DsGLT0OHq\/y\/Mm+rbjsb0\/OilMxlH+xS\/85RurbizWP87rjnMklY9pTN4pRYzHywMP5sITAKxOI6xui\/pUH+hVzWzMxWFxqYlp62rSX1ay41thRzMpL+Y1O3PmUXcIjW0uIZB+v+yme\/JZ23Ke21GScxyrfss2MY8TWSB\/FuNRvaX+Zp78nD4mpssnukggsj\/H3mfVhm2tr1MeVS8e2R+CNMo9J7z8C1zHMOH8yv1Zc9rcn58zF5\/7ScumGJWPXuuOcyWVW3eQDG4R9OXJ8f0cCcU1A1L9jATw55zUTQ06seybREV6z4lpjR3GlINSxS63HJPdpvdfyhmmErZ+2SiwsxTwzjhFbI33EYqnf0v4Wz3wqKjZl07beU9myf35fYp19tZ45tMZ1bY2WPvxdNyoSjS0\/7tdbZrxabzX5sPDN8+QIPoqhFdeMnJ1HL98Wh9HtR3CZVTfKQRz10UMCGgTenUBc3xD1714MT8t\/zcSwpu9eDmt89fr29tVi9ASvpY5daik2SjGV+5YEQ\/Yt7TgGPVHTE0KLUk\/AcQGqxpy298YxYmukj3Ja6re031xqyxRR+TqT\/1Hl1ieSM+vDca+tUR9XLh1bq37K\/rXvo8xbNecYZpw\/GV8rLvvbk7NtyMdRzT5mcplVN85Z1xcaBCDAP5SlBh5MYM3EsKbvXiRrfPX69vbVYszJd+RP7Ck2SmGR+5YEQ\/bV0\/eySZjqSZpe9ykFaUtg2Uba3hvHiK2RPoptqd\/SfudXW\/o9aY1njotsSvBvbTPrwzGsrVEfVy4dW+Zb9ln6Psq8VXOOQcu950\/G2orL\/vbkPMNGxlpbt4+ZXGbVTS1etkHgnQnE9Y0n9e9cCE\/Mfc3EkH01ybrpBJjxsT0t09fShJ19M661dtS\/9458xuf1FBvlKx25r4zLx3vZ6+vXSSTqa0\/T4gI09Ul9LeZenCO5uI+WS7aW9qetcj3fE5aQUo2oieGI2Czt+fvM+rDNrN+lWvcxtWUKx1qd1I4pt40yb9XcEXwUYyuuGTnbhmrjqHYEl1l1c1TO2IXAUwnE9Q1R\/9RBfNe410wM+fQzX2nwpLh3mWMwIy7ZW2NH\/fPddk3ESy3FRvmPMnOf1nst++aTeL1iY64tG3EB+le8pq+03bLh\/tk346jtb9lKG60+srfUb2m\/Y2ot83iNq2pWLP3aUuu43vaZ9WE\/a2vUx5XLfOWorMWyr7\/neaxtyUzrrdaquSP49OKakbPEvM+xkkcr\/x6b2jFHcJlVN7oBVL3oL4SySYPAuxOI6xui\/t2L4Wn5r5kYPDGVT7R0Asz4JLsZccneGjtl\/xEB6F+1EJPy6eioQJJfX0TKV0NGbPhYxVublEdsmL1tlXF4\/4itkT6yt9Rvab9jai3Lp\/XKrfZqU+v42vasp731YftpUzFubT4\/FZfGr6zH0q76l+J\/lLnrpKy5zGUWH8XdimtGzj6HFe\/IjbyYye+adgSXtLm1bmQj2eo7DQLvTiCub4j6dy+Gp+U\/OjGkQNIkcHSbFdeoncwnTuivCS\/35foSk5wse8xkR4KiFEjylbG0hET+ab82Kc+Iw3mP2BrpI3tL\/Zb2O6beMm2I7+iT2J7NHBPZb7Wl+vBxW2rUx+Yy7VigKoZaU9zKo2zJq5dbMihrLvf1bIzyUYytuGbkLJHu80\/L1nmmONRXN\/Bb\/tozm0vmXhvLcmx73x1bOZa9Y9gHgVcl4PPhQxcEGgSeRCAnht7TPU+qI0+yZuQ\/K660Mzrx6bUT\/0m+N4EvMfF+XRe03mp+2ljrkzZkJ1+JkbDIp4zab9GaYi5t1Hw4rl4c7hMXu2ZOo\/6WbCkX5aRP+ZeD0ffiUzhqLGe0WfXhWFJUjtaojy2XZT0oZ42HzgN95Es+WnWdY9eLJcdOdrPN5iPb6a+s4b05y37eGKve9F2slIs+qkWfH9q+pc3mMrNuzLccyy15cgwEnk7A5wOi\/ukj+Ybx6yJu4eTJrLywe6LXRJdi8Uhcs+Jy7M5x9AlbTsDKW9+zeULtMUlRKhFVigGxtFAohYp9KV7H7qUuOPKr77KZOUr8ar+EjtuMOGRL8cq+40gf9qWlY1M\/xVJrI7bUx75sS7kqhpJlzYe3LTF2vzXLGfVhfylKVSfKe2vTsck\/+XldPsp6tr+MRZxrsZTjUqvdmXzkr1d3e3NW7jrPxMWMWss1dWemuZzJJcdqb91YxJTX\/oyddQi8CwGfD4j6dxnxF8ozxbMK2QJRk6i+a7LQpzZxH4lhb1x6kptCwJO0ctFkODI5SyxIEOoYHS8e+siuPiNPi5VHOfnKhoWX9i1NpIrVMTgP2bAw09LbHadiz7YnDh0rDjWeykO1IVE00mfEVsat3DM3cRgZu7Thmjav3LdnfU99iJfich2UOaou9pxzOrasGfnQGMl32cS0FovG3HF4jGt2dWxZx3v4KL61tbI255KB482x8LrOtzK\/8vjR7\/ZjjrKtz8h15ai6kX\/lOivHURb0g8AdCfh8QNTfcXSIqUtAF\/GcuNRZk462+9M1cNDOu8VlFlpuFYdpQ+viPNpyTGqiTNtGY9sTx2i8M\/s5t7XMHIMEskTnkS2Zbq2PI+LLuNbU2+xYMo6j+aSvLTnnuSZbW2yM8stYj+bSi8kiRvHQIPDuBHw+IOrfvRIemL8u4qWov0Mad43rDmyIYZyABJnqe+3T\/XEP9ITA8wlYxCDqnz+WZLCfgM8HRP1+llg4mcBdxfNd4zp5eHC3k4BfyTjyaevOEDkcApcTsIhB1F8+FARwAwI+HxD1NxgMQlhH4K7i+a5xraNL7ysJSMjrvWW\/E35lLPiGwJ0JWMToH9XTIPDuBHw+IOrfvRIemP9dxfNd43rgEL9FyHq9RhdiffQPmFU\/eo9eop6n9G9RAiS5gYBEvG56\/QqmzpmRHwDY4IpDIPAYAoj6xwwVgZYE8ucOVch3aXeN6y58iOO\/BPxLIhYnXvIu\/X858Q0CEIAABPoEEPV9Puy9KQE9wdSTGQsgLfWE8+p217iu5oL\/NoH82VDXs36+kQYBCEAAAhBYQwBRv4YWfW9BQH9yVeG2Ple9h3zXuG4xaATRJKAbQdeOBD7vBjdRsQMCEIAABDoEEPUdOOyCAAQgAAEIQAACEIDAEwgg6p8wSsQIAQhAAAIQgAAEIACBDgFEfQcOuyAAAQhAAAIQgAAEIPAEAoj6J4wSMUIAAhCAAAQgAAEIQKBDAFHfgcMuCEAAAhCAAAQgAAEIPIEAov4Jo0SMEIAABCAAAQhAAAIQ6BBA1HfgsAsCEIAABCAAAQhAAAJPIICof8IoESMEIAABCEAAAhCAAAQ6BBD1HTjsggAEIAABCEAAAhCAwBMIIOqfMErECAEIQAACEIAABCAAgQ4BRH0HDrsgAAEIQAACEIAABCDwBAKI+ieMEjFCAAIQgAAEIAABCECgQwBR34HDLghAAAIQgAAEIAABCDyBAKL+CaNEjBCAAAQgAAEIQAACEOgQQNR34LALAhCAAAQgAAEIQAACTyCAqH\/CKBEjBCAAAQhAAAIQgAAEOgQQ9R047IIABCAAAQhAAAIQgMATCCDqnzBKxAgBCEAAAhCAAAQgAIEOAUR9Bw67IAABCEAAAhCAAAQg8AQCiPonjBIxQgACEIAABCAAAQhAoEMAUd+Bwy4IQAACEIAABCAAAQg8gQCi\/gmjRIwQgAAEIAABCEAAAhDoEEDUd+CwCwIQgAAEIAABCEAAAk8ggKh\/wigRIwQgAAEIQAACEIAABDoEEPUdOOyCAAQgAAEIQAACEIDAEwgg6p8wSsQIAQhAAAIQgAAEIACBDgFEfQcOuyAAAQhAAAIQgAAEIPAEAoj6J4wSMUIAAhCAAAQgAAEIQKBDAFHfgcMuCEAAAhCAAAQgAAEIPIEAov4Jo0SMEIAABCAAAQhAAAIQ6BBA1HfgsAsCEIAABCAAAQhAAAJPIICof8IoESMEIAABCEAAAhCAAAQ6BBD1HTjsggAEIAABCEAAAhCAwBMIIOqfMErECAEIQAACEIAABCAAgQ4BRH0HDrsgAAEIQAACEIAABCDwBAKI+ieMEjFCAAIQgAAEIAABCECgQwBR34HDLghAAAIQgAAEIAABCDyBAKL+CaNEjBCAAAQgAAEIQAACEOgQQNR34LALAhCAAAQgAAEIQAACTyCAqH\/CKBEjBCAAAQhAAAIQgAAEOgQQ9R047IIABCAAAQhAAAIQgMATCCDqnzBKxAgBCEAAAhCAAAQgAIEOAUR9Bw67IAABCEAAAhCAAAQg8AQCiPonjBIxQgACEIAABCAAAQhAoEMAUd+Bwy4IQAACEIAABCAAAQg8gQCi\/gmjRIwQgAAEIAABCEAAAhDoEEDUd+CwCwIQgAAEIAABCEAAAk8ggKh\/wigRIwQgAAEIQAACEIAABDoEEPUdOOyCAAQgAAEIQAACEIDAEwgg6p8wSsQIAQhAAAIQgAAEIACBDgFEfQcOuyAAgXUE\/vjjj89ff\/3166P1te2vv\/76OlbLO7Xff\/\/98++\/\/75TSI+PBaaPH8LFBHQe\/\/nnn4v9zu5w17jO5oC\/1yOAqH+9MSUjCJxOQEL+hx9++Pzll18+f\/zxx8+Pj4+vj7atmdS\/ffv277FXCnsJeInOn3\/++dMxbblJOX0gbuwQpjcenImh6TzJ64DWr26uPcWia5KuT3eI62ou+H89Aoj61xtTMoLAqQQ0OWqSTPEeF5bPn376aSgeiQHfDGipG4UrmvJQ\/J78HROifvtowHQ7uycdqXM9z32dO1eLZ9fe3eJ60rgS63MIRJ1\/PCdqIoUABG5BwEJcF5JsesruJ9xrJnU\/5dexVz6pdy4W9Foi6k1l3xKm+\/g94Wj9hcvjvOb8Pzq3u8Z1dN7Yfx8CiPr3GWsyfSgB\/+n4juHryZwm71LUK9at761KPCvnO7S4QCLqJw3I05je+fybNCTTzfivd7o23EnU3zWu6QOAwbclENdXntS\/bRWQ+K0JaCK608SYsPw0ribqs99T1+MCiaifNIhPY3rn82\/SkEw3c1fxfNe4pg8ABt+WQFxfEfVvWwUkflsCv\/3229eT8DuKer9603pSf1uoKwKLCySifgW3XtcnMb3z+ddjfPW+u4rnu8Z19Xjh\/3UIxPUVUf86w0omr0BA\/8Bry3vpZ+WOqD+L9Gv5iUnn1jdKdz\/\/7lwVdxXPd43rzmNJbM8iENdXRP2zho5oryCg92slZjU56CmeJv41Tf11nI7XTya2\/jFoCoqj3kuVb8WgWPRZ+y77kaJe+ffYOvZkr\/7KQ7+a0+Ka\/XNd\/T0uWvqd\/rhADglQxWA7vfFN31qv5eM6Uz49FqUtfZ8Zx1auVzNtcR3JR318Qz37\/Nt7DamN95pt8q8azeZtvi65\/rOP1lWTqselmpQdv5qndbesCZ0fLT\/uXy59nsimPmuvWa24Sj\/6rth8DoqXaoIGgbsTiDkLUX\/3wSK+awnowq6JXr+g4ElFv9ainz7URxNAq2kC808k+hdePOnJXk5u6ut9rWXPVysGb9fk5BNf\/9BVufgfvMqf4tHkWWvy24qp3F47vrdNPiUWzEdxZfN+x66lmrZ7W8ZQHp+2vJ7HJguNs2JJuz3ma8bXvjXmqimzdz6ylYLSOWl\/1ont5HJLHLO5XslULPbmc+T5t\/YaoprLGnQt+BqUY6912c\/+PgfKWpMdN\/Up603XqhSxWVeOQUvFUWuy6X5al3\/19bZcOsaaHW\/bc82yDS3LuHJfrq8dpzyWdQhcSSDO\/\/+d5FcGhG8I3JGAJ3oJvbJZlLVEnyYSTZrl\/pzkJGRLwTY6AZXx9L5rstKEKn8SP9k0cVpQ1+LNvlpXPp6cdSHZ2hSH\/dqeljnZi798pPjQd8WsbRbkyVQ2lG+r+Vgdr\/Vs3pfxlOPn\/lvGN8fWPpSP4xcPffeNoPtoe1kne+KYzdXcrmAqDjPzyTHKWjTvtcs91xDVgmtA673m89Ixa0xqtaTtqid91Fef9KPtaqpJ1aH7aJnnYe0cUx\/Hq3XZ0nf78z4v5aPVZl6zyrhqPveMU80e2yBwJoE4hxH1Z4LH13EEVNQzPhmhxVVNUEmUanKqiT7dBGifJopa82SnPppwso1MQNl\/ad2TvXxpQq81izL1qQmzPCbtifeMZs41HrLvCdfxqX+Zi5mrj4VJGZvGzMKkPN59Mz\/Zmj2+8pNjrHjEsbzZynwUR00Auc+WOpvF9S5MZ+WTY1Oem66RNUvX9tpriHyUtViz4VhcC2Ud6RjVjz86N2o17TjVT\/VYq7eMp3aOJTvVtW66Mx6ty7Zj0VJxly39tM7TNdesjKs1ps6\/xlhxK9YatzJ2vkPgCgJxXiHqrxgAfG4noAts7UKfE8WedUfmC7lsab3WNPGVF3pNCprQNEm0midg2VbfbCMTUPZfWvdkpQm219JvbcL2sTnh6kIyo4mjx6w26aZP5VObeBWHbWhZa77wLbHQmNjW7PFVXGU+tVi1LcdE8WQd7q2zWhxbuN6F6ax8knmtFltjVdu+9RqStsxX49+LR+dsq65dy2UNpZ\/Mu3f++3oiW2VLG71rg+w7pvL6J5v20crHftNfL+bsp\/WyzRin0ibfIXAmgbhOfH9inhkIviCwhoCFjCaEUtjrYj3j43jyQt+aXPSEtIzDgr32pMu2U9QplxSOSxOQbYws\/Sds+ag9EUsbmW8ZU\/bL2HsTdx6ztL6U86jPFAvKJ5vGSXnpU3t1IPvGBfI\/Y6M+e8dXNkbzyXovx\/DMOFpc78R0DddWPrKxVIvqM9rynFpzDUn75V+pcp\/X7adV1657LVstrxW987p3boyyy\/pXTPmXpoxj1jVrKS7zUyxbx6nFle0QOINAnJftk\/yMQPABgbUE9GRHn1K0rbUz0t9PjHSxlxDQZLTU4uT6V0Tq+N4nJ6+lCWjJf+7XBGW\/I7Gn2FEctZYTcm\/yrx3b2raU86jPZF\/mmz7KG7Eyrp6d3Ge2S8scX\/kazUd9868YKTjOjCN9Jdc7MV3DtZWPbGROWt\/btlxDSp9poybcFWftibftZH16W7kcrclZ7DKn5HzENWtkTDOe0Wt9yZDvELiKQJyXiPqrBgG\/2wm0XhPYbrF+ZD4l88QokdXz7345UdWt17eOTED1I7\/fmhNVirHve\/7\/LelbF4laG538a8e2tqXfGrdRn3Fh++4GLG9YWnF4e8\/O3vGVj9F81DfZ5JicGUeLx52YruHayqfkXatF9VnTtlxDSvv59FrndNm0rfeXQdeKlq02WpOz2OXNatb1EdesPIdaYzpjnFps2Q6BownEedk+yY8OAvsQeAKBnFA9OeqpWPn01bm4T2vycL\/WcmQCah1bbncsWmrSXmrpOyfaPG508s9jltbTb43bqM+4sH2Xb7JYimfETi3OJbveP5qP+rf6Op8z4mjxcAxaLrWWDR1nO3ty6bEqY+vFohhmxWO\/a68hPi6XKXbzdRW\/AtX765Pz6Y1Tq84yBq3PYpecZdMtY1VMS61lJ4\/LPlpvtRnj1LLNdggcSSDOy+WL8ZGBYBsCTyCgCTOfSnri0YlUPrXPfVtyG52ARmw7Fi1bNyFpJ33nRJt9Rif\/PGZpPf3WJt1Rn3Fh64r6cszK+EbstPiUtmrfR\/PRsa2+Htsz4mjxcAxaXs20x6ocg1Y+6rdUi6Wt0e9rriE1mzp\/zTvHXPHWnt6nDR+nZau16qzsP4tdcs7XyjLWWdes9KX1Xts7Tj3b7IPAUQTivGyf5Ec5xy4EthKQcNDTFE0CmoSyqahnfNJmua5JRk\/pc+KRz2ze13vHNfuX62smoPLY8nveiCxNZjo2fbf+nD86+Zex9L6n31qcoz7jwvZdfXhctCxrp4xtxM7W8ZWv0XzKvsnG+ZwRR4uHY7gD05JVeV7mGLfyUZ+lWkw7W9ZHriE1u7r25bXHNaxtS+I3x6lmW9tGa3IWuxbnI65ZLV8tFtq+dZx6NtkHd0vQEQAACz1JREFUgaMIxHmJqD8KMnbnEtCkkxdnT2r2khPXnnXb0z\/ELX1onybXjEO+8k\/fOfHmn8ltt7aUPbe0ndu9f80y31vVZLnU0rdunmptdPKvHdvaln5rOY\/6jAvbd2OXry\/UfGRsPTt7x1d+RvNRX4kL13PW05lxtHjciekarq18ZGOpFtVntG29hrTsZ2w6t\/0e+NKPBrh+tGy10ZqcxS5zyevnEdes9KX1ss0ep9I+3yFwNIE4L9sn+dFBYB8CWwi4eDUJZdP2GR\/blP38s7C3e9maKPLXG0aEtMRzPhVv2bXfNcucqDWhL03+jl2CsfU6RdoU7xltKedRn64N5apjsqVYWHpdoWfHjORjy\/gqptF81Ndxa0yynRlHi4djE4urma7h2spHNpZqMcdgaV3jrHFqtbW+yqf1yqNn3341Pv54W7kcrclZ7GynrJuMQzHPuGYtcZ49TiVbvkPgaAI+nz500tAg8CQCLl5diI9ssl8KqfSnycYTZT7V1rq3a5mCPY\/XuvrKR05cSxNQaWPpu3kpFtlutRQMvX456cr2jLaU86jPzLWsj7QhFr1XFvIJdGln7\/iKV8bSY9gbkzPjaHHNPK5muoZrKx\/ZWKrFNfUuPluuIT0fGZ+Y519vWsepnz+tPjmWvZqcwU517Xjkt2zpo3ct6p0faTOZ1ewdMU7pn3UIHE0gzhlE\/dGwsT+XgIu3NhnM9ORJriX+LOo1aWtyyaYnuJ60tNR3iTD9mVkfTcR+yqnt2fwndR1XPsVqxZLHl+vypxhlr7yByL6e+JaePqeY1FjMaB5TxdiadLVPn55P56l+tfpIP+pTslcuHhf7q8WzZ3zlw7UlHxrjsn7MdGlMZsaxletdmJZct+Yz8\/zzOLfO2941xDVQLlPIqt5HmmtZy1bLvHvscrzLc8z1Kj+188a+fY61+sy+Zi3FdcQ4OVeWEDiDQJyX7ZP8jEDwAYG1BFy85YSy1s5Sf1\/oNXFqkimbJ4qaMNRknQIzJ9Vcrx2rSTv7KF\/5kvir9S\/jqn3PSVJCsMxHduVT+1oC03bztQ\/luNTfx7WWOj6fjNdeJ3B85lLzqZy8X8saKx1XE8Liq4\/2yb9rzPYUn0SP257xlQ3Xlu3Lb1nPrq\/emOyNYwbXuzAV11n5eFy03HP+eZy3XENca7XlkijOY8rzoqwz93W9KefWea2xzuuajsmWNwbqV56DOn409pnXrDznNZ5lO2qcSj98h8BRBGLOQtQfBRm7xxBw8bYmp1leZV9iTv40QUnsaRLTR9tKoVf6zQksRYKFQi\/+UpzUJsjS39J3x+NJWTk4D+XSepoouxKPyjsnR+eUbJZiyP3KXxO8fNuWl\/Ijf\/KbNxHer2N0rParad15uY+WOtZ97Nscsp\/X5VPNYy675Q3QiB0d3xtf7bNP9ZVffVde9q18HI991pa9fFpxzObai8E5OK8jmM7OZ9b5p3HOMV17DamNt7a5Xlq1qT4+v8rzQt81Bq5P5aqxcT16qbjlx+ePjtE27\/dSOaV4l908Z+VP9n3t0D77buXn7a4r5yA7+igOfZauWa2Y8\/piVrIn2\/I1a5ycB0sIHE1AtfvPOYmoPxo29ucScPGOTgxbvWtC0cdNk5t8+uPtS0vZ8DFaps3eselv9JievdyX8fSEQR7zauu9cVnDpGenxUz8LYpUz2qlndaxre3l8fp+duvFcDTT2bnOOP\/EI8chbaoGtjaJTgnTu7e8zmg9WayNPW2tqaURP0eN04hv+kBgBgHrIv6h7Aya2DiVgIt3z6R4asA4g0BBQLVbivqiC18hUCUgAarayafj1Y5shAAE3oaAdRGi\/m2G\/HUSdfHmO86vkx2ZvAMBRP07jPIxOeqVGL0isuep9zGRYRUCELiKgHURov6qEcDvagIS8X6XVE+q9Ofn3juVqx1wAAROIoCoPwn0i7mRkJeg13WQBgEIQMAEEPUmwRICEIDAyQQQ9ScDf6A7\/wNWTdZ6eKGa0YMMntI\/cDAJGQIHE0DUHwwY8xCAAARaBPKn\/3QxpkGgJCDx7n93kUvepS9J8R0CEEDUUwMQgAAELiCgVyj0xDWFmp7C0iCQBPJnIV0r+olGGgQgAIGSAKK+JMJ3CEAAAgcT0LvQuvi2PrwrffAAPMi8bv5cLxL4\/DDAgwaPUCFwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMgFE\/cnAcQcBCEAAAhCAAAQgAIHZBBD1s4liDwIQgAAEIAABCEAAAicTQNSfDBx3EIAABCAAAQhAAAIQmE0AUT+bKPYgAAEIQAACEIAABCBwMoH\/iHp94QMDaoAaoAaoAWqAGqAGqAFq4Fk18O3bt8+Pj4\/P\/wfIHpc6qmx9DAAAAABJRU5ErkJggg=='>\n#### Information Gain\n* It is a decrease in Entropy.\n* It is the difference between entropy before split and average entropy after split","c6aa1ed8":"* Maximum passengers travelling in titanic were from 3rd class of socio-economic status\n* Maximum passengers travling in titanic were male \n* Maximum passengers travling in titanic were embarked from Southampton(S)","0b6b02e3":"### Descriptive Analysis\n* <b> Statistics is concerned with:<\/b>Processing and Analyzing data.Collecting,presenting and transforming data to assist decision makers.\n* <b>Descriptive measures:<\/b> The <b>Statistical<\/b> methods used to extract and mesure three features,<b>central tendency<\/b>,<b>disppersion<\/b> and <b>skewness<\/b> in the data.Also known as <b>summary measures<\/b>     ","4349ebe7":"### Understanding Why there is an outlier?\n* May be data entry error\n* There may be actual ectream point","d4e671ef":"* Passengers with 0, 2, 3, 4, 5, 8 siblings \/ spouses aboard the titanic died more than survived.\n* Passengers with 1 siblings \/ spouses aboard the titanic survived more than died.","5827b953":"* Most of the passengers died were from 3rd (lower) class of socio-economic status.\n* Upper class (1st class) passengers survival freqency was more than othe two classes.\n* Pclass seems to be an important feature impacting the survival of passengers.","ff76f10a":"* Name and Ticket features have 891 and 681 unique values. It seems to be difficult to convert these two feature into some useful information. So better we will drop it latter.\n* We can also think of a passenger cannot survive on the basis of his name or ticket number. But if there are any impact of these two variables on the passengers survival, that would be very less and we could easily drop these features.\n* Cabin feature has 147 unique observations. Let's have a look at it.","9fcb931d":"### Fare\n* As per our visulizations,this column has some outliers.so ,we will use median to fill the missing values here","ca03b710":"* Maximum male passengers had died and most of the female passengers survived. Female passengers were givin priority for survival.\n* Gender seems to be an impotant feature impotant impacting the survived of passengers.","a9d5eaf9":"* Data Preprocessing is a step in Machine Learning to get the data transformed or encoded in such a way that the machine can easily parse it.","4055903a":"The best value of k seems to be 7 as the train score and test score here are higher than other values of k as well as the difference between test score and train score is minimum","ee75ac1d":"### Missing values Intetpretation \n* More than 77% observations are missing in <b>Cabin<\/b> feature of both traning data and test data.\n* Approx. 20% of the observations are missing in the <b>Age<\/b> feature of both traning and test data.\n* 2 observations are missing in the <b>Embarked<\/b> feature only in traning data.No missing value for Emvarked feature in test data.\n* 1 observation in missing in the <b>Fare<\/b> feature only in test data.\n","ea602b6b":"* There are three records with id 259,680,738 who have paid very high than other normal people.\n* so we can do two things:\n    * Firstis to drop these observations from dataset.\n    * Second is to bucketize the <b>Fare<\/b> feature into 4 buckets.\n* We will bucketize the <b>Fare<\/b> into 4 buckets in the Feature Engineering section.\n","aeefaade":"### Feature Engineerig\n<b>Remove Redundant Features<\/b>\n* Dropping Cabin ,Name and Ticket from both traning data and test data. Cabin has lot of missing values.\n* Name and Ticket number does not have impact on the survival of the passengers","8693d350":"* Fare is highly skewed\n* Distributed is asymmetrical\n* There are outliers in fare variable\n* will trat outliers later","ec51ca24":"### Exploratory Data Analysis(EDA)\nwhy EDA:\n* Toanalyse and understand the patterns of each of the variables.\n* To check missing values, etc\n* Observe the relation between diffrent variables.","d07958f8":"#### A look at missing values","ac5a1905":"#### Missing Values and its Treatment\n* Generally datasets always have some missing values\nMay be done during data collection, or due to some data validation rule.","3d8d5d64":"### Identify Evalution Parameters\n* The evalution metric used in this challenge is accuracy.\n* Accuracy also used as a statistical mesure of how well a binary classification test correctly identifies or excludes a condition.\n* That is,accuracy is the praportion of correct predictions(both true positives and true negatives) among the total number of cases examined.\n* This formula for quantifying binary accuracy is:\n    * Accuracy = (TP+TN)\/(TP +TN+FP+FN)\n    * where Tp  = True Positive,FP = FalsePositive,TN = TrueNgative,FN = FalseNegative\n    ","b4a58ac0":"### Two way frequency Table\nA way to display frequencies or relative frequencies of two categorical variable.","f7bcf899":"Logistic Regression Tutorials:\n1. https:\/\/towardsdatascience.com\/logistic-regression-detailed-overview-46c4da4303bc\n\n2. https:\/\/www.geeksforgeeks.org\/understanding-logistic-regression\/    \n    ","869008ca":"### Embarked\n* This is a categorical column.\n* We will fill missing values here with mode(i.e maximum occuring value).\n","f19f4682":"<b>Data Types<\/b>\nLet's first understand different data types.<b>Some facts and statistics that are collected together for reference or analysis are data <\/b>\n<b>Types of Data<\/b>\n* <b>Quantative\/Categorical:<\/b> Data is descriptive in nature,describes an attribute that can be observed but not measured\n    * <b>Nominal:<\/b> Unordered(Finite number of possible values)\n       Sex,Embarked are of this type\n    * <b>Ordinal<\/b>: Ordered(Finite number of possible values)\n       Pclass is of this type,it has values 1st class ,2nd class and 3rd class\n    * <b>Text<\/b>:Text in nature.\n        Name is text data in this data set.\n","f274671d":"###  Model Building","8679526b":"### Treating Missing values\n1. We will drop <b>Cabin<\/b> column for both test and traning dataset.\n2. For <b>Age<\/b> column we will use <b>imputation<\/b> based on some observations.\n3. <b>Embarked<\/b> is a categorical column so we will use <b>Mode-Imputation<\/b> to fill missing values.\n4. As per our data visulization, there were some outliers in <b>Fare<\/b> column,so we will fill missing value here with the median.","b1cc2df9":"### Model Comparision","ac728de0":"### Interpreting Data Description\n* <b>Count<\/b> is the total number of non-null observations in each columns.\n* <b>Mean<\/b> is the value of all non-null observations in each column.\n* <b>std<\/b> is the standerd deviation (i.e measurevations)\n* <b>min,25%,50%,75% and max<\/b> are obtained after sorting each column in ascrnding order.\n    * <b>min<\/b> the smallest value\n    * <b>25%<\/b> the first quartile value or the median\n    * <b>50%<\/b> the second quartile value or the meadian.\n    * <b>75%<\/b> the third quartile\n    * <b>max<\/b> the largest value\n    ","443dae0a":"* cabin has only 204 non-null observations.\n* out of 204,147 unique observations are there.\n* Let's see the missing value percentage for this feature","07119d5d":"#### Survived and SibSp","d1e961e5":"* Survived is our target variable.we have to predict whether the passenger survived or not for the test data\n* convert passengerid to index column"}}