{"cell_type":{"983a6641":"code","887a8c36":"code","90262687":"code","6f8a8a67":"code","39d8ed50":"code","f6f08bdc":"code","5d37cc27":"code","0b430c1c":"code","2c4561bc":"code","f8534757":"code","972bbf43":"code","f4f7cd8e":"code","94e383e2":"code","9b4b79e9":"markdown","fb3c7cc4":"markdown","031d0926":"markdown","fbc82502":"markdown","85503ce5":"markdown","4ed34523":"markdown","f5d6beb2":"markdown","89a12663":"markdown","3656052c":"markdown","ad248cff":"markdown"},"source":{"983a6641":"import numpy as np\nimport pandas as pd\nimport gc\n\ngc.enable()\n\n# LOAD AND FREQUENCY-ENCODE\nFE = ['EngineVersion','AppVersion','AvSigVersion','Census_OSVersion']\n# LOAD AND ONE-HOT-ENCODE\nOHE = [ 'RtpStateBitfield','IsSxsPassiveMode','DefaultBrowsersIdentifier',\n        'AVProductStatesIdentifier','AVProductsInstalled', 'AVProductsEnabled',\n        'CountryIdentifier', 'CityIdentifier', \n        'GeoNameIdentifier', 'LocaleEnglishNameIdentifier',\n        'Processor', 'OsBuild', 'OsSuite',\n        'SmartScreen','Census_MDC2FormFactor',\n        'Census_OEMNameIdentifier', \n        'Census_ProcessorCoreCount',\n        'Census_ProcessorModelIdentifier', \n        'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName',\n        'Census_HasOpticalDiskDrive',\n        'Census_TotalPhysicalRAM', 'Census_ChassisTypeName',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches',\n        'Census_InternalPrimaryDisplayResolutionHorizontal',\n        'Census_InternalPrimaryDisplayResolutionVertical',\n        'Census_PowerPlatformRoleName', 'Census_InternalBatteryType',\n        'Census_InternalBatteryNumberOfCharges',\n        'Census_OSEdition', 'Census_OSInstallLanguageIdentifier',\n        'Census_GenuineStateName','Census_ActivationChannel',\n        'Census_FirmwareManufacturerIdentifier',\n        'Census_IsTouchEnabled', 'Census_IsPenCapable',\n        'Census_IsAlwaysOnAlwaysConnectedCapable', 'Wdft_IsGamer',\n        'Wdft_RegionIdentifier']\n\n# LOAD ALL AS CATEGORIES\ndtypes = {}\nfor x in FE+OHE: dtypes[x] = 'category'\ndtypes['MachineIdentifier'] = 'str'\ndtypes['HasDetections'] = 'int8'\n\n# LOAD CSV FILE\ntrain = pd.read_csv('..\/input\/microsoft-malware-prediction\/train.csv', usecols=dtypes.keys(), dtype=dtypes)\ntrain.head()","887a8c36":"sm = 1000000\ntrain = train.sample(sm)\n\ngc.collect()\ntrain.head()","90262687":"import math\n\n# CHECK FOR NAN\ndef nan_check(x):\n    if isinstance(x,float):\n        if math.isnan(x):\n            return True\n    return False\n\n# FREQUENCY ENCODING\ndef encode_FE(df,col):\n    d = df[col].value_counts(dropna=False)\n    n = col+\"_FE\"\n    df[n] = df[col].map(d)\/d.max()\n    return [n]\n\n# ONE-HOT-ENCODE ALL CATEGORY VALUES THAT COMPRISE MORE THAN\n# \"FILTER\" PERCENT OF TOTAL DATA AND HAS SIGNIFICANCE GREATER THAN \"ZVALUE\"\ndef encode_OHE(df, col, filter, zvalue, tar='HasDetections', m=0.5):\n    cv = df[col].value_counts(dropna=False)\n    cvd = cv.to_dict()\n    vals = len(cv)\n    th = filter * len(df)\n    sd = zvalue * 0.5\/ math.sqrt(th)\n    #print(sd)\n    n = []; ct = 0; d = {}\n    for x in cv.index:\n        try:\n            if cv[x]<th: break\n            sd = zvalue * 0.5\/ math.sqrt(cv[x])\n        except:\n            if cvd[x]<th: break\n            sd = zvalue * 0.5\/ math.sqrt(cvd[x])\n        if nan_check(x): r = df[df[col].isna()][tar].mean()\n        else: r = df[df[col]==x][tar].mean()\n        if abs(r-m)>sd:\n            nm = col+'_BE_'+str(x)\n            if nan_check(x): df[nm] = (df[col].isna()).astype('int8')\n            else: df[nm] = (df[col]==x).astype('int8')\n            n.append(nm)\n            d[x] = 1\n        ct += 1\n        if (ct+1)>=vals: break\n    return [n,d]\n\n# ONE-HOT-ENCODING from dictionary\ndef encode_OHE_test(df,col,dt):\n    n = []\n    for x in dt: \n        n += encode_BE(df,col,x)\n    return n\n\n# BOOLEAN ENCODING\ndef encode_BE(df,col,val):\n    n = col+\"_BE_\"+str(val)\n    if nan_check(val):\n        df[n] = df[col].isna()\n    else:\n        df[n] = df[col]==val\n    df[n] = df[n].astype('int8')\n    return [n]\n","6f8a8a67":"cols = []\ndd = []\n\n# ENCODE NEW\nfor x in FE:\n    cols += encode_FE(train,x)\nfor x in OHE:\n    tmp = encode_OHE(train,x,0.005,5)\n    cols += tmp[0]\n    dd.append(tmp[1])\n\n# REMOVE OLD\nfor x in FE+OHE:\n    del train[x]\n\ngc.collect()\ntrain.head()","39d8ed50":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    train[cols], train['HasDetections'], test_size = 0.5, random_state=1)","f6f08bdc":"from sklearn.metrics import accuracy_score\n\ndef train_and_get_score(model, X_train, X_test, y_train, y_test):\n    model.fit(X_train, y_train)\n    y_predict = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_predict)\n    return model, accuracy","5d37cc27":"from sklearn import metrics\n\ndef get_AUC(model, X_test, y_test):\n    y_predict_prob = model.predict_proba(X_test)\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, y_predict_prob[:,1], pos_label=1)\n    AUC = metrics.auc(fpr, tpr)\n    return AUC, fpr, tpr","0b430c1c":"import matplotlib.pyplot as plt\n\ndef plot_ROC_curve(AUC, fpr, tpr):\n    # The following line will tell Jupyter Notebook to keep the figures inside the explorer page \n    # rather than openng a new figure window:\n    %matplotlib inline\n\n    plt.figure()\n\n    # Roc Curve:\n    plt.plot(fpr, tpr, color='red', lw=2, \n             label='ROC Curve (area = %0.2f)' % AUC)\n\n    # Random Guess line:\n    plt.plot([0, 1], [0, 1], color='blue', lw=1, linestyle='--')\n\n    # Defining The Range of X-Axis and Y-Axis:\n    plt.xlim([-0.005, 1.005])\n    plt.ylim([0.0, 1.01])\n\n    # Labels, Title, Legend:\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic')\n    plt.legend(loc=\"lower right\")\n\n    plt.show()","2c4561bc":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg, accuracy = train_and_get_score(logreg, X_train, X_test, y_train, y_test)\n\nprint(f\"Accuracy score: {accuracy}\")\n\nAUC_logreg, fpr_logreg, tpr_logreg = get_AUC(logreg, X_test, y_test)\n\nprint(f\"AUC: {AUC_logreg}\")\n\nplot_ROC_curve(AUC_logreg, fpr_logreg, tpr_logreg)","f8534757":"from sklearn.ensemble import RandomForestClassifier\n\nrandfor = RandomForestClassifier(n_estimators = 19, bootstrap = True, random_state=2)\nrandfor, accuracy = train_and_get_score(randfor, X_train, X_test, y_train, y_test)\n\nprint(f\"Accuracy score: {accuracy}\")\n\nAUC_randfor, fpr_randfor, tpr_randfor = get_AUC(randfor, X_test, y_test)\n\nprint(f\"AUC: {AUC_randfor}\")\n\nplot_ROC_curve(AUC_randfor, fpr_randfor, tpr_randfor)","972bbf43":"from sklearn.tree import DecisionTreeClassifier\n\ndectree = DecisionTreeClassifier(random_state=3)\ndectree, accuracy = train_and_get_score(dectree, X_train, X_test, y_train, y_test)\n\nprint(f\"Accuracy score: {accuracy}\")\n\nAUC_dectree, fpr_dectree, tpr_dectree = get_AUC(dectree, X_test, y_test)\n\nprint(f\"AUC: {AUC_dectree}\")\n\nplot_ROC_curve(AUC_dectree, fpr_dectree, tpr_dectree)","f4f7cd8e":"#from sklearn.neighbors import KNeighborsClassifier\n\n#knn = KNeighborsClassifier(n_neighbors=10)\n#knn, accuracy = train_and_get_score(knn, X_train, X_test, y_train, y_test)\n\n#print(f\"Accuracy score: {accuracy}\")\n\n#AUC_knn, fpr_knn, tpr_knn = get_AUC(knn, X_test, y_test)\n\n#print(f\"AUC: {AUC_knn}\")\n\n#plot_ROC_curve(AUC_knn, fpr_knn, tpr_knn)","94e383e2":"%matplotlib inline\n\nplt.figure()\n\n# Roc Curve:\nplt.plot(fpr_logreg, tpr_logreg, color='red', lw=2, \n            label='Logistic Regresssion ROC Curve (area = %0.2f)' % AUC_logreg)\nplt.plot(fpr_randfor, tpr_randfor, color='green', lw=2, \n            label='Random Forest ROC Curve (area = %0.2f)' % AUC_randfor)\nplt.plot(fpr_dectree, tpr_dectree, color='purple', lw=2, \n            label='Decision Tree ROC Curve (area = %0.2f)' % AUC_dectree)\n#plt.plot(fpr_logreg, tpr_logreg, color='orange', lw=2, \n#            label='KNN ROC Curve (area = %0.2f)' % AUC_knn)\n\n# Random Guess line:\nplt.plot([0, 1], [0, 1], color='blue', lw=1, linestyle='--')\n\n# Defining The Range of X-Axis and Y-Axis:\nplt.xlim([-0.005, 1.005])\nplt.ylim([0.0, 1.01])\n\n# Labels, Title, Legend:\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\n\nplt.show()","9b4b79e9":"# Frequency and One Hot Encoding","fb3c7cc4":"# Random Forest","031d0926":"# Helper functions","fbc82502":"# Split the training data into label and features","85503ce5":"# Decision Tree","4ed34523":"# KNN","f5d6beb2":"# Logistic Regression","89a12663":"# Load data","3656052c":"# ROC Curve comparisions","ad248cff":"# Downsample"}}