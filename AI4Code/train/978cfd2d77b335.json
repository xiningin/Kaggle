{"cell_type":{"18cd109c":"code","b8dd0eae":"code","a426d027":"code","75f01f9c":"code","10b2ef3a":"code","c551b8c1":"code","2857a8f7":"code","3d1dc770":"code","3f72b8d4":"code","c310a9c7":"code","d05c4ebb":"code","6ca8adc9":"code","270e22cb":"code","684a658a":"code","0d8e6c5b":"code","130d93bf":"code","2c408dca":"code","c375419c":"code","9975b259":"code","9e4fcf58":"code","eb1f8c32":"code","6c798847":"code","214ac399":"code","1b6e6fe6":"code","e45a6636":"code","2c7a2516":"code","c1fa85fa":"markdown","f8ad5bb3":"markdown","aa4f293a":"markdown","e50928bf":"markdown","7d89ca17":"markdown","2477dc36":"markdown","a88bd0ad":"markdown","49e78c84":"markdown","10cb9877":"markdown","3faadc7b":"markdown","080a1cac":"markdown","d202f921":"markdown","8cd45515":"markdown","6e6ca657":"markdown","e30089cb":"markdown","b12d4365":"markdown","2616ff70":"markdown","a71d53ec":"markdown","e2c842b9":"markdown","028349d7":"markdown","0adfbe8e":"markdown","45029d07":"markdown","71db7305":"markdown","6cd93dd5":"markdown","ab899e18":"markdown","eeddca9c":"markdown","fb38d2e5":"markdown","d251d9eb":"markdown"},"source":{"18cd109c":"# to manage paths\nimport os\n# to process images\nimport cv2\n# to read MATLAB file\nfrom scipy import io\n# for array operations\nimport numpy as np\n# for final dataframe outputs\nimport pandas as pd\n# to display images\nimport matplotlib.pyplot as plt\n# to display image legends\nimport matplotlib as mpl\n# to visualize iterations\nfrom tqdm import tqdm\n# to process tensors\nimport tensorflow as tf","b8dd0eae":"!git clone https:\/\/github.com\/bearpaw\/clothing-co-parsing.git","a426d027":"!ls -p clothing-co-parsing","75f01f9c":"# a list to store image tensors\nimages = []\n# read 1000 images\nfor i in range(1,1001):\n    url = '.\/clothing-co-parsing\/photos\/%04d.jpg'%(i)\n    # use OpenCV for lossless reading\n    img = cv2.imread(url, 1)\n    # convert BGR image into RGB image\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    # convert into a tensor\n    img = tf.convert_to_tensor(img)\n    # resize the image by either cropping or padding with zeros\n    img = tf.image.resize_with_crop_or_pad(img,825,550)\n    # add to the list\n    images.append(img)","10b2ef3a":"# sample an image and visualize it\nplt.figure(figsize=(4,7))\nexample_image = images[0]\nplt.imshow(example_image)\nplt.show()","c551b8c1":"# a list to collect mask tensors\nsegmentations = []\n# read 1000 files\nfor i in range(1,1001):\n    url = '.\/clothing-co-parsing\/annotations\/pixel-level\/%04d.mat'%(i)\n    # read MATLAB file as image\n    file = io.loadmat(url)\n    # convert into a tensor\n    mask = tf.convert_to_tensor(file['groundtruth'])\n    # resize expects 3D image, but we got 2D grayscale image \n    # so expand dimensions\n    mask = tf.expand_dims(mask,-1)\n    # resize by either cropping excess or padding with zeros\n    mask = tf.image.resize_with_crop_or_pad(mask,825,550)\n    # append the mask image to the list\n    segmentations.append(mask)","2857a8f7":"# sample a mask and visualize it\nexample_seg = segmentations[0]\nplt.figure(figsize=(5,7))\nplt.imshow(example_seg, cmap='jet')\nplt.colorbar()\nplt.show()","3d1dc770":"# what are the unique pixel values?\nnp.unique(example_seg)","3f72b8d4":"label_url = '.\/clothing-co-parsing\/label_list'\n# read the labels list MATLAB file\nlabel_file = io.loadmat(label_url)['label_list']\n# what is its shape?\nlabel_file.shape","c310a9c7":"# remove unnecessary dimension\nlabel_file = np.squeeze(label_file)\nlabel_file.shape","d05c4ebb":"# view the file\nlabel_file","6ca8adc9":"labels = [label[0].astype(str) for label in label_file]\nlabels","270e22cb":"# sample a mask and show the class labels as legends\nplt.figure(figsize=(7,7))\nexample_seg = segmentations[0]\n# obtain unique values (the class numbers)\nannotations = np.unique(example_seg.numpy().ravel())\n# read the names\nnames = [labels[a] for a in annotations]\n# the values range from 0 to 58, hence normalize for homogeneity\nNORM = mpl.colors.Normalize(vmin=0, vmax=58)\n# visulaize the image\nplt.imshow(example_seg, cmap='jet', norm=NORM)\nplt.axis('off')\n# prepare patches for legends\nPATCHES = [mpl.patches.Patch(color=mpl.cm.jet(NORM(a)), label=f'{a}: {names[i]}') for i,a in enumerate(annotations)]\nplt.legend(handles=PATCHES, bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.show()","684a658a":"!rm -r clothing-co-parsing","0d8e6c5b":"plt.figure(figsize=(16,16))\n# display 9 images and corresponding masks with legends\nfor i in range(1,9):\n    # display a mask with legends\n    plt.subplot(4,4,2*i-1)\n    example_seg = segmentations[i]\n    annotations = np.unique(example_seg.numpy().ravel())\n    names = [labels[a] for a in annotations]\n    NORM = mpl.colors.Normalize(vmin=0, vmax=58)\n    plt.imshow(example_seg, cmap='jet', norm=NORM)\n    plt.axis('off')\n    PATCHES = [mpl.patches.Patch(color=mpl.cm.jet(NORM(a)), label=names[i]) for i,a in enumerate(annotations)]\n    plt.legend(handles=PATCHES, bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n    \n    # display an image\n    plt.subplot(4,4,2*i)\n    example_image = images[i]\n    plt.imshow(example_image)\n    plt.axis('off')\n    \nplt.show()","130d93bf":"for i in tqdm(range(1000)):\n    img = images[i]\n    # encode into PNG\n    img = tf.io.encode_png(img)\n    # create a path\n    path = os.path.join('IMAGES','img_%04d.png'%(i+1))\n    file_name = tf.constant(path)\n    # write the PNG file\n    tf.io.write_file(file_name, img)","2c408dca":"# a list to store image paths\nPNG_IMAGES = []\nfor root, dirs, files in os.walk('.'):\n    for file in files:\n        if 'img_' in file:\n            # get image paths\n            path = os.path.join(root, file)\n            PNG_IMAGES.append(path)","c375419c":"# filenames are unsorted while writing so sort them now\nPNG_IMAGES.sort()\nprint(PNG_IMAGES[:10])","9975b259":"# sample an image\nim = tf.io.read_file(PNG_IMAGES[102])\n# decode it into a tensor\ndec = tf.io.decode_png(im, channels=3, dtype=tf.dtypes.uint8)\n# visualize it\nplt.figure(figsize=(4,7))\nplt.imshow(dec)\nplt.show()","9e4fcf58":"# encode 1000 masks into PNG files\nfor i in tqdm(range(1000)):\n    seg = segmentations[i]\n    # encode the tensor into PNG\n    seg = tf.io.encode_png(seg)\n    # create a path to write\n    path = os.path.join('MASKS','seg_%04d.png'%(i+1))\n    file_name = tf.constant(path)\n    # write the PNG file\n    tf.io.write_file(file_name, seg)","eb1f8c32":"# a list to store the mask paths\nPNG_MASKS = []\nfor root, dirs, files in os.walk('.'):\n    for file in files:\n        if 'seg_' in file:\n            # obtain the path\n            path = os.path.join(root, file)\n            PNG_MASKS.append(path)","6c798847":"# paths are unsorted while writing\nPNG_MASKS.sort()\n# view some paths\nprint(PNG_MASKS[:10])","214ac399":"# read a sample mask\nim = tf.io.read_file(PNG_MASKS[102])\n# decode into a tensor\ndec = tf.io.decode_png(im, channels=0, dtype = tf.dtypes.uint8)\n# visualize the mask\nplt.figure(figsize=(5,7))\nplt.imshow(dec, cmap='jet', norm=NORM)\nplt.colorbar()\nplt.show()","1b6e6fe6":"!zip -r -q png_images.zip IMAGES\/\n!zip -r -q png_masks.zip MASKS\/","e45a6636":"for i in range(6,1000):\n    # define the paths\n    image_path = '.\/IMAGES\/img_%04d.png'%(i)\n    mask_path = '.\/MASKS\/seg_%04d.png'%(i)\n    # delete the image\n    if os.path.exists(image_path):\n        os.remove(image_path)\n    \n    # delete the mask\n    if os.path.exists(mask_path):\n        os.remove(mask_path)","2c7a2516":"labels = np.array(labels)\nlabels = pd.Series(labels, name='label_list')\nlabels.to_csv('labels.csv')","c1fa85fa":"### 2. Convert Segmentations","f8ad5bb3":"### 1. Convert Images","aa4f293a":"# How To Convert MATLAB File Into PNG File?","e50928bf":"### Have a Look at the downloaded contents","7d89ca17":"### `photos\/` directory and `annotations\/` directory are the images and segmentations collections respectively. ","2477dc36":"### There are 1000 images of people fashion and clothing - and corresponding 1000 segmentation mask images. The image files are in JPG format and masks are in MATLAB format. The files do not have consistency in size (variable height). However, image and mask pairs do have identical sizes. We read the files and write them into tensors for further processing.","a88bd0ad":"### PNG images are the uncompressed formats, hence lossless. Obtaining a lossless transition is crucial becuase the segmentation masks are made with integers that refer to the object classes. In the earlier versions of this notebook, conversion was made into JPEG formats. Though JPEG yields compressed and compact outputs, the segmentation classes are compromised. For instance, the conversion creates new classes in the masks, despite there are no such classes in the original masks. Learning Segmentations may become complicated and misleading with such lossy transitions. Hence latest versions of this notebook prefer conversions into PNG formats.","49e78c84":"### 3. Read Labels","10cb9877":"# MATLAB files","3faadc7b":"# Read Images, Segmentations and Labels","080a1cac":"### Thank You For Your Time!","d202f921":"### The downloaded PNG files (and the JPEG files from earlier versions of this notebook) and the labels list CSV file are available as a Kaggle Dataset at [https:\/\/www.kaggle.com\/rajkumarl\/people-clothing-segmentation](https:\/\/www.kaggle.com\/rajkumarl\/people-clothing-segmentation). \n\n### A Notebook on this dataset is available at [https:\/\/www.kaggle.com\/rajkumarl\/get-started-with-semantic-segmentation](https:\/\/www.kaggle.com\/rajkumarl\/get-started-with-semantic-segmentation)","8cd45515":"# Display Images, Segmentations and Labels","6e6ca657":"### Zip Images and Segmentations (helpful for download!)","e30089cb":"### 2. Segmentations","b12d4365":"### Keep a Few Images and Segmentations and Remove the rest (for clean output, otherwise, the output pane will be overcrowded!)","2616ff70":"### We have read necessary contents from the source file directory. We can delete the directory and its contents to save memory and get clean outputs finally.","a71d53ec":"### We use open source image segmentation files and their corresponding original images (with a Special Thanks!).The open source collection is available at https:\/\/github.com\/bearpaw\/clothing-co-parsing\n","e2c842b9":"### Acknowledgement:\n> @inproceedings{yang2014clothing,\n  title={Clothing Co-Parsing by Joint Image Segmentation and Labeling},\n  author={Yang, Wei and Luo, Ping and Lin, Liang}\n  booktitle={Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on},\n  year={2013},\n  organization={IEEE}\n}\n\n","028349d7":"## Import","0adfbe8e":"### Image Segmentations are mosty developed by skilled people in `.mat` format in MATLAB. We cannot visualize or process those images as such. We may need to convert them suitably into a readable, yet uncompressed, format such as PNG or something else. ","45029d07":"# Write Files to Output","71db7305":"### Write the class labels names into a CSV file","6cd93dd5":"# Convert Images and Segmentations into PNG File","ab899e18":"### 1. Read Images","eeddca9c":"### Check for proper encoding","fb38d2e5":"### Each label is an array. Extract the label strings alone. ","d251d9eb":"### Check for proper encoding"}}