{"cell_type":{"7bda35ee":"code","8fc8f502":"code","7a24619a":"code","0da4e3be":"code","2e511aa3":"code","60eeb218":"code","b2abbe81":"code","81becdc0":"code","5f635552":"code","654e3228":"code","f5beca44":"code","7080e0c2":"code","41e92d05":"code","f2e3ec7e":"code","053b26e1":"code","255e7a14":"code","0b06836e":"code","ee9e209a":"code","b4054a58":"code","95b95065":"code","d510fbd2":"code","27f7eeae":"code","7a9c8c97":"code","ebb7c2e3":"code","a1795743":"code","e7af7ca5":"code","826c76c6":"code","88a0df49":"code","8913e340":"code","4ed0c44a":"code","27701532":"code","92ac3b0f":"code","6cbebe52":"code","d7e0d3d7":"code","4eb9f6da":"code","1b6619f0":"code","b049663c":"code","c788a015":"code","c868fce1":"code","8010cac9":"code","20735f25":"code","da245ba8":"code","e8a839a0":"code","a21dea4f":"code","20b0fe62":"code","694b2789":"code","54ffb75b":"code","9eed2482":"code","a4622e31":"code","59a44861":"code","5486745f":"code","1a44dcff":"code","ac7eab3c":"code","71a19881":"code","deefc260":"code","26e3bb16":"code","de4d36aa":"code","2e869ee0":"code","461e13e1":"code","9e9edf84":"code","1550a887":"code","48b695dd":"code","415d8e42":"code","76a7c0a0":"code","ea795ff9":"code","c9919381":"code","85d1df5c":"code","48974225":"code","e1120fc9":"code","1722e74d":"code","3dd453cc":"code","f4d8007a":"code","435df58a":"code","4c6063c8":"code","f91c2067":"code","1261e99f":"code","38cffaca":"code","a9c4432b":"markdown","9315ebd6":"markdown","bf486f0a":"markdown","7349f2d2":"markdown","c585c780":"markdown","530d6d91":"markdown","1582fae2":"markdown","5356b9ae":"markdown","18273c03":"markdown","619cc22f":"markdown","1076da2b":"markdown","29fb6aa1":"markdown","e5a3643b":"markdown","2a5b3277":"markdown","4c935cab":"markdown","3c4036a7":"markdown","f1384acd":"markdown","7341e65d":"markdown","37dadd2c":"markdown","be917c9d":"markdown","17963829":"markdown","9f013873":"markdown","36bcb6e6":"markdown","5dd05ed2":"markdown","c4d076dc":"markdown","7a8cf33f":"markdown","48097efa":"markdown","13bf3be8":"markdown","007091e7":"markdown","637a7665":"markdown","fbbcbd0e":"markdown","f27e41dd":"markdown","fbf96d5b":"markdown","6dcfd810":"markdown","dcf56a97":"markdown","68f4dc96":"markdown","857770af":"markdown","534f9b6b":"markdown","e6d5b41c":"markdown","f6724b89":"markdown","ad643d86":"markdown","04e2aa96":"markdown","c770d37b":"markdown","023be201":"markdown","7a493260":"markdown","7aa41a73":"markdown","26c41e08":"markdown","9d906c89":"markdown","ed6aa7ac":"markdown","736c65ff":"markdown","b25851df":"markdown","fc93945d":"markdown","04d653b2":"markdown","a88f09ab":"markdown","a393836f":"markdown","a33d5181":"markdown","5430ba26":"markdown"},"source":{"7bda35ee":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nimport warnings\nwarnings.simplefilter(action='ignore')\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV, train_test_split\nimport math\nimport sklearn.model_selection as ms\nimport sklearn.metrics as sklm","8fc8f502":"a = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nb = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","7a24619a":"# \u3053\u306e\u30b3\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u3059\u3079\u3066\u306e\u5217(163\u5217)\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","0da4e3be":"a.head()","2e511aa3":"print('train : %s\u306e\u8981\u7d20\u3068%s\u306e\u7279\u5fb4\u91cf\u304c\u3042\u308a\u307e\u3059\u3002'%(a.shape[0],a.shape[1]))\nprint('test : %s\u306e\u8981\u7d20\u3068%s\u306e\u7279\u5fb4\u91cf\u304c\u3042\u308a\u307e\u3059'%(b.shape[0],b.shape[1]))\nprint('test\u306ftrain\u3088\u308a\u3082\u7279\u5fb4\u91cf\u304c1\u3064\u5c11\u306a\u304f\u306a\u3063\u3066\u304a\u308a\u3001\u305d\u306e\u6b8b\u308a1\u3064\u304c\u4e88\u6e2c\u5bfe\u8c61\u3067\u3042\u308bSalePrice\u3067\u3059\u3002')","60eeb218":"num=a.select_dtypes(exclude='object')\nnumcorr=num.corr()\nf,ax=plt.subplots(figsize=(17,1))\nsns.heatmap(numcorr.sort_values(by=['SalePrice'], ascending=False).head(1), cmap='Blues')\nplt.title(\" Numerical features correlation with the sale price\", weight='bold', fontsize=18)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold', color='dodgerblue', rotation=0)\n\n\nplt.show()","b2abbe81":"# \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306b\u8868\u793a\u3059\u308b\u5217\u6570\nk = 10\n\ncols = numcorr.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(a[cols].values.T)\n\nsns.set(font_scale=1.25)\n\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","81becdc0":"plt.figure(figsize=(15,6))\nplt.scatter(x=a['GrLivArea'], y=a['SalePrice'], color='crimson', alpha=0.5)\nplt.title('Ground living area\/ Sale price', weight='bold', fontsize=16)\nplt.xlabel('Ground living area', weight='bold', fontsize=12)\nplt.ylabel('Sale price', weight='bold', fontsize=12)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold')\nplt.show()","5f635552":"fig, ax = plt.subplots(figsize=(9,6))\n\n\ntitle_cnt=a.Neighborhood.value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1], color=sns.color_palette('Reds',len(title_cnt)))\n\n\n\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n\nax.grid(b=True, color='grey', linestyle='-.', linewidth=1, alpha=0.2)\n\n\nax.invert_yaxis()\n\n\nax.set_title('Most frequent neighborhoods',weight='bold',\n             loc='center', pad=10, fontsize=16)\nax.set_xlabel('Count', weight='bold')\n\n\n\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n            fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\n\n\nplt.show()","654e3228":"fig, ax = plt.subplots(figsize=(9,6))\n\ntitle_cnt=a.BldgType.value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1], color=sns.color_palette('Greens',len(title_cnt)))\n\n\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\nax.grid(b=True, color='grey', linestyle='-.', linewidth=1, alpha=0.2)\n\nax.invert_yaxis()\n\nax.set_title('Building type: Type of dwelling',weight='bold',\n             loc='center', pad=10, fontsize=16)\nax.set_xlabel('Count', weight='bold')\n\n\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n            fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\n\n\nplt.show()","f5beca44":"na = a.shape[0]\nnb = b.shape[0]\ny_train = a['SalePrice'].to_frame()\n# combination sets\nc1 = pd.concat((a, b), sort=False).reset_index(drop=True)\n# SalePrice\u3068Id\u3092\u524a\u9664\u3057\u307e\u3059\u3002\nc1.drop(['SalePrice'], axis=1, inplace=True)\nc1.drop(['Id'], axis=1, inplace=True)\nprint(f\"\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba : {c1.shape}\")","7080e0c2":"def msv1(data, thresh=80, color='black', edgecolor='black', width=15, height=3):\n    \n    plt.figure(figsize=(width,height))\n    percentage=(data.isnull().mean())*100\n    percentage.sort_values(ascending=False).plot.bar(color=color, edgecolor=edgecolor)\n    plt.axhline(y=thresh, color='r', linestyle='-')\n    plt.title('Missing values percentage per column', fontsize=20, weight='bold' )\n    plt.text(len(data.isnull().sum()\/len(data))\/1.7, thresh+12.5, f'Columns with more than {thresh}% missing values', fontsize=12, color='crimson',\n         ha='left' ,va='top')\n    plt.text(len(data.isnull().sum()\/len(data))\/1.7, thresh - 5, f'Columns with less than {thresh}% missing values', fontsize=12, color='green',\n         ha='left' ,va='top')\n    plt.xlabel('Columns', size=15, weight='bold')\n    plt.ylabel('Missing values percentage')\n    plt.yticks(weight ='bold')\n    \n    return plt.show()","41e92d05":"msv1(c1, 80, color=('black', 'deeppink'))","f2e3ec7e":"c=c1.dropna(thresh=len(c1)*0.2, axis=1)\nprint(f\"train\u3068test\u306e\u7d50\u5408\u30c7\u30fc\u30bf(combination)\u304b\u3089{c1.shape[1] - c.shape[1]}\u3064\u306e\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3057\u307e\u3057\u305f\u3002\")","053b26e1":"allna = (c.isnull().sum() \/ len(c))*100\nallna = allna.drop(allna[allna == 0].index).sort_values()\n\ndef msv2(data, width=12, height=8, color=('silver', 'gold','lightgreen','skyblue','lightpink'), edgecolor='black'):\n\n    fig, ax = plt.subplots(figsize=(width, height))\n\n    allna = (data.isnull().sum() \/ len(data))*100\n    tightout= 0.008*max(allna)\n    allna = allna.drop(allna[allna == 0].index).sort_values().reset_index()\n    mn= ax.barh(allna.iloc[:,0], allna.iloc[:,1], color=color, edgecolor=edgecolor)\n    ax.set_title('Missing values percentage per column', fontsize=15, weight='bold' )\n    ax.set_xlabel('Percentage', weight='bold', size=15)\n    ax.set_ylabel('Features with missing values', weight='bold')\n    plt.yticks(weight='bold')\n    plt.xticks(weight='bold')\n    for i in ax.patches:\n        ax.text(i.get_width()+ tightout, i.get_y()+0.1, str(round((i.get_width()), 2))+'%',\n            fontsize=10, fontweight='bold', color='grey')\n    return plt.show()","255e7a14":"msv2(c)","0b06836e":"print(f'80%\u4ee5\u4e0a\u306e\u6b20\u640d\u5024\u3092\u6301\u3064\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3057\u305f\u5f8c\u306e\u7d50\u5408\u30c7\u30fc\u30bf. {c.shape}')","ee9e209a":"NA=c[allna.index.to_list()]","b4054a58":"NAcat=NA.select_dtypes(include='object')\nNAnum=NA.select_dtypes(exclude='object')\nprint(f'\u6b20\u640d\u5024\u3092\u6301\u3064{NAcat.shape[1]}\u500b\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u7279\u5fb4\u91cf\u304c\u3042\u308a\u307e\u3059\u3002')\nprint(f'\u6b20\u640d\u5024\u3092\u6301\u3064{NAnum.shape[1]}\u500b\u306e\u6570\u5024\u7279\u5fb4\u91cf\u304c\u3042\u308a\u307e\u3059\u3002')","95b95065":"NAnum.head()","d510fbd2":"#\u77f3\u7a4d\u307f\u30d9\u30cb\u30e4\u306e\u9762\u7a4d(MasVnrArea)\u306e\u6b20\u640d\u5024\u306f\u30d9\u30cb\u30e4\u304c\u7121\u3044\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u306e\u3067\u30010\u3067\u57cb\u3081\u307e\u3059\u3002\nc['MasVnrArea']=c.MasVnrArea.fillna(0)\n#\u6577\u5730\u306b\u63a5\u7d9a\u3055\u308c\u305f\u9053\u8def\u306e\u9577\u3055(LotFrontage)\u306e\u6b20\u640d\u5024(16%)\u306f\u4e2d\u592e\u5024\u3067\u57cb\u3081\u307e\u3059\u3002\nc['LotFrontage']=c.LotFrontage.fillna(c.LotFrontage.median())\n#\u30ac\u30ec\u30fc\u30b8\u306e\u7bc9\u5e74\u6570(GarageYrBlt)\u306e\u6b20\u640d\u5024\u3082\u4e2d\u592e\u5024\u3067\u57cb\u3081\u307e\u3059\u3002\nc['GarageYrBlt']=c[\"GarageYrBlt\"].fillna(1980)","27f7eeae":"NAcat.head()","7a9c8c97":"NAcat1= NAcat.isnull().sum().to_frame().sort_values(by=[0]).T\ncm = sns.light_palette(\"lime\", as_cmap=True)\n\nNAcat1 = NAcat1.style.background_gradient(cmap=cm)\nNAcat1","ebb7c2e3":"ffill_cols = ['KitchenQual', 'Electrical', 'SaleType',  'Exterior1st',\n             'Exterior2nd', 'Utilities', 'Functional', 'MSZoning']\n\ndef filling_NA(data, columns, METHOD='ffill'):\n    fill_cols = columns\n    \n    for col in data[fill_cols]:\n        data[col]= data[col].fillna(method=METHOD)\n    \n    return data","a1795743":"msv2(c)","e7af7ca5":"d=filling_NA(c, ffill_cols)","826c76c6":"msv2(d)","88a0df49":"fill_cols = ['KitchenQual', 'Electrical', 'SaleType', 'Exterior1st',\n             'Exterior2nd', 'Utilities', 'Functional', 'MSZoning']\n\nfor col in c[fill_cols]:\n    c[col] = c[col].fillna(method='ffill')","8913e340":"#Categorical missing values\nNAcols=c.columns\nfor col in NAcols:\n    if c[col].dtype == \"object\":\n        c[col] = c[col].fillna(\"None\")","4ed0c44a":"#Numerical missing values\nfor col in NAcols:\n    if c[col].dtype != \"object\":\n        c[col]= c[col].fillna(0)","27701532":"c.isnull().sum().sort_values(ascending=False).head()","92ac3b0f":"c['TotalArea'] = c['TotalBsmtSF'] + c['1stFlrSF'] + c['2ndFlrSF'] + c['GrLivArea'] +c['GarageArea']\n\nc['Bathrooms'] = c['FullBath'] + c['HalfBath']*0.5 \n\nc['Year average']= (c['YearRemodAdd']+c['YearBuilt'])\/2","6cbebe52":"c['MoSold'] = c['MoSold'].astype(str)\nc['MSSubClass'] = c['MSSubClass'].apply(str)\nc['YrSold'] = c['YrSold'].astype(str)","d7e0d3d7":"cb=pd.get_dummies(c)\nprint(f\"the shape of the original dataset {c.shape}\")\nprint(f\"the shape of the encoded dataset {cb.shape}\")\nprint(f\"We have {cb.shape[1]- c.shape[1]} new encoded features\")","4eb9f6da":"Train = cb[:na]\nTest = cb[na:] ","1b6619f0":"fig = plt.figure(figsize=(15,15))\nax1 = plt.subplot2grid((3,2),(0,0))\nplt.scatter(x=a['GrLivArea'], y=a['SalePrice'], color=('yellowgreen'), alpha=0.7)\nplt.axvline(x=4600, color='r', linestyle='-')\nplt.title('Ground living Area- Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(0,1))\nplt.scatter(x=a['TotalBsmtSF'], y=a['SalePrice'], color=('red'),alpha=0.5)\nplt.axvline(x=5900, color='r', linestyle='-')\nplt.title('Basement Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(1,0))\nplt.scatter(x=a['1stFlrSF'], y=a['SalePrice'], color=('deepskyblue'),alpha=0.5)\nplt.axvline(x=4000, color='r', linestyle='-')\nplt.title('First floor Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(1,1))\nplt.scatter(x=a['MasVnrArea'], y=a['SalePrice'], color=('gold'),alpha=0.9)\nplt.axvline(x=1500, color='r', linestyle='-')\nplt.title('Masonry veneer Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(2,0))\nplt.scatter(x=a['GarageArea'], y=a['SalePrice'], color=('orchid'),alpha=0.7)\nplt.axvline(x=1230, color='r', linestyle='-')\nplt.title('Garage Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(2,1))\nplt.scatter(x=a['TotRmsAbvGrd'], y=a['SalePrice'], color=('tan'),alpha=0.9)\nplt.axvline(x=13, color='r', linestyle='-')\nplt.title('TotRmsAbvGrd - Price scatter plot', fontsize=15, weight='bold' )\nplt.show()","b049663c":"a['GrLivArea'].sort_values(ascending=False).head(2)","c788a015":"a['TotalBsmtSF'].sort_values(ascending=False).head(1)","c868fce1":"a['MasVnrArea'].sort_values(ascending=False).head(1)","8010cac9":"a['1stFlrSF'].sort_values(ascending=False).head(1)","20735f25":"a['GarageArea'].sort_values(ascending=False).head(4)","da245ba8":"a['TotRmsAbvGrd'].sort_values(ascending=False).head(1)","e8a839a0":"train=Train[(Train['GrLivArea'] < 4676) & (Train['MasVnrArea'] < 1600)]\n\nprint(f'{Train.shape[0]- train.shape[0]}\u3064\u306e\u5916\u308c\u5024\u3092\u524a\u9664\u3057\u307e\u3057\u305f\u3002')","a21dea4f":"target=a[['SalePrice']]\ntarget.loc[1298]","20b0fe62":"target.loc[523]","694b2789":"pos = [1298,523, 297]\ntarget.drop(target.index[pos], inplace=True)","54ffb75b":"print('\u5916\u308c\u5024\u3092\u9664\u53bb\u3057\u305f\u5f8c\u3001\u7279\u5fb4\u91cf\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u884c\u756a\u53f7\u304c\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002')\nprint( 'Train: ',train.shape[0],'\u5217')\nprint('Target:', target.shape[0],'\u5217')","9eed2482":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\nfig = plt.figure(figsize=(15,5))\n\n# GrLivArea\u306e\u7279\u5fb4\u91cf\u3067\u78ba\u8a8d\nax1 = plt.subplot2grid((1,2),(0,0))\nplt.scatter(x=a['GrLivArea'], y=a['SalePrice'], color=('orchid'), alpha=0.5)\nplt.title('Area-Price plot with outliers',weight='bold', fontsize=18)\nplt.axvline(x=4600, color='r', linestyle='-')\n\nax1 = plt.subplot2grid((1,2),(0,1))\nplt.scatter(x=train['GrLivArea'], y=target['SalePrice'], color='navy', alpha=0.5)\nplt.axvline(x=4600, color='r', linestyle='-')\nplt.title('Area-Price plot without outliers',weight='bold', fontsize=18)\nplt.show()","a4622e31":"from scipy.stats import skew","59a44861":"print(f\"\u5bfe\u6570\u5909\u63db\u524d\u306e\u6b6a\u5ea6: {target['SalePrice'].skew()}\")\nprint(f\"\u5bfe\u6570\u5909\u63db\u524d\u306e\u5c16\u5ea6: {target['SalePrice'].kurt()}\")","5486745f":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u5bfe\u6570\u5909\u63db\u3059\u308b\ntarget[\"SalePrice\"] = np.log1p(target[\"SalePrice\"])","1a44dcff":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\nfig = plt.figure(figsize=(15,5))\n\nax1 = plt.subplot2grid((1,2),(0,0))\nplt.hist(a.SalePrice, bins=10, color='mediumpurple',alpha=0.5)\nplt.title('Sale price distribution before normalization',weight='bold', fontsize=18)\n\nax1 = plt.subplot2grid((1,2),(0,1))\nplt.hist(target.SalePrice, bins=10, color='darkcyan',alpha=0.5)\nplt.title('Sale price distribution after normalization',weight='bold', fontsize=18)\nplt.show()","ac7eab3c":"print(f\"\u5bfe\u6570\u5909\u63db\u5f8c\u306e\u6b6a\u5ea6: {target['SalePrice'].skew()}\")\nprint(f\"\u5bfe\u6570\u5909\u63db\u5f8c\u306e\u5c16\u5ea6: {target['SalePrice'].kurt()}\")","71a19881":"x=train\ny=np.array(target)","deefc260":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y,test_size = .3, random_state=0)","26e3bb16":"from sklearn.preprocessing import RobustScaler\nscaler= RobustScaler()\n# transform \"x_train\"\nx_train = scaler.fit_transform(x_train)\n# transform \"x_test\"\nx_test = scaler.transform(x_test)\n#Transform the test set\nX_test= scaler.transform(Test)","de4d36aa":"from sklearn.linear_model import LinearRegression\n\nlreg=LinearRegression()\nMSEs=ms.cross_val_score(lreg, x, y, scoring='neg_mean_squared_error', cv=5)\nmeanMSE=np.mean(MSEs)\nprint(meanMSE)\nprint('RMSE = '+str(math.sqrt(-meanMSE)))","2e869ee0":"def score(y_pred):\n    return str(math.sqrt(sklm.mean_squared_error(y_test, y_pred)))","461e13e1":"import sklearn.model_selection as GridSearchCV\nfrom sklearn.linear_model import Ridge\n\nridge=Ridge()\nparameters= {'alpha':[x for x in range(1,101)]}\n\nridge_reg=ms.GridSearchCV(ridge, param_grid=parameters, scoring='neg_mean_squared_error', cv=15)\nridge_reg.fit(x_train,y_train)\nprint(f\"\u30d9\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf : {ridge_reg.best_params_}\")\nprint(f\"\u30d9\u30b9\u30c8\u30b9\u30b3\u30a2 : {math.sqrt(-ridge_reg.best_score_)}\")\nridge_pred=math.sqrt(-ridge_reg.best_score_)","9e9edf84":"ridge_mod=Ridge(alpha=17)\nridge_mod.fit(x_train,y_train)\ny_pred_train=ridge_mod.predict(x_train)\ny_pred_test=ridge_mod.predict(x_test)\n\nprint(f'RMSE : train = {str(math.sqrt(sklm.mean_squared_error(y_train, y_pred_train)))}')\nprint(f'RMSE : test = {score(y_pred_test)}')   ","1550a887":"from sklearn.linear_model import Lasso\n\nparameters= {'alpha':[10, 1, 0.1, 0.01, 0.001, 0.0001, 0.0003, 0.0005, 0.0007, 0.00075]}\n\n\nlasso=Lasso()\nlasso_reg=ms.GridSearchCV(lasso, param_grid=parameters, scoring='neg_mean_squared_error', cv=15)\nlasso_reg.fit(x_train,y_train)\n\nprint(f'\u30d9\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf: {lasso_reg.best_params_}')","48b695dd":"lasso_mod=Lasso(alpha=0.0007)\nlasso_mod.fit(x_train,y_train)\ny_lasso_train=lasso_mod.predict(x_train)\ny_lasso_test=lasso_mod.predict(x_test)\n\nprint(f'RMSE : train = {str(math.sqrt(sklm.mean_squared_error(y_train, y_lasso_train)))}')\nprint(f'RMSE : test = {score(y_lasso_test)}')","415d8e42":"coefs = pd.Series(lasso_mod.coef_, index = x.columns)\n\nimp_coefs = pd.concat([coefs.sort_values().head(10),\n                     coefs.sort_values().tail(10)])\nimp_coefs.plot(kind = \"barh\", color='orange')\nplt.xlabel(\"Lasso coefficient\", weight='bold')\nplt.title(\"Feature importance in the Lasso Model\", weight='bold')\nplt.show()","76a7c0a0":"print(f\"\u30e9\u30c3\u30bd\u56de\u5e30\u3067\u306f\u3001{sum(coefs != 0)}\u500b\u306e\u6709\u76ca\u306a\u7279\u5fb4\u91cf\u3092\u7dad\u6301\u3057\u3001{sum(coefs == 0)}\u500b\u306e\u7121\u76ca\u306a\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3057\u307e\u3057\u305f\u3002\")","ea795ff9":"from sklearn.linear_model import ElasticNetCV\n\nalphas = [10, 1, 0.1, 0.01, 0.001, 0.0001, 0.0003, 0.0005, 0.0006, 0.00055]\nl1ratio = [0.1, 0.3, 0.5, 0.9, 0.95, 0.99, 1]\n\nelastic_cv = ElasticNetCV(cv=5, max_iter=1e7, alphas=alphas,  l1_ratio=l1ratio)\n\nelasticmod = elastic_cv.fit(x_train, y_train.ravel())\nela_pred=elasticmod.predict(x_test)\nprint('RMSE : test = '+ str(math.sqrt(sklm.mean_squared_error(y_test, ela_pred))))\nprint(elastic_cv.alpha_)","c9919381":"from sklearn.linear_model import ElasticNetCV\n\nalphas = [0.00055]\nl1ratio = [0.1, 0.3, 0.5, 0.9, 0.95, 0.99, 1]\n\nelastic_cv = ElasticNetCV(cv=5, max_iter=1e7, alphas=alphas,  l1_ratio=l1ratio)\n\nelasticmod = elastic_cv.fit(x_train, y_train.ravel())\nela_pred=elasticmod.predict(x_test)\nprint(f'RMSE : test = {score(ela_pred)}')\nprint(elastic_cv.alpha_)\nprint(elastic_cv.l1_ratio_)\n\n","85d1df5c":"def regularization(x,y,modelo=Ridge, scaler=RobustScaler):\n\n\n    #\u30c7\u30fc\u30bf\u3092train\/test\u306b\u5206\u5272\n    from sklearn.model_selection import train_test_split\n    x_train, x_test, y_train, y_test = train_test_split(x, y,test_size = .3, random_state=0)\n    \n    #\u30c7\u30fc\u30bf\u306e\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0 : RobustSclaer(default)\n    from sklearn.preprocessing import RobustScaler\n    from sklearn.preprocessing import MinMaxScaler\n    from sklearn.preprocessing import StandardScaler\n    \n    scaler= scaler()\n    # transform \"x_train\"\n    x_train = scaler.fit_transform(x_train)\n    # transform \"x_test\"\n    x_test = scaler.transform(x_test)\n    #Transform the test set\n    X_test= scaler.transform(Test)\n    \n    if modelo != ElasticNetCV:\n        if modelo == Ridge:\n            parameters= {'alpha':[x for x in range(1,101)]}\n        elif modelo == Lasso:\n            parameters= {'alpha':[0.0001,0.0009,0.001,0.002,0.003,0.01,0.1,1,10,100]}\n            \n        model=modelo()\n            \n        model=ms.GridSearchCV(model, param_grid=parameters, scoring='neg_mean_squared_error', cv=15)\n        model.fit(x_train,y_train)\n        y_pred= model.predict(x_test)\n\n        #print(\"The best value of Alpha is: \",model.best_params_)\n        print(\"best_score : %s, RMSE = %s\" %(model.best_params_,\n                  score(y_pred)))\n    elif modelo == ElasticNetCV:\n        alphas = [0.00055]\n        l1ratio = [0.1, 0.3, 0.5, 0.9, 0.95, 0.99, 1]\n\n        elastic_cv = ElasticNetCV(cv=5, max_iter=1e7, alphas=alphas,  l1_ratio=l1ratio)\n\n        elasticmod = elastic_cv.fit(x_train, y_train.ravel())\n        ela_pred=elasticmod.predict(x_test)\n        print(\"best_score : alpha %s and l1_ratio %s, RMSE = %s\"\n              %(elastic_cv.alpha_,elastic_cv.l1_ratio_, score(ela_pred)))\n        \n            \n\n  ","48974225":"regularization(x,y,Ridge)","e1120fc9":"regularization(x,y, Lasso)","1722e74d":"regularization(x,y, ElasticNetCV)","3dd453cc":"from xgboost.sklearn import XGBRegressor\n\n#xg_reg = XGBRegressor()\n#xgparam_grid= {'learning_rate' : [0.01],'n_estimators':[2000, 3460, 4000],\n#                                     'max_depth':[3], 'min_child_weight':[3,5],\n#                                     'colsample_bytree':[0.5,0.7],\n#                                     'reg_alpha':[0.0001,0.001,0.01,0.1,10,100],\n#                                    'reg_lambda':[1,0.01,0.8,0.001,0.0001]}\n\n#xg_grid=GridSearchCV(xg_reg, param_grid=xgparam_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\n#xg_grid.fit(x_train,y_train)\n#print(xg_grid.best_estimator_)\n#print(xg_grid.best_score_)","f4d8007a":"xgb= XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.5, gamma=0,\n             importance_type='gain', learning_rate=0.01, max_delta_step=0,\n             max_depth=3, min_child_weight=0, missing=None, n_estimators=4000,\n             n_jobs=1, nthread=None, objective='reg:squarederror', random_state=0,\n             reg_alpha=0.0001, reg_lambda=0.01, scale_pos_weight=1, seed=None,\n             silent=None, subsample=1, verbosity=1)\nxgmod=xgb.fit(x_train,y_train)\nxg_pred=xgmod.predict(x_test)\nprint(f'RMSE : test = {score(xg_pred)}')","435df58a":"from sklearn.ensemble import VotingRegressor\n\nvote_mod = VotingRegressor([('Ridge', ridge_mod), ('Lasso', lasso_mod), ('Elastic', elastic_cv), \n                            ('XGBRegressor', xgb)])\nvote= vote_mod.fit(x_train, y_train.ravel())\nvote_pred=vote.predict(x_test)\n\nprint(f'RMSE : test = {score(vote_pred)}')","4c6063c8":"from mlxtend.regressor import StackingRegressor\n\n\nstregr = StackingRegressor(regressors=[elastic_cv,ridge_mod, lasso_mod, vote_mod], \n                           meta_regressor=xgb, use_features_in_secondary=True\n                          )\n\nstack_mod=stregr.fit(x_train, y_train.ravel())\nstacking_pred=stack_mod.predict(x_test)\n\nprint(f'RMSE : test = {score(stacking_pred)}')","f91c2067":"#We coefficients were assigned manually\nfinal_test=(0.3*vote_pred + 0.5*stacking_pred + 0.2*y_lasso_test)\nprint(f'RMSE : test=  {score(final_test)}')\n","1261e99f":"#VotingRegressor\nvote_test = vote_mod.predict(X_test)\nfinal1=np.expm1(vote_test)\n\n#StackingRegressor\nstack_test = stregr.predict(X_test)\nfinal2=np.expm1(stack_test)\n\n#LassoRegressor\nlasso_test = lasso_mod.predict(X_test)\nfinal3=np.expm1(lasso_test)\n","38cffaca":"final=(0.2*final1 + 0.6*final2 + 0.2*final3)\n\nsubmission = pd.DataFrame({\n        \"Id\": b[\"Id\"],\n        \"SalePrice\": final\n    })\nsubmission.to_csv(\".\/submission.csv\", index=False)\nsubmission.head()","a9c4432b":"* \u3053\u3053\u3067\u4e00\u5ea6\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u7279\u5fb4\u91cf\u304b\u3089\u96e2\u308c\u3001\u6b20\u640d\u5024\u3092\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3059\u3002  ","9315ebd6":"* \u6700\u5f8c\u306b\u3084\u308b\u3079\u304d\u3053\u3068\u306f\u3001\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u5e73\u5747\u5316\u3057\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u9069\u5408\u3055\u305b\u308b\u3053\u3068\u3067\u3059\u3002","bf486f0a":">> ## Averaging Regressors","7349f2d2":"# 2 . \u30c7\u30fc\u30bf\u3092\u6574\u3048\u308b\n***\n   > ### 2.1 : 80%\u4ee5\u4e0a\u306e\u6b20\u640d\u5024\u3092\u6301\u3064\u7279\u5fb4\u91cf\n   \n\u6700\u521d\u306b\u3059\u3079\u304d\u3053\u3068\u306f\u3001\u6b20\u640d\u5024\u304c80%\u4ee5\u4e0a\u306e\u30ab\u30e9\u30e0\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u3067\u3059*(\u4e0b\u56f3)*\u3002\u4f8b\u3048\u3070PoolQC\u306e\u6b20\u640d\u5024\u306f\u3001\u5efa\u7269\u306b\u30d7\u30fc\u30eb\u304c\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u306f\u975e\u5e38\u306b\u6709\u76ca\u306a\u60c5\u5831\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u3089\uff0880%\u4ee5\u4e0a\uff09\u306e\u6b20\u640d\u5024\u3092\u300c\u30d7\u30fc\u30eb\u306a\u3057\u300d\u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u3001\u5206\u6563\u306e\u4f4e\u3044\u7279\u5fb4\u91cf\u304c\u6b8b\u308a\u3001\u5206\u6563\u306e\u4f4e\u3044\u7279\u5fb4\u91cf\u306f\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306b\u3068\u3063\u3066\u4e00\u69d8\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u300180%\u4ee5\u4e0a\u306e\u6b20\u640d\u5024\u3092\u6301\u3064\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3057\u307e\u3059\u3002","c585c780":"*\u8ffd\u4f38\uff1a\u5168\u3066\u306e\u5916\u308c\u5024\u3092\u524a\u9664\u3059\u308b\u4e8b\u306f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u5916\u308c\u5024\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u3088\u308a\u591a\u304f\u306e\u8abf\u67fb\u304c\u5fc5\u8981\u3060\u304b\u3089\u3067\u3059\u3002*","530d6d91":"\u304d\u308c\u3044\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3067\u304d\u307e\u3057\u305f\u3002  \n**\u7d9a\u3044\u3066\u3001\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002**","1582fae2":"\u5916\u308c\u5024\u3068\u306f\u3001\u9762\u7a4d\u3084\u4fa1\u5024\u306f\u5927\u304d\u3044\u304c\u8ca9\u58f2\u4fa1\u683c\u304c\u6975\u7aef\u306b\u4f4e\u3044\u30dd\u30a4\u30f3\u30c8\u306e\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b\u3053\u3068\u3067\u73fe\u308c\u307e\u3059\u3002\n\n* \u5730\u4e0b(Basement)\u30681\u968e(First floor)\u3068\u30ea\u30d3\u30f3\u30b0(Ground living)\u306e\u6700\u521d\u306e\u5916\u308c\u5024\u306f\u540c\u3058\u3067\u3059\u3002**(index\u756a\u53f71298\u306e\u5916\u308c\u5024)**\n\n> ### 5.2 \u5916\u308c\u5024\u306e\u5c40\u6240\u5316\n\n\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3055\u308c\u305f\u5916\u308c\u5024\u3092\u7279\u5fb4\u91cf\u6bce\u306b\u8868\u793a\u3057\u307e\u3059\u3002","5356b9ae":"\u4e0a\u3067\u306fXGBRegressor\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u884c\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u3092\u4e0b\u306e\u30e2\u30c7\u30eb\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3057\u305f\u3002","18273c03":"* \u6b21\u306b\u30e9\u30c3\u30bd\u56de\u5e30\u3092\u8a66\u3057\u307e\u3059\u3002\u30e9\u30c3\u30bd\u56de\u5e30\u306f\u30ea\u30c3\u30b8\u56de\u5e30\u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u30e9\u30c3\u30bd\u56de\u5e30\u306f\u30bc\u30ed\u304c\u591a\u304f\u3001\u975e\u30bc\u30ed\u304c\u5c11\u306a\u3044\u50be\u5411\u304c\u3042\u308a\u307e\u3059\u3002\u8a00\u3044\u63db\u3048\u308c\u3070\u3001\u30e9\u30c3\u30bd\u56de\u5e30\u306f\u6709\u76ca\u3067\u306a\u3044\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3057\u3001\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3060\u3051\u3092\u6b8b\u3057\u307e\u3059\u3002\n* \u30ea\u30c3\u30b8\u56de\u5e30\u3068\u540c\u69d8\u306b\u3001\u8aa4\u5dee\u3092\u7f70\u3059\u308b**alpha**\u5024\u3092\u898b\u3064\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","619cc22f":"\u4e0a\u306e\u8868\u306f\u3001\u6b20\u640d\u5024\u306e\u5c11\u306a\u3044\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u306a\u7279\u5fb4\u91cf\u3092\u898b\u3064\u3051\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\n* \u6b20\u640d\u5024\u306e\u5c11\u306a\u3044\u7279\u5fb4\u91cf\uff081\uff5e4\uff09\u304b\u3089\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n\n","1076da2b":"\u4e0b\u306e\u30b0\u30e9\u30d5\u306f\u5efa\u7269\u306e\u7a2e\u985e\u5225\u7269\u4ef6\u6570\u3067\u3059\u3002  \n* \u4e00\u6238\u5efa\u3066(1Fam)\n* \u4e8c\u4e16\u5e2f\u4f4f\u5b85\u306e\u6539\u7bc9\u3001\u5143\u3005\u306f\u4e00\u4e16\u5e2f\u4f4f\u5b85\u3068\u3057\u3066\u5efa\u3066\u3089\u308c\u305f\u3082\u306e(2FmCon)\n* \u4e8c\u4e16\u5e2f\u4f4f\u5b85(Duplx)\n* \u30a8\u30f3\u30c9\u30e6\u30cb\u30c3\u30c8\u30bf\u30a6\u30f3\u30cf\u30a6\u30b9(TwnhsE)\n* \u30a4\u30f3\u30b5\u30a4\u30c9\u30e6\u30cb\u30c3\u30c8\u30bf\u30a6\u30f3\u30cf\u30a6\u30b9(TwnhsI)  \n  \n\u203b\u30bf\u30a6\u30f3\u30cf\u30a6\u30b9\u3068\u306f\u30de\u30f3\u30b7\u30e7\u30f3\u3084\u30a2\u30d1\u30fc\u30c8\u306e\u3088\u3046\u306a\u96c6\u5408\u4f4f\u5b85\u306e\u4e00\u7a2e","29fb6aa1":"# 6 . \u6a5f\u68b0\u5b66\u7fd2\n***\n> ### 6.1  \u524d\u51e6\u7406\n\n\u7279\u5fb4\u91cf\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u8a2d\u5b9a\u3057\u3066\u6a5f\u68b0\u5b66\u7fd2\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n* Features : x\n* Target : y","e5a3643b":"## \u4eca\u56de\u53d6\u308a\u7d44\u3080\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\n***\n\u30b3\u30f3\u30da\u306e\u76ee\u7684\u306f\u3001\u30a2\u30a4\u30aa\u30ef\u5dde\u30a8\u30a4\u30e0\u30ba\u5e02\u306e\u4f4f\u5b85\u306e\u8ca9\u58f2\u4fa1\u683c\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002  \n\u4e88\u6e2c\u8aa4\u5dee\u3092\u6700\u5c0f\u306b\u3059\u308b\u70ba\u306b\u3001\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3068\u56de\u5e30\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u8df5\u3057\u307e\u3059\u3002","2a5b3277":"\u6b21\u306b\u3001ElasticNet\u3092\u8a66\u3057\u307e\u3059\u3002\n* ElasticNet\u3068\u306f\u3001ridge\u3068Lasso\u306e\u4e21\u65b9\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6298\u8877\u6848\u3067\u3059\u3002\n* \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u6298\u8877\u6848\u3092\u898b\u3064\u3051\u307e\u3059\u3002","4c935cab":"* Ridge, Lasso, ElasticNet\u306a\u3069\u306e\u56de\u5e30\u624b\u6cd5\u3092\u7528\u3044\u3066\u3001\u4e8c\u4e57\u8aa4\u5dee\u3092\u5c0f\u3055\u304f\u3057\u307e\u3059\u3002\n\n> ### \u8a55\u4fa1\u6307\u6a19\u306fRMSE\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","3c4036a7":"> ### 6.5 \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u624b\u6cd5\n>> ## VOTING REGRESSOR\n* VotingRegressor\u3068\u306f\u3001\u500b\u3005\u306e\u4e88\u6e2c\u5024\u3092\u5e73\u5747\u5316\u3057\u3066\u6700\u7d42\u7684\u306a\u4e88\u6e2c\u5024\u3092\u5f62\u6210\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002","f1384acd":"\u30c7\u30fc\u30bf\u3092\u3055\u3089\u306b\u6398\u308a\u4e0b\u3052\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u7279\u5fb4\u91cf\u306f\u975e\u5e38\u306b\u91cd\u8981\u306b\u306a\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u5730\u57df\u306e\u7279\u5fb4\u306a\u3069\u304c\u3068\u3066\u3082\u91cd\u8981\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002 \u4ea4\u901a\u9762\u3001\u751f\u6d3b\u306e\u5229\u4fbf\u6027\u3001\u5b89\u5168\u6027\u306a\u3069\u5730\u57df\u306b\u3088\u3063\u3066\u4f4f\u307f\u3084\u3059\u3055\u306e\u826f\u3057\u60aa\u3057\u304c\u3042\u308b\u70ba\u3001\u6700\u3082\u91cd\u8981\u306a\u3053\u3068\u3067\u3042\u308b\u3068\u3082\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n> \u4e0b\u306e\u30b0\u30e9\u30d5\u306f\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u306a\u7279\u5fb4\u91cf\u306e\u5730\u57df\u5225\u7269\u4ef6\u6570(Neighborhood)\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002","7341e65d":"# 5 . \u5916\u308c\u5024\u306e\u691c\u51fa\n***\n> ### 5.1 \u5916\u308c\u5024\u306e\u53ef\u8996\u5316\n\n\u3053\u306e\u90e8\u5206\u306f\u5c11\u3057\u9762\u5012\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u5143\u306etrain\u3068test\u306e\u5f62\u72b6\u3092\u7dad\u6301\u3059\u308b\u305f\u3081\u306b\u3001\u7d50\u5408\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5916\u308c\u5024\u3092\u51e6\u7406\u3057\u305f\u304f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u305d\u308c\u3089\u3092\u524a\u9664\u3059\u308b\u3068\u884c\u306e\u4f4d\u7f6e\u304c\u305a\u308c\u3066\u3057\u307e\u3046\u304b\u3089\u3067\u3059\u3002\n\n* \u5143\u306etrain(a)\u306b\u623b\u3063\u3066\u3001\u91cd\u8981\u306a\u7279\u5fb4\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\u3002","37dadd2c":">> ## Ridge regression\n* \u30ea\u30c3\u30b8\u56de\u5e30\u3067\u306f\u904e\u5b66\u7fd2\u3092\u6291\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n* train\u306e\u8aa4\u5dee\u3068test\u306e\u8aa4\u5dee\u3092\u6700\u5c0f\u306b\u3059\u308b**alpha**\u5024\u3092\u898b\u3064\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","be917c9d":">> \u7279\u5fb4\u91cf\u5225\u306e\u6b20\u640d\u5024\u6570","17963829":"\u6b21\u306bSalePrice\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044\u7279\u5fb4\u91cf\u30c8\u30c3\u30d710\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","9f013873":"## <h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">\u4eca\u56de\u306e\u5206\u6790\u30d7\u30e9\u30f3<\/h3>\n     \n> ### 1. \u30c7\u30fc\u30bf\u306e\u5168\u4f53\u50cf\u3092\u628a\u63e1\u3059\u308b\n\n> ### 2. \u30c7\u30fc\u30bf\u3092\u6574\u3048\u308b\n\n> ### 3. \u7279\u5fb4\u91cf\u306e\u4f5c\u6210\n\n> ### 4. \u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u306e\u5909\u63db\n\n> ### 5. \u5916\u308c\u5024\u306e\u691c\u51fa\n\n> ### 6. \u6a5f\u68b0\u5b66\u7fd2","36bcb6e6":">> ## ElasticNet","5dd05ed2":"XGBRegressor\u3082\u8a66\u3057\u3066\u307f\u307e\u3059\u3002","c4d076dc":"> ## \u5bfe\u6570\u5909\u63db\n\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u524d\u306b\u6700\u5f8c\u306b\u3059\u308b\u3053\u3068\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5206\u5e03\u3092\u5bfe\u6570(log)\u5909\u63db\u3092\u7528\u3044\u3066\u6b63\u898f\u5206\u5e03\u8fd1\u3065\u3051\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u6b6a\u3093\u3060\u5206\u5e03\u306b**np.log1p**\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u5bfe\u6570\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","7a8cf33f":"\u4e0a\u4f4d3\u3064\u306e\u30e2\u30c7\u30eb\u3092\u5e73\u5747\u5316\u3057\u307e\u3057\u305f\u3002Stacking\u30e2\u30c7\u30eb\u3001VotingRegressor\u30e2\u30c7\u30eb\u3001lasso\u30e2\u30c7\u30eb\u306e3\u3064\u306e\u30e2\u30c7\u30eb\u3092\u5e73\u5747\u5316\u3059\u308b\u3068\u3001\u6700\u9ad8\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002(**RMSE\u304c\u6700\u3082\u4f4e\u3044\u7d50\u679c**)\n* 3\u3064\u306e\u30e2\u30c7\u30eb\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u4fc2\u6570\u306f\u624b\u52d5\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u3002","48097efa":"# 4 . \u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u306e\u5909\u63db\n***\n> ### 4.1 \u6570\u5024\u7279\u5fb4\u91cf\n\n\u8ca9\u58f2\u6708(MoSold)\u306e\u3088\u3046\u306b\u3001\u30ab\u30c6\u30b4\u30e9\u30a4\u30ba\u3055\u308c\u3066\u3044\u308b\u6570\u5024\u5909\u6570\u304b\u3089\u59cb\u3081\u307e\u3059\u3002MoSold\u306e\u6570\u5b57\u306f\u6708\u306e\u9806\u756a\u3067\u3042\u308a\u3001\u6570\u5024\u3092\u8868\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001MoSold\u3092\u30ab\u30c6\u30b4\u30ea\u30fc\u5316\u3057\u307e\u3059\u3002  \n\u305d\u306e\u4ed6\u306b\u3001\u58f2\u5374\u306b\u95a2\u308f\u308b\u4f4f\u6238\u306e\u7a2e\u985e(MSSubClass)\u3001\u8ca9\u58f2\u5e74(YrSold)\u3082\u30ab\u30c6\u30b4\u30ea\u30fc\u5316\u3057\u307e\u3059\u3002","13bf3be8":">> ## Lasso regression","007091e7":"\u3068\u3044\u3046\u3053\u3068\u3067\u300119\u500b\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u7279\u5fb4\u91cf\u306810\u500b\u306e\u6570\u5024\u7279\u5fb4\u91cf\u3092\u52a0\u5de5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n* \u5148\u306b\u6570\u5024\u7279\u5fb4\u91cf\u304b\u3089\u52a0\u5de5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u6700\u521d\u306b\u3059\u3079\u304d\u3053\u3068\u306f\u305d\u308c\u3089\u306e\u7279\u5fb4\u91cf\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u3092\u898b\u3066\u3001\u30c7\u30fc\u30bf\u52a0\u5de5\u306e\u65b9\u6cd5\u3092\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n- \u4f8b\u3048\u3070\u3001GarageArea\u3001GarageCars\u306a\u3069\u306e\u6b20\u640d\u5024\u306f\u3001\u5358\u306b\u5bb6\u306b\u30ac\u30ec\u30fc\u30b8\u304c\u306a\u3044\u305f\u3081\u306b\u5b58\u5728\u3057\u306a\u3044\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u307b\u3068\u3093\u3069\u306e\u6a5f\u80fd\u306f0\u3067\u57cb\u3081\u3089\u308c\u307e\u3059\u3002\n- \u30ac\u30ec\u30fc\u30b8\u306e\u7bc9\u5e74\u6570(GarageYrBlt)\u306e\u6b20\u640d\u5024\u306f0\u3067\u57cb\u3081\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u306e\u3067\u3001\u4e2d\u592e\u5024\uff081980\u5e74\uff09\u3067\u57cb\u3081\u307e\u3059\u3002\n\n> ### 2.2 \u6570\u5024\u7279\u5fb4\u91cf","637a7665":"\u5168\u3066\u306e\u6b20\u640d\u5024\u3092\u7d50\u5408\u30c7\u30fc\u30bf\u306e\u304b\u3089\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u3069\u306e\u3088\u3046\u306b\u6271\u3046\u304b\u8003\u3048\u307e\u3059\u3002","fbbcbd0e":"* \u6b21\u306b\u3001\u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u305f\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n* \u7121\u7528\u306a\u7279\u5fb4\u91cf\u306b\u306f\u4fc2\u65700\u3092\u4e0e\u3048\u3001\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u306b\u306f\u4fc2\u6570\u3092\u4f7f\u3063\u3066\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","f27e41dd":"\u5916\u308c\u5024\u306b\u5bfe\u3057\u3066\u5f37\u529b\u306a\u306e\u3067\u3001\u30c7\u30fc\u30bf\u306e\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u306bRobustScaler\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","fbf96d5b":"> ### 6.3 \u6b63\u5247\u5316","6dcfd810":"* \u591a\u304f\u306e\u7279\u5fb4\u91cf\u305d\u3057\u3066\u591a\u304f\u306e\u6b20\u640d\u5024\u304c\u3042\u308a\u307e\u3059\u3002  \n* \"SalePrice\"\u306f\u3001\u4eca\u56de\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u4f4f\u5b85\u306e\u4fa1\u683c\u3067\u3059\u3002","dcf56a97":"> ### 4.2 One hot encoding","68f4dc96":"\u307e\u305a\u306f\u3001\u6570\u5024\u7279\u5fb4\u91cf\u3068SalePrice\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4e0b\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u898b\u308b\u3068\u3001\u6fc3\u3044\u8272\u304c\u591a\u304f\u3001SalePrice\u3068\u306e\u76f8\u95a2\u6027\u304c\u9ad8\u3044\u7279\u5fb4\u91cf\u304c\u591a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002","857770af":"# 1 . \u30c7\u30fc\u30bf\u306e\u5168\u4f53\u50cf\u3092\u628a\u63e1\u3059\u308b\n***\n\u59cb\u3081\u308b\u524d\u306b\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u540d\u524d\u3092\u4ed8\u3051\u3066\u304a\u304d\u307e\u3059\u3002\n        \n         a = train\n         b = test\n         c = combination (train + test)\n\ntrain\u3068test\u3092\u8aad\u307f\u8fbc\u3093\u3067\u958b\u3044\u3066\u3044\u304d\u307e\u3059\u3002","534f9b6b":"\u3053\u3053\u3067\u3001\u30c7\u30fc\u30bf\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3046\u524d\u306b\u6b20\u640d\u5024\u304b\u3089\u57cb\u3081\u3066\u3044\u304d\u307e\u3059\u3002  \n\u6b20\u640d\u5024\u304c1\u30012\u500b\u3057\u304b\u306a\u3044\u7279\u5fb4\u91cf\u304b\u3089\u5148\u306b\u57cb\u3081\u3066\u3044\u304d\u307e\u3059\u3002","e6d5b41c":"# 3 . \u7279\u5fb4\u91cf\u306e\u4f5c\u6210\n***\n\u5bb6\u306e\u5e83\u3055\u306f\u975e\u5e38\u306b\u91cd\u8981\u306a\u5909\u6570\u306a\u306e\u3067\u3001\u3059\u3079\u3066\u306e\u968e\u3068\u5730\u4e0b\u5ba4\u306e\u9762\u7a4d\u3092\u5408\u8a08\u3059\u308b\u300c**TotalArea**\u300d\u3068\u3044\u3046\u7279\u5fb4\u91cf\u3092\u65b0\u305f\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002 \n  \n> \u305d\u306e\u4ed6\u306b\u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\n* *Bathrooms* \u3059\u3079\u3066\u306e\u30d0\u30b9\u30eb\u30fc\u30e0\n* *Year average* \u4f4f\u5b85\u304c\u5efa\u8a2d\u3055\u308c\u305f\u5e74\u3068\u30ea\u30d5\u30a9\u30fc\u30e0\u3055\u308c\u305f\u5e74\u306e\u5408\u8a08\u306e\u5e73\u5747\n\n","f6724b89":">> ## Stacking","ad643d86":"\u3053\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304b\u3089\u3001\u5168\u4f53\u7684\u306a\u54c1\u8cea(OverallQual), \u30ea\u30d3\u30f3\u30b0\u306e\u5e83\u3055(GrLivArea), \u5730\u4e0b\u5ba4\u306e\u5e83\u3055(TotalBsmtSF), \u8eca\u5eab\u306e\u5e83\u3055\u3068\u53ce\u5bb9\u53ef\u80fd\u53f0\u6570(GarageArea, GarageCars)\u306f\u3001\u8ca9\u58f2\u4fa1\u683c\u3068\u6700\u3082\u9ad8\u3044\u76f8\u95a2\u5024\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u300c\u5bb6\u306e\u54c1\u8cea + \u5bb6\u306e\u9762\u7a4d = \u5bb6\u306e\u4fa1\u683c\u300d\u3060\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002  \n  \n* \u30d0\u30b9\u30bf\u30d6\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b(FullBath)\u30011\u968e\u306e\u9762\u7a4d\u304c\u5e83\u3044(1stFlrSF)\u306a\u3069\u306e\u7279\u5fb4\u306f\u3001\u9ad8\u7d1a\u611f\u304c\u3042\u308b\u307b\u3069\u4fa1\u683c\u304c\u9ad8\u304f\u306a\u308b\u3068\u3044\u3046\u76f8\u95a2\u95a2\u4fc2\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002  \n   \n* \u7bc9\u5e74\u6570(YearBuilt)\u304c\u65b0\u3057\u3044\u307b\u3069\u8ca9\u58f2\u4fa1\u683c\u304c\u9ad8\u3044\u3068\u3044\u3046\u76f8\u95a2\u95a2\u4fc2\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\n\n> * \u4e0b\u306e\u30b0\u30e9\u30d5\u306f2\u3064\u306e\u7279\u5fb4\u91cf\u306e\u9593\u306b\u5f37\u3044\u76f8\u95a2\u95a2\u4fc2\u304c\u3042\u308b\u5834\u5408\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002(*SalePrice\u3068GrLivArea*)","04e2aa96":"\u3053\u308c\u3067\u3001\u30c7\u30fc\u30bf\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u3068\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306e\u4f5c\u696d\u306f\u7d42\u4e86\u3067\u3059\u3002\u3053\u3053\u3067\u7d50\u5408\u30c7\u30fc\u30bf\u3092train\u3068test\u306b\u5206\u5272\u3057\u307e\u3059\u3002","c770d37b":"\u4e00\u756a\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u306f\u3001\u4eca\u56de\u4f5c\u3063\u305f\u300c**TotalArea**\u300d\u3067\u3059\u3002\n* \u4ed6\u306b\u3082\u3001\u5168\u4f53\u7684\u306a\u54c1\u8cea\u3084\u5730\u57df\u6027\u306a\u3069\u304c\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002","023be201":"\u5bfe\u6570\u5909\u63db\u5f8c\u306e\u6b6a\u5ea6\u3068\u5c16\u5ea6\u306e\u5024\u306f\u554f\u984c\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3053\u308c\u3067\u6a5f\u68b0\u5b66\u7fd2\u306b\u9032\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n*\u8ffd\u4f38\uff1a\u5143\u306eSalePrice\u306e\u5024\u3092\u53d6\u308a\u623b\u3059\u305f\u3081\u306b\u3001\u6700\u5f8c\u306bnp.expm1\u3092\u9069\u7528\u3057\u3066\u3001log1p\u5909\u63db\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u307e\u3059\u3002","7a493260":"> ### 6.6 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u30e2\u30c7\u30eb\u3092\u9069\u5408\u3055\u305b\u308b\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u30e2\u30c7\u30eb\u3092\u5f53\u3066\u306f\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n* \u4ee5\u524d\u3001\u30c7\u30fc\u30bf\u51e6\u7406\u3067\u884c\u3063\u305f **\u5bfe\u6570\u5909\u63db** \u3092\u30ad\u30e3\u30f3\u30bb\u30eb(np.expm1)\u3057\u3066\u3001\u6570\u5024\u3092\u5143\u306e\u5f62\u306b\u5909\u63db\u3057\u307e\u3059\u3002","7aa41a73":"\u5916\u308c\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4f4d\u7f6e\u3092\u53ce\u96c6\u3057\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u30c9\u30ed\u30c3\u30d7\u3057\u307e\u3059\u3002","26c41e08":"**3\u3064\u306e\u30e2\u30c7\u30eb\u3092\u5408\u308f\u305b\u3066\u5e73\u5747\u5316\u3057\u305f\u6700\u7d42\u7684\u306a\u30e2\u30c7\u30eb**\u3002","9d906c89":"> ### 2.3 \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u7279\u5fb4\u91cf\n\u6b20\u640d\u5024\u3092\u6301\u3064\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u7279\u5fb4\u91cf\u304c18\u500b\u3042\u308a\u307e\u3059\u3002\n* \u3044\u304f\u3064\u304b\u306e\u7279\u5fb4\u91cf\u306e\u4e2d\u306b\u30011\u30642\u3064\u306e\u6b20\u640d\u5024\u304c\u3042\u308b\u3082\u306e\u304c\u3042\u308a\u3001\u305d\u308c\u3089\u306f\u660e\u3089\u304b\u306b 'None' \u3067\u57cb\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u5024\u306a\u306e\u3067\u3001\u6b20\u640d\u5024\u306e\u76f4\u524d\u306e\u5024\u3092\u4f7f\u3063\u3066\u7a74\u57cb\u3081\u3057\u307e\u3059\u3002\n* \u6b20\u640d\u5024\u306e\u591a\u3044\u7279\u5fb4\u91cf\u306f\u3001\u5730\u4e0b\u5ba4\u3084\u30ac\u30ec\u30fc\u30b8\u306b\u95a2\u9023\u3057\u305f\u3082\u306e\u304c\u591a\u3044\u306e\u3067\u3001\u6570\u5024\u7279\u5fb4\u91cf\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u306e\u6b20\u640d\u5024\u3092 'None' \u3067\u57cb\u3081\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002","ed6aa7ac":"\u57fa\u672c\u7684\u306a\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u304b\u3089\u59cb\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n* \u3088\u308a\u826f\u3044\u8aa4\u5dee\u63a8\u5b9a\u5024\u3092\u5f97\u308b\u305f\u3081\u306b\u30015\u3064\u306b\u5206\u3051\u3066\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3059\u3002\n \n> ### 6.2 \u7dda\u5f62\u56de\u5e30\n","736c65ff":"alpha\u3092\u4e38\u3081\u308b\u30ca\u30f3\u30d0\u30ea\u30f3\u30b0\u3092\u8a66\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u30010.00055\u304c\u826f\u3044\u30b9\u30b3\u30a2\u3092\u51fa\u3059\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002","b25851df":"* 4\u3064\u306e\u7279\u5fb4\u91cf\u304c80%\u4ee5\u4e0a\u6b20\u640d\u5024\u3092\u6301\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n* train\u3068test\u306e\u7d50\u5408\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u3001\u30c7\u30fc\u30bf\u6574\u5f62\u3068\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002","fc93945d":"<h1>\u56de\u5e30\u5206\u6790\u306e\u307e\u3068\u3081<\/h1>\n\u56de\u5e30\u5206\u6790\u3067\u306f\u3001Ridge(L2)\u3001Lasso(L1)\u3001L2\u3068L1\u306e\u6298\u8877\u6848\u3067\u3042\u308bElasticNet\u306e3\u3064\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002  \u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u79fb\u308b\u524d\u306b\u3001\u4e0a\u8a18\u306e\u4f5c\u696d\u3092\u7c21\u5358\u306b\u884c\u3046\u95a2\u6570\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n<br>\n<br>\n<br>\n<br>\n1. \u30c7\u30fc\u30bf\u3092train\/test\u306b\u5206\u5272<br>\n2. \u30c7\u30fc\u30bf\u306e\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0<br>\n3. \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u305f\u3081\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1<br>\n4. \u76ee\u6a19\u3092\u4e88\u6e2c\u3059\u308b<br>\n5. \u4e88\u6e2c\u3092\u8a55\u4fa1\u3059\u308b<br>\n<br>\n<br>\n<br>\n\u5165\u529b\u5024:<br>\n- x : \u7279\u5fb4\u91cf<br>\n- y : \u30bf\u30fc\u30b2\u30c3\u30c8<br>\n- \u30e2\u30c7\u30eb : Ridge(default), Lasso, ElasticNetCV<br>\n- \u30b9\u30b1\u30fc\u30ea\u30f3\u30b0 : RobustScaler(default), MinMaxScaler, StandardScaler<br>","04d653b2":"SalePrice\u3067\u3082\u5916\u308c\u5024\u304c\u6b63\u3057\u3044\u5916\u308c\u5024\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3001\u524a\u9664\u3057\u307e\u3059\u3002\n* \u3069\u3061\u3089\u3082\u691c\u51fa\u3055\u308c\u305f\u5916\u308c\u5024\u3068\u540c\u3058\u4fa1\u683c\u5e2f\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u5b89\u5168\u306b\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","a88f09ab":"\u53d6\u308a\u51fa\u3057\u305f\u6b20\u640d\u5024\u30ea\u30b9\u30c8\u30922\u7a2e\u306b\u5206\u985e\u3057\u307e\u3059\u3002\n* \u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\n* \u6570\u5024\u5909\u6570","a393836f":"> ### 6.4 XGB REGRESSOR","a33d5181":"* \u6b20\u640d\u5024\u306e\u5c11\u306a\u3044\u7279\u5fb4\u91cf\u3084\u3001\u30ac\u30ec\u30fc\u30b8\u306e\u7bc9\u5e74\u6570\u306e\u3088\u3046\u306b \"0 \"\u3067\u306f\u57cb\u3081\u3089\u308c\u306a\u3044\u5024\u306f\u3059\u3067\u306b\u5bfe\u51e6\u3057\u3066\u3044\u307e\u3059\u3002\n* \u6b8b\u308a\u306e\u307b\u3068\u3093\u3069\u304c\u5730\u4e0b\u5ba4\u3068\u30ac\u30ec\u30fc\u30b8\u306b\u95a2\u9023\u3057\u305f\u3082\u306e\u3067\u3001100\u500b\u4ee5\u4e0a\u306e\u6b20\u640d\u5024\u304c\u3042\u308b\u305f\u3081\u3001\u6570\u5024\u5909\u6570\u306f0\u3001\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306fNone\u3067\u57cb\u3081\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n* \u6696\u7089\u306e\u54c1\u8cea(FireplaceQu)\u3082\u6b20\u640d\u5024\u306f\u5efa\u7269\u306b\u6696\u7089\u304c\u306a\u3044\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u306e\u3067None\u3067\u57cb\u3081\u307e\u3059\u3002","5430ba26":"XGBoost\u3092\u30e1\u30bf\u30ea\u30b0\u30ec\u30c3\u30b5\u30fc\u3068\u3057\u3066\u524d\u56de\u306e\u30e2\u30c7\u30eb\u3092\u3059\u3079\u3066\u30b9\u30bf\u30c3\u30af\u3057\u307e\u3059\u3002"}}