{"cell_type":{"d624a935":"code","07b76b0f":"code","53820d9b":"code","0ba866e1":"code","1c5a96d1":"code","7f00b04a":"code","4a49c99e":"code","2fddd80e":"code","06976590":"code","be2e395a":"code","3db83d6d":"code","55c353e4":"code","0f271974":"code","d27eb05e":"code","ff5333a0":"code","bafe62c3":"code","194de2ae":"code","ea7e73d2":"code","d796e3a7":"code","79b8fa5a":"code","1ba17e54":"code","b4f47939":"code","0c3a03cf":"code","c7a6fa7a":"code","5a09d379":"code","9327cc38":"code","70b74e91":"code","588f3e4f":"code","b524c544":"code","331b052a":"code","b4a9ac2c":"code","18eb758b":"code","2e3f7776":"code","65151efc":"code","f7589054":"code","5eea717f":"code","2cb909a2":"code","3937aa84":"code","94462203":"code","f02b016c":"code","cea85f29":"code","3807de04":"code","cd882103":"code","98945987":"code","96ec1a17":"code","ed37f68b":"code","5c03cd22":"code","72905039":"code","8d37b671":"code","ab04112d":"code","4d33678b":"code","b445401c":"code","e94d8884":"code","7675fa2f":"code","a7b3305d":"code","92cb8663":"code","09245b21":"code","367c36e6":"code","e5bfd8b5":"markdown","c6cb401e":"markdown","508b145c":"markdown","c75016a7":"markdown","5b2c3938":"markdown","7acea286":"markdown","c5989da0":"markdown","93bd64a9":"markdown","bf17c96f":"markdown","e4af553a":"markdown","6e61d0ae":"markdown","e6f93a07":"markdown","10609268":"markdown","4512fdfc":"markdown","a98f4bcb":"markdown"},"source":{"d624a935":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07b76b0f":"import matplotlib.pyplot as plt","53820d9b":"# some array\na = np.array([0,1,2,3,4])\nb = np.array([5,6,7,8,9])","0ba866e1":"# get the dtype of array element\na.dtype","1c5a96d1":"# get dimensiion of an array\na.ndim","7f00b04a":"# Get the shape of array element\nb.shape","4a49c99e":"# Memory size in bytes of each element in array\na.itemsize","2fddd80e":"# Get buffer location of element in array\nb.data","06976590":"# Access 3rd element in array\nb[2] ","be2e395a":"# Take 1st 4 elements in array. \nb[:4]","3db83d6d":"# Take 1st 4 elements but start at 3rd element\nb[2:4]","55c353e4":"# Take all elements starting from 3rd element\nb[2:]","0f271974":"# Calculate the first 12 square numbers \na = np.arange(12)**2\n\n# an array of indices\ni = np.array([1,1,3,8, 5]) \n\n# results of the eleemnts of 'a' at the positions 'i'\na[i]","d27eb05e":"# a bi-dimensional array of indices \nj = np.array([[3,4],[9,7]])\n\n# the same shape as 'j'\na[j]","ff5333a0":"# Alter the dimension or shape of an array. 'a' is array of natural numbers 0~11\na = np.arange(12).reshape(3,4)\na","bafe62c3":"# Define first dim indices for array 'a'\ni = np.array([[0,1], \n            [1,2]])\n# indices for the second dim for array 'a'\nj = np.array([[2,1],\n             [3,3]])","194de2ae":"# Composing the array using declared index positions\na[i,j]","ea7e73d2":"# We can pass a tuple index to get 'a'\na[(i,j)]","d796e3a7":"# i and j must have equal shape\na[i,2]","79b8fa5a":"# Composing in a new form using all a's but only j index\na[:, j]","1ba17e54":"# Declare some random int array\nbb = np.random.randint(0, 10, size=8)\n\n# Sort the array. default is ascending\nbs = np. sort(bb)","b4f47939":"cs = bb*bs\ncs","0c3a03cf":"# ADD a fix number to all elements\ncs + 3","c7a6fa7a":"# SUBTRACT array elements. Here 'a' defines the length of the result\na[2] - b[4]","5a09d379":"# ADD array elements\na[1]+b[3]","9327cc38":"# MULTIPLY array elements. Here 'a' defines the length of the result\nu = a[2]*b[4]\nu","70b74e91":"# SQUARE each element of third row of 'a'\na[2]**2\n","588f3e4f":"# INPLACE ADDITION. Leave a comment if you figure 'why?'\na[2] +=3\na","b524c544":"# Generate a random array of size ??\nc = np.random.randint(0, 10, size=[3,5])\nc","331b052a":"# Get the number at index (1,3)\nc[1,3]","b4a9ac2c":"# Slice all rows. Get elements in first columns\nc[:,0]","18eb758b":"# Get second row. Slice from 3rd to 5th column elements\nc[1,2:4]","2e3f7776":"# REVERSE array indexing. Can be used for MIRRORING or swapping.\nc[0,:][::-1]","65151efc":"# ITERATION operation on arrays using 'flat' method. Adds '2' to each element of array 'b'\nfor element in b.flat:\n    print (element+2)","f7589054":"# array b\nb","5eea717f":"#Generate an array of ZEROs\nnp.zeros(3, dtype=int)","2cb909a2":"# Generate an array of ONEs\nnp.ones(5, dtype=int)","3937aa84":"# Generate unpredicatable array contents)\nnp.empty(5, dtype=int)","94462203":"# Generate random numbers within a range\nnp.random.randint(0, 4, size=[3,5])","f02b016c":"# Generate array within a range in definite steps\nnp.arange(2, 10, 1.5)","cea85f29":"# Generate array within a range in steps with more options using linspace\nnp.linspace(4, 20, 6, retstep= False, endpoint=False, dtype=int)","3807de04":"# Generate random matrix\nd = np.random.randint(0, 10, size=[3,3])\ne = np.random.randint(0, 10, size=[3,3])","cd882103":"d, e","98945987":"# MULTIPLICATION of matrices\nf = d @ e\nf","96ec1a17":"# Direct Multiplication of matrix by position\ng = d*e\ng","ed37f68b":"# RESHAPING - flatten result and get an indexed element . Here get the 4th element\ng.reshape(9)[3]","5c03cd22":"# SUMMATION of ROW elements\ng.sum(axis=1)","72905039":"# SUMMATION of Column elements. Alternative axis = 'column'\ng.sum(axis=0)","8d37b671":"# find minimum in each column. Similarly find max.\nh = g.min(axis=0)\nh","ab04112d":"# Generate a cummulative sum array for row or column\nd.cumsum(axis=1)","4d33678b":"# Returning index and value position of a matrix element in an iteration\nfor index, x in np.ndenumerate(d):\n    print(index, x)","b445401c":"# VERTICAL STACK\n# Stact 1st 2 rows of each matrix. Columns must match\nnp.vstack((d[0:2],e[0:2]))","e94d8884":"# HORIZONTAL STACK\n# Stack 1st 2 rows of each matrix horizontally. Rows must match\nnp.hstack((d[0:2],e[0:2]))","7675fa2f":"# VECTOR OPERATIONS\n# Operations on columns and axis\nfrom numpy import newaxis","a7b3305d":"# VECTORIZE  array col or rows\nnewaxis = 0\ndv = d[:, newaxis]\nev = e[:, newaxis]","92cb8663":"# STACK 2 VECTORS\nfv = np.column_stack((dv,ev))\nfv","09245b21":"# Copy only needed range to curtail storage and conversion during transformation. Use with caution!\ncc = fv[:2].copy()\ndel fv","367c36e6":"# Result after transformation\ncc\n# Original was deleted. Uncomment to verify deletion of fv\n# fv","e5bfd8b5":"<h2> Start<\/h2>","c6cb401e":"<h4> Basic Linear Algebra<\/h4>\ncross, dot, outer, linalg.svd, vdot","508b145c":"<h4> Generate array within a range and rearrange in rows vs columns","c75016a7":"<h4> Indexing<\/h4>","5b2c3938":"<h4> Array Creation<\/h4>\n'arange','array',copy, empty, empty_like, eye, fromfile, fromfunction, identity, linspace,logspace, mgrid, ogrid, ones, ones_like, r_, zeros, zeros_like","7acea286":"<h4> Sorting array<\/h4>","c5989da0":"<h3> MATRIX OPERATIONS","93bd64a9":"<h4> Questions<\/h4>\nall, any, nonzero, where","bf17c96f":"<h4> Conversions<\/h4>\nndarray.astype, atleast_1d, atleast_2d, atleast_3d.mat","e4af553a":"<h4> Generate Zeros, Ones and random numbers ","6e61d0ae":"<h4> Operations<\/h4>\nchoose, compress, cumprod, cumsum, inner, ndarray.fill, imag, prod, put, putmask, real, sum","e6f93a07":"<h3> Stacking arrays<\/h3>","10609268":"<h4> Basic Statistics<\/h4>\ncov, mean, std, var","4512fdfc":"<h4> Manipulations<\/h4>\narray_split, column_stack, concatenate, diagonal, dsplit, dstack, hsplit, hstack,ndarray.item, newaxis, ravel, repeat, reshape, resize, squeeze, swapaxes,take, transpose, vsplit, vstack","a98f4bcb":"### Common Functions and Methods Overview"}}