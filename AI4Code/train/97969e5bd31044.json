{"cell_type":{"277e7e1f":"code","8bf21ad0":"code","e7a18cd9":"code","0eeed1b4":"code","a4d0eddc":"code","5564cf19":"code","f4bc1b74":"code","497738ae":"code","9a2d10f7":"code","97340f44":"code","9c465dca":"code","4fd0b9c0":"code","94e585f1":"code","34df1f90":"code","c477963e":"code","7d75b9ff":"code","b618a4a4":"code","d366ac13":"code","738aff04":"markdown","d352a46e":"markdown","aa4118f6":"markdown","74be4c23":"markdown","479d9c01":"markdown","f4155151":"markdown","d599c0f7":"markdown"},"source":{"277e7e1f":"import gc\nimport psutil\nimport joblib\nimport random\nfrom tqdm import tqdm\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.metrics import roc_auc_score\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader","8bf21ad0":"TRAIN_SAMPLES = 320000\nMAX_SEQ = 100\nMIN_SAMPLES = 5\nEMBED_DIM = 256\nDROPOUT_RATE = 0.2\nLEARNING_RATE = 1e-3\nMAX_LEARNING_RATE = 2e-3\nEPOCHS = 30\nTRAIN_BATCH_SIZE = 2048","e7a18cd9":"%%time\n\ndtypes = {'timestamp': 'int64', 'user_id': 'int32' ,'content_id': 'int16','content_type_id': 'int8','answered_correctly':'int8'}\ntrain_df = pd.read_feather('..\/input\/riiid-feather-files\/train.feather')[[\n    'timestamp', 'user_id', 'content_id', 'content_type_id', 'answered_correctly'\n]]\nfor col, dtype in dtypes.items():\n    train_df[col] = train_df[col].astype(dtype)\ntrain_df = train_df[train_df.content_type_id == False]\ntrain_df = train_df.sort_values(['timestamp'], ascending=True)\ntrain_df.reset_index(drop=True, inplace=True)","0eeed1b4":"skills = train_df[\"content_id\"].unique()\njoblib.dump(skills, \"skills.pkl.zip\")\nn_skill = len(skills)\nprint(\"number skills\", len(skills))","a4d0eddc":"group = train_df[['user_id', 'content_id', 'answered_correctly']].groupby('user_id').apply(lambda r: (\n            r['content_id'].values,\n            r['answered_correctly'].values))\n\njoblib.dump(group, \"group.pkl.zip\")\ndel train_df\ngc.collect()","5564cf19":"train_indexes = list(group.index)[:TRAIN_SAMPLES]\nvalid_indexes = list(group.index)[TRAIN_SAMPLES:]\ntrain_group = group[group.index.isin(train_indexes)]\nvalid_group = group[group.index.isin(valid_indexes)]\ndel group, train_indexes, valid_indexes\nprint(len(train_group), len(valid_group))","f4bc1b74":"class SAKTDataset(Dataset):\n    def __init__(self, group, n_skill, max_seq=MAX_SEQ):\n        super(SAKTDataset, self).__init__()\n        self.max_seq = max_seq\n        self.n_skill = n_skill\n        self.samples = {}\n        \n        self.user_ids = []\n        for user_id in group.index:\n            q, qa = group[user_id]\n            if len(q) < MIN_SAMPLES:\n                continue\n            \n            # Main Contribution\n            if len(q) > self.max_seq:\n                total_questions = len(q)\n                initial = total_questions % self.max_seq\n                if initial >= MIN_SAMPLES:\n                    self.user_ids.append(f\"{user_id}_0\")\n                    self.samples[f\"{user_id}_0\"] = (q[:initial], qa[:initial])\n                for seq in range(total_questions \/\/ self.max_seq):\n                    self.user_ids.append(f\"{user_id}_{seq+1}\")\n                    start = initial + seq * self.max_seq\n                    end = start + self.max_seq\n                    self.samples[f\"{user_id}_{seq+1}\"] = (q[start:end], qa[start:end])\n            else:\n                user_id = str(user_id)\n                self.user_ids.append(user_id)\n                self.samples[user_id] = (q, qa)\n    \n    def __len__(self):\n        return len(self.user_ids)\n\n    def __getitem__(self, index):\n        user_id = self.user_ids[index]\n        q_, qa_ = self.samples[user_id]\n        seq_len = len(q_)\n\n        q = np.zeros(self.max_seq, dtype=int)\n        qa = np.zeros(self.max_seq, dtype=int)\n        if seq_len == self.max_seq:\n            q[:] = q_\n            qa[:] = qa_\n        else:\n            q[-seq_len:] = q_\n            qa[-seq_len:] = qa_\n        \n        target_id = q[1:]\n        label = qa[1:]\n\n        x = np.zeros(self.max_seq-1, dtype=int)\n        x = q[:-1].copy()\n        x += (qa[:-1] == 1) * self.n_skill\n\n        return x, target_id, label","497738ae":"train_dataset = SAKTDataset(train_group, n_skill)\ntrain_dataloader = DataLoader(train_dataset, batch_size=TRAIN_BATCH_SIZE, shuffle=True, num_workers=8)\nvalid_dataset = SAKTDataset(valid_group, n_skill)\nvalid_dataloader = DataLoader(valid_dataset, batch_size=TRAIN_BATCH_SIZE, shuffle=False, num_workers=8)","9a2d10f7":"class FFN(nn.Module):\n    def __init__(self, state_size=200):\n        super(FFN, self).__init__()\n        self.state_size = state_size\n\n        self.lr1 = nn.Linear(state_size, state_size)\n        self.relu = nn.ReLU()\n        self.lr2 = nn.Linear(state_size, state_size)\n        self.dropout = nn.Dropout(0.2)\n    \n    def forward(self, x):\n        x = self.lr1(x)\n        x = self.relu(x)\n        x = self.lr2(x)\n        return self.dropout(x)\n\ndef future_mask(seq_length):\n    future_mask = np.triu(np.ones((seq_length, seq_length)), k=1).astype('bool')\n    return torch.from_numpy(future_mask)\n\n\nclass SAKTModel(nn.Module):\n    def __init__(self, n_skill, max_seq=128, embed_dim=128, dropout_rate=0.2):\n        super(SAKTModel, self).__init__()\n        self.n_skill = n_skill\n        self.embed_dim = embed_dim\n\n        self.embedding = nn.Embedding(2*n_skill+1, embed_dim)\n        self.pos_embedding = nn.Embedding(max_seq-1, embed_dim)\n        self.e_embedding = nn.Embedding(n_skill+1, embed_dim)\n\n        self.multi_att = nn.MultiheadAttention(embed_dim=embed_dim, num_heads=8, dropout=dropout_rate)\n\n        self.dropout = nn.Dropout(dropout_rate)\n        self.layer_normal = nn.LayerNorm(embed_dim) \n\n        self.ffn = FFN(embed_dim)\n        self.pred = nn.Linear(embed_dim, 1)\n    \n    def forward(self, x, question_ids):\n        device = x.device        \n        x = self.embedding(x)\n        pos_id = torch.arange(x.size(1)).unsqueeze(0).to(device)\n\n        pos_x = self.pos_embedding(pos_id)\n        x = x + pos_x\n\n        e = self.e_embedding(question_ids)\n\n        x = x.permute(1, 0, 2) # x: [bs, s_len, embed] => [s_len, bs, embed]\n        e = e.permute(1, 0, 2)\n        att_mask = future_mask(x.size(0)).to(device)\n        att_output, att_weight = self.multi_att(e, x, x, attn_mask=att_mask)\n        att_output = self.layer_normal(att_output + e)\n        att_output = att_output.permute(1, 0, 2) # att_output: [s_len, bs, embed] => [bs, s_len, embed]\n\n        x = self.ffn(att_output)\n        x = self.layer_normal(x + att_output)\n        x = self.pred(x)\n\n        return x.squeeze(-1), att_weight","97340f44":"def train_fn(model, dataloader, optimizer, scheduler, criterion, device=\"cpu\"):\n    model.train()\n\n    train_loss = []\n    num_corrects = 0\n    num_total = 0\n    labels = []\n    outs = []\n\n    for item in dataloader:\n        x = item[0].to(device).long()\n        target_id = item[1].to(device).long()\n        label = item[2].to(device).float()\n        target_mask = (target_id != 0)\n\n        optimizer.zero_grad()\n        output, _, = model(x, target_id)\n        loss = criterion(output, label)\n        loss.backward()\n        optimizer.step()\n        scheduler.step()\n        train_loss.append(loss.item())\n\n        output = torch.masked_select(output, target_mask)\n        label = torch.masked_select(label, target_mask)\n        pred = (torch.sigmoid(output) >= 0.5).long()\n        \n        num_corrects += (pred == label).sum().item()\n        num_total += len(label)\n\n        labels.extend(label.view(-1).data.cpu().numpy())\n        outs.extend(output.view(-1).data.cpu().numpy())\n\n    acc = num_corrects \/ num_total\n    auc = roc_auc_score(labels, outs)\n    loss = np.mean(train_loss)\n\n    return loss, acc, auc","9c465dca":"def valid_fn(model, dataloader, criterion, device=\"cpu\"):\n    model.eval()\n\n    valid_loss = []\n    num_corrects = 0\n    num_total = 0\n    labels = []\n    outs = []\n\n    for item in dataloader:\n        x = item[0].to(device).long()\n        target_id = item[1].to(device).long()\n        label = item[2].to(device).float()\n        target_mask = (target_id != 0)\n\n        output, _, = model(x, target_id)\n        loss = criterion(output, label)\n        valid_loss.append(loss.item())\n\n        output = torch.masked_select(output, target_mask)\n        label = torch.masked_select(label, target_mask)\n        pred = (torch.sigmoid(output) >= 0.5).long()\n        \n        num_corrects += (pred == label).sum().item()\n        num_total += len(label)\n\n        labels.extend(label.view(-1).data.cpu().numpy())\n        outs.extend(output.view(-1).data.cpu().numpy())\n\n    acc = num_corrects \/ num_total\n    auc = roc_auc_score(labels, outs)\n    loss = np.mean(valid_loss)\n\n    return loss, acc, auc","4fd0b9c0":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nmodel = SAKTModel(n_skill, max_seq=MAX_SEQ, embed_dim=EMBED_DIM, dropout_rate=DROPOUT_RATE)\noptimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)\ncriterion = nn.BCEWithLogitsLoss()\nscheduler = torch.optim.lr_scheduler.OneCycleLR(\n    optimizer, max_lr=MAX_LEARNING_RATE, steps_per_epoch=len(train_dataloader), epochs=EPOCHS\n)\n\nmodel.to(device)\ncriterion.to(device)","94e585f1":"best_auc = 0\nmax_steps = 3\nstep = 0\nfor epoch in range(EPOCHS):\n    loss, acc, auc = train_fn(model, train_dataloader, optimizer, scheduler, criterion, device)\n    print(\"epoch - {}\/{} train: - {:.3f} acc - {:.3f} auc - {:.3f}\".format(epoch+1, EPOCHS, loss, acc, auc))\n    loss, acc, auc = valid_fn(model, valid_dataloader, criterion, device)\n    print(\"epoch - {}\/{} valid: - {:.3f} acc - {:.3f} auc - {:.3f}\".format(epoch+1, EPOCHS, loss, acc, auc))\n    if auc > best_auc:\n        best_auc = auc\n        step = 0\n        torch.save(model.state_dict(), \"sakt_model.pt\")\n    else:\n        step += 1\n        if step > max_steps:\n            break","34df1f90":"del train_dataset, valid_dataset","c477963e":"torch.save(model.state_dict(), \"sakt_model_final.pt\")","7d75b9ff":"class TestDataset(Dataset):\n    def __init__(self, samples, test_df, skills, max_seq=MAX_SEQ):\n        super(TestDataset, self).__init__()\n        self.samples = samples\n        self.user_ids = [x for x in test_df[\"user_id\"].unique()]\n        self.test_df = test_df\n        self.skills = skills\n        self.n_skill = len(skills)\n        self.max_seq = max_seq\n\n    def __len__(self):\n        return self.test_df.shape[0]\n\n    def __getitem__(self, index):\n        test_info = self.test_df.iloc[index]\n\n        user_id = test_info[\"user_id\"]\n        target_id = test_info[\"content_id\"]\n\n        q = np.zeros(self.max_seq, dtype=int)\n        qa = np.zeros(self.max_seq, dtype=int)\n\n        if user_id in self.samples.index:\n            q_, qa_ = self.samples[user_id]\n            \n            seq_len = len(q_)\n\n            if seq_len >= self.max_seq:\n                q = q_[-self.max_seq:]\n                qa = qa_[-self.max_seq:]\n            else:\n                q[-seq_len:] = q_\n                qa[-seq_len:] = qa_          \n        \n        x = np.zeros(self.max_seq-1, dtype=int)\n        x = q[1:].copy()\n        x += (qa[1:] == 1) * self.n_skill\n        \n        questions = np.append(q[2:], [target_id])\n        \n        return x, questions","b618a4a4":"import riiideducation\n\nenv = riiideducation.make_env()\niter_test = env.iter_test()","d366ac13":"model.eval()\nprev_test_df = None\n\nfor (test_df, sample_prediction_df) in tqdm(iter_test):\n    if (prev_test_df is not None) & (psutil.virtual_memory().percent < 90):\n        prev_test_df['answered_correctly'] = eval(test_df['prior_group_answers_correct'].iloc[0])\n        prev_test_df = prev_test_df[prev_test_df.content_type_id == False]\n        \n        prev_group = prev_test_df[['user_id', 'content_id', 'answered_correctly']].groupby('user_id').apply(lambda r: (\n            r['content_id'].values,\n            r['answered_correctly'].values))\n        for prev_user_id in prev_group.index:\n            if prev_user_id in group.index:\n                group[prev_user_id] = (\n                    np.append(group[prev_user_id][0], prev_group[prev_user_id][0])[-MAX_SEQ:], \n                    np.append(group[prev_user_id][1], prev_group[prev_user_id][1])[-MAX_SEQ:]\n                )\n \n            else:\n                group[prev_user_id] = (\n                    prev_group[prev_user_id][0], \n                    prev_group[prev_user_id][1]\n                )\n\n    prev_test_df = test_df.copy()\n    \n    test_df = test_df[test_df.content_type_id == False]\n    test_dataset = TestDataset(group, test_df, skills)\n    test_dataloader = DataLoader(test_dataset, batch_size=51200, shuffle=False)\n    \n    outs = []\n\n    for item in tqdm(test_dataloader):\n        x = item[0].to(device).long()\n        target_id = item[1].to(device).long()\n\n        with torch.no_grad():\n            output, att_weight = model(x, target_id)\n        outs.extend(torch.sigmoid(output)[:, -1].view(-1).data.cpu().numpy())\n        \n    test_df['answered_correctly'] = outs\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","738aff04":"## Preprocess","d352a46e":"## Define model","aa4118f6":"## Load data","74be4c23":"# RIIID - SAKT Model Training","479d9c01":"## Test","f4155151":"Public Leaderboard Score: **0.774**\n\n#### If you like this kernel or forking this kernel, please consider upvoting this and the kernels I copied (acknowledgements) from. It helps them reach more people.\n\n- **Inference Notebook**: https:\/\/www.kaggle.com\/manikanthr5\/riiid-sakt-model-inference-public\n- **Pretrained Dataset**: https:\/\/www.kaggle.com\/manikanthr5\/riiid-sakt-model-dataset-public\n\n**Acknowledgement**:\n\nAll the credits go to this popular notebook https:\/\/www.kaggle.com\/leadbest\/sakt-with-randomization-state-updates which is a modification of https:\/\/www.kaggle.com\/wangsg\/a-self-attentive-model-for-knowledge-tracing. Please show some support to these original work kernels.\n\n**Previous Work**:\n- https:\/\/www.kaggle.com\/manikanthr5\/riiid-ensemble-lgbm-sakt-inference\n- https:\/\/www.kaggle.com\/manikanthr5\/riiid-lgbm-single-model-ensembling-training\n- https:\/\/www.kaggle.com\/manikanthr5\/riiid-lgbm-single-model-ensembling-scoring\n\n**Possible Improvements**:\n- All the data in this notebook is used for training, so create a train and valid dataset for cross validation. Note: For me this degraded my LB score.\n- Some other text book ideas you could try:\n - Using Label Smoothing\n - Using Learning Rate Schedulers\n - Increase the max sequence length and\/or embedding dimension\n - Add more attention layers","d599c0f7":"---"}}