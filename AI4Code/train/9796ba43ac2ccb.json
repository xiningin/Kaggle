{"cell_type":{"2e7264f4":"code","b7e63c03":"code","d0db9c1e":"code","55fc93ab":"code","b83338b7":"code","23e077c9":"code","69a16822":"code","e5a98d14":"code","1c3a6a48":"code","059d00df":"code","b1740bd3":"code","3af3b7dd":"code","3dec365c":"code","00aa86d0":"code","2ec96310":"markdown","e0254180":"markdown","f23bdf9e":"markdown"},"source":{"2e7264f4":"import pandas as pd\nimport numpy as np\n\n%matplotlib notebook\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport pandas_profiling","b7e63c03":"# Seaborn advanced                                                                                                                                                           \nsns.set(style='ticks',          # 'ticks', 'darkgrid'                                                                                                                        \n        palette='colorblind',   # 'colorblind', 'pastel', 'muted', 'bright'                                                                                                  \n        #palette=sns.color_palette('Accent'),   # 'Set1', 'Set2', 'Dark2', 'Accent'                                                                                          \n        rc = {                                                                                                                                                               \n           'figure.autolayout': True,   # Automaticky nastav\u00ed velikost grafu, aby se ve\u0161el do obrazu                                                                         \n           'figure.figsize': (10, 8),    # Velikost obr\u00e1zku - \u0161\u00ed\u0159ka, v\u00fd\u0161ka (v palc\u00edch)                                                                                       \n           'legend.frameon': True,      # R\u00e1me\u010dek okolo legendy                                                                                                              \n           'patch.linewidth': 2.0,      # Velikost \u010d\u00e1ry okolo r\u00e1me\u010dku                                                                                                        \n           'lines.markersize': 6,       # Velikost bod\u016f                                                                                                                      \n           'lines.linewidth': 2.0,      # Tlou\u0161\u0165ka \u010dar                                                                                                                       \n           'font.size': 20,             # Velikost hodnot na os\u00e1ch                                                                                                           \n           'legend.fontsize': 20,       # Velikost textu v legend\u011b                                                                                                           \n           'axes.labelsize': 16,        # Velikost n\u00e1zv\u016f os                                                                                                                  \n           'axes.titlesize': 22,        # Velikost nadpisu                                                                                                                   \n           'axes.grid': True,           # M\u0159\u00ed\u017eka                                                                                                                             \n           'grid.color': '0.9',         # Sv\u011btlost \u010dar m\u0159\u00ed\u017eky - 1 = b\u00edl\u00e1, 0 = \u010dern\u00e1                                                                                          \n           'grid.linestyle': '-',       # Typ \u010d\u00e1rkov\u00e1n\u00ed m\u0159\u00ed\u017eka                                                                                                               \n           'grid.linewidth': 1.0,       # Tlou\u0161\u0165ka \u010dar m\u0159\u00ed\u017eky                                                                                                                \n           'xtick.labelsize': 20,       # Velikost popis\u016f na x-ov\u00e9 ose                                                                                                       \n           'ytick.labelsize': 20,       # Velikost popis\u016f na y-ov\u00e9 ose                                                                                                       \n           'xtick.major.size': 8,       # Velikost \u010d\u00e1rek na x-ov\u00e9 ose                                                                                                        \n           'ytick.major.size': 8,       # Velikost \u010d\u00e1rek na y-ov\u00e9 ose                                                                                                        \n           'xtick.major.pad': 10.0,     # Vzd\u00e1lenost \u010d\u00edsel na x-ov\u00e9 ose od osy                                                                                               \n           'ytick.major.pad': 10.0,     # Vzd\u00e1lenost \u010d\u00edsel na y-ov\u00e9 ose od osy                                                                                               \n           }                                                                                                                                                                 \n       )                                                                                                                                                                     \nplt.rcParams['image.cmap'] = 'viridis'  ","d0db9c1e":"plays = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2020\/train.csv\")","55fc93ab":"# Get players out of dataset of plays and rename columns\nplayers = plays[[\"DisplayName\", \"PlayerHeight\", \"PlayerWeight\", \"PlayerBirthDate\", \"PlayerCollegeName\"]].drop_duplicates()\nplayers.rename(columns={\"DisplayName\":\"Name\", \"PlayerHeight\": \"Height\", \"PlayerWeight\": \"Weight\", \"PlayerBirthDate\":\"BirthDate\", \"PlayerCollegeName\":\"College\"}, inplace=True)\n# Transfer to SI units\nplayers[\"Weight\"] = players[\"Weight\"] * 0.45359237   # In kilograms\nplayers[\"Height\"] = players[\"Height\"].str.split(\"-\", expand=True)[0].astype(float) * 30.48 + players[\"Height\"].str.split(\"-\", expand=True)[1].astype(float) * 2.54   # in centimeters\n# Set birthdate column as datetime and add age in years\nplayers[\"BirthDate\"] = pd.to_datetime(players['BirthDate'])\nplayers[\"Age\"] = (pd.Timestamp('20191010') - players[\"BirthDate\"]).dt.days \/ 365   # In years\n# Compute body mass index (BMI) and add classification\nplayers[\"BMI\"] = players[\"Weight\"] \/ (players[\"Height\"] \/ 100)**2    # Weight has to be in kilograms, height in meters (factor 100 to transfer from centimeters)\nplayers[\"ObesityClassification\"] = pd.cut(players[\"BMI\"], bins=[0, 18.5, 25, 30, 35, 40, 100], labels=[\"Underweight\", \"Normal weight\", \"Pre-obesity\", \"Obesity class 1\", \"Obesity class 2\", \"Obesity class 3\"])","b83338b7":"players","23e077c9":"print(f\"Players are from {len(players['College'].unique())} different colleges.\")\nprint(f\"The youngest player is {players.loc[players['Age'] == players['Age'].min(), 'Name'].values[0]} with age {round(players['Age'].min(), 2)} years from {players.loc[players['Age'] == players['Age'].min(), 'College'].values[0]}.\")\nprint(f\"The oldest player is {players.loc[players['Age'] == players['Age'].max(), 'Name'].values[0]} with age {round(players['Age'].max(), 2)} years from {players.loc[players['Age'] == players['Age'].max(), 'College'].values[0]}.\")\nprint(f\"The most lightweight player is {players.loc[players['Weight'] == players['Weight'].min(), 'Name'].values[0]} with weight {round(players['Weight'].min(), 2)} kg from {players.loc[players['Weight'] == players['Weight'].min(), 'College'].values[0]}.\")\nprint(f\"The heaviest is {players.loc[players['Weight'] == players['Weight'].max(), 'Name'].values[0]} with weight {round(players['Weight'].max(), 2)} kg from {players.loc[players['Weight'] == players['Weight'].max(), 'College'].values[0]}.\")\nprint(f\"The shortest player is {players.loc[players['Height'] == players['Height'].min(), 'Name'].values[0]} with height {round(players['Height'].min(), 2)} cm from {players.loc[players['Height'] == players['Height'].min(), 'College'].values[0]}.\")\nprint(f\"The tallest player is {players.loc[players['Height'] == players['Height'].max(), 'Name'].values[0]} with height {round(players['Height'].max(), 2)} cm from {players.loc[players['Height'] == players['Height'].max(), 'College'].values[0]}.\")","69a16822":"players.describe()","e5a98d14":"plt.figure()\nsns.distplot(players[\"Weight\"])\nplt.xlabel(\"Weight [kg]\")\nplt.title(\"Weight of players\")\nplt.savefig(\"WeightHist.png\")\nplt.show()","1c3a6a48":"plt.figure()\nsns.distplot(players[\"Height\"], bins=16)\nplt.xlabel(\"Heigh [cm]\")\nplt.title(\"Height of players\")\nplt.savefig(\"HeightHist.png\")\nplt.show()","059d00df":"plt.figure()\nsns.distplot(players[\"Age\"])\nplt.xlabel(\"Age [years]\")\nplt.title(\"Age of players\")\nplt.savefig(\"AgeHist.png\")\nplt.show()","b1740bd3":"plt.figure()\nsns.distplot(players[\"BMI\"])\nplt.xlabel(\"BMI [kg $\\cdot$ m$^{-2}$]\")\nplt.title(\"Body mass index of players\")\nplt.savefig(\"BMIHist.png\")\nplt.show()","3af3b7dd":"colormap = dict(zip(players[\"ObesityClassification\"].unique(), sns.color_palette()))\nfig = plt.figure()\nax = plt.subplot(111)\nsns.scatterplot(players[\"Weight\"], players[\"Height\"], hue=players[\"ObesityClassification\"], linewidth=0, alpha=0.6, ax=ax)\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles=handles[1:], labels=labels[1:], prop={'size': 16}, loc=\"lower right\")\nplt.xlabel(\"Weight\")\nplt.ylabel(\"Height\")\nplt.savefig(\"WeightVsHeight.png\")\nplt.show()","3dec365c":"plt.figure(figsize=(7.5,7.5))\nsns.pairplot(players, height=4.5, aspect=1, plot_kws={\"linewidth\":0, \"alpha\":0.3})\nplt.savefig(\"ScatterMatrix.png\")","00aa86d0":"plt.figure(figsize=(8,8))\nsns.heatmap(players.corr(), cmap=\"RdYlGn\", annot=True)\nplt.title(\"Correlation heatmap\")\nplt.savefig(\"CorrelationHeatmap.png\")\nplt.show()","2ec96310":"# Multiple variables","e0254180":"# Single variable","f23bdf9e":"# Intro\n\nThis notebook is EDA of physiological attributes of players from the dataset, there are no other information about games.\n\nSome basic information:\n\n- 2242 players\n- Average age: 27.75 years\n- Average height: 188.2 cm\n- Average weight: 111.8 kg\n- Players are from 301 different colleges.\n- The youngest player is Tremaine Edmunds with age 21.45 years from Virginia Tech.\n- The oldest player is Tom Brady with age 42.21 years from Michigan.\n- The most lightweight player is JoJo Natson with weight 69.4 kg from Akron.\n- The heaviest is Trent Brown with weight 172.37 kg from Florida.\n- The shortest player is Tarik Cohen with height 167.64 cm from North Carolina A&T.\n- The tallest player is Nate Solder with height 205.74 cm from Colorado."}}