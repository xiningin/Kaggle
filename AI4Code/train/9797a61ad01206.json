{"cell_type":{"2f7e8f3e":"code","87820581":"code","fde2b7a7":"code","9b1d88b2":"code","1aa91811":"code","df350746":"code","2ef6e418":"code","c0a68f2f":"code","66730120":"code","dca5d438":"code","84776a09":"code","ec716623":"code","8df9a058":"code","9384a0da":"code","aaec7404":"code","d71cf742":"code","bf4edd67":"code","ac6f8f39":"code","d1a5347d":"code","74efa3f0":"code","f6de68d1":"code","d4c91f94":"code","0f10619b":"code","3241aa56":"code","74b2e281":"code","3596db3b":"code","9401c7f7":"code","53cdc0ea":"code","0d1c641f":"code","735ea45e":"code","ecc43fc0":"code","cbef8b39":"code","1526c811":"code","cb31ace2":"code","8388cd86":"code","5613b44f":"code","bdc78f96":"code","6612de97":"code","179c8bb1":"code","9f67300e":"code","247b4232":"code","291bdaa8":"code","391c85bb":"code","3c4a8376":"code","34c38c27":"code","9db089da":"code","90c6b931":"code","47a530d1":"code","05884cf0":"code","3653daaa":"code","7c163f3e":"code","8a4d3910":"code","efb80f34":"code","ca862e54":"code","827cdf48":"code","3f1c4e98":"code","5bce1ee6":"code","af46e4bd":"code","49f9e33a":"code","c61ead32":"code","592a9e51":"code","57c6df65":"code","aa485c57":"code","0b07a891":"code","157169aa":"code","56236c23":"code","b25c97d3":"code","77dd77b4":"code","ebe1f090":"code","6332c2ad":"code","b2ce3908":"code","6adf86ef":"code","d09956b4":"code","c7045d3c":"code","f79aa5a3":"code","a425db42":"code","23435e49":"code","c09b5924":"code","3df1dd22":"code","4c8399fd":"code","80b68fb9":"code","4244f424":"code","138571e4":"code","2c43cb84":"code","cca44ce5":"code","4321536e":"code","02e252b0":"code","3a17ebd2":"code","6a9188a6":"code","00167a11":"code","fcc728da":"code","10f94712":"code","ee086149":"code","c8d69e06":"code","71bc9cd2":"code","116576f3":"code","b238a51f":"code","660036d3":"code","4e7bbd4e":"code","1e458d75":"code","93b6e534":"code","ed5cbbcb":"code","715238d2":"code","2605fff7":"code","65ec6bf6":"code","4e97edc8":"code","44e82387":"code","226e8c31":"code","c7ca2947":"code","9731104d":"code","cc69c975":"code","13ae4a9d":"code","77a1cff8":"code","2c035adb":"code","6a1e2ef4":"code","6c992370":"code","408240ea":"code","ad31168c":"code","58b599b4":"code","96403567":"code","002a69ea":"code","491c1c43":"code","792057c4":"code","4a1c2fa5":"code","d4b715c2":"code","4b8ec92e":"code","59fefdc5":"code","c9aba961":"code","93d42154":"code","b1b18a23":"code","6bf4c40e":"code","eb9b2643":"code","c7c2ce2e":"code","085a0100":"code","1c3f5b3a":"code","4b1727b0":"code","a301ff27":"code","b5ddd7a1":"code","30dd6701":"code","723e3bb8":"code","b908d455":"code","5675e982":"markdown","a0dea462":"markdown","af0682a0":"markdown","d072176c":"markdown","f39b946d":"markdown","1c97c58a":"markdown","86217bd4":"markdown","a116b7b1":"markdown","b69badb0":"markdown","55b6c560":"markdown","14547440":"markdown","cdf48c50":"markdown","58e78fef":"markdown","98666a18":"markdown","f26d8e53":"markdown","81d3257b":"markdown","18c4718f":"markdown","fdadc64d":"markdown","87576282":"markdown","3883445e":"markdown","07a12af3":"markdown","647cbee0":"markdown","d9f5cc96":"markdown","a1b859c5":"markdown","fbf3ed5a":"markdown","dfef2c8f":"markdown","0e3abe67":"markdown","c39ae0d3":"markdown","329edb5c":"markdown"},"source":{"2f7e8f3e":"#For uploading and accessing the data\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#For visualizations\nimport seaborn as sns\n# Pretty display for notebooks\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n#for fitting Models\nfrom sklearn.svm         import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree        import DecisionTreeClassifier\nfrom sklearn.ensemble    import RandomForestClassifier\nfrom sklearn.neighbors   import KNeighborsClassifier\nfrom sklearn.ensemble    import GradientBoostingClassifier","87820581":"#Using To Save Submission File \n!pip install openpyxl","fde2b7a7":"#Training Data\ndata_census = pd.read_csv('..\/input\/udacity-mlcharity-competition\/census.csv' , sep=',' , encoding='utf8')","9b1d88b2":"# Success - Display the first record\ndata_census.head(2)","1aa91811":"#Submission Data\ndata_submission = pd.read_csv('..\/input\/udacity-mlcharity-competition\/example_submission.csv' , sep=',' , encoding='utf8')","df350746":"#Test Data\ndatatest_census = pd.read_csv('..\/input\/udacity-mlcharity-competition\/test_census.csv' , sep=',' , encoding='utf8')","2ef6e418":"data_census.head()","c0a68f2f":"datatest_census['marital-status'].value_counts()","66730120":"datatest_census.info()","dca5d438":"#train\ndata_census['sex'].value_counts()","84776a09":"#test\ndatatest_census['sex'].value_counts()","ec716623":"#Show first 5 row from Data\ndata_census.head()","8df9a058":"data_census['education_level'].head()","9384a0da":"data_census['education-num'].head()","aaec7404":"data_census['education_level'].tail()","d71cf742":"data_census['education-num'].tail()","bf4edd67":"#Drop column of education level from train and test data as containt of the same data of education num\ndata_census.drop('education_level' , axis=1 , inplace=True)\ndatatest_census.drop('education_level' , axis=1 , inplace=True)","ac6f8f39":"#show train data after drop education_level\ndata_census.head()","d1a5347d":"#Show Test Data after drop education_level\ndatatest_census.head()","74efa3f0":"#show first 5 row from submission data\ndata_submission.head()","f6de68d1":"#Rename column\ndatatest_census = datatest_census.rename(columns = {'Unnamed: 0': 'id'}, inplace = False)\ndatatest_census.head()","d4c91f94":"#show last rows in train data\ndata_census.tail()","0f10619b":"datatest_census.tail()","3241aa56":"#Show Data about data\ndata_census.info()","74b2e281":"#shape for train data\ndata_census.shape","3596db3b":"#shape for test data\ndatatest_census.shape","9401c7f7":"#length for train and Test data\nprint('Length of Train Data :: ' , len(data_census))\nprint ('Length of Test Data :: ' ,len(datatest_census))","53cdc0ea":"#show names for all columns \ndata_census.columns","0d1c641f":"data_census.info()\n#Data include 8 object","735ea45e":"datatest_census.info()\n#data include 7 object ","ecc43fc0":"data_census['marital-status'].value_counts()","cbef8b39":"datatest_census['marital-status'].value_counts()","1526c811":"#Show names of columns\ndata_census.columns","cb31ace2":"#get income in column Target to avoid apply dummy for target\nTarget = data_census['income']","8388cd86":"#encoding income column\nTarget = Target.apply(lambda x: 0 if x == \"<=50K\" else 1)\n # <=50K = 0, >50K = 1","5613b44f":"Target.tail()","bdc78f96":"Target.head()","6612de97":"Target.value_counts()","179c8bb1":"#Drop income from Train Data before dummy encoding\ndata_census.drop('income' , axis=1 , inplace=True)","9f67300e":"data_census.head()","247b4232":"#apply Dummy Encoders for train data\ndata_census = pd.get_dummies(data_census)\ndata_census.head()","291bdaa8":"data_census.info()","391c85bb":"#apply Dummy Encoders for test data\ndatatest_census = pd.get_dummies(datatest_census)\ndatatest_census.head()","3c4a8376":"datatest_census.info()","34c38c27":"data_census.drop('sex_ Female' , axis=1 , inplace=True)\ndatatest_census.drop('sex_ Female' , axis=1 , inplace=True)","9db089da":"#Rename column sex_ Male To Gender\ndata_census = data_census.rename(columns = {'sex_ Male': 'Gender'}, inplace = False)\ndatatest_census = datatest_census.rename(columns = {'sex_ Male': 'Gender'}, inplace = False)","90c6b931":"#Add column of Target to Train Data after dummy encoding\ndata_census['target'] = Target","47a530d1":"#show train data after add target column\ndata_census.head()","05884cf0":"#show test data\ndatatest_census.head()","3653daaa":"data_census.isnull().sum().sum()","7c163f3e":"datatest_census.isnull().sum().sum()","8a4d3910":"datatest_census.info()","efb80f34":"datatest_census.columns","ca862e54":"#Show Null Data\ndatatest_census.isnull().sum().plot(kind='bar')","827cdf48":" #Fill NUll \ndatatest_census['age'] = datatest_census.fillna(datatest_census['age'].mean)\ndatatest_census['education-num'] = datatest_census.fillna(datatest_census['education-num'].mode)\ndatatest_census['capital-gain'] = datatest_census.fillna(datatest_census['capital-gain'].mean)\ndatatest_census['capital-loss'] = datatest_census.fillna(datatest_census['capital-loss'].mean)\ndatatest_census['hours-per-week'] = datatest_census.fillna(datatest_census['hours-per-week'].mode)","3f1c4e98":"datatest_census['capital-gain'].value_counts()","5bce1ee6":"datatest_census['hours-per-week'].value_counts()","af46e4bd":"datatest_census.isnull().sum().sum()","49f9e33a":"datatest_census['education-num'].value_counts()","c61ead32":"datatest_census.info()","592a9e51":"data_census.head()","57c6df65":"datatest_census.head()","aa485c57":"datatest_census.tail()","0b07a891":"datatest_census.info()","157169aa":"data_census.head()","56236c23":"#Checking The Missing Values\ndata_census.isnull().sum().sum()\n#count of nulls is Zero","b25c97d3":"import seaborn as sns\nsns.heatmap(data_census.isnull(), cmap='viridis' , cbar=True , yticklabels=False)\n#sns.heatmap using condition Data.isnull()\n#cmap colors\n#yticklabels to split between columns by lines\n#cbar show line of ratios\nplt.title('missing data for Training data')\nplt.show()","77dd77b4":"import seaborn as sns\nsns.heatmap(datatest_census.isnull(), cmap='viridis' , cbar=True , yticklabels=False)\n#sns.heatmap using condition Data.isnull()\n#cmap colors\n#yticklabels to split between columns by lines\n#cbar show line of ratios\nplt.title('missing data for Testing data')\nplt.show()","ebe1f090":"datatest_census.head()","6332c2ad":"#Columns for test data\ndatatest_census.columns","b2ce3908":"data_census['target'].value_counts()","6adf86ef":"# Total number of records\nnum_records = len(data_census)\n\n# Number of records where individual's income is more than $50,000\nmore_than_50 = len(data_census[data_census['target']==1])\n\n# Number of records where individual's income is at most $50,000\nmost_50 = len(data_census[data_census['target']<=0])\n\n# Percentage of individuals whose income is more than $50,000\npercent = (more_than_50\/num_records)*100\n\n# Print the results\nprint('Total number of records:' , num_records)\nprint('Individuals making more than $50,000: ' , more_than_50)\nprint('Individuals making at most $50,000:' , most_50)\nprint('Percentage of individuals making more than $50,000: ',percent,'%')","d09956b4":"#show all statistics\ndata_census.describe(include='all').style.background_gradient(cmap='coolwarm')","c7045d3c":"#sns.pairplot(data_census, height=5)\n#plt.show()","f79aa5a3":"plt.scatter(x=data_census['hours-per-week'] , y=data_census['target'] , alpha=0.5 , color='blue')\nplt.show()","a425db42":"plt.scatter(x=data_census['capital-loss'] , y=data_census['target'] , alpha=0.5 , color='blue')\nplt.show()","23435e49":"#show scatter \nplt.scatter(x=data_census['capital-gain'],y=data_census['target'] , alpha=0.5 , color='red')","c09b5924":"#show distplot for age\nimport seaborn as sns\nsns.distplot(data_census['age'])","3df1dd22":"sns.distplot(data_census['hours-per-week'])","4c8399fd":"#show all columns in distplot\ndata_census.hist(bins=20 , figsize=(30,20))\nplt.show()","80b68fb9":"sns.relplot(x ='age', y ='target', col = 'Gender', data =data_census, color = 'orange')\n","4244f424":"data_census.columns","138571e4":"data_census.boxplot()","2c43cb84":"sns.boxplot(x=data_census['age'])","cca44ce5":"sns.boxplot(x=data_census['education-num'])","4321536e":"sns.boxplot(x=data_census['capital-gain'])","02e252b0":"sns.boxplot(x=data_census['capital-loss'])","3a17ebd2":"sns.boxplot(x=data_census['hours-per-week'])","6a9188a6":"sns.boxplot(x=data_census['workclass_ Federal-gov'])","00167a11":"sns.boxplot(x=data_census['workclass_ Local-gov'])","fcc728da":"sns.boxplot(x=data_census['workclass_ Self-emp-inc'])","10f94712":"sns.boxplot(x=data_census['target'])","ee086149":" sns.boxplot(x=data_census['hours-per-week'])","c8d69e06":"data_census.plot(kind='box' , subplots=True , layout=(10,10) , sharex=False ,\n          fontsize=8 , figsize=(10,10))\nplt.tight_layout()","71bc9cd2":"data_corr=data_census.corr().style.background_gradient(cmap='plasma')\ndata_corr","116576f3":"mask = np.zeros_like(data_census.corr())\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"ticks\"):\n    f, ax = plt.subplots(figsize=(15, 6))\n    ax = sns.heatmap(data_census.corr(), mask=mask, vmax=.3,annot=True,fmt=\".0%\",linewidth=0.5,square=False)\n    #annot is numbers in squares\n    #square=True the square is small but square=False the square is large","b238a51f":"train_data = data_census","660036d3":"test_data  = datatest_census","4e7bbd4e":"train_data.head()","1e458d75":"test_data.head()","93b6e534":"datatest_census","ed5cbbcb":"data_census.info()","715238d2":"datatest_census.info()","2605fff7":"datatest_census.drop('id', axis=1 , inplace = True)","65ec6bf6":"datatest_census.head()","4e97edc8":"x_train = data_census.drop(['target'] ,axis=1).values\ny_train = data_census['target'].values","44e82387":"#Fitting Model\nsvm = SVC(kernel=\"rbf\")\nsvm.fit(x_train,y_train)","226e8c31":"#Training Score\ntrain_Score_svm = svm.score(x_train , y_train)\ntrain_Score_svm","c7ca2947":"y_pred_SVM=svm.predict(datatest_census)\ny_pred_SVM","9731104d":"#fit Model Gaussian\ngnb = GaussianNB()\ngnb.fit(x_train , y_train)","cc69c975":"#Training Score\nGN_train_score = gnb.score(x_train , y_train)\nGN_train_score","13ae4a9d":"#prediction\ny_pred_GN=gnb.predict(datatest_census)\ny_pred_GN","77a1cff8":"dt = DecisionTreeClassifier(max_depth=25)\ndt.fit(x_train , y_train)","2c035adb":"dt_y_pred = dt.predict(datatest_census)\ndt_y_pred ","6a1e2ef4":"#Training Score\ndt_train_score = dt.score(x_train , y_train)\ndt_train_score","6c992370":"#Fitting Model\nrf=RandomForestClassifier(max_depth=4 ,max_features=5 )\nrf.fit(x_train , y_train)","408240ea":"#Training Score\nrf_train_score = rf.score(x_train , y_train)\nrf_train_score","ad31168c":"#Test Score\nrf_test_predict = rf.predict(datatest_census)\nrf_test_predict","58b599b4":"#Creat object from model\nmodel = KNeighborsClassifier(n_neighbors=3)","96403567":"#Train the model using the training sets\nmodel.fit(x_train , y_train)","002a69ea":"#Training Score\nknn_train_score = model.score(x_train , y_train)\nknn_train_score","491c1c43":"#Predict Output\nknn_predict= model.predict(datatest_census)\nknn_predict","792057c4":"#Fit Model\nGBC_Model = GradientBoostingClassifier(n_estimators=100 , max_depth=3 , random_state=44)\nGBC_Model.fit(x_train , y_train)","4a1c2fa5":"#Training Score\nGBC_train_score = GBC_Model.score(x_train , y_train)\nGBC_train_score","d4b715c2":"#Test Predict\nGBC_Test_predict = GBC_Model.predict(datatest_census)\nGBC_Test_predict","4b8ec92e":"GBC_Model.feature_importances_","59fefdc5":"print ('score of training data for SVC :: ' ,train_Score_svm)\ndf_svc=pd.DataFrame(y_pred_SVM)\ndf_svc.head()","c9aba961":"print ('score of training data for Naive Baies :: ' ,GN_train_score)\ndf_GN=pd.DataFrame(y_pred_GN)\ndf_GN.head()","93d42154":"print ('score of training data for Decision Tree :: ' ,dt_train_score)\ndf_dt=pd.DataFrame(dt_y_pred)\ndf_dt.head()","b1b18a23":"print ('score of training data for RandomForest :: ' ,rf_train_score)\ndf_rf=pd.DataFrame(rf_test_predict)\ndf_rf.head()","6bf4c40e":"print ('score of training data for K Nearest Neighbor  :: ' , knn_train_score)\ndf_knn=pd.DataFrame(knn_predict)\ndf_knn.head()","eb9b2643":"print ('score of training data for Gradient Boosting Classifier :: ' , GBC_train_score)\ndf_GBC=pd.DataFrame(GBC_Test_predict)\ndf_GBC.head()","c7c2ce2e":"#Submission Data\ndata_submission = pd.read_csv('..\/input\/udacity-mlcharity-competition\/example_submission.csv' , sep=',' , encoding='utf8')","085a0100":"df_GBC.tail()","1c3f5b3a":"data_submission['new'] = df_GBC[0]","4b1727b0":"data_submission.head()","a301ff27":"data_submission.drop('income' , axis=1 , inplace=True)","b5ddd7a1":"data_submission  = data_submission.rename(columns = {'new' : 'income'} , inplace = False)","30dd6701":"data_submission.head()","723e3bb8":"data_submission.info()","b908d455":"#To Save My Predictions \ndata_submission.to_excel(\"My_Submission.xlsx\" , index = False, header=True)","5675e982":"# Support Vector Machine (Classifier)","a0dea462":"# Summary","af0682a0":"# Implementation: Data Exploration","d072176c":"# Load Dataset","f39b946d":"# Dummy Encoding","1c97c58a":"* Data has 45222 Row and 13 columns \n* 4 columns is float , one columns is integer and 8 columns is object\n* not found null in data","86217bd4":"**show outliers for some columns**","a116b7b1":"Count of (Income<=50K) is greater than (Income>50K) ","b69badb0":"# Correlation Matrix","55b6c560":"# My Submission","14547440":"# No Missing values","cdf48c50":"## Preparing the Data\nBefore data can be used as input for machine learning algorithms, it often must be cleaned, formatted, and restructured \u2014 this is typically known as **preprocessing**. Fortunately, for this dataset, there are no invalid or missing entries we must deal with, however, there are some qualities about certain features that must be adjusted. This preprocessing can help tremendously with the outcome and predictive power of nearly all learning algorithms.","58e78fef":"# Gradient Boosting Classifier","98666a18":"# Submission","f26d8e53":"# Decision Tree Classifier","81d3257b":"# Supervised Learning","18c4718f":"For all Data Train and Test\ncolumn of sex (Male or Female ) has same meaning so will drop one from them","fdadc64d":"**Train Data containt in 8 object and Test Data has 7 object**","87576282":"**Classification**\n*  SVC\n* naive_bayes\n* Decision Tree\n* Random Forest\n* GradientBoosting","3883445e":"# Outliers","07a12af3":"# K Neighbors Classifier","647cbee0":"# Random Forest Classifier","d9f5cc96":"# MODELING","a1b859c5":"* A cursory investigation of the dataset will determine how many individuals fit into either group, and will tell us about the percentage of these individuals making more than $50,000.\n\n* The total number of records, 'n_records'\n* The number of individuals making more than $50,000 annually, 'n_greater_50k'.\n* The number of individuals making at most   $50,000 annually, 'n_at_most_50k'.\n* The percentage of individuals making more than $50,000 annually, 'greater_percent'.","fbf3ed5a":"# Naive_Bayes (GaussianNB)","dfef2c8f":"# Splitting Data","0e3abe67":"# Encoding","c39ae0d3":"**Show Relation Between education_level and education-num**","329edb5c":"** Featureset Exploration **\n\n* **age**: continuous. \n* **workclass**: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked. \n* **education-num**: continuous. \n* **marital-status**: Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse. \n* **occupation**: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces. \n* **relationship**: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried. \n* **race**: Black, White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other. \n* **sex**: Female, Male. \n* **capital-gain**: continuous. \n* **capital-loss**: continuous. \n* **hours-per-week**: continuous. \n* **native-country**: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands."}}