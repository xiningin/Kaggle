{"cell_type":{"5aadc818":"code","23140d7e":"code","e63475d5":"code","43337a05":"code","c619c754":"code","14b039e7":"code","23b4f3b7":"code","1d37b85d":"code","9f46cecc":"code","58c2fb18":"code","ec07ae77":"code","c3bc0f5c":"code","7d44eb39":"code","9d09215b":"code","2f18f5a1":"code","587a72d0":"code","23dbe4ad":"code","7b094a69":"code","db168a83":"code","639e106f":"markdown","40e3b0eb":"markdown","6f1aac54":"markdown","143e5b7b":"markdown","6ae938f2":"markdown","7341eeee":"markdown","81deab08":"markdown"},"source":{"5aadc818":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23140d7e":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n%config InlineBackend.figure_formats = {'png', 'retina'}\nsns.set(color_codes=True)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score,recall_score\n\nimport warnings\nwarnings.simplefilter('ignore')","e63475d5":"df = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\nprint(\"Data Shape:\", df.shape)\ndf.head()","43337a05":"df.info()","c619c754":"df.describe()","14b039e7":"# Visualize the frequency of categorical values\nfig, ax = plt.subplots(nrows=3, ncols=3, sharey=True, figsize=(10,8))\nsns.countplot(x='sex', data=df, palette='winter', ax=ax[0][0])\nsns.countplot(x='cp', data=df, palette='winter', ax=ax[0][1])\nsns.countplot(x='fbs', data=df, palette='winter', ax=ax[0][2])\nsns.countplot(x='restecg', data=df, palette='winter', ax=ax[1][0])\nsns.countplot(x='exng', data=df, palette='winter', ax=ax[1][1])\nsns.countplot(x='slp', data=df, palette='winter', ax=ax[1][2])\nsns.countplot(x='caa', data=df, palette='winter', ax=ax[2][0])\nsns.countplot(x='thall', data=df, palette='winter', ax=ax[2][1])\nsns.countplot(x='output', data=df, palette='winter', ax=ax[2][2])\nplt.tight_layout() \nplt.show()","23b4f3b7":"# Visualize the probability density of continuous variables\nfig, ax = plt.subplots(nrows=1, ncols=5, sharey=False, figsize=(14,3))\nsns.distplot(df['age'], color='royalblue', ax=ax[0])\nsns.distplot(df['trtbps'], color='royalblue', ax=ax[1])\nsns.distplot(df['chol'], color='royalblue', ax=ax[2])\nsns.distplot(df['thalachh'], color='royalblue', ax=ax[3])\nsns.distplot(df['oldpeak'], color='royalblue', ax=ax[4])\nplt.tight_layout() \nplt.show()","1d37b85d":"# Visualize the frequency of categorical values by output\nfig, ax = plt.subplots(nrows=3, ncols=3, sharey=True, figsize=(10,8))\nsns.countplot(x='sex', data=df, palette='winter', hue='output', ax=ax[0][0])\nsns.countplot(x='cp', data=df, palette='winter', hue='output', ax=ax[0][1])\nsns.countplot(x='fbs', data=df, palette='winter', hue='output', ax=ax[0][2])\nsns.countplot(x='restecg', data=df, palette='winter', hue='output', ax=ax[1][0])\nsns.countplot(x='exng', data=df, palette='winter', hue='output', ax=ax[1][1])\nsns.countplot(x='slp', data=df, palette='winter', hue='output', ax=ax[1][2])\nsns.countplot(x='caa', data=df, palette='winter', hue='output', ax=ax[2][0])\nsns.countplot(x='thall', data=df, palette='winter', hue='output', ax=ax[2][1])\nplt.tight_layout() \nplt.show()","9f46cecc":"# Visualize the distribution of continuous variables by output\nfig, ax = plt.subplots(nrows=1, ncols=5, sharey=False, figsize=(15,4))\nsns.boxenplot(x='output', y='age', data=df, palette='winter', linewidth=0.1, ax=ax[0])\nsns.boxenplot(x='output',y='trtbps', data=df, palette='winter', linewidth=0.1, ax=ax[1])\nsns.boxenplot(x='output',y='chol', data=df, palette='winter', linewidth=0.1, ax=ax[2])\nsns.boxenplot(x='output',y='thalachh', data=df, palette='winter', linewidth=0.1, ax=ax[3])\nsns.boxenplot(x='output',y='oldpeak', data=df, palette='winter', linewidth=0.1, ax=ax[4])\nplt.tight_layout() \nplt.show()","58c2fb18":"# Visualize the correlationship between variables\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(8, 8))\n\n# Draw the heatmap with correct aspect ratio\nsns.heatmap(df.corr(), cmap=\"coolwarm\", vmax=.3, center=0, square=True, linewidths=2.5, \n            cbar_kws={\"shrink\": .5}, annot=False, fmt=\"1.1f\")","ec07ae77":"# Split data into X and y\nX = df.drop('output', axis=1)\ny = df['output']","c3bc0f5c":"# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)","7d44eb39":"# Standardization\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","9d09215b":"# Create a model dictionary\nmodels = {\"Logistic Regression   \": LogisticRegression(),\n          \"K-Nearest Neighbors   \": KNeighborsClassifier(),\n          \"Support Vector Machine\": SVC(probability=True),\n          \"Decision Tree         \": DecisionTreeClassifier(),\n          \"Random Forest         \": RandomForestClassifier(),\n          \"Ada Boost             \": AdaBoostClassifier(),\n          \"XGBoost               \": XGBClassifier(),\n          \"LightGBM              \": LGBMClassifier(),\n          \"CatBoost              \": CatBoostClassifier(verbose=0),\n          \"Mulilayer Perceptron  \": MLPClassifier()\n         }","2f18f5a1":"# Fit the models\nfor name, model in models.items():\n    model.fit(X_train, y_train)","587a72d0":"# Accuracy\nprint(\"Accuracy\")\nfor name, model in models.items():\n    print(name + \": {:.3f}\".format(accuracy_score(y_test, model.predict(X_test))))","23dbe4ad":"# AUC Score\nprint(\"AUC Score\")\nfor name, model in models.items():\n    print(name + \": {:.3f}\".format(roc_auc_score(y_test,model.predict_proba(X_test)[:,1])))","7b094a69":"# Confusin matrix\nlog_reg = LogisticRegression().fit(X_train, y_train)\ny_pred = log_reg.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\n\n# Transform to df for easier plotting\ncm_df = pd.DataFrame(cm,\n                     index = ['Negative','Positive'], \n                     columns = ['Negative','Positive'])\n\nplt.figure(figsize=(5.5,4))\nsns.heatmap(cm_df, annot=True, cmap='Blues')\nplt.title('Logistic Regression \\nAccuracy:{0:.3f}'.format(accuracy_score(y_test, y_pred)))\nplt.ylabel('True label')\nplt.xlabel('Predicted label')\nplt.show()","db168a83":"# get importance\nimportance = log_reg.coef_[0]\n\n# Plot feature importance\ndf_importance = pd.DataFrame(importance)\ndf_importance.columns = ['feature_importance']\ndf_importance['features'] = X.columns\nsns.barplot(x='feature_importance', y='features', data=df_importance)","639e106f":"# Data Preprocessing","40e3b0eb":"# Make Prediction","6f1aac54":"# Load and Explore Dataset","143e5b7b":"## Univariate Analysis","6ae938f2":"## Segmented univariate analysis","7341eeee":"## Feature Importance","81deab08":"# Model Evaluation"}}