{"cell_type":{"7429bdcd":"code","0bc1f432":"code","557aef17":"code","3716d2d5":"code","d301c33a":"code","24eafae7":"code","9c4bfb83":"code","3eb50278":"code","d55ef493":"code","bd6de9fc":"code","5b1500a1":"code","f45554fd":"code","db8555d9":"code","2e8b7773":"code","c3224a4a":"code","2e31072d":"code","801ca6f4":"code","85980305":"code","938bddbf":"code","c858d97d":"code","a56f3c6a":"code","3232d252":"code","2ffb42b6":"markdown","45de5742":"markdown","490f7121":"markdown","d3115956":"markdown","260238ab":"markdown","81a509e5":"markdown","1044946c":"markdown","5a97ad77":"markdown","ffe82992":"markdown","4e68e6ff":"markdown","5f7354c8":"markdown","052d382e":"markdown","b4289d12":"markdown"},"source":{"7429bdcd":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"..\/input\/gold-price-prediction-dataset\/FINAL_USO.csv\")\ndf.head(10)","0bc1f432":"df.columns","557aef17":"df['Date'] = pd.to_datetime(df['Date'])","3716d2d5":"all_corr = df.corr().abs()['Adj Close'].sort_values(ascending = False)\nall_corr","d301c33a":"corr_drop = all_corr[all_corr < 0.35]\ncorr_drop","24eafae7":"to_drop = list(corr_drop.index)\ndf2 = df.drop(to_drop, axis = 1)\ndf2.head()","9c4bfb83":"df2 = df2.set_index(\"Date\")\ndf2","3eb50278":"import matplotlib.pyplot as plt\n\ntitles = ['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume', 'SP_open', 'SP_high', 'SP_low', 'SP_close', \n          'SP_Ajclose','SP_volume','DJ_open', 'DJ_high' ]\nfeature_keys = ['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume', 'SP_open', 'SP_high', 'SP_low', 'SP_close',\n                'SP_Ajclose', 'SP_volume','DJ_open', 'DJ_high']\n\ncolors = [ \"blue\",\"orange\",\"green\",\"red\",\"purple\",\"brown\",\"pink\",\"gray\",\"olive\", \"cyan\"]\n\ndate_time_key = \"Date\"\n\ndef show_raw_visualization(data):\n    time_data = data[date_time_key]\n    fig, axes = plt.subplots(\n        nrows=7, ncols=2, figsize=(15, 20), dpi=80, facecolor=\"w\", edgecolor=\"k\"\n    )\n    for i in range(len(feature_keys)):\n        key = feature_keys[i]\n        c = colors[i % (len(colors))]\n        t_data = data[key]\n        t_data.index = time_data\n        t_data.head()\n        ax = t_data.plot(\n            ax=axes[i \/\/ 2, i % 2],\n            color=c,\n            title=\"{} - {}\".format(titles[i], key),\n            rot=25,\n        )\n        ax.legend([titles[i]])\n    plt.tight_layout()\n\n\nshow_raw_visualization(df)","d55ef493":"titles = ['DJ_low', 'DJ_close', 'DJ_Ajclose', 'DJ_volume',\n       'EG_open', 'EG_high', 'EG_low', 'EG_close', 'EG_Ajclose', 'EG_volume',\n       'EU_Price', 'EU_open', 'EU_high', 'EU_low']\nfeature_keys = ['DJ_low', 'DJ_close', 'DJ_Ajclose', 'DJ_volume',\n       'EG_open', 'EG_high', 'EG_low', 'EG_close', 'EG_Ajclose', 'EG_volume',\n       'EU_Price', 'EU_open', 'EU_high', 'EU_low']\nshow_raw_visualization(df)\n","bd6de9fc":"titles = ['EU_Trend', 'OF_Price',\n       'OF_Open', 'OF_High', 'OF_Low', 'OF_Volume', 'OF_Trend', 'OS_Price',\n       'OS_Open', 'OS_High', 'OS_Low', 'OS_Trend', 'SF_Price', 'SF_Open']\nfeature_keys = ['EU_Trend', 'OF_Price',\n       'OF_Open', 'OF_High', 'OF_Low', 'OF_Volume', 'OF_Trend', 'OS_Price',\n       'OS_Open', 'OS_High', 'OS_Low', 'OS_Trend', 'SF_Price', 'SF_Open']\nshow_raw_visualization(df)","5b1500a1":"titles = ['SF_High', 'SF_Low', 'SF_Volume', 'SF_Trend', 'USB_Price', 'USB_Open',\n       'USB_High', 'USB_Low', 'USB_Trend', 'PLT_Price', 'PLT_Open', 'PLT_High',\n       'PLT_Low', 'PLT_Trend']\nfeature_keys = ['SF_High', 'SF_Low', 'SF_Volume', 'SF_Trend', 'USB_Price', 'USB_Open',\n       'USB_High', 'USB_Low', 'USB_Trend', 'PLT_Price', 'PLT_Open', 'PLT_High',\n       'PLT_Low', 'PLT_Trend']\nshow_raw_visualization(df)","f45554fd":"titles = ['RHO_PRICE', 'USDI_Price', 'USDI_Open', 'USDI_High',\n       'USDI_Low', 'USDI_Volume', 'USDI_Trend', 'GDX_Open', 'GDX_High',\n       'GDX_Low', 'GDX_Close', 'GDX_Adj Close', 'GDX_Volume', 'USO_Open',\n       ]\nfeature_keys = ['RHO_PRICE', 'USDI_Price', 'USDI_Open', 'USDI_High',\n       'USDI_Low', 'USDI_Volume', 'USDI_Trend', 'GDX_Open', 'GDX_High',\n       'GDX_Low', 'GDX_Close', 'GDX_Adj Close', 'GDX_Volume', 'USO_Open',\n       ]\nshow_raw_visualization(df)","db8555d9":"titles = ['USO_High', 'USO_Low', 'USO_Close', 'USO_Adj Close', 'USO_Volume']\nfeature_keys = ['USO_High', 'USO_Low', 'USO_Close', 'USO_Adj Close', 'USO_Volume']\n\ndef show_raw_visualization_small(data):\n    time_data = data[date_time_key]\n    fig, axes = plt.subplots(\n        nrows=3, ncols=2, figsize=(15, 20), dpi=80, facecolor=\"w\", edgecolor=\"k\"\n    )\n    for i in range(len(feature_keys)):\n        key = feature_keys[i]\n        c = colors[i % (len(colors))]\n        t_data = data[key]\n        t_data.index = time_data\n        t_data.head()\n        ax = t_data.plot(\n            ax=axes[i \/\/ 2, i % 2],\n            color=c,\n            title=\"{} - {}\".format(titles[i], key),\n            rot=25,\n        )\n        ax.legend([titles[i]])\n    plt.tight_layout()\n\n\nshow_raw_visualization_small(df)\n","2e8b7773":"from sklearn.model_selection import TimeSeriesSplit\n\ntss = TimeSeriesSplit(n_splits = 6)\nX = df2.drop(['Adj Close'], axis = 1)\ny = df2['Adj Close']","c3224a4a":"for train_index, test_index in tss.split(X):\n    X_train, X_test = X.iloc[train_index, :], X.iloc[test_index,:]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]","2e31072d":"from lightgbm import LGBMRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedKFold\n\nmodel = LGBMRegressor()\ncv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)","801ca6f4":"n_scores = cross_val_score(model, X_train, y_train, scoring='neg_mean_absolute_error', cv=cv, n_jobs=-1, error_score='raise')\n\nfrom numpy import mean\nfrom numpy import std\nprint('Negative MAE: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))","85980305":"model.fit(X_train, y_train)\ny_pred= model.predict(X_test)\nfrom sklearn.metrics import mean_absolute_error\nprint(\"The Mean Absolute error is: \", mean_absolute_error(y_test, y_pred))","938bddbf":"model.score(X_test, y_test)","c858d97d":"model.score(X_train, y_train)","a56f3c6a":"result = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\nresult","3232d252":"result_plot = result.head(30)\nresult_plot.plot(kind='bar',figsize=(16,10))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","2ffb42b6":"![](https:\/\/akm-img-a-in.tosshub.com\/indiatoday\/images\/story\/201406\/gold_650_062314010808.jpg)","45de5742":"# Above 99% accuracy in both train and test sets.","490f7121":"![](https:\/\/images.thequint.com\/thequint%2F2015-06%2F1fe68d04-efa1-4d3d-a442-903794d05fdb%2Fgold.jpg?rect=0%2C0%2C1920%2C1080)","d3115956":"# Upvote if you like it or fork it :)","260238ab":"# Time Series Split","81a509e5":"# Data Preparation","1044946c":"# Plot of actual vs Predicted","5a97ad77":"![](https:\/\/images.thequint.com\/thequint%2F2017-12%2Ff601a20f-6ae8-4c6a-a65b-4ddce846c017%2Fb9c83fef-a0b4-4242-9a86-6e2f4e559987.jpg?rect=0%2C0%2C724%2C407&auto=format%2Ccompress&fmt=webp)","ffe82992":"![](https:\/\/bsmedia.business-standard.com\/_media\/bs\/img\/article\/2020-02\/14\/full\/1581679047-732.png)","4e68e6ff":"![](https:\/\/c4.wallpaperflare.com\/wallpaper\/854\/202\/576\/gold-diamond-coins-hd-wallpaper-thumb.jpg)","5f7354c8":"# LGBM Regressor with Repeated stratified K fold","052d382e":"# Visualisations of all columns","b4289d12":"![](https:\/\/assets-news-bcdn.dailyhunt.in\/cmd\/resize\/400x400_80\/fetchdata16\/images\/7d\/e7\/18\/7de718f6ae8a39d21cdc6b18caa8cfcc9ce1f6fa7fd9ca84937298c4da460fd8.jpg)"}}