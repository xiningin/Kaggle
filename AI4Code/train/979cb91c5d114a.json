{"cell_type":{"914c2ab0":"code","cc1ef02f":"code","e65a153e":"code","f147b004":"code","2bdd5d33":"code","5ccfd509":"code","9f676006":"code","57674a5d":"code","8a237556":"code","33547a99":"code","61806fd9":"code","4b27e73a":"code","f7a460ef":"code","d24f177d":"markdown","26ef8f6f":"markdown","61baae12":"markdown","734b31bb":"markdown","d6539cda":"markdown","8e601ca5":"markdown","5067430b":"markdown","0a450ee3":"markdown","d03d6985":"markdown","dd2ec1f7":"markdown","9a0c2aba":"markdown","358e3342":"markdown","297abd7e":"markdown","26ca875c":"markdown","3d95b8e1":"markdown"},"source":{"914c2ab0":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nfrom ipywidgets import interact, fixed\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.cluster import KMeans\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib import animation\nfrom matplotlib.animation import FFMpegWriter\npd.set_option('max_columns', 100)\n\nimport dateutil\nfrom math import radians\nfrom IPython.display import Video\n\nimport warnings\nwarnings.filterwarnings('ignore')","cc1ef02f":"plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\nweek1 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week1.csv')\nweek2 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week2.csv')\nweek5 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week5.csv')\nweek = pd.concat([week1, week2, week5], ignore_index=True)","e65a153e":"weekArray = np.array(week)\npreviousEvent = 'ball_snap'\nfor i, instance in enumerate(weekArray):\n    event = instance[8]\n    frameId = instance[13]\n    if (previousEvent == 'ball_snap' and event != 'ball_snap') or frameId == 1:\n        weekArray[i][8] = 'ball_snap'\n        previousEvent = 'ball_snap'\n    elif (event == 'ball_snap'):\n        previousEvent = 'between_snap'\n    elif (previousEvent == 'between_snap' and event != 'pass_forward'):\n        weekArray[i][8] = 'between_snap'\n        previousEvent = 'between_snap'\n    elif (event == 'pass_forward'):\n        weekArray[i][8] = 'after_thrown'\n        previousEvent = 'after_thrown'\n    elif (previousEvent == 'after_thrown' and frameId != 1):\n        weekArray[i][8] = 'after_thrown'\n        previousEvent = 'after_thrown'\n        \nweekMod = pd.DataFrame(weekArray, columns=week.columns)\nweek['event'] = weekMod['event']\nweekMod = week","f147b004":"varX = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['x'].agg(['var']).reset_index().rename(columns={\"var\": \"varX\"})\nvarY = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['y'].agg(['var']).reset_index().rename(columns={\"var\": \"varY\"})\nvarS = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['s'].agg(['var']).reset_index().rename(columns={\"var\": \"varS\"})","2bdd5d33":"groupedWeek = weekMod.groupby(['gameId', 'playId', 'frameId'])\nplayerXY = {}\nfor name, group in groupedWeek:\n    playerXY[name] = []\n    for row in group.iterrows():\n        data = [row[1]['nflId'], row[1]['team'], row[1]['x'], row[1]['y'], row[1]['dir']]\n        playerXY[name].append(data)\n\nfeatures = list(weekMod.columns)\nweekArray = np.array(weekMod)\nminOppDist = []\nfor player in weekArray:\n    if player[features.index('team')] != 'football':\n        opponentPositions = playerXY[(player[features.index('gameId')], player[features.index('playId')], player[features.index('frameId')])]\n        distances = []\n        directions = []\n        opponents = []\n        xs = []\n        ys = []\n        for oppPos in opponentPositions: \n            if player[features.index('team')] != oppPos[1] and player[features.index('team')] != 'football' and oppPos[1] != 'football':\n                dx = (player[features.index('x')] - oppPos[2])**2\n                dy = (player[features.index('y')] - oppPos[3])**2\n                dist = np.sqrt(dx+dy)\n                distances.append(dist)\n                directions.append(oppPos[4])\n                opponents.append(oppPos[0])\n                xs.append(oppPos[2])\n                ys.append(oppPos[3])\n        minDist = min(distances)\n        closestOpponent = opponents[np.argmin(distances)]\n        opponentDir = directions[np.argmin(distances)]\n        opponentX = xs[np.argmin(distances)]\n        opponentY = ys[np.argmin(distances)]\n        summary = [player[features.index('gameId')], player[features.index('playId')], player[features.index('frameId')], player[features.index('nflId')], minDist, closestOpponent, opponentDir, opponentX, opponentY]\n        minOppDist.append(summary)\n        \nminOppDist = pd.DataFrame(minOppDist, columns=['gameId', 'playId', 'frameId', 'nflId', 'oppMinDist', 'closestOpp(nflId)', 'oppDir', 'oppX', 'oppY'])\nweekMod = pd.merge(weekMod, minOppDist, how='left', on=['gameId', 'frameId', 'playId', 'nflId'])\noppVar = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['oppMinDist'].agg(['var']).reset_index().rename(columns={\"var\": \"oppVar\"})\noppMean = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['oppMinDist'].agg(['mean']).reset_index().rename(columns={\"mean\": \"oppMean\"})","5ccfd509":"features = list(weekMod.columns)\nweekArray = np.array(weekMod)\nminMateDist = []\nfor player in weekArray:\n    if player[features.index('team')] != 'football':\n        matePositions = playerXY[(player[features.index('gameId')], player[features.index('playId')], player[features.index('frameId')])]\n        distances = []\n        mates = []\n        xs = []\n        ys = []\n        for matePos in matePositions: \n            if player[features.index('team')] == matePos[1] and player[features.index('nflId')] != matePos[0] and player[features.index('team')] != 'football' and matePos[1] != 'football':\n                dx = (player[features.index('x')] - matePos[2])**2\n                dy = (player[features.index('y')] - matePos[3])**2\n                dist = np.sqrt(dx+dy)\n                distances.append(dist)\n                mates.append(matePos[0])\n                xs.append(oppPos[2])\n                ys.append(oppPos[3])\n        minDist = min(distances)\n        closestMate = mates[np.argmin(distances)]\n        mateX = xs[np.argmin(distances)]\n        mateY = ys[np.argmin(distances)]\n        summary = [player[features.index('gameId')], player[features.index('playId')], player[features.index('frameId')], player[features.index('nflId')], minDist, closestMate, mateX, mateY]\n        minMateDist.append(summary)\n        \nminMateDist = pd.DataFrame(minMateDist, columns=['gameId', 'playId', 'frameId', 'nflId', 'mateMinDist', 'closestMate(nflId)', 'mateX', 'mateY'])\nweekMod = pd.merge(weekMod, minMateDist, how='left', on=['gameId', 'frameId', 'playId', 'nflId'])\nmateVar = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['mateMinDist'].agg(['var']).reset_index().rename(columns={\"var\": \"mateVar\"})\nmateMean = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['mateMinDist'].agg(['mean']).reset_index().rename(columns={\"mean\": \"mateMean\"})","9f676006":"diffDir = np.absolute(weekMod['dir'] - weekMod['oppDir'])\nweekMod['diffDir'] = diffDir\noppDirVar = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['diffDir'].agg(['var']).reset_index().rename(columns={\"var\": \"oppDirVar\"})\noppDirMean = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['diffDir'].agg(['mean']).reset_index().rename(columns={\"mean\": \"oppDirMean\"})","57674a5d":"ratio = weekMod['oppMinDist'] \/ np.sqrt((weekMod['oppX'] - weekMod['mateX'])**2 + (weekMod['oppY'] - weekMod['mateY'])**2)\nweekMod['oppMateDistRatio'] = ratio\noppMateDistRatioMean = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['oppMateDistRatio'].agg(['mean']).reset_index().rename(columns={\"mean\": \"meanOppMateDistRatio\"})\noppMateDistRatioVar = weekMod.groupby(['gameId', 'playId', 'event', 'nflId'])['oppMateDistRatio'].agg(['var']).reset_index().rename(columns={\"var\": \"varOppMateDistRatio\"})","8a237556":"features = [varX, varY, varS, oppVar, oppMean, mateVar, mateMean, oppDirVar, oppDirMean, oppMateDistRatioMean, oppMateDistRatioVar]\nfor feature in features:\n    weekMod = pd.merge(weekMod, feature, how='left', on=['gameId', 'event', 'playId', 'nflId'])","33547a99":"# Set the train dataset\nX = weekMod.loc[weekMod['position'] == 'CB'][weekMod.columns[30:]].dropna()\nxTrain = X.drop_duplicates()\n\n# Scale the data\nscaler = MinMaxScaler()\nscaler.fit(xTrain)\nxTrainScaled = scaler.transform(xTrain)\n\n# Set and train the Gaussian mixture model\ngmm = GaussianMixture(n_components=2, covariance_type='full', random_state=42)\ngmm.fit(xTrainScaled)\n\n# Make class prediction and probability estimation\npred = gmm.predict(X)\nprob = gmm.predict_proba(X)\n\n# Join the class prediction and probability estimation into our main dataframe\nX['cluster'] = pred\nX['cluster_prob'] = prob[:,0]\nweekFin = weekMod.join(X[['cluster', 'cluster_prob']])","61806fd9":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=55,\n                          highlight_first_down_line=False,\n                          yards_to_go=10,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        #plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n        #         color='yellow')\n        \n    if highlight_first_down_line:\n        fl = hl + yards_to_go\n        plt.plot([fl, fl], [0, 53.3], color='yellow')\n        #plt.text(fl + 2, 50, '<- {}'.format(highlighted_name),\n        #         color='yellow')\n    return fig, ax","4b27e73a":"def calculate_dx_dy_arrow(x, y, angle, speed, multiplier):\n    if angle <= 90:\n        angle = angle\n        dx = np.sin(radians(angle)) * multiplier * speed\n        dy = np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    if angle > 90 and angle <= 180:\n        angle = angle - 90\n        dx = np.sin(radians(angle)) * multiplier * speed\n        dy = -np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    if angle > 180 and angle <= 270:\n        angle = angle - 180\n        dx = -(np.sin(radians(angle)) * multiplier * speed)\n        dy = -(np.cos(radians(angle)) * multiplier * speed)\n        return dx, dy\n    if angle > 270 and angle <= 360:\n        angle = 360 - angle\n        dx = -np.sin(radians(angle)) * multiplier * speed\n        dy = np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    \n        \ndef animate_player_movement(weekData, playId, gameId):\n    playData = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\n    \n    playHome = weekData.query('gameId==' + str(gameId) + ' and playId==' + str(playId) + ' and team == \"home\"')\n    playAway = weekData.query('gameId==' + str(gameId) + ' and playId==' + str(playId) + ' and team == \"away\"')\n    playFootball = weekData.query('gameId==' + str(gameId) + ' and playId==' + str(playId) + ' and team == \"football\"')\n    \n    playHome['time'] = playHome['time'].apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    playAway['time'] = playAway['time'].apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    playFootball['time'] = playFootball['time'].apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    \n    maxTime = int(playAway['time'].unique().max())\n    minTime = int(playAway['time'].unique().min())\n    \n    yardlineNumber = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['yardlineNumber'].item()\n    yardsToGo = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['yardsToGo'].item()\n    absoluteYardlineNumber = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['absoluteYardlineNumber'].item() - 10\n    playDir = playHome.sample(1)['playDirection'].item()\n    \n    if (absoluteYardlineNumber > 50):\n        yardlineNumber = 100 - yardlineNumber\n    if (absoluteYardlineNumber <= 50):\n        yardlineNumber = yardlineNumber\n        \n    if (playDir == 'left'):\n        yardsToGo = -yardsToGo\n    else:\n        yardsToGo = yardsToGo\n    \n    fig, ax = create_football_field(highlight_line=True, highlight_line_number=yardlineNumber, highlight_first_down_line=True, yards_to_go=yardsToGo)\n    playDesc = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['playDescription'].item()\n    plt.title(f'Game # {gameId} Play # {playId} \\n {playDesc}')\n    \n    def update_animation(time):\n        patch = []\n        \n        homeX = playHome.query('time == ' + str(time))['x']\n        homeY = playHome.query('time == ' + str(time))['y']\n        homeNum = playHome.query('time == ' + str(time))['jerseyNumber']\n        homeOrient = playHome.query('time == ' + str(time))['o']\n        homeDir = playHome.query('time == ' + str(time))['dir']\n        homeSpeed = playHome.query('time == ' + str(time))['s']\n        homePosition = playHome.query('time == ' + str(time))['position']\n        homeCluster = playHome.query('time == ' + str(time))['cluster']\n        homeClusterProb = playHome.query('time == ' + str(time))['cluster_prob']\n        patch.extend(plt.plot(homeX, homeY, 'o',c='gold', ms=20, mec='white', zorder=3))\n        \n        # Home players' jersey number \n        for x, y, num in zip(homeX, homeY, homeNum):\n            patch.append(plt.text(x, y, int(num), va='center', ha='center', color='black', size='medium'))\n            \n        # Home players' orientation\n        for x, y, orient in zip(homeX, homeY, homeOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='gold', width=0.5, shape='full'))\n            \n        # Home players' direction\n        for x, y, direction, speed in zip(homeX, homeY, homeDir, homeSpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='black', width=0.25, shape='full'))\n        \n        # CB coverage scheme\n        for x, y, pos, cluster, prob in zip(homeX, homeY, homePosition, homeCluster, homeClusterProb):\n            if pos == 'CB':\n                patch.append(plt.text(x, y-6, \"P(zone)={}\\nP(man)={}\".format(prob, 1-prob), va='bottom', ha='center', color='black', size='small',zorder=2, bbox=dict(facecolor='gold', edgecolor='white', pad=2.0)))\n        \n        awayX = playAway.query('time == ' + str(time))['x']\n        awayY = playAway.query('time == ' + str(time))['y']\n        awayNum = playAway.query('time == ' + str(time))['jerseyNumber']\n        awayOrient = playAway.query('time == ' + str(time))['o']\n        awayDir = playAway.query('time == ' + str(time))['dir']\n        awaySpeed = playAway.query('time == ' + str(time))['s']\n        awayPosition = playAway.query('time == ' + str(time))['position']\n        awayCluster = playAway.query('time == ' + str(time))['cluster']\n        awayClusterProb = playAway.query('time == ' + str(time))['cluster_prob']\n        patch.extend(plt.plot(awayX, awayY, 'o',c='orangered', ms=20, mec='white', zorder=3))\n        \n        # Away players' jersey number \n        for x, y, num in zip(awayX, awayY, awayNum):\n            patch.append(plt.text(x, y, int(num), va='center', ha='center', color='white', size='medium'))\n            \n        # Away players' orientation\n        for x, y, orient in zip(awayX, awayY, awayOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='orangered', width=0.5, shape='full'))\n        \n        # Away players' direction\n        for x, y, direction, speed in zip(awayX, awayY, awayDir, awaySpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='black', width=0.25, shape='full'))\n        \n        # CB coverage scheme\n        for x, y, pos, cluster, prob in zip(awayX, awayY, awayPosition, awayCluster, awayClusterProb):\n            if pos == 'CB':\n                patch.append(plt.text(x, y-6, \"P(zone)={}\\nP(man)={}\".format(prob, 1-prob), va='bottom', ha='center', color='white', size='small', zorder=2, bbox=dict(facecolor='orangered', edgecolor='white', pad=2.0)))\n        \n        # Football location\n        footballX = playFootball.query('time == ' + str(time))['x']\n        footballY = playFootball.query('time == ' + str(time))['y']\n        patch.extend(plt.plot(footballX, footballY, 'o', c='black', ms=10, mec='white', zorder=3, data=playFootball.query('time == ' + str(time))['team']))\n        \n        \n        return patch\n    \n    ims = [[]]\n    for time in np.arange(minTime, maxTime+1):\n        patch = update_animation(time)\n        ims.append(patch)\n        \n    anim = animation.ArtistAnimation(fig, ims, repeat=False)\n    \n    return anim","f7a460ef":"anim = animate_player_movement(weekFin, 75, 2018090600)\nwriter = FFMpegWriter(fps=10)\nanim.save('animation_notrail.mp4', writer=writer)\nVideo(\"animation_notrail.mp4\")","d24f177d":"# 2.0. Features Generation\nIn the paper, there are 11 features that can be estimated at different points throughout the play that characterize the type of coverage scheme:\n- `varX`: Variance in the x coordinate\n- `varY`: Variance in the y coordinate\n- `varS`: Variance in the speed\n- `offVar`: Variance in the distance from the nearest offensive player at every frame\n- `defVar`: Variance in the distance from the nearest defensive player at every frame\n- `offMean`: Mean distance from the nearest offensive player at every frame\n- `defMean`: Mean distance from the nearest defensive player at every frame\n- `offDirVar`: Variance in the difference in de- grees of the direction of motion between the player and the nearest offensive player\n- `offDirMean`: Mean difference in degrees of the direction of motion between the player and the nearest offensive player\n- `ratMean`: Mean ratio of the distance to the nearest offensive player and the distance from the nearest offensive player to the nearest defensive player\n- `ratVar`: Variance of the ratio of the distance to the nearest offensive player and the distance from the nearest offensive player to the nearest defensive player\n\nThese features are specific for defensive backs. But, I'll generate features for all players (defensive and offensive) to use for further analysis. So, a bit of generalization is required to do that. For instance, `offVar` is basically the variance in the distance from the nearest opponent player and `defVar` is the variance in the distance from the nearest team mate. So, I change the name of some features a little bit:\n- `varX`: Variance in the x coordinate\n- `varY`: Variance in the y coordinate\n- `varS`: Variance in the speed\n- `oppVar`: Variance in the distance from the nearest opponent player at every frame\n- `mateVar`: Variance in the distance from the nearest team mate at every frame\n- `oppMean`: Mean distance from the nearest opponent player at every frame\n- `mateMean`: Mean distance from the nearest team mate at every frame\n- `oppDirVar`: Variance in the difference in degrees of the direction of motion between the player and the nearest opponent player\n- `oppDirMean`: Mean difference in degrees of the direction of motion between the player and the nearest opponent player\n- `ratMean`: Mean ratio of the distance to the nearest opponent player and the distance from the nearest opponent player to the nearest team mate\n- `ratVar`: Variance of the ratio of the distance to the nearest opponent player and the distance from the nearest opponent player to the nearest team mate","26ef8f6f":"## 2.5. Mean and variance ratio of the distance to the nearest opponent player and the distance from the nearest opponent player to the nearest team mate","61baae12":"Let's visualize one of the play.","734b31bb":"## 2.3. Mean and variance distance from the nearest team mate","d6539cda":"# 3.0. Visualization\nWe visualize the coverage scheme of cornerbacks to see the results of our coverage scheme prediction. The visualization is based on:\n* kernel created by Rob Mulia (@robikscube, see the kernel [here](https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position))\n* kernel created by me (see the kernel [here](https:\/\/www.kaggle.com\/ar2017\/nfl-big-data-bowl-2021-animating-players-movement))","8e601ca5":"## 2.4. Mean and variance difference in degrees of the direction of motion between the player and the nearest opponent player","5067430b":"# Identifying Coverage Scheme Among Defensive Backs\nIn this notebook, I implement the method to identify coverage scheme (man or zone) based on the paper *\"Unsupervised Methods for Identifying Pass Coverage Among Defensive Backs with NFL Player Tracking Data\"*. The main contribution of the paper is to define a set of features from the tracking data that distinguish between \"man\" and \"zone\" coverage of defensive backs using unsupervised learning techniques. \n\nThe method can simply be described as follow:\n1. **Feature Generation**: Define a set of features from the tracking data that distinguish between \"man\" and \"zone\" coverage.\n2. **Clustering**: Use mixture models to create clusters corresponding to each group, allowing us to provide probabilistic assignments to each coverage type (or cluster).\n\nOur focus is to analyze the coverage scheme of cornerbacks. Generally, cornerbacks are more adept at providing close coverage on wide receivers and defending passes.The position requires speed and agility, and the ability to track a receiver (in man coverage) or occupy a space and read the quarterback (in zone coverage).\n\nPLEASE UPVOTE if you like this kernel. It will keep me motivated to post more kernel :).","0a450ee3":"# 1.0. Dataset Preparation","d03d6985":"## 2.1. Variance in the (x,y) coordinate and speed","dd2ec1f7":"I use week 1, week 2, and week 5 tracking data. More data can be added if needed.","9a0c2aba":"# 2.0. Clustering\nWe use Gaussian mixture model, a type of clustering algorithm that fits a mixture of probability density functions to a dataset, where each density is representative of a single group or cluster. There are two key benefits to using mixture models: \n1. Mixture models yield \u201csoft\u201d cluster assignments (i.e. probabilistic labels for each cluster), allowing us to quantify how certain we are when assigning man coverage or zone coverage labels. \n2. Mixture models are density-based, statistical models that estimate a empirical probability distribution from real data.\n\nTherefore, we can use our mixture model to make man vs. zone predictions for each defensive back on each play in real-time throughout the course of a football game.\n\nDue to the high degree of colinearity in the feature space, we use an unconstrained \u201cVVV\u201d covariance structure (\"full\") when fitting the model. ","358e3342":"## 2.2. Mean and variance distance from the nearest opponent player","297abd7e":"# 4.0. Opportunities for Improvement\nThe paper uses NFL 2019 Big Data Bowl dataset, which does not have player orientation information. The paper identifies two features involving the players\u2019 orientations on the field that may help distinguish man vs. zone coverage:\n1. Orientation of the defensive back relative to the line of scrimmage at different points throughout the play.\n2. Orientation of the cornerback relative to the corresponding offensive player at different points throughout the play.\n\nI will update this kernel to include these two features because our the 2021 dataset has information about players' orientation.\n\n\nThe framework can be used to analyze the coverage types of safeties and, when appropriate, linebackers. However, a complete analysis of these positions would require the design of new features specific to the safety position and the patterns of motion of safeties in relation to their teammates and opponents.","26ca875c":"In the paper, the features are estimated at different point throughout the play that corresponds to on-field events. These times periods are:\n* Before snap\n* Between snap and ball thrown\n* After ball thrown\n\nThis kernel will use the same approach. Thus, we will make adjustment to our dataset to reflect this by modifying the `event` variable in the dataset.","3d95b8e1":"Then, we combine all of the generated features into our main dataframe `weekMod`."}}