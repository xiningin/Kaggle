{"cell_type":{"8f0cb5ab":"code","41802530":"code","0a2e74dd":"code","d5f99f89":"code","a3adc37e":"code","8f8c956c":"code","9d627996":"code","98c62aa4":"code","fa88f8a1":"code","4487931c":"code","9b541b2e":"code","aae80252":"code","ada8fe30":"code","baa58912":"code","f2993797":"code","d5575d7f":"code","5913a5bf":"code","54b0bad5":"code","dd6b7515":"code","5922443d":"code","b81c3090":"code","625f37c2":"code","9b539e22":"code","0341d9f6":"code","b3dc788e":"code","29ba71f0":"code","d38c1642":"code","bae2d2ff":"code","6cd37bb6":"code","2587959d":"code","b96bc48f":"code","6b00e52d":"code","cea596ad":"code","db2670e9":"code","80ce8553":"code","d6500b78":"code","aaaea780":"code","0f488ce3":"code","106ee36d":"code","f1766be7":"code","b218b8e8":"code","d265f387":"code","9f9fc6cb":"code","2c1fc81f":"code","8d869bb1":"code","54a15d74":"code","ef3f5ae7":"code","85cdbd3c":"code","42114225":"code","166c9c1b":"code","68e7b62d":"code","fecc44ac":"code","a5aa41e9":"code","9242eed6":"code","bf38852e":"code","814e6242":"code","21269ccc":"code","0d3e0c91":"code","874601af":"code","671b7006":"code","2418b5a3":"code","3877fa30":"code","7f5b66a8":"code","b36cf920":"code","0133d0b7":"code","5a944d2b":"code","cab0c6ab":"code","2d6fb0ba":"code","1242eb34":"code","ba87e6cf":"code","c79761a6":"code","5cc221ce":"code","34c441dc":"code","c90e395a":"code","d581ccff":"code","ba631257":"code","8f39eb21":"code","bfec47db":"code","9772c828":"code","f5232280":"code","264df0d0":"code","f3ba83b5":"code","55dd06d9":"code","04547e15":"code","33df843a":"code","eb1a5938":"code","3f22e36b":"code","5b4139ef":"markdown","ac81a7ca":"markdown","67ac73b8":"markdown","bd5de4cc":"markdown","6ebce87d":"markdown","eec7bdc5":"markdown","27813096":"markdown","46af4cf8":"markdown","45396c4e":"markdown","c42e1977":"markdown","92571a15":"markdown","4f4f899b":"markdown","be182827":"markdown","1d87da2d":"markdown","010eedb9":"markdown","fa91a53c":"markdown","d06484cb":"markdown","0d56fcf6":"markdown","aed494e1":"markdown","ef2aa43b":"markdown","6c5a4db3":"markdown","db48c951":"markdown","f4b92768":"markdown","d4b49b77":"markdown","244a70c9":"markdown","ba3f8fb4":"markdown","73b93a5f":"markdown","d407a28a":"markdown","59fc5817":"markdown","a590d4b2":"markdown","1a156d6a":"markdown","3c96cfaf":"markdown","c0788781":"markdown","f7ada32e":"markdown","2601fdfb":"markdown"},"source":{"8f0cb5ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41802530":"# import all packages and set plots to be embedded inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline \nplt.style.use('fivethirtyeight')","0a2e74dd":"df = pd.read_csv(r'\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv')","d5f99f89":"df.head(10)","a3adc37e":"df.shape","8f8c956c":"df.info()","9d627996":"#statistical summary about the data\ndf.describe()","98c62aa4":"#check for missing data\ndf.isnull().sum()","fa88f8a1":"#delete missing record\ndf.dropna(inplace=True)","4487931c":"df.isnull().sum()","9b541b2e":"#check for duplicates\ndf.duplicated().sum()","aae80252":"#showing the columns name and position\nfor i,col in enumerate(df.columns):\n    print(i,col)","ada8fe30":"plt.figure(figsize=(22,10))\nsns.distplot(df.assists,bins=80,kde=False)\nplt.show()","baa58912":"plt.figure(figsize=(22,10))\nsns.distplot(df.boosts,bins=80,kde=False,color='#0000A0')\nplt.show()","f2993797":"plt.figure(figsize=(22,10))\nsns.distplot(df.damageDealt,bins=80,kde=False,color='#800080')\nplt.show()","d5575d7f":"g = pd.cut(df['DBNOs'],[-1,0,1,2,3,4,np.inf],labels=['0','1','2','3','4','+5']).value_counts()\n\n#initializing plot\nax = g.plot.barh(color = '#007482', fontsize = 15)\n\n#giving a title\nax.set(title = 'The Most Common Number of Knocks')\n\n#x-label\nax.set_ylabel('Number of knocks', color = 'g', fontsize = '18')\n\n#giving the figure size(width, height)\nax.figure.set_size_inches(22, 12)\n\n#shwoing the plot\nplt.show()","5913a5bf":"g = pd.cut(df['headshotKills'],[-1,0,1,2,3,4,np.inf],labels=['0','1','2','3','4','+5']).value_counts()\n\n#initializing plot\nax = g.plot.bar(color = '#800080', fontsize = 15)\n\n#giving a title\nax.set(title = 'The Most Common Number of Headshots')\n\n#x-label\nax.set_ylabel('Number of Headshots', color = 'g', fontsize = '18')\n\n#giving the figure size(width, height)\nax.figure.set_size_inches(22, 12)\n\n#shwoing the plot\nplt.show()","54b0bad5":"g = pd.cut(df['heals'],[-1,0,1,2,3,4,np.inf],labels=['0','1','2','3','4','+5']).value_counts()\n\n#initializing plot\nax = g.plot.bar(color = '#FF00FF', fontsize = 15)\n\n#giving a title\nax.set(title = 'The Most Common Number of Heals')\n\n#x-label\nax.set_ylabel('Number of Heals', color = 'g', fontsize = '18')\n\n#giving the figure size(width, height)\nax.figure.set_size_inches(22, 12)\n\n#shwoing the plot\nplt.show()","dd6b7515":"g = pd.cut(df['killPlace'],[-1,1,3,6,10,np.inf],labels=['1','2-3','4-6','7-10','+10']).value_counts()\n\n#initializing plot\nax = g.plot.barh(color = '#808080', fontsize = 15)\n\n#giving a title\nax.set(title = 'The Most Common Number of killplace')\n\n#x-label\nax.set_ylabel('Number of killplace', color = 'g', fontsize = '18')\n\n#giving the figure size(width, height)\nax.figure.set_size_inches(22, 12)\n\n#shwoing the plot\nplt.show()","5922443d":"plt.figure(figsize=(22,10))\nsns.distplot(df.killPoints,bins=80,kde=False,color='#FF00FF')\nplt.show()","b81c3090":"g = pd.cut(df['kills'],[0,1,3,6,10,np.inf],labels=['0-1','2-3','4-6','7-10','+10']).value_counts()\n\n#initializing plot\nax = g.plot.barh(color = '#FFA500', fontsize = 15)\n\n#giving a title\nax.set(title = 'The Most Common Number of Kills')\n\n#x-label\nax.set_ylabel('Number of Kills', color = 'g', fontsize = '18')\n\n#giving the figure size(width, height)\nax.figure.set_size_inches(22, 12)\n\n#shwoing the plot\nplt.show()","625f37c2":"plt.figure(figsize=(22,10))\nsns.distplot(df.matchDuration,bins=80,kde=False,color='#808000')\nplt.show()","9b539e22":"plt.figure(figsize=(22,10))\nlabel=df.matchType.value_counts().index\nplt.pie(df.matchType.value_counts(),explode=[0.1]*len(label),labels=label,autopct='%.1f%%',shadow=True)\nplt.axis('equal')\nplt.title('User Type')\nplt.show()","0341d9f6":"plt.figure(figsize=(22,10))\nsns.distplot(df.rankPoints,bins=80,kde=False,color='#000080')\nplt.show()","b3dc788e":"g = pd.cut(df['revives'],[-1,0,1,3,6,10,np.inf],labels=['0','1','2-30','4-6','7-10','+10']).value_counts()\n\n#initializing plot\nax = g.plot.barh(color = '#00806A', fontsize = 15)\n\n#giving a title\nax.set(title = 'The Most Common Number of Revives')\n\n#x-label\nax.set_ylabel('Number of Revives', color = 'g', fontsize = '18')\n\n#giving the figure size(width, height)\nax.figure.set_size_inches(22, 12)\n\n#shwoing the plot\nplt.show()","29ba71f0":"plt.figure(figsize=(22,10))\nsns.distplot(df.rideDistance,bins=80,kde=False,color='#00806A')\nplt.show()","d38c1642":"plt.figure(figsize=(22,10))\nsns.distplot(df.swimDistance,bins=80,kde=False,color='#158000')\nplt.show()","bae2d2ff":"plt.figure(figsize=(22,10))\nsns.distplot(df.walkDistance,bins=80,kde=False,color='#006A80')\nplt.show()","6cd37bb6":"plt.figure(figsize=(22,10))\nsns.distplot(df.winPlacePerc,bins=80,kde=False,color='#3CA6BC')\nplt.show()","2587959d":"plt.figure(figsize=(22,10))\nsns.scatterplot(x=df['winPlacePerc'],y=df['kills'])\nplt.show()","b96bc48f":"plt.figure(figsize=(22,10))\nsns.scatterplot(x=df['winPlacePerc'],y=df['walkDistance'])\nplt.show()","6b00e52d":"plt.figure(figsize=(22,10))\nsns.scatterplot(x=\"winPlacePerc\", y=\"boosts\", data=df)\nplt.show()","cea596ad":"plt.figure(figsize =(20,10))\nsns.pointplot(x='vehicleDestroys',y='winPlacePerc',data=df,color='#606060',alpha=0.8)\nplt.xlabel('Number of Vehicle Destroys',fontsize = 15,color='blue')\nplt.ylabel('Win Percentage',fontsize = 15,color='blue')\nplt.title('Vehicle Destroys\/ Win Ratio',fontsize = 20,color='blue')\nplt.show()","db2670e9":"df.matchType=df.matchType.astype('category').cat.codes\nplt.figure(figsize=(22, 15))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f')\nplt.show()","80ce8553":"#delete string columns ('Id','groupId','matchId')\n#delete columns that had low correlation with winplaceperc ('Id','groupId','matchId')\ndf.drop(['Id','groupId','matchId','rankPoints','roadKills','vehicleDestroys'],axis=1,inplace=True)","d6500b78":"#drop outliers from the data\nfor col in df.columns:\n    df1=df[col]\n    Q1 = df1.quantile(0.01)\n    Q3 = df1.quantile(0.99)\n    IQR = Q3-Q1\n    minimum = Q1 - 1.5*IQR\n    maximum = Q3 + 1.5*IQR\n    condition = (df1 <= maximum) & (df1 >= minimum)\n    df=df[condition]","aaaea780":"#shape of data after deleting outliers\ndf.shape","0f488ce3":"#split the data\nX=df.drop(['winPlacePerc'],axis=1)\ny=df['winPlacePerc']","106ee36d":"from sklearn.feature_selection import f_regression\nfrom sklearn.feature_selection import SelectKBest","f1766be7":"best_feature = SelectKBest(score_func=f_regression,k='all')\nfit = best_feature.fit(X,y)","b218b8e8":"dfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Feature','Score']\nfeatureScores = featureScores.sort_values(by='Score',ascending=False).reset_index(drop=True)\n\nfeatureScores","d265f387":"#select the best 15 feature\nX= X[featureScores.Feature[:15].values]","9f9fc6cb":"from sklearn.preprocessing import StandardScaler\ncols = X.columns\nscaler = StandardScaler()\nX=scaler.fit_transform(X)\nX=pd.DataFrame(X,columns=cols)","2c1fc81f":"from sklearn.model_selection import train_test_split","8d869bb1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10,random_state=42)","54a15d74":"from sklearn.model_selection import cross_val_score","ef3f5ae7":"from sklearn.linear_model import LinearRegression","85cdbd3c":"reg = LinearRegression()","42114225":"model_reg = cross_val_score(reg,X_train,y_train,cv=3,scoring='neg_mean_squared_error')","166c9c1b":"-model_reg","68e7b62d":"from sklearn.model_selection import GridSearchCV","fecc44ac":"param_grid={'fit_intercept':[True,False],'normalize':[True,False]}","a5aa41e9":"grid= GridSearchCV(reg,param_grid,cv=3,scoring='neg_mean_squared_error')","9242eed6":"grid.fit(X_train,y_train)","bf38852e":"grid.best_estimator_","814e6242":"-grid.best_score_","21269ccc":"from sklearn.linear_model import Lasso","0d3e0c91":"lasso=Lasso()","874601af":"model_lasso = cross_val_score(lasso,X_train,y_train,cv=3,scoring='neg_mean_squared_error')","671b7006":"-model_lasso","2418b5a3":"from sklearn.linear_model import ElasticNet","3877fa30":"elastic=ElasticNet()","7f5b66a8":"model_elastic = cross_val_score(elastic,X_train,y_train,cv=3,scoring='neg_mean_squared_error')","b36cf920":"-model_elastic","0133d0b7":"from sklearn.tree import DecisionTreeRegressor","5a944d2b":"tree = DecisionTreeRegressor()","cab0c6ab":"model_tree = cross_val_score(tree,X_train,y_train,cv=3,scoring='neg_mean_squared_error')","2d6fb0ba":"- model_tree","1242eb34":"from sklearn.ensemble import VotingRegressor","ba87e6cf":"reg=LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=True)\ntree=DecisionTreeRegressor()\nregressor=[('Linear Regression', reg), ('decision Tree', tree)]\n# i didn't use random forest in voting cause it took much time and i haven't now\ud83d\ude22\ud83d\ude22","c79761a6":"vc = VotingRegressor(estimators=regressor)","5cc221ce":"vc.fit(X_train,y_train)","34c441dc":"y_pred = vc.predict(X_test)","c90e395a":"from sklearn.metrics import r2_score,mean_squared_error","d581ccff":"mean_squared_error(y_test,y_pred)","ba631257":"r2_score(y_test,y_pred)","8f39eb21":"test = pd.read_csv(r'\/kaggle\/input\/pubg-finish-placement-prediction\/test_V2.csv')","bfec47db":"test.head()","9772c828":"test_pred=test.copy()","f5232280":"test_pred = test_pred[X.columns]","264df0d0":"test_pred=scaler.fit_transform(test_pred)\ntest_pred=pd.DataFrame(test_pred,columns=cols)","f3ba83b5":"prediction = vc.predict(test_pred)","55dd06d9":"test['winPlacePerc'] = prediction","04547e15":"sub = pd.read_csv(r'\/kaggle\/input\/pubg-finish-placement-prediction\/sample_submission_V2.csv')","33df843a":"sub['winPlacePerc'] = test['winPlacePerc']","eb1a5938":"sub","3f22e36b":"sub.to_csv('submission.csv',index=False)","5b4139ef":"***THE plot show that the player who finished the game in advanced places destroyed more vechicle than other players***","ac81a7ca":"***THE plot showing that most common killplace are above 10***","67ac73b8":"***THE plot showing that most common number of heals are zero***","bd5de4cc":"# Gathering Data","6ebce87d":"## Try Decision Tree Model","eec7bdc5":"## Try Linear Regression Model","27813096":"***The plot showing that most number of kills are between 0 and 1 and between 2 and 3***","46af4cf8":"***THE plot showing that most of rankpoints are 0 and there is too many between 1500 and 1700***","45396c4e":"# Assess Data","c42e1977":"***THE Disturbution shows that most of match took time from 1300s to 1450s and also between 1750s to 2000s***","92571a15":"## Try Elastic Net Model","4f4f899b":"## Finally using VotingRegressor Model","be182827":"***THE plot showing that most of players didn't get revives and they get killed after they get knocked***","1d87da2d":"***THE plot showing that almost all killpoints equal zero and few of them are from 1000 to 1500***","010eedb9":"***THE plot show that almost all players didn't swim too much and they tend to walk***","fa91a53c":"## Tuning Linear Regression Parameter","d06484cb":"***THE plots showing that most of players play in squad or duo while a few of them play a solo game***","0d56fcf6":"***The Disturbution of assists showing that almost all assists were under 5 assist and the most of assists are 0 which indicate that players tend to kill the enemies without a help from a friend***","aed494e1":"***The Disturbution of boosts showing that almost all boosts were under 10 boost and the most of boosts are 0 which indicate that players usally didn't use boosts***","ef2aa43b":"***THE plot show that the player who finished the game in advanced places walk more than other which is normal***","6c5a4db3":"# PUBG Finish Placement Prediction Project\n#### In this project we will be working with a Pubg finish placement data set, indicating the finishing placement of players. We will try to create a model that will predict finishing placement in future based of the features of the past placement.\n#### This data set contains the following features:\n\n> - DBNOs - Number of enemy players knocked.\n- assists - Number of enemy players this player damaged that were killed by teammates.\n- boosts - Number of boost items used.\n- damageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.\n- headshotKills - Number of enemy players killed with headshots.\n- heals - Number of healing items used.\n- Id - Player\u2019s Id\n- killPlace - Ranking in match of number of enemy players killed.\n- killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.\n- killStreaks - Max number of enemy players killed in a short amount of time.\n- kills - Number of enemy players killed.\n- longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.\n- matchDuration - Duration of match in seconds.\n- matchId - ID to identify match. There are no matches that are in both the training and testing set.\n- matchType - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.\n- rankPoints - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use with caution. Value of -1 takes place of \u201cNone\u201d.\n- revives - Number of times this player revived teammates.\n- rideDistance - Total distance traveled in vehicles measured in meters.\n- roadKills - Number of kills while in a vehicle.\n- swimDistance - Total distance traveled by swimming measured in meters.\n- teamKills - Number of times this player killed a teammate.\n- vehicleDestroys - Number of vehicles destroyed.\n- walkDistance - Total distance traveled on foot measured in meters.\n- weaponsAcquired - Number of weapons picked up.\n- winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.\n- groupId - ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n- numGroups - Number of groups we have data for in the match.\n- maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n- winPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.","db48c951":"## Scaling the data using StandardScaler","f4b92768":"***THE plot show that most of players didn't ride viechals too much and they tend to walk***","d4b49b77":"## Try Lasso Model","244a70c9":"***THE plot show that the player who finished the game in advanced places use boosts more than other which is normal***","ba3f8fb4":"***The Disturbution of damage dealta showing that almost all damage delta were under 1000  and the most of damage delta are 0 which indicate that players had been damaged as the damage enemies***","73b93a5f":"# Predict Testing Data","d407a28a":"***The plots showing that most common number of headshots are 0 and almost there is no headshots above 4 which indicate that players didn't tend to knock enemies by headshots***","59fc5817":"***THE plot show that most of players didn't walk too much and that cause they were killed after they down***","a590d4b2":"***THE plot showing that most number of knocks are 0 and a few number above 5***","1a156d6a":"## Split the data into train set and  test set","3c96cfaf":"***The plot showing that many of player finished the game in last places where a few of them finished it in the fisrt one***","c0788781":"***THE plot show that the player who finished the game in advanced places kill more people than other which is normal***","f7ada32e":"# EDA","2601fdfb":"## Feature Selection using SelectKbest with f_regression as score funcation"}}