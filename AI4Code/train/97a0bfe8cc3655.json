{"cell_type":{"709121e9":"code","df3bbc81":"code","a4c23144":"code","4b1df204":"code","392fb39e":"code","13113f19":"code","c8e16dac":"code","eeaceb4c":"code","a30cf48d":"code","28d6c92b":"code","36b5ac5f":"code","ca1ea1c9":"code","e47bdc31":"code","b5e79c13":"code","75542096":"code","78eee819":"code","4692d62a":"code","c70941b4":"code","3a1a8893":"code","cafeca7d":"code","04696347":"code","46898697":"code","988cf6de":"code","06d2906a":"code","37260e01":"code","52bf7720":"code","8b5bc71f":"code","71fc20cc":"code","926f4c42":"code","9bc3d91c":"code","ff3368cb":"code","045a8ef0":"code","8975b763":"code","60f6b823":"code","3f21775c":"code","6776ac75":"code","e1199172":"code","e4a055e2":"code","8fb3e159":"code","e83454bf":"code","22ae7924":"code","bc8e5c0f":"code","a9dd9521":"code","ea0ef22a":"code","c1f76015":"code","5da6e911":"code","088c012d":"code","1d7b01b2":"code","1109d37a":"code","6dc668a1":"code","2574e7a8":"code","661f9481":"code","2b6fc49d":"code","5a760204":"code","443cc1d8":"code","b6aa9fb7":"code","41e44980":"code","cf4789f2":"code","17182d9a":"code","9ed3f06f":"code","aa8df2ba":"code","3aab7126":"code","af0787c3":"code","159127e4":"code","6b8da02b":"code","c6983577":"code","098b33c6":"code","46bf3ba5":"code","830b8ab3":"code","86c27010":"code","8fe148e1":"code","d05dcb24":"code","f72d0c81":"code","aa3515a3":"code","8b7e0dd0":"code","3b627bdf":"code","c2c84d7b":"code","15c713b3":"code","d8de08dc":"code","e6d9f886":"code","9fe954c4":"code","30624007":"code","b91891d8":"code","fd06701d":"code","d12dc9f4":"code","fbf56c80":"code","468fccb7":"code","b724ee1e":"code","34b0b048":"code","dabcc4e4":"code","e3f505c5":"code","1aa381d7":"code","9ccfdfec":"code","eae5682f":"code","1c0b7a22":"code","c858c579":"code","1c4202db":"code","fe900f48":"code","2ddd7dbd":"code","0bd77e4b":"code","fd6696fa":"code","d3e1ecac":"code","92ed364d":"code","bb410664":"code","9f720e66":"code","7444c675":"code","059ff044":"code","18ca7cb4":"code","63ed6ed3":"code","7ac171c4":"code","6a63fb61":"code","a1e6a597":"code","252fcf7a":"code","b29a0890":"code","622bd64a":"code","2509880d":"code","8a4d98a0":"code","81992ed8":"code","6760295b":"code","1043d156":"code","3824c2bc":"code","b6daccdb":"code","5ea712b0":"code","8df96e31":"code","f860abab":"code","702f9af8":"code","2b7184e4":"code","3e6caf13":"code","f1a81c70":"code","dfba7f7e":"code","a1aa8552":"code","3320740e":"code","143e3bc6":"code","bb15b4bc":"markdown","41abece8":"markdown","4dbb4655":"markdown","22ffc37c":"markdown","167b6580":"markdown","6c9ded1d":"markdown","42e1d0d8":"markdown","560e756d":"markdown","a455694f":"markdown","9e256fc0":"markdown","55d334f0":"markdown","17d9c486":"markdown","86e94dea":"markdown","a5d728bf":"markdown","eaa89b67":"markdown","377ee83f":"markdown","ad980765":"markdown","0bf660e2":"markdown","61a6cba5":"markdown","74629215":"markdown","06f99b3b":"markdown","98fd71de":"markdown","4bdfab6c":"markdown","74f25321":"markdown","2df73ea7":"markdown","f03dc204":"markdown","b665d2e8":"markdown","996b99dc":"markdown","131c901d":"markdown","7152abc2":"markdown","223a1054":"markdown","c84a9e4b":"markdown","05334a83":"markdown","2290ab14":"markdown","9f640982":"markdown","2670e1a6":"markdown","0aa8f709":"markdown","80ca8b90":"markdown","688e97a0":"markdown"},"source":{"709121e9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport re \nimport math\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score","df3bbc81":"df=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf.drop(\"PassengerId\",axis=1,inplace=True)\nSubmission=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ndf.head()","a4c23144":"df.isnull().sum()","4b1df204":"df.info()","392fb39e":"data=df.groupby([\"Survived\",\"Sex\"]).agg(count=(\"Name\",\"count\")).reset_index()","13113f19":"print(\"Survive Count Based on Sex\")\nfg = sns.factorplot(x='Sex', y='count',\n                        col='Survived', data=data, kind='bar')\nfg.set_xlabels('')\n# fg.fig.suptitle(\"Survive Count Based on Sex\",fontsize=25)","c8e16dac":"data=df.groupby(\"Pclass\").agg(count=(\"Name\",\"count\")).reset_index()\ndata","eeaceb4c":"fg=sns.barplot(data=data,x=\"Pclass\",y=\"count\")\nfg.set_title(\"People Count per Pclass\")","a30cf48d":"data=df.groupby([\"Pclass\",\"Survived\"]).agg(Count=(\"Name\",\"count\")).reset_index()\ndata","28d6c92b":"print(\"Survived count with Respective Pclass\")\nfg = sns.factorplot(x='Survived', y='Count',\n                        hue='Pclass', data=data, kind='bar')\nfg.set_xlabels('')","36b5ac5f":"data=df.groupby([\"Pclass\",\"Sex\"]).agg(Count=(\"Name\",\"count\")).reset_index()\ndata","ca1ea1c9":"print(\"gender Count with Respective Pclass\")\nfg = sns.factorplot(x='Sex', y='Count',\n                        hue='Pclass', data=data, kind='bar')\nfg.set_xlabels('')","e47bdc31":"data=df.groupby(\"Pclass\").mean().drop([\"Survived\",\"Age\",\"SibSp\",\"Parch\"],axis=1).reset_index()\ndata","b5e79c13":"fg=sns.barplot(data=data,x=\"Pclass\",y=\"Fare\",palette=[\"Green\",\"Blue\",\"red\"])\nfg.set_title(\"Average Cost per Pclass\")","75542096":"data=df.groupby([\"Pclass\",\"Embarked\"]).agg(count=(\"Name\",\"count\")).reset_index()\nmapper={\"C\":\"Cherbourg\", \"Q\":\"Queenstown\", \"S\":\"Southampton\"}\ndata[\"Embarked\"].replace(mapper,inplace=True)\ndata","78eee819":"print(\"Passengers Embarked Count with Respect to Embarked and Pclass\")\nfg = sns.factorplot(x='Embarked', y='count',\n                        col='Pclass', data=data, kind='bar')\nfg.set_xlabels('')","4692d62a":"data=df.groupby([\"Pclass\"]).agg(Avg=(\"Age\",\"mean\")).reset_index()\ndata","c70941b4":"fg=sns.barplot(data=data,x=\"Pclass\",y=\"Avg\")\nfg.set_title(\"People Average Age per Pclass\")","3a1a8893":"df1=df.copy()\ndf1[\"title\"]=df1[\"Name\"].apply(lambda x:x.split(\",\")[1].split(\".\")[0].strip(\" \"))","cafeca7d":"df1.head(2)","04696347":"df1.groupby([\"Sex\",\"title\"]).agg(count=(\"Name\",\"count\"))","46898697":"data=df1[\"title\"].value_counts()\ndata=pd.DataFrame({\"Surname\":data.index,\"Count\":data.values})\ndata","988cf6de":"fg=sns.barplot(data=data[0:8],x=\"Surname\",y=\"Count\")\nfg.set_title(\"Surname Count\")","06d2906a":"Title={\"the Countess\":\"Mrs\",\"Mlle\":\"Miss\",\"Mme\":\"Mrs\",\"Ms\":\"Mrs\",\"Lady\":\"Mrs\",\"Dr\":\"Mrs\",\"Capt\":\"Major\",\"Col\":\"Major\",\"Jonkheer\":\"Major\",\"Rev\":\"Major\",\"Don\":\"Major\",\"Sir\":\"Mr\"}\ndf1[\"title\"]=df1[\"title\"].replace(Title)\ndf1[\"title\"].unique()","37260e01":"data=df1[\"title\"].value_counts()\ndata=pd.DataFrame({\"Surname\":data.index,\"Count\":data.values})\nprint(data)\nfg=sns.barplot(data=data,x=\"Surname\",y=\"Count\")\nfg.set_title(\"Surname Count After Convertion\")","52bf7720":"data=df1.groupby([\"title\",\"Survived\"]).agg(count=(\"Name\",\"count\")).reset_index()\ndata","8b5bc71f":"print(\"Survival Count with Respect to people Surname\")\nfg = sns.factorplot(x='Survived', y='count',\n                        hue='title', data=data, kind='bar')\nfg.set_xlabels('')\nfg.fig.set_size_inches(10,5)","71fc20cc":"data=df1.groupby([\"title\",\"Survived\"]).agg(Age_Avg=(\"Age\",\"mean\")).reset_index()\ndata","926f4c42":"print(\"Surname Average Age After Convertion with respect to Survival\")\nfg = sns.factorplot(x='Survived', y='Age_Avg',\n                        hue='title', data=data, kind='bar')\nfg.set_xlabels('')\nfg.fig.set_size_inches(10,5)","9bc3d91c":"data=df.groupby(\"Sex\").agg(count=(\"Name\",\"count\")).reset_index()\ndata","ff3368cb":"df.shape","045a8ef0":"fg=sns.barplot(data=data,x=\"Sex\",y=\"count\")\nfg.set_title(\"Count Based on Gender\")","8975b763":"data=df.groupby([\"Sex\",\"Survived\"]).agg(count=(\"Name\",\"count\")).reset_index()\ndata","60f6b823":"print(\"Survival Count Based on Gender\")\nfg = sns.factorplot(x='Survived', y='count',\n                        hue='Sex', data=data, kind='bar')\nfg.set_xlabels('')\nfg.fig.set_size_inches(6,5)","3f21775c":"data=df.groupby([\"Sex\",\"Survived\"]).agg(count=(\"Age\",\"mean\")).reset_index()\ndata","6776ac75":"print(\"People Average Age with respect to Surival\")\nfg = sns.factorplot(x='Survived', y='count',\n                        hue='Sex', data=data, kind='bar')\nfg.set_xlabels('')\nfg.fig.set_size_inches(7,5)","e1199172":"data=df.groupby([\"Sex\",\"Embarked\"]).agg(count=(\"Name\",\"count\")).reset_index()\nmapper={\"C\":\"Cherbourg\", \"Q\":\"Queenstown\", \"S\":\"Southampton\"}\ndata[\"Embarked\"].replace(mapper,inplace=True)\ndata","e4a055e2":"print(\"People Average Age with respect to Surival\")\nfg = sns.factorplot(x=\"Embarked\", y='count',\n                        hue='Sex', data=data, kind='bar')\nfg.set_xlabels('')\nfg.fig.set_size_inches(7,5)","8fb3e159":"sns.heatmap(df.corr(),annot=True,fmt=\".2f\",center=0,cmap=\"coolwarm\",mask= np.triu(df.corr()))","e83454bf":"df1=df.copy()\ndf1[\"Ticket_No\"]=df[\"Ticket\"].apply(lambda x:0 if x==\"LINE\"else int((x.split(\" \")[-1])))","22ae7924":"sns.heatmap(df1.corr(),annot=True,fmt=\".2f\",center=0,cmap=\"coolwarm\",mask= np.triu(df1.corr()))","bc8e5c0f":"df.groupby([\"Survived\",\"Cabin\"]).agg(count=(\"Name\",\"count\")).sort_values(by=\"count\",ascending=False)","a9dd9521":"def Cabin_Fun(x):\n    if(pd.isna(x)):\n        return x\n    string=\"\".join(re.split(\"[^a-zA-Z]*\",x))\n    if(len(string)==len(set(string))):\n        return string\n    else:\n        return string[0]","ea0ef22a":"df1=df.copy()\ndf1['Cabin_Nor']=df1[\"Cabin\"].apply(Cabin_Fun)\ndf1.groupby([\"Cabin_Nor\"]).agg(count=(\"Name\",\"count\"))","c1f76015":"mapper={\"FG\":\"G\",\"FE\":\"E\"}\ndf1[\"Cabin_Nor\"].replace(mapper,inplace=True)\ndata=df1.groupby([\"Cabin_Nor\"]).agg(count=(\"Name\",\"count\")).reset_index()\ndata","5da6e911":"fg=sns.barplot(data=data,x=\"Cabin_Nor\",y=\"count\")\nfg.set_title(\"Passengers count in Each Cabin\")\nfg.set_xlabel(\"Cabin\")","088c012d":"data=df1.groupby([\"Survived\",\"Cabin_Nor\"]).agg(count=(\"Name\",\"count\")).reset_index()\ndata","1d7b01b2":"fg=sns.factorplot(x=\"Cabin_Nor\",y=\"count\",hue=\"Survived\",data=data,kind='bar')\nprint(\"Survived count from various Cabins\")","1109d37a":"data=df1.groupby([\"Cabin_Nor\",\"Pclass\"]).agg(count=(\"Name\",\"count\")).reset_index()\ndata","6dc668a1":"print(\"Pclass Cabins and Passengers count\")\nsns.factorplot(x=\"Cabin_Nor\",y=\"count\",col=\"Pclass\",data=data)","2574e7a8":"data=df1.groupby(\"Cabin_Nor\").agg(avg_Age=(\"Age\",\"mean\")).reset_index()\ndata","661f9481":"fg=sns.barplot(data=data,x=\"Cabin_Nor\",y=\"avg_Age\")\nfg.set_title(\"Age Average per Cabin\")\nfg.set_xlabel(\"Cabin\")","2b6fc49d":"df.groupby(\"Embarked\").agg(avg_survived=(\"Survived\",\"mean\")).sort_values(by=\"avg_survived\",ascending=False)","5a760204":"df1=df.copy()","443cc1d8":"df1.head()","b6aa9fb7":"sns.heatmap(df1.isna(),center=0,cmap=\"coolwarm\")","41e44980":"sns.heatmap(df1.corr(),center=True,cmap=\"coolwarm\",annot=True,fmt='.2f')","cf4789f2":"df1.head(5)","17182d9a":"df1.groupby(\"Pclass\").agg(avg_Survived=(\"Survived\",\"mean\"))","9ed3f06f":"df1[\"Title\"]=df1[\"Name\"].apply(lambda x:x.split(\",\")[1].split(\".\")[0].strip(\" \"))","aa8df2ba":"Title={\"the Countess\":\"Mrs\",\"Mlle\":\"Miss\",\"Mme\":\"Mrs\",\"Ms\":\"Mrs\",\"Lady\":\"Mrs\",\"Dr\":\"Mrs\",\"Capt\":\"Major\",\"Col\":\"Major\",\"Jonkheer\":\"Major\",\"Rev\":\"Major\",\"Don\":\"Major\",\"Sir\":\"Mr\"}\ndf1[\"Title\"]=df1[\"Title\"].replace(Title)\ndf1.head()","3aab7126":"df1.groupby(\"Title\").agg(avg_Survived=(\"Survived\",\"mean\")).sort_values(by=\"avg_Survived\",ascending=False)","af0787c3":"mapper={\"male\":0,\"female\":1}\ndf1[\"Sex\"].replace(mapper,inplace=True)\ndf1.head()","159127e4":"df1.groupby(\"Sex\").agg(avg_Survived=(\"Survived\",\"mean\")).sort_values(by=\"avg_Survived\",ascending=False)","6b8da02b":"fig, axs = plt.subplots(ncols=2,nrows=2)\n# dir(fig)\nfig.set_figwidth(20)\nfig.set_figheight(20)\nfig1=sns.histplot(df1[\"Age\"],kde=True,color=\"blue\",ax=axs[0,0])\nfig1.set_title(\"Orginal Data Distribution: %.2f\" %(df1[\"Age\"].skew()))\n\n\nfig2=sns.histplot(np.log(df1[\"Age\"]),kde=True,color=\"blue\",ax=axs[0,1])\nfig2.set_title(\"Log Distribution: %.2f\" %(np.log(df1[\"Age\"]).skew()))\n\nfig3=sns.histplot(np.sqrt(df1[\"Age\"]),kde=True,color=\"blue\",ax=axs[1,0])\nfig3.set_title(\"SQRT Distribution: %2f\" %(np.sqrt(df1[\"Age\"]).skew()))\n\nfig4=sns.histplot(np.reciprocal(df1[\"Age\"]),kde=True,color=\"blue\",ax=axs[1,1])\nfig4.set_title(\"Reciprocal Distribution: %.2f\" %(np.reciprocal(df1[\"Age\"]).skew()))","c6983577":"sns.boxplot(data=df1,x=\"Age\")","098b33c6":"df1[\"Age\"].describe()","46bf3ba5":"Outlier_index=df1[(df1[\"Age\"]-df1[\"Age\"].mean())\/df[\"Age\"].std()>3].index\nOutlier_index","830b8ab3":"df1.drop(Outlier_index,axis=0,inplace=True)","86c27010":"sns.boxplot(data=df1,x=\"Age\")","8fe148e1":"# df1.groupby(\"Pclass\").agg(Avg_Age=(\"Age\",\"mean\")).reset_index()\ndf1[\"Age\"]=df1.groupby(\"Pclass\")[\"Age\"].apply(lambda x:x.fillna(x.mean()))","d05dcb24":"sns.heatmap(df1.isna(),center=0,cmap=\"coolwarm\")","f72d0c81":"df1[\"Age\"]=df1[\"Age\"].apply(np.ceil)","aa3515a3":"sns.boxplot(df1[\"SibSp\"])","8b7e0dd0":"df1[\"SibSp\"].value_counts()","3b627bdf":"data=df1.groupby(\"SibSp\").agg(avg=(\"Survived\",\"mean\")).sort_values(by=\"avg\",ascending=False).reset_index()\ndata","c2c84d7b":"fig=sns.factorplot(data=data,x=\"SibSp\",y=\"avg\",kind=\"bar\")\nfig.set_ylabels(\"Survavival Rate\")\nfig.set_xlabels(\"Siblings Count\")","15c713b3":"data=df1.groupby([\"Parch\"]).agg(avg=(\"Survived\",\"mean\")).sort_values(by=\"avg\",ascending=False).reset_index()\ndata","d8de08dc":"fig=sns.factorplot(data=data,x=\"Parch\",y=\"avg\",kind=\"bar\",)\nfig.set_ylabels(\"Survavival Rate\")\nfig.set_xlabels(\"Parents\/Childrens Count\")","e6d9f886":"df1[\"Family_Size\"]=df1[\"Parch\"]+df1[\"SibSp\"]+1","9fe954c4":"df1.groupby([\"Family_Size\"]).agg(avg=(\"Survived\",\"mean\")).sort_values(by=\"avg\",ascending=False).reset_index()","30624007":"df1[\"IsAlone\"]=df1[\"Family_Size\"].apply(lambda x:1 if x==1 else 0 )","b91891d8":"df1.groupby([\"IsAlone\"]).agg(avg=(\"Survived\",\"mean\")).sort_values(by=\"avg\",ascending=False).reset_index()","fd06701d":"sns.boxplot(df1[\"Fare\"])","d12dc9f4":"df1[(df1[\"Fare\"]-df1[\"Fare\"].mean())\/df1[\"Fare\"].std()>3]","fbf56c80":"sns.heatmap(df1.corr(),center=True,cmap=\"coolwarm\",annot=True,fmt='.2f')","468fccb7":"Non_outlier_data=df1[((df1[\"Fare\"]-df1[\"Fare\"].mean())\/df1[\"Fare\"].std())<3].groupby(\"Pclass\").agg(avg_Fare=(\"Fare\",\"mean\"))\nNon_outlier_data","b724ee1e":"for index,i in df1[((df1[\"Fare\"]-df1[\"Fare\"].mean())\/df1[\"Fare\"].std())>3].iterrows():\n    if i.loc[\"Family_Size\"]==1:\n        Pclass=i.loc[\"Pclass\"]\n        df1.loc[index,\"Fare\"]=float(Non_outlier_data.loc[Pclass])","34b0b048":"df1[((df1[\"Fare\"]-df1[\"Fare\"].mean())\/df1[\"Fare\"].std())>3]","dabcc4e4":"sns.heatmap(df1.isna())","e3f505c5":"def Cabin_Fun(x):\n    if(pd.isna(x)):\n        return x\n    string=\"\".join(re.split(\"[^a-zA-Z]*\",x))\n    if(len(string)==len(set(string))):\n        return string\n    else:\n        return string[0]","1aa381d7":"df1['Cabin_Nor']=df1[\"Cabin\"].apply(Cabin_Fun)\ndf1.groupby([\"Cabin_Nor\"]).agg(count=(\"Name\",\"count\"))","9ccfdfec":"mapper={\"FG\":\"G\",\"FE\":\"E\"}\ndf1[\"Cabin_Nor\"].replace(mapper,inplace=True)","eae5682f":"data=df1.groupby([\"Pclass\",\"Cabin_Nor\"]).agg(count=(\"Name\",\"count\"))\ndata","1c0b7a22":"mapper={1:'C',2:'F',3:\"G\"}\nCabin_NaN=df1[df1[\"Cabin_Nor\"].isna()]\nfor index,i in Cabin_NaN.iterrows():\n    Pclass=i.loc[\"Pclass\"]\n    df1.loc[index,\"Cabin_Nor\"]=mapper[Pclass]","c858c579":"df1.groupby(\"Cabin_Nor\").agg(avg_Survived=(\"Survived\",\"mean\")).sort_values(by=\"avg_Survived\",ascending=False)","1c4202db":"sns.heatmap(df1.isna())","fe900f48":"df1.head()","2ddd7dbd":"df1[df1[\"Embarked\"].isna()]","0bd77e4b":"df1[\"Embarked\"].mode()","fd6696fa":"df1[\"Embarked\"].fillna(df1[\"Embarked\"].mode(),inplace=True)","d3e1ecac":"df2=df1.copy()\ndf2.drop([\"Name\",\"SibSp\",\"Parch\",\"Cabin\"],axis=1,inplace=True)\ndf2","92ed364d":"sns.heatmap(df2.isna(),center=0,cmap=\"coolwarm\")","bb410664":"Test=pd.read_csv(\"..\/input\/test-new\/Test_New.csv\")\nTest","9f720e66":"df2.shape,Test.shape","7444c675":"Total=df2.append(Test)\nTotal.head()","059ff044":" Total[\"Ticket\"]=Total[\"Ticket\"].apply(lambda x:0 if x==\"LINE\" else x.split(\" \")[-1:][0]).astype(\"int64\")","18ca7cb4":"Total=pd.get_dummies(Total,columns=[\"Embarked\",\"Title\",\"Cabin_Nor\"],prefix=[\"Embarked\",\"Title\",\"Cabin_Nor\"]).copy()\nTotal.head()","63ed6ed3":"fig, ax = plt.subplots(figsize=(20,20))  \nsns.heatmap(Total.corr(),annot=True,fmt='.2f',center=True,ax=ax,mask=np.triu(Total.corr()))","7ac171c4":"len(Total.columns),len(set(Total.columns))","6a63fb61":"Train_Data=Total[0:889]\nTest_Data=Total[889::]","a1e6a597":"Train_Data.shape,Test_Data.shape","252fcf7a":"Test_Data","b29a0890":"X=Train_Data.drop([\"Survived\"],axis=1)\nY=Train_Data[\"Survived\"]\nTest_Data=Test_Data.drop([\"Survived\"],axis=1)","622bd64a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import GridSearchCV","2509880d":"# clf = RandomForestClassifier()\n# clf.fit(X,Y)\n# print(\"Random Forest Model Training score  %.2f\"%(clf.score(X,Y)))\n# op=clf.predict(X)\n# print(\" Training confusion Matrix:\\n\")\n# print(confusion_matrix(Y,op))\n# print(\"-\"*50)\n# op=clf.predict(Test_Data)\n# print(\"Random Forest Model score  {}\".format(clf.score(Test_Data,Submission[\"Survived\"])))\n# confusion_matrix(Submission[\"Survived\"],op)","8a4d98a0":"# from sklearn.model_selection import GridSearchCV\n\n# # {'criterion': 'entropy',\n# #  'max_depth': None,\n# #  'min_samples_leaf': 5,\n# #  'min_samples_split': 10,\n# #  'n_estimators': 100}\n\n# Parm_grid={\n#     'criterion':[\"gini\",\"entropy\"],\n#     'n_estimators':[100,150,200],\n#     'max_depth':[None,1,3,5,10],\n#     \"min_samples_split\":[5,10],\n#     \"min_samples_leaf\":[5,10]\n# }\n# clf = GridSearchCV(RandomForestClassifier(), param_grid=Parm_grid)\n# clf.fit(X,Y)\n# print(clf.best_params_)","81992ed8":"clf = RandomForestClassifier(criterion= 'entropy',max_depth= None,min_samples_leaf= 5,min_samples_split=10,n_estimators=100)\nclf.fit(X,Y)\nop=clf.predict(X)\nprint(\"Random Forest Model score After GridSearchCV Tarining score %.2f\"%(clf.score(X,Y)))\nprint(\"Training Confusion Matrix:\\n\")\nprint(confusion_matrix(Y,op))\nprint(\"-\"*50)\nop=clf.predict(Test_Data)\nprint(\"Random Forest Model score After GridSearchCV: %.2f\"%(clf.score(Test_Data,Submission[\"Survived\"])))\nconfusion_matrix(Submission[\"Survived\"],op)","6760295b":"# from sklearn import tree\n# clf = tree.DecisionTreeClassifier()","1043d156":"# clf = clf.fit(X, Y)\n# print(\"Decision Tree Model Training score: %.2f\"%(clf.score(X,Y)))\n# op=clf.predict(X)\n# print(\"Training Confusion Matrix:\\n\")\n# print(confusion_matrix(Y,op))\n# print(\"-\"*50)\n# op=clf.predict(Test_Data)\n# print(\"Decision Tree Model score: %.2f\"%(clf.score(Test_Data,Submission[\"Survived\"])))\n# confusion_matrix(Submission[\"Survived\"],op)","3824c2bc":"from sklearn import tree\nclf =tree.DecisionTreeClassifier()\npath = clf.cost_complexity_pruning_path(X,Y)\nccp_alphas, impurities = path.ccp_alphas, path.impurities","b6daccdb":"accuracy_train,accuracy_test=[],[]\nfor i in ccp_alphas:\n    clf =tree.DecisionTreeClassifier(ccp_alpha=i)\n    clf = clf.fit(X, Y)\n    y_train=clf.predict(X)\n    y_test=clf.predict(Test_Data)\n    accuracy_train.append(accuracy_score(Y,y_train))\n    accuracy_test.append(accuracy_score(Submission[\"Survived\"],y_test))","5ea712b0":"fig=sns.lineplot(y=accuracy_train,x=ccp_alphas,label=\"Training_Accuracy\")\nsns.lineplot(y=accuracy_test,x=ccp_alphas,label=\"Testing_Accuracy\")\nfig.set_xlabel(\"ccp_value\")\nfig.set_ylabel(\"Accuracy\")\nfig.set_title(\"Cost Complexity Purning\")","8df96e31":"# clf = tree.DecisionTreeClassifier(ccp_alpha=0.01)\n# clf = clf.fit(X, Y)\n# print(\"Decision Tree Model Training score After CCP: %.2f\"%(clf.score(X,Y)))\n# op=clf.predict(X)\n# print(\"Training Confusion Matrix\\n\")\n# print(confusion_matrix(Y,op))\n# print(\"-\"*50)\n# op=clf.predict(Test_Data)\n# print(\"Decision Tree Model score After CCP: %.2f\"%(clf.score(Test_Data,Submission[\"Survived\"])))\n# confusion_matrix(Submission[\"Survived\"],op)","f860abab":"from sklearn.ensemble import GradientBoostingClassifier\nclf=GradientBoostingClassifier()","702f9af8":"# clf = clf.fit(X, Y)\n# print(\"Gradient Boost Model Training score : %.2f\"%(clf.score(X,Y)))\n# op=clf.predict(X)\n# print(\"Training Confusion Matrix:\\n\")\n# print(confusion_matrix(Y,op))\n# print(\"-\"*50)\n# op=clf.predict(Test_Data)\n# print(\"Gradient Boost Model score : %.2f\"%(clf.score(Test_Data,Submission[\"Survived\"])))\n# confusion_matrix(Submission[\"Survived\"],op)","2b7184e4":"# from sklearn.ensemble import AdaBoostClassifier\n# clf = AdaBoostClassifier()\n# clf = clf.fit(X, Y)\n# print(\"Ada Boost Model Training score : %.2f\"%(clf.score(X,Y)))\n# op=clf.predict(X)\n# print(\"Training Confusion Matrix:\\n\")\n# print(confusion_matrix(Y,op))\n# print(\"-\"*50)\n# op=clf.predict(Test_Data)\n# print(\"Ada Boost Model score : %.2f\"%(clf.score(Test_Data,Submission[\"Survived\"])))\n# confusion_matrix(Submission[\"Survived\"],op)","3e6caf13":"# from sklearn.model_selection import GridSearchCV\n\n# # {'learning_rate': 0.5, 'n_estimators': 300}\n\n# # Parm_grid={\n# #     'n_estimators':[100,200,300],\n# #     'learning_rate':[.0001,.01,.1,.2,.5]\n# # }\n# # clf = GridSearchCV(AdaBoostClassifier(), param_grid=Parm_grid)\n# clf = AdaBoostClassifier(learning_rate=0.5, n_estimators= 300)\n# clf.fit(X,Y)\n# print(\"Best Params:\\t\",clf.best_params_)\n# print(\"Ada Boost with Best params Model Training score : %.2f\"%(clf.score(X,Y)))\n# op=clf.predict(X)\n# print(\"Ada Boost with Best params Model Training Confusion Matrix:\\n\")\n# print(confusion_matrix(Y,op))\n# print(\"-\"*50)\n# op=clf.predict(Test_Data)\n# print(\"Ada Boost with Best params Model score : %.2f\"%(clf.score(Test_Data,Submission[\"Survived\"])))\n# confusion_matrix(Submission[\"Survived\"],op)","f1a81c70":"# from xgboost import XGBClassifier\n# clf = XGBClassifier()\n# clf = clf.fit(X, Y)\n# print()\n# print(\"XGboosting Model Training score : %.2f\"%(clf.score(X,Y)))\n# op=clf.predict(X)\n# print(\"Training Confusion Matrix:\\n\")\n# print(confusion_matrix(Y,op))\n# print(\"-\"*50)\n# op=clf.predict(Test_Data)\n# print(\"XGboosting score : %.2f\"%(clf.score(Test_Data,Submission[\"Survived\"])))\n# confusion_matrix(Submission[\"Survived\"],op)","dfba7f7e":"# from sklearn.model_selection import GridSearchCV\n\n# Parm_grid={\n#     'binary':['error','logloss'],\n#     'n_estimators':[100,200,300],\n#     'learning_rate':[.0001,.01,.1,.2,.5],\n#     'max_depth':[5,10,15],\n    \n# }\n# clf = GridSearchCV(XGBClassifier(), param_grid=Parm_grid)\n# clf.fit(X,Y)\n# print(clf.best_params_)","a1aa8552":"from xgboost import XGBClassifier\nclf = XGBClassifier(binary='error', learning_rate= 0.2,max_depth= 5,n_estimators= 100)\nclf = clf.fit(X, Y)\nprint()\nprint(\"XGboosting Model Training score : %.2f\"%(clf.score(X,Y)))\nop=clf.predict(X)\nprint(\"Training Confusion Matrix:\\n\")\nprint(confusion_matrix(Y,op))\nprint(\"-\"*50)\nop=clf.predict(Test_Data)\nprint(\"XGboosting score : %.2f\"%(clf.score(Test_Data,Submission[\"Survived\"])))\nconfusion_matrix(Submission[\"Survived\"],op)","3320740e":"Sub=pd.DataFrame({\"PassengerId\":Submission[\"PassengerId\"],\"Survived\":op.astype('int64')})\nSub.to_csv(\"Submisson.csv\",index=False)","143e3bc6":"# Name              -Train Score - Testing Score\n# Random Forest     - 100        - 86\n# Random Forest GRcv- 87         - 91\n# DT                - 100        - 72\n# DT CCP            - 83         - 95\n# GB                - 92         - 87\n# Ada Boost         - 86         - 87\n# Ada GRcv          - 87         - 88\n# XGBoost           - 99         - 83\n# XGBoost GRcv      - 97         - 84","bb15b4bc":"### Embarked Analysis\n    i) who are all abord in C, they survived more","41abece8":"### Sex Analysis\n#### 1.\n    i)  More Number of males are travelled in this ship\n#### 2.\n    i)  Female have high chance of survival and male have high chance of not survive\n#### 3.\n    i)  More Females are travel from southampton\n    ii) Less Males are travel from Queenstown","4dbb4655":"### Age\n\n#### Skew is lesser in orginal data before Filling missing values\n    i) outliers are removed threshold value for Z-Score is 3\n\n    1. Age Feature correlated with Pcalss, which helps to fill the missing value\n    2. Age values are in floating point, take a ceil to convert them into int\n\n\n##### Need check\n    1.convert the continous value to binning","22ffc37c":"## Random Forest with GridSearchCV","167b6580":"### Name\n    1. Tittle is extracted from Name and reduce the category, Here less titles are combine with respective titles\n    2. Mrs have high chance of survaival","6c9ded1d":"### XGBoost model was overfitted with the data,so hyper parameters Tuning is help to improve the model","42e1d0d8":"### Parch  #of parents \/ children aboard the Titanic","560e756d":"### Pclass\n    1. Pclass order is 1-Higher,2-Medium,3-Lower\n    2. Higer the class means high survival rate","a455694f":"# Decision Tree","9e256fc0":"# Analysis From Survived Feature\n\n### 1.\n    i) Females are mostly like to Survive compare to Male.","55d334f0":"# Ticket\n##### 1.\n    1) As of now there is no useful information from Ticket column, we will try to use this column later","17d9c486":"## Ticket ","86e94dea":"# Cost Complexity Purining  For DT","a5d728bf":"# RandomForest","eaa89b67":"# Cabin Analysis\n#### 1.\n    i)   Cabin C have more Passengers and Cabin T have least number of passengers\n#### 2.\n    i)   Cabin C & B are having high number of survived passengers.\n    ii)  Cabin F is least number of survived passengers.\n#### 3.\n    i)   Pclass-1 have A,B,C,D,E,T Cabins\n    ii)  Pclass-2 have D,E,F Cabins\n    iii) Pclass-3 have E,F,G Cabins\n#### 4.\n    i)   Cabin F & G passengers have least Average Age\n\n    1.Replace the FG with G\n    2.Replace the FE with E\n\n    \n    ","377ee83f":"### Total Family length\n    1.Assumption\n        i). Parch+Sib+1\n        ii). isAlone (Parch+Sib==0)","ad980765":"### Fare\n    1.Outliers are founded.\n    2.Fare Feature have high correlation with Pclass,so replace the outliers with pclass\n    3. Fare feture have more outliers because, more than one cabins are booked that's the reason the Fare is High.While replacing outliers the family size count need to be consider.","0bf660e2":"### Embarked","61a6cba5":"### Cabin  ","74629215":"### Cost comlexity purning value 0.01 gives good performance for test and training data,so we choose that value to train our model ","06f99b3b":"# Gradient Boost","98fd71de":"### Ticket","4bdfab6c":"### Random Forest was overfit with the data,so Hyper Tuning is Necessery to improve the model performance","74f25321":"### Sibsp (# of siblings \/ spouses aboard the Titanic)\n    1. More Siblings survived rate is less\n    2. By using this Sibsp and Parch, we can create one feature whether the person is alone or not.","2df73ea7":"### Analysis From Pclass\n### 1.\n    i)   On Pclass have more people compare to other Classes\n### 2.\n    i)   More People survived in class 1 \n    ii)  More people died in class 3\n### 3.\n    i)   With respect to Pclass Compare to Male, Females are Survived more \n### 4.\n    i)   Pclass Fare is higher then all other Classes.\n### 5.\n    i)   Most People are loading to the ship from Southampton\n### 6.\n    i)   Pclass-1 have aged people\n    ii)  Pclass-3 have Youngest people ","f03dc204":"### Survived","b665d2e8":"### Sex","996b99dc":"### PClass","131c901d":"### Embarked","7152abc2":"# Test Data Process\n#### 1. Perform the same Feature Engineering Process to Test Data.\n#### 2. Once the all process are completed, save the dataset as  *Test_New.csv*","223a1054":"# Ada Boost","c84a9e4b":"### cabin\n    1.Missing values needs to fill\n    2.Cabin have more correlation with Pclass\n    3.\n    i)   Pclass-1 have A,B,C,D,E,T Cabins\n    ii)  Pclass-2 have D,E,F Cabins\n    iii) Pclass-3 have E,F,G Cabins\n    \n    Assumption\n    1.Replace the FG with G\n    2.Replace the FE with E","05334a83":"## Ada Boosting with GridSearchCV","2290ab14":"# Feature Engineering","9f640982":"# Exploratory Data Analysis","2670e1a6":"### Name","0aa8f709":"\n# XGBoosting","80ca8b90":"### Sex\n    1. Female have high chance to survive.Here we are doing one hot encoding is applied to the sex feature.","688e97a0":"### Name Analysis\n#### Converstion\n###### Female\n    1.Mlle equal to Miss.\n    2.Mme equal to Mrs.\n    3.Ms combaine with Miss\n    4.Lady and Dr combaine with Mrs\n###### Male\n    1.Capt,Col,Jonkheer,Rev,Major combine as one category\n##### Conclusion   \n    1.Mr have less chance of survive.\n    2.Miss have high chance of survive\n    3.who are all have master as surname they are childrens and average age is <5\n    4.who are all have Major as surname they are Seniority people and average age is <56"}}