{"cell_type":{"633d1a67":"code","3adf28d7":"code","4b9866b2":"code","4c82b97d":"code","c5cb86e1":"code","469c5ed1":"code","475ace72":"code","89ee6073":"code","bf08ba82":"code","f2efdd02":"code","269e9239":"code","dbbaf0b8":"code","d1bdd966":"code","129b4f7e":"code","7396c398":"code","fc16d97e":"code","c4a05e8f":"code","a688da58":"code","237f07c6":"code","bbf51942":"code","1ec7f5be":"markdown","0d3cab41":"markdown","7bd5d8c1":"markdown","2f6f4135":"markdown","6ff8a691":"markdown","010d75ec":"markdown","99adf080":"markdown","5fc8d1ae":"markdown","9a28a801":"markdown","0a00f78e":"markdown","9d0b4595":"markdown","ff2d20a6":"markdown","edea8e5c":"markdown","3a4c5677":"markdown","f4f5ca65":"markdown","b897542f":"markdown","9f460024":"markdown","2b6dd9b9":"markdown","18c85eed":"markdown","224a2fa3":"markdown","c9f733ac":"markdown","0bd13338":"markdown","e9633142":"markdown","80a4d68d":"markdown","81f7383e":"markdown","8b176362":"markdown","5a1bd005":"markdown","9c32ff0c":"markdown","829b2ab3":"markdown","414884f9":"markdown","c82e6dd0":"markdown","311bf11a":"markdown","6c165247":"markdown"},"source":{"633d1a67":"!pip install toloka-kit==0.1.12\n!pip install crowd-kit==0.0.5\n!pip install pandas\n\nimport datetime\nimport sys\nimport time\nimport logging\n\nimport pandas\nimport numpy as np\n\nimport toloka.client as toloka\nimport toloka.client.project.template_builder as tb\nfrom crowdkit.aggregation import DawidSkene\n\nlogging.basicConfig(\n    format='[%(levelname)s] %(name)s: %(message)s',\n    level=logging.INFO,\n    stream=sys.stdout,\n)","3adf28d7":"toloka_client = toloka.TolokaClient(input(\"Enter your token:\"), 'PRODUCTION')  # Or switch to 'SANDBOX'\nprint(toloka_client.get_requester())","4b9866b2":"project = toloka.Project(\n    public_name='Is this headline clickbait?',\n    public_description='Look at the a news headline and decide if it is clickbait or not.',\n)","4c82b97d":"text_viewer = tb.TextViewV1(tb.JoinHelperV1(['Headline: ', tb.InputData('headline')]))\n\nradio_group_field = tb.ButtonRadioGroupFieldV1( #answers variety \n    tb.OutputData('category'),\n    [\n        tb.GroupFieldOption('clickbait', 'Clickbait'),\n        tb.GroupFieldOption('notclickbait', 'Not clickbait'),\n    ],\n    validation=tb.RequiredConditionV1(hint='you need to select one answer'), #news' headlines can't be classified as both\n)\n\ntask_width_plugin = tb.TolokaPluginV1(\n    layout=tb.TolokaPluginV1.TolokaPluginLayout(\n        kind='scroll',\n        task_width=300,\n    )\n)\n\nhot_keys_plugin = tb.HotkeysPluginV1( #introducing hotkeys is a good practice; they help to speed up the labeling process\n    key_1=tb.SetActionV1(tb.OutputData('category'), 'clickbait'),\n    key_2=tb.SetActionV1(tb.OutputData('category'), 'notclickbait'),\n)\n\nproject_interface = toloka.project.TemplateBuilderViewSpec(\n    view=tb.ListViewV1([text_viewer, radio_group_field]),\n    plugins=[task_width_plugin, hot_keys_plugin],\n)","c5cb86e1":"input_specification = {'headline': toloka.project.StringSpec()}\noutput_specification = {'category': toloka.project.StringSpec()}\n\nproject.task_spec = toloka.project.task_spec.TaskSpec(\n    input_spec=input_specification,\n    output_spec=output_specification,\n    view_spec=project_interface,\n)","469c5ed1":"project.public_instructions = \"\"\"<h2>About the task<\/h2>\nIn this task you need to classify headlines on 2 categories: Clickbait or Not clickbait.<br>\n<h2>What is Clickbait headline?<\/h2>\nClickbait refers to the practice of writing sensationalized or misleading headlines.\n<b>Clickbait headline<b> designed to make readers want to click on a hyperlink\nespecially when the link leads to content of dubious value. Typically clickbait titles cover not very useful content,\nso visitors tend not to stay for too long, that's why it's bad.\n\"\"\"","475ace72":"project = toloka_client.create_project(project)","89ee6073":"!curl https:\/\/tlk.s3.yandex.net\/ext_dataset\/clickbait\/clickbait_data.csv --output clickbait_data.csv\n!curl https:\/\/tlk.s3.yandex.net\/ext_dataset\/clickbait\/non_clickbait_data.csv --output non_clickbait_data.csv\n\nclickbait_df = pandas.read_csv('clickbait_data.csv', sep='\\t', names=['headline'])\nclickbait_df['category'] = 'clickbait'\nprint(clickbait_df)\n\nnon_clickbait_df = pandas.read_csv('non_clickbait_data.csv', sep='\\t', names=['headline'])\nnon_clickbait_df['category'] = 'notclickbait'\nprint(non_clickbait_df)\n\ndataset = clickbait_df.append(non_clickbait_df)\ndataset = dataset.sample(frac=1).reset_index(drop=True)\n\ntraining_dataset, golden_dataset, main_dataset, _ = np.split(dataset, [10, 30, 130], axis=0)\nprint(f'\\ntraining_dataset - {len(training_dataset)}')\nprint(f'\\ngolden_dataset - {len(golden_dataset)}')\nprint(f'\\nmain_dataset - {len(main_dataset)}')","bf08ba82":"training = toloka.Training(\n    project_id=project.id,\n    private_name='clickbait training',\n    may_contain_adult_content=False,\n    assignment_max_duration_seconds=60*30,\n    mix_tasks_in_creation_order=False,\n    shuffle_tasks_in_task_suite=False,\n    training_tasks_in_task_suite_count=10, #number of training tasks per page\n    task_suites_required_to_pass=10, #required number of training tasks to complete to receive a training skill\n    retry_training_after_days=10,\n    inherited_instructions=True,\n)\ntraining = toloka_client.create_training(training)","f2efdd02":"training_tasks = [\n    toloka.Task(\n        pool_id=training.id,\n        input_values={'headline': row['headline']},\n        known_solutions = [toloka.task.BaseTask.KnownSolution(output_values={'category': row['category']})],\n        message_on_unknown_solution=row['category'],\n    )\n    for _, row in training_dataset.iterrows()\n]\nresult = toloka_client.create_tasks(training_tasks, allow_defaults=True)\nprint(len(result.items))","269e9239":"pool = toloka.Pool(\n    project_id=project.id,\n    # Give the pool any convenient name. You are the only one who will see it.\n    private_name='Is this headline clickbait?',\n    may_contain_adult_content=False,\n    # Set the price per task page.\n    reward_per_assignment=0.01,\n    will_expire=datetime.datetime.utcnow() + datetime.timedelta(days=365),\n    # Overlap. This is the number of users who will complete the same task.\n    defaults=toloka.Pool.Defaults(default_overlap_for_new_task_suites=3),\n    # Time allowed for completing a task page\n    assignment_max_duration_seconds=120,\n    filter=(\n        (toloka.filter.Languages.in_('EN')) &\n        (\n            (toloka.filter.ClientType == 'TOLOKA_APP') |\n            (toloka.filter.ClientType == 'BROWSER')\n        )\n    ),\n)","dbbaf0b8":"pool.set_training_requirement(training_pool_id=training.id, training_passing_skill_value=90)","d1bdd966":"pool.quality_control.add_action(\n    collector=toloka.collectors.AssignmentSubmitTime(history_size=5, fast_submit_threshold_seconds=30),\n    conditions=[toloka.conditions.FastSubmittedCount >= 2],\n    action=toloka.actions.RestrictionV2(\n        scope='POOL',\n        duration_unit='PERMANENT',\n        private_comment='bad quality'\n    )\n)\n\npool.quality_control.add_action(\n    collector=toloka.collectors.GoldenSet(history_size=10), #compute answer rate on window of size 10\n    conditions=[\n        toloka.conditions.GoldenSetCorrectAnswersRate <= 90.0, #ban if this is true and\n        toloka.conditions.GoldenSetAnswersCount >= 1 #performer completed at least one golden task\n    ],\n    action=toloka.actions.RestrictionV2(\n        scope='POOL',\n        duration_unit='PERMANENT',\n        private_comment='bad quality'\n    )\n)","129b4f7e":"pool.set_mixer_config(\n    real_tasks_count=4,\n    golden_tasks_count=1,\n)","7396c398":"pool = toloka_client.create_pool(pool)","fc16d97e":"golden_tasks = [\n    toloka.task.Task(\n        pool_id=pool.id,\n        input_values={'headline': row['headline']},\n        known_solutions = [\n            toloka.task.BaseTask.KnownSolution(\n                output_values={'category': row['category']}\n            )\n        ],\n        infinite_overlap=True,\n    )\n    for _, row in golden_dataset.iterrows()\n]\n\ntasks = [\n    toloka.task.Task(\n        pool_id=pool.id,\n        input_values={'headline': row['headline']},\n    )\n    for _, row in main_dataset.iterrows()\n]\n\ncreated_tasks = toloka_client.create_tasks(golden_tasks + tasks, allow_defaults=True)\nprint(len(created_tasks.items))","c4a05e8f":"training = toloka_client.open_training(training.id)\nprint(training.status)\npool = toloka_client.open_pool(pool.id)\nprint(pool.status)","a688da58":"pool_id = pool.id\n\ndef wait_pool_for_close(pool_id, minutes_to_wait=1):\n    sleep_time = 60 * minutes_to_wait\n    pool = toloka_client.get_pool(pool_id)\n    while not pool.is_closed():\n        op = toloka_client.get_analytics([toloka.analytics_request.CompletionPercentagePoolAnalytics(subject_id=pool.id)])\n        op = toloka_client.wait_operation(op)\n        percentage = op.details['value'][0]['result']['value']\n        print(\n            f'   {datetime.datetime.now().strftime(\"%H:%M:%S\")}\\t'\n            f'Pool {pool.id} - {percentage}%'\n        )\n        time.sleep(sleep_time)\n        pool = toloka_client.get_pool(pool.id)\n    print('Pool was closed.')\n\nwait_pool_for_close(pool_id)","237f07c6":"answers = []\n\nfor assignment in toloka_client.get_assignments(pool_id=pool_id, status='ACCEPTED'):\n    for task, solution in zip(assignment.tasks, assignment.solutions):\n        if not task.known_solutions:\n            answers.append([task.input_values['headline'], solution.output_values['category'], assignment.user_id])\n\nprint(f'answers count: {len(answers)}')","bbf51942":"# Prepare dataframe\nanswers_df = pandas.DataFrame(answers, columns=['task', 'label', 'performer'])\n# Run aggregation\npredicted_answers = DawidSkene(n_iter=20).fit_predict(answers_df)\n\nprint(predicted_answers)","1ec7f5be":"#### Instructions","0d3cab41":"## Creating a main pool\nA main pool is a set of paid tasks grouped into task pages. Task pages are sent out for completion at the same time.\n\n>Note: All tasks within a pool have the same settings (price, quality control, etc.)\n\nText classification tasks are generally paid as basic ones because these tasks do not take much time to complete. Read more about [pricing principles](https:\/\/toloka.ai\/knowledgebase\/pricing?utm_source=github&utm_medium=site&utm_campaign=tolokakit) in our Knowledge Base.\n\nSets an overlap of 3 (one atomic task - three labels from different performers) to get a more confident final label. To understand [how this rule works](https:\/\/toloka.ai\/docs\/guide\/concepts\/mvote.html?utm_source=github&utm_medium=site&utm_campaign=tolokakit), go to the Requester\u2019s Guide.\n\nLet's add a language filter so performers who speak English will be invited to complete this task. Then choose the Toloka web version and Toloka for mobile clients. These filters will allow performers to complete your task on their computers or mobile devices.","7bd5d8c1":"To get the final labeled dataset, we need to use the aggregation of received raw results.   \nIn this tutorial, we aggregate results using the **Dawid-Skene model**.\n\nRead more about the [Dawid-Skene model](https:\/\/toloka.ai\/docs\/guide\/concepts\/result-aggregation.html?utm_source=github&utm_medium=site&utm_campaign=tolokakit#aggr__dawid-skene) in the Requester\u2019s Guide or get at an overview of different [aggregation models](https:\/\/toloka.ai\/knowledgebase\/aggregation) our Knowledge Base.","2f6f4135":"## Creating a project\nEnter an attractive & clear project name and description.\n> Note: A public project name and a public project description will be visible to the performers. We need to formulate our problem briefly and meaningfully to catch the crowd's attention.","6ff8a691":"Specify\tthe number of tasks per page.  \n\nWe recommend putting as many tasks on one page as a performer can complete in 1 to 5 minutes. That way, performers are less likely to get tired, and they won\u2019t lose a significant amount of data if a technical issue occurs.  \nThe recommended ratio of golden tasks per page is approximately 10 to 20 percent.","010d75ec":"Attach the training you created earlier and select the accuracy level required to reach the main pool. This means Tolokers who got less than 90% accuracy or did not complete the training **will not have access to this pool**.","99adf080":"## Preparing data\nThis example uses SVM clickbait classifier, that distributed under a MIT license\n[![License: MIT](https:\/\/img.shields.io\/badge\/License-MIT-yellow.svg)](https:\/\/opensource.org\/licenses\/MIT)\n\n> Abhijnan Chakraborty, Bhargavi Paranjape, Sourya Kakarla, and Niloy Ganguly. \"Stop Clickbait: Detecting and Preventing Clickbaits in Online News Media\u201d. In Proceedings of the 2016 IEEE\/ACM International Conference on Advances in Social Networks Analysis and Mining (ASONAM), San Fransisco, US, August 2016.\n\n\nBibTex:\n```\n@inproceedings{chakraborty2016stop,\ntitle={Stop Clickbait: Detecting and preventing clickbaits in online news media},\nauthor={Chakraborty, Abhijnan and Paranjape, Bhargavi and Kakarla, Sourya and Ganguly, Niloy},\nbooktitle={Advances in Social Networks Analysis and Mining (ASONAM), 2016 IEEE\/ACM International Conference on},\npages={9--16},\nyear={2016},\norganization={IEEE}\n}\n```","5fc8d1ae":"When all the tasks are completed, get the raw responses from performers.","9a28a801":"Set up [Quality control](https:\/\/toloka.ai\/docs\/guide\/concepts\/control.html?utm_source=github&utm_medium=site&utm_campaign=tolokakit):\n - Ban performers who give incorrect responses to golden tasks (since tasks like these have an answer that can be used as ground truth).\n - Set up the \"Fast responses\" rule. This rule allows you to ban performers who submit tasks at a suspiciously high speed.\n\nRead more about [quality control principles](https:\/\/toloka.ai\/knowledgebase\/quality-control?utm_source=github&utm_medium=site&utm_campaign=tolokakit) in our Knowledge Base.","0a00f78e":"This example showed how to solve classification problems with the help of crowdsourcing.\n\nThe described project is beneficial for:\n\n- Creating benchmark datasets\n- Monitoring the quality of your production classification model\n- Evaluating the results of a more complex task, for example, machine translation \n\nFeel free to get to know Toloka & ask any questions!","9d0b4595":"Start the main pool and the training pool.\n\n**<font color='red'>Important<\/font>** Remember that real Toloka performers will complete the tasks.\n**Double-check in Toloka interface** that everything is correct with your project configuration before you start the pool","ff2d20a6":"Let's load this dataset and split it into three parts:\n- training \n- golden\n- main","edea8e5c":"Upload training tasks to the pool.  \nIf the problem is not complex, as in our tutorial, there is no need to make the training pool large; it's enough to have 10-20 training tasks.","3a4c5677":"# Text classification with Crowdsourcing ","f4f5ca65":"1. **Training examples** will be used for training performers to classify topics correctly; we will provide them with corrected answers after reading the instruction and submitting the training. This is essential to set up a quality threshold for project completion.\n2. **The golden dataset**, or so-called \"honeypots\", will be used as a validation dataset to check markup quality through the labeling process. We will mix production tasks which we seek to label with golden tasks, and evaluate performers' skill on this project based on their responses to honeypots. Performers can't distinguish between the golden and production tasks. \n3. **The main dataset** is the data that we want to label.","b897542f":"We recommend opening the training pool along with the main pool. Otherwise, Tolokers will spend their time on training but get no access to real tasks, which is frustrating. Also, do not forget to close the training pools when there are no main tasks available anymore.","9f460024":"[Toloka](https:\/\/toloka.ai) is a crowdsourcing platform designed for constructing scalable pipelines of data labeling & data analysis. One of the main goals of Toloka is to support data-centric AI development.  \nIn order to get acquainted with **Toloka API & Interface** or **Toloka entities**, please visit our tutorial [\"Crowdsourcing, Toloka, Introduction\"](https:\/\/www.kaggle.com\/edsukhodolskaya\/crowdsourcing-toloka-introduction)","2b6dd9b9":"Create pool","18c85eed":"## Creating a training pool\nA pool is a set of tasks grouped into task pages.\n\nTraining is an essential part of almost every crowdsourcing project. It allows you to select performers who have mastered the task and thus improve quality. Training is also an excellent tool for scaling your task because you can run it when you need new performers on the project.\n\n> Read more about [selecting performers](https:\/\/toloka.ai\/knowledgebase\/quality-control?utm_source=github&utm_medium=site&utm_campaign=tolokakit) in our Knowledge Base.","224a2fa3":"Let's start a series of tutorials covering the **NLP-related problems** and how they could be solved with the help of crowdsourcing. With Toloka, you can control data labeling accuracy to build a predictable pipeline of high-quality training data that impacts your NLP algorithms.\n\nIn this tutorial, we will explain how to create a **text classification** pipeline with Toloka.\n\nLet's consider real-life example used for news moderation:  \n*We have a set of news article headlines. We need to get these classified according to whether they are \"clickbait\"*.\n\n>**Clickbait headline** is designed to make readers want to click on a hyperlink under the headline even if the link leads to content of dubious value (deceptive, sensationalized, or otherwise misleading).","c9f733ac":"Wait until the pool is completed.","0bd13338":"Create a project.","e9633142":"Create the task interface for the project. \n> Check the [interface section](https:\/\/toloka.ai\/knowledgebase\/interface?utm_source=github&utm_medium=site&utm_campaign=tolokakit) of our Knowledge Base for more tips on interface design.\n\nOur goal is to create a simple interface that will enable workers to see the headline and be able to classify it as 'clickbait' or 'not clickbait'","80a4d68d":"For performers, our interface will look like this.\n\n<table  align=\"center\">\n  <tr><td>\n    <img src=\"https:\/\/github.com\/Toloka\/toloka-kit\/blob\/main\/examples\/5.nlp\/text_classification\/img\/tasks_preview.png?raw=true\"\n         alt=\"Task page\"  width=\"1000\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 1.<\/b> What the task page can looks like.\n  <\/td><\/tr>\n<\/table>","81f7383e":"Write comprehensive instructions.  \nGood instruction is the key to excellent performance!  \nIt should be easy, contain required definitions, and include examples and contr-examples if the problem is not intuitive.\n> Get more tips on [designing instructions](https:\/\/toloka.ai\/knowledgebase\/instruction?utm_source=github&utm_medium=site&utm_campaign=tolokakit) in our Knowledge Base.\n\n\n> It might be easier to use our user-friendly instruction editor in the Toloka interface for complex instructions.","8b176362":"Then create a toloka-client instance. All API calls will go through it. You can learn about OAuth token & 'SANDBOX' environment in our tutorial [\"Crowdsourcing, Toloka, Introduction\"](https:\/\/www.kaggle.com\/edsukhodolskaya\/crowdsourcing-toloka-introduction)","5a1bd005":"Specifications describe a single unit of input data (f.e. type, data structure) used in a project and the single label in output data (f.e. type, data structure) collected from the performers.  \n\nHere we are providing performers with a string (headline) and receiving a string label (either \"clickbait\" or \"not clickbait\")","9c32ff0c":"## Receiving responses","829b2ab3":"#### Input\/output data specifications","414884f9":"Firstly prepare an environment and import all we'll need.","c82e6dd0":"## Prerequisites","311bf11a":"## Summary","6c165247":"## Preparing and uploading tasks to the main pool"}}