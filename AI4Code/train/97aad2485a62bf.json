{"cell_type":{"4b47fd15":"code","9313866d":"code","baa9bdfe":"code","7100fe04":"code","6c84c775":"code","db472a71":"code","c024e9d8":"code","65e60484":"code","f2f0de83":"code","58da2b9c":"code","2532217b":"code","58cdd50f":"code","90811ed5":"code","1cedf9d2":"code","4e44c75b":"code","e8fb8088":"code","2abb9d7b":"code","f690a509":"code","902d2b5e":"code","20fbc2cd":"code","5a9b8095":"code","449468c1":"code","93ad3760":"code","e9f98af8":"code","dce5ee70":"code","8508cd50":"code","d304d991":"code","b39af4dc":"code","17234e6e":"code","e2a6c39d":"code","51cb4bf6":"code","c52a2f04":"code","f388dcca":"code","4c6c3643":"code","8502ee69":"code","dddae78a":"code","9c57e63c":"code","539ed97e":"code","866c5214":"code","495dd7d0":"code","e43d2bbb":"code","6ef1c3d1":"code","8f602bf0":"code","c25e4705":"code","538b5844":"code","05eeba27":"code","22b9c713":"code","4358ef52":"code","8f1cdedf":"code","0d4b28b5":"code","37178a12":"code","d3128a6f":"code","72977de2":"code","6d90a21d":"code","2583ed53":"markdown","ceddaab5":"markdown","8d3b2686":"markdown","8b829eea":"markdown","5a866cfe":"markdown","a13376d9":"markdown","c48686c3":"markdown"},"source":{"4b47fd15":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","9313866d":"!pip install openpyxl\ndf = pd.read_excel(r\"..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx\")\ndf.head()","baa9bdfe":"df.info()","7100fe04":"df.isnull().sum()","6c84c775":"df=df.dropna()\ndf.isnull().sum()","db472a71":"dict={}\nfor i in df.columns:\n    dict[i]=df[i].value_counts().shape[0]\n    \npd.DataFrame(dict,index=['Unique']).transpose()","c024e9d8":"df[\"Journey_day\"] = pd.to_datetime(df.Date_of_Journey, format=\"%d\/%m\/%Y\").dt.day\ndf['Journey_month']=pd.to_datetime(df.Date_of_Journey,format='%d\/%m\/%Y').dt.month\ndf.head()","65e60484":"df.drop([\"Date_of_Journey\"], axis = 1, inplace = True)\ndf.head()","f2f0de83":"df['Dep_Hr']=pd.to_datetime(df['Dep_Time']).dt.hour\ndf['Dep_mins']=pd.to_datetime(df['Dep_Time']).dt.minute\ndf.head()","58da2b9c":"df.drop(['Dep_Time'],axis=1,inplace=True)\ndf.head()","2532217b":"df['Arrival_Hr']=pd.to_datetime(df['Arrival_Time']).dt.hour\ndf['Arrival_mins']=pd.to_datetime(df['Arrival_Time']).dt.minute\ndf.drop(['Arrival_Time'],axis=1,inplace=True)\ndf.head()","58cdd50f":"duration=list(df['Duration'])\nfor i in range(len(duration)):\n    if len(duration[i].split()) !=2:\n        if 'h' in duration[i]:\n            duration[i]=duration[i].strip()+' 0m'\n        else:\n            duration[i]='0h '+duration[i]\n\nduration_hour=[]\nduration_mins=[]\nfor i in range(len(duration)):\n    duration_hour.append(int(duration[i].split(sep='h')[0]))\n    duration_mins.append(int(duration[i].split(sep='m')[0].split()[-1]))","90811ed5":"df['Duration_Hr']=duration_hour\ndf['Duration_min']=duration_mins","1cedf9d2":"df.drop(['Duration'],axis=1,inplace=True)\ndf.head()","4e44c75b":"df.drop(['Additional_Info','Route'],axis=1,inplace=True)\ndf.head()","e8fb8088":"df['Total_Stops'].unique()","2abb9d7b":"df['Total_Stops'].replace({'non-stop':0,'1 stop':1,'2 stops':2,'3 stops':3,'4 stops':4},inplace=True)\ndf.head()","f690a509":"heatmap_features=df.drop(['Airline','Source','Destination'],axis=1)\nheatmap_features.columns","902d2b5e":"plt.figure(figsize=(30,10))\nsns.countplot('Airline',data=df)","20fbc2cd":"plt.figure(figsize=(30,10))\nsns.catplot(x='Airline',y='Price',data=df.sort_values('Price',ascending=False),kind='boxen',height = 8, aspect = 3)\nplt.show()","5a9b8095":"sns.pairplot(data=df)","449468c1":"sns.catplot(x='Price',y='Source',data=df,kind='boxen')","93ad3760":"df=pd.get_dummies(df,drop_first=True)\ndf.head()","e9f98af8":"df.shape","dce5ee70":"for i in df.columns:\n    print(i)","8508cd50":"train_data=df","d304d991":"train_data.head()","b39af4dc":"test_data=pd.read_excel('..\/input\/flight-fare-prediction-mh\/Test_set.xlsx')\ntest_data.head()","17234e6e":"# Preprocessing\n\nprint(\"Test data Info\")\nprint(\"-\"*75)\nprint(test_data.info())\n\nprint()\nprint()\n\nprint(\"Null values :\")\nprint(\"-\"*75)\ntest_data.dropna(inplace = True)\nprint(test_data.isnull().sum())\n\n# EDA\n\n# Date_of_Journey\ntest_data[\"Journey_day\"] = pd.to_datetime(test_data.Date_of_Journey, format=\"%d\/%m\/%Y\").dt.day\ntest_data[\"Journey_month\"] = pd.to_datetime(test_data[\"Date_of_Journey\"], format = \"%d\/%m\/%Y\").dt.month\ntest_data.drop([\"Date_of_Journey\"], axis = 1, inplace = True)\n\n# Dep_Time\ntest_data[\"Dep_hour\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.hour\ntest_data[\"Dep_min\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.minute\ntest_data.drop([\"Dep_Time\"], axis = 1, inplace = True)\n\n# Arrival_Time\ntest_data[\"Arrival_hour\"] = pd.to_datetime(test_data.Arrival_Time).dt.hour\ntest_data[\"Arrival_min\"] = pd.to_datetime(test_data.Arrival_Time).dt.minute\ntest_data.drop([\"Arrival_Time\"], axis = 1, inplace = True)\n\n# Duration\nduration = list(test_data[\"Duration\"])\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins\n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n        else:\n            duration[i] = \"0h \" + duration[i]           # Adds 0 hour\n\nduration_hours = []\nduration_mins = []\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    # Extract hours from duration\n    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))   # Extracts only minutes from duration\n\n# Adding Duration column to test set\ntest_data[\"Duration_hours\"] = duration_hours\ntest_data[\"Duration_mins\"] = duration_mins\ntest_data.drop([\"Duration\"], axis = 1, inplace = True)\n\n\n# Categorical data\n\nprint(\"Airline\")\nprint(\"-\"*75)\nprint(test_data[\"Airline\"].value_counts())\nAirline = pd.get_dummies(test_data[\"Airline\"], drop_first= True)\n\nprint()\n\nprint(\"Source\")\nprint(\"-\"*75)\nprint(test_data[\"Source\"].value_counts())\nSource = pd.get_dummies(test_data[\"Source\"], drop_first= True)\n\nprint()\n\nprint(\"Destination\")\nprint(\"-\"*75)\nprint(test_data[\"Destination\"].value_counts())\nDestination = pd.get_dummies(test_data[\"Destination\"], drop_first = True)\n\n# Additional_Info contains almost 80% no_info\n# Route and Total_Stops are related to each other\ntest_data.drop([\"Route\", \"Additional_Info\"], axis = 1, inplace = True)\n\n# Replacing Total_Stops\ntest_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)\n\n# Concatenate dataframe --> test_data + Airline + Source + Destination\ndata_test = pd.concat([test_data, Airline, Source, Destination], axis = 1)\n\ndata_test.drop([\"Airline\", \"Source\", \"Destination\"], axis = 1, inplace = True)\n\nprint()\nprint()\n\nprint(\"Shape of test data : \", data_test.shape)","e2a6c39d":"plt.figure(figsize=(18,18))\nsns.heatmap(heatmap_features.corr(),annot=True,cmap = \"RdYlGn\")\nplt.show()","51cb4bf6":"X=train_data.drop(['Price'],axis=1)\ny=train_data['Price']","c52a2f04":"X.columns","f388dcca":"y","4c6c3643":"from sklearn.ensemble import ExtraTreesRegressor\nmodel=ExtraTreesRegressor()\nmodel.fit(X,y)","8502ee69":"print(model.feature_importances_)","dddae78a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","9c57e63c":"from sklearn.ensemble import RandomForestRegressor\nmodel=RandomForestRegressor()\nmodel.fit(X_train,y_train)","539ed97e":"y_pred=model.predict(X_test)","866c5214":"model.score(X_test,y_test)","495dd7d0":"model.score(X_train,y_train)","e43d2bbb":"sns.distplot(y_test-y_pred)\n","6ef1c3d1":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","8f602bf0":"metrics.r2_score(y_test, y_pred)","c25e4705":"from sklearn.model_selection import RandomizedSearchCV","538b5844":"n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10]","05eeba27":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","22b9c713":"rf_random = RandomizedSearchCV(estimator = model, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","4358ef52":"rf_random.fit(X_train,y_train)","8f1cdedf":"rf_random.best_params_","0d4b28b5":"prediction = rf_random.predict(X_test)","37178a12":"plt.figure(figsize = (5,5))\nsns.distplot(y_test-prediction)\nplt.show()","d3128a6f":"plt.figure(figsize = (8,8))\nplt.scatter(y_test, prediction, alpha = 0.5)\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()","72977de2":"print('MAE:', metrics.mean_absolute_error(y_test, prediction))\nprint('MSE:', metrics.mean_squared_error(y_test, prediction))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))","6d90a21d":"metrics.r2_score(y_test, prediction)","2583ed53":"## feature enginerring\n","ceddaab5":"## Selecting importance features from columns","8d3b2686":"## Hyptertuning model","8b829eea":"## date of jouney","5a866cfe":"## **IF YOU LIKE DO SHARE AND UPVOTE THE NOTEBOOK !!**","a13376d9":"## TEST DATA","c48686c3":"![flight .png](attachment:9ac2c28e-3a33-427e-a849-6b1a2f02d514.png)\n"}}