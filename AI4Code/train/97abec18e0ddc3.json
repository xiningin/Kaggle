{"cell_type":{"e013fbd3":"code","94787167":"code","24c71491":"code","1e95b68c":"code","712a0c90":"code","cf38fa70":"code","5e08a49b":"code","5befe581":"code","16d9a731":"code","e0bd826a":"code","79c810b1":"code","b9d4a868":"code","6e36ffbb":"code","acc9f923":"code","64a64917":"code","b24001b1":"code","03f39d70":"code","e5f01661":"code","e175c434":"code","d3154baa":"code","31b51694":"code","6e157603":"code","235a8064":"code","58c85c74":"code","b3b8a314":"code","848daee6":"code","6ed34393":"code","c008f860":"code","160912e3":"markdown","506a31fe":"markdown","a6c91fed":"markdown","509e38cc":"markdown","a02d7e8c":"markdown","11fccc88":"markdown","ba1efede":"markdown","48b9594f":"markdown","3392260a":"markdown","26a9d8da":"markdown","29cefdff":"markdown","0370a6e7":"markdown","28b88816":"markdown","afb53a8f":"markdown","c2764780":"markdown","78c6ed1c":"markdown"},"source":{"e013fbd3":"from time import time\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import regularizers\n\n#from sklearn.feature_extraction.text import TfidfVectorizer\n#from sklearn.metrics import confusion_matrix, classification_report\n#from sklearn.preprocessing import LabelEncoder\n\n","94787167":"# Detect TPU\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","24c71491":"from kaggle_datasets import KaggleDatasets\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\nGCS_PATH = KaggleDatasets().get_gcs_path('sentiment140')\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","1e95b68c":"!ls \/kaggle\/input\/","712a0c90":"df = pd.read_csv('..\/input\/sentiment140\/training.1600000.processed.noemoticon.csv', \n                 encoding=\"ISO-8859-1\",\n                 usecols=[0, 5],             #to take only 2 useful column\n                 names=[\"label\",\"tweet\"])\n\ndf['label'].replace([4, 0],[1, 0], inplace=True)\n","cf38fa70":"df['label'].value_counts()","5e08a49b":"df['label'].value_counts().plot(kind='bar')","5befe581":"import random \n\nrandom.seed(41)\ndf.iloc[random.sample(range(1, 1600000), 10), :]\n","16d9a731":"import re, nltk, string\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import TweetTokenizer\n\ntokenizer = TweetTokenizer(strip_handles=True)\nstop_words = set(stopwords.words('english'))\ncorpus = []","e0bd826a":"def clean(tweet): \n            \n    # Contractions\n    tweet = re.sub(r\"he's\", \"he is\", tweet)\n    tweet = re.sub(r\"there's\", \"there is\", tweet)\n    tweet = re.sub(r\"We're\", \"We are\", tweet)\n    tweet = re.sub(r\"That's\", \"That is\", tweet)\n    tweet = re.sub(r\"won't\", \"will not\", tweet)\n    tweet = re.sub(r\"they're\", \"they are\", tweet)\n    tweet = re.sub(r\"Can't\", \"Cannot\", tweet)\n    tweet = re.sub(r\"wasn't\", \"was not\", tweet)\n    tweet = re.sub(r\"don\\x89\u00db\u00aat\", \"do not\", tweet)\n    tweet = re.sub(r\"aren't\", \"are not\", tweet)\n    tweet = re.sub(r\"isn't\", \"is not\", tweet)\n    tweet = re.sub(r\"What's\", \"What is\", tweet)\n    tweet = re.sub(r\"haven't\", \"have not\", tweet)\n    tweet = re.sub(r\"hasn't\", \"has not\", tweet)\n    tweet = re.sub(r\"There's\", \"There is\", tweet)\n    tweet = re.sub(r\"He's\", \"He is\", tweet)\n    tweet = re.sub(r\"It's\", \"It is\", tweet)\n    tweet = re.sub(r\"You're\", \"You are\", tweet)\n    tweet = re.sub(r\"I'M\", \"I am\", tweet)\n    tweet = re.sub(r\"shouldn't\", \"should not\", tweet)\n    tweet = re.sub(r\"wouldn't\", \"would not\", tweet)\n    tweet = re.sub(r\"i'm\", \"I am\", tweet)\n    tweet = re.sub(r\"I\\x89\u00db\u00aam\", \"I am\", tweet)\n    tweet = re.sub(r\"I'm\", \"I am\", tweet)\n    tweet = re.sub(r\"Isn't\", \"is not\", tweet)\n    tweet = re.sub(r\"Here's\", \"Here is\", tweet)\n    tweet = re.sub(r\"you've\", \"you have\", tweet)\n    tweet = re.sub(r\"you\\x89\u00db\u00aave\", \"you have\", tweet)\n    tweet = re.sub(r\"we're\", \"we are\", tweet)\n    tweet = re.sub(r\"what's\", \"what is\", tweet)\n    tweet = re.sub(r\"couldn't\", \"could not\", tweet)\n    tweet = re.sub(r\"we've\", \"we have\", tweet)\n    tweet = re.sub(r\"it\\x89\u00db\u00aas\", \"it is\", tweet)\n    tweet = re.sub(r\"doesn\\x89\u00db\u00aat\", \"does not\", tweet)\n    tweet = re.sub(r\"It\\x89\u00db\u00aas\", \"It is\", tweet)\n    tweet = re.sub(r\"Here\\x89\u00db\u00aas\", \"Here is\", tweet)\n    tweet = re.sub(r\"who's\", \"who is\", tweet)\n    tweet = re.sub(r\"I\\x89\u00db\u00aave\", \"I have\", tweet)\n    tweet = re.sub(r\"y'all\", \"you all\", tweet)\n    tweet = re.sub(r\"can\\x89\u00db\u00aat\", \"cannot\", tweet)\n    tweet = re.sub(r\"would've\", \"would have\", tweet)\n    tweet = re.sub(r\"it'll\", \"it will\", tweet)\n    tweet = re.sub(r\"we'll\", \"we will\", tweet)\n    tweet = re.sub(r\"wouldn\\x89\u00db\u00aat\", \"would not\", tweet)\n    tweet = re.sub(r\"We've\", \"We have\", tweet)\n    tweet = re.sub(r\"he'll\", \"he will\", tweet)\n    tweet = re.sub(r\"Y'all\", \"You all\", tweet)\n    tweet = re.sub(r\"Weren't\", \"Were not\", tweet)\n    tweet = re.sub(r\"Didn't\", \"Did not\", tweet)\n    tweet = re.sub(r\"they'll\", \"they will\", tweet)\n    tweet = re.sub(r\"they'd\", \"they would\", tweet)\n    tweet = re.sub(r\"DON'T\", \"DO NOT\", tweet)\n    tweet = re.sub(r\"That\\x89\u00db\u00aas\", \"That is\", tweet)\n    tweet = re.sub(r\"they've\", \"they have\", tweet)\n    tweet = re.sub(r\"i'd\", \"I would\", tweet)\n    tweet = re.sub(r\"should've\", \"should have\", tweet)\n    tweet = re.sub(r\"You\\x89\u00db\u00aare\", \"You are\", tweet)\n    tweet = re.sub(r\"where's\", \"where is\", tweet)\n    tweet = re.sub(r\"Don\\x89\u00db\u00aat\", \"Do not\", tweet)\n    tweet = re.sub(r\"we'd\", \"we would\", tweet)\n    tweet = re.sub(r\"i'll\", \"I will\", tweet)\n    tweet = re.sub(r\"weren't\", \"were not\", tweet)\n    tweet = re.sub(r\"They're\", \"They are\", tweet)\n    tweet = re.sub(r\"Can\\x89\u00db\u00aat\", \"Cannot\", tweet)\n    tweet = re.sub(r\"you\\x89\u00db\u00aall\", \"you will\", tweet)\n    tweet = re.sub(r\"I\\x89\u00db\u00aad\", \"I would\", tweet)\n    tweet = re.sub(r\"let's\", \"let us\", tweet)\n    tweet = re.sub(r\"it's\", \"it is\", tweet)\n    tweet = re.sub(r\"can't\", \"cannot\", tweet)\n    tweet = re.sub(r\"don't\", \"do not\", tweet)\n    tweet = re.sub(r\"you're\", \"you are\", tweet)\n    tweet = re.sub(r\"i've\", \"I have\", tweet)\n    tweet = re.sub(r\"that's\", \"that is\", tweet)\n    tweet = re.sub(r\"i'll\", \"I will\", tweet)\n    tweet = re.sub(r\"doesn't\", \"does not\", tweet)\n    tweet = re.sub(r\"i'd\", \"I would\", tweet)\n    tweet = re.sub(r\"didn't\", \"did not\", tweet)\n    tweet = re.sub(r\"ain't\", \"am not\", tweet)\n    tweet = re.sub(r\"you'll\", \"you will\", tweet)\n    tweet = re.sub(r\"I've\", \"I have\", tweet)\n    tweet = re.sub(r\"Don't\", \"do not\", tweet)\n    tweet = re.sub(r\"I'll\", \"I will\", tweet)\n    tweet = re.sub(r\"I'd\", \"I would\", tweet)\n    tweet = re.sub(r\"Let's\", \"Let us\", tweet)\n    tweet = re.sub(r\"you'd\", \"You would\", tweet)\n    tweet = re.sub(r\"It's\", \"It is\", tweet)\n    tweet = re.sub(r\"Ain't\", \"am not\", tweet)\n    tweet = re.sub(r\"Haven't\", \"Have not\", tweet)\n    tweet = re.sub(r\"Could've\", \"Could have\", tweet)\n    tweet = re.sub(r\"youve\", \"you have\", tweet)  \n    tweet = re.sub(r\"don\u00e5\u00abt\", \"do not\", tweet)  \n    \n    tweet = re.sub(r\"some1\", \"someone\", tweet)\n    tweet = re.sub(r\"yrs\", \"years\", tweet)\n    tweet = re.sub(r\"hrs\", \"hours\", tweet)\n    tweet = re.sub(r\"2morow|2moro\", \"tomorrow\", tweet)\n    tweet = re.sub(r\"2day\", \"today\", tweet)\n    tweet = re.sub(r\"4got|4gotten\", \"forget\", tweet)\n    tweet = re.sub(r\"b-day|bday\", \"b-day\", tweet)\n    tweet = re.sub(r\"mother's\", \"mother\", tweet)\n    tweet = re.sub(r\"mom's\", \"mom\", tweet)\n    tweet = re.sub(r\"dad's\", \"dad\", tweet)\n    tweet = re.sub(r\"hahah|hahaha|hahahaha\", \"haha\", tweet)\n    tweet = re.sub(r\"lmao|lolz|rofl\", \"lol\", tweet)\n    tweet = re.sub(r\"thanx|thnx\", \"thanks\", tweet)\n    tweet = re.sub(r\"goood\", \"good\", tweet)\n    tweet = re.sub(r\"some1\", \"someone\", tweet)\n    tweet = re.sub(r\"some1\", \"someone\", tweet)\n    # Character entity references\n    tweet = re.sub(r\"&gt;\", \">\", tweet)\n    tweet = re.sub(r\"&lt;\", \"<\", tweet)\n    tweet = re.sub(r\"&amp;\", \"&\", tweet)\n    # Typos, slang and informal abbreviations\n    tweet = re.sub(r\"w\/e\", \"whatever\", tweet)\n    tweet = re.sub(r\"w\/\", \"with\", tweet)\n    tweet = re.sub(r\"<3\", \"love\", tweet)\n    # Urls\n    tweet = re.sub(r\"http\\S+\", \"\", tweet)\n    # Numbers\n    tweet = re.sub(r'[0-9]', '', tweet)\n    # Eliminating the mentions\n    tweet = re.sub(\"(@[A-Za-z0-9_]+)\",\"\", tweet)\n    # Remove punctuation and special chars (keep '!')\n    for p in string.punctuation.replace('!', ''):\n        tweet = tweet.replace(p, '')\n        \n    # ... and ..\n    tweet = tweet.replace('...', ' ... ')\n    if '...' not in tweet:\n        tweet = tweet.replace('..', ' ... ')\n        \n    # Tokenize\n    tweet_words = tokenizer.tokenize(tweet)\n    \n    # Eliminating the word if its length is less than 3\n    tweet = [w for w in tweet_words if len(w)>2]\n    \n    # remove stopwords\n    tweet = [w.lower() for w in tweet_words if not w in stop_words]  \n    \n    corpus.append(tweet)\n    \n    # join back\n    tweet = ' '.join(tweet)\n        \n        \n    return tweet     ","79c810b1":"abbreviations = {\n    \"$\" : \" dollar \",\n    \"\u20ac\" : \" euro \",\n    \"4ao\" : \"for adults only\",\n    \"a.m\" : \"before midday\",\n    \"a3\" : \"anytime anywhere anyplace\",\n    \"aamof\" : \"as a matter of fact\",\n    \"acct\" : \"account\",\n    \"adih\" : \"another day in hell\",\n    \"afaic\" : \"as far as i am concerned\",\n    \"afaict\" : \"as far as i can tell\",\n    \"afaik\" : \"as far as i know\",\n    \"afair\" : \"as far as i remember\",\n    \"afk\" : \"away from keyboard\",\n    \"app\" : \"application\",\n    \"approx\" : \"approximately\",\n    \"apps\" : \"applications\",\n    \"asap\" : \"as soon as possible\",\n    \"asl\" : \"age, sex, location\",\n    \"atk\" : \"at the keyboard\",\n    \"ave.\" : \"avenue\",\n    \"aymm\" : \"are you my mother\",\n    \"ayor\" : \"at your own risk\", \n    \"b&b\" : \"bed and breakfast\",\n    \"b+b\" : \"bed and breakfast\",\n    \"b.c\" : \"before christ\",\n    \"b2b\" : \"business to business\",\n    \"b2c\" : \"business to customer\",\n    \"b4\" : \"before\",\n    \"b4n\" : \"bye for now\",\n    \"b@u\" : \"back at you\",\n    \"bae\" : \"before anyone else\",\n    \"bak\" : \"back at keyboard\",\n    \"bbbg\" : \"bye bye be good\",\n    \"bbc\" : \"british broadcasting corporation\",\n    \"bbias\" : \"be back in a second\",\n    \"bbl\" : \"be back later\",\n    \"bbs\" : \"be back soon\",\n    \"be4\" : \"before\",\n    \"bfn\" : \"bye for now\",\n    \"blvd\" : \"boulevard\",\n    \"bout\" : \"about\",\n    \"brb\" : \"be right back\",\n    \"bros\" : \"brothers\",\n    \"brt\" : \"be right there\",\n    \"bsaaw\" : \"big smile and a wink\",\n    \"btw\" : \"by the way\",\n    \"bwl\" : \"bursting with laughter\",\n    \"c\/o\" : \"care of\",\n    \"cet\" : \"central european time\",\n    \"cf\" : \"compare\",\n    \"cia\" : \"central intelligence agency\",\n    \"csl\" : \"can not stop laughing\",\n    \"cu\" : \"see you\",\n    \"cul8r\" : \"see you later\",\n    \"cv\" : \"curriculum vitae\",\n    \"cwot\" : \"complete waste of time\",\n    \"cya\" : \"see you\",\n    \"cyt\" : \"see you tomorrow\",\n    \"dae\" : \"does anyone else\",\n    \"dbmib\" : \"do not bother me i am busy\",\n    \"diy\" : \"do it yourself\",\n    \"dm\" : \"direct message\",\n    \"dwh\" : \"during work hours\",\n    \"e123\" : \"easy as one two three\",\n    \"eet\" : \"eastern european time\",\n    \"eg\" : \"example\",\n    \"embm\" : \"early morning business meeting\",\n    \"encl\" : \"enclosed\",\n    \"encl.\" : \"enclosed\",\n    \"etc\" : \"and so on\",\n    \"faq\" : \"frequently asked questions\",\n    \"fawc\" : \"for anyone who cares\",\n    \"fb\" : \"facebook\",\n    \"fc\" : \"fingers crossed\",\n    \"fig\" : \"figure\",\n    \"fimh\" : \"forever in my heart\", \n    \"ft.\" : \"feet\",\n    \"ft\" : \"featuring\",\n    \"ftl\" : \"for the loss\",\n    \"ftw\" : \"for the win\",\n    \"fwiw\" : \"for what it is worth\",\n    \"fyi\" : \"for your information\",\n    \"g9\" : \"genius\",\n    \"gahoy\" : \"get a hold of yourself\",\n    \"gal\" : \"get a life\",\n    \"gcse\" : \"general certificate of secondary education\",\n    \"gfn\" : \"gone for now\",\n    \"gg\" : \"good game\",\n    \"gl\" : \"good luck\",\n    \"glhf\" : \"good luck have fun\",\n    \"gmt\" : \"greenwich mean time\",\n    \"gmta\" : \"great minds think alike\",\n    \"gn\" : \"good night\",\n    \"g.o.a.t\" : \"greatest of all time\",\n    \"goat\" : \"greatest of all time\",\n    \"goi\" : \"get over it\",\n    \"gps\" : \"global positioning system\",\n    \"gr8\" : \"great\",\n    \"gratz\" : \"congratulations\",\n    \"gyal\" : \"girl\",\n    \"h&c\" : \"hot and cold\",\n    \"hp\" : \"horsepower\",\n    \"hr\" : \"hour\",\n    \"hrh\" : \"his royal highness\",\n    \"ht\" : \"height\",\n    \"ibrb\" : \"i will be right back\",\n    \"ic\" : \"i see\",\n    \"icq\" : \"i seek you\",\n    \"icymi\" : \"in case you missed it\",\n    \"idc\" : \"i do not care\",\n    \"idgadf\" : \"i do not give a damn fuck\",\n    \"idgaf\" : \"i do not give a fuck\",\n    \"idk\" : \"i do not know\",\n    \"ie\" : \"that is\",\n    \"i.e\" : \"that is\",\n    \"ifyp\" : \"i feel your pain\",\n    \"IG\" : \"instagram\",\n    \"iirc\" : \"if i remember correctly\",\n    \"ilu\" : \"i love you\",\n    \"ily\" : \"i love you\",\n    \"imho\" : \"in my humble opinion\",\n    \"imo\" : \"in my opinion\",\n    \"imu\" : \"i miss you\",\n    \"iow\" : \"in other words\",\n    \"irl\" : \"in real life\",\n    \"j4f\" : \"just for fun\",\n    \"jic\" : \"just in case\",\n    \"jk\" : \"just kidding\",\n    \"jsyk\" : \"just so you know\",\n    \"l8r\" : \"later\",\n    \"lb\" : \"pound\",\n    \"lbs\" : \"pounds\",\n    \"ldr\" : \"long distance relationship\",\n    \"lmao\" : \"laugh my ass off\",\n    \"lmfao\" : \"laugh my fucking ass off\",\n    \"lol\" : \"laughing out loud\",\n    \"ltd\" : \"limited\",\n    \"ltns\" : \"long time no see\",\n    \"m8\" : \"mate\",\n    \"mf\" : \"motherfucker\",\n    \"mfs\" : \"motherfuckers\",\n    \"mfw\" : \"my face when\",\n    \"mofo\" : \"motherfucker\",\n    \"mph\" : \"miles per hour\",\n    \"mr\" : \"mister\",\n    \"mrw\" : \"my reaction when\",\n    \"ms\" : \"miss\",\n    \"mte\" : \"my thoughts exactly\",\n    \"nagi\" : \"not a good idea\",\n    \"nbc\" : \"national broadcasting company\",\n    \"nbd\" : \"not big deal\",\n    \"nfs\" : \"not for sale\",\n    \"ngl\" : \"not going to lie\",\n    \"nhs\" : \"national health service\",\n    \"nrn\" : \"no reply necessary\",\n    \"nsfl\" : \"not safe for life\",\n    \"nsfw\" : \"not safe for work\",\n    \"nth\" : \"nice to have\",\n    \"nvr\" : \"never\",\n    \"nyc\" : \"new york city\",\n    \"oc\" : \"original content\",\n    \"og\" : \"original\",\n    \"ohp\" : \"overhead projector\",\n    \"oic\" : \"oh i see\",\n    \"omdb\" : \"over my dead body\",\n    \"omg\" : \"oh my god\",\n    \"omw\" : \"on my way\",\n    \"p.a\" : \"per annum\",\n    \"p.m\" : \"after midday\",\n    \"pm\" : \"prime minister\",\n    \"poc\" : \"people of color\",\n    \"pov\" : \"point of view\",\n    \"pp\" : \"pages\",\n    \"ppl\" : \"people\",\n    \"prw\" : \"parents are watching\",\n    \"ps\" : \"postscript\",\n    \"pt\" : \"point\",\n    \"ptb\" : \"please text back\",\n    \"pto\" : \"please turn over\",\n    \"qpsa\" : \"what happens\", \n    \"ratchet\" : \"rude\",\n    \"rbtl\" : \"read between the lines\",\n    \"rlrt\" : \"real life retweet\", \n    \"rofl\" : \"rolling on the floor laughing\",\n    \"roflol\" : \"rolling on the floor laughing out loud\",\n    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n    \"rt\" : \"retweet\",\n    \"ruok\" : \"are you ok\",\n    \"sfw\" : \"safe for work\",\n     \"sk8\" : \"skate\",\n    \"smh\" : \"shake my head\",\n    \"sq\" : \"square\",\n    \"srsly\" : \"seriously\", \n    \"ssdd\" : \"same stuff different day\",\n    \"tbh\" : \"to be honest\",\n    \"tbs\" : \"tablespooful\",\n    \"tbsp\" : \"tablespooful\",\n    \"tfw\" : \"that feeling when\",\n    \"thks\" : \"thank you\",\n    \"tho\" : \"though\",\n    \"thx\" : \"thank you\",\n    \"tia\" : \"thanks in advance\",\n    \"til\" : \"today i learned\",\n    \"tl;dr\" : \"too long i did not read\",\n    \"tldr\" : \"too long i did not read\",\n    \"tmb\" : \"tweet me back\",\n    \"tntl\" : \"trying not to laugh\",\n    \"ttyl\" : \"talk to you later\",\n    \"u\" : \"you\",\n    \"u2\" : \"you too\",\n    \"u4e\" : \"yours for ever\",\n    \"utc\" : \"coordinated universal time\",\n    \"w\/\" : \"with\",\n    \"w\/o\" : \"without\",\n    \"w8\" : \"wait\",\n    \"wassup\" : \"what is up\",\n    \"wb\" : \"welcome back\",\n    \"wtf\" : \"what the fuck\",\n    \"wtg\" : \"way to go\",\n    \"wtpa\" : \"where the party at\",\n    \"wuf\" : \"where are you from\",\n    \"wuzup\" : \"what is up\",\n    \"wywh\" : \"wish you were here\",\n    \"yd\" : \"yard\",\n    \"ygtr\" : \"you got that right\",\n    \"ynk\" : \"you never know\",\n    \"zzz\" : \"sleeping bored and tired\"\n}","b9d4a868":"def convert_abbrev_in_text(tweet):\n    t=[]\n    words=tweet.split()\n    t = [abbreviations[w.lower()] if w.lower() in abbreviations.keys() else w for w in words]\n    return ' '.join(t)  ","6e36ffbb":"%%time\n\ndf['tweet']=df['tweet'].apply(lambda s : clean(s))\ndf['tweet']=df['tweet'].apply(lambda s : convert_abbrev_in_text(s))","acc9f923":"# Take a look at back, first sample, before cleaning.\n# So data is more clean now \nrandom.seed(41)\ndf.iloc[random.sample(range(1, 1600000), 10), :]","64a64917":"df = df.to_csv('cleaned_sentiment140.csv', index=False)","b24001b1":"embedding_dim = 100    # glove6b100\nmax_length = 20        # max lenght of a tweet\ntrunc_type='post'      # it will cut the tweet if it is longer than 20\npadding_type='post'    # it will add zeros at the end the tweets if is smaller than 20\noov_tok = \"<OOV>\"      # for unseen words \ntraining_size=1600000\ntest_portion=.025","03f39d70":"import csv\n\nnum_sentences = 0\ncorpus = []\n\nwith open(\"\/kaggle\/working\/cleaned_sentiment140.csv\") as csvfile:\n    reader = csv.reader(csvfile, delimiter=',')\n    for row in reader:\n        list_item=[]\n        list_item.append(row[1])\n        this_label=row[0]\n        if this_label=='0':\n            list_item.append(0)\n        else:\n            list_item.append(1)\n        num_sentences = num_sentences + 1\n        corpus.append(list_item)","e5f01661":"print(num_sentences)\nprint(len(corpus))\nprint(corpus[1])","e175c434":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\nsentences=[]\nlabels=[]\n\nrandom.shuffle(corpus)\nfor x in range(training_size):\n    sentences.append(corpus[x][0])\n    labels.append(corpus[x][1])\n\n\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(sentences)\n\nword_index = tokenizer.word_index\nvocab_size=len(word_index)\n\nsequences = tokenizer.texts_to_sequences(sentences)\npadded = pad_sequences(sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n\nsplit = int(test_portion * training_size)\n\ntest_sequences = padded[0:split]\ntraining_sequences = padded[split:training_size]\ntest_labels = labels[0:split]\ntraining_labels = labels[split:training_size]","d3154baa":"print(vocab_size)\nprint(word_index['ok']) ","31b51694":"!ls \/kaggle\/input\/glove6b100dtxt","6e157603":"embeddings_index = {};\n\nwith open('\/kaggle\/input\/glove6b100dtxt\/glove.6B.100d.txt') as f:\n    for line in f:\n        values = line.split();\n        word = values[0];\n        coefs = np.asarray(values[1:], dtype='float32');\n        embeddings_index[word] = coefs;\n\nembeddings_matrix = np.zeros((vocab_size+1, embedding_dim));\nfor word, i in word_index.items():\n    embedding_vector = embeddings_index.get(word);\n    if embedding_vector is not None:\n        embeddings_matrix[i] = embedding_vector;","235a8064":"print(embeddings_matrix.shape)","58c85c74":"embeddings_index['love']","b3b8a314":"def cosine_similarity(u, v):\n\n    distance = 0.0\n    \n    # the dot product between u and v \n    dot = np.dot(u, v)\n    # the L2 norm of u \n    norm_u = np.sqrt(np.sum((u)**2))\n    \n    # the L2 norm of v \n    norm_v = np.sqrt(np.sum((v)**2))\n    # the cosine similarity defined by formula \n    cosine_similarity = dot\/(norm_u*norm_v)\n    \n    return cosine_similarity","848daee6":"girl = embeddings_index[\"girl\"]\nboy = embeddings_index[\"boy\"]\nrap = embeddings_index[\"rap\"]\njazz = embeddings_index[\"jazz\"]\nfrance = embeddings_index[\"france\"]\nitaly = embeddings_index[\"italy\"]\nparis = embeddings_index[\"paris\"]\nrome = embeddings_index[\"rome\"]\n\nprint(\"cosine_similarity(girl, boy) = \", cosine_similarity(girl, boy))\nprint(\"cosine_similarity(rap, jazz) = \",cosine_similarity(rap, jazz))\nprint(\"cosine_similarity(france - paris, rome - italy) = \",cosine_similarity(france - paris, rome - italy))","6ed34393":"with strategy.scope():    \n    \n    model = tf.keras.Sequential([\n        tf.keras.layers.Embedding(vocab_size+1, embedding_dim, input_length=max_length, weights=[embeddings_matrix], trainable=False),\n        tf.keras.layers.Dropout(0.5),\n        tf.keras.layers.Bidirectional(LSTM(units=64, return_sequences=True)),\n        tf.keras.layers.Bidirectional(LSTM(units=128)),\n        tf.keras.layers.Dense(64, activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n        tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\n    model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n    model.summary()\n    \n    num_epochs = 15\n    \n    training_padded = np.array(training_sequences)\n    training_labels = np.array(training_labels)\n    testing_padded = np.array(test_sequences)\n    testing_labels = np.array(test_labels)\n    \n    history = model.fit(training_padded, \n                        training_labels, \n                        epochs=num_epochs, \n                        validation_data=(testing_padded, testing_labels),\n                        batch_size = 256,\n                        verbose=1)\n    \n    print(\"Training Complete\")","c008f860":"import matplotlib.image  as mpimg\n\n#-----------------------------------------------------------\n# Retrieve a list of list results on training and test data\n# sets for each training epoch\n#-----------------------------------------------------------\nacc=history.history['accuracy']\nval_acc=history.history['val_accuracy']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(len(acc)) # Get number of epochs\n\n#------------------------------------------------\n# Plot training and validation accuracy per epoch\n#------------------------------------------------\nplt.plot(epochs, acc, 'r')\nplt.plot(epochs, val_acc, 'b')\nplt.title('Training and validation accuracy')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend([\"Accuracy\", \"Validation Accuracy\"])\n\nplt.figure()\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot(epochs, loss, 'r')\nplt.plot(epochs, val_loss, 'b')\nplt.title('Training and validation loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\", \"Validation Loss\"])\n\nplt.figure()","160912e3":"- It is normal that we have a nasty text.\n- Tweet texts often consist of other user mentions, hyperlink texts, emoticons, and punctuations. \n- They have no value as a feature to a Language Model. \n- So we have to clean the text data using various preprocessing and cleaning methods. ","506a31fe":"# Model Building - LSTM\n\n- LSTM is one type of RNN that can enable you to account for long-term dependencies. It's more powerful and general than GRU.\n\n## Word Embeddings\n\n- instead of a one-hot presentation, we use word embeddings that is a featurized representation.\n\n- It lets your algorithm automatically understand the analogies between words like \"king\" and \"queen\".\n\n- The goal here is to be able to generate similar or close representational vectors for words that have similar meaning\n\n\n\n![word embeddings](https:\/\/images.ctfassets.net\/ek6qkphcgu1d\/4wZz3jHGzeemy26iCM02mO\/7937a93b3edf8bfbbc785a0f9e86fe4c\/Chinese-Word-Vectors_2.png)","a6c91fed":"### Define some parameters that we will use ","509e38cc":"## Cleaning The Data","a02d7e8c":"### Cosine Similarity\n\n- To measure the similarity between two words, we need a way to measure the degree of similarity between two embedding vectors for the two words","11fccc88":"# Data Cleaning and Text Prepocessing\n\n## Some Informations","ba1efede":"#### Clean() function","48b9594f":"- You can download the cleaned and saved csv file \n- otherwhise the code below will take 7 minutes.\n- df = pd.read_csv('cleaned_sentiment140.csv')","3392260a":"# Libraries","26a9d8da":"### Global Vectors for Word Representation (GloVe)\n\n- Building and training good word embeddings is a tremendous process requiring millions of data samples and exceptional computational power.\n- GloVe is an algorithm for learning the word embedding. It's the one of the simplest.","29cefdff":"- Let's look at the data randomly","0370a6e7":"\n\n#### abbreviations dictinory = {...}","28b88816":"# Introduction\n\n* **Natural Language Processing (NLP):** The discipline of computer science, artificial intelligence and linguistics that is concerned with the creation of computational models that process and understand natural language.\n\n* **Sentiment Analysis:** It is the interpretation and classification of emotions (positive, negative and neutral) within text data using text analysis techniques. Sentiment analysis allows organizations to identify public sentiment towards certain words or topics.\n\nIn this notebook, we'll develop a **Sentiment Analysis model** to categorize a tweet as **Positive or Negative.**\n\n<font color='red'> IF YOU FIND THIS NOTEBOOK HELPFUL, PLEASE LEAVE A UPVOTE :) THANKS IN ADVANCE <\/font>","afb53a8f":"- Let's define a function that clean every word in a sentence.\n- This function dependent on each usease\n- if you try to clean all error(abbreviation, misspelling etc.) you will probably overfit the data\n","c2764780":"# Dataset\n\n- The dataset contains 1,600,000 tweets \n- The tweets have been labeled **(0 = Negative, 4 = Positive)**.\n","78c6ed1c":"### Stemming \n\nStemming algorithms work by cutting off the end or the beginning of the word, taking into account a list of common prefixes and suffixes that can be found in an inflected word.\n\n\n### Lemmatization\n\nLemmatization is the process of reducing the different forms of a word to one single form, for example, reducing \"builds\", \"building\", or \"built\". So the classifier will treat all variants of a given word as being references to the original lemma word. \n![Steaming and Lemmatization](https:\/\/miro.medium.com\/max\/1170\/1*uVgEZI7UFLMjHqemI_MzGA.png)\n\n## Hyperlinks and Mentions\n\nThe tweets often contain lots of Hyperlinks and twitter mentions.\n\n## Stopwords\n\nStopwords are commonly used words which have no contextual meaning in an sentence. \n\n## Tokenization\n\n- In order to feed our text data to a classification model, we first need to tokenize it.\n- Tokenization is the process of splitting up a single string of text into a list of individual words, or tokens.\n- TweetTokenizer; a Twitter-aware tokenizer provided by the nltk library  that are well suited for the tweets use case."}}