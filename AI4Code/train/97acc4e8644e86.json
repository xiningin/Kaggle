{"cell_type":{"791c496a":"code","891b5244":"code","4f1c8e94":"code","cf9a7201":"code","9b2b8080":"code","93721b12":"code","8812a38d":"code","ceb7e3d0":"code","af2d87a0":"code","16d53768":"code","7906b0a5":"code","bbd49a8c":"code","6bb488e1":"code","7a677b9c":"code","93390597":"code","edc2e0ac":"code","f01f9b0d":"code","74a7243c":"code","41a9ef1a":"code","bf4cd5ec":"code","317e1f25":"code","8d0fedfd":"code","b1d3def1":"code","27527546":"code","de52b40a":"code","583e5a6a":"code","c0d77766":"code","089bd09a":"code","140abb3d":"code","74200953":"code","d0432eee":"code","fe659aba":"code","6e8fdc04":"code","1b67f323":"code","1e4bfcb0":"code","50b2e1b1":"code","df66efa0":"code","d56b9cee":"markdown","e892fe1b":"markdown","048fb7a1":"markdown"},"source":{"791c496a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","891b5244":"city_temp = pd.read_csv('\/kaggle\/input\/historical-hourly-weather-data\/temperature.csv')\n","4f1c8e94":"city_temp.head()","cf9a7201":"city_temp.shape","9b2b8080":"vancouver_temp = city_temp[['datetime', 'Vancouver']]","93721b12":"vancouver_temp.head()\nvancouver_temp.shape","8812a38d":"missing_values = vancouver_temp.isnull().sum()\nprint(missing_values)","ceb7e3d0":"#remove missing values\nvancouver_temp = vancouver_temp.dropna()\nmissing_values = vancouver_temp.isnull().sum()\nprint(missing_values)","af2d87a0":"vancouver_temp.shape","16d53768":"import datetime\n\n#day in sequence, day in year, hour, temperature \n\n#graph first \n#print(vancouver_temp['datetime'][1])\n#convert to datetime \n\n#date_time_obj = datetime.datetime.strptime(date_time_str, '%Y-%m-%d %H:%M:%S')\n\ndate_parsed = pd.to_datetime(vancouver_temp['datetime'], format = '%Y-%m-%d %H:%M:%S')\n\n#X = vancouver_temp['datetime']\n#y = ['Vancouver']\n","7906b0a5":"#print(date_parsed[1].hour) # int\n#print(date_parsed[1].dayofyear) # int\n\ndayofyear = [datetime.dayofyear for datetime in date_parsed ]\nhourofday = [datetime.hour for datetime in date_parsed]\n\n#print(dayofyear)\n#print(len(dayofyear))\n\n#print(hourofday)\n#print(len(hourofday))\n\nX = np.vstack((dayofyear, hourofday)).T\ny = vancouver_temp['Vancouver']\n\n","bbd49a8c":"print(X.shape)\nprint(y.shape)","6bb488e1":"import matplotlib.pyplot as plt\n\nplt.plot(vancouver_temp.iloc[:100*24, 0],y[:100*24])\nplt.title('Temp for 100 days')\nplt.xlabel('day')\nplt.ylabel('Temp kelvin')\nplt.show()\n","7a677b9c":"from sklearn.model_selection import train_test_split\n\n\n#get features and labels... \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# get different test sets \n\n# get different train sets \n\n","93390597":"# Scalarize the data\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n","edc2e0ac":"#  Random Forest \nfrom sklearn.ensemble import RandomForestRegressor\n\nregr = RandomForestRegressor()\n\nregr.fit(X_train, y_train)\n","f01f9b0d":"regr.score(X_test, y_test)","74a7243c":"from sklearn.svm import SVR\n\nregr = SVR(C=1.0, epsilon=0.2)   \nregr.fit(X_train, y_train)\n","41a9ef1a":"regr.score(X_test, y_test)","bf4cd5ec":"from sklearn.linear_model import SGDRegressor\n\nreg = SGDRegressor()\nreg.fit(X, y)","317e1f25":"reg.score(X_test, y_test)","8d0fedfd":"from sklearn.neural_network import MLPRegressor\n\nregr = MLPRegressor(random_state=1, max_iter=500).fit(X_train, y_train)\n","b1d3def1":"regr.score(X_test, y_test)","27527546":"print(X[0:20]) \nprint(y[0:20])\nprint(X[20]) \nprint(y[20])","de52b40a":"# plot hour 11 --> 35\n\nX_test = X[11:35] #day and hour\nactual_temps = y[11:35]\n\ntest = scaler.transform(hours)\npredictions = regr.predict(X_test)\n","583e5a6a":"print(predictions.shape)\nprint(actual_temps.shape)\n","c0d77766":"\nplt.title('Temperature predictions for a day')\nplt.plot( X_test[:, 1], actual_temps, marker='o', color='skyblue', linewidth=2)\nplt.plot( X_test[:, 1], predictions, marker='x', color='olive', linewidth=2)\nplt.xlabel('hour')\nplt.ylabel('Temp kelvin')\nplt.show()\n","089bd09a":"minitrain = X[:10*24] # 10 days of training data \ntrain_labels = y[:10*24] \nminitest = X[10*24:10*24+48] # 1 day of testing data\ntest_labels = y[10*24:10*24+48]\n","140abb3d":"print(minitrain.shape)\nprint(minitest.shape)\n","74200953":"from sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n\nregr = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))\nregr.fit(minitrain, train_labels)\n","d0432eee":"print(train_labels[216:240]) # last 20 hours before test\nprint(test_labels) # 24 hours of test labels ","fe659aba":"print(regr.score(minitest, test_labels))\n\npredictions = regr.predict(minitest)\nfor p in predictions: \n    print(p)","6e8fdc04":"minitrain = X[:2*24] # 10 days of training data \ntrain_labels = y[:2*24] \nminitest = X[2*24:2*24+24] # 1 day of testing data\ntest_labels = y[2*24:2*24+24]\n","1b67f323":"print(minitrain.shape)\nprint(minitest.shape)","1e4bfcb0":"from sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nregr = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))\nregr.fit(minitrain, train_labels)","50b2e1b1":"#print(minitrain[24:48])\nprint(train_labels[24:48])\n#print(minitest)\nprint(test_labels)","df66efa0":"print(regr.score(minitest, test_labels))\n\npredictions = regr.predict(minitest)\nfor p in predictions: \n    print(p)","d56b9cee":"While score is technically poor, predictions show that the trend is there and within 2-3 degrees for each prediction. This would fair well on the test... now we want to see performance with less training data and more tests ","e892fe1b":"Regressor even with very small amounts of training data can identify sinusoidal trend of temp data. ","048fb7a1":"With large amounts of testing data the regressor does very well. Non linear models do significantly better "}}