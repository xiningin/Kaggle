{"cell_type":{"cc1c7136":"code","a1686619":"code","b546e74d":"code","19782090":"code","0ae97ded":"code","922c2fcb":"code","69569308":"code","da166189":"code","5d935efd":"code","478019d9":"code","d5119bef":"code","6280f727":"code","9033c54c":"code","436db209":"code","c660cf84":"markdown","b4866f45":"markdown","901774ea":"markdown","2925008b":"markdown","827a142c":"markdown","48c18ab2":"markdown","73bd30fa":"markdown","8fab8462":"markdown","b268e0bb":"markdown","84a4e092":"markdown","7358f5bc":"markdown"},"source":{"cc1c7136":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n       print(os.path.join(dirname, filename))\n        \nimport warnings\nwarnings.filterwarnings(\"ignore\")","a1686619":"cases=pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ndeaths=pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\nrecovered=pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\nit_cases= pd.read_csv(\"\/kaggle\/input\/covid19-in-italy\/covid19_italy_region.csv\")\n       \n#Concat\/transpose\/rename\ndf=pd.concat( [cases[cases[\"Country\/Region\"]==\"Italy\"],deaths[deaths[\"Country\/Region\"]==\"Italy\"],recovered[recovered[\"Country\/Region\"]==\"Italy\"]], ignore_index=True)\ndf=df.T\ndf=df.drop([\"Province\/State\",\"Country\/Region\",\"Lat\",\"Long\"])\ndf=df.rename(columns={0:\"cases\", 1:\"deaths\",2:\"recovered\" })\ndf.index=pd.to_datetime(df.index, format='%m\/%d\/%y')\ndf.tail(10)\n\n","b546e74d":"# adding recent data (source https:\/\/en.wikipedia.org\/wiki\/2020_coronavirus_pandemic_in_Italy)\n\n#df=df[:-1]\n#new_data = pd.DataFrame({ \"dates\":['2020-03-23', '2020-03-24','2020-03-25'],\n#                          \"cases\":[63927, 69176, 74386], \n#                          \"deaths\":[6077, 6820, 7503],\n#                         \"recovered\":[7432,8326,9362]}) \n\n#new_data.set_index(\"dates\", inplace=True, drop=True)\n#new_data.index=pd.to_datetime(new_data.index, format='%Y\/%m\/%d')\n#df=pd.concat([df,new_data])\n#df.tail(20)","19782090":"#Correct errors\ndf.loc[df.index == \"2020\/03\/12\", ['cases','deaths',\"recovered\"]] = [15133,1016,1228]\n\n# ADD metrics\n#current cases\ndf[\"N\"]=df[\"cases\"]-df[\"deaths\"]-df[\"recovered\"]\n#death rate\ndf=df[df.cases>0]\ndf[\"dr\"]=df[\"deaths\"]\/df[\"cases\"]\n#growth rate\ndf[\"gr\"]=df[\"N\"]\/df[\"N\"].shift(+1)\n\n\ndf.tail(30)","0ae97ded":"#visualize new metrics\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nfigure(num=None, figsize=(25, 4), dpi=80)\n\nplt.subplot(1,3,1)\nplt.plot(df[\"N\"])\nplt.xticks(rotation='vertical')\nplt.title (\"Current cases: N\")\n\nplt.subplot(1,3,2)\nplt.plot(df[\"dr\"])\nplt.xticks(rotation='vertical')\nplt.title (\"death rate\")\n\nplt.subplot(1,3,3)\nplt.plot(df[df.cases> 250].gr)\nplt.xticks(rotation='vertical')\nplt.title (\"Growth Rate\")\n\n","922c2fcb":"#removing values before the quarantine started and preparing dataset for linear modelling\n\nfrom datetime  import datetime\n\nlimit=\"2020-03-09\"\n\ngrdata=pd.DataFrame()\ngrdata[\"ds\"]=df.index.values\ngrdata[\"y\"]=df.gr.values\ngrdata[\"ds\"]=pd.to_datetime(grdata[\"ds\"], format='%m\/%d\/%y')\ngrdata=grdata[grdata.ds >= limit]\ngrdata.head(10)\n","69569308":"#Prophet linear modelling (Growth Rate := today\/yesterday)\n\nfrom fbprophet import Prophet\n\nmod = Prophet(weekly_seasonality=False, interval_width=0.80)\nmod.fit(grdata)\n\nfuture = mod.make_future_dataframe(periods=15)\nforecast = mod.predict(future)\nfig2 = mod.plot(forecast)","da166189":"#calculate future values of cases\nforecast[\"fc\"]=\"0\"\nforecast.set_index(forecast[\"ds\"], inplace=True)\nforecast.index=pd.to_datetime(forecast.index, format=\"%Y-%m-%d\")\ntoday=df.tail(1).index.values[0]\n\nforecast2=forecast.iloc[forecast.index>today]\n\nforecast2[\"fc\"]= forecast[forecast.index>today][\"yhat\"].cumprod()\nforecast2[\"fco\"]= forecast[forecast.index>today][\"yhat_lower\"].cumprod()\nforecast2[\"fcp\"]= forecast[forecast.index>today][\"yhat_upper\"].cumprod()\n\nforecast2[\"fc\"]= forecast2[\"fc\"]*df.tail(1).N.values[0]\nforecast2[\"fco\"]= forecast2[\"fco\"]*df.tail(1).N.values[0]\nforecast2[\"fcp\"]= forecast2[\"fcp\"]*df.tail(1).N.values[0]\n","5d935efd":"#combine historical data and forecast\noutput=pd.concat([df,forecast2])\n#output.tail(45)","478019d9":"figure(num=None, figsize=(25, 4), dpi=80)\nplt.ylim((0,100000))\nplt.xticks(rotation='vertical')\n\nplt.plot(output[\"N\"])\nplt.plot(output[\"fc\"])\nplt.plot(output[\"fco\"])\nplt.plot(output[\"fcp\"])\n","d5119bef":"#group by region\nreg_cases=it_cases.groupby(['RegionName','Date'])[['CurrentPositiveCases']].sum()\n\n#new cases by region\nreg_cases['NewCases']=reg_cases['CurrentPositiveCases']-reg_cases['CurrentPositiveCases'].shift(+1)\nreg_cases.loc[reg_cases.NewCases <=0, [\"NewCases\"]] = 0\nreg_cases=reg_cases.reset_index()\n\n#format date\nreg_cases['Date']=reg_cases['Date'].str.slice(stop=10)\n\n# total daily cases\nnew_cases=reg_cases.groupby(['Date'])[['NewCases']].sum()\nnew_cases=new_cases.rename(columns={\"NewCases\": \"Tot\"})\n\n# filter on date (after the quarantine  started)\nreg_cases_q=reg_cases[reg_cases.Date>='2020-03-09'][['Date','RegionName','NewCases']]\nreg_cases_q=reg_cases_q.join(new_cases, on='Date')\nreg_cases_q['New']=reg_cases_q['NewCases']\/reg_cases_q['Tot']\nreg_cases_q=reg_cases_q.sort_values([\"Date\",\"New\",],ascending=False)\nreg_cases_q.reset_index()\n\n#regional contribution of new cases\nreg_cases_q['cumsum']=0\n\nfor date in reg_cases_recent['Date'].drop_duplicates():\n    reg_cases_recent.loc[reg_cases_recent.Date==date, ['cumsum']]=reg_cases_recent[reg_cases_recent.Date==date]['New'].cumsum()\n","6280f727":"#plot regions that generated most of the cases in the last 10 days\n\nfigure(num=None, figsize=(30, 15), dpi=80)\nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=1)\n\ni=1\ndates=reg_cases_q['Date'].drop_duplicates().sort_values()\n\nfor date in dates:\n    \n    bardata=reg_cases_q[(reg_cases_q['Date']==date)&(reg_cases_q[\"cumsum\"]<0.8)]\n    bardata.sort_values('New', inplace=True, ascending=False)\n    \n    plt.subplot(5,5,i)\n    plt.title(date)\n    plt.bar(bardata['RegionName'], bardata['New'])\n    plt.xticks(rotation='vertical')\n    i=i+1\n","9033c54c":"figure(num=None, figsize=(15, 5), dpi=80)\n\ntop_regions=reg_cases_q.groupby(['RegionName'])[['New']].mean()\ntop_regions=top_regions.sort_values('New', ascending=False)\ntop_regions=top_regions.head(6) \n\nA=reg_cases_q.join(top_regions.drop(\"New\", axis=1), how=\"inner\", on=\"RegionName\")\nA=A.sort_values(\"Date\")\n\nbars= pd.DataFrame({\"Date\":[],\"Regions\":[],\"percentage\":[],\"cumsum\":[]})\n\nfor date in dates:\n    bar= pd.DataFrame({\"Date\":[],\"Regions\":[],\"percentage\":[],\"cumsum\":[]})\n    for region in top_regions.index:\n        r = pd.DataFrame({'Date':[date],'Regions':[region],'percentage':[A[(A.RegionName==region)&(A.Date==date)].New.values[0]]})\n        bar=bar.append(r)\n\n    bar[\"cumsum\"]=bar[\"percentage\"].cumsum()\n    other=pd.DataFrame({'Date':[date],'Regions':[\"Other\"],'percentage':[1-bar[\"cumsum\"].max()], \"cumsum\":[bar[\"cumsum\"].max()]})\n    bar=bar.append(other)\n    bar[\"cumsum\"]=bar[\"cumsum\"].shift(+1).fillna(0)\n    \n    \n    bars=bars.append(bar)\n\n    \ndate_lab = dates\nwidth=5\nN=np.arange((width+2)*dates.shape[0], step=(width+2))\nfig, ax = plt.subplots(figsize=(15,5))\n\n\nfor region in bars.Regions.drop_duplicates():\n   ax.bar(N, bars[(bars.Regions==region)]['percentage'], width, bottom=bars[(bars.Regions==region)]['cumsum'], label=region)\n    \nax.set_ylabel('percentage of daily cases')\nax.set_title(\"New daily cases % by region\")\nplt.xticks(N,dates )\nplt.xticks(rotation='vertical')\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n","436db209":"figure(num=None, figsize=(14, 3), dpi=80)\nplt.xticks(rotation='vertical')\nplt.plot(new_cases[new_cases.index>=\"2020-03-09\"])\nplt.title(\"New cases\")\n","c660cf84":"# Which regions are generating most of the new Cases?\n\n","b4866f45":"Removing outliers and recalculating the line using only the most recent values revealed a slower decrease than initially expected.\n","901774ea":"# Model description:","2925008b":"First, add the following metrics\n               \n* 1. N Current Cases \n* 2. DR Death Rate\n* 3. GR Growth rate","827a142c":"Despite the growth rate shows a clear decreasing trend, it has been hard to determine the correct slope due to the presence of outliers in the early days of the outbreak.  The country went into a full lockdown on March 9th.\n","48c18ab2":"# Model:","73bd30fa":"Keeping an eye on which regions are contributing to the residual growth over time. The bar chart shows the origin of the new cases each day.","8fab8462":"![00.jpg](attachment:00.jpg)","b268e0bb":"In this notebook I will try to model the active COVID19 cases in Italy during the quarantine. I'm no epidemiologist, so I will just test if a simple mathematical model on the total number of active cases is enough to get some valuable information and assess the change in growth. ","84a4e092":"# Forecast:","7358f5bc":"Tiny adjustments in the slope of the linear model  cause disproportional impacts on the number of cases at peak time."}}