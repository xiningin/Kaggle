{"cell_type":{"691a97c1":"code","c8e1130c":"code","c47a6027":"code","456a5bce":"code","e9308290":"code","4bf2baea":"code","4ae7c192":"code","7cc685b4":"code","e2f47762":"markdown","d12345b6":"markdown","5d9831bb":"markdown","d290710d":"markdown","a7426238":"markdown"},"source":{"691a97c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('..\/input\/haarcascadefrontalfaces\/'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n","c8e1130c":"train_dir = '\/kaggle\/input\/deepfake-detection-challenge\/train_sample_videos\/'\ntrain_video_files = [train_dir + x for x in os.listdir(train_dir)]\ntest_dir = '\/kaggle\/input\/deepfake-detection-challenge\/test_videos\/'\ntest_video_files = [test_dir + x for x in os.listdir(test_dir)]","c47a6027":"df_train = pd.read_json('\/kaggle\/input\/deepfake-detection-challenge\/train_sample_videos\/metadata.json').transpose()\ndf_train.head()","456a5bce":"df_train.label.value_counts()","e9308290":"df_train.label.value_counts().plot(kind='pie')","4bf2baea":"import cv2\n# Load the cascade\nface_cascade = cv2.CascadeClassifier('..\/input\/haarcascadefrontalfaces\/haarcascade_frontalface_default.xml')\ncolumns = 1\nrows = 10\nplt.figure(figsize=(100, 100))\n# To capture video from webcam. \n#cap = cv2.VideoCapture(0)\n# To use a video file as input \n#_,img = cap.read()\nfor i in range(1, columns*rows+1):\n    cap = cv2.VideoCapture(train_video_files[i])\n    _,img = cap.read()\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # Detect the faces\n    faces = face_cascade.detectMultiScale(gray,1.1, 5)\n    # Draw the rectangle around each face\n    for (x, y, w, h) in faces:\n        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 5)\n    # Display\n    name_video = train_video_files[i].split('\/', 5)[5]\n    df=df_train[df_train.index == name_video] \n    label=df['label'].values[0]\n    #ax.set_title(label)\n    plt.subplot(rows, columns, i)\n    plt.imshow(img)\n    #x=img.shape[1]\n    plt.text(1000,1000, str(label),\n             fontsize=18, ha='center',backgroundcolor='black', color='white', weight='bold')\n    cap.release()\nplt.show()","4ae7c192":"import cv2\n# Load the cascade\nface_cascade = cv2.CascadeClassifier('..\/input\/haarcascadefrontalfaces\/haarcascade_frontalface_default.xml')\ncolumns = 1\nrows = 5\nplt.figure(figsize=(100, 100))\n# To capture video from webcam. \n#cap = cv2.VideoCapture(0)\n# To use a video file as input \n#_,img = cap.read()\nfor i in range(1, 5):\n    cap = cv2.VideoCapture(test_video_files[i])\n    _,img = cap.read()\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # Detect the faces\n    faces = face_cascade.detectMultiScale(gray,1.1, 5)\n    # Draw the rectangle around each face\n    for (x, y, w, h) in faces:\n        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 5)\n    # Display\n    name_video = train_video_files[i].split('\/', 5)[5]\n    #df=df_train[df_train.index == name_video] \n    #label=df['label'].values[0]\n    #ax.set_title(label)\n    plt.subplot(rows, columns, i)\n    plt.imshow(img)\n    #x=img.shape[1]\n    plt.text(1000,1000, str(name_video),\n             fontsize=18, ha='center',backgroundcolor='black', color='white', weight='bold')\n    cap.release()\nplt.show()","7cc685b4":"df = pd.read_csv(\"\/kaggle\/input\/deepfake-detection-challenge\/sample_submission.csv\")\ndf['label'] = 0.5 #maximum are fake\ndf.loc[df['filename'] == 'aassnaulhq.mp4', 'label'] = 0 # Guess the true value\ndf.loc[df['filename'] == 'aayfryxljh.mp4', 'label'] = 0\ndf.loc[df['filename'] == 'alrtntfxtd.mp4', 'label'] = 0\ndf.loc[df['filename'] == 'ayipraspbn.mp4', 'label'] = 0\ndf.to_csv('submission.csv', index=False)","e2f47762":"## Loading Data","d12345b6":"## Count The Real and Fake Videos","5d9831bb":"## Analyzing Testing Videos By Face Detection and Finding The Video Name","d290710d":"## Analyzing Training Videos By Face Detection","a7426238":"## Manual Detection From Testing Videos"}}