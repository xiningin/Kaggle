{"cell_type":{"f189936d":"code","99b1d0e9":"code","3a9e9003":"code","a664b3cb":"code","bc646cbb":"code","119e5369":"code","fcc5fbc9":"code","758c8994":"code","c5451028":"code","12f80a28":"code","80e94982":"code","a8d5674a":"code","b52181b5":"code","69e91917":"code","5fc3c1d0":"markdown","81d51f22":"markdown","81f30139":"markdown","047443a4":"markdown","c86428ac":"markdown","67f2bc30":"markdown","05dc1375":"markdown","e72d50f8":"markdown","b3284f24":"markdown","114789ad":"markdown","9893a354":"markdown","ac9bedb2":"markdown","20ae3e6f":"markdown","c009d2a4":"markdown","7d8651b2":"markdown","a4e4e6d2":"markdown","34b11422":"markdown","7d82ccde":"markdown","934b81a8":"markdown","ee7f4b50":"markdown","727fd7d9":"markdown","9bacc91c":"markdown","215b5ae1":"markdown","ca856ba4":"markdown","e60d4c31":"markdown","454448f0":"markdown","78e3a03a":"markdown"},"source":{"f189936d":"import pandas as pd\nimport numpy as np\nimport io\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport pandas_profiling\nimport plotly.express as px\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,LSTM\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import *\n%matplotlib inline\nwarnings.filterwarnings('ignore')","99b1d0e9":"df = pd.read_csv('..\/input\/omicron-covid19-variant-daily-cases\/covid-variants.csv',\n                 index_col='date',\n                infer_datetime_format=True)","3a9e9003":"def analysis(df):\n    \n    \n    print(\"------------DIMENSIONS ----------\")\n    print(\"Observation:\", df.shape[0], \"Column:\", df.shape[1], \"\\n\")\n\n    print(\"--------------DTYPES------------- \")\n    if len(df.select_dtypes(\"object\").columns) > 0:\n        print(\"Object Variables:\", \"\\n\", \"variables:\", \n              len(df.select_dtypes(\"object\").columns), \"\\n\", \n              df.select_dtypes(\"object\").columns.tolist(), \"\\n\")\n\n    if len(df.select_dtypes(\"integer\").columns) > 0:\n        print(\"Integer Variables:\", \"\\n\", \"variables:\", \n              len(df.select_dtypes(\"integer\").columns), \"\\n\", \n              df.select_dtypes(\"integer\").columns.tolist(), \"\\n\")\n\n    if len(df.select_dtypes(\"float\").columns) > 0:\n        print(\"Float Variables:\", \"\\n\", \"variables:\", \n              len(df.select_dtypes(\"float\").columns), \"\\n\", \n              df.select_dtypes(\"float\").columns.tolist(), \"\\n\")\n\n    if len(df.select_dtypes(\"bool\").columns) > 0:\n        print(\"Bool Variables:\", \"\\n\", \"variables:\", \n              len(df.select_dtypes(\"bool\").columns), \"\\n\", \n              df.select_dtypes(\"bool\").columns.tolist(), \"\\n\")\n\n    print(\"--------------MISSING VALUE----------\")\n    print(\"Any missing values? \\n \", np.where(df.isnull().values.any() == False,  \"No missing value\u274c\", \"Data includes missing value\u2714\ufe0f\"), \"\\n\")\n\n    buf = io.StringIO()\n    df.info(buf=buf)\n    info = buf.getvalue().split('\\n')[-2].split(\":\")[1].strip()\n    print(\"--------------MEMORY USAGE------------ \\n\", info)\n    \n    return df","a664b3cb":"df = analysis(df)\ndf.head()","bc646cbb":"profiling = pandas_profiling.ProfileReport(df)\nprofiling.to_file(\"profiling.html\")\nprofiling\n","119e5369":"sample  = df.rename(columns={\"location\":\"Location\",\"num_sequences_total\":\"Number of Case\"})\nfig = px.treemap(sample, path=[px.Constant('Number of Case'),'Location'], values='Number of Case',\n                   hover_data=['Location'])\nfig.show()","fcc5fbc9":"for virus in df.variant.unique():\n    dataframe = df.loc[df['variant'] == virus].groupby('location')['num_sequences'].agg('sum').sort_values(ascending=False)[:10]\n    dataframe = pd.DataFrame({'Location':dataframe.index, 'Number of Case':dataframe.values})\n    plt.figure(figsize=(8,2),dpi=200)\n    sns.barplot(y='Location',x=\"Number of Case\",data=dataframe,palette=\"Blues_d\")\n    plt.title('COUNTRIES HAVE MORE {} CASES THAN OTHERS'.format(virus),loc='center',fontweight=\"bold\")","758c8994":"sample = df.loc[df['variant'] == 'Omicron'].groupby('date')['num_sequences'].agg('sum')\ndataframe = pd.DataFrame({'Date':sample.index, 'Number of Case':sample.values})\nfig = px.area(dataframe, y=\"Number of Case\",x='Date')\nfig.show()","c5451028":"#omicron = df.loc[df['variant'] == 'Omicron']","12f80a28":"class CovidPredictor:\n    \n    \n    def __init__(self,length=80,batch_size=1):\n        self.length = length\n        self.batch_size = batch_size\n    \n    def model(self,length,batch_size,scaled_train,scaled_test):\n        \n        generator = TimeseriesGenerator(scaled_train, scaled_train, length=length, batch_size=batch_size)\n        model = Sequential()\n        model.add(LSTM(100,input_shape=(length,scaled_train.shape[1])))\n        model.add(Dense(scaled_train.shape[1]))\n\n        model.compile(optimizer='rmsprop', loss='mean_squared_error')\n        model.summary()\n        early_stop = EarlyStopping(monitor='val_loss',patience=25)\n        validation_generator = TimeseriesGenerator(scaled_test,scaled_test, \n                                           length=length, batch_size=batch_size)\n        model.fit_generator(generator,epochs=100,\n                    validation_data=validation_generator,\n                   callbacks=[early_stop])\n        \n        print(model.history.history.keys())\n        plt.figure(figsize=(15,5))\n        losses = pd.DataFrame(model.history.history)\n        losses.plot()\n        plt.show()\n        return model\n    \n    def performance(self,model):\n        \n        model.history.history.keys()\n        losses = pd.DataFrame(model.history.history)\n        return losses\n    \n    def predict(self,model,scaled_train,scaled_test,test_lenght):\n        \n        features = scaled_train.shape[1]\n        pred = []\n\n        first_batch = scaled_train[-test_lenght:]\n        batch = first_batch.reshape((1, test_lenght, features))\n\n        for i in range(test_lenght):\n            pred_frs = model.predict(batch)[0]\n            pred.append(pred_frs) \n            batch = np.append(batch[:,1:,:],[[pred_frs]],axis=1)\n        return pred\n    \n    def scale(self,train,test):\n        \n        scaler = MinMaxScaler()\n        scaler.fit(train)\n        scaled_train = scaler.transform(train)\n        scaled_test = scaler.transform(test)\n        return scaler,scaled_train,scaled_test,train,test\n    \n    def inverse(self,data,scaler):\n        \n        test= scaler.inverse_transform(data)\n        return test\n    \n    def data_preb(self,data,index_size):\n        try:\n            cols = ['location','variant','perc_sequences','num_sequences']\n            data.drop(cols,axis=1,inplace=True)\n        except:\n            pass\n        data.sort_index(ascending=True,inplace=True)\n        train = data.iloc[:index_size]\n        test = data.iloc[index_size:]\n        scaler,scaled_train,scaled_test,train,test = self.scale(train,test)\n        return scaler,scaled_train,scaled_test,train,test\n    \n    def measure_error(self,true,test):\n        \n        print(mean_absolute_error(true,test))\n        print(mean_squared_error(true,test))\n        print(r2_score(true,test))","80e94982":"covid = CovidPredictor()\nhelp(covid)","a8d5674a":"df['Time'] = df.index\ndata = pd.DataFrame(df.groupby('Time')['num_sequences_total'].sum())\nscaler,scaled_train,scaled_test,train,test = covid.data_preb(data,40)","b52181b5":"model = covid.model(length=4,batch_size=1,scaled_train=scaled_train,scaled_test=scaled_test)","69e91917":"prediction = covid.predict(model,scaled_train,scaled_test,5)\npreds = covid.inverse(prediction,scaler)\npreds = pd.DataFrame(preds,columns=['Pred'],index=test.index)\nplt.figure(figsize=(15,5))\nplt.plot(test.values, linewidth=2, markersize=1,label=\"True\")\nplt.plot(preds, linewidth=2, markersize=1,label=\"Predictions\")\nplt.title(\"Forcasting\",loc='center', fontdict={'fontsize': 30, 'fontweight': 'bold'})\nplt.legend()","5fc3c1d0":"# \ud83d\udd30`END`\ud83d\udd30","81d51f22":"> This Process will have long output \ud83d\ude07 keep scrolling  \ud83d\udcdc","81f30139":"### Train Our Model\u2714\ufe0f","047443a4":"### `Read Data`","c86428ac":"`Result not bad either not good, It works somehow`","67f2bc30":"# \u2618\ufe0fAIM\u2618\ufe0f","05dc1375":"## Call Our Class and Create instance\ud83d\udd33","e72d50f8":"# \ud83d\udd5e\ud83d\udd5f\ud83d\udd54\ud83d\udd60\ud83d\udd55\ud83d\udd61\ud83d\udd56\ud83d\udd62 `Time Series Generator`\ud83d\udd5b\ud83d\udd67\ud83d\udd67\ud83d\udd50\ud83d\udd5c\ud83d\udd51\ud83d\udd5d\ud83d\udd52\n\nThis class takes in a sequence of data-points gathered at\nequal intervals, along with time series parameters such as\nstride, length of history, etc., to produce batches for\ntraining\/validation.\n\n#### `Arguments`\n    data: Indexable generator (such as list or Numpy array)\n        containing consecutive data points (timesteps).\n        The data should be at 2D, and axis 0 is expected\n        to be the time dimension.\n    targets: Targets corresponding to timesteps in `data`.\n        It should have same length as `data`.\n    length: Length of the output sequences (in number of timesteps).\n    sampling_rate: Period between successive individual timesteps\n        within sequences. For rate `r`, timesteps\n        `data[i]`, `data[i-r]`, ... `data[i - length]`\n        are used for create a sample sequence.\n    stride: Period between successive output sequences.\n        For stride `s`, consecutive output samples would\n        be centered around `data[i]`, `data[i+s]`, `data[i+2*s]`, etc.\n    start_index: Data points earlier than `start_index` will not be used\n        in the output sequences. This is useful to reserve part of the\n        data for test or validation.\n    end_index: Data points later than `end_index` will not be used\n        in the output sequences. This is useful to reserve part of the\n        data for test or validation.\n    shuffle: Whether to shuffle output samples,\n        or instead draw them in chronological order.\n    reverse: Boolean: if `true`, timesteps in each output sample will be\n        in reverse chronological order.\n    batch_size: Number of timeseries samples in each batch\n        (except maybe the last one).","b3284f24":"# `Pandas Profiling`\n`Lets doing this more fun and easy.`","114789ad":"# `FORECAST`\ud83d\udd25\ud83d\udd25\ud83d\udd25","9893a354":"\n## \u203c\ufe0f`Stay 6 feet away from others`\u203c\ufe0f\nInside your home \nAvoid close contact with people who are sick.\nIf possible, maintain 6 feet between the person who is sick and other household members.\nOutside your home \nRemember that some people without symptoms may be able to spread virus.\nStay at least 6 feet (about 2 arm lengths) from other people, especially if you are at higher risk of getting very sick.\n## \ud83e\uddfc`Wash your hands often`\ud83e\uddfc\nWash your hands often with soap and water for at least 20 seconds especially after you have been in a public place, or after blowing your nose, coughing, or sneezing.\nIt\u2019s especially important to wash your hands:\n* Before eating or preparing food\n* Before touching your face\n* After using the restroom\n* After leaving a public place\n* After blowing your nose, coughing, or sneezing\n* After handling your mask\n* After changing a diaper\n* After caring for someone sick\n* After touching animals or pets**\nIf soap and water are not readily available, use a hand sanitizer that contains at least 60% alcohol. Cover all surfaces of your hands and rub them together until they feel dry.\nAvoid touching your eyes, nose, and mouth with unwashed hands.\nbox tissue light icon\n\n\n\n## \ud83d\ude37`Cover coughs and sneezes`\ud83d\ude37\nIf you are wearing a mask: You can\u202fcough or sneeze into your mask. Put on a new, clean mask as soon as possible and wash your hands.\nIf you are not wearing a mask:\nAlways cover your mouth and nose with a tissue when you cough or sneeze, or use the inside of your elbow and do not spit.\nThrow used tissues in the trash.\nImmediately wash your hands with soap and water for at least 20 seconds. If soap and water are not readily available, clean your hands with a hand sanitizer that contains at least 60% alcohol.\nspraybottle icon\n## \ud83d\udec0`Clean and disinfect`\nClean high touch surfaces regularly or as needed and after you have visitors in your home. This includes tables, doorknobs, light switches, countertops, handles, desks, phones, keyboards, toilets, faucets, and sinks.\nIf someone is sick or has tested positive for COVID-19, disinfect frequently touched surfaces.\nUse a household disinfectant product from EPA\u2019s List N: Disinfectants for Coronavirus (COVID-19)external icon according to manufacturer\u2019s labeled directions.\nIf surfaces are dirty, clean them using detergent or soap and water prior to disinfection.\nhead side medical light icon\n## \u2728 `Monitor your health daily`\nBe alert for symptoms:\nWatch for fever, cough, shortness of breath, or other symptoms of COVID-19.\nTake your temperature if symptoms develop.\nDon\u2019t take your temperature within 30 minutes of exercising or after taking medications that could lower your temperature, like acetaminophen.\nFollow CDC guidance if symptoms develop.\nMonitoring symptoms is especially important if you are running errands, going into the office or workplace, and in settings where it may be difficult to keep a physical distance of 6 feet.","ac9bedb2":"# `LIBRARIES`\ud83d\udcdc","20ae3e6f":"# Quicke Protection Guide \u2714\ufe0f","c009d2a4":"> This Process will have long output \ud83d\ude07 keep scrolling  \ud83d\udcdc","7d8651b2":"### `Most affected countries(by Covid-19)`\ud83c\udf0e\n#### `The USA was the country that shared the number of cases most transparently from the very beginning.`\ud83d\udcca\n#### `While other countries were doing this, the numbers were a little low at first, but later the real numbers were reflected.`","a4e4e6d2":"## `OMICRON`\ud83e\udd7a","34b11422":"\n<div style=\"width:100%;text-align: center;\"> <img align=middle src=\"https:\/\/pa1.narvii.com\/6292\/ce507693b01eb658851d77a7b601902509c63b03_hq.gif\" alt=\"Heat beating\" style=\"height:700px;margin-top:3rem;\"> <\/div>\n\n### `I HOPE YOU ENJOY`","7d82ccde":"`covid-variants.csv` Covid Data anlysis\n\nHeader | Definition\n---|---------\n`Date`| Time From Begining of Covid \n`Location` | All Countries affected by Covid\n`Variant` | The Kind of Covid  \n`Number Of Sequence` |Daily number of Covid Case per kind?\n`Perc Sequences` | Percentage of Case\n`Probationary` | Sometimes the character was given probationary status as an Avenger, this is the date that happened\n`Number Of Total` | Total Case In Each Country","934b81a8":"### \ud83d\udd25OUR MODEL FOR FORCASTE\ud83d\udd25","ee7f4b50":"# `CONSEPT OF DATA`","727fd7d9":"### In this case , we are going to explore coronaviruse and its variants. Beside this we will analysis every country. Also, which variant widly spread to each country.\n### We are going to try bulit forcasting model for find coranaviruse cases count and  Our Model is going to run with LSTM model ","9bacc91c":"### It looks like we have good result even though very small data set\ud83e\udd13","215b5ae1":"> `While sharing this notebook, I analyzed the spread data of \ud83e\udda0omicron\ud83e\udda0, since the most common type of corona is omicron.`\n\n> As you can see it started from end of 2021 and wildy spread to world","ca856ba4":"#### `The Graphs below shows that which variant of Covid-19 widely spread for each country`\n### Every Varinat and Its popularity ","e60d4c31":"### Overall,We have finished all data analysis. Now we have a model and we have enough information about the coronavirus and its variants. Take care of yourself. Wear a mask\ud83d\ude37, keep your distance.\ud83d\udccd ","454448f0":"### Lets get information about data\nLets write function for this aim. This is the traditional analysis","78e3a03a":"`LETS TALK ABOUT TIME SERIES GENERATOR`"}}