{"cell_type":{"fc6625be":"code","04e16b3a":"code","066df3b8":"code","f6af5a68":"code","cadfda6b":"code","8f157ce6":"code","f4c0b019":"code","f4c31d84":"code","1cdd57b8":"code","64f5be72":"code","6125b07d":"code","124e1957":"code","7637c928":"code","b84893fa":"code","f8a33a5e":"code","391e0669":"code","64e37135":"code","95c7f09e":"code","063b3f21":"code","b6396605":"code","31da69be":"code","ccf73659":"code","2994f500":"code","6c8f194d":"code","2cb9acb4":"code","dbe03fbb":"code","3177db28":"code","f7f04b37":"code","f2bbae46":"code","b5b381df":"code","8bbf9f69":"code","c1ae1df7":"code","4c2d30c4":"code","e5478a73":"code","5d271772":"code","d3d64762":"code","d02eaf4c":"code","bafe18e1":"code","965b54d9":"code","e571e4c2":"code","66d656dd":"code","aa7489b7":"code","45a40ca5":"code","eebf1e5a":"code","4ac483a5":"code","f8e78f44":"code","b2cd3883":"code","57b7b8da":"code","b8f45ac6":"code","b2b9aa19":"code","dac205e2":"code","be6cb185":"code","35ba04ea":"code","d994723b":"code","b3ba82a9":"code","070de7e9":"code","96e7f470":"code","8ca3142e":"code","3aa0dc5c":"code","65447c5b":"code","96db56d4":"code","89fb0aaa":"code","497e10ad":"code","d372c3be":"code","595a1c68":"code","04ca7065":"code","f2072030":"code","87a5c724":"code","431445be":"code","13f69f3a":"code","6c32307e":"code","5c2b5faa":"code","72c989c5":"code","38068cd2":"code","bf68fc6e":"code","6fc0d73d":"code","94391be8":"code","f20da09d":"code","cb0141e2":"code","74c8374d":"code","3705170f":"code","adb785ae":"code","24171c94":"code","d071de2c":"code","91094ead":"markdown","afa75413":"markdown","3725d307":"markdown","df0750e8":"markdown","09023868":"markdown","15f5ccf3":"markdown","045dcdcb":"markdown","d6bd0186":"markdown","4062eedb":"markdown","e44aef32":"markdown","0e352ba2":"markdown","db4ed69d":"markdown","67447e63":"markdown","8db28afa":"markdown","37ca5bdd":"markdown","bba75440":"markdown","82d51f50":"markdown","c630c9d7":"markdown","01add792":"markdown","d8245858":"markdown","8a375dd0":"markdown","84b90715":"markdown","d6de8816":"markdown","2991dccb":"markdown","27b9dbd3":"markdown","e4e4bc91":"markdown","3d5eb326":"markdown","b8b0bc74":"markdown","6a94bd4c":"markdown","b3f2ccf4":"markdown","07a211e6":"markdown","c6982b91":"markdown","414f2a7a":"markdown","2acc2f0c":"markdown","52380080":"markdown","41a7d8b5":"markdown","623e5d08":"markdown","18139d73":"markdown","f51bfd98":"markdown","03880e84":"markdown","76cb0c69":"markdown","f09b03f2":"markdown","e0e4d0b5":"markdown","9b284bac":"markdown","6c824461":"markdown","24b25eeb":"markdown","47406aae":"markdown","59faa3dc":"markdown"},"source":{"fc6625be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use(\"seaborn-whitegrid\")\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","04e16b3a":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","066df3b8":"train_df.columns","f6af5a68":"train_df.head()","cadfda6b":"train_df.describe()","8f157ce6":"train_df.info()","f4c0b019":"def barplot(variable):\n    \"\"\"\n    input : variable example: \"Sex\"\n    output : barplot & value count\n        \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count categories\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Count\")\n    plt.title(variable)\n    plt.show()\n    print(f\"{variable}: \\n {varValue}\")","f4c31d84":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor i in category1:\n    barplot(i)","1cdd57b8":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor i in category2:\n    print(f\"{train_df[i].value_counts()} \\n\")","64f5be72":"def plothist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Sample count\")\n    plt.title(f\"{variable} distribution with histogram\")\n    plt.show()","6125b07d":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor i in numericVar:\n    plothist(i)","124e1957":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","7637c928":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","b84893fa":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","f8a33a5e":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","391e0669":"def detect_outliers(df,features):\n    outlier_indices = []\n    for c in features:\n        # 1st quartile\n        q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = q3 - q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect outlier and their indices\n        outlier_list_col = df[(df[c] < q1 - outlier_step) | (df[c] > q3 + outlier_step)].index\n        # Store indices\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    return multiple_outliers","64e37135":"train_df.loc[detect_outliers(train_df,[\"Age\",\"Parch\",\"SibSp\",\"Fare\"])]","95c7f09e":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"Parch\",\"SibSp\",\"Fare\"]),axis=0).reset_index(drop = True)","063b3f21":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop=True)","b6396605":"train_df.columns[train_df.isnull().any()]","31da69be":"train_df.isnull().sum()","ccf73659":"train_df[train_df[\"Embarked\"].isnull()]","2994f500":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()\nplt.show()","6c8f194d":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","2cb9acb4":"train_df[train_df[\"Fare\"].isnull()]","dbe03fbb":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","3177db28":"train_df[train_df[\"Fare\"].isnull()]","f7f04b37":"list1 = [\"SibSp\",\"Age\",\"Fare\",\"Parch\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","f2bbae46":"g = sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","b5b381df":"g = sns.factorplot(x=\"Parch\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","8bbf9f69":"g = sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","c1ae1df7":"g = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","4c2d30c4":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\")\ng.add_legend()\ng.map(plt.hist,\"Age\",bins = 25)\nplt.show()","e5478a73":"g = sns.FacetGrid(train_df,row=\"Embarked\",size=2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","5d271772":"g = sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\",size=2.5)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","d3d64762":"train_df[train_df[\"Age\"].isnull()]","d02eaf4c":"sns.factorplot(x = \"Sex\",y = \"Age\",data = train_df, kind = \"box\")\nplt.show()","bafe18e1":"sns.factorplot(x = \"Sex\",y = \"Age\",hue=\"Pclass\",data = train_df, kind = \"box\")\nplt.show()","965b54d9":"sns.factorplot(x = \"Parch\",y = \"Age\",data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\",y = \"Age\",data = train_df, kind = \"box\")\nplt.show()","e571e4c2":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]\nsns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","66d656dd":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","aa7489b7":"train_df[train_df[\"Age\"].isnull()]","45a40ca5":"train_df[\"Name\"].head(10)","eebf1e5a":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","4ac483a5":"train_df[\"Title\"].head(10)","f8e78f44":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","b2cd3883":"# Convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i==\"Ms\" or i==\"Mlle\" or i==\"Mrs\" else 2 if i ==\"Mr\" else 3 for i in train_df[\"Title\"]]","57b7b8da":"g = sns.factorplot(x=\"Title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","b8f45ac6":"train_df.drop(labels=[\"Name\"],axis=1,inplace=True)","b2b9aa19":"train_df.head()","dac205e2":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","be6cb185":"train_df.head()","35ba04ea":"train_df[\"FSize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","d994723b":"train_df.head()","b3ba82a9":"g = sns.factorplot(x=\"FSize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival Probability\")\nplt.show()","070de7e9":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"FSize\"]]","96e7f470":"train_df.head(20)","8ca3142e":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","3aa0dc5c":"g = sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival Probability\")\nplt.show()","65447c5b":"train_df = pd.get_dummies(train_df,columns=[\"family_size\"])","96db56d4":"train_df.head()","89fb0aaa":"train_df[\"Embarked\"].head()","497e10ad":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","d372c3be":"train_df = pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","595a1c68":"train_df[\"Ticket\"].head(20)","04ca7065":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","f2072030":"train_df[\"Ticket\"].head(20)","87a5c724":"train_df = pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.head(10)","431445be":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","13f69f3a":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Pclass\"])\ntrain_df.head()","6c32307e":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head()","5c2b5faa":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","72c989c5":"train_df.columns","38068cd2":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","bf68fc6e":"train_df_len","6fc0d73d":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)","94391be8":"test.head()","f20da09d":"train = train_df[:train_df_len]\nx_train = train.drop(labels=\"Survived\",axis=1)\ny_train = train[\"Survived\"]\nx_train,x_test,y_train,y_test = train_test_split(x_train,y_train,test_size=0.33,random_state=42)\nprint(\"x_train\",len(x_train))\nprint(\"x_test\",len(x_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","cb0141e2":"lr = LogisticRegression()\nlr.fit(x_train,y_train)\nacc_lr_train = round(lr.score(x_train,y_train) * 100,2)\nacc_lr_test = round(lr.score(x_test,y_test) * 100,2)\nprint(f\"Train accuracy: %{acc_lr_train}\")\nprint(f\"Test accuracy: %{acc_lr_test}\")","74c8374d":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state=random_state),\n              SVC(random_state=random_state),\n             RandomForestClassifier(random_state=random_state),\n             LogisticRegression(random_state=random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\" : range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\" : [0.001,0.01,0.1,1],\n                 \"C\" : [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\" : [1,3,10],\n                \"min_samples_split\" : [2,3,10],\n                \"min_samples_leaf\" : [1,3,10],\n                \"bootstrap\" : [False],\n                \"n_estimators\" : [100,300],\n                \"criterion\" : [\"gini\"]}\n\nlr_param_grid = {\"C\" : np.logspace(-3,3,7),\n                \"penalty\" : [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\" : np.linspace(1,19,10,dtype=int).tolist(),\n                 \"weights\" : [\"uniform\",\"distance\"],\n                 \"metric\" : [\"euclidean\",\"manhattan\"]}\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   lr_param_grid,\n                   knn_param_grid]","3705170f":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i],param_grid = classifier_param[i],cv=StratifiedKFold(n_splits = 10),scoring = \"accuracy\",n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","adb785ae":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","24171c94":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],voting = \"soft\",n_jobs = -1)\n\nvotingC = votingC.fit(x_train,y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","d071de2c":"test_survived = pd.Series(votingC.predict(test),name=\"Survived\").astype(int)\nresults = pd.concat([test_PassengerId,test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index = False)","91094ead":"* The more passenger has the SibSp feature,we have the less chance to survive.\n* If SibSp == 0, 1 or 2, passenger has more chance to survive.\n* We can consider a new feature describing these categories.","afa75413":"## SibSp - Survived  <a id=13><\/a>","3725d307":"## Pclass <a id=\"26\"><\/a>","df0750e8":"* Survival rate of female passenger is greater than male passengers survival rate.\n* Male passengers have better survival rate when Pclass is equal to 3 in C.\n* Embarked and Sex will be used in training.","09023868":"## Family Size <a id=23><\/a>","15f5ccf3":"## Fill Missing : Age feature <a id=20><\/a>","045dcdcb":"Fare feature seems to have correlation with Survived feature. (0.26)","d6bd0186":"* Age raises backwards Pclass.","4062eedb":"## Name - Title <a id=22><\/a>","e44aef32":"* Age <= 10 has a high survival rate.\n* Oldest passengers (80) survived.\n* Large part of 20 years old passengers couldn't survive.\n* Most passengers are in 15-35 Age range.\n* Use Age feature in training.\n* Use age distribution for missing values of Age.","0e352ba2":"## Pclass - Survived <a id=15><\/a>","db4ed69d":"## Ticket <a id=\"25\"><\/a>","67447e63":"## Drop PassengerId and Cabin <a id=\"28\"><\/a>","8db28afa":"## Parch - Survived <a id=14><\/a>","37ca5bdd":"# Outlier Detection <a id=7><\/a>","bba75440":"## Embarked <a id=24><\/a>","82d51f50":"## Sex <a id=\"27\"><\/a>","c630c9d7":"* SibSp and Parch can be used for feature extraction with threshold = 3\n* The passengers with Parch = 4 has no chance to survive.\n* Small families have more chance to survive.\n* There is a standard in survival of passenger with Parch = 3","01add792":"* Passengers who paid more have more chance to survive.\n* Fare can be used in categorical for training.","d8245858":"## Age - Survived <a id=16><\/a>","8a375dd0":"## Simple Logistic Regression <a id=\"31\"><\/a>","84b90715":"* float64(2) : Age and Fare\n* int64(5) : PassengerId, Survived, Pclass, SibSp and Parch\n* object(5) : Name, Sex, Ticket, Cabin and Embarked","d6de8816":"* Pclass is an important feature for model training.","2991dccb":"* The less passengers class is, the less chance to survive.","27b9dbd3":"## Hyperparameter Tuning - Grid Search - Cross Validation <a id=\"32\"><\/a>\nWe will compare 5 ML Classifiers and evaluate mean accuracy of each of them by Stratified Cross Validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","e4e4bc91":"## Train Test Split <a id=\"30\"><\/a>","3d5eb326":"# Variable Description <a id=2><\/a>\n\n1. PassengerId : Unique ID for each passenger\n2. Survived : Did the passenger survive? Yes (1), No (0)\n3. Pclass : Passenger class\n4. Name : Name of passenger\n5. Sex : Sex of passenger\n6. Age : Age of passenger\n7. SibSp : Number of passengers siblings\/spouses on the ship\n8. Parch : Number of passengers parents\/children on the ship\n9. Ticket : Ticket number\n10. Fare : Amount of money spent on ticket\n11. Cabin : Cabin category\n12. Embarked : The port that passenger was embarked (C = Cherbourg,Q = Queenstown,S = Southampton)","b8b0bc74":"* Small families have more chance to survive than large families.","6a94bd4c":"## Find missing value <a id=9><\/a>","b3f2ccf4":"* Sex feature is not effective in age prediction, age distribution seems to be the same.","07a211e6":"# Univariate Variable Analysis <a id=3><\/a>\n* Categorical Variable: Variables which has over 2 categories. (Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp and Parch)\n* Numerical Variable: Numerical variables. (Fare, Age and PassengerId)","c6982b91":"* Age is not correlated with Sex, but it is correlated with Parch, SibSp, Pclass.","414f2a7a":"## Pclass - Survived - Age <a id=17><\/a>","2acc2f0c":"## Correlation Between SibSp - Age - Fare - Parch - Survived <a id=12><\/a>","52380080":"# Missing Value <a id=8><\/a>\n   * Find missing value\n   * Fill missing value","41a7d8b5":"# Introduction\nRMS Titanic was a British passenger liner that sank in the North Atlantic Ocean in the early morning hours of 15 April 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking one of modern history's deadliest peacetime commercial marine disasters.\n\n<font color=\"green\">\n    Content:\n    \n1.     [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between SibSp - Age - Fare - Parch - Survived](#12)\n    * [SibSp - Survived](#13)\n    * [Parch - Survived](#14)\n    * [Pclass - Survived](#15)\n    * [Age - Survived](#16)\n    * [Pclass - Survived - Age](#17)\n    * [Embarked - Sex - Pclass - Survived](#18)\n    * [Embarked - Sex - Fare - Survived](#19)\n    * [Fill Missing : Age feature](#20)\n1. [Feature Engineering](#21)\n    * [Name - Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n1. [Modeling](#29)\n    * [Train Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning - Grid Search - Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","623e5d08":"## Prediction and Submission <a id=\"34\"><\/a>","18139d73":"## Ensemble Modeling <a id=\"33\"><\/a>","f51bfd98":"## Categorical Variable Analysis <a id=4><\/a>","03880e84":"# Basic Data Analysis <a id=6><\/a>\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","76cb0c69":"## Numerical Variable Analysis <a id=5><\/a>","f09b03f2":"## Embarked - Sex - Pclass - Survived <a id=18><\/a>","e0e4d0b5":"# Visualization <a id=11><\/a>","9b284bac":"# Modeling <a id=\"29\"><\/a>","6c824461":"## Embarked - Sex - Fare - Survived <a id=19><\/a>","24b25eeb":"## Fill missing value <a id=10><\/a>\n* Embarked has 2 missing value.\n* Fare has 6 missing value.","47406aae":"# Load and Check Data <a id=1><\/a>","59faa3dc":"# Feature Engineering <a id=21><\/a>"}}