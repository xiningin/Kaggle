{"cell_type":{"fea332db":"code","a81f60e1":"code","2cd8f252":"code","be7a0ad9":"code","52ae172c":"code","ee391ebc":"code","a5e98d16":"code","f425f2c4":"code","e7a042cf":"code","37531c69":"code","92fd6127":"code","b0b463de":"code","bb2c17e2":"code","c1c9a7d0":"code","8183219b":"code","afc79747":"code","182d482a":"code","555be02f":"code","41e4c5af":"code","bd929b4b":"code","79a0b761":"code","af8caab3":"code","aec730b7":"code","3ce458d3":"code","c73af799":"code","30a5e50e":"code","c366cd6d":"code","772f764b":"code","f651dc2b":"code","e791f96b":"code","05fb4c6e":"code","4916ca08":"code","1b8d21f8":"code","32c3ae55":"code","310714df":"markdown","5b5b4ce9":"markdown","5f9b9798":"markdown","2b980e1a":"markdown","1a1dd6d6":"markdown","cd7029eb":"markdown"},"source":{"fea332db":"import numpy as np\nimport pandas as pd\nimport keras \nimport tensorflow.compat.v1 as tf\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom keras.models import Sequential\nfrom keras import initializers\nimport keras.utils\nfrom keras.optimizers import RMSprop, Adam\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.image as mpimg\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport itertools\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nnp.random.seed(7)","a81f60e1":"test_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","2cd8f252":"train_data.info()","be7a0ad9":"test_data.info()","52ae172c":"train_data.describe()","ee391ebc":"test_data.describe()","a5e98d16":"test_data.head(3)","f425f2c4":"train_data.tail(3)","e7a042cf":"train_data.shape, test_data.shape","37531c69":"train_data.isna().sum()","92fd6127":"test_data.isna().sum()","b0b463de":"#Label counts\nsns.countplot(x=train_data['label'])","bb2c17e2":"#Normalizing data\ny_train = train_data['label']\nX_train = train_data.drop('label', axis=1)","c1c9a7d0":"X_train = X_train\/255.0\ntest_data = test_data\/255.0","8183219b":" #Reshaping the data\nX_train = X_train.values.reshape(-1,28,28,1)\ntest_data = test_data.values.reshape(-1,28,28, 1)","afc79747":"y_train.value_counts()","182d482a":"# One hot encoding the data for easy modelling\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=10)\ny_train","555be02f":"#Splitting the data into train and validation data\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.1, random_state=2)","41e4c5af":"g = plt.imshow(X_train[12][:,:,0])","bd929b4b":"model = Sequential()\n#Layer 1\nmodel.add(Conv2D(filters = 32, kernel_initializer= tf.keras.initializers.glorot_uniform(seed=0), kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32,kernel_initializer= tf.keras.initializers.glorot_uniform(seed=0), kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.50))\n\n#Layer2\nmodel.add(Conv2D(filters = 64,kernel_initializer= tf.keras.initializers.glorot_uniform(seed=0), kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64,kernel_initializer= tf.keras.initializers.glorot_uniform(seed=0), kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.50))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(256, kernel_initializer= tf.keras.initializers.glorot_uniform(seed=0), activation = \"relu\"))\nmodel.add(Dropout(0.50))\nmodel.add(Dense(10, kernel_initializer= tf.keras.initializers.glorot_uniform(seed=0), activation = \"softmax\"))","79a0b761":"model.summary()","af8caab3":"optimizer = Adam(learning_rate=0.001, beta_1=0.9, epsilon=1e-08, decay=0.0)\noptimizer","aec730b7":"model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","3ce458d3":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_loss', verbose=1, patience=3, factor=0.5, min_lr=0.0001)\nlearning_rate_reduction","c73af799":"epochs = 5\nbatch_size = 100\nhistory = model.fit(X_train, y_train, batch_size=batch_size, verbose=2, epochs=epochs, validation_data=(X_valid, y_valid))","30a5e50e":"datagenerator = ImageDataGenerator(featurewise_center=False,  \n        samplewise_center=False,  \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=20,  \n        zoom_range = 0.1, \n        width_shift_range=0.1,  \n        height_shift_range=0.1, \n        horizontal_flip=False,  \n        vertical_flip=False)","c366cd6d":"datagenerator.fit(X_train)","772f764b":"history = model.fit(datagenerator.flow(X_train, y_train, batch_size=batch_size),\n                epochs=5, validation_data=(X_valid, y_valid), verbose=2, \n                steps_per_epoch=X_train.shape[0]\/\/batch_size,\n                callbacks=[learning_rate_reduction])","f651dc2b":"plt.figure(figsize=(8,6))\nfig, [ax1, ax2] = plt.subplots(2,1)\nax1.plot(history.history['loss'], color='green', label='training_loss')\nax1.plot(history.history['val_loss'], color='darkred', label='validation_loss')\nax1.legend(loc='best', shadow=True)\n\nplt.figure(figsize=(8,6))\nax2.plot(history.history['accuracy'], color='cyan', label='training_accuracy')\nax2.plot(history.history['val_accuracy'], color='black', label='validation_accuracy')\nax2.legend(loc='best', shadow=True)","e791f96b":"#Predict the values from the validation dataset\ny_pred = model.predict(X_valid)\n#Convert predictions classes to one hot vectors \ny_pred_classes = np.argmax(y_pred,axis = 1) \n# Convert validation observations to one hot vectors\ny_true = np.argmax(y_valid,axis = 1) ","05fb4c6e":"# Classification report and confusion matrix\nfrom sklearn.metrics import confusion_matrix, classification_report\nprint(classification_report(y_true,y_pred_classes))\nprint(confusion_matrix(y_true,y_pred_classes))","4916ca08":"#Display some error results \n#Errors are difference between predicted labels and true labels\nerrors = (y_pred_classes - y_true != 0)\n\ny_pred_classes_errors = y_pred_classes[errors]\ny_pred_errors = y_pred[errors]\ny_true_errors = y_true[errors]\nX_valid_errors = X_valid[errors]\n\ndef show_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=False,sharey=False)\n    plt.tight_layout(pad=2.3)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\ny_pred_errors_prob = np.max(y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(y_pred_errors, y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = y_pred_errors_prob - true_prob_errors\n\nsorted_errors = np.argsort(delta_pred_true_errors)\n\n#top 6 errors \nfrequent_errors = sorted_errors[:6]\n\nshow_errors(frequent_errors, X_valid_errors, y_pred_classes_errors, y_true_errors)","1b8d21f8":"\nresults = model.predict(test_data)\n\n# select the indices with the maximum probability\nresults = np.argmax(results,axis = 1) \nresults = pd.Series(results,name=\"Label\")\nresults","32c3ae55":"results.to_csv('adriankasito.csv', index=False)","310714df":"Fitted model with data augmentation for a better accuracy score ","5b5b4ce9":"Defining Model","5f9b9798":"Clearly we can see that data augmentation improves the val_accuracy","2b980e1a":"Fitting model without data augmentation","1a1dd6d6":"We can clearly see that there are no null values so we proceed","cd7029eb":"Training and validation curves "}}