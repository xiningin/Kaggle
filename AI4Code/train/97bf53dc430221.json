{"cell_type":{"ee7c492d":"code","3cb58c90":"code","647a0a27":"code","7c30207d":"code","0e841a6f":"code","cc96e422":"code","3c5d1aa1":"code","06163a37":"code","3860240d":"code","ce804b58":"code","d5f209b7":"code","88d44c89":"code","9efbeb33":"code","0e1c43b4":"code","9167500e":"code","e0b0f088":"code","b3b3e08c":"code","54187a59":"code","337f5f54":"code","5ea14eaa":"code","f4573dab":"code","a9a8860a":"code","00fe2674":"code","58eb8aaa":"code","c9f12c0a":"code","b84636df":"code","1764c1a2":"markdown","bc730a18":"markdown","ce74bda1":"markdown","bc4ff3e1":"markdown","ffbf7823":"markdown","b2f51934":"markdown","ce74e9b6":"markdown","5e06020b":"markdown","9a9bc5f6":"markdown","b1ad94b2":"markdown","b09edeb9":"markdown","6715811b":"markdown","f5693252":"markdown","a5a1514c":"markdown","1a73d5c0":"markdown","dcada2b9":"markdown","5792e04e":"markdown","520dc0a1":"markdown","d5571785":"markdown","ef1e5849":"markdown","54d239d1":"markdown","8405e410":"markdown","4b934127":"markdown"},"source":{"ee7c492d":"# \u3053\u306eNotebook\u306b\u304a\u3051\u308b\u8a2d\u5b9a\n\n# competition setting\nINDEX = 'ID'\nTARGET = 'ACTIVITY'\n\n# training setting\nSEED = 2021\nNUM_CLASSES = 6\nNFOLDS = 5","3cb58c90":"import os, random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","647a0a27":"train = pd.read_csv(\"..\/input\/cdleyouth01\/df_train.csv\")\ntest = pd.read_csv(\"..\/input\/cdleyouth01\/df_test.csv\")\n# train + test\ndata = pd.concat([train, test], axis=0).reset_index(drop=True)","7c30207d":"train.info()","0e841a6f":"test.info()","cc96e422":"train.describe()","3c5d1aa1":"test.describe()","06163a37":"data[data.drop(INDEX, axis=1).duplicated(keep=False)]","3860240d":"sns.pairplot(train.drop(INDEX, axis=1), hue=TARGET)","ce804b58":"fig = plt.figure(figsize=(20.0, 20.0))\nfor i, col in enumerate(['TIME', 'SL', 'EEG', 'BP', 'HR', 'CIRCLUATION']):\n    plt.subplot(4, 3, i+1)\n    sns.boxplot(x=train[TARGET], y=train[col])\n    plt.xticks(rotation=90)","d5f209b7":"def seed_everything(seed=42, is_tensorflow=False, is_torch=False, verbose=True):\n    \"\"\" \u4e71\u6570\u56fa\u5b9a\u7528\u95a2\u6570 \"\"\"\n    os.environ['PYTHONHASHSEED'] = str(seed) # os\n    random.seed(seed) # random\n    np.random.seed(seed) # numpy\n\n    if is_tensorflow:\n        import tensorflow as tf\n        tf.random.set_seed(seed)\n        os.environ['TF_DETERMINISTIC_OPS'] = '1'\n        os.environ['TF_CUDNN_DETERMINISTIC'] = '1'\n        tf.config.threading.set_inter_op_parallelism_threads(1)\n        tf.config.threading.set_intra_op_parallelism_threads(1)\n\n    if is_torch:\n        import torch\n        torch.manual_seed(seed)\n        torch.cuda.manual_seed(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False # True: \u518d\u73fe\u6027\u306a\u304f\u306a\u308b\u304c\u3001\u8a08\u7b97\u901f\u304f\u306a\u308b False: \u518d\u73fe\u6027\u304c\u62c5\u4fdd\u3055\u308c\u308b\u304c\u3001\u8a08\u7b97\u9045\u304f\u306a\u308b\n\n    if verbose:\n        print(f'set random seed: {seed}')\n\n# \u4e71\u6570\u56fa\u5b9a\nseed_everything(seed=2021)","88d44c89":"X = train.drop([INDEX, TARGET], axis=1)\ny = train[TARGET]\n\ntest_id = test[INDEX].values\ntest = test.drop(INDEX, axis=1)","9efbeb33":"# \u4f7f\u3063\u3066\u307f\u308b\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\n\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, shuffle=True, stratify=y, random_state=SEED)\nprint('*' * 30 +  ' train_test_split ' + '*' * 30)\nprint(f'X_train \\'s shape{X_train.shape},  X_val \\'s shape{X_val.shape}') # \u3061\u3083\u3093\u3068\u5206\u5272\u3055\u308c\u3066\u307e\u3059\uff01\nprint(f'X_train.head():\\n{X_train.head()}')\nprint(f'X_val.head():\\n{X_val.head()}')\nprint('*' * 78)\nprint('\\n')\n# train_test_split\u3000(\u5358\u7d14\u306a2\u5206\u5272\u306b\u306a\u308a\u307e\u3059)\n# \u30d1\u30e9\u30e1\u30bf\u7d39\u4ecb\n# test_size: \u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306e\u5272\u5408\u6307\u5b9a\n# shuffle: \u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b\u304b\u5426\u304b\n# stratify: \u5c64\u5316\u62bd\u51fa\u3059\u308b\u969b\u306e\u5bfe\u8c61\u30e9\u30d9\u30eb\u9078\u629e\u3002\u6307\u5b9a\u3057\u306a\u3044\u3068\u5c64\u5316\u62bd\u51fa\u3055\u308c\u306a\u3044\u3002\n# random_state: \u4e71\u6570\u6307\u5b9a\n\nfold = KFold(n_splits=NFOLDS, shuffle=True, random_state=SEED)\nprint('*' * 35 +  ' KFold ' + '*' * 35)\nfor i, (train_idx, val_idx) in enumerate(fold.split(X, y)):\n    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx] \n    y_train, y_val = y[train_idx], y[val_idx]\n    print(f'[FOLD{i+1}]: X_train \\'s shape{X_train.shape},  X_val \\'s shape{X_val.shape}') # \u3061\u3083\u3093\u3068\u5206\u5272\u3055\u308c\u3066\u307e\u3059\uff01\n    \n    # \u4e2d\u8eab\u306f\uff1f\n    if i == 0 or i == 1:\n        print(f'X_train.head():\\n{X_train.head()}') # \u78ba\u304b\u306b\u4e2d\u8eab\u304cFOLD\u3054\u3068\u306b\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002(FOLD1\u3068FOLD2\u3057\u304b\u6307\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u304c...)\n        print(f'X_val.head():\\n{X_val.head()}')     # \u540c\u3058\u30c7\u30fc\u30bf\u304c\u3044\u304f\u3064\u304b\u898b\u3048\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u306fshuffle=True\u3060\u304b\u3089\u3067\u3059\u3002shuffle=False\u306b\u3059\u308b\u3068\u5b8c\u5168\u306b\u88ab\u308a\u306a\u304f\u5206\u5272\u3055\u308c\u307e\u3059\u3002\n    \n    # \u5206\u5e03\u306f\uff1f\n    if i == 0 or i == 1:\n        print(f'\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\u5206\u5e03:\\n') # \u5404FOLD\u3054\u3068\u306e\u5206\u5e03\u306f\u30d0\u30e9\u30d0\u30e9\u306e\u306f\u305a\u3067\u3059\u304c\u3001\u3071\u3063\u3068\u898b\u4f3c\u901a\u3063\u3066\u308b\uff57\u3002\u591a\u5206\u3053\u306e\u4e71\u6570\u306e\u3067\u306e\u5076\u3005\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n        sns.histplot(y_train)\n        plt.show()\n        \n        print(f'\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\u5206\u5e03:\\n')\n        sns.histplot(y_val)\n        plt.show()\nprint('*' * 77)\nprint('\\n')\n# KFold\n# \u30d1\u30e9\u30e1\u30bf\u7d39\u4ecb\n# n_splits: \u5206\u5272\u6570\u306e\u6307\u5b9a\u3002\u4eca\u56de5\u5206\u5272\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3001train:validation = 4:1\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c5\u30bb\u30c3\u30c8\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n# shuffle: \u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b\u304b\u5426\u304b\n# random_state: \u4e71\u6570\u6307\u5b9a\n\nfold = StratifiedKFold(n_splits=NFOLDS, shuffle=True, random_state=SEED)\nprint('*' * 30 +  ' StratifiedKFold ' + '*' * 30)\nfor i, (train_idx, val_idx) in enumerate(fold.split(X, y)):\n    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx] \n    y_train, y_val = y[train_idx], y[val_idx]\n    print(f'[FOLD{i+1}]: X_train \\'s shape{X_train.shape},  X_val \\'s shape{X_val.shape}') # \u3061\u3083\u3093\u3068\u5206\u5272\u3055\u308c\u3066\u307e\u3059\uff01\n    \n    # \u4e2d\u8eab\u306f\uff1f\n    if i == 0 or i == 1:\n        print(f'X_train.head():\\n{X_train.head()}') # \u78ba\u304b\u306b\u4e2d\u8eab\u304cFOLD\u3054\u3068\u306b\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002(FOLD1\u3068FOLD2\u3057\u304b\u6307\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u304c...)\n        print(f'X_val.head():\\n{X_val.head()}')     # \u540c\u3058\u30c7\u30fc\u30bf\u304c\u3044\u304f\u3064\u304b\u898b\u3048\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u306fshuffle=True\u3060\u304b\u3089\u3067\u3059\u3002shuffle=False\u306b\u3059\u308b\u3068\u5b8c\u5168\u306b\u88ab\u308a\u306a\u304f\u5206\u5272\u3055\u308c\u307e\u3059\u3002\n        \n    # \u5206\u5e03\u306f\uff1f\n    if i == 0 or i == 1:\n        print(f'\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\u5206\u5e03:\\n') # \u5404FOLD\u3054\u3068\u306e\u5206\u5e03\u304c\u4f3c\u901a\u3063\u3066\u3044\u307e\u3059\u3088\u306d\u3002KFold\u3068\u6bd4\u3079\u308b\u30683\u30684\u306e\u5206\u5e03\u6570\u306e\u5927\u5c0f\u95a2\u4fc2\u304c\u3057\u3063\u304b\u308a\u7dad\u6301\u3055\u308c\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u9055\u3044\u307e\u3059\u3002\n        sns.histplot(y_train)\n        plt.show()\n        \n        print(f'\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\u5206\u5e03:\\n')\n        sns.histplot(y_val)\n        plt.show()\nprint('*' * 78)\nprint('\\n')\n# StratifiedKFold\n# \u30d1\u30e9\u30e1\u30bf\u7d39\u4ecb\n# n_splits: \u5206\u5272\u6570\u306e\u6307\u5b9a\u3002\u4eca\u56de5\u5206\u5272\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3001train:validation = 4:1\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c5\u30bb\u30c3\u30c8\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n# shuffle: \u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b\u304b\u5426\u304b\n# random_state: \u4e71\u6570\u6307\u5b9a\n# .split(X, y)\u3068\u3059\u308b\u3053\u3068\u3067\u3001y\u306e\u30e9\u30d9\u30eb\u306b\u5bfe\u3057\u3066\u5c64\u5316\u62bd\u51fa\u304c\u884c\u308f\u308c\u307e\u3059\u3002","0e1c43b4":"import lightgbm as lgb\nfrom sklearn.metrics import accuracy_score, confusion_matrix","9167500e":"def lgb_get_feature_importance(model_array, features, output_fi_type='gain'):\n    \"\"\" feature importance\u306e\u8a08\u7b97 \"\"\"\n\n    val_split = model_array[0].feature_importance(importance_type='split')\n    val_gain = model_array[0].feature_importance(importance_type='gain')\n    val_split = pd.Series(val_split)\n    val_gain = pd.Series(val_gain)\n\n    for m in model_array[1:]:\n        s = pd.Series(m.feature_importance(importance_type='split'))\n        val_split = pd.concat([val_split, s], axis=1)\n        s = pd.Series(m.feature_importance(importance_type='gain'))\n        val_gain = pd.concat([val_gain, s], axis=1)\n\n    # -----------\n    # split\u306e\u8a08\u7b97\n    # -----------\n    # \u5404fold\u306e\u5e73\u5747\u3092\u7b97\u51fa\n    val_mean = val_split.mean(axis=1)\n    val_mean = val_mean.values\n    importance_df_mean = pd.DataFrame(val_mean, index=features, columns=['importance']).sort_values('importance')\n\n    # \u5404fold\u306e\u6a19\u6e96\u504f\u5dee\u3092\u7b97\u51fa\n    val_std = val_split.std(axis=1)\n    val_std = val_std.values\n    importance_df_std = pd.DataFrame(val_std, index=features, columns=['importance']).sort_values('importance')\n\n    # \u30de\u30fc\u30b8\n    df = pd.merge(importance_df_mean, importance_df_std, left_index=True, right_index=True ,suffixes=['_mean', '_std'])\n\n    df['coef_of_var'] = df['importance_std'] \/ df['importance_mean']\n    df['coef_of_var'] = df['coef_of_var'].fillna(0)\n    df = df.sort_values('importance_mean', ascending=True)\n\n    ids = len(df.index)\n    if ids > 150:\n        df = df.iloc[-150:]\n\n    # \u51fa\u529b\n    fig, ax1 = plt.subplots(figsize = (25, 25))\n    plt.tick_params(labelsize=12) # \u56f3\u306e\u30e9\u30d9\u30eb\u306efont\u30b5\u30a4\u30ba\n    plt.tight_layout()\n\n    # \u68d2\u30b0\u30e9\u30d5\u3092\u51fa\u529b\n    ax1.set_title('feature importance split')\n    ax1.set_xlabel('feature importance mean & std')\n    ax1.barh(df.index, df['importance_mean'], label='importance_mean',  align=\"center\", alpha=0.6)\n    ax1.barh(df.index, df['importance_std'], label='importance_std',  align=\"center\", alpha=0.6)\n\n    # \u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u51fa\u529b\n    ax2 = ax1.twiny()\n    ax2.plot(df['coef_of_var'], df.index, linewidth=1, color=\"crimson\", marker=\"o\", markersize=8, label='coef_of_var')\n    ax2.set_xlabel('Coefficient of variation')\n\n    #\u51e1\u4f8b\u3092\u8868\u793a\uff08\u30b0\u30e9\u30d5\u5de6\u4e0a\u3001ax2\u3092ax1\u306e\u3084\u3084\u4e0b\u306b\u6301\u3063\u3066\u3044\u304f\uff09\n    ax1.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=0.5, fontsize=12)\n    ax2.legend(bbox_to_anchor=(1, 0.93), loc='upper right', borderaxespad=0.5, fontsize=12)\n\n    #\u30b0\u30ea\u30c3\u30c9\u8868\u793a(ax1\u306e\u307f)\n    ax1.grid(True)\n    ax2.grid(False)\n\n    df.to_csv('.\/lightgbm_fi_split_.csv')\n    plt.savefig('.\/lightgbm_fi_split.png', dpi=300, bbox_inches=\"tight\")\n    plt.close()\n    \n    df_ = df.copy()\n\n    # -----------\n    # gain\u306e\u8a08\u7b97\n    # -----------\n    # \u5404fold\u306e\u5e73\u5747\u3092\u7b97\u51fa\n    val_mean = val_gain.mean(axis=1)\n    val_mean = val_mean.values\n    importance_df_mean = pd.DataFrame(val_mean, index=features, columns=['importance']).sort_values('importance')\n\n    # \u5404fold\u306e\u6a19\u6e96\u504f\u5dee\u3092\u7b97\u51fa\n    val_std = val_gain.std(axis=1)\n    val_std = val_std.values\n    importance_df_std = pd.DataFrame(val_std, index=features, columns=['importance']).sort_values('importance')\n\n    # \u30de\u30fc\u30b8\n    df = pd.merge(importance_df_mean, importance_df_std, left_index=True, right_index=True ,suffixes=['_mean', '_std'])\n\n    # \u5909\u52d5\u4fc2\u6570\u3092\u7b97\u51fa\n    df['coef_of_var'] = df['importance_std'] \/ df['importance_mean']\n    df['coef_of_var'] = df['coef_of_var'].fillna(0)\n    df = df.sort_values('importance_mean', ascending=True)\n\n    ids = len(df.index)\n    if ids > 150:\n        df = df.iloc[-150:]\n\n    # \u51fa\u529b\n    fig, ax1 = plt.subplots(figsize = (25, 25))\n    plt.tick_params(labelsize=12) # \u56f3\u306e\u30e9\u30d9\u30eb\u306efont\u30b5\u30a4\u30ba\n    plt.tight_layout()\n\n    # \u68d2\u30b0\u30e9\u30d5\u3092\u51fa\u529b\n    ax1.set_title('feature importance gain')\n    ax1.set_xlabel('feature importance mean & std')\n    ax1.barh(df.index, df['importance_mean'], label='importance_mean',  align=\"center\", alpha=0.6)\n    ax1.barh(df.index, df['importance_std'], label='importance_std',  align=\"center\", alpha=0.6)\n\n    # \u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u51fa\u529b\n    ax2 = ax1.twiny()\n    ax2.plot(df['coef_of_var'], df.index, linewidth=1, color=\"crimson\", marker=\"o\", markersize=8, label='coef_of_var')\n    ax2.set_xlabel('Coefficient of variation')\n\n    # \u51e1\u4f8b\u3092\u8868\u793a\uff08\u30b0\u30e9\u30d5\u5de6\u4e0a\u3001ax2\u3092ax1\u306e\u3084\u3084\u4e0b\u306b\u6301\u3063\u3066\u3044\u304f\uff09\n    ax1.legend(bbox_to_anchor=(1, 1), loc='upper right', borderaxespad=0.5, fontsize=12)\n    ax2.legend(bbox_to_anchor=(1, 0.93), loc='upper right', borderaxespad=0.5, fontsize=12)\n\n    # \u30b0\u30ea\u30c3\u30c9\u8868\u793a(ax1\u306e\u307f)\n    ax1.grid(True)\n    ax2.grid(False)\n\n    df.to_csv('.\/lightgbm_fi_gain_.csv')\n    plt.savefig('.\/lightgbm_fi_gain.png', dpi=300, bbox_inches=\"tight\")\n    plt.close()\n    \n    if output_fi_type == 'gain':\n        return df\n    elif output_fi_type == 'split':\n        return df_","e0b0f088":"# lightgbm\u306e\u30d1\u30e9\u30e1\u30bf\u53ca\u3073\u5b66\u7fd2\u8a2d\u5b9a\nparams = {\n    'objective': 'multiclass',\n    'boosting': 'gbdt',\n    'metric': 'multi_logloss',\n    'feature_pre_filter': False,\n    'num_leaves': 39,\n    'bagging_freq': 3,\n    'min_child_samples': 32,\n    'learning_rate': 0.0926,\n    'lambda_l1': 0.00000049,\n    'lambda_l2': 0.00000058,\n    'feature_fraction': 0.56,\n    'bagging_fraction': 0.99,\n    'max_bin': 349,\n    'verbosity': -1,\n    'num_class': NUM_CLASSES,\n    'seed': SEED\n}\n\nnum_boost_rounds = 10000\nearly_stopping_rounds = 100\nverbose_eval = 1000","b3b3e08c":"oof_train = np.zeros(len(X))\nmodel_array = []\nfor i, (train_idx, val_idx) in enumerate(fold.split(X, y)):\n    print(f'**************** FOLD {i+1} ****************')\n    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n    y_train, y_val = y.values[train_idx], y.values[val_idx]\n\n    # train weight\n    w_tr = 1 \/ pd.DataFrame(y_train).reset_index().groupby(0).count().values\n    w_tr = w_tr[y_train].ravel()\n    w_tr \/= w_tr.sum()\n    train_weight = list(w_tr)\n\n    # test weight\n    w_vl = 1 \/ pd.DataFrame(y_val).reset_index().groupby(0).count().values\n    w_vl = w_vl[y_val].ravel()\n    w_vl \/= w_vl.sum()\n    valid_weight = list(w_vl)\n\n    lgb_train = lgb.Dataset(X_train, label=y_train, weight=train_weight)\n    lgb_val = lgb.Dataset(X_val, label=y_val, weight=valid_weight)\n\n    model = lgb.train(params,\n                      lgb_train,\n                      valid_names=[\"train\", \"valid\"],\n                      valid_sets=[lgb_train, lgb_val],\n                      num_boost_round=num_boost_rounds,\n                      early_stopping_rounds=early_stopping_rounds,\n                      verbose_eval=verbose_eval)\n\n    model_array.append(model)\n\n    # evaluation\n    oof_val = model.predict(X_val, num_iteration=model.best_iteration)\n    y_val_pred = np.argmax(oof_val, axis=1)\n    oof_train[val_idx] = y_val_pred\n    print(f'[FOLD {i+1}] OOF Accuracy: {accuracy_score(y_true=y_val, y_pred=y_val_pred):.5f}\\n')\n\n    # prediction\n    if i == 0:\n        preds = model.predict(test, num_iteration=model.best_iteration)\n    else:\n        preds += model.predict(test, num_iteration=model.best_iteration)\n        \nprint(f'[RESULT] Accuracy: {accuracy_score(y_true=y, y_pred=oof_train):.5f}')\n\n\npreds = preds \/ NFOLDS\ntest_pred = np.argmax(preds, axis=1)","54187a59":"fig, ax = plt.subplots(figsize=(8, 8))\nsns.histplot(oof_train, label='pred', ax=ax, color='black')\nsns.histplot(y, label='true', ax=ax)\nax.legend()\nax.grid()","337f5f54":"labels = sorted(list(set(y)))\ncmx_data = confusion_matrix(y_true=y, y_pred=oof_train, labels=labels)\ndf_cmx = pd.DataFrame(cmx_data, index=labels, columns=labels)\nplt.figure(figsize = (10,7))\nsns.heatmap(df_cmx, annot=True)\nplt.xlabel(\"predict\", fontsize=13)\nplt.ylabel(\"true\", fontsize=13)","5ea14eaa":"# feature importance\nfi_df = lgb_get_feature_importance(model_array=model_array, features=list(X.columns))","f4573dab":"fi_df","a9a8860a":"sns.barplot(data=fi_df, y=fi_df.index, x='importance_mean', orient='h')","00fe2674":"sub = pd.DataFrame([])\nsub[INDEX] = test_id\nsub[TARGET] = test_pred\nsub.to_csv('submission.csv', index=False)","58eb8aaa":"# \u4e71\u6570\u56fa\u5b9a\nseed_everything(seed=2021)\n\noof_train = np.zeros(len(X))\nmodel_array = []\nfor i, (train_idx, val_idx) in enumerate(fold.split(X, y)):\n    print(f'**************** FOLD {i+1} ****************')\n    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n    y_train, y_val = y.values[train_idx], y.values[val_idx]\n\n    lgb_train = lgb.Dataset(X_train, label=y_train)\n    lgb_val = lgb.Dataset(X_val, label=y_val)\n\n    model = lgb.train(params,\n                      lgb_train,\n                      valid_names=[\"train\", \"valid\"],\n                      valid_sets=[lgb_train, lgb_val],\n                      num_boost_round=num_boost_rounds,\n                      early_stopping_rounds=early_stopping_rounds,\n                      verbose_eval=verbose_eval)\n\n    model_array.append(model)\n\n    # evaluation\n    oof_val = model.predict(X_val, num_iteration=model.best_iteration)\n    y_val_pred = np.argmax(oof_val, axis=1)\n    oof_train[val_idx] = y_val_pred\n    print(f'[FOLD {i+1}] OOF Accuracy: {accuracy_score(y_true=y_val, y_pred=y_val_pred):.5f}\\n')\n    \nprint(f'[RESULT] Accuracy: {accuracy_score(y_true=y, y_pred=oof_train):.5f}')","c9f12c0a":"fig, ax = plt.subplots(figsize=(8, 8))\nsns.histplot(oof_train, label='pred', ax=ax, color='black')\nsns.histplot(y, label='true', ax=ax)\nax.legend()\nax.grid()","b84636df":"labels = sorted(list(set(y)))\ncmx_data = confusion_matrix(y_true=y, y_pred=oof_train, labels=labels)\ndf_cmx = pd.DataFrame(cmx_data, index=labels, columns=labels)\nplt.figure(figsize = (10,7))\nsns.heatmap(df_cmx, annot=True)\nplt.xlabel(\"predict\", fontsize=13)\nplt.ylabel(\"true\", fontsize=13)","1764c1a2":"## \u5b66\u7fd2\u6e96\u5099","bc730a18":"## \u7d9a4. \u8a55\u4fa1\n\u7279\u306b\u4f55\u3082\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u4eca\u56de\u306e\u30b3\u30f3\u30da\u306e\u8a55\u4fa1\u6307\u6a19\u3067\u3042\u308bAccuracy(\u6b63\u7b54\u7387\u307e\u305f\u306f\u6b63\u78ba\u5ea6)\u304c**0.73725**\u3068\u306a\u308a\u307e\u3057\u305f\u3002  \n\u3053\u308c\u306f\u3044\u3044\u306e\u304b\u60aa\u3044\u306e\u304b\u4f55\u3068\u3082\u8a00\u3048\u307e\u305b\u3093\u304c\u3001\u4e00\u5fdc\u4e88\u6e2c\u304c\u307e\u3068\u3082\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\u3002  \n\u307e\u305a\u306f\u3001\u4e88\u6e2c\u306e\u5206\u5e03\u304b\u3089","ce74bda1":"## \u88dc3. 4. \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u53ca\u3073\u5b66\u7fd2\u30fb\u8a55\u4fa1\n\n### 1. class weight\n\u4eca\u56de\u4e0a\u8a18\u30b3\u30fc\u30c9\u306b\u3066\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3057\u305f\u304c\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u6b21\u306e\u90e8\u5206\u306b\u95a2\u3057\u3066\n> ### train weight\n    w_tr = 1 \/ pd.DataFrame(y_train).reset_index().groupby(0).count().values\n    w_tr = w_tr[y_train].ravel()\n    w_tr \/= w_tr.sum()\n    train_weight = list(w_tr)\n\n> ### test weight\n    w_vl = 1 \/ pd.DataFrame(y_val).reset_index().groupby(0).count().values\n    w_vl = w_vl[y_val].ravel()\n    w_vl \/= w_vl.sum()\n    valid_weight = list(w_vl)\n\n\u3053\u308c\u3063\u3066\u4f55\uff1f\u3063\u3066\u306a\u3063\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001\u5b66\u7fd2\u3059\u308b\u969b\u306b\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u308b\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\u306e\u5206\u5e03\u306b\u5fdc\u3058\u3066\u91cd\u307f\u4ed8\u3051\u3059\u308b\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u4e00\u822c\u306bclass weight\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u3001[\u3053\u3061\u3089](https:\/\/www.analyticsvidhya.com\/blog\/2020\/10\/improve-class-imbalance-class-weights\/)\u3067\u8a73\u3057\u304f\u7d39\u4ecb\u3055\u308c\u3066\u307e\u3059\u306e\u3067\u898b\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u304a\u3044\u3066\u304b\u306a\u308a\u91cd\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\u65e5\u672c\u8a9e\u3060\u3068\u3001[\u3053\u3061\u3089](https:\/\/www.slideshare.net\/sfchaos\/ss-11307051)\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002  \n  \n\u69d8\u3005\u306a\u91cd\u307f\u4ed8\u3051\u65b9\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u4e00\u822c\u7684\u306a\u51fa\u73fe\u30af\u30e9\u30b9\u983b\u5ea6\u306e\u9006\u6570\u3067\u91cd\u307f\u4ed8\u3051\u3057\u3066\u307e\u3059\u3002","bc4ff3e1":"# \u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u6539\u3081\u3066\uff0b\u524d\u51e6\u7406\u30a2\u30a4\u30c7\u30a2\n\u3053\u3053\u3067\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u6539\u3081\u3066\u898b\u3066\u307f\u307e\u3059\u3002  \n\n### \u4eca\u56de\u306e\u30bf\u30b9\u30af\n\u30a6\u30a7\u30a2\u30e9\u30d6\u30eb\u30c7\u30d0\u30a4\u30b9\u306b\u642d\u8f09\u3055\u308c\u305f\u30bb\u30f3\u30b5\u30fc\u306e\u30c7\u30fc\u30bf\u304b\u3089\u3001**\u9ad8\u9f62\u8005\u306e\u8ee2\u5012\u3068\u65e5\u5e38\u751f\u6d3b\u52d5\u4f5c\uff08ADL\uff09**\u3092\u5224\u5225\u3057\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\n### \u3069\u3046\u3084\u3063\u3066\u4f5c\u3089\u308c\u305f\u30c7\u30fc\u30bf\u304b\n\u88ab\u9a13\u8005\u306e\u4f53\u306e6\u3064\u306e\u7570\u306a\u308b\u4f4d\u7f6e\u306b\u88c5\u7740\u3055\u308c\u305f\u30a6\u30a7\u30a2\u30e9\u30d6\u30eb\u30e2\u30fc\u30b7\u30e7\u30f3\u30bb\u30f3\u30b5\u30fc\u30e6\u30cb\u30c3\u30c8\u3092\u7528\u3044\u3066\u3001**14\u4eba\u306e\u30dc\u30e9\u30f3\u30c6\u30a3\u30a2**\u304c\u300120\u306e\u81ea\u767a\u7684\u8ee2\u5012\u306816\u306e\u65e5\u5e38\u751f\u6d3b\u52d5\u4f5c\uff08ADL\uff09\u3092\u542b\u3080\u6a19\u6e96\u5316\u3055\u308c\u305f\u52d5\u4f5c\u3092\u884c\u3063\u3066\u4f5c\u3089\u308c\u305f\u3002  \n\u307e\u305f\u305d\u306e\u4e0a\u3067\u3001\u5404\u30bb\u30f3\u30b5\u306e\u751f\u30c7\u30fc\u30bf\u3092\uff0c\u8170\u306e\u30bb\u30f3\u30b5\u306e**\u5168\u52a0\u901f\u5ea6\u304c\u30d4\u30fc\u30af\u306b\u9054\u3057\u305f\u6642\u70b9\u3092\u4e2d\u5fc3\u3068\u3057\u305f4\u79d2\u9593\u306e\u6642\u9593\u67a0\u306b\u7d5e\u3063\u3066\uff0c\u7279\u5fb4\u62bd\u51fa\u3068\u30ea\u30c0\u30af\u30b7\u30e7\u30f3\u3092\u884c\u3063\u305f**\u30c7\u30fc\u30bf\u3002\n\n### \u524d\u51e6\u7406\u30a2\u30a4\u30c7\u30a2\u3092\u3064\u3089\u3064\u3089\u3068(\u5b9f\u73fe\u3067\u304d\u308b\u304b\u308f\u304b\u308a\u307e\u305b\u3093)\n- \u4eca\u66f4\u3067\u3059\u304c\u601d\u3063\u305f\u4e8b\u3068\u3057\u3066\u3001TIME\u3063\u3066\u610f\u5473\u306a\u304f\u306a\u3044\u304b\uff1f\u3067\u3059\u3002\u5e38\u8b58\u7684\u306b\u8003\u3048\u3066\u8a08\u6e2c\u3057\u305f\u6642\u523b\u3067\u52d5\u4f5c\u4e88\u6e2c\u304c\u3067\u304d\u308b\u308f\u3051\u306a\u3044\u3067\u3059\u3002\u3053\u308c\u3092\u524a\u9664\u3057\u305f\u3044\u3002\n- TIME\u3092\u30bd\u30fc\u30c8\u3057\u3066\u307f\u305f\u3089\u3001\u8a08\u6e2c\u6642\u9593\u306e\u95a2\u4fc2\u3067\u30dc\u30e9\u30f3\u30c6\u30a3\u30a214\u4eba\u3092\u5206\u985e\u3067\u304d\u308b\u306e\u3067\u306f\uff1f\u3067\u304d\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u4eba\u3054\u3068\u306b\u7279\u5fb4\u7684\u306a\u90e8\u5206\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u7cbe\u5ea6\u5411\u4e0a\u304c\u671f\u5f85\u3067\u304d\u308b\u3002\n- TIME\u3092\u30bd\u30fc\u30c8\u3057\u3066\u3082\u3046\u307e\u304f14\u4eba\u304c\u533a\u5207\u3089\u308c\u306a\u304b\u3063\u305f\u3089\u3001k-\u8fd1\u508d\u6cd5\u3084k-means\u3067\u4eba\u7269\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7b49\u3067\u304d\u306a\u3044\u3060\u308d\u3046\u304b\u3002\n- HR\u3068CIRCULATION\u304c\u30da\u30a2\u306b\u306a\u3063\u3066\u305d\u3046...\n- \u4e00\u822c\u7684\u306a\u7d71\u8a08\u8a08\u7b97\u7cfb\uff1a\u5bfe\u6570\u30fb\u3079\u304d\u4e57\u30fbbinning\u30fbbinning + std, min, max, mean\u30fb\u56db\u5247\u6f14\u7b97\n- \u6570\u5024\u5909\u63db\uff1a \u5bfe\u6570\u5909\u63db(\u4e0a\u8ff0)\u30fb\u6a19\u6e96\u5316(tree\u30e2\u30c7\u30eb\u306b\u306f\u4e0d\u8981)\u30fbbox-cox\u30fb\u30ac\u30a6\u30b9\u5909\u63db\n- \u6841\u5206\u96e2","ffbf7823":"# \u7c21\u5358\u306aEDA (exploratory data analysis)","b2f51934":"## 2. \u4ea4\u5dee\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n\n### \u4ea4\u5dee\u691c\u8a3c\u306b\u3064\u3044\u3066\n\u4ea4\u5dee\u691c\u8a3c(\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3)\u3068\u306f\u5b66\u7fd2\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8907\u6570\u306b\u5206\u5272\u3057\u3066\u305d\u308c\u305e\u308c\u306e\u5206\u5272\u3067\u5b66\u7fd2\u30fb\u691c\u8a3c\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u898b\u7a4d\u3082\u308b\u624b\u6cd5\u306e\u3053\u3068\u3067\u3059\u3002  \n\u300c\u305d\u306e\u307e\u307e\u5168\u90e8\u5b66\u7fd2\u306b\u4f7f\u3063\u305f\u65b9\u304c\u3088\u304f\u306a\u3044\u304b\uff1f\u300d\u3068\u601d\u3046\u306e\u304c\u666e\u901a\u3067\u3059\u3002\u78ba\u304b\u306b\u305d\u306e\u65b9\u304c\u3088\u308a\u826f\u3044\u7cbe\u5ea6\u304c\u51fa\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002  \n\u3058\u3083\u3042\u306a\u305c\u5206\u5272\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4e2d\u3067\u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3057\u305f\u3044\u304b\u3089\u3067\u3059\u3002\u624b\u5143\u3067\u8a55\u4fa1\u304c\u3067\u304d\u306a\u3044\u3068LB\u306b\u51fa\u3057\u3066\u307f\u3066\u4e00\u559c\u4e00\u6182\u3059\u308b\u3057\u304b\u306a\u304f\u306a\u308a\u3001\u7d50\u679cpublicLB\u306b\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c8\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3088\u308d\u3057\u304f\u306a\u3044\u3067\u3059\u3002  \n\u3053\u308c\u306f\u30b3\u30f3\u30da\u306b\u9650\u3063\u305f\u8a71\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u3042\u308b\u4f1a\u793e\u3067AI\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u904b\u7528\u3059\u308b\u3063\u3066\u306a\u3063\u305f\u3068\u304d\u3001\u305d\u308c\u304c\u3069\u308c\u3060\u3051\u306e\u7cbe\u5ea6\u3067\u6b63\u3057\u304f\u52d5\u304f\u304b\u304c\u308f\u304b\u3063\u3066\u306a\u3044\u3068\u3001\u5f53\u7136\u4f1a\u793e\u306e\u5229\u76ca\u306b\u76f4\u7d50\u3057\u3066\u304f\u308b\u306e\u3067\u6016\u304f\u3066\u904b\u7528\u3067\u304d\u307e\u305b\u3093\u3002(\u7279\u306b\u73fe\u5b9f\u3067\u904b\u7528\u3059\u308b\u969b\u306f\u6b63\u89e3\u30c7\u30fc\u30bf\u306a\u3093\u3066\u3082\u306e\u306f\u3042\u308a\u307e\u305b\u3093\u3057)\n\n\n[\u3053\u3061\u3089\u306e\u8a18\u4e8b](https:\/\/upura.hatenablog.com\/entry\/2018\/12\/04\/224436)\u3067\u69d8\u3005\u306a\u5206\u5272\u65b9\u6cd5\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044","ce74e9b6":"## \u3053\u3053\u307e\u3067\u3067\u308f\u304b\u308b\u3053\u3068\n- \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u304c\u306a\u3044\uff01\uff08\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u306e\u5fc5\u8981\u306a\u3057\uff01\uff09-> [\u8003\u3048\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304f\u308b\u5834\u5408\u306e\u53c2\u8003](https:\/\/thefinance.jp\/datascience\/201109-2)\n- \u6570\u5024\u30c7\u30fc\u30bf\u3060\u3051 -> \u305d\u306e\u307e\u307e\u4f7f\u3046\uff1f\u3000binning\u51e6\u7406\u3068\u304b\u3067\u30ab\u30c6\u30b4\u30ea\u5316\u3057\u3066\u307f\u308b\uff1f\n- \u6b20\u640d\u5024\u306f\u306a\u3057\uff01\uff08\u6b20\u640d\u5024\u306b\u3064\u3044\u3066\u8003\u3048\u306a\u304f\u3066\u3088\u3057\uff01\uff09 -> [\u8003\u3048\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304f\u308b\u5834\u5408\u306e\u53c2\u8003](https:\/\/qiita.com\/kazuya_minakuchi\/items\/26b26d42438c7c2d7871)\n- BP\u30fbHR\u9664\u3044\u3066\u3001\u5404\u30ab\u30e9\u30e0\u306emin-max\u306e\u5dee\u304c\u5927\u304d\u3044 -> log\u3068\u308b\uff1f binning\u3069\u3046\uff1f\n- \u91cd\u8907\u30c7\u30fc\u30bf\u304c\u3042\u308b\uff01 -> \u6271\u3044\u3069\u3046\u3059\u308b\uff1f\n\n\u533b\u7642\u7cfb\u306e\u77e5\u8b58\u304c\u306a\u3044\u306e\u3067\u73fe\u72b6\u307b\u307c\u4f55\u3082\u308f\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u6570\u5024\u30c7\u30fc\u30bf\u3060\u3051\u306a\u306e\u3067\u524d\u51e6\u7406\u306a\u3057\u3067\u30e2\u30c7\u30eb\u306b\u7a81\u3063\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u3067\u3068\u308a\u3042\u3048\u305a\u5b66\u7fd2\u3055\u305b\u3066\u307f\u307e\u3059\u3002","5e06020b":"### \u4e71\u6570\u56fa\u5b9a\u306e\u610f\u7fa9\n\u4e71\u6570\u3092\u56fa\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u540c\u3058\u30b3\u30fc\u30c9\u3067\u3042\u308c\u3070\u6bce\u56de\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u300c\u3069\u306e\u90e8\u5206\u3092\u5909\u3048\u305f\u3089\u3001\u3069\u308c\u3060\u3051\u7cbe\u5ea6\u304c\u5909\u308f\u3063\u305f\u300d\u3068\u3044\u3046\u306e\u304c\u660e\u78ba\u306b\u5206\u304b\u308a\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\u9006\u306b\u56fa\u5b9a\u3057\u306a\u3044\u3068\u3001\u4e71\u6570\u306e\u305b\u3044\u306a\u306e\u304b\u3001\u81ea\u5206\u304c\u65b0\u305f\u306b\u5909\u5316\u3055\u305b\u305f\u30b3\u30fc\u30c9\u306e\u90e8\u5206\u306e\u305b\u3044\u306a\u306e\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u308a\u307e\u3059\u3002  \n\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306e\u30eb\u30fc\u30eb\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u3001\u30b3\u30f3\u30da\u306b\u5165\u8cde\u3057\u305f\u969b\u306f\u30b3\u30fc\u30c9\u63d0\u51fa\u306a\u3069\u3092\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u5168\u304f\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u306a\u3044\u3068\u30b3\u30f3\u30da\u5931\u683c\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002","9a9bc5f6":"\u30af\u30e9\u30b9\uff11\u3084\uff15\u306a\u3069\u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3044\u3082\u306e\u3060\u3068\u3001\u3084\u306f\u308a\u307b\u304b\u306e\u30e9\u30d9\u30eb\u3068\u3057\u3066\u4e88\u6e2c\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\u30c7\u30fc\u30bf\u304c\u305d\u3053\u305d\u3053\u3042\u308b\uff13\u30fb\uff14\u3082\u5272\u3068\u5916\u3057\u3066\u306a\u3044\u304b\uff1f\u3069\u3046\u306a\u3093\u3060\u308d\u3046\u304b","b1ad94b2":"## LightGBM\u306e\u30d1\u30e9\u30e1\u30bf\u306b\u3064\u3044\u3066\n\u7cbe\u5ea6\u3092\u3060\u3059\u306b\u3042\u305f\u3063\u3066\u306f\u30e2\u30c7\u30eb\u9078\u629e\u3082\u91cd\u8981\u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30bf\u3082\u975e\u5e38\u306b\u91cd\u8981\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30d1\u30e9\u30e1\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u3088\u3063\u3066\u5287\u7684\u306b\u7cbe\u5ea6\u304c\u4e0a\u304c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u9069\u5f53\u306b\u6c7a\u3081\u307e\u3057\u305f\u3002  \nLightGBM\u306e\u30d1\u30e9\u30e1\u30bf\u3067\u3059\u304c\u3001[\u3053\u3061\u3089](https:\/\/nykergoto.hatenablog.jp\/entry\/2019\/03\/29\/%E5%8B%BE%E9%85%8D%E3%83%96%E3%83%BC%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A7%E5%A4%A7%E4%BA%8B%E3%81%AA%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%AE%E6%B0%97%E6%8C%81%E3%81%A1)\u304c\u975e\u5e38\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001[\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters.html)\u3082\u304a\u3059\u3059\u3081\u3067\u3059\u3002","b09edeb9":"## 1. \u30c7\u30fc\u30bf\u306e\u7528\u610f","6715811b":"## 3. 4. \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u53ca\u3073\u5b66\u7fd2\u30fb\u8a55\u4fa1","f5693252":"\u4e00\u9023\u306e\u6d41\u308c\u306f\u4ee5\u4e0a\u306b\u306a\u308a\u307e\u3059\u3002","a5a1514c":"# \u756a\u5916. class weight\u3092\u8a2d\u5b9a\u3057\u306a\u304b\u3063\u305f\u3089\u3069\u3046\u306a\u308b\u304b","1a73d5c0":"# \u3068\u308a\u3042\u3048\u305a\u5b66\u7fd2\u3055\u305b\u3066\u307f\u308b\n\n\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3055\u305b\u308b\u969b\u306e\u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n1. \u30c7\u30fc\u30bf\u306e\u7528\u610f ( \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3001\u6b63\u89e3\u30e9\u30d9\u30eb\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf )\n2. \u4ea4\u5dee\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210 ( 1\u3067\u7528\u610f\u3057\u305f\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5206\u5272 )\n3. \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9 (\u4eca\u56de\u306fLightGBM\u3067\u3059)\n4. \u5b66\u7fd2\u30fb\u8a55\u4fa1","dcada2b9":"# \u4eca\u5f8c\u3084\u3063\u3066\u3044\u304f\u3053\u3068\n1. \u524d\u51e6\u7406\n2. \u30e2\u30c7\u30eb\u3092\u5909\u3048\u3066\u307f\u308b(svm, knn, linear, mlp, etc..)\n3. \u30d1\u30e9\u30e1\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n4. stacking, pseudo labeling, etc...","5792e04e":"\u3048\uff01\uff1f\u306a\u3093\u304b\u7cbe\u5ea6\u9ad8\u304f\u306a\u3063\u3066\u308b\u30fc\uff57\u3002\u591a\u5c11\u4e0d\u5747\u8861\u3067\u3082\u5341\u5206\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u306f\u3042\u308b\u7a0b\u5ea6\u6b63\u3057\u304f\u4e88\u6e2c\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306f\u306a\u308b\u306e\u3067\u3001\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u91cf\u7684\u306b\u5341\u5206\u306a\u30c7\u30fc\u30bf\u304c\u3042\u308b\u3063\u3066\u3053\u3068\u306a\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","520dc0a1":"\u4ee5\u4e0a\u3067\u3059\uff01\u9811\u5f35\u308a\u307e\u3057\u3087\u3046\uff01\uff01","d5571785":"\u5fc3\u62cd\u6570(HR)\u3084\u8840\u6d41\u91cf(CIRCULATION)\u3001\u8840\u7cd6\u5024(SL)\u304c\u7279\u306b\u91cd\u8981\u305d\u3046(\u3068\u3044\u3046\u304b\u3053\u306e\u4e09\u3064\u306e\u7279\u5fb4\u91cf\u306b\u306f\u76f8\u95a2\u304c\u307f\u3089\u308c\u307e\u3059)\u3002\u3061\u306a\u307f\u306bEEG\u306f\u8133\u6ce2\u3060\u305d\u3046\u3067\u3059\u3002","ef1e5849":"# \u3053\u306eNoteBook\u3067\u306f\u3001\u7c21\u5358\u306aEDA\u3068LightGBM\u306b\u3088\u308b\u5b9f\u88c5\u3092\u7d39\u4ecb\u3057\u307e\u3059\n\n[\u3053\u3061\u3089](https:\/\/upura.hatenablog.com\/entry\/2019\/10\/29\/184617)\u3067\u306a\u305cLightGBM\u3092\u521d\u3081\u306b\u9078\u629e\u3059\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u306e\u8003\u3048\u304c\u306a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u307e\u305f\u3042\u306e[upura](https:\/\/www.kaggle.com\/sishihara)\u3055\u3093\u3067\u3059\uff01\uff09\n","54d239d1":"# submit\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","8405e410":"\u5404\u30af\u30e9\u30b9\u5168\u304f\u4e88\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u308f\u3051\u3067\u306f\u7121\u3055\u305d\u3046\u3002\u307e\u3041\u3088\u3044\u306e\u3067\u306f\uff1f  \n\u6b21\u306b\u6df7\u540c\u884c\u5217","4b934127":"## \u7279\u5fb4\u91cd\u8981\u5ea6\u3092\u898b\u3066\u307f\u308b"}}