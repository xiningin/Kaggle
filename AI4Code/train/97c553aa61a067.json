{"cell_type":{"3ed4baa6":"code","d4e7b1a7":"code","522dcffb":"code","d2db6a3c":"code","2d51e002":"code","4efc80a6":"code","433b6e97":"code","679ba78f":"code","307f7bca":"code","0f0fd18e":"code","4681b294":"code","e5ddb50f":"code","2cab49c4":"code","907c5993":"code","8f445458":"code","650b17d0":"code","2152cc1c":"code","bd1e7d6f":"code","b4f3cdbd":"code","5e93466e":"code","6fc6c648":"code","1259c5a1":"code","f46541a8":"markdown","218be2e8":"markdown","2fd01388":"markdown","149352ce":"markdown"},"source":{"3ed4baa6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d4e7b1a7":"import pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n\nimport plotly.express as px\nimport plotly.offline as py\n\n\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\nimport warnings\nwarnings.filterwarnings('ignore')","522dcffb":"#Reading the TRAINING & TEST Dataset\ndf_train = pd.read_csv('\/kaggle\/input\/predict-the-data-scientists-salary-in-india\/Data\/Final_Train_Dataset.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/predict-the-data-scientists-salary-in-india\/Data\/Final_Test_Dataset.csv')","d2db6a3c":"df_train.info()","2d51e002":"df_test.info()","4efc80a6":"#Removing the un-necessary columns\ndf_train.drop(['Unnamed: 0','company_name_encoded'],axis=1,inplace=True)\ndf_test.drop(['company_name_encoded'],axis=1,inplace=True)","433b6e97":"#Renaming Location names in both the Dataframe to make data more consistent\ndf_train['location'] = df_train.location.str.replace(r'(^.*Ahmedabad.*$)','Ahmedabad')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Bengaluru.*$)','Bengaluru')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Chennai.*$)','Chennai')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Chandigarh.*$)','Chandigarh')\ndf_train['location'] = df_train.location.str.replace(r'(^.*NCR.*$)','Delhi')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Delhi.*$)','Delhi')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Gurgaon.*$)','Gurgaon')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Gandhinagar.*$)','Gandhinagar')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Hyderabad.*$)','Hyderabad')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Indore.*$)','Indore')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Kolkata.*$)','Kolkata')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Jaipur.*$)','Jaipur')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Kerala.*$)','Kochi')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Kochi.*$)','Kochi')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Mumbai.*$)','Mumbai')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Noida.*$)','Noida')\ndf_train['location'] = df_train.location.str.replace(r'(^.*Pune.*$)','Pune')\n\ndf_test['location'] = df_test.location.str.replace(r'(^.*Ahmedabad.*$)','Ahmedabad')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Bengaluru.*$)','Bengaluru')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Chennai.*$)','Chennai')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Chandigarh.*$)','Chandigarh')\ndf_test['location'] = df_test.location.str.replace(r'(^.*NCR.*$)','NCR')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Delhi.*$)','NCR')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Gurgaon.*$)','NCR')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Gandhinagar.*$)','Gandhinagar')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Hyderabad.*$)','Hyderabad')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Indore.*$)','Indore')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Kolkata.*$)','Kolkata')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Jaipur.*$)','Jaipur')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Kerala.*$)','Kochi')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Kochi.*$)','Kochi')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Mumbai.*$)','Mumbai')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Noida.*$)','Noida')\ndf_test['location'] = df_test.location.str.replace(r'(^.*Pune.*$)','Pune')","679ba78f":"#Selecting only Cities where large number of jobs are posted.\ncities = ['Ahmedabad','Bengaluru','Chennai','Chandigarh','Gandhinagar','Hyderabad','Indore','Kolkata','Jaipur','Kochi','Mumbai','NCR','Pune']\n\ndf_train = df_train[df_train['location'].isin(cities)]\ndf_test = df_test[df_test['location'].isin(cities)]","307f7bca":"#Converting Salary which were initially in STRING Format to Integer\n#Adding another column as Average Salary.\ndf_train[['min_salary','max_salary']] = df_train['salary'].str.split(\"to\",1,expand=True)\ndf_train[['min_salary','max_salary']] = df_train[['min_salary','max_salary']].astype(int)\ndf_train.drop('salary',axis=1,inplace=True)\ndf_train['salary'] = (df_train['min_salary'] + df_train['max_salary'])\/2","0f0fd18e":"#Converting Experience which were initially in STRING Format to Integer\n#Adding another column as Average Experience to both the datasets.\ndf_train['experience'] = df_train['experience'].str.replace(' yrs','')\ndf_test['experience'] = df_test['experience'].str.replace(' yrs','')\n\ndf_train[['min_experience','max_experience']] = df_train['experience'].str.split(\"-\",1,expand=True)\ndf_train[['min_experience','max_experience']] = df_train[['min_experience','max_experience']].astype(int)\ndf_train.drop('experience',axis=1,inplace=True)\ndf_train['experience'] = (df_train['min_experience'] + df_train['max_experience'])\/2\n\ndf_test[['min_experience','max_experience']] = df_test['experience'].str.split(\"-\",1,expand=True)\ndf_test[['min_experience','max_experience']] = df_test[['min_experience','max_experience']].astype(int)\ndf_test.drop('experience',axis=1,inplace=True)\ndf_test['experience'] = (df_test['min_experience'] + df_test['max_experience'])\/2","4681b294":"#Filling null values with appropriate MESSAGE\ndf_train['job_type'].fillna(value='Not Specified', inplace=True)\ndf_train['job_description'].fillna(value='Not Specified', inplace=True)\ndf_train['key_skills'].fillna(value='Not Specified', inplace=True)\n\ndf_test['job_type'].fillna(value='Not Specified', inplace=True)\ndf_test['job_description'].fillna(value='Not Specified', inplace=True)\n\ndf_train.reset_index(drop=True, inplace=True)\ndf_test.reset_index(drop=True, inplace=True)","e5ddb50f":"#Creating a common Dataframe with both the test and train datasets\ntemp_df1 = df_test\ntemp_df2 = df_train[['job_description', 'job_desig', 'job_type', 'key_skills', 'location','min_experience', 'max_experience', 'experience']]\nframes = [temp_df1, temp_df2]\ndf_aggregate = pd.concat(frames)\nlen(df_aggregate)","2cab49c4":"#Viewing last 5 entries of new aggregate dataset\ndf_aggregate.tail()","907c5993":"#Resetting Index due to incosistent index value in aggregated dataframe\ndf_aggregate.reset_index(drop=True, inplace=True)","8f445458":"#Anamolies in index removed\ndf_aggregate.tail()","650b17d0":"#Plotting Job Count by each city\nlocation_df = df_aggregate['location'].value_counts()\nlocation_df = location_df.reset_index()\nlocation_df.columns = ['Location','Count']\n\nfig = px.bar(location_df, x='Location', y='Count', color='Count',\n            title = '<b>Job Posting Citywise<b>')\n\nfig.update_xaxes(title_text='City')\nfig.update_yaxes(title_text='No of Jobs')\n\npy.iplot(fig)","2152cc1c":"longitude = [12.9716, 19.0760, 18.5204, 13.0827, 17.3850, 28.4020, 23.0225, 22.5726, 30.7333, 9.9312, 26.9124, 22.7196, 23.2156]\nlatitude = [77.5946, 72.8777, 73.8567, 80.2707, 78.4867, 76.8260, 72.5714, 88.3639, 76.7794, 76.2673, 75.7873, 75.8577, 72.6369]\n\n\n\nlocation_df = location_df.assign(longitude = longitude)\nlocation_df = location_df.assign(latitude = latitude)","bd1e7d6f":"px.set_mapbox_access_token(\"pk.eyJ1Ijoic2hha2Fzb20iLCJhIjoiY2plMWg1NGFpMXZ5NjJxbjhlM2ttN3AwbiJ9.RtGYHmreKiyBfHuElgYq_w\")\nfig1 = px.scatter_mapbox(\n                        location_df, \n                        lat=location_df.longitude, \n                        lon=location_df.latitude, \n                        size=\"Count\", \n                        color=\"Location\", \n                        hover_name = \"Count\",\n                        color_continuous_scale=px.colors.colorbrewer.Reds,  \n                        size_max=50, \n                        zoom=3)\npy.iplot(fig1)","b4f3cdbd":"fig = px.scatter(df_train, x='experience', y='salary', \n                 size='salary', color='experience',\n                title='<b>Experience vs Salary')\n\nfig.update_xaxes(title_text='Experience in Years')\nfig.update_yaxes(title_text='Salary in INR (\u20b9) Lakhs')\n\npy.iplot(fig)","5e93466e":"#Adding all the job descriptions into a single string.\ndef remove_specific_words(word_list):\n    job_description_string = ''\n    job_description_string1 = df_train.job_description.str.cat(sep=' ')\n    job_description_string2 = df_test.job_description.str.cat(sep=' ')\n    job_description_string = job_description_string + job_description_string1\n    job_description_string = job_description_string.lower()\n    for word in word_list:\n        job_description_string = job_description_string.replace(word,\" \")\n    return job_description_string\n\n#Removing redundant keywords so that it will not affect our final WORD-CLOUD\nword_list = ['specified','candidate','required','years','hand','minimum','good','working','work','least','must','relevant','experience',]\njob_description_string = remove_specific_words(word_list)","6fc6c648":"#Checking length of the cleaned String\nlen(job_description_string)","1259c5a1":"#Applying NLP and Generating the Word Cloud for Most Common TERMS\/WORDS in Job Descriptions.\ndef word_cloud_preprocessing(data):\n    data = data.split(\".\")\n    stop_words = set(stopwords.words('english'))\n    paragraph = ' '.join(data)\n    word_tokens = word_tokenize(paragraph)\n    preprocessed_data = ' '.join([word for word in word_tokens if not word in stop_words])\n    return preprocessed_data\n\ndef create_word_cloud(clean_data):\n    wordcloud = WordCloud(width=2400, height=1200, max_font_size=200, background_color=\"white\").generate(clean_data)\n    plt.figure(figsize=(12,10))\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.show()\n    \n\nfinal_data = word_cloud_preprocessing(job_description_string)\ncreate_word_cloud(final_data)","f46541a8":"# Salary vs Experience","218be2e8":"# Where Data Scientists are required?","2fd01388":"### This Notebook is yet to be completed, please visit soon for further updates :)","149352ce":"![](https:\/\/media.istockphoto.com\/vectors\/work-in-progress-on-warning-sign-vector-id1269479618?b=1&k=20&m=1269479618&s=170667a&w=0&h=jejUd2K7TplntOvdBz12U_fvk0llUJF_PoKKyZ0n1DA=)"}}