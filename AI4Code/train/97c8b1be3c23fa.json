{"cell_type":{"34c26c41":"code","9b67d292":"code","4ad42c83":"code","0f2904ed":"code","d4d22b04":"code","6307cf98":"code","3a056e3a":"code","a14ff50e":"code","a6bc24fd":"code","8a43f98f":"code","a1081b96":"code","5a6b3045":"code","0dc19a1f":"code","bccb1f9c":"code","a1757767":"code","e2fdba11":"code","6a8c02c6":"code","1d83b103":"code","6b855a3c":"code","0993f9a1":"code","486f4a75":"code","cddbb236":"code","0c84fa5a":"code","f8943c9c":"code","5d06c5d4":"code","c556b349":"code","ae8a1259":"markdown","62a5b483":"markdown","326b983d":"markdown","cf7e27fd":"markdown","34766e9b":"markdown","a0120723":"markdown","4a44ec49":"markdown","4a5b8023":"markdown","2fe42838":"markdown","4006d7ec":"markdown","fd28612a":"markdown","895c0412":"markdown","05fc71fe":"markdown","a39570cd":"markdown","2d8f1c6c":"markdown","eadd480f":"markdown","1ad8e6cc":"markdown","2928fa16":"markdown","65fd9e9a":"markdown","e0ba7a5a":"markdown","f59c4623":"markdown","c8b5bae6":"markdown"},"source":{"34c26c41":"import numpy as np\nimport pandas as pd \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfrom PIL import Image","9b67d292":"mpl.rcParams['figure.dpi'] = 200\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False","4ad42c83":"BASE_PATH = \"..\/input\/petfinder-pawpularity-score\/\"\ntrain = pd.read_csv(os.path.join(BASE_PATH, \"train.csv\"))","0f2904ed":"train.head()","d4d22b04":"fig, ax = plt.subplots(1,1, figsize=(12, 7))\nsns.histplot(x='Pawpularity', data=train, ax=ax)\nax.set_title('Pawpularity Distribution', fontsize=20, fontweight='bold')\nax.set_ylim(0, 700)\nplt.show()","6307cf98":"print(train['Pawpularity'].mean())","3a056e3a":"train['image_size'] = train['Id'].apply(lambda image_id : Image.open(os.path.join(BASE_PATH, 'train', image_id + '.jpg')).size)","a14ff50e":"train['width'] = train['image_size'].apply(lambda x: x[0])\ntrain['height'] = train['image_size'].apply(lambda x: x[1])","a6bc24fd":"fig = plt.figure(figsize=(14, 12))\nfig.suptitle('Image Aspect(Ratio)', fontweight='bold', fontsize=20)\nfig.set_facecolor('lightgray')\n\ngs = fig.add_gridspec(5, 6)\nax = fig.add_subplot(gs[:,:-1])\nsub_axes = [fig.add_subplot(gs[idx,-1]) for idx in range(5)]\n\n# main view\nax.scatter(x=train['width'], y=train['height'], c=train['Pawpularity'],\n           vmin=0, vmax=100, s=20)\nax.set_xlim(0, 1300)\nax.set_ylim(0, 1300)\nax.set_yticks(np.arange(0,1301,100))\nax.set_xticks(np.arange(0,1301,100))\nax.set_ylabel('Height', fontsize= 12)\nax.set_xlabel('Width', fontsize= 12)\n\nax.axhline(960 ,color='black', linewidth=0.4, linestyle='dashdot')\nax.axvline(1080 ,color='black', linewidth=0.4, linestyle='dashdot')\nax.axvline(1280 ,color='black', linewidth=0.4, linestyle='dashdot')\nax.plot([0, 960], [0, 960],color='black', linewidth=0.4, linestyle='dashdot')\nax.plot([0, 720], [0, 960],color='black', linewidth=0.4, linestyle='dashdot')\nax.plot([0, 540], [0, 960],color='black', linewidth=0.4, linestyle='dashdot')\nax.plot([0, 1080], [0, 810],color='black', linewidth=0.4, linestyle='dashdot')\n\n# subview\nfor idx, ax in enumerate(sub_axes,1):\n    ax.scatter(x=train['width'], y=train['height'], color='gray', alpha=0.1, s=5)\n    train_sub = train[(train['Pawpularity']<=idx*20) & ((idx-1)*20<=train['Pawpularity'])]\n    ax.scatter(x=train_sub['width'], \n               y=train_sub['height'], \n               c=train_sub['Pawpularity'], \n               vmin=0, vmax=100,\n               alpha=1, s=5)\n    ax.set_ylabel(f'<{idx*20}', fontsize= 12)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    \nfig.tight_layout()\nplt.show()","8a43f98f":"def meta_feature_dist(feature):\n    tmp_cnt = train.groupby(feature)['Pawpularity'].mean()\n    display(pd.DataFrame(tmp_cnt))\n    fig, ax = plt.subplots(1,1,figsize=(12, 5))\n    sns.histplot(x='Pawpularity',data=train,hue=feature,ax=ax)\n    plt.show()\n\ndef meta_feature_samples(feature):\n    colors = [\"#ED2938\", \"#B25F4A\", \"#77945C\", \"#3BCA6D\", \"#00FF7F\"]\n    figs = plt.figure(constrained_layout=True, figsize=(15, 12))\n    subfigs = figs.subfigures(5, 2, hspace=0.07)\n    for idx, fig in enumerate(subfigs,1):\n        axes = fig[0].subplots(1, 3)\n        fig[0].supylabel(f'<{idx*20}', fontweight='bold')\n        fig[0].set_facecolor(colors[idx-1])\n        train_sub = train[(train['Pawpularity']<=idx*20) & ((idx-1)*20<=train['Pawpularity']) & \n                          (train[feature]==0)\n                         ].sample(3, random_state=0)\n        for image_id, ax in zip(train_sub['Id'], axes):\n            ax.imshow(Image.open(os.path.join(BASE_PATH, 'train', image_id + '.jpg')))\n            ax.set_xticks([])\n            ax.set_yticks([])\n\n        axes = fig[1].subplots(1, 3)\n        fig[1].set_facecolor(colors[idx-1])\n\n        train_sub = train[(train['Pawpularity']<=idx*20) & ((idx-1)*20<=train['Pawpularity']) & (train[feature]==1)].sample(3, random_state=0)\n        for image_id, ax in zip(train_sub['Id'], axes):\n            ax.imshow(Image.open(os.path.join(BASE_PATH, 'train', image_id + '.jpg')))\n            ax.set_xticks([])\n            ax.set_yticks([])\n\n    figs.suptitle(f'{feature} 0 & 1 samples', fontweight='bold', fontsize=20)        \n    figs.supylabel('Pawpularity', fontsize=18)\n\n\n    plt.show()","a1081b96":"meta_feature_dist('Subject Focus')\nmeta_feature_samples('Subject Focus')","5a6b3045":"meta_feature_dist('Eyes')\nmeta_feature_samples('Eyes')","0dc19a1f":"meta_feature_dist('Face')\nmeta_feature_samples('Face')","bccb1f9c":"meta_feature_dist('Near')\nmeta_feature_samples('Near')","a1757767":"meta_feature_dist('Action')\nmeta_feature_samples('Action')","e2fdba11":"meta_feature_dist('Accessory')\nmeta_feature_samples('Accessory')","6a8c02c6":"meta_feature_dist('Group')\nmeta_feature_samples('Group')","1d83b103":"meta_feature_dist('Collage')\nmeta_feature_samples('Collage')","6b855a3c":"meta_feature_dist('Human')\nmeta_feature_samples('Human')","0993f9a1":"meta_feature_dist('Occlusion')\nmeta_feature_samples('Occlusion')","486f4a75":"meta_feature_dist('Info')\nmeta_feature_samples('Info')","cddbb236":"meta_feature_dist('Blur')\nmeta_feature_samples('Blur')","0c84fa5a":"one_hundred = train[train['Pawpularity'] == 100]\nprint(len(one_hundred))","f8943c9c":"fig, ax = plt.subplots(12, 12, figsize=(20, 20))\nfor idx, ax in enumerate(ax.flatten()):\n    ax.imshow(Image.open(os.path.join(BASE_PATH, 'train', one_hundred['Id'].iloc[idx] + '.jpg')))\n    ax.axis('off')\n\nfig.subplots_adjust(hspace = .05)\nplt.show()","5d06c5d4":"fig, ax = plt.subplots(12, 12, figsize=(20, 20))\nfor idx, ax in enumerate(ax.flatten(), 144):\n    ax.imshow(Image.open(os.path.join(BASE_PATH, 'train', one_hundred['Id'].iloc[idx] + '.jpg')))\n    ax.axis('off')\n\nfig.subplots_adjust(hspace = .05)    \nplt.show()","c556b349":"print(train['Pawpularity'].min())\none_two = train[train['Pawpularity'] < 3]\nfig, ax = plt.subplots(9, 9, figsize=(15, 15))\nfor idx, ax in enumerate(ax.flatten()):\n    ax.imshow(Image.open(os.path.join(BASE_PATH, 'train', one_two['Id'].iloc[idx] + '.jpg')))\n    ax.axis('off')\n\nfig.subplots_adjust(hspace = .05)    \nplt.show()","ae8a1259":"Most high score notebooks measure Pawpularity between 37 and 38 for noisy data.\n\nWhen receiving noise, it seems to be the default to spit out the average first.","62a5b483":"## 3. One-Hundred Club","326b983d":"### 2-11. Info","cf7e27fd":"## 2. Each Meta Features\n\nLet's look at each distribution and examples for meta features.","34766e9b":"### 2-10. Occlusion","a0120723":"### 2-6. Accessory","4a44ec49":"### 2-12. Blur\n\nThis feature doesn't look like the quality of the data.","4a5b8023":"### 2-9. Human","2fe42838":"### 2-5. Action","4006d7ec":"### 2-1. Subject Focus","fd28612a":"Interesting results were found in the image size and the distribution of scores according to size.\n\n- High Pawpularity images have many images with a fixed image ratio.\n    - Or the height and width are fixed(960\/1280).\n- The ratios are `1:1`, `3:4`, `9:16`, and `12:9`. This is the screen aspect ratio that people are generally familiar with.\n- However, this feature by itself did not change the performance.Based on this, I think it would be good to consider augmentation.","895c0412":"## 1. Image Width\/Height Ratio\n\nI think the size of the image is a pretty important feature. The image can predict what kind of camera it is, and can guess whether it is preprocessed","05fc71fe":"**Why is it suddenly rising from 100?**\n\nWouldn't it be possible to get better generalization results if we didn't use this data?","a39570cd":"### 2-3. Face","2d8f1c6c":"### 2-4. Near","eadd480f":"## 4. One-Two Club","1ad8e6cc":"### 2-2. Eyes\n\nThis feature doesn't look like the quality of the data.","2928fa16":"## Pawpularity EDA\n\n### How Pawpularity Score Is Derived\n\n- The Pawpularity Score is derived from each pet profile's page view statistics at the listing pages, using an algorithm that normalizes the traffic data across different pages, platforms (web & mobile) and various metrics.\n- Duplicate clicks, crawler bot accesses and sponsored profiles are excluded from the analysis.","65fd9e9a":"### 2-8. Collage","e0ba7a5a":"## 0. Pawpularity Distribution","f59c4623":"## It will be updated continuously for the time being. If you are looking forward to the next, please press upvote.","c8b5bae6":"### 2-7. Group"}}