{"cell_type":{"4cb28cdd":"code","35f1de52":"code","ceea0b10":"code","68abd2f2":"code","071d0099":"code","65e527c7":"code","8372034d":"code","737a2b15":"code","dbee15af":"code","75613dc1":"code","6d5e9b6f":"code","044c7fb6":"code","5b8dd201":"code","10f3a6c7":"code","bc055696":"code","11b92e9c":"code","e1396f17":"code","60c07fa3":"code","f3fa08ad":"code","f60e36e0":"code","efa2a8d2":"code","bb3d4a2e":"code","ad27919c":"code","e3e6ca06":"code","ec81b2c1":"code","02917cf7":"code","cb55bed9":"code","8f9588c7":"code","f1c76471":"code","ab7a15b5":"code","d9d09664":"code","5be2aa60":"code","3a303422":"code","7ed9e12a":"code","16d5d4a2":"code","7897cdc5":"code","38be14d6":"code","dbc83e40":"code","bdec2be8":"code","dcd127ee":"code","cfacc278":"code","c1cbaf66":"code","dd097eb8":"code","a6b86426":"code","4d79b984":"code","f276367a":"code","18254bcc":"code","f9720687":"code","8688e0c4":"code","ac2a1528":"code","d6a891f3":"code","9a88a7d7":"code","59164431":"code","e3fef12a":"code","3bec958b":"code","2c709513":"code","10fb4732":"code","567f7cdc":"code","d3637aea":"code","370c4b2d":"code","c46bcd87":"code","70a5f2c4":"code","843ce59b":"code","abb2d4e9":"code","f7880f03":"code","f36b1aee":"code","2bec2ca2":"code","4d99d61a":"code","67301d30":"markdown","a099886d":"markdown","67005d6b":"markdown","0e7c6fb9":"markdown","d547b756":"markdown","4d9a9e14":"markdown","144a2d56":"markdown","178016c9":"markdown","3269f208":"markdown","1a33ac1c":"markdown","2485cc0a":"markdown","5399a4c7":"markdown","f61abda1":"markdown","2784fa20":"markdown","44dc3fdb":"markdown","4e7ebc49":"markdown","1a3837ad":"markdown","ff191def":"markdown","6cf911da":"markdown","e8ddbb1f":"markdown","0ca8a033":"markdown","9e74030a":"markdown","27b983ef":"markdown","2635ed66":"markdown","886edf72":"markdown","be3b07cb":"markdown","34f00d6e":"markdown"},"source":{"4cb28cdd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport pydicom as dicom\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.metrics import mean_squared_error, r2_score","35f1de52":"df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ndf.head()","ceea0b10":"df = df.rename(columns = {'anatom_site_general_challenge':'site'})","68abd2f2":"df.head()","071d0099":"df.shape","65e527c7":"df.isnull().sum()","8372034d":"df = df.dropna(axis=0, how = 'any')","737a2b15":"df.isnull().sum()","dbee15af":"df.shape","75613dc1":"sns.countplot(x = 'sex', data = df, hue = 'target')","6d5e9b6f":"sns.distplot(df['age_approx'])","044c7fb6":"age = []\nsex = []\nfor i in range(df.shape[0]):\n    try: \n        if df['target'][i] == 1:\n            age.append(df['age_approx'][i]) \n            sex.append(df['sex'][i])\n    except:\n        pass","5b8dd201":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nsns.distplot(age)\nplt.title('Distribution of age of people having malignant cancer')\n\nplt.subplot(1,2,2)\nsns.countplot(y = age)\nplt.ylabel('Age')\nplt.title('Count plot of age of people having malignant cancer')","10f3a6c7":"sns.countplot(x='site', data=df, hue='target')\nplt.xticks(rotation='90')","bc055696":"site = []\nfor i in range(df.shape[0]):\n    try: \n        if df['target'][i] == 1:\n            site.append(df['site'][i]) \n    except:\n        pass\n    ","11b92e9c":"sns.countplot(y = site,palette=\"rocket\")\nplt.title('Graph showing count of patients having cancer and the site it is located in')\nplt.ylabel('Site')","e1396f17":"diagnosis = []\nfor i in range(df.shape[0]):\n    try: \n        if df['target'][i] == 1:\n            diagnosis.append(df['diagnosis'][i]) \n    except:\n        pass\n    ","60c07fa3":"sns.countplot(y = diagnosis)","f3fa08ad":"df.sex.unique()","f60e36e0":"df.site.unique()","efa2a8d2":"df.diagnosis.unique()","bb3d4a2e":"df = pd.get_dummies(df, columns = ['sex'],drop_first=True)\ndf.head()","ad27919c":"df = pd.get_dummies(df, columns = ['site'],drop_first=True)\ndf.head()","e3e6ca06":"df = pd.get_dummies(df, columns = ['diagnosis'],drop_first=True)\n","ec81b2c1":"df = df.drop('diagnosis_unknown', axis = 1)\ndf.head()","02917cf7":"df = df.drop(['benign_malignant', 'patient_id'], axis = 1)\ndf.head()","cb55bed9":"plt.figure(figsize = (10,10))\nsns.heatmap(df.corr()[['target']].sort_values('target').tail(16), annot = True)","8f9588c7":"plt.figure(figsize=(15,20))\n\nplt.subplot(4,2,1)\nsns.lineplot(df['diagnosis_melanoma'], df['target'])\nplt.subplot(4,2,2)\nsns.lineplot(df['age_approx'], df['target'])\nplt.subplot(4,2,3)\nsns.lineplot(df['site_torso'], df['target'])\nplt.subplot(4,2,4)\nsns.lineplot(df['diagnosis_nevus'], df['target'])\nplt.subplot(4,2,5)\nsns.lineplot(df['sex_male'], df['target'])\nplt.subplot(4,2,6)\nsns.lineplot(df['site_upper extremity'], df['target'])\nplt.subplot(4,2,7)\nsns.lineplot(df['site_lower extremity'], df['target'])","f1c76471":"X = df[['diagnosis_melanoma','site_torso','diagnosis_nevus','site_lower extremity','site_upper extremity', 'sex_male', 'age_approx']]\ny = df['target']","ab7a15b5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","d9d09664":"from sklearn.linear_model import LogisticRegression\nclassifier_lr = LogisticRegression()\nclassifier_lr.fit(X_train,y_train)\n\ny_pred_lr = classifier_lr.predict(X_test)\nprint('Accuracy Score: ',accuracy_score(y_test,y_pred_lr))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_lr))","5be2aa60":"from sklearn import svm\n\nclassifier_svm = svm.SVC()\nclassifier_svm.fit(X_train,y_train)\n\ny_pred_svm = classifier_svm.predict(X_test)\nprint('Accuracy Score: ',accuracy_score(y_test,y_pred_svm))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_svm))","3a303422":"from sklearn.tree import DecisionTreeClassifier\n\nclassifier_dt = DecisionTreeClassifier()\nclassifier_dt.fit(X_train,y_train)\n\ny_pred_dt = classifier_dt.predict(X_test)\nprint('Accuracy Score: ',accuracy_score(y_test,y_pred_dt))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_dt))","7ed9e12a":"from sklearn.ensemble import RandomForestClassifier\n\nclassifier_rf = RandomForestClassifier()\nclassifier_rf.fit(X_train,y_train)\n\ny_pred_rf = classifier_rf.predict(X_test)\nprint('Accuracy Score: ',accuracy_score(y_test,y_pred_rf))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_rf))","16d5d4a2":"from sklearn.ensemble import GradientBoostingClassifier\n\nclassifier_gb = GradientBoostingClassifier()\nclassifier_gb.fit(X_train,y_train)\n\ny_pred_gb = classifier_gb.predict(X_test)\nprint('Accuracy Score: ',accuracy_score(y_test,y_pred_gb))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_gb))","7897cdc5":"from sklearn.ensemble import AdaBoostClassifier\n\nclassifier_ab = AdaBoostClassifier()\nclassifier_ab.fit(X_train,y_train)\n\ny_pred_ab = classifier_ab.predict(X_test)\nprint('Accuracy Score: ',accuracy_score(y_test,y_pred_ab))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_ab))","38be14d6":"x_l = ['Logistic Regression', 'Support Vector Machine', 'Decison Tree', 'Random Forest', 'Adaptive Boosting', 'Gradient Boosting']\ny_l = [1.0, 0.98, 1.0, 1.0, 1.0, 1.0]\n\nsns.barplot(y_l, x_l,palette=\"Reds\")\nplt.xlim([0.9, 1.003])","dbc83e40":"train1 = svm.SVC()\ntrain1.fit(X_train,y_train)","bdec2be8":"image = '\/kaggle\/input\/siim-isic-melanoma-classification\/train\/' + df['image_name'][91] +'.dcm'\nds = dicom.dcmread(image)\n\nplt.imshow(ds.pixel_array)","dcd127ee":"s0 = df.target[df.target.eq(0)].sample(50, random_state=1).index\ns1 = df.target[df.target.eq(1)].sample(60,random_state=1).index \n\ndf = df.loc[s0.union(s1)]\ndf['target'].value_counts()","cfacc278":"df.shape","c1cbaf66":"images = []\nfor x in df['image_name']:\n    image = '\/kaggle\/input\/siim-isic-melanoma-classification\/train\/' + x +'.dcm'\n    ds = dicom.dcmread(image)\n    pixels = ds.pixel_array\n    images.append(pixels.flatten())\n","dd097eb8":"import tensorflow as tf\nimages = tf.keras.preprocessing.sequence.pad_sequences(\n  images,\n  maxlen = 720,\n  dtype = \"int32\",\n  padding = \"pre\",\n  truncating = \"pre\",\n  value = 0\n)","a6b86426":"from sklearn.linear_model import LogisticRegression\nX = images\ny = np.array(df['target'])\nclassifier_lr = LogisticRegression()\nclassifier_lr.fit(X,y)","4d79b984":"from sklearn import svm\nX = images\ny = np.array(df['target'])\nclassifier_svm = svm.SVC()\nclassifier_svm.fit(X,y)","f276367a":"from sklearn.tree import DecisionTreeClassifier\nX = images\ny = np.array(df['target'])\nclassifier_dt = DecisionTreeClassifier()\nclassifier_dt.fit(X,y)","18254bcc":"from sklearn.ensemble import RandomForestClassifier\nX = images\ny = np.array(df['target'])\nclassifier_rf = RandomForestClassifier()\nclassifier_rf.fit(X,y)","f9720687":"from sklearn.ensemble import AdaBoostClassifier\nX = images\ny = np.array(df['target'])\nclassifier_ab = AdaBoostClassifier()\nclassifier_ab.fit(X,y)","8688e0c4":"from sklearn.ensemble import GradientBoostingClassifier\nX = images\ny = np.array(df['target'])\nclassifier_gb = GradientBoostingClassifier()\nclassifier_gb.fit(X,y)","ac2a1528":"test = df.tail(50)\ntest.head()","d6a891f3":"test_images = []\nfor x in test['image_name']:\n    image = '\/kaggle\/input\/siim-isic-melanoma-classification\/train\/' + x +'.dcm'\n    ds = dicom.dcmread(image)\n    pixels = ds.pixel_array\n    \n    test_images.append(pixels.flatten())\n","9a88a7d7":"test_images = tf.keras.preprocessing.sequence.pad_sequences(\n  test_images,\n  maxlen = 720,\n  dtype = \"int32\",\n  padding = \"pre\",\n  truncating = \"pre\",\n  value = 0\n)","59164431":"X_test = test_images\ny_test = np.array(test['target'])\ny_pred_lr = classifier_lr.predict(X_test)","e3fef12a":"print('Accuracy Score: ',accuracy_score(y_test,y_pred_lr))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_lr))","3bec958b":"X_test = test_images\ny_test = np.array(test['target'])\ny_pred_svm = classifier_svm.predict(X_test)","2c709513":"print('Accuracy Score: ',accuracy_score(y_test,y_pred_svm))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_svm))","10fb4732":"X_test = test_images\ny_test = np.array(test['target'])\ny_pred_dt = classifier_dt.predict(X_test)","567f7cdc":"print('Accuracy Score: ',accuracy_score(y_test,y_pred_dt))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_dt))","d3637aea":"X_test = test_images\ny_test = np.array(test['target'])\ny_pred_rf = classifier_rf.predict(X_test)","370c4b2d":"print('Accuracy Score: ',accuracy_score(y_test,y_pred_rf))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_rf))","c46bcd87":"X_test = test_images\ny_test = np.array(test['target'])\ny_pred_ab = classifier_ab.predict(X_test)","70a5f2c4":"print('Accuracy Score: ',accuracy_score(y_test,y_pred_ab))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_ab))","843ce59b":"X_test = test_images\ny_test = np.array(test['target'])\ny_pred_gb = classifier_gb.predict(X_test)","abb2d4e9":"print('Accuracy Score: ',accuracy_score(y_test,y_pred_gb))\nprint('Confusion Matrix: \\n',confusion_matrix(y_test,y_pred_gb))","f7880f03":"x_l = ['Logistic Regression', 'Support Vector Machine', 'Decison Tree', 'Random Forest', 'Adaptive Boosting', 'Gradient Boosting']\ny_l = [0.96, 0.68, 1.0, 1.0, 1.0, 1.0]\n\nsns.barplot(y_l, x_l,palette=\"mako\")","f36b1aee":"train2 = LogisticRegression()\ntrain2.fit(X,y)","2bec2ca2":"df.head()","4d99d61a":"image_path = '\/kaggle\/input\/siim-isic-melanoma-classification\/train\/ISIC_0149568.dcm'\ndetails = [[55,0,0,0,1,1,0]]\nimage_to_test = []\nds = dicom.dcmread(image_path)\npixels = ds.pixel_array\nplt.imshow(pixels)\nimage_to_test.append(pixels.flatten())\n\nimage_to_test = tf.keras.preprocessing.sequence.pad_sequences(\n  image_to_test,\n  maxlen = 720,\n  dtype = \"int32\",\n  padding = \"pre\",\n  truncating = \"pre\",\n  value = 0\n)\n\nif train1.predict(details) == [1]:\n    \n    result1 = 'Malignant'\nelse:\n    result1 = 'Benign'\n\nif train2.predict(image_to_test) == [1]:\n    result2 = 'Malignant'\nelse:\n    result2 = 'Benign'\n\n\nprint('Result from patient details: ', result1)\nprint('Result from patient image: ', result2)","67301d30":"## Random Forest","a099886d":"> # Training and Testing the Model","67005d6b":"# SIIM-ISIC Melanoma Classification","0e7c6fb9":"## Logistic Regression","d547b756":"## Decision Tree","4d9a9e14":"## Random Forest","144a2d56":"# Testing the Model","178016c9":"# Analysing Patient Records","3269f208":"# Training the Model","1a33ac1c":"## Gradient Boosting","2485cc0a":"## Support Vector Machine","5399a4c7":"## Logistic Regression","f61abda1":"# Importing Libraries","2784fa20":"## Adaptive Boosting","44dc3fdb":"## Logistic Regression","4e7ebc49":"# Analysing Images","1a3837ad":"# Final Testing","ff191def":"## Gradient Boosting","6cf911da":"## Adaptive Boosting ","e8ddbb1f":"## Adaptive Boosting","0ca8a033":"## Decision Tree","9e74030a":"## Support Vector Machine","27b983ef":"## Decision Tree","2635ed66":"## END","886edf72":"## Gradient Boosting","be3b07cb":"## Support Vector Machine","34f00d6e":"## Random Forest"}}