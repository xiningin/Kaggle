{"cell_type":{"efcdc460":"code","1bdf11b3":"code","fa422878":"code","24e8d869":"code","923b4aef":"code","607c834c":"code","f4151687":"code","e235fc53":"code","579ad1f8":"code","e728e4e1":"code","0511a4a3":"code","8e8653d9":"code","e427ecc0":"code","3ebdbb9a":"code","66fa7227":"code","06686b71":"code","671104a8":"code","69e53795":"code","9e2134c3":"code","b39c6993":"markdown","860b3a7f":"markdown"},"source":{"efcdc460":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1bdf11b3":"import pandas as pd\nimport numpy as np","fa422878":"pd.options.display.max_columns = None\ndf=pd.read_csv(r\"..\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")\ndf","24e8d869":"df.isnull().sum()","923b4aef":"def fillAllValues(groupByColumn):\n    categoricalColumns=['WindGustDir','WindDir9am','WindDir3pm','RainToday','RainTomorrow','Location']+[groupByColumn]\n    gb=df.groupby(['Location',groupByColumn],as_index=False)\n    def fillWithMode(column):\n        mode=column.mode()\n        if len(mode.index)>0:\n            return column.fillna(mode.iloc[0])\n        return column\n    return pd.concat([gb[categoricalColumns].transform(fillWithMode),gb[df.columns.difference(categoricalColumns)].transform(lambda x:x.fillna(x.mean()))],axis=1)\ndf['MonthYear']=pd.DatetimeIndex(df.Date).to_period('M').astype(str)\ndf.drop(columns=['Date'],inplace=True)\ndf=fillAllValues('MonthYear')\ndf['Month']=pd.DatetimeIndex(df.MonthYear).month.astype(str)\ndf.drop(columns=['MonthYear'],inplace=True)\ndf=fillAllValues('Month')\ndf.dropna(axis=1,inplace=True)","607c834c":"df=pd.get_dummies(df[['WindDir9am', 'WindDir3pm', 'RainToday', 'RainTomorrow', 'Location']],drop_first=True,prefix=['WindDir9am', 'WindDir3pm', 'RainToday', 'RainTomorrow', 'Location'])","f4151687":"df1=df.drop(columns=['RainTomorrow_Yes'])\ndf1.columns","e235fc53":"def TrainTestSplit(df,outputVariable,stratifySampling=False,transformationY=np.array,test_size=0.25):\n    from sklearn.model_selection import train_test_split\n    y=transformationY(df[outputVariable])\n    return train_test_split(df[df.columns.difference([outputVariable])],y,random_state=0,stratify=y if stratifySampling else None,test_size=test_size)","579ad1f8":"X_train,X_test,y_train,y_test=TrainTestSplit(df1,'RainToday_Yes',True)","e728e4e1":"def ClassificationAlgorithms():\n     \n    class color:\n        PURPLE = '\\033[95m'\n        CYAN = '\\033[96m'\n        DARKCYAN = '\\033[36m'\n        BLUE = '\\033[94m'\n        GREEN = '\\033[92m'\n        YELLOW = '\\033[93m'\n        RED = '\\033[91m'\n        BOLD = '\\033[1m'\n        UNDERLINE = '\\033[4m'\n        END = '\\033[0m'\n        \n    from sklearn.metrics import confusion_matrix,accuracy_score\n    #logistic Regression\n    from sklearn.linear_model import LogisticRegression\n    print(color.PURPLE + color.BOLD + color.UNDERLINE + 'LOGISTIC REGRESSION\\n' + color.END)\n    model=LogisticRegression()\n    model.fit(X_train,y_train)\n    pred=model.predict(X_test)\n    print(f\"Accuracy For Test Data : {accuracy_score(y_test,pred)}\\n\")\n    print(f\"Confusion Matrix For Test Data : \\n{confusion_matrix(y_test, pred)}\\n\")\n    pred=model.predict(X_train)\n    print(f\"\\nAccuracy For Train Data : {accuracy_score(y_train,pred)}\\n\")\n    print(f\"Confusion Matrix For Train Data : \\n{confusion_matrix(y_train, pred)}\\n\")\n    #Decision Tree Classification\n    print(color.CYAN + color.BOLD + color.UNDERLINE + '\\n\\n\\nDECISION TREE CLASSIFICATION\\n' + color.END)\n    from sklearn.tree import DecisionTreeClassifier\n    model=DecisionTreeClassifier()\n    model.fit(X_train,y_train)\n    pred=model.predict(X_test)\n    print(f\"Accuracy For Test Data : {accuracy_score(y_test,pred)}\\n\")\n    print(f\"Confusion Matrix For Test Data : \\n{confusion_matrix(y_test, pred)}\\n\")\n    pred=model.predict(X_train)\n    print(f\"\\nAccuracy For Train Data : {accuracy_score(y_train,pred)}\\n\")\n    print(f\"Confusion Matrix For Train Data : \\n{confusion_matrix(y_train, pred)}\\n\")\n    #Random Forest Classification\n    print(color.CYAN + color.BOLD + color.UNDERLINE + '\\n\\n\\nRANDOM FOREST CLASSIFICATION\\n' + color.END)\n    from sklearn.ensemble import RandomForestClassifier\n    model=RandomForestClassifier()\n    model.fit(X_train,y_train)\n    pred=model.predict(X_test)\n    print(f\"Accuracy For Test Data : {accuracy_score(y_test,pred)}\\n\")\n    print(f\"Confusion Matrix For Test Data : \\n{confusion_matrix(y_test, pred)}\\n\")\n    pred=model.predict(X_train)\n    print(f\"\\nAccuracy For Train Data : {accuracy_score(y_train,pred)}\\n\")\n    print(f\"Confusion Matrix For Train Data : \\n{confusion_matrix(y_train, pred)}\\n\")\n    #StandardScaler\n    from sklearn.preprocessing import StandardScaler\n    ss=StandardScaler()\n    ssTrain=ss.fit_transform(X_train)\n    ssTest=ss.transform(X_test)\n    #Support Vector Classification\n    print(color.CYAN + color.BOLD + color.UNDERLINE + '\\n\\n\\nSUPPORT VECTOR CLASSIFICATION\\n' + color.END)\n    from sklearn.ensemble import RandomForestClassifier\n    model=RandomForestClassifier()\n    model.fit(ssTrain,y_train)\n    pred=model.predict(ssTest)\n    print(f\"Accuracy For Test Data : {accuracy_score(y_test,pred)}\\n\")\n    print(f\"Confusion Matrix For Test Data : \\n{confusion_matrix(y_test, pred)}\\n\")\n    pred=model.predict(ssTrain)\n    print(f\"\\nAccuracy For Train Data : {accuracy_score(y_train,pred)}\\n\")\n    print(f\"Confusion Matrix For Train Data : \\n{confusion_matrix(y_train, pred)}\\n\")\n#     #KNN\n#     print(color.CYAN + color.BOLD + color.UNDERLINE + '\\n\\n\\nK NEAREST NEIGHBOUR\\n' + color.END)\n#     from sklearn.neighbors import KNeighborsClassifier\n#     model=KNeighborsClassifier()\n#     model.fit(ssTrain,y_train)\n#     pred=model.predict(ssTest)\n#     print(f\"Accuracy For Test Data : {accuracy_score(y_test,pred)}\\n\")\n#     print(f\"Confusion Matrix For Test Data : \\n{confusion_matrix(y_test, pred)}\\n\")\n#     pred=model.predict(ssTrain)\n#     print(f\"\\nAccuracy For Train Data : {accuracy_score(y_train,pred)}\\n\")\n#     print(f\"Confusion Matrix For Train Data : \\n{confusion_matrix(y_train, pred)}\\n\")","0511a4a3":"from sklearn.linear_model import LogisticRegression\ndef getBestThreshold(steps=.1,log=LogisticRegression()):  \n    log.fit(X_train,y_train)\n    testPredictedProbabilitiesOfOnes=log.predict_proba(X_test)[:,1]\n    trainPredictedProbabilitiesOfOnes=log.predict_proba(X_train)[:,1]\n    from sklearn.metrics import accuracy_score\n    threshold=np.arange(0,1,steps)\n    testResults=[]\n    trainResults=[]\n    thresholdPredictionBinary={}\n    for i in threshold:\n        thresholdPredictionBinary[i]=np.where(testPredictedProbabilitiesOfOnes>i,1,0)\n        testResults.append(accuracy_score(y_test,thresholdPredictionBinary[i]))\n        trainResults.append(accuracy_score(y_train,np.where(trainPredictedProbabilitiesOfOnes>i,1,0)))\n    result=pd.DataFrame({'testResults':testResults,'trainResults':trainResults},threshold)\n    result.plot(kind='line',xlabel=\"Thresholds\",ylabel=\"Accuracy Score\",figsize=(20,5))\n    bestThreshold=result.testResults.idxmax()\n    print(f\"Best Accuracy For Test Results : {result.testResults.max()}\\nBest Threshold For Test Results : {bestThreshold}\\nAccuracy For Training Data With {bestThreshold} As Threshold : {result.trainResults.max()}\")\n    return testPredictedProbabilitiesOfOnes","8e8653d9":"def plot_ROC_curve(pred):\n    from sklearn.metrics import roc_curve,auc\n    fpr, tpr, threshold = roc_curve(y_test, pred)\n    roc_auc = auc(fpr, tpr)\n    from matplotlib import pyplot as plt\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n    plt.legend(loc = 'lower right')\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.xlim([0, 1])\n    plt.ylim([0, 1])\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.show()","e427ecc0":"ClassificationAlgorithms()","3ebdbb9a":"pred=getBestThreshold()","66fa7227":"plot_ROC_curve(pred)","06686b71":"X_train,X_test,y_train,y_test=TrainTestSplit(df,'RainTomorrow_Yes',True)","671104a8":"ClassificationAlgorithms()","69e53795":"pred=getBestThreshold()","9e2134c3":"plot_ROC_curve(pred)","b39c6993":"# Rain Today","860b3a7f":"# Rain Tomorrow"}}