{"cell_type":{"c296649b":"code","2eb3ba61":"code","3a37b7f2":"code","2e1bcffe":"code","56c1048f":"code","7583856e":"code","f4d174e0":"code","eedd9ad1":"code","83beb10f":"code","b6a3f308":"code","3209c63d":"code","1b72d6eb":"code","6616e7c0":"code","d2b36605":"code","d483eaea":"code","ae848d32":"code","ad975793":"code","c01309ff":"code","22edb17f":"code","bdad81cf":"code","3a91d348":"code","bf7bb9c0":"code","efa38cb3":"code","ece32201":"code","05e7fc71":"code","5c0b4df1":"code","15475aff":"code","6969af9e":"markdown","ebae1932":"markdown","4bb42594":"markdown","00d89c58":"markdown","73f6eb61":"markdown","ac9932c5":"markdown","80a0f524":"markdown","1259999a":"markdown","37caa545":"markdown","e15bd066":"markdown","1ebf6be2":"markdown","bfc4eaae":"markdown","99cd7ed9":"markdown","bd115d20":"markdown","21c0f513":"markdown","6bc48bcb":"markdown","8295db85":"markdown","ee3e6d94":"markdown","bc93ef10":"markdown","86c5ba08":"markdown","ba71c4d4":"markdown"},"source":{"c296649b":"import numpy as np\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport random\nimport copy \n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, make_scorer, accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\n\n!pip install catboost\nimport catboost\nfrom catboost import CatBoostRegressor, Pool\n\n!pip install bayesian-optimization\nfrom bayes_opt import BayesianOptimization\n\nsns.set(rc={'figure.figsize':(16,8)})\nroot = \"\/kaggle\/input\/rucode-carprice\/\"","2eb3ba61":"data = pd.read_csv(root + \"data_train.csv\")\ndata.sample(5)","3a37b7f2":"data.info()","2e1bcffe":"data.describe()","56c1048f":"data.isna().sum()","7583856e":"sns.distplot(data[\"\u0413\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\"])","f4d174e0":"sns.distplot(data[\"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\"])","eedd9ad1":"sns.distplot(data[\"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\"])","83beb10f":"# \u042f \u043d\u0435 \u0437\u043d\u0430\u044e, \u043f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u0430 \u0441\u0442\u0440\u043e\u0447\u043a\u0430 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 :) \u0412 \u0433\u0443\u0433\u043b-\u043a\u043e\u043b\u0430\u0431\u0435 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\n# sns.distplot(data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\"])","b6a3f308":"sns.distplot(data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"])","3209c63d":"sns.distplot(data[\"\u041f\u0440\u043e\u0431\u0435\u0433\"])","1b72d6eb":"# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0426\u0435\u043d\u044b \u043e\u0442 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\nsns.scatterplot(data[\"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\"], data[\"\u0426\u0435\u043d\u0430\"])","6616e7c0":"sns.scatterplot(data[\"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\"], data[\"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\"])","d2b36605":"# \u041d\u0430\u0439\u0434\u0451\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b\ntrain_data = pd.read_csv(root + \"data_train.csv\").drop(\"\u0426\u0435\u043d\u0430\", axis=1)\ntest_data = pd.read_csv(root + \"data_test.csv\")\ntrain_test_data = pd.concat((train_data, test_data), ignore_index=True)\n\nidx = ~pd.isna(train_test_data[\"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\"])\nX = train_test_data.loc[idx, \"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\"].values.reshape(-1, 1)\nX = np.concatenate((X, np.ones((X.shape[0], 1))), axis=1)\nY = train_test_data.loc[idx, \"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\"]\n\nlin_reg = LinearRegression()\nlin_reg.fit(X, Y)\nlin_reg.coef_","d483eaea":"# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0438\u043f\u0430\u0445 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d \u0441 \u0440\u0430\u0437\u043d\u044b\u043c \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\ndef get_block_fuel(data):\n    diesel_all = sum(data[\"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\"] == \"\u0434\u0438\u0437\u0435\u043b\u044c\")\n    petrol_all = sum(data[\"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\"] == \"\u0431\u0435\u043d\u0437\u0438\u043d\")\n\n    block_sz = 20\n    block_cnt = 50\n\n    data_block = data\n    row_block = data_block.loc[:, [\"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\"]].applymap(lambda p: min(p \/\/ block_sz, block_cnt-1))\n    data_block.loc[:, \"\u0411\u043b\u043e\u043a\"] = row_block.values\n    block_fuel = data_block.groupby([\"\u0411\u043b\u043e\u043a\", \"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\"]).agg({\"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\": \"count\"})\n\n    for block in range(block_cnt):\n        if not (block, \"\u0431\u0435\u043d\u0437\u0438\u043d\") in block_fuel.index:\n            block_fuel.loc[(block, \"\u0431\u0435\u043d\u0437\u0438\u043d\"), \"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\"] = 0\n        if not (block, \"\u0434\u0438\u0437\u0435\u043b\u044c\") in block_fuel.index:\n            block_fuel.loc[(block, \"\u0434\u0438\u0437\u0435\u043b\u044c\"), \"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\"] = 0\n\n    # [block][fuel_type]\n    # fuel_type = 0 => petrol\n    # fuel_type = 1 => diesel\n    return block_fuel.values.reshape(-1, 2)","ae848d32":"# \u041c\u043e\u0434\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u0435\u0441\u0442 \u0438 \u0434\u0432\u0435\u0440\u0435\u0439 \u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\ndef get_model_info(data):\n    idx = data[(~pd.isna(data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"]) & ~pd.isna(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\"))].index\n    data = data.loc[idx, :]\n\n    seat_cnt = data.groupby([\"\u041c\u0430\u0440\u043a\u0430\", \"\u041c\u043e\u0434\u0435\u043b\u044c\"])[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\"].apply(lambda x: x.mode())\n    door_cnt = data.groupby([\"\u041c\u0430\u0440\u043a\u0430\", \"\u041c\u043e\u0434\u0435\u043b\u044c\"])[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"].apply(lambda x: x.mode())\n\n    model_info = pd.DataFrame({\n        \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\": seat_cnt,\n        \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\": door_cnt,\n    })\n\n    model_info = model_info.droplevel(level=2)\n    return model_info","ad975793":"# \u041a\u043e\u0441\u0442\u044b\u043b\u044c\nclass MyPredictor:\n    def __init__(self, value):\n        self.value = value\n\n    def predict(self, x):\n        return self.value\n\ncar_info = [\"\u041c\u0430\u0440\u043a\u0430\", \"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\", \"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\", \"\u0422\u0440\u0430\u043d\u0441\u043c\u0438\u0441\u0441\u0438\u044f\", \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\", \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"]\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\ndef get_mark_models(data):\n    data = data.copy()\n    data.dropna(inplace = True)\n    model_by_brand_predictor = dict()\n\n    for brand in data[\"\u041c\u0430\u0440\u043a\u0430\"].unique():\n        X_labels = car_info\n    \n        X_cars = data.loc[data[\"\u041c\u0430\u0440\u043a\u0430\"] == brand, X_labels]\n        Y_cars = data.loc[data[\"\u041c\u0430\u0440\u043a\u0430\"] == brand, \"\u041c\u043e\u0434\u0435\u043b\u044c\"]\n\n        predictor = catboost.CatBoostClassifier(cat_features=[\"\u041c\u0430\u0440\u043a\u0430\", \"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\", \"\u0422\u0440\u0430\u043d\u0441\u043c\u0438\u0441\u0441\u0438\u044f\"], iterations=100)\n        if Y_cars.unique().shape[0] == 1:\n            model_by_brand_predictor[brand] = MyPredictor(Y_cars.unique()[0])\n            continue\n\n        predictor.fit(X_cars, Y_cars, verbose=0)\n        model_by_brand_predictor[brand] = predictor\n    \n    return model_by_brand_predictor","c01309ff":"# \u0421\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\ndef get_model_mean_price(data):\n    return data.groupby([\"\u041c\u0430\u0440\u043a\u0430\", \"\u041c\u043e\u0434\u0435\u043b\u044c\"]).agg({\"\u0426\u0435\u043d\u0430\": \"mean\"})\n\n# \u0421\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u0430\u0440\u043a\u0438\ndef get_brand_mean_price(data):\n    return data.groupby(\"\u041c\u0430\u0440\u043a\u0430\").agg({\"\u0426\u0435\u043d\u0430\": \"mean\"})","22edb17f":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0431\u043e\u0438\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0438 \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\ndef get_train_test_data():\n    train_data = pd.read_csv(root + \"data_train.csv\").drop(\"\u0426\u0435\u043d\u0430\", axis=1)\n    test_data = pd.read_csv(root + \"data_test.csv\")\n\n    return pd.concat((train_data, test_data), ignore_index=True)\n \ntrain_test_data = get_train_test_data() \n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0438\u043f\u0430\u0445 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432\n# \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\nblock_fuel = get_block_fuel(train_test_data)\nmodel_by_brand = get_mark_models(train_test_data)\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0446\u0435\u043d\u0435 \u043c\u0430\u0440\u043a\u0438\/\u043c\u043e\u0434\u0435\u043b\u0438\n# \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0441\u0442\/\u0434\u0432\u0435\u0440\u0435\u0439 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\ntrain_data = pd.read_csv(root + \"data_train.csv\")\nmodel_mean_price = get_model_mean_price(train_data)\nbrand_mean_price = get_brand_mean_price(train_data)\nmodel_info = get_model_info(train_data)","bdad81cf":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 NaN'\u043e\u0432 \"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\"\ndef fill_fuel_type_na(data):\n    block_sz = 20\n    block_cnt = 50\n\n    idx = data[pd.isna(data[\"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\"])].index\n\n    petrol_all = sum(data.loc[:, \"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\"] == \"\u0431\u0435\u043d\u0437\u0438\u043d\")\n    diesel_all = sum(data.loc[:, \"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\"] == \"\u0434\u0438\u0437\u0435\u043b\u044c\")\n\n    block_id = data.loc[idx, [\"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\"]].applymap(lambda p: min(p \/\/ block_sz, block_cnt-1)).astype(\"int32\")\n\n    proba_a = block_id.applymap(lambda x: block_fuel[x][0] + block_fuel[x][1]) \/ (petrol_all + diesel_all)\n    proba_a_b = block_id.applymap(lambda x: block_fuel[x][0]) \/ petrol_all\n    proba_b = petrol_all \/ (petrol_all + diesel_all)\n\n    filled_fuel = (proba_a_b * proba_b \/ proba_a).values.reshape(-1)\n\n    filled_fuel = [\"\u0431\u0435\u043d\u0437\u0438\u043d\" if x > 0.5 else \"\u0434\u0438\u0437\u0435\u043b\u044c\" for x in filled_fuel]\n    filled_fuel = np.array(filled_fuel)\n\n    data.loc[idx, \"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\"] = filled_fuel\n\n    return data\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 NaN'\u043e\u0432 \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\"\ndef fill_seat_na(data):\n    idx = data[pd.isna(data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\"])].index\n    marks = data.loc[idx, \"\u041c\u0430\u0440\u043a\u0430\"].values\n    models = data.loc[idx, \"\u041c\u043e\u0434\u0435\u043b\u044c\"].values\n\n    pairs = zip(marks, models)\n    f = lambda x: model_info.loc[x, \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\"].values[0] if x in model_info.index else 5\n    data.loc[idx, \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\"] = list(map(f, pairs))\n\n    idx = data[pd.isna(data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\"])].index\n    data.loc[idx, \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\"] = 5\n\n    return data\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 NaN'\u043e\u0432 \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"\ndef fill_door_na(data):\n    idx = data[pd.isna(data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"])].index\n    marks = data.loc[idx, \"\u041c\u0430\u0440\u043a\u0430\"].values\n    models = data.loc[idx, \"\u041c\u043e\u0434\u0435\u043b\u044c\"].values\n\n    pairs = zip(marks, models)\n    f = lambda x: model_info.loc[x, \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"].values[0] if x in model_info.index else 4\n    data.loc[idx, \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"] = list(map(f, pairs))\n\n    return data\n\n# \u0417\u0430\u043f\u043e\u043b\u0435\u043d\u0438\u0435 NaN'\u043e\u0432 \"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\" \u043f\u043e \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\ndef fill_volume_na(data, coef = 11.66252849, bias = 0):\n    idx = data[pd.isna(data[\"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\"])].index\n    data.loc[idx, \"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\"] = data.loc[idx, \"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\"].values * coef + bias\n    return data\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 NaN'\u043e\u0432 \"\u041c\u043e\u0434\u0435\u043b\u044c\"\ndef fill_model_na(data):\n    idx = data[pd.isna(data[\"\u041c\u043e\u0434\u0435\u043b\u044c\"])].index\n    fill_func = lambda x: model_by_brand[x[0]].predict(list(x))[0] if x[0] in model_by_brand else \"\"\n    data.loc[idx, \"\u041c\u043e\u0434\u0435\u043b\u044c\"] = data.loc[idx, car_info].apply(fill_func, axis=1).values\n\n    return data\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\"\ndef fill_mean_model_price(data):\n    marks = data.loc[:, \"\u041c\u0430\u0440\u043a\u0430\"].values\n    models = data.loc[:, \"\u041c\u043e\u0434\u0435\u043b\u044c\"].values\n\n    pairs = zip(marks, models)\n    f = lambda x: model_mean_price.loc[x, \"\u0426\u0435\u043d\u0430\"] if x in model_mean_price.index else 2e5\n    data.loc[:, \"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\"] = list(map(f, pairs))\n\n    return data\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u043c\u0430\u0440\u043a\u0438\"\ndef fill_mean_brand_price(data):\n    f = lambda x: brand_mean_price.loc[x, \"\u0426\u0435\u043d\u0430\"] if x in brand_mean_price.index else 2e5\n    data.loc[:, \"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u043c\u0430\u0440\u043a\u0438\"] = data.loc[:, [\"\u041c\u0430\u0440\u043a\u0430\"]].applymap(f).values\n\n    return data","3a91d348":"# \u041f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445\ndef prepare_data(data):\n    cols = list(data.columns.copy())\n    cols[0] = \"\u0418\u043d\u0434\u0435\u043a\u0441\"\n    data.columns = cols\n\n    # \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 NaN'\u043e\u0432\n    data = fill_fuel_type_na(data)\n    data = fill_door_na(data)\n    data = fill_seat_na(data)\n    data = fill_volume_na(data)\n    data = fill_model_na(data)\n\n    # \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n    data.loc[data[\"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\"] > 10000, \"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\"] = 1798\n    data.loc[data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"] > 10, \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"] = 4\n    data.loc[data[\"\u0413\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\"] < 1930, \"\u0413\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\"] = 2010\n    if \"\u0426\u0435\u043d\u0430\" in data.columns:\n        data.loc[data[\"\u0426\u0435\u043d\u0430\"] > 3e7, \"\u0426\u0435\u043d\u0430\"] = 1e6\n\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n    data = fill_mean_model_price(data)\n    data = fill_mean_brand_price(data)\n    data.loc[:, \"\u041b\u0435\u0442 \u0441 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\"] = 2020 - data[\"\u0413\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\"]\n    data.loc[:, \"\u0411\u0430\u0433\u0430\u0436\u043d\u0438\u043a\"] = data.loc[:, \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\"].astype(\"int32\") % 2\n    data.loc[:, \"\u0418\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0438\"] = data[\"\u041f\u0440\u043e\u0431\u0435\u0433\"] \/ (data[\"\u041b\u0435\u0442 \u0441 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\"] + 1)\n    data.loc[:, \"\u041c\u043e\u0434\u0435\u043b\u044c\"] = data[\"\u041c\u0430\u0440\u043a\u0430\"] + \" \" + data[\"\u041c\u043e\u0434\u0435\u043b\u044c\"]\n\n    # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    data.drop(\"\u0413\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\", axis = 1, inplace = True)\n    data.drop(\"\u0418\u043d\u0434\u0435\u043a\u0441\", axis = 1, inplace = True)\n\n    return data\n\n# \u041f\u043e\u043b\u0443\u0447\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndef get_X(data):\n    X_labels = [\"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c\", \"\u041c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\", \"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\",\n                \"\u0422\u0440\u0430\u043d\u0441\u043c\u0438\u0441\u0441\u0438\u044f\", \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\", \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0432\u0435\u0440\u0435\u0439\", \"\u041f\u0440\u043e\u0431\u0435\u0433\", \n                \"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\", \"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u043c\u0430\u0440\u043a\u0438\", \n                \"\u041b\u0435\u0442 \u0441 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\", \"\u0411\u0430\u0433\u0430\u0436\u043d\u0438\u043a\", \"\u0418\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0438\"]\n\n    return data.loc[:, X_labels]\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043d \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndef get_Y(data):\n    Y_labels = [\"\u0426\u0435\u043d\u0430\"]\n    return data.loc[:, Y_labels]\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f CatBoost'\u0430\ncat_features = [\"\u0422\u0438\u043f \u0442\u043e\u043f\u043b\u0438\u0432\u0430\", \"\u0422\u0440\u0430\u043d\u0441\u043c\u0438\u0441\u0441\u0438\u044f\"]","bf7bb9c0":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445\ndata = pd.read_csv(root + \"data_train.csv\")\ndata = prepare_data(data)\ndata.sample(5)","efa38cb3":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 CatBoost'\u0430 \u043d\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\ndef run_cat_boost(depth, bagging_t, l2_leaf_reg):\n    params = {\n        \"eval_metric\": \"R2\",\n        \"iterations\": 100, # \u0422\u0443\u0442 \u0441\u0442\u043e\u0438\u0442 100, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0441\u0447\u0438\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u0440\u0438 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u043d\u043e \u043d\u0430 \u043b\u0443\u0447\u0448\u0435\u043c \u0441\u0430\u0431\u043c\u0438\u0442\u0435 \u0431\u044b\u043b\u043e 3200\n        \"verbose\": False,\n        \"depth\": int(round(depth)),\n        \"bagging_temperature\": bagging_t,\n        \"l2_leaf_reg\": l2_leaf_reg\n    }\n\n    scores = catboost.cv(\n        Pool(get_X(data), get_Y(data), cat_features = cat_features),\n        params,\n        fold_count = 4\n    )\n\n    return np.max(scores['test-R2-mean'])","ece32201":"# \u041f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nsearch_space = {\n    \"depth\": (4, 10),\n    \"bagging_t\": (0,10),\n    \"l2_leaf_reg\": (0, 30)\n}\n\noptimizer = BayesianOptimization(run_cat_boost, search_space)\noptimizer.maximize(init_points=2, n_iter=8)","05e7fc71":"# \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430\ndef make_submission(Model, fname = \"Submission.csv\"):\n    test_data = pd.read_csv(root + \"data_test.csv\")\n    Id = test_data.iloc[:, 0]\n    test_data = prepare_data(test_data)\n    X_test = get_X(test_data)\n    preds = Model.predict(X_test)\n    Submission = pd.DataFrame({\"Id\": Id, \"Price\": preds})\n    Submission.to_csv(fname, index=False)","5c0b4df1":"# \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441 \u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043d\u0430 train\/valid, \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044d\u043f\u043e\u0445\nModel = CatBoostRegressor(\n    cat_features = cat_features, eval_metric = \"R2\",\n    iterations=3200, l2_leaf_reg=5.455, max_depth=5, bagging_temperature = 8.324\n)\n\nX, Y = get_X(data), get_Y(data)\nX_train, X_valid, Y_train, Y_valid = train_test_split(X, Y, test_size = 0.15)\nModel.fit(X, Y, use_best_model=True, eval_set=(X_valid, Y_valid))","15475aff":"# \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0432\u0441\u0451\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u0430\u0431\u043c\u0438\u0442\nModel = CatBoostRegressor(\n    cat_features = cat_features, eval_metric = \"R2\",\n    iterations=3200, l2_leaf_reg=5.455, max_depth=5, bagging_temperature = 8.324\n)\n\nX, Y = get_X(data), get_Y(data)\nModel.fit(X, Y)\nmake_submission(Model)","6969af9e":"# Import Libraries\n","ebae1932":"# Model selection and Hyperparameters tuning","4bb42594":"\u0415\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e, \u043d\u043e \u0442\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043f\u043e\u043b\u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438","00d89c58":"#  Conclusion","73f6eb61":"\u041d\u0443 \u0442\u0443\u0442 \u0432\u0441\u0451 \u043f\u043b\u044e\u0441-\u043c\u0438\u043d\u0443\u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e","ac9932c5":"* 15.04.2020:   \n\u041f\u0435\u0440\u0432\u044b\u0439 \u0441\u0430\u0431\u043c\u0438\u0442   \n\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043a\u043e\u0440 \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435: 0.37576\n* 16.04.2020:   \n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 NaN'\u043e\u0432 \u0442\u0438\u043f\u0430 \u0442\u043e\u043f\u043b\u0438\u0432\u0430   \n\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043a\u043e\u0440 \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435: 0.47171   \n* 17.04.2020:   \n\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\/\u0434\u0432\u0435\u0440\u0435\u0439   \n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a: \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u043c\u0430\u0440\u043a\u0438\/\u043c\u043e\u0434\u0435\u043b\u0438   \n\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043a\u043e\u0440 \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435: 0.47742  \n* 18.04.2020:   \n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0435 NaN'\u043e\u0432 \u0432 \u0440\u0430\u0431\u043e\u0447\u0435\u043c \u043e\u0431\u044a\u0451\u043c\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438   \n\u041d\u0430\u0447\u0430\u043b\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432   \n\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043a\u043e\u0440 \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435: 0.50071\n* 19.04.2020:   \n\u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438, \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0434\u043e\u0441\u0442\u043e\u0439\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430   \n\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043a\u043e\u0440 \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435: 0.42646\n* 20.04.2020:   \n\u041d\u0430\u0447\u0430\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0411\u0430\u0439\u0435\u0441\u043e\u0432\u0441\u043a\u0443\u044e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432   \n\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043a\u043e\u0440 \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435: 0.50715   \n* 21.04.2020:   \n\u0423\u043b\u0443\u0447\u0448\u0438\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043c\u0430\u0440\u043a\u0438  \n\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043b\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b   \n\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043a\u043e\u0440 \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435: 0.50862 \n* 22.04.2020:   \n\u0423\u043b\u0443\u0447\u0448\u0438\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043c\u0430\u0440\u043a\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u0430\u0448\u0438\u043d\u044b   \n\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043b\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b   \n\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043a\u043e\u0440 \u043d\u0430 \u043f\u0430\u0431\u043b\u0438\u043a\u0435: 0.51347","80a0f524":"\u0422\u0443\u0442 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u043e \u0433\u0440\u0430\u043d\u0438\u0446\u0435 \u0432 3e7 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u0434\u043a\u0438\u043c\u0438 \u0441\u043b\u0443\u0447\u0430\u044f\u043c\u0438 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0446\u0435\u043d\u044b \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438","1259999a":"\u041d\u0443 \u0442\u0443\u0442 \u0443\u0436\u0435 \u044f\u0432\u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043d\u0430 10 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0433\u0440\u0430\u043d\u0438\u0446\u0430","37caa545":"# Preprocessing\n","e15bd066":"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435","1ebf6be2":"\u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043c\u043e\u0436\u0435\u0442 \u0438 \u0435\u0441\u0442\u044c, \u043d\u043e \u043e\u043d\u0438 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435, \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043a\u0430\u043a \u0435\u0441\u0442\u044c","bfc4eaae":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","99cd7ed9":"\u0414\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438:   \n\u041c\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 \u043d\u0430 PyTorch, \u043d\u043e \u043e\u043d\u0438 \u043d\u0435 \u0434\u0430\u043b\u0438 \u043f\u0440\u0438\u0435\u043c\u043b\u0438\u043c\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430:   \n0.42646 \u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435   \n\u0418, \u043a\u0430\u043a \u043f\u043e\u0437\u0436\u0435 \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u043e\u0441\u044c, 0.41773 \u043d\u0430 \u0437\u0430\u043a\u0440\u044b\u0442\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435   \n\u0412 \u0446\u0435\u043b\u043e\u043c, \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439   \n\u042d\u0442\u043e \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043c\u0430\u043b\u043e \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 CatBoost'\u043e\u043c \u0438 \u043c\u044b \u043e\u0442\u043a\u0437\u0430\u043b\u0438\u0441\u044c \u043e\u0442 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439","bd115d20":"\u0413\u0438\u043f\u043e\u0442\u0435\u0437\u0430: \u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043e\u0431\u044a\u0435\u043c (\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e) \u043b\u0438\u043d\u0435\u0439\u043d\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f","21c0f513":"\u041d\u0430 \u043b\u0438\u0446\u043e \u044f\u0432\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u0432 1930","6bc48bcb":"# Short history\n","8295db85":"\u0412 \u0446\u0435\u043b\u043e\u043c, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0442\u0430\u043a\u0438\u0435:\n1.   \u0414\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433 - \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\n2.   \u0412\u0430\u0436\u043d\u0443\u044e \u0440\u043e\u043b\u044c \u0438\u0433\u0440\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438: \u043e\u0447\u0438\u0441\u0442\u043a\u0430, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 NaN'\u043e\u0432. \u0418\u043c\u0435\u043d\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0443\u043d\u043a\u0442 \u0432\u043d\u0451\u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 \u0441\u043a\u043e\u0440\n3.   \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0411\u0430\u0439\u0435\u0441\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0433\u0438\u0431\u0447\u0435 \u0438, \u0432 \u0446\u0435\u043b\u043e\u043c, \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 GridSearch'\u0430\n4.   \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0441\u043a\u043e\u0440 \u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n\n","ee3e6d94":"\u0421\u043d\u043e\u0432\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u0413\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0447\u0442\u043e-\u0442\u043e \u043e\u043a\u043e\u043b\u043e 10000","bc93ef10":"# Submission","86c5ba08":"\u0414\u0430, \u0432\u0438\u0434\u043d\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c   \n\u0417\u043d\u0430\u0447\u0438\u0442 NaN'\u044b \u0432 \u0440\u0430\u0431\u043e\u0447\u0435\u043c \u043e\u0431\u044a\u0435\u043c\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0435\u0439 \u043e\u0442 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f","ba71c4d4":"# EDA"}}