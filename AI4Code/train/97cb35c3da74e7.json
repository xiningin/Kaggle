{"cell_type":{"439014b3":"code","4f9c1847":"code","3a55ebd9":"code","cfaefb88":"code","f73c3bbc":"code","ad8601e9":"code","c56118ea":"code","e19b98b3":"code","908ead8c":"code","a7d43966":"code","45b52d5f":"code","76953e42":"code","04553b1e":"code","4d0c7f98":"code","8c3826ee":"code","880e9d0e":"code","1d8a3078":"code","2d2718e2":"code","be91742e":"code","ea396962":"code","ebceb9b8":"code","4c1db15a":"code","8bf336ce":"markdown","b32d6658":"markdown","0b3414c9":"markdown","8d650903":"markdown"},"source":{"439014b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4f9c1847":"df1 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare2018\/bikeshare2018\/Bike Share Toronto Ridership_Q1 2018.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare2018\/bikeshare2018\/Bike Share Toronto Ridership_Q2 2018.csv')\ndf3 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare2018\/bikeshare2018\/Bike Share Toronto Ridership_Q3 2018.csv')\ndf4 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare2018\/bikeshare2018\/Bike Share Toronto Ridership_Q4 2018.csv')","3a55ebd9":"df2018 = df1.copy()\ndf2018 = df2018.append([df2, df3, df4], sort=False)\ndel df1\ndel df2\ndel df3\ndel df4","cfaefb88":"df2018.head()","f73c3bbc":"df2018.isnull().values.any() # Check if there is any missing value","ad8601e9":"# prepare the dataset\ndf2018['time'] = pd.to_datetime(df2018.trip_start_time)\ndf2018.index = df2018.time.dt.date\ndf2018.index.name = 'index'\n# cleaning the dataset\ndf2018 = df2018.dropna(subset=['from_station_name','to_station_name'])\ndf = df2018.copy()","c56118ea":"df","e19b98b3":"\nstation = list(set(list(df.from_station_name.values) + list(df.to_station_name.values)))\ndate = df.index.unique().values","908ead8c":"route = df.copy()\nroute = route[['from_station_name', 'to_station_name']]","a7d43966":"twoway = route.copy()\ntwoway = twoway[twoway.from_station_name == twoway.to_station_name]\noneway = route.copy()\noneway = oneway[oneway.from_station_name != oneway.to_station_name]","45b52d5f":"##yang a\n\ntwoway_map = twoway.groupby('from_station_name').count().sort_values(by='to_station_name', ascending=False)\nprint('10 Stations with the highest number of two-way traveller')\ntwoway_map[:100]","76953e42":"# mapping the number of outgoing bike from each station each day in 2017\noutmap = pd.get_dummies(route.from_station_name).groupby('index').sum()\n# mapping the number of incoming bike to each station each day in 2017\ninmap = pd.get_dummies(route.to_station_name).groupby('index').sum()","04553b1e":"outmap.head(5) # number of bikes leaves the station","4d0c7f98":"inmap.head(5) # number of bikes entering the station","8c3826ee":"print('number of station with enough bike to use next morning, aka number of bikes entering > number of bikes leaving the station')\n((inmap - outmap)>=0).sum(axis=1)","880e9d0e":"print('number of station with less bike to use next morning, or need a crew to return bikes back to station before next morning')\n((inmap - outmap)<0).sum(axis=1)","1d8a3078":"print('Station and the total number of days in 2018 where stations need more bikes to be returned by the crew every night')\n((inmap - outmap)<0).sum(axis=0).sort_values(ascending=False)[:20]","2d2718e2":"bike_minus = inmap - outmap # incoming bikes minus leaving bikes\nbike_minus = np.absolute(bike_minus[bike_minus < 0]) # show only minus value","be91742e":"bike_minus.head(10) # number of bikes that required by crew to be returned to each station","ea396962":"print('20 Stations with the highest number of required returned bikes in a day')\nnp.max(bike_minus, axis=0).sort_values(ascending=False)[:20]","ebceb9b8":"f1=df['trip_duration_seconds']<301","4c1db15a":"f1","8bf336ce":"Separate two-way traveller with one-way traveller for each station","b32d6658":"calculate the number of bikes entering the station minus number of bikes leaving the station\n* if the result >= 0 then there are enough bike available in the station to be used next morning\n* if the result < 0 then we need crew to return some bikes back to the station from other station","0b3414c9":"Create a table regarding to the number of bikes leaving ('from_station') and entering ('to_station') each day","8d650903":"Total unique days in 2017 are 329 days. But as we can see below, some stations always lack of bikes for more than 200 days out of 329 days in a year.\n\nMay be we should add more bikes in the stations or require user\/member to bring their own bikes"}}