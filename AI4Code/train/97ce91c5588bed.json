{"cell_type":{"76d9a33c":"code","7478e1b7":"code","68c612e1":"code","ca8b7a67":"code","054fc67c":"code","09828d15":"code","0dbee227":"code","0bfa6bd2":"code","829664e0":"code","844a9f6c":"code","a1985b8b":"code","1ee5fd15":"code","ce8911b4":"code","28897edd":"code","881ff12e":"code","ec9eb68b":"code","0b41c570":"code","3c3189b6":"code","f6964d0d":"code","f64c77ea":"code","0f7868dd":"code","2ffc5a34":"code","727c0584":"code","92c15628":"code","550a9c61":"markdown","49de8c91":"markdown","a0d2cece":"markdown","b15a1b42":"markdown","c985ba91":"markdown","0e8cfecc":"markdown","0a148442":"markdown","1af515ea":"markdown","adf6d51f":"markdown","25eb8b2a":"markdown","fef15e71":"markdown"},"source":{"76d9a33c":"import os\nprint(os.listdir('..\/input\/ctcfloop-data\/Data'))","7478e1b7":"from Bio import SeqIO\nimport numpy as np\nimport pandas as pd\nimport re\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix, matthews_corrcoef\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom tensorflow.keras import backend as K\nimport tensorflow as tf\nnp.random.seed(12345)","68c612e1":"def get_num(fasta_name, fasta_name2):\n    num = 0\n    for seq_record in SeqIO.parse(fasta_name,\"fasta\"):\n        if(not(re.search('N',str(seq_record.seq.upper())))):\n            num+=1\n    for seq_record2 in SeqIO.parse(fasta_name2,\"fasta\"):\n        if(not(re.search('N',str(seq_record2.seq.upper())))):\n            num+=1\n    return num","ca8b7a67":"'''Convert the input sequences into binary matrixs'''\ndef get_seq_matrix(fasta_name,seqmatrix,rank): \n    labellist = []\n    for seq_record in SeqIO.parse(fasta_name,\"fasta\"):\n        label = seq_record.id\n        sequence = seq_record.seq.upper()\n        if(re.search('N',str(sequence))):\n            continue\n        Acode = np.array(get_code(sequence,'A'),dtype=int)\n        Tcode = np.array(get_code(sequence,'T'),dtype=int)\n        Gcode = np.array(get_code(sequence,'G'),dtype=int)\n        Ccode = np.array(get_code(sequence,'C'),dtype=int)\n        seqcode = np.vstack((Acode,Tcode,Gcode,Ccode))\n        labellist.append(label)\n        seqmatrix[rank] = seqcode\n        rank +=1\n    return seqmatrix,labellist,rank","054fc67c":"def get_code(seq,nt):\n    nts = ['A','T','G','C']\n    nts.remove(nt)\n    codes = str(seq).replace(nt,str(1))\n    for i in range(0,len(nts)):\n        codes = codes.replace(nts[i],str(0))\n    coding = list(codes)\n    for i in range(0,len(coding)):\n        coding[i] = float(coding[i])\n    return coding","09828d15":"'''Get the train, validation and test set from the input'''\ndef get_data(infile,infile2):\n    rank = 0\n    num = get_num(infile,infile2)\n    seqmatrix = np.zeros((num,4,1038))\n    (seqmatrix, poslab, rank) = get_seq_matrix(infile,seqmatrix,rank)\n    (seqmatrix, neglab, rank) = get_seq_matrix(infile2,seqmatrix,rank)\n    X = seqmatrix\n    Y = np.array(poslab + neglab,dtype = int)\n    validation_size = 0.10\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=validation_size)\n    X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=validation_size)\n    return np.transpose(X_train,axes=(0,2,1)), np.transpose(X_val,axes=(0,2,1)), np.transpose(X_test,axes=(0,2,1)), Y_train, Y_val, Y_test","0dbee227":"'''Calculate ROC AUC during model training, obtained from <https:\/\/github.com\/nathanshartmann\/NILC-at-CWI-2018>'''\ndef binary_PFA(y_true, y_pred, threshold=K.variable(value=0.5)):\n    y_pred = K.cast(y_pred >= threshold, 'float32')\n    N = K.sum(1 - y_true)\n    FP = K.sum(y_pred - y_pred * y_true)\n    return FP\/N\n\ndef binary_PTA(y_true, y_pred, threshold=K.variable(value=0.5)):\n    y_pred = K.cast(y_pred >= threshold, 'float32')\n    P = K.sum(y_true)\n    TP = K.sum(y_pred * y_true)\n    return TP\/P\n\ndef roc_auc(y_true, y_pred):\n    ptas = tf.stack([binary_PTA(y_true,y_pred,k) for k in np.linspace(0, 1, 1000)],axis=0)\n    pfas = tf.stack([binary_PFA(y_true,y_pred,k) for k in np.linspace(0, 1, 1000)],axis=0)\n    pfas = tf.concat([tf.ones((1,)) ,pfas],axis=0)\n    binSizes = -(pfas[1:]-pfas[:-1])\n    s = ptas*binSizes\n    return K.sum(s, axis=0)","0bfa6bd2":"def one_hot_to_seq(matrix):\n    nts = ['A','T','G','C']\n    seqs = []\n    index = [np.where(r==1)[0][0] for r in matrix]\n    for i in index:\n        seqs.append(nts[i])\n    seq = ''.join(seqs)\n    return seq","829664e0":"infile   = '..\/input\/ctcfloop-data\/Data\/GM12878_pos_seq.fasta'\nsecondin = '..\/input\/ctcfloop-data\/Data\/GM12878_neg_seq.fasta'","844a9f6c":"X_train,X_val,X_test,Y_train,Y_val,Y_test = get_data(infile,secondin)","a1985b8b":"print(X_train.shape)\nprint(X_val.shape)\nprint(X_test.shape)","1ee5fd15":"from tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, Dropout, Dense, Permute, Lambda\nfrom tensorflow.keras.layers import Conv1D, MaxPooling1D\nfrom tensorflow.keras.layers import Bidirectional, LSTM\nfrom tensorflow.keras.layers import multiply\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.constraints import MaxNorm\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping","ce8911b4":"labels = ['negative', 'positive']","28897edd":"dense_unit    = 128  #112\ndroprate_cnn  = 0.5  #0.4279770967884926\ndroprate_lstm = 0.05 #0.05028428952624636\nfilter_unit = 208\nl2_reg = 5.2164660610264974e-05\n#learning_rate = 0.00010199140620075788\nlstm_unit = 104\npool_size = 4\nwindow_size = 13","881ff12e":"## Build Model\ninputs = Input(shape = (1038, 4))\n\n# 1st Conv1D\ncnn_out = Conv1D(filter_unit, window_size,\n                 kernel_regularizer=l2(l2_reg),\n                 activation=\"relu\")(inputs)\npooling_out = MaxPooling1D(pool_size=pool_size, strides=pool_size)(cnn_out)\ndropout1 = Dropout(droprate_cnn)(pooling_out)\n\n# 2nd Conv1D\ncnn_out2 = Conv1D(filter_unit, window_size,\n                  kernel_regularizer=l2(l2_reg),\n                  activation=\"relu\")(dropout1)\npooling_out2 = MaxPooling1D(pool_size=pool_size, strides=pool_size)(cnn_out2)\ndropout2 = Dropout(droprate_cnn)(pooling_out2)\n\n# LSTM\nlstm_out = Bidirectional(LSTM(lstm_unit, return_sequences=True, \n                              kernel_regularizer=l2(l2_reg)\n                             ),merge_mode = 'concat')(dropout2)\n\n# Attention\na = Permute((2, 1))(lstm_out)\na = Dense(61, activation='softmax')(a)\na_probs = Permute((2, 1), name='attention_vec')(a)\n\nattention_out = multiply([lstm_out, a_probs])\nattention_out = Lambda(lambda x: K.sum(x, axis=1))(attention_out)\ndropout3 = Dropout(droprate_lstm)(attention_out)\n\n# FC\ndense1_out = Dense(128, \n                  kernel_regularizer=l2(l2_reg),\n                  activation='relu')(dropout3)\n\ndense2_out = Dense(16, \n                  kernel_regularizer=l2(l2_reg),\n                  activation='relu')(dense1_out)\n\noutput = Dense(1, activation='sigmoid')(dense2_out)\n\nmodel = Model(inputs=[inputs], outputs=output)\n\nmodel.summary()","ec9eb68b":"# Compile Model\nmodel.compile(loss='binary_crossentropy', optimizer='Adam', metrics=[roc_auc])","0b41c570":"batch_size = 200\nnum_epochs = 100","3c3189b6":"filepath = \"deepctcfloop_model.hdf5\"\n#checkpointer = ModelCheckpoint(filepath=filepath, verbose=1, save_best_only=True)\n#earlystopper = EarlyStopping(monitor='val_loss', patience=5, verbose=1)","f6964d0d":"model.fit(X_train, Y_train, batch_size=batch_size, epochs=num_epochs, shuffle=True, validation_data=(X_val,Y_val))#, callbacks=[checkpointer,earlystopper])","f64c77ea":"## Save Model\nmodel.save(filepath)","0f7868dd":"y_pred = model.predict(X_test)\nrounded = [round(y[0]) for y in y_pred]","2ffc5a34":"cm = confusion_matrix(Y_test, rounded)\nprint(cm)","727c0584":"print(classification_report(Y_test, rounded, target_names=labels))","92c15628":"TP = cm[1, 1]\nTN = cm[0, 0]\nFP = cm[0, 1]\nFN = cm[1, 0]\nspecificity = TN \/ float( TN + FP)\nsensitivity = TP \/ float(FN + TP)\nprint('Specificity:',specificity)\nprint('Sensitivity:',sensitivity)","550a9c61":"based on https:\/\/github.com\/BioDataLearning\/DeepCTCFLoop\/","49de8c91":"## Test Model","a0d2cece":"## Save Model","b15a1b42":"## Build Model","c985ba91":"## utils","0e8cfecc":"## Dataset : common cell types GM12878, K562, HeLa","0a148442":"# DeepCTCFLoop train","1af515ea":"## Confusion Matrix","adf6d51f":"## Train Model","25eb8b2a":"## Compile Model","fef15e71":"## Prepare Dataset"}}