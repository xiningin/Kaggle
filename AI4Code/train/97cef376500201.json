{"cell_type":{"5b220a2f":"code","cc19e41e":"code","cf1d099b":"code","cd03c7be":"code","8840ce03":"code","ad99d0d6":"code","36ed2569":"code","d57b10b7":"code","f75474ba":"code","34bb84aa":"code","32f56dc3":"code","3be21feb":"code","d936ac63":"code","36e9e5c1":"code","816cea52":"code","54723579":"code","909e2c15":"code","2d776f75":"code","f597eee4":"code","023a8d22":"code","8b364423":"code","27240be6":"code","4d953763":"code","7f9e6757":"code","ca2fc24f":"code","a8ef911a":"code","ba752147":"code","8eee20d6":"code","0b81f7c7":"code","65fdb0ff":"code","0a2f525b":"code","590574af":"code","9180692c":"code","d7a0ca67":"code","45ce5985":"code","4c4c5cb8":"code","36da85e1":"code","fbfc16f5":"code","de424707":"code","46083e0a":"code","f73cfba6":"code","8fdca1d0":"code","b49f9c33":"code","41b39f45":"code","8e0abaa5":"code","e871bdd2":"code","541b1353":"code","0419691c":"code","3a7e30b2":"code","e78ca1a5":"code","df0ff312":"code","c7c5503a":"code","5e0921d1":"code","d2ff5d7a":"code","127b25eb":"code","db54b7e3":"code","d5828a62":"code","2051b943":"code","21657da2":"code","e3cc3023":"code","9b1f0e99":"code","2c2c6517":"code","a356d656":"code","09f0c755":"code","ace35234":"markdown","ccdb9a94":"markdown","d0218977":"markdown","fd9b1ebd":"markdown","22942cbb":"markdown","1c3c7e45":"markdown","ca5346d5":"markdown","481df115":"markdown","9757c24a":"markdown","6eb1599b":"markdown","fa56be1d":"markdown","d01f16b2":"markdown","b84ab556":"markdown","d3b0075d":"markdown","8339ab7e":"markdown","05e64035":"markdown","6fa9f376":"markdown","bf498ca7":"markdown","ea897824":"markdown","e3b58b0d":"markdown","91bc819b":"markdown","77f2e767":"markdown","3a1ef0c6":"markdown"},"source":{"5b220a2f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc19e41e":"import matplotlib.pyplot as plt\nimport seaborn as sns","cf1d099b":"os.listdir('\/kaggle\/input\/heart-attack-analysis-prediction-dataset')","cd03c7be":"df = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","8840ce03":"sat_df = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/o2Saturation.csv')","ad99d0d6":"sat_df.head(2)","36ed2569":"df.head(2)","d57b10b7":"df.shape","f75474ba":"sat_df.shape","34bb84aa":"sat_df.head()","32f56dc3":"df.head()","3be21feb":"df.columns","d936ac63":"sns.heatmap(df.isnull(),cmap='viridis',cbar=False)","36e9e5c1":"df.info()","816cea52":"df.isnull().sum()","54723579":"sns.histplot(data=df)","909e2c15":"cat_feat = ['sex','cp','fbs','restecg','exng','slp','caa','thall']\ncont_feat = ['age','trtbps','chol','thalachh','oldpeak']","2d776f75":"for feature in cat_feat:\n    plt.figure(figsize=(7,4))\n    sns.set_theme(style='whitegrid')\n    ax = sns.countplot(df[feature])\n    plt.xticks(rotation=90)\n    plt.xlabel(feature)\n    plt.show()","f597eee4":"for feature in cat_feat:\n    plt.figure(figsize=(7,4))\n    sns.set_theme(style='whitegrid')\n    ax = sns.violinplot(x=feature,y='output',data=df)\n    plt.xticks(rotation=90)\n    plt.xlabel(feature)\n    plt.show()\n    ","023a8d22":"for feature in cont_feat:\n    plt.figure(figsize=(7,4))\n    sns.set_theme(style='whitegrid')\n    ax = sns.histplot(df[feature], kde=True)\n    plt.xlabel(feature)\n    plt.show()\n    ","8b364423":"for feature in cont_feat:\n    plt.figure(figsize=(7,4))\n    sns.set_theme(style='whitegrid')\n    ax = sns.boxplot(df[feature])\n    plt.xticks(rotation=90)\n    plt.xlabel(feature)\n    plt.show()","27240be6":"for feature in cont_feat:\n    plt.figure(figsize=(7,4))\n    sns.set_theme(style='whitegrid')\n    ax = sns.violinplot(df[feature])\n    plt.xticks(rotation=90)\n    plt.xlabel(feature)\n    plt.show()","4d953763":"plt.figure(figsize=(7,4))\nsns.set_theme(style='whitegrid')\nax = sns.countplot(df['output'])\nplt.xticks(rotation=90)\nplt.xlabel(feature)\nplt.show()","7f9e6757":"plt.figure(figsize=(14,12))\nax = sns.heatmap(df.corr(),annot=True,cmap='coolwarm')\nplt.title('Correlation Matrix')\nplt.show()","ca2fc24f":"X = df.drop('output',axis=1)\ny = df['output']","a8ef911a":"print(X.shape)\ny.shape","ba752147":"from sklearn.model_selection import train_test_split","8eee20d6":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=101)","0b81f7c7":"print(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","65fdb0ff":"from sklearn.preprocessing import StandardScaler","0a2f525b":"sc = StandardScaler()","590574af":"X_train_sc = sc.fit_transform(X_train)","9180692c":"from sklearn.decomposition import PCA","d7a0ca67":"pc = PCA(n_components=len(X.columns))\nX_train_pc = pc.fit_transform(X_train_sc)\npc_df_train = pd.DataFrame(X_train_pc,columns=['PC_'+str(i) for i in range(1,pc.n_components_+1)])","45ce5985":"pc_df_train","4c4c5cb8":"plt.figure(figsize=(12,6))\nplt.plot(pc_df_train.std())\nplt.title('Scree Plot (Principal Component Analysis)')\nplt.xlabel('Principal Component')\nplt.ylabel('Standard Deviation')\nplt.show()","36da85e1":"print(pc_df_train.shape)\nprint(y_train.shape)","fbfc16f5":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()","de424707":"classifier.fit(pc.fit_transform(X_train_sc),y_train)\nX_test_sc = sc.transform(X_test)\nX_test_pc = pc.transform(X_test_sc)\ny_lr = classifier.predict(X_test_sc)","46083e0a":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score","f73cfba6":"print('Confusion Matrix : \\n',confusion_matrix(y_lr,y_test))\nprint('Accuracy Score : ',accuracy_score(y_lr,y_test))\nprint('Classification Report : \\n',classification_report(y_lr,y_test))","8fdca1d0":"from sklearn.svm import SVC\nclassifier = SVC()","b49f9c33":"classifier.fit(pc.fit_transform(X_train_sc),y_train)\nX_test_sc = sc.transform(X_test)\nX_test_pc = pc.transform(X_test_sc)\ny_svc = classifier.predict(X_test_sc)","41b39f45":"print('Confusion Matrix : \\n',confusion_matrix(y_svc,y_test))\nprint('Accuracy Score : ',accuracy_score(y_svc,y_test))\nprint('Classification Report : \\n',classification_report(y_svc,y_test))","8e0abaa5":"from sklearn.ensemble import RandomForestClassifier","e871bdd2":"classifier = RandomForestClassifier()\nclassifier.fit(pc.fit_transform(X_train_sc),y_train)\nX_test_sc = sc.transform(X_test)\nX_test_pc = pc.transform(X_test_sc)\ny_rfc=classifier.predict(X_test_pc)","541b1353":"print('Confusion Matrix : \\n',confusion_matrix(y_rfc,y_test))\nprint('Accuracy Score : ',accuracy_score(y_rfc,y_test))\nprint('Classification Report : \\n',classification_report(y_rfc,y_test))","0419691c":"from sklearn.ensemble import GradientBoostingClassifier","3a7e30b2":"classifier = GradientBoostingClassifier()\nclassifier.fit(pc.fit_transform(X_train_sc),y_train)\nX_test_sc = sc.transform(X_test)\nX_test_pc = pc.transform(X_test_sc)\ny_gbc=classifier.predict(X_test_pc)","e78ca1a5":"print('Confusion Matrix : \\n',confusion_matrix(y_gbc,y_test))\nprint('Accuracy Score : ',accuracy_score(y_gbc,y_test))\nprint('Classification Report : \\n',classification_report(y_gbc,y_test))","df0ff312":"classifier = RandomForestClassifier(n_estimators=100,\n                                    min_samples_split=5,\n                                    min_samples_leaf=1,\n                                    max_depth=5)\nclassifier.fit(X_train_sc,y_train)\nX_test_sc = sc.transform(X_test)\ny_rfc=classifier.predict(X_test_sc)","c7c5503a":"print('Confusion Matrix \\n',confusion_matrix(y_rfc,y_test))\nprint()\nprint('Accuracy Score \\n', accuracy_score(y_rfc,y_test))\nprint()\nprint('Classification Report \\n',classification_report(y_rfc,y_test))","5e0921d1":"from sklearn.naive_bayes import GaussianNB","d2ff5d7a":"classifier = GaussianNB()\nclassifier.fit(pc.fit_transform(X_train_sc),y_train)\nX_test_sc = sc.transform(X_test)\nX_test_pc = pc.transform(X_test_sc)\ny_gb=classifier.predict(X_test_pc)","127b25eb":"print('Confusion Matrix \\n',confusion_matrix(y_gb,y_test))\nprint()\nprint('Accuracy Score \\n', accuracy_score(y_gb,y_test))\nprint()\nprint('Classification Report \\n',classification_report(y_gb,y_test))","db54b7e3":"from xgboost import XGBClassifier","d5828a62":"Xgboost=XGBClassifier(random_state=28)\nparams = {'n_estimators': (100,300),\n                  'learning_rate': (0.01, 0.6),\n                  'subsample': (0.3, 0.9),\n                  'max_depth': (2,5),\n                  'colsample_bytree': (0.5, 0.9),\n                  'min_child_weight': (1,5)\n                 }","2051b943":"rf_classifier = RandomForestClassifier(random_state=34)\n\nParam_rf={'max_depth':(2,5),\n                         'min_samples_split':(5,10), \n                         'n_estimators':(100,300),\n                         'min_samples_leaf':(1,3)\n\n         }","21657da2":"from sklearn.model_selection import RepeatedKFold,RandomizedSearchCV","e3cc3023":"cv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=1)\nsearch = RandomizedSearchCV(rf_classifier, Param_rf, cv=cv)\nsearch.fit(pc.fit_transform(X_train_sc), y_train)\nprint(search.best_params_)","9b1f0e99":"classifier = XGBClassifier(subsample= 0.9,\n                           n_estimators=300,\n                           min_child_weight=5,\n                           max_depth=2,\n                           learning_rate=0.01,\n                           colsample_bytree= 0.9)\nclassifier.fit(pc.fit_transform(X_train_sc),y_train)\nX_test_sc = sc.transform(X_test)\nX_test_pc = pc.transform(X_test_sc)\ny_xg=classifier.predict(X_test_pc)","2c2c6517":"print('Confusion Matrix \\n',confusion_matrix(y_xg,y_test))\nprint()\nprint('Accuracy Score \\n', accuracy_score(y_xg,y_test))\nprint()\nprint('Classification Report \\n',classification_report(y_xg,y_test))","a356d656":"from sklearn.metrics import f1_score, recall_score, precision_score, roc_auc_score\nimport matplotlib","09f0c755":"lr_df = pd.DataFrame(data=[f1_score(y_test,y_lr),accuracy_score(y_test, y_lr), recall_score(y_test, y_lr), precision_score(y_test, y_lr), roc_auc_score(y_test, y_lr)], \n             columns=['Logistic Regression'], index=[\"F1\",\"Accuracy\", \"Recall\", \"Precision\", \"ROC AUC Score\"])\nrf_df = pd.DataFrame(data=[f1_score(y_test,y_rfc),accuracy_score(y_test, y_rfc), recall_score(y_test, y_rfc),precision_score(y_test, y_rfc), roc_auc_score(y_test, y_rfc)], \n             columns=['Random Forest Score'],index=[\"F1\",\"Accuracy\", \"Recall\", \"Precision\", \"ROC AUC Score\"])\nnb_df = pd.DataFrame(data=[f1_score(y_test,y_gb),accuracy_score(y_test, y_gb), recall_score(y_test, y_gb), precision_score(y_test, y_gb), roc_auc_score(y_test, y_gb)], \n             columns=['Naive Bayes'], index=[\"F1\",\"Accuracy\", \"Recall\", \"Precision\", \"ROC AUC Score\"])\n\nxg_df = pd.DataFrame(data=[f1_score(y_test,y_xg),accuracy_score(y_test, y_xg), recall_score(y_test, y_xg), precision_score(y_test, y_xg), roc_auc_score(y_test, y_xg)], \n             columns=['XG Boost'], index=[\"F1\",\"Accuracy\", \"Recall\", \"Precision\", \"ROC AUC Score\"])\ngbc_df = pd.DataFrame(data=[f1_score(y_test,y_gbc),accuracy_score(y_test, y_gbc), recall_score(y_test, y_gbc), precision_score(y_test, y_gbc), roc_auc_score(y_test,y_gbc)], \n             columns=['Gradient Boosting'], index=[\"F1\",\"Accuracy\", \"Recall\", \"Precision\", \"ROC AUC Score\"])\nsvc_df = pd.DataFrame(data=[f1_score(y_test,y_xg),accuracy_score(y_test, y_xg), recall_score(y_test, y_xg), precision_score(y_test, y_xg), roc_auc_score(y_test,y_xg)], \n             columns=['Gradient Boosting'], index=[\"F1\",\"Accuracy\", \"Recall\", \"Precision\", \"ROC AUC Score\"])\n\n\ndf_models = round(pd.concat([lr_df,rf_df,nb_df,gbc_df,xg_df,svc_df], axis=1),3)\ncolors = [\"bisque\",\"ivory\",\"sandybrown\",\"steelblue\",\"lightsalmon\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nbackground_color = \"white\"\n\nfig = plt.figure(figsize=(18,26)) # create figure\ngs = fig.add_gridspec(4, 2)\ngs.update(wspace=0.1, hspace=0.5)\nax0 = fig.add_subplot(gs[0, :])\n\nsns.heatmap(df_models.T, cmap=colormap,annot=True,fmt=\".1%\",vmin=0,vmax=0.95, linewidths=2.5,cbar=False,ax=ax0,annot_kws={\"fontsize\":16})\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) \n\nax0.text(0,-0.5,'Model Comparison',fontsize=20,fontweight='bold',fontfamily='serif')\nplt.show()","ace35234":"## Conclusion\n### We can conclude that almost all machine learning model perform well except Logistic Regression. However, Naive Bias gives the best accuracy 0f 90.2%","ccdb9a94":"## Gradient Boosting Classifier","d0218977":"### Scree Plot - PCA Analysis\n#### In multivariate statistics, a scree plot is a line plot of the eigenvalues of factors or principal components in an analysis. The scree plot is used to determine the number of factors to retain in an exploratory factor analysis (FA) or principal components to keep in a principal component analysis (PCA)","fd9b1ebd":"### Split Data into train test split","22942cbb":"### Lets check for our dataset is balanced or not","1c3c7e45":"### No missing values","ca5346d5":"### Random Forest Classifier","481df115":"#### data file name and folder location","9757c24a":"## Naive Bayes","6eb1599b":"## SVC","fa56be1d":"### To choose best feature lets apply PCA","d01f16b2":"### Categorical Feature Distribution","b84ab556":"## Standardization\n### Lets Scale our data so, that everything will be in a same scale","d3b0075d":"### Lets seperate our features into Categorical Feature and Contineous Feature","8339ab7e":"## Contineous Feature distribution","05e64035":"### To select number of principal components elbow method is used\n#### We can see a proper elbow is not formed in the below graph, so we can select all the components","6fa9f376":"### Random Forest with Hypertuning parameters","bf498ca7":"## Univariate Analysis","ea897824":"### From this countplot distribution we can say that our dataset is balance","e3b58b0d":"## XGBOOST with hypertuning parameters","91bc819b":"## Bivariate Analysis","77f2e767":"### Model Building","3a1ef0c6":"#### From the above Boxplot we can say that we have outliers in trtbps, chol and oldpeak"}}