{"cell_type":{"f65b161d":"code","4ea8fbdd":"code","03420fb5":"code","7626db75":"code","5f215a12":"code","e1714614":"code","0b937b87":"code","4196e6eb":"code","8d9e2ef1":"code","07934503":"code","15cdb6d2":"code","aaaeedb4":"code","e6a4378b":"code","a972609d":"code","a847e23c":"code","8718d09e":"code","2318a9ec":"code","02c3ca97":"code","b21508d1":"code","dc78339b":"code","0b90cc3f":"code","0e1519c5":"code","8b082cf0":"code","f13bcd41":"code","f4c9b173":"code","df7a4335":"code","e5d4d594":"code","cc16fd66":"code","467cf613":"code","48e68df1":"code","71ebe061":"code","c328b0f7":"code","3a79738b":"code","e1ee858d":"code","fdd44359":"code","f3c4951d":"code","a6e744d7":"code","ce7d52ff":"code","23326b79":"code","8e3bea63":"code","219a420e":"code","84ad5d33":"code","17fa5463":"markdown","d30cbf4c":"markdown","c7621d92":"markdown","6795fd33":"markdown"},"source":{"f65b161d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4ea8fbdd":"#load the train and test dataset\n\ndata = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","03420fb5":"data.head()","7626db75":"data.info()","5f215a12":"#find out the shape of train data\ndata.shape","e1714614":"#plot the missing value attributes\nplt.figure(figsize=(12,9))\nsns.heatmap(data.isnull())\nplt.show()","0b937b87":"#Print the null columns in the training dataset\ndata.columns[data.isnull().any()]","4196e6eb":"Is_null_data = data.isnull().sum() \/ len(data) * 100\nIs_null_data = Is_null_data[Is_null_data > 0]\nIs_null_data.sort_values(inplace = True, ascending = False)\nprint(Is_null_data)","8d9e2ef1":"Is_null_data","07934503":"Is_null_data = Is_null_data.to_frame()\nprint(Is_null_data)","15cdb6d2":"plt.figure(figsize = (15,6))\nbarplot_isnull = sns.barplot(x=Is_null_data.index,y=Is_null_data[0])\nbarplot_isnull.set_xticklabels(barplot_isnull.get_xticklabels(),rotation = 45)\nplt.xlabel('missing value lables')\nplt.ylabel('Percentge of missing values')\nplt.title('Missing value VS Percentage of missing values')\nplt.show()","aaaeedb4":"#PoolQC has missing values ratio is 99% so there is fill by none\ndata.drop(['PoolQC'],axis = 1,inplace = True)","e6a4378b":"data.drop(['MiscFeature'],axis = 1,inplace = True)\ndata.drop(['Alley'],axis = 1,inplace = True) \ndata.drop(['Fence'],axis = 1,inplace = True) \ndata.drop(['FireplaceQu'],axis = 1,inplace = True)","a972609d":"data['LotFrontage'] = data.groupby('Neighborhood')['LotFrontage'].transform(\n    lambda x: x.fillna(x.median()))","a847e23c":"for col in ['GarageType','GarageFinish','GarageQual','GarageCond']:\n    data[col] = data[col].fillna(data[col].mode()[0])","8718d09e":"data.drop(['GarageYrBlt'],axis = 1, inplace = True)","2318a9ec":"data.shape","02c3ca97":"plt.figure(figsize=(12,6))\nsns.heatmap(data.isnull())","b21508d1":"remaining_null_values = data.isnull().sum() \/ len(data)* 100\nremaining_null_values = remaining_null_values[remaining_null_values > 0]\nprint(remaining_null_values)","dc78339b":"col =['MasVnrType','MasVnrArea','BsmtQual','BsmtCond','BsmtExposure', 'BsmtFinType1','BsmtFinType2','Electrical']","0b90cc3f":"data[col].info()","0e1519c5":"data['BsmtQual'] = data['BsmtQual'].fillna(data['BsmtQual'].mode()[0])\ndata['BsmtCond'] = data['BsmtCond'].fillna(data['BsmtCond'].mode()[0])","8b082cf0":"data['MasVnrType'] = data['MasVnrType'].fillna(data['MasVnrType'].mode()[0])\ndata['MasVnrArea'] = data['MasVnrArea'].fillna(data['MasVnrArea'].mode()[0])","f13bcd41":"data['BsmtFinType1'] = data['BsmtFinType1'].fillna(data['BsmtFinType1'].mode()[0])\ndata['BsmtFinType2'] = data['BsmtFinType2'].fillna(data['BsmtFinType2'].mode()[0])","f4c9b173":"data.dropna(inplace = True)","df7a4335":"plt.figure(figsize= (12,6))\nsns.heatmap(data.isnull())\nplt.show()","e5d4d594":"print('The shape of the final training dataset is ',  data.shape)","cc16fd66":"data.columns","467cf613":"col = ('Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street','LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope','Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle','OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle','RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea','ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond','BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2','BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC','CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF','GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath','BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd','Functional', 'Fireplaces', 'GarageType', 'GarageFinish', 'GarageCars','GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive', 'WoodDeckSF','OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch','PoolArea','MiscVal', 'MoSold', 'YrSold', 'SaleType', 'SaleCondition')","48e68df1":"from sklearn.preprocessing import LabelEncoder\nfor cols in col:\n    le = LabelEncoder()\n    le.fit(list(data[cols].values))\n    data[cols] = le.transform(list(data[cols].values))","71ebe061":"X = data.iloc[:,0:74].values\ny = data.iloc[:,-1].values","c328b0f7":"#split the dataset into train and test dataset\nfrom sklearn.model_selection import train_test_split\nX_train , X_test , y_train , y_test = train_test_split(X,y,test_size = 0.2,random_state = 6)","3a79738b":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()","e1ee858d":"lr.fit(X_train,y_train)","fdd44359":"y_hat = lr.predict(X_test)","f3c4951d":"#Accuracy of linear regression\nprint('Model Accuracy :' , lr.score(X_test,y_test)*100)","a6e744d7":"#Train the model for random forest regression\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=1000)","ce7d52ff":"rf.fit(X_train,y_train)","23326b79":"print('Random Forest Accuracy :',rf.score(X_test,y_test)*100)","8e3bea63":"#Train the model on Gradient Boosting Regressor\nfrom sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor(n_estimators=100,max_depth=4)","219a420e":"gbr.fit(X_train,y_train)","84ad5d33":"print('Accuracy of Gradient Boosting Regressor is :',gbr.score(X_test,y_test)*100)","17fa5463":"**Identify the missing values and Remove them**","d30cbf4c":"**Linear Regression**","c7621d92":"**Gradient Boosting Regerssor**","6795fd33":"**Random Forest Regerssion**"}}