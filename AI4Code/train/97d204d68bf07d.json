{"cell_type":{"f1fa0fc1":"code","1cdb01c5":"code","8a1d7e05":"code","042dea73":"code","eda66469":"code","1392fd20":"code","35510e54":"code","a95b265c":"markdown","96400fba":"markdown","91f6ffbb":"markdown","e70825d2":"markdown","eb860c16":"markdown","1d396d27":"markdown","92d7c144":"markdown","94ff22f6":"markdown","e4b95594":"markdown","17fd4a1e":"markdown"},"source":{"f1fa0fc1":"#import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\n\n#read in raw data set\nraw_data = pd.read_csv('data.csv', parse_dates= [3])\nraw_data.shape","1cdb01c5":"# creating new columns to indicate the winner and loser of each fight\ndata = pd.DataFrame(raw_data)\ndata.loc[data['Winner']=='Blue', 'won'] = data['B_fighter']\ndata.loc[data['Winner']=='Red', 'won'] = data['R_fighter']\ndata.loc[data['Winner']=='Blue', 'lost'] = data['R_fighter']\ndata.loc[data['Winner']=='Red', 'lost'] = data['B_fighter']\n\n#consolidate new dataframe\ncols = ['won', 'lost', 'date', 'weight_class']\nmma = pd.DataFrame(data[cols])\nmma.dropna(axis=0, inplace=True)\n\nmma.shape","8a1d7e05":"#create new column with mma math predictions\n\ndef loser_count(winner_lost, loser_beat):\n    count = 0\n    for fighter in winner_lost:\n        if fighter in loser_beat:\n            count += 1\n    return count\n\ndef winner_count(winner_beat, loser_lost):\n    count = 0\n    for fighter in loser_lost:\n        if fighter in winner_beat:\n            count += 1\n    return count\n\ndef guys_loser_lost(lfighter, f_date):\n    guys_loser_lost = mma['won'][(mma['lost']==lfighter) & (mma['date'] < f_date)]\n    return list(guys_loser_lost)\n\ndef guys_winner_lost(wfighter, f_date):\n    guys_winner_lost = mma['won'][(mma['lost']==wfighter) & (mma['date'] < f_date)]\n    return list(guys_winner_lost)\n\ndef guys_loser_beat(lfighter, f_date):\n    guys_loser_beat = mma['lost'][(mma['won']==lfighter) & (mma['date'] < f_date)]\n    return list(guys_loser_beat)\n\ndef guys_winner_beat(wfighter, f_date):\n    guys_winner_beat = mma['lost'][(mma['won']==wfighter) & (mma['date'] < f_date)]\n    return list(guys_winner_beat)\n\ndef mma_math(df):\n    \"\"\"Apply to mma dataframe to generate a row with outcome predictions.\n    \n    Args: \n        Self (dataframe): Used with apply() method to mma dataframe.\n        \n    Returns: \n        Name (str): Name of fighter predicted to win for each row using \"MMA math\"\n        \n    Raises: \n        ? (str): If no name prediction can be made\n        \n    \"\"\"\n    wfighter = df['won']\n    lfighter = df['lost']\n    f_date = df['date']\n\n    #list of guys the winner beat before given date\n    winner_beat = guys_winner_beat(wfighter, f_date)\n    #list of guys the winner lost to before given date\n    winner_lost = guys_winner_lost(wfighter, f_date)\n    #list of guys the loser beat before given date\n    loser_beat = guys_loser_beat(lfighter, f_date)\n    #list of guys the loser lost to before given date\n    loser_lost = guys_loser_lost(lfighter, f_date)\n    #count of guys the winner beat that the loser lost to\n    win_count = winner_count(winner_beat, loser_lost) \n    #count of guys the loser beat that the loser lost to\n    loss_count = loser_count(winner_lost, loser_beat)\n    math = win_count - loss_count\n    if math > 0:\n        return wfighter\n    elif math < 0:\n        return lfighter\n    else: return '?'\n\nmma['math_prediction'] = mma.apply(mma_math, axis=1)\n","042dea73":"# creating new df with only the rows that contained an MMA math prediction\nmath = mma[mma['math_prediction']!='?'].copy()\n\n# creating new column to check the prediction accuracy\ndef correct(line):\n    if line.loc['won'] == line.loc['math_prediction']:\n        return True\n    else: return False\n\nmath['correct'] = math.apply(correct, axis=1)\n\n# returning the MMA math prediction accuracy\nmath_accuracy = int((math['correct'].sum() \/ math.shape[0]) * 100)\nprint('mma math prediction accuracy is ', str(math_accuracy), '%')","eda66469":"# making a function to make a prediction for each fight based on last name length\ndef name(df):\n    won = str(df['won'])\n    lost = str(df['lost'])\n    try: win_last_name = won.split(' ')[1]\n    except: win_last_name = won.split(' ')[0]\n    try: lost_last_name = lost.split(' ')[1]\n    except: lost_last_name = lost.split(' ')[0]\n    if len(win_last_name) > len(lost_last_name):\n        return df['won']\n    elif len(win_last_name) < len(lost_last_name):\n        return df['lost']\n    else: return '?'\n    \n# applying the prediction function to the mma df    \nmma['name'] = mma.apply(name, axis=1)\n# creating a new df without the math prediction column\nmma_names = mma.drop(labels='math_prediction', axis=1).copy()\n# define a function to show if each prediction was correct\ndef correct(line):\n    if line.loc['won'] == line.loc['name']:\n        return True\n    else: return False\n\n# create answer column for predictions\nmma_names['correct'] = mma_names.apply(correct, axis=1)\n# filter to remove rows with no prediction (last names were equal length)\ndf_filter = mma_names['name']!='?'\n# number of predictions made\nn_predictions = (mma_names['correct'][df_filter]).shape[0] \n# number of correct predictions\nn_correct = mma_names[mma_names['correct']==True].shape[0]\n# calculating percent of predictions correct\nname_accuracy = int((mma_names['correct'][df_filter].sum() \/ mma_names['correct'][df_filter].shape[0]) * 100)\n\nprint('Last name length prediction accuracy is ', str(name_accuracy), '%')\n\n","1392fd20":"# selecting dates after 2010\nbefore_2010 = raw_data[raw_data['date']>'2010-1-1']\n\n# calculating % of correct predictions\ntotal = len(before_2010)\nred_wins = before_2010['R_fighter'][before_2010['Winner']=='Red'].count()\nblue_wins = before_2010['B_fighter'][before_2010['Winner']=='Blue'].count()\nred_accuracy = (red_wins\/total)*100\nprint('red corner wins '+str(int(red_accuracy)) +'% of the time')","35510e54":"predictors = ['mma math', 'last name length', 'red corner']\naccuracy_scores = [math_accuracy, name_accuracy, red_accuracy]\n\nplt.rcdefaults()\nfig, ax = plt.subplots(figsize=(6,4))\nax.bar(predictors, accuracy_scores, align='center', color=['r','g','b'])\n#ax.set_yticks(predictors)\n#ax.set_yticklabels(predictors)\nax.set_xlabel('prediction method')\nax.set_ylabel('% correct')\nax.set_title('How does MMA math stack up?')\n\nplt.show()","a95b265c":"![math%20photo.jpg](attachment:math%20photo.jpg)","96400fba":"## Conclusion\n\nWhile MMA math does perform slightly better than a cointoss, it produces so few predictions that it is almost entirely useless as a prediction metric. It might be worth some further analysis to see how it performs during title bouts, or rematches, but for the purposes of machine learning it is not worth pursuing. I had a lot of fun combing through this dataset and will probably revisit it again in the future to try out some feature engineering for machine learning.  ","91f6ffbb":"### Objective\n\nUsing this fantastic [dataset](https:\/\/www.kaggle.com\/rajeevw\/ufcdata) of historical UFC fights compiled by [Rajeev Warrier](https:\/\/www.kaggle.com\/rajeevw), I am going to build a model to test the predictive value of \"MMA math\". Lets get it on! \n\n","e70825d2":"#### Last name length\nHere is a quick test to see if fighters with a longer last name than their opponant are more likely to win. ","eb860c16":"### Comparisons\nWith an accuracy of only 56%, MMA math delivers only a slightly higher predictive value than a coinflip, but this is after all, a sport where either athlete always has \"a puncher's chance\" to win. Let's explore a couple of other predictive methods to see how well MMA math stacks up.","1d396d27":"# Does the addage \"MMA math doesn't work\" add up?\n\n  Arguing over the outcome of future sporting events has a history that surely dates back to the origin of sport itself. There are TV channels that boast panels of professional sports analysts in heated debates about how famous teams or indivuals from the past would compare against the best of today. There are 'Fantasy' magazines and websites, issuing detailed statistical predictions for player performance a full season in advance. Often these arguments will include complex statistical insights that would seem to have no plauseable bearing on the event at hand, but almost invariably, sports math will be used at some point in the course of the debate. It seems only natural that if team A has beaten team X, and team B lost to team X, that team A will beat team B. In the arena of mixed martial arts this concept is called \"MMA math\", and on any platform hosting a discussion on an upcoming event you will find someone using this concept and someone else replying \"MMA math doesn't work\". Well, does it? Let's find out!","92d7c144":"### Making predictions\n\nTo make \"MMA math\" predictions, I built a function and then applied it to the dataset to generate a new column with a prediction. For each row (which represents a fight) the function takes in the names of each fighter and the date of the fight and then, for each fighter, generates a list of names of fighters that they lost to, and a list of names of fighters they beat. Each fighter gets a \"point\" for a fighter they beat that also beat the other fighter. Then the points are added up, and the fighter with the most points is the MMA math predicted victor. \n\n![f_matrix.jpg](attachment:f_matrix.jpg)","94ff22f6":"### Problems\nRight away we can start to see a big issue with making predictions using MMA math. There simply aren't very many opportunities to use it. Of the 6012 total fights in our dataset, only 516 are able to generate a prediction using my MMA math model. That's only about 9%! So even if this prediction method were to be highly accurate, it could only be used about 10% of the time. There are several contributing factors to this situation that deserve a little examination.![image.png](attachment:image.png)\n\n1) **Fighters don't fight frequently**. Right now the UFC has roughly [689](https:\/\/sqaf.club\/how-many-fighters-in-ufc-currently\/) fighters on its roster and last year there were about 477 fights, creating an average of 1.3 fights per year for each fighter. Of course some fighters were more active and some were absent the entire year, so the actual mean was 1.6 fights per active fighter, with one fighter entering the cage an astonishing 6 times in one year! Here is a graph of the breakdown. ![fight_frequency.png](attachment:fight_frequency.png) \n\n2) **Fighters don't fight many times** Only 20 people in the UFC history have fought more than 25 times. Nearly half of all UFC combatants only enter the cage 1-3 times in their entire career. Even the fighters that have made it all the way to at least 1 title bout only average just over 11 total career fights. It's beyond the scope of this project, but it might be worth seeing if MMA math has more predictive value for title bouts. ![fight_count.png](attachment:fight_count.png) \n\n3) **Fighters change weight classes** While some fighters will stay in the same division long term, the more matches they have the higher the probability that they will fight in at least one other division. When a fighter changes weight division they enter an entirely new pool of potential opponents which greatly reduces their chances of a matchup where MMA math can apply.\n![weight_class_changes.png](attachment:weight_class_changes.png)\n![prob_graph.png](attachment:prob_graph.png)\n\n4) **Fighters change over time** One of the biggest arguments against MMA math is that even when two fighters have fought the same opponant with different outcomes, that opponant has often either improved or declined inbetween matches. Perhaps that opponant lost early in their career from lack of experience, or lost later in their career after their performance had declined.\n\nAll that aside, let's see how our MMA math predictions actually perform!","e4b95594":"### Transforming the data\nThis data set was originally assembled for use to build a machine learning model, so the author combined a dataset of fighter records and attributes, with a dataset of match statistics and results. For my purposes, I only need a dataset with a row for each match, that has the winner, the loser and the date of the event. There were 110 matches that were a 'draw', with no winner, that I dropped from the dataset, since MMA math requires wins and losses. I also kept the weightclass column for possible futher exploration. ","17fd4a1e":"#### Corner color\nAnother quick function to calculate predictive power of just picking the \"red\" corner. Before 2010 this dataset had the red corner winning 98% of the time, so I only used the data after 2010 for this experiment."}}