{"cell_type":{"ea7f5d06":"code","f322294c":"code","17d5a94f":"code","57eb6615":"code","17b1042a":"code","fb5b5f55":"code","9d68f5a2":"code","afef79ed":"code","1e579c5c":"code","1820bc76":"code","9ff10116":"code","ca8d6e51":"code","e006f4ac":"code","ca64f1e3":"code","c084f46d":"code","55669529":"code","9765e85e":"code","8653b12a":"code","7e64ae80":"code","259c8f4c":"code","0b30d21f":"code","7decc51b":"code","29ae9b40":"code","cf9ee07a":"code","3ab03aae":"code","083fe22e":"code","eea824b6":"code","21b243f9":"code","038a2e71":"code","69ba4ab1":"code","a5aaea58":"code","f8943bf4":"code","bde4fe82":"code","3ebc5ce8":"code","717568dc":"code","4a6a458c":"code","47debde5":"code","54cabf21":"code","0854bebf":"code","4814bb87":"code","10ee5f7c":"code","199fd6bc":"code","d982a0c1":"code","2fb77c23":"code","8efb6eb5":"code","0d692721":"code","344779b8":"code","859ce59d":"code","a469b068":"code","d49c391c":"code","5b93c75b":"code","b34cd76d":"code","ec869da7":"code","14352e38":"code","1678cb7f":"markdown","36291da2":"markdown","6c856111":"markdown","1438fe95":"markdown","31a66c16":"markdown","78c4b8e2":"markdown","13809bb0":"markdown","c583a81d":"markdown","72a29df4":"markdown","b8a5a313":"markdown","2ead4cc6":"markdown","76598518":"markdown","020ebdbe":"markdown","6b83047d":"markdown","ce46f93e":"markdown","838216b8":"markdown","16425f6e":"markdown","e02f519b":"markdown","2fd16684":"markdown","f649b147":"markdown","501d0641":"markdown","c1c85cea":"markdown","ccddd877":"markdown","9c56e7ee":"markdown","42999091":"markdown","389e03b7":"markdown","41fd160f":"markdown","8c561ac7":"markdown","ebee05c2":"markdown","d71cf1ac":"markdown"},"source":{"ea7f5d06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('.'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f322294c":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_data.head()","17d5a94f":"test_data = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_data.head()","57eb6615":"train_data.shape","17b1042a":"test_data.shape","fb5b5f55":"train_data.dtypes","9d68f5a2":"test_data.dtypes","afef79ed":"print(\"Missing data counts in Training Data : \")\nprint(train_data.isnull().sum())\n\nprint(\"Missing data counts in Test Data : \")\nprint(test_data.isnull().sum())\n","1e579c5c":"print(\"Percentage of data missing Training Data: \")\nprint(train_data.isnull().sum()\/train_data.shape[0])\n\nprint(\"Percentage of data missing Test Data: \")\nprint(test_data.isnull().sum()\/test_data.shape[0])","1820bc76":"columns_to_drop = []\ncolumns_to_drop.append('Cabin')","9ff10116":"test_data[test_data['Fare'].isnull()]","ca8d6e51":"test_data[test_data['Ticket']=='3701']","e006f4ac":"class_3_data = test_data[test_data['Pclass'] == 3]\nclass_3_S = class_3_data[class_3_data['Embarked'] == 'S']\nclass_3_S[class_3_S['Age']>40]","ca64f1e3":"test_data[test_data[\"Fare\"].isnull()]","c084f46d":"test_data.iloc[152,-3]= 14","55669529":"train_data[train_data['Age'].isnull()]","9765e85e":"def extract_titles(df):\n    pos = df.columns.get_loc('Name')\n    titles = set({})\n    for row in df.values:\n        title = row[pos].split(',')[1].split('.')[0] + '.'.strip()\n        titles.add(title)\n\n    return titles\n","8653b12a":"def add_titles_to_df(df) :\n    titles = extract_titles(df)\n    pos = df.columns.get_loc('Name')\n    title_list = []\n    for row in df.values:\n        for title in titles:\n            if title in row[pos]:\n                title_list.append(title)\n                break\n    df['Title'] = title_list\n    return df\n    \n","7e64ae80":"train_data = add_titles_to_df(train_data)","259c8f4c":"train_data.head()","0b30d21f":"test_data = add_titles_to_df(test_data)","7decc51b":"train_data['Title'].value_counts()","29ae9b40":"test_data['Title'].value_counts()","cf9ee07a":"male_titles = [' Col.',' Major.',' Capt.',' Jonkheer.',' Don.',' Sir.']\nfemale_titles = [' Lady.',' Mme.',' the Countess.',' Dona.',' Mlle.']","3ab03aae":"def replace_uncommon_titles(df,new_title,title_list):\n    pos = df.columns.get_loc('Title')\n    for title in title_list:\n        for i in range(0,df.shape[0]):\n            if df.iloc[i,pos] == title:\n                print(title)\n                df.iloc[i,pos] = new_title\n                \n    return df\ntrain_data = replace_uncommon_titles(train_data,' Mr.',male_titles)\ntrain_data = replace_uncommon_titles(train_data,\" Miss.\",female_titles)\ntest_data = replace_uncommon_titles(test_data,\" Mr.\",male_titles)\ntest_data = replace_uncommon_titles(test_data,\" Miss.\",female_titles)","083fe22e":"titles = list(train_data['Title'].value_counts().index)\nfor title in titles:\n    print(\"Title train:: \",title)\n    print(train_data[train_data['Title'] == title].describe()[\"Age\"])\n    print(\"Title test:: \",title)\n    print(test_data[test_data['Title'] == title].describe()[\"Age\"])\n    ","eea824b6":"age_mean = train_data.groupby(\"Title\").mean()['Age']","21b243f9":"age_mean","038a2e71":"def fill_age_na(df,age_mean):\n    rows_with_age_missing = df[df['Age'].isnull()]\n    pos = df.columns.get_loc(\"Age\")\n    for title in age_mean.index:\n        passengerIds = rows_with_age_missing[rows_with_age_missing['Title'] == title][\"PassengerId\"]\n        for Id in passengerIds:\n            df.iloc[df[df['PassengerId'] == Id].index.values,pos] = age_mean[title]\n    return df","69ba4ab1":"train_data = fill_age_na(train_data,age_mean)\ntest_data = fill_age_na(test_data,age_mean)\n\ntrain_data[train_data['Age'].isnull()]","a5aaea58":"test_data[test_data['Age'].isnull()]","f8943bf4":"train_data.isnull().sum()","bde4fe82":"test_data.isnull().sum()","3ebc5ce8":"# Filling Embarked with mode 'S'\ntrain_data['Embarked']= train_data['Embarked'].fillna(value='S',axis=0)","717568dc":"columns_to_drop.extend([\"Ticket\"])","4a6a458c":"def drop_columns(df,list_of_columns):\n    return df.drop(list_of_columns,axis=1)\n    ","47debde5":"train_data = drop_columns(train_data,columns_to_drop)\ntest_data = drop_columns(test_data,columns_to_drop)","54cabf21":"labels = train_data['Survived']\ntrain_data = train_data.drop('Survived',axis=1)","0854bebf":"cleaned_train_data = train_data\ncleaned_test_data = test_data","4814bb87":"categorical_columns = ['Pclass','Sex','Embarked','Title']\nnumerical_columns = ['Age','Fare','SibSp','Parch']\n","10ee5f7c":"from sklearn.preprocessing import StandardScaler\n\ndef preprocess_data(df):\n    scaler = StandardScaler()\n\n    # split data into numerical and categorical\n    numerical_data = df[numerical_columns]\n    categorical_data = df[categorical_columns]\n\n    #scaling the data with StandardScaler\n    std_data_numerical = scaler.fit_transform(numerical_data)\n    df_numerical = pd.DataFrame(std_data_numerical,columns=numerical_columns,index=df.index)\n\n\n    #handling the categorical data\n    std_data_categorical = pd.get_dummies(categorical_data,columns=categorical_columns)\n\n    # combining the numerical and categorical data into one DataFrame\n    final_data = df_numerical.join(std_data_categorical,how='inner')\n    \n    return final_data","199fd6bc":"preprocessed_train_data = preprocess_data(cleaned_train_data)","d982a0c1":"preprocessed_test_data = preprocess_data(cleaned_test_data)","2fb77c23":"preprocessed_test_data.columns","8efb6eb5":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\ntrain_X, val_X, train_y, val_y = train_test_split(preprocessed_train_data,labels,random_state=1)","0d692721":"from sklearn.ensemble import RandomForestClassifier\n\nestimators = [1, 2, 4, 8, 16, 32, 64, 100, 200]\nfor num in estimators:\n    model = RandomForestClassifier(n_estimators=num)\n    model.fit(train_X,train_y)\n    preds = model.predict(val_X)\n    \n    print(\"Accuracy for {} estimators is {}\".format(num,accuracy_score(val_y,preds,normalize=True)))","344779b8":"import xgboost as xgb\nn_est = [5,10,20,40,100,200]\nfor num in n_est:\n    xgb_model = xgb.XGBClassifier(n_estimators=num)\n    xgb_model.fit(train_X,train_y)\n    preds = xgb_model.predict(val_X)\n\n    print(\"Accuracy lr {} is {}\".format(num,accuracy_score(val_y,preds,normalize=True)))","859ce59d":"from sklearn.linear_model import LogisticRegression\niters = [50,100,150,200,300,500]\nfor num in iters:\n    model = LogisticRegression(penalty='l2',max_iter=num,random_state=1,verbose=3)\n    model.fit(train_X,train_y)\n    preds = model.predict(val_X)\n    print(\"Accuracy for {} iterations  is {}\".format(num,accuracy_score(val_y,preds,normalize=True)))","a469b068":"model = LogisticRegression(penalty='l2',solver='lbfgs',random_state=1)\nmodel.fit(preprocessed_train_data,labels)\npreds = model.predict(preprocessed_test_data)","d49c391c":"output = pd.DataFrame({'PassengerId': test_data.PassengerId,\n                      'Survived': preds})\noutput.to_csv('submission.csv', index=False)\n\noutput","5b93c75b":"from sklearn.manifold import TSNE\n\ndef plot_TSNE(data,label):\n    \n    tsne = TSNE(n_components=2,random_state=0,n_iter=5000,verbose=3,perplexity=30,learning_rate=200)\n    embeddings = tsne.fit_transform(data)\n    return embeddings\n    ","b34cd76d":"embeddings = plot_TSNE(preprocessed_train_data,labels)","ec869da7":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","14352e38":"plot_data = np.hstack((embeddings,np.array(labels).reshape(len(labels),1)))\n    \nplot_df = pd.DataFrame(plot_data,columns=['Dim1','Dim2','Survived'])\n    \nsns.FacetGrid(plot_df,hue=\"Survived\",height=5).map(sns.scatterplot,\"Dim1\",\"Dim2\").add_legend()\n","1678cb7f":"# Loading Data","36291da2":"# EDA","6c856111":"Mean ages by group","1438fe95":"Now that we have filled the age fields, we can move on to the other columns\n1. In the Embarked Column, we can see that there are only two missing data points. We can fill those with the mode of the data, i.e. 'S'.","31a66c16":"## RandomForestClassifier","78c4b8e2":"**Observation:**\n\n* We can see that there are **Titles** with 1 or 2 entries. \n* We can also see that there is a lot of inconsitencies in the titles between train and test set.","13809bb0":"# Extracting labels\n","c583a81d":"# Model Selection","72a29df4":"Adding all the columns to be dropped to the list","b8a5a313":"## Observation: \n\n#### Train Data:\n* About 77% data is missing from the 'Cabin' column. We can drop that column.\n* Only two data points are missing from 'Embarked'\n* Age has about 20% missing data. \n\n#### Test Data:\n* 1 missing data point in Fare \n* About 20% missing data in Age\n* 78 % missing data in Cabin.\n\nWe can safely remove the column Cabin from both Train and Test Data","2ead4cc6":"# Data Cleaning","76598518":"1. Let us check if we can predict the missing Fare Price from the test data","020ebdbe":"## Logistic Regression","6b83047d":"We can see that all the passengers with similar data points have a Fare of either 7 or 15. Lets set the Fare to 14.","ce46f93e":"Now lets check the Age statistics for each title","838216b8":"2. Check the data for missing values","16425f6e":"2. Lets try to predict the ages for the missing age values","e02f519b":"## Observations:\nWe can see that the **Pclass** is **3** and **Ticket Number** is **3701** and also the **Embarked** is **'S'**.\nLet see if we can use this information to guess a **Fare**.","2fd16684":"Getting all the titles from the Training data","f649b147":"### Approach: \n* By intuition, the titles do signify some sort of age. For example, Master. is for boys under a certain age. \n* So the approach is to group the data by titles and assign the mean age to the corresponding entries","501d0641":"### Final touches","c1c85cea":"Adding a new column of titles to the Training Data","ccddd877":"# Preprocessing Data","9c56e7ee":"We can see the Title column added above","42999091":"Lets combine these titles with the common titles like Mr, Miss, Mrs, Master","389e03b7":"## XGBoostClassifier","41fd160f":"We get the highest accuracy on the validation with Logistic regression :)","8c561ac7":"## Use Titles to approximate the ages","ebee05c2":"1. Check the data types of each feature for inconsistencies","d71cf1ac":"### Approach :\nWe can check the Names of each passenger to understand Title given to each passenger in the data.\nTitle corresponds to:\n   * Master\n   * Miss\n   * so on...\n   "}}