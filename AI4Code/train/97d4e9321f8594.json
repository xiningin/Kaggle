{"cell_type":{"6195cbf5":"code","7783f253":"code","27f48ae1":"code","6ef8502d":"code","158d65a0":"code","6b6bc670":"code","5cf96681":"code","130ef6fd":"code","439ff112":"code","045da920":"code","c2e6e69c":"code","8b55f3d1":"code","4d678c75":"code","1c20ff82":"code","47c55100":"code","68f1eb50":"code","cd096917":"code","a68a2ced":"code","1944dbb1":"code","bf46dae8":"code","e35daaf0":"markdown","b1f1708f":"markdown","5c7f036a":"markdown","b9c98693":"markdown","4e375c77":"markdown","f8e9ffe9":"markdown","c406a602":"markdown","974bee92":"markdown"},"source":{"6195cbf5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7783f253":"df = pd.read_csv('..\/input\/facebook-ads\/Facebook_Ads_2.csv', encoding = 'ISO-8859-1')","27f48ae1":"df.head()","6ef8502d":"clicked = df[df['Clicked']==1]\nno_clicked = df[df['Clicked']==0]","158d65a0":"print('Total=', len(df))\nprint('Number of customers clicked = ', len(clicked))\nprint('Number of customers not clicked = ', len(no_clicked))","6b6bc670":"sns.scatterplot(data = df, x = df['Time Spent on Site'], y = df['Salary'], hue=df['Clicked'])\nplt.show()","5cf96681":"plt.figure(figsize = (10,8))\n\nsns.boxplot(data=df, x = 'Clicked', y = 'Salary')\nplt.show()","130ef6fd":"plt.figure(figsize = (10,8))\n\nsns.boxplot(data=df, x = 'Clicked', y = 'Time Spent on Site')\nplt.show()","439ff112":"plt.figure(figsize = (10,8))\nsns.histplot(df['Salary'], kde = True, bins = 40)\nplt.show()","045da920":"plt.figure(figsize = (10,8))\nsns.histplot(df['Time Spent on Site'], kde = True, bins = 20)\nplt.show()","c2e6e69c":"df.columns\n\ndf = df.drop(['Names','emails','Country'],axis = 1)","8b55f3d1":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\n","4d678c75":"X = df.drop(['Clicked'],axis = 1).values\n\ny = df['Clicked'].values\n\nss = StandardScaler()\n\nX = ss.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)","1c20ff82":"lr = LogisticRegression(random_state=0)\n\nlr.fit(X_train, y_train)","47c55100":"y_pred_train = lr.predict(X_train)\ny_pred_train","68f1eb50":"from sklearn.metrics import confusion_matrix, classification_report\ncm = confusion_matrix(y_train,y_pred_train)\nsns.heatmap(cm, annot = True, fmt = 'd')","cd096917":"y_pred_test = lr.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, classification_report\ncm = confusion_matrix(y_test,y_pred_test)\nsns.heatmap(cm, annot = True, fmt = 'd')","a68a2ced":"print(classification_report(y_test, y_pred_test))","1944dbb1":"from matplotlib.colors import ListedColormap\n\nX_set, y_set = X_train, y_train\n\nX1,X2 = np.meshgrid(np.arange(start = X_set[:,0].min()-1, stop = X_set[:,0].max()+1, step = 0.01),\n                   np.arange(start =  X_set[:,1].min()-1, stop = X_set[:,1].max()+1, step = 0.01))\nplt.contourf(X1,X2, lr.predict(np.array([X1.ravel(),X2.ravel()]).T).reshape(X1.shape),\n            alpha = 0.75, cmap = ListedColormap(('magenta','blue')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X1.min(), X2.max())\n\nfor i,j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set==j,0], X_set[y_set==j,1],\n                c = ListedColormap(('magenta','blue'))(i),label = j)\n    \nplt.title('facebook ad: customer click prediction (training set)')\nplt.xlabel('Time spent in Site')\nplt.ylabel('salary')\nplt.legend()\nplt.show()","bf46dae8":"from matplotlib.colors import ListedColormap\n\nX_set, y_set = X_test, y_test\n\nX1,X2 = np.meshgrid(np.arange(start = X_set[:,0].min()-1, stop = X_set[:,0].max()+1, step = 0.01),\n                   np.arange(start =  X_set[:,1].min()-1, stop = X_set[:,1].max()+1, step = 0.01))\nplt.contourf(X1,X2, lr.predict(np.array([X1.ravel(),X2.ravel()]).T).reshape(X1.shape),\n            alpha = 0.75, cmap = ListedColormap(('magenta','blue')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X1.min(), X2.max())\n\nfor i,j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set==j,0], X_set[y_set==j,1],\n                c = ListedColormap(('magenta','blue'))(i),label = j)\n    \nplt.title('facebook ad: customer click prediction (testing set)')\nplt.xlabel('Time spent in Site')\nplt.ylabel('salary')\nplt.legend()\nplt.show()","e35daaf0":"## Model Testing","b1f1708f":"## EDA","5c7f036a":"## Visualizing the test dataset","b9c98693":"#### We are dropping the varibales emails, country and names(Country can be made use if required)","4e375c77":"## Preparing the data for training\/Data Cleaning","f8e9ffe9":"## Visualising the training dataset","c406a602":"#### People are spending on an average anywhere between 30 and 40 minutes of their time on the site. Highest time spent is around 60 mkinutes and least is around 5 minutes","974bee92":"#### Histogram shows that most of the people are earning salary anywhere between 40000 and 80000. While very few are earning less than 20000. "}}