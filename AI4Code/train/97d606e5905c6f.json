{"cell_type":{"3a77b0db":"code","166c6825":"code","27a98722":"code","e964dedc":"code","43031108":"code","f88c3471":"code","d2623c14":"code","32106f0a":"code","827ee4e0":"code","286b7a7e":"code","a9e85bfa":"code","b873e4ed":"code","f0bc062d":"code","2d117c32":"code","33bbd38d":"code","d46f39b5":"code","fb5770cd":"markdown","75c0ed82":"markdown"},"source":{"3a77b0db":"#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random as r","166c6825":"#importing ML packages\nfrom sklearn import preprocessing\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.utils import to_categorical","27a98722":"#function to generate random colors\ndef randomColor(n):\n    color = []\n    colorArr = ['00','11','22','33','44','55','66','77','88','99','AA','BB','CC','DD','EE','FF']\n    for _ in range(n):\n        color.append('#' + colorArr[r.randint(0,15)] + colorArr[r.randint(0,15)] + colorArr[r.randint(0,15)])\n    return color","e964dedc":"#get datasets\ntraindf = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndisplay(traindf.head())\nprint(traindf.shape)","43031108":"testdf = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndisplay(testdf.head())\nprint(testdf.shape)","f88c3471":"fig, axes = plt.subplots(nrows=2, ncols=3, figsize = (18,9))\n\n#Gender vs Survuval Ratio\ngender_survived = traindf[['Sex', 'Survived']].groupby('Sex').mean()\ngender_survived.plot(kind='barh', \n                     color = [randomColor(len(gender_survived))], \n                     ax = axes[0,0],\n                     title = 'Gender vs Survival Ratio',\n                     xlim = (0,1),\n                     grid = True,)\n\n#Pclass vs Survival Ratio\npclass_survived = traindf[['Pclass', 'Survived']].groupby('Pclass').mean()\npclass_survived.plot(kind='bar', \n                     color = [randomColor(len(pclass_survived))], \n                     ax=axes[0,1],\n                     title = 'Pclass vs Survival Ratio',\n                     ylim = (0,1),\n                     grid = True,)\n\n#Embarked vs Survival Ratio\nembarked_survived = traindf[['Embarked', 'Survived']].groupby('Embarked').mean()\nembarked_survived.plot(kind='bar', \n                       color = [randomColor(len(embarked_survived))], \n                       ax=axes[0,2],\n                       title = 'Embarked vs Survival Ratio',\n                       ylim = (0,1),\n                       grid = True,)\n\n#Parch vs Survival Ratio\nparch_survived = traindf[['Parch', 'Survived']].groupby('Parch').mean()\nparch_survived.plot(kind='bar', \n                    color = [randomColor(len(parch_survived))], \n                    ax=axes[1,0], \n                    title = 'Parch vs Survival Ratio',\n                    ylim = (0,1),\n                    grid = True,)\n\n#SibSp vs Survival Ratio\nsibsp_survived = traindf[['SibSp', 'Survived']].groupby('SibSp').mean()\nsibsp_survived.plot(kind='bar', \n                    color = [randomColor(len(sibsp_survived))], \n                    ax=axes[1,1],\n                    title = 'Parch vs Survival Ratio',\n                    ylim = (0,1),\n                    grid = True,)\n\n#Age Group vs Survival Ratio\nagegrp = {'child':(0,13), 'teen':(13,20), 'young_adult':(20,35), 'middle_adult':(35,45), 'old_adult':(45,60), 'senior_citizen':(60,100)}\nage_survival = traindf[['Age','Survived']].dropna().reset_index(drop=True)\nage_survival['age_grp'] = None\n\nfor i in range(len(age_survival)):\n    for grp in agegrp:\n        temp = agegrp[grp]\n        if age_survival.loc[i,'Age'] in range(temp[0],temp[1]):\n            age_survival.loc[i,'age_grp'] = grp\n            break\n            \nage_survival = age_survival.drop(columns=['Age']).groupby('age_grp').mean()\n\nage_survival.plot(kind= 'barh', \n                  color = [randomColor(6)], \n                  legend=False, ax=axes[1,2],\n                  title = 'Age group vs Survival Ratio',\n                  xlim = (0,1),\n                  grid = True,)\n\nfig.tight_layout()\nfig.show()","d2623c14":"traindf2 = traindf[['Survived', 'Pclass', 'Sex', 'SibSp']]","32106f0a":"missingdf = traindf2.transpose()\nmissingdf['missing values'] = missingdf.apply(lambda x: len(traindf)-x.count(), axis=1)\nmissingdf = missingdf[['missing values']]\nmissingdf","827ee4e0":"features = [\"Pclass\", \"Sex\", \"SibSp\"]\nX = pd.concat([pd.get_dummies(traindf2[features[0]]),pd.get_dummies(traindf2[features[1:]])], axis = 1, sort = False)\ndisplay(X.head())\nprint(X.shape)","286b7a7e":"#All values have been converted to categorical variables\nX = preprocessing.StandardScaler().fit(X).transform(X)\ny = to_categorical(traindf2['Survived'])\nnum_features = len(X[0])\nnum_classes = len(y[0])\nprint(X[0:3])\nprint(y[0:3])\nprint(num_features)\nprint(num_classes)","a9e85bfa":"# define classification model\ndef classification_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(num_features, activation='relu', input_shape=(num_features,)))\n    model.add(Dense(30, activation='relu'))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(16, activation='relu'))\n    model.add(Dense(num_classes, activation='softmax'))\n    \n    \n    # compile model\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    return model","b873e4ed":"# build the model\nmodel = classification_model()\n\n# fit the model\nhistory = model.fit(X, y, validation_split=0.15, epochs=20, verbose=1, shuffle=True)","f0bc062d":"print('Validation Accuracy : ',round(history.history['val_accuracy'][-1]*100,4))","2d117c32":"Xfinaltest = pd.concat([pd.get_dummies(testdf[features[0]]),pd.get_dummies(testdf[features[1:]])], axis = 1, sort = False)\ndisplay(Xfinaltest.head())","33bbd38d":"#make prediction on test dataset\nYpred = model.predict_classes(Xfinaltest)","d46f39b5":"resultdf = pd.DataFrame({'PassengerId': testdf['PassengerId'], 'Survived': Ypred})\ndisplay(resultdf.head())\nresultdf.to_csv('my_submission2.csv', index=False)\nprint(\"Your submission was successfully saved!\")","fb5770cd":"<h3>This model made predictions with accuracy of 76.8%<\/h3>","75c0ed82":"<h3>I am using only Pclass, Sex and Sibsp as features for training because taking produced the best results for me<\/h3>"}}