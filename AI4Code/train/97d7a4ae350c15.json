{"cell_type":{"1749ac3a":"code","98bd3ce1":"code","3c999ce3":"code","c8141819":"code","3d5efd68":"code","03bf76ff":"code","b5b3df49":"code","5f3a6b32":"code","6e673775":"code","1e9710f6":"code","7d480edf":"code","eec73e7c":"code","77707f46":"code","eb336d91":"code","3048054f":"code","24487cac":"code","eda9ddca":"code","735d6d00":"code","ec6508fe":"code","abdac74f":"code","83f0b652":"code","83b4c97c":"code","0bb8a7f1":"code","ddd48c61":"code","5aa95b78":"code","7c357004":"code","6cbefedf":"code","7d3e7155":"code","251aef85":"code","5cf63036":"markdown","b8c5953a":"markdown","7a5ef643":"markdown","55e88fc1":"markdown","8c6a747c":"markdown","98700d04":"markdown","b27dcb45":"markdown","dacbbd1a":"markdown","5ef782b6":"markdown","a34ada5f":"markdown","c65a4b2a":"markdown","25bc9ba5":"markdown","40557555":"markdown"},"source":{"1749ac3a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport tqdm\nimport catboost\nimport warnings\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score","98bd3ce1":"warnings.filterwarnings(\"ignore\")","3c999ce3":"pd.set_option('display.max_rows', 1000)\npd.set_option('display.max_columns', 1000)\npd.set_option('display.width', 1000)\npd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', -1)","c8141819":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')\ndf.head()","3d5efd68":"df.shape","03bf76ff":"def weird_division(n, d):\n    return n \/ d if d else 0","b5b3df49":"df['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue'] * 100)),\n                                              x['measurable_impressions']) * 1000,\n                     axis=1)","5f3a6b32":"df.head()","6e673775":"df[df['CPM'] < 0]","1e9710f6":"df = df[df['CPM'] >= 0]\ndf.shape","7d480edf":"df.isna().sum()","eec73e7c":"fig, axs = plt.subplots(6, 3, figsize=(20, 25), facecolor='w', edgecolor='k')\n\nplt.subplots_adjust(hspace=1.5)\n\naxs = axs.ravel()\n\nfor i in range(len(df.columns)):\n    axs[i].set_title('CPM - ' + df.columns[i])\n    axs[i].scatter(df[df.columns[i]], df['CPM'])\n    axs[i].set_ylabel('CPM')\n    axs[i].set_xlabel(df.columns[i])\n    axs[i].tick_params(axis='x', rotation=90)\n\n#axs[17].set_axis_off()","77707f46":"df['View\/measurable'] = df.apply(lambda x: weird_division(x['viewable_impressions'],\n                                                          x['measurable_impressions']),\n                                 axis=1,\n                                )","eb336d91":"df_droped = df.drop(['revenue_share_percent', # 1 unique value\n                     'integration_type_id', # 1 unique value\n                     'total_revenue', # CPM depend\n                     'measurable_impressions', # CPM depend, 'View\/measurable' depend\n                     'viewable_impressions', # 'View\/measurable',\n                     ],\n                     axis=1,\n                    )","3048054f":"df_droped.head()","24487cac":"df_droped.shape","eda9ddca":"# Convert date_time column to datetime type\ndf_droped['date'] = pd.to_datetime(df_droped['date'])\n\n# Number of day in the week\ndf_droped['day_number'] = df_droped['date'].dt.day\n\n# Name of day in the week\ndf_droped['day_week'] = df_droped['date'].dt.day_name()\n\n# Weekend flag\ndf_droped['is_weekend'] = df_droped['day_week'].apply(lambda x : 1 if x in ['Saturday','Sunday'] else 0)","735d6d00":"df_droped.head()","ec6508fe":"# All days in data\nnp.sort(df_droped['date'].unique())","abdac74f":"def data_splitter(df, train_valid_range=['2019-06-01 00:00:00', '2019-06-21 00:00:00'], valid_size=0.1): \n    # Train\/val data separation\n    mask = (df['date'] >= train_valid_range[0]) & (df['date'] <= train_valid_range[1])\n    df_train_valid = df[mask]\n    df_train_valid = df_train_valid[df_train_valid['CPM'] < df_train_valid['CPM'].quantile(0.95)]\n    y_train_ = df_train_valid['CPM'].values\n    X_train_ = df_train_valid.drop(['CPM', 'date'], axis=1).values\n    X_train, X_valid, y_train, y_valid = train_test_split(X_train_,\n                                                          y_train_,\n                                                          test_size=valid_size,\n                                                          random_state=42,\n                                                          shuffle=True,\n                                                         )\n    # Test data separation\n    mask = (df['date'] >= '2019-06-22 00:00:00')\n    df_test = df[mask]\n    df_test = df_test[df_test['CPM'] < df_test['CPM'].quantile(0.95)]\n    y_test = df_test['CPM'].values\n    X_test = df_test.drop(['CPM', 'date'], axis=1).values\n    \n    return X_train, X_valid, X_test, y_train, y_valid, y_test ","83f0b652":"X_train, X_valid, X_test, y_train, y_valid, y_test = data_splitter(df_droped)","83b4c97c":"assert X_train.shape[1] == X_valid.shape[1] == X_test.shape[1]","0bb8a7f1":"X_train.shape, X_valid.shape, X_test.shape, y_train.shape, y_valid.shape, y_test.shape ","ddd48c61":"ctb = catboost.CatBoostRegressor(iterations=1000,\n                                 learning_rate=0.1,\n                                 random_seed=42,\n                                 depth=10,\n                                 task_type=\"CPU\",\n                                 loss_function='RMSE',\n                                 l2_leaf_reg=5,\n                                 use_best_model=True,\n                                 bagging_temperature=1000,\n                                 border_count=255,\n                                )","5aa95b78":"ctb.fit(X_train,\n        y_train,\n        eval_set=(X_valid, y_valid),\n        plot=True,\n        early_stopping_rounds=10,\n        cat_features=[13],\n        verbose=False,\n       )","7c357004":"print('Number of trees: {}'.format(ctb.best_iteration_))\nprint('Best MSE on train: {}, on validation: {}'.format(ctb.best_score_['learn']['RMSE']**2,\n                                                        ctb.best_score_['validation']['RMSE']**2,\n                                                        ),\n     )","6cbefedf":"# Reserve plot if the cell with catboost training plot is not displayed in Kaggle notebooks\n\nplt.figure(figsize=(8, 6))\n\nresults = pd.DataFrame({'train_MSE': np.power(ctb.evals_result_['learn']['RMSE'], 2)[0:ctb.best_iteration_],\n                        'validation_MSE': np.power(ctb.evals_result_['validation']['RMSE'], 2)[0:ctb.best_iteration_],\n                        'trees_number': np.arange(1, ctb.best_iteration_+1, 1),\n                       },\n                      )\n\ng = sns.lineplot(data=results,\n                 x='trees_number',\n                 y='train_MSE',\n                 color=\"g\",\n                 linewidth=2,\n                );\ng = sns.lineplot(data=results,\n                 x='trees_number',\n                 y='validation_MSE',\n                 color=\"y\",\n                 linewidth=2,\n                );\ng.set(xlabel='Number of trees',\n      ylabel='MSE',\n      title='Gradient boosting train and validation MSE',\n     );\ng.grid();\ng.legend(loc='best',\n         labels=['MSE on train data', 'MSE on on validation data'],\n        );","7d3e7155":"train_preds = ctb.predict(X_train)\nvalid_preds = ctb.predict(X_valid)\ntest_preds = ctb.predict(X_test)","251aef85":"print('--------------------')\nprint('MSE score:')\nprint('--------------------')\nprint('Train MSE: {:.3f}'.format(mean_squared_error(y_train, train_preds)))\nprint('Valid MSE: {:.3f}'.format(mean_squared_error(y_valid, valid_preds)))\nprint('Test MSE: {:.3f}'.format(mean_squared_error(y_test, test_preds)))\nprint('\\n--------------------')\nprint('R2 score:')\nprint('--------------------')\nprint('Train R2: {:.3f} %'.format(100 * r2_score(y_train, train_preds)))\nprint('Valid R2: {:.3f} %'.format(100 * r2_score(y_valid, valid_preds)))\nprint('Test R2: {:.3f} %'.format(100 * r2_score(y_test, test_preds)))","5cf63036":"# Fit model on train data and validate on valid data","b8c5953a":"# Predictions","7a5ef643":"# Data load","55e88fc1":"# Target variable create","8c6a747c":"# Drop features","98700d04":"# Results of training","b27dcb45":"# Create features","dacbbd1a":"# Create new features","5ef782b6":"# Train-test split","a34ada5f":"# EDA","c65a4b2a":"# Metrics","25bc9ba5":"# NaN check","40557555":"# Model create"}}