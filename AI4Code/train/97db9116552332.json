{"cell_type":{"2efd9908":"code","14caea59":"code","bf189f32":"code","e2c808f0":"code","6ae7b8d8":"code","8ba96d5b":"code","2f7daa97":"code","750259fa":"code","38460de7":"code","7d08c5ea":"code","a9b05b1f":"code","3c008064":"code","68f882d8":"code","86a912c7":"code","cede6da8":"code","a18912f0":"code","66e253d4":"code","1513c26e":"code","e63aca23":"code","2078eef0":"code","989225d3":"code","c359fb8e":"code","d431dbe9":"code","918ffdff":"code","e602d15d":"code","b50ba57f":"code","47ddd8f5":"code","7d002705":"code","e0bba826":"markdown","db9e9557":"markdown","4bfc71ed":"markdown","f0c84dde":"markdown","a2c3fc24":"markdown","9d075ca5":"markdown","0e9109eb":"markdown","253a3d43":"markdown","83acebdd":"markdown","d3091039":"markdown","9b7cfbd1":"markdown","9b64548a":"markdown","c8622a0d":"markdown","723a418f":"markdown","cff80ef0":"markdown","37f455c9":"markdown","22779d76":"markdown","2895244e":"markdown","b39ed68f":"markdown","e4f6f9f0":"markdown","d5260c34":"markdown","0d926024":"markdown","43d00a3c":"markdown","07ddcafc":"markdown","6545a61a":"markdown","29553805":"markdown","e5bfab71":"markdown","32acc38e":"markdown","f022f362":"markdown"},"source":{"2efd9908":"import pandas as pd\nimport numpy as np\nimport gc\nfrom datetime import date, timedelta\nfrom sklearn.preprocessing import StandardScaler\nfrom tqdm import tqdm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","14caea59":"df_train = pd.read_csv('\/kaggle\/input\/ed4595da57d3abdc2e587483d8cf155d\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/ed4595da57d3abdc2e587483d8cf155d\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/ed4595da57d3abdc2e587483d8cf155d\/sample_submission.csv')","bf189f32":"df_train['date'] = pd.to_datetime(df_train['date'])\ndf_train['dayofweek'] = df_train.date.dt.dayofweek.values\ndf_train['year'] = df_train.date.dt.year.values\ndf_train['month'] = df_train.date.dt.month.values\ndf_train['week'] = df_train.date.dt.isocalendar().week.values\ndf_train['days'] = df_train.date.dt.day.values","e2c808f0":"df_train","6ae7b8d8":"def barplot(x, y, title=\"\", subtitle=\"\", xlabel=\"\", ylabel=\"\", annotate=False):\n    fig, ax = plt.subplots(1, 1, figsize=(10,7))\n    colors = [\"#d4dddd\" for _ in range(len(x))]\n    colors[np.argmax(y)] = colors[np.argmin(y)] = \"#244747\"\n\n    ax.bar(x, y,\n           color=colors, width=0.55,\n           edgecolor='black',\n           linewidth=.7)\n\n    for s in ['top', 'right']:\n        ax.spines[s].set_visible(False)\n    # Annotate\n    if annotate == True:\n        xs = np.arange(0, len(x))\n        for i in xs:\n            ax.annotate(f\"{y[i]:.2f}\",\n                        xy = (i, y[i] + 2),\n                        va = 'center', ha = 'center', fontweight = 'light',\n                        color = '#4a4a4a')\n    \n    # Label\n    ax.set_xlabel(xlabel, fontsize = 12, fontweight='medium', fontfamily='serif')\n    ax.set_ylabel(ylabel, fontsize = 12, fontweight='medium', fontfamily='serif')\n    \n    # Title & SubTitle\n    fig.text(0.05, 1, title, fontsize=15, fontweight='bold', fontfamily='serif')\n    fig.text(0.05, 0.96, subtitle, fontsize=12, fontweight='light', fontfamily='serif')","8ba96d5b":"def barhplot(x, y, title=\"\", subtitle=\"\", xlabel=\"\", ylabel=\"\", annotate=False):\n    fig, ax = plt.subplots(1, 1, figsize=(10,7))\n    colors = [\"#d4dddd\" for _ in range(len(x))]\n    colors[np.argmax(y)] = colors[np.argmin(y)] = \"#244747\"\n\n    ax.barh(x, y,\n           color=colors,\n           edgecolor='black',\n           linewidth=.7)\n\n    for s in ['top', 'right']:\n        ax.spines[s].set_visible(False)\n    # Annotate\n    if annotate == True:\n        xs = np.arange(0, len(x))\n        for i in xs:\n            ax.annotate(f\"{y[i]:.2f}\",\n                        xy = (i, y[i] + 2),\n                        va = 'center', ha = 'center', fontweight = 'light',\n                        color = '#4a4a4a')\n    \n    # Label\n    ax.set_xlabel(xlabel, fontsize = 12, fontweight='medium', fontfamily='serif')\n    ax.set_ylabel(ylabel, fontsize = 12, fontweight='medium', fontfamily='serif')\n    \n    # Title & SubTitle\n    fig.text(0.05, 1, title, fontsize=15, fontweight='bold', fontfamily='serif')\n    fig.text(0.05, 0.96, subtitle, fontsize=12, fontweight='light', fontfamily='serif')\n    return ax","2f7daa97":"stores = df_train.store.unique()\nitems = df_train.item.unique()","750259fa":"plot_data = df_train.groupby('store').agg({'sales':'mean'})\nbarplot(plot_data.index, plot_data['sales'], \n        title='Mean Sales Per Store', subtitle='Period: 2013-01-01 ~ 2016-12-31', \n        xlabel='Store', ylabel='mean_sales', annotate=True\n       )","38460de7":"df_weekend = df_train[df_train.dayofweek.isin([5,6])]\ndf_weekday = df_train[~df_train.dayofweek.isin([5,6])]\n\nplot_data_1 = df_weekend.groupby('store').agg({'sales':'mean'})\nplot_data_2 = df_weekday.groupby('store').agg({'sales':'mean'})\n\nplot_data_1['weekday_sales'] = plot_data_2.sales.values\n\nfig, ax = plt.subplots(1,1, figsize=(10,7))\n\nwidth = 0.3\n\nxs = np.arange(0, plot_data_1.shape[0])\nax.bar(xs-width \/ 2, plot_data_1.sales,\n       color = '#FF5733',\n       linewidth = 1,\n       edgecolor = 'black',\n       width = width,\n       label = 'weekend'\n      )\nax.bar(xs+width \/ 2, plot_data_1.weekday_sales,\n       color = '#33DBFF',\n       linewidth = 1,\n       edgecolor = 'black',\n       width = width,\n       label = 'weekday'\n      )\n\nfor i in xs:\n    ax.annotate(f\"{plot_data_1.sales[i] - plot_data_1.weekday_sales[i]:.1f}\",\n                xy=(i + width\/2, plot_data_1.weekday_sales[i] + (plot_data_1.sales[i] - plot_data_1.weekday_sales[i]) \/ 2),\n               )\nfor s in ['top', 'right']:\n    ax.spines[s].set_visible(False)\nax.set_title('Mean sales of weekend and weekday', fontsize=15, fontweight='bold', fontfamily='serif')\nax.set_xticks(xs)\nax.set_xticklabels(plot_data_1.index, fontsize=12)\n\nax.legend(fontsize=10)","7d08c5ea":"plot_data = df_train.groupby(['store', 'item', 'dayofweek']).agg({'sales':'mean'}).reset_index()","a9b05b1f":"def random_pair_dow_plot(store, item):\n    fig, ax = plt.subplots(2, 5, figsize=(20,7))\n    fig.tight_layout(pad=3)\n    for i in range(2):\n        for j in range(5):\n            plot = plot_data[(plot_data.store == store[5*i + j]) & (plot_data.item == item[5*i + j])]\n            x = plot.dayofweek.values\n            y = plot.sales.values\n            colors = [\"#d4dddd\" for _ in range(len(x))]\n            colors[np.argmax(y)] = colors[np.argmin(y)] = \"#244747\"\n            ax[i][j].bar(x, y,\n                   color=colors, width=0.55,\n                   edgecolor='black',\n                   linewidth=.7)\n\n            for s in ['top', 'right']:\n                ax[i][j].spines[s].set_visible(False)\n    \n            # Label\n            ax[i][j].set_xlabel('dow', fontsize = 12, fontweight='medium', fontfamily='serif')\n            ax[i][j].set_ylabel('mean sales', fontsize = 12, fontweight='medium', fontfamily='serif')\n            ax[i][j].set_title(f'store {store[5*i + j]} & item {item[5*i + j]} pair')","3c008064":"rand_item = np.random.choice(items, 10, replace=False)\nrandom_pair_dow_plot(stores, rand_item)","68f882d8":"plot_data = df_train.groupby(['store','week']).agg({'sales':'sum'})","86a912c7":"fig, ax = plt.subplots(2, 5, figsize=(30,7))\nfig.tight_layout(pad=3.0)\nfor i in range(2):\n    for j in range(5):\n        x = plot_data.loc[stores[5*i + j]].index\n        y = plot_data.loc[stores[5*i + j]].sales.values\n        ax[i][j].plot(x, y, alpha = 0.7)\n        ax[i][j].ticklabel_format(style='plain', axis='y')\n        for s in ['top','right']:\n             ax[i][j].spines[s].set_visible(False)\n        ax[i][j].set_title(f'{stores[5*i + j]}\\'s Weekly sales')","cede6da8":"plot_data = df_train.groupby(['store','year']).agg({'sales':'sum'}).reset_index()","a18912f0":"fig, ax = plt.subplots(1, 1, figsize=(10,7))\nax.ticklabel_format(style='plain', axis='y')\nax = sns.barplot(ax=ax, x='store', y='sales', hue='year', data=plot_data, edgecolor='black', linewidth=0.7, palette='ch:.25')\n\nfor s in ['top','right']:\n    ax.spines[s].set_visible(False)\nax.set_title('Total Yearly Sales')","66e253d4":"plot_data = df_train.groupby(['store','month']).agg({'sales':'sum'})","1513c26e":"fig, ax = plt.subplots(1, 1, figsize=(10,7))\n\nfor str in plot_data.index.get_level_values(0).unique():\n    x = plot_data.loc[str].index\n    y = plot_data.loc[str].sales.values\n    ax.plot(x, y, label=str, marker='',alpha=.7)\n\nax.set_xticks(np.arange(1,13))\n\nfor s in ['top','right']:\n    ax.spines[s].set_visible(False)\nax.grid(axis='y')\nax.legend()\nax.set_title('Total Monthly Sales', fontsize=15, fontfamily='serif')","e63aca23":"plot_data = df_train.groupby(['store','year', 'month']).agg({'sales':'sum'}).reset_index()","2078eef0":"fig, ax = plt.subplots(2, 5, figsize=(30,7))\nfig.tight_layout(pad=3.0)\nfor i in range(2):\n    for j in range(5):\n        x = sns.barplot(ax=ax[i][j], x='month', y='sales', hue='year', data=plot_data[plot_data.store == stores[5*i + j]], edgecolor='black', linewidth=0.7, palette='ch:.25')\n        x.ticklabel_format(style='plain', axis='y')\n        for s in ['top','right']:\n            x.spines[s].set_visible(False)\n        x.set_title(f'{stores[5*i + j]}')","989225d3":"item_mean = df_train.groupby('item').agg({\"sales\":\"mean\"})","c359fb8e":"barhplot(item_mean.index, item_mean.sales.values, \n         title=\"Mean Sales per Item\", subtitle=\"Period: 2013-01-01 ~ 2016-12-31\", \n         xlabel=\"Mean sales\", ylabel=\"Item\", annotate=False\n)","d431dbe9":"plot_data = df_train.groupby(['item', 'month']).agg({\"sales\":\"sum\"})","918ffdff":"def item_plot(th):\n    fig, ax = plt.subplots(2, 5, figsize=(30,7))\n    fig.tight_layout(pad=3.0)\n    for i in range(2):\n        for j in range(5):\n            x = plot_data.loc[5*(i + th) + j + 1].index\n            y = plot_data.loc[5*(i + th) + j + 1].sales.values\n            ax[i][j].plot(x, y)\n            ax[i][j].ticklabel_format(style='plain', axis='y')\n            for s in ['top','right']:\n                ax[i][j].spines[s].set_visible(False)\n            ax[i][j].set_title(f'Item {5*(i + th) + j + 1} monthly total sales')","e602d15d":"for i in range(0,10,2):\n    item_plot(i)","b50ba57f":"plot_data = df_train.groupby(['item', 'year', 'month']).agg({\"sales\":\"sum\"}).reset_index()","47ddd8f5":"def item_plot(th):\n    fig, ax = plt.subplots(2, 5, figsize=(30,7))\n    fig.tight_layout(pad=3.0)\n    for i in range(2):\n        for j in range(5):\n            x = sns.barplot(ax = ax[i][j], x = 'month', y = 'sales', hue = 'year', \n                            data = plot_data[plot_data.item == (5 * (i+th) + j + 1)], \n                            linewidth=.7, edgecolor='black', palette='ch:.25')\n            x.ticklabel_format(style='plain', axis='y')\n            for s in ['top','right']:\n                x.spines[s].set_visible(False)\n            x.set_title(f'{5*(i+th) + j + 1}')","7d002705":"for i in range(0, 10, 2):\n    item_plot(i)","e0bba826":"## 1.3.Yearly","db9e9557":"store, item\uc5d0 \uad00\ud55c \ucd94\uac00\uc801\uc778 \uc815\ubcf4\uac00 \uc5c6\ub2e4. ex) \uce74\ud14c\uace0\ub9ac, \uac00\uaca9\n\n\uac01\uac01\uc5d0 \ub300\ud55c \ubd84\uc11d\ubcf4\ub2e4\ub294 \uc2dc\uac04\uc758 \ud750\ub984\uc5d0 \ub530\ub978 sales \ubcc0\ud654\uc5d0 \uc9d1\uc911\ud558\uba74 \ub420 \uac83 \uac19\ub2e4.","4bfc71ed":"## 2.2. Monthly","f0c84dde":"\ubaa8\ub4e0 \uc810\ud3ec\uc5d0\uc11c \ub9e4\ub144 \uc804\uccb4 \ud310\ub9e4\ub7c9\uc774 \uc99d\uac00\ud55c\ub2e4.\n- 2017\ub144\uc5d0\ub3c4 \uc99d\uac00\ud560 \uac70\ub77c \uc608\uce21 \uac00\ub2a5\ud558\ub2e4.","a2c3fc24":"\ubaa8\ub4e0 \uc810\ud3ec\uc5d0\uc11c \uc8fc\ub9d0\uacfc \ud3c9\uc77c \ud3c9\uade0 \ud310\ub9e4\ub7c9\uc774 \uc57d 10\uac1c\uc815\ub3c4 \ucc28\uc774\uac00 \ub09c\ub2e4. \uc9c1\uad00\uc801\uc73c\ub85c\ub3c4 \uc774\ud574\uac00 \ub41c\ub2e4.","9d075ca5":"\uc804\uccb4\uc801\uc778 \ubaa8\uc591\uc740 28~30\uc8fc\ucc28\uc5d0 \ud53c\ud06c, \uc804\ud6c4\ub85c \uc99d\/\uac10 \ud558\ub294 \ubaa8\uc591\uc774\ub2e4. \uc911\uac04\uc911\uac04\uc5d0 \uc815\uccb4\uae30?\uac00 \uc788\ub2e4.\n- \ubaa8\uc591\uc774 month\uac00 \ubc14\ub014 \ub54c(4,5\uc8fc\uac00 \uc9c0\ub0a0 \ub54c)\ub9c8\ub2e4 \uc99d\uac00\uac00 \ud06c\uac8c \uc788\ub294 \uac83 \uac19\ub2e4. \uadf8\ub9ac\uace0 \uac19\uc740 month\uc5d0\uc11c\ub294 \ud310\ub9e4\ub7c9\uc774 \ube44\uc2b7\ud55c? \ub290\ub08c\uc778 \uac83 \uac19\ub2e4.","0e9109eb":"store\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c year\uac00 \uc99d\uac00\ud560\uc218\ub85d \ud310\ub9e4\ub7c9\uc774 \uc99d\uac00\ud558\ub294 \ubaa8\uc2b5.","253a3d43":"### 1.3.1. Total Yearly Sales","83acebdd":"### 2.2.1. Total Monthly Sales Per Item","d3091039":"# 1. About Store","9b7cfbd1":"### 1.2.3. Total Sales Per Week","9b64548a":"\ubaa8\ub4e0 \uc810\ud3ec\uc758 \ubaa8\ub4e0 month\uac00 year\uc5d0 \ub530\ub77c \uc804\uccb4 \ud310\ub9e4\ub7c9\uc774 \uc99d\uac00\ud55c\ub2e4. \uc2a4\ucf00\uc77c \ucc28\uc774\ub9cc \uc788\uc744 \ubfd0 \ubaa8\ub450 \ub3d9\uc77c\ud55c \ubaa8\uc2b5.","c8622a0d":"# Plot Functions","723a418f":"store\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c item\uc758 \uc815\ubcf4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc720\uc758\ubbf8\ud574 \ubcf4\uc778\ub2e4.","cff80ef0":"### 1.2.2. Average Sales Per Dayofweek","37f455c9":"### 1.2.1. Weekday VS Weekend","22779d76":"\uc704\uc758 store \ub370\uc774\ud130\ub97c \ubcf4\uba74 \ubaa8\ub4e0 \uc810\ud3ec\uac00 weekly, monthly, yearly\uc5d0\uc11c \ub3d9\uc77c\ud55c \uacbd\ud5a5\uc744 \ubcf4\uc778\ub2e4. \uadf8\ub798\uc11c item\ub3c4 \uadf8\ub7f4\uae4c \uc2f6\uc5b4\uc11c \uc804\ubd80 plot\uc744 \ucc0d\uc5b4\ubd24\ub2e4.\n\nitem\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c 7\uc6d4\uc5d0 \ud53c\ud06c, \uc804\ud6c4\ub85c \uc99d\/\uac10, 12\uc6d4, 1\uc6d4, 2\uc6d4\uc5d0 \ucd5c\uc18c \uc989 store\uc640 \uac19\uc740 \ubaa8\uc2b5\uc744 \ub760\uace0 \uc788\ub2e4.","2895244e":"### 1.4.2. Total Monthly Sales Per Store and Year","b39ed68f":"### 2.2.2. Total Monthly Sales Per Item and Year","e4f6f9f0":"**Weekly**\uc5d0\uc11c \ubd24\ub358 \uac83 \ucc98\ub7fc, 7\uc6d4\uc5d0 \ud53c\ud06c, \uc804\ud6c4\ub85c \uc99d\/\uac10\ud558\ub294 \ubaa8\uc2b5\uc774\ub2e4.\n\n\uc810\ud3ec\ub294 \ucd1d 10\uac1c\uc778\ub370, line\uc740 8\uac1c\ub2e4. I\uc640 G, D\uc640 F\uac00 \uacb9\uccd0\uc838\uc11c \uadf8\ub807\ub2e4.\n\n\ubaa8\ub4e0 \uc810\ud3ec\uc5d0 \ub300\ud574 12\uc6d4, 1\uc6d4, 2\uc6d4\uc740 \uc555\ub3c4\uc801\uc73c\ub85c \ub0ae\uc740 \uc218\uce58\ub97c \uae30\ub85d\ud558\uace0 \uc788\ub2e4.","d5260c34":"# 2. About Item","0d926024":"## 2.1. Average Sales per Item","43d00a3c":"\uc810\ud3ec\ubcc4 \ud3c9\uade0 \ud310\ub9e4\ub7c9\uc744 \ubcf4\uba74, **TOP2**\uc640 **BOTTOM3** \uac04\uc758 \ucc28\uc774\ub294 \uaf64\ub098 \ucee4\ubcf4\uc778\ub2e4.\n\n- store\uc758 \uc815\ubcf4\ub97c \uc368\uc57c\ud560\uae4c \uad81\uae08\ud574\uc11c \ucc0d\uc5b4\ubcf8\uac74\ub370, \uc720\uc758\ubbf8\ud574 \ubcf4\uc5ec\uc11c \ubaa8\ub378\uc5d0 feature\ub85c \uc0ac\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\ub2e4.","07ddcafc":"random\ud55c store-item pair\uc758 dayofweek(Mon = 0, ... , Sun = 6)\ubcc4 \ud3c9\uade0 \ud310\ub9e4\ub7c9\uc774\ub2e4.\n\n\uc8fc\ub9d0(5,6)\uc774 \ub192\uc740 \uac74 \ub2f9\uc5f0\ud558\uc9c0\ub9cc \uc6d4\uc694\uc77c\uc774 \uac00\uc7a5 \uc801\uace0, \uc77c\uc694\uc77c\uc774 \uac00\uc7a5 \ub9ce\uc740 \ubaa8\uc591\uc774 \ub450\ub4dc\ub7ec\uc9c4\ub2e4.\n- \uc6d4 < (\ud654, \uc218) < \ubaa9 < \uae08 < \ud1a0 < \uc77c \uc774\ub7f0 \ub290\ub08c?","6545a61a":"## 1.4. Monthly","29553805":"\uba3c\uc800 \uc0c1\uc810 \uc911\uc2ec\uc73c\ub85c \ubd84\uc11d\ud574\ubcf4\uc790.","e5bfab71":"## 1.2. Weekly","32acc38e":"## 1.1. Average Sales Per Store","f022f362":"### 1.4.1 Total Monthly Sales Per Store"}}