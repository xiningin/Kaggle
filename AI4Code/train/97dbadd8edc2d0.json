{"cell_type":{"8e8cb856":"code","3f918919":"code","09769d65":"code","0e05a3d9":"code","d58db046":"code","6976a74b":"code","dcce7af1":"code","dcb1e982":"code","9d9db758":"code","4dfed6e9":"code","5f725d94":"code","f15a97b8":"code","12330075":"code","9bbae53c":"code","01cc29bd":"code","237cf98c":"code","65ce4e78":"code","25eeb7f5":"code","699225b4":"code","20ae67ae":"code","1a5dcae4":"code","44cb262b":"code","9fd949ac":"code","219cf340":"code","fd7014ac":"code","3339171a":"code","6447d2e0":"code","b3488589":"code","6d661fd1":"code","d204b739":"markdown"},"source":{"8e8cb856":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n%matplotlib inline","3f918919":"df_pi=pd.read_csv('..\/input\/PimaIndians.csv')","09769d65":"df_pi.head(3)","0e05a3d9":"df_pi.describe()","d58db046":"df_pi.info()","6976a74b":"#converting test column which is categorical to numerical negatif=0 ,and positif=1\ndf_pi['test'].replace(['negatif','positif'],[0,1],inplace=True)","dcce7af1":"df_pi.head(3)","dcb1e982":"plt.figure(figsize=(12,6))\nsb.heatmap(df_pi[df_pi.columns[0:]].corr(),annot=True)\n#As, we can see Glucose level and age are two main factors that are cooreralted with diabetes in this case ","9d9db758":"sb.jointplot(x='test',y='age',data=df_pi)","4dfed6e9":"sb.barplot(x='test',y='glucose',data=df_pi)\n#mean glucose level of people not having diabetes is around 110 and  people having diabetes is around 140","5f725d94":"sb.barplot(x='test',y='age',data=df_pi)\n#mean age level of people not having diabetes is around 28 and  people having diabetes is around 35","f15a97b8":"df_pi.columns","12330075":"#Let's do Feature scaling on the entire data set\nfrom sklearn.preprocessing import StandardScaler\nstd_scaler = StandardScaler()\nX=df_pi[['pregnant', 'glucose', 'diastolic', 'triceps', 'insulin', 'bmi','diabetes', 'age']]\ny=df_pi['test']           \nstd_scaler.fit(X)\nscaled_X=std_scaler.transform(X)\nfinal_X=pd.DataFrame(scaled_X,columns=['pregnant', 'glucose', 'diastolic', 'triceps', 'insulin', 'bmi','diabetes', 'age'])","9bbae53c":"final_X.head(3)","01cc29bd":"#NON PCA Approach\n# Let's divide the data set into training and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(final_X,y,test_size=0.30)","237cf98c":"#try SVM\nfrom sklearn.svm import SVC\nmodel = SVC()\nmodel.kernel='rbf'\nmodel.C=0.25\nmodel.fit(X_train,y_train)","65ce4e78":"#predict\npredictions = model.predict(X_test)","25eeb7f5":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,predictions))\n","699225b4":"# Try Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nlgrm=LogisticRegression()\nlgrm.fit(X_train,y_train)\npreds=lgrm.predict(X_test)\nprint(classification_report(y_test,preds))\n","20ae67ae":"# Try KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=11)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)","1a5dcae4":"print(classification_report(y_test,pred))\n","44cb262b":"#Try using PCA \nfrom sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(scaled_X)","9fd949ac":"X_pca = pca.transform(scaled_X)","219cf340":"X_pca.shape","fd7014ac":"scaled_X.shape","3339171a":"final_X_pca=pd.DataFrame(X_pca,columns=['FC 1', 'FC 2'])\nX_train, X_test, y_train, y_test = train_test_split(final_X_pca,y,test_size=0.30)","6447d2e0":"#SVM +PCA\nmodel = SVC()\nmodel = SVC()\nmodel.kernel='rbf'\nmodel.C=0.25\nmodel.fit(X_train,y_train)","b3488589":"#predict\npredictions = model.predict(X_test)","6d661fd1":"print(confusion_matrix(y_test,predictions))\nprint(classification_report(y_test,predictions))\n","d204b739":"## Work in Progress... ##"}}