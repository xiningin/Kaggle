{"cell_type":{"d5f48bb5":"code","416609a2":"code","19eadfbf":"code","334107e7":"code","2c0a89cc":"code","8d17048a":"code","79b8def3":"code","f1fa199f":"code","57488f22":"code","38bfee4c":"code","360db30c":"code","cd4e6b14":"markdown","97b255c9":"markdown","4a5ba438":"markdown","794ec02d":"markdown","9b614fcc":"markdown","dd795898":"markdown","0b10150c":"markdown","77ca25f0":"markdown","0730e272":"markdown","61819012":"markdown","ef49dc4b":"markdown","dce21692":"markdown","f26bf558":"markdown","f894a930":"markdown","0c58e005":"markdown","b589b1d7":"markdown","6b2ffeb9":"markdown","e134c12f":"markdown"},"source":{"d5f48bb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nimport string\nimport math\nimport pandas as pd\nfrom nltk.cluster import cosine_distance\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import wordnet\nimport category_encoders as ce\nimport pickle\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","416609a2":"data = pd.read_csv('\/kaggle\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')\nprint('Total data')\nprint(data.shape)\nprint('Real jobs')\nprint(data[data['fraudulent']==0].shape)\nprint('Fake jobs')\nprint(data[data['fraudulent']==1].shape)","19eadfbf":"train_set = pd.read_csv('\/kaggle\/input\/train-and-test-for-fake-jobs\/train.csv')\n\ntest_set = pd.read_csv('\/kaggle\/input\/train-and-test-for-fake-jobs\/test.csv')","334107e7":"def missing_values(data):\n        data['location'].fillna('no info', inplace = True)\n        withoutcomma = data[~data['location'].str.contains(\",\")].index\n        withcomma = data[data['location'].str.contains(\",\")].index\n\n        for i in withcomma:\n            data.loc[i, 'country'] = data.loc[i,'location'].split(',')[0].strip()\n\n        for i in withoutcomma:\n            data.loc[i, 'country'] = data.loc[i,'location'].strip()\n\n        \"\"\"2.salary range\"\"\"\n\n        data['salary_range'].fillna('0-0', inplace = True)\n\n        for i in range(0, data.shape[0]):\n            str = data.loc[i, 'salary_range']\n            if re.search(r'[a-z,A-Z]',str):\n                data.loc[i, 'salary_range']='0-0'\n\n            if(data.loc[i, 'salary_range'].find(\"-\") != -1):\n                data.loc[i, 'minimum_salary'] = data.loc[i,'salary_range'].split('-')[0]\n                data.loc[i,'maximum_salary'] = data.loc[i,'salary_range'].split('-')[1]\n            else:\n                data.loc[i, 'minimum_salary'] = data.loc[i, 'salary_range']\n                data.loc[i, 'maximum_salary'] = data.loc[i, 'salary_range']\n\n\n        \"\"\"3. All other categorical columns and remaining numeric columns.\"\"\"\n\n        columns = data.columns\n        for i in columns:\n            if(data[i].isna().any()):\n                if(data[i].dtypes == 'object'):\n                    data[i].fillna('no info', inplace = True)\n                    data[i] = data[i].str.lower()\n\n                else:\n                    data[i].fillna(0, inplace = True)\n\n        data.drop(['salary_range', 'location'], axis = 1, inplace = True)\n        return data","2c0a89cc":"stop_words = set(stopwords.words('english'))\n\ndef texthandling(data):\n    for i in range(0, data.shape[0]):\n\n        data.loc[i, 'company_profile'] = removeuncessary(data.loc[i,'company_profile'])\n        data.loc[i, 'description'] = removeuncessary(data.loc[i,'description'])\n        data.loc[i, 'requirements'] = removeuncessary(data.loc[i,'requirements'])\n        data.loc[i, 'benefits'] = removeuncessary(data.loc[i,'benefits'])\n        data.loc[i, 'title'] = removeuncessary(data.loc[i, 'title'])\n        data.loc[i, 'department'] = removeuncessary(data.loc[i,'department'])\n        data.loc[i, 'industry'] = removeuncessary(data.loc[i,'industry'])\n        data.loc[i, 'function'] = removeuncessary(data.loc[i,'function'])\n\n        words = str(data.loc[i, 'company_profile'])\n        if(words == 'no info'):\n            data.loc[i, 'company_profile_word_count'] = 0\n        else:\n            data.loc[i, 'company_profile_word_count'] = len(words.split())\n\n        words = str(data.loc[i, 'benefits'])\n        if(words == 'no info'):\n            data.loc[i, 'benefits_word_count'] = 0\n        else:\n            data.loc[i, 'benefits_word_count'] = len(words.split())\n\n        data.loc[i, 'title_and_job_similarity'] = synonym_relation(data.loc[i, 'title'], data.loc[i,'description'])\n\n        data.loc[i, 'title_and_req_similarity'] = synonym_relation(data.loc[i, 'title'], data.loc[i,'requirements'])\n\n        data.loc[i, 'profile_and_job_similarity'] = synonym_relation(data.loc[i, 'company_profile'], data.loc[i,'description'])\n\n        data.loc[i, 'profiel_and_req_similarity'] = synonym_relation(data.loc[i, 'company_profile'], data.loc[i,'requirements'])\n\n        data.loc[i,'title_and_department_syn_similarity'] = synonym_relation(data.loc[i, 'title'], data.loc[i, 'department'])\n\n        data.loc[i,'title_and_industry_syn_similarity'] = synonym_relation(data.loc[i, 'title'],data.loc[i, 'industry'])\n\n        data.loc[i,'title_and_function_syn_similarity'] = synonym_relation(data.loc[i, 'title'], data.loc[i, 'function'])\n\n        data.loc[i,'industry_and_department_syn_similarity'] = synonym_relation( data.loc[i, 'industry'], data.loc[i, 'department'])\n\n        data.loc[i,'function_and_department_syn_similarity'] = synonym_relation( data.loc[i, 'function'], data.loc[i, 'department'])\n              \n        data.loc[i,'industry_and_function_syn_similarity'] =synonym_relation(data.loc[i, 'industry'], data.loc[i, 'function'])\n\n    for i in ['title_and_job_similarity', 'title_and_req_similarity', 'profile_and_job_similarity', 'profiel_and_req_similarity',\n              'title_and_department_syn_similarity','title_and_industry_syn_similarity','title_and_function_syn_similarity',\n              'function_and_department_syn_similarity','industry_and_department_syn_similarity','industry_and_function_syn_similarity']:\n        data[i].fillna(0, inplace = True)\n\n    data.drop(['company_profile', 'benefits', 'description','requirements', 'title', 'department', 'industry', 'function', 'job_id'], axis = 1, inplace = True)\n    return data","8d17048a":"def stopwordsremove(text):\n    word_token = word_tokenize(text)\n    ps = PorterStemmer()\n    filtered = [ps.stem(w.lower())for w in word_token if not w in stop_words]\n    return filtered\n    \ndef removeuncessary(text):\n    text = re.sub('[%s]'%re.escape(string.punctuation), '', str(text))\n    text = re.sub('\\w*\\d\\w*', '', str(text))\n    text = re.sub('[^a-zA-Z ]+', ' ', str(text))\n\n    return text\n   \n","79b8def3":"def synonym_relation(text1, text2):\n    if(text1 == 'no info' or text2 == 'no info'):\n        return 0\n    else:\n        text1 = stopwordsremove(text1)\n        text2 = stopwordsremove(text2)\n        syn_set = set()\n        count  = 0\n        if(len(text1) == 0 or len(text2) == 0):\n            return 0\n        if(len(text1) < len(text2)):\n            for word in text2:\n                for syn in wordnet.synsets(word):\n                    for l in syn.lemmas():\n                        syn_set.add(l.name())\n\n            for word in text1:\n                if word in syn_set:\n                        count += 1\n            return (count \/ len(text1))\n        else:\n            for word in text1:\n                for syn in wordnet.synsets(word):\n                    for l in syn.lemmas():\n                        syn_set.add(l.name())\n\n            for word in text2:\n                if word in syn_set:\n                    count += 1\n            return (count \/ len(text2))","f1fa199f":"def categorical_cols_train(data):\n        encoder = ce.BinaryEncoder(cols = ['employment_type','required_experience', 'required_education', 'country'])\n        newdata = encoder.fit_transform(data)\n        pickle.dump( encoder, open( \"encoder.p\", \"wb\" ) )\n        return newdata\n\ndef categorical_cols_test(data):\n        encoder = pickle.load( open( \"encoder.p\", \"rb\" ) )\n        newdata = encoder.transform(data)\n        return newdata","57488f22":"def train_and_save_model(data):\n        X_train = data.drop('fraudulent', axis = 1)\n        y_train = data['fraudulent']\n\n        sc = StandardScaler()\n        X_train = sc.fit_transform(X_train)\n        pickle.dump( sc, open( \"scaler.p\", \"wb\" ))\n\n        from sklearn.ensemble import RandomForestClassifier\n        model = RandomForestClassifier(n_estimators = 100 ,criterion = 'entropy',random_state = 1)\n\n        model.fit(X_train, y_train)\n\n        filename = 'finalized_model.p'\n        pickle.dump(model, open(filename, 'wb'))\n        \n\ndef load_model_predict(data):\n        X_test = data.drop('fraudulent',axis = 1)\n        y_test = data['fraudulent']\n\n        scaler = pickle.load( open( \"scaler.p\", \"rb\" ) )\n        X_test = scaler.transform(X_test)\n\n        filename = 'finalized_model.p'\n        model = pickle.load(open(filename, 'rb'))\n\n        y_pred = model.predict(X_test)\n        cm = confusion_matrix(y_test, y_pred)\n        print(\"\\n\"+\"SCORES\")\n        print(\"confusion matrix\")\n        print(cm)\n        print('F1-Score'+' = '+str(round(f1_score(y_test, y_pred),4)))\n        print('Precision'+' = '+str(round(precision_score(y_test, y_pred),4)))\n        print('Recall'+' = '+str(round(recall_score(y_test, y_pred),4)))\n        print('Accuracy'+' = '+str(round(accuracy_score(y_test,y_pred),4)))\n","38bfee4c":"train_set = missing_values(train_set)\ntrain_set = texthandling(train_set)\ntrain_set = categorical_cols_train(train_set)\ntrain_and_save_model(train_set)","360db30c":"test_set = missing_values(test_set)\ntest_set = texthandling(test_set)\ntest_set = categorical_cols_test(test_set)\nload_model_predict(test_set)","cd4e6b14":"I have divided missing values into three subsets.\n1. Location Column\n2. Salary Range\n3. Rest of the columns\n\nLocation columns contains values like **(country,state,location)** in which we will focus only on country part so we split with **,** and store only the 1st part(country). For the Salary range column data looks like **(minsal-maxsal)** so we convert it into two new columns minimum saary and maximum salary. For the rest of columns just replace missing values with **no-info** and **0** for ctegorical and numeric columns repectively.\n\n**Just expand the below code to check how i have written code.**","97b255c9":"Before starting the whole coding process I have split the data into two datasets **Train with 97% split** and **Test with 3% split**. So in the training set we will have 17344 entires and in the test set it will contain 536 entries. The model will have enough data to train and test. I have already shuffled and split the data for the [project in github](https:\/\/github.com\/saketh97\/FakeJobPrediction). So i will use the same datsets.","4a5ba438":"### Missing Values","794ec02d":"Please also check the project made on the same dataset but utilizing pipeline concepts in addition. [link for github repo](https:\/\/github.com\/saketh97\/FakeJobPrediction). **Also if you like this please upvote and follow for interesting other notebooks.**","9b614fcc":"Similar to training we need to read the data and then handle the data(missing values, Text data Handling, categorical encoding). After Handling the data and scaling them we will make use of the saved model to test the data and save the predicted result as a csv. Here for testing process we use the saved categorical encoder and saved scaler instead of newly creating. Also in the end it will display the metrics used for rating.\n","dd795898":"### Categorical Encoding","0b10150c":"First we read the data and then pass it to Data handling process where the missing values, Text data Handling takes place and finally categorical encoding is done for category columns. After Handling the data and scaling then we will utilize Random Forest algorithm to create and train model on the cleaned data. After training the model then we save the model as a pickle file so it can be loaded any time.  ","77ca25f0":"This Data set is Biased towards real job. The dataset contains 17880 entries in which 17014 are real jobs and only 866 are fake jobs. For such biased data just **accuracy** does not matter but also we should consider **Precision,Recall and F1-Score**.","0730e272":"Here we crete and train an encoder for categorical columns to perform binary encoding. Then we save the encoder for testing purpose using picle.","61819012":"### Model  ","ef49dc4b":"### Test Part","dce21692":"Now we have the split datset lets contnue with handling data. This data contains lots of missing values and text contain to be handled.","f26bf558":"### Training Part","f894a930":"### Text Handling","0c58e005":"## Fake job Predcition","b589b1d7":"Here we will try to predict the fake job postings. There are 18 columns like title, department, company profile, job description etc. I will use NLP Techniques to analyse text data and prepare them for prediction model to train. Also in this code i will use **Functions** to define code and call those functions with dataset as parameter(Train or Test). Once the training is complete the model will be saved as a pickle file to load whenever we need to predict. Also as there are categorical columns we will need categorical encoding and scaling so both of them will aslo be trained and saved using pickle.","6b2ffeb9":"For the model I am using Random Forest Classifier. After handling the data we will apply Scaler and save the scaler. Also after creating the model save the model with pickle.","e134c12f":"For columns like title, department, company profile, job description etc for all the categorical I have used NLTK functions like **stop words, Stemming and Word net synset** to find out a similarity factor between columns eg: similarity between job title and job description. Using various combinations I have formed various new columns which represent such kind of similarities. Now all these columns are used in the Random Forest algorithm to find the Fake jobs. With all these steps I have reached precision of 94% and f1-score of 0.80(Max f1-score is 1 so its like 80%).  \n\n**Just expand the below code blocks to check how i have written code.**"}}