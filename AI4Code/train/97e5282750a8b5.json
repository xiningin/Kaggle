{"cell_type":{"06b9b552":"code","a4f56210":"code","d9832916":"code","079f1fb6":"code","f70f239b":"code","3b50db48":"code","36eff550":"code","4d842dd0":"code","0d72b519":"code","501d637c":"code","56a9a386":"code","dad6687b":"code","301f8757":"code","0ef230e2":"markdown","ba8f76dd":"markdown","7300dfea":"markdown","e92b1a21":"markdown","0be68f7d":"markdown","2cb96b20":"markdown"},"source":{"06b9b552":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4f56210":"json_1 = '..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset.json'\njson_2 = '..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset_v2.json'","d9832916":"import json\nimport os \nimport tensorflow as tf\nimport sklearn\nimport seaborn as sbs\nimport sklearn.naive_bayes \nimport sklearn.model_selection\nimport sklearn.metrics","079f1fb6":"import json\n\ndef load_json(jfile):\n    data = []\n    with open(jfile) as f:\n        for line in f.readlines():\n            j = json.loads(line)\n            url, headline, sarcastic = j['article_link'], j['headline'], j['is_sarcastic']\n            data.append([url, headline, sarcastic])\n    return pd.DataFrame(data, columns=['article_link', 'headline', 'is_sarcastic'])\n\nprint(\"\u2705\u2705\u2705 SESSION DONE\")","f70f239b":"df = pd.concat([load_json(json_1), load_json(json_2)])\nsbs.distplot(df.headline.str.len())","3b50db48":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","36eff550":"import tensorflow_hub as hub \nimport tokenization\n\nmodule_url = 'https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/2'\nbert_layer = hub.KerasLayer(module_url, trainable=True)","4d842dd0":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)\n","0d72b519":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence) + [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n\ndef build_model(bert_layer, max_len=512):\n    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    pooled_output, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    net = tf.keras.layers.Dense(64, activation='relu')(clf_output)\n    net = tf.keras.layers.Dropout(0.2)(net)\n    net = tf.keras.layers.Dense(32, activation='relu')(net)\n    net = tf.keras.layers.Dropout(0.2)(net)\n    out = tf.keras.layers.Dense(1, activation='sigmoid')(net)\n    \n    model = tf.keras.models.Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(tf.keras.optimizers.Adam(lr=1e-5), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","501d637c":"max_len = 100\nX_train, X_val, y_train, y_val = sklearn.model_selection.train_test_split(df.headline, df['is_sarcastic'], \n                                                                          test_size=0.1, random_state=0)\nX_train = bert_encode(X_train, tokenizer, max_len=max_len)\nX_val = bert_encode(X_val, tokenizer, max_len=max_len)","56a9a386":"model = build_model(bert_layer, max_len=max_len)\nmodel.summary()","dad6687b":"%%time\ncheckpoint = tf.keras.callbacks.ModelCheckpoint('model.h5', monitor='val_accuracy', save_best_only=True, verbose=1)\nearlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=5, verbose=1)\n\ntrain_history = model.fit(\n    X_train, y_train, \n    validation_split=0.1,\n    epochs=30,\n    callbacks=[checkpoint, earlystopping],\n    batch_size=16,\n    verbose=1\n)","301f8757":"%%time\nmodel.load_weights('model.h5')\ny_preds = model.predict(X_val).round().astype(int)\nprint(\"Validation accuracy: \", sklearn.metrics.accuracy_score(y_val, y_preds))","0ef230e2":"Set the `max len` of vector to 20, since most headlines contain no more than 20 words","ba8f76dd":"Check on [this kernel](https:\/\/www.kaggle.com\/xiu0714\/detect-sarcasm-with-bert-92-accuracy?scriptVersionId=34532422) to find out how to achieve `0.924` accuracy with BERT and only one dataset. ","7300dfea":"Validate the model on `X_val`","e92b1a21":"# BERT ","0be68f7d":"Build model and train","2cb96b20":"Load data and merge them. "}}