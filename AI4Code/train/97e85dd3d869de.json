{"cell_type":{"ee812bdb":"code","5dbba05b":"code","de01a7e1":"code","d28852a2":"code","22260d81":"code","580d0ccb":"code","ff7d7861":"code","0f770853":"code","5644d877":"code","4bc244fe":"code","ba0afcda":"code","e3c97b36":"code","4d50585c":"code","8946cb81":"code","ddb22469":"code","9adc8c21":"code","281afcb8":"code","dcdccd27":"code","33abe76c":"code","7208d390":"code","21222052":"code","bb75fcfc":"code","febb5a83":"code","4b3924c9":"code","ea0b55e4":"code","4c832e3d":"code","4f22dea5":"code","b86a4331":"code","b4ef66ee":"code","300ab99c":"code","4830f239":"code","47e1b651":"code","e58ae97d":"code","4c358624":"code","614c15ba":"code","0bbf8fbe":"code","e3d023d3":"code","6609c19c":"code","bd1088e9":"code","938a5c2b":"code","3651f22c":"code","73abb2f6":"code","93813cf1":"markdown","42394fbd":"markdown","a5dbaf81":"markdown","1cec93a9":"markdown","851a7cee":"markdown","20a59cd4":"markdown","d727b211":"markdown","0e5770c1":"markdown","bde3d858":"markdown","925506dc":"markdown","d37dda08":"markdown","76075438":"markdown","c55761eb":"markdown","a5974672":"markdown","19090b64":"markdown","4049259b":"markdown","8a506cc1":"markdown"},"source":{"ee812bdb":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        import math\nfrom numpy import linalg as LA","5dbba05b":"df = pd.read_csv(\"\/kaggle\/input\/normal\/NormalSample.csv\")\ndf.head(10)","de01a7e1":"#max value of x\ndf.describe()","d28852a2":"from scipy.stats import iqr\ninter_quartile_range = iqr(df.x)\nN = df.x.count()\nbin_width = 2*inter_quartile_range*(pow(N,-1\/3)) #bin width = 2(IQR)N^(-1\/3)\nprint(bin_width)","22260d81":"n = len(df.x)\nmin_x = df.x.min()\nmax_x = df.x.max()\nprint(\"Minimum = \",min_x,\"\\nMaximum = \",max_x)","580d0ccb":"#y = [0.4, 0.6, 0.7, 1.9, 2.4, 6.1, 6.2,7.3]\ndef get_midpoints(dfx,binw):\n    x = dfx\n\n\n    mini = math.floor(x.min())\n    maxi = math.ceil(x.max())\n    \n\n    binw = binw     #Bin width\n\n    midpoints = mini+binw\/2\n\n    no_of_bins = int((maxi-mini)\/binw)\n    print(\"Number of bins =\",no_of_bins)\n    start = mini+binw\/2\n    midps = [start]\n\n    for i in range(0,no_of_bins-1):\n        m = start+binw\n        start = m\n        midps.append(m)\n\n    middf = pd.DataFrame(midps,columns = {\"mi\"}) #We get 100 midpoints and store it in a datframe\n    return middf    #Midpoints","ff7d7861":"def density_estimate(midpoint):\n    m1 = midpoint\n    density = 0\n    for i in df.x:\n        u = (i-m1)\/binw\n        if (u>-0.5 and u<=0.5):\n            density+=1\n    return density\/(n*binw)","0f770853":"def answer(df,binwidth):\n    x = df.x\n    binw = binwidth\n    middf = get_midpoints(df.x,binw)\n    lis = []\n    for m in middf.mi:\n        lis.append(density_estimate(m))\n\n    middf[\"p(mi)\"] = np.array(lis)\n    #plt.step(middf.mi,middf[\"p(mi)\"])\n    return middf","5644d877":"binw = 2\nans_df2 = answer(df,binw)\n\nplt.hist(x=df.x,range=(26,36), bins = 5,color = \"dimgray\") # h = 2\nplt.title(\"Bin Width = 2\")\nplt.grid(axis='y', alpha=0.2)\nplt.savefig(\"h2.png\")\nans_df2","4bc244fe":"binw = 1\nans_df1 = answer(df,binw)\nprint(ans_df1)\nplt.hist(x=df.x,range=(26,36), bins = 10,color = \"dimgray\") # h = 1\nplt.title(\"Bin Width = 1\")\nplt.grid(axis='y', alpha=0.2)\nplt.savefig(\"h1.png\")\nans_df1","ba0afcda":"binw = 0.5\nans_df05 = answer (df,binw)\nprint(\"Co-ordinates of density \\n\",ans_df05)\nplt.hist(x=df.x,range=(26,36), bins = 20,color = 'dimgray') # h = 0.5\nplt.title(\"Bin Width = 0.5\")\nplt.grid(axis='y', alpha=0.2)\nplt.savefig(\"h05.png\")\nans_df05","e3c97b36":"binw = 0.1\nans_df01 = answer (df,binw)\nans_df01\nplt.hist(x=df.x,range=(26,36), bins = 100,color = \"dimgrey\") # h = 2\nplt.title(\"Bin Width = 0.1\")\nplt.grid(axis='y', alpha=0.2)\nplt.savefig(\"h01.png\")\nans_df01","4d50585c":"import seaborn as sns\nplt.boxplot(df.x,vert = False)\nplt.title(\"Boxplot of X\")\nplt.savefig(\"boxplot_x.png\")","8946cb81":"from scipy.stats import iqr\ninter_quartile_range = iqr(df.x)\nq1 = np.percentile(df.x,25)\nq3 = np.percentile(df.x,75)\nl_whisker = q1 - 1.5*inter_quartile_range\nu_whisker = q3 + 1.5*inter_quartile_range\nprint (\"Lower Whisker = \",l_whisker,\"\\nUpper Whisker = \",u_whisker)","ddb22469":"zero = []\nones = []\nfor i in range(0,df.x.count()):\n    if df.group[i] == 0:\n        zero.append(df.x[i])\n    else:\n        ones.append(df.x[i])\nzeros = np.array(zero)\nones = np.array(ones)","9adc8c21":"from scipy.stats import iqr\ninter_quartile_range = iqr(zeros)\nq1 = np.percentile(zeros,25)\nq3 = np.percentile(zeros,75)\nl_whisker = q1 - 1.5*inter_quartile_range\nu_whisker = q3 + 1.5*inter_quartile_range\nprint (\"Lower Whisker = \",l_whisker,\"\\nUpper Whisker = \",u_whisker)","281afcb8":"from scipy.stats import iqr\ninter_quartile_range = iqr(ones)\nq1 = np.percentile(ones,25)\nq3 = np.percentile(ones,75)\nl_whisker = q1 - 1.5*inter_quartile_range\nu_whisker = q3 + 1.5*inter_quartile_range\nprint (\"Lower Whisker = \",l_whisker,\"\\nUpper Whisker = \",u_whisker)","dcdccd27":"plt.boxplot([ones,zero,df.x],widths = 0.4)\nplt.xticks(np.arange(1,4),(\"Ones\",\"Zeros\",\"X\"))\nplt.title(\"BoxPlot For Each Category\")\nplt.savefig(\"CategoryBoxplot.png\")","33abe76c":"df0 = df[df['group']==0]\ndf0.describe()","7208d390":"df1 = df[df['group']==1]\ndf1.describe()","21222052":"fraud_df = pd.read_csv(\"\/kaggle\/input\/fraudknn\/Fraud.csv\")","bb75fcfc":"fraud_df.head()","febb5a83":"num_no_frauds = fraud_df.FRAUD.value_counts()[0]\nnum_of_frauds = fraud_df.FRAUD.value_counts()[1]\ncount = fraud_df.FRAUD.count()","4b3924c9":"fraud_percent = num_of_frauds\/count*100\nprint(round(fraud_percent,4))","ea0b55e4":"fraud_df.columns","4c832e3d":"sns.boxplot(data = fraud_df , x = 'TOTAL_SPEND' , y = 'FRAUD',orient = 'h')\nplt.title(\"Total Spent\")\nplt.savefig(\"TotalSpent.png\")","4f22dea5":"sns.boxplot(data = fraud_df , x = 'NUM_MEMBERS' , y = 'FRAUD',orient = 'h')\nplt.title(\"Number of members covered\")\nplt.savefig(\"Num_members.png\")","b86a4331":"sns.boxplot(data = fraud_df , x = 'MEMBER_DURATION' , y = 'FRAUD', orient = 'h')\nplt.title(\"Member Duration\")\nplt.savefig(\"Mem_duration.png\")","b4ef66ee":"sns.boxplot(data = fraud_df , x = 'OPTOM_PRESC' , y = 'FRAUD' , orient = 'h')\nplt.title(\"Number of optical examinations\")\nplt.savefig(\"Optom_Presc.png\")","300ab99c":"sns.boxplot(data = fraud_df , x = 'DOCTOR_VISITS' , y = 'FRAUD' ,orient = 'h')\nplt.title(\"Number of visits to a doctor  \")\nplt.savefig(\"Doctor_Visit.png\")","4830f239":"sns.boxplot(data = fraud_df , x = 'NUM_CLAIMS' , y = 'FRAUD',orient = 'h')\nplt.title(\"Number of claims made recently \")\nplt.savefig(\"Num_claims.png\")","47e1b651":"fraud_df.head()\n","e58ae97d":"fraud_df = pd.read_csv(\"\/kaggle\/input\/fraudknn\/Fraud.csv\",usecols=[\"TOTAL_SPEND\",\"DOCTOR_VISITS\",\"NUM_CLAIMS\",\"MEMBER_DURATION\",\"OPTOM_PRESC\",\"NUM_MEMBERS\"])","4c358624":"x = np.matrix(fraud_df)","614c15ba":"xtx = x.transpose() * x\nprint(\"t(x) * x = \\n\", xtx)\n\n# Eigenvalue decomposition\nevals, evecs = LA.eigh(xtx)\nprint(\"Eigenvalues of x = \\n\", evals)\nprint(\"Eigenvectors of x = \\n\",evecs)\n\n# Here is the transformation matrix\ntransf = evecs * LA.inv(np.sqrt(np.diagflat(evals)));\nprint(\"Transformation Matrix = \\n\", transf)\n\n# Here is the transformed X\ntransf_x = x * transf;\nprint(\"The Transformed x = \\n\", transf_x)\n","0bbf8fbe":"# Check columns of transformed X\nxtx = transf_x.transpose() * transf_x;\nprint(\"Expect an Identity Matrix = \\n\", xtx)\n\n# Orthonormalize using the orth function \nimport scipy\nfrom scipy import linalg as LA2\n\northx = LA2.orth(x)\nprint(\"The orthonormalize x = \\n\", orthx)\n\n# Check columns of the ORTH function\ncheck = orthx.transpose().dot(orthx)\nprint(\"Also Expect an Identity Matrix = \\n\", check)","e3d023d3":"from sklearn.neighbors import KNeighborsClassifier","6609c19c":"target = pd.read_csv(\"\/kaggle\/input\/fraudknn\/Fraud.csv\",usecols=[\"FRAUD\"])","bd1088e9":"from sklearn import metrics\nknn = KNeighborsClassifier(n_neighbors=5, metric = \"euclidean\")\nknn.fit(transf_x,target)\npredictions = knn.predict(transf_x)\nprint(metrics.accuracy_score(target,predictions))","938a5c2b":"test = [[7500,15,3,127,2,2]] * transf;\ntest","3651f22c":"neighs = knn.kneighbors(test,return_distance=False)\nneighs","73abb2f6":"fraudulent_df = pd.read_csv(\"\/kaggle\/input\/fraudknn\/Fraud.csv\")\nfraudulent_df.iloc[neighs[0][0:]]","93813cf1":"### e)\t(5 points) For the observation which has these input variable values: TOTAL_SPEND = 7500, DOCTOR_VISITS = 15, NUM_CLAIMS = 3, MEMBER_DURATION = 127, OPTOM_PRESC = 2, and NUM_MEMBERS = 2, find its five neighbors.  Please list their input variable values and the target values. Reminder: transform the input observation using the results in c) before finding the neighbors.","42394fbd":"### According to Izenman (1991) method, what is the recommended bin-width for the histogram of x? ","a5dbaf81":"### c)\t(5 points) Draw a boxplot of x (without the group) using the Python boxplot function.  Can you tell if the Python\u2019s boxplot has displayed the 1.5 IQR whiskers correctly?","1cec93a9":"### Use h = 2, minimum = a and maximum = b. List the coordinates of the density estimator.  Paste the histogram drawn using Python or your favorite graphing tools. ","851a7cee":"# ML Assignment 01 : Histograms, Boxplots, kNN","20a59cd4":"### Use h = 0.1, minimum = a and maximum = b. List the coordinates of the density estimator.  Paste the histogram drawn using Python or your favorite graphing tools. ","d727b211":"### What are the minimum and the maximum values of the field x? ","0e5770c1":"### Use in the NormalSample.csv to generate box-plots for answering the following questions.\n\n### a)\t(5 points) What is the five-number summary of x?  What are the values of the 1.5 IQR whiskers?\n","bde3d858":"### b)\t(5 points) Use the BOXPLOT function to produce horizontal box-plots.  For each interval variable, one box-plot for the fraudulent observations, and another box-plot for the non-fraudulent observations.  These two box-plots must appear in the same graph for each interval variable.","925506dc":"### Use h = 0.5, minimum = a and maximum = b. List the coordinates of the density estimator.  Paste the histogram drawn using Python or your favorite graphing tools. ","d37dda08":"### c)\t(10 points) Orthonormalize interval variables and use the resulting variables for the nearest neighbor analysis. Use only the dimensions whose corresponding eigenvalues are greater than one.\n### i.\t(5 points) How many dimensions are used?\n### ii.\t(5 points) Please provide the transformation matrix?  You must provide proof that the resulting variables are actually orthonormal.\n","76075438":"### b)\t5 points) What is the five-number summary of x for each category of the group? What are the values of the 1.5 IQR whiskers for each category of the group?","c55761eb":"### a)\t(5 points) What percent of investigations are found to be fraudulent?  Please give your answer up to 4 decimal places.","a5974672":"### Write a Python program to calculate the density estimator of a histogram.  Use the field x in the NormalSample.csv file. ","19090b64":"### 10 points) Use the NearestNeighbors module to execute the Nearest Neighbors algorithm using exactly five neighbors and the resulting variables you have chosen in c).  The KNeighborsClassifier module has a score function.\n\n### i.\t(5 points) Run the score function, provide the function return value\n### ii.\t(5 points) Explain the meaning of the score function return value.\n","4049259b":"### Use h = 2, minimum = a and maximum = b. List the coordinates of the density estimator.  Paste the histogram drawn using Python or your favorite graphing tools. ","8a506cc1":"### Use h = 1, minimum = a and maximum = b. List the coordinates of the density estimator.  Paste the histogram drawn using Python or your favorite graphing tools. "}}