{"cell_type":{"2e385df3":"code","dfa17239":"code","37f2d099":"code","428a8891":"code","abe8120e":"code","dd80383e":"code","206e44a3":"code","f2bc2158":"code","6b806f56":"markdown"},"source":{"2e385df3":"import tensorflow as tf  # deep learning library. Tensors are just multi-dimensional arrays\n\nmnist = tf.keras.datasets.mnist  # mnist is a dataset of 28x28 images of handwritten digits and their labels\n(x_train, y_train),(x_test, y_test) = mnist.load_data()  # unpacks images to x_train\/x_test and labels to y_train\/y_test\n\nx_train = tf.keras.utils.normalize(x_train, axis=1)  # scales data between 0 and 1\nx_test = tf.keras.utils.normalize(x_test, axis=1)  # scales data between 0 and 1\n\nmodel = tf.keras.models.Sequential()  # a basic feed-forward model\nmodel.add(tf.keras.layers.Flatten())  # takes our 28x28 and makes it 1x784\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))  # a simple fully-connected layer, 128 units, relu activation\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))  # a simple fully-connected layer, 128 units, relu activation\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))  # our output layer. 10 units for 10 classes. Softmax for probability distribution\n\nmodel.compile(optimizer='adam',  # Good default optimizer to start with\n              loss='sparse_categorical_crossentropy',  # how will we calculate our \"error.\" Neural network aims to minimize loss.\n              metrics=['accuracy'])  # what to track\n\nmodel.fit(x_train, y_train, epochs=3)  # train the model\n\nval_loss, val_acc = model.evaluate(x_test, y_test)  # evaluate the out of sample data with model\nprint(val_loss)  # model's loss (error)\nprint(val_acc)  # model's accuracy","dfa17239":"model.save('epic_num_reader.model')","37f2d099":"new_model = tf.keras.models.load_model('epic_num_reader.model')","428a8891":"predictions = new_model.predict(x_test)\nprint(predictions)","abe8120e":"import numpy as np\n\nprint(np.argmax(predictions[0]))","dd80383e":"import matplotlib. pyplot as plt","206e44a3":"plt.imshow(x_test[0],cmap=plt.cm.binary)\nplt.show()","f2bc2158":"Tutorial p 2.0 is ready https:\/\/www.kaggle.com\/mekhdigakhramanian\/loading-in-your-own-data-tensorflow-and-keras-p-2\/","6b806f56":"* # Please upvote this kernel and like the video\n* \nThanks harrison https:\/\/www.youtube.com\/watch?v=wQ8BIBpya2k&list=PLQVvvaa0QuDfhTox0AjmQ6tvTgMBZBEXN"}}