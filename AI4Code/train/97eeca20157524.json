{"cell_type":{"16b66d8c":"code","b9b2c8dd":"code","9d61dd7c":"code","12d41ddb":"code","68d6ddd0":"code","6fa02af1":"code","0a20e92b":"code","b3031e70":"code","9809e79f":"code","0defb55c":"code","a7eb1821":"code","879f7882":"code","75034d1f":"code","a3c050ab":"code","8f62b2cf":"code","fda11494":"code","07d43de4":"code","d162a64c":"code","9ca99d25":"code","c44cd156":"code","7fd64387":"code","8c9a56f1":"code","30371aa5":"code","cd43886f":"code","71870f69":"code","6da6c733":"code","492dfd4e":"code","3936916d":"code","5cea8b6e":"code","faec553f":"code","c10620f3":"code","0f87a58b":"code","6956c5a6":"code","f188a975":"code","fdfd9112":"code","044e7a0a":"code","d5acdf1f":"code","f2cd2204":"code","878ab969":"code","483f79b5":"code","f8000098":"code","30587b71":"code","c73231a7":"code","9e9f7323":"code","dff2ad98":"code","a9315871":"code","210ef23e":"code","4bfb2cce":"code","8333d83d":"code","03a4cde3":"code","091e2264":"code","dd6a1750":"code","9fd18501":"code","33c30c73":"code","95ed2145":"code","49ddbcaa":"code","948964a8":"code","ea67db5d":"code","92b17ad3":"code","b24a2bae":"code","2383f144":"code","bbb2826d":"code","f2dc2374":"code","193e15f8":"markdown","c4d538f2":"markdown","417b4af8":"markdown","7394269f":"markdown","1a804a68":"markdown","bfad15c4":"markdown","688a747f":"markdown","2a311616":"markdown","221980dc":"markdown","9749b674":"markdown","e9aa8913":"markdown","088af225":"markdown","367948be":"markdown","830733f3":"markdown","76f21b2d":"markdown","2cbe2f27":"markdown","7c4ec310":"markdown","d978e55b":"markdown","c81480c5":"markdown","0b92b7fb":"markdown","a80dcff8":"markdown","bc2b0370":"markdown","6d5e09e5":"markdown","6415f9ce":"markdown","e7487d3c":"markdown","43b41846":"markdown","30b4a959":"markdown","9e36329a":"markdown","b83db0af":"markdown","da577799":"markdown","ba8c0a66":"markdown","894b4c44":"markdown","b364faf8":"markdown"},"source":{"16b66d8c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b9b2c8dd":"#  from google.colab import files\n#  files.upload()","9d61dd7c":"df = pd.read_csv('..\/input\/customer-segmentation\/Train.csv')\ndftest = pd.read_csv('..\/input\/customer-segmentation\/Test.csv')","12d41ddb":"df.info()","68d6ddd0":"print('Mising Value pada setiap atribut:')\nprint(df.isna().sum())","6fa02af1":"plt.subplots(figsize=(10,5))\nsns.heatmap(df.isnull(),cbar=False)\nplt.xlabel('Feature')\nplt.ylabel('Index')\nplt.title('Missing Value')\n\nplt.show()","0a20e92b":"df['Segmentation'].value_counts()","b3031e70":"# Visualisasi distribusi target\n\nplt.subplots(figsize=(10,5))\nsns.countplot(df['Segmentation'].sort_values())\nplt.xlabel('Target Label')\nplt.ylabel('Jumlah')\nplt.title('Perbandingan Target Label')\n\nplt.show()","9809e79f":"df.duplicated().value_counts()","0defb55c":"# Customer Berdasarkan Gender\n\ngender_based = pd.pivot_table(df,values='ID',index=['Gender'],columns=['Segmentation'],aggfunc=np.count_nonzero)","a7eb1821":"gender_based","879f7882":"x = np.arange(len(gender_based.columns))\nwidth = 0.25\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(gender_based)):\n    ax.bar(x+(i*width),gender_based.loc[gender_based.index[i]],width=width, label=gender_based.index[i])\n\nax.set_xticks(x+((len(gender_based)\/2-0.5)*width))\nax.set_xticklabels(gender_based.columns)\n\nplt.title('Customer Berdasarkan Gender')\nax.set_xlabel('Customer')\nax.set_ylabel('Jumlah')\n\nplt.legend(loc='best',frameon=True)\nplt.show()","75034d1f":"# Customer Berdasarkan Ever_Married (No,Yes)\n\nmarried_based = pd.pivot_table(df,values='ID',index=['Ever_Married'],columns=['Segmentation'],aggfunc=np.count_nonzero)","a3c050ab":"married_based","8f62b2cf":"x = np.arange(len(married_based.columns))\nwidth = 0.25\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(married_based)):\n    ax.bar(x+(i*width),married_based.loc[married_based.index[i]],width=width, label=married_based.index[i])\n\nax.set_xticks(x+((len(married_based)\/2-0.5)*width))\nax.set_xticklabels(married_based.columns)\n\nplt.title('Customer Berdasarkan Ever_Married')\nax.set_xlabel('Customer')\nax.set_ylabel('Jumlah')\n\nplt.legend(loc='best',frameon=True)\nplt.show()","fda11494":"# Customer Berdasarkan Age (rata-rata)\n\nage_based = pd.DataFrame(df.groupby('Segmentation')['Age'].mean())","07d43de4":"age_based","d162a64c":"fig,ax = plt.subplots(figsize=(10,5))\nax.bar(age_based.index,age_based['Age'],width=0.5)\n\nplt.title('Customer Berdasarkan Age')\nax.set_xlabel('Customer')\nax.set_ylabel('Rata-rata Umur (Age)')\nplt.show()","9ca99d25":"# Customer Berdasarkan Graduated\n\ngrad_based = pd.pivot_table(df,values='ID',index=['Graduated'],columns=['Segmentation'],aggfunc=np.count_nonzero)","c44cd156":"grad_based","7fd64387":"x = np.arange(len(grad_based.columns))\nwidth = 0.25\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(grad_based)):\n    ax.bar(x+(i*width),grad_based.loc[grad_based.index[i]],width=width, label=grad_based.index[i])\n\nax.set_xticks(x+((len(grad_based)\/2-0.5)*width))\nax.set_xticklabels(grad_based.columns)\n\nplt.title('Customer Berdasarkan Graduated')\nax.set_xlabel('Customer')\nax.set_ylabel('Jumlah')\n\nplt.legend(loc='best',frameon=True)\nplt.show()","8c9a56f1":"# Customer Berdasarkan Profession\n\nprof_based = pd.pivot_table(df,values='ID',index=['Profession'],columns=['Segmentation'],aggfunc=np.count_nonzero)","30371aa5":"prof_based","cd43886f":"x = np.arange(len(prof_based.columns))\nwidth = 0.1\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(prof_based)):\n    ax.bar(x+(i*width),prof_based.loc[prof_based.index[i]],width=width, label=prof_based.index[i])\n\nax.set_xticks(x+((len(prof_based)\/2-0.5)*width))\nax.set_xticklabels(prof_based.columns)\n\nplt.title('Customer Berdasarkan Profession')\nax.set_xlabel('Customer')\nax.set_ylabel('Jumlah')\n\nplt.legend(loc='best',bbox_to_anchor=(0.92,0.40,0.3,0.6),frameon=True)\nplt.show()","71870f69":"# Customer Berdasarkan Work_Experience (Rata-rata)\n\nworkexp_based = pd.DataFrame(df.groupby('Segmentation')['Work_Experience'].mean())","6da6c733":"workexp_based","492dfd4e":"fig,ax = plt.subplots(figsize=(10,5))\nax.bar(workexp_based.index,workexp_based['Work_Experience'],width=0.5)\n\nplt.title('Customer Berdasarkan Work_Experience')\nax.set_xlabel('Customer')\nax.set_ylabel('Rata-rata Pengalaman Kerja (Work_Experience)')\nplt.show()","3936916d":"# Customer Berdasarkan Spending_Score\n\nspend_based = pd.pivot_table(df,values='ID',index=['Spending_Score'],columns=['Segmentation'],aggfunc=np.count_nonzero)","5cea8b6e":"spend_based.sort_values(by='A',ascending=False,inplace=True)","faec553f":"spend_based","c10620f3":"x = np.arange(len(spend_based.columns))\nwidth = 0.2\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(spend_based)):\n    ax.bar(x+(i*width),spend_based.loc[spend_based.index[i]],width=width, label=spend_based.index[i])\n\nax.set_xticks(x+((len(spend_based)\/2-0.5)*width))\nax.set_xticklabels(spend_based.columns)\n\nplt.title('Customer Berdasarkan Spending_Score')\nax.set_xlabel('Customer')\nax.set_ylabel('Jumlah')\n\nplt.legend(loc='best',frameon=True)\nplt.show()","0f87a58b":"# Customer Berdasarkan Family_Size\n\nfamsize_based = pd.DataFrame(df.groupby('Segmentation')['Family_Size'].agg(pd.Series.mode))","6956c5a6":"famsize_based","f188a975":"fig,ax = plt.subplots(figsize=(10,5))\nax.bar(famsize_based.index,famsize_based['Family_Size'],width=0.5)\n\nplt.title('Customer Berdasarkan Family_Size')\nax.set_xlabel('Customer')\nax.set_ylabel('Jumlah Anggota Keluarga Customer')\nplt.show()","fdfd9112":"# Customer Berdasarkan Var_1\n\nvar_based = pd.pivot_table(df,values='ID',index=['Var_1'],columns=['Segmentation'],aggfunc=np.count_nonzero)","044e7a0a":"var_based","d5acdf1f":"x = np.arange(len(var_based.columns))\nwidth = 0.1\n\nfig,ax = plt.subplots(figsize=(10,5))\nfor i in range(len(var_based)):\n    ax.bar(x+(i*width),var_based.loc[var_based.index[i]],width=width, label=var_based.index[i])\n\nax.set_xticks(x+((len(var_based)\/2-0.5)*width))\nax.set_xticklabels(var_based.columns)\n\nplt.title('Customer Berdasarkan Var_1')\nax.set_xlabel('Customer')\nax.set_ylabel('Jumlah')\n\nplt.legend(loc='best',bbox_to_anchor=(0.84,0.42,0.3,0.6),frameon=True)\nplt.show()","f2cd2204":"df.dropna(axis=0, inplace=True)","878ab969":"df","483f79b5":"from sklearn.preprocessing import LabelEncoder\nlabelencoder=LabelEncoder()\ndf['Segmentation'] = labelencoder.fit_transform(df['Segmentation'])\n# df['Gender'] = labelencoder.fit_transform(df['Gender'])\n# df['Ever_Married'] = labelencoder.fit_transform(df['Ever_Married'])\ndf['Spending_Score'] = labelencoder.fit_transform(df['Spending_Score'])\n# df['Graduated'] = labelencoder.fit_transform(df['Graduated'])","f8000098":"from sklearn import preprocessing\nlb = preprocessing.LabelBinarizer()\ndf['Gender'] = lb.fit_transform(df['Gender'])\ndf['Ever_Married'] = lb.fit_transform(df['Ever_Married'])\ndf['Graduated'] = lb.fit_transform(df['Graduated'])\n","30587b71":"df = pd.get_dummies(df, columns = ['Profession'])\ndf = pd.get_dummies(df, columns = ['Var_1'])","c73231a7":"df.corr()","9e9f7323":"df.drop(columns=\"ID\", inplace=True)","dff2ad98":"df","a9315871":"df.boxplot(column=['Gender','Ever_Married','Age','Graduated','Work_Experience','Spending_Score','Family_Size'], return_type='axes')","210ef23e":"Q1 = df['Age'].quantile(0.25)\nQ3 = df['Age'].quantile(0.75)\nIQR = Q3 - Q1\nprint(Q1)\nprint(Q3)\nprint(IQR)\natas = Q3 + 1.5 * IQR","4bfb2cce":"mean = round(df[\"Age\"].mean())\nfor i in df.index:\n    if(df.loc[i][\"Age\"] > atas):\n         df.loc[i, \"Age\"] = mean\ndf['Age'].plot.box()","8333d83d":"Q1 = df['Work_Experience'].quantile(0.25)\nQ3 = df['Work_Experience'].quantile(0.75)\nIQR = Q3 - Q1\nprint(Q1)\nprint(Q3)\nprint(IQR)\natas = Q3 + 1.5 * IQR","03a4cde3":"mean = round(df[\"Work_Experience\"].mean())\nfor i in df.index:\n    if(df.loc[i][\"Work_Experience\"] > atas):\n         df.loc[i, \"Work_Experience\"] = mean\ndf['Work_Experience'].plot.box()","091e2264":"Q1 = df['Family_Size'].quantile(0.25)\nQ3 = df['Family_Size'].quantile(0.75)\nIQR = Q3 - Q1\nprint(Q1)\nprint(Q3)\nprint(IQR)\natas = Q3 + 1.5 * IQR","dd6a1750":"mean = round(df[\"Family_Size\"].mean())\nfor i in df.index:\n    if(df.loc[i][\"Family_Size\"] > atas):\n         df.loc[i, \"Family_Size\"] = mean\ndf['Family_Size'].plot.box()","9fd18501":"df.corr()['Segmentation'].sort_values()","33c30c73":"# df.drop(columns=\"Work_Experience\", inplace=True)\n# df.drop(columns=\"Gender\", inplace=True)\n# # df.drop(columns=\"Spending_Score\", inplace=True)","95ed2145":"features = df.drop(columns='Segmentation')\nX = features\nY = df.Segmentation","49ddbcaa":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.20, random_state = 0)","948964a8":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","ea67db5d":"# from sklearn.decomposition import PCA\n# pca = PCA(n_components=None, svd_solver='full')\n# X_train = pca.fit_transform(X_train)\n# X_test = pca.transform(X_test)\n# hasil_variance = pca.explained_variance_ratio_","92b17ad3":"# hasil_variance","b24a2bae":"from sklearn.neighbors import KNeighborsClassifier\ndef plot_complexity_curve(k_list, knn_model, X_train, X_test, y_train, y_test):\n    \n    train_scores = []\n    test_scores = []\n    \n    # For each k\n    for k in k_list:\n        # Initialize, fit, predict\n        knn = knn_model(k)\n        \n        knn.fit(X_train, y_train)\n        \n        train_scores.append(knn.score(X_train, y_train))\n        test_scores.append(knn.score(X_test, y_test))\n\n    # Plot\n    fig, ax = plt.subplots()\n    \n    ax.plot(k_list, train_scores, label='Training Accuracy', color='red')\n    ax.plot(k_list, test_scores, label='Testing Accuracy', color='black')\n\n    ax.set(title='k-NN with Different Values for $k$',\n           xlabel='Number of Neighbors',\n           ylabel='Accuracy')\n    \n    ax.legend()\n    \nneighbors = np.arange(1, 7)\nplot_complexity_curve(neighbors, KNeighborsClassifier, X_train, X_test, y_train, y_test)","2383f144":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nneigh = KNeighborsClassifier(n_neighbors=7, weights='distance', algorithm='auto', leaf_size=30, p=4, metric='euclidean', metric_params=None, n_jobs=None)\nneigh.fit(X_train, y_train)\npred = neigh.predict(X_test)\nprint(classification_report(y_test,pred))\nprint(confusion_matrix(y_test,pred))","bbb2826d":"from sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nseed = 3\n#MODELS\nmodels = []\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier()))\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('LGBMClassifier',LGBMClassifier(n_estimators=60)))\nmodels.append(('GradientBoostingClassifier',GradientBoostingClassifier(n_estimators=60)))","f2dc2374":"results = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n    kfold = model_selection.KFold(n_splits=10)\n    cv_results = model_selection.cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f\" % (name, cv_results.mean())\n    print(msg)","193e15f8":"**Split Dataset**","c4d538f2":"Terdapat mising value pada colum ever_marrided, graduated, profession, work_experience, family_size, dan Var 1","417b4af8":"#Perbandingan Dengan Algoritma Lain","7394269f":"**X dan y Definision**","1a804a68":"Cek Missing Value","bfad15c4":"# Import Data","688a747f":"# Data Preparation","2a311616":"## Exploratory Data Analysis ","221980dc":"Handle unwanted Column","9749b674":"#Machine Learning Algorithms Implementation","e9aa8913":"Dengan melihat Corelasi tadi dapat kita lihat column column yang sangat tidak berguna, kemudian disini kita akan menghapusnya","088af225":"Melihat apakah data target memiliki jumlah balance atau inbalance","367948be":"**KNN**","830733f3":"Mencari K terbaik ","76f21b2d":"pada data target terdapat jumlah data yang inbalance, hal ini dapat di asumsikan bahwa penggunaan f1 score akan dibutuhkan ","2cbe2f27":"encoding nominal data adalah transformasi data katergorikal menjadi data numerical, kita bisa menggunakan bantuan dari liblary sklearn prepocessing dengan fungsi labelencoder","7c4ec310":"Cek duplicate ","d978e55b":"Kemudain akan di bagi menjadi 2 yaitu X dan Y, X sebagain variale yang memperngaruhi, dan Y sebagai variable yang di pengaruhi","c81480c5":"**Scaling all features**","0b92b7fb":"Scaling adalah suatu cara untuk membuat numerical data pada dataset memiliki rentang nilai (scale) yang sama","a80dcff8":"**Handle Outlier pada Age**","bc2b0370":"Encoding Nominal Data","6d5e09e5":"#Data Modeling","6415f9ce":"Clearing the Data","e7487d3c":"#Data Evaluation","43b41846":"**Handle Outlier pada work experience**","30b4a959":"**Handle Outlier pada Family_Size**","9e36329a":"Pada tahap ini kita akan menyelidiki lebih dalam terkait data yang akan kita analysis","b83db0af":"Handle Outliers","da577799":"Terdapat outlier pada colum age,work experience, dan family size","ba8c0a66":"Menggunakan bantuan dari Sklearn saya membagi menjadi 2 lagi yaitu data train dan data test, Sesuai dengan kaidah kami membagi dengan format 20% data test dan 80% data train","894b4c44":"# Data Preprocessing","b364faf8":"dengan melihat data di atas kita dapat mengetahui total colum = 11, dtypes: float64(2), int64(2), object(7), dan memory usage: 693.5+ KB\n\n"}}