{"cell_type":{"7a33e555":"code","d1f5c0c1":"code","a44ed65d":"code","fcef85b3":"code","98c6c899":"code","edc1e6db":"code","acb4786b":"code","3332e1d0":"code","8a0512d0":"code","e4ed2b8a":"code","92953014":"code","2f360887":"code","cd2083f4":"code","6472f145":"code","3626006f":"code","c75c9461":"code","b199e8ed":"markdown","11ea843e":"markdown","c4d5a91d":"markdown","56efda0e":"markdown","7c1865b8":"markdown","0e02fcdf":"markdown"},"source":{"7a33e555":"import torch\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport torch.nn.functional as F\nfrom torch import nn\nfrom torchvision import datasets, transforms ## Hence torchvision is basically used as it has many datasets and also transform properities\n# that can be applied on these datasets","d1f5c0c1":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\") # To use to cuba GPU","a44ed65d":"transform = transforms.Compose([transforms.Resize((28,28)),\n                               transforms.ToTensor(),\n                               transforms.Normalize((0.5,), (0.5,))\n                               ])\ntraining_dataset = datasets.MNIST(root='.\/data_1', train=True, download=True, transform=transform)\nvalidation_dataset = datasets.MNIST(root='.\/data_1', train=False, download=True, transform=transform)\n\ntraining_loader = torch.utils.data.DataLoader(training_dataset, batch_size=100, shuffle=True)\nvalidation_loader = torch.utils.data.DataLoader(validation_dataset, batch_size = 100, shuffle=False)","fcef85b3":"def im_convert(tensor):\n  image = tensor.cpu().clone().detach().numpy() # Just use cpu in this case as it is not compatible with gpu\n  image = image.transpose(1, 2, 0)\n  image = image * np.array((0.5, 0.5, 0.5)) + np.array((0.5, 0.5, 0.5))\n  image = image.clip(0, 1)\n  return image","98c6c899":"\ndataiter = iter(training_loader)\nimages, labels = dataiter.next()\nfig = plt.figure(figsize=(25, 4))\n\nfor idx in np.arange(20):\n  ax = fig.add_subplot(2, 10, idx+1, xticks=[], yticks=[])\n  plt.imshow(im_convert(images[idx]))\n  ax.set_title([labels[idx].item()])","edc1e6db":"class LeNet(nn.Module):\n    def __init__(self):\n      super().__init__()\n      self.conv1 = nn.Conv2d(1, 20, 5, 1) # Conv layer1\n      self.conv2 = nn.Conv2d(20, 50, 5, 1) # Conv layer2\n      self.fc1 = nn.Linear(4*4*50, 500)    # Fully connected layer1\n      self.dropout1 = nn.Dropout(0.5)   # We use dropout layer between these both FCL as they have the highest number of parameters b\/t them\n      self.fc2 = nn.Linear(500, 10)   # Fully connected layer2\n    def forward(self, x):\n      x = F.relu(self.conv1(x))  # Apply ReLu to the feature maps produced after Conv 1 layer\n      x = F.max_pool2d(x, 2, 2)  # Pooling layer after Conv 1 layer\n      x = F.relu(self.conv2(x))  # Apply ReLu to the feature maps produced after Conv 2 layer\n      x = F.max_pool2d(x, 2, 2)  # Pooling layer after Conv 2 layer\n      x = x.view(-1, 4*4*50)     # Flattening the output of CNN to feed it into Fully connected layer\n      x = F.relu(self.fc1(x))   # Fully connected layer 1 with Relu\n      x = self.dropout1(x)     # We use dropout layer between these both FCL as they have the highest number of parameters b\/t them\n      x = self.fc2(x)         # Fully connected layer 2 with no activation funct as we need raw output from CrossEntropyLoss\n      return x","acb4786b":"model = LeNet().to(device)\nmodel","3332e1d0":"criterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr = 0.0001)","8a0512d0":"epochs = 15\nrunning_loss_history = []\nrunning_corrects_history = []\nval_running_loss_history = []\nval_running_corrects_history = []\n\nfor e in range(epochs):\n  \n  running_loss = 0.0\n  running_corrects = 0.0\n  val_running_loss = 0.0\n  val_running_corrects = 0.0\n  \n  for inputs, labels in training_loader: # As our train_loader is batch size of 100 and had input images and corresponding labels\n    inputs = inputs.to(device)  # Put our inputs and labels in the device as our model is also in the device\n    labels = labels.to(device)\n    outputs = model(inputs)   # giving input to our model to get corresponding output\n    loss = criterion(outputs, labels) # comparing out model's output to original labels\n    \n    optimizer.zero_grad()  ##sets the initial gradient to zero\n    loss.backward()  ## The whole calculated loss is then back propogated to the model\n    optimizer.step()  ## Then the weights are updated by doing their derivative w.r.t the Loss\n    \n    _, preds = torch.max(outputs, 1) # Then we select the max value of raw output and consider it as our prediction. We select it from 10 o\/ps\n    running_loss += loss.item()  # total loss of 1 epoch\n    running_corrects += torch.sum(preds == labels.data) #total accuracy of 1 epoch\n\n  else:\n    with torch.no_grad(): # This we done to set no gradient as we do not need it for val as our model is already trained.\n      for val_inputs, val_labels in validation_loader:\n        val_inputs = val_inputs.to(device)  # Put our val_inputs and labels in the device as our model is also in the device\n        val_labels = val_labels.to(device)\n        val_outputs = model(val_inputs)\n        val_loss = criterion(val_outputs, val_labels)\n        \n        _, val_preds = torch.max(val_outputs, 1)\n        val_running_loss += val_loss.item()\n        val_running_corrects += torch.sum(val_preds == val_labels.data)\n      \n    epoch_loss = running_loss\/len(training_loader)\n    epoch_acc = running_corrects.float()\/ len(training_loader)\n    running_loss_history.append(epoch_loss)\n    running_corrects_history.append(epoch_acc)\n    \n    val_epoch_loss = val_running_loss\/len(validation_loader)\n    val_epoch_acc = val_running_corrects.float()\/ len(validation_loader)\n    val_running_loss_history.append(val_epoch_loss)\n    val_running_corrects_history.append(val_epoch_acc)\n    print('epoch :', (e+1))\n    print('training loss: {:.4f}, acc {:.4f} '.format(epoch_loss, epoch_acc.item()))\n    print('validation loss: {:.4f}, validation acc {:.4f} '.format(val_epoch_loss, val_epoch_acc.item()))","e4ed2b8a":"plt.plot(running_loss_history, label='training loss')\nplt.plot(val_running_loss_history, label='validation loss')\nplt.legend()","92953014":"plt.plot(running_corrects_history, label='training accuracy')\nplt.plot(val_running_corrects_history, label='validation accuracy')\nplt.legend()","2f360887":"import PIL.ImageOps","cd2083f4":"import requests\nfrom PIL import Image\n\nurl = 'https:\/\/images.homedepot-static.com\/productImages\/007164ea-d47e-4f66-8d8c-fd9f621984a2\/svn\/architectural-mailboxes-house-letters-numbers-3585b-5-64_1000.jpg'\nresponse = requests.get(url, stream = True)\nimg = Image.open(response.raw)\nplt.imshow(img)","6472f145":"img = PIL.ImageOps.invert(img)  # we use Image operations from PIL to invert(i.e. make white black and vice versa)\nimg = img.convert('1') # we convert from RGB to Gray\nimg = transform(img) # Apply the transform funct we defined earlier to make our downloaded img same as what we trained on\nplt.imshow(im_convert(img))","3626006f":"images = img.to(device)  # As our model is in the device\nimage = images[0].unsqueeze(0).unsqueeze(0)\noutput = model(image)\n_, pred = torch.max(output, 1)\nprint(pred.item())","c75c9461":"dataiter = iter(validation_loader)\nimages, labels = dataiter.next()\nimages = images.to(device)\nlabels = labels.to(device)\noutput = model(images)\n_, preds = torch.max(output, 1)\n\nfig = plt.figure(figsize=(25, 4))\n\nfor idx in np.arange(20):\n  ax = fig.add_subplot(2, 10, idx+1, xticks=[], yticks=[])\n  plt.imshow(im_convert(images[idx]))\n  ax.set_title(\"{} ({})\".format(str(preds[idx].item()), str(labels[idx].item())), color=(\"green\" if preds[idx]==labels[idx] else \"red\"))","b199e8ed":"**Transformations**, this is really necessary as PyTorch works with tensors.","11ea843e":"* I will be using the most popular Adam optimizer.","c4d5a91d":"Initializing **GPU** **Usage**","56efda0e":"In this notebook I have created a CNN model built in PyTorch to predict MNIST dataset. \n**I was able to achieve 99.3% accuracy**. I also tested my model using a random image for internet and the prediction was perfect.\nPlease find my work below.","7c1865b8":"**As seen I got really good accuracy and my model predicted all the new images correctly, which it has never seen before.**\n**As you can see it amount of coding that has to be done is much more when using PyTorch over Tensorflow**\n**I prefer working with Tensorflow & Keras because its simple to use.**","0e02fcdf":"**NumPy Image Conversion Function **, I did this to display my images using plt. As matplotlib.pyplot do not work with tensors."}}