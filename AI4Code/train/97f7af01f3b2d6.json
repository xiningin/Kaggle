{"cell_type":{"3da9ea34":"code","290f4e23":"code","0310d11d":"code","3a848a38":"code","e1372c3d":"code","fbccf83b":"code","b6a68883":"code","a0679b52":"code","3f4b7790":"code","e849b5d3":"code","91548435":"code","4d80b6ad":"code","61dcf8b2":"code","851f6c0a":"markdown","234fae62":"markdown","24401193":"markdown","26229e27":"markdown","5c7b30bc":"markdown","39d2b1a6":"markdown","bb53eb2a":"markdown","c2f9c585":"markdown","ba43e7ba":"markdown","60dadc9d":"markdown","9ad1e030":"markdown","859e5b9e":"markdown","988b4a9b":"markdown"},"source":{"3da9ea34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","290f4e23":"#Deep Learning\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers as L\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n#Data Visualizations\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","0310d11d":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\n\norig_labels = train_df['label']\ny = tf.keras.utils.to_categorical(orig_labels) # one-hot encoding\ntrain_df.drop('label', axis=1, inplace=True)\ntrain_df.head(1)","3a848a38":"train_arr = np.array(train_df).reshape(-1, 28, 28, 1)","e1372c3d":"train_arr.shape","fbccf83b":"sns.barplot(x = orig_labels.unique(), y = orig_labels.value_counts())\nplt.ylabel('Digit Frequency')\nplt.xlabel('Digit')","b6a68883":"from tensorflow.keras.preprocessing.image import load_img, img_to_array, array_to_img\n\ndef change_size(image):\n    img = array_to_img(image, scale=False) #returns PIL Image\n    img = img.resize((75, 75)) #resize image\n    img = img.convert(mode='RGB') #makes 3 channels\n    arr = img_to_array(img) #convert back to array\n    return arr.astype(np.float64)","a0679b52":"train_arr_75 = [change_size(img) for img in train_arr]\ndel train_arr\ntrain_arr_75 = np.array(train_arr_75)\ntrain_arr_75.shape","3f4b7790":"image_gen = ImageDataGenerator(rescale=1.\/255, #easier for network to interpret numbers in range [0,1]\n                              zoom_range=0.1,\n                              width_shift_range=0.2,\n                              height_shift_range=0.2,\n                              validation_split=0.2) # 80\/20 train\/val split\n\ntrain_generator = image_gen.flow(train_arr_75, \n                                 y,\n                                batch_size=32,\n                                shuffle=True,\n                                subset='training',\n                                seed=42)\nvalid_generator = image_gen.flow(train_arr_75,\n                                 y,\n                                batch_size=16,\n                                shuffle=True,\n                                subset='validation')\ndel train_arr_75 #saves RAM","e849b5d3":"sns.barplot(['train', 'valid'], [train_generator.n, valid_generator.n])","91548435":"model = Sequential()\n\nmodel.add(tf.keras.applications.resnet50.ResNet50(input_shape = (75, 75, 3), \n                                include_top = False, \n                                weights = 'imagenet'))\n\nmodel.add(L.Flatten())\nmodel.add(L.Dense(128, activation='relu'))\nmodel.add(L.Dense(10, activation='softmax'))\n\nmodel.compile(optimizer=keras.optimizers.Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])\n#Do not use default learning rate since it is too high!","4d80b6ad":"for layer in model.layers[0].layers:\n    if layer.name == 'conv5_block1_0_conv':\n        break\n    layer.trainable=False","61dcf8b2":"history = model.fit(train_generator, validation_data=valid_generator, epochs=5, \n          steps_per_epoch=train_generator.n\/\/train_generator.batch_size,\n         validation_steps=valid_generator.n\/\/valid_generator.batch_size)","851f6c0a":"## Data Augmentation\n\nData augmentation is one of the most fundamental and useful strategy when dealing with images. It becomes especially useful if we have few images. This is not the case with this dataset, but it will still help anyway. Fortunately, ```ImageDataGenerator``` from ```keras``` makes it extremely simple to apply these augmentations. However, it is important to be **careful** when deciding which augmentations to apply. \n\nFor example, if we included the parameter ```vertical_flip=True```, then our 6 is no longer the same number. \n\nLet's investigate each of the augmentations one by one. \n\n**Width Shift Range**\n\nThis will shift the image horizontally by a specified amount. Setting the value to *0.2* simply means it can shift 20% of the total width. \n\n![width_shift_range](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUSEhMWFhUWGRcXGBcYGBoYFxYWHx0WGhYaGBgaHSggGBolGxcXIjEhJyorLi4uGB8zODMsNygtLisBCgoKDg0OGxAQGzUmICUtLS0tLy0tLS0tLS0tLS0tLS0tLS0uLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAMMBAgMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAAHAAMEBQYCCAH\/xABGEAABAwEEBQYKCAYCAgMAAAABAgMRAAQSITEFBkFRcRMiYYGR0QcVIzJCUlOSobEUM3KTssHS8ENUYoKD4aLxJMJjc6P\/xAAZAQADAQEBAAAAAAAAAAAAAAAAAgMEAQX\/xAAmEQACAgIBAwUBAQEBAAAAAAAAAQIRAyESBDEyExQiQVGhYVJC\/9oADAMBAAIRAxEAPwA40qrtLurFwIWUyTMBJnD+oGogcc9svsb\/AEV2gLylVIXHAJLy+xv9FBvXPwnW5NrcasdoUhtolsy2yoqcSSFnFswJwHCdtcejqVhw0xpEspvBtTmeCczGwYGVHYMMjjUNzTi0qCCyZKgMJM84glOHOAAxOGYwoJt+EPSirOpYtaitJMkNWc4YZjksAJ+NR9GeEDSpUHHbSopyvpYs94DAkE8lMdG+l5Ibgw6DTaypCORUFKuT5xCQVgHGBPNkzsMSIibug\/ZNYdILULtvUUkT9VZxO0H6qRhnwNRLH4RLSzay3a7QstSUyEMgox87BsEjYRSrIm6GeJpBrpVm0WtxQCkvrIOIMN4\/8KRtL3tl9jf6KrxJGkpVlLXbn0oUoPLkCfNb\/RU1t10geWXkNjf6KKAvqVUinHAJ5ZfY3+ignrJ4UrebS4LJaVNspUUJBbYUVFJhSiS2czMY5RXHo6lZ6HpV54c8IWlfo\/Kpti7w848jZyM8J8lhnFfNFeELSpIL1rWEHJSWGMOMNY8OO6l5Ib02eiKVCKy6f0gpRi3kiB\/Ds8E7CDyeRFRNBeEK0ptPJWy0rKFkJQq4ym4rITdbxBnHd0UqyJuhniklYaKVZ36Q7mH1xwb\/AEVybS97ZfY3+iq8SRpKVZk2p72y+xv9FcWa2vKWtJeXCbsc1vaCT6FFAamlVByzvtl9jf6K+h132y+xv9FFAX1KqQLc9svsb\/RVLrjrGqw2Vb5ccURAQmG8VnBM8zKTj0A0UBtaVeabL4TdLlQvWwxInyNnGH3VS9L+EHS6HAlu1qhWKZZs+PDyWIpOSH4M9F0qBOhtdtJOSl22OJcAmCywArfd8lhHTnHGrG26y6SbY5T6apRGH1Vnx6fqs\/zgUryJDLC2GWlQ01G1yctaC24+sPt+cLrQvjIKADfaNhrWWa0O8q2C6ogqIIIRBF1Z2IBzA27KotqybVOi\/pUqVBwrNM5t8VfKoqak6aOLfFXyqIhVMgK3WnSn0ezrcAlcQgb1HAT0Y0AdL2dTaS4oSVEkmNpxzjfRr14ULiQTtT2c49WKfhQ\/XoxNoS63Bm4SkTdgj0jGYGGHTFRyS2XxxtH3wY2MFlbjgnlDAnEFOR\/PsraWbVVoBRZAbvYwPNJ6U5VRat2PyCGk4FKQMcpzxHGakaKsWkEu85eEibraUtXcZmDO6MCY2jbFbbZq40kin1tJYklsoOU+gqdxGX+qHFstSlLJJmcFD1gIjonCjfrOH1tFDSUFV0KN4XokxAG3I\/DfgMLFq6DaCl8G7dUu6OacVQi8ASE4TgDFEdbYk06pBP8ABfbVO2JF\/NPNneE4JnpiMdwFa1VD\/wAGzakLcaT5iY4TJHxFEFVa8crjZlyR4yoiaR+rX9k1Zs5DgKrNI\/VL+yasWFYDgKYmU+umlVMWZRbxcXzUDpOE9VAPS1nLSbxHnbY\/1+dGfXo+ZOU48AleHafgKwdq0Ym1NOpPnJAUkkkRjnAGOEiPhgBUMkvls0Y42tE7wdaPT9FJdSDypJg4ynZnWra1UbCTyKQiTN30DxGyqnRNlKmUpbIBSkBN4SMMpFd6DsmkUL568MZAQENRGyDnPR17Kit2zS40kjPa1uFnANqbORB809KSMM\/+qH9qtJUokmb2Y2zvB30a9bW3nEFLaEKACSqUhRgycEnDZtzobaK1aBdWl8HBCSEgkQVFcXs4MJymONdjrbEmn2QW9Qbap2xtrUZVdAJ3qEgmJzMAmMJPGtAaw\/gzvhLickJIjsx+QrcKrVjlyimZMkeMmjk01YvrHf8AH8jTppmxnyjv+P5GmYhOmuk03erpKhQA8mhh4ULap9xNmR5iDeUYzWZCQOGNE0HDChXp9yXXMTJUADhldQTh1z11PI6RTGrYNHm1F9LKRiVAQBB+QoytaEYebQhbaV3QAJzBwyOYrIp0OhL7FpAiUmcZvKyBAOQEEdPbWi0jo+0KSFWYp\/qlAWqMYu3sBjGNZ27aSNcIUm2T9I6A5NF5CC4mMU4Xk\/ZJz7eqhfrHbiCpAkDHBXnRhAUOiMKLGgEWpKYfUSMbt8QvKcpOEzt7KxWuujLQ+pKrjYSYUCE5Zk3lzI5u4YnMba5Vs7xpaMfqfpBbdsZUCDKgg7ihUAg4ThnvwwNejbCZWyTne\/8ARdASw6GQhhp7nFwwST0iRA7KNurKllNmK8yQf\/zXV8crtGXLGkmbKlSpU5Ep9Yf4XFXyNQEKqdrF\/C+0r8JqtSapHsKyk12BLQPSMe0D8RoZ2u1ra56DdUoKukGCDBGY2xjRY1is99hYGYE9lC7SVivsc0GQARxH5CKzZtTRrw7gy11TtZU2hcyY528nbNbpu2rLZSkYx+46aG+qVnVyN9vzkKUlSfWGBw6ca1dlRy6Qppd1YkKF5SJ2EKukERWe9mxJNJMlWnSITjdWCltSVFQgTIgD1tuVYix2guOuvE4EhIxzSmfzvHgRS1sdW0oMcpedcGPOWoIbGZBUfOOWyoFjfCEXR0YdGAFdrRyb3xQT9RkAMExiVqn4RWgVVBqOn\/xQT6RKhwNXyq2Y\/FHn5PJkXSH1a\/smpLCsBwFRtIfVr+yacZOA4CqIlIzuviealXSPkrvFDrSdsWyFXFFClA3SDBHrYjh86Ket1mv2dRibuPVQy03YStkKGaYO7dPVJPwrLl1M1YtwNBqxapQhY2gTWzVbFqbISJy49U0O9WGVBhLiJMSlSd4BIlPSN2356dhnl032XIMEKF9aAdmNwgyCOqoLubUk6set2lAm8oJUnmBJKhHOk5b8DnlWL0U8VqceJ89UidwwT2jH+6mta3lIc+jX7ylc5w3lKCUDAJBUZlROPQOFR2LRdQBuP+x++ihrQk38uK+gpaltgWVGGMqnpxNXSqqdUkRZUA9J7STVsa3w8UefPyZyahtHyrnBHyNSzUJB8q5wR8jTIRkqa6QaamukmmFJSF0MdZGvLuDKYAwwBupE45iRRJQaxGuVluvpVGCgchtAOHbHbUM6+NlsD+VGJa0qvlm2io8nKpTOF\/eRv3HcaImhbUUxQ20pYrj6FxzSpJ+Md4raWdRYIS4ZbVglXHC6rcfnWST\/AA349J2aq2W1QUlakqKI9EXjt2Z1jdatLEMJbSCFKBSAcxJME8BjHRVrbNFuXSpLsNwSCXHBdBzF0GIFDpds5ZzlJNxJuonMgecs71KieBG+jTGnUY6e2aWxtfUowgKbkfCOGNFizDyrX2j+BdCHRDxXaG0D1knsM0XbN9a19o\/gXV8HZmLP9GjpUqVVM5S6yfwvtK\/Caqwan62vXEtqOwqw3801SMFwgFYiRIAyiqwVoVj1rt7aBCyccIAJnowof2sXb6QCkSSnoBmPnHXREQmIMY76jW\/RSHIJAOOOQkbRhU82Fz7FcOVQezJarWS40T6yyeGAEfCvtu0ZfN4FSDjKkEpUQNhjPrrXWHRSG8hnv+fGpH0RAkXRj+8aj7WX6aV1cPwDVo0SpKiU33VrUQZ5yjlEHdkN2FTLPoRxRVeCklOEbJBxHVRYS0lMgJAHQIjs\/eFRw0ASIHOzqi6XVNkpdVbuKG9XYbZQ0eaoCIII4Z9VWhqHaG5lJAlIP7FfNG2oLQMZUkAK48KrxSSojyt7O9IfVr+ya6aOA4CuNIfVr4Go9lvlKSsQSAcMoIrsFYshy329oAoXJkEQATPXl8aH1qSQgoi7BMcMxPH8qJKUxBAg76h27Q6HCJAIkzliIO0bZg1PNhc+xXDlUO5mNWrHybCRvKjwkkgUzbtF3pWFKQYJJQopKt16MD11s7DotCJAAx7J3jdT5saMQUiN2zrqPtZdrNK6uC+gMOaIWFAIC3VrJn0lEztPq47coqbZtCLVJIMgwcIxyPxOXTRYDSQIugDZAjGo7bQxSAOcfjVF0q+2Rl1W7SOtDrCW0N5KSkAg4f8AdTjVfa0SFTgUjrmcCOuOynrDag4iQRIgKjYYBI+NWapaIJ2x8moKD5Vzgj5GppqAn61zgj5GuLuD7Ema6SaaqO5aFX0toEkySTkAP2acQsAsDM1nNaLUh1A5MFS0KmYIA357cMqu2k5SJp7kgebs3VycG40NCSi7BhbbPyriE4ecmZyBnPgRWrtTQKbsTsg4gjpqyVoBsqUSBnhw2jDpxmrJFhRdAIBjfWP2skrs2rq4fgM9NaENyOVdCVHFAWq7dkSADs6KpG9Gu866hVxJulQGGcCN+\/CjMuyozupkZSJI7a4tLYIi7x3bIqkelf8A6Yk+ri\/FGD1a0QWn0LIJAxOGI2HCiTYXQpxopM88\/gXUFsHzsOaAOqvlhBFqsxGSlLnhybhx6x8arHEoJpGeeRzds2tKlSpDhHtlhbdADqErAMiRMHeKZGh2PZj40zpsTyYOUqw6qr+QT6orqsKLfxUz6g+PfS8VM+oO099VHIJ9UV9DCfVFdphRbeKmfUHae+l4qZ9QfHvqtFnR6o7KwXhZ08qzMpZYF1x4kcokkKQgQVFMZEyBMjOh2gSsJ\/ipn1B8e+kdEs+zHx768w6H0zag6m\/abQQcILzhB7VU7b37cm0Fv6VaETikF9yDO6VEVPmP6bPS50Mx7JNfEaEs4MhpIO8CDQPsFqeKVIectCFjCeVcIIwxBnBQ3xBrrWG2qbbSW7U7ORPKrEHCMCqNk7Nu+leX6HWH\/Q4HRDG1sHjJpDQ7AybT8aG2qutCLVZlhXMtDQhUSJPoqG4mDhvBrZtMJgc0ZCqrfYk1Xct\/FLPsx8e+l4qZ9Qdp76rRZ0eqOysP4VtOqstnS2wm64+SjlAYU2kCVKTAz2TIiaHpHErCV4qZ9Qdp76Xipn2Y+PfXl\/RWmrUHUldptBExBecIPaqNtSNKP25L9z6TaG70KTLzt0g47VR++ql5j+mz0x4qZ9Qdp76+HRDPsx8e+gXo60v3br7loQoCJ5Vwhac5mcFDeBkK709a1IZSpFqdvZK8ssHZB86NnDPfU\/V2P6Ou4cDoZj2Sa+I0LZxiGkic4wmh3qDrMi1tltwAPtQF4ecMbqssJjt41qyyncKstqyTVOi88Us+zHx764VoSznEtJnfGPbVIWhuriwoBccBEgXIByEgzG6u0cL3xHZ\/Yo7KSdB2cGQygHfFQRZ0eqOyhB4WdZHhaE2WzlTKWwFKW2tSVLUrzUkpggAYxJ84bq49HUrDj4pZ9mPj30vFTPqD499ebNXtJWpZU39IfUpQwl5yRlkSrCo1gtOkC4Ui02i8kmW1PuYxsxJ3dm0UnMf02enPFTPqDtPfS8VM+oO099BKzWlxYRedtCFSJBdWcRn6WKT+VRdNabes76FNPKcAF66VqUlQEyFAnERO+IngvrbG9HQd\/FLPsx8e+l4qZ9Qdp76yOr2lmbYyl5sAXhJScwclDpg4VYllO4VarI1ReHRDHsx8a+s6KZSoLS2kKTiDtBgjDqJHXVAWhup2wpAeajDnH8C6KYGnpUqVKBV6azb4q+VQpqZpwwW+KvlUDlBTIDua6TTXKCukuCu0FjylgAk4AUGtcVOWm0rWZCUc1AkAADKf6iZovWw8w\/HdHTQl0g7zjtN5ajGJzJyNSysriVmO1ZsqnbckHJs3lf2\/7oysci5CVFPBUZ9eRrJWbR7bVo5VAEOpT5oAThExBxJOJO0mra3asuPqStp5wJEEthZQk4ifN6xjOys\/lI1xjxiWGmdCqSklhKFpObatmfmnhsoO6wqcC1JWlQMkAGRh0bwN9GiyWFyzsqQpznBM443TPVIA4ZVgNedXXYW446VQFFJJGMwEpCYhOOMihd9g460Ufg9tBTaoJMKQpBnbkUzvxFehGchwFBtOjENuMci2lPOSDdESEqTJO\/CcaMDLggcBV8UuVmXLHjRKmMaDuurjlqtKlGQhvmoGAAA2npJosW4nklRuNCrTDpDi9p5RwmZ9ZV0YcO3jXcr0cxK2YjQlkU7bUoOSDKuAxz240Z2C0vmqu4RgqIB2Z5Gsm1o9tt9L6QIdQBIACcInbionEk7T2WukdW3LRdUy+4kDzkJWUJVMZ3eHxrO3ylRrjHjEtNLaGKUzZ0oUDEtmQP7SPlQd1hU4lSkrSpMnI4YZ4HbHdRmsVgcs7SkqWSQlSgmZCdwnCRFYPXjV966txx4rASpSSYzu4JSgCACYM54ULvsHHWig8HNqUi3N84hKgUGdqYN0HoCrvZR+GVBvxSlAZDCAFmBKRio83Enbv6zRfsrZSgA5xV8Mrsy5Y1R2ab0f9Y7\/AI\/kacNM2FXlXf8AH8jVmRJWkrUGmlLiYGA3mgRpphxZctCyStRKjj1wBnAwEUZ9a1f+OvgqPdV+U0NwUqeCVhN0mOdFw\/aG6Y6M95qOWWy+KNlH4MrPLq31ZJ5o4nOilZrMw8ReuE9MT1GspoCwJYUtnLnKPGceyDU9zVF5bhWh5a0nzQXCAjARCcUmMTlJnOoeUjUo1FI+616KdQ2q4gOojA\/xE7vtcaEGlXFFZvXgZk4QQeGyjzbLO5yYaS8Qoqu34BMXZ24ThE0MdK6tFNob5c8oVLghRm8EpWoqUdmQF3LCiNXbFlF1oufAxalXnkFQukhd3+qIUR\/xworKoY6s6PItqQykJSBKgkQkCBu6qJxFacMuUTLmjxkcGu7J9c19s\/gXXBruyfXNfbP4F1RkjTUqVKkAp9Yf4fFXyNVU1aax\/wAP7SvwmqiapHsKzua6Qaamu0mmAddxSRhiNuIoVaVSeUcAMEEkdGJNFRJrA6w2O7alCJvCRlGJE8fS7az9QtWX6d7oxeg7X\/5KicApIHC7AAnomiZoy1lAmQBhjQ6s1hCLalJxSuR2pMzWwZXyBuuSWjgF7h\/Xu3TlWWTtm7HqNF1pC0qTfMoWFpIxWExOAnorFay6QLzqGQZi6pUbh5vaoT\/aatNYWLMw0XeUSsJHNbCUXlHEhN7M\/vZWLsDir3KLMrUbyugnZwAkdVd13O5Gkqi+5rtGEF5MbA4P+OzqiiIwcBwFDLVVRW6o+qlR35zRKZOA4CtPTeJg6nyJK8UkbwRjl10LdNNS66PSlRG4G9I\/FRQQawes9lu2okekmeOIkHsPb2HUL42HTv5UYjRFqH0qcgpN04bUn\/vtol6LtRQJkRvodiwXLaicUrVB60wRwrYsq+jkBclo5K9UbldH9Xb05JO2bsapF5bbWpJUuULCkxisJiYA6prE60aQLqmmAQfNvRlAj4FUdU1bacstlaZLhcSUgYICUXlZwkK84zNYexPKUrlXPPUbxnZOSeAEjqptXY2RpKovubTQJH0pnbCldOMH40R1ULdSlly1J\/pvK\/L86KJrR0\/iYc\/kjk1Fsx8q7\/j+RqSahsnyrnBHyNXIMWnklTCwNqSO0Efn8KFGkF3QVjJJy44k8QQDRicQFJKTkQRQwtNi5zrZGSlSewCcNsH41n6hU0y\/Tu00Veptom+knG+SOmcT8TRI0fbSkBJUEzvob6raO8q60owQEqChsM4R29hrWWV1M8haOaSear0VEYyk78JjP51mb+Rth40yxtNrKAEm4YWFXr8nDMBOZOPxrEu2zl7UVk81AIH2pk9kJ+NStby3Z0gMrC3l81N1KRcBkKXCc4BNUFhVyYIG7rO3rJk413XcMjV8YhF1FMuumZ5qPzrYKrF+DcSHF74T2Vs1Vrw+CMGbzZya7sn1zX2z+BdcGu7H9c19s\/gXVGTNNSpUqQ4Uusv8L7SvwmqaatNbXkoDRUoJF4iSQBN076z\/AIxZ9q376e+qR7CsmTXaTUDxiz7Vv3099RmtIJWtUOoCE7Lyecdu39xTrZwuFvhImCegbe3Cs3rEHHbjgaKAmcTiVDb0AVeM2psem2eKhw39NOC0snNxHviPnS5MfJUNCfF2D6w2UKtKFKwukmP6oIHUQa0dpZJgcatWmbOPTbOJ9JO8kbdhyNTja2Y+sR7yaze0r7\/hr94vz+g10hqq3fFxnnAE8xOMmccBnURjVa0CCtEXjF2RIxzOwTuopKtrWEOIn7Se+mH7U2cb6MP6k59tUj0sVqTEn1bl2VGa0LodTHKqumCm6ZzE49cTWrZOA4CoVrtTfJqh1BUebF4Tu31FZ0glaoDqAhIHpJxVuONVhBR0iE5uTtl0p8JEwT0Db+VZ7WEOOhCw0UhBOJxJGIjcNvGrhq1tjEuN9akx86dFpaOBcR74j50ThyVHIT4uwe2WzhVoQokgJVJ3XoMdR\/Ls0loaJgZVaoZs49Ns4k4qTkTMdRyNTfpTMfWI95NZvaV9\/wANfvF+f0HGkdVW7ybrEqzN1OOM480Z1BZ1XtAhS0RJuhM87idgGFFNdta2OI95PfTNotTZxK28M+enPtp49LFd2JPq3LsqM9q3ohVndU5cOUESJE\/PbWuZfCxhszG0VX\/TGwCeVROUXk5dtRHNKNNuBXKJKSIVBB2pzx2Sr9mqxxqMaRFzcnbLw1CaPlXOCPkadNta9oj3k99V3Lo5VauVREIwvDHBWI+VEds5LsWD9rujBKlHcP8AdZHTjThdU4W7oUPNzx6Tljj8K1Tdqbg89vjeEj40nnGVpILiMRHnj4Y0ZcXNUdxZODsxWrVmAW4raQAnpTie3ZVnbrAHQpChKTEpMEHqNaBkWdJBC2wR\/Ungdu3dUlVra9o37yah7T65fw0+8X\/P9BdbNV+cssMGdl0QMDBE5DA07ZNVnrwS4mebPNOUk4dXfRK+nNzIcR7ycu2o7lqbmQtA3QpPHfTx6WK02JPqpSdpUV+q9mNnbhScFGZEYcRWhCwRIMg1Wm2NCByzcGJ5ycM+npqPYNKtJWpsuJxJKTeEbMJnfNV4pR0Q5OT2XBpyx\/XNfbP4F1DNtb9oj3k99O6PtSFPshK0k3jgFAnzHNlIdNdSpUqU4Nv2hCBK1JSDgLxAk9dM+MmfbN++nvqNpnNvir5VCrqQFt4yZ9s376e+l4yZ9s376e+qmukmu0BaeMmfbN++nvr4rSjAxLzQHStPfUAUI\/DVpR1a27Gk+TjlHANqvQB3gYmPsmuPSOpWGgaZs38wz94jvpeOrN\/MM\/eI768s6uMw8EACVymBt3THbUx\/VF1L5C0FIklLgBuHdJTEfCp80UWJ0emvHNm\/mGfvEd9ffHFn9u194nvoF2ayFLQFobTAMcoPSEg47lDf1nIzXa02tsKRySigjdhBwIM7NkHL4Unq7qhvR13PRA0kz7Zv3099Lxkz7Zv3099C\/VHW36ZZHEu\/XNgpUdivVVGyR1SD0TumTgOAq62RaotvGTPtm\/fT30jpJn2zfvp76rwaHvhi0u63Z02dowXlXV7+TAJUOiTdHSJoapAlYThpmzfzDP3iO+vnjqzfzDP3iO+vKOi2w08g4AyP3hVxpjVN0OhSmzcUAb6UyEnpjEcanzRRYmz0v45s38wz94jvpeOLP\/MM\/eI76A+jLCttBS6hLiRgFg4jDFKpJkR15DdTWsL7AZSlMg4ZjMZAjowz\/wCijy77DLDruegPGbPtm\/fT3198Zs+2b99PfQk8G2uBdBsr5lTYBQuZKm8AJ3wSBIywnI0QFVeO1ZFqnRdeM2fbN++nvr74yZ9s376e+qE0zYfrXf8AH8jXeJw0njJn2zfvp76XjJn2zfvp76qa+pNFAWvjJn2zfvp76XjJn2rfvp76rgazvhA0w5ZbE44yQHMEokTiSBh0gSeoVxqgNedM2b+YZ+8R30jpqzfzDP3iO+vJBs91V9WJmSTmT07TWl01q888hp9LZWkjG6AVAb+mpuaKrG2ekvHNm\/mGfvEd9LxxZ\/5hn7xHfXn\/AEDodxsQQFtxMYhxJ2ETj8IwqdbVsJaWmLit2c5FXCdmzLppHloZYb+w6jSbHtm\/fT3123bmlEJS4gk5AKBJ24AGgR4OdblNvJsqzeadJ5MyAULAxSBOAO47cqLtmMutfbP4F1aO1ZKUaZoqVKlQKVems2+KvlUKpenVQW+KvlVfywpkgsdrtNR+WFdodrtBZ3anrqFKzgYCQJOQGPTQR0xZVOuOPLUCpZJBM9UQcBBHbRl0orySozw+Yx6s+qhMt6LhzCQnDZkCeOE9U1HK6otiVlDqBYybUp1YjktnSf8AVFazaRaw5Q3RvMR2Z\/CKzFlLabQ4ULCwshSztvEZK3HDLpFXC9T2LQvlhdC8JvJvDbEA5YnZuG6od5bNajUdEvTmiitBXZnAJ9HAoVwPo\/EUFtYrM424UOpiN5kRxH+j0Ub3NHobaLSVKgFCSQTOJAUQdlYDWfVhlpwEEEqcQAM81hSys5rhIMTlQqu2clF1oqvBs4UvLkkBTd0bic0jp29vCj2zkOAoTIsanLQ2U+iAtWzBJM0VGHcBwFXwtyRlzRUWiUVAAk5Cg9rY0p+0uOOHLmpE4JA2CDvns2UWbWqW1wJwOG+hTphR5RYkjyjhnbN5cYjdHyruV1RzErZjdA6OUu3BCskc44HEDKJxMmjBZ9INjz8AMzu\/M9QNZRK2uWQ6gi+psBSfSSBkIjBO7fieN5aNWGLZdUqLyRhOIxicN+Axz7TWdu5bNkY1F0WmkLCh5F+zOhKt6YKFdBGw9PSd9B3W6wPMuEODziSDgQciY3fCjEzolNnQpCDKrqiYwE5iE5JAyisRrlq2ylC35klJUJJK1Kg3ZUcYk4jI4bhRq9g460ZHUJ25bGlzCReBIxABBHzINehUKBAIoSr0eVhhpET5qcI2J7qK9mZuICdwFXwyuzLmjVfp0aZsX1rv+P5GnjUazLh13\/H8jVmQLCvqaZ5YV9D1FBZJTQ18Id+0PJR6DeIG8kwVEf2qjhRHSuaGWtxuuqGfNQmd8TPCVTU8rpFMStg40lo1RtDbQyWRBxiDx6KL+jbQhtKUbEgDYMBhmSBWV5RtSGiVjlULVCSc5zKQNpEHcMq0K9DMW1oIdHSOg9IyNZm7aTNkI0m0XbrbNoR5JwX05KTmnfI+dC3XbRdoaUVrhQOF9MY\/257Tl8KJWi9W27LdgiTAASLogYGQMCTmTnNZ7WPVtt1PKrUZlSVXiScFYhHqZYEUOr2d4trQKNFk8sgjMKSTHQZx3V6W0HaErLCkmQTP\/BdB7R1nSLJdSAZKljfzlkjHObpAnjRW1RsCmUWZCvOnH3HKtilbaM2WKUUzb0qVKqGcp9Yv4fFXyNVM1a6yfw\/tK\/Cap5qkewrO5pxBpiacSaYDq1YoVw\/3Ql0g1goDNGIwwkZE\/EdZouJND\/TNiu2lxPoq52WzHAH+41m6haTNHTvbRjtWbZDy5yVBx2GYx+FEqxWu4mSo3dpEmB1VhdDWEJthT5yVpXOGzd8MuFadtRs5IUCtk5nNSR0jNQ6c9++srds3QVRol27SSE3koewWRI5NRVJMi6YAGzEznWPt1u5e1581sn3tvYMP7jUzWfTdkDd2xrvvKkI5xIRsKoyBAyrO2JPJgAcM5PSeOXZTa7hka7RNpq8qXVkeyX8xW9YOA4Ch5qSkqDyzsQQOvOiAycBwFaun8TB1HmSZkGhdptvyziFTjePEzO3pNE9BrFa1WMi0hQGC09V7Pt5tHUL42HTv5UD3RlqKbVKtykq6sZ7MaJWjLTCbyTIgZY\/AVh3LGEWxpaclLAI\/fH94Vq+SUwoKbF5BzRtTvu7x\/T2bqxydm6CpFhbdLNplaHgCpON5tahGUiAPnsrG6xW7lXG2JJCbhVOeEXZ3GedH9NWum9O2BLZUhRU7kG5VF\/cU5DHHGsbYbw568Vk3ln+o5\/mKbXc7kapKJtNBEfSmowhUf8T\/AKokmhZqMCu1CfRlXXl++FFJVaOn8TFn8kcmoLZ8q5wR8jU01AQfKucEfI1dEGSprpJpqa6SaYUkpVWA1ubItAMTgTjlkqOyRW7QazOvFlkNuRkoBXDCJ\/e2pZlcCuF1MFukHFIfQPUWI4HAz04xRD0LaAQCk9XTWM1lsPmrHnJmekQPzFa02RSQHW\/OwvJOSssRuV89u+sLdpHoQVWW1o0k3grlbq0mOchRE5wRd3VkdaNMkthAXJdKjIBTgTziEnEAY57at7bpuwhJU8pSHADeRKkk9QzrBh0uOLdUIvGEJGSWxggDjjxmu6Gm0o\/HuaFqAlCRh5vzGH50XbGfKM\/a\/wDRdBfRS1OPtp2KUB1Y0aLIPKM\/aP4F1fB9mPP9GkpUqVVMxSay\/wAL7SvwmqaautZUKIbKUqVCjN1JURzTsFUlxfsnful91Ui1QrPs12FRTZQv2Tv3a+6o9msbhUpa0PAzzRya4A4RTJo4SnX1AcwAnpy+FZ3TtgfWpLq7sgZJyCdueM92VadplY9Bz7tf6a7S2drbn3a\/00s4RkqseE3B2kYDQ1jIevqSZMgHZeMfMD97L1\/Ry1HFJy3Gr9uy3QAG14CPq15bB5tPEH1HPu3P01H2sV9mj3cvwwekdV3HFEJbGV0EkDcQd+fRUOz6lLQpF5SSTN7CEgjIcOnpoiqQo+g4P8a\/0004ys43HN31a\/008enxx0JPqZy2UFg0UWG3SmIMgjcN4OW2rxpXNHAVxarMsoKUtu3jgRcXBxw2VFasjqlytt4JSkAC4vzt\/m9VUiorSIybe2T1PGOaJPwqj03Y7Q8lJVcF0kpSnMnHMn8oq+ZZWDNxwEf\/ABr\/AE04hs7W3Pu1\/ponFSVWEJOLtA6s9iPLJWtJhJmekYA8QTB6q0r9hWqOaew1eoskZNuZk\/VrzOfo7afumPq3Pu3P01n9rFfZp93L8MPpDV1aykJbmMyYAxzz6Kq06kOIgrUJvAEAGAnaZ2nKiQtKj\/Dc+7X+mm3mln0HMP8A4147fVp49Pjj9iz6qc\/8M9oXQamHCtN2QMthnOI4VorPaQqREEZj8xTfIrAPk3b3\/wBa4j3ai2ht1K0rQw6YEEXFA5pnNOOR7aqoxSpEXJt2yyNV6T5Vzgj5Gp5Sr2bn3a\/01CLDgcWrknYITBDa9kzspU9gxya6Sa4uL9k790vuqO9ZnVqCS28lAxJDasdwy3\/vc9oUmB4bMardKMPvNqQbiUdB5x27cqsUWZQ9Bz7tf6afuKJktuH\/ABr\/AE0SSaqwi6dg3tujVqUEKQTGcZ7bw6wJrT\/RlKQClJIIBGGyr42QSTyS5MA+Tc2ZHzc6eSkj+G5925+ms\/topXZqXVy\/DG6R0CtaISiSTtw4YmqhepLsqWohI85KBjeO2TkBtw30SCFRHJufdr\/TTa2lERcc+6X2ebTR6fHH7Fn1U5aqjI6L1aKFNr5oIEzviMxvz7K12jrUS+0lQhV85ZGEOT+fZTbbCsZbdywhteB7K60ewvl2DyTguqUVEoUAOYsAyR0x11RRhFNIi5yl3NfSpUqmAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQAqVKlQB\/\/9k=)","234fae62":"## Overview\n* Quick Data Visualization\/Interpretation\n* Image Augmentation\n* Imagenet\n* Transfer Learning","24401193":"We split the data into the train and validation sets. Here is the distribution of the split data.","26229e27":"Let's create the final input array with **42000** images each with size *(75, 75, 3)*","5c7b30bc":"### Loading the Data\nIn the code cell below, we load in the data and visualize one specific row. Additionally, we extract the labels from the input dataframe and one-hot encode them so that the shape is now (42000, 10) instead of (42000,).\n\nBasic Example of One-hot Encoding:\n![one-hot encoding](https:\/\/miro.medium.com\/max\/2474\/1*ggtP4a5YaRx6l09KQaYOnw.png)\n\nThe only difference is we have 10 categories (numbers from 0-9) instead of colors. ","39d2b1a6":"In order to apply convolutional nueral networks to the data, we need to shape it to the original shape of the image as opposed to the flattened data given. ","bb53eb2a":"**Data Imbalance**\n\nLet's check to see if there is any evident data imbalance. ","c2f9c585":"I hope this helped people develop a basic understanding of **Transfer Learning** and **Data Augmentation** with TensorFlow. Please upvote only if you found this helpful! Thanks!","ba43e7ba":"The barplot shows that there is very little data imbalance, so we will not have to worry about that. \n\nIn order to use the **pre-trained model** introduced later in the tutorial, we will need to convert each image into a size of at least (75, 75, 3). Due to the limited RAM, we will use the minimum size. Note that we also have to include three channels instead of just 1 (just copy the same channel 3 times) to make use of the pre-trained weights. ","60dadc9d":"# Import Libraries","9ad1e030":"**Vertical Shift Range**\n\nThis is essentially the same as width shift range except in the vertical direction. \n\n**Zoom Range**\n\nThis augmentation simply makes the image smaller or bigger by the fraction specified. This value is kept small because we do not want the number to be cut out of the image. \n\n![zoom_range](https:\/\/miro.medium.com\/max\/2538\/1*XCIOzkXS4E8yGvpRKiPTtQ.png)","859e5b9e":"## Transfer Learning\n\nMany features in general images are common and it is not worth starting to train from scratch. Usually the beginning layers in convolutional neural networks identify extremely basic features such as vertical and horizontal lines. This is what forms the backbone of tranfer learning. Using other peoples models, which have been trained on lots of data and are capable of identifying simple features, to fit your own data. \n\n**Imagenet**\n\nImagenet is one of the largest image databases in the world! Every year, they host a competition known as the *Imagenet Large Scale Visual Recognition Challenge (ILSVRC)*, where scientists from all over the world compete to create the best model. A couple years back, a group of researchers came up with the ResNet50, and now it's available to everyone! Learn more about the model here: [resnet50 info](https:\/\/www.mathworks.com\/help\/deeplearning\/ref\/resnet50.html#:~:text=ResNet%2D50%20is%20a%20convolutional,%2C%20pencil%2C%20and%20many%20animals).\n\nIn practice, it is best to use this model with image size (224, 224, 3) since the original model was trained with that size. However, for the purpose of this tutorial (75, 75, 3) will also work. Note that we specified the weights as ```'imagenet'```. This will automatically load those pretrained weights into the model. If we do not specify, the weights will be initialized randomly and we would be starting from scratch. ","988b4a9b":"### Freezing Layers\n\nThe whole purpose of using the weights from imagenet was so that we wouldn't have spend training time to learn basic features. Instead, we use the ones already learned. To prevent the weights from being modified, we set the ```trainable``` parameter of the first several layers to ```False```. This will prevent the weights from changing during back propogation. \n\nLearn how to write back propogation from scratch [here](https:\/\/www.kaggle.com\/saumandas\/neural-networks-from-scratch-tutorial)!"}}