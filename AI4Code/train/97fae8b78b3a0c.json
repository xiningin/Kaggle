{"cell_type":{"08be44af":"code","b2c1d138":"code","0aaaa3c9":"code","abbab801":"code","a8c58667":"code","625dae30":"code","61cfa7c4":"code","3a4f324d":"code","3aeee7db":"code","b6b698ec":"code","fe9eba66":"code","e377725a":"code","9f8bbb08":"code","bf543099":"code","419eeb00":"code","8af12889":"code","b0481d99":"code","9721e8f5":"code","a55e943c":"code","c1f57fd7":"code","5b954ff9":"code","25bb6186":"code","e68c02d4":"code","83ee644f":"code","25163dd1":"code","c6321a61":"code","63408a12":"code","1dd9059a":"code","c5273f61":"code","85fb0599":"code","052c44fc":"code","f3dda649":"code","3782e258":"code","e5f6ef15":"code","1eaa066d":"code","3b994e40":"code","400317c5":"code","dc04a5c5":"code","6a075eee":"code","a8601fc5":"code","c76d2e55":"code","e10c6449":"code","b47302cc":"code","25f100a6":"code","906dcf45":"code","8d45143b":"code","727cd770":"code","c4706c3c":"code","80fb9f94":"code","31e71ad9":"markdown","73d25e5d":"markdown","4bd04300":"markdown","38981d93":"markdown","a408b630":"markdown","baf0d75a":"markdown","26e56942":"markdown","9ab5e5a5":"markdown","c6ac0e4a":"markdown","2095061f":"markdown","20010e97":"markdown","cdeffc9d":"markdown","cf22fb29":"markdown","f33f55f3":"markdown","60837532":"markdown","45ef3343":"markdown","cb4aad7c":"markdown","557a4dd7":"markdown","74ced335":"markdown","c913ade0":"markdown","d0561bcb":"markdown","d3303f46":"markdown","52a9b9c1":"markdown","5c79c10e":"markdown","6ad38fba":"markdown","474ce288":"markdown","77a711f7":"markdown","859b3d8e":"markdown","9dbbbed8":"markdown","c78c57f9":"markdown","72cc7ff8":"markdown","3c8d3616":"markdown","df424b8d":"markdown","4551c056":"markdown","cbbc2c94":"markdown","c7eecc85":"markdown","137fcd35":"markdown","96dd6885":"markdown","58dff234":"markdown","d0bc442a":"markdown","f8448ff9":"markdown","bc368dc6":"markdown","92f5c0e5":"markdown","445f7bac":"markdown","e16f7f43":"markdown","90cb1dd7":"markdown","6498af1a":"markdown","3c0ea60c":"markdown","471d6577":"markdown"},"source":{"08be44af":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly\npd.set_option('display.float_format', lambda x: '%.2f' % x)","b2c1d138":"vaccinations = pd.read_csv('\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\nvaccinations.head()","0aaaa3c9":"vaccinations = vaccinations[['date', \n                             'country', \n                             'iso_code', \n                             'daily_vaccinations', \n                             'people_vaccinated_per_hundred',\n                             'vaccines',\n                            ]]","abbab801":"vaccinations.select_dtypes(include=['object']).isnull().sum()","a8c58667":"vaccinations.loc[vaccinations.iso_code.isnull(), 'country'].value_counts()","625dae30":"vaccinations.loc[vaccinations.country == 'United Kingdom', 'iso_code'].unique()","61cfa7c4":"vaccinations.loc[vaccinations.country.isin(['England', 'Scotland', 'Wales', 'Northern Ireland']), 'iso_code'] = 'GBR'","3a4f324d":"continents = pd.read_csv('..\/input\/country-mapping-iso-continent-region\/continents2.csv')\ncontinents.head()","3aeee7db":"data = vaccinations.merge(continents[['alpha-3', 'region', 'sub-region']],\n                          how='left',\n                          left_on = 'iso_code',\n                          right_on = 'alpha-3',\n                         ).drop(columns=['alpha-3'])\ndata.head()","b6b698ec":"data.columns = ['date', 'country', 'iso_code', 'daily_vaccinations', 'people_vaccinated_per_hundred', 'vaccines', \n                'continent', 'region']","fe9eba66":"data.continent.value_counts()","e377725a":"data.loc[data.region == 'Northern America', 'continent'] = 'North America'\ndata.loc[data.region == 'Latin America and the Caribbean', 'continent'] = 'South America'","9f8bbb08":"data[data.continent == 'Oceania'].country.value_counts()","bf543099":"data.loc[data.continent == 'Oceania', 'continent'] = 'Australia and Oceania'","419eeb00":"data.isnull().sum()","8af12889":"data.loc[data.continent.isnull(), 'iso_code'].value_counts()","b0481d99":"data[data.country.isin(['Cyprus', 'Turkey'])][['continent', 'region']].drop_duplicates()","9721e8f5":"data.loc[data.country == 'Northern Cyprus', 'continent'] = 'Asia'\ndata.loc[data.country == 'Northern Cyprus', 'region'] = 'Western Asia'","a55e943c":"data.loc[data.daily_vaccinations.isnull(), 'country'].value_counts()","c1f57fd7":"data.loc[data.daily_vaccinations.isnull(), 'date'].value_counts().head()","5b954ff9":"data.loc[data.people_vaccinated_per_hundred.isnull()].shape[0] \/ data.shape[0]","25bb6186":"(\n    data[data.people_vaccinated_per_hundred.isnull()].region.value_counts() \/ data.region.value_counts()\n).mul(100).plot.barh(color=\"teal\", figsize=(15,5))\n\nplt.title('Missing people_vaccinated_per_hundred')\nplt.xlabel('percentage (%)')\nplt.show()","e68c02d4":"data.sort_values(by='date', inplace=True)\nall_countries = list(data.country.unique())\n\nfor country in all_countries:\n    data.loc[data.country == country, 'people_vaccinated_per_hundred'] = \\\n    data.loc[data.country == country, 'people_vaccinated_per_hundred'].fillna(method='bfill').fillna(method='ffill')","83ee644f":"(\n    data[data.people_vaccinated_per_hundred.isnull()].region.value_counts() \/ data.region.value_counts()\n).mul(100).plot.barh(color=\"teal\", figsize=(15,5))\n\nplt.title('Missing people_vaccinated_per_hundred')\nplt.xlabel('percentage (%)')\nplt.show()","25163dd1":"fig = px.choropleth(locations = data.iso_code, \n                    color = data.region,\n                    color_continuous_scale = 'rainbow',\n                    title = 'Regions with available data', \n                   )\nfig.show()","c6321a61":"data.vaccines.value_counts()","63408a12":"df = data[['iso_code', 'vaccines']].drop_duplicates()\ndf.shape","1dd9059a":"data.iso_code.unique().shape","c5273f61":"#create dataframe with one record for each country and type of vaccine used\nmap_plot_df = pd.concat([pd.Series(row['iso_code'], row['vaccines'].split(','))              \n                         for _, row in df.iterrows()]).reset_index()\n\n#rename columns\nmap_plot_df.columns = ['vaccine', 'iso_code']\n\n#strip white spaces\nmap_plot_df['vaccine'] = map_plot_df['vaccine'].str.strip(' ')\n\nmap_plot_df.vaccine.value_counts()","85fb0599":"fig = px.choropleth(locations = map_plot_df.iso_code, \n                    color = map_plot_df.vaccine,\n                    color_continuous_scale = 'rainbow',\n                    title = 'Where is each vaccine used?', \n                   )\nfig.show()","052c44fc":"data.groupby(['country']).agg({'daily_vaccinations':'mean'}).sort_values(by='daily_vaccinations', ascending=False)[:10].plot.barh(color=\"teal\", figsize=(15,5))\nplt.title('Average daily vaccinations by country - Top 10')\nplt.legend('')\nplt.xlabel('average daily vaccinations')\nplt.show()","f3dda649":"def plot_daily_vaccination_data(data, region_column, regions_list, vaccination_metric, plot_title, min_date = '2020-12-13', max_date='2021-02-13'):\n    '''\n    Plots a vaccination metric using Plotly library\n    \n    INPUT \n        data : Pandas dataframe\n            a dataframe holding the data to be plotted \n            must contain a date column (unique dates), a region column and a vaccination related metric\n        region_column : string\n            name of the region column \n            (continent\/region\/country)\n        regions_list : list\n            list of strings with regions to be plotted\n            must contain values of region_column\n        vaccination_metric : string\n            name of the vaccination metric column \n            (daily_vaccinations\/people_fully_vaccinated_per_hundred)\n        plot_title : string \n            the title of your plot\n        min_date : string\n            lower date limit for the plot\n        max_date : string\n            upper date limit for the plot\n    '''\n    df = data[(data[region_column].isin(regions_list)) & (data.date <= max_date) & (data.date >= min_date)]\n    fig = px.line(df, \n                  x = 'date', \n                  y = vaccination_metric,\n                  color = region_column,\n                  title = plot_title\n                 )\n    fig.show()","3782e258":"continents_daily_df = data.groupby(['date', 'continent']).agg({'daily_vaccinations':'sum',\n                                                               'people_vaccinated_per_hundred':'mean',\n                                                              }).reset_index()\nregions_daily_df = data.groupby(['date', 'region']).agg({'daily_vaccinations':'sum',\n                                                         'people_vaccinated_per_hundred':'mean',\n                                                        }).reset_index()","e5f6ef15":"all_continents = list(continents_daily_df.continent.unique())\nall_regions = list(regions_daily_df.region.unique())","1eaa066d":"plot_daily_vaccination_data(data = continents_daily_df,  \n                            region_column = 'continent',\n                            regions_list = all_continents,\n                            vaccination_metric = 'daily_vaccinations',\n                            plot_title = 'Daily COVID-19 Vaccinations - Summary per Continent in the first three months',\n                            min_date = '2020-12-13',\n                            max_date = '2021-02-13'\n                           )","3b994e40":"print('Maximum vaccinations in a day in a country - summary per continent: \\n====================================================================')\nfor continent in all_continents:\n    df = data[data.continent == continent].sort_values(by=['daily_vaccinations'], ascending=False).iloc[0]\n    print(f'\\t{df.continent} -> {round(int(df.daily_vaccinations)\/1000000,2)} million vaccinations in {df.country} on {df.date}')","400317c5":"plot_daily_vaccination_data(data = regions_daily_df,  \n                            region_column = 'region',\n                            regions_list = all_regions,\n                            vaccination_metric = 'daily_vaccinations',\n                            plot_title = 'Daily COVID-19 Vaccinations - Summary per Region',\n                            min_date = '2020-12-13',\n                            max_date = '2021-02-13'\n                           )","dc04a5c5":"print('Maximum vaccinations in a country in a day - summary per region: \\n================================================================')\nfor region in all_regions:\n    df = data[data.region == region].sort_values(by=['daily_vaccinations'], ascending=False).iloc[0]\n    print(f'\\t{df.region} -> {round(int(df.daily_vaccinations)\/1000000,4)} million vaccinations in {df.country} on {df.date}')","6a075eee":"Europe = ['Northern Europe', 'Eastern Europe', 'Western Europe', 'Southern Europe']\nAsia = ['Eastern Asia', 'Western Asia', 'South-eastern Asia', 'Southern Asia']\nAfrica = ['Sub-Saharan Africa', 'Northern Africa']\nAmericas = ['Northern America', 'Latin America and the Caribbean']","a8601fc5":"plot_daily_vaccination_data(data = regions_daily_df,  \n                            region_column = 'region',\n                            regions_list = Europe,\n                            vaccination_metric = 'daily_vaccinations',\n                            plot_title = 'Daily COVID-19 Vaccinations - Summary per Region in Europe'\n                           )","c76d2e55":"uk_countries = ['England', 'Scotland', 'Wales', 'Northern Ireland', 'Jersey', 'Isle of Man', 'Bermuda', 'Gibraltar']\ndata[~data.country.isin(uk_countries)].groupby(['country']).agg({'people_vaccinated_per_hundred':'max'}).sort_values(by='people_vaccinated_per_hundred', ascending=False)[:10].plot.barh(color=\"teal\", figsize=(15,5))\nplt.title('people_vaccinated_per_hundred- Top 10')\nplt.legend('')\nplt.xlabel('percentage of people vaccinated (%)')\nplt.show()","e10c6449":"plot_daily_vaccination_data(data = regions_daily_df,  \n                            region_column = 'region',\n                            regions_list = Europe + ['Northern America'],\n                            vaccination_metric = 'people_vaccinated_per_hundred',\n                            plot_title = 'people_vaccinated_per_hundred evolution in the first three months',\n                           )","b47302cc":"def fbprophet_predict_and_plot(data, region_column, region, vaccination_metric, min_date = '2020-12-13', max_date='2021-02-13', future_days=10, plot=True):\n    '''\n    Plots or returns FbProphet predictions for a vaccination metric\n\n    INPUT \n    data : Pandas dataframe\n        a dataframe holding the data to be used for training and plotting \n        must contain a date column (unique dates), a region column and a vaccination related metric\n    region_column : string\n        name of the region column (continent\/region\/country)\n    region : string\n        region of interest - the region to get predictions and plots for\n        must be a value of region_column\n    vaccination_metric : string\n        name of the vaccination metric column (daily_vaccinations\/people_fully_vaccinated_per_hundred)\n    min_date : string\n        lower date limit for the training data\n    max_date : string\n        upper date limit for the training data\n    future_days : integer\n        number of days to forecast\n    plot : boolean\n        whether you want a plot or the forecast\n    '''\n    df = data[(data[region_column] == region) & (data.date <= max_date) & (data.date >= min_date)]\n    df = df[['date', vaccination_metric]]\n    df.columns = ['ds', 'y']\n    model = Prophet(interval_width = 0.95)\n    model.fit(df)\n    future = model.make_future_dataframe(periods=future_days)\n    forecast = model.predict(future)\n    if plot:\n        fig = plot_plotly(model, forecast)\n        fig.show()\n    else:\n        return forecast","25f100a6":"fbprophet_predict_and_plot(data = data, \n                           region_column = 'country',\n                           region = 'United States',\n                           vaccination_metric = 'people_vaccinated_per_hundred',\n                           future_days = 55,\n                          )","906dcf45":"#all countries in Europe and United States\nall_countries_EU_US = list(data[data.continent.isin(['Europe', 'North America'])].country.unique())\n#removing countries from UK\nall_countries_EU_US = [country for country in all_countries_EU_US if country not in uk_countries]","8d45143b":"names = []\ndates = []","727cd770":"for country in all_countries_EU_US:\n    \n    #if there are no people_vaccinated_per_hundred values for country, skip country\n    if data[(data['people_vaccinated_per_hundred'].notnull()) & (data['country'] == country)].shape[0] > 2:\n    \n        min_date = data[(data['country'] == country)].date.min()\n\n        forecast = fbprophet_predict_and_plot(data = data, \n                                              region_column = 'country',\n                                              region = country,\n                                              vaccination_metric = 'people_vaccinated_per_hundred',\n                                              min_date = min_date,\n                                              future_days = 300,\n                                              plot = False,\n                                             )\n\n        if not forecast.loc[forecast.yhat > 25].empty:\n            names.append(country)\n            dates.append(forecast.loc[forecast.yhat > 25].ds.min().date())","c4706c3c":"#the code below is taken from https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/timeline.html\n\n# Choose some nice levels\nlevels = np.tile([-5, 5, -3, 3, -1, 1],\n                 int(np.ceil(len(dates)\/6)))[:len(dates)]\n\n# Create figure and plot a stem plot with the date\nfig, ax = plt.subplots(figsize=(25, 7), constrained_layout=True)\nax.set(title=\"When can we have 25% of people vaccinated?\")\n\nmarkerline, stemline, baseline = ax.stem(dates, levels,\n                                         linefmt=\"C3-\", basefmt=\"k-\",\n                                         use_line_collection=True)\n\nplt.setp(markerline, mec=\"k\", mfc=\"w\", zorder=3)\n\n# Shift the markers to the baseline by replacing the y-data by zeros.\nmarkerline.set_ydata(np.zeros(len(dates)))\n\n# annotate lines\nvert = np.array(['top', 'bottom'])[(levels > 0).astype(int)]\nvert[13] = 'top' #addded cheat - might fix later\nfor d, l, r, va in zip(dates, levels, names, vert):\n    ax.annotate(r, xy=(d, l), xytext=(-3, np.sign(l)*3),\n                textcoords=\"offset points\", va=va, ha=\"right\")\n\n# remove y axis and spines\nax.get_yaxis().set_visible(False)\nfor spine in [\"left\", \"top\", \"right\"]:\n    ax.spines[spine].set_visible(False)\n\nax.margins(y=0.1)\nplt.show()","80fb9f94":"print('Predicted percentage of people vaccinated until June: \\n======================================================')\n\nfor country in all_countries_EU_US:\n    \n    #if there are no people_vaccinated_per_hundred values for country, skip country\n    if data[(data['people_vaccinated_per_hundred'].notnull()) & (data['country'] == country)].shape[0] > 2:\n    \n        min_date = data[(data['country'] == country)].date.min()\n\n        forecast = fbprophet_predict_and_plot(data = data, \n                                              region_column = 'country',\n                                              region = country,\n                                              vaccination_metric = 'people_vaccinated_per_hundred',\n                                              min_date = min_date,\n                                              future_days = 150,\n                                              plot = False,\n                                             )\n    \n        #print predicted percentage of vaccinated people until June\n        print('\\t', country, '\\t', round(float(forecast.loc[forecast.ds == '2021-06-01'].yhat),2), '%')","31e71ad9":"# COVID-19 Vaccination Progress Around the World\n___","73d25e5d":"When it comes to the percentage of people vaccinated, after three months Israel is the leader, followed by Seychelles(that has only ~98k inhabitants) and then by the United Kingdom.","4bd04300":"To answer This question, I will make timeseries predictions using [Facebook's Prophet](https:\/\/facebook.github.io\/prophet\/).","38981d93":"### 3.3. Where is the vaccination program more advanced?\n\n___","a408b630":"Now we are ready for the **data enrichment** -> adding *region* and *sub-region* info to be able to analyze data at continent\/region level","baf0d75a":"### 1.1. The problem","26e56942":"<img src=\"https:\/\/worldfinancialreview.com\/wp-content\/uploads\/2020\/06\/virus-1.jpg\" width=\"500px\">","9ab5e5a5":"### 2.1. Importing and merging the data sources","c6ac0e4a":"Now the remaining countries with missing *people_vaccinated_per_hundred* do not have any value for the variable. Therefore, I will choose to analyze *people_vaccinated_per_hundred* only for Europe and America.","2095061f":"## 2. Data Preparation\n___\n","20010e97":"### 1.2. The approach","cdeffc9d":"The majority is around Christmas and New Year's Eve and the missing values are distributed to all countries; it can be the case that no vaccinations were performed. However, I will choose not to make any assumption and not to fill the missing values for *daily_vaccinations*.","cf22fb29":"In addition, I would need continent\/region information for each country. But, before joining the data, I will check for categorical missing values:","f33f55f3":"### 3.1. What vaccines are used around the world?","60837532":"Next, I will use the defined function to make similar predictions for countries in Europe and North America that have values for *people_vaccinated_per_hundred*","45ef3343":"We've seen where are vaccinated more people per day, but in terms of total people vaccinated per hundred, how is it going?","cb4aad7c":"**Daily vaccinations** represent the number of doses administrated in a specific day.\n\n","557a4dd7":"In order to illustrate the evolution of daily vaccinations, I will create interactive Plotly line plots using the function below (more details in its definition).","74ced335":"**Analysis per country: when will we have 25% of population vaccinated?**","c913ade0":"<img src=\"https:\/\/cdn.pixabay.com\/photo\/2016\/03\/31\/19\/17\/cartoon-1294877_960_720.png\" width=\"25px\" style=\u201dfloat:left;margin:0;\u201d> **Tip**:\n\n\nYou can interact with the map. If you want to see where a specific vaccine is used, you can deselect all the other categories from the legend, and select only one at a time (or you can double click a category).","d0561bcb":"Average daily vacinations by country:","d3303f46":"## 3. Data Analysis\n___","52a9b9c1":"I will start by creating a dataframe with unique *iso_code* - *vaccines* pairs. \n\nVaccines is a detail column for each country, so my dataframe will have the number of rows equal to the number of countries in the dataset.","5c79c10e":"Since I have renamed *region* column into *continent*, I would like\n- to split the Americas into North America and South America \n- to rename Oceania into Australia and Oceania (even if we do not have data for this continent at the moment)","6ad38fba":"### 3.2. Where are vaccinated more people per day?","474ce288":"<img src=\"https:\/\/res.cloudinary.com\/cognitives-s3\/image\/upload\/c_limit,dpr_auto,f_auto,fl_lossy,q_auto,w_1200\/v1\/cog-live\/n\/1271\/2020\/May\/21\/cgWhR4ArheoPsIKgoFRl.jpg\" width=\"500px\">","77a711f7":"The vaccination campaign started around three months ago already and with so many information in the media, it may be difficult to get the big picture.\n\nThis data analysis is focused on summarizing how the COVID-19 vaccination is going around the world. More accurately, it is focused on answering the following questions: \n\n* How many types of vaccine are used? Where a specific vaccine is used in the world?\n* Where are vaccinated more people per day?\n* Where is the vaccination program more advanced? When will we have 25% of the population vaccinated?","859b3d8e":"Next, I will create a dataframe to be used for plotting. \n\nThe dataframe will have one record for each country and type of vaccine used. This way, we can get the big picture for each type of vaccine.","9dbbbed8":"Below there is the progress of *people_vaccinated_per_houndred* only on Europe and North America:","c78c57f9":"We are missing *iso_code* values for the following countries:","72cc7ff8":"### 2.2. Missing values","3c8d3616":"The world is doing a great job bringing this pandemic to an end and the medical progress is impressive. However, we noticed that it is a real challenge to make the vaccines available all over the globe and that there is a difference between the progress in each continent.\n\nAccording to the predictions in this notebook, a lot of countries would reach the 25% of population vaccinated threshold only at the end of this year or even in 2022. This won\u2019t be ideal, but maybe in the near future we will witness day by day improvements when it comes to the availability of the vaccine and the number of people vaccinated in a day. Also, the fact that more types of vaccines are tested, accepted and used in the world can strengthen our hope to go back to a normal life.\n\nUntil then, take care, don\u2019t forget to wear a mask and hold on, because the end of this pandemic may be closer than we imagine. I hope the notebook was insightful, and as I am new to Kaggle, I would really appreciate some feedback. :)","df424b8d":"I will keep only the columns that I think will help me answer my questions.","4551c056":"We are missing *daily_vaccinations* info for 121 records. Let's see for which countries and which dates","cbbc2c94":"We are missing *region \/ sub-region* for Northern Cyprus","c7eecc85":"Timeline based on the predictions","137fcd35":"*people_vaccinated_per_hundred* represents the ratio (in percent) between population immunized and total population up to the date in the country. Since it contains the cumulative total until that date, I will fill the missing values for each country with the last available value.","96dd6885":"- this notebook is beginner friendly and contains step-by-step explanations\n- in order to be able to get a bigger picture in the data analysis, Covid-19 vaccination progress data is enriched with continent\/region information\n- for plots, I used ```matplotlib``` and ```plotly```\n- for predictions, I used ```fbprophet```","58dff234":"Percentage of missing values for *people_vaccinated_per_hundred*","d0bc442a":"Where will we be when summer starts?\n\nBelow there are predictions of the percentage of people vaccinated per country, until June:","f8448ff9":"Note that in our dataset we do not have data available for all countries in the world.\n\nIn the map plot below are colored all countries with available data in our dataset. Also, you can visualize which countries belong to each region. ","bc368dc6":"Renaming *region* and *sub-region* columns","92f5c0e5":"Preparing data for the plots -> aggregating at date and continent\/region level","445f7bac":"All countries are part of the United Kingdom. Let's fill the missing values with United Kingdom's *iso_code*","e16f7f43":"United States may have 25% of the population vaccinated by April 5, according to the predictions below","90cb1dd7":"<img src=\"https:\/\/cdn.pixabay.com\/photo\/2016\/03\/31\/19\/17\/cartoon-1294877_960_720.png\" width=\"25px\" style=\u201dfloat:left;margin:0;\u201d> **Tip**:\n\n\nYou can interact with the plot. You can visualize the progress by region in a specific continent by selecting the regions from the legend. Alternatively, only the regions of interest can be plotted.","6498af1a":"Unfortunately, for *people_vaccinated_per_hundred*, we have ~50% values missing.\n\nLet's visualize the missing values percentages per region.","3c0ea60c":"In order to illustrate where a specific vaccine is used in the world, I will create an interactive plotly map plot, as above.\n\nSince in some countries there is used more than one vaccine, some preprocessing will be needed.","471d6577":"... until then ..."}}