{"cell_type":{"8a0b65f7":"code","193215df":"code","ebff59a7":"code","34a30b72":"code","7ebf17af":"code","5ffd08e5":"code","161bbf08":"code","8ad06332":"code","2162d6fa":"code","93ce06cd":"code","571018c5":"code","f9face86":"code","ce8204af":"code","f1c45141":"code","79b3a80c":"code","d4fbbfc9":"code","cf70fc93":"code","e5a8da3d":"code","32e94bee":"code","be0bd66e":"code","9aee094e":"code","1468023b":"code","b2fc0139":"code","541a562e":"code","b9ba9454":"code","96fa4b9c":"code","25ee2aa9":"code","a918fba1":"code","d3a97fb7":"markdown","ed7f99fd":"markdown","f8bbeb05":"markdown","9cb7a5c3":"markdown","5fcbcba0":"markdown","977700ef":"markdown","fb21e39f":"markdown","abf1bc81":"markdown","f749fd08":"markdown","87f193fd":"markdown","fb31bdef":"markdown"},"source":{"8a0b65f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# First, look at everything.\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport cv2\nimport os\nimport random\nimport matplotlib.pylab as plt\nfrom glob import glob\nimport pandas as pd\nimport numpy as np","193215df":"# in order to import an image\nfrom IPython.display import Image\nim1 = Image(\"..\/input\/walk_or_run_train\/train\/run\/run_00061c18.png\")\nim1","ebff59a7":"# TRAIN\n\n# ..\/input\/\nPATH = os.path.abspath(os.path.join('..', 'input'))\n\n# TRAIN_RUN\n\n# ..\/input\/walk_or_run_train\/train\/run\ntrain_run_images = os.path.join(PATH, \"walk_or_run_train\", \"train\", 'run')\n# ..\/input\/walk_or_run_train\/train\/run\/*.png\ntrain_run = glob(os.path.join(train_run_images, \"*.png\"))\n\n# TRAIN_WALK\n\n# ..\/input\/walk_or_run_train\/train\/walk\ntrain_walk_images = os.path.join(PATH, \"walk_or_run_train\", \"train\", 'walk')\n# ..\/input\/walk_or_run_train\/train\/walk\/*.png\ntrain_walk = glob(os.path.join(train_walk_images, \"*.png\"))\n\n# ADD TRAIN_WALK AND TRAIN_RUN INTO A DATAFRAME\n\ntrain = pd.DataFrame()\ntrain['file'] = train_run + train_walk\ntrain.head()","34a30b72":"# TEST\n\n# ..\/input\/\nPATH = os.path.abspath(os.path.join('..', 'input'))\n\n# TEST_RUN\n\n# ..\/input\/walk_or_run_test\/test\/run\ntest_run_images = os.path.join(PATH, \"walk_or_run_test\", \"test\", 'run')\n# ..\/input\/walk_or_run_test\/test\/run\/*.png\ntest_run = glob(os.path.join(test_run_images, \"*.png\"))\n\n# TEST_WALK\n\n# ..\/input\/walk_or_run_test\/test\/walk\ntest_walk_images = os.path.join(PATH, \"walk_or_run_test\", \"test\", 'walk')\n# ..\/input\/walk_or_run_test\/test\/walk\/*.png\ntest_walk = glob(os.path.join(test_walk_images, \"*.png\"))\n\ntest = pd.DataFrame()\ntest['file'] = test_run + test_walk\ntest.shape","7ebf17af":"#TRAIN LABELS\n\ntrain['label'] = [1 if i in train_run else 0 for i in train['file']]\ntrain.head()","5ffd08e5":"#TEST LABELS\n\ntest['label'] = [1 if i in test_run else 0 for i in test['file']]\ntest.tail()","161bbf08":"# TRAIN RUN AND WALK IMAGES\nplt.figure(figsize=(16,16))\nplt.subplot(121)\nplt.imshow(cv2.imread(train_run[3]))\n\nplt.subplot(122)\nplt.imshow(cv2.imread(train_walk[1]))","8ad06332":"# TEST RUN AND WALK IMAGES\nplt.figure(figsize=(16,16))\nplt.subplot(121)\nplt.imshow(cv2.imread(test_run[7]))\n\nplt.subplot(122)\nplt.imshow(cv2.imread(test_walk[8]))","2162d6fa":"# create x_train3D and reshape it (coverting images into array)\n\nx_train3D = []\nfor i in range(0,600):\n    x_train3D.append(cv2.imread(train.file[i]).reshape(224*224,3))\n    \nx_train3D = np.asarray(x_train3D) # to make it array\nx_train3D = x_train3D\/1000 # for scaling\n\n# create y_train\ny_train = train.label\ny_train = np.asarray(y_train) # to make it array","93ce06cd":"print('x_train3D shape: ', x_train3D.shape)\nprint('y_train shape: ', y_train.shape)","571018c5":"# create x_train \n# convert to gray scale = (0.299)*R + G*(0.5870) + B*(0.1140)\nx_train = np.zeros((600,50176))\nfor i in range(0,600):\n    for j in range(0,50176):\n        x_train[i,j] = ((0.299*x_train3D[i][j][0])+(0.5870*x_train3D[i][j][1])+(0.1140*x_train3D[i][j][2]))\n\nx_train = np.asarray(x_train) # to make it array","f9face86":"print('x_train shape: ', x_train.shape)\nprint('y_train shape: ', y_train.shape)","ce8204af":"print('shape of train_run (original) image: ', cv2.imread(train_run[0]).shape)","f1c45141":"# ORIJINAL IMAGES\n# TRAIN RUN IMAGES\nplt.figure(figsize=(16,16))\nplt.subplot(121)\nplt.imshow(cv2.imread(train_run[8]))\n\nplt.subplot(122)\nplt.imshow(cv2.imread(train_run[11]))","79b3a80c":"print('shape of x_train (modified) image: ', x_train[0].reshape(224,224).shape)","d4fbbfc9":"# MODIFIED ONES\n\nimg_size = 224\nplt.figure(figsize=(16,16))\nplt.subplot(1, 2, 1)\nplt.imshow(x_train[8].reshape(img_size, img_size))\nplt.subplot(1, 2, 2)\nplt.imshow(x_train[11].reshape(img_size, img_size))","cf70fc93":"# create x_test and reshape it (coverting images into array)\nx_test3D = []\nfor i in range(0,141):\n    x_test3D.append(cv2.imread(test.file[i]).reshape(224*224,3))\n\nx_test3D = np.asarray(x_test3D) # to make it array\n\n# create y_test\ny_test = test.label\ny_test = np.asarray(y_test) # to make it array","e5a8da3d":"print('x_test3D shape: ', x_test3D.shape)\nprint('y_test shape: ', y_test.shape)","32e94bee":"# create x_test \n# convert to gray scale = (0.299)*R + G*(0.5870) + B*(0.1140)\nx_test = np.zeros((141,50176))\nfor i in range(0,141):\n    for j in range(0,50176):\n        x_test[i,j] = ((0.299*x_test3D[i][j][0])+(0.5870*x_test3D[i][j][1])+(0.1140*x_test3D[i][j][2]))\n\nx_test = np.asarray(x_test) # to make it array","be0bd66e":"print('x_test shape: ', x_test.shape)\nprint('y_test shape: ', y_test.shape)","9aee094e":"# Reshape (to be suitable for keras libarary)\nx_train = x_train.reshape(-1,224,224,1)\nx_test = x_test.reshape(-1,224,224,1)\nprint(\"x_train shape: \",x_train.shape)\nprint(\"x_test shape: \",x_test.shape)","1468023b":"# \nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 18, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (224,224,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.10))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(10, activation = \"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(6, activation = \"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation = \"sigmoid\"))","b2fc0139":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","541a562e":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"binary_crossentropy\", metrics=[\"accuracy\"])","b9ba9454":"epochs = 100  # for better result increase the epochs\nbatch_size = 3","96fa4b9c":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.1,  # randomly rotate images in the range 1 degrees\n        zoom_range = 0.1, # Randomly zoom image 10%\n        width_shift_range=0.1,  # randomly shift images horizontally 10%\n        height_shift_range=0.1,  # randomly shift images vertically 10%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(x_train)","25ee2aa9":"# Fit the model\nhistory = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_test,y_test), steps_per_epoch=x_train.shape[0] \/\/ batch_size)","a918fba1":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","d3a97fb7":"**LETS COMAPE ORIGINAL IMAGE WITH THE MODIFIED ONE**","ed7f99fd":"**TRAIN DATA SET**","f8bbeb05":"**TRAIN DATA**","9cb7a5c3":"**READ TRAIN AND TEST DATA**","5fcbcba0":"**CNN using Keras**","977700ef":"**TEST DATA SET**","fb21e39f":"**TEST (RUN AND WALK) IMAGE EXAMPLES**","abf1bc81":"**TRAIN DATA SET LABELS**","f749fd08":"**TO LOAD IMAGES**\n\nIn the dataset we have png images\n\n1. TRAIN DATA SET\n    1. RUN\n    1. WALK\n    \n2. TEST DATA SET\n    1. RUN\n    2. WALK","87f193fd":"**TRAIN (RUN AND WALK) IMAGE EXAMPLES**","fb31bdef":"**TEST DATA**"}}