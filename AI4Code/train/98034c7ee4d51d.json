{"cell_type":{"3d278d28":"code","a536be33":"code","53a54c8c":"code","9b20404e":"code","99babaf0":"code","59b74f11":"code","e4fa885a":"code","897d9f5b":"code","a84bfbe3":"code","ae348244":"code","2adf4aa5":"code","cd075d09":"code","cb3eed5a":"code","4faeddb7":"code","e8634cb5":"code","d54d1eb9":"code","d7ad5c3d":"code","d1445533":"code","ddec1cc7":"code","8eeb4f15":"code","f03eba87":"code","b4b755c8":"code","5ad3101f":"code","083fe41c":"code","6d79d2f7":"code","8ac9e03f":"code","0f7d00fd":"code","c25e105d":"code","d40073ca":"code","4c0d98f4":"code","ea523bc2":"code","cc2f8df2":"code","15ca31ae":"markdown","415213f5":"markdown","ccdbfb16":"markdown","6297a8e9":"markdown","2eefe3df":"markdown","d6a4c89b":"markdown","9054c12b":"markdown","ea757475":"markdown","b8a35f1c":"markdown","47176126":"markdown","5f1f082b":"markdown","ec92d782":"markdown"},"source":{"3d278d28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a536be33":"!pip install janome\n!pip install gensim","53a54c8c":"from janome.tokenizer import Tokenizer\nfrom gensim.models import word2vec\nimport pandas as pd\nimport numpy as np\nimport ast\nimport collections\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nimport re\nimport janome\nimport warnings\nimport json\n\nwarnings.filterwarnings('ignore')","9b20404e":"master_job_board = pd.read_csv(\"\/kaggle\/input\/datamixsalary-prediction\/train_master_job_board.csv\",index_col=0)\nlanguage = pd.read_csv(\"\/kaggle\/input\/datamixsalary-prediction\/train_language_skillset.csv\",index_col=0)\nframework = pd.read_csv(\"\/kaggle\/input\/datamixsalary-prediction\/train_framework_skillset.csv\",index_col=0)\nworking = pd.read_csv(\"\/kaggle\/input\/datamixsalary-prediction\/train_working_conditions.csv\",index_col=0)\n","99babaf0":"company_list = pd.merge(master_job_board, language, on='company_id', how='left')\ncompany_list = pd.merge(company_list, framework, on='company_id', how='left')\ncompany_list = pd.merge(company_list, working, on='company_id', how='left')","59b74f11":"company_list['employee_num'] = company_list['job_board_info'].apply(lambda x: ast.literal_eval(x)['employee_num'])\ncompany_list['location'] = company_list['job_board_info'].apply(lambda x: ast.literal_eval(x)['location'])\ncompany_list['salary_min'] = company_list['job_board_info'].apply(lambda x: ast.literal_eval(x)['salary_min'])","e4fa885a":"location_list = company_list['location']\n\noutput_hokkaido = np.zeros(len(location_list))\noutput_tohoku = np.zeros(len(location_list))\noutput_kanto = np.zeros(len(location_list))\noutput_chubu = np.zeros(len(location_list))\noutput_kinki = np.zeros(len(location_list))\noutput_chugoku = np.zeros(len(location_list))\noutput_shikoku = np.zeros(len(location_list))\noutput_kyushu = np.zeros(len(location_list))\noutput_okinawa = np.zeros(len(location_list))\noutput_oversea = np.zeros(len(location_list))\n\nfor ind,val in enumerate(location_list):\n    if '\u5317\u6d77\u9053' in val:\n        output_hokkaido[ind]=1\n    elif '\u9752\u68ee\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u5ca9\u624b\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u5bae\u57ce\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u79cb\u7530\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u5c71\u5f62\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u798f\u5cf6\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u8328\u57ce\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u6803\u6728\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u7fa4\u99ac\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u57fc\u7389\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u5343\u8449\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u6771\u4eac\u90fd' in val:\n        output_kanto[ind]=1\n    elif '\u795e\u5948\u5ddd\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u65b0\u6f5f\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u5bcc\u5c71\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u77f3\u5ddd\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u798f\u4e95\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u5c71\u68a8\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u9577\u91ce\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u5c90\u961c\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u9759\u5ca1\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u611b\u77e5\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u4e09\u91cd\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u6ecb\u8cc0\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u4eac\u90fd\u5e9c' in val:\n        output_kinki[ind]=1\n    elif '\u5927\u962a\u5e9c' in val:\n        output_kinki[ind]=1\n    elif '\u5175\u5eab\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u5948\u826f\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u548c\u6b4c\u5c71\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u9ce5\u53d6\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5cf6\u6839\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5ca1\u5c71\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5e83\u5cf6\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5c71\u53e3\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5fb3\u5cf6\u770c' in val:\n        output_shikoku[ind]=1\n    elif '\u9999\u5ddd\u770c' in val:\n        output_shikoku[ind]=1\n    elif '\u611b\u5a9b\u770c' in val:\n        output_shikoku[ind]=1\n    elif '\u9ad8\u77e5\u770c' in val:\n        output_shikoku[ind]=1\n    elif '\u798f\u5ca1\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u4f50\u8cc0\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u9577\u5d0e\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u718a\u672c\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u5927\u5206\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u5bae\u5d0e\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u9e7f\u5150\u5cf6\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u6c96\u7e04\u770c' in val:\n        output_okinawa[ind]=1\n    elif '\u6d77\u5916' in val:\n        output_oversea[ind]=1\n\n#set\n\ncompany_list['\u5317\u6d77\u9053']=output_hokkaido\ncompany_list['\u6771\u5317']=output_tohoku\ncompany_list['\u95a2\u6771']=output_kanto\ncompany_list['\u4e2d\u90e8']=output_chubu\ncompany_list['\u8fd1\u757f']=output_kinki\ncompany_list['\u4e2d\u56fd']=output_chugoku\ncompany_list['\u56db\u56fd']=output_shikoku\ncompany_list['\u4e5d\u5dde']=output_kyushu\ncompany_list['\u6c96\u7e04\u770c']=output_okinawa\ncompany_list['\u6d77\u5916']=output_oversea","897d9f5b":"company_list['position']=company_list['position'].str.normalize(\"NFKC\")","a84bfbe3":"def get_surfaces(text):\n    result = []\n    for token in t.tokenize(text):\n        partOfSpeech = token.part_of_speech.split(',')[0]\n        if partOfSpeech not in ['\u52a9\u8a5e', '\u52a9\u52d5\u8a5e', '\u8a18\u53f7']:\n            result.append(token.surface)\n    return \" \".join(result)","ae348244":"t = Tokenizer(wakati=False)\ncompany_list['position_tokenized']  = company_list['position'] .apply(get_surfaces)","2adf4aa5":"position_list=company_list['position_tokenized'] \noutput_coder = np.zeros(len(location_list))\noutput_engineer = np.zeros(len(location_list))\noutput_manager = np.zeros(len(location_list))\noutput_programer = np.zeros(len(location_list))\noutput_productowner = np.zeros(len(location_list))\noutput_cto = np.zeros(len(location_list))\noutput_scrummaster = np.zeros(len(location_list))\noutput_datascientist = np.zeros(len(location_list))\noutput_ai = np.zeros(len(location_list))\noutput_architect = np.zeros(len(location_list))\noutput_infra = np.zeros(len(location_list))\noutput_sp = np.zeros(len(location_list))\n\nfor ind,val in enumerate(position_list):\n    if re.search('\u30a8\u30f3\u30b8\u30cb\u30a2[\\s|$]', val, re.IGNORECASE) is not None:\n        output_engineer[ind]=1\n    if re.search('SE[\\s|$]', val, re.IGNORECASE) is not None:\n        output_engineer[ind]=1\n    if re.search('PM[\\s|$]', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('PL[\\s|$]', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('\u30ea\u30fc\u30c0', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('\u30de\u30cd\u30b8\u30e3', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('\u30de\u30cd\u30fc\u30b8\u30e3', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('PG[\\s|$]', val, re.IGNORECASE) is not None:\n        output_programer[ind]=1\n    if re.search('\u30d7\u30ed\u30b0\u30e9\u30de', val, re.IGNORECASE) is not None:\n        output_programer[ind]=1\n    if re.search('\u30b3\u30fc\u30c0', val, re.IGNORECASE) is not None:\n        output_coder[ind]=1\n    if re.search('\u30d7\u30ed\u30c0\u30af\u30c8\u30aa\u30fc\u30ca', val, re.IGNORECASE) is not None:\n        output_productowner[ind]=1\n    if re.search('CTO[\\s|$]', val, re.IGNORECASE) is not None:\n        output_cto[ind]=1\n    if re.search('\u30b9\u30af\u30e9\u30e0', val, re.IGNORECASE) is not None:\n        output_scrummaster[ind]=1\n    if re.search('\u30c7\u30fc\u30bf \u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8', val, re.IGNORECASE) is not None:\n        output_datascientist[ind]=1\n    if re.search('AI[\\s|$]', val, re.IGNORECASE) is not None:\n        output_ai[ind]=1\n    if re.search('\u30ea\u30fc\u30c9', val, re.IGNORECASE) is not None:\n        output_architect[ind]=1\n    if re.search('\u30a2\u30fc\u30ad\u30c6\u30af\u30c8', val, re.IGNORECASE) is not None:\n        output_architect[ind]=1\n    if re.search('\u30a4\u30f3\u30d5\u30e9', val, re.IGNORECASE) is not None:\n        output_infra[ind]=1\n    if re.search('Android', val, re.IGNORECASE) is not None:\n        output_sp[ind]=1\n    if re.search('iOS', val, re.IGNORECASE) is not None:\n        output_sp[ind]=1\n        \ncompany_list['\u30a8\u30f3\u30b8\u30cb\u30a2']=output_engineer\ncompany_list['\u30de\u30cd\u30fc\u30b8\u30e3']=output_manager\ncompany_list['\u30b3\u30fc\u30c0\u30fc']=output_coder\ncompany_list['\u30d7\u30ed\u30b0\u30e9\u30de\u30fc']=output_programer\ncompany_list['\u30d7\u30ed\u30c0\u30af\u30c8\u30aa\u30fc\u30ca\u30fc']=output_productowner\ncompany_list['AI']=output_ai\ncompany_list['CTO']=output_cto\ncompany_list['\u30b9\u30af\u30e9\u30e0\u30de\u30b9\u30bf']=output_scrummaster\ncompany_list['\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8']=output_datascientist\ncompany_list['\u30a2\u30fc\u30ad\u30c6\u30af\u30c8']=output_architect\ncompany_list['\u30a4\u30f3\u30d5\u30e9']=output_infra\ncompany_list['SP']=output_sp","cd075d09":"company_list.to_csv('train_data.csv', index=False)","cb3eed5a":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split","4faeddb7":"target_col = 'salary_min'\nexclude_cols = ['position', 'job_board_info', 'employee_num', 'language_skillset','framework_skillset', 'working_conditions','location','salary_min','position_tokenized']\nfeature_cols = []\nfor col in company_list.columns:\n    if col not in exclude_cols:\n        feature_cols.append(col)\n\nfeature_cols","e8634cb5":"company_list[feature_cols].head()","d54d1eb9":"X = company_list[feature_cols]\ny = company_list[target_col]\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, random_state=1234)","d7ad5c3d":"from sklearn.model_selection import GridSearchCV\n","d1445533":"rf = RandomForestRegressor(random_state=1234)\nparams = {\"n_estimators\": [700, 720,  740, 760 ,  780,  800], \"max_depth\": [3, 4, 5,6,7]}\ngscv = GridSearchCV(rf, param_grid=params, verbose=1, cv=3,\n                    scoring='neg_mean_squared_error', n_jobs=-1)\ngscv.fit(X_train, y_train)","ddec1cc7":"gscv.best_params_","8eeb4f15":"rf = RandomForestRegressor(n_estimators=780, max_depth=7, random_state=1234)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_valid)\nprint('RMSE: ', np.sqrt(mean_squared_error(y_pred, y_valid)))","f03eba87":"test_master_job_board = pd.read_csv(\"\/kaggle\/input\/datamixsalary-prediction\/test_master_job_board.csv\")\ntest_language = pd.read_csv(\"\/kaggle\/input\/datamixsalary-prediction\/test_language_skillset.csv\")\ntest_framework = pd.read_csv(\"\/kaggle\/input\/datamixsalary-prediction\/test_framework_skillset.csv\")\ntest_working = pd.read_csv(\"\/kaggle\/input\/datamixsalary-prediction\/test_working_conditions.csv\")\n\ntest_data_list = pd.merge(test_master_job_board, test_language, on='company_id', how='left')\ntest_data_list = pd.merge(test_data_list, test_framework, on='company_id', how='left')\ntest_data_list = pd.merge(test_data_list, test_working, on='company_id', how='left')\n\ntest_data_list.shape","b4b755c8":"test_data_list","5ad3101f":"test_data_list['employee_num'] = test_data_list['job_board_info'].apply(lambda x: ast.literal_eval(x.replace('nan', '0'))['employee_num'])\ntest_data_list['location'] = test_data_list['job_board_info'].apply(lambda x: ast.literal_eval(x.replace('nan', '0'))['location'])","083fe41c":"location_list = test_data_list['location']\n\noutput_hokkaido = np.zeros(len(location_list))\noutput_tohoku = np.zeros(len(location_list))\noutput_kanto = np.zeros(len(location_list))\noutput_chubu = np.zeros(len(location_list))\noutput_kinki = np.zeros(len(location_list))\noutput_chugoku = np.zeros(len(location_list))\noutput_shikoku = np.zeros(len(location_list))\noutput_kyushu = np.zeros(len(location_list))\noutput_okinawa = np.zeros(len(location_list))\noutput_oversea = np.zeros(len(location_list))\n\nfor ind,val in enumerate(location_list):\n    if '\u5317\u6d77\u9053' in val:\n        output_hokkaido[ind]=1\n    elif '\u9752\u68ee\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u5ca9\u624b\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u5bae\u57ce\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u79cb\u7530\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u5c71\u5f62\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u798f\u5cf6\u770c' in val:\n        output_tohoku[ind]=1\n    elif '\u8328\u57ce\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u6803\u6728\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u7fa4\u99ac\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u57fc\u7389\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u5343\u8449\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u6771\u4eac\u90fd' in val:\n        output_kanto[ind]=1\n    elif '\u795e\u5948\u5ddd\u770c' in val:\n        output_kanto[ind]=1\n    elif '\u65b0\u6f5f\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u5bcc\u5c71\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u77f3\u5ddd\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u798f\u4e95\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u5c71\u68a8\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u9577\u91ce\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u5c90\u961c\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u9759\u5ca1\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u611b\u77e5\u770c' in val:\n        output_chubu[ind]=1\n    elif '\u4e09\u91cd\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u6ecb\u8cc0\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u4eac\u90fd\u5e9c' in val:\n        output_kinki[ind]=1\n    elif '\u5927\u962a\u5e9c' in val:\n        output_kinki[ind]=1\n    elif '\u5175\u5eab\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u5948\u826f\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u548c\u6b4c\u5c71\u770c' in val:\n        output_kinki[ind]=1\n    elif '\u9ce5\u53d6\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5cf6\u6839\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5ca1\u5c71\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5e83\u5cf6\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5c71\u53e3\u770c' in val:\n        output_chugoku[ind]=1\n    elif '\u5fb3\u5cf6\u770c' in val:\n        output_shikoku[ind]=1\n    elif '\u9999\u5ddd\u770c' in val:\n        output_shikoku[ind]=1\n    elif '\u611b\u5a9b\u770c' in val:\n        output_shikoku[ind]=1\n    elif '\u9ad8\u77e5\u770c' in val:\n        output_shikoku[ind]=1\n    elif '\u798f\u5ca1\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u4f50\u8cc0\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u9577\u5d0e\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u718a\u672c\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u5927\u5206\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u5bae\u5d0e\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u9e7f\u5150\u5cf6\u770c' in val:\n        output_kyushu[ind]=1\n    elif '\u6c96\u7e04\u770c' in val:\n        output_okinawa[ind]=1\n    elif '\u6d77\u5916' in val:\n        output_oversea[ind]=1\n\n#set\n\ntest_data_list['\u5317\u6d77\u9053']=output_hokkaido\ntest_data_list['\u6771\u5317']=output_tohoku\ntest_data_list['\u95a2\u6771']=output_kanto\ntest_data_list['\u4e2d\u90e8']=output_chubu\ntest_data_list['\u8fd1\u757f']=output_kinki\ntest_data_list['\u4e2d\u56fd']=output_chugoku\ntest_data_list['\u56db\u56fd']=output_shikoku\ntest_data_list['\u4e5d\u5dde']=output_kyushu\ntest_data_list['\u6c96\u7e04\u770c']=output_okinawa\ntest_data_list['\u6d77\u5916']=output_oversea","6d79d2f7":"test_data_list['position']=test_data_list['position'].str.normalize(\"NFKC\")","8ac9e03f":"t = Tokenizer(wakati=False)\ntest_data_list['position_tokenized']  = test_data_list['position'] .apply(get_surfaces)","0f7d00fd":"position_list=test_data_list['position_tokenized'] \noutput_coder = np.zeros(len(location_list))\noutput_engineer = np.zeros(len(location_list))\noutput_manager = np.zeros(len(location_list))\noutput_programer = np.zeros(len(location_list))\noutput_productowner = np.zeros(len(location_list))\noutput_cto = np.zeros(len(location_list))\noutput_scrummaster = np.zeros(len(location_list))\noutput_datascientist = np.zeros(len(location_list))\noutput_ai = np.zeros(len(location_list))\noutput_architect = np.zeros(len(location_list))\noutput_infra = np.zeros(len(location_list))\noutput_sp = np.zeros(len(location_list))\n\nfor ind,val in enumerate(position_list):\n    if re.search('\u30a8\u30f3\u30b8\u30cb\u30a2[\\s|$]', val, re.IGNORECASE) is not None:\n        output_engineer[ind]=1\n    if re.search('SE[\\s|$]', val, re.IGNORECASE) is not None:\n        output_engineer[ind]=1\n    if re.search('PM[\\s|$]', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('PL[\\s|$]', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('\u30ea\u30fc\u30c0', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('\u30de\u30cd\u30b8\u30e3', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('\u30de\u30cd\u30fc\u30b8\u30e3', val, re.IGNORECASE) is not None:\n        output_manager[ind]=1\n    if re.search('PG[\\s|$]', val, re.IGNORECASE) is not None:\n        output_programer[ind]=1\n    if re.search('\u30d7\u30ed\u30b0\u30e9\u30de', val, re.IGNORECASE) is not None:\n        output_programer[ind]=1\n    if re.search('\u30b3\u30fc\u30c0', val, re.IGNORECASE) is not None:\n        output_coder[ind]=1\n    if re.search('\u30d7\u30ed\u30c0\u30af\u30c8\u30aa\u30fc\u30ca', val, re.IGNORECASE) is not None:\n        output_productowner[ind]=1\n    if re.search('CTO[\\s|$]', val, re.IGNORECASE) is not None:\n        output_cto[ind]=1\n    if re.search('\u30b9\u30af\u30e9\u30e0', val, re.IGNORECASE) is not None:\n        output_scrummaster[ind]=1\n    if re.search('\u30c7\u30fc\u30bf \u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8', val, re.IGNORECASE) is not None:\n        output_datascientist[ind]=1\n    if re.search('AI[\\s|$]', val, re.IGNORECASE) is not None:\n        output_ai[ind]=1\n    if re.search('\u30ea\u30fc\u30c9', val, re.IGNORECASE) is not None:\n        output_architect[ind]=1\n    if re.search('\u30a2\u30fc\u30ad\u30c6\u30af\u30c8', val, re.IGNORECASE) is not None:\n        output_architect[ind]=1\n    if re.search('\u30a4\u30f3\u30d5\u30e9', val, re.IGNORECASE) is not None:\n        output_infra[ind]=1\n    if re.search('Android', val, re.IGNORECASE) is not None:\n        output_sp[ind]=1\n    if re.search('iOS', val, re.IGNORECASE) is not None:\n        output_sp[ind]=1\n        \ntest_data_list['\u30a8\u30f3\u30b8\u30cb\u30a2']=output_engineer\ntest_data_list['\u30de\u30cd\u30fc\u30b8\u30e3']=output_manager\ntest_data_list['\u30b3\u30fc\u30c0\u30fc']=output_coder\ntest_data_list['\u30d7\u30ed\u30b0\u30e9\u30de\u30fc']=output_programer\ntest_data_list['\u30d7\u30ed\u30c0\u30af\u30c8\u30aa\u30fc\u30ca\u30fc']=output_productowner\ntest_data_list['AI']=output_ai\ntest_data_list['CTO']=output_cto\ntest_data_list['\u30b9\u30af\u30e9\u30e0\u30de\u30b9\u30bf']=output_scrummaster\ntest_data_list['\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8']=output_datascientist\ntest_data_list['\u30a2\u30fc\u30ad\u30c6\u30af\u30c8']=output_architect\ntest_data_list['\u30a4\u30f3\u30d5\u30e9']=output_infra\ntest_data_list['SP']=output_sp","c25e105d":"feature_cols","d40073ca":"X_test = test_data_list[feature_cols]\ny_test_pred = rf.predict(X_test)","4c0d98f4":"test_data_list","ea523bc2":"submitted_df = pd.DataFrame()\ntest_data_list['company_id']\nsubmitted_df['company_id'] = test_data_list['company_id']\nsubmitted_df['salary_min'] = pd.Series(y_test_pred)\nsubmitted_df.head()","cc2f8df2":"submitted_df.to_csv('ishido_rf.csv', index=False)","15ca31ae":"# **\u6574\u5f62\u3057\u305f\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u51fa\u3057\u3066\u307f\u308b**","415213f5":"# **\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3057\u3066\u307f\u308b\u3002**","ccdbfb16":"# **json\u30c7\u30fc\u30bf\u306e\u683c\u7d0d\u3057\u306a\u304a\u3057**","6297a8e9":"# **\u30c7\u30fc\u30bf\u306e\u6574\u5f62\u30d1\u30fc\u30c8**","2eefe3df":"# **\u90fd\u9053\u5e9c\u770c\u3092\u5730\u65b9\u306b\u30de\u30c3\u30d4\u30f3\u30b0**\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4e0a\u5b58\u5728\u3057\u306a\u3044\u90fd\u9053\u5e9c\u770c\u306a\u3069\u306e\u4e88\u6e2c\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u5730\u65b9\u30ec\u30d9\u30eb\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u304f\u3053\u3068\u306b\u3059\u308b\u3002","d6a4c89b":"# **\u30dd\u30b8\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u3001\u66f8\u304d\u65b9\u304c\u30d0\u30e9\u30d0\u30e9\u306a\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305aUnicode\u6b63\u898f\u5316\u3059\u308b**","9054c12b":"# **\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f**","ea757475":"# **\u7d66\u4e0e\u5f71\u97ff\u3042\u308a\u305d\u3046\u306a\u306e\u306f\u3001\u30dd\u30b8\u30b7\u30e7\u30f3\u3068\u52e4\u52d9\u5730\u57df\u3068\u3057\u3066\u5b66\u7fd2**","b8a35f1c":"# **\u30dd\u30b8\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u3001\u4f4e\u3044\u5c64\u3001\u9ad8\u3044\u5c64\u306b\u591a\u305d\u3046\u306a\u3082\u306e\u3092\u4e2d\u5fc3\u306b\u30d5\u30e9\u30b0\u7acb\u3066\u3057\u3066\u3044\u304f**\n\u66f8\u304d\u65b9\u304c\u30d0\u30e9\u30d0\u30e9\u306a\u306e\u3067\u3001\u3042\u308b\u7a0b\u5ea6\u5206\u3051\u305f\u65b9\u304c\u51e6\u7406\u3057\u3084\u3059\u3044\u304b\u3082\u3068\u601d\u3044\u3001\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3057\u3066\u304a\u304f\u3002","47176126":"# **\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6574\u5f62\u30d1\u30fc\u30c8**","5f1f082b":"# **\u5b66\u7fd2\u30d1\u30fc\u30c8**","ec92d782":"\u5b9f\u306f\u3053\u3053\u3044\u3089\u306a\u3044\u3051\u308c\u3069\u3082\u3002"}}