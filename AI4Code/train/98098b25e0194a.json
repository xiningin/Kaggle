{"cell_type":{"5dfaff37":"code","f763abdf":"code","9ffd85ac":"code","be2db963":"code","2d2bc331":"code","58acdbb0":"code","2d5c012b":"code","79d7163f":"code","a2b03fe5":"code","94bbec31":"code","4d91f3a3":"code","3e5451f8":"code","060082be":"code","fdab7959":"code","422d9612":"code","954afa0d":"code","237852c3":"code","b44bcdf8":"code","98de556c":"code","496b92c3":"code","99ba52ab":"code","9bf583fe":"code","29a3e0dd":"code","78a5d114":"markdown","a50724ac":"markdown","39dc09f9":"markdown"},"source":{"5dfaff37":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import average_precision_score\n\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance\nfrom sklearn.preprocessing import LabelEncoder","f763abdf":"import warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","9ffd85ac":"df = pd.read_csv('\/kaggle\/input\/paysim1\/PS_20174392719_1491204439457_log.csv')\ndf = df.rename(columns={'oldbalanceOrg':'oldBalanceOrig', 'newbalanceOrig':'newBalanceOrig', \\\n                        'oldbalanceDest':'oldBalanceDest', 'newbalanceDest':'newBalanceDest'})\nprint(df.head())","be2db963":"df = df.drop(['isFlaggedFraud'],axis=1)\ndf.columns","2d2bc331":"print(\"No. of fraud transactions: {}, No. of non-fraud transactions: {}\".format((df.isFraud == 1).sum(),(df.isFraud == 0).sum()))","58acdbb0":"dfFraud = df.loc[df.isFraud == 1]\ndfNonFraud = df.loc[df.isFraud == 0]","2d5c012b":"print(\"What are the types for fraud transactions? {}\".format(dfFraud.type.drop_duplicates().values))\nprint(\"\\nHow many unique origins are there in fraud transfer transactions? {} \/ {}\".format(len(dfFraud.loc[dfFraud.type == 'TRANSFER'].nameOrig.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'TRANSFER'])))\nprint(\"How many unique destinations are there in fraud transfer transactions? {} \/ {}\".format(len(dfFraud.loc[dfFraud.type == 'TRANSFER'].nameDest.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'TRANSFER'])))\nprint(\"\\nHow many unique origins are there in fraud cash out transactions? {} \/ {}\".format(len(dfFraud.loc[dfFraud.type == 'CASH_OUT'].nameOrig.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'CASH_OUT'])))\nprint(\"How many unique destinations are there in fraud cash out transactions? {} \/ {}\".format(len(dfFraud.loc[dfFraud.type == 'CASH_OUT'].nameDest.drop_duplicates().values),len(dfFraud.loc[dfFraud.type == 'CASH_OUT'])))","79d7163f":"dfFraudTransfer = dfFraud.loc[dfFraud.type == 'TRANSFER']\ndfFraudCashout = dfFraud.loc[dfFraud.type == 'CASH_OUT']\n\nprint(\"How many fraud transfer transactions have destinations which are origins in fraud cash out transactions? {}\".\\\n     format(dfFraudTransfer.nameDest.isin(dfFraudCashout.nameOrig.unique()).sum()))\n\nprint(\"\\nHow many fraud transfer transactions have destinations which are origins in genuine cash out transactions? {}\".\\\n     format(dfFraudTransfer.nameDest.isin(dfNonFraud.loc[dfNonFraud.type == 'CASH_OUT'].nameOrig.unique()).sum()))\nprint(\"How many genuine transfer transactions have destinations which are origins in fraud cash out transactions? {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameDest.isin(dfFraudCashout.nameOrig.unique()).sum()))\n\nprint(\"\\nHow many genuine transfer transactions have destinations which are destinations in fraud transfer transactions? {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameDest.isin(dfFraudTransfer.nameDest.unique()).sum()))\nprint(\"How many genuine transfer transactions have origins which are destinations in fraud transfer transactions? {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameOrig.isin(dfFraudTransfer.nameDest.unique()).sum()))\nprint(\"How many genuine transfer transactions have origins which are origins in fraud transfer transactions? {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameOrig.isin(dfFraudTransfer.nameOrig.unique()).sum()))\nprint(\"How many genuine transfer transactions have destinations which are origins in fraud transfer transactions? {}\".\\\n     format(dfNonFraud.loc[dfNonFraud.type == 'TRANSFER'].nameDest.isin(dfFraudTransfer.nameOrig.unique()).sum()))","a2b03fe5":"print('Min, Max of Fraud Transactions: {} - {}'.format(dfFraud.amount.min(),dfFraud.amount.max()))\nprint('Min, Max of Non-Fraud Transactions: {} - {}'.format(dfNonFraud.amount.min(),dfNonFraud.amount.max()))","94bbec31":"df.isnull().values.any()","4d91f3a3":"print('% of fraud transactions in which \\'oldBalanceDest\\' \\'newBalanceDest\\' and amount is non-zero: {}'.format(len(dfFraud.loc[(dfFraud.oldBalanceDest == 0) & (dfFraud.newBalanceDest == 0) & (dfFraud.amount != 0) & (dfFraud.type.isin(['TRANSFER','CASH_OUT']))]) \/ len(dfFraud.loc[(dfFraud.type.isin(['TRANSFER','CASH_OUT']))])))\nprint('% of genuine transactions in which \\'oldBalanceDest\\' \\'newBalanceDest\\' and amount is non-zero: {}'.format(len(dfNonFraud.loc[(dfNonFraud.oldBalanceDest == 0) & (dfNonFraud.newBalanceDest == 0) & (dfNonFraud.amount != 0) & (dfNonFraud.type.isin(['TRANSFER','CASH_OUT']))]) \/ len(dfNonFraud.loc[(dfNonFraud.type.isin(['TRANSFER','CASH_OUT']))])))","3e5451f8":"df['errorBalanceOrig'] = df.newBalanceOrig + df.amount - df.oldBalanceOrig\ndf['errorBalanceDest'] = df.oldBalanceDest + df.amount - df.newBalanceDest","060082be":"print('Percentage of transactions with non-zero \\'errorBalanceOrig\\'')\npd.DataFrame(df.groupby('type').apply(lambda df:len(df.loc[df.errorBalanceOrig != 0]) \/ len(df)))","fdab7959":"print('Percentage of transactions with non-zero \\'errorBalanceDest\\'')\npd.DataFrame(df.groupby('type').apply(lambda df:len(df.loc[df.errorBalanceDest != 0]) \/ len(df)))","422d9612":"df.groupby('type').apply(lambda df:df.loc[df.errorBalanceDest != 0])","954afa0d":"df = df.drop(['nameOrig','nameDest'], axis=1)","237852c3":"enc = LabelEncoder()\ndf['type'] = enc.fit_transform(df['type'])","b44bcdf8":"df.dtypes","98de556c":"Y = df.isFraud\nX = df.drop(['isFraud'],axis=1)","496b92c3":"Xtrain, Xtest, Ytrain, Ytest = train_test_split(X,Y,test_size=0.2, random_state = 1)","99ba52ab":"# scale_pos_weight should be ratio of negative classes to positive classes\nweights = (Y == 0).sum() \/ (Y == 1).sum()\nclf = XGBClassifier(max_depth = 3, scale_pos_weight = weights, n_jobs = 4)\n\nclf.fit(Xtrain,Ytrain)","9bf583fe":"print('AUPRC = {}'.format(average_precision_score(Ytest, clf.predict_proba(Xtest)[:,1])))","29a3e0dd":"fig = plt.figure(figsize = (14, 9))\nax = fig.add_subplot(111)\n\ncolours = plt.cm.Set1(np.linspace(0, 1, 9))\n\nax = plot_importance(clf, height = 1, color = colours, grid = False, \\\n                     show_values = False, importance_type = 'cover', ax = ax);\nfor axis in ['top','bottom','left','right']:\n            ax.spines[axis].set_linewidth(2)\n        \nax.set_xlabel('importance score', size = 16);\nax.set_ylabel('features', size = 16);\nax.set_yticklabels(ax.get_yticklabels(), size = 12);\nax.set_title('Ordering of features by importance to the model learnt', size = 20);\n","78a5d114":"# Model Training","a50724ac":"# Data Cleaning","39dc09f9":"# Exploratory Data Analysis"}}