{"cell_type":{"b4f5b06f":"code","ec3b35e8":"code","0cf8df15":"code","56ec4cbb":"code","a37f9506":"code","a388a77d":"code","3a1e3808":"code","2fb24915":"code","1fc874aa":"code","5a36e89d":"code","42d4ca71":"code","2980bbc8":"code","bac7241b":"code","055ddaea":"code","afd3efb9":"code","e1135e15":"code","a4d61ace":"code","26c71fac":"code","0ba7edba":"code","c81f8c22":"code","bbfc1177":"code","d0a40c2a":"code","94c730f1":"markdown","bdd2c86d":"markdown","44e46584":"markdown","572ec73f":"markdown"},"source":{"b4f5b06f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec3b35e8":"import sklearn\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","0cf8df15":"# Importing clean Ford data set. Duplicates and bad entries have already been removed.\n\nfilepath = r'\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/ford.csv'\nford = pd.read_csv(filepath)\nford","56ec4cbb":"# an indication of the cars in the dataset\nprint(ford['model'].value_counts())","a37f9506":"# another broad oulook over data set.\nford.describe()","a388a77d":"import category_encoders as ce\nford_bin = ford.copy()\nencoder = ce.BinaryEncoder(cols=['model','transmission','fuelType'])\nford_bin = encoder.fit_transform(ford_bin)\nford_bin","3a1e3808":"def plotting_3_chart(df, feature):\n    ## Importing seaborn, matplotlab and scipy modules. \n    import seaborn as sns\n    import matplotlib.pyplot as plt\n    import matplotlib.gridspec as gridspec\n    from scipy import stats\n    import matplotlib.style as style\n    style.use('fivethirtyeight')\n\n    ## Creating a customized chart. and giving in figsize and everything. \n    fig = plt.figure(constrained_layout=True, figsize=(12,8))\n    ## creating a grid of 3 cols and 3 rows. \n    grid = gridspec.GridSpec(ncols=3, nrows=3, figure=fig)\n    #gs = fig3.add_gridspec(3, 3)\n\n    ## Customizing the histogram grid. \n    ax1 = fig.add_subplot(grid[0, :2])\n    ## Set the title. \n    ax1.set_title('Histogram')\n    ## plot the histogram. \n    sns.distplot(df.loc[:,feature], norm_hist=True, ax = ax1)\n\n    # customizing the QQ_plot. \n    ax2 = fig.add_subplot(grid[1, :2])\n    ## Set the title. \n    ax2.set_title('QQ_plot')\n    ## Plotting the QQ_Plot. \n    stats.probplot(df.loc[:,feature], plot = ax2)\n\n    ## Customizing the Box Plot. \n    ax3 = fig.add_subplot(grid[:, 2])\n    ## Set title. \n    ax3.set_title('Box Plot')\n    ## Plotting the box plot. \n    sns.boxplot(df.loc[:,feature], orient='v', ax = ax3 );\n    \nplotting_3_chart(ford_bin, 'price')\n#skewness and kurtosis\nprint(\"Skewness: \" + str(ford_bin['price'].skew()))\nprint(\"Kurtosis: \" + str(ford_bin['price'].kurt()))","2fb24915":"# There is a slight improvment. Therefore, will continue with transformed data.\n\n## trainsforming target variable using numpy.log1p,\nlog_ford_bin = ford_bin.copy()\nlog_ford_bin[\"price\"] = np.log1p(ford_bin[\"price\"])\n\n## Plotting the newly transformed response variable\nplotting_3_chart(log_ford_bin, 'price')\n#skewness and kurtosis\nprint(\"Skewness: \" + str(log_ford_bin['price'].skew()))\nprint(\"Kurtosis: \" + str(log_ford_bin['price'].kurt()))","1fc874aa":"# Registration year and mileage are most correlated with price, which is intuitive.\n\n## Getting the correlation of all the features with target variable. \n(log_ford_bin.corr()**2)[\"price\"].sort_values(ascending = False)[1:]","5a36e89d":"sns.set_style('whitegrid')\nplt.subplots(figsize = (15,10))\n## Plotting heatmap. \n\n# Generate a mask for the upper triangle (taken from seaborn example gallery)\nmask = np.zeros_like(log_ford_bin.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nsns.heatmap(ford_bin.corr(), \n            cmap=sns.diverging_palette(20, 220, n=200), \n            mask = mask, \n            annot=True, \n            center = 0,\n            fmt='.2f',\n            linewidths=0.1,\n            linecolor='white',\n           );\n## Give title. \nplt.title(\"Heatmap of all the Features\", fontsize = 30);","42d4ca71":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nreg = linear_model.LinearRegression()\nX = log_ford_bin.drop('price', axis=1)\ny = log_ford_bin['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state=1)\nreg.fit(X_train,y_train)","2980bbc8":"# decent performance.\nreg.score(X_test,y_test)","bac7241b":"results = X_test.copy()\nresults[\"predicted\"] = np.expm1(reg.predict(X_test))\nresults[\"actual\"]= np.expm1(y_test)\nresults = results[['predicted', 'actual']]\nresults['predicted'] = results['predicted'].round(2)\nresults","055ddaea":"ford.iloc[13981]","afd3efb9":"ford_onehot = ford.copy()\nford_onehot = pd.get_dummies(ford_onehot, columns=['model'])\nford_onehot = pd.get_dummies(ford_onehot, columns=['transmission'])\nford_onehot = pd.get_dummies(ford_onehot, columns=['fuelType'])\n\nford_onehot.head()","e1135e15":"plotting_3_chart(ford_onehot, 'price')\n#skewness and kurtosis\nprint(\"Skewness: \" + str(ford_onehot['price'].skew()))\nprint(\"Kurtosis: \" + str(ford_onehot['price'].kurt()))","a4d61ace":"## trainsforming target variable using numpy.log1p,\nlog_data = ford_onehot.copy()\nlog_data[\"price\"] = np.log1p(log_data[\"price\"])\n\n## Plotting the newly transformed response variable\nplotting_3_chart(log_data, 'price')\n#skewness and kurtosis\nprint(\"Skewness: \" + str(log_data['price'].skew()))\nprint(\"Kurtosis: \" + str(log_data['price'].kurt()))","26c71fac":"# Registration year and mileage are most correlated with price, which is intuitive.\n\n## Getting the correlation of all the features with target variable. \n(log_data.corr()**2)[\"price\"].sort_values(ascending = False)[1:]","0ba7edba":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\n\nreg = linear_model.LinearRegression()\nX = log_data.drop('price', axis=1)\ny = log_data['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state=1)\nreg.fit(X_train,y_train)","c81f8c22":"# Much improved score - one-hot encoding improves by 6% from previous model.\nreg.score(X_test,y_test)","bbfc1177":"results = X_test.copy()\nresults[\"predicted\"] = np.expm1(reg.predict(X_test))\nresults[\"actual\"]= np.expm1(y_test)\nresults = results[['predicted', 'actual']]\nresults['predicted'] = results['predicted'].round(2)\nresults","d0a40c2a":"custom = X_test.iloc[1].copy()\ncustom['year'] = 2017\ncustom['mileage'] = 16000\ncustom['fuelType_Diesel'] = 0\ncustom['fuelType_Petrol'] = 1\ncustom = custom.values.reshape(-1, 1)\nflat_list = []\nfor sublist in custom:\n    for item in sublist:\n        flat_list.append(item)\n\nprint(np.expm1(reg.predict([flat_list])))","94c730f1":"# Feature Engineering  \nThe categorical variables must be converted into something numerical.  \nBinary encoding will be tried first, as the dimensionality of the data set produced is less than when using one-hot encoding.  \nAlso, another issue with one-hot encoding is linear dependence produced within the dataset, which violates one of the Simple Regression model's assumptions.","bdd2c86d":"Data set visualisation shown below.  \nIt is possible to correct skew using a log1p transformation, which will be shown after.","44e46584":"![Image](https:\/\/www.carlogos.org\/car-logos\/ford-logo-2017.png)\n# We're going to be using a basic regression algorithm to model used Ford car prices.","572ec73f":"# Trying One Hot Encoding Instead"}}