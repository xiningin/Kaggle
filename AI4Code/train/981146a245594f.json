{"cell_type":{"3103f69c":"code","3cd6b007":"code","cac5b782":"code","9178fa56":"code","c8abe7ae":"code","3f681d07":"code","801feb9f":"code","17dc3e6c":"code","9fd55484":"code","6765bfc3":"code","e6d4ed5f":"code","4441150d":"code","19c5a42f":"markdown","a9d5814a":"markdown","9901a0f3":"markdown","a9aa01a4":"markdown"},"source":{"3103f69c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3cd6b007":"import pandas as pd\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv')\ndata.head()","cac5b782":"import pandas as pd\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv')\ndata.columns ","9178fa56":"import pandas as pd\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv')\ndata.tail()\n","c8abe7ae":"import pandas as pd\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv')\n\ndata.describe()","3f681d07":"import pandas as pd\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv')\n\ny = data['motor_speed']\ny.head()","801feb9f":"import pandas as pd\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv')\n\ny = data['motor_speed']\nX = data.drop(['motor_speed'],axis = 1)\nX.head()","17dc3e6c":"import pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv')\n\ny = data['motor_speed']\nX = data.drop(['motor_speed'],axis = 1)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)\n# Define model. Specify a number for random_state to ensure same results each run\nmodel = DecisionTreeRegressor(random_state=1)\n\n# Fit model\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_valid)\n\nresult = mean_absolute_error(y_true= y_valid , y_pred=predictions)\nprint('the result is :',result)","9fd55484":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv',index_col = \"profile_id\",parse_dates=True)\nsns.lineplot(data)\n","6765bfc3":"! pip install tensorflow==2.0.0-beta1","e6d4ed5f":"import tensorflow as tf\ntf.__version__\n","4441150d":"import pandas as pd\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv')\ny = data['motor_speed']\nX = data.drop(['motor_speed'],axis = 1)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)\n\n\n#define model\nmodel = tf.keras.models.Sequential()\n#add layers\n#input\nmodel.add(tf.keras.layers.Flatten(input_shape=(228,228),name=\"layer\",data_format=\"channels_last\"))\n#hidden\n'''\nnum_nutrons = 128\nhidden_layers = 3\nfor i in range(hidden_layers):\n  model.add(tf.keras.layers.Dense(128, activation='relu'))\n'''\n\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\n#output\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n#define optimizer\n#compel madel\nmodel.compile(optimizer='adam' ,loss='mean_absolute_error',\n              metrics=['accuracy'])\nprint(model.summary())\n\nmodel.fit(x=X_train,y= y_train, epochs=3,batch_size=100)\nresult = model.evaluate(x=X_test,y= y_test)\nprint(result)","19c5a42f":"import pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\ndata = pd.read_csv('..\/input\/pmsm_temperature_data.csv')\n\ny = data['motor_speed']\nX = data.drop(['motor_speed'],axis = 1)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)\n# Define model. Specify a number for random_state to ensure same results each run\nmodel = DecisionTreeRegressor(random_state=1)\n\n# Fit model\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_valid)\n\nresult = mean_absolute_error(y_true= y_valid , y_pred=predictions)\n\ndef get_mae(max_leaf_nodes, X_train, X_valid, y_train, y_valid):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(X_train, y_train)\n    preds_val = model.predict(X_valid)\n    mae = mean_absolute_error(y_valid, preds_val)\n    return(mae)\n\nfor max_leaf_nodes in data['motor_speed'] :\n   my_mae = get_mae(max_leaf_nodes, X_train, X_valid, y_train, y_valid)\n   print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))\n    \n    \nmy_mae = get_mae(y[0], X_train, X_valid, y_train, y_valid)\nbest_index = 0\nfor i in range(1,len(y)):\n    mae = get_mae(data['motor_speed'][i], X_train, X_valid, y_train, y_valid)\n    if mae < my_mae:\n        my_mae=mae\n        best_index = i\nbest_tree_size =data['motor_speed'][best_index]","a9d5814a":"The data set is regression it have numeric","9901a0f3":"#overfitting and underfitting","a9aa01a4":"##Plot the data"}}