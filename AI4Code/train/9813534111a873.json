{"cell_type":{"d49bad76":"code","18b7859e":"code","94322244":"code","7ae35016":"code","2f33615b":"code","9cefe452":"code","a7843e0d":"code","eeac491f":"code","229677e1":"code","a0966caa":"code","52d83031":"code","de202358":"code","e6dd6e1f":"code","298bddf8":"code","b049adf0":"code","eb12f0f4":"code","40979433":"code","c3839b94":"code","071dba7d":"code","455e62dd":"code","d6b66dd7":"code","91417da1":"code","695c2431":"code","0794dec1":"code","c7035243":"code","029789c7":"code","0f05ddf8":"code","49289a2a":"code","afedca02":"code","61c3f7be":"code","e5fa9d72":"code","98baeb6c":"code","eaed70c9":"code","07b8aa2a":"code","eff646d2":"code","28f11a37":"code","44d913c0":"code","ea7be903":"code","aa2213cd":"code","84ce3b9a":"code","070e0a5f":"code","16c84942":"code","b390514b":"code","e08ef777":"code","f1fc91ba":"code","5edaad14":"code","4e7994c3":"code","f82b58c8":"code","93279c67":"code","ad249f21":"code","517505e2":"code","1552657c":"markdown","c3adbcf2":"markdown","e871aeb9":"markdown","092bcd68":"markdown","dd842648":"markdown","0e7cf681":"markdown","f13d8871":"markdown","b412e53a":"markdown","eea32790":"markdown","73451302":"markdown","c925d9b0":"markdown","6ce113be":"markdown","2bd7f07b":"markdown","d44c6ee1":"markdown","5b7e9857":"markdown","47be6f88":"markdown","3651ed21":"markdown","c3de2062":"markdown","23196b86":"markdown","d6fddbb9":"markdown","5010385e":"markdown"},"source":{"d49bad76":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","18b7859e":"df_tips = sns.load_dataset('tips')\ndf_tips","94322244":"# split data\ndf_tips1 = df_tips.loc[:, 'sex':]\ndf_tips2 = df_tips.loc[:, :'tip']","7ae35016":"print('df1:', df_tips1.columns)\nprint('df2:', df_tips2.columns)","2f33615b":"df_tips_merge = df_tips2.join(df_tips1)  # default is left join\ndf_tips_merge","9cefe452":"df_tips.equals(df_tips_merge)","a7843e0d":"?pd.concat","eeac491f":"?pd.DataFrame.append","229677e1":"pd.concat([df_tips1, df_tips2])","a0966caa":"df_tips1.append(df_tips2)","52d83031":"pd.concat([df_tips1, df_tips2]).equals(df_tips1.append(df_tips2))","de202358":"# concatenate columns\npd.concat([df_tips1, df_tips2], axis=1)","e6dd6e1f":"pd.concat([df_tips1, df_tips2.iloc[0:2]], axis=1)","298bddf8":"df = pd.DataFrame(dict(A=[1, 2, 3], B=[4, 5, 6]), index=['a', 'b', 'b'])\ndf.loc['b']","b049adf0":"df_tips1.iloc[:2].append(df_tips2.iloc[:2])","eb12f0f4":"# create new index\ndf_tips1.iloc[:2].append(df_tips2.iloc[:2], ignore_index=True)","40979433":"# verify integrity... raise exception\ntry:\n    df_tips1.iloc[:2].append(df_tips2.iloc[:2], verify_integrity=True)\nexcept ValueError as e:\n    print('ValueError', e)    ","c3839b94":"df1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n                    'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\ndf2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],\n                    'hire_date': [2004, 2008, 2012, 2014]})\ndf1","071dba7d":"df2","455e62dd":"df3 = pd.merge(df1, df2)\ndf3","d6b66dd7":"df4 = pd.DataFrame({'group': ['Accounting', 'Engineering', 'HR'],\n                    'supervisor': ['Carly', 'Guido', 'Steve']})\ndf4","91417da1":"df3","695c2431":"pd.merge(df3, df4)","0794dec1":"df5 = pd.DataFrame({'group': ['Accounting', 'Accounting',\n                              'Engineering', 'Engineering', 'HR', 'HR'],\n                    'skills': ['math', 'spreadsheets', 'coding', 'linux',\n                               'spreadsheets', 'organization']})\ndf5","c7035243":"df1","029789c7":"pd.merge(df1, df5)","0f05ddf8":"# use if same name\npd.merge(df1, df2, on='employee')","49289a2a":"# use if different names\ndf3 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n                    'salary': [70000, 80000, 120000, 90000]})\npd.merge(df1, df3, left_on=\"employee\", right_on=\"name\")","afedca02":"df1","61c3f7be":"df1.query(\"employee == 'Bob'\")","e5fa9d72":"?pd.merge","98baeb6c":"?pd.DataFrame.join","eaed70c9":"df_tips1.join(df_tips2)","07b8aa2a":"df_tips","eff646d2":"df_groupby = df_tips.groupby('sex')","28f11a37":"df_groupby.groups.keys()","44d913c0":"df_groupby.get_group(name='Female')","ea7be903":"df_groupby.mean()","aa2213cd":"df_groupby.count()","84ce3b9a":"df_groupby.prod()","070e0a5f":"df_groupby.sum()","16c84942":"df_groupby.mad()","b390514b":"df_agg = df_tips.groupby('sex').aggregate(['std', np.min, sum])\ndf_agg","e08ef777":"df_agg.columns = [' '.join(col).strip() for col in df_agg.columns.values]\ndf_agg","f1fc91ba":"df_agg.columns","5edaad14":"df_agg = df_tips.groupby('sex').aggregate(\n    {'total_bill': 'std', \n     'tip': sum}\n)\ndf_agg","4e7994c3":"titanic = sns.load_dataset('titanic')","f82b58c8":"titanic.groupby('sex')[['survived']].mean()","93279c67":"titanic.groupby(['sex', 'class'])['survived'].aggregate('mean').unstack()","ad249f21":"df_tips","517505e2":"df_tips.groupby('sex').plot(kind='bar', x='sex', y='tip')","1552657c":"### Many-to-one","c3adbcf2":"# Agenda\n## Data manipulation with Pandas\n<ol>\n    <li>\n        <a href=\"#1\">Combining datasets<\/a>\n    <\/li>\n    <li>\n        <a href=\"#2\">Grouping and summarizing data<\/a>        \n    <\/li>\n    <li>\n        <a href=\"#3\">Pivot tables and tidy data<\/a>        \n    <\/li>\n    <li>\n        <a href=\"#5\">Visualizations<\/a>        \n    <\/li>\n    <li>\n        <a href=\"#6\">Exercises<\/a>        \n    <\/li>\n<\/ol>\n\n## Resources\n[Python data science handbook](https:\/\/tanthiamhuat.files.wordpress.com\/2018\/04\/pythondatasciencehandbook.pdf?fbclid=IwAR0Du6YVLl32yYexqQbgiHWu4AnwWgrAWdYLRMn-ZPnHa4HVf_sc4zEBSao)\n\n[Pandas docs](https:\/\/pandas.pydata.org\/docs\/)\n\n[Tidy data](http:\/\/vita.had.co.nz\/papers\/tidy-data.pdf#:~:text=2.3.-,Tidy%20data,with%20observations%2C%20variables%20and%20types.)\n\n[Exercises](https:\/\/www.machinelearningplus.com\/python\/101-pandas-exercises-python\/)\n\n[Further learning](https:\/\/github.com\/rfordatascience\/tidytuesday)\n","e871aeb9":"### on","092bcd68":"<div id=\"6\"><\/div>\n\n# Exercises\n\n[Click here](https:\/\/www.machinelearningplus.com\/python\/101-pandas-exercises-python\/)","dd842648":"<div id=\"2\"><\/div>\n\n# Grouping and summarizing data\n\nCalculate sum, mean, median, min, max, standard deviation... by groups in a DataFrame.","0e7cf681":"[Join vs merge](https:\/\/towardsdatascience.com\/pandas-join-vs-merge-c365fd4fbf49)\n`pd.merge` has more functionality","f13d8871":"### Aggregation","b412e53a":"## Concat and append\n\n`pd.concat` and `pd.DataFrame.append` or `pd.Series.append` both return new objects.\n\nThey will both add missing columns and fill their values with `NULL`.","eea32790":"### Many-to-many","73451302":"<div id=\"5\"><\/div>\n\n# Visualizations\n[Pandas docs](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/visualization.html)","c925d9b0":"## Merge and join","6ce113be":"### Duplicate indices\nPandas preserves indices, even if the result will have duplicate indices. \n\n[What is wrong with having duplicate indices?](https:\/\/stackoverflow.com\/questions\/16626058\/what-is-the-performance-impact-of-non-unique-indexes-in-pandas)\n... performance!","2bd7f07b":"### One-to-one","d44c6ee1":"[Use seaborn](https:\/\/seaborn.pydata.org\/tutorial\/categorical.html)","5b7e9857":"![joins](https:\/\/miro.medium.com\/max\/7360\/1*-I_1qa5TIiB5eNYxnodfAA.png)","47be6f88":"Similar to how `pd.concat` fills missing columns with missing values, it fills missing _indices_ with missing values.","3651ed21":"<div id=\"1\"><\/div>\n\n# Combining datasets","c3de2062":"`pd.concat` is the same as `pd.DataFrame.append` when `axis=0`","23196b86":"## Split, apply, combine","d6fddbb9":"<div id=\"3\"><\/div>\n\n# Pivot tables and tidy data","5010385e":"### Join or merge?"}}