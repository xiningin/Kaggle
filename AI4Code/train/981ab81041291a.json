{"cell_type":{"1c7f1212":"code","37697888":"code","3fca4866":"code","9b1d5255":"code","c2d8d516":"code","b868729b":"code","03a79850":"code","91c17d93":"code","712b37a9":"code","fd4b530e":"code","890b3053":"code","6b540b3b":"code","9bf36da2":"code","f6608bf7":"code","18e035ff":"code","6ebc2095":"code","33f1b406":"code","aedd8127":"code","78c1150c":"markdown","eb247a41":"markdown","e5cca41b":"markdown","c477ce0e":"markdown","8bd5e310":"markdown","1cfb6415":"markdown","732a3dae":"markdown","4b94e54d":"markdown","1e5a3953":"markdown","259e2cc6":"markdown","03658b21":"markdown","d8d65cf8":"markdown","7c095c71":"markdown","35b54b1b":"markdown","6c087157":"markdown","62150427":"markdown","d02e3f9e":"markdown","ddf8622c":"markdown","36765263":"markdown"},"source":{"1c7f1212":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport sklearn.metrics as metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.ensemble import RandomForestClassifier","37697888":"df_train = pd.read_csv(\"..\/input\/airline-passenger-satisfaction\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/airline-passenger-satisfaction\/test.csv\")\n\ndf_train = df_train.iloc[: , 1:]\ndf_test = df_test.iloc[: , 1:]\n\ndf = df_train.append(df_test)\n\ndf.head(5)","3fca4866":"df.describe()","9b1d5255":"df.info()","c2d8d516":"df_satisfaction = df.satisfaction.value_counts()\n\nsns.barplot(x=df_satisfaction.index, y=df_satisfaction, palette='BuPu')","b868729b":"def group_by_satisfaction(column, i):\n    df_satisfaction = (\n        pd.DataFrame(df.groupby([column, 'satisfaction'])['id'].count())\n        .reset_index()\n    )\n    \n    return df_satisfaction","03a79850":"f, ax = plt.subplots(nrows=4, ncols=1, figsize=(10,25))\ncols = [\"Class\", \"Customer Type\", \"Gender\", \"Type of Travel\"]\n\nfor i, feat in enumerate(cols):\n    df_satisfaction = group_by_satisfaction(feat, i)\n\n    sns.barplot(\n        data=df_satisfaction,\n        x=feat, y=\"id\", hue=\"satisfaction\",\n        ci=\"sd\", palette=\"BuPu\", ax=ax[i]\n    )","91c17d93":"f1, ax = plt.subplots(nrows=4, ncols=1, figsize=(10,15))\ncols = ['Age', 'Flight Distance']\n    \nsns.histplot(df, x=cols[0], bins=25, palette='BuPu', hue=\"satisfaction\", ax=ax[0])\nsns.boxplot(y='satisfaction', x=cols[0], data=df, orient='h', width=0.5, palette='BuPu', ax=ax[1])\n\nsns.histplot(df, x=cols[1], bins=25, palette='BuPu', hue=\"satisfaction\", ax=ax[2])\nsns.boxplot(y='satisfaction', x=cols[1], data=df, orient='h', width=0.5, palette='BuPu', ax=ax[3])","712b37a9":"fig, ax = plt.subplots(ncols=1, nrows=1, figsize=(10,8))\n\ncolumns = df.loc[:,['Inflight wifi service', 'Departure\/Arrival time convenient', 'Ease of Online booking', 'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort', 'Inflight entertainment', 'On-board service', 'Leg room service', 'Baggage handling', 'Checkin service', 'Inflight service', 'Cleanliness']]\n\nsns.boxplot(x='value', y='variable', data = columns.melt(), palette='BuPu', orient='h')","fd4b530e":"df_cor = df.drop('id',axis=1)\n\nplt.figure(figsize=(25, 10))\nmask = np.triu(np.ones_like(df_cor.corr(method='spearman'), dtype=np.bool))\nheatmap = sns.heatmap(df_cor.corr(method='spearman'), mask=mask, vmin=-1, vmax=1, annot=True, cmap='BuPu')","890b3053":"def convert_categorical(data):\n    data['Class'] = data['Class'].map({'Business': 2, 'Eco Plus': 1, 'Eco': 0})\n    data['satisfaction'] = data['satisfaction'].map({'neutral or dissatisfied': 0, 'satisfied': 1})\n    data['Type of Travel'] = data['Type of Travel'].map({'Personal Travel': 0, 'Business travel': 1})\n    data['Customer Type'] = data['Customer Type'].map({'Loyal Customer': 1, 'disloyal Customer': 0})\n\n    data = pd.get_dummies(data)\n    data.drop('id',axis=1,inplace=True)\n    data.fillna(0,inplace=True)\n\n    return data\n\ntrain = convert_categorical(df_train)\ntest = convert_categorical(df_test)","6b540b3b":"removed_cols = [\"id\", \"satisfaction\"]\n\nfeats = [c for c in train.columns if c not in removed_cols]\n\nx_test = test[feats]\ny_test = test['satisfaction']\n\nx_train = train[feats]\ny_train = train['satisfaction']","9bf36da2":"random_forest = RandomForestClassifier(random_state=42, n_jobs=-1, n_estimators=200)\n\nrandom_forest.fit(x_train, y_train)\n\npred = random_forest.predict(x_test)\n\ntrain_acc = random_forest.score(x_train, y_train) * 100\ntest_acc = random_forest.score(x_test, y_test) * 100\n\nprint(f'Acur\u00e1cia de dados de treino: {round(train_acc, 2)}%')\nprint(f'Acur\u00e1cia de dados de teste: {round(test_acc, 2)}%')","f6608bf7":"cm = confusion_matrix(y_test, pred)\n\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(cm, fmt=\".0f\", annot=True, linewidths=0.2, linecolor=\"purple\", ax=ax, cmap='BuPu')\nplt.xlabel(\"Valor Predito\")\nplt.ylabel(\"Valor Real\")\nplt.show()","18e035ff":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test, pred))","6ebc2095":"y_pred_proba = random_forest.predict_proba(x_test)[::,1]\n\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\n\nplt.plot(fpr, tpr, label=\"data, auc=\"+str(auc))\nplt.xlabel('Falso positivo')\nplt.ylabel('Verdadeiro positivo')\nplt.legend(loc=4)\nplt.show()","33f1b406":"mean_squared_error(y_test, pred)","aedd8127":"mean_squared_log_error(np.exp(y_test), np.exp(pred))**(1\/2)","78c1150c":"### Leitura dos dados","eb247a41":"### An\u00e1lise da qualidade dos servi\u00e7os","e5cca41b":"#### Matriz de confus\u00e3o dos dados de teste","c477ce0e":"* O valor do erro foi baixo, o que significa que o modelo consegue explicar bem os dados","8bd5e310":"### Correla\u00e7\u00e3o entre as vari\u00e1veis","1cfb6415":"### Modelo","732a3dae":"### Avalia\u00e7\u00e3o do modelo","4b94e54d":"* Pessoas mais velhas est\u00e3o mais satisfeitas do que as mais jovens\n* V\u00f4os curtos possuem uma insatisfa\u00e7\u00e3o maior do que v\u00f4os longos","1e5a3953":"* A distribui\u00e7\u00e3o da vari\u00e1vel resposta est\u00e1 balanceada","259e2cc6":"## An\u00e1lise descritiva","03658b21":"### An\u00e1lise de satisfa\u00e7\u00e3o","d8d65cf8":"### Satisfa\u00e7\u00e3o por idade e tempo de v\u00f4o","7c095c71":"## Random Forest","35b54b1b":"#### Curva Caracter\u00edstica de Opera\u00e7\u00e3o do Receptor\n- A curva ROC \u00e9 obtido pela representa\u00e7\u00e3o da raz\u00e3o RPV = Positivos Verdadeiros \/ Positivos Totais versus a raz\u00e3o RPF = Positivos Falsos \/ Negativos Totais, para v\u00e1rios valores do limiar de classifica\u00e7\u00e3o.\n\n- A RPV define quantos resultados positivos corretos ocorrem entre as amostras positivas dispon\u00edveis durante o teste. A RPF,por outro lado, define quantos resultados positivos incorretos ocorrem entre todas as amostras negativas dispon\u00edveis durante o teste. \n\n- AUC (\u00e1rea embaixo da curva) fornece uma medida agregada de desempenho em todos os limites de classifica\u00e7\u00e3o poss\u00edveis. Uma forma de interpretar AUC \u00e9 como a probabilidade de que o modelo classifique um exemplo positivo aleat\u00f3rio mais alto do que um exemplo negativo aleat\u00f3rio.","6c087157":"### Verificando dados da vari\u00e1vel resposta","62150427":"#### Prepara\u00e7\u00e3o das vari\u00e1veis do modelo","d02e3f9e":"### Transformando vari\u00e1veis categ\u00f3ricas","ddf8622c":"* A maioria dos servi\u00e7os possui mediana = 3","36765263":"#### Treinamento e predi\u00e7\u00e3o do modelo"}}