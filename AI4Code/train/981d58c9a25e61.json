{"cell_type":{"48cf1ea0":"code","f142d196":"code","4a70e38d":"code","f90d0857":"code","097842ba":"code","f6766328":"markdown","d36c5388":"markdown","3625959b":"markdown","91d351e8":"markdown","5f4afadd":"markdown","c56552ef":"markdown"},"source":{"48cf1ea0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f142d196":"#Code by AMI https:\/\/www.kaggle.com\/fanbyprinciple\/fast-fourier-transform-for-blur-detection\n\ndef detect_blur_fft(image, size=60, thresh=10, vis=True):\n    (h,w) = image.shape\n    (cX, cY) = (int(w\/2.0), int(h\/2.0))\n    fft = np.fft.fft2(image)\n    fftShift = np.fft.fftshift(fft)\n    # check to see if we are visualizing our output\n    if vis:\n        # compute the magnitude spectrum of the transform\n        magnitude = 20 * np.log(np.abs(fftShift))\n        # display the original input image\n        (fig, ax) = plt.subplots(1, 2, )\n        ax[0].imshow(image, cmap=\"gray\")\n        ax[0].set_title(\"Input\")\n        ax[0].set_xticks([])\n        ax[0].set_yticks([])\n        # display the magnitude image\n        ax[1].imshow(magnitude, cmap=\"gray\")\n        ax[1].set_title(\"Magnitude Spectrum\")\n        ax[1].set_xticks([])\n        ax[1].set_yticks([])\n        # show our plots\n        plt.show()\n    \n    fftShift[cY - size:cY + size, cX - size:cX + size] = 0\n    fftShift = np.fft.ifftshift(fftShift)\n    recon = np.fft.ifft2(fftShift)\n    \n    # compute the magnitude spectrum of the reconstructed image,\n    # then compute the mean of the magnitude values\n    magnitude = 20 * np.log(np.abs(recon))\n    mean = np.mean(magnitude)\n    # the image will be considered \"blurry\" if the mean value of the\n    # magnitudes is less than the threshold value\n    print(mean)\n    return (mean, mean <= thresh)","4a70e38d":"!pip install --upgrade imutils\nimport imutils\nimport cv2","f90d0857":"#Code by AMI https:\/\/www.kaggle.com\/fanbyprinciple\/fast-fourier-transform-for-blur-detection\n\norig = cv2.imread(\"..\/input\/waifu-data\/00000\/img00000006.png\")\n\n#print(orig)\norig = imutils.resize(orig, width=500)\ngray = cv2.cvtColor(orig, cv2.COLOR_BGR2GRAY)\n# apply our blur detector using the FFT\n(mean, blurry) = detect_blur_fft(gray, size=60)\n\n# draw on the image, indicating whether or not it is blurry\nimage = np.dstack([gray] * 3)\ncolor = (0, 0, 255) if blurry else (0, 255, 0)\ntext = \"Blurry ({:.4f})\" if blurry else \"Not Blurry ({:.4f})\"\ntext = text.format(mean)\ncv2.putText(image, text, (10, 25), cv2.FONT_HERSHEY_SIMPLEX, 0.7,color, 2)\nprint(\"[INFO] {}\".format(text))\n# show the output image\n#cv2.imshow(\"Output\", image)\n#cv2.waitKey(0)","097842ba":"#Code by AMI https:\/\/www.kaggle.com\/fanbyprinciple\/fast-fourier-transform-for-blur-detection\n\norig = cv2.imread(\"..\/input\/waifu-data\/00000\/img00000006.png\")\n\nimage_blurred = cv2.blur(src=orig, ksize=(15, 15))\nimage_blurred = imutils.resize(image_blurred, width=500)\ngray = cv2.cvtColor(image_blurred, cv2.COLOR_BGR2GRAY)\n# apply our blur detector using the FFT\n(mean, blurry) = detect_blur_fft(gray, size=60)\n\n# draw on the image, indicating whether or not it is blurry\nimage = np.dstack([gray] * 3)\ncolor = (0, 0, 255) if blurry else (0, 255, 0)\ntext = \"Blurry ({:.4f})\" if blurry else \"Not Blurry ({:.4f})\"\ntext = text.format(mean)\ncv2.putText(image, text, (10, 25), cv2.FONT_HERSHEY_SIMPLEX, 0.7,color, 2)\nprint(\"[INFO] {}\".format(text))","f6766328":"![](http:\/\/www.thefouriertransform.com\/fouriertransforms.gif)thefourier transform.com","d36c5388":"#Acknowledgement\n\nAMI https:\/\/www.kaggle.com\/fanbyprinciple\/fast-fourier-transform-for-blur-detection\n\nhttps:\/\/www.pyimagesearch.com\/2020\/06\/15\/opencv-fast-fourier-transform-fft-for-blur-detection-in-images-and-video-streams\/","3625959b":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #00008B;\"><b style=\"color:#DC143C;\">Fourier Transform<\/b><\/h1><\/center>","91d351e8":"\"Jean-Baptiste Joseph Fourier ( 21 March 1768 \u2013 16 May 1830) was a French mathematician and physicist born in Auxerre and best known for initiating the investigation of Fourier series, which eventually developed into Fourier analysis and harmonic analysis, and their applications to problems of heat transfer and vibrations. The Fourier transform and Fourier's law of conduction are also named in his honour. Fourier is also generally credited with the discovery of the greenhouse effect.\"\n\nhttps:\/\/en.wikipedia.org\/wiki\/Joseph_Fourier","5f4afadd":"#FOURIER TRANSFORM : BLUR DETECTION\nhttps:\/\/www.pyimagesearch.com\/2020\/06\/15\/opencv-fast-fourier-transform-fft-for-blur-detection-in-images-and-video-streams\/","c56552ef":"#Blurring the image"}}