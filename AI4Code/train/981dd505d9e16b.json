{"cell_type":{"f3549ece":"code","3082fdf4":"code","d054a7c8":"code","f7e6c7c9":"code","b9b3c06b":"code","ea5bd08c":"code","da819016":"code","b723268f":"code","e08a5cc7":"code","8e0f9275":"code","e4bbe1a6":"code","2af0b8e0":"code","4baea5cf":"code","ce1df679":"code","db38f114":"code","c9e328de":"code","628af5ee":"markdown","e5c433c4":"markdown","82e86f31":"markdown","185f89c0":"markdown","a0df29ae":"markdown","d46593ce":"markdown","fe258659":"markdown","96c95245":"markdown","63bc8f0c":"markdown","9fdeed0e":"markdown"},"source":{"f3549ece":"import os\nimport datetime\n\nimport IPython\nimport IPython.display\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport tensorflow as tf","3082fdf4":"mpl.rcParams['figure.figsize'] = (12, 8)\nmpl.rcParams['axes.grid'] = False","d054a7c8":"asset_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')\nasset_df.info()\nasset_df","f7e6c7c9":"train_df = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv')\ntrain_df.info()\ntrain_df.head()","b9b3c06b":"def plot_time_series(asset_id:int, asset_value:str, start:int = 0, end:int = len(train_df), visualise:bool = True,drop_na = True):\n    \"\"\"Plot time series data from train_df(train.csv)\n\n    Args:\n        asset_id (int): Asset_ID.\n        asset_value (str): Count, Open, High, Low, Close, Volume, VWAP, Target.\n        start(int): start index\n        end(int): end index\n        visualise(bool): If true, the gragh is plot\n        drop_na(bool):\n    \"\"\"\n    \n    asset_name = asset_df[asset_df[\"Asset_ID\"]==asset_id][\"Asset_Name\"].values[0]\n    train_crypro_df = train_df[train_df[\"Asset_ID\"]==asset_id].reset_index(drop=True)\n    \n    if drop_na:\n        train_crypro_df = train_crypro_df.dropna(subset=[asset_value])\n    \n    train_crypro_slice_df = train_crypro_df.iloc[start:end]\n    #train_crypro_df.info()\n    #train_crypro_df.head()\n    t = np.array(list(train_crypro_slice_df.index))\n    y = np.array(train_crypro_slice_df[asset_value].values)\n\n    if visualise:\n        plt.plot(t, y)\n        plt.xticks(fontsize=15)\n        plt.yticks(fontsize=15)\n        plt.title(f\"{asset_value} of {asset_name}\\n(start={start},end={end})\",fontsize=30)\n        plt.xlabel(\"Time\",fontsize=20)\n        plt.ylabel(f\"{asset_value}\",fontsize=20)\n        plt.show()\n    \n    \n    return t, y","ea5bd08c":"t, y = plot_time_series(asset_id = 0,asset_value = \"Target\",visualise=True)","da819016":"t,y = plot_time_series(asset_id = 0,asset_value = \"Target\",start = 0,end = 1000)","b723268f":"def check_nan(asset_id,asset_value,start,end):\n    \n    asset_name = asset_df[asset_df[\"Asset_ID\"]==asset_id][\"Asset_Name\"].values[0]\n    train_crypro_df = train_df[train_df[\"Asset_ID\"]==asset_id].reset_index(drop=True)\n    train_crypro_slice_df = train_crypro_df.iloc[start:end]\n    \n    if train_crypro_slice_df[asset_value].isnull().values.any():\n        null_num = train_crypro_slice_df[asset_value].isnull().sum()\n        print(f\"Unfortunately from {start} to {end}, there are {null_num} missing value(s) for {asset_name}...\") \n    \n    else:\n        print(f\"Wow!\\nThis data(from {start} to {end} for {asset_name}) is very clean(no missing values)!\\nUnbelievable!\")\n    ","e08a5cc7":"check_nan(asset_id = 0,asset_value = \"Target\",start = 0,end = 1000)","8e0f9275":"check_nan(asset_id = 2,asset_value = \"Target\",start = 0,end = 1000)","e4bbe1a6":"t,y = plot_time_series(asset_id = 2,asset_value = \"Target\",start = 0,end = 1000)","2af0b8e0":"def plot_fft(y:np.ndarray, t:np.ndarray, fs:int, sample_num:int, value_name:str):\n    \"\"\"Generate fft and plot\n\n    Args:\n        y (np.ndarray): time series value.\n        t (np.ndarray): time.\n        fs(int):sampling frequency.\n        sample_num(int): sample number.\n        value_name(str): name of value\n    \"\"\"\n    \n    sp = np.fft.fft(y)\n    freq = np.fft.fftfreq(t.shape[-1], d=1.0\/fs)\n    \n    Amp = np.abs(sp\/(sample_num\/2)) # Amplitude\n\n    fig, ax = plt.subplots(figsize=(12,8))\n    ax.plot(freq[1:int(sample_num\/2)], Amp[1:int(sample_num\/2)])\n    plt.title(f\"FFT of {value_name}\",fontsize=30)\n    ax.set_xlabel(\"Freqency [Hz]\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.grid()\n    #plt.xlim(0,5)#Change range according to frequency of wave\n    plt.show()","4baea5cf":"n=1000","ce1df679":"plot_fft(y=y,t=t,fs=1000,sample_num=n,value_name=\"Bitcoin cash\")","db38f114":"from scipy import signal\n# https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.signal.buttord.html\n\ndt = 1\/n \nfn = 1\/(2*dt)  \n\n# parameter setting\nfp = 10                          # passband frequency[Hz]\nfs = 50                        # stopband frequency[Hz]\ngpass = 1                       # The maximum loss in the passband[dB]\ngstop = 40                      # The minimum attenuation in the stopband [dB]\n# normalization\nWp = fp\/fn\nWs = fs\/fn\n\n# Butterworth filter\nN, Wn = signal.buttord(Wp, Ws, gpass, gstop)\nb1, a1 = signal.butter(N, Wn, \"low\")\ny1 = signal.filtfilt(b1, a1, y)\n\n# Chebyshev filter \u2160\nN, Wn = signal.cheb1ord(Wp, Ws, gpass, gstop)\nb2, a2 = signal.cheby1(N, gpass, Wn, \"low\")\ny2 = signal.filtfilt(b2, a2, y)\n\n# Chebyshev filter \u2161\nN, Wn = signal.cheb2ord(Wp, Ws, gpass, gstop)\nb3, a3 = signal.cheby2(N, gstop, Wn, \"low\")\ny3 = signal.filtfilt(b3, a3, y)\n\n# Elliptic filter\nN, Wn = signal.ellipord(Wp, Ws, gpass, gstop)\nb4, a4 = signal.ellip(N, gpass, gstop, Wn, \"low\")\ny4 = signal.filtfilt(b4, a4, y)\n\n# Bessel filter\nN = 4\nb5, a5 = signal.bessel(N, Ws, \"low\")\ny5 = signal.filtfilt(b5, a5, y)\n\n# FIR filter\na6 = 1\nnumtaps = n\nb6 = signal.firwin(numtaps, Wp, window=\"hann\")\ny6 = signal.lfilter(b6, a6, y)\ndelay = (numtaps-1)\/2*dt\n\n# Plot\nplt.figure()\nplt.plot(t, y, \"b\")\nplt.plot(t, y1, \"r\", linewidth=2, label=\"butter\")\nplt.plot(t, y2, \"g\", linewidth=2, label=\"cheby1\")\nplt.plot(t, y3, \"c\", linewidth=2, label=\"cheby2\")\nplt.plot(t, y4, \"m\", linewidth=2, label=\"ellip\")\nplt.plot(t, y5, \"k\", linewidth=2, label=\"bessel\")\nplt.plot(t-delay, y6, \"y\", linewidth=2, label=\"fir\")\nplt.legend(loc=\"upper right\")\nplt.xlabel(\"Time [s]\")\nplt.ylabel(\"Amplitude\")\nplt.show()","c9e328de":"plt.figure()\nplt.plot(t, y, \"b\")\nplt.plot(t, y5, \"k\", linewidth=2, label=\"bessel\")\nplt.legend(loc=\"upper right\")\nplt.xlabel(\"Time [s]\")\nplt.ylabel(\"Amplitude\")\nplt.show()","628af5ee":"# FFT","e5c433c4":"# Dataset","82e86f31":"# Plot time series","185f89c0":"# Check if any NAN value\nThe above data looks good.  \nBut let's check if any NAN.  ","a0df29ae":"# Introduction\nThis is just simple notebook for filtering for denoising.  \nif you find the notebook is useful, please upvote\ud83d\udc4d.","d46593ce":"[Bessel filter](https:\/\/en.wikipedia.org\/wiki\/Bessel_filter) looks good.  \nLet's plot again.  ","fe258659":"There is some noise.  \nBut if filtering (in this case, low pass filtering) is applied, we can get denoised data.  \n\nFor this, scipy is used.  ","96c95245":"# Import","63bc8f0c":"In [my last notebook](https:\/\/www.kaggle.com\/osamurai\/fft-analysis-tutorial), I did FFT.  \nSo let's check it again for this dataset.","9fdeed0e":"That's it!\nAgain if you find the notebook is useful, please upvote\ud83d\udc4d."}}