{"cell_type":{"bd06dfc3":"code","3c230a4c":"code","d9c9f218":"code","2665cfbb":"code","ac72efe4":"code","516b4e0b":"code","05a86900":"code","80235e4d":"code","4f8bcb61":"code","137bc81b":"code","cd3c1d42":"code","99834b49":"code","3cd2d93b":"code","5458a1a0":"code","65dc0d21":"code","5c8bb4a7":"code","d4e3be6d":"code","0143c54b":"markdown"},"source":{"bd06dfc3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom ggplot import *\n\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Embedding,SimpleRNN,Dense,Dropout\nfrom keras.optimizers import Adam\nfrom keras import metrics, regularizers","3c230a4c":"df=pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","d9c9f218":"df.info()","2665cfbb":"df.columns=df.columns.str.lower()\ndf.describe()","ac72efe4":"X=df.drop(columns='outcome')\ny=df.outcome\nX","516b4e0b":"X[X.values==0]","05a86900":"zero_values=SimpleImputer(missing_values=0,strategy=\"mean\")","80235e4d":"X=zero_values.fit_transform(X)","4f8bcb61":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=234)","137bc81b":"ax=sns.countplot(x='outcome',data=df,palette=\"Set3\")","cd3c1d42":"activation_func='selu'\nvalidation_split_=0.1\nregularizers_lr2=0.01\nverbose_=1\nepochs_=32\nbatch_size_=16\nsize=10000\ninput_shape=8\nkernel_initializer_='random_uniform'\nadam = Adam(lr = 0.01)\n","99834b49":"model=Sequential()\nmodel.add(Embedding(size,input_shape, trainable=True,input_length=input_shape))\nmodel.add(SimpleRNN(16,activation=activation_func,kernel_initializer=kernel_initializer_,kernel_regularizer=regularizers.l2(regularizers_lr2),return_sequences=True))\nmodel.add(Dropout(0.2))\nmodel.add(SimpleRNN(8,activation=activation_func,kernel_initializer=kernel_initializer_,kernel_regularizer=regularizers.l2(regularizers_lr2)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss = 'binary_crossentropy', optimizer = adam, metrics = ['accuracy'])\nmodel.summary()","3cd2d93b":"history=model.fit(X_train, y_train,\n          epochs=epochs_, \n          batch_size=batch_size_, \n          verbose=verbose_,\n          validation_split=validation_split_)\n","5458a1a0":"predicted=model.predict(X_test)\npredicted[:3]","65dc0d21":"results = confusion_matrix(y_test, predicted.round())","5c8bb4a7":"print ('Confusion Matrix :')\nprint(results) \nprint ('Accuracy Score :',accuracy_score(y_test, predicted.round()) )\nprint ('Report : ')\nprint (classification_report(y_test, predicted.round()) )","d4e3be6d":"fig, ax = plt.subplots(figsize=(10, 7))\nplt.plot(history.history['accuracy'], label='Acc')\nplt.plot(history.history['val_accuracy'], label='Val Acc')\nplt.ylabel('Acc')\nplt.xlabel('Epoch Say\u0131s\u0131')\nplt.legend(loc=\"upper left\")\nplt.show()","0143c54b":"\n*     Pregnancies: Ki\u015finin ka\u00e7 kez hamile oldu\u011fu\n*     Glucose: Kandanki \u015feker miktar\u0131\n*     BloodPressure: Kan bas\u0131nc\u0131\n*     SkinThickness: Cilt kal\u0131nl\u0131\u011f\u0131\n*     Insulin: Kandaki insulin miktar\u0131\n*     BMI: V\u00fccut kitle indeksi\n*     DiabetesPedigreeFunction: Diabet soyagac\u0131 fonksiyonu\n*     Age: Ya\u015f\n*     Outcome: Te\u015fhis\n"}}