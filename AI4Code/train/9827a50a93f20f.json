{"cell_type":{"9fb0b23e":"code","6696a04f":"code","82b55072":"code","1b235792":"code","c2a16a2e":"code","7de110a4":"code","5792f0a8":"code","2d1cf801":"code","701d10ed":"code","edbd4f6a":"code","61aa6534":"code","78ddab86":"code","64c611b4":"code","882a5f1f":"code","c34f592c":"code","f4db8a0f":"code","7fe3d94d":"code","00cd50ef":"code","8a485e35":"code","cc01493c":"code","6a073b83":"markdown","2591f397":"markdown","a5788e0a":"markdown","14dd5345":"markdown","f5b38711":"markdown","b0ee61ec":"markdown"},"source":{"9fb0b23e":"import pandas as pd\nimport plotly as py\nimport plotly.graph_objs as go\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npy.offline.init_notebook_mode(connected = True)","6696a04f":"mall_df = pd.read_csv('..\/input\/Mall_Customers.csv')\nmall_df.head()","82b55072":"print (mall_df)","1b235792":"mall_df.shape","c2a16a2e":"mall_df.columns","7de110a4":"mall_df['Gender'].head()","5792f0a8":"mall1_df = mall_df.copy()\nmall1_df.tail(5)","2d1cf801":"mall_df.describe().transpose()","701d10ed":"#Load the required packages\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#Plot styling\nimport seaborn as sns; sns.set()  # for plot styling\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (16, 9)\nplt.style.use('ggplot')","edbd4f6a":"plot_annual_income = sns.distplot(mall_df[\"Annual Income (k$)\"])","61aa6534":"plot_age = sns.distplot(mall_df[\"Age\"])","78ddab86":"plot_spending_score = sns.distplot(mall_df[\"Spending Score (1-100)\"])","64c611b4":"f, axes = plt.subplots(1,2, figsize=(12,6), sharex=True, sharey=True)\nv1 = sns.violinplot(data=mall_df, x='Annual Income (k$)', color=\"skyblue\",ax=axes[0])\nv2 = sns.violinplot(data=mall_df, x='Spending Score (1-100)',color=\"lightgreen\", ax=axes[1])\nv1.set(xlim=(-20,160))","882a5f1f":"# Creating subset\nmall_df_1 = mall_df[['Annual Income (k$)', 'Spending Score (1-100)']]\nmall_df_1.head()","c34f592c":"from sklearn.cluster import KMeans\n\n#Using the elbow method to find the optimum number of clusters\nwcss = []\nfor i in range(1,11):\n    km=KMeans(n_clusters=i,init='k-means++', max_iter=300, n_init=10, random_state=0)\n    km.fit(mall_df_1)\n    wcss.append(km.inertia_)\nplt.plot(range(1,11),wcss)\nplt.title('Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('wcss')\nplt.show()","f4db8a0f":"# So..number of clusters should be 5\nkm5=KMeans(n_clusters=5,init='k-means++', max_iter=300, n_init=10, random_state=0)\ny_means = km5.fit_predict(mall_df_1)\n#Visualizing the clusters\nplt.scatter(mall_df_1[y_means==0]['Annual Income (k$)'],mall_df_1[y_means==0]['Spending Score (1-100)'],s=50, c='purple',label='Cluster1')\nplt.scatter(mall_df_1[y_means==1]['Annual Income (k$)'],mall_df_1[y_means==1]['Spending Score (1-100)'],s=50, c='blue',label='Cluster2')\nplt.scatter(mall_df_1[y_means==2]['Annual Income (k$)'],mall_df_1[y_means==2]['Spending Score (1-100)'],s=50, c='green',label='Cluster3')\nplt.scatter(mall_df_1[y_means==3]['Annual Income (k$)'],mall_df_1[y_means==3]['Spending Score (1-100)'],s=50, c='cyan',label='Cluster4')\nplt.scatter(mall_df_1[y_means==4]['Annual Income (k$)'],mall_df_1[y_means==4]['Spending Score (1-100)'],s=50, c='magenta',label='Cluster5')\n\nplt.scatter(km5.cluster_centers_[:,0], km5.cluster_centers_[:,1],s=200,marker='s', c='red', alpha=0.7, label='Centroids')\nplt.title('Customer segments')\nplt.xlabel('Annual income of customer (k$)')\nplt.ylabel('Customer: Spending Score (1-100)')\nplt.legend()\nplt.show()","7fe3d94d":"# Creating subset\nmall_df_2 = mall_df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]\nmall_df_2.head()","00cd50ef":"#Using the elbow method to find the optimum number of clusters\nwcss = []\nfor i in range(1,11):\n    km=KMeans(n_clusters=i,init='k-means++', max_iter=300, n_init=10, random_state=0)\n    km.fit(mall_df_2)\n    wcss.append(km.inertia_)\nplt.plot(range(1,11),wcss)\nplt.title('Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('wcss')\nplt.show()","8a485e35":"km6 = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nkm6.fit(mall_df_2)\nlabels = km6.labels_\ncentroids = km6.cluster_centers_","cc01493c":"mall_df_2['labels'] =  labels\ntrace1 = go.Scatter3d(\n    x= mall_df_2['Age'],\n    y= mall_df_2['Spending Score (1-100)'],\n    z= mall_df_2['Annual Income (k$)'],\n    mode='markers',\n     marker=dict(\n        color = mall_df_2['labels'], \n        size= 20,\n        line=dict(\n            color= mall_df_2['labels'],\n            width= 12\n        ),\n        opacity=0.8\n     )\n)\ndata = [trace1]\nlayout = go.Layout(\n    title= 'Clusters',\n    scene = dict(\n            xaxis = dict(title  = 'Age'),\n            yaxis = dict(title  = 'Spending Score'),\n            zaxis = dict(title  = 'Annual Income')\n        )\n)\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)\n","6a073b83":"Clustering with 3 variables: Age, Annual Income (k$) and Spending Score (1-100) ","2591f397":"Descriptive statistics of the data","a5788e0a":"Visualizing the data using \"distplot\"","14dd5345":"Hence, the optimum number of clusters = 6 (Elbow Method: Above)","f5b38711":"Violin Plot of Annual Income and Spending Score ","b0ee61ec":"Applying K-Means Clustering to find the target customers"}}