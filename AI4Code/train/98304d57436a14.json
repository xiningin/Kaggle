{"cell_type":{"d07a9cf7":"code","506169df":"code","86e9ae69":"code","3e706fdc":"code","8a255886":"code","840ae793":"code","0af28b15":"code","6923a5be":"code","14840bf7":"code","513dedb6":"code","e9a8052f":"code","02a870ec":"code","53e5e7a0":"code","b073aa29":"code","97c3694f":"code","8d310bbc":"code","e251ab7c":"code","7f16befd":"code","a8549c1e":"code","ecba7a5b":"code","112b0194":"code","46c984fe":"code","4c29f68e":"code","6a1daa7d":"code","dbbd87ac":"code","82c96f8a":"code","cbc34e20":"code","e7086f7f":"code","9bae9547":"code","c4fbdeb8":"code","138e562f":"markdown","30d47ae5":"markdown","78596856":"markdown","209cf741":"markdown","9f0efdc3":"markdown","27be7084":"markdown","00a5850c":"markdown","5d2cb4af":"markdown","4752f1c6":"markdown","9d026c44":"markdown","ca06dd2b":"markdown","217ed0a6":"markdown","1f23c5ad":"markdown","a23e0238":"markdown","e5f7a33f":"markdown","fa2b9ea1":"markdown"},"source":{"d07a9cf7":"# %%writefile setup.sh\n# git clone https:\/\/github.com\/NVIDIA\/apex\n# cd apex\n# pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" .\/apex\n# rm -rf .\/apex","506169df":"# %%capture\n# !sh setup.sh","86e9ae69":"import os\nimport gc\ngc.enable()\nimport math\nimport json\nimport time\nimport random\nimport multiprocessing\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nfrom pytorch_lightning.callbacks import EarlyStopping\nimport ast\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm, trange\nfrom sklearn import model_selection\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.nn import Parameter\nimport torch.optim as optim\nfrom torch.utils.data import (\n    Dataset, DataLoader,\n    SequentialSampler, RandomSampler\n)\nfrom torch.utils.data.distributed import DistributedSampler\n\ntry:\n    from apex import amp\n    APEX_INSTALLED = True\nexcept ImportError as e:\n    APEX_INSTALLED = False\n    print(e)\n\nimport transformers\nfrom transformers import (\n    WEIGHTS_NAME,\n    AdamW,\n    AutoConfig,\n    AutoModel,\n    AutoTokenizer,\n    get_cosine_schedule_with_warmup,\n    get_linear_schedule_with_warmup,\n    logging,\n    MODEL_FOR_QUESTION_ANSWERING_MAPPING,\n)\nlogging.set_verbosity_warning()\nlogging.set_verbosity_error()\n\ndef fix_all_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n\ndef optimal_num_of_loader_workers():\n    num_cpus = multiprocessing.cpu_count()\n    num_gpus = torch.cuda.device_count()\n    optimal_value = min(num_cpus, num_gpus*4) if num_gpus else num_cpus - 1\n    return optimal_value\n\nprint(f\"Apex AMP Installed :: {APEX_INSTALLED}\")\nMODEL_CONFIG_CLASSES = list(MODEL_FOR_QUESTION_ANSWERING_MAPPING.keys())\nMODEL_TYPES = tuple(conf.model_type for conf in MODEL_CONFIG_CLASSES)","3e706fdc":"class Config:\n    # model\n    model_type = 'xlm_roberta'\n    model_name_or_path = \"..\/input\/input\/xlm-roberta-large-squad2\"\n    config_name = \"..\/input\/input\/xlm-roberta-large-squad2\"\n    fp16 = True if APEX_INSTALLED else False\n    fp16_opt_level = \"O1\"\n    gradient_accumulation_steps = 2\n\n    # tokenizer\n    tokenizer_name = \"..\/input\/input\/xlm-roberta-large-squad2\"\n    max_seq_length = 384\n    doc_stride = 128\n\n    # train\n    epochs = 7\n    train_batch_size = 4\n    eval_batch_size = 8\n\n    # optimizer\n    optimizer_type = 'AdamW'\n    learning_rate = 3e-5\n    weight_decay = 1e-2\n    epsilon = 1e-8\n    max_grad_norm = 1.0\n\n    # scheduler\n    decay_name = 'linear-warmup'\n    warmup_ratio = 0.2\n\n    # logging\n    logging_steps = 10\n    \n    #early stopping patience\n    patience = 2\n\n    # evaluate\n    output_dir = 'output'\n    seed = 69","8a255886":"tamil_xquad_tr = pd.read_csv('..\/input\/google-translated-squad20-to-hindi-and-tamil\/squad_ta.csv')\nhindi_xquad_tr = pd.read_csv('..\/input\/google-translated-squad20-to-hindi-and-tamil\/squad_hi.csv')\nhindi_xquad_tr.head()","840ae793":"hindi_xquad_tr['answers'] = hindi_xquad_tr['answers'].apply(ast.literal_eval)\ntamil_xquad_tr['answers'] = tamil_xquad_tr['answers'].apply(ast.literal_eval)\n\ndef get_text(d):\n    return d[0]['text']\ndef get_start(d):\n    return d[0]['answer_start']\n\nhindi_xquad_tr['answer_text'] = hindi_xquad_tr['answers'].apply(get_text)\nhindi_xquad_tr['answer_start'] = hindi_xquad_tr['answers'].apply(get_start)\ntamil_xquad_tr['answer_text'] = tamil_xquad_tr['answers'].apply(get_text)\ntamil_xquad_tr['answer_start'] = tamil_xquad_tr['answers'].apply(get_start)\n\nhindi_xquad_tr['language'] = 'hindi'\ntamil_xquad_tr['language'] = 'tamil'\n\nhindi_xquad_tr.drop(['id','answers','c_id','is_in'], axis=1, inplace=True)\ntamil_xquad_tr.drop(['id','answers','c_id','is_in'], axis=1, inplace=True)\n\nhindi_xquad_tr = hindi_xquad_tr[hindi_xquad_tr['answer_start']!=-1]\ntamil_xquad_tr = tamil_xquad_tr[tamil_xquad_tr['answer_start']!=-1]\n\nhindi_xquad_tr = hindi_xquad_tr.sample(frac=0.07)\ntamil_xquad_tr = tamil_xquad_tr.sample(frac=0.15)\n\ntamil_xquad_tr.shape","0af28b15":"train = pd.read_csv('..\/input\/cleaned-data-for-chaii\/cleaned_train.csv')\n#test = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv')\nexternal_mlqa = pd.read_csv('..\/input\/extra-data\/mlqa_hindi.csv')\nexternal_xquad = pd.read_csv('..\/input\/extra-data\/xquad.csv')\ntamil_xquad = pd.read_csv('..\/input\/squad-translated-to-tamil-for-chaii\/squad_translated_tamil.csv')\ntamil_xquad['language']=['tamil']*len(tamil_xquad)\nexternal_train = pd.concat([external_mlqa, external_xquad, tamil_xquad, hindi_xquad_tr, tamil_xquad_tr])\n\ndef create_folds(data, num_splits):\n    kf = model_selection.StratifiedKFold(n_splits=num_splits, shuffle=True, random_state=69)\n    for f, (t, v) in enumerate(kf.split(X=data, y=data['language'])):\n        train.loc[v, 'kfold'] = f\n#     for f, (x,y) in enumerate(kf.split(X=data, y=data['language'])):\n#         data['kfold'].values[y]=f\n    return data\n\n\nexternal_train[\"kfold\"] = -1\nexternal_train['id'] = list(np.arange(1, len(external_train)+1))\ntrain = create_folds(train, num_splits=10)\ntrain = pd.concat([train, external_train]).reset_index(drop=True)\n\ndef convert_answers(row):\n    return {'answer_start': [row[0]], 'text': [row[1]]}\n\ntrain['answers'] = train[['answer_start', 'answer_text']].apply(convert_answers, axis=1)","6923a5be":"len(train)","14840bf7":"train = train.drop_duplicates(subset=['context','question','answer_text','answer_start','answer_end','language'])\nlen(train)","513dedb6":"def prepare_train_features(args, example, tokenizer):\n    example[\"question\"] = example[\"question\"].lstrip()\n    tokenized_example = tokenizer(\n        example[\"question\"],\n        example[\"context\"],\n        truncation=\"only_second\",\n        max_length=args.max_seq_length,\n        stride=args.doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    sample_mapping = tokenized_example.pop(\"overflow_to_sample_mapping\")\n    offset_mapping = tokenized_example.pop(\"offset_mapping\")\n\n    features = []\n    for i, offsets in enumerate(offset_mapping):\n        feature = {}\n\n        input_ids = tokenized_example[\"input_ids\"][i]\n        attention_mask = tokenized_example[\"attention_mask\"][i]\n\n        feature['input_ids'] = input_ids\n        feature['attention_mask'] = attention_mask\n        feature['offset_mapping'] = offsets\n\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n        sequence_ids = tokenized_example.sequence_ids(i)\n\n        sample_index = sample_mapping[i]\n        answers = example[\"answers\"]\n\n        if len(answers[\"answer_start\"]) == 0:\n            feature[\"start_position\"] = cls_index\n            feature[\"end_position\"] = cls_index\n        else:\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            token_start_index = 0\n            while sequence_ids[token_start_index] != 1:\n                token_start_index += 1\n\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != 1:\n                token_end_index -= 1\n\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                feature[\"start_position\"] = cls_index\n                feature[\"end_position\"] = cls_index\n            else:\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                feature[\"start_position\"] = token_start_index - 1\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                feature[\"end_position\"] = token_end_index + 1\n\n        features.append(feature)\n    return features","e9a8052f":"class DatasetRetriever(Dataset):\n    def __init__(self, features, mode='train'):\n        super(DatasetRetriever, self).__init__()\n        self.features = features\n        self.mode = mode\n        \n    def __len__(self):\n        return len(self.features)\n    \n    def __getitem__(self, item):   \n        feature = self.features[item]\n        if self.mode == 'train':\n            return {\n                'input_ids':torch.tensor(feature['input_ids'], dtype=torch.long),\n                'attention_mask':torch.tensor(feature['attention_mask'], dtype=torch.long),\n                'offset_mapping':torch.tensor(feature['offset_mapping'], dtype=torch.long),\n                'start_position':torch.tensor(feature['start_position'], dtype=torch.long),\n                'end_position':torch.tensor(feature['end_position'], dtype=torch.long)\n            }\n        else:\n            return {\n                'input_ids':torch.tensor(feature['input_ids'], dtype=torch.long),\n                'attention_mask':torch.tensor(feature['attention_mask'], dtype=torch.long),\n                'offset_mapping':feature['offset_mapping'],\n                'sequence_ids':feature['sequence_ids'],\n                'id':feature['example_id'],\n                'context': feature['context'],\n                'question': feature['question']\n            }","02a870ec":"class Model(nn.Module):\n    def __init__(self, modelname_or_path, config):\n        super(Model, self).__init__()\n        self.config = config\n        self.xlm_roberta = AutoModel.from_pretrained(modelname_or_path, config=config)\n        self.qa_outputs = nn.Linear(config.hidden_size, 2)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n        self._init_weights(self.qa_outputs)\n        \n    def _init_weights(self, module):\n        if isinstance(module, nn.Linear):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n\n    def forward(\n        self, \n        input_ids, \n        attention_mask=None, \n        # token_type_ids=None\n    ):\n        outputs = self.xlm_roberta(\n            input_ids,\n            attention_mask=attention_mask,\n        )\n\n        sequence_output = outputs[0]\n        pooled_output = outputs[1]\n        \n        # sequence_output = self.dropout(sequence_output)\n        qa_logits = self.qa_outputs(sequence_output)\n        \n        start_logits, end_logits = qa_logits.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1)\n        end_logits = end_logits.squeeze(-1)\n    \n        return start_logits, end_logits","53e5e7a0":"def loss_fn(preds, labels):\n    start_preds, end_preds = preds\n    start_labels, end_labels = labels\n    \n    start_loss = nn.CrossEntropyLoss(ignore_index=-1)(start_preds, start_labels)\n    end_loss = nn.CrossEntropyLoss(ignore_index=-1)(end_preds, end_labels)\n    total_loss = (start_loss + end_loss) \/ 2\n    return total_loss","b073aa29":"def get_optimizer_grouped_parameters(args, model):\n    no_decay = [\"bias\", \"LayerNorm.weight\"]\n    group1=['layer.0.','layer.1.','layer.2.','layer.3.']\n    group2=['layer.4.','layer.5.','layer.6.','layer.7.']    \n    group3=['layer.8.','layer.9.','layer.10.','layer.11.']\n    group_all=['layer.0.','layer.1.','layer.2.','layer.3.','layer.4.','layer.5.','layer.6.','layer.7.','layer.8.','layer.9.','layer.10.','layer.11.']\n    optimizer_grouped_parameters = [\n        {'params': [p for n, p in model.xlm_roberta.named_parameters() if not any(nd in n for nd in no_decay) and not any(nd in n for nd in group_all)],'weight_decay': args.weight_decay},\n        {'params': [p for n, p in model.xlm_roberta.named_parameters() if not any(nd in n for nd in no_decay) and any(nd in n for nd in group1)],'weight_decay': args.weight_decay, 'lr': args.learning_rate\/10},\n        {'params': [p for n, p in model.xlm_roberta.named_parameters() if not any(nd in n for nd in no_decay) and any(nd in n for nd in group2)],'weight_decay': args.weight_decay, 'lr': args.learning_rate},\n        {'params': [p for n, p in model.xlm_roberta.named_parameters() if not any(nd in n for nd in no_decay) and any(nd in n for nd in group3)],'weight_decay': args.weight_decay, 'lr': args.learning_rate*10},\n        {'params': [p for n, p in model.xlm_roberta.named_parameters() if any(nd in n for nd in no_decay) and not any(nd in n for nd in group_all)],'weight_decay': 0.0},\n        {'params': [p for n, p in model.xlm_roberta.named_parameters() if any(nd in n for nd in no_decay) and any(nd in n for nd in group1)],'weight_decay': 0.0, 'lr': args.learning_rate\/10},\n        {'params': [p for n, p in model.xlm_roberta.named_parameters() if any(nd in n for nd in no_decay) and any(nd in n for nd in group2)],'weight_decay': 0.0, 'lr': args.learning_rate},\n        {'params': [p for n, p in model.xlm_roberta.named_parameters() if any(nd in n for nd in no_decay) and any(nd in n for nd in group3)],'weight_decay': 0.0, 'lr': args.learning_rate*10},\n        {'params': [p for n, p in model.named_parameters() if args.model_type not in n], 'lr':args.learning_rate*40, \"weight_decay\": 0.0},\n    ]\n    return optimizer_grouped_parameters","97c3694f":"class AverageMeter(object):\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n        self.max = 0\n        self.min = 1e5\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum \/ self.count\n        if val > self.max:\n            self.max = val\n        if val < self.min:\n            self.min = val","8d310bbc":"def make_model(args):\n    config = AutoConfig.from_pretrained(args.config_name)\n    tokenizer = AutoTokenizer.from_pretrained(args.tokenizer_name)\n    model = Model(args.model_name_or_path, config=config)\n    return config, tokenizer, model\n\ndef make_optimizer(args, model):\n    # optimizer_grouped_parameters = get_optimizer_grouped_parameters(args, model)\n    no_decay = [\"bias\", \"LayerNorm.weight\"]\n    optimizer_grouped_parameters = [\n        {\n            \"params\": [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)],\n            \"weight_decay\": args.weight_decay,\n        },\n        {\n            \"params\": [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)],\n            \"weight_decay\": 0.0,\n        },\n    ]\n    if args.optimizer_type == \"AdamW\":\n        optimizer = AdamW(\n            optimizer_grouped_parameters,\n            lr=args.learning_rate,\n            eps=args.epsilon,\n            correct_bias=True\n        )\n        return optimizer\n\ndef make_scheduler(\n    args, optimizer, \n    num_warmup_steps, \n    num_training_steps\n):\n    if args.decay_name == \"cosine-warmup\":\n        scheduler = get_cosine_schedule_with_warmup(\n            optimizer,\n            num_warmup_steps=num_warmup_steps,\n            num_training_steps=num_training_steps\n        )\n    else:\n        scheduler = get_linear_schedule_with_warmup(\n            optimizer,\n            num_warmup_steps=num_warmup_steps,\n            num_training_steps=num_training_steps\n        )\n    return scheduler    \n\ndef make_loader(\n    args, data, \n    tokenizer, fold\n):\n    train_set, valid_set = data[data['kfold']!=fold], data[data['kfold']==fold]\n    \n    train_features, valid_features = [[] for _ in range(2)]\n    for i, row in train_set.iterrows():\n        train_features += prepare_train_features(args, row, tokenizer)\n    for i, row in valid_set.iterrows():\n        valid_features += prepare_train_features(args, row, tokenizer)\n\n    train_dataset = DatasetRetriever(train_features)\n    valid_dataset = DatasetRetriever(valid_features)\n    print(f\"Num examples Train= {len(train_dataset)}, Num examples Valid={len(valid_dataset)}\")\n    \n    train_sampler = RandomSampler(train_dataset)\n    valid_sampler = SequentialSampler(valid_dataset)\n\n    train_dataloader = DataLoader(\n        train_dataset,\n        batch_size=args.train_batch_size,\n        sampler=train_sampler,\n        num_workers=optimal_num_of_loader_workers(),\n        pin_memory=True,\n        drop_last=False \n    )\n\n    valid_dataloader = DataLoader(\n        valid_dataset,\n        batch_size=args.eval_batch_size, \n        sampler=valid_sampler,\n        num_workers=optimal_num_of_loader_workers(),\n        pin_memory=True, \n        drop_last=False\n    )\n\n    return train_dataloader, valid_dataloader","e251ab7c":"class Trainer:\n    def __init__(\n        self, model, tokenizer, \n        optimizer, scheduler\n    ):\n        self.model = model\n        self.tokenizer = tokenizer\n        self.optimizer = optimizer\n        self.scheduler = scheduler\n\n    def train(\n        self, args, \n        train_dataloader, \n        epoch, result_dict\n    ):\n        count = 0\n        losses = AverageMeter()\n        \n        self.model.zero_grad()\n        self.model.train()\n        \n        fix_all_seeds(args.seed)\n        \n        for batch_idx, batch_data in enumerate(train_dataloader):\n            input_ids, attention_mask, targets_start, targets_end = \\\n                batch_data['input_ids'], batch_data['attention_mask'], \\\n                    batch_data['start_position'], batch_data['end_position']\n            \n            input_ids, attention_mask, targets_start, targets_end = \\\n                input_ids.cuda(), attention_mask.cuda(), targets_start.cuda(), targets_end.cuda()\n\n            outputs_start, outputs_end = self.model(\n                input_ids=input_ids,\n                attention_mask=attention_mask,\n            )\n            \n            loss = loss_fn((outputs_start, outputs_end), (targets_start, targets_end))\n            loss = loss \/ args.gradient_accumulation_steps\n\n            if args.fp16:\n                with amp.scale_loss(loss, self.optimizer) as scaled_loss:\n                    scaled_loss.backward()\n            else:\n                loss.backward()\n\n            count += input_ids.size(0)\n            losses.update(loss.item(), input_ids.size(0))\n\n            # if args.fp16:\n            #     torch.nn.utils.clip_grad_norm_(amp.master_params(self.optimizer), args.max_grad_norm)\n            # else:\n            #     torch.nn.utils.clip_grad_norm_(self.model.parameters(), args.max_grad_norm)\n\n            if batch_idx % args.gradient_accumulation_steps == 0 or batch_idx == len(train_dataloader) - 1:\n                self.optimizer.step()\n                self.scheduler.step()\n                self.optimizer.zero_grad()\n\n            if (batch_idx % args.logging_steps == 0) or (batch_idx+1)==len(train_dataloader):\n                _s = str(len(str(len(train_dataloader.sampler))))\n                ret = [\n                    ('Epoch: {:0>2} [{: >' + _s + '}\/{} ({: >3.0f}%)]').format(epoch, count, len(train_dataloader.sampler), 100 * count \/ len(train_dataloader.sampler)),\n                    'Train Loss: {: >4.5f}'.format(losses.avg),\n                ]\n                print(', '.join(ret))\n\n        result_dict['train_loss'].append(losses.avg)\n        return result_dict","7f16befd":"class Evaluator:\n    def __init__(self, model):\n        self.model = model\n    \n    def save(self, result, output_dir):\n        with open(f'{output_dir}\/result_dict.json', 'w') as f:\n            f.write(json.dumps(result, sort_keys=True, indent=4, ensure_ascii=False))\n\n    def evaluate(self, valid_dataloader, epoch, result_dict):\n        losses = AverageMeter()\n        for batch_idx, batch_data in enumerate(valid_dataloader):\n            self.model = self.model.eval()\n            input_ids, attention_mask, targets_start, targets_end = \\\n                batch_data['input_ids'], batch_data['attention_mask'], \\\n                    batch_data['start_position'], batch_data['end_position']\n            \n            input_ids, attention_mask, targets_start, targets_end = \\\n                input_ids.cuda(), attention_mask.cuda(), targets_start.cuda(), targets_end.cuda()\n            \n            with torch.no_grad():            \n                outputs_start, outputs_end = self.model(\n                    input_ids=input_ids,\n                    attention_mask=attention_mask,\n                )\n                \n                loss = loss_fn((outputs_start, outputs_end), (targets_start, targets_end))\n                losses.update(loss.item(), input_ids.size(0))\n                \n        print('----Validation Results Summary----')\n        print('Epoch: [{}] Valid Loss: {: >4.5f}'.format(epoch, losses.avg))\n        result_dict['val_loss'].append(losses.avg)        \n        return result_dict","a8549c1e":"def init_training(args, data, fold):\n    fix_all_seeds(args.seed)\n    \n    if not os.path.exists(args.output_dir):\n        os.makedirs(args.output_dir)\n    \n    # model\n    model_config, tokenizer, model = make_model(args)\n    if torch.cuda.device_count() >= 1:\n        print('Model pushed to {} GPU(s), type {}.'.format(\n            torch.cuda.device_count(), \n            torch.cuda.get_device_name(0))\n        )\n        model = model.cuda() \n    else:\n        raise ValueError('CPU training is not supported')\n    \n    # data loaders\n    train_dataloader, valid_dataloader = make_loader(args, data, tokenizer, fold)\n\n    # optimizer\n    optimizer = make_optimizer(args, model)\n\n    # scheduler\n    num_training_steps = math.ceil(len(train_dataloader) \/ args.gradient_accumulation_steps) * args.epochs\n    if args.warmup_ratio > 0:\n        num_warmup_steps = int(args.warmup_ratio * num_training_steps)\n    else:\n        num_warmup_steps = 0\n    print(f\"Total Training Steps: {num_training_steps}, Total Warmup Steps: {num_warmup_steps}\")\n    scheduler = make_scheduler(args, optimizer, num_warmup_steps, num_training_steps)\n\n    # mixed precision training with NVIDIA Apex\n    if args.fp16:\n        model, optimizer = amp.initialize(model, optimizer, opt_level=args.fp16_opt_level)\n    \n    result_dict = {\n        'epoch':[], \n        'train_loss': [], \n        'val_loss' : [], \n        'best_val_loss': np.inf\n    }\n\n    return (\n        model, model_config, tokenizer, optimizer, scheduler, \n        train_dataloader, valid_dataloader, result_dict\n    )","ecba7a5b":"def run(data, fold):\n    args = Config()\n    model, model_config, tokenizer, optimizer, scheduler, train_dataloader, \\\n        valid_dataloader, result_dict = init_training(args, data, fold)\n    \n    trainer = Trainer(model, tokenizer, optimizer, scheduler)\n    evaluator = Evaluator(model)\n    \n    patience =args.patience\n    \n    train_time_list = []\n    valid_time_list = []\n    \n    \n\n    for epoch in range(args.epochs):\n        result_dict['epoch'].append(epoch)\n\n        # Train\n        torch.cuda.synchronize()\n        tic1 = time.time()\n        result_dict = trainer.train(\n            args, train_dataloader, \n            epoch, result_dict\n        )\n        torch.cuda.synchronize()\n        tic2 = time.time() \n        train_time_list.append(tic2 - tic1)\n        \n        # Evaluate\n        torch.cuda.synchronize()\n        tic3 = time.time()\n        result_dict = evaluator.evaluate(\n            valid_dataloader, epoch, result_dict\n        )\n        torch.cuda.synchronize()\n        tic4 = time.time() \n        valid_time_list.append(tic4 - tic3)\n            \n        output_dir = os.path.join(args.output_dir, f\"checkpoint-fold-{fold}\")\n        \n        if result_dict['val_loss'][-1] < result_dict['best_val_loss']:\n            es_counter=0\n            print(\"{} Epoch, Best epoch was updated! Valid Loss: {: >4.5f} | Old Valid Loss: {: >4.5f}\".format(epoch, result_dict['val_loss'][-1], result_dict[\"best_val_loss\"]))\n            result_dict[\"best_val_loss\"] = result_dict['val_loss'][-1]        \n            \n            os.makedirs(output_dir, exist_ok=True)\n            torch.save(model.state_dict(), f\"{output_dir}\/pytorch_model.bin\")\n            model_config.save_pretrained(output_dir)\n            tokenizer.save_pretrained(output_dir)\n            print(f\"Saving model checkpoint to {output_dir}.\")\n            \n        else:\n            es_counter+=1\n            print('Valid Loss did not Improve  :(')\n            print(f'Early stop counter {es_counter} of {patience}')\n            \n        if es_counter == patience:\n            print()\n            print('-'*50)\n            print('!!!!Early stopping!!!!')\n            print('-'*50)\n            break\n            \n        print()\n        \n        \n        \n\n    evaluator.save(result_dict, output_dir)\n    \n    print(f\"Total Training Time: {np.sum(train_time_list)}secs, Average Training Time per Epoch: {np.mean(train_time_list)}secs.\")\n    print(f\"Total Validation Time: {np.sum(valid_time_list)}secs, Average Validation Time per Epoch: {np.mean(valid_time_list)}secs.\")\n    \n    torch.cuda.empty_cache()\n    del trainer, evaluator\n    del model, model_config, tokenizer\n    del optimizer, scheduler\n    del train_dataloader, valid_dataloader, result_dict\n    gc.collect()\n","112b0194":"# for fold in range(1):\n#     print();print()\n#     print('-'*50)\n#     print(f'FOLD: {fold}')\n#     print('-'*50)\n#     run(train, fold)","46c984fe":"# for fold in range(1, 2):\n#     print();print()\n#     print('-'*50)\n#     print(f'FOLD: {fold}')\n#     print('-'*50)\n#     run(train, fold)","4c29f68e":"# for fold in range(2, 3):\n#     print();print()\n#     print('-'*50)\n#     print(f'FOLD: {fold}')\n#     print('-'*50)\n#     run(train, fold)","6a1daa7d":"# for fold in range(3, 4):\n#     print();print()\n#     print('-'*50)\n#     print(f'FOLD: {fold}')\n#     print('-'*50)\n#     run(train, fold)","dbbd87ac":"for fold in range(4, 5):\n    print();print()\n    print('-'*50)\n    print(f'FOLD: {fold}')\n    print('-'*50)\n    run(train, fold)","82c96f8a":"# for fold in range(5, 6):\n#     print();print()\n#     print('-'*50)\n#     print(f'FOLD: {fold}')\n#     print('-'*50)\n#     run(train, fold)","cbc34e20":"# for fold in range(6, 7):\n#     print();print()\n#     print('-'*50)\n#     print(f'FOLD: {fold}')\n#     print('-'*50)\n#     run(train, fold)","e7086f7f":"# for fold in range(7, 8):\n#     print();print()\n#     print('-'*50)\n#     print(f'FOLD: {fold}')\n#     print('-'*50)\n#     run(train, fold)","9bae9547":"# for fold in range(8, 9):\n#     print();print()\n#     print('-'*50)\n#     print(f'FOLD: {fold}')\n#     print('-'*50)\n#     run(train, fold)","c4fbdeb8":"# for fold in range(9, 10):\n#     print();print()\n#     print('-'*50)\n#     print(f'FOLD: {fold}')\n#     print('-'*50)\n#     run(train, fold)","138e562f":"### Grouped Layerwise Learning Rate Decay","30d47ae5":"### Utilities","78596856":"### Covert Examples to Features (Preprocess)","209cf741":"### Install APEX","9f0efdc3":"### Initialize Training","27be7084":"### Run","00a5850c":"### Dataset Retriever","5d2cb4af":"### Evaluator","4752f1c6":"### Import Dependencies","9d026c44":"### Training Configuration","ca06dd2b":"### Metric Logger","217ed0a6":"### Model","1f23c5ad":"### Loss","a23e0238":"### Data Factory","e5f7a33f":"### Trainer","fa2b9ea1":"# Add new translated dataset from [here](https:\/\/www.kaggle.com\/tkm2261\/google-translated-squad20-to-hindi-and-tamil)"}}