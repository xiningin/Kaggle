{"cell_type":{"009565ef":"code","b1abdbe1":"code","abd038dc":"code","8ea7708d":"code","08cbf4f7":"code","36384ebc":"code","f38547e7":"code","63b1de76":"code","2d30a59c":"code","d55962fd":"code","f9336439":"code","3f545155":"code","cadf9efb":"code","a9da422d":"code","20f08c9f":"code","01a9b698":"code","52123e18":"code","b4476778":"code","64a38afa":"code","170d0e19":"code","2f2c5ce4":"markdown","2941a27b":"markdown","05df379a":"markdown"},"source":{"009565ef":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1abdbe1":"test_data = pd.read_csv('\/kaggle\/input\/dogecoin-historical-dataset\/doge-usd-max.csv')\ntest_data","abd038dc":"pd.core.frame.DataFrame","8ea7708d":"test_data.plot.line()","08cbf4f7":"import matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.rcParams['axes.unicode_minus'] = False ## \ub9c8\uc774\ub098\uc2a4 '-' \ud45c\uc2dc \uc81c\ub300\ub85c \ucd9c\ub825\n ","36384ebc":"# test_data.set_index('snapped_at', inplace=True)","f38547e7":"test_data","63b1de76":"test_data_11 = test_data.drop(['market_cap','snapped_at' ,'total_volume'], axis=1)\ntest_data_11\n\ntest_data_22 = test_data_11[2600:2703]\ntest_data_22.append(test_data_22,ignore_index = True)\n\ntest_data_22.reset_index().rename(columns={\"index\":\"id\"})\ntest_data_33 = test_data_22.rename_axis('id').reset_index()\ntest_data_22.index.name='id'\ntest_data_44 = test_data_22.reset_index()\ntest_data_44\ntest_data_22 = test_data_44","2d30a59c":"from statsmodels.formula.api import ols","d55962fd":"## \uc2dc\uac01\ud654\nfig = plt.figure(figsize=(8,8))\nfig.set_facecolor('white')\n \nfont_size = 15\nplt.scatter(test_data_22['id'],test_data_22['price']) ## \uc6d0 \ub370\uc774\ud130 \uc0b0\ud3ec\ub3c4\n \nplt.xlabel('id', fontsize=font_size)\nplt.ylabel('price',fontsize=font_size)\nplt.show()","f9336439":"fit = ols('price ~ id',data=test_data_22).fit()\nfit.summary","3f545155":"print(fit.params.Intercept) ## \uc808\ud3b8\nprint(fit.params.id)","cadf9efb":"fit.fittedvalues","a9da422d":"fit.resid\n","20f08c9f":"fit.predict(exog=dict(id=[2800]))\n","01a9b698":"from sklearn.linear_model import LinearRegression\n\n\nx = test_data_22['id'].values.reshape(-1,1) ## \ucc28\uc6d0 \uc99d\uac00 \uc2dc\ucf1c\uc900\ub2e4.\ny = test_data_22['price']\n \nfit = LinearRegression().fit(x,y)\n","52123e18":"print(fit.intercept_) ## \uc808\ud3b8\nprint(fit.coef_)","b4476778":"fit.predict(x)\n","64a38afa":"fit.predict([[2800]])\n","170d0e19":"import tensorflow.compat.v1 as tf\ntf.disable_v2_behavior()\n\nW = tf.Variable(tf.random_uniform([1], -1.0, 0.0))\nb = tf.Variable(tf.zeros([1]))\ny1 = W * x + b\n\nloss = tf.reduce_mean(tf.square(y1 - y))\noptimizer = tf.train.GradientDescentOptimizer(0.05)\ntrain = optimizer.minimize(loss)\n\ninit = tf.initialize_all_variables()\n\nsess = tf.Session()\nsess.run(init)\n\nfor step in range(8):\n     sess.run(train)\n     print(step, sess.run(W), sess.run(b))\n     print(step, sess.run(loss))\n\n     #Graphic display\n     plt.plot(x, y, '.')\n     plt.plot(x, sess.run(W) * x + sess.run(b))\n\n     plt.show()","2f2c5ce4":"## \uc5ec\uae30\ubd80\ud130 ~~","2941a27b":"## \uc5ec\uae30\ubd80\ud130 sklearn \uc120\ud615 \ud68c\uadc0 \ubd84\uc11d","05df379a":"## \uc5ec\uae30\ubd80\ud130 statsmodels \uc120\ud615 \ud68c\uadc0 \ubd84\uc11d"}}