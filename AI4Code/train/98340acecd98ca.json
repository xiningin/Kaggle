{"cell_type":{"145954a5":"code","0df8ede0":"code","fda71ee7":"code","3a06bf34":"markdown"},"source":{"145954a5":"\"\"\"terravisualisation contains all the board visualisation functions for terraBot\n\"\"\"\n\nimport numpy as np\n\ndef faction_map(faction):\n    \"\"\"faction_map outputs an array representing the Terra Mystica map, where they array\n    shows the amount of digs every tile is away from a faction's home tile\n\n    Arguments:\n    faction -- a string referring to a TM faction\n\n    Returns:\n    finalarr -- a (9, 13) array where each element is [4 - the amount of digs a faction is away\n    from their home tile], where an element maps to a tile. Rivers have a value of 0. Rows of the\n    map constituting of 12 tiles have their final element set to 0, representing a blank tile\n     \"\"\"\n    from math import pi\n\n    # for green\n    greenmap = np.array([[-3, 1, 0, -1, 3, 2, -3, -2, 2, 0, -1, 2, -2],\n                         [3, 4, 4, -3, -2, 4, 4, 3, -2, 4, 4, 3, 4],\n                         [4, 4, -2, 4, 1, 4, 0, 4, 0, 4, 1, 4, 4],\n                         [0, -1, 3, 4, 4, 2, -1, 4, 2, 4, 2, -3, 4],\n                         [-2, -3, 2, -1, -2, -3, 1, 3, 4, 4, 0, -2, -1],\n                         [1, 0, 4, 4, 3, 0, 4, 4, 4, -3, 1, -3, 4],\n                         [4, 4, 4, 1, 4, 2, 4, 0, 4, 3, -2, -1, 3],\n                         [3, -1, -3, 4, 4, 4, -1, -2, 4, 1, -3, 1, 4],\n                         [2, -2, 1, -1, 2, 0, 3, -3, 1, 4, -1, 0, 2]])\n\n    gremangles = greenmap * (pi * (2\/7))\n        \n    # river & empties mask\n    rivermask = np.array([[False, False, False, False, False, False, False, False, False, False, False, False, False],\n                          [False, True, True, False, False, True, True, False, False, True, True, False, True],\n                          [True, True, False, True, False, True, False, True, False, True, False, True, True],\n                          [False, False, False, True, True, False, False, True, False, True, False, False, True],\n                          [False, False, False, False, False, False, False, False, True, True, False, False, False],\n                          [False, False, True, True, False, False, True,  True,  True, False, False, False, True],\n                          [True, True, True, False, True, False, True, False, True, False, False, False, False],\n                          [False, False, False, True, True, True, False, False, True, False, False, False, True],\n                          [False, False, False, False, False, False, False, False, False, True, False, False, False]])\n\n    if faction == 'witches' or faction == 'auren':\n        # create the array\n        arr1 = 4 - abs(greenmap)\n\n    elif faction == 'swarmlings' or faction == 'mermaids':\n        # rotate\n        blumangles = (gremangles + ((2\/7)*pi) + pi) % (2*pi) - pi\n\n        # back to numbers\n        bluemap = blumangles \/ (pi * (2\/7))\n\n        # create the array\n        arr1 = 4 - abs(bluemap)\n\n    elif faction == 'darklings' or faction == 'alchemists':\n        # rotate\n        blamangles = (gremangles + ((4 \/ 7) * pi) + pi) % (2 * pi) - pi\n\n        # back to numbers\n        blackmap = blamangles \/ (pi * (2 \/ 7))\n\n        # create the array\n        arr1 = 4 - abs(blackmap)\n\n    elif faction == 'halflings' or faction == 'cultists':\n        # rotate\n        bromangles = (gremangles + ((6 \/ 7) * pi) + pi) % (2 * pi) - pi\n\n        # back to numbers\n        brownmap = bromangles \/ (pi * (2 \/ 7))\n\n        # create the array\n        arr1 = 4 - abs(brownmap)\n\n    elif faction == 'engineers' or faction == 'dwarves':\n        # rotate\n        grarmangles = (gremangles + ((-2 \/ 7) * pi) + pi) % (2 * pi) - pi\n\n        # back to numbers\n        graymap = grarmangles \/ (pi * (2 \/ 7))\n\n        # create the array\n        arr1 = 4 - abs(graymap)\n\n    elif faction == 'chaos magicians' or faction == 'giants':\n        # rotate\n        redmangles = (gremangles + ((-4 \/ 7) * pi) + pi) % (2 * pi) - pi\n\n        # back to numbers\n        redmap = redmangles \/ (pi * (2 \/ 7))\n\n        # create the array\n        arr1 = 4 - abs(redmap)\n\n    elif faction == 'fakirs' or faction == 'nomads':\n        # rotate\n        yelmangles = (gremangles + ((-6 \/ 7) * pi) + pi) % (2 * pi) - pi\n\n        # back to numbers\n        yellowmap = yelmangles \/ (pi * (2 \/ 7))\n\n        # create the array\n        arr1 = 4 - abs(yellowmap)\n\n    else:\n        return\n\n    # apply river spacing mask over\n    # alt: arr1 = np.multiply(arr1, 1 - rivermask)\n    arr1[rivermask] = 0\n\n    # turn back to integer from potential float\n    arr1 = arr1.astype(int)\n\n    # flip\n    arr2 = np.flip(arr1, 0)\n\n    # re-size\n    arr3 = np.squeeze(np.resize(arr2, (1, 117)))\n\n    # remove the added hexes\n    finalarr = np.delete(arr3, [25, 51, 77, 103])\n\n    return finalarr\n\n\ndef display_map(faction, plot=True):\n    \"\"\"takes the input, faction, and returns a map of the board\n    where hex brightness relates to how many digs that faction\n    needs to convert that hex into its home territory.\n\n    Arguments:\n    faction -- string or (9, 13) numpy array: where the string refers to a faction name,\n    or the numpy array refers to map to be plotted in the format of faction_map\n\n    Returns:\n    None. Plots the map.\n    \"\"\"\n    import matplotlib.pyplot as plt\n    import numpy.matlib\n\n    # make sure the faction string is all lowercase\n    faction = faction.lower()\n\n    # create array to display map on\n    x1 = np.linspace(4.5, 16.5, 13)\n    x2 = np.linspace(5, 16, 12)\n    x3 = np.hstack((x1, x2))\n    x4 = np.matlib.repmat(x3, 1, 4)\n    x4 = np.squeeze(x4)\n    x5 = np.hstack((x4, x1))\n    x = np.squeeze(x5)\n\n    y1 = np.linspace(6, 15, 9)\n    y = np.repeat(y1, np.array([13, 12, 13, 12, 13, 12, 13, 12, 13]))\n\n    if type(faction) == str:\n        factionmap = faction_map(faction)\n    else:  # assume it's already a map mask array\n        factionmap = faction\n\n    x = np.repeat(x, factionmap)\n    y = np.repeat(y, factionmap)\n\n    # need to define the size of the plot\n    x = np.hstack((x, [1, 1, 20, 20]))\n    y = np.hstack((y, [1, 20, 1, 20]))\n\n    if plot:\n        plt.hexbin(x, y, gridsize=(19, 9), cmap='magma')\n        plt.axis('off')\n        plt.show()\n    else:\n        return x, y\n","0df8ede0":"from ipywidgets import Layout, Button, VBox, Label, Box, Output\n\noutput_task = Output()\n\n# make the dropdown\nfactions = ['Witches', 'Auren', 'Giants', 'Chaos Magicians', 'Darklings', 'Alchemists',\n            'Swarmlings', 'Mermaids', 'Fakirs', 'Nomads', 'Engineers', 'Dwarves', 'Halflings', 'Cultists']\n\n\ndef btn_eventhandler(obj):\n    with output_task:\n        print(obj.description)\n        output_task.clear_output()\n        display_map(obj.description)\n\nitem_layout = Layout(height='50px', min_width='490px')\nitems = [Button(layout=item_layout, description=faction, button_style='success') for faction in factions]\nfor eachbutton in items:\n    eachbutton.on_click(btn_eventhandler)\n    \nbox_layout = Layout(overflow_y='auto',\n                    border='3px solid black',\n                    width='500px',\n                    height='500px',\n                    flex_flow='column',\n                    display='block')\ncarousel = Box(children=items, layout=box_layout)\n\nVBox([Label('Select a faction:'), carousel])","fda71ee7":"display(output_task)","3a06bf34":"This isn't using the statistics (yet), but a fun side-project. The following code visualises the map in terms of dig cost for a faction. So white is 0 digs needed, then the darker it gets, the more digs you need. You'll need to click \"Copy and Edit\" and then run the notebook to be able to click on the buttons  (let me know if there's a way to do this without having to copy and edit):"}}