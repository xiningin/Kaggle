{"cell_type":{"2fc4ae8e":"code","cf3cc882":"code","c188f58e":"code","0e1ac44b":"code","c21f952a":"code","3a20ba79":"code","f2a91512":"code","58c0f871":"code","a4a7affd":"code","b87c04bc":"code","891ef226":"code","f67f9b4e":"code","52c50a14":"code","bb1996af":"code","0eb37d75":"code","5e839370":"code","6da3a837":"code","ab732ca7":"code","bd5b7d45":"code","26c6d48e":"code","a5cd34aa":"code","6da31401":"code","a7d04d72":"code","59f2fb4b":"code","3b785506":"code","d7ae1ed8":"code","eccbcd4b":"code","f162879f":"code","67539f02":"code","185f8232":"code","ea0508ab":"code","e16f9e5b":"code","d61b748f":"code","61982e25":"code","abaa6e17":"code","39fd576c":"code","c9962ff0":"code","6361f9f0":"code","8c7ecdb6":"markdown","fc52fb45":"markdown","6395e5ff":"markdown","24cb94f8":"markdown","6791a6fd":"markdown","fcd54437":"markdown","7fd0e94c":"markdown","9135500a":"markdown","59e0b6e2":"markdown","db9db3bf":"markdown","0ff44a41":"markdown","7dd3fb59":"markdown","00d9b73c":"markdown","9e5af599":"markdown","b1b14f37":"markdown"},"source":{"2fc4ae8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 100) # Setting pandas to display a N number of columns\npd.set_option('display.max_rows', 10) # Setting pandas to display a N number rows\npd.set_option('display.width', 1000) # Setting pandas dataframe display width to N\nfrom scipy import stats # statistical library\nfrom statsmodels.stats.weightstats import ztest # statistical library for hypothesis testing\nimport plotly.graph_objs as go # interactive plotting library\nimport pandas_profiling # library for automatic EDA\n%pip install autoviz # installing and importing autoviz, another library for automatic data visualization\nfrom autoviz.AutoViz_Class import AutoViz_Class\nfrom IPython.display import display # display from IPython.display\nfrom itertools import cycle # function used for cycling over values\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n#     for filename in filenames:\n#         pass\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf3cc882":"# for k,v in df.items():\n#     print(k)\n#     print('#' * len(k))\n#     print(v.columns.to_list())\n#     print('*' * 10)\n#     print('*' * 10)","c188f58e":"# df = dict()\n# for dirname, _, filenames in os.walk('\/kaggle\/input\/zomato-restaurants-data'):\n#     for filename in filenames:\n#         if filename.endswith('.csv'):\n#             name = filename.split('.')[0]\n#             df[name] = pd.read_csv(os.path.join(dirname, filename))\n# #         elif filename.endswith('.json'):\n# #             import json\n# #             from pandas.io.json import json_normalize  \n# #             with open(os.path.join(dirname, filename)) as f: \n# #                 _ = json.load(f) \n# #             name = filename.split('.')[0]\n# #             print(_)\n# #             df[name] = pd.read_json(_, orient='index')\n            \n#         print(os.path.join(dirname, filename))","0e1ac44b":"zomato_restaurent_df = pd.read_csv('\/kaggle\/input\/zomato-restaurants-data\/zomato.csv', encoding='latin-1')\ndisplay(zomato_restaurent_df.head(4))","c21f952a":"# report = pandas_profiling.ProfileReport(zomato_restaurent_df)","3a20ba79":"# display(report)","f2a91512":"# AV = AutoViz_Class()\n# report_2 = AV.AutoViz('\/kaggle\/input\/zomato-restaurants-data\/zomato.csv')","58c0f871":"df = dict()\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/restaurant-recommendation-challenge'):\n    for filename in filenames:\n        if filename.endswith('.csv'):\n            name = filename.split('.')[0]\n            df[name] = pd.read_csv(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))","a4a7affd":"display(df['orders'].head(4))","b87c04bc":"display(df['vendors'].head(4))","891ef226":"display(df['train_locations'].head(4))","f67f9b4e":"display(df['train_customers'].head(4))","52c50a14":"# display(df['train_full'].head(4))","bb1996af":"display(df['train_full'].head(4))","0eb37d75":"!cat \/kaggle\/input\/restaurant-recommendation-challenge\/VariableDefinitions.txt","5e839370":"df = dict()\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/19560-indian-takeaway-orders'):\n    for filename in filenames:\n        if filename.endswith('.csv'):\n            name = filename.split('.')[0]\n            df[name] = pd.read_csv(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))","6da3a837":"display(df['restaurant-1-orders'].head(4))","ab732ca7":"display(df['restaurant-2-orders'].head(4))","bd5b7d45":"display(df['restaurant-1-products-price'].head(4))","26c6d48e":"display(df['restaurant-2-products-price'].head(4))","a5cd34aa":"df = dict()\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/zomato-restaurants-hyderabad'):\n    for filename in filenames:\n        if filename.endswith('.csv'):\n            name = filename.split('.')[0]\n            df[name] = pd.read_csv(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))","6da31401":"display(df['Restaurant names and Metadata'].head(4))","a7d04d72":"display(df['Restaurant reviews'].head(4))","59f2fb4b":"df = dict()\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/amazon-fine-food-reviews'):\n    for filename in filenames:\n        if filename.endswith('.csv'):\n            name = filename.split('.')[0]\n            df[name] = pd.read_csv(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))","3b785506":"display(df['Reviews'].head(4))","d7ae1ed8":"df = dict()\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/food-demand-forecasting'):\n    for filename in filenames:\n        if filename.endswith('.csv'):\n            name = filename.split('.')[0]\n            df[name] = pd.read_csv(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))","eccbcd4b":"display(df['meal_info'].head(4))","f162879f":"display(df['train'].head(4))","67539f02":"display(df['fulfilment_center_info'].head(4))","185f8232":"df = dict()\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/food-preference'):\n    for filename in filenames:\n        if filename.endswith('.csv'):\n            name = filename.split('.')[0]\n            name = dirname.split('\/')[-1] + '_' + name\n            df[name] = pd.read_csv(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))","ea0508ab":"display(df['food-preference_food_coded'].head(4))","e16f9e5b":"display(df['food-choices_food_coded'].head(4))","d61b748f":"# df = dict()\n# for dirname, _, filenames in os.walk('\/kaggle\/input\/av-genpact-hack-dec2018'):\n#     for filename in filenames:\n#         if filename.endswith('.csv'):\n#             name = filename.split('.')[0]\n#             df[name] = pd.read_csv(os.path.join(dirname, filename))\n#         print(os.path.join(dirname, filename))","61982e25":"# df['meal_info'].columns","abaa6e17":"# df['train'].columns","39fd576c":"# df['fulfilment_center_info'].columns","c9962ff0":"!wget https:\/\/raw.githubusercontent.com\/altosaar\/food2vec\/master\/dat\/kaggle_and_nature.csv","6361f9f0":"with open('\/kaggle\/working\/kaggle_and_nature.csv') as f:\n    print(f.read())","8c7ecdb6":"> Not useful ","fc52fb45":"> We can't use the above data as this data only represents the restaurents but we need to know customer and food as well to make a recommendation","6395e5ff":"## Restaurent Recommendation Challenge","24cb94f8":"# Zomato Restaurent Data\n\n- [Link](https:\/\/www.kaggle.com\/shrutimehta\/zomato-restaurants-data)\n- [Notebook link](https:\/\/www.kaggle.com\/caicell\/zomato-india-restaurants-eda)","6791a6fd":"## Indian Takeway orders","fcd54437":"> This data doesn't fulfill the requirements","7fd0e94c":"## Amazon Food Reviews","9135500a":"> Lack of proper information ","59e0b6e2":"## Keywords for exploring datasets\n- Food\n- Restaurent\n- Recommendation\n- Food demand forecasting\n- Restaurent recommendation","db9db3bf":"## Food demand forecasting","0ff44a41":"## Zomato Restaurents Hyderabad","7dd3fb59":"## Food preference","00d9b73c":"> This data can be used as this data has lots of information to use in any recommendation job","9e5af599":"> lack of useful information","b1b14f37":"> This data is not useful as lack of proper information"}}