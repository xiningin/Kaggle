{"cell_type":{"a73d78c1":"code","815f4944":"code","d4a357ba":"code","b57ff418":"code","3020fad2":"code","78cb209c":"code","084e7fad":"code","f09e32f9":"code","e9d3785c":"code","9ef1e8a6":"code","2917d622":"code","3242ffff":"code","35a8fdd8":"code","638c2fc9":"code","4e12f563":"code","62cef776":"code","3ce02352":"code","010abc9a":"code","cb0d069c":"code","0ae4ad8d":"code","9c6a55ed":"code","8c819081":"code","98b1509e":"code","fa86b62d":"code","c45b97c6":"code","2d0d5b5a":"code","d0a04f69":"code","c741d56a":"code","97fe7d39":"code","d1a2fd34":"code","3907047a":"code","9f39baaf":"code","bca8ef93":"code","d8f6dcdb":"code","96f33cb2":"code","5bc67c12":"code","5ba1b1a6":"code","d47d54c1":"code","bba4d789":"code","9f34bc2d":"code","6f4e7dcf":"code","a600007c":"code","93675558":"markdown","e8744e43":"markdown","281664fa":"markdown","2a299e71":"markdown","1e629724":"markdown","30c98956":"markdown","cdf378a9":"markdown","dea80c84":"markdown"},"source":{"a73d78c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","815f4944":"df_train= pd.read_csv('\/kaggle\/input\/Train.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/Test.csv')","d4a357ba":"df_train.columns","b57ff418":"df_train.head()","3020fad2":"df_train.info()","78cb209c":"df_test.head()","084e7fad":"df_test.info()","f09e32f9":"#Searching for missing values and then analysing\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","e9d3785c":"features_with_na= [features for features in df_train.columns if df_train[features].isnull().sum()>1]\nfeatures_with_na_test= [features for features in df_test.columns if df_test[features].isnull().sum()>1]\n\nfor feature in features_with_na:\n    print( feature, np.round(df_train[feature].isnull().mean(),4),'% missing values')","9ef1e8a6":"features_with_num= [feature for feature in df_train.columns if df_train[feature].dtypes!='O']\nprint(features_with_num)","2917d622":"for feature in features_with_num:\n    df_train.groupby(feature)['Attrition_rate'].median().plot()\n    plt.xlabel(feature)\n    plt.ylabel(\"Attrition_rate\")\n  \n    plt.show()\n","3242ffff":"discrete_feature=[feature for feature in features_with_num and df_train if len(df_train[feature].unique())<10 or df_train[feature].dtypes=='O']\ndiscrete_feature.remove('Hometown')\ndiscrete_feature.remove('Employee_ID')\nprint(discrete_feature)","35a8fdd8":"for feature in discrete_feature:\n    df_train.groupby(feature)['Attrition_rate'].mean().plot.bar()\n    plt.xlabel(feature)\n    plt.yscale('log')\n    plt.ylabel('Attrition_rate')\n    \n    plt.show()","638c2fc9":"#Using log transformation\n","4e12f563":"continous_feature=[feature for feature in features_with_num if feature not in discrete_feature]\nprint(continous_feature)","62cef776":"for feature in continous_feature:\n    df_train[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel('Count')\n    plt.show()","3ce02352":"df_train.info()","010abc9a":"mean_value=df_train[features_with_na].mean()\ndf_train.fillna(mean_value, inplace=True)\n\nmean_value_test=df_test[features_with_na_test].mean()\ndf_test.fillna(mean_value_test, inplace=True)","cb0d069c":"df_train.info()","0ae4ad8d":"object_features=[feature for feature in df_train if df_train[feature].dtypes=='O']\nobject_features.remove('Employee_ID')\nprint(object_features)\n\nobject_features_test=[feature for feature in df_test if df_test[feature].dtypes=='O']\nobject_features_test.remove('Employee_ID')","9c6a55ed":"#Encoding categ features\nfrom sklearn.preprocessing import LabelEncoder\n\nencoder=LabelEncoder()\n\nfor f in object_features:\n   df_train[f]=encoder.fit_transform(df_train[f])\n\n\nfor f in object_features_test:\n    df_test[f]=encoder.fit_transform(df_test[f])\n","8c819081":"df_train.info()","98b1509e":"df_test.info()","fa86b62d":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()","c45b97c6":"scale_feat= [f for f in df_train.columns if f not in ['Employee_ID','Attrition_rate']]\ndf_train[scale_feat]=scaler.fit_transform(df_train[scale_feat])\n\nscale_feat_test=[f for f in df_test.columns if f not in ['Employee_ID','Attrition_rate']]\ndf_test[scale_feat_test]=scaler.fit_transform(df_test[scale_feat_test])","2d0d5b5a":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nfeat=['Gender', 'Age', 'Education_Level', 'Relationship_Status', 'Hometown', 'Unit', 'Decision_skill_possess','Time_of_service', 'Time_since_promotion', 'growth_rate', 'Travel_Rate','Post_Level', 'Pay_Scale', 'Compensation_and_Benefits','Work_Life_balance', 'VAR1', 'VAR2', 'VAR3', 'VAR4', 'VAR5', 'VAR6','VAR7']\nX=df_train[feat]\ny=df_train.Attrition_rate","d0a04f69":"X_train, X_test, y_train, y_test= train_test_split(X,y, test_size=0.33, random_state=42) \n","c741d56a":"from sklearn.model_selection import RandomizedSearchCV\nimport xgboost\n\nregressor=xgboost.XGBRegressor()\n\nparams={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}","97fe7d39":"random_search=RandomizedSearchCV(regressor,param_distributions=params,n_iter=5,scoring='neg_root_mean_squared_error',n_jobs=-1,cv=5,verbose=3)\nrandom_search.fit(X_train, y_train)","d1a2fd34":"random_search.best_estimator_\nrandom_search.best_params_","3907047a":"new_model= xgboost.XGBRegressor(min_child_weight= 3,\n max_depth= 3,\n learning_rate=0.2,\n gamma= 0.4,\n colsample_bytree= 0.7)","9f39baaf":"new_model.fit(X_train,y_train)","bca8ef93":"y_pred=new_model.predict(X_test)","d8f6dcdb":"rmse=mean_squared_error(y_test, y_pred)**(1\/2)","96f33cb2":"print(rmse)","5bc67c12":"new_model.fit(X,y)","5ba1b1a6":"predictions=new_model.predict(df_test[feat])","d47d54c1":"output= pd.DataFrame({'Employee_ID': df_test.Employee_ID, 'Attrition_rate': predictions})\noutput.to_csv('MySubmission.csv', index=False)\nprint('Success')","bba4d789":"import keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.callbacks import EarlyStopping\n","9f34bc2d":"n_cols= X.shape[1]\n\nn_model=Sequential()\nn_model.add(Dense(200,activation='relu',input_shape=(n_cols,)))\nn_model.add(Dense(190,activation='relu'))\nn_model.add(Dense(180, activation='relu'))\nn_model.add(Dense(1))\n\nmycb=[EarlyStopping(patience=10)]\n\n\nn_model.compile(optimizer='adam', loss='mean_squared_error')\nn_model.fit(X.values,y.values,validation_split=0.3,callbacks=mycb, epochs=100)","6f4e7dcf":"y_pred_n=n_model.predict(X_test)","a600007c":"rmse_n=mean_squared_error(y_test, y_pred_n)**(1\/2)\nprint(rmse_n)","93675558":"# EDA","e8744e43":"# Importing DataSets","281664fa":"Numeric values","2a299e71":"Missing values","1e629724":"# NEW MODEL","30c98956":"# MODEL FITTING","cdf378a9":"Discrete Var","dea80c84":"# Feature Engineering"}}