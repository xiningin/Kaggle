{"cell_type":{"9205ffb3":"code","a224c3ca":"code","51ad485d":"code","289a1965":"code","b3b0b9c0":"code","692d1106":"code","f5c10b14":"code","c73b2ea4":"code","3e73e07d":"code","03cf6f6e":"code","16355523":"code","9cb49e7b":"code","3a44b83a":"code","db003e85":"code","013feeb4":"code","b0254292":"code","2628097e":"code","2800dfc1":"code","f5e30b34":"code","c775882b":"code","435bba05":"code","08e28601":"code","5d720321":"code","99d81385":"code","a96b5f52":"code","19ad1c04":"code","c81d2130":"code","3a32cef6":"code","953f4534":"code","1c54c106":"code","f541b82c":"code","afd83a2b":"code","8c837bc0":"code","dea0e737":"code","8f520322":"code","84384d5a":"code","a756c2c0":"code","70251f0e":"code","8f17722e":"code","3c93d2d8":"code","e244b80f":"code","8a245539":"code","716da237":"code","ccb9c932":"code","4367aad0":"code","e06818dd":"code","d5789dc6":"code","ae101c9c":"code","7482edd7":"code","6e714d90":"code","e6941f8a":"code","12835310":"code","ca9ec96a":"markdown","fc3d8abf":"markdown","7f015697":"markdown","cb1962ae":"markdown","cf9babe5":"markdown","aa46f0db":"markdown","7dc9a63c":"markdown","680f85f2":"markdown","f5a15379":"markdown","571dac87":"markdown"},"source":{"9205ffb3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport missingno as msno\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\n%matplotlib inline\n\nsns.set_style(\"whitegrid\")\nimport os","a224c3ca":"path = '\/kaggle\/input\/home-data-for-ml-course\/'","51ad485d":"train_df = pd.read_csv(path+'train.csv')\ntest_df = pd.read_csv(path+'\/test.csv')\nsub_df = pd.read_csv(path+'\/sample_submission.csv')","289a1965":"train_df.head()","b3b0b9c0":"test_df.head()","692d1106":"train_df.columns","f5c10b14":"test_df.columns","c73b2ea4":"train_df.SalePrice.describe()","3e73e07d":"plt.figure(figsize=(10,5))\n\nplt.subplot(1,2,1)\nsns.distplot(train_df.SalePrice, bins=50)\nplt.title('Original')\n\nplt.subplot(1,2,2)\nsns.distplot(np.log1p(train_df.SalePrice), bins=50)\nplt.title('Log transformed')\n","03cf6f6e":"train_df.SalePrice.skew()","16355523":"train_df.SalePrice.kurt()","9cb49e7b":"train_df['GrLivArea']","3a44b83a":"var = 'GrLivArea'\ndata = pd.concat([train_df[\"SalePrice\"], train_df[var]], axis=1)\ndata.head()","db003e85":"data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000))","013feeb4":"corr_matrix = train_df.corr()","b0254292":"sns.set(rc={'axes.facecolor':'white', 'figure.facecolor':'white'})\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corr_matrix, vmax=.8, square=True)\nsns.heatmap","2628097e":"k = 10 #number of variables for heatmap\ncols = corr_matrix.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train_df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()\n","2800dfc1":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train_df[cols], size = 2.5)\nplt.show()","f5e30b34":"total = train_df.isnull().sum().sort_values(ascending = False)\npercent = (train_df.isnull().sum() \/ train_df.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(10)","c775882b":"msno.matrix(train_df.sample(500))","435bba05":"msno.bar(train_df)","08e28601":"msno.heatmap(train_df)","5d720321":"target = train_df['SalePrice']\ntarget_log = np.log1p(train_df['SalePrice'])","99d81385":"# drop target variable from train dataset\ntrain = train_df.drop([\"SalePrice\"], axis=1)\ndata = pd.concat([train, test_df], ignore_index=True)","a96b5f52":"data.head()","19ad1c04":"# save all categorical columns in list\ncategorical_columns = [col for col in data.columns.values if data[col].dtype == 'object']\n\n# dataframe with categorical features\ndata_cat = data[categorical_columns]\n# dataframe with numerical features\ndata_num = data.drop(categorical_columns, axis=1)","c81d2130":"data_num.head(1)","3a32cef6":"data_num.describe()","953f4534":"data_cat.head(1)","1c54c106":"data_num.head()","f541b82c":"data_num_skew = data_num.apply(lambda x: skew(x.dropna()))\ndata_num_skew = data_num_skew[data_num_skew > .75]\n\n# apply log + 1 transformation for all numeric features with skewnes over .75\ndata_num[data_num_skew.index] = np.log1p(data_num[data_num_skew.index])","afd83a2b":"data_num_skew","8c837bc0":"data_num.drop","dea0e737":"data_len = data_num.shape[0]\n\n# check what is percentage of missing values in categorical dataframe\nfor col in data_num.columns.values:\n    missing_values = data_num[col].isnull().sum()\n    #print(\"{} - missing values: {} ({:0.2f}%)\".format(col, missing_values, missing_values\/data_len*100)) \n    \n    # drop column if there is more than 50 missing values\n    if missing_values > 50:\n        #print(\"droping column: {}\".format(col))\n        data_num = data_num.drop(col, axis = 1)\n    # if there is less than 50 missing values than fill in with median valu of column\n    else:\n        #print(\"filling missing values with median in column: {}\".format(col))\n        data_num = data_num.fillna(data_num[col].median())","8f520322":"data_len = data_cat.shape[0]\n\n# check what is percentage of missing values in categorical dataframe\nfor col in data_cat.columns.values:\n    missing_values = data_cat[col].isnull().sum()\n    #print(\"{} - missing values: {} ({:0.2f}%)\".format(col, missing_values, missing_values\/data_len*100)) \n    \n    # drop column if there is more than 50 missing values\n    if missing_values > 50:\n        print(\"{}\".format(col))\n        data_cat.drop(col, axis = 1)\n    # if there is less than 50 missing values than fill in with median valu of column\n    else:\n        #print(\"filling missing values with XXX: {}\".format(col))\n        #data_cat = data_cat.fillna('XXX')\n        pass","84384d5a":"data_cat.describe()\n","a756c2c0":"columns = ['Alley',\n'BsmtQual',\n'BsmtCond',\n'BsmtExposure',\n'BsmtFinType1',\n'BsmtFinType2',\n'FireplaceQu',\n'GarageType',\n'GarageFinish',\n'GarageQual',\n'GarageCond',\n'PoolQC',\n'Fence',\n'MiscFeature'\n]\ndata_cat = data_cat.drop(columns, axis=1)","70251f0e":"data_cat.head()","8f17722e":"data_cat.dropna()","3c93d2d8":"data_num.describe()","e244b80f":"data_num.columns","8a245539":"data_cat = pd.get_dummies(data_cat)","716da237":"frames = [data_cat, data_num]\ntotal_df = pd.concat(frames,  axis=1)","ccb9c932":"total_df.head()","4367aad0":"# target.head()\nsub_df.head()","e06818dd":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error","d5789dc6":"train_df = total_df[:1460]\ntest_df = total_df[1461:]","ae101c9c":"train_df.tail()","7482edd7":"test_df.tail()","6e714d90":"sub_df.head()","e6941f8a":"test_df.head()","12835310":"target.tail()","ca9ec96a":"# Concat train and test dataset in order for pre-processing\nIn order to apply transformations on data, we have to concatenate both datasets: train and test","fc3d8abf":"# Data Cleaning\n\nOverview\n- remove skewenes of target feature\n- remove skewenes of numeric features is exists\n- handle missing values in categorical features\n- handle missing values in numerical features\n- feature selection","7f015697":"# House Prediction EDA","cb1962ae":"# Target Variable","cf9babe5":"# Split dataframe into numeric and categorical\nSplit dataframe into 2 with:\n\n- categorical feature space\n- numerical feature space","aa46f0db":"# handling missing values in numerical columns","7dc9a63c":"# handling missing values in categorical columns","680f85f2":"# split data into train and test","f5a15379":"InProgress ...","571dac87":"# Reduce skewness for numeric features"}}