{"cell_type":{"7f25dd00":"code","fffa65ea":"code","afa9efe8":"code","524e9e8f":"code","44cac877":"code","deae3bd1":"code","a3cc8606":"code","3e04e48c":"code","11f6a27a":"code","13882ed8":"code","f1ce1949":"code","ad600bf9":"code","b58db9dd":"code","d216e918":"code","01d700eb":"code","8deb4c1d":"code","2ee44527":"code","108db653":"code","8413eee0":"code","5948aa0a":"code","76620d78":"code","bad01b18":"code","92493075":"code","05c2c78b":"code","80960821":"code","c4bdb53b":"code","da774b1d":"code","b1029c1c":"code","7f7b303a":"code","097de303":"code","d61f97d9":"code","1cede344":"code","0b245c79":"code","13317951":"code","3c3d096f":"code","d77b2f1a":"code","b93f6c41":"code","5e5d228f":"code","d6ec7ff2":"code","ca0cf3a3":"code","a30559b1":"code","cfb7db56":"code","0ff94299":"code","52814a25":"code","9a35abb8":"code","5778dfc7":"code","025efd36":"code","b42a48e1":"code","171cf8fc":"code","69e3dfe5":"code","8eb17b54":"code","e0119971":"code","825d33a8":"code","4d1a7b0d":"code","059dc8db":"code","30228c45":"code","70d1e7b4":"code","6bea80f4":"code","c8b512f2":"code","6f47f87b":"code","083c5fb0":"code","360f2222":"code","7501c6c1":"code","650eed4b":"code","732e8e38":"code","6aa7d45e":"code","30dc5bfe":"code","866354b3":"code","8290b23b":"code","c7a8b34e":"code","fe282dfb":"code","51b0a905":"markdown","4d83a599":"markdown","c8730002":"markdown","0d35bc75":"markdown","c6317b42":"markdown","1d2a0dfc":"markdown","e05c7830":"markdown","abb76bfb":"markdown","7f3ecd6c":"markdown","37e14a86":"markdown","aea151fc":"markdown","8c28a936":"markdown","c2e0115a":"markdown","3cf6b66a":"markdown","36dc8ed2":"markdown","5a8c0dc8":"markdown","4e7ad34c":"markdown","5b5960cc":"markdown"},"source":{"7f25dd00":"## Calling the libraries\nimport numpy as np\nimport pandas  as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)","fffa65ea":"# To increase the display size for rows and columns\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\n\n","afa9efe8":"word=pd.read_excel(r\"..\/input\/lead-scoring-dataset\/Leads Data Dictionary.xlsx\",index_col=0)\nprint(word)","524e9e8f":"#reading the Leads csv file\ndf = pd.read_csv('..\/input\/lead-scoring-dataset\/Lead Scoring.csv')","44cac877":"# reading the first 5 rows\ndf.head()","deae3bd1":"# shape of the data frame\ndf.shape","a3cc8606":"# info of the dataframe\ndf.info()","3e04e48c":"#stastical information of the data frame\ndf.describe()","11f6a27a":"## checking the object columns\nob=df.select_dtypes(include=[\"object\"]).columns\nob","13882ed8":"#Replacing the select with null values for all columns\ndf = df.replace({'Select':np.nan})","f1ce1949":"#Percentage of missing values\nnull_perc = pd.DataFrame(round((df.isnull().sum())*100\/df.shape[0],2)).reset_index()\nnull_perc.columns = ['Column Name', 'Null Values Percentage']\nnull_value = pd.DataFrame(df.isnull().sum()).reset_index()\nnull_value.columns = ['Column Name', 'Null Values']\nnull_lead = pd.merge(null_value, null_perc, on='Column Name')\nnull_lead.sort_values(\"Null Values\", ascending = False)","ad600bf9":"## removing columns greater than 45% null values\nnull_column =round((df.isnull().sum()\/len(df))*100,4) \nnull_column_45 = null_column[null_column.values > 45.0000]\nnull_column_45 = list(null_column_45.index)\ndf.drop(labels=null_column_45,axis=1,inplace=True)","b58db9dd":"# Columns contains  data type objects\nob=df.select_dtypes(include=[\"object\"]).columns","d216e918":"# Checking unique values and null values for the categorical columns\ndef Cat_info(df, categorical_column):\n    df_result = pd.DataFrame(columns=[\"columns\",\"values\",\"unique_values\"])\n    \n    df_temp=pd.DataFrame()\n    for value in categorical_column:\n        df_temp[\"columns\"] = [value]\n        df_temp[\"values\"] = [df[value].unique()]\n        df_temp[\"unique_values\"] = df[value].nunique()\n        df_result = df_result.append(df_temp)\n\n    df_result.set_index(\"columns\", inplace=True)\n    return df_result","01d700eb":"df_cat = Cat_info(df, ob)\ndf_cat","8deb4c1d":"def column_category_counts(data):\n    return pd.DataFrame(data.value_counts(dropna=False))\n\n\nfor column in ob:\n    print(\"Column Name : \",column)\n    display(column_category_counts(df[column]).T)","2ee44527":"#Dropping columns which are highly skewed\ndf.drop([\"Newspaper Article\",\"Do Not Email\",\"Do Not Call\",\"What matters most to you in choosing a course\",\"Search\",\"Magazine\",\"X Education Forums\",\"Newspaper\",\"Digital Advertisement\",\"Through Recommendations\",\"Receive More Updates About Our Courses\",\"Update me on Supply Chain Content\",\"Get updates on DM Content\",\"I agree to pay the amount through cheque\"],axis=1,inplace=True)","108db653":"df.drop([\"Tags\",\"Prospect ID\",\"Lead Number\",\"City\"],axis=1,inplace=True)","8413eee0":"## Dropping Lead Notable activity as this field is similar to Lead activity\ndf.drop([\"Last Notable Activity\"],axis=1,inplace=True)","5948aa0a":"# Converting uneven distribution to \"OTHERS\" for Lead source, Last activity , Country and Last notable activity\ndf.loc[(df[\"Lead Source\"].isin([\"Facebook\",\"bing\",\"google\",\"Click2call\",\"Social Media\",\"Live Chat\",\"Press_Release\",\"testone\",\"welearnblog_Home\",\"blog\",\"youtubechannel\",\"NC_EDM\",\"Pay per Click Ads\",\"WeLearn\"])),\"Lead Source\"]=\"Other_Internet_Sources\"\ndf.loc[(df[\"Last Activity\"].isin([\"Unreachable\",\"Unsubscribed\",\"Had a Phone Conversation\",\"Approached upfront\",\"View in browser link Clicked\",\"Email Marked Spam\",\"Email Received\",\"Resubscribed to emails\",\"Visited Booth in Tradeshow\"])),\"Last Activity\"]=\"All Others\"\ndf.loc[(df[\"Country\"].isin([\"Bahrain\",\"Hong Kong\",\"France\",\"Oman\",\"unknown\",\"Nigeria\",\"South Africa\",\"Canada\",\"Kuwait\",\"Germany\",\"Sweden\",\"Ghana\",\"Italy\"                      \n,\"Belgium\",\"China\",\"Uganda\",\"Asia\/Pacific Region\",\"Philippines\",\"Bangladesh\",\"Netherlands\",\"Kenya\",\"Sri Lanka\",\"Indonesia\",\"Denmark\",\"Tanzania\",\"Malaysia\",\"Switzerland\",\"Russia\",\"Liberia\",\"Vietnam\"])),\"Country\"]=\"All Others\"\n","76620d78":"# impute the mode for country, city, specialization and what is your current occupation with hightest value counts\ndf.loc[df['Specialization'].isnull(),'Specialization']=df['Specialization'].value_counts().index[0]\ndf.loc[df['Country'].isnull(),'Country']=df['Country'].value_counts().index[0]\ndf.loc[df['What is your current occupation'].isnull(),'What is your current occupation']=df['What is your current occupation'].value_counts().index[0]","bad01b18":"## removing the remaining null values \ndf=df.dropna()","92493075":"# object data types columns\nob=df.select_dtypes(include=[\"object\"]).columns\nob","05c2c78b":"for i in ob:\n    plt.figure(figsize=(15,5))\n    sns.countplot(df[i])\n    plt.xticks(rotation='vertical')","80960821":"## checking integer and float datatypes\nnu=df.select_dtypes(include=[\"int\",\"float\"]).columns\nnu","c4bdb53b":"fig=px.box(df[\"TotalVisits\"])\n\nfig.show()","da774b1d":"## Outer range of ouliers are moving to .95 percentile\nq4=df[\"TotalVisits\"].quantile(q=.95)\ndf[\"TotalVisits\"][df[\"TotalVisits\"]>=q4]=q4","b1029c1c":"fig=px.box(df[\"Page Views Per Visit\"])\nfig.show()","7f7b303a":"fig=px.box(df[\"Total Time Spent on Website\"])\nfig.show()","097de303":"## converting to  q4 percentile\nq4=df[\"Page Views Per Visit\"].quantile(q=.95)\ndf[\"Page Views Per Visit\"][df[\"Page Views Per Visit\"]>=q4]=q4","d61f97d9":"fig=px.box(df[\"Page Views Per Visit\"])\nfig.show()","1cede344":"#dummy vaiables\ndf = pd.get_dummies(df,drop_first=True)","0b245c79":"## checking the shape after adding the dummy variables\ndf.shape","13317951":"## checking the info\ndf.info()","3c3d096f":"# Importing the required library to perform the test_train_split\nfrom sklearn.model_selection import train_test_split","d77b2f1a":"X = df.drop(columns=['Converted'],axis=1)\n\n#Putting the response variable in y\ny = df[['Converted']]","b93f6c41":"# Performing the train_test_split with 70% of data for training set and 30% data for test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state = 42)\n","5e5d228f":"X_train.shape , X_test.shape","d6ec7ff2":"dt = DecisionTreeClassifier(random_state=42, max_depth=3, min_samples_leaf=10)\n\n","ca0cf3a3":"dt.fit(X_train, y_train)","a30559b1":"y_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)","cfb7db56":"from sklearn.metrics import classification_report\n","0ff94299":"print(classification_report(y_test,y_test_pred))","52814a25":"from sklearn.metrics import plot_roc_curve","9a35abb8":"plot_roc_curve(dt, X_train, y_train, drop_intermediate=False)\nplt.show()","5778dfc7":"from sklearn.model_selection import GridSearchCV","025efd36":"dt_ = DecisionTreeClassifier(random_state=42)","b42a48e1":"params = {\n    \"max_depth\": [2,3,5,10,20],\n    \"min_samples_leaf\": [5,10,20,50,100,500]\n}","171cf8fc":"grid_search = GridSearchCV(estimator=dt_,\n                           param_grid=params,\n                           cv=6,\n                           n_jobs=-1, verbose=1, scoring=\"accuracy\")","69e3dfe5":"\ngrid_search.fit(X_train, y_train)","8eb17b54":"dtt=grid_search.best_score_","e0119971":"dt_best = grid_search.best_estimator_\ndt_best","825d33a8":"plot_roc_curve(dt_best, X_train, y_train)\nplt.show()","4d1a7b0d":"dt_best.feature_importances_","059dc8db":"imp_df = pd.DataFrame({\n    \"Varname\": X_train.columns,\n    \"Imp\": dt_best.feature_importances_\n})","30228c45":"imp_df.sort_values(by=\"Imp\", ascending=False)","70d1e7b4":"from sklearn.ensemble import RandomForestClassifier","6bea80f4":"rf = RandomForestClassifier(n_estimators=10,random_state=42, n_jobs=-1, max_depth=5, min_samples_leaf=10,oob_score=True)","c8b512f2":"rf.fit(X_train, y_train)","6f47f87b":"rf.oob_score_","083c5fb0":"plot_roc_curve(rf, X_train, y_train)\nplt.show()","360f2222":"rf = RandomForestClassifier(random_state=42, n_jobs=-1)","7501c6c1":"params = {\n    'max_depth': [2,3,5,10,20],\n    'min_samples_leaf': [5,10,20,50,100,200],\n    'n_estimators': [10, 25, 50, 100]\n}","650eed4b":"grid_search = GridSearchCV(estimator=rf,\n                           param_grid=params,\n                           cv = 4,\n                           n_jobs=-1, verbose=1, scoring=\"accuracy\")","732e8e38":"grid_search.fit(X_train, y_train)","6aa7d45e":"dtr=grid_search.best_score_","30dc5bfe":"rf_best = grid_search.best_estimator_\nrf_best","866354b3":"plot_roc_curve(rf_best, X_train, y_train)\nplt.show()","8290b23b":"rf_best.feature_importances_","c7a8b34e":"imp_df = pd.DataFrame({\n    \"Varname\": X_train.columns,\n    \"Imp\": rf_best.feature_importances_\n})","fe282dfb":"imp_df.sort_values(by=\"Imp\", ascending=False)","51b0a905":"# 8. Dummy variable handling","4d83a599":"Problem Statement\n\nAn education company named X Education sells online courses to industry professionals. On any given day, many professionals who are interested in the courses land on their website and browse for courses.\n\nThe company markets its courses on several websites and search engines like Google. Once these people land on the website, they might browse the courses or fill up a form for the course or watch some videos. When these people fill up a form providing their email address or phone number, they are classified to be a lead. Moreover, the company also gets leads through past referrals. Once these leads are acquired, employees from the sales team start making calls, writing emails, etc. Through this process, some of the leads get converted while most do not. The typical lead conversion rate at X education is around 30%.\n\nNow, although X Education gets a lot of leads, its lead conversion rate is very poor. For example, if, say, they acquire 100 leads in a day, only about 30 of them are converted. To make this process more efficient, the company wishes to identify the most potential leads, also known as \u2018Hot Leads\u2019. If they successfully identify this set of leads, the lead conversion rate should go up as the sales team will now be focusing more on communicating with the potential leads rather than making calls to everyone. A typical lead conversion process can be represented using the following funnel:\n\nLead Conversion Process - Demonstrated as a funnel As you can see, there are a lot of leads generated in the initial stage (top) but only a few of them come out as paying customers from the bottom. In the middle stage, you need to nurture the potential leads well (i.e. educating the leads about the product, constantly communicating etc. ) in order to get a higher lead conversion.\n\nX Education has appointed you to help them select the most promising leads, i.e. the leads that are most likely to convert into paying customers. The company requires you to build a model wherein you need to assign a lead score to each of the leads such that the customers with higher lead score have a higher conversion chance and the customers with lower lead score have a lower conversion chance. The CEO, in particular, has given a ballpark of the target lead conversion rate to be around 80%.","c8730002":"# 2.Reading and Undersatanding the data","0d35bc75":"# 7. Handling  Numerical variabels","c6317b42":"# 10. Decision Tree ","1d2a0dfc":"#  1.Importing the Data","e05c7830":"# 9.Spliting the data in to Train and Test","abb76bfb":"# Lead Score ","7f3ecd6c":"# 12. Using Random Forest","37e14a86":"> Drop the Column tags, Propects ID its created by sales team i.e after contacting with the students. Also dropping Lead number as it is like a unique number.\n\nDrop City which is having 39% of missing value, if we impute then it will be skewed","aea151fc":"Hyper-parameter tuning for the Decision Tree","8c28a936":"Accuracy is increased in Random forest than in decision tree","c2e0115a":"Roc curve","3cf6b66a":"Outlier handling","36dc8ed2":"# 3. Inspecting the data","5a8c0dc8":"# 5.Imputation Process\n\nConvert columns to \"others\" lead score\",\"Last Activity\",\"Country\",\"Tags\"\n\nDrop columns which are highly skewed \"Do Not Email\",\"Do Not Call\",\"What matters most to you in choosing a course\",\"Search\",\"Magazine\",\" Newspaper Article\",\"X Education Forums\",\"Newspaper\",\"Digital Advertisement\",\"Through Recommendations\",\"Receive More Updates About Our Courses\",\"Update me on Supply Chain Content\",\"Get updates on DM Content\",\"I agree to pay the amount through cheque\",\"","4e7ad34c":"# 4. Dealing with Missing Values","5b5960cc":"# 11. Evaluating model performance"}}