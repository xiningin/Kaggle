{"cell_type":{"9f323721":"code","aadee91b":"code","b06ba0ee":"code","03ab884b":"code","f5c83b1e":"code","dd55ebad":"code","84d01cbd":"code","bc8c6924":"code","786ddf58":"code","dc15ff1f":"code","e65b2a0a":"code","dd9c6b4a":"code","a1deb663":"code","dd2602d4":"code","8b7a1b76":"markdown","27d81c4f":"markdown","7c48ebb6":"markdown","2e588393":"markdown","1cef3e26":"markdown","30f33d66":"markdown"},"source":{"9f323721":"from  datetime import datetime, timedelta\nimport gc\nimport numpy as np, pandas as pd\nimport lightgbm as lgb\n\nimport os, sys, gc, time, warnings, pickle, psutil, random\n\nwarnings.filterwarnings('ignore')","aadee91b":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                       df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","b06ba0ee":"FIRST_DAY = 710 # If you want to load all the data set it to '1' -->  Great  memory overflow  risk !\n\ngrid2_colnm = ['sell_price', 'price_max', 'price_min', 'price_std',\n               'price_mean', 'price_norm', 'price_nunique', 'item_nunique',\n               'price_momentum', 'price_momentum_m', 'price_momentum_y']\n\ngrid3_colnm = ['event_name_1', 'event_type_1', 'event_name_2',\n               'event_type_2', 'snap_CA', 'snap_TX', 'snap_WI', 'tm_d', 'tm_w', 'tm_m',\n               'tm_y', 'tm_wm', 'tm_dw', 'tm_w_end']\n\nmean_encoding_combination = [\n    ['store_id','dept_id'], \n    ['store_id','item_id'], \n    ['store_id', 'dept_id', 'tm_m'],\n    ['store_id', 'dept_id', 'tm_m', 'tm_dw'],\n    ['store_id', 'dept_id', 'tm_dw' ,'snap_CA'],\n    ['store_id', 'dept_id', 'tm_dw' ,'snap_TX'],\n    ['store_id', 'dept_id', 'tm_dw' ,'snap_WI']\n]","03ab884b":"grid_1 = pd.read_pickle(\"..\/input\/m5-simple-fe\/grid_part_1.pkl\")\ngrid_2 = pd.read_pickle(\"..\/input\/m5-simple-fe\/grid_part_2.pkl\")[grid2_colnm]\ngrid_3 = pd.read_pickle(\"..\/input\/m5-simple-fe\/grid_part_3.pkl\")[grid3_colnm]\n\ngrid_df = pd.concat([grid_1, grid_2, grid_3], axis=1)\ndel grid_1, grid_2, grid_3; gc.collect()\n\ngrid_df = grid_df[(grid_df['d'] >= FIRST_DAY)]\n\ngrid_df = reduce_mem_usage(grid_df)","f5c83b1e":"used_cols = list()\nfor b in mean_encoding_combination:\n    for a in b:\n        used_cols.append(a)","dd55ebad":"grid_df = grid_df[['id'] + list(set(used_cols)) + ['sales']]","84d01cbd":"for col in mean_encoding_combination:\n    print(col, 'encoding')\n    colnm1 = '_'.join(col)+'_mean_enc'\n    colnm2 = '_'.join(col)+'_std_enc'\n    grid_df[colnm1] = grid_df.groupby(col)['sales'].transform('mean')\n    grid_df[colnm2] = grid_df.groupby(col)['sales'].transform('std')","bc8c6924":"enc_data = grid_df[['id']+[a for a in grid_df if 'enc' in a]]\nenc_data = reduce_mem_usage(enc_data)\nenc_data.to_pickle('mean_enc_reg.pkl')","786ddf58":"del enc_data, grid_df; gc.collect()","dc15ff1f":"grid_1 = pd.read_pickle(\"..\/input\/m5-simple-fe\/grid_part_1.pkl\")\ngrid_2 = pd.read_pickle(\"..\/input\/m5-simple-fe\/grid_part_2.pkl\")[grid2_colnm]\ngrid_3 = pd.read_pickle(\"..\/input\/m5-simple-fe\/grid_part_3.pkl\")[grid3_colnm]\n\ngrid_df = pd.concat([grid_1, grid_2, grid_3], axis=1)\ndel grid_1, grid_2, grid_3; gc.collect()\n\n# for classification transform TARGET to binary\ngrid_df['sales'] = np.where(grid_df['sales'] == 0 , 0, 1)\n\nsales = grid_df.sales\nsales[grid_df.d > 1913] = np.nan\ngrid_df['sales'] = sales\n\ngrid_df = grid_df[(grid_df['d'] >= FIRST_DAY)]\n\ngrid_df = reduce_mem_usage(grid_df)","e65b2a0a":"used_cols = list()\nfor b in mean_encoding_combination:\n    for a in b:\n        used_cols.append(a)","dd9c6b4a":"grid_df = grid_df[['id'] + list(set(used_cols)) + ['sales']]","a1deb663":"for col in mean_encoding_combination:\n    print(col, 'encoding')\n    colnm1 = '_'.join(col)+'_mean_enc'\n    colnm2 = '_'.join(col)+'_std_enc'\n    grid_df[colnm1] = grid_df.groupby(col)['sales'].transform('mean')\n    grid_df[colnm2] = grid_df.groupby(col)['sales'].transform('std')","dd2602d4":"enc_data = grid_df[['id']+[a for a in grid_df if 'enc' in a]]\nenc_data = reduce_mem_usage(enc_data)\nenc_data.to_pickle('mean_enc_clf.pkl')","8b7a1b76":"## For Regression","27d81c4f":"## Base variables","7c48ebb6":"## Utils","2e588393":"# Mean encoding for classification and regression\n- I use base dataset from [this notebook](https:\/\/www.kaggle.com\/kyakovlev\/m5-simple-fe)","1cef3e26":"## For classification","30f33d66":"\n- Inspired by [this notebook](https:\/\/www.kaggle.com\/headsortails\/back-to-predict-the-future-interactive-m5-eda#explanatory-variables-prices-and-calendar)\n- I think weekday, month sequence is very important in time series prediction"}}