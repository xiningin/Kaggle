{"cell_type":{"3f3a1da0":"code","216c4855":"code","a20d9fd0":"code","5874a2bc":"code","c6bca812":"code","9bca0bf0":"code","fba88d56":"code","c0713a90":"code","b9d700cb":"code","cb28f709":"markdown","95e430fe":"markdown","c47f7463":"markdown","19062035":"markdown","e082268a":"markdown","3edca272":"markdown"},"source":{"3f3a1da0":"import numpy as np \nimport pandas as pd \nimport os\nfrom tqdm import notebook \nfrom tqdm.notebook import tqdm as tqdm\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nsns.set_style('darkgrid')\n\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.metrics import Recall,AUC\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau","216c4855":"foldernames = os.listdir(f'..\/input\/bears-fastai-2021\/bears\/')\npath = f'..\/input\/bears-fastai-2021\/bears\/'\ncategories = []\nfiles = []\ni = 0\nfor k, folder in enumerate(foldernames):\n    filenames = os.listdir(path + folder);\n    for file in filenames:\n        files.append(path + folder + \"\/\" + file)\n        categories.append(k)\ndf = pd.DataFrame({\n    'filename': files,\n    'category': categories\n})\n\ndf['category'][df['category']==0] = 'black bear'\ndf['category'][df['category']==1] = 'grizzly bear'\ndf['category'][df['category']==2] = 'teddy bear'\n\ndf.head()","a20d9fd0":"fig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"xy\"}, {\"type\": \"pie\"}]])\n\n\nfig.add_trace(go.Bar(x =df['category'].value_counts().index,y=df['category'].value_counts().to_numpy(),marker_color=['navajowhite','palegreen'],showlegend=False),row=1,col=1)\n\nfig.add_trace(go.Pie(\n     values=df['category'].value_counts().to_numpy(),\n     labels=df['category'].value_counts().index,\n    marker=dict(colors=['navajowhite','palegreen'])),\n    row=1, col=2)","5874a2bc":"label = 'teddy bear' #label for teddy bear images\ndata = df[df['category'] == label]\nsns.set_style('dark')\n\n\npics = 4 #set the number of pics\nfig,ax = plt.subplots(int(pics\/\/2),2,figsize=(20,20))\nplt.suptitle('Images of teddy bear')\nax = ax.ravel()\nfor i in range((pics\/\/2)*2):\n    path = data.sample(1).loc[:,'filename'].to_numpy()[0]\n    img = image.load_img(path)\n    img = image.img_to_array(img)\/255\n    ax[i].imshow(img)\n    ax[i].axes.xaxis.set_visible(False)\n    ax[i].axes.yaxis.set_visible(False)","c6bca812":"label = 'black bear' #label for black bear images\ndata = df[df['category'] == label]\nsns.set_style('dark')\n\n\npics = 4 #set the number of pics\nfig,ax = plt.subplots(int(pics\/\/2),2,figsize=(20,20))\nplt.suptitle('Images of black bear')\nax = ax.ravel()\nfor i in range((pics\/\/2)*2):\n    path = data.sample(1).loc[:,'filename'].to_numpy()[0]\n    img = image.load_img(path)\n    img = image.img_to_array(img)\/255\n    ax[i].imshow(img)\n    ax[i].axes.xaxis.set_visible(False)\n    ax[i].axes.yaxis.set_visible(False)","9bca0bf0":"label = 'grizzly bear' #label for grizzly bear images\ndata = df[df['category'] == label]\nsns.set_style('dark')\n\n\npics = 4 #set the number of pics\nfig,ax = plt.subplots(int(pics\/\/2),2,figsize=(20,20))\nplt.suptitle('Images of grizzly bear')\nax = ax.ravel()\nfor i in range((pics\/\/2)*2):\n    path = data.sample(1).loc[:,'filename'].to_numpy()[0]\n    img = image.load_img(path)\n    img = image.img_to_array(img)\/255\n    ax[i].imshow(img)\n    ax[i].axes.xaxis.set_visible(False)\n    ax[i].axes.yaxis.set_visible(False)","fba88d56":"def shaper(row):\n    shape = image.load_img(row['filename']).size\n    row['height'] = shape[1]\n    row['width'] = shape[0]\n    return row\ndf = df.apply(shaper,axis=1)\ndf.head(5)","c0713a90":"sns.set_style('darkgrid')\nfig,(ax1,ax2,ax3) = plt.subplots(1,3,gridspec_kw={'width_ratios': [3,0.5,0.5]},figsize=(15,10))\nsns.kdeplot(data=df.drop(columns=['filename','category']),ax=ax1,legend=True)\nsns.boxplot(data=df,y='height',ax=ax2,color='skyblue')\nsns.boxplot(data=df,y='width',ax=ax3,color='orange')\nplt.suptitle('Distribution of image shapes')\nax3.set_ylim(0,7000)\nax2.set_ylim(0,7000)\nplt.tight_layout()","b9d700cb":"img_height, img_width = 64, 64\nbatch_size = 32\n\ntrain_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.2) # set validation split\n\ntrain_generator = train_datagen.flow_from_directory(\n    '..\/input\/bears-fastai-2021\/bears',\n    target_size=(img_height, img_width),\n    batch_size=batch_size,\n    class_mode='binary',\n    subset='training') # set as training data\n\nvalidation_generator = train_datagen.flow_from_directory(\n    '..\/input\/bears-fastai-2021\/bears', # same directory as training data\n    target_size=(img_height, img_width),\n    batch_size=batch_size,\n    class_mode='binary',\n    subset='validation') # set as validation data\n\n","cb28f709":"As you can see, the sizes of the images are different. Let's visualize the distribution of their shapes\n","95e430fe":"The height and width of images vary a lot. We will need to reshape them to a fixed shape before training.","c47f7463":"Let's begin with looking at the numerosity of each category","19062035":"#### Exploratory analysis\n**Loading data**","e082268a":"The dataset is perfectly balanced.\n\nLet's go on and take a look to some sample images.","3edca272":"# Image Classification of Bears using CNN\n\n#### Dataset\n\nThe dataset habe to be splitted into test_set and training_set. We have XXX images to train and test (XXXk black bear, XXXk grizzlies and XXXk teddy bears).\n\nIn this notebook we will follow the simplest pipeline for image classification using tensorflow and CNN.\n\nObjective: To create a classification model that can detect fire in images\n\nModels used: Sequential CNN from scratch\n\n**Import libraries**"}}