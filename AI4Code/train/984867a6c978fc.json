{"cell_type":{"61ec0aab":"code","1e5e1b8c":"code","e9fb23f1":"code","be376769":"code","11bd9796":"code","ce815139":"code","a457b361":"code","c20fbf0e":"code","3874aacb":"code","ab843432":"code","342a6527":"code","7aa28c6a":"code","563eceb0":"code","6c62291a":"code","96ecf12a":"code","7a9dcd9a":"code","c9dd8c98":"code","155d410e":"markdown"},"source":{"61ec0aab":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis, LinearDiscriminantAnalysis\nfrom sklearn.pipeline import Pipeline\nfrom tqdm import tqdm_notebook\nimport warnings\nimport multiprocessing\nfrom scipy.optimize import minimize  \nimport time\nwarnings.filterwarnings('ignore')","1e5e1b8c":"%%time\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ncols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]\nprint(train.shape, test.shape)","e9fb23f1":"reg_params = [0.01,0.23,0.01,0.08,0.27,0.03,0.16,0.33,0.28,0.02,0.01,0.07,0.01,0.31\n,0.28,0.26,0.02,0.1,0.11,0.17,0.42,0.34,0.11,0.22,0.61,0.12,0.14,0.19\n,0.02,0.01,0.02,0.06,0.36,0.09,0.11,0.01,0.03,0.11,0.01,0.11,0.23,0.02\n,0.17,0.14,0.12,0.06,0.08,0.01,0.26,0.01,0.02,0.04,0.33,0.03,0.07,0.16\n,0.01,0.02,0.28,0.17,0.04,0.19,0.05,0.11,0.03,0.22,0.17,0.16,0.06,0.14\n,0.01,0.07,0.05,0.06,0.2,0.05,0.02,0.09,0.05,0.01,0.08,0.1,0.01,0.22\n,0.19,0.13,0.02,0.03,0.12,0.07,0.15,0.09,0.02,0.16,0.01,0.39,0.12,0.14\n,0.09,0.41,0.32,0.13,0.15,0.01,0.41,0.12,0.01,0.13,0.17,0.03,0.08,0.12\n,0.21,0.01,0.16,0.28,0.01,0.02,0.11,0.21,0.27,0.03,0.17,0.05,0.02,0.4\n,0.28,0.01,0.03,0.28,0.02,0.12,0.17,0.1,0.01,0.1,0.01,0.24,0.11,0.18\n,0.17,0.08,0.1,0.04,0.13,0.04,0.12,0.25,0.13,0.19,0.05,0.03,0.1,0.01\n,0.05,0.01,0.01,0.01,0.18,0.24,0.13,0.01,0.15,0.01,0.09,0.04,0.06,0.01\n,0.06,0.11,0.21,0.08,0.21,0.04,0.04,0.04,0.2,0.01,0.19,0.14,0.11,0.03\n,0.23,0.01,0.04,0.13,0.46,0.04,0.07,0.08,0.07,0.01,0.11,0.2,0.07,0.23\n,0.2,0.14,0.07,0.06,0.16,0.02,0.33,0.13,0.11,0.06,0.22,0.22,0.19,0.03\n,0.1,0.37,0.22,0.01,0.01,0.22,0.07,0.01,0.23,0.35,0.03,0.29,0.01,0.04\n,0.01,0.04,0.07,0.23,0.2,0.09,0.01,0.23,0.3,0.06,0.09,0.04,0.46,0.25\n,0.14,0.01,0.04,0.03,0.01,0.04,0.11,0.08,0.01,0.09,0.05,0.1,0.05,0.28\n,0.02,0.08,0.01,0.06,0.38,0.04,0.01,0.15,0.21,0.01,0.01,0.45,0.18,0.27\n,0.24,0.01,0.04,0.14,0.13,0.18,0.22,0.32,0.13,0.07,0.26,0.17,0.12,0.14\n,0.09,0.13,0.08,0.09,0.07,0.01,0.02,0.04,0.01,0.07,0.32,0.01,0.36,0.09\n,0.11,0.06,0.46,0.11,0.16,0.21,0.01,0.1,0.01,0.1,0.23,0.05,0.33,0.01\n,0.24,0.04,0.01,0.04,0.1,0.01,0.36,0.44,0.03,0.08,0.21,0.01,0.18,0.01\n,0.17,0.19,0.03,0.01,0.18,0.15,0.48,0.06,0.17,0.18,0.37,0.01,0.31,0.01\n,0.16,0.18,0.11,0.08,0.08,0.07,0.28,0.02,0.09,0.08,0.01,0.09,0.01,0.07\n,0.01,0.24,0.09,0.02,0.37,0.16,0.04,0.14,0.22,0.06,0.29,0.16,0.06,0.06\n,0.04,0.05,0.25,0.07,0.01,0.01,0.21,0.02,0.04,0.3,0.39,0.02,0.23,0.22\n,0.05,0.01,0.06,0.05,0.02,0.01,0.02,0.12,0.11,0.05,0.01,0.2,0.01,0.08\n,0.08,0.04,0.33,0.06,0.16,0.35,0.18,0.13,0.01,0.01,0.12,0.18,0.01,0.01\n,0.17,0.08,0.48,0.18,0.01,0.02,0.35,0.15,0.34,0.01,0.14,0.01,0.32,0.34\n,0.15,0.1,0.18,0.18,0.11,0.24,0.01,0.13,0.03,0.36,0.01,0.08,0.01,0.13\n,0.07,0.08,0.24,0.01,0.05,0.05,0.1,0.07,0.21,0.01,0.08,0.11,0.09,0.04\n,0.01,0.11,0.02,0.09,0.16,0.51,0.17,0.09,0.03,0.12,0.06,0.18,0.01,0.01\n,0.02,0.02,0.01,0.27,0.28,0.09,0.02,0.13,0.03,0.16,0.15,0.04,0.17,0.19\n,0.26,0.01,0.04,0.1,0.04,0.01,0.07,0.05,0.02,0.59,0.01,0.2,0.12,0.1\n,0.07,0.18,0.08,0.01,0.34,0.15,0.28,0.12,0.05,0.01,0.11,0.08,0.12,0.04\n,0.05,0.33,0.01,0.01,0.09,0.07,0.19,0.09]","be376769":"def QDA_train(train_qda, test_qda):\n    oof = np.zeros(len(train_qda))\n    preds = np.zeros(len(test_qda))\n\n    for i in tqdm_notebook(range(512)):\n\n        train2 = train_qda[train_qda['wheezy-copper-turtle-magic']==i]\n        test2 = test_qda[test_qda['wheezy-copper-turtle-magic']==i]\n        idx1 = train2.index; idx2 = test2.index\n        train2.reset_index(drop=True,inplace=True)\n\n        data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n        pipe = Pipeline([('vt', VarianceThreshold(threshold=2)), ('scaler', StandardScaler())])\n        data2 = pipe.fit_transform(data[cols])\n        train3 = data2[:train2.shape[0]]; test3 = data2[train2.shape[0]:]\n\n        skf = StratifiedKFold(n_splits=31, random_state=42)\n        for train_index, test_index in skf.split(train2, train2['target']):\n\n            clf = QuadraticDiscriminantAnalysis(reg_params[i])\n            clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n            oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n            preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n\n    auc = roc_auc_score(train_qda['target'], oof)\n    print(f'AUC: {auc:.5}')\n    return oof, preds","11bd9796":"oof_qda, preds_qda = QDA_train(train, test)","ce815139":"LOW = 0.45\nHIGH = 1 - LOW","a457b361":"def get_denoise_data(train_off, oof, low, high):\n    print(len(train_off[(oof > low) & (oof < high)]))\n    train_off_filter = train_off[(oof <= low) | (oof >= high)]\n    train_off_filter.reset_index(drop=True, inplace=True)\n    return train_off_filter","c20fbf0e":"train_outlier = train.copy()\noof_outlier = oof_qda.copy()","3874aacb":"NUM_DENOISE = 2\nfor i in range(NUM_DENOISE):\n    train_outlier = get_denoise_data(train_outlier, oof_outlier, LOW, HIGH)\n    oof_outlier, preds_outlier = QDA_train(train_outlier, test)","ab843432":"def Pseudo_train(preds, oof, train_pse, test_pse):\n    for itr in range(2):\n        test_pse['target'] = preds\n        test_pse.loc[test_pse['target'] > 0.955, 'target'] = 1 # initial 94\n        test_pse.loc[test_pse['target'] < 0.045, 'target'] = 0 # initial 06\n        usefull_test = test_pse[(test_pse['target'] == 1) | (test_pse['target'] == 0)]\n        new_train = pd.concat([train_pse, usefull_test]).reset_index(drop=True)\n        print(usefull_test.shape[0], \"Test Records added for iteration : \", itr)\n        new_train.loc[oof > 0.995, 'target'] = 1 # initial 98\n        new_train.loc[oof < 0.005, 'target'] = 0 # initial 02\n        oof = np.zeros(len(train_pse))\n        preds = np.zeros(len(test_pse))\n        for i in tqdm_notebook(range(512)):\n\n            train2 = new_train[new_train['wheezy-copper-turtle-magic']==i]\n            test2 = test[test['wheezy-copper-turtle-magic']==i]\n            idx1 = train_pse[train_pse['wheezy-copper-turtle-magic']==i].index\n            idx2 = test2.index\n            train2.reset_index(drop=True,inplace=True)\n\n            data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n            pipe = Pipeline([('vt', VarianceThreshold(threshold=2)), ('scaler', StandardScaler())])\n            data2 = pipe.fit_transform(data[cols])\n            train3 = data2[:train2.shape[0]]\n            test3 = data2[train2.shape[0]:]\n\n            skf = StratifiedKFold(n_splits=31, random_state=time.time)\n            for train_index, test_index in skf.split(train2, train2['target']):\n                oof_test_index = [t for t in test_index if t < len(idx1)]\n\n                clf = QuadraticDiscriminantAnalysis(reg_params[i])\n                clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n                if len(oof_test_index) > 0:\n                    oof[idx1[oof_test_index]] = clf.predict_proba(train3[oof_test_index,:])[:,1]\n                preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n        auc = roc_auc_score(train_pse['target'], oof)\n        print(f'AUC: {auc:.5}')\n        \n        return oof, preds","342a6527":"oof_pse, preds_pse = Pseudo_train(preds_outlier, oof_outlier, train_outlier, test)","7aa28c6a":"from sklearn.covariance import GraphicalLasso\n\ndef get_mean_cov(x,y):\n    model = GraphicalLasso()\n    ones = (y==1).astype(bool)\n    x2 = x[ones]\n    model.fit(x2)\n    p1 = model.precision_\n    m1 = model.location_\n    \n    onesb = (y==0).astype(bool)\n    x2b = x[onesb]\n    model.fit(x2b)\n    p2 = model.precision_\n    m2 = model.location_\n    \n    ms = np.stack([m1,m2])\n    ps = np.stack([p1,p2])\n    return ms,ps","563eceb0":"from sklearn.mixture import GaussianMixture\n\ndef GMM_train(train_GMM, test_GMM):\n    # INITIALIZE VARIABLES\n    cols = [c for c in train_GMM.columns if c not in ['id', 'target']]\n    cols.remove('wheezy-copper-turtle-magic')\n    oof_GMM = np.zeros(len(train_GMM))\n    preds_GMM = np.zeros(len(test_GMM))\n\n    # BUILD 512 SEPARATE MODELS\n    for i in tqdm_notebook(range(512)):\n        # ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I\n        train2 = train_GMM[train_GMM['wheezy-copper-turtle-magic']==i]\n        test2 = test_GMM[test_GMM['wheezy-copper-turtle-magic']==i]\n        idx1 = train2.index; idx2 = test2.index\n        train2.reset_index(drop=True,inplace=True)\n\n        # FEATURE SELECTION (USE APPROX 40 OF 255 FEATURES)\n        sel = VarianceThreshold(threshold=1.5).fit(train2[cols])\n        train3 = sel.transform(train2[cols])\n        test3 = sel.transform(test2[cols])\n\n        # STRATIFIED K-FOLD\n        skf = StratifiedKFold(n_splits=11, random_state=42, shuffle=True)\n        for train_index, test_index in skf.split(train3, train2['target']):\n\n            # MODEL AND PREDICT WITH QDA\n            ms, ps = get_mean_cov(train3[train_index,:],train2.loc[train_index]['target'].values)\n\n            gm = GaussianMixture(n_components=2, init_params='random', covariance_type='full', tol=0.001,reg_covar=0.001, max_iter=100, n_init=1,means_init=ms, precisions_init=ps)\n            gm.fit(np.concatenate([train3,test3],axis = 0))\n            oof_GMM[idx1[test_index]] = gm.predict_proba(train3[test_index,:])[:,0]\n            preds_GMM[idx2] += gm.predict_proba(test3)[:,0] \/ skf.n_splits\n\n\n    # PRINT CV AUC\n    auc = roc_auc_score(train_GMM['target'],oof_GMM)\n    print('QDA scores CV =',round(auc,5))\n    return oof_GMM, preds_GMM","6c62291a":"oof_GMM, preds_GMM = GMM_train(train_outlier, test)","96ecf12a":"preds = preds_pse * 0.8 + preds_GMM * 0.2","7a9dcd9a":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = preds_pse","c9dd8c98":"sub.to_csv('submission.csv',index=False)","155d410e":"This script used many ideas from the public kernel and dicussion.\n\n- QDA\n- Pseudo label\n- Delete outliers\n- GMM\n- Stacking with QDA and GMM"}}