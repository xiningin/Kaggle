{"cell_type":{"c5ff3681":"code","9476d63c":"code","f8fe72d6":"code","052b20a9":"code","5282ac6d":"code","4d1b3c6d":"code","bc8b2c4e":"code","ae94e1dd":"code","87cf0991":"code","ca8a0979":"code","75505dbf":"code","65f0a571":"code","616656f3":"code","b21df116":"code","f520cc79":"code","0553cd66":"code","e92866ad":"code","ffe5781b":"code","e4d493b0":"code","edad6058":"code","fdb15bb5":"code","a4bcc637":"code","1cbdbb26":"code","44b53f23":"code","de25ba52":"code","4d7d4a95":"code","2998c5ad":"code","b43da050":"code","123ed1e5":"code","332f5d95":"code","a76e1686":"code","ee679792":"code","fb4c1b4c":"code","b53ba449":"code","fca765ff":"code","759f1b06":"code","bc48a919":"code","068a7e3f":"code","3be64235":"code","90b3cb3a":"code","0bbff723":"code","4e81cb60":"code","b1f1bb06":"code","e35f147b":"code","b9d2bd92":"code","e9408251":"code","a32c3f0d":"code","d48bdf99":"code","6275b52d":"code","c8a43c4f":"code","23b31a97":"code","9f29b3e5":"code","7babc026":"code","badd8921":"code","837d857d":"code","a53b70c2":"code","22cc2c0f":"code","565e3792":"code","87faa7dc":"code","51eb88d4":"code","5779869c":"code","8ea6962d":"code","02fd1575":"code","335e51dc":"code","5ac1bab3":"code","6765a534":"markdown","aec947fb":"markdown","8877774c":"markdown","d33d8b1d":"markdown","50192be8":"markdown","ee9cdc65":"markdown","dc2308f1":"markdown","f7f4c906":"markdown","1021784c":"markdown","bc18df3c":"markdown","f0a368a7":"markdown","f2664f12":"markdown","8529ad9a":"markdown","2a2fde95":"markdown","f9fc3845":"markdown","8470745e":"markdown","6a96bd32":"markdown"},"source":{"c5ff3681":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9476d63c":"train_df=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ngender_sub=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf=[train_df,test_df]","f8fe72d6":"train_df","052b20a9":"train_df.info()","5282ac6d":"test_df.info()","4d1b3c6d":"train_df.head()","bc8b2c4e":"train_df.describe()","ae94e1dd":"train_df[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived')","87cf0991":"train_df[['Age','Survived']].groupby(['Age'],as_index=False).mean().sort_values(by='Survived')","ca8a0979":"train_df[['Pclass','Survived']].groupby(['Pclass']).mean().sort_values(by='Survived')","75505dbf":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"]).mean().sort_values(by='Survived')","65f0a571":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.FacetGrid(train_df,col='Survived',row='Sex').map(plt.hist,'Age',bins=20)","616656f3":"sns.catplot(x='Pclass',y='Survived',kind=\"violin\",data=train_df)","b21df116":"sns.catplot(x='Pclass',y='Age',kind='violin',data=train_df)","f520cc79":"graf=sns.FacetGrid(train_df,col='Survived',row='Pclass')\ngraf.map(plt.hist,'Age',bins=20)\ngraf.add_legend()","0553cd66":"sns.FacetGrid(train_df, row='Embarked', height=2.2, aspect=1.6).map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')","e92866ad":"train_df.Age.count()","ffe5781b":"train_df.loc[train_df['Age']==80]","e4d493b0":"sns.FacetGrid(train_df, row='Embarked', col='Survived', height=2.2, aspect=1.6).map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)","edad6058":"print(\"Before pre-processing train data shape:{}\".format(train_df.shape))\nprint('*'*50)\ntrain_df,test_df=train_df.drop(['Ticket','Cabin'],axis=1),test_df.drop(['Ticket','Cabin'],axis=1)\ndf=[train_df,test_df]\nprint('After pre-processing train data shape:{}'.format(train_df.shape))","fdb15bb5":"for i in df:\n    i['Title']=i.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\npd.crosstab(train_df['Title'],train_df['Sex'])","a4bcc637":"for i in df:\n    i['Title']=i['Title'].replace(['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major','Rev','Sir'],'Uncommon')\n    i['Title']=i['Title'].replace(['Mlle','Ms'],'Miss')\n    i['Title']=i['Title'].replace('Mme','Mrs')","1cbdbb26":"train_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","44b53f23":"train_df.Title.value_counts().plot(kind='pie')","de25ba52":"title_compress={\"Mr\":1,\n               \"Miss\":2,\n               \"Mrs\":3,\n               \"Master\":4,\n               \"Uncommon\":5}","4d7d4a95":"for i in df:\n    i.Title=i.Title.map(title_compress)\n    i.Title=i.Title.fillna(0)\ntrain_df.Title","2998c5ad":"train_df","b43da050":"sex_compress={\"female\":1,\"male\":0}","123ed1e5":"for i in df:\n    i.Sex=i.Sex.map(sex_compress).astype(int)","332f5d95":"train_df.head()","a76e1686":"guess_ages=np.zeros((2,3))","ee679792":"#Sex: 0(Male)\/1(Female)\n#Pclass: 1,2,3\nfor dataset in df:\n    for i in range(0,2): #sex\n        for j in range(0,3): #pclass\n            filled_df=dataset[(dataset['Sex'] == i)&(dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            age_guess=filled_df.median()\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n    for i in range(0,2):\n        for j in range(0,3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)    ","fb4c1b4c":"train_df.tail()","b53ba449":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","fca765ff":"def age_categ(train_df):\n    train_df.loc[train_df.Age<=16,'Age']=0\n    train_df.loc[(train_df.Age>16) & (train_df.Age<=32),'Age']=1\n    train_df.loc[(train_df.Age>32) & (train_df.Age<=48),'Age']=2\n    train_df.loc[(train_df.Age>48) & (train_df.Age<=64),'Age']=3\n    train_df.loc[(train_df.Age>64) & (train_df.Age<=80),'Age']=4","759f1b06":"age_categ(train_df)\nage_categ(test_df)","bc48a919":"train_df","068a7e3f":"train_df['Embarked'] = train_df['Embarked'].fillna(train_df.Embarked.dropna().mode()[0])\ntest_df['Embarked'] = test_df['Embarked'].fillna(test_df.Embarked.dropna().mode()[0])\n#train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","3be64235":"train_df.Embarked.isnull().sum()\ntest_df.Embarked.isnull().sum()","90b3cb3a":"train_df.Embarked.loc[train_df.Embarked=='S']=0\ntrain_df.Embarked.loc[train_df.Embarked=='C']=1\ntrain_df.Embarked.loc[train_df.Embarked=='Q']=2\n#embarked_compress={'S': 0, 'C': 1, 'Q': 2}\n#train_df['Embarked'].map(embarked_compress).astype(int)","0bbff723":"test_df.Embarked.loc[test_df.Embarked=='S']=0\ntest_df.Embarked.loc[test_df.Embarked=='C']=1\ntest_df.Embarked.loc[test_df.Embarked=='Q']=2\n\n","4e81cb60":"train_df","b1f1bb06":"train_df","e35f147b":"train_df['FareBand']=pd.qcut(train_df['Fare'],4)\ntrain_df.groupby(['FareBand'])['Survived'].mean().to_frame()","b9d2bd92":"train_df","e9408251":"def fare_categ(train_df):\n    train_df.loc[train_df.Fare<=7.91,'Fare']=0\n    train_df.loc[(train_df.Fare>7.91)&(train_df.Fare<=14.454),'Fare']=1\n    train_df.loc[(train_df.Fare>14.454)&(train_df.Fare<= 31.0),'Fare']=2    \n    train_df.loc[(train_df.Fare>  31.0)&(train_df.Fare<=512.329),'Fare']=3\n    return train_df","a32c3f0d":"fare_categ(train_df)","d48bdf99":"fare_categ(test_df)","6275b52d":"train_df=train_df.drop(['Name','AgeBand','FareBand'],axis=1)\ntrain_df","c8a43c4f":"Y_train=train_df['Survived']\nX_train=train_df.drop(['Survived'],axis=1)\nX_test  = test_df.drop([\"PassengerId\",\"Name\"], axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape\n","23b31a97":"X_train","9f29b3e5":"X_test","7babc026":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n","badd8921":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","837d857d":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","a53b70c2":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","22cc2c0f":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","565e3792":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","87faa7dc":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","51eb88d4":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","5779869c":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","8ea6962d":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","02fd1575":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","335e51dc":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","5ac1bab3":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })","6765a534":"# Associating Numerical and Ordinal Properties\u00b6","aec947fb":"# Association Categorical and Numerical Properties","8877774c":"* Pclass 3: Had the most passengers.\n* Pclass 2-3: Infant passengers mostly survived.\n* Pclass 1: Most passengers survived.","d33d8b1d":"Logistic Regression","50192be8":"Complete nan numerical data","ee9cdc65":"**Observation and Planning**\n1. Create a new feature called Family Size or sth like that based on Parch and SibSp to get total number of family members on board\n2. Create a new feature called Title instead of Name \n3. Create a new feature called AgeGroups based on Age for age groups. (Continuous numerical property into an ordered ordered property)\n4. Maybe create a feature for fare groups","dc2308f1":"* Result: Model must contain 'Pclass' feature","f7f4c906":"Which features are null in dataset?\n\n*In train dataset:*\n- Age\n- Cabin\n- Embarked\n\n*In test dataset:*\n- Age\n- Cabin","1021784c":"Ticket=Numerical+Alfanumerical Data","bc18df3c":"# Associating Numerical Properties","f0a368a7":"* 0-5 Age: Survive rate is high\n* 25-30 Age: Survive rate is low\n* 80 Age: Survived=1\n","f2664f12":"%38 survival rate","8529ad9a":"**Categorical Variables:** Name, Sex, Ticket, Cabin, Embarked\n- *Ordinal: PClass*\n\n**Numerical Variables:** PassengerId, Survived\n- *Discrete:* SibSp, ParchAge, \n- *Continuos:* Fare,Age","2a2fde95":"* Association with Embarked (Categorical non-numeric), Sex (Categorical non-numeric), Fare (Continuous Numeric) ve Survived (Categorical Numeric)\n* Passengers who paid higher wages survived more. (price grouping can be made)\n* The embarked correlates with survival rates.\n","f9fc3845":"Observations:\n\n* Female's survived rate is higher than male's\n* Exception Embark='C' for male's survived rate -> Maybe a correlation between Pclass and Embarked vs PClass and Survived(not necessarily a direct correlation between Embarked and Survived)\n* Males had better survival rate at Pclass = 3 compared to Pclass = 2 for the C and Q ports\n\nDecisions:\n* Model must contain 'Sex' and 'Embarked' feature\n","8470745e":"# Associating Categorical Properties","6a96bd32":"# Modelling"}}