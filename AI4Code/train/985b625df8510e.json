{"cell_type":{"b11da804":"code","27d2644e":"code","856854d6":"code","485d1440":"code","368daca8":"code","14927636":"code","b3745b8f":"code","4f1281e7":"code","6cbac71a":"code","7d8787b1":"code","c6b24583":"code","0fa63c53":"code","c9d665ed":"code","be34f9af":"code","0e0fd03e":"code","bf6e5a3c":"code","ac6eabab":"code","1002e6f1":"code","958b4876":"code","dcb40e8f":"markdown","6369a669":"markdown","589115f1":"markdown","c87bc7e4":"markdown","a264785e":"markdown"},"source":{"b11da804":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27d2644e":"data_train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\ndata_test = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')\ndata_submit = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv')\ndata_train.head()","856854d6":"data_train.isnull().any()","485d1440":"graph_train=[]\nfor i in range(100):\n    w=\"f\"+str(i)\n    graph_train.append(w)\nprint(graph_train)","368daca8":"for i in range(2):\n    x=int(i)\n    plt.hist(graph_train[x])\n    plt.title(i)\n    plt.show()","14927636":"data_train.shape","b3745b8f":"data_train.shape","4f1281e7":"from sklearn.model_selection import train_test_split","6cbac71a":"X = data_train.drop(['id','loss'],axis=1)\ny = data_train['loss']\nX.head()","7d8787b1":"from sklearn.preprocessing import StandardScaler\nstandard = StandardScaler()\nX_train = standard.fit_transform(X)\nX_test =  standard.transform(data_test.drop('id',axis=1))","c6b24583":"from sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor","0fa63c53":"lr = LinearRegression()\nxgb = XGBRegressor(n_estimators = 100,random_state = 0)\ndt = DecisionTreeRegressor()\ngb = GradientBoostingRegressor(random_state = 0)\ncat = CatBoostRegressor()\nlg = LGBMRegressor()","c9d665ed":"import time\ndef model_result(model):\n    start = time.time()\n    model.fit(X_train,y)\n    mean_result = cross_val_score(model,X_train,y,cv=5,scoring='neg_mean_squared_error')\n    stop = time.time()\n    print(f\"Time spend : {round((stop-start),2)}s\")\n    return -1*mean_result.mean()","be34f9af":"print(\"Linear Regression :  {}\".format(np.sqrt(model_result(lr))))","0e0fd03e":"print(\"Decision Tree : {}\".format(np.sqrt(model_result(dt))))","bf6e5a3c":"print(\"XGBoost  : {}\".format(np.sqrt(model_result(xgb))))","ac6eabab":"print(\"CatBoost  : {}\".format(np.sqrt(model_result(cat))))","1002e6f1":"print(\"Light : {}\".format(np.sqrt(model_result(lg))))","958b4876":"prediction=cat.predict(X_test)\n\noutput = pd.DataFrame({'id': data_test.id,\n                       'loss': prediction})\noutput.to_csv('submission.csv', index=False)","dcb40e8f":"x_train, x_test, y_train, y_test = train_test_split(data_train.drop('loss',axis=1), \n                                                    data_train['loss'], test_size=0.2, \n                                                    random_state=0)","6369a669":"___\n## Training the Data","589115f1":"# Tabular Playground Series - Aug 2021","c87bc7e4":"___\n## Preparing the Submission and Export\n","a264785e":"___\n# Split the Data"}}