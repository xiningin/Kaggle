{"cell_type":{"4a3af952":"code","68e9ef65":"code","fc4d1778":"code","5546b065":"code","cc2b46a8":"code","9b4fe5ac":"code","098653c0":"code","909f442f":"code","1013c3bb":"code","60aecf60":"code","01891269":"code","1671365a":"code","a0996094":"code","ebcc123d":"code","917fd0c9":"code","6b7c28b5":"code","c596b3a8":"code","6fdda82b":"code","ddcd05de":"code","f4b960ea":"code","9c8afd02":"code","9ba57a14":"code","828cc280":"code","2e5b333c":"code","0c29755c":"code","bf74e01b":"code","5e1dfcc2":"code","57bfece0":"code","17d94106":"code","bfc74733":"code","284335a4":"code","65c9377b":"code","b546480b":"code","4dbb49bb":"code","e45ca6b5":"code","5386cf75":"code","7e82a9d5":"code","2dbcef19":"code","80a8fd6d":"code","e0750135":"code","5befa7e0":"code","fdd56947":"code","321a3276":"code","1bb249f6":"code","4bf3a92f":"markdown","9a22e010":"markdown","191f8643":"markdown","3e75398c":"markdown","821bda59":"markdown","f5aad252":"markdown","8bfe8507":"markdown","8ebee24d":"markdown","b80aa853":"markdown","06fc408f":"markdown","1f18fb8a":"markdown","329f2d89":"markdown","f55c4e5a":"markdown","8168a0ba":"markdown","63f359b7":"markdown","409babff":"markdown","94437466":"markdown"},"source":{"4a3af952":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\npd.set_option('display.max_colwidth', -1)\n\nimport warnings\nwarnings.filterwarnings('ignore')","68e9ef65":"! pip install bert-for-tf2","fc4d1778":"! du -sh \/kaggle\/input\/quora-question-pairs\/*","5546b065":"! unzip \/kaggle\/input\/quora-question-pairs\/train.csv.zip","cc2b46a8":"# Size of train.csv\n\n! du -sh .\/*","9b4fe5ac":"import tensorflow as tf\nimport tensorflow_hub as hub\nimport bert","098653c0":"train_df = pd.read_csv(\".\/train.csv\")","909f442f":"train_df.head()","1013c3bb":"train_df.info()","60aecf60":"train_df.groupby(\"is_duplicate\").count()['id'].plot.bar()\nplt.show()","01891269":"train_df.isnull().sum()","1671365a":"train_df[train_df['question1'].isnull()].head()","a0996094":"train_df[train_df['question2'].isnull()].head()","ebcc123d":"# Removing rows with Null questions\n\ntrain_df = train_df[~train_df['question1'].isnull()]\ntrain_df = train_df[~train_df['question2'].isnull()]","917fd0c9":"train_df.count()","6b7c28b5":"LABSE_model_URL = \"https:\/\/tfhub.dev\/google\/LaBSE\/1\"\nMAX_SEQ_LENGTH = 64","c596b3a8":"## Define Model containing LABSE as Keras layers\n\ndef getModel(model_url, max_seq_length):\n    # Load the saved LaBSE model as Keras layer. \n    # Set trainable to True to enable weight update for fine-tuning the model for down stream task\n    labse_layer = hub.KerasLayer(handle=model_url, trainable=True, name='labse')\n\n    # Define Inputs\n    input_word_ids = tf.keras.Input(shape=(max_seq_length, ), dtype=tf.int32, name='input_word_ids')\n    input_mask = tf.keras.Input(shape=(max_seq_length, ), dtype=tf.int32, name='input_mask')\n    input_segment_ids = tf.keras.Input(shape=(max_seq_length, ), dtype=tf.int32, name='input_segment_ids')\n\n    # LABSE layer \n    pooled_output, _ = labse_layer([input_word_ids, input_mask ,input_segment_ids])\n\n    # The output is L2 normalized shape [batch_size, 768] representing a complete sentence embedding\n    pooled_output = tf.keras.layers.Lambda(lambda x: tf.nn.l2_normalize(x, axis=1), name='l2_normalized_pooling')(pooled_output)\n\n    # Define Model\n    return tf.keras.Model(inputs=[input_word_ids, input_mask ,input_segment_ids], outputs=pooled_output), labse_layer","6fdda82b":"## Input preparation\nlabse_model, labse_layer = getModel(LABSE_model_URL, MAX_SEQ_LENGTH)\n\n# labse_layer = hub.KerasLayer(handle=LABSE_model_URL, trainable=True, name='labse')\n\nvocab_file = labse_layer.resolved_object.vocab_file.asset_path.numpy()  # Get vocab file path as numpy array \ndo_lower_case = labse_layer.resolved_object.do_lower_case.numpy()   # Get Boolean Variable as numpy array\ntokenizer = bert.bert_tokenization.FullTokenizer(vocab_file, do_lower_case)\n\nprint(vocab_file, do_lower_case)","ddcd05de":"labse_model.summary()","f4b960ea":"def create_input(input_strings, tokenizer, max_seq_length):\n    input_ids_all, input_mask_all, segment_ids_all = [], [], []\n    \n    for input_string in tqdm(input_strings):\n        # Tokenize input\n        input_tokens = [\"[CLS]\"] + tokenizer.tokenize(input_string) + [\"[SEP]\"]\n        input_ids = tokenizer.convert_tokens_to_ids(input_tokens)\n        sequence_length = min(len(input_ids), max_seq_length)\n\n        # Padding or truncation.\n        if len(input_ids) >= max_seq_length:\n          input_ids = input_ids[:max_seq_length]\n        else:\n          input_ids = input_ids + [0] * (max_seq_length - len(input_ids))\n\n        input_mask = [1] * sequence_length + [0] * (max_seq_length - sequence_length)\n\n        input_ids_all.append(input_ids)\n        input_mask_all.append(input_mask)\n        segment_ids_all.append([0] * max_seq_length)\n\n    return np.array(input_ids_all), np.array(input_mask_all), np.array(segment_ids_all)","9c8afd02":"train_df.columns","9ba57a14":"def encode(input_text):\n    input_ids, input_mask, segment_ids = create_input(input_text, tokenizer, MAX_SEQ_LENGTH)\n    return labse_model.predict([input_ids, input_mask, segment_ids])","828cc280":"# sample_df = train_df\n# question1_array = sample_df['question1'].values\n# question2_array = sample_df['question2'].values\n\n# %time question1_embeddings = encode(question1_array)","2e5b333c":"# %time question2_embeddings = encode(question2_array)","0c29755c":"# question1_embeddings.shape, question2_embeddings.shape     # shape - ((404287, 768), (404287, 768))","bf74e01b":"# product = question1_embeddings * question2_embeddings\n# print(product.shape)                                # shape (404287, 768)\n\n# cosine_similarity = product.sum(axis=1)\n# cosine_similarity.shape                             # (404287,) ","5e1dfcc2":"# cos_similarity = prod.sum(axis=1)\n# cos_similarity.shape","57bfece0":"# sample_df['similarity'] = cos_similarity","17d94106":"!ls \/kaggle\/input\/train-df-with-similarity-score\/train_with_similarity_scores.csv","bfc74733":"sample_df = pd.read_csv(\"\/kaggle\/input\/train-df-with-similarity-score\/train_with_similarity_scores.csv\")","284335a4":"sns.distplot(sample_df[sample_df['is_duplicate'] == 1.0]['similarity'][0:] , label = \"1\", color = 'red')\nsns.distplot(sample_df[sample_df['is_duplicate'] == 0.0]['similarity'][0:] , label = \"0\", color = 'green')\nplt.xlabel(\"Question pair cosine similarity \")\nplt.show()","65c9377b":"sns.violinplot(x = 'is_duplicate', y = 'similarity', data = sample_df[0:])\nplt.ylabel(\"Question pair cosine similarity\")\nplt.show()","b546480b":"sample_df[sample_df['is_duplicate'] == 1].describe()['similarity']","4dbb49bb":"duplicate_low_simlarity_prop = sample_df[(sample_df['is_duplicate'] == 1) & (sample_df['similarity'] < 0.5)]['similarity'].count() \/ sample_df[sample_df['is_duplicate'] == 1]['similarity'].count()\n\nprint(\" {} percent of duplicate question pairs have similarity score less than 0.5 \".format(duplicate_low_simlarity_prop * 100))","e45ca6b5":"sample_df[(sample_df['is_duplicate'] == 1) & (sample_df['similarity'] < 0.5)].describe()['similarity']","5386cf75":"# Going through top question pairs with lowest similarity scores\n\nsample_df[(sample_df['is_duplicate'] == 1)][['question1', 'question2','similarity']].sort_values(by='similarity').head(10)","7e82a9d5":"# Going through top question pairs with highest similarity scores.\n\nsample_df[(sample_df['is_duplicate'] == 1)][['question1', 'question2','similarity']].sort_values(by='similarity', ascending=False).head(10)","2dbcef19":"# Going through top question pairs with highest similarity scores.\n\nsample_df[(sample_df['is_duplicate'] == 1) & (sample_df['similarity'] < 0.8)][['question1', 'question2','similarity']].sort_values(by='similarity', ascending=False).head(10)","80a8fd6d":"sample_df[sample_df['is_duplicate'] == 0].describe()['similarity']","e0750135":"non_duplicate_high_simlarity_prop = sample_df[(sample_df['is_duplicate'] == 0) & (sample_df['similarity'] > 0.5)]['similarity'].count() \/ sample_df[sample_df['is_duplicate'] == 0]['similarity'].count()\n\nprint(\" {} percent of Non-duplicate question pairs have similarity score more than 0.5 \".format(non_duplicate_high_simlarity_prop * 100))","5befa7e0":"sample_df[(sample_df['is_duplicate'] == 0) & (sample_df['similarity'] < 0.5)].describe()['similarity']","fdd56947":"sample_df[(sample_df['is_duplicate'] == 0) & (sample_df['similarity'] > 0.5)].describe()['similarity']","321a3276":"sample_df[(sample_df['is_duplicate'] == 0) & (sample_df['similarity'] > 0.5)].sort_values(by='similarity', ascending=False).head(23)","1bb249f6":"sample_df_v2 = sample_df[(sample_df['is_duplicate'] == 0) & (sample_df['similarity'] > 0.5)]\nsample_df_v2[(sample_df_v2['similarity'] <= 0.9 )].sort_values(by='similarity', ascending=False).head(10)","4bf3a92f":"Importing the results file which has the original train.csv added with the cosine similarity between the question pair.","9a22e010":"While exploring, I came across the following top instances where the question pairs are duplicate but are labelled as otherwise.","191f8643":"#### This notebook explores the duplicate and non-duplicate set of samples in the training set by using similarity scores of their sentence embeddings and also highlights incorrectly labelled cases.","3e75398c":"### Null values","821bda59":"True non-duplicate cases","f5aad252":"#### References\n* https:\/\/github.com\/Taaniya\/natural-language-understanding\/blob\/master\/Explore_Language_Agnostic_BERT_Sentence_Embedding.ipynb\n* https:\/\/tfhub.dev\/google\/LaBSE\/1","8bfe8507":"#### Plotting the distribution of similarity score for  duplicate and non-duplicate question pairs","8ebee24d":"Obtaining embeddings for each question in the pair\n\nWe can run the following code to obtain embeddings. It takes ~30 minutes to run it for 400K records in a single Tesla T4 GPU (16GB).\n\nI have already run it saved the results. Let's go the the next steps by importing the results file.\n","b80aa853":"Question pairs with similarity scores are identical in the training dataset. We'll explore non-identical.","06fc408f":"Non-duplicate question pairs with similarity score > 0.5","1f18fb8a":"### Non-duplicate question pairs","329f2d89":"### Distribution of classes - is duplicate \/ not-duplicate","f55c4e5a":"LABSE model is available from TFhub and is loaded from there to wrap it as a callable object and to be used as a Keras Layer. Its vocab_file is stored as atf.saved_model.Asset and the do_lower_case flag is stored as a tf.Variable object on the SavedModel.","8168a0ba":"From the similarity score obtained using sentence embeddings of pretrained LABSE model, the median of distribution of similarity score for both duplicate and non-duplicate questions is higher than 0.5. \n\nLet's look into more detail for each case next.\n\n### Duplicate question pairs","63f359b7":"#### Duplicate Question pairs with similarity score < 0.5","409babff":"### Exploring similarity scores between question pairs using Language-Agnostic-Bert-Sentence embedding model\n\n[LABSE](https:\/\/ai.googleblog.com\/2020\/08\/language-agnostic-bert-sentence.html) - is a multilingual model to preduce sentence embeddings based on Bert and combines methods for obtaining sentence embeddings with MLM and Translation Language Model pretrained encoders. \n\nIt is trained on Monolingual data and bilingual translation pairs.","94437466":"Computing consine similarity"}}