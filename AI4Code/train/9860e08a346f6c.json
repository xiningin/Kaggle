{"cell_type":{"38591dbd":"code","e6da2a0a":"code","6ea328c2":"code","8ea9923a":"code","1e65985d":"code","4e382cea":"code","6530f62b":"code","817819ce":"code","06ca56c9":"code","d424514d":"code","14cb0796":"code","cdefd72e":"code","6185b28f":"code","0cb7feb4":"code","68a3a173":"code","2ea7c45b":"code","8b93d104":"code","bb7ed35d":"code","6559a9c5":"code","4acdcd9e":"code","1bff1987":"code","753cb2d8":"code","4b35670e":"markdown","4b529065":"markdown","43ad54d6":"markdown","0678fc29":"markdown","3f9242f2":"markdown","b39db24f":"markdown","e9ee5578":"markdown","e929572f":"markdown","72f828a0":"markdown","abed1a8c":"markdown","8fe422ba":"markdown","5ae0efd0":"markdown","efd22fdd":"markdown","a02c3f93":"markdown","791787a9":"markdown","a2b49c42":"markdown","5972c60f":"markdown","9b0fff9e":"markdown","4b629f7b":"markdown","a40837b7":"markdown","64f4d4c9":"markdown","3064025a":"markdown","e237d18d":"markdown","d9c19daf":"markdown","1d185a03":"markdown","7586a5dd":"markdown","7a4c5630":"markdown","1985355e":"markdown","af9e037a":"markdown","234e29c6":"markdown","d031ef1c":"markdown","7aeacf2e":"markdown"},"source":{"38591dbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e6da2a0a":"y = \"Barcelona\"\nz = \"Abu Dhabi\"\nx = 30\nttt = 200\n","6ea328c2":"print(\"Welcome to Python world!\")","8ea9923a":"from datetime import date\n\ncompany = \"Nordea\"\ntraining_date = date.today()\nprint(f\"Training is given at {company} as of {training_date}\")","1e65985d":"full_name =  \"Leopold, Jamison Bjerre\"\n#split\n#first_name = full_name.split(\",\")[1]\n#surname = full_name.split(\",\")[0]\n#print(first_name, surname)\n\n#join\nall_words = full_name.split(\" \")\nprint(all_words)\njoined_text = \"|++++\".join(all_words)\nprint(joined_text)\n","4e382cea":"cost_of_trip = 50\nhotel_cost = \"52.21\"\nhotel_name = \"Hotel 53\"\nis_available = True\n\ntotal_cost_of_trip = cost_of_trip + float(hotel_cost)\nprint(total_cost_of_trip)\nprint(type(total_cost_of_trip))","6530f62b":"hotel_name1 = \"hotel1\"\nhotel_name6 = \"hotel6\"\nhotel_name2 = \"hotel2\"\n\nhotel_names = [\"hotel1\",\"hotel6\", \"hotel2\", 4, 43.0, True]\n#print(list(hotel_name1))\n#print(hotel_names)\n\nplanets = ['Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus']\nprint(f\"Before: {planets}\")\n#planets.append('Neptune')\n#print(f\"After: {planets}\")\n\n#planet_index = planets.index(\"Mars\")\n#print(planet_index)\n\n#planets.pop(planet_index)\n#print(planets)\n\n#planets.remove(\"Venus\")\n#print(planets)\n\n#print(planets[0:4])\nplanets[0] = \"Earth\"\nprint(planets)\n","817819ce":"cars = (\"BMW\", \"Mercedes-Benz\", \"Ford\", \"BMW\")\nprint(len(cars))\nprint(cars.count(\"BMW\"))\n\ncars_list = list(cars)\nprint(cars_list)","06ca56c9":"numbers = {1, 2, 3, 4, 5, 5, 5, 5}\n\n#print(f\"Before: {numbers}\")\n\n\nclient_ids = {\"id1\", \"id2\", \"id3\", \"id3\", \"id3\", \"id3\"}\n\nprint(client_ids)\n\n\n\n\n","d424514d":"john_friends = {\"Bryson\", \"Taylor\", \"Alexis\", \"Jesica\"}\nella_friends = {\"Madison\", \"Jesica\", \"Alexis\", \"Harper\", \"Evelyn\", \"Jameson\"}\n\n#all_friends = john_friends.union(ella_friends)\n#print(all_friends)\n#print(len(all_friends))\n\n#common_friends = john_friends.intersection(ella_friends)\n#print(f\"Common friends: {common_friends}\")\n\nonly_ella_friends = ella_friends.difference(john_friends)\nprint(only_ella_friends)","14cb0796":"shopping_items = {\"apple\": 3, \n                  \"onion\": 10, \n                  \"olive oil\": 1, \n                  \"milka bar\": 2}\n\n\n","cdefd72e":"store_items = {\"fruits\": {\n                 \"Apple\": {\n                    \"available amount\": 10,\n                    \"country\": \"France\",\n                    \"expired\": False\n                 },\n                \"Coconut\":{ \n                    \"available amount\": 1, \n                    \"country\": \"Ecuator\", \n                    \"expired\": True\n                }\n            },\n            \"drinks\": {\n                \"milk\":{\n                    \"brands\": [\"brand1\", \"brand2\"],\n                    \"fresh\": True\n                },\n                \"non-alcohilic drinks\": {\n                    \"coke\":{\n                        \"brands\": [\"coca-cola\", \"pepsi\", \"fanta\"],\n                        \"fresh\": False\n                    }\n                }\n            }\n        }\n\nprint(\"coca-cola\" in store_items[\"drinks\"][\"non-alcohilic drinks\"][\"coke\"][\"brands\"])","6185b28f":"# >, < , <=, >=, ==, !=\nnumber = 23\nif 0 < number < 30: \n    print('The number must be positive and less than 30.') \nelif 30 <= number:\n    print('It must be a big number') \nelse:\n    print('I suppose the number is negative') \nprint('Done')","0cb7feb4":"#age = int(input(\"Your age:\"))\nplanets = ['Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus']\n\nuser_choice = input(\"Planet name: \")\n\nif user_choice in planets:\n    print(f\"{user_choice} in our list!\")\nelse:\n    print(f\"{user_choice} does not exist!\")","68a3a173":"# For Loop: iterates over a sequence of objects i.e. go through each item in a sequence\u200b\n#planets = ['Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus']\n\n#for planet in planets:\n#    print(planet)\n\nshopping_items = {\"apple\": 3, \n                  \"onion\": 10, \n                  \"olive oil\": 1, \n                  \"milka bar\": 2}\n\nitem_check = \"onion\"\n\nfor item, amount in shopping_items.items():\n    if item == item_check:\n        break\n    print(item)\n        \n\n#welcome_text = \"hello\"\n#for number in range(23):\n#    print(welcome_text)\n\n","2ea7c45b":"# While Loop: repeatedly execute a block of statements as long as a condition is true\u200b\n\n\ncorrect_answer = 10 \nwhile True: \n    guessed_number = int(input(\"Your guess:\"))\n    \n    if guessed_number == correct_answer: \n        print('Congratulations, you guessed it.') \n    else:\n        print('Try again')\n   # Break and continue statements","8b93d104":"#squares = []\n#for number in range(10):\n#    if number > 5:\n#      squares.append(number**2)\n\nsquares = [number**2 for number in range(10) if number > 5]\n\nprint(squares)\n    \n","bb7ed35d":"old_price = {'milk': 1.02, 'coffee': 2.5, 'bread': 2.5}\ndollar_to_pound = 2\n\nnew_item = {}\nfor (item, value) in old_price.items():\n    new_item[item] = value*dollar_to_pound\n\n#new_price = {item: value*dollar_to_pound for (item, value) in old_price.items()}\nprint(new_price)\n","6559a9c5":"#print(\"Welcome to the traing\")\n#print (\"Today we will learn bugs!:)\")\n\nnumbers = [1, 2, 3]\n#print(numbers)\n#print(numbers[10])\n\nimport fakemodulenameibrahim\n#print(pandas.__version__)\n\n#try:   \n#except:\n#else:   \n#finally:","4acdcd9e":"try:\n    number = int(input('Enter numbers between 1-10 --> '))\n\n    if number > 10 or number < 1:\n        raise Exception(\"Please provide number between 1-10\")\n    result = 10\/number\n    print(result)\nexcept Exception as e:\n    print(f\"Something happened - {e}\")\n","1bff1987":"# print hello on the screen 10 times\n# print welcome on the screen 4 times\n\n# Bad implementation\n#text1 = \"hello\"\n#for i in range(10):\n#    print(f\"{i+1} - {text1}\")\n    \n\n#text2 = \"welcome\"\n#for i in range(4):\n#    print(f\"{i+1} - {text2}\")\n\n# good implementation\n\ndef print_something(text, number_of_times, company_name=\"Nordea\"):\n    \"\"\" Prints the text provided on the screen based on the provided repeat number (DOC string)\n        :param text: str, message to be printed\n        :param number_of_times: int, repetation number\n        :param company_name: str, (optional) the name of the company\n        return None\n    \"\"\"\n    #if not isinstance(number_of_times, int):\n    #    raise Exception(\"provide int\")\n    \n    for i in range(number_of_times):\n        print(f\"{i+1} - {text} - {company_name}\")\n    \n    \n\nprint_something(\"hello\", 10)\nprint_something(\"welcome\", 4)\n\ndef calculate_worker_cost(eaiting_cost, insurance_cost):\n    \"\"\" Doc string\"\"\"\n    maintanance_cost = 10\n    total_cost = eaiting_cost + insurance_cost + maintanance_cost\n    \n    return total_cost\n    \nnumber_of_workers = 20\nworker_cost = calculate_worker_cost(10, 20)\nprint(f\"Worker cost: {worker_cost}\")\ncompany_cost = worker_cost * number_of_workers\nprint(company_cost)","753cb2d8":"def total(a=5, *numbers, **phonebook):\n    print('a', a) \n    for single_item in numbers: \n        print('single_item', single_item)\n\n    for first_part, second_part in phonebook.items():\n        print(first_part,second_part)\n\ntotal(10, 1, 2, Jack=1123, John=2231, Inge=1560)","4b35670e":"# Comprehensions\n* Specific to Python\u200b\n* It is optional, you can achive the same result without comprehension","4b529065":"## Aggrement\n* Open Camera \n* 5-10 min. break in each hour\n* All information slides, video, use cases, etc. is available in [FRC Python Acamemy](https:\/\/nordea.sharepoint.com\/sites\/Python_TALM_Academy_201906)\n* Las Vegas Rule: What happens in Vegas stays in Vegas\n* Sessions will be recorded\n* We will be using exercises on https:\/\/www.kaggle.com\/learn\/python\n* Adding your use case project\n","43ad54d6":"## 1) List \u200b\n\n* similar to arrays. \u200b\n* can contain any type of variable\u200b\n* [] or list()\u200b\n\nExample\u200b\n\n* planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\u200b\n\n\nMethods\u200b\n\n* .append(new_element)\u200b\n* .pop(index)\u200b\n* .remove(element)\u200b\n* .index(element)\u200b\n\nOperations\u200b\n\n* Indexing\u200b\n>* planets[0]\u200b\n>* planets[-1]\u200b\n\n* Slicing\u200b\n>* planets[0:3]\u200b\n* \n* Changing lists\u200b\n>* planets[3] = 'Malacandra'","0678fc29":"### *args & **kargs","3f9242f2":"## Variables & Naming Convention","b39db24f":"# Python Fundamentals\n### -- Find people who share your values, and you'll conquer the world together.(John Ratzenberger)","e9ee5578":"## Printing & Formatting\n\n","e929572f":"## Build in Data Structures\n![](https:\/\/nordea.sharepoint.com\/sites\/Python_TALM_Academy_201906\/Shared%20Documents\/General\/Capture4.PNG)","72f828a0":"## 3) Set\n* Unordered collection of items\u200b\n* Unique values\u200b\n* {} or set()\u200b\n\nExample\u200b\n\nA = {1, 2, 3, 4, 5}\u200b\n\nB = {4, 5, 6, 7, 8} \u200b\n\nMethods\u200b\n\n* .add(element)\u200b\n* .remove(element)\u200b\n* .pop(index)\u200b\n* .clear()\u200b\n\nOperations \u200b\n\n* A.union(B)\u200b\n* A.intersection(B)\u200b\n* A.difference(B)","abed1a8c":"# Loops","8fe422ba":"## Exception Types\n* SyntaxError \n* IndexError\n* ModuleNotFoundError\n* KeyError\n* ImportError\n* Stop Iteration\n* TypeError\n* ValueError\n* NameError\n* ZeroDivisionError\n* ...","5ae0efd0":"### Docstring\ndef print_max(x, y):\u200b\n\"\"\" Prints the maximum of two numbers. The two values must be integers. \u200b\n     :param x: int \u200b\n     :param y: int \u200b\n     :return: None \"\"\" \u200b\n     if x > y: print(x, 'is maximum') else: print(y, 'is maximum') help(print_max)\n","efd22fdd":"## 4) Dictionary\n* Ordered collection of Key\/value pairs items\u200b\n* {} or dict()\u200b\n* Very important data structure used in many places (JSON, API etc.)\u200b\n\nExample\u200b\n\nshopping_items = {\"apple\": 3, \"onion\": 10, \"olive oil\": 1, \"milka bar\": 2}\u200b\n\nstore_items: {\"fruits\": {\"fruit1\": {\"name\": \"apple\", 'available amount\": 10, \"country\": \"France\", \"expired\": False}, {\"name\": \"coconut\", 'available amount\": 12, \"country\": \"Ecuator\", \"expired\": True}, \"drinks\": {\"milk\":{\"brands\": [\"brand1\", \"brand2\"], \"fresh\": True}, \"alcohilic drinks\": {\"beer\": {\"brand1\": {\u2026.\u200b\n\n\nMethods\u200b\n\n* .items()\u200b\n* .keys()\u200b\n* .values()\u200b\n* .pop()\u200b\n* .clear()\u200b\n* .get()\u200b\n\nOperations\u200b\n\n* Accessing\u200b\n>* shopping_items[\"apple\"]\u200b\n \n* Updating\/Adding\u200b\n>* shopping_items[\"apple\"] = 4","a02c3f93":"## 2) Tuple\n\n\n* Similar to list\u200b\n* cannot be modified (they are immutable).\u200b\n* () or tuple()\u200b\n\n\nExample\u200b\n\ncars = (\"BMW\", \"Mercedes-Benz\", \"Ford\")\u200b\n\n\u200b\n\nMethods\u200b\n\n* .count()\u200b\n* .index()\u200b\n\nOperations\u200b\n\n* Indexing\u200b \n>* cars[0]\u200b\n>* cars[-1]\u200b\n\n* Slicing\u200b\n>* cars[0:3]\u200b\n \n* Changing tuple (Error)\u200b \n>* cars[3] = 'Malacandra'\n\n","791787a9":"## Dictionary Comprehensions\n* old_price = {'milk': 1.02, 'coffee': 2.5, 'bread': 2.5}\u200b\n* dollar_to_pound = 0.76 \n* new_price = {item: value*dollar_to_pound for (item, value) in old_price.items()}\u200b\n","a2b49c42":"## Modules and Packages\n\nModule: \n* Single file\n* Every python .py code is module\n\nPackage: Multiple File\n* Just folder of modules\u200b\n* __init__.py indicates that this folder is special because it contains Python modules","5972c60f":"Camel Case\u200b\n* islandName \u200b\n* departureTime\u200b\n\nSnake Case(Pythonic way)\u200b\n* island_name \u200b\n* departure_time\u200b\n\n\nChoose short and meaningful variable names\u200b\n* Bad: \u200b\n> * x,\u200b\n> * y,\u200b\n> * z,\u200b\n> * list_of_all_participants_to_training\u200b\n\n* Good:\u200b\n\n> * supplier_name, \u200b\n> * participants, \u200b\n> * participant_list","9b0fff9e":"Data Structures are used to store a collection of related data\u200b\n\n* Int  \u200b\n* float\u200b\n* str\u200b\n* bool\u200b\n\nType \u200b\n\n* print(type(1))\u200b\n* print(type(1.0)) \u200b\n* print(type(False))\u200b\n\nCasting\u200b\n\n* \"Non-compatible\" types\n* \"2\" + 2 \u2013 Error\u200b\n* \"2\" + \"2\" # '22' int(\"2\" + \"2\") # 22 int(\"2\") + int(\"2\") # 4 2 + 2 # 4","4b629f7b":"## Roadmap\n![](https:\/\/nordea.sharepoint.com\/_api\/v2.1\/sites\/nordea.sharepoint.com,345def22-b13c-4dde-8c02-5119ed8e4414,b8a17383-4c25-43ed-b10c-60054621532a\/lists\/474ce0db-7fd8-4771-b0d9-044711bcb5a1\/items\/c1ed4492-ccec-44dc-971f-f16d6d508e5a\/driveItem\/thumbnails\/0\/c1600x99999\/content?preferNoRedirect=true&prefer=extendCacheMaxAge&clientType=modernWebPart)","a40837b7":"## PyPi and pip\n\nPyPi: [Python Index Package](https:\/\/pypi.org\/)\n\nPip: Package manager\n* pip install package_name\n* *nordea specific* -> pip install pakcage_name -i https:\/\/artifactory.itcm.oneadr.net\/api\/pypi\/pypi-remote\/simple\u200b\n\nImporting modules\n* from package name.module_name import class_name\n* import module_name\n* import module_name as name\n* from module_name import \n\nStandard Modules\n* sys\n* json\n* datetime\n","64f4d4c9":"# Exceptions\nExceptions occur when exceptional situations occur in your program. For example, what if you are going to read a file and the file does not exist? Or what if you accidentally deleted it when the program was running? Such situations are handled using exceptions. ","3064025a":"### Definition\n\n* Function Definition\u200b\n>* def say_hello():\u200b\n     print('Hello World!') \u200b\n\n* Function Parameters\u200b\n>* def print_max(a, b): \u200b\n      if a > b: print(a, 'is maximum') elif a == b: print(a, 'is equal to', b) else: print(b, 'is maximum') print_max(3, 4) # directly pass literal values\u200b\n\n* Default Argument Values\u200b\n>* def say(message, times=1):\u200b\n      print(message * times)\n      \n* Return\n\n>* def maximum(x, y):\u200b\n      if x >= y:\u200b\n          return x \u200b\n      else:\u200b\n        return y \u200b\nprint(maximum(2, 3))\u200b\n","e237d18d":"## Available tools for self-service data\/information management in FRC\n![](https:\/\/nordea.sharepoint.com\/sites\/Python_TALM_Academy_201906\/Shared%20Documents\/General\/Capture2.PNG)","d9c19daf":"## Our Trainers\n![1](https:\/\/nordea.sharepoint.com\/_api\/v2.1\/sites\/nordea.sharepoint.com,345def22-b13c-4dde-8c02-5119ed8e4414,b8a17383-4c25-43ed-b10c-60054621532a\/lists\/474ce0db-7fd8-4771-b0d9-044711bcb5a1\/items\/82d96f62-6249-4ee0-9e42-f5af1de6d209\/driveItem\/thumbnails\/0\/c1600x99999\/content?preferNoRedirect=true&prefer=extendCacheMaxAge&clientType=modernWebPart)","1d185a03":"## IDE: Integrated Development Environment\n![](https:\/\/nordea.sharepoint.com\/sites\/Python_TALM_Academy_201906\/Shared%20Documents\/General\/Capture3.PNG)","7586a5dd":"# Primitive Built-in Data Structures","7a4c5630":"# Agenda\n* Modules and Packages\u200b\n* PyPi, pip\n* Variables & Naming Convention\u200b\n* Printing and Formatting\u200b\n* Built in data structures \u200b\n* If statement\u200b\n* For loop, while loop\u200b\n* List and dict Comprehensions\u200b\n* Functions\u200b\n* Exceptions\u200b","1985355e":"# Non-Primitive Data Structures","af9e037a":"# Functions\nreusable pieces of programs. ","234e29c6":"## Learning path depending on use-case\n![](https:\/\/nordea.sharepoint.com\/sites\/Python_TALM_Academy_201906\/Shared%20Documents\/General\/Capture.PNG)","d031ef1c":"## List Comprehensions\n* squares = [] for n in range(10): squares.append(n**2) squares\u200b\n* squares = [n**2 for n in range(10)]\u200b\n* planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'] [planet.upper() + '!' for planet in planets if len(planet) < 6]\u200b\n","7aeacf2e":"# Conditional Statement(If)\n"}}