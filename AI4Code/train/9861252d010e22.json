{"cell_type":{"05459974":"code","eb5467b1":"code","d3e7b027":"code","7886bd69":"code","71787b45":"code","860adfb7":"markdown","66447f88":"markdown","42a4a959":"markdown","75772690":"markdown","91c37a45":"markdown","7ea6dc17":"markdown","20c0c3fe":"markdown"},"source":{"05459974":"import numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport mpl_toolkits.mplot3d.axes3d as p3\nimport matplotlib.animation as animation\n\n","eb5467b1":"def animate_scatters(iteration, data, scatters):\n    for i in range(data[0].shape[0]):\n        scatters[i]._offsets3d = (data[iteration][i,0:1], data[iteration][i,1:2], data[iteration][i,2:])\n    return scatters\n\ndef generate_animation(data, save=False):\n\n    # Attaching 3D axis to the figure\n    fig = plt.figure(facecolor='black')\n    ax = p3.Axes3D(fig)\n    ax.set_facecolor('black')\n    \n    # remove fill\n    # Get rid of the panes\n    ax.w_xaxis.set_pane_color((0.0, 0.0, 0.0, 0.0))\n    ax.w_yaxis.set_pane_color((0.0, 0.0, 0.0, 0.0))\n    ax.w_zaxis.set_pane_color((0.0, 0.0, 0.0, 0.0))\n\n    # Get rid of the spines\n    ax.w_xaxis.line.set_color((1.0, 1.0, 1.0, 0.0))\n    ax.w_yaxis.line.set_color((1.0, 1.0, 1.0, 0.0))\n    ax.w_zaxis.line.set_color((1.0, 1.0, 1.0, 0.0))\n\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_zticks([])\n    \n    # Set x,y,z limit for Scale\n    ax.set_xlim(-1.3, 1.3)\n    ax.set_ylim(-1.3, 1.3)\n    ax.set_zlim(0, 1)\n    \n    # Initialize scatters\n    scatters = [ \n        ax.scatter(\n            data[0][i,0:1], data[0][i,1:2], data[0][i,2:], \n            marker='*', \n            color='forestgreen' if data[0][i,2:] != 1 else 'yellow'\n        ) \n        for i in range(data[0].shape[0]) ]\n\n    # Number of iterations\n    iterations = len(data)\n    ax.set_title('3D Christmas Tree', color='white')\n\n    # Provide starting angle for the view.\n    ax.view_init(25, 10)\n    \n    # remove grid\n    ax.grid(False)\n    \n    ani = animation.FuncAnimation(fig, animate_scatters, \n                                  iterations, fargs=(data, scatters),\n                                  interval=50, \n                                  blit=False, repeat=True)\n\n    if save:\n        ani.save('myAnimation1.gif', writer='imagemagick', fps=30)\n\n    plt.show()","d3e7b027":"def generate_data(step):\n    H =20\n    data = [np.array([0, 0, 1]).reshape(1, 3)] # this is for top yellow star\n    for h in range(1, H+1):\n        num_points = h*3\n        x = np.sin(np.linspace(0+step*0.1, 2*math.pi+step*0.1, num=num_points+1))[:-1]*h\/H*math.cos(abs(1-step*0.04))\n        y = np.cos(np.linspace(0+step*0.1, 2*math.pi+step*0.1, num=num_points+1))[:-1]*h\/H*math.cos(abs(1-step*0.04))\n        z = np.full(num_points, (H-h)\/H)\n        data.append(np.vstack([x, y, z]).T)\n    \n    return np.concatenate(data)","7886bd69":"datas = []\niters = 50\nfor i in range(iters):\n    datas.append(generate_data(i))\n\ndata = np.stack(datas)\ndata.shape","71787b45":"generate_animation(data, save=True)","860adfb7":"## Import Library","66447f88":"## If you Enjoy this Viz, Please Upvoted :)","42a4a959":"## Generate\n\n- 50 layers","75772690":"## Merry Christmas!!\n\nI know that the most representative example of a developer is `star-series`.\n\nThis time, we will use matplotlib to draw a Christmas tree with 3D Animation.\n\nMerry Christmas\n\n![](.\/myAnimation1.gif)","91c37a45":"## Dataset\n\n- `step*0.1` for speed\n- `math.cos(abs(1-step*0.04))` for size\n- `h\/H` for normalization\n","7ea6dc17":"![](.\/myAnimation1.gif)","20c0c3fe":"## Save"}}