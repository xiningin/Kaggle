{"cell_type":{"bd8af620":"code","0d42c78a":"code","da37d4b7":"code","b3abd73c":"code","2944d296":"code","2aa359f4":"code","d07bb7c4":"code","022238b2":"code","b4acde92":"code","b29bb9d0":"code","e10649c1":"code","a926759f":"code","b5613826":"code","a5205ac9":"markdown"},"source":{"bd8af620":"# import the neccessery libraries \nimport numpy as np\nimport os\nimport PIL\n\nimport PIL.Image\nimport tensorflow as tf\nimport tensorflow_datasets as tfds\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.layers.experimental.preprocessing import RandomFlip, RandomRotation\nfrom tensorflow.keras import regularizers\nimport matplotlib.pyplot as plt","0d42c78a":"# load the dataset and divided it into train and validation dataset \nBATCH_SIZE = 32\nIMG_SIZE = (160,160 )\ndirectory = \"..\/input\/peach-dataset\/Peach Dataset\"\ntrain_dataset = image_dataset_from_directory(directory,\n                                             shuffle=True,\n                                             label_mode='categorical',\n                                             batch_size=BATCH_SIZE,\n                                             image_size=IMG_SIZE,\n                                             validation_split=0.2,\n                                             subset='training',\n                                             seed=42)\nvalidation_dataset = image_dataset_from_directory(directory,\n                                             shuffle=True,\n                                             label_mode='categorical',\n                                             batch_size=BATCH_SIZE,\n                                             image_size=IMG_SIZE,\n                                             validation_split=0.2,\n                                             subset='validation',\n                                             seed=42)\n\n","da37d4b7":"# augment the dataset  \ndef data_augmenter() : \n    \n    data_augmentation = tf.keras.Sequential() \n    data_augmentation.add(RandomFlip('horizontal'))\n    data_augmentation.add(RandomRotation(0.2))\n    \n    return data_augmentation","b3abd73c":"# dispalay some samples from the augmented data\ndata_augmentation = data_augmenter()\n\nfor image, _ in train_dataset.take(1):\n    plt.figure(figsize=(10, 10))\n    first_image = image[0]\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        augmented_image = data_augmentation(tf.expand_dims(first_image, 0))\n        plt.imshow(augmented_image[0] \/ 255)\n        plt.axis('off')","2944d296":"# we scale the inputs at the same scale of the mobilenet inputs \npreprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input","2aa359f4":"# call the pretrained model based on imagenet dataset \nIMG_SIZE = IMG_SIZE + (3,)\nprint(IMG_SIZE)\nbase_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SIZE,\n                                               include_top=True,\n                                               weights='imagenet')","d07bb7c4":"# as we see the top layers of the mobile net ,but later we should exclude it\n# and change it by new top layers for the peach classificiation\nnb_layers = len(base_model.layers)\nprint(base_model.layers[nb_layers-2].name)\nprint(base_model.layers[nb_layers-1].name)","022238b2":"#let's define our peach model \ndef peach_model(image_shape = IMG_SIZE , data_augmentation = data_augmenter()) :\n    \n    #1 define the input shape \n    input_shape = image_shape\n    \n    #2 create the base model based on image net dataset , with exculding the top layers (transfer learning)\n    \n    base_model = tf.keras.applications.MobileNetV2(input_shape=input_shape,\n                                                   include_top=False, # exlude the top layers \n                                                   weights='imagenet') # pre_trained wheights on imagenet dataset \n    \n   #3 the parameters should be trainable\n   #to take advantage of the deep net provided by our base model \n   \n    base_model.trainable = True\n\n    \n    #4 define the input for the peach model (the same size as the imagenet)\n    inputs = tf.keras.Input(shape = input_shape)\n    \n    #5 apply data augmentation to the input \n    \n    x=data_augmentation(inputs) \n    \n    #6 preprocess the inputs , to be the same scale as the mobilenet\n    x = preprocess_input(x) \n    \n    # 7 apply the base model to our new inputs \n    \n    x = base_model(x,training=True)\n    \n    # 8 then we add the new top  layers \n    \n    x = tf.keras.layers.Dense(units=500 , activation=\"relu\",kernel_regularizer=regularizers.l2(0.01))(x)\n    x = tf.keras.layers.Dense(units=500 , activation=\"relu\",kernel_regularizer=regularizers.l2(0.01))(x)\n    x = tf.keras.layers.Dense(units=500 , activation=\"relu\",kernel_regularizer=regularizers.l2(0.01))(x)    \n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n    x = tf.keras.layers.BatchNormalization(axis=-1,momentum=0.99, epsilon=0.001)(x) \n    x = tf.keras.layers.Dropout(.45)(x) \n    \n    # 9 add the prediction layer with 6 units (6 classes) for the prediction \n    outputs = tf.keras.layers.Dense(units=6 , activation=\"softmax\")(x)   \n    \n    model = tf.keras.Model(inputs,outputs)\n    \n    return model \n    \n    \n   \n    ","b4acde92":"model2 = peach_model(IMG_SIZE,data_augmentation)\nmodel2.summary()","b29bb9d0":"base_learning_rate = 0.001\nmodel2.compile(optimizer=tf.keras.optimizers.Adam(lr=base_learning_rate),\n              loss=tf.keras.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])","e10649c1":"initial_epochs = 30\nhistory = model2.fit(train_dataset, validation_data=validation_dataset, epochs=initial_epochs)","a926759f":"print(\"the model evaluation : \")\nprint(\"##########################################\")\nmodel2.evaluate(validation_dataset)\nprint(\"##########################################\")","b5613826":"# let me see your feedback, and I hope that this notebook can be useful","a5205ac9":"***define the peach model *****"}}