{"cell_type":{"c5a2c650":"code","48034531":"code","938acb76":"code","0258f510":"code","40d2d226":"code","a565b175":"code","24dd4115":"code","477b392b":"code","470846c5":"code","0b72f0a7":"code","25aaef2e":"code","53add337":"code","d29866dc":"code","fd868c82":"code","c8fd6b01":"code","eac1a8a8":"code","36393686":"code","447099ab":"code","476e1faa":"code","2132a277":"code","00bda322":"code","08233e17":"code","89df7d5a":"code","23eaf9c9":"code","d135ca76":"markdown","bde0e60c":"markdown","3aab0d0a":"markdown","3c3131fd":"markdown","a30bd3a8":"markdown","1213f99d":"markdown","8411c5b4":"markdown","bbc8c3d5":"markdown","d7e4a56c":"markdown","b5284aa0":"markdown","14aef284":"markdown"},"source":{"c5a2c650":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48034531":"!pip install scikit-learn-extra","938acb76":"from sklearn.cluster import DBSCAN\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn_extra.cluster import KMedoids\ncolors = ['royalblue','red','deeppink', 'maroon', 'mediumorchid', 'tan', 'forestgreen', 'olive', 'goldenrod', 'lightcyan', 'navy']\nvectorizer = np.vectorize(lambda x: colors[x % len(colors)])","0258f510":"X = np.array([[1, 2], [4, 2], [3, 3],[8, 7], [9, 9],[10,10], [25, 80]])\nplt.scatter(X[:,0],X[:,1])","40d2d226":"def clust_plot(noise):\n  plt.figure()\n  plt.subplot(131)\n  plt.gca().set_title('DBSCAN')\n  plt.scatter(X[:,0], X[:,1],c=vectorizer(y+noise))\n  plt.subplot(132)\n  plt.gca().set_title('k-Means')\n  plt.scatter(X[:,0], X[:,1],c=vectorizer(y_kmeans))\n  plt.subplot(133)\n  plt.gca().set_title('k-Medoid')\n  plt.scatter(X[:,0], X[:,1],c=vectorizer(y_kmed))","a565b175":"clustering = DBSCAN(eps=3, min_samples=2).fit(X)\ny=clustering.labels_\nkmeans = KMeans(n_clusters = 2, init = 'random', max_iter = 300, n_init = 10, random_state = 0)\ny_kmeans = kmeans.fit_predict(X)\nkMedoids = KMedoids(n_clusters = 2, random_state = 0)\nkMedoids.fit(X)\ny_kmed = kMedoids.fit_predict(X)","24dd4115":"y","477b392b":"clust_plot(1)","470846c5":"plt.scatter(X[:,0], X[:,1],c=vectorizer(y_kmeans))\n#plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'C3')","0b72f0a7":"from sklearn.datasets.samples_generator import make_blobs\nX, y = make_blobs(n_samples=300, centers=3, cluster_std=.75, random_state=0)\nplt.scatter(X[:,0], X[:,1])","25aaef2e":"from sklearn.neighbors import NearestNeighbors\nneigh = NearestNeighbors(n_neighbors=10)\nnbrs = neigh.fit(X)\ndistances, indices = nbrs.kneighbors(X)","53add337":"distances","d29866dc":"distances = np.sort(distances, axis=0)\ndist4 = distances[:,3]\ndist10 = distances[:,9]\nplt.plot(dist4)\nplt.plot(dist10)","fd868c82":"clustering = DBSCAN(eps=0.4, min_samples=6).fit(X)\ny=clustering.labels_","c8fd6b01":"y","eac1a8a8":"plt.scatter(X[:,0], X[:,1], c=vectorizer(y))","36393686":"from sklearn.datasets import make_moons\nX, y = make_moons(n_samples=1500, noise=0.05)\nplt.scatter(X[:,0], X[:,1],c=vectorizer(y))","447099ab":"kmeans = KMeans(n_clusters = 2, init = 'random', max_iter = 300, n_init = 10, random_state = 0)\ny_kmeans = kmeans.fit_predict(X)\nclustering = DBSCAN(eps=0.1, min_samples=4).fit(X)\ny=clustering.labels_\nkMedoids.fit(X)\ny_kmed = kMedoids.fit_predict(X)","476e1faa":"y","2132a277":"clust_plot(0)","00bda322":"from sklearn.datasets import make_circles\nX, y = make_circles(n_samples=200, noise=0.01)\nplt.scatter(X[:,0], X[:,1],c=vectorizer(y))","08233e17":"kmeans = KMeans(n_clusters = 2, init = 'random', max_iter = 300, n_init = 10, random_state = 0)\ny_kmeans = kmeans.fit_predict(X)\nclustering = DBSCAN(eps=0.15, min_samples=4).fit(X)\ny=clustering.labels_\nkMedoids.fit(X)\ny_kmed = kMedoids.fit_predict(X)","89df7d5a":"y","23eaf9c9":"clust_plot(0)","d135ca76":"# Question 1:What are some of the parameters of DBSCAN? <a id=\"1\"><\/a>","bde0e60c":"![image.png](attachment:image.png)","3aab0d0a":"* [<font size=4>Question 1:What are some of the parameters of DBSCAN?<\/font>](#1)\n* [<font size=4>Question 2: DBSCAN vs K-Means on noise points ?<\/font>](#2)   \n* [<font size=4>Question 3: Using K Distance Plot for finding EPS  ?<\/font>](#3)   \n* [<font size=4>Question 4: Make Moons and DBSCAN?<\/font>](#4)  \n* [<font size=4>Question 5: Make Circle and DBSCAN<\/font>](#5)  ","3c3131fd":"## Parameters\n* eps float, default=0.5 The maximum distance between two samples for one to be considered as in the neighborhood of the other.\n* min_samples int, default=5 The number of samples (or total weight) in a neighborhood for a point to be considered as a core point.\n* metric string, or callable, default=\u2019euclidean\u2019 The metric to use when calculating distance between instances in a feature array. \n*  If metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square.\n## Arguments\n* labels_array, shape = [n_samples]","a30bd3a8":"## Fitting DBSCAN, k-Means and K-Medoid","1213f99d":"## Scatterplot of three clustering algorithms","8411c5b4":"# Question 5: Make Circle and DBSCAN ?<a id=5><\/a>","bbc8c3d5":"![image.png](attachment:image.png)","d7e4a56c":"# Question 2: DBSCAN, K-Means and Noise ?<a id=2><\/a>","b5284aa0":"# Question 3: Using K-Distance to find Epsilon (EPS) ?<a id=3><\/a>","14aef284":"# Question 4: Make Moon and DBSCAN ?<a id=4><\/a>"}}