{"cell_type":{"0ac84921":"code","0f3b9e14":"code","eef30f67":"code","61ad3edc":"code","93903f84":"code","f0e37e55":"code","1e5b666d":"code","aa102fad":"code","8e46a1f1":"code","113592c0":"code","a8b67880":"markdown","9b48ac56":"markdown","f5e3e992":"markdown","334c9de8":"markdown","b8a04761":"markdown","8d42e026":"markdown","1caa9931":"markdown"},"source":{"0ac84921":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f3b9e14":"df = pd.read_excel(\"\/kaggle\/input\/used_car_data.xlsx\")","eef30f67":"df","61ad3edc":"df['Location'].groupby(df['Location']).count().sort_values(ascending=False)","93903f84":"import statistics\n\nkm_driven = []\ncategory = []\n\nfor km in df['Kilometers_Driven']:\n    km_driven.append(km)\n  \nmed = statistics.median(km_driven)\n\nfor km in km_driven:\n    if km >= med:\n        category.append(\"Tinggi\")\n    else:\n        category.append(\"Rendah\")\n        \ndf['Category'] = category","f0e37e55":"df","1e5b666d":"df['Owner_Type'].groupby(df['Owner_Type']).count().sort_values(ascending=False)","aa102fad":"df[(df['Owner_Type'] == 'Third') | (df['Owner_Type'] == 'Fourth & Above')]['Name'].count()","8e46a1f1":"import matplotlib.pyplot as plt\ntahun_raw = [tahun for tahun in df['Year']]\nharga_raw = [harga for harga in df['Price']]\ntahun = []\nharga_rata = []\n\nfor year in df['Year']:\n    if year not in tahun:\n        tahun.append(year)\n        tahun.sort()\n\nfor thn in tahun:\n    harga = 0\n    jumlah = 0\n    for i in range(len(tahun_raw)):\n        if tahun_raw[i] == thn:\n            harga+=harga_raw[i]\n            jumlah+=1\n    harga_rata.append(harga\/jumlah)\n    harga = 0\n\ndf_graph = pd.DataFrame({\n   'harga': harga_rata,\n   }, index=tahun)\nlines = df_graph.plot.line()\n\nfig, ax = plt.subplots(figsize=(16,8))\nax.scatter(tahun, harga_rata)\nax.set_xlabel('Year')\nax.set_ylabel('Average Price')\nplt.plot(tahun, harga_rata)\nplt.show()\n","113592c0":"milik_raw = [milik for milik in df['Owner_Type']]\nharga_raw = [harga for harga in df['Price']]\nmilik = []\nharga_rata = []\n\nfor own in df['Owner_Type']:\n    if own not in milik:\n        milik.append(own)\n\nfor own in milik:\n    harga = 0\n    jumlah = 0\n    for i in range(len(milik_raw)):\n        if milik_raw[i] == own:\n            harga+=harga_raw[i]\n            jumlah+=1\n    harga_rata.append(harga\/jumlah)\n    harga = 0\n\ndf_graph = pd.DataFrame({\n   'harga': harga_rata,\n   }, index=milik)\nlines = df_graph.plot.line()","a8b67880":"> Dapat dilihat bahwa Kota yang memiliki mobil bekas paling banyak adalah Kota *Mumbai* dengan jumlah 790 mobil.","9b48ac56":"**NOMOR 2**","f5e3e992":"> Menurut saya batas kilometer total jarak pemakaian bisa dikategorikan sebagai rendah atau tinggi dapat diambil dari median datanya, karena median tidak dipengaruhi outliernya. Dalam dataset ini nilai median Kilometers_Driven nya adalah 53000. Sehingga nilai Km di atas atau sama dengan 53000 dikategorikan \"Tinggi\", sedangkan sisanya dikategorikan \"Rendah\".","334c9de8":"**NOMOR 8**","b8a04761":"**Analisis Tambahan**","8d42e026":"**NOMOR 5**","1caa9931":"> Sehingga mobil yang merupakan kepemilikan ketiga atau lebih terdapat 122 mobil."}}