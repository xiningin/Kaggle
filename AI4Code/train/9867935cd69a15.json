{"cell_type":{"4fb98604":"code","f2c4947c":"code","316ad149":"code","09168898":"code","fa0eb24c":"code","293078a6":"code","ad541256":"code","b57c0e5e":"code","3edb7970":"code","140de5c4":"code","a31c30ce":"code","2e7005a6":"code","404c3b70":"code","35acc06d":"code","c34b904c":"code","65bac2d1":"code","f9ea2ad8":"code","7f52f016":"code","b453e497":"code","98e784d3":"code","c7a2bab6":"markdown","db6823d7":"markdown","caca0fd4":"markdown","6aee52bf":"markdown","e01a4432":"markdown","316212f6":"markdown","4fa77afd":"markdown"},"source":{"4fb98604":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport itertools as itt\nimport warnings\n\n#from pmdarima.arima import ndiffs,nsdiffs\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom sklearn import metrics\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf","f2c4947c":"df = pd.read_csv(\"\/kaggle\/input\/time-series-forecasting-with-yahoo-stock-price\/yahoo_stock.csv\")\ndf.head()","316ad149":"df.index = pd.DatetimeIndex(df.Date, freq='D')\ndf=df.drop(columns='Date')\ndf.head()","09168898":"df.isnull().sum()","fa0eb24c":"plt.figure(figsize=(16,9))\n\nplt.plot(df.index, df.Close, lw=2, color='r',label='Close')\nplt.plot(df.index, df.High, lw=1, color='g',linestyle='--',alpha=0.7,label='High')\nplt.plot(df.index, df.Low, lw=1, color='m',linestyle='--',alpha=0.7,label='Low')\nplt.plot(df.index, df.Open, lw=2, color='b',label='Open')\n\nplt.legend()\nplt.xlabel('Date')\nplt.ylabel('Stock Price')\nplt.title('Yahoo Stock Prices')\nplt.show()","293078a6":"df_open_month_avg = df['Open'].resample('MS').mean()\n\nplt.figure(figsize=(16,9))\n\ndf_open_month_avg.plot(color='b')\nplt.xlabel('Date')\nplt.ylabel('Stock Price')\nplt.title('Yahoo Stock Prices Monthly Average')\n\nplt.show()","ad541256":"S = seasonal_decompose(df_open_month_avg,model='add')\nS.plot()\nplt.show()","b57c0e5e":"def adf_test(timeseries):\n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n       dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)\n\nprint(adf_test(df_open_month_avg))","3edb7970":"df_open_t_adj = df_open_month_avg - df_open_month_avg.shift(1)\ndf_open_t_adj = df_open_t_adj.dropna()\ndf_open_t_adj.plot()\n\nprint(adf_test(df_open_t_adj))","140de5c4":"df_open_s_adj = df_open_t_adj - df_open_t_adj.shift(12)\ndf_open_s_adj = df_open_s_adj.dropna()\ndf_open_s_adj.plot()\nplt.show()","a31c30ce":"plot_acf(df_open_s_adj)\nplt.show()\nplot_pacf(df_open_s_adj)\nplt.show()","2e7005a6":"p = range(0, 3)\nd = range(1,2)\nq = range(0, 3)\npdq = list(itt.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itt.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))\n\nparams=[]\nparams_seasonal=[]\nAIC = []\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n         with warnings.catch_warnings():\n            warnings.filterwarnings(\"ignore\")\n            try:\n                mod = SARIMAX(df_open_month_avg,\n                              order=param,\n                              seasonal_order=param_seasonal,\n                              enforce_stationarity=False,\n                              enforce_invertibility=False)\n                results = mod.fit()\n                if results.aic > 50:\n                    params.append(param)\n                    params_seasonal.append(param_seasonal)\n                    AIC.append(results.aic)\n            \n            \n            except:\n                continue\nGS_params = pd.DataFrame(list(zip(params,params_seasonal,AIC)))\nBest_params=GS_params.loc[GS_params[2].idxmin()]\nprint('Best Parameters had been: ARIMA{0}x{1} - AIC:{2}'.format(Best_params[0],Best_params[1],Best_params[2]))","404c3b70":"series_to_pred =df_open_month_avg\n\ny_index = series_to_pred.index\n\ndate_train = int(len(y_index)*0.9)\n\ny_train = series_to_pred[y_index[:date_train]]\ny_test = series_to_pred[y_index[date_train:len(y_index)]]\n\nseries_to_pred = series_to_pred.asfreq('MS')\ny_train= y_train.asfreq('MS')\ny_test= y_test.asfreq('MS')\n\ny_train.tail()","35acc06d":"y_test.head()","c34b904c":"mod = SARIMAX(y_train,\n              order = (0,1,2),\n              seasonal_order = (0,1,2,12),\n              enforce_stationarity = False,\n              enforce_invertibility = False)\n\nresults = mod.fit()\nresults.plot_diagnostics(figsize = (15, 12), lags = 4);","65bac2d1":"pred_uc = results.get_forecast(steps = len(y_test), dynamic=True)\npred_ci = pred_uc.conf_int()\n\nax = series_to_pred.plot(label = 'Actual values', figsize = (16, 6))\n\npred_uc.predicted_mean.plot(ax = ax, label = 'Prediction')\n\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color = 'k', alpha = .25)\n\nax.set_xlabel('Date')\nax.set_ylabel('Dollars')\nax.set_title('Yahoo Stock Price Actual and Predicted')\n\nplt.legend()\nplt.show()","f9ea2ad8":"y_pred = pred_ci.iloc[:, 0]\ny_test=y_test.fillna(np.mean(y_test))\nrmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint(\"The ARIMA model with paremeters {}x{}, has given an rmse in test of {}\".format((0,1,2), (0,1,2,12),round(rmse, 2)))","7f52f016":"series_to_pred = series_to_pred.asfreq('MS')\nmod = SARIMAX(series_to_pred,\n              order = (0,1,2),\n              seasonal_order = (0,1,2,12),\n              enforce_stationarity = False,\n              enforce_invertibility = False)\n\nresults = mod.fit()","b453e497":"forecast_res = results.get_forecast(steps = 12)\nforecast_ci = forecast_res.conf_int()","98e784d3":"with plt.style.context(\"seaborn-darkgrid\"):\n\n    ax = series_to_pred.plot(label = 'Actual values', figsize = (16, 6))\n    \n    forecast_res.predicted_mean.plot(ax = ax, label = 'Forecast')\n\n    ax.fill_between(forecast_ci.index,\n                    forecast_ci.iloc[:, 0],\n                    forecast_ci.iloc[:, 1], color = 'k', alpha = .25)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Dollars')\n\n\nplt.title(\"Yahoo Stock Price forecasting\")\nplt.legend()\nplt.show()","c7a2bab6":"## Search Seasonarity for SARIMA","db6823d7":"# Yahoo Stock Price Forecast","caca0fd4":"Let's GridSearch the best values depending on AIC result","6aee52bf":"* For ACF plot, initial spikes at lag = 1 and seasonal spikes at lag  = 4 which means a probable AR order of 1 and AR seasonal order of 0 or 1.\n* For PACF plot, initial spikes at lag = 1 and seasonal spikes at lag = 4,6 which means a probable MA order of 1 and MA seasonal order od 0 or 1 or 2.","e01a4432":"Non null values. Dataset complete","316212f6":"The max values for SARIMA are $(1,1,1)x(1,0,1)_{12}$","4fa77afd":"## Visualization"}}