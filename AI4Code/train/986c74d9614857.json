{"cell_type":{"1e688c81":"code","03eddcf1":"code","94a26eda":"code","72e12ecd":"code","e5887b68":"code","eaf55fc0":"code","76f3835b":"code","5e49c824":"code","ff0312d0":"code","a4e42382":"code","d92afd42":"code","4b3f1488":"code","c5a945db":"code","dc5084cb":"code","fa94be5d":"code","98528978":"code","14db69d9":"code","cf47fefc":"code","3cc71b5a":"code","7643b5c0":"code","e5e07163":"code","af7d7c6f":"code","a8a129de":"code","d832c3ed":"code","58782b56":"code","ad7357fe":"code","4b76d8a0":"code","ab4362dd":"code","5f2e1a67":"code","bbeac034":"code","7c6ad47f":"markdown","d693ffc9":"markdown","181d4d0d":"markdown","e2913a8f":"markdown","2a953416":"markdown","4cbf3a0a":"markdown","52bd081f":"markdown"},"source":{"1e688c81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03eddcf1":"df_train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_test0=df_test\ndf_train.head()","94a26eda":"split = df_train.shape[0]\ndf_tt= pd.concat([df_train, df_test], axis=0)\ndf_tt.shape","72e12ecd":"df_tt.info()","e5887b68":"df_tt=df_tt.drop(['Cabin'],axis=1)\ndf_tt['Fare']= df_tt['Fare'].fillna('7.0')\ndf_tt['Embarked']= df_tt['Embarked'].fillna('S')\n#df_tt=df_tt[df_tt.Fare.notnull()]\n#df_tt=df_tt[df_tt.Embarked.notnull()]\ndf_tt['Age']= df_tt['Age'].fillna(df_tt['Age'].mean())","eaf55fc0":"df_tt.info()","76f3835b":"df_train = df_tt[:split]\ndf_test = df_tt[split:]\n#df_test0 = df_tt[split:]","5e49c824":"import matplotlib.pyplot as plt\ntable=pd.crosstab(df_train['Pclass'], df_train['Survived'])\ntable.plot(kind='bar',stacked=True,figsize=(6,6))\nplt.show()","ff0312d0":"table=pd.crosstab(df_train['Sex'], df_train['Survived'])\ntable.plot(kind='bar',stacked=True,figsize=(6,6))\nplt.show()","a4e42382":"#df_train['Age_bin']=pd.cut(df_train['Age'],10)\ntable=pd.crosstab(pd.cut(df_train['Age'],10), df_train['Survived'])\ntable.plot(kind='bar',stacked=True,figsize=(6,6))\nplt.show()","d92afd42":"table=pd.crosstab(df_train['SibSp'], df_train['Survived'])\ntable.plot(kind='bar',stacked=True,figsize=(6,6))\nplt.show()","4b3f1488":"table=pd.crosstab(df_train['Parch'], df_train['Survived'])\ntable.plot(kind='bar',stacked=True,figsize=(6,6))\nplt.show()","c5a945db":"table=pd.crosstab(df_train['Embarked'], df_train['Survived'])\ntable.plot(kind='bar',stacked=True,figsize=(6,6))\nplt.show()","dc5084cb":"df_train=df_train[df_train.Survived.notnull()]","fa94be5d":"def Digit(value):\n    if value == \"male\":\n        return 1\n    else:\n        return 0\n    \ndf_train['Sex'] = df_train['Sex'].apply(Digit)\ndf_train['Sex'] = df_train['Sex'].astype(int)","98528978":"df_train['Embarked'].unique()","14db69d9":"df_train.info()","cf47fefc":"# plot the heatmap and annotation on it\nimport seaborn as sns\nsns.heatmap(df_train.corr(), xticklabels=df_train.columns, yticklabels=df_train.columns, annot=True)","3cc71b5a":"y = pd.DataFrame(df_train['Survived'])\ndf_train = pd.get_dummies(df_train[['Pclass','Sex','Age','SibSp','Parch','Embarked']])","7643b5c0":"from sklearn import preprocessing\ndf_train_column_names = df_train.columns.values\ndf_train_np = preprocessing.minmax_scale(df_train)\ndf_train = pd.DataFrame(df_train_np, columns=df_train_column_names)\n\ndf_train.head()","e5e07163":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\n#from sklearn.model_selection import train_test_split","af7d7c6f":"from sklearn import datasets\nfrom sklearn.model_selection import train_test_split\n#from sklearn.metrics import classification_report\nfrom sklearn.svm import SVC","a8a129de":"X = pd.DataFrame(df_train[['Pclass','Sex','Age','SibSp','Parch','Embarked_C','Embarked_Q','Embarked_S']])","d832c3ed":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","58782b56":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nclfl=LogisticRegression()\nparameters = {\"C\": [0.0001, 0.001, 0.1, 1, 10, 100]}\nfitmodel = GridSearchCV(clfl, param_grid=parameters, cv=5, scoring=\"accuracy\")\nfitmodel.fit(X_train, y_train)\nfitmodel.best_estimator_, fitmodel.best_params_, fitmodel.best_score_, fitmodel.cv_results_\n#fitmodel.grid_scores_","ad7357fe":"clfl=LogisticRegression(C=fitmodel.best_params_['C'])\nclfl.fit(X_train, y_train)\nypred=clfl.predict(X_test)\naccuracy_score(ypred, y_test)","4b76d8a0":"   \ndf_test['Sex'] = df_test['Sex'].apply(Digit)\ndf_test['Sex'] = df_test['Sex'].astype(int)\n\ndf_test = pd.get_dummies(df_test[['Pclass','Sex','Age','SibSp','Parch','Embarked']])\n\nfrom sklearn import preprocessing\ndf_test_column_names = df_test.columns.values\ndf_test_np = preprocessing.minmax_scale(df_test)\ndf_test = pd.DataFrame(df_test_np, columns=df_test_column_names)\n\nX_test = pd.DataFrame(df_test[['Pclass','Sex','Age','SibSp','Parch','Embarked_C','Embarked_Q','Embarked_S']])","ab4362dd":"ypred=clfl.predict(X_test)","5f2e1a67":"ypred = ypred.astype('int')","bbeac034":"output = pd.DataFrame({'PassengerId': df_test0.PassengerId, 'Survived': ypred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","7c6ad47f":"### Data processing","d693ffc9":"### Titanic: Machine Learning from Disaster","181d4d0d":"### Data train test split","e2913a8f":"The sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nThis is a challenge to train a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","2a953416":"### EDA and Summary Statistics ","4cbf3a0a":"### Logistic regression","52bd081f":"---"}}