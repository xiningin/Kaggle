{"cell_type":{"ad698488":"code","e2942093":"code","5fee072f":"code","58b376ed":"code","4638f3e7":"code","cc3c6539":"code","bfeeee89":"code","39440fbf":"code","78b3c105":"code","297dba59":"code","2666ec66":"code","ba9a35ae":"code","c32b438f":"code","11563642":"code","e4b08449":"code","6845b2b4":"code","be0df289":"code","10c5da76":"markdown","be1758ed":"markdown","271870e1":"markdown"},"source":{"ad698488":"import numpy as np\nimport pandas as pd\nimport ast\nimport os\nprint(os.listdir(\"..\/input\"))\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cufflinks\npd.options.display.max_columns = 30\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\nfrom plotly.offline import iplot\nimport json\nfrom pandas.io.json import json_normalize\nfrom wordcloud import WordCloud, STOPWORDS\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')","e2942093":"df = pd.read_csv('..\/input\/ted_main.csv')\nimport datetime\nmonth_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nday_order = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\ndf['film_date'] = df['film_date'].apply(lambda x: datetime.datetime.fromtimestamp( int(x)).strftime('%d-%m-%Y'))\ndf['published_date'] = df['published_date'].apply(lambda x: datetime.datetime.fromtimestamp( int(x)).strftime('%d-%m-%Y'))\ndf = df[['tags', 'speaker_occupation', 'views', 'ratings', 'name', 'title', 'description', 'main_speaker',  'num_speaker', 'duration', 'event', 'film_date', 'published_date', 'comments', 'languages', 'related_talks', 'url']]\ndf['year'] = df['film_date'].apply(lambda x: x.split('-')[2]) # Add year column\ndf.iloc[1]['ratings']\ndf['ratings'] = df['ratings'].apply(lambda x: ast.literal_eval(x))\ndf.columns\ndf['humorous'] = df['ratings'].apply(lambda x: x[0]['count'])\ndf['courageous'] = df['ratings'].apply(lambda x: x[1]['count'])\ndf['persuasive'] = df['ratings'].apply(lambda x: x[-4]['count'])\ndf['jawdrop'] = df['ratings'].apply(lambda x: x[-3]['count'])\ndf['beautiful'] = df['ratings'].apply(lambda x: x[3]['count'])\ndf.head()","5fee072f":"import ast\ndf['tags'] = df['tags'].apply(lambda x: ast.literal_eval(x))\ns = df.apply(lambda x: pd.Series(x['tags']),axis=1).stack().reset_index(level=1, drop=True)\ns.name = 'theme'\ntheme_df = df.drop('tags', axis=1).join(s)","58b376ed":"theme_df.head(20)","4638f3e7":"year_df = pd.DataFrame(df['year'].value_counts().reset_index())\nyear_df.columns = ['year', 'talks']\nplt.figure(figsize=(18,5))\nsns.pointplot(x='year', y='talks', data=year_df)","cc3c6539":"occupation_df = df.groupby('speaker_occupation').count().reset_index()[['speaker_occupation', 'comments']]\noccupation_df.columns = ['occupation', 'appearances']\noccupation_df = occupation_df.sort_values('appearances', ascending=False)\nfig, ax = plt.subplots(nrows=1, ncols=1,figsize=(15, 8))\nsns.boxplot(x='speaker_occupation', y='views', data=df[df['speaker_occupation'].isin(occupation_df.head(12)['occupation'])], palette=\"cool\", ax =ax)\nax.set_ylim([0, 0.4e7])\nplt.show()","bfeeee89":"pop_themes = pd.DataFrame(theme_df['theme'].value_counts()).reset_index()\npop_themes.columns = ['theme', 'talks']\npop_theme_talks = theme_df[(theme_df['theme'].isin(pop_themes.head(8)['theme'])) & (theme_df['theme'] != 'TEDx')]\npop_theme_talks['year'] = pop_theme_talks['year'].astype('int')\npop_theme_talks = pop_theme_talks[pop_theme_talks['year'] > 2008]","39440fbf":"plt.figure(figsize=(15,8))\nsns.barplot(x='theme', y='talks', data=pop_themes.head(10), palette = \"cool\")\nplt.xlabel(\"Themes\",size = 18)\nplt.ylabel(\"Number of Talks\", size = 18)\nplt.xticks(size = 20, rotation = 30)\nplt.yticks(size = 20)\nplt.show();\nplt.savefig('bargraph.png')","78b3c105":"themes = list(pop_themes.head(8)['theme'])\nthemes.remove('TEDx')\nctab = pd.crosstab([pop_theme_talks['year']], pop_theme_talks['theme']).apply(lambda x: x\/x.sum(), axis=1)","297dba59":"ctab[themes].plot(kind='line', stacked=False, colormap='rainbow', figsize=(13,8)).legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\nplt.savefig('linegraph.png')","2666ec66":"df.to_csv('Hackathon.csv')","ba9a35ae":"occupation_df.to_csv('occupation.csv')","c32b438f":"theme_df.to_csv('themes.csv')","11563642":"new_df = df[['title', 'main_speaker', 'views', 'published_date', 'beautiful', 'url']].sort_values('beautiful', ascending=False)[:10]\nnew_df.reset_index().to_json('beautiful.json')","e4b08449":"new_df = df[['title', 'main_speaker', 'views', 'published_date', 'jawdrop', 'url']].sort_values('jawdrop', ascending=False)[:10]\nnew_df.reset_index().to_json('jawdrop.json')\nnew_df","6845b2b4":"new_df = df[['title', 'main_speaker', 'views', 'published_date', 'humorous', 'url']].sort_values('humorous', ascending=False)[:10]\nnew_df.reset_index().to_json('humorous.json')\nnew_df","be0df289":"new_df = df[['title', 'main_speaker', 'views', 'published_date', 'courageous', 'url']].sort_values('courageous', ascending=False)[:10]\nnew_df.reset_index().to_json('courageous.json')\nnew_df","10c5da76":"# Preprocessing","be1758ed":"# Visuatlizations","271870e1":"# Imports"}}