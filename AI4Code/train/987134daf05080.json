{"cell_type":{"9dff457e":"code","1c26aece":"code","f5b4c221":"code","df42051c":"code","736d1b33":"code","618cbf4a":"code","f2569396":"code","1497390a":"code","3fe09667":"code","77213a11":"code","82743234":"code","bf97348f":"code","fad8f709":"markdown","8cca2850":"markdown"},"source":{"9dff457e":"import keras\nfrom keras.datasets import mnist\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\nfrom sklearn.decomposition import PCA as pca\nfrom sklearn.decomposition import TruncatedSVD as svd\nfrom sklearn.manifold import TSNE as tsne\nimport warnings\nwarnings.filterwarnings(action='ignore')\n\nfrom keras.layers import Conv2D,MaxPooling2D,Softmax,Dropout,Dense,Flatten\nfrom keras.activations import relu \nfrom keras.models import Sequential\nfrom keras import backend as K","1c26aece":"#Load data into ipython notebook\ntrain = pd.read_csv(\"..\/input\/train.csv\")\nx_train = train[train.columns[1:]]\ny_train = train[train.columns[0]]\nx_test = pd.read_csv(\"..\/input\/test.csv\")","f5b4c221":"#Convert Data into 2D (28*28) such that data can pass into ConvNets \nx_train = np.array(x_train)\nx_test = np.array(x_test)\ny_train = np.array(y_train)\nx_train_2d = x_train.reshape(42000,28,28)\nx_test_2d = x_test.reshape(28000,28,28)","df42051c":"#print size of train and test\nprint(\"Train Size is:\",x_train.shape)\nprint(\"Test Size is:\",x_test.shape)","736d1b33":"#Lets visualize one data point\nplt.imshow(x_train_2d[random.randrange(0,1000)],cmap='Greys')","618cbf4a":"y_train = y_train.reshape((42000,1))\npc = pca(n_components = 2)\npc_data = pc.fit_transform(x_train)\npc_data = pd.DataFrame(np.hstack((pc_data,y_train)),columns=['d1','d2','class'])\nplt.figure(figsize=(10,9))\nplt.title('PCA')\nsns.scatterplot(x=pc_data['d1'],y=pc_data['d2'],hue=pc_data['class'],palette='Dark2',legend='full');","f2569396":"#Visualization with SVD\nsv = svd(n_components = 2)\nsv_data = sv.fit_transform(x_train)\nsv_data = pd.DataFrame(np.hstack((sv_data,y_train)),columns=['d1','d2','class'])\nplt.figure(figsize=(10,9))\nplt.title('SVD')\nsns.scatterplot(x=sv_data['d1'],y=sv_data['d2'],hue=sv_data['class'],palette='CMRmap',legend='full');","1497390a":"#Visualize MNIST with T-SNE\n#Usually t-sne is time complex thing so we don't take complete dataset \n\nx_train_tsne = x_train[:20000]\ny_train_tsne = y_train[:20000]\nts = tsne(n_components = 2)\ntsne_data = ts.fit_transform(x_train_tsne)\ntsne_data = pd.DataFrame(np.hstack((tsne_data,y_train_tsne)),columns=['d1','d2','class'])\nplt.figure(figsize=(10,9))\nplt.title('T-SNE')\nsns.scatterplot(x=tsne_data['d1'],y=tsne_data['d2'],hue=tsne_data['class'],palette='CMRmap',legend='full');","3fe09667":"#Prepare data to pass into ConvNets\nimg_rows,img_cols = 28,28\nif K.image_data_format() == 'channels_first':\n    x_train_2d = x_train_2d.reshape(x_train_2d.shape[0], 1, img_rows, img_cols)\n    x_test_2d = x_test_2d.reshape(x_test_2d.shape[0], 1, img_rows, img_cols)\n    input_shape = (1, img_rows, img_cols)\nelse:\n    x_train_2d = x_train_2d.reshape(x_train_2d.shape[0], img_rows, img_cols, 1)\n    x_test_2d = x_test_2d.reshape(x_test_2d.shape[0], img_rows, img_cols, 1)\n    input_shape = (img_rows, img_cols, 1)\n    \n#Data Normalization \nx_train_2d = x_train_2d.astype('float32')\nx_test_2d = x_test_2d.astype('float32')\nx_train_2d \/= 255\nx_test_2d \/= 255\nprint('x_train shape:', x_train.shape)\nprint(x_train_2d.shape[0], 'train samples')\nprint(x_test_2d.shape[0], 'test samples')\n\n#convert y classes to binary classes\ny_train = keras.utils.to_categorical(y_train)","77213a11":"#Build CNN architecture\nmodel = Sequential()\nmodel.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=input_shape))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\nmodel.summary()","82743234":"#Model training\nmodel.compile(optimizer='Adam',loss=keras.losses.categorical_crossentropy,metrics=['accuracy'])\nmodel.fit(x=x_train_2d,y=y_train,batch_size=50,epochs=15,validation_split=0.6)","bf97348f":"#predicting test data and store to a CSV file\nresult = pd.DataFrame(model.predict_classes(x_test_2d))\nresult.index += 1\nresult = result.reset_index()\nresult.columns = ['ImageId','Label']\n\n#a.columns=['ImageId','Label']\nresult.to_csv(\"result.csv\",index=False)","fad8f709":"Observation:\n1. In PCA there is no clear discrimination between points of different classes but better that SVD.\n2. But in T-SNE there is a clear discrimination between classes.","8cca2850":"## Visualize MNIST data"}}