{"cell_type":{"1d952d8c":"code","a6ac5b3b":"code","2c6bd816":"code","3d65db1c":"code","96640e84":"code","18300930":"code","87061e07":"code","2f5ed385":"code","c3175a82":"code","a0240f9c":"code","074e81f5":"code","5ecefebf":"code","1492076d":"code","7c3ab546":"code","30ffa904":"code","5097ffcc":"code","5c5f37e1":"code","98827576":"code","3a6bf1b7":"code","7f21a881":"code","da7d6432":"code","877f6935":"code","50e610a1":"code","744da3d3":"code","adc37587":"code","5722b28a":"code","4b2be59f":"code","f5f42ffc":"code","5f11e169":"code","eb41d3c9":"code","83f4b3ac":"code","67bed462":"code","361b0940":"markdown","9d8af4af":"markdown","8d25a1f6":"markdown","9c95f4e3":"markdown","3ed09dfc":"markdown","428bc902":"markdown","1970eb87":"markdown","b9457937":"markdown","c80c7b14":"markdown","4d765ee5":"markdown","6fa8748e":"markdown","a41461ca":"markdown","4efe000f":"markdown","34d3a3db":"markdown","600e5797":"markdown","adea3960":"markdown","211e0be8":"markdown","e6712395":"markdown","848e426d":"markdown","e1c3fc6e":"markdown","62c701b6":"markdown","4d41fe4c":"markdown","76f31cb4":"markdown","34f158a6":"markdown","258bd396":"markdown","ad173360":"markdown","b8409d14":"markdown","56ad5d9e":"markdown"},"source":{"1d952d8c":"import os\nfrom sklearn.metrics import classification_report, confusion_matrix\ntry:\n  # The %tensorflow_version magic only works in colab.\n  %tensorflow_version 2.x\nexcept Exception:\n  pass\nimport tensorflow as tf\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a6ac5b3b":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,classification_report,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom tensorflow.keras.utils import to_categorical\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n \nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nimport itertools\nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image","2c6bd816":"X = []\nZ = []\nIMG_SIZE = 75\npisang_matang = '..\/input\/datapisang\/pisang\/pisang matang'\npisang_mentah = '..\/input\/datapisang\/pisang\/pisang mentah'","3d65db1c":"def assign_label(img,maks):\n    return maks","96640e84":"def make_train_data(maks,DIR):\n    for img in tqdm(os.listdir(DIR)):\n        label=assign_label(img,maks)\n        path = os.path.join(DIR,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n        \n        X.append(np.array(img))\n        Z.append(str(label))","18300930":"make_train_data('pisang_matang', pisang_matang)\nprint(len(X))\n\nmake_train_data('pisang_mentah', pisang_mentah)\nprint(len(X))","87061e07":"fig,ax=plt.subplots(12,2)\nfig.set_size_inches(20,20)\nfor i in range(12):\n    for j in range (2):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l])\n        ax[i,j].set_title('Dataset: '+Z[l])\n        \nplt.tight_layout()","2f5ed385":"le = LabelEncoder()\nY = le.fit_transform(Z)\nY = to_categorical(Y,20)\nX = np.array(X)\nX = X\/255","c3175a82":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=2)","a0240f9c":"np.random.seed(20)\nrn.seed(20)\ntf.random.set_seed(20)","074e81f5":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (17,17),padding = 'Same',activation ='relu', input_shape = (IMG_SIZE,IMG_SIZE,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n \nmodel.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dense(20, activation = \"softmax\"))","5ecefebf":"from keras.callbacks import ReduceLROnPlateau\nred_lr= ReduceLROnPlateau(monitor='val_acc',patience=3,verbose=1,factor=0.1)","1492076d":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # secara acak merotasi gambar 10 derajat(degrees, 0 to 180)\n        zoom_range = 0.1, # secara acak  zoom atau memperbesar gambar 10 persen \n        width_shift_range=0.2,  # secara acak menggeser gambar horizontal 20 persen\n        height_shift_range=0.2,  # secara acak menggeser gambar vertikal 20 persen\n        horizontal_flip=True,  # secara acak membalik gambar\n        vertical_flip=False)  # randomly flip images\ndatagen.fit(x_train)","7c3ab546":"model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])","30ffa904":"batch = 20\nepoch = 50\nstep = np.ceil(x_train.shape[0] \/ batch)\nHistory = model.fit_generator(\n    datagen.flow(x_train,y_train, batch_size = batch),\n    epochs = epoch,\n    validation_data = (x_test,y_test),\n    verbose = 1,\n    steps_per_epoch = step\n)","5097ffcc":"model.save('\/kaggle\/working\/modeldeteksikematanganpisang.h5')\n%cd \/kaggle\/working\/","5c5f37e1":"saved_model_dir = '\/kaggle\/working\/'\ntf.saved_model.save(model, saved_model_dir)\n\nconverter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)\ntflite_model = converter.convert()\n\nwith open('model.tflite', 'wb') as f:\n  f.write(tflite_model)\n\ntarget_names = ['pisang_matang','pisang_mentah']\nlabels = '\\n'.join(target_names)\n\nwith open('labels.txt', 'w') as f:\n  f.write(labels)","98827576":"model.summary()","3a6bf1b7":"Y_pred = model.predict_generator(x_test)\ny_pred = np.argmax(Y_pred, axis=1)\ny_test = np.argmax(y_test, axis=1)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","7f21a881":"print(classification_report(y_test, y_pred, target_names=target_names))","da7d6432":"def plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n\n    plt.figure(figsize=(15,15))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=2)\n        cm[np.isnan(cm)] = 0.0\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n    thresh = cm.max() \/ 2.\n\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","877f6935":"plot_confusion_matrix(cm, target_names, title='Confusion Matrix')","50e610a1":"new_model = tf.keras.models.load_model('\/kaggle\/working\/modeldeteksikematanganpisang.h5')","744da3d3":"new_model.summary()","adc37587":"plt.plot(History.history['loss'])\nplt.plot(History.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","5722b28a":"plt.plot(History.history['accuracy'])\nplt.plot(History.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","4b2be59f":"pred=new_model.predict(x_test)\npred_digits=np.argmax(pred,axis=1)","f5f42ffc":"i=0\nprop_class=[]\nmis_class=[]\n\nfor i in range(len(y_test)):\n    if(np.argmax(y_test[i])==pred_digits[i]):\n        prop_class.append(i)\n    if(len(prop_class)==8):\n        break\n\ni=0\nfor i in range(len(y_test)):\n    if(not np.argmax(y_test[i])==pred_digits[i]):\n        mis_class.append(i)\n    if(len(mis_class)==8):\n        break","5f11e169":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(20,20)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[prop_class[count]])\n      \n        count+=1","eb41d3c9":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(20,20)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[mis_class[count]])\n        plt.tight_layout()\n        count+=1","83f4b3ac":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(20,20)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[prop_class[count]])\n        ax[i,j].set_title(\"Detection : \"+str(le.inverse_transform([pred_digits[prop_class[count]]])))\n        plt.tight_layout()\n        count+=1","67bed462":"#new_model.fit(x_train,y_train,epochs=epoch,batch_size=batch,validation_data = (x_test,y_test))","361b0940":"**Konversi model h5 ke TFlite**","9d8af4af":"**Menyimpan hasil model ke format .h5**","8d25a1f6":"**visualisasi sampel data gambar beserta label**","9c95f4e3":"**Menampilkan sequential tabel**","3ed09dfc":"**Menampilkan grafik Accuracy**","428bc902":"**Proses Train Data**","1970eb87":"**Memanggil model .h5 yang telah ditraining sebelumnya**","b9457937":"**Menampilkan *Normalized Confusion matrix* dalam bentuk tabel**","c80c7b14":"**Membuat variabel untuk memulai prediksi**","4d765ee5":"**Menampilkan *Confusion Matrix***","6fa8748e":"**Membuat val akurasi pada saat epoch data**","a41461ca":"**Menampilkan *Classification Report***","4efe000f":"**Menyatukan data menjadi path atau satuan dan memberikan label**","34d3a3db":"**Membuat pangilan singkat untuk variable**","600e5797":"**Mengambil data secara acak yang digunakan pada train dan test data**","adea3960":"**Menampilkan grafik Loss**","211e0be8":"**Membagi dataset kedalam data train dan data test split data**","e6712395":"**Menampilkan squential tabel**","848e426d":"**Menyimpan beberapa indeks yang salah diklasifikasikan**","e1c3fc6e":"**Deklarasi PATH gambar**","62c701b6":"**Membuat variable**","4d41fe4c":"**Membuat Data Generator untuk Augmentasi Data**","76f31cb4":"**Memanggil dan menampilkan gambar yang sudah di prediksi**","34f158a6":"**Memberikan keterangan loss akurasi dan metric akurasi**","258bd396":"**Membuat model data CNN untuk sequential tabel atau summary data**","ad173360":"**Import file training dari Kaggle input**","b8409d14":"**Membuat train data path dan penamaan**","56ad5d9e":"**Import Kebutuhan Plugin**"}}