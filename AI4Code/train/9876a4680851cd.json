{"cell_type":{"9e4a3bb3":"code","e4505258":"code","a5e9f9a6":"code","84fefef6":"code","32e55578":"code","df089a8e":"code","c287ef7d":"code","0a1db3df":"code","749676c1":"code","fc02d4a9":"code","463d311b":"code","e8840519":"code","5533b336":"code","c6991305":"code","a84dd412":"code","13db4b49":"code","c0cab313":"code","9c249763":"code","6d1ed841":"code","84f8ef2b":"code","e47454bb":"code","92732990":"code","999d0bd3":"code","dd3a4485":"code","9c7b341d":"code","1c830f07":"code","eae30523":"code","b792f55e":"code","445079d8":"markdown","50966c98":"markdown","2b2f2829":"markdown","7fe40bf9":"markdown","8527502f":"markdown","6b8ce03c":"markdown","b4514735":"markdown","bea483be":"markdown","4263b1ad":"markdown","5adb998b":"markdown"},"source":{"9e4a3bb3":"# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))","e4505258":"df = pd.read_csv(\"..\/input\/tmdb_5000_movies.csv\")\ndf.info()","a5e9f9a6":"df.head()","84fefef6":"df.corr()","32e55578":"df.columns","df089a8e":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","c287ef7d":"# Line Plot\ndf.budget.plot(kind = 'line', color = 'yellow',label = 'Budget',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndf.revenue.plot(color = 'blue',label = 'Revenue',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","0a1db3df":"# Scatter Plot \ndf.plot(kind='scatter', x='budget', y='revenue',alpha = 0.7,color = 'orange')\nplt.xlabel('Budget')              # label = name of label\nplt.ylabel('Revenue')\nplt.title('Budget Revenue Scatter Plot')\nplt.show()","749676c1":"# Histogram\ndf.vote_average.plot(kind = 'hist',bins = 100,figsize = (12,12))\nplt.show()","fc02d4a9":"# clf() = cleans it up again you can start a fresh\ndf.vote_count.plot(kind = 'hist',bins = 50)\nplt.clf()","463d311b":"# Create dictionary and look its keys and values\ndict = {\"Mobile Phone\":\"iPhone\", \"Computer\":\"Lenovo\"}\nprint(dict.keys())\nprint(dict.values())","e8840519":"# Update existing key value\ndict[\"Computer\"] = \"Toshiba\"\nprint(dict)\n\n# Add new key-value pair\ndict[\"Smart Watch\"] = \"Samsung Gear\"\nprint(dict)\n\n# Remove one of entries\ndel dict[\"Mobile Phone\"]\nprint(dict)\n\n# Check key exist or not\nprint('Smart Watch' in dict)\n\n# Remove all entries\ndict.clear()\nprint(dict)\n\n# Deallocate dict object from cache\ndel dict\nprint(dict)","5533b336":"df = pd.read_csv(\"..\/input\/tmdb_5000_movies.csv\")\ndf.head()","c6991305":"# Define Series\nseries = df['budget']\nprint(type(series))\n\n# Define DataFrames\ndata_frame = df[['revenue']]\nprint(type(data_frame))","a84dd412":"print('a' == 'b')\nprint('c' == 1)\nprint(True & True)\nprint(3>2 or 2<1)","13db4b49":"# Filter data using greater condition\na = df[\"revenue\"] > 1487965080\ndf[a]","c0cab313":"df[np.logical_and(df['revenue']>1487965080, df['budget']>=200000000)]","9c249763":"df[(df['revenue']>1487965080) & (df['budget']>=200000000)]","6d1ed841":"i=9\nwhile i>4:\n    print('value i is:', i)\n    i-=1\nprint('Current value for i is:', i)","84f8ef2b":"df_temp = df[(df['revenue']>1487965080) & (df['budget']>=200000000)]\nfor i in df_temp['title']:\n    print('The most expensive movie is:', i)","e47454bb":"for index, value in enumerate(df_temp['title']):\n    print('Index&value of The most expensive movie is:', str(index)+'-'+value)","92732990":"dict = {\"Mobile Phone\":\"iPhone\", \"Computer\":\"Lenovo\"}\nfor key, value in enumerate(dict):\n    print('key&value of dictionary is:', str(key)+'-'+value)","999d0bd3":"# Get Index&Value of data frame\nfor index,value in df_temp[['title']][0:2].iterrows():\n    print(index,\" : \",value)","dd3a4485":"a = df[df.budget>270000000]\ndef highest_budget():\n    print(a[\"title\"])\nhighest_budget()","9c7b341d":"df[df.budget>270000000][\"title\"]","1c830f07":"def square_triangle(x):\n    pi = 3.14\n    def square():\n        return x**2\n    return(pi*square())\nprint(square_triangle(4))","eae30523":"def square(x):\n    print(x**2)\nsquare(4)","b792f55e":"square = lambda x:x**2+5\nprint(square(4))","445079d8":"**2.4. Iterators**","50966c98":"**2.  Python Data Science Toolbox**","2b2f2829":"**  1.1. Matplotlib**","7fe40bf9":"**2.3. Lambda Function**","8527502f":"**  1.4. While and For Loop**","6b8ce03c":"**  1.3. Pandas**","b4514735":"**2.2. Nested Function**","bea483be":"**2.1. User Defined Function**","4263b1ad":"**1.  Introduction to Python**","5adb998b":"**  1.2. Dictionary**"}}