{"cell_type":{"27f9d637":"code","5e5d3231":"code","2d0b4423":"code","766d8972":"code","de4fc0b7":"code","00d4041a":"code","6390a919":"code","df5d1389":"code","338e371a":"code","1dddfc20":"code","7d39c202":"code","10807b81":"code","983aef55":"code","6a518b8a":"code","3809b82b":"code","d095918c":"code","38e75e97":"code","dca9a66c":"code","ea3d74d7":"code","3550061c":"code","a80f215c":"code","da720262":"code","736f026b":"code","cacb25b1":"code","55f624fc":"code","1660169a":"code","957b9b22":"code","8e7a727d":"code","9013c45b":"code","4eb6f40e":"code","b9badb3e":"code","c9af3232":"code","6b231da6":"code","6973eebe":"code","9f40cb76":"code","15f4ea7b":"code","7a9763e5":"code","bd083efa":"code","22b250f8":"code","93b0f9ce":"code","e4e3daa6":"code","9aeeec79":"code","5c5253ca":"code","b8799d2f":"markdown","ccee6cf4":"markdown","515972b2":"markdown","543947b6":"markdown"},"source":{"27f9d637":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tqdm\nimport gc\nimport sys\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5e5d3231":"date = pd.read_csv('..\/input\/bosch-production-line-performance\/train_date.csv.zip', nrows=10000)\nnumeric = pd.read_csv('..\/input\/bosch-production-line-performance\/train_numeric.csv.zip', nrows=10000)\ncategory = pd.read_csv('..\/input\/bosch-production-line-performance\/train_categorical.csv.zip', nrows=10000)","2d0b4423":"date","766d8972":"numeric","de4fc0b7":"category","00d4041a":"num_feats = ['Id',\n       'L3_S30_F3514', 'L0_S9_F200', 'L3_S29_F3430', 'L0_S11_F314',\n       'L0_S0_F18', 'L3_S35_F3896', 'L0_S12_F350', 'L3_S36_F3918',\n       'L0_S0_F20', 'L3_S30_F3684', 'L1_S24_F1632', 'L0_S2_F48',\n       'L3_S29_F3345', 'L0_S18_F449', 'L0_S21_F497', 'L3_S29_F3433',\n       'L3_S30_F3764', 'L0_S1_F24', 'L3_S30_F3554', 'L0_S11_F322',\n       'L3_S30_F3564', 'L3_S29_F3327', 'L0_S2_F36', 'L0_S9_F180',\n       'L3_S33_F3855', 'L0_S0_F4', 'L0_S21_F477', 'L0_S5_F114',\n       'L0_S6_F122', 'L1_S24_F1122', 'L0_S9_F165', 'L0_S18_F439',\n       'L1_S24_F1490', 'L0_S6_F132', 'L3_S29_F3379', 'L3_S29_F3336',\n       'L0_S3_F80', 'L3_S30_F3749', 'L1_S24_F1763', 'L0_S10_F219',\n 'Response']","6390a919":"length = date.drop('Id', axis=1).count()\ndate_cols = length.reset_index().sort_values(by=0, ascending=False)\nstations = sorted(date_cols['index'].str.split('_',expand=True)[1].unique().tolist())\ndate_cols['station'] = date_cols['index'].str.split('_',expand=True)[1]\ndate_cols = date_cols.drop_duplicates('station', keep='first')['index'].tolist()","df5d1389":"data = None\nfor chunk in pd.read_csv('..\/input\/bosch-production-line-performance\/train_date.csv.zip',usecols=['Id'] + date_cols,chunksize=50000,low_memory=False):\n\n    chunk.columns = ['Id'] + stations\n    chunk['start_station'] = -1\n    chunk['end_station'] = -1\n    \n    for s in stations:\n        chunk[s] = 1 * (chunk[s] >= 0)\n        id_not_null = chunk[chunk[s] == 1].Id\n        chunk.loc[(chunk['start_station']== -1) & (chunk.Id.isin(id_not_null)),'start_station'] = int(s[1:])\n        chunk.loc[chunk.Id.isin(id_not_null),'end_station'] = int(s[1:])   \n    data = pd.concat([data, chunk])","338e371a":"for chunk in pd.read_csv('..\/input\/bosch-production-line-performance\/test_date.csv.zip',usecols=['Id'] + date_cols,chunksize=50000,low_memory=False):\n    \n    chunk.columns = ['Id'] + stations\n    chunk['start_station'] = -1\n    chunk['end_station'] = -1\n    for s in stations:\n        chunk[s] = 1 * (chunk[s] >= 0)\n        id_not_null = chunk[chunk[s] == 1].Id\n        chunk.loc[(chunk['start_station']== -1) & (chunk.Id.isin(id_not_null)),'start_station'] = int(s[1:])\n        chunk.loc[chunk.Id.isin(id_not_null),'end_station'] = int(s[1:])   \n    data = pd.concat([data, chunk])\ndel chunk\ngc.collect()   ","1dddfc20":"data = data[['Id','start_station','end_station']]\nusefuldatefeatures = ['Id']+date_cols","7d39c202":"minmaxfeatures = None\nfor chunk in pd.read_csv('..\/input\/bosch-production-line-performance\/train_date.csv.zip',usecols=usefuldatefeatures,chunksize=50000,low_memory=False):\n    features = chunk.columns.values.tolist()\n    features.remove('Id')\n    df_mindate_chunk = chunk[['Id']].copy()\n    df_mindate_chunk['mindate'] = chunk[features].min(axis=1).values\n    df_mindate_chunk['maxdate'] = chunk[features].max(axis=1).values\n    df_mindate_chunk['min_time_station'] =  chunk[features].idxmin(axis = 1).apply(lambda s: int(s.split('_')[1][1:]) if s is not np.nan else -1)\n    df_mindate_chunk['max_time_station'] =  chunk[features].idxmax(axis = 1).apply(lambda s: int(s.split('_')[1][1:]) if s is not np.nan else -1)\n    minmaxfeatures = pd.concat([minmaxfeatures, df_mindate_chunk])\n\ndel chunk\ngc.collect()","10807b81":"for chunk in pd.read_csv('..\/input\/bosch-production-line-performance\/test_date.csv.zip',usecols=usefuldatefeatures,chunksize=50000,low_memory=False):\n    features = chunk.columns.values.tolist()\n    features.remove('Id')\n    df_mindate_chunk = chunk[['Id']].copy()\n    df_mindate_chunk['mindate'] = chunk[features].min(axis=1).values\n    df_mindate_chunk['maxdate'] = chunk[features].max(axis=1).values\n    df_mindate_chunk['min_time_station'] =  chunk[features].idxmin(axis = 1).apply(lambda s: int(s.split('_')[1][1:]) if s is not np.nan else -1)\n    df_mindate_chunk['max_time_station'] =  chunk[features].idxmax(axis = 1).apply(lambda s: int(s.split('_')[1][1:]) if s is not np.nan else -1)\n    minmaxfeatures = pd.concat([minmaxfeatures, df_mindate_chunk])\n\ndel chunk\ngc.collect()","983aef55":"minmaxfeatures.sort_values(by=['mindate', 'Id'], inplace=True)\nminmaxfeatures['min_Id_rev'] = -minmaxfeatures.Id.diff().shift(-1)\nminmaxfeatures['min_Id'] = minmaxfeatures.Id.diff()","6a518b8a":"cols = [['Id']+date_cols,num_feats]","3809b82b":"traindata = None\ntestdata = None","d095918c":"trainfiles = ['train_date.csv.zip','train_numeric.csv.zip']\ntestfiles = ['test_date.csv.zip','test_numeric.csv.zip']","38e75e97":"for i,f in enumerate(trainfiles):\n    \n    subset = None\n    \n    for chunk in pd.read_csv('..\/input\/bosch-production-line-performance\/' + f,usecols=cols[i],chunksize=100000,low_memory=False):\n        subset = pd.concat([subset, chunk])\n    \n    if traindata is None:\n        traindata = subset.copy()\n    else:\n        traindata = pd.merge(traindata, subset.copy(), on=\"Id\")\n        \ndel subset,chunk\ngc.collect()\ndel cols[1][-1]","dca9a66c":"for i, f in enumerate(testfiles):\n    subset = None\n    \n    for chunk in pd.read_csv('..\/input\/bosch-production-line-performance\/' + f,usecols=cols[i],chunksize=100000,low_memory=False):\n        subset = pd.concat([subset, chunk])\n        \n    if testdata is None:\n        testdata = subset.copy()\n    else:\n        testdata = pd.merge(testdata, subset.copy(), on=\"Id\")\n    \ndel subset,chunk\ngc.collect()","ea3d74d7":"traindata = traindata.merge(minmaxfeatures, on='Id')\ntraindata = traindata.merge(data, on='Id')\ntestdata = testdata.merge(minmaxfeatures, on='Id')\ntestdata = testdata.merge(data, on='Id')","3550061c":"del minmaxfeatures,data\ngc.collect()","a80f215c":"traindata","da720262":"testdata","736f026b":"traindata.fillna(value=0,inplace=True)\ntestdata.fillna(value=0,inplace=True)","cacb25b1":"def mcc(tp, tn, fp, fn):\n    num = tp * tn - fp * fn\n    den = (tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)\n    if den == 0:\n        return 0\n    else:\n        return num \/ np.sqrt(den)","55f624fc":"def eval_mcc(y_true, y_prob):\n    idx = np.argsort(y_prob)\n    y_true_sort = y_true[idx]\n    n = y_true.shape[0]\n    nump = 1.0 * np.sum(y_true) \n    numn = n - nump \n    tp,fp = nump,numn\n    tn,fn = 0.0,0.0\n    best_mcc = 0.0\n    best_id = -1\n    mccs = np.zeros(n)\n    for i in range(n):\n        if y_true_sort[i] == 1:\n            tp -= 1.0\n            fn += 1.0\n        else:\n            fp -= 1.0\n            tn += 1.0\n        new_mcc = mcc(tp, tn, fp, fn)\n        mccs[i] = new_mcc\n        if new_mcc >= best_mcc:\n            best_mcc = new_mcc\n            best_id = i\n    return best_mcc","1660169a":"def mcc_eval(y_prob, dtrain):\n    y_true = dtrain.get_label()\n    best_mcc = eval_mcc(y_true, y_prob)\n    return 'MCC', best_mcc","957b9b22":"np.set_printoptions(suppress=True)","8e7a727d":"import gc","9013c45b":"total = traindata[traindata['Response']==0].sample(frac=1).head(400000)\ntotal = pd.concat([total,traindata[traindata['Response']==1]]).sample(frac=1)","4eb6f40e":"from sklearn.model_selection import train_test_split","b9badb3e":"X,y = total.drop(['Response','Id'],axis=1),total['Response']","c9af3232":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42,stratify=y)","6b231da6":"from sklearn.ensemble import RandomForestClassifier","6973eebe":"model = RandomForestClassifier(n_estimators=500,n_jobs=-1,verbose=1,random_state=11)\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)","9f40cb76":"from sklearn.metrics import recall_score,precision_score,plot_precision_recall_curve,confusion_matrix,classification_report,matthews_corrcoef","15f4ea7b":"print(classification_report(pred,y_test))\nprint(matthews_corrcoef(y_test,pred))\nconfusion_matrix(y_test,pred)","7a9763e5":"print(recall_score(y_test,pred))\nprecision_score(y_test,pred)","bd083efa":"plot_precision_recall_curve(model,X_test,y_test)","22b250f8":"test = model.predict(testdata.drop(['Id'],axis=1))","93b0f9ce":"testdata['Response'] = test\ntestdata[['Id','Response']].to_csv(\"submit.csv\",index=False)","e4e3daa6":"!gzip submit.csv","9aeeec79":"!rm submit.csv.gz","5c5253ca":"total","b8799d2f":"### The list of numeric features is selected based on the other XGBOOST classifier check the numericclassifier notebook","ccee6cf4":"# FEATURE ENGINEERING","515972b2":"# MODELLING","543947b6":"# Note: The dataset is too large in terms of features we will be using the dataset in form of chunks in the entire solution"}}