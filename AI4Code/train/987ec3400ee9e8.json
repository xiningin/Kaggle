{"cell_type":{"e03850ac":"code","ec0cdfdc":"code","17d0f7a4":"code","35f647b5":"code","80191381":"code","4e2e8b10":"code","0305a372":"code","02eca279":"code","c6301458":"code","eaf67ea2":"code","359dd79c":"code","17f90afc":"code","d6f3aa21":"code","4f783670":"code","bb4c40a2":"code","d767f0eb":"code","3c6aff16":"code","19526055":"code","2c56ea4a":"code","6ab9d7fa":"code","2e697533":"code","66ae2c11":"code","57cd1a99":"code","5a36f678":"code","5865dce1":"markdown","ef0d1fd5":"markdown","68bd5d18":"markdown","f815bc3b":"markdown","aada0021":"markdown","68f8cf1d":"markdown","37b29196":"markdown","e0f2bd2e":"markdown","4f7b4712":"markdown","54b4ae30":"markdown","7909c5cc":"markdown"},"source":{"e03850ac":"import pandas as pd\nimport numpy as np","ec0cdfdc":"X_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv').set_index('Id')\n\ntrain_data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\n\ny_train = train_data.SalePrice\nX_train = train_data.drop(['SalePrice'],axis=1).copy().set_index('Id')","17d0f7a4":"all_x = pd.concat([X_test,X_train])","35f647b5":"all_x.shape","80191381":"numeric = all_x.select_dtypes('number')\nmissing=numeric.columns[numeric.isna().any()].tolist()\nnumeric[missing].isna().sum()","4e2e8b10":"df=all_x.copy()\ndf.MasVnrArea.fillna(0,inplace=True)\ndf.GarageYrBlt.fillna(df.YearBuilt,inplace=True)","0305a372":"from sklearn.linear_model import ElasticNet\nen = ElasticNet()\ndata_4_fill = X_train[['LotFrontage','1stFlrSF','LotArea']].dropna()\nen.fit(data_4_fill[['LotArea','1stFlrSF']],data_4_fill.LotFrontage)\n\ndf.LotFrontage.fillna(pd.Series(en.predict(df[['LotArea','1stFlrSF']])),inplace=True)","02eca279":"numeric = df.select_dtypes('number')\nmissing=numeric.columns[numeric.isna().any()].tolist()\nnumeric[missing].isna().sum()","c6301458":"df[missing]=df[missing].fillna(0)","eaf67ea2":"numeric = df.select_dtypes('number')\nmissing=numeric.columns[numeric.isna().any()].tolist()\nnumeric[missing].isna().sum()","359dd79c":"vars_2_fill_with_mode = ['Electrical']+['MSZoning', 'Utilities', 'Exterior1st', 'Exterior2nd', 'KitchenQual',\n        'Functional', 'SaleType']\nfor i in vars_2_fill_with_mode:\n    df[i].fillna(df[i].mode().iloc[0],inplace=True)","17f90afc":"vars_2_fill_with_none = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'\n                          ]+['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'\n                            ]+['Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature','MasVnrType']\nfor i in vars_2_fill_with_none:\n    df[i].fillna('None',inplace=True)","d6f3aa21":"\ndf['TotalSF']=df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']\n\ndf['Total_Bathrooms'] = (df['FullBath'] + (0.5 * df['HalfBath']) +\n                               df['BsmtFullBath'] + (0.5 * df['BsmtHalfBath']))\n\ndf['Total_porch_sf'] = (df['OpenPorchSF'] + df['3SsnPorch'] +\n                              df['EnclosedPorch'] + df['ScreenPorch'] +\n                              df['WoodDeckSF'])","4f783670":"\ndf['KitchenQual'] = df['KitchenQual'].map({\"Fa\":1, \"TA\":2, \"Gd\":3, \"Ex\":4})\n# all_data['LotShape'] = all_data['LotShape'].map({\"Reg\":1, \"IR1\":2, \"IR2\":3, \"IR3\":4})\ndf['LandContour'] = df['LandContour'].map({\"Bnk\":1, \"Lvl\":2, \"Low\":3, \"HLS\":4})\ndf['FireplaceQu'] = df['FireplaceQu'].map({\"None\":0, \"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5})\ndf['Functional'] = df['Functional'].map({\"Sev\":1, \"Maj2\":2, \"Maj1\":3, \"Mod\":4, \"Min2\":5, \"Min1\":6, \"Typ\":7})\ndf['ExterQual'] = df['ExterQual'].map({\"Fa\":1, \"TA\":2, \"Gd\":3, \"Ex\":4})\ndf['GarageQual'] = df['GarageQual'].map({\"None\":0, \"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5})\ndf['GarageCond'] = df['GarageCond'].map({\"None\":0, \"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5})\ndf['LandSlope'] = df['LandSlope'].map({\"Gtl\":1, \"Mod\":2, \"Sev\":2})\ndf['HeatingQC'] = df['HeatingQC'].map({\"Po\":1, \"Fa\":2, \"TA\":3, \"Gd\":4, \"Ex\":5})\ndf['BsmtQual'] = df['BsmtQual'].map({'None':0, 'Fa':1, 'TA':2, 'Gd':3, 'Ex':4})\ndf['BsmtCond'] = df['BsmtCond'].map({'None':0, 'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})\ndf['BsmtExposure'] = df['BsmtExposure'].map({'None':0, 'No':1, 'Mn':2, 'Av':3, 'Gd':4})","bb4c40a2":"# df['month_cut']=pd.cut(df.MoSold,[0,3,6,8,12])","d767f0eb":"for i in [i for i in df.columns if 'Yr' in i]:\n    df[i]=2011-df[i]","3c6aff16":"def make_top_categories(data,col_name,min_ratio=0.1):\n    ### makes a new variable with the top categories and all small categories grouped into other.\n    ### example: data2[\"new_PRD_CLASS\"]=make_top_categories(data2,\"PRD_PROD_CLASS_NAME\",0.01)\n    import pandas as pd\n    import numpy as np\n    counts = data[col_name].value_counts()\n    counts_df = pd.DataFrame({col_name:counts.index,\"count\":counts.values})\n    min_count=len(data)*min_ratio\n    counts_df.loc[:,\"new_name\"]=np.where([counts_df[\"count\"]>min_count],counts_df[col_name],'other')[0]\n    jj = data.merge(counts_df,on=col_name,how='left')\n    return jj[\"new_name\"]\ndef make_top_categories_df(data,min_ratio=0.1):\n    data2=data.copy()\n    dtypes_to_encode = ['object', 'category']\n    data_to_encode =data2.select_dtypes(include=dtypes_to_encode)\n    for (col) in data_to_encode.iteritems():\n            data2.loc[:,col[0]] = make_top_categories(data2,col[0],min_ratio=min_ratio)\n    return data2\n","19526055":"df2= make_top_categories_df(df,.05)","2c56ea4a":"pd.get_dummies(df2,drop_first=True).shape,pd.get_dummies(df,drop_first=True).shape","6ab9d7fa":"df3 =pd.get_dummies(df2,drop_first=True)","2e697533":"corrs = df3.corr().reset_index().melt(id_vars='index')\nhi_corr_vars = corrs.query('index>variable and value>.9 ').variable.unique()\ndf4=df3.drop(hi_corr_vars,axis=1)","66ae2c11":"df4.columns = [i.replace('<','_').replace(',','_') for i in df4.columns]","57cd1a99":"test =df4.loc[X_test.index,:]\ntrain =df4.loc[X_train.index,:]\ny=np.log(y_train)","5a36f678":"test.to_pickle('data_prep\\test')\ntrain.to_pickle('train')\ny.to_pickle('y')","5865dce1":"### Total sq. ft. variables","ef0d1fd5":"### Create \"other\" category for infrequent categories","68bd5d18":"## Categorical","f815bc3b":"### Numeric which are really categorical","aada0021":"## numeric","68f8cf1d":"# Feature Engineering","37b29196":"## categorical","e0f2bd2e":"## Numeric","4f7b4712":"# Missing Values","54b4ae30":"### yr -> yrs ago","7909c5cc":"### Order quality data\n"}}