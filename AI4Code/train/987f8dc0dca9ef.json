{"cell_type":{"a362d401":"code","2e699772":"code","d7b79cf8":"code","601da296":"code","c4c271b6":"code","b858f66f":"code","98f021f5":"code","bf121c11":"code","939458b9":"code","57274803":"code","358afc99":"code","b84b571a":"code","dcf1fdea":"code","14156681":"code","ce1b9613":"code","d9df9886":"code","2eb0f64f":"code","50bb30b5":"code","17d2ecfb":"code","a62a170f":"code","52290ba4":"code","75493252":"code","b8079008":"code","c89a85bb":"code","825e9ed1":"code","f3e6d6e4":"code","dde80f08":"code","1d05492b":"code","1af82fc8":"code","6d188afa":"code","b7653fd3":"code","68ef2bf0":"code","c341f427":"code","0004575a":"code","b6d1ecec":"code","41d65261":"markdown","d2a1f757":"markdown","1b0bc44f":"markdown","699ad72f":"markdown","404fdb9d":"markdown","18fde02c":"markdown","47ba4bed":"markdown","9ef27e5d":"markdown","9a211fe2":"markdown","a673b925":"markdown","57137772":"markdown","f8c4367b":"markdown","0075e67b":"markdown","b90fd0bc":"markdown","0760aa3d":"markdown","3e3f48f4":"markdown"},"source":{"a362d401":"import pandas as pd \nimport os\nimport datetime as dt\nimport matplotlib.pyplot as plt\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2e699772":"df_pv = pd.read_csv(\"\/kaggle\/input\/bps5229-assignment\/solar_cleaned.csv\", index_col='timestamp', parse_dates=['timestamp'])","d7b79cf8":"df_pv_nogaps = df_pv.fillna(method='ffill')","601da296":"pv_2016 = df_pv_nogaps.truncate(before = '2016-01-01', after= '2016-12-31')\npv_2016.info()","c4c271b6":"df_weather = pd.read_csv(\"\/kaggle\/input\/bps5229-assignment\/weather.csv\", index_col='timestamp', parse_dates=['timestamp'])\ndf_weather_nogaps = df_weather.fillna(method='ffill')","b858f66f":"bobcat = df_weather_nogaps[df_weather_nogaps['site_id']== 'Bobcat']","98f021f5":"bobcat_2016 = bobcat.truncate(before = '2016-01-01', after= '2016-12-31')\nbobcat_2016.info()","bf121c11":"bobcat_2016.insert(0, 'prev_pv', pv_2016['Bobcat_education_Dylan'].shift())\nbobcat_2016_filled = bobcat_2016.fillna(0)","939458b9":"all_data = pd.concat([pv_2016, bobcat_2016_filled], axis=1)\nall_data.info()","57274803":"# check correlation\ncon_vars_for_cor = ['airTemperature', 'precipDepth1HR', 'windSpeed', 'prev_pv']\n\ndata_for_cor = all_data.filter(items = con_vars_for_cor)\n\npd.set_option('display.max_columns', len(con_vars_for_cor))\npd.set_option('display.width', 1000)\n \nprint(data_for_cor.corr(method = 'pearson'))","358afc99":"all_data['airTemperature'].plot(figsize=(22,8))\n\nplt.xlabel('Period')\nplt.ylabel('Temperature')\nplt.title('Temperature data of Bobcat')\n\nplt.show()","b84b571a":"training_months = [1,2,3,4,5,6,7,8,9]\ntest_months = [10,11,12]","dcf1fdea":"trainingdata = all_data[all_data.index.month.isin(training_months)]\ntestdata = all_data[all_data.index.month.isin(test_months)]","14156681":"trainingdata.info()","ce1b9613":"testdata.info()","d9df9886":"feature_col = ['prev_pv', 'airTemperature', 'precipDepth1HR', 'windSpeed']","2eb0f64f":"# train input\ntrain_features = trainingdata[feature_col].values\ntrain_target = trainingdata['Bobcat_education_Dylan'].values\n\n# test input\ntest_features = testdata[feature_col].values","50bb30b5":"from sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import metrics\nimport numpy as np","17d2ecfb":"def rfr_model(X, y):\n    \n# perform grid-search\n    gsc = GridSearchCV(\n        estimator=RandomForestRegressor(),\n        param_grid={\n            'max_depth': range(3,7),\n            'n_estimators': (10, 50, 100, 1000),\n        },\n        cv=5, scoring='neg_mean_squared_error', verbose=0, n_jobs=-1)\n    \n    grid_result = gsc.fit(train_features, train_target)\n    best_params = grid_result.best_params_\n    \n    rfr = RandomForestRegressor(max_depth=best_params[\"max_depth\"], n_estimators=best_params[\"n_estimators\"],random_state=False, verbose=False)\n    \n# perform K-Fold CV\n    scores = cross_val_score(rfr, X, y, cv=10, scoring='neg_mean_absolute_error')\n\n    return scores","a62a170f":"print('10-fold cross validation scores:', rfr_model(train_features, train_target))","52290ba4":"print('Mean Absolute Error:', np.mean(rfr_model(train_features, train_target)))","75493252":"def rfr(X, y):\n    \n# perform grid-search\n    gsc = GridSearchCV(\n        estimator=RandomForestRegressor(),\n        param_grid={\n            'max_depth': range(3,7),\n            'n_estimators': (10, 50, 100, 1000),\n        },\n        cv=5, scoring='neg_mean_squared_error', verbose=0, n_jobs=-1)\n    \n    grid_result = gsc.fit(train_features, train_target)\n    best_params = grid_result.best_params_\n    \n    rfr = RandomForestRegressor(max_depth=best_params[\"max_depth\"], n_estimators=best_params[\"n_estimators\"],random_state=False, verbose=False)\n    \n# get predictions\n    predictions = cross_val_predict(rfr, X, y, cv=10)\n    \n    return predictions","b8079008":"predictions = rfr(test_features, testdata['Bobcat_education_Dylan'].values)","c89a85bb":"predicted_vs_actual = pd.concat([testdata['Bobcat_education_Dylan'], pd.DataFrame(predictions, index=testdata.index).shift(-1).fillna(method='ffill')], axis=1)","825e9ed1":"predicted_vs_actual.columns = [\"Actual\", \"Predicted\"]","f3e6d6e4":"predicted_vs_actual.plot(figsize=(22,8))\n\nplt.xlabel('Period')\nplt.ylabel('PV Power Output (kWH)')\nplt.title('Prediction results from random forest model on actual data')\n\nplt.show()","dde80f08":"from sklearn.linear_model import LinearRegression\n\nX = predicted_vs_actual['Actual'].values.reshape(-1, 1)  # values converts it into a numpy array\nY = predicted_vs_actual['Predicted'].values.reshape(-1, 1)  # -1 means that calculate the dimension of rows, but have 1 column\nlinear_regressor = LinearRegression()  # create object for the class\nlinear_regressor.fit(X, Y)  # perform linear regression\nY_pred = linear_regressor.predict(X)  # make predictions","1d05492b":"plt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\n\nplt.xlabel('Expected PV output (kWh)')\nplt.ylabel('Predicted PV output (kWh)')\nplt.title('Prediction results from random forest model on actual data')\n\nplt.show()","1af82fc8":"r_square = metrics.r2_score(X, Y_pred)\nprint('R-square Error associated with Random Forest Regression is:', r_square)","6d188afa":"test_target = predicted_vs_actual['Actual'].values\n\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(test_target, predictions))\nprint('Mean Squared Error:', metrics.mean_squared_error(test_target, predictions))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_target, predictions)))","b7653fd3":"predicted_vs_actual_daily = predicted_vs_actual.resample(\"D\").sum()","68ef2bf0":"actual_train = trainingdata['Bobcat_education_Dylan']\nactual_train = pd.DataFrame(actual_train)\nactual_train.columns = [\"Actual\"]","c341f427":"actual_train_daily = actual_train.resample(\"D\").sum()","0004575a":"predicted_vs_actual_plus_training = pd.concat([actual_train_daily, predicted_vs_actual_daily], sort=True)","b6d1ecec":"predicted_vs_actual_plus_training.plot(figsize=(22,8))\n\nplt.xlabel('Period')\nplt.ylabel('PV output (kWh)')\nplt.title('Actual vs Predicted')\n\nplt.show()","41d65261":"Correlation between feature parameters.","d2a1f757":"Data is sieved for site_id 'Bobcat' as there is only the presence of this kind of meter in the building of that site_id.","1b0bc44f":"## Use the model to predict for the *Test* period\n\nThe random forest regression model is used to predict the forecasted PV power output using the test features assigned","699ad72f":"Datasets are divided using the *datetime index* of the df.","404fdb9d":"# The PV Data Project\n\nCreated by Oh Jun Wei - A0162271M - submission for BPS5229 Individual Assignment\n\nSolar energy - the most promising (if not only viable) renewable energy source for electricity generation for Singapore, has garnered alot of tractions in recent years. Authorities has been taking proactive steps to ramp up its deployment such in to greater contribute to Singapore's energy security. In fact, CNA just (November 18 2020) reported a 20% growth in demand for solar energy in the country since the pandemic began. This notebook sets out to create a short-term output power forecasting of PV systems based on the tree-based ensemble method. \n\nFor this notebook, I will be using data set from the Building Data Genome Project 2 to build a prediction model based upon the 'Bobcat_education_Dylan' series.","18fde02c":"## Predicted vs Actual Full Plot  \n\nThe Predicted vs Actual plot is extended to include the training set - in this case the values of PV power output is resampled as a daily sum.","47ba4bed":"For the regression model, the notebook uses a input dataset that includes 1-h interval data of weather parameters (airTemperature, precipDepth1HR, windSpeed), time information and previous hour solar PV power output values. Based off literature, previous hourly value of PV output is an important parameter - hence its inclusion here. The output of the model is the next hour PV power output from the system.","9ef27e5d":"# Create Train and Test Datasets\n\nThe model is divided into train and test sets to predict PV power output. The historical PV power outputs and weather data will be used for short-term output power forecasting. For the regression model, nine months of data from January-September will be applied to predict the last three months of the year October-December.","9a211fe2":"# Practical Guidance\n\nIn this notebook, the feasibility of utilizing tree-based ensemble methods (random forests) to predict the hourly output from a photovoltaic system was evaluated. The capability of random forests trees for predicting the photovoltaic power produced has been verified with a relatively accurate prediction of the output.\n\nThe developed machine learning models can be applied to predict 1-h-ahead PV power generation based on different weather parameters, date time information and previous hour values of photovoltaic power output. The functionality of such forecast affords authorities to maximise the utility of PV generated energy against usage of electricity grid, based off weather fluctuations. It allows grid operators to manage electricity generation by making informed decisions, and hence, reduces cost and un- certainties.","a673b925":"The figure above illustrates the plots of hourly PV power output values predicted by RF model vs measured data for the actual dataset. The results clearly show the level of linear relationship to illustrate the model's capability to accurately predict PV power output. ","57137772":"## Hyperparameters Tuning","f8c4367b":"After creating a random forest regressor object, pass it to the cross_val_score() function which performs K-Fold cross validation on the given data and provides as an output, an error metric value, which can be used to determine the model performance.  \nThe mean MAE score of **1.84** in this case is considered low. ","0075e67b":"Since the predicted results are in nature a forecast, the values are lagged -1 entry to reflect the time occurence at which these predicted values will reflect on the PV's system hourly power output. The last index entry is filled by forward filling.  \nA comparison (predicted_vs_actual) df is computed in this case.","b90fd0bc":"# PV power output using Random Forest Regression [](http:\/\/)","0760aa3d":"The dfs are loaded - and filled, and it should parse the 'timestamp' index and set it into a datetime object.  \nAlso, the data are sliced to a time range of **Year 2016** for this model using the truncate function.","3e3f48f4":"To determine the optimal values to be used for the hyperparameters of the model."}}