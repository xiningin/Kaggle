{"cell_type":{"f6e7399f":"code","cccf4ca9":"code","67665ae3":"code","0038a82d":"code","71a0730f":"code","094628dd":"code","935d01bb":"code","8d41160f":"code","0de5c148":"code","610b38b3":"code","f2aabb16":"code","4136a996":"code","4b6a7264":"code","7573d778":"code","96e577f5":"code","d00fbddb":"code","d626af31":"code","e1896ffa":"code","3ca9f8e6":"code","71b6f738":"code","64fe3e38":"code","980ce32b":"code","d455b5ff":"code","06b72f2f":"code","6452bbc6":"code","e7448fc4":"code","8ccda7be":"code","ccc6441a":"code","f808d895":"code","a2b58cc3":"code","1eab0900":"code","8565fb5a":"code","df0290f0":"code","b4b92476":"code","21946397":"code","f38b5cc5":"code","11753f9a":"code","5abec253":"markdown","e5c3da04":"markdown","c877a587":"markdown","96961b7a":"markdown","f5b00120":"markdown","836996cd":"markdown","0c10e5af":"markdown","5e5abbc6":"markdown","8c99ef19":"markdown","cfa7ed6e":"markdown","f574dc3d":"markdown","8da564ec":"markdown","cf9168e4":"markdown","f0b6c16d":"markdown","d198b20a":"markdown","8267f5cc":"markdown","e3db9715":"markdown","bc4bc65d":"markdown","2c7414cf":"markdown","eeb10f01":"markdown","c6e56967":"markdown","9e51ca63":"markdown","5c43bbec":"markdown","162554c5":"markdown","79c0d9b6":"markdown","26789a9d":"markdown","24d77c8d":"markdown","48f6ef92":"markdown","827b0c25":"markdown","5f4431a8":"markdown","7790c039":"markdown"},"source":{"f6e7399f":"import re","cccf4ca9":"for i in dir(re):\n    print(i, end=\", \")","67665ae3":"print(len(dir(re)))","0038a82d":"# help(re)","71a0730f":"help(re.compile)","094628dd":"help(re.purge)","935d01bb":"phoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')\nmatch_obj = phoneNumRegex.search('My number is 415-555-4242.')\nprint('Phone number found: ' + match_obj.group())","8d41160f":"pattern = r\"Mango\"\nsequence = \"Mango\"\nif re.match(pattern, sequence):\n    print(\"Match!\")\nelse: \n    print(\"Not a match!\")","0de5c148":"pattern = r\"Mango\"\nsequence = \"Orange\"\nprint(re.match(pattern, sequence))","610b38b3":"re.search(r'M.n.o', 'Mango').group()","f2aabb16":"re.search(r'M\\wng\\w', 'Mango').group()","4136a996":"re.search(r'S\\Wgmail', 'S@gmail').group()","4b6a7264":"re.search(r'Eat\\scake', 'Eat cake').group()","7573d778":"re.search(r'M\\Sngo', 'Mango').group()","96e577f5":"re.search(r'Mang\\d', 'Mang0').group()","d00fbddb":"re.search(r'^Eat', 'Eat Rice').group()","d626af31":"re.search(r'Rice$', 'Eat Rice').group()","e1896ffa":"re.search(r'Number: [0-9]', 'Number: 8').group()","3ca9f8e6":"# Matches any character except 7\nre.search(r'Number: [^7]', 'Number: 9').group()","71b6f738":"re.search(r'\\A[A-R]ice', 'Rice').group()","64fe3e38":"re.search(r'\\b[A-R]ice', 'Rice').group()","980ce32b":"superRegex = re.compile(r'Super(wo)*man')\nmatch_obj1 = superRegex.search('The Adventures of Superman')\nmatch_obj1.group()\n","d455b5ff":"mo2 = superRegex.search('The Adventures of Superwoman')\nmo2.group()","06b72f2f":"mo3 = superRegex.search('The Adventures of Superwowowowoman')\nmo3.group()","6452bbc6":"superRegex = re.compile(r'Super(wo)+man')\nmatch_obj1 = superRegex.search('The Adventures of Superwoman')\nmatch_obj1.group()\n","e7448fc4":"match_obj2 = superRegex.search('The Adventures of Superwowowowoman')\nmatch_obj2.group()","8ccda7be":"match_obj3 = superRegex.search('The Adventures of Superman')\n# match_obj3.group()\nmatch_obj3==None","ccc6441a":"re.search(r'Colou?r', 'Color').group()","f808d895":"regexp = 'India?'\nword1 = re.match(regexp, 'Indi')\nprint(word1)\nword2 = re.match(regexp, 'India')\nprint(word2)","a2b58cc3":"re.search(r'\\d{9,10}', '0987654321').group()","1eab0900":"result = re.match(r'Rua', 'Rua Analytics')\nprint(result)","8565fb5a":"print(result.group(0))","df0290f0":"result = re.search(r'Analytics', 'Rua Analytics')\nprint(result.group(0))","b4b92476":"\nresult = re.findall(r'Rua', 'Rua Analytics Rua')\nprint(result)","21946397":"result=re.split(r'e','occurrences')\nprint(result)","f38b5cc5":"\n\nresult=re.split(r'\\s','It helps to get a list of all matching patterns')\nprint(result)","11753f9a":"result=re.sub(r'notes','projects','Kaggle is the place to do data science notes')\nprint(result)","5abec253":"`\\b` - Lowercase b. Matches only the beginning or end of the word.","e5c3da04":"`$` - Matches a pattern at the end of string.","c877a587":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\">Special Characters<\/h2>\n\n`^` | Matches the expression to its right at the start of a string. It matches every such instance before each `\\n` in the string.\n\n`$` | Matches the expression to its left at the end of a string. It matches every such instance before each `\\n` in the string.\n\n`.` | Matches any character except line terminators like `\\n` .\n\n`\\` | Escapes special characters or denotes character classes.\n\n`A|B` | Matches expression `A` or `B`. If `A` is matched first, `B` is left untried.\n\n`+` | Greedily matches the expression to its left 1 or more times.\n\n`*` | Greedily matches the expression to its left 0 or more times.\n\n`?` | Greedily matches the expression to its left 0 or 1 times. But if `?` is added to qualifiers (`+`, `*`, and `?` itself) it will perform matches in a non-greedy manner.\n\n`{m}` | Matches the expression to its left `m` times, and not less.\n\n`{m,n}` | Matches the expression to its left `m` to `n` times, and not less.\n\n`{m,n}?` | Matches the expression to its left `m` times, and ignores `n`.","96961b7a":"`[a-zA-Z0-9]` - Matches any letter from (a to z) or (A to Z) or (0 to 9). Characters that are not within a range can be matched by complementing the set. If the first character of the set is` ^`, all the characters that are not in the set will be matched.","f5b00120":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\">Wild Card Characters: Special Characters<\/h2>\n\nSpecial characters are characters which do not match themselves as seen but actually have a special meaning when used in a regular expression.","836996cd":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\">Character Classes (a.k.a. Special Sequences)<\/h2>\n\n`\\w` | Matches alphanumeric characters, which means `a-z`, `A-Z`, and `0-9`. It also matches the underscore,` _`.\n\n`\\d` | Matches digits, which means `0-9`.\n\n`\\D` | Matches any non-digits.\n\n`\\s` | Matches whitespace characters, which include the `\\t`, `\\n`, `\\r`, and space characters.\n\n`\\S`| Matches non-whitespace characters.\n\n`\\b` | Matches the boundary (or empty string) at the start and end of a word, that is, between `\\w` and `\\W`.\n\n`\\B` | Matches where `\\b` does not, that is, the boundary of `\\w` characters.\n\n`\\A` | Matches the expression to its right at the absolute start of a string whether in single or multi-line mode.\n\n`\\Z` | Matches the expression to its left at the absolute end of a string whether in single or multi-line mode.\n\n","0c10e5af":"`\\d` - Lowercase d. Matches decimal digit 0-9.","5e5abbc6":"`\\S` - Uppercase s. Matches any character not part of `\\s` (lowercase s).","8c99ef19":"`\\s` - Lowercase s. Matches a single whitespace character like: space, newline, tab, return.","cfa7ed6e":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\">Matching Zero or More with the Star<\/h2>\n\nThe * (called the star or asterisk) means \u201cmatch zero or more\u201d\u2014the group that precedes the star can occur any number of times in the text. It can be completely absent or repeated over and over again","f574dc3d":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\">Groups<\/h2>\n\n`( )` | Matches the expression inside the parentheses and groups it.\n\n`(? )` | Inside parentheses like this, `?` acts as an extension notation. Its meaning depends on the character immediately to its right.\n\n`(?PAB)` | Matches the expression `AB`, and it can be accessed with the group name.\n\n`(?aiLmsux)` | Here, `a`, `i`, `L`, `m`, `s`, `u`, and `x` are flags:\n\n- a \u2014 Matches ASCII only\n- i \u2014 Ignore case\n- L \u2014 Locale dependent\n- m \u2014 Multi-line\n- s \u2014 Matches all\n- u \u2014 Matches unicode\n- x \u2014 Verbose\n\n`(?:A)` | Matches the expression as represented by `A`, but unlike `(?PAB)`, it cannot be retrieved afterwards.\n\n`(?#...)` | A comment. Contents are for us to read, not for matching.\n\n`A(?=B)` | Lookahead assertion. This matches the expression `A` only if it is followed by `B`.\n\n`A(?!B)` | Negative lookahead assertion. This matches the expression `A` only if it is not followed by `B`.\n\n`(?<=B)A` | Positive lookbehind assertion. This matches the expression `A` only if `B` is immediately to its left. This can only matched fixed length expressions.\n\n`(?<!B)A`| Negative lookbehind assertion. This matches the expression `A` only if `B` is not immediately to its left. This can only matched fixed length expressions.\n\n`(?P=name)` | Matches the expression matched by an earlier group named \u201cname\u201d.\n\n`(...)\\1` | The number `1` corresponds to the first group to be matched. If we want to match more instances of the same expresion, simply use its number instead of writing out the whole expression again. We can use from `1` up to `99` such groups and their corresponding numbers.","8da564ec":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\">Basic Patterns: Ordinary Characters<\/h2>\n\nYou can easily tackle many basic patterns in Python using the ordinary characters. Ordinary characters are the simplest regular expressions. They match themselves exactly and do not have a special meaning in their regular expression syntax.","cf9168e4":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\"> What is a Regular Expression?<\/h2>\n<h5 style=\"font-family: 'Lucida Console', 'Courier New', monospace;\">It's a string pattern written in a compact syntax, that allows us to quickly check whether a given string matches or contains a given pattern.<\/h5>\n<p style=\"font-family: 'Lucida Console', 'Courier New', monospace;\">A <code>regular expression<\/code> (<code>regex<\/code> or <code>regexp<\/code> for short) is a sequence of characters defining a search pattern, that is, a pattern describing a set of strings. Such patterns can be used to search, edit, and manipulate texts. They can either check if a whole string or its substring matches the given pattern or replace the substring with another one.\n<\/p>\n<p style=\"font-family: 'Lucida Console', 'Courier New', monospace;\">The simplest example of using a regular expression is when we search for some word in a text file or on a web page. For example, if we look for the word <code>love<\/code>, the string <code>love<\/code> becomes a simple regular expression \u2014 a search pattern that corresponds only to the word <code>love<\/code> and nothing else. More complicated regular expressions will be able to match a larger number of strings.<\/p>\n\n<p style=\"font-family: 'Lucida Console', 'Courier New', monospace;\">Regular Expressions are used in various tasks such as data pre-processing, rule-based information mining systems, pattern matching, text feature engineering, web scraping, data extraction, etc.<\/p>\n\n","f0b6c16d":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\">Popular `re` module Functions<\/h2>\n\n`re.findall(A, B)` | Matches all instances of an expression `A` in a string `B` and returns them in a list.\n\n`re.search(A, B)` | Matches the first instance of an expression `A` in a string `B`, and returns it as a re match object.\n\n`re.split(A, B)` | Split a string B into a list using the delimiter `A`.\n\n`re.sub(A, B, C)` | Replace `A` with `B` in the string `C`.","d198b20a":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\">Sets<\/h2>\n\n`[ ]` | Contains a set of characters to match.\n\n`[amk]` | Matches either `a`, `m`, or `k`. It does not match amk.\n\n`[a-z]` | Matches any alphabet from `a` to `z`.\n\n`[a\\-z]` | Matches `a`, `-`, or `z`. It matches `-` because `\\` escapes it.\n\n`[a-]` | Matches `a` or `-`, because `-` is not being used to indicate a series of characters.\n\n`[-a]` | As above, matches `a` or `-`.\n\n`[a-z0-9]` | Matches characters from `a` to `z` and also from `0` to `9`.\n\n`[(+*)]` | Special characters become literal inside a set, so this matches `(`, `+`, `*`, and `)`.\n\n`[^ab5]` | Adding `^ `excludes any character in the set. Here, it matches characters that are not `a`, `b`, or `5`.","8267f5cc":"## re.findall (pattern, string):\nIt helps to get a list of all matching patterns. It has no constraints of searching from start or end. If we will use method findall to search \u2018Rua\u2019 in given string it will return both occurrence of Rua. While searching a string, I would recommend you to use `re.findall()` always, it can work like `re.search()` and `re.match()` both.","e3db9715":"`{x}` - Repeat exactly x number of times.\n\n`{x,}` - Repeat at least x times or more.\n\n`{x, y}` - Repeat at least x times but no more than y times.","bc4bc65d":"`.` - A period. Matches any single character except newline character.","2c7414cf":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\"> Regular Expressions in Python<\/h2>\n<p style=\"font-family: 'Lucida Console', 'Courier New', monospace;\">In Python, regular expressions are supported by the <code>re<\/code> module. That means that if you want to start using them in your Python scripts, you have to <code>import<\/code> this module<\/p>","eeb10f01":"## re.match(pattern, string):\nThis method finds match if it occurs at start of the string. For example, calling `match()` on the string \u2018Rua Analytics\u2019 and looking for a pattern \u2018Rua\u2019 will match. However, if we look for only Analytics, the pattern will not match. ","c6e56967":"## re.sub(pattern, repl, string):\nIt helps to search a pattern and replace with a new sub string. If the pattern is not found, string is returned unchanged.","9e51ca63":"`^` - Caret. Matches a pattern at the start of the string.","5c43bbec":"## Matching One or More with the Plus\nWhile * means \u201cmatch zero or more,\u201d the + (or plus) means \u201cmatch one or more.\u201d Unlike the star, which does not require its group to appear in the matched string, the group preceding a plus must appear at least once. It is not optional. ","162554c5":"## The question mark\nThe question mark `?`, unlike the dot, doesn't replace any character by itself. It is a quantifier that basically means \"the previous character can be absent\". In other words, the question mark `?` signals that the character before it can occur once or zero times in a string to match the pattern","79c0d9b6":"## re.search(pattern, string):\nIt is similar to` match()` but it doesn\u2019t restrict us to find matches at the beginning of the string only.","26789a9d":"## re.split(pattern, string, [maxsplit=0]):\nThis methods helps to split string by the occurrences of given pattern.","24d77c8d":"`\\W` - Uppercase w. Matches any character not part of `\\w`(lowercase w).","48f6ef92":"<h2 style=\"text-align:center;background-color: lightgrey;color: blue;font-family: 'Lucida Console', 'Courier New', monospace;\">Matching Regex Objects<\/h2>\n\nA Regex object\u2019s `search()` method searches the string it is passed for any matches to the regex. The `search()` method will return None if the regex pattern is not found in the string. If the pattern is found, the `search()` method returns a Match object. Match objects have a `group()` method that will return the actual matched text from the searched string.","827b0c25":"`\\w` - Lowercase w. Matches any single letter, digit or underscore.","5f4431a8":"`\\A` - Uppercase a. Matches only at the start of the string. Works across multiple lines as well.","7790c039":"The `match()` function returns a match object if the text matches the pattern. Otherwise it returns `None`."}}