{"cell_type":{"a3430de5":"code","a1be623d":"code","f09fe8e1":"code","2b23a436":"code","2a82a690":"code","12e0d323":"code","ecbe95c8":"code","c83c4ee6":"markdown","f425ae5d":"markdown","90a6eff5":"markdown","b813596c":"markdown","5fd85964":"markdown","71f1e063":"markdown","eed06831":"markdown","7ce0eb3c":"markdown"},"source":{"a3430de5":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import RMSprop\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport os","a1be623d":"training_images_path = '..\/input\/dogs-cats-images\/dataset\/training_set'\nvalidation_images_path = '..\/input\/dogs-cats-images\/dataset\/test_set'","f09fe8e1":"# Defining training image generator with all the augmentation sample parameters\n# This ensures correct classification for different image in validation\ntrain_datagen = ImageDataGenerator(\n    rescale=1\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n\n# Defining validation image generator\n# We don't pass augmentation parameters as we model haven't seen this data earlier\nvalidation_generator = ImageDataGenerator(rescale=1\/255)\n\n# Loading training data from path\ntrain_generator = train_datagen.flow_from_directory(\n    training_images_path,\n    target_size=(150, 150),\n    batch_size=40,\n    class_mode='binary'\n)\n\n# Loading validation data from path\nvalidation_generator = validation_generator.flow_from_directory(\n    validation_images_path,\n    target_size=(150, 150),\n    batch_size=40,\n    class_mode='binary'\n)","2b23a436":"model = tf.keras.models.Sequential([\n    # First Convolution\n    tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    # Second Convolution\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    # Third Convolution\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    # Flatten\n    tf.keras.layers.Flatten(),\n    # Dense layer\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(\n    loss='binary_crossentropy',\n    optimizer=RMSprop(lr=0.001),\n    metrics=['accuracy']\n)","2a82a690":"model.summary()","12e0d323":"history = model.fit(\n    train_generator,\n    steps_per_epoch=200,\n    epochs=20,\n    verbose=1,\n    validation_data=validation_generator\n)","ecbe95c8":"# Getting the accuracy and loss\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\n# Plotting the accuracy\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'bo', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\n\n# Plotting the loss\nplt.figure()\n\nplt.plot(epochs, loss, 'bo', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","c83c4ee6":"## Path\nWe define path to training and test data. The path to the folder must contain directories of classes.","f425ae5d":"## Importing Libraries","90a6eff5":"#### Training model\nInstead of training and validation data, we pass their generator.","b813596c":"## Loss and Accuracy\nLets plot loss and accuracy across epochs that is stored in the history object while training.\n\n> Observing the graph, you can see that the training and validation accuracy rises till 10 epochs then the curves flatten.\nSimilarly you can see that the training and validation loss decreases till 10 epochs and the curve flattens.\nNote that if the training accuracy increases and validation decreases, that is an indication of **Overfitting**.","5fd85964":"# Tensorflow Keras Tutorial - Binary Classification (Part 3)\n\n**What is Keras?** Keras is a wrapper that allows you to implement Deep Neural Network without getting into intrinsic details of the Network. It can use Tensorflow or Theano as backend. This tutorial series will cover Keras from beginner to intermediate level.\n\n<p style=\"color:red\">IF YOU HAVEN'T GONE THROUGH THE PART 1 and 2 OF THIS TUTORIAL, IT'S RECOMMENDED FOR YOU TO GO THROUGH THAT FIRST.<\/p>\n[LINK TO PART 1](https:\/\/www.kaggle.com\/akashkr\/tf-keras-tutorial-neural-network-part-1)<br>\n[LINK TO PART 2](https:\/\/www.kaggle.com\/akashkr\/tf-keras-tutorial-cnn-part-2)<br>\n\nIn this part we will cover:\n* Using Image Data Generator\n* Using Augmentation to increase variety in Dataset\n* Plotting Accuracy and Loss for Training and Validation","71f1e063":"## Image Data Generator\nWe define **Image Data Generator** which takes image data from folder and structures it to feed into our model.<br>\nThere are two steps for initialising a data generator. First is setting the preprocessing parameters and then defining the path and the size of the data.\n\n### ImageDataGenerator\n`ImageDataGenerator` class generates batches of tensor image data with real-time data augmentation.\n\n> * **rescale** Factor to be multiplied to each pixel value\n* **rotation_range** Images sampled after rotating to a maximum of + and - rotation_range\n* **width_shift_range** Images sampled after randomly shifting to left or right at given percentage\n* **height_shift_range** Images sampled after randomly shifting to above or below at given percentage\n* **shear_range** Images sampled after rotation on X, Y and Z axis\n* **zoom_range** Zooms image IN and OUT at given percentage\n* **horizontal_flip** Flip horizontally and samples\n* **fill_mode** Fill mode of blank space after transformation\n\n### ImageDataGenerator.flow_from_directory()\n`ImageDataGenerator.flow_from_directory()` function to generate data using path.\n> * **path** Image directory\n* **target_size** Dimension to scale each image before training\n* **batch_size** Size into which image data is divided to feed in model\n* **class_mode** Target variable type","eed06831":"**IN THE NEXT TUTORIAL WE WILL SEE HOW TO LOAD A PRE-TRAINED MODEL AND USE IT FOR MULTICLASS CLASSIFICATION.**\n\n> # PART 4 [Using Pretrained Models and Multiclass Classification](https:\/\/www.kaggle.com\/akashkr\/tf-keras-tutorial-pretrained-models-part-4)","7ce0eb3c":"## Modelling\nTo see the details of layers and models, see the PART 1 and PART 2 of this tutorial."}}