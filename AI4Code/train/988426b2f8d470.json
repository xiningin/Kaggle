{"cell_type":{"bffde323":"code","d54eb387":"code","e75f1ae4":"code","24dd556f":"code","344a497a":"code","fccaec58":"code","e4eeaa7c":"code","a20f4581":"code","cd9ed609":"code","f17c45ec":"code","31ce5054":"code","ff80207a":"code","8cdc521d":"code","5ea47af5":"code","226e27ef":"code","836d59a8":"code","e002d22d":"code","5fddaddf":"markdown","75681a8a":"markdown","6bde5827":"markdown","1f15c829":"markdown","65d4d5a9":"markdown","0cc07bc6":"markdown"},"source":{"bffde323":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d54eb387":"import numpy as np\nimport pandas as pd\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport gc\nfrom scipy.stats import skew\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import MiniBatchKMeans\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer","e75f1ae4":"import datatable as dt","24dd556f":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","344a497a":"%%time\n# read dataframe\n\nX_test = pd.read_csv('..\/input\/tps-sep21-standardscaled-dataset\/TPS_Sep21_Test_StandardScaled.csv')\nX_train = pd.read_csv('..\/input\/tps-sep21-standardscaled-dataset\/TPS_Sep21_Train_StandardScaled.csv')\n\n\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","fccaec58":"\n\n### REDUCE MEMORY USAGE\nX_train = reduce_mem_usage(X_train)\nX_test = reduce_mem_usage(X_test)\ngc.collect()\n\n","e4eeaa7c":"X_test","a20f4581":"X_train.drop(['Unnamed: 0'], axis=1, inplace=True)\nX_test.drop(['Unnamed: 0'], axis=1, inplace=True)","cd9ed609":"seed=14\n\n\nparam = {\n'objective': 'binary',\n #'n_estimators': 10000,\n 'learning_rate': 0.05,\n 'metric': 'auc',\n #'early_stopping_rounds': 1000,\n 'reg_alpha': 4.731615831093071,\n 'reg_lambda': 0.37831795775990107,\n 'num_leaves': 8,\n 'min_child_samples': 77,\n 'max_depth': 5,\n 'colsample_bytree': 0.19053128771270178,\n 'min_data_per_group': 164\n}\n# param = {\n#    #'n_estimators': 6630, \n#     'objective': 'binary',\n#         'boosting': 'gbdt',\n#         'metric' : 'auc',\n#     'max_depth': 3, \n#     'learning_rate': 0.053625067203773684,\n#     'reg_alpha': 4.618041066261469,\n#     'reg_lambda': 7.9389723810790604,\n#     'num_leaves': 203,\n#     'min_data_per_group': 83, \n#     'min_child_samples': 141, \n#     'colsample_bytree': 0.13048987522123276   \n# }\n# params = {\n#         'learning_rate': 0.13572437900113307,        \n#         'lambda_l1': 2.154360665259325,\n#         'lambda_l2': 6.711089761523827,\n#         'num_leaves': 769,\n#         '#min_sum_hessian_in_leaf': 20.44437160769411,\n#         'feature_fraction': 0.7921473067441019,\n#         'feature_fraction_bynode': 0.8083803860191322,\n#         'bagging_fraction': 0.9726755660563261,\n#         'bagging_freq': 42,\n#         'min_data_in_leaf': 690,\n#         'max_depth': 3,\n#         'seed': seed,\n#         'feature_fraction_seed': seed,\n#         'bagging_seed': seed,\n#         'drop_seed': seed,\n#         'data_random_seed': seed,\n#         'objective': 'binary',\n#         'boosting': 'gbdt',\n#         'metric' : 'auc',\n#         'verbosity': -1,\n#         'n_jobs': -1,\n#     }  \n# param = {'metric' : 'auc',\n#     'max_depth' : 3,\n#     'num_leaves' : 7,\n#    # 'n_estimators' : 5000,\n#     'colsample_bytree' : 0.3,\n#     'subsample' : 0.5,\n#     'random_state' : 7014,\n#     'reg_alpha' : 18,\n#     'reg_lambda' : 17,\n#     'learning_rate' : 0.055,\n#    # 'device' : 'gpu',\n#     'objective' : 'binary'\n#          }\n# param = {'metric' : 'auc',\n#     'max_depth' : 3,\n#     'num_leaves' : 7,\n#    # 'n_estimators' : 5000,\n#     'colsample_bytree' : 0.3,\n#     'subsample' : 0.5,\n#     'random_state' : 7014,\n#     'reg_alpha' : 18,\n#     'reg_lambda' : 17,\n#     'learning_rate' : 0.0055,\n#    # 'device' : 'gpu',\n#     'objective' : 'binary'\n#          }\n\n\n# param = {\n#     'min_data_in_leaf': 106, \n#     'num_leaves': 500, \n#     'learning_rate': 0.08,\n#     'min_child_weight': 0.03454472573214212,\n#     'bagging_fraction': 0.4181193142567742, \n#     'feature_fraction': 0.3797454081646243,\n#     'reg_lambda': 0.6485237330340494,\n#     'reg_alpha': 0.3899927210061127,\n#     'max_depth': -1, \n#     'objective': 'binary',\n#     'seed': SEED,\n#     'feature_fraction_seed': SEED,\n#     'bagging_seed': SEED,\n#     'drop_seed': SEED,\n#     'data_random_seed': SEED,\n#     'boosting_type': 'gbdt',\n#     #'verbose': 1,\n#     'metric':'auc',\n#     'force_col_wise':True\n#     }\n\n# param ={\n    \n#         'num_leaves': 10,\n#         'max_bin': 127,\n#         'min_data_in_leaf': 11,\n#         'learning_rate': 0.02,\n#         'min_sum_hessian_in_leaf': 0.00245,\n#         'bagging_fraction': 1.0, \n#         'bagging_freq': 5, \n#         'feature_fraction': 0.05,\n#         'lambda_l1': 4.972,\n#         'lambda_l2': 2.276,\n#         'min_gain_to_split': 0.65,\n#         'max_depth': 14,\n#         'save_binary': True,\n#         'seed': 1337,\n#         'feature_fraction_seed': 1337,\n#         'bagging_seed': 1337,\n#         'drop_seed': 1337,\n#         'data_random_seed': 1337,\n#         'objective': 'binary',\n#         'boosting_type': 'gbdt',\n#         'verbose': 1,\n#         'metric': 'auc',\n#         'is_unbalance': True,\n#         'boost_from_average': False,\n# }","f17c45ec":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import RepeatedKFold\nimport lightgbm as lgb\nfrom sklearn import metrics\nimport gc","31ce5054":" X_train.columns","ff80207a":"X_train.claim.values","8cdc521d":"%%time\nnfold = 15\n\nclaim = 'claim'\npredictors = X_train.loc[:, ~X_train.columns.isin(['claim','id'])].columns.values.tolist()\n\nskf = StratifiedKFold(n_splits=nfold, shuffle=True, random_state=14)\n#skf = RepeatedKFold(n_splits=nfold,  n_repeats=2, random_state=14)\noof = np.zeros(len(X_train))\npredictions = np.zeros(len(X_test))\n\ni = 1\nfor train_index, valid_index in skf.split(X_train, X_train.claim.values):\n    print(\"\\nfold {}\".format(i))\n    xg_train = lgb.Dataset(X_train.iloc[train_index][predictors].values,\n                           label=X_train.iloc[train_index][claim].values,\n                           feature_name=predictors,\n                           free_raw_data = False\n                           )\n    xg_valid = lgb.Dataset(X_train.iloc[valid_index][predictors].values,\n                           label=X_train.iloc[valid_index][claim].values,\n                           feature_name=predictors,\n                           free_raw_data = False\n                           )   \n\n    \n    clf = lgb.train(param, xg_train, 10000, valid_sets = [xg_valid], verbose_eval=50, early_stopping_rounds = 1000)\n    oof[valid_index] = clf.predict(X_train.iloc[valid_index][predictors].values, num_iteration=clf.best_iteration) \n    \n    predictions += clf.predict(X_test[predictors], num_iteration=clf.best_iteration) \/ nfold\n    i = i + 1\n\nprint(\"\\n\\nCV AUC: {:<0.5f}\".format(metrics.roc_auc_score(X_train.claim.values, oof)))","5ea47af5":"test_df = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')","226e27ef":"test_df.head()","836d59a8":"sub_df = pd.DataFrame({\"id\": test_df.id.values})\nsub_df[\"claim\"] = predictions\nsub_df[:10]","e002d22d":"sub_df.to_csv(\"lightgbm_cpu_new.csv\", index=False)","5fddaddf":"# Dataset was processed as suggested in this [notebook](https:\/\/www.kaggle.com\/realtimshady\/single-simple-lightgbm) with standard scaler. If you want to try out new type of scalar , you can use this [dataset](https:\/\/www.kaggle.com\/towhidultonmoy\/tps-sep2021-dataset).It is imputed but not scaled.\n","75681a8a":"# Making a funtion to reduce the memory usage as suggested by this [notebook](https:\/\/www.kaggle.com\/lucamassaron\/autogluon-for-tabular-playground-sep-2021).","6bde5827":"# Importing necessary libraries ","1f15c829":"# Where did I get this parameters? \n- I used optuna and also searched over kaggle to find the best parameters. I also had to change the parameters and see which parameters gave me the best results.","65d4d5a9":"# The scaled dataset had an extra column named 'Unnamed: 0' .As it is not necessary,I am just dropping it.","0cc07bc6":"**Here are some results, that I got changing some parameters. \nI got atleast0.15 increase of the Overall CV in the leaderboard.**\n\nOverall CV: #0.81423 LB:0.81670\n\n#for depth=3 #0.0.81434 LB: 0.81685\n\n#lr=0.05 Overall CV:0.81450\n\n#split=10 Overall CV:0.81581\n\n#split=10 Overall CV:0.81632 LB:0.81809\n\n#lr=0.06 Overall CV:0.81628\n"}}