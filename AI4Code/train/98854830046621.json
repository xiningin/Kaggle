{"cell_type":{"0c955c2f":"code","e55eb8c1":"code","907b3c6f":"code","c4bea5d0":"code","167700ea":"code","d306aa6d":"code","c1813831":"code","0e3d6126":"code","129baf1a":"code","74fd1368":"code","d8844fec":"code","fca4bffe":"code","f2835cac":"code","a8cc96ee":"code","6db5a1aa":"code","cac907f4":"code","4b9f4041":"code","dd275a05":"code","e271a34e":"code","535a9f0c":"code","4101f300":"code","28cd28c0":"code","9807467f":"code","c0e6254b":"code","6b600d03":"code","9a15a600":"code","ac323b5e":"code","e1fe4d21":"code","02ef163a":"code","40556ced":"code","5d7a2938":"markdown","1afd2142":"markdown","e56c8151":"markdown","c330ce7a":"markdown","9c4242a0":"markdown","459b7f26":"markdown","d916fbc4":"markdown","3326b072":"markdown","cb539c32":"markdown"},"source":{"0c955c2f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e55eb8c1":"import plotly \nimport matplotlib.pyplot as plt\nimport re \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport joblib\nfrom nltk.tokenize import RegexpTokenizer\nimport nltk\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import confusion_matrix \nfrom imblearn.combine import SMOTETomek\nfrom wordcloud import WordCloud\nimport plotly.graph_objects as go\n\nnltk.download('stopwords')\n\n\nstop_words = set(stopwords.words(\"english\"))\ndefault_stemmer = PorterStemmer()\ndefault_stopwords = stopwords.words('english')\ndefault_tokenizer=RegexpTokenizer(r\"\\w+\")","907b3c6f":"df = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\") \ndf.head()","c4bea5d0":"df.shape","167700ea":"df.columns","d306aa6d":"df.dtypes","c1813831":"df_target = df[\"target\"].value_counts()\nfig = go.Figure([go.Pie(labels=df_target.index, values=df_target.values\n                        ,hole=0.5)])  # can change the size of hole \n\nfig.update_traces(hoverinfo='label+percent', textinfo='percent', textfont_size=15)\nfig.update_layout(title=\"Disaster Tweets target columns distribution\",title_x=0.5)\nfig.show()","0e3d6126":"df_columns = df.columns.tolist()\nnull_value_counts = df[df_columns].isnull().sum()\n\nfig = go.Figure(go.Bar(\n    x=null_value_counts.index,y=null_value_counts.values,text=null_value_counts.values,\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Null value counts',xaxis_title=\"Column name\",yaxis_title=\"Counts of null values\")\nfig.show()","129baf1a":"df['keyword'] = df['keyword'].astype(str)\ndf['text'] = df[['keyword', 'text']].apply(lambda x: ' '.join(x), axis = 1) ","74fd1368":"df = df.drop([\"location\",\"keyword\"],axis = 1)","d8844fec":"def clean_text(text, ):\n        if text is not None:\n        #exclusions = ['RE:', 'Re:', 're:']\n        #exclusions = '|'.join(exclusions)\n                text = re.sub(r'[0-9]+','',text)\n                text =  text.lower()\n                text = re.sub('re:', '', text)\n                text = re.sub('-', '', text)\n                text = re.sub('_', '', text)\n                text = re.sub(r'^https?:\\\/\\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)\n                text = re.sub(r'\\S*@\\S*\\s?', '', text, flags=re.MULTILINE)\n        # Remove text between square brackets\n                text =re.sub('\\[[^]]*\\]', '', text)\n        # removes punctuation\n                text = re.sub(r'[^\\w\\s]','',text)\n                text = re.sub(r'\\n',' ',text)\n                text = re.sub(r'[0-9]+','',text)\n                #text = re.sub(r'[0-9]+','',text)\n        # strip html \n                p = re.compile(r'<.*?>')\n                text = re.sub(r\"\\'ve\", \" have \", text)\n                text = re.sub(r\"can't\", \"cannot \", text)\n                text = re.sub(r\"n't\", \" not \", text)\n                text = re.sub(r\"I'm\", \"I am\", text)\n                text = re.sub(r\" m \", \" am \", text)\n                text = re.sub(r\"\\'re\", \" are \", text)\n                text = re.sub(r\"\\'d\", \" would \", text)\n                text = re.sub(r\"\\'ll\", \" will \", text)\n        \n                text = p.sub('', text)\n\n        def tokenize_text(text,tokenizer=default_tokenizer):\n            token = default_tokenizer.tokenize(text)\n            return token\n        \n        def remove_stopwords(text, stop_words=default_stopwords):\n            tokens = [w for w in tokenize_text(text) if w not in stop_words]\n            return ' '.join(tokens)\n\n        def stem_text(text, stemmer=default_stemmer):\n            tokens = tokenize_text(text)\n            return ' '.join([stemmer.stem(t) for t in tokens])\n\n        text = stem_text(text) # stemming\n        text = remove_stopwords(text) # remove stopwords\n        #text.strip(' ') # strip whitespaces again?\n\n        return text","fca4bffe":"df['text'] = df['text'].apply(clean_text)\n","f2835cac":"tweet_text_list = df.text.tolist()\ntweet_text_string = ''.join(tweet_text_list)","a8cc96ee":"high_freq_word = pd.Series(' '.join(df['text']).split()).value_counts()[:20]","6db5a1aa":"fig = go.Figure(go.Bar(y=high_freq_word.index, x=high_freq_word.values,orientation=\"h\",marker={'color': high_freq_word.values,'colorscale': 'Viridis'} ))\nfig.update_layout(title_text='Search most frequent word use in text column',xaxis_title=\"Count\",yaxis_title=\"Words\")\nfig.show()","cac907f4":"wordcloud_ip = WordCloud(\n                      background_color='black',\n                      margin=3,\n                      width=1800,\n                      height=1400,\n                      max_words=200\n                     ).generate(tweet_text_string)\n\nplt.figure( figsize=(20,10) )\nplt.imshow(wordcloud_ip)","4b9f4041":"cv = TfidfVectorizer(max_features = 1000)\nx = cv.fit_transform(df['text'])\ndf1 = pd.DataFrame(x.toarray(), columns=cv.get_feature_names())\ndf.drop([\"text\"], axis=1, inplace=True)\nmain_df = pd.concat([df,df1], axis=1)","dd275a05":"main_df.head()","e271a34e":"Y = main_df.iloc[:,1]\nX = main_df.iloc[:,2:]","535a9f0c":"rfc = RandomForestClassifier(n_jobs=3,oob_score=True,n_estimators=2000,criterion=\"entropy\")\nmodel=rfc.fit(X,Y)","4101f300":"rfc.score(X,Y)","28cd28c0":"rfc_predict = rfc.predict(X)","9807467f":"print(classification_report(Y, rfc_predict))","c0e6254b":"confusion_matrix(Y, rfc_predict)","6b600d03":"test = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\",usecols=[\"text\",\"id\"])\ntest.shape","9a15a600":"test['text'] = test['text'].apply(clean_text)\nvect = cv.transform(test['text']).toarray()\ntest[\"target\"] = rfc.predict(vect)","ac323b5e":"submission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\",usecols=[\"id\"])\nsubmission","e1fe4d21":"submission = submission.set_index('id').join(test.set_index('id'))\nsubmission = submission.drop([\"text\"],axis=1)","02ef163a":"submission[\"target\"].value_counts()","40556ced":"submission.to_csv(\"submission.csv\")","5d7a2938":"# Disaster Prediction via tweets\n\n<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">navigation<\/h3>\n\n* [1. Library](#1)\n* [2. Data reading](#2)\n* [3. Data preprocessing and visulization](#3)\n* [4. Text cleaning](#4)\n* [5. Simple sentiment analysis and Create wordcloud](#5)\n* [6. vectorization](#6)\n* [7. Model fitting and Predication, Get clasification report](#7)\n* [8. Test Model on test file adn sumitted in sumbision file](#8)","1afd2142":"<a id=\"2\"><\/a>\n\n# Data reading","e56c8151":"<a id=\"4\"><\/a>\n\n# Text cleaning","c330ce7a":"<a id=\"1\"><\/a>\n\n# Library","9c4242a0":"<a id=\"3\"><\/a>\n\n# Data preprocessing and visulization","459b7f26":"<a id=\"7\"><\/a>\n\n# Model fitting and Predication, Get clasification report","d916fbc4":"<a id=\"8\"><\/a>\n\n# Test Model on test file and sumitted in sumbision file","3326b072":"<a id=\"6\"><\/a>\n\n# Vectorization","cb539c32":"<a id=\"5\"><\/a>\n\n# Simple sentiment analysis and Create wordcloud"}}