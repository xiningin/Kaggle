{"cell_type":{"83611a46":"code","4894e96e":"code","f4cbf03c":"code","abaaa1c9":"code","35cc774d":"code","a1624b82":"code","6b4b465b":"code","6b745e75":"code","e27fbcbb":"code","5b42e8cd":"code","1ccd65ca":"code","21ad12a1":"code","dd36c7b7":"code","eb518360":"code","07a5667d":"code","f16a5ae9":"markdown"},"source":{"83611a46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4894e96e":"! pip install pyspark","f4cbf03c":"from pyspark.sql.session import SparkSession\nfrom pyspark.sql import functions as f\nfrom pyspark.sql.types import FloatType\nfrom pyspark.sql.functions import col, when\nfrom pyspark.sql.functions import udf\nfrom pyspark.ml.feature import StringIndexer, OneHotEncoder, VectorAssembler\nfrom pyspark.ml.feature import StopWordsRemover, RegexTokenizer\nfrom pyspark.ml.feature import HashingTF, IDF, Tokenizer, CountVectorizer, Word2Vec\nfrom pyspark.sql import Row\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.classification import LogisticRegression\n\nspark = SparkSession.builder.appName(\"NLP\").config(\"spark.executor.memory\",\"8g\").getOrCreate()","abaaa1c9":"path_train = \"..\/input\/it2034ch1502-nlp\/train.csv\"\npath_test = \"..\/input\/it2034ch1502-nlp\/test.csv\"","35cc774d":"train = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(path_train).select('id','text','polarity')\ntest = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(path_test).select('id','text')","a1624b82":"train.show(5, False)","6b4b465b":"user_regex = r\"(@\\w{1,15})\"\nhashtag_replace_regex = \"#(\\w{1,})\"\nurl_regex = r\"((https?|ftp|file):\\\/{2,3})+([-\\w+&@#\/%=~|$?!:,.]*)|(www.)+([-\\w+&@#\/%=~|$?!:,.]*)\"\nemail_regex = r\"[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{1,}\"\ni_regex = r\"i \"\n\ndef cleaning_data(data):\n    data = (data.withColumn(\"text\",f.regexp_replace(f.col(\"text\"), user_regex, \"\")) \n                .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), hashtag_replace_regex, \"$1\"))\n                .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), url_regex, \"\")) \n                .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), email_regex, \"\"))\n                .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), \"[^a-zA-Z]\", \" \"))\n                .withColumn(\"text\",f.regexp_replace(f.col(\"text\"), \" +\", \" \"))\n                .withColumn(\"text\",f.trim(f.col(\"text\")))\n                .withColumn(\"text\",f.lower(f.col(\"text\")))\n                .filter(f.col(\"text\") != \"\"))\n    return data","6b745e75":"train = cleaning_data(train)\ntest = cleaning_data(test)","e27fbcbb":"regexTokenizer = RegexTokenizer(inputCol=\"text\", outputCol=\"words\", pattern=\"\\\\W\")\nstopwordsRemover = StopWordsRemover(inputCol=\"words\", outputCol=\"words_res\", stopWords=StopWordsRemover.loadDefaultStopWords(\"english\"))\nhashtf = HashingTF(numFeatures=2**18, inputCol=\"words_res\", outputCol='tf')\nidf = IDF(inputCol='tf', outputCol=\"features\", minDocFreq=5) \nlr = LogisticRegression(maxIter=150, regParam = 0.005, featuresCol=\"features\", labelCol=\"polarity\")\n\npipeline = Pipeline(stages=[regexTokenizer, stopwordsRemover, hashtf, idf, lr])\n\nmodel = pipeline.fit(train)","5b42e8cd":"predictions = model.transform(test).select('id', 'text', 'probability', 'prediction')","1ccd65ca":"from textblob import TextBlob\n\ndef get_polarity(str):\n    return TextBlob(str).sentiment.polarity\n\nudf_1 = udf(get_polarity, FloatType())\npredictions = predictions.withColumn('sentiment', udf_1(col('text')))\n\npredictions = predictions.withColumn('polarity',when(col('sentiment')<0, 0).when(col('sentiment')==0, 2).otherwise(4))","21ad12a1":"predictions = predictions.withColumn('prob', col('probability').cast(\"string\").substr(2,4).cast(\"float\"))","dd36c7b7":"predictions.show()","eb518360":"predictions = predictions.withColumn('polarity', when((col('polarity') == 4) & (col('prob') > 0.62),2).otherwise(col('polarity')))\n\npredictions = predictions.withColumn('polarity', when((col('polarity') == 2) & (col('prob') > 0.72),0).otherwise(col('polarity')))","07a5667d":"result = predictions.select('id','polarity').toPandas()\nresult.head(5)\nresult.to_csv('result_v8.0.csv', header=True, index=False)","f16a5ae9":"Th\u00e0nh vi\u00ean:\n1. Nguy\u1ec5n D\u01b0\u01a1ng Kim V\u1ef9\n2. \u0110\u1ed7 Th\u1ecb Nh\u01b0 Ng\u1ecdc\n3. L\u00ea Th\u1ecb Qu\u1ef3nh Chi\n4. Nguy\u1ec5n V\u0103n T\u00e0i\n5. \u0110\u1ed7 Minh Ti\u1ebfn"}}