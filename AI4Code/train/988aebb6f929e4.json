{"cell_type":{"10e95ae0":"code","a6732640":"code","b18b1ece":"code","8eba78da":"code","cd98d281":"code","cb4dbf45":"code","d0a703be":"code","b7b600e2":"code","c654d1bb":"code","9349f7d1":"code","8a234b2d":"code","efce6b1d":"code","9ca670f0":"code","f48fb874":"code","567d6795":"code","fb293a45":"code","21b847e0":"code","4d3816c4":"code","7403ac52":"code","c2c1f2ac":"code","80a6403f":"code","99766b9a":"code","0dd65ff6":"code","7cfe1114":"code","57ab9abe":"code","b010093b":"code","973d03a4":"code","aa94052e":"code","1fec0a20":"code","119d6cdb":"code","58a78774":"code","3037fb75":"code","626e2b78":"code","76f77aa1":"code","b187fd41":"code","742c4d66":"code","954ac0b1":"code","ab11c3a7":"code","72283b7a":"code","e8059b6c":"code","3bfdb319":"code","61f70f51":"code","efd32fc7":"code","6f759bf3":"code","c18a0edd":"code","d81d6519":"code","ae95dce5":"code","41107c8d":"code","23ba5836":"code","99a90e15":"code","dbe3860d":"code","376ef6a6":"code","d3f0aab9":"code","efcfb137":"code","9d0f72a4":"code","26c6676a":"code","b1d134ed":"code","4ac2323a":"code","8b484109":"code","65dcdb28":"code","f638b37d":"code","024fd9b3":"code","0b4b8e39":"code","460423cc":"code","f26a853f":"code","fce09b4d":"markdown","3f8eceb9":"markdown","b110438a":"markdown","0fd58d56":"markdown","f7878ac3":"markdown","e97275b5":"markdown","9d376189":"markdown","161a2b2e":"markdown","257d5020":"markdown","5b7ec382":"markdown","247d2f45":"markdown","5e8ec7d4":"markdown","a9529565":"markdown","aea4c113":"markdown","ac703b65":"markdown","3cbf22b1":"markdown","606a6e1c":"markdown","3a810926":"markdown","c638f7a2":"markdown","bc968690":"markdown"},"source":{"10e95ae0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\n%matplotlib inline\nwarnings.simplefilter(\"ignore\")\n\nprint(\"Libraries load successfully!!!\")","a6732640":"data = pd.read_csv(\"..\/input\/anz-synthesised-transaction-dataset\/anz.csv\")\ndata.head(2)","b18b1ece":"print(\"Rows and Columns in the given dataset is\", data.shape[0], \"and\", data.shape[1], \"respectively.\")","8eba78da":"# Missing values\ndef missing_values_table(df):\n        mis_val = df.isnull().sum()\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        mis_val_table_ren_columns = mis_val_table.rename(columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        mis_val_table_ren_columns = mis_val_table_ren_columns[mis_val_table_ren_columns.iloc[:,1] != 0].sort_values('% of Total Values', ascending=False).round(1)\n        print (\"Your selected dataframe has \" + str(df.shape[1]))   \n        print(\"There are \" + str(mis_val_table_ren_columns.shape[0])+\" columns that have missing values.\")\n        return mis_val_table_ren_columns","cd98d281":"missing_values_table(data).style.background_gradient(cmap='vlag_r')","cb4dbf45":"data.info()","d0a703be":"#Converting the date column to pandas timestamp format\ndata['date'] = pd.to_datetime(data['date'])\nprint(data['date'].dtype)\nprint(type(data['date'][0]))\ndata['date'].head()","b7b600e2":"#getting the weekday out of date column\ndata['week_day'] = data['date'].dt.day_name()\ndata['week_day'].head()","c654d1bb":"#extracting the month out of date column\ndata['month'] = data['date'].dt.month_name()\ndata['month'].head()","9349f7d1":"# Plotting the correlation heatmap \nsns.heatmap(data.corr() ,vmax=.3 ,annot=True, center=0, cmap=\"nipy_spectral\", square=True, linewidths=.5)","8a234b2d":"oct_amt = (data['month'] == 'October')\nprint(\"Mean transaction amount in the month of October is\", data.loc[oct_amt , 'amount'].mean())\nprint(\"Maximum transaction amount in the month of October is\", data.loc[oct_amt , 'amount'].max())\nprint(\"Minimum transaction amount in the month of October is\", data.loc[oct_amt , 'amount'].min())","efce6b1d":"sep_amt = (data['month'] == 'September')\nprint(\"Mean transaction amount in the month of September is\", data.loc[sep_amt , 'amount'].mean())\nprint(\"Maximum transaction amount in the month of September is\", data.loc[sep_amt , 'amount'].max())\nprint(\"Minimum transaction amount in the month of September is\", data.loc[sep_amt , 'amount'].min())","9ca670f0":"aug_amt = (data['month'] == 'August')\nprint(\"Mean transaction amount in the month of August is\" ,data.loc[aug_amt , 'amount'].mean())\nprint(\"Maximum transaction amount in the month of August is\", data.loc[aug_amt , 'amount'].max())\nprint(\"Minimum transaction amount in the month of August is\", data.loc[aug_amt , 'amount'].min())","f48fb874":"#checking the count of month wise transaction \nprint(data['month'].value_counts())\nexplode=(0.1,0.05,0.05)\ndata['month'].value_counts().plot.pie(autopct='%1.1f%%', startangle=60)\nplt.show()","567d6795":"print(data['gender'].value_counts())\nprint(\"*\"*20)\nprint(((data['gender'].value_counts() \/ len(data['gender'])).round(3)*100))\nsns.countplot(data['gender'])\nplt.show()","fb293a45":"print(data['card_present_flag'].value_counts())\nprint(\"*\"*20)\nprint(((data['card_present_flag'].value_counts() \/ len(data['card_present_flag'])).round(3)*100))\nsns.countplot(data['card_present_flag'])\nplt.show()","21b847e0":"plt.figure(figsize=(8,8))\nprint(data['txn_description'].value_counts())\ndata['txn_description'].value_counts().plot.pie(autopct='%1.1f%%', startangle=60)","4d3816c4":"plt.figure(figsize=(7,7))\nprint(data['week_day'].value_counts())\ndata['week_day'].value_counts().plot.pie(autopct='%1.1f%%', startangle=60)","7403ac52":"plt.figure(figsize=(10,10))\nprint(data['merchant_state'].value_counts())\nexplode=(0.1,0.05,0.05)\ndata['merchant_state'].value_counts().plot.pie(autopct='%1.1f%%', startangle=60)","c2c1f2ac":"print(data['movement'].value_counts())\nprint(\"*\"*20)\nprint(((data['movement'].value_counts() \/ len(data['movement'])).round(3)*100))\nsns.countplot(x='movement' , data=data)","80a6403f":"print(data['gender'].groupby(data['card_present_flag']).value_counts())\nprint(\"*\"*20)\nprint(((data['gender'].groupby(data['card_present_flag']).value_counts() \/ len(data['gender'])).round(3)*100))\nplt.figure(figsize=(10,8))\nsns.countplot(x='card_present_flag' ,hue='gender', data=data)","99766b9a":"print(data['gender'].groupby(data['month']).value_counts())\nprint(\"*\"*20)\nprint(((data['gender'].groupby(data['month']).value_counts() \/ len(data['month'])).round(3)*100))\nplt.figure(figsize=(10,8))\nsns.countplot(x='month' ,hue='gender', data=data)","0dd65ff6":"plt.figure(figsize=(8,8))\nfig = sns.countplot(x = \"merchant_state\", hue = \"gender\", data = data)\ntotal = len(data)\nfor p in fig.patches:\n    height = p.get_height()\n    fig.text(p.get_x()+p.get_width()\/2., height + 3, '{:.1%}'.format(height\/total),ha=\"center\")\nplt.title(\"Week Day wise Gender Transaction\")\nplt.show()","7cfe1114":"plt.figure(figsize=(8,8))\nfig = sns.countplot(x = \"week_day\", hue = \"gender\", data = data)\ntotal = len(data)\nfor p in fig.patches:\n    height = p.get_height()\n    fig.text(p.get_x()+p.get_width()\/2., height + 3, '{:.1%}'.format(height\/total),ha=\"center\")\nplt.title(\"Week Day wise Gender Transaction\")\nplt.show()","57ab9abe":"print(data['movement'].groupby(data[\"gender\"]).value_counts())\nprint(\"*\"*20)\nprint(((data['movement'].groupby(data['gender']).value_counts() \/ len(data['gender'])).round(3)*100))\nplt.figure(figsize=(10,8))\nsns.countplot(x='movement' ,hue='gender', data=data)","b010093b":"print(data['movement'].groupby(data[\"txn_description\"]).value_counts())\nprint(\"*\"*20)\nprint(((data['movement'].groupby(data['txn_description']).value_counts() \/ len(data['txn_description'])).round(3)*100))\nplt.figure(figsize=(10,8))\nsns.countplot(x='movement' ,hue='txn_description', data=data)","973d03a4":"print(data['movement'].groupby(data[\"merchant_state\"]).value_counts(sort=True))\nprint(\"*\"*20)\nprint(((data['movement'].groupby(data['merchant_state']).value_counts(sort=True) \/ len(data['merchant_state'])).round(3)*100))\nplt.figure(figsize=(10,8))\nsns.countplot(x='movement' ,hue='merchant_state', data=data)","aa94052e":"plt.figure(figsize=(10,7))\nsns.distplot(data['age']);","1fec0a20":"# Figuring out which age group has more balance.\nplt.figure(figsize=(10,7))\nsns.lineplot(x='age' , y='balance' , data=data)","119d6cdb":"# Figuring out which age group has transacted more\nplt.figure(figsize=(10,7))\nsns.lineplot(x='age' , y='amount' , data=data)","58a78774":"data['date'].value_counts(sort=True).plot(kind='line',linewidth=2.5,linestyle='-',marker='o',figsize=(20, 10))\nplt.xlabel('\\nDates')\nplt.ylabel('\\nFrequency')\nplt.title('Frequency of Tranaction made per day',fontdict = {'fontsize' : 10})\nplt.legend()\nplt.grid(True)\nplt.show()","3037fb75":"data.columns","626e2b78":"data['txn_description'].unique()","76f77aa1":"salaries = data[data[\"txn_description\"] == \"PAY\/SALARY\"].groupby(\"customer_id\").mean()\nsalaries.head()","b187fd41":"print(data['age'].corr(data['balance']))\nprint(data['age'].corr(data['amount']))","742c4d66":"fig, ax = plt.subplots(1, 2)\n\nsns.scatterplot(x=data.age, y=data.balance, ax = ax[0])\nsns.scatterplot(x=data.age, y=data.amount, ax= ax[1])\n\nfig.show()","954ac0b1":"sal =[]\nfor customer_id in data['customer_id']:\n    sal.append(int(salaries.loc[customer_id]['amount'].sum()))\ndata['annual_salary'] = sal\ndata.head()","ab11c3a7":"print(\"Rows and Columns in the given dataset is\", data.shape[0], \"and\", data.shape[1], \"respectively.\")","72283b7a":"salary = data[data['txn_description'] == 'PAY\/SALARY']\nsalary.head()","e8059b6c":"print(\"Rows and Columns in the given dataset is\", salary.shape[0], \"and\", salary.shape[1], \"respectively.\")","3bfdb319":"missing_values_table(salary).style.background_gradient(cmap='vlag_r')","61f70f51":"salary.drop(['card_present_flag','merchant_id', \"merchant_suburb\",\"merchant_state\", 'merchant_long_lat'], axis = 1, inplace = True)","efd32fc7":"print(salary.country.unique())\nprint(salary.currency.unique())\nprint(salary.movement.unique())\nprint(salary.bpay_biller_code.unique())\nprint(salary.status.unique())","6f759bf3":"salary.drop(['country','currency', \"bpay_biller_code\",\"movement\", 'status'], axis = 1, inplace = True)","c18a0edd":"print(salary.account.unique())\nprint(salary.long_lat.unique())\nprint(salary.txn_description.unique())\nprint(salary.merchant_code.unique())\nprint(salary.first_name.unique())","d81d6519":"salary.drop(['account','long_lat', \"txn_description\",\"merchant_code\", 'first_name'], axis = 1, inplace = True)","ae95dce5":"salary.columns","41107c8d":"print(\"Rows and Columns in the given dataset is\", salary.shape[0], \"and\", salary.shape[1], \"respectively.\")","23ba5836":"salary.head(2)","99a90e15":"salary.drop(['extraction', 'transaction_id'], axis = 1, inplace = True)","dbe3860d":"salary.head(2)","376ef6a6":"salary.customer_id.nunique()","d3f0aab9":"ann_sal = salary.groupby(['customer_id','month', 'week_day'])['annual_salary'].nunique()\nprint(ann_sal[ann_sal>1])","efcfb137":"salary.drop(['customer_id','month', 'week_day'], axis = 1, inplace = True)\nsalary.head(2)","9d0f72a4":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor","26c6676a":"salary['gender'] = pd.get_dummies(salary['gender'], drop_first=True)","b1d134ed":"salary","4ac2323a":"# Plotting the correlation heatmap \nsns.heatmap(salary.corr() ,vmax=.3 ,annot=True, center=0, cmap=\"nipy_spectral\", square=True, linewidths=.5)","8b484109":"salary.head(2)","65dcdb28":"X = salary.drop([\"date\",'annual_salary'],axis=1)\ny = salary['annual_salary']","f638b37d":"X.shape, y.shape","024fd9b3":"X_train , X_test , y_train , y_test = train_test_split(X, y, test_size=0.3)","0b4b8e39":"X_train","460423cc":"lr = LinearRegression()\nlr.fit(X_train, y_train) # Fit the model\ny_pred_train_lr = lr.predict(X_train) #train model prediction\nprint(\"Model accuracy on Train Data\", (lr.score(X_train , y_train)*100)) # Model Score on train data \ny_pred_lr = lr.predict(X_test) # Making predictions\nprint(\"Model accuracy on Train Data\", lr.score(X_test , y_test)*100) # Model Score on test data ","f26a853f":"dtr = DecisionTreeRegressor()\ndtr.fit(X_train, y_train) # Fit the model\ny_pred_train_dtr = dtr.predict(X_train) #train model prediction\nprint(\"Model accuracy on Train Data\", (dtr.score(X_train , y_train)*100)) # Model Score on train data \ny_pred_dtr = dtr.predict(X_test) # Making predictions\nprint(\"Model accuracy on Train Data\", dtr.score(X_test , y_test)*100) # Model Score on test data ","fce09b4d":"> No duplicate salary entry found for customer hence, we can drop customer_id,month and week_day columns as well.","3f8eceb9":"<b> Findings <\/b>\n\n> - Features balance and age have a good correlation with amount \n> - Features balance and age have a strong correlation \n> - Features car_present_flag have a negative correlation with amount and age columns ","b110438a":"#### Findings\n> - Approx. 33% of transaction were made in each month of August and September and approx 34% of transaction were made in the month of October\n> - Male and Female ratio of customer is approx. 52% and 48% respectively\n> - Approx . 51% of customer kept card handy while making transarction while 13% didn't has the card and for 36% customers data is missing\n> - Maximum transaction were made using Sales-Pos mode & Pos mode and minimum transaction were made using phone\n> - Friday and Wednesday had the maximum number of transaction and minimum number of transaction were made on Monday\n> - Maximum customer belongs to NSW and VIC whereas the minimum customer belongs to TAS\n> - Maximum transaction made were debit","0fd58d56":"### Exploring Data","f7878ac3":"> Since date feature has no correlation or impact on target column hence, we would not consider this","e97275b5":"> Since above noted 5 columns have only one variable hence, the imapct of these values can not be identify on target column hence deleting them.","9d376189":"# Task 1: Exploratory Data Analysis\n\n## Importing Libraries","161a2b2e":"> Since above noted 5 columns have 100% missing values hence, we will drop these columns","257d5020":"> Dropping colums extraction, transaction_id and customer_id as they seems to be irrelavant to the target column","5b7ec382":"### Analyzing month wise transactions","247d2f45":"#### Findings\n> <b> August <\/b>\n\n- Average Transaction : AUD 185.12\n- Maximum Transaction : AUD 8,835.98\n- Minimum Transaction : AUD 1.52\n\n> <b> September <\/b>\n\n- Average Transaction : AUD 182.05\n- Maximum Transaction : AUD 8,835.98\n- Minimum Transaction : AUD 0.1\n\n> <b> October <\/b>\n\n- Average Transaction : AUD 196.43\n- Maximum Transaction : AUD 8,835.98\n- Minimum Transaction : AUD 0.1","5e8ec7d4":"### Observations\n> - Approximatly equal number of male and female customers did and did not keep the card while making transactions\n> - Male and Female customer ratio among all months of transaction is consistant\n> - Male ratio is high only in NSW, VIC and TAS\n> - Week day wise maximum transaction were made by Male customers\n> - Maximum debit transactions were made by male customers\n> - Customer with Pay\/Salary transaction mode made the Credit Transaction only","a9529565":"# Task : 2 - Predictive Analytics","aea4c113":"# The END!!!","ac703b65":"### Observations\n> - Age distribution is right skewed and contains outliers\n> - Customers between age group of 40-50 hold the maximum balance\n> - Customers between age group of 45-55 made the maximum amount of transaction i.e. approx 400 AUD\n> - Customers between age group of 22-27 made the minimum amount of transaction i.e. approx 100 AUD","3cbf22b1":"> Dropping the columns noted above as target columns will not have impact of these columns","606a6e1c":"### Univariate and Bivariate Analysis","3a810926":"## Data @ ANZ Virtual Internship\n\nThis notebook is a part of virtual internship with ANZ via InsideSherpa. The internship goals are defined in two parts:\n### Task 1\n<b> Exploratory Data Analysis <\/b> : Segment the dataset and draw unique insights, including visualisation of the transaction volume and assessing the effect of any outliers.\n### Task 2\n<b> Predictive Analytics<\/b> : Explore correlations between customer attributes, build a regression and a decision-tree prediction model based on your findings.","c638f7a2":"### Observations\n> - The average balance in a customer account is AUD 14,704\n> - The average age of customer who made the transaction is 30\n> - The average amount of transaction is approx. AUD 188","bc968690":"#### About Features:\n> - status: represents status of transaction made\n> - card_present_flag: represents if customer had the card while making transaction\n> - bpay_biller_code: unique code of the BPay Transaction done by the customer.\n> - account: account number of the customers who made transaction\n> - currency: currency type where transaction is made (AUD dollars)\n> - long_lat: Longitude and Latitude location of the customer.\n> - txn_description: the mode of transaction the customer has done\n> - merchant_id: merchant id\n> - merhant_code: unique merchant code\n> - first_name: first name of the customers\n> - balance: balance the customer account\n> - date: data of the transaction took place\n> - gender: gender of customer\n> - age: age of customer\n> - merchant_suburb: represents the area where the merchant is located\n> - merchant_state: the state where the merchant is located\n> - extraction: date and time of transaction\n> - amount: represents the transaction amount by customer\n> - transaction_id: unique transaction id given by the merchant when the customer makes an transaction\n> - country: base country location of customer (Contains Single Variable only though)\n> - customer_id: represent customer_id used to make the transaction \n> - merchant_long_lat: latitude and longitude location of customer\n> - movement: type of transaction made (Debit or Credit)"}}