{"cell_type":{"86bdcf80":"code","ea192da3":"code","07aa7a9c":"code","69941510":"code","e0adca14":"code","a465c2f8":"code","e08e566d":"code","3b03924f":"code","e182b7b0":"code","53d8d4bc":"code","808c83ae":"code","1c4fced9":"code","eae22dff":"code","48979fe1":"code","0a50b9e3":"code","c9ea7c05":"code","fc66d683":"code","294013cf":"code","39cf188b":"code","ea91c6b9":"code","dc567f62":"code","93a82a70":"code","f940b425":"code","373e82fa":"code","325d3127":"code","0bef7020":"code","93372354":"code","5c647e00":"markdown","a392f5b9":"markdown","3986758b":"markdown","923ca257":"markdown","62983f9e":"markdown","750f73e8":"markdown","f20c0507":"markdown","7bb9cebd":"markdown","c3140ab0":"markdown","74c5341b":"markdown","93e7c14a":"markdown","9fce04ad":"markdown","9c421aa6":"markdown","12d7197f":"markdown","53540c19":"markdown","5cbdcfd1":"markdown","55b91d55":"markdown","bc3a329d":"markdown"},"source":{"86bdcf80":"import math, re, os\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.applications.xception as xcep\nimport tensorflow.keras.applications.densenet as dense\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","ea192da3":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","07aa7a9c":"# For tf.dataset\nAUTO = tf.data.experimental.AUTOTUNE\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()\n\n# Configuration\nEPOCHS = 10 # original 10\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","69941510":"def append_path(pre):\n    return np.vectorize(lambda file: os.path.join(GCS_DS_PATH, pre, file))","e0adca14":"sub = pd.read_csv('\/kaggle\/input\/alaska2-image-steganalysis\/sample_submission.csv')\ntrain_filenames = np.array(os.listdir(\"\/kaggle\/input\/alaska2-image-steganalysis\/Cover\/\"))","a465c2f8":"np.random.seed(0)\npositives = train_filenames.copy()\nnegatives = train_filenames.copy()\nnp.random.shuffle(positives)\nnp.random.shuffle(negatives)\n\njmipod = append_path('JMiPOD')(positives[:10000])\njuniward = append_path('JUNIWARD')(positives[10000:20000])\nuerd = append_path('UERD')(positives[20000:30000])\n\npos_paths = np.concatenate([jmipod, juniward, uerd])","e08e566d":"test_paths = append_path('Test')(sub.Id.values)\nneg_paths = append_path('Cover')(negatives[:30000])","3b03924f":"train_paths = np.concatenate([pos_paths, neg_paths])\ntrain_labels = np.array([1] * len(pos_paths) + [0] * len(neg_paths))","e182b7b0":"train_paths, valid_paths, train_labels, valid_labels = train_test_split(\n    train_paths, train_labels, test_size=0.15, random_state=2020)","53d8d4bc":"def decode_image(filename, label=None, image_size=(512, 512)):\n    bits = tf.io.read_file(filename)\n    image = tf.image.decode_jpeg(bits, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.resize(image, image_size)\n    \n    if label is None:\n        return image\n    else:\n        return image, label\n\ndef data_augment(image, label=None):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    #adding extra augmentation\n    image = tf.image.random_saturation(image, 0, 2)\n    image = tf.image.random_brightness(x, 0.2)\n    \n    if label is None:\n        return image\n    else:\n        return image, label","808c83ae":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((train_paths, train_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .cache()\n    .repeat()\n    .shuffle(1024)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((valid_paths, valid_labels))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(test_paths)\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE)\n)","1c4fced9":"def build_lrfn(lr_start=0.00001, lr_max=0.00008, \n               lr_min=0.000001, lr_rampup_epochs=5, \n               lr_sustain_epochs=0, lr_exp_decay=.8):\n    lr_max = lr_max * strategy.num_replicas_in_sync\n\n    def lrfn(epoch):\n        if epoch < lr_rampup_epochs:\n            lr = (lr_max - lr_start) \/ lr_rampup_epochs * epoch + lr_start\n        elif epoch < lr_rampup_epochs + lr_sustain_epochs:\n            lr = lr_max\n        else:\n            lr = (lr_max - lr_min) * lr_exp_decay**(epoch - lr_rampup_epochs - lr_sustain_epochs) + lr_min\n        return lr\n    \n    return lrfn","eae22dff":"with strategy.scope():\n    # Xception model\n    model = tf.keras.Sequential([\n        xcep.Xception(\n            input_shape=(512, 512, 3),\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalAveragePooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n        \n    model.compile(\n        optimizer='adam',\n        loss = 'binary_crossentropy',\n        metrics=['accuracy']\n    )\n    \n    # Densenet121 model\n    model2 = tf.keras.Sequential([\n        dense.DenseNet121(\n            input_shape=(512, 512, 3),\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalAveragePooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n        \n    model2.compile(\n        optimizer='adam',\n        loss = 'binary_crossentropy',\n        metrics=['accuracy']\n    )\n    ","48979fe1":"reduce_lr_loss = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, verbose=1, epsilon=1e-4, mode='min')","0a50b9e3":"lrfn = build_lrfn()\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)\nSTEPS_PER_EPOCH = train_labels.shape[0] \/\/ BATCH_SIZE","c9ea7c05":"model.summary()","fc66d683":"history = model.fit(\n    train_dataset, \n    epochs=EPOCHS, \n    callbacks=[reduce_lr_loss, lr_schedule],#callbacks=[checkpoint1, reduce_lr_loss, lr_schedule],\n    steps_per_epoch=STEPS_PER_EPOCH,\n    validation_data=valid_dataset\n)","294013cf":"model.save(\"model_Xception.h5\")","39cf188b":"pred1 = model.predict(test_dataset, verbose=1)\nsub.Label = pred1\nsub.to_csv('submission_xcept.csv', index=False)\nsub.head()","ea91c6b9":"model2.summary()","dc567f62":"history2 = model2.fit(\n    train_dataset, \n    epochs=EPOCHS, \n    callbacks=[reduce_lr_loss, lr_schedule],#callbacks=[checkpoint2, reduce_lr_loss, lr_schedule],\n    steps_per_epoch=STEPS_PER_EPOCH,\n    validation_data=valid_dataset\n)","93a82a70":"model2.save(\"model_Densenet121.h5\")","f940b425":"pred2 = model2.predict(test_dataset, verbose=1) # EfficientNetB7\nsub.Label = pred2\nsub.to_csv('submission_dense.csv', index=False)\nsub.head()","373e82fa":"def display_training_curves(training, validation, title, subplot):\n    \"\"\"\n    Source: https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n    \"\"\"\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","325d3127":"display_training_curves(\n    history.history['loss'], \n    history.history['val_loss'], \n    'loss', 211)\ndisplay_training_curves(\n    history.history['accuracy'], \n    history.history['val_accuracy'], \n    'accuracy', 212)","0bef7020":"display_training_curves(\n    history2.history['loss'], \n    history2.history['val_loss'], \n    'loss', 211)\ndisplay_training_curves(\n    history2.history['accuracy'], \n    history2.history['val_accuracy'], \n    'accuracy', 212)","93372354":"sub.Label = 0.51*pred1 + 0.5*pred2\nsub.to_csv('submission.csv', index=False)\nsub.head()","5c647e00":"# Evaluation","a392f5b9":"# Modelling","3986758b":"## Training Xception model","923ca257":"# Other References And some wonderful kernal for kick start...\n\n- Best and well documented kernal for kick start is mr.Tanul singh.[Click here](https:\/\/www.kaggle.com\/tanulsingh077\/steganalysis-complete-understanding-and-model)\n- Another kernal is of Mr.Prasant banarjee.[click here](https:\/\/www.kaggle.com\/prashant111\/alaska2-image-steganalysis-all-you-need-to-know)\n- Another best kernal is of Wei hao khoong.[click here](https:\/\/www.kaggle.com\/khoongweihao\/alaska2-blending-efficientnets-on-tpus)\n- Kernal of mine on handwritten grapheme.[click here](https:\/\/www.kaggle.com\/saife245\/handwritten-grapheme-classification-resnet-0-97)","62983f9e":"## Load Model into TPU","750f73e8":"# Acknowledgements\n\n- Thanks to Xhulu for their wonderful kernal.[click here](https:\/\/www.kaggle.com\/xhlulu\/alaska2-efficientnet-on-tpus)\n- Trying different model like resnet101, Xception model, inception_v2, vgg16, Densenet121.\n- Experimented with number of epochs.","f20c0507":"# Create Dataset objects","7bb9cebd":"# Submission\n\n## Building Ensemble...","c3140ab0":"## IF you like the kernal, Please upvote it.","74c5341b":"## Xception Training Curve","93e7c14a":"# Imports","9fce04ad":"## Let analyze the few model output....\n### NOte;- model performance after 10 Epochs\n- Model - Resnet101\n- loss: 0.6454 \n- accuracy: 0.5869 \n- val_loss: 0.6673 \n- val_accuracy: 0.5621\n![resnet101.JPG](attachment:resnet101.JPG)\n\n- Model - InceptionResNetV2\n- loss: 0.6852 \n- accuracy: 0.5263 \n- val_loss: 0.6972 \n- val_accuracy: 0.4853\n![inseption_v2.JPG](attachment:inseption_v2.JPG)\n\n- Model - Squeezenet\n![Squeeze_model.JPG](attachment:Squeeze_model.JPG)\n- loss: 4.1260  \n- accuracy: 0.2927 \n- val_loss: 4.0705 \n- val_accuracy: 0.4789\n![Squeeze%20net.JPG](attachment:Squeeze%20net.JPG)\n\n- MOdel -Xception\n- loss: 0.5662 \n- accuracy: 0.6784 \n- val_loss: 0.6729 \n- val_accuracy: 0.5794\n\n\n- Model - Densenet\n- loss: 0.5908 \n- accuracy: 0.6535 \n- val_loss: 0.6493 \n- val_accuracy: 0.5828\n\n### Best Accuracy obtain at Densenet101 and Xception.","9c421aa6":"## My Other Works on kaggle...\n\n- NeuroImaging problem on kaggle.[click here](https:\/\/www.kaggle.com\/saife245\/neuroimaging-in-depth-understanding-eda-model)\n- Football match prediction.[click here](https:\/\/www.kaggle.com\/saife245\/football-match-prediction)\n- Hand written Grapheme Classification.[click here](https:\/\/www.kaggle.com\/saife245\/handwritten-grapheme-classification-resnet-0-97)\n- Cutmix_Gridmask_Mixup_Cutout.[click here](https:\/\/www.kaggle.com\/saife245\/cutmix-vs-mixup-vs-gridmask-vs-cutout)\n","12d7197f":"## Training Densenet Model","53540c19":"# Load label and paths","5cbdcfd1":"# TPU Strategy and other configs ","55b91d55":"## Helper Functions","bc3a329d":"## Densenet121 Training Curve"}}