{"cell_type":{"4cff68a0":"code","62b8b01d":"code","235f5ea4":"code","e7d28713":"code","cef4fabb":"code","d1fe737c":"code","c846e8d2":"code","61408f64":"code","752216b2":"code","61b44df0":"code","bad4975a":"code","98c59f5d":"code","96fe8aeb":"code","f3e16808":"code","3b07a1aa":"code","06eef9cd":"code","1647fff6":"code","27a9b91a":"code","d65dcd22":"code","5f290adc":"code","892b27ff":"code","d186355e":"code","2e09ba93":"code","6c55b84e":"code","5c966d02":"code","1ba29367":"code","1795d1c1":"code","b64e604b":"code","0d6302b9":"code","98226110":"code","7ffb223b":"code","7ed7bd31":"code","317162d0":"code","d12592b9":"code","3bf33a5e":"code","0c7052de":"code","543464d4":"code","3d22feb5":"code","f1a11d1b":"code","9be09730":"code","8b78fadf":"code","355124d9":"code","c0e42d78":"code","1ce471e6":"code","0d7243d7":"code","0ee32800":"code","adf93c77":"code","d3650056":"code","fbc91074":"code","f696e4fe":"code","41d77887":"code","eed11551":"code","f7f88c96":"code","ab77f07b":"code","48534e96":"code","8df836df":"code","e62f9562":"code","19acc2db":"code","f39b1d24":"code","c64a8f24":"code","dc990d87":"code","85869ca6":"code","2f97f6ff":"code","2d2cb3d4":"code","34e06bfe":"code","6b7fe346":"code","cd79c376":"code","d6b00e24":"code","5afb5405":"markdown","44d358be":"markdown","18c60da6":"markdown","9b3806e3":"markdown","a58b1f3a":"markdown","9ebd8111":"markdown","367d8c97":"markdown","91d45477":"markdown","2a26af70":"markdown","ab7d3a5f":"markdown","a28c29fe":"markdown","08830ab0":"markdown","1f0a3d8a":"markdown","a411bf1b":"markdown","5cb636e6":"markdown","c3cf602f":"markdown","45cf22e3":"markdown","d3c95dfa":"markdown","d3cec912":"markdown","663cd4dd":"markdown","8304e99f":"markdown","c802509d":"markdown","779ad2e8":"markdown","70b6d511":"markdown","8a82ff9f":"markdown","341b640f":"markdown","3429a91d":"markdown","d61976a1":"markdown","62cc7b04":"markdown","2063a8a2":"markdown","35b63c0a":"markdown","94028be3":"markdown","687051c9":"markdown","1ed0354f":"markdown","b12f48f8":"markdown","3c849b80":"markdown","cfa67149":"markdown","24fddd61":"markdown","63644f85":"markdown","81dee3bb":"markdown","6f4bf72f":"markdown","e96f3271":"markdown","b93a8ae2":"markdown","62ffcf78":"markdown","f267bec9":"markdown","b7fa586b":"markdown","e4ca96ce":"markdown","dbb0e277":"markdown","2f18cff5":"markdown","54595b5d":"markdown","8852141c":"markdown","8e4ee38c":"markdown","506d5dec":"markdown","a6d43b02":"markdown","5bf95b4d":"markdown","b9eb6355":"markdown","d0db8847":"markdown","25484bd9":"markdown","39043f9c":"markdown","d407bda5":"markdown","adb7a3ae":"markdown","1d71758f":"markdown","4bdb661f":"markdown","7505058f":"markdown","d0f0f6d9":"markdown","c5e5b36c":"markdown","12ed8240":"markdown","a77e27da":"markdown"},"source":{"4cff68a0":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","62b8b01d":"data = pd.read_csv(\"..\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv\", header=None)\ndata.columns = ['Month', 'Passengers']\ndata.Month = pd.to_datetime(data.Month, format='%Y-%m')\ndata.Passengers = data.Passengers.astype(\"float64\")\ndata = data.set_index('Month')\ndata.head(12)","235f5ea4":"data.plot(figsize=(12,4))\nplt.legend(loc='best')\nplt.title('Airline Passenger Traffic Data')\nplt.show(block=False)","e7d28713":"data['Passengers_Mean_Imputation'] = data.Passengers.fillna(data.Passengers.mean())\n\nplt.figure(figsize=(12,4))\nplt.plot(data.Passengers_Mean_Imputation, label='Passengers_Mean_Imputation')\nplt.plot(data.Passengers, label='Passengers')\nplt.legend(loc='best')\nplt.title('Missing Value Treatment: Mean Imputation')\nplt.show(block=False)","cef4fabb":"data['Passengers_Linear_Interpolation'] = data.Passengers.interpolate(method='linear')\n\nplt.figure(figsize=(12,4))\nplt.plot(data.Passengers_Linear_Interpolation, label='Passengers_Linear_Interpolation')\nplt.plot(data.Passengers, label='Passengers')\nplt.legend(loc='best')\nplt.title('Missing Value Treatment: Linear Interpolation')\nplt.show(block=False)","d1fe737c":"data.Passengers = data.Passengers_Linear_Interpolation\ndata.drop(columns=['Passengers_Mean_Imputation','Passengers_Linear_Interpolation'],inplace=True)\ndata.head()","c846e8d2":"import seaborn as sns\n\nfig = plt.subplots(figsize=(12, 2))\nax = sns.boxplot(x = data.Passengers, whis = 1.5)","61408f64":"fig = data.Passengers.hist(figsize=(12,4))","752216b2":"from pylab import rcParams\nimport statsmodels.api as sm\n\nrcParams['figure.figsize'] = 12,8\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive')\nfig = decomposition.plot()\nplt.show()","61b44df0":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative')\nfig = decomposition.plot()\nplt.show()","bad4975a":"train_len = 120\ntrain = data[0:train_len]\ntest = data[train_len:]","98c59f5d":"def create_method(title, func):\n    y_hat = test.copy()\n    y_hat[title] = func\n    return y_hat\n    \ny_hat_naive = create_method('naive_forecast', train.Passengers[train_len - 1])","96fe8aeb":"def plot_method(y_hat, title):\n    plt.figure(figsize=(12,4))\n    plt.plot(train.Passengers, label = 'Train')\n    plt.plot(test.Passengers, label = 'Test')\n    plt.plot(y_hat, label = title + ' Forecast')\n    plt.legend(loc='best')\n    plt.title(title + ' Method')\n    plt.show()\n    \nplot_method(y_hat_naive.naive_forecast, 'Naive')","f3e16808":"from sklearn.metrics import mean_squared_error\n\ndef calculate_error(y_hat, title, prevResults, length):\n    rmse = np.sqrt(mean_squared_error(test.Passengers, y_hat[length:])).round(2)\n    mape = np.round(np.mean(np.abs(test.Passengers-y_hat[length:])\/test.Passengers)*100, 2)\n\n    results = pd.DataFrame({'Method':[title + ' Method'], 'RMSE':[rmse], 'MAPE':[mape]})\n    results = pd.concat([prevResults, results])\n    return results\n\nresults = calculate_error(y_hat_naive.naive_forecast, 'Naive', None, 0)\nresults","3b07a1aa":"y_hat_avg = create_method('avg_forecast', train.Passengers.mean())","06eef9cd":"plot_method(y_hat_avg.avg_forecast, 'Simple Average')","1647fff6":"results = calculate_error(y_hat_avg.avg_forecast, 'Simple Average', results, 0)\nresults","27a9b91a":"y_hat_sma = data.copy()\nma_window = 12\ny_hat_sma['sma_forecast'] = data.Passengers.rolling(ma_window).mean()\ny_hat_sma.sma_forecast[train_len:] = y_hat_sma.sma_forecast[train_len-1]","d65dcd22":"plot_method(y_hat_sma.sma_forecast, 'Simple Moving Average')","5f290adc":"results = calculate_error(y_hat_sma.sma_forecast, 'Simple Moving Average', results, train_len)\nresults","892b27ff":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\n\nmodel = SimpleExpSmoothing(train.Passengers)\nmodel_fit = model.fit(smoothing_level=0.2, optimized=False)\nmodel_fit.params\n\ny_hat_ses = test.copy()\ny_hat_ses['ses_forecast'] = model_fit.forecast(24)","d186355e":"plot_method(y_hat_ses.ses_forecast, 'Simple Exponential Smoothing')","2e09ba93":"results = calculate_error(y_hat_ses.ses_forecast, 'Simple Exponential Smoothing', results, 0)\nresults","6c55b84e":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\n\nmodel = ExponentialSmoothing(np.array(train.Passengers), seasonal_periods=12, trend='additive', seasonal=None)\nmodel_fit = model.fit(smoothing_level=0.2, smoothing_slope=0.01, optimized=False)\n\nprint(model_fit.params)\n\ny_hat_holt = create_method('holt_forecast', model_fit.forecast(24))","5c966d02":"plot_method(y_hat_holt.holt_forecast, 'Holt\\'s Exponential Smoothing')","1ba29367":"results = calculate_error(y_hat_holt.holt_forecast, 'Holt\\'s Exponential Smoothing', results, 0)\nresults","1795d1c1":"model = ExponentialSmoothing(np.asarray(train.Passengers), seasonal_periods=12, trend='add', seasonal='add')\nmodel_fit = model.fit(optimized=True)\n\nprint(model_fit.params)\n\ny_hat_hwa = create_method('hwa_forecast', model_fit.forecast(24))","b64e604b":"plot_method(y_hat_hwa.hwa_forecast, 'Holt\\'s Winter Additive')","0d6302b9":"results = calculate_error(y_hat_hwa.hwa_forecast, 'Holt\\'s Winter Additive', results, 0)\nresults","98226110":"final_model = ExponentialSmoothing(np.asarray(train.Passengers), trend='mul',seasonal='mul',seasonal_periods=12)\nmodel_fit = final_model.fit(optimized=True)\n\nprint(model_fit.params)\n\ny_hat_hwm = create_method('hwm_forecast', model_fit.forecast(24))","7ffb223b":"plot_method(y_hat_hwm.hwm_forecast, 'Holt\\'s Winter Multiplicative')","7ed7bd31":"# results = calculate_error(y_hat_hwm.hwm_forecast, 'Holt\\'s Winter Multiplicative', results, 0)\n# results","317162d0":"data.Passengers.plot(figsize=(12,4))\nplt.legend(loc='best')\nplt.title('Airline Passenger Traffic Data')\nplt.show()","d12592b9":"from statsmodels.tsa.stattools import adfuller\n\nadf_test = adfuller(data.Passengers)\n\nprint('ADF Statistics: %f' % adf_test[0])\nprint('Critical Value @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","3bf33a5e":"import warnings\nwarnings.filterwarnings('ignore')\n\nfrom statsmodels.tsa.stattools import kpss\n\nkpss_test = kpss(data.Passengers)\n\nprint('KPSS Statistics: %f' % kpss_test[0])\nprint('Critical Value @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","0c7052de":"from scipy.stats import boxcox\n\ndata_boxcox = pd.Series(boxcox(data.Passengers, lmbda=0), index = data.index)\n\nplt.figure(figsize=(12, 4))\nplt.plot(data_boxcox, label='After Box Cox Transformation')\nplt.legend(loc='best')\nplt.title('After Box Cox Transformation')\nplt.show()","543464d4":"data_boxcox_diff = pd.Series(data_boxcox - data_boxcox.shift(), index = data.index)\ndata_boxcox_diff.dropna(inplace=True)\n\nplt.figure(figsize=(12, 4))\nplt.plot(data_boxcox_diff, label='After Box Cox Transformation & Differencing')\nplt.legend(loc='best')\nplt.title('After Box Cox Transformation & Differencing')\nplt.show()","3d22feb5":"adf_test = adfuller(data_boxcox_diff)\n\nprint('ADF Statistics: %f' % adf_test[0])\nprint('Critical Value @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","f1a11d1b":"kpss_test = kpss(data_boxcox_diff)\n\nprint('KPSS Statistics: %f' % kpss_test[0])\nprint('Critical Value @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","9be09730":"from statsmodels.graphics.tsaplots import plot_acf\n\nplt.figure(figsize=(12, 4))\nplot_acf(data_boxcox_diff, ax=plt.gca(), lags=30)\nplt.show()","8b78fadf":"from statsmodels.graphics.tsaplots import plot_pacf\n\nplt.figure(figsize=(12, 4))\nplot_pacf(data_boxcox_diff, ax=plt.gca(), lags=30)\nplt.show()","355124d9":"train_data_boxcox = data_boxcox[:train_len]\ntest_data_boxcox = data_boxcox[train_len:]\n\ntrain_data_boxcox_diff = data_boxcox_diff[:train_len-1]\ntest_data_boxcox_diff = data_boxcox_diff[train_len-1:]","c0e42d78":"from statsmodels.tsa.arima_model import ARIMA\n\nmodel = ARIMA(train_data_boxcox_diff, order=(1,0,0))\nmodel_fit = model.fit()\n\nprint(model_fit.params)","1ce471e6":"def recover_orginal_time_series(title):\n    y_hat = data_boxcox_diff.copy()\n    y_hat[title+'_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\n    y_hat[title+'_forecast_boxcox'] = y_hat[title+'_forecast_boxcox_diff'].cumsum()\n    y_hat[title+'_forecast_boxcox'] = y_hat[title+'_forecast_boxcox'].add(data_boxcox[0])\n    y_hat[title+'_forecast'] = np.exp(y_hat[title+'_forecast_boxcox'])\n    return y_hat\n    \ny_hat_ar = recover_orginal_time_series('ar')","0d7243d7":"plot_method(y_hat_ar.ar_forecast[test.index.min():], 'Auto Regression')","0ee32800":"results = calculate_error(y_hat_ar.ar_forecast[test.index.min():], 'Auto Regression', results, 0)\nresults","adf93c77":"model = ARIMA(train_data_boxcox_diff, order=(0,0,1))\nmodel_fit = model.fit()\n\nprint(model_fit.params)","d3650056":"y_hat_ma = recover_orginal_time_series('ma')","fbc91074":"plot_method(y_hat_ma.ma_forecast[test.index.min():], 'Moving Average')","f696e4fe":"results = calculate_error(y_hat_ma.ma_forecast[test.index.min():], 'Moving Average', results, 0)\nresults","41d77887":"model = ARIMA(train_data_boxcox_diff, order=(1,0,1))\nmodel_fit = model.fit()\n\nprint(model_fit.params)","eed11551":"y_hat_arma = recover_orginal_time_series('arma')","f7f88c96":"plot_method(y_hat_arma.arma_forecast[test.index.min():], 'Auto Regressive Moving Average')","ab77f07b":"results = calculate_error(y_hat_arma.arma_forecast[test.index.min():], 'Auto Regressive Moving Average', results, 0)\nresults","48534e96":"model = ARIMA(train_data_boxcox, order=(1,1,1))\nmodel_fit = model.fit()\n\nprint(model_fit.params)","8df836df":"y_hat_arima = recover_orginal_time_series('arima')","e62f9562":"plot_method(y_hat_arima.arima_forecast[test.index.min():], 'Auto Regressive Integrated Moving Average')","19acc2db":"results = calculate_error(y_hat_arima.arima_forecast[test.index.min():], 'Auto Regressive Integrated Moving Average', results, 0)\nresults","f39b1d24":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(train_data_boxcox, order=(1,1,1), seasonal_order=(1,1,1,12))\nmodel_fit = model.fit()\n\nprint(model_fit.params)","c64a8f24":"y_hat_sarima = data_boxcox_diff.copy()\ny_hat_sarima['sarima_forecast_boxcox'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_sarima['sarima_forecast'] = np.exp(y_hat_sarima['sarima_forecast_boxcox'])","dc990d87":"plot_method(y_hat_sarima.sarima_forecast[test.index.min():], 'Seasonal Auto Regressive Integrated Moving Average')","85869ca6":"results = calculate_error(y_hat_sarima.sarima_forecast[test.index.min():], 'Seasonal Auto Regressive Integrated Moving Average', results, 0)\nresults","2f97f6ff":"promo = pd.read_csv('..\/input\/promotion\/promotion.csv', header=None)\n\npromo.columns = ['Month', 'Event']\npromo.Month = pd.to_datetime(promo.Month, format='%Y-%m')\n\npromo = promo.set_index('Month')\npromo","2d2cb3d4":"promo_train = promo[:train_len]\npromo_test = promo[train_len:]","34e06bfe":"model = SARIMAX(train_data_boxcox, order=(1,1,1), seasonal_order=(1,1,1,12), exog=promo_train)\nmodel_fit = model.fit()\n\nprint(model_fit.params)","6b7fe346":"y_hat_sarimax = data_boxcox_diff.copy()\ny_hat_sarimax['sarimax_forecast_boxcox'] = model_fit.predict(test.index.min(), test.index.max(), exog=promo_test)\ny_hat_sarimax['sarimax_forecast'] = np.exp(y_hat_sarimax['sarimax_forecast_boxcox'])","cd79c376":"plot_method(y_hat_sarimax.sarimax_forecast[test.index.min():], 'Seasonal Auto Regressive Integrated Moving Average with Exogeneous variable')","d6b00e24":"results = calculate_error(y_hat_sarimax.sarimax_forecast[test.index.min():], 'Seasonal Auto Regressive Integrated Moving Average with Exogeneous variable', results, 0)\nresults","5afb5405":"<a id=\"section-six_three\"><\/a>\n## Differencing","44d358be":"<a id=\"section-one\"><\/a>\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Initial Setup<\/p>\n<\/div>\n\n<a id=\"section-one_one\"><\/a>\n## Import Standard Packages","18c60da6":"<a id=\"section-six_six_one\"><\/a>\n### Recover Original Time Series Forecast","9b3806e3":"<a id=\"section-six_nine_three\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast ","a58b1f3a":"<a id=\"section-six_seven_two\"><\/a>\n### Plot Train, Test and Forecast ","9ebd8111":"<a id=\"section-four_two_one\"><\/a>\n### Plot Train, Test and Forecast","367d8c97":"<a id=\"section-six_eight\"><\/a>\n## Auto Regressive Integrated Moving Average Method (ARIMA)","91d45477":"<a id=\"section-six_nine_two\"><\/a>\n### Plot Train, Test and Forecast ","2a26af70":"<a id=\"section-six_five_one\"><\/a>\n### Recover Original Time Series Forecast","ab7d3a5f":"<a id=\"section-six_four\"><\/a>\n## Split into Train & Test Datasets","a28c29fe":"<a id=\"section-five_two\"><\/a>\n## Holt's Exponential Smoothing Method with Trend","08830ab0":"No outliers detected in this time series data\n\n<a id=\"section-two_four\"><\/a>\n## Time Series Decomposition\n\n<a id=\"section-two_four_one\"><\/a>\n### Additive Seasonal Decompostion","1f0a3d8a":"<a id=\"section-six_ten_three\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast ","a411bf1b":"<a id=\"section-two_three_two\"><\/a>\n### Histogram Plot","5cb636e6":"<a id=\"section-four\"><\/a>\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Simple Time Series Methods<\/p>\n<\/div>\n\n<a id=\"section-four_one\"><\/a>\n## Naive Method","c3cf602f":"<a id=\"section-six_nine\"><\/a>\n## Seasonal Auto Regressive Integrated Moving Average with Exogeneous varaible Method (SARIMAX)","45cf22e3":"<a id=\"section-six_three_one\"><\/a>\n### ADF Test","d3c95dfa":"<a id=\"section-five_four_two\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast","d3cec912":"<a id=\"section-six_three_two\"><\/a>\n### KPSS Test","663cd4dd":"<a id=\"section-five_three\"><\/a>\n## Holt Winter's Additive Method with Trend & Seasonality","8304e99f":"<a id=\"section-six_three_four\"><\/a>\n### Partial Auto-Correlation Function (PACF) Plot","c802509d":"<a id=\"section-two\"><\/a>\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Time Series Analysis<\/p>\n<\/div>\n\n<a id=\"section-two_one\"><\/a>\n## Plot Time Series Data","779ad2e8":"<a id=\"section-four_three_one\"><\/a>\n### Plot Train, Test and Forecast","70b6d511":"<a id=\"section-six_five_three\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast ","8a82ff9f":"<a id=\"section-four_one_two\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast","341b640f":"<a id=\"section-two_four_two\"><\/a>\n### Multiplicative Seasonal Decomposition","3429a91d":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Table of Contents<\/p>\n<\/div>\n     \n<div align=\"center\">\n<img src=\"https:\/\/365datascience.com\/resources\/blog\/2019-11-what-is-time-series-data-compressed-1024x576.jpg\" width=500\/>\n<\/div>\n\n1. [**Intial Setup**](#section-one)\n    1. [**Import Standard Packages**](#section-one_one)\n    2. [**Import Time Series Data : Airline Passenger Traffic**](#section-one_two)\n2. [**Time Series Analysis**](#section-two)\n    1. [**Plot Time Series Data**](#section-two_one)\n    2. [**Missing Value Treatment**](#section-two_two)\n        1. [**Mean Imputation**](#section-two_two_one)\n        2. [**Linear Interpolation**](#section-two_two_two)\n        3. [**Use Linear Interpolation to Impute Missing Value**](#section-two_two_three)\n    3. [**Outlier Detection**](#section-two_three)\n        1. [**Box Plot & Interquartile Range**](#section-two_three_one)\n        2. [**Histogram Plot**](#section-two_three_two)\n    4. [**Time Series Decomposition**](#section-two_four)\n        1. [**Additive Seasonal Decompostion**](#section-two_four_one)\n        2. [**Multiplicative Seasonal Decomposition**](#section-two_four_two)\n3. [**Build and Evaluate Time Series Forecast**](#section-three)\n    1. [**Splitting Time Series into Training and Test Series**](#section-three_one)\n4. [**Simple Time Series Methods**](#section-four)\n    1. [**Naive Method**](#section-four_one)\n        1. [**Plot Train, Test and Forecast**](#section-four_one_one)\n        2. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-four_one_two)\n    2. [**Simple Average Method**](#section-four_two)\n        1. [**Plot Train, Test and Forecast**](#section-four_two_one)\n        2. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-four_two_two)\n    3. [**Simple Moving Average Method**](#section-four_three)\n        1. [**Plot Train, Test and Forecast**](#section-four_three_one)\n        2. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-four_three_two)\n5. [**Exponential Smoothing Methods**](#section-five)\n    1. [**Simple Exponential Smoothing**](#section-five_one)\n        1. [**Plot Train, Test and Forecast**](#section-five_one_one)\n        2. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-five_one_two)\n    2. [**Holt's Exponential Smoothing Method with Trend**](#section-five_two)\n        1. [**Plot Train, Test and Forecast**](#section-five_two_one)\n        2. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-five_two_two)\n    3. [**Holt Winter's Additive Method with Trend & Seasonality**](#section-five_three)\n        1. [**Plot Train, Test and Forecast**](#section-five_three_one)\n        2. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-five_three_two)\n    4. [**Holt Winter's Multiplicative Method with Trend & Seasonality**](#section-five_four)\n        1. [**Plot Train, Test and Forecast**](#section-five_four_one)\n        2. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-five_four_two)\n6. [**Auto Regressive Models**](#section-six)\n    1. [**Stationary vs Non-stationary Time Series**](#section-six_one)\n        1. [**Time Series Plot**](#section-six_one_one)\n        2. [**Augumented Dickey-Fuller (ADF) Test**](#section-six_one_two)\n        3. [**KPSS Test**](#section-six_one_three)\n    2. [**Box Cox Transformation**](#section-six_two)\n    3. [**Differencing**](#section-six_three)\n        1. [**ADF Test**](#section-six_three_one)\n        2. [**KPSS Test**](#section-six_three_two)\n        3. [**Auto-Correlation Function (ACF) Plot**](#section-six_three_three)\n        4. [**Partial Auto-Correlation Function (ACF) Plot**](#section-six_three_four)\n    4. [**Split into Train & Test Datasets**](#section-six_four)\n    5. [**Auto Regression Method (AR)**](#section-six_five)\n        1. [**Recover Original Time Series Forecast**](#section-six_five_one)\n        2. [**Plot Train, Test and Forecast**](#section-six_five_two)\n        3. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-six_five_three)\n    6. [**Moving Average Method (AR)**](#section-six_six)\n        1. [**Recover Original Time Series Forecast**](#section-six_six_one)\n        2. [**Plot Train, Test and Forecast**](#section-six_six_two)\n        3. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-six_six_three)\n    7. [**Auto Regressive Moving Average Method (ARMA)**](#section-six_seven)\n        1. [**Recover Original Time Series Forecast**](#section-six_seven_one)\n        2. [**Plot Train, Test and Forecast**](#section-six_seven_two)\n        3. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-six_seven_three)\n    8. [**Auto Regressive Integrated Moving Average Method (ARIMA)**](#section-six_eight)\n        1. [**Recover Original Time Series Forecast**](#section-six_eight_one)\n        2. [**Plot Train, Test and Forecast**](#section-six_eight_two)\n        3. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-six_eight_three)\n    9. [**Seasonal Auto Regressive Integrated Moving Average Method (SARIMA)**](#section-six_nine)\n        1. [**Recover Original Time Series Forecast**](#section-six_nine_one)\n        2. [**Plot Train, Test and Forecast**](#section-six_nine_two)\n        3. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-six_nine_three)\n    10. [**Seasonal Auto Regressive Integrated Moving Average with Exogeneous variable Method (SARIMAX)**](#section-six_ten)\n        1. [**Recover Original Time Series Forecast**](#section-six_ten_one)\n        2. [**Plot Train, Test and Forecast**](#section-six_ten_two)\n        3. [**Calculate RMSE and MAPE to Evaluate Forecast**](#section-six_ten_three)","d61976a1":"<a id=\"section-six_eight_three\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast ","62cc7b04":"<a id=\"section-six_seven_three\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast ","2063a8a2":"<a id=\"section-four_two_two\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast","35b63c0a":"<a id=\"section-five_two_one\"><\/a>\n### Plot Train, Test and Forecast","94028be3":"<a id=\"section-six_two\"><\/a>\n## Box Cox Transformation","687051c9":"<a id=\"section-three\"><\/a>\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Build and Evaluate Time Series Forecast<\/p>\n<\/div>\n\n<a id=\"section-three_one\"><\/a>\n## Splitting Time Series into Training and Test Series","1ed0354f":"<a id=\"section-four_one_one\"><\/a>\n### Plot Train, Test and Forecast","b12f48f8":"<a id=\"section-six_nine\"><\/a>\n## Seasonal Auto Regressive Integrated Moving Average Method (SARIMA)","3c849b80":"<a id=\"section-five_three_one\"><\/a>\n### Plot Train, Test and Forecast","cfa67149":"<a id=\"section-six_ten_one\"><\/a>\n### Recover Original Time Series Forecast","24fddd61":"<a id=\"section-six_six\"><\/a>\n## Moving Average Method (MA)","63644f85":"<a id=\"section-six_six_two\"><\/a>\n### Plot Train, Test and Forecast ","81dee3bb":"<a id=\"section-two_two_two\"><\/a>\n### Linear Interpolation","6f4bf72f":"<a id=\"section-five\"><\/a>\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Exponential Smoothing Methods<\/p>\n<\/div>\n\n<a id=\"section-five_one\"><\/a>\n## Simple Exponential Smoothing","e96f3271":"<a id=\"section-six_three_three\"><\/a>\n### Auto-Correlation Function (ACF) Plot","b93a8ae2":"<a id=\"section-six_eight_one\"><\/a>\n### Recover Original Time Series Forecast","62ffcf78":"<a id=\"section-six_six_three\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast ","f267bec9":"<a id=\"section-two_two_three\"><\/a>\n### Use Linear Interpolation to Impute Missing Value","b7fa586b":"<a id=\"section-two_three\"><\/a>\n## Outlier Detection\n\n<a id=\"section-two_three_one\"><\/a>\n### Box Plot & Interquartile Range","e4ca96ce":"<a id=\"section-six_five_two\"><\/a>\n### Plot Train, Test and Forecast ","dbb0e277":"<a id=\"section-six_seven_one\"><\/a>\n### Recover Original Time Series Forecast","2f18cff5":"<a id=\"section-four_three\"><\/a>\n## Simple Moving Average Method","54595b5d":"<a id=\"section-six_seven\"><\/a>\n## Auto Regressive Moving Average Method (ARMA)","8852141c":"<a id=\"section-five_one_one\"><\/a>\n### Plot Train, Test and Forecast","8e4ee38c":"<a id=\"section-six_one_two\"><\/a>\n### Augumented Dickey-Fuller (ADF) Test","506d5dec":"<a id=\"section-six\"><\/a>\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Auto Regressive Models<\/p>\n<\/div>\n\n<a id=\"section-six_one\"><\/a>\n## Stationary vs Non-stationary Time Series\n\n<a id=\"section-six_one_one\"><\/a>\n### Time Series Plot","a6d43b02":"<a id=\"section-six_one_three\"><\/a>\n### KPSS Test","5bf95b4d":"<a id=\"section-two_two\"><\/a>\n## Missing Value Treatment\n\n<a id=\"section-two_two_one\"><\/a>\n### Mean Imputation","b9eb6355":"<a id=\"section-four_two\"><\/a>\n## Simple Average Method","d0db8847":"<a id=\"section-five_two_two\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast","25484bd9":"<a id=\"section-five_four\"><\/a>\n## Holt Winter's Multiplicative Method with Trend & Seasonality","39043f9c":"<a id=\"section-six_nine_one\"><\/a>\n### Recover Original Time Series Forecast","d407bda5":"<a id=\"section-five_four_one\"><\/a>\n### Plot Train, Test and Forecast","adb7a3ae":"<a id=\"section-six_five\"><\/a>\n## Auto Regression Method (AR)","1d71758f":"<a id=\"section-one_two\"><\/a>\n## Import Time Series Data : Airline Passenger Traffic","4bdb661f":"<a id=\"section-five_three_two\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast","7505058f":"<a id=\"section-four_three_two\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast","d0f0f6d9":"<a id=\"section-five_one_two\"><\/a>\n### Calculate RMSE and MAPE to Evaluate Forecast","c5e5b36c":"<a id=\"section-six_eight_two\"><\/a>\n### Plot Train, Test and Forecast ","12ed8240":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Thank You<\/p>\n<\/div>","a77e27da":"<a id=\"section-six_ten_two\"><\/a>\n### Plot Train, Test and Forecast "}}