{"cell_type":{"05853aa7":"code","fee16f5d":"code","2316458d":"code","9be59c13":"code","fec61a05":"code","0f34a7e8":"code","d7adb6ea":"code","62413b5b":"code","011dce39":"code","7078e893":"code","6606a2bf":"code","73c90abc":"code","6a372f53":"code","4ce5e14c":"code","66cdfb31":"code","512c6018":"code","fc6c77e9":"code","3b123330":"code","f9316f31":"code","cfbe4bf8":"code","96076d4a":"code","51a185e4":"code","758a9572":"code","bcd19930":"code","7a555085":"code","21006c1f":"code","3d85549b":"code","2539262e":"code","ffeab2d5":"code","22fb51b8":"code","ed8a0328":"code","b8af60ff":"code","bad12a2d":"code","1cc60091":"code","ab6d1f56":"code","66bd0bd4":"code","7aef66c1":"code","641fecf3":"code","4f9c1e59":"code","9f48a7bf":"code","1bce0f24":"code","b4d697e6":"code","d0220f3c":"code","9d199397":"code","7e3b3d21":"code","4f0f6f45":"code","80173faf":"code","ccebadbc":"code","3e2b492a":"code","f7ff29fa":"code","c410a948":"code","24278fc7":"code","c916df90":"code","a8d61c06":"code","5b360f15":"code","789db03c":"code","d450ba54":"code","593009ff":"code","7d22d83b":"code","d4e50c1d":"code","56145cd1":"code","0bf26a79":"markdown","df3ff65d":"markdown","f5737c6c":"markdown","c4b503af":"markdown","60d4907a":"markdown","d76fb54a":"markdown","1a2983c3":"markdown","04f8ad05":"markdown","dad0784f":"markdown","f28f8b50":"markdown","52914010":"markdown","eef2a90d":"markdown","cf12daaf":"markdown","03845786":"markdown","c6987a05":"markdown","312612a7":"markdown","77adcb23":"markdown","406c2878":"markdown","9ce5de38":"markdown","b6af26e1":"markdown","1572fcd6":"markdown","38ba1fea":"markdown"},"source":{"05853aa7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fee16f5d":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n## Display all the columns of the dataframe\n\npd.pandas.set_option('display.max_columns',None)\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","2316458d":"train.head()","9be59c13":"train.info()","fec61a05":"train['SalePrice'].describe()","0f34a7e8":"print(\"Skewness = \", train['SalePrice'].skew())\nprint(\"Kurtosis = \", train['SalePrice'].kurtosis())","d7adb6ea":"from scipy import stats\nfrom scipy.stats import norm, skew\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.distplot(train['SalePrice'], fit=norm)\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint('\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","62413b5b":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain.loc[:, \"SalePrice\"] = np.log1p(train.loc[:, \"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","011dce39":"train.iloc[np.where(train.GrLivArea > 4000)]","7078e893":"test.iloc[np.where(test.GrLivArea > 4000)]","6606a2bf":"plt.grid()\nscatter = sns.regplot(x='GrLivArea', y='SalePrice', fit_reg =False, data=train)","73c90abc":"# dropping the outliers in the train set\ntrain = train.drop(train[train['Id'] == 524].index)\ntrain = train.drop(train[train['Id'] == 1299].index)\n","6a372f53":"ntrain = train.shape[0]\nntest = test.shape[0]","4ce5e14c":"# combining train and test values\ndata = pd.concat((train, test)).reset_index(drop=True)\ntrain_y = pd.DataFrame(train.SalePrice)\nID = data['Id']\ndata.drop('Id', axis = 1, inplace = True)\ndata.shape","66cdfb31":"data = data.drop(['SalePrice'], axis = 1)","512c6018":"data.head()","fc6c77e9":"# determine the threshold for missing values\ndef percent_missing(df):\n    data = pd.DataFrame(df)\n    df_cols = list(pd.DataFrame(data))\n    dict_x = {}\n    for i in range(0, len(df_cols)):\n        dict_x.update({df_cols[i]: round(data[df_cols[i]].isnull().mean()*100,2)})\n    \n    return dict_x\n\nmissing = percent_missing(data)\ndf_miss = sorted(missing.items(), key=lambda x: x[1], reverse=True)\nprint('Percent of missing data')\ndf_miss[0:20]","3b123330":"# Handle missing values for features where median\/mean or most common value doesn't make sense\n\n# Alley : data description says NA means \"no alley access\"\ndata.loc[:, \"Alley\"] = data.loc[:, \"Alley\"].fillna(\"None\")\n# BedroomAbvGr : NA most likely means 0\ndata.loc[:, \"BedroomAbvGr\"] = data.loc[:, \"BedroomAbvGr\"].fillna(0)\n# BsmtQual etc : data description says NA for basement features is \"no basement\"\ndata.loc[:, \"BsmtQual\"] = data.loc[:, \"BsmtQual\"].fillna(\"No\")\ndata.loc[:, \"BsmtCond\"] = data.loc[:, \"BsmtCond\"].fillna(\"No\")\ndata.loc[:, \"BsmtExposure\"] = data.loc[:, \"BsmtExposure\"].fillna(\"No\")\ndata.loc[:, \"BsmtFinType1\"] = data.loc[:, \"BsmtFinType1\"].fillna(\"No\")\ndata.loc[:, \"BsmtFinType2\"] = data.loc[:, \"BsmtFinType2\"].fillna(\"No\")\ndata.loc[:, \"BsmtFullBath\"] = data.loc[:, \"BsmtFullBath\"].fillna(0)\ndata.loc[:, \"BsmtHalfBath\"] = data.loc[:, \"BsmtHalfBath\"].fillna(0)\ndata.loc[:, \"BsmtUnfSF\"] = data.loc[:, \"BsmtUnfSF\"].fillna(0)\ndata.loc[:, \"BsmtFinSF1\"] = data.loc[:, \"BsmtUnfSF\"].fillna(0)\ndata.loc[:, \"BsmtFinSF2\"] = data.loc[:, \"BsmtUnfSF\"].fillna(0)\ndata.loc[:, \"BsmtFinSF2\"] = data.loc[:, \"BsmtUnfSF\"].fillna(0)\ndata.loc[:, \"TotalBsmtSF\"] = data.loc[:, \"BsmtUnfSF\"].fillna(0)\n# CentralAir : NA most likely means No\ndata.loc[:, \"CentralAir\"] = data.loc[:, \"CentralAir\"].fillna(\"N\")\n# Condition : NA most likely means Normal\ndata.loc[:, \"Condition1\"] = data.loc[:, \"Condition1\"].fillna(\"Norm\")\ndata.loc[:, \"Condition2\"] = data.loc[:, \"Condition2\"].fillna(\"Norm\")\n# EnclosedPorch : NA most likely means no enclosed porch\ndata.loc[:, \"EnclosedPorch\"] = data.loc[:, \"EnclosedPorch\"].fillna(0)\n# External stuff : NA most likely means average\ndata.loc[:, \"ExterCond\"] = data.loc[:, \"ExterCond\"].fillna(\"TA\")\ndata.loc[:, \"ExterQual\"] = data.loc[:, \"ExterQual\"].fillna(\"TA\")\ndata.loc[:, \"Exterior1st\"] = data.loc[:, \"Exterior1st\"].fillna(\"None\")\ndata.loc[:, \"Exterior2nd\"] = data.loc[:, \"Exterior2nd\"].fillna(\"None\")\n# Fence : data description says NA means \"no fence\"\ndata.loc[:, \"Fence\"] = data.loc[:, \"Fence\"].fillna(\"No\")\n# FireplaceQu : data description says NA means \"no fireplace\"\ndata.loc[:, \"FireplaceQu\"] = data.loc[:, \"FireplaceQu\"].fillna(\"No\")\ndata.loc[:, \"Fireplaces\"] = data.loc[:, \"Fireplaces\"].fillna(0)\n# Functional : data description says NA means typical\ndata.loc[:, \"Functional\"] = data.loc[:, \"Functional\"].fillna(\"Typ\")\n# GarageType etc : data description says NA for garage features is \"no garage\"\ndata.loc[:, \"GarageType\"] = data.loc[:, \"GarageType\"].fillna(\"No\")\ndata.loc[:, \"GarageFinish\"] = data.loc[:, \"GarageFinish\"].fillna(\"No\")\ndata.loc[:, \"GarageQual\"] = data.loc[:, \"GarageQual\"].fillna(\"No\")\ndata.loc[:, \"GarageCond\"] = data.loc[:, \"GarageCond\"].fillna(\"No\")\ndata.loc[:, \"GarageYrBlt\"] = data.loc[:, \"GarageYrBlt\"].fillna(0)\ndata.loc[:, \"GarageArea\"] = data.loc[:, \"GarageArea\"].fillna(0)\ndata.loc[:, \"GarageCars\"] = data.loc[:, \"GarageCars\"].fillna(0)\n# HalfBath : NA most likely means no half baths above grade\ndata.loc[:, \"HalfBath\"] = data.loc[:, \"HalfBath\"].fillna(0)\n# HeatingQC : NA most likely means typical\ndata.loc[:, \"HeatingQC\"] = data.loc[:, \"HeatingQC\"].fillna(\"TA\")\n# KitchenAbvGr : NA most likely means 0\ndata.loc[:, \"KitchenAbvGr\"] = data.loc[:, \"KitchenAbvGr\"].fillna(0)\n# KitchenQual : NA most likely means typical\ndata.loc[:, \"KitchenQual\"] = data.loc[:, \"KitchenQual\"].fillna(\"TA\")\n# LotFrontage : NA most likely means no lot frontage\ndata.loc[:, \"LotFrontage\"] = data.loc[:, \"LotFrontage\"].fillna(0)\n# LotShape : NA most likely means regular\ndata.loc[:, \"LotShape\"] = data.loc[:, \"LotShape\"].fillna(\"Reg\")\n# MasVnrType : NA most likely means no veneer\ndata.loc[:, \"MasVnrType\"] = data.loc[:, \"MasVnrType\"].fillna(\"None\")\ndata.loc[:, \"MasVnrArea\"] = data.loc[:, \"MasVnrArea\"].fillna(0)\n# MiscFeature : data description says NA means \"no misc feature\"\ndata.loc[:, \"MiscFeature\"] = data.loc[:, \"MiscFeature\"].fillna(\"No\")\ndata.loc[:, \"MiscVal\"] = data.loc[:, \"MiscVal\"].fillna(0)\n# OpenPorchSF : NA most likely means no open porch\ndata.loc[:, \"OpenPorchSF\"] = data.loc[:, \"OpenPorchSF\"].fillna(0)\n# PavedDrive : NA most likely means not paved\ndata.loc[:, \"PavedDrive\"] = data.loc[:, \"PavedDrive\"].fillna(\"N\")\n# PoolQC : data description says NA means \"no pool\"\ndata.loc[:, \"PoolQC\"] = data.loc[:, \"PoolQC\"].fillna(\"No\")\ndata.loc[:, \"PoolArea\"] = data.loc[:, \"PoolArea\"].fillna(0)\n# SaleCondition : NA most likely means normal sale\ndata.loc[:, \"SaleCondition\"] = data.loc[:, \"SaleCondition\"].fillna(\"Normal\")\n# ScreenPorch : NA most likely means no screen porch\ndata.loc[:, \"ScreenPorch\"] = data.loc[:, \"ScreenPorch\"].fillna(0)\n# TotRmsAbvGrd : NA most likely means 0\ndata.loc[:, \"TotRmsAbvGrd\"] = data.loc[:, \"TotRmsAbvGrd\"].fillna(0)\n# Utilities : NA most likely means all public utilities\ndata.loc[:, \"Utilities\"] = data.loc[:, \"Utilities\"].fillna(\"AllPub\")\n# WoodDeckSF : NA most likely means no wood deck\ndata.loc[:, \"WoodDeckSF\"] = data.loc[:, \"WoodDeckSF\"].fillna(0)\n# Electrical: NA not explicitly assigned in the data description will be filled with the mode in the Neighborhood\ndata['Electrical'] = data.groupby(['Neighborhood','MSSubClass' ])['Electrical'].apply(lambda x: x.fillna(x.value_counts().index[0]))\n# MSZoning: NA not explicitly assigned in the data description will be filled with the mode\ndata['MSZoning'] = data['MSZoning'].fillna(data['MSZoning'].mode()[0])\n# SaleType : NA most likely means Other\ndata.loc[:, \"SaleType\"] = data.loc[:, \"SaleType\"].fillna(\"Oth\")","f9316f31":"# Let's make sure we handled all the missing values\nmissing = percent_missing(train)\ndf_miss = sorted(missing.items(), key=lambda x: x[1], reverse=True)\nprint('Percent of missing data')\ndf_miss[0:10]","cfbe4bf8":"#Correlation:  Its the most basic way to find relation between any two quantities.\ncorr = train.corr()\n\nplt.figure(figsize=(15,15))\n\nsns.heatmap(corr,vmax=0.9,square=True)\nplt.show()\n","96076d4a":"# correlation\ncorr = train.corr()\n# sort in descending order\ncorr_top = corr['SalePrice'].abs().sort_values(ascending=False)[:15]#getting top 15 features\n#.abs() is necesasry to get both strong positive and strong negative correlation\ntop_features = corr_top.index[1:]\n\ncorr_top","51a185e4":"# Top features and SalePrice\nfig,ax=plt.subplots(nrows=14,ncols=1,figsize=(6,30))\nfor i in range(len(top_features)):    \n\n    ax[i].scatter(x=train[top_features[i]], y=train['SalePrice'])\n    ax[i].set_xlabel('%s'%(top_features[i]))\n    ax[i].set_ylabel('SalePrice')\n\nplt.tight_layout()\nplt.savefig('.\/Top_featuresvsSalePrice.jpg',dpi=300,bbox_inches='tight')\nplt.show()","758a9572":"numeric_cols = ['GrLivArea','GarageArea','TotalBsmtSF','1stFlrSF','YearBuilt']\nnominal_cols = ['OverallQual','GarageCars','FullBath','TotRmsAbvGrd']","bcd19930":"# impute ordinal data with numeric values\ndata['KitchenQual'].replace(['Ex','Gd','TA','Fa'],[4,3,2,1],inplace=True)\ndata['FireplaceQu'].replace(['Ex','Gd','TA','Fa','Po', 'No'],[6,5,4,3,2,1],inplace=True)\ndata['GarageQual'].replace(['Ex','Gd','TA','Fa','Po','No'],[6,5,4,3,2,1],inplace=True)\ndata['GarageCond'].replace(['Ex','Gd','TA','Fa','Po','No'],[6,5,4,3,2,1],inplace=True)\ndata['PoolQC'].replace(['Ex','Gd','TA','Fa','No'],[5,4,3,2,1],inplace=True)\ndata['ExterQual'].replace(['Ex','Gd','TA','Fa'],[4,3,2,1],inplace=True)\ndata['ExterCond'].replace(['Ex','Gd','TA','Fa','Po'],[5,4,3,2,1],inplace=True)\ndata['BsmtQual'].replace(['Ex','Gd','TA','Fa','Po','No'],[6,5,4,3,2,1],inplace=True)\ndata['BsmtCond'].replace(['Ex','Gd','TA','Fa','Po','No'],[6,5,4,3,2,1],inplace=True)\ndata['BsmtExposure'].replace(['Gd','Av','Mn','No','None'],[5,4,3,2,1],inplace=True)\ndata['HeatingQC'].replace(['Ex','Gd','TA','Fa','Po'],[5,4,3,2,1],inplace=True)\n# transform discrete features to  categorical feature\ndata['MSSubClass'] = data['MSSubClass'].astype(str)\ndata['YrSold'] = data['YrSold'].astype(str)   \ndata['MoSold'] = data['MoSold'].astype(str)","7a555085":"# combinations of old features\ndata['GarageScale'] = data['GarageCars'] * data['GarageArea']\n\ndata['GarageOrdinal'] = data['GarageQual'] + data['GarageCond']\ndata['AllPorch'] = data['OpenPorchSF'] + data['EnclosedPorch'] + data['3SsnPorch'] + data['ScreenPorch']\ndata['ExterOrdinal'] = data['ExterQual'] + data['ExterCond']\ndata['KitchenCombined'] = data['KitchenQual'] * data['KitchenAbvGr']\ndata['FireplaceCombined'] = data['FireplaceQu'] * data['Fireplaces']\ndata['BsmtOrdinal'] = data['BsmtQual'] + data['BsmtCond']\ndata['BsmtFinishedAll'] = data['BsmtFinSF1'] + data['BsmtFinSF2']\ndata['AllFlrSF'] = data['1stFlrSF'] + data['2ndFlrSF']\ndata['OverallCombined'] = data['OverallQual'] + data['OverallCond']\ndata['TotalFullBath'] = data['BsmtFullBath'] +  + data[\"FullBath\"] \ndata['TotalHalfBath'] = data[\"HalfBath\"] + data['BsmtHalfBath']\ndata['TotalSF'] = data['AllFlrSF'] + data['TotalBsmtSF']\ndata['YrBltAndRemod'] = data[\"YearRemodAdd\"] + data['YearBuilt']\ndata=data.drop(['GarageCars','GarageArea','GarageQual','GarageCond','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','ExterQual','ExterCond','KitchenQual','KitchenAbvGr','FireplaceQu','Fireplaces','BsmtQual','BsmtCond','BsmtFinSF1',\n               'BsmtFinSF2','1stFlrSF','2ndFlrSF','OverallQual','OverallCond','BsmtFullBath',\"FullBath\",\"HalfBath\",'BsmtHalfBath','AllFlrSF','TotalBsmtSF',\n               \"YearRemodAdd\",'YearBuilt'],axis=1)\n\n","21006c1f":"numeric_feats = data.dtypes[data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","3d85549b":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    data[feat] = boxcox1p(data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","2539262e":"data = pd.get_dummies(data)\nprint(data.shape)","ffeab2d5":"data.head()","22fb51b8":"# Let's make sure we handled all the missing values\nmissing = percent_missing(data)\ndf_miss = sorted(missing.items(), key=lambda x: x[1], reverse=True)\nprint('Percent of missing data')\ndf_miss[0:5]","ed8a0328":"#Features with zero values that can be described as almost 100% can cause overfitting and will be dropped","b8af60ff":"overfit = []\nfor i in data.columns:\n    counts = data[i].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(data) * 100 > 99.94:\n        overfit.append(i)\n\noverfit = list(overfit)\ndata = data.drop(overfit, axis=1)","bad12a2d":"train_x = pd.concat([ID[:ntrain], data[:ntrain]], axis = 1)\ntest_x = pd.concat([ID[ntrain:], data[ntrain:]], axis = 1)\nprint(\"Train:\", train_x.shape)\nprint(\"Test:\",test_x.shape)","1cc60091":"from sklearn.preprocessing import RobustScaler\nrs = RobustScaler()\nrs.fit(train_x)\ntrain_x = rs.transform(train_x)\n# train_x = pd.DataFrame(train_x, columns = index)","ab6d1f56":"from sklearn.metrics import make_scorer, mean_squared_error\n\ndef mean_squared_error_(ground_truth, predictions):\n    return mean_squared_error(ground_truth, predictions) ** 0.5\nRMSE = make_scorer(mean_squared_error_, greater_is_better=False)","66bd0bd4":"#LETS MAKE TRAINING AND VALIDATION SET","7aef66c1":"#splitting the dataset as training and Validation dataset\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(train_x, train_y, test_size = 0.2)\n","641fecf3":"\n#building the model\nfrom sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(X_train, y_train)\n\n#Accuracy\nprint(\"R-Squared Value for Training Set: {:.3f}\".format(linreg.score(X_train, y_train)))\nprint(\"R-Squared Value for Validation Set: {:.3f}\".format(linreg.score(X_val, y_val)))","4f9c1e59":"print('The train log RMSE is {:.4f}'.format(mean_squared_error_(linreg.predict(X_train), y_train)))\nprint('The validation Log RMSE is {:.4f}'.format(mean_squared_error_(linreg.predict(X_val), y_val)))","9f48a7bf":"from sklearn.linear_model import Ridge\n\nridge = Ridge()\nridge.fit(X_train, y_train)\n\nprint('R-squared score (training): {:.3f}'.format(ridge.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}'.format(ridge.score(X_val, y_val)))","1bce0f24":"print('The train log RMSE is {:.4f}'.format(mean_squared_error_(ridge.predict(X_train), y_train)))\nprint('The validation Log RMSE is {:.4f}'.format(mean_squared_error_(ridge.predict(X_val), y_val)))","b4d697e6":"from sklearn.linear_model import Lasso\n\nlasso = Lasso(max_iter = 1000)\nlasso.fit(X_train, y_train)\n\nprint('R-squared score (training): {:.3f}'.format(lasso.score(X_train, y_train)))\nprint('R-squared score (validation): {:.3f}'.format(lasso.score(X_val, y_val)))","d0220f3c":"print('The train log RMSE is {:.4f}'.format(mean_squared_error_(lasso.predict(X_train), y_train)))\nprint('The validation Log RMSE is {:.4f}'.format(mean_squared_error_(lasso.predict(X_val), y_val)))","9d199397":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom time import time\n\nclf = RandomForestRegressor()\n\nparam_grid = {'min_samples_split': [2, 10, 50, 100],\n              'min_samples_leaf': [1, 10, 50, 100],\n              'n_estimators': [100, 500, 1000],\n              'max_depth': [1, 5, 10, None]\n             }\n\n# run grid search\ngrid_search = GridSearchCV(clf, param_grid=param_grid, cv=3, scoring= 'neg_mean_squared_error', n_jobs = 6, verbose=True)\nstart = time()\ngrid_search.fit(X_train, y_train)\n\nprint(\"GridSearchCV took %.2f seconds for %d candidate parameter settings.\"\n      % (time() - start, len(grid_search.cv_results_['params'])))","7e3b3d21":"grid_search.best_score_, grid_search.best_params_","4f0f6f45":"rf = RandomForestRegressor(max_depth = 10, min_samples_split= 2, min_samples_leaf= 1)","80173faf":"rf.fit(X_train, y_train)","ccebadbc":"print('R-squared score (training): {:.3f}'.format(rf.score(X_train, y_train)))\nprint('R-squared score (validation): {:.3f}'.format(rf.score(X_val, y_val)))","3e2b492a":"print('The train log RMSE is {:.4f}'.format(mean_squared_error_(rf.predict(X_train), y_train)))\nprint('The validation Log RMSE is {:.4f}'.format(mean_squared_error_(rf.predict(X_val), y_val)))","f7ff29fa":"y_pred = rf.predict(test_x)","c410a948":"y_pred = np.expm1(y_pred)\ny_pred","24278fc7":"from sklearn.ensemble import GradientBoostingRegressor\n\nclf = GradientBoostingRegressor()\n\nparam_grid = {'learning_rate': [0.1, 0.05, 0.01],\n              'max_depth': [3, 7, 10],\n              'min_samples_leaf': [1, 20, 50, 100],\n              \"min_samples_split\": [2, 10, 25, 50],\n              \"n_estimators\": [1000],\n              \"subsample\": [0.6, 0.8, 1.0]\n             }\n\n# run grid search\ngrid_search = GridSearchCV(clf, param_grid=param_grid, cv=3, scoring= 'neg_mean_squared_error', n_jobs = 6, verbose=True)\nstart = time()\ngrid_search.fit(X_train, y_train['SalePrice'])\n\nprint(\"GridSearchCV took %.2f seconds for %d candidate parameter settings.\"\n      % (time() - start, len(grid_search.cv_results_['params'])))","c916df90":"print('The train Log RMSE is {:.4f}'.format(mean_squared_error_(gbr.predict(train_x), train_y)))","a8d61c06":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\n","5b360f15":"model_new=Pipeline([(\"poly\",PolynomialFeatures(degree=2)),(\"linear\",LinearRegression(fit_intercept=False))])","789db03c":"model_new.fit(X_train,y_train)","d450ba54":"#Accuracy\nprint(\"R-Squared Value for Training Set: {:.3f}\".format(model_new.score(X_train, y_train)))\nprint(\"R-Squared Value for Validation Set: {:.3f}\".format(model_new.score(X_val, y_val)))","593009ff":"y_pred_new = model_new.predict(test_x)\ny_pred_new","7d22d83b":"my_submission = pd.DataFrame({'Id': test_x.Id, 'SalePrice': y_pred_new[:,0]})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","d4e50c1d":"my_submission","56145cd1":"my_submission","0bf26a79":"**Combining test and train data**","df3ff65d":"**Feature Extraction**","f5737c6c":"Box Cox Transformation of (highly) skewed features\n\nWe use the scipy function boxcox1p which computes the Box-Cox transformation of  1+x .\n\nNote that setting  \u03bb=0  is equivalent to log1p used above for the target variable.","c4b503af":" Dean De Cook author of Ames house dataset recommended the removal of some 5 outliers representing unsual sales in GrLivArea greater than 4000 square feet. Ref: www.amstat.org\/publications\/jse\/v19n3\/decock.pdf","60d4907a":"**Categorical encoding** Lets do one hot encoding of categorical features now","d76fb54a":"**Now lets handle missing values**","1a2983c3":"2 of the houses are outliers, large houses prized relatively low, while the 2 on top in the scatter are very large houses with commensurate sales. The 2 outliers in the train set will be removed.","04f8ad05":"**Top co_related features to sales price are: GrLivArea(Highly correlated),OverallQual(Higly corelated), TotRmsAbvGrd, GarageYrBlt and YearBuilt, 1stFlrSF and TotalBsmtSF,GarageArea and GarageCars etc.**","dad0784f":"It can be clearly seen that our data is more close to normal distribution now.","f28f8b50":"**1.) LINEAR REGRESSION**","52914010":"**4.)Random Forest Regression**","eef2a90d":"to do one hot encoding of categorical features we are combining train and test data","cf12daaf":"**3.)LASSO Regression**","03845786":"Feature Extraction:\n1.)Create new features from existing features. \n2.)There are 2 types of categorical variables, nominal and ordinal. The ordinal variables show some rank and will be encoded with numeric values.","c6987a05":"**6.) Polynomial regression**","312612a7":"Now lets explore what we have to predict","77adcb23":"**2.) Ridge Regression**","406c2878":"some features which are related to each other can be combined together","9ce5de38":"It can be clearly seen that the data is right skewed. Regression model performs better for normally distributed data.\nAs it can be seen that lower values and higher values makes our data deviating.So lets make variable trandform which can diminish this difference.\nLog Transform seems viable for our purpose here","b6af26e1":"**5.)Gradient Boost Regression**","1572fcd6":"**Skewed Features**","38ba1fea":"**Removing Outliers as suggested by  Dean De Cook author of Ames house dataset**"}}