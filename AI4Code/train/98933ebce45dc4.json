{"cell_type":{"4c674ec0":"code","b2db8054":"code","c30cdb5d":"code","1a077c3a":"code","a3baba01":"code","249d53b2":"code","babd6da1":"code","3686149e":"code","cdc40859":"code","f4aab3b9":"code","9643e1ea":"code","8c23a5f0":"code","67afa850":"code","177e9bfd":"code","4712cd08":"code","ef1588c1":"code","c9f7f785":"code","5bc56faa":"code","8a3e19a3":"code","e7c065b6":"code","2012b4b5":"code","ce8568d9":"code","ef1a3dad":"code","9a60d52d":"code","9cfa4455":"code","4ca2da5c":"code","2eaed622":"code","e174d2ee":"code","e23dccf7":"code","21771f11":"code","a039c6cd":"code","da156289":"code","cde7924e":"code","fee0c009":"code","86181468":"code","ed147f67":"code","7932bef0":"code","3f3c1497":"markdown","6bf13293":"markdown","9bfb6bd3":"markdown","e2e9fa1f":"markdown","107acfb2":"markdown","d7143bf1":"markdown","8859948f":"markdown","57cbf448":"markdown","72df5400":"markdown","3c7d4478":"markdown","3ff8c264":"markdown","e5bc5996":"markdown","4e3f6cbc":"markdown","e09cfcd2":"markdown","c7c624e0":"markdown","58acaed9":"markdown","fb341f16":"markdown","a8637687":"markdown","071565df":"markdown"},"source":{"4c674ec0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","b2db8054":"data = pd.read_csv('..\/input\/NBA_player_of_the_week.csv')","c30cdb5d":"data.info()","1a077c3a":"data.corr()","a3baba01":"\n#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n\n","249d53b2":"data.head(10)","babd6da1":"data.columns\n","3686149e":"#Line Plot\n\ndata.Age.plot(kind = 'line', color ='g',label='Age',linewidth=2,alpha=0.5,grid=True,linestyle=':')\ndata.Weight.plot(color='b',label='Weight',linewidth=1,alpha=0.5,grid=True,linestyle='-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\n\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis') \nplt.title('Line Plot')            # title = title of plot\nplt.show()\n\n\n","cdc40859":"# Scatter Plot\n# x = age, y = weight\ndata.plot(kind='scatter', x='Age', y='Weight',alpha=0.5,color='yellow')\nplt.xlabel('Age')\nplt.ylabel('Weight')\nplt.title('Age-Weight Scatter Plot')\n\n","f4aab3b9":"# Histogram\n# bins = numer of bar in figure\ndata.Weight.plot(kind ='hist',bins = 25,figsize =(12,12))\nplt.show()","9643e1ea":"# clf() =  clear and restart\ndata.Weight.plot(kind='hist', bins = 25)\nplt.clf()\n","8c23a5f0":"#create dictionary and keys-values\ndictionary ={'turkey' : 'istanbul' , 'france' : 'paris'}\nprint(dictionary.keys())\nprint(dictionary.values())\n","67afa850":"# Keys ---> string,boolean,float,integer or tubles\n# List isn't immutable\n# Keys is unique\ndictionary['turkey'] = \"izmir\"    # update \nprint(dictionary)\ndictionary['usa'] = \"chicago\"     #add new entry\nprint(dictionary)\ndel dictionary['france']          #remove entry(key and value)\nprint(dictionary)\nprint('usa' in dictionary)        #check entry include or not\ndictionary.clear()                #remove all entries\nprint(dictionary)\n\n\n\n","177e9bfd":"# Code error if you do not comment this code.\n# del dictionary","4712cd08":"data = pd.read_csv('..\/input\/NBA_player_of_the_week.csv')","ef1588c1":"series = data['Age']\nprint(type(series))\ndata_frame = data[['Age']]\nprint(type(data_frame))","c9f7f785":"# Comparison operator\nprint(5<2)\nprint(5!=1)\n# Boolean operators\nprint(False and True)\nprint(False or True)","5bc56faa":"# 1 -Filtering Pandas data frame\nx = data ['Weight']<180\ndata[x]","8a3e19a3":"# 2- Filtering pandas with logical_and\ndata[np.logical_and(data['Age']>35, data['Weight']>250)]","e7c065b6":"# Logical &(AND) operator\ndata[(data['Age']>35) & (data['Weight']>250)]","2012b4b5":"# Stay in loop if condition( i is not equal 5) is true\ni=0\nwhile i != 5:\n    print('i is:',i)\n    i+=1\nprint(i,'is equal to 5')    ","ce8568d9":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is:',i)\nprint('')    \n\n# Enumerate index and value of list\nfor index, value in enumerate(lis):\n      print(index,\" : \",value)\nprint('')    \n# Enumerate index and value of list for dictionaries\ndictionary ={'spain' : 'madrid', 'france': 'paris'}\nfor key, value in dictionary.items():\n       print(key,\" : \",value)\nprint('')    \n# Index and value for pandas\nfor index,value in data[['Age']][0:1].iterrows():\n    print(index,\" : \",value)","ef1a3dad":"# example of what we learn tuble\ndef tuble_ex():\n    \"\"\" return defined t tuble \"\"\"\n    tuble =(1,2,3)\n    return tuble\na,b,c = tuble_ex()\nprint(a,b,c)\n\n","9a60d52d":"# how to print\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)        # x = 2 global scope\nprint(f())      # x = 3 local scope","9cfa4455":"# What if there is no local scope\na = 7\ndef f():\n    b = (4*a) + 2      # no local scope x\n    return b\nprint(f())             # uses global scope x\n# First  local searched\n# Second global scope searched\n# If two scope cannot be found built in scope searched","4ca2da5c":"# built in scope\nimport builtins\ndir(builtins)\n","2eaed622":"def square ():\n    \"\"\" return square of value \"\"\"\n    def divide():\n        a = 50\n        b = 10\n        c = a\/b\n        return c\n    return divide()**2\nprint(square())","e174d2ee":"#default arguments\ndef f(x,y =1, z = 2):\n    k =x + y + z\n    return k\nprint(f(3))\n# or change arguments\nprint(f(12,4,7))","e23dccf7":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,5,2,6,7)\n\n# flexible arguments **kwargs --> dictionary\ndef f(**kwargs):\n    \"\"\" print key and value dictonary \"\"\"\n    for key,value in kwargs.items():    #for loop\n        print(key, \" \", value)\nf(country ='turkey', capital ='ankara', region ='ic anadolu' ,population =32135554)        \n        ","21771f11":"# lambda function\nsquare = lambda x: x**2 \nprint(square(4))\ntotal = lambda x,y,z: x+y+z\nprint(total(4,8,6))","a039c6cd":" number_list = [1,2,3]\n y = map (lambda x:x**3,number_list)\n print(list(y))   ","da156289":"# example of iterators\nword = \"software\"\nit = iter(word)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","cde7924e":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","fee0c009":"#unzip example (more)\nun_zip = zip (*z_list)\nun_list1,un_list2 =list(un_zip)   # unzip return tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list1))\n","86181468":"# Example of list comprehension\nnum_list1 = [1,2,3]\nnum_list2 = [i + 1 for i in num_list1 ]\nprint(num_list2)","ed147f67":"# Conditionals on iterable\nnum_list1 = [10,20,30]\nnum_list2 = [i**2 if i==20 else i-10 if i< 15 else i+5 for i in num_list1]\nprint(num_list2)","7932bef0":"# Lets return NBA_player_of_the_week csv\n# lets classify nba players whether they have high or low age.\n# avg_age is average age.\navg_age = sum (data.Age) \/ len(data.Age)\nprint(\"avarage age = \",avg_age)\ndata[\"age_level\"] = [\"high\" if i > avg_age else \"low\" for i in data.Age]\ndata.loc[:10,[\"age_level\",\"Age\"]] \n#How many data will work on it","3f3c1497":"\n\n\n<a id=\"2\"><\/a> <br>\n**MATPLOTLIB**\n\nMatplotlib graphics drawing package Python is one of the most important tools for preparing the program. Matplotlib, which contains a very strong package, can be tailored and output at a suitable height. Both two-dimensional and three-dimensional graphics can be produced.\n\nMatplotlib graphics can be edited in a very subtle way, but here we will focus on their basic structure.\n\n* Line plot represents the relationship between 2 variables.\n* Scatter plot displays the value of 2 sets of data on 2 dimensions.\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle \n\n\n\n\n\n\n\n\n\n","6bf13293":"<a id=\"5\"><\/a> <br>\nLearn **logic, control flow** and **filtering** with pandas.\nComparison operator: ==, <, >, <=\nBoolean operators: and, or ,not\nFiltering pandas","9bfb6bd3":"\n<a id=\"8\"><\/a> <br>\n**USER DEFINED FUNCTION**\n\n*     In Python, a user-defined function's declaration begins with the keyword def and followed by the function name.\n*     The function may take arguments(s) as input within the opening and closing parentheses, just after the function name followed by a colon.\n*     After defining the function name and arguments(s) a block of program statement(s) start at the next line and these statement(s) must be indented.\n\n* docstrings : comments line.Example:\n  \n  for f():\n\"\"\" This is docstring for function f -comment line- \"\"\"\n\n* tuble : sequence of immutable python objects.\n The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.\n Example :\n tuble =(1,2,3)\n\n\n\n\n\n\n\n\n","e2e9fa1f":"<a id=\"11\"><\/a> <br>\n**DEFAULT and FLEXIBLE ARGUMENTS**\n\n* Default Arguments:\ndef f(x,y=1):\n\n\"\"\" y = 1 is default argument\"\"\"\n\n* Flecible Arguments:\ndef f(*args):\n\n\"\"\" *args can be one or more\"\"\"\n\n\ndef f(** kwargs)\n \n \"\"\" ** kwargs is a dictionary\n \n \n Lets practice","107acfb2":"\n\nWhat we learned this part?\n\n*     User defined function\n*     Scope\n*     Nested function\n*     Default and flexible arguments\n*     Lambda function\n*     Anonymous function\n*     Iterators\n*     List comprehension\n\n ","d7143bf1":"<a id=\"9\"><\/a> <br>\n**SCOPE**\n* global : defined main body in script\n* local : defined in a fuction\n* built in scope: names in predefined built in scope module such as print, len\n\nLets practice","8859948f":"**Content:**\n1. [Introduction to Python:](#1)\n    1. [Matplotlib](#2)\n    1. [Dictionaries ](#3)\n    1. [Pandas](#4)\n    1. [Logic, control flow and filtering](#5)\n    1. [Loop data structures](#6)\n1. [Python Data Science Toolbox:](#7)\n    1. [User defined function](#8)\n    1. [Scope](#9)\n    1. [Nested function](#10)\n    1. [Default and flexible arguments](#11)\n    1. [Lambda function](#12)\n    1. [Anonymous function](#13)\n    1. [Iterators](#14)\n    1. [List comprehension](#15)\n","57cbf448":"<a id=\"1\"><\/a> <br>\n# 1. INTRODUCTION TO PYTHON","72df5400":"<a id=\"12\"><\/a> <br>\n**LAMBDA FUNCT\u0130ON**\n\nsmall anonymous (unnamed) functions can be created with lambda keyword.","3c7d4478":"<a id=\"7\"><\/a> <br>\n# 2. PYTHON DATA SCIENCE TOOLBOX","3ff8c264":"<a id=\"3\"><\/a> <br>\n**DICTIONARY**\n\nE.g.\n* dictionary ={'turkey' : 'istanbul'}\n* Key is turkey.\n* Values is istanbul.\n\n--Lets pratice some orther properties...--\nkeys(), values(), update, add,check, remove key, remove all entries and remove dictionary.\n","e5bc5996":"<a id=\"13\"><\/a> <br>\n**ANONYMOUS FUNCTION**\n\nLike lambda function but it can take more than one arguments.\n\n* map (func,seq) : applies function to all the items in a list","4e3f6cbc":"<a id=\"4\"><\/a> <br>\n**PANDAS**\n\n  CSV : comma-seperated values\n\n","e09cfcd2":"<a id=\"6\"><\/a> <br>\n**WHILE and FOR LOOPS**\n","c7c624e0":"<a id=\"15\"><\/a> <br>\n**LIST COMPREHENSION**\n\n* List comprehensions provide a concise way to create lists. \nEx: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long. We can make it one line code that is list comprehension.\n","58acaed9":"\n\n[i + 1 for i in num1 ]: list of comprehension\ni +1: list comprehension syntax\ni: iterator\nnum1: iterable object\n","fb341f16":"\nWhat we learned this part?\n\n*     how to import csv file\n*     plotting line,scatter and histogram\n*     basic dictionary features\n*     basic pandas (Logic, control flow, filtering)\n*     While and for loops\n\n","a8637687":"<a id=\"10\"><\/a> <br>\n**NESTED FUNCTION**\n\n* function inside function\n","071565df":"<a id=\"14\"><\/a> <br>\n**ITERATORS**\n\n\n* An iterator is an object that contains a countable number of values.\n\n* An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.\n\n* Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__()."}}