{"cell_type":{"23920914":"code","bda3e3f7":"code","c08e398e":"code","bb35209d":"code","954927c5":"code","3037a2fd":"code","f72fb637":"code","6bbd9905":"code","bf8bdc2d":"code","cf27f5d7":"code","aa194353":"code","80f49507":"code","e99cd1ff":"code","5758f838":"code","796d792a":"code","8a366ed0":"code","7b7b3dc8":"code","d478c150":"code","d126438d":"code","098d0b25":"code","16a62a80":"code","d79260d4":"code","2ae41083":"code","81cc6500":"code","1645fec7":"code","3471283c":"code","a590ccec":"code","647fc389":"code","b0a7ef5c":"code","6d667a4a":"code","aaa47975":"code","65f9351d":"code","54b01263":"code","f08ddd05":"code","2833051b":"code","9f7e70c2":"code","fe82c3e0":"code","9a7ee1df":"code","b4b9b776":"code","ec553952":"code","d4883e39":"code","9144c445":"code","05172727":"markdown","fd6471dd":"markdown","3b57dc8d":"markdown","7dad7f3e":"markdown","c09a0887":"markdown","4b1b5fd2":"markdown","0180fe42":"markdown","05ef22ea":"markdown","09e6377f":"markdown","d3665a19":"markdown","273e2dfe":"markdown","90dd0404":"markdown"},"source":{"23920914":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bda3e3f7":"from sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import r2_score, accuracy_score, mean_absolute_error, mean_squared_error, roc_curve, auc, confusion_matrix, classification_report","c08e398e":"!ls ..\/input\/mushroom-classification\/mushrooms.csv","bb35209d":"data = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\ndata","954927c5":"data.columns","3037a2fd":"data.info()","f72fb637":"data.describe()","6bbd9905":"data.shape","bf8bdc2d":"data.isnull().sum()","cf27f5d7":"la = LabelEncoder()\nfor i in data.columns:\n    data[i] = la.fit_transform(data[i])","aa194353":"data['class'].value_counts()","80f49507":"cor = data.corr()\nrela = cor['class'].sort_values(ascending = False)\nrela","e99cd1ff":"plt.subplots(figsize=(12, 12))\nsns.heatmap(cor, annot = True)","5758f838":"data['veil-type']","796d792a":"data.drop('veil-type', inplace = True, axis=1)","8a366ed0":"x= []\nfor i in range(len(rela)):\n    if rela[i]>0:\n        x.append(rela.index[i])\nx","7b7b3dc8":"x = data[x]\nx.drop('class', inplace = True, axis = 1)\nx","d478c150":"y = data['class']\ny","d126438d":"xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.25, random_state=42)","098d0b25":"results = pd.DataFrame()\nName = []\nAccuracy = []","16a62a80":"cla = RandomForestClassifier(n_estimators = 10, random_state = 42)\ncla.fit(xtrain, ytrain)","d79260d4":"predicted = cla.predict(xtest)\npredicted","2ae41083":"print(\"Accuracy score usign Random Forrest is: {}%\".format(accuracy_score(ytest, predicted)*100))","81cc6500":"Name.append('RandomForrest()')\nAccuracy.append(accuracy_score(ytest, predicted)*100)","1645fec7":"fpr, tpr, threshold= roc_curve(ytest, predicted, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC curve\")\nplt.show()\nprint(\"AUC value is {} \".format(auc(fpr, tpr)))","3471283c":"confu = confusion_matrix(ytest, predicted, labels = [0,1])\nsns.heatmap(confu, annot=True)","a590ccec":"print(\"Classification Report for our model is \")\nprint(classification_report(ytest, predicted))","647fc389":"dst = DecisionTreeClassifier()\ndst.fit(xtrain, ytrain)","b0a7ef5c":"predicted = dst.predict(xtest)\npredicted","6d667a4a":"print(\"Accuracy score using Decision Tree is: {}%\".format(accuracy_score(ytest, predicted)))","aaa47975":"Name.append(dst)\nAccuracy.append(accuracy_score(ytest, predicted)*100)","65f9351d":"fpr, tpr, threshold= roc_curve(ytest, predicted, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC curve\")\nplt.show()\nprint(\"AUC value is {} \".format(auc(fpr, tpr)))","54b01263":"confu = confusion_matrix(ytest, predicted, labels = [0,1])\nsns.heatmap(confu, annot=True)","f08ddd05":"print(\"Classification Report for our model is \")\nprint(classification_report(ytest, predicted))","2833051b":"lr = LogisticRegression()\nlr.fit(xtrain, ytrain)","9f7e70c2":"predicted = lr.predict(xtest)\npredicted","fe82c3e0":"print(\"Accuracy score using Logistic Regression is: {}%\".format(accuracy_score(ytest, predicted)*100))","9a7ee1df":"Name.append(lr)\nAccuracy.append(accuracy_score(ytest, predicted)*100)","b4b9b776":"fpr, tpr, threshold= roc_curve(ytest, predicted, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"ROC curve\")\nplt.show()\nprint(\"AUC value is {} \".format(auc(fpr, tpr)))","ec553952":"confu = confusion_matrix(ytest, predicted, labels = [0,1])\nsns.heatmap(confu, annot=True)","d4883e39":"print(\"Classification Report for our model is \")\nprint(classification_report(ytest, predicted))","9144c445":"results['Name'] = Name\nresults['Accuracy'] = Accuracy\nresults","05172727":"# Importing Libraries","fd6471dd":"# Applying RandomForest","3b57dc8d":"Converting string to integer","7dad7f3e":"# Applying Decision Tree","c09a0887":"# Data Preprocessing","4b1b5fd2":"# Applying Logistic Regression","0180fe42":"# Loading Dataset","05ef22ea":"Calculating Accuracy","09e6377f":"Checking for class imbalancing","d3665a19":"# Designing Model","273e2dfe":"Making predictions on testing data","90dd0404":"# Final results are:"}}