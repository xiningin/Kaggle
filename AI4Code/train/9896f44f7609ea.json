{"cell_type":{"cb63ba4b":"code","cfe4b694":"code","a3880cb8":"code","29a5d342":"code","0a0467d9":"code","ab60d383":"code","5b9f011b":"code","fc8a2c55":"code","070d5459":"code","412262f5":"code","288ae872":"code","ceb124d0":"code","61c3f2a7":"code","2d5a874f":"code","7d900cef":"code","6b643e9f":"code","b15d050e":"code","c22418d3":"code","26b6e8b2":"code","bd4aeafe":"code","31e06a97":"code","a5d38e0b":"code","be92d79e":"code","1cdaf488":"code","cf9d58d3":"code","e0535304":"code","f71de054":"code","d5b9337a":"code","b7762fa4":"code","aa716e17":"code","d057bfb1":"code","89349afb":"code","60ebfdba":"code","8b975e02":"code","4ffb843e":"code","ea9ffb69":"code","ad090462":"code","85a6cff0":"code","3ccaa1f7":"code","0b8134d1":"code","ea02dc5c":"code","8aa0ee91":"code","e67f91d4":"code","68dbc1e6":"code","313efa3f":"markdown","c508f458":"markdown","6f7512f8":"markdown","82d54029":"markdown","ed8e883d":"markdown","30357e8d":"markdown","455937c0":"markdown","dd6373c7":"markdown"},"source":{"cb63ba4b":"#Data analysis and wrangling\nimport numpy as np\nimport pandas as pd\n\n#visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ninit_notebook_mode(connected = True)\ncf.go_offline()\n%matplotlib inline","cfe4b694":"#Reading our csv file into pandas dataframe\ndf = pd.read_csv('..\/input\/train (3).csv')\ndf.head()","a3880cb8":"#Viewing the shape of the data to know how many features we have and how many rows \ndf.shape","29a5d342":"#As we can see there are null values on the Province_State\ndf.info()","0a0467d9":"#How many null values do we have in each feature \ndf.isnull().sum()","ab60d383":"#Although, we won't care much about dealing with missing data for now\n#But Plotting missing data can be very helpful in understanding our dataset\ntotal = df.isnull().sum().sort_values(ascending=False)\npercent = ((df.isnull().sum()\/df.isnull().count()) * 100).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nf, ax = plt.subplots(figsize=(15, 6))\nplt.xticks(rotation='90')\nsns.barplot(x=missing_data.index, y=missing_data['Percent'])\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)\nmissing_data.head()","5b9f011b":"# How many unique values in our Id column\n# I know this sounds strange as when seeing id you know that it will be unique but some datasets have duplicated id values \ndf.Id.nunique()","fc8a2c55":"# Now we are trying to find how many unique values are presented in Province_state column \n# Finding unique values may help us have better understanding of our data\nprint(f\"It has { df.Province_State.nunique() } unique values and it's top 5 values are:\")\nprint('-'*50)\nprint(df.Province_State.value_counts(dropna=False).head())","070d5459":"# trying to find how many unique values are presented in Country_Region column \nprint(f\"It has { df.Country_Region.nunique() } unique values and it's top 5 values are:\")\nprint('-'*50)\nprint(df.Country_Region.value_counts(dropna=False).head())","412262f5":"df.ConfirmedCases.nunique()","288ae872":"print(df.columns.values)","ceb124d0":"# Convert Date from object to datetime64 format\ndf['Date'] = pd.to_datetime(df['Date'])","61c3f2a7":"# As we can see day has 31 unique values which is better than before \ndf.Date.dt.day.nunique()","2d5a874f":"# Month is even better as it has only 4 values\ndf.Date.dt.month.nunique()","7d900cef":"# Year won't help us.. \ndf.Date.dt.year.nunique()","6b643e9f":"# Create two columns for the day and month \ndf['Day'] = df.Date.dt.day\ndf['Month'] = df.Date.dt.month","b15d050e":"df.head()","c22418d3":"# We can drop the Date column as it we got what we wanted from it \n# we can also drop the id column as it doesn't give us any infromation \ndf.drop(['Id', 'Date'], axis=1, inplace=True)","26b6e8b2":"# Our dataframe now looks like this\ndf.head()","bd4aeafe":"# Our features data types\ndf.dtypes","31e06a97":"# Now we want to know how to use the month column in our advantage\ndf.Month.value_counts(dropna=False)","a5d38e0b":"# Use describe function to know more about the month and if we can use it or not \ndf.groupby('Month').describe()","be92d79e":"# Create a frequency distribution table as our month is a categorical variable although it's integer \nmonth_freq = df.groupby('Month').size().reset_index(name='Count')\nplt.figure(figsize=(15, 10))\nsns.set_style('whitegrid')\nsns.countplot(x='Month', data=df)\nplt.xlabel('Month', fontsize=20)\nplt.ylabel('Count', fontsize=20)\nmonth_freq","1cdaf488":"# Pie chart\n# values for the chart\nval = [df['Month'][df['Month'] == 1].count(),df['Month'][df['Month'] == 2].count(), df['Month'][df['Month'] == 2].count()]  # number of values of Jan, Feb & March\nfig1, ax1 = plt.subplots(figsize=(15, 7))\nax1.pie(val, explode=(0, 0.05, 0.05), labels=['January', 'February', 'March'], colors=['#c03d3e','#095b97', '#3a923a'], autopct='%1.1f%%', shadow=True, startangle=90, textprops={'fontsize': 15, 'fontWeight':'bold'})\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')\nplt.tight_layout()\nplt.show()","cf9d58d3":"# Using histogram for Fatalities \nplt.figure(figsize=(18, 10))\nplt.hist(df.Fatalities)","e0535304":"# Using the distribution plot from seaborn \nplt.figure(figsize=(18, 10))\nsns.distplot(df.Fatalities.dropna(), bins=30)","f71de054":"# Creating a scatter plot for ConfirmedCases & Fatalities\nplt.figure(figsize=(15, 10))\nplt.scatter(df.ConfirmedCases, df.Fatalities, marker='D')","d5b9337a":"sns.lmplot(x='ConfirmedCases', y='Fatalities', data=df, hue='Month', markers=['o', 'D', 'D', '*'])","b7762fa4":"# stripplot showed that every month number of cases and Fatalities increases\nplt.figure(figsize=(15, 7))\nsns.stripplot(x='Month', y='Fatalities', data=df)","aa716e17":"sns.catplot(x='Month', y='Fatalities', data=df, height=10)","d057bfb1":"sns.catplot(x='Month', y='ConfirmedCases', data=df, height=10)","89349afb":"sns.pairplot(df, hue='Month', diag_kind='hist')","60ebfdba":"# Creating a coorelation heatmap to how features are affected by each other (relationship between features)\n# using correlation coefficient \nplt.figure(figsize=(20, 12))\nsns.heatmap(df.corr(),annot=True, cmap='coolwarm')","8b975e02":"# Creating a barplot for month column\ndf.iplot(kind = 'bar', x = 'Month', xTitle='Month', yTitle='Count')","4ffb843e":"# Seeing the relation between Month and Fatalities\ndf.iplot(kind = 'bar', x = 'Month', y = 'Fatalities', xTitle='Month', yTitle='Fatalities')","ea9ffb69":"# Using a Scatter plot for the confirmedCases and fatalities   \ndf.iplot(kind = 'scatter', x = 'ConfirmedCases', y = 'Fatalities', mode='markers',symbol='circle-dot',colors=['orange','teal'], size=20)","ad090462":"df[['ConfirmedCases', 'Fatalities']].iplot(kind='spread')","85a6cff0":"df.iplot(x = 'ConfirmedCases', y = 'Fatalities')","3ccaa1f7":"df['Fatalities'].iplot(kind = 'hist', bins = 25)","0b8134d1":"# Box plot for our dataset \ndf.iplot(kind = 'box')","ea02dc5c":"df.iplot(kind = 'bubble', x = 'Fatalities', y = 'ConfirmedCases', size = 'Day')","8aa0ee91":"df.iplot()","e67f91d4":"df[['ConfirmedCases', 'Fatalities']].iplot(kind='area',fill=True,opacity=1)","68dbc1e6":"df.Country_Region.iplot()","313efa3f":"# Now that we have a little bit understanding about our data\n## Let's now determine which features are important in our analysis and which is not","c508f458":"# Using Plotly","6f7512f8":"## We can see now that date column actually can help us very much in our analysis ","82d54029":"# Now as you can see that none of those columns can give us better information \n## But we have the Date column which may help us understand more about our data\nwe must make sure that it's a datetime format cause as we saw above it is an object format  ","ed8e883d":"# We will Start by importing necessary Libraries","30357e8d":"# Acquiring the data\nThe Python Pandas packages helps us work with our datasets. We start by acquiring the dataset into Pandas DataFrames.","455937c0":"# Time for some visualization using matplotlib & seaborn","dd6373c7":"# Now we will try to understand our data before doing any analysis\n"}}