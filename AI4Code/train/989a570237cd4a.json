{"cell_type":{"3256e1fe":"code","afbd19b0":"code","00b7c283":"code","d77777cc":"code","0fe3b8be":"code","d8e3d2c0":"code","21c143c4":"code","7d165c53":"code","86cfcb84":"code","7ea371fc":"code","9dca00aa":"code","2a6d4797":"code","547ea647":"code","2390da21":"code","736c8235":"code","1173c8e2":"code","edf686ed":"code","bd40f06a":"code","db0927b4":"code","74a69cb7":"code","68368b9f":"code","2a057896":"code","38b7ea6b":"code","3ad8d227":"code","1963668b":"code","ff39d4ce":"code","45aa20d0":"code","8ae15e3f":"code","dfdc4d4c":"code","8ffd341f":"code","313a8f18":"markdown","3ec5d076":"markdown","576b7513":"markdown","a227f953":"markdown","83ad7e25":"markdown","d85bde70":"markdown","b80558e8":"markdown","01f3bbe1":"markdown","b9a6083e":"markdown","014798aa":"markdown","e9575dea":"markdown","f60e5d36":"markdown","f7247af5":"markdown","dec2ad10":"markdown","fb4c3b48":"markdown"},"source":{"3256e1fe":"dataPath = '..\/input\/animes'","afbd19b0":"# Import Libraries\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.applications.mobilenet import preprocess_input, decode_predictions\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense\nfrom sklearn.metrics import classification_report, confusion_matrix","00b7c283":"import numpy as np\nimport cv2\nimport glob\nimport random\n\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt","d77777cc":"TargetSize = (224,224) \ndef prepare_image(filepath):\n    img = cv2.imread(filepath)\n    img_resized = cv2.resize(img, TargetSize, interpolation=cv2.INTER_CUBIC)\n    img_result  = cv2.cvtColor(img_resized, cv2.COLOR_BGR2RGB)\n    return img_result","0fe3b8be":"dirList = glob.glob(dataPath+'\/*') # list of all directories in dataPath\ndirList.sort() # sorted in alphabetical order\nprint(dirList)","d8e3d2c0":"Y_data = []\nfor i in range(len(dirList)):\n    fileList = glob.glob(dirList[i]+'\/*')\n    [Y_data.append(i) for file in fileList]\nprint(Y_data)","21c143c4":"X_data = []\nfor i in range(len(dirList)):\n    fileList = glob.glob(dirList[i]+'\/*')\n    [X_data.append(prepare_image(file)) for file in fileList]\nX_data = np.asarray(X_data)\nprint(X_data.shape)","7d165c53":"## random shuffle\nfrom sklearn.utils import shuffle\nX_data, Y_data = shuffle(X_data, Y_data, random_state=0)","86cfcb84":"print(Y_data)","7ea371fc":"testNum = random.randint(0,len(X_data))\nprint(testNum)\nplt.imshow(X_data[testNum])","9dca00aa":"num_classes = len(dirList) \nlabels = [dir.replace(dataPath+\"\/\", \"\") for dir in dirList]\nprint(labels)","2a6d4797":"equilibre = []\n[equilibre.append(Y_data.count(i)) for i in range(len(dirList))]\nprint(equilibre)","547ea647":"# plot the circle of value counts in dataset\nplt.figure(figsize=(5,5))\nmy_circle=plt.Circle( (0,0), 0.5, color='white')\nplt.pie(equilibre, labels=labels, colors=['red','green','blue'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","2390da21":"# Data Normalisation\nX_train = X_data \/ 255.0\nprint(X_train.shape)","736c8235":"# One-hot encoding\nY_train = to_categorical(Y_data)\nprint(Y_train.shape)","1173c8e2":"input_shape = (224, 224, 3)","edf686ed":"# use MobieNet V2 as base model\nbase_model=MobileNetV2(input_shape=(224,224,3),weights='imagenet',include_top=False) \n\n# add Fully-Connected Layers to Model\nx=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(1024,activation='relu')(x) # FC layer 1\nx=Dense(64,activation='relu')(x)   # FC layer 2\npreds=Dense(num_classes,activation='softmax')(x) #final layer with softmax activation\n\nmodel=Model(inputs=base_model.input,outputs=preds)\nmodel.summary()","bd40f06a":"# Check layers no. & name\nfor i,layer in enumerate(model.layers):\n    print(i,layer.name)","db0927b4":"# set extra layers to trainable \nfor layer in model.layers[:155]:\n    layer.trainable=False\nfor layer in model.layers[155:]:\n    layer.trainable=True","74a69cb7":"# Compile Model\nmodel.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])","68368b9f":"# Train Model (target is loss <0.01)\nbatch_size= 16\nnum_epochs = 10\nhistory = model.fit(X_train,Y_train,batch_size=batch_size,epochs=num_epochs)","2a057896":"# Save Model\nmodel.save('tl_animes.h5')","38b7ea6b":"def classify_worms(imageFile):\n    testData = prepare_image(imageFile).reshape(1,224,224,3)\n    testData = testData \/ 255.0\n    predictions = model.predict(testData)\n#    print(predictions[0])\n    maxindex = int(np.argmax(predictions))\n    print(predictions[0][maxindex],labels[maxindex])\n    return labels[maxindex]","3ad8d227":"imageFile=dirList[0]+'\/01.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","1963668b":"imageFile=dirList[1]+'\/01.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","ff39d4ce":"imageFile=dirList[2]+'\/01.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","45aa20d0":"Y_pred = model.predict(X_train)\ny_pred = np.argmax(Y_pred,axis=1)\n#y_label= [labels[k] for k in y_pred]\ncm = confusion_matrix(Y_data, y_pred)\nprint(cm)","8ae15e3f":"import itertools\ndef plot_confusion_matrix(cm,\n                          target_names,\n                          title='Confusion matrix',\n                          cmap=None,\n                          normalize=True):\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n        \n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()","dfdc4d4c":"plot_confusion_matrix(cm, \n                      normalize=False,\n                      target_names = labels,\n                      title=\"Confusion Matrix, not Normalized\")","8ffd341f":"print(classification_report(Y_data, y_pred, target_names=labels))","313a8f18":"### check 1 picture per category","3ec5d076":"### check entire dataset","576b7513":"## Prepare Data","a227f953":"* Accuracy  = TP+TN \/ TP+FP+FN+TN\n* Precision = TP \/ TP+FP\n* Recall    = TP \/ TP+FN","83ad7e25":"## Load MobileNet v2 model & add FC-layers","d85bde70":"### shuffle data","b80558e8":"### set FC-layers to trainable","01f3bbe1":"## Data Normalisation","b9a6083e":"## Plot Confusion Matrix","014798aa":"# Anime Classification\n## Transfer Learning : Mobilenet V2","e9575dea":"## Save Model","f60e5d36":"## Dataset = animes (kirito, naruto, tanjirou)","f7247af5":"## Weighted Average Recall\n![image.png](attachment:image.png)\n* TP : True  Positive\n* FP : False Positive\n* TN : True  Negative\n* FN : False Negative","dec2ad10":"### show all layers (no. & name)","fb4c3b48":"## Test Model"}}