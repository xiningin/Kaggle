{"cell_type":{"0f995bb5":"code","9452a4d7":"code","5ee4de68":"code","670bdfaa":"code","d77398c2":"code","ea506324":"code","aec4525a":"code","a95f768d":"code","36e456de":"code","869884e5":"markdown"},"source":{"0f995bb5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime\nimport math\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nSTART_DATE = '2017-12-01'","9452a4d7":"from sklearn import preprocessing\nimport xgboost as xgb","5ee4de68":"train_transaction = pd.read_csv('..\/input\/train_transaction.csv', index_col='TransactionID')\ntest_transaction = pd.read_csv('..\/input\/test_transaction.csv', index_col='TransactionID')\n\ntrain_identity = pd.read_csv('..\/input\/train_identity.csv', index_col='TransactionID')\ntest_identity = pd.read_csv('..\/input\/test_identity.csv', index_col='TransactionID')\n\nsample_submission = pd.read_csv('..\/input\/sample_submission.csv', index_col='TransactionID')","670bdfaa":"train = train_transaction.merge(train_identity, how='left', left_index=True, right_index=True)\ntest = test_transaction.merge(test_identity, how='left', left_index=True, right_index=True)\n\nprint(train.shape)\nprint(test.shape)\n\nstartdate = datetime.datetime.strptime(START_DATE, '%Y-%m-%d')\n\ntrain['day_week'] = train['TransactionDT'].apply(lambda x: (startdate + datetime.timedelta(seconds = x))).dt.day_name()\ntest['day_week'] = test['TransactionDT'].apply(lambda x: (startdate + datetime.timedelta(seconds = x))).dt.day_name()\n\ny_train = train['isFraud'].copy()\n\n# Drop target, fill in NaNs\nX_train = train.drop('isFraud', axis=1)\nX_train.drop('TransactionDT', axis=1, inplace=True)\nX_train.drop('id_03', axis=1, inplace=True)\nX_test = test.drop('TransactionDT', axis=1)\nX_test.drop('id_03', axis=1, inplace=True)\n\nX_train = X_train.fillna(-999)\nX_test = X_test.fillna(-999)","d77398c2":"del train, test, train_transaction, train_identity, test_transaction, test_identity","ea506324":"# Trying One-Hot on day_week\n\nX_train = pd.concat([X_train, pd.get_dummies(X_train['day_week'], prefix='Day')], axis=1)\nX_test = pd.concat([X_test, pd.get_dummies(X_test['day_week'], prefix='Day')], axis=1)\nX_train.drop('day_week', axis=1, inplace=True)\nX_test.drop('day_week', axis=1, inplace=True)\nprint(X_train.shape)\nprint(X_test.shape)","aec4525a":"# Label Encoding\nfor f in X_train.columns:\n    if X_train[f].dtype=='object' or X_test[f].dtype=='object': \n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(X_train[f].values) + list(X_test[f].values))\n        X_train[f] = lbl.transform(list(X_train[f].values))\n        X_test[f] = lbl.transform(list(X_test[f].values))   ","a95f768d":"clf = xgb.XGBClassifier(n_estimators=500,\n                        n_jobs=4,\n                        max_depth=9,\n                        learning_rate=0.05,\n                        subsample=0.7,\n                        colsample_bytree=0.7,\n                        missing=-999, \n                        gamma = 0.1)\n\nclf.fit(X_train, y_train)","36e456de":"sample_submission['isFraud'] = clf.predict_proba(X_test)[:,1]\nsample_submission.to_csv('simple_xgboost_dayweek_1hot.csv')","869884e5":"**Disclaimer: I am new to Python so use it on your own risk.**\nPlease let me know if I forgot to reference somebody's work.\n\nShamelessly copied from Konrad Banachewicz and Inversion. Also deleted 'TransactionDT' according to Bojan Tunguz's adversarial result.\n\n[Date hint](https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/100071)\n\n['2017-12-01' date start is taken from this kernel](https:\/\/www.kaggle.com\/kevinbonnes\/transactiondt-startdate)\n\nConverted 'TransactionDT' to day-of-week, the orignial 'TransactionDT'is removed again.\n\nChanged encoding for day_of_week to one-hot"}}