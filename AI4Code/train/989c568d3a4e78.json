{"cell_type":{"fdc48660":"code","c2cc10bc":"code","289e843c":"code","f9265ed9":"code","ccb4eb19":"code","fb1f9b01":"code","29381e5e":"code","a92114e8":"code","c58ebe70":"code","59ca9ce8":"code","442b8916":"code","1b0fa4e8":"code","65c9bd8f":"code","0382519d":"code","dd29b357":"code","db82ef78":"code","6d8a92f3":"code","17241af0":"code","a490cbcc":"code","61f639dd":"code","1abde8f3":"code","3a0ecc0f":"code","92c13135":"code","272f52c5":"code","750ce8fd":"code","993a12cb":"code","024b1c6e":"code","a6285033":"code","109db42a":"code","eb61931e":"code","9ea836e3":"code","9191a330":"code","894b4bc1":"code","3a84200c":"code","b8d5f4a3":"code","921826bc":"code","1f41b8be":"code","587c67c5":"code","96376004":"code","fe60b4d9":"code","0a85fa89":"code","7f616e94":"code","51f2247f":"code","6bdf9af0":"code","e7f36205":"code","0e5b3c00":"code","ef40648b":"code","62044052":"code","b8229f75":"code","6785fad5":"code","1a45c16c":"code","456ccfe9":"code","6a5029a0":"code","00950138":"markdown","4d74dac4":"markdown","1ae718f7":"markdown","5ddbee5b":"markdown","ed8ee2b3":"markdown","9f2b45b1":"markdown","2c68f5db":"markdown","60c71ac2":"markdown","431c15b2":"markdown","024ea1bb":"markdown","cb418bd9":"markdown","910691bb":"markdown","31d85ee6":"markdown","f36012e7":"markdown","b1daf76b":"markdown","4ce45510":"markdown","f4fa0684":"markdown","4407b2fa":"markdown","c5405b26":"markdown","88f9bd7d":"markdown","225d32ed":"markdown","e62a60ee":"markdown","818551fe":"markdown","4178bc93":"markdown","f1c8287b":"markdown","7ecb6004":"markdown","19cf65be":"markdown","a2782dd5":"markdown","62a9cad1":"markdown","90ecb131":"markdown","0281fcd5":"markdown","c149e148":"markdown","f3b5806b":"markdown","6c7944ee":"markdown","83ee1098":"markdown","0afb7a06":"markdown","3e569368":"markdown","2ffe511b":"markdown","50c6d10b":"markdown","7b8fa4d8":"markdown","fbc9309c":"markdown","85b6d3d6":"markdown","2284417a":"markdown","a54e2107":"markdown"},"source":{"fdc48660":"#Load the librarys\nimport pandas as pd #To work with dataset\nimport numpy as np #Math library\nimport seaborn as sns #Graph library that use matplot in background\nimport matplotlib.pyplot as plt #to plot some parameters in seaborn\n\n#Importing the data\ndf_credit = pd.read_csv(\"..\/input\/german-credit-data-with-risk\/german_credit_data.csv\",index_col=0)","c2cc10bc":"#Searching for Missings,type of data and also known the shape of data\nprint(df_credit.info())","289e843c":"#Looking unique values\nprint(df_credit.nunique())\n#Looking the data\nprint(df_credit.head())","f9265ed9":"# it's a library that we work with plotly\nimport plotly.offline as py \npy.init_notebook_mode(connected=True) # this code, allow us to work with offline plotly version\nimport plotly.graph_objs as go # it's like \"plt\" of matplot\nimport plotly.tools as tls # It's useful to we get some tools of plotly\nimport warnings # This library will be used to ignore some warnings\nfrom collections import Counter # To do counter of some features\n\ntrace0 = go.Bar(\n            x = df_credit[df_credit[\"Risk\"]== 'good'][\"Risk\"].value_counts().index.values,\n            y = df_credit[df_credit[\"Risk\"]== 'good'][\"Risk\"].value_counts().values,\n            name='Good credit'\n    )\n\ntrace1 = go.Bar(\n            x = df_credit[df_credit[\"Risk\"]== 'bad'][\"Risk\"].value_counts().index.values,\n            y = df_credit[df_credit[\"Risk\"]== 'bad'][\"Risk\"].value_counts().values,\n            name='Bad credit'\n    )\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    \n)\n\nlayout = go.Layout(\n    yaxis=dict(\n        title='Count'\n    ),\n    xaxis=dict(\n        title='Risk Variable'\n    ),\n    title='Target variable distribution'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='grouped-bar')","ccb4eb19":"df_good = df_credit.loc[df_credit[\"Risk\"] == 'good']['Age'].values.tolist()\ndf_bad = df_credit.loc[df_credit[\"Risk\"] == 'bad']['Age'].values.tolist()\ndf_age = df_credit['Age'].values.tolist()\n\n#First plot\ntrace0 = go.Histogram(\n    x=df_good,\n    histnorm='probability',\n    name=\"Good Credit\"\n)\n#Second plot\ntrace1 = go.Histogram(\n    x=df_bad,\n    histnorm='probability',\n    name=\"Bad Credit\"\n)\n#Third plot\ntrace2 = go.Histogram(\n    x=df_age,\n    histnorm='probability',\n    name=\"Overall Age\"\n)\n\n#Creating the grid\nfig = tls.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('Good','Bad', 'General Distribuition'))\n\n#setting the figs\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(showlegend=True, title='Age Distribuition', bargap=0.05)\npy.iplot(fig, filename='custom-sized-subplot-with-subplot-titles')","fb1f9b01":"df_good = df_credit[df_credit[\"Risk\"] == 'good']\ndf_bad = df_credit[df_credit[\"Risk\"] == 'bad']\n\nfig, ax = plt.subplots(nrows=2, figsize=(12,8))\nplt.subplots_adjust(hspace = 0.4, top = 0.8)\n\ng1 = sns.distplot(df_good[\"Age\"], ax=ax[0], \n             color=\"g\")\ng1 = sns.distplot(df_bad[\"Age\"], ax=ax[0], \n             color='r')\ng1.set_title(\"Age Distribuition\", fontsize=15)\ng1.set_xlabel(\"Age\")\ng1.set_xlabel(\"Frequency\")\n\ng2 = sns.countplot(x=\"Age\",data=df_credit, \n              palette=\"hls\", ax=ax[1], \n              hue = \"Risk\")\ng2.set_title(\"Age Counting by Risk\", fontsize=15)\ng2.set_xlabel(\"Age\")\ng2.set_xlabel(\"Count\")\nplt.show()","29381e5e":"#Let's look the Credit Amount column\ninterval = (18, 25, 35, 60, 120)\n\ncats = ['Student', 'Young', 'Adult', 'Senior']\ndf_credit[\"Age_cat\"] = pd.cut(df_credit.Age, interval, labels=cats)\n\n\ndf_good = df_credit[df_credit[\"Risk\"] == 'good']\ndf_bad = df_credit[df_credit[\"Risk\"] == 'bad']","a92114e8":"trace0 = go.Box(\n    y=df_good[\"Credit amount\"],\n    x=df_good[\"Age_cat\"],\n    name='Good credit',\n    marker=dict(\n        color='#3D9970'\n    )\n)\n\ntrace1 = go.Box(\n    y=df_bad['Credit amount'],\n    x=df_bad['Age_cat'],\n    name='Bad credit',\n    marker=dict(\n        color='#FF4136'\n    )\n)\n    \ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    yaxis=dict(\n        title='Credit Amount (US Dollar)',\n        zeroline=False\n    ),\n    xaxis=dict(\n        title='Age Categorical'\n    ),\n    boxmode='group'\n)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='box-age-cat')","c58ebe70":"#First plot\ntrace0 = go.Bar(\n    x = df_credit[df_credit[\"Risk\"]== 'good'][\"Housing\"].value_counts().index.values,\n    y = df_credit[df_credit[\"Risk\"]== 'good'][\"Housing\"].value_counts().values,\n    name='Good credit'\n)\n\n#Second plot\ntrace1 = go.Bar(\n    x = df_credit[df_credit[\"Risk\"]== 'bad'][\"Housing\"].value_counts().index.values,\n    y = df_credit[df_credit[\"Risk\"]== 'bad'][\"Housing\"].value_counts().values,\n    name=\"Bad Credit\"\n)\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    title='Housing Distribuition'\n)\n\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='Housing-Grouped')","59ca9ce8":"fig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": df_good['Housing'],\n            \"y\": df_good['Credit amount'],\n            \"legendgroup\": 'Good Credit',\n            \"scalegroup\": 'No',\n            \"name\": 'Good Credit',\n            \"side\": 'negative',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'blue'\n            }\n        },\n        {\n            \"type\": 'violin',\n            \"x\": df_bad['Housing'],\n            \"y\": df_bad['Credit amount'],\n            \"legendgroup\": 'Bad Credit',\n            \"scalegroup\": 'No',\n            \"name\": 'Bad Credit',\n            \"side\": 'positive',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'green'\n            }\n        }\n    ],\n    \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violingap\": 0,\n        \"violinmode\": \"overlay\"\n    }\n}\n\n\npy.iplot(fig, filename = 'violin\/split', validate = False)","442b8916":"#First plot\ntrace0 = go.Bar(\n    x = df_credit[df_credit[\"Risk\"]== 'good'][\"Sex\"].value_counts().index.values,\n    y = df_credit[df_credit[\"Risk\"]== 'good'][\"Sex\"].value_counts().values,\n    name='Good credit'\n)\n\n#First plot 2\ntrace1 = go.Bar(\n    x = df_credit[df_credit[\"Risk\"]== 'bad'][\"Sex\"].value_counts().index.values,\n    y = df_credit[df_credit[\"Risk\"]== 'bad'][\"Sex\"].value_counts().values,\n    name=\"Bad Credit\"\n)\n\n#Second plot\ntrace2 = go.Box(\n    x = df_credit[df_credit[\"Risk\"]== 'good'][\"Sex\"],\n    y = df_credit[df_credit[\"Risk\"]== 'good'][\"Credit amount\"],\n    name=trace0.name\n)\n\n#Second plot 2\ntrace3 = go.Box(\n    x = df_credit[df_credit[\"Risk\"]== 'bad'][\"Sex\"],\n    y = df_credit[df_credit[\"Risk\"]== 'bad'][\"Credit amount\"],\n    name=trace1.name\n)\n\ndata = [trace0, trace1, trace2,trace3]\n\n\nfig = tls.make_subplots(rows=1, cols=2, \n                        subplot_titles=('Sex Count', 'Credit Amount by Sex'))\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 2)\n\nfig['layout'].update(height=400, width=800, title='Sex Distribuition', boxmode='group')\npy.iplot(fig, filename='sex-subplot')","1b0fa4e8":"#First plot\ntrace0 = go.Bar(\n    x = df_credit[df_credit[\"Risk\"]== 'good'][\"Job\"].value_counts().index.values,\n    y = df_credit[df_credit[\"Risk\"]== 'good'][\"Job\"].value_counts().values,\n    name='Good credit Distribuition'\n)\n\n#Second plot\ntrace1 = go.Bar(\n    x = df_credit[df_credit[\"Risk\"]== 'bad'][\"Job\"].value_counts().index.values,\n    y = df_credit[df_credit[\"Risk\"]== 'bad'][\"Job\"].value_counts().values,\n    name=\"Bad Credit Distribuition\"\n)\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    title='Job Distribuition'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='grouped-bar')","65c9bd8f":"trace0 = go.Box(\n    x=df_good[\"Job\"],\n    y=df_good[\"Credit amount\"],\n    name='Good credit'\n)\n\ntrace1 = go.Box(\n    x=df_bad['Job'],\n    y=df_bad['Credit amount'],\n    name='Bad credit'\n)\n    \ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    yaxis=dict(\n        title='Credit Amount distribuition by Job'\n    ),\n    boxmode='group'\n)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='box-age-cat')","0382519d":"\nfig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": df_good['Job'],\n            \"y\": df_good['Age'],\n            \"legendgroup\": 'Good Credit',\n            \"scalegroup\": 'No',\n            \"name\": 'Good Credit',\n            \"side\": 'negative',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'blue'\n            }\n        },\n        {\n            \"type\": 'violin',\n            \"x\": df_bad['Job'],\n            \"y\": df_bad['Age'],\n            \"legendgroup\": 'Bad Credit',\n            \"scalegroup\": 'No',\n            \"name\": 'Bad Credit',\n            \"side\": 'positive',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'green'\n            }\n        }\n    ],\n    \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violingap\": 0,\n        \"violinmode\": \"overlay\"\n    }\n}\n\n\npy.iplot(fig, filename = 'Age-Housing', validate = False)","dd29b357":"fig, ax = plt.subplots(figsize=(12,12), nrows=2)\n\ng1 = sns.boxplot(x=\"Job\", y=\"Credit amount\", data=df_credit, \n            palette=\"hls\", ax=ax[0], hue=\"Risk\")\ng1.set_title(\"Credit Amount by Job\", fontsize=15)\ng1.set_xlabel(\"Job Reference\", fontsize=12)\ng1.set_ylabel(\"Credit Amount\", fontsize=12)\n\ng2 = sns.violinplot(x=\"Job\", y=\"Age\", data=df_credit, ax=ax[1],  \n               hue=\"Risk\", split=True, palette=\"hls\")\ng2.set_title(\"Job Type reference x Age\", fontsize=15)\ng2.set_xlabel(\"Job Reference\", fontsize=12)\ng2.set_ylabel(\"Age\", fontsize=12)\n\nplt.subplots_adjust(hspace = 0.4,top = 0.9)\n\nplt.show()\n","db82ef78":"import plotly.figure_factory as ff\n\nimport numpy as np\n\n# Add histogram data\nx1 = np.log(df_good['Credit amount']) \nx2 = np.log(df_bad[\"Credit amount\"])\n\n# Group data together\nhist_data = [x1, x2]\n\ngroup_labels = ['Good Credit', 'Bad Credit']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2)\n\n# Plot!\npy.iplot(fig, filename='Distplot with Multiple Datasets')","6d8a92f3":"#Ploting the good and bad dataframes in distplot\nplt.figure(figsize = (8,5))\n\ng= sns.distplot(df_good['Credit amount'], color='r')\ng = sns.distplot(df_bad[\"Credit amount\"], color='g')\ng.set_title(\"Credit Amount Frequency distribuition\", fontsize=15)\nplt.show()","17241af0":"from plotly import tools\nimport numpy as np\nimport plotly.graph_objs as go\n\ncount_good = go.Bar(\n    x = df_good[\"Saving accounts\"].value_counts().index.values,\n    y = df_good[\"Saving accounts\"].value_counts().values,\n    name='Good credit'\n)\ncount_bad = go.Bar(\n    x = df_bad[\"Saving accounts\"].value_counts().index.values,\n    y = df_bad[\"Saving accounts\"].value_counts().values,\n    name='Bad credit'\n)\n\n\nbox_1 = go.Box(\n    x=df_good[\"Saving accounts\"],\n    y=df_good[\"Credit amount\"],\n    name='Good credit'\n)\nbox_2 = go.Box(\n    x=df_bad[\"Saving accounts\"],\n    y=df_bad[\"Credit amount\"],\n    name='Bad credit'\n)\n\nscat_1 = go.Box(\n    x=df_good[\"Saving accounts\"],\n    y=df_good[\"Age\"],\n    name='Good credit'\n)\nscat_2 = go.Box(\n    x=df_bad[\"Saving accounts\"],\n    y=df_bad[\"Age\"],\n    name='Bad credit'\n)\n\ndata = [scat_1, scat_2, box_1, box_2, count_good, count_bad]\n\nfig = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('Count Saving Accounts','Credit Amount by Savings Acc', \n                                          'Age by Saving accounts'))\n\nfig.append_trace(count_good, 1, 1)\nfig.append_trace(count_bad, 1, 1)\n\nfig.append_trace(box_2, 1, 2)\nfig.append_trace(box_1, 1, 2)\n\nfig.append_trace(scat_1, 2, 1)\nfig.append_trace(scat_2, 2, 1)\n\n\n\nfig['layout'].update(height=700, width=800, title='Saving Accounts Exploration', boxmode='group')\n\npy.iplot(fig, filename='combined-savings')\n","a490cbcc":"print(\"Description of Distribuition Saving accounts by Risk:  \")\nprint(pd.crosstab(df_credit[\"Saving accounts\"],df_credit.Risk))\n\nfig, ax = plt.subplots(3,1, figsize=(12,12))\ng = sns.countplot(x=\"Saving accounts\", data=df_credit, palette=\"hls\", \n              ax=ax[0],hue=\"Risk\")\ng.set_title(\"Saving Accounts Count\", fontsize=15)\ng.set_xlabel(\"Saving Accounts type\", fontsize=12)\ng.set_ylabel(\"Count\", fontsize=12)\n\ng1 = sns.violinplot(x=\"Saving accounts\", y=\"Job\", data=df_credit, palette=\"hls\", \n               hue = \"Risk\", ax=ax[1],split=True)\ng1.set_title(\"Saving Accounts by Job\", fontsize=15)\ng1.set_xlabel(\"Savings Accounts type\", fontsize=12)\ng1.set_ylabel(\"Job\", fontsize=12)\n\ng = sns.boxplot(x=\"Saving accounts\", y=\"Credit amount\", data=df_credit, ax=ax[2],\n            hue = \"Risk\",palette=\"hls\")\ng2.set_title(\"Saving Accounts by Credit Amount\", fontsize=15)\ng2.set_xlabel(\"Savings Accounts type\", fontsize=12)\ng2.set_ylabel(\"Credit Amount(US)\", fontsize=12)\n\nplt.subplots_adjust(hspace = 0.4,top = 0.9)\n\nplt.show()\n","61f639dd":"print(\"Values describe: \")\nprint(pd.crosstab(df_credit.Purpose, df_credit.Risk))\n\nplt.figure(figsize = (14,12))\n\nplt.subplot(221)\ng = sns.countplot(x=\"Purpose\", data=df_credit, \n              palette=\"hls\", hue = \"Risk\")\ng.set_xticklabels(g.get_xticklabels(),rotation=45)\ng.set_xlabel(\"\", fontsize=12)\ng.set_ylabel(\"Count\", fontsize=12)\ng.set_title(\"Purposes Count\", fontsize=20)\n\nplt.subplot(222)\ng1 = sns.violinplot(x=\"Purpose\", y=\"Age\", data=df_credit, \n                    palette=\"hls\", hue = \"Risk\",split=True)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\ng1.set_xlabel(\"\", fontsize=12)\ng1.set_ylabel(\"Count\", fontsize=12)\ng1.set_title(\"Purposes by Age\", fontsize=20)\n\nplt.subplot(212)\ng2 = sns.boxplot(x=\"Purpose\", y=\"Credit amount\", data=df_credit, \n               palette=\"hls\", hue = \"Risk\")\ng2.set_xlabel(\"Purposes\", fontsize=12)\ng2.set_ylabel(\"Credit Amount\", fontsize=12)\ng2.set_title(\"Credit Amount distribuition by Purposes\", fontsize=20)\n\nplt.subplots_adjust(hspace = 0.6, top = 0.8)\n\nplt.show()","1abde8f3":"plt.figure(figsize = (12,14))\n\ng= plt.subplot(311)\ng = sns.countplot(x=\"Duration\", data=df_credit, \n              palette=\"hls\",  hue = \"Risk\")\ng.set_xlabel(\"Duration Distribuition\", fontsize=12)\ng.set_ylabel(\"Count\", fontsize=12)\ng.set_title(\"Duration Count\", fontsize=20)\n\ng1 = plt.subplot(312)\ng1 = sns.pointplot(x=\"Duration\", y =\"Credit amount\",data=df_credit,\n                   hue=\"Risk\", palette=\"hls\")\ng1.set_xlabel(\"Duration\", fontsize=12)\ng1.set_ylabel(\"Credit Amount(US)\", fontsize=12)\ng1.set_title(\"Credit Amount distribuition by Duration\", fontsize=20)\n\ng2 = plt.subplot(313)\ng2 = sns.distplot(df_good[\"Duration\"], color='g')\ng2 = sns.distplot(df_bad[\"Duration\"], color='r')\ng2.set_xlabel(\"Duration\", fontsize=12)\ng2.set_ylabel(\"Frequency\", fontsize=12)\ng2.set_title(\"Duration Frequency x good and bad Credit\", fontsize=20)\n\nplt.subplots_adjust(wspace = 0.4, hspace = 0.4,top = 0.9)\n\nplt.show()","3a0ecc0f":"#First plot\ntrace0 = go.Bar(\n    x = df_credit[df_credit[\"Risk\"]== 'good'][\"Checking account\"].value_counts().index.values,\n    y = df_credit[df_credit[\"Risk\"]== 'good'][\"Checking account\"].value_counts().values,\n    name='Good credit Distribuition' \n    \n)\n\n#Second plot\ntrace1 = go.Bar(\n    x = df_credit[df_credit[\"Risk\"]== 'bad'][\"Checking account\"].value_counts().index.values,\n    y = df_credit[df_credit[\"Risk\"]== 'bad'][\"Checking account\"].value_counts().values,\n    name=\"Bad Credit Distribuition\"\n)\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    title='Checking accounts Distribuition',\n    xaxis=dict(title='Checking accounts name'),\n    yaxis=dict(title='Count'),\n    barmode='group'\n)\n\n\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename = 'Age-ba', validate = False)","92c13135":"df_good = df_credit[df_credit[\"Risk\"] == 'good']\ndf_bad = df_credit[df_credit[\"Risk\"] == 'bad']\n\ntrace0 = go.Box(\n    y=df_good[\"Credit amount\"],\n    x=df_good[\"Checking account\"],\n    name='Good credit',\n    marker=dict(\n        color='#3D9970'\n    )\n)\n\ntrace1 = go.Box(\n    y=df_bad['Credit amount'],\n    x=df_bad['Checking account'],\n    name='Bad credit',\n    marker=dict(\n        color='#FF4136'\n    )\n)\n    \ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    yaxis=dict(\n        title='Cheking distribuition'\n    ),\n    boxmode='group'\n)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='box-age-cat')","272f52c5":"print(\"Total values of the most missing variable: \")\nprint(df_credit.groupby(\"Checking account\")[\"Checking account\"].count())\n\nplt.figure(figsize = (12,10))\n\ng = plt.subplot(221)\ng = sns.countplot(x=\"Checking account\", data=df_credit, \n              palette=\"hls\", hue=\"Risk\")\ng.set_xlabel(\"Checking Account\", fontsize=12)\ng.set_ylabel(\"Count\", fontsize=12)\ng.set_title(\"Checking Account Counting by Risk\", fontsize=20)\n\ng1 = plt.subplot(222)\ng1 = sns.violinplot(x=\"Checking account\", y=\"Age\", data=df_credit, palette=\"hls\", hue = \"Risk\",split=True)\ng1.set_xlabel(\"Checking Account\", fontsize=12)\ng1.set_ylabel(\"Age\", fontsize=12)\ng1.set_title(\"Age by Checking Account\", fontsize=20)\n\ng2 = plt.subplot(212)\ng2 = sns.boxplot(x=\"Checking account\",y=\"Credit amount\", data=df_credit,hue='Risk',palette=\"hls\")\ng2.set_xlabel(\"Checking Account\", fontsize=12)\ng2.set_ylabel(\"Credit Amount(US)\", fontsize=12)\ng2.set_title(\"Credit Amount by Cheking Account\", fontsize=20)\n\nplt.subplots_adjust(wspace = 0.2, hspace = 0.3, top = 0.9)\n\nplt.show()\nplt.show()","750ce8fd":"print(pd.crosstab(df_credit.Sex, df_credit.Job))","993a12cb":"plt.figure(figsize = (10,6))\n\ng = sns.violinplot(x=\"Housing\",y=\"Job\",data=df_credit,\n                   hue=\"Risk\", palette=\"hls\",split=True)\ng.set_xlabel(\"Housing\", fontsize=12)\ng.set_ylabel(\"Job\", fontsize=12)\ng.set_title(\"Housing x Job - Dist\", fontsize=20)\n\nplt.show()","024b1c6e":"print(pd.crosstab(df_credit[\"Checking account\"],df_credit.Sex))","a6285033":"date_int = [\"Purpose\", 'Sex']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_credit[date_int[0]], df_credit[date_int[1]]).style.background_gradient(cmap = cm)","109db42a":"date_int = [\"Purpose\", 'Sex']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_credit[date_int[0]], df_credit[date_int[1]]).style.background_gradient(cmap = cm)","eb61931e":"print(\"Purpose : \",df_credit.Purpose.unique())\nprint(\"Sex : \",df_credit.Sex.unique())\nprint(\"Housing : \",df_credit.Housing.unique())\nprint(\"Saving accounts : \",df_credit['Saving accounts'].unique())\nprint(\"Risk : \",df_credit['Risk'].unique())\nprint(\"Checking account : \",df_credit['Checking account'].unique())\nprint(\"Aget_cat : \",df_credit['Age_cat'].unique())","9ea836e3":"def one_hot_encoder(df, nan_as_category = False):\n    original_columns = list(df.columns)\n    categorical_columns = [col for col in df.columns if df[col].dtype == 'object']\n    df = pd.get_dummies(df, columns= categorical_columns, dummy_na= nan_as_category, drop_first=True)\n    new_columns = [c for c in df.columns if c not in original_columns]\n    return df, new_columns","9191a330":"df_credit['Saving accounts'] = df_credit['Saving accounts'].fillna('no_inf')\ndf_credit['Checking account'] = df_credit['Checking account'].fillna('no_inf')\n\n#Purpose to Dummies Variable\ndf_credit = df_credit.merge(pd.get_dummies(df_credit.Purpose, drop_first=True, prefix='Purpose'), left_index=True, right_index=True)\n#Sex feature in dummies\ndf_credit = df_credit.merge(pd.get_dummies(df_credit.Sex, drop_first=True, prefix='Sex'), left_index=True, right_index=True)\n# Housing get dummies\ndf_credit = df_credit.merge(pd.get_dummies(df_credit.Housing, drop_first=True, prefix='Housing'), left_index=True, right_index=True)\n# Housing get Saving Accounts\ndf_credit = df_credit.merge(pd.get_dummies(df_credit[\"Saving accounts\"], drop_first=True, prefix='Savings'), left_index=True, right_index=True)\n# Housing get Risk\ndf_credit = df_credit.merge(pd.get_dummies(df_credit.Risk, prefix='Risk'), left_index=True, right_index=True)\n# Housing get Checking Account\ndf_credit = df_credit.merge(pd.get_dummies(df_credit[\"Checking account\"], drop_first=True, prefix='Check'), left_index=True, right_index=True)\n# Housing get Age categorical\ndf_credit = df_credit.merge(pd.get_dummies(df_credit[\"Age_cat\"], drop_first=True, prefix='Age_cat'), left_index=True, right_index=True)","894b4bc1":"#Excluding the missing columns\ndel df_credit[\"Saving accounts\"]\ndel df_credit[\"Checking account\"]\ndel df_credit[\"Purpose\"]\ndel df_credit[\"Sex\"]\ndel df_credit[\"Housing\"]\ndel df_credit[\"Age_cat\"]\ndel df_credit[\"Risk\"]\ndel df_credit['Risk_good']","3a84200c":"plt.figure(figsize=(14,12))\nsns.heatmap(df_credit.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True,  linecolor='white', annot=True)\nplt.show()","b8d5f4a3":"from sklearn.model_selection import train_test_split, KFold, cross_val_score # to split the data\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, fbeta_score #To evaluate our model\n\nfrom sklearn.model_selection import GridSearchCV\n\n# Algorithmns models to be compared\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\n","921826bc":"df_credit['Credit amount'] = np.log(df_credit['Credit amount'])","1f41b8be":"#Creating the X and y variables\nX = df_credit.drop('Risk_bad', 1).values\ny = df_credit[\"Risk_bad\"].values\n\n# Spliting X and y into train and test version\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=42)","587c67c5":"# to feed the random state\nseed = 7\n\n# prepare models\nmodels = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('RF', RandomForestClassifier()))\nmodels.append(('SVM', SVC(gamma='auto')))\nmodels.append(('XGB', XGBClassifier()))\n\n# evaluate each model in turn\nresults = []\nnames = []\nscoring = 'recall'\n\nfor name, model in models:\n        kfold = KFold(n_splits=10, random_state=seed)\n        cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring)\n        results.append(cv_results)\n        names.append(name)\n        msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n        print(msg)\n        \n# boxplot algorithm comparison\nfig = plt.figure(figsize=(11,6))\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","96376004":"#Seting the Hyper Parameters\nparam_grid = {\"max_depth\": [3,5, 7, 10,None],\n              \"n_estimators\":[3,5,10,25,50,150],\n              \"max_features\": [4,7,15,20]}\n\n#Creating the classifier\nmodel = RandomForestClassifier(random_state=2)\n\ngrid_search = GridSearchCV(model, param_grid=param_grid, cv=5, scoring='recall', verbose=4)\ngrid_search.fit(X_train, y_train)","fe60b4d9":"print(grid_search.best_score_)\nprint(grid_search.best_params_)","0a85fa89":"rf = RandomForestClassifier(max_depth=None, max_features=10, n_estimators=15, random_state=2)\n\n#trainning with the best params\nrf.fit(X_train, y_train)","7f616e94":"#Testing the model \n#Predicting using our  model\ny_pred = rf.predict(X_test)\n\n# Verificaar os resultados obtidos\nprint(accuracy_score(y_test,y_pred))\nprint(\"\\n\")\nprint(confusion_matrix(y_test, y_pred))\nprint(\"\\n\")\nprint(fbeta_score(y_test, y_pred, beta=2))","51f2247f":"from sklearn.utils import resample\nfrom sklearn.metrics import roc_curve","6bdf9af0":"# Criando o classificador logreg\nGNB = GaussianNB()\n\n# Fitting with train data\nmodel = GNB.fit(X_train, y_train)","e7f36205":"# Printing the Training Score\nprint(\"Training score data: \")\nprint(model.score(X_train, y_train))","0e5b3c00":"y_pred = model.predict(X_test)\n\nprint(accuracy_score(y_test,y_pred))\nprint(\"\\n\")\nprint(confusion_matrix(y_test, y_pred))\nprint(\"\\n\")\nprint(classification_report(y_test, y_pred))","ef40648b":"#Predicting proba\ny_pred_prob = model.predict_proba(X_test)[:,1]\n\n# Generate ROC curve values: fpr, tpr, thresholds\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\n# Plot ROC curve\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()","62044052":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import SelectKBest","b8229f75":"features = []\nfeatures.append(('pca', PCA(n_components=2)))\nfeatures.append(('select_best', SelectKBest(k=6)))\nfeature_union = FeatureUnion(features)\n# create pipeline\nestimators = []\nestimators.append(('feature_union', feature_union))\nestimators.append(('logistic', GaussianNB()))\nmodel = Pipeline(estimators)\n# evaluate pipeline\nseed = 7\nkfold = KFold(n_splits=10, random_state=seed)\nresults = cross_val_score(model, X_train, y_train, cv=kfold)\nprint(results.mean())","6785fad5":"model.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint(accuracy_score(y_test,y_pred))\nprint(\"\\n\")\nprint(confusion_matrix(y_test, y_pred))\nprint(\"\\n\")\nprint(fbeta_score(y_test, y_pred, beta=2))","1a45c16c":"#Seting the Hyper Parameters\nparam_test1 = {\n 'max_depth':[3,5,6,10],\n 'min_child_weight':[3,5,10],\n 'gamma':[0.0, 0.1, 0.2, 0.3, 0.4],\n# 'reg_alpha':[1e-5, 1e-2, 0.1, 1, 10],\n 'subsample':[i\/100.0 for i in range(75,90,5)],\n 'colsample_bytree':[i\/100.0 for i in range(75,90,5)]\n}\n\n#Creating the classifier\nmodel_xg = XGBClassifier(random_state=2)\n\ngrid_search = GridSearchCV(model_xg, param_grid=param_test1, cv=5, scoring='recall')\ngrid_search.fit(X_train, y_train)","456ccfe9":"grid_search.best_score_\ngrid_search.best_params_","6a5029a0":"y_pred = grid_search.predict(X_test)\n\n# Verificaar os resultados obtidos\nprint(accuracy_score(y_test,y_pred))\nprint(\"\\n\")\nprint(confusion_matrix(y_test, y_pred))","00950138":"<h3>Distribuition of Credit Amount by Housing<\/h3>","4d74dac4":"Very interesting. Almost all models shows a low value to recall. \n\nWe can observe that our best results was with CART, NB and XGBoost. <br>\nI will implement some models and try to do a simple Tunning on them","1ae718f7":"First, let's look the distribuition ","5ddbee5b":"<h2>Creating an categorical variable to handle with the Age variable <\/h2>","ed8ee2b3":"Very sucks results! How can I increase my model? ","9f2b45b1":"# **7.1 Model 1 :** <a id=\"Modelling 1\"><\/a> <br>\n- Using Random Forest to predictict the credit score \n- Some of Validation Parameters","2c68f5db":"With the Gaussian Model we got a best recall. ","60c71ac2":"I will try implement some interactive visuals in my Kernels, this will be the first, inspired in Alexader's Kernel and I will also continue implementing plotly and bokeh in my Kerne","431c15b2":"# Please, how can I increase this sucks models ?","024ea1bb":"I will do some explorations through the Job\n- Distribuition\n- Crossed by Credit amount\n- Crossed by Age","cb418bd9":"<h2>I will now Look the distribuition of Housing own and rent by Risk<\/h2>\n","910691bb":"Interesting distribuition","31d85ee6":"\nInteresting, we can see that the highest duration have the high amounts. <br>\nThe highest density is between [12 ~ 18 ~ 24] months<br>\nIt all make sense.\n","f36012e7":"## Looking the total of values in each categorical feature","b1daf76b":"## Deleting the old features","4ce45510":"we can see that the own and good risk have a high correlation","f4fa0684":"<a id=\"Introduction\"><\/a> <br>\n","4407b2fa":"<a id=\"Librarys\"><\/a> <br>\n# **2. Librarys:** \n- Importing Librarys\n- Importing Dataset","c5405b26":"<b> How can I set the boxplots in different places? how can I use the same legend to both graphs?<\/b>","88f9bd7d":"Distruibution of Saving accounts by Risk","225d32ed":"<h2>Looking the diference by Sex<\/h2>","e62a60ee":"## Implementing a pipeline of models ","818551fe":"## Transforming the data into Dummy variables","4178bc93":"## Let's do some feature engineering on this values and create variable Dummies of the values","f1c8287b":"How can I avoid this error? \n\n\/opt\/conda\/lib\/python3.6\/site-packages\/sklearn\/preprocessing\/label.py:151: DeprecationWarning:\n\nThe truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n","7ecb6004":"# **6. Preprocessing:** <a id=\"Preprocessing\"><\/a> <br>\n- Importing ML librarys\n- Setting X and y variables to the prediction\n- Splitting Data\n","19cf65be":"The old plot that I am trying to substitute with interactive plots","a2782dd5":"# **5. Correlation:** <a id=\"Correlation\"><\/a> <br>\n- Looking the data correlation\n<h1>Looking the correlation of the data","62a9cad1":"<a id=\"Known\"><\/a> <br>\n# **3. First Look at the data:** \n- Looking the Type of Data\n- Null Numbers\n- Unique values\n- The first rows of our dataset","90ecb131":"Pretty and interesting distribution...","0281fcd5":"# **7.2 Model 2:** <a id=\"Modelling 2\"><\/a> <br>","c149e148":" \n\n\n<h2> Data Content<\/h2>\nIt is almost impossible to understand the original dataset due to its complicated system of categories and symbols. Thus, I wrote a small Python script to convert it into a readable CSV file. Several columns are simply ignored, because in my opinion either they are not important or their descriptions are obscure. The selected attributes are:\n\n<b>Age <\/b>(numeric)<br>\n<b>Sex <\/b>(text: male, female)<br>\n<b>Job <\/b>(numeric: 0 - unskilled and non-resident, 1 - unskilled and resident, 2 - skilled, 3 - highly skilled)<br>\n<b>Housing<\/b> (text: own, rent, or free)<br>\n<b>Saving accounts<\/b> (text - little, moderate, quite rich, rich)<br>\n<b>Checking account <\/b>(numeric, in DM - Deutsch Mark)<br>\n<b>Credit amount<\/b> (numeric, in DM)<br>\n<b>Duration<\/b> (numeric, in month)<br>\n<b>Purpose<\/b>(text: car, furniture\/equipment, radio\/TV, domestic appliances, repairs, education, business, vacation\/others<br>\n<b>Risk <\/b> (Value target - Good or Bad Risk)<br>","f3b5806b":"Crosstab session and anothers to explore our data by another metrics a little deep","6c7944ee":"How can I avoid of this ","83ee1098":"## Let's verify the ROC curve","0afb7a06":"<h2> Checking Account variable <\/h2>","3e569368":"Interesting moviments! Highest values come from category \"free\" and we have a different distribuition by Risk","2ffe511b":"Duration of the loans distribuition and density","50c6d10b":"Now, we will verify the values through Checking Accounts","7b8fa4d8":"How can I better configure the legends?  I am trying to substitute the graph below, so how can I use the violinplot on subplots of plotly?","fbc9309c":"# **4. Some explorations:** <a id=\"Explorations\"><\/a> <br>\n\n- Starting by distribuition of column Age.\n- Some Seaborn graphical\n- Columns crossing\n\n","85b6d3d6":"# Tables of Content:\n\n**1. [Introduction](#Introduction)** <br>\n    - Info's about datasets\n**2. [Librarys](#Librarys)** <br>\n    - Importing Librarys\n    - Importing Dataset\n**3. [Knowning the data](#Known)** <br>\n    - 3.1 Looking the Type of Data\n    - 3.2 Shape of data\n    - 3.3 Null Numbers\n    - 3.4 Unique values\n    - 3.5 The first rows of our dataset\n**4. [Exploring some Variables](#Explorations)** <br>\n    - 4.1 Ploting some graphical and descriptive informations\n**5. [Correlation of data](#Correlation)** <br>\n\t- 5.1 Correlation Data\n**6. [Preprocess](#Preprocessing)** <br>\n\t- 6.1 Importing Librarys\n\t- 6.2 Setting X and Y\n    - 6.3 Spliting the X and Y in train and test \n**7. 1 [Model 1](#Modelling 1)** <br>\n    - 7.1.1 Random Forest \n    - 7.1.2 Score values\n    - 7.1.3 Cross Validation \n**7. 2 [Model 2](#Modelling 2)** <br>\n    - 7.2.1 Logistic Regression \n    - 7.2.2 Score values\n    - 7.2.3 Cross Validation \n    - 7.2.4 ROC Curve","2284417a":"Looking the distribuition of Credit Amont","a54e2107":"I will create categories of Age and look the distribuition of Credit Amount by Risk...\n"}}