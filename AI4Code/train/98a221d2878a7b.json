{"cell_type":{"210f7037":"code","4b981649":"code","15ae33a9":"code","d31cb361":"code","63f57a32":"code","21168423":"code","2d579632":"code","07e1b5d8":"code","0aff5272":"code","76880793":"code","ce37ca11":"code","4efcaf93":"code","57e65151":"code","30310673":"code","a1b2fbd8":"code","0af28cc5":"code","af8a1a95":"code","ecff4eca":"code","deee2768":"code","1e1f5665":"code","92b15a3d":"code","cd682e87":"code","e09ece6f":"code","acfeeaa8":"code","20f8ab19":"code","98d93b14":"code","1617549f":"code","e96a81fc":"code","1d9b773e":"code","c466cfc9":"code","c04da224":"code","8783d152":"code","20f0a3fa":"code","9f154fa8":"code","4defcac3":"markdown","0e9f3b31":"markdown","cbed04b2":"markdown"},"source":{"210f7037":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b981649":"import pandas as pd\nimport matplotlib as mpl \nimport matplotlib.pyplot as plt\n\nmpl.style.use('seaborn-darkgrid')","15ae33a9":"df = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')","d31cb361":"df.head()","63f57a32":"df.info()","21168423":"df.describe(include=['O'])","2d579632":"df.describe()","07e1b5d8":"import seaborn as sns","0aff5272":"fig, ax = plt.subplots(figsize=(15,8))\nsns.set_context('talk')\nsns.boxplot(data=df.drop(columns='salary'),ax=ax)","76880793":"import numpy as np\nfig, ax = plt.subplots(figsize=(5,10))\n_= df['hsc_p'].plot(kind='box', ax=ax,)\nplt.axhline(np.mean(df['hsc_p']), xmin= 0.25, xmax=0.75, label='Mean', color='red')\nplt.axhline(np.median(df['hsc_p']), xmin= 0.3, xmax=0.7, label='Median', color='blue')\nax.legend()\n\n### mean is greater than median hence Right skewed data","ce37ca11":"#removing outliears\n\n#calculating upper whiskers\n\nhsc_p = df['hsc_p'].describe()\nUWhiskers = hsc_p['75%'] + 1.5 * (hsc_p['75%'] - hsc_p['25%'])\nLWhiskers = hsc_p['25%'] - 1.5 * (hsc_p['75%'] - hsc_p['25%'])\nprint(f'Upper Whiskers : {UWhiskers}')\nprint(f'Upper Whiskers : {LWhiskers}')","4efcaf93":"df['hsc_p'].loc[df['hsc_p'] > UWhiskers] = UWhiskers\ndf['hsc_p'].loc[df['hsc_p'] < LWhiskers] = LWhiskers","57e65151":"fig, ax = plt.subplots(figsize=(5,10))\n_= df['hsc_p'].plot(kind='box', ax=ax,)\nplt.axhline(np.mean(df['hsc_p']), xmin= 0.25, xmax=0.75, label='Mean', color='red')\nplt.axhline(np.median(df['hsc_p']), xmin= 0.3, xmax=0.7, label='Median', color='blue')\nax.legend()","30310673":"#Checking distribution of Target variables\n\ndf['mba_p'].describe()\n","a1b2fbd8":"#sscp & hscp\nX = df[['ssc_p', 'hsc_p']]\ny = df[['mba_p']]\nprint(X.head())\nprint(y.head())","0af28cc5":"from sklearn.model_selection import train_test_split\n\nxtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=123)","af8a1a95":"print(f'shape of train data : {xtrain.shape} : {ytrain.shape}')\nprint(f'shape of train data : {xtest.shape} : {ytest.shape}')","ecff4eca":"from sklearn.linear_model import LinearRegression","deee2768":"mlr = LinearRegression()\nmlr.fit(xtrain, ytrain)","1e1f5665":"mlr.intercept_, mlr.coef_","92b15a3d":"yhat = mlr.predict(X)","cd682e87":"fig, ax = plt.subplots(figsize=(10,10))\nsns.distplot(ytrain, label='Actual Value', hist=False, ax=ax)\nsns.distplot(mlr.predict(xtrain), label='Predicted Value', hist=False, ax=ax)\nax.legend()\n_ = ax.set_title('Actual Value Vs Predicted Value for Train Data')","e09ece6f":"# from Above figure we can see that it didn't do well when features values were ssc_p, hsc_p\nprint(f'the score = {mlr.score(X, y)* 100}')","acfeeaa8":"sns.regplot(X.iloc[:, 0], y)","20f8ab19":"sns.regplot(X.iloc[:, 1], y)","98d93b14":"pd.concat([X,y], axis=1).corr()","1617549f":"fig, ax = plt.subplots(figsize=(10,10))\nsns.distplot(ytest, label='Actual Value', hist=False, ax=ax)\nsns.distplot(mlr.predict(xtest), label='Predicted Value', hist=False, ax=ax)\nax.legend()\n_ = ax.set_title('Actual Value Vs Predicted Value for Test Data')","e96a81fc":"from sklearn.metrics import mean_squared_error","1d9b773e":"print(f'the mean square error train data is {mean_squared_error(ytrain, mlr.predict(xtrain))}')\nprint(f'the mean square error test data is {mean_squared_error(ytest, mlr.predict(xtest))}')","c466cfc9":"mlr2 = LinearRegression()\nx = df[['ssc_p', 'degree_p']]\ny = df[['mba_p']]\nxtrain, xtest, ytrain, ytest = train_test_split(x , y, test_size=0.2, random_state=0)\nmlr2.fit(xtrain, ytrain)","c04da224":"fig,ax=plt.subplots(1,2, figsize=(20,10))\n\n\nsns.distplot(ytrain, hist=False, color='green', label='Actual', ax=ax[0])\nsns.distplot(mlr2.predict(xtrain), hist=False, color='red', label='predicted', ax=ax[0])\nax[0].legend()\nax[0].set_title('Actual vs predicted Train Data')\n\n\nsns.distplot(ytest, hist=False, color='green', label='Actual', ax=ax[1])\nsns.distplot(mlr2.predict(xtest), hist=False, color='red', label='predicted', ax=ax[1])\nax[1].legend()\nax[1].set_title('Actual vs predicted Test Data')","8783d152":"print('The Score of model (test Data )= ' ,mlr2.score(xtest,ytest) *100)\nprint('The Score of model (Train Data )= ' ,mlr2.score(xtrain,ytrain) *100)\n\nprint(f'The Regression Line is given by : \\n y = {round(mlr2.coef_[0,0], 4)} * {x.columns.values[0]} + {round(mlr2.coef_[0,1], 4)} * {x.columns.values[1]}  + {mlr2.intercept_[0]} ' )","20f0a3fa":"pd.concat([x,y], axis='columns').corr()","9f154fa8":"fig, ax = plt.subplots(2,2, figsize=(20,20), sharey=True, sharex=True)\n\nsns.residplot(xtrain.iloc[:,0], ytrain, ax=ax[0,0])\nsns.residplot(xtrain.iloc[:,1], ytrain, ax=ax[0,1])\n\nsns.residplot(xtest.iloc[:,0], ytest, ax=ax[1,0])\nsns.residplot(xtest.iloc[:,1], ytest, ax=ax[1,1])\n","4defcac3":"\n2) Estimate a multiple regression equation for each of the below scenarios and based on the model\u2019s R-square comment which model is better. \n    (i) Use **mbap as outcome variable and sscp & degreep as the two predictor variables**.  \n    (ii) Use **mbap as outcome variable and hscp & degreep as the two predictor variables**. ","0e9f3b31":"1) Develop an estimated multiple linear regression equation with **mbap as response variable and sscp & hscp as the two predictor variables**. Interpret the regression coefficients and check whether they are significant based on the summary output \n","cbed04b2":"hsc_p have some outliears removing the outliers from hsc_p"}}