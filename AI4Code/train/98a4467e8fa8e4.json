{"cell_type":{"086d07b0":"code","81523c77":"code","19309d40":"code","78154425":"code","347dc6ab":"code","14e46112":"code","eaa1b238":"code","b0dfe633":"code","94b21336":"code","fc44ea50":"code","4d1aa163":"code","73ea0f56":"code","33ba5c7a":"code","8c7ffbaf":"code","7037a2d0":"code","51353980":"code","40a2a7ab":"code","c5651a34":"code","a158afc7":"code","1ab54fde":"code","a3d09f74":"code","411b9c8d":"code","f43f5835":"code","6b9c4600":"code","978922a9":"code","d59649c8":"code","1eb51cfd":"code","ccdf88da":"code","3a0bf93d":"code","90623b44":"code","58368d85":"code","d3287da5":"code","d86d5b19":"code","9c68dc02":"code","83ce4375":"code","a2fbb39e":"code","fc5a8f86":"code","1b8e5711":"code","1a2b0c58":"code","1d4a8042":"code","1d34be50":"code","1e6d78c3":"code","08eb9ae8":"code","eda71d43":"code","94136a5c":"code","163f1e03":"code","78082711":"code","bbef4135":"code","dccfa964":"code","5a4d03e8":"code","8d872f9b":"code","0aed89b5":"markdown","e1a8cb91":"markdown","92e5ca10":"markdown","5ef7c213":"markdown","b362feb0":"markdown","66894c14":"markdown"},"source":{"086d07b0":"import numpy as np\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\nimport time\nimport itertools\nimport warnings\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA","81523c77":"df_cur = pd.read_csv(\"\/kaggle\/input\/euro-exchange-daily-rates-19992020\/euro-daily-hist_1999_2020.csv\", parse_dates=[\"Period\\\\Unit:\"])\ndf_cur.sample(5)","19309d40":"df_cur.info(verbose=True)","78154425":"# Solo me interesa la del USD Dolar contar el Euro\ndf_cur[ ['Period\\\\Unit:' , '[US dollar ]'] ] ","347dc6ab":"df=df_cur[ ['Period\\\\Unit:' , '[US dollar ]'] ] ","14e46112":"df.columns=['Fecha','USD']","eaa1b238":"df.head()","b0dfe633":"df.info()","94b21336":"# Tiene caracteres \"Nulos\"\ndf['USD'].describe()","fc44ea50":"df[df['USD']=='-']['Fecha'].min()","4d1aa163":"df[df['USD']=='-']['Fecha'].max()","73ea0f56":"# Me voy a quedar con los que no tienen nulos. Desde el 01\/05\/2012. Mas que suficiente para probar\ndf=df[ df['Fecha'] > '2012-05-01 00:00:00']","33ba5c7a":"df['USD']=df['USD'].astype(np.number)","8c7ffbaf":"df.set_index('Fecha',inplace=True)\n","7037a2d0":"# Pintamos la serie iniicial:\ndf['USD'].plot()","51353980":"# Nos vamos a coger desde 2019 a 2020, mas que suficiente:\ndf=df[ df.index > '2019-01-01 00:00:00']","40a2a7ab":"# Pintamos la serie inicial\ndf['USD'].plot()","c5651a34":"df['USD_log']=np.log(df['USD'])","a158afc7":"df.head()","1ab54fde":"# Pintamos la serie logaritmica\ndf['USD_log'].plot()","a3d09f74":"# Transformamos la serie a diferencias logaritmicas\ndf['USD_log_diff']=df['USD_log'].diff()","411b9c8d":"# Pintamos la serie de diferencias\ndf['USD_log_diff'].plot()","f43f5835":"df['USD_log_diff2']=df['USD_log_diff'].diff()","6b9c4600":"# Pintamos esta serie\ndf['USD_log_diff2'].plot()","978922a9":"df.dropna(axis=0,inplace=True)","d59649c8":"x=df.index","1eb51cfd":"y = df[\"USD\"]\ndf['USD_mean']=df['USD'].mean()\ny_media=df['USD_mean']","ccdf88da":"y_log=df[\"USD_log\"]\ndf['USD_log_mean']=df['USD_log'].mean()\ny_log_media=df['USD_log_mean']","3a0bf93d":"y_log_diff=df[\"USD_log_diff\"]\ndf['USD_log_diff_mean']=df['USD_log_diff'].mean()\ny_log_diff_media=df['USD_log_diff_mean']","90623b44":"y_log_diff2=df[\"USD_log_diff2\"]\ndf['USD_log_diff2_mean']=df['USD_log_diff2'].mean()\ny_log_diff2_media=df['USD_log_diff2_mean']","58368d85":"# visualizaci\u00f3n de los datos anteriores a los largo de los a\u00f1os\nfig = plt.figure(figsize = (10, 10))\nax1, ax2, ax3, ax4 = fig.subplots(4, 1)\n\nax1.plot(x, y, label = \"Serie Original\")\nax1.plot(x, y_media, label = \"Media de la Serie Original\")\nax1.set_ylim(0, np.max(y)*1.3)\nax1.legend(loc = \"upper left\")\n\nax2.plot(x, y_log, label = \"Serie Log.\")\nax2.plot(x, y_log_media, label = \"Media de la Serie Log.\")\nax2.set_ylim(0, np.max(y_log)*1.3)\nax2.legend(loc = \"lower left\")\n\n\nax3.plot(x, y_log_diff, label = \"Serie Logar\u00edtmica diferenciada\")\nax3.plot(x, y_log_diff_media, label = \"Media de la Serie. Log. Diff\")\nax3.set_ylim(np.min(y_log_diff)*1.5, np.max(y_log_diff)*1.3)\nax3.legend(loc = \"lower left\")\n\nax4.plot(x, y_log_diff2, label = \"Serie Logar\u00edtmica diferenciada dos veces\")\nax4.plot(x, y_log_diff2_media, label = \"Media de la Serie. Log. Diff\")\nax4.set_ylim(np.min(y_log_diff2)*1.5, np.max(y_log_diff2)*1.3)\nax4.legend(loc = \"lower left\")\n\nfig.suptitle(\"Capturaci\u00f3n de Pieles de Lince y sus transformaciones a lo largo de los a\u00f1os a lo largo de los a\u00f1os\");\n","d3287da5":"for serie, nombre_serie in zip([y, y_log, y_log_diff, y_log_diff2], [\"Serie Original\", \"Serie Log.\", \"Serie. Log. Diff\", \"Serie. Log. Diff2\"]):\n    \n    print(\"------------------------------------------------------------------\")\n    \n    print(\"Estamos trabajando con la serie {}\\n\".format(nombre_serie))\n    resultado_analisis = adfuller(serie)\n    \n    valor_estadistico_adf = resultado_analisis[0]\n    p_valor = resultado_analisis[1]\n    \n    print(\"Valor estadistico de ADF de las tablas precalculadas: {}\".format(-2.89))\n    print(\"Valor estadistico de ADF: {}\\n\".format(valor_estadistico_adf))\n    \n    print(\"Nivel de significaci\u00f3n para tomar la serie como estacionaria {}\".format(0.05))\n    print(\"p-valor: {}\\n\".format(p_valor))","d86d5b19":"LAGS = 24\n\nfig = plt.figure(figsize = (10, 10))\n\n((ax1, ax2), (ax3, ax4), (ax5, ax6)) = fig.subplots(3, 2)\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using the built in plots from the stats module\nplot_acf(y, ax = ax1, lags = LAGS, title = \"Autocorrelaci\u00f3n\")\nplot_pacf(y, ax = ax2, lags = LAGS, title = \"Autocorrelaci\u00f3n Parcial\")\n\nplot_acf(y_log, ax = ax3, lags = LAGS, title = \"Autocorrelaci\u00f3n\")\nplot_pacf(y_log, ax = ax4, lags = LAGS, title = \"Autocorrelaci\u00f3n Parcial\")\n\nplot_acf(y_log_diff, ax = ax5, lags = LAGS, title = \"Autocorrelaci\u00f3n\")\nplot_pacf(y_log_diff, ax = ax6, lags = LAGS, title = \"Autocorrelaci\u00f3n Parcial\")\n\nfig.tight_layout()","9c68dc02":"# Para la serie log_diff  vemos en la autocorrelacion parcial un AR(1)\n# en la autocorrelacion evmos un MA de 1 tambien. Asi que seria un ARMA(1,1)","83ce4375":"serie_a_predecir = y_log_diff","a2fbb39e":"serie_a_predecir.head()","fc5a8f86":"serie_a_predecir_df=pd.DataFrame(serie_a_predecir)\nserie_a_predecir_df.sort_values(by='Fecha',inplace=True)\nserie_a_predecir=serie_a_predecir_df['USD_log_diff']\nserie_a_predecir","1b8e5711":"y_index = serie_a_predecir.index\ndate_train = int(len(y_index)*0.9)\n\ny_train = serie_a_predecir[y_index[:date_train]]\ny_test = serie_a_predecir[y_index[date_train:len(y_index)]]","1a2b0c58":"y_train.index.min(),y_train.index.max()","1d4a8042":"y_test.index.min(),y_test.index.max()","1d34be50":"p = d = q = range(0, 3)\npdq = list(itertools.product(p, d, q))","1e6d78c3":"seasonal_pdq = [(0, 0, 0, 0)]\n\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[0]))\nprint('SARIMAX: {} x {}'.format(pdq[3], seasonal_pdq[0]))","08eb9ae8":"pdq","eda71d43":"seasonal_pdq = [(0, 0, 0, 0)]\nbest_score = 0\nbest_params = None\nsalida={}\nfor param in pdq:    \n    mod = sm.tsa.statespace.SARIMAX(y_train,\n                                    order=param,\n                                    seasonal_order=(0,0,0,0),\n                                    enforce_stationarity = False,\n                                    enforce_invertibility = False)\n\n    results = mod.fit()\n    print('ARIMA{}x{}12 - AIC:{}'.format(param, (0,0,0,0), results.aic))\n    # Meto los resultados en un diccionario\n    salida[param]=results.aic","94136a5c":"salida","163f1e03":"# Hago un DataFrame y ordeno para ver cual es el menor.\nsalida_df=pd.DataFrame(index=salida.keys(), data=salida.values())\nsalida_df.sort_values(by=0,ascending=False)","78082711":"# Tiramos el modelo\nmod = sm.tsa.statespace.SARIMAX(y_train,\n                                order = (1,0,0),\n                                seasonal_order = (0,0,0,0),\n                                enforce_stationarity = False,\n                                enforce_invertibility = False)\n\nresults = mod.fit()","bbef4135":"results = mod.fit()\n\nprint(results.summary().tables[1])","dccfa964":"# Para hacer una predicci\u00f3n es suficiente con especificar el n\u00famero de steps\/pasos futuros a estimar.\npred_uc = results.get_forecast(steps = len(y_test))\n\n# Calcula el intervalo de confianza de la predicci\u00f3n.\npred_ci = pred_uc.conf_int()","5a4d03e8":"len(pred_uc)","8d872f9b":"ax = serie_a_predecir.plot(label = 'Valores reales', figsize = (20, 15))\n\npred_uc.predicted_mean.plot(ax = ax, label = 'Predicci\u00f3n')\n\n#ax.fill_between(pred_ci.index,\n#                pred_ci.iloc[:, 0],\n#                pred_ci.iloc[:, 1], color = 'k', alpha = .25)\n\nax.set_xlabel('A\u00f1o')\nax.set_ylabel('Pieles Capturadas')\n\nplt.legend()\nplt.show()","0aed89b5":"No es estacionaria ni de lejos.Tomamos logaritmos","e1a8cb91":"La serie esta ordenada al reves, asi que la voy a cambiar el orden. Para esto me genero un DataFrame, lo ordeno y saco la serie de nuevo. Seguro que se puede hacer mas rapido, pero mi python es de supervivencia.","92e5ca10":"Vemos que la serie de diferencias ya se puede tomar como estacionaria","5ef7c213":"Tampoco es muy estacionaria. ","b362feb0":"Esta ya si parece mas estacionaria. Por si acaso sacamos la diferencia de las diferencias","66894c14":"Leemos el Dataset de esta gente donde tenemos informacion del cambio del $ respecto al Euro desde hace mucho tiempo."}}