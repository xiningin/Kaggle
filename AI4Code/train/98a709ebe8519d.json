{"cell_type":{"ea1062c0":"code","120d2566":"code","5f23d8ea":"code","7eccdaf3":"code","f5b96fb8":"code","628a6cef":"code","7fb51d1c":"code","dd6394f5":"code","0f51a97d":"code","da146c73":"code","fd6a2c4a":"code","d50c71bb":"code","bbbb0dc0":"code","0c18796c":"code","8feda39a":"code","d11f77bb":"code","b37fc76c":"code","eb1c0c0a":"code","d58d5ce4":"code","c02fc820":"code","f24d2362":"code","58c9cd65":"code","0c0b3374":"code","57a50096":"code","3301fb48":"code","48d3b47a":"code","5edae901":"code","563a6eff":"code","ca0d955e":"code","1124f04a":"code","9ea01b7f":"code","dd7d6a08":"code","c99d88eb":"code","1aabbbad":"code","dde345fc":"code","d67094fc":"code","a0fb3e00":"code","f176943c":"code","2bb0255c":"code","87ee1fb3":"code","52b871d0":"code","025d339b":"code","2b500538":"code","efa5bea4":"code","cb5650a5":"code","015c3dc9":"code","497c2f17":"code","252eea51":"code","6356a50b":"markdown","c1deae3d":"markdown","59e93d2d":"markdown","df02c203":"markdown","ea6e14b8":"markdown","dda80a58":"markdown","752be549":"markdown","dff452d2":"markdown","de2a6fc1":"markdown","0e9c49bc":"markdown","1d3f96a3":"markdown","ca11784c":"markdown","47cebc0d":"markdown","88da8c69":"markdown","577a568a":"markdown","ce0df765":"markdown","540b38ed":"markdown","a6acdf83":"markdown","13901eac":"markdown","d5a96d48":"markdown","81f7c00d":"markdown","1108bcce":"markdown","32b15f04":"markdown"},"source":{"ea1062c0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport os \nfrom collections import Counter\n\nplt.style.use('seaborn')\nsns.set(font_scale=1.5)\n\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline\n\n\n# \uae30\ubcf8\uc801 \ubaa8\ub4c8\uc744 \uc784\ud3ec\ud2b8 \ud574\uc90d\ub2c8\ub2e4.","120d2566":"os.listdir(\"..\/input\")\n\n# input\uc758 \ud558\uc704\ud3f4\ub354\ub97c \ud655\uc778\ud574\uc90d\ub2c8\ub2e4. ","5f23d8ea":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\n# \ud2b8\ub808\uc778, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.","7eccdaf3":"df_train.head()\n\n# \uc798 \ubd88\ub7ec\uc84c\ub294\uc9c0 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","f5b96fb8":"df_train.shape, df_test.shape\n\n# train \ub370\uc774\ud130\ub294 1460\uac1c\uc758 \ub370\uc774\ud130\uc640 81\uac1c\uc758 feature\n# test \ub370\uc774\ud130\ub294 1459\uac1c\uc758 \ub370\uc774\ud130\uc640 80\uac1c\uc758 feature\uac00 \uc788\uc2b5\ub2c8\ub2e4.","628a6cef":"numerical_feats = df_train.dtypes[df_train.dtypes != \"object\"].index\nprint(\"Number of Numerical features: \", len(numerical_feats))\n\ncategorical_feats = df_train.dtypes[df_train.dtypes == \"object\"].index\nprint(\"Number of Categorical features: \", len(categorical_feats))\n\n# \ud3b8\uc758\uc0c1 \uc218\uce58\ud615 \ubcc0\uc218\uc640 \uba85\ubaa9\ud615 \ubcc0\uc218\ub97c \ub098\ub220\uc90d\ub2c8\ub2e4.\n# \uc218\uce58\ud615 \ubcc0\uc218\ub294 38\uac1c, \uba85\ubaa9\ud615 \ubcc0\uc218\ub294 43\uac1c\uac00 \uc788\uc2b5\ub2c8\ub2e4.","7fb51d1c":"print(df_train[numerical_feats].columns)\nprint(\"*\"*80)\nprint(df_train[categorical_feats].columns)\n\n# \ubcc0\uc218\uba85\uc744 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4. ","dd6394f5":"def detect_outliers(df, n, features):\n    outlier_indices = []\n    for col in features:\n        Q1 = np.percentile(df[col], 25)\n        Q3 = np.percentile(df[col], 75)\n        IQR = Q3 - Q1\n        \n        outlier_step = 1.5 * IQR\n        \n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(k for k, v in outlier_indices.items() if v > n)\n        \n    return multiple_outliers\n        \nOutliers_to_drop = detect_outliers(df_train, 2, ['Id', 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n       'MiscVal', 'MoSold', 'YrSold'])\n\n# train \ub370\uc774\ud130\uc758 \uc774\uc0c1\uce58\ub97c \ud0d0\uc0c9\ud569\ub2c8\ub2e4.\n# IQR(\ud29c\ud0a4\uc758 \ubc29\ubc95)\uc744 \uc774\uc6a9\ud55c \ud568\uc218\ub97c \uc9c0\uc815\ud558\uc5ec \uc774\uc0c1\uce58 \ud0d0\uc0c9\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.","0f51a97d":"df_train.loc[Outliers_to_drop]\n\n# \uc774\uc0c1\uce58\uac00 \ubc1c\uacac\ub41c \ud589\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.","da146c73":"df_train = df_train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)\ndf_train.shape\n\n# \uc774\uc0c1\uce58\ub4e4\uc744 \uc81c\uac70\ud574\uc8fc\uace0, \uacb0\uacfc\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n# \ud589\uc758 \uc218\uac00 1338\ub85c \uc904\uc5b4\ub4e0\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","fd6a2c4a":"for col in df_train.columns:\n    msperc = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msperc)\n\n# train \ub370\uc774\ud130 \uac01 column\uc758 \uacb0\uce21\uce58\uac00 \uba87 %\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4. \n# df_train[col].isnull().sum() : \ud574\ub2f9 \uc5f4\uc758 \uacb0\uce21\uce58\uac00 \uba87\uac1c\uc778\uc9c0 \uc54c \uc218 \uc788\uac8c\ud558\ub294 \ubb38\uc7a5\uc785\ub2c8\ub2e4. (TRUE=1(\uacb0\uce21\uce58), FALSE=0\uc73c\ub85c \uacc4\uc0b0)\n# df_train[col].shape[0] : \ud574\ub2f9 \uc5f4\uc758 \ucc28\uc6d0 (\uc5f4\uc774 \uc9c0\uc815\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ud589\uc758 \uac2f\uc218\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.)\n# 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0] : \uc704\uc758 \uc124\uba85\uc744 \ud1b5\ud574 %\ub97c \ucd9c\ub825\ud574\uc8fc\ub294 \ubb38\uc7a5\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","d50c71bb":"for col in df_test.columns:\n    msperc = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msperc)\n\n# test \ub370\uc774\ud130\ub3c4 \ud655\uc778\ud574\uc90d\ub2c8\ub2e4.\n# train, test \ubaa8\ub450 PoolQc \ub370\uc774\ud130\uac00 \uac00\uc7a5 \uacb0\uce21\uce58\uac00 \ub9ce\uc2b5\ub2c8\ub2e4.","bbbb0dc0":"missing = df_train.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar(figsize = (12,6))\n\n# \uc9c1\uad00\uc801\uc73c\ub85c \ud655\uc778\ud558\uae30 \uc704\ud574 barplot\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4.","0c18796c":"for col in numerical_feats:\n    print('{:15}'.format(col), \n          'Skewness: {:05.2f}'.format(df_train[col].skew()) , \n          '   ' ,\n          'Kurtosis: {:06.2f}'.format(df_train[col].kurt())  \n         )\n    \n# \uc218\uce58\ud615 \ubcc0\uc218\uc758 Skewness(\ube44\ub300\uce6d\ub3c4), Kurtosis(\ucca8\ub3c4)\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n# \uc774\ub294 \ubd84\ud3ec\uac00 \uc5bc\ub9c8\ub098 \ube44\ub300\uce6d\uc744 \ub744\ub294\uac00 \uc54c\ub824\uc8fc\ub294 \ucc99\ub3c4\uc785\ub2c8\ub2e4. (\ube44\ub300\uce6d\ub3c4: a=0\uc774\uba74 \uc815\uaddc\ubd84\ud3ec, a<0 \uc774\uba74 \uc624\ub978\ucabd\uc73c\ub85c \uce58\uc6b0\uce68, a>0\uc774\uba74 \uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uce68)\n# \ube44\ub300\uce6d\ub3c4\uc640 \ucca8\ub3c4\ub97c \ub744\ub294 \ubcc0\uc218\uac00 \uc5ec\ub7ff \ubcf4\uc785\ub2c8\ub2e4. Target Feature\uc778 \"SalePrice\" \ub610\ud55c \uc57d\uac04\uc758 \uc815\ub3c4\ub97c \ubcf4\uc774\ub294 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.","8feda39a":"corr_data = df_train[['Id', 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n                      'MiscVal', 'MoSold', 'YrSold', 'SalePrice']]\n\ncolormap = plt.cm.PuBu\nsns.set(font_scale=1.0)\n\nf , ax = plt.subplots(figsize = (14,12))\nplt.title('Correlation of Numeric Features with Sale Price',y=1,size=18)\nsns.heatmap(corr_data.corr(),square = True, linewidths = 0.1,\n            cmap = colormap, linecolor = \"white\", vmax=0.8)\n\n# Heat Map\uc740 seaborn \ub355\ubd84\uc5d0 \uc9c1\uad00\uc801\uc73c\ub85c \uc774\ud574\uac00 \uac00\ub2a5\ud558\uc5ec \ubcc0\uc218 \uac04 \uc0c1\uad00\uad00\uacc4\uc5d0 \ub300\ud558\uc5ec \uc27d\uac8c \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n# \ub610\ud55c \ubcc0\uc218 \uac04 \ub2e4\uc911 \uacf5\uc120\uc131\uc744 \uac10\uc9c0\ud558\ub294 \ub370 \uc720\uc6a9\ud569\ub2c8\ub2e4.\n# \ub300\uac01\uc120 \uc5f4\uc744 \uc81c\uc678\ud55c \ubc15\uc2a4 \uc911 \uac00\uc7a5 \uc9c4\ud55c \ud30c\ub780\uc0c9\uc744 \ub744\ub294 \ubc15\uc2a4\uac00 \ubcf4\uc785\ub2c8\ub2e4.\n# \uccab \ubc88\uc9f8\ub294 'TotalBsmtSF'\uc640 '1stFlrSF'\ubcc0\uc218\uc758 \uad00\uacc4\uc785\ub2c8\ub2e4.\n# \ub450 \ubc88\uc9f8\ub294 'Garage'\uc640 \uad00\ub828\ud55c \ubcc0\uc218\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \n# \ub450 \uacbd\uc6b0 \ubaa8\ub450 \ubcc0\uc218 \uc0ac\uc774\uc758 \uc0c1\uad00 \uad00\uacc4\uac00 \ub108\ubb34 \uac15\ud558\uc5ec \ub2e4\uc911 \uacf5\uc120\uc131(MultiColarisity) \uc0c1\ud669\uc774 \ub098\ud0c0\ub0a0 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n# \ubcc0\uc218\uac00 \uac70\uc758 \ub3d9\uc77c\ud55c \uc815\ubcf4\ub97c \uc81c\uacf5\ud558\ubbc0\ub85c \ub2e4\uc911 \uacf5\uc120\uc131\uc774 \uc2e4\uc81c\ub85c \ubc1c\uc0dd\ud55c\ub2e4\ub294 \uacb0\ub860\uc744 \ub0b4\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n# \ub610\ud55c \ud655\uc778\ud574\uc57c\ud560 \ubd80\ubd84\uc740 'SalePrice'\uc640\uc758 \uc0c1\uad00 \uad00\uacc4\uc785\ub2c8\ub2e4. \n# 'GrLivArea', 'TotalBsmtSF'\ubc0f 'OverallQual'\uc740 \ud070 \uad00\uacc4\ub97c \ubcf4\uc785\ub2c8\ub2e4. \n# \ub098\uba38\uc9c0 \ubcc0\uc218\uc640\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \uc790\uc138\ud788 \uc54c\uc544\ubcf4\uae30 \uc704\ud574 Zoomed Heat Map\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.","d11f77bb":"k= 11\ncols = corr_data.corr().nlargest(k,'SalePrice')['SalePrice'].index\nprint(cols)\ncm = np.corrcoef(df_train[cols].values.T)\nf , ax = plt.subplots(figsize = (12,10))\nsns.heatmap(cm, vmax=.8, linewidths=0.1,square=True,annot=True,cmap=colormap,\n            linecolor=\"white\",xticklabels = cols.values ,annot_kws = {'size':14},yticklabels = cols.values)\n\n# \uac00\uc7a5 \ub208\uc5d0 \ub744\ub294 GarageCars\uc640 GarageArea, TotalBsmtSF\uc640 1stFlrSF\ub294 \uc11c\ub85c \ubc00\uc811\ud558\uac8c \uc5f0\uad00\ub418\uc5b4 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n# Target feature\uc640 \uac00\uc7a5 \ubc00\uc811\ud55c \uc5f0\uad00\uc774 \uc788\ub294 feature\ub294 'OverallQual', 'GrLivArea'\ubc0f 'TotalBsmtSF'\ub85c \ubcf4\uc785\ub2c8\ub2e4.\n# \uba3c\uc800 \ub9d0\ud588\ub358 GarageCars\uc640 GarageArea, TotalBsmtSF\uc640 1stFlrSF, TotRmsAbvGrd\uc640 GrLivArea\ub294 \ubaa8\ub450 \ub9e4\uc6b0 \uc720\uc0ac\ud55c \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc73c\uba70 \ub2e4\uc911\uacf5\uc120\uc131\uc774 \ub098\ud0c0\ub09c\ub2e4\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n# SalePrice\uc640 \ub354 \uc5f0\uad00\ub418\uc5b4\uc788\ub294 \ubcc0\uc218\uc778 GarageCars\uc640 TotalBsmtSF, GrLivArea\ub97c \ub0a8\uae30\uace0 \ub098\uba38\uc9c0\ub294 \uc774\ud6c4\uc5d0 \ubc84\ub9ac\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n# SalePrice\uc640\uc758 \uc5f0\uad00\uc744 \ub354 \uc54c\uc544\ubcf4\uae30 \uc704\ud574 PairPlot\uc744 \uadf8\ub824\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4.","b37fc76c":"sns.set()\ncolumns = ['SalePrice','OverallQual','TotalBsmtSF','GrLivArea','GarageCars','FullBath','YearBuilt','YearRemodAdd']\nsns.pairplot(df_train[columns],size = 2 ,kind ='scatter',diag_kind='kde')\nplt.show()\n\n# \uc704\uc758 Zoomed Heat Map\uc5d0\uc11c \ub2e4\uc911\uacf5\uc120\uc131\uc744 \ubcf4\uc774\ub294 \ubcc0\uc218 \uc911 SalePrice\uc640 \uc5f0\uad00\uc774 \ub35c \ud55c \ubcc0\uc218\ub97c \uc81c\uc678\ud558\uace0 PairPlot\uc744 \uadf8\ub9bd\ub2c8\ub2e4.\n# 'TotalBsmtSF'\uc640 'GrLiveArea'\ub294 \ub370\uc774\ud130 \uc124\uba85\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef\uc774 \uc9c0\ud558\uc2e4\uc758 \uba74\uc801\uacfc \uc0dd\ud65c\uacf5\uac04 \uba74\uc801\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.\n# 'TotalBsmtSF'\uc640 'GrLiveArea'\uc758 plot\uc744 \ubcf4\uba74 \uc810\ub4e4\uc774 \uc9c1\uc120\ucc98\ub7fc \uadf8\ub824\uc9c0\uace0 \ub300\ubd80\ubd84\uc758 \uc810\uc740 \ud574\ub2f9 \uc120 \uc544\ub798\uc5d0 \uc720\uc9c0\ub429\ub2c8\ub2e4. \n# \uc774\uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uc9c0\ud558\uc2e4 \uba74\uc801\uc774 \uc9c0\uc0c1 \uc0dd\ud65c \uba74\uc801\uacfc \uac19\uc744 \uc218 \uc788\uc9c0\ub9cc, \ub354 \ud06c\uc9c4 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ubcf4\uc5ec\uc9c0\ub294 \ud2b9\uc9d5\uc774\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n# 'SalePrice'\uc640 'YearBuilt'\uc758 plot\uc744 \ubcf4\uba74 \uc6b0\uc0c1\ud5a5 \uace1\uc120\uc744 \ubcf4\uc785\ub2c8\ub2e4.\n# \uc774\uac83\uc740 \uc804\ub144\ub3c4 \ub300\ube44 \uc8fc\ud0dd \uac00\uaca9 \uc0c1\uc2b9\uc758 \uac00\uc18d\uc744 \uc758\ubbf8\ud55c\ub2e4\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","eb1c0c0a":"fig, ((ax1, ax2), (ax3, ax4),(ax5,ax6)) = plt.subplots(nrows=3, ncols=2, figsize=(16,13))\nOverallQual_scatter_plot = pd.concat([df_train['SalePrice'],df_train['OverallQual']],axis = 1)\nsns.regplot(x='OverallQual',y = 'SalePrice',data = OverallQual_scatter_plot,scatter= True, fit_reg=True, ax=ax1)\nTotalBsmtSF_scatter_plot = pd.concat([df_train['SalePrice'],df_train['TotalBsmtSF']],axis = 1)\nsns.regplot(x='TotalBsmtSF',y = 'SalePrice',data = TotalBsmtSF_scatter_plot,scatter= True, fit_reg=True, ax=ax2)\nGrLivArea_scatter_plot = pd.concat([df_train['SalePrice'],df_train['GrLivArea']],axis = 1)\nsns.regplot(x='GrLivArea',y = 'SalePrice',data = GrLivArea_scatter_plot,scatter= True, fit_reg=True, ax=ax3)\nGarageCars_scatter_plot = pd.concat([df_train['SalePrice'],df_train['GarageCars']],axis = 1)\nsns.regplot(x='GarageCars',y = 'SalePrice',data = GarageCars_scatter_plot,scatter= True, fit_reg=True, ax=ax4)\nFullBath_scatter_plot = pd.concat([df_train['SalePrice'],df_train['FullBath']],axis = 1)\nsns.regplot(x='FullBath',y = 'SalePrice',data = FullBath_scatter_plot,scatter= True, fit_reg=True, ax=ax5)\nYearBuilt_scatter_plot = pd.concat([df_train['SalePrice'],df_train['YearBuilt']],axis = 1)\nsns.regplot(x='YearBuilt',y = 'SalePrice',data = YearBuilt_scatter_plot,scatter= True, fit_reg=True, ax=ax6)\nYearRemodAdd_scatter_plot = pd.concat([df_train['SalePrice'],df_train['YearRemodAdd']],axis = 1)\nYearRemodAdd_scatter_plot.plot.scatter('YearRemodAdd','SalePrice')\n\n# Target Feature \"SalePrice\"\uc640 \uac00\uc7a5 \ubc00\uc811\ud55c \uc5f0\uad00\uc774 \uc788\ub2e4\uace0 \ud310\ub2e8\ub410\ub358 \ubcc0\uc218\ub4e4\uc758 Scatter Plot\uc744 \uadf8\ub9bd\ub2c8\ub2e4.\n# OverallQual, GarageCars, Fullbath\uc640 \uac19\uc740 \ubcc0\uc218\ub4e4\uc740 \uc2e4\uc81c\ub85c\ub294 \ubc94\uc8fc\ud615 \ub370\uc774\ud130\uc758 \ud2b9\uc9d5\uc744 \ubcf4\uc778\ub2e4\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\ub4f1\uae09, \uac2f\uc218 \ub4f1\uc744 \uc758\ubbf8\ud558\uae30 \ub54c\ubb38)","d58d5ce4":"for catg in list(categorical_feats) :\n    print(df_train[catg].value_counts())\n    print('#'*50)\n    \n# \ubc94\uc8fc\ud615 \ubcc0\uc218\ub4e4\uacfc \uac01 \ubc94\uc8fc\ub4e4\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.","c02fc820":"li_cat_feats = list(categorical_feats)\nnr_rows = 15\nnr_cols = 3\n\nfig, axs = plt.subplots(nr_rows, nr_cols, figsize=(nr_cols*4,nr_rows*3))\n\nfor r in range(0,nr_rows):\n    for c in range(0,nr_cols):  \n        i = r*nr_cols+c\n        if i < len(li_cat_feats):\n            sns.boxplot(x=li_cat_feats[i], y=df_train[\"SalePrice\"], data=df_train, ax = axs[r][c])\n    \nplt.tight_layout()    \nplt.show()\n\n# BoxPlot\uc744 \uadf8\ub824 Categorical Feature\uc640 SalePrice\uc758 \uad00\uacc4\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n# \uc77c\ubd80 \ubc94\uc8fc\ub294 \ub2e4\ub978 \ubc94\uc8fc\ubcf4\ub2e4 SalePrice\uc640 \uad00\ub828\ud558\uc5ec \ub354 \ub2e4\uc591\ud558\uac8c \ubcf4\uc785\ub2c8\ub2e4. \n# Neighborhood \ubcc0\uc218\ub294 \uc8fc\ud0dd \uac00\uaca9 \ud3b8\ucc28\uac00 \ub9e4\uc6b0 \ud06c\ubbc0\ub85c \uc601\ud5a5\uc774 \ud06c\ub2e4\uace0 \uc0dd\uac01\ub429\ub2c8\ub2e4.\n# SaleType \ub610\ud55c \ub9c8\ucc2c\uac00\uc9c0\uc785\ub2c8\ub2e4.\n# \ub610\ud55c \uc218\uc601\uc7a5\uc774 \uc788\uc73c\uba74 \uac00\uaca9\uc774 \ud06c\uac8c \uc99d\uac00\ud558\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n# \uc815\ub9ac\ud558\uba74 SalePrice\uc5d0 \uc601\ud5a5\uc744 \ub9ce\uc774 \ub07c\uce58\ub294 \ubcc0\uc218\ub85c\ub294 'MSZoning', 'Neighborhood', 'Condition2', 'MasVnrType', 'ExterQual', 'BsmtQual', 'CentralAir', 'Electrical', 'KitchenQual', 'SaleType' \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4.","f24d2362":"num_strong_corr = ['SalePrice','OverallQual','TotalBsmtSF','GrLivArea','GarageCars',\n                   'FullBath','YearBuilt','YearRemodAdd']\n\nnum_weak_corr = ['MSSubClass', 'LotFrontage', 'LotArea', 'OverallCond', 'MasVnrArea', 'BsmtFinSF1',\n                 'BsmtFinSF2', 'BsmtUnfSF', '1stFlrSF', '2ndFlrSF','LowQualFinSF', 'BsmtFullBath',\n                 'BsmtHalfBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n                 'Fireplaces', 'GarageYrBlt', 'GarageArea', 'WoodDeckSF','OpenPorchSF',\n                 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']\n\ncatg_strong_corr = ['MSZoning', 'Neighborhood', 'Condition2', 'MasVnrType', 'ExterQual',\n                    'BsmtQual','CentralAir', 'Electrical', 'KitchenQual', 'SaleType']\n\ncatg_weak_corr = ['Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', \n                  'LandSlope', 'Condition1',  'BldgType', 'HouseStyle', 'RoofStyle', \n                  'RoofMatl', 'Exterior1st', 'Exterior2nd', 'ExterCond', 'Foundation', \n                  'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', \n                  'HeatingQC', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', \n                  'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', \n                  'SaleCondition' ]\n\n# \ud3b8\uc758\ub97c \uc704\ud574 SalePrice\uc640 \uad00\ub828\uc774 \ud070 \ubcc0\uc218\uc640 \uc544\ub2cc \ubcc0\uc218\ub97c \ubd84\ub9ac\ud574\ub193\uc2b5\ub2c8\ub2e4.\n# \"Id\"\ub294 submission \ub54c\ubb38\uc5d0 \ub530\ub85c \ube7c\ub193\uaca0\uc2b5\ub2c8\ub2e4.","58c9cd65":"f, ax = plt.subplots(1, 1, figsize = (10,6))\ng = sns.distplot(df_train[\"SalePrice\"], color = \"b\", label=\"Skewness: {:2f}\".format(df_train[\"SalePrice\"].skew()), ax=ax)\ng = g.legend(loc = \"best\")\n\nprint(\"Skewness: %f\" % df_train[\"SalePrice\"].skew())\nprint(\"Kurtosis: %f\" % df_train[\"SalePrice\"].kurt())\n\n# Target Feature\uc778 SalePrice\uc758 \ube44\ub300\uce6d\ub3c4\uc640 \ucca8\ub3c4\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. \n# \uadf8\ub798\ud504\uc640 \uc218\uce58\ub97c \ud655\uc778\ud558\uba74 \uc815\uc0c1\uc801\uc73c\ub85c \ubd84\ud3ec\ub418\uc9c0 \uc54a\ub294\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n# \uc608\uce21\uc758 \uc815\ud655\ub3c4\ub97c \ub192\ud788\uae30 \uc704\ud574 \ub85c\uadf8 \ubcc0\ud658\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.","0c0b3374":"df_train[\"SalePrice_Log\"] = df_train[\"SalePrice\"].map(lambda i:np.log(i) if i>0 else 0)\n\nf, ax = plt.subplots(1, 1, figsize = (10,6))\ng = sns.distplot(df_train[\"SalePrice_Log\"], color = \"b\", label=\"Skewness: {:2f}\".format(df_train[\"SalePrice_Log\"].skew()), ax=ax)\ng = g.legend(loc = \"best\")\n\nprint(\"Skewness: %f\" % df_train['SalePrice_Log'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice_Log'].kurt())\n\ndf_train.drop('SalePrice', axis= 1, inplace=True)\n\n# kewness, Kurtosis\ub97c \uc5c6\uc560\uc8fc\uae30 \uc704\ud574 \ub85c\uadf8\ub97c \ucde8\ud574\uc90d\ub2c8\ub2e4.\n# Log\ubcc0\ud658\uc744 \uc218\ud589\ud55c \uc0c8\ub85c\uc6b4 feature \"SalePrice_Log\"\ub97c \ub9cc\ub4e4\uace0 \uc804 Feature\uc778 \"Saleprice\"\ub97c \ubc84\ub824\uc90d\ub2c8\ub2e4.\n# \ub85c\uadf8\ub97c \ucde8\ud574\uc900 \uadf8\ub798\ud504\uc640 \uc218\uce58\uac00 \ubc14\ub010 \ubaa8\uc2b5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc815\uaddc\uadfc\uc0ac\ud654)","57a50096":"cols_fillna = ['PoolQC','MiscFeature','Alley','Fence','MasVnrType','FireplaceQu',\n               'GarageQual','GarageCond','GarageFinish','GarageType', 'Electrical',\n               'KitchenQual', 'SaleType', 'Functional', 'Exterior2nd', 'Exterior1st',\n               'BsmtExposure','BsmtCond','BsmtQual','BsmtFinType1','BsmtFinType2',\n               'MSZoning', 'Utilities']\n\nfor col in cols_fillna:\n    df_train[col].fillna('None',inplace=True)\n    df_test[col].fillna('None',inplace=True)\n    \n# \uc704\uc5d0\uc11c \uc124\uba85\ud55c \ubc14\uc640 \uac19\uc774 '\uc5c6\ub2e4'\uc758 \uc758\ubbf8\ub97c \uac16\ub294 \ubcc0\uc218\ub4e4\uc785\ub2c8\ub2e4.\n# NaN\uc744 \uc5c6\ub2e4\ub294 \uc758\ubbf8\uc758 None\uc73c\ub85c \ub300\uccb4\ud574\uc90d\ub2c8\ub2e4.","3301fb48":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(5)\n\n# \uacb0\uce21\uce58\uc758 \ucc98\ub9ac \uc815\ub3c4\ub97c \ud655\uc778\ud574 \uc90d\ub2c8\ub2e4.","48d3b47a":"df_train.fillna(df_train.mean(), inplace=True)\ndf_test.fillna(df_test.mean(), inplace=True)\n\n# \ub098\uba38\uc9c0 \uacb0\uce21\uce58\ub4e4\uc740 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\ud558\uaca0\uc2b5\ub2c8\ub2e4.","5edae901":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(5)\n\n# \ub2e4\uc2dc \ud655\uc778\ud574\ubcf4\uba74 \uacb0\uce21\uce58\uac00 \uc0ac\ub77c\uc9c4 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","563a6eff":"df_train.isnull().sum().sum(), df_test.isnull().sum().sum()","ca0d955e":"id_test = df_test['Id']\n\nto_drop_num  = num_weak_corr\nto_drop_catg = catg_weak_corr\n\ncols_to_drop = ['Id'] + to_drop_num + to_drop_catg \n\nfor df in [df_train, df_test]:\n    df.drop(cols_to_drop, inplace= True, axis = 1)\n    \n# SalePrice\uc640\uc758 \uc0c1\uad00\uad00\uacc4\uac00 \uc57d\ud55c \ubaa8\ub4e0 \ubcc0\uc218\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4.","1124f04a":"df_train.head()\n\n# \uc0ad\uc81c\uac00 \uc798 \uc9c4\ud589\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.","9ea01b7f":"catg_list = catg_strong_corr.copy()\ncatg_list.remove('Neighborhood')\n\nfor catg in catg_list :\n    sns.violinplot(x=catg, y=df_train[\"SalePrice_Log\"], data=df_train)\n    plt.show()\n    \n# \uac01 \ubc94\uc8fc\ub4e4\uc744 \uac1c\ubcc4\ub85c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","dd7d6a08":"fig, ax = plt.subplots()\nfig.set_size_inches(16, 5)\nsns.violinplot(x='Neighborhood', y=df_train[\"SalePrice_Log\"], data=df_train, ax=ax)\nplt.xticks(rotation=45)\nplt.show()\n\n# \ubc94\uc8fc\uac00 \uac00\uc7a5 \ub9ce\uc740 Neighborhood \ubcc0\uc218\ub3c4 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","c99d88eb":"for catg in catg_list :\n    g = df_train.groupby(catg)[\"SalePrice_Log\"].mean()\n    print(g)\n    \n# \uac01 \ubc94\uc8fc\ub4e4\uc5d0 \ud574\ub2f9\ub418\ub294 SalePrice_Log \ud3c9\uade0\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.  ","1aabbbad":"# 'MSZoning'\nmsz_catg2 = ['RM', 'RH']\nmsz_catg3 = ['RL', 'FV'] \n\n\n# Neighborhood\nnbhd_catg2 = ['Blmngtn', 'ClearCr', 'CollgCr', 'Crawfor', 'Gilbert', 'NWAmes', 'Somerst', 'Timber', 'Veenker']\nnbhd_catg3 = ['NoRidge', 'NridgHt', 'StoneBr']\n\n# Condition2\ncond2_catg2 = ['Norm', 'RRAe']\ncond2_catg3 = ['PosA', 'PosN'] \n\n# SaleType\nSlTy_catg1 = ['Oth']\nSlTy_catg3 = ['CWD']\nSlTy_catg4 = ['New', 'Con']\n\n# \uc218\uce58\ud615 \ubcc0\ud658\uc744 \uc704\ud574 Violinplot\uacfc SalePrice_Log \ud3c9\uade0\uc744 \ucc38\uace0\ud558\uc5ec \uac01 \ubcc0\uc218\ub4e4\uc758 \ubc94\uc8fc\ub4e4\uc744 \uadf8\ub8f9\ud654 \ud569\ub2c8\ub2e4.","dde345fc":"for df in [df_train, df_test]:\n    \n    df['MSZ_num'] = 1  \n    df.loc[(df['MSZoning'].isin(msz_catg2) ), 'MSZ_num'] = 2    \n    df.loc[(df['MSZoning'].isin(msz_catg3) ), 'MSZ_num'] = 3        \n    \n    df['NbHd_num'] = 1       \n    df.loc[(df['Neighborhood'].isin(nbhd_catg2) ), 'NbHd_num'] = 2    \n    df.loc[(df['Neighborhood'].isin(nbhd_catg3) ), 'NbHd_num'] = 3    \n\n    df['Cond2_num'] = 1       \n    df.loc[(df['Condition2'].isin(cond2_catg2) ), 'Cond2_num'] = 2    \n    df.loc[(df['Condition2'].isin(cond2_catg3) ), 'Cond2_num'] = 3    \n    \n    df['Mas_num'] = 1       \n    df.loc[(df['MasVnrType'] == 'Stone' ), 'Mas_num'] = 2 \n    \n    df['ExtQ_num'] = 1       \n    df.loc[(df['ExterQual'] == 'TA' ), 'ExtQ_num'] = 2     \n    df.loc[(df['ExterQual'] == 'Gd' ), 'ExtQ_num'] = 3     \n    df.loc[(df['ExterQual'] == 'Ex' ), 'ExtQ_num'] = 4     \n   \n    df['BsQ_num'] = 1          \n    df.loc[(df['BsmtQual'] == 'Gd' ), 'BsQ_num'] = 2     \n    df.loc[(df['BsmtQual'] == 'Ex' ), 'BsQ_num'] = 3     \n \n    df['CA_num'] = 0          \n    df.loc[(df['CentralAir'] == 'Y' ), 'CA_num'] = 1    \n\n    df['Elc_num'] = 1       \n    df.loc[(df['Electrical'] == 'SBrkr' ), 'Elc_num'] = 2 \n\n\n    df['KiQ_num'] = 1       \n    df.loc[(df['KitchenQual'] == 'TA' ), 'KiQ_num'] = 2     \n    df.loc[(df['KitchenQual'] == 'Gd' ), 'KiQ_num'] = 3     \n    df.loc[(df['KitchenQual'] == 'Ex' ), 'KiQ_num'] = 4      \n    \n    df['SlTy_num'] = 2       \n    df.loc[(df['SaleType'].isin(SlTy_catg1) ), 'SlTy_num'] = 1  \n    df.loc[(df['SaleType'].isin(SlTy_catg3) ), 'SlTy_num'] = 3  \n    df.loc[(df['SaleType'].isin(SlTy_catg4) ), 'SlTy_num'] = 4 \n    \n# \uac01 \ubc94\uc8fc\ubcc4\ub85c \uc218\uce58\ud615 \ubcc0\ud658\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.","d67094fc":"new_col_HM = df_train[['SalePrice_Log', 'MSZ_num', 'NbHd_num', 'Cond2_num', 'Mas_num', 'ExtQ_num', 'BsQ_num', 'CA_num', 'Elc_num', 'KiQ_num', 'SlTy_num']]\n\ncolormap = plt.cm.PuBu\nplt.figure(figsize=(10, 8))\nplt.title(\"Correlation of New Features\", y = 1.05, size = 15)\nsns.heatmap(new_col_HM.corr(), linewidths = 0.1, vmax = 1.0,\n           square = True, cmap = colormap, linecolor = \"white\", annot = True, annot_kws = {\"size\" : 12})\n\n# \ubcc0\ud658\ud558\uc5ec \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 numerical feature\ub4e4 \ub610\ud55c Heat Map\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4.\n# NbHd_num, ExtQ_num, BsQ_num, KiQ_num\ub97c \uc81c\uc678\ud558\uace0\ub294 SalePrice_Log\uc640 \ud070 \uc0c1\uad00\uad00\uacc4\uac00\uc788\ub294 \uc5f4\uc740 \uac70\uc758 \uc5c6\uc2b5\ub2c8\ub2e4.","a0fb3e00":"df_train.drop(['MSZoning','Neighborhood' , 'Condition2', 'MasVnrType', 'ExterQual', 'BsmtQual','CentralAir', 'Electrical', 'KitchenQual', 'SaleType', 'Cond2_num', 'Mas_num', 'CA_num', 'Elc_num', 'SlTy_num'], axis = 1, inplace = True)\ndf_test.drop(['MSZoning', 'Neighborhood' , 'Condition2', 'MasVnrType', 'ExterQual', 'BsmtQual','CentralAir', 'Electrical', 'KitchenQual', 'SaleType', 'Cond2_num', 'Mas_num', 'CA_num', 'Elc_num', 'SlTy_num'], axis = 1, inplace = True)\n\n# \uae30\uc874 \ubc94\uc8fc\ud615 \ubcc0\uc218\uc640 \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \uc218\uce58\ud615 \ubcc0\uc218 \uc5ed\uc2dc \uc720\uc758\ud558\uc9c0 \uc54a\uc740 \uac83\ub4e4\uc740 \uc0ad\uc81c\ud569\ub2c8\ub2e4. ","f176943c":"df_train.head()\n\n# \uc644\ubcbd\ud788 \uc0ad\uc81c\ub418\uc5b4 \uc720\uc758\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\ub294 \uc218\uce58\ud615 \ubcc0\uc218\ub9cc \ub0a8\uc558\uc2b5\ub2c8\ub2e4.","2bb0255c":"df_test.head()","87ee1fb3":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nX_train = df_train.drop(\"SalePrice_Log\", axis = 1).values\ntarget_label = df_train[\"SalePrice_Log\"].values\nX_test = df_test.values\nX_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size = 0.2, random_state = 2000)\n\n# Test\ud558\uae30 \uc804 Validation \uacfc\uc815\uc744 \uaca8\ucc98\uc90d\ub2c8\ub2e4.\n# train\ub370\uc774\ud130\uc758 20%\ub97c validation\uc73c\ub85c \uc8fc\uace0 80%\uc744 train\uc73c\ub85c \ub0a8\uaca8\uc8fc\uc5b4 \ubd84\ub9ac\ud574\uc90d\ub2c8\ub2e4.","52b871d0":"import xgboost\nregressor = xgboost.XGBRegressor(colsample_bytree = 0.4603, learning_rate = 0.06, min_child_weight = 1.8,\n                                 max_depth= 3, subsample = 0.52, n_estimators = 2000,\n                                 random_state= 7, ntrhead = -1)\nregressor.fit(X_tr,y_tr)\n\n# XGBoost \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4.","025d339b":"y_hat = regressor.predict(X_tr)\n\nplt.scatter(y_tr, y_hat, alpha = 0.2)\nplt.xlabel('Targets (y_tr)',size=18)\nplt.ylabel('Predictions (y_hat)',size=18)\nplt.show()\n\n# \uc608\uce21 \ub41c y \uac12 (y_hat)\uc5d0 \ub300\ud55c Scatter Plot\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4.","2b500538":"regressor.score(X_tr,y_tr)","efa5bea4":"y_hat_test = regressor.predict(X_vld)\n\n\nplt.scatter(y_vld, y_hat_test, alpha=0.2)\nplt.xlabel('Targets (y_vld)',size=18)\nplt.ylabel('Predictions (y_hat_test)',size=18)\nplt.show()\n\n# validation\uc73c\ub85c \uc608\uce21\ud574\ubd05\ub2c8\ub2e4.","cb5650a5":"regressor.score(X_vld,y_vld)","015c3dc9":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = regressor, X = X_tr, y = y_tr, cv = 10)\n\n# k-fold validation\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.","497c2f17":"print(accuracies.mean())\nprint(accuracies.std())\n\n# \uc815\ud655\ub3c4\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","252eea51":"use_logvals = 1\n\npred_xgb = regressor.predict(X_test)\n\nsub_xgb = pd.DataFrame()\nsub_xgb['Id'] = id_test\nsub_xgb['SalePrice'] = pred_xgb\n\nif use_logvals == 1:\n    sub_xgb['SalePrice'] = np.exp(sub_xgb['SalePrice']) \n\nsub_xgb.to_csv('xgb.csv',index=False)\n\n# use_logvals\ub294 Log\ub97c \ucde8\ud574\uc900 Target feature\uc744 exp\ud574\uc8fc\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 \uc2a4\uc704\uce58 \uc5ed\ud560\uc785\ub2c8\ub2e4.\n# \uc81c\ub300\ub85c \ub41c \uc608\uce21\uc744 \uc704\ud574 \ud559\uc2b5 \ud6c4 Log\ubcc0\ud658\uc744 \ud480\uc5b4\uc918\uc57c\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n# \uc774 \uc140\uc758 \ucf54\ub4dc\ub97c \ud1b5\ud574 submission\uae4c\uc9c0 \uc644\ub8cc\ud558\uac8c\ub429\ub2c8\ub2e4.","6356a50b":"#### Zoomed Heat Map","c1deae3d":"### - \uc720\uc758\ud558\uc9c0 \uc54a\uc740 \ubcc0\uc218 \uc0ad\uc81c","59e93d2d":"### - \uc774\uc0c1\uce58 \ud0d0\uc0c9 \ubc0f \uc81c\uac70","df02c203":"#### Data Check \uacfc\uc815\uc5d0\uc11c \uc0b4\ud3b4\ubd24\uc744 \ub54c Skewness\uc640 Kurtosis\uac00 \ubcf4\uc774\ub294 \ubcc0\uc218\ub4e4\uc774 \uaf64 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.\n#### \ud558\uc9c0\ub9cc EDA \uacfc\uc815\uc5d0\uc11c \uc911\uc694\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\uc5c8\ub358 Numerical feature\ub4e4\uc740 Skewness\uc640 Kurtosis\uac00 \uc218\uce58\uc801\uc73c\ub85c \ubcf4\uc774\uc9c0 \uc54a\uc73c\ubbc0\ub85c Target Feature\uc778 SalePrice\ub9cc Log\ub97c \ucde8\ud574\uc90d\ub2c8\ub2e4.","ea6e14b8":"### - Categorical Data \uc218\uce58\ud615 \ubcc0\ud658\n\n#### EDA\uacfc\uc815\uc758 Boxplot\uc5d0\uc11c \ubcf4\uc558\ub358 SalePrice\uc5d0 \uc601\ud5a5\uc774 \ud070 \ubcc0\uc218\ub4e4\uc744 \ubcc0\ud658\ud574\uc90d\ub2c8\ub2e4.\n#### \uba3c\uc800 ViolinPlot\uc744 \uadf8\ub824 \uac01 \ubc94\uc8fc\ub4e4\uacfc SalePrice\uc758 \uad00\uacc4\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","dda80a58":"### - \uacb0\uce21 \ub370\uc774\ud130 \ucc98\ub9ac\n\n#### \uc9d1\uac12 \uc608\uce21 \ubb38\uc81c\uc5d0\ub294 \uad49\uc7a5\ud788 \ub9ce\uc740 NaN \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \n#### \ud558\uc9c0\ub9cc \uc5ec\ub7ec \ubcc0\uc218\ub4e4\uc758 \ud2b9\uc9d5\uc744 \uc798 \uc0b4\ud3b4\ubcf4\uba74 NaN\uc758 \uc758\ubbf8\ub97c \uc7ac\ud30c\uc545\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n#### \ub2e8\uc9c0 \uc788\ub2e4, \uc5c6\ub2e4 \uac1c\ub150\uc77c\ubfd0 \uce21\uc815\ub418\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uc758 \uc758\ubbf8\uac00 \uc544\ub2d9\ub2c8\ub2e4.\n#### \uc774\ub7ec\ud55c \ubcc0\uc218\ub4e4\uc758 \ud2b9\uc9d5\uc744 \uc798 \ud30c\uc545\ud558\uc5ec \uacb0\uce21 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud574\uc8fc\ub3c4\ub85d \ud569\ub2c8\ub2e4.","752be549":"### - Numerical Data \ud0d0\uc0c9\n\n#### \uc218\uce58\ud615 \ub370\uc774\ud130\ub4e4\uc744 \uc54c\uc544\ubcf4\uae30 \uc704\ud574 \ub2e4\uc74c 4\uac00\uc9c0\uc758 Plot\uc744 \uadf8\ub9bd\ub2c8\ub2e4.\n* Correlation Heat Map\n* Zoomed Heat Map\n* Pair Plot\n* Scatter Plot","dff452d2":"### <a id='0'><strong>\ubcf8 \ucee4\ub110\uc758 \uc21c\uc11c\uc785\ub2c8\ub2e4.<\/strong><\/a>\n\n#### 1.  <a href='#1'><strong>Import & Data Check<\/strong><\/a>\n####      - \ub370\uc774\ud130 \ud655\uc778\n####      - \uc774\uc0c1\uce58 \ud0d0\uc0c9 \ubc0f \uc81c\uac70\n####      - \uacb0\uce21 \ub370\uc774\ud130 \ud655\uc778 \n####      - Skewness(\ube44\ub300\uce6d\ub3c4) \ud655\uc778\n\n#### 2.  <a href='#2'><strong>EDA<\/strong><\/a>   \n####      - Numerical Data \ud0d0\uc0c9\n####      - Categorical Data \ud0d0\uc0c9\n\n#### 3.  <a href='#3'><strong>Feature Engineering<\/strong><\/a>\n####      - Log \ubcc0\ud658\n####      - \uacb0\uce21 \ub370\uc774\ud130 \ucc98\ub9ac\n####      - \uc720\uc758\ud558\uc9c0 \uc54a\uc740 \ubcc0\uc218 \uc0ad\uc81c\n####      - Categorical Data \uc218\uce58\ud615 \ubcc0\ud658\n\n\n#### 4.  <a href='#4'><strong>Modeling & make submission<\/strong><\/a>\n####      - Model: XGBoost\n####      - Submission\n\n#### ***\ubb38\uc81c\ub97c \ubcf4\uae30 \uc804\uc5d0 Data\uc5d0 \ub300\ud55c \uc774\ud574\ub97c \ud55c\ubc88 \ud574\ubcf4\uc2dc\ub294\uac8c \ud6e8\uc52c \uc27d\uac8c \ub2e4\uac00\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4.***\n#### ***Competition main\uc5d0 \uac00\uc11c Data\uc5d0 \ub300\ud55c \uc124\uba85\uc744 \uc77d\uace0 \uc624\uc2dc\uba74 \ub3c4\uc6c0\uc774 \ub9ce\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4.***","de2a6fc1":"#### Correlation Heat Map","0e9c49bc":"#### Scatter Plot","1d3f96a3":"### - Skewness (\ube44\ub300\uce6d\ub3c4) \ud655\uc778","ca11784c":"# <a id='2'><strong>EDA<\/strong><\/a>","47cebc0d":"#### Pair Plot","88da8c69":"### - Submission","577a568a":"### Model: XGBoost\n\n#### XGBoost\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc608\uce21\ud558\uaca0\uc2b5\ub2c8\ub2e4. \n#### \ud29c\ud1a0\ub9ac\uc5bc\uc774 \ubaa9\uc801\uc778 \ucee4\ub110\uc774\ubbc0\ub85c \uac04\ub2e8\ud558\uac8c \ubaa8\ub378\ub9c1\ud558\uc5ec \uacb0\uacfc\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n#### \ub2e4\ub978 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uace0 \uc2f6\uc73c\uc2dc\uac70\ub098 \uc131\ub2a5\uc744 \ub192\ud600 \uacb0\uacfc\uac12\uc744 \ub354 \uc88b\uac8c \ubc1b\uace0\uc2f6\uc73c\uc2e0 \ubd84\ub4e4\uc740 \uc0c1\uc704\ucee4\ub110\ub4e4\uc744 \ucc38\uace0\ud558\uc2dc\uba74 \ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4!","ce0df765":"![Main Image](http:\/\/www.isoldmyhouse.com\/wp-content\/uploads\/2012\/05\/cheap-houses-for-sale-01.png)\n\n\n# House Price Predict\n\n## *Introduction*\n\n#### \ubcf8 \ucee4\ub110\uc740 \ub2e4\ub978 \ubd84\ub4e4\uc774 \uc62c\ub824\uc8fc\uc2e0 \ucee4\ub110\ub4e4\uc744 \ucc38\uace0\ud558\uc5ec \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.\n#### Regression tutorial\uc744 \uc9c4\ud589\ud558\uae30 \uc88b\uc740 \uc9d1\uac12 \uc608\uce21 \ubb38\uc81c\ub97c titanic\ucc98\ub7fc \ucd08\ubcf4\uc790 \ubd84\ub4e4\uc5d0\uac8c \ub3c4\uc6c0\ub420 \ub9cc\ud55c \ucee4\ub110\uc744 \ub9cc\ub4e4\uace0\uc790 \ud558\uc600\uc2b5\ub2c8\ub2e4.\n#### \ubcf8 \ucee4\ub110\uc740 \ub192\uc740 \uc810\uc218, \ub4f1\uc218\ub97c \uc5bb\uae30\uc704\ud568\uc774 \ubaa9\uc801\uc774 \uc544\ub2cc Baseline \uc218\uc900\uc758 \ud29c\ud1a0\ub9ac\uc5bc \ucee4\ub110\uc785\ub2c8\ub2e4. \n#### \ucd08\ubcf4\uc790\uc758 \uc785\uc7a5\uc5d0\uc11c \ucd08\ubcf4\uc790\ubd84\ub4e4\uc744 \uc704\ud574 \ucee4\ub110\uc744 \uc791\uc131\ud558\ub294 \ub9cc\ud07c, \uc27d\uac8c \uc124\uba85\ud558\uace0\uc790 \ud558\uc600\uc2b5\ub2c8\ub2e4. \n#### \uc800 \ub610\ud55c \ucd08\ubcf4\uc801\uc778 \uc2e4\ub825\uc774\uae30 \ub54c\ubb38\uc5d0 \uc2e4\uc218\ub098 \ud639\uc740 \uc9c0\uc801\ud560\ub9cc\ud55c \ubb38\uc81c\uac00 \uc788\ub2e4\uba74 Feedback \ud574\uc8fc\uc2dc\uba74 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4 ! ","540b38ed":"# <a id='3'><strong>Feature Engineering<\/strong><\/a>","a6acdf83":"# <a id='4'><strong>Modeling & make submission<\/strong><\/a>","13901eac":"# <a id='1'><strong>Import & Data check<strong><\/a>","d5a96d48":"### - \uacb0\uce21\uce58 \ud655\uc778","81f7c00d":"### - Categorical Data \ud0d0\uc0c9\n\n#### \ub0a8\uc740 \ubc94\uc8fc\ud615 \ubcc0\uc218\ub4e4\ub3c4 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4. \n#### \uc9c8\uc801 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub450 \uac00\uc9c0 \ubc29\ubc95\uc744 \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n#### \uccab \ubc88\uc9f8\ub294 \ubcc0\uc218 \uac12\uacfc \uad00\ub828\ud558\uc5ec SalePrice\uc758 \ubd84\ud3ec\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n#### \ub450 \ubc88\uc9f8\ub85c \uac00\ub2a5\ud55c \ubc94\uc8fc\ubcc4\ub85c \ub354\ubbf8 \ubcc0\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.","1108bcce":"### - Log \ubcc0\ud658 ","32b15f04":"### \uc774\ub807\uac8c \ud574\uc11c House Price Predict\uc758 Tutorial\uc744 \uc9c4\ud589\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n#### \ubd80\uc871\ud558\uc9c0\ub9cc \uc800\uc640 \uac19\uc774 \ud5e4\ub9e4\ub294 \ub9ce\uc740 \ucd08\ubcf4\uc790 \ubd84\ub4e4\uc5d0\uac8c \ub3c4\uc6c0\uc774 \ub418\uc5c8\uc73c\uba74 \ud569\ub2c8\ub2e4.\n#### \uc9c0\uc801, \uace0\uccd0\uc57c\ud560 \uc810 \ub4f1 Feedback \ud658\uc601\uc785\ub2c8\ub2e4!\n#### \uc870\uae08\uc774\ub098\ub9c8 \ub3c4\uc6c0\uc774 \ub418\uc168\ub2e4\uba74 upvote \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4 \uac10\uc0ac\ud569\ub2c8\ub2e4 :)"}}