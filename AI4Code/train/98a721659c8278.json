{"cell_type":{"95dbdc41":"code","6403fde3":"code","911fc88f":"code","a904974a":"code","eaa93f20":"code","30b6bcef":"code","74f9b1b5":"code","0f522371":"code","bc40c416":"code","b5cfc26d":"code","8b45ec2b":"code","f90030d5":"code","da1d3701":"code","f55f95b4":"code","c18c24cd":"code","63cca9d4":"code","6229ab8c":"code","112e129d":"code","8a435dc1":"code","75905c74":"code","8d026c2a":"code","1a60e544":"code","3e86d242":"code","89401add":"code","9320afeb":"markdown","7e7aece8":"markdown","c2e279bb":"markdown","748ecedc":"markdown","5fa8a130":"markdown","88bd862f":"markdown","0d6e204c":"markdown","7163084e":"markdown","029a69d6":"markdown","d4a4dfd7":"markdown","7af81679":"markdown","fbb27316":"markdown","4336dc5b":"markdown","ef383a3d":"markdown"},"source":{"95dbdc41":"\n\nimport numpy as np\nimport pandas as pd \nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline \nimport warnings \nwarnings.filterwarnings('ignore')\nfrom os.path import join\nimport random as rn\nfrom sklearn.metrics import accuracy_score,roc_auc_score\nfrom keras.models import Sequential\nfrom keras.layers import Flatten,Dense,Conv2D,Dropout,MaxPooling2D,Activation\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adam,SGD\nfrom keras.preprocessing.image import ImageDataGenerator\nimport xgboost as xgb\nfrom keras.utils import to_categorical\n\n\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n","6403fde3":"path='..\/input\/train'\nfiles=os.listdir('..\/input\/train')\ntrain_images_dogs=[file for file in files if 'dog' in file]\ntrain_images_cats=[file for file in files if 'cat' in file]\nX=[]\nY=[]\n\ntrain=train_images_dogs[:1000]+train_images_cats[:1000]\n\nwidth,height=150,150\ndef make_data(train):\n    for file in train:\n        img=cv2.imread(join(path,file))\n        if img is not None:\n            img=cv2.resize(img,(width,height))\n            X.append(img)\n            if 'dog' in file:\n                Y.append(1)\n            elif 'cat' in file:\n                Y.append(0)\n        else:\n            continue\n     \n      \n   \n","911fc88f":"make_data(train)","a904974a":"X=np.array(X)\nprint(X.shape,len(Y))","eaa93f20":"f,ax=plt.subplots(4,2,figsize=(10,10))\nfor i in range(4):\n    for j in range(2):\n        a=rn.randint(0,len(Y))\n        ax[i,j].imshow(X[a])\n        ax[i,j].set_title('{}'.format(Y[a]))\n\nplt.tight_layout()\n        ","30b6bcef":"y=pd.Series(Y)\ny.value_counts().plot.bar()","74f9b1b5":"train_X,val_X,train_y,val_y=train_test_split(X,Y,test_size=0.2,random_state=2)","0f522371":"model1=Sequential()\nmodel1.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(width,height,3)))\nmodel1.add(MaxPooling2D(pool_size=(2,2)))\nmodel1.add(Conv2D(64,kernel_size=(3,3),activation='relu'))\nmodel1.add(MaxPooling2D(pool_size=(2,2)))\nmodel1.add(Conv2D(128,kernel_size=(3,3),activation='relu'))\nmodel1.add(MaxPooling2D(pool_size=(2,2)))\nmodel1.add(Flatten())\nmodel1.add(Dense(500,activation='relu'))\nmodel1.add(Dropout(0.5))\nmodel1.add(Dense(1,activation='sigmoid'))\n","bc40c416":"\nmodel1.compile(loss='binary_crossentropy',optimizer='rmsprop',metrics=['accuracy'])","b5cfc26d":"epochs=20\nbatch_size=25\ntrain_datagen=ImageDataGenerator(horizontal_flip=True,zoom_range=0.2,width_shift_range=0.2,\n                                height_shift_range=0.2,rescale=1.\/255)\n\nval_datagen=ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator=train_datagen.flow(train_X,train_y,batch_size=batch_size)\nval_generator=val_datagen.flow(val_X,val_y,batch_size=batch_size)","8b45ec2b":"result_data_aug=model1.fit_generator(train_generator,validation_data=val_generator,epochs=epochs,\n                                    steps_per_epoch=len(train_y)\/\/batch_size,validation_steps=len(val_y)\/\/batch_size)","f90030d5":"plt.style.use('ggplot')\nplt.plot(result_data_aug.history['loss'],'green')\nplt.plot(result_data_aug.history['val_loss'],'blue')\nplt.xlabel('Number of epochs')\nplt.legend(['train','test'])\nplt.ylabel('Loss')\n","da1d3701":"\nplt.plot(result_data_aug.history['acc'],'green')\nplt.plot(result_data_aug.history['val_acc'],'blue')\nplt.xlabel('Number of epochs')\nplt.legend(['train','test'])\nplt.ylabel('Loss')","f55f95b4":"test_files=os.listdir('..\/input\/test')[:25]\npath_test='..\/input\/test'\ntest_img=[cv2.imread(join(path_test,file)) for file in test_files]\ntest_img=[cv2.resize(img,(width,height)) for img in test_img]\ntest=np.array(test_img)\n                     ","c18c24cd":"test_datagen=ImageDataGenerator(rescale=1.\/225)\ntest_generator=test_datagen.flow(test,batch_size=batch_size)\npredict_prob=model1.predict_generator(test_generator,verbose=1,steps=1)","63cca9d4":"f,ax=plt.subplots(5,2,figsize=(10,10))\nfor i in range(5):\n    for j in range(2):\n        a=rn.randint(0,len(test_img)-1)\n        ax[i,j].imshow(test[a])\n        ax[i,j].set_title('It is dog with probability {:.2%}'.format(predict_prob[a][0]))\n        \nplt.tight_layout()","6229ab8c":"\nZ=np.array(Y)\nZ=to_categorical(Z,2)","112e129d":"X_train,X_val,z_train,z_val=train_test_split(X,Z,test_size=0.2,random_state=5)","8a435dc1":"train_datagen1=ImageDataGenerator(horizontal_flip=True,zoom_range=0.2,width_shift_range=0.2,\n                                height_shift_range=0.2)\n\ntrain_datagen1.fit(X_train)\ntrain_gen=train_datagen1.flow(X_train,z_train,batch_size=batch_size)\n","75905c74":"model1=Sequential()\nmodel1.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(width,height,3)))\nmodel1.add(MaxPooling2D(pool_size=(2,2)))\nmodel1.add(Conv2D(64,kernel_size=(3,3),activation='relu'))\nmodel1.add(MaxPooling2D(pool_size=(2,2)))\nmodel1.add(Conv2D(128,kernel_size=(3,3),activation='relu'))\nmodel1.add(MaxPooling2D(pool_size=(2,2)))\nmodel1.add(Flatten())\nmodel1.add(Dense(500,activation='relu'))\nmodel1.add(Dropout(0.5))\nmodel1.add(Dense(2,activation='softmax'))\nsgd=SGD(lr=0.000001)\nmodel1.compile(loss='categorical_crossentropy',optimizer=sgd,metrics=['accuracy'])","8d026c2a":"result_aug=model1.fit_generator(train_gen,validation_data=(X_val,z_val),epochs=epochs,\n                               steps_per_epoch=X_train.shape[0]\/\/batch_size)","1a60e544":"pred=model1.predict(test)\nargs=np.argmax(pred,axis=1)","3e86d242":"test_labels=[]\nfor i in range(len(args)):\n    if args[i]==0:\n        test_labels.append('cat')\n    elif args[i]==1:\n        test_labels.append('dog')\n    ","89401add":"f,ax=plt.subplots(5,2,figsize=(15,15))\nfor i in range(5):\n    for j in range(2):\n        a=rn.randint(0,len(test_img)-1)\n        ax[i,j].imshow(test[a])\n        ax[i,j].set_title('It is {}'.format(test_labels[a]))\n        \nplt.tight_layout()","9320afeb":"**Building CNN**","7e7aece8":"**Importing Modules**","c2e279bb":"**Watching some images**","748ecedc":"ImageDataGenerator is used for data augmentation. This allows us to have more training images than 2000. This also helps in avoiding overfit to some extent. In case of val_datagen, we only rescale the images. This is because we will be using that set not for training and only for validation. To avoid confusing the model and thus get lesser accuracy, we do not use functions like horizontal_flip and zoom in case of val_datagen","5fa8a130":"**Visualizing how loss and accuracy are varying across epochs**","88bd862f":"**Preparing Data**","0d6e204c":"In this kernel, we will build CNN and train it over the cats and dogs images. I'll follow two approaches. 1st approach is where I dont use to_categorical() function on the labels. I just do Label Encoding. In 2nd approach, I apply to_categorical() on the labels. to_categorical() does the same thing what OneHotEncoder() does. \n\n**Please upvote the kernel if you like it ! Your upvotes will motivate me to write more. Thank you. **","7163084e":"Certainly, by playing around with the number of hidden layers and neurons and using more number of images, we can increase the accuracy. Your suggestions are always welcomed ! Thank you","029a69d6":"**Preparing test data and predicting their labels**","d4a4dfd7":"We see that number of images of cats and dogs are almost equal if not equal","7af81679":"**Visualizing test images and probabilities that they are dogs given by our model.**","fbb27316":"**New Approach**: Transforming the labels using to_categorical. to_categorical() does the same thing as what OneHotEncoder does.","4336dc5b":"** Number of cats and dogs images**","ef383a3d":"Builing CNN with binary entries as labels rather than converting them to categorical. Due to this, when we predict the labels of test data, we get probability that the image belongs to '1' category, that is, dog"}}