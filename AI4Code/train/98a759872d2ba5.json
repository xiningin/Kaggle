{"cell_type":{"d8789a66":"code","a5574f57":"code","a9ae4d16":"code","ebed3fd3":"code","20ab46c8":"code","8d9bdbc6":"code","f15e425f":"code","b8e1cee3":"code","4d275522":"code","24b72527":"code","dd782c4c":"code","bdfd03b8":"code","a0f389dd":"code","c651973d":"code","02218a12":"code","e7d2dd4c":"code","f8139df0":"code","6f5b3f86":"code","a6cd2d8f":"code","cbcc2e2a":"code","aa39b28a":"code","14d3600d":"code","10a49a65":"code","ff1053d9":"code","0267b9f5":"code","0223d737":"code","76372fff":"code","a29a40ee":"code","5ca4e7b7":"code","7fc3444e":"code","9839d247":"code","85477ed5":"code","424e53ab":"code","f9e6f4a7":"code","2ce10780":"code","953fc76b":"code","3ba1c38f":"code","8a6117d7":"code","f5fd6034":"markdown","097312bb":"markdown","6234aae3":"markdown","34885121":"markdown","19884211":"markdown"},"source":{"d8789a66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5574f57":"# linear algebra\nimport numpy as np \n# data processing\nimport pandas as pd \n#import Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression, Ridge\nfrom sklearn.preprocessing import OneHotEncoder\nfrom tqdm import tqdm\nfrom sklearn.decomposition import PCA\nimport os\nimport imagesize\n\n%matplotlib inline","a9ae4d16":"import os\nprint(os.listdir(\"..\/input\/siim-isic-melanoma-classification\"))","ebed3fd3":"# Reading the dataset\ntrain = pd.read_csv(\"..\/input\/siim-isic-melanoma-classification\/train.csv\")\ntest = pd.read_csv(\"..\/input\/siim-isic-melanoma-classification\/test.csv\")\nprint(\"{} images in train set.\".format(train.shape[0]))\nprint(\"{} images in test set.\".format(test.shape[0]))\n","20ab46c8":"train.head()","8d9bdbc6":"test.head()","f15e425f":"train.isnull().any()","b8e1cee3":"train.info()","4d275522":"train.describe()","24b72527":"train.shape","dd782c4c":"train.nunique()","bdfd03b8":"sns.countplot(train['benign_malignant'])\nplt.show()","a0f389dd":"fig,ax = plt.subplots(figsize=(15,5))\nsns.countplot(train['age_approx'],hue=train['benign_malignant'],ax=ax)\nplt.xlabel('age_approx')\nplt.ylabel('Counts')\nplt.xticks(rotation=45)","c651973d":"sns.countplot(x='benign_malignant',hue='sex',data=train)\n","02218a12":"ax = train[\"age_approx\"].hist(bins=15, density=True, stacked=True, color='teal', alpha=0.6)\ntrain[\"age_approx\"].plot(kind='density', color='teal')\nax.set(xlabel='Age')\nplt.xlim(-10,85)\nplt.show()","e7d2dd4c":"train.age_approx.hist()\nplt.title('Histogram of age_approx')\nplt.xlabel('age_approx')\nplt.ylabel('Frequency')\nplt.savefig('age_approx')","f8139df0":"multi_target_count = train.groupby(\"patient_id\").target.sum()\n\nfig, ax = plt.subplots(1,2,figsize=(15,5))\n\nsns.countplot(train.target, ax=ax[0], palette=\"Reds\")\nax[0].set_xlabel(\"Binary target\")\nax[0].set_title(\"How often do we observe a positive label?\");\n\nsns.countplot(multi_target_count, ax=ax[1])\nax[1].set_xlabel(\"Numer of targets per image\")\nax[1].set_ylabel(\"Frequency\")\nax[1].set_title(\"Multi-Hot occurences\")\n","6f5b3f86":"gbSub = train.groupby('anatom_site_general_challenge').sum()\ngbSub\nsns.barplot(y=gbSub.index, x=gbSub.target, palette=\"deep\")","a6cd2d8f":"fig=plt.figure(figsize=(10, 8))\n\nsns.countplot(x=\"anatom_site_general_challenge\", hue=\"target\", data=train)\n\nplt.title(\"Total Images by Subtype\")","cbcc2e2a":"np.mean(train.target)","aa39b28a":"# Showing a sample image\nimage = plt.imread('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/ISIC_5766923.jpg')\nplt.imshow(image)","14d3600d":"w = 10\nh = 10\nfig = plt.figure(figsize=(15, 15))\ncolumns = 4\nrows = 4\n\n# ax enables access to manipulate each of subplots\nax = []\n\nfor i in range(columns*rows):\n    img = plt.imread('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'+train['image_name'][i]+'.jpg')\n    # create subplot and append to ax\n    ax.append( fig.add_subplot(rows, columns, i+1) )\n    # Hide grid lines\n    ax[-1].grid(False)\n\n      # Hide axes ticks\n    ax[-1].set_xticks([])\n    ax[-1].set_yticks([])\n    ax[-1].set_title(train['benign_malignant'][i])  # set title\n    plt.imshow(img)\n\n\nplt.show()  # finally, render the plot","10a49a65":"w = 10\nh = 10\nfig = plt.figure(figsize=(15, 15))\ncolumns = 4\nrows = 4\n\n# ax enables access to manipulate each of subplots\nax = []\n\nfor i in range(columns*rows):\n    img = plt.imread('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'+train.loc[train['target'] == 1]['image_name'].values[i]+'.jpg')\n    # create subplot and append to ax\n    ax.append( fig.add_subplot(rows, columns, i+1) )\n    # Hide grid lines\n    ax[-1].grid(False)\n\n      # Hide axes ticks\n    ax[-1].set_xticks([])\n    ax[-1].set_yticks([])\n    ax[-1].set_title(train.loc[train['target'] == 1]['benign_malignant'].values[i])  # set title\n    plt.imshow(img)\n\n\n\nplt.show()  # finally, render the plot","ff1053d9":"train['benign_malignant'] = train['benign_malignant'].replace('malignant',np.nan)\ntrain['benign_malignant'] = train['benign_malignant'].fillna(1)\ntrain['benign_malignant'] = train['benign_malignant'].replace('benign',np.nan)\ntrain['benign_malignant'] = train['benign_malignant'].fillna(0)\n\ntrain['diagnosis'] = train['diagnosis'].replace('nevus',np.nan)\ntrain['diagnosis'] = train['diagnosis'].fillna(1)\ntrain['diagnosis'] = train['diagnosis'].replace('unknown',np.nan)\ntrain['diagnosis'] = train['diagnosis'].fillna(0)\n\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].replace('head\/neck',np.nan)\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].fillna(1)\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].replace('upper extremity',np.nan)\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].fillna(0)\n\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].replace('lower extremity',np.nan)\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].fillna(2)\n\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].replace('torso',np.nan)\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].fillna(3)\n\ntrain['sex'] = train['sex'].replace('male',np.nan)\ntrain['sex'] = train['sex'].fillna(1)\ntrain['sex'] = train['sex'].replace('female',np.nan)\ntrain['sex'] = train['sex'].fillna(0)","0267b9f5":"df3=train.drop(['patient_id','image_name','anatom_site_general_challenge','diagnosis'], axis=1)\ndf3.head()","0223d737":"df3= train.dropna()","76372fff":"X=df3[['age_approx','benign_malignant','sex']]  \ny= df3[['target']]","a29a40ee":"X","5ca4e7b7":"y","7fc3444e":"from sklearn.model_selection import train_test_split","9839d247":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","85477ed5":"X_train","424e53ab":"y_train","f9e6f4a7":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nmodel= RandomForestClassifier(n_estimators= 10)\nmodel.fit(X_train,y_train)","2ce10780":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","953fc76b":"model = RandomForestClassifier(n_estimators=100, max_depth=2,random_state=0)","3ba1c38f":"model.fit(X_train, y_train)","8a6117d7":"model.score(X_test, y_test)","f5fd6034":"plt.figure(figsize=(20, 6))\nplt.subplot(1,3,1)\nsns.distplot(train.age_approx,kde=False)\nplt.title(\"Histogram for age_approx\")","097312bb":"### Benign Images","6234aae3":"### Data Exploration & Visualisations","34885121":"### I have importe RandomForest model to predict the target\n","19884211":"### Images Visualisations"}}