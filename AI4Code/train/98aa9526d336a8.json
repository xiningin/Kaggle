{"cell_type":{"ee78e371":"code","45d3a1e8":"code","9f187f54":"code","9e73f220":"code","9fbe3650":"code","1215df6b":"code","4a1d4892":"code","6c53c650":"code","a4f597d4":"code","7aa46f49":"code","2503f52e":"code","a0b1803a":"code","10753fe0":"code","ae34f3c6":"code","3ba1c4f4":"code","3859bf62":"code","bfb9ffe6":"code","ae355f6c":"code","8975eb7f":"code","abce5f04":"code","bb615714":"code","42142805":"code","19063249":"markdown","e853989d":"markdown","e6296eaf":"markdown","2e79aaf0":"markdown","ef401303":"markdown","fa57117f":"markdown","9139d47f":"markdown","3771340e":"markdown","311ccc5e":"markdown","78460354":"markdown"},"source":{"ee78e371":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Dropout, Conv2D, MaxPooling2D\nfrom keras.optimizers import Adam\nfrom keras.losses import categorical_crossentropy\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\n\nnp.random.seed(42)","45d3a1e8":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","9f187f54":"print(train.shape)\nprint(test.shape)","9e73f220":"train.head()","9fbe3650":"test.head()","1215df6b":"train.describe()","4a1d4892":"train.isnull().any().describe()","6c53c650":"test.isnull().any().describe()","a4f597d4":"X_train = train.iloc[:, 1:].values.astype('float32') \/ 255  # Normalization\ny_train = train.iloc[:, :1].values.astype('int32')  # 1st column is 'label' for images\nX_test = test.values.astype('float32') \/ 255  # Normalization","7aa46f49":"X_train","2503f52e":"y_train","a0b1803a":"X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)  # Reshaping\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)\nprint(X_train.shape)\nprint(X_test.shape)","10753fe0":"# Show first 10 images with their labels\nfor i in range(10):\n    plt.subplot(2, 5, i+1)\n    plt.imshow(X_train[i].reshape(28, 28), cmap='gray')\n    plt.title(y_train[i, 0])","ae34f3c6":"# Convert list to One-hot encoded matrix\ny_train = to_categorical(y_train)\n\n# For example, '3' would be [0,0,0,1,0,0,0,0,0,0]\ny_train","3ba1c4f4":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)","3859bf62":"model = Sequential([\n    Conv2D(32, (5, 5), padding='Same', activation='relu', input_shape=(28, 28, 1)),\n    Conv2D(32, (5, 5), padding='Same', activation='relu'),\n    MaxPooling2D((2, 2)),\n    Dropout(0.25),\n    \n    Conv2D(64, (3, 3), padding='Same', activation='relu'),\n    Conv2D(64, (3, 3), padding='Same', activation='relu'),\n    MaxPooling2D((2, 2)),\n    Dropout(0.25),\n    \n    Flatten(),\n    Dense(512, activation='relu'),\n    Dropout(0.5),\n    Dense(10, activation='softmax')\n])","bfb9ffe6":"model.compile(optimizer=Adam(lr=0.001),\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])","ae355f6c":"reduce_lr = ReduceLROnPlateau(monitor='val_acc',\n                              factor=0.5,\n                              patience=3,\n                              verbose=1,\n                              min_lr=0.00001)","8975eb7f":"datagen = ImageDataGenerator(\n    rotation_range=10,  \n    width_shift_range=0.1, \n    height_shift_range=0.1,\n    zoom_range=0.1,\n    shear_range=0.3)  ","abce5f04":"history = model.fit_generator(datagen.flow(X_train, y_train, batch_size=128),\n                              epochs=50,\n                              validation_data=datagen.flow(X_val, y_val, batch_size=128),\n                              verbose=1,\n                              steps_per_epoch=X_train.shape[0] \/\/ 64,\n                              callbacks=[reduce_lr])","bb615714":"acc_values = history.history['acc']\nval_acc_values = history.history['val_acc']\nepochs = range(1, len(acc_values)+1)\n\nplt.plot(epochs, acc_values, linestyle='-')\nplt.plot(epochs, val_acc_values, linestyle=':')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\n\nplt.show()","42142805":"predictions = model.predict_classes(X_test, verbose=0)\n\nsubmissions = pd.DataFrame({\"ImageId\" : list(range(1, len(predictions)+1)), \"Label\" : predictions})\nsubmissions.to_csv(\"digit_recognizer.csv\", index=False, header=True)","19063249":"## EDA (Exploratory Data Analysis)","e853989d":"## Cross-validation","e6296eaf":"## Data Visualization","2e79aaf0":"## Splitting into features and labels","ef401303":"## Loading the data","fa57117f":"## CNN Model","9139d47f":"## Predicting and Submitting","3771340e":"## One-Hot encoding labels","311ccc5e":"## Importing libraries","78460354":"# Digit Recognizer with CNN Keras"}}