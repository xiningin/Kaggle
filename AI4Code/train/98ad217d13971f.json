{"cell_type":{"8dc9370c":"code","d69ea9b6":"code","95eb86e9":"code","f1bc564b":"code","521340f3":"code","3556ecf3":"code","7dac3b1a":"code","ba06b950":"code","f51d03bd":"code","58e838f4":"code","064dcef0":"code","340733c9":"code","5048d032":"code","cb664326":"code","71179fb1":"code","31a2478d":"code","fab48524":"code","a5e3fea7":"code","cc313c65":"code","b990e21c":"code","2dbdd1a6":"code","5a44c299":"code","aca2d71a":"code","d976baee":"code","ac67a7d8":"code","99a9beba":"code","21f983d2":"code","28f6e7fe":"code","d2bafa0a":"code","92974b6c":"code","19630144":"code","d96d3025":"code","e1ef956b":"code","f04d6b15":"code","927bec3f":"code","e52b90fd":"code","92adfdd6":"code","9609e143":"code","e2f5a266":"code","ffca4270":"code","bd0ecaaa":"code","2ab5244f":"code","4eca32f8":"code","41f6d23f":"code","ece65105":"code","26958daa":"code","85d25bc8":"code","56fae2f8":"code","c67d8931":"code","dd9dc562":"code","a6a8c3c3":"code","228408c4":"code","d91f579d":"code","5f508434":"code","46ad09ea":"code","08c80c09":"code","58fc129a":"code","7207369c":"code","99900a16":"code","9d932af6":"code","c76e907c":"code","e43f2497":"code","08e3b666":"code","d7f42ad2":"code","a52fe6d3":"code","0cd4cfe9":"code","c8939f96":"code","09c8411c":"code","01e4ef4b":"code","8c90503f":"code","ac350d73":"code","8a80be22":"code","dd130124":"code","53ed7b08":"code","233f902e":"code","e70a29c2":"code","ae745b57":"code","26ba277c":"code","050412ea":"code","ad50d713":"code","8d8f7084":"code","c2efc424":"code","d6e3a458":"code","bbd31888":"code","30a67629":"code","5dfb1bb2":"markdown","db2871c4":"markdown","955b5dce":"markdown","41fa7c9c":"markdown","f1fe14ea":"markdown","05679d9f":"markdown","c3e3303e":"markdown","a81f40e9":"markdown","efbcd77b":"markdown","fe2fe53c":"markdown","ae12411d":"markdown","9d79ab6f":"markdown","a3f41489":"markdown","79f235dc":"markdown","d2a5ba31":"markdown","95125e41":"markdown","4d9735b5":"markdown","7024c11e":"markdown","9501638f":"markdown","f597c85b":"markdown","0a5ca5e7":"markdown","a279a393":"markdown","4eed889d":"markdown","cae750ae":"markdown","ad1ccc50":"markdown","bb4266c7":"markdown","17ed2eb9":"markdown","c04ff890":"markdown","52343b53":"markdown","e1547bf3":"markdown","74125320":"markdown","8ce4899b":"markdown","21896c5b":"markdown","0dcb9228":"markdown","0f9fddcb":"markdown","128fc316":"markdown","33c08aa3":"markdown","a362cbe8":"markdown"},"source":{"8dc9370c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d69ea9b6":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 11000)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","95eb86e9":"brand_data_org = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/vw.csv')","f1bc564b":"# Using a copy to play on the safe side, making sure the inital Dataframe won't be modified","521340f3":"brand_data = brand_data_org.copy()","3556ecf3":"brand_data.info()","7dac3b1a":"# no nulls with appropriate data types","ba06b950":"brand_data.describe(include='all')","f51d03bd":"fig, axes = plt.subplots(figsize=(15,8),nrows=2, ncols=3)\nsns.histplot(brand_data['year'],ax=axes[0,0])\nsns.histplot(brand_data['mileage'],ax=axes[0,1])\nsns.histplot(brand_data['tax'],ax=axes[0,2])\nsns.histplot(brand_data['mpg'],ax=axes[1,0])\nsns.histplot(brand_data['engineSize'],ax=axes[1,1])\nsns.histplot(brand_data['price'],ax=axes[1,2])","58e838f4":"fields_correlation = sns.heatmap(brand_data.corr(), cmap=\"YlGnBu\", annot=True)","064dcef0":"sns.pairplot(brand_data, kind=\"reg\",plot_kws={'line_kws':{'color':'red'}, 'scatter_kws': {'alpha': 0.1}},diag_kind=\"hist\")","340733c9":"year_mile_avgprice=pd.DataFrame\nyear_mile_avgprice=year_mile_avgprice({'mean_price' : brand_data.groupby( [\"year\",'mileage'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)","5048d032":"import itertools\nmarker = itertools.cycle((',', '+', '.', 'o', '*','s','p','X','d','h','v','^','<','>','1','2','3','4','8','|','_','x')) \nyear_set=sorted(set(year_mile_avgprice['year']), reverse=True)\nplt.figure(figsize=(17,8))\nfor year in year_set:\n     selected_data = year_mile_avgprice.loc[year_mile_avgprice['year'] == year]\n     plt.scatter(selected_data['mileage'], selected_data['mean_price'],marker = next(marker), label=year)\nplt.xlabel('mileage')\nplt.ylabel('mean price')\nplt.legend()","cb664326":"brand_data.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","71179fb1":"brand_data.boxplot(column=['mileage'], by=['fuelType'],figsize=(15,5),vert=0)","31a2478d":"brand_data.boxplot(column=['mpg'], by=['fuelType'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","fab48524":"brand_data.boxplot(column=['mpg'], by=['transmission'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","a5e3fea7":"brand_data.boxplot(column=['mpg'], by=['engineSize'],figsize=(15,5))","cc313c65":"fig, axes = plt.subplots(figsize=(20,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).count()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).count()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).count()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).count()['price']\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'Count')\nvis_ftyp.plot(ax=axes[0,1],kind='bar',title = 'Count')\nvis_engS.plot(ax=axes[1,0],kind='bar',title = 'Count')\nvis_trans.plot(ax=axes[1,1],kind='bar',rot=360,title = 'Count')","b990e21c":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Automatic']\ndf=df[df['fuelType']!='Other']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","2dbdd1a6":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Semi-Auto']\ndf=df[df['fuelType']!='Other']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","5a44c299":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Manual']\ndf=df[df['fuelType']!='Other']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","aca2d71a":"brand_data.boxplot(column=['price'], by=['year'],figsize=(15,5))","d976baee":"brand_data.boxplot(column=['price'], by=['model'],figsize=(15,5),rot=45)","ac67a7d8":"fig, axes = plt.subplots(figsize=(15,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).mean()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).mean()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).mean()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).mean()['price'].sort_values(ascending=False)\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'mean price')\nvis_engS.plot(ax=axes[0,1],kind='bar',title = 'mean price')\nvis_trans.plot(ax=axes[1,0],kind='bar',rot=360,title = 'mean price')\nvis_ftyp.plot(ax=axes[1,1],kind='bar',rot=360,title = 'mean price')","99a9beba":"# As concluded above that tax and mpg has no correlation with price or any other feature\n# Tax and mpg columns will be dropped","21f983d2":"brand_notax=brand_data.drop(['tax'], axis=1)","28f6e7fe":"brand_notaxmpg=brand_notax.drop(['mpg'], axis=1)","d2bafa0a":"brand_notaxmpg.head()","92974b6c":"## there are some zero entries in the mileage. We are concerned with used cars\n## Accordingly we will delete any car below 50 mileage records","19630144":"mile_min = 50\nbrand_mile = brand_notaxmpg[brand_notaxmpg['mileage']>=mile_min]","d96d3025":"sns.histplot(brand_mile['mileage'])","e1ef956b":"## we will try to remove the mileage outliers by keeping the records upto 99% quartile","f04d6b15":"mile_skewness=brand_mile['mileage'].skew(axis = 0, skipna = True)","927bec3f":"if mile_skewness>1:\n    q = brand_mile['mileage'].quantile(0.99)\n    brand_mile= brand_mile[brand_mile['mileage']<q]\nelif mile_skewness<-1:\n    q = brand_mile['mileage'].quantile(0.01)\n    brand_mile= brand_mile[brand_data_mile['mileage']>q]","e52b90fd":"sns.histplot(brand_mile['mileage'])","92adfdd6":"sns.histplot(brand_mile['year'])","9609e143":"## we will try to remove the year outliers by keeping the records above 1% quartile","e2f5a266":"brand_year=brand_mile.copy()\nyear_skewness=brand_year['year'].skew(axis = 0, skipna = True)","ffca4270":"if year_skewness>1:\n    q = brand_year['year'].quantile(0.99)\n    brand_year= brand_year[brand_year['year']<q]\nelif year_skewness<-1:\n    q = brand_year['year'].quantile(0.01)\n    brand_year= brand_year[brand_year['year']>q]","bd0ecaaa":"sns.histplot(brand_year['year'])","2ab5244f":"sns.histplot(brand_year['engineSize'])","4eca32f8":"brand_engsZ=brand_year.copy()","41f6d23f":"brand_engsZ = brand_engsZ[brand_engsZ.engineSize != 0]","ece65105":"sns.histplot(brand_engsZ['engineSize'])","26958daa":"brand_fuel=brand_engsZ.copy()\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Other']\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Hybrid']","85d25bc8":"vis_ftyp = brand_fuel.groupby(['fuelType']).count()['price'].sort_values(ascending=False)","56fae2f8":"vis_ftyp.plot(kind='bar')\nplt.show()","c67d8931":"brand_Trans=brand_fuel.copy()","dd9dc562":"vis_trans = brand_Trans.groupby(['transmission']).count()['price'].sort_values(ascending=False)","a6a8c3c3":"vis_trans.plot(kind='bar')\nplt.show()","228408c4":"brand_models=brand_Trans.copy()","d91f579d":"vis_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)","5f508434":"vis_models.plot(kind='bar')\nplt.show()","46ad09ea":"# there are still some models with very few records\n# I will filter those model with only 1 record for now","08c80c09":"brand_model_count=pd.DataFrame\n\nbrand_model_count=brand_model_count({'counts' : brand_models.groupby( [ \"model\"] ).size()}).reset_index()\n\nmin_count=1\n\ncounts_sum=brand_model_count['counts'].sum(axis=0)\nbrand_model_count.drop(brand_model_count[brand_model_count.counts >= min_count].index, inplace=True)\n\na=brand_model_count['model'].tolist()\n\nfor i in range (0,len(a)):\n    brand_models.drop(brand_models[brand_models.model == a[i]].index,inplace=True)\n\nvis_audi_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)\n\nvis_audi_models.plot(kind='bar')\nplt.show()","58fc129a":"sns.histplot(brand_models['price'])","7207369c":"brand_models.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","99900a16":"# After these processing no remarkable effect is noticed on the price boxplot compared to the pervious one","9d932af6":"price_skewness=brand_models['price'].skew(axis = 0, skipna = True)\nprice_skewness","c76e907c":"# price is still highly skewed, we will try to visualize price with model and year for more better spotting of outliers","e43f2497":"brand_models.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","08e3b666":"# we need to remove price outliers based on model type and year (Assuming that those are the most effective features).\n# we are going to calculate filter between 90% & 95% of each model_year price distribution \n# and exclude the rest in case the price variation is high (coefficient of varitaion >0.7)","d7f42ad2":"model_cstat=pd.DataFrame\nmodel_mstat=pd.DataFrame\nmodel_sdstat=pd.DataFrame\nmodel_cstat=model_cstat({'cnt_price' : brand_models.groupby( [ \"model\",\"year\"] ).count()[\"price\"]}).reset_index()\nmodel_mstat=model_mstat({'mean_price' : brand_models.groupby( [ \"model\",\"year\"] ).mean()[\"price\"]}).reset_index()\nmodel_sdstat=model_sdstat({'std_price' : brand_models.groupby( [ \"model\",\"year\"] ).std()[\"price\"]}).reset_index()\nmodel_stats1 = pd.merge(model_cstat, model_mstat, on=[\"model\", \"year\"])\nmodel_stats2 = pd.merge(model_stats1, model_sdstat, on=[\"model\", \"year\"])\n\nmodel_stats2['std_price'] = model_stats2['std_price'].fillna(0)\n\nmodels_prices=brand_models.copy()\n\nmodels_prices = models_prices.merge(model_stats2, how='inner', left_on=[\"model\", \"year\"], right_on=[\"model\",\"year\"])\nx=1.5\ny=0.7\nmodels_prices['var_coeff']=models_prices['std_price']\/models_prices['mean_price']\nmodels_prices['price_L95']=models_prices['mean_price']-x*models_prices['std_price']\nmodels_prices['price_R95']=models_prices['mean_price']+x*models_prices['std_price']\nmodels_prices['price_L95'] =models_prices['price_L95'].astype(int)\nmodels_prices['price_R95'] =models_prices['price_R95'].astype(int)\n\ndef drop_price(models_prices):\n\n    if (models_prices['var_coeff']>y) and (models_prices['cnt_price'] <4):\n        return 'drop'\n    elif (models_prices['price'] > models_prices['price_R95']) or (models_prices['price'] < models_prices['price_L95']):\n        return 'drop'\n    else:\n        return 'keep'\nmodels_prices['drop_price'] = models_prices.apply(drop_price, axis = 1)\nmodels_prices = models_prices[models_prices.drop_price !='drop']","a52fe6d3":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","0cd4cfe9":"price_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","c8939f96":"# Let us calculate the percentage of records removed out of the original dataset","09c8411c":"data_removed_perct=100*(len(brand_data)-len(models_prices))\/len(brand_data)\ndata_removed_perct","01e4ef4b":"# Data removed is a high but accepted","8c90503f":"Brand_preprocessed=models_prices.copy()","ac350d73":"Brand_preprocessed=Brand_preprocessed.reset_index(drop=True)","8a80be22":"Brand_preprocessed.info()","dd130124":"Brand_preprocessed.columns.values","53ed7b08":"cols=['price','model', 'year', 'transmission', 'mileage', 'fuelType',\n      'engineSize', 'cnt_price', 'mean_price', 'std_price',\n      'var_coeff', 'price_L95', 'price_R95', 'drop_price']","233f902e":"brand_arranged=Brand_preprocessed.copy()\nbrand_arranged=Brand_preprocessed[cols]","e70a29c2":"brand_arranged=brand_arranged.drop(['cnt_price', 'mean_price', 'std_price',\n       'var_coeff', 'price_L95', 'price_R95', 'drop_price'], axis=1)","ae745b57":"brand_arranged.describe(include='all')","26ba277c":"year_model_mmile=pd.DataFrame\nyear_model_mmile=year_model_mmile({'mean_mileage' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"mileage\"]}).reset_index().sort_values(by='year',ascending=True)","050412ea":"model_set=sorted(set(year_model_mmile['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mmile.loc[year_model_mmile['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_mileage'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean mileage')\nplt.legend()","ad50d713":"## Generally, mileage is higher for older cars","8d8f7084":"year_model_mprice=pd.DataFrame\nyear_model_mprice=year_model_mprice({'mean_price' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mprice.loc[year_model_mprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean price')\nplt.legend()\nplt.show()","c2efc424":"year_model_mnprice=pd.DataFrame\nyear_model_mnprice=year_model_mnprice({'min_price' : brand_arranged.groupby( [\"year\",'model'] ).min()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mnprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mnprice.loc[year_model_mnprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['min_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('min price')\nplt.legend()\nplt.show()","d6e3a458":"year_model_mxprice=pd.DataFrame\nyear_model_mxprice=year_model_mxprice({'max_price' : brand_arranged.groupby( [\"year\",'model'] ).max()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mxprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mxprice.loc[year_model_mxprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['max_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('max price')\nplt.legend()\nplt.show()","bbd31888":"brand_final=brand_arranged.drop(['year'], axis=1)","30a67629":"# The remaining brands has been explored and preproceesed in the same manner and saved as csv\n\n  # https:\/\/www.kaggle.com\/enginsights\/hyundai-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/vauxhall-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/bmw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/audi-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/mercedes-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/skoda-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/toyota-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/ford-preprocessing-and-exploration\n\n# All CSVs of processed data of all brands will be imported to separate notebook where a regression model is applied\n\n# Please refer to 100K UK Used Cars Model\n\n  # https:\/\/www.kaggle.com\/enginsights\/100k-uk-used-cars-model","5dfb1bb2":"### Price","db2871c4":"### Tax feature","955b5dce":"# Exploring Dataset","41fa7c9c":"### Fuel Type","f1fe14ea":"# Loading Data","05679d9f":"## Additional Graphs after Processing Data","c3e3303e":"### Mean Price vs Other Features","a81f40e9":"## Brand","efbcd77b":"## Finding Correlations","fe2fe53c":"### price and year ","ae12411d":"### Year-Model vs Min Price","9d79ab6f":"### Year-Model vs Max Price","a3f41489":"# Packages","79f235dc":"### Price and model","d2a5ba31":"### Year Feature","95125e41":"### Model","4d9735b5":"### Preocessing Checkpoint","7024c11e":"### Price","9501638f":"## Further Exploration of Data (Categorical Features and Outliers Visulaization)","f597c85b":"### Fuel Type and Mileage","0a5ca5e7":"### Fuel Type and mpg","a279a393":"## Data Exploration","4eed889d":"### mpg, fuel type and transmission","cae750ae":"### Engine Size feature","ad1ccc50":"### Correlogram for additional visulatization of the relation between each two features ","bb4266c7":"### mpg and transmission","17ed2eb9":"### Count of Features","c04ff890":"### Year-Model Vs Mean Mileage","52343b53":"## Dropping Unwanted Fields","e1547bf3":"### mileage vs mean price [grouped by year]","74125320":"### Transmission","8ce4899b":"## Preprocessing","21896c5b":"## Re-arranging Columns","0dcb9228":"### mpg and engine size","0f9fddcb":"### Data Fields Distribution Graphs","128fc316":"## Copying Datasets","33c08aa3":"### Year-Model vs Mean Price","a362cbe8":"### Mileage feature"}}