{"cell_type":{"f9803552":"code","890d56e0":"code","45f58a16":"code","84c29841":"code","6a1f7c50":"code","d95509fb":"code","03ee8adf":"code","5c4e554c":"code","c08858eb":"code","684e7b9a":"code","a555856b":"code","fe21bba0":"code","cb0e08f6":"code","743be5e9":"code","9c5f5998":"markdown","110aabeb":"markdown","f5cca358":"markdown","faa46e02":"markdown","9570eb63":"markdown","d66a04f9":"markdown","9c184045":"markdown","ce191ad9":"markdown","6615fc2c":"markdown","5fd7ea7c":"markdown","6c7fb9d2":"markdown"},"source":{"f9803552":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\npd.set_option('display.max_columns', 200)\npd.set_option('display.max_rows', 200)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","890d56e0":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')","45f58a16":"df.head(3)","84c29841":"df.describe()","6a1f7c50":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[\n    go.Bar(name='Positive', x=['Positive'], y=[df[df[\"SARS-Cov-2 exam result\"] == 'positive'].shape[0]], marker=dict(\n        color='rgb(99,154,103)'\n    )),\n    go.Bar(name='Negative', x=['Negative'], y=[df[df[\"SARS-Cov-2 exam result\"] == 'negative'].shape[0]], marker=dict(\n        color='rgb(241,146,146)',\n    ))\n])\n\nfig.update_layout(\n    title={\n        'y':0.9,\n        'x':0.5,\n        'text': \"Cases Results Distribution\",\n        'xanchor': 'center',\n        'yanchor': 'top'\n    },\n    xaxis_title=\"\",\n    yaxis_title=\"NUmber of Cases\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","d95509fb":"df_positive = df[df[\"SARS-Cov-2 exam result\"] == 'positive']\n\nnumber_by_age_quantile = df_positive['Patient age quantile'].value_counts().sort_index().reset_index().rename(\n    columns={\n        'index': 'age_quantile',\n        'Patient age quantile': 'number_by_quantile'\n    }\n)\n\nimport plotly.express as px\nfig = px.bar(number_by_age_quantile, x='age_quantile', y='number_by_quantile')\nfig.update_layout(\n    title={\n        'y':0.95,\n        'x':0.5,\n        'text': \"Quantile age Distribution of positive COVID cases\",\n        'xanchor': 'center',\n        'yanchor': 'top'\n    },\n    xaxis_title=\"Age Quantile\",\n    yaxis_title=\"Cases by Quantile\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","03ee8adf":"df_to_train = df_positive.append(\n    df[df[\"SARS-Cov-2 exam result\"] == 'negative'].sample(\n        df_positive.shape[0]\n    ),\n    sort=False\n)","5c4e554c":"for col in df_to_train.columns:\n    df_to_train[col] = df_to_train[col].replace('not_detected', 0).copy()\n    df_to_train[col] = df_to_train[col].replace('detected', 1).copy()\n    df_to_train[col] = df_to_train[col].replace('negative', 0).copy()\n    df_to_train[col] = df_to_train[col].replace('positive', 1).copy()\n    df_to_train[col] = df_to_train[col].replace('absent', 0).copy()\n    df_to_train[col] = df_to_train[col].replace('present', 1).copy()\n    \n    if (df_to_train[col].isna().sum() == df_to_train.shape[0]) | (col[:5] == 'Urine'):\n        df_to_train.drop(col, axis=1, inplace=True)\n    elif df_to_train[col].isna().sum() > 0:\n        try:\n            df_to_train[col] = df_to_train[col].astype(float).copy()\n            df_to_train[col].fillna(df_to_train[col].mean(), inplace=True)\n            df_to_train[col].fillna(0.0, inplace=True)\n        except:\n            df_to_train.drop(col, axis=1, inplace=True)\n        ","c08858eb":"df_to_train = df_to_train.sample(frac=1)\nn_train = int(df_to_train.shape[0] * 0.8)","684e7b9a":"x_train = df_to_train.iloc[:n_train].drop('SARS-Cov-2 exam result', axis=1)\ny_train = df_to_train.iloc[:n_train]['SARS-Cov-2 exam result'].values\nx_test = df_to_train.iloc[n_train:].drop('SARS-Cov-2 exam result', axis=1)\ny_test = df_to_train.iloc[n_train:]['SARS-Cov-2 exam result'].values","a555856b":"from sklearn.ensemble import RandomForestClassifier\n\nregr = RandomForestClassifier(n_estimators=1000, random_state=0)\n\nregr.fit(x_train.iloc[:,1:], y_train)\n\n# print(regr.feature_importances_)","fe21bba0":"from sklearn import metrics\n\npreds = regr.predict(x_test.iloc[:,1:])\n\nprint(\"Evaluating Random Forest model\\n\")\nprint('Precision Score:', metrics.precision_score(y_test, preds))  \nprint('Recall Score:', metrics.recall_score(y_test, preds))  \nprint('ROC AUC Score:', metrics.roc_auc_score(y_test, preds))  \nprint('F1 Score:', metrics.f1_score(y_test, preds))  \nprint('Average Precision:', metrics.average_precision_score(y_test, preds))  \nprint('Accuracy:', metrics.accuracy_score(y_test, preds))  ","cb0e08f6":"def plot_confusion_matrix(cm):\n    ax= plt.subplot()\n    sns.heatmap(cm, annot=True, ax = ax,fmt='g',cmap=sns.color_palette(\"GnBu_d\"), cbar=False, linewidths=1, linecolor='black');\n    ax.set_xlabel('Predict');ax.set_ylabel('True'); \n    ax.set_title('Confusion matrix'); \n    ax.xaxis.set_ticklabels(['Negative', 'Positive']); ax.yaxis.set_ticklabels(['Negative','Positive']);","743be5e9":"plot_confusion_matrix(metrics.confusion_matrix(y_test, preds))","9c5f5998":"<a id=\"section41\"><\/a>\n### Train and Test split","110aabeb":"<a id=\"section4\"><\/a>\n# Modeling","f5cca358":"## Table of Contents\n1. [Some statical information](#section1)\n2. [Distributions](#section2)\n3. [Data Handling](#section3)\n   - [Making dataset to train](#section31)\n   - [Handling missing values](#section32)\n4. [Modeling](#section4)\n   - [Spliting data in train and test](#section41)\n   - [Modeling data and evaluating](#section42)","faa46e02":"<a id=\"section1\"><\/a>\n# Some statistical informations","9570eb63":"<a id=\"section2\"><\/a>\n# Distributions","d66a04f9":"<img src='https:\/\/wompampsupport.azureedge.net\/fetchimage?siteId=7575&v=2&jpgQuality=100&width=700&url=https%3A%2F%2Fi.kym-cdn.com%2Fentries%2Ficons%2Ffacebook%2F000%2F028%2F021%2Fwork.jpg' \/>","9c184045":"<a id=\"section31\"><\/a>\n### Make dataset to train","ce191ad9":"<a id=\"section3\"><\/a>\n# Data Handling","6615fc2c":"<a id=\"section32\"><\/a>\n### Handle Missing Data","5fd7ea7c":"<a id=\"section42\"><\/a>\n### Predicting and Evaluating","6c7fb9d2":"# Load Data"}}