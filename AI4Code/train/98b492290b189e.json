{"cell_type":{"b9a05742":"code","59bd3264":"code","ec300a7d":"code","aec02af2":"code","709750ff":"code","ba92def8":"code","c545f781":"code","81b800ee":"code","4279bfdd":"code","5b556309":"code","5fb09fe5":"code","6b55737d":"code","b78d4636":"code","002ce052":"code","8bf36c42":"code","7849ccf3":"code","df289068":"code","ccc7449b":"code","d906ffaf":"code","f2b9bd13":"code","379212d2":"code","3b549d78":"code","604101db":"code","53553bde":"code","bb925d1e":"markdown","7f0678bd":"markdown","e73e8970":"markdown"},"source":{"b9a05742":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n","59bd3264":"data=pd.read_csv('..\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv')","ec300a7d":"data.head()","aec02af2":"data.groupby('Category').describe().T","709750ff":"import seaborn as sns\nplt.figure(figsize=(12,14))\nsns.countplot(data['Category'])","ba92def8":"ham_msg = data[data.Category =='ham']\nspam_msg = data[data.Category=='spam']","c545f781":"#randomly taking data from ham_ msg\nham_msg=ham_msg.sample(n=len(spam_msg),random_state=42)\n","81b800ee":"print(ham_msg.shape,spam_msg.shape)","4279bfdd":"balanced_data=ham_msg.append(spam_msg).reset_index(drop=True)\nplt.figure(figsize=(8,6))\nsns.countplot(balanced_data.Category)\nplt.title('Distribution of ham and spam email messages (after downsampling)')\nplt.xlabel('Message types')\n","5b556309":"balanced_data.head()","5fb09fe5":"balanced_data['label']=balanced_data['Category'].map({'ham':0,'spam':1})","6b55737d":"train_msg, test_msg, train_labels, test_labels =train_test_split(balanced_data['Message'],balanced_data['label'],test_size=0.2,random_state=434)","b78d4636":"vocab_size=500\noov_tok='<OOV>'\nmax_len=50","002ce052":"#preprocessing making tokens out of text\ntoken=Tokenizer(num_words=vocab_size,oov_token=oov_tok)\ntoken.fit_on_texts(train_msg)","8bf36c42":"word_index=token.word_index\nword_index","7849ccf3":"padding_type='post'\ntruncate_type='post'\nTrainning_seq=token.texts_to_sequences(train_msg)\nTrainning_pad=pad_sequences(Trainning_seq,maxlen=50,padding=padding_type,truncating=truncate_type)","df289068":"Testing_seq=token.texts_to_sequences(test_msg)\nTesting_pad=pad_sequences(Testing_seq,maxlen=50,padding=padding_type,truncating=truncate_type)","ccc7449b":"#model\nmodel=tf.keras.models.Sequential([tf.keras.layers.Embedding(vocab_size,16,input_length=50),\n                                  tf.keras.layers.GlobalAveragePooling1D(),\n                                  tf.keras.layers.Dense(32,activation='relu'),\n                                  tf.keras.layers.Dropout(0.3),\n                                  tf.keras.layers.Dense(1,activation='sigmoid')])\n","d906ffaf":"model.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),metrics=['accuracy'],optimizer='adam')","f2b9bd13":"epoch=30\nearly_stop = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)\nhistory=model.fit(Trainning_pad, train_labels ,validation_data=(Testing_pad, test_labels),epochs=epoch,callbacks=[early_stop],verbose=2)","379212d2":"model.evaluate(Testing_pad, test_labels)","3b549d78":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')","604101db":"predict_msg = [\"Go until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat...\",\n          \"Ok lar... Joking wif u oni...\",\n          \"Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's\"]","53553bde":"def predict_spam(predict_msg):\n    new_seq = token.texts_to_sequences(predict_msg)\n    padded = pad_sequences(new_seq, maxlen =50,\n                      padding = padding_type,\n                      truncating='post')\n    return (model.predict(padded))\npredict_spam(predict_msg)","bb925d1e":"As data is imbalanced we need to make it balanced , will use downsample technique here (will randomly select ham_msg of lenth equal to spam msg","7f0678bd":"Importing all required modules","e73e8970":"Please upvote if u like mywork"}}