{"cell_type":{"ec136e42":"code","4ce980dc":"code","4b12ad6b":"code","484e6208":"code","908cb270":"code","8ad0216d":"code","170fd109":"code","ec318f27":"code","8db37731":"code","09bd76c7":"code","7dd58157":"code","f08c40be":"code","eeed90e4":"code","4ee061cb":"code","4142cc22":"code","cbe2d34b":"code","393f31cb":"code","78fb9165":"code","cd1c4d5e":"code","d87d6dec":"code","2a0ce23d":"markdown","d604e06c":"markdown","137334e8":"markdown","550e0cbc":"markdown","ef080cc3":"markdown","579b9d3c":"markdown","b3cea03b":"markdown","3da6fa0f":"markdown","96efb502":"markdown","f1287ed9":"markdown","499898b0":"markdown","6e24155b":"markdown"},"source":{"ec136e42":"# Imports\nimport time\nimport datetime\n\nimport numpy as np \nimport pandas as pd\nimport scipy.stats as sp\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom plotly.subplots import make_subplots","4ce980dc":"# Loading datasets\nraces = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/races.csv')\nstatus = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/status.csv')\ndrivers = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/drivers.csv')\nresults = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/results.csv')\nconstructors = pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/constructors.csv')","4b12ad6b":"# Drivers name concat\nconcat_driver_name = lambda x: f\"{x.forename} {x.surname}\" \n\ndrivers['driver'] = drivers.apply(concat_driver_name, axis=1)","484e6208":"# Preparing F1 history victories dataset\nresults_copy = results.set_index('raceId').copy()\nraces_copy = races.set_index('raceId').copy()\n\nresults_copy = results_copy.query(\"position == '1'\")\nresults_copy['position'] = 1 # casting position 1 to int \n\nresults_cols = ['driverId', 'position']\nraces_cols = ['date']\ndrivers_cols = ['driver', 'driverId']\n\nresults_copy = results_copy[results_cols]\nraces_copy = races_copy[races_cols]\ndrivers_copy = drivers[drivers_cols]\n\nf1_victories = results_copy.join(races_copy)\nf1_victories = f1_victories.merge(drivers_copy, on='driverId', how='left')\n\n# Victories cumulative sum\nf1_victories = f1_victories.sort_values(by='date')\n\nf1_victories['victories'] = f1_victories.groupby(['driverId']).cumsum()   \n\n# Getting the top five f1 biggest winners drivers id\nf1_biggest_winners = f1_victories.groupby('driverId').victories.nlargest(1).sort_values(ascending=False).head(5)\nf1_biggest_winners_ids = [driver for driver, race in f1_biggest_winners.index]\n\n# Dataset ready\nf1_victories_biggest_winners = f1_victories.query(f\"driverId == {f1_biggest_winners_ids}\")","908cb270":"# Prepare dataset to plot\n\ncols = ['date', 'driver', 'victories']\nwinner_drivers = f1_victories_biggest_winners.driver.unique()\n\ncolors = {\n    'Alain Prost': '#d80005', \n    'Ayrton Senna': '#ffffff', \n    'Michael Schumacher': '#f71120',\n    'Sebastian Vettel': '#10428e',\n    'Lewis Hamilton': '#e6e6e6'\n}\n\nwinners_history = pd.DataFrame()\n\n# Including other drivers races date (like a cross join matrix, \n# but cosidering column \"victories\" in a shift operation) \nfor driver in winner_drivers:\n    # Current driver victories\n    driver_history = f1_victories_biggest_winners.query(f\"driver == '{driver}'\")[cols]\n    \n    # Other drivers list\n    other_drivers = winner_drivers[winner_drivers != driver]\n    other_drivers = list(other_drivers)\n    \n    # Other drivers victories\n    other_driver_history = f1_victories_biggest_winners.query(f\"driver == {other_drivers}\")[cols]\n    \n    # Renaming other drivers victories to current driver\n    other_driver_history['driver'] = driver\n    \n    # This isn't current driver victory, so receive zero to \"shift\" operation\n    other_driver_history['victories'] = 0    \n    \n    driver_history = pd.concat([driver_history, other_driver_history])\n\n    driver_history['color'] = colors[driver]\n    \n    # Sorting by date to correct \"shift\" operation\n    driver_history.sort_values(by='date', inplace=True)\n    \n    # Reset index to get the last row (index-1) when necessary\n    driver_history.reset_index(inplace=True)\n    \n    # Iterating each row for remain current driver victory when \n    # race date isn't the current driver victory\n    for index, row in driver_history.iterrows():\n        if not row['victories'] and index-1 > 0:\n            driver_history.loc[index, 'victories'] = driver_history.loc[index-1, 'victories']\n        \n    # Plot dataset ready\n    winners_history = pd.concat([winners_history, driver_history])   \n    ","8ad0216d":"# Plots the F1 race wons animated chart \nfig = go.Figure()\n\nfig = px.bar(\n    winners_history, \n    x='victories', \n    y='driver',\n    color='driver',\n    color_discrete_sequence=winners_history.color.unique(),\n    orientation='h',\n    animation_frame=\"date\",\n    animation_group=\"driver\",\n)\n\n# Bar border line color\nfig.update_traces(dict(marker_line_width=1, marker_line_color=\"black\"))\n\n# X axis range\nfig.update_layout(xaxis=dict(range=[0, 100]))\n\n# Setting title\nfig.update_layout(title_text=\"Race wins in F1 history between the top 5 winners drivers\")\n\n# Animation: Buttons labels and animation duration speed\nfig.update_layout(\n    updatemenus = [\n        {\n            \"buttons\": [\n                # Play\n                {\n                    \"args\": [\n                        None, \n                        {\n                            \"frame\": {\n                                \"duration\": 100, \n                                 \"redraw\": False\n                            }, \n                            \"fromcurrent\": True,\n                            \"transition\": {\n                                \"duration\": 100, \n                                \"easing\": \"linear\"\n                            }\n                        }\n                    ],\n                    \"label\": \"Play\",\n                    \"method\": \"animate\"\n                },\n                # Pause\n                {\n                    \"args\": [\n                        [None], \n                        {\n                            \"frame\": {\n                                \"duration\": 0, \n                                \"redraw\": False\n                            },\n                            \"mode\": \"immediate\",\n                            \"transition\": {\n                                \"duration\": 0\n                            }\n                        }\n                    ],\n                    \"label\": \"Pause\",\n                    \"method\": \"animate\"\n                }\n            ]\n        }\n    ]\n)\n\nfig.show()","170fd109":"# Dict for map drivers by id\nwinner_drivers_ids = f1_victories_biggest_winners[['driverId', 'driver']].drop_duplicates()\nwinner_drivers_map = {}\n\nfor _, row in winner_drivers_ids.iterrows():\n    winner_drivers_map[row['driverId']] = row['driver']   ","ec318f27":"# Pole positions dataset\nf1_biggest_winners_poles = results.query(f\"driverId == {f1_biggest_winners_ids} & grid == 1\")[['driverId', 'grid']]\n\n# Driver name mapping\nf1_biggest_winners_poles['driver'] = f1_biggest_winners_poles.driverId.map(winner_drivers_map)\nf1_biggest_winners_poles['color'] = f1_biggest_winners_poles.driver.map(colors)\n\n# Sum cumulative poles\nf1_biggest_winners_poles['total_poles'] = f1_biggest_winners_poles.groupby(['driverId']).cumsum()   \n\n# Total pole positions by winner drivers\nf1_biggest_winners_total_poles = f1_biggest_winners_poles.groupby('driver').total_poles.nlargest(1).sort_values(ascending=False).head(5)\nf1_biggest_winners_total_poles = pd.DataFrame(f1_biggest_winners_total_poles).reset_index()\n\nf1_biggest_winners_total_poles['color'] = f1_biggest_winners_total_poles.driver.map(colors)","8db37731":"# Plot pole positions\nfig = px.bar(\n    f1_biggest_winners_total_poles, \n    x='driver', \n    y='total_poles',\n    color='driver',\n    color_discrete_sequence=f1_biggest_winners_total_poles.color\n)\n\n# Bar border line color\nfig.update_traces(dict(marker_line_width=1, marker_line_color=\"black\"))\n\n# Setting title\nfig.update_layout(title_text=\"Pole positions between the top 5 race winners drivers\")\n\nfig.show()","09bd76c7":"# Hamilton data\nhamilton = drivers.query(\"driverRef == 'hamilton'\")","7dd58157":"# Driver races dataframe\n\ndef get_races_by_driver_id(driver_id):\n    columns = ['grid', 'position', 'raceId', 'constructorId', 'statusId']\n\n    driver_races = results.query(f'driverId == {driver_id}')\n    driver_races = driver_races[columns]\n\n    driver_races.set_index('raceId', inplace=True)\n\n    driver_races = driver_races.join(races.set_index('raceId')['date'])\n\n    driver_races['is_pole'] = driver_races.grid == 1\n    driver_races['is_first_place'] = driver_races.position == '1'\n\n    driver_races.sort_values(by='date', inplace=True)\n\n    driver_races['poles'] = driver_races.is_pole.cumsum()\n    driver_races['races_won'] = driver_races.is_first_place.cumsum()\n\n    driver_races = driver_races.set_index('constructorId').join(constructors.set_index('constructorId')['name'])\n    driver_races = driver_races.rename(columns={'name': 'constructor'})\n    \n    driver_races = pd.merge(status, driver_races, on=['statusId', 'statusId']).sort_values(by='date')\n    driver_races = driver_races.rename(columns={'status': 'race_status'})\n    \n    return driver_races\n    \nhamilton_races = get_races_by_driver_id(hamilton.driverId[0])","f08c40be":"# Dataframes to plot\nmc_laren = hamilton_races.query('constructor == \"McLaren\"')\nmercedes = hamilton_races.query('constructor == \"Mercedes\"')\n\n# To join gap between constructors\nmc_laren = pd.concat([mc_laren, mercedes.head(1)])","eeed90e4":"# Pole positions\nmclaren_poles  = go.Scatter(x=mc_laren.date, y=mc_laren.poles, fill='tozeroy', name=\"Mc Laren\", marker=dict(color=\"#D89A8C\"))\nmercedes_poles = go.Scatter(x=mercedes.date, y=mercedes.poles, fill='tozeroy', name=\"Mercedes\", marker=dict(color=\"#C2C2C2\"))\n\n# Races won\nmclaren_wons  = go.Scatter(x=mc_laren.date, y=mc_laren.races_won, fill='tozeroy', name=\"Mc Laren\", marker=dict(color=\"#cb7967\"), showlegend=False)\nmercedes_wons = go.Scatter(x=mercedes.date, y=mercedes.races_won, fill='tozeroy', name=\"Mercedes\", marker=dict(color=\"#b3b3b3\"), showlegend=False)\n\n# Drawing figure\nfig = make_subplots(\n    rows=2, \n    cols=1, \n    subplot_titles=(\"Pole positions\",\"Races win\")\n)\n\nfig.add_trace(mclaren_poles, row=1, col=1)\nfig.add_trace(mercedes_poles, row=1, col=1)\n\nfig.add_trace(mclaren_wons, row=2, col=1)\nfig.add_trace(mercedes_wons, row=2, col=1)\n\nfig.update_layout(\n    height=600,\n    title_text=\"Careers numbers\",\n    title_font_size=20,\n    hovermode='x',\n    showlegend=True,\n    legend=dict(\n        yanchor=\"top\",\n        y=0.95,\n        xanchor=\"left\",\n        x=0.01\n    ),\n)\n\nfig.update_yaxes(range=[0, 100])","4ee061cb":"# Linear regression\n\ndef linear_regression(x, y):\n    x = np.array([\n        time.mktime(datetime.datetime.strptime(date, \"%Y-%m-%d\").timetuple())\n        for date in x\n    ])\n\n    y = np.array(y)\n\n    slope, intercept, _, _, _ = sp.linregress(x,y)\n    y_regression = (slope * x) + intercept\n    \n    return y_regression, slope","4142cc22":"# Constructors linear regressions\n\nmc_laren_poles_y_reg, mc_laren_poles_slope = linear_regression(mc_laren.date, mc_laren.poles)\nmercedes_poles_y_reg, mercedes_poles_slope = linear_regression(mercedes.date, mercedes.poles)\n\nmc_laren_wons_y_reg, mc_laren_wons_slope = linear_regression(mc_laren.date, mc_laren.races_won)\nmercedes_wons_y_reg, mercedes_wons_slope = linear_regression(mercedes.date, mercedes.races_won)\n\n# Linear regression traces lines\n\nmc_laren_poles_linreg = go.Scatter(x=mc_laren.date, y=mc_laren_poles_y_reg, line=dict(color='#984634', dash='dash'), hoverinfo='skip')\nmercedes_poles_linreg = go.Scatter(x=mercedes.date, y=mercedes_poles_y_reg, line=dict(color='#999999', dash='dash'), hoverinfo='skip')\n\nmc_laren_wons_linreg = go.Scatter(x=mc_laren.date, y=mc_laren_wons_y_reg, line=dict(color='#984634', dash='dash'), hoverinfo='skip')\nmercedes_wons_linreg = go.Scatter(x=mercedes.date, y=mercedes_wons_y_reg, line=dict(color='#999999', dash='dash'), hoverinfo='skip')","cbe2d34b":"# Drawing figure\nfig = make_subplots(\n    rows=2, \n    cols=2, \n    subplot_titles=(\n        \"Pole positions Mc Laren\",\n        \"Pole positions Mercedes\",\n        \"Races win Mc Laren\",\n        \"Races win Mercedes\",\n    )\n)\n\nfig.add_trace(mc_laren_poles_linreg, row=1, col=1)\nfig.add_trace(mclaren_poles, row=1, col=1)\n\nfig.add_trace(mercedes_poles_linreg, row=1, col=2)\nfig.add_trace(mercedes_poles, row=1, col=2)\n\nfig.add_trace(mc_laren_wons_linreg, row=2, col=1)\nfig.add_trace(mclaren_wons, row=2, col=1)\n\nfig.add_trace(mercedes_wons_linreg, row=2, col=2)\nfig.add_trace(mercedes_wons, row=2, col=2)\n\nfig.update_layout(\n    height=900,\n    title_text=\"Linear regression slopes\",\n    title_font_size=20,\n    hovermode='x',\n    showlegend=False,\n    legend=dict(\n        yanchor=\"top\",\n        y=0.95,\n        xanchor=\"left\",\n        x=0.01\n    ),\n)\n\nfig.add_annotation(\n    x=list(mc_laren.date)[50], \n    y=mc_laren_poles_y_reg[50],\n    xref='x1', \n    yref='y1',\n    text=f\"Linear Regression Slope: {mc_laren_poles_slope}\",\n    showarrow=True,\n    bordercolor=\"#929191\",\n    borderwidth=2,\n    borderpad=4,\n    ay=-80,\n    ax=-30,\n    arrowcolor=\"#929191\",\n    arrowwidth=2\n)\n\nfig.add_annotation (\n    x=list(mercedes.date)[50], \n    y=mercedes_poles_y_reg[50],\n    xref='x2', \n    yref='y2',\n    text=f\"Linear Regression Slope: {mercedes_poles_slope}\",\n    showarrow=True,\n    bordercolor=\"#ffffff\",\n    borderwidth=2,\n    borderpad=4,\n    ay=80,\n    ax=30,\n    arrowcolor=\"#ffffff\",\n    arrowwidth=2\n)\n\nfig.add_annotation (\n    x=list(mc_laren.date)[50], \n    y=mc_laren_wons_y_reg[50],\n    xref='x3', \n    yref='y3',\n    text=f\"Linear Regression Slope: {mc_laren_wons_slope}\",\n    showarrow=True,\n    bordercolor=\"#929191\",\n    borderwidth=2,\n    borderpad=4,\n    ay=-80,\n    ax=-30,\n    arrowcolor=\"#929191\",\n    arrowwidth=2\n)\n\nfig.add_annotation (\n    x=list(mercedes.date)[50], \n    y=mercedes_wons_y_reg[50],\n    xref='x4', \n    yref='y4',\n    text=f\"Linear Regression Slope: {mercedes_wons_slope}\",\n    showarrow=True,\n    bordercolor=\"#ffffff\",\n    borderwidth=2,\n    borderpad=4,\n    ay=80,\n    ax=30,\n    arrowcolor=\"#ffffff\",\n    arrowwidth=2\n)\n\nfig.update_yaxes(range=[0, 100])\n","393f31cb":"hamilton_mercedes_races = hamilton_races.query(\"constructor == 'Mercedes'\")\n\n# Preparing mercedes drivers datasets\nmercedes_id = constructors.query(\"name == 'Mercedes'\")['constructorId']\nmercedes_id = int(mercedes_id)\n\nmercedes_races = results.query(f\"constructorId == {mercedes_id}\")\nmercedes_races = mercedes_races.merge(races, on='raceId')\n\nfirst_hamilton_race = hamilton_mercedes_races.date.min()\n\nhamilton_mercedes_team_mates_id = mercedes_races.query(f\"date >= '{first_hamilton_race}' & driverId != {hamilton.driverId[0]}\")\nhamilton_mercedes_team_mates_id = hamilton_mercedes_team_mates_id.driverId.unique()\n\nhamilton_mercedes_team_mates = []\n    \nfor driver_id in hamilton_mercedes_team_mates_id:\n    team_mate_races = get_races_by_driver_id(driver_id).query(f\"constructor == 'Mercedes' & date >= '{first_hamilton_race}'\")\n    \n    team_mate_races['driver'] = drivers.query(f\"driverId == {driver_id}\").driver.unique()[0]\n    \n    hamilton_mercedes_team_mates.append(team_mate_races)","78fb9165":"def team_mate_comparisson(index, team_mate_color):\n    team_mate_name = hamilton_mercedes_team_mates[index].driver.unique()[0]\n\n    last_team_mate_race = hamilton_mercedes_team_mates[index].date.max()\n    first_team_mate_race = hamilton_mercedes_team_mates[index].date.min()\n    \n    hamilton_color = '#b3b3b3'    \n\n    # Only races in team mate period \n    hamilton_mercedes_team_mate_races = hamilton_mercedes_races.query(f\"'{first_team_mate_race}' <= date <= '{last_team_mate_race}'\").copy()\n\n    # Reseting races won sum\n    hamilton_mercedes_team_mate_races['races_won'] = hamilton_mercedes_team_mate_races.is_first_place.cumsum()\n\n    # Races won\n    team_mate_races_wons = go.Scatter(\n        name=team_mate_name, \n        fill='tozeroy', \n        marker=dict(color=team_mate_color),\n        x=hamilton_mercedes_team_mates[index].date, \n        y=hamilton_mercedes_team_mates[index].races_won \n    )\n\n    hamilton_races_wons = go.Scatter(\n        name='Lewis Hamilton',\n        fill='tozeroy',\n        marker=dict(color=hamilton_color),\n        x=hamilton_mercedes_team_mate_races.date, \n        y=hamilton_mercedes_team_mate_races.races_won      \n    )\n\n    # Drawing figure\n    fig = make_subplots(\n        rows=2, \n        cols=2, \n        specs=[\n            [{\"colspan\": 2}, None],\n            [{}, {}],\n        ],\n        horizontal_spacing = 0.1,\n        vertical_spacing = 0.2,\n        subplot_titles= (\n            \"Races win\", \n            \"Standings distribution\",\n            \"Standings distribution\",\n        )\n    )\n\n    fig.add_trace(hamilton_races_wons,row=1, col=1)\n    fig.add_trace(team_mate_races_wons, row=1, col=1)\n\n    # Standings\n    hamilton_standings = go.Box(\n        name='Lewis Hamilton', \n        showlegend=False, \n        marker=dict(color=hamilton_color),\n        y=hamilton_mercedes_team_mate_races.position\n    )\n\n    team_mate_standings = go.Box(\n        name=team_mate_name, \n        showlegend=False, \n        marker=dict(color=team_mate_color),\n        y=hamilton_mercedes_team_mates[index].position, \n    )\n\n    fig.add_trace(hamilton_standings, row=2, col=1)\n    fig.add_trace(team_mate_standings,row=2, col=2)\n\n    fig.update_layout(\n        height=700,\n        margin=dict(b=10),\n        title_text=f\"Lewis Hamilton and {team_mate_name}\",\n        title_font_size=20,\n        hovermode='x',\n        showlegend=True,\n        legend=dict(\n            yanchor=\"top\",\n            y=0.95,\n            xanchor=\"left\",\n            x=0.01\n        ),\n    )\n\n    fig.update_layout(    \n        {    \n            'yaxis': {'range': [0, 50]},\n            'yaxis2':{'range': [20, 0], \"nticks\": 10},\n            'yaxis3':{'range': [20, 0], \"nticks\": 10},\n        }\n    )\n    \n    # Drawing figure race status\n    fig_race_status = make_subplots(\n        rows=1, \n        cols=2, \n        specs=[\n            [{}, {}]\n        ],\n        horizontal_spacing = 0.1,\n        subplot_titles= (\n            \"Race status\",\n            \"Race status\",\n        )\n    )\n    \n    # Race status\n    hamilton_race_status_data  = hamilton_mercedes_team_mate_races.race_status.value_counts().to_frame()\n    team_mate_race_status_data = hamilton_mercedes_team_mates[index].race_status.value_counts().to_frame()\n\n    hamilton_race_status_data['percent'] = hamilton_mercedes_team_mate_races.race_status.value_counts(normalize=True)\n    team_mate_race_status_data['percent'] = hamilton_mercedes_team_mates[index].race_status.value_counts(normalize=True)\n    \n    hamilton_race_status = go.Bar(\n        name='Lewis Hamilton', \n        orientation='h',\n        showlegend=False, \n        marker=dict(color=hamilton_color),\n        x=hamilton_race_status_data.race_status,\n        y=hamilton_race_status_data.index,\n        hoverinfo='x+y+text',\n        hovertext=hamilton_race_status_data.percent\n    )\n\n    team_mate_race_status = go.Bar(\n        name=team_mate_name, \n        orientation='h',\n        showlegend=False, \n        marker=dict(color=team_mate_color),\n        x=team_mate_race_status_data.race_status,\n        y=team_mate_race_status_data.index, \n        hoverinfo='x+y+text',\n        hovertext=team_mate_race_status_data.percent\n    )\n    \n    fig_race_status.add_trace(hamilton_race_status, row=1, col=1)\n    fig_race_status.add_trace(team_mate_race_status,row=1, col=2)\n\n    fig_race_status.update_layout(\n        height=300,\n        margin=dict(t=20),\n        showlegend=False,\n    )\n    \n    fig_race_status.update_layout(    \n        {    \n            'yaxis1':{'autorange': 'reversed'},\n            'yaxis2':{'autorange': 'reversed'}\n        }\n    )\n    \n    fig.show()\n    fig_race_status.show()\n    ","cd1c4d5e":"team_mate_comparisson(index=0, team_mate_color='#6ed6d1')","d87d6dec":"team_mate_comparisson(index=1, team_mate_color='#0e0000')","2a0ce23d":"The Mercedes period regression line slope, in both numbers, is almost three times greater than Mc Laren period. His period is greater than Mc Laren period, but his growth is much bigger: \n- Mercedes: From 22 to 92 races win (71 races win)\n- Mc Laren: 21 races win \n\nSo, let's check this Mercedes winner period.","d604e06c":"In Nico Rosberg comparison, we have the following facts:\n\n**Race wins**\n- In early years, Rosberg has a small advantage against Hamilton. But both drivers has a small growth (7 wins in almost two years period)\n- From september 2014, Hamilton has a consistent growth, whereas Rosberg race wins remains the same in some periods.\n- Max gap in race wins between the drivers is 11 wins in october 25th, 2015 \n\n**Standings**\n- Hamilton has Q3 in third position, that is, in 75% of the races, he is in the podium.\n- Rosberg Q3 is for 4th position and he presents more outliers standings. \n\n**Race status**\n- Both drivers finished the majority of his races (>= 88% races finished)\n- Most of others status are car issues, that is, both drivers has consistent races in terms of finish the races.\n","137334e8":"In Valtteri Bottas comparison, we have the following facts:\n\n**Race wins**\n- In 2017, both drivers has a shy growth. But since 2018 season, we see Hamilton achieve more and more wins whereas Bottas has a very low race wins growth. \n\n**Standings**\n- Hamilton has a impressive median of first place. 9th position is his max. That is, in all of his finished races, he has scored (*Only top 10 standings score in F1*).\n- Bottas has quite good standings as well. In 50% of races he remains at podium and his max is only one standing to score zone.\n\n**Race status**\n- Hamilton finished **97%** of his races. Considering his race standings, he has a consistent job in terms of scoring in races.\n- Bottas has 89% races finished and more car issues. \n","550e0cbc":"# 4. Hamilton numbers at Mercedes \n\nIn F1, the driver's team mate, in theory, has the same car and therefore the same the conditions in the race. So, the F1 driver's team mate is known as his first opponent to be beaten.\n\nIn the following charts, we'll see Hamilton's numbers comparing them to his Mercedes teammates.","ef080cc3":"In thirteen years so far, Hamilton has a consistely growing at races wins and pole positions results. But it seems a \"little slow\" in Mc Laren period, and quite aggressive growth in Mercedes period.\n\nLet's see how aggressive is this.","579b9d3c":"# Lewis Hamilton: Stats of a champion\n\nIn 2020, Lewis Hamilton has conquered his **7th Formula One championship** and now has the same titles quantity as Michael Schumacher. \n\nIn this same season, Lewis has become the driver with the **most race wins** in F1 history as well.\n\n![Drivers championship wins](https:\/\/miscelaneous-multimedia.s3-us-west-1.amazonaws.com\/Lewis.png)\n\nThis is a great moment for the Formula One history. There's a few drivers that achieved this level and it is nice to see a driver such skilled in our time.\n\nLet's get this moment to see some data about this great accomplished.\n\n*Note: copy and edit for a better visualization*","b3cea03b":"# 2. Pole positions\n**Between the top winners in F1**\n\nPole position is not a assurance of victory in a race, but it shows that driver and his car is the fastest in that grand prix qualifying. \n\nHere wee see Hamilton with almost **30 pole positions** from Schumacher, and Senna in third position in terms of pole position (*a great number as well, considering the gap in seasons between the top pole position drivers*).","3da6fa0f":"In the following charts, we have the same numbers but in this time we'll see the regression line and his slope. This way, we can get a measure of how \"aggressive\" is the growth in each constructors periods in Hamilton's career.","96efb502":"# 5. Conclusions\n\n- Hamilton has a impressive numbers of race wins, pole positions in comparisson to top F1 drivers (race and championship winners)\n- His career in Mercedes is determinant to his numbers so far: is in this constructor that he has the most race wins growth.\n- In Nico Rosberg period, Hamilton had a more competitive team mate, with number more close between them.  \n- In Valtteri Bottas period we see a very good team job for Hamilton results. Improvement in his standings and almost all races finished.\n","f1287ed9":"# 3. Hamilton career\n\nLet's dive in some Hamilton carrer numbers. Firstly, we'll see his race wins and pole positions in a time series.","499898b0":"# 1. Race wins\n**Between the top winners in F1**\n\nLet's get back in F1 past to see the evolution of race wins quantity of the top 5 drivers.\n\nPress the **Play** button: you will note some interestings insights:\n- Alain Prost ascension (1981-1985) and the classical competition between him and Ayrton Senna\n- \"The Schumacher Era\": From 1994 to 2006 Michael Schumacher has a consistent race wins quantities and achieved the post of most wins in 2006\n- \"Vettel promise\": 2011 to 2014 Vettel has a quite consistent race wins, but soon will be overcomed by Hamilton\n- Hamilton ascencion: In 2015 he reachs Vettel race wins. Since them, Vettel had some victories but its not a threat to Hamilton numbers.\n- Top winner: In 2020-10-25 Hamilton overcome Schumacher in race wins. Schumacher standed his top race winner post for fourteen years.","6e24155b":"## Table of contents\n\n**[1. Race wins](#Race-wins)**\n\n**[2. Pole positions](#Pole-positions)**\n\n**[3. Hamilton career](#Hamilton-career)**\n\n**[4. Hamilton numbers at Mercedes ](#Hamilton-numbers-at-Mercedes )**\n\n**[5. Conclusions](#Conclusions)**"}}