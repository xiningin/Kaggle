{"cell_type":{"66520f28":"code","66a3f52b":"code","95d81cd3":"code","cc8a8b55":"code","06526e02":"code","072484a0":"code","604fbf5e":"code","e8627133":"code","25c7412d":"code","dd0e05f2":"code","f5fd2876":"code","5d04a03c":"code","cbb6eb59":"code","05dcee71":"code","e1dafa54":"code","5ac25045":"code","bbca2c8f":"code","959648fd":"code","3dce14c8":"code","4bc61d28":"code","b7555274":"code","27012726":"markdown","aaf29795":"markdown","3b582b58":"markdown","cc4786be":"markdown","4737fa15":"markdown"},"source":{"66520f28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66a3f52b":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")","95d81cd3":"train_pd = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest_pd = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')","cc8a8b55":"#checking Null values\ntrain_pd.isna().sum()","06526e02":"fig = plt.subplots(figsize = (15,8))\nsns.countplot(x='target',data=train_pd)","072484a0":"#import packages\nimport numpy as np\nimport pandas as pd \n#import matplotlib as mpl\nimport h2o\nfrom h2o.automl import H2OAutoML\nimport seaborn as sns\nimport matplotlib.pyplot as plt","604fbf5e":"h2o.init()","e8627133":"#import train test files\ntrain = h2o.import_file('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest = h2o.import_file('..\/input\/tabular-playground-series-jun-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv')","25c7412d":"print(train.shape)\nprint(test.shape)","dd0e05f2":"#desscribe dataset\ntrain.describe()","f5fd2876":"x = train.columns\ny = \"target\"\nx.remove(y)\nx.remove(\"id\") #removing id  ","5d04a03c":"for col in x:train[col].hist()","cbb6eb59":"plt.figure(figsize=(15,15))\ncorr = train[:,0:10].cor().as_data_frame()\ncorr.index = train.columns[0:10]\nsns.heatmap(corr, annot = True, cmap='RdYlGn', vmin=-1, vmax=1)\nplt.title(\"Correlation Heatmap\", fontsize=16)\nplt.show()","05dcee71":"aml = H2OAutoML(max_runtime_secs=200, seed=1)\naml.train(x=x, y=y, training_frame=train)","e1dafa54":"lb = aml.leaderboard\nlb.head()","5ac25045":"preds = aml.predict(test)","bbca2c8f":"preds.as_data_frame().values","959648fd":"# Get model ids for all models in the AutoML Leaderboard\nmodel_ids = list(aml.leaderboard['model_id'].as_data_frame().iloc[:,0])\n# Get the \"All Models\" Stacked Ensemble model\nse = h2o.get_model([mid for mid in model_ids if \"StackedEnsemble_AllModels\" in mid][0])\n# Get the Stacked Ensemble metalearner model\nmetalearner = h2o.get_model(se.metalearner()['name'])","3dce14c8":"metalearner.coef_norm()","4bc61d28":"## create submission\nsubmission = pd.concat([\n    pd.DataFrame({'id': test['id'].as_data_frame().id}),\n    preds.as_data_frame().drop('predict', axis=1)\n], axis=1)\n\nsubmission.head()","b7555274":"submission.to_csv('submission.csv', index=False)","27012726":"Visulaizaton ","aaf29795":"**AutoML H2o Code**","3b582b58":"Now let us also look at the correlation of the individual features. We can use the cor() function in H2OFrame for the same","cc4786be":"** #feature distribution using hist **\n","4737fa15":"![image.png](attachment:52391f97-fea0-4572-9642-8dd2e5ae64c0.png)"}}