{"cell_type":{"f847116a":"code","15dabc43":"code","a4a2cb3f":"code","e4af72f4":"code","cf60e993":"code","61b68608":"code","f9d8e128":"code","3d5fdf45":"code","7b2bcdd6":"code","cac27af0":"code","99d54570":"code","73dc1b67":"code","f6c2ec74":"code","5948a49b":"code","b45e3348":"code","5e6acf4a":"code","f2821afa":"code","e8284af3":"code","466f096a":"code","9e86e147":"code","767ac481":"code","41e2ee61":"code","11ccb3ea":"code","5e7d8f51":"code","6f6203ee":"code","36e3c049":"code","60d14021":"code","01c6dab1":"code","0d618da1":"code","8f72ce5e":"code","44f681f2":"markdown","c1d701d2":"markdown","1ae94a71":"markdown","fc1a45d1":"markdown","9ce33475":"markdown","2129e1cc":"markdown","fb28c8b6":"markdown","ab90ff8d":"markdown","e427f3ff":"markdown","69798b13":"markdown","14abb64c":"markdown","441cf722":"markdown","d1195730":"markdown","470a1479":"markdown","6942486b":"markdown","0df4e4ac":"markdown","b956cb9f":"markdown","2250772c":"markdown","461b283e":"markdown","d256cf9c":"markdown","2af6d1be":"markdown","17ddc6c1":"markdown","2e1dfddb":"markdown","991f29e0":"markdown","0a4226ae":"markdown"},"source":{"f847116a":"from IPython.core.display import display, HTML, Javascript\n\n# ----- Notebook Theme -----\ncolor_map = ['#16a085', '#e8f6f3', '#d0ece7', '#a2d9ce', '#73c6b6', '#45b39d', \n                        '#16a085', '#138d75', '#117a65', '#0e6655', '#0b5345']\n\nprompt = color_map[-1]\nmain_color = color_map[0]\nstrong_main_color = color_map[1]\ncustom_colors = [strong_main_color, main_color]\n\ncss_file = ''' \n\ndiv #notebook {\nbackground-color: white;\nline-height: 20px;\n}\n\n#notebook-container {\n%s\nmargin-top: 2em;\npadding-top: 2em;\nborder-top: 4px solid %s; \/* light orange *\/\n-webkit-box-shadow: 0px 0px 8px 2px rgba(224, 212, 226, 0.5); \/* pink *\/\n    box-shadow: 0px 0px 8px 2px rgba(224, 212, 226, 0.5); \/* pink *\/\n}\n\ndiv .input {\nmargin-bottom: 1em;\n}\n\n.rendered_html h1, .rendered_html h2, .rendered_html h3, .rendered_html h4, .rendered_html h5, .rendered_html h6 {\ncolor: %s; \/* light orange *\/\nfont-weight: 600;\n}\n\ndiv.input_area {\nborder: none;\n    background-color: %s; \/* rgba(229, 143, 101, 0.1); light orange [exactly #E58F65] *\/\n    border-top: 2px solid %s; \/* light orange *\/\n}\n\ndiv.input_prompt {\ncolor: %s; \/* light blue *\/\n}\n\ndiv.output_prompt {\ncolor: %s; \/* strong orange *\/\n}\n\ndiv.cell.selected:before, div.cell.selected.jupyter-soft-selected:before {\nbackground: %s; \/* light orange *\/\n}\n\ndiv.cell.selected, div.cell.selected.jupyter-soft-selected {\n    border-color: %s; \/* light orange *\/\n}\n\n.edit_mode div.cell.selected:before {\nbackground: %s; \/* light orange *\/\n}\n\n.edit_mode div.cell.selected {\nborder-color: %s; \/* light orange *\/\n\n}\n'''\ndef to_rgb(h): \n    return tuple(int(h[i:i+2], 16) for i in [0, 2, 4])\n\nmain_color_rgba = 'rgba(%s, %s, %s, 0.1)' % (to_rgb(main_color[1:]))\nopen('notebook.css', 'w').write(css_file % ('width: 95%;', main_color, main_color, main_color_rgba, main_color,  main_color, prompt, main_color, main_color, main_color, main_color))\n\ndef nb(): \n    return HTML(\"<style>\" + open(\"notebook.css\", \"r\").read() + \"<\/style>\")\nnb()","15dabc43":"s = '<iframe src=\"https:\/\/ghbtns.com\/github-btn.html?user=sberbank-ai-lab&repo=LightAutoML&type=star&count=true&size=large\" frameborder=\"0\" scrolling=\"0\" width=\"170\" height=\"30\" title=\"LightAutoML GitHub\"><\/iframe>'\nHTML(s)","a4a2cb3f":"!pip install -U lightautoml","e4af72f4":"# Standard python libraries\nimport os\nimport time\n\n# Essential DS libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport torch\n\n# LightAutoML presets, task and report generation\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\nfrom lightautoml.report.report_deco import ReportDeco","cf60e993":"N_THREADS = 4\nN_FOLDS = 5\nRANDOM_STATE = 42\nTEST_SIZE = 0.1\nTIMEOUT = 1800\nTARGET_NAME = 'song_popularity'","61b68608":"np.random.seed(RANDOM_STATE)\ntorch.set_num_threads(N_THREADS)","f9d8e128":"INPUT_DIR = '..\/input\/song-popularity-prediction\/'","3d5fdf45":"train_data = pd.read_csv(INPUT_DIR + 'train.csv')\nprint(train_data.shape)\ntrain_data.head()","7b2bcdd6":"test_data = pd.read_csv(INPUT_DIR + 'test.csv')\nprint(test_data.shape)\ntest_data.head()","cac27af0":"submission = pd.read_csv(INPUT_DIR + 'sample_submission.csv')\nprint(submission.shape)\nsubmission.head()","99d54570":"for alg in ['xgb', 'lgb', 'cb']:\n    oof_preds = pd.read_csv('..\/input\/song-popularity-prediction-with-oof-predictions\/{}_oof.csv'.format(alg))\n    train_data['{}_preds'.format(alg)] = oof_preds['song_popularity'].values\n    \n    test_preds = pd.read_csv('..\/input\/song-popularity-prediction-with-oof-predictions\/{}_test.csv'.format(alg))\n    test_data['{}_preds'.format(alg)] = test_preds['song_popularity'].values","73dc1b67":"train_data.head()","f6c2ec74":"test_data.head()","5948a49b":"# tr_data, te_data = train_test_split(\n#     train_data, \n#     test_size=TEST_SIZE, \n#     stratify=train_data[TARGET_NAME], \n#     random_state=RANDOM_STATE\n# )\n\n# print(f'Data splitted. Parts sizes: tr_data = {tr_data.shape}, te_data = {te_data.shape}')\n\n# tr_data.head()","b45e3348":"task = Task('binary', metric = roc_auc_score)","5e6acf4a":"roles = {\n    'target': TARGET_NAME,\n    'drop': ['id']\n}","f2821afa":"automl = TabularAutoML(\n    task = task, \n    timeout = TIMEOUT,\n    cpu_limit = N_THREADS,\n    reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE}\n)","e8284af3":"%%time \noof_pred = automl.fit_predict(train_data, roles = roles, verbose = 1)","466f096a":"print(f'OOF score: {roc_auc_score(train_data[TARGET_NAME].values, oof_pred.data[:, 0])}')","9e86e147":"print(automl.create_model_str_desc())","767ac481":"%%time\n\n# Fast feature importances calculation\nfast_fi = automl.get_feature_scores('fast')\nfast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (30, 10), grid = True)","41e2ee61":"utilized_automl = TabularUtilizedAutoML(\n    task = task, \n    timeout = 3 * TIMEOUT,\n    cpu_limit = N_THREADS,\n    reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n)","11ccb3ea":"%%time \n\noof_pred = utilized_automl.fit_predict(train_data, roles = roles, verbose = 1)","5e7d8f51":"print('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))","6f6203ee":"print(utilized_automl.create_model_str_desc())","36e3c049":"%%time\n\n# Fast feature importances calculation\nfast_fi = utilized_automl.get_feature_scores('fast')\nfast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (30, 10), grid = True)","60d14021":"print(f'OOF score: {roc_auc_score(train_data[TARGET_NAME].values, oof_pred.data[:, 0])}')","01c6dab1":"test_pred = automl.predict(test_data)\nprint(f'Prediction for te_data:\\n{test_pred}\\nShape = {test_pred.shape}')","0d618da1":"utilized_test_pred = utilized_automl.predict(test_data)\nprint(f'Utilized prediction for te_data:\\n{utilized_test_pred}\\nShape = {utilized_test_pred.shape}')","8f72ce5e":"submission[TARGET_NAME] = test_pred.data[:, 0]\nsubmission.to_csv('lightautoml_tabularautoml.csv', index = False)\nsubmission[TARGET_NAME] = utilized_test_pred.data[:, 0]\nsubmission.to_csv('lightautoml_tabularutilizedautoml.csv', index = False)\nsubmission[TARGET_NAME] = 0.5 * test_pred.data[:, 0] + 0.5 * utilized_test_pred.data[:, 0]\nsubmission.to_csv('lightautoml_combo.csv', index = False)","44f681f2":"In next the cell we are going to create LightAutoML model with `TabularAutoML` class - preset with default model structure like in the image below:\n\n<img src=\"https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/raw\/master\/imgs\/tutorial_blackbox_pipeline.png\" alt=\"TabularAutoML preset pipeline\" style=\"width:85%;\"\/>\n\nin just several lines. Let's discuss the params we can setup:\n- `task` - the type of the ML task (the only **must have** parameter)\n- `timeout` - time limit in seconds for model to train\n- `cpu_limit` - vCPU count for model to use\n- `reader_params` - parameter change for Reader object inside preset, which works on the first step of data preparation: automatic feature typization, preliminary almost-constant features, correct CV setup etc. For example, we setup `n_jobs` threads for typization algo, `cv` folds and `random_state` as inside CV seed.\n\n**Important note**: `reader_params` key is one of the YAML config keys, which is used inside `TabularAutoML` preset. [More details](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/blob\/master\/lightautoml\/automl\/presets\/tabular_config.yml) on its structure with explanation comments can be found on the link attached. Each key from this config can be modified with user settings during preset object initialization. To get more info about different parameters setting (for example, ML algos which can be used in `general_params->use_algos`) please take a look at our [article on TowardsDataScience](https:\/\/towardsdatascience.com\/lightautoml-preset-usage-tutorial-2cce7da6f936).\n\nMoreover, to receive the automatic report for our model we will use `ReportDeco` decorator and work with the decorated version in the same way as we do with usual one. ","c1d701d2":"### 1.2. Feature roles setup","1ae94a71":"# LightAutoML baseline\n\nOfficial LightAutoML github repository is [here](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML). \n\n### Do not forget to put upvote for the notebook and the \u2b50\ufe0f for github repo if you like it using the button below - one click for you, great pleasure for us \u263a\ufe0f ","fc1a45d1":"### 0.3. Imported models setup\n\nFor better reproducibility fix numpy random seed with max number of threads for Torch (which usually try to use all the threads on server):","9ce33475":"# 2. AutoML training","2129e1cc":"To solve the task, we need to setup columns roles. The **only role you must setup is target role**, everything else (drop, numeric, categorical, group, weights etc.) is up to user - LightAutoML models have automatic columns typization inside:","fb28c8b6":"### 0.0. install LightAutoML","ab90ff8d":"- [Official LightAutoML github repo](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML)\n- [LightAutoML documentation](https:\/\/lightautoml.readthedocs.io\/en\/latest)","e427f3ff":"### 0.4. Data loading\nLet's check the data we have:","69798b13":"Feature importances calculation for `TabularUtilizedAutoML`:","14abb64c":"To run autoML training use fit_predict method:\n- `train_data` - Dataset to train.\n- `roles` - Roles dict.\n- `verbose` - Controls the verbosity: the higher, the more messages.\n        <1  : messages are not displayed;\n        >=1 : the computation process for layers is displayed;\n        >=2 : the information about folds processing is also displayed;\n        >=3 : the hyperparameters optimization process is also displayed;\n        >=4 : the training process for every algorithm is displayed;\n\nNote: out-of-fold prediction is calculated during training and returned from the fit_predict method","441cf722":"# 5. Spending more from TIMEOUT - `TabularUtilizedAutoML` usage\n\nUsing `TabularAutoML` we spent only 8 minutes to build the model with setup `TIMEOUT` equal to 30 minutes. To spend (almost) all the `TIMEOUT` we can use `TabularUtilizedAutoML` preset instead of `TabularAutoML`, which has the same API:","d1195730":"# 4. Model analysis","470a1479":"<img src=\"https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/raw\/master\/imgs\/LightAutoML_logo_big.png\" alt=\"LightAutoML logo\" style=\"width:70%;\"\/>","6942486b":"### Adding OOFs and TESTs preds\n\nThese predictions were taken from upgraded version of [this notebook](https:\/\/www.kaggle.com\/deepak132\/song-popularity-prediction) so please upvote it first \ud83d\udc4d","0df4e4ac":"### 1.3. LightAutoML model creation - TabularAutoML preset","b956cb9f":"# Additional materials","2250772c":"### 0.5. Data splitting for train-holdout\nAs we have only one file with target values, we can split it into 80%-20% for holdout usage:","461b283e":"Metric calculation","d256cf9c":"### 1.1. Task type\n\nOn the cell below we create Task object - the class to setup what task LightAutoML model should solve with specific loss and metric if necessary (more info can be found [here](https:\/\/lightautoml.readthedocs.io\/en\/latest\/generated\/lightautoml.tasks.base.Task.html#lightautoml.tasks.base.Task) in our documentation):","2af6d1be":"### 0.2. Constants\n\nHere we setup the constants to use in the kernel:\n- `N_THREADS` - number of vCPUs for LightAutoML model creation\n- `N_FOLDS` - number of folds in LightAutoML inner CV\n- `RANDOM_STATE` - random seed for better reproducibility\n- `TEST_SIZE` - houldout data part size \n- `TIMEOUT` - limit in seconds for model to train\n- `TARGET_NAME` - target column name in dataset","17ddc6c1":"# 1. Task definition","2e1dfddb":"## 0. Prerequisites","991f29e0":"### 0.1. Import libraries\n\nHere we will import the libraries we use in this kernel:\n- Standard python libraries for timing, working with OS etc.\n- Essential python DS libraries like numpy, pandas, scikit-learn and torch (the last we will use in the next cell)\n- LightAutoML modules: presets for AutoML, task and report generation module","0a4226ae":"# 6. Predict for test dataset"}}