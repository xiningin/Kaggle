{"cell_type":{"e0012856":"code","8d81f738":"code","ac9b8b18":"code","fc17b759":"code","efe5967b":"code","899d3ad3":"code","34ba7a10":"markdown","b3c14c8c":"markdown","bd03bbcc":"markdown","d2ac7c50":"markdown","1af43319":"markdown"},"source":{"e0012856":"# We need CMake 3.11+ and Python3 (with dev libraries).\n!pip3 install cmake==3.17.3\n!cmake --version\n\n# The current version of `nlnum` is 0.0.5. This may change with time.\n# You can remove the `==0.0.5` to fetch the latest version.\n!pip3 install nlnum==0.0.5","8d81f738":"import numpy as np\nfrom nlnum import lrcoef, nlcoef, nlcoef_slow","ac9b8b18":"N = lambda mu, nu, lam: lambda t: nlcoef(t*mu, t*nu, t*lam)","fc17b759":"# Here are the input partitions.\nmu = nu = lam = np.array([2, 1, 1])\n\n# This is the scaling function F(t).\nF = N(mu, nu, lam)","efe5967b":"%%time\nnp.array([ F(t) for t in range(13+1) ])","899d3ad3":"%%time\nnlcoef_slow(6*mu, 6*nu, 6*lam)","34ba7a10":"The below code defines the function $F(t) = N_{t\\mu,t\\nu,t\\lambda}$.","b3c14c8c":"The below code computes $F(6)$ using Proposition 2.3 **without** parallelization.","bd03bbcc":"# Newell-Littlewood numbers\nhttps:\/\/arxiv.org\/abs\/2005.09012","d2ac7c50":"The below code computes $F(0),\\ldots, F(13)$ using the definition (1.1) of $N_{\\mu,\\nu,\\lambda}$ **without** parallelization.","1af43319":"Let $\\mu = \\nu = \\lambda = (2, 1, 1)$."}}