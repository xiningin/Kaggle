{"cell_type":{"01c075aa":"code","ffd69dc6":"code","6ceb4c68":"code","005fb6b8":"code","1376d67f":"code","7b860294":"code","82c94f2c":"code","8f027a16":"code","719cbcba":"code","1bd833f4":"code","c640ca1c":"code","e66c572a":"code","058f0a71":"code","e741621c":"code","3bd55fd6":"code","5794a4a4":"code","9e8a5d5c":"code","c3ce606d":"code","521501c9":"code","f7576827":"code","be2add51":"code","ae6ae4de":"code","9369226e":"code","4fbbf229":"code","143106f4":"code","23819cd0":"code","601c13d3":"code","aab7acbb":"code","9671dba4":"code","8ce42491":"code","a8b13cf3":"code","32bf3078":"code","9540246b":"code","4bfd7bfa":"code","f1ead869":"code","a0e8e8a1":"code","96eb0cb5":"code","7e1ff826":"code","de959d7d":"code","98a05848":"code","30b053e4":"code","f0c619ab":"code","6fc5c62a":"code","02b9a9f4":"code","b5216c07":"code","bac93b5b":"code","6d7b10c9":"code","07ed3eec":"code","46e54de8":"code","f94cfd6a":"code","004faaad":"code","46289c20":"markdown","109fd9fe":"markdown","2e49da1e":"markdown","8a73d03c":"markdown","f6bdfb5b":"markdown","f4858686":"markdown","bd9b154f":"markdown","4cef735b":"markdown","1e4439c8":"markdown"},"source":{"01c075aa":"# Import Libraries for Data Preparation and Exploration & Visualization\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","ffd69dc6":"#Import Train and Test Data\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","6ceb4c68":"#Explore Raw Train Data 1\ntrain.head()","005fb6b8":"#Explore Raw Train Data 2\ntrain.info()","1376d67f":"#Explore Raw Train Data 3\ntrain.describe().transpose()","7b860294":"#Check Missing Data for Train\ntrain_na_per = train.isna().sum() \/ len(train) * 100\ntrain_na_per = train_na_per[train_na_per > 0]\ntrain_na_per.sort_values(ascending=False)","82c94f2c":"#Explore Raw Test Data 1\ntest.head()","8f027a16":"#Explore Raw Test Data 2\ntest.info()","719cbcba":"#Explore Raw Test Data 3\ntest.describe().transpose()","1bd833f4":"#Check Missing Data for Test\ntest_na_per = test.isna().sum() \/ len(test) * 100\ntest_na_per = test_na_per[test_na_per > 0]\ntest_na_per.sort_values(ascending=False)","c640ca1c":"#Fill Missing Data for Train (This process will be done for Test after Feature Selection)\ntrain[\"PoolQC\"] = train[\"PoolQC\"].fillna(\"None\")\ntrain[\"MiscFeature\"] = train[\"MiscFeature\"].fillna(\"None\")\ntrain[\"Alley\"] = train[\"Alley\"].fillna(\"None\")\ntrain[\"Fence\"] = train[\"Fence\"].fillna(\"None\")\ntrain[\"FireplaceQu\"] = train[\"FireplaceQu\"].fillna(\"None\")\ntrain[\"LotFrontage\"] = train[\"LotFrontage\"].fillna(0)\n\nfor col in (\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"):\n    train[col] = train[col].fillna('None')\ntrain[\"GarageYrBlt\"] = train[\"GarageYrBlt\"].fillna(0)\n\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    train[col] = train[col].fillna('None')\n\ntrain[\"MasVnrType\"] = train[\"MasVnrType\"].fillna(\"None\")\ntrain[\"MasVnrArea\"] = train[\"MasVnrArea\"].fillna(0)\ntrain['Electrical'] = train['Electrical'].fillna(train['Electrical'].mode()[0])","e66c572a":"#Test the Filling Process\ntrain_na_per = train.isna().sum() \/ len(train) * 100\ntrain_na_per = train_na_per[train_na_per > 0]\ntrain_na_per.sort_values(ascending=False)","058f0a71":"#Corelation Matrix\ncorr = train.corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(corr)","e741621c":"#Corelation Values for \"SalePrice\"\ncorr[\"SalePrice\"].sort_values(ascending=False)","3bd55fd6":"#Select Top 10 Relevent Features\ntrain_col = corr[\"SalePrice\"].sort_values(ascending=False).head(11).index\ntrain_col =list(train_col)","5794a4a4":"#Explore Test Data 1\ntrain_10 = train[train_col]\ntrain_10.head()","9e8a5d5c":"#Explore Test Data 2\ntrain_10.info()","c3ce606d":"#Explore Test Data 3\ntrain_10.describe().transpose()","521501c9":"#Corelation Matrix for Train\ncorr_10 = train_10.corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(corr_10)","f7576827":"#Explore Features Pairwise\nsns.pairplot(train_10)","be2add51":"sns.scatterplot(x=\"GrLivArea\", y=\"SalePrice\", data=train_10)","ae6ae4de":"GrLivArea_outliers = train_10[(train_10[\"GrLivArea\"] > 4000) & (train_10[\"SalePrice\"] < 300000)].index\ntrain_10.drop(GrLivArea_outliers, inplace=True)\n\nsns.scatterplot(x=\"GrLivArea\", y=\"SalePrice\", data=train_10)","9369226e":"sns.scatterplot(x=\"GarageArea\", y=\"SalePrice\", data=train_10)","4fbbf229":"sns.scatterplot(x=\"TotalBsmtSF\", y=\"SalePrice\", data=train_10)","143106f4":"sns.scatterplot(x=\"1stFlrSF\", y=\"SalePrice\", data=train_10)","23819cd0":"sns.distplot(train_10[\"SalePrice\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10[\"SalePrice\"], plot=plt)","601c13d3":"train_10[\"SalePrice\"] = np.log(train_10[\"SalePrice\"])\nsns.distplot(train_10[\"SalePrice\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10[\"SalePrice\"], plot=plt)","aab7acbb":"sns.distplot(train_10[\"GrLivArea\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10[\"GrLivArea\"], plot=plt)","9671dba4":"train_10[\"GrLivArea\"] = np.log(train_10[\"GrLivArea\"])\nsns.distplot(train_10[\"GrLivArea\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10[\"GrLivArea\"], plot=plt)","8ce42491":"sns.distplot(train_10[\"1stFlrSF\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10[\"1stFlrSF\"], plot=plt)","a8b13cf3":"train_10[\"1stFlrSF\"] = np.log(train_10[\"1stFlrSF\"])\nsns.distplot(train_10[\"1stFlrSF\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10[\"1stFlrSF\"], plot=plt)","32bf3078":"sns.distplot(train_10[\"GarageArea\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10[\"GarageArea\"], plot=plt)","9540246b":"train_10.loc[train_10[\"GarageArea\"]==0,\"GarageArea\"] = 1\ntrain_10[\"GarageArea\"] = np.log(train_10[\"GarageArea\"])\nsns.distplot(train_10.loc[train_10[\"GarageArea\"]>0,\"GarageArea\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10.loc[train_10[\"GarageArea\"]>0,\"GarageArea\"], plot=plt)","4bfd7bfa":"sns.distplot(train_10[\"TotalBsmtSF\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10[\"TotalBsmtSF\"], plot=plt)","f1ead869":"train_10.loc[train_10[\"TotalBsmtSF\"]==0,\"TotalBsmtSF\"] = 1\ntrain_10[\"TotalBsmtSF\"] = np.log(train_10[\"TotalBsmtSF\"])\nsns.distplot(train_10.loc[train_10[\"TotalBsmtSF\"]>0,\"TotalBsmtSF\"], fit=stats.norm)\nplt.show()\nstats.probplot(train_10.loc[train_10[\"TotalBsmtSF\"]>0,\"TotalBsmtSF\"], plot=plt)","a0e8e8a1":"#Explore Final Train Data 1\ntrain_10.head()","96eb0cb5":"test_col = train_col[1:]\ntest_10 = test[test_col]\ntest_10.info()","7e1ff826":"test_10.describe().transpose()","de959d7d":"test_10[\"GarageCars\"] = test_10[\"GarageCars\"].fillna(0)\ntest_10[\"GarageArea\"] = test_10[\"GarageArea\"].fillna(0)\ntest_10[\"TotalBsmtSF\"] = test_10[\"TotalBsmtSF\"].fillna(test_10[\"TotalBsmtSF\"].mean())\n\ntest_10[\"GrLivArea\"] = np.log(test_10[\"GrLivArea\"])\ntest_10[\"1stFlrSF\"] = np.log(test_10[\"1stFlrSF\"])\ntest_10.loc[test_10[\"GarageArea\"]==0,\"GarageArea\"] = 1\ntest_10[\"GarageArea\"] = np.log(test_10[\"GarageArea\"])\ntest_10.loc[test_10[\"TotalBsmtSF\"]==0,\"TotalBsmtSF\"] = 1\ntest_10[\"TotalBsmtSF\"] = np.log(test_10[\"TotalBsmtSF\"])","98a05848":"#Explore Final Test Data 1\ntest_10.head()","30b053e4":"# Import Libraries for Expetimentation & Prediction\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics","f0c619ab":"#Create Target Feature\nX = train_10.drop(columns=[\"SalePrice\"])\ny = train_10[\"SalePrice\"]","6fc5c62a":"#Separate Train and Test Set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)","02b9a9f4":"#Train the Linear Regression Model\nlm = LinearRegression()\nlm.fit(X_train,y_train)","b5216c07":"#Check the Coefficients\ncoeff_df = pd.DataFrame(lm.coef_,X.columns,columns=['Coefficient'])\ncoeff_df","bac93b5b":"#Plot the Prediction and Actual Values\npredictions = lm.predict(X_test)\nplt.scatter(y_test,predictions)\nplt.show()\nsns.distplot((y_test-predictions),bins=50);","6d7b10c9":"#Test results\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","07ed3eec":"lm_final = LinearRegression()\nlm.fit(train_10.drop(columns=[\"SalePrice\"]),train_10[\"SalePrice\"])","46e54de8":"predictions_final = lm.predict(test_10)\npredictions_final = np.expm1(predictions_final)\npredictions_final = pd.DataFrame(predictions_final, columns=[\"SalePrice\"])\npredictions_final","f94cfd6a":"submission = pd.DataFrame()\nsubmission[\"Id\"] = test[\"Id\"]\nsubmission[\"SalePrice\"] = predictions_final\nsubmission","004faaad":"submission.to_csv('submission.csv',index=False)","46289c20":"# House Price Prediction\nBertan Imre","109fd9fe":"Submission","2e49da1e":"Possible Progress: \n<br>Complex Machine Learning Algorithms\n<br>Novel Feature Engineering\n<br>Comprehensive EDA \n\n<br>Reference Code:\n<br>https:\/\/www.kaggle.com\/juliencs\/a-study-on-regression-applied-to-the-ames-dataset\n<br>https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python","8a73d03c":"Apply the Same Procedure for Test Data","f6bdfb5b":"Explore Numeric Data and Hanlde Outliars (Even if other features are numeric, they are categorical features) ","f4858686":"# Data Preparation and Exploration & Visualization","bd9b154f":"# Expetimentation & Prediction","4cef735b":"Validation with Train Data","1e4439c8":"Covert Numerical Data to Logarithmic Scale"}}