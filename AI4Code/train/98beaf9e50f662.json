{"cell_type":{"cbac1f5d":"code","9e3ecaa1":"code","fbaebebd":"code","551a823d":"code","d99d4fce":"code","a72c704a":"code","2e0b0f8b":"code","3afaf07a":"code","1300d2e2":"code","9473ab2e":"code","d678f3f7":"code","722c361a":"code","7e225474":"code","71c03759":"code","2c003d14":"code","f27797e9":"code","503c40b0":"code","9a541d06":"code","ba9bd2ea":"code","0d28f2b5":"code","04036ff4":"code","f6954313":"code","e7fcdac3":"code","daa54f15":"code","db0e61ca":"code","c546b85a":"markdown","952ac5a1":"markdown","408ac8ea":"markdown","c4fc9016":"markdown","741a5b9e":"markdown","31348b3d":"markdown","5b6a3343":"markdown","86a4d6d7":"markdown","77a8fcec":"markdown","c5b415d5":"markdown","bad0fc57":"markdown","3ac5860b":"markdown","2bb7fae7":"markdown"},"source":{"cbac1f5d":"# # Crash on purpose to get more ram :\n# import torch\n# torch.tensor([10.]*10000000000)","9e3ecaa1":"VERSION = \"nightly\"  #@param [\"1.5\" , \"20200325\", \"nightly\"]\n!curl https:\/\/raw.githubusercontent.com\/pytorch\/xla\/master\/contrib\/scripts\/env-setup.py -o pytorch-xla-env-setup.py\n!python pytorch-xla-env-setup.py --version $VERSION","fbaebebd":"!git clone https:\/\/github.com\/huggingface\/transformers.git\n!pip install .\/transformers\n!pip install nlp","551a823d":"import torch\nimport nlp\nfrom transformers import T5Tokenizer","d99d4fce":"tokenizer = T5Tokenizer.from_pretrained('t5-small')","a72c704a":"# process the examples in input and target text format and the eos token at the end \ndef add_eos_to_examples(example):\n    example['input_text'] = 'question: %s  context: %s <\/s>' % (example['question'], example['context'])\n    example['target_text'] = '%s <\/s>' % example['answers']['text'][0]\n    return example\n\n# tokenize the examples\ndef convert_to_features(example_batch):\n    input_encodings = tokenizer.batch_encode_plus(example_batch['input_text'], pad_to_max_length=True, max_length=512)\n    target_encodings = tokenizer.batch_encode_plus(example_batch['target_text'], pad_to_max_length=True, max_length=16)\n\n    encodings = {\n        'input_ids': input_encodings['input_ids'], \n        'attention_mask': input_encodings['attention_mask'],\n        'labels': target_encodings['input_ids'],\n        'decoder_attention_mask': target_encodings['attention_mask']\n    }\n\n    return encodings","2e0b0f8b":"# load train and validation split of squad\n# train_dataset  = nlp.load_dataset('squad', split=nlp.Split.TRAIN)\n# valid_dataset = nlp.load_dataset('squad', split=nlp.Split.VALIDATION)\nfrom datasets import load_dataset\ntrain_dataset  =load_dataset('squad', split=nlp.Split.TRAIN)\nvalid_dataset = load_dataset('squad', split=nlp.Split.VALIDATION)\n\n# map add_eos_to_examples function to the dataset example wise \ntrain_dataset = train_dataset.map(add_eos_to_examples)\n# map convert_to_features batch wise\ntrain_dataset = train_dataset.map(convert_to_features, batched=True)\n\nvalid_dataset = valid_dataset.map(add_eos_to_examples, load_from_cache_file=False)\nvalid_dataset = valid_dataset.map(convert_to_features, batched=True, load_from_cache_file=False)\n\n\n# set the tensor type and the columns which the dataset should return\ncolumns = ['input_ids', 'labels', 'attention_mask', 'decoder_attention_mask']\ntrain_dataset.set_format(type='torch', columns=columns)\nvalid_dataset.set_format(type='torch', columns=columns)","3afaf07a":"len(train_dataset), len(valid_dataset)","1300d2e2":"train_dataset","9473ab2e":"# cach the dataset, so we can load it directly for training\n\ntorch.save(train_dataset, 'train_data.pt')\ntorch.save(valid_dataset, 'valid_data.pt')","d678f3f7":"import dataclasses\nimport logging\nimport os\nimport sys\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Optional\n\nimport numpy as np\nimport torch\n\nfrom transformers import T5ForConditionalGeneration, T5Tokenizer, EvalPrediction\nfrom transformers import (\n    HfArgumentParser,\n    DataCollator,\n    Trainer,\n    TrainingArguments,\n    set_seed,\n)\n\n\nlogger = logging.getLogger(__name__)\n\n# prepares lm_labels from target_ids, returns examples with keys as expected by the forward method\n# this is necessacry because the trainer directly passes this dict as arguments to the model\n# so make sure the keys match the parameter names of the forward method\n@dataclass\nclass T2TDataCollator():\n    def __call__(self, batch: List) -> Dict[str, torch.Tensor]:\n        \"\"\"\n        Take a list of samples from a Dataset and collate them into a batch.\n        Returns:\n            A dictionary of tensors\n        \"\"\"\n        input_ids = torch.stack([example['input_ids'] for example in batch])\n        lm_labels = torch.stack([example['labels'] for example in batch])\n        lm_labels[lm_labels[:, :] == 0] = -100\n        attention_mask = torch.stack([example['attention_mask'] for example in batch])\n        decoder_attention_mask = torch.stack([example['decoder_attention_mask'] for example in batch])\n        \n\n        return {\n            'input_ids': input_ids, \n            'attention_mask': attention_mask,\n            'labels': lm_labels, \n            'decoder_attention_mask': decoder_attention_mask\n        }\n\n\n@dataclass\nclass ModelArguments:\n    \"\"\"\n    Arguments pertaining to which model\/config\/tokenizer we are going to fine-tune from.\n    \"\"\"\n\n    model_name_or_path: str = field(\n        metadata={\"help\": \"Path to pretrained model or model identifier from huggingface.co\/models\"}\n    )\n    tokenizer_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n    )\n    cache_dir: Optional[str] = field(\n        default=None, metadata={\"help\": \"Where do you want to store the pretrained models downloaded from s3\"}\n    )\n\n@dataclass\nclass DataTrainingArguments:\n    \"\"\"\n    Arguments pertaining to what data we are going to input our model for training and eval.\n    \"\"\"\n    train_file_path: Optional[str] = field(\n        default='train_data.pt',\n        metadata={\"help\": \"Path for cached train dataset\"},\n    )\n    valid_file_path: Optional[str] = field(\n        default='valid_data.pt',\n        metadata={\"help\": \"Path for cached valid dataset\"},\n    )\n    max_len: Optional[int] = field(\n        default=512,\n        metadata={\"help\": \"Max input length for the source text\"},\n    )\n    target_max_len: Optional[int] = field(\n        default=32,\n        metadata={\"help\": \"Max input length for the target text\"},\n    )\n\n\ndef main():\n    # See all possible arguments in src\/transformers\/training_args.py\n    # or by passing the --help flag to this script.\n    # We now keep distinct sets of args, for a cleaner separation of concerns.\n\n    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n\n    # we will load the arguments from a json file, \n    #make sure you save the arguments in at .\/args.json\n    model_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath('args.json'))\n\n    if (\n        os.path.exists(training_args.output_dir)\n        and os.listdir(training_args.output_dir)\n        and training_args.do_train\n        and not training_args.overwrite_output_dir\n    ):\n        raise ValueError(\n            f\"Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.\"\n        )\n\n    # Setup logging\n    logging.basicConfig(\n        format=\"%(asctime)s - %(levelname)s - %(name)s -   %(message)s\",\n        datefmt=\"%m\/%d\/%Y %H:%M:%S\",\n        level=logging.INFO if training_args.local_rank in [-1, 0] else logging.WARN,\n    )\n    logger.warning(\n        \"Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s\",\n        training_args.local_rank,\n        training_args.device,\n        training_args.n_gpu,\n        bool(training_args.local_rank != -1),\n        training_args.fp16,\n    )\n    logger.info(\"Training\/evaluation parameters %s\", training_args)\n\n    # Set seed\n    set_seed(training_args.seed)\n\n    # Load pretrained model and tokenizer\n    #\n    # Distributed training:\n    # The .from_pretrained methods guarantee that only one local process can concurrently\n    # download model & vocab.\n\n    tokenizer = T5Tokenizer.from_pretrained(\n        model_args.tokenizer_name if model_args.tokenizer_name else model_args.model_name_or_path,\n        cache_dir=model_args.cache_dir,\n    )\n    model = T5ForConditionalGeneration.from_pretrained(\n        model_args.model_name_or_path,\n        cache_dir=model_args.cache_dir,\n    )\n\n    # Get datasets\n    print('loading data')\n    train_dataset  = torch.load(data_args.train_file_path)\n    valid_dataset = torch.load(data_args.valid_file_path)\n    print('loading done')\n\n    # Initialize our Trainer\n    trainer = Trainer(\n        model=model,\n        args=training_args,\n        train_dataset=train_dataset,\n        eval_dataset=valid_dataset,\n        data_collator=T2TDataCollator()\n    )\n\n    # Training\n    if training_args.do_train:\n        trainer.train(\n            model_path=model_args.model_name_or_path if os.path.isdir(model_args.model_name_or_path) else None\n        )\n        trainer.save_model()\n        # For convenience, we also re-save the tokenizer to the same directory,\n        # so that you can share your model easily on huggingface.co\/models =)\n#         if trainer.is_world_master():\n#             tokenizer.save_pretrained(training_args.output_dir)\n\n    # Evaluation\n    results = {}\n    if training_args.do_eval and training_args.local_rank in [-1, 0]:\n        logger.info(\"*** Evaluate ***\")\n\n        eval_output = trainer.evaluate()\n\n        output_eval_file = os.path.join(training_args.output_dir, \"eval_results.txt\")\n        with open(output_eval_file, \"w\") as writer:\n            logger.info(\"***** Eval results *****\")\n            for key in sorted(eval_output.keys()):\n                logger.info(\"  %s = %s\", key, str(eval_output[key]))\n                writer.write(\"%s = %s\\n\" % (key, str(eval_output[key])))\n    \n        results.update(eval_output)\n    \n    return results\n\n\ndef _mp_fn(index):\n    # For xla_spawn (TPUs)\n    main()","722c361a":"import json","7e225474":"args_dict = {\n  \"num_cores\": 1,\n  \"model_name_or_path\": 't5-small',\n  \"max_len\": 512 ,\n  \"target_max_len\": 16,\n  \"output_dir\": '.\/models\/tpu',\n  \"overwrite_output_dir\": True,\n  \"per_gpu_train_batch_size\": 4,\n  \"per_gpu_eval_batch_size\": 4,\n  \"gradient_accumulation_steps\": 4,\n  \"learning_rate\": 1e-4,\n  \"tpu_num_cores\": 8,\n  \"num_train_epochs\": 1,\n  \"do_train\": True,\n  \"save_strategy\":\"epoch\",\n  \"prediction_loss_only\":True\n}","71c03759":"with open('args.json', 'w') as f:\n  json.dump(args_dict, f)","2c003d14":"import torch_xla.distributed.xla_multiprocessing as xmp","f27797e9":"os.environ[\"WANDB_DISABLED\"] = \"true\"","503c40b0":"xmp.spawn(_mp_fn, args=(), nprocs=1, start_method='fork')","9a541d06":"## SQuAD evaluation script. Modifed slightly for this notebook\n\nfrom __future__ import print_function\nfrom collections import Counter\nimport string\nimport re\nimport argparse\nimport json\nimport sys\n\n\ndef normalize_answer(s):\n    \"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"\n    def remove_articles(text):\n        return re.sub(r'\\b(a|an|the)\\b', ' ', text)\n\n    def white_space_fix(text):\n        return ' '.join(text.split())\n\n    def remove_punc(text):\n        exclude = set(string.punctuation)\n        return ''.join(ch for ch in text if ch not in exclude)\n\n    def lower(text):\n        return text.lower()\n\n    return white_space_fix(remove_articles(remove_punc(lower(s))))\n\n\ndef f1_score(prediction, ground_truth):\n    prediction_tokens = normalize_answer(prediction).split()\n    ground_truth_tokens = normalize_answer(ground_truth).split()\n    common = Counter(prediction_tokens) & Counter(ground_truth_tokens)\n    num_same = sum(common.values())\n    if num_same == 0:\n        return 0\n    precision = 1.0 * num_same \/ len(prediction_tokens)\n    recall = 1.0 * num_same \/ len(ground_truth_tokens)\n    f1 = (2 * precision * recall) \/ (precision + recall)\n    return f1\n\n\ndef exact_match_score(prediction, ground_truth):\n    return (normalize_answer(prediction) == normalize_answer(ground_truth))\n\n\ndef metric_max_over_ground_truths(metric_fn, prediction, ground_truths):\n    scores_for_ground_truths = []\n    for ground_truth in ground_truths:\n        score = metric_fn(prediction, ground_truth)\n        scores_for_ground_truths.append(score)\n    return max(scores_for_ground_truths)\n\n\ndef evaluate(gold_answers, predictions):\n    f1 = exact_match = total = 0\n\n    for ground_truths, prediction in zip(gold_answers, predictions):\n      total += 1\n      exact_match += metric_max_over_ground_truths(\n                    exact_match_score, prediction, ground_truths)\n      f1 += metric_max_over_ground_truths(\n          f1_score, prediction, ground_truths)\n    \n    exact_match = 100.0 * exact_match \/ total\n    f1 = 100.0 * f1 \/ total\n\n    return {'exact_match': exact_match, 'f1': f1}","ba9bd2ea":"import torch\nimport torch_xla\nimport torch_xla.core.xla_model as xm\n\nimport nlp\nfrom transformers import T5ForConditionalGeneration, T5Tokenizer\n\nfrom tqdm.auto import tqdm","0d28f2b5":"model = T5ForConditionalGeneration.from_pretrained('.\/models\/tpu').to('cpu') # because its loaded on xla by default\ntokenizer = T5Tokenizer.from_pretrained('t5-small')","04036ff4":"valid_dataset = torch.load('valid_data.pt')\ndataloader = torch.utils.data.DataLoader(valid_dataset, batch_size=32)","f6954313":"answers = []\nfor batch in tqdm(dataloader):\n  outs = model.generate(input_ids=batch['input_ids'], \n                        attention_mask=batch['attention_mask'],\n                        max_length=16,\n                        early_stopping=True)\n  outs = [tokenizer.decode(ids) for ids in outs]\n  answers.extend(outs)","e7fcdac3":"predictions = []\nreferences = []\nfor ref, pred in zip(valid_dataset['answers'], answers):\n  pred = pred.replace(\"<pad>\", \"\").replace(\"<\/s>\", \"\").rstrip().lstrip()\n  predictions.append(pred)\n  references.append(ref['text'])","daa54f15":"predictions[1], references[1]","db0e61ca":"evaluate(references, predictions)","c546b85a":"## Load and process data","952ac5a1":"## Train","408ac8ea":"Let's install [PyTorch\/XLA](https:\/\/github.com\/pytorch\/xla) which enables PyTorch on TPU. Make sure you install the nightly version, as the trainer breaks on other versions.","c4fc9016":"In this notebook we will see how to train T5 model on TPU with Huggingface's awesome new [trainer](https:\/\/github.com\/huggingface\/transformers\/blob\/master\/src\/transformers\/trainer.py). We will train T5 base model on SQUAD dataset for QA task. We will use the recently released amazing [nlp](https:\/\/github.com\/huggingface\/nlp) package to load and process the dataset in just few lines.\n\nFirst make sure you are connected to the high RAM instance. This will not work on 12 GB colab instance.","741a5b9e":"## Write training script","31348b3d":"## Eval","5b6a3343":"Let's write the arguments in a dict and store in a json file. The above code will load this file and parse the arguments.","86a4d6d7":"# T5 on TPU \ud83d\udca5\ud83d\ude80","77a8fcec":"Let's load and process the dataset using the nlp library. We will process the examples in follwoing way to cast QA task in text-to-text setting\n\n**input**\nquestion: question_text  context: context \n\n**target**\nanswer_text","c5b415d5":"Using the `Trainer` is pretty straightforward. Here are the 4 basic steps which are needed to use trainer.\n\n1. **Parse the arguments needed**. These are divided in 3 parts for clarity and seperation (TrainingArguments, ModelArguments and DataTrainingArguments).\n\n  1. **TrainingArguments**: These are basicaly the training hyperparameters such as learning rate, batch size, weight decay, gradient accumulation steps etc. See all possible arguments [here](https:\/\/github.com\/huggingface\/transformers\/blob\/master\/src\/transformers\/training_args.py). These are used by the Trainer.\n\n  2. **ModelArguments**: These are the arguments for the model that you want to use such as the model_name_or_path, tokenizer_name etc. You'll need these to load the model and tokenizer.\n\n  3. **DataTrainingArguments**: These are as the name suggests arguments needed for the dataset. Such as the directory name where your files are stored etc. You'll need these to load\/process the dataset.\n\n  TrainingArguments are already defined in the `TrainingArguments` class, you'll need to define `ModelArguments` and `DataTrainingArguments` classes for your task.\n\n\n\n\n2. Load train and eval datasets\n3. Initialize the `Trainer`\n\n    These are the mininum parameters which you'll for initializing `Trainer`. For full list check [here](https:\/\/github.com\/huggingface\/transformers\/blob\/master\/src\/transformers\/trainer.py#L107)\n\n    ```\n      model: PreTrainedModel\n      args: TrainingArguments\n      train_dataset: Optional[Dataset]\n      eval_dataset: Optional[Dataset]\n    ```\n4. Start training with  `trainer.train`\n\n    Call `trainer.train` and let the magic begin!\n\n\nThere are lots of things which the trainer handles for you out of the box such as gradient_accumulation, fp16 training, setting up the optimizer and scheduler, logging with wandb etc. I didn't set-up wandb for this experiment, but will explore it for sure in future experiment.","bad0fc57":"Install transformers and the nlp package. Restart colab after this","3ac5860b":"Start training!","2bb7fae7":"There are two gotchas here. First the metrics functionality in the nlp package is still work-in-progress so we will use the official squad evaluation script. Second, for some reason which I couldn't figure out, the `.generate` method is not working on TPU so will need to do prediction on CPU. For predicting the validation set it almost takes 40 mins."}}