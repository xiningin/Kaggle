{"cell_type":{"acc132b8":"code","2be95377":"code","49799a44":"code","ae62cd6a":"code","3fd01e42":"code","aad3c494":"code","c7f4119f":"code","f3dc8b49":"code","f4d04f3a":"code","9c1b1bc7":"code","58875a38":"code","e3b3d6ea":"code","3e968b6a":"code","8f9dbe3b":"code","18818672":"code","97255e6e":"code","b51d7190":"code","a20fcbe1":"code","4eec3ed2":"code","e2eb4f73":"markdown","a3a4fea5":"markdown","e2a65643":"markdown","1356e4ae":"markdown","fb33b0b3":"markdown","7341bda4":"markdown","7ba2436a":"markdown","6a5771c0":"markdown","03b6ac5d":"markdown"},"source":{"acc132b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#seaborn\nimport seaborn as sns\n\n# plotly\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\n#World Cloud\nfrom wordcloud import WordCloud\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2be95377":"data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')","49799a44":"data.info()","ae62cd6a":"data.head(10)","3fd01e42":"data.shape","aad3c494":"data.columns","c7f4119f":"sample_cols = ['ID', 'Name', 'Age', 'Nationality',\n       'Overall', 'Potential', 'Club', 'Value', 'Wage',\n       'Preferred Foot', 'International Reputation', 'Weak Foot',\n       'Skill Moves', 'Work Rate', 'Position', 'Contract Valid Until',\n       'Height', 'Weight',]\n\nsample_data = data[sample_cols]\n\nsample_data.head()","f3dc8b49":"sample_data.info()","f4d04f3a":"sample_data.isnull().sum() \/ len(sample_data)","9c1b1bc7":"sample_data = sample_data.dropna()","58875a38":"sample_data.shape","e3b3d6ea":"fig,(ax1,ax2) = plt.subplots(1,2 , figsize=(15,5))\n\nsns.countplot('Preferred Foot' , data = sample_data , ax = ax1).set_title('Preferred Foot Dist.')\nsns.distplot(sample_data['Overall'] , ax=ax2).set_title('Overall Score')\n","3e968b6a":"fig,(ax3,ax4) = plt.subplots(1,2 , figsize=(25,10))\n\n\nsns.countplot(y = 'Nationality' , data = sample_data.loc[:100,:] , ax = ax3).set_title('Nationality of Players')\n# Second Graph was sorted by the value counts \nsns.countplot(y = 'Club' , data = sample_data.loc[:100,:] , order = sample_data.loc[:100,'Club'].value_counts().index, palette = 'PuBuGn_d', ax = ax4).set_title('Club of Footballers')\n\nplt.savefig('horizontal.png')","8f9dbe3b":"#Top100 Players Country distribution\n\ndftop = sample_data.loc[:100,:]\n\nplt.subplots(figsize=(12,12))\n\nwordcloud = WordCloud(background_color = 'white',\n                     width = 512,\n                     height = 384).generate(' '.join(dftop['Nationality']))\n\nplt.imshow(wordcloud)\n\nplt.axis('off')\n\n\nplt.show()\n\nplt.savefig('wordcloud.png')","18818672":"datatop300 = sample_data.loc[:300,:]\ndatatop300['Value'] = pd.Series(float(i[1:-1]) for i in datatop300['Value'])\n\ndata1 = go.Box(\n    y=datatop300.loc[:100,'Value'],\n    name = 'Value of Top100 Players',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\n\ndata2 = go.Box(\n    y=datatop300.loc[100:200,'Value'],\n    name = 'Value of Top 100~200 Players',\n    marker = dict(\n        color = 'rgb(12, 140, 12)',\n    )\n)\n\ndata3 = go.Box(\n    y=datatop300.loc[200:300,'Value'],\n    name = 'Value of top 200~300 Players',\n    marker = dict(\n        color = 'rgb(140, 12, 12)',\n    )\n)\n\ndata = [data1,data2,data3]\niplot(data)\n\nplt.savefig('box.png')\n","97255e6e":"plt.subplots(figsize=(15,5))\nsns.countplot('Position', data=datatop300 ,hue = 'Preferred Foot', order = datatop300['Position'].value_counts().index , palette = 'winter_r')\nplt.xticks(rotation=90)\n\nplt.savefig('vertical.png')","b51d7190":"fig = plt.subplots(figsize=(15,10))\nsns.violinplot(x = 'Preferred Foot' , y = 'Value', data = datatop300 ,inner = 'quartile' , palette ='Set3')\n\nplt.savefig('violin.png')","a20fcbe1":"plt.subplots(figsize=(10,5))\nsns.scatterplot (x = 'Age' , y = 'Value' , data = datatop300, color = 'red' , marker = '+')","4eec3ed2":"labels= dftop['Nationality'].value_counts().index\n\nsizes = dftop['Nationality'].value_counts().values\nplt.figure(figsize = (15,15))\nplt.pie(sizes,  labels=labels, autopct='%1.1f%%')\nplt.show()","e2eb4f73":"# WordCloud\n\nYou can find detailed informations about WordCloud in this [link](https:\/\/amueller.github.io\/word_cloud)","a3a4fea5":"# Scatter Plot\n\nThis is the relaional plot . And generally i am using for to find distribution patterns.\n\n### we used scatter plot to understand the value age relationship","e2a65643":"# Violin Plot\n\n* x, y, huenames of variables in data or vector data, optional. Inputs for plotting long-form data. See examples for interpretation.\n* dataDataFrame, array, or list of arrays, optional\n* inner{\u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None}, optional. Representation of the datapoints in the violin interior. If box, draw a miniature boxplot. If quartiles, draw the quartiles of the distribution. If point or stick, show each underlying datapoint. Using None will draw unadorned violins.\n* palettepalette name, list, or dict, optional. Colors to use for the different levels of the hue variable. Should be something that can be interpreted by color_palette(), or a dictionary mapping hue levels to matplotlib colors.","1356e4ae":"# Take a sample from raw data for visualization","fb33b0b3":"## Introduction about this Notebook\n\nThis notebook contains examples from libraries used to visualize data such as seaborn, plotly. Your comments and advices are very important for me to improve myself.\n","7341bda4":"# **subplots**\n\n*  using the variable ax for single a Axes\n        fig, ax = plt.subplots()\n\n*  using the variable axs for multiple Axes\n       fig, axs = plt.subplots(2, 2)\n\n* using tuple unpacking for multiple Axes\n       fig, (ax1, ax2) = plt.subplot(1, 2)\n       fig, ((ax1, ax2), (ax3, ax4)) = plt.subplot(2, 2)","7ba2436a":"# BoxPlot\n\n*  Analysis Value of top300 players.\n*  BoxPlot from the Pyplot library was used. It is very useful cuz It makes the graphs more understandable.\n*  Value distribution by player ranking range. (0~100 , 100~200 , 200~300)\n*  BoxPlots are useful to understand description of data. You can see the quartiles (25% , 75% , Median) of data and also you can detect outliers easily with this plot.\n\n![image.png](attachment:image.png)","6a5771c0":"# First meeting with data\n","03b6ac5d":"# Pie Chart\n\nThis pie chart sample shows us Nationality distribution of top 100 Players "}}