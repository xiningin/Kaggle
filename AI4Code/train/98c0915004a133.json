{"cell_type":{"e50f6ede":"code","0e97c556":"code","57e58b32":"code","dd50d045":"code","e6338551":"code","7312152c":"code","019dcd2e":"code","4f177e74":"code","4a3d6a36":"code","3c5296d1":"code","ec551674":"code","31d54957":"code","c7d404e8":"code","d39baa9a":"code","7aa3c345":"code","bc292b63":"code","0faa21b2":"code","dc9c8ce0":"code","b0932071":"code","83a51514":"code","72210366":"code","c06e689a":"code","6bf6f891":"code","0168aa4a":"code","6ae44a36":"code","12c1d765":"code","586c4e3f":"code","376de65d":"markdown","295d4654":"markdown","eb4356aa":"markdown","50cbd38c":"markdown","951ae505":"markdown","e4e9ae11":"markdown","f9570a78":"markdown","1063a4bd":"markdown","9775c436":"markdown","813ace2d":"markdown","a9852ee5":"markdown"},"source":{"e50f6ede":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\n\n# plots\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# maps\nimport folium","0e97c556":"# load and remove redundancies\ndf = pd.read_csv('..\/input\/air-quality-belgium\/data.csv', sep=';')\ndf = df.drop('Country', axis=1) # Country is always Belgium\ndf = df.drop('Country Code', axis=1) # Country Code is always BE\ndf = df.drop('Source Name', axis=1) # Source name is always EEA Belgium\ndf = df.drop('Unit', axis=1) # Unit is always \\mu g\/m^3\ndf.head()","57e58b32":"# aux functions for extracting the coordinates\ndef split_lat(coordinates):\n    lat = coordinates.split(',')[0]\n    return float(lat)\n\ndef split_lon(coordinates):\n    lon = coordinates.split(',')[1]\n    return float(lon)","dd50d045":"# extract lat\/lon\ndf['Longitude'] = list(map(split_lon, df.Coordinates))\ndf['Latitude'] = list(map(split_lat, df.Coordinates))\ndf = df.drop('Coordinates', axis=1)","e6338551":"# date handling\ndf['Date'] = pd.to_datetime(df['Last Updated'], format='%Y-%m-%d')\ndf['Year'] = list(map(lambda x: int(x.year), df.Date))","7312152c":"# summary\ndf.describe(include='all')","019dcd2e":"pollutants = list(df.Pollutant.value_counts().index)\nprint(pollutants)","4f177e74":"# count frequencies\ndf.Pollutant.value_counts()","4a3d6a36":"# cities\nplt.figure(figsize=(9,5))\ndf.City.value_counts().plot(kind='bar')\nplt.title('City')\nplt.grid()\nplt.show()","3c5296d1":"# locations - top 25\nplt.figure(figsize=(9,5))\ndf.Location.value_counts()[0:25].plot(kind='bar')\nplt.title('Location')\nplt.grid()\nplt.show()","ec551674":"# last update\nplt.figure(figsize=(9,5))\ndf.Date.value_counts()[0:25].plot(kind='bar')\nplt.title('Last Updated')\nplt.grid()\nplt.show()","31d54957":"# year\nplt.figure(figsize=(9,5))\ndf.Year.value_counts().sort_index().plot(kind='bar')\nplt.title('Year (last updated)')\nplt.grid()\nplt.show()","c7d404e8":"# plot distributions of pollutants\nfor p in pollutants:\n    df_temp = df[df.Pollutant==p]\n    plt.figure()\n    v = df_temp.Value.plot(kind='hist')\n    plt.title(p)\n    plt.grid()\n    plt.show()","d39baa9a":"# plot distributions of pollutants - compare 2020 with previous years\nfor p in pollutants:\n    df_temp_1 = df[(df.Pollutant==p) & (df.Year<2020)]\n    df_temp_2 = df[(df.Pollutant==p) & (df.Year==2020)]\n    plt.figure(figsize=(9,4))\n    ax1 = plt.subplot(1,2,1)\n    v = df_temp_1.Value.plot(kind='hist')\n    plt.title(p + ' - values before 2020')\n    plt.grid()\n    ax2 = plt.subplot(1,2,2, sharex=ax1)\n    v = df_temp_2.Value.plot(kind='hist')\n    plt.title(p + ' - 2020 values only')\n    plt.grid()\n    plt.show()","7aa3c345":"# check coordinates first\nplt.figure(figsize=(9,5))\nplt.scatter(df.Longitude, df.Latitude)\nplt.grid()\nplt.show()","bc292b63":"# select specific pollutant; we only use the 2020 values\ndf_select = df[(df.Pollutant=='CO') & (df.Year==2020) & (df.Value>0)]","0faa21b2":"# check uniqueness of Location\ndf_select.Location.describe()","dc9c8ce0":"# full table\ndf_select","b0932071":"# interactive map\ndef plot_map(i_df, i_scale):\n    zoom_factor = 8 # inital map size\n    radius_scaling = i_scale # scaling of bubbles\n\n    my_map = folium.Map(location=[50.5,4], zoom_start=zoom_factor)\n\n    for i in range(0,df_select.shape[0]):\n       folium.CircleMarker(\n          location=[df_select.iloc[i]['Latitude'], df_select.iloc[i]['Longitude']],\n          radius=np.sqrt(df_select.iloc[i]['Value'])*radius_scaling,\n          popup='Location: ' + df_select.iloc[i]['Location'] + '\\n Value: ' + str(df_select.iloc[i]['Value']),\n          color='blue',\n          fill=True,\n          fill_color='blue',\n          fill_opacity=0.25,\n          weight=1 # stroke width in pixels\n       ).add_to(my_map)\n\n    return(my_map)","83a51514":"# interactive map including color representation of values\ndef plot_map_colored(i_df, i_scale):\n\n    zoom_factor = 8 # inital map size\n    radius_scaling = i_scale # scaling of bubbles\n\n    my_map = folium.Map(location=[50.5,4], zoom_start=zoom_factor)\n \n    v_min = np.min(df_select.Value)\n    v_max = np.max(df_select.Value)\n    nn = df_select.shape[0]\n    for i in range(0,nn):\n        v = df_select.iloc[i]['Value']\n        v_norm = (v-v_min)\/(v_max-v_min)\n        i_col = int(v_norm*256)\n        current_color = matplotlib.colors.to_hex(matplotlib.cm.rainbow(i_col))\n        folium.CircleMarker(\n            location=[df_select.iloc[i]['Latitude'], df_select.iloc[i]['Longitude']],\n            radius=np.sqrt(df_select.iloc[i]['Value'])*radius_scaling,\n            popup='Location: ' + df_select.iloc[i]['Location'] + '\\n Value: ' + str(df_select.iloc[i]['Value']),\n            color='black',\n            fill=True,\n            fill_opacity=0.25,\n            fill_color=current_color,\n            weight=1 # stroke width in pixels\n       ).add_to(my_map)\n\n    return(my_map)","72210366":"# plot map\nmy_map = plot_map(i_df=df_select, i_scale=20)\nmy_map","c06e689a":"df_select = df[(df.Pollutant=='NO2') & (df.Year==2020) & (df.Value>0)]\nmy_map = plot_map(i_df=df_select, i_scale=2)\nmy_map","6bf6f891":"df_select = df[(df.Pollutant=='PM2.5') & (df.Year==2020) & (df.Value>0)]\nmy_map = plot_map(i_df=df_select, i_scale=2)\nmy_map","0168aa4a":"df_select = df[(df.Pollutant=='PM10') & (df.Year==2020) & (df.Value>0)]\nmy_map = plot_map(i_df=df_select, i_scale=2)\nmy_map","6ae44a36":"df_select = df[(df.Pollutant=='SO2') & (df.Year==2020) & (df.Value>0)]\nmy_map = plot_map(i_df=df_select, i_scale=3)\nmy_map","12c1d765":"df_select = df[(df.Pollutant=='O3') & (df.Year==2020) & (df.Value>0)]\nmy_map = plot_map(i_df=df_select, i_scale=1.5)\nmy_map","586c4e3f":"my_map = plot_map_colored(i_df=df_select, i_scale=2)\nmy_map","376de65d":"# > Pollutant SO2\n(Sulfur Dioxide)","295d4654":"#### We see a massive difference in the distribution of CO!","eb4356aa":"# > Pollutant PM2.5\n(Particular Matter with diameter of 2.5 micrometers or less)","50cbd38c":"# > Pollutant PM10\n(Particular Matter with diameter of 10 micrometers or less)","951ae505":"### The values are rather similar here, therefore let's render an alternative Map using also color to display the values:","e4e9ae11":"# > Pollutant O3\n(Ozone)","f9570a78":"# > Pollutant NO2\n(Nitrogen Dioxide)","1063a4bd":"Looks good!","9775c436":"# Maps","813ace2d":"# EDA and Maps showing the different pollutants","a9852ee5":"# > Pollutant CO\n(Carbon Monoxide)"}}