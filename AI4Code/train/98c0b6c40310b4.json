{"cell_type":{"14c99e17":"code","f6264256":"code","e7d73488":"code","93359d0d":"code","602ff68d":"code","0120f571":"code","ea151cf0":"code","2329e724":"code","10233e7d":"code","87a6ae41":"code","c84350a1":"code","d8ebcdb3":"code","013b0f83":"code","77507f1c":"markdown","205495da":"markdown"},"source":{"14c99e17":"import numpy as np\nfrom sklearn.datasets import make_moons\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt","f6264256":"# generate data\n# generate training set\ndata_train, label_train = make_moons(1000, noise=0.15)\n# generate testing set\ndata_test, label_test = make_moons(200, noise=0.15)","e7d73488":"data_train","93359d0d":"# plot data\n# plot training samples\nplt.scatter(data_train[:,0], data_train[:,1], c=label_train, cmap='winter')\n# plot testing samples\nplt.scatter(data_test[:,0], data_test[:,1], c=label_test, cmap='summer')","602ff68d":"# call logistic regression model\nmodel = LogisticRegression()\n# fit model to data\nmodel.fit(data_train, label_train)\n# show model parameters\nprint('W:', model.coef_, 'b:', model.intercept_)","0120f571":"# plot data\n# plot training samples\nplt.scatter(data_train[:,0], data_train[:,1], c=label_train, cmap='winter')\n# plot testing samples\nplt.scatter(data_test[:,0], data_test[:,1], c=label_test, cmap='summer')\n# plot decision boundary\nplt.plot(data_train[:,0], (0-model.intercept_ - model.coef_[0, 0]*data_train[:, 0])\/model.coef_[0, 1], 'r')","ea151cf0":"# predict with trained model\npredict_test = model.predict(data_test)\n# calculate accuracy score\naccuracy_test = accuracy_score(label_test, predict_test)\n# print accuracy level\nprint(accuracy_test)","2329e724":"# call polynomial feature transformer\npoly_tfm = PolynomialFeatures(degree=5)\n# transform features\ndata_train_poly = poly_tfm.fit_transform(data_train)\n# call logistic regression model\nmodel = LogisticRegression()\n# fit model on transformed train data\nmodel.fit(data_train_poly, label_train)","10233e7d":"# transform features\ndata_test_poly = poly_tfm.fit_transform(data_test)\n# predict with trained model\npredict_test = model.predict(data_test_poly)\n# calculate accuracy score\naccuracy_test = accuracy_score(label_test, predict_test)\n# print accuracy level\nprint(accuracy_test)","87a6ae41":"# Create a meshgrid (like what we did with the linear transformation matrix)\n# x coordinates (-1.5 to 2.5, space 0.01)\nxm = np.arange(-1.5, 2.5, 0.01)\n# y coordinates (-1 to 2, space 0.01)\nym = np.arange(-1, 2, 0.01)\n# 2d mesh grid (or we can call it matrix of coordinates)\nxx, yy = np.meshgrid(xm, ym)\n# flatten to reshape to (n_coordinate, 2) to match model input\nxx_flatten = xx.reshape(-1, 1)\nyy_flatten = yy.reshape(-1, 1)\ncoordinates = np.concatenate((xx_flatten, yy_flatten), axis = 1)","c84350a1":"# transform coordinate (just like normal data samples)\nmesh_poly = poly_tfm.fit_transform(coordinates)\n# predict with trained model\npredict_mesh = model.predict(mesh_poly)\npredict_mesh = predict_mesh.reshape(xx.shape)","d8ebcdb3":"# plot data\n# plot training samples\nplt.scatter(data_train[:,0], data_train[:,1], c=label_train, cmap='winter')\n# plot testing samples\nplt.scatter(data_test[:,0], data_test[:,1], c=label_test, cmap='summer')\nplt.contourf(xx, yy, predict_mesh, 2, cmap='spring', alpha = .1)","013b0f83":"# plot data\n# plot testing samples\nplt.scatter(data_test[:,0], data_test[:,1], c=label_test, cmap='jet')\nplt.contourf(xx, yy, predict_mesh, 2, cmap='winter', alpha = .2)","77507f1c":"Or only the testing samples ;)","205495da":"Now we plot the decision boundary with a little mesh trick ;)"}}