{"cell_type":{"d0ef8241":"code","c1b87c52":"code","a0b2a57d":"code","14d4c699":"code","d0749412":"code","e38a9a09":"code","434d0c19":"code","3a119ede":"code","b8295594":"code","80ba079f":"code","0a0cf86d":"code","529d1f6b":"code","40122068":"code","48b0945f":"code","cf25e92e":"code","54c6c133":"markdown","7407cc5e":"markdown","7f7dc80f":"markdown","383d0fd0":"markdown"},"source":{"d0ef8241":"import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\nfrom tqdm.notebook import tqdm\nimport inspect\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nfrom skimage import measure\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c1b87c52":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_tasks = sorted(os.listdir(test_path))","a0b2a57d":"# from: https:\/\/www.kaggle.com\/boliu0\/visualizing-all-task-pairs-with-gridlines\n\ncmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n\ndef plot_one(ax, input_matrix, title_text):\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(title_text)\n\ndef plot_task(task):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"    \n    num_train = len(task['train'])\n    num_test = len(task['test'])\n    num_tot = num_train + num_test\n    fig, axs = plt.subplots(2, num_tot, figsize=(3*num_tot,3*2))\n    for i in range(num_train):\n        plot_one(axs[0,i],task['train'][i]['input'],'train input')\n        plot_one(axs[1,i],task['train'][i]['output'],'train output')\n    i+=1\n    for j in range(num_test):\n        plot_one(axs[0,i+j],task['test'][j]['input'],'test input')\n        plot_one(axs[1,i+j],task['test'][j]['output'],'test output')  \n    plt.tight_layout()\n    plt.show()","14d4c699":"def in_out_diff(t_in, t_out):\n    x_in, y_in = t_in.shape\n    x_out, y_out = t_out.shape\n    diff = np.zeros((max(x_in, x_out), max(y_in, y_out)))\n    diff[:x_in, :y_in] -= t_in\n    diff[:x_out, :y_out] += t_out\n    return diff","d0749412":"def check_symmetric(a):\n    try:\n        sym = 1\n        if np.array_equal(a, a.T):\n            sym *= 2 #Check main diagonal symmetric (top left to bottom right)\n        if np.array_equal(a, np.flip(a).T):\n            sym *= 3 #Check antidiagonal symmetric (top right to bottom left)\n        if np.array_equal(a, np.flipud(a)):\n            sym *= 5 # Check horizontal symmetric of array\n        if np.array_equal(a, np.fliplr(a)):\n            sym *= 7 # Check vertical symmetric of array\n        return sym\n    except:\n        return 0","e38a9a09":"def bbox(a):\n    try:\n        r = np.any(a, axis=1)\n        c = np.any(a, axis=0)\n        rmin, rmax = np.where(r)[0][[0, -1]]\n        cmin, cmax = np.where(c)[0][[0, -1]]\n        return rmin, rmax, cmin, cmax\n    except:\n        return 0,a.shape[0],0,a.shape[1]\n\ndef cmask(t_in):\n    cmin = 999\n    cm = 0\n    for c in range(10):\n        t = t_in.copy().astype('int8')\n        t[t==c],t[t>0],t[t<0]=-1,0,1\n        b = bbox(t)\n        a = (b[1]-b[0])*(b[3]-b[2])\n        s = (t[b[0]:b[1],b[2]:b[3]]).sum()\n        if a>2 and a<cmin and s==a:\n            cmin=a\n            cm=c\n    return cm\n\ndef mask_rect(a):\n    r,c = a.shape\n    m = a.copy().astype('uint8')\n    for i in range(r-1):\n        for j in range(c-1):\n            if m[i,j]==m[i+1,j]==m[i,j+1]==m[i+1,j+1]>=1:m[i,j]=2\n            if m[i,j]==m[i+1,j]==1 and m[i,j-1]==2:m[i,j]=2\n            if m[i,j]==m[i,j+1]==1 and m[i-1,j]==2:m[i,j]=2\n            if m[i,j]==1 and m[i-1,j]==m[i,j-1]==2:m[i,j]=2\n    m[m==1]=0\n    return (m==2)\n\ndef crop_min(t_in):\n    try:\n        b = np.bincount(t_in.flatten(),minlength=10)\n        c = int(np.where(b==np.min(b[np.nonzero(b)]))[0])\n        coords = np.argwhere(t_in==c)\n        x_min, y_min = coords.min(axis=0)\n        x_max, y_max = coords.max(axis=0)\n        return t_in[x_min:x_max+1, y_min:y_max+1]\n    except:\n        return t_in","434d0c19":"def call_pred_train(t_in, t_out, pred_func):\n    feat = {}\n    feat['s_out'] = t_out.shape\n    if t_out.shape==t_in.shape:\n        diff = in_out_diff(t_in,t_out)\n        feat['diff'] = diff\n        feat['cm'] = t_in[diff!=0].max()\n    else:\n        feat['diff'] = (t_in.shape[0]-t_out.shape[0],t_in.shape[1]-t_out.shape[1])\n        feat['cm'] = cmask(t_in)\n    feat['sym'] = check_symmetric(t_out)\n    args = inspect.getargspec(pred_func).args\n    if len(args)==1:\n        return pred_func(t_in)\n    elif len(args)==2:\n        t_pred = pred_func(t_in,feat[args[1]])    \n    elif len(args)==3:\n        t_pred = pred_func(t_in,feat[args[1]],feat[args[2]])\n    feat['sizeok'] = len(t_out)==len(t_pred)\n    t_pred = np.resize(t_pred,t_out.shape)\n    acc = (t_pred==t_out).sum()\/t_out.size\n    return t_pred, feat, acc","3a119ede":"def call_pred_test(t_in, pred_func, feat):\n    args = inspect.getargspec(pred_func).args\n    if len(args)==1:\n        return pred_func(t_in)\n    elif len(args)==2:\n        t_pred = pred_func(t_in,feat[args[1]]) \n    elif len(args)==3:\n        t_pred = pred_func(t_in,feat[args[1]],feat[args[2]])\n    return t_pred","b8295594":"# from: https:\/\/www.kaggle.com\/nagiss\/manual-coding-for-the-first-10-tasks\n\ndef get_data(task_filename):\n    with open(task_filename, 'r') as f:\n        task = json.load(f)\n    return task\n\nnum2color = [\"black\", \"blue\", \"red\", \"green\", \"yellow\", \"gray\", \"magenta\", \"orange\", \"sky\", \"brown\"]\ncolor2num = {c: n for n, c in enumerate(num2color)}\n\ndef check_p(task, pred_func):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(3, n, figsize=(4*n,12), dpi=50)\n    plt.subplots_adjust(wspace=0.3, hspace=0.3)\n    fnum = 0\n    t_acc = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]).astype('uint8'), np.array(t[\"output\"]).astype('uint8')\n        t_pred, feat, acc = call_pred_train(t_in, t_out, pred_func)\n        plot_one(axs[0,fnum],t_in,f'train-{i} input')\n        plot_one(axs[1,fnum],t_out,f'train-{i} output')\n        plot_one(axs[2,fnum],t_pred,f'train-{i} pred')\n        t_acc+=acc\n        fnum += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]).astype('uint8'), np.array(t[\"output\"]).astype('uint8')\n        t_pred = call_pred_test(t_in, pred_func, feat)        \n        plot_one(axs[0,fnum],t_in,f'test-{i} input')\n        plot_one(axs[1,fnum],t_out,f'test-{i} output')\n        plot_one(axs[2,fnum],t_pred,f'test-{i} pred')\n        t_pred = np.resize(t_pred,t_out.shape)\n        if len(t_out)==1:\n            acc = int(t_pred==t_out)\n        else:\n            acc = (t_pred==t_out).sum()\/t_out.size\n        t_acc += acc\n        fnum += 1\n    plt.show()\n    return t_acc\/fnum","80ba079f":"def get_tile(img ,mask):\n    try:\n        m,n = img.shape\n        a = img.copy().astype('int8')\n        a[mask] = -1\n        r=c=0\n        for x in range(n):\n            if np.count_nonzero(a[0:m,x]<0):continue\n            for r in range(2,m):\n                if 2*r<m and (a[0:r,x]==a[r:2*r,x]).all():break\n            if r<m:break\n            else: r=0\n        for y in range(m):\n            if np.count_nonzero(a[y,0:n]<0):continue\n            for c in range(2,n):\n                if 2*c<n and (a[y,0:c]==a[y,c:2*c]).all():break\n            if c<n:break\n            else: c=0\n        if c>0:\n            for x in range(n-c):\n                if np.count_nonzero(a[:,x]<0)==0:\n                    a[:,x+c]=a[:,x]\n                elif np.count_nonzero(a[:,x+c]<0)==0:\n                    a[:,x]=a[:,x+c]\n        if r>0:\n            for y in range(m-r):\n                if np.count_nonzero(a[y,:]<0)==0:\n                    a[y+r,:]=a[y,:]\n                elif np.count_nonzero(a[y+r,:]<0)==0:\n                    a[y,:]=a[y+r,:]\n        return a[r:2*r,c:2*c]\n    except:\n        return a[0:1,0:1]","0a0cf86d":"def patch_image(t_in,s_out,cm=0):\n    try:\n        t = t_in.copy()\n        ty,tx=t.shape\n        if cm>0:\n            m = mask_rect(t==cm)\n        else:\n            m = (t==cm)   \n        tile = get_tile(t ,m)\n        if tile.size>2 and s_out==t.shape:\n            rt = np.tile(tile,(1+ty\/\/tile.shape[0],1+tx\/\/tile.shape[1]))[0:ty,0:tx]\n            if (rt[~m]==t[~m]).all():\n                return rt\n        for i in range(6):\n            m = (t==cm)\n            t -= cm\n            if tx==ty:\n                a = np.maximum(t,t.T)\n                if (a[~m]==t[~m]).all():t=a.copy()\n                a = np.maximum(t,np.flip(t).T)\n                if (a[~m]==t[~m]).all():t=a.copy()\n            a = np.maximum(t,np.flipud(t))\n            if (a[~m]==t[~m]).all():t=a.copy()\n            a = np.maximum(t,np.fliplr(t))\n            if (a[~m]==t[~m]).all():t=a.copy()\n            t += cm\n            m = (t==cm)\n            lms = measure.label(m.astype('uint8'))\n            for l in range(1,lms.max()+1):\n                lm = np.argwhere(lms==l)\n                lm = np.argwhere(lms==l)\n                x_min = max(0,lm[:,1].min()-1)\n                x_max = min(lm[:,1].max()+2,t.shape[0])\n                y_min = max(0,lm[:,0].min()-1)\n                y_max = min(lm[:,0].max()+2,t.shape[1])\n                gap = t[y_min:y_max,x_min:x_max]\n                sy,sx=gap.shape\n                if i==1:\n                    sy\/\/=2\n                    y_max=y_min+sx\n                gap = t[y_min:y_max,x_min:x_max]\n                sy,sx=gap.shape\n                allst = as_strided(t, shape=(ty,tx,sy,sx),strides=2*t.strides)    \n                allst = allst.reshape(-1,sy,sx)\n                allst = np.array([a for a in allst if np.count_nonzero(a==cm)==0])\n                gm = (gap!=cm)\n                for a in allst:\n                    if sx==sy:\n                        fpd = a.T\n                        fad = np.flip(a).T\n                        if i==1:gm[sy-1,0]=gm[0,sx-1]=False\n                        if (fpd[gm]==gap[gm]).all():\n                            gm = (gap!=cm)\n                            np.putmask(gap,~gm,fpd)\n                            t[y_min:y_max,x_min:x_max] = gap\n                            break\n                        if i==1:gm[0,0]=gm[sy-1,sx-1]=False\n                        if (fad[gm]==gap[gm]).all():\n                            gm = (gap!=cm)\n                            np.putmask(gap,~gm,fad)\n                            t[y_min:y_max,x_min:x_max] = gap\n                            break \n                    fud = np.flipud(a)\n                    flr = np.fliplr(a)\n                    if i==1:gm[sy-1,0]=gm[0,sx-1]=gm[0,0]=gm[sy-1,sx-1]=False\n                    if (a[gm]==gap[gm]).all():\n                        gm = (gap!=cm)\n                        np.putmask(gap,~gm,a)\n                        t[y_min:y_max,x_min:x_max] = gap\n                        break\n                    elif (fud[gm]==gap[gm]).all():\n                        gm = (gap!=cm)\n                        np.putmask(gap,~gm,fud)\n                        t[y_min:y_max,x_min:x_max] = gap\n                        break\n                    elif (flr[gm]==gap[gm]).all():\n                        gm = (gap!=cm)\n                        np.putmask(gap,~gm,flr)\n                        t[y_min:y_max,x_min:x_max] = gap\n                        break\n        if s_out==t.shape:\n            return t\n        else:\n            m = (t_in==cm)\n            return np.resize(t[m],crop_min(m).shape)\n    except:\n        return np.resize(t_in, s_out)","529d1f6b":"for t in [16, 60, 73, 109, 174, 286, 304]:\n    task = get_data(str(training_path \/ training_tasks[t]))\n    acc = check_p(task, patch_image)\n    print(f'Task({t}):',evaluation_tasks[t],'Accuracy =',round(100*acc,2),'%')","40122068":"for t in [241, 350, 399]:\n    task = get_data(str(training_path \/ training_tasks[t]))\n    acc = check_p(task, patch_image)\n    print(f'Task({t}):',training_tasks[t],' => Accuracy=',round(100*acc,2),'%')","48b0945f":"for t in [48, 52, 107, 111, 216, 219, 232, 266, 300, 308, 365, 371, 391]:\n    task = get_data(str(evaluation_path \/ evaluation_tasks[t]))\n    acc = check_p(task, patch_image)\n    print(f'Task({t}):',evaluation_tasks[t],'Accuracy =',round(100*acc,2),'%')","cf25e92e":"for t in [9, 159, 336, 352, 383]:\n    task = get_data(str(evaluation_path \/ evaluation_tasks[t]))\n    acc = check_p(task, patch_image)\n    print(f'Task({t}):',evaluation_tasks[t],' => Accuracy=',round(100*acc,2),'%')","54c6c133":"## Some examples","7407cc5e":"# Patch images with Tiles and Symmetry","7f7dc80f":"# Magic functions","383d0fd0":"# If you find other tasks of the same type, please put the names in the comments.\n# Your vote on this kernel motivates us to continue publishing new developments.\n# Thanks!"}}