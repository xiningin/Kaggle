{"cell_type":{"6d39e0b3":"code","0476a233":"code","c41f0d62":"code","5722b3a3":"code","794e521e":"code","239ad74b":"code","a977aacc":"code","77098774":"code","545429f6":"code","e4fc03ba":"code","9772f767":"markdown","1ba8c751":"markdown","8bf9bf23":"markdown","aadee302":"markdown","8c251454":"markdown"},"source":{"6d39e0b3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datatable as dt\n\nimport os","0476a233":"import copy\nimport time\nimport random\n\nimport warnings\n\nfrom sklearn.preprocessing import RobustScaler\n\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.ensemble import VotingClassifier\n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\ndef ht(df, n=2):\n    display(df.head(n))\n    display(df.tail(n))\n    display(df.shape)\n    \ntarget = 'claim'","c41f0d62":"SEED = 2021\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(SEED)","5722b3a3":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')","794e521e":"y = train[target].copy()\nfeatures = train.columns.tolist()\nfeatures.remove('id')\nfeatures.remove(target)","239ad74b":"train['n_missing'] = train[features].isna().sum(axis=1)\ntest['n_missing'] = test[features].isna().sum(axis=1)\n\ntrain['std'] = train[features].std(axis=1)\ntest['std'] = test[features].std(axis=1)\n\nn_missing = train['n_missing'].copy()\n\ntrain[features] = train[features].fillna(train[features].mean())\ntest[features] = test[features].fillna(test[features].mean())\n\nfeatures += ['n_missing', 'std']\n\nscaler = RobustScaler()\ntrain[features] = scaler.fit_transform(train[features])\ntest[features] = scaler.transform(test[features])\n\ntrain.shape, test.shape","a977aacc":"catb_params = {\n    'iterations': 15585, \n    'objective': 'CrossEntropy', \n    'bootstrap_type': 'Bernoulli', \n    'od_wait': 1144, \n    'learning_rate': 0.023575206684596582, \n    'reg_lambda': 36.30433203563295, \n    'random_strength': 43.75597655616195, \n    'depth': 7, \n    'min_data_in_leaf': 11, \n    'leaf_estimation_iterations': 1, \n    'subsample': 0.8227911142845009,\n    'devices' : '0',\n    'verbose' : 0,\n    'eval_metric': 'AUC'\n}","77098774":"cat_clf0 = CatBoostClassifier(**catb_params, random_state=17)\ncat_clf1 = CatBoostClassifier(**catb_params, random_state=42)\ncat_clf2 = CatBoostClassifier(**catb_params, random_state=2021)\ncat_clf3 = CatBoostClassifier(**catb_params, random_state=31)\ncat_clf4 = CatBoostClassifier(**catb_params, random_state=19)\ncat_clf5 = CatBoostClassifier(**catb_params, random_state=77)\ncat_clf6 = CatBoostClassifier(**catb_params, random_state=177)","545429f6":"if 'claim' in train.columns.tolist():\n    y = train.pop('claim')\nprint(train.shape, test.shape)    \n\nestimators=[('cat0', cat_clf0), \n            ('cat1', cat_clf1), \n            ('cat2', cat_clf2), \n            ('cat3', cat_clf3), \n            ('cat4', cat_clf4), \n            ('cat5', cat_clf5),\n            ('cat6', cat_clf6), \n           ]\n\nstart = time.time()\nprint(f'fitting ...')\nmodel = VotingClassifier(estimators=estimators, voting='soft', verbose=True)\nmodel.fit(train, y)\n\nprint('predicting ...')\nmodel_pred = model.predict_proba(test)[:, -1]\n\nelapsed = time.time() - start\nprint(f'elapsed time: {elapsed:.2f}sec\\n')","e4fc03ba":"sample_solution = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nsample_solution[target] = model_pred\nht(sample_solution)\nsample_solution.to_csv('submission.csv', index=False)\nprint()\nprint('==================== R E A D Y ====================')","9772f767":"> Thanks [mlanhenke](https:\/\/www.kaggle.com\/mlanhenke) for **params** from this [notebook](https:\/\/www.kaggle.com\/mlanhenke\/tps-09-single-catboostclassifier-0-81676)","1ba8c751":"## Preprocessing","8bf9bf23":"The same method increased the score of LGBM from **0.81800** to **0.81837**, see the [notebook](https:\/\/www.kaggle.com\/martynovandrey\/one-model-voting-from-0-81800-to-0-81837)","aadee302":"#### Thanks for reading. Don't forget to upvote if you find it usefull.","8c251454":"# VotingClassifier with only one CatBoost model\n\nIt's the 2nd notebook on the theme of single model voting, please read the foreword in this [notebook](https:\/\/www.kaggle.com\/martynovandrey\/one-model-voting-from-0-81800-to-0-81837)\n\nThis time I used the same solution with CatBoost Classifier. The initial score with traditional method, cv=7 was **0.81751**\n\nLet's try to increase it."}}