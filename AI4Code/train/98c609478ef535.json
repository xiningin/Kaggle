{"cell_type":{"195948ee":"code","94922389":"code","23cca6dd":"code","4b45d21e":"code","679f6230":"code","b08fa508":"code","cd03e9eb":"code","6d75539e":"code","8fdea7df":"code","229bee70":"code","0b39a8b3":"code","d7fa5a33":"code","684ff0c6":"code","e814bb42":"markdown","923f1e0e":"markdown","b0863b77":"markdown","3b256a8e":"markdown"},"source":{"195948ee":"%matplotlib inline\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport torch\nimport torch.optim as optim\nfrom torchvision import transforms, models","94922389":"vgg = models.vgg19(pretrained=True).features\nfor param in vgg.parameters():\n    param.requires_grad_(False)","23cca6dd":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nvgg.to(device)","4b45d21e":"def load_image(img_path, max_size=400, shape=None):\n    image = Image.open(img_path).convert('RGB')\n    if max(image.size) > max_size:\n        size = max_size\n    else:\n        size = max(image.size)\n        \n    if shape is not None:\n        size = shape\n        \n    in_transform = transforms.Compose([\n                        transforms.Resize(size),\n                        transforms.ToTensor(),\n                        transforms.Normalize((0.485, 0.456, 0.406), \n                                             (0.229, 0.224, 0.225))])\n\n    image = in_transform(image)[:3,:,:].unsqueeze(0)\n    \n    return image","679f6230":"# load in content and style image\ncontent = load_image('..\/input\/gan-getting-started\/photo_jpg\/009ddaed1f.jpg').to(device)\n# Resize style to match content, makes code easier\nstyle = load_image('..\/input\/gan-getting-started\/monet_jpg\/0e3b3292da.jpg', shape=content.shape[-2:]).to(device)","b08fa508":"def im_convert(tensor):\n    image = tensor.to(\"cpu\").clone().detach()\n    image = image.numpy().squeeze()\n    image = image.transpose(1,2,0)\n    image = image * np.array((0.229, 0.224, 0.225)) + np.array((0.485, 0.456, 0.406))\n    image = image.clip(0, 1)\n\n    return image","cd03e9eb":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.imshow(im_convert(content))\nax1.set_title(\"Content Image\",fontsize = 12)\nax2.imshow(im_convert(style))\nax2.set_title(\"Style Image\", fontsize = 12)\nax1.set_xticks([])\nax1.set_yticks([])\nax2.set_xticks([])\nax2.set_yticks([])\nplt.show()","6d75539e":"def get_features(image, model, layers=None):\n\n    if layers is None:\n        layers = {'0': 'conv1_1',\n                  '5': 'conv2_1', \n                  '10': 'conv3_1', \n                  '19': 'conv4_1',\n                  '21': 'conv4_2',\n                  '28': 'conv5_1'}\n        \n    features = {}\n    x = image\n\n    for name, layer in model._modules.items():\n        x = layer(x)\n        if name in layers:\n            features[layers[name]] = x\n            \n    return features","8fdea7df":"def gram_matrix(tensor):\n    _, d, h, w = tensor.size()\n    tensor = tensor.view(d, h * w)\n    gram = torch.mm(tensor, tensor.t())\n    \n    return gram ","229bee70":"print(type(content))\n\ncontent_features = get_features(content, vgg)\nstyle_features = get_features(style, vgg)\n\nprint(type(content_features))\n\nstyle_grams = {layer: gram_matrix(style_features[layer]) for layer in style_features}\ntarget = content.clone().requires_grad_(True).to(device)","0b39a8b3":"style_weights = {'conv1_1': 1.,\n                 'conv2_1': 0.75,\n                 'conv3_1': 0.2,\n                 'conv4_1': 0.2,\n                 'conv5_1': 0.2}\n\ncontent_weight = 1  # alpha\nstyle_weight = 1e9  # beta","d7fa5a33":"show_every = 400\noptimizer = optim.Adam([target], lr=0.003)\nsteps = 2000\n\nfor ii in range(1, steps+1):\n    \n    target_features = get_features(target, vgg)\n    content_loss = torch.mean((target_features['conv4_2'] - content_features['conv4_2'])**2)\n    style_loss = 0\n\n    for layer in style_weights:\n        target_feature = target_features[layer]\n        target_gram = gram_matrix(target_feature)\n        _, d, h, w = target_feature.shape\n        style_gram = style_grams[layer]\n        layer_style_loss = style_weights[layer] * torch.mean((target_gram - style_gram)**2)\n        style_loss += layer_style_loss \/ (d * h * w)\n        \n    total_loss = content_weight * content_loss + style_weight * style_loss\n    \n    optimizer.zero_grad()\n    total_loss.backward()\n    optimizer.step()\n    \n    if  ii % show_every == 0:     \n        print('Total loss: ', total_loss.item())\n        plt.imshow(im_convert(target))\n        plt.axis('off')\n        plt.show()","684ff0c6":"fig, (ax1, ax2) = plt.subplots(2,1, figsize=(5,10))\nax1.imshow(im_convert(content))\nax1.set_title(\"Content Image\", fontsize=12)\nax2.imshow(im_convert(target))\nax2.set_title(\"Stylized Image\", fontsize=12)\nax1.grid(False)\nax2.grid(False)\nax1.set_xticks([])\nax1.set_yticks([])\nax2.set_xticks([])\nax2.set_yticks([])\nplt.show()","e814bb42":"# content image and style image","923f1e0e":"Style Transfer TensorFlow Hub Sample<br\/>\nhttps:\/\/www.kaggle.com\/stpeteishii\/style-transfer-tensorflow-hub-sample<br\/>\nStyle Transfer Tensorflow Sample<br\/>\nhttps:\/\/www.kaggle.com\/stpeteishii\/style-transfer-tensorflow-sample<br\/>\nStyle Transfer Keras Sample<br\/>\nhttps:\/\/www.kaggle.com\/stpeteishii\/style-transfer-keras-sample<br\/>\nStyle Transfer Pytorch Sample<br\/>\nhttps:\/\/www.kaggle.com\/stpeteishii\/style-transfer-pytorch-sample<br\/>","b0863b77":"# Style Transfer PyTorch Sample\nThis notebook referred to Udacity Deep Learning program.<br\/>\nhttps:\/\/github.com\/udacity\/deep-learning-v2-pytorch","3b256a8e":"## Stylized Image"}}