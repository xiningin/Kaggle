{"cell_type":{"2936b397":"code","47d6e7e0":"code","3e567499":"code","d18863f9":"code","1ee2453d":"code","8d0b4d17":"code","c98f573c":"code","ae0af677":"code","df21aa75":"code","6da57d74":"code","2e61dc1b":"code","fd195d45":"code","c86638b3":"code","639f9951":"code","dbe0f4a2":"code","b442af72":"code","4c63668c":"code","2eb20bf6":"code","b2601acf":"code","d64ca802":"markdown","b6862932":"markdown","8a6905ed":"markdown","076c3a8b":"markdown","d37e911b":"markdown","262c499f":"markdown","0abd1ce0":"markdown","f753f7aa":"markdown","062c9f1a":"markdown","b7043882":"markdown","cca51449":"markdown","95c81625":"markdown"},"source":{"2936b397":"import tensorflow as tf\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom keras.optimizers import RMSprop\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import load_model\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom glob import glob","47d6e7e0":"IMAGE_SIZE = [224, 224]\n\ntrain_path = '..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train'\nvalid_path = '..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/valid'","3e567499":"vgg19 = VGG19(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)","d18863f9":"for layer in vgg19.layers:\n    layer.trainable = False","1ee2453d":"folders = glob('..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train\/*')","8d0b4d17":"folders","c98f573c":"# our layers - you can add more if you want\nx = Flatten()(vgg19.output)","ae0af677":"len(folders)","df21aa75":"prediction = Dense(len(folders), activation='softmax')(x)\n\n# create a model object\nmodel = Model(inputs=vgg19.input, outputs=prediction)","6da57d74":"model.summary()","2e61dc1b":"optimizer = RMSprop(0.001) #learning rate = 0.001\n\nmodel.compile(\n  loss = 'categorical_crossentropy',\n  optimizer = optimizer,\n  metrics = ['accuracy']\n)","fd195d45":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","c86638b3":"# Make sure you provide the same target size as initialied for the image size\ntraining_set = train_datagen.flow_from_directory('..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train',\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')\n\ntest_set = test_datagen.flow_from_directory('..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/valid',\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')","639f9951":"# fit the model\nes = EarlyStopping(patience=20, restore_best_weights=True)\n\nr = model.fit_generator(\n  training_set,\n  validation_data=test_set,\n  epochs=30,\n  steps_per_epoch=len(training_set),\n  validation_steps=len(test_set),\n  callbacks=es\n)","dbe0f4a2":"valid_loss, valid_acc = model.evaluate_generator(test_set, steps=len(test_set))\nprint(f\"Final validation accuracy: {valid_acc*100:.2f}%\")","b442af72":"# plot the loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('Acc-Val_acc')","4c63668c":"model.save('model_vgg19.h5')\nprint(\"Model saved successfully...\")","2eb20bf6":"y_pred = model.predict(test_set)","b2601acf":"y_pred = np.argmax(y_pred, axis=1)\ny_pred","d64ca802":"# Reading Dataset","b6862932":"Using RMSProp as an optimizer with learning rate as 0.001. Keeping learning rate constant throughout.","8a6905ed":"Create data generator for training and testing set. Augmentation process is only done for training dataset.","076c3a8b":"# Validation Accuracy","d37e911b":"# The End","262c499f":"# Importing Libraries","0abd1ce0":"# Model Summary","f753f7aa":"# Prediction","062c9f1a":"# Fitting the Model","b7043882":"We don't want to train all layers so keeping that parameter equal to \"False\" except the last layer.","cca51449":"# VGG19 Model","95c81625":"Adding last layer with 10 outputs and using softmax as an activation. "}}