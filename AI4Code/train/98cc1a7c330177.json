{"cell_type":{"37f2a036":"code","0a1f6b20":"code","9022ecea":"code","d3354256":"code","32fe7986":"code","fc7fffbe":"code","8d402f50":"code","47d08beb":"code","d149dfab":"markdown","9a3ad341":"markdown","f9ebdf99":"markdown"},"source":{"37f2a036":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom scipy.optimize import curve_fit","0a1f6b20":"#OUT OF STOCK CLASS\n#Detects out of stock days and pedicts probability of out of stock for inference\n\nclass out_of_stock_zeroes():\n    def __init__(self,sales_array,calculate_oos_array=True):\n        self.sales_array = sales_array\n        #When do the sales start. A series of zeros at the beginning only means that the product is not yet available and should not be considered as an indicator of out of stock\n        start = np.argmax(sales_array != 0)\n        sales_array_without_start = sales_array[start:].copy()\n        sales_array_start = sales_array[:start].copy()\n        \n        \n        self.counter = self._build_zero_seq_counter(sales_array_without_start)\n        \n        self.zeroes_seq = self.rle(self.counter,0)\n\n        \n        #If we want to calculate an array of same size than self.sales_array with a boolean flag if out of stock\n        if calculate_oos_array:\n            #First we calculate the minimal sequence length from which we consider that those zeros are due to out of stocl\n            self.divisor = self._log_divisor(sales_array) #The higher the mean value of sales, the lower the zeros sequence length needs to be to be considered oos\n            self.out_of_stock_min_length = self._get_min_length_oos(self.zeroes_seq,self.divisor)\n            \n            #Based on the information of what is the out_of_stock_min_length, we can now calculate the oos flag array\n            self.zeroes_seq_sales = self.rle(sales_array_without_start,0)\n            self.oos_coordinates = self._build_oos_coordinates(start,self.zeroes_seq_sales,self.out_of_stock_min_length)\n            self.oos_array = self._build_oos_array(sales_array.shape[0],self.oos_coordinates)\n        \n        \n        # We calculate what is the minimal sequence length of consecutive zeros starting from which out of stock is likely for prediction\n        # We use a divisor of 1 in this case as it resulted in better CV\n        self.out_of_stock_min_length_for_oos_pred = self._get_min_length_oos(self.zeroes_seq,1)\n        \n    def _build_zero_seq_counter(self,sales_array):\n        '''\n        From an array sales_array, builds an array counting the zeros sequence length\n        Such as sales_array = [0,1,0,0,1,0,1,0,0,0,0,1]\n        Would result in counter = [2,1,0,1]\n        '''\n        mask = sales_array!=0\n        sales_array = sales_array[np.argmax(mask):]\n        self.sales_array_without_begin = sales_array\n        l = sales_array==0\n        counter = np.diff(np.where(np.concatenate(([l[0]],\n                                         l[:-1] != l[1:],\n                                         [True])))[0])[::2]\n        counter = np.bincount(counter)\n        counter = counter[1:]\n        return counter\n        \n    def rle(self, a, value=None):\n        \"\"\"\n        From an array, calculates the sequences of same value length and position\n        Such as a = [10,5,4,0,0,0,0,1,0,0,0,1] and value = 0\n        Would result in [(4,3),(3,7)], each element of the array being (length of sequence, position in initial array)\n        \"\"\"\n        ia = np.asarray(a)                # force numpy\n        n = len(ia)\n        if n==0:\n            return np.array([[],[]])\n        y = np.array(ia[1:] != ia[:-1])     # pairwise unequal (string safe)\n        i = np.append(np.where(y), n - 1)   # must include last element posi\n        z = np.diff(np.append(-1, i))       # run lengths\n        p = np.cumsum(np.append(0, z))[:-1] # positions\n\n        if value is None:\n            return np.concatenate([z.reshape(-1,1),p.reshape(-1,1),ia[i].reshape(-1,1)],axis=1)\n        else:\n            mask = ia[i] == value\n            return np.concatenate([z[mask].reshape(-1,1),p[mask].reshape(-1,1)],axis=1)\n        \n    def _log_divisor(self,a):\n        s = a[a>0]\n        if s.shape[0]==0:\n            return 1e-3\n        mean_no_zeros = a[a>0].mean()\n        return np.log1p(mean_no_zeros)+1e-3\n    \n    def _get_min_length_oos(self,zeroes_seq,divisor=1):\n        \"\"\"\n        Idea is to look at the zeros sequence length such as [5,4,3,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1]\n        When the first zero sequence in the zero sequence array (a bit confusing here sorry) is longer than what came before, then we consider that position to be the minimum sequence length to be oos\n        In this example, the first zero sequence of the zero sequence array is in the 4th position but has size 1\n        The second sequence is in 6 position but has length 7. So in case divisor=1, the minimal size for oos is 6 => any sequence of zeros in the sales array with a length greater than 6 is to be considered oos\n        \"\"\"\n        if zeroes_seq.shape[1]==0:\n            return self.sales_array.shape[0]\n        zeroes_seq_tmp = zeroes_seq.copy()\n        zeroes_seq[:,0] = zeroes_seq[:,0] + zeroes_seq[:,1] + 1\n        zeroes_seq_tmp[:,1] = zeroes_seq_tmp[:,1]\/divisor\n        filtered_seq = zeroes_seq[zeroes_seq_tmp[:,0]>zeroes_seq_tmp[:,1]]\n        if filtered_seq.shape[0]==0:\n            return self.sales_array.shape[0]\n        return filtered_seq[0][1]+1\n    \n    def _build_oos_coordinates(self,start,zeroes_seq_sales,out_of_stock_min_length):\n        oos_coordinates = zeroes_seq_sales[zeroes_seq_sales[:,0]>=out_of_stock_min_length].copy()\n        oos_coordinates[:,1] = oos_coordinates[:,1] + start\n        oos_coordinates = np.concatenate([[[start,0]],oos_coordinates],axis=0)\n        return oos_coordinates\n        \n    def _build_oos_array(self,length,oos_coordinates):\n        a = np.zeros(length)\n        for coord in oos_coordinates:\n            a[coord[1]:coord[1]+coord[0]] = 1\n        return a\n    \n    \n    def curve_func(self,x,a):\n        return 1\/(1+a*np.sqrt(x))\n\n    \n    def build_oos_prob_array(self,zeros_before,alpha=2):\n        \"\"\"\n        This function calculates an array of size 28 that will serve as multiplier array to the inference.\n        Idea is to transform any element that we consider oos to zero in the inference\n        For example if just before the inference, a product had a sequence of 50 zeros while usually it is never zero, we create an array to transform the inference to zero.\n        \n        Also for each sales_array sequence, we fit a simple curve (1\/(1+a*np.sqrt(x))) to give us the probability that a sequence will have a size N given how long it is already (n_zeros_before) and how long the oos sequences were in the history of this sales array\n        For example if a sales_array has oos sequences such as [0,0,0,0,0,4,3,2,0,1] meaning that the shortest oos sequence has size 6 and occured 4 times in the past\n        Then we fit x=[1,2,3,4,5] y=[4,3,2,0,1]\/sum([4,3,2,0,1]) to get the parameter a\n        So now if we have a sequence of zeroes before of size 7, we can plug calculate the probability of oos based on the curve that we just fit\n        \n        The higher the alpha, the lower the probability of oos sequence\n        \"\"\"\n        counter_cumsum = np.cumsum(self.counter)\n        #How many times oos sequences occured\n        oos_occurences = counter_cumsum[-1] - counter_cumsum[self.out_of_stock_min_length_for_oos_pred-1]\n        \n        #Min zeroes sequence after which 1\/alpha% chances of a oos\n        alpha_oos_zeros_seq_size_prob = np.argmax(counter_cumsum>counter_cumsum[-1]-alpha*oos_occurences)\n       \n    #if zeros before inferior to half_oos_zeros_seq_size_prob then not a oos sequence\n        if zeros_before<alpha_oos_zeros_seq_size_prob:\n            return np.ones(28)\n        \n        #Inverse cumsum of zeroes occurences\n        inverse_cumsum = counter_cumsum[-1] - counter_cumsum[alpha_oos_zeros_seq_size_prob:]\n        \n        #Get indices of oos occurences\n        x_oos_occurences = np.concatenate([np.array([0]),np.where(inverse_cumsum[1:] != inverse_cumsum[:-1])[0]+1])\n        y_oos_occurences = inverse_cumsum[x_oos_occurences]\n        y_oos_occurences = y_oos_occurences \/ y_oos_occurences[0]\n        if y_oos_occurences.shape[0]<=2:\n            x_oos_occurences = np.insert(x_oos_occurences, -1, x_oos_occurences[-1]-0.1)\n            y_oos_occurences = np.insert(y_oos_occurences, -1, 1e-5)\n        \n        #Fit curve\n        a,cor = curve_fit(self.curve_func, x_oos_occurences, y_oos_occurences,p0=[1],bounds=([0],[np.inf]))\n        \n        #Calculate probs with zeroes before\n        x_prob = np.array([zeros_before - alpha_oos_zeros_seq_size_prob + i for i in range(29)])\n        y_prob = self.curve_func(x_prob,a[0])\n        y_prob = y_prob\/y_prob[0]\n        \n        #Arbitrary values for oos calculation optimized with CV\n        oos_new_array = np.where(y_prob>0.4,\n                                 np.where(y_prob>0.7,0,1-y_prob),\n                                 1)\n        return oos_new_array[1:]","9022ecea":"sales_pd = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv\")","d3354256":"a = sales_pd.iloc[17,6:].values.astype('int')\noos = out_of_stock_zeroes(a)","32fe7986":"#In green, actual sales\nsns.lineplot(x=np.arange(a.shape[0]),y=a,color='green')\n#In red, out of stock flag. When 1 => out of stock day\nsns.lineplot(x=np.arange(a.shape[0]),y=oos.oos_array,color='red')","fc7fffbe":"a_without_last_28_days = sales_pd.iloc[17,6:-28].values.astype('int')\noos_without_last_28_days = out_of_stock_zeroes(a_without_last_28_days)","8d402f50":"#out_of_stock_zeroes class has method to \"predict\" if the next 28 days will be out of stock based on past out of stock behavior\n#Method takes as argument the number of consecutive zeros just before the inference\n#It outputs an array that can be multiplied with the results of an inference model. If the likelihood of out of stock is high, then the multiplication element will be zero\n#If no zeros, then no out of stock\n#The more consecutive zeros before the inference, the more likely there will be out of stock in the inference\n\nmask = a_without_last_28_days!=0\nn_zeroes_before = np.argmax(mask[::-1])\nout_of_stock_multiplier_array = oos_without_last_28_days.build_oos_prob_array(n_zeroes_before)\n\nout_of_stock_multiplier_array","47d08beb":"#If less consecutive zeroes before the inference, the probability of out of stock is lower\nout_of_stock_multiplier_array = oos_without_last_28_days.build_oos_prob_array(6)\n\nout_of_stock_multiplier_array","d149dfab":"This notebook aims at showing a method to detect when an item is out of stock and use the information to predict the likelihood that a sequence of zeroes happening just before the inference period is due to out of stock and therefore likely to persist throughout the inference period.\n\nLink to the solution write up for 84th position where this algorithm is used: https:\/\/www.kaggle.com\/c\/m5-forecasting-accuracy\/discussion\/163127","9a3ad341":"# Out of stock prediction","f9ebdf99":"# Out of stock detection"}}