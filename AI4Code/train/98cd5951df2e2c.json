{"cell_type":{"aa52d9ec":"code","484065e0":"code","fd6dd433":"code","26b0a8bc":"code","16c870db":"code","9ac19556":"code","23fe080b":"code","12399f0a":"code","f5674ddf":"code","492ba20d":"code","1597a441":"code","b9c2b234":"code","efdb5fb7":"code","cdb93bc3":"code","d043ff1c":"code","53580ee6":"code","e3b2d9e8":"code","330b52aa":"code","318faf10":"code","3b1c3474":"code","1127d058":"code","8d1d68d8":"code","a4a6c437":"code","3340b5d9":"code","fe293b06":"code","1e7bc7e8":"markdown"},"source":{"aa52d9ec":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nos.listdir(\"..\/input\/b3.csv\/\")","484065e0":"data_path = \"..\/input\/b3.csv\/b3.csv\"\nb3 = pd.read_csv(data_path)#, compression=\"gzip\")\nb3['datahora'] = pd.to_datetime(b3['datahora'], format=\"%Y%m%d%H%M\")\nb3.set_index(['datahora'], inplace=True)\nb3.info(null_counts=True)","fd6dd433":"values = b3['fechamento_atual'].shift(1)\ncondition = b3['codigo'] == b3['codigo'].shift(1)\nb3['fechamento_anterior'] = [value if truth else np.nan for value, truth in zip(values, condition)]\nb3['log_retorno'] = np.log(b3[\"fechamento_atual\"]) - np.log(b3[\"fechamento_anterior\"])\nb3['ano_mes_dia'] = b3.index.strftime(\"%Y-%m-%d\")\nb3['ano_mes_dia'] = pd.to_datetime(b3['ano_mes_dia'])\nb3.fillna(method='backfill', inplace=True)\nb3.head()","26b0a8bc":"b3.index.hour.value_counts()","16c870db":"b3[b3.index.hour > 16]['fechamento_atual'].count()","9ac19556":"assets = b3.codigo.unique()\nprint(\"n\u00famero de ativos na B3: {}\\nativos:\".format(len(assets)))\nprint(assets)","23fe080b":"grouped_b3 = b3.groupby(\"codigo\", as_index=False)\ngrouped_b3.get_group('GOLL4').head()","12399f0a":"plt.close()\nrows = len(grouped_b3)\/\/3+1\nplt.figure(figsize=(60, 200))\nfor asset, i in zip(assets, range(1,len(grouped_b3))):\n    ax = plt.subplot(rows,3,i)\n    data = grouped_b3.get_group(asset)['log_retorno']\n    ax.hist(data, log=True, bins=np.arange(-.2, .2, 0.01))\n    plt.vlines(x=data.mean(), color='r', linestyle='-', ymin=0, ymax=100000, linewidth=3)\n    ax.set_ylim([1,100000])\n    ax.xaxis.set_tick_params(labelsize=24)\n    ax.yaxis.set_tick_params(labelsize=24)\n    ax.set_title(asset, fontsize=35)\n#plt.savefig('..\/graphics\/fech_diff_all.jpg')\nplt.show()","f5674ddf":"b3_daily = b3.sort_index(ascending=True).groupby(['ano_mes_dia','codigo']). \\\n                                         agg({'fechamento_atual' : 'last', \n                                              'fechamento_anterior' : 'first',\n                                              'volume_financeiro' : 'sum'})\n\nb3_daily['log_retorno'] = np.log(b3_daily[\"fechamento_atual\"]) - \\\n                          np.log(b3_daily[\"fechamento_anterior\"])\n\nthreshold = 0.025\nb3_daily['bin_log_retorno'] = [1 if x > threshold \n                               else -1 if x < -threshold \n                               else 0 \n                               for x in b3_daily['log_retorno']]\n\nb3_daily.reset_index(inplace=True)\nb3_daily.set_index('ano_mes_dia', inplace=True)\n\ngrouped_b3_daily = b3_daily.groupby(\"codigo\", as_index=False)\n\nb3_daily.info()","492ba20d":"plt.close()\nrows = len(grouped_b3)\/\/3+1\nplt.figure(figsize=(60, 200))\nfor asset, i in zip(assets, range(1,len(grouped_b3))):\n    ax = plt.subplot(rows,3,i)\n    data = grouped_b3_daily.get_group(asset)['volume_financeiro']\n    ax.hist(data, bins=np.arange(10**8, 10*10**9, 10))\n    #plt.vlines(x=data.mean(), color='r', linestyle='-', ymin=0, ymax=100000, linewidth=3)\n    #ax.set_xlim([10**8,10*10**9])\n    ax.xaxis.set_tick_params(labelsize=24)\n    ax.yaxis.set_tick_params(labelsize=24)\n    ax.set_title(asset, fontsize=35)\n#plt.savefig('..\/graphics\/fech_diff_all.jpg')\nplt.show()","1597a441":"len(np.arange(10**8, 10*10**9, 10))","b9c2b234":"corr_pearson = [[grouped_b3_daily.get_group(asset_1)['bin_log_retorno'].corr(\n                    grouped_b3_daily.get_group(asset_2)['bin_log_retorno'].shift(-1))\n                if asset_1 != asset_2\n                else np.nan\n                for asset_2 in assets] \n                for asset_1 in assets]\ncorr_spearman = [[grouped_b3_daily.get_group(asset_1)['bin_log_retorno'].corr(\n                    grouped_b3_daily.get_group(asset_2)['bin_log_retorno'].shift(-1), \n                    method='spearman')\n                if asset_1 != asset_2\n                else np.nan\n                for asset_2 in assets] \n                for asset_1 in assets]\ncorr_pearson = pd.DataFrame(corr_pearson, index=assets, columns=assets)\ncorr_spearman = pd.DataFrame(corr_spearman, index=assets, columns=assets)","efdb5fb7":"cm = sns.light_palette(\"green\", as_cmap=True)\nthreshold = 0.2\ncorr_above_threshold = [col for col in assets if corr_pearson[col].max() > threshold]\ncorr_pearson.loc[corr_above_threshold,corr_above_threshold].fillna(1).style.background_gradient(cmap=cm, axis=1)","cdb93bc3":"def summary(data, assets_list, attribute):\n    info = [data.get_group(x)[attribute].describe() for x in assets_list]\n    info = pd.DataFrame(info, index=assets_list)\n    #info['sum'] = [data.get_group(x)[attribute].sum() for x in assets_list]\n    print(info)","d043ff1c":"to_analize = ['BBDC4','ITUB4','GGBR4','CSNA3']\nsummary(grouped_b3, to_analize, 'log_retorno')","53580ee6":"def plot_fechamento(data, assets_list):\n    \n    k = len(assets_list)\n    \n    plt.close()\n    colors = ['r','b','g','c','m','y','k']\n\n    plt.close()\n    plt.figure(figsize=(40,10))\n    for x, color, i in zip(assets_list,colors[:k], range(0,k)):\n        data.get_group(x)['fechamento_atual'].plot(kind='line', style=color, fontsize=24)\n    plt.title(\"Valor de fechamento (15min)\", fontsize=40)\n    plt.legend(assets_list, fontsize=40)\n    plt.xlabel(\"\")\n    plt.show()","e3b2d9e8":"to_analize = ['BBDC4','ITUB4']\nplot_fechamento(grouped_b3, to_analize)","330b52aa":"to_analize = ['GGBR4','CSNA3','VALE3']\nplot_fechamento(grouped_b3, to_analize)","318faf10":"def plot_log_retorno(data, assets_list):\n\n    k = len(assets_list)\n    \n    plt.close()\n    colors = ['r','b','g','c','m','y','k']\n\n    fig, ax = plt.subplots(nrows=k, sharex=True, figsize=(40,20))\n    for x, color, i in zip(assets_list,colors[:k], range(0,k)):\n        data.get_group(x)['log_retorno'].plot(kind='line', style=color, ax=ax[i])\n        ax[i].set_ylim([-0.1,0.1])\n        ax[i].legend([x], fontsize=30)\n        ax[i].xaxis.set_tick_params(labelsize=24)\n        ax[i].yaxis.set_tick_params(labelsize=24)\n    plt.show()","3b1c3474":"to_analize = ['BBDC4','ITUB4','GGBR4','CSNA3','VALE3']\n\nplot_log_retorno(grouped_b3, to_analize)","1127d058":"b3['ano_mes_dia'] = b3.index.strftime(\"%Y-%m-%d\")\n\nb3_daily = b3.sort_index(ascending=True).groupby(['ano_mes_dia','codigo']).agg({'fechamento_atual' : 'last', \n                                                                                'fechamento_anterior' : 'first'})\n\nb3_daily['log_retorno'] = np.log(b3_daily[\"fechamento_atual\"]) - np.log(b3_daily[\"fechamento_anterior\"])\n\nthreshold = 0.015\nb3_daily['bin_log_retorno'] = [1 if x > threshold \n                               else -1 if x < -threshold \n                               else 0 \n                               for x in b3_daily['log_retorno']]\n\ngrouped_b3_daily = b3_daily.groupby(\"codigo\", as_index=False)\n\nb3_daily.info()","8d1d68d8":"def plot_stacked_bin(data, assets_list):\n\n    plt.close()\n\n    assets_list = to_analize\n    k = len(assets_list)\n\n    plt.figure(figsize=(160,5))\n    colors = ['r','b','g','c','m','y','k']\n\n    x = np.arange(len(grouped_b3_daily.get_group(assets_list[0])['bin_log_retorno'].values))\n    data = grouped_b3_daily.get_group(assets_list[0])['bin_log_retorno'].values\n    p1 = plt.bar(x, data, color=colors[0])\n\n    bottom = 0\n\n    for asset, color, i in zip(assets_list[1:], colors[1:k], range(0,k)): \n\n        bottom = bottom + data\n        data = grouped_b3_daily.get_group(asset)['bin_log_retorno'].values\n        p1 = plt.bar(x, data, color=color, bottom = bottom)\n\n    plt.legend(assets_list, fontsize=30)\n\n    plt.title(\"Concord\u00e2ncia entre ativos (di\u00e1rio)\", fontsize=40)\n    plt.xticks([])\n    plt.yticks([])\n\n    plt.show()","a4a6c437":"to_analize = ['GGBR4','CSNA3','BRAP4']\n\nplot_stacked_bin(grouped_b3_daily, to_analize)\nprint(\"Concord\u00e2ncia entre Ativos (di\u00e1ria)\")","3340b5d9":"def concordance_accuracy(grouped_b3_daily, to_analize):\n\n    assets_list = to_analize\n\n    sum_ = grouped_b3_daily.get_group(assets_list[0])['bin_log_retorno'].values + \\\n           grouped_b3_daily.get_group(assets_list[1])['bin_log_retorno'].values + \\\n           grouped_b3_daily.get_group(assets_list[2])['bin_log_retorno'].values\n\n    prev_item = (x for x in sum_[:-2])\n    item = (x for x in sum_[1:-1])\n    next_item = (x for x in sum_[2:])\n    a = [1 if (abs(w) <= abs(x) <= abs(y)) \n         else -1 if (abs(w) >= abs(x) >= abs(y)) \n         else 0 for w,x,y in zip(prev_item,item,next_item)]\n    plt.close()\n    plt.hist(a)\n    plt.show()","fe293b06":"to_analize = ['GGBR4','CSNA3','BRAP4']\nconcordance_accuracy(grouped_b3_daily, to_analize)","1e7bc7e8":"Dados B3 - S\u00e9rie 15 min - ativos IBovespa e BOVA11\n\nLink para dados (download):\n\nhttps:\/\/drive.google.com\/open?id=1gQZyKyuKLsi7Iv4BpNZ8KykuaMSqmJ-b\n\nFormato: \ncodigoAtivo, fechamento_atual, abertura, maximo, minimo, fechamento_anterior, negocios, quantidade_papeis, volume_financeiro, datahora"}}