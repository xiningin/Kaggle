{"cell_type":{"6abb0f40":"code","4cf26856":"code","e514fed1":"code","9c9af79b":"code","6224f7f5":"markdown","09a6ca1e":"markdown","347fc639":"markdown","d6b78809":"markdown","c1a11482":"markdown","064c8d92":"markdown","ad9ce288":"markdown","57a39217":"markdown","5a7482e9":"markdown"},"source":{"6abb0f40":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nimport os\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors","4cf26856":"blk, blu, red, grn, ylw, gry, pur, orn, azu, brw = range(10)\n\nCOLOURS = [\n    \"#000\",\n    \"#0074D9\", # blue\n    \"#FF4136\", # red\n    \"#2ECC40\", # green\n    \"#FFDC00\", # yellow\n    \"#AAAAAA\", # grey\n    \"#F012BE\", # fuschia\n    \"#FF851B\", # orange\n    \"#7FDBFF\", # teal\n    \"#870C25\"  # brown\n]\ncmap = colors.ListedColormap(COLOURS)\nnorm = colors.Normalize(vmin=0, vmax=9)\n\ntask = \"\/kaggle\/input\/abstraction-and-reasoning-challenge\/training\/0a938d79.json\"\nwith open(task, 'r') as f:\n    data = json.load(f)\n    \nfirst_task = data[\"train\"][0]\n\nfirst_task_in = np.array(first_task[\"input\"], dtype=np.uint8)\nplt.imshow(first_task_in, cmap=cmap, norm=norm)\nplt.show()\nfirst_task_out = np.array(first_task[\"output\"], dtype=np.uint8)\nplt.imshow(first_task_out, cmap=cmap, norm=norm)\nplt.show()","e514fed1":"class DFSA():\n\n    def __init__(self, state_in, state_out, transitions):\n        # Initiliase start, end states and pad\n        self.start_state = np.pad(state_in, (1,1), 'constant', constant_values=(0,))\n        self.end_state = np.pad(state_out, (1,1), 'constant', constant_values=(0,))\n        self.transitions = transitions\n\n    def run(self):\n        \n        current_state = self.start_state.copy()\n        \n        # Symmetry: handles situation where we need to propagate the colours horizontally\n        symmetry_red = np.zeros((1, 3), dtype=np.uint8)\n        symmetry_azu = np.zeros((1, 3), dtype=np.uint8)\n        symmetry_red[0, 0] = red\n        symmetry_azu[0, 0] = azu\n        next_symmetry_red = symmetry_red.copy()\n        next_symmetry_azu = symmetry_azu.copy()\n\n        next_symmetry_red[0, 2] = azu\n        next_symmetry_azu[0, 2] = red\n        \n        \n        while not np.array_equal(current_state, self.end_state):\n            # Have we filled a the height of the matrix with this colour?\n            if current_state[1, 8] == azu and not ''.join([str(i) for i in symmetry_red.flatten()]) in self.transitions.keys(): # if azu add symmetry\n                # if yes then add symmetry transitions\n                self.transitions[''.join([str(i) for i in symmetry_red.flatten()])] = next_symmetry_red\n                self.transitions[''.join([str(i) for i in symmetry_azu.flatten()])] = next_symmetry_azu\n            \n            # Go over matrix and keep updating neighbourhoods\n            for i in range(1, current_state.shape[0]-1):\n                for j in range(1, current_state.shape[1]-2):\n                    current_nbh = current_state[i-1:i+2, j-1:j+2]\n                    if len(self.transitions.keys()) == 4:\n                        current_nbh = current_nbh[1]\n                        \n                    if ''.join([str(i) for i in current_nbh.flatten()]) not in self.transitions.keys():\n                        continue\n                        \n                    new_nbh = self.transitions[''.join([str(i) for i in current_nbh.flatten()])]\n                    if len(self.transitions.keys()) < 4:\n                        current_state[i-1:i+2, j-1:j+2] = new_nbh\n                    else:\n                        current_state[i, j-1:j+2] = new_nbh\n        self.evolved_state = current_state\n        \n    def get_state(self):\n        return self.evolved_state","9c9af79b":"transitions = {}\n# Vertical\nsymbol_red = np.zeros((3, 3), dtype=np.uint8)\nsymbol_azu = np.zeros((3, 3), dtype=np.uint8)\nsymbol_red[0, 1] = red\nsymbol_azu[2, 1] = azu\n\nnext_red = symbol_red.copy()\nnext_azu = symbol_azu.copy()\nnext_red[1, 1] = red\nnext_azu[1, 1] = azu\n\ntransitions[''.join([str(i) for i in symbol_red.flatten()])] = next_red\ntransitions[''.join([str(i) for i in symbol_azu.flatten()])] = next_azu\n\ndfsa = DFSA(first_task_in, first_task_out, transitions)\n\ndfsa.run()\n\nplt.imshow(dfsa.get_state(), cmap=cmap, norm=norm)\nplt.show()","6224f7f5":"# Closing Remarks","09a6ca1e":"To fill up the columns with the corresponding colours we define two transitions:\n* if the current cell is black and above there is a red cell then fill with red\n* if the current cell is black and below there is an azure cell then fill with azure\n\nTo add these the 3x3 neighbourhood is flattened and a string representation is obtained to act as a key to a dictionary mapping neighbourhood seen to the resulting one.","347fc639":"This notebook will attempt to explore how tasks (a very easy one initially) can be solved by a Deterministic Finite State Automaton (DFSA).  As a primer let me define a DFSA.\n\nA DFSA consists of:\n* a finite set of states $Q$\n* a finite alphabet $\u03a3$\n* a transition function $\u03b4: Q \\times \u03a3 \\rightarrow Q$\n* an initial state $q_0 \\in Q$\n* a set of accepting states $F \\subseteq Q$\n\nGiven that Cellular Automata (CA) have a start state and several rules that they follow in my opinion the connection to DFSA is somewhat natural.  This is because the rules can be the transition function, the start state is trivial and if we take into consideration non-oscillating CA then there is a terminating state as well.\n","d6b78809":"Now that we have shown the task let us discuss the DFSA connections.","c1a11482":"Below I have defined a DFSA where $q_0$ is the input of the task demonstration and there only one accepting state the output.  Both are padded with 0s with shape (1,1) so we can iterate over the working space of the task without many checks.  The alphabet is, in this case, either a neighbourhood of 3x3 around a cell or 1x3.  The reason for the latter shape is used for the symmetry aspect of the task used here.\n\n> Note that currently this only works for the horizontal demonstration not the vertical\n\nFinally, the transition functions consists of the rules, hardcoded here, and there no intermediate states, just a the starting state being updated until completion.","064c8d92":"As we can see DFSAs are somewhat natural to solve CA problems in my opinion.  This is the reason I don't believe classical CNNs trained on raw data will work in this case. I would expect that an algorithm utilising DFSA or Pushdown Automata (PDA), which support counting, are better suited to this challenge.\n\nAgain this is my opinion coming from solving a single challenge with a hardcoded approach.  However some interesting questions arise which can be investigated.  For example, the transitions rules representing \"neighbourhoods\" can probably be learned.  Another direction could be to learn DFSAs using AI techniques?\n\nTo close I believe a combination of Deep Learning techniques and DFSA might be suited to this challenge.  Given I am no expert feel free to provide some feedback!","ad9ce288":"# DFSA","57a39217":"# DFSA Connection","5a7482e9":"# Task Visualisation"}}