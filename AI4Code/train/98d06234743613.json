{"cell_type":{"50c548e3":"code","dacba9af":"code","6491df2e":"code","9c0bce16":"code","0cc1d8dd":"code","fb73a5c1":"code","98ee6e89":"code","901510a3":"code","105c782b":"code","046e982c":"code","72545599":"code","4bf9dd70":"code","c4ae29bd":"code","94dfd074":"code","6e0bcca1":"code","726e39aa":"code","fd5a91c5":"code","9c7c4369":"code","5712908c":"code","b291a265":"code","a8560a6e":"code","b9df3c3d":"code","9ba6d2fa":"code","d2fa859d":"code","7cea7bed":"code","05fa43ba":"code","9a23d9b4":"code","871cb079":"code","24574372":"code","cfa4f12f":"code","cfc7e6c1":"markdown","6db7b537":"markdown","080e6532":"markdown","411a3f9d":"markdown","e4c254e2":"markdown"},"source":{"50c548e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dacba9af":"# common imports\n\nimport numpy as np\nimport json\nimport matplotlib.pyplot as plt\n","6491df2e":"file = open('..\/input\/ships-in-satellite-imagery\/shipsnet.json')\ndataset = json.load(file)\nfile.close()","9c0bce16":"dataset.keys()","0cc1d8dd":"# write data to numpy arrays\ndata = np.array(dataset['data']).astype('uint8')","fb73a5c1":"data.shape","98ee6e89":"# extract label data \n\nlabel_data = np.array(dataset['labels']).astype('uint8')","901510a3":"label_data.shape","105c782b":"# reshape data\nchannels = 3\nwidth = 80\nheight = 80\n\nX = data.reshape(-1, 3, width, height).transpose([0,2,3,1])\nX.shape","046e982c":"# check sample shape and plot\nprint(X[800].shape)\nsample_pic = X[800]\nplt.imshow(X[800])","72545599":"type(sample_pic)","4bf9dd70":"from skimage import color","c4ae29bd":"sample_pic_gr = color.rgb2gray(sample_pic)","94dfd074":"sample_pic_gr.shape","6e0bcca1":"plt.imshow(sample_pic_gr)\nplt.set_cmap('Greys')","726e39aa":"# converting all images to greyscale. Output is a list\n\nX_grey = [ color.rgb2gray(i) for i in X]","fd5a91c5":"X_grey = np.array(X_grey)","9c7c4369":"X_grey.shape","5712908c":"plt.imshow(X_grey[800])","b291a265":"label_data[800]\n","a8560a6e":"# Training data is a 3D matrix. Convert to a 2D matrix. \n\nX_grey = X_grey.reshape(len(X_grey), -1)","b9df3c3d":"X_grey.shape","9ba6d2fa":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_grey, label_data, test_size=0.2, random_state=42)","d2fa859d":"# SVM Classifier \n\n# SVC with rbf kernel. Standard scaler\n\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n\nsvc_clf = Pipeline([\n    ('scaler', StandardScaler()),\n    ('svc', SVC(gamma='scale'))\n])\n\nsvc_clf.fit(X_train, y_train)","7cea7bed":"svc_clf.get_params","05fa43ba":"from sklearn.metrics import classification_report,accuracy_score\ny_pred = svc_clf.predict(X_test)\n\nprint(\"Accuracy: \"+str(accuracy_score(y_test, y_pred)))\nprint('\\n')\nprint(classification_report(y_test, y_pred))","9a23d9b4":"from sklearn.svm import LinearSVC\n\nlinearsvc_clf = Pipeline([\n    ('scaler', StandardScaler()),\n    ('linear_svc', LinearSVC(loss='hinge'))\n])\n\nlinearsvc_clf.fit(X_train, y_train)","871cb079":"y_pred = linearsvc_clf.predict(X_test)\n\nprint(\"Accuracy: \"+str(accuracy_score(y_test, y_pred)))\nprint('\\n')\nprint(classification_report(y_test, y_pred))","24574372":"from sklearn.linear_model import SGDClassifier\n\nsgd_clf = Pipeline([\n    ('scaler', StandardScaler()),\n    ('sgd_clf', SGDClassifier())\n])\n\nsgd_clf.fit(X_train, y_train)","cfa4f12f":"y_pred = sgd_clf.predict(X_test)\n\nprint(\"Accuracy: \"+str(accuracy_score(y_test, y_pred)))\nprint('\\n')\nprint(classification_report(y_test, y_pred))","cfc7e6c1":"### SGD Classifier","6db7b537":"### Linear SVC","080e6532":"### SVC Classifier","411a3f9d":"### SKImage \n\nConvert RGB image to Grayscale","e4c254e2":"### Sample Image"}}