{"cell_type":{"bdc26a23":"code","76c2c4e2":"code","c124b37d":"code","2af8271b":"code","8e289f2d":"code","c5110918":"code","204d35ae":"code","cd6bb5f6":"code","d3496154":"code","1e05c759":"code","b306ed01":"code","c41a8058":"code","4926831c":"code","10764a97":"code","b1cdb78c":"code","a4c3232b":"code","736599e4":"code","9f767e62":"code","05071b04":"code","db3f2a54":"code","3e0dbf74":"code","b1a257e6":"code","cf58d6fd":"code","add92560":"code","a231a54f":"code","8bc25e8d":"code","253f726d":"code","1f07bc42":"code","cd96fdb2":"code","f0eff3ee":"code","abbc9d50":"code","b0d9c1be":"markdown","5ddcf621":"markdown","2649ff37":"markdown","bb2ef491":"markdown","dac0ed6d":"markdown","36c0256a":"markdown","e7fb7f66":"markdown","a303dc3c":"markdown","7dea286b":"markdown","17560f1f":"markdown","ce97af63":"markdown","f9a545dc":"markdown"},"source":{"bdc26a23":"# !pip install -U spacy\n!pip install feedparser\n","76c2c4e2":"import feedparser","c124b37d":"sources = [\n          \"http:\/\/rss.cnn.com\/rss\/edition_travel.rss\",\n          \"http:\/\/rss.cnn.com\/rss\/edition_world.rss\",\n          \"http:\/\/rss.cnn.com\/rss\/money_news_international.rss\",\n          \"http:\/\/rss.cnn.com\/rss\/edition_technology.rss\",\n          \"http:\/\/rss.cnn.com\/rss\/edition_entertainment.rss\"\n          'https:\/\/www.espn.com\/espn\/rss\/nfl\/news',\n          'https:\/\/www.espn.com\/espn\/rss\/nba\/news',\n          'https:\/\/www.espn.com\/espn\/rss\/rpm\/news',\n          'https:\/\/www.espn.com\/espn\/rss\/soccer\/news',\n          'https:\/\/www.espn.com\/espn\/rss\/mlb\/news',\n          'https:\/\/www.espn.com\/espn\/rss\/nhl\/news',\n          'https:\/\/www.espn.com\/espn\/rss\/poker\/master',\n           'http:\/\/rss.cnn.com\/rss\/edition_sport.rss',\n           'http:\/\/rss.cnn.com\/rss\/edition_football.rss',\n           'http:\/\/rss.cnn.com\/rss\/cnn_latest.rss',\n           'http:\/\/rss.cnn.com\/rss\/edition_space.rss',\n           'http:\/\/rss.cnn.com\/rss\/edition.rss',\n           'http:\/\/rss.cnn.com\/rss\/edition_africa.rss',\n           'http:\/\/rss.cnn.com\/rss\/edition_americas.rss'\n\n          \n]","2af8271b":"feeds = []\nfor s in sources:\n  feed = feedparser.parse(s)\n  feeds.append(feed)\n  print('Cols: ', feed.entries[1].keys())","8e289f2d":"titles = []\nfor feed in feeds:\n  for content in feed.entries:\n    titles.append(content.title)","c5110918":"print(*titles[:3], sep='\\n')","204d35ae":"import spacy\nfrom  spacy.lang.en.stop_words import STOP_WORDS\nnlp = spacy.load('en_core_web_sm')","cd6bb5f6":"import re\nimport string\n\ndef cleaningText(original, show=False):\n  txt = original\n  txt = txt.lower() # lowercase\n  txt = re.sub('@','',txt) # remove @ \n  txt = re.sub('\\[.*\\]','',txt) # remove contents between brackets\n  txt = re.sub('<.*?>+','',txt) # remove contents between less and more signs\n  txt = re.sub('https?:\/\/\\S+|www\\.\\S+', '', txt) # remove URLs\n  txt = re.sub(re.escape(string.punctuation), '', txt) # remove punctuation\n  txt = re.sub(r'[^a-zA-Z ]+', '', txt) # remove numbers\n  txt = re.sub('\\n', '', txt) # remove line break\n  txt2 = nlp(txt) # creating a word's list\n  txt2 = [token.lemma_ for token in txt2 if not nlp.vocab[token.text].is_stop]\n  punct = string.punctuation\n  stopwords = list(STOP_WORDS)\n  txt2 = [word for word in txt2 if word not in stopwords and word not in punct]\n\n  if show:\n    print('ORIGINAL: ', original)\n    print('   TEXT CLEANNED: ', txt)\n    print('   WORD LIST: ', txt2[:20])\n  return txt,txt2","d3496154":"titlesClean = [cleaningText(t) for t in titles]","1e05c759":"for title, __ in titlesClean[:5]:\n  if title:\n    print('-', title)\n    for pos in nlp(title):\n      print(f'==>{pos.text} ({pos.pos_}) ', end='')\n    print()","b306ed01":"for title, __ in titlesClean[:5]:\n  if title:\n    print('-', title)\n    for pos in nlp(title):\n      if pos.pos_ == 'VERB':\n        print(f'==>{pos.text} ({pos.pos_}) ', end='')\n    print()","c41a8058":"for title, __ in titlesClean[:10]:\n  if title:\n    print('-', title)\n    for e in nlp(title).ents:\n      print(f'==>{e}: {e.label_} ({e.label}) ', end='')\n    print()","4926831c":"entityList = []\n\nfor title, __ in titlesClean[:15]:\n  if title:\n    print('-', title)\n    for e in nlp(title).ents:\n      if e.label_ == 'ORG':\n        entityList.append(e)\n        print(f'==>{e} ({e.label_}) ', end='')\n    print('')       ","10764a97":"import pandas as pd\nfor e in pd.Series(entityList).unique():\n  s1 = nlp(str(e))\n  for v in pd.Series(entityList).unique():\n    s2 = nlp(str(v))\n    try:\n      print(f'Similarity between {e} and {v}: {s2.similarity(s1)}')\n    except:\n      pass","b1cdb78c":"from spacy import displacy\nfrom IPython.display import SVG, display\ndef showSVG(s):\n  display(SVG(x))","a4c3232b":"for title, __ in titlesClean[:15]:\n  x= displacy.render(nlp(title), style = \"ent\")\n  showSVG(x)","736599e4":"doc = nlp(\"giant robot comes to life in japan\")\nfor chunk in doc.noun_chunks:\n    print(chunk.text, chunk.root.text, chunk.root.dep_,\n            chunk.root.head.text)","9f767e62":"doc = nlp(\"giant robot comes to life in japan\")\nx = displacy.render(doc)\nshowSVG(x)","05071b04":"from textblob import TextBlob\n\n# setup \ncolors = ['Green', 'Goldenrod']\nexplode = (0.01, 0.01)\nlabels = ['Positive', 'Negative']\n\npos = 0\nneg = 0\nlistWL = []\n# to DataFrame in Machine Learning\nphrase = []\nstatus = []\n\nfor title, wlist in titlesClean:\n  # creating wordlist\n  for word in wlist:\n    if len(word.strip()):\n      listWL.append(word)\n  t = TextBlob(title)\n  polarity = t.sentiment.polarity\n  if polarity != 0:\n    phrase.append(title) \n    if polarity > 0:\n        pos += 1\n        status.append(1)\n    else:\n        neg += 1\n        status.append(-1)\n\n# DataFrame to predicts Machine Learning\ndf = pd.DataFrame()\ndf['text'] = phrase\ndf['sentiment'] = status\n    ","db3f2a54":"import matplotlib.pyplot as plt\nimport seaborn as sns","3e0dbf74":"plt.figure(figsize=(15,8))\nplt.pie([pos, neg], labels=labels, colors=colors, startangle=90, explode = explode, autopct = '%1.2f%%')\nplt.axis('equal') \nplt.title('RSS CNN')\nplt.show()","b1a257e6":"fig, ax1 = plt.subplots(sharey=True, figsize=(15,9))\nsns.barplot(x=pd.Series(listWL).value_counts()[:20].index, \n            y=pd.Series(listWL).value_counts()[:20].values,\n            ax=ax1).set_title('Word List')\nplt.xlabel('word')\nplt.ylabel('count')\nplt.xticks(rotation=80)","cf58d6fd":"# sklearn\n# ML classifiers\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import LinearSVC\n\n\n# ML selecao de dados de treino e teste\nfrom sklearn.model_selection import train_test_split, cross_val_score\n# confusion matrics\nfrom sklearn.metrics import confusion_matrix\n# metrics\nfrom sklearn import metrics\n# vetorizador\nfrom sklearn.feature_extraction.text import TfidfVectorizer","add92560":"df.info()","a231a54f":"df.head()","8bc25e8d":"df.sample(3)","253f726d":"df.isnull().sum()","1f07bc42":"df.sentiment.plot()\n","cd96fdb2":"X = df.text\ny = df.sentiment\n\nXtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n\ntxtvector = TfidfVectorizer()\nvXtrain = txtvector.fit_transform(Xtrain)\nvXtest = txtvector.transform(Xtest)","f0eff3ee":"# training data\nclassifiers = [\n               SGDClassifier(loss='hinge', penalty='l2', alpha=1e-3, random_state=42), \n               LinearSVC(),\n               MultinomialNB(),\n               RandomForestClassifier(n_estimators=200, max_depth=3, random_state=0),\n               LogisticRegression(random_state=0),\n               \n]\nmodels = pd.DataFrame(columns=['Name', 'Score'])\nfor classifier in classifiers:\n  model = classifier\n  model.fit(vXtrain, ytrain)\n  pred = model.predict(vXtest)\n  models = models.append({'Name': str(model).split('(')[0], 'Score': model.score(vXtrain, ytrain)}, ignore_index=True)\n  print(model)\n  print(metrics.classification_report(ytest.values, pred, target_names=['Negative', 'Positive'], zero_division=0))","abbc9d50":"sns.boxplot(x='Name', y='Score', data=models)\nchart = sns.stripplot(x='Name', y='Score', data=models, \n              size=8, jitter=True, edgecolor=\"gray\", linewidth=2)\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45)","b0d9c1be":"**Reading content**","5ddcf621":"**Similarity**","2649ff37":" **Get Sentiment from text - TextBlob**","bb2ef491":"**Improving Visualization**","dac0ed6d":"**Part of Speech - Tagging**","36c0256a":"**Analysing Title's Text**","e7fb7f66":"# **NLP - Sentiment Analysis**","a303dc3c":"**Showing verbs - Texts**","7dea286b":"**Cleaning the text and creating Word List**","17560f1f":"**Classifying Entities**","ce97af63":"# **Machine Learning - Predictions**","f9a545dc":"**Importing Libs**"}}