{"cell_type":{"55ab2436":"code","4bd3c8a5":"code","dd4f95fc":"code","945ad6f5":"code","368217f7":"code","8c181768":"code","04e798f6":"code","a190bdf2":"code","c4345aac":"code","60abccbf":"code","59f08abf":"code","e2156254":"code","8ed0cdaa":"code","6dddb5d6":"code","4edaaaba":"code","10e09a72":"code","a6d829ee":"code","aff07d5b":"code","000c6167":"code","252da2f0":"code","eabee41e":"code","992b1bff":"code","b883b9ab":"code","3a33f640":"code","0bfe5dd7":"code","5db23aec":"code","066ee7eb":"code","edd3668a":"code","6913206a":"code","c75a2d58":"code","c7412d89":"code","ec0d4840":"code","400eae60":"code","1d200df0":"code","db957f30":"code","e71f9e62":"code","0a500ed4":"code","dd8eac21":"code","361628f6":"code","6cbbc191":"code","f28de1f2":"code","1802ea8b":"code","76120223":"code","9e896c37":"code","e6047070":"code","4a0b53e8":"code","b7f85b82":"code","380ff752":"code","97d3e94e":"code","c02df61f":"code","bcb31912":"code","3fcd2bee":"code","3b9c2977":"code","52894064":"code","2c1df9e5":"code","31c58e14":"code","52e9c32c":"markdown","c763cc99":"markdown","22b04feb":"markdown","d538e63a":"markdown","ad4170a7":"markdown","c7e2fce3":"markdown","e9a46028":"markdown","09d9ad03":"markdown","c3ed7ea6":"markdown","3bc0df11":"markdown","489d2d31":"markdown","cfc6f973":"markdown","69fcde3f":"markdown","a401cf9e":"markdown","2c0ee128":"markdown","51507fad":"markdown","c3de1583":"markdown","19be4ded":"markdown","3c1a8801":"markdown","e7b54f93":"markdown","522d544d":"markdown"},"source":{"55ab2436":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\nimport sys\nimport re\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport gc\nfrom sklearn.model_selection import train_test_split","4bd3c8a5":"!unzip \/kaggle\/input\/job-salary-prediction\/Train_rev1.zip","dd4f95fc":"!unzip \/kaggle\/input\/job-salary-prediction\/Test_rev1.zip","945ad6f5":"train = pd.read_csv(\"Train_rev1.csv\")\ntrain.head()","368217f7":"test = pd.read_csv(\"Test_rev1.csv\")\ntest.head()","8c181768":"train.head(30)","04e798f6":"train[\"Title\"] = train[\"Title\"].apply(lambda item: str(item).lower())","a190bdf2":"len(train[\"Title\"].unique())","c4345aac":"train[\"Title\"].value_counts()[:30]","60abccbf":"train[\"LocationNormalized\"] = train[\"LocationNormalized\"].apply(lambda item: item.lower())","59f08abf":"len(train[\"LocationNormalized\"].unique())","e2156254":"train[\"LocationNormalized\"].value_counts()[:50]","8ed0cdaa":"train[\"ContractTime\"].value_counts()","6dddb5d6":"train[\"ContractType\"].value_counts().plot(kind=\"bar\")","4edaaaba":"train[\"Company\"] = train[\"Company\"].apply(lambda item: str(item).lower())","10e09a72":"len(train[\"Company\"].unique())","a6d829ee":"train[\"Company\"].value_counts()[:30]","aff07d5b":"train[\"Category\"].value_counts().plot(kind='bar')","000c6167":"train[\"SalaryNormalized\"].hist()","252da2f0":"train[\"SalaryNormalized\"].describe()","eabee41e":"train_test = pd.concat([train, test], axis=0)\ntrain_test.head()","992b1bff":"sys.setrecursionlimit(100000)\nbegin = time.time()\nfull_texts = []\nfor i in range(len(train_test)):\n    item = train_test.iloc[i]\n    full_text = \"title %s company %s location %s description %s\"%(str(item[\"Title\"]), str(item[\"Company\"]), str(item[\"LocationNormalized\"]), str(item[\"FullDescription\"]))\n    full_texts.append(full_text)\nprint(\"Elapsed time: %.2fs\"%(time.time() - begin))","b883b9ab":"train_test[\"full_text\"] = full_texts","3a33f640":"del full_texts\ngc.collect()","0bfe5dd7":"def preprocess(df):\n    df['full_text'] = df['full_text'].str.replace(r'[^\\w\\s]+', '')\n    df['full_text'] = df['full_text'].str.lower()\n    df[\"full_text_tokens\"] = df[\"full_text\"].apply(lambda item: item.split(\" \"))\n    df[\"full_text_sequence_length\"] = df[\"full_text_tokens\"].apply(lambda item: len(item))\n    return df","5db23aec":"%%time\ntrain_test = preprocess(train_test)\ntrain_test.head()","066ee7eb":"train_samples = len(train)\ntest_samples = len(test)","edd3668a":"del train\ndel test\ngc.collect()","6913206a":"train_test[\"full_text_sequence_length\"].describe()","c75a2d58":"categorical_columns = [\"ContractType\", \"ContractTime\", \"Category\"]\nfor category in categorical_columns:\n    train_test[category].replace(np.NAN, \"unknown\")","c7412d89":"X_categorical = pd.get_dummies(train_test[categorical_columns])\nX_categorical.head()","ec0d4840":"%%time\nfrom collections import defaultdict\nword_count = defaultdict(int)\nfor tokens in train_test[\"full_text_tokens\"]:\n    for token in tokens:\n       word_count[token] += 1","400eae60":"word_count_df = pd.DataFrame({\"key\": word_count.keys(), \"count\": word_count.values()})\nword_count_df.head()","1d200df0":"len(word_count_df)","db957f30":"word_count_df.sort_values(by=\"count\", inplace=True, ascending=False)\nword_count_df.head(30)","e71f9e62":"len(word_count_df[word_count_df[\"count\"] <= 3])","0a500ed4":"X_text = train_test[\"full_text\"]\ntrain_categorical = X_categorical.iloc[0:train_samples]\ntest_categorical = X_categorical.iloc[train_samples:]\ntrain_text = X_text.iloc[0:train_samples]\ntest_text = X_text.iloc[train_samples:]\ntrain_label = train_test.iloc[0:train_samples][\"SalaryNormalized\"]\ndel train_test\ngc.collect()","dd8eac21":"x_train_categorical, x_valid_categorical, x_train_text, x_valid_text, y_train_label, y_valid_label  = train_test_split(train_categorical, train_text, train_label, test_size=0.2, random_state=42)","361628f6":"def preprocess_test(categorical, text):\n    return (categorical, text), 0\ndef make_dataset(categorical, text, label=None, batch_size = 1024, mode=\"train\"):\n    if mode == \"test\":\n        ds = tf.data.Dataset.from_tensor_slices((categorical, text)).map(preprocess_test)\n    else:\n        ds = tf.data.Dataset.from_tensor_slices(((categorical, text), label))\n    if mode == \"train\":\n        ds = ds.shuffle(1024)\n    ds = ds.batch(batch_size).cache().prefetch(tf.data.AUTOTUNE)\n    return ds","6cbbc191":"train_ds = make_dataset(x_train_categorical, x_train_text, y_train_label)\nprint(train_ds)\nvalid_ds = make_dataset(x_valid_categorical, x_valid_text, y_valid_label, mode=\"valid\")\nprint(valid_ds)\ntest_ds = make_dataset(test_categorical, test_text, mode=\"test\")\nprint(test_ds)","f28de1f2":"del x_train_categorical\ndel x_train_text\ndel y_train_label\ndel x_valid_categorical\ndel x_valid_text\ndel y_valid_label\ngc.collect()","1802ea8b":"for item in train_ds.take(1):\n    print(item)","76120223":"class Config:\n\n    vocab_size = 30000\n    \n    sequence_length = 256 # Length of sequence\n\n    random_state = 42\n    \nconfig = Config()","9e896c37":"vectorizer = layers.TextVectorization(\n    max_tokens=config.vocab_size, \n    output_sequence_length=config.sequence_length\n)","e6047070":"%%time\nwith tf.device(\"CPU\"):\n    vectorizer.adapt(X_text)","4a0b53e8":"del X_text\ngc.collect()","b7f85b82":"def get_model():\n    text_model = keras.Sequential([\n        keras.Input(shape=(None, ), dtype=\"string\"),\n        vectorizer,\n        layers.Embedding(config.vocab_size, 128, input_length=config.sequence_length, mask_zero=True),\n        layers.Conv1D(filters=32, kernel_size=3, activation=\"relu\"),\n        layers.MaxPooling1D(),\n        layers.Conv1D(filters=64, kernel_size=3, activation=\"relu\"),\n        layers.MaxPooling1D(),\n        layers.Conv1D(filters=128, kernel_size=3, activation=\"relu\"),\n        layers.MaxPooling1D(),\n        layers.GlobalAveragePooling1D(),\n        layers.Dense(32, kernel_regularizer='l2'),\n    ])\n    categorical_model = keras.Sequential([\n        keras.Input(shape=(33, ), dtype=tf.int32),\n        layers.Dense(128, activation=\"relu\", kernel_regularizer='l2'),\n        layers.Dense(64, activation=\"relu\", kernel_regularizer='l2'),\n        layers.Dense(32, activation=\"relu\", kernel_regularizer='l2'),\n    ])\n    x = keras.layers.Concatenate()([text_model.output, categorical_model.output])\n    x = keras.layers.Dense(32, activation=\"relu\")(x)\n    output = keras.layers.Dense(1, activation=\"relu\")(x)\n    model = keras.Model(inputs=[categorical_model.input, text_model.input], outputs=[output])\n    return model, text_model, categorical_model","380ff752":"model, text_model, categorical_model = get_model()","97d3e94e":"model.summary()","c02df61f":"tf.keras.utils.plot_model(model, show_shapes=True)","bcb31912":"text_model.summary()","3fcd2bee":"tf.keras.utils.plot_model(text_model, show_shapes=True)","3b9c2977":"categorical_model.summary()","52894064":"tf.keras.utils.plot_model(categorical_model, show_shapes=True)","2c1df9e5":"early_stopping = tf.keras.callbacks.EarlyStopping(patience=10, monitor=\"val_loss\")\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(\"model.tf\", monitor=\"val_loss\", save_best_only=True)\nmodel.compile(loss=\"mse\", optimizer=\"adam\", metrics=[\"mae\"])\nmodel.fit(train_ds, epochs=30, validation_data=valid_ds, callbacks=[checkpoint, early_stopping])","31c58e14":"test = pd.read_csv(\"..\/input\/job-salary-prediction\/test.csv\")\ny_pred = model.predict(test_ds)\ntest[\"SalaryNormalized\"] = y_pred\ntest.to_csv(\"submission.csv\", index=False)\ntest.head()","52e9c32c":"### Analysis of word counts","c763cc99":"## Make Tensorflow dataset","22b04feb":"### Contract Time","d538e63a":"## Job Salary Prediction with TensorFlow\nNow I am going to build a Model to predict Salary using TensorFlow. For some kind of text information with limited categories, I will treat it as category feature. For some kinds of long text information such as job description, or text information with too many categories such as job title, company, location, I will process it using NLP technique.","ad4170a7":"## Modeling","c7e2fce3":"### Train validation split","e9a46028":"### Total Number of words","09d9ad03":"### Locations","c3ed7ea6":"### Popular titles","3bc0df11":"## Submission","489d2d31":"### Category","cfc6f973":"## Handle Categorical Features","69fcde3f":"## Model Training","a401cf9e":"## Title","2c0ee128":"## ","51507fad":"## Import datasets","c3de1583":"## EDA &preprocessing","19be4ded":"## Text Vectorization","3c1a8801":"### Company","e7b54f93":"### Contract Type","522d544d":"### Salary"}}