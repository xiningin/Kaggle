{"cell_type":{"8c4bc7f2":"code","46daa55f":"code","ab73890b":"code","afc1c545":"code","89934b27":"code","4d6d57dc":"code","fb552ef1":"code","b1cc7c21":"code","546bd51d":"code","84a77f90":"code","8063fb83":"code","9d964466":"code","2eb77fbc":"code","6d6947b2":"code","3fed8266":"code","e4a6eb31":"code","801bef60":"code","a262fe74":"code","3573ed0e":"code","d5398470":"code","03626808":"code","7e012a44":"code","e37624c3":"code","a253dbd6":"code","99363b74":"code","bd484942":"code","c52d31e9":"code","ee784e59":"code","9ddb24d8":"code","69976723":"code","177bd02c":"code","c97cea6d":"code","a14ba4b0":"code","19bbffa8":"markdown","b4c4266a":"markdown"},"source":{"8c4bc7f2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport random\nfrom tqdm import tqdm\nimport xgboost as xgb\nimport tensorflow as tf\nfrom keras.applications.resnet50 import ResNet50\n# from keras.applications.resnet18 import ResNet18\nfrom keras.models import Model\nfrom keras.preprocessing import image\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\nfrom keras.layers import Flatten, Input\nimport scipy\nfrom sklearn.metrics import fbeta_score\nfrom keras.applications.vgg16 import VGG16\nfrom keras.preprocessing import image\nfrom keras.applications.vgg16 import preprocess_input\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nimport xgboost","46daa55f":"data_path = \"..\/input\/fruits\/data\/\"\n\ntrain = os.path.join(data_path, r'train')\n\ntrain_images = sorted(os.listdir(train))\nprint(\"Total number of images in the training set: \", len(train_images))","ab73890b":"filenames = os.listdir('..\/input\/fruits\/data\/train\/')\nfiles = []\ncategories = []\nfor file in filenames:\n    category = file.split('_')[0]\n    files.append('..\/input\/fruits\/data\/train\/' + file)\n    categories.append(category)\n        \n        \ndf = pd.DataFrame({\n    'filename': files,\n    'category': categories\n})","afc1c545":"df.head()","89934b27":"df['category'].value_counts()","4d6d57dc":"df.shape","fb552ef1":"le = preprocessing.LabelEncoder()\nle.fit(df['category'])","b1cc7c21":"y = le.transform(df['category'])","546bd51d":"base_model = VGG16(weights='imagenet', include_top=False)\ninputs = Input(shape=(48,48,3),name = 'image_input')\nx = base_model(inputs)\nx = Flatten()(x)\nmodel = Model(inputs=inputs, outputs=x)","84a77f90":"import time\nstart = time.time()\n\nx_train = []\ny_train = []\n\nfor f in tqdm(df.filename[:]):\n    img_path = f\n    img = image.load_img(img_path, target_size=(48, 48))\n    x = image.img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    x = preprocess_input(x)\n\n    features = model.predict(x)\n    features_reduce =  features.squeeze()\n    x_train.append(features_reduce)","8063fb83":"x_train = pd.DataFrame(x_train)","9d964466":"x_train.head()","2eb77fbc":"scaler = MinMaxScaler()\nscaler.fit(x_train)\nx_train = scaler.transform(x_train)","6d6947b2":"x_train.shape","3fed8266":"x_train, x_valid, y_train, y_valid = train_test_split(x_train, y, test_size = 0.2, stratify = y, random_state = 8)","e4a6eb31":"from sklearn import neighbors\nclf = neighbors.KNeighborsClassifier(n_neighbors = 1, p = 1)\nclf.fit(x_train, y_train)","801bef60":"y_pred = clf.predict(x_valid)","a262fe74":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nprint(accuracy_score(y_pred, y_valid))\nprint(f1_score(y_pred, y_valid, average=\"macro\"))","3573ed0e":"import seaborn as sn\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint('Confusion Matrix')\ncm = confusion_matrix(y_pred, y_valid)\nprint(cm)\nsn.set(font_scale=1.4)#for label size\nsn.heatmap(cm, annot=True,annot_kws={\"size\": 16})# font size","d5398470":"data_path = \"..\/input\/fruits\/data\/\"\ntest = os.path.join(data_path, r'test')\ntest_images = sorted(os.listdir(test))\nprint(\"Total number of images in the test set: \", len(test_images))","03626808":"filenames = os.listdir('..\/input\/fruits\/data\/test\/')\nfiles = []\ncategories = []\nfor file in filenames:\n    category = file.split('_')[0]\n    files.append('..\/input\/fruits\/data\/test\/' + file)\n    categories.append(category)\n        \n        \ndf = pd.DataFrame({\n    'filename': files,\n    'category': categories\n})","7e012a44":"df.head()","e37624c3":"df['category'].value_counts()","a253dbd6":"df.shape","99363b74":"le = preprocessing.LabelEncoder()\nle.fit(df['category'])","bd484942":"y = le.transform(df['category'])","c52d31e9":"start = time.time()\n\nx_test = []\ny_test = y\n\nfor f in tqdm(df.filename[:]):\n    img_path = f\n    img = image.load_img(img_path, target_size=(48, 48))\n    x = image.img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    x = preprocess_input(x)\n\n    features = model.predict(x)\n    features_reduce =  features.squeeze()\n    x_test.append(features_reduce)","ee784e59":"x_test = pd.DataFrame(x_test)","9ddb24d8":"x_test.head()","69976723":"scaler = MinMaxScaler()\nscaler.fit(x_train)\nx_test = scaler.transform(x_test)","177bd02c":"x_test.shape","c97cea6d":"y_pred = clf.predict(x_test)","a14ba4b0":"print(accuracy_score(y_pred, y_test))\nprint(f1_score(y_pred, y_test, average=\"macro\"))","19bbffa8":"get trainning data","b4c4266a":"accuracy on the test set"}}