{"cell_type":{"02e0dc65":"code","9f5e6256":"code","2cf9670a":"code","49d88956":"code","8b18d958":"code","81c6b990":"code","6cf9cea8":"code","e4acaf11":"code","902c5084":"code","a704f330":"code","5899a9b0":"code","e0d7966e":"markdown"},"source":{"02e0dc65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f5e6256":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import sigmoid_kernel","2cf9670a":"movies_data = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\nmovies_data.head()","49d88956":"#eliminating missing values.\nprint(pd.isnull(movies_data['overview']).sum())\nmovies_data['overview'] = movies_data['overview'].fillna('')\nprint(pd.isnull(movies_data['overview']).sum())","8b18d958":"#generating tf-idf vectors for text document.\ntfidf = TfidfVectorizer(min_df=5, max_df=0.9, ngram_range=(1,3), stop_words='english')\ntfidf_data = tfidf.fit_transform(movies_data['overview'])\ntfidf_data","81c6b990":"#getting similarity scores between all pairs of movie summaries.\nsim_matrix = sigmoid_kernel(tfidf_data, tfidf_data)\n#sample: for movie at index 0, similarity scores wrt every other movie.\nsim_matrix[0]","6cf9cea8":"#dict of movie titles and indices.\nindex_list = np.arange(0,movies_data.shape[0])\ntitle_list = movies_data['original_title']\ntitle2idx = dict(zip(title_list,index_list))","e4acaf11":"#function to generate recommendations.\ndef recommend_movie(current_title):\n    for title,idx in title2idx.items():\n        if title==current_title:\n            current_idx = idx\n    sim_scores = sim_matrix[current_idx]\n    sim_scores = list(enumerate(sim_scores))\n    sim_scores_sorted = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    \n    #getting top 10 recommendations based on similarity scores.\n    top_similar_movies = sim_scores_sorted[1:11]\n    \n    print('Top Recommendations based on current movie: ',current_title)\n    for i in top_similar_movies:\n        for title, idx in title2idx.items():\n            if i[0]==idx:\n                print(i[0],title,'\\n')\n    ","902c5084":"recommend_movie('Avatar')","a704f330":"recommend_movie('Spectre')","5899a9b0":"recommend_movie('The Dark Knight Rises')","e0d7966e":"# Generating top 10 recommendations based on current movie, using the movie summary(content)."}}