{"cell_type":{"e01de03a":"code","2a99e5a7":"code","43391163":"code","c49bc4c5":"code","e6ff328b":"code","2a7e1dbe":"code","b991c703":"code","969c01d3":"code","051e8e0c":"code","ad4800f0":"code","29340201":"code","86286d13":"code","3c72cb67":"code","75bd9476":"code","bec6864c":"code","2000608a":"code","0e550efe":"code","3421810d":"code","3cea709b":"code","fe673aad":"code","035a7305":"code","e5302796":"code","264ca2a1":"code","bfda772b":"code","a0e7cdf6":"code","65c896de":"code","fcc969fa":"markdown"},"source":{"e01de03a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a99e5a7":"import keras\nfrom keras.preprocessing.text import one_hot, Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Bidirectional\nfrom keras.layers.embeddings import Embedding\nfrom keras.models import Sequential\n","43391163":"import pandas as pd\n\n \nfrom pandas import DataFrame\nTrain = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")\nTest = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\n","c49bc4c5":"s= pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')","e6ff328b":"Test.head()","2a7e1dbe":"Train['target'].value_counts()","b991c703":"Test.count()","969c01d3":"X_train = Train['text'].astype(str)\ny_train = Train['target']\n\n","051e8e0c":"X_test=Test['text'].astype(str)","ad4800f0":"\nmax_num_words = 20000\nmax_length = 200\ntokenizer = Tokenizer(num_words=max_num_words)\ntokenizer.fit_on_texts(X_train)\nword_index = tokenizer.word_index\nprint('Found %s unique tokens.' % len(word_index))\n","29340201":"def get_seqs(text):\n    sequences = tokenizer.texts_to_sequences(text)\n    padded_sequences = pad_sequences(sequences, maxlen=max_length, padding='post')\n    return padded_sequences\n","86286d13":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom keras.models import Model, Input\nfrom keras.layers import Dense, LSTM, Dropout, Embedding, SpatialDropout1D, Bidirectional, concatenate, InputSpec\nfrom keras.layers import GlobalAveragePooling1D, GlobalMaxPooling1D\nfrom keras.models import Sequential\n\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import MultiLabelBinarizer, LabelEncoder\nimport regex as re\nimport pickle\nimport numpy as np\n\nfrom keras.engine.topology import Layer\nfrom keras import initializers as initializers, regularizers, constraints\nfrom keras import backend as K\n\n\n        \nclass AttentionWeightedAverage(Layer):\n    \"\"\"\n    Computes a weighted average attention mechanism from:\n        Zhou, Peng, Wei Shi, Jun Tian, Zhenyu Qi, Bingchen Li, Hongwei Hao and Bo Xu.\n        \u201cAttention-Based Bidirectional Long Short-Term Memory Networks for Relation Classification.\u201d\n        ACL (2016). http:\/\/www.aclweb.org\/anthology\/P16-2034\n    How to use:\n    see: [BLOGPOST]\n    \"\"\"\n\n    def __init__(self, return_attention=False, **kwargs):\n        self.init = initializers.get('uniform')\n        self.supports_masking = True\n        self.return_attention = return_attention\n        super(AttentionWeightedAverage, self).__init__(** kwargs)\n\n    def build(self, input_shape):\n        self.input_spec = [InputSpec(ndim=3)]\n        assert len(input_shape) == 3\n\n        self.w = self.add_weight(shape=(input_shape[2], 1),\n                                 name='{}_w'.format(self.name),\n                                 initializer=self.init)\n        self.trainable_weights = [self.w]\n        super(AttentionWeightedAverage, self).build(input_shape)\n\n    def call(self, h, mask=None):\n        h_shape = K.shape(h)\n        d_w, T = h_shape[0], h_shape[1]\n        \n        logits = K.dot(h, self.w)  # w^T h\n        logits = K.reshape(logits, (d_w, T))\n        alpha = K.exp(logits - K.max(logits, axis=-1, keepdims=True))  # exp\n        \n        # masked timesteps have zero weight\n        if mask is not None:\n            mask = K.cast(mask, K.floatx())\n            alpha = alpha * mask\n        alpha = alpha \/ K.sum(alpha, axis=1, keepdims=True) # softmax\n        r = K.sum(h * K.expand_dims(alpha), axis=1)  # r = h*alpha^T\n        h_star = K.tanh(r)  # h^* = tanh(r)\n        if self.return_attention:\n            return [h_star, alpha]\n        return h_star\n\n    def get_output_shape_for(self, input_shape):\n        return self.compute_output_shape(input_shape)\n\n    def compute_output_shape(self, input_shape):\n        output_len = input_shape[2]\n        if self.return_attention:\n            return [(input_shape[0], output_len), (input_shape[0], input_shape[1])]\n        return (input_shape[0], output_len)\n\n    def compute_mask(self, input, input_mask=None):\n        if isinstance(input_mask, list):\n            return [None] * len(input_mask)\n        else:\n            return None\n","3c72cb67":"\nfrom keras.preprocessing.text import one_hot, Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Bidirectional,Flatten,Dense\nfrom keras.layers.embeddings import Embedding\nfrom keras.models import Sequential\n\nmodel = Sequential()\n  \nmodel.add(Embedding(20000, 100, input_length=200))\n\n\nmodel.add(LSTM(units=250, return_sequences=True, dropout=0.1, recurrent_dropout=0.2))\nmodel.add(LSTM(units=250, return_sequences=True, dropout=0.1, recurrent_dropout=0.2))\n\nmodel.add(Bidirectional(LSTM(units=250, return_sequences=True, dropout=0.1, recurrent_dropout=0.2)))\nmodel.add(AttentionWeightedAverage())\n\nmodel.add(Dense(400, activation='relu'))\nmodel.add(Dense(200, activation='relu'))\n\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()","75bd9476":"history= model.fit(get_seqs(X_train), y_train, epochs=6,batch_size=64)\n","bec6864c":"validation_sample = Train.sample(1000, random_state=42)\nX_val = validation_sample['text'].astype(str)\ny_val = validation_sample['target']\n","2000608a":"loss, accuracy = model.evaluate(get_seqs(X_val), y_val)\nprint('Evaluation accuracy: {0}'.format(accuracy))\n","0e550efe":"probs = model.predict(get_seqs(X_test), verbose=1)\n","3421810d":" preds = model.predict(get_seqs(X_test))\n","3cea709b":"preds","fe673aad":"Test.head()","035a7305":"submission = pd.DataFrame(Test['id']).reset_index(drop=True)","e5302796":"probs = [x[] for x in probs]\n","264ca2a1":"probs = [x[0] for x in probs]\nprobs","bfda772b":"submission['target'] = pd.Series(np.round(probs, 0), name='target')\n","a0e7cdf6":"submission.to_csv('submission.csv', index=False)","65c896de":"submission.tail()","fcc969fa":"The notebook will walk you throw how you can apply soft attention and B-LSTM to classify texts [ I have not included Data cleaning in this version ] also how you can make submissions."}}