{"cell_type":{"0cbbf72d":"code","75332d4c":"code","90c97c6a":"code","8f709d55":"code","23cd0ef0":"code","f99b5591":"code","b077ba8b":"code","98591059":"code","ca94a94e":"code","f8670142":"code","752666b5":"code","e3cbf2dd":"code","f1ca4da7":"code","f502814c":"code","1a430cec":"code","fea94024":"code","230931f2":"code","fd7bcc40":"code","85be83c4":"code","5705fd88":"code","bf1c3f4f":"code","ec334c4b":"code","74197160":"code","74188e26":"code","eb94f7ae":"code","ad302576":"code","37927d69":"code","1ad2555e":"code","1c4cbef2":"code","739b481f":"code","8a2bff78":"code","8a9c116c":"code","1c65aab3":"code","27eec7f2":"code","9755e8f4":"markdown","cf00b1d0":"markdown","3b794ea4":"markdown","8bcf2d9d":"markdown","80a0be39":"markdown","72df6eb0":"markdown","b45bd979":"markdown","a748ec56":"markdown","a3e2ee99":"markdown","77a33204":"markdown","c44f188e":"markdown","caabd6d8":"markdown","ab690b88":"markdown"},"source":{"0cbbf72d":"import os\nprint(os.listdir('..\/input\/bugs-classification\/bugs'))","75332d4c":"dataPath = '..\/input\/bugs-classification\/bugs'","90c97c6a":"# Import Libraries\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense\nfrom sklearn.metrics import classification_report, confusion_matrix","8f709d55":"import numpy as np\nimport cv2\nimport glob\nimport random\n\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt","23cd0ef0":"def prepare_image(filepath):\n    img = cv2.imread(filepath)\n    img_resized = cv2.resize(img, (224, 224), interpolation=cv2.INTER_CUBIC)\n    img_result  = cv2.cvtColor(img_resized, cv2.COLOR_BGR2RGB)\n    return img_result","f99b5591":"dirList = glob.glob(dataPath+'\/*') # list of all directories in dataPath\ndirList.sort() # sorted in alphabetical order\nprint(dirList)","b077ba8b":"Y_data = []\nfor i in range(len(dirList)):\n    fileList = glob.glob(dirList[i]+'\/*')\n    [Y_data.append(i) for file in fileList]\nprint(Y_data)","98591059":"X_data = []\nfor i in range(len(dirList)):\n    fileList = glob.glob(dirList[i]+'\/*')\n    [X_data.append(prepare_image(file)) for file in fileList]\nX_data = np.asarray(X_data)\nprint(X_data.shape)","ca94a94e":"## random shuffle\nfrom sklearn.utils import shuffle\nX_data, Y_data = shuffle(X_data, Y_data, random_state=0)","f8670142":"print(Y_data)","752666b5":"testNum = random.randint(0,len(X_data)-1)\nprint(testNum)\nplt.imshow(X_data[testNum])","e3cbf2dd":"num_classes = len(dirList) \nlabels = [dir.replace(dataPath+\"\/\", \"\") for dir in dirList]\nprint(labels)","f1ca4da7":"equilibre = []\n[equilibre.append(Y_data.count(i)) for i in range(len(dirList))]\nprint(equilibre)","f502814c":"# plot the circle of value counts in dataset\nplt.figure(figsize=(5,5))\nmy_circle=plt.Circle( (0,0), 0.5, color='white')\nplt.pie(equilibre, labels=labels, colors=['red','green','blue','yellow'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","1a430cec":"# Data Normalisation\nX_train = X_data \/ 255.0\nprint(X_train.shape)","fea94024":"# One-hot encoding\nY_train = to_categorical(Y_data)\nprint(Y_train.shape)","230931f2":"input_shape = (224, 224, 3)","fd7bcc40":"# use MobieNet V2 as base model\nnet=MobileNetV2(input_shape=(224,224,3),weights='imagenet',include_top=False) \n\n# add Fully-Connected Layers to Model\nx=net.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(1024,activation='relu')(x) # FC layer 1\nx=Dense(64,activation='relu')(x)   # FC layer 2\nout=Dense(num_classes,activation='softmax')(x) #final layer with softmax activation\n\nmodel=Model(inputs=net.input,outputs=out)\n\nmodel.summary()","85be83c4":"# show layers no. & name\nfor i,layer in enumerate(model.layers):\n    print(i,layer.name)","5705fd88":"# set extra layers to trainable \nfor layer in model.layers[:155]:\n    layer.trainable=False\nfor layer in model.layers[155:]:\n    layer.trainable=True","bf1c3f4f":"model.summary()","ec334c4b":"# Compile Model\nmodel.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])","74197160":"# Train Model (target is loss <0.01)\nbatch_size= 16\nnum_epochs = 20\nhistory = model.fit(X_train,Y_train,batch_size=batch_size,epochs=num_epochs) #,validation_data=(X_valid,Y_valid))","74188e26":"# Save Model\nmodel.save('pests.h5')","eb94f7ae":"def classify_fruits(imageFile):\n    testData = prepare_image(imageFile).reshape(1,224,224,3)\n    testData = testData \/ 255.0\n    predictions = model.predict(testData)\n    maxindex = int(np.argmax(predictions))\n    print(predictions[0][maxindex],labels[maxindex])\n    return labels[maxindex]","ad302576":"imageFile=dirList[0]+'\/Cerambycidae_0.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_fruits(imageFile)","37927d69":"imageFile=dirList[1]+'\/P. xylostella_0.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_fruits(imageFile)","1ad2555e":"imageFile=dirList[2]+'\/T. papillosa_0.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_fruits(imageFile)","1c4cbef2":"imageFile=dirList[3]+'\/Termite_0.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_fruits(imageFile)","739b481f":"Y_pred = model.predict(X_train)\ny_pred = np.argmax(Y_pred,axis=1)\n#y_label= [labels[k] for k in y_pred]\ncm = confusion_matrix(Y_data, y_pred)\nprint(cm)","8a2bff78":"print(classification_report(Y_data, y_pred, target_names=labels))","8a9c116c":"TP = cm[1, 1]\nTN = cm[0, 0]\nFP = cm[0, 1]\nFN = cm[1, 0]\nspecificity = TN \/ float( TN + FP)\nsensitivity = TP \/ float(FN + TP)\nprint('Specificity:',specificity)\nprint('Sensitivity:',sensitivity)","1c65aab3":"import itertools\ndef plot_confusion_matrix(cm,\n                          target_names,\n                          title='Confusion matrix',\n                          cmap=None,\n                          normalize=True):\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n        \n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()","27eec7f2":"plot_confusion_matrix(cm, \n                      normalize=False,\n                      target_names = labels,\n                      title=\"Confusion Matrix, not Normalized\")","9755e8f4":"### check 1 picture per category","cf00b1d0":"## Load MobileNet v2 model & add FC-layers","3b794ea4":"# Worms Classification\n## Transfer Learning : Mobilenet V2","8bcf2d9d":"## Transfer Learning setup","80a0be39":"### set FC-layers to trainable","72df6eb0":"### shuffle data","b45bd979":"## Dataset = worms4 (Cerambycidae, P. xylostella, T. papillosa, Termite)","a748ec56":"## Data Normalisation","a3e2ee99":"## Confusion Matrix report","77a33204":"## Prepare Data","c44f188e":"## Test Model","caabd6d8":"## Save Model","ab690b88":"## Plot Confusion Matrix"}}