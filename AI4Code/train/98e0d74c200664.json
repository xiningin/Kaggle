{"cell_type":{"8889d635":"code","3d7ee76a":"code","913babc5":"code","7a39c91a":"code","4778e0a7":"code","ff4bbab3":"code","e560f5b4":"code","49774aad":"code","ffd6ae0a":"code","a60a2fa3":"code","3504d74b":"code","c18b57e4":"code","e17822fa":"code","274fcf15":"code","7efbf25e":"code","f754d622":"code","0edda75b":"code","ed563d0f":"code","1e0d53fb":"code","270e5031":"code","8f56376b":"code","b7a93f44":"code","a30e4aab":"code","15c939aa":"code","eaea3762":"code","bec540a0":"code","d85835cb":"code","b5562ce8":"code","55a157cf":"code","1ef7dcfd":"code","a4b83187":"code","10aeaf57":"code","85e98608":"code","a514a2b7":"code","55bd624b":"code","7b93712e":"code","1151281a":"code","0a0cbc9d":"code","25305611":"code","e4d49773":"code","9464c167":"code","982511d6":"code","48dfeb3d":"code","dd0cc804":"code","551ce320":"code","99e0f7c3":"code","138e0fae":"code","7d3ab44c":"code","de6ae8f8":"code","b0834d15":"code","08fbf9dd":"code","a1ea040c":"code","b2c71bfc":"code","3f806ac5":"code","7ce60358":"code","2ceb8d8b":"code","72dc37c5":"code","fb2a107c":"code","91a7481e":"code","6d4abe26":"code","c78e26e7":"code","84a607a4":"code","155c8422":"code","08bc168b":"code","8023aaea":"code","55e32ec9":"code","355930a5":"markdown","77c585be":"markdown","7145efac":"markdown","0d075d41":"markdown","87604427":"markdown","da83d143":"markdown","123034d9":"markdown","d52260d6":"markdown","0d3a1fc5":"markdown","460168e6":"markdown","890ce050":"markdown","e941cb83":"markdown","92279847":"markdown","be8a3a55":"markdown","f07d6991":"markdown","f0b38b44":"markdown","8e118fe1":"markdown","06f42fb1":"markdown","cf87a2c2":"markdown","c745ad1f":"markdown","68718963":"markdown","9f1adc22":"markdown","8929f20a":"markdown","6e2244e2":"markdown","e4a05cb5":"markdown","edf0e791":"markdown","f2cf7ad0":"markdown","dfacac7a":"markdown","23dc47c0":"markdown","33e0220a":"markdown","46881dfa":"markdown","77401586":"markdown","5b385bf5":"markdown","e861ca76":"markdown","efdb3471":"markdown","f67bfd11":"markdown","281b416c":"markdown","9e2c6cd0":"markdown","5ccfcc92":"markdown","619bbae5":"markdown","864d7e51":"markdown","7e3e8cf0":"markdown","aee9be38":"markdown","3cb71606":"markdown","62319e3a":"markdown","0bd599da":"markdown","e7ce5141":"markdown","a56c1267":"markdown","54d6dacc":"markdown","0433e5f7":"markdown","20f25430":"markdown","25bf1b1b":"markdown","85014e1b":"markdown","a0e6e508":"markdown","eebe59d4":"markdown","9646c92c":"markdown","16cbcebd":"markdown","0386b93b":"markdown","ab337d55":"markdown","619125f9":"markdown","4583eb25":"markdown","ecd82bbe":"markdown","bd53230a":"markdown"},"source":{"8889d635":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom tabulate import tabulate\nimport scipy.stats as stats\nimport sklearn.model_selection as mod\nimport sklearn.metrics as mets\nimport scikitplot as skplt\nimport sklearn.preprocessing as prep\nfrom sklearn.compose import ColumnTransformer\nfrom imblearn.pipeline import Pipeline\nfrom sklearn import manifold as man\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom  xgboost import XGBClassifier,plot_importance\n\npd.options.display.max_columns = 50\npd.options.display.max_rows = 100\nimport warnings\nwarnings.filterwarnings('ignore')","3d7ee76a":"data = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\nprint(data.shape)\ndata.head()","913babc5":"data.describe(include = 'all')","7a39c91a":"data.info()","4778e0a7":"data['TotalCharges'] = pd.to_numeric(data.TotalCharges, errors='coerce')\ndata.TotalCharges.isnull().sum()","ff4bbab3":"data[np.isnan(data['TotalCharges'])]","e560f5b4":"data[data['Dependents'] == 'Yes'][['tenure','TotalCharges']]","49774aad":"data[data['tenure'] == 0][['tenure','TotalCharges']]","ffd6ae0a":"data.fillna(0, inplace = True)\nprint(data.shape)","a60a2fa3":"print(data.groupby('Churn')['Churn'].count())\nprint('')\nprint('Target Rate %',(data[data.Churn=='Yes']['customerID'].count()\/data['customerID'].count()).round(2))\nprint('')\ndata['Churn'].value_counts().plot(kind='bar');","3504d74b":"## Check whether categoric features has effect on Churn statistically\ndef CatColumnRelation(col):\n    data['NUMBER'] = 1\n    table = pd.pivot_table(data,values = 'NUMBER',index=[col],columns=['Churn'], aggfunc=np.sum,fill_value=0).rename_axis(None)\n\n    X2, p, dof, expected = stats.chi2_contingency(table)\n    n = np.sum(table).sum()\n    minDim = min(table.shape)-1\n\n    #calculate Cramer's V \n    V = np.sqrt((X2\/n) \/ minDim)\n    data.drop(columns = 'NUMBER',inplace = True)\n    return X2,p,V","c18b57e4":"def CatCounts(col):\n    data['total_count'] = 1\n    total = data['total_count'].sum()\n\n    group_total = data.groupby([col])['total_count'].count().reset_index()\n    group_total.rename(columns = {'total_count':'Group_Count'},inplace = True)\n\n    temp = pd.DataFrame(data.groupby([col,'Churn'])['total_count'].count()).reset_index()\n    temp['% of Total'] = ((temp.total_count \/ total)*100).round(2)\n    temp.rename(columns = {'total_count':'Count'},inplace = True)\n\n    temp = pd.merge(temp,group_total, on =col)\n    temp['% of Group'] = (temp['Count']\/ temp['Group_Count']*100).round(2)\n    temp.drop(columns = 'Group_Count',inplace = True)\n    temp = temp[[col, 'Churn','Count','% of Group','% of Total']]\n    return temp","e17822fa":"## For Categoric Columns\ndef catColumnInspector(col):\n    data['total_count'] = 1\n    X2,p,V = CatColumnRelation(col)\n    \n    print('\\033[1m\\t\\t' + col + '\\033[0m')\n    print('-'*60)\n    print('Statistical Test Results')\n    print('p-value: ', p.round(5), ' Chi-Square: ', X2.round(2), \" Crammer's V: \",V.round(5) )\n    print('-'*60)\n    print(tabulate(CatCounts(col),headers=[col,'Churn','Count','% of Group','% of Total']))\n    print('-'*60)\n    print('')\n    plt.figure(figsize=(10,5))\n    sns.barplot(data = pd.DataFrame(data.groupby([col,'Churn'])['total_count'].count()).reset_index()\n            , x = col,y='total_count', hue = 'Churn')\n    plt.show()\n    data.drop(columns='total_count',inplace = True)","274fcf15":"## For Numeric Columns\ndef numColumnInspector(col):\n    data['total_count'] = 1\n    data['Churn_Flag'] = np.where(data.Churn=='Yes',1,0)\n    ph_cor , p = stats.pointbiserialr(data['Churn_Flag'], data[col])\n    print('\\033[1m  \\t\\t\\t' + col + '\\033[0m')\n    print('-'*75)\n    print('Point Biseral Correlation Results ')\n    print('Correlation: ', ph_cor.round(3), ' and  p-value: ', p)    \n    print('-'*75)\n    print(tabulate(data.groupby('Churn')[col].describe(),headers=['Churn','count','mean','std','min','25%','50%','75%','max']))\n    print('-'*75)\n    print('')\n    sns.boxplot(x=data.Churn,y=data[col], showmeans=True)\n    plt.show()       \n    data.drop(columns=['total_count','Churn_Flag'],inplace = True)","7efbf25e":"catColumnInspector('gender')","f754d622":"catColumnInspector('SeniorCitizen')","0edda75b":"catColumnInspector('Partner')","ed563d0f":"catColumnInspector('Dependents') ","1e0d53fb":"numColumnInspector('tenure')","270e5031":"after_40_period_churn = data[(data.Churn == 'Yes') & (data.tenure >40)]['customerID'].count()\nafter_40_period_non_churn = data[(data.Churn == 'No') & (data.tenure >40)]['customerID'].count()\nafter_40_count = data[data.tenure >40]['customerID'].count()\nprint('Churn number after 40 period',after_40_period_churn)\nprint('Non-Churn number after 40 period',after_40_period_non_churn)\nprint('Churn Percent %', (after_40_period_churn \/ after_40_count).round(2))","8f56376b":"catColumnInspector('PhoneService')","b7a93f44":"catColumnInspector('MultipleLines')","a30e4aab":"catColumnInspector('InternetService')","15c939aa":"catColumnInspector('OnlineSecurity')","eaea3762":"catColumnInspector('OnlineBackup')","bec540a0":"catColumnInspector('DeviceProtection')","d85835cb":"catColumnInspector('TechSupport')","b5562ce8":"catColumnInspector('StreamingTV')","55a157cf":"catColumnInspector('StreamingMovies')","1ef7dcfd":"catColumnInspector('Contract')","a4b83187":"catColumnInspector('PaperlessBilling')","10aeaf57":"catColumnInspector('PaymentMethod')","85e98608":"numColumnInspector('MonthlyCharges')","a514a2b7":"numColumnInspector('TotalCharges')","55bd624b":"data[['tenure','MonthlyCharges','TotalCharges']].corr()","7b93712e":"data['Target'] = np.where(data.Churn == 'Yes',1,0)","1151281a":"data.groupby(['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport'])['Target'].agg({'mean','count'}).reset_index()","0a0cbc9d":"data['Service_No_Count'] = np.where(data['OnlineSecurity'] == 'No',1,0) + np.where(data['OnlineBackup'] == 'No',1,0) + np.where(data['DeviceProtection'] == 'No',1,0) + np.where(data['TechSupport'] == 'No',1,0)\ndata['Service_No_Count'] = pd.to_numeric(data.Service_No_Count, errors='raise')","25305611":"numColumnInspector('Service_No_Count')","e4d49773":"data.groupby(['StreamingTV','StreamingMovies'])['Target'].agg({'mean','count'}).reset_index()","9464c167":"cat_cols = ['gender','SeniorCitizen', 'Partner', 'Dependents','PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity'\n            ,'OnlineBackup','DeviceProtection', 'TechSupport', 'StreamingTV','StreamingMovies', 'Contract', 'PaperlessBilling'\n            ,'PaymentMethod']\n\ndata = pd.get_dummies(data, columns = cat_cols, drop_first= True,dtype=int)\nprint(data.shape)\ndata.head()","982511d6":"plt.figure(figsize=(15,15))\nsns.heatmap(data.drop(columns = {'customerID','Churn'}).corr(), annot = True, fmt='.1g')\nplt.show()","48dfeb3d":"data.drop(columns= {'InternetService_No','InternetService_Fiber optic','OnlineBackup_No internet service','OnlineBackup_No internet service',\n                    'DeviceProtection_No internet service','TechSupport_No internet service','StreamingTV_No internet service',\n                    'StreamingMovies_No internet service','OnlineSecurity_No internet service','MultipleLines_No phone service'}, inplace = True)","dd0cc804":"plt.figure(figsize=(15,15))\nsns.heatmap(data.drop(columns = {'customerID','Churn'}).corr(), annot = True, fmt='.1g')\nplt.show()","551ce320":"data.drop(columns = 'Target',inplace = True)\ndata['stratification_col'] = data['Churn'] + '-' +data['Service_No_Count'].map(str)\ndata.groupby('stratification_col')['Churn'].count().reset_index().rename(columns = {'Churn':'Count'}).sort_values(by = 'stratification_col')\ndata['Churn'] = np.where(data['Churn'] =='Yes',1,0)","99e0f7c3":"X_train, X_test, y_train, y_test = mod.train_test_split(data.drop(columns = ['customerID','gender_Male','TotalCharges'])\n                                                    , data['Churn'], test_size=0.2, random_state=42, stratify = data['stratification_col'])\n\n\nprint('-'*25)\nprint('Train Target Stats')\nprint(y_train.agg({'count','mean','std'}))\nprint('-'*25)\nprint('Test Target Stats')\nprint(y_test.agg({'count','mean','std'}))\nprint('-'*25)","138e0fae":"table1 = pd.DataFrame(X_train.groupby('stratification_col')['stratification_col'].count()).rename(columns = {'stratification_col':'train_count'})\ntable2 = pd.DataFrame(X_test.groupby('stratification_col')['stratification_col'].count()).rename(columns = {'stratification_col':'test_count'})\ntable = table1.merge(table2, how = 'left', on = 'stratification_col')\ntable","7d3ab44c":"X2, p, dof, expected = stats.chi2_contingency(table)\nprint('- '*50)\nprint('Chi Square:',X2)\nprint('p-value:', p)\nprint('Degrees of Freedom: ', dof)\nprint('- '*50)\nexpexted_values = pd.DataFrame(expected, columns=['train_expected_observations','test_expected_observations'],index = table.index.unique())\ntable.merge(expexted_values, how = 'left', on = 'stratification_col')","de6ae8f8":"X_train.drop(columns = {'Churn','stratification_col'},inplace = True)\nX_test.drop(columns = {'Churn','stratification_col'},inplace = True)\nX_train.head()","b0834d15":"features = X_train.columns.tolist()\n\nnum_cols = ['tenure','MonthlyCharges','Service_No_Count']\n\n\nnum_transformer = Pipeline(steps=[('scaler', prep.StandardScaler())])\npreprocessor = ColumnTransformer(transformers=[('num', num_transformer, num_cols)],remainder = 'passthrough') ","08fbf9dd":"pipe_tsne = Pipeline([\n          (\"preprocessor\", preprocessor),\n          (\"tsne\", man.TSNE(n_components=2, random_state=42))\n])\n\ndata_tsne = pipe_tsne.fit_transform(data[features])\n\nplt.figure(figsize=(10,7))\nsns.scatterplot(x=data_tsne[:, 0], y=data_tsne[:,1], hue=data['Churn'])\nplt.show()","a1ea040c":"%%time\npipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                           ('classifier',   LogisticRegression( random_state=42))])\n\nparams = [{'classifier__C'      : np.arange(0.1, 5.0, 0.5), \n           'classifier__penalty': ['l1'], \n           'classifier__solver' : ['liblinear','saga']}, \n          \n         {'classifier__C'      : np.arange(0.1, 5.0, 0.5), \n         'classifier__penalty': ['l2'], \n         'classifier__solver' : ['liblinear', 'newton-cg', 'lbfgs', 'sag', 'saga']}\n         ]\n\nmet_grid= ['roc_auc', 'accuracy','f1','precision','recall'] \ncv = mod.RepeatedStratifiedKFold(n_splits=4, n_repeats=2,random_state=42)\nlog_grid = mod.GridSearchCV(pipeline, param_grid = params, cv = cv, verbose = 1, n_jobs = -1, scoring = met_grid , refit = 'roc_auc')\nlog_grid.fit(X_train[features], y_train)\nprint(log_grid.best_params_)","b2c71bfc":"print('='*25)\nprint('Roc-Auc Score:   ',log_grid.cv_results_['mean_test_roc_auc'].mean().round(2))\nprint('='*25)\nprint('Accuracy Score:  ',log_grid.cv_results_['mean_test_accuracy'].mean().round(2))\nprint('='*25)\nprint('f1 score:        ' ,log_grid.cv_results_['mean_test_f1'].mean().round(2))\nprint('='*25)\nprint('Precision Score: ',log_grid.cv_results_['mean_test_precision'].mean().round(2))\nprint('='*25)\nprint('Recall Score:    ',log_grid.cv_results_['mean_test_recall'].mean().round(2))\nprint('='*25)","3f806ac5":"log_test_probs = log_grid.predict_proba(X_test[features])\nf = plt.figure(figsize=(14,6))\nax1 = f.add_subplot(121)\nax2 = f.add_subplot(122)\n\nskplt.metrics.plot_cumulative_gain(y_test,log_test_probs,title='Logistic Regression Cumulative Gains Curve',ax=ax1)\n\nskplt.metrics.plot_lift_curve(y_test, log_test_probs,title = 'Logistic Regression Lift Chart',ax = ax2)\nax2.legend(loc='upper right')\nplt.show()","7ce60358":"log_grid.best_estimator_['classifier'].intercept_","2ceb8d8b":"log_coefs = pd.DataFrame(features).rename(columns={0:'feature'})\nlog_coefs['coefficient'] = log_grid.best_estimator_['classifier'].coef_.reshape(-1,1)\nlog_coefs.iloc[(-log_coefs['coefficient'].abs()).argsort()].reset_index(drop=True)","72dc37c5":"%%time\npipeline = Pipeline(steps=[('preprocessor', preprocessor),('clf',RandomForestClassifier(random_state=42))])\n\nparam_grid = {  \n    'clf__n_estimators' : [100,300,500],\n    'clf__criterion' :['entropy','gini'],\n    'clf__max_depth' : [5,7,9],\n    'clf__max_features' :['auto'],\n    'clf__min_samples_leaf' :[10,30,70],\n    'clf__min_samples_split' : [10,30,70],\n    'clf__class_weight' :['balanced',None],\n    'clf__bootstrap': [True, False]\n}                                            \n\nmet_grid= ['roc_auc', 'accuracy','f1','precision','recall'] \n\ncv = mod.RepeatedStratifiedKFold(n_splits=4, n_repeats=2,random_state=42)\ngrid_rdf = mod.GridSearchCV(pipeline, param_grid = param_grid,cv = cv,verbose = 1,n_jobs = -1, scoring =met_grid, refit='roc_auc')\ngrid_rdf.fit(X_train[features], y_train)\nprint(grid_rdf.best_params_)","fb2a107c":"print('='*25)\nprint('Roc-Auc Score:   ',grid_rdf.cv_results_['mean_test_roc_auc'].mean().round(2))\nprint('='*25)\nprint('Accuracy Score:  ',grid_rdf.cv_results_['mean_test_accuracy'].mean().round(2))\nprint('='*25)\nprint('f1 score:        ' ,grid_rdf.cv_results_['mean_test_f1'].mean().round(2))\nprint('='*25)\nprint('Precision Score: ',grid_rdf.cv_results_['mean_test_precision'].mean().round(2))\nprint('='*25)\nprint('Recall Score:    ',grid_rdf.cv_results_['mean_test_recall'].mean().round(2))\nprint('='*25)","91a7481e":"rdf_test_probs = grid_rdf.predict_proba(X_test[features])\nf = plt.figure(figsize=(14,6))\nax1 = f.add_subplot(121)\nax2 = f.add_subplot(122)\n\nskplt.metrics.plot_cumulative_gain(y_test,rdf_test_probs,title='Random Forest Cumulative Gains Curve',ax=ax1)\n\nskplt.metrics.plot_lift_curve(y_test, rdf_test_probs,title = 'Random Forest Lift Chart',ax = ax2)\nax2.legend(loc='upper right')\nplt.show()","6d4abe26":"feat_imp_rdf_grid = pd.DataFrame(grid_rdf.best_estimator_['clf'].feature_importances_)\nfeat_imp_rdf_grid['feature'] = features\nfeat_imp_rdf_grid = feat_imp_rdf_grid.rename(columns={0:'rdf_importance'})\nfeat_imp_rdf_grid = feat_imp_rdf_grid.sort_values(by = 'rdf_importance' , ascending=False)\nfeat_imp_rdf_grid = feat_imp_rdf_grid[['feature', 'rdf_importance']]\nfeat_imp_rdf_grid","c78e26e7":"%%time\n\nparam_grid = {  \n    'clf__learning_rate' : [0.01],\n    'clf__n_estimators' : [500],\n    'clf__max_depth' : [3,4,5],\n    'clf__colsample_bytree' : [0.5,0.7,0.8],\n    'clf__subsample' : [0.6,0.7,0.8], \n    'clf__min_child_weight' : [30,40,50],\n    'clf__objective' : ['binary:logistic'],\n    'clf__eval_metric' :['error'],\n    'clf__use_label_encoder' : [False]\n}\n\npipe = Pipeline([('scaler', preprocessor),('clf',XGBClassifier(random_state=42))])\n\nmet_grid= ['roc_auc', 'accuracy', 'f1','precision','recall'] \n\ncv = mod.StratifiedKFold(n_splits=4, shuffle = True,random_state=42)\n\nxgb_grid = mod.GridSearchCV(pipe, param_grid = param_grid,cv = cv,verbose = 1,n_jobs = -1, scoring =met_grid, refit='roc_auc')\n\nxgb_grid.fit(X_train[features], y_train)\nprint(xgb_grid.best_params_)","84a607a4":"print('='*25)\nprint('Roc-Auc Score:   ',xgb_grid.cv_results_['mean_test_roc_auc'].mean().round(2))\nprint('='*25)\nprint('Accuracy Score:  ',xgb_grid.cv_results_['mean_test_accuracy'].mean().round(2))\nprint('='*25)\nprint('f1 score:        ' ,xgb_grid.cv_results_['mean_test_f1'].mean().round(2))\nprint('='*25)\nprint('Precision Score: ',xgb_grid.cv_results_['mean_test_precision'].mean().round(2))\nprint('='*25)\nprint('Recall Score:    ',xgb_grid.cv_results_['mean_test_recall'].mean().round(2))\nprint('='*25)","155c8422":"xgb_test_probs = xgb_grid.predict_proba(X_test[features])\nf = plt.figure(figsize=(14,6))\nax1 = f.add_subplot(121)\nax2 = f.add_subplot(122)\n\nskplt.metrics.plot_cumulative_gain(y_test,xgb_test_probs,title='Random Forest Cumulative Gains Curve',ax=ax1)\n\nskplt.metrics.plot_lift_curve(y_test, xgb_test_probs,title = 'Random Forest Lift Chart',ax = ax2)\nax2.legend(loc='upper right')\nplt.show()","08bc168b":"feat_imp_xgb_grid = pd.DataFrame(xgb_grid.best_estimator_['clf'].feature_importances_)\nfeat_imp_xgb_grid['feature'] = features\nfeat_imp_xgb_grid = feat_imp_xgb_grid.rename(columns={0:'xgb_importance'})\nfeat_imp_xgb_grid = feat_imp_xgb_grid.sort_values(by = 'xgb_importance' , ascending=False)\nfeat_imp_xgb_grid = feat_imp_xgb_grid[['feature', 'xgb_importance']]\nfeat_imp_xgb_grid","8023aaea":"f = plt.figure(figsize=(13,11))\nax1 = f.add_subplot(321)\nax2 = f.add_subplot(322)\nax3 = f.add_subplot(323)\nax4 = f.add_subplot(324)\nax5 = f.add_subplot(325)\nax6 = f.add_subplot(326)\n\nskplt.metrics.plot_cumulative_gain(y_test,log_test_probs,title='Logistic Regression Cumulative Gains Curve ',ax=ax1)\nskplt.metrics.plot_lift_curve(y_test, log_test_probs,title = 'Logistic Regression Lift Chart',ax = ax2)\nax2.legend(loc='upper right')\n\n\nskplt.metrics.plot_cumulative_gain(y_test,rdf_test_probs,title='Random Forest Cumulative Gains Curve',ax=ax3)\nskplt.metrics.plot_lift_curve(y_test, rdf_test_probs,title = 'Random Forest Lift Chart',ax = ax4)\nax4.legend(loc='upper right')\n\nskplt.metrics.plot_cumulative_gain(y_test,xgb_test_probs,title='XGBoost Cumulative Gains Curve',ax=ax5)\nskplt.metrics.plot_lift_curve(y_test, xgb_test_probs,title = 'XGBoost Lift Chart',ax = ax6)\nax6.legend(loc='upper right')\nplt.tight_layout()\nplt.show()","55e32ec9":"feat_imp_xgb_grid.merge(feat_imp_rdf_grid, how = 'left', on ='feature').merge(log_coefs, how = 'left' , on='feature')","355930a5":"### Lastly lets check streaming columns","77c585be":"Customer who have internet service but does not have SteamingTV seems to be churning slightly more","7145efac":"We saw that especially **`OnlineSecurity`**,**`OnlineBackup`**,**`DeviceProtection`**,**`TechSupport`** behaves similar on target wise","0d075d41":"Seniors seems to be churning more then non-Seniors","87604427":"Customers with Fiber optic internet service are churning much more than other group, the reason might be bad fiber optic infrastructure","da83d143":"### **`SeniorCitizen`** : Indicates if the customer is 65 or older: Yes, No (1, 0)","123034d9":"### **`TechSupport`** : Whether the customer has tech support or not (Yes, No, No internet service)","d52260d6":"Gendder does not seem to have a difference for churn ","0d3a1fc5":"**`Tenure`** and **`Dependents`** column seems to be same for null TotalCharges. Lets check them","460168e6":"### **`Contract`** : The contract term of the customer (Month-to-month, One year, Two year)","890ce050":"Customer who churns seems to stay twice as customer. After 30-40 period only a few customers seems to become churn","e941cb83":"### 1) Logistic Regression","92279847":"Total Charges is highly correlated with tenure and Monthly Charges. That will effect especially linear models.","be8a3a55":"### **`DeviceProtection`** : Whether the customer has device protection or not (Yes, No, No internet service)","f07d6991":"### Encoding Categoric Features","f0b38b44":"There are 21 columns in dataset. Churn is our target column which is 'Yes' or 'No'. We have 17 categoric and 3 numeric. TotalCharges column has wrong data type, and will be changed to numeric.","8e118fe1":"### **`Gender`** : Whether the customer is a male or a female","06f42fb1":"### **`InternetService`** : Customer\u2019s internet service provider (DSL, Fiber optic, No)","cf87a2c2":"Most of the customers have phone service and it does not seems to be effecting churn much","c745ad1f":"Paperless Billed customers churn more than customers which billed with paper","68718963":"### Pearson's Correlation between Continues Features","9f1adc22":"### **`MonthlyCharges`** : The amount charged to the customer monthly","8929f20a":"### **`MultipleLines`** : Whether the customer has multiple lines or not (Yes, No, No phone service)","6e2244e2":"### **`StreamingTV`** : Whether the customer has streaming TV or not (Yes, No, No internet service)","e4a05cb5":"Customer who have internet service but does not have TechSupport seems to be churning much more","edf0e791":"Since the customers have stayed in company longer will have been payed more their churn rate will be less. But there is a group of people who have charged much more than average have a very high churn rate. Therefore, I will create a new feature by dividing total charges to tenure to check that.","f2cf7ad0":"Customer who have internet service but does not have SteamingMovies seems to be churning slightly more","dfacac7a":"Customers who has multipleLines seems to be churning less than who does not ","23dc47c0":"Customer who does not have dependents become churn more than who has.","33e0220a":"## Data","46881dfa":"## Target : **`Churn`** : Whether the customer churned or not (Yes or No)","77401586":"Higher the montly charges higher the churn rate","5b385bf5":"Singles seems to become churn more than couples","e861ca76":"### 3) XGBOOST","efdb3471":"Month-to-Month customers churn about %40, while One year contracted customers churn %10 and two year contracted customers churn only 0.03 %","f67bfd11":"## MODELLING","281b416c":"### **`OnlineSecurity`** : Whether the customer has online security or not (Yes, No, No internet service)","9e2c6cd0":"### **`Tenure`** : Number of months the customer has stayed with the company","5ccfcc92":"### **`Service_No_Count`** : Service No Count","619bbae5":"### **`PaymentMethod`** : The customer\u2019s payment method\n\n(Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))","864d7e51":"### 2) Random Forest ","7e3e8cf0":"60% of 1407 test ->842 -> 26.5% Churn rate -> 225 Churn -> 95% - will be reached 213 churn ","aee9be38":"## MODEL COMPARITION","3cb71606":"### Preprocessing Features","62319e3a":"### **`Dependents`** :Indicates if the customer lives with any dependents:Yes,No.Dependents could be children,parents,grandparents etc.","0bd599da":"### Churn rate is %27.","e7ce5141":"### **`StreamingMovies`** : Whether the customer has streaming movies or not (Yes, No, No internet service)","a56c1267":"Customer who have internet service but does not have online security seems to be churning much more","54d6dacc":"## FEATURES","0433e5f7":"In whole data our churn rate is 27%, as we observed after 40 months churn rate becomes only 10%. ","20f25430":"### Plotting whole dataset in two Dimensions","25bf1b1b":"There are 11 null values in **`TotalCharges`** column, lets see if we can found a pattern.","85014e1b":"### **`TotalCharges`** : The total amount charged to the customer","a0e6e508":"### **`OnlineBackup`** :Whether the customer has online backup or not (Yes, No, No internet service)","eebe59d4":"Only when **`Tenure`** is 0 **`TotalCharges`** is also 0. **`TotalCharges`** is almost equal to **`Tenure`** multiplied by **`MonthlyCharges`**. Since these 11 records does not seem to be churned, they might be just contacted, and have not paid any bill yet. Therefore, I will fill them with 0's. ","9646c92c":"### **`PaperlessBilling`** : Whether the customer has paperless billing or not (Yes, No)","16cbcebd":"### **`PhoneService`** : Whether the customer has a phone service or not (Yes, No)","0386b93b":"### TRAIN - TEST SPLIT ","ab337d55":"### MISSING VALUES","619125f9":"Customer who have internet service but does not have Device Protection seems to be churning much more","4583eb25":"### **`Partner`** : Whether the customer has a partner or not (Yes, No)","ecd82bbe":"Customer who have internet service but does not have Online Backup seems to be churning much more","bd53230a":"Seems that customers who has at leat 2 of these services churn less. Therefore I will create a flag for that"}}