{"cell_type":{"62a04108":"code","fc2a4a55":"code","afa33360":"code","dac0b635":"code","5a127346":"code","b30aa743":"code","a5623a65":"code","3702255a":"code","2ee181f5":"code","8b9ea3ea":"code","44916167":"code","4713aec8":"code","d18bd46d":"code","45750843":"markdown","34cb34f6":"markdown"},"source":{"62a04108":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc2a4a55":"#get seed and team data for elo ratings\ndf_seed = pd.read_csv('\/kaggle\/input\/ncaam-march-mania-2021\/MDataFiles_Stage2\/MNCAATourneySeeds.csv')\ndf_teams = pd.read_csv('\/kaggle\/input\/ncaam-march-mania-2021\/MDataFiles_Stage2\/MTeams.csv')\ndf_teams['tm_join'] = df_teams.TeamName.apply(lambda x: x.replace('St','State'))\n\n#get 2021 data & join seed w\/ team names\ndf_s_2021 = df_seed[df_seed['Season'] == 2021]\nseed_tms = pd.merge(df_s_2021, df_teams.loc[:,['TeamID','TeamName','tm_join']], on='TeamID')\n","afa33360":"#get elo data from warrennolan.com - Great resource (check it out!)\ndf_elo = pd.read_html('http:\/\/warrennolan.com\/basketball\/2021\/elochess')[0]\n\ndf_elo_final = df_elo.loc[:,['Team','ELO']]\ndf_elo_final.head()","dac0b635":"#join elo data with team and seed data | fill in null values\nseed_elos = pd.merge(seed_tms,df_elo_final, left_on = 'tm_join',right_on = 'Team', how='left')\n\nseed_elos.iloc[8,6] = 1597.16\nseed_elos.iloc[13,6] = 1519.06\nseed_elos.iloc[14,6] = 1481.20\nseed_elos.iloc[16,6] = 1278.92\nseed_elos.iloc[17,6] = 1395.14\nseed_elos.iloc[32,6] = 1469.18\n\nseed_elos.isnull().any()","5a127346":"#simple formula to get win probability from elo rating differential\ndef win_prob_t1(team1_elo,team2_elo):\n    elo_diff_m = (team2_elo-team1_elo)\/400\n    t1_win_prob = 1\/(1+10**elo_diff_m)\n    return t1_win_prob","b30aa743":"# build team class for simulation\nclass Team:\n    def __init__(self, teamid, data, season):\n        self.teamid = teamid\n        self.data = data[(data['TeamID'] == self.teamid)&\n                         (data['Season'] == season)].copy()\n        self.team_name = self.data['TeamName'].unique()[0]\n    \n    def getPointsScored(self):\n        return self.data['PtScored'].values\n\n    def getPointsAllowed(self):\n        return self.data['PtAllowed'].values\n    \n    def getAttributes(self):\n        self.attributes = dict()\n        for col in self.data.columns:\n            self.attributes[col] = self.data[col].values\n        return self.attributes\n    ","a5623a65":"# make simulation functions\n\nimport random as rd\n\ndef sim_once(team1,team2):\n    score_team1= rd.gauss(team1.getPointsScored().mean(),team1.getPointsScored().std())\n    score_team2= rd.gauss(team2.getPointsScored().mean(),team2.getPointsScored().std())\n    score_against_team1= rd.gauss(team1.getPointsAllowed().mean(),team1.getPointsAllowed().std())\n    score_against_team2= rd.gauss(team2.getPointsAllowed().mean(),team2.getPointsAllowed().std())\n    final_score_t1 = (score_team1+score_against_team2)\/2\n    final_score_t2 = (score_team2+score_against_team1)\/2\n    if final_score_t1 == final_score_t2:\n        sim_once(team1,team2)\n    return (final_score_t1,final_score_t2, final_score_t1 > final_score_t2)\n    \n\ndef sim_multiple(team1,team2,n=100):\n    \"\"\"Takes two teams in and returns win % of t1, t1 point dist, t2 point dist, win loss binary\"\"\"\n    t1_points = []\n    t2_points = []\n    w_l = []\n    for i in range(n):\n        sim = sim_once(team1,team2)\n        t1_points.append(sim[0])\n        t2_points.append(sim[1])\n        w_l.append(sim[2])\n    return (sum(w_l)\/n, t1_points, t2_points, w_l)","3702255a":"#get data by team \ndf = pd.read_csv('\/kaggle\/input\/ncaam-march-mania-2021\/MDataFiles_Stage2\/MRegularSeasonDetailedResults.csv')","2ee181f5":"#Only columns we need \ndf.head()\ndf_winners = df.loc[:,['Season','DayNum','WTeamID','WScore','LScore']]\ndf_losers = df.loc[:,['Season','DayNum','LTeamID','LScore','WScore']]\n\n#rename columns\ndf_winners.columns = ['Season','DayNum','TeamID','PtScored','PtAllowed']\ndf_losers.columns = ['Season','DayNum','TeamID','PtScored','PtAllowed']\n\ndf_tm = pd.concat([df_winners,df_losers])","8b9ea3ea":"# get team names \ndf_tm_names = pd.merge(df_tm,df_teams.loc[:,['TeamID','TeamName']], on ='TeamID')\ndf_tm_names[df_tm_names.TeamID == 1216]","44916167":"#Example of how to team objects \nalabama = Team(1104,df_tm_names,2021)\nhartford = Team(1216,df_tm_names,2021)\n","4713aec8":"#run simulation of two teams \nsim_out = sim_multiple(alabama,hartford,1000)","d18bd46d":"#results of simulation (win probability, t1 scors, t2 scores, win \/ loss binary)\nsim_out","45750843":"# Part 2 Monte Carlo Simulation\n\nCheck out the streamlit app I built here that illustrates this: https:\/\/share.streamlit.io\/playingnumbers\/basketball_sim_dash\/main\n\nAnother approach that produces a probability distribution is a monte carlo simulation. To do this, we create distributions of expected scores for each team and then randomly sample from these distributions. When the expected score of team 1 is higher than team 2 in a given simulation, we award team 1 a win and vice versa. If we do this enough times we can get the expected win probabiltiy when the teams play.\n\nIt should be noted that this approach will not guarantee stable results. By definition there is randomness, so each run should be different than the previous ones. To solve for this, you can either set a random seed or  project the outcome out to infinity.\n\nOur methodology here is very basic. We want to simulate how two teams will perform against each other (team1 & team2). To simulate the score that team1 would have, we do the following:\n* sample from a distribution of past points scored by team 1\n* sample from a distribution of past points allowed by team 2 \n* take an average of points scored by team 1 & points allowed by team 2\n\nTo see who would win, we do the same for team 2 and compare the final result. I find this to be a decent basline model for evaluating performance that can be built upon. There are plenty of things wrong with this approach, but it is a good way to think about this problem and get started! ","34cb34f6":"This notebook is meant to complement this video: https:\/\/www.youtube.com\/watch?v=pPfw2fzwNiM\n\n# Part 1 Simple Elo Rating System\n\n\nThe elo rating system originated in chess and is a great way to compare individual players based on past records. Essentially, all players start at the same number of elo rating points (usually 1500). As they play games, they earn points for beating other players and lose points when they lose games. They get more points from beating opponents with higher ratings and lose more points for losing to lower rated opponents. \n\n\nThis same methodology can be applied to college basketball. We can create elo ratings for teams. The nice thing about this system, is that from teh elo ratings you can get predicted win probability between two opponents. \n\n\nRather than create the elo ratings ourself, there are some great places online that have already constructed them. I got my data from: http:\/\/warrennolan.com\/basketball\/2021\/elochess\n\nGood articles \n* Elo math: https:\/\/www.cantorsparadise.com\/the-mathematics-of-elo-ratings-b6bfc9ca1dba\n* Elo math analysis: https:\/\/chance.amstat.org\/2020\/09\/chess\/\n\n"}}