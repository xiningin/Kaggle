{"cell_type":{"c9f2c129":"code","bab78bf7":"code","6a903be2":"code","9931b9eb":"code","3aa49394":"code","79b93c74":"code","1a8e3275":"code","fbeb57df":"code","35ed6b96":"code","4b345865":"code","1b886cb9":"markdown","c0fb0e66":"markdown","2a2d2ac6":"markdown","8876a077":"markdown","ced9a758":"markdown","70362caf":"markdown"},"source":{"c9f2c129":"import numpy as np # linear algebra\nfrom sklearn import preprocessing as prepr\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bab78bf7":"from pylab import rcParams\nrcParams['figure.figsize'] = 40, 40\n\ndf=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\n## get titles\ntitles=[]\nfor name in df[\"Name\"]:\n    titles.append( name[name.find(\",\")+2:name.find(\".\")] )\n\ndf[\"Cabin\"] = df[\"Cabin\"].fillna(\"Z\")\ncab=[]\nfor el in df[\"Cabin\"]:\n    cab.append(el[0])\n\ndf[\"Title\"]=titles\ndf[\"Cabin_Section\"]=cab\n\nprint(\" \")\nprint(\" \")\ndf.head()\n","6a903be2":"sns.catplot(x=\"Survived\", y=\"Age\",hue=\"Embarked\", kind=\"swarm\", data=df)\nsns.catplot(x=\"Survived\", y=\"Age\",hue=\"Title\", kind=\"swarm\", data=df)\nsns.catplot(x=\"Survived\", y=\"Fare\",hue=\"Sex\", kind=\"swarm\", data=df)\nsns.catplot(x=\"Survived\", y=\"Fare\",hue=\"Cabin_Section\", kind=\"swarm\", data=df)","9931b9eb":"df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nlen_df=len(df)\nnum_females = len(df.where(df[\"Sex\"]==\"female\",inplace=False).dropna())\n\ndf=df.where((df[\"Survived\"]==1),inplace=False).dropna()\ntotal_survived=len(df)\ndf=df.where(df[\"Sex\"]==\"female\").dropna()\nfemale_survived=len(df)\n\n\nprint( \"total survived {}, female survived {}\".format(total_survived,female_survived) )\nprint( \"percent survivors that are female {}\".format( round(female_survived\/total_survived,2)*100 ) )\nprint( \"percent of females who survived {}\".format( round(female_survived\/num_females,2)*100 ) )\nprint( \"percent people who were female survivors {}\".format( round(female_survived\/len_df,2)*100 ) )\nprint( \"percent people who were female {}\".format( round(num_females\/len_df,2)*100 ) )","3aa49394":"#functions\n\n\ndef create_integer_labels(seq):\n    uniq_ids=list(set(seq))\n    uniq_ids.sort()\n    for i,el in enumerate(seq): \n        seq[i]= uniq_ids.index(el)\n    return seq\n\ndef prep_data(in_df):\n    df=in_df.copy()\n    ##get average age\n    avg_age = round(df[\"Age\"].mean(),0)\n    avg_fare = round(df[\"Fare\"].mean(),2)\n\n\n    #Fill in missing data with appropriate values\n    #For age add the average age\n\n    df[\"Cabin\"] = df[\"Cabin\"].fillna(\"Z\")\n    df[\"Embarked\"] = df[\"Embarked\"].fillna(\"P\")\n    df[\"Age\"] = df[\"Age\"].fillna(avg_age)\n    df[\"Fare\"] = df[\"Fare\"].fillna(avg_fare)\n\n    null_data = df[df.isnull().any(axis=1)]\n    print(null_data)\n\n    df = df.dropna()\n\n    #get cab sections\n    cab=[]\n    for el in df[\"Cabin\"]:\n        cab.append(el[0])\n\n    ## get titles\n    titles=[]\n    for name in df[\"Name\"]:\n        titles.append( name[name.find(\",\")+2:name.find(\".\")] )\n\n    titles=create_integer_labels(titles)\n    cab=create_integer_labels(cab)\n    embarked=create_integer_labels( list(df[\"Embarked\"]) )\n    sex=create_integer_labels( list(df[\"Sex\"]) )\n\n    df[\"Cabin_Section\"]=cab\n    df[\"Title\"]=titles\n    df[\"Embarked\"]=embarked\n    df[\"Sex\"]=sex\n    \n    print(len(in_df))\n    print(len(df))\n    return df","79b93c74":"from sklearn import svm, datasets\n\ntrain_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ntrain_df=prep_data(train_df)\ntest_df=prep_data(test_df)\ny=train_df[\"Survived\"].values\n#train_df=train_df.drop(columns=[\"PassengerId\",\"Survived\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\",\"Cabin_Section\",\"Title\",\"SibSp\",\"Age\",\"Embarked\",\"Fare\"])\ntrain_df=train_df.drop(columns=[\"PassengerId\",\"Survived\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\"])\ncopy_test_df=test_df.copy()\n#test_df=test_df.drop(columns=[\"PassengerId\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\",\"Cabin_Section\",\"Title\",\"SibSp\",\"Age\",\"Embarked\",\"Fare\"])\ntest_df=test_df.drop(columns=[\"PassengerId\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\"])\n\nprint(test_df.head())\n\nX = train_df.values\nXt = test_df.values\n\nX = prepr.normalize(X)\nXt = prepr.normalize(Xt) \n\nn=len(X)\nc=[]\nfor x in range(100):\n    split=n-267\n    np.random.shuffle(X)\n    X_train, X_test, y_train,y_test = X[:split],X[split:],y[:split],y[split:]\n\n\n    ### linear\n    svc=svm.SVC(kernel=\"rbf\",C=97)\n    svc.fit(X_train,y_train)\n\n    out=svc.predict(X_test)\n\n    correct=0\n    for i,el in enumerate(out):\n        if el==y_test[i]:\n            correct+=1\n    c.append(1-round(correct\/n,4))\n            \nprint(c)\n\nsns.distplot(c,bins=5)\n","1a8e3275":"from sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\n\ntrain_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ntrain_df=prep_data(train_df)\ntest_df=prep_data(test_df)\ny=train_df[\"Survived\"].values\n#train_df=train_df.drop(columns=[\"PassengerId\",\"Survived\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\",\"Cabin_Section\",\"Title\",\"SibSp\",\"Age\",\"Embarked\",\"Fare\"])\ntrain_df=train_df.drop(columns=[\"PassengerId\",\"Survived\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\"])\ncopy_test_df=test_df.copy()\n#test_df=test_df.drop(columns=[\"PassengerId\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\",\"Cabin_Section\",\"Title\",\"SibSp\",\"Age\",\"Embarked\",\"Fare\"])\ntest_df=test_df.drop(columns=[\"PassengerId\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\"])\n\nprint(train_df.head())\nprint(train_df.values)\n\nX=prepr.normalize(train_df.values)\n\nprint(X)\n\nsplit=len(X)-267\nX_train, X_test, y_train,y_test = X[:split],X[split:],y[:split],y[split:]\n\nclf = RandomForestClassifier(n_estimators=200)\nclf.fit(X_train,y_train)\nout=clf.predict(X_test)\n\nout\ny_test\n\ncorrect=0\nfor i,el in enumerate(out):\n    if el==y_test[i]:\n        correct+=1\n\nprint(\"correct: {}\".format( round( (correct\/float(len(out)))*100,0 ) ) )","fbeb57df":"from sklearn.linear_model import LogisticRegression\n\ntrain_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ntrain_df=prep_data(train_df)\ntest_df=prep_data(test_df)\ny=train_df[\"Survived\"].values\n#train_df=train_df.drop(columns=[\"PassengerId\",\"Survived\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\",\"Cabin_Section\",\"Title\",\"SibSp\",\"Age\",\"Embarked\",\"Fare\"])\ntrain_df=train_df.drop(columns=[\"PassengerId\",\"Survived\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\"])\ncopy_test_df=test_df.copy()\n#test_df=test_df.drop(columns=[\"PassengerId\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\",\"Cabin_Section\",\"Title\",\"SibSp\",\"Age\",\"Embarked\",\"Fare\"])\ntest_df=test_df.drop(columns=[\"PassengerId\",\"Name\",\"Ticket\",\"Parch\",\"Cabin\"])\n\nX = train_df.values\nXt = test_df.values\n\nX = prepr.normalize(X)\nXt = prepr.normalize(Xt)\n\nsplit=len(X)-267\nX_train, X_test, y_train,y_test = X[:split],X[split:],y[:split],y[split:]\n\nlg=LogisticRegression(C=1e5)\n\nlg.fit(X_train,y_train)\n\nout=lg.predict(X_test)\n\n\ncorrect=0\nfor i,el in enumerate(out):\n    if el==y_test[i]:\n        correct+=1\n\nprint(\"correct: {}\".format( round( (correct\/float(len(out)))*100,0 ) ) )","35ed6b96":"#out=svc.predict(Xt)\n#out=clf.predict(Xt)\nout=lg.predict(Xt)\n\ncopy_test_df=copy_test_df.drop(columns=[\"Pclass\",\"Name\",\"Sex\",\"Age\",\"SibSp\",\"Title\",\"Parch\",\"Cabin_Section\",\"Ticket\",\"Fare\",\"Cabin\",\"Embarked\"])\ncopy_test_df[\"Survived\"]=out\n\nprint(copy_test_df.head()) \nprint(len(copy_test_df))\ncopy_test_df.to_csv(\"submission.csv\",index=False)\n","4b345865":"from IPython.display import FileLink\nFileLink(r'submission.csv')","1b886cb9":"# Test","c0fb0e66":"# Explore Data","2a2d2ac6":" # SVM (Highest Score: 69%)","8876a077":"# Logistical Regression (Highest Score: 74%)","ced9a758":"# Decision Tree (Highest Score: 77%)","70362caf":"# Prep"}}