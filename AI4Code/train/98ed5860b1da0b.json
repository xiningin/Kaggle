{"cell_type":{"2644da4d":"code","554b8a58":"code","a03beb52":"code","234b3051":"code","0afd4039":"code","8e6ec632":"code","1e2304d1":"code","9651a1ec":"code","a81a7b52":"code","9cc6ecbd":"code","ce09b23a":"code","a96246af":"code","443aaba9":"code","547ee4ec":"code","2022efbe":"code","ea907ee8":"code","7a6081eb":"code","99c46a8b":"code","20d73d0e":"code","56df62ca":"code","9c240a53":"code","64ef1018":"code","9fd42fcd":"code","24f45725":"code","8ea3790e":"code","cf821fd2":"code","3439a3aa":"code","aa439b67":"code","07dff16b":"code","09293dc5":"code","f3689d0c":"code","688c1f81":"code","24b49738":"code","d86ad53f":"code","8e5523fc":"code","fd1baa6e":"code","c5892a92":"code","ca59dfce":"code","cc3a7148":"code","50ded305":"code","1c1d63ea":"code","0a994b9b":"markdown"},"source":{"2644da4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","554b8a58":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","a03beb52":"df_train.head()","234b3051":"df_test.head()","0afd4039":"df_train.info()","8e6ec632":"df_train.isnull().sum()","1e2304d1":"df_test.isnull().sum()","9651a1ec":"df_train.drop('Cabin',inplace=True,axis=1)\ndf_test.drop('Cabin',inplace=True,axis=1)","a81a7b52":"df_train.isnull().sum()","9cc6ecbd":"df_train['Age'].fillna(df_train['Age'].median(), inplace=True)\ndf_test['Age'].fillna(df_test['Age'].median(), inplace=True)","ce09b23a":"df_train['Embarked'].fillna('S',inplace=True)\ndf_test['Embarked'].fillna('S', inplace=True)","a96246af":"df_train.isnull().sum()","443aaba9":"import seaborn as sns","547ee4ec":"sns.countplot(x='Survived', data=df_train)","2022efbe":"sns.countplot(x='Survived', hue='Sex', data=df_train)","ea907ee8":"sns.countplot(x='Survived', hue='Pclass', data=df_train)","7a6081eb":"sns.countplot(x='Survived', hue='Embarked', data=df_train)","99c46a8b":"sns.countplot(x='Survived', hue='SibSp', data=df_train)","20d73d0e":"sns.countplot(x='Survived', hue='Parch', data=df_train)","56df62ca":"sns.barplot(x='Survived', hue='Fare', data=df_train)","9c240a53":"df_train.isnull().sum()","64ef1018":"df_train.head()","9fd42fcd":"xcols = ['Pclass','Sex','Age','SibSp','Parch', 'Fare', 'Embarked']\nycols = ['Survived']","24f45725":"X = df_train[xcols]\nY = df_train[ycols]","8ea3790e":"X.head()","cf821fd2":"from sklearn.preprocessing import LabelEncoder\ngender = LabelEncoder()\nembarked = LabelEncoder()\n\nX['Sex'] = gender.fit_transform(df_train['Sex'])\nX['Embarked'] = embarked.fit_transform(df_train['Embarked'])","3439a3aa":"X.head()","aa439b67":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X[xcols],Y,test_size=0.3,random_state=30)","07dff16b":"X_train","09293dc5":"from sklearn.linear_model import LogisticRegression\nmodel1 = LogisticRegression()\nmodel1.fit(X_train,y_train)","f3689d0c":"model1.score(X_test,y_test)","688c1f81":"df_test.isnull().sum()","24b49738":"df_test['Fare'].fillna(df_test['Fare'].mean(), inplace=True)","d86ad53f":"df_test.isnull().sum()","8e5523fc":"df_test.head()","fd1baa6e":"test = df_test[xcols]\ntest['Sex'] = gender.fit_transform(test['Sex'])\ntest['Embarked'] = embarked.fit_transform(test['Embarked'])","c5892a92":"test.head()","ca59dfce":"y_pred = model1.predict(test)","cc3a7148":"sub_df = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived':y_pred})","50ded305":"sub_df","1c1d63ea":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(sub_df, title = \"Download CSV file\", filename = \"submission.csv\"):  \n    csv = sub_df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\n# create a link to download the dataframe\ncreate_download_link(sub_df)","0a994b9b":"# **Visualizations**"}}