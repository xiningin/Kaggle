{"cell_type":{"4865314d":"code","d71117f1":"code","903bcff2":"code","81fcfa79":"code","a0b0e427":"code","7106a844":"code","5e4db1e0":"code","a76ec9e8":"code","b74221f3":"code","566a3c22":"code","113b81d5":"code","7871a79b":"code","073747fe":"code","d9e07290":"code","e45ab49e":"code","9ff433c2":"code","39dacdfe":"code","3daa3589":"code","1cab88a6":"code","63ef84d4":"code","db46d5bd":"code","ad965276":"code","b6e44348":"code","f0d8b9dd":"code","8c60f5fd":"markdown","b7e2b003":"markdown","03df9ebc":"markdown","09ba671e":"markdown","de6e0b06":"markdown","9a57d2a0":"markdown","8809baf1":"markdown","f8f7a4eb":"markdown","8b6cc941":"markdown","eb23de08":"markdown","dec19a68":"markdown","b8f5fe4d":"markdown","84146f4a":"markdown","be78e4e0":"markdown","3f7c8dfb":"markdown","c98c90cc":"markdown","92fd563f":"markdown"},"source":{"4865314d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d71117f1":"!pip install scipy","903bcff2":"pip install numba","81fcfa79":"import numba","a0b0e427":"print(numba.__version__)","7106a844":"# bubble sort example  \n\ndef bubblesort(X):\n    N = len(X)\n    for end in range(N, 1, -1):\n        for i in range(end - 1):\n            cur = X[i]\n            if cur > X[i + 1]:\n                tmp = X[i]\n                X[i] = X[i + 1]\n                X[i + 1] = tmp\n                \n                ","5e4db1e0":"import numpy as np\n\noriginal = np.arange(0.0, 10.0, 0.01, dtype='f4')\nshuffled = original.copy()\nnp.random.shuffle(shuffled)","a76ec9e8":"shuffled","b74221f3":"%%time \nsorted = shuffled.copy()\nbubblesort(sorted)\nprint(np.array_equal(sorted, original))","566a3c22":"@numba.jit(\"void(f4[:])\")\ndef bubblesort_jit(X):\n    N = len(X)\n    for end in range(N, 1, -1):\n        for i in range(end - 1):\n            cur = X[i]\n            if cur > X[i + 1]:\n                tmp = X[i]\n                X[i] = X[i + 1]\n                X[i + 1] = tmp\n                \n# decorator","113b81d5":"%%time \nsorted = shuffled.copy()\nbubblesort_jit(sorted)\nprint(np.array_equal(sorted, original))","7871a79b":"import scipy.io as sio\nimport numpy as np\n\n#Save a mat file\nvect = np.arange(10)\nsio.savemat('array.mat', {'vect':vect})\n\n","073747fe":"#Now Load the File\nmat_file_content = sio.loadmat('array.mat')\nprint(mat_file_content)","d9e07290":"import scipy.io as sio\nmat_file_content = sio.whosmat('array.mat')\nprint(mat_file_content)","e45ab49e":"import numpy as np\nfrom scipy.optimize import fsolve\ndef func(x):\n    return x*2 + 2 * np.cos(x)\n\nsol = fsolve(func, 10)\nprint(sol)","9ff433c2":"from scipy.optimize import minimize_scalar\n\ndef objective_function(x):\n    return 3 * x ** 4 - 2 * x + 1","39dacdfe":"res = minimize_scalar(objective_function)\nprint(res)","3daa3589":"import scipy.integrate\nfrom numpy import exp\nf= lambda x:exp(-x**2)\ni = scipy.integrate.quad(f, 1, 3)\nprint(i)","1cab88a6":"import scipy.integrate\nfrom numpy import exp\nf= lambda x:np.sin(x)\ni = scipy.integrate.quad(f, 0, 1.57)\nprint(i)","63ef84d4":"# Generate Normal Random Variables\n\nfrom scipy.stats import norm  \na = norm.rvs(size = 150)\nprint(a) \nprint(a.mean())\nprint(a.std())","db46d5bd":"from scipy.stats import norm  \na = norm.rvs(size = 100000)\nprint(a) \nprint(a.mean())\nprint(a.std())","ad965276":"# T Test \n\n\nfrom scipy import stats  \nrvs = stats.norm.rvs(loc = 6, scale = 10, size = (50,2))  \n# loc --> mean , scale -- >std , size is the dimension \nprint(rvs)\n\n","b6e44348":"# compare if the 2 sample came from Population having  mean as 5 \n\nprint(stats.ttest_1samp(rvs,5.0))  \n\n","f0d8b9dd":"# compare if the 2 sample came from Population having  mean as 0\n\nprint(stats.ttest_1samp(rvs,7))  \n\n","8c60f5fd":"## T score is large - No they did not came from same population","b7e2b003":"weave.inline('std::cout << a << std::endl;',['a'])\n\n1\n\na = 'string'\n\nweave.inline('std::cout << a << std::endl;',['a'])\n\nstring","03df9ebc":"## The Scipy.io (Input and Output) package provides a wide range of functions to work around with different format of files like Matlab","09ba671e":"### Alternative to Weave in Python 3 ###","de6e0b06":"quad  -- Single integration\n\ndblquad -- Double integration\n\ntplquad --Triple integration","9a57d2a0":"# SCIPY OPTIMIZE","8809baf1":"## ROOT of the equation \n\nThe following example considers the single-variable transcendental equation.\n\nx**2 + 2cos(x) = 0","f8f7a4eb":"## T score is small - yes they came from same population","8b6cc941":"# SCIPY STATS","eb23de08":"## MInimize scalar with one variable","dec19a68":"### WEAVE library to run C\/C++ Code in python ###\n\nweave runs on python 2.X and hence not useful \n\n","b8f5fe4d":"T-Test\n\nThe t-test is used to compare two averages (means) and tells that if these averages are different from each other. The t-test is also described as significant in the differences between the groups.\n\nT-score\n\nThe t-score is a ratio between two groups and the difference within the groups. The smaller the t-score shows that the groups are relatively similar, and the more significant t-score indicates, the more difference between the groups.","84146f4a":"In our example, void(f4[:]), \n\nit means a function with no return (return type is void) \n\nthat takes as unique argument an one-dimensional array of 4 byte\n","be78e4e0":"## We can see the array along with the Meta information. If we want to inspect the contents of a MATLAB file without reading the data into memory, use the whosmat command as shown below.","3f7c8dfb":"# SCIPY IO","c98c90cc":"### Note first value is Integral value and second value is the error ","92fd563f":"# SCIPY INTEGRATION"}}