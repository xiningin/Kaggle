{"cell_type":{"10de2528":"code","64b26148":"code","0fca60f2":"code","5162b794":"code","cddfb36f":"code","e1f71abb":"code","f6ef7388":"code","4c1dc370":"code","2400f368":"code","f8e39e2b":"code","e4867bdf":"markdown","8a643568":"markdown","845e3eac":"markdown","2aab5a8c":"markdown","f03bf71c":"markdown","bad7be30":"markdown","ff90da0c":"markdown","ce352598":"markdown","4a34820a":"markdown","c0bbb322":"markdown"},"source":{"10de2528":"%%bash\npip uninstall -y scikit-learn\necho \"--------Unpacking\"\ncd \/ && tar -xvf \/kaggle\/input\/scikitlearnmodified\/scikit-learn-modified 2>&1 | tail\necho \"--------Building and installing\"\ncd \/scikit-learn && .\/setup.py install 2>&1 | tail","64b26148":"model_str = '800495e4020000000000008c1e736b6c6561726e2e6c696e6561725f6d6f64656c2e5f6c6f676973746963948c124c6f67697374696352656772657373696f6e9493942981947d94288c0770656e616c7479948c026c32948c046475616c94898c03746f6c94473f1a36e2eb1c432d8c014394473ff00000000000008c0d6669745f696e7465726365707494888c11696e746572636570745f7363616c696e67944b018c0c636c6173735f776569676874944e8c0c72616e646f6d5f7374617465944e8c06736f6c766572948c056c62666773948c086d61785f69746572944b648c0b6d756c74695f636c617373948c046175746f948c07766572626f7365944b008c0a7761726d5f737461727494898c066e5f6a6f6273944e8c086c315f726174696f944e8c0e6e5f66656174757265735f696e5f944b068c08636c61737365735f948c156e756d70792e636f72652e6d756c74696172726179948c0c5f7265636f6e7374727563749493948c056e756d7079948c076e6461727261799493944b0085944301629487945294284b014b028594681c8c0564747970659493948c026231944b004b0187945294284b038c017c944e4e4e4affffffff4affffffff4b007494628943020001947494628c05636f65665f94681b681e4b008594682087945294284b014b014b06869468258c026638944b004b0187945294284b038c013c944e4e4e4affffffff4affffffff4b00749462894330457f0d2d5784ea3f00000000000000008d4998cc252305408fb63bb544d8ebbfdeb154ee7081ef3f0b133e426a06f0bf947494628c0a696e746572636570745f94681b681e4b008594682087945294284b014b0185946834894308073b2507394dff3f947494628c076e5f697465725f94681b681e4b008594682087945294284b014b01859468258c026934944b004b0187945294284b0368354e4e4e4affffffff4affffffff4b007494628943041b000000947494628c105f736b6c6561726e5f76657273696f6e948c06302e32332e319475622e'\n\nwith open('confidence_model.pickle', 'wb') as f:\n    f.write(bytes.fromhex(model_str))","0fca60f2":"import json\nimport math\nimport operator\nimport pickle\nimport random\nfrom argparse import ArgumentParser\nfrom collections import defaultdict\nfrom functools import partial, reduce\nfrom itertools import chain, permutations, product, starmap, zip_longest\nfrom multiprocessing import Pool\nfrom pathlib import Path\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport sklearn\nimport sklearn.tree\nfrom numba import jit","5162b794":"COLORS = 10\n\n\ndef flatten(l):\n    ret = []\n    for x in l:\n        if isinstance(l, (list, tuple)):\n            ret.extend(x)\n        else:\n            ret.append(x)\n    return ret\n\n\ndef reshape_dataframe(df, shape):\n    df = [df.iloc[i:i + 1] for i in range(len(df))]\n    ret = np.zeros(len(df), dtype=object)\n    ret[:] = df\n    return ret.reshape(shape)\n\n\n@jit('void(int32[:,:,:],int8[:,:],int64[:,:],int32,int32,int8,int32,int32)', nopython=True, nogil=True)\ndef raycast_kernel_single(target, vis, image, dx, dy, col, x, y):\n    if vis[x, y]:\n        return\n    vis[x, y] = 1\n\n    x1 = x + dx\n    y1 = y + dy\n    if 0 <= x1 < image.shape[0] and 0 <= y1 < image.shape[1] and image[x1, y1] == col:\n        raycast_kernel_single(target, vis, image, dx, dy, col, x1, y1)\n        target[x, y, 0] = target[x1, y1, 0]\n        target[x, y, 1] = target[x1, y1, 1]\n    else:\n        target[x, y, 0] = x1\n        target[x, y, 1] = y1\n\n\n@jit('void(int32[:,:,:],int8[:,:],int64[:,:],int32,int32,int8)', nopython=True, nogil=True)\ndef raycast_kernel(target, vis, image, dx, dy, col):\n    for ox in range(image.shape[0]):\n        for oy in range(image.shape[1]):\n            if col == -1:\n                tcol = image[ox, oy]\n            else:\n                tcol = col\n\n            raycast_kernel_single(target, vis, image, dx, dy, tcol, ox, oy)\n\n\ndef raycast(image, delta, col):\n    vis = np.zeros_like(image, dtype=np.int8)\n    target = np.zeros((*image.shape, 2), dtype=np.int32)\n    raycast_kernel(target, vis, image, delta[0], delta[1], col if col is not None else -1)\n    return target\n\n\n@jit('void(int32[:,:], int8[:,:,:], int64[:,:], int8[:,:], int32[:,:])', nopython=True, nogil=True)\ndef components_kernel(sizes, borders, image, vis, stack):\n    col = 0\n    # stack[comp, 2 + c] -- counts of color c in component comp\n    for a in range(image.shape[0]):\n        for b in range(image.shape[1]):\n            k = 0\n            stack[k, 0] = a\n            stack[k, 1] = b\n            k += 1\n\n            while k != 0:\n                k -= 1\n                x = stack[k, 0]\n                y = stack[k, 1]\n\n                if vis[x, y]:\n                    continue\n                vis[x, y] = True\n                sizes[x, y] = col\n\n                for i, j in [[1, 0], [-1, 0], [0, 1], [0, -1]]:\n                    u = x + i\n                    v = y + j\n                    if 0 <= u < image.shape[0] and 0 <= v < image.shape[1]:\n                        c = image[u, v]\n                        if not vis[u, v] and image[x, y] == image[u, v]:\n                            stack[k, 0] = u\n                            stack[k, 1] = v\n                            k += 1\n                        if c == image[x, y]:\n                            c = -1\n                    else:\n                        c = 0\n\n                    if c >= 0:\n                        stack[col, 2 + c] += 1\n\n            col += 1\n\n    for i in range(col):\n        stack[i, 0] = 0\n    for a in range(image.shape[0]):\n        for b in range(image.shape[1]):\n            stack[sizes[a, b], 0] += 1\n\n    for a in range(image.shape[0]):\n        for b in range(image.shape[1]):\n            borders[a, b] = stack[sizes[a, b], 2:]\n            sizes[a, b] = stack[sizes[a, b], 0]\n\n\ndef components(image):\n    vis = np.zeros_like(image, dtype=np.int8)\n    sizes = np.zeros_like(image, dtype=np.int32)\n    borders = np.zeros((*image.shape, COLORS), dtype=np.int8)\n    stack = np.zeros((image.shape[0] * image.shape[1], 2 + COLORS), dtype=np.int32)\n    components_kernel(sizes, borders, image, vis, stack)\n    return sizes, borders\n\n\nclass Offset:\n\n    @jit('void(int32[:,:,:], int32[:,:,:], int32[:,:,:])', nopython=True, nogil=True)\n    def compose_offsets_kernel(result, offsets, target):\n        for x in range(offsets.shape[0]):\n            for y in range(offsets.shape[1]):\n                a = offsets[x, y, 0]\n                b = offsets[x, y, 1]\n                if 0 <= a < offsets.shape[0] and 0 <= b < offsets.shape[1]:\n                    result[x, y, 0] = target[a, b, 0]\n                    result[x, y, 1] = target[a, b, 1]\n                else:\n                    result[x, y, 0] = a\n                    result[x, y, 1] = b\n\n    @jit('void(int8[:,:], int32[:,:], int32[:,:,:], int64[:,:])', nopython=True, nogil=True)\n    def get_cols_dists_kernel(cols, dists, offsets, image):\n        for x in range(offsets.shape[0]):\n            for y in range(offsets.shape[1]):\n                a = offsets[x, y, 0]\n                b = offsets[x, y, 1]\n                if 0 <= a < offsets.shape[0] and 0 <= b < offsets.shape[1]:\n                    cols[x, y] = image[a, b]\n                else:\n                    cols[x, y] = 0\n                dists[x, y] = max(abs(x - a), abs(y - b))\n\n    def compose(offsets, target):\n        result = np.zeros_like(offsets)\n        Offset.compose_offsets_kernel(result, offsets, target)\n        return result\n\n    def identity(xyshape):\n        a = np.arange(xyshape[0], dtype=np.int32).reshape(-1, 1, 1).repeat(xyshape[1], 1)\n        b = np.arange(xyshape[1], dtype=np.int32).reshape(1, -1, 1).repeat(xyshape[0], 0)\n        return np.concatenate([a, b], 2)\n\n    def get_cols_dists(offsets, image):\n        cols = np.zeros_like(image, dtype=np.int8)\n        dists = np.zeros_like(image, dtype=np.int32)\n        Offset.get_cols_dists_kernel(cols, dists, offsets, image)\n        return cols, dists","cddfb36f":"class TException(Exception):\n    \"\"\"\n    Transform exception. A transformer can throw this exception to indicate\n    that it doesn't want or doesn't know how to transform a given task.\n    \"\"\"\n\n    pass\n\n\nclass TBase:\n    \"\"\"\n    The base class of task transformers. A transformer transforms a task by\n    transforming or augmenting input images and corresponding output images.\n    It also performs inverse transformation of the output prediction.\n    \"\"\"\n\n    class SampleTransformer:\n        \"\"\"\n        The base class of sample transformers. A sample transformer transforms\n        one sample (one input image possibly with an output image) of the task.\n        \"\"\"\n\n        def __init__(self, task_transformer, in_image):\n            self.task_transformer = task_transformer\n            self.in_image = in_image\n            self.transformed_images = self.transform()\n\n        def transform(self):\n            \"\"\"\n            Transforms or augments `self.in_image`. Returns a list of images.\n            \"\"\"\n\n            raise NotImplementedError()\n\n        def transform_output(self, out_image):\n            \"\"\"\n            Transforms or augments `out_images`. Returns a list of images.\n            The length of that list must equal the length of the list returned\n            in `transform` function.\n            \"\"\"\n\n            raise NotImplementedError()\n\n        def transform_output_inverse(self, prediction):\n            \"\"\"\n            Performs aggregation of image predictions and transforms it back.\n            `prediction` is a list of the same length as returned in `transform`\n            and `transform_output` functions. Returns one image.\n            \"\"\"\n\n            raise NotImplementedError()\n\n    def __init__(self, in_images, out_images):\n        \"\"\"\n        The length of `in_images` must be greater or equal the length of `out_images`.\n        Input images that don't have corresponding output images are test images,\n        and are used for making predictions.\n        \"\"\"\n\n        assert len(in_images) >= len(out_images)\n\n        self.in_images = in_images\n        self.out_images = out_images\n\n    def get_transformer(self, in_image):\n        \"\"\"\n        Return SampleTransformer for one image\n        \"\"\"\n\n        return self.SampleTransformer(self, in_image)\n\n    def unsequence(self):\n        return [self]\n\n\nclass TSequential(TBase):\n    \"\"\"\n    The transformer class that executes sequentially the list of transformers.\n    \"\"\"\n\n    class SampleTransformer(TBase.SampleTransformer):\n        def transform(self):\n            self.tr1 = self.task_transformer.tr1.get_transformer(self.in_image)\n            ins = self.tr1.transformed_images\n\n            self.tr2s = []  # [(transformer, images_count)]\n            ret = []\n            for i in ins:\n                t = self.task_transformer.tr2.get_transformer(i)\n                ret.append(t.transformed_images)\n                self.tr2s.append((t, len(ret[-1])))\n            return flatten(ret)\n\n        def transform_output(self, out_image):\n            outs = self.tr1.transform_output(out_image)\n            assert len(self.tr2s) == len(outs)\n            ret = []\n            for (t, c), o in zip(self.tr2s, outs):\n                ret.append(t.transform_output(o))\n                assert c == len(ret[-1])\n            return flatten(ret)\n\n        def transform_output_inverse(self, prediction):\n            k = 0\n            outs = []\n            for t, c in self.tr2s:\n                outs.append(t.transform_output_inverse(prediction[k: k + c]))\n                k += c\n            return self.tr1.transform_output_inverse(outs)\n\n    def __init__(self, tr1, tr2, *a, **k):\n        super().__init__(*a, **k)\n\n        self.tr1 = tr1(self.in_images, self.out_images)\n\n        transformers = [self.tr1.get_transformer(i) for i in self.in_images]\n        ins = flatten([t.transformed_images for t in transformers])\n        outs = flatten([t.transform_output(o)\n                        for t, o in zip(transformers, self.out_images)])\n        self.tr2 = tr2(ins, outs)\n\n    def unsequence(self):\n        return [*self.tr1.unsequence(), *self.tr2.unsequence()]\n\n    @classmethod\n    def make(cls, trs, *a, **k):\n        if len(trs) == 0:\n            return TIdentity\n        if len(trs) == 1:\n            return trs[0]\n        if len(trs) == 2:\n            return cls(trs[0], trs[1], *a, **k)\n        return cls(trs[0], partial(cls.make, trs[1:]), *a, **k)\n\n\nclass TCBase(TBase):\n    \"\"\"\n    The base class for color transformers.\n    \"\"\"\n\n    def __init__(self, *a, **k):\n        super().__init__(*a, **k)\n        self.constant_colors = sorted(list(set(range(COLORS))\n            - set(np.unique(np.concatenate([i.reshape(-1) for i in self.in_images])))))\n\n    class SampleTransformer(TBase.SampleTransformer):\n        def __init__(self, task_transformer, in_image, color_mapping, out_color_mapping=None):\n            self.color_mapping = color_mapping\n            self.out_color_mapping = out_color_mapping if out_color_mapping is not None else color_mapping\n            super().__init__(task_transformer, in_image)\n\n        def inversed_out_mapping(self):\n            assert len(set(self.out_color_mapping)) == len(\n                self.out_color_mapping)\n            assert set(self.out_color_mapping) == set(range(COLORS))\n            ret = np.zeros_like(self.out_color_mapping)\n            ret[self.out_color_mapping] = np.arange(\n                len(self.out_color_mapping))\n            return ret\n\n        def transform(self):\n            return [self.color_mapping[self.in_image]]\n\n        def transform_output(self, out_image):\n            return [self.out_color_mapping[out_image]]\n\n        def transform_output_inverse(self, prediction):\n            return self.inversed_out_mapping()[prediction[0]]\n\n    def get_transformer(self, in_image):\n        raise NotImplementedError()\n\n\nclass TCCount(TCBase):\n    \"\"\"\n    A color transformer that colors each image independenly by the number\n    of color occurences, i.e. after coloring, the color 0 is the frequent color\n    in the image, the color 1 is the second frequent color in the image, etc.\n    \"\"\"\n\n    def get_transformer(self, in_image):\n        mapping = np.arange(COLORS)\n        colors, counts = np.unique(np.concatenate(\n            [in_image.reshape(-1), np.arange(COLORS)]), return_counts=True)\n        pos = [((in_image == c).nonzero() + (np.array([c, 0]),))[0].tolist()\n               for c in range(COLORS)]\n        i = 0\n        for _, _, col in sorted(zip(counts, pos, colors), reverse=True):\n            if col in self.constant_colors:\n                mapping[col] = COLORS - 1 - self.constant_colors.index(col)\n            else:\n                mapping[col] = i\n                i += 1\n        return self.SampleTransformer(self, in_image, mapping)\n\n\nclass TCCountBg(TCBase):\n    \"\"\"\n    A color transformer that works in the same way as `TCCount` but the color 0 is\n    reserved for the global color 0.\n    \"\"\"\n\n    def get_transformer(self, in_image):\n        mapping = np.arange(COLORS)\n        colors, counts = np.unique(np.concatenate(\n            [in_image.reshape(-1), np.arange(COLORS), np.array([0] * 10000)]), return_counts=True)\n        pos = [((in_image == c).nonzero() + (np.array([c, 0]),))[0].tolist()\n               for c in range(COLORS)]\n        i = 0\n        for _, _, col in sorted(zip(counts, pos, colors), reverse=True):\n            if col in self.constant_colors:\n                mapping[col] = COLORS - 1 - self.constant_colors.index(col)\n            else:\n                mapping[col] = i\n                i += 1\n        return self.SampleTransformer(self, in_image, mapping)\n\n\nclass TCPos(TCBase):\n    \"\"\"\n    A color transformer that colors images accordingly to the order of occurrences. \n    \"\"\"\n\n    def get_transformer(self, in_image):\n        mapping = {}\n        for col in range(COLORS):\n            if col in self.constant_colors:\n                mapping[col] = COLORS - 1 - self.constant_colors.index(col)\n        k = 0\n        for x, y in product(*map(range, in_image.shape)):\n            c = in_image[x, y]\n            if c not in mapping:\n                mapping[c] = k\n                k += 1\n        for c in range(COLORS):\n            if c not in mapping:\n                mapping[c] = k\n                k += 1\n        mapping = np.array([mapping[i] for i in range(COLORS)])\n\n        return self.SampleTransformer(self, in_image, mapping)\n\n\nclass TIdentity(TBase):\n    class SampleTransformer(TBase.SampleTransformer):\n        def transform(self):\n            return [self.in_image]\n\n        def transform_output(self, out_image):\n            return [out_image]\n\n        def transform_output_inverse(self, prediction):\n            return prediction[0]\n\n\nclass TSeparationRemover(TBase):\n    \"\"\"\n    A transformer that removes vertical and horizontal separations \/ frames\n    from the image. Every image has to have the same number of separations.\n    \"\"\"\n\n    @staticmethod\n    def calc_delta_start_count(x, y, borders, shape, extend_nonexisting=False):\n        if any(starmap(lambda s, k: (s - k + 1 - 2 * borders) % k != 0, zip(shape, [x, y]))):\n            return None, None, None\n        delta = tuple(starmap(lambda s, k: (s + 1 - 2 * borders) \/\/ k, zip(shape, [x, y])))\n        if borders:\n            start = (0, 0)\n        else:\n            if extend_nonexisting:\n                start = (-1, -1)\n            else:\n                start = (delta[0] - 1, delta[1] - 1)\n        if extend_nonexisting:\n            count = (x + 1, y + 1)\n        else:\n            count = (x - 1 + 2 * borders, y - 1 + 2 * borders)\n        return delta, start, count\n\n    def __init__(self, *a, **k):\n        super().__init__(*a, **k)\n\n        number_of_match = 0\n\n        matches = []  # [(x_parts, y_parts, with_borders)]\n        for x in range(1, min(map(lambda x: x.shape[0], self.in_images))):\n            for y in range(1, min(map(lambda x: x.shape[1], self.in_images))):\n                for borders in [False, True]:\n                    if (x, y) == (1, 1):\n                        continue\n\n                    for img in self.in_images:\n                        delta, start, count = self.calc_delta_start_count(\n                            x, y, borders, img.shape)\n                        if delta is None:\n                            break\n\n                        arr = []\n                        for d in [0, 1]:\n                            for a in range(count[d]):\n                                z = start[d] + a * delta[d]\n                                if d == 0:\n                                    r = img[z, :]\n                                else:\n                                    r = img[:, z]\n                                arr = np.unique(np.concatenate([arr, np.unique(r)]))\n                                if len(arr) > 1:\n                                    break\n                            if len(arr) > 1:\n                                break\n                        if len(arr) != 1:\n                            break\n                    else:\n                        matches.append((x, y, borders))\n\n        matches = sorted(matches, key=lambda x: (-x[0] - x[1], not x[2], *x))\n        if len(matches) <= number_of_match:\n            raise TException()\n\n        self.match = matches[number_of_match]\n\n    class SampleTransformer(TBase.SampleTransformer):\n        def transform(self):\n            x, y, borders = self.task_transformer.match\n            delta, start, count = self.task_transformer.calc_delta_start_count(\n                x, y, borders, self.in_image.shape, extend_nonexisting=True)\n            ret = []\n            for a in range(count[0]):\n                range1 = slice(start[0] + a * delta[0] + 1,\n                               start[0] + (a + 1) * delta[0])\n                r = []\n                for b in range(count[1]):\n                    range2 = slice(start[1] + b * delta[1] + 1,\n                                   start[1] + (b + 1) * delta[1])\n                    r.append(self.in_image[range1, range2])\n\n                ret.append(np.concatenate(r, 1))\n            ret = np.concatenate(ret)\n            return [ret]\n\n        def transform_output(self, out_image):\n            return [out_image]\n\n        def transform_output_inverse(self, prediction):\n            return prediction[0]\n\n\nclass TTransposeInput(TBase):\n    class SampleTransformer(TBase.SampleTransformer):\n        def transform(self):\n            return [self.in_image.copy().T]\n\n        def transform_output(self, out_image):\n            return [out_image]\n\n        def transform_output_inverse(self, prediction):\n            return prediction[0]\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if all([i.shape[0] == i.shape[1] for i in self.in_images]):\n            raise TException()\n\n\ndef _get_flips(img):\n    return [img[:, :], img[::-1, :], img[:, ::-1], img[::-1, ::-1]]\n\n\nclass TAugFlips(TBase):\n    \"\"\"\n    A transformer that augments images by adding their flips.\n    \"\"\"\n\n    class SampleTransformer(TBase.SampleTransformer):\n        def transform(self):\n            return _get_flips(self.in_image)\n\n        def transform_output(self, out_image):\n            return _get_flips(out_image)\n\n        def transform_output_inverse(self, prediction):\n            return prediction[0]\n\n\nclass TAugFlipsWRotation(TBase):\n    class SampleTransformer(TBase.SampleTransformer):\n        def transform(self):\n            return _get_flips(self.in_image) + _get_flips(self.in_image.transpose(1, 0))\n\n        def transform_output(self, out_image):\n            return _get_flips(out_image) + _get_flips(out_image.transpose(1, 0))\n\n        def transform_output_inverse(self, prediction):\n            return prediction[0]\n\n\nclass TAugColor(TBase):\n    \"\"\"\n    A transformer that augments images by recoloring them using random color\n    permutations, except for the color 0 which is not changed.\n    \"\"\"\n\n    class SampleTransformer(TBase.SampleTransformer):\n\n        def transform(self):\n            return [m[self.in_image] for m in self.task_transformer.mappings]\n\n        def transform_output(self, out_image):\n            return [m[out_image] for m in self.task_transformer.mappings]\n\n        def transform_output_inverse(self, prediction):\n            return self.task_transformer.inv_mappings[0][prediction[0]]\n\n    def inverted_mapping(self, mapping):\n        ret = np.zeros_like(mapping)\n        ret[mapping] = np.arange(len(mapping))\n        return ret\n\n    def __init__(self, in_images, out_images):\n        self.in_images = in_images\n        self.out_images = out_images\n\n        all_input_colors = set(chain.from_iterable(map(np.unique, in_images)))\n        all_output_colors = set(chain.from_iterable(map(np.unique, out_images)))\n        self.all_colors = set(range(COLORS))\n\n        self.permutable_colors = sorted(all_input_colors.difference({0}))\n\n        self.mappings = []\n        self.inv_mappings = []\n\n        perms = list(permutations(self.permutable_colors))\n        for perm in random.sample(perms, min(12, len(perms))):\n            mapping = np.arange(COLORS)\n            mapping[self.permutable_colors] = perm\n            self.mappings.append(mapping)\n            self.inv_mappings.append(self.inverted_mapping(mapping))\n\n        if len(self.mappings) <= 1:\n            raise TException()","e1f71abb":"class FException(Exception):\n    \"\"\"\n    Featurizer exception. A featurizer can throw this exception to indicate\n    that it doesn't want or doesn't know how to featurize a given task.\n    \"\"\"\n\n    pass\n\n\nclass FBase:\n    \"\"\"\n    The base class of task featurizers. A featurizer featurizes a task by\n    extracting features from input images, and getting labels (pixel-level) from output images.\n    It also performs assembling of the output image based on predictions.\n    \"\"\"\n\n    class SampleFeaturizer:\n        \"\"\"\n        The base class of sample featurizer. A sample featurizer featurizes\n        one sample of the task.\n        \"\"\"\n\n        def __init__(self, task_featurizer, in_image):\n            self.task_featurizer = task_featurizer\n            self.in_image = in_image\n\n        def calc_features(self):\n            self.features = self.featurize()\n\n        def featurize(self):\n            \"\"\"\n            Extracts features from `self.in_image`. Returns a data frame.\n            \"\"\"\n\n            raise NotImplementedError()\n\n        def get_labels(self, out_image):\n            \"\"\"\n            Extracts labels from `out_image`. Return a 1D np.array of integers.\n            The length of this np.array must equal the length of the dataframe\n            returned in `featurize` function. $i$-th element of the array\n            corresponds to $i$-th element of the data frame.\n            \"\"\"\n\n            raise NotImplementedError()\n\n        def assemble(self, prediction):\n            \"\"\"\n            Assembles predictions into the output image. `prediction` is\n            a 1D np.array of integers that correspond to the data frame\n            returned in `featurize` function.\n            \"\"\"\n\n            raise NotImplementedError()\n\n    def __init__(self, in_images, out_images):\n        self.in_images = in_images\n        self.out_images = out_images\n\n    def get_featurizer(self, in_image):\n        return self.SampleFeaturizer(self, in_image)\n\n    def get_features_visualization(self):\n        return []\n\n\nclass FGlobal(FBase):\n    \"\"\"\n    Experimental featurizer, that wraps another featurizer,\n    and appends image-level features to each dataframe row.\n    Here, global features are based on a simple object detection algorithm.\n    \"\"\"\n\n    class SampleFeaturizer(FBase.SampleFeaturizer):\n        def __init__(self, wrapped_sample_featurizer, featurizer, in_image, in_image_gfeatures):\n            super().__init__(featurizer, in_image)\n            self.wrapped_sample_featurizer = wrapped_sample_featurizer\n            self.featurizer = featurizer\n            self.in_image = in_image\n            self.in_image_gfeatures = in_image_gfeatures\n\n        def featurize(self):\n            df = self.wrapped_sample_featurizer.featurize()\n            assert len(self.in_image_gfeatures) > 0\n            global_features = np.array(list(chain.from_iterable(f.reshape(-1)\n                    for f in self.in_image_gfeatures)))\n            assert len(global_features) > 1\n            names = [f'global_feat{i}' for i in range(len(global_features))]\n            for name, col in zip(names, global_features):\n                df[name] = [col] * len(df)\n            return df\n\n        def get_labels(self, out_image):\n            return self.wrapped_sample_featurizer.get_labels(out_image)\n\n        def assemble(self, prediction):\n            return self.wrapped_sample_featurizer.assemble(prediction)\n\n    def _calc_global_features(self):\n        \"\"\"\n        Some heuristic -- object detection.\n        \"\"\"\n        bboxes_per_sample = []\n        for img in self.in_images:\n            bboxes = defaultdict(list)\n            for col in range(10):\n                num_component, component = cv2.connectedComponents((img == col).astype(np.uint8))\n                for c in range(1, num_component):\n                    p = (component == c).astype(np.uint8)\n                    if p.sum():\n                        bbox = cv2.boundingRect(p)\n                        bboxes[bbox[2:]].append(bbox)\n            bboxes_per_sample.append(bboxes)\n\n        all_keys = sorted(set(chain.from_iterable(b.keys() for b in bboxes_per_sample)))\n        for w, h in all_keys:\n            crops = []\n            if (w, h) == (1, 1):\n                continue\n            if all(len(b[(w, h)]) == 1 for b in bboxes_per_sample):\n                bboxes = []\n                for in_img, bbox in zip(self.in_images, bboxes_per_sample):\n                    bbox = bbox[(w, h)]\n                    assert len(bbox) == 1\n                    if (h, w) == in_img.shape:\n                        break\n                    bboxes.append(bbox[0])\n                else:\n                    for in_img, bbox in zip(self.in_images, bboxes):\n                        x, y, _, _ = bbox\n                        crops.append(in_img[y:y + h, x:x + w])\n\n                    # skip detection if there are only zero-entropy images\n                    if all(len(np.unique(img)) == 1 for img in crops):\n                        continue\n\n                    self.in_images_gfeatures.append(crops)\n\n    def __init__(self, wrapped_featurizer, in_images, out_images):\n        self.in_images = in_images\n        self.out_images = out_images\n        self.wrapped_featurizer = wrapped_featurizer(in_images, out_images)\n\n        # 2D array of images (crops): n_detections (most often 0 or 1) x len(in_images)\n        self.in_images_gfeatures = []\n\n        self._calc_global_features()\n        if not self.in_images_gfeatures:\n            raise FException()\n\n    def get_featurizer(self, in_image):\n        wrapped_sample_featurizer = self.wrapped_featurizer.get_featurizer(in_image)\n        in_image_gfeatures = []\n\n        # gather features corresponding to the given in_image\n        for one_detection_images in self.in_images_gfeatures:\n            assert len(self.in_images) == len(one_detection_images)\n            for img, gfeatures in zip(self.in_images, one_detection_images):\n                if img is in_image:\n                    in_image_gfeatures.append(gfeatures)\n\n        assert in_image_gfeatures\n        return self.SampleFeaturizer(wrapped_sample_featurizer, self, in_image, in_image_gfeatures)\n\n    def get_features_visualization(self):\n        return self.in_images_gfeatures\n\n\nclass FConstant(FBase):\n    \"\"\"\n    A featurizer for tasks in which input size equals output size.\n    \"\"\"\n\n    class SampleFeaturizer(FBase.SampleFeaturizer):\n        def featurize(self):\n            features = []  # list of np.array[nfeatures, xsize, ysize] or np.array[xsize, ysize]\n            feature_names = []  # list of strings\n\n            deltas = (-1, 0, 1)\n            neigh = np.zeros((len(deltas) ** 2, *self.in_image.shape), dtype=np.int8)\n            for ox, oy in product(*map(range, self.in_image.shape)):\n                # absolute neighbourhood color\n                for k, (i, j) in enumerate(product(*[deltas] * 2)):\n                    x = (ox + i)  # % self.in_image.shape[0]\n                    y = (oy + j)  # % self.in_image.shape[1]\n                    if 0 <= x < self.in_image.shape[0] and 0 <= y < self.in_image.shape[1]:\n                        neigh[k, ox, oy] = self.in_image[x, y]\n                    else:\n                        neigh[k, ox, oy] = 0\n                    k += 1\n            features.append(neigh)\n            feature_names.extend(['Neigh{}'.format(i) for i in product(*[deltas] * 2)])\n\n            # unique = np.zeros((3, *self.in_image.shape), dtype=np.int8) # 3 because row, column, neighborhood\n            # unique_names = []\n            # for ox, oy in product(*map(range, self.in_image.shape)):\n            #     # absolute neighbourhood color\n            #     unique[0, ox, oy] = len(np.unique(self.in_image[:, oy]))\n            #     unique[1, ox, oy] = len(np.unique(self.in_image[ox, :]))\n            #     unique[2, ox, oy] = len(np.unique(self.in_image[max(ox - 1, 0) : ox + 2,\n            #                                                     max(oy - 1, 0) : oy + 2]))\n            # features.append(unique)\n            # feature_names.extend(['UniqueInRow', 'UniqueInCol', 'UniqueInNeigh'])\n\n            if self.task_featurizer is None or self.task_featurizer.use_rot_90:\n                rotations = (False, True)\n            else:\n                rotations = (False,)\n\n            for use_rot in rotations:\n                sym = np.zeros((4, *self.in_image.shape), dtype=np.int8)\n                for ox, oy in product(*map(range, self.in_image.shape)):\n                    for k, (i, j) in enumerate(product(*([[0, 1]] * 2))):\n                        x, y = ox, oy\n                        if i:\n                            x = self.in_image.shape[0] - x - 1\n                        if j:\n                            y = self.in_image.shape[1] - y - 1\n                        if use_rot:\n                            if y >= self.in_image.shape[0] or x >= self.in_image.shape[1]:\n                                sym[k, ox, oy] = -1\n                            else:\n                                sym[k, ox, oy] = self.in_image[y, x]\n                        else:\n                            sym[k, ox, oy] = self.in_image[x, y]\n                features.append(sym)\n                feature_names.extend(f'SymRot90_{i}{j}' if use_rot else f'Sym_{i}{j}'\n                                     for i, j in product(*([[0, 1]] * 2)))\n\n            deltas = [[1, 0], [-1, 0], [0, 1], [0, -1],\n                      [1, 1], [-1, -1], [-1, 1], [1, -1]]\n            for di, d in enumerate(deltas):\n                col_opts = [0, None]\n                targets = [raycast(self.in_image, d, col) for col in col_opts]\n                for t1, col in zip(targets, col_opts):\n                    cols, dists = Offset.get_cols_dists(t1, self.in_image)\n                    features.extend([dists % 2, dists % 3])\n                    dists = dists.astype(np.float32)\n                    features.extend([cols, dists])\n                    ray_type_label = 'Same' if col is None else 'Notbg'\n                    feature_names.extend([f'RayCol{ray_type_label}_{d}_mod2',\n                                          f'RayCol{ray_type_label}_{d}_mod3'])\n                    feature_names.extend([f'RayCol{ray_type_label}_{d}',\n                                          f'RayDist{ray_type_label}_{d}'])\n                    for t2, col2 in zip(targets, col_opts):\n                        off = Offset.compose(t1, t2)\n\n                        cols2, dists2 = Offset.get_cols_dists(off, self.in_image)\n                        dists2 = dists2.astype(np.float32)\n                        features.extend([cols2, dists2 - dists])\n                        ray_type_label2 = 'Same' if col2 is None else 'Notbg'\n                        feature_names.extend([f'RayCol{ray_type_label}_{ray_type_label2}_{d}',\n                                              f'RayDist{ray_type_label}_{ray_type_label2}_{d}'])\n\n            sizes, borders = components(self.in_image)\n            sizes = sizes.astype(np.float32)\n            border_exclusive = ((borders == borders.sum(2, keepdims=True)) * np.arange(1, COLORS + 1)).sum(2) - 1\n            features.extend([sizes, border_exclusive])\n            feature_names.extend(['ComponentSize', 'ComponentBorderExclusive'])\n\n            features = np.concatenate(list(map(\n                lambda x: (x if len(x.shape) == 3 else x.reshape((-1, *x.shape))).astype(object), features)))\n            features = features.reshape((features.shape[0], -1)).transpose([1, 0])\n            return pd.DataFrame(features, columns=feature_names)\n\n        def get_labels(self, out_image):\n            if self.in_image.shape != out_image.shape:\n                raise FException()\n            return out_image.reshape((-1,))\n\n        def assemble(self, prediction):\n            return prediction.reshape(self.in_image.shape)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.use_rot_90 = all(i.shape[0] == i.shape[1] for i in self.in_images)\n        if not all(i.shape == o.shape for i, o in zip(self.in_images, self.out_images)):\n            raise FException()\n\n\nclass FFactorBase(FBase):\n    \"\"\"\n    The base class of featurizers for tasks where an input size is a multiplication\n    of an output size (the same multiplication factor for every pair input \/ output image).\n    \"\"\"\n\n    @staticmethod\n    def calculate_factor(i, o):\n        round_num = 6\n        return round(float(o[0] \/ i[0]), round_num), round(float(o[1] \/ i[1]), round_num)\n\n    def __init__(self, *a, **k):\n        super().__init__(*a, **k)\n        factors = [self.calculate_factor(i.shape, o.shape)\n                   for i, o in zip(self.in_images, self.out_images)]\n        if len(set(factors)) != 1:\n            raise FException()\n        self.factor = factors[0]\n        self.factor = tuple(map(lambda x: round(x) if x == round(x) else x, self.factor))\n\n    class SampleFeaturizer(FBase.SampleFeaturizer):\n        def __init__(self, *a, **k):\n            super().__init__(*a, **k)\n            self.factor = self.task_featurizer.factor\n            self.out_size = tuple((round(float(f * s))\n                    for f, s in zip(self.task_featurizer.factor, self.in_image.shape)))\n            if (self.task_featurizer.calculate_factor(self.in_image.shape, self.out_size)\n                    != self.task_featurizer.factor):\n                raise FException()\n\n        def get_labels(self, out_image):\n            return out_image.reshape((-1,))\n\n        def assemble(self, prediction):\n            return prediction.reshape(self.out_size)\n\n\nclass FFactorUp(FFactorBase):\n    def __init__(self, coord_func, *a, **k):\n        self.coord_func = coord_func\n        super().__init__(*a, **k)\n\n    class SampleFeaturizer(FFactorBase.SampleFeaturizer):\n        def featurize(self):\n            if (not (self.factor == tuple(map(round, self.factor))\n                    and (self.factor[0] >= 1 and self.factor[1] >= 1)\n                    and (self.factor[0] > 1 or self.factor[1] > 1))):\n                raise FException()\n\n            single_featurizer = FConstant.SampleFeaturizer(None, self.in_image)\n            single_featurizer.calc_features()\n            feats = reshape_dataframe(single_featurizer.features, self.in_image.shape)\n\n            features = np.zeros(self.out_size, dtype=object)\n            for x, y in product(range(self.in_image.shape[0]), range(self.in_image.shape[1])):\n                for i, j in product(range(self.factor[0]), range(self.factor[1])):\n                    f = feats[x, y].copy()\n                    f['CoordX'] = [i]\n                    f['CoordY'] = [j]\n                    for a, b in product(*[[0, 1]] * 2):\n                        f[f'SymC_{a}{b}'] = f[f'Sym_{(i % 2) ^ a}{b}']\n                        f[f'Sym_{a}C{b}'] = f[f'Sym_{a}{(j % 2) ^ b}']\n                        f[f'SymC_{a}C{b}'] = f[f'Sym_{(i % 2) ^ a}{(j % 2) ^ b}']\n                    features[self.task_featurizer.coord_func(x, y, i, j, self)] = f\n\n            features = pd.concat(features.reshape(-1).tolist(), ignore_index=True)\n            return features\n\n\ndef tile_coord(x, y, i, j, self):\n    return x + self.in_image.shape[0] * i, y + self.in_image.shape[1] * j\n\n\ndef scale_coord(x, y, i, j, self):\n    return x * self.factor[0] + i, y * self.factor[1] + j\n\n\nFTile = partial(FFactorUp, tile_coord)\nFScale = partial(FFactorUp, scale_coord)\n\n\nclass FFactorDown1(FFactorBase):\n    class SampleFeaturizer(FFactorBase.SampleFeaturizer):\n        def featurize(self):\n            down_factor = (round(1 \/ self.factor[0], 3), round(1 \/ self.factor[1], 3))\n            down_factor = tuple(map(lambda x: round(x) if x == round(x) else x, down_factor))\n\n            if (not (down_factor == tuple(map(round, down_factor))\n                    and (self.factor[0] <= 1 and self.factor[1] <= 1)\n                    and (self.factor[0] < 1 or self.factor[1] < 1))):\n                raise FException()\n\n            features = []\n            for x, y in product(*map(range, down_factor)):\n                fragment = self.in_image[x * self.out_size[0]: (x + 1) * self.out_size[0],\n                                         y * self.out_size[1]: (y + 1) * self.out_size[1]]\n                single_featurizer = FConstant.SampleFeaturizer(None, fragment)\n                single_featurizer.calc_features()\n                f = single_featurizer.features.copy()\n                f.columns = list(map(lambda col: 'x{}-y{}-{}'.format(x, y, col), f.columns))\n                features.append(f)\n\n            features = reduce(pd.DataFrame.join, features)\n            return features\n\n\nclass FFactorDown2(FFactorBase):\n    class SampleFeaturizer(FFactorBase.SampleFeaturizer):\n        def featurize(self):\n            down_factor = (round(1 \/ self.factor[0], 3), round(1 \/ self.factor[1], 3))\n            down_factor = tuple(map(lambda x: round(x) if x == round(x) else x, down_factor))\n\n            if (not (down_factor == tuple(map(round, down_factor))\n                    and (self.factor[0] <= 1 and self.factor[1] <= 1)\n                    and (self.factor[0] < 1 or self.factor[1] < 1))):\n                raise FException()\n\n            features = np.zeros(self.out_size, dtype=object)\n            for x, y in product(*map(range, self.out_size)):\n                fragment = self.in_image[x * down_factor[0]: (x + 1) * down_factor[0],\n                                         y * down_factor[1]: (y + 1) * down_factor[1]]\n                single_featurizer = FConstant.SampleFeaturizer(None, fragment)\n                single_featurizer.calc_features()\n                f = single_featurizer.features\n                f = reshape_dataframe(f, -1)\n                pf = []\n                for k, r in enumerate(f):\n                    r = r.copy().reset_index()\n                    r.columns = list(map(lambda col: 'k{}-{}'.format(k, col), r.columns))\n                    pf.append(r)\n\n                f = reduce(pd.DataFrame.join, pf)\n                features[x, y] = f\n\n            features = pd.concat(features.reshape(-1).tolist(), ignore_index=True)\n            return features\n\n\nclass FSquare(FBase):\n    def __init__(self, *a, **k):\n        super().__init__(*a, **k)\n\n        for i, o in zip(self.in_images, self.out_images):\n            if i.shape[0] ** 2 != o.shape[0] or i.shape[1] ** 2 != o.shape[1]:\n                raise FException()\n\n    class SampleFeaturizer(FFactorBase.SampleFeaturizer):\n        def __init__(self, *a, **k):\n            FBase.SampleFeaturizer.__init__(self, *a, **k)\n            self.out_size = (self.in_image.shape[0] ** 2, self.in_image.shape[1] ** 2)\n\n        def featurize(self):\n            single_featurizer = FConstant.SampleFeaturizer(None, self.in_image)\n            single_featurizer.calc_features()\n\n            features = np.zeros(self.out_size, dtype=object)\n            for x, y in product(*map(range, self.in_image.shape)):\n                f = single_featurizer.features\n\n                i = x * self.in_image.shape[1] + y\n                p = single_featurizer.features.iloc[i:i + 1]\n                p.columns = list(map(lambda x: 'square-{}'.format(x), p.columns))\n                f = f.join(pd.concat([p] * len(f), ignore_index=True))\n\n                f = reshape_dataframe(f, self.in_image.shape)\n                features[x * self.in_image.shape[0]: (x + 1) * self.in_image.shape[0],\n                         y * self.in_image.shape[1]: (y + 1) * self.in_image.shape[1]] = f\n\n            features = pd.concat(features.reshape(-1).tolist(), ignore_index=True)\n            return features","f6ef7388":"def featurize_task_stat(task_stat):\n\n    def used_unique_features(i):\n        if i < 0:\n            return set()\n\n        ret = set()\n        ret = ret.union(used_unique_features(\n            task_stat.model.tree_.children_right[i]))\n        ret = ret.union(used_unique_features(\n            task_stat.model.tree_.children_left[i]))\n        ret.add(task_stat.model.tree_.feature[i])\n        return ret\n\n    rows = []\n    assert len(task_stat.correct()) == len(task_stat.predictions)\n\n    tr_mappings_count = 1\n    for level, tr in enumerate(task_stat.transformer.unsequence()):\n        if isinstance(tr, TAugColor):\n            tr_mappings_count = len(tr.mappings)\n\n    # add to features binary information about using selected transforms\n    types_to_featurize = [TAugFlips, TAugFlipsWRotation]\n    all_transformers = set(map(type, task_stat.transformer.unsequence()))\n    tfeatures = [t in all_transformers for t in types_to_featurize]\n    tfeatures_columns_names = list(t.__name__ for t in types_to_featurize)\n\n    for i, correct in enumerate(task_stat.correct()):\n        rows.append(dict(\n            correct=correct,  # label\n            used_unique_features_count=math.log(len(used_unique_features(0))),\n            nodes_count=math.log(task_stat.model.tree_.node_count),\n            deductible=task_stat.deducible,\n            tr_mappings_count=math.log(tr_mappings_count),\n            **{k: v for k, v in zip(tfeatures_columns_names, tfeatures)}\n        ))\n\n    df = pd.DataFrame(rows)\n    return df.reindex(sorted(df.columns), axis=1)\n\n\ndef iterate_stats(stats):\n    for config_stat in stats:\n        for task_stat in config_stat:\n            if not task_stat.error:\n                yield task_stat\n\n\ndef calc_confidences(args, pool, stats):\n    handles = []\n    for task_stat in iterate_stats(stats):\n        handles.append(pool.apply_async(\n            featurize_task_stat, args=(task_stat,)))\n    if not len(handles):\n        return\n    df = pd.concat([h.get() for h in handles], ignore_index=True)\n    df, labels = df[df.columns.difference(['correct'])], df['correct']\n\n    if args.train_confidence is not None:\n        print(df.head())\n        print(df.mean(axis=0))\n\n        model = sklearn.linear_model.LogisticRegression()\n        model.fit(df, labels)\n\n        with args.train_confidence.open('wb') as f:\n            pickle.dump(model, f)\n\n        # convenient to copy and paste into a notebook for kaggle submission\n        print('Pickled confidence model (hex):')\n        print(pickle.dumps(model).hex())\n    else:\n        with args.load_confidence.open('rb') as f:\n            model = pickle.load(f)\n\n    print(\"Linear model coefficients\", model.coef_)\n\n    confidence_iter = iter(model.predict_proba(df))\n    for task_stat in iterate_stats(stats):\n        for preds_per_test_img in task_stat.predictions:\n            confidence = next(confidence_iter)[1]\n            for i, prediction in enumerate(preds_per_test_img):\n                preds_per_test_img[i] = (prediction[0], confidence)\n    try:\n        next(confidence_iter)\n        assert 0\n    except StopIteration:\n        pass","4c1dc370":"def set_seed(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n\n\ndef parse_args(args=None):\n    def bool_type(x):\n        if x.lower() in ['1', 'true']:\n            return True\n        if x.lower() in ['0', 'false']:\n            return False\n        raise ValueError()\n\n    parser = ArgumentParser()\n    parser.add_argument('-d', '--dataset-root', type=Path,\n                        default='\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\n    parser.add_argument('-s', '--dataset-suffix', type=str, default='evaluation')\n    parser.add_argument('-g', '--gen-submission', type=bool_type, default=True)\n    parser.add_argument('-t', '--threads', type=int, default=2)\n    parser.add_argument('-p', '--pickle-results', type=Path,\n            help=\"Path to generated predictions and models. \"\n            \"If the file exists it is loaded, otherwise it is calculated and written.\")\n    parser.add_argument('--save-all-predictions', type=bool_type, default=False,\n            help=\"Allow writing more than 3 answers per test image to resulting submission file.\")\n    parser.add_argument('--train-confidence', type=Path, default=None,\n            help=\"If specified, train and save confidence model pickle to a given path.\")\n    parser.add_argument('--load-confidence', type=Path, default=None,\n            help=\"Confidence model pickle path.\")\n    parser.add_argument('--seed', type=int, default=0)\n\n    args = parser.parse_args(args)\n\n    if args.train_confidence is None and args.load_confidence is None:\n        raise ValueError(\"Either --train-confidence or --load-confidence required.\")\n\n    if args.seed < 0:\n        args.seed = np.random.randint(2 ** 16)\n        print('Seed:', args.seed)\n\n    set_seed(args.seed)\n    return args\n\n\ndef save_output_csv(stats, save_all_predictions):\n    final_rows = []\n    for task in stats:\n        for i, pr in enumerate(task.get_topk()):\n            out_str = []\n            for t in pr:\n                s = [''.join(map(str, p)) for p in t]\n                s = '|'.join(s)\n                s = f'|{s}|'\n                out_str.append(s)\n            if save_all_predictions:\n                if not out_str:\n                    out_str = ['|0|']\n            else:\n                out_str = (out_str + ['|0|'] * 3)[:3]\n            out_str = ' '.join(out_str)\n            final_rows.append(('{}_{}'.format(task.task_id, i), out_str))\n    df = pd.DataFrame(final_rows, columns=['output_id', 'output'])\n    df.to_csv('submission.csv', index=False)\n\n\nclass TaskStat:\n    def __init__(self, task):\n        self.task = task  # used in plot_pickled_results.py\n\n        self.task_id = ''\n        self.transformer_error = False\n        self.featurizer_error = False\n        self.error = False\n        self.deducible = False\n        self.predictions = [] # [test_image][prediction_number] -> (prediction, confidence)\n        self.ground_truth = []\n\n        self.model = None\n        self.feature_names = None\n        self.transformer = None\n        self.featurizer = None\n\n    def is_prediction_done(self):\n        return not self.error\n\n    def __or__(self, other):\n        ret = TaskStat(self.task)\n        ret.transformer_error = self.transformer_error and other.transformer_error\n        ret.featurizer_error = self.featurizer_error and other.featurizer_error\n        ret.error = self.error and other.error\n        ret.deducible = self.deducible or other.deducible\n        ret.predictions = [x + y for x, y in zip(self.predictions, other.predictions)]\n        ret.ground_truth = self.ground_truth\n        assert all(starmap(lambda x, y: (x == y).all(),\n                           zip(self.ground_truth, other.ground_truth)))\n        ret.task_id = self.task_id\n        assert self.task_id == other.task_id\n        return ret\n\n    def correct(self, k=None):\n        return np.array(list(starmap(\n            lambda xs, gt: any([np.array([x == gt]).all() for x in xs]) if gt is not None else False,\n            zip_longest(self.get_topk(k), self.ground_truth))))\n\n    def accuracy(self, k=None):\n        return self.correct(k).mean()\n\n    def get_topk(self, k=None):\n        ret = []\n        for preds in self.predictions:\n            added = set()\n            r = []\n            for pred in sorted(filter(lambda x: x[1] is not None, preds), key=lambda x: -x[1]):\n                tup = tuple(pred[0].reshape(-1))\n                if tup not in added:\n                    added.add(tup)\n                    r.append(pred[0])\n                    if k is not None and len(r) >= k:\n                        break\n            ret.append(r)\n        return ret\n\n\nclass ConfigStats:\n\n    def __init__(self, config):\n        self.task_stats = []\n        self.config = config  # used in plot_pickled_results.py\n\n    def append_task_stat(self, task_stat):\n        self.task_stats.append(task_stat)\n\n    def __or__(self, other):\n        ret = ConfigStats(self.config)\n        ret.task_stats = [a | b for a, b in zip(self.task_stats, other.task_stats)]\n        return ret\n\n    def __iter__(self):\n        return iter(self.task_stats)\n\n    def __len__(self):\n        return len(self.task_stats)\n\n    def __getitem__(self, i):\n        return self.task_stats[i]\n\n    def __str__(self):\n        def samples_correct(k=None):\n            return sum(map(lambda x: sum(x.correct(k)), self))\n\n        samples_num = sum(map(lambda x: len(x.predictions), self))\n\n        def tasks_correct_list(k=None):\n            return list(map(lambda x: (reduce(operator.mul, x.correct(k)) == 1)\n                                      if len(x.predictions) else False, self))\n\n        def tasks_correct(k=None): return sum(tasks_correct_list(k))\n        tasks_num = len(self)\n        transformer_errors = sum(map(lambda x: x.transformer_error, self))\n        featurizer_errors = sum(map(lambda x: x.featurizer_error, self))\n        errors = sum(map(lambda x: x.error, self))\n        deducible_counts = sum(map(lambda x: x.deducible, self))\n        return f'''\\\nAccuracy            {samples_correct() \/ max(samples_num, 1)} ({samples_correct()} \/ {samples_num})\nAccuracy-top1       {samples_correct(1) \/ max(samples_num, 1)} ({samples_correct(1)} \/ {samples_num})\nAccuracy-top3       {samples_correct(3) \/ max(samples_num, 1)} ({samples_correct(3)} \/ {samples_num})\nTask-accuracy       {tasks_correct() \/ tasks_num} ({tasks_correct()} \/ {tasks_num})\nTask-accuracy-top1  {tasks_correct(1) \/ tasks_num} ({tasks_correct(1)} \/ {tasks_num})\nTask-accuracy-top3  {tasks_correct(3) \/ tasks_num} ({tasks_correct(3)} \/ {tasks_num})\nTransformer-errors  {transformer_errors}\nFeaturizer-errors   {featurizer_errors}\nErrors              {errors}\nDeducible           {deducible_counts}\nDeducible&Correct   {sum(np.array(list(map(lambda x: x.deducible, self))) & np.array(tasks_correct_list()))}\n'''\n\n\ndef is_deducible(x, y):\n    data = x.join(pd.DataFrame(y, columns=['label']))\n    cols = list(data.columns)\n    cols.pop(cols.index('label'))\n    for i, j in data.groupby(cols):\n        if len(j.label.unique()) != 1:\n            return False\n    return True\n\n\ndef _process(config, task, in_images, out_images):\n    TransformerClass, FeaturizerClass, ModelClass = config\n    task_stat = TaskStat(task)\n\n    task_transformer = TransformerClass(in_images, out_images)\n    transformers = [task_transformer.get_transformer(in_image) for in_image in in_images]\n    transformed_in_images = flatten(\n        [transformer.transformed_images for transformer in transformers])\n    transformed_out_images = flatten(\n            [transformer.transform_output(out_image)\n                for transformer, out_image in zip(transformers, out_images)])\n\n    task_featurizer = FeaturizerClass(transformed_in_images, transformed_out_images)\n    featurizers = [task_featurizer.get_featurizer(in_image) for in_image in transformed_in_images]\n    for featurizer in featurizers:\n        featurizer.calc_features()\n\n    features = [featurizer.features for featurizer in featurizers]\n\n    def column_order(name):\n        if 'Neigh' in name:\n            if '0,0' in name or '0, 0' in name:\n                return 0, name\n            else:\n                return 1, name\n        elif 'Ray' in name:\n            return 2, name\n        else:\n            return 3, name\n\n    columns = list(features[0].columns)\n    columns = sorted(columns, key=column_order, reverse=False)\n    features = [pd.DataFrame(np.array(f[columns]), columns=columns)\n                for f in features]\n\n    labels = [featurizer.get_labels(out_image) for featurizer, out_image in zip(\n        featurizers, transformed_out_images)]\n\n    train_features = pd.concat(features[:len(labels)], ignore_index=True)\n\n    model = ModelClass(max_features=len(columns))\n    task_stat.deducible = is_deducible(train_features, np.concatenate(labels))\n    model.fit(train_features, np.concatenate(labels))\n    raw_predictions = [model.predict(features)\n                       for features in features[len(labels):]]\n    assembled_predictions = [featurizer.assemble(prediction)\n            for featurizer, prediction in zip(featurizers[len(labels):], raw_predictions)]\n\n    nested_predictions = []\n    k = 0\n    for transformer in transformers[len(out_images):]:\n        nested_predictions.append(\n            assembled_predictions[k: k + len(transformer.transformed_images)])\n        k += len(transformer.transformed_images)\n\n    final_predictions = [transformer.transform_output_inverse(prediction)\n            for transformer, prediction in zip(transformers[len(out_images):], nested_predictions)]\n\n    task_stat.model = model\n    task_stat.feature_names = columns\n    task_stat.transformer = task_transformer\n    task_stat.featurizer = task_featurizer\n\n    confidences = [0] * len(raw_predictions)\n    task_stat.predictions = list(\n        starmap(lambda x, c: [[x, c]], zip(final_predictions, confidences)))\n\n    return task_stat\n\n\ndef process(task_index, task, config, in_images, out_images, valid_out_images, seed):\n    set_seed(seed)\n\n    task_stat = TaskStat(task)\n    try:\n        task_stat = _process(config, task, in_images, out_images)\n    except FException:\n        task_stat.featurizer_error = True\n        task_stat.error = True\n        for _ in range(len(in_images) - len(out_images)):\n            task_stat.predictions.append([])\n    except TException:\n        task_stat.transformer_error = True\n        task_stat.error = True\n        for _ in range(len(in_images) - len(out_images)):\n            task_stat.predictions.append([])\n\n    task_stat.ground_truth = valid_out_images\n    return task_stat\n\n\ndef config_str(x):\n    if isinstance(x, partial):\n        return '|'.join(map(config_str, x.args))\n    if isinstance(x, tuple):\n        return '(' + ','.join(map(config_str, x)) + ')'\n    if isinstance(x, list):\n        return '-'.join(list(map(config_str, x)))\n    return x.__name__\n\n\ndef build_configs(args):\n    \"\"\" Build multiple configurations that use (or not) various transforms and featurizers.\n    \"\"\"\n    configs = []\n    for model in [\n        partial(sklearn.tree.DecisionTreeClassifier, criterion='entropy'),\n        partial(sklearn.tree.DecisionTreeClassifier, criterion='gini'),\n    ]:\n        for ts in product([\n                TIdentity,\n                # TTransposeInput,\n            ], [\n                TIdentity,\n                TSeparationRemover,\n            ], [\n                TIdentity,\n                TCCount,\n                TCCountBg,\n                TCPos\n            ], [\n                TIdentity,\n                TAugFlips,\n                # TAugFlipsWRotation,\n            ], [\n                TIdentity,\n                TAugColor,\n        ]):\n            transforms = partial(TSequential.make, ts)\n            for featurizer in [\n                    # partial(FGlobal, FConstant),\n                    # partial(FGlobal, FTile),\n                    # partial(FGlobal, FScale),\n                    # partial(FGlobal, FSquare),\n                    # partial(FGlobal, FFactorDown2),\n                    # partial(FGlobal, FFactorDown1),\n                    FConstant,\n                    # FTile,  # commented out because we need deterministic behavior like in older version for high lb score\n                    FScale,\n                    FSquare,\n                    FFactorDown2,\n                    FFactorDown1,\n            ]:\n                configs.append([transforms, featurizer, model])\n    return configs\n\n\ndef parse_task(path):\n    with open(path, 'r') as f:\n        task = json.load(f)\n\n    in_images = [sample['input'] for sample in task['train']\n                 ] + [sample['input'] for sample in task['test']]\n    out_images = [sample['output'] for sample in task['train']]\n    valid_out_images = [sample['output']\n                        for sample in task['test'] if 'output' in sample]\n\n    return (task, *(list(map(np.array, i)) for i in (in_images, out_images, valid_out_images)))\n\n\ndef _main(args, data):\n    configs = build_configs(args)\n\n    with Pool(args.threads) as pool:\n        if args.pickle_results is None or not args.pickle_results.exists():\n            exclude = set()\n            \n            tasks = []\n            for i, path in enumerate(data):\n                task, in_images, out_images, valid_out_images = parse_task(path)\n\n                if i not in exclude:\n                    handles = [pool.apply_async(\n                        process, (i, task, config, in_images, out_images,\n                                  valid_out_images, np.random.randint(2 ** 32))) for config in configs]\n                else:\n                    handles = []\n\n                tasks.append((task, in_images, out_images,\n                              valid_out_images, handles))\n\n            stats = [ConfigStats(c) for c in configs]\n            for i, path in enumerate(data):\n                if i in exclude:\n                    continue\n\n                task, in_images, out_images, valid_out_images, handles = tasks[i]\n\n                print('Processing task:', i)\n\n                for config, handle, stat in zip(configs, handles, stats):\n                    task_stats = handle.get()\n                    task_stats.task_id = path.stem\n                    stat.append_task_stat(task_stats)\n\n            if args.dataset_suffix != 'test':\n                for i, (config, stat) in enumerate(zip(configs, stats)):\n                    print()\n                    print('----------', i, '-----', config_str(config))\n                    print(stat)\n\n            if args.pickle_results is not None:\n                with args.pickle_results.open('wb') as f:\n                    pickle.dump(stats, f)\n\n        else:\n            with args.pickle_results.open('rb') as f:\n                stats = pickle.load(f)\n\n        calc_confidences(args, pool, stats)\n\n    all_stats = reduce(operator.or_, stats)\n    if args.dataset_suffix != 'test':\n        print()\n        print('SUM')\n        print(all_stats)\n\n    if args.gen_submission:\n        save_output_csv(all_stats, args.save_all_predictions)\n\n\ndef main(args):\n    dataset = sorted((args.dataset_root \/ args.dataset_suffix).glob('*.json'))\n    if not dataset:\n        raise ValueError(f'no data found in {args.dataset_root \/ args.dataset_suffix}')\n\n    _main(args, dataset)","2400f368":"main(parse_args(['-s', 'test', '--load-confidence', 'confidence_model.pickle', '--seed', '3', '--save-all-predictions', '1']))","f8e39e2b":"submission = pd.read_csv('\/kaggle\/working\/submission.csv')\nsubmission = submission.set_index('output_id')\nrnd = random.Random(2)\n\nfinal_output = []\nfor attempts in submission.output:\n    attempts = attempts.split()\n    attempts_to_use = []\n    for index in [0, 1, 3, 9]:\n        if len(attempts) <= index:\n            attempts_to_use.append(\"|0|\")\n        else:\n            attempts_to_use.append(attempts[index])\n    if rnd.random() >= 0.5 and attempts_to_use[3] != \"|0|\":\n        attempts_to_use[2] = attempts_to_use[3]\n    attempts_to_use = attempts_to_use[:3]\n    final_output.append(' '.join(attempts_to_use))\n\nsubmission.output = final_output\nsubmission.to_csv('submission.csv')","e4867bdf":"# 8th Place Solution -- Decision tree part\nThis notebook is based on [the source code](https:\/\/github.com\/maciej-sypetkowski\/kaggle-arc-solution).\n\nRefer to [this kaggle post](https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/154436) for a solution description.","8a643568":"# Utils","845e3eac":"# Getting 2 more (non-elegant way)\nNormally above solution would give 0.94 LB. We did the following:\n1. We tested, that in 3-rd attempt we have no hits (+ 1 submission).\n2. We found additional 2 hits -- one in 4-th and one in 10-th attempt (+ 3 submissions -- 4-6, 7-9, 10-12, and + 1-2 submissions to check whether 10,11 or 12).\n3. We blend these 4-th and 10-th attempts randomly (+ expected 2 submissions) and use as a 3-rd attempt.","2aab5a8c":"# Featurizers","f03bf71c":"# Imports","bad7be30":"# Install modified sklearn","ff90da0c":"# Confidence model","ce352598":"# Transformers","4a34820a":"# Save to file confidence model trained on evaluation set","c0bbb322":"# Main"}}