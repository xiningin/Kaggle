{"cell_type":{"e7eaa743":"code","7ce42939":"code","4dd8983a":"code","5e560acf":"code","77798919":"code","a2cdba9d":"code","f58718bd":"code","d50de26c":"code","10dd2ecc":"code","b28d08f1":"code","54f31b2d":"markdown","5d0f1bd1":"markdown","57b4e669":"markdown","a691ff21":"markdown","bab2e055":"markdown","6828e578":"markdown","b851d8f2":"markdown","66f9aa9b":"markdown","1313312f":"markdown","6b7380c9":"markdown","bdf657e2":"markdown","6d9beb94":"markdown","32c27db4":"markdown"},"source":{"e7eaa743":"import pandas as pd\n\n#Transform CSV file into Dataframe name office_df\noffice_df = pd.read_csv('\/kaggle\/input\/the-office-dataset\/the_office_series.csv', index_col = 0)\n\n#Inspecting data's number of rows, columns, types, and if it contain any missing values\nprint(office_df.info())\n\n#Displaying the data in order to get a bigger and clearer picture\ndisplay(office_df)","7ce42939":"# Create ep_no variable as a list for our next line of code to append the values in it\nep_no = []\n\n# Create a loop to add episode number to ep_no variable\nfor lab, row in office_df.iterrows() :\n    ep_no.append(lab+1)\n\n# Adding the ep_no list to the dataset\noffice_df['episode'] = ep_no\n\ndisplay(office_df)","4dd8983a":"# Create Scaled Ratings\nmax_rating = max(office_df['Ratings'])\nmin_rating = min(office_df['Ratings'])\n\n\nprint('The maximum rating from The Office series is ' + str(max_rating)) \nprint('The minimum rating from The Office series is ' + str(min_rating))","5e560acf":"# Create a series of normalized ratings between 0 and 1\nnormalized_ratings = (office_df['Ratings'] - min_rating) \/ (max_rating - min_rating)\n\n# Add the newly created serie to the column named norm_ratings\noffice_df['norm_ratings'] = normalized_ratings\n\ndisplay(office_df)","77798919":"# Create color variable as a list for our next line of code to append the values in it\nratings_color = []\n\n# Create a loop where each episode's rating will be assigned a color\nfor lab, row in office_df.iterrows() :\n    if row['norm_ratings'] < 0.25:\n        ratings_color.append('red')\n    elif row['norm_ratings'] < 0.5:\n        ratings_color.append('orange')\n    elif row['norm_ratings'] < 0.75:\n        ratings_color.append('yellow')\n    else :\n        ratings_color.append('green')\n\n# Assign ratings_color list to the office_df dataframe\noffice_df['colors'] = ratings_color\n\ndisplay(office_df)","a2cdba9d":"# Import pyplot, a sub-module in matplotlib.\nimport matplotlib.pyplot as plt\n\n# Adding a style for the graph\nplt.style.use('bmh')\n\n# Increase the size of our graph\nplt.rcParams['figure.figsize'] = [11, 7]\n\n# Plot newly created episode number on x-axis, viewership in y-axis, assign color based on ratings.\nplt.scatter(office_df['episode'], \n            office_df['Viewership'],\n            color = office_df['colors'])\n\n# Provide more comprehensive context by adding title and labels for our audiences.\nplt.title('Popularity and Quality of the Office Series')\nplt.xlabel('Episode Number')\nplt.ylabel('Viewership (Millions)')\n\nplt.show()","f58718bd":"# Create a variable with boolean data where True is for having guest stars and False without guest stars using .notnull() method\nhave_guest_stars = office_df['GuestStars'].notnull()\n\n# Add the data to our dataframe\noffice_df['have_gs'] = have_guest_stars\n\ndisplay(office_df)","d50de26c":"# Create new dataframe where one contain The Office episodes with guest stars and one without\noffice_gs = office_df[office_df['have_gs'] == True]\noffice_no_gs = office_df[office_df['have_gs'] == False]\n\ndisplay(office_gs)\ndisplay(office_no_gs)","10dd2ecc":"# First plot episodes without guest stars\nplt.scatter(office_no_gs['episode'], \n            office_no_gs['Viewership'],\n            color = office_no_gs['colors'])\n\n# Secondly, plot episodes featuring guest stars\nplt.scatter(office_gs['episode'], \n            office_gs['Viewership'],\n            color = office_gs['colors'],\n            marker = '*', # This line is to change the shape of the plot to a star\n            s = 250) # This line is to change the size of the plot\n\nplt.title('Popularity and Quality of the Office Series')\nplt.xlabel('Episode Number')\nplt.ylabel('Viewership (Millions)')\n\nplt.show()","b28d08f1":"# Let's extract the episode with highest viewerships episode as hv_ep\nhv_ep = office_gs[office_gs['Viewership'] == max(office_gs['Viewership'])]\n\nprint('Episode number ' + str(hv_ep['episode'].item()) + ' has the highest viewership with ' + str(hv_ep['Viewership'].item()) + ' millions people watching and it feature guest stars: ' + hv_ep['GuestStars'].item())","54f31b2d":"## Continue Investigation\n\nAfter plotting the second graph, we now can answer the first question that **the highest viewerships episode did feature guest star(s).**\n\nAnd now we should find out more about that episode in order to answer our second and third questions:\nWho the guest stars are and which episode is it.","5d0f1bd1":"## Investigating Further\n\nWe now see that there is an episode of The Office with super high viewerships and we now need to investigate further.\n\nSome questions to be answer are:\n\n**1. Did that episode feature guest star(s)?**\n\n**2. If so, then who?**\n\n**3. What number of episode was it?**\n\n\n\n## Formulating Plan\nOur plan to find out more about the guest stars is simple. We can just change the shape and size of our plot to present the episodes with guest stars.\n\nFirst, we need to separate the dataframe into 2. One with guest stars and another without. By doing so, we need to **create a column containing boolean data: True for having guest stars and False for not having guest stars.**\n\nThen later, we can tweak the graph by changing the shape and size of episodes featuring guest stars.","57b4e669":"# Inspecting Data\nFirst of all, we will need to inspect the data using pandas module. Pandas' dataframe allow us to work with tabular data, in this case, a CSV file.","a691ff21":"# Exploratory Data Analysis (EDA)\nEDA or Exploratory Data Analysis is an important part in data science as it can give us the insight of the data visually by plotting the graph.\n\n## Create Episode Numbers\nBefore performing EDA, we need to first create an episode number so that it can be easily referenced without confusion.","bab2e055":"## Normalizing Ratings\nWe now have the eipsode number and next thing we wanted to do is normalizing the ratings of The Office series so that we know which episode has the *worst rating (0 point)* and and which episode has the *highest rating (1 point)*. Morover, it can be useful when we visualize the graph as it gives better view of ratings in The Office series.\n\nTo do so, we need to first find the **maximum** and **minimum rating** of the series","6828e578":"# Introduction\n\n![](https:\/\/ntvb.tmsimg.com\/assets\/p7893514_b_h8_ab.jpg?w=1280&h=720)\n\n**The Office!** What started as a British mockumentary series about office culture in 2001 has since spawned ten other variants across the world, including an Israeli version (2010-13), a Hindi version (2019-), and even a French Canadian variant (2006-2007). Of all these iterations (including the original), the American series has been the longest-running, spanning 201 episodes over nine seasons.\n\nIn this notebook, we will take a look at a dataset of The Office episodes, and try to understand how the popularity and quality of the series varied over time.","b851d8f2":"## Adding Color for each Ratings\nIn order to make the graph visually appealing and easy-to-understand, we can assign colors to the ratings.\n\n* Episode with ratings less than 0.25 will be presented in red color\n* Episode with ratings from 0.25 to 0.49 will be presented in orange color\n* Episode with ratings from 0.50 - 0.74 will be presented in yellow color\n* Episode with ratings from 0.75 - 1.00 will be presented in green color","66f9aa9b":"## Plotting Second Graph with Guest Stars\nNow we are ready to plot out second graph where episodes featuring guest stars will be display with different shape and bigger size.","1313312f":"The maximum and minimum ratings are **9.8** and **6.6**, in respective order.\n\nNext, we wanted to create a new column that contain the normalize ratings.\n\nThe formula for normalizing is (ratings - minimum rating) \/ (maximum rating - minimum rating)","6b7380c9":"# Conclusion\n**In this notebook, we have demonstrated some basic python coding with 2 modules: pandas and mayplotlib.**\n\n**We started from loading and inspecting data in CSV file and noticed that the dataset contains 188 episodes of the series. Dataset itself is clean and sorted in release date order.**\n\n**We've put in some effort of transforming data by creating new columns that contain essential datas in order to perform Exploratory Data Analysis (EDA).**\n\n**After plotting our first graph for EDA, we learn that first half of the entire series were stable in term of ratings and viewerships. However, the popularity and quality of the show began to drop. It became clear near the end of the show that its rating and viewership were uncomparable to when it started.**\n\n**We also found that there is one particular episode where the show draws almost 23 millions viewerships when compared to other episodes with just between 5 and 10 millions viewerships.**\n\n**With further investigation, we found that it is episode number 78 that has the highest viewership and it features 3 guest stars including Cloris Leachman, Jack Black, and Jessica Alba.**\n\n\n## Gratitude\n**I wanted to thank you for your time spent on reading this notebook.**\n**This is my first project after I started learning python for 3+ weeks (January 8th, 2022). This project is also an unguided project provided by [DataCamp](https:\/\/projects.datacamp.com\/projects\/1170) for learner who finished their [Intermediate Python](https:\/\/app.datacamp.com\/learn\/courses\/intermediate-python) course.**\n\n**Here is a picture from the scene of The Office episode with highest viewership. Thank you and Goodbye!**\n\n![](https:\/\/coolpapaesreviews.files.wordpress.com\/2011\/01\/stress-relief-carell-office.jpg)","bdf657e2":"## Create First Graph\nNow we can start plotting the data and one of the most effective and popular module for visualizing data in Python is matplotlib module.\n\nWe will plot the data with episode on x-axis (horizon), viewership on y-axis (vertical), and use the color to represent the ratings.\n\nLet's will import the module and create our first graph!\n","6d9beb94":"## Exploring and Interpreting First Graph\n\nWe've created our first graph and let's interpret what's shown in it.\n\n1. We see that the viewerships were very fluctuate and contain a big gap between highest and lowest viewerships during the first couple episodes of The Office series. It can be interpret that the series is just being introduced to the audiences and that first episode usually draw many people to watch, resulting more than 10 millions viewerships. A couple episodes later, it dropped down drastically before picking up again and become stable in between 7.5 and 10 millions viewerships. \n2. During the first and second quartile, The viewerships were stable and the majority of the ratings were yellow and some green mix with orange.\n3. The third quartile and forth quartile, however, orange ratings become more common and last quartile were filled with many low  ratings in red.\n4. We see that *green ratings are distributed evenly among the graph* and usually attract a little more viewerships when compared to couple episodes before or after.\n5. There's one single episode that has a very distinctive high viewership with **more than 22 millions people watching**.","32c27db4":"## Interpreting Data\nAfter inspecting the data, we find that there are total of 11 columns and 188 rows. We find that each row represent an episode of the series in ascending order based on the **Date** column.\n\nIn addition, all columns do not have empty value except for **GuestStars** column, which can be interpreted as having no guest stars on that episode.\n\nThe data looks clean and ready to be explored."}}