{"cell_type":{"2159c24b":"code","7825b96a":"code","cc91e2d6":"code","6bed7680":"code","4484ede4":"code","cf7b8ae1":"code","bd744133":"code","56afe10a":"code","beb63c6b":"code","0afd6765":"code","a54e6708":"code","f81a21da":"code","be9a03d9":"code","735f2489":"code","9792ce37":"code","f45eb107":"code","5d33c40b":"code","48323a0d":"code","7c255f23":"code","823bff55":"code","0870375a":"code","7c7dc779":"code","42fc9013":"code","d206b83f":"code","43195410":"code","1e50d687":"code","c5d5c483":"code","18799bdb":"code","a054f43d":"code","5381f3c9":"code","c215f08e":"code","85df75f9":"code","f431eb39":"code","8aec30f0":"code","4e8430d2":"code","0be2cf72":"code","34dae732":"code","51c58434":"code","4335a868":"code","d86ccbed":"code","8dd126b5":"code","a1d2d2ef":"code","2030d854":"code","0311a242":"code","5aa53dbf":"code","bf1c95d3":"code","c40eddb7":"code","f3410328":"code","a7d47004":"code","b81ef5b0":"code","e6263737":"code","2c9449a6":"code","f391b4b4":"code","472a1054":"code","285a883e":"code","47619c6e":"code","e64fb902":"markdown","95583dca":"markdown"},"source":{"2159c24b":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7825b96a":"df = pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/train.csv')\ndf.sample(15)\n","cc91e2d6":"df.isnull().sum()","6bed7680":"df.drop([\"ADDRESS\"], axis = 1, inplace=True)","4484ede4":"df.describe()","cf7b8ae1":"\"\"\"from pandas_profiling import ProfileReport\nprofile = ProfileReport(df,title='Pandas Profiling Report',explorative=True)\nprofile.to_widgets()\"\"\"","bd744133":"features=['POSTED_BY','UNDER_CONSTRUCTION','RERA','BHK_OR_RK','READY_TO_MOVE','RESALE']","56afe10a":"sns.set_style('white')\n\nfor feature in features:\n    plt.figure(figsize=(10,7))\n    sns.barplot(x=df[feature].value_counts().index, y=df[feature].value_counts().values)\n\n    plt.ylabel('Number of Samples')\n    plt.xlabel(f'feature', style = 'normal', size = 24)\n\n    plt.xticks(rotation = 45, size = 12)\n    plt.yticks(rotation = 45, size = 12)\n\n    plt.title(f'Distribution of {feature}',color = 'black',fontsize=15)\n    plt.show()","beb63c6b":"sns.set(style='whitegrid')\n\n\n\nfor feature in features:\n    plt.figure(figsize=(10, 5))\n    plt.pie(df[feature].value_counts(),labels=df[feature].value_counts().index,\n            autopct='%1.2f%%',colors=['#E37383','#FFC0CB'], )\n    plt.title(f'Distribution of {feature}', color = 'black',fontsize = 15)\n    plt.axis('equal')\n    plt.show()","0afd6765":"sns.set_style('darkgrid')\nfor feature in features:\n    plt.figure(figsize=(10, 10))\n    sns.violinplot(x = feature, y = 'TARGET(PRICE_IN_LACS)', data = df)","a54e6708":"sns.set_style('darkgrid')\nfor feature in features:\n    plt.figure(figsize=(10, 5))\n    sns.boxplot(x = feature, y = 'TARGET(PRICE_IN_LACS)', data = df)","f81a21da":"plt.figure(figsize=(20,15))\nsns.set_style('white')\nsns.distplot(df['TARGET(PRICE_IN_LACS)'], color=\"#ff9999\").set_title('TARGET(PRICE_IN_LACS')","be9a03d9":"sns.set_style('darkgrid')\nplt.figure(figsize=(10, 5))\n\nsns.scatterplot(x=df['TARGET(PRICE_IN_LACS)'], y=df['SQUARE_FT'],\n                    hue=df['UNDER_CONSTRUCTION'], \n                    palette='tab20', \n                    linewidth=0,\n                    data=df)","735f2489":"sns.set_style('darkgrid')\nplt.figure(figsize=(10, 5))\n\nsns.scatterplot(x=df['TARGET(PRICE_IN_LACS)'], y=df['BHK_NO.'],\n                    hue=df['UNDER_CONSTRUCTION'], \n                    palette='tab20', \n                    linewidth=0,\n                    data=df)","9792ce37":"sns.set_style('darkgrid')\ndf.plot(kind='scatter',x='LONGITUDE',y='LATITUDE',alpha=0.4,c=\"TARGET(PRICE_IN_LACS)\",cmap=plt.get_cmap(\"jet\"),colorbar=True)","f45eb107":"plt.figure(figsize=(12,10)) \nsns.heatmap(df.corr(), annot=True, linewidths = 2)\nplt.show()","5d33c40b":"df=pd.get_dummies(df,drop_first=True)","48323a0d":"df","7c255f23":"quantile1, quantile3= np.percentile(df['TARGET(PRICE_IN_LACS)'],[25,75])","823bff55":"print(quantile1,quantile3)","0870375a":"\n## Find the IQR\n\niqr=quantile3-quantile1\nprint(iqr)","7c7dc779":"## Find the lower bound value and the higher bound value\n\nlower_bound_val = quantile1 -(1.5 * iqr) \nupper_bound_val = quantile3 +(1.5 * iqr)","42fc9013":"print(lower_bound_val,upper_bound_val)","d206b83f":"  df_out = df.loc[~((df['TARGET(PRICE_IN_LACS)'] > upper_bound_val ) | (df['TARGET(PRICE_IN_LACS)'] < lower_bound_val ))]","43195410":"df_out","1e50d687":"X=df_out.drop(columns=['TARGET(PRICE_IN_LACS)'])\ny=df_out['TARGET(PRICE_IN_LACS)']","c5d5c483":"from sklearn.ensemble import ExtraTreesRegressor\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesRegressor()\nmodel.fit(X,y)","18799bdb":"print(model.feature_importances_)","a054f43d":"#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(9).plot(kind='barh')\nplt.show()","5381f3c9":"X=X.drop(columns=['POSTED_BY_Owner','RERA','UNDER_CONSTRUCTION','READY_TO_MOVE','RESALE','BHK_OR_RK_RK'])","c215f08e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) ","85df75f9":"from sklearn.ensemble import RandomForestRegressor\nregressor=RandomForestRegressor()\n\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\nprint(n_estimators)","f431eb39":"from sklearn.model_selection import RandomizedSearchCV\n #Randomized Search CV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)\n\n","8aec30f0":"rf = RandomForestRegressor() \nrf_random = RandomizedSearchCV(estimator = regressor, param_distributions =random_grid,scoring='neg_mean_squared_error', n_iter= 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","4e8430d2":"rf_random.fit(X_train,y_train.values.ravel())","0be2cf72":"rf_random.best_params_","34dae732":"rf_random.best_score_","51c58434":"predictions=rf_random.predict(X_test)\n\n","4335a868":"sns.distplot(y_test-predictions)","d86ccbed":"plt.scatter(y_test,predictions)","8dd126b5":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","a1d2d2ef":"print('MAE:', metrics.mean_absolute_error(y_train, rf_random.predict(X_train)))\nprint('MSE:', metrics.mean_squared_error(y_train, rf_random.predict(X_train)))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_train, rf_random.predict(X_train))))","2030d854":"mean = np.mean(y_train)\n\nprint(f\"RMSLE for predicting only 0: {round(np.sqrt(metrics.mean_squared_error(y_train, np.zeros(len(y_train)))), 5)}\")\nprint(f\"RMSLE for predicting only 1: {round(np.sqrt(metrics.mean_squared_error(y_train, np.ones(len(y_train)))), 5)}\")\nprint(f\"RMSLE for predicting the mean ({round(mean, 2)}): {round(np.sqrt(metrics.mean_squared_error(y_train, np.full(len(y_train), mean))), 5)}\")","0311a242":"const_rmses = dict()\nfor i in range(70):\n    const = i*2\n    rmse = round(np.sqrt(metrics.mean_squared_error(y_train, np.full(len(y_train), const))), 5)\n#     print(f\"RMSLE for predicting only {const}: {rmsle}\")\n    const_rmses[const] = rmse\n\nxs = list(const_rmses.keys())\nys = list(const_rmses.values())\n\npd.DataFrame(ys, index=xs).plot(figsize=(15, 10), legend=None)\nplt.scatter(min(const_rmses, key=const_rmses.get), sorted(ys)[0], color='red')\nplt.title(\"RMSE scores for constant predictions\", fontsize=18, weight='bold')\nplt.xticks(fontsize=14)\nplt.xlabel(\"Constant\", fontsize=14)\nplt.ylabel(\"RMSE\", rotation=0, fontsize=14)","5aa53dbf":"const_rmses = dict()\nfor i in range(30,37):\n    const = i*2\n    rmse = round(np.sqrt(metrics.mean_squared_error(y_train, np.full(len(y_train), const))), 5)\n#     print(f\"RMSLE for predicting only {const}: {rmsle}\")\n    const_rmses[const] = rmse\n\nxs = list(const_rmses.keys())\nys = list(const_rmses.values())\n\npd.DataFrame(ys, index=xs).plot(figsize=(15, 10), legend=None)\nplt.scatter(min(const_rmses, key=const_rmses.get), sorted(ys)[0], color='red')\nplt.title(\"RMSE scores for constant predictions\", fontsize=18, weight='bold')\nplt.xticks(fontsize=14)\nplt.xlabel(\"Constant\", fontsize=14)\nplt.ylabel(\"RMSE\", rotation=0, fontsize=14);","bf1c95d3":"best_const=66","c40eddb7":"print(f\"RMSE for predicting the best possible constant on our data: {round(np.sqrt(metrics.mean_squared_error(y_train, np.full(len(y_train), best_const))), 5)}\\n\")","f3410328":"test_df=df = pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/test.csv')\ntest_df.drop(columns=['ADDRESS'],inplace=True)","a7d47004":"test_df=pd.get_dummies(test_df,drop_first=True)","b81ef5b0":"test_df","e6263737":"test_df.drop(columns=['POSTED_BY_Owner','RERA','UNDER_CONSTRUCTION','READY_TO_MOVE','RESALE','BHK_OR_RK_RK'], axis = 1, inplace=True)","2c9449a6":"predictions_new=pd.DataFrame(rf_random.predict(test_df))","f391b4b4":"predictions_new.to_csv('submission_rf.csv', index =False)","472a1054":"import pickle","285a883e":"# open a file, where you ant to store the data\nfile = open('rf_regression_model.pkl', 'wb')\n\npickle.dump(rf_random, file)","47619c6e":"\"\"\"with open('rf_regression_model.pkl', 'rb') as file:\n    rf_random= pickle.load(file)\"\"\"","e64fb902":"its found that best rmse constant value is 66","95583dca":"This is the optimal RMSE score that we can get with only a constant prediction and using all data available.\nWe therefore call it the best 'Naive baseline'\nA model should at least perform better than this RMSE score."}}