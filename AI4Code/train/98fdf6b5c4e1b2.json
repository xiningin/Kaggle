{"cell_type":{"13c00c62":"code","7565ed37":"code","cc052dee":"code","e4dbe9d2":"code","f533dc4f":"code","de42494d":"code","6d065dec":"code","779c8123":"code","fb9e41c5":"code","2fc0504d":"code","bd56e0cd":"code","5764839a":"code","511dc916":"markdown"},"source":{"13c00c62":"import pandas as pd \ndf = pd.read_csv(\"..\/input\/siliconmaze-classification\/train.csv\")\ndf.head()","7565ed37":"df = df.dropna()\ninputs = df.drop(['ineligible_for_funds','Id'],axis='columns')\ntarget = df['ineligible_for_funds']\ninputs.head(2)","cc052dee":"from sklearn.preprocessing import LabelEncoder\nle_has_child = LabelEncoder()\nle_res_status = LabelEncoder()\nle_owns_bike = LabelEncoder()\nle_profession = LabelEncoder()\nle_home_city = LabelEncoder()\nle_home_state = LabelEncoder()","e4dbe9d2":"inputs['has_child'] = le_has_child.fit_transform(inputs['has_child'])\ninputs['residential_status'] = le_res_status.fit_transform(inputs['residential_status'])\ninputs['owns_bike'] = le_owns_bike.fit_transform(inputs['owns_bike'])\ninputs['profession'] = le_profession.fit_transform(inputs['profession'])\ninputs['home_city'] = le_home_city.fit_transform(inputs['home_city'])\ninputs['home_state'] = le_home_state.fit_transform(inputs['home_state'])\ninputs = inputs.drop(['home_city','home_state'],axis='columns')\ninputs","f533dc4f":"from sklearn.model_selection import train_test_split\nX_train, X_test , y_train, y_test  = train_test_split(inputs,target,test_size=0.1)","de42494d":"from sklearn import tree\nmodel = tree.DecisionTreeClassifier(criterion='entropy')","6d065dec":"model.fit(X_train,y_train)","779c8123":"model.score(X_test,y_test)","fb9e41c5":"test_data = pd.read_csv(\"..\/input\/siliconmaze-classification\/test.csv\")\nt_df = test_data.drop(['Id'],axis='columns')\n# t_target = test_data['ineligible_for_funds']","2fc0504d":"le_has_child_t = LabelEncoder()\nle_res_status_t = LabelEncoder()\nle_owns_bike_t = LabelEncoder()\nle_profession_t = LabelEncoder()\nle_home_city_t = LabelEncoder()\nle_home_state_t = LabelEncoder()","bd56e0cd":"t_df['has_child'] = le_has_child.fit_transform(t_df['has_child'])\nt_df['residential_status'] = le_res_status.fit_transform(t_df['residential_status'])\nt_df['owns_bike'] = le_owns_bike.fit_transform(t_df['owns_bike'])\nt_df['profession'] = le_profession.fit_transform(t_df['profession'])\nt_df['home_city'] = le_home_city.fit_transform(t_df['home_city'])\nt_df['home_state'] = le_home_state.fit_transform(t_df['home_state'])\nt_df = t_df.drop(['home_city','home_state'],axis='columns')","5764839a":"y_pred = pd.DataFrame(model.predict(t_df))\nsubmission = pd.concat([test_data.Id, y_pred], axis=1)\nsubmission.to_csv('newSUB2.csv', index=False, header=['Id', 'ineligible_for_funds'])","511dc916":"### Kaggle test submission csv"}}