{"cell_type":{"19db7c63":"code","418bfe7c":"code","ac9ec09e":"code","e7fa4305":"code","634eb9cd":"code","2c0058ae":"code","7dc6480c":"code","3786bf26":"code","568c2db1":"code","1d5ab298":"code","87c56393":"code","d288b381":"code","b83ad701":"code","98d87435":"code","abe88a0c":"code","60969b94":"code","0e97f0f4":"code","24fd7ef2":"code","7615409f":"code","fb623ada":"code","472013c4":"code","30d4b51a":"markdown","c21828ac":"markdown","38c6a174":"markdown","3502aef7":"markdown","18f040a6":"markdown","f6f759f6":"markdown","5023e2e3":"markdown","f6b9dfad":"markdown","4ed51592":"markdown","18a2a6ea":"markdown","95d785b5":"markdown","66c35a84":"markdown","4f39f864":"markdown","cd4124e1":"markdown","3b42bdbd":"markdown","8f212c21":"markdown","4c2a3108":"markdown","925c2501":"markdown"},"source":{"19db7c63":"import os\nimport cv2\nimport math\nimport json\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","418bfe7c":"train_df = pd.read_csv('..\/input\/train\/train.csv')\ntest_df = pd.read_csv('..\/input\/test\/test.csv')\nprint(train_df.shape)\nprint(test_df.shape)\ntrain_df.head()","ac9ec09e":"name_target_dict = train_df.set_index('PetID')['AdoptionSpeed'].to_dict()\ntrain_image_names = os.listdir('..\/input\/train_images')\ntest_image_names = os.listdir('..\/input\/test_images')","e7fa4305":"def display_samples(columns=4, rows=3):\n    fig=plt.figure(figsize=(5*columns, 3*rows))\n\n    for i in range(columns*rows):\n        image_path = train_image_names[i]\n        image_id = name_target_dict[image_path.split('-')[0]]\n        img = cv2.imread(f'..\/input\/train_images\/{image_path}')\n        fig.add_subplot(rows, columns, i+1)\n        plt.title(image_id)\n        plt.imshow(img)\n\ndisplay_samples()","634eb9cd":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","2c0058ae":"generator_dict = {'filename': [], 'class': []}\n\nfor name in train_image_names:\n    short_name = name.split('-')[0]\n    label = name_target_dict[short_name]\n    \n    generator_dict['filename'].append(name)\n    generator_dict['class'].append(label)\n\ngenerator_df = pd.DataFrame(generator_dict)\ngenerator_df.head(8)","7dc6480c":"datagen = ImageDataGenerator(\n    featurewise_center=False,  # set input mean to 0 over the dataset\n    samplewise_center=False,  # set each sample mean to 0\n    featurewise_std_normalization=False,  # divide inputs by std of the dataset\n    samplewise_std_normalization=False,  # divide each input by its std\n    zca_whitening=False,  # apply ZCA whitening\n    zca_epsilon=1e-06,  # epsilon for ZCA whitening\n    rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)\n    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n    shear_range=0.1,  # set range for random shear\n    zoom_range=0.1,  # set range for random zoom\n    channel_shift_range=0.,  # set range for random channel shifts\n    # set mode for filling points outside the input boundaries\n    fill_mode='nearest',\n    cval=0.,  # value used for fill_mode = \"constant\"\n    horizontal_flip=True,  # randomly flip images\n    vertical_flip=False,  # randomly flip images\n    # set rescaling factor (applied before any other transformation)\n    rescale=1\/255.,\n    # set function that will be applied on each input\n    preprocessing_function=None,\n    # image data format, either \"channels_first\" or \"channels_last\"\n    data_format=None,\n    # fraction of images reserved for validation (strictly between 0 and 1)\n    validation_split=0.1\n)\n\ndef create_generator(subset):\n    return datagen.flow_from_dataframe(\n        generator_df, \n        '..\/input\/train_images', \n        x_col='filename',\n        y_col='class', \n        has_ext=True,  # If image extension is given in x_col\n        target_size=(100, 100), \n        color_mode='rgb',\n        class_mode='categorical', \n        batch_size=128, \n        shuffle=True, \n        seed=2018,\n        subset=subset\n    )\n\ntrain_generator = create_generator('training')\nval_generator = create_generator('validation')","3786bf26":"import keras\nfrom keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.applications import DenseNet121","568c2db1":"model = DenseNet121(\n    weights=None, \n    include_top=True, \n    classes=5,\n    input_shape=(100, 100, 3)\n)\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nmodel.summary()","1d5ab298":"checkpoint = ModelCheckpoint(\n    'model.h5', \n    monitor='val_acc', \n    verbose=0, \n    save_best_only=True, \n    save_weights_only=False,\n    mode='auto'\n)","87c56393":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch=75000 \/ 128, \n    epochs=10,\n    callbacks=[checkpoint],\n    validation_data=val_generator,\n    use_multiprocessing=True,\n    workers=2, \n    verbose=1\n)","d288b381":"model.load_weights('model.h5')\n\nval_scores = model.evaluate_generator(\n    generator=val_generator,\n    steps=len(val_generator),\n    use_multiprocessing=True,\n    verbose=1,\n    workers=2\n)\n\nprint('\\nValidation loss:', val_scores[0])\nprint('Validation accuracy:', val_scores[1])","b83ad701":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","98d87435":"sample_submission_df = pd.read_csv('..\/input\/test\/sample_submission.csv')\nprint(sample_submission_df.shape)\nsample_submission_df.head()","abe88a0c":"submission_dict = {'PetID': [], 'filename': []}\n\nfor name in test_image_names:\n    pet_id = name.split('-')[0]\n    submission_dict['PetID'].append(pet_id)\n    submission_dict['filename'].append(name)\n    \nsubmission_df = pd.DataFrame(submission_dict)\nsubmission_df.head()","60969b94":"test_generator = ImageDataGenerator(rescale=1\/255.).flow_from_dataframe(\n    submission_df,\n    '..\/input\/test_images',\n    has_ext=True,\n    target_size=(100, 100),\n    color_mode='rgb',\n    batch_size=256,\n    shuffle=False,\n    class_mode=None\n)","0e97f0f4":"test_predictions = model.predict_generator(\n    test_generator,\n    workers=2, \n    use_multiprocessing=True, \n    verbose=1\n)","24fd7ef2":"submission_df = submission_df.join(pd.DataFrame(test_predictions))\nsubmission_df.drop(columns=['filename'], inplace=True)\nprint(submission_df.shape)\nsubmission_df.head()","7615409f":"submission_df = submission_df.groupby('PetID', as_index=False).mean()\nprint(submission_df.shape)\nsubmission_df.head()","fb623ada":"submission_df['AdoptionSpeed'] = submission_df.iloc[:,1:6].values.argmax(axis=1)\nsubmission_df.drop(columns=[0,1,2,3,4], inplace=True)\nprint(submission_df.shape)\nsubmission_df.head()","472013c4":"submission_df.to_csv('submission.csv',index=False)","30d4b51a":"Take the average of the classes probabilities for each pet (since we have multiple pictures of each pet).","c21828ac":"We first create a dataframe to be used by the generator.","38c6a174":"We first create a simple model taken from the keras examples. To see the model summary, click on \"Output\".","3502aef7":"We create a checkpoint callback to keep track of the best model.","18f040a6":"## 2. Dataframe and Data Generator","f6f759f6":"Now we define a data generator object, with data augmentation","5023e2e3":"> 0 - Pet was adopted on the same day as it was listed. \n> \n> 1 - Pet was adopted between 1 and 7 days (1st week) after being listed. \n> \n> 2 - Pet was adopted between 8 and 30 days (1st month) after being listed. \n> \n> 3 - Pet was adopted between 31 and 90 days (2nd & 3rd month) after being listed. \n> \n> 4 - No adoption after 100 days of being listed. (There are no pets in this dataset that waited between 90 and 100 days).","f6b9dfad":"# Keras CNN Starter - PetFinder\nBreakdown of this notebook:\n1. **Image Data Exploration**: Take a brief look at the images\n2. **Dataframe and Data Generator**: Create a dataframe, and use `flow_from_dataframe` to create a Data generator object\n3. **Model Training**: Create a simple model and train it\n4. **Evaluation**: Evaluate the model with `evaluate_generator`.\n5. **Submission**: Run predictions with `predict_generator`, and create submission csv file.\n\nThis is an example of a complete workflow using Data Generators with `flow_from_dataframe`.  Please note that this is slower than training with images loaded in memory, but **bypass the problem of running out of memory**. This is a work-in-progress, and a few things needs to be done before it's complete (e.g. evaluation metric should match the one given, instead of accuracy)\n\n### References\n* Keras Model: https:\/\/github.com\/keras-team\/keras\/blob\/master\/examples\/cifar10_cnn.py","4ed51592":"## 4. Evaluation","18a2a6ea":"Remove the filename from the dataframe, add the probabilities of each class.","95d785b5":"## 1. Image Data Exploration","66c35a84":"Create submission dictionary similar to above.","4f39f864":"Select the class with highest probability to be added to the dataframe, drop the class probabilities.","cd4124e1":"Train and evaluate the model","3b42bdbd":"`class_mode` arguments:\n>  - None, no labels are returned (the generator will only yield batches of image data, which is useful to use `model.predict_generator()`, `model.evaluate_generator()`, etc.).","8f212c21":"## 5. Submission","4c2a3108":"## 3. Model Training","925c2501":"Save the dataframe as a CSV file."}}