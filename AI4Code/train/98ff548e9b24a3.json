{"cell_type":{"001a9257":"code","11bddcc1":"code","68aa010f":"code","411c459d":"code","3e933bce":"code","241c6890":"code","37b5c60a":"code","b83687e9":"code","69fbd70f":"code","e46badba":"code","377d52b3":"code","011359b7":"code","94ad2633":"code","ea03dcec":"code","d1dfa36a":"code","b07d4171":"code","c2964c1e":"code","a758a62f":"code","7ca1a155":"code","6e7c3d15":"code","711a162c":"code","377fee0e":"code","673d8d44":"code","cf362fbf":"markdown","63b72364":"markdown","0c1e6cf6":"markdown","67195301":"markdown","a8186fbf":"markdown","4762e4ed":"markdown"},"source":{"001a9257":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11bddcc1":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt","68aa010f":"train = pd.read_csv('\/kaggle\/input\/odia-news-dataset\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/odia-news-dataset\/valid.csv')\ntrain.label.unique()","411c459d":"train.head()","3e933bce":"test.head()","241c6890":"print(train.shape)\nprint(test.shape)","37b5c60a":"from tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional, Conv1D,MaxPooling1D\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import regularizers\nimport tensorflow.keras.utils as ku","b83687e9":"tokenizer = Tokenizer()\n# entire training set sentences to be put as corpus\ncorpus = train.headings.values\n\nprint(\"Total sentences = \",len(corpus))\nprint(corpus[2])\nprint(corpus[1])","69fbd70f":"#Tokenizing the texts\n#corpus = [item for sublist in corpus for item in sublist]\ntokenizer.fit_on_texts(corpus)\nlen(tokenizer.word_index)","e46badba":"#Total number of words in the vocabulary\ntotal_words = len(tokenizer.word_index) + 1\nprint(\"total_words = \",total_words)","377d52b3":"tokenizer.word_index","011359b7":"# pad sequences \nsequences = tokenizer.texts_to_sequences(corpus)\nmax_sequence_len = max([len(x) for x in sequences])\npadded_seq = pad_sequences(sequences, maxlen=max_sequence_len, padding='post', truncating='post')","94ad2633":"print(padded_seq.shape)\nlen(padded_seq)","ea03dcec":"classes = len(train.label.unique())\n\ntest_portion = 0.3\ntraining_size = len(padded_seq)\n\nfrom sklearn.preprocessing import OneHotEncoder\nonehot_encoder = OneHotEncoder(sparse=False)\nlabels = onehot_encoder.fit_transform(np.asarray(train.label.values).reshape(-1, 1))\nprint(labels.shape)\n\nsplit = int(test_portion * training_size)\n\n#Train Validation split\nvalid_sequences = padded_seq[0:split]\ntraining_sequences = padded_seq[split:training_size]\nvalid_labels = labels[0:split]\ntraining_labels = labels[split:training_size]","d1dfa36a":"print(valid_sequences.shape)\nprint(valid_labels.shape)","b07d4171":"model = Sequential()\nmodel.add(Embedding(total_words, 100, input_length=max_sequence_len-1))\nmodel.add(Bidirectional(LSTM(150, return_sequences = True)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(100))\nmodel.add(Dense(total_words\/2, activation='relu', kernel_regularizer=regularizers.l2(0.01)))\nmodel.add(Dense(classes, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())\n\nhistory = model.fit(training_sequences, training_labels, epochs=15,\n                    validation_data=(valid_sequences, valid_labels), verbose=1)","c2964c1e":"#TODO\n#checkpoint\n#callback","a758a62f":"embedding_dim = 100\n\nmodel = Sequential([\n    Embedding(total_words, embedding_dim, input_length=max_sequence_len-1),#weights=[embeddings_matrix], trainable=False\n    Dropout(0.2),\n    Conv1D(64, 5, activation='relu'),\n    MaxPooling1D(pool_size=4),\n    LSTM(64),\n    Dense(classes, activation='sigmoid')\n])\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()\n\nnum_epochs = 10\n\ntraining_padded = np.array(training_sequences)\ntraining_labels = np.array(training_labels)\nvalid_padded = np.array(valid_sequences)\nvalid_labels = np.array(valid_labels)\n\nhistory = model.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(valid_padded, valid_labels), verbose=2)\n\nprint(\"Training Complete\")","7ca1a155":"import matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\n\n#-----------------------------------------------------------\n# Retrieve a list of list results on training and test data\n# sets for each training epoch\n#-----------------------------------------------------------\nacc=history.history['accuracy']\nval_acc=history.history['val_accuracy']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(len(acc)) # Get number of epochs\n\n#------------------------------------------------\n# Plot training and validation accuracy per epoch\n#------------------------------------------------\nplt.plot(epochs, acc, 'r')\nplt.plot(epochs, val_acc, 'b')\nplt.title('Training and validation accuracy')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend([\"Accuracy\", \"Validation Accuracy\"])\n\nplt.figure()\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot(epochs, loss, 'r')\nplt.plot(epochs, val_loss, 'b')\nplt.title('Training and validation loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\", \"Validation Loss\"])\n\nplt.figure()","6e7c3d15":"seed_text = test.headings.tolist()\n\n#Use the tokenizer created with train data to convert the test data to sequences\ntoken_list = tokenizer.texts_to_sequences(seed_text)\n#Padding for the sequences to be of equal length, the parameters should match whatever was done during training\ntoken_list = pad_sequences(token_list, maxlen=max_sequence_len, padding='post')\n\npredicted = model.predict(token_list, verbose=0)","711a162c":"print(test.shape)\nprint(predicted.shape)","377fee0e":"#We inverse transform the target \/ label to its original representation\npredicted = onehot_encoder.inverse_transform(predicted)","673d8d44":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy = \", accuracy_score(test.label, predicted))","cf362fbf":"### Tokenize the words in the training set ","63b72364":"#### We will use the train.csv file to generate train_validation split to train and validate our model. We will use the valid.csv to test our model, predicting the label and comparing it with the available ground truth.","0c1e6cf6":"#### create input sequences with not just the tokens for sentences but also for their n-grams, (for meaning and grammar)\n#### This part is not required since this is a classification task, we are not generating text or words or poetry here.\ninput_sequences = [] \nfor line in corpus:\n    token_list = tokenizer.texts_to_sequences([line])[0]\n    for i in range(1, len(token_list)):\n        n_gram_sequence = token_list[:i+1]\n        input_sequences.append(n_gram_sequence)\n\nlen(input_sequences)","67195301":"## Test Model Predictions","a8186fbf":"## Model 1","4762e4ed":"## Model 2"}}