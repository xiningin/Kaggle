{"cell_type":{"119706f8":"code","bde6ed70":"code","0c8f93e2":"code","0cd6ac7a":"code","62e8b0b4":"code","b9a313e9":"code","398b5649":"code","a3dad533":"code","a795c39b":"code","f0c6f112":"code","d5e779e5":"code","32bdcf05":"code","d65f6b2a":"code","115b1863":"code","dd27550c":"code","c0c64549":"code","a3024ba8":"code","44df0d66":"code","225f5190":"code","0bcefb66":"code","400dc92c":"code","044053fc":"code","646a4430":"code","936eb80a":"code","93f8b9c0":"code","8c48772d":"markdown"},"source":{"119706f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import mean_squared_error, r2_score                # we are using this for model tunning\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nfrom pandas import DataFrame\nfrom pandas.plotting import scatter_matrix\nfrom matplotlib import rcParams\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.colors import n_colors\nimport seaborn as sns\nimport pandas_profiling\n%matplotlib inline\nfrom matplotlib import rc\nimport scipy.stats\nfrom scipy.stats.mstats import winsorize\n\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","bde6ed70":"Life_Expectancy_Data = pd.read_csv(\"..\/input\/life-expectancy-who\/Life Expectancy Data.csv\")\ndata = Life_Expectancy_Data.copy()\n\ndata.info()","0c8f93e2":"data.head(10)","0cd6ac7a":"data.describe().iloc[:, 1:]","62e8b0b4":"data.corr()","b9a313e9":"orig_cols = list(data.columns)\nnew_cols = []\nfor col in orig_cols:\n    new_cols.append(col.strip().replace('  ', ' ').replace(' ', '_').replace('-', '_').lower())\n    \ndata.columns = new_cols","398b5649":"data.rename(columns={'thinness_1-19_years':'thinness_10-19_years'}, inplace=True)","a3dad533":"corr = data.corr()\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)","a795c39b":"a=list(data.columns)\nb=[]\nfor i in a:\n    c=data[i].isnull().sum()\n    b.append(c)\nnull_df=pd.DataFrame({'Feature name':a,'no. of Nan':b})\nnull_df","f0c6f112":"\ndata.adult_mortality = data.apply(lambda x: np.nan if (x.adult_mortality < 35 or x.adult_mortality > 600) else x.adult_mortality, axis=1)\ndata.infant_deaths = data.apply(lambda x: np.nan if (x.infant_deaths < 2 or x.infant_deaths > 900) else x.infant_deaths, axis=1)\ndata.bmi = data.apply(lambda x: np.nan if (x.bmi < 18 or x.bmi > 33) else x.bmi, axis=1)\ndata.under_five_deaths = data.apply(lambda x: np.nan if (x.under_five_deaths < 3 or x.under_five_deaths > 800) else x.under_five_deaths, axis=1)\n","d5e779e5":"data.info()","32bdcf05":"\n\ndata.fillna(data.mean(), inplace=True)\n","d65f6b2a":"data.info()","115b1863":"a=list(data.columns)\nb=[]\nfor i in a:\n    c=data[i].isnull().sum()\n    b.append(c)\nnull_df=pd.DataFrame({'Feature name':a,'no. of Nan':b})\nnull_df","dd27550c":"data.info()","c0c64549":"data.head()","a3024ba8":"data.info()","44df0d66":"a=list(data.columns)\nb=[]\nfor i in a:\n    c=data[i].isnull().sum()\n    b.append(c)\nnull_df=pd.DataFrame({'Feature name':a,'no. of Nan':b})\nnull_df","225f5190":"y=data['life_expectancy']","0bcefb66":"X=data.drop('life_expectancy',axis=1)","400dc92c":"Country_dummy=pd.get_dummies(X['country'])\nstatus_dummy=pd.get_dummies(X['status'])\n","044053fc":"X.drop(['country','status'],inplace=True,axis=1)\nX=pd.concat([X,Country_dummy,status_dummy],axis=1)","646a4430":"X.head()","936eb80a":"X.info()","93f8b9c0":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\nfrom sklearn.linear_model import LinearRegression\nLinear_model= LinearRegression()\n\nLinear_model.fit(X_train,y_train)\nLinear_model.score(X_train,y_train)\n","8c48772d":"* Adult Mortality is never below 35 and over 600 in reality\n* Infant deaths and under 5 deaths cannot be below 2\/1000 or more than 1000\n* BMI average for any country is never below 20 or higher than 32.5\n"}}