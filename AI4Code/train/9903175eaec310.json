{"cell_type":{"3792afd8":"code","3cabc47e":"code","e78e26b1":"code","afe2fc03":"code","4dd18e05":"code","afa9de34":"code","c74aabfa":"code","713d8670":"code","8fb7d388":"code","d756b7d1":"code","8601abc9":"code","d86fd8d6":"code","669d5b55":"code","067c94d7":"code","2f22a172":"code","d0b5f365":"code","7b66aec1":"code","6c628a8f":"code","5fdec7cb":"code","3f3a54c6":"code","d85e3de1":"code","8c532c92":"code","24b909b9":"code","8d14d072":"code","2dbe1f1a":"code","42f7f467":"code","b997725d":"code","548e7893":"markdown","16f236c5":"markdown","fcd575c9":"markdown","e81b9f03":"markdown","d42f2982":"markdown","58d8abcc":"markdown","59fa9f8c":"markdown","d7f4f3b9":"markdown"},"source":{"3792afd8":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', 50)\n\nimport os\nfrom scipy import stats\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3cabc47e":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e78e26b1":"TRAIN_PATH = \"\/kaggle\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv\"\nTEST_PATH = \"\/kaggle\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv\"","afe2fc03":"df = pd.read_csv(TRAIN_PATH)\ndf.head()","4dd18e05":"df['relevent_experience'].dropna().unique()","afa9de34":"print(f\"Dataset has {df.shape[0]} rows and {df.shape[1]} columns.\")\nprint(\"*\"*50, end=\"\\n\\n\")\n      \nprint(f\"Dataset has {len(df['enrollee_id'].dropna().unique())} unique user's data.\")\nprint(\"*\"*50, end=\"\\n\\n\")","c74aabfa":"print(f\"Dataset has {len(df['city'].dropna().unique())} unique cities.\")\nprint(\"_\"*20)\nprint(f\"Unique cities count:\\n{df['city'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")\n\n\nfig, ax = plt.subplots(figsize=(12, 6))\nsns.barplot(ax=ax, x=df['city'].value_counts().index[:10], y=df['city'].value_counts().values[:10], capsize=.2,palette=\"Blues_d\")\n\nax.set_title(\"Unique city count bar chart\",fontsize=16)\nax.set_xlabel(\"City\",fontsize=14)\nax.set_ylabel(\"Count\",fontsize=14)\n\nplt.show()","713d8670":"print(f\"Dataset has {len(df['city_development_index'].dropna().unique())} unique city development indices.\")\nprint(\"_\"*20)\nprint(f\"Unique City Development Indices:\\n{df['city_development_index'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")\n\n## line plot\n# fig, ax = plt.subplots(figsize=(16, 6))\n# sns.lineplot(ax=ax, x=np.linspace(0, len(df), len(df), endpoint=True), y=df['city_development_index'].values)\n\n# ax.set_title(\"todo\",fontsize=16)\n# ax.set_xlabel(\"Enrollee\",fontsize=14)\n# ax.set_ylabel(\"Count\",fontsize=14)\n\n# plt.show()","8fb7d388":"plt.figure(figsize = (10, 6))\n\nax = df['city_development_index'].plot(kind='kde')\nax.set(ylabel=\"Density\", xlabel=\"Development Index\")\nplt.title(\"KDE plot for Development Index\") \nplt.savefig(\".\/dev_index_density.png\", fontsize=15)\nplt.show()","d756b7d1":"city_with_dev = df.groupby(['city']).mean()['city_development_index'].reset_index()\ncity_with_dev = city_with_dev.sort_values(by=['city_development_index'], ascending=False).reset_index(drop=True)\ncity_with_dev.head()","8601abc9":"fig, ax = plt.subplots(figsize=(16, 6))\nsns.barplot(ax=ax, x=city_with_dev['city'][:15], \n            y=city_with_dev['city_development_index'][:15], \n            palette=\"Blues_d\")\n\nax.set_title(\"Top 15 cities with best development index bar chart\",fontsize=16)\nax.set_xlabel(\"City\",fontsize=14)\nax.set_ylabel(\"Development Index\",fontsize=14)\n\nplt.show()","d86fd8d6":"city_target = df.groupby(['target']).mean()['city_development_index'].reset_index()\ncity_target = city_target.sort_values(by=['city_development_index'], ascending=False).reset_index(drop=True)\nprint(city_target)\n\nfig, ax = plt.subplots(figsize=(8, 6))\nsns.barplot(ax=ax, \n            x=city_target['target'], \n            y=city_target['city_development_index'])\n\nax.set_title(\"Target based city's development index\",fontsize=16)\nax.set_xlabel(\"Target\",fontsize=14)\nax.set_ylabel(\"Development Index\",fontsize=14)\n\nplt.show()","669d5b55":"print(f\"Dataset has {len(df['gender'].dropna().unique())} unique gender's data.\")\nprint(\"_\"*20)\nprint(f\"Unique Gender counts:\\n{df['gender'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")\n\ntotal = df.shape[0]\ntotal_male = df.query(\"gender == 'Male'\")\ntotal_female = df.query(\"gender == 'Female'\")\ntotal_other = df.query(\"gender == 'Other'\")\n\nmale_percent = round(len(total_male)*100\/total, 3)\nfemale_percent = round(len(total_female)*100\/total, 3)\nother_percent = round(len(total_female)*100\/total, 3)\n\nlabels = 'Male Percentage', 'Female Percentage', 'Other Percentage'\nsizes = [male_percent, female_percent, other_percent]\nexplode = (0.05, 0.05, 0.05)\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title('Gender spread in Data', fontsize=15)\nplt.savefig(\".\/gender_pie.png\")\nplt.show()","067c94d7":"fig, ax = plt.subplots(figsize=(6, 10))\nsns.violinplot(ax=ax, x=df['target'], y=df['gender'],\n               split=True, inner=\"quart\", linewidth=1,\n               palette={\"Male\": \"b\", \"Female\": \"g\", \"Other\": \"r\"})\n\nax.set_title(\"Gender based on target violin plot\",fontsize=16)\nax.set_xlabel(\"Target\",fontsize=14)\nax.set_ylabel(\"Gender\",fontsize=14)\n\nplt.show()","2f22a172":"total = len(df.query(\"target == 1.0\"))\ntotal_male_target = df.query(\"gender == 'Male' and target == 1.0\")\ntotal_female_target = df.query(\"gender == 'Female' and target == 1.0\")\ntotal_other_target = df.query(\"gender == 'Other' and target == 1.0\")\n\nmale_target_percent = round(len(total_male_target)*100\/total, 3)\nfemale_target_percent = round(len(total_female_target)*100\/total, 3)\nother_target_percent = round(len(total_other_target)*100\/total, 3)\n\nlabels = 'Male Percentage', 'Female Percentage', 'Other Percentage'\nsizes = [male_target_percent, female_target_percent, other_target_percent]\nexplode = (0.1, 0.1, 0.1)\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title('Gender with target = 1.0', fontsize=15)\nplt.savefig(\".\/gender_target_1_pie.png\")\nplt.show()","d0b5f365":"total = len(df.query(\"target == 0.0\"))\ntotal_male_target = df.query(\"gender == 'Male' and target == 0.0\")\ntotal_female_target = df.query(\"gender == 'Female' and target == 0.0\")\ntotal_other_target = df.query(\"gender == 'Other' and target == 0.0\")\n\nmale_target_percent = round(len(total_male_target)*100\/total, 3)\nfemale_target_percent = round(len(total_female_target)*100\/total, 3)\nother_target_percent = round(len(total_other_target)*100\/total, 3)\n\nlabels = 'Male Percentage', 'Female Percentage', 'Other Percentage'\nsizes = [male_target_percent, female_target_percent, other_target_percent]\nexplode = (0.1, 0.1, 0.1)\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title('Gender with target = 0.0', fontsize=15)\nplt.savefig(\".\/gender_target_0_pie.png\")\nplt.show()","7b66aec1":"print(f\"Dataset has {len(df['relevent_experience'].dropna().unique())} unique relevant experience data.\")\nprint(\"_\"*20)\nprint(f\"Unique Experiences:\\n{df['relevent_experience'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")\n\n\nfig, ax = plt.subplots(figsize=(8, 6))\nsns.barplot(ax=ax, \n            x=df['relevent_experience'].value_counts().index, \n            y=df['relevent_experience'].value_counts().values)\n\nax.set_title(\"Total Data for Relevant experience\",fontsize=16)\nax.set_xlabel(\"Relevent Experience\",fontsize=14)\nax.set_ylabel(\"Data Count\",fontsize=14)\n\nplt.show()","6c628a8f":"total = len(df.query(\"target == 1.0\"))\ntotal_experience_target = df.query(\"relevent_experience == 'Has relevent experience' and target == 1.0\")\ntotal_inexperience_target = df.query(\"relevent_experience == 'No relevent experience' and target == 1.0\")\n\nexperience_target_percentage = round(len(total_experience_target)*100\/total, 3)\ninexperience_target_percentage = round(len(total_inexperience_target)*100\/total, 3)\n\n\nlabels = 'Has relevent experience', 'No relevent experience'\nsizes = [experience_target_percentage, inexperience_target_percentage]\nexplode = (0.05, 0.05)\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title('Relevant Experience with target = 1.0', fontsize=15)\nplt.savefig(\".\/experience_target_1_pie.png\")\nplt.show()","5fdec7cb":"total = len(df.query(\"target == 0.0\"))\ntotal_experience_target = df.query(\"relevent_experience == 'Has relevent experience' and target == 0.0\")\ntotal_inexperience_target = df.query(\"relevent_experience == 'No relevent experience' and target == 0.0\")\n\nexperience_target_percentage = round(len(total_experience_target)*100\/total, 3)\ninexperience_target_percentage = round(len(total_inexperience_target)*100\/total, 3)\n\n\nlabels = 'Has relevent experience', 'No relevent experience'\nsizes = [experience_target_percentage, inexperience_target_percentage]\nexplode = (0.05, 0.05)\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title('Relevant Experience with target = 0.0', fontsize=15)\nplt.savefig(\".\/experience_target_0_pie.png\")\nplt.show()","3f3a54c6":"print(f\"Dataset has {len(df['enrolled_university'].dropna().unique())} unique enrolled university data.\")\nprint(\"_\"*20)\nprint(f\"Unique enrolled university:\\n{df['enrolled_university'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")","d85e3de1":"print(f\"Dataset has {len(df['education_level'].dropna().unique())} unique education level data.\")\nprint(\"_\"*20)\nprint(f\"Unique education level:\\n{df['education_level'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")","8c532c92":"print(f\"Dataset has {len(df['major_discipline'].dropna().unique())} unique major discipline data.\")\nprint(\"_\"*20)\nprint(f\"Unique major discipline:\\n{df['major_discipline'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")","24b909b9":"print(f\"Dataset has {len(df['experience'].dropna().unique())} unique experience data.\")\nprint(\"_\"*20)\nprint(f\"Unique experiences:\\n{df['experience'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")","8d14d072":"print(f\"Dataset has {len(df['company_size'].dropna().unique())} unique company sizes.\")\nprint(\"_\"*20)\nprint(f\"Unique company sizes:\\n{df['company_size'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")","2dbe1f1a":"print(f\"Dataset has {len(df['company_type'].dropna().unique())} unique company types.\")\nprint(\"_\"*20)\nprint(f\"Unique company types:\\n{df['company_type'].value_counts()}\")\nprint(\"*\"*50, end=\"\\n\\n\")","42f7f467":"def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n    \n    \nplotPerColumnDistribution(df, 10, 5)","b997725d":"corr = df.corr()\nplt.figure(num=None, figsize=(6, 6), dpi=80, facecolor='w', edgecolor='k')\ncorrMat = plt.matshow(corr, fignum = 1)\nplt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\nplt.yticks(range(len(corr.columns)), corr.columns)\nplt.gca().xaxis.tick_bottom()\nplt.colorbar(corrMat)\nplt.title(f'Correlation Matrix for all Transactions', fontsize=15)\nplt.savefig(\".\/correlation.png\")\nplt.show()","548e7893":"### My current gears:","16f236c5":"### Understanding Correlations","fcd575c9":"### Thanks :)","e81b9f03":"### Understanding Distributions","d42f2982":"### Gender Analysis","58d8abcc":"## Exploratory Data Analysis","59fa9f8c":"<table style=\"width:100%\">\n  <tr>\n    <th>HP Z8 G4 Tower - 1125W PSU<\/th>\n    <th>HP ZBook Studio - G7 Mobile Workstation:<\/th>\n  <\/tr>\n  <tr>\n    <td>6234 3.3 GHz (8 Core each) i9 Processors x 2<\/td>\n    <td>6234 3.3 GHz (8 Core) i9 Processor x 1<\/td>\n  <\/tr>\n  <tr>\n    <td>NVIDIA Quadro RTX 8000 x 1<\/td>\n    <td>NVIDIA Quadro RTX 5000 x 1<\/td>\n  <\/tr>\n  <tr>\n    <td>96GB DDR4 RAM 2933<\/td>\n    <td>32GB DDR4 RAM 2933<\/td>\n  <\/tr>\n    \n  <tr>\n    <td>2 TB NVMe M.2 SSD<\/td>\n    <td>2 TB NVMe M.2 SSD<\/td>\n  <\/tr>\n  <tr>\n    <td><img src= \"https:\/\/ssl-product-images.www8-hp.com\/digmedialib\/prodimg\/lowres\/c05724976.png?imdensity=1&imwidth=1024\" width=200px><\/td>\n    <td><img src=\"https:\/\/www8.hp.com\/content\/dam\/sites\/worldwide\/personal-computers\/commercial\/workstations\/zbook-studio\/images\/color-accuracy-image-desktop.png\" width=200px><\/td>\n  <\/tr>\n<\/table>\n","d7f4f3b9":"### City and its development index analysis"}}