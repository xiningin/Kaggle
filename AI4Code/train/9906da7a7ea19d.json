{"cell_type":{"ec30d3f9":"code","c1d93a66":"code","4de655df":"code","1962ffd3":"code","f6a08880":"code","0df13cfe":"code","95c0321f":"code","2ba5506b":"code","1c631fb2":"code","0736e44d":"code","1b362ef1":"code","6baa8cc5":"code","70c67b17":"code","b7d04000":"code","271d9684":"code","baae3433":"code","a0a831ae":"code","2d4416d7":"code","c8c3d98c":"code","60a484c4":"code","eac82d23":"code","c8454895":"code","f43c2f0a":"code","298869e6":"code","88cde1c9":"code","32b8ad22":"code","dd04ca5d":"code","0db0311d":"code","71dc8f6c":"code","2492f235":"code","cdf82a69":"code","acd15729":"code","da04f3d6":"code","06599a41":"code","bfb27379":"code","1e87a252":"code","7b96bbb1":"code","32250f3c":"markdown","8086014a":"markdown","801869eb":"markdown","a5fb92aa":"markdown"},"source":{"ec30d3f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","c1d93a66":"import pandas as pd\nimport numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingRegressor, RandomForestRegressor, RandomForestClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, accuracy_score\n#from sklearn.externals.six import StringIO\nfrom sklearn import tree\nfrom six import StringIO\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn import metrics\n\n\n#visualization\n%matplotlib inline\nimport seaborn as sns\nfrom IPython.display import Image\n#import pydotplus\nfrom sklearn.tree import export_graphviz","4de655df":"df = pd.read_csv('..\/input\/arketing-campaign\/marketing_campaign.csv', delimiter=';')","1962ffd3":"df.head()","f6a08880":"df_cleaned = df.copy()\n\ndel df_cleaned['Z_CostContact']\ndel df_cleaned['Z_Revenue']\n","0df13cfe":"#create account age\ndf_cleaned['Dt_Customer'] = pd.to_datetime(df_cleaned['Dt_Customer'])\ndf_cleaned['Dt_Customer_year_month'] = df_cleaned['Dt_Customer'].dt.to_period(\"M\")\ndf_cleaned['account_age'] = (pd.to_datetime(\"2014-12\").year - df_cleaned['Dt_Customer_year_month'].dt.year)*12 + (pd.to_datetime(\"2014-12\").month - df_cleaned['Dt_Customer_year_month'].dt.month)","95c0321f":"del df_cleaned['Dt_Customer_year_month']\ndel df_cleaned['Dt_Customer']\ndf_cleaned.head()","2ba5506b":"# create customer age\ndf_cleaned['Age'] = 2014 - df_cleaned[\"Year_Birth\"]\ndel df_cleaned['Year_Birth']\ndf_cleaned.head()","1c631fb2":"df_cleaned.describe()","0736e44d":"# Fillna in Income by using avg value\n\navg_income = np.mean(df_cleaned.Income)\n\ndf_cleaned['Income'] = df_cleaned['Income'].fillna(avg_income, axis = 0)","1b362ef1":"df_cleaned.describe()","6baa8cc5":"df_cleaned.corr()","70c67b17":"#from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder","b7d04000":"#Create Dummy Variables\nenc_edu = OneHotEncoder(handle_unknown='ignore')\nenc_edu_df = pd.DataFrame(enc_edu.fit_transform(df_cleaned[['Education']]).toarray())\n\ndf_cleaned = df_cleaned.join(enc_edu_df)\n\ndf_cleaned.head()","271d9684":"df_cleaned.rename(columns = {0: \"2n Cycle\", 1: \"Basic\", 2: \"Graduation\", 3: \"Master\", 4: \"PhD\"},inplace = True)","baae3433":"enc_marital = OneHotEncoder(handle_unknown='ignore')\nenc_marital_df = pd.DataFrame(enc_edu.fit_transform(df_cleaned[['Marital_Status']]).toarray())\n\ndf_cleaned = df_cleaned.join(enc_marital_df)\n\ndf_cleaned.rename(columns = {0: \"Absurd\", 1: \"Alone\", 2: \"Divorced\", 3: \"Married\", 4: \"Single\", 5: \"Together\", 6: \"Widow\", 7: \"YOLO\"}, inplace = True)\ndf_cleaned.head()","a0a831ae":"del df_cleaned['Marital_Status']\ndel df_cleaned['Education']","2d4416d7":"df_cleaned[\"total_Mnt\"] = df_cleaned[\"MntWines\"] + df_cleaned[\"MntFruits\"] + df_cleaned[\"MntMeatProducts\"]+ df_cleaned['MntFishProducts'] + df_cleaned[\"MntSweetProducts\"] + df_cleaned[\"MntGoldProds\"]\n\ndf_cleaned['MntWines_pct'] = df_cleaned['MntWines']\/df_cleaned['total_Mnt']\ndf_cleaned['MntFruits_pct'] = df_cleaned[\"MntFruits\"]\/df_cleaned['total_Mnt']\ndf_cleaned[\"MntMeatProducts_pct\"] = df_cleaned[\"MntMeatProducts\"]\/df_cleaned['total_Mnt']\ndf_cleaned[\"MntFishProducts_pct\"] = df_cleaned[\"MntFishProducts\"]\/df_cleaned['total_Mnt']\ndf_cleaned[\"MntSweetProducts_pct\"] = df_cleaned[\"MntSweetProducts\"]\/df_cleaned['total_Mnt']\ndf_cleaned[\"MntGoldProds_pct\"] = df_cleaned[\"MntGoldProds\"]\/df_cleaned['total_Mnt']\n","c8c3d98c":"df_cleaned[['MntWines_pct', 'MntFruits_pct', 'MntMeatProducts_pct', 'MntFishProducts_pct', 'MntSweetProducts_pct', 'MntGoldProds_pct']].describe()","60a484c4":"# Create AcceptedCmps to count number of offers each customer accepted\ndf_cleaned[\"AcceptedCmps\"] = df_cleaned[[\"AcceptedCmp1\",\"AcceptedCmp2\",\"AcceptedCmp3\",\"AcceptedCmp4\", \"AcceptedCmp5\"]].sum(axis = 1)","eac82d23":"df_cleaned_for_DS = df_cleaned.copy()","c8454895":"#Balanced dataset by oversampling\ncount_response_0, count_response_1 = df_cleaned_for_DS.Response.value_counts()\nprint(count_response_0)\nprint(count_response_1)\n\ndf_cleaned_for_DS_0 = df_cleaned_for_DS[df_cleaned_for_DS[\"Response\"] == 0]\ndf_cleaned_for_DS_1 = df_cleaned_for_DS[df_cleaned_for_DS[\"Response\"] == 1]\n\ndf_cleaned_for_DS_1_over = df_cleaned_for_DS_1.sample(n = count_response_0, replace = True)\ndf_cleaned_for_DS_1_over.shape","f43c2f0a":"df_cleaned_for_DS_resampling = pd.concat([df_cleaned_for_DS_1_over, df_cleaned_for_DS_0], axis = 0)","298869e6":"# split the train and test dataset\n\nX = df_cleaned_for_DS_resampling[feature]\ny = df_cleaned_for_DS_resampling.Response\n\nX_train,X_test,y_train,y_test = train_test_split(X, y, test_size = 0.4, random_state = 123)","88cde1c9":"feature = [\"2n Cycle\", \"Basic\", \"Graduation\", \"Master\", \"PhD\", \"Absurd\", \"Alone\", \"Divorced\", \"Married\", \"Single\",\n            \"Together\", \"Widow\", \"YOLO\", \"Income\", \"Kidhome\", \"Teenhome\", \"Recency\", \"MntWines_pct\", \"MntFruits_pct\",\n            \"MntMeatProducts_pct\", \"MntFishProducts_pct\", \"MntSweetProducts_pct\", \"MntGoldProds_pct\", \"NumDealsPurchases\",\n            \"NumWebPurchases\", \"NumCatalogPurchases\", \"NumStorePurchases\", \"NumWebVisitsMonth\",\n            \"AcceptedCmp1\", \"AcceptedCmp2\", \"AcceptedCmp3\", \"AcceptedCmp4\", \"AcceptedCmp5\",\n            \"AcceptedCmps\", \"Complain\",\n            \"account_age\", \"Age\"] ","32b8ad22":"from sklearn.model_selection import GridSearchCV","dd04ca5d":"rfc = RandomForestClassifier(n_estimators=30,\n                             random_state=1)\n\nmax_depth_range = range(1,16)\nparam_grid = dict(max_depth=max_depth_range)\n\ngrid = GridSearchCV(rfc,\n                    param_grid,\n                    cv = 10,\n                    scoring = 'accuracy')\n\ngrid.fit(X_train, y_train)\n\n\ngrid.cv_results_","0db0311d":"grid_mean_scores = grid.cv_results_[\"mean_test_score\"]\ngrid_test_mean_scores = metrics\n# plot the results\nsns.mpl.pyplot.plot(max_depth_range, grid_mean_scores)\nsns.mpl.pyplot.xlabel('max_depth')\nsns.mpl.pyplot.ylabel('Cross-Validated Mean Train Set Accuracy');","71dc8f6c":"best_rfc = RandomForestClassifier(n_estimators=50,\n                                  random_state=1,\n                                  max_depth = 12)\nbest_rfc.fit(X_train, y_train)\n\nrfc_pred = best_rfc.predict(X_test)\naccuracy_train = metrics.accuracy_score(y_train, best_rfc.predict(X_train))\naccuracy_test = metrics.accuracy_score(y_test, rfc_pred)\nprint(\"Accuracy of Random Forest train is: \", accuracy_train)\nprint(\"Accuracy of Random Forest test is: \", accuracy_test)","2492f235":"# compute feature importances\npd.DataFrame({'feature':feature, 'importance':best_rfc.feature_importances_}).sort_values(by='importance',ascending=False)","cdf82a69":"DecisionTree_cross_val = DecisionTreeClassifier(max_depth=10, random_state=10)\nDecisionTree_cross_val.fit(X_train, y_train)\ncross_val_scores = cross_val_score(DecisionTree_cross_val, X_train, y_train, cv = 10)\nprint(\"10-fold accuracies:\\n\",cross_val_scores)\nprint(\"10-fold mean accuracy:\\n\",cross_val_scores.mean())","acd15729":"y_test_pred_rcf = best_rfc.predict(X_test)","da04f3d6":"print(\"Classification Report:\\n\", metrics.classification_report(y_test,y_test_pred_rcf))","06599a41":"pred_probs_rcf =  best_rfc.predict_proba(X_test)\npred_probs_rcf","bfb27379":"fpr, tpr, thresholds = metrics.roc_curve(y_test, pred_probs_rcf[:,1])","1e87a252":"sns.mpl.pyplot.plot(fpr, tpr,label=\"DS\")\nsns.mpl.pyplot.xlim([0, 1])\nsns.mpl.pyplot.ylim([0, 1.05])\nsns.mpl.pyplot.legend(loc=\"lower right\")\nsns.mpl.pyplot.xlabel('False Positive Rate (1 - Specificity)')\nsns.mpl.pyplot.ylabel('True Positive Rate (Sensitivity)')","7b96bbb1":"print(\"Test AUC: \",metrics.roc_auc_score(y_test, best_rfc.predict(X_test)))","32250f3c":"## Import libraries[](http:\/\/)","8086014a":"## Start to Create Random Forest","801869eb":"## Use GridSearchCV to find the optimized tree depth","a5fb92aa":"## EDA"}}