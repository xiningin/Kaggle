{"cell_type":{"a7a59714":"code","1c788d04":"code","9af6327a":"code","cd5fa155":"code","70d052d1":"code","47bd1e54":"code","d872d643":"code","de37f135":"code","8fb176c8":"code","33edcde4":"code","85a7a38d":"code","339076e3":"code","b6f9bdee":"code","99d2f651":"code","33b383d1":"code","d9019783":"code","83b42d2b":"code","679573b2":"code","d23d4f60":"code","cf43eba1":"code","5294a3d8":"code","f4dfcf43":"code","7bb26fe9":"code","fe266a9e":"code","dd2be708":"code","12ece210":"code","bde4ca74":"code","6587fe9f":"code","d19e01e2":"code","b0ddc3a9":"code","7375c6f1":"code","9eda79a2":"code","356ad1b9":"code","d8ae145c":"code","a21bb09e":"code","7c0036fa":"code","f6d11481":"code","efd11b47":"code","e285ea07":"code","d6be52a0":"code","5f6b684a":"code","717bc745":"code","87358fc8":"code","1bb38509":"code","7ab48ad2":"code","98eeefdd":"code","019b05a4":"code","6fb72c95":"code","0e4c0dc9":"code","a4a01e4b":"code","46c57413":"code","38b35a82":"code","2b564dd7":"code","512f7656":"code","0e6f2e36":"code","ffcd1ba0":"code","4943d720":"code","3609d19c":"code","10084a55":"code","48229358":"code","e5e50506":"code","683c222e":"code","99f86593":"code","cdb049a5":"code","130fcd70":"code","beb9acf1":"code","73cf9a0b":"code","06d3159f":"code","acd39723":"code","316440a8":"code","3ea5f97e":"code","83667ac9":"code","2d2e7870":"code","be6de638":"code","92a86c36":"code","c3b0033a":"code","91d69988":"code","9a34773e":"code","13e6233c":"code","a1ae5714":"code","ac0f3bd0":"code","2ec8301f":"code","738157bc":"code","bec88421":"code","c14e6e0f":"code","882b3ee1":"code","3c0aa14d":"code","1bfff1f8":"code","3904dd38":"code","93d8a922":"code","5c1c28d8":"code","8608f6eb":"code","8b3bc04b":"code","ed334684":"code","1155c70b":"code","bdc6a8dc":"code","1522893c":"markdown","59deb732":"markdown","e6bd863a":"markdown"},"source":{"a7a59714":"## Importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('ggplot')\nimport seaborn as sns\n\n\nimport plotly\nimport os, json, time, datetime\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom PIL import Image\nfrom wordcloud import WordCloud\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import mean_squared_error, roc_auc_score\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nimport gc\nfrom catboost import CatBoostClassifier\nfrom tqdm import tqdm_notebook\nimport plotly.offline as py\npy.init_notebook_mode(connected = True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport random, warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom functools import partial\npd.set_option('max_colwidth',500)\npd.set_option('max_columns',500)\npd.set_option('max_rows', 100)\n\nimport scipy as sp\nfrom math import sqrt\nfrom collections import Counter\nfrom sklearn.metrics import confusion_matrix as sk_cmatrix\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom nltk.tokenize import TweetTokenizer\n\nimport langdetect, eli5\nfrom IPython.display import display\n\nfrom sklearn.metrics import cohen_kappa_score\ndef kappa(y_true, y_pred):\n    return cohen_kappa_score(y_true, y_pred,weights ='quadratic')\n","1c788d04":"!ls ..\/input\/petfinder-adoption-prediction\/\n#or\nprint(os.listdir(\"..\/input\/petfinder-adoption-prediction\/train\"))","9af6327a":"breeds = pd.read_csv(\"..\/input\/petfinder-adoption-prediction\/breed_labels.csv\")\ncolor = pd.read_csv(\"..\/input\/petfinder-adoption-prediction\/color_labels.csv\")\nstate = pd.read_csv(\"..\/input\/petfinder-adoption-prediction\/state_labels.csv\")\n\ntrain = pd.read_csv(\"..\/input\/petfinder-adoption-prediction\/train\/train.csv\")\ntest = pd.read_csv(\"..\/input\/petfinder-adoption-prediction\/test\/test.csv\")\nsub = pd.read_csv(\"..\/input\/petfinder-adoption-prediction\/test\/sample_submission.csv\")\n\ntrain['dataset_type']='train'\ntest['dataset_type'] = 'test'\nall_data = pd.concat([train, test])","cd5fa155":"train.drop('Description', axis=1).head(5)","70d052d1":"train.info()","47bd1e54":"train.shape","d872d643":"# target column is AdoptionSpeed\n\ntrain['AdoptionSpeed'].value_counts().sort_index().plot('barh',color = 'teal');\nplt.title('Adoption Speed class counts')","de37f135":"plt.figure(figsize= (14,5))\ng = sns.countplot(x ='AdoptionSpeed', data = all_data.loc[all_data['dataset_type']=='train'])\nplt.title('Adoption Speed classes rate')\nax = g.axes","8fb176c8":"ax","33edcde4":"ax.patches","85a7a38d":"ax.patches[2].get_width()","339076e3":"plt.figure(figsize=(14,7))\ng = sns.countplot(x='AdoptionSpeed', data = all_data.loc[all_data['dataset_type']=='train'])\nplt.title('Adoption Speed classes rates')\nax = g.axes\nfor p in ax.patches:\n    ax.annotate(f\"{p.get_height() * 100 \/ train.shape[0]:.2f}%\", \n                (p.get_x() + p.get_width()\/2., p.get_height()),\n                ha ='center', va='center', fontsize = 11, color = 'gray', rotation = 0, \n                xytext = (0,10),\n                textcoords = 'offset points'\n               )\n    ","b6f9bdee":"for p in ax.patches:\n    print(f\"{p.get_height() * 100 \/ train.shape[0]:.2f}%\", \n                (p.get_x() + p.get_width()\/2., p.get_height()))","99d2f651":"# Type\nall_data['Type'].value_counts()","33b383d1":"all_data['Type'] = all_data['Type'].apply(lambda x : 'Dog' if x==1 else 'Cat')","d9019783":"plt.figure(figsize = (10,5))\nsns.countplot(x = 'dataset_type', data = all_data, hue ='Type')\nplt.title('Distribution of Dogs and Cats in training and test set')","83b42d2b":"all_data.loc[(all_data['Type']=='Cat') &  (all_data['dataset_type']=='train')].shape","679573b2":"all_data.loc[(all_data['Type']=='Cat') &  (all_data['dataset_type']=='train') &\n            (all_data['AdoptionSpeed']==0)].shape","d23d4f60":"main_count = train['AdoptionSpeed'].value_counts(normalize=True).sort_index()","cf43eba1":"def prepare_plot_dict(df, col, main_count):\n    main_count = dict(main_count)\n    plot_dict = {}\n    for i in df[col].unique():\n        val_count = dict(df.loc[df[col]==i,'AdoptionSpeed'].value_counts().sort_index())\n        \n        for k, v in main_count.items():\n            if k in val_count:\n                plot_dict[val_count[k]] = ((val_count[k] \/ sum(val_count.values())) \/ main_count[k]) *100 -100\n            else:\n                plot_dict[0] = 0\n    return plot_dict\n","5294a3d8":"def make_count_plot(df, x, hue ='AdoptionSpeed', title ='', main_count = main_count):\n    g = sns.countplot(x = x, data = df, hue = hue)\n    plt.title(f\"AdoptionSpeed {title}\")\n    ax = g.axes\n    \n    plot_dict = prepare_plot_dict(df, x, main_count)\n    \n    for p in ax.patches:\n        h = p.get_height() if str(p.get_height()) != 'nan' else 0\n        text = f\"{plot_dict[h]:.0f}%\" if plot_dict[h] <0 else f\"+{plot_dict[h]:.0f}%\"\n        ax.annotate(text, (p.get_x() + p.get_width()\/2., h),\n                    ha ='center', va='center', fontsize = 11, color ='green' if plot_dict[h]>0 else 'red',\n                    rotation =0, xytext =(0,10),\n                    textcoords = 'offset points'\n                   )","f4dfcf43":"plt.figure(figsize =(10,5))\nmake_count_plot(df = all_data.loc[all_data['dataset_type']=='train'], x = 'Type', title ='By pet type')\n","7bb26fe9":"## Cat and dog names wordcloud\n\nfig, ax = plt.subplots(figsize = (16,12))\nplt.subplot(1,2,1)\ntext_cat = ' '.join(all_data.loc[all_data['Type']=='Cat','Name'].fillna('').values)\nwordcloud = WordCloud(max_font_size = None, background_color= 'black', width = 1200, height = 1000).generate(text_cat)\nplt.imshow(wordcloud)\nplt.title('Cat Names')\nplt.axis('off')\n\nplt.subplot(1,2,2)\ntext_dog = ' '.join(all_data.loc[all_data['Type']=='Dog','Name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='black', width =1200, height =1000).generate(text_dog)\nplt.imshow(wordcloud)\nplt.title('Dog Names')\nplt.axis('off')\n\nplt.show()","fe266a9e":"print(\"Most popular pet names and Adoption speed\")\nfor n in train['Name'].value_counts().index[:5]:\n    print(n)\n    print(train.loc[train['Name']==n,'AdoptionSpeed'].value_counts().sort_index())\n    print(\"\")\n    ","dd2be708":"##unnamed pets\ntrain['Name'] = train['Name'].fillna('unnamed')\ntest['Name'] = test['Name'].fillna('unnamed')\nall_data['Name'] = all_data['Name'].fillna('unnamed')\n\ntrain['No_name'] = 0\ntrain.loc[train['Name']=='unnamed','No_name'] = 1\ntest['No_name'] =0\ntest.loc[test['Name']=='unnamed','No_name'] = 1\nall_data['No_name'] = 0\nall_data.loc[all_data['Name']=='unnamed','No_name'] = 1\n\nprint(f\"Rate of unnamed pets in training dataset : {train['No_name'].sum()*100 \/ train['No_name'].shape[0]:.2f}%\")\nprint(f\"Rate of unnamed pets in test dataset : {test['No_name'].sum() *100 \/ test['No_name'].shape[0]:.2f}%\")\n      ","12ece210":"pd.crosstab(train['No_name'], train['AdoptionSpeed'], normalize = 'index')","bde4ca74":"plt.figure(figsize = (10,5))\nmake_count_plot(df = all_data.loc[all_data['dataset_type']=='train'], x = 'No_name', title='and having a name')","6587fe9f":"# short character names\n\nall_data[all_data['Name'].apply(lambda x: len(str(x))==3)]['Name'].value_counts().tail()","d19e01e2":"# less than 3 character names\n\nall_data[all_data['Name'].apply(lambda x : len(str(x))<3)]['Name'].unique()","b0ddc3a9":"# Age plot\n\nfig, ax = plt.subplots(figsize = (16,6))\nplt.subplot(1,2,1)\nplt.title('Distribution of pets age')\ntrain['Age'].plot('hist', label = 'train')\ntest['Age'].plot('hist', label='test')\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.title('Distribution of pets age(log)')\nnp.log1p(train['Age']).plot('hist', label='train')\nnp.log1p(test['Age']).plot('hist', label = 'test')\nplt.legend()","7375c6f1":"train['Age'].value_counts().head()","9eda79a2":"plt.figure(figsize = (10,5))\nsns.violinplot(x = 'AdoptionSpeed', y='Age', hue='Type', data= train)\nplt.title('Adoptionspeed by age and type')","356ad1b9":"data = []\nfor a in range(5):\n    df = train.loc[train['AdoptionSpeed'] == a]\n\n    data.append(go.Scatter(\n        x = df['Age'].value_counts().sort_index().index,\n        y = df['Age'].value_counts().sort_index().values,\n        name = str(a)\n    ))\n    \nlayout = go.Layout(dict(title = \"AdoptionSpeed trends by Age\",\n                  xaxis = dict(title = 'Age (months)'),\n                  yaxis = dict(title = 'Counts'),\n                  )\n                  )\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","d8ae145c":"# Breeds\n\ntrain['Pure_breed'] =0 \ntrain.loc[train['Breed2']==0,'Pure_breed'] = 1\ntest['Pure_breed']=0\ntest.loc[test['Breed2']==0, 'Pure_breed']=1\nall_data['Pure_breed']=0\nall_data.loc[all_data['Breed2']==0, 'Pure_breed'] = 1\n\nprint(f\"Rate of pure breed pets in training set : {train['Pure_breed'].sum() *100 \/ train['Pure_breed'].shape[0]:.2f}%\")\nprint(f\"Rate of pure breed pets in training set : {test['Pure_breed'].sum() *100 \/ test['Pure_breed'].shape[0]:.2f}%\")\n","a21bb09e":"def plot_four_graphs(col='', main_title='', dataset_title=''):\n    \"\"\"\n    Plotting four graphs:\n    - adoption speed by variable;\n    - counts of categories in the variable in train and test;\n    - adoption speed by variable for dogs;\n    - adoption speed by variable for cats;    \n    \"\"\"\n    plt.figure(figsize=(20, 12));\n    plt.subplot(2, 2, 1)\n    make_count_plot(df=train, x=col, title=f'and {main_title}')\n\n    plt.subplot(2, 2, 2)\n    sns.countplot(x='dataset_type', data=all_data, hue=col);\n    plt.title(dataset_title);\n\n    plt.subplot(2, 2, 3)\n    make_count_plot(df=train.loc[train['Type'] == 1], x=col, title=f'and {main_title} for dogs')\n\n    plt.subplot(2, 2, 4)\n    make_count_plot(df=train.loc[train['Type'] == 2], x=col, title=f'and {main_title} for cats')\n    \nplot_four_graphs(col='Pure_breed', main_title='having pure breed', dataset_title='Number of pets by pure\/not-pure breed in train and test data')","7c0036fa":"breeds_dict = {k:v for k,v in zip(breeds['BreedID'], breeds['BreedName'])}","f6d11481":"train['Breed1_name'] = train['Breed1'].apply(lambda x : '_'.join(breeds_dict[x].split()) \n                                             if x in breeds_dict else ' Unknown')\ntrain['Breed2_name'] = train['Breed2'].apply(lambda x : '_'.join(breeds_dict[x].split()) \n                                             if x in breeds_dict else '-')\n\ntest['Breed1_name'] = test['Breed1'].apply(lambda x : '_'.join(breeds_dict[x].split()) \n                                           if x in breeds_dict else 'Unknown')\ntest['Breed2_name'] = test['Breed2'].apply(lambda x : '_'.join(breeds_dict[x].split()) \n                                           if x in breeds_dict else '-')\n\nall_data['Breed1_name'] = all_data['Breed1'].apply(lambda x : '_'.join(breeds_dict[x].split())\n                                                  if x in breeds_dict else 'Unknown')\nall_data['Breed2_name'] = all_data['Breed2'].apply(lambda x : '_'.join(breeds_dict[x].split())\n                                                  if x in breeds_dict else '-')","efd11b47":"fig, ax = plt.subplots(figsize = (20,12))\nplt.subplot(2,2,1)\nplt.title('Top cat breed1')\ntext_cat1 = ' '.join(all_data.loc[all_data['Type']=='Cat','Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='White', collocations=False, width =1200, \n                     height = 1000).generate(text_cat1)\nplt.imshow(wordcloud)\nplt.axis('off')\n\nplt.subplot(2,2,2)\nplt.title('Top cat breed2')\ntext_cat2 = ' '.join(all_data.loc[all_data['Type']=='Cat', 'Breed2_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='White', collocations=False,\n                     width = 1200, height =1000).generate(text_cat2)\nplt.imshow(wordcloud)\nplt.axis('off')\n\nplt.subplot(2,2,3)\nplt.title('Top dog breed1')\ntext_dog1 = ' '.join(all_data.loc[all_data['Type']=='Dog', 'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='White', collocations=False,\n                     width = 1200, height = 1000).generate(text_dog1)\nplt.imshow(wordcloud)\nplt.axis('off')\n\nplt.subplot(2,2,4)\nplt.title('Top dog breed2')\ntext_dog2 = ' '.join(all_data.loc[all_data['Type']=='Dog','Breed2_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='White', collocations=False,\n                     width = 1200, height = 1000).generate(text_dog2)\nplt.imshow(wordcloud)\nplt.axis('off')","e285ea07":"(all_data['Breed1_name']+ \"__\" + all_data[\"Breed2_name\"]).value_counts().head(15)","d6be52a0":"# Gender\n#1 = Male, 2 =Female, 3 = group of pets\n\nplt.figure(figsize = (18,6))\nplt.subplot(1,2,1)\nmake_count_plot(df = train, x ='Gender', title= 'and gender')\n\nplt.subplot(1,2,2)\nsns.countplot(x = 'dataset_type', data = all_data, hue ='Gender')\nplt.title('Number of pets by gender and type')","5f6b684a":"sns.factorplot(x='Type', hue = 'Gender', data = all_data, kind ='count', col ='dataset_type')\nplt.subplots_adjust(top=0.8)\nplt.suptitle(\"Count of cats and dogs by Gender and type\")","717bc745":"# Colors\ncolors_dict = { k: v for k, v in zip(color['ColorID'], color['ColorName'])}\n\ntrain['Color1_name'] = train['Color1'].apply(lambda x : colors_dict[x] if x in colors_dict else '')\ntrain['Color2_name'] = train['Color2'].apply(lambda x : colors_dict[x] if x in colors_dict else '')\ntrain['Color3_name'] = train['Color3'].apply(lambda x : colors_dict[x] if x in colors_dict else '') \n\ntest['Color1_name'] = test['Color1'].apply(lambda x : colors_dict[x] if x in colors_dict else '')\ntest['Color2_name'] = test['Color2'].apply(lambda x : colors_dict[x] if x in colors_dict else '')\ntest['Color3_name'] = test['Color3'].apply(lambda x : colors_dict[x] if x in colors_dict else '') \n\nall_data['Color1_name'] = all_data['Color1'].apply(lambda x : colors_dict[x] if x in colors_dict else '')\nall_data['Color2_name'] = all_data['Color2'].apply(lambda x : colors_dict[x] if x in colors_dict else '')\nall_data['Color3_name'] = all_data['Color3'].apply(lambda x : colors_dict[x] if x in colors_dict else '') ","87358fc8":"def make_factor_plot(df, x, col, title, main_count=main_count, hue=None, ann=True, col_wrap=4):\n    if hue:\n        g = sns.factorplot(col, col = x, data = df, kind ='count', hue = hue, col_wrap = col_wrap)\n    else:\n        g = sns.factorplot(col, col=x, data = df, kind ='count', col_wrap = col_wrap)\n        \n    plt.subplots_adjust(top = 0.8)\n    plt.suptitle(title)\n    ax = g.axes\n    plot_dict = prepare_plot_dict(df, x, main_count)\n    if ann:\n        for a in ax:\n            for p in a.patches:\n                text = f\"{plot_dict[p.get_height()]:.0f}%\" if plot_dict[p.get_height()] < 0 else f\"+{plot_dict[p.get_height()]:.0f}%\"\n                a.annotate(text, (p.get_x() +p.get_width()\/2., p.get_height()),ha='center',\n                           va='center', fontsize = 11, rotation=0, color ='green' if plot_dict[p.get_height()] >0\n                           else 'red' , xytext = (0,10), textcoords ='offset points')\n                \n                \n                                ","1bb38509":"sns.factorplot('dataset_type',col = 'Type',data = all_data, kind ='count',  hue = 'Color1_name',\n               palette = ['Black', 'Brown', '#FFFDD0', 'Gray', 'Gold', 'White', 'Yellow'])\nplt.subplots_adjust(top=0.9)\nplt.suptitle('Count of pets by main color')","7ab48ad2":"make_factor_plot(df = train, x ='Color1_name', col='AdoptionSpeed', title ='Count of pet colors by adoption speed')","98eeefdd":"train['fullcolor'] = (train['Color1_name']+\"__\"+train['Color2_name']+\"__\"+train['Color3_name']).str.replace(\"__\",\"\")\ntest['fullcolor'] = (test['Color1_name']+\"__\"+test['Color2_name']+\"__\"+test['Color3_name']).str.replace(\"__\",\"\")\nall_data['fullcolor'] = (all_data['Color1_name']+\"__\"+all_data['Color2_name']+\"__\"+all_data['Color3_name']).str.replace(\"__\",\"\")","019b05a4":"make_factor_plot(df = train.loc[train['fullcolor'].isin(list(train['fullcolor'].value_counts().index)[:12])],\n                 x='fullcolor', col ='AdoptionSpeed', title='Counts of pets by color and Adoption speed')","6fb72c95":"gender_dict = {1:'Male',2 :'Female',3:'Mixed'}\nfor i in all_data['Type'].unique():\n    for j in all_data['Gender'].unique():\n        df = all_data.loc[(all_data['Type']==i) & (all_data['Gender']==j)]\n        top_colors = list(df['fullcolor'].value_counts().index)[:5]\n        j = gender_dict[j]\n        print(f\"Most popular colors in {j} {i}s: {' '.join(top_colors)}\")","0e4c0dc9":"plot_four_graphs(col='MaturitySize', main_title='MaturitySize', dataset_title='Number of pets by MaturitySize in train and test data')","a4a01e4b":"make_factor_plot(df=all_data, x='MaturitySize', col='Type', title='Count of cats and dogs in train and test set by MaturitySize', hue='dataset_type', ann=False)","46c57413":"images =  [i.split('-')[0] for i in os.listdir('..\/input\/petfinder-adoption-prediction\/train_images\/')]","38b35a82":"images = [i.split('-')[0] for i in os.listdir('..\/input\/petfinder-adoption-prediction\/train_images\/')]\nsize_dict = {1: 'Small', 2: 'Medium', 3: 'Large', 4: 'Extra Large'}\nfor t in all_data['Type'].unique():\n    for m in all_data['MaturitySize'].unique():\n        df = all_data.loc[(all_data['Type'] == t) & (all_data['MaturitySize'] == m)]\n        top_breeds = list(df['Breed1_name'].value_counts().index)[:5]\n        m = size_dict[m]\n        print(f\"Most common Breeds of {m} {t}s:\")\n        \n        fig = plt.figure(figsize=(25, 4))\n        \n        for i, breed in enumerate(top_breeds):\n            # excluding pets without pictures\n            b_df = df.loc[(df['Breed1_name'] == breed) & (df['PetID'].isin(images)), 'PetID']\n            if len(b_df) > 1:\n                pet_id = b_df.values[1]\n            #else:\n             #   pet_id = b_df.values[0]\n            ax = fig.add_subplot(1, 5, i+1, xticks=[], yticks=[])\n\n            im = Image.open(\"..\/input\/petfinder-adoption-prediction\/train_images\/\" + pet_id + '-1.jpg')\n            plt.imshow(im)\n            ax.set_title(f'Breed: {breed}')\n        plt.show();","2b564dd7":"# Furlength\n#(1 = Short, 2 = Medium, 3 = Long, 0 = Not Specified)\nplot_four_graphs(col='FurLength', main_title='FurLength', dataset_title='Number of pets by FurLength in train and test data')","512f7656":"fig,ax = plt.subplots(figsize = (20,12))\nplt.subplot(2,2,1)\ntext_cat1 = ' '.join(all_data.loc[(all_data['FurLength']==1) & (all_data['Type']=='Cat'),'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color ='Black', width = 1200, height=1000).generate(text_cat1)\nplt.imshow(wordcloud)\nplt.title('Top cat breed1 with short fur')\nplt.axis('off')\n\nplt.subplot(2,2,2)\ntext_dog1 = ' '.join(all_data.loc[(all_data['FurLength']==1) &(all_data['Type']=='Dog'),'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color ='Black', width = 1200, height=1000).generate(text_cat1)\nplt.imshow(wordcloud)\nplt.title('Top dog breed1 with short fur')\nplt.axis('off')\n\nplt.subplot(2,2,3)\ntext_cat1 = ' '.join(all_data.loc[(all_data['FurLength']==2) & (all_data['Type']=='Cat'),'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color ='Black', width = 1200, height=1000).generate(text_cat1)\nplt.imshow(wordcloud)\nplt.title('Top cat breed1 with medium fur')\nplt.axis('off')\n\nplt.subplot(2,2,4)\ntext_dog1 = ' '.join(all_data.loc[(all_data['FurLength']==2) &(all_data['Type']=='Dog'),'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color ='Black', width = 1200, height=1000).generate(text_cat1)\nplt.imshow(wordcloud)\nplt.title('Top dog breed1 with medium fur')\nplt.axis('off')\n\nplt.show()","0e6f2e36":"## strange pets\n\nc= 0 \nstrange_pets= []\n\nfor i, row in all_data[all_data['Breed1_name'].str.contains('air')].iterrows():\n    if 'Short' in row['Breed1_name'] and row['FurLength'] == 1:\n        pass\n    elif 'Medium' in row['Breed1_name'] and row['FurLength'] == 2:\n        pass\n    elif 'High' in row['Breed1_name'] and row['FurLength'] == 3:\n        pass\n    else:\n        c+=1\n        strange_pets.append((row['PetID'], row['Breed1_name'], row['FurLength']))\n    \nprint(f\"There are {c} pets whose breed and fur length is not matched\")\n                                                                   \n                    ","ffcd1ba0":"\nstrange_pets = [p for p in strange_pets if p[0] in images]\nfig = plt.figure(figsize = (25,12))\nfur_dict = {1:'Short',2:'Medium',3:'Long'}\nfor i,s in enumerate(random.sample(strange_pets, 12)):\n    ax = fig.add_subplot(3,4,i+1, xticks=[], yticks =[])\n    im = Image.open(\"..\/input\/petfinder-adoption-prediction\/train_images\/\"+s[0]+'-1.jpg')\n    plt.imshow(im)\n    ax.set_title(f'Breed:{s[1]}\\n FurLength:{fur_dict[s[2]]}')\n\nplt.show()","4943d720":"plt.figure(figsize=(20,10))\nplt.subplot(2,2,1)\nmake_count_plot(df = train,x ='Vaccinated', title='Vaccinated' )\nplt.xticks([0,1,2],['Yes','No','Not sure'])\nplt.title('AdoptionSpeed and Vaccinated')\n\nplt.subplot(2,2,2)\nmake_count_plot(df= train, x ='Dewormed',title = 'Dewormed')\nplt.xticks([0,1,2],['Yes','No','Not sure'])\nplt.title('AdoptionSpeed and Dewormed')\n\nplt.subplot(2,2,3)\nmake_count_plot(df= train, x ='Sterilized',title = 'Sterilized')\nplt.xticks([0,1,2],['Yes','No','Not sure'])\nplt.title('AdoptionSpeed and Sterilized')\n\nplt.subplot(2,2,4)\nmake_count_plot(df= train, x ='Health',title = 'Health')\nplt.xticks([0,1,2],['Healthy', 'Minor Injury', 'Serious Injury'])\nplt.title('AdoptionSpeed and Healthy')\n\nplt.suptitle('Adoption Speed and health conditions')\n","3609d19c":"train['health'] = train['Vaccinated'].astype('str')+'_'+train['Dewormed'].astype('str')+'_'+train['Sterilized'].astype('str')+'_'+train['Health'].astype('str')\ntest['health'] = train['Vaccinated'].astype('str')+'_'+train['Dewormed'].astype('str')+'_'+train['Sterilized'].astype('str')+'_'+train['Health'].astype('str')\n    \nmake_factor_plot(df=train.loc[train['health'].isin(list(train.health.value_counts().index[:5]))], x='health', col='AdoptionSpeed', title='Counts of pets by main health conditions and Adoption Speed')","10084a55":"plt.figure(figsize =(15,10))\nplt.subplot(3,2,1)\nsns.violinplot(x='AdoptionSpeed', y='Age',data = train)\nplt.title('Adoption speed distribution by age')\n\nplt.subplot(3,2,2)\nsns.violinplot(x= 'AdoptionSpeed', y='Age', hue ='Vaccinated', data= train)\nplt.title('Adoption speed distribution by age and vaccinated')\n\nplt.subplot(3,2,3)\nsns.violinplot(x= 'AdoptionSpeed', y='Age', hue ='Dewormed', data= train)\nplt.title('Adoption speed distribution by age and Dewormed')\n\nplt.subplot(3,2,4)\nsns.violinplot(x= 'AdoptionSpeed', y='Age', hue ='Sterilized', data= train)\nplt.title('Adoption speed distribution by age and Sterilized')\n\nplt.subplot(3,2,5)\nsns.violinplot(x= 'AdoptionSpeed', y='Age', hue ='Health', data= train)\nplt.title('Adoption speed distribution by age and Health')","48229358":"train.loc[train['Quantity']>11][['Name','Description', 'Quantity','AdoptionSpeed']].head(10)","e5e50506":"train['Quantity'].value_counts().head(10)\n","683c222e":"train['Quantity_short'] = train['Quantity'].apply(lambda x : x if x<=5 else 6)\ntest['Quantity_short'] = test['Quantity'].apply(lambda x:x if x<=5 else 6)\nall_data['Quantity_short'] = test['Quantity'].apply(lambda x: x if x<=5 else 6)\n\nplot_four_graphs(col='Quantity_short', main_title='Quantity_short', dataset_title ='Number of pets by quantity short in train and test set')\n","99f86593":"# fee\ntrain['Free'] = train['Fee'].apply(lambda x: 'Free' if x == 0 else 'Not Free')\ntest['Free'] = test['Fee'].apply(lambda x: 'Free' if x == 0 else 'Not Free')\nall_data['Free'] = all_data['Fee'].apply(lambda x: 'Free' if x == 0 else 'Not Free')\nplot_four_graphs(col='Free', main_title='Free', dataset_title='Number of pets by Free in train and test data')","cdb049a5":"all_data.sort_values('Fee', ascending = False)[['Name','Description','Fee','AdoptionSpeed','dataset_type']].head(10)","130fcd70":"plt.figure(figsize=(16, 6));\nplt.subplot(1, 2, 1)\nplt.hist(train.loc[train['Fee'] < 400, 'Fee']);\nplt.title('Distribution of fees lower than 400');\n\nplt.subplot(1, 2, 2)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"Fee\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and Fee');","beb9acf1":"plt.figure(figsize=(16, 10));\nsns.scatterplot(x=\"Fee\", y=\"Quantity\", hue=\"Type\",data=all_data);\nplt.title('Quantity of pets and Fee');","73cf9a0b":"#state\nstates_dict = {k: v for k, v in zip(state['StateID'], state['StateName'])}\ntrain['State_name'] = train['State'].apply(lambda x: '_'.join(states_dict[x].split()) if x in states_dict else 'Unknown')\ntest['State_name'] = test['State'].apply(lambda x: '_'.join(states_dict[x].split()) if x in states_dict else 'Unknown')\nall_data['State_name'] = all_data['State'].apply(lambda x: '_'.join(states_dict[x].split()) if x in states_dict else 'Unknown')","06d3159f":"all_data['State_name'].value_counts(normalize=True).head()","acd39723":"make_factor_plot(df=train.loc[train['State_name'].isin(list(train.State_name.value_counts().index[:3]))], x='State_name', col='AdoptionSpeed', title='Counts of pets by states and Adoption Speed')","316440a8":"#rescuer\nall_data['RescuerID'].value_counts().head()","3ea5f97e":"make_factor_plot(df=train.loc[train['RescuerID'].isin(list(train.RescuerID.value_counts().index[:5]))], x='RescuerID', col='AdoptionSpeed', title='Counts of pets by rescuers and Adoption Speed', col_wrap=5)","83667ac9":"train['VideoAmt'].value_counts()","2d2e7870":"print(F'Maximum amount of photos in {train[\"PhotoAmt\"].max()}')\ntrain['PhotoAmt'].value_counts().head()","be6de638":"make_factor_plot(df=train.loc[train['PhotoAmt'].isin(list(train.PhotoAmt.value_counts().index[:5]))], x='PhotoAmt', col='AdoptionSpeed', title='Counts of pets by PhotoAmt and Adoption Speed', col_wrap=5)","92a86c36":"plt.figure(figsize=(16, 6));\nplt.subplot(1, 2, 1)\nplt.hist(train['PhotoAmt']);\nplt.title('Distribution of PhotoAmt');\n\nplt.subplot(1, 2, 2)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"PhotoAmt\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and PhotoAmt');","c3b0033a":"#Description\nfig, ax = plt.subplots(figsize = (12, 8))\ntext_cat = ' '.join(all_data['Description'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='white',\n                      width=1200, height=1000).generate(text_cat)\nplt.imshow(wordcloud)\nplt.title('Top words in description');\nplt.axis(\"off\");","91d69988":"tokenizer = TweetTokenizer()\nvectorizer = TfidfVectorizer(ngram_range=(1, 2), tokenizer=tokenizer.tokenize)\n\nvectorizer.fit(all_data['Description'].fillna('').values)\nX_train = vectorizer.transform(train['Description'].fillna(''))\n\nrf = RandomForestClassifier(n_estimators=20)\nrf.fit(X_train, train['AdoptionSpeed'])","9a34773e":"for i in range(5):\n    print(f'Example of Adoption speed {i}')\n    text = train.loc[train['AdoptionSpeed'] == i, 'Description'].values[0]\n    print(text)\n    display(eli5.show_prediction(rf, doc=text, vec=vectorizer, top=10))","13e6233c":"train['Description'] = train['Description'].fillna('')\ntest['Description'] = test['Description'].fillna('')\nall_data['Description'] = all_data['Description'].fillna('')\n\ntrain['desc_length'] = train['Description'].apply(lambda x: len(x))\ntrain['desc_words'] = train['Description'].apply(lambda x: len(x.split()))\n\ntest['desc_length'] = test['Description'].apply(lambda x: len(x))\ntest['desc_words'] = test['Description'].apply(lambda x: len(x.split()))\n\nall_data['desc_length'] = all_data['Description'].apply(lambda x: len(x))\nall_data['desc_words'] = all_data['Description'].apply(lambda x: len(x.split()))\n\ntrain['averate_word_length'] = train['desc_length'] \/ train['desc_words']\ntest['averate_word_length'] = test['desc_length'] \/ test['desc_words']\nall_data['averate_word_length'] = all_data['desc_length'] \/ all_data['desc_words']","a1ae5714":"plt.figure(figsize=(16, 6));\nplt.subplot(1, 2, 1)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"desc_length\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and description length');\n\nplt.subplot(1, 2, 2)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"desc_words\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and count of words in description');\n","ac0f3bd0":"# Sentiment\nsentiment_dict = {}\nfor filename in os.listdir('..\/input\/petfinder-adoption-prediction\/train_sentiment\/'):\n    with open('..\/input\/petfinder-adoption-prediction\/train_sentiment\/' + filename, 'r') as f:\n        sentiment = json.load(f)\n    pet_id = filename.split('.')[0]\n    sentiment_dict[pet_id] = {}\n    sentiment_dict[pet_id]['magnitude'] = sentiment['documentSentiment']['magnitude']\n    sentiment_dict[pet_id]['score'] = sentiment['documentSentiment']['score']\n    sentiment_dict[pet_id]['language'] = sentiment['language']\n\nfor filename in os.listdir('..\/input\/petfinder-adoption-prediction\/test_sentiment\/'):\n    with open('..\/input\/petfinder-adoption-prediction\/test_sentiment\/' + filename, 'r') as f:\n        sentiment = json.load(f)\n    pet_id = filename.split('.')[0]\n    sentiment_dict[pet_id] = {}\n    sentiment_dict[pet_id]['magnitude'] = sentiment['documentSentiment']['magnitude']\n    sentiment_dict[pet_id]['score'] = sentiment['documentSentiment']['score']\n    sentiment_dict[pet_id]['language'] = sentiment['language']","2ec8301f":"train['lang'] = train['PetID'].apply(lambda x : sentiment_dict[x]['language'] if x in sentiment_dict else 'no')\ntrain['magnitude'] = train['PetID'].apply(lambda x : sentiment_dict[x]['magnitude'] if x in sentiment_dict else 0)\ntrain['score'] = train['PetID'].apply(lambda x : sentiment_dict[x]['score'] if x in sentiment_dict else 0)\n\n\ntest['lang'] = test['PetID'].apply(lambda x : sentiment_dict[x]['language'] if x in sentiment_dict else 'no')\ntest['magnitude'] = test['PetID'].apply(lambda x : sentiment_dict[x]['magnitude'] if x in sentiment_dict else 0)\ntest['score'] = test['PetID'].apply(lambda x : sentiment_dict[x]['score'] if x in sentiment_dict else 0)\n\nall_data['lang'] = all_data['PetID'].apply(lambda x : sentiment_dict[x]['language'] if x in sentiment_dict else 'no')\nall_data['magnitude'] = all_data['PetID'].apply(lambda x : sentiment_dict[x]['magnitude'] if x in sentiment_dict else 0)\nall_data['score'] = all_data['PetID'].apply(lambda x : sentiment_dict[x]['score'] if x in sentiment_dict else 0)\n\n","738157bc":"plot_four_graphs(col='lang', main_title='lang', dataset_title='Number of pets by lang in train and test data')","bec88421":"plt.figure(figsize = (15,6))\nplt.subplot(1,2,1)\nsns.violinplot(x ='AdoptionSpeed', y='score', hue='Type',data=train)\nplt.title('Adoption speed distribuiton by sentiment score and type')\n\nplt.subplot(1,2,2)\nsns.violinplot(x ='AdoptionSpeed', y='magnitude', hue='Type',data=train)\nplt.title('Adoption speed distribuiton by sentiment magnitude and type')","c14e6e0f":"# Baseline model\n\ncols_to_use = ['Type', 'Age', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n       'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n       'Sterilized', 'Health', 'Quantity', 'Fee', 'State', 'RescuerID', 'health', 'Free', 'score',\n       'VideoAmt', 'PhotoAmt', 'AdoptionSpeed', 'No_name', 'Pure_breed', 'desc_length', 'desc_words', 'averate_word_length', 'magnitude']\n\ntrain = train[[cols for cols in cols_to_use if cols in train.columns]]\ntest = test[[cols for cols in cols_to_use if cols in test.columns]]","882b3ee1":"cat_cols = ['Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n       'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n       'Sterilized', 'Health', 'State', 'RescuerID',\n       'No_name', 'Pure_breed', 'health', 'Free']","3c0aa14d":"##Adding more cols\nmore_cols =[]\nfor col1 in cat_cols:\n    for col2 in cat_cols:\n        if col1 != col2 and col1 not in ['RescuerID','State'] and col2 not in ['RescuerID','State']:\n            train[col1 +'_'+col2] = train[col1].astype(str)+'_'+train[col2].astype(str)\n            test[col1 +'_'+col2] = test[col1].astype(str)+'_'+test[col2].astype(str)\n            more_cols.append(col1+'_'+col2)\n\ncat_cols = cat_cols + more_cols","1bfff1f8":"%%time\nindexer = {}\nfor col in cat_cols:\n    _,indexer[col] = pd.factorize(train[col].astype(str))\n\nfor col in tqdm_notebook(cat_cols):\n    train[col] = indexer[col].get_indexer(train[col].astype(str))\n    test[col] = indexer[col].get_indexer(test[col].astype(str))\n","3904dd38":"y = train['AdoptionSpeed']\ntrain = train.drop(['AdoptionSpeed'], axis = 1)","93d8a922":"n_fold = 5\nfolds = StratifiedKFold(n_splits = n_fold, shuffle = True, random_state = 15)","5c1c28d8":"def train_model(X = train, X_test = test, y= y, params = None, folds = folds, model_type ='lgb',\n               plot_feature_importance = False, averaging ='usual',make_oof = False):\n    result_dict = {}\n    if make_oof:\n        oof = np.zeros((len(X),5))\n    prediction = np.zeros((len(X_test),5))\n    scores = []\n    feature_importance = pd.DataFrame()\n    \n    for fold_n,(train_index, valid_index)  in  enumerate(folds.split(X,y)):\n        gc.collect()\n        print('Fold :',fold_n+1, 'Starting at ', time.ctime())\n        X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n        y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n        \n        if model_type =='lgb':\n            train_data = lgb.Dataset(X_train, label = y_train, categorical_feature = cat_cols)\n            valid_data = lgb.Dataset(X_valid, label = y_valid, categorical_feature = cat_cols)\n            \n            model = lgb.train(params, train_data,\n                             num_boost_round = 20000,\n                              valid_sets=[train_data, valid_data],\n                             verbose_eval = 500,\n                             early_stopping_rounds = 200)\n            \n            del train_data, valid_data\n            gc.collect()\n            \n            y_pred_valid = model.predict(X_valid, num_iteration = model.best_iteration)\n            del X_valid\n            gc.collect()\n            y_pred = model.predict(X_test, num_iteration = model.best_iteration)\n        \n        if model_type =='xgb':\n            train_data = xgb.DMatrix(data = X_train, label = y_train)\n            valid_data = xgb.DMatrix(data = X_valid, label = y_valid)\n            \n            watchlist = [(train_data,'train'),(valid_data,'valid_data')]\n            \n            model = xgb.train(dtrain = train_data, num_boost_round = 20000,evals = watchlist, \n                             early_stopping_rounds = 200, verbose_eval = 500, params = params)\n            \n            y_pred_valid = model.predict(xgb.DMatrix(X_valid), ntree_limit = model.best_ntree_limit)\n            y_pred = model.predict(xgb.DMatrix(X_test),ntree_limit = model.best_ntree_limit)\n            \n        \n        if make_oof:\n            oof[valid_index] = y_pred_valid\n        \n        scores.append(kappa(y_valid, y_pred_valid.argmax(1)))\n        print(\"Fold kappa: \", kappa(y_valid, y_pred_valid.argmax(1)))\n        print('')\n        \n        if averaging=='usual':\n            prediction += y_pred\n        elif averaging =='rank':\n            prediction +=pd.Series(y_pred).rank().values\n        \n        if model_type =='lgb':\n            fold_importance = pd.DataFrame()\n            fold_importance['feature'] = X.columns\n            fold_importance['importance']= model.feature_importance()\n            fold_importance['fold'] = fold_n+1\n            feature_importance = pd.concat([feature_importance, fold_importance], axis= 0)\n            \n    prediction \/=n_fold\n    \n    print(\"CV mean score: {0:.4f}, std:{1:.4f}\".format(np.mean(scores), np.std(scores)))\n    \n    if model_type=='lgb':\n        if plot_feature_importance:\n            feature_importance['importance'] \/= n_fold\n            cols = feature_importance[['feature','importance']].groupby('feature').mean().sort_values(by='importance', ascending = False)[:50].index\n            best_features = feature_importance.loc[feature_importance['feature'].isin(cols)]\n            \n            plt.figure(figsize = (16,12))\n            sns.barplot(x='importance',y='feature',data = best_features.sort_values(by='importance', ascending = False))\n            plt.title(\"LGB Features - avg over folds\")\n    \n            result_dict['feature_importance'] = feature_importance\n\n    result_dict['prediction'] = prediction\n    if make_oof:\n        result_dict['oof'] = oof\n        \n    return result_dict\n    \n    \n    ","8608f6eb":"params = {'num_leaves' : 512,\n         'objective' : 'multiclass',\n          'max_depth' : -1,\n          'learning_rate':0.01,\n          'boosting':'gbdt',\n          'feature_fraction': 0.9,\n          'bagging_freq': 3,\n          'bagging_fraction': 0.9,\n          'bagging_seed':11,\n          'random_state':42,\n          'verbosity':-1,\n          'num_class':5\n         }","8b3bc04b":"result_dict_lgb = train_model(X = train, X_test = test, y = y, params = params, model_type='lgb',\n                             plot_feature_importance = True, make_oof = True)","ed334684":"xgb_params = {'eta':0.01, \n             'max_depth': 9,\n              'subsample' : 0.9, #Bagging ratio\n              'colsample_bytree': 0.9, # number of features by tree\n              'objective':'multi:softprob',\n              'eval_metric':'merror', #multiclass classification error\n              'silent' : True,\n              'nthread' : 4,\n              'num_class':5\n              \n             }\nresult_dict_xgb = train_model(params = xgb_params, model_type ='xgb',make_oof = True)\n","1155c70b":"prediction = (result_dict_lgb['prediction'] + result_dict_xgb['prediction']).argmax(1)\nsubmission = pd.DataFrame({'PetID': sub.PetID, 'AdoptionSpeed':[int(i) for i in prediction]})\nsubmission.head()\n","bdc6a8dc":"submission.to_csv('submission.csv',index = False)","1522893c":"Reference:\n    https:\/\/www.kaggle.com\/artgor\/exploration-of-data-step-by-step","59deb732":"# Naive Multiclass LGB","e6bd863a":"MaturitySize\n\n1. Size at maturity (1 = Small, 2 = Medium, 3 = Large, 4 = Extra Large, 0 = Not Specified)"}}