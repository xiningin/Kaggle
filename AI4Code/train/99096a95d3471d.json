{"cell_type":{"a517b221":"code","4dc2286b":"code","819bb5d1":"code","a5e07777":"code","bf51b0e9":"code","6e050913":"code","416ee182":"code","fd780fef":"code","68de66cb":"code","4ec31f28":"code","de815946":"code","b020e7b7":"code","cfa33263":"code","572da89c":"code","f98fe9a8":"code","45646696":"code","be84b298":"code","06d3422f":"code","f331865a":"code","31d0456d":"code","fd60f386":"markdown","dd4e4f0d":"markdown","b56b2741":"markdown","221567d2":"markdown","63de9d95":"markdown","13e2c7c5":"markdown","66ffc750":"markdown","58e80601":"markdown","59807f44":"markdown","49405bc9":"markdown","33f2b266":"markdown","a6672f4e":"markdown","448f9b65":"markdown","1e3a3dfc":"markdown","a23e6725":"markdown","87541b25":"markdown","ab892ce7":"markdown","286d7655":"markdown","a6dbe2cc":"markdown","8f55bc68":"markdown","61aecb6b":"markdown","d23c14b5":"markdown","ec332d1f":"markdown","370b4fd3":"markdown"},"source":{"a517b221":"import pandas as pd\nimport numpy as np\nimport os\n\nimport networkx as nx\n\nfrom tqdm import tqdm_notebook\nimport tqdm\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\n%matplotlib inline\n\npd.options.display.float_format = '{:,.1f}'.format","4dc2286b":"# Load the initial data\ndata_dir = \"\/kaggle\/input\/prozorro-public-procurement-dataset\/\"\ndata_suppliers = \"Suppliers.csv\"\ndata_competitive = \"Competitive_procurements.csv\"\n\n# # Check all data files\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\ndata = pd.read_csv(os.path.join(data_dir, data_competitive), index_col=0, dtype=\"str\")\ndata[[\"lot_initial_value\", \"lot_final_value\"]] = data[[\"lot_initial_value\", \"lot_final_value\"]].astype(float)\ndata.index = pd.to_datetime(data.index)\n\n# change variables format\ndata.loc[:, 'lot_announce_year'] = data.lot_announce_year.astype('int')\ndata.loc[:, 'supplier_dummy'] = data.supplier_dummy.astype('int')\n\nprint(f\"The shape of the DF: {data.shape[0]:,.0f} rows, {data.shape[1]:,.0f} columns\")\ndisplay(data.head(5).T)","819bb5d1":"years_list = data.lot_announce_year.unique()\nprocurement_types = data.lot_procur_type.unique()\n\nprint('Dataset includes:')\nprint(f'- {len(years_list)} years: {years_list}')\nprint(f'- First procurement was announced {data.index.min().date()} last procurement was announced {data.index.max().date()}\\n')\n\nprint(f'- {data.lot_id.nunique():,.0f} competitive procurements [1]\\n')\n\nprint(f'- {data.organizer_code.nunique():,.0f} entities that announced procurements - Organizers [2]\\n')\n\nprint(f'- {data.participant_code.nunique():,.0f} companies that applied to participate in a competitive public procurement - Participants [3] \\n')\n\nprint(f'- Initial value of a contract in the dataset varies from UAH {data.lot_initial_value.min():,.0f} to UAH {data.lot_initial_value.max():,.0f}.')\nprint(f'- Final value of a contract in the dataset varies from UAH {data.lot_final_value.min():,.0f} to UAH {data.lot_final_value.max():,.0f} [4]\\n')\n\nprint(f'- {len(procurement_types)} procurement types: {\", \".join(procurement_types)} [5]')\nfor procedure in procurement_types:\n    procurements_number = len(data.query(f\"lot_procur_type == '{procedure}'\").lot_id.unique())\n    print(f'   - {procedure}: {procurements_number:,.0f} procurements;')\nprint('\\n')\n\nprint(f'- There are {data.lot_cpv_2_digs.nunique():,.0f} types of goods\/services\/works at the level of CPV 2 [6]')\nprint(f'- There are {data.lot_cpv_4_digs.nunique():,.0f} types of goods\/services\/works at the level of CPV 4')\nprint(f'- There are {data.lot_cpv.nunique():,.0f} types of goods\/services\/works at the level of CPV 8')","a5e07777":"np.random.seed(12)\nauction_list = data.lot_id.unique()\nauction_number = np.random.randint(0, len(auction_list))\nauction_target = auction_list[auction_number]\n\n\n\nprint(f'ID of the target auction is {auction_target}\\n')\n\ndata_auction = data.query(f'lot_id == \"{auction_target}\"')\n\nauction_date = data_auction.index[0].date()\n\norganizer_name = data_auction.organizer_name[0]\norganizer_code = data_auction.organizer_code[0]\norganizer_region = data_auction.organizer_region[0]\n\nobject_cpv2 = data_auction.lot_cpv_2_digs[0]\nobject_cpv4 = data_auction.lot_cpv_4_digs[0]\nobject_cpv8 = data_auction.lot_cpv[0]\n\nparticipants_number = len(data_auction)\n\nwinner_name = data_auction.query('supplier_dummy == 1').participant_name[0]\nwinner_code = data_auction.query('supplier_dummy == 1').participant_code[0]\nwinner_region = data_auction.query('supplier_dummy == 1').participant_region[0]\n\nvalue_initial = data_auction.lot_initial_value[0]\nvalue_final = data_auction.lot_final_value[0]\n\n\n\ndisplay(data_auction)\n\nprint(f'''Target auction was announced {auction_date} by {organizer_name} (Organizer ID {organizer_code}) from the {organizer_region} region. \nOrganizer wanted to procure \"{object_cpv2}\". Object of procurement can be further clarified to \"{object_cpv4}\"  and \"{object_cpv8}\". \nInitial value of the contract determined by the Organizer was UAH {value_initial:,.0f}. In this case \"{data_auction.lot_procur_type[0]}\" procurement procedure was used.\\n\n\n{participants_number} companies apllied to compete for this contract. As a result of an auction, company {winner_name} (ID {winner_code}) from {winner_region} region offered UAH {value_final:,.0f} and became a winner.\\n\n\nThe \"nominal\" savings estimate for the state budget can be calculated by comparing intial and final value of a contract. In this case UAH {np.round(value_initial - value_final, 2):,.0f} of budget money was saved as a result of competition between companies.''')","bf51b0e9":"agregation_column = 'lot_cpv_2_digs'\n\n# dataset were one row corresponds to one procurement\nprocurements_df = data.query('supplier_dummy == 1')\n\n# calculate summary by CPV category\ncpv_df = procurements_df.groupby(agregation_column).agg(Procurement_number=('lot_id', len), \n                                                        Allocated_budget_UAH=('lot_final_value', np.sum),\n                                                        Contract_median_UAH=('lot_final_value', np.median))\n\n# change allocated budget from UAH to million UAH\ncpv_df.loc[:, 'Allocated_budget_mUAH'] = cpv_df.loc[:, 'Allocated_budget_UAH'] \/ 1000000\ncpv_df.drop('Allocated_budget_UAH', axis=1, inplace=True)\n\n# sort by allocated budget\ncpv_df.sort_values('Allocated_budget_mUAH', ascending=False, inplace=True)\n\nprint('Top 5 CPV categories by the ammount of allocated budget:')\ndisplay(cpv_df.head(5))","6e050913":"####### Markets with max allocated budget, number of procurements, median contract\n\n# max values of metrics\nmax_budget = cpv_df.Allocated_budget_mUAH.max()\nmax_procurements = cpv_df.Procurement_number.max()\nmax_median_contract = cpv_df.Contract_median_UAH.max()\n\n# name of markets with max values\ntop_markets_names = {'budget': cpv_df.query(f'Allocated_budget_mUAH == {max_budget}').index[0],\n                     'procurements': cpv_df.query(f'Procurement_number == {max_procurements}').index[0],\n                     'contract': cpv_df.query(f'Contract_median_UAH == {max_median_contract}').index[0]}\n\n# save info about each 'max' market\nmarket_list = []\nfor market in top_markets_names.values():\n    market_list.append((cpv_df.query(f'index == \"{market}\"').Allocated_budget_mUAH[0], \n                        cpv_df.query(f'index == \"{market}\"').Procurement_number[0],\n                        market.split('_')[1]))\n\n\nprint(f'The most frequently procured object is \"{top_markets_names[\"procurements\"]}\".')\nprint(f'The largest allocated budget (sum of all final values of contracts) belongs to \"{top_markets_names[\"budget\"]}\".')\nprint(f'The largest median value of contract is associated with \"{top_markets_names[\"contract\"]}\".')\n\n\n####### Top X markets by allocated budget\nmarkets_number = 3\ntop_budget = list(cpv_df.sort_values('Allocated_budget_mUAH', ascending=False).index[:markets_number])\n    \n# save info about each market\nfor market in top_budget:\n    if market not in top_markets_names.values():\n        market_list.append((cpv_df.query(f'index == \"{market}\"').Allocated_budget_mUAH[0], \n                            cpv_df.query(f'index == \"{market}\"').Procurement_number[0],\n                            market.split('_')[1]))","416ee182":"fig, ax = plt.subplots(1,1,figsize=(9,5))\nscatter = ax.scatter(x = cpv_df.Allocated_budget_mUAH,\n                     y = cpv_df.Procurement_number, \n                     c = cpv_df.Contract_median_UAH\/1000000,\n                     alpha = 0.5)\n\nax.set_xlabel('Sum of contracts, m UAH')\nax.set_ylabel('Number of procurements')\n# ax.set_title('Distribution of procurements by CPV 2 code')\n\nax.grid(True)\nax.legend(*scatter.legend_elements(), title='Median contract, m UAH', loc='lower right')\n\nax.set_yscale('log')\nax.set_xlim(-50000, cpv_df.Allocated_budget_mUAH.max()*1.25)\n\n\nax.axes.get_xaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ',')))\nax.axes.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ',')))\n\n# add key markets names\nfor market in market_list:\n    ax.text(*market)\n\nplt.show()","fd780fef":"print(f\"The total number of Organizers: {data['organizer_code'].nunique():,.0f}\")\nprint(f\"The total number of Participants: {data['participant_code'].nunique():,.0f}\")\n\n# Create the DF with distribution of organizers and participants by year\norg_comp = pd.concat([data.groupby('lot_announce_year').organizer_code.nunique(), # the dynamic of the number of organizers\n                      data.groupby('lot_announce_year').participant_code.nunique()], # the dynamic of the number of companies\n                      axis=1)\n\n# Plot the received distribution\nparticipation_dynamics = org_comp.plot.bar()\nparticipation_dynamics.axes.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ',')))\n\nplt.ylabel('Number of entities')\nplt.xlabel(None)\n\nplt.show()","68de66cb":"plt.figure(figsize=(7,5))\n\n#### Prepare data \n\n# number of procurements per year\nprocurement_per_year = data.groupby(\"lot_announce_year\").agg(Procurement_number = (\"lot_id\", 'nunique'))\n\n# number of unique Participants per each auction\ndf_ave_num_comp = data.groupby([\"lot_id\",\"lot_announce_year\"]).participant_code.nunique().reset_index()\n\n# average number of participants per auction for each year\ndf_ave_num_comp = df_ave_num_comp.groupby(\"lot_announce_year\").participant_code.mean()\n\n\n#### Create plot\n\nplot_lots = procurement_per_year.Procurement_number.plot.line(label='Procurements number', marker='o')\nplot_lots.locator_params(integer=True)\nplot_lots.axes.get_yaxis().set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ',')))\nplt.ylabel('Number of procurements')\n\nplot_participants_average = df_ave_num_comp.plot.line(secondary_y=True, label='Average number of participants (right axis)', marker='o')\nplt.ylabel('Average number of participants per procurement')\n\n# combine legends\nplot_participants_average.xaxis.label.set_visible(False)\nplot_lots.xaxis.label.set_visible(False)\n\nlines, labels = plot_lots.get_legend_handles_labels()\nlines2, labels2 = plot_participants_average.get_legend_handles_labels()\nplot_participants_average.legend(lines + lines2, labels + labels2, loc=2)\n\nplt.show()","4ec31f28":"target_cpv_code = \"03110000-5_Crops, products of market gardening and horticulture\"\ntarget_year = 2015\n\ndf = data.query(f'lot_cpv_4_digs == \"{target_cpv_code}\" & lot_announce_year == \"{target_year}\"')\ndf = df.sort_values('participant_code')\ndf.loc[:, 'contracts_value'] = np.where(df.supplier_dummy == 1, df.lot_final_value, 0)","de815946":"def create_summary(df):\n    '''\n    Returns pivot table were each row corresponds to one Participant.\n    For each Participant table provides participant_name, total value of won contracts (contracts_value) and \n    number of won contracts (contracts_number).\n    In addition, function creates variables necessary for the graph visualization - nodes label, size and color.\n    '''\n    \n    #### Create summary\n    \n    df_summary = df.groupby('participant_code').agg(participant_name = ('participant_name', 'first'),\n                                                contracts_value = ('contracts_value', 'sum'),\n                                                contracts_number = ('supplier_dummy', 'sum'))\n\n\n    #### Variables necessary for the visialization\n\n    # add IDs of the top 5 companies by the total value of contracts to the graph\n    top_5_companies = df_summary.sort_values('contracts_value', ascending=False)['participant_name'].values[:5]\n    df_summary.loc[:, 'label'] = np.where(df_summary.participant_name.isin(top_5_companies), df_summary.index, '')\n\n    # assign size categories\n    # if company won less than 5% of total value of contracts, its category is 100\n    # if its share is between 5% and 10% - 200; between 10% and 15% - 300, etc.\n    df_summary.loc[:, 'contracts_share'] = df_summary.contracts_value \/ df_summary.contracts_value.sum() * 100\n    df_summary.loc[:, 'size_category'] = (df_summary.contracts_share \/\/ 5 + 1) * 100\n    df_summary.loc[:, 'size_category'] = np.where(df_summary.contracts_number==0, 30, df_summary.size_category)\n\n    # assign red color is company did not won any contracts, else assign blue\n    df_summary.loc[:, 'color'] = np.where(df_summary.contracts_number == 0, 'r', 'b')\n    \n    return df_summary","b020e7b7":"df_summary = create_summary(df)\ntop_10_companies_2015 = df_summary.sort_values('contracts_value', ascending=False)[:10]\n\ncontracts_max_number = df_summary['contracts_number'].max()\ncontracts_max_number_name = df_summary.query(f'contracts_number == \"{contracts_max_number}\"')['participant_name'].values\n\ncontracts_max_value = df_summary['contracts_value'].max()\ncontracts_max_value_name = df_summary.query(f'contracts_value == \"{contracts_max_value}\"')['participant_name'].values\n\n\nprint('Summary table for the Partiticpants (head):')\ndisplay(df_summary.head(8))\n\nprint(f'''In {target_year} {len(df_summary)} companies competed for \"{target_cpv_code}\" contracts.\nDuring the year there were {df.lot_id.nunique()} auctions with total value of contracts equal to UAH {df_summary.contracts_value.sum():,.0f}.\nThe company that won the largest number of auctions was \"{'\", \"'.join(contracts_max_number_name)}\" ({contracts_max_number} contracts).\nThe company with the largest total value of contracts is \"{'\", \"'.join(contracts_max_value_name)}\" (UAH {contracts_max_value:,.0f}).\n{sum(df_summary.contracts_number==0)} companies participated but did not won any contracts.''')","cfa33263":"# Function  for creating the network\ndef making_graph_1_mode(df):\n    \"\"\"The function takes the df and creates the 1-mode network of tender participants.\n       Node - tender participant, edge - participation in tender organized by particular public entity.\n       For example, the two companies are connected if they both particpated in tender organized by one public entity\"\"\"\n    \n    # Create the table where columns are public entities codes (organizer_code) and index - tender participants codes (participant_code)\n    df = df.pivot_table(values = \"lot_final_value\", index=\"participant_code\", columns=\"organizer_code\", aggfunc=\"count\").fillna(0)\n    \n    # Dot product that 'connects' all the participants\n    df = df.dot(df.T)\n    \n    # Simplification of the received matrix\n    df = df.astype(int)\n    np.fill_diagonal(df.values, 0)\n    \n    # Create the graph from the received adjacency matrix\n    G = nx.from_pandas_adjacency(df)\n    \n    return G","572da89c":"G = making_graph_1_mode(df)\n\n# Let's make some calculation based on the graph created:\nnum_nodes = G.number_of_nodes()\nprint(\"The number of nodes (companies)) is: \", num_nodes)\n\nnum_edges = G.number_of_edges()\nprint(\"The number of edges (participations in the same auction) is: \", num_edges)","f98fe9a8":"plt.figure(figsize=(12,6)) \nnx.draw(G,\n        labels = df_summary.label,\n        node_size = df_summary.size_category,\n        node_color = df_summary.color,\n        pos = nx.nx_pydot.graphviz_layout(G),\n        font_size = 14, \n        alpha = 0.8)\n\nplt.title(f'\"{target_cpv_code}\" auctions in {target_year}', fontsize=18)\nplt.show()","45646696":"# Select the data we need from the initial dataset\ntarget_year = 2019\n\ndf = data.query(f'lot_cpv_4_digs == \"{target_cpv_code}\" & lot_announce_year == \"{target_year}\"')\ndf = df.sort_values('participant_code')\ndf.loc[:, 'contracts_value'] = np.where(df.supplier_dummy == 1, df.lot_final_value, 0)\n\n# summary tables\ndf_summary = create_summary(df)\ntop_10_companies_2019 = df_summary.sort_values('contracts_value', ascending=False)[:10]\n\n# Create the graph from the data selected\nG = making_graph_1_mode(df)\n\nnum_nodes = G.number_of_nodes()\nprint(\"The number of nodes (companies)) is: \", num_nodes)\n\nnum_edges = G.number_of_edges()\nprint(\"The number of edges (participations in the same auction) is: \", num_edges)","be84b298":"plt.figure(figsize=(12,6)) \nnx.draw(G,\n        labels = df_summary.label,\n        node_size = df_summary.size_category,\n        node_color = df_summary.color,\n        pos = nx.nx_pydot.graphviz_layout(G),\n        font_size = 14, \n        alpha = 0.8)\n\nplt.title(f'\"{target_cpv_code}\" auctions in {target_year}', fontsize=18)\nplt.show()","06d3422f":"top_10_companies_2015 = top_10_companies_2015[['participant_name', 'contracts_value', 'contracts_number', 'contracts_share']]\ntop_10_companies_2015.columns = ['participant_name_2015', 'contracts_value_2015', 'contracts_number_2015', 'contracts_share_2015']\n\ntop_10_companies_2019 = top_10_companies_2019[['participant_name', 'contracts_value', 'contracts_number', 'contracts_share']]\ntop_10_companies_2019.columns = ['participant_name_2019', 'contracts_value_2019', 'contracts_number_2019', 'contracts_share_2019']\n\n\ntop_10_companies = pd.merge(top_10_companies_2015, top_10_companies_2019, right_index=True, left_index=True, how='outer')\n\ntop_10_companies.loc[:, 'participant_name'] = np.where(top_10_companies.participant_name_2015.isna(),\n                                                       top_10_companies.participant_name_2019,\n                                                       top_10_companies.participant_name_2015)\n\ntop_10_companies = top_10_companies[['participant_name',\n                                     'contracts_value_2015', 'contracts_value_2019',\n                                     'contracts_number_2015', 'contracts_number_2019',\n                                     'contracts_share_2015', 'contracts_share_2019']]\n\ntop_10_companies_micolumns = pd.MultiIndex.from_tuples([('participant_name', ''), \n                                                        ('contracts_value', '2015'), ('contracts_value', '2019'),\n                                                        ('contracts_number', '2015'), ('contracts_number', '2019'),\n                                                        ('contracts_share', '2015'), ('contracts_share', '2019'),],\n                                                        names=['variable', 'year'])\n\ntop_10_companies.columns = top_10_companies_micolumns\ntop_10_companies.fillna('', inplace=True)\n\ndisplay(top_10_companies)","f331865a":"def making_figure_1_mode(cpv_code):\n    years_list = data[\"lot_announce_year\"].unique().tolist()\n    \n    fig, axes = plt.subplots(nrows=6, ncols=1, figsize = (15, 25))\n    \n    # Set super title\n    fig.suptitle(f\"CPV code: {cpv_code}\", size=18)\n\n    for i, ax in enumerate(axes.flatten()):\n        \n        if i >= len(years_list):\n            ax.axis('off')\n        else:\n            year = years_list[i]\n            \n            # Set title\n            ax.set_title(year, size=14, loc=\"left\")\n            \n            # Select appropriate dDF\n            df = data.query(f'lot_cpv_4_digs == \"{cpv_code}\" and lot_announce_year == \"{year}\"')\n            df = df.sort_values('participant_code')\n            df.loc[:, 'contracts_value'] = np.where(df.supplier_dummy == 1, df.lot_final_value, 0)\n            \n            # Get summary per Participant\n            df_summary = df_summary = create_summary(df)\n            \n            # Create Graph from DF\n            G = making_graph_1_mode(df)\n            \n            # Plot graph\n            nx.draw(G,\n                    labels = df_summary.label,\n                    node_size = df_summary.size_category,\n                    node_color = df_summary.color,\n                    pos=nx.nx_pydot.graphviz_layout(G),\n                    font_size = 14, \n                    alpha = 0.3,\n                    font_weight=\"bold\",\n                    ax=ax)","31d0456d":"# to see details open image in a separate tab\nmaking_figure_1_mode(target_cpv_code)","fd60f386":"### General description of variables\n#### Distribution of procurements by CPV code\nLets explore which types of goods\/sercices\/works account for the majority of procurements in terms of allocated money and number of procurements. We will make analysis at the level of 2 digits CPV code, but it can be easilly made more detailed by using 4 digits or 8 digits CPV instead.","dd4e4f0d":"### Summary of a selected subset of auctions","b56b2741":"#### Lets compare market leaders (top 10 companies) in 2015 and 2019","221567d2":"[1] In the case of competitive procurement, the Supplier - company that will sign a contract is determined via online auction. Procurement requirements (specification of goods\/services\/works) are published before the auction and any company can apply online by downloading neccesary documents and become a Participant. During the auction Participants are competing by lowering price that they ask for fullfiling the contract. After three rounds of auction Participant that offered the lowest price is announced a winner. After this Organizer checks the documents submitted by the winner before the auction. If everything is alright, Organizer signs the contract with the winner and this company becomes a Supplier. If there are problems with documents, Organizer disqualifies such company and proceeds to check the documents of company that offered second lowest price. This process is continued until the Supplier is determined or there are no more non-disqualified Participants left.  \n**In the dataset unique procurment identifier is variable lot_id.**  \n  \n[2] Organizer can by a government body (e.g. department of a Ministry or Agency), a school, hospital, police department of a city, public company, city council, etc. **The unique identifier of an Organizer in the dataset is variable organizer_code.** You can use variable organizer_name to better understand who is a particular Organizer. All Organizers names are in Ukrainian, but with with something like Google Translate you will be able to deal with it.  \n  \n[3] **Participants are uniquely identified by variable participant_code.** Variable participant_name can be used by investigators to gather additional information about company of interest. Participant that became a Supplier as a result of an auction is identified with supplier_dummy variable (1 if Participant became a supplier).  \n  \n[4] Initial value of public procurement auction corresponds to the reserve price from the auction theory. It is the highest acceptable value of contract that is published by Organizer as a part of procurement announcement. During the auction, the first bid of a Participant should be lower or equal to the Initial value.  \n  \nFinal value is a lowest value of a contract offered as a result of an auction.\n  \n[5] According to Ukrainian Law there are different types of competitive public procurements. All types determine the winner using the same type of three-round online auction.  \n\n**Below Threshold** procurements are used to procure small amounts of goods\/services\/works. Their initial value (starting price of auction) should be no more than UAH 200 K (approximately USD 7.5 K as of June 2020) for goods\/services and UAH 1.5 M (USD 56.6 K) for works.\nBelow Threshold procements are less strictly regulated than other types. Most importantly, if only one company will apply to participate in an acution, it will be automatically announced a winner and Orgnizer will proceed to check its documents. All other types of competitive procurements require at least two Participants.\n\n**Above Threshold UA** prcedure is a \"default\" competitive procument procedure. It is applied for goods\/services with initial value of contract above UAH 200 K and works above UAH 1.5 M. At least two auction Participants are required. If this condition is not satisfied, procurement is cancelled and announced again.\n\n**Above Threshold UA Defense** is a procedure used for defence procurements. Because this types of contracts are deamed especially important and often need to be signed quickly, Participants that offered the lowest price during the auction have a right to correct minor mistakes in submitted documents if such mistakes were found by the Organizer. In the case of other types of procurement, Participant is immedeatly disqualified if any mistake in documents is detected.\n\n**Above Threshold EU** - is procurement procedure for \"large\" procurements. It is applied if initial value of a contract to procure goods\/services is be above EUR 133 K and a contract to procure works is above EUR 5.15 M. In contrast to other types, documents of all Participants are checked before the auction and only elegible are allowed to participate.\n\nImportantly, Law of Ukraine \"On Public Procurement\" was changed in 2020, so currently competitive public procurements work slightly differently. However, the provided description is true for the 2015-2019 procurements in the dataset.\n\n[6] CPV stands for Common Procurement Vocabulary it is a methodology developed by European Union to classify objects of public procumerements. The 2 digits CPV code is the highest level of classification, the 4 digits and 8 digits CPV codes provide further clarification of 2 digits CPV category (e.g., 09 stands for Petroleum products, fuel, electricity and other sources of energy; 0910 Fuels; 09111210 Hard coal).\n","63de9d95":"Now we are ready to visualize the graph:","13e2c7c5":"#### Initially, we will look at the market structure in 2015\nCreate the graph from the data selected","66ffc750":"## Data exploration","58e80601":"From these numbers we see that there are significantly more nodes (companies) on the network. Lets visuallise the graph:","59807f44":"During the last three years the number of lots announced slightly decreased, while the average number of participants per auction increased.  \nTaking into account relatively stable number of Participants and Organizers, it can be caused by the higher participation rate per company (i.e. each company participates in more tenders).\n\n**Thus, there are more connections. And these connections we are going to look at.**","49405bc9":"Lets visualize CPV distribution:","33f2b266":"Only one company was among top 10 companies by the total value of contracts in both 2015 and 2019 - \u041f\u0420\u0418\u0412\u0410\u0422\u041d\u0415 \u0410\u041a\u0426\u0406\u041e\u041d\u0415\u0420\u041d\u0415 \u0422\u041e\u0412\u0410\u0420\u0418\u0421\u0422\u0412\u041e \u00ab\u0412\u0415\u0413\u0410\u00bb (ID 23503666). Its share in the total value of contracts decreased from 19.6% to 9.0%. However, value of contracts that the company won increased from UAH 209,033 to UAH 4,490,815.","a6672f4e":"### Network analysis\nOne-mode network implies that all the units of the network have common type. In the case of our data, it can be the network of public entities (tender Organizers), companies (Participants of the procurements), winners of the procurements etc.\n\n**Let's create the network of Participants**:\n- **Node**: Participant (company)\n- **Edge**: the number of cases when two Participants competed in the same auction\n- **Node size**: the value of contracts that Participant won\n- **Node color**: if Participant did not won any contracts it is denoted with red color. Participant that won at least one contract is denoted with blue color.","448f9b65":"### Example of one auction\nLets select a random auction using **lot_id** as an auction identifier","1e3a3dfc":"As can be seen, the number of Organizers and the number of Participants stabilized over last three years (the number of companies is 3 times larger).  \n\n#### Number of tenders and the average number of participants per one tender auction.","a23e6725":"# Competitive procurements - all public procurement auctions and companies participating in them","87541b25":"## Load data","ab892ce7":"### Select a subset with necessary auctions","286d7655":"## Description of one market - Network analysis\n\n*As an example, we will look at market of agriculture goods (the one, defined by the CPV classification \"03110000-5_Crops, products of market gardening and horticulture\")*","a6dbe2cc":"#### Organizers and Participants dynamics","8f55bc68":"#### Let's look at the market's evolution during all the years (2015-2019)\n\nFor the task we will create the function that visualize plots graph for each year in particular market:","61aecb6b":"As was mentioned in the **\"Variables definition\"** section, for small procurements (\"Below Threshold\" procurement type) it is possible to have an auction with only one participant. That is why there are some nodes without any connections - it means that they participated in the auction and met no competitors.\n\nAs can be seen, out of 5 companies with the largest total value of contracts, two (participant_code 3012216915 and 39823999) participated in the \"Below Threshold\" auctions without a competition. However, keep in mind that 2015 was the first year of the ProZorro. As a result, there were relatively small number of procurements and participants.\n\nAnother interesting element of the graph is network of 6 companies in a top right corner. As can be seen, out of those six companies only one was able to secure a contract.\n\n#### Lets build graph for 2019","d23c14b5":"The most important objects of procurement:","ec332d1f":"### Variables definition","370b4fd3":"As you can see, the number of nodes (Participants) and connections between them increased considerably."}}