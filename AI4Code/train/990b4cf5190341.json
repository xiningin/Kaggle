{"cell_type":{"8c15fae7":"code","6fcfef80":"code","327103c2":"code","1879489f":"code","fd81a1a1":"code","61e561d2":"code","a3899325":"code","19312259":"code","8ebf1ba1":"code","4cf2e1be":"code","8ae90cd4":"code","2446f441":"code","22699900":"code","1a52acfe":"code","e3260f04":"code","7a38d097":"code","2447f264":"code","b2382f66":"code","285c4eac":"markdown","ddc29ee7":"markdown","5460c8be":"markdown","0fd801c6":"markdown","c783c58b":"markdown","724906f4":"markdown","a7946b80":"markdown","191915f2":"markdown"},"source":{"8c15fae7":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","6fcfef80":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nprint(train.shape)\ntrain.head()","327103c2":"test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(test.shape)\ntest.head()","1879489f":"X_train = train.iloc[:, 1:].values.astype('float32')\ny_train = train.iloc[:, 0].values.astype('float32')\nX_test = test.values.astype('float32')","fd81a1a1":"X_train","61e561d2":"y_train","a3899325":"#expand 1 more dimention as 1 for colour channel gray\nX_train = X_train.reshape(X_train.shape[0], 28, 28,1)\nX_train.shape","19312259":"X_test = X_test.reshape(X_test.shape[0], 28, 28,1)\nX_test.shape","8ebf1ba1":"mean_px = X_train.mean().astype(np.float32)\nstd_px = X_train.std().astype(np.float32)\n\ndef standardize(x): \n    return (x-mean_px)\/std_px","4cf2e1be":"y_train = tf.one_hot(y_train, depth=10).numpy()","8ae90cd4":"from keras.models import  Sequential\nfrom keras.layers.core import  Lambda , Dense, Flatten\nfrom keras.layers import Convolution2D, MaxPooling2D\n\ndef get_cnn_model():\n    model = Sequential([\n        Lambda(standardize, input_shape=(28,28,1)),\n        Convolution2D(32,(3,3), activation='relu'),\n        Convolution2D(32,(3,3), activation='relu'),\n        MaxPooling2D(),\n        Convolution2D(64,(3,3), activation='relu'),\n        Convolution2D(64,(3,3), activation='relu'),\n        MaxPooling2D(),\n        Flatten(),\n        Dense(512, activation='relu'),\n        Dense(10, activation='softmax')\n        ])\n    model.compile(optimizer='adam', loss='categorical_crossentropy',\n                  metrics=['accuracy'])\n    return model","2446f441":"model= get_cnn_model()\nmodel.optimizer.lr=0.01","22699900":"train_epochs = 10\nbatch_size = 30\nhistory = model.fit(X_train, y_train, validation_split=0.2, batch_size=batch_size, epochs=train_epochs)","1a52acfe":"def show_train_history(train_history, train_metric, val_metric):\n    plt.plot(train_history.history[train_metric])\n    plt.plot(train_history.history[val_metric])\n    plt.title('Train History')\n    plt.ylabel(train_metric)\n    plt.xlabel('Epoch')\n    plt.legend(['train', 'validation'], loc='upper left')\n    plt.show()","e3260f04":"show_train_history(history, 'loss', 'val_loss')","7a38d097":"show_train_history(history, 'accuracy', 'val_accuracy')","2447f264":"predictions = model.predict(X_test)\ntest_predictions = np.argmax(predictions, axis=-1)\ntest_predictions","b2382f66":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(test_predictions)+1)),\n                         \"Label\": test_predictions})\nsubmissions.to_csv(\"DR.csv\", index=False, header=True)","285c4eac":"# Preprocessing the digit images","ddc29ee7":"# Submitting Predictions to Kaggle","5460c8be":"- ## Feature Standardization","0fd801c6":"# Convolutional Neural Network","c783c58b":"- ## One Hot encoding of labels.","724906f4":"# Metrics Visualization","a7946b80":"# Import all required libraries","191915f2":"# Load Train and Test data"}}