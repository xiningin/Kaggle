{"cell_type":{"c8a62c01":"code","5f8b2ce1":"code","51d68028":"code","ce464be7":"code","a7af3062":"code","bce67163":"code","8e5b4b8d":"code","c65f47d4":"code","e20492af":"code","86b39eb7":"code","7db14ee8":"code","042c9420":"code","a57c1484":"markdown"},"source":{"c8a62c01":"import pandas as pd\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras import optimizers\nfrom keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\nfrom keras.applications import ResNet50","5f8b2ce1":"base_model= ResNet50(include_top=False, weights=\"imagenet\", input_shape=(224,224,3))","51d68028":"model= Sequential()\nmodel.add(base_model)\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\n#model.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.40))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.40))\nmodel.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(2, activation='softmax'))","ce464be7":"from keras import optimizers\nfrom keras_preprocessing.image import ImageDataGenerator\ntrain_generator = ImageDataGenerator(rescale = 1.\/255,\n                                     rotation_range=10,  \n                                     zoom_range = 0.1, \n                                     width_shift_range=0.1,  height_shift_range=0.1) \ntest_generator = ImageDataGenerator(rescale = 1.\/255)","a7af3062":"training_set = train_generator.flow_from_directory('..\/input\/data\/train',\n                                                 target_size = (224,224),\n                                                 batch_size = 64,\n                                                 class_mode = 'categorical')\n\ntest_set = test_generator.flow_from_directory('..\/input\/data\/test',\n                                            target_size = (224, 224),\n                                            batch_size = 64,\n                                            class_mode = 'categorical',\n                                            shuffle=False)\n","bce67163":"model.compile(optimizer=optimizers.adam(lr=0.0001),loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","8e5b4b8d":"from keras.callbacks import ReduceLROnPlateau\nlearn_control = ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, factor=.5, min_lr=0.0001)","c65f47d4":"model.fit_generator(generator=training_set,\n                            steps_per_epoch=training_set.samples\/\/training_set.batch_size,\n                            validation_data=test_set,\n                            verbose=1,\n                            validation_steps=test_set.samples\/\/test_set.batch_size,\n                            epochs=27,callbacks=[learn_control])","e20492af":"test_set.reset()\npredictions = model.predict_generator(test_set, steps=test_set.samples\/test_set.batch_size,verbose=1)\ny_pred= np.argmax(predictions, axis=1)\n\nprint(y_pred)","86b39eb7":"y_test=np.array([])\nfor i in range(360):\n    y_test=np.append(y_test,0)\nfor i in range(300):\n    y_test=np.append(y_test,1)","7db14ee8":"from sklearn.metrics import confusion_matrix \ncm= confusion_matrix(y_test,y_pred)","042c9420":"print(cm)","a57c1484":"Below we create a numpy array that will act like lables. The first 360 elements in the test set are those of benign. So, a target value 'zero' has been assigned to them. The remaining 300 are malignant. So we assign 'one' to them. This numpy array will thus consist of the target values of the test set(actual values) so that these actual values can be compared with the predicted values in order to generate the confusion matrix."}}