{"cell_type":{"d4b45a62":"code","91569905":"code","ef3e050b":"code","3c194ee2":"code","d5aa4580":"code","b3442579":"code","55f573d8":"code","9061038e":"markdown","a68f81a5":"markdown"},"source":{"d4b45a62":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport pandas as pd\nimport numpy as np\nimport random\n#from tqdm import tqdm\nfrom tqdm.notebook import tqdm\nimport gc\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import f1_score\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_rows', 500)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","91569905":"# configurations and main hyperparammeters\nEPOCHS = 150\nNNBATCHSIZE = 16\nGROUP_BATCH_SIZE = 4000\nSEED = 321\nLR = 0.001\nSPLITS = 5\n\noutdir = 'wavenet_models'\nflip = False\nnoise = False\n\n\nif not os.path.exists(outdir):\n    os.makedirs(outdir)\n\n\n\ndef seed_everything(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    tf.random.set_seed(seed)","ef3e050b":"# read data\ndef read_data():\n    train = pd.read_csv('\/kaggle\/input\/clean-kalman\/train_clean_kalman.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\n    test  = pd.read_csv('\/kaggle\/input\/clean-kalman\/test_clean_kalman.csv', dtype={'time': np.float32, 'signal': np.float32})\n    sub  = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv', dtype={'time': np.float32})\n    return train, test, sub\n\n# create batches of 4000 observations\ndef batching(df, batch_size):\n    #print(df)\n    df['group'] = df.groupby(df.index\/\/batch_size, sort=False)['signal'].agg(['ngroup']).values\n    df['group'] = df['group'].astype(np.uint16)\n    return df\n\n# normalize the data (standard scaler). We can also try other scalers for a better score!\ndef normalize(train, test):\n    train_input_mean = train.signal.mean()\n    train_input_sigma = train.signal.std()\n    train['signal'] = (train.signal - train_input_mean) \/ train_input_sigma\n    test['signal'] = (test.signal - train_input_mean) \/ train_input_sigma\n    return train, test\n\n# get lead and lags features\ndef lag_with_pct_change(df, windows):\n    for window in windows:    \n        df['signal_shift_pos_' + str(window)] = df.groupby('group')['signal'].shift(window).fillna(0)\n        df['signal_shift_neg_' + str(window)] = df.groupby('group')['signal'].shift(-1 * window).fillna(0)\n    return df\n\n# main module to run feature engineering. Here you may want to try and add other features and check if your score imporves :).\ndef run_feat_engineering(df, batch_size):\n    # create batches\n    df = batching(df, batch_size = batch_size)\n    # create leads and lags (1, 2, 3 making them 6 features)\n    df = lag_with_pct_change(df, [1, 2, 3])\n    # create signal ** 2 (this is the new feature)\n    df['signal_2'] = df['signal'] ** 2\n    return df\n\n# fillna with the mean and select features for training\ndef feature_selection(train, test):\n    features = [col for col in train.columns if col not in ['index', 'group', 'open_channels', 'time']]\n    train = train.replace([np.inf, -np.inf], np.nan)\n    test = test.replace([np.inf, -np.inf], np.nan)\n    for feature in features:\n        feature_mean = pd.concat([train[feature], test[feature]], axis = 0).mean()\n        train[feature] = train[feature].fillna(feature_mean)\n        test[feature] = test[feature].fillna(feature_mean)\n    return train, test, features\n\n\ndef split(GROUP_BATCH_SIZE=4000, SPLITS=5):\n    print('Reading Data Started...')\n    train, test, sample_submission = read_data()\n    train, test = normalize(train, test)\n    print('Reading and Normalizing Data Completed')\n    print('Creating Features')\n    print('Feature Engineering Started...')\n    train = run_feat_engineering(train, batch_size=GROUP_BATCH_SIZE)\n    test = run_feat_engineering(test, batch_size=GROUP_BATCH_SIZE)\n    train, test, features = feature_selection(train, test)\n    print(train.head())\n    print('Feature Engineering Completed...')\n\n    target = ['open_channels']\n    group = train['group']\n    kf = GroupKFold(n_splits=SPLITS)\n    splits = [x for x in kf.split(train, train[target], group)]\n    new_splits = []\n    for sp in splits:\n        new_split = []\n        new_split.append(np.unique(group[sp[0]]))\n        new_split.append(np.unique(group[sp[1]]))\n        new_split.append(sp[1])\n        new_splits.append(new_split)\n    target_cols = ['open_channels']\n    print(train.head(), train.shape)\n    train_tr = np.array(list(train.groupby('group').apply(lambda x: x[target_cols].values))).astype(np.float32)\n    train = np.array(list(train.groupby('group').apply(lambda x: x[features].values)))\n    test = np.array(list(test.groupby('group').apply(lambda x: x[features].values)))\n    print(train.shape, test.shape, train_tr.shape)\n    return train, test, train_tr, new_splits\n","3c194ee2":"# wavenet \n# from https:\/\/www.kaggle.com\/hanjoonchoe\/wavenet-lstm-pytorch-ignite-ver\nclass Wave_Block(nn.Module):\n\n    def __init__(self, in_channels, out_channels, dilation_rates, kernel_size):\n        super(Wave_Block, self).__init__()\n        self.num_rates = dilation_rates\n        self.convs = nn.ModuleList()\n        self.filter_convs = nn.ModuleList()\n        self.gate_convs = nn.ModuleList()\n\n        self.convs.append(nn.Conv1d(in_channels, out_channels, kernel_size=1))\n        dilation_rates = [2 ** i for i in range(dilation_rates)]\n        for dilation_rate in dilation_rates:\n            self.filter_convs.append(\n                nn.Conv1d(out_channels, out_channels, kernel_size=kernel_size, padding=int((dilation_rate*(kernel_size-1))\/2), dilation=dilation_rate))\n            self.gate_convs.append(\n                nn.Conv1d(out_channels, out_channels, kernel_size=kernel_size, padding=int((dilation_rate*(kernel_size-1))\/2), dilation=dilation_rate))\n            self.convs.append(nn.Conv1d(out_channels, out_channels, kernel_size=1))\n\n    def forward(self, x):\n        x = self.convs[0](x)\n        res = x\n        for i in range(self.num_rates):\n            x = torch.tanh(self.filter_convs[i](x)) * torch.sigmoid(self.gate_convs[i](x))\n            x = self.convs[i + 1](x)\n            res = res + x\n        return res\n# detail \nclass Classifier(nn.Module):\n    def __init__(self, inch=8, kernel_size=3):\n        super().__init__()\n        #self.LSTM = nn.GRU(input_size=input_size, hidden_size=64, num_layers=2, batch_first=True, bidirectional=True)\n        self.wave_block1 = Wave_Block(inch, 16, 12, kernel_size)\n        self.wave_block2 = Wave_Block(16, 32, 8, kernel_size)\n        self.wave_block3 = Wave_Block(32, 64, 4, kernel_size)\n        self.wave_block4 = Wave_Block(64, 128, 1, kernel_size)\n        self.fc = nn.Linear(128, 11)\n\n    def forward(self, x):\n        x = x.permute(0, 2, 1)\n\n        x = self.wave_block1(x)\n        x = self.wave_block2(x)\n        x = self.wave_block3(x)\n\n        x = self.wave_block4(x)\n        x = x.permute(0, 2, 1)\n        #x, _ = self.LSTM(x)\n        x = self.fc(x)\n        return x\n\n    \nclass EarlyStopping:\n    def __init__(self, patience=5, delta=0, checkpoint_path='checkpoint.pt', is_maximize=True):\n        self.patience, self.delta, self.checkpoint_path = patience, delta, checkpoint_path\n        self.counter, self.best_score = 0, None\n        self.is_maximize = is_maximize\n\n\n    def load_best_weights(self, model):\n        model.load_state_dict(torch.load(self.checkpoint_path))\n\n    def __call__(self, score, model):\n        if self.best_score is None or \\\n                (score > self.best_score + self.delta if self.is_maximize else score < self.best_score - self.delta):\n            torch.save(model.state_dict(), self.checkpoint_path)\n            self.best_score, self.counter = score, 0\n            return 1\n        else:\n            self.counter += 1\n            if self.counter >= self.patience:\n                return 2\n        return 0\n","d5aa4580":"from torch.utils.data import Dataset, DataLoader\nclass IronDataset(Dataset):\n    def __init__(self, data, labels, training=True, transform=None, seq_len=5000, flip=0.5, noise_level=0, class_split=0.0):\n        self.data = data\n        self.labels = labels\n        self.transform = transform\n        self.training = training\n        self.flip = flip\n        self.noise_level = noise_level\n        self.class_split = class_split\n        self.seq_len = seq_len\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        if torch.is_tensor(idx):\n            idx = idx.tolist()\n\n        data = self.data[idx]\n        labels = self.labels[idx]\n\n        return [data.astype(np.float32), labels.astype(int)]\n","b3442579":"train, test, train_tr, new_splits = split()","55f573d8":"test_y = np.zeros([int(2000000\/GROUP_BATCH_SIZE), GROUP_BATCH_SIZE, 1])\ntest_dataset = IronDataset(test, test_y, flip=False)\ntest_dataloader = DataLoader(test_dataset, NNBATCHSIZE, shuffle=False, num_workers=8, pin_memory=True)\ntest_preds_all = np.zeros((2000000, 11))\n\n\noof_score = []\nfor index, (train_index, val_index, _) in enumerate(new_splits[0:], start=0):\n    print(\"Fold : {}\".format(index))\n    train_dataset = IronDataset(train[train_index], train_tr[train_index], seq_len=GROUP_BATCH_SIZE, flip=flip, noise_level=noise)\n    train_dataloader = DataLoader(train_dataset, NNBATCHSIZE, shuffle=True, num_workers=8, pin_memory=True)\n\n    valid_dataset = IronDataset(train[val_index], train_tr[val_index], seq_len=GROUP_BATCH_SIZE, flip=False)\n    valid_dataloader = DataLoader(valid_dataset, NNBATCHSIZE, shuffle=False, num_workers=4, pin_memory=True)\n\n    it = 0\n    model = Classifier()\n    model = model.cuda()\n\n    early_stopping = EarlyStopping(patience=40, is_maximize=True,\n                                   checkpoint_path=os.path.join(outdir, \"gru_clean_checkpoint_fold_{}_iter_{}.pt\".format(index,\n                                                                                                             it)))\n\n    weight = None#cal_weights()\n    criterion = nn.CrossEntropyLoss(weight=weight)\n    optimizer = torch.optim.Adam(model.parameters(), lr=LR)\n\n\n    schedular = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='max', patience=3, factor=0.2)\n    avg_train_losses, avg_valid_losses = [], []\n\n\n    for epoch in range(EPOCHS):\n        print('**********************************')\n        print(\"Folder : {} Epoch : {}\".format(index, epoch))\n        print(\"Curr learning_rate: {:0.9f}\".format(optimizer.param_groups[0]['lr']))\n        train_losses, valid_losses = [], []\n        tr_loss_cls_item, val_loss_cls_item = [], []\n\n        model.train()  # prep model for training\n        train_preds, train_true = torch.Tensor([]).cuda(), torch.LongTensor([]).cuda()#.to(device)\n\n        for x, y in tqdm(train_dataloader):\n            x = x.cuda()\n            y = y.cuda()\n\n            optimizer.zero_grad()\n            predictions = model(x)\n\n            predictions_ = predictions.view(-1, predictions.shape[-1])\n            y_ = y.view(-1)\n\n            loss = criterion(predictions_, y_)\n\n            # backward pass: compute gradient of the loss with respect to model parameters\n            loss.backward()\n            # perform a single optimization step (parameter update)\n            optimizer.step()\n            #schedular.step()\n            # record training lossa\n            train_losses.append(loss.item())\n            train_true = torch.cat([train_true, y_], 0)\n            train_preds = torch.cat([train_preds, predictions_], 0)\n\n        model.eval()  # prep model for evaluation\n        val_preds, val_true = torch.Tensor([]).cuda(), torch.LongTensor([]).cuda()\n        print('EVALUATION')\n        with torch.no_grad():\n            for x, y in tqdm(valid_dataloader):\n                x = x.cuda()#.to(device)\n                y = y.cuda()#..to(device)\n\n                predictions = model(x)\n                predictions_ = predictions.view(-1, predictions.shape[-1])\n                y_ = y.view(-1)\n\n                loss = criterion(predictions_, y_)\n\n                valid_losses.append(loss.item())\n\n\n                val_true = torch.cat([val_true, y_], 0)\n                val_preds = torch.cat([val_preds, predictions_], 0)\n\n        # calculate average loss over an epoch\n        train_loss = np.average(train_losses)\n        valid_loss = np.average(valid_losses)\n        avg_train_losses.append(train_loss)\n        avg_valid_losses.append(valid_loss)\n        print(\"train_loss: {:0.6f}, valid_loss: {:0.6f}\".format(train_loss, valid_loss))\n\n        train_score = f1_score(train_true.cpu().detach().numpy(), train_preds.cpu().detach().numpy().argmax(1),\n                               labels=list(range(11)), average='macro')\n\n        val_score = f1_score(val_true.cpu().detach().numpy(), val_preds.cpu().detach().numpy().argmax(1),\n                             labels=list(range(11)), average='macro')\n\n        schedular.step(val_score)\n        print(\"train_f1: {:0.6f}, valid_f1: {:0.6f}\".format(train_score, val_score))\n        res = early_stopping(val_score, model)\n        #print('fres:', res)\n        if  res == 2:\n            print(\"Early Stopping\")\n            print('folder %d global best val max f1 model score %f' % (index, early_stopping.best_score))\n            break\n        elif res == 1:\n            print('save folder %d global val max f1 model score %f' % (index, val_score))\n    print('Folder {} finally best global max f1 score is {}'.format(index, early_stopping.best_score))\n    oof_score.append(round(early_stopping.best_score, 6))\n    \n    model.eval()\n    pred_list = []\n    with torch.no_grad():\n        for x, y in tqdm(test_dataloader):\n            x = x.cuda()\n            y = y.cuda()\n\n            predictions = model(x)\n            predictions_ = predictions.view(-1, predictions.shape[-1]) # shape [128, 4000, 11]\n            #print(predictions.shape, F.softmax(predictions_, dim=1).cpu().numpy().shape)\n            pred_list.append(F.softmax(predictions_, dim=1).cpu().numpy()) # shape (512000, 11)\n            #a = input()\n        test_preds = np.vstack(pred_list) # shape [2000000, 11]\n        test_preds_all += test_preds\nprint('all folder score is:%s'%str(oof_score))\nprint('OOF mean score is: %f'% (sum(oof_score)\/len(oof_score)))\nprint('Generate submission.............')\nsubmission_csv_path = '\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv'\nss = pd.read_csv(submission_csv_path, dtype={'time': str})\ntest_preds_all = test_preds_all \/ np.sum(test_preds_all, axis=1)[:, None]\ntest_pred_frame = pd.DataFrame({'time': ss['time'].astype(str),\n                                'open_channels': np.argmax(test_preds_all, axis=1)})\ntest_pred_frame.to_csv(\".\/gru_preds.csv\", index=False)\nprint('over')\n\n","9061038e":"change wavenet model, this code is from [Understanding Ion-Switching with modeling](https:\/\/www.kaggle.com\/mobassir\/understanding-ion-switching-with-modeling)  and also change a little","a68f81a5":"Wavenet pytorch version\nherit from @ragnar123 notebook https:\/\/www.kaggle.com\/ragnar123\/wavenet-with-1-more-feature\nand @brandenkmurray notebook https:\/\/www.kaggle.com\/brandenkmurray\/seq2seq-rnn-with-gru\nI just add wavenet with pytorch version\nhope this notebook will help \n\n\n\nV4 change wavenet from sequential model to multi layer feature parallel, thanks @cdeotte point out the difference that my old verson with keras wavenet in other kernel, which has more good result.  [detail info](https:\/\/www.kaggle.com\/c\/liverpool-ion-switching\/discussion\/145256)\n\n"}}