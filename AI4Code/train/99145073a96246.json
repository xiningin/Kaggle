{"cell_type":{"6925e445":"code","b817a3d2":"code","dae93340":"code","af7085e6":"code","af1dadc4":"code","0c64d5cc":"code","ee1727a9":"code","e6bb9832":"code","735a0f2f":"code","27408216":"code","8525fb62":"code","d16deafd":"code","6c8b9187":"code","2ee5533d":"code","276c6ad9":"code","7f880e9e":"code","b3525a79":"code","a92d801c":"code","52bbe292":"code","ca76f3b0":"code","00e75133":"code","fd1b1c60":"markdown","76d5e91c":"markdown","2b317b6b":"markdown","a349b489":"markdown","3cf4757f":"markdown"},"source":{"6925e445":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport warnings\nwarnings.filterwarnings('ignore')","b817a3d2":"!pip install pydotplus","dae93340":"from sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.model_selection import train_test_split\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nimport graphviz\nimport pydotplus\nimport io\nfrom scipy import misc\nimport imageio","af7085e6":"songs = pd.read_csv('..\/input\/spotifyclassification\/data.csv')\ntype(songs)","af1dadc4":"songs.describe()","0c64d5cc":"songs.head()","ee1727a9":"train, test = train_test_split(songs, test_size = 0.15)\nprint(\"Training size:\", len(train), \"Test Size:\", len(test))\ntrain.shape","e6bb9832":"pos_tempo = songs[songs['target'] == 1]['tempo']\nneg_tempo = songs[songs['target'] == 0]['tempo']\nfig = plt.figure(figsize=(12,8))\nplt.title(\"Song Tempo Like\/deslike distribution\")\npos_tempo.hist(alpha = 0.7, bins = 25, label='positive')\nneg_tempo.hist(alpha = 0.7, bins = 25, label='negative')\nplt.legend(loc = 'upper rigth')","735a0f2f":"# Loudness\npos_loud = songs[songs['target'] == 1]['loudness']\nneg_loud = songs[songs['target'] == 0]['loudness']\n\nfig2 = plt.figure(figsize=(15,15))\n\n\nax3 = fig2.add_subplot(331)\nax3.set_xlabel('loudness')\nax3.set_ylabel('Count')\nax3.set_title('Song loudness Like\/deslike distribution')\n\npos_loud.hist(alpha = 0.5, bins=30)\nax4 = fig2.add_subplot(331)\nneg_loud.hist(alpha = 0.5, bins=30)\n\n# energy\npos_energy = songs[songs['target'] == 1]['energy']\nneg_energy = songs[songs['target'] == 0]['energy']\n\nax5 = fig2.add_subplot(332)\nax5.set_xlabel('energy')\nax5.set_ylabel('Count')\nax5.set_title('Song energy Like\/deslike distribution')\n\npos_energy.hist(alpha = 0.5, bins=30)\nax6 = fig2.add_subplot(332)\nneg_energy.hist(alpha = 0.5, bins=30)\n\n\n# instrumentalness\n\npos_inst = songs[songs['target'] == 1]['instrumentalness']\nneg_inst = songs[songs['target'] == 0]['instrumentalness']\n\nax7 = fig2.add_subplot(333)\nax7.set_xlabel('instrumentalness')\nax7.set_ylabel('Count')\nax7.set_title('Song instrumentalness Like\/deslike distribution')\n\npos_inst.hist(alpha = 0.5, bins=30)\nax8 = fig2.add_subplot(333)\nneg_inst.hist(alpha = 0.5, bins=30)\n\n#artist\n\npos_duration = songs[songs['target'] == 1]['duration_ms']\nneg_duration = songs[songs['target'] == 0]['duration_ms']\n\nax9 = fig2.add_subplot(334)\nax9.set_xlabel('duration_ms')\nax9.set_ylabel('Count')\nax9.set_title('Song duration_ms Like\/deslike distribution')\n\npos_duration.hist(alpha = 0.5, bins=30)\nax10 = fig2.add_subplot(334)\nneg_duration.hist(alpha = 0.5, bins=30)","27408216":"t = DecisionTreeClassifier(min_samples_split=110)\n","8525fb62":"features = ['danceability',\"loudness\",\"valence\",\"energy\", \"instrumentalness\", \"acousticness\",\"key\",\"speechiness\",\"duration_ms\"]","d16deafd":"x_train = train[features]\ny_train = train['target']\n\nx_test = test[features]\ny_test = test['target']","6c8b9187":"dt = t.fit(x_train, y_train)","2ee5533d":"# show decision tree\ndef show_tree(tree, features, path):\n    f = io.StringIO()\n    export_graphviz(tree, out_file=f, feature_names= features)\n    pydotplus.graph_from_dot_data(f.getvalue()).write_png(path)\n    img = imageio.imread(path)\n    plt.rcParams[\"figure.figsize\"] = (20,20)\n    plt.imshow(img)\n#show_tree(dt,features,'dec_tree_01.png')","276c6ad9":"dt.score(x_test,y_test)","7f880e9e":"from sklearn.ensemble import RandomForestClassifier","b3525a79":"#random forest\nrf = RandomForestClassifier(n_estimators=20)\nrf.fit(x_train, y_train)","a92d801c":"rf.score(x_test,y_test)","52bbe292":"from sklearn.ensemble import BaggingClassifier","ca76f3b0":"bg = BaggingClassifier(DecisionTreeClassifier(), max_samples=0.5, max_features = 1.0, n_estimators = 20 )\nbg.fit(x_train, y_train)","00e75133":"bg.score(x_test,y_test)","fd1b1c60":"# Implementing random forest","76d5e91c":"# Spotify Songs","2b317b6b":"## spliting data","a349b489":"## Decision tree classifier\n* #### predict if user likes a song\n\nSplit observations into groups of homogenous target values (1 or 0), giving us a set of \"paths\" to follow to determineif this user liked or desliked a specific song.","3cf4757f":"# Implementing bagging"}}