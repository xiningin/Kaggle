{"cell_type":{"74cb9aaa":"code","11e526fc":"code","d9965e4a":"code","32bf58f9":"code","2cb1d591":"code","721e4610":"code","2f5eb5c3":"code","9f0a10a0":"code","ac2410f6":"code","f48f9464":"code","c0845e85":"code","69a96dcb":"code","a930ec59":"code","7f2924eb":"code","c265e0ea":"code","39f7c7bb":"code","327d20e3":"code","4a8a704d":"code","02121ce0":"code","ade3f791":"code","e7180d52":"code","ca77a8d2":"code","0e5528c9":"code","b637e9e7":"code","6e3e5396":"code","e434a3e2":"code","60bbd715":"code","2e28ae2f":"code","b26d4ca0":"code","ee6dd813":"code","4fb3a649":"code","7aff7982":"code","e3453525":"code","d1ae0a25":"code","cf85b685":"code","ebcdc45d":"code","5fc0f055":"code","0fd82a46":"code","9d6e695f":"code","c7974b2b":"code","b774046b":"code","3b7521cf":"code","76fb9656":"code","911baba1":"code","5ef4a93d":"code","37633395":"code","c9cef014":"code","1976b8a9":"code","e676bc33":"code","acd8087d":"code","cdb2e2c9":"code","ea116065":"code","de793cae":"code","23125bb1":"code","b511a55b":"code","8e1914e1":"code","8b9ce0ab":"code","39c99519":"code","30cfb0e2":"code","42d01ca4":"code","6a698758":"code","2c8780d3":"code","c638021f":"code","24567686":"code","d2978030":"code","98264591":"code","708a2c8b":"code","901b5088":"code","fc394845":"code","de3c49dd":"code","4953e4e9":"code","24336a2c":"code","e89ad7d3":"code","8681b9cf":"code","345fa458":"code","fdd703cc":"code","1f616b70":"code","84d0391d":"code","03c289ce":"code","44ff08fb":"code","907219d9":"code","5c0dcc3b":"code","3bfc7349":"code","70fe34bc":"markdown","d406acb4":"markdown","b9f9a30d":"markdown","feed66f6":"markdown","5f0c366d":"markdown","51e1fdf5":"markdown","dd2086be":"markdown","46bb92e1":"markdown","10c00d46":"markdown","a6c69acb":"markdown","07f0cd73":"markdown","57baf81d":"markdown","09dddb93":"markdown","a6c52d0a":"markdown","2da80541":"markdown","09729a0a":"markdown","2a92a7ea":"markdown","4058f474":"markdown","d804b9ea":"markdown","9c8d435c":"markdown"},"source":{"74cb9aaa":"! pip install imutils","11e526fc":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\nimport time\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nimport imageio\nfrom IPython.display import Image\nimport matplotlib.image as mpimg\nfrom skimage.transform import resize\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nimport zipfile\nfrom io import BytesIO\nfrom nibabel import FileHolder\nfrom nibabel.analyze import AnalyzeImage\nimport PIL\nfrom IPython import display\nfrom skimage.morphology import convex_hull_image, erosion\nfrom skimage.morphology import square\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom skimage import data, io, filters\nimport skimage\nimport imutils\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose, LeakyReLU, ReLU\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","d9965e4a":"Night_SKY_Universe = \"..\/input\/exoplanet-real-time-simulation-video-nasa\/Exoplanet_VIDEO_Set\/allsky_wise_mosaic_400.mov\"","32bf58f9":"Brain_Image_Path = Path(\"..\/input\/mrihs\/original\/35\")\n\nBrain_JPG = list(Brain_Image_Path.glob(r\"**\/*.jpg\"))","2cb1d591":"JPG_Series = pd.Series(Brain_JPG,name=\"JPG\").astype(str)","721e4610":"Night_Frame = []\n\nVideo_Caption = cv2.VideoCapture(Night_SKY_Universe)\n\nwhile Video_Caption.isOpened():\n    \n    _,frame = Video_Caption.read()\n    \n    if _ != True:\n        break\n        \n    if Video_Caption.isOpened():\n        \n        Transformation_Image = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)\n        Resized_Image = cv2.resize(Transformation_Image,(180,180))\n        \n        Night_Frame.append(Resized_Image)","2f5eb5c3":"print(\"LEN FRAME LIST: \",len(Night_Frame))\nprint(\"LEN ARRAY FRAME: \", np.shape(np.array(Night_Frame)))","9f0a10a0":"Brain_Image = []\nfor image_x in JPG_Series[:1833].values:\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image_x),cv2.COLOR_BGR2RGB)\n    Resized_Image = cv2.resize(Reading_Image,(180,180))\n   \n    Brain_Image.append(Resized_Image)","ac2410f6":"print(\"LEN IMAGE LIST: \",len(Brain_Image))\nprint(\"LEN ARRAY IMAGE: \", np.shape(np.array(Brain_Image)))","f48f9464":"Total_List = []\n\nfor brain_x,universe_x in zip(Brain_Image,Night_Frame):\n    Total_List.append(brain_x)\n    Total_List.append(universe_x)","c0845e85":"print(\"LEN TOTAL LIST: \",len(Total_List))\nprint(\"LEN ARRAY TOTAL: \", np.shape(np.array(Total_List)))","69a96dcb":"plt.style.use(\"dark_background\")","a930ec59":"figure,axis = plt.subplots(1,2,figsize=(12,12))\n\naxis[0].set_xlabel(Total_List[0].shape)\naxis[0].set_ylabel(Total_List[0].size)\naxis[0].set_title(\"BRAIN\")\naxis[0].imshow(Total_List[0])\n\naxis[1].set_xlabel(Total_List[1].shape)\naxis[1].set_ylabel(Total_List[1].size)\naxis[1].set_title(\"UNIVERSE\")\naxis[1].imshow(Total_List[1])","7f2924eb":"figure,axis = plt.subplots(1,2,figsize=(12,12))\n\naxis[0].set_xlabel(Total_List[2].shape)\naxis[0].set_ylabel(Total_List[2].size)\naxis[0].set_title(\"BRAIN\")\naxis[0].imshow(Total_List[2])\n\naxis[1].set_xlabel(Total_List[3].shape)\naxis[1].set_ylabel(Total_List[3].size)\naxis[1].set_title(\"UNIVERSE\")\naxis[1].imshow(Total_List[3])","c265e0ea":"figure,axis = plt.subplots(1,3,figsize=(12,12))\n\n\nBlend_Image = cv2.addWeighted(Total_List[4],0.8,Total_List[5],0.8,0.1)\n\naxis[0].set_xlabel(Total_List[4].shape)\naxis[0].set_ylabel(Total_List[4].size)\naxis[0].set_title(\"BRAIN\")\naxis[0].imshow(Total_List[4])\n\naxis[1].set_xlabel(Total_List[5].shape)\naxis[1].set_ylabel(Total_List[5].size)\naxis[1].set_title(\"UNIVERSE\")\naxis[1].imshow(Total_List[5])\n\naxis[2].set_xlabel(Blend_Image.shape)\naxis[2].set_ylabel(Blend_Image.size)\naxis[2].set_title(\"BLEND\")\naxis[2].imshow(Blend_Image)","39f7c7bb":"figure,axis = plt.subplots(1,3,figsize=(12,12))\n\n\nBlend_Image = cv2.addWeighted(Total_List[6],1,Total_List[7],1,0.1)\n\naxis[0].set_xlabel(Total_List[6].shape)\naxis[0].set_ylabel(Total_List[6].size)\naxis[0].set_title(\"BRAIN\")\naxis[0].imshow(Total_List[6])\n\naxis[1].set_xlabel(Total_List[7].shape)\naxis[1].set_ylabel(Total_List[7].size)\naxis[1].set_title(\"UNIVERSE\")\naxis[1].imshow(Total_List[7])\n\naxis[2].set_xlabel(Blend_Image.shape)\naxis[2].set_ylabel(Blend_Image.size)\naxis[2].set_title(\"BLEND\")\naxis[2].imshow(Blend_Image)","327d20e3":"figure,axis = plt.subplots(1,3,figsize=(12,12))\n\n\nDiff_Image = cv2.absdiff(Total_List[6],Total_List[7],np.zeros((2,2)))\n\naxis[0].set_xlabel(Total_List[6].shape)\naxis[0].set_ylabel(Total_List[6].size)\naxis[0].set_title(\"BRAIN\")\naxis[0].imshow(Total_List[6])\n\naxis[1].set_xlabel(Total_List[7].shape)\naxis[1].set_ylabel(Total_List[7].size)\naxis[1].set_title(\"UNIVERSE\")\naxis[1].imshow(Total_List[7])\n\naxis[2].set_xlabel(Diff_Image.shape)\naxis[2].set_ylabel(Diff_Image.size)\naxis[2].set_title(\"DIFF\")\naxis[2].imshow(Diff_Image)","4a8a704d":"figure,axis = plt.subplots(1,3,figsize=(12,12))\n\n\nDiff_Image = cv2.absdiff(Total_List[8],Total_List[9],np.zeros((7,7)))\n\naxis[0].set_xlabel(Total_List[8].shape)\naxis[0].set_ylabel(Total_List[8].size)\naxis[0].set_title(\"BRAIN\")\naxis[0].imshow(Total_List[8])\n\naxis[1].set_xlabel(Total_List[9].shape)\naxis[1].set_ylabel(Total_List[9].size)\naxis[1].set_title(\"UNIVERSE\")\naxis[1].imshow(Total_List[9])\n\naxis[2].set_xlabel(Diff_Image.shape)\naxis[2].set_ylabel(Diff_Image.size)\naxis[2].set_title(\"DIFF\")\naxis[2].imshow(Diff_Image)","02121ce0":"figure,axis = plt.subplots(1,6,figsize=(18,18))\n\n\nSplit_Brain = cv2.split(Total_List[8])\n\nDiff_Image = cv2.absdiff(Total_List[8],Total_List[9],np.zeros((7,7)))\n\naxis[0].set_xlabel(Total_List[8].shape)\naxis[0].set_ylabel(Total_List[8].size)\naxis[0].set_title(\"BRAIN\")\naxis[0].imshow(Total_List[8])\n\naxis[1].set_xlabel(Total_List[9].shape)\naxis[1].set_ylabel(Total_List[9].size)\naxis[1].set_title(\"UNIVERSE\")\naxis[1].imshow(Total_List[9])\n\naxis[2].set_xlabel(Diff_Image.shape)\naxis[2].set_ylabel(Diff_Image.size)\naxis[2].set_title(\"DIFF\")\naxis[2].imshow(Diff_Image)\n\n\naxis[3].set_title(\"SPLIT 0\")\naxis[3].imshow(Split_Brain[0])\naxis[4].set_title(\"SPLIT 1\")\naxis[4].imshow(Split_Brain[1])\naxis[5].set_title(\"SPLIT 2\")\naxis[5].imshow(Split_Brain[2])","ade3f791":"figure,axis = plt.subplots(1,6,figsize=(18,18))\n\n\nSplit_Brain = cv2.split(Total_List[8])\nSplit_Universe = cv2.split(Total_List[9])\n\n\naxis[0].set_title(\"UNIVERSE 0\")\naxis[0].imshow(Split_Universe[0])\n\naxis[1].set_title(\"UNIVERSE 1\")\naxis[1].imshow(Split_Universe[1])\n\naxis[2].set_title(\"UNIVERSE 2\")\naxis[2].imshow(Split_Universe[2])\n\n\naxis[3].set_title(\"BRAIN 0\")\naxis[3].imshow(Split_Brain[0])\naxis[4].set_title(\"BRAIN 1\")\naxis[4].imshow(Split_Brain[1])\naxis[5].set_title(\"BRAIN 2\")\naxis[5].imshow(Split_Brain[2])","e7180d52":"figure,axis = plt.subplots(1,6,figsize=(18,18))\n\n\nSplit_Brain = cv2.split(Total_List[10])\nSplit_Universe = cv2.split(Total_List[11])\n\n\naxis[0].set_title(\"UNIVERSE 0\")\naxis[0].imshow(Split_Universe[0])\naxis[1].set_title(\"UNIVERSE 1\")\naxis[1].imshow(Split_Universe[1])\naxis[2].set_title(\"UNIVERSE 2\")\naxis[2].imshow(Split_Universe[2])\n\n\naxis[3].set_title(\"BRAIN 0\")\naxis[3].imshow(Split_Brain[0])\naxis[4].set_title(\"BRAIN 1\")\naxis[4].imshow(Split_Brain[1])\naxis[5].set_title(\"BRAIN 2\")\naxis[5].imshow(Split_Brain[2])","ca77a8d2":"figure,axis = plt.subplots(1,6,figsize=(17,17))\n\nSplit_Brain = cv2.split(Total_List[8])\nSplit_Universe = cv2.split(Total_List[9])\n\nBlend_Image = cv2.addWeighted(Split_Brain[0],1,Split_Universe[0],1,0.3)\n\noutput1_R_B = cv2.equalizeHist(Split_Brain[0].astype(np.uint8))\noutput1_G_B = cv2.equalizeHist(Split_Brain[1].astype(np.uint8))\noutput1_B_B = cv2.equalizeHist(Split_Brain[2].astype(np.uint8))\n\noutput1_R_U = cv2.equalizeHist(Split_Universe[0].astype(np.uint8))\noutput1_G_U = cv2.equalizeHist(Split_Universe[1].astype(np.uint8))\noutput1_B_U = cv2.equalizeHist(Split_Universe[2].astype(np.uint8))\n\nMerge_Color = cv2.merge((output1_R_B, output1_G_U, output1_B_U))\n\naxis[0].set_xlabel(Total_List[8].shape)\naxis[0].set_ylabel(Total_List[8].size)\naxis[0].set_title(\"BRAIN\")\naxis[0].imshow(Total_List[8])\n\naxis[1].set_xlabel(Total_List[9].shape)\naxis[1].set_ylabel(Total_List[9].size)\naxis[1].set_title(\"UNIVERSE\")\naxis[1].imshow(Total_List[9])\n\naxis[2].set_xlabel(Blend_Image.shape)\naxis[2].set_ylabel(Blend_Image.size)\naxis[2].set_title(\"BLEND\")\naxis[2].imshow(Blend_Image)\n\naxis[3].set_xlabel(output1_R_B.shape)\naxis[3].set_ylabel(output1_R_B.size)\naxis[3].set_title(\"DIST BRAIN R\")\naxis[3].imshow(output1_R_B)\n\naxis[4].set_xlabel(output1_R_U.shape)\naxis[4].set_ylabel(output1_R_U.size)\naxis[4].set_title(\"DIST UNIVERSE R\")\naxis[4].imshow(output1_R_U)\n\naxis[5].set_xlabel(Merge_Color.shape)\naxis[5].set_ylabel(Merge_Color.size)\naxis[5].set_title(\"MERGE\")\naxis[5].imshow(Merge_Color)","0e5528c9":"figure,axis = plt.subplots(1,2,figsize=(17,17))\n\nSplit_Brain = cv2.split(Total_List[8])\nSplit_Universe = cv2.split(Total_List[9])\n\nBlend_Image = cv2.addWeighted(Split_Brain[0],1,Split_Universe[0],1,0.3)\n\nEqq_Image = cv2.equalizeHist(Blend_Image.astype(np.uint8))\n\naxis[0].set_xlabel(Blend_Image.shape)\naxis[0].set_ylabel(Blend_Image.size)\naxis[0].set_title(\"BLEND\")\naxis[0].imshow(Blend_Image)\n\naxis[1].set_xlabel(Eqq_Image.shape)\naxis[1].set_ylabel(Eqq_Image.size)\naxis[1].set_title(\"EQUALIZE\")\naxis[1].imshow(Eqq_Image)","b637e9e7":"figure,axis = plt.subplots(1,2,figsize=(17,17))\n\nBlend_Image = cv2.addWeighted(Total_List[8],1,Total_List[9],1,0.3)\n\nEqq_Image = cv2.equalizeHist(cv2.cvtColor(Blend_Image.astype(np.uint8),cv2.COLOR_RGB2GRAY))\n\naxis[0].set_xlabel(Blend_Image.shape)\naxis[0].set_ylabel(Blend_Image.size)\naxis[0].set_title(\"BLEND\")\naxis[0].imshow(Blend_Image)\n\naxis[1].set_xlabel(Eqq_Image.shape)\naxis[1].set_ylabel(Eqq_Image.size)\naxis[1].set_title(\"EQUALIZE\")\naxis[1].imshow(Eqq_Image)","6e3e5396":"figure,axis = plt.subplots(1,2,figsize=(17,17))\n\nEqq_Image_Universe = cv2.equalizeHist(cv2.cvtColor(Total_List[9].astype(np.uint8),cv2.COLOR_RGB2GRAY))\n\naxis[0].set_xlabel(Total_List[9][:,:,0].shape)\naxis[0].set_ylabel(Total_List[9][:,:,0].size)\naxis[0].set_title(\"GRAY UNIVERSE\")\naxis[0].imshow(Total_List[9][:,:,0])\n\naxis[1].set_xlabel(Eqq_Image_Universe.shape)\naxis[1].set_ylabel(Eqq_Image_Universe.size)\naxis[1].set_title(\"EQUALIZE UNIVERSE\")\naxis[1].imshow(Eqq_Image_Universe)","e434a3e2":"figure,axis = plt.subplots(1,2,figsize=(17,17))\n\nBlend_Image = cv2.addWeighted(Total_List[8],1,Total_List[9],1,0.3)\n\nEqq_Image = cv2.equalizeHist(cv2.cvtColor(Blend_Image.astype(np.uint8),cv2.COLOR_RGB2GRAY))\n\nStack_Image = np.hstack((Blend_Image[:,:,0],Eqq_Image))\n\naxis[0].set_xlabel(Eqq_Image.shape)\naxis[0].set_ylabel(Eqq_Image.size)\naxis[0].set_title(\"EQUALIZE\")\naxis[0].imshow(Eqq_Image)\n\naxis[1].set_xlabel(Stack_Image.shape)\naxis[1].set_ylabel(Stack_Image.size)\naxis[1].set_title(\"STACK\")\naxis[1].imshow(Stack_Image)","60bbd715":"figure,axis = plt.subplots(1,2,figsize=(17,17))\n\nClahe_Func = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))\n\nClahe_Universe = Clahe_Func.apply(Total_List[9][:,:,0].astype(np.uint8))\n\n\naxis[0].set_xlabel(Total_List[9][:,:,0].shape)\naxis[0].set_ylabel(Total_List[9][:,:,0].size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Total_List[9][:,:,0])\n\naxis[1].set_xlabel(Clahe_Universe.shape)\naxis[1].set_ylabel(Clahe_Universe.size)\naxis[1].set_title(\"CLAHE\")\naxis[1].imshow(Clahe_Universe)","2e28ae2f":"figure,axis = plt.subplots(1,2,figsize=(17,17))\n\nClahe_Func = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))\n\nGray_Brain = cv2.imread(\"..\/input\/mrihs\/original\/35\/ADNI_002_S_1070_130146_ACPC\/ADNI_002_S_1070_130146_ACPC_003.jpg\",0)\nClahe_Brain = Clahe_Func.apply(Gray_Brain)\n\n\n\naxis[0].set_xlabel(Gray_Brain.shape)\naxis[0].set_ylabel(Gray_Brain.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_Brain,cmap=\"gray\")\n\naxis[1].set_xlabel(Clahe_Brain.shape)\naxis[1].set_ylabel(Clahe_Brain.size)\naxis[1].set_title(\"CLAHE\")\naxis[1].imshow(Clahe_Brain,cmap=\"gray\")","b26d4ca0":"figure,axis = plt.subplots(1,2,figsize=(17,17))\n\nClahe_Func = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))\n\nGray_Brain = cv2.imread(\"..\/input\/mrihs\/original\/35\/ADNI_002_S_1070_130146_ACPC\/ADNI_002_S_1070_130146_ACPC_008.jpg\",0)\nClahe_Brain = Clahe_Func.apply(Gray_Brain)\n\n\n\naxis[0].set_xlabel(Gray_Brain.shape)\naxis[0].set_ylabel(Gray_Brain.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_Brain,cmap=\"gray\")\n\naxis[1].set_xlabel(Clahe_Brain.shape)\naxis[1].set_ylabel(Clahe_Brain.size)\naxis[1].set_title(\"CLAHE\")\naxis[1].imshow(Clahe_Brain,cmap=\"gray\")","ee6dd813":"figure,axis = plt.subplots(1,3,figsize=(17,17))\n\nGray_Universe = Total_List[9][:,:,0]\nGray_Brain = cv2.imread(\"..\/input\/mrihs\/original\/35\/ADNI_002_S_1070_130146_ACPC\/ADNI_002_S_1070_130146_ACPC_008.jpg\",0)\nGray_Brain = cv2.resize(Gray_Brain,(180,180))\n\nORB_Creator = cv2.ORB_create(500)\n\n(kpsA, descsA) = ORB_Creator.detectAndCompute(Gray_Universe.astype(np.uint8), None)\n(kpsB, descsB) = ORB_Creator.detectAndCompute(Gray_Brain, None)\n\nmatcher = cv2.DescriptorMatcher_create(cv2.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)\nNot_Matches = matcher.match(descsA, descsB, None)\n\nSorted_Matches = sorted(Not_Matches, key=lambda x:x.distance)\n\nKeep_Match = int(len(Sorted_Matches) * 0.2)\nmatches = Sorted_Matches[:Keep_Match]\n\nmatchedVis = cv2.drawMatches(Gray_Universe.astype(np.uint8), kpsA, Gray_Brain, kpsB, matches, None)\nmatchedVis = imutils.resize(matchedVis, width=1000)\n\t\naxis[0].set_xlabel(Gray_Universe.shape)\naxis[0].set_ylabel(Gray_Universe.size)\naxis[0].set_title(\"GRAY UNIVERSE\")\naxis[0].imshow(Gray_Universe,cmap=\"gray\")\n\naxis[1].set_xlabel(Gray_Brain.shape)\naxis[1].set_ylabel(Gray_Brain.size)\naxis[1].set_title(\"GRAY BRAIN\")\naxis[1].imshow(Gray_Brain,cmap=\"gray\")\n\naxis[2].set_xlabel(matchedVis.shape)\naxis[2].set_ylabel(matchedVis.size)\naxis[2].set_title(\"KEYPOINTS\")\naxis[2].imshow(matchedVis,cmap=\"gray\")","4fb3a649":"figure,axis = plt.subplots(1,3,figsize=(17,17))\n\nGray_Universe = Total_List[9][:,:,0]\nGray_Brain = cv2.imread(\"..\/input\/mrihs\/original\/35\/ADNI_002_S_1070_130146_ACPC\/ADNI_002_S_1070_130146_ACPC_008.jpg\",0)\nGray_Brain = cv2.resize(Gray_Brain,(180,180))\n\nORB_Creator = cv2.ORB_create(500)\n\n(kpsA, descsA) = ORB_Creator.detectAndCompute(Gray_Universe.astype(np.uint8), None)\n(kpsB, descsB) = ORB_Creator.detectAndCompute(Gray_Brain, None)\n\nmatcher = cv2.DescriptorMatcher_create(cv2.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)\nNot_Matches = matcher.match(descsA, descsB, None)\n\nSorted_Matches = sorted(Not_Matches, key=lambda x:x.distance)\n\nKeep_Match = int(len(Sorted_Matches) * 0.2)\nmatches = Sorted_Matches[:Keep_Match]\n\nmatchedVis = cv2.drawMatches(Gray_Universe.astype(np.uint8), kpsA, Gray_Brain, kpsB, matches, None)\nmatchedVis = imutils.resize(matchedVis, width=180)\n\naxis[0].set_xlabel(Gray_Universe.shape)\naxis[0].set_ylabel(Gray_Universe.size)\naxis[0].set_title(\"GRAY UNIVERSE\")\naxis[0].imshow(Gray_Universe,cmap=\"gray\")\n\naxis[1].set_xlabel(Gray_Brain.shape)\naxis[1].set_ylabel(Gray_Brain.size)\naxis[1].set_title(\"GRAY BRAIN\")\naxis[1].imshow(Gray_Brain,cmap=\"gray\")\n\naxis[2].set_xlabel(matchedVis.shape)\naxis[2].set_ylabel(matchedVis.size)\naxis[2].set_title(\"KEYPOINTS\")\naxis[2].imshow(matchedVis,cmap=\"gray\")","7aff7982":"iterations = 60\nvector_noise_shape = 180\ncount_example = 20\nbatch_size = 6\ncount_buffer = 60000","e3453525":"seed = tf.random.normal([count_example,vector_noise_shape])","d1ae0a25":"X_Train = np.array(Total_List)\n\nX_Train = X_Train.astype(\"float32\")","cf85b685":"X_Train = X_Train[:1000]","ebcdc45d":"X_Train = X_Train \/ 255.","5fc0f055":"figure = plt.figure(figsize=(10,10))\n\nplt.imshow(X_Train[1])\nplt.xlabel(X_Train[1].shape)","0fd82a46":"figure = plt.figure(figsize=(10,10))\n\nplt.imshow(X_Train[2])\nplt.xlabel(X_Train[2].shape)","9d6e695f":"print(\"TOTAL SHAPE: \",X_Train.shape)","c7974b2b":"Train_Data = tf.data.Dataset.from_tensor_slices(X_Train).shuffle(count_buffer).batch(batch_size)","b774046b":"print(Tensor_Data.element_spec)","3b7521cf":"def Generator_Model():\n    \n    \n    Model = Sequential()\n    #\n    Model.add(Dense(90*90*128,use_bias=False,input_shape=(180,)))\n    Model.add(BatchNormalization())\n    Model.add(LeakyReLU())\n    #\n    Model.add(Reshape((90,90,128)))\n    #\n    Model.add(Conv2DTranspose(128,(3,3),padding=\"same\",use_bias=False))\n    Model.add(BatchNormalization())\n    Model.add(LeakyReLU())\n    \n    Model.add(Conv2DTranspose(64, (3,3), strides=(2,2), padding='same', use_bias=False))\n    Model.add(BatchNormalization())\n    Model.add(LeakyReLU())\n    #\n    Model.add(Conv2DTranspose(3,(3,3),padding=\"same\",use_bias=False,activation=\"tanh\"))\n    \n    \n    return Model","76fb9656":"Generator = Generator_Model()","911baba1":"def Discriminator_Model():\n    \n    Model = Sequential()\n    \n    Model.add(Conv2D(64,(3,3),padding=\"same\",input_shape=[180,180,3]))\n    Model.add(Dropout(0.2))\n    Model.add(LeakyReLU())\n    \n    \n    Model.add(Conv2D(128,(3,3),padding=\"same\"))\n    Model.add(Dropout(0.2))\n    Model.add(LeakyReLU())\n    \n    Model.add(layers.Flatten())\n    Model.add(layers.Dense(1))\n    \n    return Model","5ef4a93d":"Discriminator = Discriminator_Model()","37633395":"Generator_Optimizer = RMSprop(lr=0.0003,clipvalue=1.0,decay=1e-8)\nDiscriminator_Optimizer = RMSprop(lr=0.0003,clipvalue=1.0,decay=1e-8)","c9cef014":"Loss_Function = tf.keras.losses.BinaryCrossentropy(from_logits=True)","1976b8a9":"def Discriminator_Loss(real_out,fake_out):\n    \n    real_loss_function = Loss_Function(tf.ones_like(real_out),real_out)\n    fake_loss_function = Loss_Function(tf.zeros_like(fake_out),fake_out)\n    total_loss = real_loss_function + fake_loss_function\n    \n    return total_loss","e676bc33":"def Generator_Loss(fake_output):\n    \n    return Loss_Function(tf.ones_like(fake_output),fake_output)","acd8087d":"def display_and_save_images(model, epoch, test_input):\n    \n    predictions = model(test_input, training=False)\n    fig = plt.figure(figsize=(12, 12))\n    \n    for i in range(predictions.shape[0]):\n        plt.subplot(5, 4, i+1)\n        plt.imshow(predictions[i, :, :, 0])\n        plt.axis('off')\n\n    plt.savefig('output_image{:04d}.png'.format(epoch))\n    plt.show()","cdb2e2c9":"def Train_Step(images):\n    \n    random_noise_vector = tf.random.normal([batch_size,vector_noise_shape])\n    \n    with tf.GradientTape() as Generator_Tape, tf.GradientTape() as Discriminator_Tape:\n        \n        Generator_Fake_Image = Generator(random_noise_vector,training=False)\n        \n        real_output = Discriminator(images,training=True)\n        fake_output = Discriminator(Generator_Fake_Image,training=True)\n        \n        Generator_Loss_Output = Generator_Loss(fake_output)\n        Discriminator_Loss_Output = Discriminator_Loss(real_output,fake_output)\n        \n    Generator_Gradients = Generator_Tape.gradient(Generator_Loss_Output,Generator.trainable_variables)\n    Discriminator_Gradients = Discriminator_Tape.gradient(Discriminator_Loss_Output,Discriminator.trainable_variables)\n    \n    Generator_Optimizer.apply_gradients(zip(Generator_Gradients,Generator.trainable_variables))\n    Discriminator_Optimizer.apply_gradients(zip(Discriminator_Gradients,Discriminator.trainable_variables))\n","ea116065":"def Training(dataset,iterations):\n    \n    for epoch in range(iterations):\n        start = time.time()\n        \n        for image_batch in dataset:\n            Train_Step(image_batch)\n            \n        display.clear_output(wait=True)\n        display_and_save_images(Generator,epoch+1,seed)\n    \n    display.clear_output(wait=True)\n    display_and_save_images(Generator,epoch,seed)  ","de793cae":"Training(Train_Data,iterations)","23125bb1":"Predict_Generator_Noise = tf.random.normal(shape=[50,vector_noise_shape])","b511a55b":"print(len(Predict_Generator_Noise))","8e1914e1":"Generator_Predict = Generator(Predict_Generator_Noise)","8b9ce0ab":"figure, axes = plt.subplots(nrows=3,ncols=3,figsize=(14,14))\n\nfor i,ax in enumerate(axes.flat):\n    Prediction_Output = Generator_Predict[i]\n    ax.imshow(Prediction_Output,cmap=\"gray\")\n    ax.axis(\"off\")\nplt.tight_layout()\nplt.show()","39c99519":"figure, axes = plt.subplots(nrows=3,ncols=3,figsize=(14,14))\n\nfor i,ax in enumerate(axes.flat):\n    Prediction_Output = Generator_Predict[i*2]\n    ax.imshow(Prediction_Output)\n    ax.axis(\"off\")\nplt.tight_layout()\nplt.show()","30cfb0e2":"for indexing in range(random.randint(0,50)):\n    figure = plt.figure(figsize=(8,8))\n\n    Saving_Count = indexing\n    plt.axis(\"off\")\n    plt.imshow(Generator_Predict[Saving_Count][:,:,0],cmap=\"hot\")\n    plt.savefig(f\"Ex{Saving_Count}_Output.png\")","42d01ca4":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 1\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[1][:,:,0],cmap=\"hot\")\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","6a698758":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 2\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count][:,:,0],cmap=\"jet\")\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","2c8780d3":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 3\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count][:,:,0],cmap=\"Spectral\")\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","c638021f":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 4\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count][:,:,0],cmap=\"hot\")\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","24567686":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 4\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count][:,:,0],cmap=\"hot\")\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","d2978030":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 6\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count][:,:,0],cmap=\"hot\")\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","98264591":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 7\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","708a2c8b":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 8\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","901b5088":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 9\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","fc394845":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 10\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","de3c49dd":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 11\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","4953e4e9":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 12\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","24336a2c":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 13\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","e89ad7d3":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 14\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","8681b9cf":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 30\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","345fa458":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 31\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","fdd703cc":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 32\nplt.axis(\"off\")\nplt.imshow(Generator_Predict[Saving_Count])\nplt.savefig(f\"Ex{Saving_Count}_Output.png\")","1f616b70":"Output_Path = Path(\".\/\")\nOutput_List = list(Output_Path.glob(r\"*.png\"))\nOutput_Series = pd.Series(Output_List,name=\"DCGAN\").astype(str)","84d0391d":"Output_DCGAN = []\n\nfor image_x in Output_Series:\n    \n    Reading_Img = cv2.cvtColor(cv2.imread(image_x),cv2.COLOR_BGR2RGB)\n    Output_DCGAN.append(Reading_Img)\n    ","03c289ce":"figure = plt.figure(figsize=(8,8))\n\nSaving_Count = 0\nplt.axis(\"off\")\nplt.imshow(Output_DCGAN[Saving_Count])\nplt.savefig(f\"LIST{Saving_Count}_Output.png\")","44ff08fb":"figure = plt.figure(figsize=(17,17))\n\nSaving_Count = 5\nplt.axis(\"off\")\nplt.imshow(Output_DCGAN[Saving_Count])\nplt.savefig(f\"LIST{Saving_Count}_Output.png\")","907219d9":"figure = plt.figure(figsize=(17,17))\n\nSaving_Count = 6\nplt.axis(\"off\")\nplt.imshow(Output_DCGAN[Saving_Count])\nplt.savefig(f\"LIST{Saving_Count}_Output.png\")","5c0dcc3b":"figure = plt.figure(figsize=(17,17))\n\nSaving_Count = 8\nplt.axis(\"off\")\nplt.imshow(Output_DCGAN[Saving_Count])\nplt.savefig(f\"LIST{Saving_Count}_Output.png\")","3bfc7349":"figure = plt.figure(figsize=(17,17))\n\nSaving_Count = 9\nplt.axis(\"off\")\nplt.imshow(Output_DCGAN[Saving_Count])\nplt.savefig(f\"LIST{Saving_Count}_Output.png\")","70fe34bc":"# HISTORY\n\n#### Exoplanet\n\n* One of the objectives of NASA's Kepler Mission is to establish the number of planetary systems outside of the Solar System that contain Earth-like planets. At a minimum, an Earth-like planet would be rocky (vs. gaseous), be about the same radius as Earth, and exist within the habitable zone of its host star. The habitable zone is the region in which liquid water could exist on a planet's surface. Liquid water is a key ingredient to life, so planets found within this zone are more likely to be habitable worlds.\n\n* In the data you will see exoplanets and their descriptions. All videos are real time simulations","d406acb4":"#### GENERATOR PROCESS","b9f9a30d":"#### TOTAL LIST","feed66f6":"#### LOSS FUNCTIONS","5f0c366d":"#### OPTIMIZERS","51e1fdf5":"#### PARAMETERS","dd2086be":"#### VISION","46bb92e1":"#### TRAINING","10c00d46":"#### TENSOR SLICES","a6c69acb":"#### DATA TRANSFORMATION","07f0cd73":"#### TRAINING STEP","57baf81d":"#### PREDICTION","09dddb93":"#### MAIN PATH","a6c52d0a":"# DATA EXPORTATION AND OVERVIEW","2da80541":"# DC-GAN STEPS","09729a0a":"#### VIDEO FRAME EXPORTATION","2a92a7ea":"# PACKAGES AND LIBRARIES","4058f474":"#### DISCRIMINATOR PROCESS","d804b9ea":"#### NIGHT SKY EXPORTATION","9c8d435c":"#### GENERATING AND SAVING IMAGE"}}