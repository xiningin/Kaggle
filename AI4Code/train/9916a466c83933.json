{"cell_type":{"d75c33f2":"code","75c1562f":"code","fb64ab1e":"code","6295f36a":"code","5e8817b6":"code","a676732c":"code","6283e709":"code","81803608":"code","b304f621":"code","2c7523a8":"code","e6a651f2":"code","3ea17f11":"code","d235609d":"code","4314ab76":"code","374462a7":"code","8fa2aca5":"code","366467bf":"code","5e14a1cd":"markdown"},"source":{"d75c33f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75c1562f":"import os\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nfrom skimage import io\nfrom skimage.color import rgb2gray\nfrom skimage.transform import rescale, resize, downscale_local_mean\nfrom skimage import morphology\n\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten, Dropout\nfrom keras.utils import to_categorical","fb64ab1e":"for sheep_bread, _, filenames in os.walk('\/kaggle\/input\/sheep-breed-classification\/SheepFaceImages'):\n    print(sheep_bread)","6295f36a":"for sheep_bread in os.listdir(BASE_PATH):\n    print(sheep_bread)","5e8817b6":"# create a .csv file to be downloaded for further investigations\n\nBASE_PATH = '\/kaggle\/input\/sheep-breed-classification\/SheepFaceImages\/'\n\nsheep_data = {}\n\nimage_filename_index = 0\n\nfor sheep_bread in os.listdir(BASE_PATH):\n    print(sheep_bread)\n    BREAD_PATH = BASE_PATH + '\/' + sheep_bread\n    for image_filename in os.listdir(BREAD_PATH):\n        image_path = BREAD_PATH + '\/' + image_filename\n        #read the image\n        sheep = io.imread(image_path)\n        # convert to grayscale\n        sheep = rgb2gray(sheep)\n        # resize\n        sheep = resize(sheep, (90,78), anti_aliasing=False)\n        # reshape\n        sheep = sheep.reshape(sheep.shape[0] * sheep.shape[1])\n        sheep = np.append(sheep, str(sheep_bread))\n        sheep_data[image_filename_index] = sheep\n        image_filename_index = image_filename_index + 1\n\ncolumn_names = ['pixel_' + str(i) for i in range(0,7020)]\ncolumn_names = np.append(column_names, 'bread')\ndf = pd.DataFrame.from_dict(sheep_data, orient='index', columns=column_names)\ndf.to_csv('Sheep_bread_dataset.csv', index=None)","a676732c":"# load the dataset from csv (this could be skipped but just to be sure it is working)\n\ndf = pd.read_csv('Sheep_bread_dataset.csv')\ndf.head()","6283e709":"# create X, Y\n\nX = df.drop(['bread'], axis=1).values\n\n# encode the target (sheep bread)\nencoder = LabelEncoder()\ndf['bread'] = encoder.fit_transform(df['bread'])\nY = to_categorical(df['bread'])","81803608":"# split to train and test set\n\nX_train, X_test, y_train, y_test = train_test_split(X,Y, test_size=0.3, shuffle=True, stratify=Y, random_state=0)","b304f621":"#reshape data to fit model\nX_train = X_train.reshape(len(X_train),90,78,1)\nX_test = X_test.reshape(len(X_test),90,78,1)","2c7523a8":"#create model\nmodel = Sequential()\n#add model layers\nmodel.add(Conv2D(filters=64, kernel_size=3,strides=(2,1), padding='same', activation='relu', input_shape=(90,78,1)))\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(4, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","e6a651f2":"#train the model\nmodel.fit(X_train, y_train, batch_size=128, epochs=30)","3ea17f11":"# predict for train and test\ny_train_pred = model.predict_classes(X_train)\ny_test_pred = model.predict_classes(X_test)","d235609d":"# normalize predictions for confusion matrix\n\ndef normalize_value(predictions):\n    normalized = []\n    for prediction in predictions:\n        result = 0\n        for i in range(0,len(prediction)):\n            result += i * prediction[i]\n        normalized.append(int(result))\n    return normalized\n\nnormalized_y_train = normalize_value(y_train)\nnormalized_y_test = normalize_value(y_test)","4314ab76":"# create confusion matrix maps for train and test\n\ntrain_conf_matrix = np.zeros(16).reshape(4,4)\n\nfor index in range(0,len(normalized_y_train)):\n    train_value = normalized_y_train[index]\n    predicted_train_value = y_train_pred[index]\n    train_conf_matrix[train_value][predicted_train_value] += 1\n    \ntest_conf_matrix = np.zeros(16).reshape(4,4)\n\nfor index in range(0,len(normalized_y_test)):\n    test_value = normalized_y_test[index]\n    predicted_test_value = y_test_pred[index]\n    test_conf_matrix[test_value][predicted_test_value] += 1","374462a7":"# convert confusion matrix to dataframe (train)\n\ntrain_conf_matrix_df = pd.DataFrame(train_conf_matrix)\ntrain_conf_matrix_df.columns = ['Marino', 'Poll Dorset', 'Suffolk' , 'White Suffolk']\ntrain_conf_matrix_df.index = ['Marino', 'Poll Dorset', 'Suffolk' , 'White Suffolk']\ntrain_conf_matrix_df","8fa2aca5":"# convert confusion matrix to dataframe (test)\n\ntest_conf_matrix_df = pd.DataFrame(test_conf_matrix)\ntest_conf_matrix_df.columns = ['Marino', 'Poll Dorset', 'Suffolk' , 'White Suffolk']\ntest_conf_matrix_df.index = ['Marino', 'Poll Dorset', 'Suffolk' , 'White Suffolk']\ntest_conf_matrix_df","366467bf":"# print accuracy for train and test predictions\n\nprint('Accuracy train: %.3f test : %.3f' %(accuracy_score(normalized_y_train,y_train_pred),accuracy_score(normalized_y_test,y_test_pred)) )","5e14a1cd":"**CNN with Keras**: this is just a baseline that can be further improved"}}