{"cell_type":{"bad54ed0":"code","8766a89d":"code","d69128b0":"code","d46bdf60":"code","708f07d6":"code","e925de51":"code","1a5ce16b":"code","7bbfafc6":"code","61b4a696":"code","f7ddcce3":"code","698fd0ed":"code","56372064":"code","1606469c":"code","10fd9f4c":"code","e6acd366":"code","43d91c31":"code","6dd2b3dd":"code","33c41734":"code","bfb86d21":"code","058a367d":"code","50892692":"code","ce63ea2d":"code","97ff652b":"code","dc9d00f2":"code","0cc74504":"code","44bd1e1e":"code","23bc148d":"code","b2460a8a":"code","d97e4fa2":"code","b2e8d547":"code","6497a27e":"code","89293ee0":"code","cb541b56":"code","c559faf3":"code","58309a3f":"code","662037ec":"code","3806408c":"code","60c6d0e7":"code","30a8ea0f":"code","b1398b58":"code","b29e9fa4":"code","051c6b91":"code","f0b393a7":"code","1459fa24":"code","a230f017":"code","041f5e3e":"code","9e800d98":"code","b40aa3b1":"code","9958aa88":"code","89bb64c5":"code","323fde8f":"code","6ffeccdd":"code","8b1394b0":"code","14499783":"code","a3c0419c":"code","8ddddf06":"code","756fc376":"code","ee63919a":"code","a9bc5ddc":"code","487b3775":"code","cd2fd3fb":"code","5bc290c6":"markdown","1fb98112":"markdown","53c6f45e":"markdown","1a59e332":"markdown","3cf225a7":"markdown","833e3bd9":"markdown","0a4ca7fd":"markdown","da284188":"markdown","d18b28d0":"markdown","1a07ac9c":"markdown","30e1aa23":"markdown","ab286a08":"markdown","77f91f47":"markdown","419fc2e1":"markdown","43cdb6b2":"markdown","70c63f43":"markdown","0d40e3e7":"markdown","12012e0f":"markdown","2a815526":"markdown","e9bc793f":"markdown","0848232f":"markdown","54a50501":"markdown","441deb9a":"markdown","829a61ac":"markdown","634e152f":"markdown","a5741afc":"markdown","2547653e":"markdown","fe325a6b":"markdown","687fbb6f":"markdown","73007e95":"markdown","9039acf2":"markdown","4caece9b":"markdown","10e38023":"markdown","ebc40484":"markdown","b653aeb0":"markdown","0e3b4f99":"markdown","aeb0433c":"markdown","97baec4f":"markdown","0f9ecf2a":"markdown","31d28e6f":"markdown"},"source":{"bad54ed0":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \n%matplotlib inline \nimport seaborn as sns\nimport itertools \nplt.style.use('fivethirtyeight')","8766a89d":"\"\"\"import os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename)) \"\"\"\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head()","d69128b0":"df = df.rename(columns = {'BloodPressure':'BP', 'DiabetesPedigreeFunction':\"DPF\"}) #Rename column titles to make them shorter","d46bdf60":"df.info()","708f07d6":"df.describe()","e925de51":"zeroCols = ['Glucose', 'BP', 'SkinThickness', 'Insulin','BMI'] # Columns with incorrect Zero values \ndf2 = df.copy() # create a copy of the original dataframe \ndf2[zeroCols] = df2[zeroCols].replace(0,np.NaN) #Replace 0s with NaNs\ndf2.head()","1a5ce16b":"outcomes = df2[\"Outcome\"].value_counts()\nprint(outcomes)\n\n# 0 = No Diabetes\n# 1 = Diabetes ","7bbfafc6":"df.describe() # Original data loaded into a dataframe ","61b4a696":"df2.describe() # Data with 0s replaced with NaNs","f7ddcce3":"#df2.info()","698fd0ed":"null_values = (df2.isna().sum()\/len(df2))*100\nnull_values.drop(labels = ['Pregnancies','DPF','Age','Outcome'], inplace=True)\nprint(\"Column Name\" + \"     \" + \"% of Null Values\\n\")\nprint(null_values)","56372064":"dp = df2.groupby('Outcome').count() # Grouping the number of data points for both outcomes \n#print(dp)\noutcome_0 = dp.loc[0,:] # Number of data points related to Outcome = 0\noutcome_1 = dp.loc[1,:] # Number of data points related to Outcome = 1\nprint(\"Column Name\" + \"     \" + \"Outcome 1 to Outcome 2 Data Points Ratio\\n\") \nprint(outcome_1\/outcome_0)","1606469c":"hist = df2.hist(figsize = (20,20))\n# Disregard the outcome histogram ","10fd9f4c":"# Replace 0 values in BMI, BP (Blood Pressure), Glucose, Insulin, and Skin Thickness \n\ndf2['Glucose'].fillna(df2['Glucose'].median(), inplace = True)\ndf2['BMI'].fillna(df2['BMI'].median(), inplace = True)\ndf2['BP'].fillna(df2['BP'].mean(), inplace = True)\ndf2['Insulin'].fillna(df2['Insulin'].median(), inplace = True)\ndf2['SkinThickness'].fillna(df2['SkinThickness'].mean(), inplace = True)\n","e6acd366":"histZR = df2.hist(figsize = (20,20)) # Histogram of data with zeros replaced ","43d91c31":"# Heat Map\nhmap = sns.heatmap(df2.corr(), cmap = \"BrBG\", annot=True)\n#plt.savefig(r'C:\\Users\\Shakti\\Desktop\\Data Science\\Projects\\Pima-Indians-Diabetes-Project\\Data Visualizations\\heatmap.jpg')","6dd2b3dd":"df2.corr()","33c41734":"# Pair Plot \npplot=sns.pairplot(df2, hue = 'Outcome', palette=\"husl\")\nplt.show()\n#plt.savefig(r'C:\\Users\\Shakti\\Desktop\\Data Science\\Projects\\Pima-Indians-Diabetes-Project\\Data Visualizations\\pairplot.jpg')","bfb86d21":"out0 = df2[df2['Outcome']==0]\nout1 = df2[df2['Outcome']==1]","058a367d":"out0.describe()","50892692":"out1.describe()","ce63ea2d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom sklearn.utils.multiclass import unique_labels\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV","97ff652b":"features = (df2.iloc[:,:8]).values # feature values \ntarget = (df2.loc[:,'Outcome']).values # target values ","dc9d00f2":"# Train - Validation\/Test Split --> 70\/30 \ntestSize = 0.3\ntrainSize = 0.7\nvalidSize = 0.5\nrs = 42 # random state \n\nx_train, x, y_train, y = train_test_split(features,target,train_size = trainSize, random_state=rs)\nx_val, x_test, y_val, y_test = train_test_split(x,y,train_size=validSize, random_state = rs)","0cc74504":"print(f\"# of Training Data:{len(x_train)}\\n# of Validation Data: {len(x_val)}\\n# of Test Data:{len(x_test)}\")","44bd1e1e":"scaler = RobustScaler()\nxTrain_scaled = scaler.fit_transform(x_train)\nxVal_scaled = scaler.fit_transform(x_val)\nxTest_scaled= scaler.fit_transform(x_test)","23bc148d":"def modeleval(yTrue, yPredict, print_metrics,modelname):\n    # Area Under ROC Curve\n    auc = roc_auc_score(yTrue,yPredict)\n\n    # Confusion Matrix Evaluation \n    cm = confusion_matrix(yTrue,yPredict)\n\n    # True negative, Flase positive, false negative, true positive\n    tn, fp, fn, tp = confusion_matrix(yTrue,yPredict).ravel() \n\n    # True Positive Rate (Sensitivity)\n    tpr = tp\/(tp+fn)\n\n    # True Negative Rate (Specificity)\n    tnr = tn\/(tn+fp)\n\n    # Accuracy \n    acc = accuracy_score(yTrue,yPredict)\n    \n    # Model Metrics\n    mm = {\n        'AUC':auc,\n        'Confusion Matrix':cm,\n        'TN':tn,\n        'FP':fp,\n        'FN':fn,\n        'TP':tp,\n        'TPR':tpr,\n        'TNR':tnr,\n        'Accuracy':acc\n    }\n    \n    if print_metrics:\n        print(f\"Sensitivity:{mm['TPR']}\\n\\n\\\nSpecificity:{mm['TNR']}\\n\\n\\\nAUC of ROC:{mm['AUC']}\\n\\n\\\nAccuracy:{mm['Accuracy']}\\n\\n\")\n        \n        x = pd.crosstab(yTrue, yPredict, rownames=['True'], colnames=['Predicted'], margins=True)\n        print(f\"{x}\\n\")\n        plot_confusion_matrix(yTrue, yPredict,classes=np.array(['No Diabetes','Diabetes']),\n                      title='Confusion matrix: ' + modelname)\n        plt.show()\n    \n    return mm  ","b2460a8a":"def plotroc(yvt,yvp,modelname): # y_validation_truth & y_validation_prediction\n    f, t, thresh = roc_curve(yvt, yvp)\n    roc_auc = auc(f, t)\n    plt.title('Receiver Operating Characteristic: ' + modelname)\n    plt.plot(f, t, 'b', label = 'AUC = %0.2f' % roc_auc)\n    plt.legend(loc = 'lower right')\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.xlim([0, 1])\n    plt.ylim([0, 1])\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.show()","d97e4fa2":"# Plot Confusion Matrix\n\ndef plot_confusion_matrix(y_true, y_pred, classes,\n                          normalize=False,\n                          title=None,\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if not title:\n        if normalize:\n            title = 'Normalized confusion matrix'\n        else:\n            title = 'Confusion matrix, without normalization'\n\n    # Compute confusion matrix\n    cm = confusion_matrix(y_true, y_pred)\n    # Only use the labels that appear in the data\n    classes = classes[unique_labels(y_true, y_pred)]\n    \"\"\"if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm) \"\"\"\n\n    fig, ax = plt.subplots()\n    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n    ax.figure.colorbar(im, ax=ax)\n    # We want to show all ticks...\n    ax.set(xticks=np.arange(cm.shape[1]),\n           yticks=np.arange(cm.shape[0]),\n           # ... and label them with the respective list entries\n           xticklabels=classes, yticklabels=classes,\n           title=title,\n           ylabel='True label',\n           xlabel='Predicted label')\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n             rotation_mode=\"anchor\")\n\n    # Loop over data dimensions and create text annotations.\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            ax.text(j, i, format(cm[i, j], fmt),\n                    ha=\"center\", va=\"center\",\n                    color=\"white\" if cm[i, j] > thresh else \"black\")\n    fig.tight_layout()\n    return ax\n\n# This function was obtained from the Scikit-learn documentation for plotting the confusion matrix","b2e8d547":"# Initialize SVM Classifier \nsvm_ = SVC(kernel='rbf',class_weight = 'balanced',random_state = 1)\n\n#Train the model with the training data \nsvm_.fit(xTrain_scaled,y_train)\n\n#Validate the model \ny_valPredict = svm_.predict(xVal_scaled)","6497a27e":"svmModel = modeleval(y_val,y_valPredict,True,'SVM')","89293ee0":"plotroc(y_val,y_valPredict,\"SVM\")","cb541b56":"knnAUC = [] # AUCROC values \nvalScores = [] # Validation accuracy scores \nkvalues = [] # K values","c559faf3":"for i in range (1,21):            \n    knn = KNeighborsClassifier(i)\n    knn.fit(xTrain_scaled,y_train)\n\n    #Predict \n    knnPred = knn.predict(xVal_scaled)\n    \n    #Evaluation \n    knnModel = modeleval(y_val,knnPred,False,'k-NN')\n    \n    knnAUC.append(knnModel['AUC'])\n    valScores.append(knnModel['Accuracy'])\n    kvalues.append(i)\n    \nknnPerformance = pd.DataFrame({'AUC':knnAUC,'Accuracy':valScores})","58309a3f":"# Plot KNN Performance \nfigknn = plt.figure(figsize=(8,8))\nknnP = plt.subplot(111)\nknnP.plot(kvalues,knnAUC, label = 'AUC', marker = 'o')\nknnP.plot( kvalues,valScores,label = 'Accuracy', ls = '-')\nplt.xlabel('K-Values')\nplt.ylabel(\"AUCROC & Accuracy\")\nplt.title('K-NN Model Performance')\nplt.xticks(np.arange(1,21,1))\nknnP.legend()\nplt.show()\n#figknn.savefig(r'C:\\Users\\Shakti\\Desktop\\Data Science\\Projects\\Pima-Indians-Diabetes-Project\\Data Visualizations\\knnModelTuning.jpg')","662037ec":"knn = KNeighborsClassifier(11)\nknn.fit(xTrain_scaled,y_train)\n\n#Predict \nknnPred = knn.predict(xVal_scaled)","3806408c":"#Evaluation \nknnModel = modeleval(y_val,knnPred,True, 'k-NN')","60c6d0e7":"plotroc(y_val,knnPred, \"KNN\")","30a8ea0f":"regularization = ['l1', 'l2'] # Regularization methods \ncost = [0.001, 0.01, 0.1, 1, 10,100] \naucLogreg = np.zeros((len(cost),len(regularization)))","b1398b58":"row = 0\ncol = 0\n\nfor i in regularization:\n    for c in cost:\n        logreg = LogisticRegression(C = c,class_weight = 'balanced',penalty = i)\n        logreg.fit(xTrain_scaled,y_train)\n        lrPred=logreg.predict(xVal_scaled)\n        lrModel = modeleval(y_val,lrPred,False,'Logistic Regression')\n        \n        aucLogreg[row,col] = lrModel['AUC']\n        row += 1\n    row=0\n    col +=1","b29e9fa4":"# Plot KNN Performance \nfiglr = plt.figure(figsize=(8,8))\nlrP = plt.subplot(111)\nfor i in range(2):\n    lrP.plot(cost, aucLogreg[:,i], label = regularization[i], marker = 'o')\n#lrP.plot( kvalues,valScores,label = 'Accuracy', ls = '-')\nplt.xlabel('C-Values')\nplt.ylabel(\"AUCROC\")\nplt.title('Logistic Regression Model Performance: Regularization')\nplt.xscale('log')\nplt.xticks(cost)\nlrP.legend()\nplt.show()","051c6b91":"logreg = LogisticRegression(C=0.01,class_weight = 'balanced',penalty = 'l2')\n\n#Train\nlogreg.fit(xTrain_scaled,y_train)","f0b393a7":"#Predict\nlrPred=logreg.predict(xVal_scaled)","1459fa24":"#Evaluate\nlrModel = modeleval(y_val,lrPred,True,'Logistic Regression')","a230f017":"plotroc(y_val,lrPred, \"Logistic Regression\")","041f5e3e":"rf = RandomForestClassifier(random_state = 5)","9e800d98":"#Train\nrf.fit(x_train,y_train)","b40aa3b1":"#Predict\nrfPred=rf.predict(x_val)","9958aa88":"#Evaluate\nrfModel = modeleval(y_val,rfPred,True,'Random Forests')","89bb64c5":"plotroc(y_val,rfPred, \"Random Forests\")","323fde8f":"# The parameter grid outlines which paramters you want to optimize and the corresponsind hyperparameter values you want to test.\nparam_grid = { \n    'n_estimators': [10,50,100,200,300,500,600],\n    'max_features': ['auto', 'sqrt', 'log2'],\n}","6ffeccdd":"# Initialize the grid search model\n\nrf_gs = GridSearchCV(estimator = RandomForestClassifier(random_state = 5),\n                    param_grid = param_grid, cv=5)\n\n#Train the model\nrf_gs.fit(x_train,y_train)","8b1394b0":"#obtain the best paramters determined by the grid search\nprint(f\"The best paramters for the Random Forest model are: \\n {rf_gs.best_params_}\")","14499783":"rf_custom = RandomForestClassifier(max_features= 'auto',n_estimators=200,random_state = 5)\nrf_optimal = RandomForestClassifier(max_features= 'log2',n_estimators=100,random_state = 5)","a3c0419c":"#Train\nrf_custom.fit(x_train,y_train)\nrf_optimal.fit(x_train,y_train)","8ddddf06":"#Predict\nrf_customPred=rf_custom.predict(x_val)\nrf_optimalPred=rf_optimal.predict(x_val)\n\n#Evaluate\nprint(\"----------------------------------Metrics for the CUSTOM Random Forests Model----------------------------------\\n\")\nrf_customModel = modeleval(y_val,rf_customPred,True,'Random Forests (Custom)')\nplotroc(y_val,rf_customPred, \"Random Forests (Custom)\")\nprint(\"----------------------------------Metrics for the OPTIMAL Random Forests Model----------------------------------\\n\")\nrf_optimalModel = modeleval(y_val,rf_optimalPred,True,'Random Forests (Optimal)')\nplotroc(y_val,rf_optimalPred, \"Random Forests (Optimal)\")","756fc376":"theModels = []\ntheModels.append(('SVM',svm_))\ntheModels.append(('k-NN', knn))\ntheModels.append(('Logistic Regresion', logreg))\ntheModels.append(('Random Forests',rf_custom))\n#model_names = ['SVM','k-NN','Logistic Regression','Random Forests']\n#models = [svm_,knn,logreg,rf_customModel]","ee63919a":"#Iterate over the models\ntheAcc = []\ntheAUC = []\n# xTest_scaled= scaler.fit_transform(x_test)\nfor name,model in theModels:\n    if name == 'Random Forests':\n        modelPred = model.predict(x_test)\n    else:\n        modelPred = model.predict(xTest_scaled)\n    \n    modelMetrics = modeleval(y_test,modelPred,False,name)\n    \n    #msg = \"{name}: {modelMetrics['Accuracy']}\".format(name,)\n    msg = name + \"\\n --> Accuracy: {:.2f} %\\n --> AUC: {:.2f}\\n\".format(modelMetrics['Accuracy']*100,modelMetrics['AUC'])\n    print(msg)\n    \n    theAcc.append(modelMetrics['Accuracy'])\n    theAUC.append(modelMetrics['AUC'])","a9bc5ddc":"y_pos = np.arange(len(theModels))\nmname = []\nfor i in range(len(theModels)):\n    mname.append(theModels[i][0])\n    \nfigModel = plt.figure(figsize=(8,8))\nplt.bar(y_pos + 0.00,theAUC,align='center',alpha = 0.65,width = 0.25,label = 'AUCROC')\nplt.plot(y_pos,theAcc,color = 'r',label = 'Accuracy')\n#plt.bar(y_pos + 0.25,theAUC,align='center',alpha = 0.65,width = 0.25,label = 'AUCROC')\nplt.xticks(y_pos,mname)\nplt.title('Model Accuracy and AUCROC')\nplt.ylabel('Accuracy\/AUC')\nplt.xlabel('Model')\nplt.legend()\nplt.show()\n#figModel.savefig(r'C:\\Users\\Shakti\\Desktop\\Data Science\\Projects\\Pima-Indians-Diabetes-Project\\Data Visualizations\\ModelTesting.jpg')","487b3775":"knnTestPred = knn.predict(xTest_scaled)\nplot_confusion_matrix(y_test, knnTestPred,classes=np.array(['No Diabetes','Diabetes']),\n                      title='Confusion matrix: ' + 'k-NN Model')\n#plt.show()","cd2fd3fb":"f, t, thresh = roc_curve(y_test, knnTestPred)\nroc_auc = auc(f, t)\nfigKnnTest = plt.figure(figsize=(8,8))\nplt.title('Receiver Operating Characteristic: ' + 'k-NN Model')\nplt.plot(f, t, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","5bc290c6":"## Data Analysis <br>\nThe data will now be explored more in-depth ","1fb98112":"### Import Algorithms","53c6f45e":"According to the ratios displayed above, the ratio for the number of data points is around 0.5 (plus-min 0.04). It would be safe to conclude that the ratio between the number of data points for Skin Thickness and Insulin for both outcomes are within the same range as other features. ","1a59e332":"## Import Tools ","3cf225a7":"**GridSearchCV** <br>\n\nGridSearchCV is a tool that is used to help with hyperparameter tuning to help pick the optimal hyperparameters. It can be applied over different typse of models, but in this case, we will only be applying it to the Randon Forest model since this model has a lot of hyperparameters which can affect the model's performance. It is an important tool which significantly help improve the model's design. ","833e3bd9":"**The zeros have been replaced with mean\/median values**  <br>\nIf the NaN records were removed, half of the records in the dataset would have to be removed as the Insulin data by itself had 48% NaN values. ","0a4ca7fd":"From a first glance, it seems that the data for Outcome 1 has higher descritive stats values. However, there is also a **high standard deviation** and  the distrbution for all the features are not 'normal'. ","da284188":"**Observations:** <br> Using the validation set, the different kernels for SVM were tested (Linear, RBF, Sigmoid, and Poly) to gage the model performance. It was determed that the RBF (Radial Basis Function) provided the best results based on the metrics displayed above. ","d18b28d0":"### Feature Scaling \nSome algorithms require the features to be **scaled\/standardized\/normalized**. There are different ways to accomplish this, but the method may vary based on the spread of the data. We will use Sklearn's **Robust Scaler** which uses the inerquartile range to scale the values.\n\nRequired: KNN, Logistic Regression, SVM <br>\nNot Required: Random Forests ","1a07ac9c":"**Data Scaling**","30e1aa23":"**Descriptive Stats Comparison** <br>\nComparison of descriptive stats between the original data and the new data with 0s replaced with NaNs","ab286a08":"**Notes:** <br>\n1. There is minimal correlation between Skin Thickness & Insulin to the Outcomes. \n2. Relatively, Glucose (0.49) and BMI (0.31) have the highest correlation with the Outcome ","77f91f47":"### 1. SVM ","419fc2e1":"### 3. Logistic Regression","43cdb6b2":"**Data Prep** <br>\nThe data will be split into training\/validation\/test sets","70c63f43":"### 2. KNN (k-Nearest Neighbour)","0d40e3e7":"## Simple EDA\nExplore the data to get a better understanding of different trends, correlations, patterns, etc. ","12012e0f":"## Conclusion\n\nFrom the information above, we can not that in this project, k-NN was provided the best accuracy and AUCROC. Random Forests was also another model which performed relatively well. It was surpring to see the SVM model perform so poorly after getting an AUC of almost 76% on the validation set. However, it is an important display of how models may perform on unseen data. <br>\n\n### Improvements\n\nThis project covered a lot of different concepts which are helpful in building machine learning models, such as data manipulation, data exploration, data scaling\/normalization, and model evaluation. However, there are always ways to improve. For example, an ensemble voting method can be used to use multiple models to determine the final outcome. When working with medical data, it is also important to consider an optimal value for tradeoff between false negatives and false positives. Feature engineering techniques can also help enhane model performance. For instance, it can be noted that between some features, certain ranges of values consisted of more points relating to non-diabetic\/diabetic patients. That information can be used to derive additional feature can help the model make more accuracy predictions. ","2a815526":"**Evaluate the SVM Model**","e9bc793f":"### Machine Learning Models\n\n**Evaluation Metrics**<br>\nThese metrics give us a better understanding of how our model performs. Ideally, AUC of ROC should be as close to 1 as possible. Sensititivy is a measure of the proportion of actual positives that are classified (e.g.the percentage of sick people who are correctly identified as having the condition). Sensitivity is a measure of actual negatives that are correctly classified (e.g. the percentage of healthy people who are correctly identified as not having the condition). Both of those metrics are used to measure the AUC. <br><br>\nAccuracy alone is not a good enough measure. If there were 150 (Class 1) and 10 (Class 2) data points. Even if the model misclassifies all of the Class 2 data points, the accuracy would still be 150\/160 (93.75%). In cases which imbalances in data it is vital to use other metrics to measure the performance of the model. ","0848232f":"# Forecasting Onset of Diabetes Mellitus\n\nThis project focuses on predicting the whether or not a patient has diabetes. The data is cleaned, analyzed, and used to develop a predictive model.","54a50501":"**Rebuild Model** <br>\nRebuild the model with the optimal parameters. --> K=10","441deb9a":"It is possible that the **presence\/lack** of Skin Thickness and Insulin data is related to a person having diabetes. To check, the ratio between the number of data points for each outcome was noted. If the ratio for all the features is within the same range, then it could be assumed that there might not be a relationship as mentioned previously. However, if ratio is significantly skewed one way (ex: records of diabetes patients have significantly more data points of insulin collected), it could be an indicator of a relationship between the missing values and a patient having diabetes. ","829a61ac":"### Approach <br>\n\n**Imbalanced Data** <br>\nApproximately 35% of the data has an outcome of 1, and 65% of the data has an outcome of 0. The imbalance is not extreme but learning to address such problems is still important when developming machine learning models. In this approach an ensemble learning method will be used with **SVM, Logistic Regression, Random Forests, and KNN** \n\n\n**AUROC** will be used to gage a models' ability to correctly classify the data. The models will also be \"penalized\" or optimized to handle the imbalanced data as best as possible. For more information, look into ROC curves.\n\n**Train\/Validation\/Test Split**:The data will be split into three groups. <br>\nTraining data: data used to train the model <br>\nValidation: data used to tune the hyperparameters <br> \nTest: data used for final evaluation of the model <br>\n--> Ratio: 70\/15\/15","634e152f":"**Note:** From the pair plot, it is hard to find any features which clearly distinguish between the outcomes. <br>\n\n**Next:** Lets split the data for both outcomes and compare their descriptive stats. ","a5741afc":"**Notes** <brk>\n    \n    1. Do the minimum values of 0 make sense for all the different features ??  \n    2. There are no null value data points in the original data \n    3. All the data is in the correct data type format (int or float). \n    \n    The zero values in certain columns (Glucose, BP, Skin Thickness, Insuline, BMI) will be replaced with 'NaN' until further\n    analysis is conducted on the data. \n    \n    It is really important to handle these zero values as they affect the statistics of the data. When they are replaced by \n    NaN, Python automatically disregards them when calculating metrics such as mean, median, percentile, etc. ","2547653e":"**Note:** There is an big imbalance between the number of records for both outcomes. This must be taken into consideration when training the model to predict the onset of diabetes. ","fe325a6b":"**The results obtains so far for the Random Forest model are based on default hyperparamters in the model. The AUCROC is only 0.61 and the accuracy is 67.83%. To improve the model, we will have to optimize the hyperparamters.**","687fbb6f":"**Based on the skewness of the appropriate features, the 0 values will be replaced. **","73007e95":"## Model Testing\n\nThe models will be tested on the **test data** to observe their performance on unseen data. This will help gage which model performs best on new data. ","9039acf2":"As it can be noted from the graph above, **K=11** provides the highest AUCROC and Accuracy for the K-NN Model. With \n**AUCROC = 71.40%** and **Accuracy = 75.65%** ","4caece9b":"## Columns \n\nPregnancies: Number of times pregnant <br><br>\nGlucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test <br><br>\nBloodPressure: Diastolic blood pressure (mm Hg) <br> <br>\nSkinThickness: Triceps skin fold thickness (mm) <br><br>\nInsulin: 2-Hour serum insulin (mu U\/ml) <br><br>\nBMI: Body mass index (weight in kg\/(height in m)^2)<br><br>\nDiabetes Pedigree Function: Diabetes pedigree function<br><br>\nAge: Age (years)<br><br>\nOutcome: Class variable (0 or 1) 268 of 768 are 1, the others are 0","10e38023":"## Data Preparation (Machine Learning)\n\nData needs to prepared to be used in machine learning models. If there is categorical data, it would need to be encoded. Numerical data would need to be scaled. \n\nSplitting the data into training and testing sets is also very important.It is never good to train your model on some data, and then test it on that same data. There are different approaches to help improve generalization in a model, but it is always important to test the model on data it has never seen before.","ebc40484":"## Data Cleaning <brk>\n    \nExplore the data to look for any inconsistencies. <br>\n\nSome good procedures when going through data for the first time are:\n1. Check number of rows & columns --> df.shape\n2. Check for null values \n3. Check data types of each column \n4. Note any imbalances in data, such as one target outcome having significantly more data records than others","b653aeb0":"The **Custome RF Model** was made using paramters tested without GridSearch. It provided a beter a AUCROC comapred to the the **Optimal RF Model** created using GridSearch. It is important to note that in this case, the sensitivity, specificity, and AUC are primarily being used to asses the model performance. GridSearch also asses other metrics to evaluate the model performance which can be seen found through the documentation. In this case, we will use the custom rf model. ","0e3b4f99":"### 4. Random Forests","aeb0433c":"**Note:** After replacing the 0s, 'SkinThickness' and 'Insulin' data has been significantly reduced. Almost 50% of the Insulin values are Null\/missing and 30% of SkinThickness values are Null\/missing.","97baec4f":"**-->** Rebuild the model with the optimal parameters.","0f9ecf2a":"**Regularization** <br>\nRegularization is a method is used to reduce the risk of overfitting a model. In our model, the 'l2' (Ridge Regression) regularization is used, as it can be seen that it helps obtain a higher AUROC. C is a control variable which helps control the Lambda operator in the regularization function. It is the inverse of the if regularization strength (a.k.a Lambda) <br>\n\nThe reason C=0.01 was chosen over 0.001 (gives highest AUROC in the graph) was because a C=0.01 provides a better trade off between Specificity and Sensitivity.","31d28e6f":"## Load Data"}}