{"cell_type":{"d98f7bff":"code","c7725272":"code","b49ddb4c":"code","374bfc80":"code","8c6be950":"code","c2ebb182":"code","cdd48051":"code","69f4dae3":"code","e0760fd0":"code","a21b4982":"code","9ec3ce98":"code","4b28b99d":"code","d90f7bfc":"code","f4a4bbc8":"code","b37c30c7":"code","eda7c93b":"code","f597458f":"code","98a32958":"code","2e416e58":"code","86870f60":"code","dcb51afc":"code","6cc3738d":"code","9672dc1d":"markdown","846c4470":"markdown","f0862ebe":"markdown","39b6bb1a":"markdown","5b1ecf42":"markdown","470de27b":"markdown","3a77dcef":"markdown","155fb7b6":"markdown","f0c799b0":"markdown","6fb1280f":"markdown","f9d82a3d":"markdown","67aad754":"markdown","a728277b":"markdown","316a8acf":"markdown","f5bbf423":"markdown","23a90054":"markdown","27d60a0a":"markdown","4aa571f7":"markdown","b227293a":"markdown"},"source":{"d98f7bff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport librosa\nfrom librosa import feature\nimport librosa.display\n\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport keras\nfrom keras.layers import *\nfrom keras import metrics\nfrom keras.utils import to_categorical\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\n\nimport csv\n\nimport IPython.display as ipd\n\nfirstfilepath = '..\/input\/tabla-taala-dataset\/tablaDataset\/addhatrital\/addhatrital01.wav'\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7725272":"x, sr = librosa.load(firstfilepath)\nprint(type(x), type(sr))","b49ddb4c":"ipd.Audio(firstfilepath)","374bfc80":"plt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)","8c6be950":"chromagram = librosa.feature.chroma_stft(x, sr=sr)\nplt.figure(figsize=(15, 5))\nlibrosa.display.specshow(chromagram, x_axis='time', y_axis='chroma')","c2ebb182":"example_rmse = librosa.feature.rms(x)\nprint(example_rmse.shape)\nprint(np.mean(example_rmse))","cdd48051":"example_spectral_centroids = librosa.feature.spectral_centroid(x, sr=sr)[0]\nexample_spectral_centroids.shape\nframes = range(len(example_spectral_centroids))\nt = librosa.frames_to_time(frames)\ndef normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(example_spectral_centroids), color='r')\nprint(np.mean(example_spectral_centroids))","69f4dae3":"example_spectral_bandwidth = librosa.feature.spectral_bandwidth(x, sr=sr)[0]\nexample_spectral_bandwidth.shape\nframes = range(len(example_spectral_bandwidth))\nt = librosa.frames_to_time(frames)\ndef normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(example_spectral_bandwidth), color='r')\nprint(np.mean(example_spectral_bandwidth))","e0760fd0":"example_spectral_rolloff = librosa.feature.spectral_rolloff(x, sr=sr)[0]\nexample_spectral_rolloff.shape\nframes = range(len(example_spectral_rolloff))\nt = librosa.frames_to_time(frames)\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(example_spectral_bandwidth), color='r')\nprint(np.mean(example_spectral_rolloff))","a21b4982":"n0 = 9000\nn1 = 9100\nplt.figure(figsize=(14, 5))\nplt.plot(x[n0:n1])\nplt.grid()\nzero_crossings = librosa.zero_crossings(x[n0:n1], pad=False)\nprint(sum(zero_crossings))","9ec3ce98":"mfccs = librosa.feature.mfcc(x, sr=sr)\nprint(mfccs.shape)\nlibrosa.display.specshow(mfccs, sr=sr, x_axis='time')\nprint(np.mean(mfccs))","4b28b99d":"header = 'chroma_stft rms spectral_centroid spectral_bandwidth rolloff zero_crossing_rate'\nfor i in range(1, 21):\n    header += f' mfcc{i}'\nheader += ' label'\nheader = header.split()","d90f7bfc":"file = open('dataset.csv', 'w', newline='')\nwith file:\n    writer = csv.writer(file)\n    writer.writerow(header)\ntaals = 'addhatrital bhajani dadra deepchandi ektal jhaptal rupak trital'.split()\nfor t in taals:\n    for filename in os.listdir(f'..\/input\/tabla-taala-dataset\/tablaDataset\/{t}'):\n        taalfile = f'..\/input\/tabla-taala-dataset\/tablaDataset\/{t}\/{filename}'\n        y, sr = librosa.load(taalfile, mono=True, duration=30)\n        rms = librosa.feature.rms(y=y)\n        chroma_stft = librosa.feature.chroma_stft(y=y, sr=sr)\n        spec_cent = librosa.feature.spectral_centroid(y=y, sr=sr)\n        spec_bw = librosa.feature.spectral_bandwidth(y=y, sr=sr)\n        rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)\n        zcr = librosa.feature.zero_crossing_rate(y)\n        mfcc = librosa.feature.mfcc(y=y, sr=sr)\n        to_append = f' {np.mean(chroma_stft)} {np.mean(rms)} {np.mean(spec_cent)} {np.mean(spec_bw)} {np.mean(rolloff)} {np.mean(zcr)} '    \n        for e in mfcc:\n            to_append += f' {np.mean(e)}'\n        to_append += f' {t}'\n        file = open('dataset.csv', 'a', newline='')\n        with file:\n            writer = csv.writer(file)\n            writer.writerow(to_append.split())","f4a4bbc8":"data = pd.read_csv('dataset.csv')\nprint(data)","b37c30c7":"d = dict(zip(taals, range(0,8)))\nd","eda7c93b":"data['label'] = data['label'].map(d)\nprint(data)","f597458f":"y = data['label']\nX = data.drop('label', axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\nprint(y_train)\nprint(y_test)","98a32958":"\nmodel = keras.models.Sequential()\nmodel.add(Dense(128, input_dim = 26, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(8, activation='softmax'))\n","2e416e58":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","86870f60":"model.fit(X_train, y_train, batch_size = 10, epochs = 300, verbose = 1)","dcb51afc":"loss = model.evaluate(X_test, y_test, verbose=1)","6cc3738d":"model.summary()","9672dc1d":"The spectral rolloff is a frequency below which a certain percentage of spectral energy lies.","846c4470":"Creating a Keras Sequential model. The last layer has a softmax activation function.","f0862ebe":"The center of mass of the signal, e.g. the weighted mean of frequencies in the signal.","39b6bb1a":"Compiling the model with the following loss function, optimizer, and metric.","5b1ecf42":"The RMSE (root mean squared energy) of the signal, defined as\n\n![CodeCogsEqn.gif](attachment:CodeCogsEqn.gif)\n\nwhere x(n) is a time signal.","470de27b":"A chroma vector a a 12-element feature vector of the relative energy of each pitch class in the signal. The following plot is a chromagram of the first example file.","3a77dcef":"Mapping the taal names to integers from 0 to 7.","155fb7b6":"Summary of the model.","f0c799b0":"This is a quick feature analysis of the very first file in our dataset, addhatrital01.wav. This is the raw .wav file.","6fb1280f":"The Mel-Frequency Cepstral Coefficients (MFCCs) are a set of features which describe the shape of a spectral envelope.","f9d82a3d":"The zero crossing rate is the rate at which the signal changes sign (crosses y = 0). ","67aad754":"Creating the dataframe.","a728277b":"Order p spectral bandwidth is defined as \n\n![CodeCogsEqn%20%281%29.gif](attachment:CodeCogsEqn%20%281%29.gif)\n\nwhere S(k) is the spectral magnitude at frequency bin k, f(k) is the frequency at frequency bin k, and fc is the spectral centroid. ","316a8acf":"**Neural Network for Tabla Taal Classification**\nAs a student of tabla, I thought this would be an interesting problem to tackle. I used Keras libraries and librosa to extract features from the raw .wav files. ","f5bbf423":"The following code performs an 80\/20 train\/test split on the data after splitting it into train and test data. The order of the data is also randomized. The label data is also changed to one-hot encoding.","23a90054":"Features: Chroma features, RMSE, Spectral Centroid, Spectral Bandwidth, Spectral Rolloff, Zero Crossing Rate, MFCCs","27d60a0a":"Accuracy:","4aa571f7":"Training the model.","b227293a":"This is a wave plot of the first example file."}}