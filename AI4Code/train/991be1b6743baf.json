{"cell_type":{"8c335573":"code","16c1f600":"code","8146f1a9":"code","41c50ed2":"code","dc8764a2":"code","2a818170":"code","ac467681":"code","e36840cf":"code","baf0f407":"code","6d687100":"code","a1f5184e":"code","03e3bede":"code","2cb10336":"code","a5715fee":"code","8e3f4c0c":"code","34481233":"code","6a9b4b86":"code","082de413":"code","617255b6":"code","28d4430c":"markdown","00974406":"markdown","681faa3e":"markdown"},"source":{"8c335573":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16c1f600":"df = pd.read_csv('..\/input\/wall-art-sales\/Wall Art sales - Sheet1.csv', encoding='ISO-8859-2')\ndf.head(10)","8146f1a9":"df.isnull().sum()","41c50ed2":"cnt_srs = df['Link'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Blues',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Link Distribution',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Link\")","dc8764a2":"cnt_srs = df['Brand'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Reds',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Brand Distribution',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Brand\")","2a818170":"cnt_srs = df['Shipping'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Greens',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Shipping Distribution',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Shipping\")","ac467681":"cnt_srs = df['Discount'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Purples',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Discount Distribution',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Discount\")","e36840cf":"# Count Plot\nplt.style.use(\"classic\")\nplt.figure(figsize=(10, 8))\nsns.countplot(df['Brand'], palette='Accent_r')\nplt.xlabel(\"Brand\")\nplt.ylabel(\"Count\")\nplt.title(\"Brand\")\nplt.xticks(rotation=45, fontsize=8)\nplt.show()","baf0f407":"sns.countplot(x=\"Shipping\",data=df,palette=\"GnBu_d\",edgecolor=\"black\")\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\nplt.title(\"Shipping Delivery Time\")\n# changing the font size\nsns.set(font_scale=1)","6d687100":"#Code from Gabriel Preda\n#plt.style.use('dark_background')\ndef plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set2')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","a1f5184e":"plot_count(\"Discount\", \"Discount\", df,4)","03e3bede":"ax = df['Brand'].value_counts().plot.barh(figsize=(14, 6))\nax.set_title('Brand Distribution', size=18)\nax.set_ylabel('Brand', size=14)\nax.set_xlabel('Count', size=14)","2cb10336":"ax = df['Shipping'].value_counts().plot.barh(figsize=(14, 6), color='r')\nax.set_title('Shipping Distribution', size=18)\nax.set_ylabel('Shipping', size=14)\nax.set_xlabel('Count', size=14)","a5715fee":"fig = px.bar(df[['Brand','Shipping']].sort_values('Shipping', ascending=False), \n                        y = \"Shipping\", x= \"Brand\", color='Shipping', template='ggplot2')\nfig.update_xaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\nfig.update_layout(title_text=\"Brands & Shipping Delivery Time\")\n\nfig.show()","8e3f4c0c":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df.groupby('Brand').size()\/df['Shipping'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values,marker_colors = px.colors.sequential.speed, hole=.6)])\nfig.show()","34481233":"fig = px.bar(df, x= \"Brand\", y= \"Shipping\", color_discrete_sequence=['crimson'], title='Brand & Shipping Delivery Time')\nfig.show()","6a9b4b86":"ax = sns.countplot(x = 'Link',data=df,order=['Copper Metal Decorative Wall Art', 'Gold Metal Decorative With Led Wall Art', 'Silver Metal Decorative Wall Art', 'Brown Metal Mesh Leav Wall Decor With Led'])\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()+0.2, p.get_height()))\nplt.xticks(rotation=45) ","082de413":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Brand)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"white\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","617255b6":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Link)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","28d4430c":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSyTsGiMYbBTiddNwxhKV7xjgbxZewdlhoL7g&usqp=CAU)play.google.com","00974406":"#Avoiding Clumsy\/messy plotting by Sayantan Sadhu https:\/\/www.kaggle.com\/sayantansadhu\/beginner-s-approach-to-data-visualization","681faa3e":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke"}}