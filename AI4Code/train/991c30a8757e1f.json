{"cell_type":{"3d305a67":"code","382bd237":"code","88f43220":"code","b70ab5f6":"code","ac2909b4":"code","df4d9854":"code","78b88229":"code","f75cb707":"code","cd756201":"code","be5d4378":"code","ca282c83":"code","9d428c48":"code","4015239b":"code","5d4f5686":"code","219f7871":"code","00c1abe5":"code","9e995340":"code","548900d2":"code","8e67aa71":"code","120e0fee":"code","3b173fb9":"code","69c26b3a":"code","ca03fbaa":"code","b9ff629f":"code","0b466e51":"code","4dc858bf":"code","c3d5f286":"code","bbd68cee":"code","fb1eea4c":"code","b2cff3ed":"code","8d3c861a":"code","19797195":"code","01c05825":"code","e2ad1014":"code","1f28cfcc":"code","5fe0f44b":"code","110491dc":"code","8c5ab876":"markdown","76576990":"markdown","de78918e":"markdown","716cd880":"markdown","cbd4737d":"markdown","d5498d34":"markdown","289bb843":"markdown","c0dd2c97":"markdown","768d2fd7":"markdown","d43a7c98":"markdown","dd5bb4b4":"markdown","d940519b":"markdown","61e1134d":"markdown","787b735d":"markdown","78d094bc":"markdown","a5b06c56":"markdown","6999825f":"markdown","c2614444":"markdown","6ad1edf3":"markdown"},"source":{"3d305a67":"#!pip3 install tensorflow==1.15\n#!pip3 install keras\n#!pip3 install -U scikit-learn","382bd237":"import numpy as np\nimport matplotlib.pylab as plt\nimport pandas as pd\nimport os\nfrom sklearn import preprocessing, model_selection\n\nfrom keras.layers import Input, Dense, BatchNormalization, Dropout\nfrom keras import optimizers, regularizers, initializers, Model\nimport keras.backend as K\n\nimport tensorflow as tf\nprint(tf.__version__)\n\n%matplotlib inline","88f43220":"train = pd.read_csv('train.csv')","b70ab5f6":"print(train.columns)","ac2909b4":"train.drop('Id', axis=1, inplace=True)\nprint('train set size: ', train.shape)\ntrain.head()","df4d9854":"not_nulls = {}\nfor colname in train.columns :\n    not_nulls[colname] = train[colname].notnull().sum()\/train.shape[0]\n    \nprint(not_nulls)","78b88229":"cols = ['Alley','FireplaceQu','PoolQC','Fence','MiscFeature']\ntrain = train.drop(cols, axis=1)\nprint('train set size after removing nan columns: ', train.shape)","f75cb707":"fig = plt.figure(figsize=(11, 5))\n\nax = fig.add_subplot(2,4,1)\nax.scatter(train.LotArea, train.SalePrice\/1e3)\nax.set_xlabel('LotArea')\nax.set_ylabel('SalePrice (thousand $)')\n\nax = fig.add_subplot(2,4,2)\nax.scatter(train.GrLivArea, train.SalePrice\/1e3)\nax.set_xlabel('GrLivArea')\n\nax = fig.add_subplot(2,4,3)\nax.scatter(train.YearBuilt, train.SalePrice\/1e3)\nax.set_xlabel('YearBuilt')\n\nax = fig.add_subplot(2,4,4)\nax.scatter(train.TotalBsmtSF, train.SalePrice\/1e3)\nax.set_xlabel('TotalBsmtSF')\n\nax = fig.add_subplot(2,4,5)\nax.scatter(train['1stFlrSF'], train.SalePrice\/1e3)\nax.set_xlabel('1stFlrSF')\n\nax = fig.add_subplot(2,4,6)\nax.scatter(train.TotRmsAbvGrd, train.SalePrice\/1e3)\nax.set_xlabel('TotRmsAbvGrd')\n\nax = fig.add_subplot(2,4,7)\nax.scatter(train.GarageArea, train.SalePrice\/1e3)\nax.set_xlabel('GarageArea')\n\nax = fig.add_subplot(2,4,8)\nax.scatter(train['2ndFlrSF'], train.SalePrice\/1e3)\nax.set_xlabel('2ndFlrSF')\n\nfig.tight_layout();","cd756201":"train = train.drop(train[(train['LotArea']>60000) & (train['SalePrice']<400000)].index)\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\ntrain = train.drop(train[(train['TotalBsmtSF']>4000)].index)\ntrain = train.drop(train[(train['1stFlrSF']>4000)].index)","be5d4378":"print('External condition: ', train.ExterCond.unique())\nprint('Sale condition: ', train.SaleCondition.unique())","ca282c83":"fig = plt.figure(figsize=(6,2.5))\n\nax = fig.add_subplot(1,2,1)\ntrain.ExterCond.value_counts().plot(kind='bar')\nax.set_ylabel('counts')\n\nax = fig.add_subplot(1,2,2)\ntrain.SaleCondition.value_counts().plot(kind='bar');\n\nfig.tight_layout()","9d428c48":"train['LotFrontage'] = train['LotFrontage'].fillna(train['LotFrontage'].mean())\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mean())\ntrain['GarageYrBlt'] = train['GarageYrBlt'].fillna(train['GarageYrBlt'].mean())","4015239b":"fig = plt.figure(figsize=(13,5))\n\nax = fig.add_subplot(2,6,1)\ntrain.MasVnrType.value_counts().plot(kind='bar')\nax.set_title('MasVnrType')\n\nax = fig.add_subplot(2,6,2)\ntrain.BsmtQual.value_counts().plot(kind='bar');\nax.set_title('BsmtQual')\n\nax = fig.add_subplot(2,6,3)\ntrain.BsmtCond.value_counts().plot(kind='bar');\nax.set_title('BsmtCond')\n\nax = fig.add_subplot(2,6,4)\ntrain.BsmtExposure.value_counts().plot(kind='bar');\nax.set_title('BsmtExposure')\n\nax = fig.add_subplot(2,6,5)\ntrain.BsmtFinType1.value_counts().plot(kind='bar');\nax.set_title('BsmtFinType1')\n\nax = fig.add_subplot(2,6,6)\ntrain.BsmtFinType2.value_counts().plot(kind='bar');\nax.set_title('BsmtFinType2')\n\nax = fig.add_subplot(2,6,7)\ntrain.Electrical.value_counts().plot(kind='bar');\nax.set_title('Electrical')\n\nax = fig.add_subplot(2,6,8)\ntrain.GarageType.value_counts().plot(kind='bar');\nax.set_title('GarageType')\n\nax = fig.add_subplot(2,6,9)\ntrain.GarageFinish.value_counts().plot(kind='bar');\nax.set_title('GarageFinish')\n\nax = fig.add_subplot(2,6,10)\ntrain.GarageQual.value_counts().plot(kind='bar');\nax.set_title('GarageQual')\n\nax = fig.add_subplot(2,6,11)\ntrain.GarageCond.value_counts().plot(kind='bar');\nax.set_title('GarageCond')\n\nfig.tight_layout()","5d4f5686":"train['MasVnrType'] = train['MasVnrType'].fillna('None');\ntrain['BsmtQual'] = train['BsmtQual'].fillna('TA');\ntrain['BsmtCond'] = train['BsmtCond'].fillna('TA');\ntrain['BsmtExposure'] = train['BsmtExposure'].fillna('No')\ntrain['BsmtFinType1'] = train['BsmtFinType1'].fillna('Unf')\ntrain['BsmtFinType2'] = train['BsmtFinType2'].fillna('Unf')\ntrain['Electrical'] = train['Electrical'].fillna('SBrkr')\ntrain['GarageType'] = train['GarageType'].fillna('Attchd')\ntrain['GarageFinish'] = train['GarageFinish'].fillna('RFn')\ntrain['GarageQual']= train['GarageQual'].fillna('TA')\ntrain['GarageCond'] = train['GarageCond'].fillna('TA')","219f7871":"not_nulls = {}\nfor colname in train.columns :\n    not_nulls[colname] = train[colname].notnull().sum()\/train.shape[0]\n    \nprint(not_nulls)","00c1abe5":"dt = {}\nfor col in train.columns : \n    dt[col] = train[col].dtype\n\nprint(dt)\ntrain.head()","9e995340":"le = preprocessing.LabelEncoder()\nfor col in train.columns :\n    if train[col].dtype == object : \n        le.fit(train[col])\n        train[col] = le.transform(train[col])\n \n\ndt = {}\nfor col in train.columns : \n    dt[col] = train[col].dtype\n\nprint(dt)\ntrain.head()","548900d2":"SalePrice = train.SalePrice\ntrain = train.drop('SalePrice', axis=1)","8e67aa71":"fig = plt.figure(figsize=(16,3))\ntrain.corrwith(SalePrice).plot(kind='bar', color='r', width=0.8)","120e0fee":"for col in train.columns :\n    train[col] = (train[col] - train[col].mean())\/train[col].std()","3b173fb9":"SalePrice = np.array(SalePrice).reshape(SalePrice.shape[0], 1)\nmu = SalePrice.mean()\nsigma = SalePrice.std()\nSalePrice = (SalePrice - mu)\/sigma","69c26b3a":"fig = plt.figure(figsize=(6,3))\n\nplt.hist(SalePrice, width=0.5)\nplt.xlabel('SalePrice')\nplt.ylabel('Counts');","ca03fbaa":"train = train.to_numpy()\ntrain_x, xvalid_x, train_y, xvalid_y = model_selection.train_test_split(train, SalePrice, train_size=0.8, shuffle=True)\nprint(train_x.shape, train_y.shape, xvalid_x.shape, xvalid_y.shape)\nprint(type(train_x), type(train_y))","b9ff629f":"def price_model (input_shape) :\n    x_input = Input(input_shape)\n\n    x = Dense(128, activation='tanh', kernel_initializer='glorot_uniform')(x_input)\n    x = BatchNormalization(epsilon=0.01, momentum=0.99)(x)\n    \n    x = Dense(256, activation='tanh', kernel_regularizer=regularizers.l2(0.01))(x)\n    x = BatchNormalization(epsilon=0.01, momentum=0.99)(x)\n    \n    x = Dense(64, activation='tanh', kernel_regularizer=regularizers.l2(0.01))(x)\n    x = BatchNormalization(epsilon=0.01, momentum=0.99)(x)\n    \n    x = Dense(64, activation='tanh', kernel_regularizer=regularizers.l2(0.01))(x)\n    x = BatchNormalization(epsilon=0.01, momentum=0.99)(x)\n    \n    x = Dense(16, activation='tanh', kernel_regularizer=regularizers.l2(0.01))(x)\n    x = BatchNormalization(epsilon=0.01, momentum=0.99)(x)\n\n    x_output = Dense(1, activation=None, use_bias=True, kernel_regularizer=regularizers.l2(0.01),\n              bias_regularizer=regularizers.l2(0.02))(x)\n\n    model = Model(inputs=x_input, outputs=x_output, name='price_model')\n    \n    return model","0b466e51":"priceModel = price_model(np.shape(train_x[1,:]))\nprint(priceModel.summary())","4dc858bf":"optim = optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.99)\npriceModel.compile(optimizer=optim, loss='mean_squared_error', metrics=['accuracy'])","c3d5f286":"priceModel.fit(x=train_x, y=train_y, batch_size=64, epochs=100, verbose=1, shuffle=True, validation_split=0.0)","bbd68cee":"pred = priceModel.evaluate(x=xvalid_x, y=xvalid_y, batch_size=64, verbose=1)\nprint('Loss: ' + str(pred[0]))\nprint('Accuracy: ' + str(pred[1]))","fb1eea4c":"xvalid_pred = priceModel.predict(xvalid_x)\n\nfig = plt.figure(figsize=(4,4))\nplt.scatter((xvalid_y*sigma+mu)\/1e3, (xvalid_pred*sigma+mu)\/1e3)\nplt.plot([0,1e3], [0,1e3], 'k--')\nplt.xlabel('Sale price (per K$)')\nplt.ylabel('Predicted sale price (per K$)');","b2cff3ed":"test = pd.read_csv('test.csv')\n\ntest_ids = test.Id\ntest.drop('Id', axis=1, inplace=True)\nprint('test set size: ', test.shape)\n\nnot_nulls = {}\nfor colname in test.columns :\n    not_nulls[colname] = test[colname].notnull().sum()\/test.shape[0]\n    \nprint(not_nulls)","8d3c861a":"cols = ['Alley','FireplaceQu','PoolQC','Fence','MiscFeature']\ntest = test.drop(cols, axis=1)\nprint('test set size after removing nan columns: ', test.shape)","19797195":"test['LotFrontage'] = test['LotFrontage'].fillna(test['LotFrontage'].mean())\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(test['MasVnrArea'].mean())\ntest['GarageYrBlt'] = test['GarageYrBlt'].fillna(test['GarageYrBlt'].mean())\n\ntest['MasVnrType'] = test['MasVnrType'].fillna('None');\ntest['BsmtQual'] = test['BsmtQual'].fillna('TA');\ntest['BsmtCond'] = test['BsmtCond'].fillna('TA');\ntest['BsmtExposure'] = test['BsmtExposure'].fillna('Mn')\ntest['BsmtFinType1'] = test['BsmtFinType1'].fillna('ALQ')\ntest['BsmtFinType2'] = test['BsmtFinType2'].fillna('Unf')\ntest['Electrical'] = test['Electrical'].fillna('SBrkr')\ntest['GarageType'] = test['GarageType'].fillna('Attchd')\ntest['GarageFinish'] = test['GarageFinish'].fillna('RFn')\ntest['GarageQual']= test['GarageQual'].fillna('TA')\ntest['GarageCond'] = test['GarageCond'].fillna('TA')","01c05825":"test['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mean())\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].fillna(test['BsmtFinSF2'].mean())\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mean())\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mean())\ntest['BsmtFullBath'] = test['BsmtFullBath'].fillna(test['BsmtFullBath'].mean())\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mean())\ntest['GarageCars'] = test['GarageCars'].fillna(test['GarageCars'].mean())\ntest['GarageArea'] = test['GarageArea'].fillna(test['GarageArea'].mean())\n\n\nnot_nulls = {}\nfor colname in test.columns :\n    not_nulls[colname] = test[colname].notnull().sum()\/test.shape[0]\n    \nprint(not_nulls)","e2ad1014":"le = preprocessing.LabelEncoder()\nfor col in test.columns :\n    if test[col].dtype == object :\n        test[col] = test[col].astype(str) \n        le.fit(test[col])\n        test[col] = le.transform(test[col])\n        \nfor col in test.columns :\n    test[col] = (test[col] - test[col].mean())\/test[col].std()","1f28cfcc":"dt = {}\nfor col in test.columns : \n    dt[col] = test[col].dtype\n\nprint(dt)\ntest.head()","5fe0f44b":"test_pred = priceModel.predict(test)\n\ntest_price_pred = test_pred*sigma + mu\ntest_price_pred = test_price_pred.reshape(test_pred.shape[0], 1)\n","110491dc":"submission = pd.read_csv('sample_submission.csv')\nsubmission.SalePrice = test_price_pred\nsubmission\nsubmission.to_csv ('submission.csv', index = None, header = True)","8c5ab876":"Now we are going to replace categorical features with numeric values. 'LabelEncoder' can be used to normalize labels.","76576990":"### 2. Create the model by calling the function above","de78918e":"Now we are going to z-score features and the sale prices","716cd880":"### 5. Evaluate the network\n","cbd4737d":"Some features are numeric and the others are categorical. Let identify the type of each feature and replace missing values in the numeric columns with its average. We can also replace missing categorical values with a random caegory. Obviously, this is something to tune to obtain the most optimal performance.","d5498d34":"Uncomment and run the cell below to install the Libararies we are going to use in this notebook. Skip if you have them already.","289bb843":"Now we are going to clean and preprocess the test dataset just like what we did for the training dataset","c0dd2c97":"Let see what percentage of data are missing in each column and drop the ones that have too many missing values","768d2fd7":"Take the last column of the dataset and see how well-correlated it is with all the other features","d43a7c98":"### 4. Train the network\n","dd5bb4b4":"Remove the first column (house Ids)","d940519b":"Let's see how some of features are correlated with the sale price","61e1134d":"# Predicting house price with keras\n\nA competition project from Kaggle (https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/)\n\nLet's get started!","787b735d":"Submission file contains house IDs that are in the test set. Save the predicted prices to submit to kaggle.","78d094bc":"Save 20% of training set as cross-validation set to use it for tuning hyperparameters of the networks e.g. learning rate, number of epochs, number of hidden layers, ...","a5b06c56":"# STEPS TO MAKE A MODEL IN KERAS\n### 1. Define the model","6999825f":"Load the training dataset and see what are the features does it have","c2614444":"### 3. Compile the model\n","6ad1edf3":"How acurate our predictions are for cross-validation set?"}}