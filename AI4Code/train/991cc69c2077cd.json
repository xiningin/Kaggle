{"cell_type":{"c5bde21d":"code","75df9bcb":"code","c8c52223":"code","c5138725":"code","a244b87a":"code","1be82d14":"code","8d5b9f46":"code","6a32bded":"code","df9971b9":"code","1402ba38":"code","7f391a4a":"code","75680b73":"code","b796794c":"code","c311ef65":"code","2bc71713":"code","1650aa7e":"code","c1a835b3":"code","36d5977c":"code","8ca2cfff":"code","f0d6e1f1":"code","42d3ac29":"code","db0326d1":"code","ab1124f2":"code","b7353e5b":"code","b86ba6f6":"code","6bc93f9b":"code","bb221176":"code","fea16256":"code","9785e226":"code","bdd284ec":"code","ec3a3fe9":"code","90625cb1":"code","feff24d9":"code","a0c00d1e":"code","02ecb3db":"code","4a6e6092":"code","19482984":"code","434a5994":"code","75b0dd37":"code","42d7a653":"code","a5f308dd":"code","6a8acb30":"code","d16afc28":"markdown","15530d85":"markdown","371034d2":"markdown","d65c72d8":"markdown","6267dfc0":"markdown","4ec096be":"markdown","d46b76cf":"markdown","24cc2aff":"markdown","2a572955":"markdown","910bf838":"markdown","f32e0a55":"markdown","569d7439":"markdown","84a63a62":"markdown","cfc93955":"markdown","74bbe7e5":"markdown","f9eac265":"markdown","e91f4bad":"markdown","3d24d474":"markdown","991aa8a6":"markdown","46edf6a5":"markdown","69e3f93c":"markdown","916c200b":"markdown","6692836b":"markdown","b76698db":"markdown","8b4cc25a":"markdown"},"source":{"c5bde21d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75df9bcb":"train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","c8c52223":"train_data['train']  = 1\ntest_data['train']  = 0\n","c5138725":"data = pd.concat([train_data,test_data],axis =0)\nprint(len(data))\ndata.head()","a244b87a":"for i in data.columns:\n    print(f'length of unique values in {i}',len(set(data[i])))\n    print(f'some of the unique values in {i}',list(set(data[i]))[0:5])\n    print('---------------------------------------------------------')","1be82d14":"import missingno as msno \nmsno.matrix(data.iloc[:,1:20])\n","8d5b9f46":"msno.matrix(data.iloc[:,20:40])\n","6a32bded":"msno.matrix(data.iloc[:,40:60])\n","df9971b9":"msno.matrix(data.iloc[:,60:])\n","1402ba38":"y = train_data.SalePrice\ndata =data.drop(['SalePrice'],axis = 1)","7f391a4a":"objects = data.select_dtypes(include=['object'])\nnumericals =data.select_dtypes(exclude=['object'])","75680b73":"print(objects.dtypes)","b796794c":"objects.isna().sum()","c311ef65":"object_none_fill = ['Alley','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','FireplaceQu','PoolQC','Fence','MiscFeature','GarageType','GarageFinish','GarageQual','GarageCond']\nobjects[object_none_fill] = objects[object_none_fill].fillna('none')","2bc71713":"object_mode_fill = ['Electrical','KitchenQual','Functional','MasVnrType','Exterior1st','Exterior2nd','MSZoning','Utilities','SaleType']\nobjects[object_mode_fill] = objects[object_mode_fill].fillna(objects[object_mode_fill].mode().iloc[0])","1650aa7e":"for i in objects.columns:\n    print(i,'-----',len(set(objects[i])),'-----',objects[i].dtype,'\\n')\n","c1a835b3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfor i in objects.columns:\n    if len(set(objects[i])) <= 5:\n        plt.title(f\"{i}\")\n        ax = sns.countplot(x= i, data=objects)\n        plt.show()","36d5977c":"for i in objects.columns:\n    if len(set(objects[i])) <= 10 and len(set(objects[i])) > 5:\n        plt.title(f\"{i}\")\n        ax = sns.countplot(x= i, data=objects)\n        plt.show()","8ca2cfff":"remove = ['Street','Alley','Fence','MiscFeature','PoolQC','Utilities','Exterior1st','Exterior2nd','LotConfig','LandSlope','BldgType','Electrical','RoofMatl','BsmtFinType2','Functional','Condition1','Condition2']","f0d6e1f1":"objects = objects.drop(remove,axis =1)","42d3ac29":"for i in objects.columns:\n    print(i,set(list(objects[i])))\n","db0326d1":"MSZoning ={'RL':0, 'FV' :1, 'C (all)':2, 'RM' :3, 'RH':4}\nobjects['MSZoning'] = objects['MSZoning'].map(MSZoning)\n\n\n\nLotShape = {'IR1':0, 'IR2':1, 'IR3':2,'Reg':3}\nobjects['LotShape'] = objects['LotShape'].map(LotShape)\n\nLandContour = {'Low':0, 'Bnk':1, 'HLS':2, 'Lvl':3}\nobjects['LandContour'] = objects['LandContour'].map(LandContour)\n\n\nNeighborhood = {'Veenker':0, 'SWISU':1, 'Blueste':2, 'Gilbert':3, 'MeadowV':4, 'SawyerW':5, 'Blmngtn':6, 'BrDale':7, 'Sawyer':8, 'ClearCr':9, 'IDOTRR':10, 'NAmes':11, 'OldTown':12, 'Somerst':13, 'NridgHt':14, 'NoRidge':15, 'Timber':16, 'StoneBr':17, 'BrkSide':18, 'NPkVill':19, 'Mitchel':20, 'NWAmes':21, 'CollgCr':22, 'Crawfor':23, 'Edwards':24}\nobjects['Neighborhood'] = objects['Neighborhood'].map(Neighborhood)\n\nBsmtFinType1 ={'BLQ':1, 'ALQ':2, 'LwQ':3, 'Rec':4, 'GLQ':5, 'Unf':6, 'none':0}\nobjects['BsmtFinType1'] = objects['BsmtFinType1'].map(BsmtFinType1)\n\n\n\nHouseStyle = {'2.5Fin':0 , 'SLvl':1, 'SFoyer':2, '2.5Unf':3, '1Story':4, '1.5Fin':5, '2Story':6, '1.5Unf':7}\nobjects['HouseStyle'] = objects['HouseStyle'].map(HouseStyle)\n\nRoofStyle = {'Gable':0, 'Shed':1, 'Flat':2, 'Mansard':3, 'Hip':4, 'Gambrel':5}\nobjects['RoofStyle'] = objects['RoofStyle'].map(RoofStyle)\n\nMasVnrType = {'Stone':1, 'BrkFace':2, 'None':0, 'BrkCmn':3}\nobjects['MasVnrType'] = objects['MasVnrType'].map(MasVnrType)\n\n\nscore = {'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1,'none':0,'No':0,'N':0, 'Y':1 }\n\nobjects['ExterQual'] = objects['ExterQual'].map(score)\nobjects['ExterCond'] = objects['ExterCond'].map(score)\nobjects['BsmtQual'] = objects['BsmtQual'].map(score)\nobjects['BsmtCond'] = objects['BsmtCond'].map(score)\nobjects['BsmtExposure'] = objects['BsmtExposure'].map(score)\nobjects['GarageQual'] = objects['GarageQual'].map(score)\nobjects['GarageCond'] = objects['GarageCond'].map(score)\nobjects['PavedDrive'] = objects['PavedDrive'].map(score)\nobjects['HeatingQC'] = objects['HeatingQC'].map(score)\nobjects['CentralAir'] = objects['CentralAir'].map(score)\nobjects['KitchenQual'] = objects['KitchenQual'].map(score)\nobjects['FireplaceQu'] = objects['FireplaceQu'].map(score)\n\n\nHeating = {'Floor':0, 'Grav':1, 'GasA':2, 'Wall':3, 'GasW':4, 'OthW':5}\nobjects['Heating'] = objects['Heating'].map(Heating)\n\nFoundation = {'Slab':0, 'Stone':1, 'Wood':2, 'PConc':3, 'CBlock':4, 'BrkTil':5}\nobjects['Foundation'] = objects['Foundation'].map(Foundation)\n\n\nGarageType = {'CarPort':1, 'Detchd':2, 'Basment':3,'2Types':4, 'BuiltIn':5, 'Attchd':6, 'none':0}\nobjects['GarageType'] = objects['GarageType'].map(GarageType)\n\nGarageFinish ={'none':0, 'Unf':1, 'Fin':2, 'RFn':3}\nobjects['GarageFinish'] = objects['GarageFinish'].map(GarageFinish)\n\nSaleType = {'WD':0, 'New':1, 'Con':2, 'COD':3, 'Oth':4, 'ConLI':5, 'ConLD':6, 'ConLw':7, 'CWD':8}\nobjects['SaleType'] = objects['SaleType'].map(SaleType)\n\nSaleCondition = {'Abnorml':0, 'Family':1, 'AdjLand':2, 'Normal':3, 'Alloca':4 ,'Partial':5}\nobjects['SaleCondition'] = objects['SaleCondition'].map(SaleCondition)\n","ab1124f2":"objects.dtypes","b7353e5b":"objects.head()","b86ba6f6":"numericals.isna().sum()","6bc93f9b":"print(round((numericals['LotFrontage']).mean()))\nprint(round((numericals['YrSold']-numericals['YearBuilt']).mean()))","bb221176":"numericals['GarageYrBlt'] = numericals['GarageYrBlt'].fillna(numericals['YrSold']-36)\nnumericals['LotFrontage'] = numericals['LotFrontage'].fillna(69)","fea16256":"numericals = numericals.fillna(0)","9785e226":"numericals.isna().sum()","bdd284ec":"for i in numericals.columns:\n    if len(set(numericals[i])) <= 5:\n        plt.title(f\"{i}\")\n        ax = sns.countplot(x= i, data=numericals)\n        plt.show()","ec3a3fe9":"for i in numericals.columns:\n    if len(set(numericals[i])) <= 10 and len(set(numericals[i])) > 5:\n        plt.title(f\"{i}\")\n        ax = sns.countplot(x= i, data=numericals)\n        plt.show()","90625cb1":"data = pd.concat([objects,numericals],axis =1)\ndata = data.drop(['Id'],axis =1)\n","feff24d9":"data.shape","a0c00d1e":"data['OverallQualandCond']= (data['OverallQual']+data['OverallCond'])\ndata['ExterQualandCond']= (data['ExterQual']+data['ExterCond'])\ndata['BsmtAll']= (data['BsmtCond']+data['BsmtQual']+data['BsmtExposure'])\ndata['GarageQualandCond']= (data['GarageQual']+data['GarageCond'])\n","02ecb3db":"data = data.drop(['OverallQual','OverallCond','ExterQual','ExterCond','BsmtCond','BsmtQual','BsmtExposure','GarageQual','GarageCond'],axis =1)","4a6e6092":"data.shape","19482984":"\ntrain = data[data['train'] == 1]\ntrain = train.drop(['train',],axis=1)\n\ntest = data[data['train'] == 0]\ntest = test.drop(['train',],axis=1)","434a5994":"from sklearn.model_selection import train_test_split\nimport xgboost as xgb\nimport math\nimport sklearn.metrics as metrics\n\nx_train,x_test,y_train,y_test = train_test_split(train,y,test_size=0.25,random_state=42)","75b0dd37":"xgb_model = xgb.XGBRegressor(objective=\"reg:squarederror\", random_state=42)\n\nxgb_model.fit(x_train,y_train)\npredictions = xgb_model.predict(x_test)","42d7a653":"print('Root Mean Square Error for  Log of pred and true = ' + str(math.sqrt(metrics.mean_squared_error(np.log(y_test), np.log(predictions)))))","a5f308dd":"import xgboost as xgb\nxgb_model = xgb.XGBRegressor(objective=\"reg:squarederror\", random_state=42)\n\nxgb_model.fit(train,y)\npredict = xgb_model.predict(test)","6a8acb30":"submission = pd.DataFrame({\n        \"Id\": test_data[\"Id\"],\n        \"SalePrice\": predict\n    })\nsubmission.to_csv('submission.csv', index=False)","d16afc28":"Look at **data_description.txt** file for more understanding\n\n1. For Alley NA means no Alley access so fill with 'none'\n2. For BsmtQual,BsmtCond and BsmtExposure NA means no basement so let's fill with 'none' and it also applies with 4 garage columns \n3. For FireplaceQu NA means no Fire place so fill with 'none' \n4. For PoolQC,Fence,MiscFeature NA means they don't have the respective values fill with 'none'\n5. For Electrical,KitchenQual,Functional,MasVnrType,Exterior1st,Exterior2nd,MSZoning,Utilities and SaleType will fill the data with most occured value                     \n\n","15530d85":"* Let's see the missing values of each feature","371034d2":"\n* The task is to select optimal features.\n* Remember Too many features does not increase classifier performance and in turn  decreases  classifier's performance due to [Curse of Dimensionality and other reasons](https:\/\/medium.com\/analytics-vidhya\/feature-engineering-with-the-help-of-data-visualization-69c359f5bba5)","d65c72d8":"Have a look at objects dtypes after separation","6267dfc0":"* Let's Train and Test our model on the train data first and look for the error\n* later train our model on entire train data and submit our predictions","4ec096be":"* 'y' train data SalePrice alone used to train the model and predict test data SalePrice\n* drop SalePrice from total data","d46b76cf":"Bingo! we have now converted object datatypes into numerical datatypes.\n\nlook at them now.","24cc2aff":"* Concat the data and drop Id from the data","2a572955":"* look at the unique values for changing dtype of the objects","910bf838":"1. More none values for **Alley**,**Fence**,**MiscFeature**,**PoolQC**\n2. 'Street',,'Utilities','Exterior1st','Exterior2nd','LotConfig','LandSlope','BldgType','Electrical','RoofMatl','BsmtFinType1'\n    ,'BsmtFinType2','Functional',Condition1,Condition2","f32e0a55":"## Removal of non optimal features","569d7439":"# Data Cleaning and Data Manipulation","84a63a62":"### Let's Engineer the features\n\n","cfc93955":"# Data Inference\n * Concat Train and test before cleaning the null values and removing un-optimal features","74bbe7e5":"#### Check **data_description.txt**\n* **OverallQual**,**OverallCond** can be clubbed and made a feature.\n* **ExterQual**,**ExterCond** can be clubbed and made a feature.\n* **BsmtCond**,**BsmtQual**,**BsmtExposure** can be clubbed and made a feature.\n* **GarageQual**,**GarageCond** can be clubbed and made a feature.\n","f9eac265":"### Missing values","e91f4bad":"# Feature Engineering","3d24d474":"* Fill **LotFrontage**,**YrSold**  with the mean values.\n* Rest all null values can be filled 0. look at the **data_description.txt** for more info about the data. ","991aa8a6":"so,now we cleared all the null values of  objects data Let's Change the data to numeric and also it's dtype. \n* Look at unique values of each column\n* plot the countplots(barplots) for each feature ","46edf6a5":"# Import Data","69e3f93c":"Let's separate the data into two categories \n* ojects which include columns of  'dtype' **object**\n* numericals which include columns of  'dtype' **Int** or **float**","916c200b":"## Model Selection and Evaluation","6692836b":"look for null values","b76698db":"Train on total dataset","8b4cc25a":"Let's clean the numericals data too"}}