{"cell_type":{"7e298ba1":"code","927bee84":"code","694574fd":"code","259fd3f7":"code","b44fc9f7":"code","e7887a34":"code","1cd87af8":"code","1b9f8125":"code","39189cd7":"code","cd597714":"code","19485857":"code","4a29a9bf":"code","38a205ad":"code","48151ee8":"code","0feb66f7":"code","53a71fa3":"code","62f63c9a":"code","828f8a62":"code","250717a2":"code","a9179989":"code","4c8e7c11":"code","ba61d6bb":"code","0a78a814":"code","b8599ca9":"code","34ef7c06":"code","b643b8c7":"code","d3d1947d":"code","d810888f":"code","4651a26d":"code","31f9dd7a":"markdown","c055cb16":"markdown","faaa8fc6":"markdown","06d1546e":"markdown","b6b41e7a":"markdown","c7409628":"markdown","f3ff97bb":"markdown","6e1567fd":"markdown","7231f41e":"markdown","42d884c1":"markdown","70535362":"markdown","0a97acf1":"markdown","31565e3c":"markdown","39f07859":"markdown","8c2dcb0c":"markdown","1bc72773":"markdown","f925027a":"markdown","5ed0bc1c":"markdown","949e1fbb":"markdown","d8b4bfd2":"markdown","d0bcc7d4":"markdown","521cfd6d":"markdown","8142c8c2":"markdown","5ed07389":"markdown","a6aefd7b":"markdown","4936b7ec":"markdown","5a58e9b9":"markdown","c5607387":"markdown","f12bf3c9":"markdown","9f54f1cd":"markdown","4cc8372e":"markdown","096d7c81":"markdown","2d8fe44a":"markdown","0cbb6059":"markdown","b31ac6e6":"markdown","dc1acaa6":"markdown","fa87020c":"markdown","4652b890":"markdown","1711c636":"markdown","75765580":"markdown","15795aa5":"markdown","1006f573":"markdown"},"source":{"7e298ba1":"# Core\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style='darkgrid', font_scale=1.4)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom itertools import combinations\nimport statistics\nimport time\nfrom datetime import datetime\nimport matplotlib.dates as mdates\n\n# Sklearn\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LinearRegression\n\n# Models\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\n\n# Tensorflow\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import callbacks","927bee84":"# Save to df\ntrain_data=pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv', index_col='row_id')\ntest_data=pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv', index_col='row_id')\n\n# Shape and preview\nprint('Training data df shape:',train_data.shape)\nprint('Test data df shape:',test_data.shape)\ntrain_data.head()","694574fd":"print('Number of missing values in training set:',train_data.isna().sum().sum())\nprint('')\nprint('Number of missing values in test set:',test_data.isna().sum().sum())","259fd3f7":"print('Training cardinalities: \\n', train_data.nunique())\nprint('')\nprint('Test cardinalities: \\n', test_data.nunique())","b44fc9f7":"print('Training data:')\nprint('Min date', train_data['date'].min())\nprint('Max date', train_data['date'].max())\nprint('')\nprint('Test data:')\nprint('Min date', test_data['date'].min())\nprint('Max date', test_data['date'].max())","e7887a34":"# Convert date to datetime\ntrain_data.date=pd.to_datetime(train_data.date)\ntest_data.date=pd.to_datetime(test_data.date)","1cd87af8":"# Figure\nplt.figure(figsize=(12,5))\n\n# Groupby\naa=train_data.groupby(['date','store']).agg(num_sold=('num_sold','sum'))\n\n# Lineplot\nsns.lineplot(data=aa, x='date', y='num_sold', hue='store')\n\n# Aesthetics\nplt.title('num_sold by store')","1b9f8125":"# Subplots\nfig, axes = plt.subplots(2, 1, figsize=(12, 10))\n\n# Groupby\nKR=train_data[train_data.store=='KaggleRama']\nKM=train_data[train_data.store=='KaggleMart']\nbb=KR.groupby(['date','country']).agg(num_sold=('num_sold','sum'))\ncc=KM.groupby(['date','country']).agg(num_sold=('num_sold','sum'))\n\n# Lineplots\nax1=sns.lineplot(ax=axes[0], data=bb, x='date', y='num_sold', hue='country')\nax2=sns.lineplot(ax=axes[1], data=cc, x='date', y='num_sold', hue='country')\n\n# Aesthetics\nax1.title.set_text('KaggleRama')\nax2.title.set_text('KaggleMart')","39189cd7":"# Subplots\nfig, axes = plt.subplots(2, 1, figsize=(12, 10))\n\n# Groupby\ndd=KR.groupby(['date','product']).agg(num_sold=('num_sold','sum'))\nee=KM.groupby(['date','product']).agg(num_sold=('num_sold','sum'))\n\n# Lineplots\nax1=sns.lineplot(ax=axes[0], data=dd, x='date', y='num_sold', hue='product')\nax2=sns.lineplot(ax=axes[1], data=ee, x='date', y='num_sold', hue='product')\n\n# Aesthetics\nax1.title.set_text('KaggleRama')\nax2.title.set_text('KaggleMart')","cd597714":"# Labels\ny=train_data.num_sold\n\n# Features\nX=train_data.drop('num_sold', axis=1)","19485857":"holiday_path = '..\/input\/holidays-finland-norway-sweden-20152019\/Holidays_Finland_Norway_Sweden_2015-2019.csv'\n\ndef GetHoliday(holiday_path, df):\n    \"\"\"\n    Get a boolean feature of whether the current row is a holiday sale\n    \"\"\"\n    \n    holiday = pd.read_csv(holiday_path)\n    fin_holiday = holiday.loc[holiday.Country == 'Finland']\n    swe_holiday = holiday.loc[holiday.Country == 'Sweden']\n    nor_holiday = holiday.loc[holiday.Country == 'Norway']\n    df['fin holiday'] = df.date.isin(fin_holiday.Date).astype(int)\n    df['swe holiday'] = df.date.isin(swe_holiday.Date).astype(int)\n    df['nor holiday'] = df.date.isin(nor_holiday.Date).astype(int)\n    \n    df['holiday'] = np.zeros(df.shape[0]).astype(int)\n    df.loc[df.country == 'Finland', 'holiday'] = df.loc[df.country == 'Finland', 'fin holiday']\n    df.loc[df.country == 'Sweden', 'holiday'] = df.loc[df.country == 'Sweden', 'swe holiday']\n    df.loc[df.country == 'Norway', 'holiday'] = df.loc[df.country == 'Norway', 'nor holiday']\n    df.drop(['fin holiday', 'swe holiday', 'nor holiday'], axis=1, inplace=True)\n    return df\n\n#X = GetHoliday(holiday_path, X)\n#test_data = GetHoliday(holiday_path, test_data)","4a29a9bf":"hol_path = '..\/input\/public-and-unofficial-holidays-nor-fin-swe-201519\/holidays.csv'\n\ndef unofficial_hol(hol_path, df):\n    countries = {'Finland': 1, 'Norway': 2, 'Sweden': 3}\n    stores = {'KaggleMart': 1, 'KaggleRama': 2}\n    products = {'Kaggle Mug': 1,'Kaggle Hat': 2, 'Kaggle Sticker': 3}\n    \n    # load holiday info.\n    holiday = pd.read_csv(hol_path)\n    \n    fin_holiday = holiday.loc[holiday.country == 'Finland']\n    swe_holiday = holiday.loc[holiday.country == 'Sweden']\n    nor_holiday = holiday.loc[holiday.country == 'Norway']\n    df['fin holiday'] = df.date.isin(fin_holiday.date).astype(int)\n    df['swe holiday'] = df.date.isin(swe_holiday.date).astype(int)\n    df['nor holiday'] = df.date.isin(nor_holiday.date).astype(int)\n    df['holiday'] = np.zeros(df.shape[0]).astype(int)\n    df.loc[df.country == 'Finland', 'holiday'] = df.loc[df.country == 'Finland', 'fin holiday']\n    df.loc[df.country == 'Sweden', 'holiday'] = df.loc[df.country == 'Sweden', 'swe holiday']\n    df.loc[df.country == 'Norway', 'holiday'] = df.loc[df.country == 'Norway', 'nor holiday']\n    df.drop(['fin holiday', 'swe holiday', 'nor holiday'], axis=1, inplace=True)\n    \n    return df\n\nX = unofficial_hol(hol_path, X)\ntest = unofficial_hol(hol_path, test_data)","38a205ad":"def date_feat_eng(df):\n    df['day_of_week']=df['date'].dt.dayofweek       # 0 to 6\n    df['day_of_month']=df['date'].dt.day            # 1 to 31\n    df['weekend']=(df['day_of_week']\/\/5 == 1)       # 0 or 1\n    df['weekend']=df['weekend'].astype('int')       # int64\n    df['week']=df['date'].dt.isocalendar().week     # 1 to 53\n    df['week'][df['week']>52]=52                    # 1 to 52\n    df['week']=df['week'].astype('int')             # int64\n    df['month']=df['date'].dt.month                 # 1 to 12\n    df['quarter']=df['date'].dt.quarter             # 1 to 4\n    df['year']=df['date'].dt.year                   # 2015 to 2019\n    return df\n\nX= date_feat_eng(X)\ntest=date_feat_eng(test)","48151ee8":"# drop 29th Feb\n#y.drop(X[(X.month==2) & (X.day_of_month==29)].index, axis=0, inplace=True)\n#X.drop(X[(X.month==2) & (X.day_of_month==29)].index, axis=0, inplace=True)","0feb66f7":"# Load data\nGDP_data = pd.read_csv(\"..\/input\/gdp-20152019-finland-norway-and-sweden\/GDP_data_2015_to_2019_Finland_Norway_Sweden.csv\",index_col=\"year\")\n\n# Rename the columns in GDP df \nGDP_data.columns = ['Finland', 'Norway', 'Sweden']\n\n# Plot data\nplt.figure(figsize=(8,5))\n\n# Heatmap with annotations\nsns.heatmap(GDP_data, annot=True, fmt='g', cmap='Blues')\n\n# Aesthetics\nplt.title('Heatmap of GDP in nordic countries')","53a71fa3":"# Create a dictionary\nGDP_dictionary = GDP_data.unstack().to_dict()\n\n# Create new GDP column\n#X['GDP'] = X.set_index(['country', 'year']).index.map(GDP_dictionary.get)\n#test['GDP'] = test.set_index(['country', 'year']).index.map(GDP_dictionary.get)","62f63c9a":"# Load data\nGDP_PC=pd.read_csv('..\/input\/gdp-per-capita-finland-norway-sweden-201519\/GDP_per_capita_2015_to_2019_Finland_Norway_Sweden.csv',index_col=\"year\")\n\n# Create a dictionary\nGDP_PC_dictionary = GDP_PC.unstack().to_dict()\n\n# Create new GDP_PC column\nX['GDP_PC'] = X.set_index(['country', 'year']).index.map(GDP_PC_dictionary.get)\ntest['GDP_PC'] = test.set_index(['country', 'year']).index.map(GDP_PC_dictionary.get)\n\n# Preview df\nX.head()","828f8a62":"# Does not improve score\n'''\n# load data\nCPI_data = pd.read_csv('..\/input\/consumer-price-index-20152019-nordic-countries\/consumer_price_index.csv')\n\n# format data\nCPI_data=CPI_data.T.iloc[2:,:]\nCPI_data.columns = ['Finland', 'Norway', 'Sweden']\nCPI_data.index=[2015,2016,2017,2018,2019]\nCPI_data.index.name='year'\n\n# Round to 2 d.p\nCPI_data=CPI_data.astype(float).round(2)\n\n# Create a dictionary\nCPI_dictionary = CPI_data.unstack().to_dict()\n\n# Create new CPI column\nX['CPI'] = X.set_index(['country', 'year']).index.map(CPI_dictionary.get)\ntest['CPI'] = test.set_index(['country', 'year']).index.map(CPI_dictionary.get)\n\n# Preview df\nX.head()\n'''","250717a2":"# From https:\/\/www.kaggle.com\/ambrosm\/tpsjan22-03-linear-model#Simple-feature-engineering-(without-holidays)\ndef FourierFeatures(df):\n    # temporary one hot encoding\n    for product in ['Kaggle Mug', 'Kaggle Hat']:\n        df[product] = df['product'] == product\n    \n    # The three products have different seasonal patterns\n    dayofyear = df.date.dt.dayofyear\n    for k in range(1, 3):\n        df[f'sin{k}'] = np.sin(dayofyear \/ 365 * 2 * math.pi * k)\n        df[f'cos{k}'] = np.cos(dayofyear \/ 365 * 2 * math.pi * k)\n        df[f'mug_sin{k}'] = df[f'sin{k}'] * df['Kaggle Mug']\n        df[f'mug_cos{k}'] = df[f'cos{k}'] * df['Kaggle Mug']\n        df[f'hat_sin{k}'] = df[f'sin{k}'] * df['Kaggle Hat']\n        df[f'hat_cos{k}'] = df[f'cos{k}'] * df['Kaggle Hat']\n        df=df.drop([f'sin{k}', f'cos{k}'], axis=1)\n    \n    # drop temporary one hot encoding\n    df=df.drop(['Kaggle Mug','Kaggle Hat'], axis=1)\n    \n    return df\n\n# add fourier features\n#X=fourier_features(X)\n#test=fourier_features(test)","a9179989":"X.drop('date',axis=1, inplace=True)\ntest.drop('date',axis=1, inplace=True)","4c8e7c11":"X=pd.get_dummies(X, columns=['store', 'country', 'product'])\ntest=pd.get_dummies(test, columns=['store', 'country', 'product'])","ba61d6bb":"'''\n# Break off a validation set (in time-series-split style)\nX_train=X.iloc[:3*len(X)\/\/4,:]\nX_valid=X.iloc[3*len(X)\/\/4:,:]\ny_train=y.iloc[:3*len(X)\/\/4]\ny_valid=y.iloc[3*len(X)\/\/4:]\n\n# Base model\nmodel=LGBMRegressor(random_state=0, n_estimators=200, max_depth=6)\n\n# Train model\nmodel.fit(X_train,y_train)\n\n# Predict\npreds = model.predict(X_valid)\n\n# Calcaculate smape\ndef smape(A, F):\n    return 100\/len(A) * np.sum(2 * np.abs(F - A) \/ (np.abs(A) + np.abs(F)))\n\n# Evaluate smape\nsmape(preds,y_valid)\n'''","0a78a814":"# Store results from experiments\nsmape_results=pd.DataFrame.from_dict({'Method':['base','include holidays','date feat. eng. (FE)', 'holidays + date FE', \n                                                'prev. row + GDP (model A)', 'model A + weekend', 'model A + day dummy',\n                                                'model A + unofficial holidays', 'prev. row + GDP per capita', 'GDP per capita instead of GDP (Model B)',\n                                                'Model B + CPI', 'Model B + drop feb 29', 'Model B + drop feb 29 + Fourier feats.'],\n                                      'SMAPE': [16.52,16.46,9.06, 8.94, 9.02, 9.02, 21.97, 9.00, 8.97, 7.82, 7.83, 7.93, 7.93]})\nsmape_results","b8599ca9":"# Parameter grid\ngrid = {'n_estimators': [50, 75, 100, 125, 150, 175, 200, 225, 250],\n        'max_depth': [2, 4, 6, 8, 10, 12],\n        'learning_rate': [0.01, 0.025, 0.05, 0.075, 0.1, 0.125, 0.15]}\n\n# XGBoost model\nmodel=LGBMRegressor(random_state=0)\n\n# Grid Search with n-fold cross validation\ngrid_model = GridSearchCV(model,grid,cv=5)\n\n# Train classifier with optimal parameters\ngrid_model.fit(X,y)","34ef7c06":"print(\"The best parameters across ALL searched params:\\n\",grid_model.best_params_)\nprint(\"\\n The best score across ALL searched params:\\n\",grid_model.best_score_) # r^2 score","b643b8c7":"# from https:\/\/www.kaggle.com\/fergusfindley\/ensembling-and-rounding-techniques-comparison\ndef geometric_round(arr):\n    result_array = arr\n    result_array = np.where(result_array < np.sqrt(np.floor(arr)*np.ceil(arr)), np.floor(arr), result_array)\n    result_array = np.where(result_array >= np.sqrt(np.floor(arr)*np.ceil(arr)), np.ceil(arr), result_array)\n    return result_array\n\n# Make predictions\npreds_test = geometric_round(grid_model.predict(test))\n\n# Save predictions to file\noutput = pd.DataFrame({'row_id': test.index,\n                       'num_sold': preds_test})\n\n# Check format\noutput.head()","d3d1947d":"output.to_csv('submission.csv', index=False)","d810888f":"def plot_predictions(SS, CC, PP):\n    '''\n    SS=store\n    CC=country\n    PP=product\n    '''\n    \n    # uncomment if your dataframes have different names\n    #train_data=train_df\n    #test_data=test_df\n    #output=preds\n    \n    # Training set target\n    train_subset=train_data[(train_data.store==SS)&(train_data.country==CC)&(train_data['product']==PP)]\n\n    # Predictions\n    plot_index=test_data[(test_data.store==SS)&(test_data.country==CC)&(test_data['product']==PP)].index\n    pred_subset=output[output.row_id.isin(plot_index)].reset_index(drop=True)\n\n    # Plot\n    plt.figure(figsize=(12,5))\n    n1=len(train_subset['num_sold'])\n    n2=len(pred_subset['num_sold'])\n    plt.plot(np.arange(n1),train_subset['num_sold'], label='Training')\n    plt.plot(np.arange(n1,n1+n2),pred_subset['num_sold'], label='Predictions')\n    plt.title('\\n'+f'Store:{SS}, Country:{CC}, Product:{PP}')\n    plt.legend()\n    plt.xlabel('Days since 2015-01-01')\n    plt.ylabel('num_sold')","4651a26d":"for SS in ['KaggleMart','KaggleRama']:\n    for CC in ['Finland', 'Norway', 'Sweden']:\n        for PP in ['Kaggle Mug', 'Kaggle Hat', 'Kaggle Sticker']:\n            plot_predictions(SS, CC, PP)","31f9dd7a":"**Store sales**","c055cb16":"These work best for linear models. Check out my other [notebook](https:\/\/www.kaggle.com\/samuelcortinhas\/tps-jan-22-hybrid-model) that uses these with a hybrid model. ","faaa8fc6":"# Modelling","06d1546e":"# Pre-processing & Feat. Eng.","b6b41e7a":"**Timeframe**","c7409628":"This is to look at whether the stores sell more products in certain countries or not.","f3ff97bb":"**All holidays (inc. unofficial)**","6e1567fd":"**Results from Grid Search**","7231f41e":"*Observations:*\n* Kaggle Rama is consistently selling more products than Kaggle Mart. \n* The number of products sold for both companies oscillates depending on the time of year (season) and fluctuates rapidly (this is probably due to weekday vs weekend sales).\n* There are big spikes towards the end of each year (likely due to christmas) and also some other smaller seasonal spikes (perhaps easter holidays etc).","42d884c1":"# Plot predictions","70535362":"# Data","0a97acf1":"Let's begin by plotting the target data.  ","31565e3c":"**GDP per capita**","39f07859":"# Fourier features","8c2dcb0c":"Now for some absolute [wizardry](https:\/\/www.kaggle.com\/carlmcbrideellis\/gdp-of-finland-norway-and-sweden-2015-2019\/comments) with the help of Carl...","1bc72773":"# EDA","f925027a":"The cardinalities of country, store and product are very small and so one-hot encoding this categorical data is justified. It would now be good to see what the range of date values is to understand the timescale we are dealing with.","5ed0bc1c":"**Cardinality of features**","949e1fbb":"**Encode categorical variables**","d8b4bfd2":"*Observations:*\n* We see that both stores sell Hats the most, then Mugs and finally Stickers the least. \n* Sales of stickers is fairly constant throughout the year, whereas hat (especially) and mug sales is more affected by seasonality. ","d0bcc7d4":"# Libraries","521cfd6d":"We see that the GDP in 2019 is lower than in 2018 so this could suggest sales will actually decrease in the test set.","8142c8c2":"**Load data**","5ed07389":"There are no missing values. That's very nice of kaggle.","a6aefd7b":"*Initial thoughts:*\n* Date data can be tricky to deal with but luckily here it is already converted to international date time format. This means entries have an ordering, which makes it easier to sort and plot.\n* Country, store and product features are not currently numeric. The first pre-processing step could be encoding these to categorical numeric using a one-hot scheme. We'll check below for missing values and number of unique entries to see if we can do this. ","4936b7ec":"**Labels and features**","5a58e9b9":"**Store sales by country**","c5607387":"**Drop 29th Feb**","f12bf3c9":"# Prediction","9f54f1cd":"In TPS Jan 2022, the aim of this competition is to predict the number of items sold by two different companies. The features that are available to us are date, country, store and product. My initialy impression is that this is a very small dataset (features and samples) and so a gradient boosted model like XGBoost could do well here.\n\n**Note** that I made the first version of this notebook before I looked at other peoples solutions. After this I build on other peoples ideas to improve my own score and learn new techniques.\n\n**Ver. 2 Acknowledgments:**\n* [Rounding up predictions](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/298201#1642988) by [Carl McBride Ellis](https:\/\/www.kaggle.com\/carlmcbrideellis).\n* [LGBM](https:\/\/www.kaggle.com\/ambrosm\/tpsjan22-06-lightgbm-quickstart\/notebook) by [Ambros M](https:\/\/www.kaggle.com\/ambrosm).\n* [Holidays](https:\/\/www.kaggle.com\/mfedeli\/tabular-playground-series-jan-2022) by [Matteo Fedeli](https:\/\/www.kaggle.com\/mfedeli).\n\n**Ver. 3 Acknowledgments:**\n* [GDP](https:\/\/www.kaggle.com\/carlmcbrideellis\/gdp-of-finland-norway-and-sweden-2015-2019\/data) by [Carl McBride Ellis](https:\/\/www.kaggle.com\/carlmcbrideellis).\n\n**Ver. 5 Acknowledgments:**\n* [Date feat. eng.](https:\/\/www.kaggle.com\/lucamassaron\/kaggle-merchandise-eda-with-baseline-linear-model) by [Luca Massaron](https:\/\/www.kaggle.com\/lucamassaron).\n\n**Ver. 6 Acknowledgments:**\n* [TimesSeriesSplit + weekend feature](https:\/\/www.kaggle.com\/adamwurdits\/tps-01-2022-catboost-w-optuna-seed-averaging?scriptVersionId=84848139) by [Adam Wurdits](https:\/\/www.kaggle.com\/adamwurdits).\n* [Unofficial holidays](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/298990) by [Vincent Pallares](https:\/\/www.kaggle.com\/vpallares).\n\n**Ver. 8 Acknowledgments:**\n* [CPI](https:\/\/www.kaggle.com\/sardorabdirayimov\/consumer-price-index-20152019-nordic-countries) by [Sardor Abdirayimov](https:\/\/www.kaggle.com\/sardorabdirayimov).\n* [Fourier features](https:\/\/www.kaggle.com\/ryanholbrook\/seasonality) from the [kaggle time series course](https:\/\/www.kaggle.com\/learn\/time-series).\n\n**Ver. 9 Acknowledgments:**\n* [Geometric rounding](https:\/\/www.kaggle.com\/fergusfindley\/ensembling-and-rounding-techniques-comparison) by [Fergus Findley](https:\/\/www.kaggle.com\/fergusfindley).\n\n**Ver. 10 Acknowledgments:**\n* [Fourier Features](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/301629) by [AmbrosM](https:\/\/www.kaggle.com\/ambrosm).","4cc8372e":"Ok, so this tells us that the training data spans 3 years from 2015 to 2018 and the test data picks up from where we left off and spans a further 1 year, i.e. 2019. ","096d7c81":"*Observations:*\n* We see that both stores sell more products in Norway than the other two countries. \n* Finland and Sweden perform very similarly but maybe Sweden has a slight edge in general. ","2d8fe44a":"**Store sales by product type**","0cbb6059":"**Include day of week, month, year etc**","b31ac6e6":"**Public holidays**","dc1acaa6":"**Missing values**","fa87020c":"**CPI (inflation)**","4652b890":"**Drop date**","1711c636":"**Gross Domestic Product (GDP)**","75765580":"# Introduction","15795aa5":"Base model for exploration and evaluation of new ideas","1006f573":"This date isn't useful for prediction because it doesn't appear in the test set. (2019 is not a leap year) It will also make the Fourier analysis easier later."}}