{"cell_type":{"44c5a5eb":"code","50d47949":"code","2dfcd60a":"code","50f23a65":"code","c85192b3":"code","0556608b":"code","fa0a428e":"code","f5a73be0":"code","df8f9380":"code","67eefa8f":"code","880a589f":"code","4d665966":"code","c45c0638":"code","f6bca7ed":"code","465800c8":"code","ed47921e":"code","232ccf65":"code","bc93aa47":"code","913a8ab6":"code","70e1945b":"code","03b0084d":"code","996052dc":"code","609a2165":"code","2c7cf246":"code","f76eb7d0":"code","bd2dc83a":"code","983a6a09":"code","382feb5b":"code","fddf17e1":"code","76c55d1f":"code","b83c0399":"code","9491a426":"code","e2ce7636":"markdown","69809b1f":"markdown","d1a4cd37":"markdown","67f7ac5f":"markdown","7a23d770":"markdown","6f4f7ef3":"markdown","4a591308":"markdown","91f6462f":"markdown","42ecdbd8":"markdown","eacc49da":"markdown","16c54e29":"markdown","3de8e617":"markdown","59735942":"markdown","532b2647":"markdown","d00de2bd":"markdown","46cd4c5e":"markdown","825ac76b":"markdown"},"source":{"44c5a5eb":"%reset -f\n#import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns","50d47949":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.cluster import KMeans","2dfcd60a":"from sklearn.metrics import silhouette_score\nfrom yellowbrick.cluster import SilhouetteVisualizer","50f23a65":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n#to display all the commands result (of a particular cell which we are running)\n#otherwise it will display only the last result","c85192b3":"np.set_printoptions(precision = 3,          # Display upto 3 decimal places\n                    threshold=np.inf        # Display full array\n                    )","0556608b":"#To get rid of scientific notations\npd.options.display.float_format = '{:.2f}'.format","fa0a428e":"#To reset the format back\n#pd.reset_option('display.float_format')","f5a73be0":"pd.options.display.max_columns=100\n#set maximum columns to display in the output\n\npd.options.display.max_rows=100\n#set maximum rows to display in the output","df8f9380":"#fun = pd.read_csv(\"G:\\\\Python\\\\Session11_31-May-2020\\\\Exercise\\\\854_1575_bundle_archive\\\\fundamentals.csv\", index_col = 0, parse_dates=['Period Ending'])\nfun = pd.read_csv(\"\/kaggle\/input\/nyse\/fundamentals.csv\", index_col = 0, parse_dates=['Period Ending'])\n#first column in the excel has been taken as index for the dataframe\n#parse_dates will parse the mentioned column as datetime type","67eefa8f":"fun.columns = fun.columns.str.replace(\" \", \"_\")\nfun.columns = fun.columns.str.replace(\"_&_\", \"_\")\nfun.columns = fun.columns.str.replace(\"_\/_\", \"_\")\nfun.columns = fun.columns.str.replace(\".\", \"\")\nfun.columns = fun.columns.str.replace(\"-\", \"\")\nfun.columns = fun.columns.str.replace(\"'\", \"\")\nfun.columns = fun.columns.str.replace(\",\", \"\")\nfun.columns = fun.columns.str.replace(\"\/\", \"_\")","880a589f":"fun.shape\nfun.dropna(axis=1,inplace=True)\nfun.shape\nfun.head()","4d665966":"fun[fun.Total_Revenue >10000000000.00 ].shape\nfun[fun.Total_Revenue <10000000000.00 ].shape\n\nfun['cluster_group'] = fun['Total_Revenue'].apply(lambda x : 1 if x > 10000000000 else 0)\n\nfun.head()\nfun.cluster_group.value_counts()","c45c0638":"sns.barplot('cluster_group', 'Total_Revenue', estimator = np.mean, data=fun, ci=68)","f6bca7ed":"sns.distplot(fun.Gross_Margin, bins=10)","465800c8":"sns.barplot('cluster_group', 'Gross_Profit', estimator = np.mean, data=fun, ci=68)","ed47921e":"fungroup = fun.groupby(\"Ticker_Symbol\")\nmean_df = fungroup.aggregate('mean')\nmean_df.reset_index(inplace=True)\nmean_df.head()","232ccf65":"TopPerformer = mean_df.sort_values(by = 'Total_Revenue', ascending=False).head(10)\n#TopPerformer\nsns.barplot(x = 'Ticker_Symbol', y = 'Total_Revenue', data = TopPerformer)","bc93aa47":"sns.barplot('cluster_group', 'Gross_Profit', estimator = np.mean, data=mean_df, ci=68)","913a8ab6":"#fun_remTick = fun.head() # Shallow Copy. It will remove column from original df also\nfun_remTick = fun.copy() # Deep Copy. It will remove column from copied df only\nfun_remTick.drop([\"Ticker_Symbol\",\"Period_Ending\"], axis=1, inplace=True)\nfun_remTick.head()\n#fun.head()","70e1945b":"y = fun_remTick['cluster_group'].values\nfun_remTick.drop(columns = ['cluster_group'], inplace = True)","03b0084d":"ss = StandardScaler()\nss.fit(fun_remTick)\nX = ss.transform(fun_remTick)\nX.shape\n","996052dc":"X_train, X_test, y_train, y_test = train_test_split( X,y, test_size = 0.25)\nX_train.shape\nX_test.shape\ny_train.shape\ny_test.shape","609a2165":"sse1 = []\nfor k in range(1,10):\n    km = KMeans(n_clusters = k)\n    km.fit(X_train)\n    sse1.append(km.inertia_)","2c7cf246":"plt.plot(range(1,10), sse1, marker='*')","f76eb7d0":"km2 = KMeans(n_clusters = 2)\nkm2.fit(X_train)\n#km2.cluster_centers_\n#km2.labels_\n#km2.inertia_\nsilhouette_score(X_train, km2.labels_)","bd2dc83a":"km1 = KMeans(n_clusters = 3)\nkm1.fit(X_train)\n#km1.cluster_centers_\n#km1.labels_\n#km1.inertia_\nsilhouette_score(X_train, km1.labels_) ","983a6a09":"km4 = KMeans(n_clusters = 4)\nkm4.fit(X_train)\n#km4.cluster_centers_\n#km4.labels_\n#km4.inertia_\nsilhouette_score(X_train, km4.labels_)","382feb5b":"kmeans = KMeans(n_clusters=2)\npred_y = kmeans.fit(X)\nplt.scatter(X[:,0], X[:,1])\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red')\nplt.show()","fddf17e1":"clf = KMeans(n_clusters = 2)\nclf.fit(X_train)\ny_pred = clf.predict(X_test)\n#y_pred\nnp.sum(y_pred == y_test)\/y_test.size","76c55d1f":"visualizer = SilhouetteVisualizer(clf, colors='yellowbrick')\nvisualizer.fit(X_train)        \nvisualizer.show()              ","b83c0399":"Draw InterclusterDistance diagram using yellowbrick","9491a426":"from yellowbrick.cluster import InterclusterDistance\nvisualizer = InterclusterDistance(clf)\nvisualizer.fit(X_train)        \nvisualizer.show()              ","e2ce7636":"Calculate Silhouette score for Clusters 2,3 & 4","69809b1f":"Bar chart based on Gross Profit","d1a4cd37":"Draw Scree Plot (To find out No of Clusters)","67f7ac5f":"Created by : Ezhilarasan \nTo analyse New York Stock Exchange fundamendals data and perform data visualization, Normalization, Clustering activities.","7a23d770":"Visualize Top 10 Performers based on Total Revenue","6f4f7ef3":"Drop columns which has null values","4a591308":"Based on the silhouette_score calculation, we can go for Cluster =2\nDraw cluster Visualisation Diagram using Cluster =2","91f6462f":"Group by Ticker Symbol column and aggregare for average","42ecdbd8":"Check the prediction success rate","eacc49da":"Split the sample into Train & Test","16c54e29":"Remove unwanted characters from column names","3de8e617":"Predict a column (to cluster) based on Total_Revenue","59735942":"Remove Ticker Symbol (String Value) and Period (Date Value) to go for Scaling","532b2647":"Separate the cluster group column which we created for clustering based on Total_Revenue","d00de2bd":"Some Data Visualisation graphs","46cd4c5e":"SilhouetteVisualizer","825ac76b":"Scaling the final dataframe using StandardScaler"}}