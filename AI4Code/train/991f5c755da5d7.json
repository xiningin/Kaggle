{"cell_type":{"842ca0a6":"code","ad2a0599":"code","09159bcd":"code","1a14aa08":"code","886c3dae":"code","f47594aa":"code","abd8f24c":"code","120649db":"code","a68c6fca":"code","660ba8db":"code","f87038a6":"code","e6b6e36b":"code","78261457":"code","985ae584":"code","4333af12":"code","f242bece":"code","1c5c25e6":"code","11cd9bec":"code","588f8289":"markdown","5963d5fc":"markdown","e0d087e5":"markdown","daa1a9be":"markdown","f4ab8a2f":"markdown","c68da825":"markdown","901e627f":"markdown","97d2ba0e":"markdown"},"source":{"842ca0a6":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndata.head()","ad2a0599":"data.shape","09159bcd":"ax = sns.countplot(x='class', data=data, palette = \"rocket\")","1a14aa08":"figs, axes = plt.subplots(22, 1, figsize=(15,150))\nfor i in range(1, 23):\n    ax = sns.countplot(data=data, x=data.iloc[:,i], hue='class', ax=axes[i-1], palette='rocket')","886c3dae":"data.info()","f47594aa":"le = preprocessing.LabelEncoder()\nfor col in data.columns:\n    data[col] = le.fit_transform(data[col].values)","abd8f24c":"data.head()","120649db":"data.corrwith(data['class']).drop('class').sort_values(ascending=False)","a68c6fca":"data['veil-type'].value_counts()","660ba8db":"data.drop('veil-type', axis=1, inplace=True)","f87038a6":"y = data['class']\nX = data.drop(['class'], axis=1)","e6b6e36b":"score_list = []\nfor classifier in {RandomForestClassifier(), LogisticRegression(), KNeighborsClassifier(), XGBClassifier(), GaussianNB(), DecisionTreeClassifier()}:\n    score_list.append(cross_val_score(classifier, X, y, cv=StratifiedKFold(shuffle=True, n_splits=10)).mean())","78261457":"models = ['RandomForestClassifier', 'LogisticRegression', 'KNeighborsClassifier', 'XGBClassifier', 'GaussianNB', 'DecisionTreeClassifier']","985ae584":"figs, axes = plt.subplots(figsize=(12,5))\nax = sns.barplot(x=models, y=score_list, palette = \"rocket\").set_title('Accuracy Scores')","4333af12":"accuracy_df = pd.DataFrame(columns = [models, score_list])\naccuracy_df","f242bece":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=88, shuffle=True)\nRf = RandomForestClassifier()\nRf.fit(X_train, y_train)","1c5c25e6":"y_prob = Rf.predict_proba(X_test)\ny_prob = y_prob[:,1]\nFPR, TPR, Threshold = roc_curve(y_test, y_prob)","11cd9bec":"plt.plot(FPR, TPR)\nplt.xlabel('FPR')\nplt.ylabel('TPR')","588f8289":"## Data Preprocessing","5963d5fc":"### Attribute Information: \n\nclasses: edible=e, poisonous=p\n\ncap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\ncap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","e0d087e5":"# Mushroom Classification\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_curve","daa1a9be":"### RoC Curve for RandomForestClassifier","f4ab8a2f":"## Data Analysis","c68da825":"## Modeling","901e627f":"Convering object data to integers","97d2ba0e":"veil-type has only one value, so we will drop that column"}}