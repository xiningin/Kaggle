{"cell_type":{"71bbffd8":"code","e26c06d2":"code","099d794c":"code","0e45654b":"code","8535bf02":"code","97bb3eb3":"markdown","1aacb87e":"markdown"},"source":{"71bbffd8":"import numpy as np\nimport scipy.stats as st\nimport pandas as pd\ndata = pd.read_csv(\"..\/input\/cryptocurrency-financial-data\/consolidated_coin_data.csv\")","e26c06d2":"data.head()","099d794c":"data = data['Market Cap']\n\n# defining a function for remove ','(eg:1,00,000) and change format to int(100000)\ndef no_comma_yes_int(n):\n    no_comma = n.replace(',','')\n    yes_int = int(no_comma)\n    return yes_int\n\n# apply those function\ndata = data.apply(no_comma_yes_int)\n#data = np.random.random(10000)\ndistributions =  [st.laplace, st.norm , st.expon]\n# distributions = [        \n#         st.alpha,st.anglit,st.arcsine,st.beta,st.betaprime,st.bradford,st.burr,st.cauchy,st.chi,st.chi2,st.cosine,\n#         st.dgamma,st.dweibull,st.erlang,st.expon,st.exponnorm,st.exponweib,st.exponpow,st.f,st.fatiguelife,st.fisk,\n#         st.foldcauchy,st.foldnorm,st.frechet_r,st.frechet_l,st.genlogistic,st.genpareto,st.gennorm,st.genexpon,\n#         st.genextreme,st.gausshyper,st.gamma,st.gengamma,st.genhalflogistic,st.gilbrat,st.gompertz,st.gumbel_r,\n#         st.gumbel_l,st.halfcauchy,st.halflogistic,st.halfnorm,st.halfgennorm,st.hypsecant,st.invgamma,st.invgauss,\n#         st.invweibull,st.johnsonsb,st.johnsonsu,st.ksone,st.kstwobign,st.laplace,st.levy,st.levy_l,st.levy_stable,\n#         st.logistic,st.loggamma,st.loglaplace,st.lognorm,st.lomax,st.maxwell,st.mielke,st.nakagami,st.ncx2,st.ncf,\n#         st.nct,st.norm,st.pareto,st.pearson3,st.powerlaw,st.powerlognorm,st.powernorm,st.rdist,st.reciprocal,\n#         st.rayleigh,st.rice,st.recipinvgauss,st.semicircular,st.t,st.triang,st.truncexpon,st.truncnorm,st.tukeylambda,\n#         st.uniform,st.vonmises,st.vonmises_line,st.wald,st.weibull_min,st.weibull_max,st.wrapcauchy\n#     ]\nmles = []\n\nfor distribution in distributions:\n    pars = distribution.fit(data)\n    mle = distribution.nnlf(pars, data)\n    mles.append(mle)\n\nresults = [(distribution.name, mle) for distribution, mle in zip(distributions, mles)]\nbest_fit = sorted(zip(distributions, mles), key=lambda d: d[1])[0]\nprint ('Best fit reached using {}, MLE value: {}'.format(best_fit[0].name, best_fit[1]))","0e45654b":"#``````````````````````````````````````````````````````````````````````````````\n# in this section we can discuss the mle\n\n# now we put for only 3 variable x1, x2, x3 only\n# now we can frame the equation\n\n# L = (\u03bb**n) * (E**(-(\u03bb*(x1 + x2 + x3))))\n# the above equation tells us the equation\n\nfrom sympy import *\n\n\u03bb = Symbol('\u03bb')\nn = Symbol('n')\nx1 = Symbol('x1')\nx2 = Symbol('x2')\nx3 = Symbol('x3')\nexpres = (\u03bb**n) * (E**(-(\u03bb*(x1 + x2 + x3))))\n\n# simplify\nprint('MLE framed formula is',solve(diff(expres,\u03bb),\u03bb))\n\n# calculate the value of \u03bb\nn = data.count()\nsum_of_values = sum(data)\n\u03bb = (n\/sum_of_values)\n\n# in other form \n\u03bb = format((n\/sum_of_values),'.20f')\n","8535bf02":"# print the equation in equation format\n\nfrom sympy import *\nn,x1,x2,x3 = symbols('n,x1,x2,x3')\ninit_printing()\n\nn\/(x1 + x2 + x3)","97bb3eb3":"[](https:\/\/static.wixstatic.com\/media\/072352_19bc8f7ebca246a5a2835b10e34c6869~mv2.gif)","1aacb87e":"![](https:\/\/marketplace.canva.com\/EADan_NluPk\/2\/0\/800w\/canva-explore-brush-script-facebook-cover-gQRCaWeMGjQ.jpg)"}}