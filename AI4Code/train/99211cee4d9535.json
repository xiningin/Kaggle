{"cell_type":{"db3de854":"code","9544d7c5":"code","d9d80578":"code","d33de2ee":"code","4b8c4d81":"code","ca341eb0":"code","bfd7d2b3":"code","3f217bc6":"code","71c41113":"code","591f9ccf":"code","2251910e":"code","04e21f0a":"code","6de907c5":"code","daab98e9":"code","747548c1":"code","4120f954":"code","4b541e31":"code","b44022a3":"code","d6259d89":"code","945aeeb2":"code","e88e6e56":"code","4d8e2f8a":"code","410d20f2":"code","2bc7f898":"code","ce184543":"code","ca6ffb96":"code","8790631b":"code","1fc53ecd":"code","f613407d":"code","4dedbfec":"code","528fdc29":"code","a09946a0":"code","62ffd090":"code","51b6ee46":"code","d877693f":"code","5cca3e10":"code","05c00512":"code","4b400d8d":"code","6ec93143":"code","928432ac":"code","9acf6354":"code","a71245c9":"code","20ff47d2":"code","0a0ef871":"code","ae12fc3a":"code","f114b035":"code","fd24b89d":"code","5c7f4c4a":"markdown","0956fcaa":"markdown","21671926":"markdown","81efcb36":"markdown","6cf4735d":"markdown","29502837":"markdown","1996120a":"markdown","a42b85b2":"markdown","e2558d52":"markdown","2d826211":"markdown"},"source":{"db3de854":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9544d7c5":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures \nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator\nplt.style.use('seaborn')\n%matplotlib inline \n","d9d80578":"confirmed_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeaths_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nrecoveries_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","d33de2ee":"confirmed_df.head()","4b8c4d81":"columns = confirmed_df.keys()","ca341eb0":"confirmed = confirmed_df.loc[:, columns[4]:columns[-1]]\ndeaths = deaths_df.loc[:, columns[4]:columns[-1]]\nrecoveries = recoveries_df.loc[:, columns[4]:columns[-1]]","bfd7d2b3":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\ntotal_recovered = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    mortality_rate.append(death_sum\/confirmed_sum)\n    total_recovered.append(recovered_sum)","3f217bc6":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","71c41113":"days_in_future = 15\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-15]","591f9ccf":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","2251910e":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.15, shuffle=False) ","04e21f0a":"kernel = ['poly', 'sigmoid', 'rbf']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nsvm_search.fit(X_train_confirmed, y_train_confirmed)","6de907c5":"svm_search.best_params_","daab98e9":"svm_confirmed = svm_search.best_estimator_\nsvm_pred = svm_confirmed.predict(future_forcast)","747548c1":"# checking against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(svm_test_pred)\nplt.plot(y_test_confirmed)\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","4120f954":"linear_model = LinearRegression(normalize=True, fit_intercept=True)\nlinear_model.fit(X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(X_test_confirmed)\nlinear_pred = linear_model.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","4b541e31":"print(linear_model.coef_)\nprint(linear_model.intercept_)","b44022a3":"tol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge()\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(X_train_confirmed, y_train_confirmed)","d6259d89":"bayesian_search.best_params_","945aeeb2":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","e88e6e56":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)","4d8e2f8a":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=15)\nplt.show()","410d20f2":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, svm_pred, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions'])\nplt.xticks(size=15)\nplt.show()","2bc7f898":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Linear Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","ce184543":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, bayesian_pred, linestyle='dashed', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","ca6ffb96":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-15:], svm_pred[-15:]))","8790631b":"# Future predictions using Linear Regression \nprint('Ridge regression future predictions:')\nset(zip(future_forcast_dates[-15:], bayesian_pred[-15:]))","1fc53ecd":"# Future predictions using Linear Regression \nprint('Linear regression future predictions:')\nprint(linear_pred[-15:])","f613407d":"# Split data for model\nX_train_deaths, X_test_deaths, y_train_deaths, y_test_deaths = train_test_split(days_since_1_22, total_deaths, test_size=0.15, shuffle=False) ","4dedbfec":"kernel = ['poly', 'sigmoid', 'rbf']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1, return_train_score=True, n_iter=40, verbose=1)\nsvm_search.fit(X_train_deaths, y_train_deaths)","528fdc29":"print('Best Params are: ')\nsvm_search.best_params_","a09946a0":"svm_deaths = svm_search.best_estimator_\nsvm_pred_death = svm_deaths.predict(future_forcast)","62ffd090":"# check against testing data\nsvm_test_pred = svm_deaths.predict(X_test_deaths)\nplt.plot(svm_test_pred)\nplt.plot(y_test_deaths)\nplt.legend(['Death Cases', 'SVM predictions'])\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_deaths))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_deaths))","51b6ee46":"linear_model = LinearRegression(normalize=True, fit_intercept=True)\nlinear_model.fit(X_train_deaths, y_train_deaths)\ntest_linear_pred = linear_model.predict(X_test_deaths)\nlinear_pred = linear_model.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_deaths))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_deaths))","d877693f":"plt.plot(y_test_deaths)\nplt.plot(test_linear_pred)\nplt.legend(['Death Cases', 'Linear Regression predictions'])","5cca3e10":"tol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge()\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(X_train_deaths, y_train_deaths)","05c00512":"bayesian_search.best_params_","4b400d8d":"bayesian_deaths = bayesian_search.best_estimator_\ntest_bayesian_pred_deaths = bayesian_deaths.predict(X_test_deaths)\nbayesian_pred_deaths = bayesian_deaths.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred_deaths, y_test_deaths))\nprint('MSE:',mean_squared_error(test_bayesian_pred_deaths, y_test_deaths))","6ec93143":"plt.plot(y_test_deaths)\nplt.plot(test_bayesian_pred_deaths)\nplt.legend(['Confirmed Cases', 'Bayesian predictions'])","928432ac":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Time', size=20)\nplt.ylabel('# of Deaths', size=20)\nplt.xticks(size=15)\nplt.show()","9acf6354":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.plot(future_forcast, svm_pred_death, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Death Cases', 'SVM predictions'])\nplt.xticks(size=15)\nplt.show()","a71245c9":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Death Cases', 'Linear Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","20ff47d2":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.plot(future_forcast, bayesian_pred_deaths, linestyle='dashed', color='green')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Death Cases', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","0a0ef871":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-14:], svm_pred_death[-14:]))","ae12fc3a":"# Future predictions using Bayesian regression\nprint('Bayesian regression future predictions:')\nset(zip(future_forcast_dates[-14:], bayesian_pred_deaths[-14:]))","f114b035":"# Future predictions using Linear Regression \nprint('Linear regression future predictions:')\nprint(linear_pred[-14:])","fd24b89d":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['Deaths', 'Recoveries'], loc='best', fontsize=20)\nplt.title('# of Coronavirus Cases', size=20)\nplt.xlabel('Time', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.xticks(size=15)\nplt.show()","5c7f4c4a":"Model for predicting number of confirmed cases by using support vector machine,linear regression and ridge regression.","0956fcaa":"**Number of death prediction:**","21671926":"Convert integer into datetime","81efcb36":"Bayesian ridge regression model ","6cf4735d":"I am going to share predictions about the virus on the basis of time series data known by the scientific name of SARS-CoV-2\n\nSARS-CoV-2 causes the disease COVID-19 (CoV-19) which is an infectious disease declared as a global pandemic by the World Health Organization (WHO) and causes a severe acute respiratory syndrome.\n\npreviously known by the provisional name 2019 novel coronavirus (2019-nCoV) this virus is a positive-sense single-stranded RNA virus.\n\nIt is contagious in humans and is the cause of the ongoing 2019\u201320 coronavirus outbreak, an pandemic of coronavirus disease 2019 (COVID-19)","29502837":"Furure Predictions","1996120a":"Linear regression model","a42b85b2":"**Predicting the future**","e2558d52":"SVM Model","2d826211":"Death and recoveries over time"}}