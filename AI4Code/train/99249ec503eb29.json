{"cell_type":{"c027b232":"code","9fbbd937":"code","34b10ac5":"code","5a71f550":"code","2813a417":"code","d84c8226":"code","d974c6ed":"code","91bf1304":"code","5f647375":"code","5d468c5e":"code","44902088":"code","d3961b61":"code","e40acc68":"code","9151f332":"code","45c312b1":"code","d1392f00":"code","e7df7ff4":"code","dfe6bae6":"code","ae7bc2de":"code","8978ff6b":"code","ed3b91e1":"code","af756b1e":"code","553f6dcd":"code","08f43dd8":"code","46dfa24c":"code","9341761a":"code","ca07b07a":"code","01fa4940":"code","5ed113a8":"code","65d86fab":"code","a4e052fa":"code","4b5ad0d8":"code","04833871":"code","9edad7de":"code","9f44a801":"code","858ff2e3":"code","4fc65609":"code","f5ec9ae0":"code","18de6cb8":"code","8c1bc6a1":"code","dc641b32":"code","a78089dc":"code","97bbffe9":"code","fd032226":"code","228524de":"code","438102f4":"code","db576257":"code","2f23bedd":"code","1ceabe07":"code","579b5c17":"code","8714ae6d":"code","27362b2d":"code","3a05c9c2":"code","df36f024":"code","268f441a":"code","19a66991":"code","a964a027":"code","68605706":"code","079a98e1":"code","be992a82":"code","522c7646":"code","5ddf8af2":"code","8e91ebd2":"code","49b3b78c":"code","d99fbd95":"code","928f3446":"code","d691b181":"code","0f7959b0":"code","4f911df5":"code","2908b744":"code","b8303b79":"code","4cebf640":"code","45b35a11":"code","e369cca6":"code","f6a69c93":"code","7629ab8c":"code","274931ae":"code","dc51870a":"code","ec18a374":"code","ccdf43d7":"code","4dff230c":"code","a0d91145":"code","5af798bc":"code","7f2b72b8":"code","8a1bd9f4":"code","aaf97d1d":"code","1ca405b4":"code","8d7505a5":"code","c9cb2621":"code","17d3b30c":"code","2bcb4aef":"code","2e24a4aa":"code","ba0b6189":"code","3836798e":"code","0a387308":"code","96f85e35":"code","e27a642f":"code","358c5543":"code","ce65c5a2":"code","a53a745b":"code","a6a3074f":"code","f73e1c64":"code","dd8ef87e":"code","6b6c617d":"code","1f69673d":"code","13bf63f3":"code","344e952f":"code","bebbb60c":"code","1a79766e":"code","c305339a":"code","5502b12e":"code","6a0694fa":"code","5148491f":"code","63e2c1fe":"code","a6160f1b":"code","fb82bbfd":"code","719013c7":"code","cee8faad":"code","2c55a9b1":"code","0f3edd4b":"code","2be700a7":"code","135d9d15":"code","fb94fde9":"code","4c574340":"code","e4d56273":"code","df51eb69":"code","2cec3613":"code","3b3ad954":"code","9c2ec230":"code","fea53393":"code","22b3bbd7":"code","43e43672":"code","acfd1f23":"code","047adb6e":"code","0f567df4":"code","867f8edb":"code","a4a8d5a1":"code","9ade567e":"code","b3f7130e":"code","93d7bfff":"code","3e164a6b":"code","fc209edb":"code","c5f42491":"code","b3f8593b":"code","bc79c101":"code","85738ed6":"code","e642d220":"code","78777b64":"code","edece120":"code","df475907":"code","e3221148":"code","37d510ff":"code","261cc951":"code","4a58985e":"code","7b54923a":"code","18ed7d2d":"code","c1519a59":"code","fe16767a":"code","3883f810":"code","5adb8e28":"code","98f0f3a2":"code","ae3f50ce":"code","88dd7109":"code","0da674b3":"code","db647e08":"code","4709f9df":"code","73cb90cf":"code","1e281325":"code","2003f3b7":"code","1f4f55af":"code","e42964c9":"code","0d112dfd":"markdown","d3fa9659":"markdown","3b2be61f":"markdown","8579a55a":"markdown","4dd3aad1":"markdown","2d5fec6e":"markdown","1a369141":"markdown","fe7d19e8":"markdown","6be70edb":"markdown","12f21d58":"markdown","74bd7da9":"markdown","b931b4b2":"markdown","c2a83a82":"markdown","d03bfad5":"markdown","3caa1e7b":"markdown","98d5342d":"markdown","f1f4ef3b":"markdown","25ece0c2":"markdown","35277f01":"markdown","1e270af3":"markdown","f3e5048c":"markdown","8a9723b4":"markdown","fc9d3738":"markdown","7e6ec579":"markdown","64026a91":"markdown","07fe8691":"markdown","cac5a399":"markdown","a52bafe4":"markdown","75954aae":"markdown","00286c97":"markdown","27a65cfc":"markdown","71805022":"markdown","788fedc7":"markdown","312c8a51":"markdown","ec333544":"markdown","e5cb4f03":"markdown","57311f53":"markdown","484f801d":"markdown","dd228267":"markdown","1a0954b7":"markdown","8cb953bf":"markdown","1581cb76":"markdown","df8d432d":"markdown","c6e21a16":"markdown","380cc307":"markdown","d925c143":"markdown","86cf58e6":"markdown","1961a081":"markdown","92887abf":"markdown","7587a5ce":"markdown","84ee3b83":"markdown","decf39ce":"markdown","0e82f0a9":"markdown","be10258f":"markdown","080615aa":"markdown","3fee54f4":"markdown","e31d8cb1":"markdown","e5061fd6":"markdown","ebecc5d7":"markdown","4a0a5451":"markdown","c9d5c171":"markdown","7dd50af6":"markdown","0ad6bcbe":"markdown","0205d0b3":"markdown","9f00a975":"markdown","c71816fb":"markdown","d219679c":"markdown","dca925b5":"markdown","cc18c4ad":"markdown","4ab578ba":"markdown","9898cd20":"markdown","8b1a7540":"markdown","7ecd8ccf":"markdown","a320bb0c":"markdown","9ff1bcfa":"markdown","6166582b":"markdown","c77c321a":"markdown","9d7dc007":"markdown","a5e3eb90":"markdown","5b2a077a":"markdown","d9655e18":"markdown","8c317ccc":"markdown","cb6ecb52":"markdown","66955e8e":"markdown"},"source":{"c027b232":"import pandas as pd","9fbbd937":"pd.__version__","34b10ac5":"titanic = pd.read_csv(\"\/kaggle\/input\/titanic-csv\/titanic.csv\")","5a71f550":"titanic","2813a417":"titanic","d84c8226":"print(titanic)","d974c6ed":"pd.options.display.max_rows","91bf1304":"pd.options.display.min_rows","5f647375":"pd.options.display.min_rows = 20","5d468c5e":"titanic","44902088":"pd.options.display.max_rows = 891","d3961b61":"titanic","e40acc68":"titanic.head()","9151f332":"titanic.head(10)","45c312b1":"titanic.head(20)","d1392f00":"titanic.tail()","e7df7ff4":"titanic.tail(10)","dfe6bae6":"pd.options.display.max_rows = 60\npd.options.display.min_rows = 10\n","ae7bc2de":"titanic","8978ff6b":"titanic.info()","ed3b91e1":"titanic.describe()","af756b1e":"titanic.describe(include = 'O')","553f6dcd":"titanic","08f43dd8":"type(titanic)","46dfa24c":"# len function returns the no. of rows in our data frame.\nlen(titanic)","9341761a":"round(titanic, 0)","ca07b07a":"#Error: TypeError: int() argument must be a string, a bytes-like object or a number, not 'DataFrame'\n#int(titanic)","01fa4940":"#minimum column lable also from alphabetical point of view\nmin(titanic)","5ed113a8":"titanic.shape","65d86fab":"# returns all the elements in the dataframe i.e. no of rows * no of columns\ntitanic.size","a4e052fa":"titanic.index","4b5ad0d8":"# to get all the column labels\ntitanic.columns","04833871":"titanic.head()","9edad7de":"titanic.head(n = 2)","9f44a801":"titanic.info()","858ff2e3":"titanic.min()","4fc65609":"titanic.mean()","f5ec9ae0":"titanic.mean().sort_values()","18de6cb8":"titanic.mean().sort_values().head(n = 2)","8c1bc6a1":"titanic.sort_values(by = 'age', ascending = False)","dc641b32":"titanic.describe()","a78089dc":"import pandas as pd","97bbffe9":"cars = pd.read_csv(\"\/kaggle\/input\/cars-csv\/cars.csv\")","fd032226":"cars","228524de":"cars.head(n = 10)","438102f4":"cars.tail()","db576257":"pd.options.display.max_rows = 398","2f23bedd":"cars","1ceabe07":"cars.info()","579b5c17":"cars.describe()","8714ae6d":"titanic['age']","27362b2d":"type(titanic['age'])","3a05c9c2":"titanic[['age', 'sex']]","df36f024":"type(titanic[['age', 'sex']])","268f441a":"#We can also change the order of columns\ntitanic[['sex', 'age']]","19a66991":"titanic[['sex', 'age', 'fare']]","a964a027":"titanic[['age']]","68605706":"type(titanic[['age']])","079a98e1":"titanic","be992a82":"titanic.age","522c7646":"type(titanic.age)","5ddf8af2":"titanic.age.equals(titanic['age'])","8e91ebd2":"titanic.embarked","49b3b78c":"summer = pd.read_csv('\/kaggle\/input\/summer-olympics-dataset-18962012\/summer.csv')","d99fbd95":"summer","928f3446":"summer.info()","d691b181":"summer = pd.read_csv('\/kaggle\/input\/summer-olympics-dataset-18962012\/summer.csv', index_col = 'Athlete')","0f7959b0":"summer","4f911df5":"summer.info()","2908b744":"#Getting the 1st row\nsummer.iloc[0]","b8303b79":"type(summer.iloc[0])","4cebf640":"#Getting the second row\nsummer.iloc[1]","45b35a11":"#Getting last row\nsummer.iloc[-1]","e369cca6":"summer.iloc[[1, 2, 3]]","f6a69c93":"summer.iloc[1:4]","7629ab8c":"#Getting first 5 rows\nsummer.iloc[:5]","274931ae":"#Getting last 5 rows\nsummer.iloc[-5:]","dc51870a":"# Here the last row is not inclusive.\nsummer.iloc[-5:-1]","ec18a374":"summer.iloc[:]","ccdf43d7":"summer.iloc[[4, 59, 5678, 11233]]","4dff230c":"summer.head()","a0d91145":"summer.iloc[0, 4]","5af798bc":"summer.iloc[0, :3]","7f2b72b8":"summer.iloc[0, [0, 2, 5, 7]]","8a1bd9f4":"summer.iloc[34: 39, [0, 2, 5, 7] ]","aaf97d1d":"summer.iloc[:, 4]","1ca405b4":"summer.iloc[:, 4].equals(summer.Country)","8d7505a5":"summer.iloc[:, 4].equals(summer['Country'])","c9cb2621":"summer","17d3b30c":"summer.iloc[2]","2bcb4aef":"summer.loc['DRIVAS, Dimitrios']","2e24a4aa":"summer.loc['PHELPS, Michael']","ba0b6189":"summer.loc['BINDRA, Abhinav']","3836798e":"summer.loc['PHELPS, Michael', 'Medal']","0a387308":"summer.loc['PHELPS, Michael', ['Medal', 'Event']]","96f85e35":"summer.loc[['PHELPS, Michael', 'LEWIS, Carl'], ['Medal', 'Event']]","e27a642f":"summer.loc[:,['Medal', 'Event']]","358c5543":"summer.head(10)","ce65c5a2":"\nsummer.loc[:'CHASAPIS, Spiridon']","a53a745b":"#Error: KeyError: \"Cannot get right slice bound for non-unique label: 'PHELPS, Michael'\"\n#summer.loc[:'PHELPS, Michael']","a6a3074f":"#Error: KeyError: \"Cannot get left slice bound for non-unique label: 'PHELPS, Michael'\"\n#summer.loc['PHELPS, Michael': ]","f73e1c64":"summer.head(20)","dd8ef87e":"summer.loc['DRIVAS, Dimitrios': 'BLAKE, Arthur' ]","6b6c617d":"summer.loc['DRIVAS, Dimitrios': 'BLAKE, Arthur' , 'City':'Discipline']","1f69673d":"#Getting labels that do not exist in our dataframe\n#summer.loc[['PHELPS, Michael', 'DUCK, Donald']]","13bf63f3":"# No age column\n#summer.loc['PHELPS, Michael', ['Year', 'Age']]","344e952f":"summer = pd.read_csv('\/kaggle\/input\/summer-olympics-dataset-18962012\/summer.csv')","bebbb60c":"summer","1a79766e":"summer.loc[[0, 5, 30000], ['Athlete', 'Medal']]","c305339a":"#Error row 40000 does not exist\n#summer.loc[[0, 5, 30000, 40000], ['Athlete', 'Medal']]","5502b12e":"summer.reindex(index = [0, 5, 30000, 40000], columns = ['Athlete', 'Medal'])","6a0694fa":"summer.reindex(index = [0, 5, 30000, 40000], columns = ['Athlete', 'Medal','Age'])","5148491f":"summer = pd.read_csv('\/kaggle\/input\/summer-olympics-dataset-18962012\/summer.csv', index_col = 'Athlete')","63e2c1fe":"summer","a6160f1b":"summer.reindex(columns = ['Medal', 'Age'])","fb82bbfd":"# Error: ValueError: cannot reindex from a duplicate axis\n#summer.reindex(index = ['PHELPS, Michael'], columns = ['Medal', 'Age'])","719013c7":"import pandas as pd","cee8faad":"summer = pd.read_csv('\/kaggle\/input\/summer-olympics-dataset-18962012\/summer.csv', index_col = 'Athlete')","2c55a9b1":"summer","0f3edd4b":"summer.info()","2be700a7":"summer.Medal","135d9d15":"summer['Medal']","fb94fde9":"summer[['Year', 'Medal']]","4c574340":"summer.loc[:, ['Year', 'Medal']]","e4d56273":"summer.iloc[10: 21]","df51eb69":"summer.loc['LEWIS, Carl']","2cec3613":"#BAD PRACTICE: Two indexing operations involved\n#chained indexing\nsummer[['Year', 'Event', 'Medal']].loc['LEWIS, Carl']","3b3ad954":"#BAD PRACTICE: Two indexing operations involved\n# chained indexing can cause severe problems when we want to create slices or copies of dataframe\n# or if we want to manipulate data in a data frame \nsummer.loc['LEWIS, Carl'][['Year', 'Event','Medal']]","9c2ec230":"#BEST PRACTICE\n# Only one indexing operation involved no chained indexing.\nsummer.loc['LEWIS, Carl', ['Year', 'Event', 'Medal']]","fea53393":"summer","22b3bbd7":"type(summer)","43e43672":"summer['Year']","acfd1f23":"type(summer['Year'])","047adb6e":"summer.columns","0f567df4":"type(summer.columns)","867f8edb":"summer.index","a4a8d5a1":"type(summer.index)","9ade567e":"import pandas as pd","b3f7130e":"cars = pd.read_csv('\/kaggle\/input\/cars-csv\/cars.csv')","93d7bfff":"cars.info()","3e164a6b":"cars","fc209edb":"cars.name","c5f42491":"cars.name[393]","b3f8593b":"cars['name']","bc79c101":"cars.iloc[100, :]","85738ed6":"cars.iloc[100, 1]","e642d220":"cars.iloc[200, -1]","78777b64":"cars.iloc[-10:, [0, 3, -2, -1]]","edece120":"cars = pd.read_csv('\/kaggle\/input\/cars-csv\/cars.csv', index_col = 'name')","df475907":"cars","e3221148":"cars.info()","37d510ff":"cars.index","261cc951":"cars.loc[['ford ranger']]","4a58985e":"cars.loc[['ford ranger'],['weight']]","7b54923a":"cars.loc[['ford torino'], ['model_year', 'origin']]","18ed7d2d":"cars.loc[:, ['mpg', 'weight']]","c1519a59":"import pandas as pd","fe16767a":"summer = pd.read_csv('\/kaggle\/input\/summer-olympics-dataset-18962012\/summer.csv')","3883f810":"summer","5adb8e28":"rows = list(range(5)) + [354, 765]\nrows","98f0f3a2":"summer.iloc[rows]","ae3f50ce":"summer.columns[:3].to_list() + ['Gender', 'Event']","88dd7109":"col = summer.columns[:3].to_list() + ['Gender', 'Event']\ncol","0da674b3":"summer.loc[ : , col]","db647e08":"summer","4709f9df":"# for rows we have position based indexing for column we have label based indexing.\nsummer.loc[[200, 300], ['Athlete', 'Medal']]","73cb90cf":"summer = pd.read_csv('\/kaggle\/input\/summer-olympics-dataset-18962012\/summer.csv', index_col = 'Athlete')","1e281325":"summer","2003f3b7":"col = summer.columns[[4, 6]]\ncol","1f4f55af":"summer.loc['PHELPS, Michael', col]","e42964c9":"#Error: \n#summer.ix['PHELPS, Michael', [4, 6]]","0d112dfd":"- It does not matter if we use a duplicate entry or a unique entry for index. As long as we have duplicates in the index we cannot reindex.","d3fa9659":"- functionality of python built-in functions is limited on dataframes.","3b2be61f":"## Dataframes and python built-in functions","8579a55a":"## Selecting rows with iloc[]","4dd3aad1":"4. __Inspect__ the entire DataFrame (__all rows__)! __Fill in the gaps!__","2d5fec6e":"Now we want to import the __Cars Dataset__ that is stored in the CSV-File __cars.csv__. <br>\n2. __Import__ the Cars Dataset and __store__ the Pandas DataFrame in the variable __cars__! __Fill in the gaps__!","1a369141":"## Outlook Pandas Object","fe7d19e8":"## Importing from CSV and first inspection ","6be70edb":"- Don't confuse it with the position based index. When using RangeIndex it is simply a coincidence that the row labels and the row position index are the same.","12f21d58":"- The output is again a pandas dataframe.","74bd7da9":"## Method Chaining","b931b4b2":"# Selecting columns with iloc[]","c2a83a82":"# Indexing and Slicing with reindex()","d03bfad5":"# Exercise 2: Indexing and Slicing","3caa1e7b":"5. Get some __meta information__ on our DataFrame! In which __Column__ do we have __missing\/NaN__ Values?","98d5342d":"## Selecting labeled rows","f1f4ef3b":"## Pandas Basics (DataFrame Basics I)","25ece0c2":"Select the __last 10 rows__ and the columns __mpg, horsepower, origin__ and __name__ with the __iloc__ operator! __Fill in the Gaps__! <br>\nWhat is the __mpg__ of the __vw pickup__?","35277f01":"### Exercise 1: Importing and Inspecting your own Dataset\nBefore we can work with the Pandas Library, we need to __import Pandas__ (by convention as __pd__). <br>\n1. __Import__ Pandas. __Fill in the gaps__!","1e270af3":"Select the column __\"name\"__ with the __attribute__ (dot) notation! What is the __name__ of the car with __index label 393__?","f3e5048c":"__Inspect__ the new Index of the DataFrame by calling the __index__ attribute!","8a9723b4":"- 3 Alternatives to get the entire column.","fc9d3738":"## Selecting rows with iloc[]","7e6ec579":"- Including Non numerical datatypes as well in summary statistics.\n- We are selecting all columns where datatype is object.","64026a91":"Pandas version:","07fe8691":"# Selecting one column with \"dot notation\"","cac5a399":"#### Some more details on the Columns:\n\n- __mpg__: Measures __fuel efficiency__ in terms of miles per gallon. __Higher mpg__ means __higher efficiency__\n- __cylinders__: Number of cylinders in the car\n- __displacement__: Technical feature (engine)\n- __horsepower__: Unit of measurement for engine power \n- __weight__: weight in lbs\n- __acceleration__: time to accelerate from 0 to 60 mph (sec.)\n- __model_year__: self explanatory\n- __origin__: origin of the manufacturer\/car\n- __name__: model name","a52bafe4":"- Here we are able to slice using labels since both the index values are unique.","75954aae":"- NOTE: we always have to pass a list to the index and the columns parameter of reindex() even if we have only one entry.","00286c97":"Select the columns __\"mpg\"__ and __\"weight\"__ (all rows) with the __loc__ operator!","27a65cfc":"## Case 2: Getting the first three columns and the columns 'Gender' and 'Event'","71805022":"- We have 398 cars.","788fedc7":"- Pitfalls of slicing an index with duplicate entries.\n- In practice label by slicing is heavily used with date time data.","312c8a51":"Select the __row__ with the index label __\"ford torino\"__ and only the columns __\"model_year\"__ and __\"origin\"__! <br>\nWhat\u00b4s the __model year__?","ec333544":"- The dot notation does not work if the column label has white spaces.","e5cb4f03":"- Reindexing is typically used with time series data when we have date-time index.\n- One advantage of reindex() is that we can pass row and column labels to reindex() that are not in the data frame.","57311f53":"- Auto complete works with dot notation. Therefore if you are lazy you can work with dot notation.","484f801d":"- Using label based indexing we can get all the occurances of a particular label.","dd228267":"Select the __row__ with the index label __\"ford ranger\"__ (use the __loc__ operator)! What is the __weight__?","1a0954b7":"- If the dataframe has \\#rows less than 60 then pandas displays all the rows.\n- If dataframe has more rows than the max_rows value i.e. 60(default) min_rows setting prevail.","8cb953bf":"- Reindex() gives us some flexibility but it does not work if we don't have unique column index or row index.","1581cb76":"# Indexing\/Slicing Rows and Columns with loc[]","df8d432d":"- Here Pandas does not know to which occurence of 'PHELPS, Michael' to slice.","c6e21a16":"- Now we have a non unique index.\n- As long as you do not index a non unique axis reindex() works.","380cc307":"# Selecting Columns","d925c143":"__Select__ the car\/row at __index position 100__ with the __iloc__ operator (all columns)! How many __cylinders__ does the car have?","86cf58e6":"# Position-based indexing and slicing with iloc[]","1961a081":"# Pandas display options and the methods head() and tail()","92887abf":"## Selecting One column","7587a5ce":"# Advanced Indexing and Slicing","84ee3b83":"- We can change the index from Range index and rather make Athelete column as an index column.","decf39ce":"## Dataframe Attributes","0e82f0a9":"3c. Also inspect the __last 5 Rows__! __How many cars\/rows__ do we have in the Dataset (mind the range index starting from 0!)?","be10258f":"- There exist three type of datatypes \/ classes in Pandas.\n1. Dataframe\n2. Pandas Series\n3. Index","080615aa":"- Both alternatives lead to the same result.","3fee54f4":"6. Let\u00b4s get some __summary statistics__ on our DataFrame! What is the __maximum__ value in the column __horsepower__?","e31d8cb1":"- The result of both alternative is same but there is a difference in the background how the resulting dataframe is generated.\n- It is recommended to use the loc[] alternative to select multiple rows.\n- In case of manipulating elements in dataframe the square bracket notation for selecting multiple columns can cause some problems.","e5061fd6":"## Case 4: Combining Position and label based indexing: Rows 'PHELPS, Michael' and positional columns 4 and 6","ebecc5d7":"__Import__ the __Cars Dataset__ one more time (save in the variable __cars__) and set the column __\"name\"__ as the __index__! <br>\n__Fill in the Gaps__!","4a0a5451":"# First Data Inspection","c9d5c171":"3b. __Inspect__ the __first 10 Rows__ of the DataFrame cars! __Fill in the gaps__! What is the __name of the very first car__ in the first row (index label\/pos = 0)?","7dd50af6":"- We again have RangeIndex.","0ad6bcbe":"3a. __Inspect__ the DataFrame cars by \"printing\" cars!","0205d0b3":"__Import Pandas__ (as pd), <br>\n__Import__ the Cars Dataset (__cars.csv__) and save the DataFrame in the variable __cars__ and<br>\n__Inspect\/Print__ cars!","9f00a975":"Select the car\/row at __index position 200__ with the __iloc__ operator (and only the column __\"name\"__)! <br>\nWhat is the __name__ of the car?","c71816fb":"## Case: 3 Combining Position and label-based indexing: Rows at positions 200 and 300 and columns 'Athlete' and 'Medal'","d219679c":"## Putting it all together","dca925b5":"##  \\#14\n\n# Python Built-in functions and dataframe attributes and methods","cc18c4ad":"## Selecting Positional Rows","4ab578ba":"## Case 1: Getting the first 5 rows and rows 354 and 765","9898cd20":"# Indexing\/Slicing Rows and Columns with iloc[]","8b1a7540":"# Exercise: 1","7ecd8ccf":"## Selecting Multiple Columns","a320bb0c":"- The above is a pandas series object. It is very similar to a pandas dataframe but a pandas series object shows only one column.\n- It is 1D labeled array.","9ff1bcfa":"# Label based indexing and Slicing with loc[]","6166582b":"## Dataframe Methods","c77c321a":"- Here Pandas does not know which 'PHELPS, Michael' occurance to start from.","9d7dc007":"- Understanding your data and your task is key to success.","a5e3eb90":"# Summary and Outlook","5b2a077a":"- When we select only one column and pass it as a list the output is a pandas dataframe not a pandas series.","d9655e18":"Apply also the __second alternative__ to select the column __\"name\"__!","8c317ccc":"- In version 1.0 onwards .ix is no longer supported.","cb6ecb52":"### Note:\n- It can be seen that our index contains duplicates like 'PHELPS, Michael'. This is allowed in pandas.\n- A dataframe index should not be mixed with a primary key and relational databases.\n- In pandas there is no obligation to have unique values.\n- To have a clear\/ unique index is the best practice however pandas gives us the flexibility to have an index with duplicates.\n- In some cases it is totally fine to work with this as long as you know the pitfalls and limitations of a non-unique index.\n- You are on a safe side if you use range-index because it is unique.","66955e8e":"- NOTE: with loc[right_boundary:left_boundary], left_boundary is included whereas in case of iloc[] left_boundary is excluded."}}