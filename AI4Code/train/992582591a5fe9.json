{"cell_type":{"2e511c86":"code","d56dc40e":"code","450551e4":"code","fec4da1b":"code","3b24d090":"code","61adaad8":"code","9d76faf0":"code","826295de":"code","910772e5":"code","431af912":"code","d2952d25":"code","2da53e94":"code","d1880c66":"code","e4dca387":"code","1ebd874e":"code","5be6f113":"code","19752f0a":"markdown","2272d904":"markdown","47242f35":"markdown","ac6254a9":"markdown","cc6b6272":"markdown","fc78853a":"markdown","526a3d89":"markdown"},"source":{"2e511c86":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import models, layers, optimizers\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau","d56dc40e":"train_dir = '..\/input\/gravity-spy-gravitational-waves\/train\/train\/'\ntest_dir = '..\/input\/\/gravity-spy-gravitational-waves\/test\/test\/'\nvalidation_dir = '..\/input\/\/gravity-spy-gravitational-waves\/validation\/validation\/'","450551e4":"class_names = os.listdir(train_dir)","fec4da1b":"plt.figure(figsize=(10,50))\nfor fold, i in zip(class_names,range(0,len(class_names))):\n\n    plt.subplot(11,2, i+1)\n    img_read = plt.imread(train_dir+fold+'\/'+os.listdir(train_dir+fold)[0])\n    plt.imshow(img_read)\n    plt.title(class_names[i])\n    \nplt.show()","3b24d090":"Batch_size = 128\n\ntr_gen = ImageDataGenerator(rescale = 1.\/255.,\n                           samplewise_center=True,\n                           samplewise_std_normalization=True)\n\nval_gen =  ImageDataGenerator(rescale = 1.\/255.,\n                           samplewise_center=True,\n                           samplewise_std_normalization=True)\n\nts_gen =  ImageDataGenerator(rescale = 1.\/255.,\n                           samplewise_center=True,\n                           samplewise_std_normalization=True)","61adaad8":"tr_gen = tr_gen.flow_from_directory(train_dir,\n                                  batch_size=Batch_size,\n                                  classes=class_names,\n                                  class_mode='categorical',\n                                  shuffle=True,\n                                  target_size=(300,300),\n                                  seed= 42)","9d76faf0":"val_gen = val_gen.flow_from_directory(validation_dir,\n                                      batch_size=Batch_size,\n                                      classes=class_names,\n                                      class_mode='categorical',\n                                      shuffle=True,\n                                      target_size=(300,300),\n                                      seed= 42)","826295de":"ts_gen = ts_gen.flow_from_directory(test_dir,\n                                  batch_size=Batch_size,\n                                  classes=class_names,\n                                  class_mode='categorical',\n                                  shuffle=False,\n                                  target_size=(300,300),\n                                  seed= 42)","910772e5":"model = models.Sequential()\n\nmodel.add(layers.Conv2D(filters=128, kernel_size=(3,3), padding='valid', strides=(2,2), activation = 'tanh', input_shape = (300,300,3)))\nmodel.add(layers.BatchNormalization())\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Conv2D(filters=128, kernel_size=(3,3), padding='valid', strides=(2,2), activation = 'tanh'))\nmodel.add(layers.BatchNormalization())\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(22, activation='softmax'))\n\nmodel.summary()","431af912":"model.compile(optimizer=optimizers.Adam(lr=0.01),\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])\n\nes = EarlyStopping(monitor='val_loss',mode='min',patience=3,verbose=1)\nRLr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience = 2, verbose = 1, min_delta=1e-3,min_lr=1e-6)\n\nhistory= model.fit(tr_gen,\n                 epochs=20,\n                 steps_per_epoch=tr_gen.n\/Batch_size,\n                 validation_data=val_gen,\n                 validation_steps=val_gen.n\/Batch_size,\n                 callbacks=[es,RLr])","d2952d25":"### Evaluation","2da53e94":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')\nplt.show()","d1880c66":"Y_pred = model.predict(ts_gen,steps=np.ceil(ts_gen.n\/Batch_size))\nY_pred = np.argmax(Y_pred, axis=1)\nY_ts = ts_gen.classes","e4dca387":"conf_mat = confusion_matrix(Y_ts,Y_pred)\nsns.set_style(style='white')\nplt.figure(figsize=(16,10))\nheatmap = sns.heatmap(conf_mat,vmin=np.min(conf_mat.all()), vmax=np.max(conf_mat), annot=True,fmt='d', annot_kws={\"fontsize\":12},cmap='Spectral')\nheatmap.set_title('Confusion Matrix Heatmap Gravitational Wave Type', fontdict={'fontsize':15}, pad=12)\nheatmap.set_xlabel('Predicted',fontdict={'fontsize':14})\nheatmap.set_ylabel('Actual',fontdict={'fontsize':14})\nheatmap.set_xticklabels(class_names, fontdict={'fontsize':12,'rotation': 90})\nheatmap.set_yticklabels(class_names, fontdict={'fontsize':12,'rotation': 0})\nplt.show()\n\nprint('-Accuracy achieved: {:.2f}%\\n-Accuracy by model: {:.2f}%\\n-Accuracy by validation: {:.2f}%'.\n      format(accuracy_score(Y_ts,Y_pred)*100,(history.history['accuracy'][-1])*100,(history.history['val_accuracy'][-1])*100))","1ebd874e":"index=0\nindex_errors= []\n\nfor label, predict in zip(Y_ts,Y_pred):\n    if label != predict:\n        index_errors.append(index)\n    index +=1","5be6f113":"plt.figure(figsize=(20,20))\n\nfor i,img_index in zip(range(1,21),random.sample(index_errors,k=20)):\n    plt.subplot(4,5,i)\n    img_read = plt.imread(ts_gen.filepaths[img_index])\n    plt.imshow(img_read)\n    plt.title('Actual: '+str(class_names[Y_ts[img_index]])+'\\nPredict: '+str(class_names[Y_pred[img_index]])+'\\nImage_index:'+str(img_index))\nplt.show()","19752f0a":"# Errors Sample","2272d904":"# CNN Model","47242f35":"# Gravity Spy","ac6254a9":"## Architecture","cc6b6272":"## Fitting","fc78853a":"# Predictions ","526a3d89":"# Preprocessing"}}