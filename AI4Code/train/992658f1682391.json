{"cell_type":{"6bb731d4":"code","2e5a4de3":"code","c950b8ed":"code","c6b0803c":"code","2b4b512a":"code","6bd13628":"code","cdac0595":"code","40125ff3":"code","533016d4":"code","cc8d71a4":"code","455b4108":"code","c8452370":"code","f832d668":"markdown","acfb3879":"markdown","165f1f56":"markdown","9f2de970":"markdown","ec727169":"markdown","f375c5c3":"markdown","192f08b8":"markdown"},"source":{"6bb731d4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nimport torch\nimport torchvision\nfrom torch.utils.data import DataLoader\nimport albumentations\nfrom albumentations.pytorch import ToTensorV2\nimport cv2","2e5a4de3":"train_df = pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\ntest_df = pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')","c950b8ed":"train_df.head()","c6b0803c":"train_df.info()","2b4b512a":"test_df.info()","6bd13628":"# for getting filename\ndef file_path(name):\n    folder = \"..\/input\/petfinder-pawpularity-score\/train\"\n    filename = str(name) + '.jpg'\n    path = os.path.join(folder, str(filename))\n    return path","cdac0595":"## Appending file path in Dataframe\ntrain_df['image_path'] = train_df['Id'].apply(lambda x: file_path(x))\ntrain_df.head()","40125ff3":"class pet_dataset:\n    def __init__(self, image_paths, targets, augmentations):\n        self.image_paths = image_paths\n        self.targets = targets\n        self.augmentations = augmentations\n        \n    def __len__(self):\n        return len(self.image_paths)\n    \n    def __getitem__(self, idx):\n        target = self.targets[idx]\n        image = cv2.imread(self.image_paths[idx])\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        if self.augmentations is not None:\n            augmented = self.augmentations(image = image)\n            image = augmented[\"image\"]\n        \n        image = np.transpose(image, (2,0,1))\n        return {\n            \"image\": torch.tensor(image),\n            \"target\": torch.tensor(target)\n        }","533016d4":"augmentations = albumentations.Compose(\n    [\n        albumentations.SmallestMaxSize(max_size = 750),\n        albumentations.ShiftScaleRotate(shift_limit=0.05, scale_limit=0.05, rotate_limit=20, p=0.5, border_mode= cv2.BORDER_CONSTANT),\n        albumentations.OneOf(\n            [\n                albumentations.RandomCrop(height = 720, width =720, p = 0.7 ),\n                albumentations.CenterCrop(height= 720, width = 720, p =0.3)\n            ], p = 1.0\n        ),\n        albumentations.HorizontalFlip(p=0.5),\n        albumentations.RGBShift(r_shift_limit=10, g_shift_limit=10, b_shift_limit=10, p=0.5),\n        albumentations.RandomBrightnessContrast(p=0.5),\n        albumentations.OneOf(\n            [\n                albumentations.Blur(blur_limit = 3, p=0.5),\n                albumentations.ColorJitter(p=0.5)\n            ], p = 0.5\n        ),\n        albumentations.OneOf(\n            [\n                albumentations.ChannelShuffle(p = 0.5),\n                albumentations.InvertImg(p = 0.5)\n            ], p = 0.25\n        ),\n    ]\n)","cc8d71a4":"images = np.array(train_df['image_path'])\ntargets = np.array(train_df['Pawpularity'])\ntrain_dataset = pet_dataset(images, targets, augmentations)","455b4108":"fig, axes = plt.subplots(nrows = 3, ncols = 5, figsize = (20,10))\nplt.suptitle(\"Given Pictures\", fontsize = 16)\n\nfor i in range(0,15):\n    image = cv2.imread(train_df['image_path'][i])\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n    x = i\/\/5\n    y = i%5\n        \n    axes[x, y].imshow(image, cmap = plt.cm.bone)\n    axes[x, y].axis('off')","c8452370":"fig, axes = plt.subplots(nrows = 3, ncols = 5, figsize = (20,10))\nplt.suptitle(\"Augmented Pictures\", fontsize = 16)\n\nfor i in range(0,15):\n    image = train_dataset[i]['image'].permute(1,2,0)\n        \n    x = i\/\/5\n    y = i%5\n        \n    axes[x, y].imshow(image, cmap = plt.cm.bone)\n    axes[x, y].axis('off')","f832d668":"## Making a Pytorch dataset class","acfb3879":"## This notebook will cover :-\n> #### 1. Data Preprocessing (How to deal with image classification data)\n> #### 2. Preparing data for PyTorch utils (Datasets and Dataloaders etc.)\n> #### 3. Image Augmentations using Albumentations (and how to incorporate with your training data)\n> #### 4. Modeling and Validations (using PyTorch mainly)\n> #### 5. Preparing data for submissions\n> #### 6. Trying more deep stuff (More techniques such as stacking or trying advanced notebooks techniques from others \ud83d\ude01)","165f1f56":"## Little preprocessing","9f2de970":"## Albumentations (Will try more operations too still learning \ud83d\ude05)\n### Various Operations tried\n> * Shifting scale\n> * Random Cropping\n> * Centre Cropping\n> * Horizontal Flip (Avoiding Vertical coz that doesn't make sense in pet data)\n> * RGB shift\n> * Transforms such as Channel Shuffle, Inversion, Blur, Colorjitter\n> * Can try more random stuff\n","ec727169":"## Getting Data","f375c5c3":"# PetFinder (PyTorch + Albumentations) \ud83d\udc36\n\n> ## (A beginer\/learner approach)\n>  #### Task : Given images and raw data try to predict the **Pawpularity** i.e the perception of consumer that he\/she\/they can get attracted and thus adopt them.\n\n","192f08b8":"## Work under construction... (Model Training, validation, tuning, different augmentation techniques etc.)\n\n\n"}}