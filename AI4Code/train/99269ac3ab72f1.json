{"cell_type":{"007f8296":"code","9b40f00f":"code","8c88aaf4":"code","3e03611c":"code","3cb193c0":"code","5adcf0d9":"code","3bd16f77":"code","c779e2f3":"code","adff17fa":"code","0574e6c4":"code","7e620932":"code","34ce0ba6":"code","0e2911e8":"code","78efffaf":"code","a8ed8e78":"code","3a6c82df":"code","0a066530":"code","c2b46b50":"code","37aded74":"code","94e04fc9":"code","3c2fd1ba":"code","99e78e30":"code","7b0b6aaa":"code","a63357aa":"code","0817d08b":"code","ad26db69":"code","2ecec22d":"code","0ba24d1b":"code","111ee401":"code","10645706":"code","3cc231f1":"code","82a1b7e2":"code","5d4a3f0c":"code","a82aae19":"code","04714260":"code","12411f2e":"code","8a5303a5":"code","4e0f6a6e":"code","a77c37c9":"markdown","4ccf236b":"markdown","336c31f2":"markdown","7569b7f3":"markdown","c62aea82":"markdown","44f425b7":"markdown","0552e758":"markdown","938a9505":"markdown","254ef1e6":"markdown","26fecd6c":"markdown","fc4874fc":"markdown","cac80473":"markdown","279b7309":"markdown","1153d577":"markdown"},"source":{"007f8296":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt","9b40f00f":"data = pd.read_csv('\/kaggle\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv')\ndata.describe()","8c88aaf4":"data.head()","3e03611c":"data.isnull().sum()","3cb193c0":"sns.countplot('Genre',data=data)","5adcf0d9":"corr = data.corr()\ncorr","3bd16f77":"sns.heatmap(corr)","c779e2f3":"for genre in ['Fiction','Non Fiction']:\n    temp_fiction = data[data['Genre']==genre]\n    sns.lmplot(x='Reviews',y='Price',data=temp_fiction, fit_reg=False)\n    plt.title('{} Books'.format(genre))\n    plt.xlabel('Reviews')\n    plt.ylabel('Price')\n    plt.show()","adff17fa":"temp = data[data['Genre']=='Fiction']\nyears =  sorted(temp['Year'].unique().tolist())\nmean_rating = pd.DataFrame([], columns=['Year','Rating','Genre'])\nfor index, year in enumerate(years):\n    \n    fn_temp = data[(data['Genre']=='Fiction') & (data['Year'] == year)]\n    fn_rating = fn_temp['User Rating'].mean()\n    nfn_temp = data[(data['Genre'] == 'Non Fiction') & (data['Year'] == year)]\n    nfn_rating = nfn_temp['User Rating'].mean()\n    temp_fn = {'Year':year,'Rating':fn_rating,'Genre':'Fiction'}\n    temp_nfn = {'Year':year, 'Rating':nfn_rating,'Genre':'Non_Fiction'}\n    mean_rating = mean_rating.append(temp_fn, ignore_index = True)\n    mean_rating = mean_rating.append(temp_nfn, ignore_index = True)\nmean_rating","0574e6c4":"sns.catplot(x='Year', y='Rating', hue='Genre', data=mean_rating, kind='bar')\nplt.xticks(rotation=90)\nplt.title('Average Rating Per Year (Genre Wise)')\n","7e620932":"author_price = pd.DataFrame([],columns=['Author','Mean Price'])\nauthors = data['Author'].unique()\nfor index, author in enumerate(authors):\n    author_data = data[data['Author']==author]\n    mean_price = author_data['Price'].mean()\n    author_price.loc[index] = [author,mean_price]\nauthor_price =  author_price.sort_values('Mean Price', ascending=False).iloc[:10,:]\nauthor_price","34ce0ba6":"sns.barplot(x = 'Author', y ='Mean Price',data= author_price)\nplt.xticks(rotation=90)\nplt.title('Authors with Books of Maximum Price')","0e2911e8":"for feature in ['Reviews','Price']:\n    sns.distplot(data[feature])\n    plt.title('Histogram of {}'.format(feature))\n    plt.show()","78efffaf":"sns.barplot(x = data['Author'].value_counts().head(10).index,y = data['Author'].value_counts().head(10).values,data=data)\nplt.xticks(rotation=90)\nplt.title('Top 10 Authors with Max BestSeller Books')\nplt.show()","a8ed8e78":"y = data.Genre","3a6c82df":"X = data.drop(columns=['Name','Author','Genre'])","0a066530":"def clean(x):\n    x = re.sub('[^A-z\\s]','',x)\n    return x.lower()","c2b46b50":"import re\ntext = data.Name.apply(lambda x: clean(x)) ","37aded74":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidfconverter = TfidfVectorizer(max_features=1500,max_df=0.6,min_df=1)\ntext_num = tfidfconverter.fit_transform(text).toarray()","94e04fc9":"x = np.concatenate((text_num,X),axis=1)\nprint('Shape of input features {}'.format(x.shape))","3c2fd1ba":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx = scaler.fit_transform(x)","99e78e30":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder() \ny = label_encoder.fit_transform(y)","7b0b6aaa":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(x,y, test_size=0.2)","a63357aa":"from sklearn.svm import SVC\nsvc_clf = SVC(C=1.0,gamma='auto')","0817d08b":"from sklearn.linear_model import LogisticRegression\nlr_clf = LogisticRegression()","ad26db69":"from sklearn.ensemble import AdaBoostClassifier\nab_clf = AdaBoostClassifier(n_estimators=200,learning_rate=0.1)","2ecec22d":"from sklearn.ensemble import GradientBoostingClassifier\ngb_clf = GradientBoostingClassifier(n_estimators=200,learning_rate=0.1)","0ba24d1b":"from sklearn.tree import DecisionTreeClassifier\ndt_clf = DecisionTreeClassifier()","111ee401":"from sklearn.linear_model import RidgeClassifier\nrg_clf = RidgeClassifier(alpha=1.0, class_weight='balanced')\n","10645706":"from sklearn.linear_model import RidgeClassifierCV\nrgcv_clf = RidgeClassifierCV(cv=10)\n# rgcv_clf.fit(xtrain,ytrain)","3cc231f1":"from sklearn.naive_bayes import GaussianNB\ngnb_clf = GaussianNB()\n# clf.fit(xtrain,ytrain)","82a1b7e2":"from catboost import CatBoostClassifier\ncb_clf = CatBoostClassifier(learning_rate = 0.001,iterations = 2,verbose=False)","5d4a3f0c":"from sklearn.metrics import accuracy_score, f1_score\ndef metrics(ytest,ypred):\n    accuracy = accuracy_score(ytest,ypred)\n    harmonic_mean = f1_score(ytest,ypred)\n    return accuracy, harmonic_mean","a82aae19":"from sklearn.model_selection import cross_val_score\nmodels = [svc_clf, lr_clf, ab_clf, gb_clf, dt_clf,rg_clf, rgcv_clf, gnb_clf,cb_clf] \nresult = pd.DataFrame([],columns=['Model','Accuracy','F1 Score','CV_Accuracy'])\n","04714260":"def get_model_result(model, model_id, cv_unit):\n    model.fit(xtrain,ytrain)\n    ypred = model.predict(xtest)\n    accuracy, f1_score = metrics(ytest,ypred)\n    cv_accuracy = cross_val_score(model, xtrain, ytrain, scoring='accuracy', cv=cv_unit)\n    result.loc[model_id] = [str(model),accuracy, f1_score, cv_accuracy.mean()]\n    ","12411f2e":"for model_id, model in enumerate(models):\n    get_model_result(model, model_id, cv_unit=10)\n    \nresult","8a5303a5":"from mlxtend.classifier import StackingCVClassifier\nstack_gen = StackingCVClassifier(classifiers=models,\n                                meta_classifier=lr_clf,\n                                use_features_in_secondary=True,cv=10)\nstack_gen.fit(np.array(xtrain),np.array(ytrain))\nypred = stack_gen.predict(np.array(xtest))\n\n","4e0f6a6e":"accuracy, f1_score_value = metrics(ytest,ypred)\nprint('StackingCV Accuracy {} and F1 Score {}'.format(accuracy,f1_score_value))","a77c37c9":"# StackingCV Classifier","4ccf236b":"Top 10 Author with Books of Maximum Price","336c31f2":"# Genre Prediction","7569b7f3":"**Top 10 Authors with Max BestSeller Books**","c62aea82":"**Distribution of Classes**","44f425b7":"# Import Dataset","0552e758":"# Get Result of all Models","938a9505":"**Histogram of Reviews and Price**","254ef1e6":"# Checking for Null Values","26fecd6c":"**Correlation Matrix**","fc4874fc":"# Initializing Models","cac80473":"**Average Rating of BestSeller Books (For Fiction and Non-Fiction Books)**","279b7309":"# Exploratory Data Analysis (EDA)","1153d577":"**Scatter Plot of Price and Reviews (For Fiction and Non-Fiction Books)**"}}