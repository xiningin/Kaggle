{"cell_type":{"d89b7afd":"code","f5412a45":"code","d2fa6129":"code","d91915db":"code","f2e1299d":"code","4120c35b":"code","f78d148b":"code","e22ff0e8":"code","92f9873d":"code","eb677e4b":"code","dfbb0e8c":"code","a7588f83":"markdown","f0b2c214":"markdown","65a725dd":"markdown","d07be316":"markdown","69817c4d":"markdown","2aba8bd1":"markdown","751991f3":"markdown"},"source":{"d89b7afd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f5412a45":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n%matplotlib inline","d2fa6129":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv')\n\nX_train = train.drop(columns=['target'])","d91915db":"print(train.shape)\ntrain.head()","f2e1299d":"plt.figure(figsize=(20,10))\nsns.countplot(x = 'target', data = train, order = train['target'].value_counts().index)","4120c35b":"# YOUR CODE HERE: Define a list of the features to be used for the clustering\nfeatures = train.columns[1:-1]\n\nX_features = train.loc[:, features]\n\nkmeans = KMeans(n_clusters = 2,n_init=10)\n\ntrain['Cluster'] = kmeans.fit_predict(X_features)\n\ntrain.head()\nX_features.head()","f78d148b":"data = train.loc[:,['target','Cluster']]\nplt.figure(figsize=(20,8))\nsns.histplot(data = train[train['target']=='Class_1']['Cluster'], kde= False, color = 'Pink')\nsns.histplot(data = train[train['target']=='Class_2']['Cluster'], kde= False, color = 'Red')\nsns.histplot(data = train[train['target']=='Class_3']['Cluster'], kde= False, color = 'Purple')\nsns.histplot(data = train[train['target']=='Class_4']['Cluster'], kde= False, color = 'Gray')\nsns.histplot(data = train[train['target']=='Class_5']['Cluster'], kde= False, color = 'Black')\nsns.histplot(data = train[train['target']=='Class_6']['Cluster'], kde= False, color = 'Blue')\nsns.histplot(data = train[train['target']=='Class_7']['Cluster'], kde= False, color = 'Brown')\nsns.histplot(data = train[train['target']=='Class_8']['Cluster'], kde= False, color = 'Orange')\nsns.histplot(data = train[train['target']=='Class_9']['Cluster'], kde= False, color = 'Green')","e22ff0e8":"def apply_pca(X, standardize=True):\n    # Standardize\n    if standardize:\n        X = (X - X.mean(axis=0)) \/ X.std(axis=0)\n    # Create principal components\n    pca = PCA()\n    X_pca = pca.fit_transform(X)\n    # Convert to dataframe\n    component_names = [f\"PC{i+1}\" for i in range(X_pca.shape[1])]\n    X_pca = pd.DataFrame(X_pca, columns=component_names)\n    # Create loadings\n    loadings = pd.DataFrame(\n        pca.components_.T,  # transpose the matrix of loadings\n        columns=component_names,  # so the columns are the principal components\n        index=X.columns,  # and the rows are the original features\n    )\n    return pca, X_pca, loadings","92f9873d":"# `apply_pca`, defined above, reproduces the code from the tutorial\npca, X_pca, loadings = apply_pca(X_features)\nprint(loadings)","eb677e4b":"X_pca.head(5)","dfbb0e8c":"sns.catplot(\n    y='value',\n    col ='variable',\n    data = X_pca.melt(),\n    kind='boxen',\n    sharey = False,\n    col_wrap = 2,\n);","a7588f83":"# Carregar a Base de Treino","f0b2c214":"# Carregar os Pacotes","65a725dd":"## Cluster K-Means","d07be316":"# Exploratory Data Analysis","69817c4d":"## PCA - Principal Component Analysis","2aba8bd1":"## Count Plot","751991f3":"# Working in progress"}}