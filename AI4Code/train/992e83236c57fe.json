{"cell_type":{"76d97e21":"code","c4573b8b":"code","9e600713":"code","53503a63":"code","9c31d5bc":"code","84a7d6ae":"code","dd216a5d":"code","35886b97":"code","0d012800":"code","1fd48227":"code","886a90bb":"code","da2fa523":"code","928dc272":"code","22e24569":"code","393bc0bd":"markdown","7f1b8009":"markdown"},"source":{"76d97e21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #ploting \nimport seaborn as sns #plotting\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4573b8b":"df=pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","9e600713":"df.head()","53503a63":"#coverting quality into binary thaking 6 threshold\ndf['quality']=df['quality'].apply(lambda x : 1 if x>6 else 0)\ndf.head()","9c31d5bc":"#checkimg corelation\ncorr=df.corr()\nsns.heatmap(corr)\ns = corr.unstack()\nsorting_corr = s.sort_values(kind=\"quicksort\")","84a7d6ae":"print(sorting_corr[(sorting_corr>0.6) & (sorting_corr!=1)])","dd216a5d":"#checking null values\ndf.notnull().count()","35886b97":"#checking negative values\n(df>=0).count()","0d012800":"#importing librabries, I add the common imports in this cell\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, roc_curve, f1_score, accuracy_score, recall_score\nfrom sklearn.feature_selection import VarianceThreshold","1fd48227":"#selection using variance threshold\nX=df.drop('quality',axis=1)\ny=df['quality']\nsel = VarianceThreshold(threshold=(.8 * (1 - .8)))\nsel.fit(X)\nX=X[X.columns[sel.get_support(indices=True)]]\nprint(X)\n#split train test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33,shuffle=False)","886a90bb":"#prediction with Logistic regrression\nfrom sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(X_train,y_train)\npred=lr.predict(X_test)\nprint(confusion_matrix(y_test,pred))\nprint(\"Accuracy :\",accuracy_score(y_test,pred),\"\\n f1 acore :\",f1_score(y_test,pred),\"\\n recall :\",recall_score(y_test,pred))\nfpr, tpr, threshold = roc_curve(y_test, pred)\nprint(fpr,tpr)\nplt.plot(fpr,tpr,'b')","da2fa523":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train,y_train)\npred=knn.predict(X_test)\nprint(confusion_matrix(y_test,pred))\nprint(\"Accuracy :\",accuracy_score(y_test,pred),\"\\n f1 acore :\",f1_score(y_test,pred),\"\\n recall :\",recall_score(y_test,pred))\nfpr, tpr, threshold = roc_curve(y_test, pred)\nprint(fpr,tpr)\nplt.plot(fpr,tpr,'b')","928dc272":"knn=KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train,y_train)\npred=knn.predict(X_test)\nprint(confusion_matrix(y_test,pred))\nprint(\"Accuracy :\",accuracy_score(y_test,pred),\"\\n f1 acore :\",f1_score(y_test,pred),\"\\n recall :\",recall_score(y_test,pred))\nfpr, tpr, threshold = roc_curve(y_test, pred)\nprint(fpr,tpr)\nplt.plot(fpr,tpr,'b')","22e24569":"knn=KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train,y_train)\npred=knn.predict(X_test)\nprint(confusion_matrix(y_test,pred))\nprint(\"Accuracy :\",accuracy_score(y_test,pred),\"\\n f1 acore :\",f1_score(y_test,pred),\"\\n recall :\",recall_score(y_test,pred))\nfpr, tpr, threshold = roc_curve(y_test, pred)\nprint(fpr,tpr)\nplt.plot(fpr,tpr,'b')","393bc0bd":"# Logistic Regrression","7f1b8009":"# KNN"}}