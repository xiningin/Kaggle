{"cell_type":{"9b79fac0":"code","a7321fd0":"code","133b967c":"code","8135d590":"code","794ef46b":"code","af8be6b4":"code","0f7fa016":"code","56918725":"code","3840e52c":"code","34a4d24b":"code","e58b3baf":"code","e7b9cd1e":"code","3aaf53bc":"markdown","f6692292":"markdown","364925ed":"markdown","02ef5595":"markdown","bc9c00f9":"markdown","e23f83de":"markdown","c0f246fe":"markdown","15667eaa":"markdown","bd3fd625":"markdown","9882da6c":"markdown","56c03fd3":"markdown","860fab59":"markdown","24d7c5e4":"markdown"},"source":{"9b79fac0":"# Data Handling\nimport numpy as np\nimport pandas as pd\n\n# Plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Modeling\nfrom mlxtend.preprocessing import minmax_scaling\nfrom sklearn.linear_model import LinearRegression\n\n# Evaluation\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\n# File paths to datasets\nPATH_DATA_BOTTLES = '\/kaggle\/input\/calcofi\/bottle.csv'\nPATH_DATA_CAST = '\/kaggle\/input\/calcofi\/cast.csv'\n\nprint('Completed imports')","a7321fd0":"df_bottles_raw = pd.read_csv(PATH_DATA_BOTTLES, usecols=['Salnty', 'T_degC'])\n\nprint('Completed loading data')","133b967c":"print(f'Bottles Description:\\n{df_bottles_raw.describe()}')\nprint(f'\\nBottles Head:\\n{df_bottles_raw.head()}')\nprint(f'\\nBottles Tail:\\n{df_bottles_raw.tail()}')\n\nn_elements = np.product(df_bottles_raw.shape)\ns_nans = df_bottles_raw.isnull().sum()\n\nprint(f'\\nNumber of missing entries for both columns:\\n{s_nans}')\n\nn_nans = s_nans.sum()\n\nprint(f'\\nOut of {n_elements} total elements, {n_nans} are null. This corresponds to {n_nans \/ n_elements:.2%}.')","8135d590":"df_bottles_nan = df_bottles_raw.fillna(method='backfill')\n\nn_nans_new = df_bottles_nan.isnull().sum().sum()\nprint(f'A total of {n_nans_new} entries are missing.')","794ef46b":"sns.jointplot(x='Salnty', y='T_degC', data=df_bottles_nan, s=5)","af8be6b4":"df_bottles_nan = df_bottles_raw.dropna()\nsns.jointplot(x='Salnty', y='T_degC', data=df_bottles_nan, s=5)","0f7fa016":"df_bottles_nan.corr()","56918725":"df_bottles_scaled = minmax_scaling(df_bottles_nan, columns=df_bottles_nan.columns)\n\nmin_temp, max_temp = df_bottles_nan['T_degC'].min(), df_bottles_nan['T_degC'].max()\nmin_sal, max_sal = df_bottles_nan['Salnty'].min(), df_bottles_nan['Salnty'].max()\n\ndf_bottles_scaled.describe()","3840e52c":"X = df_bottles_scaled['Salnty'].values.reshape(-1, 1) # reshape required due to single feature\ny = df_bottles_scaled['T_degC'].values\n\n# Split train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n# Create model\nmodel = LinearRegression()\n\n# Fit model on training data\nmodel.fit(X_train, y_train)\n\n# Retrieve intercept and coefficient\nintercept = model.intercept_\ncoeff = model.coef_[0]\n\n# Print result\nprint(f'Fitted model:\\n\\tintercept: {model.intercept_}\\n\\tcoefficient: {model.coef_[0]}\\n\\tscore: {model.score(X_test, y_test)}')\n","34a4d24b":"sns.scatterplot(x=X_train[:, 0], y=y_train)\nplt.xlabel('salinity')\nplt.ylabel('temperature')\n\nticks_x = np.linspace(0., 1., 1000)\nticks_y = intercept + (coeff * ticks_x)\n\nsns.lineplot(ticks_x, ticks_y)","e58b3baf":"score_r2 = model.score(X_test, y_test)\n\n# Predict values using result\ny_pred = model.predict(X_test)\n# y_pred = intercept + (coeff * X_test) # equivalent\n\n# Consider absolute error since we only have one dimension at this point\nscore_mse = mean_absolute_error(y_test, y_pred)\nprint(f'Scoring\\n\\tR^2: {score_r2}\\n\\tMean Absolute Error: {score_mse}')","e7b9cd1e":"'''Inverse function of min-max scaling. The min-max implementation does - afaik - not offer this..\n'''\nrescale = lambda val: (val*(max_temp - min_temp)) + min_temp # min\/max values are constant as we only need to rescale the temperature\n\n# Rescale the test and predicted temperatures values\ny_test_r = rescale(y_test)\ny_pred_r = rescale(y_pred)\n\n# Compute and print absolute error\nscore_mse_r = mean_absolute_error(y_test_r, y_pred_r)\nprint(f'Scoring\\n\\tR^2: {score_r2}\\n\\tMean Absolute Error: {score_mse_r}')","3aaf53bc":"## Results\nWe find the temparature to vary from as cold as `1.4` up to `31.1` degrees Celsius with a standard deviation of `4.2`. In contrast, the solinity remains more stable with a deviation of only `0.46`, that is most values are close to the overall mean of `33.84`.\n\n## Handle Missing Values\nIn total, `58,317` out of `1,729,726` values are missing which corresponds to `3.37%`. Most of these missing values are solinity (`47,354` compared to `10,963` for temparature). Luckily, these values are ordered by time, so we can fill the entries using a backfill approach. That is, we replace missing entries by the next valid one. ","f6692292":"### Results\nOn average, roughly `25%` of the variance of unseen samples in temparature can be explained by using the respective silinity as a feature. This leads to an average (absolute) error of only `0.09`. Let's scale the data back to its original range in order to see to what temperature this error corresponds.","364925ed":"## Results\nThis looks like a poor fit. However, this can be caused a visualization problem. In fact, most data points are along the derived line (compare the distribution plots). It's just that most of these points overlap. Let's apply some metrics to further analyze the goodness of fit.\n\nThe same result could have been derived using the `kind='reg'` option in seaborn's `sns.jointplot` function call, but I'm here to learn ;)","02ef5595":"## Result\nBoth value ranges are now within `0.0` and `1.0`. Time to construct the model!","bc9c00f9":"## Validation\nWe start by plotting the resulting line (simple since we only consider one feature).","e23f83de":"# Visualization\nPrint distribution of both series.","c0f246fe":"# Results\nOn overage, our model, even though quite simple, misses the temperature by only `2.68` degree celsius when tested on unseen samples. This is a suprisingly good result as we only considered a single feature (namely the salinity). For improvements, one could extend the model by searching for other useful features in the data.  ","15667eaa":"# Exploration\nPrint some info about the data including\n\n1. Simple description\n2. Samples (head and tail)\n3. Number of missing values","bd3fd625":"# Prediction\nThere seems to be a significant (negative) correlation between the two attributes. This means that low values of one measure usually met by high values of the respective other.\n\n## Scaling\nBefore building a regression model, we first min-max-scale the data in order to ensure a quicker convergence when training the model. This might be a bit over-cooked, but - afaik - doesn't hurt either.","9882da6c":"## Results\nWe find some vertical lines which could be due to the insertion of missing values. We test this hypothesis by alternatively removing all rows with missing values and produce the same plot.","56c03fd3":"# Load Data\nLoad datasets into Pandas DataFrame","860fab59":"## Results (continued)\nThe artifical vertical lines are gone. It is likely that missing values are caused by an outage over an extended time period instead of separate isolated occasions. This leads to consecutive NaN values in the dataset. Applying the backfill method (as was done before) then fills each each of these NaN series with the same salinity values. It is strange however that these chains seem to stretch over large temperature ranges, hence the vertical line.\nHowever, this finding could be biased by the visualization. For similar chains corresponding to temperatures being closer to each other, the entries of the scatter plot might simply overlap. In order to be sure, we continue with the dataset that has the rows containing missing values removed.\n\nAs found before, the distribution of the salinity values is much more centered. In particular, we can observe two spikes whereas the temparature is more spread across the entire value range.\n\n# Correlation\nThere seems to be a pattern in the scatter plot. Let's see whether both values are correlated.","24d7c5e4":"# Linear Regression Analysis\nAnalyse dataset of oceanographic data to answer the following questions (as posted [here](https:\/\/www.kaggle.com\/rtatman\/datasets-for-regression-analysis)):\n\n1. Is there a relationship between water salinity & water temperature?\n2. Can you predict the water temperature based on salinity?\n\n## Imports\nPerform all required imports and set constants"}}