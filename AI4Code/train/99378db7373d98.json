{"cell_type":{"461c8981":"code","44f38206":"code","e03341ed":"code","cb34ab9a":"code","fd671249":"code","998d48a6":"code","0e1a4d4c":"code","08103636":"markdown","93ff7368":"markdown","bcac8612":"markdown","95934941":"markdown","265ede1c":"markdown","182450a5":"markdown","dea2de0a":"markdown","2131eb58":"markdown"},"source":{"461c8981":"#Import libraries\nimport pandas as pd\nimport numpy as np\nimport datetime\n\n#And data\ndata = pd.read_csv('\/kaggle\/input\/order-brushing-shopee-code-league\/order_brush_order.csv', parse_dates=[3])\n\n#Sort the data by 'event_time', so the orders are in sequence\ndata.sort_values('event_time', ascending = True, inplace=True)\ndata.reset_index(drop=True, inplace=True)","44f38206":"data['shopid'] = data['shopid'].astype(str)\ndata['userid'] = data['userid'].astype(str)\ndata['string_shop_user'] = data[['shopid', 'userid']].apply(lambda x: ''.join(x), axis=1)","e03341ed":"customers_more_two_orders = pd.DataFrame(data.groupby('string_shop_user').orderid.count() > 2)\ncustomers_more_two_orders = list(customers_more_two_orders[customers_more_two_orders.orderid == True].index)\nmask = data['string_shop_user'].isin(customers_more_two_orders)\ndata_filtered = data[mask]\ndata_filtered.reset_index(drop=True, inplace=True)","cb34ab9a":"#Create blank dataframe for final results\ncolumns = ['orderid', 'shopid', 'userid', 'event_time', 'string_shop_user']\nsummary = pd.DataFrame(columns = columns)\n\n#Iterate through orders by 1 hour time frame\nfor i in range(data_filtered.shape[0]):\n    \n    #set 1 hour timeframe\n    limit = datetime.timedelta(0,3600) #1 hour time frame\n    start = data_filtered.loc[i, 'event_time'] #start time of time frame\n    end = data_filtered.loc[i, 'event_time'] + limit #end time of time frame\n    \n    #filter data of one hour\n    data_hour = data_filtered[(data_filtered['event_time'] >= start) & (data_filtered['event_time'] <= end)]\n    \n    #select users who ordered more than twice\n    data_hour_users = pd.DataFrame(data_hour.groupby('string_shop_user').orderid.count() > 2)\n    result_data_hour = data_hour['string_shop_user'].isin(list(data_hour_users[data_hour_users.orderid == True].index))\n    result_hour = data_hour[result_data_hour]\n    \n    #Store results in summary dataframe\n    summary = summary.append(result_hour)","fd671249":"#remove duplicates\nsummary.drop('orderid', axis=1, inplace=True)\nsummary.drop('event_time', axis=1, inplace=True)\nsummary.drop('string_shop_user', axis=1, inplace=True)\nsummary = summary.drop_duplicates(keep='first')","998d48a6":"#Clean and put the data in submission format\nsummary['shopid'] = summary['shopid'].astype(int)\nsummary['userid'] = summary['userid'].astype(int)\nsummary_sorted = summary.sort_values(by=['shopid', 'userid'], ascending=True)\nsummary_sorted.reset_index(drop=True, inplace=True)\n\n#Consolidate userid\nfor i in range(summary_sorted.shape[0]):\n    if summary_sorted.loc[i, 'shopid'] == summary_sorted.loc[i+1, 'shopid']:\n        summary_sorted.loc[i, 'userid'] = str(summary_sorted.loc[i, 'userid']) + '&' + str(summary_sorted.loc[i+1, 'userid'])\n        summary_sorted.drop(i+1, inplace=True)\n        summary_sorted.reset_index(drop=True, inplace=True)        ","0e1a4d4c":"#Identify missing shops\nall_shops = list(set(data['shopid'])) #all shops in source data\nidentified_shops = list(summary_sorted['shopid']) #shops identified as order brushing\n\n#Iterate through all shops to remove identified shops\nfor shop in all_shops:\n    if shop in identified_shops:\n        all_shops.remove(shop)\n        \n#Add the missing shops in the dataframe\nmissing_shops = pd.DataFrame(total_shops) #Create dataframe with missing shops and 'userid' = 0\nmissing_shops['userid'] = np.zeros(len(total_shops))\nmissing_shops.columns = ['shopid','userid']\nmissing_shops['userid'] = missing_shops['userid'].astype(int)\n\n#Append to the summary_sorted fianl result dataframe\nfinal = summary_sorted.append(missing_shops)","08103636":"In order to identify shop \/ user combination with >=3 instances within an hour, iterate through orders (data_filtered) in 1 hour time deltas. Save all the identifies 'shopid' \/ 'userid' in dataframe (summary)","93ff7368":"The result evaluation is by Concentrate rate = Number of Orders within 1 hour \/ Number of Unique Buyers within 1 hour, therefore create a string composed of 'shopid' and 'userid'  to identify multiple instances of such combination within time period (in this case 1 hour)","bcac8612":"<h1> Order Brushing Detection. Score 0.9762 <\/h1>","95934941":"To reduce calculation leadtime - delete the customers, who order from a certain shop less than 3 times overall.\nThis operation reduces total number of orders from 222750 to 135977","265ede1c":"The timeframes in iteration overlapped, therefore there are duplicates in the summary dataframe. Remove the duplicates and unnecessary columns.","182450a5":"The summary_sorted contains only the 'shopid' who employed order brushing. Add remaining shops with the 'userid' = 0","dea2de0a":"This is final result of the analysis","2131eb58":"Summary dataframe contains the result: combinations of 'shopid' and 'userid' but not in the submission format. Therefore it is necessary: <br>\n    - to sort 'userid' in ascending format\n    - combine multiple 'userid' for same 'shopid' in 111&222&333 format"}}