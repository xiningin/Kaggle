{"cell_type":{"a0245ffa":"code","659fe16e":"code","fb30cbde":"code","ceeeae5e":"code","7b8904d5":"code","d3d1379f":"code","33fd5e07":"code","5a707eef":"code","61091888":"code","4e97c2c9":"code","167fd6fa":"code","28d3e100":"code","b5477eeb":"code","89cc628a":"code","f3134ab8":"code","3c34813c":"code","1e5de7e4":"code","d15912d8":"code","5e25cfc5":"code","d3039bab":"code","3bec1ff1":"code","cdc01ba5":"code","6c2529e9":"code","492a7923":"markdown","afb4a0ba":"markdown","ea7ed68e":"markdown","b18cdad0":"markdown"},"source":{"a0245ffa":"from pandas_datareader import data\nimport pandas_datareader as pdr\nimport seaborn as sns; sns.set()\nimport datetime as dt\nfrom matplotlib.pylab import plt\n%matplotlib inline\nimport pandas as pd\nfrom matplotlib.pylab import rcParams\nfrom datetime import datetime, timedelta\nimport re\n\nrcParams['figure.figsize'] = 20,10\npd.options.display.float_format = '{:.2f}'.format\npd.set_option('max_columns', 50)","659fe16e":"# set start and end date for stock data\ndef stock_dates(num_of_days_before_now, until_when):\n    \n    global start\n    \n    start = datetime.now()-timedelta(days=(num_of_days_before_now)) #8\/29\n    \n    global end\n    \n    if until_when == 'now':\n        end = datetime.now()#-timedelta(days=(1)) #must be day prior to predicted date\n    else:\n        end = until_when\n    \n    print('start:', start)\n    print('end:', end)","fb30cbde":"stock_dates(600, '2019-11-12')","ceeeae5e":"def predict_stock_movement(target_stock_symbol, target_column, stock1=None, stock2=None, stock3=None):\n    \"\"\"creates global variables\n    target_stock_symbol: the symbol of the stock that we want to make a prediction on\n    target_column: High, Low, Close etc.\n    stocks1-3: additional stocks to be included in analysis\"\"\"\n   \n    global target_stock \n    \n    target_stock = pdr.get_data_yahoo(target_stock_symbol, start, end)\n    \n    s1 = pdr.get_data_yahoo(stock1, start, end)\n    s2 = pdr.get_data_yahoo(stock2, start, end)\n    s3 = pdr.get_data_yahoo(stock3, start, end)\n\n    global stocks \n    stocks = target_stock.merge(s1, \n                      how='left', \n                      on='Date', \n                      suffixes=('{}'.format(target_stock_symbol), '{}'.format(stock1))\n                     ).merge(s2, \n                             how='left', \n                             on='Date', \n                             suffixes=('{}'.format(stock1), '{}'.format(stock2))\n                            ).merge(s3, \n                                    how='left', \n                                    on='Date', \n                                    suffixes=('{}'.format(stock2),'{}'.format(stock3)))\n    global X  \n    \n    #drop target column\n    #exclude last row which is reserved for prediction\n    X = stocks.drop(columns=[target_column+'{}'.format(target_stock_symbol)]).iloc[:-1]  ####remove last row\n    \n    global y \n    \n    #our target variable \n    #shifts index negative by one: the date on the target colum is pushed back one day. \n    #the values in the target column belong to the next day, i.e. Jan 1 is from Jan 2\n    y = stocks['{}'.format(target_column) + '{}'.format(target_stock_symbol)].shift(-1).iloc[:-1]\n    \n    global pred_values \n    \n    #gets only last row\n    pred_values = stocks.drop(columns=[target_column + '{}'.format(target_stock_symbol)]).iloc[[-1]]\n    \n    return stocks.tail()\n    ","7b8904d5":"#instantiate function\npredict_stock_movement('NTLA', 'High', '^VIX', '^GSPC', '^DJI')\n\n#function returns the last 5 rows of our full stocks dataframe","d3d1379f":"#pred_values","33fd5e07":"#X.tail()","5a707eef":"#y.tail()","61091888":"from xgboost import XGBRegressor\nmodel = XGBRegressor(gamma=1, n_estimators=5000, n_jobs=-1, max_depth=6, objective='reg:squarederror', early_stopping_rounds=50, learning_rate=.005)\n\n#from sklearn.svm import SVR\n#model = SVR(kernel='poly', gamma='scale', C=1.0, epsilon=0.1)\n\n#from sklearn.linear_model import LinearRegression\n#model = LinearRegression()\n\n#from sklearn.gaussian_process import GaussianProcessRegressor\n#model = GaussianProcessRegressor()","4e97c2c9":"#from sklearn.model_selection import train_test_split, GridSearchCV\n\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)\n\nmodel.fit(X_train, y_train)\n\npreds = model.predict(X_test)\n\nmodel.score(X_test, y_test)","167fd6fa":"X.tail(1)","28d3e100":"y.tail(1)","b5477eeb":"#make future prediction\nmodel.fit(X, y)","89cc628a":"#run a test prediction\n#X[X.index] returns a df\n\ndef date_to_predict(YYYY, MM, DD):\n    \n    date_to_predict = datetime(YYYY,MM,DD)\n    \n    date_to_make_prediction_from = date_to_predict - timedelta(days=(1))\n    \n    prediction = model.predict(X[X.index == date_to_make_prediction_from])\n    \n    print(prediction)\n\n    print('actual high:', y.loc[date_to_make_prediction_from])","f3134ab8":"date_to_predict(2019,11,12)","3c34813c":"pred_values","1e5de7e4":"print('predicted high for 10-13-19', model.predict(pred_values))","d15912d8":"linear test:\npredicted high [19.20171624]\nactual high: 19.079999923706055\n\nlinear forecast: 19.04427673\n\nxbg test:\npredicted high [19.477018]\nactual high: 19.079999923706055\n\nxbg forecast: 19.529238\n\n","5e25cfc5":"#fit full data\nmodel.fit(X, y)","d3039bab":"latest_values","3bec1ff1":"model.predict(latest_values)","cdc01ba5":"plt.figure(figsize=(20,15))\n\ntvix_close = tvix['Close']\ntvix_open = tvix['Open']\nsp_close = sp['Close'] - 2600\ndj_close = dj['Close'] - 25000 \nspy_close = spy['Close'] - 281\nspy_open = spy['Open'] - 281\ntvix_move = tvix['movement']\n\n\n#spy_open.plot(label='so', style='-')\n#spy_close.plot(label='sc', style='-')\n\n#tvix_open.plot(label='to', style='o')\n#tvix_close.plot(label='close')\n#tvix_move.plot(label='move', style='o')\n\n#sp500_close.plot()\n#dj_close.plot()\n#plt.legend(loc='lower left')\n#plt.errorbar(tvix_move.index, tvix_move, yerr=.5, marker='s', mfc='red', mec='green', ms=20, mew=4);\n#plt.plot(tvix_move.index, tvix_close);\nplt.boxplot(tvix_move)","6c2529e9":"stock.plot(alpha=.5, style='.')\nstock.resample('BA').mean().plot(style=':')\nstock.asfreq('BA').plot(style='--');","492a7923":"# Additional Code","afb4a0ba":"# Test","ea7ed68e":"# Models","b18cdad0":"# Make Stock Prediction"}}