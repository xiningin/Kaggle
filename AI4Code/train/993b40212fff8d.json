{"cell_type":{"1ab370fe":"code","58c140d1":"code","1139c324":"markdown"},"source":{"1ab370fe":"!pip install backtrader","58c140d1":"import backtrader as bt\nimport datetime\nfrom matplotlib.dates import (HOURS_PER_DAY, MIN_PER_HOUR, SEC_PER_MIN,\n                              MONTHS_PER_YEAR, DAYS_PER_WEEK,\n                              SEC_PER_HOUR, SEC_PER_DAY,\n                              num2date, rrulewrapper, YearLocator,\n                              MicrosecondLocator)\n\n\nclass TestStrategy(bt.Strategy):\n\n    def log(self, txt, dt=None):\n        ''' Logging function fot this strategy'''\n        dt = dt or self.datas[0].datetime.date(0)\n        print('%s, %s' % (dt.isoformat(), txt))\n\n    def __init__(self):\n        # Keep a reference to the \"close\" line in the data[0] dataseries\n        self.dataclose = self.datas[0].close\n        self.order = None\n\n\n    def notify_order(self, order):\n        if order.status in [order.Submitted, order.Accepted]:\n            return\n        \n        if order.status in [order.Completed]:\n            if order.isbuy():\n                self.log('BUY EXECUTED {}'.format(order.executed.price))\n            elif order.issell():\n                self.log('SELL EXECUTED {}'.format(order.executed.price))\n        \n            self.bar_executed = len(self)\n\n        self.order = None\n\n\n    def next(self):\n        # Simply log the closing price of the series from the reference\n        self.log('Close, %.2f' % self.dataclose[0])\n\n        if self.order:\n            return\n\n        if not self.position:\n            if self.dataclose[0] < self.dataclose[-1]:\n                # current close less than previous close\n\n                if self.dataclose[-1] < self.dataclose[-2]:\n                    # previous close less than the previous close\n\n                    # BUY, BUY, BUY!!! (with all possible default parameters)\n                    self.log('BUY CREATE, %.2f' % self.dataclose[0])\n                    self.order = self.buy()\n        else:\n            if len(self) >= (self.bar_executed + 5):\n                self.log('SELL CREATED {}'.format(self.dataclose[0]))\n                self.order = self.sell()\n                \n\n                \nclass Trader:\n\n    cerebro = bt.Cerebro()\n\n    cerebro.broker.set_cash(1000000)\n\n\n    data = bt.feeds.YahooFinanceCSVData(dataname='..\/input\/historical-amazon-stock-prices\/AMZN.csv',\n                                        fromdate=datetime.datetime(2020, 1, 1),\n                                        todate=datetime.datetime(2020, 9, 23),\n                                        reverse=False)\n    cerebro.adddata(data)\n\n    cerebro.addstrategy(TestStrategy)\n    cerebro.addsizer(bt.sizers.FixedSize, stake=300)\n\n    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\n\n    cerebro.run()\n\n    print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())\n\n    #Save output\n    \n    figure = cerebro.plot(style ='candlebars')[0][0]\n    figure.savefig('result.png')","1139c324":"# Backtesting \ud83d\udcc8\n\n## \ud83e\uddee What is Backtesting??\n\nBacktesting is the process of testing a trading or investment strategy using data from the past to see how it would have performed.\nThe general idea of a backtest is to run through stock prices in the past, usually with software, and hypothetically firing trades based on a certain trading strategy.\n\nBacktesting accomplishes 3 things:\n\n1. Shows if a strategy performs well in periods when it is supposed to, and vice versa\n2. Provides an understanding of how the strategy performs in different markets.\n3. Produces insights on how the strategy might be improved on.\n\n\n## \ud83d\udcbb About this notebook:\n\nBacktrader is a Python library that aids in strategy development and testing for traders of the financial markets.\nIt is an open-source framework that allows for strategy testing on historical data. Further, it can be used to optimize strategies, create visual plots, and can even be used for live trading.\n\nHere I use the Amazon historical prices data, to develop the backtest.\n\n**As a result we have the following plot:**\n\n\ud83d\udcc5 Time Period: From 2020 Jan 1 - To 2020 Sep 23\n\n\ud83d\udcb5 **Initial** Portifolio Value: $ 1000000.00\n\n\ud83d\udcb5 **Final** Portifolio Value:   $ 1447267.00\n\n\n![](https:\/\/raw.githubusercontent.com\/josehenriqueroveda\/backtesting\/master\/Figure_0.png)\n\n---\n\n### About:\n\n> - \ud83d\udcbb **Jos\u00e9 Henrique Roveda**\n> - \ud83d\udce8 Contact me on [LinkedIn](https:\/\/www.linkedin.com\/in\/jhroveda\/)"}}