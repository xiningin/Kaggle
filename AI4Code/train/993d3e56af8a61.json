{"cell_type":{"d375b48d":"code","41fc1080":"code","ec6f717b":"code","9ac59ca9":"code","813e9924":"code","433adc30":"code","6fafbd4e":"markdown"},"source":{"d375b48d":"from __future__ import print_function, division\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom keras.layers import Conv1D, Input, Add, Activation, Dropout\n\nfrom keras.models import Sequential, Model\n\nfrom keras.regularizers import l2\n\nfrom keras.initializers import TruncatedNormal\n\nfrom keras.layers.advanced_activations import LeakyReLU, ELU\n\nfrom keras import optimizers","41fc1080":"def DC_CNN_Block(nb_filter, filter_length, dilation, l2_layer_reg):\n    def f(input_):\n        \n        residual =    input_\n        \n        layer_out =   Conv1D(filters=nb_filter, kernel_size=filter_length, \n                      dilation_rate=dilation, \n                      activation='linear', padding='causal', use_bias=False,\n                      kernel_initializer=TruncatedNormal(mean=0.0, stddev=0.05, \n                      seed=42), kernel_regularizer=l2(l2_layer_reg))(input_)\n                    \n        layer_out =   Activation('selu')(layer_out)\n        \n        skip_out =    Conv1D(1,1, activation='linear', use_bias=False, \n                      kernel_initializer=TruncatedNormal(mean=0.0, stddev=0.05, \n                      seed=42), kernel_regularizer=l2(l2_layer_reg))(layer_out)\n        \n        network_in =  Conv1D(1,1, activation='linear', use_bias=False, \n                      kernel_initializer=TruncatedNormal(mean=0.0, stddev=0.05, \n                      seed=42), kernel_regularizer=l2(l2_layer_reg))(layer_out)\n                      \n        network_out = Add()([residual, network_in])\n        \n        return network_out, skip_out\n    \n    return f\n","ec6f717b":"def DC_CNN_Model(length):\n    \n    input = Input(shape=(length,1))\n    \n    l1a, l1b = DC_CNN_Block(32,2,1,0.001)(input)    \n    l2a, l2b = DC_CNN_Block(32,2,2,0.001)(l1a) \n    l3a, l3b = DC_CNN_Block(32,2,4,0.001)(l2a)\n    l4a, l4b = DC_CNN_Block(32,2,8,0.001)(l3a)\n    l5a, l5b = DC_CNN_Block(32,2,16,0.001)(l4a)\n    l6a, l6b = DC_CNN_Block(32,2,32,0.001)(l5a)\n    l6b = Dropout(0.5)(l6b) #dropout used to limit influence of earlier data\n    l7a, l7b = DC_CNN_Block(32,2,64,0.001)(l6a)\n    l7b = Dropout(0.5)(l7b) #dropout used to limit influence of earlier data\n\n    l8 =   Add()([l1b, l2b, l3b, l4b, l5b, l6b, l7b])\n    \n    l9 =   Activation('relu')(l8)\n           \n    l21 =  Conv1D(1,1, activation='linear', use_bias=False, \n           kernel_initializer=TruncatedNormal(mean=0.0, stddev=0.05, seed=42),\n           kernel_regularizer=l2(0.001))(l9)\n\n    model = Model(inputs=input, outputs=l21)\n    \n    adam = tf.keras.optimizers.Adam(lr=0.00075, beta_1=0.9, beta_2=0.999, epsilon=None,  decay=0.0, amsgrad=False)\n    \n    model.compile(loss='mae', optimizer=adam, metrics=['mse']) # best\n    \n    return model","9ac59ca9":"#url = \"time_series_covid19_confirmed_global.csv\"\nurl = \"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\"\ndf = pd.read_csv(url)\ndf2 = df.loc[(df[\"Country\/Region\"] == \"Italy\"),'1\/29\/20':]\ndf2 = df2.assign(next = [19899]) \narr = df2.to_numpy()\n\ni = 0\nb = []\nwhile i < arr.shape[1]:\n    temp = arr[0][i]-arr[0][i-1]\n    if temp > 0:\n        b.append(temp)\n    i += 1\ntimeseries = np.array(b)\ntimeseries\n\n# timeseries input is 1-D numpy array\n# forecast_size is the forecast horizon\n\ntimeseries = timeseries[~pd.isna(timeseries)]\n\nlength = len(timeseries)-1\n\ntimeseries = np.atleast_2d(np.asarray(timeseries))\nif timeseries.shape[0] == 1:\n    timeseries = timeseries.T \n\nmodel = DC_CNN_Model(length)\nprint('\\n\\nModel with input size {}, output size {}'.\n                            format(model.input_shape, model.output_shape))\n\nmodel.summary()\n\nX = timeseries[:-1].reshape(1,length,1)\ny = timeseries[1:].reshape(1,length,1)\n\nmodel.fit(X, y, epochs=4000)\n   \n","813e9924":"predict_size = 30\n\npred_array = np.zeros(predict_size).reshape(1,predict_size,1)\nX_test_initial = timeseries[1:].reshape(1,length,1)\nprint(X_test_initial.ravel())\npred_array = model.predict(X_test_initial)# if predictions of training samples required\n\n#forecast is created by predicting next future value based on previous predictions\npred_array[:,0,:] = model.predict(X_test_initial)[:,-1:,:]\nfor i in range(predict_size-1):\n    #print(i)\n    #print(pred_array)\n    pred_array[:,i+1:,:] = model.predict(np.append(X_test_initial[:,i+1:,:], \n                           pred_array[:,:i+1,:]).reshape(1,length,1))[:,-1:,:]\n","433adc30":"raveld = pred_array.ravel()\nprint(raveld.sum())\nraveld","6fafbd4e":"# Neural network prediction\nSource:\nhttps:\/\/github.com\/kristpapadopoulos\/seriesnet.git"}}