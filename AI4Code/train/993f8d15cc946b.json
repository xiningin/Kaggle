{"cell_type":{"b0b41385":"code","643e5fd4":"code","32e0ae6b":"code","2e1d9c32":"code","409ba240":"code","1937b8a9":"code","495f16fe":"code","29d98dfc":"code","19a93391":"code","f8fb0881":"code","c81ba944":"code","1ab8032b":"markdown","58deabde":"markdown","32af98da":"markdown","6d6f579f":"markdown"},"source":{"b0b41385":"import numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\n","643e5fd4":"train = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/sample_submission.csv\")","32e0ae6b":"train.head()","2e1d9c32":"train.set_index('id',drop=True, inplace=True)\ntest.set_index('id',drop=True, inplace=True)\ntrain.head()","409ba240":"y = train.target\ntrain.drop(['target'], axis = 1, inplace = True)\n","1937b8a9":"#from sklearn.preprocessing import OrdinalEncoder\n#cat_cols = [col for col in train.columns if 'cat' in col]\n\n#X = train.copy()\n#X_test = test.copy()\n#enc = OrdinalEncoder()\n#X[cat_cols] = enc.fit_transform(train[cat_cols])\n#X_test[cat_cols] = enc.transform(test[cat_cols])\n#X.head()","495f16fe":"X = train.copy()\nX_test = test.copy()\n\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Apply one-hot encoder to each column with categorical data\nobject_cols = [col for col in train.columns if 'cat' in col]\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_X = pd.DataFrame(OH_encoder.fit_transform(X[object_cols]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(X_test[object_cols]))\n\n# One-hot encoding removed index; put it back\nOH_cols_X.index = X.index\nOH_cols_test.index = X_test.index\n\n# Remove categorical columns (will replace with one-hot encoding)\nnum_X = X.drop(object_cols, axis=1)\nnum_X_test = X_test.drop(object_cols, axis=1)\n\n# Add one-hot encoded columns to numerical features\nOH_X = pd.concat([num_X, OH_cols_X], axis=1)\nOH_X_test = pd.concat([num_X_test, OH_cols_test], axis=1)\n\nOH_X.head()","29d98dfc":"X_train, X_valid, y_train, y_valid = train_test_split(OH_X, y, test_size = 0.2)","19a93391":"from sklearn.metrics import mean_squared_error\nmodel = XGBRegressor()\nmodel.fit(X_train, y_train)\npreds = model.predict(X_valid)\nprint(\"RMAE: \", np.sqrt(mean_squared_error(y_valid, preds)))","f8fb0881":"model.fit(OH_X, y)\npreds = model.predict(OH_X_test)","c81ba944":"# Save test predictions to file\noutput = pd.DataFrame({'id': X_test.index,\n                       'target': preds})\nprint(output)\noutput.to_csv('submission.csv', index=False)\n","1ab8032b":"# Modeling","58deabde":"# Encoding categorical data","32af98da":"In this notebook I'm only using a few things I learned on the lasts days of \"30 Days of ML\" so I'm keeping things as simple as I can.\n# Load and visualize dataset","6d6f579f":"# Split Dataset"}}