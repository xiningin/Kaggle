{"cell_type":{"39a77240":"code","cb4f8732":"code","e29257d0":"code","750394ca":"code","0081b7a0":"code","37837492":"code","09e42b81":"code","e36d37b7":"code","aeade663":"code","80f55fff":"code","7e4cc009":"markdown","b188479d":"markdown","e0261874":"markdown","45a86496":"markdown","270309e2":"markdown"},"source":{"39a77240":"import sys\nimport numpy as np\nimport matplotlib","cb4f8732":"print(\"Python:\", sys.version)\nprint(\"Numpy:\", np.__version__)\nprint(\"Matplotlib: \", matplotlib.__version__)","e29257d0":"inputs = [1.2, 5.1, 2.1]\nweights = [3.1, 2.1, 8.7]\nbias = 3\n\n#inputs*weights + bias\n\noutput = inputs[0]*weights[0] + inputs[1]*weights[1] + inputs[2]*weights[2] + bias\n\nprint(output)","750394ca":"inputs = [1, 2, 3, 2.5]\n\nweights1 = [0.2, 0.8,-0.5, 1.0]\nweights2 = [0.5, -0.91,0.26, -0.5]\nweights3 = [-0.26, -0.27,0.17, 0.87]\n\nbias1 = 2\nbias2 = 3\nbias3 = 0.5\n\noutput = [inputs[0]*weights1[0] + inputs[1]*weights1[1] + inputs[2]*weights1[2] + inputs[3]*weights1[3]+ bias1,\n         inputs[0]*weights2[0] + inputs[1]*weights2[1] + inputs[2]*weights2[2] + inputs[3]*weights2[3]+ bias2,\n         inputs[0]*weights3[0] + inputs[1]*weights3[1] + inputs[2]*weights3[2] + inputs[3]*weights3[3]+ bias3]\n\nprint(output)","0081b7a0":"inputs = [1, 2, 3, 2.5]\n\nweights1 = [0.2, 0.8,-0.5, 1.0]\nweights2 = [0.5, -0.91,0.26, -0.5]\nweights3 = [-0.26, -0.27,0.17, 0.87]\n\nweights = [[0.2, 0.8,-0.5, 1.0], [0.5, -0.91,0.26, -0.5], [-0.26, -0.27,0.17, 0.87]]\n\nbiases = [2, 3, 0.5]\n\nlayer_outputs = []#output of the current layer\nfor neuron_weights, neuron_bias in zip(weights, biases):\n    neuron_output = 0 #output of the given neuron\n    for n_input, weight in zip(inputs, neuron_weights):\n        neuron_output += n_input*weight\n    neuron_output += neuron_bias\n    layer_outputs.append(neuron_output)\n\nprint(layer_outputs)","37837492":"some_value = -0.5\nweight = -0.7\nbias = 0.7\n","09e42b81":"print(some_value*weight)\nprint(some_value + bias)","e36d37b7":"# single layer\nimport numpy as np\n\ninputs = [1, 2, 3, 2.5]\nweights = [0.2, 0.8,-0.5, 1.0]\nbias = 2\n\noutput = np.dot(weights, inputs) + bias\nprint(output)","aeade663":"#multi-layer\ninputs = [1, 2, 3, 2.5]\nweights = [[0.2, 0.8, -0.5, 1.0], [0.5, -0.91, 0.26, -0.5], [-0.26, -0.27, 0.17, 0.87]]\nbiases = [2, 3, 0.5]\n\noutput = np.dot(weights, inputs) + biases\nprint(output)","80f55fff":"#multi-input, multi-layer\n","7e4cc009":"# Understanding shape\nList in pythton- 1D array in numpy - Vector in math\nList of list in python-2D array in numpy- Matrix in math\nList of list of list in python-3D array in numpy- Tensor in math\n\nTensor - 3D array","b188479d":"# batches\nBigger the batch, more parallel operation we run\nHelps with generalization\n","e0261874":"We will get to activation function! ","45a86496":"Ref: https:\/\/www.youtube.com\/watch?v=lGLto9Xd7bU&list=PLQVvvaa0QuDcjD5BAw2DxE6OF2tius3V3&index=2","270309e2":"# Introducing Dot product\nmultiply the vectors element wise"}}