{"cell_type":{"223d533d":"code","ebfb4337":"code","61400c95":"code","21d1a164":"code","66ab0921":"code","fc61e8e7":"code","19cb4e87":"code","40bc6998":"code","c177cede":"code","18604f12":"code","a4a245c3":"code","3d77e11e":"code","6bcc6ece":"code","0be483a4":"code","07bccfc6":"code","d26d8f98":"code","1a646027":"code","6dc41a0d":"code","b6eb7337":"code","cd73c66c":"code","1cfd39ed":"code","42b99118":"code","b4bbc6d7":"code","29182f01":"code","94283903":"code","ed34839a":"code","8e5e2565":"code","8fdf5488":"code","a7e88eb1":"code","9483d7e7":"code","e5e2bc7d":"code","597ce3c7":"code","4f590bd1":"code","1a4e44cc":"code","18707147":"code","1ce07cdf":"code","7276858e":"code","330f9121":"code","ae4da188":"code","e544e262":"code","91b5eb6d":"code","2d6dee49":"code","349d0192":"code","0feefc68":"code","9b948751":"markdown"},"source":{"223d533d":"#import neccessary Libraries and modules\nimport pandas as pd\nimport numpy as np\nimport os\nfrom glob import glob\nimport random\nimport matplotlib.pylab as plt\n\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nimport keras\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom tensorflow.keras.optimizers import SGD, RMSprop, Adam, Adagrad, Adadelta\nfrom keras.layers import Dense, Dropout, Activation, Flatten, BatchNormalization, Conv2D, MaxPool2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","ebfb4337":"imagePatches = glob('..\/input\/breast-histopathology-images\/IDC_regular_ps50_idx5\/**\/*.png', recursive=True)\nfor filename in imagePatches[0:10]:\n    print(filename)","61400c95":"# Two arrays holding images by class type\n\nclass0 = [] # 0 = no cancer\nclass1 = [] # 1 = cancer\n\nfor filename in imagePatches:\n    if filename.endswith(\"class0.png\"):\n         class0.append(filename)\n    else:\n        class1.append(filename)","21d1a164":"len(class0)","66ab0921":"len(class1)","fc61e8e7":"sampled_class0 = random.sample(class0, 78786)\nsampled_class1 = random.sample(class1, 78786)\n#len(sampled_class0)","19cb4e87":"from matplotlib.image import imread\nimport cv2\n\ndef get_image_arrays(data, label):\n    img_arrays = []\n    for i in data:\n        if i.endswith('.png'):\n            img = cv2.imread(i ,cv2.IMREAD_COLOR)\n            img_sized = cv2.resize(img, (50, 50), interpolation=cv2.INTER_LINEAR)\n            img_arrays.append([img_sized, label])\n    return img_arrays\n","40bc6998":"class0_array = get_image_arrays(sampled_class0, 0)\nclass1_array = get_image_arrays(sampled_class1, 1)","c177cede":"class0_array[1]","18604f12":"test = cv2.imread('..\/input\/breast-histopathology-images\/IDC_regular_ps50_idx5\/13689\/1\/13689_idx5_x801_y1501_class1.png' ,cv2.IMREAD_COLOR)\ntest.shape","a4a245c3":"from keras.preprocessing.image import load_img, img_to_array","3d77e11e":"def show_img(files):\n    plt.figure(figsize= (10,10))\n    ind = np.random.randint(0, len(files), 25)\n    i=0\n    for loc in ind:\n        plt.subplot(5,5,i+1)\n        sample = load_img(files[loc], target_size=(150,150))\n        sample = img_to_array(sample)\n        plt.axis(\"off\")\n        plt.imshow(sample.astype(\"uint8\"))\n        i+=1","6bcc6ece":"show_img(imagePatches)","0be483a4":"combined_data = np.concatenate((class0_array, class1_array))\nrandom.seed(42)\nrandom.shuffle(combined_data)","07bccfc6":"X = []\ny = []\n\nfor features,label in combined_data:\n    X.append(features)\n    y.append(label)","d26d8f98":"X = np.array(X).reshape(-1, 50, 50, 3)","1a646027":"X.shape","6dc41a0d":"\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","b6eb7337":"model=Sequential()\nmodel.add(Conv2D(filters=32,kernel_size=(4,4),input_shape=(50,50,3),activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=32,kernel_size=(4,4),activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(2,activation='sigmoid'))\n\nmodel.compile(loss = 'binary_crossentropy', optimizer ='adam', metrics= ['accuracy'])\n\n\nmodel.summary()","cd73c66c":"epochs = 50  \nbatch_size = 250","1cfd39ed":"history = model.fit(\n    X_train, y_train,\n    validation_data=(X_test, y_test),\n    epochs= epochs,\n    verbose = 2,\n    batch_size=batch_size\n    )","42b99118":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","b4bbc6d7":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","29182f01":"loss,accuracy=model.evaluate(X_test,y_test)","94283903":"\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\nY_pred = model.predict(X_test)\nY_pred_classes = np.argmax(Y_pred,axis = 1) \nY_true = np.argmax(y_test,axis = 1) \n\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","ed34839a":"from sklearn.metrics import classification_report\n\nprint(classification_report(Y_true, Y_pred_classes))","8e5e2565":"def img_plot(arr,index=0):\n    plt.title('Test Image')\n    plt.imshow(arr[index])","8fdf5488":"index1 = 2\nimg_plot(X_test, index1)","a7e88eb1":"input1 = X_test[index1:index1+1]\nprint('Input Index =',index1)","9483d7e7":"cnn_pred1 = model.predict(input1)[0].argmax()\nlabel1 = y_test[index1].argmax()","e5e2bc7d":"print('Predicted Value using  cnn model',cnn_pred1)\nprint(\"\\nTrue Value\",label1)","597ce3c7":"num_classes=2\ninput_shape = (50,50, 3)","4f590bd1":"model_nn=Sequential()\nmodel_nn.add(Flatten(input_shape=input_shape))\n\nmodel_nn.add(Dense(64, activation=\"relu\",input_shape=input_shape))\nmodel_nn.add(Dense(128, activation=\"relu\"))\nmodel_nn.add(Dense(64, activation=\"relu\"))\nmodel_nn.add(Dense(32, activation=\"relu\"))\nmodel_nn.add(Dense(16, activation=\"relu\"))\n\nmodel_nn.add(Dense(2, activation=\"sigmoid\"))\n\n\nmodel_nn.compile(loss = 'binary_crossentropy', optimizer ='adam', metrics= ['accuracy'])\nmodel_nn.summary()","1a4e44cc":"history_2 = model_nn.fit(\n    X_train, y_train,\n    validation_data=(X_test, y_test),\n    epochs= epochs,\n    verbose = 2,\n    batch_size=batch_size)","18707147":"\nplt.plot(history_2.history['accuracy'])\nplt.plot(history_2.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","1ce07cdf":"#plotting the loss of test and training sets\nplt.plot(history_2.history['loss'])\nplt.plot(history_2.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","7276858e":"loss,accuracy=model_nn.evaluate(X_test,y_test)","330f9121":"\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\nY_pred = model.predict(X_test)\nY_pred_classes = np.argmax(Y_pred,axis = 1) \nY_true = np.argmax(y_test,axis = 1) \n\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","ae4da188":"from sklearn.metrics import classification_report\n\nprint(classification_report(Y_true, Y_pred_classes))","e544e262":"def img_plot(arr,index=0):\n    plt.title('Test Image')\n    plt.imshow(arr[index])","91b5eb6d":"index1 = 72\nimg_plot(X_test, index1)","2d6dee49":"input1 = X_test[index1:index1+1]\nprint('Input Index =',index1)","349d0192":"ann_pred1 = model_nn.predict(input1)[0].argmax()\nlabel1 = y_test[index1].argmax()","0feefc68":"print('Predicted Value using  cnn model',cnn_pred1)\nprint(\"True Value\",label1)","9b948751":"# ANN MODEL"}}