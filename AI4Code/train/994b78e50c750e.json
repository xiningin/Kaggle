{"cell_type":{"047be405":"code","42592e62":"code","251db7d4":"code","c1e23ba2":"code","79d56810":"code","b4133d06":"code","a1ea0b8c":"code","df202a59":"code","9843d3fb":"code","e43244e3":"code","6296414e":"code","4a6dda05":"code","c4cf96d3":"code","991e6994":"code","441559cd":"code","641fd40c":"code","82b63871":"code","3a169645":"code","ab7616b1":"code","0017da9f":"code","bd136ca7":"code","076dfe71":"code","b4dac981":"code","1f1f47ff":"code","9566b0d1":"code","1219a93c":"code","1ee78af3":"code","ad92866f":"code","dcd194ad":"markdown","df9fa9a8":"markdown","9010a3c5":"markdown","751ef416":"markdown","764f2172":"markdown","85ab098e":"markdown","85eadb65":"markdown","c99ec196":"markdown","f8aa90c3":"markdown","887e6b72":"markdown","b3d12103":"markdown","32bf541b":"markdown","55a31c52":"markdown"},"source":{"047be405":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42592e62":"df=pd.read_csv(\"\/kaggle\/input\/bot-detection\/ibm_data.csv\")\ndf.head()","251db7d4":"print(\"The Total num of rows and columns in data is  \",df.shape)","c1e23ba2":"df.info()","79d56810":"print(\"There are some null values in data\",df[\"sec_lvl_domn\"].isnull().sum())","b4133d06":"df['page_vw_ts'] = pd.to_datetime(df['page_vw_ts'])","a1ea0b8c":"df['page_vw_ts'].dt.year.head() ","df202a59":" df['crm_dt'] = df['page_vw_ts'].dt.date","9843d3fb":"df.head()","e43244e3":"df = df.drop('page_vw_ts', 1)","6296414e":"df.head(3)","4a6dda05":"df.dropna(subset=['city','st','operating_sys'], inplace=True)\ndf.device_type.fillna(value='unkown_device', inplace=True)\ndf.sec_lvl_domn.fillna(value='unkown_domain', inplace=True)\ndf.dropna(inplace=True)\ndf.drop(labels=['wk', 'mth', 'yr', 'crm_dt'], axis=1, inplace=True)","c4cf96d3":"\ndf[\"bounce_rate_%\"] = ((df.VISIT - df.ENGD_VISIT)\/df.VISIT)*100","991e6994":"df.head(3)","441559cd":"print(\"Total of No. Of unique IP's is =\",df.ip_addr.nunique())","641fd40c":"# IP Addres's that has total views greater than 24 in a day\nip_views = pd.DataFrame(df.groupby('ip_addr').VIEWS.sum().sort_values())\nunique_ip_address = list(ip_views[ip_views.VIEWS > 24].index)\n\n# Limiting the Dataset to those rows that contain one of the ip's present in unique_ip_address \nnew_data = df[df.ip_addr.isin(unique_ip_address)]\n\n# Taking intersection of ip's\n#unique_ip_address = list(new_data_details.ip_addr.unique())\n\n# These are the filterd IP's on which we have to find Infomation.\nprint(\"No. Of unique ip's {}\".format(len(unique_ip_address)))\n\n# Examples of unique ip address\nunique_ip_address[:10]","82b63871":"df.head(3)","3a169645":"new_data.head()","ab7616b1":"def shortenos(x):\n    #print(x)\n    if \"microsoft\" in x.lower().split(\"_\")[0]:\n        x=\"MICROSOFT PC\"\n        return x\n    elif \"windowsphone\" in x.lower().split(\"_\")[0]:\n        x=\"WINDOWS MOBILE\"\n        return x\n    elif \"windowsmobile\" in x.lower().split(\"_\")[0]:\n        x=\"WINDOWS MOBILE\"\n        return x\n    elif \"macintosh\" in x.lower().split(\"_\")[0]:\n        x=\"MACOS PC\"\n        return x\n    elif \"ios\" in x.lower().split(\"_\")[0]:\n        x=\"IOS PHONE\"\n        return x\n    elif \"android\" in x.lower().split(\"_\")[0]:\n        x=\"ANDROID\"\n        return x\n    elif \"linux\" in x.lower().split(\"_\")[0]:\n        x=\"LINUX\"\n        return x\n    elif x.lower()==\"notgiven\":\n        x=\"NotGiven\"\n        return x\n    else:\n        x=\"OTHER\"\n        return x","0017da9f":"df[\"os\"]=df.operating_sys.apply(shortenos)\nos_df=df.groupby([\"os\"]).sum().reset_index()\nos_df","bd136ca7":"import altair as alt\n\nalt.data_transformers.disable_max_rows()\nbase=alt.Chart(os_df).mark_bar().encode(\nx=\"os\",\ny=\"VISIT\",\ntooltip=[\"VISIT\"]\n)\n\nbase2=alt.Chart(os_df).mark_bar().encode(\nx=\"os\",\ny=\"VIEWS\",tooltip=[\"VIEWS\"]\n)\nalt.hconcat(base,base2)","076dfe71":"df.user_agent.dropna(inplace=True)","b4dac981":"!pip install device_detector","1f1f47ff":"from device_detector import SoftwareDetector\ndef parse_family(x):\n    \n    return SoftwareDetector(x).parse().client_name()\ndef parse_os(x):\n  \n    return SoftwareDetector(x).parse().os_name()","9566b0d1":"sample_df=df[:400000]\nsample_df.user_agent.dropna(inplace=True)","1219a93c":"x=sample_df[\"user_agent\"].apply(parse_family)","1ee78af3":"sample_df[\"user_browser\"]=x\nsample_df.user_agent.dropna(inplace=True)\nsample_df[\"user_os\"]=sample_df.user_agent.apply(parse_os)","ad92866f":"sample_df","dcd194ad":"I create a function that will classify all different variants of each os as the same os for example MICROSOFT_WINDOWS8.1 MICROSOFT_WINXP are to be renamed to MICROSOFT PC\nI do the same for the other types of os including mobile phones, I classify the ones not falling into these main types as others","df9fa9a8":"# Installing device_detector","9010a3c5":"## 1 DATA Preprocessing on ip_info Dataset","751ef416":"#### Filtering and storing the date in data set","764f2172":"# Wellcome To My Kernel","85ab098e":"## Show in Plot","85eadb65":"#### 1.Delete the page_vw_ts column","c99ec196":"### Here as I stated ill be taking the 400000 as my sample dataset","f8aa90c3":"# Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.\n\n*  I have processed some columns to get better meaning of them including the user_agent strings and I have created new csv file containing the parsed UA as it took time in parsing so I did not want others to waste their time on parsing it.\n* This project will make you understand lot of stuff & try to understand the problem statement by doing research,understanding each & every feature to play with it.\n\nProblem Statement : Build A Model that can detect the Non Human Traffic present in a website!","887e6b72":"# **At end please feadback my kernel.**","b3d12103":"We can't work on all the ip's that visit our website in a day because many of them just visit only a single time So we try to filter those ip's that has high no. of views or visit too mant times, In rules Of detecting bot it is mentioned that bots show a similar pattern in visiting any website...","32bf541b":"### Lets groupby the new os column we created and sum the values for VIEWS and VISIT\n### This will help us in analysing which of these users are belonging to which OS","55a31c52":"### Adding a Bounce_rate Column "}}