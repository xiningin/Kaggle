{"cell_type":{"8969b89b":"code","41090288":"code","4e5f1ef1":"code","05469c0e":"code","80a1cb7f":"code","db32254e":"code","88dc9d8b":"code","dde3467f":"code","3e398096":"code","b69bad74":"markdown","e487ecc3":"markdown","d2ba8bf8":"markdown","d048fde7":"markdown","06c5d863":"markdown","1ef4690b":"markdown","3c8f218c":"markdown","a200c030":"markdown","0f7f1ae7":"markdown"},"source":{"8969b89b":"import networkx as nx\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt","41090288":"# Taille de la population\nN = 500\nk = 20\n# erdos renyi network\nG1 = nx.erdos_renyi_graph(N, k\/N)\n# barabasi network\nG2 = nx.barabasi_albert_graph(N, k)\nG3 = nx.gaussian_random_partition_graph(N,20,20,k\/N,k\/N)\n\npos1 = nx.spring_layout(G1)\nnx.draw_networkx_nodes(G1, pos1, alpha = 0.6, node_size=[2*i for i in list(dict(G1.degree).values())])\nnx.draw_networkx_edges(G1, pos1, alpha=0.5)\nplt.title(\"Erdos-Renyi\")\nplt.show()\n\npos2 = nx.spring_layout(G2)\nnx.draw_networkx_nodes(G2, pos2, alpha = 0.6, node_size=[2*i for i in list(dict(G2.degree).values())])\nnx.draw_networkx_edges(G2, pos2, alpha=0.5)\nplt.title(\"Barabasi Albert\")\nplt.show()\n\npos3 = nx.spring_layout(G3)\nnx.draw_networkx_nodes(G3, pos3, alpha = 0.6, node_size=[2*i for i in list(dict(G3.degree).values())])\nnx.draw_networkx_edges(G3, pos3, alpha=0.5)\nplt.title(\"Gaussian random partition\")\nplt.show()","4e5f1ef1":"def SI(G,Nb_inf_init,HM, N, T):\n    \"\"\" function that runs a simulation of an SI model on a network.\n    INPUT:\n        G(networkx) : Graph\n        Nb_inf_init : Initial number of infected people (nodes)\n        HM(float) : Infection probability\n        N(int): number of nodes (or people)\n        T(int): number of time steps simulated\n    \"\"\"\n    pos = nx.spring_layout(G)\n    A = nx.to_numpy_array(G)\n    # setting initial conditions\n    sup = np.zeros(T)\n    inf = np.zeros(T)\n    nb_inf_t = np.zeros(T)\n    inf[0] = Nb_inf_init\n    sup[0] = N - Nb_inf_init\n    nb_inf_t[0] = inf[0]\n\n    for u in G.nodes():\n        G.nodes[u][\"state\"] = 0\n        G.nodes[u][\"noeux_associes\"] = [n for n in G.neighbors(u)]\n    init = random.sample(G.nodes(), Nb_inf_init)\n    for u in init:\n        G.nodes[u][\"state\"] = 1\n\n    for t in range(1,T):\n        sup[t] = sup[t-1]\n        inf[t] = inf[t-1]\n        for u in G.nodes:\n            # si infect\u00e9\n            if G.nodes[u][\"state\"] == 0:\n                nb_friend_infected = [G.nodes[n][\"state\"] == 1 for n in G.nodes[u][\"noeux_associes\"]].count(True)\n                for n in G.nodes[u][\"noeux_associes\"]:\n                    if G.nodes[n][\"state\"] == 1: # si voisin infect\u00e9\n                        # with HM infect\n                        if np.random.rand() < HM:\n                            G.nodes[u][\"state\"] = 1\n                            inf[t] += 1\n                            sup[t] += -1\n                            break\n        nb_inf_t[t] = inf[t]-inf[t-1]\n    return sup, inf, nb_inf_t","05469c0e":"T = 100\nN = 500 # size of population\nHM = 0.03\nNb_inf_init = 2 #  Initial numbre of infected person","80a1cb7f":"# mean degree of the networks\nk = 20\n# defining an erdos renyi network\nG = nx.erdos_renyi_graph(N,k\/N)\n\ns_erdos, inf_erdos,nb_inf_t = SI(G,Nb_inf_init,HM, N, T)\nplt.plot((100\/N)*s_erdos, color='b',marker='+', label=\"Susceptible p=0.04\")\nplt.plot((100\/N)*inf_erdos, color='r',marker='o', label=\"Infected  p=0.04\")\nplt.xlabel(\"time\")\nplt.ylabel(\"Percentage of population infected\")\nplt.legend()\nplt.show()\n# mean degree of the networks\nk = 5\n# defining an erdos renyi network\nG = nx.erdos_renyi_graph(N,k\/N)\n\ns_erdos, inf_erdos,nb_inf_t = SI(G,Nb_inf_init,HM, N, T)\nplt.plot((100\/N)*s_erdos,\"b\",marker='+', label=\"Susceptible p=0.01\")\nplt.plot((100\/N)*inf_erdos,\"r\",marker='o', label=\"Infected  p=0.01\")\n\nplt.xlabel(\"time\")\nplt.ylabel(\"Percentage of population infected\")\nplt.legend()\nplt.show()","db32254e":"# mean degree of the networks\nk = 5\n# defining an erdos renyi network\nG = nx.erdos_renyi_graph(N,k\/N)\ns_erdos, inf_erdos,nb_inf_t = SI(G,Nb_inf_init,HM, N, T)\nplt.plot(nb_inf_t,\"r\",marker='o', label=\"Infected  p=0.01\")\nplt.xlabel(\"time\")\nplt.ylabel(\"Number of new cases\")\n\nk = 20\n# defining an erdos renyi network\nG = nx.erdos_renyi_graph(N,k\/N)\ns_erdos, inf_erdos,nb_inf_t = SI(G,Nb_inf_init,HM, N, T)\nplt.plot(nb_inf_t,\"r\",marker='+', label=\"Infected  p=0.04\")\nplt.xlabel(\"time\")\nplt.ylabel(\"Number of new cases\")\n\nplt.legend()\nplt.show()\n##","88dc9d8b":"# mean degree of the networks\nk = 20\nN = 500\nNb_inf_init = 2\n# defining an erdos renyi network\nG1 = nx.erdos_renyi_graph(N,k\/N)\nG1_demi = nx.erdos_renyi_graph(N,k\/N *0.5)\nG2 = nx.barabasi_albert_graph(N, k)\nG2_demi = nx.barabasi_albert_graph(N, int(k*0.5))\n\ns_ER, inf_ER,nb_inf_t_ER = SI(G1,Nb_inf_init,HM, N, T)\ns_ER_demi, inf_ER_demi,nb_inf_t_ER_demi = SI(G1_demi,Nb_inf_init,HM, N, T)\n\ns_BA, inf_BA,nb_inf_t_BA = SI(G2,Nb_inf_init,HM, N, T)\ns_BA_demi, inf_BA_demi,nb_inf_t_BA_demi = SI(G2_demi,Nb_inf_init,HM, N, T)\nplt.figure(figsize=(15,10))\nplt.plot(nb_inf_t_ER,\"r\", linewidth=2, label=\"Network:EA Infected  p=0.04\")\nplt.plot(nb_inf_t_ER_demi,\"r--\", linewidth=2, label=\"Network:EA Infected  p=0.02\")\n\n\nplt.plot(nb_inf_t_BA,\"b\", linewidth=2, label=\"Network:BA Infected  p=0.04\")\nplt.plot(nb_inf_t_BA_demi,\"b--\", linewidth=2, label=\"Network:BA Infected  p=0.02\")\nplt.xlabel(\"time\")\nplt.ylabel(\"Number of new cases\")\nplt.xlim(0,60)\n\nplt.legend()\nplt.show()","dde3467f":"def SIR(G,Nb_inf_init,Gamma,HM, N, T):\n    \"\"\" function that runs a simulation of an SIR model on a network.\n    Args:\n        Gamma(float): recovery rate\n        Beta(float): infection probability\n        Rho(float): initial fraction of infected individuals\n        N(int): number of agents (nodes)\n        T(int): number of time steps simulated\n    \"\"\"\n    A = nx.to_numpy_array(G)\n    # setting initial conditions\n    s = np.zeros(T)\n    inf = np.zeros(T)\n    r = np.zeros(T)\n    inf[0] = Nb_inf_init\n    s[0] = N - Nb_inf_init\n    \"\"\"Make a graph with some infected nodes.\"\"\"\n    for u in G.nodes():\n        G.nodes[u][\"state\"] = 0\n        G.nodes[u][\"TimeInfected\"] = 0\n        G.nodes[u][\"noeux_associes\"] = [n for n in G.neighbors(u)]\n\n    init = random.sample(G.nodes(), Nb_inf_init)\n    for u in init:\n        G.nodes[u][\"state\"] = 1\n        G.nodes[u][\"TimeInfected\"] = 1\n    # running simulation\n    for t in range(1,T):\n        s[t] = s[t-1]\n        inf[t] = inf[t-1]\n        r[t] = r[t-1]\n        # Check which persons have recovered\n        for u in G.nodes:\n            # if infected\n            if G.nodes[u][\"state\"] == 1:\n                if G.nodes[u][\"TimeInfected\"] < Gamma:\n                    G.nodes[u][\"TimeInfected\"] += 1\n                else:\n                    G.nodes[u][\"state\"] = 2 #\"recovered\"\n                    r[t] += 1\n                    inf[t] += -1\n        # check contagion    \n        for u in G.nodes:\n            #if susceptible\n            if G.nodes[u][\"state\"] == 0:\n                nb_friend_infected = [G.nodes[n][\"state\"] == 1 for n in G.nodes[u][\"noeux_associes\"]].count(True)\n                #print(nb_friend_infected)\n                for n in G.nodes[u][\"noeux_associes\"]:\n                    if G.nodes[n][\"state\"] == 1: # if friend is infected\n                        # with HM infect\n                        if np.random.rand() < HM:\n                            G.nodes[u][\"state\"] = 1\n                            inf[t] += 1\n                            s[t] += -1\n                            break\n    \n    return s, inf,r","3e398096":"np.random.seed(0)\n# time of simulation\nT = 100\n# number of agents\nN = 500\nHM = 0.03\nGamma = 5\nNb_inf_init = 2\n# mean degree of the networks\nk = 20\n# defining an erdos renyi network\nG = nx.erdos_renyi_graph(N,k\/N)\n\ns_erdos, inf_erdos,r_erdos = SIR(G,Nb_inf_init,Gamma,HM, N, T)\n#plt.plot((100\/N)*s_erdos, color='b',marker='+', label=\"Susceptible k=20\")\nplt.plot((100\/N)*inf_erdos, color='r',marker='+', label=\"Infected p=0.04\")\nplt.plot((100\/N)*r_erdos, color='g',marker='+', label=\"Recovered p=0.04\")\n\n#\n# mean degree of the networks\nk = 10\n# defining an erdos renyi network\nG = nx.erdos_renyi_graph(N,k\/N)\n\ns_erdos, inf_erdos,r_erdos = SIR(G,Nb_inf_init,Gamma,HM, N, T)\n#plt.plot((100\/N)*s_erdos,color=\"b\",marker='o',label=\"Susceptible k=10\")\nplt.plot((100\/N)*inf_erdos,color=\"r\",marker='o',label=\"Infected p=0.02\")\nplt.plot((100\/N)*r_erdos,color='g',marker='o',label=\"Recovered p=0.02\")\n\nplt.xlabel(\"time\")\nplt.ylabel(\"Percentage of population infected\")\nplt.legend()\nplt.show()","b69bad74":"2. ## Graphe de Erdos Renyi - Barabasi-Albert","e487ecc3":"### Networkx","d2ba8bf8":"# 1. The SI model\nThe SI model contains only two classes of individuals: those who are not infected with the disease (note S as susceptible or healthy) and those who are infected with the disease (note I as infected). The SI model is the simplest form of all the contagious disease models. Individuals are born in simulation without immunity (sensitive). Once infected and without treatment, individuals remain infected and infectious throughout their lives and remain in contact with the susceptible population.[](http:\/\/)\n","d048fde7":"We consider two models for interaction networks. The Erdos-Renyi model which has a Poisson degree distribution and the Barabasi-Albert model.","06c5d863":"In this notebook, we propose to study the diffusion of the Coronavirus Covid-19. One way to represent getting sick would be to look at the number of acrs connecting one person to another sick person.\n\nThe classic epidemic models (as described in the SIR epidemic models module or the SI models) were constructed as sets of ordinary differential equations (EDO), which implies several simplifying hypotheses. Ordinary differential equations with a given set of initial conditions always lead to exactly the same result. These models always consider all individuals to be equal, which implies that two individuals can interact with the same probability. This is hardly ever true in real systems.\n\nNetworking and the epidemiology of directly transmitted infectious diseases are fundamentally linked. The foundations of epidemiology and of the first epidemiological models rested on a random mixture on the scale of the population, but in practice, each individual has a finite set of contacts to which he can transmit the infection: the set of all these contacts form a network. Knowledge of the structure of the network allows models to calculate epidemic dynamics at the population level from the behavior of infections.","1ef4690b":"1. ## With the graph of Erdos Renyi","3c8f218c":"<img src=\"https:\/\/file1.science-et-vie.com\/var\/scienceetvie\/storage\/images\/1\/1\/0\/110693\/dossier-coronavirus-suivez-les-recherches-sur-pandemie.jpg?alias=exact1024x768_l\" alt=\"Meatball Sub\" width=\"500\"\/>","a200c030":"# 2. The SIR model\n","0f7f1ae7":"# Diffusion of Coronavirus using networkx"}}