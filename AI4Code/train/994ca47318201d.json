{"cell_type":{"8536ced8":"code","32035907":"code","bb462d7b":"code","02b80bcd":"code","d8a8ab7e":"code","d469b7cc":"code","9608ade7":"code","f9b45a40":"code","e5f0996f":"code","8e3cc894":"code","b6756643":"markdown","1cc4a1b9":"markdown","60fd0417":"markdown","4a30ca70":"markdown","67e65fdb":"markdown","2f4663b6":"markdown","ea60b842":"markdown","3be559a3":"markdown","9dcdbcd1":"markdown","9a09fc01":"markdown"},"source":{"8536ced8":"# It seems that tensorflow_decision_forests was broken by the tensorflow 2.6 release. The TensorFlow team are working on releasing a new pip package that will work with tf 2.6, but in the meantime, it will work if you install tensorflow 2.5.1 explicitly, i.e. pip install tensorflow==2.5.1 rather than pip install tensorflow.\n\n!pip install tensorflow==2.5.1","32035907":"# Install TensorFlow Decision Forests\n!pip install tensorflow_decision_forests\n!pip install wurlitzer","bb462d7b":"# Load TensorFlow Decision Forests\nimport tensorflow_decision_forests as tfdf\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport math\n\ntry:\n  from wurlitzer import sys_pipes\nexcept:\n  from colabtools.googlelog import CaptureLog as sys_pipes\n\n# Load the training dataset using pandas\ndataset_df = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\", index_col=0)\nprint(dataset_df.head(3))","02b80bcd":"# Split the dataset into a training and a testing dataset.\n\ndef split_dataset(dataset, test_ratio=0.1):\n  \"\"\"Splits a panda dataframe in two.\"\"\"\n  test_indices = np.random.rand(len(dataset)) < test_ratio\n  return dataset[~test_indices], dataset[test_indices]","d8a8ab7e":"# Split the dataset into a training and testing dataset.\ntrain_ds_pd, test_ds_pd = split_dataset(dataset_df)\nprint(\"{} examples in training, {} examples for testing.\".format(\n    len(train_ds_pd), len(test_ds_pd)))\n\n# Name of the label column.\nlabel = \"target\"\n\n# Convert the pandas dataframe (pd.Dataframe) into tensorflow datasets (tf.data.Dataset).\ntrain_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_ds_pd, label=label, task=tfdf.keras.Task.REGRESSION)\ntest_ds = tfdf.keras.pd_dataframe_to_tf_dataset(test_ds_pd, label=label, task=tfdf.keras.Task.REGRESSION)","d469b7cc":"# Configure the model.\nmodel_7 = tfdf.keras.GradientBoostedTreesModel(task = tfdf.keras.Task.REGRESSION)\n\n# Optional.\nmodel_7.compile(metrics=[\"mse\"])\n\n# Train the model.\nwith sys_pipes():\n  model_7.fit(x=train_ds)","9608ade7":"# Evaluate the model on the test dataset.\nevaluation = model_7.evaluate(test_ds, return_dict=True)\n\nprint(evaluation)\nprint()\nprint(f\"MSE: {evaluation['mse']}\")\nprint(f\"RMSE: {math.sqrt(evaluation['mse'])}\")","f9b45a40":"# Load the test dataset using pandas\nX_test = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\", index_col=0)\nprint(X_test.head(3))\n\nX_test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(X_test)","e5f0996f":"# Use the model to generate predictions\npredictions = model_7.predict(X_test_ds)\n\n# Save the predictions to a CSV file\npreds = pd.DataFrame(predictions)\npreds.columns = ['target']\ninds = pd.DataFrame({'Id': X_test.index})\nresult = pd.concat([inds, preds], axis=1, join='inner')\nresult.to_csv('submission.csv', index=False)","8e3cc894":"result","b6756643":"Install TF-DF by running the following cell. Also install Wurlitzer to display the detailed training logs.","1cc4a1b9":"# Introduction\nTensorFlow Decision Forests (TF-DF) is a collection of state-of-the-art algorithms for the training, serving and interpretation of Decision Forest models. The library is a collection of Keras models and supports classification, regression and ranking. More details can be found here: https:\/\/blog.tensorflow.org\/2021\/05\/introducing-tensorflow-decision-forests.html","60fd0417":"# Requirements","4a30ca70":"That score seems good enough for a baseline. Let's go ahead with predictions on the test.csv file.","67e65fdb":"# Data Preprocessing\nThe dataset contains a mix of numerical (e.g. cont8), categorical (e.g. cat8) features. TF-DF supports all these feature types natively (differently than NN based models), therefore there is no need for preprocessing in the form of encoding, normalization or extra is_present feature. Let's split the dataset into training and testing.","2f4663b6":"# Evaluate Model","ea60b842":"This baseline probably won't directly land you at the top of the Public Leaderboard but will surely help you get familiar with TF-DF. Do let me know how did you feel. \u2764\ufe0f","3be559a3":"# Training Model","9dcdbcd1":"# Make Predictions","9a09fc01":"# Import Packages"}}