{"cell_type":{"37ed4f98":"code","25fa4d8f":"code","cd03d105":"code","c7d714a7":"code","6550f931":"code","a7be70e0":"code","fd86198b":"code","21c61937":"code","35309c76":"code","3ea23689":"code","8a8fac5a":"code","8b9f66d5":"code","d212462f":"code","32c93562":"code","3218a90f":"code","d4284e0f":"code","2053d48f":"code","cb2f9531":"code","c6b85bef":"code","7e116f9d":"code","f922bfb9":"code","b2077033":"code","90fe7d42":"code","fa47a7fd":"code","22d3ce29":"code","d2afcf3e":"code","db05fc01":"code","1ddd2a23":"code","20c9771d":"markdown","68cd11f6":"markdown","b49e11d4":"markdown","77890986":"markdown","70e89907":"markdown","757970ef":"markdown","a9fd5411":"markdown","86d42f5f":"markdown","7a269529":"markdown","7370a075":"markdown","b4815b98":"markdown","501aec86":"markdown","9c8f1c05":"markdown","d915c179":"markdown","fbd4e8de":"markdown","5cf9c48c":"markdown","ccdd72ab":"markdown","e48f7992":"markdown","79f2cd55":"markdown","37de75ed":"markdown","0e9c409b":"markdown","2e3a6520":"markdown","c2f12b3a":"markdown","d6db7f7f":"markdown","ef88b99b":"markdown","1c81203c":"markdown","76315fcf":"markdown","da47dd5a":"markdown","17e8207e":"markdown"},"source":{"37ed4f98":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","25fa4d8f":"df = pd.read_csv('..\/input\/train_LZdllcl.csv')\ndf.columns","cd03d105":"df['department'].value_counts()","c7d714a7":"plt.rcParams['figure.figsize'] = [10, 5]\nct = pd.crosstab(df.department,df.is_promoted,normalize='index')\nct.plot.bar(stacked=True)\nplt.legend(title='is_promoted',bbox_to_anchor=(1,0.5))","6550f931":"reg = pd.crosstab(df.region,df.is_promoted,normalize='index')\nreg.plot.bar(stacked=True)\nplt.legend(title='is_promoted',bbox_to_anchor=(1,0.5))","a7be70e0":"plt.rcParams['figure.figsize'] = [5, 5]\nedu = pd.crosstab(df.education,df.is_promoted,normalize='index')\nedu.plot.bar(stacked=True)\nplt.rcParams['figure.figsize'] = [5, 5]\nplt.legend(title='is_promoted',bbox_to_anchor=(1,0.5))","fd86198b":"pd.crosstab(df.gender,df.is_promoted,normalize='index')","21c61937":"pd.crosstab(df.recruitment_channel,df.is_promoted,normalize='index')","35309c76":"pd.crosstab(df['KPIs_met >80%'],df.is_promoted,normalize='index')","3ea23689":"sales = df[df['department']=='Sales & Marketing']\noperations = df[df['department']=='Operations']\ntechnology = df[df['department']=='Technology']\nhr = df[df['department']=='HR']\nfin = df[df['department']=='Finance']\nlegal = df[df['department']=='Legal']\nRnD = df[df['department']=='R&D']\npd.crosstab(sales.gender,sales.is_promoted,normalize='index')","8a8fac5a":"pd.crosstab(operations.gender,operations.is_promoted,normalize='index')","8b9f66d5":"pd.crosstab(technology.gender,technology.is_promoted,normalize='index')","d212462f":"plt.rcParams['figure.figsize'] = [3, 5]\ngender = pd.crosstab(RnD.gender,RnD.is_promoted,normalize='index')\ngender.plot.bar(stacked=True)\nplt.legend(title='is_promoted',loc='upper left',bbox_to_anchor=(1, 0.5))","32c93562":"rating = pd.crosstab(df.previous_year_rating,df.is_promoted,normalize='index')\nrating.plot.bar(stacked=True)\nplt.legend(title='is_promoted',loc='upper left',bbox_to_anchor=(1, 0.5))","3218a90f":"bins = [30,40,50,60,70,80,90,100]\nlabels = ['30-40','40-50','50-60','60-70','70-80','80-90','90-100']\ndf['score_binned'] = pd.cut(df['avg_training_score'], bins=bins, labels=labels)\ndf['score_binned'].value_counts()","d4284e0f":"plt.rcParams['figure.figsize'] = [10, 5]\nscore_bin = pd.crosstab(df.score_binned,df.is_promoted,normalize='index')\nscore_bin.plot.bar(stacked=True)\nplt.legend(title='is_promoted',loc='upper left',bbox_to_anchor=(1, 0.5))","2053d48f":"plt.rcParams['figure.figsize'] = [5, 5]\nage_bins = [20,30,40,50,60]\nage_labels = ['20-30','30-40','40-50','50-60']\ndf['age_binned'] = pd.cut(df['age'], bins=bins, labels=labels)\ndf['age_binned'].value_counts()\nage_bin = pd.crosstab(df.age_binned,df.is_promoted,normalize='index')\nage_bin.plot.bar(stacked=True)\nplt.rcParams['figure.figsize'] = [5, 5]\nplt.legend(title='is_promoted',loc='upper left',bbox_to_anchor=(1, 0.5))","cb2f9531":"plt.rcParams['figure.figsize'] = [14, 5]\nsns.scatterplot(x='age',y='avg_training_score',hue='is_promoted',data=df)","c6b85bef":"df.groupby([\"education\"])['avg_training_score'].mean()","7e116f9d":"df.isnull().any()","f922bfb9":"df['previous_year_rating'] = df.groupby([\"KPIs_met >80%\"])[\"previous_year_rating\"].apply(lambda x: x.fillna(x.mean()))\ndf[\"education\"] = df[\"education\"].astype('object')\ndf['education'] = df.groupby([\"department\"])[\"education\"].apply(lambda x: x.fillna(x.value_counts().index[0]))","b2077033":"scaled_features = df.copy()\ncol_names = ['no_of_trainings', 'age','previous_year_rating','length_of_service','awards_won?','avg_training_score']\nlabel_names = ['department','gender','recruitment_channel','region']\nfeatures = scaled_features[col_names]\nscaler = preprocessing.StandardScaler().fit(features.values)\nfeatures = scaler.transform(features.values)\nscaled_features = pd.get_dummies(scaled_features, columns=label_names, drop_first=True)\nscaled_features[col_names] = features\nscaled_features.drop(columns=['employee_id','age','education','score_binned','age_binned'],inplace=True)","90fe7d42":"X_train, X_test, y_train, y_test = train_test_split(\n    scaled_features.loc[:, scaled_features.columns != 'is_promoted'], scaled_features['is_promoted'], test_size=0.33, random_state=42)\n#forest = RandomForestClassifier(n_jobs=-1, random_state=0,class_weight='balanced',n_estimators=100,bootstrap=True, max_depth=80)\nforest = GradientBoostingClassifier(loss='exponential',max_features='auto')\nparam_grid = {\n    'n_estimators': [200,500,800]\n}\ngrid_search = GridSearchCV(estimator = forest, param_grid = param_grid,cv = 3, n_jobs = -1, verbose = 2)\n# Fit the grid search to the data\ngrid_search.fit(X_train, y_train)\ngrid_search.best_params_","fa47a7fd":"feature_importances = grid_search.best_estimator_.feature_importances_\nfeature_importance = {}\nfor i in range(len(X_train.columns)):\n    feature_importance[X_train.columns[i]] = feature_importances[i]\nimportance_df = pd.DataFrame(list(feature_importance.items()),columns=['feature','importance'])\nimportance_df = importance_df.sort_values('importance',ascending=False)\nplt.xticks(rotation='vertical')\nplt.rcParams['figure.figsize'] = [18, 10]\nsns.barplot(x=\"feature\",y=\"importance\",data=importance_df)","22d3ce29":"pred = grid_search.predict(X_test)\naccuracy = metrics.accuracy_score(y_test, pred)\n'accuracy - '+str(accuracy)","d2afcf3e":"f1 = metrics.f1_score(y_test, pred)\n'f1 score - '+str(f1)","db05fc01":"recall = metrics.recall_score(y_test,pred)\n'recall - '+str(recall)","1ddd2a23":"precision = metrics.precision_score(y_test,pred)\n'precision - '+str(precision)","20c9771d":"Let us check if there is any ratio difference across gender within the departments. For this I chose the top 3 highly populated departments.","68cd11f6":"**Variation of promotion percentage with recruitment channel that they have come from**","b49e11d4":"As we can see the percentages are pretty much the same aross different educational backgrounds.","77890986":"This graph reinforces the fact the promotions are majorly dependent on the score and not on age.\n\n**Mean score of employees with different educational background**","70e89907":"While Technology department had highest percentage of employees getting promoted, Legal department has the least number. But we don't see major differences in terms of percentages.","757970ef":"The ratio of promoted employees increases with previous year rating which is quite obvious.\n\n**Distribution of average training score**","a9fd5411":"Slight difference in the ratios can be seen within the departments unlike the ratios calculated without any department barriers.","86d42f5f":"There is major differnce in percentages across genders too. \nLet us check if differnce arises within the departments","7a269529":"While most of the employees have score in the range of 50-60, the least score bin has very faint number,\n\n**Distribution of promoted employees ratio across different score ranges**","7370a075":"Higher percentage of employees got promoted in the group of people whose KPIs_met is greater than 80%.","b4815b98":"Promotions ratio increases with the score and the ratio is very high in 90-100 range which means getting promoted is highly dependent on the average score.\n\n**Distribution of promotion ratios with respect to age**","501aec86":"**Prediction of employee promotion potential**","9c8f1c05":"**Percentage of people who got promoted from each department**","d915c179":"**Difference in the percentage of promoted employees with respect to previous year ratings**","fbd4e8de":"Mean training score doesn't vary with education","5cf9c48c":"**Distribution of promotions among people with different Educational backgrounds**","ccdd72ab":"Fill missing values of  'previous_year_rating' with mean based on 'KPIs_met >80%' and 'education'  with median based on 'department'","e48f7992":"**Variation of promotion percentage with respect to KPIs met or not**","79f2cd55":"The transformed features are fit to a Gradient Boosting Algorithm.\nGrid Search cross validation is used to find the best hyperparameter('n_estimators')","37de75ed":"The model has a high accuracy but F1 score is less because of lesser Recall value. This means that number of False Negatives are higher which might have arised due to unbalanced classes. Oversampling or undersampling might increase F1 score.","0e9c409b":"**Distribution of employees across various departments**","2e3a6520":"According to the results of grid search, 500 is the optimal number of estimators.\n\n**Finding feature importances**","c2f12b3a":"Ratio doesn't vary much with age.","d6db7f7f":"**Filling the missing values**","ef88b99b":"According to the data, percentage of promotions is higher among the employees who got recruited through referrals.","1c81203c":"**Percentage of promotions across all the regions**","76315fcf":"**Feature engineering**\nNormalize all the numerical features and encode all the categorical features.","da47dd5a":"**Variation of promotion percentage with respect to gender**","17e8207e":"The above graph shows the importance of each feature in building the model. Here also average training score takes first place."}}