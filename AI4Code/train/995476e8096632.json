{"cell_type":{"28c462ce":"code","12454e0f":"code","4063761c":"code","dba85ba2":"code","e8539102":"code","2353219a":"code","da4387f1":"code","3614193f":"code","2811a244":"code","32159cda":"code","f9fb2fbe":"code","7a95fa06":"code","59f69b02":"code","f89a5875":"code","a067df6a":"code","869b6813":"code","b775adb7":"code","eb7a45ad":"code","b3488973":"code","d8e5559c":"code","0a05dd55":"code","9c2144ca":"code","34ad7bae":"code","1c4bbd78":"code","cc1c19cc":"code","a56a2e3b":"code","ea7e6141":"code","7467d894":"code","517d3dac":"code","20edc9fb":"code","6c0c86d8":"code","6e28100d":"code","b1dac1d7":"code","7d508997":"code","135857d2":"markdown","54c50210":"markdown","8a9a4543":"markdown","0ee42ca6":"markdown"},"source":{"28c462ce":"import pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","12454e0f":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","4063761c":"features_with_na=[features for features in train.columns if train[features].isnull().sum()>1]\n\nfor feature in features_with_na:\n    data = train.copy()\n    \n    # let's make a variable that indicates 1 if the observation was missing or zero otherwise\n    data[feature] = np.where(data[feature].isnull(), 1, 0)\n    \n    # let's calculate the mean SalePrice where the information is missing or present\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.title(feature)\n    plt.show()","dba85ba2":"train.head(5)\n","e8539102":"train.tail(5)","2353219a":"train.describe(include= 'all')","da4387f1":"train.info()","3614193f":"train.shape","2811a244":"train.columns","32159cda":"numeric_columns = train.select_dtypes(include='number')\nnumeric_columns.shape","f9fb2fbe":"numeric_columns.isnull().sum()","7a95fa06":"median1 = train['LotFrontage'].median()\nmedian2 = train['GarageYrBlt'].median()","59f69b02":"train['LotFrontage'].replace(np.nan, median1, inplace = True)\ntrain['GarageYrBlt'].replace(np.nan, median2, inplace = True)","f89a5875":"numeric_columns.isnull().sum()","a067df6a":"Category_columns = train.select_dtypes(include='object')\nCategory_columns.shape","869b6813":"Category_columns.isnull().sum()","b775adb7":"train['Alley'].fillna(train['Alley'].mode()[0], inplace=True)\ntrain['BsmtQual'].fillna(train['BsmtQual'].mode()[0], inplace=True)\ntrain['BsmtCond'].fillna(train['BsmtCond'].mode()[0], inplace=True)\ntrain['BsmtExposure'].fillna(train['BsmtExposure'].mode()[0], inplace=True)\ntrain['BsmtFinType1'].fillna(train['BsmtFinType1'].mode()[0], inplace=True)\ntrain['BsmtFinType2'].fillna(train['BsmtFinType2'].mode()[0], inplace=True)\ntrain['FireplaceQu'].fillna(train['FireplaceQu'].mode()[0], inplace=True)\ntrain['GarageType'].fillna(train['GarageType'].mode()[0], inplace=True)\ntrain['GarageFinish'].fillna(train['GarageFinish'].mode()[0], inplace=True)\ntrain['GarageQual'].fillna(train['GarageQual'].mode()[0], inplace=True)\ntrain['GarageCond'].fillna(train['GarageCond'].mode()[0], inplace=True)\ntrain['PoolQC'].fillna(train['PoolQC'].mode()[0], inplace=True)\ntrain['Fence'].fillna(train['Fence'].mode()[0], inplace=True)\ntrain['MiscFeature'].fillna(train['MiscFeature'].mode()[0], inplace=True)\ntrain['Electrical'].fillna(train['Electrical'].mode()[0], inplace=True)","eb7a45ad":"Category_columns.isnull().sum()","b3488973":"train.isnull().sum()","d8e5559c":"duplicate = train.duplicated()\nprint(duplicate.sum())\ntrain[duplicate]\ntrain.drop_duplicates(inplace = True)","0a05dd55":"sns.heatmap(train.corr(), fmt = \".2f\")","9c2144ca":"numeric_features = numeric_columns.columns\nnumeric_features","34ad7bae":"year_feature = [feature for feature in numeric_features if 'Yr' in feature or 'Year' in feature]\n\nyear_feature","1c4bbd78":"## Lets analyze the Temporal Datetime Variables\n## We will check whether there is a relation between year the house is sold and the sales price\ntrain.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year Sold')\nplt.ylabel('Median House Price')\nplt.title(\"House Price vs YearSold\")","cc1c19cc":"for feature in year_feature:\n    if feature!='YrSold':\n        data=train.copy()\n        ## We will capture the difference between year variable and year the house was sold for\n        data[feature]=data['YrSold']-data[feature]\n\n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()","a56a2e3b":"discrete_feature=[feature for feature in numeric_features if len(train[feature].unique())<25 and feature not in year_feature+['Id']]\nprint(\"Discrete Variables Count: {}\".format(len(discrete_feature)))\ndiscrete_feature","ea7e6141":"for feature in discrete_feature:\n    data=train.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","7467d894":"continuous_feature=[feature for feature in numeric_features if feature not in discrete_feature+year_feature+['Id']]\nprint(\"Continuous feature Count {}\".format(len(continuous_feature)))\ncontinuous_feature\n","517d3dac":"for feature in continuous_feature:\n    data=train.copy()\n    data[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel(\"Count\")\n    plt.title(feature)\n    plt.show()","20edc9fb":"train['MasVnrArea'].unique()","6c0c86d8":"\nfor feature in continuous_feature:\n    data=train.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalesPrice')\n        plt.title(feature)\n        plt.show()","6e28100d":"\nfor feature in continuous_feature:\n    data=train.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","b1dac1d7":"categorical_features=[feature for feature in train.columns if data[feature].dtypes=='O']\ncategorical_features","7d508997":"for feature in categorical_features:\n    data=train.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","135857d2":"****Numeric Features - Missing data Handling ****","54c50210":"Correlation","8a9a4543":"****Categorical_features Missing data Handling****","0ee42ca6":"****Handing Duplicates****"}}