{"cell_type":{"b1bb6da8":"code","60f7cdc5":"code","7c142a3e":"code","2012c3bd":"code","399ab166":"code","b4a30981":"code","890e3722":"code","aa20dc50":"code","b56702f4":"code","36e5b000":"code","c69eb89f":"code","7bcc1fa0":"code","d694d721":"code","a1982b23":"code","f5b10a5f":"code","5a8ade04":"code","1eb7a298":"code","ec2bc24a":"code","2dc3e201":"code","ff6664d5":"code","5fb3ca52":"code","ff5757fe":"code","36e88266":"code","6e76a407":"code","6fca0857":"code","6f19afec":"code","579e2b42":"code","bea43e63":"code","3646c887":"code","3f3d4d81":"code","6b1fe286":"code","bd99ff70":"code","1e5a038b":"code","a0f399f2":"code","7eaa34aa":"code","ebb41d50":"code","b23e0c32":"code","c9e07e6a":"code","dd20c408":"code","499086fb":"code","48715915":"code","e535b24e":"code","6890ce72":"code","da7c4aa1":"code","99bc0833":"code","d3e98e30":"code","32ad9ee7":"code","6933ffe0":"code","69e9c859":"code","c8320f27":"code","775201e0":"code","2873a97e":"code","64be7029":"code","731d871d":"code","05268727":"code","4eaf2eef":"code","5d256ed8":"code","0520ee6a":"code","ed064abd":"code","02a1dbe2":"code","54f600e9":"code","55726cae":"code","bc433da4":"code","9cdc3bdd":"code","a7621ae0":"code","1c8a6355":"code","9a2c85f7":"code","7415702f":"code","434971a9":"code","1345ddd4":"code","01fe0fe8":"markdown","732ff4ec":"markdown","262f0543":"markdown","781ecb8c":"markdown","30a9720a":"markdown","dbde7a14":"markdown","cb873514":"markdown","2c3621e7":"markdown","55bc89ec":"markdown","f3164615":"markdown"},"source":{"b1bb6da8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60f7cdc5":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n%matplotlib inline\nwarnings.filterwarnings('ignore')","7c142a3e":"df = pd.read_csv('..\/input\/bigmart-sales-data\/Train.csv')","2012c3bd":"df.head()","399ab166":"df.describe()","b4a30981":"df.info()","890e3722":"# unique values in dataset\ndf.apply(lambda x: len(x.unique()))","aa20dc50":"df.isnull().sum()","b56702f4":"# categorical attributes\ncat_col = []\nfor x in df.dtypes.index:\n    if df.dtypes[x] == 'object':\n        cat_col.append(x)","36e5b000":"cat_col","c69eb89f":"cat_col.remove('Item_Identifier')","7bcc1fa0":"cat_col.remove('Outlet_Identifier')","d694d721":"cat_col","a1982b23":"for col in cat_col:\n    print(col)\n    print(df[col].value_counts())\n    print()","f5b10a5f":"item_weight_mean = df.pivot_table(values = \"Item_Weight\", index = 'Item_Identifier')","5a8ade04":"item_weight_mean","1eb7a298":"miss_bool = df['Item_Weight'].isnull()","ec2bc24a":"miss_bool","2dc3e201":"for i, item in enumerate(df['Item_Identifier']):\n    if miss_bool[i]:\n        if item in item_weight_mean:\n            df['Item_Weight'][i] = item_weight_mean.loc[item]['Item_Weight']\n        else:\n            df['Item_Weight'][i] = np.mean(df['Item_Weight'])","ff6664d5":"df['Item_Weight'].isnull().sum()","5fb3ca52":"outlet_size_mode = df.pivot_table(values='Outlet_Size', columns='Outlet_Type', aggfunc=(lambda x: x.mode()[0]))","ff5757fe":"outlet_size_mode","36e88266":"miss_bool = df['Outlet_Size'].isnull()","6e76a407":"df.loc[miss_bool, 'Outlet_Size'] = df.loc[miss_bool, 'Outlet_Type'].apply(lambda x: outlet_size_mode[x])","6fca0857":"df['Outlet_Size'].isnull().sum()","6f19afec":"sum(df['Item_Visibility'] == 0)","579e2b42":"df.loc[:,'Item_Visibility'].replace([0] , [df['Item_Visibility'].mean()] , inplace = True )","bea43e63":"sum(df['Item_Visibility']==0)","3646c887":"df['Item_Fat_Content'] = df['Item_Fat_Content'].replace({'LF':'Low Fat', 'reg':'Regular', 'low fat':'Low Fat'})\ndf['Item_Fat_Content'].value_counts()","3f3d4d81":"df['New_Item_Type'] = df['Item_Identifier'].apply(lambda x: x[:2])","6b1fe286":"df['New_Item_Type']","bd99ff70":"df['New_Item_Type'] = df['New_Item_Type'].map({'FD':'Food', 'NC':'Non-Consumable', 'DR':'Drinks'})\ndf['New_Item_Type'].value_counts()","1e5a038b":"df.loc[ df ['New_Item_Type'] =='Non-Consumable', 'Item_Fat_Content'] = 'Non-Edible'\ndf['Item_Fat_Content'].value_counts()","a0f399f2":"df['Outlet_Years'] = 2013 - df['Outlet_Establishment_Year']","7eaa34aa":"df['Outlet_Years']","ebb41d50":"df.head()","b23e0c32":"sns.distplot(df['Item_Weight'] , color = 'red')","c9e07e6a":"sns.distplot(df['Item_Visibility'] , color = 'green')","dd20c408":"sns.distplot(df['Item_MRP'] , color = 'purple')","499086fb":"sns.distplot(df['Item_Outlet_Sales'] , color = 'orange')","48715915":"# log transformation:\ndf['Item_Outlet_Sales'] = np.log(1+df['Item_Outlet_Sales'])","e535b24e":"sns.distplot(df['Item_Outlet_Sales'] , color = 'orange')","6890ce72":"sns.countplot(df[\"Item_Fat_Content\"] , palette=\"Set3\")","da7c4aa1":"l = list(df['Item_Type'].unique())\nchart = sns.countplot(df[\"Item_Type\"],palette=\"Set3\")\nchart.set_xticklabels(labels=l, rotation=90)","99bc0833":"sns.countplot(df['Outlet_Establishment_Year'] , palette=\"Set3\")","d3e98e30":"sns.countplot(df['Outlet_Size'], palette=\"Set3\")","32ad9ee7":"sns.countplot(df['Outlet_Location_Type'] , palette=\"Set3\")","6933ffe0":"sns.countplot(df['Outlet_Type'] , palette = 'Set3')","69e9c859":"corr = df.corr()","c8320f27":"plt.figure(figsize=(15,5))\nsns.heatmap(corr, annot=True )","775201e0":"from sklearn.preprocessing import LabelEncoder","2873a97e":"le = LabelEncoder()","64be7029":"df['Outlet'] = le.fit_transform(df['Outlet_Identifier'])","731d871d":"cat_col = ['Item_Fat_Content', 'Item_Type', 'Outlet_Size', 'Outlet_Location_Type', 'Outlet_Type', 'New_Item_Type']\nfor col in cat_col:\n    df[col] = le.fit_transform(df[col])","05268727":"df = pd.get_dummies(df, columns=['Item_Fat_Content', 'Outlet_Size', 'Outlet_Location_Type', 'Outlet_Type', 'New_Item_Type'])","4eaf2eef":"df.head()","5d256ed8":"X = df.drop(columns=['Outlet_Establishment_Year', 'Item_Identifier', 'Outlet_Identifier', 'Item_Outlet_Sales'])","0520ee6a":"y = df['Item_Outlet_Sales']","ed064abd":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error","02a1dbe2":"def train(model, X, y):\n    model.fit(X, y)\n    pred = model.predict(X)\n    \n    cv_score = cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=5)\n    cv_score = np.abs(np.mean(cv_score))\n    \n    print(\"Model Report\")\n    print(\"MSE:\",mean_squared_error(y,pred))\n    print(\"CV Score:\", cv_score)","54f600e9":"from sklearn.linear_model import LinearRegression, Ridge, Lasso","55726cae":"model = LinearRegression(normalize=True)\ntrain(model, X, y)\ncoef = pd.Series(model.coef_, X.columns).sort_values()\ncoef.plot(kind='bar', title=\"Model Coefficients\",color = 'lightblue')","bc433da4":"model = Ridge(normalize=True)\ntrain(model, X, y)\ncoef = pd.Series(model.coef_, X.columns).sort_values()\ncoef.plot(kind='bar', title=\"Model Coefficients\" , color = 'red')","9cdc3bdd":"\nmodel = Lasso()\ntrain(model, X, y)\ncoef = pd.Series(model.coef_, X.columns).sort_values()\ncoef.plot(kind='bar', title=\"Model Coefficients\" , color ='lightblue')","a7621ae0":"from sklearn.tree import DecisionTreeRegressor","1c8a6355":"model = DecisionTreeRegressor()\ntrain(model, X, y)\ncoef = pd.Series(model.feature_importances_, X.columns).sort_values(ascending=False)\ncoef.plot(kind='bar', title=\"Feature Importance\" , color ='red')","9a2c85f7":"from sklearn.ensemble import RandomForestRegressor","7415702f":"model = RandomForestRegressor()\ntrain(model, X, y)\ncoef = pd.Series(model.feature_importances_, X.columns).sort_values(ascending=False)\ncoef.plot(kind='bar', title=\"Feature Importance\" , color = 'lightblue')","434971a9":"from sklearn.ensemble import ExtraTreesRegressor","1345ddd4":"model = ExtraTreesRegressor()\ntrain(model, X, y)\ncoef = pd.Series(model.feature_importances_, X.columns).sort_values(ascending=False)\ncoef.plot(kind='bar', title=\"Feature Importance\" , color = 'red')","01fe0fe8":"# IMPORT MODULES","732ff4ec":"# EXPLORATORY DATA ANALYSIS","262f0543":"# LOADING THE DATASET","781ecb8c":"# PREPROCESSING THE DATASET","30a9720a":"# MODEL TRAINING","dbde7a14":"# INPUT SPLIT","cb873514":"# ONEHOT ENCODING","2c3621e7":"# CREATION OF NEW ATTRIBUTES","55bc89ec":"# LABEL ENCODING","f3164615":"# COORELATION MATRIX"}}