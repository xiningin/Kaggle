{"cell_type":{"c918c366":"code","b44e91e7":"code","0b5f07ad":"code","c1bb550c":"code","1f335ff0":"code","7c1794cf":"code","cc6945db":"code","f6cc5c28":"code","ee47dc14":"code","2668a87c":"code","7528b235":"code","34811eec":"code","845d96b4":"code","251b7df5":"code","637c12df":"code","6a990996":"markdown","f53f95cb":"markdown","f5aa9d08":"markdown","d5e1a10d":"markdown","e25e4287":"markdown","09b7e033":"markdown","866db1f9":"markdown","f488f5ea":"markdown","78af6a3a":"markdown","fd3d8b92":"markdown","7a1364c3":"markdown","d28c7ba8":"markdown","eb2bb2b6":"markdown","6007a5aa":"markdown","3c349e9a":"markdown","c83d2edb":"markdown"},"source":{"c918c366":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score","b44e91e7":"data = pd.read_csv(\"..\/input\/diabetes.csv\")\ndata.head()","0b5f07ad":"non_zero = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\nfor coloumn in non_zero:\n    data[coloumn] = data[coloumn].replace(0,np.NaN)\n    mean = int(data[coloumn].mean(skipna = True))\n    data[coloumn] = data[coloumn].replace(np.NaN,mean)\n    print(data[coloumn])","c1bb550c":"!pip install missingno\nimport missingno as msno\np=msno.bar(data)","1f335ff0":"import seaborn as sns\np=sns.pairplot(data, hue = 'Outcome')","7c1794cf":"X =data.iloc[:,0:8]\ny =data.iloc[:,8]\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0, stratify=y)","cc6945db":"#feature Scaling\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","f6cc5c28":"import math\nmath.sqrt(len(y_test))","ee47dc14":"classifier = KNeighborsClassifier(n_neighbors=13,p=2,metric='euclidean')","2668a87c":"classifier.fit(X_train,y_train)","7528b235":"y_pred =  classifier.predict(X_test)\ny_pred","34811eec":"cm= confusion_matrix(y_test,y_pred)\ncm","845d96b4":"print(f1_score(y_test,y_pred))","251b7df5":"print(accuracy_score(y_test,y_pred))","637c12df":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(5, 7))\n\n\nax = sns.distplot(data['Outcome'], hist=False, color=\"r\", label=\"Actual Value\")\nsns.distplot(y_pred, hist=False, color=\"b\", label=\"Predicted Values\" , ax=ax)\n\n\nplt.title('Actual vs Precited value for outcome')\nplt.show()\nplt.close()","6a990996":"We have taken this value to get the value of K. We need an odd value of K so we will make it 12-1 or 12+1.","f53f95cb":"For data X we are taking all the rows of coloumn ranging from 0 to 7. Similary for y we are taking all the rows for the 8th coloumn.","f5aa9d08":"Since we have the data ready. It's time to train and test the data","d5e1a10d":"We have araay of data but we need to evalute our model to check the accuracy.\nLets start it with confusion matrix","e25e4287":"pd and np are for  pandas and numpy librabry.\nThe last 3 lines(confusion_matrix,accuracy_score and f1_score) are for checking the accuracy of the model. \ntrain_test_split is to split and train the data.\nKNeighborsClassifier is for K nearest neibhour. \nStandardization of a dataset is a common requirement for many machine learning estimators: they might behave badly if the individual features do not more or less look like standard normally distributed data ","09b7e033":"We have created non_zero which has all the coloumn which are needed for predicting the outcome value.\nWe need to make sure these coloumn does not have any value related to zero or NaN value. Incase we have 0 then we will replace it with NaN.\nAnd then replacing NaN with the mean value of the coloumn.","866db1f9":"We will read the csv file through pd.read_csv.And through head() we can see top 5 rows.\nThere are some factors where the values cannot be zero. For example Glucose value cannot be 0 for a human. Similary BloodPressure,SkinThickness,Insulin and BMI cannot be zero for a human.","f488f5ea":"Lets try to predict our data usinf classifier predict","78af6a3a":"Lets plot the graph for the actual  data and our predicted vaue","fd3d8b92":"\nStandardScaler performs the task of Standardization. Usually a dataset contains variables that are different in scale. For e.g. an  dataset will contain insulin column with values on scale 20-70 and Glucose column with values on scale 80-200.\nAs these two columns are different in scale, they are Standardized to have common scale while building machine learning model","7a1364c3":"We have f1 score as 0.61 and accuracy score of .75","d28c7ba8":"We have the confusion matrix where the diagnol with 86 and 30 shows the correct value and 14,24 shows the prediction that we missed.","eb2bb2b6":"We have train_test_split which we had imported during the start of the program and we have defined test size as 0.2 which implies out of all the data 20% will be kept aside to test the data at a later stage.","6007a5aa":"We will check the f1 score ","3c349e9a":"We have defined non_zero with the coloumn where the values cannot be zero. And in every coloumn we will first check if we have 0 value. Then we replace it will NaN. Later we are creating a mean of the coloumn and replacing the earlier with mean.","c83d2edb":"Lets plot details of the diabatese data"}}