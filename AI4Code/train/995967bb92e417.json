{"cell_type":{"23ff9783":"code","e19f0efb":"code","44c5704e":"code","97a99d8b":"code","e8bfdb3b":"code","fa386e8f":"code","ed1e333b":"code","59eb0bea":"code","55b09b60":"code","6b9299fb":"code","701e6bd4":"code","d0eb84a1":"code","5c5a32f2":"code","4f3e627a":"code","0fb769f9":"code","e5eeed0e":"markdown","194ca172":"markdown","9843593e":"markdown","0834cdcc":"markdown"},"source":{"23ff9783":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e19f0efb":"import matplotlib.pyplot as plt\nimport datetime\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom keras import models, layers","44c5704e":"df = pd.DataFrame(np.random.rand(21*1000).reshape(-1,21))","97a99d8b":"df","e8bfdb3b":"df.shape","fa386e8f":"X_l = []\ny_l = []\nN = len(df)\nD = 50\nfor i in range(N-D-21):\n    X_l.append(df.iloc[i:i+D])\n    y_l.append(df.iloc[i+D])\n    \nX = np.array(X_l)\ny = np.array(y_l)\n\nprint(X.shape, y.shape)","ed1e333b":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state= 100)","59eb0bea":"m_x = layers.Input(shape = X_train.shape[1:])\nm_h = layers.LSTM(10)(m_x)\nm_y = layers.Dense(21)(m_h)\nm = models.Model(m_x,m_y)\nm.compile('adam','mse')\nm.summary()","55b09b60":"history = m.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test),verbose=1)","6b9299fb":"plt.figure(figsize=(15,5))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['Train','Test'])\nplt.title(\"The model's evaluation\", fontsize=14)\nplt.xlabel('Epoch')\nplt.xlim(2,500)\nplt.ylabel('Loss')\nplt.show()","701e6bd4":"pr = m.predict(np.array(df.iloc[-50:]).reshape(1,50,21))","d0eb84a1":"pr[0]","5c5a32f2":"df","4f3e627a":"pred = []\n\npr = m.predict(np.array(df.iloc[-50:]).reshape(1,50,21))\n\npred.append(pr[0])\n\nfor i in range(1,50):\n    pr = m.predict(np.concatenate((np.array(df[-50+i:]), pred[:]), axis=0).reshape(1,50,21))\n    pred.append(pr[0])\n\nfor i in range(0,250):\n    pr = m.predict(np.concatenate(pred[i:],axis=0).reshape(-1,50,21))\n    pred.append(pr[0])","0fb769f9":"pred","e5eeed0e":"#Make LSTM model","194ca172":"#Fit and Evaluate the model","9843593e":"#Code by JeongBin Park https:\/\/www.kaggle.com\/jeongbinpark\/lstm-can-we-predict-the-bitcoin-price\/notebook?select=bitstampUSD_1-min_data_2012-01-01_to_2020-12-31.csv ","0834cdcc":"#Sliding window\n\nWe predict 1 data by using 50 datas.\n\nIn the Original : X.shape : (12965, 50, 1)  and y.shape : (12965, 1).  It has only 1 column\n\nHere is X.shape: (929,50, 21)  and y.shape: (929, 21)\n\nNone, 50, 21  So N-D-21  The original was N-D-1)"}}