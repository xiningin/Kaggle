{"cell_type":{"13e6edc8":"code","b4e68b06":"code","1e3db021":"code","2cd9099b":"code","8c4a23a7":"code","cc621212":"code","321ff959":"code","012e84b2":"code","79cf9208":"code","54b903ad":"code","a5c1be1c":"code","0c115297":"code","c68b2684":"code","b7ebaa05":"code","5bc2964c":"code","078ebe24":"code","54cbb2ce":"code","ee237164":"code","a6434686":"code","7981aa29":"code","8e371b9a":"code","b925334a":"code","5b734670":"code","587bc1df":"code","7f2d21fb":"code","01eb5457":"code","4feccc55":"code","b14862ca":"code","55544590":"code","8cbc821f":"code","df72854c":"code","fc3ff326":"code","778cae4d":"code","9701a97d":"code","ebe9c755":"code","690754e9":"code","f5ac688f":"code","af0bcc5a":"code","1ef9199a":"code","8ee08cb7":"code","ba2e1d8e":"code","8aebdcf6":"code","03a642b5":"code","f17ce382":"code","d5514269":"code","5c8c9182":"code","d0066acc":"code","5419d21e":"code","ca9bfb99":"code","ee7df65e":"code","82624323":"code","a2980735":"code","c246640c":"code","54b962e5":"code","ee524d57":"code","2c28f84e":"code","ffbfe46c":"markdown","4e17156b":"markdown","079e8315":"markdown","8dd200c3":"markdown","24639929":"markdown","797a416e":"markdown","e065efee":"markdown","85c1c17b":"markdown","86f47c6b":"markdown","d5823514":"markdown","c167d56e":"markdown","060c00fb":"markdown","2bb1e1b0":"markdown","b67b9c51":"markdown","5dc75bf0":"markdown","c486883a":"markdown","78238f59":"markdown","e4623162":"markdown","6fa85c0e":"markdown","c793f3ea":"markdown","361814e0":"markdown","86ee0450":"markdown","ab07f8e3":"markdown","9051e5d2":"markdown","f4b1d707":"markdown","23686995":"markdown","bbeaa453":"markdown","dc326555":"markdown","6ab12784":"markdown","f1576d58":"markdown","1ca72238":"markdown","6b70a055":"markdown","68f6baf6":"markdown","b730459e":"markdown","6fafbef0":"markdown","9eb37f29":"markdown","ffbdddee":"markdown","3b47b1d6":"markdown","9331a447":"markdown","65803e7d":"markdown","dfbfde49":"markdown","0075ac17":"markdown","b571892d":"markdown","8c0fd8c9":"markdown","7ebfc952":"markdown","e6f8ca74":"markdown","f131abdf":"markdown","960d441a":"markdown","ac0434dd":"markdown","6f2d5634":"markdown","46a06319":"markdown","1c523d5a":"markdown","9ef6693c":"markdown","bb0a279a":"markdown","14aa8f86":"markdown","772f3402":"markdown","860612c8":"markdown","b2fa6d31":"markdown","f0717031":"markdown","8182ee36":"markdown","d1a1ea3c":"markdown","ff71876b":"markdown"},"source":{"13e6edc8":"import numpy as np                      # Implements multi-dimensional array and matrices\nimport pandas as pd                     # For data manipulation and analysis\nimport pandas_profiling\nimport matplotlib.pyplot as plt         # Plotting library for Python programming language and it's numerical mathematics extension NumPy\nimport seaborn as sns                   # Provides a high level interface for drawing attractive and informative statistical graphics\n%matplotlib inline\nsns.set()\n\nfrom subprocess import check_output     # To check output","b4e68b06":"#Reading 1000 Movies Dataset\nmd = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/insaid2018\/Term-1\/master\/Data\/Projects\/1000%20movies%20data.csv\")","1e3db021":"md.head(15)                                # Display the first five rows of the dataset.","2cd9099b":"md.tail(10)","8c4a23a7":"md.shape                                          # Shape of the Dataset","cc621212":"md.describe()          # Descriptive statistics for the numerical variables in the Dataset.","321ff959":"md.sample(10)                            # Displays a random 10 rows from the dataset.","012e84b2":"md.info()                         # Displays Data_Types and Null_Values in the Dataset.","79cf9208":"import pandas_profiling                          # Get a quick overview for all the variables using pandas_profiling.                                         \nprofile = pandas_profiling.ProfileReport(md)\nprofile.to_file(\"1000movies_before_preprocessing.html\")     # HTML file will be downloaded to local workspace.","54b903ad":"md['Revenue (Millions)'].mean()         # Mean of the column Revenue_(Millions). ","a5c1be1c":"md['Revenue (Millions)'].median()       # Median of the column Revenue_(Millions). ","0c115297":"md['Revenue (Millions)']= md['Revenue (Millions)'].replace(np.NaN , md['Revenue (Millions)'].mean())\n\nmd['Revenue (Millions)'].isnull().sum()       #Replaced missing values of column Revenue_(Millions) with Mean and checking if any null values persists.","c68b2684":"md['Revenue (Millions)']= md.mask(md['Revenue (Millions)']==0.0, md['Revenue (Millions)'].mean())\nmd['Revenue (Millions)'].sample(15)\n#Replaced 0.0 values of column Revenue_(Millions) with Mean and sample(15) display.","b7ebaa05":"md['Metascore'].mean()                  # Mean of the column Metascore. ","5bc2964c":"md['Metascore'].median()                # Median of the column Metascore. ","078ebe24":"md['Metascore']= md['Metascore'].replace(np.NaN , md['Metascore'].mean()) \nmd['Metascore'].tail(15)      # Replaced missing values of column Metascore with Mean and head(15) display.","54cbb2ce":"from pandas import DataFrame                       #Splitting the column 'Genre' into 3 columns\ndf=pd.DataFrame(md)\nGenSplt=md['Genre'].str.split(\",\", n=-1, expand = True)\nGenSplt.columns = ['G1','G2','G3']                 #Giving names to the columns\n#GenSplt\n","ee237164":"GenSplt.columns = ['G1','G2','G3']\nGenOne= GenSplt['G1'].append(GenSplt['G2'])        #Appending all the 3 columns to single column\nGenOne= GenOne.append(GenSplt['G3'])\nGenOne= GenOne.dropna(axis = 0, how ='any')        #Dropping NaN Values\ndf2=pd.DataFrame(GenOne)                           #Making the splitted&appended column to DataFrame\ndf2.columns=['G']\n#df2\nmd.head(10)","a6434686":"from pandas import DataFrame                       #Splitting the column 'Actors' into 4 columns\ndf=pd.DataFrame(md)\nActSplt=md['Actors'].str.split(\",\", n=-1, expand = True)\nActSplt.columns = ['A1','A2','A3','A4']                 #Giving names to the columns\n#GenSplt\n\n","7981aa29":"\nActOne= ActSplt['A1'].append(ActSplt['A2'])        #Appending all the 4 columns to single column\nActOne= ActOne.append(ActSplt['A3'])\nActOne= ActOne.append(ActSplt['A3'])\nActOne= ActOne.dropna(axis = 0, how ='any')        #Dropping NaN Values\ndf10=pd.DataFrame(ActOne)                           #Making the splitted&appended column to DataFrame\ndf10.columns=['A']\n#df10","8e371b9a":"md.drop(['Description'], axis=1)   # Dropping the Description column for no insights to analyze data.\n","b925334a":"import pandas_profiling                          # Get a quick overview for all the variables using pandas_profiling.                                         \nprofile = pandas_profiling.ProfileReport(md)\nprofile.to_file(\"1000movies_after_preprocessing.html\")     # HTML file will be downloaded to local workspace.","5b734670":"plt.figure(figsize=(20,20))\nMovTrnd = sns.factorplot(\"Year\", data=md, aspect=2, kind=\"count\", color='Skyblue')\n#Displays count of movies releases over the period:2006-2016.\n#Also, Count of Movies per year.","587bc1df":"plt.figure(figsize=(10,5))\ndf4=md.sort_values(\"Revenue (Millions)\", ascending=False).head(10)\ndf_4 = sns.barplot(x=\"Revenue (Millions)\", y=\"Title\",hue='Year', linewidth=0, data=df4,ci= None)\n#plt.title('Top 10 Movies with Highest Revenue',fontsize=18,fontweight=\"bold\")\ndf_4.set_xlim(990,1000)\nplt.legend(bbox_to_anchor=(1.05, 0.9), loc=2, borderaxespad=0.)  #Moving the hue to right for graph visibility.\nplt.show()\n","7f2d21fb":"x =[]\ny =[]\n\nfor i in md['Year'].unique():\n    y.append(md[md['Year']==i]['Revenue (Millions)'].sum())\n    x.append(i) ","01eb5457":"z = pd.DataFrame(list(zip(x, y)), columns=['Year','Revenue_Sum'])\nz","4feccc55":"plt.figure(figsize=(10,7))\nTrenMov = sns.lineplot(x=\"Year\", y=\"Revenue_Sum\",data=z,ci= None)\n#Displays cummulative revenue generated on the movies per year.","b14862ca":"plt.figure(figsize=(20,20))\nsns.jointplot(\"Rating\",\"Revenue (Millions)\", data=md, kind='hex', color='DarkBlue')\n#Relation between Rating and Revenue.","55544590":"import matplotlib.pyplot as plt                     #Finding individual uniques out of profiled genre column\ndf2.G.unique()","8cbc821f":"df2.pivot_table(index=['G'], aggfunc='size') ","df72854c":"Genre_names=['Action', 'Adventure', 'Horror', 'Animation', 'Comedy',\n       'Biography', 'Drama', 'Crime', 'Romance', 'Mystery', 'Thriller',\n       'Sci-Fi', 'Fantasy', 'Family', 'History', 'Music', 'Western',\n       'War', 'Musical', 'Sport']\nGenre_Size=[303,259,49,81,279,150,513,51,101,29,119,16,5,106,141,120,18,195,13,7]\n\nplt.figure(figsize=(15,15))\nfig, gen = plt.subplots()\ngen.axis('equal')\nGenpie, _ = gen.pie(Genre_Size, radius=2.5, labels=Genre_names, colors = ['skyblue', 'gold','red','orange','blue','pink','violet','grey','gold','yellowgreen','brown'])\nplt.setp(Genpie, width=1, edgecolor='white')\nplt.margins(0,0)","fc3ff326":"x =[]\ny =[]\n\nfor i in md['Director'].unique():\n    y.append(md[md['Director']==i]['Revenue (Millions)'].sum())\n    x.append(i)","778cae4d":"df6 = (pd.DataFrame(list(zip(x, y)), columns=['Director','Revenue_Sum'])).sort_values('Revenue_Sum', ascending=False)","9701a97d":"df7 = df6.tail(5)  #Lowest Revenue generated directors\ndf6 = df6.head(5)  #Highest Revenue generated directors","ebe9c755":"sns.barplot(x=\"Revenue_Sum\", y=\"Director\", data=df6, ci= None)\nplt.show()","690754e9":"md.Director.value_counts().head(15).plot.bar()\n#sns.barplot(x=\"Revenue_Sum\", y=\"Director\", data=df7, ci= None)","f5ac688f":"md[md['Director']=='Alexandre Aja']","af0bcc5a":"#plt.figure(figsize=(8,8))\na=sns.scatterplot(x=\"Rating\", y=\"Votes\",data=md, ci= None) ","1ef9199a":"b=sns.scatterplot(x=\"Rating\", y=\"Metascore\",data=md,ci= None)","8ee08cb7":"c=sns.scatterplot(x=\"Metascore\", y=\"Votes\", data=md);","ba2e1d8e":"j = df10.A.unique()\nk = df10.pivot_table(index=['A'], aggfunc='size')\nab = ((pd.DataFrame(zip(j,k),columns=['Actors','MovCount'])).sort_values('MovCount',ascending = False)).head(50)","8aebdcf6":"plt.figure(figsize=(10,10))\nsns.barplot('MovCount','Actors', data = ab)","03a642b5":"# Combinations\n\"\"\"    [['Votes','Metascore','Rating'],['Votes','Rating','Metascore'],\n        ['Rating','Metascore','Votes'],['Rating','Votes','Metascore'],\n        ['Metascore','Rating','Votes'],['Metascore','Votes','Rating']] \n\"\"\"","f17ce382":"tmd = pd.DataFrame()\ntmd = tmd.append((md.sort_values(by=['Votes','Metascore','Rating'], ascending = False)).head(10))\ntmd = tmd.append((md.sort_values(by=['Votes','Rating','Metascore'], ascending = False)).head(10))\ntmd = tmd.append((md.sort_values(by=['Rating','Metascore','Votes'], ascending = False)).head(10))\ntmd = tmd.append((md.sort_values(by=['Rating','Votes','Metascore'], ascending = False)).head(10))\ntmd = tmd.append((md.sort_values(by=['Metascore','Rating','Votes'], ascending = False)).head(10))\ntmd = tmd.append((md.sort_values(by=['Metascore','Votes','Rating'], ascending = False)).head(10))","d5514269":"tmd.Rank.nunique()","5c8c9182":"tmd = tmd.drop_duplicates(subset='Rank', keep='first', inplace=False)","d0066acc":"tmd.shape","5419d21e":"plt.figure(figsize=(7,7))\nsns.barplot(y=\"Title\", x=\"Revenue (Millions)\", data=tmd, ci= None)\nplt.show()","ca9bfb99":"md['Genre'].value_counts().head(15)   #To view the most frequent genres and their counts in descending order ","ee7df65e":"# Created list to use for loop\nlst = ['Action,Adventure,Sci-Fi',\n        'Drama',\n        'Comedy,Drama,Romance',\n        'Comedy',\n        'Drama,Romance',\n        'Animation,Adventure,Comedy',\n        'Comedy,Drama',\n        'Action,Adventure,Fantasy',\n        'Comedy,Romance',\n        'Crime,Drama,Thriller',\n        'Crime,Drama,Mystery',\n        'Action,Adventure,Drama',\n        'Action,Crime,Drama',\n        'Horror,Thriller',\n        'Drama,Thriller']\n\n\n# Summation of revenue for each genre\nTopGnr = []\nfor i in lst:\n    x = int(md[md['Genre']==i]['Revenue (Millions)'].sum())\n    TopGnr.append(x)\n\n# TopGen DataFrame for the values.\nTopGen= pd.DataFrame(TopGnr)\nTopGen.columns =['Revenue_Sum(Millions)'] \nTopGen['Genres'] = lst\n\n#TopGn.head()","82624323":"TopGen=TopGen.sort_values('Revenue_Sum(Millions)', ascending=False) #Sorting Values in descending order for graph","a2980735":"plt.figure(figsize=(8,8))\nsns.barplot(x=\"Revenue_Sum(Millions)\", y=\"Genres\",data=TopGen,linewidth=1,ci= None)\n","c246640c":"plt.figure(figsize=(7,7))\nmd['Genre'].value_counts().head(10).plot.bar() #What are most interested Genres ?","54b962e5":"g = []\nh = []\nfor i in range(2006,2017):\n    den = md[md['Year']==i]['Runtime (Minutes)'].count()\n    g.append(int((md[md['Year']==i]['Runtime (Minutes)'].sum())\/den))\n    h.append(i)","ee524d57":"df9 = (pd.DataFrame(list(zip(g,h)), columns=['AvgRuntime','Year'])) #.sort_values('Revenue_Sum', ascending=False)\ndf9","2c28f84e":"plt.figure(figsize=(10,7))\nsns.barplot(x=\"Year\", y=\"AvgRuntime\",data=df9,ci= None)","ffbfe46c":"- Description of the Movies is very less importance for the current analysis. Hence, dropping of the __Description__ column.","4e17156b":"- The immediate inference by seeing this joinplot is, Although ratings play a vital role, It doesn't guarantee revenue generation all the times.\n- In the graph, majority of ratings for more than 200m revenue genereated movies are between 6 and 8.5.\n- Another important finding is, most of the movies ratings are between 5 and 8.5. \n- This signifies that users are generous to give average or above average rating.\n- Also, the rating is normally distributed. Where as, Movies count with <200m is more.\n\n","079e8315":"| Column Name        | Description                                                 |\n| -------------------|:-----------------------------------------------------------:| \n| Rank               | Rank of the movie                                           | \n| Title              | Title of the movie                                          |  \n| Genre              | Style\\Category of the movie                                 | \n| Description        | Movie description                                           |   \n| Director           | Director of the movie                                       |\n| Actors             | Actors\\Lead roles in the movie                              |\n| Year               | Year in which movie is released                             |\n| Runtine_(Minutes)  | Movie length in minutes                                     |\n| Rating             | Rating of movie on 10 scale                                 |\n| Votes              | Count of votes for the movie                                |\n| Revenue_(Millions) | Revenue generated by the movie                              |\n| Metascore          |     Weighted average of the reviews from most respected critics |","8dd200c3":"<a id=section304><\/a>\n### 3.4 Post processing:","24639929":"<a id=section2><\/a>\n## 2. Data Loading and Description:\n\nThe dataset comprises of __1000 observations of 12 columns__. Below is a table showing names of all the columns and their description.","797a416e":"- There are atleast 50 movies of 'Action,Adventure,Sci-Fi' genre making it the most frequent.\n- The frequency of other genres is almost same around 25 for the top 10.","e065efee":"- And, Display a random 10 rows to see variations in the Data.","85c1c17b":"<a id=section409><\/a>\n### 4.9 What are the movies with highest Rating, Metascore and Votes?","86f47c6b":"<a id=section411><\/a>\n### 4.11 What are the top 10 Genres (Combination) ? ","d5823514":"## Table of Contents\n \n1. [Problem Statement](#section1)<\/br>\n    - 1.1 [Introduction](#section101)<br\/>\n<br>\n2. [Data Loading and Description](#section2)<\/br>\n    - 2.1 [Importing Packages](#section201)<br\/>\n    - 2.2 [Importing Dataset](#section202)<br\/>\n<br>\n3. [Data profiling](#section3)<\/br>\n    - 3.1 [Understanding Data](#section301)<br\/>\n    - 3.2 [Data Preprofiling](#section302)<br\/>\n    - 3.3 [Data Preprocessing](#section303)<br\/>\n    - 3.4 [Data Postprocessing](#section304)<br\/>  \n<br>\n4. [1000 Movies Data Analysis](#section4)<\/br>\n    - 4.1 [How many movies are released per year over the period 2006-2016?](#section401)<br\/>\n    - 4.2 [What are the top 10 Movies with Highest Revenue?](#section402)<br\/>\n    - 4.3 [What is the Revenue trend of the Movies over the years?](#section403)<br\/>\n    - 4.4 [Relation between Rating and Revenue](#section404)<br\/>\n    - 4.5 [Analysing Genres of all the movies individually](#section405)<br\/>   \n    - 4.6 [Who are the Highest and Lowest Revenue(Cumm.) generated Directors?](#section406)<br\/>\n    - 4.7 [Do all the parameters(Votes, Metascore, Rating) speak the same about a movie?](#section407)<br\/>\n    - 4.8 [Which Actors had appeared in Highest number of movies?](#section408)<br\/>\n    - 4.9 [What are the movies with highest - Rating, Metascore and Votes?](#section409)<br\/>    \n    - 4.10 [Which are the highest Revenue generated Genres ?](#section410)<br\/>\n    - 4.11 [What are the top and bottom 10 Genres (Combination) ?](#section411)<br\/>\n    - 4.12 [Is there a change in Movie Runtime(avg) over the years](#section412)<br\/>  \n<\/br>\n5. [Conclusion](#section5)<\/br>  \n\n\n","c167d56e":"- Next, I will do descriptive statistics for numerical variables.\n- This will help in finding distribution, Standard Deviations and min-max of numerical columns","060c00fb":"#### Observations:\n- Density in the plot shows that, Metascore and Votes are not so related.\n- Because, Vote count <2,50,000 is spread across the metascore values.\n- Although not directly related, Higher vote count movies are having higher rating.","2bb1e1b0":"#### Observations:\n- Movies with higher rating are having Higher Metascore.\n- Also, there are some handful of cases. Where Rating is low but, Metascore is average.","b67b9c51":"### Insights or Takeaways:","5dc75bf0":"#### Observations:\n- The above plot shows that the number of movies per year was gradually increasing.\n- But in 2016, count has grown all of a sudden signifying movie industry has become very popular.","c486883a":"- From the barplot, the movie with highest revenue is: 'Nine Lives' in the year 2016.\n- And its revenue is nearly 999 millions.\n- 'Search Party' and 'Step Up 2: The Streets' are the next highest reveneue generators of about 999 millions and 998 millions respectively.\n- It is observed that there is not much revenue difference(<10m) among the top 10 movies.\n- Another interesting observation is that the highest revenue generated movies are from all the years except 2006. \n","78238f59":"# <a id=section201><\/a>\n### 2.1 Importing Packages:","e4623162":"<a id=section412><\/a>\n### 4.12 Is there a change in movie run time(avg) over the decade?","6fa85c0e":"<a id=section202><\/a>\n### 2.2 Importing Dataset:","c793f3ea":"<a id=section301><\/a>\n### 3.1 Understanding Data:\n- Displaying the first five rows of the data to understand variables.\n- Finding the shape of dataset.","361814e0":"<a id=section401><\/a>\n### 4.1 How many movies are released per year over the period: 2006-2016?","86ee0450":"- The Linegraph shows the sum of Revenues per Year.\n- Total Revenue was gradually increasing with Years.\n- Key point is that, There is sudden increase in the Revenue in 2013.\n- And then, stable or slightly decreased in 2014.\n- The year 2016 generated highest total revenue.","ab07f8e3":"### Observations from Data Profiling:\n\n- Each Column details and Shape of the dataset are understood.\n- With Descriptive statistics, Statistical information of dataset is observed.\n- A random gist of the dataset to find abnormalities was also done.\n- Info() revealed the Data Types and Missing Values.\n\nNow, I have inputs for starting off with pre-profiling.","9051e5d2":"- Average Runtime of the movies didn't change much.\n- It seems that average Runtime of movies from 2016 are slight lower.","f4b1d707":"<a id=section404><\/a>\n### 4.4 Relation between Rating and Revenue.","23686995":"<a id=section408><\/a>\n### 4.8 Which Actors had appeared in highest number of Movies?","bbeaa453":"Here, Mean of __Revenue__ is choosen as it matches more with the values of the Column.","dc326555":"#### Observations:\n- Vote count is higher when the rating is higher. \n- Signifying, the movies which have better rating are also having high vote count.","6ab12784":"- Even though \u2018Ridley Scott\u2019 directed highest number of movies, when it comes to total revenue generation he is in 3rd place.\n- Where as, \u2019Paul W.S. Anderson' generated highest total revenue of 3715m with 6 movies.\n- \u2018Alexandre Aja\u2019 with only 4 movies is in the second position of total revenue ranking.This makes him the most successful director than any other till 2016.","f1576d58":"#### 3.3.3 Splitting Genre column for more insights:","1ca72238":"<a id=section303><\/a>\n### 3.3 Pre processing:\n- Dealing with missing Values.\n- Dealing with zeros.\n- Splitting column data for more insights.\n- Dropping the coulumn unsoughtful for data insights.","6b70a055":"<a id=section3><\/a>\n## 3. Data Profiling:\n\n- Firstly, I will __understand our dataset__ using various pandas functionalities.\n- Then, with the help of __pandas profiling__ I will find which columns of the dataset need preprocessing.\n- In __preprocessing__, I will deal with erronous and missing values. \n- Then after, I will do __pandas profiling__ again, to see how preprocessing has transformed the dataset.","68f6baf6":"- 'Drama' followed by 'Comedy,Drama,Romance' are the highest revenue generated Genres.\n-  At the same time, they are the most repetitive genres.\n-  The difference between revenue of top genre and the next genres in the row is >8000m.\n-  It is observed that Drama, Comedy and Romance are the most interested genres.","b730459e":"<a id=section410><\/a>\n### 4.10 Which are the highest Revenue generated Genres ?","6fafbef0":"<a id=section5><\/a>\n## 5. Conclusion","9eb37f29":"Now we have preprocessed the data and It doesn't contain missing or zero values. In addition, we have also introduced new feature named __G__ to draw insights from __Genre__ column. Next, the __post-profiling__ report which we will generate after preprocessing will give us more beneficial insights. We can compare the two reports, i.e., __1000movies_after_preprocessing.html__ and __1000movies_before_preprocessing.html__<br\/>\n","ffbdddee":"<a id=section402><\/a>\n### 4.2 What are the top 10 Movies with Highest Revenue?","3b47b1d6":"\n# <center>EDA of 1000 Movies Data<\/center>","9331a447":"#### Rating vs Votes:","65803e7d":"- The Movies: 'Manchester by the Sea', 'Interstellar' and 'Moonlight' generated low Revenue even with Higher Ratings, Votes and Metascore.\n- 'Boyhood', 'Gravity', 'Carol', 'The Lives of Others' and 'Ratatouille' Movies have performed well in poroportional to Ratings and other metrics.","dfbfde49":"<a id=section403><\/a>\n### 4.3 What is the Revenue trend of the Movies over the Years?","0075ac17":"<a id=section407><\/a>\n### 4.7 Do all the parameters(Votes, Metascore, Rating) speak the same about a movie?","b571892d":"- 'Nine Lives' is the highest Revenue generated movie in the year 2016.\n-  Highest Total Revenue is in the year 2016, which is obvious being the latest.\n-  An unusual trend is observed where Total Revenue decreased from 2013 to 2014, even when movie count was increasing.\n-  Movies directed by 'Paul W.S. Anderson' generated highest total revenue of 3715m.\n-  Drama, Comedy and Action are the most common genres(individual).\n-  The movies with higher rating will have higher vote count.\n-  Every year there is aleast one movie to cross 900m revenue.\n-  Movies of 'Drama' Genre has generated the highest revenue.\n- The Movies: 'Manchester by the Sea', 'Interstellar' and 'Moonlight' generated low Revenue even with Higher - Ratings, Votes and Metascore.\n-  Movies with 'Action,Adventure,Sci-Fi' genre are the most. ","8c0fd8c9":"#### 3.3.5 Dropping the column unsoughtful for data insights.","7ebfc952":"It is observed that __Revenue Column__ comprises of zero values, which cannot happen in real life. Hence, replacing zero values with means.","e6f8ca74":"<a id=section405><\/a>\n### 4.5 Analysing Genres of all the movies individually.","f131abdf":"- The __Genre__ Column consists of various genres combined for each movie. If we split up the genres, more insights can be drawn with regards to each movie. Hence, Genres will be analyzed combinedly as well as by spliting.","960d441a":"<a id=section1><\/a>\n## 1. Problem statement\n\nThe dataset consists of 1000 movies information over the period (2006-2016) with various variables. Such as,          Title, Year of release, Revenue, Ratings, Votes, Actors and Genres. Insights from this dataset guides Producers, Distributors, Theatres and Others in understanding the movies trend in all the aspects.\n\n\n<a id=section101><\/a>\n### 1.1 Introduction:\n\nThis Exploratory Data Analysis is to practice Python skills learned till now on a structured data set including      loading, inspecting, wrangling, exploring, and drawing conclusions from data. The notebook has observations with      each step in order to explain thoroughly how to approach the data set. Based on the observation some questions are also answered in the notebook for the reference though not all of them are explored in the analysis.","ac0434dd":"Here, I have done Pandas Profiling before preprocessing our dataset, so I have named the html file as __1000movies_before_preprocessing.htm__. Looking at the file will help developing useful insights from the dataset. <br\/>\n\nNow, I will process the data for better understanding.","6f2d5634":"In 1000movies_after_preprocessing.html report, observations:\n- In the Dataset info, Total __Missing(%)__ = __0.0%__ \n- Number of __variables__ = __12__ \n- Observe the newly created variable __G__.","46a06319":"- Inorder to handle the data better, finding the Data Types and Null Values. ","1c523d5a":"#### 3.3.4 Splitting Actors column for more insights:","9ef6693c":"- From pie chart, movies with drama genre are highest.\n- Followed by, Action and then, Comedy Genre.\n- Genres with lowest movies are Musical, Fantasy, Sci-Fi and Sport.\n- All the remaining genres shared nearly same movies count ratio.","bb0a279a":"#### 3.3.2 Dealing with zeros:\n\n","14aa8f86":"- Drama is the most interested genre by majority of audience. And it is followed by Comedy and Romance. So, Producers can be rest assured while investing in these genres in future.\n- Fantasy, Sports genres are less explored by the existing movie makers. So this is a good space for the new directors, at the same time they would help avoid competition.\n- Most of the existing directors are concentrating on the genres: Action, Adventure and Sci-Fi even though they are not doing well commercially. Hence, Directors should start combinations of those with well performed genres such as, Drama, Comedy and Romance.\n- There are movies with higher metrics of rating, metascore and votes but, they have not done well in terms of revenue. So, These movies can be pushed to OTT platforms for further revenue generation.\n- Distributors can safely opt for the movies involving the Actors: Malin Akarmen, Mia Goth, Susan Loughnane, Michael Varten, Laura Dern, Roman Kolinka and Joan Allen, And the Directors: Alexandre Aja, Paul Anderson, Ridley Scott and Woody Allen.","772f3402":"- 'Malin Akarmen' is the only one who acted in 14 Movies. \n- And the next 5 actors: Mia, Susan, Michael, Laura, Roman and Joan are part of 12 movies each.","860612c8":"<a id=section4><\/a>\n## 4. 1000 Movies Data Analysis:","b2fa6d31":"<a id=section406><\/a>\n### 4.6 Who are the Highest and Lowest Revenue(cummulative) generated Directors??","f0717031":"#### Rating vs Metascore:","8182ee36":"#### Metascore vs Votes:","d1a1ea3c":"<a id=section302><\/a>\n### 3.2 Pre profiling:\n\n- With pandas profiling, an __interactive HTML report__ gets generated, which gives breif description about the columns of the dataset like the __counts, Histograms and Correlations__. Detailed information about __each column__, __coorelation between different columns__ and a __sample__ of dataset.<br\/>\n- It also gives __visual interpretation__ of each column in the data.\n- Spread of the data is better understood by the distribution plot. \n- Grannular level analysis of each column.","ff71876b":"#### 3.3.1 Dealing with missing Values:"}}