{"cell_type":{"0be4b1b5":"code","d6d2ccb4":"code","e27b3150":"code","d89095a8":"code","b06fdc57":"code","43634da8":"code","2f700900":"code","d7662e3d":"code","779021e9":"code","4efb8c3f":"code","094c3fc2":"code","afd3281b":"code","0b091925":"code","136114e6":"code","9331c379":"code","42a217cb":"code","2da43127":"code","3f4ea771":"code","4232b4b5":"code","f4e95143":"code","49c178d6":"code","eb75d102":"code","bbf84aab":"code","7a226829":"code","6c9e48eb":"code","af1e200a":"code","3aeefc4b":"code","e8d2c0fb":"code","3864a20d":"code","bc0d4dc4":"code","d9f9e708":"code","fd9988a6":"code","37dd35c8":"code","9a422673":"code","0d10120b":"markdown","ff425b64":"markdown","71c67a43":"markdown","87991a3e":"markdown","005e065c":"markdown","101a25a8":"markdown","9e3370c6":"markdown","53117309":"markdown","b8e66033":"markdown","f2ba4eb7":"markdown","39ee945e":"markdown"},"source":{"0be4b1b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6d2ccb4":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nimport keras\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Activation,Flatten\nfrom keras.layers import Conv2D,MaxPooling2D\n\n","e27b3150":"# Load the data\ntraindf = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntestdf = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","d89095a8":"traindf.head()","b06fdc57":"testdf.head()","43634da8":"traindf.info()\ntestdf.info()","2f700900":"traindf.shape,testdf.shape\n","d7662e3d":"traindf.isnull().sum()","779021e9":"traindf.isnull().any().describe()","4efb8c3f":"testdf.isnull().any().describe()","094c3fc2":"X_train=traindf.drop(labels=['label'],axis=1)\ny_train=traindf['label']\n","afd3281b":"X_train.shape,y_train.shape","0b091925":"X = X_train.values\ny = y_train.values","136114e6":"# Normalize the data\nX_train = X_train \/ 255.0\ntestdf = testdf \/ 255.0","9331c379":"# Reshape image in 3 dimensions \nX_train=X_train.values.reshape(X_train.shape[0], 28, 28, 1)\n#testdf = testdf.values.reshape(testdf.shape[0],28,28,1)","42a217cb":"fig,ax=plt.subplots(1,6,figsize=(22,6))\n#fig.tight_layout()\n\nfor i in range(6):\n    ax[i].imshow(X[i].reshape(28,28))\n    #ax[i].axis('off')\n    ax[i].set_title('digit : {}'.format(y[i]))\nplt.show()    ","2da43127":"\n# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\ny_train = to_categorical(y_train, num_classes = 10)\n","3f4ea771":"fig,ax=plt.subplots(1,6,figsize=(22,6))\n#fig.tight_layout()\n\nfor i in range(6):\n    ax[i].imshow(X[i].reshape(28,28),\"binary\")\n    #ax[i].axis('off')\n    ax[i].set_title('digit : {}'.format(y[i]))\nplt.show()    ","4232b4b5":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.1, random_state=4)","f4e95143":"X_train.shape, X_val.shape, y_train.shape, y_val.shape","49c178d6":"# model architecture\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), padding='same',\n                 input_shape=(28,28,1)))\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))\n\n# summary\nmodel.summary()","eb75d102":"model.compile(loss='categorical_crossentropy',optimizer='sgd', metrics=['accuracy'])","bbf84aab":"history=model.fit(X_train, y_train,\n          batch_size=16,\n          epochs=20,\n          verbose=1,\n          validation_data=(X_val, y_val))\n","7a226829":"# Plot the graph for train and validation accuracy & loss\n\nplt.figure()\nfig,(ax1, ax2)=plt.subplots(1,2,figsize=(19,7))\nax1.plot(history.history['loss'])\nax1.plot(history.history['val_loss'])\nax1.legend(['training','validation'])\nax1.set_title('loss')\nax1.set_xlabel('epoch')\n\nax2.plot(history.history['accuracy'])\nax2.plot(history.history['val_accuracy'])\nax2.legend(['training','validation'])\nax2.set_title('Accuracy')\nax2.set_xlabel('epoch')","6c9e48eb":"score =model.evaluate(X_val,y_val,verbose=0)\nprint('Val Score:',score[0])\nprint('Val Accuracy:',score[1])","af1e200a":"# Predict the values from the validation dataset\ny_pred = model.predict(X_val)","3aeefc4b":"# Convert predictions classes to one hot vectors \ny_pred_label = np.argmax(y_pred,axis = 1)","e8d2c0fb":"# Convert validation observations to one hot vectors\ny_true = np.argmax(y_val,axis = 1) ","3864a20d":"# Errors are difference between predicted labels and true labels\nerrors = (y_pred_label - y_true != 0)","bc0d4dc4":"\ny_pred_label_errors = y_pred_label[errors]\ny_pred_errors = y_pred[errors]\ny_true_errors = y_true[errors]\nX_val_errors = X_val[errors]","d9f9e708":"def show_errors(errors_idx,error_img,pred_errors, obsv_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    fig,ax=plt.subplots(1,6,figsize=(22,6),sharex=True,sharey=True)\n    for i in range(6):\n        error = errors_idx[n]\n        ax[i].imshow((error_img[error]).reshape((28,28)))\n        ax[i].set_title(\"\\nPredicted label :{}\\nTrue label :{}\".format(pred_errors[error],obsv_errors[error]))\n        n += 1    \n    \n# Probabilities of the wrong predicted numbers\ny_pred_errors_prob = np.max(y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(y_pred_errors, y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndiff_pred_true_errors = y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the difference prob errors\nsorted_errors = np.argsort(diff_pred_true_errors)\n\n# Top 6 errors \nimportant_errors = sorted_errors[-6:]\n\n# Show the top 6 errors\nshow_errors(important_errors, X_val_errors, y_pred_label_errors, y_true_errors)","fd9988a6":"testdf=testdf.values.reshape(testdf.shape[0], 28, 28, 1)","37dd35c8":"test_pred = pd.DataFrame(model.predict(testdf, batch_size=64))\ntest_pred = pd.DataFrame(test_pred.idxmax(axis = 1))\ntest_pred.index.name = 'ImageId'\ntest_pred = test_pred.rename(columns = {0: 'Label'}).reset_index()\ntest_pred['ImageId'] = test_pred['ImageId'] + 1\n\ntest_pred.head()","9a422673":"# save results\n\ntest_pred.to_csv('digit_submission.csv', index=False)","0d10120b":"** Splitting Dataset into train and Validation sets for training**","ff425b64":"**## From the above graph we can seen that some label predicted as false...eg: True label 7 is predicted as 2, 4 as 9, 3 as 9, 4 as 2, 8 as 2, 3 as 2 **","71c67a43":"**plotting Grayscale(binary)images**","87991a3e":"# Plotting graph to check datasets","005e065c":"This notebook gives a result of around 99%, with some randomness depending on weight initialization and test\/train data split.","101a25a8":"**Creating X_train and Y_train**","9e3370c6":"# CNN Model","53117309":"**Checking Null Values**","b8e66033":"# **Normalisation**","f2ba4eb7":"# Evaluate the model","39ee945e":"There is no missing values in train and test dataset"}}