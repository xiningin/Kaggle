{"cell_type":{"dfbeabb9":"code","381b3bd9":"code","089be358":"code","34c039d4":"code","3af94b01":"code","363b5855":"code","92cd2fc8":"code","64ce7664":"code","0f479a0a":"code","f24e7e21":"code","adb07ff4":"code","7e7d0775":"code","794af917":"code","40de8fc6":"markdown","d81219ba":"markdown"},"source":{"dfbeabb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport geopandas as gpd\nimport matplotlib.pyplot as plt \nfrom shapely.geometry import Point\nimport plotly.express as px\nfrom geopandas import GeoDataFrame\nimport missingno","381b3bd9":"# load data\ndata = pd.read_csv(\"..\/input\/meteorite-landings\/meteorite-landings.csv\")\ndata.head()","089be358":"missingno.matrix(data)","34c039d4":"data.info()","3af94b01":"# drop any row that has a null values\ndata.dropna(inplace=True)\nmissingno.matrix(data)","363b5855":"data.describe()['mass']","92cd2fc8":"# Group nbr of meteorite falls by year and sort them accordingly\ngrouped_years_df = data.groupby(['year'])\nnumberMets_years = grouped_years_df.size()\nnumberMets_years.sort_values().plot.area()","64ce7664":"# Calculate the mass of total falled meteorites for each year \ndata[\"mass\"] = data[\"mass\"].replace('',np.nan).astype(float)\ngrouped_years_df = data.groupby(['year'])['mass'].sum()\n#data.groupby(['year'])['mass'].head()\ngrouped_years_df.sort_values()","0f479a0a":"len(data.recclass.unique())","f24e7e21":"# Load your application data with Pandas\n# Convert it to a GeoDataFrame by transforming the Latitude\/Longitude coordinates \ndata['reclong'] = pd.to_numeric(data['reclong'],errors='coerce')\ndata['reclat'] =  pd.to_numeric(data['reclat'],errors='coerce')\nloc_crs = {'init': 'epsg:4326'}\nloc_geom = [Point(xy) for xy in zip(data['reclong'], data['reclat'])]\ngeo_df = gpd.GeoDataFrame(data, crs=loc_crs, geometry=loc_geom)\n\n# Plot the GeoDataFrame\nplt.figure(figsize=(20,17))\ngeo_df.plot()","adb07ff4":"fig, ax = plt.subplots(figsize=(10,10))\n# Plot the base map\ngeo_df.plot(ax=ax, color='lightgrey', zorder=1)\n# Overlay the data locations\ngeo_df.plot(ax=ax, alpha=0.5, zorder=2)","7e7d0775":"#this is a simple map that goes with geopandas\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ngeo_df.plot(ax=world.plot(figsize=(20, 10)), marker='x', color='red', markersize=15)","794af917":"fig = px.scatter_geo(data,lat='reclat',lon='reclong', hover_name=\"id\", labels='recclass')\nfig.update_layout(title = 'World map', title_x=0.5)\nfig.show()","40de8fc6":"**More falls where marked around the years 1990 - 2000**","d81219ba":"**Null values are present at: mass, reclat,reclong, GeoLoc and year columns**"}}