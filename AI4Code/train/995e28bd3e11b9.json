{"cell_type":{"3b46eda4":"code","a7b0c764":"code","51af733e":"code","88a65907":"code","8598925b":"code","b6d36f86":"code","7b9622db":"code","e2bf973b":"code","babd4807":"code","0220ad66":"code","39bd1d29":"code","e62f35ee":"code","63d38b15":"code","b69cfa03":"code","86c47f66":"code","b7def4cd":"code","dcbc08ad":"code","73704c85":"code","0ef8727b":"code","d6c5ddb5":"code","b257ebdd":"code","9fd9427f":"code","0d174133":"code","0f7d2570":"code","b46f350d":"code","c54cbdf8":"code","4cbf2f64":"code","efc3dbe1":"code","ba34a02b":"code","e26ac70d":"code","05832cb2":"code","cbad4559":"code","8992576a":"code","e05388de":"code","4cebead4":"code","58827e41":"code","82d98959":"code","ce1f4c16":"code","da0308f7":"code","6ed2e125":"code","68b92c2c":"code","4ff1fda5":"code","e17842fc":"code","784878c8":"code","bfc95496":"code","00dfb1ac":"code","1eb9f245":"code","6207bb57":"code","0279c094":"code","fe2dbb87":"code","01b29c81":"code","a3851f66":"markdown","ee4958a9":"markdown","02879cee":"markdown","2b20bf9c":"markdown","667710b6":"markdown"},"source":{"3b46eda4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7b0c764":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split","51af733e":"# Parameters: { n_samples -> rows , n_features -> columns (default => 20) , n_classes -> output class , weights -> for Balancing dataset}\nX, y = make_classification(n_samples=2000, n_classes=2, weights=[1,1], random_state=1)","88a65907":"X.shape","8598925b":"y","b6d36f86":"X_train,X_test,y_train,y_test = train_test_split(X, y, test_size=0.3, random_state=1)","7b9622db":"from sklearn.metrics import roc_curve","e2bf973b":"from sklearn.metrics import roc_auc_score","babd4807":"from sklearn.ensemble import RandomForestClassifier","0220ad66":"rf_model = RandomForestClassifier()","39bd1d29":"rf_model.fit(X_train, y_train)","e62f35ee":"ytrain_pred = rf_model.predict_proba(X_train)","63d38b15":"print('RF train roc-auc: {}'.format(roc_auc_score(y_train, ytrain_pred[:,1])))","b69cfa03":"ytest_pred = rf_model.predict_proba(X_test)","86c47f66":"print('RF test roc-auc: {}'.format(roc_auc_score(y_test, ytest_pred[:,1])))","b7def4cd":"ytrain_pred","dcbc08ad":"from sklearn.linear_model import LogisticRegression","73704c85":"log_classifier=LogisticRegression()","0ef8727b":"log_classifier.fit(X_train, y_train)","d6c5ddb5":"ytrain_pred = log_classifier.predict_proba(X_train)","b257ebdd":"print('Logistic train roc-auc: {}'.format(roc_auc_score(y_train, ytrain_pred[:,1])))","9fd9427f":"ytest_pred = log_classifier.predict_proba(X_test)","0d174133":"print('Logistic test roc-auc: {}'.format(roc_auc_score(y_test, ytest_pred[:,1])))","0f7d2570":"from sklearn.ensemble import AdaBoostClassifier","b46f350d":"ada_classifier=AdaBoostClassifier()","c54cbdf8":"ada_classifier.fit(X_train, y_train)","4cbf2f64":"ytrain_pred = ada_classifier.predict_proba(X_train)","efc3dbe1":"print('Adaboost train roc-auc: {}'.format(roc_auc_score(y_train, ytrain_pred[:,1])))","ba34a02b":"ytest_pred = ada_classifier.predict_proba(X_test)","e26ac70d":"print('Adaboost test roc-auc: {}'.format(roc_auc_score(y_test, ytest_pred[:,1])))","05832cb2":"from sklearn.neighbors import KNeighborsClassifier","cbad4559":"knn_classifier=KNeighborsClassifier()","8992576a":"knn_classifier.fit(X_train, y_train)","e05388de":"ytrain_pred = knn_classifier.predict_proba(X_train)","4cebead4":"print('KNN train roc-auc: {}'.format(roc_auc_score(y_train, ytrain_pred[:,1])))","58827e41":"ytest_pred = knn_classifier.predict_proba(X_test)","82d98959":"print('KNN test roc-auc: {}'.format(roc_auc_score(y_test, ytest_pred[:,1])))","ce1f4c16":"pred=[]","da0308f7":"for model in [rf_model,log_classifier,ada_classifier,knn_classifier]:\n    pred.append(pd.Series(model.predict_proba(X_test)[:,1]))\nfinal_prediction=pd.concat(pred,axis=1).mean(axis=1)","6ed2e125":"print('Ensemble test roc-auc: {}'.format(roc_auc_score(y_test,final_prediction)))","68b92c2c":"pd.concat(pred,axis=1)","4ff1fda5":"final_prediction","e17842fc":"fpr, tpr, thresholds = roc_curve(y_test, final_prediction)","784878c8":"thresholds","bfc95496":"from sklearn.metrics import accuracy_score\naccuracy_ls = []\nfor thres in thresholds:\n    y_pred = np.where(final_prediction > thres,1,0)\n    accuracy_ls.append(accuracy_score(y_test, y_pred, normalize=True))","00dfb1ac":"accuracy_ls = pd.concat([pd.Series(thresholds), pd.Series(accuracy_ls)],axis=1)","1eb9f245":"accuracy_ls.columns = ['thresholds', 'accuracy']","6207bb57":"accuracy_ls.sort_values(by='accuracy', ascending=False, inplace=True)","0279c094":"accuracy_ls.head()","fe2dbb87":"def plot_roc_curve(fpr, tpr):\n    plt.plot(fpr, tpr, color='green', label='ROC')\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","01b29c81":"plot_roc_curve(fpr,tpr)","a3851f66":"# RANDOM FORESTS:","ee4958a9":"# SELECTING THE BEST THRESHOLD FOR MAXIMUM ACCURACY:","02879cee":"# LOGISTIC REGRESSION:","2b20bf9c":"# KNN CLASSIFIER :","667710b6":"# ADABOOST CLASSIFIER:"}}