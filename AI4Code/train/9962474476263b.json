{"cell_type":{"b8779dcc":"code","a86cbf2e":"code","743faee5":"code","2f67678a":"code","06a6559d":"code","896cde44":"code","14ef9b78":"code","1f531884":"code","1b6a63ba":"code","08c23a64":"code","c4876ec7":"code","8189196b":"code","0a335107":"code","c1a0dc86":"code","b77755d1":"markdown","3e3cefc6":"markdown","4a96622b":"markdown","66a8e732":"markdown","a1891b80":"markdown"},"source":{"b8779dcc":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\ndf.head()","a86cbf2e":"df.describe()","743faee5":"df.info()","2f67678a":"# Deleting useless data, that don't have enough non-null values to be valuable to the model\n\ndel df[\"Alley\"]\ndel df[\"FireplaceQu\"]\ndel df[\"PoolQC\"]\ndel df[\"Fence\"]\ndel df[\"MiscFeature\"]","06a6559d":"# Replacing values with the mean function where int and float should take place\n\ndf = df.fillna(df.mean())","896cde44":"# List of values containing further null values(with the type of object)\n\ntempList = df.columns[df.isna().any()].tolist()\ntempList","14ef9b78":"intList = df.columns[df.dtypes == np.int64].tolist()\nfloatList = df.columns[df.dtypes == np.float64].tolist()\nnumericList = intList + floatList\n\ni = 0\n\nfor col in numericList:\n    sns.lmplot(x=col, y='SalePrice', data=df, order=2, ci=None, scatter_kws={\"s\": 80}, line_kws={'color': 'red'})\n    plt.show()\n    i += 1","1f531884":"# There is a significant influence, that the values have on the final price\n# But these values need to be sorted and changed for their full potential  \n\ntempList = df.columns[df.dtypes == np.object].tolist()\nfor column in tempList:\n    sns.barplot(x=df[column], y=df['SalePrice'])\n    plt.show()","1b6a63ba":"# Sorting algorithm to show the code for making object values to numeric\n# These will be executed in the next cell\n\ndef objectToInt(df, col):\n    uniques = df[col].unique()\n    valuesWithMean = {}\n    for value in uniques:\n        tempMean = df[df[col]==value].SalePrice.mean()\n        if(type(value) == str):\n            valuesWithMean[value] = tempMean\n    i = 0\n    for index in valuesWithMean:\n        valuesWithMean[index] = i\n        i += 1\n    print(\"conversion =\", dict(sorted(valuesWithMean.items(), key=lambda item: item[1])))\n    print(f\"df.{col} = df.{col}.map(conversion)\")\n\nfor col in tempList:\n    objectToInt(df, col)","08c23a64":"def conversionToNumeric(df):\n    conversion = {'RL': 0, 'RM': 1, 'C (all)': 2, 'FV': 3, 'RH': 4}\n    df.MSZoning = df.MSZoning.map(conversion)\n    conversion = {'Pave': 0, 'Grvl': 1}\n    df.Street = df.Street.map(conversion)\n    conversion = {'Reg': 0, 'IR1': 1, 'IR2': 2, 'IR3': 3}\n    df.LotShape = df.LotShape.map(conversion)\n    conversion = {'Lvl': 0, 'Bnk': 1, 'Low': 2, 'HLS': 3}\n    df.LandContour = df.LandContour.map(conversion)\n    conversion = {'AllPub': 0, 'NoSeWa': 1}\n    df.Utilities = df.Utilities.map(conversion)\n    conversion = {'Inside': 0, 'FR2': 1, 'Corner': 2, 'CulDSac': 3, 'FR3': 4}\n    df.LotConfig = df.LotConfig.map(conversion)\n    conversion = {'Gtl': 0, 'Mod': 1, 'Sev': 2}\n    df.LandSlope = df.LandSlope.map(conversion)\n    conversion = {'CollgCr': 0, 'Veenker': 1, 'Crawfor': 2, 'NoRidge': 3, 'Mitchel': 4, 'Somerst': 5, 'NWAmes': 6, 'OldTown': 7, 'BrkSide': 8, 'Sawyer': 9, 'NridgHt': 10, 'NAmes': 11, 'SawyerW': 12, 'IDOTRR': 13, 'MeadowV': 14, 'Edwards': 15, 'Timber': 16, 'Gilbert': 17, 'StoneBr': 18, 'ClearCr': 19, 'NPkVill': 20, 'Blmngtn': 21, 'BrDale': 22, 'SWISU': 23, 'Blueste': 24}\n    df.Neighborhood = df.Neighborhood.map(conversion)\n    conversion = {'Norm': 0, 'Feedr': 1, 'PosN': 2, 'Artery': 3, 'RRAe': 4, 'RRNn': 5, 'RRAn': 6, 'PosA': 7, 'RRNe': 8}\n    df.Condition1 = df.Condition1.map(conversion)\n    conversion = {'Norm': 0, 'Artery': 1, 'RRNn': 2, 'Feedr': 3, 'PosN': 4, 'PosA': 5, 'RRAn': 6, 'RRAe': 7}\n    df.Condition2 = df.Condition2.map(conversion)\n    conversion = {'1Fam': 0, '2fmCon': 1, 'Duplex': 2, 'TwnhsE': 3, 'Twnhs': 4}\n    df.BldgType = df.BldgType.map(conversion)\n    conversion = {'2Story': 0, '1Story': 1, '1.5Fin': 2, '1.5Unf': 3, 'SFoyer': 4, 'SLvl': 5, '2.5Unf': 6, '2.5Fin': 7}\n    df.HouseStyle = df.HouseStyle.map(conversion)\n    conversion = {'Gable': 0, 'Hip': 1, 'Gambrel': 2, 'Mansard': 3, 'Flat': 4, 'Shed': 5}\n    df.RoofStyle = df.RoofStyle.map(conversion)\n    conversion = {'CompShg': 0, 'WdShngl': 1, 'Metal': 2, 'WdShake': 3, 'Membran': 4, 'Tar&Grv': 5, 'Roll': 6, 'ClyTile': 7}\n    df.RoofMatl = df.RoofMatl.map(conversion)\n    conversion = {'VinylSd': 0, 'MetalSd': 1, 'Wd Sdng': 2, 'HdBoard': 3, 'BrkFace': 4, 'WdShing': 5, 'CemntBd': 6, 'Plywood': 7, 'AsbShng': 8, 'Stucco': 9, 'BrkComm': 10, 'AsphShn': 11, 'Stone': 12, 'ImStucc': 13, 'CBlock': 14}\n    df.Exterior1st = df.Exterior1st.map(conversion)\n    conversion = {'VinylSd': 0, 'MetalSd': 1, 'Wd Shng': 2, 'HdBoard': 3, 'Plywood': 4, 'Wd Sdng': 5, 'CmentBd': 6, 'BrkFace': 7, 'Stucco': 8, 'AsbShng': 9, 'Brk Cmn': 10, 'ImStucc': 11, 'AsphShn': 12, 'Stone': 13, 'Other': 14, 'CBlock': 15}\n    df.Exterior2nd = df.Exterior2nd.map(conversion)\n    conversion = {'BrkFace': 0, 'None': 1, 'Stone': 2, 'BrkCmn': 3}\n    df.MasVnrType = df.MasVnrType.map(conversion)\n    conversion = {'Gd': 0, 'TA': 1, 'Ex': 2, 'Fa': 3}\n    df.ExterQual = df.ExterQual.map(conversion)\n    conversion = {'TA': 0, 'Gd': 1, 'Fa': 2, 'Po': 3, 'Ex': 4}\n    df.ExterCond = df.ExterCond.map(conversion)\n    conversion = {'PConc': 0, 'CBlock': 1, 'BrkTil': 2, 'Wood': 3, 'Slab': 4, 'Stone': 5}\n    df.Foundation = df.Foundation.map(conversion)\n    conversion = {'Gd': 0, 'TA': 1, 'Ex': 2, 'Fa': 3}\n    df.BsmtQual = df.BsmtQual.map(conversion)\n    conversion = {'TA': 0, 'Gd': 1, 'Fa': 2, 'Po': 3}\n    df.BsmtCond = df.BsmtCond.map(conversion)\n    conversion = {'No': 0, 'Gd': 1, 'Mn': 2, 'Av': 3}\n    df.BsmtExposure = df.BsmtExposure.map(conversion)\n    conversion = {'GLQ': 0, 'ALQ': 1, 'Unf': 2, 'Rec': 3, 'BLQ': 4, 'LwQ': 5}\n    df.BsmtFinType1 = df.BsmtFinType1.map(conversion)\n    conversion = {'Unf': 0, 'BLQ': 1, 'ALQ': 2, 'Rec': 3, 'LwQ': 4, 'GLQ': 5}\n    df.BsmtFinType2 = df.BsmtFinType2.map(conversion)\n    conversion = {'GasA': 0, 'GasW': 1, 'Grav': 2, 'Wall': 3, 'OthW': 4, 'Floor': 5}\n    df.Heating = df.Heating.map(conversion)\n    conversion = {'Ex': 0, 'Gd': 1, 'TA': 2, 'Fa': 3, 'Po': 4}\n    df.HeatingQC = df.HeatingQC.map(conversion)\n    conversion = {'Y': 0, 'N': 1}\n    df.CentralAir = df.CentralAir.map(conversion)\n    conversion = {'SBrkr': 0, 'FuseF': 1, 'FuseA': 2, 'FuseP': 3, 'Mix': 4}\n    df.Electrical = df.Electrical.map(conversion)\n    conversion = {'Gd': 0, 'TA': 1, 'Ex': 2, 'Fa': 3}\n    df.KitchenQual = df.KitchenQual.map(conversion)\n    conversion = {'Typ': 0, 'Min1': 1, 'Maj1': 2, 'Min2': 3, 'Mod': 4, 'Maj2': 5, 'Sev': 6}\n    df.Functional = df.Functional.map(conversion)\n    conversion = {'Attchd': 0, 'Detchd': 1, 'BuiltIn': 2, 'CarPort': 3, 'Basment': 4, '2Types': 5}\n    df.GarageType = df.GarageType.map(conversion)\n    conversion = {'RFn': 0, 'Unf': 1, 'Fin': 2}\n    df.GarageFinish = df.GarageFinish.map(conversion)\n    conversion = {'TA': 0, 'Fa': 1, 'Gd': 2, 'Ex': 3, 'Po': 4}\n    df.GarageQual = df.GarageQual.map(conversion)\n    conversion = {'TA': 0, 'Fa': 1, 'Gd': 2, 'Po': 3, 'Ex': 4}\n    df.GarageCond = df.GarageCond.map(conversion)\n    conversion = {'Y': 0, 'N': 1, 'P': 2}\n    df.PavedDrive = df.PavedDrive.map(conversion)\n    conversion = {'WD': 0, 'New': 1, 'COD': 2, 'ConLD': 3, 'ConLI': 4, 'CWD': 5, 'ConLw': 6, 'Con': 7, 'Oth': 8}\n    df.SaleType = df.SaleType.map(conversion)\n    conversion = {'Normal': 0, 'Abnorml': 1, 'Partial': 2, 'AdjLand': 3, 'Alloca': 4, 'Family': 5}\n    df.SaleCondition = df.SaleCondition.map(conversion)\n    return df\n\ndf = conversionToNumeric(df)\ndf = df.fillna(df.mean())\n","c4876ec7":"from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(df)\n\ny_train = train['SalePrice']\nX_train = train.drop(['Id', 'SalePrice'], axis=1)\n\ny_test = test['SalePrice']\nX_test = test.drop(['Id', 'SalePrice'], axis=1)\n\n\nreg=GradientBoostingRegressor()\nreg.fit(X_train,y_train)\n\nprediction = reg.predict(X_test)\n\nsns.scatterplot(x=prediction, y=y_test)\n\nreg.score(X_test, y_test)","8189196b":"print(df.info())\nprint(X_test.info())","0a335107":"train = df\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\ny_train = train.SalePrice\nX_train = train.drop(['Id', 'SalePrice'], axis=1)\n\nX_test = test.drop(['Id'], axis=1)\n\ndel X_test[\"Alley\"]\ndel X_test[\"FireplaceQu\"]\ndel X_test[\"PoolQC\"]\ndel X_test[\"Fence\"]\ndel X_test[\"MiscFeature\"]\n\nX_test = conversionToNumeric(X_test)\nX_test = X_test.fillna(X_test.mean())\n\nreg.fit(X_train, y_train)\n\npredictions = reg.predict(X_test)\npredictions","c1a0dc86":"results = pd.DataFrame({'Id': test.Id, 'SalePrice': predictions})\n#results.to_csv(r'Results.csv', index=False)","b77755d1":"# Building a ML model","3e3cefc6":"# Data cleaning","4a96622b":"# Converting the results to a CSV file","66a8e732":"# Analytics","a1891b80":"# Preparing data for ML "}}