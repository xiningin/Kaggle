{"cell_type":{"5ee7d860":"code","aee6f278":"code","83c6d4e7":"code","b2d9bb9c":"code","4860936c":"code","a11daaf8":"code","3bf8f827":"code","659b7a53":"code","13f21824":"code","d6777a69":"code","ab0e5baf":"code","9a3620e9":"code","505c604b":"code","2bed431c":"code","7e2e89cb":"code","c53c6296":"code","58849318":"code","1d9ab11d":"code","fd089d38":"code","0bce1e4e":"code","b2bb763c":"code","92e3aa33":"code","9867bb77":"code","bc5c72c8":"code","101ab921":"code","6e53efb1":"code","7491e609":"code","e71418b8":"code","318763ca":"code","bf8ac1dc":"code","7c496f1b":"code","ae4dd6ca":"code","8734bebd":"code","17e2020b":"code","cabe7e79":"code","3938faf4":"code","864b8457":"code","9ba26041":"code","af542eb3":"code","ddc7d5e8":"code","0bd8a528":"code","56cb6d5c":"code","7039e5e2":"code","1a22c3e3":"code","31f6b613":"code","1ab2e553":"code","a2f48257":"code","84907b51":"code","beedcf00":"code","7cd029ca":"code","a1a61018":"code","3849ce97":"code","fc08741a":"code","70b81ba6":"code","5428060a":"code","c0171f31":"code","d9efe00c":"code","a69ead63":"code","9a74911f":"code","4e9e8a0a":"code","789aecac":"code","c770a702":"code","0ce8100f":"code","106cec2e":"code","4d10dc13":"code","a07e6a5a":"code","d9078c47":"markdown","b3ad4f2f":"markdown","9c59a252":"markdown","86756c15":"markdown","d10e5a4e":"markdown","785b2002":"markdown","79199717":"markdown","54876c1c":"markdown","df02af5f":"markdown","8ec7834f":"markdown","d3f15a51":"markdown","38242431":"markdown","bf561a7c":"markdown","dc554d12":"markdown","2015b229":"markdown","e10de810":"markdown","f6d42424":"markdown","f41ef6d9":"markdown","8349a3f7":"markdown","4a3bd76b":"markdown","e19da10b":"markdown","40ae8c10":"markdown","e623140b":"markdown"},"source":{"5ee7d860":"import pandas as pd\nfrom pandas import Series\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport statsmodels.api as sm\n%matplotlib inline\nfrom scipy.interpolate import interp1d\n\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, confusion_matrix\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","aee6f278":"bakery_temp = pd.read_pickle('..\/input\/bakery-temperature-summary\/bakery_temp_sum_dataframe.pkl')","83c6d4e7":"bakery_temp.info()","b2d9bb9c":"bakery_temp.head(2)","4860936c":"list_of_event = ['2016-11-05','2016-11-12','2017-01-28','2017-02-04','2017-02-18','2017-03-04']\nis_bank_holiday = ['2016-12-25','2016-12-26','2017-01-01','2017-01-02']","a11daaf8":"dates = pd.DatetimeIndex(bakery_temp['Date_Time'])","3bf8f827":"#Create new dataset with only item and date \nbakery = pd.DataFrame(bakery_temp.Item.values, columns=['Item'], index=dates)","659b7a53":"bakery.head(5)","13f21824":"bakery_daily = bakery.resample('D').count()","d6777a69":"bakery_daily.head(5)","ab0e5baf":"bakery_daily['is_local_event'] = np.where(bakery_daily.index.isin(list_of_event),1,0)\nbakery_daily['is_bank_holiday'] = np.where(bakery_daily.index.isin(is_bank_holiday),1,0)","9a3620e9":"bakery_daily['is_local_event'].sum()","505c604b":"bakery_daily['is_bank_holiday'].sum()","2bed431c":"bakery_daily.Item.plot()","7e2e89cb":"bakery_daily.boxplot()","c53c6296":"bakery_daily.describe()","58849318":"bakery_daily[bakery_daily['Item'] == 1]","1d9ab11d":"bakery_daily.loc[bakery_daily['Item'] == 1, 'Item'] = 0","fd089d38":"bakery_daily[bakery_daily['Item'] == 1]","0bce1e4e":"bakery_daily['Item'].hist()","b2bb763c":"decomposition = sm.tsa.seasonal_decompose(bakery_daily,model=\"additive\")\n\nfig, ax = plt.subplots()\nax.grid(True)\n\nyear = mdates.YearLocator(month=1)\nmonth = mdates.MonthLocator(interval=1)\n\nyear_format = mdates.DateFormatter('%Y')\nmonth_format = mdates.DateFormatter('%Y-%m')\n\nax.xaxis.set_minor_locator(month)\nax.xaxis.grid(True, which = 'minor')\nax.xaxis.set_major_locator(month)\nax.xaxis.set_major_formatter(month_format)\n\nplt.plot(bakery_daily.index, bakery_daily['Item'], c='blue')\nplt.plot(decomposition.trend.index, decomposition.trend, c='red')","92e3aa33":"bakery_daily['Date'] = bakery_daily.index","9867bb77":"bakery_daily['Week_Day'] = bakery_daily.Date.dt.day_name()","bc5c72c8":"bakery_daily.head(2)","101ab921":"#train-test-split, fitting-model, testing definition\ndef fit_linear_model(X, y, day, model_inst):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42,shuffle=True)\n    result_list = []\n\n    model_inst.fit(X_train, y_train)\n    \n    y_pred = model_inst.predict(X_train)\n    \n    MAE = metrics.mean_absolute_error(y_train, y_pred)\n    RMSE =np.sqrt(metrics.mean_squared_error(y_train, y_pred))\n\n    result_list= [day, MAE, RMSE, model_inst.intercept_, model_inst, model_inst.coef_]\n    return result_list\n","6e53efb1":"# list containing the days of the week\ndays_of_the_week = ['Week_Day_Monday','Week_Day_Tuesday','Week_Day_Wednesday','Week_Day_Thursday','Week_Day_Friday', 'Week_Day_Saturday','Week_Day_Sunday']","7491e609":"#Creating dataframe to save resuls\ncolumns = ['Day','MAE','RMSE','Intercept','Model', 'Coef']\n\nresults_dropping_day = pd.DataFrame(index=range(21), columns=columns)\nmodel_list =[LinearRegression(), Ridge(), Lasso()]\n\nfor i, model_item in enumerate(model_list):\n    if i == 0:\n        n = 0\n    elif i == 1:\n        n = 7\n    else:\n        n = 14\n            \n            \n    for i, day in enumerate(days_of_the_week):\n        bakery_data_for_model_drop = pd.get_dummies(bakery_daily)\n        # set y\n        y = bakery_data_for_model_drop['Item']\n        del bakery_data_for_model_drop[day]\n        del bakery_data_for_model_drop['Item']\n        del bakery_data_for_model_drop['Date']\n\n        X = bakery_data_for_model_drop\n\n        results_dropping_day.loc[i + n] = fit_linear_model(X, y, day, model_item)\n","e71418b8":"#Linear regression results\nresults_dropping_day","318763ca":"bakery_data_for_model = pd.get_dummies(bakery_daily)","bf8ac1dc":"bakery_data_for_model.head(2)","7c496f1b":"del bakery_data_for_model['Week_Day_Wednesday']","ae4dd6ca":"bakery_data_for_model.head(2)","8734bebd":"bakery_data_for_model.to_pickle('bakery_data_for_model.pkl')","17e2020b":"bakery_data_for_model.columns","cabe7e79":"bakery_data_for_model['Item'].sort_values(ascending=True).head(5)","3938faf4":"X = bakery_data_for_model[['is_local_event','is_bank_holiday','Week_Day_Friday', 'Week_Day_Monday',\n       'Week_Day_Saturday', 'Week_Day_Sunday', 'Week_Day_Thursday',\n       'Week_Day_Tuesday']]\ny = bakery_data_for_model['Item']\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42,shuffle=True)\n\n#transform the targe to get a simplier relation, in this case is log(x + 1) becuase there are zeros in data\ny_train_log = np.log(y_train + 1)\ny_test_log =  np.log(y_test + 1)\n\nprint(len(X_train), len(X_test))\nprint(len(y_train), len(y_test))\n","864b8457":"# Setup our GridSearch Parmaters\nsearch_parameters = {\n    'fit_intercept':  [True, False], \n    'normalize':      [False, True]\n}\n\n# Intialize a blank model object\nlm = LinearRegression()\n\n# Initialize gridsearch\nestimator = GridSearchCV(\n    lm, # estimator\n    search_parameters, # hyper-parameter space to search \n    cv=5, # number of folds\n    scoring=\"neg_mean_squared_error\", # scoring metric to optimise for\n    return_train_score=True,\n    iid=True\n)\n\n# Fit some data\nresults = estimator.fit(X_train,y_train)\nprint (results.best_estimator_)","9ba26041":"testing = pd.DataFrame(results.cv_results_)","af542eb3":"testing","ddc7d5e8":"lr = LinearRegression(fit_intercept=True, normalize = False)\nlr_log = LinearRegression()\n\n#estimation the line\nlr.fit(X_train, y_train)\nlr_log.fit(X_train, y_train_log)","0bd8a528":"print(lr.intercept_, [z for z in zip(X.columns, lr.coef_)])","56cb6d5c":"y_pred = lr.predict(X_train)\ny_pred_log = lr_log.predict(X_train)","7039e5e2":"grid = GridSearchCV(estimator=Ridge(),\n                    param_grid={'alpha': np.logspace(-10,10, 20)},\n                    scoring='neg_mean_squared_error',\n                    return_train_score=True,\n                    cv=5, \n                   iid=True)\n\ngrid.fit(X_train,y_train)","1a22c3e3":"print(np.sqrt(-grid.best_score_), grid.best_params_)\n\nbest_model = grid.best_estimator_\nnp.sqrt(mean_squared_error(y_test, best_model.predict(X_test)))","31f6b613":"#really small alpha\ngrid.best_params_","1ab2e553":"ridge = Ridge(alpha=1e-10, normalize=False)\nridge.fit(X_train, y_train)\n\nprint(lr.coef_, np.sqrt(mean_squared_error(y_train, lr.predict(X_train))), \"\\n\")\nprint(ridge.coef_, np.sqrt(mean_squared_error(y_train, ridge.predict(X_train))))","a2f48257":"predictors = X_train.columns\n\ncoefRidge = Series(ridge.coef_,predictors).sort_values()\n\ncoefRidge.plot(kind='bar', title='Coeficient with Ridge', grid=True)","84907b51":"lasso = Lasso(normalize=False)\n\nlasso.fit(X_train, y_train)","beedcf00":"predictors = X_train.columns\n\ncoefLasso = Series(lasso.coef_,predictors).sort_values()\n\ncoefLasso.plot(kind='bar', title='Coeficient with Lasso', grid=True)","7cd029ca":"#Get the RMSE and score of all models in a dataframe\nRMSE_SCORES_results = pd.DataFrame(columns=['Model', 'Train_RMSE', 'Test_RMSE', 'Train_Score','Test_Score'], index=range(3))\nmodel_list = [lr,ridge,lasso]\ny_pred_mean_train = [y_train.mean()] * len(y_train)\ny_pred_mean_test = [y_test.mean()] * len(y_test)\n\nfor i, item in enumerate(model_list):\n    rmse_train = np.sqrt(mean_squared_error(y_train, item.predict(X_train)))\n    rmse_test = np.sqrt(mean_squared_error(y_test, item.predict(X_test)))\n    score_train = item.score(X_train, y_train)\n    score_test = item.score(X_test, y_test)\n    item_str = str(item)\n    RMSE_SCORES_results.loc[i] = [item_str[:6], rmse_train, rmse_test, score_train,score_test]\n\nRMSE_SCORES_results.loc[3] = ['Baseline',  np.sqrt(metrics.mean_squared_error(y_train, y_pred_mean_train)), np.sqrt(metrics.mean_squared_error(y_test, y_pred_mean_test)),0.0, 0.0]\n\nRMSE_SCORES_results.index = RMSE_SCORES_results.Model","a1a61018":"RMSE_SCORES_results","3849ce97":"fig, axes = plt.subplots(2, 2, figsize=(15,8), sharex=False, sharey=True, squeeze=False)\n\nfig.suptitle('RMSE and Score', fontsize=12)\nfig.text(0.06, 0.5, 'Total Item Sold', ha='center', va='center', rotation='vertical')\n#fig.text(0.5, 0.04, 'Hours', ha='center', va='center')\nRMSE_train_graph = RMSE_SCORES_results['Train_RMSE']\nRMSE_train_graph.plot(ax=axes[0][0], grid=True, kind='barh', title='RMSE for train')\n\nRMSE_test_graph = RMSE_SCORES_results['Test_RMSE']\nRMSE_test_graph.plot(ax=axes[0][1], grid=True, kind='barh', title='RMSE for test')\n\nscore_train_graph = RMSE_SCORES_results['Train_Score']\nscore_train_graph.plot(ax=axes[1][0], grid=True, kind='barh', title='Score for train')\n\nscore_test_graph = RMSE_SCORES_results['Test_Score']\nscore_test_graph.plot(ax=axes[1][1], grid=True, kind='barh', title='Score for test')\n\n#plt.xticks(rotation=45)\n#RMSE_SCORES_results['Train_RMSE'].plot(kind='bar')","fc08741a":"def cross_validation_test(model_name, x_data, y_data, scoring_name, n):\n    cv_scores = cross_val_score(model_name, x_data, y_data, scoring=scoring_name, cv=n)\n    return np.sqrt(-cv_scores), np.sqrt(-cv_scores.mean())","70b81ba6":"RMSE_SCORES_results = pd.DataFrame(columns=['Model', 'RMSE', 'Average RMSE'], index=range(2))\nmodel_list = [lr,ridge,lasso]\nprint('Training set')            \nfor item in model_list:\n    model_string = str(item)\n    print('Results for ' + model_string[:10])\n    print(cross_validation_test(item,  X, y, 'neg_mean_squared_error', 5))\n                                            ","5428060a":"results_pred_train = pd.DataFrame({'Actual': y_train, 'LR_Pred': lr.predict(X_train), 'LR_log_Pred': np.exp(lr_log.predict(X_train))-1, 'Lasso_Pred': lasso.predict(X_train), 'Ridge_Pred': ridge.predict(X_train)}) ","c0171f31":"results_pred_train.describe()","d9efe00c":"results_pred_train.boxplot()","a69ead63":"results_pred_train[['Actual', 'LR_Pred', 'Lasso_Pred', 'Ridge_Pred']].plot(figsize=(15,7), style={'Actual': '-or', 'LR_Pred': '-ob', 'Lasso_Pred': '-oy', 'Ridge_Pred': '-og'}, grid=True)","9a74911f":"results_pred_test = pd.DataFrame({'Actual': y_test, 'LR_Pred': lr.predict(X_test),'LR_log_Pred': np.exp(lr_log.predict(X_test))-1,'Lasso_Pred': lasso.predict(X_test), 'Ridge_Pred': ridge.predict(X_test)})  ","4e9e8a0a":"results_pred_test.boxplot()","789aecac":"results_pred_test[['Actual', 'LR_Pred', 'Lasso_Pred', 'Ridge_Pred']].plot(figsize=(15,7), style={'Actual': '-or', 'LR_Pred': '-ob', 'Lasso_Pred': '-oy', 'Ridge_Pred': '-og'}, grid=True)","c770a702":"results_pred_test.sort_index()","0ce8100f":"results_pred_test.describe()","106cec2e":"results_pred_test.sort_index().head(2)","4d10dc13":"results_pred_test.to_pickle('results_pred_test.pkl')","a07e6a5a":"results_pred_train.to_pickle('results_pred_train.pkl')","d9078c47":"### The main finding from EDA and after work on different models\n\n- The main feature will be a dummy variables extracted from Day_of_Week,as well as:\n- is_local_event, this will help predicting sales when local events are happening and\n- is_bank_holiday, this will capture bank holidays\n- After running model with Temperature it is concluded that temperature is not a good feature and therefore not going to be included\nLocal events data was taken from http:\/\/www.edinburghguide.com\/events\/","b3ad4f2f":"### Train and Test split","9c59a252":"### Dropping a day, in this case Wednesday","86756c15":"### Creating a loop dropping different day at a time to see if I get differnt results ","d10e5a4e":"### I have decided to remove the 1 sale of bread on the bank holiday as it was an exception","785b2002":"### Extract dates as we want then to be the index","79199717":"### Daily sales plus trend","54876c1c":"### Loading bakery dataframe from file","df02af5f":"### Comparing results","8ec7834f":"- All models have a little of a variance problem","d3f15a51":"### For Linear regression there is no difference in terms of RMSE to drop any day, it is the interpretacion that will change only","38242431":"### fiting a lasso","bf561a7c":"### Get the RMSE and scores for all models","dc554d12":"### This will create the binary features is_local_event and is_bank_holiday in our dataframe","2015b229":"### Let's run cross validation on all models","e10de810":"### Tuning the linear regression","f6d42424":"### Adding day of the week as dummies","f41ef6d9":"### Getting the best alpha to use in Ridge","8349a3f7":"### Resample dataframe in days","4a3bd76b":"### Fit the model","e19da10b":"We are getting negative sales for the bank holiday, not perfect models but in here it does not matter as we  know that that is not possible and at the same time is doing a good job predicting the rest. ","40ae8c10":"### List containing dates for local events and bank holidays","e623140b":"### Conclusion\nFor the purpose of predicting daily sales from a bakery the best model to use and the simplest is Linear Regression, it is not perfect specially when the sales are really high, but because we know that we could make adjustments. \n- Bank holiday sales are not negative there are zero\n- The model underestimates  sales for local events\n- For the rest the models makes good predictions"}}