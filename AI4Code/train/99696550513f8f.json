{"cell_type":{"ad2f4732":"code","376a34a1":"code","c905b825":"code","7c2a6e9a":"code","25105bba":"code","13f234cc":"code","7613816d":"code","7f40162d":"code","ba047caf":"code","6e3ee124":"code","60cb6a47":"code","81e89da7":"code","4ffcf03f":"code","584f071f":"code","120a21f2":"code","fc7d6efb":"code","1f2060a4":"code","f4508f16":"code","526dc2b0":"code","3bf3ca03":"code","1f2bb747":"code","086007b7":"code","21cca5ea":"code","789b95d9":"code","06436a7f":"code","197175aa":"code","6147c564":"code","d8e7b1df":"code","61ab3cf9":"code","d030d55c":"code","f7a6965f":"code","8029cb05":"code","6743148f":"code","7796c9ff":"code","cb79c6ff":"code","ff33c817":"code","ebfd3e22":"code","b20d5dbf":"code","fe08d8d0":"code","ff567c76":"code","a8212477":"code","7e029ec8":"code","a8d94c80":"code","23082c43":"code","33446d80":"code","c4501abc":"code","1723f165":"code","72e8b30f":"code","9b3f1076":"code","2a05d706":"code","7b4b5784":"code","c75e5be6":"code","4d078de7":"code","5ef948ac":"code","a6b80b7e":"code","f957460b":"code","17163d3c":"code","b8882950":"code","5c932925":"code","771fa1ce":"code","d72ce50c":"code","72c118aa":"code","b96ba05a":"code","543db76b":"code","b079733c":"markdown","2b30332f":"markdown","fee752bd":"markdown","3f5004c3":"markdown","ee2daa5a":"markdown","ec402a5e":"markdown","3d3cccef":"markdown","36151b99":"markdown","cf8ad653":"markdown","beaa33c8":"markdown","a8579135":"markdown","63cf7f66":"markdown","ed19ab94":"markdown","eaf6880d":"markdown","1626f019":"markdown","c439edd5":"markdown","23ba7e0a":"markdown","b86d8f1f":"markdown","1a17cdf7":"markdown","b1035f1b":"markdown","1a991373":"markdown","909e06f0":"markdown","1648ff3f":"markdown","03bb3c8f":"markdown","8e8c376e":"markdown","15ba22e2":"markdown","aca7ff76":"markdown","be81b90f":"markdown","131f6c7e":"markdown","20e0aff4":"markdown","cf458539":"markdown","c937958e":"markdown","3e4adfb5":"markdown","6df1bbac":"markdown","1fed1d1d":"markdown","b6a36796":"markdown","aded1bf7":"markdown","57b7db89":"markdown","70bc3ef3":"markdown","b91161b8":"markdown","502d9a70":"markdown","f4d26042":"markdown","fbc064e0":"markdown","c04a0268":"markdown","113db6f7":"markdown","143edba7":"markdown","b7880884":"markdown","b663ad50":"markdown","869d88d5":"markdown","5880a9ed":"markdown","7f5e8418":"markdown","41d6cc30":"markdown","ff8453a6":"markdown","415e0c57":"markdown","c3304af4":"markdown","76d3874b":"markdown","874b31b4":"markdown","2bf22252":"markdown","a58feeaa":"markdown","1dd897ee":"markdown","20d2d345":"markdown","1a08465a":"markdown","dd76a44a":"markdown","44514da3":"markdown"},"source":{"ad2f4732":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","376a34a1":"import math\nimport csv\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n\nfrom sklearn.model_selection import cross_validate, train_test_split, KFold, GridSearchCV, cross_val_score\nfrom sklearn.preprocessing import MinMaxScaler, OneHotEncoder, LabelEncoder, StandardScaler\nfrom sklearn import metrics\nfrom sklearn.impute import KNNImputer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\npd.set_option('display.float_format',lambda x : '%.4f' % x)\n\nimport warnings\nwarnings.filterwarnings('ignore')","c905b825":"# \u5bfc\u5165\u6570\u636e\u96c6\ntrain = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-training.csv',index_col=0)\ntest = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-test.csv',index_col=0)\ntrain","7c2a6e9a":"train.shape, test.shape","25105bba":"train.describe()","13f234cc":"sns.countplot('SeriousDlqin2yrs', data=train)","7613816d":"pd.DataFrame({'has NULL':train.isnull().any(axis=0), 'count':train.isnull().sum().values, 'ratio': round((train.isnull().mean()), 4)})","7f40162d":"pd.DataFrame({'has NULL':test.isnull().any(axis=0), 'count':test.isnull().sum().values, 'ratio': round((test.isnull().mean()), 4)})","ba047caf":"train[train['MonthlyIncome'].isnull()][['age','DebtRatio','NumberOfDependents']].describe()","6e3ee124":"train[train['MonthlyIncome'].notnull()][['age','MonthlyIncome','DebtRatio','NumberOfDependents']].describe()","60cb6a47":"test[test['MonthlyIncome'].notnull() & (test['DebtRatio']>1)][['age','MonthlyIncome','DebtRatio','NumberOfDependents']].describe()","81e89da7":"debt_ratio = np.arange(1,121,10)\nres = []\nfor debtratio in debt_ratio:\n    count = train[train['DebtRatio']>debtratio]['MonthlyIncome'].isnull().sum()\n    ratio = count\/train['MonthlyIncome'].isnull().sum()\n    res.append([count,ratio])\nres","4ffcf03f":"test[test['MonthlyIncome'].notnull() & (test['DebtRatio']>1)][['age','MonthlyIncome','DebtRatio','NumberOfDependents']].describe([0.2,0.4,0.6,0.8])","584f071f":"pd.DataFrame({'DebtRatio min-1': train[(train['DebtRatio']<=1) & (train['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 1-25': train[(train['DebtRatio']>1) & (train['DebtRatio']<26) & (train['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 26-123': train[(train['DebtRatio']>25) & (train['DebtRatio']<124) & (train['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 124-1159': train[(train['DebtRatio']>123) & (train['DebtRatio']<1160) & (train['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 1160-2382': train[(train['DebtRatio']>1159) & (train['DebtRatio']<2383) & (train['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 2383-max': train[(train['DebtRatio']>2382) & (train['MonthlyIncome'].notnull())]['MonthlyIncome'].describe()})","120a21f2":"pd.DataFrame({'DebtRatio min-1': test[(test['DebtRatio']<=1) & (test['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 1-25': test[(test['DebtRatio']>1) & (test['DebtRatio']<26) & (test['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 26-123': test[(test['DebtRatio']>25) & (test['DebtRatio']<124) & (test['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 124-1159': test[(test['DebtRatio']>123) & (test['DebtRatio']<1160) & (test['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 1160-2382': test[(test['DebtRatio']>1159) & (test['DebtRatio']<2383) & (test['MonthlyIncome'].notnull())]['MonthlyIncome'].describe(),\n              'DebtRatio 2383-max': test[(test['DebtRatio']>2382) & (test['MonthlyIncome'].notnull())]['MonthlyIncome'].describe()})","fc7d6efb":"train[train['NumberOfDependents'].isnull()][['age','MonthlyIncome','DebtRatio','NumberOfDependents']].describe()","1f2060a4":"pd.DataFrame({'train':train['DebtRatio'].describe(), 'test':test['DebtRatio'].describe()})","f4508f16":"fig, axes = plt.subplots(2, 2, figsize=(30,20))\n# \u6dfb\u52a0boxplot\nax = sns.boxplot(train['DebtRatio'], ax=axes[0,0])\n# \u901a\u8fc7stripplot\u6dfb\u52a0\u5206\u5e03\u6563\u70b9\u56fe\uff0cjitter\u8bbe\u7f6e\u6570\u636e\u95f4\u8ddd\nax = sns.stripplot(train['DebtRatio'], color=\"orange\", jitter=0.2, size=5, ax=axes[0,1])\nax = sns.boxplot(test['DebtRatio'], ax=axes[1,0])\nax = sns.stripplot(test['DebtRatio'], color=\"orange\", jitter=0.2, size=5, ax=axes[1,1])","526dc2b0":"count = train[train['DebtRatio']>50000]['DebtRatio'].count()\n[count, count\/150000]","3bf3ca03":"pd.DataFrame({'train':train['RevolvingUtilizationOfUnsecuredLines'].describe(),'test':train['RevolvingUtilizationOfUnsecuredLines'].describe()})","1f2bb747":"fig, axes = plt.subplots(2, 2, figsize=(30,20))\n# \u6dfb\u52a0boxplot\nax = sns.boxplot(train['RevolvingUtilizationOfUnsecuredLines'], ax=axes[0,0])\n# \u901a\u8fc7stripplot\u6dfb\u52a0\u5206\u5e03\u6563\u70b9\u56fe\uff0cjitter\u8bbe\u7f6e\u6570\u636e\u95f4\u8ddd\nax = sns.stripplot(train['RevolvingUtilizationOfUnsecuredLines'], color=\"orange\", jitter=0.2, size=5, ax=axes[0,1])\nax = sns.boxplot(test['RevolvingUtilizationOfUnsecuredLines'], ax=axes[1,0])\nax = sns.stripplot(test['RevolvingUtilizationOfUnsecuredLines'], color=\"orange\", jitter=0.2, size=5, ax=axes[1,1])","086007b7":"count = train[train['RevolvingUtilizationOfUnsecuredLines']>5]['RevolvingUtilizationOfUnsecuredLines'].count()\n[count, count\/150000]","21cca5ea":"count = test[test['RevolvingUtilizationOfUnsecuredLines']>5]['RevolvingUtilizationOfUnsecuredLines'].count()\n[count, count\/101503]","789b95d9":"pd.DataFrame(train['age'].describe())","06436a7f":"fig, axes = plt.subplots(2, 2, figsize=(30,20))\n# \u6dfb\u52a0boxplot\nax = sns.boxplot(train['age'], ax=axes[0,0])\n# \u901a\u8fc7stripplot\u6dfb\u52a0\u5206\u5e03\u6563\u70b9\u56fe\uff0cjitter\u8bbe\u7f6e\u6570\u636e\u95f4\u8ddd\nax = sns.stripplot(train['age'], color=\"orange\", jitter=0.2, size=3, ax=axes[0,1])\nax = sns.boxplot(test['age'], ax=axes[1,0])\nax = sns.stripplot(test['age'], color=\"orange\", jitter=0.2, size=5, ax=axes[1,1])","197175aa":"count = train[train['age']==0]['age'].count()\n[count, count\/train.shape[0]]","6147c564":"count = test[test['age']==0]['age'].count()\n[count, count\/test.shape[0]]","d8e7b1df":"pd.DataFrame({'30-59days':train['NumberOfTime30-59DaysPastDueNotWorse'].describe(),\n              '60-89days':train['NumberOfTime60-89DaysPastDueNotWorse'].describe(),\n              '90+days':train['NumberOfTimes90DaysLate'].describe()})","61ab3cf9":"pd.DataFrame({'30-59days':test['NumberOfTime30-59DaysPastDueNotWorse'].describe(),\n              '60-89days':test['NumberOfTime60-89DaysPastDueNotWorse'].describe(),\n              '90+days':test['NumberOfTimes90DaysLate'].describe()})","d030d55c":"fig, axes = plt.subplots(3, 2, figsize=(30,30))\n# \u6dfb\u52a0\u76f4\u65b9\u56fe\nax = sns.histplot(train['NumberOfTime30-59DaysPastDueNotWorse'], binwidth=1, ax=axes[0,0])\nax = sns.histplot(test['NumberOfTime30-59DaysPastDueNotWorse'], binwidth=1, ax=axes[0,1])\nax = sns.histplot(train['NumberOfTime60-89DaysPastDueNotWorse'], binwidth=1, ax=axes[1,0])\nax = sns.histplot(test['NumberOfTime60-89DaysPastDueNotWorse'], binwidth=1, ax=axes[1,1])\nax = sns.histplot(train['NumberOfTimes90DaysLate'], binwidth=1, ax=axes[2,0])\nax = sns.histplot(test['NumberOfTimes90DaysLate'], binwidth=1, ax=axes[2,1])","f7a6965f":"np.unique(train['NumberOfTime30-59DaysPastDueNotWorse']), np.unique(test['NumberOfTime30-59DaysPastDueNotWorse'])","8029cb05":"np.unique(train['NumberOfTime60-89DaysPastDueNotWorse']), np.unique(test['NumberOfTime60-89DaysPastDueNotWorse'])","6743148f":"np.unique(train['NumberOfTimes90DaysLate']), np.unique(test['NumberOfTimes90DaysLate'])","7796c9ff":"NumberOfTimeInTotal_train = train['NumberOfTime30-59DaysPastDueNotWorse']+train['NumberOfTime60-89DaysPastDueNotWorse']+train['NumberOfTimes90DaysLate']\nNumberOfTimeInTotal_test = test['NumberOfTime30-59DaysPastDueNotWorse']+test['NumberOfTime60-89DaysPastDueNotWorse']+test['NumberOfTimes90DaysLate']\n\npd.DataFrame({'train':NumberOfTimeInTotal_train.describe(),'test':NumberOfTimeInTotal_test.describe()})","cb79c6ff":"pd.DataFrame({'train':train['NumberOfOpenCreditLinesAndLoans'].describe(),'test':test['NumberOfOpenCreditLinesAndLoans'].describe()})","ff33c817":"fig, axes = plt.subplots(1, 2, figsize=(30,10))\n# \u6dfb\u52a0\u76f4\u65b9\u56fe\nax = sns.histplot(train['NumberOfOpenCreditLinesAndLoans'], binwidth=1, ax=axes[0])\nax = sns.histplot(test['NumberOfOpenCreditLinesAndLoans'], binwidth=1, ax=axes[1])","ebfd3e22":"np.unique(train['NumberOfOpenCreditLinesAndLoans']), np.unique(test['NumberOfOpenCreditLinesAndLoans'])","b20d5dbf":"pd.DataFrame({'train':train['NumberRealEstateLoansOrLines'].describe(),'test':test['NumberRealEstateLoansOrLines'].describe()})","fe08d8d0":"np.unique(train['NumberRealEstateLoansOrLines']), np.unique(test['NumberRealEstateLoansOrLines'])","ff567c76":"fig, axes = plt.subplots(1, 2, figsize=(30,10))\n# \u6dfb\u52a0\u76f4\u65b9\u56fe\nax = sns.histplot(train['NumberRealEstateLoansOrLines'], binwidth=1, ax=axes[0])\nax = sns.histplot(test['NumberRealEstateLoansOrLines'], binwidth=1, ax=axes[1])","a8212477":"pd.DataFrame({'train':train['NumberOfDependents'].describe(),'test':test['NumberOfDependents'].describe()})","7e029ec8":"fig, axes = plt.subplots(2, 2, figsize=(30,20))\n# \u6dfb\u52a0boxplot\nax = sns.boxplot(train['NumberOfDependents'], ax=axes[0,0])\n# \u901a\u8fc7stripplot\u6dfb\u52a0\u5206\u5e03\u6563\u70b9\u56fe\uff0cjitter\u8bbe\u7f6e\u6570\u636e\u95f4\u8ddd\nax = sns.stripplot(train['NumberOfDependents'], color=\"orange\", jitter=0.2, size=3, ax=axes[0,1])\nax = sns.boxplot(test['NumberOfDependents'], ax=axes[1,0])\nax = sns.stripplot(test['NumberOfDependents'], color=\"orange\", jitter=0.2, size=5, ax=axes[1,1])","a8d94c80":"# \u7279\u5f81\u76f8\u5173\u6027\u70ed\u529b\u56fe\ncorrelation = train.corr()\nf , ax = plt.subplots(figsize = (10, 10))\nplt.title('Feature Correlation',y=1,size=12)\nsns.heatmap(correlation,annot = True, vmax=0.8)","23082c43":"train.shape,test.shape","33446d80":"# \u5904\u7406NumberOfDependents\u7684\u7f3a\u5931\u503c\ntrain['NumberOfDependents'] = train['NumberOfDependents'].fillna(0)","c4501abc":"# \u5904\u7406MonthlyIncome\u7684\u7f3a\u5931\u503c\n# \u65b9\u6cd51\uff1a\u5c06\u5168\u90e8\u7f3a\u5931\u503c\u586b\u4e3aDebtRatio>1 \u7684\u975e\u7a7aMonthlyIncome\u7684\u5747\u503c\n\n# train['MonthlyIncome'] = train['MonthlyIncome'].fillna(1577)\n# test['MonthlyIncome'] = test['MonthlyIncome'].fillna(1176)\n\n# \u65b9\u6cd52\uff1a\u9488\u5bf9\u4e0d\u540c\u533a\u95f4\u7684DebtRatio\u586b\u5165\u4e0d\u540c\u533a\u95f4\u5185\u5bf9\u5e94\u975e\u7a7aMonthlyIncome\u7684\u5747\u503c\ntrain.loc[(train['DebtRatio']<=1) & (train['MonthlyIncome'].isnull()),'MonthlyIncome'] = 6952.4914\ntrain.loc[(train['DebtRatio']>1) & (train['DebtRatio']<=25) & (train['MonthlyIncome'].isnull()),'MonthlyIncome'] = 3066.7276\ntrain.loc[(train['DebtRatio']>25) & (train['DebtRatio']<=123) & (train['MonthlyIncome'].isnull()),'MonthlyIncome'] = 326.1439\ntrain.loc[(train['DebtRatio']>123) & (train['DebtRatio']<=11659) & (train['MonthlyIncome'].isnull()),'MonthlyIncome'] = 1.0041\ntrain.loc[(train['DebtRatio']>1159) & (train['DebtRatio']<=2382) & (train['MonthlyIncome'].isnull()),'MonthlyIncome'] = 0.2975\ntrain.loc[(train['DebtRatio']>2382) & (train['MonthlyIncome'].isnull()),'MonthlyIncome'] = 0.0877\n\n# # \u65b9\u6cd53\uff1a\u5e94\u7528\u968f\u673a\u68ee\u6797\u6a21\u578b\uff0c\u4ee5\u5176\u4ed610\u4e2a\u7279\u5f81\u4e3a\u81ea\u53d8\u91cf\uff0cMonthlyIncome\u4e3a\u56e0\u53d8\u91cf\uff0c\u62df\u5408\u9884\u6d4b\u7a7a\u7f3a\u7684MonthlyIncome\n# columns = [*train.columns]\n# columns.remove('SeriousDlqin2yrs')\n# columns.remove('MonthlyIncome')\n# X = train.loc[:, columns]\n# y = train.loc[:, 'MonthlyIncome']\n# X_train = X.loc[train['MonthlyIncome'].notnull()]\n# y_train = y.loc[train['MonthlyIncome'].notnull()]\n# X_pred = X.loc[train['MonthlyIncome'].isnull()]\n# rfr = RandomForestRegressor(random_state=2021, n_estimators=600,max_depth=9, n_jobs=-1)\n# rfr.fit(X_train, y_train)\n# y_pred = rfr.predict(X_pred).round()\n# train.loc[train['MonthlyIncome'].isnull(), 'MonthlyIncome'] = y_pred","1723f165":"# \u65b0\u589e\u989d\u5916\u7279\u5f81NumberOfTimeInTotal\ntrain['NumberOfTimeInTotal'] = NumberOfTimeInTotal_train\ntest['NumberOfTimeInTotal'] = NumberOfTimeInTotal_test","72e8b30f":"# \u5c06DebtRatio\u4e2d\u5927\u4e8e50000\u7684\u6570\u636e\u70b9\u5220\u9664\ntrain = train[train['DebtRatio']<50000]\n# \u5c06RevolvingUtilizationOfUnsecuredLines\u4e2d\u5927\u4e8e5\u7684\u6570\u636e\u70b9\u5220\u9664\ntrain = train[train['RevolvingUtilizationOfUnsecuredLines'] <= 5]\n# \u5c06age\u4e3a0\u7684\u6570\u636e\u70b9\u5220\u9664\ntrain = train[train['age'] > 0]\n# \u5c06NumberOfTimeDaysPastDue\u4e2d\u5927\u4e8e95\u7684\u6570\u636e\u70b9\u5220\u9664\ntrain = train[train['NumberOfTime30-59DaysPastDueNotWorse'] < 95]\ntrain = train[train['NumberOfTimes90DaysLate'] < 95]\ntrain = train[train['NumberOfTime60-89DaysPastDueNotWorse'] < 95]\n\ny = train.loc[:,['SeriousDlqin2yrs']]\ntrain = train.drop(['SeriousDlqin2yrs'],axis=1, inplace=False)","9b3f1076":"train.shape, y.shape","2a05d706":"x_train,x_val,y_train,y_val = train_test_split(train,y,test_size=0.2, random_state=2021)\nx_train.shape, y_train.shape, x_val.shape, y_val.shape","7b4b5784":"# \u6a21\u578b\u9009\u62e9\nmodel_classifiers = []\n# KNN\nmodel_classifiers.append(KNeighborsClassifier())\n# Logistic Regression\n# model_classifiers.append(LogisticRegression())\n# Simple Decision Tree\nmodel_classifiers.append(DecisionTreeClassifier())\n# Random Forest\nmodel_classifiers.append(RandomForestClassifier())\n# GBDT\nmodel_classifiers.append(GradientBoostingClassifier())\n# LightGBM\nmodel_classifiers.append(LGBMClassifier())\n# XGBoost\nmodel_classifiers.append(XGBClassifier())\n\nroc_auc_score = []\nfor classifier in model_classifiers:\n    roc_auc_score.append(cross_validate(classifier, x_train, y_train, cv=15, scoring='roc_auc', n_jobs=-1)['test_score'])\n\ncv_score_mean = []\nfor score in roc_auc_score:\n    cv_score_mean.append(score.mean())\n# pd.DataFrame({'model':['KNN','Logistic Regression','Decision Tree','Random Forest','GBDT','LightGBM','XGBoost'],\n#               'cv_mean':cv_score_mean})\npd.DataFrame({'model':['KNN','Decision Tree','Random Forest','GBDT','LightGBM','XGBoost'],\n              'cv_mean':cv_score_mean})","c75e5be6":"# param_grid = {'n_estimators': range(200, 800, 100),\n#               'learning_rate': [0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1]\n#              }\n\n# estimator = lgb.LGBMClassifier()\n\n# gbm = GridSearchCV(estimator, param_grid, scoring='roc_auc', cv=15)\n# gbm.fit(x_train, y_train)\n# print('Best parameters found by grid search are:', gbm.best_params_, gbm.best_score_)","4d078de7":"# param_grid = {'n_estimators': range(500, 700, 25)\n#              }\n\n# estimator = lgb.LGBMClassifier(objective='binary',\n#                         learning_rate=0.01,)\n\n# gbm = GridSearchCV(estimator, param_grid, scoring='roc_auc', cv=15)\n# gbm.fit(x_train, y_train)\n# print('Best parameters found by grid search are:', gbm.best_params_, gbm.best_score_)","5ef948ac":"# param_grid = {'max_depth': range(4, 21, 2),\n#               'num_leaves': range(20, 80, 20)\n#              }\n\n# estimator = lgb.LGBMClassifier(objective='binary',\n#                         learning_rate=0.01,\n#                         n_estimators=575,\n#                         )\n\n# gbm = GridSearchCV(estimator, param_grid, scoring='roc_auc', cv=15)\n# gbm.fit(x_train, y_train)\n# print('Best parameters found by grid search are:', gbm.best_params_, gbm.best_score_)","a6b80b7e":"# param_grid = {'max_depth': [5,6,7],\n#               'num_leaves': range(10, 21, 2)\n#              }\n\n# estimator = lgb.LGBMClassifier(learning_rate=0.01,\n#                         n_estimators=575,\n#                         )\n\n# gbm = GridSearchCV(estimator, param_grid, scoring='roc_auc', cv=15)\n# gbm.fit(x_train, y_train)\n# print('Best parameters found by grid search are:', gbm.best_params_, gbm.best_score_)","f957460b":"# # \u964d\u4f4e\u8fc7\u62df\u5408\n# param_grid = {'min_child_samples': [20,22,24],\n#               'min_child_weight':[0.0001, 0.00025, 0.0005, 0.00025,0.0001]\n#                  }\n\n# estimator = lgb.LGBMClassifier(objective='binary',\n#                         learning_rate=0.01,\n#                         n_estimators=600,\n#                         max_depth=6,\n#                         num_leaves=16,\n#                         subsample=0.8,\n#                         colsample_bytree=0.8,\n#                         )\n\n# gbm = GridSearchCV(estimator, param_grid, scoring='roc_auc', cv=15)\n# gbm.fit(x_train, y_train)\n\n# print('Best parameters found by grid search are:', gbm.best_params_, gbm.best_score_)","17163d3c":"# \u964d\u4f4e\u8fc7\u62df\u5408\n# param_grid={\n#     'feature_fraction': [0.5, 0.6, 0.7, 0.8, 0.9],\n#     'bagging_fraction': [0.6, 0.7, 0.8, 0.9, 1.0],\n#     'bagging_freq': [3,4,5,6]\n# }\n\n# estimator = lgb.LGBMClassifier(objective='binary',\n#                             learning_rate=0.01,\n#                             n_estimators=575,\n#                             max_depth=6,\n#                             num_leaves=16,\n#                             min_child_samples=22,\n#                             min_child_weight=0.0001,\n#                             )\n\n# gbm = GridSearchCV(estimator, param_grid, scoring='roc_auc', cv=15)\n# gbm.fit(x_train, y_train)\n# print('Best parameters found by grid search are:', gbm.best_params_, gbm.best_score_)","b8882950":"# \u52a0\u5165\u6b63\u5219\u5316\u53c2\u6570\n# param_grid = {'reg_alpha': [0, 0.01, 0.5],\n#               'reg_lambda': [0, 0.01, 0.5]\n#               }\n\n# estimator = lgb.LGBMClassifier(objective='binary',\n#                             learning_rate=0.01,\n#                             n_estimators=575,\n#                             max_depth=6,\n#                             num_leaves=16,\n#                             bagging_fraction=0.6, \n#                             feature_fraction=0.5,\n#                             bagging_freq=5,\n#                             )\n\n# gbm = GridSearchCV(estimator, param_grid, scoring='roc_auc', cv=15)\n# gbm.fit(x_train, y_train)\n\n# print('Best parameters found by grid search are:', gbm.best_params_, gbm.best_score_)","5c932925":"lgbm = LGBMClassifier(learning_rate=0.01,\n                            n_estimators=575,\n                            max_depth=6,\n                            num_leaves=16,\n                            bagging_fraction=0.6, \n                            feature_fraction=0.5,\n                            bagging_freq=5,\n                            min_child_samples=22,\n                            min_child_weight=0.0001,\n                            reg_alpha=0.5,\n                            reg_lambda=0.01)\n\nlgbm.fit(x_train,y_train)\ny_pred = lgbm.predict_proba(x_val)[:,1]","771fa1ce":"fpr, tpr, thresholds = metrics.roc_curve(y_val, y_pred)\nplt.plot(fpr, tpr)\nplt.plot(fpr, fpr, linestyle = '--')\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nplt.title('ROC curve')\nplt.show()","d72ce50c":"metrics.roc_auc_score(y_val, y_pred)","72c118aa":"test['NumberOfDependents'] = test['NumberOfDependents'].fillna(0)\ntest.loc[(test['DebtRatio']<=1) & (test['MonthlyIncome'].isnull()),'MonthlyIncome'] = 7140.7728\ntest.loc[(test['DebtRatio']>1) & (test['DebtRatio']<=25) & (test['MonthlyIncome'].isnull()),'MonthlyIncome'] = 2999.2432\ntest.loc[(test['DebtRatio']>25) & (test['DebtRatio']<=123) & (test['MonthlyIncome'].isnull()),'MonthlyIncome'] = 70.0508\ntest.loc[(test['DebtRatio']>123) & (test['DebtRatio']<=11659) & (test['MonthlyIncome'].isnull()),'MonthlyIncome'] = 5.6083\ntest.loc[(test['DebtRatio']>1159) & (test['DebtRatio']<=2382) & (test['MonthlyIncome'].isnull()),'MonthlyIncome'] = 0.2819\ntest.loc[(test['DebtRatio']>2382) & (test['MonthlyIncome'].isnull()),'MonthlyIncome'] = 0.0927\n\ntest['NumberOfTimeInTotal'] = NumberOfTimeInTotal_test\ntest = test.drop(['SeriousDlqin2yrs'],axis=1, inplace=False)","b96ba05a":"y_test = lgbm.predict_proba(test)[:,1]","543db76b":"index = np.arange(1,101504)\nsubmission = pd.DataFrame( {'Id': index, 'Probability': y_test})\nsubmission.to_csv(\"y_submission.csv\", index=False)","b079733c":"#### reg_alpha, reg_lambda","2b30332f":">### 4.2 **\u5904\u7406\u5f02\u5e38\u503c**","fee752bd":"> ### 1.2 **\u7279\u5f81\u63cf\u8ff0**","3f5004c3":">### 3.1 **\u6570\u636e\u6982\u89c8** ","ee2daa5a":"* \u901a\u8fc7\u76f4\u65b9\u56fe\u89c2\u5bdf\u4ee5\u53ca\u5bf9\u8fd9\u4e09\u4e2a\u7279\u5f81\u53d6\u503c\u7684\u7edf\u8ba1\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e09\u4e2a\u7279\u5f81\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e2d\u90fd\u5b58\u5728\u774096\u548c98\u4e24\u4e2a\u79bb\u7fa4\u70b9\u7684\u53d6\u503c\uff0c\u572890\u5929\u5185\u8fdd\u7ea6\u8d85\u8fc790\u6b21\u540c\u6837\u4e0d\u7b26\u5408\u73b0\u5b9e\u5e38\u7406\uff0c\u8fd9\u4e00\u90e8\u5206\u79bb\u7fa4\u70b9\u5360\u6bd4\u975e\u5e38\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53bb\u6389\u5bf9\u5e94\u7684\u79bb\u7fa4\u70b9\uff0c\u5373\u5220\u9664\u7279\u5f81\u503c\u5927\u4e8e95\u7684\u70b9\u3002","ec402a5e":"#### NumberOfDependents","3d3cccef":"#### min_child_samples, min_child_weight","36151b99":"## 6. **\u6a21\u578b\u4f18\u5316\u4e0e\u8c03\u53c2** ","cf8ad653":">### 3.4 **\u6570\u636e\u76f8\u5173\u6027**","beaa33c8":"* \u9996\u5148\u5bf9\u4e00\u822c\u5206\u7c7b\u5e38\u89c1\u6a21\u578b\u91c7\u7528\u9ed8\u8ba4\u53c2\u6570\u8fdb\u884c\u8bad\u7ec3\u5206\u7c7b\uff0c\u67e5\u770b\u4e0d\u540c\u6a21\u578b\u5bf9\u5e94\u8bc4\u5206\uff0c\u91c7\u53d6\u6700\u4f18\u6a21\u578b\u8fdb\u884c\u8fdb\u4e00\u6b65\u4f18\u5316\u3002","a8579135":"> ## **\u5bfc\u5305**","63cf7f66":"####  NumberOfDependents","ed19ab94":"## 7. **\u63d0\u4ea4** ","eaf6880d":"## 2. **\u5bfc\u5165\u6570\u636e**","1626f019":"* \u6839\u636e\u9ed8\u8ba4\u53c2\u6570\u8dd1\u5206\u7ed3\u679c\uff0c\u6211\u4eec\u91c7\u7528\u6548\u679c\u6700\u597d\u7684Lightgbm\u8fdb\u884c\u6df1\u5165\u4f18\u5316\uff0c\u5176\u4e2d\u6bcf\u4e00\u6b65\u90fd\u91c7\u7528KFold=15\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1","c439edd5":"Banks play a crucial role in market economies. They decide who can get finance and on what terms and can make or break investment decisions. For markets and society to function, individuals and companies need access to credit. \n\nCredit scoring algorithms, which make a guess at the probability of default, are the method banks use to determine whether or not a loan should be granted. This competition requires participants to improve on the state of the art in credit scoring, by predicting the probability that somebody will experience financial distress in the next two years.\n\nThe goal of this competition is to build a model that borrowers can use to help make the best financial decisions.\n\n\u94f6\u884c\u5728\u5e02\u573a\u7ecf\u6d4e\u4e2d\u53d1\u6325\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u4ed6\u4eec\u53ef\u4ee5\u51b3\u5b9a\u8c01\u53ef\u4ee5\u83b7\u5f97\u8d44\u91d1\u4ee5\u53ca\u4ee5\u4ec0\u4e48\u6761\u4ef6\u83b7\u5f97\u8d44\u91d1\u3002\u4e3a\u4e86\u8ba9\u5e02\u573a\u548c\u793e\u4f1a\u53d1\u6325\u4f5c\u7528\uff0c\u4e2a\u4eba\u548c\u516c\u53f8\u9700\u8981\u83b7\u5f97\u4fe1\u7528\u8d37\u6b3e\u6765\u6ee1\u8db3\u81ea\u8eab\u6216\u4f01\u4e1a\u9700\u6c42\u3002<br>\n\u8fd9\u4e2a\u95ee\u9898\u7684\u76ee\u7684\u5728\u4e8e\u901a\u8fc7\u67d0\u4eba\u6708\u6536\u5165\u3001\u8d1f\u503a\u60c5\u51b5\u3001\u903e\u671f\u8bb0\u5f55\u3001\u5bb6\u5ead\u60c5\u51b5\u7b49\u4e00\u7cfb\u5217\u76f8\u5173\u6570\u636e\uff0c\u9884\u6d4b\u67d0\u4eba\u5728\u672a\u6765\u4e24\u5e74\u5185\u9047\u5230\u8d22\u52a1\u56f0\u5883\u7684\u53ef\u80fd\u6027\u3002","23ba7e0a":"#### MonthlyIncome","b86d8f1f":"####  NumberRealEstateLoansOrLines","1a17cdf7":">### 3.3 **\u5f02\u5e38\u503c\u60c5\u51b5** ","b1035f1b":"> ## **\u6574\u4f53\u6d41\u7a0b**","1a991373":"* \u8fdb\u4e00\u6b65\u89c2\u5bdf\u53d1\u73b0\uff0c\u572811\u4e2a\u7279\u5f81\u4e2d\uff0c\u6709\u4e24\u4e2a\u7279\u5f81\u5b58\u5728\u7a7a\u503c\uff0c\u4e14\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e2d\u90fd\u5206\u522b\u5360\u6bd419.82%\u548c2.62%\uff0c\u5360\u6bd4\u8f83\u5927\uff0c\u4e0d\u80fd\u76f4\u63a5\u5254\u9664\uff0c\u540c\u65f6\uff0c150000\u6761\u6570\u636e\u5bf9\u5e94\u5230\u81ea\u53d8\u91cf\u4e2d\u768410\u4e2a\u7279\u5f81\uff0c\u4e0d\u80fd\u8f7b\u6613\u5c06\u8be5\u7279\u5f81\u5ffd\u7565\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u9996\u5148\u8981\u5206\u522b\u5bf9MonthlyIncome\u548cNumberOfDependents\u7684\u7a7a\u7f3a\u503c\u8fdb\u884c\u586b\u8865\u3002","909e06f0":">### 4.1 **\u5904\u7406\u7f3a\u5931\u503c**","1648ff3f":"* \u901a\u8fc7describe\u51fd\u6570\u53ef\u4ee5\u770b\u5230\u6240\u6709\u7279\u5f81\u5747\u4e3a\u6570\u503c\u6570\u636e\uff0c\u4e0d\u9700\u8981\u5bf9\u6807\u7b7e\u8fdb\u884c\u8f6c\u6362\uff0c\u4f46\u662f\u5176\u4e2d\u5b58\u5728\u6781\u7aef\u503c\u4ee5\u53ca\u7f3a\u5931\u503c\uff0c\u5bf9\u6b64\u9700\u8981\u8fdb\u4e00\u6b65\u5206\u6790\u548c\u89e3\u51b3\u3002","03bb3c8f":"* \u5bf9\u5b66\u4e60\u5668\u6570\u91cf\uff08n_estimators\uff09\u548c\u5b66\u4e60\u7387\uff08learning_rate\uff09\u4e00\u8d77\u7c97\u8c03\u4f18","8e8c376e":"* \u5bf9\u6570\u636e\u7c7b\u522b\u6807\u7b7e\u8fdb\u884c\u7ed8\u56fe\u540e\u53d1\u73b00,1\u6837\u672c\u4e4b\u95f4\u5206\u5e03\u4e0d\u5e73\u8861\uff0c\u6bd4\u4f8b\u8d85\u8fc7\u4e8610:1\n* \u56e0\u6b64\u6211\u4eec\u9700\u8981\u91c7\u7528roc_auc\u4f5c\u4e3a\u8bc4\u5206\u6307\u6807\uff0c\u56e0\u4e3a\u5e38\u89c4\u7684\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7c7b\u522b\u6bd4\u4f8b\u4e0d\u5747\u8861\u5bfc\u81f4\u51fa\u73b0\u504f\u5dee\n* \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u5e94\u8be5\u4f18\u5148\u4f7f\u7528bagging\u548cboosting\u7b97\u6cd5","15ba22e2":"####  RevolvingUtilizationOfUnsecuredLines","aca7ff76":"\u8c03\u4f18\u5b8c\u6210\u540e\u6700\u7ec8\u6a21\u578b\u53c2\u6570\u4e3a\uff1a\n* learning_rate=0.01,\n* n_estimators=575,\n* max_depth=6,\n* num_leaves=16,\n* min_child_samples=22,\n* min_child_weight=0.0001,\n* bagging_fraction=0.6, \n* feature_fraction=0.5,\n* bagging_freq=5,\n* reg_alpha=0.5,\n* reg_lambda=0.01","be81b90f":"#### n_estimators, learning_rate","131f6c7e":"* \u901a\u8fc7\u5bf9\u6570\u636e\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u517111\u4e2a\u7279\u5f81\uff0c\u8bad\u7ec3\u96c6\u5305\u542b\u4e86150000\u6761\u6570\u636e\uff0c\u6d4b\u8bd5\u96c6\u5219\u5305\u542b\u4e86101503\u6761\u6570\u636e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u89c2\u5bdf\u7279\u5f81\u7684\u5f02\u5e38\u503c\uff1a","20e0aff4":"* \u5728\u5904\u7406MonthlyIncome\u65f6\uff0c\u9009\u53d6\u4e86\u4e09\u79cd\u65b9\u6cd5\uff0c\u5206\u522b\u662f\uff1a\n* \u65b9\u6cd51\uff1a\u5c06\u5168\u90e8\u7f3a\u5931\u503c\u586b\u4e3aDebtRatio>1 \u7684\u975e\u7a7aMonthlyIncome\u7684\u5747\u503c\n* \u65b9\u6cd52\uff1a\u9488\u5bf9\u4e0d\u540c\u533a\u95f4\u7684DebtRatio\u586b\u5165\u4e0d\u540c\u533a\u95f4\u5185\u5bf9\u5e94\u975e\u7a7aMonthlyIncome\u7684\u5747\u503c\n* \u65b9\u6cd53\uff1a\u5e94\u7528\u968f\u673a\u68ee\u6797\u6a21\u578b\uff0c\u4ee5\u5176\u4ed610\u4e2a\u7279\u5f81\u4e3a\u81ea\u53d8\u91cf\uff0cMonthlyIncome\u4e3a\u56e0\u53d8\u91cf\uff0c\u62df\u5408\u9884\u6d4b\u7a7a\u7f3a\u7684MonthlyIncome\n\n\u901a\u8fc7\u5bf9\u6bd4\u5728Lightgbm\u4e2d\u7684roc_auc\u8bc4\u5206\uff0c\u6700\u7ec8\u786e\u5b9a\u65b9\u6cd52\u6700\u4f18\u3002","cf458539":"* \u968f\u540e\u5206\u522b\u5bf9min_child_samples\u548cmin_child_weight\u4e24\u4e2a\u53c2\u6570\u8fdb\u884c\u8c03\u4f18\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u662f\u4e3a\u4e86\u964d\u4f4e\u8fc7\u62df\u5408\n* min_data_in_leaf\uff1a\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u53c2\u6570, \u4e5f\u53ebmin_child_samples\uff0c\u5b83\u7684\u503c\u53d6\u51b3\u4e8e\u8bad\u7ec3\u6570\u636e\u7684\u6837\u672c\u4e2a\u6570\u548cnum_leaves\u3002\u5c06\u5176\u8bbe\u7f6e\u7684\u8f83\u5927\u53ef\u4ee5\u907f\u514d\u751f\u6210\u4e00\u4e2a\u8fc7\u6df1\u7684\u6811, \u4f46\u6709\u53ef\u80fd\u5bfc\u81f4\u6b20\u62df\u5408\u3002\n* min_sum_hessian_in_leaf\uff1a\u4e5f\u53ebmin_child_weight\uff0c\u4f7f\u4e00\u4e2a\u7ed3\u70b9\u5206\u88c2\u7684\u6700\u5c0f\u6d77\u68ee\u503c\u4e4b\u548c\uff08Minimum sum of hessians in one leaf to allow a split. Higher values potentially decrease overfitting\uff09\u3002","c937958e":"* \u901a\u8fc7\u6563\u70b9\u56fe\u548c\u7bb1\u578b\u56fe\u53ef\u4ee5\u770b\u51faage\u7279\u5f81\u7684\u6570\u636e\u6570\u503c\u5408\u7406\uff0c\u53ea\u6709\u8bad\u7ec3\u96c6\u4e2dage=0\u7684\u70b9\u662f\u6709\u95ee\u9898\u7684\uff0c\u8fdd\u80cc\u73b0\u5b9e\u5e38\u7406\uff0c\u53730\u5c81\u7684\u5a74\u513f\u65e0\u6cd5\u8d37\u6b3e\uff0c\u901a\u8fc7count\u8ba1\u6570\u540e\u53d1\u73b0\u4ec5\u67091\u4e2a\u4e3a0\u7684\u70b9\uff0c\u6545\u76f4\u63a5\u5220\u9664\u3002\u6d4b\u8bd5\u96c6\u65e0\u76f8\u5173\u7684\u60c5\u51b5\u3002","3e4adfb5":"* \u901a\u8fc7\u5bf9\u4e0a\u8ff0NumberOfTime30-59DaysPastDueNotWorse\uff0cNumberOfTime60-89DaysPastDueNotWorse\uff0cNumberOfTimes90DaysLate\u4e09\u4e2a\u7279\u5f81\u7684\u89c2\u5bdf\u4e0e\u5206\u6790\uff0c\u6211\u8ba4\u4e3a\u4ed6\u4eec\u4e09\u4e2a\u7279\u5f81\u76f8\u4f3c\u6027\u548c\u76f8\u5173\u6027\u5f88\u5f3a\uff0c\u7279\u5f81\u6709\u4e9b\u5197\u4f59\uff0c\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7279\u5f81\u6765\u5e2e\u52a9\u8868\u793a\u5176\u610f\u4e49\uff0c\u56e0\u6b64\u589e\u52a0\u989d\u5916\u7279\u5f81NumberOfTimesInTotal=NumberOfTime30-59DaysPastDueNotWorse+NumberOfTime60-89DaysPastDueNotWorse+NumberOfTimes90DaysLate.","6df1bbac":"## 1. **\u95ee\u9898\u80cc\u666f** ","1fed1d1d":"* \u901a\u8fc7\u5bf9\u6bd4MonthlyIncome\u4e3a\u7a7a\u548c\u975e\u7a7a\u65f6DebtRatio\u7684\u6570\u636e\u5206\u5e03\u4e0d\u96be\u770b\u51fa\uff0c\u5f53MonthlyIncome\u4e3a\u7a7a\u65f6DebtRatio\u524d25%\u7684\u503c\u5c31\u5df2\u7ecf\u8fbe\u5230\u4e86123\uff0c\u800c\u975e\u7a7a\u65f6\u524d75%\u4f9d\u65e7\u4e3a0.4826\uff0c\u5dee\u8ddd\u975e\u5e38\u660e\u663e\uff0c\u6240\u4ee5\u8bf4\u660eMonthlyIncome\u4e3a\u7a7a\u7684\u4eba\u5927\u6982\u7387DebtRatio\u7684\u53d6\u503c\u4e5f\u5f88\u9ad8\uff0c\u8bf4\u660e\u6536\u5165\u76f8\u5bf9\u8f83\u4f4e\u4e14\u8d37\u6b3e\u91d1\u989d\u5927\u4e8e\u4e86\u81ea\u8eab\u6536\u5165\u6c34\u5e73\u3002\u90a3\u4e48\u6211\u4eec\u9488\u5bf9DebtRatio>1\u7684\u4eba\u7fa4\u8fdb\u884c\u8fdb\u4e00\u6b65\u5206\u6790\u3002","b6a36796":">### 3.2 **\u7f3a\u5931\u503c\u60c5\u51b5**","aded1bf7":"* \u7ed8\u5236\u6a21\u578bROC\u66f2\u7ebf","57b7db89":"#### NumberOfTime30-59DaysPastDueNotWorse, NumberOfTime60-89DaysPastDueNotWorse, NumberOfTimes90DaysLate","70bc3ef3":"## 4. **\u6570\u636e\u9884\u5904\u7406** ","b91161b8":"* \u6700\u540e\u6211\u4eec\u52a0\u5165\u6b63\u5219\u5316\u53c2\u6570\u8fdb\u4e00\u6b65\u964d\u4f4e\u8fc7\u62df\u5408","502d9a70":"* **SeriousDlqin2yrs**\uff1a\u903e\u671f90\u5929\u6216\u66f4\u7cdf\u7684\u4eba\uff0c**\u5206\u7c7b\u578b\u7279\u5f81**\n* **RevolvingUtilizationOfUnsecuredLines**\uff1a\u4fe1\u7528\u5361\u548c\u4e2a\u4eba\u4fe1\u7528\u989d\u5ea6\u7684\u603b\u4f59\u989d\uff08\u623f\u5730\u4ea7\u9664\u5916\uff09\u548c\u65e0\u5206\u671f\u4ed8\u6b3e\u503a\u52a1\uff08\u5982\u6c7d\u8f66\u8d37\u6b3e\uff09\u9664\u4ee5\u4fe1\u7528\u989d\u5ea6\u603b\u548c\uff0c**\u6570\u503c\u578b\u7279\u5f81**\n* **age**\uff1a\u501f\u6b3e\u4eba\u5e74\u9f84\uff08\u5e74\uff09\uff0c**\u8fde\u7eed\u578b\u7279\u5f81**\n* **NumberOfTime30-59DaysPastDueNotWorse**\uff1a\u501f\u6b3e\u4eba\u903e\u671f 30-59 \u5929\u4f46\u5728\u8fc7\u53bb 2 \u5e74\u5185\u6ca1\u6709\u66f4\u7cdf\u7684\u6b21\u6570\uff0c**\u79bb\u6563\u578b\u7279\u5f81**\n* **DebtRatio**\uff1a\u6bcf\u6708\u503a\u52a1\u652f\u4ed8\u3001\u8d61\u517b\u8d39\u3001\u751f\u6d3b\u8d39\u7528\u9664\u4ee5\u6bcf\u6708\u603b\u6536\u5165\uff0c**\u6570\u503c\u578b\u7279\u5f81**\n* **MonthlyMonthly**\uff1a\u6708\u6536\u5165\uff0c\u8fde\u7eed\u578b\u7279\u5f81\n* **NumberOfOpenCreditLinesAndLoans**\uff1a\u672a\u7ed3\u8d37\u6b3e\uff08\u5982\u6c7d\u8f66\u8d37\u6b3e\u6216\u62b5\u62bc\u8d37\u6b3e\u7b49\u5206\u671f\u4ed8\u6b3e\uff09\u548c\u4fe1\u7528\u989d\u5ea6\uff08\u4f8b\u5982\u4fe1\u7528\u5361\uff09\u7684\u6570\u91cf\uff0c**\u79bb\u6563\u578b\u7279\u5f81**\n* **NumberOfTimes90DaysLate**\uff1a\u501f\u6b3e\u4eba\u903e\u671f 90 \u5929\u6216\u66f4\u957f\u65f6\u95f4\u7684\u6b21\u6570\uff0c**\u79bb\u6563\u578b\u7279\u5f81**\n* **NumberRealEstateLoansOrLines**\uff1a\u62b5\u62bc\u8d37\u6b3e\u548c\u623f\u5730\u4ea7\u8d37\u6b3e\u7684\u6570\u91cf\uff0c\u5305\u62ec\u623f\u5c4b\u51c0\u503c\u4fe1\u8d37\u989d\u5ea6\uff0c**\u79bb\u6563\u578b\u7279\u5f81**\n* **NumberOfTime60-89DaysPastDueNotWorse**\uff1a\u501f\u6b3e\u4eba\u903e\u671f 60-89 \u5929\u4f46\u5728\u8fc7\u53bb 2 \u5e74\u5185\u6ca1\u6709\u66f4\u7cdf\u7684\u6b21\u6570\uff0c**\u79bb\u6563\u578b\u7279\u5f81**\n* **NumberOfDependents**\uff1a\u5bb6\u5ead\u4e2d\u4e0d\u5305\u62ec\u4ed6\u4eec\u81ea\u5df1\uff08\u914d\u5076\u3001\u5b50\u5973\u7b49\uff09\u7684\u5bb6\u5c5e\u4eba\u6570\uff0c**\u79bb\u6563\u578b\u7279\u5f81**","f4d26042":"> ### 1.1 **\u95ee\u9898\u63cf\u8ff0**","fbc064e0":"* \u901a\u8fc7\u5bf9\u76f4\u65b9\u56fe\u548c\u7279\u5f81\u6570\u636e\u503c\u7684\u89c2\u5bdf\uff0cNumberOfOpenCreditLinesAndLoans\u7279\u5f81\u65e0\u79bb\u7fa4\u70b9\uff0c\u6570\u636e\u5206\u5e03\u5408\u7406\uff0c\u4e0d\u505a\u5176\u4ed6\u5904\u7406\u3002","c04a0268":"## 3. **\u6570\u636e\u89c2\u5bdf\u4e0e\u5206\u6790** ","113db6f7":"* \u901a\u8fc7\u8be5\u8868\u4e0d\u96be\u770b\u51fa\u5f53NumberOfDependents\u4e3a\u7a7a\u503c\u65f6\uff0cMonthlyIncome\u4e5f\u540c\u6837\u90fd\u4e3a\u7a7a\u503c\uff0c\u800c\u770bMonthlyIncome\u7684\u6570\u636e\u5206\u5e03\u53ef\u4ee5\u5f97\u51fa\uff0c\u5f53MonthlyIncome\u4e3a\u7a7a\u503c\u65f6\u524d75%\u7684NumberOfDependents\u6570\u636e\u4e3a0\uff0c\u800c\u4e14\u5e73\u5747\u503c\u4ec5\u4e3a0.3\uff0c\u8bf4\u660e\u7a7a\u7f3a\u7684NumberOfDependents\u503c\u7edd\u5927\u591a\u6570\u90fd\u5e94\u8be5\u4e3a0\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u51b3\u5b9a\u5c06NumberOfDependents\u7684\u7a7a\u503c\u5168\u90e8\u586b0\u3002","143edba7":"####  NumberOfOpenCreditLinesAndLoans","b7880884":"* \u901a\u8fc7\u70ed\u529b\u56fe\u53ef\u4ee5\u770b\u51faNumberOfTime30-59DaysPastDueNotWorse,NumberOfTime60-89DaysPastDueNotWorse,NumberOfTimes90DaysLate\u4e09\u4e2a\u7279\u5f81\u4e4b\u95f4\u76f8\u5173\u6027\u5f88\u5f3a\uff0c\u56e0\u6b64\u8bc1\u660e\u9700\u8981\u6dfb\u52a0\u989d\u5916\u7684\u7279\u5f81NumberOfTimesIntotal\u3002","b663ad50":"* \u5206\u522b\u5bf9\u4e0d\u540cDebtRatio\u8fdb\u884c\u5206\u6790\u53d1\u73b0\uff0c\u4e0d\u540c\u90e8\u5206\u7684DebtRatio\u5bf9\u5e94\u7684MonthlyIncome\u7684\u53d6\u503c\u5dee\u5f02\u975e\u5e38\u5927\uff0c\u8fd9\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e2d\u90fd\u5b58\u5728\u76f8\u540c\u7684\u73b0\u8c61\uff0c\u56e0\u6b64\u5355\u53d6\u6574\u4f53\u7684\u5e73\u5747\u6570\u4f5c\u4e3a\u586b\u5145\u4e0d\u591f\u5408\u7406\uff0c\u6211\u4eec\u91c7\u7528DebtRatio\u5728\u4e0d\u540c\u533a\u95f4\u5185\u7684MonthlyIncome\u5206\u522b\u7528\u5bf9\u5e94\u533a\u95f4\u5185\u7684\u5747\u503c\u8fdb\u884c\u586b\u5145\u3002","869d88d5":"* \u901a\u8fc7\u5bf9\u76f4\u65b9\u56fe\u548c\u7279\u5f81\u6570\u636e\u503c\u7684\u89c2\u5bdf\uff0cNumberRealEstateLoansOrLines\u7279\u5f81\u65e0\u79bb\u7fa4\u70b9\uff0c\u6570\u636e\u5206\u5e03\u5408\u7406\uff0c\u4e0d\u505a\u5176\u4ed6\u5904\u7406\u3002","5880a9ed":"#### feature_fraction, bagging_fraction, bagging_freq","7f5e8418":"* \u5bf9\u6d4b\u8bd5\u96c6\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406","41d6cc30":"* \u5bf9\u5b66\u4e60\u5668\u6570\u91cf\uff08n_estimators\uff09\u4e00\u8d77\u7ec6\u8c03\u4f18","ff8453a6":"* \u901a\u8fc7\u7bb1\u578b\u56fe\u4ee5\u53ca\u6563\u70b9\u5206\u5e03\u56fe\uff0c\u4e0d\u96be\u770b\u51faRevolvingUtilizationOfUnsecuredLines\u7279\u5f81\u7684\u5206\u5e03\u96c6\u4e2d\u5728[0,1]\u7684\u533a\u95f4\u5185\uff0c\u800c\u6700\u5927\u503c\u5219\u4e3a50708\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5254\u9664\u90e8\u5206\u79bb\u7fa4\u70b9\u6765\u907f\u514d\u6781\u7aef\u503c\u5e26\u6765\u7684\u5f71\u54cd\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u9608\u503c\u8bbe\u5b9a\u4e3a5\uff0c\u901a\u8fc7count\u7ed3\u679c\u5f97\u5230\uff0c\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e2d\uff0c\u5927\u4e8e5\u7684\u70b9\u5747\u53ea\u5360\u6bd4\u603b\u6570\u636e\u76840.16%\u5de6\u53f3\uff0c\u5360\u6bd4\u5f88\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5254\u9664\u5927\u4e8e5\u7684\u8fd9\u90e8\u5206\u6570\u636e\u70b9\u3002","415e0c57":"* \u5bf9\u6700\u5927\u6df1\u5ea6\u548c\u53f6\u5b50\u6570\u91cf\u4e00\u8d77\u7c97\u8c03\u4f18\n* \u5728\u5f97\u5230\u6700\u4f18\u503c{'max_depth': 6, 'num_leaves': 20}\u540e\uff0c\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u8c03\u4f18","c3304af4":"#### age ","76d3874b":"* \u9884\u6d4b\u7ed3\u679c\u5e76\u8f93\u51facsv\u6587\u4ef6","874b31b4":"#### max_depth, num_leaves","2bf22252":"* \u5728\u8bad\u7ec3\u96c6\u4e2d\uff0cNumberOfDependents\u7684\u6700\u5927\u53d6\u503c\u4e3a20\uff0c\u5bb6\u5c5e\u4eba\u6570\u4e3a20\u4eba\u5728\u73b0\u5b9e\u4e2d\u8fd8\u7b97\u5408\u7406\uff0c\u6545\u4e0d\u5bf9\u5176\u505a\u989d\u5916\u5904\u7406\u3002","a58feeaa":"## 5. **\u6a21\u578b\u5bf9\u6bd4**","1dd897ee":"* \u901a\u8fc7\u7bb1\u578b\u56fe\uff0c\u6563\u70b9\u56fe\u4ee5\u53ca\u8ba1\u6570\u7edf\u8ba1\u4e0d\u96be\u770b\u51faDebtRatio\u662f\u5b58\u5728\u4e2a\u522b\u6570\u503c\u8fc7\u5927\u7684\u79bb\u7fa4\u70b9\u7684\uff0c\u6574\u4f53\u6570\u636e\u96c6\u4e2d\u5728[0,1]\u4e4b\u95f4\uff0c\u90a3\u4e48\u5927\u4e8e50000\u7684\u6570\u636e\u70b9\u53ea\u670912\u4e2a\uff0c\u76f8\u5bf9\u4e8e150000\u6761\u6570\u636e\u6765\u8bf4\u53ef\u5ffd\u7565\u4e0d\u8ba1\uff0c\u56e0\u6b64\u5c06\u8fd912\u4e2a\u70b9\u5254\u9664\u3002","20d2d345":"####  NumberOfTimeInTotal","1a08465a":"* \u4e4b\u540e\u6211\u4eec\u518d\u5bf9\u62bd\u6837\u53c2\u6570\u8fdb\u884c\u8c03\u4f18\n\n* feature_fraction\u53c2\u6570\u6765\u8fdb\u884c\u7279\u5f81\u7684\u5b50\u62bd\u6837\u3002\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528\u6765\u9632\u6b62\u8fc7\u62df\u5408\u53ca\u63d0\u9ad8\u8bad\u7ec3\u901f\u5ea6\u3002\n* bagging_fraction+bagging_freq\u53c2\u6570\u5fc5\u987b\u540c\u65f6\u8bbe\u7f6e\uff0cbagging_fraction\u76f8\u5f53\u4e8esubsample\u6837\u672c\u91c7\u6837\uff0c\u53ef\u4ee5\u4f7fbagging\u66f4\u5feb\u7684\u8fd0\u884c\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u964d\u62df\u5408\u3002\n* bagging_freq\u9ed8\u8ba40\uff0c\u8868\u793abagging\u7684\u9891\u7387\uff0c0\u610f\u5473\u7740\u6ca1\u6709\u4f7f\u7528bagging\uff0ck\u610f\u5473\u7740\u6bcfk\u8f6e\u8fed\u4ee3\u8fdb\u884c\u4e00\u6b21bagging\u3002","dd76a44a":"1. \u95ee\u9898\u80cc\u666f <br>\n    1.1 \u95ee\u9898\u63cf\u8ff0<br>\n    1.2 \u7279\u5f81\u63cf\u8ff0<br>\n2. \u5bfc\u5165\u6570\u636e<br>\n3. \u6570\u636e\u89c2\u5bdf\u4e0e\u5206\u6790<br>\n    3.1 \u6570\u636e\u6982\u89c8<br>\n    3.2 \u7f3a\u5931\u503c\u60c5\u51b5<br>\n    3.3 \u5f02\u5e38\u503c\u60c5\u51b5\u4e0e\u7279\u5f81\u5206\u6790<br>\n    3.4 \u6570\u636e\u76f8\u5173\u6027<br>\n    3.5 \u6570\u636e\u7c7b\u522b\u5206\u5e03\u60c5\u51b5<br>\n4. \u6570\u636e\u9884\u5904\u7406<br>\n    4.1 \u5904\u7406\u7f3a\u5931\u503c<br>\n    4.2 \u5904\u7406\u5f02\u5e38\u503c<br>\n5. \u6a21\u578b\u5bf9\u6bd4<br>\n6. \u4f18\u5316\u8c03\u53c2<br>\n7. \u63d0\u4ea4<br>","44514da3":"#### DebtRatio "}}