{"cell_type":{"65123e61":"code","6d972427":"code","87d3b342":"code","4bfa7896":"code","a767b10b":"code","1da71379":"code","035de1b5":"code","65e65bc1":"code","df3a7208":"code","839b0d9a":"code","9b6ec60e":"code","48051c32":"code","f4e1335a":"code","0a22f336":"code","8fbddaa8":"code","bf1ecc93":"code","68cb177c":"code","6d2e2593":"code","5eff3f89":"code","aa3b3968":"code","d5612a38":"code","8df1019f":"code","7663f9e0":"code","94b476f4":"code","f72ffa31":"code","771a7021":"code","fa2ae820":"code","2aed38f8":"code","8ba4cc86":"code","6cc87148":"code","188f170d":"code","2f49613c":"code","9fc65db1":"code","89fae6e9":"markdown","f9d1d214":"markdown","9e2c1609":"markdown","a1cf7bce":"markdown","2b30b2fb":"markdown","d88346c1":"markdown","ab8ae0e0":"markdown","b37c43fb":"markdown","c2d49f71":"markdown","19f78bed":"markdown","10311959":"markdown"},"source":{"65123e61":"%matplotlib inline","6d972427":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom PIL import Image\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","87d3b342":"cmaps = [('Perceptually Uniform Sequential', [\n            'viridis', 'plasma', 'inferno', 'magma', 'cividis']),\n         ('Sequential', [\n            'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',\n            'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',\n            'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn']),\n         ('Sequential (2)', [\n            'binary', 'gist_yarg', 'gist_gray', 'gray', 'bone', 'pink',\n            'spring', 'summer', 'autumn', 'winter', 'cool', 'Wistia',\n            'hot', 'afmhot', 'gist_heat', 'copper']),\n         ('Diverging', [\n            'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',\n            'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic']),\n         ('Cyclic', ['twilight', 'twilight_shifted', 'hsv']),\n         ('Qualitative', [\n            'Pastel1', 'Pastel2', 'Paired', 'Accent',\n            'Dark2', 'Set1', 'Set2', 'Set3',\n            'tab10', 'tab20', 'tab20b', 'tab20c']),\n         ('Miscellaneous', [\n            'flag', 'prism', 'ocean', 'gist_earth', 'terrain', 'gist_stern',\n            'gnuplot', 'gnuplot2', 'CMRmap', 'cubehelix', 'brg',\n            'gist_rainbow', 'rainbow', 'jet', 'turbo', 'nipy_spectral',\n            'gist_ncar'])]\n\n\ngradient = np.linspace(0, 1, 256)\ngradient = np.vstack((gradient, gradient))\n\n\ndef plot_color_gradients(cmap_category, cmap_list):\n    # Create figure and adjust figure height to number of colormaps\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows-1)*0.1)*0.22\n    fig, axs = plt.subplots(nrows=nrows, figsize=(6.4, figh))\n    fig.subplots_adjust(top=1-.35\/figh, bottom=.15\/figh, left=0.2, right=0.99)\n\n    axs[0].set_title(cmap_category + ' colormaps', fontsize=14)\n\n    for ax, name in zip(axs, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))\n        ax.text(-.01, .5, name, va='center', ha='right', fontsize=10,\n                transform=ax.transAxes)\n\n    # Turn off *all* ticks & spines, not just the ones with colormaps.\n    for ax in axs:\n        ax.set_axis_off()\n\n\nfor cmap_category, cmap_list in cmaps:\n    plot_color_gradients(cmap_category, cmap_list)\n\nplt.show()","4bfa7896":"panda = mpimg.imread('..\/input\/film-image\/panda2.jpg')\nprint(panda)","a767b10b":"ele = mpimg.imread('..\/input\/film-image\/elephant.jpg')\nprint(ele)","1da71379":"oran = mpimg.imread('..\/input\/film-image\/orangutan.jpeg')\nprint(oran)","035de1b5":"pandalot = plt.imshow(panda)","65e65bc1":"eleplot = plt.imshow(ele)","df3a7208":"oranplot = plt.imshow(oran)","839b0d9a":"# This is array slicing.\nlum_panda = panda[:, :, 0]\n\nplt.imshow(lum_panda)","9b6ec60e":"lum_oran = oran[:, :, 0]\n\nplt.imshow(lum_oran)","48051c32":"# This is array slicing.\nlum_ele = ele[:, :, 0]\n\nplt.imshow(lum_ele)","f4e1335a":"plt.imshow(lum_panda, cmap=\"gist_heat\")","0a22f336":"plt.imshow(lum_oran, cmap=\"hot\")","8fbddaa8":"eleplot = plt.imshow(lum_ele)\neleplot.set_cmap('nipy_spectral')","bf1ecc93":"pandaplot = plt.imshow(lum_panda)\nplt.colorbar()","68cb177c":"oranplot = plt.imshow(lum_oran)\nplt.colorbar()","6d2e2593":"eleplot = plt.imshow(lum_ele)\nplt.colorbar()","5eff3f89":"plt.hist(lum_panda.ravel(), bins=256, range=(200, 245), fc='k', ec='k')","aa3b3968":"plt.hist(lum_oran.ravel(), bins=256, range=(50, 245), fc='k', ec='k')","d5612a38":"plt.hist(lum_ele.ravel(), bins=256, range=(0, 100), fc='k', ec='k')","8df1019f":"pandaplot = plt.imshow(lum_panda, clim=(100, 245))","7663f9e0":"oranplot = plt.imshow(lum_oran, clim=(50, 245))","94b476f4":"eleplot = plt.imshow(lum_ele, clim=(0, 100))","f72ffa31":"fig = plt.figure()\nax = fig.add_subplot(1, 2, 1)\npandaplot = plt.imshow(lum_panda)\nax.set_title('Before')\nplt.colorbar(ticks=[0.1, 0.3, 0.5, 0.7], orientation='horizontal')\nax = fig.add_subplot(1, 2, 2)\npandaplot = plt.imshow(lum_panda)\npandaplot.set_clim(0.0, 0.7)\nax.set_title('After')\nplt.colorbar(ticks=[0.1, 0.3, 0.5, 0.7], orientation='horizontal')","771a7021":"fig = plt.figure()\nax = fig.add_subplot(1, 2, 1)\noranplot = plt.imshow(lum_oran)\nax.set_title('Before')\nplt.colorbar(ticks=[0.1, 0.3, 0.5, 0.7], orientation='horizontal')\nax = fig.add_subplot(1, 2, 2)\noranplot = plt.imshow(lum_oran)\noranplot.set_clim(0.0, 0.7)\nax.set_title('After')\nplt.colorbar(ticks=[0.1, 0.3, 0.5, 0.7], orientation='horizontal')","fa2ae820":"fig = plt.figure()\nax = fig.add_subplot(1, 2, 1)\neleplot = plt.imshow(lum_ele)\nax.set_title('Before')\nplt.colorbar(ticks=[0.1, 0.3, 0.5, 0.7], orientation='horizontal')\nax = fig.add_subplot(1, 2, 2)\neleplot = plt.imshow(lum_ele)\neleplot.set_clim(0.0, 0.7)\nax.set_title('After')\nplt.colorbar(ticks=[0.1, 0.3, 0.5, 0.7], orientation='horizontal')","2aed38f8":"panda = Image.open('..\/input\/film-image\/panda2.jpg')\npanda.thumbnail((64, 64), Image.ANTIALIAS)  # resizes image in-place\npandaplot = plt.imshow(panda)","8ba4cc86":"oran = Image.open('..\/input\/film-image\/orangutan.jpeg')\noran.thumbnail((64, 64), Image.ANTIALIAS)\noranplot = plt.imshow(oran)","6cc87148":"ele = Image.open('..\/input\/film-image\/elephant.jpg')\nele.thumbnail((64, 64), Image.ANTIALIAS)\neleplot = plt.imshow(ele)","188f170d":"pandaplot = plt.imshow(panda, interpolation=\"nearest\")","2f49613c":"oranplot = plt.imshow(oran, interpolation=\"bicubic\")","9fc65db1":"eleplot = plt.imshow(ele, interpolation=\"bicubic\")","89fae6e9":"# Applying pseudocolor schemes to image plots","f9d1d214":"# Array Interpolation schemes","9e2c1609":"# Plotting numpy arrays as images","a1cf7bce":"# If you like this notebook, please give an Upvote! Don't forget to check out my other notebooks too!\n\n* [ConnectX Baseline](https:\/\/www.kaggle.com\/brendan45774\/connectx-baseline)\n* [Countries Life Expectancy Animation](https:\/\/www.kaggle.com\/brendan45774\/countries-life-expectancy-animation)\n* [Data Visuals - Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/data-visuals-matplotlib)\n* [Digit Recognizer Solution](http:\/\/www.kaggle.com\/brendan45774\/digit-recognizer-solution)\n* [Dictionary and Pandas Cheat sheet](https:\/\/www.kaggle.com\/brendan45774\/dictionary-and-pandas-cheat-sheet)\n* [EDA Tutorial Hollywood Movies](https:\/\/www.kaggle.com\/brendan45774\/eda-tutorial-hollywood-movies)\n* [Getting started with Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/getting-started-with-matplotlib)\n* [Guide to Matplotlib Image](https:\/\/www.kaggle.com\/brendan45774\/guide-to-matplotlib-image)\n* [HOG features - Histogram of Oriented Gradients](https:\/\/www.kaggle.com\/brendan45774\/hog-features-histogram-of-oriented-gradients)\n* [How to get the lowest score](https:\/\/www.kaggle.com\/brendan45774\/how-to-get-the-lowest-score)\n* [House predict solution](http:\/\/www.kaggle.com\/brendan45774\/house-predict-solution)\n* [K-Means Clustering (Image Compression)](https:\/\/www.kaggle.com\/brendan45774\/k-means-clustering-image-compression)\n* [Kuzushiji-MNIST Panda](http:\/\/www.kaggle.com\/brendan45774\/kuzushiji-mnist-panda)\n* [Plotly Coronavirus (Covid-19)](https:\/\/www.kaggle.com\/brendan45774\/plotly-coronavirus-covid-19)\n* [Titanic Top Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution)\n* [Titanic Data Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-data-solution)\n* [Word Cloud - Analyzing Names](https:\/\/www.kaggle.com\/brendan45774\/word-cloud-analyzing-names)","2b30b2fb":"# Importing Libraries","d88346c1":"# Importing image data into Numpy arrays","ab8ae0e0":"You can also change colormaps on existing plot objects using the set_cmap() method","b37c43fb":"# For Color\/cmap Reference\n\n**Only open if needed**","c2d49f71":"# Examining a specific data range","19f78bed":"A luminosity (2D, no color) image, the default colormap, is applied. The default is viridis. There are others colors to chose.","10311959":"# Color scale reference"}}