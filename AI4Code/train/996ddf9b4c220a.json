{"cell_type":{"771faa75":"code","41480262":"code","abbb1b43":"code","c911c650":"code","1bfe7466":"code","32277bed":"code","af7866c1":"code","6c170699":"code","687cbdbc":"code","c317469f":"code","63379db2":"code","41e345b9":"code","35a7b0ee":"code","f98220d2":"code","c3dbb984":"code","71d4f0df":"code","78e21585":"code","b5ddc578":"code","5ff74289":"code","67bf8671":"code","0ddb55e8":"code","54b67a3e":"code","fd2c19a1":"code","f5250027":"code","131d62a2":"code","c6f3d63d":"code","04e8b307":"code","6a66ecf9":"code","ccf1addb":"code","afdea129":"code","ec9fe96e":"code","349bd847":"code","369ef93f":"code","e7021644":"code","9a3b8100":"code","b5a9b508":"markdown","46df994a":"markdown"},"source":{"771faa75":"import numpy as np \nimport pandas as pd\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss\n\nfrom pdpbox import pdp\nfrom plotnine import *","41480262":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","abbb1b43":"train_data = pd.read_json('..\/input\/two-sigma-connect-rental-listing-inquiries\/train.json.zip', convert_dates=['created'])\ntest_data = pd.read_json('..\/input\/two-sigma-connect-rental-listing-inquiries\/test.json.zip', convert_dates=['created'])","c911c650":"train_data.shape","1bfe7466":"test_data.shape","32277bed":"train_data.info()","af7866c1":"test_data.info()","6c170699":"train_data.head()","687cbdbc":"train_data[\"num_photos\"] = train_data[\"photos\"].apply(len)\ntrain_data[\"num_features\"] = train_data[\"features\"].apply(len)\ntrain_data[\"num_description_words\"] = train_data[\"description\"].apply(lambda x: len(x.split(\" \")))\ntrain_data[\"created\"] = pd.to_datetime(train_data[\"created\"])\ntrain_data[\"created_year\"] = train_data[\"created\"].dt.year\ntrain_data[\"created_month\"] = train_data[\"created\"].dt.month\ntrain_data[\"created_day\"] = train_data[\"created\"].dt.day","c317469f":"num_feats = [\"bathrooms\", \"bedrooms\", \"latitude\", \"longitude\", \"price\",\n             \"num_photos\", \"num_features\", \"num_description_words\",\n             \"created_year\", \"created_month\", \"created_day\"]\nX = train_data[num_feats]\ny = train_data[\"interest_level\"]\nX.head()","63379db2":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.33)","41e345b9":"clf = RandomForestClassifier(n_estimators=100, n_jobs=-1,max_depth=15,bootstrap=True,random_state=42)\nclf.fit(X_train, y_train)\ny_val_pred = clf.predict_proba(X_val)\nlog_loss(y_val, y_val_pred)","35a7b0ee":"print(clf.score(X_train,y_train))\nprint(clf.score(X_val,y_val))","f98220d2":"def get_sample(df,n):\n    \n    idxs = sorted(np.random.permutation(len(df))[:n])\n    return df.iloc[idxs].copy()","c3dbb984":"x_all = get_sample(X_train[X_train.bedrooms > 0], 60000)","71d4f0df":"ggplot(x_all, aes('bedrooms', 'price'))+stat_smooth(se=True, method='lowess' )","78e21585":"def plot_pdp(feat, clusters=None, feat_name=None):\n    feat_name = feat_name or feat\n    p = pdp.pdp_isolate(clf, x_all, x_all.columns, feat)\n    return pdp.pdp_plot(p, feat_name, plot_lines=True,\n                        cluster=clusters is not None,\n                        n_cluster_centers=clusters)","b5ddc578":"plot_pdp('bedrooms')","5ff74289":"df_ext = X.copy()\ndf_ext['is_valid'] = 1","67bf8671":"df_ext.is_valid[:5021]=0","0ddb55e8":"df_ext.head()","54b67a3e":"print(X.shape,X_train.shape, X_val.shape)","fd2c19a1":"X_train_1, X_val_1, y_train_1, y_val_1 = train_test_split(df_ext, y, test_size=0.33)","f5250027":"print(X.shape,X_train_1.shape, X_val_1.shape)","131d62a2":"df_ext.info()","c6f3d63d":"X_df_ext = df_ext[num_feats]\ny_df_ext = df_ext[\"is_valid\"]\nX_df_ext.head()","04e8b307":"m = RandomForestClassifier(n_estimators=30, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_df_ext, y_df_ext);\nm.oob_score_","6a66ecf9":"def rf_feat_importance(m, df):\n    return pd.DataFrame({'columns':df.columns, 'importance':m.feature_importances_}\n                       ).sort_values('importance', ascending=False)","ccf1addb":"fi= rf_feat_importance(m,X_df_ext); fi[:4]","afdea129":"df_ext.info()","ec9fe96e":"df_ext.drop(['created_month'], axis=1, inplace=True)\n","349bd847":"X_df_ext.drop(['created_month'], axis=1, inplace=True)","369ef93f":"X_train_1.drop(['created_month'], axis=1, inplace=True)\nX_val_1.drop(['created_month'], axis=1, inplace=True)","e7021644":"t = RandomForestClassifier(n_estimators=100, n_jobs=-1,max_depth=15,bootstrap=True,random_state=42)\nt.fit(X_train_1, y_train_1)\ny_val_pred = t.predict_proba(X_val_1)\nlog_loss(y_val_1, y_val_pred)","9a3b8100":"print(t.score(X_train_1,y_train_1))\nprint(t.score(X_val_1,y_val_1))","b5a9b508":"# **Extrapolation**","46df994a":"# **PDP**"}}