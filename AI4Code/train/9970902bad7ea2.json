{"cell_type":{"566876eb":"code","a743eab0":"code","0c5e0c71":"code","c84106e5":"code","95aa5b98":"code","b9f34ded":"code","953f0b64":"code","85d4ab57":"markdown","dfae2ec5":"markdown","c489853b":"markdown","6b930a11":"markdown","2700f221":"markdown","ba50c6b1":"markdown"},"source":{"566876eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sbn\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report, plot_confusion_matrix\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a743eab0":"df = pd.read_csv(\"..\/input\/glass\/glass.csv\")\ndf.describe()","0c5e0c71":"X = df.iloc[:, 0:9]\ny = df.iloc[:, 9]","c84106e5":"correlation=df.corr()\nplt.figure(figsize=(10,10))\nsbn.heatmap(correlation,annot=True,cmap=plt.cm.Blues)","95aa5b98":"model = RandomForestClassifier()\n# Applying GridSearchCV to find the best hyperparameters for doing random forest classification\nparameters = [{'n_estimators': [10, 20, 50]}]\nclf = GridSearchCV(model, parameters, cv=5, scoring=\"accuracy\")\nclf.fit(X, y)   \nprint(clf.best_params_)","b9f34ded":"clf = RandomForestClassifier(n_estimators=50)\nclf.fit(X, y)","953f0b64":"y_hat = clf.predict(X)\nprint(classification_report(y, y_hat))\nprint(plot_confusion_matrix(clf, X, y, cmap=plt.cm.Blues,\n                            display_labels=(y.unique())))","85d4ab57":"# Creating model using best parameters","dfae2ec5":"# Applying GridSearchCV to find the best hyperparameters","c489853b":"# Analysing","6b930a11":"# Importing dataset","2700f221":"# Dependent and Independent variables","ba50c6b1":"# Predicting and evaluating its accuracy"}}