{"cell_type":{"9d5f7fe5":"code","68d9a255":"code","a7d6b122":"code","376c3b3a":"code","4a77509f":"code","3f05395a":"code","a5aec3e5":"code","bdfbf9aa":"code","1ccda8c7":"code","8b62d357":"code","2734e975":"code","cdbdce24":"code","14d88d3a":"code","69727ed3":"code","1f8e1669":"code","8989b75f":"code","8db6704c":"code","54336003":"code","e5878da6":"code","4c27b652":"code","45e893bd":"code","ec2d9b72":"code","367654a2":"code","77509410":"code","bd5e37bf":"code","cad5e2c3":"code","8cb3419a":"code","4bbd4aa4":"code","6d5e406d":"code","aea6cd45":"code","6e57b82e":"code","b6c4cb15":"code","65c07b5a":"code","fd1bcf7e":"code","9e9a1adb":"code","f2233f87":"code","40cb4630":"code","30d80ec7":"code","c2c877cd":"code","7a73d785":"code","db196502":"code","6bb90ed8":"code","a591e237":"code","6738ba89":"code","2f5cdab0":"code","783c2b3a":"code","2f291776":"code","f416230f":"code","b779cd22":"code","babfe262":"code","0834bdaf":"code","47cb308d":"code","b2d0eb78":"markdown","6a1b496b":"markdown","1f0453cb":"markdown","ce8d832e":"markdown","3fee2c04":"markdown","3d464b67":"markdown","00f4fd1f":"markdown","fa1838d7":"markdown","fc6f6e15":"markdown","8a225269":"markdown","835db7b1":"markdown","dfcc8f43":"markdown","6f18eebf":"markdown","735fd288":"markdown","6d9ad92a":"markdown","afb889dc":"markdown","f52ae877":"markdown"},"source":{"9d5f7fe5":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\nimport skimage\nfrom skimage.morphology import convex_hull_image, erosion\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D,\\\nZeroPadding2D, Convolution2D, ZeroPadding2D, Conv2DTranspose,ReLU, UpSampling2D, Concatenate, Conv2DTranspose\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\nfrom keras import backend\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","68d9a255":"Water_IMG_Path = Path(\"..\/input\/satellite-images-of-water-bodies\/Water Bodies Dataset\/Images\")\nWater_Mask_Path = Path(\"..\/input\/satellite-images-of-water-bodies\/Water Bodies Dataset\/Masks\")","a7d6b122":"Water_JPG = list(Water_IMG_Path.glob(r\"*.jpg\"))\nMask_JPG = list(Water_Mask_Path.glob(r\"*.jpg\"))","376c3b3a":"Water_JPG_Series = pd.Series(Water_JPG,name=\"JPG\").astype(str)\nMask_JPG_Series = pd.Series(Mask_JPG,name=\"MASK\").astype(str)","4a77509f":"Main_Water_Data = pd.concat([Water_JPG_Series,Mask_JPG_Series],axis=1)","3f05395a":"print(Main_Water_Data.head(-1))","a5aec3e5":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\nExample_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][4]),cv2.COLOR_BGR2RGB)\nExample_Mask = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][4]),cv2.COLOR_BGR2RGB)\n\naxis[0].imshow(Example_Water)\naxis[0].set_xlabel(Example_Water.shape)\naxis[0].set_ylabel(Example_Water.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Example_Mask)\naxis[1].set_xlabel(Example_Mask.shape)\naxis[1].set_ylabel(Example_Mask.size)\naxis[1].set_title(\"MASK\")","bdfbf9aa":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\nExample_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][400]),cv2.COLOR_BGR2RGB)\nExample_Mask = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][400]),cv2.COLOR_BGR2RGB)\n\naxis[0].imshow(Example_Water)\naxis[0].set_xlabel(Example_Water.shape)\naxis[0].set_ylabel(Example_Water.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Example_Mask)\naxis[1].set_xlabel(Example_Mask.shape)\naxis[1].set_ylabel(Example_Mask.size)\naxis[1].set_title(\"MASK\")","1ccda8c7":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\nExample_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][1237]),cv2.COLOR_BGR2RGB)\nExample_Mask = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][1237]),cv2.COLOR_BGR2RGB)\n\naxis[0].imshow(Example_Water)\naxis[0].set_xlabel(Example_Water.shape)\naxis[0].set_ylabel(Example_Water.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Example_Mask)\naxis[1].set_xlabel(Example_Mask.shape)\naxis[1].set_ylabel(Example_Mask.size)\naxis[1].set_title(\"MASK\")","8b62d357":"figure,axis = plt.subplots(5,5,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    Example_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][indexing]),cv2.COLOR_BGR2RGB)\n    \n    operations.set_ylabel(Example_Water.shape)\n    operations.set_xlabel(round(np.mean(Example_Water)))\n    operations.imshow(Example_Water)\n    \nplt.tight_layout()\nplt.show()","2734e975":"figure,axis = plt.subplots(5,5,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    Example_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][indexing]),cv2.COLOR_BGR2RGB)\n    \n    operations.set_ylabel(Example_Water.shape)\n    operations.set_xlabel(round(np.mean(Example_Water)))\n    operations.imshow(Example_Water)\n    \nplt.tight_layout()\nplt.show()","cdbdce24":"figure,axis = plt.subplots(1,3,figsize=(10,10))\n\nExample_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][1237]),cv2.COLOR_BGR2RGB)\nExample_Mask = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][1237]),cv2.COLOR_BGR2RGB)\n\n_,Threshold_Water = cv2.threshold(Example_Water,10,255,cv2.THRESH_BINARY_INV)\n\naxis[0].imshow(Example_Water)\naxis[0].set_xlabel(Example_Water.shape)\naxis[0].set_ylabel(Example_Water.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Example_Mask)\naxis[1].set_xlabel(Example_Mask.shape)\naxis[1].set_ylabel(Example_Mask.size)\naxis[1].set_title(\"MASK\")\naxis[2].imshow(Threshold_Water)\naxis[2].set_xlabel(Threshold_Water.shape)\naxis[2].set_ylabel(Threshold_Water.size)\naxis[2].set_title(\"THRESHOLD\")\n","14d88d3a":"figure,axis = plt.subplots(1,3,figsize=(10,10))\n\nExample_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][100]),cv2.COLOR_BGR2RGB)\nExample_Mask = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][100]),cv2.COLOR_BGR2RGB)\n\n_,Threshold_Water = cv2.threshold(Example_Water,150,255,cv2.THRESH_BINARY_INV)\n\naxis[0].imshow(Example_Water)\naxis[0].set_xlabel(Example_Water.shape)\naxis[0].set_ylabel(Example_Water.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Example_Mask)\naxis[1].set_xlabel(Example_Mask.shape)\naxis[1].set_ylabel(Example_Mask.size)\naxis[1].set_title(\"MASK\")\naxis[2].imshow(Threshold_Water)\naxis[2].set_xlabel(Threshold_Water.shape)\naxis[2].set_ylabel(Threshold_Water.size)\naxis[2].set_title(\"THRESHOLD\")","69727ed3":"figure,axis = plt.subplots(1,3,figsize=(10,10))\nmask_k = np.ones((5,5),dtype=\"uint8\")\n\nlower_blue = np.array([90, 50, 70], dtype=np.uint8)\nupper_blue = np.array([128, 255, 255], dtype=np.uint8)\n\n\nExample_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][100]),cv2.COLOR_BGR2RGB)\nExample_Mask = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][100]),cv2.COLOR_BGR2RGB)\n\nHSV_Water = cv2.cvtColor(Example_Water,cv2.COLOR_RGB2HSV)\nInrange_Mask = cv2.inRange(HSV_Water,lower_blue,upper_blue)\nDilate_Img = cv2.dilate(Inrange_Mask,mask_k)\nB\u0131twise_Img = cv2.bitwise_and(Example_Water,Example_Water,mask=Dilate_Img)\n\naxis[0].imshow(Example_Water)\naxis[0].set_xlabel(Example_Water.shape)\naxis[0].set_ylabel(Example_Water.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Example_Mask)\naxis[1].set_xlabel(Example_Mask.shape)\naxis[1].set_ylabel(Example_Mask.size)\naxis[1].set_title(\"MASK\")\naxis[2].imshow(B\u0131twise_Img)\naxis[2].set_xlabel(B\u0131twise_Img.shape)\naxis[2].set_ylabel(B\u0131twise_Img.size)\naxis[2].set_title(\"BITWISE\")\n","1f8e1669":"figure,axis = plt.subplots(1,3,figsize=(10,10))\nmask_k = np.ones((5,5),dtype=\"uint8\")\n\nlower_blue = np.array([90, 50, 70], dtype=np.uint8)\nupper_blue = np.array([128, 255, 255], dtype=np.uint8)\n\n\nExample_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][1000]),cv2.COLOR_BGR2RGB)\nExample_Mask = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][1000]),cv2.COLOR_BGR2RGB)\n\nHSV_Water = cv2.cvtColor(Example_Water,cv2.COLOR_RGB2HSV)\nInrange_Mask = cv2.inRange(HSV_Water,lower_blue,upper_blue)\nDilate_Img = cv2.dilate(Inrange_Mask,mask_k)\nB\u0131twise_Img = cv2.bitwise_and(Example_Water,Example_Water,mask=Dilate_Img)\n\naxis[0].imshow(Example_Water)\naxis[0].set_xlabel(Example_Water.shape)\naxis[0].set_ylabel(Example_Water.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Example_Mask)\naxis[1].set_xlabel(Example_Mask.shape)\naxis[1].set_ylabel(Example_Mask.size)\naxis[1].set_title(\"MASK\")\naxis[2].imshow(B\u0131twise_Img)\naxis[2].set_xlabel(B\u0131twise_Img.shape)\naxis[2].set_ylabel(B\u0131twise_Img.size)\naxis[2].set_title(\"BITWISE\")","8989b75f":"figure,axis = plt.subplots(1,3,figsize=(10,10))\nmask_k = np.ones((5,5),dtype=\"uint8\")\n\nlower_blue = np.array([90, 50, 70], dtype=np.uint8)\nupper_blue = np.array([128, 255, 255], dtype=np.uint8)\n\n\nExample_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][589]),cv2.COLOR_BGR2RGB)\nExample_Mask = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][589]),cv2.COLOR_BGR2RGB)\n\nHSV_Water = cv2.cvtColor(Example_Water,cv2.COLOR_RGB2HSV)\nInrange_Mask = cv2.inRange(HSV_Water,lower_blue,upper_blue)\nDilate_Img = cv2.dilate(Inrange_Mask,mask_k)\nB\u0131twise_Img = cv2.bitwise_and(Example_Water,Example_Water,mask=Dilate_Img)\n\naxis[0].imshow(Example_Water)\naxis[0].set_xlabel(Example_Water.shape)\naxis[0].set_ylabel(Example_Water.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Example_Mask)\naxis[1].set_xlabel(Example_Mask.shape)\naxis[1].set_ylabel(Example_Mask.size)\naxis[1].set_title(\"MASK\")\naxis[2].imshow(B\u0131twise_Img)\naxis[2].set_xlabel(B\u0131twise_Img.shape)\naxis[2].set_ylabel(B\u0131twise_Img.size)\naxis[2].set_title(\"BITWISE\")","8db6704c":"figure,axis = plt.subplots(1,3,figsize=(10,10))\nmask_k = np.ones((5,5),dtype=\"uint8\")\n\nlower_blue = np.array([90, 50, 70], dtype=np.uint8)\nupper_blue = np.array([128, 255, 255], dtype=np.uint8)\n\n\nExample_Water = cv2.cvtColor(cv2.imread(Main_Water_Data[\"JPG\"][89]),cv2.COLOR_BGR2RGB)\nExample_Mask = cv2.cvtColor(cv2.imread(Main_Water_Data[\"MASK\"][89]),cv2.COLOR_BGR2RGB)\n\nHSV_Water = cv2.cvtColor(Example_Water,cv2.COLOR_RGB2HSV)\nInrange_Mask = cv2.inRange(HSV_Water,lower_blue,upper_blue)\nDilate_Img = cv2.dilate(Inrange_Mask,mask_k)\nB\u0131twise_Img = cv2.bitwise_and(Example_Water,Example_Water,mask=Dilate_Img)\n\naxis[0].imshow(Example_Water)\naxis[0].set_xlabel(Example_Water.shape)\naxis[0].set_ylabel(Example_Water.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Example_Mask)\naxis[1].set_xlabel(Example_Mask.shape)\naxis[1].set_ylabel(Example_Mask.size)\naxis[1].set_title(\"MASK\")\naxis[2].imshow(B\u0131twise_Img)\naxis[2].set_xlabel(B\u0131twise_Img.shape)\naxis[2].set_ylabel(B\u0131twise_Img.size)\naxis[2].set_title(\"BITWISE\")","54336003":"Water_List = []\nMask_List = []\n\nfor water_i,mask_i in zip(Main_Water_Data.JPG,Main_Water_Data.MASK):\n    \n    Reading_IMG_Water = cv2.cvtColor(cv2.imread(water_i),cv2.COLOR_BGR2RGB)\n    Reading_IMG_Water = cv2.resize(Reading_IMG_Water,(180,180))\n    Reading_IMG_Water = Reading_IMG_Water \/ 255.\n    \n    Reading_IMG_Mask = cv2.cvtColor(cv2.imread(mask_i),cv2.COLOR_BGR2RGB)\n    Reading_IMG_Mask = cv2.resize(Reading_IMG_Mask,(180,180))\n    Reading_IMG_Mask = Reading_IMG_Mask \/ 255.\n    \n    Water_List.append(Reading_IMG_Water)\n    Mask_List.append(Reading_IMG_Mask[:,:,0])","e5878da6":"print(\"MASK IMG SHAPE: \",Mask_List[0].shape)\nprint(\"WATER IMG SHAPE: \",Water_List[0].shape)","4c27b652":"print(\"MASK IMG TYPE: \",Mask_List[0].dtype)\nprint(\"WATER IMG TYPE: \",Water_List[0].dtype)","45e893bd":"Mask_Array = np.array(Mask_List)\nWater_Array = np.array(Water_List)","ec2d9b72":"print(\"MASK ARRAY SHAPE: \",Mask_Array.shape)\nprint(\"WATER ARRAY SHAPE: \",Water_Array.shape)","367654a2":"compile_loss = \"binary_crossentropy\"\ncompile_optimizer = \"adam\"\ncompile_metrics = [\"accuracy\"]\ninput_dim = (Water_Array.shape[1],Water_Array.shape[2],Water_Array.shape[3])\noutput_class = 1","77509410":"Early_Stopper = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=3,mode=\"min\")\nCheckpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                      save_best_only=True,\n                                                      save_weights_only=True,\n                                                      filepath=\".\/modelcheck\")","bd5e37bf":"Encoder_G = Sequential()\nEncoder_G.add(Conv2D(32,(2,2),kernel_initializer = 'he_normal'))\nEncoder_G.add(BatchNormalization())\nEncoder_G.add(ReLU())\n#\nEncoder_G.add(Conv2D(64,(2,2),kernel_initializer = 'he_normal'))\nEncoder_G.add(BatchNormalization())\nEncoder_G.add(ReLU())\n#\nEncoder_G.add(Conv2D(128,(2,2),kernel_initializer = 'he_normal'))\nEncoder_G.add(BatchNormalization())\nEncoder_G.add(ReLU())","cad5e2c3":"Decoder_G = Sequential()\nDecoder_G.add(Conv2DTranspose(64,(2,2)))\nDecoder_G.add(ReLU())\n#\nDecoder_G.add(Conv2DTranspose(32,(2,2)))\nDecoder_G.add(ReLU())\n#\nDecoder_G.add(Conv2DTranspose(1,(2,2)))\nDecoder_G.add(ReLU())","8cb3419a":"Auto_Encoder = Sequential([Encoder_G,Decoder_G])","4bbd4aa4":"Auto_Encoder.compile(loss=compile_loss,optimizer=compile_optimizer,metrics=compile_metrics)","6d5e406d":"Auto_Encoder_Model = Auto_Encoder.fit(Water_Array,Mask_Array,epochs=25,callbacks=[Early_Stopper,Checkpoint_Model])","aea6cd45":"Prediction_IMG = Auto_Encoder.predict(Water_Array[:30])","6e57b82e":"print(Prediction_IMG[20].shape)","b6c4cb15":"figure,axis = plt.subplots(1,2,figsize=(10,10))\nprediction_img_number = 1\n\nOriginal_Img = Water_Array[prediction_img_number]\nPredict_Mask = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"MASK\")","65c07b5a":"figure,axis = plt.subplots(1,2,figsize=(10,10))\nprediction_img_number = 12\n\nOriginal_Img = Water_Array[prediction_img_number]\nPredict_Mask = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"MASK\")","fd1bcf7e":"figure,axis = plt.subplots(1,2,figsize=(10,10))\nprediction_img_number = 13\n\nOriginal_Img = Water_Array[prediction_img_number]\nPredict_Mask = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"MASK\")","9e9a1adb":"figure,axis = plt.subplots(1,2,figsize=(10,10))\nprediction_img_number = 27\n\nOriginal_Img = Water_Array[prediction_img_number]\nPredict_Mask = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"WATER\")\naxis[1].imshow(Predict_Mask)\naxis[1].set_xlabel(Predict_Mask.shape)\naxis[1].set_ylabel(Predict_Mask.size)\naxis[1].set_title(\"MASK\")","f2233f87":"figure,axis = plt.subplots(5,6,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    Predict_Mask = Prediction_IMG[indexing]\n    \n    operations.set_ylabel(Predict_Mask.shape)\n    operations.set_xlabel(round(np.mean(Predict_Mask)))\n    operations.imshow(Predict_Mask)\n    \nplt.tight_layout()\nplt.show()","40cb4630":"def prediction_process(image,model):\n    backend.set_image_data_format('channels_last')\n\n    Non_S_IMG = cv2.cvtColor(cv2.imread(image),\n                            cv2.COLOR_BGR2RGB)\n\n    Resize_IMG = cv2.resize(Non_S_IMG,(180,180))\n    Resize_IMG = Resize_IMG\/255.\n    Resize_IMG_Prediction = Resize_IMG.reshape(-1,Resize_IMG.shape[0],Resize_IMG.shape[1],Resize_IMG.shape[2])\n    Prediction_IMG_Another = model.predict(Resize_IMG_Prediction)\n    Prediction_IMG_Another = Prediction_IMG_Another.reshape(Prediction_IMG_Another.shape[1],\n                                                        Prediction_IMG_Another.shape[2],\n                                                        Prediction_IMG_Another.shape[3])\n    \n    return Resize_IMG,Prediction_IMG_Another","30d80ec7":"Resize_Image,Prediction_N_S_Image = prediction_process(\"..\/input\/water-secret\/su\/1984.jpg\",Auto_Encoder)\n\nfigure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Resize_Image)\naxis[0].set_xlabel(Resize_Image.shape)\naxis[0].set_ylabel(Resize_Image.size)\naxis[0].set_title(\"1984-ORIGINAL\")\naxis[1].imshow(Prediction_N_S_Image)\naxis[1].set_xlabel(Prediction_N_S_Image.shape)\naxis[1].set_ylabel(Prediction_N_S_Image.size)\naxis[1].set_title(\"1984-MASK\")\n\nplt.savefig(\"1984.png\")","c2c877cd":"Resize_Image,Prediction_N_S_Image = prediction_process(\"..\/input\/water-secret\/su\/1999.jpg\",Auto_Encoder)\n\nfigure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Resize_Image)\naxis[0].set_xlabel(Resize_Image.shape)\naxis[0].set_ylabel(Resize_Image.size)\naxis[0].set_title(\"1999-ORIGINAL\")\naxis[1].imshow(Prediction_N_S_Image)\naxis[1].set_xlabel(Prediction_N_S_Image.shape)\naxis[1].set_ylabel(Prediction_N_S_Image.size)\naxis[1].set_title(\"1999-MASK\")\n\nplt.savefig(\"1999.png\")","7a73d785":"Resize_Image,Prediction_N_S_Image = prediction_process(\"..\/input\/water-secret\/su\/2012.jpg\",Auto_Encoder)\n\nfigure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Resize_Image)\naxis[0].set_xlabel(Resize_Image.shape)\naxis[0].set_ylabel(Resize_Image.size)\naxis[0].set_title(\"2012-ORIGINAL\")\naxis[1].imshow(Prediction_N_S_Image)\naxis[1].set_xlabel(Prediction_N_S_Image.shape)\naxis[1].set_ylabel(Prediction_N_S_Image.size)\naxis[1].set_title(\"2012-MASK\")\n\nplt.savefig(\"2012.png\")","db196502":"Resize_Image,Prediction_N_S_Image = prediction_process(\"..\/input\/water-secret\/su\/2017.jpg\",Auto_Encoder)\n\nfigure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Resize_Image)\naxis[0].set_xlabel(Resize_Image.shape)\naxis[0].set_ylabel(Resize_Image.size)\naxis[0].set_title(\"2017-ORIGINAL\")\naxis[1].imshow(Prediction_N_S_Image)\naxis[1].set_xlabel(Prediction_N_S_Image.shape)\naxis[1].set_ylabel(Prediction_N_S_Image.size)\naxis[1].set_title(\"2017-MASK\")\n\nplt.savefig(\"2017.png\")","6bb90ed8":"Resize_Image,Prediction_N_S_Image = prediction_process(\"..\/input\/water-secret\/su\/2020.jpg\",Auto_Encoder)\n\nfigure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Resize_Image)\naxis[0].set_xlabel(Resize_Image.shape)\naxis[0].set_ylabel(Resize_Image.size)\naxis[0].set_title(\"2020-ORIGINAL\")\naxis[1].imshow(Prediction_N_S_Image)\naxis[1].set_xlabel(Prediction_N_S_Image.shape)\naxis[1].set_ylabel(Prediction_N_S_Image.size)\naxis[1].set_title(\"2020-MASK\")\n\nplt.savefig(\"2020.png\")","a591e237":"Ice_Video_Set = \"..\/input\/climate-change-video-set-nasa\/climate\/nsceeu_1.mp4\"","6738ba89":"Prediction_IMG_List = []\nCapture_Video = cv2.VideoCapture(Ice_Video_Set)\n\nwhile Capture_Video.isOpened():\n    \n    ret,frame = Capture_Video.read()\n    \n    if ret != True:\n        break\n        \n    if Capture_Video.isOpened():\n            \n        Transformation_IMG = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)\n        Resize_IMG = cv2.resize(Transformation_IMG,(180,180))\n        Resize_IMG = Resize_IMG \/ 255.\n        Resize_IMG_Prediction = Resize_IMG.reshape(-1,Resize_IMG.shape[0],Resize_IMG.shape[1],Resize_IMG.shape[2])\n        Prediction_IMG_Another = Auto_Encoder.predict(Resize_IMG_Prediction)\n        Prediction_IMG_Another = Prediction_IMG_Another.reshape(Prediction_IMG_Another.shape[1],\n                                                        Prediction_IMG_Another.shape[2],\n                                                        Prediction_IMG_Another.shape[3])\n        \n        Prediction_IMG_List.append(Prediction_IMG_Another)\n    \n\n        \n        \nCapture_Video.release()","2f5cdab0":"Prediction_Array = np.array(Prediction_IMG_List)","783c2b3a":"print(Prediction_Array.shape)","2f291776":"def simple_vision(image):\n    \n    figure = plt.figure(figsize=(10,10))\n    \n    plt.xlabel(np.mean(image))\n    plt.ylabel(image.size)\n    plt.imshow(image)","f416230f":"simple_vision(Prediction_Array[12])","b779cd22":"simple_vision(Prediction_Array[112])","babfe262":"simple_vision(Prediction_Array[222])","0834bdaf":"simple_vision(Prediction_Array[300])","47cb308d":"simple_vision(Prediction_Array[379])","b2d0eb78":"#### TO SERIES","6a1b496b":"#### GENERAL CHECKING","1f0453cb":"# PACKAGES AND LIBRARIES","ce8d832e":"#### MAIN PATH","3fee2c04":"#### TO DATAFRAME","3d464b67":"# HISTORY\n\n#### Context\n* A collection of water bodies images captured by the Sentinel-2 Satellite. Each image comes with a black and white mask where white represents water and black represents something else but water. The masks were generated by calculating the NWDI (Normalized Water Difference Index) which is frequently used to detect and measure vegetation in satellite images, but a greater threshold was used to detect water bodies.","00f4fd1f":"#### INRANGE EXAMPLE","fa1838d7":"#### THRESHOLD EXAMPLE","fc6f6e15":"# DATA PROCESS","8a225269":"#### IMAGE PATH","835db7b1":"#### PREDICTION \/ THE MODEL HAS NEVER SEEN BEFORE","dfcc8f43":"# VISION","6f18eebf":"#### TRANSFORMATION","735fd288":"# MODEL","6d9ad92a":"# PATH,LABEL,TRANSFORMATION PROCESS","afb889dc":"#### PREDICTION","f52ae877":"#### PREDICTION FOR VIDEO \/ THE MODEL HAS NEVER SEEN BEFORE"}}