{"cell_type":{"379dec8c":"code","b077a967":"code","8b1256fd":"code","ec2b5359":"code","24158025":"code","60714905":"code","9c66acca":"code","4746cb1c":"code","f79c21a0":"code","efef35a2":"code","60cbb30b":"code","9cbc2adb":"code","16dd0a9b":"code","a2ae5a97":"code","6376788f":"code","3c7c5d83":"code","9da31222":"code","8e794eb2":"code","28bd1d5d":"code","12b83766":"code","64d065d7":"code","1542b7ce":"code","a4514d4b":"code","43e85812":"code","94f3592b":"code","a59990e6":"code","91e97b0c":"code","04c176fd":"markdown","f432fe8d":"markdown","ff757581":"markdown","3195e5dc":"markdown","e9acdc36":"markdown","3f408fef":"markdown","20bd2e08":"markdown","d81ecc4d":"markdown","364658fd":"markdown","9ed595d9":"markdown"},"source":{"379dec8c":"import numpy as np\nimport pandas as pd\nfrom sklearn import metrics\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Using Tensorflow Keras instead of the original Keras\n\nfrom tensorflow import keras\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense","b077a967":"(xtrain,ytrain),(xtest,ytest)=mnist.load_data()","8b1256fd":"xtrain.shape","ec2b5359":"xtest.shape ","24158025":"ytrain.shape","60714905":"ytest.shape ","9c66acca":"plt.imshow(xtrain[1,:,:],cmap='gray')","4746cb1c":"ytrain[1]","f79c21a0":"plt.imshow(xtest[0,:,:],cmap='gray')","efef35a2":"ytest[0]","60cbb30b":"L=pd.DataFrame(ytrain)\nL[0].value_counts()","9cbc2adb":"#Represent Training & Testing samples suitable for #tensorflow backend\n\nx_train=xtrain.reshape(xtrain.shape[0],784).astype('float32')\nx_test=xtest.reshape(xtest.shape[0],784).astype('float32')","16dd0a9b":"x_test.shape","a2ae5a97":"x_train\/=255\nx_test\/=255","6376788f":"y_train = keras.utils.to_categorical(ytrain, 10)\ny_test = keras.utils.to_categorical(ytest, 10)","3c7c5d83":"model = Sequential()","9da31222":"# Define model architecture\n\nmodel.add(Dense(784,activation='relu'))\nmodel.add(Dense(100, activation ='relu'))\nmodel.add(Dense(10,activation='softmax'))","8e794eb2":"model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","28bd1d5d":"history=model.fit(x_train, y_train, epochs=100, batch_size=256, verbose=1)","12b83766":"loss, acc = model.evaluate(x_test, y_test, verbose=0)\nprint('Accuracy: %.3f'  % acc)\nprint('Loss: %.3f' % loss)","64d065d7":"from numpy import where\nfrom matplotlib import pyplot\n# plot loss during training\npyplot.subplot(211)\npyplot.title('Loss')\npyplot.plot(history.history['loss'], label='train')\npyplot.legend()","1542b7ce":"%matplotlib inline\nfrom matplotlib import pyplot\nfrom numpy import where\n\n# plot loss during training\npyplot.subplot(211)\npyplot.title('Accuracy')\npyplot.plot(history.history['accuracy'], label='train')\npyplot.legend()","a4514d4b":"y_predict = model.predict(x_test)","43e85812":"y_predict[0]","94f3592b":"np.argmax(y_predict[0])","a59990e6":"y_pred = []\nfor val in y_predict:\n    y_pred.append(np.argmax(val))\n#print(y_pred)    \n#convert 0 1 to 1 and 1 0 as 0\ncm = metrics.confusion_matrix(ytest,y_pred)\nprint(cm)","91e97b0c":"cr=metrics.classification_report(ytest,y_pred)\nprint(cr)","04c176fd":"### Biulding Model","f432fe8d":"# Visualizing ","ff757581":"Image:","3195e5dc":"Image:","e9acdc36":"###  Creating Confusion Matrix","3f408fef":"Label:","20bd2e08":"# Importing Library","d81ecc4d":"label:","364658fd":"## Creating Classification Report","9ed595d9":"# Loading Dataset from Tensorflow"}}