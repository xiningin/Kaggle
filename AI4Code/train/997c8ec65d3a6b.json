{"cell_type":{"da0f92ba":"code","f1ea6944":"code","dd94b440":"code","50483804":"code","e71aa604":"code","442a57b3":"code","77cdf125":"code","3c9e958b":"code","7cbab0bb":"code","3ab1d37c":"code","5100f850":"code","f73d1b56":"code","ec398b03":"code","1be6fcbe":"code","dc1f10b1":"code","49180bf6":"code","0b977f98":"code","3aace432":"code","63cef3fe":"code","b2a8231e":"code","a62026ae":"code","2108f5f2":"code","b391b6c2":"code","47712ad6":"code","46a4ecfc":"code","fd0e37f9":"code","9e6b1a09":"code","12a55e66":"code","74885ba6":"code","0fe397f3":"code","ea79e374":"code","bf123720":"code","7b24c362":"code","de42ab62":"code","32f4ef60":"code","0d4b72ae":"code","f6292ee5":"code","d2c21639":"code","ad8818b2":"markdown","3252841e":"markdown","0431e1fb":"markdown","f1edfea1":"markdown","272fdf43":"markdown","eec6f1fe":"markdown","fde17c43":"markdown","392f4b0b":"markdown","3680c88a":"markdown","fb86e904":"markdown","018d8e22":"markdown","86c73626":"markdown","d29e5045":"markdown","826de322":"markdown","f1eed351":"markdown","d49a7d2d":"markdown","dba3c7d2":"markdown","1b9a5893":"markdown","0117e75d":"markdown","f6f9ceb1":"markdown"},"source":{"da0f92ba":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n%pip install jcopml\nfrom jcopml.pipeline import num_pipe, cat_pipe\nfrom jcopml.utils import save_model, load_model\nfrom jcopml.plot import plot_missing_value\nfrom jcopml.feature_importance import mean_score_decrease","f1ea6944":"df = pd.read_csv('..\/input\/usa-cers-dataset\/USA_cars_datasets.csv')\ndf.drop(columns=['vin', 'lot', 'country','Unnamed: 0'], inplace=True)\ndf.head()","dd94b440":"plot_missing_value(df)","50483804":"bcs = df[['brand', 'color', 'state']]\n\nfor feature in bcs:\n    print(bcs[feature].value_counts())","e71aa604":"color = df.color.value_counts().head(12).index\nstate = df.state.value_counts().head(32).index \nbrand = df.brand.value_counts().head(15).index\n\nbcs = color.append([brand,state])\nbcs","442a57b3":"def modif(x):\n    if x in bcs:\n        return x\n    else:\n        return \"other\"\n    \ndf.color = df.color.apply(modif)\ndf.state = df.state.apply(modif)\ndf.brand = df.brand.apply(modif)","77cdf125":"df['value']= df['condition'] .str.split(' ').str[0]\ndf['times']= df['condition'] .str.split(' ').str[1]\ndf.head(3)","3c9e958b":"def days_to_min(time):\n    return int(time)*1440\n\ndef hours_to_min(time):\n    return int(time)*60","7cbab0bb":"extracted_times =pd.concat([df[df['times']=='days']['value'].apply(days_to_min),\n           df[df['times']=='hours']['value'].apply(hours_to_min),\n           df[df['times']=='minutes']['value'].astype(int)]).rename('minutes_left',inplace=True)","3ab1d37c":"extracted_times","5100f850":"df=pd.concat([df,extracted_times],axis=1)\ndf['minutes_left'].fillna(-200,inplace=True)\ndf.drop(['condition','value','times'],axis=1,inplace=True)\n\ndf.head()","f73d1b56":"def modif_year(x):\n    return 2021 - x","ec398b03":"df['year'] = modif_year(df.year)","1be6fcbe":"df.head()","dc1f10b1":"df['miles\/year']= df['mileage']\/df['year']\ndf.head()","49180bf6":"categorical = df[['brand', 'model', 'title_status', 'color', 'state']]\ncategorical.head()","0b977f98":"numerical = df[['year', 'mileage', 'minutes_left', 'miles\/year']]\nnumerical.head()","3aace432":"sns.distplot(df.price);","63cef3fe":"df.price.max()\ndf[df['price'] == 84900]","b2a8231e":"corrmat = df.corr(method='pearson')\nfig, ax = plt.subplots(figsize=(7,7))\nsns.heatmap(corrmat , square=True, cmap='RdYlBu', annot=True);","a62026ae":"sns.jointplot(x=df.year, y=df.price);","2108f5f2":"sns.jointplot(x=df.year, y=df.price, kind='hex');","b391b6c2":"df[df.year == 48]","47712ad6":"sns.pairplot(numerical);","46a4ecfc":"X = df.drop(columns=\"price\")\ny = df.price\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","fd0e37f9":"from jcopml.automl import AutoRegressor","9e6b1a09":"model = AutoRegressor(num_feature=numerical.columns, cat_feature=categorical.columns)","12a55e66":"model.fit(X=X_train, y=y_train, cv=4, poly=True )","74885ba6":"model.plot_results()","0fe397f3":"from sklearn.preprocessing import RobustScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer","ea79e374":"numerical_pipeline = Pipeline([\n    (\"imputer\", SimpleImputer(add_indicator=True, strategy='median')), \n    (\"scaler\", RobustScaler())\n])\n\ncategorical_pipeline = Pipeline([\n    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")), \n    (\"onehot\", OneHotEncoder(handle_unknown = 'ignore'))\n])","bf123720":"categorical = X_train[['brand', 'model', 'title_status', 'color', 'state']]\nnumerical = X_train[['year', 'mileage', 'minutes_left', 'miles\/year']]","7b24c362":"preprocessor = ColumnTransformer([\n    (\"numeric\", numerical_pipeline, numerical.columns), \n    (\"categoric\", categorical_pipeline, categorical.columns)\n])","de42ab62":"from xgboost import XGBRegressor","32f4ef60":"pipeline = Pipeline([\n    ('prep', preprocessor),\n    ('algo', XGBRegressor(n_jobs=-1, random_state=42))\n])","0d4b72ae":"from sklearn.model_selection import GridSearchCV","f6292ee5":"parameter = {\n'algo__colsample_bytree'    : [0.6738017242196919],\n'algo__gamma'               : [3],\n'algo__learning_rate'       : [0.08798929749689022],\n'algo__max_depth'           : [5],\n'algo__n_estimators'        : [146],\n'algo__reg_alpha'           : [0.7128188058401365],\n'algo__reg_lambda'          : [1.1044350847124704],\n'algo__subsample'           : [0.5806385987847482]\n}","d2c21639":"model = GridSearchCV(pipeline, parameter, cv=4, n_jobs=-1, verbose=1)\nmodel.fit(X_train, y_train)\n\nprint(model.best_params_)\nprint(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))","ad8818b2":"semua fitur aman dari Multicollinearity, terdapat korelasi yang negatif... kita akan cari tahu selanjutnya","3252841e":"# Cek Missing Value","0431e1fb":"### 1. Univariat Analysis (Target)","f1edfea1":"### Simple Model","272fdf43":"dari visualisasi diatas dapat disimpulkan semakin tua usia mobil semakin murah harganya. namun terdapat anomali (outliers) dimana harga mobil tua melambung tinggi (mobil antik), mobil apakah itu?","eec6f1fe":"# Feature engineering","fde17c43":"Dataset berasal dari:\nhttps:\/\/www.kaggle.com\/doaaalsenani\/usa-cers-dataset","392f4b0b":"### Dataset Splitting","3680c88a":"### Auto ML","fb86e904":"### 5. Splitting Numerical dan Categorical data\n\nagar memudahkan proses analisis dan modeling","018d8e22":"target skewed ke kanan","86c73626":"# Model","d29e5045":"### 3. Bivariat Analysis (Target vs Year)","826de322":"### 4. Multivariat Analysis","f1eed351":"### 2. Times Extraction\n\nconvert waktu menjadi menit","d49a7d2d":"### 3. Year Extraction\n\nubah tahun kelahiran mobil menjadi usia","dba3c7d2":"### 1. Feature Extraction (Brand, Color, dan State)\n\nSemua fitur yang memiliki value count dibawah 10 akan di convert menjadi 'other', bertujuan untuk mengurangi noise","1b9a5893":"### 4. Mileage Extraction\n\nbuat fitur baru mileage pertahun","0117e75d":"### 2. Correlation Matrix","f6f9ceb1":"# EDA"}}