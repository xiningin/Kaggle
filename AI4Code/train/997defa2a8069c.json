{"cell_type":{"1716551c":"code","c7a364d4":"code","168a33f8":"code","fc962de7":"code","80a83027":"code","c64d2c96":"code","a4c24ecb":"code","65245c9a":"code","fca9d085":"code","49c4e801":"code","1156e521":"code","13cb7f2d":"code","69dcd87c":"code","810a3cdc":"code","9bbfad4c":"code","72c23b68":"code","6689ac9d":"code","abbb087a":"code","b0b44084":"code","4ea56f5f":"code","8fad49d0":"code","2f6ec25b":"code","c930935d":"code","df9b3a34":"code","37d348dd":"code","69bc1701":"code","ab667966":"code","b49b2297":"code","b6310518":"code","b42328bc":"code","011b584f":"code","591bf646":"code","d5b45690":"code","5ec0f331":"code","14a41a12":"code","50e3904c":"code","21dac178":"code","5e6e179f":"code","e89c631d":"code","3a3cec49":"code","c39e0805":"code","ffea1a2a":"code","a8863ff6":"code","a46b6ffe":"code","ede68abe":"code","040a5725":"code","8d5e1628":"code","e50c4ec5":"code","c61c207f":"code","a1f906b2":"code","41c7be28":"code","11259ee6":"code","13f5b1f9":"code","e329d1b9":"code","94cb7b5c":"code","7c5359fb":"code","02b2c272":"code","3906a445":"code","850b8edd":"code","f0c14574":"code","9af62c93":"code","80e9a67c":"code","3482ba9f":"code","e0952f9c":"code","eb23a497":"markdown","3a298ef3":"markdown","7d3af572":"markdown","a3e7f722":"markdown","073b4ee3":"markdown","c949403f":"markdown","0fcfaeb1":"markdown","f3abdd91":"markdown","e4a96a03":"markdown","a03857a1":"markdown","c4762a9f":"markdown","93bf174d":"markdown","565453c1":"markdown","c31eabfb":"markdown","63db5045":"markdown","1d1b7b5b":"markdown","d3a031a8":"markdown","0b0dbf83":"markdown","8dcf0210":"markdown","0b9f5433":"markdown","de70f718":"markdown","3698aee9":"markdown","bf464095":"markdown","b316b06f":"markdown","aef8e43c":"markdown","eb64b47a":"markdown","24a763d6":"markdown","45653c9a":"markdown","a30e0fb2":"markdown","623ae76c":"markdown","d76b2a8f":"markdown","bcd8f874":"markdown","f44cf443":"markdown"},"source":{"1716551c":"import numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import preprocessing\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn import svm\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import ensemble\nfrom sklearn.metrics import accuracy_score","c7a364d4":"%%time\nevent_type=pd.read_csv(\"..\/input\/event_type.csv\",error_bad_lines=False)\ntrain = pd.read_csv(\"..\/input\/train.csv\")\nseverity_type = pd.read_csv(\"..\/input\/severity_type.csv\")\nlog_feature = pd.read_csv(\"..\/input\/log_feature.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\nresource_type = pd.read_csv(\"..\/input\/resource_type.csv\",error_bad_lines=False)\nsample_submission = pd.read_csv(\"..\/input\/sample_submission.csv\")","168a33f8":"print(\"test\",test.shape)\nprint(\"train\",train.shape)","fc962de7":"print('test',test.head())\nprint('train',train.head(4))\nprint('sample_submission',sample_submission.head())\nprint('event_type',event_type.shape,event_type.head(2))\nprint('severity_type',severity_type.shape,severity_type.head(2))\nprint('log_feature',log_feature.shape,log_feature.head(2))\nprint('resource_type',resource_type.shape,resource_type.head(2))","80a83027":"val=list(train['fault_severity'].value_counts())\nfor i in range(len(val)):\n    print(train['fault_severity'].value_counts().index[i],round(val[i]\/sum(val)*100),'%')","c64d2c96":"event_type['id']=pd.to_numeric(event_type['id'],errors='coerce')\n#converting object datatype into numeric","a4c24ecb":"event_type.dtypes","65245c9a":"def merge_fn(df1,df2,col_name,how_param):\n    merged_df=df1.merge(df2,how=how_param,on=col_name)\n    return merged_df\n    ","fca9d085":"train_merge1=merge_fn(train,event_type.drop_duplicates(subset=['id']),'id','left')\ntrain_merge2=merge_fn(train_merge1,severity_type.drop_duplicates(subset=['id']),'id','left')\ntrain_merge3=merge_fn(train_merge2,log_feature.drop_duplicates(subset=['id']),'id','left')\ntrain_merge4=merge_fn(train_merge3,resource_type.drop_duplicates(subset=['id']),'id','left')","49c4e801":"train_merge4.shape","1156e521":"train_merge4.head()","13cb7f2d":"train_merge4['mean_volumn']=train_merge4.groupby(['location','event_type','severity_type','log_feature','resource_type'])['volume'].transform('mean')","69dcd87c":"train_merge4.head()","810a3cdc":"train_merge4.dtypes","9bbfad4c":"train_merge4.isnull().sum()","72c23b68":"cat_col=list(set(train_merge4.columns)-set(train_merge4._get_numeric_data().columns))","6689ac9d":"def categorical_conversion(df,cat_col):\n    for i in range(len(cat_col)):\n        df[cat_col[i]]=df[cat_col[i]].astype('category')\n    return df\n    \n    ","abbb087a":"train_merge4=categorical_conversion(train_merge4,cat_col)   ","b0b44084":"train_merge4.dtypes","4ea56f5f":"def label_encoding_conversion(df,cat_col):\n    le=preprocessing.LabelEncoder()\n    for i in range(len(cat_col)):\n        df[cat_col[i]]=le.fit_transform(df[cat_col[i]])\n    return df","8fad49d0":"train_merge4.columns","2f6ec25b":"train_merge4=label_encoding_conversion(train_merge4,cat_col)","c930935d":"train_merge4.columns","df9b3a34":"train_merge4.drop(['id'],axis=1,inplace=True)","37d348dd":"target=train_merge4[['fault_severity']]","69bc1701":"train_merge4.drop(['fault_severity'],axis=1,inplace=True)","ab667966":"train_merge4.head()","b49b2297":"train_merge4.dtypes","b6310518":"test.head()","b42328bc":"test.head()","011b584f":"test.shape","591bf646":"test_merge1=merge_fn(test,event_type.drop_duplicates(subset=['id']),'id','left')\ntest_merge2=merge_fn(test_merge1,severity_type.drop_duplicates(subset=['id']),'id','left')\ntest_merge3=merge_fn(test_merge2,log_feature.drop_duplicates(subset=['id']),'id','left')\ntest_merge4=merge_fn(test_merge3,resource_type.drop_duplicates(subset=['id']),'id','left')","d5b45690":"test_merge4.shape","5ec0f331":"test_merge4['mean_volumn']=test_merge4.groupby(['location','event_type','severity_type','log_feature','resource_type'])['volume'].transform('mean')","14a41a12":"severity_type.head()","50e3904c":"test_merge4.head(2)","21dac178":"cat_col","5e6e179f":"test_merge4=categorical_conversion(test_merge4,cat_col)  ","e89c631d":"test_merge4.dtypes\n","3a3cec49":"test_merge4=label_encoding_conversion(test_merge4,cat_col)","c39e0805":"test_merge4.dtypes","ffea1a2a":"test_merge4.drop(['id'],axis=1,inplace=True)","a8863ff6":"train_merge4.columns","a46b6ffe":"test_merge4.columns","ede68abe":"train_merge4.columns","040a5725":"lr=LogisticRegression()\nlr.fit(train_merge4,target)\nlr_pred=lr.predict(test_merge4)\naccuracy_score(pd.DataFrame(lr.predict(train_merge4)),target)","8d5e1628":"rf=RandomForestClassifier()\nrf.fit(train_merge4,target)\nrf_pred=rf.predict(test_merge4)\naccuracy_score(pd.DataFrame(rf.predict(train_merge4)),target)","e50c4ec5":"\nnb=GaussianNB()\nnb.fit(train_merge4,target)\nnb.predict(test_merge4)\naccuracy_score(pd.DataFrame(nb.predict(train_merge4)),target)","c61c207f":"\ndt=tree.DecisionTreeClassifier()\ndt.fit(train_merge4,target)\ndt.predict(test_merge4)\naccuracy_score(pd.DataFrame(dt.predict(train_merge4)),target)","a1f906b2":"\nsvc_ml=svm.SVC()\nsvc_ml.fit(train_merge4,target)\nsvc_ml.predict(test_merge4)\naccuracy_score(pd.DataFrame(svc_ml.predict(train_merge4)),target)","41c7be28":"\nada=AdaBoostClassifier()\nada.fit(train_merge4,target)\nada.predict(test_merge4)\naccuracy_score(pd.DataFrame(ada.predict(train_merge4)),target)","11259ee6":"\nknn=KNeighborsClassifier()\nknn.fit(train_merge4,target)\nknn.predict(test_merge4)\naccuracy_score(pd.DataFrame(knn.predict(train_merge4)),target)","13f5b1f9":"\ngb=ensemble.GradientBoostingClassifier()\ngb.fit(train_merge4,target)\ngb_pre=gb.predict(test_merge4)\naccuracy_score(pd.DataFrame(gb.predict(train_merge4)),target)","e329d1b9":"dic_data={}\nlist1=[]\nmax_clf_output=[]\ntuple_l=()\ndef data_modeling(X,target,model):\n    for i in range(len(model)):\n        ml=model[i]\n        ml.fit(X,target)\n        pred=ml.predict(X)\n        acc_score=accuracy_score(pd.DataFrame(ml.predict(X)),target)\n        tuple_l=(ml.__class__.__name__,acc_score)\n        dic_data[ml.__class__.__name__]=[acc_score,ml]\n        list1.append(tuple_l)\n        print(dic_data)\n    for name,val in dic_data.items():\n        if val==max(dic_data.values()):\n            max_lis=[name,val]\n            print('Maximum classifier',name,val)\n\n    return list1,max_lis\n\nlist1,max_lis=data_modeling(train_merge4,target,[AdaBoostClassifier(),KNeighborsClassifier(),\nsvm.SVC(),RandomForestClassifier(),\ntree.DecisionTreeClassifier(),\nGaussianNB(),\nLogisticRegression(),\nensemble.GradientBoostingClassifier()])","94cb7b5c":"model=max_lis[1][1]","7c5359fb":"modelscore_df=pd.DataFrame(list1,columns=['Classifier',\"Accuracy score\"])","02b2c272":"modelscore_df","3906a445":"modelscore_df['classifier code']=np.arange(8)","850b8edd":"modelscore_df","f0c14574":"modelscore_df.shape[0]","9af62c93":"clf_sel=modelscore_df.iloc[modelscore_df['Accuracy score'].idxmax()]\nclf_name=clf_sel[0]","80e9a67c":"modelscore_df.plot.bar(x='classifier code', y='Accuracy score', rot=0)","3482ba9f":"\npredict_test=rf.predict_proba(test_merge4)\npred_df=pd.DataFrame(predict_test,columns=['predict_0', 'predict_1', 'predict_2'])\nsubmission=pd.concat([test[['id']],pred_df],axis=1)\nsubmission.to_csv('sub.csv',index=False,header=True)\n","e0952f9c":"submission","eb23a497":"### **GaussianNB**","3a298ef3":"### **Loading Libraries**","7d3af572":"### **Label encoding**","a3e7f722":"### **Categorical conversion**","073b4ee3":"# **Training Preprocessing**","c949403f":"#### **Merged Training data**","0fcfaeb1":"### **Finding categorical columns**","f3abdd91":"### **GradientBoostingClassifier**","e4a96a03":"### **DecisionTreeClassifier**","a03857a1":"### Input datasets heads","c4762a9f":"## Model comparison consolidate function","93bf174d":"### **Checking for missing values**","565453c1":"### **Visualization of Severity**","c31eabfb":"### **Merging**","63db5045":"### **KNeighborsClassifier**","1d1b7b5b":"## **Model score Visualization**","d3a031a8":"### **Removing  unique columns**","0b0dbf83":"## ** Data conversion**","8dcf0210":"### **Submission file generation**","0b9f5433":"###**Adding new feature- Mean volume**","de70f718":"## **TEST data preparation**","3698aee9":"## **Importing datasets**","bf464095":"#### **Calculating mean volumn**","b316b06f":"### **LogisticRegression**","aef8e43c":"#### ** Categorical columns**","eb64b47a":"### **Droping unique values**","24a763d6":"### **AdaBoostClassifier**","45653c9a":"## ** Test data merging**","a30e0fb2":"### **RandomForestClassifier**","623ae76c":"### **SVC**","d76b2a8f":"### **Categorical conversion **","bcd8f874":"### **Label encoding**","f44cf443":"### ** Classifier selection **"}}