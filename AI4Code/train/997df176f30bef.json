{"cell_type":{"8fdc43fe":"code","e5da1554":"code","35a43f2a":"code","720936a1":"code","7b1ee2aa":"code","2de2f187":"code","e174c7db":"code","eea280a0":"code","5290d1ee":"code","ee720d10":"code","d640cc50":"code","1aad06b9":"code","c0419657":"code","c6a98202":"code","048a622b":"code","526e1b1c":"code","3ca80c70":"code","ba56e91d":"code","a17aab25":"code","45c7a259":"code","243d4bb8":"code","89a245fc":"code","6d11bfc4":"code","bf3ac37e":"code","df3f9d70":"code","d8074a6d":"code","5abed39a":"code","c786fd45":"code","e748ed32":"code","add3c30b":"code","80f77542":"code","abedfd2b":"code","c5d4a2ae":"code","a7f117d5":"markdown","e24cc545":"markdown","8a9e58c4":"markdown","c181e823":"markdown","a44c9b1a":"markdown","05cde1e2":"markdown","1f862fd6":"markdown","38cbf80b":"markdown","fddacb54":"markdown","1d19a6b5":"markdown"},"source":{"8fdc43fe":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport xgboost as xgb\n\nfrom sklearn.metrics import r2_score","e5da1554":"data = pd.read_csv('..\/input\/automobile-dataset\/Automobile_data.csv')","35a43f2a":"data","720936a1":"data.info()","7b1ee2aa":"data = data.replace(-1, np.NaN)\ndata = data.replace('?', np.NaN)","2de2f187":"for column in ['normalized-losses', 'bore', 'stroke', 'horsepower', 'peak-rpm', 'price']:\n    data[column] = data[column].astype(np.float)","e174c7db":"data","eea280a0":"data.dtypes","5290d1ee":"data.isna().sum()","ee720d10":"for column in data.columns:\n    if data.dtypes[column] != 'object' and data.isna().sum()[column] > 0: # For all numeric columns with missing values\n        data[column] = data[column].fillna(data[column].mean()) # Fill missing values with the column's mean","d640cc50":"data.isna().sum()","1aad06b9":"{column: list(data[column].unique()) for column in data.columns if data.dtypes[column] == 'object'}","c0419657":"numeric_ordering ={\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'eight': 8,\n    'twelve': 12\n}\n\ndata['num-of-cylinders'] = data['num-of-cylinders'].replace(numeric_ordering)","c6a98202":"data","048a622b":"data['num-of-doors'].mode()","526e1b1c":"data['num-of-doors'] = data['num-of-doors'].apply(lambda x: 0 if x == 'two' else 1)","3ca80c70":"print(\"Total missing values:\", data.isna().sum().sum())","ba56e91d":"data","a17aab25":"{column: list(data[column].unique()) for column in data.columns if data.dtypes[column] == 'object'}","45c7a259":"def binary_encode(df, columns, positive_values):\n    df = df.copy()\n    for column, positive_value in zip(columns, positive_values):\n        df[column] = df[column].apply(lambda x: 1 if x == positive_value else 0)\n    return df","243d4bb8":"binary_features = [\n    'fuel-type',\n    'aspiration',\n    'engine-location',\n]\n\nbinary_positive_values = [\n    'diesel',\n    'turbo',\n    'front'\n]\n\ndata = binary_encode(\n    data,\n    columns=binary_features,\n    positive_values=binary_positive_values\n)","89a245fc":"data","6d11bfc4":"def onehot_encode(df, columns, prefixes):\n    df = df.copy()\n    for column, prefix in zip(columns, prefixes):\n        dummies = pd.get_dummies(df[column], prefix=prefix)\n        df = pd.concat([df, dummies], axis=1)\n        df = df.drop(column, axis=1)\n    return df","bf3ac37e":"nominal_features = [\n    'make',\n    'body-style',\n    'drive-wheels',\n    'engine-type',\n    'fuel-system'\n]\n\nprefixes = [\n    'MK',\n    'BS',\n    'DW',\n    'ET',\n    'FS'\n]\n\ndata = onehot_encode(\n    data,\n    columns=nominal_features,\n    prefixes=prefixes\n)","df3f9d70":"data","d8074a6d":"print(\"Total non-numeric columns:\", (data.dtypes == 'object').sum())","5abed39a":"y = data['price'].copy()\nX = data.drop('price', axis=1).copy()","c786fd45":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","e748ed32":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=20)\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=20)","add3c30b":"dtrain = xgb.DMatrix(X_train, label=y_train)\ndval = xgb.DMatrix(X_val, label=y_val)\ndtest = xgb.DMatrix(X_test, label=y_test)","80f77542":"params = {'learning_rate': 0.001, 'max_depth': 6}\n\nmodel = xgb.train(params, dtrain, evals=[(dval, 'eval')], num_boost_round=10000, early_stopping_rounds=10, verbose_eval=False)","abedfd2b":"y_true = np.array(y_test, dtype=np.float)\ny_pred = np.array(model.predict(dtest), dtype=np.float)","c5d4a2ae":"print(\"R^2 Score: {:.4f}\".format(r2_score(y_true, y_pred)))","a7f117d5":"# Training","e24cc545":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/achUxMMCMX4","8a9e58c4":"# Encoding Ordinal Features","c181e823":"# Splitting\/Scaling","a44c9b1a":"# Getting Started","05cde1e2":"# Cleaning","1f862fd6":"# Encoding Nominal Features","38cbf80b":"# Results","fddacb54":"# Filling Remaining Missing Values","1d19a6b5":"# Task for Today  \n\n***\n\n## Automobile Price Prediction  \n\nGiven *data about various automobiles*, let's try to predict the **price** of a given automobile.  \n  \nWe will use XGBoost to make our predictions."}}