{"cell_type":{"5ac57362":"code","a221b10a":"code","29e492a2":"code","24713281":"code","ee285298":"code","4513b024":"code","55d035b6":"code","4a7cce13":"code","83dd9db7":"markdown","c9a8c4b4":"markdown"},"source":{"5ac57362":"import itertools\nimport argparse\nfrom tqdm import tqdm\nfrom math import ceil, sqrt\nfrom typing import List, Dict, Set, Optional, Tuple, Union\nfrom collections import defaultdict, Counter","a221b10a":"class Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n\n    def distance_from(self, other: \"Point\") -> int:\n        return ceil(sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2))\n\n\nclass Obj:\n    def __init__(self, id: int):\n        self._id = id\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__} {self._id}\"\n\n    @property\n    def id(self):\n        return self._id\n\n\nclass Product(Obj):\n    def __init__(self, id: int, weight: int):\n        super().__init__(id)\n        self._weight = weight\n\n    @property\n    def weight(self):\n        return self._weight\n\n\nclass PositionObj(Obj):\n    def __init__(self, id: int, position: Point):\n        super().__init__(id)\n        self._position = position\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__} {self._id} at {self._position}\"\n\n    @property\n    def position(self):\n        return self._position\n\n    def distance_from(self, _other: \"PositionObj\") -> int:\n        return self._position.distance_from(_other.position)\n\n    def find_nearest_object(\n        self, _others: List[\"PositionObj\"]\n    ) -> Tuple[\"PositionObj\", int]:\n        nearest = _others[0]\n        distance = self.distance_from(nearest)\n        for other in _others[1:]:\n            d = self.distance_from(other)\n            if d < distance:\n                nearest, distance = other, d\n        return nearest, distance\n\n\nclass ProductHolder(PositionObj):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._products: Dict[Product, int] = {}\n\n    @property\n    def products(self):\n        return self._products\n\n    def add_products(self, products: Dict[Product, int]):\n        for product, quantity in products.items():\n            if product in self._products:\n                self._products[product] += quantity\n            else:\n                self._products[product] = quantity\n\n    def remove_products(self, products: Dict[Product, int]):\n        for product, quantity in products.items():\n            self._products[product] -= quantity\n            if self._products[product] == 0:\n                self._products.pop(product)\n\n    @property\n    def product_weight(self):\n        return sum(p.weight * q for p, q in self._products.items())\n\n    def remove_all_products(self):\n        self._products = {}\n\n\nclass Command:\n    def __init__(\n        self,\n        drone: ProductHolder,\n        destination: ProductHolder,\n        product: Product,\n        quantity: int,\n    ):\n        self.drone = drone\n        self.destination = destination\n        self.product = product\n        self.quantity = quantity\n\n#     def __repr__(self):\n#         return self.to_string()\n\n    @property\n    def str_command(self):\n        raise NotImplementedError\n        \n    def __repr__(self):\n        return f\"Command({self.drone} -> {self.destination}: {self.product} * {self.quantity})\"\n\n    def to_string(self):\n        if isinstance(self.destination, Warehouse):\n            str_command = \"L\"\n        elif isinstance(self.destination, Order):\n            str_command = \"D\"\n        else:\n            raise ValueError(\"Destination must be a warehouse or order.\")\n        return f\"{self.drone.id} {str_command} {self.destination.id} {self.product.id} {self.quantity}\"\n\n#     def to_string(self):\n#         return f\"{self.drone.id} {self.str_command} {self.destination.id} {self.product.id} {self.quantity}\"\n\n\nclass Load(Command):\n    str_command = \"L\"\n\n\nclass Deliver(Command):\n    str_command = \"D\"\n\n\nclass Order(ProductHolder):\n    def __init__(self, id: int, position: Point, products: Dict[Product, int]):\n        super().__init__(id, position)\n        self._products = products\n\n    def is_complete(self):\n        return not self._products\n\n\nclass Drone(ProductHolder):\n    def __init__(self, id: int, position: Point, max_capacity: int):\n        super().__init__(id, position)\n        self.max_capacity = max_capacity\n        self.is_busy = False\n        self.stops_being_busy_at = 0\n\n    def set_position(self, position: Point):\n        self._position = position\n\n    def update_state(self, current_time):\n        if self.is_busy and current_time == self.stops_being_busy_at:\n            self.is_busy = False\n\n    @property\n    def current_capacity(self) -> int:\n        return self.max_capacity - self.product_weight\n\n    def get_products_that_can_fit_out_of(\n        self, products: Dict[Product, int]\n    ) -> Dict[Product, int]:\n        can_carry = defaultdict(int)\n        products = sorted(\n            [(p, q) for p, q in products.items()], key=lambda x: -x[0].weight\n        )\n        capacity = self.current_capacity\n        for product, quantity in products:\n            if not quantity:\n                continue\n\n            weight = product.weight\n            if weight > capacity:\n                continue\n\n            for _ in range(quantity):\n                can_carry[product] += 1\n                capacity -= weight\n                if weight > capacity:\n                    break\n\n        return can_carry\n\n\nclass Warehouse(ProductHolder):\n    def __init__(self, id: int, position: Point, products=Dict[Product, int]):\n        super().__init__(id, position)\n        self._products = products\n\n    def get_products_that_are_in_stock_out_of(\n        self, products=Dict[Product, int]\n    ) -> Dict[Product, int]:\n        return {p: min(q, self._products.get(p, 0)) for p, q in products.items()}\n\n\nclass Shipment:\n    def __init__(self, drone: Drone, order: Order, warehouse: Warehouse):\n        self.drone = drone\n        self.order = order\n        self.warehouse = warehouse\n\n        self.products = drone.get_products_that_can_fit_out_of(\n            warehouse.get_products_that_are_in_stock_out_of(order.products)\n        )\n        self.product_weight = sum(p.weight * q for p, q in self.products.items())\n\n    def __repr__(self):\n        return f\"Shipment({self.product_types()} -> {self.order})\"\n\n    def has_products(self) -> bool:\n        return self.product_weight > 0\n\n    def product_types(self) -> Set[Product]:\n        return set(self.products)\n\n    def number_of_product_types(self) -> int:\n        return len(self.products)\n\n    def percentage_of_order(self) -> float:\n        order_weight = self.order.product_weight\n        if not order_weight:\n            return 0\n        return self.product_weight \/ self.order.product_weight\n\n    def load(self):\n        self.warehouse.remove_products(self.products)\n        self.drone.add_products(self.products)\n        self.order.remove_products(self.products)\n        load = []\n        deliver = []\n        for product, quantity in self.products.items():\n            load.append(Load(self.drone, self.warehouse, product, quantity))\n            deliver.append(Deliver(self.drone, self.order, product, quantity))\n        return load, deliver\n\n\nclass Simulation:\n    def __init__(\n        self,\n        max_time: int,\n        drones: List[Drone],\n        warehouses: List[Warehouse],\n        orders: List[Order],\n        last_point: Point\n    ):\n        self.max_time = max_time\n        self.drones = drones\n        self.warehouses = warehouses\n        self.orders = orders\n        self.last_point = last_point\n\n        products = {x for x in orders + warehouses for x in x.products}\n        self.min_product_weight = min(x.weight for x in products)\n\n        self.commands: List[Command] = []\n        self.total_score: int = 0\n        self.current_time: int = 0\n        self.completed_orders: int = 0\n        self.order_to_delivery_time: Dict[Order, list] = defaultdict(list)\n\n    def run(self):\n        bar = tqdm(total=len(self.orders))\n        while self.current_time < self.max_time:\n            if self.all_orders_complete():\n                break\n\n            self.do_turn()\n            self.current_time += 1\n            bar.update(self.completed_orders - bar.n)\n\n        bar.close()\n\n    def all_orders_complete(self):\n        return self.completed_orders == len(self.orders)\n\n    def do_turn(self):\n        for drone in self.drones:\n            drone.update_state(self.current_time)\n\n        for drone in self.drones:\n            if not drone.is_busy:\n                self.send_drone(drone)\n\n    def send_drone(self, drone):\n        drone.remove_all_products()\n        optimal_shipment_list = self.get_optimal_shipment_list(drone)\n        if optimal_shipment_list:\n            _, total_actual_score, total_time, completed_orders, deliver_time = self.get_shipment_list_analysis(\n                optimal_shipment_list\n            )\n\n            load_commands = []\n            deliver_commands = []\n            for shipment, time in zip(optimal_shipment_list, deliver_time):\n                load, deliver = shipment.load()\n                load_commands += load\n                deliver_commands += deliver\n                self.order_to_delivery_time[shipment.order].append(time)\n\n            self.commands += load_commands + deliver_commands\n\n            drone.is_busy = True\n            drone.stops_being_busy_at = self.current_time + total_time\n            drone.set_position(optimal_shipment_list[-1].order.position)\n            drone.remove_all_products()\n\n            if total_actual_score > 0:\n                self.completed_orders += completed_orders\n                self.total_score += ceil(total_actual_score)\n\n    def get_optimal_shipment_list(\n        self, drone: Drone, branching_factor: int = 30\n    ) -> Optional[List[Shipment]]:\n        initial_list = self.get_initial_shipments_list_for_drone(drone)\n        if not initial_list:\n            return\n\n        possibilities = [[x] for x in initial_list[:branching_factor]]\n        loop = True\n        roots = []\n        while loop:\n            loop = False\n\n            roots += possibilities\n            new_possibilities = []\n            for p in possibilities:\n                next_list = self.get_next_shipments_list(p)\n                if next_list:\n                    loop = True\n                    new_possibilities += [p + [n] for n in next_list[:branching_factor]]\n\n            possibilities = new_possibilities\n            if len(roots) > 40:\n                break\n\n        possibilities += roots\n\n        optimal = possibilities[0]\n        score = self.get_shipment_list_analysis(optimal)[0]\n        for p in possibilities[1:]:\n            s = self.get_shipment_list_analysis(p)[0]\n            if s > score:\n                optimal, score = p, s\n\n        return optimal\n\n    def get_shipment_list_analysis(self, shipment_list: List[Shipment]):\n        first_position = Point(0, 0)  \n        max_dist=first_position.distance_from(self.last_point)\n        drone = shipment_list[0].drone\n        warehouse = shipment_list[0].warehouse\n        d1 = drone.distance_from(warehouse)\n\n        product_types = len({x for x in shipment_list for x in x.product_types()})\n        total_load_time = d1 + product_types\n\n        total_time = total_load_time\n        completed_orders = 0\n        total_scaled_score = 0\n        total_actual_score = 0\n        previous_position = warehouse\n        deliver_time = []\n        for shipment in shipment_list:\n            total_time += (\n                shipment.order.distance_from(previous_position)\n                + shipment.number_of_product_types()                \n            )\n            p = shipment.percentage_of_order()\n            y=((max_dist-first_position.distance_from(shipment.order.position)) \/ max_dist)\n            y2=((max_dist-self.last_point.distance_from(shipment.order.position)) \/ max_dist)\n            x=self.current_time\n            T=total_time\n            pdist1 = y+min(1,x\/(0.55*T))*(1-y)                            \n#             pdist3 = y2+(1-min(1,x\/(0.55*T)))*(1-y2)                            \n            y=((max_dist-first_position.distance_from(previous_position.position)) \/ max_dist)\n            y2=((max_dist-self.last_point.distance_from(previous_position.position)) \/ max_dist)\n            pdist2 = y+min(1,x\/(0.55*T))*(1-y)                            \n#             pdist4 = y2+(1-min(1,x\/(0.55*T)))*(1-y2)                            \n            scaled_score = pdist1 * pdist2 * p * self.score_for_order_completed_at(\n                self.current_time + total_time + 1\n            )\n            deliver_time.append(self.current_time + total_time + 1)\n            total_scaled_score += scaled_score\n            actual_score = 0\n            if p == 1:\n                completed_orders += 1\n                actual_score = self.score_for_order_completed_at(\n                    self.current_time + total_time + 1\n                )\n            total_actual_score += actual_score\n\n            previous_position = shipment.order\n\n        total_scaled_score \/= total_time\n        return (\n            total_scaled_score,\n            total_actual_score,\n            total_time,\n            completed_orders,\n            deliver_time,\n        )\n\n    def get_next_shipments_list(\n        self, current_shipment_list: List[Shipment]\n    ) -> List[Shipment]:\n        drone = current_shipment_list[0].drone\n\n        product_weight = sum(sh.product_weight for sh in current_shipment_list)\n        if product_weight + self.min_product_weight > drone.max_capacity:\n            return []\n\n        drone.remove_all_products()\n        warehouse = current_shipment_list[0].warehouse\n\n        used_orders = set()\n        for shipment in current_shipment_list:\n            used_orders.add(shipment.order)\n            drone.add_products(shipment.products)\n            warehouse.remove_products(shipment.products)\n\n        next_shipments_list = []\n        for order in self.orders:\n            if order in used_orders or order.is_complete():\n                continue\n\n            sh = Shipment(drone, order, warehouse)\n            if not sh.has_products():\n                continue\n\n            score = self.get_score_for_last_shipment(sh, current_shipment_list)\n            next_shipments_list.append((sh, score))\n\n        next_shipments_list = [\n            x for x, _ in sorted(next_shipments_list, key=lambda x: -x[1])\n        ]\n\n        drone.remove_all_products()\n        for shipment in current_shipment_list:\n            warehouse.add_products(shipment.products)\n\n        return next_shipments_list\n\n    @staticmethod\n    def get_score_for_last_shipment(\n        last_shipment: Shipment, shipment_list: List[Shipment]\n    ) -> float:\n        d = shipment_list[-1].order.distance_from(last_shipment.order)\n        m = last_shipment.number_of_product_types()\n        current_product_types = {x for x in shipment_list for x in x.product_types()}\n        last_product_types = last_shipment.product_types()\n        n = len(last_product_types - current_product_types)\n        p = last_shipment.percentage_of_order()\n        turns = d + m + n\n        return p \/ turns\n\n    def get_initial_shipments_list_for_drone(self, drone: Drone) -> List[Shipment]:\n        drone.remove_all_products()\n\n        shipment_list = []\n        for order in self.orders:\n            if order.is_complete():\n                continue\n\n            for warehouse in self.warehouses:\n                sh = Shipment(drone, order, warehouse)\n                if not sh.has_products():\n                    continue\n\n                d1 = drone.distance_from(warehouse)\n                d2 = warehouse.distance_from(order)\n                turns = d1 + d2 + sh.number_of_product_types() * 2\n                p = sh.percentage_of_order()\n                scaled_score = p \/ turns\n\n                if self.current_time + turns > self.max_time:\n                    continue\n\n                shipment_list.append((sh, scaled_score))\n\n        return [sh for sh, _ in sorted(shipment_list, key=lambda x: -x[1])]\n\n    def score_for_order_completed_at(self, time: int) -> int:\n        return ceil((self.max_time - time) \/ self.max_time * 100)","29e492a2":"def read_file(input_file):\n    with open(input_file) as f:\n        num_rows, num_columns, num_drones, max_time, max_cargo = map(\n            int, f.readline().split(\" \")\n        )\n\n        # products\n        num_products = int(f.readline())\n        product_weights = list(map(int, f.readline().split(\" \")))\n        assert num_products == len(product_weights)\n        products = [Product(id=i, weight=w) for i, w in enumerate(product_weights)]\n\n        # warehouses\n        num_warehouses = int(f.readline())\n        wh_list = []\n        for i in range(num_warehouses):\n            x, y = map(int, f.readline().split(\" \"))\n            num_products_in_wh = list(map(int, f.readline().split(\" \")))\n            assert num_products == len(num_products_in_wh)\n            wh_products = {p: n for p, n in zip(products, num_products_in_wh)}\n            wh = Warehouse(id=i, position=Point(x, y), products=wh_products)\n            wh_list.append(wh)\n\n        # order info\n        order_list = []\n        num_orders = int(f.readline())\n        for i in range(num_orders):\n            x, y = map(int, f.readline().split(\" \"))\n            num_products_in_order = int(f.readline())\n            order_products = list(map(int, f.readline().split(\" \")))\n            assert num_products_in_order == len(order_products)\n            order_products = [products[x] for x in order_products]\n            order = Order(\n                id=i, position=Point(x, y), products=dict(Counter(order_products))\n            )\n            order_list.append(order)\n\n    return num_rows, num_columns, num_drones, max_time, max_cargo, wh_list, order_list\n\n\ndef simulate(input_file):\n    num_rows, num_columns, num_drones, max_time, max_cargo, wh_list, order_list = read_file(input_file)\n\n    drones = []\n    first_wh = wh_list[0]\n    for i in range(num_drones):\n        drones.append(Drone(id=i, position=first_wh.position, max_capacity=max_cargo))\n\n    simulation = Simulation(\n        max_time=max_time, drones=drones, warehouses=wh_list, orders=order_list, last_point=Point(num_rows-1, num_columns-1)\n    )\n    simulation.run()\n\n    with open(\"submission.csv\", \"w\") as w:\n        w.write(str(len(simulation.commands)) + \"\\n\")\n        for c in simulation.commands:\n            w.write(c.to_string() + \"\\n\")","24713281":"simulate(\"..\/input\/hashcode-drone-delivery\/busy_day.in\")","ee285298":"def check(input_file, submission):\n    _, _, num_drones, max_time, max_cargo, wh_list, order_list = read_file(input_file)\n\n    with open(submission, \"r\") as f:\n        _f = f.readlines()\n        num_commands = int(_f[0])\n        commands = [x.rstrip(\"\\n\") for x in _f[1:]]\n        assert num_commands == len(commands)\n\n    score = 0\n    try:\n        score = calculate_score(num_drones, max_time, max_cargo, wh_list, order_list, commands)\n    except Exception as e:\n        print(e)\n\n    print(f\"Total score = {score}.\")\n\n\ndef calculate_score(num_drones, max_time, max_cargo, wh_list, order_list, commands):\n    warehouses: Dict[int, Warehouse] = {w.id: w for w in wh_list}\n    orders: Dict[int, Order] = {x.id: x for x in order_list}\n    drones: Dict[int, Drone] = {}\n    for i in range(num_drones):\n        drones[i] = Drone(id=i, position=warehouses[0].position, max_capacity=max_cargo)\n    products: Dict[int, Product] = {\n        x.id: x for x in order_list + wh_list for x in x.products\n    }\n    drone_to_delivery_time: Dict[Drone, int] = defaultdict(int)\n    order_to_delivery_time: Dict[Order, list] = defaultdict(list)\n    score = 0\n    deliv_max = 0\n    for i, command in enumerate(commands):\n        drone_id, str_command, destination_id, product_id, quantity = command.split(\" \")\n\n        drone_id = int(drone_id)\n        destination_id = int(destination_id)\n        product_id = int(product_id)\n        quantity = int(quantity)\n\n        drone = drones[drone_id]\n        product = products[product_id]\n        basket = {product: quantity}\n\n        if str_command == \"L\":\n            warehouse = warehouses[destination_id]\n\n            if warehouse.products.get(product, 0) < quantity:\n                raise ValueError(f\"Command {i}: {warehouse} have not enough {product}.\")\n            warehouse.remove_products(basket)\n\n            drone.add_products(basket)\n            if drone.product_weight > max_cargo:\n                raise ValueError(f\"Command {i}: {drone} overloaded.\")\n\n            drone_to_delivery_time[drone] += drone.distance_from(warehouse) + 1\n            drone.set_position(warehouse.position)\n\n        elif str_command == \"D\":\n            order = orders[destination_id]\n            if order.is_complete():\n                raise ValueError(\n                    f\"Command {i}: the {order} is closed, nothing can be delivered there.\"\n                )\n\n            if drone.products.get(product, 0) < quantity:\n                raise ValueError(f\"Command {i}: {drone} have not enough {product}.\")\n            drone.remove_products(basket)\n\n            if order.products.get(product, 0) < quantity:\n                raise ValueError(f\"Command {i}: Too many {product} for {order}.\")\n            order.remove_products(basket)\n\n            drone_to_delivery_time[drone] += drone.distance_from(order) + 1\n            drone.set_position(order.position)\n            order_to_delivery_time[order].append(drone_to_delivery_time[drone])\n            \n            if order.is_complete():\n                delivery_time = max(order_to_delivery_time[order])\n                if delivery_time > deliv_max:\n                    deliv_max=delivery_time\n                if delivery_time < max_time:                    \n                    score += ceil(100 * (max_time - delivery_time) \/ max_time)\n                else:\n                    raise ValueError(f\"Command {i}: Run out of time.\")\n        else:\n            raise ValueError(f\"Command {i}: Unknown command {str_command}.\")\n    print(str(deliv_max))\n    return score","4513b024":"check(\"..\/input\/hashcode-drone-delivery\/busy_day.in\", \"submission.csv\")","55d035b6":"def write_submission(commands: List[Command], out_file=\"submission.csv\"):\n    with open(out_file, \"w\") as w:\n        w.write(str(len(commands)) + \"\\n\")\n        for c in commands:\n            w.write(c.to_string() + \"\\n\")\n\n\ndef read_submission(input_file, submission_file):\n    _, _, num_drones, max_time, max_cargo, wh_list, order_list = read_file(input_file)\n\n    with open(submission_file, \"r\") as f:\n        _f = f.readlines()\n        num_commands = int(_f[0])\n        str_commands = [x.rstrip(\"\\n\") for x in _f[1:]]\n        assert num_commands == len(str_commands)\n\n    warehouses: Dict[int, Warehouse] = {w.id: w for w in wh_list}\n    orders: Dict[int, Order] = {x.id: x for x in order_list}\n    drones: Dict[int, Drone] = {}\n    for i in range(num_drones):\n        drones[i] = Drone(id=i, position=warehouses[0].position, max_capacity=max_cargo)\n    products: Dict[int, Product] = {\n        x.id: x for x in itertools.chain(order_list, wh_list) for x in x.products\n    }\n\n    commands = []\n\n    for s in str_commands:\n        drone_id, str_command, destination_id, product_id, quantity = s.split(\" \")\n\n        drone_id = int(drone_id)\n        destination_id = int(destination_id)\n        product_id = int(product_id)\n        quantity = int(quantity)\n\n        drone = drones[drone_id]\n        product = products[product_id]\n\n        if str_command == \"L\":\n            destination = warehouses[destination_id]\n\n        elif str_command == \"D\":\n            destination = orders[destination_id]\n\n        else:\n            raise ValueError(f\"Unknown command {s}.\")\n\n        commands.append(\n            Command(\n                drone=drone, destination=destination, product=product, quantity=quantity\n            )\n        )\n\n    return commands, num_drones, max_time, max_cargo, wh_list, order_list\n\ndef calculate_score(commands: List[Command], max_time: int) -> int:\n    command_to_time = get_command_times(commands)\n\n    order_to_times = defaultdict(list)\n    for c, time in command_to_time.items():\n        if isinstance(c.destination, Order):\n            order_to_times[c.destination].append(time)\n\n    order_to_score = {}\n    for o, ts in order_to_times.items():\n        order_to_score[o] = ceil(100 * (max_time - max(ts)) \/ max_time)\n\n    return sum(order_to_score.values())\n\n\ndef get_command_times(commands: List[Command]) -> Dict[Command, int]:\n    # create dict: command -> timestamp\n\n    command_to_time = {}\n\n    drone_to_delivery_time = defaultdict(int)\n    drone_to_position = {}\n    for c in commands:\n        drone = c.drone\n        destination = c.destination\n\n        previous_position = drone_to_position.get(drone, drone.position)\n\n        drone_to_delivery_time[drone] += (\n            previous_position.distance_from(destination.position) + 1\n        )\n\n        drone_to_position[drone] = destination.position\n\n        command_to_time[c] = drone_to_delivery_time[drone]\n\n    return command_to_time\n\n\ndef get_execution_time(commands: List[Command]) -> int:\n    # how long does it take to complete the task list\n\n    drone_to_time = defaultdict(int)\n    drone_to_position = {}\n    for c in commands:\n        drone = c.drone\n        destination = c.destination\n\n        previous_position = drone_to_position.get(drone, drone.position)\n\n        drone_to_time[drone] += (\n            previous_position.distance_from(destination.position) + 1\n        )\n\n        drone_to_position[drone] = destination.position\n\n    return max(drone_to_time.values())\n\n\nclass DroneRoute:\n    def __init__(\n        self,\n        start_point: Union[Order, Warehouse],\n        end_point: Union[Order, Warehouse],\n        warehouses: List[Command],\n        orders: List[Command],\n    ):\n        self.start_point = start_point\n        self.end_point = end_point\n        self.warehouses = warehouses\n        self.orders = orders\n\n    def _get_time(self, orders: List[Order]):\n        time = 0\n        previous_point = self.start_point\n        for order in orders:\n            time += order.distance_from(previous_point)\n            previous_point = order\n        time += previous_point.distance_from(self.end_point)\n        return time\n\n    def optimize(self):\n        if len(self.orders) < 2:\n            return self.orders\n\n        min_time, optimal_order = None, None\n        for p in itertools.permutations(self.orders):\n            time = self._get_time([x.destination for x in p])\n            if min_time is None or time < min_time:\n                min_time, optimal_order = time, p\n        return optimal_order\n    \n    \n\ndef swap_orders_in_routes(commands: List[Command]) -> List[Command]:\n    # optimize time for each drone\n\n    all_drones = {c.drone for c in commands}\n\n    new_commands = []\n    for drone in all_drones:\n        drone_commands = [c for c in commands if c.drone == drone]\n\n        start_point, end_point, orders = None, None, []\n        for i, c in enumerate(drone_commands):\n\n            if isinstance(c.destination, Order):\n                orders.append(c)\n                if i < len(drone_commands) - 1:\n                    continue\n\n            if len(orders) == 0:\n                new_commands.append(c)\n                continue\n\n            if start_point is None:\n                start_point = c\n\n            end_point = c\n\n            route = DroneRoute(\n                start_point=start_point.destination,\n                end_point=end_point.destination,\n                warehouses=[],\n                orders=orders,\n            )\n\n            new_commands += route.optimize()\n\n            start_point = c\n            orders = []\n            if isinstance(end_point.destination, Warehouse):\n                new_commands.append(end_point)\n\n    return new_commands\n\n\n\ndef time_order_swap(commands: List[Command], max_time: int) -> List[Command]:\n    # swap orders\n\n    previous_score = calculate_score(commands, max_time)\n\n    drone_to_commands = defaultdict(list)\n    for c in commands:\n        drone_to_commands[c.drone].append(c)\n\n    bar = tqdm(total=int(len(commands) ** 2 \/ 2), desc=\"swap orders\")\n    for i, j in itertools.product(range(len(commands)), repeat=2):\n        if i > j:\n            continue\n\n        bar.update(1)\n\n        c1, c2 = commands[i], commands[j]\n\n        if isinstance(c1.destination, Warehouse) or isinstance(\n            c2.destination, Warehouse\n        ):\n            continue\n\n        if c1.product != c2.product or c1.quantity != c2.quantity:\n            continue\n\n        d1, d2 = c1.drone, c2.drone\n        t = get_execution_time(drone_to_commands[d1]) + get_execution_time(\n            drone_to_commands[d2]\n        )\n\n        c1.destination, c2.destination = c2.destination, c1.destination\n\n        new_t = get_execution_time(drone_to_commands[d1]) + get_execution_time(\n            drone_to_commands[d2]\n        )\n\n        if new_t >= t:\n            c1.destination, c2.destination = c2.destination, c1.destination\n        else:\n            score = calculate_score(commands, max_time)\n            if score < previous_score:\n                c1.destination, c2.destination = c2.destination, c1.destination\n            else:\n                previous_score = score\n\n    bar.close()\n    return commands","4a7cce13":"def post_processing(input_file, submission_file):\n    commands, _, max_time, _, _, _ = read_submission(input_file, submission_file)\n    print(calculate_score(commands, max_time))\n\n    commands = swap_orders_in_routes(commands)\n    print(calculate_score(commands, max_time))\n\n    commands = time_order_swap(commands, max_time)\n    print(calculate_score(commands, max_time))\n\n    write_submission(commands, submission_file)\n    \n\npost_processing(\"..\/input\/hashcode-drone-delivery\/busy_day.in\", \"submission.csv\")","83dd9db7":"### Credits: https:\/\/github.com\/miraan\/google-hash-code-qualification-round","c9a8c4b4":"This Notebook is a copy of the one made by aDg4b with a little modification on the get_shipment_list_analysis function. So thanks to him that has done the most part of the job. If it was not for his work I would surely not had won this challenge :) "}}