{"cell_type":{"05673218":"code","cad1df87":"code","ccf814f9":"code","b39d934c":"code","5ac4687e":"code","8d0a967d":"code","4e2045d5":"code","9ad34123":"code","70d014d2":"code","a01ae250":"code","c7431637":"code","c12558f4":"code","1024078d":"code","e0ecbb98":"code","c8388adc":"code","25772ed5":"code","e9cf6860":"code","500822b7":"code","b5897366":"code","f8488b3a":"code","ea62a60c":"code","98379c34":"code","89cd869b":"code","6020a838":"code","703ea465":"code","6747f265":"code","73873f3f":"code","47a689a5":"code","3013db91":"code","933431f7":"code","53c892f7":"code","26233edf":"code","c4f13f15":"code","cda61372":"code","ca6be327":"code","dcda1582":"code","67c54905":"code","7ba228d6":"code","57613c45":"code","a6fc0187":"code","9ef32473":"code","e2a8e89f":"markdown","99d1c805":"markdown","53ad3afb":"markdown","75e63aa0":"markdown","e1258522":"markdown","298eb031":"markdown","97c27a7e":"markdown","9d495c62":"markdown"},"source":{"05673218":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cad1df87":"import math\nimport numpy as np\nimport pandas as pd\n\nimport scikitplot\nimport seaborn as sns\nfrom matplotlib import pyplot\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report\n\nimport tensorflow as tf\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Dropout, BatchNormalization, LeakyReLU, Activation\nfrom tensorflow.keras.callbacks import Callback, EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nfrom keras.utils import np_utils","ccf814f9":"path='..\/input\/facial-expression-recognitionferchallenge\/fer2013\/fer2013\/fer2013.csv'\ndf = pd.read_csv(path)\nprint(df.shape)\ndf.head()","b39d934c":"df.emotion.unique()","5ac4687e":"emotion_label_to_text = {0:'anger', 1:'disgust', 2:'fear', 3:'happiness', 4: 'sadness', 5: 'surprise', 6: 'neutral'}","8d0a967d":"df.emotion.value_counts()","4e2045d5":"sns.countplot(df.emotion)\npyplot.show()","9ad34123":"math.sqrt(len(df.pixels[0].split(' ')))","70d014d2":"fig = pyplot.figure(1, (14, 14))\n\nk = 0\nfor label in sorted(df.emotion.unique()):\n    for j in range(7):\n        px = df[df.emotion==label].pixels.iloc[k]\n        px = np.array(px.split(' ')).reshape(48, 48).astype('float32')\n\n        k += 1\n        ax = pyplot.subplot(7, 7, k)\n        ax.imshow(px, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_title(emotion_label_to_text[label])\n        pyplot.tight_layout()","a01ae250":"INTERESTED_LABELS = [0,1,2,3,4,5,6]","c7431637":"df = df[df.emotion.isin(INTERESTED_LABELS)]\ndf.shape","c12558f4":"img_array = df.pixels.apply(lambda x: np.array(x.split(' ')).reshape(48, 48, 1).astype('float32'))\nimg_array = np.stack(img_array, axis=0)","1024078d":"img_array.shape","e0ecbb98":"le = LabelEncoder()\nimg_labels = le.fit_transform(df.emotion)\nimg_labels = np_utils.to_categorical(img_labels)\nimg_labels.shape","c8388adc":"le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\nprint(le_name_mapping)","25772ed5":"X_train, X_valid, y_train, y_valid = train_test_split(img_array, img_labels,\n                                                    shuffle=True, stratify=img_labels,\n                                                    test_size=0.1, random_state=42)\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","e9cf6860":"del df\ndel img_array\ndel img_labels","500822b7":"img_width = X_train.shape[1]\nimg_height = X_train.shape[2]\nimg_depth = X_train.shape[3]\nnum_classes = y_train.shape[1]","b5897366":"# Normalizing results, as neural networks are very sensitive to unnormalized data.\nX_train = X_train \/ 255.\nX_valid = X_valid \/ 255.","f8488b3a":"def build_net(optim):\n    \"\"\"\n    This is a Deep Convolutional Neural Network (DCNN). For generalization purpose I used dropouts in regular intervals.\n    I used `ELU` as the activation because it avoids dying relu problem but also performed well as compared to LeakyRelu\n    atleast in this case. `he_normal` kernel initializer is used as it suits ELU. BatchNormalization is also used for better\n    results.\n    \"\"\"\n    net = Sequential(name='DCNN')\n\n    net.add(\n        Conv2D(\n            filters=64,\n            kernel_size=(5,5),\n            input_shape=(img_width, img_height, img_depth),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_1'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_1'))\n    net.add(\n        Conv2D(\n            filters=64,\n            kernel_size=(5,5),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_2'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_2'))\n    \n    net.add(MaxPooling2D(pool_size=(2,2), name='maxpool2d_1'))\n    net.add(Dropout(0.4, name='dropout_1'))\n\n    net.add(\n        Conv2D(\n            filters=128,\n            kernel_size=(3,3),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_3'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_3'))\n    net.add(\n        Conv2D(\n            filters=128,\n            kernel_size=(3,3),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_4'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_4'))\n    \n    net.add(MaxPooling2D(pool_size=(2,2), name='maxpool2d_2'))\n    net.add(Dropout(0.4, name='dropout_2'))\n\n    net.add(\n        Conv2D(\n            filters=256,\n            kernel_size=(3,3),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_5'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_5'))\n    net.add(\n        Conv2D(\n            filters=256,\n            kernel_size=(3,3),\n            activation='elu',\n            padding='same',\n            kernel_initializer='he_normal',\n            name='conv2d_6'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_6'))\n    \n    net.add(MaxPooling2D(pool_size=(2,2), name='maxpool2d_3'))\n    net.add(Dropout(0.5, name='dropout_3'))\n\n    net.add(Flatten(name='flatten'))\n        \n    net.add(\n        Dense(\n            128,\n            activation='elu',\n            kernel_initializer='he_normal',\n            name='dense_1'\n        )\n    )\n    net.add(BatchNormalization(name='batchnorm_7'))\n    \n    net.add(Dropout(0.6, name='dropout_4'))\n    \n    net.add(\n        Dense(\n            num_classes,\n            activation='softmax',\n            name='out_layer'\n        )\n    )\n    \n    net.compile(\n        loss='categorical_crossentropy',\n        optimizer=optim,\n        metrics=['accuracy']\n    )\n    \n    net.summary()\n    \n    return net","ea62a60c":"\"\"\"\nI used two callbacks one is `early stopping` for avoiding overfitting training data\nand other `ReduceLROnPlateau` for learning rate.\n\"\"\"\n\nearly_stopping = EarlyStopping(\n    monitor='val_accuracy',\n    min_delta=0.00005,\n    patience=11,\n    verbose=1,\n    restore_best_weights=True,\n)\n\nlr_scheduler = ReduceLROnPlateau(\n    monitor='val_accuracy',\n    factor=0.5,\n    patience=7,\n    min_lr=1e-7,\n    verbose=1,\n)\n\ncallbacks = [\n    early_stopping,\n    lr_scheduler,\n]","98379c34":"# As the data in hand is less as compared to the task so ImageDataGenerator is good to go.\ntrain_datagen = ImageDataGenerator(\n    rotation_range=15,\n    width_shift_range=0.15,\n    height_shift_range=0.15,\n    shear_range=0.15,\n    zoom_range=0.15,\n    horizontal_flip=True,\n)\ntrain_datagen.fit(X_train)","89cd869b":"model = build_net(optims[1]) ","6020a838":"import tensorflow as tf\ntf.keras.utils.plot_model(\n    model,\n    to_file=\".\/model.png\",\n    show_shapes=False,\n    show_layer_names=True,\n    rankdir=\"TB\",\n    expand_nested=False,\n    dpi=96,\n)","703ea465":"batch_size = 32 #batch size of 32 performs the best.\nepochs = 100\noptims = [\n    optimizers.Nadam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name='Nadam'),\n    optimizers.Adam(0.001),\n]\n\n# I tried both `Nadam` and `Adam`, the difference in results is not different but I finally went with Nadam as it is more popular.\nmodel = build_net(optims[1]) \nhistory = model.fit_generator(\n    train_datagen.flow(X_train, y_train, batch_size=batch_size),\n    validation_data=(X_valid, y_valid),\n    steps_per_epoch=len(X_train) \/ batch_size,\n    epochs=epochs,\n    callbacks=callbacks,\n    use_multiprocessing=True\n)","6747f265":"model_yaml = model.to_yaml()\nwith open(\"model.yaml\", \"w\") as yaml_file:\n    yaml_file.write(model_yaml)\n    \nmodel.save(\"emotion_full.hdf5\")\n","73873f3f":"import tensorflow as tf\ntf.keras.utils.plot_model(\n    model,\n    to_file=\".\/model.png\",\n    show_shapes=True,\n    show_layer_names=True,\n    rankdir=\"TB\",\n    expand_nested=False,\n    dpi=96,\n)","47a689a5":"sns.set()\nfig = pyplot.figure(0, (12, 4))\n\nax = pyplot.subplot(1, 2, 1)\nsns.lineplot(history.epoch, history.history['accuracy'], label='train')\nsns.lineplot(history.epoch, history.history['val_accuracy'], label='valid')\npyplot.title('Accuracy')\npyplot.tight_layout()\n\nax = pyplot.subplot(1, 2, 2)\nsns.lineplot(history.epoch, history.history['loss'], label='train')\nsns.lineplot(history.epoch, history.history['val_loss'], label='valid')\npyplot.title('Loss')\npyplot.tight_layout()\n\npyplot.savefig('epoch_history_dcnn.png')\npyplot.show()","3013db91":"df_accu = pd.DataFrame({'train': history.history['accuracy'], 'valid': history.history['val_accuracy']})\ndf_loss = pd.DataFrame({'train': history.history['loss'], 'valid': history.history['val_loss']})\n\nfig = pyplot.figure(0, (14, 4))\nax = pyplot.subplot(1, 2, 1)\nsns.violinplot(x=\"variable\", y=\"value\", data=pd.melt(df_accu), showfliers=False)\npyplot.title('Accuracy')\npyplot.tight_layout()\n\nax = pyplot.subplot(1, 2, 2)\nsns.violinplot(x=\"variable\", y=\"value\", data=pd.melt(df_loss), showfliers=False)\npyplot.title('Loss')\npyplot.tight_layout()\n\npyplot.savefig('performance_dist.png')\npyplot.show()","933431f7":"yhat_valid = model.predict_classes(X_valid)\nscikitplot.metrics.plot_confusion_matrix(np.argmax(y_valid, axis=1), yhat_valid, figsize=(7,7))\npyplot.savefig(\"confusion_matrix_dcnn.png\")\n\nprint(f'total wrong validation predictions: {np.sum(np.argmax(y_valid, axis=1) != yhat_valid)}\\n\\n')\nprint(classification_report(np.argmax(y_valid, axis=1), yhat_valid))","53c892f7":"from tensorflow.keras.applications import VGG19,ResNet50 \nfrom tensorflow.keras import Model\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import regularizers ","26233edf":"base_model=VGG19(input_shape=(48,48,1),\n                include_top=False,\n                weights='imagenet')\nbase_model.summary()","c4f13f15":"def fully_connected(base_model, classes):\n    model=base_model.output\n    model=layers.Flatten()(model) ","cda61372":"mapper = {\n    0: \"happy\",\n    1: \"sad\",\n    2: \"neutral\",\n}","ca6be327":"np.random.seed(2)\nrandom_sad_imgs = np.random.choice(np.where(y_valid[:, 1]==1)[0], size=9)\nrandom_neutral_imgs = np.random.choice(np.where(y_valid[:, 2]==1)[0], size=9)\n\nfig = pyplot.figure(1, (18, 4))\n\nfor i, (sadidx, neuidx) in enumerate(zip(random_sad_imgs, random_neutral_imgs)):\n        ax = pyplot.subplot(2, 9, i+1)\n        sample_img = X_valid[sadidx,:,:,0]\n        ax.imshow(sample_img, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_title(f\"true:sad, pred:{mapper[model.predict_classes(sample_img.reshape(1,48,48,1))[0]]}\")\n\n        ax = pyplot.subplot(2, 9, i+10)\n        sample_img = X_valid[neuidx,:,:,0]\n        ax.imshow(sample_img, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_title(f\"t:neut, p:{mapper[model.predict_classes(sample_img.reshape(1,48,48,1))[0]]}\")\n\n        pyplot.tight_layout()","dcda1582":"# Convert the model.\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()\n\n# Save the model.\nwith open('model.tflite', 'wb') as f:\n  f.write(tflite_model)","67c54905":"import cv2\nfrom matplotlib import pyplot\nfrom tensorflow.keras.models import load_model","7ba228d6":"img_path='..\/input\/dataset\/dat2.jpeg'\nimg=cv2.imread(img_path)\nface_classifier = cv2.CascadeClassifier(r'..\/input\/haarcascade-frontalface-defaultxml\/haarcascade_frontalface_default.xml')\nmodel=load_model('.\/emotion_full.h5')\nemotion_labels={0:'anger', 1:'disgust', 2:'fear', 3:'happiness', 4: 'sadness', 5: 'surprise', 6: 'neutral'}","57613c45":"\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nfaces = face_classifier.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)\n\nfor (x, y, w, h) in faces:\n    cv2.rectangle(frame, (x, y - 50), (x + w, y + h + 10), (255, 0, 0), 2)\n    roi_gray = gray[y:y + h, x:x + w]\n    cropped_img = np.expand_dims(np.expand_dims(cv2.resize(roi_gray, (48, 48)), -1), 0)\n    prediction = model.predict(cropped_img)\n    maxindex = int(np.argmax(prediction))\n    print(emotion_labels[maxindex])\n    cv2.putText(img, emotion_labels[maxindex], (x + 20, y - 60), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2,\n                cv2.LINE_AA)\ncv2.imshow('Video', cv2.resize(img, (1600, 960), interpolation=cv2.INTER_CUBIC))","a6fc0187":"pip install tensorflowjs","9ef32473":"import tensorflowjs as tfjs\n\ntfjs.converters.save_keras_model(model, \".\/modelJs\")","e2a8e89f":"`Now I will make the data compatible for neural networks.`","99d1c805":"Convert to tf js model","53ad3afb":"`So majority classes belongs to 3:Happy, 4:Sad and 6:Neutral nd we are also intersted in these three classes only.`","75e63aa0":"The confusion matrix clearly shows that our model is doing good job on the class `happy` but it's performance is low on other two classes. One of the reason for this could be the fact that these two classes have less data. But when I looked at the images I found some images from these two classes are even hard for a human to tell whether the person is sad or neutral. Facial expression depends on individual as well. Some person's neutral face looks like sad.","e1258522":"Convert to tf lite model","298eb031":"    The epochs history shows that accuracy gradually increases and achieved +83% accuracy on both training and validation set, but at the end the model starts overfitting training data.","97c27a7e":"`Splitting the data into training and validation set.`","9d495c62":"See in the first row 7th image looks more like neutral rather than sad and our model even predicted it neutral. Whereas the last image in second row is very much sad."}}