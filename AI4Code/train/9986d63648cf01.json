{"cell_type":{"383dc474":"code","e84df153":"code","66ae03fe":"code","de3581ee":"code","e4322bb7":"code","f729431d":"code","70773920":"code","6a0694b3":"code","5c6c0b53":"code","ff2e9213":"code","3aa30787":"code","e7ef5f72":"code","150636bb":"code","4e1bdbed":"code","6743f4eb":"code","c7478073":"code","60a3fd3e":"code","a71140d8":"code","f590d5e4":"code","4089a8f9":"code","db71db3e":"code","ef197336":"code","aa62869d":"markdown"},"source":{"383dc474":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n!pip install tensorflow-gpu\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e84df153":"import keras\nfrom keras.layers import  Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom keras.callbacks import EarlyStopping\nimport matplotlib.pyplot as plt","66ae03fe":"train_data_path = '\/kaggle\/input\/digit-recognizer\/train.csv'\ntest_data_path = '\/kaggle\/input\/digit-recognizer\/test.csv'","de3581ee":"train = pd.read_csv(train_data_path)\ntest = pd.read_csv(test_data_path)","e4322bb7":"train.head()","f729431d":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train \n\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","70773920":"# Check the data\nX_train.isnull().any().describe()","6a0694b3":"test.isnull().any().describe()\n","5c6c0b53":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","ff2e9213":"# Reshape image in 3 dimensions (height = 28px, width = 28px , channel = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","3aa30787":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","e7ef5f72":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)","150636bb":"# Some examples\ng = plt.imshow(X_train[0][:,:,0])","4e1bdbed":"model = keras.models.Sequential()\nmodel.add(Conv2D(32, kernel_size=(5, 5),\n                 activation='relu',\n                 input_shape=(28,28,1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","6743f4eb":"# Define the optimizer\nfrom keras.optimizers import RMSprop\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","c7478073":"model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\nmodel.summary()","60a3fd3e":"for layer in model.layers:\n    print(layer.get_output_at(0).get_shape().as_list())","a71140d8":"# Set a learning rate annealer\nfrom keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","f590d5e4":"## consider using this for more variety\nfrom keras.preprocessing.image import ImageDataGenerator\ndata_generator_with_aug = keras.preprocessing.image.ImageDataGenerator(validation_split=.2, width_shift_range=.1,\n                                                                       height_shift_range=.1, rotation_range=20,\n                                                                       zoom_range=.1, shear_range=.1)\ndata_generator_with_aug.fit(X_train)","4089a8f9":"# Fit the model\nepochs = 5\nbatch_size = 86\nhistory = model.fit_generator(data_generator_with_aug.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","db71db3e":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","ef197336":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","aa62869d":"## Load Dataset"}}