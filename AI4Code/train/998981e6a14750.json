{"cell_type":{"387c108b":"code","6a01a8e7":"code","7a200fca":"code","9eb0d227":"code","94d6f368":"code","f69c4ffc":"code","19995002":"code","fcb92fd7":"code","965a3c67":"code","e304c532":"code","3fa5a29b":"code","7a5fbf2a":"code","368504a0":"code","aef1cee4":"code","86c97d2b":"code","74826f18":"code","db413c44":"code","d311b29c":"code","b3a49a8d":"code","dfab248a":"code","0de6bf34":"code","96110efb":"code","5e2837cf":"code","af572cbf":"code","24db4783":"code","ec403c2b":"code","03406a58":"code","f4bf3f33":"code","c61d1737":"code","94812e42":"code","ea57712b":"code","1aa2a6a0":"code","fb4991e6":"code","129c77a2":"code","0a50aec0":"code","b06e6fd9":"code","977d76f9":"code","e8627cf3":"code","bc7b0298":"code","9ca8e85b":"code","07ccb72c":"markdown","a97c9813":"markdown","1c8d74f8":"markdown","5e8d5afd":"markdown","4beaa4db":"markdown","caf1a4b3":"markdown","150da4ff":"markdown","549736cd":"markdown","4b935e8e":"markdown","3bde2081":"markdown","61cb16de":"markdown","9ff4660a":"markdown","3ee648bc":"markdown","d2208ce6":"markdown","78bcbe19":"markdown","256f8303":"markdown","06751556":"markdown","b3a56f17":"markdown","92098121":"markdown","60e8ec27":"markdown","8a9a0ab9":"markdown","f9ce69e2":"markdown","ee44b6ed":"markdown","98ed8215":"markdown","39215433":"markdown","fd0dc4f2":"markdown","fab283da":"markdown","c230bb1a":"markdown","0464a4fe":"markdown","b95d31a8":"markdown","878e13ba":"markdown"},"source":{"387c108b":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"ticks\", color_codes=True)","6a01a8e7":"tips = sns.load_dataset(\"tips\")\nsns.catplot(x=\"day\", y=\"total_bill\", data=tips)","7a200fca":"sns.catplot(x=\"day\", y=\"total_bill\", jitter=False, data=tips);","9eb0d227":"sns.catplot(x=\"day\", y=\"total_bill\", kind=\"swarm\", data=tips);","94d6f368":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"sex\", kind=\"swarm\", data=tips);","f69c4ffc":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"time\", kind=\"swarm\", data=tips);","19995002":"sns.catplot(x=\"day\", y=\"total_bill\", kind=\"box\", data=tips);","fcb92fd7":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", kind=\"box\", data=tips);","965a3c67":"tips[\"weekend\"] = tips[\"day\"].isin([\"Sat\", \"Sun\"])\nsns.catplot(x=\"day\", y=\"total_bill\", hue=\"weekend\",\n            kind=\"box\", dodge=False, data=tips);\n","e304c532":"sns.catplot(x=\"total_bill\", y=\"day\", hue=\"sex\",kind=\"violin\", data=tips);","3fa5a29b":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"sex\",kind=\"violin\", split=True, data=tips);","7a5fbf2a":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"sex\",\n            kind=\"violin\", inner=\"stick\", split=True,\n            palette=\"pastel\", data=tips);","368504a0":"titanic = sns.load_dataset(\"titanic\")\nsns.catplot(x=\"sex\", y=\"survived\", hue=\"class\", kind=\"bar\", data=titanic);","aef1cee4":"sns.catplot(y=\"deck\", hue=\"class\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=titanic);","86c97d2b":"sns.catplot(x=\"sex\", y=\"survived\", hue=\"class\", kind=\"point\", data=titanic);","74826f18":"sns.catplot(x=\"class\", y=\"survived\", hue=\"sex\",\n            palette={\"male\": \"g\", \"female\": \"m\"},\n            markers=[\"^\", \"o\"], linestyles=[\"-\", \"--\"],\n            kind=\"point\", data=titanic);","db413c44":"import numpy as np  # to generate random data\nimport pandas as pd","d311b29c":"x = np.random.normal(size=100)\nsns.distplot(x);","b3a49a8d":"sns.distplot(x, kde=False, rug=True);","dfab248a":"# When drawing histograms, the main choice you have is the number of bins to use and where to place them.\nsns.distplot(x, bins=20, kde=False, rug=True);","0de6bf34":"sns.distplot(x, hist=False, rug=True);","96110efb":"sns.kdeplot(x, shade=True);","5e2837cf":"mean, cov = [0, 1], [(1, .5), (.5, 1)]\ndata = np.random.multivariate_normal(mean, cov, 200)\ndf = pd.DataFrame(data, columns=[\"x\", \"y\"])","af572cbf":"sns.jointplot(x=\"x\", y=\"y\", data=df);","24db4783":"x, y = np.random.multivariate_normal(mean, cov, 1000).T\nwith sns.axes_style(\"white\"):\n    sns.jointplot(x=x, y=y, kind=\"hex\", color=\"k\");","ec403c2b":"# Kernel density estimation  \/ kind= \"kde\"\nsns.jointplot(x=\"x\", y=\"y\", data=df, kind=\"kde\");","03406a58":"f, ax = plt.subplots(figsize=(6, 6))\nsns.kdeplot(df.x, df.y, ax=ax)\nsns.rugplot(df.x, color=\"g\", ax=ax)\nsns.rugplot(df.y, vertical=True, ax=ax);","f4bf3f33":"f, ax = plt.subplots(figsize=(6, 6))\ncmap = sns.cubehelix_palette(as_cmap=True, dark=0, light=1, reverse=True)\nsns.kdeplot(df.x, df.y, cmap=cmap, n_levels=60, shade=True);","c61d1737":"iris = sns.load_dataset(\"iris\")\nsns.pairplot(iris);","94812e42":"sns.pairplot(iris, hue=\"species\");","ea57712b":"g = sns.PairGrid(iris)\ng.map_diag(sns.kdeplot)\ng.map_offdiag(sns.kdeplot, n_levels=6);","1aa2a6a0":"sns.regplot(x=\"total_bill\", y=\"tip\", data=tips);","fb4991e6":"sns.lmplot(x=\"total_bill\", y=\"tip\", data=tips);","129c77a2":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips);","0a50aec0":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips,\n           markers=[\"o\", \"x\"], palette=\"Set1\");","b06e6fd9":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", col=\"time\", data=tips);","977d76f9":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\",\n           col=\"time\", row=\"sex\", data=tips);","e8627cf3":"sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\");","bc7b0298":"sns.pairplot(tips, x_vars=[\"total_bill\", \"size\"], y_vars=[\"tip\"],\n             height=5, aspect=.8, kind=\"reg\");","9ca8e85b":"# Like lmplot(), but unlike jointplot(), conditioning on an additional categorical variable is built into pairplot() using the hue parameter:\n\nsns.pairplot(tips, x_vars=[\"total_bill\", \"size\"], y_vars=[\"tip\"],\n             hue=\"smoker\", height=5, aspect=.8, kind=\"reg\");","07ccb72c":"# Visualizing linear relationships\n\nTwo main functions in seaborn are used to visualize a linear relationship as determined through regression. These functions, regplot() and lmplot() are closely related, and share much of their core functionality. It is important to understand the ways they differ, however, so that you can quickly choose the correct tool for particular job.\n\nIn the simplest invocation, both functions draw a scatterplot of two variables, x and y, and then fit the regression model y ~ x and plot the resulting regression line and a 95% confidence interval for that regression:","a97c9813":"#### This behavior is called \u201cdodging\u201d and is turned on by default because it is assumed that the semantic variable is nested within the main categorical variable. If that\u2019s not the case, you can disable the dodging:","1c8d74f8":"### Thats all folks, I hope this notebook help some of you :)\n## If you like this, Please do upvote. \n### Have a great time ahead.","5e8d5afd":"### Kernel density estimation\n\nThe kernel density estimate may be less familiar, but it can be a useful tool for plotting the shape of a distribution. Like the histogram, the KDE plots encode the density of observations on one axis with height along the other axis:","4beaa4db":"### Histograms\n\nHistograms are likely familiar, and a hist function already exists in matplotlib. A histogram represents the distribution of data by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin.","caf1a4b3":"## Violin plots\n\nA different approach is a violinplot(), which combines a boxplot with the kernel density estimation.\nIt somewhat looks like vagina. (just kidding)","150da4ff":"### Conditioning on other variables\n\nThe plots above show many ways to explore the relationship between a pair of variables. Often, however, a more interesting question is \u201chow does the relationship between these two variables change as a function of a third variable?\u201d This is where the difference between regplot() and lmplot() appears. While regplot() always shows a single relationship, lmplot() combines regplot() with FacetGrid to provide an easy interface to show a linear regression on \u201cfaceted\u201d plots that allow you to explore interactions with up to three additional categorical variables.","549736cd":"You can also draw a two-dimensional kernel density plot with the kdeplot() function. This allows you to draw this kind of plot onto a specific (and possibly already existing) matplotlib axes.","4b935e8e":"If you wish to show the bivariate density more continuously, you can simply increase the number of contour levels:","3bde2081":"It\u2019s also possible to \u201csplit\u201d the violins when the hue parameter has only two levels, which can allow for a more efficient use of space and swap axis.","61cb16de":"#### The second approach adjusts the points along the categorical axis using an algorithm that prevents them from overlapping. It can give a better representation of the distribution of observations, although it only works well for relatively small datasets. This kind of plot is sometimes called a \u201cbeeswarm\u201d which is activated by setting kind = \"swarn\" in catplot():","9ff4660a":"#### We can swap the axis x & y. It\u2019s often helpful to put the categorical variable on the vertical axis (particularly when the category names are relatively long or there are many categories).","3ee648bc":"When adding a hue semantic, the box for each level of the semantic variable is moved along the categorical axis so they don\u2019t overlap:","d2208ce6":"## Moving next we are going to look for statistical estimation within categories","78bcbe19":"## pairplots","256f8303":"## Boxplot\n\nThis kind of plot shows the three quartile values of the distribution along with extreme values. The \u201cwhiskers\u201d extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed independently. This means that each value in the boxplot corresponds to an actual observation in the data.\n","06751556":"## Bar plots\n\nA familiar style of plot that accomplishes this goal is a bar plot. In seaborn, the barplot() function operates on a full dataset and applies a function to obtain the estimate (taking the mean by default). When there are multiple observations in each category, it also uses bootstrapping to compute a confidence interval around the estimate, which is plotted using error bars:","b3a56f17":"### Load \"tips\" dataset from seaborn itself\n\ntips is inbuilt dataset in seaborn library.","92098121":"#### An alternative style for visualizing the same information is offered by the pointplot() function. This function also encodes the value of the estimate with height on the other axis, but rather than showing a full bar, it plots the point estimate and confidence interval. Additionally, pointplot() connects points from the same hue category. This makes it easy to see how the main relationship is changing as a function of the hue semantic, because your eyes are quite good at picking up on differences of slopes:","60e8ec27":"### Plotting a regression in other contexts\n\njointplot() can use regplot() to show the linear regression fit on the joint axes by passing kind=\"reg\"","8a9a0ab9":"# Now we will look for Distribtion of observation within categories","f9ce69e2":"#### Each different categorical plotting functions can be distinguished by hue function.","ee44b6ed":"## Plotting with categorical data","98ed8215":"#### The jitter parameter controls the magnitude of jitter or disables it altogether","39215433":"#### Finally, there are several options for the plot that is drawn on the interior of the violins, including ways to show each individual observation instead of the summary boxplot values:","fd0dc4f2":"#### To add another variable, you can draw multiple \u201cfacets\u201d which each level of the variable appearing in the rows or columns of the grid:","fab283da":"### Hexbin plots\n\nA bivariate analogue of a histogram is known as a \u201chexbin\u201d plot, because it shows the counts of observations that fall within hexagonal bins. This plot works best with relatively large datasets.","c230bb1a":"## Visualizing the distribution of a dataset\n\nWhen dealing with a set of data, often the first thing you\u2019ll want to do is get a sense for how the variables are distributed.","0464a4fe":"> ## In this notebook we are going to watch & learn how to visualise data with the help of seaborn library.\n\n     \n\nSeaborn aims to make visualization a central part of exploring and understanding data. Its dataset-oriented plotting functions operate on dataframes and arrays containing whole datasets and internally perform the necessary semantic mapping and statistical aggregation to produce informative plots.\n\nBehind the scenes, seaborn uses matplotlib to draw plots. Many tasks can be accomplished with only seaborn functions, but further customization might require using matplotlib directly.\n\nThere is no universal best way to visualize data. Different questions are best answered by different kinds of visualizations. Seaborn tries to make it easy to switch between different visual representations that can be parameterized with the same dataset-oriented API.","b95d31a8":"## Scatterplots\n\nThe most familiar way to visualize a bivariate distribution is a scatterplot, where each observation is shown with point at the x and y values. This is analogous to a rug plot on two dimensions.","878e13ba":"### Plotting univariate distributions\n\nThe most convenient way to take a quick look at a univariate distribution in seaborn is the distplot() function. By default, this will draw a histogram and fit a kernel density estimate (KDE)."}}