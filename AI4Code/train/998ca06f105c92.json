{"cell_type":{"0d9e270b":"code","52eaa35f":"code","3e360994":"code","b52894ba":"code","525dc4c8":"code","0e88acec":"code","85829143":"code","9b94cee2":"code","4f70592e":"code","881f0efd":"code","bcf668b9":"code","6eea020e":"code","2ab185cc":"code","d5b2bf53":"code","918ac3a9":"code","660a6bab":"code","106cad5a":"code","e13680a9":"code","b515ee11":"code","75775a40":"code","5e7a6c67":"code","45081514":"code","d4eb80ee":"code","4ced6a42":"code","45611428":"code","97909333":"markdown"},"source":{"0d9e270b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52eaa35f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3e360994":"df= pd.read_csv(\"\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")","b52894ba":"df.head(10)","525dc4c8":"df.shape","0e88acec":"df.describe().T","85829143":"df.info()","9b94cee2":"df.isnull().sum()","4f70592e":"sns.countplot(df.Gender)","881f0efd":"df.Gender.describe()","bcf668b9":"plt.pie(df.Gender.value_counts())","6eea020e":"plt.rcParams['figure.figsize'] = (15, 8)\nsns.countplot(df[\"Age\"],palette = 'hsv')","2ab185cc":"plt.rcParams['figure.figsize'] = (15, 8)\nsns.countplot(df[\"Annual Income (k$)\"],palette = 'hsv')","d5b2bf53":"sns.pairplot(df)","918ac3a9":"x = df.iloc[:, [3, 4]].values","660a6bab":"km = KMeans(n_clusters = 5, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\ny_means = km.fit_predict(x)\nkm.fit(x)   #fit the model\ny_means = km.fit_predict(x)\n    ","106cad5a":"plt.scatter(x[y_means == 0,0], x[y_means == 0,1], s = 100, c = 'pink', label = 'miser')\nplt.scatter(x[y_means == 1, 0], x[y_means == 1, 1], s = 100, c = 'yellow', label = 'general')\nplt.scatter(x[y_means == 2, 0], x[y_means == 2, 1], s = 100, c = 'cyan', label = 'target')\nplt.scatter(x[y_means == 3, 0], x[y_means == 3, 1], s = 100, c = 'magenta', label = 'spendthrift')\nplt.scatter(x[y_means == 4, 0], x[y_means == 4, 1], s = 100, c = 'orange', label = 'careful')\nplt.scatter(km.cluster_centers_[:,0], km.cluster_centers_[:, 1], s = 50, c = 'blue' , label = 'centeroid')\n\nplt.style.use('fivethirtyeight')\nplt.title('K Means Clustering', fontsize = 20)\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\nplt.legend()\nplt.grid()\nplt.show()\n","e13680a9":"import scipy.cluster.hierarchy as sch\n\ndendrogram = sch.dendrogram(sch.linkage(x, method = 'ward'))\nplt.title('Dendrogam', fontsize = 20)\nplt.xlabel('Customers')\nplt.ylabel('Ecuclidean Distance')\nplt.show()","b515ee11":"sns.scatterplot(x = df[\"Annual Income (k$)\"], y =df[\"Spending Score (1-100)\"], hue=df.Gender)","75775a40":"income_spending = df.iloc[:,3:5] # anathor way to fit X\nincome_spending","5e7a6c67":"km = KMeans(n_clusters = 5, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\ny_means = km.fit_predict(income_spending)\nkm.fit(x)   #fit the model\ny_means = km.fit_predict(income_spending)","45081514":"plt.scatter(x[y_means == 0,0], x[y_means == 0,1], s = 100, c = 'pink', label = 'miser')\nplt.scatter(x[y_means == 1, 0], x[y_means == 1, 1], s = 100, c = 'yellow', label = 'general')\nplt.scatter(x[y_means == 2, 0], x[y_means == 2, 1], s = 100, c = 'cyan', label = 'target')\nplt.scatter(x[y_means == 3, 0], x[y_means == 3, 1], s = 100, c = 'magenta', label = 'spendthrift')\nplt.scatter(x[y_means == 4, 0], x[y_means == 4, 1], s = 100, c = 'orange', label = 'careful')\nplt.scatter(km.cluster_centers_[:,0], km.cluster_centers_[:, 1], s = 50, c = 'blue' , label = 'centeroid')\n\nplt.style.use('fivethirtyeight')\nplt.title('K Means Clustering', fontsize = 20)\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\nplt.legend()\nplt.grid()\nplt.show()\n\n","d4eb80ee":"df3d = df[[\"Age\", \"Annual Income (k$)\", \"Spending Score (1-100)\"]]","4ced6a42":"km = KMeans(n_clusters = 5, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\ndf3d[\"cluster\"] = km.fit_predict(df3d)\ncust_dict = {0:\"ideal\", 1:\"possible\", 2:\"usual\", 3:\"extravagant\", 4:\"target\"}\ndf3d.cluster = df3d.cluster.map(cust_dict)\ndf3d","45611428":"import plotly.graph_objs as go\nimport plotly.express as px\n\nfig = px.scatter_3d(df3d, x=\"Annual Income (k$)\", y=\"Spending Score (1-100)\", z=\"Age\",\n                    color='cluster', title=\"Mall Customer Segmentation\")\n\nfig.show()","97909333":" # 3D clustering representation "}}