{"cell_type":{"fb2c7ada":"code","dd38be6f":"code","9d8e0cff":"code","797ef93a":"code","e77d9ebe":"code","81b13ac2":"code","495e94eb":"code","ef37fb8f":"code","4edf0783":"code","4f3a1a08":"code","c35fa6f5":"code","78cbfabe":"code","4fab490e":"code","582d75ce":"code","28e898fb":"code","b5e0aa41":"code","1ad51eb1":"code","ba3e4672":"code","68049c09":"code","46e4f1cc":"code","0aff3cee":"code","97e51980":"code","a54b88d2":"code","bb46f966":"markdown","d6a679f8":"markdown","79236455":"markdown","6512e6aa":"markdown","2cb2f611":"markdown","aecf5521":"markdown","a979babe":"markdown","1a95489f":"markdown","bd5d5929":"markdown","944d1a94":"markdown","8b990454":"markdown","b57013c1":"markdown","9e771593":"markdown","a599bf8e":"markdown","88f846b0":"markdown","18840b91":"markdown","ec17fc10":"markdown","f0c60b8d":"markdown","b806732f":"markdown","f20c676a":"markdown","6b2ef6e3":"markdown","645bb5f4":"markdown","485979a7":"markdown","fbd2226b":"markdown","f719713f":"markdown","cc3544e0":"markdown","33e94af7":"markdown","4941b5fb":"markdown","1deaea02":"markdown","857fcd6d":"markdown","368daa44":"markdown","cc252cf8":"markdown","8291ccce":"markdown","c52f2699":"markdown"},"source":{"fb2c7ada":"import pandas as pd # data processing, csv file\nimport numpy as np  # linear algebra\nimport matplotlib.pyplot as plt\nimport time\n\n%matplotlib inline\n\ndataset = pd.read_csv('..\/input\/data-train\/data.csv')","dd38be6f":"dataset.head()","9d8e0cff":"# feature names as a list\ncol = dataset.columns       # .columns gives columns names in data \nprint(col)","797ef93a":"print(\"Dataset : {}\".format(dataset.shape))","e77d9ebe":"# y includes our labels and x includes our features\ny = dataset.diagnosis                          # M or B \n\n# dropping unwanted columns (id, diagnosis, Unnamed: 32)\n\n#axis = 1 (as we are dropping columns)\n#axis = 0 (if we want to drop rows)\nx = dataset.drop(['id', 'diagnosis', 'Unnamed: 32'], axis = 1)\nx.head()","81b13ac2":"import seaborn as sns # data visualization library","495e94eb":"x.describe()","ef37fb8f":"plt.figure(figsize = (12, 8))\n\nsns.countplot(x = y, label = \"Cancer\")\n\nB, M = y.value_counts()\nprint('Number of Benign: ',B)\nprint('Number of Malignant : ',M)","4edf0783":"plt.figure(figsize = (12, 8))\n\n# Seaborn Counterplot\ncancer_type_plot = sns.countplot(x = y)\n\n# Prints the no of cases at teh top and in the middle of each bar\nfor i in cancer_type_plot.patches:\n    cancer_type_plot.annotate(i.get_height(), \n                        (i.get_x() + i.get_width() \/ 2.0, \n                         i.get_height()), \n                        ha = 'center', \n                        va = 'center',\n                        xytext = (0, 4),\n                        textcoords = 'offset points')\n\n# Setting labels\nplt.title(\"Count of cases of Cancer of each type\")\nplt.xlabel(\"Diagnosis\")\nplt.ylabel(\"Number of cases\")","4f3a1a08":"plt.figure(figsize = (12, 8))\n\nsns.distplot(a = dataset['radius_mean'], bins = 10, hist = True)\nplt.title(\"Density and histogram plot for Mean Cancer Radius\")\nplt.xlabel(\"Mean Radius\")\nplt.ylabel(\"Value\")","c35fa6f5":"# data.std() - standard deviation of the data\n# data_std - standardized dataset\n\ndata = x\ndata_std = (data - data.mean())\/data.std()","78cbfabe":"# Since our data contains 30 features(i.e. 30 columns). \n# Therefore, plotting it on screen all at once will make our data untidy. \n# So we can concat target vector with features and group it into 3 groups of 10 features each\n\n# axis = 1 ( Tells that these are columns)\n# first colon is for rows (i.e. we want all teh rows )\n# second colon if for columns (i.e. we want only 10 columns)\n\ndata = pd.concat([y , data_std.iloc[:, 0:10]], axis = 1) # First 10 features\n\n","4fab490e":"# Now our data froma is in long format and we have to convert it onto wide format to plot violin plots\n# (Otherwise it will give an error)\n\ndata = pd.melt(data, id_vars='diagnosis',\n              var_name='features',\n              value_name='value')","582d75ce":"plt.figure(figsize = (12, 8))\n\n# hue - to color the plot according to specific variable\nsns.violinplot(x = 'features',\n               y='value', hue='diagnosis', data=data,\n              split=True, inner='quart')\n\n# xticks - names on x-axis\n\nplt.xticks(rotation=45)","28e898fb":"# Next 10 features\n\nplt.figure(figsize = (12, 8))\n\ndata = pd.concat([y , data_std.iloc[:, 10:20]], axis = 1)\n\n# Now our data froma is in long format and we have to convert it onto wide format to plot violin plots\n# (Otherwise it will give an error)\ndata = pd.melt(data, id_vars='diagnosis',\n              var_name='features',\n              value_name='value')\n\n# hue - to color the plot according to specific variable\nsns.violinplot(x = 'features',\n               y='value', hue='diagnosis', data=data,\n              split=True, inner='quart')\n\n# xticks - names on x-axis\n\nplt.xticks(rotation=45)","b5e0aa41":"#Last 10 features\n\nplt.figure(figsize = (12, 8))\n\ndata = pd.concat([y , data_std.iloc[:, 20:30]], axis = 1)\n\n# Now our data froma is in long format and we have to convert it onto wide format to plot violin plots\n# (Otherwise it will give an error)\ndata = pd.melt(data, id_vars='diagnosis',\n              var_name='features',\n              value_name='value')\n\n# hue - to color the plot according to specific variable\nsns.violinplot(x = 'features',\n               y='value', hue='diagnosis', data=data,\n              split=True, inner='quart')\n\n# xticks - names on x-axis\n\nplt.xticks(rotation=45)","1ad51eb1":"plt.figure(figsize = (12, 8))\n\nsns.boxplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","ba3e4672":"plt.figure(figsize = (12, 8))\n\nsns.scatterplot(x = 'concavity_worst', y = 'concave points_worst', data = dataset)","68049c09":"plt.figure(figsize = (12, 8))\n\nsns.jointplot(x.loc[:,'concavity_worst'],\n              x.loc[:,'concave points_worst'],\n              kind=\"reg\",\n              color=\"#ce1414\")\nplt.xlabel(\"concavity_worst\")\nplt.ylabel(\"concave points_worst\")","46e4f1cc":"# sns.pairplot(dataset)","0aff3cee":"plt.figure(figsize = (12, 8))\n\nsns.set(style=\"white\")\n\ndf = x.loc[:,['radius_worst','perimeter_worst','area_worst']]\ng = sns.PairGrid(df, diag_sharey=False)\n\ng.map_lower(sns.kdeplot, cmap=\"Blues_d\")\ng.map_upper(plt.scatter)\ng.map_diag(sns.kdeplot, lw=3);","97e51980":"plt.figure(figsize=(24,18))\n\nsns.set(style=\"whitegrid\", palette=\"muted\")\ndata = x\ndata_std = (data - data.mean()) \/ (data.std())              # standardization\n\n\n# Plotting first 10 data features \ndata = pd.concat([y,data_std.iloc[:,0:10]],axis=1)            \ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","a54b88d2":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(x.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax);","bb46f966":"### Box Plots","d6a679f8":"The pairplot is a unique plot provided in seaborn. When we show a pairplot for the whole dataset, it plots the relation between each column as a scatter plot and a histogram for each column's relation with itself. It's really great to showcase a lot of information in a single collection of plots.","79236455":"A joint plot is a scatter plot with next level skills. It shows us the distribution of the two values we're plotting along with the scatter plot. Furthermore, it has a built in regression, which shows a regression line on the data.","6512e6aa":"Before using these plots we have to standardize our data (i.e. make sure that no columns have hugely different ranges)\n\nBecause if the numeric data have very different ranges its gonna impact our model and give higher weights to columns with higher values potentially negatively impacting our predicted model\n\nHere we can see that area_mean and smoothness_mean have hugely different range of values \n\nTherefore we have to standarize our data before plotting voilin plots","2cb2f611":"**Attribute Information**:\n\n- ID number\n- Diagnosis (M = malignant, B = benign) 3-32)","aecf5521":"### Pair Grid","a979babe":"---\n## Loading Libraries and Import Data","1a95489f":"A scatter plot helps describe a good relation between two quanities. Here, let's see the relation between the concavity_worst and the concave points_worst feature.","bd5d5929":"### About the Dataset: ","944d1a94":"Let's take a deep dive on the various plots that we can make using seaborn and see how to effectively use them","8b990454":"I'll work with dataset about **Breast Cancer Wisconsin** which is available on [Kaggle](https:\/\/www.kaggle.com\/uciml\/breast-cancer-wisconsin-data).","b57013c1":"Used to measure the correlation between features values\n\nSometimes you just need to take a look at the correlation between features and labels. In such a case, a heatmap that not onlu mentions the values but also the color based on the correlation value gives a great description. Let's try to plot the heatmap for our dataset.","9e771593":" As an alternative of violin plot, box plot can be used\n \n Box plots are also useful in terms of seeing outliers","a599bf8e":"\n`%matplotlib inline` - This tells that all plots of matplot lib is to be made in the jupyter browser and not as image file","88f846b0":"We can see how it already calculates each column value and presents it as a bar. However, the plot does not tell what the actual values are. Let's plot them and see.","18840b91":"Histograms look similar to bar plots but they are used to express continuous values into separate bins.\n\nThe good thing about seaborn is that it has the density plot built into the histogram and is called the dist plot.","ec17fc10":"We can see an almost linear relationship between concavity_worst and concave points_worst. ","f0c60b8d":"<h2 align=center> Data Visualization <\/h2>\n\n---","b806732f":"\n\nWell, now the plot looks so much better than before and even makes each bar more descriptive.\n","f20c676a":"Ten real-valued features are computed for each cell nucleus:\n\n1. radius (mean of distances from center to points on the perimeter) \n2. texture (standard deviation of gray-scale values) \n3. perimeter \n4. area \n5. smoothness (local variation in radius lengths) \n6. compactness (perimeter^2 \/ area - 1.0) \n7. concavity (severity of concave portions of the contour) \n8. concave points (number of concave portions of the contour)\n9. symmetry\n10. fractal dimension (\"coastline approximation\" - 1)\n\nThe mean, standard error and \"worst\" or largest (mean of the three largest values) of these features were computed for each image, resulting in 30 features. For instance, field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius.\n\nAll feature values are recoded with four significant digits.\n\nMissing attribute values: none\n\nClass distribution: 357 benign, 212 malignant","6b2ef6e3":"---\n## Seaborn Library\n\nLet's import the Seaborn library to get started.\n","645bb5f4":"Count plots are a great tool to desribe categorical information. For example, in this dataset we could see how the target is distributed in Benign and Malignant Cancer.","485979a7":"### Pair Plot","fbd2226b":"### Count Plot","f719713f":"<h2 align=center> Exploratory Data Analysis <\/h2>\n\n---","cc3544e0":"# Understanding Seaborn","33e94af7":"### Scatter Plots\n","4941b5fb":"### Observing the Distribution of Values and their Variance with Swarm Plots","1deaea02":"Swarn Plot plots non overlapping points, which helps us in visualizing how the data is spread ","857fcd6d":"Plotting Violin Plots","368daa44":"### Heat Map","cc252cf8":"### Joint Plots","8291ccce":"### Violin Plot\n\nGreat for visualizing distributions\n\nUsed to plot numeric data\n\nViolin plots are similar to box plots but take into account the probability densities of data at different values.","c52f2699":"### Histograms"}}