{"cell_type":{"3ab5b2df":"code","3aa34b1d":"code","c80df2e4":"code","d1b0f51c":"code","86c309a6":"code","a35a44e1":"code","372fdd61":"code","a454c80f":"code","1fb5c897":"code","76363ca4":"code","b637f703":"code","79dfd335":"code","e39a0356":"code","4c9cb2c9":"code","4f8ebc0b":"code","e5fe6d53":"code","b7ab09d2":"code","62149083":"code","ff84b74d":"markdown","3562c3e3":"markdown","481d51cb":"markdown","5bf85995":"markdown","211f4767":"markdown","225366c2":"markdown","fcc1c907":"markdown","ef4bebc7":"markdown"},"source":{"3ab5b2df":"import cufflinks as cf\nimport numpy as np \nimport pandas as pd \n\nRANDOM_STATE = 1234","3aa34b1d":"local_path = \".\/data\/\"\nkaggle_path = \"\/kaggle\/input\/killer-shrimp-invasion\/\"\nexample_submission_filename = \"temperature_submission.csv\"\ntrain_filename = \"train.csv\"\ntest_filename = \"test.csv\"\n\nbase_path = kaggle_path\n\ntemperature_submission = pd.read_csv(base_path + example_submission_filename)\ntest = pd.read_csv(base_path + test_filename)\ntrain = pd.read_csv(base_path + train_filename)","c80df2e4":"train.head()","d1b0f51c":"test.head()","86c309a6":"train_fill_na = train.fillna(method='ffill')\ntest_fill_na = test.fillna(method='ffill')","a35a44e1":"train_fill_na = train_fill_na[[\"pointid\", \"Presence\"]]\ntest_fill_na = test_fill_na[[\"pointid\"]]","372fdd61":"train_fill_na.head()","a454c80f":"test_fill_na.head()","1fb5c897":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score","76363ca4":"classifier = DecisionTreeClassifier(random_state=RANDOM_STATE)\n\nX_full = train_fill_na[[\"pointid\"]]\ny_full = train_fill_na[\"Presence\"]\n\nn_splits = 10\nscores = cross_val_score(classifier, X_full, y_full,\n                                  scoring='roc_auc',\n                                  cv=n_splits)\n\nscores.mean()","b637f703":"classifier = DecisionTreeClassifier(random_state=RANDOM_STATE)\nclassifier.fit(X_full, y_full)","79dfd335":"predictions = classifier.predict(test_fill_na)","e39a0356":"temperature_submission['Presence'] = predictions\ntemperature_submission.to_csv('with_pointid.csv', index=False)","4c9cb2c9":"from sklearn import tree","4f8ebc0b":"tree.plot_tree(classifier)","e5fe6d53":"train[train[\"Presence\"] == 1].sort_values(\"pointid\")[\"pointid\"].values","b7ab09d2":"temperature_submission[temperature_submission[\"Presence\"] == 1].sort_values(\"pointid\")[\"pointid\"].values","62149083":"temperature_submission[temperature_submission[\"pointid\"] >= 2917768.5].sort_values(\"pointid\")[\"pointid\"].values","ff84b74d":"# Clean data","3562c3e3":"# Train decision tree classifier on whole train data and submit --> 1 AUC leaderboard score","481d51cb":"# Why?","5bf85995":"All the 50 records with positive presence in the training set have pointid >= 2917769 and all the records with negative presence have pointid < 2917769, thus the decision tree classifier learns to map positive presence to all the records with pointid >= 2917769. In the test set this rule applies, so we get the perfect score.","211f4767":"# Keep only pointid as feature","225366c2":"# Decision tree classifier CV --> ~1 AUC CV score","fcc1c907":"Training a simple decision tree classifier on the \"pointid\" feature leads to 1 AUC on the public leaderboard. Explanation is in the last paragraphs of this notebook.","ef4bebc7":"# Load data"}}