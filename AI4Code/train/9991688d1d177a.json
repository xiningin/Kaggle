{"cell_type":{"c2c0e2f0":"code","13849be2":"code","18932d46":"code","42e30b48":"code","413b05f0":"code","3896cdad":"code","e16ce64c":"code","f064eb79":"code","08bb6df8":"code","fe3b8fda":"code","1d5e2fd6":"code","7f4fd338":"code","2ef312ff":"code","33162257":"code","07cbd360":"code","1f247749":"code","a42d3021":"code","440022e8":"code","248f73db":"code","07c12aaa":"code","4cc89e57":"code","2626ef05":"code","26c1265a":"code","9ce366bd":"code","1aa2bdb5":"markdown","c96a43b8":"markdown","2cd1c1e0":"markdown","4ade3b5f":"markdown","9fb63ea6":"markdown","196843fe":"markdown","abe410cd":"markdown","84407191":"markdown","81740258":"markdown","4164dd77":"markdown","e0827c08":"markdown","82cd1b16":"markdown","e8fbd943":"markdown"},"source":{"c2c0e2f0":"# Lets import the library and read the dataset\nimport numpy as np\nimport datetime as dt\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n!pip install openpyxl\n\n        \npd.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.2f' % x)\n\ndf_ = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name = \"Year 2010-2011\" )\ndf = df_.copy()\ndf.head()","13849be2":"df.shape","18932d46":"# Are there any missing values?\ndf.isnull().any()\ndf.isnull().sum()","42e30b48":"# Filling in missing data\ndf.dropna(inplace=True)","413b05f0":"# Check again\ndf.isnull().sum()","3896cdad":"df[\"StockCode\"].nunique()","e16ce64c":"df[\"StockCode\"].value_counts().head()\n","f064eb79":"df[\"StockCode\"].value_counts().sort_values(ascending=False).head()","08bb6df8":"df = df[~df[\"Invoice\"].str.contains(\"C\", na = False)]","fe3b8fda":"df[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]","1d5e2fd6":"df.head()","7f4fd338":"# the last date of purchase\ndf[\"InvoiceDate\"].max()","2ef312ff":"# make sure that none of the Recency values become zero\nimport datetime as dt\ntoday_date = dt.datetime(2011, 12, 11)","33162257":"rfm = df.groupby('Customer ID').agg({'InvoiceDate': lambda InvoiceDate: (today_date - InvoiceDate.max()).days,\n                                     'Invoice': lambda Invoice: Invoice.nunique(),\n                                     'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n","07cbd360":"rfm.head()","1f247749":"rfm.columns = ['recency', 'frequency', 'monetary']","a42d3021":"rfm = rfm[rfm[\"monetary\"] > 0]\nrfm.head()","440022e8":"rfm[\"recency_score\"] = pd.qcut(rfm['recency'], 5, labels=[5, 4, 3, 2, 1])\n\n\nrfm[\"frequency_score\"] = pd.qcut(rfm['frequency'].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])\n\nrfm[\"monetary_score\"] = pd.qcut(rfm['monetary'], 5, labels=[1, 2, 3, 4, 5])\n\n\nrfm[\"RFM_SCORE\"] = (rfm['recency_score'].astype(str) +\n                    rfm['frequency_score'].astype(str))","248f73db":"rfm.head()","07c12aaa":"seg_map = {\n    r'[1-2][1-2]': 'hibernating',\n    r'[1-2][3-4]': 'at_Risk',\n    r'[1-2]5': 'cant_loose',\n    r'3[1-2]': 'about_to_sleep',\n    r'33': 'need_attention',\n    r'[3-4][4-5]': 'loyal_customers',\n    r'41': 'promising',\n    r'51': 'new_customers',\n    r'[4-5][2-3]': 'potential_loyalists',\n    r'5[4-5]': 'champions'\n}\n\n\nrfm['segment'] = rfm['RFM_SCORE'].replace(seg_map, regex=True)\n\nrfm[[\"segment\", \"recency\", \"frequency\", \"monetary\"]].groupby(\"segment\").agg([\"mean\", \"count\"])\n\nrfm.head()","4cc89e57":"champions = rfm[rfm['segment'] == 'champions']\ncant_loose = rfm[rfm['segment'] == 'cant_loose']","2626ef05":"champions[['recency','frequency','monetary']].agg(['mean', 'count'])","26c1265a":"cant_loose[['recency','frequency','monetary']].agg(['mean', 'count'])","9ce366bd":"loyal_df = pd.DataFrame()\nloyal_df[\"loyal_customer_id\"] = rfm[rfm[\"segment\"] == \"loyal_customers\"].index\nloyal_df.head()\n\nloyal_df.to_excel(\"loyal_customers.xlsx\", sheet_name='Loyal Customers Index')","1aa2bdb5":"*The 'C' in the invoices shows the canceled transactions. Since we will not use the canceled transactions, we should remove them.*","c96a43b8":"We can say that 633 customers bought 6857.96 units by shopping 12 times approximately every 6 days.\nIt is the most special, most loved type of customer. Special calls can be made to these customers. Gift voucher can be defined. Campaigns can be made of buy 1 get 1 free.","2cd1c1e0":"*How many of each product are there?*","4ade3b5f":"We need to score these values between 1 and 5. After scoring, we will segment it.","9fb63ea6":"63 customers bought 897.63 units by shopping twice every 132 days. They spend a good amount of money and they used to be our loyal customers, we can't loose them. There may be pop-ups like we miss you. Continuous reminder notifications can be sent. Special campaigns can be made for your previous shopping.","196843fe":"*Create a variable named 'TotalPrice' that represents the total earnings per invoice.*","abe410cd":"**Calculation of RFM metrics**","84407191":"**Recency :** the number of days between today_date and the last purchase date of this customer\n\n**Frequency :** the number of purchase of this customer\n\n**Monetary :** sum of TotalPrice of this customer","81740258":"**Data Understanding and Preprocessing**","4164dd77":"*Sort the 5 most ordered products from most to least.*","e0827c08":"*How many unique product are there?*","82cd1b16":"Now, we anayze 3 segments which are champions, can't loose and need attention.","e8fbd943":"*InvoiceDate represent to 'recency'\nInvoice represent 'frequency'\nTotalPrice represent 'monetary'*\n\n**Lets change the columns names**"}}