{"cell_type":{"592b9469":"code","021e0af3":"code","c446548b":"code","ba4ebb06":"code","215a8e88":"code","6461be17":"code","478f28f7":"code","e3e2aba4":"code","e9d0b509":"code","92265eeb":"code","32f0412e":"code","73e7906c":"code","99aff91a":"code","58c1c2d7":"markdown","0777dc89":"markdown","e8fb3300":"markdown","7d14e067":"markdown","5b1710e8":"markdown","e4307a1d":"markdown","63abd559":"markdown","a44972e9":"markdown","5bcb7971":"markdown","31b429f2":"markdown","17ae6889":"markdown"},"source":{"592b9469":"# import and prepare data\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\ndf = pd.read_csv('..\/input\/nj-pick-6-lottery-results-jan-1981-mar-2020\/NJ Pick 6 - Winning Numbers - Winning-Numbers-Only.csv')\n\n# Show first 5 entries\ndf.head()","021e0af3":"# Dataframe Size\nprint(f'Dataframe Size: {df.shape}')\ndf.loc[:, ['Ball1', 'Ball2', 'Ball3', 'Ball4', 'Ball5', 'Ball6']]","c446548b":"# Show information about the dataframe\ndf.info()","ba4ebb06":"import seaborn as sns\nimport matplotlib as mpl\n\nmpl.rc(\"figure\", figsize=(12, 12))\n\n#Frequency of Ball #1\nsns.countplot(x=\"Ball1\", data=df)","215a8e88":"#Frequency of Ball #2\nsns.countplot(x=\"Ball2\", data=df)","6461be17":"#Frequency of Ball #3\nsns.countplot(x=\"Ball3\", data=df)","478f28f7":"#Frequency of Ball #4\nsns.countplot(x=\"Ball4\", data=df)","e3e2aba4":"#Frequency of Ball #5\nsns.countplot(x=\"Ball5\", data=df)","e9d0b509":"#Frequency of Ball #6\nsns.countplot(x=\"Ball6\", data=df)","92265eeb":"from scipy import stats\nsns.distplot(df.sum(axis=1), fit=stats.gamma)","32f0412e":"df.mode()","73e7906c":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\n\nX = np.array([df[\"Ball1\"], df[\"Ball2\"], df[\"Ball3\"], df[\"Ball4\"], df[\"Ball5\"], df[\"Ball6\"]] )\nbindex = 0\nfinal = []\n\nfor ball in [ df[\"Ball1\"], df[\"Ball2\"], df[\"Ball3\"], df[\"Ball4\"], df[\"Ball5\"], df[\"Ball6\"] ]:\n    Y = np.array(ball.values.tolist())\n    X_train, X_test, y_train, y_test = train_test_split(X.transpose(), Y, test_size=0.9, random_state=None)\n    clf = GradientBoostingClassifier()\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)               # prediction\n    accuracy = accuracy_score(y_test, y_pred)  # check accuracy\n    print(f\"Prediction of Ball {bindex + 1} is [{y_pred[bindex]}] with tested accuracy of {accuracy * 100}\")\n    final.append(y_pred[bindex])\n    bindex = bindex + 1\n    ","99aff91a":"from scipy import stats\n\nprint(f\"Predicted Numbers: {final}\")\n\nS = sum(final)\nprint(f\"Sum of numbers: {S}\")\nprint(f\"Sum is good!\") if S >= 100 and S <= 200 else print(f\"Sum of prediction is out of ideal range. Re-run prediction.\")\n\n","58c1c2d7":"# Look at the distribution of the sum of each winning drawing\nThe most common ball number is shown in the mode table which is shown next","0777dc89":"# Ball 6 Frequency Chart","e8fb3300":"# Ball 4 Frequency Chart","7d14e067":"# Test prediction model\nWe use `random_state=None` in order to add a degree of chance to this, just like the real lottery. Every run should be different!","5b1710e8":"# Ball 3 Frequency Chart","e4307a1d":"# Ball 2 Frequency Chart","63abd559":"# Prediction","a44972e9":"# Ball 5 Frequency Chart","5bcb7971":"# Most Frequent Numbers by Ball","31b429f2":"# Ball 1 Frequency Chart","17ae6889":"# Why\nI'm a bit new to using machine learning for data analysis.  I've always done analysis by hand and figured since I knew Python, why not give this a try.  Who knows what we might find.\n\nNote: This is just for fun and is not something I'm particularly skilled in.  Best practices may or not be in use."}}