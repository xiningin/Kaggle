{"cell_type":{"4b7556b8":"code","d8418a48":"code","7879df56":"code","ad907947":"code","253eb482":"code","eca25a40":"code","d0e6f6d6":"code","2bd60e20":"code","106ef55f":"code","89fa074f":"code","b98a1176":"code","71e9364c":"code","9a541658":"code","6c6387f0":"code","7bd33851":"code","7f01c041":"code","6239054c":"code","9b37d1cc":"markdown","fa70ef73":"markdown","9486f133":"markdown","1d1f2c4f":"markdown","50846618":"markdown"},"source":{"4b7556b8":"from IPython.display import HTML\n\nHTML('''<script>\ncode_show=true; \nfunction code_toggle() {\n if (code_show){\n $('div.input').hide();\n } else {\n $('div.input').show();\n }\n code_show = !code_show\n} \n$( document ).ready(code_toggle);\n<\/script>\n<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on\/off the raw code.\"><\/form>''')","d8418a48":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator \nplt.style.use('fivethirtyeight')\n%matplotlib inline ","7879df56":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')","ad907947":"# Merge the three tables to one table so that the it is easy to control : new table columns = ['Province\/State','Country\/Region','Lat','Long', 'Date', 'No.Confirmed', 'No.death', 'No.Recoveries']\n# Unpivot the tables \nbasic_columns = ['Province\/State','Country\/Region', 'Lat','Long']\nconfirmed_df_pivote = confirmed_df.melt(id_vars=basic_columns, var_name='Date', value_name='No.Confirmed')\nconfirmed_df_pivote['Date'] = pd.to_datetime(confirmed_df_pivote['Date'])\ndeaths_df_pivote = deaths_df.melt(id_vars=basic_columns, var_name='Date', value_name='No.death')\ndeaths_df_pivote['Date'] = pd.to_datetime(deaths_df_pivote['Date'])\nrecoveries_df_pivote = recoveries_df.melt(id_vars=basic_columns, var_name='Date', value_name='No.Recoveries')\nrecoveries_df_pivote['Date'] = pd.to_datetime(recoveries_df_pivote['Date'])\n# merge the sperate tables into one \nresult = pd.merge(confirmed_df_pivote, deaths_df_pivote,  how='left', on = ['Province\/State','Country\/Region', 'Lat','Long', 'Date'])\nresult = pd.merge(result, recoveries_df_pivote,  how='left', on = ['Province\/State','Country\/Region', 'Lat','Long', 'Date'])\nresult.head()","253eb482":"# get overall trend data first\n\ndf_overall  = result.groupby('Date').agg({'No.Confirmed':'sum', 'No.death':'sum', 'No.Recoveries': 'sum'})\\\n                    .reset_index().sort_values(by='Date',ascending=True)","eca25a40":"import plotly.graph_objects as go\n# Create traces\nfig = go.Figure()\nfig.add_trace(go.Line(x=df_overall['Date'], y=df_overall['No.Confirmed'],\n                    mode='lines',\n                    name='No.Confirmed'))\nfig.add_trace(go.Line(x=df_overall['Date'], y=df_overall['No.death'],\n                    mode='lines',\n                    name='No.death'))\nfig.add_trace(go.Line(x=df_overall['Date'], y=df_overall['No.Recoveries'],\n                    mode='lines', name='No.Recoveries'))\n\nfig.update_layout(title_text=\"<b>Global trend<\/b>\",)\n\nfig.update_yaxes(title_text=\"<b>Numbers<\/b>\")\n\nfig.show()","d0e6f6d6":"# the top 10 countries data\n\ntop_countries  = list(result.groupby('Country\/Region')\\\n                .agg({'No.Confirmed':'sum'})\n                .sort_values(by='No.Confirmed',ascending=False)\n                .reset_index()\n                .head(10)['Country\/Region'])\n\ndf_topCountries = result.loc[result['Country\/Region'].isin(top_countries)]","2bd60e20":"# start plotting the top 10 countries  \nfig = go.Figure()\n\nfor country in top_countries:\n   \n    df_inter =  df_topCountries.loc[df_topCountries['Country\/Region'] == country]\\\n                .groupby(['Date','Country\/Region'])\\\n                .agg({'No.Confirmed':'sum'})\\\n                .reset_index()\\\n                .sort_values(by='Date',ascending=True)\n    \n    fig.add_trace(go.Line(x=df_inter['Date'], y=df_inter['No.Confirmed'],\n                    mode='lines',\n                    name= country))\n\nfig.update_layout(title_text=\"<b>Top 10 countries trend for confirmed cases<\/b>\",)\n\nfig.update_yaxes(title_text=\"<b>Numbers<\/b>\")\n\nfig.show()","106ef55f":"# start plotting the top 10 countries  \nfig = go.Figure()\n\nfor country in top_countries:\n   \n    df_inter =  df_topCountries.loc[df_topCountries['Country\/Region'] == country]\\\n                .groupby(['Date','Country\/Region'])\\\n                .agg({'No.death':'sum'})\\\n                .reset_index()\\\n                .sort_values(by='Date',ascending=True)\n    \n    fig.add_trace(go.Line(x=df_inter['Date'], y=df_inter['No.death'],\n                    mode='lines',\n                    name= country))\n\nfig.update_layout(title_text=\"<b>Top 10 countries trend for Death cases<\/b>\",)\n\nfig.update_yaxes(title_text=\"<b>Numbers<\/b>\")\n\nfig.show()","89fa074f":"# start plotting the top 10 countries  \nfig = go.Figure()\n\nfor country in top_countries:\n   \n    df_inter =  df_topCountries.loc[df_topCountries['Country\/Region'] == country]\\\n                .groupby(['Date','Country\/Region'])\\\n                .agg({'No.Recoveries':'sum'})\\\n                .reset_index()\\\n                .sort_values(by='Date',ascending=True)\n    \n    fig.add_trace(go.Line(x=df_inter['Date'], y=df_inter['No.Recoveries'],\n                    mode='lines',\n                    name= country))\n\nfig.update_layout(title_text=\"<b>Top 10 countries trend for Recoveries cases<\/b>\",)\n\nfig.update_yaxes(title_text=\"<b>Numbers<\/b>\")\n\nfig.show()","b98a1176":"result['Date'] = result['Date'].apply(lambda x: x.strftime('%Y-%m-%d'))","71e9364c":"result_map = result.groupby(['Date','Country\/Region'])\\\n                .agg({'No.Confirmed':'sum', 'No.death':'sum', 'No.Recoveries': 'sum'})\\\n                .reset_index()\\\n                .sort_values(by='Date',ascending=True)","9a541658":"import plotly.express as px\nfig = px.choropleth(result_map, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\",\n                    color=\"No.Confirmed\", \n                    hover_name=\"Country\/Region\", \n                    animation_frame=\"Date\"\n                   )\n\nfig.update_layout(\n    title_text = 'Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nfig.show()","6c6387f0":"set(result['Country\/Region'])","7bd33851":"def plot_country(result,country):\n\n    df = result.loc[result['Country\/Region'] == country]\n    \n    fig = go.Figure()\n    fig.add_trace(go.Line(x=df['Date'], y=df['No.Confirmed'],\n                        mode='lines',\n                        name='No.Confirmed'))\n    fig.add_trace(go.Line(x=df['Date'], y=df['No.death'],\n                        mode='lines',\n                        name='No.death'))\n    fig.add_trace(go.Line(x=df['Date'], y=df['No.Recoveries'],\n                        mode='lines', name='No.Recoveries'))\n\n    fig.update_layout(title_text=f\"<b>{country} trend<\/b>\",)\n\n    fig.update_yaxes(title_text=\"<b>Numbers<\/b>\")\n\n    fig.show()\n    \nplot_country(result,'Singapore')","7f01c041":"plot_country(result,'US')","6239054c":"plot_country(result,'Japan')","9b37d1cc":"# Plot the world overall trend \n*     Plus Top 10 most serious countries details\n","fa70ef73":"# Conclusions\n1. China is entering the later diffusion period for the COVID-19 as the accumulated number of confirmed case and death slowly increase while the other countries like Italy and the US are in the diffusion 'take-off' period.\n2. According to the analysis of China's diffusion pattern, China's 'take-off' period is 30 days (From Jan 31 to Mar 1). Assuming the other countries take strict and efficient actions like China, Italy's COVID-19 spread process will enter the later diffusion period in 30 days later.","9486f133":"# Plot the Dynamic spread process Globally","1d1f2c4f":"<h>\n<font face = \"Verdana\" size =\"5\">This notebook visualizes the spread of COVID-19 across the world under multiple analysis perspectives.<\/font>\n<h>\n    <font face = \"Verdana\" size =\"4\">\n    <br>\n    <br>Data: <a href='https:\/\/github.com\/CSSEGISandData\/COVID-19'>https:\/\/github.com\/CSSEGISandData\/COVID-19<\/a>\n    <br>Learn more from the <a href='https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019'>WHO<\/a>\n    <br>Learn more from the <a href='https:\/\/www.cdc.gov\/coronavirus\/2019-ncov'>CDC<\/a>\n    <br>Learn more from the <a href='https:\/\/github.com\/therealcyberlord'>Xingyu Bian<\/a>\n    <br>Map Visualizations from  <a href='https:\/\/towardsdatascience.com\/coronavirus-data-visualizations-using-plotly-cfbdb8fcfc3d'>Terence Shin<\/a>\n    <br>\n    <\/font>\n    \n   <font face = \"Verdana\" size =\"4\">\n   <br>Feel free to provide me with feedbacks. \n   <br>Author: Zhang Nan. \n   <br>Contact: adam21zhang@gmail.com\n    <br> Last update: 3\/28\/2020 10:00 PM\n    <br> Make sure you run the notebook to see the graphs better. \n <\/font>\n <font face = \"Verdana\" size =\"1\">\n<center><img src='https:\/\/blog.covance.com\/wp-content\/uploads\/2017\/04\/vaccine-graphic-covance-april-768x512.jpg'>\n Source: https:\/\/blog.covance.com\/wp-content\/uploads\/2017\/04\/vaccine-graphic-covance-april-768x512.jpg <\/center> \n    \n <font face = \"Verdana\" size =\"4\"> Keep strong, world! Stay safe. <\/font>\n","50846618":"Import the data (make sure you update this on a daily basis)"}}