{"cell_type":{"a3a4f7ee":"code","2ee7eb0f":"code","45b10706":"markdown"},"source":{"a3a4f7ee":"import torch\n# refer to https:\/\/stackoverflow.com\/questions\/54316053\/update-step-in-pytorch-implementation-of-newtons-method\n# inital x\ninitial_x = torch.tensor([4.], requires_grad = True) \n\n# function to want to solve\ndef solve_func(x): \n    return torch.exp(x) - 2\n\ndef newton_method(function, initial, iteration=10, convergence=0.0001):\n    for i in range(iteration): \n        previous_data = initial.clone()\n        value = function(initial)\n        value.backward()\n        # update \n        initial.data -= (value \/ initial.grad).data\n        # zero out current gradient to hold new gradients in next iteration \n        initial.grad.data.zero_() \n        print(\"epoch {}, obtain {}\".format(i, initial))\n        # Check convergence. \n        # When difference current epoch result and previous one is less than \n        # convergence factor, return result.\n        if torch.abs(initial - previous_data) < torch.tensor(convergence):\n            print(\"break\")\n            return initial.data\n    return initial.data # return our final after iteration\n\n# call starts\nresult = newton_method(solve_func, initial_x)","2ee7eb0f":"print(result)","45b10706":"# Solve equation by pytorch Newton-Raphson method"}}