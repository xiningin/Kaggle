{"cell_type":{"3130618b":"code","76983d4a":"code","010b4edd":"code","10259ad3":"code","611fa0e9":"code","6e60f8f4":"code","3f1496d1":"code","4262f9c8":"code","ff3a9ffa":"code","18a308e2":"code","8d111c6f":"code","f7e44c69":"code","0ac1ee5c":"code","14e2558f":"code","f75a2cdc":"code","dbc900e7":"code","cc557df5":"code","5396d9d2":"code","2ce7f089":"code","552f4492":"code","5eecebcf":"code","4ae44f1b":"code","b585a4b1":"code","9ca75035":"code","6eb42db6":"code","c30caa70":"code","5c5a98ca":"code","096e8a1f":"code","042e24ca":"code","6bdbff42":"code","e040b0a1":"code","0bcd4a58":"code","1127c135":"code","2b44c4b8":"code","91604f9b":"code","bfd721e0":"code","65c84f14":"code","07676853":"code","45be0ef8":"code","0e29c1b4":"code","8a6ed1ac":"code","6b0ad215":"code","3a4bf98a":"code","e4184991":"code","23f55066":"code","889c8b95":"code","66478464":"code","627d97ee":"code","e0769f48":"code","af829824":"code","cf76833b":"code","48f7b848":"code","83264f3c":"code","115ccc60":"code","1d70969c":"code","150fc019":"code","c4a8a88f":"code","0df09262":"code","13730fe3":"code","960ca7b5":"code","22d6fad6":"code","3585d63c":"code","5d75ee8d":"code","5b5a3766":"code","480bf25a":"code","bb5ff8f1":"code","2bbd9dab":"code","dcef75b0":"code","f2893723":"code","e52e18cf":"code","f75edc0b":"code","1b469883":"code","67fda4a5":"code","79eb0796":"code","7554352d":"code","c0de2fa2":"code","e737460b":"code","37ac9797":"code","da869215":"code","95cc61e0":"code","3d89bd68":"code","0a4e1c2f":"code","8c08475f":"code","f1b05bfd":"markdown","49580322":"markdown","643b880b":"markdown","e9b79ad3":"markdown","249bac96":"markdown","6b4ea368":"markdown","ea0215c0":"markdown","563bde22":"markdown","acd9051f":"markdown","6bd7285e":"markdown","6a816907":"markdown","d0e8c936":"markdown","713a697c":"markdown","cd347e3d":"markdown","8a061923":"markdown","b85a5af1":"markdown","0e01afd3":"markdown","28f4bf81":"markdown","5714d23c":"markdown","13eb69cd":"markdown","ea1e85ef":"markdown","f85e99f7":"markdown","a67ba889":"markdown","4558aba1":"markdown","81b3d5d3":"markdown","5606bcec":"markdown","92637eb3":"markdown","8eb90f0a":"markdown","c93cd3ad":"markdown","8e1c215f":"markdown","4708eee0":"markdown","c8f12a2c":"markdown","c7985f6d":"markdown","c23e8ed9":"markdown","265b1427":"markdown","ed6a2a39":"markdown","077d377c":"markdown","7c44d6c0":"markdown","27235c81":"markdown","f2700188":"markdown","b0538d2e":"markdown","b066ee5d":"markdown","0ad0e56c":"markdown","c5bb4ef1":"markdown","541c6a49":"markdown","63c78779":"markdown","15bebc22":"markdown","5de51b21":"markdown","c21ecd8b":"markdown","7d18ecee":"markdown","cbef57c9":"markdown","51ad7e97":"markdown","3cee1d8a":"markdown","88e5f395":"markdown","42a04f07":"markdown","7bfb8f6c":"markdown","c9d6a316":"markdown","bd5a34d6":"markdown","699004d8":"markdown","a411eacb":"markdown","fdd6685e":"markdown","1f1096b8":"markdown","b0c6a73b":"markdown","15e5dd8a":"markdown","a8daed24":"markdown","df2e4b9f":"markdown","c009b2c7":"markdown","77ce61ba":"markdown","71b1adf6":"markdown","312e7c06":"markdown","35bc4396":"markdown","ab92c18d":"markdown","df14a2f3":"markdown","7bd04298":"markdown","ae27b7af":"markdown","1e4b73e6":"markdown","ec2e2e90":"markdown","3adccf23":"markdown","def0ee55":"markdown","4ed65252":"markdown","cfd44e05":"markdown","fc315b65":"markdown","f63feb9e":"markdown","064e9686":"markdown","4b3d63fa":"markdown","d3804a4b":"markdown","dd968517":"markdown","6ea9b617":"markdown","3b8f2de7":"markdown","bf946d31":"markdown","a3a44eb5":"markdown","7e4c2eb5":"markdown","56700e67":"markdown","2bfa802f":"markdown","731d3ab3":"markdown","f6084a6d":"markdown"},"source":{"3130618b":"#Importing Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport chardet\nimport math as mt","76983d4a":"# Check the character encoding of the file might be.\nwith open('..\/input\/lending-club-dataset\/loan.csv', 'rb') as rawdata:\n    result = chardet.detect(rawdata.read())\n    \nprint(result)","010b4edd":"#reading loan.csv in loan dataframe\nloan = pd.read_csv('..\/input\/lending-club-dataset\/loan.csv', encoding = 'utf-8')","10259ad3":"loan.info()","611fa0e9":"loan.head(5)","6e60f8f4":"#calculating 80% to total records is to find cutoff value to delete\ncut_off = round((loan['id'].count() *80) \/ 100)\nprint(cut_off)","3f1496d1":"loan_del = loan.isnull().sum() > cut_off\nloan_del = list(loan_del[loan_del == True].index)","4262f9c8":"#Dropping columns with more than 80% missing values (removing redundant columns)\nloan = loan.drop(loan_del, axis = 1)","ff3a9ffa":"loan.info()","18a308e2":"loan.head(10)","8d111c6f":"#Removing not useful columns\nloan_del_1 = ['delinq_2yrs','earliest_cr_line','inq_last_6mths','open_acc','pub_rec','revol_bal','revol_util','total_acc','out_prncp','out_prncp_inv','total_pymnt','total_pymnt_inv','total_rec_prncp','total_rec_int','total_rec_late_fee','recoveries','collection_recovery_fee','last_pymnt_d','last_pymnt_amnt','last_credit_pull_d','application_type','pymnt_plan','collections_12_mths_ex_med','policy_code','acc_now_delinq','chargeoff_within_12_mths','delinq_amnt','tax_liens']\nloan = loan.drop(loan_del_1, axis = 1)","f7e44c69":"# replaing missing values by '0' for column 'mths_since_last_delinq'.\nloan['mths_since_last_delinq'] = loan['mths_since_last_delinq'].apply(lambda x: 0 if mt.isnan(x) else x)","0ac1ee5c":"#Removing postfixed 'years'.\nloan['emp_length'] = loan['emp_length'].str[:-5]\n#Replacing '10+' with 10.\nloan['emp_length'] = loan['emp_length'].apply(lambda x: '10' if x == '10+ ' else x)\n#Replacing '<1' with 0.\nloan['emp_length'] = loan['emp_length'].apply(lambda x: '0' if x == '< 1' else x)\n#Replacing missing values with -1, which means emp_length is empty.\nloan['emp_length'] = loan['emp_length'].fillna('-1')","14e2558f":"#Removing post fixed 'months' and converting to int data type\nloan['term'] = loan['term'].apply(lambda x: x[:-7])\n#Changing column name 'term' to 'term_months'\nloan = loan.rename({'term' : 'term_months'}, axis = 1)","f75a2cdc":"#Removing post fixed '%' and converting to floatint data type\nloan['int_rate'] = loan['int_rate'].apply(lambda x: float(x[:-1]))\n#Changing column name 'term' to 'term_months'\nloan = loan.rename({'int_rate' : 'int_rate_%'}, axis = 1)","dbc900e7":"#Creating new column 'issue_month'\nloan['issue_month'] = loan['issue_d'].apply(lambda x: x[:3])\n#Creating new column 'issue_year'\nloan['issue_year'] = loan['issue_d'].apply(lambda x: '20'+x[-2:])","cc557df5":"#Removing rows with loan status as Current\nloan = loan[loan['loan_status'] != 'Current']","5396d9d2":"loan.info()","2ce7f089":"#Checking Outliers\nloan.describe(percentiles=[0.25, .5, .75, .95, .99,.995])","552f4492":"# Plotting pie chat for loan_status\nloan['loan_status'].value_counts().plot(kind='pie', autopct='%1.1f%%', figsize=[6,6], fontsize ='12')","5eecebcf":"# Filtering data frame -  ['loan_status'] == 'Charged Off'\nloan_def = loan[loan['loan_status'] == 'Charged Off']\n# Filtering data frame  -  ['loan_status'] == 'Fully Paid'\nloan_fp = loan[loan['loan_status'] == 'Fully Paid']","4ae44f1b":"#plotting distribution plot for loan data frame\nsns.distplot(loan['loan_amnt'])","b585a4b1":"#plotting distribution plot for 'Charged Off' data frame\nsns.distplot(loan_def['loan_amnt'])","9ca75035":"#plotting distribution plot for 'Fully Paid' data frame.\nsns.distplot(loan_fp['loan_amnt'])","6eb42db6":"#plotting distribution plot for loan data frame\nsns.distplot(loan['annual_inc'])","c30caa70":"#plotting distribution plot for 'Charged Off' data frame.\nsns.distplot(loan_def['annual_inc'])","5c5a98ca":"#plotting distribution plot for 'Fully Paid' data frame.\nsns.distplot(loan_fp['annual_inc'])","096e8a1f":"#plotting histogram plot for loan data frame\nloan['term_months'].hist()","042e24ca":"#plotting histogram for 'Charged Off' data frame.\nloan_def['term_months'].hist()","6bdbff42":"#plotting histogram for 'Fully Paid' data frame.\nloan_fp['term_months'].hist()","e040b0a1":"fig, ax = plt.subplots(figsize = (5,5))\nsns.countplot(data=loan[loan['loan_status']=='Charged Off'], x='home_ownership')","0bcd4a58":"fig, ax = plt.subplots(figsize = (7,8))\nsns.countplot(data=loan[loan['loan_status'] == 'Charged Off'], y ='purpose')","1127c135":"#checking the quartile\nloan['annual_inc'].describe()","2b44c4b8":"#creating a new column 'annual_inc_bins'.\nloan['annual_inc_bins'] = pd.qcut(x= loan['annual_inc'], q = [0,.25,.70,.85, .95, 1], labels=['low', 'lower-middle', 'middle', 'upper-middle','high'])","91604f9b":"fig, ax = plt.subplots(figsize = (7,7))\nsns.countplot(data=loan[loan['loan_status'] == 'Charged Off'], x='annual_inc_bins')","bfd721e0":"sns.countplot(data=loan[loan['loan_status']=='Charged Off'], x='verification_status')","65c84f14":"#Using Pivot table on loan data frame\nloan_inc_pivot = pd.pivot_table(loan, index = ['annual_inc_bins', 'loan_status'], aggfunc= {'loan_status':lambda x: x.count()})","07676853":"#display pivot table\nloan_inc_pivot","45be0ef8":"#created a function which gives the percentage value of respective category\ncounter = 0\n\ndef func(row):\n    global counter \n    if counter != (len(loan_inc_pivot['loan_status'])):\n#  Here we are using, odd numbered index to find 'Fully Paid' count and even numbered index to find 'Charged Off' count.\n        if (counter % 2 ) == 0:\n            counter += 1\n            return (row \/(row + loan_inc_pivot['loan_status'][counter]))*100 # \n#            for each of annual_inc_bins - formula (Charged Off count \/ total value of that 'annual_inc_bins')*100\n        else:\n            counter += 1\n            return (row \/ (row + loan_inc_pivot['loan_status'][counter-2]))*100\n#            for each of annual_inc_bins -  formula (Fully paid count \/ total value of that 'annual_inc_bins')*100\n            \n# Creating new column 'ratio', which contains percentage of each respective group.\nloan_inc_pivot['ratio'] = loan_inc_pivot['loan_status'].apply(lambda x: func(x))","0e29c1b4":"#display updated pivot table\nloan_inc_pivot","8a6ed1ac":"#Plotting bar graph for only charged off values.\n# As ratio of all 'Charged Off' are less then 50, filtering ratio less than 50. Which gives values only for 'Charged Off'\nloan_inc_pivot['ratio'][loan_inc_pivot['ratio'] < 50].plot.bar(figsize=[8,5], rot = 75, fontsize ='12')","6b0ad215":"#Using Pivot table on loan data frame\nloan_term_pivot = pd.pivot_table(loan, index = ['term_months', 'loan_status'], aggfunc= {'loan_status':lambda x: x.count()})","3a4bf98a":"#created a function which gives the percentage value of respective category\ncounter = 0\n\ndef func(row):\n    global counter \n    if counter != (len(loan_term_pivot['loan_status'])):\n#  Here we are using, odd numbered index to find 'Fully Paid' count and even numbered index to find 'Charged Off' count.\n        if (counter % 2 ) == 0:\n            counter += 1\n            return (row \/(row + loan_term_pivot['loan_status'][counter]))*100\n#            for each of term_months - formula (Charged Off count \/ total value of that 'term_months')*100\n        else: \n            counter += 1\n            return (row \/ (row + loan_term_pivot['loan_status'][counter-2]))*100\n#            for each of term_months -  formula (Fully paid count \/ total value of that 'term_months')*100\n            \n# Creating new column 'ratio', which contains percentage of each respective group.\nloan_term_pivot['ratio'] = loan_term_pivot['loan_status'].apply(lambda x: func(x))","e4184991":"#display updated pivot table\nloan_term_pivot","23f55066":"#Plotting bar graph for only charged off values.\nloan_term_pivot['ratio'].plot.bar(figsize=[8,6], rot = 10, fontsize ='12')","889c8b95":"#Using Pivot table on loan data frame\nloan_len_pivot = pd.pivot_table(loan, index = ['emp_length', 'loan_status'], aggfunc= {'loan_status':lambda x: x.count()})","66478464":"#created a function which gives the percentage value of respective category\ncounter = 0\n\ndef func(row):\n    global counter \n    if counter != (len(loan_len_pivot['loan_status'])):\n#  Here we are using, odd index to find 'Fully Paid' count and even index to find 'Charged Off' count.        \n        if (counter % 2 ) == 0:\n            counter += 1\n            return (row \/(row + loan_len_pivot['loan_status'][counter]))*100\n#            for each of emp_length - formula (Charged Off count \/ total value of that 'emp_length')*100        \n        else:\n            counter += 1\n            return (row \/ (row + loan_len_pivot['loan_status'][counter - 2]))*100\n#            for each of emp_length -  formula (Fully paid count \/ total value of that 'emp_length')*100        \n            \n# Creating new column 'ratio', which contains percentage of each respective group.           \nloan_len_pivot['ratio'] = loan_len_pivot['loan_status'].apply(lambda x: func(x))","627d97ee":"#display updated pivot table\nloan_len_pivot","e0769f48":"#Plotting bar graph for only charged off values.\n# As ratio of all 'Charged Off' are less then 50, filtering ratio less than 50. Which gives values only for 'Charged Off'\nloan_len_pivot['ratio'][loan_len_pivot['ratio'] < 50].plot.bar(figsize=[8,6], rot = 90, fontsize ='12')","af829824":"#Using Pivot table on loan data frame\nloan_ver_pivot = pd.pivot_table(loan, index = ['verification_status', 'loan_status'], aggfunc= {'loan_status':lambda x: x.count()})","cf76833b":"#created a function which gives the percentage value of respective category\ncounter = 0\n\ndef func(row):\n    global counter \n    if counter != (len(loan_ver_pivot['loan_status'])):\n#  Here we are using, odd index to find 'Fully Paid' count and even index to find 'Charged Off' count.\n        if (counter % 2 ) == 0:\n            counter += 1\n            return (row \/(row + loan_ver_pivot['loan_status'][counter]))*100\n#            for each of annual_inc_bins - formula (Charged Off count \/ total value of that 'verification_status')*100\n        else:\n            counter += 1\n            return (row \/ (row + loan_ver_pivot['loan_status'][counter-2]))*100\n#            for each of annual_inc_bins -  formula (Fully paid count \/ total value of that 'verification_status')*100\n            \n# Creating new column 'ratio', which contains percentage of each respective group.\nloan_ver_pivot['ratio'] = loan_ver_pivot['loan_status'].apply(lambda x: func(x))","48f7b848":"#display updated pivot table\nloan_ver_pivot","83264f3c":"#Plotting bar graph for only charged off values.\n# As ratio of all 'Charged Off' are less then 50, filtering ratio less than 50. Which gives values only for 'Charged Off'\nloan_ver_pivot['ratio'].plot.bar(figsize=[8,6], rot = 80, fontsize ='12')","115ccc60":"#Using Pivot table on loan data frame\nloan_pur_pivot = pd.pivot_table(loan, index = ['purpose', 'loan_status'], aggfunc= {'loan_status':lambda x: x.count()})","1d70969c":"#created a function which gives the percentage value of respective category\ncounter = 0\n\ndef func(row):\n    global counter \n    if counter != (len(loan_pur_pivot['loan_status'])):\n#  Here we are using, odd index to find 'Fully Paid' count and even index to find 'Charged Off' count\n        if (counter % 2 ) == 0:\n            counter += 1\n            return (row \/(row + loan_pur_pivot['loan_status'][counter]))*100\n#            for each of annual_inc_bins - formula (Charged Off count \/ total value of that 'purpose')*100        \n        else:\n            counter += 1\n            return (row \/ (row + loan_pur_pivot['loan_status'][counter-2]))*100\n#            for each of annual_inc_bins -  formula (Fully paid count \/ total value of that 'purpose')*100        \n            \n# Creating new column 'ratio', which contains percentage of each respective group.\nloan_pur_pivot['ratio'] = loan_pur_pivot['loan_status'].apply(lambda x: func(x))","150fc019":"#display updated pivot table\nloan_pur_pivot","c4a8a88f":"#Plotting bar graph for only charged off values.\n# As ratio of all 'Charged Off' are less then 50, filtering ratio less than 50. Which gives values only for 'Charged Off'\nloan_pur_pivot['ratio'][loan_pur_pivot['ratio'] < 50].plot.bar(figsize=[8,6], rot = 90, fontsize ='10')","0df09262":"#checking the quartiles\nloan['loan_amnt'].describe()","13730fe3":"#creating a new column 'loan_amnt_bins'.\nloan['loan_amnt_bins'] = pd.cut(x= loan['loan_amnt'], bins = [500, 7400, 14300, 21200, 28100, 35000],  labels=['500', '7400', '14300', '21200', '28100'] )","960ca7b5":"#Using Pivot table on loan data frame\nloan_amt_pivot = pd.pivot_table(loan, index = ['loan_amnt_bins', 'loan_status'], aggfunc= {'loan_status':lambda x: x.count()})","22d6fad6":"#created a function which gives the percentage value of respective category\ncounter = 0\n\ndef func(row):\n    global counter \n    if counter != (len(loan_amt_pivot['loan_status'])):\n#  Here we are using, odd index to find 'Fully Paid' count and even index to find 'Charged Off' count.\n        if (counter % 2 ) == 0:\n            counter += 1\n            return (row \/(row + loan_amt_pivot['loan_status'][counter]))*100\n#            for each of annual_inc_bins - formula (Charged Off count \/ total value of that 'loan_amnt_bins')*100\n        else:\n            counter += 1\n            return (row \/ (row + loan_amt_pivot['loan_status'][counter-2]))*100\n#            for each of annual_inc_bins -  formula (Fully paid count \/ total value of that 'loan_amnt_bins')*100\n            \n# Creating new column 'ratio', which contains percentage of each respective group.\nloan_amt_pivot['ratio'] = loan_amt_pivot['loan_status'].apply(lambda x: func(x))","3585d63c":"#display updated pivot table\nloan_amt_pivot","5d75ee8d":"#Plotting bar graph for only charged off values.\n# As ratio of all 'Charged Off' are less then 50, filtering ratio less than 50. Which gives values only for 'Charged Off'\nloan_amt_pivot['ratio'][loan_amt_pivot['ratio'] < 50].plot.bar(figsize=[8,6], rot = 75, fontsize ='12')","5b5a3766":"#Checking number of 'NONE' values.\nloan['home_ownership'][loan['home_ownership'] == 'NONE'].count()","480bf25a":"#Here, we are imputing rows with 'NONE' values as 'OTHER'.\nloan['home_ownership'] = loan['home_ownership'].apply(lambda x: 'OTHER' if x == 'NONE' else x)","bb5ff8f1":"#Using Pivot table on loan data frame\nloan_home_pivot = pd.pivot_table(loan, index = ['home_ownership', 'loan_status'], aggfunc= {'loan_status':lambda x: x.count()})","2bbd9dab":"#created a function which gives the percentage value of respective category\ncounter = 0\n\ndef func(row):\n    global counter \n    if counter != (len(loan_home_pivot['loan_status'])):\n#  Here we are using, odd index to find 'Fully Paid' count and even index to find 'Charged Off' count.\n        if (counter % 2 ) == 0:\n            counter += 1\n            return (row \/(row + loan_home_pivot['loan_status'][counter]))*100\n#            for each of annual_inc_bins - formula (Charged Off count \/ total value of that 'home_ownership')*100\n        else:\n            counter += 1\n            return (row \/ (row + loan_home_pivot['loan_status'][counter-2]))*100\n#            for each of annual_inc_bins -  formula (Fully paid count \/ total value of that 'home_ownership')*100\n\n# Creating new column 'ratio', which contains percentage of each respective group.\nloan_home_pivot['ratio'] = loan_home_pivot['loan_status'].apply(lambda x: func(x))","dcef75b0":"#display updated pivot table\nloan_home_pivot","f2893723":"#Plotting bar graph for only charged off values.\n# As ratio of all 'Charged Off' are less then 50, filtering ratio less than 50. Which gives values only for 'Charged Off'\nloan_home_pivot['ratio'][loan_home_pivot['ratio'] < 50].plot.bar(figsize=[8,6], rot = 75, fontsize ='12')","e52e18cf":"#Using Pivot table on loan data frame\nloan_month_pivot = pd.pivot_table(loan, index = ['issue_month', 'loan_status'], aggfunc= {'loan_status':lambda x: x.count()})","f75edc0b":"#created a function which gives the percentage value of respective category\ncounter = 0\n\ndef func(row):\n    global counter \n    if counter != (len(loan_month_pivot['loan_status'])):\n#  Here we are using, odd index to find 'Fully Paid' count and even index to find 'Charged Off' count.\n        if (counter % 2 ) == 0:\n            counter += 1\n            return (row \/(row + loan_month_pivot['loan_status'][counter]))*100\n#            for each of annual_inc_bins - formula (Charged Off count \/ total value of that 'issue_month')*100\n        else:\n            counter += 1\n            return (row \/ (row + loan_month_pivot['loan_status'][counter-2]))*100\n#            for each of annual_inc_bins -  formula (Fully paid count \/ total value of that 'issue_month')*100\n            \n# Creating new column 'ratio', which contains percentage of each respective group.\nloan_month_pivot['ratio'] = loan_month_pivot['loan_status'].apply(lambda x: func(x))","1b469883":"#display updated pivot table\nloan_month_pivot","67fda4a5":"#Plotting bar graph for only charged off values.\n# As ratio of all 'Charged Off' are less then 50, filtering ratio less than 50. Which gives values only for 'Charged Off'\nloan_month_pivot['ratio'][loan_month_pivot['ratio'] < 50].plot.bar(figsize=[8,6], rot = 75, fontsize ='12')","79eb0796":"#checking the quartiles\nloan['dti'].describe()","7554352d":"#creating a new column 'annual_inc_bins'.\nloan['dti_bins'] = pd.cut(x= loan['dti'], bins = [0, 6, 12, 18, 30],  labels=['0', '6', '12', '18'] )","c0de2fa2":"#Using Pivot table on loan data frame\nloan_dti_pivot = pd.pivot_table(loan, index = ['dti_bins', 'loan_status'], aggfunc= {'loan_status':lambda x: x.count()})","e737460b":"#created a function which gives the percentage value of respective category\ncounter = 0\n\ndef func(row):\n    global counter \n    if counter != (len(loan_dti_pivot['loan_status'])):\n#  Here we are using, odd index to find 'Fully Paid' count and even index to find 'Charged Off' count.\n        if (counter % 2 ) == 0:\n            counter += 1\n            return (row \/(row + loan_dti_pivot['loan_status'][counter]))*100\n#            for each of annual_inc_bins - formula (Charged Off count \/ total value of that 'dti_bins')*100\n        else:\n            counter += 1\n            return (row \/ (row + loan_dti_pivot['loan_status'][counter-2]))*100\n#            for each of annual_inc_bins -  formula (Fully paid count \/ total value of that 'dti_bins')*100\n            \n\nloan_dti_pivot['ratio'] = loan_dti_pivot['loan_status'].apply(lambda x: func(x))","37ac9797":"#display updated pivot table\nloan_dti_pivot","da869215":"#Plotting bar graph for only charged off values.\n# As ratio of all 'Charged Off' are less then 50, filtering ratio less than 50. Which gives values only for 'Charged Off'\nloan_dti_pivot['ratio'][loan_dti_pivot['ratio'] < 50 ].plot.bar(figsize=[8,6], rot = 75, fontsize ='12')","95cc61e0":"# Loan vs Loan purpose\nplt.figure(figsize=(7,9))\nsns.barplot(data =loan ,x='loan_amnt', y='purpose', hue ='loan_status')\nplt.show()","3d89bd68":"# Loan vs House Ownership\nplt.figure(figsize=(7,9))\nsns.barplot(data =loan, x='loan_amnt', y='home_ownership', hue ='loan_status')\nplt.show()","0a4e1c2f":"# Annual Income bins vs Loan amount\nplt.figure(figsize=(11,9))\nsns.barplot(data = loan, x = \"annual_inc_bins\", y = \"loan_amnt\", hue = 'loan_status')\nplt.show()","8c08475f":"sns.catplot(data = loan, x = 'term_months', y = 'loan_amnt', hue = 'loan_status', kind = 'bar')","f1b05bfd":"###### Observation:\n\nThere is high defaulter percentage for people asking loan for small business purpose. ","49580322":"###### Observation:\n\nWe can observe that people with high income apply loan for more amount. Incase high income person defaults the loan then there will be more financial loss to the company.\n","643b880b":"### Column: Home Ownership (home_ownership)","e9b79ad3":"Checking number of Charged off borrowers based on Purpose of loan","249bac96":"Grouping the by ['issue_month', 'loan_status'] and using count as the aggrigation function (on loan staus).","6b4ea368":"### Column Purpose\n\n","ea0215c0":"Grouping the by ['purpose', 'loan_status'] and using count as the aggrigation function (on loan staus).\n","563bde22":"### Univariate Analysis","acd9051f":"Fixing the values for 'emp_length' column.\n1. Removing the post fixed year, as it will affect during our analysis.\n2. Assumption: Changing '<1 years' to 0 (zero), which means less than one year.\n3. Assumption: Changing '10+ years' to 10, which means 10 year or more than ten year.\n4. Assumption: Replacing missing values with -1, which means emp_length is empty.","6bd7285e":"#### Column: Annual income (annual_inc)","6a816907":"### Column: Source Verification","d0e8c936":"### Column: Home Ownership","713a697c":"    Found that the file is encoded in 'utf-8' with 0.99 confidence","cd347e3d":"Grouping the by ['emp_length', 'loan_status'] and using count as the aggrigation function (on loan staus).","8a061923":"We have not observed any major outlies most of the fields, but noticed that the 'annual_inc' has outliers.\n\nWe decided not to delete these rows, instead handle these using median as aggfunc if necessary.","b85a5af1":"### Column: Verification Status (verification_status)","0e01afd3":"Below we are adding new column ('ratio') to the pivot table data frame.\n\nIn the ratio column, we are calculating percentage of 'loan_status' for each of the category in 'dti_bins'.","28f4bf81":"##### Obervations: \n\nThere are huge number of borrowers taking loans for Debt Consolidation purpose and are unable to repay the loan within time.|\n","5714d23c":"##### Observations: \n\nThere are more People with Lower-middle income who have defaulted the loans.","13eb69cd":"###### Observation:\n\nFinancial loss for company:  People under Mortgage and other category lies between 13,900$$ to 14,200$.","ea1e85ef":"###### Observation:\n\nAs the loan amount increases chances of being charged off increased, hence this is positively correlated.","f85e99f7":"#### Outliers Detection\n\n\nWe have used the describe method to segregate the data based on percentile and checked the each field one by one.\n","a67ba889":"Below we are adding new column ('ratio') to the pivot table data frame.\n\nIn the ratio column, we are calculating percentage of 'loan_status' for each of the category in 'annual_inc_bins'.","4558aba1":"###### Observation:\n\n11% People applying for 36 months term (term_months) are being charged off.\n\n25% People applying for 60 months term (term_months) are being charged off.","81b3d5d3":"Fixing the values for 'term' column.\n\nAssumption: Removing post fixed 'months' and assuming this column is always in months.\n\nChanging column name for 'term' to 'term_months' for better understanding.","5606bcec":"###### Observation:\n\nPeople applying loan for Small Business purpose are contributing more in financial loss for the company.","92637eb3":"Deleting specific column with missing values more than '31,774'","8eb90f0a":"#### Column : Term (term_months)","c93cd3ad":"# Analysis","8e1c215f":"Again looking into the data set I found that below field which are not useful and even columns are redundant, hence deleting these fields.\n\n    1.    pymnt_plan\n    2.\tcollections_12_mths_ex_med\n    3.\tpolicy_code\n    4.\tacc_now_delinq\n    5.\tchargeoff_within_12_mths\n    6.\tdelinq_amnt\n    7.\ttax_liens\n\n\nThese customer behaviour variables are not available at the time of loan application and thus they cannot be used as predictors for approving loan for new customers. So, removing below colums also.\n\n    1.\tdelinq_2yrs\n    2.\tearliest_cr_line\n    3.\tinq_last_6mths\n    4.\topen_acc\n    5.\tpub_rec\n    6.\trevol_bal\n    7.\trevol_util\n    8.\ttotal_acc\n    9.\tout_prncp\n    10.\tout_prncp_inv\n    11.\ttotal_pymnt\n    12.\ttotal_pymnt_inv\n    13.\ttotal_rec_prncp\n    14.\ttotal_rec_int\n    15.\ttotal_rec_late_fee\n    16.\trecoveries\n    17.\tcollection_recovery_fee\n    18.\tlast_pymnt_d\n    19.\tlast_pymnt_amnt\n    20.\tlast_credit_pull_d\n    21.\tapplication_type","4708eee0":"Total records: 39,717 \n\nTotal Columns: 111","c8f12a2c":"Grouping the by ['term_months', 'loan_status'] and using count as the aggrigation function (on loan staus).","c7985f6d":"Below we are adding new column ('ratio') to the pivot table data frame.\n\nIn the ratio column, we are calculating percentage of 'loan_status' for each of the category in 'home_ownership'.","c23e8ed9":"Plotting the count of charged off borrowers for Home Ownership ","265b1427":"### Comparing # Annual Income bins vs Loan amount","ed6a2a39":"##### Observations:\n\nThere is more count of not verified source are being defaulted.\n\n","077d377c":"Here, we will analyse same columns with all three data frame (loan, loan_def and loan_fp) and compare distributions for each of the data frame.\n\n###### Segmented Univariate Analusis\nWe will compare 'Charged Off' data frame plot with original data frame plot and compare 'Fully Paid' plot with original data frame","7c44d6c0":"###### Observation:\n\nPeople with low income are having high chances being defaulters.\n\nPeople with high income are having low chances of being charged off.","27235c81":"Below we are adding new column ('ratio') to the pivot table data frame.\n\nIn the ratio column, we are calculating percentage of 'loan_status' for each of the category in 'loan_amnt_bins'.","f2700188":"### Comparing Loan amount vs Term","b0538d2e":"We found 3 values as 'None' hence we imputing them as 'Other'.","b066ee5d":"### Column: Employee Length (emp_length)","0ad0e56c":"Binning the loan amount into ['500', '7400', '14300', '21200', '28100'].\n\n500 = 500 to 7400\n\n7400 = 7400 to 14300\n\n14300 = 14300 to 21200\n\n21200 = 21200 to 28100\n\n28100 = 28100 to 35000\n\nHence using 'cut' for the same.","c5bb4ef1":"###### Observation:\n\nThere are more percentage of defaulters who are not mentioning the employment length in the application.","541c6a49":"Analysing annual income in which bucket does more defaulters fall.","63c78779":"For univariate analysis, we are segmenting 'loan' data in to 2 data frame based on 'loan_status'.\n\n1.\tloan - Original Data frame.\n2.\tloan_def \u2013 Data frame with only charged off rows.\n3.\tloan_fp \u2013 Data frame with only fully paid rows.\n","15bebc22":"### Column: Loan Amount  (loan_amnt )","5de51b21":"Below we are adding new column ('ratio') to the pivot table data frame.\n\nIn the ratio column, we are calculating percentage of 'loan_status' for each of the category in 'verification_status'.","c21ecd8b":"#### Column: Annual Income (annual_inc)","7d18ecee":"We have found that the below are the Driver variables, our analysis revolves around these columns only.\n\n1.\tloan_amnt\n2.\tterm_months\n3.\temp_length\n4.\thome_ownership\n5.\tannual_inc\n6.\tverification_status\n7.\tloan_status      -> Target Variable\n8.\tpurpose\n9.\tdti\n10.\tissue_month\n11.\tint_rate_%\n12.\tinstallment","cbef57c9":"Grouping the by ['loan_amnt_bins', 'loan_status'] and using count as the aggrigation function (on loan staus).","51ad7e97":"There are 3 loan status 'Fully Paid', 'Current' and 'Charged Off'.\nAs loan status 'Current' is active loan, so excluding rows with this status.","3cee1d8a":"Splitting 'issue_d' to 'issue_month' and 'issue_year'.\n\nThese columns might help me in future analysis. ","88e5f395":"##### Recomendations:","42a04f07":"We have observed that the density distribution of all the 3 plots are similar.\n\nBased on the above plots, the borrowers take most of the loans between loan amount 3000$$ to 13000$ (these are approximate values from plots).\n\nWe can say that where there is more number(based on loan amount) of loan density, number of defaults and number of fully paid will be more.","7bfb8f6c":"### Column: Annual Income","c9d6a316":"Binning the loan amount into ['low', 'lower-middle', 'middle', 'upper-middle','high'], based on percentile [0,.25,.70,.85, .95, 1].\n\nHence using 'qcut' for the same.","bd5a34d6":"### Column: Loan Term (term_months)","699004d8":"###### Observations:\n\nMore number of borrowers with rented house and whose house is under Mortgage (home_ownership) are $Defaulters$. \n","a411eacb":"Below we are adding new column ('ratio') to the pivot table data frame.\n\nIn the ratio column, we are calculating percentage of 'loan_status' for each of the category in 'emp_length'.","fdd6685e":"###    Importing libraries and reading csv files","1f1096b8":"Below we are adding new column ('ratio') to the pivot table data frame.\n\nIn the ratio column, we are calculating percentage of 'loan_status' for each of the category in 'issue_month'.","b0c6a73b":"### Column: Purpose (purpose)","15e5dd8a":"1.\tBorrowers take most of the loans between loan amount of 3000$ to 13000$, as we have observed more business in this range we recommend to be cautious while approving loan applicants falling in below categories.\n\n\n    Loan purpose ->\tDebt consolidation \n\n    Home ownership ->\tRent and Mortgage\n\n    Annual income ->\tLow and Lower Middle\n\n2.\tFrom our analysis more people with Mortgage are defaulters, we suggest to check DTI for such applicants and only provide loan, if DTI is less.  Thus, making less chances of defaulting. \n\n3.\tPeople with high income apply for high amount of loan and there will be more chances of credit loss to the company.  We suggest to approve loan only to the \u2018verified income source\u2019 applicants only.\n\n4.\tApplicants with high Debt to income (DTI) are more likely to default, not recommended to approve high amount of loan to such borrowers. \n\n5.\tWe recommend to source verify and ask surety for applicants applying loan for below purpose.\n\n    o\tSmall Business\n    \n    o\tDebt Consolidation\n    \n    o\tHouse\n    \n    o\tHouse Improvement\n    \n\n6.\tWe suggest to check the bank balance of every applicants before approving any loan.\n","a8daed24":"Below we are adding new column ('ratio') to the pivot table data frame.\n\nIn the ratio column, we are calculating percentage of 'loan_status' for each of the category in 'term_months'.","df2e4b9f":"Grouping the by ['annual_inc_bins', 'loan_status'] and using count as the aggrigation function (on loan staus).","c009b2c7":"Fixing the values for 'int_rate' column, converting data type to 'float'.\n\nAssumption: Removing post fixed '%', as interest rate will always in in percentage\n\nChanging column name for 'int_rate' to 'int_rate_%' for better understanding.","77ce61ba":"###### Observation:\n\nPeople who are applying loans in December are more likely to get charged off.","71b1adf6":"#### Column: Loan amount (loan_amnt)","312e7c06":"Grouping the by ['verification_status', 'loan_status'] and using count as the aggrigation function (on loan staus).","35bc4396":"### Column: Debt to Income (dti)","ab92c18d":"Analysing Source verification categories","df14a2f3":"#### Checking the encoding for the loan.csv file\n\nNote: Below code will take some time to execute (around 30 to 40 seconds), as we are executing for all the rows.","7bd04298":"#### Handeling Missing values and Standardizing values\n\nBelow columns having missing values, so I will check these columns one by one:\n\n               Column Names\t\t    Analysis\n    1.\ttitle\t\t\t         : Not imputing. 11 values missing, g as I cannot find much useful column.\n    2.\temp_length\t\t        : Not imputing, around 700 missing, as missing values cannot be predicted.\n    3.\temp_title\t\t         : Not imputing, this column cannot be predicted. \n    4.\tdesc\t\t\t          : Not imputing. As this columns contain test description. Cannot replace missing values.\n    5.\tpub_rec_bankruptcies      : Not imputing. Cannot be predicted.\n    6.\tmths_since_last_delinq\t: Observed most of the values are missing, so I consider values as 0 months since last declined. Hence replacing missing values with 0.","ae27b7af":"Based on above graph, we can say that annual income density for 'Charged off' and 'Fully paid' are similarly distributed.","1e4b73e6":"From the above chart, we can observe that there are only 15% of data is 'Charged Off' and remaining 85% is 'Fully Paid'.\n\nThis information will be useful in future analysis.","ec2e2e90":"Most of the borrowers will prefer 36 months term compared to 60 months, we will further analyse this column at later point for more insights.","3adccf23":"Target Variable  = \u2018loan_status\u2019\n\nBelow are the fields I find useful at this point of time (Looking at a glance).\n\nI will again check the Data set again thoroughly after Data cleaning.\n\n1.\tannual_inc :The self-reported annual income provided by the borrower during registration.\n2.\tapplication_type :Indicates whether the loan is an individual application or a joint application with two co-borrowers\n3.\tdelinq_2yrs\t:The number of 30+ days past-due incidences of delinquency in the borrower's credit file for the past 2 years\n4.\tdesc\t:Loan description provided by the borrower\n5.\tdti\t:A ratio calculated using the borrower\u2019s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower\u2019s self-reported monthly income.\n6.\temp_length\t:Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years. \n7.\temp_title\t:The job title supplied by the Borrower when applying for the loan.*\n8.\tfunded_amnt\t:The total amount committed to that loan at that point in time.\n9.\tfunded_amnt_inv\t:The total amount committed by investors for that loan at that point in time.\n10.\tgrade\t:LC assigned loan grade\n11.\thome_ownership\t:The home ownership status provided by the borrower during registration. Our values are: RENT, OWN, MORTGAGE, OTHER.\n12.\tid\t:A unique LC assigned ID for the loan listing.\n13.\tinq_last_6mths\t:The number of inquiries in past 6 months (excluding auto and mortgage inquiries)\n14.\tinstallment\t:The monthly payment owed by the borrower if the loan originates.\n15.\tint_rate\t:Interest Rate on the loan\n16.\tlast_pymnt_amnt\t:\tLast total payment amount received\n17.\tlast_pymnt_d\t:\tLast month payment was received\n18.\tloan_amnt\t:\tThe listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.\n19.\tloan_status\t:\tCurrent status of the loan\n20.\tmths_since_last_delinq\t:\tThe number of months since the borrower's last delinquency.\n21.\tmths_since_last_record\t:\tThe number of months since the last public record.\n22.\tout_prncp\t:\tRemaining outstanding principal for total amount funded\n23.\tout_prncp_inv\t:\tRemaining outstanding principal for portion of total amount funded by investors\n24.\tpurpose\t:\tA category provided by the borrower for the loan request. \n25.\trecoveries\t:\tpost charge off gross recovery\n26.\trevol_bal\t:\tTotal credit revolving balance\n27.\trevol_util\t:\tRevolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.\n28.\tterm\t:\tThe number of payments on the loan. Values are in months and can be either 36 or 60.\n29.\ttitle\t:\tThe loan title provided by the borrower\n30.\ttotal_acc\t:\tThe total number of credit lines currently in the borrower's credit file\n31.\ttotal_pymnt\t:\tPayments received to date for total amount funded\n32.\ttotal_pymnt_inv\t:\tPayments received to date for portion of total amount funded by investors\n33.\ttotal_rec_int\t:\tInterest received to date\n34.\ttotal_rec_late_fee\t:\tLate fees received to date\n35.\ttotal_rec_prncp\t:\tPrincipal received to date\n36.\tverification_status\t:\tIndicates if income was verified by LC, not verified, or if the income source was verified\n","def0ee55":"Binning the loan amount into [0, 6, 12, 18, 30, with below labels.\n\n0 = 0 to 6\n\n6 = 6 to12\n\n12 = 12 to 18\n\n18 = 18 to 30\n\nUsing 'cut' for the same.","4ed65252":"Below we are adding new column ('ratio') to the pivot table data frame.\n\nIn the ratio column, we are calculating percentage of 'loan_status' for each of the category in 'purpose'.","cfd44e05":"#### Reading loan csv file in a dataframe","fc315b65":"Here, we are trying to understand the count ratio of loan status categories. ","f63feb9e":"## Bivariate analysis and Multivariate analysis\n\nGrouping column 'loan_status' with different columns for insights. ","064e9686":"Creating a new binned column 'loan_amnt_bins' in loan data frame.","4b3d63fa":"### Comparing  Loan vs House Ownership","d3804a4b":"###### Observation:\n\nPeople with term months is 60 are lying 14,000$$ to 16,000$ (financial loss) are defaultes.","dd968517":"Grouping the by ['dti_bins', 'loan_status'] and using count as the aggrigation function (on loan staus).","6ea9b617":"Creating a new binned column 'dti_bins' in loan data frame.","3b8f2de7":"Creating a new binned column 'annual_inc_bins' in loan data frame.","bf946d31":"### Comparing 'Loan Amount' vs 'Loan purpose'","a3a44eb5":"Grouping the by ['home_ownership', 'loan_status'] and using count as the aggrigation function (on loan staus).","7e4c2eb5":"### Data Cleaning\n\nobserved many fields with missing values, 'NaN', 'n\/a',etc. values.\n\nSo deleting columns with more than 80% of missing values, as the column becomes irrelevant for analysis.\n\nTotal records: 39,717","56700e67":"#### Analysing the columns","2bfa802f":"# Lending Club - EDA Analysis","731d3ab3":"### Column: Issue Month (issue_month)","f6084a6d":"###### Observation:\n\nAs the DTI of a person increases, they are more likely to get charged off."}}