{"cell_type":{"2515ded1":"code","f1a22631":"code","a98c9ffb":"code","d6d372b1":"code","83d73957":"code","031910ad":"code","66e3f258":"code","4df499d9":"code","880f0ae6":"code","8d54c5de":"code","0665eacd":"code","5d69167c":"code","21750268":"code","2c46e6b6":"code","3c088402":"code","a70dc314":"code","b414160a":"code","a14627ac":"code","9377160a":"code","1a65d309":"markdown","b94f6c8f":"markdown","797a1184":"markdown","4398ee74":"markdown","f129a3ab":"markdown","758a081d":"markdown","7585580d":"markdown","460271a0":"markdown","be582d5c":"markdown","ebd9c405":"markdown","c57a4451":"markdown"},"source":{"2515ded1":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/bike-share-daily\/daily-bike-share_1.csv\")","f1a22631":"# Feature Engineering to create a new column to derive day from the dteday\n\ndf['Day'] = pd.DatetimeIndex(df['dteday']).day","a98c9ffb":"df.describe()","d6d372b1":"import matplotlib.pyplot as plt\n%matplotlib inline","83d73957":"numerical_features = ['temp', 'atemp', 'hum', 'windspeed','rentals']","031910ad":"def show_distribution(var_data):\n    fig,ax = plt.subplots(1,2,figsize=(8, 8))\n    \n    ax[0].hist(var_data, bins=100)\n    ax[0].set_xlabel('Frequency')\n\n    mean_val = var_data.mean()\n    median_val = var_data.median()\n    min_val = var_data.min()\n    max_val =  var_data.max()\n    mode_val = var_data.mode()[0]\n\n    ax[0].axvline(mean_val, color = 'magenta' , linestyle='dashed', linewidth = 2)\n    ax[0].axvline(median_val, color = 'black' , linestyle='dashed', linewidth = 2)\n\n    ax[1].boxplot(var_data, vert=False)\n    ax[1].set_xlabel('value')\n\n    fig.suptitle(var_data.name)\n\n    fig.show()","66e3f258":"for col in numerical_features:\n    show_distribution(df[col])","4df499d9":"categorical_features = ['season','mnth','holiday','weekday','workingday','weathersit', 'Day']","880f0ae6":"# For categorical variables, we will plot the bar graph \nfor col in categorical_features:\n    fig = plt.figure(figsize=(9, 6))\n    ax = fig.gca()\n    cat_count = df[col].value_counts().sort_index()\n    cat_count.plot.bar(x=col,y='Rentals')\n    ax.set_title(col + 'counts')\n    ax.set_xlabel(col)\n    ax.set_ylabel('Rentals')    \n    plt.show()\n    ","8d54c5de":"for col in numerical_features:\n    correlation_value = df[col].corr(df['rentals'])\n    fig = plt.figure(figsize=(9, 6))\n    plt.scatter(x=df[col],y=df['rentals'], color='steelblue')\n    plt.title(\"correlation_value: \" + str(correlation_value))\n    plt.xlabel(col) \n    plt.ylabel(\"Rentals\")\n    plt.show()\n    \n    ","0665eacd":"for col in categorical_features:\n    df.boxplot('rentals', by=col, vert=True)\n    plt.show()","5d69167c":"# For splitting the data using train_test_split and since it is a numerical estimation problem using linearregression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","21750268":"features = ['instant', 'season', 'yr', 'mnth', 'holiday', 'weekday',\n       'workingday', 'weathersit', 'temp', 'atemp', 'hum', 'windspeed',\n       'Day']\nlabel = df['rentals']\n\nX_train, X_test, y_train, y_test = train_test_split(df[features], label,test_size=0.3, random_state=1)","2c46e6b6":"linearReg = LinearRegression()\nlinearReg.fit(X_train,y_train)","3c088402":"prediction = linearReg.predict(X_test)","a70dc314":"plt.scatter(,y_train[:10])\nplt.title(\"Actual vs Predicted\")\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")\nplt.show()","b414160a":"import numpy as np\nplt.scatter(y_test,prediction)\nplt.title(\"Actual vs Predicted\")\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")\nz = np.polyfit(y_test, prediction,1)\np = np.poly1d(z)\nplt.plot(y_test, p(y_test), color='black')\nplt.show()","a14627ac":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test,prediction)\nprint(\"mse: \",mse)\nrmse = np.sqrt(mse)\nprint(\"rmse\", rmse)\nr2square = r2_score(y_test, prediction)\nprint(\"R2 Square: \", r2square)\n","9377160a":"training = linearReg.score(X_train, y_train)\ntesting = linearReg.score(X_test, y_test)\nprint(\"Training vs Testing Accuracy: \", training , testing)","1a65d309":"# Splitting the data into training and testing dataset and training the model","b94f6c8f":"# Check categorical variables frequency ","797a1184":"We might get a clearer idea of the distribution of rentals values by visualizing the data. Common plot types for visualizing numeric data distributions are histograms and box plots, so let's use Python's matplotlib library to create one of each of these for the rentals column.","4398ee74":"# Lets try to find correlation between numerical variables with label using scatter charts","f129a3ab":"# Comparing categorical features with rentals","758a081d":"# Comparing training and testing accuracy","7585580d":"Descriptive statistics:","460271a0":"# PRedicting the model","be582d5c":"The data consists of the following columns:\n\ninstant: A unique row identifier\ndteday: The date on which the data was observed - in this case, the data was collected daily; so there's one row per date.\nseason: A numerically encoded value indicating the season (1:spring, 2:summer, 3:fall, 4:winter)\nyr: The year of the study in which the observation was made (the study took place over two years - year 0 represents 2011, and year 1 represents 2012)\nmnth: The calendar month in which the observation was made (1:January ... 12:December)\nholiday: A binary value indicating whether or not the observation was made on a public holiday)\nweekday: The day of the week on which the observation was made (0:Sunday ... 6:Saturday)\nworkingday: A binary value indicating whether or not the day is a working day (not a weekend or holiday)\nweathersit: A categorical value indicating the weather situation (1:clear, 2:mist\/cloud, 3:light rain\/snow, 4:heavy rain\/hail\/snow\/fog)\ntemp: The temperature in celsius (normalized)\natemp: The apparent (\"feels-like\") temperature in celsius (normalized)\nhum: The humidity level (normalized)\nwindspeed: The windspeed (normalized)\nrentals: The number of bicycle rentals recorded.","ebd9c405":"# Plotting our regression line\n","c57a4451":"# Evaluating our model"}}