{"cell_type":{"29e26a01":"code","e07e4e91":"code","702a6172":"code","21d41992":"code","fa7113b7":"code","5578a79e":"code","bdf31ab0":"code","85d44e54":"code","4dbad520":"code","b79cee22":"code","d8557c46":"code","07b92474":"code","b2b319e4":"code","588f27f7":"code","887f946f":"code","b173f543":"code","f1310ef4":"code","5c0bffdd":"code","7e9dfbd0":"markdown","dfc35890":"markdown"},"source":{"29e26a01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e07e4e91":"# Explore top production methods\nbase_path = \"\/kaggle\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/\"\nmethods = pd.read_csv(f\"{base_path}TopProductionMethods.csv\")\ndistributors = pd.read_csv(f\"{base_path}TopDistributors.csv\")\ngenres = pd.read_csv(f\"{base_path}TopGenres.csv\")\ntypes = pd.read_csv(f\"{base_path}PopularCreativeTypes.csv\")\nratings = pd.read_csv(f\"{base_path}TopGrossingRatings.csv\")\nsources = pd.read_csv(f\"{base_path}TopGrossingSources.csv\")\ngrossers = pd.read_csv(f\"{base_path}HighestGrossers.csv\")\nsales = pd.read_csv(f\"{base_path}AnnualTicketSales.csv\")\ncount = pd.read_csv(f\"{base_path}WideReleasesCount.csv\")","702a6172":"# Explore methods\nprint(methods)\nprint(methods.info())","21d41992":"# Functions for data cleaning\n# Function for converting str to numbers\ndef clean_numeric_col(x):\n    if isinstance(x, str):\n        if x.startswith(\"$\"):\n            x = x.lstrip(\"$\").replace(\",\", \"\")\n            x = float(x)\n        elif x.endswith(\"%\"):\n            x = x.rstrip(\"%\")\n            x = round(float(x), 2) \/ 100\n        elif \",\" in x and x.replace(\",\", \"\").isnumeric():\n            x = int(x.replace(\",\", \"\"))\n    return x\n\n\n# Function to rename columns\nclean_col_names = lambda x: x.strip().lower().replace(\" \", \"_\")","fa7113b7":"# Data cleaning for methods\nmethods.columns = methods.columns.map(clean_col_names)\nmethods = methods.applymap(clean_numeric_col)\nprint(methods.info())","5578a79e":"# Sanity check for total gross and market share\nprint((methods.total_gross \/ methods.total_gross.sum() - methods.market_share).round(2))  # A column of zeros\n\nprint(methods.market_share.sum().round(2))  # 1.0","bdf31ab0":"# Plot total gross\nmethods[[\"production_methods\", \"total_gross\"]].set_index(\n    \"production_methods\"\n).sort_values(by=\"total_gross\").plot(\n    kind=\"barh\", title=\"Total Gross Amount by Production Method\", figsize=(14, 14)\n)","85d44e54":"# Explore distributors\nprint(distributors)\nprint(distributors.info())","4dbad520":"# Data cleaning for distributors\ndistributors = distributors.applymap(clean_numeric_col)\nprint(distributors)","b79cee22":"# Clean distributors\ndistributors.columns = distributors.columns.map(clean_col_names)\ndistributors = distributors.applymap(clean_numeric_col)\nprint(distributors)\nprint(distributors.info())","d8557c46":"import matplotlib.pyplot as plt\nimport seaborn as sns\n# Plot distributors against total_gross\nsns.barplot(x=\"total_gross\", y=\"distributors\", data=distributors)","07b92474":"# Pie chart of total gross (market share)\nfig = plt.figure(figsize=(8, 8))\nfig.patch.set_facecolor(\"white\")\nax1 = fig.add_subplot(1, 1, 1)  # nrows, ncols, index\nax1.set_title(\"Market Share by distributors\", fontsize=20)\nax1.pie(data=distributors, x=\"total_gross\", labels=\"distributors\", autopct=\"%.0f%%\")\nplt.show()","b2b319e4":"# Explore sales\nprint(sales.head(1))\nprint(sales.info())\nprint(sales.columns)","588f27f7":"# Clean sales\nsales.columns = sales.columns.map(clean_col_names)\nsales = sales.applymap(clean_numeric_col)\nsales.drop([\"unnamed:_5\"], axis=1, inplace=True)\nprint(sales.head())\nprint(sales.info())\n","887f946f":"# Plot sales: year against other variables\nsales.set_index(\"year\").plot(subplots=True, figsize=(12, 12), title = \"Sales by Year\")","b173f543":"# Explore count\nprint(count.info())\n\nprint(count.head())","f1310ef4":"# Clean count\ncount.drop([\"Unnamed: 9\"], axis=1, inplace=True)\nprint(count)","5c0bffdd":"# Plot count by studios\ncount = count.set_index(\"YEAR\")\nmajor_col = [\n    \"WARNER BROS\",\n    \"WALT DISNEY\",\n    \"20TH CENTURY FOX\",\n    \"PARAMOUNT PICTURES\",\n    \"SONY PICTURES\",\n    \"UNIVERSAL\",\n    \"TOTAL OTHER STUDIOS\",\n]\n\nsubset = count.loc[:, major_col]\nsubset.plot(subplots=True, figsize=(12, 14))","7e9dfbd0":"# Read Data","dfc35890":"# Data cleaning"}}