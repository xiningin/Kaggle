{"cell_type":{"b9dcc108":"code","0de9ec4d":"code","c82fc5cc":"code","6ffd13be":"code","f31685d4":"code","2cd0558b":"code","ff4cc736":"code","1ddcaa8b":"code","1e71773d":"code","42c676be":"code","5acafda7":"code","2160a3e9":"code","511fc315":"code","4d680f1d":"code","be53d78c":"code","10b8a6e5":"code","04d98d56":"code","f58274f2":"code","2a056a37":"markdown","05457275":"markdown","e3e85753":"markdown","bd4a54fc":"markdown","5a30c14b":"markdown","1f21db59":"markdown","f7ed121c":"markdown","df469187":"markdown","daf8b62e":"markdown"},"source":{"b9dcc108":"import pandas as pd \nimport numpy as np\n\n# CountVectorizer will help calculate word counts\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Import the string dictionary that we'll use to remove punctuation\nimport string","0de9ec4d":"# Import datasets\n\ntrain = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv')\n\n# ------------------------------------\n# added these 2 line(s)\n# NB I am only doing it for a sample\n# (0 = negative, 4 = positive)\n# ------------------------------------\n\nxtra_data = pd.read_csv(\n    '..\/input\/sentiment140\/training.1600000.processed.noemoticon.csv',\n    encoding=\"ISO-8859-1\",\n    names=[\"sentiment\", \"textID\", \"date\", \"flag\", \"user\", \"text\"],\n    )\n\nxtra_data = xtra_data[[\"sentiment\", \"textID\", \"text\"]]\nxtra_data = xtra_data.sample(n=10000, random_state=0)\nxtra_data[\"sentiment\"] = xtra_data[\"sentiment\"].astype(int).map({4:'positive', 0:'negative'})","c82fc5cc":"xtra_data.head()","6ffd13be":"# The row with index 13133 has NaN text, so remove it from the dataset\n\ntrain[train['text'].isna()]","f31685d4":"train = train.drop(13133) ","2cd0558b":"# Make all the text lowercase - casing doesn't matter when \n# we choose our selected text.\ntrain['text'] = train['text'].apply(lambda x: x.lower())\ntest['text'] = test['text'].apply(lambda x: x.lower())\n\n# Make training\/test split\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val = train_test_split(train, train_size = 0.99, random_state = 0)\n\n# NB Using FULL DATA","ff4cc736":"pos_train = X_train[X_train['sentiment'] == 'positive']\nneutral_train = X_train[X_train['sentiment'] == 'neutral']\nneg_train = X_train[X_train['sentiment'] == 'negative']","1ddcaa8b":"# Use CountVectorizer to get the word counts within each dataset\n\ncv = CountVectorizer(max_df=0.95, min_df=2,\n                                     max_features=10000,\n                                     stop_words='english')\n\nX_train_cv = cv.fit_transform(X_train['text'])\n\nX_pos = cv.transform(pos_train['text'])\nX_neutral = cv.transform(neutral_train['text'])\nX_neg = cv.transform(neg_train['text'])\n\npos_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())\n\n# Create dictionaries of the words within each sentiment group, where the values are the proportions of tweets that \n# contain those words\n\npos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_count_df[k].sum()\n    neutral = neutral_count_df[k].sum()\n    neg = neg_count_df[k].sum()\n    \n    pos_words[k] = pos\/pos_train.shape[0]\n    neutral_words[k] = neutral\/neutral_train.shape[0]\n    neg_words[k] = neg\/neg_train.shape[0]\n    \n# We need to account for the fact that there will be a lot of words used in tweets of every sentiment.  \n# Therefore, we reassign the values in the dictionary by subtracting the proportion of tweets in the other \n# sentiments that use that word.\n\nneg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","1e71773d":"def calculate_selected_text(df_row, tol = 0):\n    \n    tweet = df_row['text']\n    sentiment = df_row['sentiment']\n    \n    if(sentiment == 'neutral'):\n        return tweet\n    \n    elif(sentiment == 'positive'):\n        dict_to_use = pos_words_adj # Calculate word weights using the pos_words dictionary\n    elif(sentiment == 'negative'):\n        dict_to_use = neg_words_adj # Calculate word weights using the neg_words dictionary\n        \n    words = tweet.split()\n    words_len = len(words)\n    subsets = [words[i:j+1] for i in range(words_len) for j in range(i,words_len)]\n    \n    score = 0\n    selection_str = '' # This will be our choice\n    lst = sorted(subsets, key = len) # Sort candidates by length\n    \n    \n    for i in range(len(subsets)):\n        \n        new_sum = 0 # Sum for the current substring\n        \n        # Calculate the sum of weights for each word in the substring\n        for p in range(len(lst[i])):\n            if(lst[i][p].translate(str.maketrans('','',string.punctuation)) in dict_to_use.keys()):\n                new_sum += dict_to_use[lst[i][p].translate(str.maketrans('','',string.punctuation))]\n            \n        # If the sum is greater than the score, update our current selection\n        if(new_sum > score + tol):\n            score = new_sum\n            selection_str = lst[i]\n            tol = tol*5 # Increase the tolerance a bit each time we choose a selection\n\n    # If we didn't find good substrings, return the whole text\n    if(len(selection_str) == 0):\n        selection_str = words\n        \n    return ' '.join(selection_str)","42c676be":"pd.options.mode.chained_assignment = None","5acafda7":"tol = 0.001\n\nX_val['predicted_selection'] = ''\n\nfor index, row in X_val.iterrows():\n    selected_text = calculate_selected_text(row, tol)\n    X_val.loc[X_val['textID'] == row['textID'], ['predicted_selection']] = selected_text","2160a3e9":"pos_tr = train[train['sentiment'] == 'positive']\nneutral_tr = train[train['sentiment'] == 'neutral']\nneg_tr = train[train['sentiment'] == 'negative']","511fc315":"cv = CountVectorizer(max_df=0.95, min_df=2,\n                     max_features=10000,\n                     stop_words='english')\n\nfinal_cv = cv.fit_transform(train['text'])\n\nX_pos = cv.transform(pos_tr['text'])\nX_neutral = cv.transform(neutral_tr['text'])\nX_neg = cv.transform(neg_tr['text'])\n\npos_final_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_final_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_final_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())","4d680f1d":"pos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_final_count_df[k].sum()\n    neutral = neutral_final_count_df[k].sum()\n    neg = neg_final_count_df[k].sum()\n    \n    pos_words[k] = pos\/(pos_tr.shape[0])\n    neutral_words[k] = neutral\/(neutral_tr.shape[0])\n    neg_words[k] = neg\/(neg_tr.shape[0])","be53d78c":"neg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","10b8a6e5":"from tqdm.autonotebook import tqdm\ntol = 0.001\n\nxtra_data['selected_text'] = ''\n\n'''\n# from joblib import Parallel, delayed\n# res = Parallel(n_jobs=4, backend='multiprocessing')(delayed(calculate_selected_text)(row, tol) for idx,row in tqdm(X_val.iterrows()))\n\nNB the below can be speeded up; NB you have to slightly modeify the calculate_selected_text func \nto return ids and etc to do the reverse mapping..\n'''\n\nfor _, row in tqdm(xtra_data.iterrows()):\n    selected_text = calculate_selected_text(row, tol)\n    xtra_data.loc[xtra_data['textID'] == row['textID'], ['selected_text']] = selected_text","04d98d56":"xtra_data.head()","f58274f2":"xtra_data.to_csv(\"xtra_sentiment_140.csv\", index=None)","2a056a37":"Create a training set and a validation set.","05457275":"# NB\n-----------------------------------\n- I have only extended the approach to the Sentiment140 Dataset; I take no credit for anything except that; \n- Please refer the original work https:\/\/www.kaggle.com\/nkoprowicz\/a-simple-solution-using-only-word-counts\n- Also we can use one of our models to generate the pseudo labels and then use it as external training data down the line;\n- Adding to that, you can simple finetune your model on this 1.4M twwets first for a better head start!\n----------------------------------","e3e85753":"### This is a simple solution using only word counts with CountVectorizer to make predictions.\n\n#### Here's the idea:\n- Find and weight words that are used most often in only certain kinds of tweets.\n- Search all subsets of the tweet and calculate a score based on these weights.\n- For positive or negative tweets, the selected text is the most highly weighted subset, within some threshold.\n- Always return the entire text for neutral tweets.","bd4a54fc":"Create xtra_data file.","5a30c14b":"### Algorithm for weight calculation:\n\n1. For each class $j \\in \\{positive, neutral, negative\\}$\n\n    a. Find all the words $i$ in the tweets belonging to class $j$.\n\n    b. Calculate $n_{i, j} =$ the number of tweets in class $j$ containing word $i$. \n\n    c. Let $d_j$ be the number of tweets in class $j$.  Calculate $p_{i, j} = \\frac{n_{i, j}}{d_j}$, the proportion of tweets in class $j$ that conain word $i$.\n\n    d. Let $w_{i, j} = p_{i, j} - \\sum\\limits_{k \\neq j}p_{i, k}$ be the weights assigned to each word within each class. \n    ","1f21db59":"for xtra_data","f7ed121c":"Calculate the selected text and score for the validation set.","df469187":"Break up the training data into datasets where the sentiment is positive, neutral, or negative","daf8b62e":"### Algorithm for finding selected text: \n  \n1. For every tweet:\n\n    a. Let $j$ be the sentiment of the tweet. \n\n    b. If $j ==$ neutral return entire text.\n\n    c. Otherwise, for each subset of words in the tweet, calculate $\\sum\\limits_{i}w_{i, j}$, where $i$ is the set of words in the tweet\n\n   d. Return the subset of words with the largest sum, given that it exceeds some tolerance."}}