{"cell_type":{"fd4e4176":"code","2f997221":"code","5a7956b4":"code","4d45699e":"code","1a5f8481":"code","74214d14":"code","c419386f":"code","ebcc362d":"code","b962c67f":"code","70969b2e":"code","5e6cce79":"code","f648f791":"code","ce2d0cf6":"code","1514fb97":"code","1654a1f4":"code","6a172c29":"code","426df7e6":"code","c0c1fa25":"code","ac2fbb2f":"code","4e029e72":"code","beed3336":"code","71e0bd64":"code","814a216e":"code","5f192c71":"code","ccd8a9cb":"code","8489583f":"code","276a370a":"code","4f0b9d21":"code","cce53bde":"code","b2d841f0":"code","527694b1":"code","d795ac4d":"code","82e4fda0":"code","8e6630eb":"code","66652357":"code","9c0d4ee0":"code","e8f2273c":"code","0571a744":"code","3330f7d0":"code","5a6c37b3":"code","6a8f669b":"code","effe5631":"code","b3312894":"code","123a5ce2":"code","67f65f1b":"code","f7647fa3":"code","dfea43f5":"code","4270fc61":"markdown","b2787750":"markdown","351bc703":"markdown","765e1e2c":"markdown","f20380a7":"markdown","cbc5de33":"markdown","cc98952d":"markdown","186d720f":"markdown","f9b07bfc":"markdown","48ee8f3a":"markdown","615d2215":"markdown"},"source":{"fd4e4176":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f997221":"import os, shutil\nfrom pathlib import Path","5a7956b4":"pwd","4d45699e":"os.listdir('\/kaggle\/input\/logical-rythm-2k20-sports-image-classification')","1a5f8481":"os.listdir('\/kaggle\/input\/logical-rythm-2k20-sports-image-classification\/train')","74214d14":"original_base_dir = '\/kaggle\/input\/logical-rythm-2k20-sports-image-classification'","c419386f":"os.listdir('\/kaggle\/working')","ebcc362d":"os.mkdir('Train')\nos.mkdir('Val')","b962c67f":"os.listdir('\/kaggle\/working')","70969b2e":"train_labels = pd.read_csv(original_base_dir+'\/train_labels.csv')","5e6cce79":"train_labels.head()","f648f791":"sports = set(train_labels['sports'])","ce2d0cf6":"sports","1514fb97":"for sport in sports:\n  p1 = os.path.join('Train',sport)\n  p2 = os.path.join('Val',sport)\n  if not os.path.isdir(p1):\n    os.mkdir(p1)\n  if not os.path.isdir(p2):\n    os.mkdir(p2)","1654a1f4":"train_dir = original_base_dir + '\/train'","6a172c29":"train_dir","426df7e6":"train_labels['image'][0][1:]","c0c1fa25":"train_labels['sports'][0]","ac2fbb2f":"for idx in train_labels.index:\n  src = train_dir + train_labels['image'][idx][1:]\n  dest = 'Train\/' + train_labels['sports'][idx]\n  shutil.copy(src,dest)","4e029e72":"SPLIT = 0.85\nfor f in os.listdir(\"Train\"):\n    path = \"Train\/\"+f\n    imgs = os.listdir(path)\n    \n    split_size = int(SPLIT*len(imgs))\n    files_to_move = imgs[split_size:]\n    for img_f in files_to_move:\n        src = os.path.join(path,img_f)\n        dest = os.path.join(\"Val\/\"+f,img_f)\n        shutil.move(src,dest)","beed3336":"print(\"Training Data\")\nfor f in os.listdir(\"Train\"):\n    path = \"Train\/\"+f\n    print(f+ \" \"+str(len(os.listdir(path))))\n   \n\nprint(\"\\n Validation Data\") \nfor f in os.listdir(\"Train\"):\n    path = \"Val\/\"+f\n    print(f+ \" \"+str(len(os.listdir(path))))","71e0bd64":"!pip install fastai==1.0.61 --no-deps","814a216e":"from fastai import *\nfrom fastai.vision import *\nfrom fastai.vision import *\nfrom fastai.callbacks import *\nimport torch","5f192c71":"pwd","ccd8a9cb":"ls","8489583f":"path = Path('\/kaggle\/working')","276a370a":"path","4f0b9d21":"# trfm = get_transforms(do_flip=True, flip_vert=True, max_rotate=10.0, max_zoom=1.1, max_lighting=0.2, max_warp=0.2, p_affine=0.75, p_lighting=0.75)\n\ntrfm = get_transforms()","cce53bde":"np.random.seed(42)\ndata = ImageDataBunch.from_folder(path, train='Train', valid='Val', test = 'test',ds_tfms=get_transforms(), size=224, num_workers=4, bs=32).normalize(imagenet_stats)","b2d841f0":"len(data.classes)","527694b1":"data.show_batch(rows=3, figsize=(9,10))","d795ac4d":"data.classes, data.c, len(data.train_ds), len(data.valid_ds), len(data.test_ds)","82e4fda0":"learn = cnn_learner(data, models.densenet161, metrics=[error_rate, accuracy])","8e6630eb":"learn.lr_find()","66652357":"learn.recorder.plot()","9c0d4ee0":"lr = 1e-02","e8f2273c":"learn.callback_fns.append(partial(SaveModelCallback, name='densenet-stage-1'))","0571a744":"learn.fit_one_cycle(15, slice(lr))","3330f7d0":"learn.load('densenet-stage-1'); # remove ';' to see model","5a6c37b3":"from pathlib import Path\np = Path(\"\/kaggle\/input\/logical-rythm-2k20-sports-image-classification\/test\/test\")","6a8f669b":"dire = p.glob(\"*.jpg\")\nimg_pred = {}\nfor img_path in dire:\n  img = open_image(img_path)\n  pred_class,pred_idx,outputs = learn.predict(img)\n  img_label = str(img_path).split('\/')[-1]\n  img_pred[img_label] = pred_class\nprint(len(img_pred))","effe5631":"test_images_list = pd.read_csv('\/kaggle\/input\/logical-rythm-2k20-sports-image-classification\/test_images_list.csv')","b3312894":"test_images_list.head()","123a5ce2":"df_pred = pd.DataFrame(columns=['image', 'sports'])","67f65f1b":"for idx in test_images_list.index:\n  img_name = test_images_list['image'][idx]\n  img_no = test_images_list['image'][idx].split('\/')[-1]\n  label = img_pred[img_no]\n  df_pred = df_pred.append({'image' : img_name, 'sports' : label}, ignore_index=True)","f7647fa3":"print(df_pred.shape)\nprint(df_pred.head())","dfea43f5":"df_pred.to_csv('sub_fastai.csv', index = False)","4270fc61":"## This NoteBook was made using Google Colab ","b2787750":"## Importing Libraries","351bc703":"## Data Loading","765e1e2c":"## Best way to Train Model using FastAI modules\n\n1.   First find best learning_rate using lr_find() \n\n  - Plot the losses against the learning rates (recorder.plot()) and pick a value a bit before the minimum, where the loss still improves.\n\n2.   Train the model using fit_one_cycle(no_of_epochs, range_of_learning_rate)\n\n  - for training freezed model (i.e. transfer learning) use a fixed learning_rate found using Step 1.\n\n3.   Now comes Fine-Tuning part \n\n  - Load the model trained above \n  - Unfreeze its layers \n  - find range of learning_rate \n  \n    - - The maximum should be the value picked with the Learning Rate Finder\n    - - The lower one can be ten\/five times lower.\n  - The idea for using above ranged learning rate is :-\n    - - using a lower value to warm-up the training \n    - - during the middle of the cycle, the high learning rates will act as regularization method, and keep the network from overfitting.\n\n4.   #### For more details see [Sylvain Gugger Blog](https:\/\/sgugger.github.io\/the-1cycle-policy.html)","f20380a7":"### Training Model \n- here the training is done when all the layers of model is freezed","cbc5de33":"### Team Members\n- [Vivek Rai](https:\/\/www.kaggle.com\/blazer007)\n- [Sidhant Agarwal](https:\/\/www.kaggle.com\/sidagar)\n- [Deepanshu Raj](https:\/\/www.kaggle.com\/davalpha)","cc98952d":"## Transfer Learning using FastAI\n### cnn_learner model making starts using densenet161 weights as pretrained weights","186d720f":"### Finding Learning_rate using lr_find()","f9b07bfc":"## Data Augmentation","48ee8f3a":"# Creating Output Submission CSV file","615d2215":"### Public Score  -> 0.94130\n### Private Score -> 0.94782"}}