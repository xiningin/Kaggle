{"cell_type":{"c505c1db":"code","0da79669":"code","37db47fd":"code","a4516219":"code","9890c8e2":"code","2549c0bd":"code","d66573eb":"code","46b8a0d9":"code","fb7f5bd7":"code","4304cd38":"code","49eadc54":"code","5359329f":"code","f77fb53b":"code","34a330d0":"code","1c84c7d1":"code","de88d6b0":"code","aae1b806":"code","0dc0ae93":"code","371527c0":"code","c8b01c6e":"markdown","06442feb":"markdown"},"source":{"c505c1db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0da79669":"#ReadData\ndata = pd.read_csv(\"..\/input\/heart.csv\")","37db47fd":"data.info()","a4516219":"data.head()","9890c8e2":"#Seperate data\ny =data.target.values\nx1=data.drop([\"target\"],axis=1)","2549c0bd":"#Normalization \nx = (x1 - np.min(x1))\/(np.max(x1)-np.min(x1)).values","d66573eb":"#Split For Train and Test\nfrom sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2, random_state=42)","46b8a0d9":"#transposition\nxtrain = xtrain.T\nxtest = xtest.T\nytrain = ytrain.T\nytest = ytest.T","fb7f5bd7":"#Initializing Parametres & Sigmoid Function\ndef initializing_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\ndef sigmoid(z):\n    y_head = 1\/(1+ np.exp(-z))\n    return y_head","4304cd38":"#Forward & Backward Propogation\n\ndef forward_backwardpropogation(w,b,xtrain,y_train):\n    #forward P.\n    z = np.dot(w.T,xtrain) +  b \n    y_head = sigmoid(z)\n    loss = -ytrain*np.log(y_head)-(1-ytrain)*np.log(1-y_head)\n    cost = (np.sum(loss))\/xtrain.shape[1]\n    #backward p.\n    derivative_weight = (np.dot(xtrain,((y_head-ytrain).T)))\/xtrain.shape[1] \n    derivetive_bias = np.sum(y_head-ytrain)\/xtrain.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight,\"derivetive_bias\": derivetive_bias}\n    \n    return cost,gradients","49eadc54":"#Uptading parameters\n\ndef update(w,b,xtrain, ytrain, learning_rate, number_of_iteration):\n    costlist = []\n    costlist2 = []\n    index = []\n    #updating\/learning parameters is number of iteration times\n    for i in range(number_of_iteration):\n        #makeforwardandbacwardprop.andfindcostandgradi\n        cost,gradients = forward_backwardpropogation(w,b,xtrain,ytrain)\n        costlist.append(cost)\n        #updatingtime\n        w = w - learning_rate*gradients[\"derivative_weight\"]\n        b = b - learning_rate*gradients[\"derivetive_bias\"]\n        if i % 10 == 0:\n            costlist2.append(cost)\n            index.append(i)\n            print(\"Cost after iteration %i: %f\" %(i,cost))\n            \n    #weupdate(learn) parameters weight & bias\n    parameters = {\"weight\": w, \"bias\":b}\n    plt.plot(index,costlist2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, costlist","5359329f":"#%% Prediciton Method\n    \ndef predict(w,b,xtest):\n    \n    z =sigmoid(np.dot(w.T,xtest)+b)\n    y_prediction = np.zeros((1,xtest.shape[1]))\n    #if z > 0.5 predcition = 1 y_head=1\n    #if z <= 0.5 prediciton = 0 y_head=0\n    for i in range(z.shape[1]):\n        if z[0,i]<=0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    return y_prediction","f77fb53b":"# Logistic Reg.\n\ndef LogReg(xtrain,ytrain,xtest,ytest,learning_rate,number_of_iteration):\n    #initializing\n    dimension = xtrain.shape[0] \n    w,b=initializing_weights_and_bias(dimension)\n    #forward & backward prop.\n    parameters,gradients,costlist = update(w,b,xtrain,ytrain,learning_rate,number_of_iteration)\n    \n    y_prediciton_test = predict(parameters[\"weight\"],parameters[\"bias\"],xtest)\n\n    #print train\/test errors\n    print(\"Test Accuracy:{} %\".format(100-np.mean(np.abs(y_prediciton_test-ytest))*100))\n\n","34a330d0":"#Application1\nLogReg(xtrain,ytrain,xtest,ytest,learning_rate=1,number_of_iteration =50 )","1c84c7d1":"#Application2\nLogReg(xtrain,ytrain,xtest,ytest,learning_rate=1,number_of_iteration =100 )","de88d6b0":"#Application3\nLogReg(xtrain,ytrain,xtest,ytest,learning_rate=1,number_of_iteration =1000)","aae1b806":"#Application4\nLogReg(xtrain,ytrain,xtest,ytest,learning_rate=3,number_of_iteration =3000)","0dc0ae93":"#LR with sklearn\nfrom sklearn.linear_model import LogisticRegression\nLR = LogisticRegression()\nLR.fit(xtrain.T,ytrain.T)\nprint(\"Test Accuracy {}\".format(LR.score(xtest.T,ytest.T))) ","371527c0":"#Confusion Matrix\n\nyprediciton= LR.predict(xtest.T)\nytrue = ytest.T\n\nfrom sklearn.metrics import confusion_matrix\nCM = confusion_matrix(ytrue,yprediciton)\n\n#CM visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(CM,annot = True, linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"Prediction(Ypred)\")\nplt.ylabel(\"Ytrue\")\nplt.show()","c8b01c6e":"**Conclusion**\n\n* Thank you for investigation my kernel \n* I benefit create of this kernel from DATAI Team (https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners)\n* If you like it, please upvote!\n**THANK YOU**\n\n<img src=\"https:\/\/media1.giphy.com\/media\/l0ExvuzJGJNZJZ47S\/giphy.gif?cid=790b76115cc05331372f4d64593e8962\" width=\"500px\">","06442feb":"**Introduction**\n\nHello, I'm going to preciton with Logistic regression. \nI will use  Heart Disease UCI dataset. If you wonder anything about dateset,you can read here. (https:\/\/www.kaggle.com\/ronitf\/heart-disease-uci) \n\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*PkEl-8DBQa-xEft_tacXLQ.gif\" width=\"500px\">"}}