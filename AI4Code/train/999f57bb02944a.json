{"cell_type":{"f59b8205":"code","7e7be486":"code","d9feb708":"code","f1f9c244":"code","5907fdf5":"code","c4b4146b":"code","807bd33a":"code","5171f893":"code","ca8b17b8":"code","50c268b9":"code","4bdbddde":"code","706fbfd3":"code","efea377d":"code","57bc5363":"code","2961b2b9":"code","12790036":"code","17274d4e":"code","8ee3a328":"code","36ff06f2":"code","8c04f746":"markdown","549e8493":"markdown","58868398":"markdown","0ca93a25":"markdown","46b145db":"markdown"},"source":{"f59b8205":"import numpy as np\nnp.set_printoptions(formatter={'float': lambda x: \"{0:0.2f}\".format(x)})\n\nimport pandas as pd\n\nimport os","7e7be486":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, max_error","d9feb708":"import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","f1f9c244":"fish = pd.read_csv(\"\/kaggle\/input\/fish-market\/Fish.csv\")\nfish.head()","5907fdf5":"from sklearn.preprocessing import OrdinalEncoder\nfish_encoder = OrdinalEncoder()\nfish_encoder.fit(fish[['Species']])\n\nprint(fish_encoder.categories_)\n\nfish['Species'] = fish_encoder.transform(fish[['Species']])","c4b4146b":"fish.describe()","807bd33a":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set(rc = {'figure.figsize':(10, 8)})\n\nsns.heatmap(fish.corr(), annot=True);","5171f893":"fig = px.scatter_matrix(\n    fish, \n    dimensions=fish.columns, \n    color=\"Species\"\n)\nfig.show()","ca8b17b8":"fig = make_subplots(\n    rows=(fish.shape[1]\/\/2)+1, \n    cols=2,\n    subplot_titles=fish.columns\n)\n\nfor i, col in enumerate(fish.columns):\n    \n    trace = go.Histogram(x=fish[col], nbinsx=10)\n    fig.append_trace(trace, (i\/\/2)+1, (i%2)+1)\n\nfig.show()","50c268b9":"X = fish.drop(['Weight'], axis=1)\ny = fish['Weight']","4bdbddde":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","706fbfd3":"from sklearn.linear_model import LinearRegression\n\nlrmodel = LinearRegression().fit(X, y)\nlrscore = lrmodel.score(X, y)\n\nprint(lrscore)","efea377d":"y_pred = lrmodel.predict(X_train)\n\nmse = mean_squared_error(y_train, y_pred)\nmae = mean_absolute_error(y_train, y_pred)\nme = max_error(y_train, y_pred)\n\nprint(f\"(train) mean_squared_error: {mse}, mean_absolute_error: {mae}, max_error: {me}\")","57bc5363":"y_pred = lrmodel.predict(X_test)\n\nmse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\nme = max_error(y_test, y_pred)\n\nprint(f\"(test) mean_squared_error: {mse}, mean_absolute_error: {mae}, max_error: {me}\")","2961b2b9":"from sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_randFloat\nfrom scipy.stats import randint as sp_randInt","12790036":"forest = RandomForestRegressor()\n\nparameters = {\n    'n_estimators' : sp_randInt(100, 500),\n    'max_depth' : sp_randInt(1, 20),\n    'min_samples_split' : sp_randInt(2, 20),\n    'min_samples_leaf' : sp_randInt(1, 20),\n    'max_features' : [\"auto\", \"sqrt\", \"log2\"]\n}\n\nrsearch = RandomizedSearchCV(forest, parameters, random_state=0)\nrsearch.fit(X, y)\n\nprint(rsearch.best_params_)\nprint(rsearch.best_score_)","17274d4e":"forest = RandomForestRegressor(\n    max_depth=13, \n    max_features='sqrt',\n    min_samples_leaf=1, \n    min_samples_split=5,\n    n_estimators=500\n)\n\nforest.fit(X_train, y_train)","8ee3a328":"y_pred = forest.predict(X_train)\n\nmse = mean_squared_error(y_train, y_pred)\nmae = mean_absolute_error(y_train, y_pred)\nme = max_error(y_train, y_pred)\n\nprint(f\"(train) mean_squared_error: {mse}, mean_absolute_error: {mae}, max_error: {me}\")","36ff06f2":"y_pred = forest.predict(X_test)\n\nmse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\nme = max_error(y_test, y_pred)\n\nprint(f\"(train) mean_squared_error: {mse}, mean_absolute_error: {mae}, max_error: {me}\")","8c04f746":"# Data Analysis","549e8493":"# Algorithms","58868398":"# Load the data","0ca93a25":"## Random Forest","46b145db":"## Linear Regression"}}