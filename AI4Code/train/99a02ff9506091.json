{"cell_type":{"a2301048":"code","7ff97be5":"code","f2d1b07c":"code","e483ff19":"code","b254175b":"code","359237c5":"code","dcc51c6c":"code","0f62bac3":"code","91358fb7":"code","a18d8a88":"code","6c0e5106":"code","5123da53":"code","af154e34":"code","47f29775":"code","ce6c971c":"code","6de158ce":"markdown","2aa68f32":"markdown","e41fd88c":"markdown"},"source":{"a2301048":"import numpy as np \nimport pandas as pd \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))","7ff97be5":"import scipy\nimport numpy as np\nimport matplotlib \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport sklearn\nimport seaborn as sns\nimport warnings\n\nsns.set_style(\"whitegrid\")\n%matplotlib inline","f2d1b07c":"import plotly.offline as pyo\npyo.init_notebook_mode()\nfrom plotly.graph_objs import *\nimport plotly.graph_objs as go","e483ff19":"import json\n#__________________\ndef load_tmdb_movies(path):\n    df = pd.read_csv(path)\n    df['release_date'] = pd.to_datetime(df['release_date']).apply(lambda x: x.date())\n    json_columns = ['genres', 'keywords', 'production_countries', 'production_companies', 'spoken_languages']\n    for column in json_columns:\n        df[column] = df[column].apply(json.loads)\n    return df\n#____________________________\ndef load_tmdb_credits(path):\n    df = pd.read_csv(path)\n    json_columns = ['cast', 'crew']\n    for column in json_columns:\n        df[column] = df[column].apply(json.loads)\n    return df\n#_______________________________________\ndef safe_access(container, index_values):\n    result = container\n    try:\n        for idx in index_values:\n            result = result[idx]\n        return result\n    except IndexError or KeyError:\n        return pd.np.nan\n#_______________________________________\nLOST_COLUMNS = [\n    'actor_1_facebook_likes',\n    'actor_2_facebook_likes',\n    'actor_3_facebook_likes',\n    'aspect_ratio',\n    'cast_total_facebook_likes',\n    'color',\n    'content_rating',\n    'director_facebook_likes',\n    'facenumber_in_poster',\n    'movie_facebook_likes',\n    'movie_imdb_link',\n    'num_critic_for_reviews',\n    'num_user_for_reviews']\n#_______________________________________\nTMDB_TO_IMDB_SIMPLE_EQUIVALENCIES = {\n    'budget': 'budget',\n    'genres': 'genres',\n    'revenue': 'gross',\n    'title': 'movie_title',\n    'runtime': 'duration',\n    'original_language': 'language',  \n    'keywords': 'plot_keywords',\n    'vote_count': 'num_voted_users'}\n#_______________________________________     \nIMDB_COLUMNS_TO_REMAP = {'imdb_score': 'vote_average'}\n#_______________________________________\ndef get_director(crew_data):\n    directors = [x['name'] for x in crew_data if x['job'] == 'Director']\n    return safe_access(directors, [0])\n#_______________________________________\ndef pipe_flatten_names(keywords):\n    return '|'.join([x['name'] for x in keywords])\n#_______________________________________\ndef convert_to_original_format(movies, credits):\n    tmdb_movies = movies.copy()\n    tmdb_movies.rename(columns=TMDB_TO_IMDB_SIMPLE_EQUIVALENCIES, inplace=True)\n    tmdb_movies['title_year'] = pd.to_datetime(tmdb_movies['release_date']).apply(lambda x: x.year)\n    tmdb_movies['country'] = tmdb_movies['production_countries'].apply(lambda x: safe_access(x, [0, 'name']))\n    tmdb_movies['language'] = tmdb_movies['spoken_languages'].apply(lambda x: safe_access(x, [0, 'name']))\n    tmdb_movies['director_name'] = credits['crew'].apply(get_director)\n    tmdb_movies['actor_1_name'] = credits['cast'].apply(lambda x: safe_access(x, [1, 'name']))\n    tmdb_movies['actor_2_name'] = credits['cast'].apply(lambda x: safe_access(x, [2, 'name']))\n    tmdb_movies['actor_3_name'] = credits['cast'].apply(lambda x: safe_access(x, [3, 'name']))\n    tmdb_movies['actor_4_name'] = credits['cast'].apply(lambda x: safe_access(x, [4, 'name']))\n    tmdb_movies['actor_5_name'] = credits['cast'].apply(lambda x: safe_access(x, [5, 'name']))\n    tmdb_movies['genres'] = tmdb_movies['genres'].apply(pipe_flatten_names)\n    tmdb_movies['plot_keywords'] = tmdb_movies['plot_keywords'].apply(pipe_flatten_names)\n    return tmdb_movies","b254175b":"credits = load_tmdb_credits(\"..\/input\/tmdb_5000_credits.csv\")\nmovies = load_tmdb_movies(\"..\/input\/tmdb_5000_movies.csv\")\nmovie = convert_to_original_format(movies, credits)","359237c5":"movie.head()","dcc51c6c":"movie.describe()","0f62bac3":"corr = movie.select_dtypes(include = ['float64', 'int64']).iloc[:, 1:].corr()\nplt.figure(figsize=(16, 16))\nsns.heatmap(corr, vmax=1, square=True)\nplt.show()","91358fb7":"actor = movie[['actor_1_name', 'actor_2_name', 'actor_3_name', 'actor_4_name', 'actor_5_name', 'gross', 'vote_average', 'num_voted_users', 'popularity']]\nactor.head()","a18d8a88":"actor_list = pd.melt(actor, id_vars=['vote_average', 'num_voted_users'], value_vars=['actor_1_name', 'actor_2_name', 'actor_3_name', 'actor_4_name', 'actor_5_name'],\n                    var_name='variable', value_name='actor_name')\nactor_list.head()","6c0e5106":"actor_score = (actor_list['vote_average'] * actor_list['num_voted_users']).groupby(actor_list['actor_name']).sum()","5123da53":"actor_list_gross = pd.melt(actor, id_vars=['gross'], value_vars=['actor_1_name', 'actor_2_name', 'actor_3_name', 'actor_4_name', 'actor_5_name'],\n                    var_name='variable', value_name='actor_name')\nactor_score_gross= actor_list_gross['gross'].groupby(actor_list_gross['actor_name']).sum()","af154e34":"df = pd.concat([actor_score, actor_score_gross], axis=1)\ndf.columns = [['vote_average', 'gross']]","47f29775":"warnings.filterwarnings(\"ignore\")\n\nartemis_actors = ['Kenneth Choi', 'Sterling K. Brown', 'Jeff Goldblum', 'Zachary Quinto', \n               'Charlie Day', 'Dave Bautista', 'Sofia Boutella', 'Brian Tyree Henry']\n\na = df.loc[[i for i in df.index if i not in artemis_actors], :]\nb = df.loc[artemis_actors, :]\ndf = pd.concat([a, b]).dropna()","ce6c971c":"def quality_graph(df):\n    edge_trace = Scatter(\n    x=[],\n    y=[],\n    line = Line(width=0.5,color='#888'),\n    hoverinfo = 'none',\n    mode = 'lines')\n\n    node_trace = Scatter(\n        x=[],\n        y=[],\n        text=[],\n        mode='markers',\n        hoverinfo='text',\n        marker=Marker(\n            colorscale='YlGnBu',\n            reversescale=True,\n            color=[],\n            size=10,\n            line=dict(width=2)))\n    \n    for ind, col in df.iterrows():\n        node_trace['x'] += (col['gross'].values[0], )\n        node_trace['y'] += (col['vote_average'].values[0], )\n        node_trace['text'] += (ind,)\n        if ind in artemis_actors:\n            node_trace['marker']['color'] += (10, )\n        else:\n            node_trace['marker']['color'] += (1, )\n        \n    fig = Figure(data=Data([node_trace]),\n                 layout=Layout(\n                    title='<br>Quality of actors',\n                    titlefont=dict(size=16),\n                    showlegend=False,\n                    hovermode='closest',\n                    margin=dict(b=20,l=5,r=5,t=40),\n                    annotations=[ dict(\n                        showarrow=False,\n                        xref=\"paper\", yref=\"paper\",\n                        x=0.005, y=-0.002 ) ],\n                    xaxis=XAxis(title='Sum Gross', showgrid=True, zeroline=False, showticklabels=True),\n                    yaxis=YAxis(title='IMDB score x Users count', showgrid=True, zeroline=False, showticklabels=True)))    \n    return fig","6de158ce":"Let's load the data and convert it to original structure","2aa68f32":"Summary Statistics","e41fd88c":"Correlations Between Attributes"}}