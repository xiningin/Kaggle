{"cell_type":{"18d2b8c1":"code","fe5f8de7":"code","10dd54f2":"code","c9d7ebb3":"code","d791f401":"code","61b481db":"code","b95d99e7":"code","7d2e5b2d":"code","66d11077":"code","55c2729b":"code","e9806433":"code","1f3490d6":"code","295901b7":"code","8ec42c6d":"code","6479eb16":"code","e879e0f6":"code","1d7287ae":"code","62012535":"code","e1ad6534":"code","887e4f23":"code","b452c92d":"markdown","ba5e57d7":"markdown","ba96c9c6":"markdown","7220ac09":"markdown"},"source":{"18d2b8c1":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import svm\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","fe5f8de7":"BMI = pd.read_csv('..\/input\/500-person-gender-height-weight-bodymassindex\/500_Person_Gender_Height_Weight_Index.csv')","10dd54f2":"BMI.tail()","c9d7ebb3":"gender_label = LabelEncoder()\nBMI['Gender'] = gender_label.fit_transform(BMI['Gender'])","d791f401":"bins = (-1,0,1,2,3,4,5)\nhealth_status = ['Extremely Underweight','Underweight', 'Normal', 'Overweight', 'Obese', 'Extremely Obese']\nBMI['Index'] = pd.cut(BMI['Index'], bins = bins, labels = health_status)\nBMI['Index'].value_counts()","61b481db":"sns.countplot(BMI['Index'])","b95d99e7":"BMI.info()","7d2e5b2d":"BMI['Index']","66d11077":"BMI.tail()","55c2729b":"X = BMI.drop('Index', axis = 1)\ny = BMI['Index']","e9806433":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","1f3490d6":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","295901b7":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train, y_train)\npred_rfc = rfc.predict(X_test)","8ec42c6d":"print(classification_report(y_test, pred_rfc))\nprint(confusion_matrix(y_test, pred_rfc))","6479eb16":"clf = svm.SVC()\nclf.fit(X_train, y_train)\npred_clf = clf.predict(X_test)","e879e0f6":"print(classification_report(y_test, pred_clf))\nprint(confusion_matrix(y_test, pred_clf))","1d7287ae":"mlpc = MLPClassifier(hidden_layer_sizes=(3,3,3), max_iter = 500)\nmlpc.fit(X_train, y_train)\npred_mlpc = mlpc.predict(X_test)","62012535":"print(classification_report(y_test, pred_mlpc))\nprint(confusion_matrix(y_test, pred_mlpc))","e1ad6534":"from sklearn.metrics import accuracy_score\ncm = accuracy_score(y_test, pred_rfc)\ncm","887e4f23":"Xnew = [[1,175,35]] #Enter New Value: [Gender, Height, Weight]\nXnew = sc.transform(Xnew)\nynew = rfc.predict(Xnew)\nynew","b452c92d":"# Random Forest Classifier","ba5e57d7":"# Neural Network","ba96c9c6":"# Test","7220ac09":"# SVM Classifier"}}