{"cell_type":{"d290f11d":"code","703c8c8c":"code","8d9f0cbe":"code","a5fdd309":"code","f2a84b9c":"code","5d47028e":"code","2a6cbda0":"code","d6779dfa":"code","41215d31":"code","2161283f":"code","bf517ae7":"code","85e96044":"code","5af42134":"code","e568bbf2":"code","ffee36d0":"code","285c76fd":"code","3e9001ab":"code","8f336336":"code","37b3ad2b":"code","22340e6d":"code","70436493":"code","350721ac":"code","0aceb286":"code","a05a3638":"code","19451eef":"code","83212b9b":"code","c67a3a30":"code","dec74168":"code","b8f9429d":"code","312b4a68":"code","2f30db4f":"code","c6387e2e":"code","dc04f19f":"code","0adb5ca1":"code","a9840fc8":"code","fa7fc275":"code","0107cec2":"code","efc906e1":"code","1a9d6c07":"code","da835812":"code","584e6a7b":"code","402f6f5c":"code","52c99835":"code","3f01321d":"code","89335cd4":"code","bb6c79a5":"code","abb99ce4":"code","8ef5d8fe":"code","be005d71":"code","137d0612":"code","12cebfa0":"code","6c589ce6":"code","ea256f8a":"code","06da3185":"code","1309f0c3":"code","f9850110":"code","8bf73bdf":"code","cd2c5f48":"code","bba7a542":"code","b440f231":"code","94730a3e":"code","e2bd83d1":"code","a407c01c":"code","eb49d98f":"code","bb2ecf69":"code","e7e8e0dd":"code","0cf8ef6b":"code","8224651a":"code","718c0234":"code","706b4e9e":"code","f6b5f8f4":"code","5c402732":"code","d34023dc":"code","183bfdf8":"code","6274d4a0":"code","0168bbdc":"code","5a1b985b":"code","821007b7":"code","d3b10a4f":"code","09f8dae5":"code","c9b4cfe0":"code","191db27d":"code","c172607a":"code","a5d254ee":"code","043a3bf7":"code","80e4140f":"code","f33d9ddb":"code","f5f7868b":"code","7c78f3b4":"code","54c1de69":"code","751233d1":"code","d9a61eff":"code","c4d7bf2a":"code","e917d5b4":"code","bed392de":"code","972d6d33":"code","9ffacb29":"code","ccf65481":"code","cd336a84":"code","b36c96e0":"code","833c1f52":"code","0a151e8c":"code","50e94218":"code","8f593ceb":"code","928eb720":"code","9811d179":"code","c45781d0":"code","8031db31":"code","00ff482c":"code","226e810a":"code","c1b9c304":"code","2a6aa6e1":"code","f9df7231":"code","fb09e47a":"code","a053f52d":"code","a2590bee":"code","f91eb97e":"code","25e0d5bd":"code","5862dba0":"code","b0472095":"code","601b3ea3":"code","21d4e841":"code","f3c5f93e":"code","7f7cf4a7":"code","f55a4050":"code","3f537e9e":"code","2f28ceef":"code","86e2d60b":"code","2bd18db0":"code","835faf32":"code","b4d81a72":"code","780a60c7":"code","da87586a":"code","0fb9848f":"code","4a7698cb":"code","3d9f7c02":"code","af412a84":"code","68bfd3fb":"code","0ba6d5c0":"code","af34917c":"code","70f36be4":"code","91fa552f":"code","c7a21682":"code","4751fe73":"code","fe7c69e9":"code","b1224c84":"code","e0a74d08":"code","2881c840":"code","559de482":"code","70b58894":"code","413f695e":"code","4545a283":"code","e0a6660f":"code","88f7bfb6":"code","0f1d8821":"code","545b7ac0":"code","107461f3":"code","2770378a":"code","a37bd57c":"code","f1ae38bb":"code","e14f4592":"code","b49ec899":"code","5663772a":"code","afa04c4f":"code","085cb98f":"code","36422965":"code","6a130ee2":"code","abac8587":"code","c0317e02":"code","58c115eb":"code","ebb818e9":"code","5db0654d":"code","edff8f8b":"code","2229bad5":"code","0d3e900f":"code","ca29d31b":"code","93ba5496":"code","70e608a0":"code","87964d02":"markdown"},"source":{"d290f11d":"import numpy as np \nimport pandas as pd \nimport os\n","703c8c8c":"#opening data\nstorms=pd.read_csv('..\/input\/2020-atlantic-hurricanesstorms-preeliminary\/hurricanes2020.csv') ","8d9f0cbe":"storms.columns","a5fdd309":"#column name improvement\nstorms = storms.rename(columns={' date 1': 'First date'})\nstorms","f2a84b9c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\n","5d47028e":"storms['First date'].value_counts(dropna=False)","2a6cbda0":"#Atlantic map\n#using Puerto Rico as center point\nAtlantic = folium.Map(location=[18.46633000, -66.10572000],\n                   zoom_start = 3)\nAtlantic","d6779dfa":"#for all systems on their first day\nfor index, row in storms.iterrows():  \n    if row['Given Name']!=0: #to avoid an error      \n        folium.Marker([row['Lat 1'], row['long 1']], popup=row['Given Name']).add_to(Atlantic)\nAtlantic","41215d31":"Atlantic2020 = folium.Map(\n    location=[18.46633000, -66.10572000],   \n    zoom_start=3\n)","2161283f":"for x, y in storms.items():\n  print(x, y) ","bf517ae7":"A = storms[(storms['Given Name'] == 'Arthur')]\n\n# Dropping columns with NaN values \nA = A.dropna(axis=1) \n  \nA ","85e96044":"# drop columns\nArthur = A.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nArthur","5af42134":"day1=Arthur[['First date','Lat 1', 'long 1']]\nday2=Arthur[['date 2', 'Lat 2', 'long 2']]\nday3=Arthur[['date 3', 'Lat 3', 'long 3']]\nday4=Arthur[['date 4', 'Lat 4', 'long 4']]","e568bbf2":"day1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])","ffee36d0":"day1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)","285c76fd":"#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})","3e9001ab":"# append days \nArthurTrack=day1.append([day2, day3, day4]) \nArthurTrack","8f336336":"#Arthur 4-day track\nfor index, row in ArthurTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='red',\n                            popup=row['date']).add_to(Atlantic2020)         \nAtlantic2020","37b3ad2b":"#adding trajectory \n\npoints = []\nfor idx, point in ArthurTrack.iterrows():    \n        points.append((point['lat'], point['lon']))\n\nfolium.PolyLine(points, \n                color='red').add_to(Atlantic2020)\nAtlantic2020","22340e6d":"B = storms[(storms['Given Name'] == 'Bertha')]\n\n# Dropping columns with NaN values \nB = B.dropna(axis=1) \n  \nB ","70436493":"# drop columns\nBertha = B.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nBertha","350721ac":"day1=Bertha[['First date','Lat 1', 'long 1']]\nday2=Bertha[['date 2', 'Lat 2', 'long 2']]","0aceb286":"day1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])","a05a3638":"day1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)","19451eef":"#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})","83212b9b":"# append days \nBerthaTrack=day1.append([day2]) \nBerthaTrack","c67a3a30":"#Bertha 2-day track\nfor index, row in BerthaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='blue',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsB = []\nfor idx, point in BerthaTrack.iterrows():    \n        pointsB.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsB, \n                color='blue').add_to(Atlantic2020)\nAtlantic2020","dec74168":"C = storms[(storms['Given Name'] == 'Cristobal')]\n\n# Dropping columns with NaN values \nC = C.dropna(axis=1) \n\n# drop columns\nCristobal = C.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nCristobal","b8f9429d":"#Cristobal 10 day lifespan\nday1=Cristobal[['First date','Lat 1', 'long 1']]\nday2=Cristobal[['date 2', 'Lat 2', 'long 2']]\nday3=Cristobal[['date 3', 'Lat 3', 'long 3']]\nday4=Cristobal[['date 4', 'Lat 4', 'long 4']]\nday5=Cristobal[['date 5', 'Lat 5', 'long 5']]\nday6=Cristobal[['date 6', 'Lat 6', 'long 6']]\nday7=Cristobal[['date 7', 'Lat 7', 'long 7']]\nday8=Cristobal[['date 8', 'Lat 8', 'long 8']]\nday9=Cristobal[['date 9', 'Lat 9', 'long 9']]\nday10=Cristobal[['date 10', 'Lat 10', 'long 10']]\n","312b4a68":"#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])\nday9['Day 9'] = pd.to_datetime(day9['date 9'])\nday10['Day 10'] = pd.to_datetime(day10['date 10'])","2f30db4f":"day1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\nday9=day9.drop(['date 9'], axis=1)\nday10=day10.drop(['date 10'], axis=1)","c6387e2e":"day1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})\nday9 = day9.rename(columns={'Day 9': 'date', 'Lat 9': 'lat', 'long 9': 'lon'})\nday10 = day10.rename(columns={'Day 10': 'date', 'Lat 10': 'lat', 'long 10': 'lon'})","dc04f19f":"CristobalTrack=day1.append([day2, day3, day4, day5, day6, day7, day8, day9, day10]) \nCristobalTrack","0adb5ca1":"#Cristobal 10-day track\nfor index, row in CristobalTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='green',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsC = []\nfor idx, point in CristobalTrack.iterrows():    \n        pointsC.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsC, \n                color='green').add_to(Atlantic2020)\nAtlantic2020","a9840fc8":"D = storms[(storms['Given Name'] == 'Dolly')]\n\n# Dropping columns with NaN values \nD = D.dropna(axis=1) \n\n# drop columns\nDolly = D.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nDolly","fa7fc275":"day1=Dolly[['First date','Lat 1', 'long 1']]\nday2=Dolly[['date 2', 'Lat 2', 'long 2']]\nday3=Dolly[['date 3', 'Lat 3', 'long 3']]","0107cec2":"day1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])","efc906e1":"day1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)","1a9d6c07":"#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})","da835812":"# append days \nDollyTrack=day1.append([day2, day3]) \nDollyTrack","584e6a7b":"#Dolly 3-day track\nfor index, row in DollyTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='orange',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsd = []\nfor idx, point in DollyTrack.iterrows():    \n        pointsd.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsd, \n                color='orange').add_to(Atlantic2020)\nAtlantic2020","402f6f5c":"#Edouard\nE = storms[(storms['Given Name'] == 'Edouard')]\n\n# Dropping columns with NaN values \nE = E.dropna(axis=1) \n\n# drop columns\nEdouard = E.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nEdouard","52c99835":"#breaking Edouard into small dataframes (per day)\nday1=Edouard[['First date','Lat 1', 'long 1']]\nday2=Edouard[['date 2', 'Lat 2', 'long 2']]\nday3=Edouard[['date 3', 'Lat 3', 'long 3']]","3f01321d":"#transform string to datetime formay\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])","89335cd4":"#drop unnecessary columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)","bb6c79a5":"#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})","abb99ce4":"# append days dataframes into one \nEdouardTrack=day1.append([day2, day3]) \nEdouardTrack","8ef5d8fe":"#Edouard 3-day track\nfor index, row in EdouardTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='gold',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsE = []\nfor idx, point in EdouardTrack.iterrows():    \n        pointsE.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsE, \n                color='gold').add_to(Atlantic2020)\nAtlantic2020","be005d71":"#Fay\n\nF = storms[(storms['Given Name'] == 'Fay')]\n\n# Dropping columns with NaN values \nF = F.dropna(axis=1) \n\n# drop columns\nFay = F.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nFay","137d0612":"#breaking Fay into small dataframes (per day)\nday1=Fay[['First date','Lat 1', 'long 1']]\nday2=Fay[['date 2', 'Lat 2', 'long 2']]\nday3=Fay[['date 3', 'Lat 3', 'long 3']]\n\n#transform string to datetime formay\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])","12cebfa0":"#drop unnecessary columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})","6c589ce6":"# append days dataframes into one \nFayTrack=day1.append([day2, day3]) \nFayTrack","ea256f8a":"#Fay 3-day track\nfor index, row in FayTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='purple',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsF = []\nfor idx, point in FayTrack.iterrows():    \n        pointsF.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsF, \n                color='purple').add_to(Atlantic2020)\nAtlantic2020","06da3185":"#Gonzalo\nG = storms[(storms['Given Name'] == 'Gonzalo')]\n\n# Dropping columns with NaN values \nG = G.dropna(axis=1) \n\n# drop columns\nGonzalo = G.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nGonzalo","1309f0c3":"#breaking into small dataframes (per day)\nday1=Gonzalo[['First date','Lat 1', 'long 1']]\nday2=Gonzalo[['date 2', 'Lat 2', 'long 2']]\nday3=Gonzalo[['date 3', 'Lat 3', 'long 3']]\nday4=Gonzalo[['date 4', 'Lat 4', 'long 4']]\nday5=Gonzalo[['date 5', 'Lat 5', 'long 5']]\n\n#transform string to datetime format\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])","f9850110":"#drop unnecessary columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})","8bf73bdf":"# append days dataframes into one \nGonzaloTrack=day1.append([day2, day3, day4, day5]) \nGonzaloTrack","cd2c5f48":"#Adding Gonzalo's 5-day track\n\nfor index, row in GonzaloTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='cyan',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsg = []\nfor idx, point in GonzaloTrack.iterrows():    \n        pointsg.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsg, \n                color='cyan').add_to(Atlantic2020)\nAtlantic2020\n","bba7a542":"#Hanna\nH = storms[(storms['Given Name'] == 'Hanna')]\n\n# Dropping columns with NaN values \nH = H.dropna(axis=1) \n\n# drop columns\nHanna = H.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nHanna","b440f231":"#breaking into small dataframes (per day)\nday1=Hanna[['First date','Lat 1', 'long 1']]\nday2=Hanna[['date 2', 'Lat 2', 'long 2']]\nday3=Hanna[['date 3', 'Lat 3', 'long 3']]\nday4=Hanna[['date 4', 'Lat 4', 'long 4']]\nday5=Hanna[['date 5', 'Lat 5', 'long 5']]\n\n#transform string to datetime format\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])","94730a3e":"#drop unnecessary columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})","e2bd83d1":"# append days dataframes into one \nHannaTrack=day1.append([day2, day3, day4, day5]) \nHannaTrack","a407c01c":"#Adding Hanna's 5-day track\n\nfor index, row in HannaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='saddlebrown',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsH = []\nfor idx, point in HannaTrack.iterrows():    \n        pointsH.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsH, color='saddlebrown').add_to(Atlantic2020)\nAtlantic2020","eb49d98f":"#Isaias\n\ni = storms[(storms['Given Name'] == 'Isaias')]\n\n# Dropping columns with NaN values \ni = i.dropna(axis=1) \n\n# drop columns\nIsaias = i.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nIsaias","bb2ecf69":"#Isaias 9-day lifespan\nday1=Isaias[['First date','Lat 1', 'long 1']]\nday2=Isaias[['date 2', 'Lat 2', 'long 2']]\nday3=Isaias[['date 3', 'Lat 3', 'long 3']]\nday4=Isaias[['date 4', 'Lat 4', 'long 4']]\nday5=Isaias[['date 5', 'Lat 5', 'long 5']]\nday6=Isaias[['date 6', 'Lat 6', 'long 6']]\nday7=Isaias[['date 7', 'Lat 7', 'long 7']]\nday8=Isaias[['date 8', 'Lat 8', 'long 8']]\nday9=Isaias[['date 9', 'Lat 9', 'long 9']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])\nday9['Day 9'] = pd.to_datetime(day9['date 9'])\n","e7e8e0dd":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\nday9=day9.drop(['date 9'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})\nday9 = day9.rename(columns={'Day 9': 'date', 'Lat 9': 'lat', 'long 9': 'lon'})","0cf8ef6b":"# append days dataframes into one \nIsaiasTrack=day1.append([day2, day3, day4, day5, day6, day7, day8, day9]) \nIsaiasTrack","8224651a":"#Adding Isaias's 10-day track\n\nfor index, row in IsaiasTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='gray',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsI = []\nfor idx, point in IsaiasTrack.iterrows():    \n        pointsI.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsI, color='gray').add_to(Atlantic2020)\nAtlantic2020","718c0234":"#Ten\nt = storms[(storms['Given Name'] == 'Ten')]\n\n# Dropping columns with NaN values \nt = t.dropna(axis=1) \n\n# drop columns\nTen = t.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nTen","706b4e9e":"#breaking Ten into small dataframes (per day)\nday1=Ten[['First date','Lat 1', 'long 1']]\nday2=Ten[['date 2', 'Lat 2', 'long 2']]\nday3=Ten[['date 3', 'Lat 3', 'long 3']]\n\n#transform string to datetime formay\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\n","f6b5f8f4":"#drop unnecessary columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})","5c402732":"# append days dataframes into one \nTenTrack=day1.append([day2, day3]) \nTenTrack","d34023dc":"#Adding Ten 3-day track\n\nfor index, row in TenTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='pink',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsTen = []\nfor idx, point in TenTrack.iterrows():    \n        pointsTen.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsTen, color='pink').add_to(Atlantic2020)\nAtlantic2020","183bfdf8":"#Josephine\nJ = storms[(storms['Given Name'] == 'Josephine')]\n\n# Dropping columns with NaN values \nJ = J.dropna(axis=1) \n\n# drop columns\nJosephine = J.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nJosephine","6274d4a0":"#breaking into small dataframes (per day)\nday1=Josephine[['First date','Lat 1', 'long 1']]\nday2=Josephine[['date 2', 'Lat 2', 'long 2']]\nday3=Josephine[['date 3', 'Lat 3', 'long 3']]\nday4=Josephine[['date 4', 'Lat 4', 'long 4']]\nday5=Josephine[['date 5', 'Lat 5', 'long 5']]\nday6=Josephine[['date 6', 'Lat 6', 'long 6']]\n\n#transform string to datetime format\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])","0168bbdc":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})","5a1b985b":"# append days dataframes into one \nJosephineTrack=day1.append([day2, day3, day4, day5, day6]) \nJosephineTrack","821007b7":"#Adding Josephine 6-day track\n\nfor index, row in JosephineTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='tan',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsj = []\nfor idx, point in JosephineTrack.iterrows():    \n        pointsj.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsj, color='tan').add_to(Atlantic2020)\nAtlantic2020","d3b10a4f":"#Kyle\nk = storms[(storms['Given Name'] == 'Kyle')]\n\n# Dropping columns with NaN values \nk = k.dropna(axis=1) \n\n# drop columns\nKyle = k.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nKyle","09f8dae5":"#breaking Kyle into small dataframes (per day)\nday1=Kyle[['First date','Lat 1', 'long 1']]\nday2=Kyle[['date 2', 'Lat 2', 'long 2']]\nday3=Kyle[['date 3', 'Lat 3', 'long 3']]\n\n#transform string to datetime formay\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])","c9b4cfe0":"#drop unnecessary columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})","191db27d":"# append days dataframes into one \nKyleTrack=day1.append([day2, day3]) \nKyleTrack","c172607a":"#Adding Kyle 3-day track\n\nfor index, row in KyleTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='salmon',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsk = []\nfor idx, point in KyleTrack.iterrows():    \n        pointsk.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsk, color='salmon').add_to(Atlantic2020)\nAtlantic2020","a5d254ee":"#Laura\nl = storms[(storms['Given Name'] == 'Laura')]\n\n# Dropping columns with NaN values \nl = l.dropna(axis=1) \n\n# drop columns\nLaura = l.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nLaura","043a3bf7":"#Lauras 10-day lifespan\nday1=Laura[['First date','Lat 1', 'long 1']]\nday2=Laura[['date 2', 'Lat 2', 'long 2']]\nday3=Laura[['date 3', 'Lat 3', 'long 3']]\nday4=Laura[['date 4', 'Lat 4', 'long 4']]\nday5=Laura[['date 5', 'Lat 5', 'long 5']]\nday6=Laura[['date 6', 'Lat 6', 'long 6']]\nday7=Laura[['date 7', 'Lat 7', 'long 7']]\nday8=Laura[['date 8', 'Lat 8', 'long 8']]\nday9=Laura[['date 9', 'Lat 9', 'long 9']]\nday10=Laura[['date 10', 'Lat 10', 'long 10']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])\nday9['Day 9'] = pd.to_datetime(day9['date 9'])\nday10['Day 10'] = pd.to_datetime(day10['date 10'])","80e4140f":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\nday9=day9.drop(['date 9'], axis=1)\nday10=day10.drop(['date 10'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})\nday9 = day9.rename(columns={'Day 9': 'date', 'Lat 9': 'lat', 'long 9': 'lon'})\nday10 = day10.rename(columns={'Day 10': 'date', 'Lat 10': 'lat', 'long 10': 'lon'})","f33d9ddb":"# append days dataframes into one \nLauraTrack=day1.append([day2, day3, day4, day5, day6, day7, day8, day9, day10]) \nLauraTrack","f5f7868b":"#Adding Laura 10-day track\n\nfor index, row in LauraTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='mediumspringgreen',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsL = []\nfor idx, point in LauraTrack.iterrows():    \n        pointsL.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsL, color='mediumspringgreen').add_to(Atlantic2020)\nAtlantic2020","7c78f3b4":"#Marco\nm = storms[(storms['Given Name'] == 'Marco')]\n\n# Dropping columns with NaN values \nm = m.dropna(axis=1) \n\n# drop columns\nMarco = m.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nMarco","54c1de69":"#breaking into small dataframes (per day)\nday1=Marco[['First date','Lat 1', 'long 1']]\nday2=Marco[['date 2', 'Lat 2', 'long 2']]\nday3=Marco[['date 3', 'Lat 3', 'long 3']]\nday4=Marco[['date 4', 'Lat 4', 'long 4']]\nday5=Marco[['date 5', 'Lat 5', 'long 5']]\nday6=Marco[['date 6', 'Lat 6', 'long 6']]\n\n#transform string to datetime format\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])","751233d1":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})","d9a61eff":"# append days dataframes into one \nMarcoTrack=day1.append([day2, day3, day4, day5, day6]) \nMarcoTrack","c4d7bf2a":"#Adding Marco 6-day track\n\nfor index, row in MarcoTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='indigo',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsM = []\nfor idx, point in MarcoTrack.iterrows():    \n        pointsM.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsM, color='indigo').add_to(Atlantic2020)\nAtlantic2020","e917d5b4":"#Omar\no = storms[(storms['Given Name'] == 'Omar')]\n\n# Dropping columns with NaN values \no = o.dropna(axis=1) \n\n# drop columns\nOmar = o.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nOmar","bed392de":"#breaking into small dataframes (per day)\nday1=Omar[['First date','Lat 1', 'long 1']]\nday2=Omar[['date 2', 'Lat 2', 'long 2']]\nday3=Omar[['date 3', 'Lat 3', 'long 3']]\nday4=Omar[['date 4', 'Lat 4', 'long 4']]\nday5=Omar[['date 5', 'Lat 5', 'long 5']]\nday6=Omar[['date 6', 'Lat 6', 'long 6']]\n\n#transform string to datetime format\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])","972d6d33":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})","9ffacb29":"# append days dataframes into one \nOmarTrack=day1.append([day2, day3, day4, day5, day6]) \nOmarTrack","ccf65481":"#Adding Omar 6-day track\n\nfor index, row in OmarTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='goldenrod',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsO = []\nfor idx, point in OmarTrack.iterrows():    \n        pointsO.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsO, color='goldenrod').add_to(Atlantic2020)\nAtlantic2020","cd336a84":"#Nana\nn = storms[(storms['Given Name'] == 'Nana')]\n\n# Dropping columns with NaN values \nn = n.dropna(axis=1) \n\n# drop columns\nNana = n.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nNana","b36c96e0":"#breaking into small dataframes (per day)\nday1=Nana[['First date','Lat 1', 'long 1']]\nday2=Nana[['date 2', 'Lat 2', 'long 2']]\nday3=Nana[['date 3', 'Lat 3', 'long 3']]\nday4=Nana[['date 4', 'Lat 4', 'long 4']]\n\n\n#transform string to datetime format\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\n","833c1f52":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\n\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\n","0a151e8c":"# append days dataframes into one \nNanaTrack=day1.append([day2, day3, day4]) \nNanaTrack","50e94218":"#Adding Nanas 4-day track\n\nfor index, row in NanaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='black',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsn = []\nfor idx, point in NanaTrack.iterrows():    \n        pointsn.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsn, color='black').add_to(Atlantic2020)\nAtlantic2020","8f593ceb":"#Paulette\np = storms[(storms['Given Name'] == 'Paulette')]\n\n# Dropping columns with NaN values \np = p.dropna(axis=1) \n\n# drop columns\nPaulette = p.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nPaulette","928eb720":"#12-day lifespan\nday1=Paulette[['First date','Lat 1', 'long 1']]\nday2=Paulette[['date 2', 'Lat 2', 'long 2']]\nday3=Paulette[['date 3', 'Lat 3', 'long 3']]\nday4=Paulette[['date 4', 'Lat 4', 'long 4']]\nday5=Paulette[['date 5', 'Lat 5', 'long 5']]\nday6=Paulette[['date 6', 'Lat 6', 'long 6']]\nday7=Paulette[['date 7', 'Lat 7', 'long 7']]\nday8=Paulette[['date 8', 'Lat 8', 'long 8']]\nday9=Paulette[['date 9', 'Lat 9', 'long 9']]\nday10=Paulette[['date 10', 'Lat 10', 'long 10']]\nday11=Paulette[['date 11', 'Lat 11', 'long 11']]\nday12=Paulette[['date 12', 'Lat 12', 'long 12']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])\nday9['Day 9'] = pd.to_datetime(day9['date 9'])\nday10['Day 10'] = pd.to_datetime(day10['date 10'])\nday11['Day 11'] = pd.to_datetime(day11['date 11'])\nday12['Day 12'] = pd.to_datetime(day12['date 12'])","9811d179":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\nday9=day9.drop(['date 9'], axis=1)\nday10=day10.drop(['date 10'], axis=1)\nday11=day11.drop(['date 11'], axis=1)\nday12=day12.drop(['date 12'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})\nday9 = day9.rename(columns={'Day 9': 'date', 'Lat 9': 'lat', 'long 9': 'lon'})\nday10 = day10.rename(columns={'Day 10': 'date', 'Lat 10': 'lat', 'long 10': 'lon'})\nday11 = day11.rename(columns={'Day 11': 'date', 'Lat 11': 'lat', 'long 11': 'lon'})\nday12 = day12.rename(columns={'Day 12': 'date', 'Lat 12': 'lat', 'long 12': 'lon'})","c45781d0":"# append days dataframes into one \nPauletteTrack=day1.append([day2, day3, day4, day5, day6, day7, day8, \n                       day9, day10, day11, day12]) \nPauletteTrack","8031db31":"#Adding Paulette 12-day track\n\nfor index, row in PauletteTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='maroon',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsp = []\nfor idx, point in PauletteTrack.iterrows():    \n        pointsp.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsp, color='maroon').add_to(Atlantic2020)\nAtlantic2020","00ff482c":"#Rene\nr = storms[(storms['Given Name'] == 'Rene')]\n\n# Dropping columns with NaN values \nr = r.dropna(axis=1) \n\n# drop columns\nRene = r.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nRene","226e810a":"#8-day lifespan\nday1=Rene[['First date','Lat 1', 'long 1']]\nday2=Rene[['date 2', 'Lat 2', 'long 2']]\nday3=Rene[['date 3', 'Lat 3', 'long 3']]\nday4=Rene[['date 4', 'Lat 4', 'long 4']]\nday5=Rene[['date 5', 'Lat 5', 'long 5']]\nday6=Rene[['date 6', 'Lat 6', 'long 6']]\nday7=Rene[['date 7', 'Lat 7', 'long 7']]\nday8=Rene[['date 8', 'Lat 8', 'long 8']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])","c1b9c304":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})","2a6aa6e1":"# append days dataframes into one \nReneTrack=day1.append([day2, day3, day4, day5, day6, day7, day8]) \nReneTrack","f9df7231":"#Adding Rene 8-day track\n\nfor index, row in ReneTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='dodgerblue',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsr = []\nfor idx, point in ReneTrack.iterrows():    \n        pointsr.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsr, color='dodgerblue').add_to(Atlantic2020)\nAtlantic2020","fb09e47a":"#Sally\ns = storms[(storms['Given Name'] == 'Sally')]\n\n# Dropping columns with NaN values \ns = s.dropna(axis=1) \n\n# drop columns\nSally = s.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nSally","a053f52d":"#8-day lifespan\nday1=Sally[['First date','Lat 1', 'long 1']]\nday2=Sally[['date 2', 'Lat 2', 'long 2']]\nday3=Sally[['date 3', 'Lat 3', 'long 3']]\nday4=Sally[['date 4', 'Lat 4', 'long 4']]\nday5=Sally[['date 5', 'Lat 5', 'long 5']]\nday6=Sally[['date 6', 'Lat 6', 'long 6']]\nday7=Sally[['date 7', 'Lat 7', 'long 7']]\nday8=Sally[['date 8', 'Lat 8', 'long 8']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])","a2590bee":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})","f91eb97e":"# append days dataframes into one \nSallyTrack=day1.append([day2, day3, day4, day5, day6, day7, day8]) \nSallyTrack","25e0d5bd":"#Adding Sally 8-day track\n\nfor index, row in SallyTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='mediumvioletred',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsS = []\nfor idx, point in SallyTrack.iterrows():    \n        pointsS.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsS, color='mediumvioletred').add_to(Atlantic2020)\nAtlantic2020","5862dba0":"#Teddy\nted = storms[(storms['Given Name'] == 'Teddy')]\n\n# Dropping columns with NaN values \nted = ted.dropna(axis=1) \n\n# drop columns\nTeddy = ted.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nTeddy\n","b0472095":"#13-day lifespan\nday1=Teddy[['First date','Lat 1', 'long 1']]\nday2=Teddy[['date 2', 'Lat 2', 'long 2']]\nday3=Teddy[['date 3', 'Lat 3', 'long 3']]\nday4=Teddy[['date 4', 'Lat 4', 'long 4']]\nday5=Teddy[['date 5', 'Lat 5', 'long 5']]\nday6=Teddy[['date 6', 'Lat 6', 'long 6']]\nday7=Teddy[['date 7', 'Lat 7', 'long 7']]\nday8=Teddy[['date 8', 'Lat 8', 'long 8']]\nday9=Teddy[['date 9', 'Lat 9', 'long 9']]\nday10=Teddy[['date 10', 'Lat 10', 'long 10']]\nday11=Teddy[['date 11', 'Lat 11', 'long 11']]\nday12=Teddy[['date 12', 'Lat 12', 'long 12']]\nday13=Teddy[['date 13', 'Lat 13', 'long 13']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])\nday9['Day 9'] = pd.to_datetime(day9['date 9'])\nday10['Day 10'] = pd.to_datetime(day10['date 10'])\nday11['Day 11'] = pd.to_datetime(day11['date 11'])\nday12['Day 12'] = pd.to_datetime(day12['date 12'])\nday13['Day 13'] = pd.to_datetime(day13['date 13'])","601b3ea3":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\nday9=day9.drop(['date 9'], axis=1)\nday10=day10.drop(['date 10'], axis=1)\nday11=day11.drop(['date 11'], axis=1)\nday12=day12.drop(['date 12'], axis=1)\nday13=day13.drop(['date 13'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})\nday9 = day9.rename(columns={'Day 9': 'date', 'Lat 9': 'lat', 'long 9': 'lon'})\nday10 = day10.rename(columns={'Day 10': 'date', 'Lat 10': 'lat', 'long 10': 'lon'})\nday11 = day11.rename(columns={'Day 11': 'date', 'Lat 11': 'lat', 'long 11': 'lon'})\nday12 = day12.rename(columns={'Day 12': 'date', 'Lat 12': 'lat', 'long 12': 'lon'})\nday13 = day13.rename(columns={'Day 13': 'date', 'Lat 13': 'lat', 'long 13': 'lon'})","21d4e841":"# append days dataframes into one \nTeddyTrack=day1.append([day2, day3, day4, day5, day6, day7, day8, \n                       day9, day10, day11, day12, day13]) \nTeddyTrack","f3c5f93e":"#Adding Teddy's 13-day track\n\nfor index, row in TeddyTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='darkslategray',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsTed = []\nfor idx, point in TeddyTrack.iterrows():    \n        pointsTed.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsTed, color='darkslategray').add_to(Atlantic2020)\nAtlantic2020","7f7cf4a7":"#Vicky\nv = storms[(storms['Given Name'] == 'Vicky')]\n\n# Dropping columns with NaN values \nv = v.dropna(axis=1) \n\n# drop columns\nVicky = v.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nVicky","f55a4050":"#4-day lifespan\nday1=Vicky[['First date','Lat 1', 'long 1']]\nday2=Vicky[['date 2', 'Lat 2', 'long 2']]\nday3=Vicky[['date 3', 'Lat 3', 'long 3']]\nday4=Vicky[['date 4', 'Lat 4', 'long 4']]\n\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])","3f537e9e":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\n\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})","2f28ceef":"# append days dataframes into one \nVickyTrack=day1.append([day2, day3, day4]) \nVickyTrack","86e2d60b":"#Adding Vicky's 4-day track\n\nfor index, row in VickyTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='rosybrown',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsv = []\nfor idx, point in VickyTrack.iterrows():    \n        pointsv.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsv, color='rosybrown').add_to(Atlantic2020)\nAtlantic2020","2bd18db0":"#Beta\nbt = storms[(storms['Given Name'] == 'Beta')]\n\n# Dropping columns with NaN values \nbt = bt.dropna(axis=1) \n\n# drop columns\nBeta = bt.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nBeta","835faf32":"#9-day lifespan\nday1=Beta[['First date','Lat 1', 'long 1']]\nday2=Beta[['date 2', 'Lat 2', 'long 2']]\nday3=Beta[['date 3', 'Lat 3', 'long 3']]\nday4=Beta[['date 4', 'Lat 4', 'long 4']]\nday5=Beta[['date 5', 'Lat 5', 'long 5']]\nday6=Beta[['date 6', 'Lat 6', 'long 6']]\nday7=Beta[['date 7', 'Lat 7', 'long 7']]\nday8=Beta[['date 8', 'Lat 8', 'long 8']]\nday9=Beta[['date 9', 'Lat 9', 'long 9']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])\nday9['Day 9'] = pd.to_datetime(day9['date 9'])","b4d81a72":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\nday9=day9.drop(['date 9'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})\nday9 = day9.rename(columns={'Day 9': 'date', 'Lat 9': 'lat', 'long 9': 'lon'})","780a60c7":"# append days dataframes into one \nBetaTrack=day1.append([day2, day3, day4, day5, day6, day7, day8, \n                       day9]) \nBetaTrack","da87586a":"#Adding Beta's 9-day track\n\nfor index, row in BetaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='cadetblue',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsbeta = []\nfor idx, point in BetaTrack.iterrows():    \n        pointsbeta.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsbeta, color='cadetblue').add_to(Atlantic2020)\nAtlantic2020","0fb9848f":"#Wilfred\nw = storms[(storms['Given Name'] == 'Wilfred')]\n\n# Dropping columns with NaN values \nw = w.dropna(axis=1) \n\n# drop columns\nWilfred = w.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nWilfred","4a7698cb":"#breaking into small dataframes (per day)\nday1=Wilfred[['First date','Lat 1', 'long 1']]\nday2=Wilfred[['date 2', 'Lat 2', 'long 2']]\nday3=Wilfred[['date 3', 'Lat 3', 'long 3']]\nday4=Wilfred[['date 4', 'Lat 4', 'long 4']]\n\n\n#transform string to datetime format\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])","3d9f7c02":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\n\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})","af412a84":"# append days dataframes into one \nWilfredTrack=day1.append([day2, day3, day4]) \nWilfredTrack","68bfd3fb":"#Adding Wilfred 4-day track\n\nfor index, row in WilfredTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='yellow',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsw = []\nfor idx, point in WilfredTrack.iterrows():    \n        pointsw.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsw, color='yellow').add_to(Atlantic2020)\nAtlantic2020","0ba6d5c0":"#Alpha\nal = storms[(storms['Given Name'] == 'Alpha')]\n\n# Dropping columns with NaN values \nal = al.dropna(axis=1) \n\n# drop columns\nAlpha = al.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nAlpha","af34917c":"#breaking into small dataframes (per day)\nday1=Alpha[['First date','Lat 1', 'long 1']]\nday2=Alpha[['date 2', 'Lat 2', 'long 2']]\n\n#transform string to datetime format\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])","70f36be4":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})","91fa552f":"# append days dataframes into one \nAlphaTrack=day1.append([day2]) \nAlphaTrack","c7a21682":"#Adding Alpha 2-day track\n\nfor index, row in AlphaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='deeppink',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsAl = []\nfor idx, point in AlphaTrack.iterrows():    \n        pointsAl.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsAl, color='deeppink').add_to(Atlantic2020)\nAtlantic2020","4751fe73":"#gamma\ngm = storms[(storms['Given Name'] == 'Gamma')]\n\n# Dropping columns with NaN values \ngm = gm.dropna(axis=1) \n\n# drop columns\nGamma = gm.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nGamma","fe7c69e9":"#breaking into small dataframes (per day)\nday1=Gamma[['First date','Lat 1', 'long 1']]\nday2=Gamma[['date 2', 'Lat 2', 'long 2']]\nday3=Gamma[['date 3', 'Lat 3', 'long 3']]\nday4=Gamma[['date 4', 'Lat 4', 'long 4']]\nday5=Gamma[['date 5', 'Lat 5', 'long 5']]\n\n\n#transform string to datetime format\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])","b1224c84":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\n\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})","e0a74d08":"# append days dataframes into one \nGammaTrack=day1.append([day2, day3, day4, day5]) \nGammaTrack","2881c840":"#Adding Gamma's 5-day track\n\nfor index, row in GammaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='cornflowerblue',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsgm = []\nfor idx, point in GammaTrack.iterrows():    \n        pointsgm.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsgm, color='cornflowerblue').add_to(Atlantic2020)\nAtlantic2020","559de482":"#delta\ndt = storms[(storms['Given Name'] == 'Delta')]\n\n# Dropping columns with NaN values \ndt = dt.dropna(axis=1) \n\n# drop columns\nDelta = dt.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nDelta","70b58894":"\nday1=Delta[['First date','Lat 1', 'long 1']]\nday2=Delta[['date 2', 'Lat 2', 'long 2']]\nday3=Delta[['date 3', 'Lat 3', 'long 3']]\nday4=Delta[['date 4', 'Lat 4', 'long 4']]\nday5=Delta[['date 5', 'Lat 5', 'long 5']]\nday6=Delta[['date 6', 'Lat 6', 'long 6']]\nday7=Delta[['date 7', 'Lat 7', 'long 7']]\nday8=Delta[['date 8', 'Lat 8', 'long 8']]\nday9=Delta[['date 9', 'Lat 9', 'long 9']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])\nday9['Day 9'] = pd.to_datetime(day9['date 9'])","413f695e":"\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\nday9=day9.drop(['date 9'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})\nday9 = day9.rename(columns={'Day 9': 'date', 'Lat 9': 'lat', 'long 9': 'lon'})","4545a283":"\nDeltaTrack=day1.append([day2, day3, day4, day5, day6, day7, day8, day9]) \nDeltaTrack","e0a6660f":"#Adding Delta's 9-day track\n\nfor index, row in DeltaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='mediumaquamarine',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsdt = []\nfor idx, point in DeltaTrack.iterrows():    \n        pointsdt.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsdt, color='mediumaquamarine').add_to(Atlantic2020)\nAtlantic2020","88f7bfb6":"#Epsilon\nep = storms[(storms['Given Name'] == 'Epsilon')]\n\n# Dropping columns with NaN values \nep = ep.dropna(axis=1) \n\n# drop columns\nEpsilon = ep.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nEpsilon","0f1d8821":"#8-day lifespan\nday1=Epsilon[['First date','Lat 1', 'long 1']]\nday2=Epsilon[['date 2', 'Lat 2', 'long 2']]\nday3=Epsilon[['date 3', 'Lat 3', 'long 3']]\nday4=Epsilon[['date 4', 'Lat 4', 'long 4']]\nday5=Epsilon[['date 5', 'Lat 5', 'long 5']]\nday6=Epsilon[['date 6', 'Lat 6', 'long 6']]\nday7=Epsilon[['date 7', 'Lat 7', 'long 7']]\nday8=Epsilon[['date 8', 'Lat 8', 'long 8']]\n\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])","545b7ac0":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})","107461f3":"\nEpsilonTrack=day1.append([day2, day3, day4, day5, day6, day7, day8]) \nEpsilonTrack","2770378a":"#Adding track\n\nfor index, row in EpsilonTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='coral',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsEp = []\nfor idx, point in EpsilonTrack.iterrows():    \n        pointsEp.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsEp, color='coral').add_to(Atlantic2020)\nAtlantic2020","a37bd57c":"#Zeta\nz = storms[(storms['Given Name'] == 'Zeta')]\n\n# Dropping columns with NaN values \nz = z.dropna(axis=1) \n\n# drop columns\nZeta = z.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nZeta","f1ae38bb":"#6-day lifespan\nday1=Zeta[['First date','Lat 1', 'long 1']]\nday2=Zeta[['date 2', 'Lat 2', 'long 2']]\nday3=Zeta[['date 3', 'Lat 3', 'long 3']]\nday4=Zeta[['date 4', 'Lat 4', 'long 4']]\nday5=Zeta[['date 5', 'Lat 5', 'long 5']]\nday6=Zeta[['date 6', 'Lat 6', 'long 6']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])","e14f4592":"#drop columns\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})","b49ec899":"ZetaTrack=day1.append([day2, day3, day4, day5, day6]) \nZetaTrack","5663772a":"#Adding track\n\nfor index, row in ZetaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='blueviolet',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsz = []\nfor idx, point in ZetaTrack.iterrows():    \n        pointsz.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsz, color='blueviolet').add_to(Atlantic2020)\nAtlantic2020","afa04c4f":"#Eta\net = storms[(storms['Given Name'] == 'Eta')]\n\n# Dropping columns with NaN values \net = et.dropna(axis=1) \n\n# drop columns\nEta = et.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nEta","085cb98f":"\nday1=Eta[['First date','Lat 1', 'long 1']]\nday2=Eta[['date 2', 'Lat 2', 'long 2']]\nday3=Eta[['date 3', 'Lat 3', 'long 3']]\nday4=Eta[['date 4', 'Lat 4', 'long 4']]\nday5=Eta[['date 5', 'Lat 5', 'long 5']]\nday6=Eta[['date 6', 'Lat 6', 'long 6']]\nday7=Eta[['date 7', 'Lat 7', 'long 7']]\nday8=Eta[['date 8', 'Lat 8', 'long 8']]\nday9=Eta[['date 9', 'Lat 9', 'long 9']]\nday10=Eta[['date 10', 'Lat 10', 'long 10']]\nday11=Eta[['date 11', 'Lat 11', 'long 11']]\nday12=Eta[['date 12', 'Lat 12', 'long 12']]\nday13=Eta[['date 13', 'Lat 13', 'long 13']]\nday14=Eta[['date 14', 'Lat 14', 'long 14']]\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\nday7['Day 7'] = pd.to_datetime(day7['date 7'])\nday8['Day 8'] = pd.to_datetime(day8['date 8'])\nday9['Day 9'] = pd.to_datetime(day9['date 9'])\nday10['Day 10'] = pd.to_datetime(day10['date 10'])\nday11['Day 11'] = pd.to_datetime(day11['date 11'])\nday12['Day 12'] = pd.to_datetime(day12['date 12'])\nday13['Day 13'] = pd.to_datetime(day13['date 13'])\nday14['Day 14'] = pd.to_datetime(day14['date 14'])","36422965":"\nday1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\nday7=day7.drop(['date 7'], axis=1)\nday8=day8.drop(['date 8'], axis=1)\nday9=day9.drop(['date 9'], axis=1)\nday10=day10.drop(['date 10'], axis=1)\nday11=day11.drop(['date 11'], axis=1)\nday12=day12.drop(['date 12'], axis=1)\nday13=day13.drop(['date 13'], axis=1)\nday14=day14.drop(['date 14'], axis=1)\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})\nday7 = day7.rename(columns={'Day 7': 'date', 'Lat 7': 'lat', 'long 7': 'lon'})\nday8 = day8.rename(columns={'Day 8': 'date', 'Lat 8': 'lat', 'long 8': 'lon'})\nday9 = day9.rename(columns={'Day 9': 'date', 'Lat 9': 'lat', 'long 9': 'lon'})\nday10 = day10.rename(columns={'Day 10': 'date', 'Lat 10': 'lat', 'long 10': 'lon'})\nday11 = day11.rename(columns={'Day 11': 'date', 'Lat 11': 'lat', 'long 11': 'lon'})\nday12 = day12.rename(columns={'Day 12': 'date', 'Lat 12': 'lat', 'long 12': 'lon'})\nday13 = day13.rename(columns={'Day 13': 'date', 'Lat 13': 'lat', 'long 13': 'lon'})\nday14 = day14.rename(columns={'Day 14': 'date', 'Lat 14': 'lat', 'long 14': 'lon'})","6a130ee2":"EtaTrack=day1.append([day2, day3, day4, day5, day6, day7, \n                      day8, day9, day10, day11, day12, day13,day14]) \nEtaTrack","abac8587":"\n\nfor index, row in EtaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='darkkhaki',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointset = []\nfor idx, point in EtaTrack.iterrows():    \n        pointset.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointset, color='darkkhaki').add_to(Atlantic2020)\nAtlantic2020","c0317e02":"#Theta\nth = storms[(storms['Given Name'] == 'Theta')]\n\n# Dropping columns with NaN values \nth = th.dropna(axis=1) \n\n# drop columns\nTheta = th.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nTheta","58c115eb":"\nday1=Theta[['First date','Lat 1', 'long 1']]\nday2=Theta[['date 2', 'Lat 2', 'long 2']]\nday3=Theta[['date 3', 'Lat 3', 'long 3']]\nday4=Theta[['date 4', 'Lat 4', 'long 4']]\nday5=Theta[['date 5', 'Lat 5', 'long 5']]\nday6=Theta[['date 6', 'Lat 6', 'long 6']]\n\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])\n","ebb818e9":"day1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\n\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})","5db0654d":"ThetaTrack=day1.append([day2, day3, day4, day5, day6]) \nThetaTrack","edff8f8b":"for index, row in ThetaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='forestgreen',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsTh = []\nfor idx, point in ThetaTrack.iterrows():    \n        pointsTh.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsTh, color='forestgreen').add_to(Atlantic2020)\nAtlantic2020","2229bad5":"#Iota\nio = storms[(storms['Given Name'] == 'Iota')]\n\n# Dropping columns with NaN values \nio = io.dropna(axis=1) \n\n# drop columns\nIota = io.drop(['Given Name','Dates', 'Category','Mx sustained winds(Mx gusts)'], axis=1)\nIota","0d3e900f":"day1=Iota[['First date','Lat 1', 'long 1']]\nday2=Iota[['date 2', 'Lat 2', 'long 2']]\nday3=Iota[['date 3', 'Lat 3', 'long 3']]\nday4=Iota[['date 4', 'Lat 4', 'long 4']]\nday5=Iota[['date 5', 'Lat 5', 'long 5']]\nday6=Iota[['date 6', 'Lat 6', 'long 6']]\n\n\n#coverting string to datetime\nday1['Day 1'] = pd.to_datetime(day1['First date'])\nday2['Day 2'] = pd.to_datetime(day2['date 2'])\nday3['Day 3'] = pd.to_datetime(day3['date 3'])\nday4['Day 4'] = pd.to_datetime(day4['date 4'])\nday5['Day 5'] = pd.to_datetime(day5['date 5'])\nday6['Day 6'] = pd.to_datetime(day6['date 6'])","ca29d31b":"day1=day1.drop(['First date'], axis=1)\nday2=day2.drop(['date 2'], axis=1)\nday3=day3.drop(['date 3'], axis=1)\nday4=day4.drop(['date 4'], axis=1)\nday5=day5.drop(['date 5'], axis=1)\nday6=day6.drop(['date 6'], axis=1)\n\n\n#rename columns\nday1 = day1.rename(columns={'Day 1': 'date', 'Lat 1': 'lat', 'long 1': 'lon'})\nday2 = day2.rename(columns={'Day 2': 'date', 'Lat 2': 'lat', 'long 2': 'lon'})\nday3 = day3.rename(columns={'Day 3': 'date', 'Lat 3': 'lat', 'long 3': 'lon'})\nday4 = day4.rename(columns={'Day 4': 'date', 'Lat 4': 'lat', 'long 4': 'lon'})\nday5 = day5.rename(columns={'Day 5': 'date', 'Lat 5': 'lat', 'long 5': 'lon'})\nday6 = day6.rename(columns={'Day 6': 'date', 'Lat 6': 'lat', 'long 6': 'lon'})","93ba5496":"IotaTrack=day1.append([day2, day3, day4, day5, day6]) \nIotaTrack","70e608a0":"for index, row in IotaTrack.iterrows():\n        folium.CircleMarker([row['lat'], row['lon']],\n                            radius=3, color='silver',\n                            popup=row['date']).add_to(Atlantic2020)         \n#adding trajectory \n\npointsIo = []\nfor idx, point in IotaTrack.iterrows():    \n        pointsIo.append((point['lat'], point['lon']))\n\nfolium.PolyLine(pointsIo, color='silver').add_to(Atlantic2020)\nAtlantic2020","87964d02":"**2020 Atlantic cyclones**   \nBy: Myrna M Figueroa Lopez   \n\nPurpose:   \n1. Show simple steps to create storm track visualization.\n2. Display 2020 Atlantic cyclonic 2020 season.\n\nData:    \nThe data came from publicly available links (Wikipedia and WeatherUSA). I limit to basic location information, per day, of the storms listed here. There were other smaller systems than the ones described here. There is more historic data available that is not included here.   \n"}}