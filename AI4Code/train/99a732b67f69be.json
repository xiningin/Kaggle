{"cell_type":{"e1e0d4af":"code","f42e5d53":"code","6f580d70":"code","f3257cae":"code","5b97c35d":"code","c5eabfe6":"code","bc6b9b50":"code","b8a06ce7":"code","a3f339a0":"markdown"},"source":{"e1e0d4af":"# libraries\nimport matplotlib.pyplot as plt\nimport squarify    # pip install squarify (algorithm for treemap)\n \n# Change color\nsquarify.plot(sizes=[50,22,5, 15, 25], label=[\"Numpy\", \"Panda\", \"PyTorch\", \"Matplotlib\", \"Jupyter\"], alpha=.4 )\nplt.axis('off')\nplt.title('Python')\nplt.show()\n","f42e5d53":"plt.savefig('treeplot.png')","6f580d70":"import matplotlib.pyplot as plt\nfrom matplotlib import cm\n\nlabels = [\"English\", \"French\", \"German\"]\ndata = [95, 100, 40]\n#number of data points\nn = len(data)\n#find max value for full ring\nm=100\n#radius of donut chart\nr = 1.5\n#calculate width of each ring\nw = r \/ n \n\n#create colors along a chosen colormap\ncolors = [cm.terrain(i \/ n) for i in range(n)]\n\n#create figure, axis\nfig, ax = plt.subplots()\nax.axis(\"equal\")\n\n#create rings of donut chart\nfor i in range(n):\n    #hide labels in segments with textprops: alpha = 0 - transparent, alpha = 1 - visible\n    innerring, _ = ax.pie([m - data[i], data[i]], radius = r - i * w, startangle = 90, labels = [\"\", labels[i]], labeldistance = 1 - 1 \/ (1.5 * (n - i)), textprops = {\"alpha\": 0}, colors = [\"white\", colors[i]])\n    plt.setp(innerring, width = w, edgecolor = \"white\")\n\nplt.legend()\nplt.show()","f3257cae":"plt.savefig('radial_languages.svg')","5b97c35d":"import plotly.express as px\nfig = px.treemap(\n    names = [\"Python\",\"SQL\", \"C\", \"GIT\", \"Numpy\", \"Panda\", \"Pytorch\", \"Matplotlib\"],\n    parents = [\"\", \"\", \"\", \"\", \"Python\", \"Python\", \"Python\", \"Python\"]\n)\nfig.show()","c5eabfe6":"import plotly.express as px\nimport pandas as pd\nlibraries = [\"Numpy\", \"Matplotlib\", \"Panda\", \"Pytorch\", \"Jupyter\", None, None, None]\nlanguages = [\"Python\", \"Python\", \"Python\", \"Python\", \"Python\",\"SQL\", \"C\", \"GIT\"]\nscores = [4, 4, 5, 7, 2, 2, 2, 2]\ndf = pd.DataFrame(\n    dict(libraries=libraries, languages=languages, scores=scores)\n)\n#df[\"all\"] = \"all\" # in order to have a single root node\nprint(df)\nfig = px.treemap(df, path=['languages', 'libraries'], values='scores')\nfig.show()","bc6b9b50":"conda install -c plotly plotly-orca","b8a06ce7":"fig.write_image(\"prog_lang_treemap.svg\")","a3f339a0":"Those are some code I used to draw figures and export them as SVG before using them as models in Affinity Designer to aggrement my resume."}}