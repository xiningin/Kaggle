{"cell_type":{"56cf3850":"code","1fcace58":"code","5021ce67":"code","1bdcde13":"code","47dbca8a":"code","6a4442a1":"code","d1600336":"code","f869202f":"code","a73a65c0":"code","6f3e1381":"code","c8a15e43":"code","769e7582":"code","6ff88e30":"code","e14c7c37":"code","1189e620":"code","7d2d8b8d":"code","099d07ec":"code","466b5f5b":"code","770a9ef9":"code","4b7f0b8e":"code","08b9415d":"code","63457669":"code","70ef6110":"code","818d67ca":"code","dd45bb33":"code","65e7aeab":"code","905ecd09":"code","93a66ef7":"code","132e4604":"code","99be904a":"code","7ac51296":"code","dffbe8fa":"code","b02a4361":"code","aa7a5706":"code","8732d738":"code","74589fa1":"code","bf92062b":"code","11e5030b":"code","0ca9c865":"code","1f5c34ef":"code","9f0e8bd7":"code","7bf92bb4":"code","de2ca687":"markdown","3c609da7":"markdown","8b57b30d":"markdown","2c2cbc44":"markdown","980515de":"markdown","379d4b9f":"markdown","2f91a5d3":"markdown","b18f27cb":"markdown","c7fb7f08":"markdown","0bbb69a0":"markdown","d3d381b1":"markdown","9a3bb142":"markdown","2bbecb98":"markdown","967828a1":"markdown","229e82cc":"markdown","a19398e0":"markdown","6c87e103":"markdown","169fbaeb":"markdown","6c55ed74":"markdown","f8e1e5ce":"markdown","c52fbf01":"markdown","f23ed01e":"markdown","1b10a413":"markdown","bb6a5405":"markdown","a168f946":"markdown","0d4881b1":"markdown","fac86b1f":"markdown","7313647c":"markdown","e53e52fe":"markdown","3080541d":"markdown","57865f52":"markdown","10c59ed6":"markdown","7a4de767":"markdown","7f1cb54d":"markdown","7aededf9":"markdown","f320780b":"markdown","8d9f86ea":"markdown"},"source":{"56cf3850":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","1fcace58":"mnist = pd.read_csv('..\/input\/mnist-in-csv\/mnist_train.csv')","5021ce67":"X = mnist.drop('label',axis =1)\nY = mnist[['label']]\nprint(X.shape)\nprint(Y.shape)","1bdcde13":"some_digit = X.iloc[1996]\nsome_digit_img  = some_digit.values.reshape(28,28)","47dbca8a":"plt.imshow(some_digit_img,cmap=plt.cm.binary)\nplt.axis('off')\nplt.show()","6a4442a1":"def plot_digit(digit):\n    img = digit.values.reshape(28,28)\n    plt.imshow(img,cmap = plt.cm.binary) #cmap = plt.cm.binary [to plot the img in black adn white]\n    plt.axis('off')\n    plt.show()","d1600336":"plot_digit(X.iloc[6000])","f869202f":"#function to divide the data into test and train data set\ndef split_train_test(data,ratio):\n    np.random.seed(32) #start the randomness from 32\n    suffled_idx = np.random.permutation(len(data))\n    test_set_size = int(len(data)*ratio)\n    test_idx = suffled_idx[:test_set_size]\n    train_idx = suffled_idx[test_set_size:]\n    \n    return data.iloc[train_idx],data.iloc[test_idx]","a73a65c0":"train_set, test_set = split_train_test(mnist,.02)\n\nprint('train',len(train_set))\nprint('test',len(test_set))","6f3e1381":"test_set = pd.read_csv('..\/input\/mnist-in-csv\/mnist_test.csv')\ntrain_set = pd.read_csv('..\/input\/mnist-in-csv\/mnist_train.csv')","c8a15e43":"X_train = train_set.drop('label',axis=1)\nY_train = train_set[['label']]\n\nprint(X_train.shape)\nprint(Y_train.shape)","769e7582":" from sklearn.model_selection import train_test_split\n\ntrain_set,test_set = train_test_split(mnist,test_size=0.2,random_state=29)","6ff88e30":"X_train = train_set.drop('label',axis=1)\nY_train =  train_set[['label']]\n\nX_test = train_set.drop('label',axis=1)\nY_test = test_set[['label']]","e14c7c37":"#to ingore the warnings\nimport warnings\nwarnings.filterwarnings('ignore')","1189e620":"#classfied whether the digit is 2 or not\nY_train_2 = (Y_train == 2)\nY_test_2 = (Y_test ==2)","7d2d8b8d":"from sklearn.linear_model import SGDClassifier \n\nsgd_clf = SGDClassifier(random_state=17)\nsgd_clf.fit(X_train,Y_train_2)","099d07ec":"plot_digit(some_digit)","466b5f5b":"sgd_clf.predict([some_digit])","770a9ef9":"from sklearn.model_selection import cross_val_score\ncross_val_score(sgd_clf,X_train,Y_train_2,scoring ='accuracy',cv =4)","4b7f0b8e":"#calculatiog confudtion matrix \nfrom sklearn.model_selection import cross_val_predict\nY_train_pred = cross_val_predict(sgd_clf,X_train,Y_train_2,cv=3)\n\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(Y_train_2,Y_train_pred)","08b9415d":"from sklearn.metrics import precision_score\n\nprecision_score(Y_train_2,Y_train_pred)","63457669":"from sklearn.metrics import recall_score\nrecall_score(Y_train_2,Y_train_pred)","70ef6110":"from sklearn.metrics import f1_score\nf1_score(Y_train_2,Y_train_pred)","818d67ca":"#Y_scores = cross_val_predict(sgd_clf,X_train,Y_train_2,cv =3,method='decision_function')\n","dd45bb33":"from sklearn.metrics import precision_recall_curve\n\nprecisions,recalls,thresholds = precision_recall_curve(Y_train_2,Y_scores)","65e7aeab":"def plot_precision_vs_recall(precisions,recalls):\n    plt.plot(recalls,precisions,'b--')\n    plt.xlabel('recall',fontsize=14)\n    plt.ylabel('recision',fontsize=14)\n    plt.axis([0,1,0,1])\n    ","905ecd09":"#plt.figure(figsize=(8,6))\n#plot_precision_vs_recall(precisions,recalls)\n#plt.show()","93a66ef7":"sgd_clf.fit(X_train,Y_train)","132e4604":"sgd_clf.predict([some_digit])","99be904a":"plot_digit(some_digit)","7ac51296":"some_digit_scores = sgd_clf.decision_function([some_digit])\nsome_digit_scores\n","dffbe8fa":"Y_train_6 = (Y_train > 6)\nY_train_even = (Y_train % 2 == 0)\nY_multilable = np.c_[Y_train_6,Y_train_even]","b02a4361":"from sklearn.neighbors import KNeighborsClassifier\nknn_clf = KNeighborsClassifier()\nknn_clf.fit(X_train,Y_multilable)","aa7a5706":"knn_clf.predict([some_digit])","8732d738":"from sklearn.ensemble import RandomForestClassifier\n\nrf_clf = RandomForestClassifier()\nrf_clf.fit(X_train,Y_train)","74589fa1":"Y_test_pred = rf_clf.predict(X_test)\nY_test_pred","bf92062b":"result = pd.DataFrame(Y_test_pred).reset_index()","11e5030b":"result.head()","0ca9c865":"result.columns = ['ImageId','Label']\nresult.head()","1f5c34ef":"result['ImageId'] = result['ImageId'].apply(lambda x : x+1)\n","9f0e8bd7":"result.head()","7bf92bb4":"result.to_csv(\"submission.csv\",index=False)","de2ca687":"## KNN classifier","3c609da7":"## Recall","8b57b30d":"### precision =~ accuracy\n\n$$precision = \\frac{TP}{TP + FP}$$\n   ","2c2cbc44":"#### imports","980515de":"### Printing some digit","379d4b9f":"## submission in Kaggle","2f91a5d3":"#### cross validation by sklearn","b18f27cb":"The following classifier would redict whether the digit is greater  than 6 and is even","c7fb7f08":"## F1 Score","0bbb69a0":"## Precision","d3d381b1":"accuracy is more than 90% for each cross validation","9a3bb142":"to take reults from ImageId = 1","2bbecb98":"###  As we have test and train csv we will use them","967828a1":"General Idea of confusion matrix is to count no. of times instance of class A are classified as class B","229e82cc":"# MNIST ","a19398e0":"** imp : your classifier should have high precision and high recall **","6c87e103":"\n\n    |42452(TN) | 779 (FP)|\n\n    |1173(FN)  | 3596(TP)|\n\n","169fbaeb":"### dividing the data into train and test data set","6c55ed74":"#### Note : Accuracy can't used as performace measure for any classifier","f8e1e5ce":"## Precision - Recall tradeoff","c52fbf01":"so  some digitis not eqaul to 2","f23ed01e":"## Running SGD classifier for multiclass classifier","1b10a413":"## Multi level classification","bb6a5405":"#### Spliting the data using the sklearn","a168f946":"we can see from above only 5 is positive rest all are negative(fetch the max value among the array)","0d4881b1":"#### everytime you achieve more precision, you lose some recall and vice versa","fac86b1f":"$$Recall = \\frac{TP}{TP + FN}$$","7313647c":"load data","e53e52fe":"# Binary Clasifier","3080541d":"split the data","57865f52":"** Harmonic mean of precision and recall **\n$$F1 = 2X\\frac{prescision  X  recall}{precision + recall}$$\n\n$$F1 = \\frac{TP}{TP + \\frac{FN + FP}{2}}$$","10c59ed6":"### function to plot the image of digits","7a4de767":"## Confusion Matrix","7f1cb54d":"#### to know how it's predict","7aededf9":"varifying","f320780b":"##### random sampling\n> from sklearn.model_selection import train_test_split\n\n>train_set,test_set = train_test_split(mnist,test_size=0.2,random_state=29)","8d9f86ea":"#### stratified samling\n\n> from sklearn.model_selection import StratifiedShuffleSplit\n\n>for train_idx,test_idx in split.split(mnist,mnist['label]):\n\n>start_train_set =data.loc[train_idx]\n\n> start_test_set = data.loc[test_idx]"}}