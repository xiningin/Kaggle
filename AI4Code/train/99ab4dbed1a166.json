{"cell_type":{"c398629d":"code","714e3317":"code","8bd5455f":"code","52133335":"code","f0b46e21":"code","48b545ad":"code","65d94505":"code","635e287c":"code","cf1fa61e":"code","d9a12438":"code","f6b32a83":"code","1ddf369d":"code","f0f6c28b":"code","eb3d7f65":"code","d1c9de87":"code","5a806e4d":"code","53a5f608":"code","1c537fee":"code","50208ae3":"code","57eedb05":"code","e0314f9d":"code","8559ea3d":"code","a3c873dd":"code","fbad5a50":"code","429bc246":"code","347a8f11":"code","b4bab04c":"code","7a3ea489":"code","4871a383":"code","1de9dc71":"code","2272a3ad":"code","a971b6bc":"markdown","27e58b0a":"markdown","9485a00a":"markdown","2b36be4c":"markdown","4f0955b9":"markdown"},"source":{"c398629d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","714e3317":"df=pd.read_csv(\"..\/input\/neolen-house-price-prediction\/train.csv\",index_col=\"Id\")\nX_test=pd.read_csv(\"..\/input\/neolen-house-price-prediction\/test.csv\",index_col=\"Id\")\ndf","8bd5455f":"df.describe()","52133335":"df.columns","f0b46e21":"y = df.SalePrice\nX = df.drop(columns=['SalePrice'], axis=1)\ny","48b545ad":"X","65d94505":"X.isnull().sum()","635e287c":"for col in X.columns:\n    print(col, df[col].dtype)","cf1fa61e":"X_test","d9a12438":"for col in X_test.columns:\n    print(col, df[col].dtype)","f6b32a83":"X_num = X.select_dtypes(exclude=['object'])\nX_num","1ddf369d":"X_test_num = X_test.select_dtypes(exclude=['object'])\nX_test_num","f0f6c28b":"X_num.shape","eb3d7f65":"X_test_num.shape","d1c9de87":"X_num.isnull().sum()","5a806e4d":"X_test_num.isnull().sum()","53a5f608":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(strategy='most_frequent')\nX_imputed = pd.DataFrame(imputer.fit_transform(X_num))\nX_imputed.columns = X_num.columns\n\nX_test_imputed = pd.DataFrame(imputer.transform(X_test_num))\nX_test_imputed.columns = X_test_num.columns","1c537fee":"X_imputed","50208ae3":"X_imputed.isnull().sum()","57eedb05":"X_test_imputed","e0314f9d":"parameters = {\n    'n_estimators': list(range(100, 1001, 100)), \n    'learning_rate': [x \/ 100 for x in range(5, 100, 10)], \n    'max_depth': list(range(6, 90, 10))\n}\nparameters","8559ea3d":"from sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBRegressor\ngsearch = GridSearchCV(XGBRegressor(random_state=1),\n                       param_grid = parameters, \n                       scoring='neg_mean_absolute_error',\n                       n_jobs=4,cv=5, verbose=1)","a3c873dd":"gsearch.fit(X_imputed, y)","fbad5a50":"best_n_estimators = gsearch.best_params_.get('n_estimators')\nbest_n_estimators","429bc246":"best_learning_rate = gsearch.best_params_.get('learning_rate')\nbest_learning_rate","347a8f11":"best_max_depth = gsearch.best_params_.get('max_depth')\nbest_max_depth","b4bab04c":"final_model = XGBRegressor(n_estimators=best_n_estimators, random_state=1,\n                          learning_rate=best_learning_rate, \n                          max_depth=best_max_depth)","7a3ea489":"final_model.fit(X_imputed, y)","4871a383":"preds_test = final_model.predict(X_test_imputed)","1de9dc71":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput","2272a3ad":"output.to_csv('submission.csv', index=False)\nprint('done!')","a971b6bc":"missing value","27e58b0a":"# Read Data","9485a00a":"Find numerical and categorical columns","2b36be4c":"define X,y","4f0955b9":"# Impution"}}