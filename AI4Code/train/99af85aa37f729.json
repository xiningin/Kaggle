{"cell_type":{"29c6a4f7":"code","209b445d":"code","155e0f18":"code","35c506bb":"code","922cec46":"code","7eeb0d7d":"code","454968a9":"code","25399cdf":"code","573a2f8e":"code","03a0103f":"code","7e84317f":"code","33fb7f13":"code","78a48f7b":"code","f9b7aa91":"code","8df345a2":"code","d9464d19":"code","0b23824f":"code","f547c67a":"code","cc3b3d55":"code","e9bae4cf":"markdown","6ed97ef6":"markdown","82813bd0":"markdown","840cb7bc":"markdown","95ee966d":"markdown","dd13b388":"markdown"},"source":{"29c6a4f7":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom xgboost import XGBRegressor\n\nimport warnings \n\nwarnings.filterwarnings('ignore')","209b445d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","155e0f18":"train_data=pd.read_csv('\/kaggle\/input\/30-days-of-ml\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/30-days-of-ml\/test.csv')","35c506bb":"train_data.shape,test_data.shape","922cec46":"train_data.head()","7eeb0d7d":"train_data.info()","454968a9":"test_data.info()","25399cdf":"train_data.describe()","573a2f8e":"test_data.describe()","03a0103f":"train_data=train_data.drop(columns='id')","7e84317f":"for col in train_data.select_dtypes(object).columns:\n  train_unique=train_data[col].unique()\n  test_unique=test_data[col].unique()\n\n  print(f'Unique values in column {col} are same in both trainset and testset :{len(train_unique) == len(test_unique)}')","33fb7f13":"encoder = OrdinalEncoder()\n\nfor col in train_data.select_dtypes(object).columns:\n    train_data[col] = encoder.fit_transform(np.array(train_data[col]).reshape(-1, 1))\n    test_data[col] = encoder.transform(np.array(test_data[col]).reshape(-1, 1))","78a48f7b":"def RMSE(y_pred,y_test):\n  return np.sqrt(mean_squared_error(y_pred,y_test))","f9b7aa91":"#KFold\nkf = KFold(shuffle=True, random_state=72018, n_splits=3)","8df345a2":"#Split the data and display sample indexes\nX=train_data.drop(columns='target')\ny=train_data['target']\n\nfor train_index, test_index in kf.split(X):\n    print(\"Train index:\", train_index[:10], len(train_index))\n    print(\"Test index:\",test_index[:10], len(test_index))\n    print('')","d9464d19":"scores = []\n\nfor num ,(train_index, test_index) in enumerate(kf.split(X)):\n    X_train, X_test, y_train, y_test = (X.iloc[train_index, :], \n                                        X.iloc[test_index, :], \n                                        y[train_index], \n                                        y[test_index])\n    #XGB Model\n    model = XGBRegressor(random_state=2312, \n                      n_jobs=4,\n                      n_estimators= 5000,\n                      learning_rate= 0.01,\n                      subsample= 0.9,\n                      max_depth= 5,\n                      colsample_bytree= 0.5,\n                      reg_alpha = 30,eval_metric='rmse')\n    \n    #fitting the model for particular fold\n    model.fit(X_train,y_train)\n    y_pred = model.predict(X_test)\n\n    #get score for each fold\n    score = RMSE(y_test.values, y_pred)\n    \n    #printing score\n    print(f'RMSE for Fold {num}: {score}')\n    scores.append(score)\n    \nscores","0b23824f":"scores","f547c67a":"prediction_data=test_data.drop(columns='id')\npredictions=model.predict(prediction_data)","cc3b3d55":"submission=pd.DataFrame({'id':test_data['id'],'target':predictions})\nsubmission.to_csv('submission.csv',index=False)\nsubmission","e9bae4cf":"## Load Data","6ed97ef6":"### Encode","82813bd0":"### Checking unique values in both sets","840cb7bc":"### Thank you, Please upvote if you found this notebook helpful!","95ee966d":"### Modeling","dd13b388":"## Submission"}}