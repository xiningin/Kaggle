{"cell_type":{"7d5ba108":"code","4e290e00":"code","2ae2892a":"code","f090e8d8":"code","28b5be94":"code","a89f74c0":"code","536145e7":"code","eb2dce18":"code","ecd463b0":"code","085b198d":"code","d469bb36":"code","044395bb":"code","7d303fc1":"code","aa9d41e0":"code","185a5688":"code","82f188de":"code","8a894ae1":"code","08451e11":"code","565c7cd9":"code","bec0dc3f":"code","4720ac98":"code","855297cb":"code","bdeca386":"code","96c5ebb5":"code","0b0cf942":"code","fb18dd9c":"code","4f96d255":"code","6d10ae14":"code","0ef2de5b":"code","adbe2473":"code","898fe214":"code","9975f489":"code","4b7e3a90":"code","069dd21e":"markdown","1ce8fb74":"markdown","adb59985":"markdown","92e7d6ea":"markdown","2324ea09":"markdown","9b03ec1a":"markdown","c516003b":"markdown","90cf9639":"markdown","1a96df9a":"markdown","8bc70895":"markdown","00873b17":"markdown","eff550dc":"markdown","9a96dc97":"markdown","26528a70":"markdown","166b4cb1":"markdown","5df1fe39":"markdown","3ea8609d":"markdown"},"source":{"7d5ba108":"import numpy as np\nimport pandas as pd # for data processing-read\n%matplotlib inline\nimport seaborn as sns # for visualization\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot as plt\nimport matplotlib.colors as mcolors","4e290e00":"prop2016 = pd.read_csv (\"..\/input\/2016prop.csv\", low_memory = False)\nprop2017 = pd.read_csv (\"..\/input\/2017prop.csv\", low_memory = False)\ntrans2016 = pd.read_csv (\"..\/input\/train_2016_v2.csv\", low_memory=False)\ntrans2017 = pd.read_csv (\"..\/input\/train_2017.csv\", low_memory=False)\npd.set_option('display.max_columns', None)","2ae2892a":"prop2016.head()","f090e8d8":"clean2016 = prop2016[['parcelid', 'calculatedfinishedsquarefeet', 'landtaxvaluedollarcnt', 'propertyzoningdesc', 'regionidcounty', 'regionidzip', 'structuretaxvaluedollarcnt', 'taxamount', 'taxvaluedollarcnt', 'yearbuilt']].copy()","28b5be94":"clean2016.head()","a89f74c0":"prop2017.tail()","536145e7":"prop2016.index = prop2016['parcelid']\ndel prop2016['parcelid']","eb2dce18":"prop2016.head()","ecd463b0":"prop2017.index = prop2017['parcelid']\ndel prop2017['parcelid']","085b198d":"prop2017.head()","d469bb36":"#https:\/\/stackoverflow.com\/questions\/13413590\/how-to-drop-rows-of-pandas-dataframe-whose-value-in-a-certain-column-is-nan\nprop2016.dropna(subset = ['propertyzoningdesc'], inplace = True)\nprop2016.dropna(subset = ['taxamount'], inplace = True)\nprop2016.dropna(subset = ['landtaxvaluedollarcnt'], inplace = True)\nprop2016.dropna(subset = ['taxvaluedollarcnt'], inplace = True)\nprop2016.dropna(subset = ['structuretaxvaluedollarcnt'], inplace = True)\nprop2016.dropna(subset = ['yearbuilt'], inplace = True)\nprop2016.dropna(subset = ['regionidcounty'], inplace = True)\nprop2016.dropna(subset = ['regionidzip'], inplace = True)\nprop2016.dropna(subset = ['calculatedfinishedsquarefeet'], inplace = True)\n#taxamount, landtaxvaluedollarcnt, taxvaluedollarcnt,structuretaxvaluedollarcnt, yearbuilt,regioncounty,regionzip,propertytype, calculatedfinishedsquarefeet\n#bool_series=pd.notnull(prop2016[\"propertyzoningdesc\"])\n#prop2016=prop2016[bool_series]","044395bb":"prop2016.head()","7d303fc1":"prop2017.dropna(subset = ['propertyzoningdesc'], inplace = True)","aa9d41e0":"prop2016.isnull().mean()","185a5688":"prop2017.isnull().mean()","82f188de":"#https:\/\/www.listendata.com\/2019\/06\/pandas-drop-columns-from-dataframe.html\ncols = prop2016.columns[prop2016.isnull().mean() > 0.7]\nprop2016.drop(cols, axis=1, inplace = True)","8a894ae1":"cols = prop2017.columns[prop2017.isnull().mean() > 0.7]\nprop2017.drop(cols, axis=1, inplace = True)","08451e11":"prop2016.head()","565c7cd9":"prop2017.head()","bec0dc3f":"#https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.mean.html\nprop2016.isnull().mean(axis=1)","4720ac98":"prop2016.dropna(thresh=prop2016.shape[1]-3, axis=0, inplace = True)","855297cb":"prop2016.isnull().mean(axis=1)","bdeca386":"rows = prop2016[prop2016.isnull().mean(axis=1) > 0.7]\nprop2016.drop(rows, axis=0, inplace = True)","96c5ebb5":"prop2016.head()","0b0cf942":"#https:\/\/www.geeksforgeeks.org\/adding-new-column-to-existing-dataframe-in-pandas\/\nclean2016['propertytype'] = 'NR'\n#https:\/\/stackoverflow.com\/questions\/36701689\/assign-value-to-a-pandas-dataframe-column-based-on-string-condition\/36701728#36701728\n#https:\/\/stackoverflow.com\/questions\/28311655\/ignoring-nans-with-str-contains\nclean2016.loc[prop2016['propertyzoningdesc'].str.contains('r', na=False, case=False), 'propertytype'] = 'R'","fb18dd9c":"prop2016.head(100)","4f96d255":"#https:\/\/www.geeksforgeeks.org\/adding-new-column-to-existing-dataframe-in-pandas\/\nprop2017['propertytype'] = 'NR'\n#https:\/\/stackoverflow.com\/questions\/36701689\/assign-value-to-a-pandas-dataframe-column-based-on-string-condition\/36701728#36701728\n#https:\/\/stackoverflow.com\/questions\/28311655\/ignoring-nans-with-str-contains\nprop2017.loc[prop2017['propertyzoningdesc'].str.contains('r', na=False, case=False), 'propertytype'] = 'R'\n","6d10ae14":"#https:\/\/thispointer.com\/pandas-count-rows-in-a-dataframe-all-or-those-only-that-satisfy-a-condition\/\nTotalNumOfRows = len(clean2016.index)\nseriesObj = clean2016.apply(lambda x: True if x['propertytype'] == 'R' else False, axis=1)\nnumOfRows = len(seriesObj[seriesObj == True].index)\nprint('Number of Residential Properties: ', numOfRows)\nprint (\"Number of Non-Residential Properties: \", TotalNumOfRows - numOfRows)","0ef2de5b":"plt.pie\nprop2016.propertytype.value_counts().plot(kind='pie', autopct='%1.0f%%')\nplt.axis('equal')\nplt.title('Residential (R) and NonResidential (NR)')","adbe2473":"first2016=prop2016.merge(trans2016, on = 'parcelid', how='outer')","898fe214":"total2016.head(100)","9975f489":"#https:\/\/thispointer.com\/pandas-count-rows-in-a-dataframe-all-or-those-only-that-satisfy-a-condition\/\nTotalNumOfRows = len(prop2016.index)\nseriesObj = prop2016.apply(lambda x: True if x['propertytype'] == 'R' else False, axis=1)\nnumOfRows = len(seriesObj[seriesObj == True].index)\nprint('Number of Residential Properties: ', numOfRows)\nprint (\"Number of Non-Residential Properties: \", TotalNumOfRows - numOfRows)","4b7e3a90":"total2016.ax = plt.subplots(figsize=(18,18)) #correlation map\nhmcols = total2016.taxamount, total2016.landtaxvaluedollarcnt, total2016.taxvaluedollarcnt, total2016.structuretaxvaluedollarcnt, total2016.yearbuilt,total2016.regionidcounty, total2016.regionidzip, total2016.propertytype, total2016.calculatedfinishedsquarefeet, total2016.logerror\nsns.heatmap(hmcols, annot=True, linewidths=5, ax=None, na=False)\nplt.show()","069dd21e":"## Ryan Ramsey,","1ce8fb74":"### Adding new column for Property Type, and setting values based on propertyzoningdesc.","adb59985":"## First notebook created to explore Zillow data... abandoned.","92e7d6ea":"### Examining columns to see percentage of NULL values","2324ea09":"### Import modules","9b03ec1a":"### Dropping NaN value rows from propertyzoningdesc column","c516003b":"## Examining rows to see percentage of NULL values.","90cf9639":"### Validating columns have been dropped.","1a96df9a":"# Group 9 - Was Zillow better at predicting Non-Residential or Residential sales?","8bc70895":"## Displaying percentages of Residential\/Non-Residential properties in a pie chart","00873b17":"### Validating parcelid index","eff550dc":"### Counting number of Residential and Non-Residential Properties","9a96dc97":"### Read in Datasets","26528a70":"### Initial look at data","166b4cb1":"### Dropping columns that have 70% or more of empty values.","5df1fe39":"### Changing index to Parcel Id, and removing parcelid column","3ea8609d":"## Dropping rows with more than 70% empty values."}}