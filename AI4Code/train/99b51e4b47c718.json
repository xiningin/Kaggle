{"cell_type":{"896661b5":"code","bb2a39cf":"code","07119db2":"code","a964e56c":"code","a6461d46":"code","398fd965":"code","3fda90d0":"code","60b6d8be":"code","227ecdb9":"code","9cf2c80f":"code","3cc55b27":"code","c84dfa56":"code","197b526b":"code","2036c397":"code","f78458dc":"code","e6765320":"code","c85997f3":"code","8236d10a":"code","914fa229":"code","c569a7b8":"code","c280e84c":"code","a6ef9742":"code","6d129884":"code","6cb9645f":"code","dc5bc06f":"code","3fc03cc1":"code","a2a684e9":"code","17be6ff0":"code","9757af1b":"code","7d03188a":"code","a6b72dec":"code","906bbe5d":"code","2a21f9d6":"code","a8900d9e":"code","b02030c1":"code","816be8bf":"code","56f5d52c":"code","5d42d2f4":"code","ba1c87b7":"code","a6ead34f":"code","b879cc49":"markdown","741c54f2":"markdown","e0549560":"markdown","3a503caf":"markdown","9481893a":"markdown","c24bbe55":"markdown"},"source":{"896661b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb2a39cf":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport sklearn.linear_model\nimport plotly.graph_objects as go\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\nimport seaborn as sns\nfrom scipy import stats","07119db2":"# Load the data\nHousing_train =  pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nHousing_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","a964e56c":"print(Housing_train.shape)\nprint(Housing_test.shape)","a6461d46":"Housing_train.columns","398fd965":"Housing_train.head","3fda90d0":"Housing_train.describe","60b6d8be":"Housing_train.info","227ecdb9":"figure = plt.figure(figsize = (13,5))\nsns.distplot(Housing_train.SalePrice, color = \"tab:red\")\nplt.show()","9cf2c80f":"figure = plt.figure(figsize = (13,5))\nplt.subplot(1,2,1)\nstats.probplot(Housing_train.SalePrice, plot = plt)\nplt.title(\"Actual SalePrice\")\nplt.subplot(1,2,2)\nHousing_train.SalePrice = np.log(Housing_train.SalePrice)\nstats.probplot(Housing_train.SalePrice, plot = plt)\nplt.title(\"SalePrice after log transformation\")\nplt.show()","3cc55b27":"Housing_train.head(5)","c84dfa56":"print(Housing_train.shape)\nprint(Housing_test.shape)","197b526b":"missing = Housing_train.isna().sum()\nmissing = missing[missing>0]\nprint(missing)","2036c397":"missing_percent = missing\/Housing_train.shape[0]*100\nna = pd.DataFrame([missing, missing_percent], index = ['missing_num','missing_percent']).T\nna = na.sort_values(by = 'missing_percent', ascending = False)\nprint(na)","f78458dc":"drop_columns = [\"PoolQC\",\"MiscFeature\",\"Alley\", \"Fence\",\"FireplaceQu\", \"GarageType\", \"GarageYrBlt\", \"GarageFinish\", \"BsmtExposure\",\"BsmtFinType2\",\n        \"BsmtFinType1\",\"MasVnrType\"]\nHousing_train.drop(drop_columns, axis = 1, inplace = True)\n\n\nHousing_train.drop(Housing_train[Housing_train.Electrical.isna()].index, axis = 0, inplace = True)\nNA = ['GarageQual', 'GarageCond', 'BsmtCond', 'BsmtQual']\nfor na in NA:\n    Housing_train[na].fillna('NA', inplace = True)\n\nHousing_train['MasVnrArea'].fillna(0, inplace = True)\nHousing_train['LotFrontage'].fillna(0, inplace = True)\n\nprint(Housing_train.shape)","e6765320":"# Correlation\nHousing_train_corr = Housing_train.corr()\nHousing_train_corr","c85997f3":"Housing_train_corr.style.background_gradient(cmap=\"Blues\", axis=None)","8236d10a":"Housing_train_corr[\"SalePrice\"].sort_values(ascending=False)","914fa229":"# SalePrice has corr greater than 0.50 with OverallQual GrLivArea\nHousing_train_corr[['SalePrice','OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','YearBuilt','YearRemodAdd','TotRmsAbvGrd']].style.background_gradient(cmap='Blues', axis=None)","c569a7b8":"plt.figure(figsize = (13,5))\nplt.subplot(1,2,1)\nplt.scatter(Housing_train.OverallQual, Housing_train.SalePrice)\nplt.xlabel('OverallQual')\nplt.ylabel('Sale Price')\nplt.subplot(1,2,2)\nplt.scatter(Housing_train.GrLivArea, Housing_train.SalePrice)\nplt.xlabel('Grnd Living Area') \nplt.ylabel('Sale Price')\nplt.show()","c280e84c":"Housing_train = Housing_train.loc[~(Housing_train.GrLivArea >4000)]\nplt.figure(figsize = (13,5))\nplt.scatter(Housing_train.GrLivArea, Housing_train.SalePrice)\nplt.xlabel('Grnd Living Area') \nplt.ylabel('Sale Price')\nplt.show()","a6ef9742":"var = [\"GarageCars\",\"GarageArea\",\"TotalBsmtSF\",\"1stFlrSF\",\"FullBath\",\"TotRmsAbvGrd\",\"YearBuilt\",\"YearRemodAdd\"]\nplt.figure(figsize = (13,5))\nsns.pairplot(x_vars = var, y_vars = \"SalePrice\", data = Housing_train)\nplt.show()","6d129884":"features = [\"OverallQual\", \"GrLivArea\"]\nfor feat in features:\n Housing_train[feat+'_p2'] = Housing_train[feat] **2\n Housing_train[feat+'_p3'] = Housing_train[feat] **3","6cb9645f":"#Categorical Data Cleaning\nmp = {'Ex': 5, 'Gd':4, 'TA':3, 'Fa':2, 'Po':1, 'NA':0}\nfor feat in ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond','HeatingQC', 'KitchenQual','GarageQual', 'GarageCond' ]:\n Housing_train[feat] = Housing_train[feat].map(mp) \nmp = {'N':0, 'Y':2 , 'P':1}\nfor feat in ['CentralAir', 'PavedDrive']:\n    Housing_train[feat] = Housing_train[feat].map(mp)\nmp = {'Typ':8, 'Min1':7, 'Min2':6, 'Mod':5, 'Maj1':4, 'Maj2':3, 'Sev':2, 'Sal':1}\nHousing_train['Functional'] = Housing_train['Functional'].map(mp)\nmp = {'Gtl':1 ,'Mod':2 , 'Sev':3}\nHousing_train['LandSlope'] = Housing_train['LandSlope'].map(mp)","dc5bc06f":"Housing_train[\"TotBath\"] = Housing_train[\"BsmtFullBath\"]+Housing_train[\"FullBath\"]+.5*(Housing_train.BsmtHalfBath+Housing_train.HalfBath)\nHousing_train[\"Overall_Score\"] = Housing_train.OverallQual*Housing_train.OverallCond\nHousing_train[\"Total_area\"] = Housing_train[\"1stFlrSF\"]+Housing_train[\"2ndFlrSF\"]+Housing_train.TotalBsmtSF\nHousing_train[\"Garage_Score\"] = Housing_train.GarageQual*Housing_train.GarageCond\nHousing_train[\"Kitchen_Score\"] = Housing_train.KitchenAbvGr*Housing_train.KitchenQual\nHousing_train[\"Bsmt_Score\"] = Housing_train.BsmtQual*Housing_train.BsmtCond","3fc03cc1":"Housing_train = pd.get_dummies(Housing_train)\nHousing_train.head()\nHousing_train.shape","a2a684e9":"train_x = Housing_train.drop('SalePrice', axis = 1)\ntrain_y = pd.DataFrame(Housing_train.SalePrice)\nindex = train_x.columns","17be6ff0":"#Doing the same Attributes for the test data\nTest_drop = ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'GarageType', 'GarageYrBlt', 'GarageFinish','BsmtExposure', 'BsmtFinType2', 'BsmtFinType1','MasVnrType']\nHousing_test.drop(Test_drop, axis = True, inplace = True)","9757af1b":"Housing_test.drop(Housing_test[Housing_test.Electrical.isna()].index, axis = 0, inplace = True)\nNA = [ 'GarageQual', 'GarageCond', 'BsmtCond', 'BsmtQual']\nfor na in NA:\n    Housing_test[na].fillna('NA', inplace = True)","7d03188a":"fill_zero = ['GarageCars', 'GarageArea']\nfor zeros in fill_zero:\n    Housing_test[zeros].fillna(0, inplace = True)\nHousing_test['MasVnrArea'].fillna(0, inplace = True)\nHousing_test['LotFrontage'].fillna(0, inplace = True)","a6b72dec":"Housing_test['Electrical'].fillna('SBrkr', inplace = True)\nHousing_test.MSZoning.fillna('RL', inplace = True)\nHousing_test.Utilities.fillna('AllPub', inplace = True)\nHousing_test.Functional.fillna('Typ', inplace = True)\nHousing_test.Exterior1st.fillna('VinylSd', inplace = True)\nHousing_test.Exterior2nd.fillna('VinylSd', inplace = True)\nHousing_test.KitchenQual.fillna('TA', inplace = True)\nHousing_test.SaleType.fillna('WD', inplace = True)\nHousing_test.BsmtFinSF1.fillna(0.0, inplace = True)\nHousing_test.BsmtFinSF2.fillna(0.0, inplace = True)\nHousing_test.BsmtUnfSF.fillna(0.0, inplace = True)\nHousing_test.TotalBsmtSF.fillna(0.0, inplace = True)\nHousing_test.BsmtFullBath.fillna(0.0, inplace = True)\nHousing_test.BsmtHalfBath.fillna(0.0, inplace = True)","906bbe5d":"features = ['OverallQual', 'GrLivArea']\nfor feat in features:\n    Housing_test[feat+'_p2'] = Housing_test[feat] **2\n    Housing_test[feat+'_p3'] = Housing_test[feat] **3","2a21f9d6":"mp = {'Ex': 5, 'Gd':4, 'TA':3, 'Fa':2, 'Po':1, 'NA':0}\nfor feat in ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', 'KitchenQual', 'GarageQual', 'GarageCond']:\n    Housing_test[feat] = Housing_test[feat].map(mp) \nmp = {'N':0, 'Y':2 , 'P':1}\nfor feat in ['CentralAir', 'PavedDrive']:\n    Housing_test[feat] = Housing_test[feat].map(mp)\nmp = {'Typ':8, 'Min1':7, 'Min2':6, 'Mod':5, 'Maj1':4, 'Maj2':3, 'Sev':2, 'Sal':1}\nHousing_test['Functional'] = Housing_test['Functional'].map(mp)\nmp = {'Gtl':1 ,'Mod':2 , 'Sev':3}\n\nHousing_test['LandSlope'] = Housing_test['LandSlope'].map(mp)\n","a8900d9e":"Housing_test['TotBath'] = Housing_test['BsmtFullBath'] + Housing_test['FullBath'] + 0.5*(Housing_test.BsmtHalfBath + Housing_test.HalfBath)\nHousing_test['Overall_Score'] = Housing_test.OverallQual*Housing_test.OverallCond\nHousing_test['Total_area'] = Housing_test['1stFlrSF']+Housing_test['2ndFlrSF']+Housing_test.TotalBsmtSF\nHousing_test['Garage_Score'] = Housing_test.GarageQual*Housing_test.GarageCond\nHousing_test['Kitchen_Score'] = Housing_test.KitchenAbvGr*Housing_test.KitchenQual\nHousing_test['Bsmt_Score'] = Housing_test.BsmtQual*Housing_test.BsmtCond","b02030c1":"Housing_test = pd.get_dummies(Housing_test)","816be8bf":"testcol = Housing_test.columns.tolist()\ntraincol = train_x.columns.tolist()\ndiff = list(set(traincol).difference(testcol))\nlast_cols = train_x[diff]\ntrain_x.drop(diff, axis =1, inplace = True)\nindex = Housing_test.columns\nprint(index)","56f5d52c":"print(Housing_test[\"Id\"])","5d42d2f4":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\n","ba1c87b7":"# Linear Regression Model\nlr = LinearRegression()\nlr.fit(train_x, train_y)\ny_pred_lr = lr.predict(Housing_test)\nprint(y_pred_lr)\n\nprint(y_pred_lr.shape)\nprint(Housing_test.shape)","a6ead34f":"sub = pd.DataFrame()\nsub['Id'] = Housing_test['Id'].astype(int)\nsub['SalePrice'] = y_pred_lr\nsub.to_csv('submission.csv',index=False)","b879cc49":"# Exploratory Data Analysis","741c54f2":"# Test Data","e0549560":"# Apply a Model","3a503caf":"## Check the distribution of the Dependent Variable","9481893a":"# Correlation","c24bbe55":"# Feature Engineering"}}