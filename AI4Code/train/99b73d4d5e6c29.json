{"cell_type":{"9303a2ab":"code","5df6b29c":"code","2a985ce8":"code","05fc59d1":"code","cb7412d7":"code","ba7dcb52":"code","2dfa2ee0":"code","e898e395":"code","850854f1":"code","c78c9594":"code","e7141e9f":"markdown","944ef6d0":"markdown","e5fdc73c":"markdown","c4158bbb":"markdown","5c6b0da5":"markdown","35bad58c":"markdown","e2f3e6d4":"markdown"},"source":{"9303a2ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5df6b29c":"datf = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")\ndatf.head()\n","2a985ce8":"datf.info()","05fc59d1":"datf2 = datf.loc[0:25,[\"ID\",\"Name\",\"Age\",\"Photo\",\"Nationality\",\"Flag\",\"Overall\",\"Potential\",\"Value\",\"Finishing\",\"SprintSpeed\"]]\ndata = datf2.drop([\"ID\",\"Photo\"],axis = 1)\ndata.head()","cb7412d7":"corr_dat = data.corr()\nf, ax = plt.subplots(figsize=(12, 10))\nsns.heatmap(corr_dat,annot=True)\nplt.show()","ba7dcb52":"\nptdata = data.sort_values(\"Age\", axis = 0)\nptdata.plot(kind = 'bar',x='Name',y='SprintSpeed',figsize=(12, 10))\nplt.xlabel(\"Age\")\nplt.ylabel(\"Sprint Speed\")\n\nplt.show()\n\n\n\n\n","2dfa2ee0":"ptdata.plot(kind ='scatter',x='Overall',y ='Value',color ='g',alpha = 1,figsize=(10, 8))\nplt.show()","e898e395":"plt.subplot(2,1,1)\nptdata.Age.plot(kind = \"hist\",bins = 26, color =\"b\",figsize=(12, 10))\nplt.xlabel(\"Age\")\n\n\n\n\nplt.subplot(2,1,2)\nsns.countplot(ptdata['Nationality'],palette = 'bone')\nplt.title(\"Nationality Analysis\",fontsize = 12)\n\n\nplt.show()\n\nSpanishPlayers = ptdata[ptdata.Nationality == \"Spain\"]\nprint(SpanishPlayers.loc[:,[\"Name\",\"Nationality\"]])","850854f1":"avgAge = ptdata.Age.mean()\nmvp = ptdata[ptdata.Overall == ptdata.Overall.max()]\nprint(\"Average Age  :\",avgAge)\nprint(\"MVP:\\n\",mvp.loc[:,[\"Name\",\"Overall\"]])\nwonderboys = ptdata[ptdata.Age < ptdata.Age.mean()]\nwonderboy = wonderboys[wonderboys.Potential == wonderboys.Potential.max()]\nprint(\"\\nWonderboys:\\n\",wonderboys.loc[:,[\"Name\",\"Overall\",\"Potential\"]])\nprint(\"\\nWonderboy:\\n\",wonderboy.loc[:,[\"Name\",\"Overall\",\"Potential\"]])\n\nmylist = ptdata[\"Value\"]\n\ntemp = 0\n\nfor each in mylist:\n    if len(each) >= 5:\n        maxi = float(each[1:4])\n        if maxi > temp:\n            temp = maxi\n            \n            \n\n\n","c78c9594":"dicto = mvp.loc[:,[\"Name\",\"Overall\",\"Value\"]].to_dict()\nfor key,value in dicto.items():\n    print(key,\" : \",value)\nprint(\" \")\n\n","e7141e9f":"**In this graphic We'll have information about Overall-Value relation**","944ef6d0":"**First we need to create our data frame and review it**","e5fdc73c":"**This graphic provides us information about players' speed**","c4158bbb":"**As it can be seen we have 88 columns.It's too much data to analyze for now.I'll filter some of these data**","5c6b0da5":"**Now,we have filtered data for visualization.Let's start**","35bad58c":"**After all these visualization.We will make some manipulation on data** ","e2f3e6d4":"**FIFA 2019 PLAYERS DATA ANALYSIS**\nI have to say that I'm a rookie at Data Science.If I made a mistake please,make a comment"}}