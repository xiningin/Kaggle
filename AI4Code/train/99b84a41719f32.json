{"cell_type":{"03304d2c":"code","eb268791":"code","f4774c1f":"code","75fba03e":"code","e1785006":"code","50ab38f4":"code","93cc2939":"code","ec0a5db5":"code","c42f1b8e":"code","b6bab81e":"code","f9b4f58e":"code","ee4d0aa4":"code","da8f3c0e":"code","9b17cd53":"code","ada34d3a":"code","5527418e":"code","c9673612":"code","38e4beb3":"code","eb6b0b75":"code","6c2f98ec":"code","fb891af6":"code","b345f9ef":"code","3ed79fb3":"code","3eaad32d":"code","bbe972d1":"code","e83eb948":"code","427af2f8":"code","3512fd20":"code","3f554ba3":"code","dfc7c7dc":"code","9060f009":"code","5c1d8753":"code","16d2b17a":"code","57b5b92d":"code","24167c3b":"code","14d64aaa":"code","7c87b76b":"code","547dc487":"code","c1147fd8":"code","d7741335":"code","b5a4027a":"code","ab279cd4":"code","288d24ba":"code","6f0c142b":"code","5d39e13e":"code","85184e2e":"code","ade0ea18":"code","03e9b3a2":"code","055e0bfe":"code","36b578cb":"markdown","6020bd57":"markdown","6f04b06e":"markdown","c4fec3e3":"markdown","1c8d1cbe":"markdown","21782f2f":"markdown","f7037561":"markdown","3ba96363":"markdown","7b29c28a":"markdown","79ac1668":"markdown"},"source":{"03304d2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eb268791":"epicurious = pd.read_csv(\"..\/input\/epirecipes\/epi_r.csv\")","f4774c1f":"epicurious.head(2)","75fba03e":"epicurious.info(5)","e1785006":"epicurious.describe().T","50ab38f4":"epicurious = epicurious[epicurious['calories'] < 10000].dropna()","93cc2939":"sns.set(style=\"darkgrid\")\ng = sns.regplot(x=\"calories\", y=\"dessert\", data=epicurious, fit_reg=False)\ng.figure.set_size_inches(5, 5)\n\n","ec0a5db5":"epicurious = epicurious[:][:500]      # lets take limit for speed regression calculating","c42f1b8e":"# \"title\" feature we dont need and lets drop it\nepicurious.drop(\"title\", inplace = True, axis=1)\n\ny = epicurious.dessert.values\nX = epicurious.drop([\"dessert\"], axis = 1)","b6bab81e":"# see how many null values we have then we dont need to normalize\n\nepicurious['dessert'].isnull().sum()","f9b4f58e":"loj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X,y)\nloj_model","ee4d0aa4":"loj_model.intercept_      # constant value\nloj_model.coef_           # independent values","da8f3c0e":"y_pred = loj_model.predict(X)        # predict\nconfusion_matrix(y, y_pred)          # confussion matrix","9b17cd53":"accuracy_score(y, y_pred)","ada34d3a":"print(classification_report(y, y_pred))","5527418e":"# Model predict\nloj_model.predict(X)[0:20]","c9673612":"loj_model.predict_proba(X)[0:10][:,0:2]","38e4beb3":"# Now lets try model 'predict_proba' probability\n\ny_probs = loj_model.predict_proba(X)\ny_probs = y_probs[:,1]\ny_probs[0:20]","eb6b0b75":"# giving limit for values\n\ny_pred = [1 if i > 0.5 else 0 for i in y_probs]","6c2f98ec":"# and compare with above you can see what happened\ny_pred[0:20]","fb891af6":"confusion_matrix(y, y_pred)","b345f9ef":"accuracy_score(y, y_pred)","3ed79fb3":"print(classification_report(y, y_pred))","3eaad32d":"logit_roc_auc = roc_auc_score(y, loj_model.predict(X))\n\nfpr, tpr, thresholds = roc_curve(y, loj_model.predict_proba(X)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='AUC (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.show()\n\n# blue line: which we set our model\n# red line: if we dont do it what can we take result","bbe972d1":"# lets split test train set\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size = 0.30, \n                                                    random_state = 42)","e83eb948":"# set model\n\nloj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X_train,y_train)\nloj_model","427af2f8":"accuracy_score(y_test, loj_model.predict(X_test))","3512fd20":"# with cross validation \n\ncross_val_score(loj_model, X_test, y_test, cv = 10).mean()","3f554ba3":"nb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","dfc7c7dc":"nb_model.predict(X_test)[0:20]","9060f009":"nb_model.predict_proba(X_test)[0:10]","5c1d8753":"# predict\ny_pred = nb_model.predict(X_test)\naccuracy_score(y_test, y_pred)","16d2b17a":"cross_val_score(nb_model, X_test, y_test, cv = 10).mean()","57b5b92d":"knn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\nknn_model","24167c3b":"y_pred = knn_model.predict(X_test)\naccuracy_score(y_test, y_pred)","14d64aaa":"# get detail print\n\nprint(classification_report(y_test, y_pred))","7c87b76b":"# find KNN parameters\nknn_params = {\"n_neighbors\": np.arange(1,50)}","547dc487":"# fit model classification & CV\n\nknn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn, knn_params, cv=10)\nknn_cv.fit(X_train, y_train)","c1147fd8":"# this is only observation\n\nprint(\"Best score:\" + str(knn_cv.best_score_))\nprint(\"Best parameters: \" + str(knn_cv.best_params_))","d7741335":"knn = KNeighborsClassifier(4)\nknn_tuned = knn.fit(X_train, y_train)\nknn_tuned.score(X_test, y_test)","b5a4027a":"y_pred = knn_tuned.predict(X_test)\naccuracy_score(y_test, y_pred)","ab279cd4":"rf_model = RandomForestClassifier().fit(X_train, y_train)\nrf_model","288d24ba":"y_pred = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred)","6f0c142b":"rf_params = {\"max_depth\": [2,5,8,10],\n            \"max_features\": [2,5,8],\n            \"n_estimators\": [10,500,1000],\n            \"min_samples_split\": [2,5,10]}","5d39e13e":"rf_model = RandomForestClassifier()\n\nrf_cv_model = GridSearchCV(rf_model, \n                           rf_params, \n                           cv = 10, \n                           n_jobs = -1, \n                           verbose = 2) ","85184e2e":"rf_cv_model.fit(X_train, y_train)","ade0ea18":"print(\"Best Parameters: \" + str(rf_cv_model.best_params_))","03e9b3a2":"# using given parameters then create final model\n\nrf_tuned = RandomForestClassifier(max_depth = 8, \n                                  max_features = 8, \n                                  min_samples_split = 5,\n                                  n_estimators = 10)\n\nrf_tuned.fit(X_train, y_train)","055e0bfe":"# tunned test model predict accuracy score\n\ny_pred = rf_tuned.predict(X_test)\naccuracy_score(y_test, y_pred)","36b578cb":"# 3.Gaussian Naive Bayes","6020bd57":"# 2.Logistic Regression\n## 2.1.Set Model","6f04b06e":"## 4.2.Model Tunning","c4fec3e3":"# 4.KNN\n## 4.1.Predict & Model","1c8d1cbe":"# 1.EDA (Exploratory Data Analysis)","21782f2f":"\n**Cleaning Data**\n\nLet's limit the dataframe to have only recipes which are less than 10,000 calories. We also will clean the data by dropping rows which have null values.\n","f7037561":"## Model Tuning","3ba96363":"# 5.Random Forest","7b29c28a":"## Predict & Model Tuning","79ac1668":"# Logistic regression (predicting a categorical value, often with two categories):\n\n**Question:**\n- Epicurious - Recipes with Rating and Nutrition: Can you predict whether a recipe was part of #cakeweek based on whether it its other features?"}}