{"cell_type":{"bb60fceb":"code","344ee306":"code","2a2c749f":"code","dcbfda96":"code","97d0c6d1":"code","da0d1e61":"code","890d0cdd":"code","dc8839a7":"code","c9193dde":"code","cee3a2c3":"code","3d5f7498":"code","b2d42efa":"code","35251dbb":"code","12929319":"code","8b745b25":"code","3b05fd18":"code","5b82ae23":"code","1896fb7e":"code","56842968":"code","08c800a7":"code","923d1a4b":"code","d4aebbb4":"code","485977e5":"code","c9549255":"code","5b3a2621":"code","de223df7":"code","604f640c":"code","67781a6a":"code","b5a99348":"code","814701a9":"code","a0aa47d3":"code","58339d05":"code","7d5632c7":"code","f5fd2fad":"code","8bb3de0a":"code","be68b95e":"code","9e42d584":"code","63f79787":"code","55131597":"code","4dbb1837":"code","09239092":"code","c3d0912b":"code","3777a464":"code","c741cfe8":"code","0c942379":"code","26714f93":"code","4165d8a0":"code","83547720":"code","6cdd7b84":"code","75f027eb":"code","53f3d669":"code","6f6643b0":"code","15e4aee4":"code","33fa3d96":"code","5df2cefa":"code","2733be30":"code","34a423d2":"code","06067886":"code","f1c3f579":"code","9003c4e1":"code","55a10e16":"code","f86cfbf9":"code","9558c33c":"code","646a932c":"code","59367be9":"code","78f7bf2b":"code","b23c014d":"code","74097bad":"code","6958e536":"code","22fe39aa":"code","1ca84099":"code","3f72f65c":"code","0909c4e6":"code","4e372c43":"code","445e793a":"code","83a3ccfb":"code","8f5db5f7":"code","ad461d42":"code","d7ae7937":"code","88b47b90":"code","46932dee":"code","bd958098":"code","aabd540c":"code","d1451026":"code","e7490e70":"code","a3a56838":"code","a7145548":"code","66579587":"code","e8c1031b":"code","c416526d":"code","4b5647fc":"code","9512f58b":"code","8b20e4f6":"code","4030c865":"code","204d4722":"code","de3583f7":"code","8902c632":"code","85511b8d":"code","ea4a9ff1":"markdown","d6f9cebd":"markdown","722daa30":"markdown","61c03015":"markdown","d490534b":"markdown","ce580214":"markdown","6f7b079b":"markdown","cd92eea0":"markdown","bd5b1b0d":"markdown","e9a5a3e5":"markdown","79cedda5":"markdown","985c8924":"markdown","662c37e7":"markdown"},"source":{"bb60fceb":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","344ee306":"# Importing required libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline\n\nfrom sklearn.feature_selection import RFE\nfrom sklearn.decomposition import PCA, IncrementalPCA\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn import tree\nfrom xgboost import XGBRegressor\nimport plotly.express as px\nimport graphviz","2a2c749f":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows',None)","dcbfda96":"tr = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntr.head()","97d0c6d1":"tr.shape","da0d1e61":"tr.describe()","890d0cdd":"tr.info()","dc8839a7":"tr_null_pc = tr.isnull().sum()\/len(tr)*100\ntr_null_pc = tr_null_pc[tr_null_pc>0]\ntr_null_pc","c9193dde":"# drop irrelevant variable\ntr = tr.drop(columns=['Id'])","cee3a2c3":"tr = tr.dropna(subset=['Electrical','GarageYrBlt'])","3d5f7498":"# here NA is No Fireplace\ntr.FireplaceQu = tr.FireplaceQu.fillna('No Fireplace')\n\n# here NA is No alley access \ntr.Alley = tr.Alley.fillna('No alley access')\n\n# here NA is No pool\ntr.PoolQC = tr.PoolQC.fillna('No Pool')\n\n# here NA is No fence\ntr.Fence = tr.Fence.fillna('No Fence')\n\n\ntr.MasVnrType = tr.MasVnrType.fillna('None')\n\n\ntr.MiscFeature = tr.MiscFeature.fillna('None')\n\n# here NA is No garage\ntr.GarageQual = tr.GarageQual.fillna('No Garage')\n\n\ntr.GarageFinish = tr.GarageFinish.fillna('No Garage')\n\n\ntr.BsmtQual = tr.BsmtQual.fillna('No Basement')\n\n\ntr.BsmtExposure = tr.BsmtExposure.fillna('No Basement')\n\n\ntr.BsmtCond = tr.BsmtCond.fillna('No Basement')\n\n\ntr.BsmtFinType1 = tr.BsmtFinType1.fillna('No Basement')\n\n\ntr.BsmtFinType2 = tr.BsmtFinType2.fillna('No Basement')","b2d42efa":"# Changing years from float to integer for better readability of graph\ntr.GarageYrBlt = tr.GarageYrBlt.astype('int')\n\n# Plot\nplt.figure(figsize=[20,7])\nsns.countplot(tr.GarageYrBlt)\nplt.title('Counts Of Garages Built In Different Years', fontsize=20)\nplt.xticks(rotation=90)\nplt.xlabel('Years', fontsize=12)\nplt.ylabel('Count', fontsize=12)\nplt.show()","35251dbb":"\nplt.figure(figsize=[15,7])\nsns.distplot(tr.MasVnrArea, color='g')\nplt.title('Masonry veneer area in square feet', fontsize=15)\nplt.xlabel('Size in Square Feet', fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.show()","12929319":"\nplt.figure(figsize=[15,7])\nsns.distplot(tr.LotFrontage, color='r')\nplt.title('Linear feet of street connected to property', fontsize=15)\nplt.xlabel('Size in Linear feet', fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.show()","8b745b25":"tr_null_pc = tr.isnull().sum()\/len(tr)*100\ntr_null_pc = tr_null_pc[tr_null_pc>0]\ntr_null_pc\n\n# Will do mathemetical imputations after train test split below","3b05fd18":"te = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nte.head()","5b82ae23":"te.shape","1896fb7e":"te_null_pc = te.isnull().sum()\nte_null_pc[te_null_pc>0]","56842968":"\nte_bsmt = te.filter(regex='Bsmt')\nte_bsmt_num = te_bsmt.select_dtypes(exclude='object')\nte_bsmt_cat = te_bsmt.select_dtypes(include='object')\n\n#te.loc[te.TotalBsmtSF == 0.0, te_bsmt_cat] = 'No Basement'\n\nte[te_bsmt_cat.columns] = te[te_bsmt_cat.columns].fillna('No Basement')\nte[te_bsmt_num.columns] = te[te_bsmt_num.columns].fillna(0)","08c800a7":"\nte_gar = te.filter(regex='Garage')\nte_gar_num = te_gar.select_dtypes(exclude='object')\nte_gar_cat = te_gar.select_dtypes(include='object')\n\nte[te_gar_cat.columns] = te[te_gar_cat.columns].fillna('No Garage')\nte[te_gar_num.columns] = te[te_gar_num.columns].fillna(0)","923d1a4b":"# here NA is No Fireplace\nte.FireplaceQu = te.FireplaceQu.fillna('No Fireplace')\n\n# here NA is No alley access \nte.Alley = te.Alley.fillna('No alley access')\n\n# here NA is No pool\nte.PoolQC = te.PoolQC.fillna('No Pool')\n\n# here NA is No fence\nte.Fence = te.Fence.fillna('No Fence')\n\n# No Masonry veneer type\nte.MasVnrType = te.MasVnrType.fillna('None')\n\n# No Masonry veneer type so area would be 0\nte.MasVnrArea = te.MasVnrArea.fillna(0)\n\n\nte.MiscFeature = te.MiscFeature.fillna('None')","d4aebbb4":"# we will leave the remaining null values from non-specified\/continuous variables as is, to prevent false assumptions\nte_null_pc = te.isnull().sum()\nte_null_pc[te_null_pc>0]","485977e5":"tr.MoSold = tr.MoSold.map({1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'})","c9549255":"tr_num = tr.select_dtypes(exclude='object').copy()\ntr_obj = tr.select_dtypes(include='object').copy()\nte_obj = te.select_dtypes(include='object').copy()","5b3a2621":"tr_num.head()","de223df7":"\nplt.figure(figsize=(20, 3))\nsns.boxplot(tr.LotArea, palette=\"Set3\")\nplt.title('IQR and Outliers in House Sale Price', fontsize=15)\nplt.xlabel('Price', fontsize=12)\nplt.show()","604f640c":"\nplt.figure(figsize=(20, 3))\nsns.boxplot(tr.SalePrice, palette=\"Set1\")\nplt.title('IQR and Outliers in House Sale Price', fontsize=15)\nplt.xlabel('Price', fontsize=12)\nplt.show()","67781a6a":"tr.SalePrice.quantile([0.25,0.5,0.75,0.9,0.95,0.99])","b5a99348":"\nplt.figure(figsize=(20, 15))\nplt.subplot(2,1,1)\nsns.boxplot(x=tr.OverallQual, y=tr.SalePrice, palette=\"rocket\").set(xlabel='Overall material and finish of the house')\nplt.subplot(2,1,2)\nsns.boxplot(x=tr.OverallCond, y=tr.SalePrice, palette='viridis').set(xlabel='Overall condition of the house')\nplt.suptitle('Distributions of Variables',fontsize=20)\nplt.show()","814701a9":"\nplt.figure(figsize=(20, 15))\nplt.subplot(2,1,1)\nsns.boxplot(x=tr.YrSold, y=tr.SalePrice, hue=tr.SaleType).set(xlabel='Year Sold')\nplt.subplot(2,1,2)\nsns.violinplot(x=tr.MoSold, y=tr.SalePrice, palette='cubehelix').set(xlabel='Month Sold')\nplt.suptitle('Distributions of Variables',fontsize=20)\nplt.show()","a0aa47d3":"\nplt.figure(figsize=(20, 10))\nplt.subplot(2,2,1)\nsns.countplot(tr.YrSold, color='skyblue').set(xlabel='Year Sold')\nplt.subplot(2,2,2)\nsns.countplot(tr.MoSold, color='skyblue').set(xlabel='Month Sold')\nplt.subplot(2,2,3)\nsns.countplot(tr.GarageCars, color='skyblue').set(xlabel='Size of garage in car capacity')\nplt.subplot(2,2,4)\nsns.countplot(tr.Fireplaces, color='skyblue').set(xlabel='Number of fireplaces')\nplt.suptitle('Distributions of Variables',fontsize=20)\nplt.show()","58339d05":"plt.figure(figsize=(25, 20))\nsns.heatmap(tr.corr(), annot=True, cmap=\"RdYlGn\")\nplt.show()","7d5632c7":"#dropping some highly correlated variables manually\ntr = tr.drop('GarageYrBlt',1)\n\ntr = tr.drop('GarageArea',1)\n\ntr = tr.drop('BsmtUnfSF',1)\n\ntr = tr.drop('1stFlrSF',1)\n\ntr = tr.drop('TotRmsAbvGrd',1)","f5fd2fad":"plt.figure(figsize=(25, 20))\nsns.heatmap(tr.corr(), annot=True, cmap=\"RdYlGn\")\nplt.show()","8bb3de0a":"tr_obj.head()","be68b95e":"\nplt.figure(figsize=(20, 7))\nplt.subplot(1,2,1)\nplt.pie(tr.CentralAir.value_counts(),explode=(0,0.1), labels=['Yes', 'No'],autopct='%1.1f%%')\nplt.title('Central air conditioning',fontsize=12)\nplt.subplot(1,2,2)\nplt.pie(tr.PavedDrive.value_counts(),explode=(0,0.2,0.1), labels=['Paved','Dirt\/Gravel','Partial Pavement'],autopct='%1.1f%%')\nplt.title('Paved driveway',fontsize=12)\nplt.suptitle('Distributions in Variables',fontsize=15)\nplt.show()","9e42d584":"# Countplots of Categorical Variables to see differences\n\nplt.figure(figsize=[20,15])\nplt.subplot(3,3,1)\nsns.countplot(tr.Alley, color='salmon')\nplt.subplot(3,3,2)\nsns.countplot(tr.Utilities, color='salmon')\nplt.subplot(3,3,3)\nsns.countplot(tr.HouseStyle, color='salmon')\nplt.subplot(3,3,4)\nsns.countplot(tr.RoofStyle, color='salmon')\nplt.subplot(3,3,5)\nsns.countplot(tr.MasVnrType, color='salmon').set(xlabel='Masonry veneer type')\nplt.subplot(3,3,6)\nsns.countplot(tr.GarageType, color='salmon')\nplt.subplot(3,3,7)\nsns.countplot(tr.PoolQC, color='salmon').set(xlabel='Pool quality')\nplt.subplot(3,3,8)\nsns.countplot(tr.Fence, color='salmon')\nplt.subplot(3,3,9)\nsns.countplot(tr.SaleCondition, color='salmon')\nplt.suptitle('Countplots of Categorical Variables',fontsize=20)\nplt.show()","63f79787":"\nplt.figure(figsize=[20,7])\nsns.countplot(tr.Neighborhood)\nplt.xticks(rotation=30)\nplt.title('Sales count per neighborhood', fontsize=20)\nplt.show()","55131597":"tr.shape, te.shape","4dbb1837":"i=[]\nfor col in tr.columns:\n    if col not in te.columns:\n        i.append(col)\n        \nprint(i)","09239092":"dummy_1 = pd.get_dummies(tr[tr_obj.columns], drop_first=True)\ndummy_te = pd.get_dummies(te[te_obj.columns])","c3d0912b":"te = pd.concat([te, dummy_te], axis=1)\nte.head()","3777a464":"tr = pd.concat([tr,dummy_1], axis=1)\ntr = tr.drop(tr[tr_obj.columns], 1)\ntr.head()","c741cfe8":"X=tr.drop('SalePrice',1)\ny=tr.SalePrice","0c942379":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)","26714f93":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","4165d8a0":"# Completing remaining imputations(mathematical) after split\nX_train.MasVnrArea = X_train.MasVnrArea.fillna(X_train.MasVnrArea.median())\nX_test.MasVnrArea = X_test.MasVnrArea.fillna(X_test.MasVnrArea.median())\n\nX_train.LotFrontage = X_train.LotFrontage.fillna(X_train.LotFrontage.median())\nX_test.LotFrontage = X_test.LotFrontage.fillna(X_test.LotFrontage.median())","83547720":"X_train.isna().sum().any()","6cdd7b84":"X_test.isna().sum().any()","75f027eb":"pca = PCA(random_state=0)\npca.fit(X_train)","53f3d669":"#pca.components_","6f6643b0":"var_cumu=np.cumsum(pca.explained_variance_ratio_)","15e4aee4":"# plotting Cumulative Variance Explained By PCA using plotly for interactive graph\npx.line(var_cumu, title='Cumulative Variance Explained By PCA')","33fa3d96":"# not pursuing pca","5df2cefa":"rf_basic = RandomForestRegressor(random_state=0, n_jobs=-1, oob_score=True, n_estimators=50)\nrf_basic.get_params()","2733be30":"rf_basic.fit(X_train,y_train)","34a423d2":"#Out of bag score\nrf_basic.oob_score_","06067886":"sample_tree = rf_basic.estimators_[0]","f1c3f579":"sample_tree_viz = tree.export_graphviz(sample_tree, out_file=None, feature_names=X.columns.values, filled=True, rounded=True)\n\ndraw_graph = graphviz.Source(sample_tree_viz, format='png') \ndraw_graph","9003c4e1":"y_train_pred = rf_basic.predict(X_train)\nr2_score(y_train, y_train_pred)","55a10e16":"y_test_pred = rf_basic.predict(X_test)\nr2_score(y_test,y_test_pred)","f86cfbf9":"n=len(X_test)\nk=len(X_test.columns)\nadj_r2_score = 1 - ((1-r2_score(y_test, y_test_pred))*(n-1)\/(n-k-1))\nprint('The adjusted r2 score of y_test, y_pred is:', adj_r2_score)","9558c33c":"mean_squared_error(y_test,y_test_pred)","646a932c":"rfe = RFE(estimator=rf_basic, n_features_to_select=20)\n\nrfe.fit(X_train, y_train)","59367be9":"rfe.ranking_","78f7bf2b":"X_train.columns[rfe.support_]","b23c014d":"X_train2 = X_train.loc[:,rfe.support_]\nX_train2.shape","74097bad":"X_test2 = X_test.loc[:,rfe.support_]\nX_test2.shape","6958e536":"rf=RandomForestRegressor(n_jobs=-1, random_state=0, oob_score=True)\n\nrf.fit(X_train2,y_train)","22fe39aa":"rf.oob_score_","1ca84099":"y_train_pred2 = rf.predict(X_train2)\n\nr2_score(y_train,y_train_pred2)","3f72f65c":"y_test_pred2 = rf.predict(X_test2)","0909c4e6":"n=len(X_test)\nk=len(X_test.columns)\nadj_r2_score = 1 - ((1-r2_score(y_test, y_test_pred2))*(n-1)\/(n-k-1))\nprint('The adjusted r2 score of y_test, y_pred is:', adj_r2_score)","4e372c43":"# Setting hyperparams\nparams = {'max_depth': [5,10,15],\n         'max_features': [5,10,15],\n         'min_samples_leaf': [5,10,20,50],\n         'n_estimators': [25,50,100,150]}","445e793a":"# model building with 5-fold cv\nmodel_cv = GridSearchCV(estimator=rf, \n                        param_grid=params,\n                       verbose=1,\n                       n_jobs=-1,\n                       return_train_score=True,\n                       cv=5)","83a3ccfb":"model_cv.fit(X_train2,y_train)","8f5db5f7":"model_cv.best_estimator_","ad461d42":"model_cv.best_score_","d7ae7937":"cv_df = pd.DataFrame(model_cv.cv_results_)\ncv_df.head()","88b47b90":"cv_df.sort_values(by='rank_test_score').head()","46932dee":"# Modifying hyperparams as per performance in previous model\nparams = {'max_depth': [10,12,15],\n         'max_features': [8,10,12],\n         'min_samples_leaf': [10,12,15],\n         'n_estimators': [100,150,200]}","bd958098":"model_cv2 = GridSearchCV(estimator=rf,\n                        param_grid=params,\n                        verbose=1,\n                        n_jobs=-1,\n                        return_train_score=True,\n                        cv=4)\nmodel_cv2.fit(X_train2,y_train)","aabd540c":"model_cv2.best_estimator_","d1451026":"model_cv2.best_score_","e7490e70":"cv_df2 = pd.DataFrame(model_cv2.cv_results_)\ncv_df2.sort_values(by='rank_test_score').head()","a3a56838":"model_cv2.best_params_","a7145548":"final_rf = RandomForestRegressor(random_state=0,max_depth=8,max_features=10,min_samples_leaf=12,n_estimators=75,n_jobs=-1)\n\nfinal_rf.fit(X_train2,y_train)","66579587":"final_rf_pred= final_rf.predict(X_test2)\nmean_squared_error(y_test,final_rf_pred)","e8c1031b":"xgb_r = XGBRegressor(random_state=0, learning_rate=0.1,n_estimators=1000)\n\nxgb_r.fit(X_train2,y_train)","c416526d":"preds1_xgb = xgb_r.predict(X_test2)","4b5647fc":"mse1 = mean_squared_error(y_test,preds1_xgb)\nmse1","9512f58b":"te_final = te[X_train2.columns]","8b20e4f6":"te_final.shape","4030c865":"test_predictions = xgb_r.predict(te_final)","204d4722":"test_predictions","de3583f7":"submission = pd.DataFrame({'Id':te['Id'],'SalePrice':test_predictions})\nsubmission.head()","8902c632":"submission.SalePrice.mean()","85511b8d":"filename='house_price_pred_competition_xgb.csv'\nsubmission.to_csv(filename,index=False)","ea4a9ff1":"# Reading and analysis of dataframe","d6f9cebd":"# Exploratory Data Analysis","722daa30":"# PCA","61c03015":"## The XGBoost model gives better performance so we will do final prediction with it","d490534b":"# Random Forest Model with GridSearchCV and Hyperparameter tuning","ce580214":"# Random Forest - Basic Model","6f7b079b":"# Imputing Null Values","cd92eea0":"# Random Forest Model 2 with modified hyperparameters","bd5b1b0d":"# Train Validation Split on Training Data","e9a5a3e5":"It can be observed from above that outliers for sale price are above 95th percentile or 335000 and ones above ~447500 are extreme outliers.","79cedda5":"# XGBoost Model","985c8924":"# One-Hot Encoding","662c37e7":"# Feature Selection Using RFE"}}