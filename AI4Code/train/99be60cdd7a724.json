{"cell_type":{"19da2689":"code","bb058330":"code","18a04701":"code","bb98e90c":"code","68913e76":"code","6836389b":"code","bc69b1e9":"code","e8d1eb12":"code","1959afe1":"code","87d905f2":"code","72e5fa02":"code","212e6f25":"code","5011e6e3":"code","1dbe6d09":"code","832fca82":"code","766ebfce":"code","0df090e3":"code","3be2394b":"code","d818561b":"code","ebca4ef6":"code","09247d3c":"code","a6fa9adf":"code","467a298c":"code","f1d6a44b":"code","a62d918d":"code","2dfc3707":"code","aa4b0ea4":"code","0ee4c6d2":"code","55e88e5f":"code","8ed5b97d":"code","08c9cb0b":"code","4cb8ef78":"code","2f11a349":"code","c5bad983":"code","afc91696":"code","66f9bb57":"code","98ebc67b":"code","902d9a87":"code","485d1266":"code","4e7f9df9":"code","83750fac":"code","5907ebf1":"code","41c0c874":"code","19ecd9bd":"code","5e4aff53":"code","ce3cd784":"code","3e3c93be":"code","aad3dc28":"code","96042ce7":"code","62c80f40":"code","e5168c57":"code","13ebcc84":"code","1a74a16e":"code","07380d9a":"code","46e383f8":"code","c8ea1b2b":"code","3052684c":"code","253b3e08":"code","8869317a":"code","76bc2156":"code","ed73d23e":"code","e70a9d44":"code","47477e51":"code","e04d27d0":"code","ec325536":"code","91572bc4":"code","862cf3e8":"code","7dfd8756":"code","a0af17ab":"code","7ff86583":"code","f5c8752d":"code","9dd9da7a":"code","33d1a78a":"code","f1368fe1":"code","fad244ac":"code","65d9d3b5":"markdown","b24e1373":"markdown","172febd9":"markdown","43aea88d":"markdown"},"source":{"19da2689":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","bb058330":"data = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","18a04701":"data.head()","bb98e90c":"data.isnull().sum()","68913e76":"from sklearn.model_selection import train_test_split\n","6836389b":"data,test = train_test_split(data,test_size = 0.2)","bc69b1e9":"data,validation = train_test_split(data,test_size = 0.2)","e8d1eb12":"data.shape","1959afe1":"test.shape","87d905f2":"data = data.drop(columns = ['id'])","72e5fa02":"data['diagnosis'].unique()","212e6f25":"labels = data['diagnosis']","5011e6e3":"data.drop(columns = ['diagnosis'],inplace = True)","1dbe6d09":"data = data.iloc[:,0:29]","832fca82":"data.head()","766ebfce":"daig = validation['diagnosis']\nvalidation.drop(columns = ['id','diagnosis'],inplace=True)\nvalidation.iloc[:,0:29]\n","0df090e3":"validation = validation.iloc[:,0:29]","3be2394b":"data['area_mean'].hist(bins = 30)","d818561b":"columns = data.columns","ebca4ef6":"columns","09247d3c":"\nj = 0\nfor i in columns:\n  j = j+1\n  plt.figure(figsize = (5,5))\n  plt.title(i)\n  plt.hist(data[i],30)\n\n","a6fa9adf":"# Most of the features right skewed , except symmetry mean, smoothness_mean and smoothness_worst","467a298c":"plt.figure(figsize=(30,30))\nsns.heatmap(data.corr(),annot=True)","f1d6a44b":"\nmean = ['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean',\n       'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']","a62d918d":"data_mean = data[mean]","2dfc3707":"plt.figure(figsize=(20,20))\nsns.heatmap(data_mean.corr(),annot=True)","aa4b0ea4":"# High Positive Correlation between \n# 1. radius_mean and perimeter_mean\n# 2. radius_mean and area_mean\n# 3.radius_mean and concave_points_mean\n# 4.perimeter_mean and area_mean\n# 5.perimeter_mean and concave_points_mean\n# 6.area_mean and concave_points_mean\n# 7.compactness_mean and concavity_mean\n# 8.compactness_mean and concave points_mean\n# 9.concavity_mean and concave points_mean","0ee4c6d2":"sns.pairplot(data_mean)\n","55e88e5f":"se = ['radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',]\ndata_se = data[se]","8ed5b97d":"plt.figure(figsize=(20,20))\nsns.heatmap(data_se.corr(),annot=True)","08c9cb0b":"# High Positive Correlation between \n# 1. radius_se and perimeter_se\n# 2. radius_se and area_se\n# 3.radius_se and concave_points_se\n# 4.perimeter_se and area_se\n# 5.compactness_se and concavity_se\n","4cb8ef78":"# sns.pairplot(data_se)","2f11a349":"worst = ['radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst']\ndata_worst = data[worst]","c5bad983":"plt.figure(figsize=(20,20))\nsns.heatmap(data_worst.corr(),annot=True)","afc91696":"# High Positive Correlation between \n# 1. radius_worst and perimeter_worst\n# 2. radius_worst and area_worst\n# 3.radius_worst and concave_points_worst\n# 4.perimeter_worst and area_worst\n# 5.perimeter_worst and concave_points_worst\n# 6.area_worst and concave_points_worst\n# 7.compactness_worst and concavity_worst\n# 8.compactness_worst and concavity_points_worst\n# 9.concavity_worst and concavity_points_worst","66f9bb57":"np.std(data['concavity_mean'])","98ebc67b":"np.std(data['compactness_mean'])","902d9a87":"np.std(data['concave points_mean'])","485d1266":"print(np.std(data['concavity_se']))\nprint(np.std(data['compactness_se']))","4e7f9df9":"print(np.std(data['concavity_worst']))\nprint(np.std(data['compactness_worst']))\nprint(np.std(data['concave points_worst']))","83750fac":"print(np.std(data['radius_mean']))\nprint(np.std(data['area_mean']))\nprint(np.std(data['perimeter_mean']))","5907ebf1":"# Area is proportional to radius squared hence it has highest standard deviation ","41c0c874":"\ndata_x = data","19ecd9bd":"data_x.shape","5e4aff53":"from sklearn.preprocessing import Normalizer","ce3cd784":"n = Normalizer()","3e3c93be":"data_x = n.fit_transform(data_x)","aad3dc28":"import tensorflow.keras as k","96042ce7":"import tensorflow as tf\n","62c80f40":"# labels = tf.keras.utils.to_categorical(labels)","e5168c57":"map = {'M':1,'B':0}","13ebcc84":"labels.value_counts()","1a74a16e":"labels = labels.map(map\n           )","07380d9a":"labels","46e383f8":"validation = n.transform(validation)","c8ea1b2b":"daig = daig.map(map)","3052684c":"test.head()\n","253b3e08":"test_y = test['diagnosis']","8869317a":"test = test.drop(columns = ['id','diagnosis'])","76bc2156":"test= test.iloc[:,0:29]","ed73d23e":"test.head()","e70a9d44":"test = n.transform(test)","47477e51":"test_y = test_y.map(map)","e04d27d0":"test_y.head()","ec325536":"# The model hyperparameters are decided by rounds of calculated trail and error.\nepoch = 600\nmodel = k.models.Sequential([\n                                  k.layers.Dense(12,input_dim =29,activation = 'relu'),\n                                    k.layers.Dropout(0.5),\n                                    k.layers.Dense(5,activation = 'relu'),\n                                    k.layers.Dropout(0.5),\n#                                     k.layers.Dense(5,activation = 'relu'),\n#                                     k.layers.Dropout(0.5),\n                                    k.layers.Dense(1,activation = 'sigmoid')\n                                    \n                                    \n\n])\nmodel_check = k.callbacks.ModelCheckpoint('model_check.h5',save_best_only=True)\nmodel.compile(loss = ['binary_crossentropy'],optimizer ='adam',metrics = ['accuracy'])\nhistory = model.fit(data_x,labels,epochs=epoch,verbose=0,validation_data = (validation,daig),callbacks = [model_check])","91572bc4":"model = k.models.load_model('model_check.h5')","862cf3e8":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(1,epoch+1)\n\nplt.figure(figsize = (30,30))\nplt.subplot(2,1,1)\nplt.plot(epochs_range,acc,label = 'training_acc')\nplt.plot(epochs_range,val_acc,label = 'val_acc')\nplt.legend(loc = 'lower right',fontsize = 30)\nplt.title('Training and Validation Accuracy',fontsize = 30)\nplt.subplot(2,1,2)\nplt.plot(epochs_range,loss,label = 'training_loss')\nplt.plot(epochs_range,val_loss,label = 'val_loss')\nplt.legend(loc = 'lower right',fontsize = 30)\nplt.title('Training and Validation Loss',fontsize = 30)","7dfd8756":"\npredictions = model.predict(test)","a0af17ab":"pred = []\nfor i in range(0,len(predictions)):\n  if predictions[i][0]>=0.5:\n    pred.append(1)\n  else:\n    pred.append(0)  ","7ff86583":"from sklearn.metrics import accuracy_score\naccuracy_score(test_y,pred)","f5c8752d":"#Achieveing 94% accuracy","9dd9da7a":"predictions_train = model.predict(data_x)","33d1a78a":"pred_train = []\nfor i in range(0,len(predictions_train)):\n  if predictions_train[i][0]>=0.5:\n    pred_train.append(1)\n  else:\n    pred_train.append(0)  ","f1368fe1":"accuracy_score(labels,pred_train) ","fad244ac":"# Lower Accuracy on training data, no Overfitting or under fitting of the model detected.","65d9d3b5":"# Loading data","b24e1373":"# Data Visualiaztion","172febd9":"# Data Preparation for model training","43aea88d":"# Building and Training a Neural Network"}}