{"cell_type":{"fae8287c":"code","7e01918d":"code","d96a9f52":"code","ba83c362":"code","3bce1eac":"code","37b6b586":"code","680738c0":"code","447b4567":"code","c1d4148e":"code","887ab18c":"code","4568c17a":"code","8f02be69":"code","803032b1":"code","54449491":"code","94cdfb8e":"code","7fcb3188":"code","ecdce51f":"markdown","e3ce2b09":"markdown","6a9aa030":"markdown","1b1a53f1":"markdown"},"source":{"fae8287c":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import ExtraTreesClassifier\nimport warnings\nimport gc\nwarnings.simplefilter('ignore')\n\nKAGGLE_DIR = r'..\/input\/tabular-playground-series-feb-2022\/'\nLOCAL_DIR = r''\nKAGGLE = True\nRS = 69420","7e01918d":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","d96a9f52":"%%time\nif KAGGLE:\n    print(f\"{'*'*10} Loading Training Data... {'*'*10}\")\n    df = pd.read_csv(KAGGLE_DIR+'train.csv', index_col=0).pipe(reduce_mem_usage)\n    print(f\"{'*'*10} Loading Testing Data... {'*'*10}\")\n    test = pd.read_csv(KAGGLE_DIR+'test.csv', index_col=0).pipe(reduce_mem_usage)\n    sub = pd.read_csv(KAGGLE_DIR+'sample_submission.csv').pipe(reduce_mem_usage)\nelse:\n    print(f\"{'*'*10} Loading Training Data... {'*'*10}\")\n    df = pd.read_csv(LOCAL_DIR+'train.csv', index_col=0).pipe(reduce_mem_usage)\n    print(f\"{'*'*10} Loading Testing Data... {'*'*10}\")\n    test = pd.read_csv(LOCAL_DIR+'test.csv', index_col=0).pipe(reduce_mem_usage)\n    sub = pd.read_csv(LOCAL_DIR+'sample_submission.csv').pipe(reduce_mem_usage)","ba83c362":"lb = LabelEncoder()\nX = df.iloc[:, :-1].values\ny = lb.fit_transform(df['target'])","3bce1eac":"X.shape, y.shape","37b6b586":"del df\ngc.collect()","680738c0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=RS)","447b4567":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","c1d4148e":"clf = ExtraTreesClassifier(\n    n_estimators=1000,\n    n_jobs=-1,\n    random_state=RS,\n    verbose=1\n)","887ab18c":"%%time\nclf.fit(\n    X_train, y_train,\n)","4568c17a":"y_pred = clf.predict(X_test)","8f02be69":"from sklearn.metrics import accuracy_score\nacc = accuracy_score(y_pred, y_test)\nprint(f\"Model Accuracy: {round(acc, 6)}\")\n\n# 0.99345","803032b1":"preds = clf.predict(test)\npreds","54449491":"preds = lb.inverse_transform(preds)","94cdfb8e":"sub['target'] = preds\nsub","7fcb3188":"sub.to_csv('submission.csv', index=False)","ecdce51f":"# Modelling","e3ce2b09":"# Submission","6a9aa030":"# Imports","1b1a53f1":"# Preprocessing"}}