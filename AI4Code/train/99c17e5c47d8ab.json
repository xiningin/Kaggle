{"cell_type":{"e35b2a74":"code","a45b69ba":"code","0be856f9":"code","aae6f8c3":"code","a4ceaf9c":"code","5b8acd04":"code","14488793":"code","776d0432":"code","787aa72b":"code","c052ba43":"code","ec7b5e79":"code","09cca5b1":"code","084788e4":"code","8387d918":"code","b6fb0b83":"code","be665aa3":"code","523074d0":"code","a6d8d62f":"code","030d0c68":"code","53e79188":"code","f91dd4db":"code","2611e9b0":"code","14693e33":"code","3d4702c6":"code","56c8e2fc":"code","59f8b20e":"code","a464e3b3":"code","f069b1f1":"code","a4afe7cf":"code","168c5d3b":"code","e31a3e98":"code","f6311112":"code","694f1870":"code","40cde370":"code","56735bb0":"code","98e13a56":"code","21d26192":"code","61bb3f7d":"code","3c5286d6":"code","2ebd4460":"code","90378aee":"code","4fe87e39":"code","5b0918c9":"code","b3dafaa0":"code","e5aeeeda":"code","b14c39c4":"code","14c837e7":"code","d246a911":"code","44028b19":"code","b3a98ee9":"code","23d6636c":"code","b5504ccb":"code","adf8d78c":"code","f26e412f":"code","33357ba7":"code","bb196103":"code","208e88b5":"code","11e9f8a3":"code","d0c131aa":"code","c6cfad29":"code","e2b518f5":"code","f77b8282":"code","61493a1d":"code","b0b82ac2":"code","f8360fc7":"code","26a6f1cf":"code","1bc05922":"code","69190555":"code","1b5e3bd5":"code","3337ebee":"code","4a8c8e1b":"markdown","8842c127":"markdown","b802c05f":"markdown","2afd5bcb":"markdown","0a227ae8":"markdown","aa366e4e":"markdown","dd95b22a":"markdown","0665ef73":"markdown","c2ede5af":"markdown","e48ab9a1":"markdown","696f495b":"markdown"},"source":{"e35b2a74":"#import the essential libaries\nimport nltk #Natural Language Toolkit,\n#import regular expression\nimport re \n#lets start by taking an example\nre_test = \" This is made string to text 2 deffrent regex expression methodes\" #simple sentence\nre_many_messay = \" This is made     string to text 2 deffrent     regex expression   methodes\" #sentence having more than when whitespace\nre_test_messay = \"This-is-made\/up.string*to>>>>text----2***** deffrent-regex-expression-methodes\" #sentence having many characters","a45b69ba":"# split data by white spaces beetween tham\n#regular expression split \nre.split('\\s',re_test)\n#fro spliting in single white space","0be856f9":"re.split('\\s',re_many_messay)\n#but what if that data have more than one white spaces between tham? simply use + while splitig\n","aae6f8c3":"#+ when there are more than one white spaces\nre.split('\\s+',re_many_messay)","a4ceaf9c":"re.split('\\s+',re_test_messay)","5b8acd04":"#\\W Matches nonword characters.\n#and re.split splittes nonwords char\nre.split('\\W+',re_test_messay)","14488793":"#\\S Matches nonwhitespace.\nre.findall('\\S+',re_test)","776d0432":"#finds \\S  nonwhitespace\nre.findall('\\S+',re_many_messay)","787aa72b":"re.findall('\\w+',re_test_messay)","c052ba43":"#lets take another example\npep8_test = \"I try to follow the PEP8 guidlines\"\npep7_test = \"I try to follow the PEP7 guidlines\"\npeep8_test = \"I try to follow the PEEP8 uidlines\"","ec7b5e79":"re.findall('[a-z]+',pep8_test)","09cca5b1":"re.findall('[A-Z0-9]+',pep8_test)","084788e4":"re.sub('[A-Z]+[0-9]+','PEEP8 python style guid',pep8_test)","8387d918":"re.sub('[A-Z]+[0-9]+','PEEP8 python style guid',pep7_test)","b6fb0b83":"re.sub('[A-Z]+[0-9]+','PEEP8 python style guid',peep8_test)","be665aa3":"import pandas as pd\npd.set_option(\"display.max_colwidth\",100)\n\n#okaay lets work with dataset SMSspamcollection dataset\ndata = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\", encoding='latin-1')\ndata.head()","523074d0":"data = data.filter(['v1', 'v2'])\ndata.head()","a6d8d62f":"data.columns = (\"label\",\"message\")\ndata.head()","030d0c68":"import string\n#list of punctuation\nstring.punctuation","53e79188":"#let defined the text for removing punctuation from the data\n\ndef remove(text):\n    text_punct = [char for char in text if char not in string.punctuation]\n    return text_punct\n#okayy we have the function we can aplly on the data set\ndata[\"data_message\"] = data[\"message\"].apply(lambda x: remove(x))","f91dd4db":"data.head()","2611e9b0":"#wwe  can clearly see that it will  returning the individial char in the data \n#for for joining we g=haveto use the space and join as \"\".join for joping words\n\ndef remove(text):\n    text_punct = \"\".join([char for char in text if char not in string.punctuation])\n    return text_punct\n#okayy we have the function we can aplly on the data set\ndata[\"data_message\"] = data[\"message\"].apply(lambda x: remove(x))","14693e33":"data.head()","3d4702c6":"import re","56c8e2fc":"#we than again have to define and function \ndef token(text):\n    tokenz = re.split('\\W+',text)\n    return tokenz\ndata[\"data_token\"] = data[\"data_message\"].apply(lambda x: token(x.lower()))","59f8b20e":"data.head()\n#nlp is casesensative we have to make caracter \n#in same lower case as to study the given data","a464e3b3":"import nltk","f069b1f1":"from nltk.corpus import stopwords\nstopword  = stopwords.words(\"english\")","a4afe7cf":"stopword[:20]\n#there are many stopwords avalilable in nltk ","168c5d3b":"#define a simple function for removing the stopwords from the data\ndef remove_corpus(data_token):\n    stop = [word for word in data_token if word not in stopword]\n    return stop\n#making an column to sav the removed stopword data\ndata[\"data_stopword\"] = data[\"data_token\"].apply(lambda x: remove_corpus(x))","e31a3e98":"data.head()","f6311112":" re.split('\\s',\"This is an interesting te+st\")","694f1870":"ps = nltk.PorterStemmer()\ndir(ps)\n#functional attribute presented in porterSteammer","40cde370":"print(ps.stem(\"grows\"))\nprint(ps.stem(\"growing\"))\nprint(ps.stem(\"grow\"))","56735bb0":"print(ps.stem(\"run\"))\nprint(ps.stem(\"running\"))\nprint(ps.stem(\"runner\"))\n#they are not perfect even","98e13a56":"#lets take that dataset again now we working on stemming\ndf = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\", encoding='latin-1')\ndf = df.filter(['v1', 'v2'])\ndf.columns = (\"label\",\"message\")","21d26192":"dataframe = df.copy()\n#copy so that i can use further","61bb3f7d":"#wee can do every thing we understand previwes in one function\ndef clean_text(unknown):\n    text = \"\".join([word.lower() for word in unknown if word not in string.punctuation])\n    token = re.split('\\W+',unknown)\n    text = [word for word in token if word not in stopword]\n    return text\ndf[\"body_text\"] = df[\"message\"].apply(lambda x: clean_text(x.lower()))","3c5286d6":"df.head()","2ebd4460":"def stemming(token_text):\n    text = [ps.stem(word) for word in token_text]\n    return text\ndf[\"stem_text\"] = df[\"body_text\"].apply(lambda x : stemming(x))","90378aee":"df.head()","4fe87e39":"wn = nltk.WordNetLemmatizer()\nps = nltk.PorterStemmer()","5b0918c9":"dir(wn)","b3dafaa0":"#OKKAY so lets take an ex\nprint(ps.stem(\"meanness\"))\nprint(ps.stem(\"meaning\"))\n#the stem return the stemmed word with no exact dicctonoary relations","e5aeeeda":"print(wn.lemmatize(\"meanness\"))\nprint(wn.lemmatize(\"meaning\"))\n#so we can see that lemitization is bit diffrent from stemmer as its\n#returns the meaning full dict words having synonims","b14c39c4":"print(ps.stem(\"gooes\"))\nprint(ps.stem(\"geese\"))","14c837e7":"print(wn.lemmatize(\"gooes\"))\nprint(wn.lemmatize(\"gooes\"))","d246a911":"#using the simple copy of orignal dataset\ndataframe =  pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\", encoding='latin-1')\ndataframe = dataframe.filter(['v1', 'v2'])\ndataframe.columns = (\"label\",\"message\")\ndataframe.head()","44028b19":"def clean_text(unknown):\n    text = \"\".join([word for word in unknown if word not in string.punctuation])\n    token = re.split('\\W+',unknown)\n    text = [word for word in token if word not in stopword]\n    return text\ndataframe[\"body_text\"] = dataframe[\"message\"].apply(lambda x: clean_text(x.lower()))","b3a98ee9":"dataframe.head()","23d6636c":"def lemitizer(body_text):\n    text = [wn.lemmatize(word) for word in body_text]\n    return text\ndataframe[\"lemitized\"] = dataframe[\"body_text\"].apply(lambda x: lemitizer(x))    ","b5504ccb":"dataframe.head()","adf8d78c":"vector = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\", encoding='latin-1')\nvector = vector.filter(['v1', 'v2'])\nvector.columns = (\"label\",\"message\")\nvector.head()","f26e412f":"def clean_text(text):\n    text = \"\".join([word.lower() for word in text if word not in string.punctuation])\n    token = re.split('\\W+',text)\n    text = [word for word in token if word not in stopword]\n    return text","33357ba7":"vector[\"tokenized\"] = vector[\"message\"].apply(lambda x: clean_text(x))","bb196103":"vector[\"label\"]","208e88b5":"from sklearn.feature_extraction.text import CountVectorizer\ncount = CountVectorizer()\ncount_x = count.fit_transform(vector[\"message\"])\nprint(count_x.shape)\nprint(count.get_feature_names())","11e9f8a3":"count = pd.DataFrame(count_x.toarray())\ncount","d0c131aa":"gram = value.copy()\n#im lazy you can read the dataset agin using pandas im using copyied one","c6cfad29":"gram.head()","e2b518f5":"#wee can do every thing we understand previwes in one function\ndef clean_text(unknown):\n    text = \"\".join([word.lower() for word in unknown if word not in string.punctuation])\n    token = re.split('\\W+',unknown)\n    text = \" \".join([ps.stem(word) for word in token if word not in stopword])\n    return text\ngram[\"body_text\"] = gram[\"message\"].apply(lambda x: clean_text(x.lower()))","f77b8282":"from sklearn.feature_extraction.text import CountVectorizer\n#ranfge of n_grams to choose like unigrams,bygrams,trigrams\nn_gram_vec = CountVectorizer(ngram_range=(2, 2))\nn_grams_count = n_gram_vec.fit_transform(gram[\"body_text\"])\nn_grams_count","61493a1d":"print(n_grams_count.shape)","b0b82ac2":"print(n_gram_vec.get_feature_names())","f8360fc7":"from sklearn.ensemble import RandomForestClassifier\ntree = RandomForestClassifier(n_jobs = -1)","26a6f1cf":"dir(tree)","1bc05922":"from sklearn.model_selection import KFold,cross_val_score\nfold = KFold(n_splits=5)\ncross_val_score(tree,count,vector[\"label\"],cv =fold,scoring=\"accuracy\",n_jobs = -1)","69190555":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_fscore_support as score\nX_train,X_test,y_train,y_test = train_test_split(count,data[\"label\"],test_size = 0.2)","1b5e3bd5":"def train(n_est,depth):\n    rf = RandomForestClassifier(n_estimators=n_est,max_depth=depth,n_jobs=-1)\n    rf_model = rf.fit(X_train,y_train)\n    y_pred = rf_model.predict(X_test)\n    precision,recall,fscore,support = score(y_test,y_pred,pos_label=\"spam\",average=\"binary\")\n    print(\"est:{}\/depth:{}----precision:{}\/Recall:{}\/accuracy:{}\".format(\n        n_est,depth,round(precision,3),round(recall,3),\n        round((y_pred == y_test).sum()\/len(y_pred),3)))\n    ","3337ebee":"for n_est in [10,50,100]:\n    for depth in [10,20,30,None]:\n        train(n_est,depth)","4a8c8e1b":"# sTemming the text\n\nWe already know that a word has one root-base form but having different variations, for example, \u201cplay\u201d is a root-base word and playing, played, plays are the different forms of a single word. So, these words get stripped out, they might get the incorrect meanings or some other sort of errors.   \n\nThe process of reducing inflection towards their root forms are called Stemming, this occurs in such a way that depicting a group of relatable words under the same stem, even if the root has no appropriate meaning. ","8842c127":"# TOkenization\nTokenization is the process by which big quantity of text is divided into smaller parts called tokens.","b802c05f":"# Vectorizing data\nThe CountVectorizer provides a simple way to both tokenize a collection of text documents and build a vocabulary of known words, but also to encode new documents using that vocabulary. You can use it as follows: Create an instance of the CountVectorizer class.","2afd5bcb":" N Gram","0a227ae8":"# REmoving PUnctuation","aa366e4e":"stemming is the process of reducing inflected (or sometimes derived) words to their word stem, base or root form\u2014generally a written word form. ... A computer program or subroutine that stems word may be called a stemming program, stemming algorithm, or stemmer.\nthere types of steamer\n1. porter steamer\n2. snowball steammer \n3. Lancaster steammer\n4. Regex based steammer","dd95b22a":"# Lemmitization\nIn other words, Lemmatization is a method responsible for grouping different inflected forms of words into the root form, having the same meaning. It is similar to stemming, in turn, it gives the stripped word that has some dictionary meaning. The Morphological analysis would require the extraction of the correct lemma of each word. ","0665ef73":"# Natural Language Processing\nNatural language processing (NLP) is the ability of a computer program to understand human language as it is spoken. NLP is a component of artificial intelligence (AI).\n![NLP](https:\/\/media.geeksforgeeks.org\/wp-content\/cdn-uploads\/machineLearning3.png)\n\nThe development of NLP applications is challenging because computers traditionally require humans to \"speak\" to them in a programming language that is precise, unambiguous and highly structured, or through a limited number of clearly enunciated voice commands. Human speech, however, is not always precise -- it is often ambiguous and the linguistic structure can depend on many complex variables, including slang, regional dialects and social context.","c2ede5af":"# STemming\n","e48ab9a1":"# remove the stopwords","696f495b":"1. some examples \n\n2. removing punctuation\n\n3. tokenization\n\n4. remove the stopwords\n\n5. stemming \n\n6. lemmitization\n\n7. vectorization of data\n\n8. Randomforest\n\n        NOTE . I have used diffrent text cleaning methods using same dataset individually "}}