{"cell_type":{"ca6fc8b0":"code","0bf57c8e":"code","65567d39":"code","1b5816eb":"code","dbdbe373":"code","d451a479":"code","405d0aaf":"code","19a251b7":"code","d1c43566":"code","9fd4792c":"code","87e63ea4":"code","65aca59d":"code","c3b0d021":"code","6752aece":"code","cb3b0813":"code","75e22ad7":"code","0c534544":"code","b70bedf8":"code","d06ad620":"code","6dd6de46":"code","770265dd":"code","e0eb8779":"code","15b6e2a7":"code","3fc4f6ec":"code","c557ce66":"code","92064c5b":"code","b9c91c6e":"code","ec3e0ecb":"code","04bc2dcf":"code","4b4ff2b6":"code","69410988":"code","9e9558d5":"code","5772edb3":"code","f01f6e9a":"code","c4ca4cf0":"code","47adc672":"code","e1acbbc2":"code","cf57929c":"code","bec2cc23":"code","7c4c0c93":"code","2c2976fd":"code","2ed384de":"code","022ed2b5":"code","8d28b489":"code","504bb4f3":"code","76c6b42a":"code","2ebfea53":"code","abf04e66":"code","73dcb3db":"code","d16f0b5c":"code","a793d942":"code","3c20f6d1":"code","f3ced761":"code","e6c54650":"code","06e37236":"code","5bbc5555":"code","66acab2c":"code","04d6d224":"code","ebd2d0be":"code","abe9d2bc":"code","b070472d":"code","16b36a7f":"code","b5ca937b":"code","ceb550c2":"code","2c0fd5a4":"code","ddd0f7c8":"code","911fbe54":"code","2b27ac77":"code","e853ce6d":"code","d31ef53a":"markdown","4926baaf":"markdown","cec33202":"markdown","dd1e92d9":"markdown","56acc58a":"markdown","6ea30509":"markdown","85405b02":"markdown","ee188037":"markdown","8b8f706b":"markdown","ada5c3dd":"markdown","c4a1d51d":"markdown","ecf3cedc":"markdown","f2d7b335":"markdown","77c5fbc0":"markdown","7ba6ca52":"markdown","50612cb5":"markdown","df96777c":"markdown","6129e755":"markdown","dd519744":"markdown","901f65e5":"markdown","39a55a94":"markdown","72118e6b":"markdown","92ecea04":"markdown","1ac81438":"markdown","af16bcaf":"markdown","3ac1e98e":"markdown","6efd236b":"markdown","237f1f94":"markdown","c61d24b2":"markdown"},"source":{"ca6fc8b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0bf57c8e":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf.head()","65567d39":"df.info()","1b5816eb":"df.Age.unique()","dbdbe373":"sns.countplot(x=\"Survived\", data=df)","d451a479":"df.isna().sum()","405d0aaf":"df.isna().sum().plot(kind=\"bar\")","19a251b7":"df.drop(columns=['Cabin'], inplace=True)","d1c43566":"without_nullage = df.dropna(axis=0, subset=[\"Age\"])","9fd4792c":"without_nullage.groupby(by=['Survived']).mean()[\"Age\"]","87e63ea4":"survived_age = without_nullage.groupby(by=['Survived']).mean()[\"Age\"][1]\nnot_survived_age = without_nullage.groupby(by=['Survived']).mean()[\"Age\"][0]","65aca59d":"df_isnull = df.Age.isna()==True\ndf_notsurvived = df.Survived==0\ndf_survived = df.Survived==1","c3b0d021":"index_list_survived_null = df[df_isnull & df_survived].fillna(survived_age).index\nindex_list_not_survived_null = df[df_isnull & df_notsurvived].fillna(not_survived_age).index","6752aece":"df[\"Age\"].iloc[index_list_survived_null] = survived_age\ndf[\"Age\"].iloc[index_list_not_survived_null] = not_survived_age","cb3b0813":"df.isna().sum()","75e22ad7":"df.groupby(\"Embarked\").PassengerId.count().plot(kind=\"bar\")","0c534544":"df.Embarked.fillna(\"S\", inplace=True)","b70bedf8":"df.isna().sum()","d06ad620":"df.head()","6dd6de46":"pclass_1 = df[df.Pclass==1].groupby(\"Survived\").PassengerId.count()","770265dd":"pclass_2 = df[df.Pclass==2].groupby(\"Survived\").PassengerId.count()","e0eb8779":"pclass_3 = df[df.Pclass==3].groupby(\"Survived\").PassengerId.count()","15b6e2a7":"fig1, ax1 = plt.subplots()\nax1.pie(pclass_1, labels=['not survived','survived'], autopct='%1.2f%%')\nplt.title(\"Pclass 1\")\nplt.show()","3fc4f6ec":"fig2, ax2 = plt.subplots()\nax2.pie(pclass_2, labels=['not survived','survived'], autopct='%1.2f%%')\nplt.title(\"Pclass 2\")\nplt.show()","c557ce66":"fig3, ax3 = plt.subplots()\nax3.pie(pclass_3, labels=['not survived','survived'], autopct='%1.2f%%')\nplt.title(\"Pclass 3\")\nplt.show()","92064c5b":"male = df[df.Sex==\"male\"].groupby(\"Survived\").PassengerId.count()","b9c91c6e":"female = df[df.Sex==\"female\"].groupby(\"Survived\").PassengerId.count()","ec3e0ecb":"fig4, ax4 = plt.subplots()\nax4.pie(male, labels=['not survived','survived'], autopct='%1.2f%%')\nplt.title(\"Male\")\nplt.show()","04bc2dcf":"fig5, ax5 = plt.subplots()\nax5.pie(female, labels=['not survived','survived'], autopct='%1.2f%%')\nplt.title(\"Female\")\nplt.show()","4b4ff2b6":"survived_age_df=df[df.Survived==1][[\"Survived\",\"Age\"]]\nnot_survived_age_df=df[df.Survived==0][[\"Survived\",\"Age\"]]","69410988":"fig6, ax6 = plt.subplots()\nax6.bar([\"survived\",\"not_survived\"],[survived_age_df[\"Age\"].mean(),not_survived_age_df[\"Age\"].mean()])\nax6.set_ylabel(\"Age Means\")\nplt.show()","9e9558d5":"survived_fare_df = df[df.Survived==1][[\"Survived\",\"Fare\"]]\nnot_survived_fare_df = df[df.Survived==0][[\"Survived\",\"Fare\"]]","5772edb3":"not_survived_fare_df.max()","f01f6e9a":"survived_fare_df.max()","c4ca4cf0":"fig7, ax7 = plt.subplots()\nax7.bar([\"survived\",\"not_survived\"],[survived_fare_df[\"Fare\"].mean(),not_survived_fare_df[\"Fare\"].mean()])\nax7.set_ylabel(\"Fare Means\")\nplt.show()","47adc672":"from sklearn.preprocessing import LabelEncoder","e1acbbc2":"encoder = LabelEncoder()","cf57929c":"df[\"Sex\"] = encoder.fit_transform(df[\"Sex\"]) # 1 -> male, 0 -> female","bec2cc23":"df.head()","7c4c0c93":"list(df.Embarked.unique())","2c2976fd":"encoder.fit_transform(list(df.Embarked.unique()))","2ed384de":"df.Embarked = encoder.fit_transform(df.Embarked)","022ed2b5":"df.head()","8d28b489":"model_df = df.drop([\"Name\",\"Ticket\"], axis=1)","504bb4f3":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, confusion_matrix, plot_confusion_matrix","76c6b42a":"X = model_df.drop(\"Survived\", axis=1).values\ny = model_df[\"Survived\"].values","2ebfea53":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)","abf04e66":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)","73dcb3db":"from sklearn.linear_model import LogisticRegression","d16f0b5c":"model_logreg = LogisticRegression()\nmodel_logreg.fit(X_train, y_train)\ny_preds_logreg = model_logreg.predict(X_test)","a793d942":"logreg_acc = accuracy_score(y_test, y_preds_logreg)\nlogreg_acc","3c20f6d1":"plot_confusion_matrix(model_logreg, X_test, y_test, normalize=\"true\", cmap=\"Greys\")\nplt.title(\"Normalized Confusion Matrix\\nLogisticRegression\")\nplt.show()","f3ced761":"from sklearn.naive_bayes import GaussianNB","e6c54650":"model_gauss = GaussianNB()\nmodel_gauss.fit(X_train, y_train)\ny_preds_gauss = model_gauss.predict(X_test)","06e37236":"gauss_acc = accuracy_score(y_test, y_preds_gauss)\ngauss_acc","5bbc5555":"plot_confusion_matrix(model_gauss, X_test, y_test, normalize=\"true\", cmap=\"Greys\")\nplt.title(\"Normalized Confusion Matrix\\nGaussianNB\")\nplt.show()","66acab2c":"from sklearn.ensemble import RandomForestClassifier","04d6d224":"model_randtree = RandomForestClassifier()\nmodel_randtree.fit(X_train, y_train)\ny_preds_randtree = model_randtree.predict(X_test)","ebd2d0be":"randtree_acc = accuracy_score(y_test, y_preds_randtree)\nrandtree_acc","abe9d2bc":"plot_confusion_matrix(model_randtree, X_test, y_test, normalize=\"true\", cmap=\"Greys\")\nplt.title(\"Normalized Confusion Matrix\\nRandomForestClassifier\")\nplt.show()","b070472d":"from sklearn.neural_network import MLPClassifier","16b36a7f":"model_mlp = MLPClassifier()\nmodel_mlp.fit(X_train, y_train)\ny_preds_mlp = model_mlp.predict(X_test)","b5ca937b":"mlp_acc = accuracy_score(y_test, y_preds_mlp)\nmlp_acc","ceb550c2":"plot_confusion_matrix(model_mlp, X_test, y_test, normalize=\"true\", cmap=\"Greys\")\nplt.title(\"Normalized Confusion Matrix\\nMLPClassifier\")\nplt.show()","2c0fd5a4":"from sklearn.neighbors import KNeighborsClassifier","ddd0f7c8":"model_kneigh = KNeighborsClassifier()\nmodel_kneigh.fit(X_train, y_train)\ny_preds_kneigh = model_kneigh.predict(X_test)","911fbe54":"kneigh_acc = accuracy_score(y_test, y_preds_kneigh)\nkneigh_acc","2b27ac77":"plot_confusion_matrix(model_kneigh, X_test, y_test, normalize=\"true\", cmap=\"Greys\")\nplt.title(\"Normalized Confusion Matrix\\nKNeighborsClassifier\")\nplt.show()","e853ce6d":"compare_dict = {\"Model Name\": [\"LogisticRegression\", \"GaussianNB\", \"RandomForestClassifier\", \"MLPClassifier\", \"KNeighborsClassifier\"], \n                \"Accuracy\": [logreg_acc, gauss_acc, randtree_acc, mlp_acc, kneigh_acc]}\ncompare_df = pd.DataFrame(compare_dict)\ncompare_df.sort_values(by=[\"Accuracy\"], ascending=False)","d31ef53a":"**GaussianNB**","4926baaf":"Now we will fill in 2 missing values \u200b\u200bof the variable named Embarked. Since there are only 2 missing values, I will fill them with whatever value is the most in Embarked, assuming that the values \u200b\u200bwe fill in these data will not have much effect on the model we will create.","cec33202":"## Modeling","dd1e92d9":"As you can see, there is no missing value in our data anymore. Now that we are done with the missing data, we can start to examine the relationships of the variables in the data set.","56acc58a":"**KNeighborsClassifier**","6ea30509":"**4. Fare - Survived**","85405b02":"In order to decide how to fill in the missing data in the Age column, let's examine the relationship of the Age variable with the other variables by temporarily removing the missing data from the data.","ee188037":"**What are we have data types?**","8b8f706b":"## Fill Missing Values","ada5c3dd":"**1. Pclass - Survived**","c4a1d51d":"**MLPClassifier**","ecf3cedc":"***Categorical ->*** Survived, Sex, Embarked <br>\n***Ordinal ->*** Pclass <br>\n***Numerical(continous) ->*** Age, Fare <br>\n***Numerical(discrete) ->*** PassengerID, SibSp, Parch","f2d7b335":"**Label Encoding**","77c5fbc0":"\nWhen we examine survival rates by gender, it is seen that women survive much more.","7ba6ca52":"Obviously, as the value of the ticket increases, the survival rate increases.","50612cb5":"S -> 2,  C -> 0,  Q -> 1","df96777c":"## Compare Models","6129e755":"**Target Variable Counts**","dd519744":"When we applied the groupby function to the 'Age' variable according to the 'Survived' variable, the average age of those who lost their lives was 30.6, while the average age of the survivors was 28.3.<br> We will fill in the 'Age' variable according to the value of the 'Survived' variable. For those with Survived==0, a value of 28.3 will be assigned, while a value of 30.6 will be assigned for those with Survived == 1.","901f65e5":"**2. Sex - Survived**","39a55a94":"In order to use the Age variable, which is a categorical variable, in machine learning algorithms, we need to convert it to a numeric value. Thanks to LabelEncoder, we can do this easily.","72118e6b":"**RandomForestClassifier**","92ecea04":"When we calculate the average of the age variables that we group according to the situations where the Survived variable is 0 or 1, we see that the two groups have values \u200b\u200bclose to each other. Therefore, we assume that there is no effective relationship between the Age variable and the Survived variable.","1ac81438":"**LogisticRegression**","af16bcaf":"As you can see, most of them were taken from the S port. I'll fill in the missing values with the S value.","3ac1e98e":"## Relationship Between Variables","6efd236b":"There are missing data in our Cabin, Age, and Embarked variables. Especially there is a lot of missing data in the Cabin variable. Dropping the Cabin variable seems like a logical decision.","237f1f94":"As we can see when we examine the PClass variable, the value of the ticket, in other words, the higher the price, the higher the survival rate.","c61d24b2":"**3. Age - Survived**"}}