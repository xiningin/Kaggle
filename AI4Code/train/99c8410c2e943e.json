{"cell_type":{"245585e5":"code","490f654e":"code","0bd7a1da":"code","007c79cb":"code","c1e24d1c":"code","13d18b59":"code","f2261967":"code","7e616803":"code","a1574696":"code","9fd063bb":"code","5fef5742":"code","792e85d4":"code","ec7382d3":"code","276c92e8":"code","aab6c4d5":"code","dbad747f":"code","c88010b3":"markdown","b12be87a":"markdown","99348700":"markdown","ef4dde79":"markdown","c7bd2a84":"markdown","981a1593":"markdown","dbcc7fd8":"markdown","34a267c3":"markdown","2f853274":"markdown","ab213ce6":"markdown","a00a8bc0":"markdown","50a95978":"markdown","7e7a4828":"markdown","e6015785":"markdown","8dd816bd":"markdown","e9f91e06":"markdown","2fc56696":"markdown","56bf8a4a":"markdown","3c87756a":"markdown","ee6eb011":"markdown","9233046c":"markdown","5478a44e":"markdown","e327f776":"markdown"},"source":{"245585e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport json\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","490f654e":"youtube_df = pd.read_csv('\/kaggle\/input\/youtube-new\/USvideos.csv') # load the csv file as a DataFrame\nyoutube_df.head() # display the first 5 rows by default","0bd7a1da":"youtube_df.columns # display the columns ","007c79cb":"# As shown in the displayed DataFrame above, each row correlates to a video. \nyoutube_df.shape[0] # display the number of rows only","c1e24d1c":"# 1. replace category_id numbers with category_id names from .json file\nid_dict = {}\n\nwith open('\/kaggle\/input\/youtube-new\/US_category_id.json', 'r') as file:\n    data = json.load(file)\n    for category in data['items']:\n        id_dict[int(category['id'])] = category['snippet']['title']\n\nyoutube_df['category_id'] = youtube_df['category_id'].map(id_dict)","13d18b59":"# 2. create '''youtube''' with relevant columns from youtube_df \nyoutube = youtube_df[['video_id','title', 'channel_title', 'category_id','views', 'likes', 'dislikes']]\n\n# Display the last three rows of youtube_trending \nyoutube.tail(3)","f2261967":"# Hint: use round() and .mean()\navg_views = round(youtube['views'].mean()) # reference 'views' by its key name\navg_views # return avg_views value","7e616803":"condition = youtube[youtube.views >= avg_views].shape[0] # find number of videos that meets condition\nround((condition\/youtube.shape[0])*100) # compute percentage and round to nearest whole figure","a1574696":"# create ```sentiment``` column accordingly\nyoutube['sentiment'] = round(youtube['dislikes']\/(youtube['likes']+youtube['dislikes'])*100)\n\n# take the average of the column and return the value\navg_senti = youtube['sentiment'].mean()\navg_senti","9fd063bb":"# for the sake of being concise, we've directly modified the matplotlib object returned by the .plot() method\n# you could plot these two scatter plots separately and still see the relationship!\nax1 = youtube.plot(kind='scatter', x='views', y='likes', color='g')   # likes are in green \nax2 = youtube.plot(kind='scatter', x='views', y='dislikes', color='r', ax=ax1) # dislikes are in red\nax2.set_ylabel('viewer interactions (likes\/dislikes)')","5fef5742":"youtube.groupby('title')['views','sentiment'].mean().sort_values('views', ascending=False).head()","792e85d4":"# return the top 10 categories by trending video frequency using .value_counts()\nyoutube['category_id']\\\n    .value_counts()\\","ec7382d3":"# recall variations of ```.plot()```\ntotal_views = youtube.groupby('category_id')['views'].sum().sort_values(ascending=False).head(10)\ntotal_views.plot.barh()","276c92e8":"average_views = youtube.groupby('category_id')['views'].mean().sort_values(ascending=False).head(10)\naverage_views.plot.barh()","aab6c4d5":"youtube.groupby('channel_title')['title'].size().sort_values(ascending=False).head(10)","dbad747f":"youtube.groupby('channel_title')['views'].mean().sort_values(ascending=False).head(10)","c88010b3":"We have a lot of information \u2014 the title, channel, and date that videos were published; the date the video started trending; comment and rating permissions; viewer interactions; descriptions; video error or removal; and unique IDs. \n\nWe won't be needing data from all of these fields for today's exercises. Additionally, the category_id values are numbers rather than names. Before we move on, let's modify things so that:\n1. Category_id column values match the values from the .json file of category names included by the publisher of this data set \n2. The dataframe contains only the columns relevant to today's analysis and is renamed  as ```youtube_trending``` \n\nThen display the last three rows of our new ```youtube_trending``` DataFrame to see if we've successfully made these changes.\n\n***This step is not essential to your understanding of pandas, but ensures that our dataset is more suited for further analysis.***","b12be87a":"*If the above cell is ran individually, it will show that category_id values are NaN. If this occurs, please re-run this kernel from the first cell, and the category_id values should correctly show as their corresponding names.*","99348700":"# Trending Youtube Video Statistics: Intro to Pandas\nHi! This notebook will introduce and demonstrate basic commands from the pandas library for Python through exercises that utilize data provided by the Youtube API to extract insights and complete an exploratory data analysis of trending videos (as of 2018). When completed, we will have a better understanding of both pandas as well as what factors impact the trendiness of a Youtube video in the U.S.\n\nFirst, let's import pandas and our file paths by running the cell below.","ef4dde79":"Wow! Turns out that by views, an overwhelming 7 out of the 10 highest ranked channels by views are musician's Vevo Youtube channels, where they distribute music videos among other behind the scenes content. The two non Music category channels are Kylie Jenner and FoxStarHindi, a Bollywood movie distributor. ","c7bd2a84":"For our last section of analysis, we'll be focusing on ```channel_id``` values for trending videos. Similarly to our analysis of categories, we'll first look at which channels have the highest frequency of trending videos. The last new method we'll be using is:\n\n```.size()```records the numbers of rows in each group as a method of ```.groupby```\n* unlike ```value_sort```, it does not return frequencies in descending order by default.\n\n**1. Which channels have the most trending videos?**\n* group data by ```channel_title``` column \n* reference individual video ```title``` values and use ```.size()``` to return frequency \n* sort values in decreasing order \n* display the first 10 rows of values","981a1593":"# Sentiment Analysis\nFrom the above value, it's evident that trending videos have a very low percentage of dislikes on average, but keep in mind that on average, trending videos are getting 2.3 million views. 6.70% of 2.3 million views is 153,000+ dislikes (quite a few)! Something to consider when examining these trending videos is the impact of each atrribute on the \"trend-worthiness\" of each video. We will be exploring how categories and channels may affect trending performance later on in this EDA; right now, we'll establish the impact, if any, of negative viewer interactions with videos. \n\n**Methods for data visualization:**\n\n```.plot()```plots your DataFrame as a line graph, but pandas provides extensive options for other graph forms such as:\n* ```plot.bar()```: bar graph \n* ```plot.barh()```: horizontal bar graph\n* ```plot.scatter()```: scatter plot - accepts x-axis, y-axis, and color inputs\n\n**1. Plot two scattter plots:**\n* **one of likes per views for each trending video**\n* **one of dislikes per views for each trending video**","dbcc7fd8":"# Setting Benchmarks\n\nBefore we dive any deeper into our data, let's establish some benchmarks and address some basic assumptions. We will be utilizing the following methods for the next few exercises providing summary information to frame our analysis. \n\n**General:**\n\n```round(v,n)```rounds ```v``` value to ```n``` decimals (default n = 0)\n* i.e. round(4.27,1) would output 4.3\n\n**Methods for summarizing:**\n\n```.mean()```computes averages of rows\n\n```.sum()``` computes sum of rows\n\n**Methods for selecting:**\n\n```.iloc[row number,column number]```accepts both row number and column number inputs as indices. \n* If you only input a row number, ```.iloc``` will return a row; if both a row and column number are input, ```.iloc``` will return a specific cell of the DataFrame. ```.iloc``` also accepts a slice object, i.e. 1:7 \n\n```conditional statement```can be used to select elements that meet the conditional statement (any variety of ==, !=, <, >, <=, >=). \n* Formatted as df[```conditional statement```]\n","34a267c3":"Of the top 10 Youtube channels by trending video frequency, 2 of them are related to sports, 4 of them are related to talk shows, 2 of them are related to TV and shows, and one of them could be categorized as an educational or news related channel. It's quite interesting to compare this breakdown to our assessment of category popularity, as one might think that music channels would be on there considering their strength in numbers by category. Let's take it a step further and look at channel titles by views for our last analysis. \n\n**2. Which channels have the most views?**\n* utilize ```.groupby()```,```.mean()``` to account for repeat channel titles, ```.sort_values()```, and ```.head()```","2f853274":"**1. Load the USvideos.csv file as a DataFrame named ```youtube_df``` and display the first 5 rows ** \n\nThis will make it easier to manipulate and examine the data we are working with and show us what it looks like.","ab213ce6":"**3. Determine the number of trending video records compiled in this dataset.**\n\nKeep in mind that this dataset records trending videos on each day over extended periods. Though video titles may appear several times if they are trending for multiple days, they are still counted as individual records of trending videos. This will allow us to get a scope of how large our data set is.","a00a8bc0":"From these two bar graphs, we can see that the Music category not only exceeds in volume of views, but also in consistency across videos within its category. It's interesting to note that Entertainment has fallen to rank 5, whereas Gaming and Nonprofits & Acitivism (previously not even within top 10 for total views) are now within the top 4 of average views. ","50a95978":"**1. What is the average number of views across all trending videos rounded to the nearest whole number? Create a variable ```avg_views``` that represents this value.**\n\nYou can access specific columns within a DataFrame by referring to it by its column key name in the format ```df['column_name']```. We will be referencing the 'views' column for this task.","7e7a4828":"We can see from this scatter plot that while there is recognizably a positive relationship between views and likes, but there is undeniably a positive relationship, albiet much less dramatic, between views and dislikes. As the views on trending videos grow, so does their count for likes and dislikes which just goes to show that no matter what, people are going to dislike things. This also signals to us that getting more dislikes on Youtube does not heavily impact a video's trend-worthiness in a negative way. Let's test this further. \n\n\nPandas is helpful in that it allows us to perform split-apply-combine operations, essentially allowing us to group various data points together based on our own criteria and then performing methods on that subgroup only. The process involves splitting the data by column, applying a method of your choice, and combining them back together, hence the name. These operations are called by this method:\n\n```.groupby()```groups data by 'column name' input\n\nAnother method than can be used in conjuction with ```.groupby()``` is:\n\n```.sort_values('column_name', ascending = )``` sorts column values (default ascending = True) from smallest to greatest, vice versa if ascending = False \n\n**2. Using these two new commands, check if any of the top 5 ranked videos for views have a sentiment percentage higher than the average sentiment percentage.**\n\nStep breakdown:\n* group data by ```title``` column \n* reference ```views``` and ```sentiment``` columns\n* take the average of ```views``` and ```sentiment``` to aggregate data and avoid duplicate titles\n* sort ```views``` values from largest to smallest using ```.sort_values()```\n* print the first 5 rows using ```.head()```\n","e6015785":"**2. Display column names.**\n\nLet's see what aspects of each video we have available to analyze.","8dd816bd":"So far, we know that for a given trending video, the average number of views is 2360785. Only 20% of trending videos are at or above the average benchmark for views, which indicates that the distribution of views across trending videos is right-skewed. \n\nLet's learn more about viewer reactions and sentiment towards trending videos to see if they have positive, negative, or no impact on trending videos by examining the ratio of likes and dislikes on each video.\n\n**3.Of total reactions to videos (likes and dislikes), what is the average percentage of dislike reactions on a trending video?**\n\n**Create a new column named ```sentiment``` and name the average of the column values ```avg_senti```. New columns in DataFrames are created similarly to new key value pairs in dictionaries. Format: ```df['name of new column'] = value of new column```. **\n\nSentiment percentage values are equivalent to dislikes\/(likes + dislikes). The higher the value, the more negative of a reaction towards a video.","e9f91e06":"Unsurprisingly, the most popular category for trending videos by more than 3,000 videos is Entertainment, which expected from a video-sharing platform, but its ranking can possibly also be attributed to its loose definition, as what a viewer would consider entertainment could greatly vary from person to person. Ranked second and third are Music and Howto & Style \u2014 Youtube is generally regarded as the go-to platform for music video releases and free music access, and also hosts a large selection and variety of DIY projects, educational tutorials, and more. It may come as a surprise that People & Blogs is not rated higher, as Youtube essentially coined vlogging and many Youtubers have risen to fame for this exact reason.  \n\nNext, we'll compare the total views per category and the average views per category to see how categories hold up in terms of viewer consistency. \n\n**2. Which categories have the most views in total? Display the top 10 categories for both in a horizontal bar graph.**\n    * group data by ```category_id``` column \n    * reference ```views``` column and take the sum per category_id\n    * sort sum values in descending order\n    * display the first 10 rows \n    * plot the first 10 rows as a horizontal bar graph","2fc56696":"# In Conclusion: Insights and Takeaways\n\nFrom this EDA, this dataset indicated that:\n1. Negative interactions such as viewers disliking a video do not penalize trending videos, and are expected to rise in volume as views on the video rise.\n2. Even though other categories and other channels have a higher frequency of trending videos, videos in the Music category and released on music related channels are higher in volume and more consistent overall with the number of views received.\n\nIt would be interesting to visit this exercise with updated data that includes all of 2019, as this current dataset does not account for potential shifts in public interests, especially with the rise in popularity of Youtube Premium and the sudden effects of the COVID-19 pandemic. The sentiment analysis should also be restructured to include key words from or the most liked comments from each trending video to more accurately reflect viewer sentiment. \n\nPandas takeaways -- we learned about and executed these commands:\n* Display: ```.head()```, ```.tail()```\n* Data attributes: ```.columns```, ```.shape```\n* Select:  ```.iloc[]```, ```conditional selection```\n* Summarize: ```.sum()```, ```.mean()```\n* Sort: ```sort_values()```\n* Split-apply-combine: ```.groupby()```\n* Frequency counts: ```.groupby()```, ```.size()```, ```.value_counts()```\n* Plots: ```.plot.barh()```, ```.plot scatter()```\n* General: ```round()```\n\n\n","56bf8a4a":"This DataFrame further shows that negative sentiment from viewers does not necessarily negatively impact trending videos' status. As you can see in the second row, YouTube Rewind: The Shape of 2017|#YouTubeRewind has a whopping 33% sentiment percentage, indicating that for every two likes on that video, there was one dislike. It's more than 5 times the trending video average, and yet it has the second highest average views out of all trending videos in this dataset. ","3c87756a":"# Analysis by Channel","ee6eb011":"While Entertainment has the greatest frequency of trending videos, Music has the largest number of views by a long shot compared to other categories. Let's see which category comes out on top on average, as a test of viewer consistency across all trending videos within that category. \n\n**3. Which categories have the most views on average? Display the top 10 categories for both in a horizontal bar graph.**","9233046c":"# First Impressions\nThe dataset is a record of daily trending Youtube videos and includes several months of data from several country regions. Today we will be focusing on video statistics from the United States. Let's introduce some commands that will give us a better understanding of the structure, contents, and scope of the dataset and use them to complete the following tasks.\n\n```pd.read_csv()``` pandas function that reads .csv file and loads it as a DataFrame\n\n```.head(n)``` displays the first n rows of a DataFrame (default n = 5)\n\n```.tail(n)``` displays the last n rows of a DataFrame (default n = 5)\n\n```.columns``` returns the names of all columns in a DataFrame \n\n```.shape``` returns the number of (rows,columns). For example: (4,5) for 4 rows and 5 columns. Indivdiual values can be returned by index: df.shape[0] for rows or df.shape[1] for columns\n","5478a44e":"**2. What percentage of trending videos are at or above the average benchmark for views? Round to nearest whole figure.**\n\nUtilize ```conditional statements``` and aforementioned ```.shape```","e327f776":"# Analysis by Category\n\nBecause Youtube offers user-generated as well as corporate media videos, it has a huge variety of content. We can continue our analysis by breaking down our data based on video categories. This will provide an overview of how certain categories perform compared to others, and may uncover further insights about how people utilize Youtube's services as reflected in their content selection choices. \n\n**1. Which categories have the most trending videos? Display categories by video frequency in descending order.**\n\nLet's break this down into two steps:\n1. Compile all category ID values\n2. Determine the frequency at which each category ID appears and sort by number of appearances in decreasing order\n\nThis introduces a new method:\n\n```.value_counts()```, which returns a Series containing counts of unique values\n* ```value_counts()``` conveniently returns in descending order so that the first element is the most frequently-occuring one."}}