{"cell_type":{"09125fd7":"code","bbb46be0":"code","8ca32407":"code","d0914f9a":"code","2e784e35":"code","6ba5b1a6":"code","41a53096":"code","96a2b913":"code","2c204455":"code","04b48dd5":"code","c1d74684":"code","12f78645":"code","edd6019c":"code","d4d93f58":"code","91285633":"code","5713cb65":"code","e55ee714":"code","91fc31c8":"code","c673ee66":"code","0071945c":"code","ae6ad66a":"code","e69d8f55":"code","4ce8698e":"code","0a4d138b":"code","b5f9443a":"code","f8418f37":"code","df287fb7":"code","048c6b56":"code","eec3b974":"code","75d701c4":"code","b087682a":"code","6a727fb4":"code","7d1b791f":"code","187bb13e":"code","20236872":"code","0532dfa0":"code","0957c46f":"code","c47cf838":"code","379359d5":"code","4419bf4c":"code","889f482c":"code","c4e92deb":"code","7ddb1787":"markdown","a58c7ea3":"markdown","68d49d03":"markdown","a33e5ccd":"markdown","f45eb494":"markdown","6c7f5851":"markdown","4ad34818":"markdown","caea3154":"markdown","c94fc1a9":"markdown","20083ce6":"markdown","d2547f8a":"markdown","9d0695ca":"markdown","102b4e63":"markdown","b760b380":"markdown","7244eb7a":"markdown","937b364c":"markdown","008b89f5":"markdown","3c7e92ce":"markdown","2483e96f":"markdown","b3358624":"markdown","acc656a1":"markdown","250058b3":"markdown","16b59cff":"markdown","dd675d67":"markdown","274e9ae1":"markdown","99da5ed1":"markdown","357ba463":"markdown","8dbdf64c":"markdown","7f991375":"markdown","bf32b164":"markdown","839f3e6c":"markdown","6ae93c16":"markdown","ca15953b":"markdown","6a9123ce":"markdown","5e3e9ed8":"markdown","8f4e7f2b":"markdown","727c7cef":"markdown","b955a9ef":"markdown","d90cfead":"markdown","c298d13f":"markdown","27705170":"markdown","d8950fc4":"markdown","9a2adcd3":"markdown","af1af265":"markdown","8c528fa9":"markdown","48220f73":"markdown","ec35bbbf":"markdown","fb23bddd":"markdown","8a4fb98e":"markdown","ec295a85":"markdown"},"source":{"09125fd7":"# Import everything we need\n\nimport os\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt, image as mpimg\nfrom tqdm import tqdm\nfrom time import time\nfrom collections import Counter\nimport random\n\nimport tensorflow as tf\nfrom tensorflow.keras import models, layers, optimizers, utils, callbacks\nfrom tensorflow.python.keras.preprocessing.image import load_img, img_to_array\nfrom skimage.transform import resize\n\nimport re","bbb46be0":"# Set up all the paths\n\ntrain_dir = '..\/input\/ocular-disease-recognition-odir5k\/ODIR-5K\/Training Images'\ntest_dir = '..\/input\/ocular-disease-recognition-odir5k\/ODIR-5K\/Testing Images'\nmain_dir = '..\/input\/ocular-disease-recognition-odir5k\/ODIR-5K'\nwork_dir = '..\/working'\n","8ca32407":"data = pd.read_excel(os.path.join(main_dir,'data.xlsx'), sheet_name=None)\ndata = pd.DataFrame(data[list(data.keys())[0]])\n\ndata","d0914f9a":"data_num = data.copy()[['Patient Age', 'Patient Sex', 'N', 'D','G','C','A','H','M','O']]\ndata_num['Patient Sex'] = data_num['Patient Sex'].apply(lambda x:0  if x=='Female' else 1) # we encode sex: Female => 0; Male => 1\n\ndata_num.hist(figsize=(15,12))\n\nplt.show()","2e784e35":"data_num_corr = data_num.corr()\ndata_num_corr","6ba5b1a6":"cutoff = .08\ndata_disease_corr = data_num_corr.iloc[3:,3:].copy() # we cut off everything, except the information about correlation between specific conditions\ndata_disease_corr = data_disease_corr.applymap(lambda x:np.NaN if abs(x)<cutoff or x==1 else x ).round(2) # we set a cutoff point at .08 and round data to the second decimal point\ndata_disease_corr","41a53096":"data_diseases = data.iloc[:,-7:].copy() # a slice of data containing only information about diseases occuring in each patient\ndisease_counter = Counter()\nfor i, row in data_diseases.iterrows():\n    disease_counter[row.sum()]+=1\ndisease_counter","96a2b913":"# Let's create a dictionary to store information about keyphrases used in the diagnosis for each disease and the frequency of their usage\nconditions = list(data.columns[-8:])\nconditions_keyphrases = {condition: Counter() for condition in conditions}\n\nfor i, row in data.iterrows():\n    # Keyphrases used in the diagnosis for each eye:\n    keyphrases = list(set(row['Left-Diagnostic Keywords'].replace('\uff0c',',').split(',') + row['Right-Diagnostic Keywords'].replace('\uff0c',',').split(',')))\n        # Keyphrases are both split with an ordinary comma (',') and a 'weird' comma ('\uff0c'), so we replace all the cases in which the latter occurs with the first one\n        #  and only then split the string of keywords into keyphrases. We turn it into a set to eliminate any doubles and then into a list again because we may want to\n        #  use some list-specific methods, unavailable for sets. \n    \n    # For every condition diagnosed\n    for condition in conditions:\n        if row[condition]==1:\n            # Add 1 to the counter for the keyphrases present\n            for keyphrase in keyphrases:\n                conditions_keyphrases[condition][keyphrase] += 1\n\n# Sort the dictionary for each condition in the descending order:\ndef dicsort(d):\n    d_items_rev = [ (value, key) for (key, value) in d.items() ]\n    d_items_sorted = [ (key, value) for (value, key) in sorted(d_items_rev, reverse=True) ]\n    d_sorted = {key: value for (key, value) in d_items_sorted}\n    return d_sorted\n\nconditions_keyphrases = {condition: dicsort(conditions_keyphrases[condition]) for condition in conditions_keyphrases.keys()}\n\nconditions_keyphrases","2c204455":"conditions_keyphrases_metadata_1 = {\n    'n_keyphrases': {condition: len(conditions_keyphrases[condition]) for condition in conditions_keyphrases.keys()},\n    'n_occurences': {condition: np.sum(list(conditions_keyphrases[condition].values())) for condition in conditions_keyphrases.keys()}\n}\n\nconditions_keyphrases_metadata_1","04b48dd5":"conditions_keyphrases = {condition: Counter() for condition in conditions}\n\nfor i, row in data.iterrows():\n    # If there was only one condition diagnosed, ('N' included) which one is it?\n    if row.iloc[-8:].sum()==1:\n        condition = row.index[len(row.index)-8 + row.iloc[-8:].astype(np.int32).argmax()]\n        # Keyphrases used in the diagnosis for each eye\n        keyphrases_L = row['Left-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n        keyphrases_R = row['Right-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n        keyphrases = []    \n        # If this patient was not diagnosed as healthy\n        if condition!='N':\n            # If this eye was not diagnosed as healthy, add its diagnostic keyphrases to the list of keyphrases\n            if 'normal fundus' not in keyphrases_L:\n                keyphrases += keyphrases_L\n            if 'normal fundus' not in keyphrases_R:\n                keyphrases += keyphrases_R\n        # If this patient was diagnosed as healthy, then both of his eyes should be ascribed to category 'N'\n        else:\n            keyphrases += keyphrases_L + keyphrases_R\n\n        # Add the keyphrases to the conditions_keyphrases dictionary:\n        for keyphrase in keyphrases:\n            conditions_keyphrases[condition][keyphrase] += 1\n\n\nconditions_keyphrases = {condition: dicsort(conditions_keyphrases[condition]) for condition in conditions_keyphrases.keys()}\n\nconditions_keyphrases_metadata_2 = {\n    'n_keyphrases': {condition: len(conditions_keyphrases[condition]) for condition in conditions_keyphrases.keys()},\n    'n_occurences': {condition: np.sum(list(conditions_keyphrases[condition].values())) for condition in conditions_keyphrases.keys()}\n}","c1d74684":"print('\\tInclusive, cross-pollination-prone method:')\nprint('n_keyphrases:')\nprint(conditions_keyphrases_metadata_1['n_keyphrases'])\nprint('n_occurences:')\nprint(conditions_keyphrases_metadata_1['n_occurences'])\n\nprint('\\n')\n\nprint('\\tExclusive, cross-pollination-resistant method:')\nprint('n_keyphrases:')\nprint(conditions_keyphrases_metadata_2['n_keyphrases'])\nprint('n_occurences:')\nprint(conditions_keyphrases_metadata_2['n_occurences'])","12f78645":"conditions_keyphrases","edd6019c":"# A dictionary which will contain a frequency of keyphrases occuring within each condition (i.e. what fraction of cases within each condition had a given keyphrase)\nconditions_keyphrases_freq = conditions_keyphrases.copy()\nfor condition in conditions_keyphrases_freq:\n    for keyphrase in conditions_keyphrases_freq[condition]:\n        conditions_keyphrases_freq[condition][keyphrase] = 0\n        \nconditions_counter = Counter() # Counter for number of individual images displaying signs of each condition\n\nfor i, row in data.iterrows():\n    keyphrases_L = row['Left-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    keyphrases_R = row['Right-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    for condition in conditions:\n        # If at least one eye of this patient has the following condition\n        if row[condition]==1:\n            # If any keyphrase characteristic of this condition was found in the diagnostic keyphrases for the left eye...\n            if any (keyphrase in keyphrases_L for keyphrase in conditions_keyphrases_freq[condition]):\n                # ...then we can assume that this eye displays symptoms of this condition. We add 1 to the counter for cases of this condition.\n                conditions_counter[condition] += 1\n                # For any keyphrase used to describe it...\n                for keyphrase in keyphrases_L:\n                    # ...we check if it is associated with this condition. If it is, we add 1 to the counter for occurences of keyphrases for this condition.\n                    if keyphrase in conditions_keyphrases_freq[condition]:\n                        conditions_keyphrases_freq[condition][keyphrase] += 1 \n            # We repeat the same for the right eye:\n            if any (keyphrase in keyphrases_R for keyphrase in conditions_keyphrases_freq[condition]):\n                conditions_counter[condition] += 1\n                for keyphrase in keyphrases_R:\n                    if keyphrase in conditions_keyphrases_freq[condition]:\n                        conditions_keyphrases_freq[condition][keyphrase] += 1\n    \n# To obtain percentages, we divide each keyphrase count by the number of cases of the condition (i.e. individual eyes displaying characteristic symptoms)\nfor condition in conditions_keyphrases_freq:\n    for keyphrase in conditions_keyphrases_freq[condition]:\n        conditions_keyphrases_freq[condition][keyphrase] = np.round(conditions_keyphrases_freq[condition][keyphrase]\/conditions_counter[condition], 3)\n\n# Sorting:\nconditions_keyphrases_freq = {condition: dicsort(conditions_keyphrases_freq[condition]) for condition in conditions_keyphrases_freq}\n\nconditions_keyphrases_freq","d4d93f58":"all_keyphrases = []\nfor condition in conditions:\n    all_keyphrases += [keyphrase for keyphrase in conditions_keyphrases_freq[condition] if keyphrase not in all_keyphrases]\n\nkeyphrases_from_columns = []\nfor keyphrases_L, keyphrases_R in zip(data['Left-Diagnostic Keywords'].values, data['Right-Diagnostic Keywords'].values):\n    keyphrases_from_columns += [keyphrase for keyphrase in keyphrases_L.replace('\uff0c',',').split(',') if keyphrase not in keyphrases_from_columns]\n    keyphrases_from_columns += [keyphrase for keyphrase in keyphrases_R.replace('\uff0c',',').split(',') if keyphrase not in keyphrases_from_columns]\n\nlen(all_keyphrases), len(keyphrases_from_columns)","91285633":"def make_keyphrases_df():\n    keyphrases_df = pd.DataFrame( {keyphrase: {condition: 0 for condition in conditions} for keyphrase in keyphrases_from_columns} ).T\n    keyphrases_df['Predictive power'] = 0 # Predictive power - how many occurrences of this keyphrase were associated with the most frequent class\n    return keyphrases_df\n\nkeyphrases_excl = make_keyphrases_df()\nkeyphrases_incl = make_keyphrases_df()\nkeyphrases_incl","5713cb65":"# We reinitialize both DataFrames to avoid errors\nkeyphrases_excl = make_keyphrases_df()\nkeyphrases_incl = make_keyphrases_df()\n\nfor i, row in data.iterrows():\n    # 1.\n    only_one_condition = bool(row[-8:].sum()==1)\n    # 2.\n    keyphrases_L = row['Left-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    keyphrases_R = row['Right-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    for condition in conditions:\n        # 3.\n        if row[condition]==1:\n            # Left eye\n            if any(keyphrase in keyphrases_L for keyphrase in conditions_keyphrases[condition]):\n                for keyphrase in keyphrases_L:\n                    # 3.1.\n                    keyphrases_incl.loc[keyphrase, condition] += 1\n                    # 3.2.\n                    if only_one_condition:\n                        keyphrases_excl.loc[keyphrase, condition] += 1\n            # Right eye:\n            if any(keyphrase in keyphrases_R for keyphrase in conditions_keyphrases[condition]):\n                for keyphrase in keyphrases_R:\n                    # 3.1.\n                    keyphrases_incl.loc[keyphrase, condition] += 1\n                    # 3.2.\n                    if only_one_condition:\n                        keyphrases_excl.loc[keyphrase, condition] += 1\n            \n\nkeyphrases_excl['Predictive power'] = (keyphrases_excl.max(axis=1) \/ keyphrases_excl.sum(axis=1)).replace(np.NaN, 0)\nkeyphrases_incl['Predictive power'] = (keyphrases_incl.max(axis=1) \/ keyphrases_incl.sum(axis=1)).replace(np.NaN, 0)","e55ee714":"keyphrases_excl","91fc31c8":"keyphrases_specificity = pd.DataFrame(\n    np.zeros(shape=(len(all_keyphrases), 6)),\n    index = all_keyphrases,\n    columns = ['condition (excl.)','specificity (excl.)', 'condition (incl.)', 'specificity (incl.)', 'condition specificity agreement','specificity discrepancy'],\n    dtype='object'\n)\n\nfor keyphrase, row in keyphrases_specificity.iterrows():\n    row.iloc[0] = conditions[keyphrases_excl.loc[keyphrase,:].argmax()]\n    row.iloc[1] = keyphrases_excl.loc[keyphrase, 'Predictive power']\n    row.iloc[2] = conditions[keyphrases_incl.loc[keyphrase,:].argmax()]\n    row.iloc[3] = keyphrases_incl.loc[keyphrase, 'Predictive power']\n    row.iloc[4] = row.iloc[0]==row.iloc[2]\n    row.iloc[5] = row.iloc[1]-row.iloc[3]\nkeyphrases_specificity","c673ee66":"keyphrases_incl.loc['normal fundus']","0071945c":"suspicious_rows = []\nfor i, row in data.query('G==1 or C==1 or M==1 or O==1').iterrows():\n    # 1.\n    only_one_condition = bool(row[-8:].sum()==1)\n    # 2.\n    keyphrases_L = row['Left-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    keyphrases_R = row['Right-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    if ('normal fundus' in keyphrases_L and len(keyphrases_L)!=1) or ('normal fundus' in keyphrases_R and len(keyphrases_R)!=1):\n        suspicious_rows.append(row)\n    \n    \nsuspicious_rows = pd.DataFrame(suspicious_rows)\nsuspicious_rows","ae6ad66a":"for condition in conditions:\n    print(condition, 'lens dust' in conditions_keyphrases[condition].keys())","e69d8f55":"keyphrases_specificity.loc['lens dust']","4ce8698e":"keyphrases_incl.loc['lens dust']","0a4d138b":"keyphrases_O = keyphrases_incl.copy().loc[list(conditions_keyphrases['O'].keys())]\nkeyphrases_O['O-fraction'] = keyphrases_O['O'] \/ data['O'].sum()\nkeyphrases_O['non-O'] = 0\n\nfor i, row in data.query('O!=1').iterrows():\n    keyphrases_L = row['Left-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    keyphrases_R = row['Right-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    for keyphrase in keyphrases_O.index:\n        if keyphrase in keyphrases_L or keyphrase in keyphrases_R:\n            keyphrases_O.loc[keyphrase, 'non-O']+=1\n\nkeyphrases_O","b5f9443a":"try:\n    keyphrases_O.drop(['lens dust', 'low image quality'], axis=0, inplace=True)\nexcept Exception as e:\n    pass\nkeyphrases_O.sort_values(by='O-fraction', axis=0, inplace=True, ascending=False)\nkeyphrases_O","f8418f37":"keyphrases_O['O-fraction'].sum()","df287fb7":"keyphrases_O_chosen = list(keyphrases_O.iloc[:20].index)\nprint(keyphrases_O.iloc[:20,-2].sum()) # O-fraction is the penultimate column","048c6b56":"diagnostic_keyphrases = {\n    'N' : ['normal fundus'],\n    'D' : ['nonproliferative retinopathy', 'non proliferative retinopathy', 'proliferative retinopathy'],\n    'G' : ['glaucoma'],\n    'C' : ['cataract'],\n    'A' : ['age-related macular degeneration'],\n    'H' : ['hypertensive'],\n    'M' : ['myopi'],\n    'O' : keyphrases_O_chosen\n}\n\n","eec3b974":"# We reinitialize both DataFrames to avoid errors\nkeyphrases_excl_new = make_keyphrases_df()\nkeyphrases_incl_new = make_keyphrases_df()\n\nfor i, row in data.iterrows():\n    # 1.\n    only_one_condition = bool(row[-8:].sum()==1)\n    # 2.\n    keyphrases_L = row['Left-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    keyphrases_R = row['Right-Diagnostic Keywords'].replace('\uff0c',',').split(',')\n    for condition in conditions:\n        # 3.\n        if row[condition]==1:\n            # Left eye\n            if any(keyphrase in keyphrases_L for keyphrase in diagnostic_keyphrases[condition]):\n                for keyphrase in keyphrases_L:\n                    # 3.1.\n                    keyphrases_incl_new.loc[keyphrase, condition] += 1\n                    # 3.2.\n                    if only_one_condition:\n                        keyphrases_excl_new.loc[keyphrase, condition] += 1\n            # Right eye:\n            if any(keyphrase in keyphrases_R for keyphrase in diagnostic_keyphrases[condition]):\n                for keyphrase in keyphrases_R:\n                    # 3.1.\n                    keyphrases_incl_new.loc[keyphrase, condition] += 1\n                    # 3.2.\n                    if only_one_condition:\n                        keyphrases_excl_new.loc[keyphrase, condition] += 1\n            \n\nkeyphrases_excl_new['Predictive power'] = (keyphrases_excl_new.max(axis=1) \/ keyphrases_excl_new.sum(axis=1)).replace(np.NaN, 0)\nkeyphrases_incl_new['Predictive power'] = (keyphrases_incl_new.max(axis=1) \/ keyphrases_incl_new.sum(axis=1)).replace(np.NaN, 0)","75d701c4":"keyphrases_incl_new.loc['normal fundus']","b087682a":"fundi_images = {condition:[] for condition in conditions}\n\nfor i, row in data.iterrows():\n    image_L = row['Left-Fundus']\n    image_R = row['Right-Fundus']\n    if row['N']==1:\n        fundi_images['N'] += [image_L, image_R]\n        continue\n    \n    # This time there is no need for splitting the keyphrases from strings into lists of keyphrases \n    keyphrases_L = row['Left-Diagnostic Keywords']\n    keyphrases_R = row['Right-Diagnostic Keywords']\n\n    diagnosed_conditions = []\n    for condition in conditions[1:]:\n        if row[condition]==1:\n            diagnosed_conditions.append(condition)\n            \n    if 'normal fundus' in keyphrases_L:\n        fundi_images['N'].append(image_L)\n        for condition in diagnosed_conditions:\n            fundi_images[condition].append(image_R)\n        continue\n    if 'normal fundus' in keyphrases_R:\n        fundi_images['N'].append(image_R)\n        for condition in diagnosed_conditions:\n            fundi_images[condition].append(image_L)\n        continue\n    \n    for condition in diagnosed_conditions:\n        if any(keyphrase in keyphrases_L for keyphrase in diagnostic_keyphrases[condition]):\n            fundi_images[condition].append(image_L)\n        if any(keyphrase in keyphrases_R for keyphrase in diagnostic_keyphrases[condition]):\n            fundi_images[condition].append(image_R)\n            ","6a727fb4":"for condition in conditions:\n    print(condition, len(fundi_images[condition]), data[condition].sum())","7d1b791f":"np.sum([len(fundi_images[condition]) for condition in conditions])","187bb13e":"fundi_images_rev = {}\nfor condition in conditions:\n    for im in fundi_images[condition]:\n        if im not in fundi_images_rev:\n            fundi_images_rev[im] = [condition]\n        else:\n            fundi_images_rev[im] = sorted(fundi_images_rev[im]+[condition])\n            \nconditions_correlation = pd.DataFrame(np.zeros(shape=(7,7)), columns=conditions[1:], index=conditions[1:], dtype=np.int32)\n\nfor im in fundi_images_rev:\n    if len(fundi_images_rev[im])>1:\n        for i in range(len(fundi_images_rev[im])):\n            for ii in range(len(fundi_images_rev[im])):\n                if i!=ii:\n                    \n                    conditions_correlation.loc[fundi_images_rev[im][i],fundi_images_rev[im][ii]] += 1\n    \nconditions_correlation","20236872":"print(data.query('D==1 & O==1').index.shape[0])\nprint(data.query('D==1 & H==1').index.shape[0])\nprint(data.query('G==1 & O==1').index.shape[0])","0532dfa0":"print('Total individual images: ', len(fundi_images_rev))","0957c46f":"images_per_condition_1 = {}\nfor condition in conditions:\n    images_per_condition_1[condition] = len(fundi_images[condition])\nimages_per_condition_1","c47cf838":"keyphrases_O_full = list(keyphrases_O.index)\ndiagnostic_keyphrases['O'] = keyphrases_O_full\n\nfundi_images = {condition:[] for condition in conditions}\n\nfor i, row in data.iterrows():\n    image_L = row['Left-Fundus']\n    image_R = row['Right-Fundus']\n    if row['N']==1:\n        fundi_images['N'] += [image_L, image_R]\n        continue\n    \n    # This time there is no need for splitting the keyphrases from strings into lists of keyphrases \n    keyphrases_L = row['Left-Diagnostic Keywords']\n    keyphrases_R = row['Right-Diagnostic Keywords']\n\n    diagnosed_conditions = []\n    for condition in conditions[1:]:\n        if row[condition]==1:\n            diagnosed_conditions.append(condition)\n            \n    if 'normal fundus' in keyphrases_L:\n        fundi_images['N'].append(image_L)\n        for condition in diagnosed_conditions:\n            fundi_images[condition].append(image_R)\n        continue\n    if 'normal fundus' in keyphrases_R:\n        fundi_images['N'].append(image_R)\n        for condition in diagnosed_conditions:\n            fundi_images[condition].append(image_L)\n        continue\n    \n    for condition in diagnosed_conditions:\n        if any(keyphrase in keyphrases_L for keyphrase in diagnostic_keyphrases[condition]):\n            fundi_images[condition].append(image_L)\n        if any(keyphrase in keyphrases_R for keyphrase in diagnostic_keyphrases[condition]):\n            fundi_images[condition].append(image_R)\n            ","379359d5":"images_per_condition_2 = {}\nfor condition in conditions:\n    images_per_condition_2[condition] = len(fundi_images[condition])","4419bf4c":"print(images_per_condition_1)\nprint(images_per_condition_2)","889f482c":"fundi_images_rev = {}\nfor condition in conditions:\n    for im in fundi_images[condition]:\n        if im not in fundi_images_rev:\n            fundi_images_rev[im] = [condition]\n        else:\n            fundi_images_rev[im] = sorted(fundi_images_rev[im]+[condition])\n            \nconditions_correlation = pd.DataFrame(np.zeros(shape=(7,7)), columns=conditions[1:], index=conditions[1:], dtype=np.int32)\n\nfor im in fundi_images_rev:\n    if len(fundi_images_rev[im])>1:\n        for i in range(len(fundi_images_rev[im])):\n            for ii in range(len(fundi_images_rev[im])):\n                if i!=ii:\n                    conditions_correlation.loc[fundi_images_rev[im][i],fundi_images_rev[im][ii]] += 1\n\nprint('Total number of individual images: ', len(fundi_images_rev))\nconditions_correlation","c4e92deb":"# First, let's give these two dictionaries less mouthful handles\n\ncon2img = fundi_images\nimg2con = fundi_images_rev \n\nimgdata_columns = ['Image', 'Patient Age', 'Patient Sex', *conditions]\nimgdata = []\n\nfor i, row in data.iterrows():\n    image_L = row['Left-Fundus']\n    image_R = row['Right-Fundus']\n    if image_L in img2con:\n        image_conditions = [int(condition in img2con[image_L]) for condition in conditions]\n        imgdata.append([image_L, row['Patient Age'], row['Patient Sex'], *image_conditions])\n    if image_R in img2con:\n        image_conditions = [int(condition in img2con[image_R]) for condition in conditions]\n        imgdata.append([image_R, row['Patient Age'], row['Patient Sex'], *image_conditions])\n\nimgdata = pd.DataFrame(imgdata, columns=imgdata_columns)\nimgdata['Patient Sex'] = imgdata['Patient Sex'].apply(lambda x:0  if x=='Female' else 1) # encode sex: 'Female'=>0, 'Male'=>1\nimgdata","7ddb1787":"# Keyphrases for image sorting","a58c7ea3":"Let's finally put our diagnostic keyphrases to the test, i.e. see how many images of fundi belonging to each class it will capture. We will compare these numbers to the total count of patients diagnosed with each condition in at least one of their eyes, although it's going to be an imperfect comparison, since this the original table itself does not tell us explicitly whether a given patient had only one eye affected with each disease diagnosed or both.","68d49d03":"So, our final set of diagnostic keyphrases is going to look as follows:","a33e5ccd":"# Basic Exploratory Data Analysis","f45eb494":"However, the above code allows for quite a substantial amount of keyphrase cross-pollination. If a patient is diagnosed with more than one condition, then each of these conditions will be ascribed keyphrase(s) characteristic of the other.\n\nAlso, the above code mixes the diagnoses for both eyes, treating them as one unit, which is definitely not preferable. Since, there are separate columns for keywords from diagnoses of left and right eye, we would expect that states of the left and the right eye may be quite different.\n\nTo handle both of these problems that, we run a modified code, which extracts keyphrases in the exact same way, but exclusively from patients with only one condition diagnosed.\n\nAlso, to see, whether we significantly skimmed out dictionary, we will save the size of each of its entries (i.e. number of keyphrases for each condition) and number of occurences of all keyphrases for each condition:","6c7f5851":"We need to make a list of all keyphrases used to describe patients with only one condition.\n\nBy the way, let's see if there are any keyphrases used only to describe patients with more than one condition. These we need to extract directly from the relevant columns of the dataframe. ","4ad34818":"So using the full set of diagnostic keyphrases we've managed to collect only 27 more images. So we could still do better, but I think that this is good enough and we are probably overdue for the diminishing returns ;)","caea3154":"We missed 28 keyphrases, but that's ok, since they're probably not very informative.","c94fc1a9":"Before moving on, let's see what keyphrases DataFrames we will obtain using this adjusted set of keyphrases.","20083ce6":"If they would not co-occur, we would expect them to add up to 1 (or very close).\n\nI will go with my gut feeling at take the first 20 keyphrases. This seems to capture at least a significant amount of all the 'O' cases.","d2547f8a":"We will make a separate dataframe, only for keyphrases associated with the 'other' class and add to it another column, which will tell us what fraction of all the 'O' cases had this keyphrase. We will also add information about the number of times this keyphrase was used to describe a case which was not assigned to this class.","9d0695ca":"Therefore, we will prepare (manually) a list of diagnostic keyphrases for each condition. The problem is that we have no keyphrase characteristic of the class 'other', so we need to use an aggregate of keyphrases, each of which should be highly specific for this class, although occurring only in a small fraction (1\/6 at most) of them.","102b4e63":"We see that 'normal fundus' keyphrase is over 97% specific, which means that in more than 2% of cases it was used to describe a retina displaying symptoms of some disease. We can see what that was, by looking at the previous dataframe.","b760b380":"In this section, I'm going to try to replicate the results of a study by Kim et al. (2020), in which they built a model based on the ResNet architecture to predict age and sex from the images of retinal fundi. They trained their models solely on the images of healthy fundi and then tested performance of these models on 4 separate test sets:\n* Healthy fundi\n* Fundi with symptoms of hypertension\n* Fundi with symptoms of diabetes mellitus\n* Fundi showing signs of prolonged smoking\n\nKeep in mind that they had an access to a much larger dataset, than ours (412 026 images) and that we will use a smaller version of ResNet (ResNet-50 instead of ResNet-152), so we should expect to reach the same level of performance.","7244eb7a":"This seems great! Except for 'lens dust' and 'low image quality' all these keyphrases occurred only in cases of patients assigned an 'other' diagnosis (although often with other non-'other' conditions). Thus, we could treat all of them as characteristic of this class, but for the sake of efficiency we will restrict ourselves to those with the highest 'O-fraction' value.\n\nLet's remove the two invalid keyphrases and sort this dataframe.","937b364c":"We can see a few interesting things here:\n\n1) The most prominent age group are people in about their 60s.\n\n2) There is slightly more males than females.\n\n3) Most patients are not healthy, but healthy patients are the most prevalent of all groups.\n\n4) The most prevalent non-healthy group are patients with diabetes, with \"other\" coming right after them.\n\n* Since this \"other\" category likely lumps many non-related and quite heterogenous conditions, it's going to be more efficient to focus on diabetic patients.\n\n* For now, we will build a model which will discriminate healthy retinas from those displaying signs of diabetes. Later we will test its performance how it performs on the images of retinas with signs of other diseases and see whether we can gain some insight from it.\n\nOne more thing: let's take a peek at correlations","008b89f5":"1) There is a small negative correlation between age and sex. Arbitrarily, we encoded males as 1s and females as 0s. If we did the opposite, the correlation would be of the same magnitude, but positive. This means that males in our data are little younger than females.\n\n2) Older people seem to be more likely to develop in their retinas signs of glaucoma and cataract, but less likely to develop signs of diabetes. There does not seem to be any significant difference between sexes in susceptibility to any disease (or lack thereof).\n\n3) Being 'Normal' correlates negatively with any other condition. That's what we would expect, since a patient can only be classified as 'Normal' if they weren't diagnosed as having any other condition.\n\n4) What about between-disease correlation? Let's prune our correlation matrix, to make it easier to read. We will (again, a little arbitrarily), set the cutoff point for a meaningful correlation at the absolute value of 0.08.","3c7e92ce":"1) Diabetes correlates negatively with glaucoma, AMD and myopia\n\n2) AMD correlates negatively with 'other diseases'\n\nThese are all, however, very small correlations, so they don't necesserily have to point to anything interesting. If there is some 'protective effect', it's probably due to patients with already existing condition taking more care of their eyes.\n\n> Let's now see how many of our patients have more than one disease diagnosed","2483e96f":"Let's see how many images we collected in all classes:","b3358624":"Let's now take parts of the data, which we can easily express numerically and look at their their distribution","acc656a1":"Once again, we are going to iterate over all the rows of dataframe. For each row:\n\n1. If the patient was healthy ('N'), we add images of both of their eyes to the list of 'N' images and go to the next row.\n\n2. Otherwise, we extract the keyphrases used to describe both retinal fundi.\n\n3. We make the list of all the conditions this patient was diagnosed with.\n\n4. If one of the eyes is healthy, this means, that all the conditions diagnosed affect the other eye. In such a case, we can add the former to the list of 'N' images and the latter to the lists of images for each condition diagnosed.\n\n5. Otherwise (i.e. if neither eye is healthy), we re-iterate over these conditions and see whether diagnostic keyphrases specific for each of condition can be found in the keyphrases for each eye. If they do, we add this eye's image to the proper list.","250058b3":"# Model deployment - To be continued in a [separate notebook](https:\/\/www.kaggle.com\/mateuszbagiski\/odir5k-models-for-age-sex-and-disease-prediction)\n\n","16b59cff":"Let's see how many individual images we've collected.","dd675d67":"The second one is clearly much more preferable. For each condition, we found a smaller, probably much more condition-specific set of diagnostic keyphrases. Let's take a look at it:","274e9ae1":"# ODIR5K: EDA, keyphrases, image sorting\n\nIn this notebook, I performed a superficial exploratory data analysis, investigated the relationship between diagnostic keyphrases and diagnosed conditions and, based on the latter, implemented some code to sort images of retinal fundi, according to conditions whose symptoms they display.","99da5ed1":"Although 'O-fraction' drops quite quickly from 0.205 at the first place to only 0.03 at the ninth, many of these keyphrases are going to co-occur, which can be clearly seen, if we add up all numbers in these column.","357ba463":"The most often occurring pair was 'other' and diabetes, with hypertension and diabetes coming at the second place, and 'other' and glaucoma at the third.\n\nWe can compare that to the multi-class cases in the original data. We should expect similar numbers, since this does not seem very likely that a patient would have symptoms of two diseases in both of their eyes.","8dbdf64c":"Let's now make another DataFrame, which will selectively display the degree of specificity (predictive power) of each keyphrase and the class it is specific for, according to both exclusionary and inclusionary analysis. We will also include information, whether there is agreement between classes predicted using both approaches  agree and the difference between specificity calculated.\n\nWe will include only these keyphrases, which we took into account in the previous exploration.","7f991375":"Let's make separate dataframes for both analyses","bf32b164":"Clearly, there are some keyphrases highly indicative of each condition:\n\nNormal: normal fundus\n\nDiabetes: moderate, mild or severe nonproliferative retinopathy\n    \nGlaucoma: glaucoma\n\nCataract: cataract\n\nAMD: dry\/wet age-related macular degeneration\n\nHypertension: hypertensive retinopathy\n\nMyopia: pathological myopia\n\nOther: well..., that's a mess, but that should be expected","839f3e6c":"Now, let's fill these dataframes.\n\nWe will iterate over the rows of the original data and do the following:\n\n1. Check whether this patient was diagnosed with only one condition. We will store it as a boolean valua (True or False) in only_one_condition variable.\n\n2. Extract the keyphrases for both eyes, separately, the same way we did before.\n\n3. For every condition this patient was diagnosed with, we check whether each of the eyes displays any symptoms characteristic of this condition.\n    \n    3.1. If it does, we add 1 to the proper cell in the dataframe for the inclusive condition.\n    \n    3.2. If this patient had only diagnosis, we add 1 to the proper cell in the dataframe for the exclusive condition as well.\n    \n    \nThen, to calculate the predictive power of each keyphrase, we take the number of times it occurred in diagnoses for conditions it occurred in the most often and divide it by the total number of times it appeared in the dataset.\n\nSince some keyphrases were not present in conditions_keyphrases dictionary (because they were not used to describe cases of patients with only one condition diagnosed) their predictive power gets set to NaN (because we tried to divide 0\/0). To avoid this we may replace this NaNs with zeros or simply use the .apply() method.","6ae93c16":"Acceptably close to perfect","ca15953b":"Let's see see how many images for each condition we managed to aggregate, and how it compares to the number of patients diagnosed with this condition","6a9123ce":"# Diagnostic keyphrases for image sorting: Testing time","5e3e9ed8":"However, note that the above code omits all healthy eyes with patients having been diagnosed with any disease. If one eye of a patient displayed symptoms of, say, diabetes, but the other looked perfectly healthy, the latter would not be counted as 'Normal'. We will need to take that into account, when we will perform image sorting.","8f4e7f2b":"Let's build a DataFrame better suited to our needs, in which every row will contain an information about an individual image. The columns in this DataFrame will be: image name, age, sex, and diagnosed conditions.","727c7cef":"Thus, we used the 'lens dust' keyphrase as characteristic of each of these conditions, but since it was used to describe all of them, it's not appropriate to be used as a reliable diagnostic criterion for either. Looking at the data we have extracted, it's clear that it has a remarkably low specificity:","b955a9ef":"Let's now compare the outcomes of the two methods:","d90cfead":"First, let's load our data to a DataFrame and take a look at it","c298d13f":"# Linguistic Exploratory Data Analysis: Keyphrases","27705170":"Obviously, some images ended in more than one categories, so we could expect this number to be greater than the total number of all images in the dataset, which is 7000, especially if we managed to collect all or almost all of the images.\n\nLet's see how many of these images ended up in more than one class and how frequent are specific correlations. This will also allow us to check the total number of *individual* images collected. ","d8950fc4":"It seems that every time an eye with 'normal fundus' was classified by our program as displaying signs of glaucoma, cataract, myopia or 'other', it was due to the 'normal fundus' keyphrase co-occurring with 'lens dust' keyphrase. This seems plausible, since 'lens dust' was used in one-condition diagnoses for N, G, C, M, and O cases, but not D, H, and A, which were not associated with 'normal fundus'.","9a2adcd3":"Just 93 short of the 7000 total. Let's see how it'll do if we use all the full set of diagnostic keyphrases for 'O'.\n\nFirst, however, let's save how many images we collected per each class.","af1af265":"Let's now consider each condition separately:\n\nNormal:\n    \n99.9% of N cases were described with the keyphrase 'normal fundus'. We can rather safely assume that the remaining 0.1% displayed some anomalies, which were not however, indicative of any disease (maybe 'lens dust'). Therefore, we can take 'normal fundus' keyphrase as characteristic of this class, as well as use it to find out, which one is not affected with a disease diagnosed in a patient, which was not diagnosed as healthy.\n\nDiabetes:\n\nIf we add up all the counts of every kind of retinopathy associated with diabetes (nonproliferative\/proliferative, mild\/moderate\/severe), we will obtain a score very close to 100%. Assuming that these keyphrases do not co-occur, we can treat them as characteristic of this class.\n\nGlaucoma:\n\nEven adding up all the numbers, we do not get 100%, so cases of glaucoma were probably also described with some keyphrases non-characteristic of this class. Nevertheless, 'glaucoma' keyphrase can be taken as characteristic of this class.\n\nCataract:\n\nAn overwhelming majority of cataract cases (although not all of them) were described with 'cataract' keyphrase, so we treat as characteristic of this class.\n\nAge-related Macular Degeneration:\n\nCounts of keyphrases 'dry age-related macular degeneration' and 'wet age-related macular degeneration' add up to exactly 100%, so we can treat them (or, more efficiently, a substring 'age-related macular degeneration') as characteristic of this class.\n\nHypertension:\n\n'Hypertensive retinopathy' keyphrase occurred in 100% cases, so it can be treated as characteristic of this class.\n\nMyopia:\n\nCounts of keyphrases containing substring 'myopi' add up to about 99%, so we can treat this substring as characteristic of this class.\n\nOther:\n\nNone of the keyphrases associated with this class achieved a significant majority, but in the next few cells we will see whether any of them can be treated as characteristic of this class.","8c528fa9":"So there were 4 patients with glaucoma, 9 patients with cataract, 1 patient with myopia, and 49 with some 'other' condition, whose retinal fundi, although displaying symptoms of a disease, still seemed 'normal'? This does not seem right.\n\nTo make sure that we didn't make some kind of error, let's run code analogous to the one we used to fill our dataframes. This time, we will ask it to print keyphrases for patients diagnosed with glaucoma, cataract, myopia or 'other', in whose cases the 'normal fundus' keyphrase co-occurred with some disease-specific keyphrase.\n","48220f73":"Seems good!\n\nOver the 1140 healthy patients, with 2 * 1140 = 2280 healthy eyes, we have also 3100 - 2280 = 820 patients with exactly one healthy eye (or maybe with just a little bit of lens dust). About half of patients with glaucoma, cataract, AMBD, hypertension, and myopia seem to have both of their eyes affected. This fraction is closer to 1\/6 for patients with 'other' conditions (of which many have one or two other conditions).","ec35bbbf":"Over half of alls our patients (1774 out of 3500) have exactly one disease diagnosed in at least one of their eyes. 1140 are healthy in both eyes. Note that if we included the 'N' column in data_diseases DataFrame, there would be no '0-cases' because the corresponding rows would have 1 in their 'N' columns, so we would have '1: 2914' instead of '1: 1774, 0: 1140'.\n\n557 patients have exactly two conditions diagnosed and 29 have three.\n\nThis points to an important problem. If a patient was diagnosed not only with diabetes, but also with some other condition, how can we know the following:\n\n1) Which one of their eyes displays symptoms of diabetes and which one displays symptoms of the other disease.\n\n2) Or, maybe, one of their eyes is affected with both conditions, but the other one displays symptoms of only one or even seems completely healthy.\n\n3) Even without more than one condition coexisting in a patient, we need to know, if only one eye of our diabetic patient shows symptoms of diabetes, or maybe it's both of them.\n\nUnfortunately, such information is not contained explicitly in the last eight columns alone. We need to extract it from the keywords column.\n\nActually, it seems that columns 'Left-Diagnosis Keywords' and 'Right-Diagnosis Keywords' contain diagnostic keyphrases (ordered sequences of words) rather than individual meaningful keywords. These keyphrases are separated with commas, so it will probably be more efficient to treat them (and not the individual words) as individual tokens conveying information about diagnosis.","fb23bddd":"Having obtained proper diagnostic keyphrases for each class, we can now calculate:\n\n1) The frequency of each keyphrase occurring in each category (including cases of patients with more than one condition).\n\n2) Condition-specifity of each keyphrase.","8a4fb98e":"I suspect we missed some images from patients with 'other' conditions, which should be expected due to use of an incomplete list of diagnostic keyphrases. This would explain why there are more patients with diabetes and 'other' as well as with glaucoma and 'other' than the number of individual eye images, that we collected. The number of patients diagnosed with both diabetes and hypertension, on the other hand (45) is just a little lower than the number of individual images displaying symptomes of both these conditions. It could mean that 11 of these 45 patients have symptoms of their diseases present in both of their eyes.","ec295a85":"Before we start sorting images, let's see how often each keyphrase occurs in diagnoses for every condition.\n\nBecause some images display symptoms of more than one disease, we cannot completely avoid cross-pollination without excluding all patients with more than one condition diagnosed.\n\nTherefore, we will perform two separate analyses: \n\n    1) Excluding patients with more than one condition\n    \n    2) Including patients with more than one condition"}}