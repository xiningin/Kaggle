{"cell_type":{"06c11708":"code","5d99a93b":"code","2eb7d9e7":"code","caf4712d":"code","e68a7025":"code","7454193a":"code","05341f9f":"code","4ba22d86":"code","06aa6948":"code","dd84a7a1":"code","a35eaf0a":"code","abac2bea":"code","9f46f470":"code","fcd73a70":"markdown","332e5c0e":"markdown","4d6bf99b":"markdown","7c3b3268":"markdown","c2e70000":"markdown","7f35e5f9":"markdown","ff90b4a8":"markdown","ac3c0777":"markdown","d09a63b6":"markdown","adf9f352":"markdown"},"source":{"06c11708":"# General imports\nimport numpy as np\nimport pandas as pd\nimport os, warnings, gc, math\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\nwarnings.filterwarnings('ignore')\nNROWS = None","5d99a93b":"# Memory reducer function\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","2eb7d9e7":"%%time\n# Data load\ntrain_df = pd.read_csv('..\/input\/ashrae-energy-prediction\/train.csv', nrows = NROWS)\ntest_df = pd.read_csv('..\/input\/ashrae-energy-prediction\/test.csv', nrows = NROWS)\n\nbuilding_df = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv', nrows = NROWS)\n\ntrain_weather_df = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv', nrows = NROWS)\ntest_weather_df = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_test.csv', nrows = NROWS)","caf4712d":"%%time\n# Date convertions\nfor df in [train_df, test_df, train_weather_df, test_weather_df]:\n    \n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    \n# for df in [train_df, test_df, train_weather_df, test_weather_df]:\nfor df in [train_df, test_df]:\n    df['hour'] = np.uint8(df['timestamp'].dt.hour)\n    df['day'] = np.uint8(df['timestamp'].dt.day)\n    df['weekday'] = np.uint8(df['timestamp'].dt.weekday)\n    df['month'] = np.uint8(df['timestamp'].dt.month)\n    df['year'] = np.uint8(df['timestamp'].dt.year-2000)\n    \n# Categorical convertions\n","e68a7025":"%%time\n# Fill NA\nbuilding_df.rename(columns={\"square_feet\": \"log_square_feet\"}, inplace=True)\nbuilding_df['log_square_feet'] = np.float16(np.log(building_df['log_square_feet']))\nbuilding_df['year_built'] = np.uint8(building_df['year_built']-1900)\nbuilding_df['floor_count'] = np.uint8(building_df['floor_count'])\n\n# Enconding\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nbuilding_df['primary_use'] = building_df['primary_use'].astype(str)\nbuilding_df['primary_use'] = le.fit_transform(building_df['primary_use']).astype(np.int8)","7454193a":"%%time\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\nfor df in [train_weather_df, test_weather_df]:\n    cols = list(df.columns)\n    cols.remove('timestamp')\n    imp = IterativeImputer(random_state=42)\n    temp = imp.fit_transform(df[cols])\n    df[cols] = pd.DataFrame(temp, columns = cols)","05341f9f":"%%time\nfor df in [train_df, test_df, building_df, train_weather_df, test_weather_df]:\n    original = df.copy()\n    df = reduce_mem_usage(df)","4ba22d86":"%%time\ntemp_df = train_df[['building_id']]\ntemp_df = temp_df.merge(building_df, on=['building_id'], how='left')\ndel temp_df['building_id']\ntrain_df = pd.concat([train_df, temp_df], axis=1)\ndel temp_df","06aa6948":"%%time\ntemp_df = test_df[['building_id']]\ntemp_df = temp_df.merge(building_df, on=['building_id'], how='left')\ndel temp_df['building_id']\ntest_df = pd.concat([test_df, temp_df], axis=1)\ndel temp_df","dd84a7a1":"%%time\ntemp_df = train_df[['site_id','timestamp']]\ntemp_df = temp_df.merge(train_weather_df, on=['site_id','timestamp'], how='left')\ndel temp_df['site_id'], temp_df['timestamp']\ntrain_df = pd.concat([train_df, temp_df], axis=1)\ndel temp_df","a35eaf0a":"%%time\ntemp_df = test_df[['site_id','timestamp']]\ntemp_df = temp_df.merge(test_weather_df, on=['site_id','timestamp'], how='left')\ndel temp_df['site_id'], temp_df['timestamp']\ntest_df = pd.concat([test_df, temp_df], axis=1)\n\n","abac2bea":"%%time\ndel train_weather_df, test_weather_df, temp_df\ngc.collect()","9f46f470":"%%time\nfor m in train_df.meter.unique():\n#     train_df[train_df.meter == m].to_parquet('train'+ str(m) + '.parquet')\n#     test_df[test_df.meter == m].to_parquet('test'+ str(m) + '.parquet')\n    train_df[train_df.meter == m].to_pickle('train'+ str(m) + '.pkl')\n    test_df[test_df.meter == m].to_pickle('test'+ str(m) + '.pkl')\n","fcd73a70":"## Building tranformations","332e5c0e":"## Weather NA Imputation","4d6bf99b":"## Cleaning Memory","7c3b3268":"## Memory optimization","c2e70000":"## Merging building into test dataset","7f35e5f9":"ASHRAE - GREAT ENERGY PREDICTOR III \n\nSources: \n- https:\/\/www.kaggle.com\/kyakovlev\/ashrae-data-minification\n- https:\/\/www.kaggle.com\/hmendonca\/starter-eda-and-feature-selection-ashrae3\n- https:\/\/www.kaggle.com\/chmaxx\/ashrae-eda-and-visualization-wip\n","ff90b4a8":"## Date transformations","ac3c0777":"## Merging weather into test dataset","d09a63b6":"## Merging weather into train dataset","adf9f352":"## Merging building into train dataset\nTemp_df combined with merge it's a faster and smarter whey to do this operation"}}