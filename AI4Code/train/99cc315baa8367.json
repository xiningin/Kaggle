{"cell_type":{"b7526ec4":"code","40cd068f":"code","3fbc82f3":"code","b0518e9c":"code","5854e8ff":"code","9d9d6e7f":"code","ff5719e2":"code","4a36b446":"code","939b86cd":"code","0fef49e8":"code","4c936f90":"code","64e8eca3":"code","f96916a4":"code","2032bacd":"code","be628947":"code","2b573034":"code","65a729f7":"code","b4ee0c39":"code","06246d49":"code","b6ebf86f":"code","e269c582":"code","a02f30a7":"code","95e2811b":"code","7abf4e2e":"code","fa79622c":"code","7bfb4c13":"code","9aec0597":"code","6c63da83":"code","24933567":"markdown","396170e9":"markdown","e8ef876c":"markdown"},"source":{"b7526ec4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40cd068f":"data = pd.read_csv(\"\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\ndata.head()","3fbc82f3":"data.isnull().sum()","b0518e9c":"data = data.fillna(0)","5854e8ff":"data.isnull().sum()","9d9d6e7f":"data.head()","ff5719e2":"Gender = pd.get_dummies(data['gender'], drop_first=True)\nEver_Married = pd.get_dummies(data['ever_married'], drop_first=True)\nWork_Type = pd.get_dummies(data['work_type'], drop_first=True)\nresidence_type = pd.get_dummies(data['Residence_type'], drop_first=True)\nSmoking_Status = pd.get_dummies(data['smoking_status'], drop_first=True)\n\ndata = pd.concat([data,Gender,Ever_Married, Work_Type, residence_type, Smoking_Status],axis=1)\ndata = data.drop(['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status'], axis = 'columns')","4a36b446":"data.head()","939b86cd":"X = data.drop('stroke', axis='columns')\ny = data.stroke","0fef49e8":"X.head()","4c936f90":"y.head()","64e8eca3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","f96916a4":"X_train.shape","2032bacd":"X_test.shape","be628947":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nimport matplotlib.pyplot as plt","2b573034":"model = Sequential()\n# add first hidden layer with input diamension\nmodel.add(Dense(units = 32, activation='relu', kernel_initializer = 'he_uniform', input_dim = 17))\n# add second hidden layer\nmodel.add(Dense(units = 16, activation='relu', kernel_initializer = 'he_uniform'))\n# add output layer\nmodel.add(Dense(units = 1, activation = 'sigmoid', kernel_initializer = 'glorot_uniform'))","65a729f7":"# now we compile the model\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n# train the model\nmodel.fit(X_train, y_train, batch_size = 128, epochs = 50, verbose = 1)","b4ee0c39":"acc = model.evaluate(X_test, y_test)","06246d49":"model.summary()","b6ebf86f":"y_ann = model.predict(X_test)\ny_ann = y_ann > 0.5","e269c582":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_ann, y_test)\ncm","a02f30a7":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel_svm = SVC()\nmodel_svm.fit(X_train, y_train)\ny_svm = model_svm.predict(X_test)\nacc_svm = accuracy_score(y_svm, y_test)\ncm_svm = confusion_matrix(y_svm, y_test)\nacc_svm","95e2811b":"cm_svm","7abf4e2e":"from sklearn.metrics import classification_report\nprint(classification_report(y_svm, y_test))","fa79622c":"from sklearn.ensemble import RandomForestClassifier\nmodel_rf = RandomForestClassifier()\nmodel_rf.fit(X_train, y_train)\ny_rf = model_rf.predict(X_test)\nacc_rf = accuracy_score(y_rf, y_test)\ncm_rf = confusion_matrix(y_rf, y_test)\nacc_rf","7bfb4c13":"cm_rf","9aec0597":"from sklearn.metrics import classification_report\nprint(classification_report(y_rf, y_test))","6c63da83":"print(\"Artificial Neural Network Accuracy : \", acc)\nprint(\"Support Vector Machine Accuracy : \", acc_svm)\nprint(\"Random Forest Accuracy : \", acc_rf)","24933567":"## ANN Model with keras","396170e9":"## Support Vector Machine (SVM)","e8ef876c":"## Random Forest Model"}}