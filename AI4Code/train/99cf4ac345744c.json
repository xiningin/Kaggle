{"cell_type":{"7d193e96":"code","3dcb60bf":"code","2123fe9a":"code","1045384e":"code","73fb952a":"code","390fd053":"code","88eb137b":"code","a3445928":"code","5adf3a48":"code","f21f264a":"code","809be6fb":"code","a3161ed4":"code","d1cc494a":"code","46050412":"code","1970d4c0":"code","46a313e9":"code","03e543e2":"code","a188e9d4":"code","e11ab2f0":"code","cf189340":"code","3e10ab12":"code","b4f95deb":"code","82d5f01a":"code","7e1274e6":"code","526e891d":"code","da7a0924":"code","f8360624":"code","2ebf65f9":"code","e04c8244":"code","d6b6978c":"code","ea256d62":"code","341c85fb":"code","e1c17333":"code","6643b0d6":"code","9689cd34":"code","072e22e8":"code","64f21357":"code","2a7b7318":"code","0c586edb":"code","7bedba95":"code","0e1b90f2":"code","351b75b2":"code","957a4f23":"code","8ce7e945":"code","2eda3f08":"code","a681f6c9":"code","6f3379f1":"code","e81ff293":"code","403f7764":"code","3d7c73ff":"code","13aca479":"code","627a7610":"code","1c762b4e":"code","38e45964":"code","33257f51":"code","2ffe1a25":"code","5a7c4b5f":"code","6f3e73ac":"code","5aa55eab":"code","d6b7046b":"code","b2100ab0":"code","3d018399":"code","97e71ebb":"code","97bfa407":"code","1b75a640":"code","762a80cf":"code","30fbc973":"code","ebfc85df":"code","30d3491f":"code","ca34ed1e":"code","05784c86":"code","13829346":"code","aed594b5":"code","27af2b63":"code","c5f420b1":"code","3571afa3":"code","74655f98":"code","b7a0e469":"code","55ba9b79":"code","b87d1abe":"code","2a1c1d90":"code","383f6173":"code","c752fa5e":"code","c9ae6da3":"code","1320d49b":"code","8aa7d9e9":"code","5637d603":"markdown","0404b942":"markdown","9bcac999":"markdown","cb9938d4":"markdown","cf42f01c":"markdown","7fb39fca":"markdown","9a115147":"markdown"},"source":{"7d193e96":"!pip install chart_studio\n!pip install windrose\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport seaborn as sns\nfrom windrose import WindroseAxes\nimport os\nprint(os.listdir(\"..\/input\"))\n%matplotlib inline\n","3dcb60bf":"data_T_start=pd.read_csv(\"..\/input\/wind-turbine-scada-dataset\/T1.csv\")\ndata_T_start.head()","2123fe9a":"turbine_no=\"T1\" #for powercurve graph","1045384e":"data_T_start.info()","73fb952a":"data1_T=data_T_start.copy()","390fd053":"data1_T.rename(columns={'LV ActivePower (kW)':'ActivePower(kW)',\"Wind Speed (m\/s)\":\"WindSpeed(m\/s)\",\"Wind Direction (\u00b0)\":\"Wind_Direction\"},\n                inplace=True)\ndata1_T.head()","88eb137b":"data1_T.rename(columns={'Date\/Time':'Time'},inplace=True)\ndata1_T.head()","a3445928":"#function for finding months\ndef find_month(x):\n    if \" 01 \" in x:\n        return \"Jan\"\n    elif \" 02 \" in x:\n        return \"Feb\"\n    elif \" 03 \" in x:\n        return \"March\"    \n    elif \" 04 \" in x:\n        return \"April\"    \n    elif \" 05 \" in x:\n        return \"May\"    \n    elif \" 06 \" in x:\n        return \"June\"    \n    elif \" 07 \" in x:\n        return \"July\"    \n    elif \" 08 \" in x:\n        return \"August\"    \n    elif \" 09 \" in x:\n        return \"Sep\"    \n    elif \" 10 \" in x:\n        return \"Oct\"    \n    elif \" 11 \" in x:\n        return \"Nov\"    \n    else:\n        return \"Dec\"    ","5adf3a48":"#add months\ndata1_T['Month']=data1_T.Time.apply(find_month)","f21f264a":"data1_T.Month.unique()","809be6fb":"data1_T.head()","a3161ed4":"#function for rewriting wind speed for 0.5 intervals. \n#For example: wind speeds between 3.25 and 3.75 turns 3.5,wind speeds between 3.75 and 4.25 turns 4.0\ndef mean_speed(x):\n    list=[]\n    i=0.25\n    while i<=25.5:\n        list.append(i)\n        i+=0.5\n        \n    for i in list:\n        if x < i:\n            x=i-0.25\n            return x","d1cc494a":"#adding a new column as \"mean_WindSpeed\" with function mean_speed().\ndata1_T[\"mean_WindSpeed\"]=data1_T[\"WindSpeed(m\/s)\"].apply(mean_speed)\ndata1_T.head()","46050412":"#function for rewriting wind direction for 30 intervals. \n#For example: wind directions between 15 and 45 turns 30,wind speeds between 45 and 75 turns 60\ndef mean_direction(x):\n    list=[]\n    i=15\n    while i<=375:\n        list.append(i)\n        i+=30\n        \n    for i in list:\n        if x < i:\n            x=i-15\n            if x==360:\n                return 0\n            else:\n                return x","1970d4c0":"#adding a new column as \"mean_Direction\" with function mean_direction().\ndata1_T[\"mean_Direction\"]=data1_T[\"Wind_Direction\"].apply(mean_direction)\ndata1_T.head()","46a313e9":"#function for rewriting wind direction with letters. \n#For example: 0=N, 30=NNE 60=NEE etc.\ndef find_direction(x):\n    if x==0:\n        return \"N\"\n    if x==30:\n        return \"NNE\"\n    if x==60:\n        return \"NEE\" \n    if x==90:\n        return \"E\" \n    if x==120:\n        return \"SEE\" \n    if x==150:\n        return \"SSE\" \n    if x==180:\n        return \"S\" \n    if x==210:\n        return \"SSW\" \n    if x==240:\n        return \"SWW\" \n    if x==270:\n        return \"W\" \n    if x==300:\n        return \"NWW\" \n    if x==330:\n        return \"NNW\"\n  ","03e543e2":"#adding a new column as \"Direction\" with function find_direction().\ndata1_T[\"Direction\"]=data1_T[\"mean_Direction\"].apply(find_direction)\ndata1_T.head()","a188e9d4":"#Number of wind speed values between 3.5 and 25. \nlen(data1_T[\"WindSpeed(m\/s)\"][(data1_T[\"WindSpeed(m\/s)\"]>3.5) & (data1_T[\"WindSpeed(m\/s)\"]<=25)])","e11ab2f0":"#Values bigger than 25. \ndata1_T[\"WindSpeed(m\/s)\"][data1_T[\"WindSpeed(m\/s)\"]>25].value_counts()","cf189340":"#Remove the data that wind speed is smaller than 3.5 and bigger than 25.5\n#We do that because according to turbine power curve turbine works between these values.\ndata2_T=data1_T[(data1_T[\"WindSpeed(m\/s)\"]>3.5) & (data1_T[\"WindSpeed(m\/s)\"]<=25.5)]","3e10ab12":"#Number of values where wind speed is bigger than 3.5 and active power is zero. \n#If wind speed is bigger than 3.5 and active power is zero, this means turbine is out of order. we must eliminate these.\nlen(data2_T[\"ActivePower(kW)\"][(data2_T[\"ActivePower(kW)\"]==0)&(data2_T[\"WindSpeed(m\/s)\"]>3.5)])","b4f95deb":"#Eliminate datas where wind speed is bigger than 3.5 and active power is zero.\ndata3_T=data2_T[((data2_T[\"ActivePower(kW)\"]!=0)&(data2_T[\"WindSpeed(m\/s)\"]>3.5)) | (data2_T[\"WindSpeed(m\/s)\"]<=3.5)]","82d5f01a":"#Number of values\nlen(data3_T[\"WindSpeed(m\/s)\"])","7e1274e6":"data3_T.head(10)","526e891d":"#the mean value of Nordex_Powercurve(kW) when mean_WindSpeed is 5.5\ndata3_T[\"Theoretical_Power_Curve (KWh)\"][data3_T[\"mean_WindSpeed\"]==5.5].mean()","da7a0924":"#we create clean data and add a columns where calculating losses. \n#Loss is difference between the Nordex_Powercurve and ActivePower. \ndata_T_clean=data3_T.sort_values(\"Time\")\ndata_T_clean[\"Loss_Value(kW)\"]=data_T_clean[\"Theoretical_Power_Curve (KWh)\"]-data_T_clean[\"ActivePower(kW)\"]\ndata_T_clean[\"Loss(%)\"]=data_T_clean[\"Loss_Value(kW)\"]\/data_T_clean[\"Theoretical_Power_Curve (KWh)\"]*100\n#round the values to 2 digit.\ndata_T_clean=data_T_clean.round({'ActivePower(kW)': 2, 'WindSpeed(m\/s)': 2, 'Theoretical_Power_Curve (KWh)': 2,\n                                   'Wind_Direction': 2, 'Loss_Value(kW)': 2, 'Loss(%)': 2})\n\ndata_T_clean.head()","f8360624":"#creating summary speed dataframe from clean data.\nDepGroupT_speed = data_T_clean.groupby(\"mean_WindSpeed\")\ndata_T_speed=DepGroupT_speed.mean()\n#removing the unnecessary columns.\ndata_T_speed.drop(columns={\"WindSpeed(m\/s)\",\"Wind_Direction\",\"mean_Direction\"},inplace=True)\n#creating a windspeed column from index values.\nlistTspeed_WS=data_T_speed.index.copy()\ndata_T_speed[\"WindSpeed(m\/s)\"]=listTspeed_WS\n#changing the place of columns.\ndata_T_speed=data_T_speed[[\"WindSpeed(m\/s)\",\"ActivePower(kW)\",\"Theoretical_Power_Curve (KWh)\",\"Loss_Value(kW)\",\"Loss(%)\"]]\n#changing the index numbers.\ndata_T_speed[\"Index\"]=list(range(1,len(data_T_speed.index)+1))\ndata_T_speed.set_index(\"Index\",inplace=True)\n#rounding the values to 2 digit\ndata_T_speed=data_T_speed.round({\"WindSpeed(m\/s)\": 1, 'ActivePower(kW)': 2, 'Theoretical_Power_Curve (KWh)': 2, 'Loss_Value(kW)': 2, 'Loss(%)': 2})\n#creating a count column that shows the number of wind speed from clean data.\ndata_T_speed[\"count\"]=[len(data_T_clean[\"mean_WindSpeed\"][data_T_clean[\"mean_WindSpeed\"]==i]) \n                        for i in data_T_speed[\"WindSpeed(m\/s)\"]]\n","2ebf65f9":"data_T_speed","e04c8244":"#create summary direction dataframe from clean data.\nDepGroupT_direction = data_T_clean.groupby(\"Direction\")\ndata_T_direction=DepGroupT_direction.mean()\n#remove the unnecessary columns.\ndata_T_direction.drop(columns={\"WindSpeed(m\/s)\",\"Wind_Direction\"},inplace=True)\n#create a column from index.\nlistTdirection_Dir=data_T_direction.index.copy()\ndata_T_direction[\"Direction\"]=listTdirection_Dir\n#change the name of mean_WindSpeed column as  WindSpeed.\ndata_T_direction[\"WindSpeed(m\/s)\"]=data_T_direction[\"mean_WindSpeed\"]\ndata_T_direction.drop(columns={\"mean_WindSpeed\"},inplace=True)\n#change the place of columns.\ndata_T_direction=data_T_direction[[\"Direction\",\"mean_Direction\",\"ActivePower(kW)\",\"Theoretical_Power_Curve (KWh)\",\"WindSpeed(m\/s)\",\n                                     \"Loss_Value(kW)\",\"Loss(%)\"]]\n#change the index numbers.\ndata_T_direction[\"Index\"]=list(range(1,len(data_T_direction.index)+1))\ndata_T_direction.set_index(\"Index\",inplace=True)\n#create a count column that shows the number of directions from clean data.\ndata_T_direction[\"count\"]=[len(data_T_clean[\"Direction\"][data_T_clean[\"Direction\"]==i]) \n                        for i in data_T_direction[\"Direction\"]]\n#round the values to 2 digit\ndata_T_direction=data_T_direction.round({'WindSpeed(m\/s)': 1,'ActivePower(kW)': 2, 'Theoretical_Power_Curve (KWh)': 2,\n                                           'Loss_Value(kW)': 2, 'Loss(%)': 2})\n#sort by mean_Direction\ndata_T_direction=data_T_direction.sort_values(\"mean_Direction\")\ndata_T_direction.drop(columns={\"mean_Direction\"},inplace=True)","d6b6978c":"data_T_direction","ea256d62":"#Drawing graph of mean powers according to wind direction.\ndef bar_graph():\n    fig = plt.figure(figsize=(20,10))\n    plt.bar(data_T_direction[\"Direction\"],data_T_direction[\"Theoretical_Power_Curve (KWh)\"],label=\"Theoretical Power Curve\",align=\"edge\",width=0.3)\n    plt.bar(data_T_direction[\"Direction\"],data_T_direction[\"ActivePower(kW)\"],label=\"Actual Power Curve\",align=\"edge\",width=-0.3)\n    plt.xlabel(\"Wind Direction\")\n    plt.ylabel(\"Power (kW)\")\n    plt.title(\"Wind Farm {} Mean Power Values vs Direction\".format(turbine_no))\n    plt.legend()\n    plt.show()\nbar_graph()","341c85fb":"#creating summary direction total dataframe from direction data.\ndata_T_direction_total=data_T_direction.copy()\n#removing the unnecessary columns.\ndata_T_direction_total.drop(columns={\"count\",\"ActivePower(kW)\",\"Theoretical_Power_Curve (KWh)\",\"Loss_Value(kW)\",\"Loss(%)\"},inplace=True)\n#calculating the total values from direction data.\ndata_T_direction_total[\"Total_Generation(MWh)\"]=data_T_direction[\"ActivePower(kW)\"]*data_T_direction[\"count\"]\/6000\ndata_T_direction_total[\"Theoretical_PC_Total_Generation(MWh)\"]=data_T_direction[\"Theoretical_Power_Curve (KWh)\"]*data_T_direction[\"count\"]\/6000\ndata_T_direction_total[\"Total_Loss(MWh)\"]=data_T_direction_total[\"Theoretical_PC_Total_Generation(MWh)\"]-data_T_direction_total[\"Total_Generation(MWh)\"]\ndata_T_direction_total[\"Loss(%)\"]=data_T_direction_total[\"Total_Loss(MWh)\"]\/data_T_direction_total[\"Theoretical_PC_Total_Generation(MWh)\"]*100\n#rounding the values to 2 digit\ndata_T_direction_total=data_T_direction_total.round({'WindSpeed(m\/s)': 1,'Total_Generation(MWh)': 2, 'Theoretical_PC_Total_Generation(MWh)': 2,\n                                           'Total_Loss(MWh)': 2, 'Loss(%)': 2})\n#changing the place of columns.\ndata_T_direction_total=data_T_direction_total[[\"Direction\",\"Total_Generation(MWh)\",\"Theoretical_PC_Total_Generation(MWh)\",\"WindSpeed(m\/s)\",\n                                     \"Total_Loss(MWh)\",\"Loss(%)\"]]","e1c17333":"data_T_direction_total","6643b0d6":"#Drawing graph of total generations according to wind direction.\ndef bar_graph():\n    fig = plt.figure(figsize=(20,10))\n    plt.bar(data_T_direction_total[\"Direction\"],data_T_direction_total[\"Theoretical_PC_Total_Generation(MWh)\"],label=\"Theoretical Power Curve\",align=\"edge\",width=0.3)\n    plt.bar(data_T_direction_total[\"Direction\"],data_T_direction_total[\"Total_Generation(MWh)\"],label=\"Actual Power Curve\",align=\"edge\",width=-0.3)\n    plt.xlabel(\"Wind Direction\")\n    plt.ylabel(\"Energy Generation (MWh)\")\n    plt.title(\"Wind Farm {} Total Energy Generation Values vs Direction\".format(turbine_no))\n    plt.legend()\n    plt.show()\nbar_graph()","9689cd34":"#Drawing graph of total loss according to wind direction.\ndef bar_graph():\n    fig = plt.figure(figsize=(20,10))\n    plt.bar(data_T_direction_total[\"Direction\"],data_T_direction_total[\"Total_Loss(MWh)\"],\n            label=\"Total_Loss(MWh)\",align=\"center\",width=0.5, color=\"red\",picker=5)\n    plt.xlabel(\"Wind Direction\")\n    plt.ylabel(\"Total Loss (MWh)\")\n    plt.title(\"Wind Farm {} Total Loss Values vs Direction\".format(turbine_no))\n    plt.legend()\n    plt.show()\nbar_graph()","072e22e8":"#creating summary dataframes for all directions from clean data in a for loop as we did when creating direction dataframe.\nlist_data=[]\nlist_yon=[\"N\",\"NNE\",\"NEE\",\"E\",\"SEE\",\"SSE\",\"S\",\"SSW\",\"SWW\",\"W\",\"NWW\",\"NNW\"]\nfor i in range(0,12):\n    data1T_A=data_T_clean[data_T_clean[\"Direction\"]==list_yon[i]]\n    #\n    DepGroup_A = data1T_A.groupby(\"mean_WindSpeed\")\n    data_T_A=DepGroup_A.mean()\n    #\n    data_T_A.drop(columns={\"WindSpeed(m\/s)\",\"Wind_Direction\",\"mean_Direction\"},inplace=True)\n    #\n    listTA_WS=data_T_A.index.copy()\n    data_T_A[\"WindSpeed(m\/s)\"]=listTA_WS\n    #\n    data_T_A=data_T_A[[\"WindSpeed(m\/s)\",\"ActivePower(kW)\",\"Theoretical_Power_Curve (KWh)\",\"Loss_Value(kW)\",\"Loss(%)\"]]\n    #\n    data_T_A[\"Index\"]=list(range(1,len(data_T_A.index)+1))\n    data_T_A.set_index(\"Index\",inplace=True)\n    #\n    data_T_A=data_T_A.round({'ActivePower(kW)': 2, 'Theoretical_Power_Curve (KWh)': 2, 'Loss_Value(kW)': 2, 'Loss(%)': 2})\n    #\n    data_T_A[\"count\"]=[len(data1T_A[\"mean_WindSpeed\"][data1T_A[\"mean_WindSpeed\"]==x]) \n                            for x in data_T_A[\"WindSpeed(m\/s)\"]]\n    list_data.append(data_T_A)\n    \ndata_T_N=list_data[0]\ndata_T_NNE=list_data[1]\ndata_T_NEE=list_data[2]\ndata_T_E=list_data[3]\ndata_T_SEE=list_data[4]\ndata_T_SSE=list_data[5]\ndata_T_S=list_data[6]\ndata_T_SSW=list_data[7]\ndata_T_SWW=list_data[8]\ndata_T_W=list_data[9]\ndata_T_NWW=list_data[10]\ndata_T_NNW=list_data[11]","64f21357":"#Drawing power curve of the turbine.\ndef graph_WT():\n    fig = plt.figure(figsize=(20,10))\n    plt.plot(data_T_speed[\"WindSpeed(m\/s)\"],data_T_speed[\"Theoretical_Power_Curve (KWh)\"],label=\"Theoretical Power Curve\",\n             marker=\"o\",markersize=10,linewidth = 5)\n    plt.plot(data_T_speed[\"WindSpeed(m\/s)\"],data_T_speed[\"ActivePower(kW)\"],label=\"Actual Power Curve\",\n             marker=\"o\",markersize=10,linewidth = 5)\n    plt.xlabel(\"Wind Speed (m\/s)\")\n    plt.ylabel(\"Power (kW)\")\n    plt.title(\"Wind Farm {} Power Curve\".format(turbine_no))\n    plt.legend()\n    plt.show()\n    fig.savefig(\"{}_Powercurve.png\".format(turbine_no))\n    plt.close(fig)\n        \ngraph_WT()","2a7b7318":"#Drawing power curve of the turbine for all directions.\nlist_table=[data_T_N,data_T_NNE,data_T_NEE,data_T_E,data_T_SEE,data_T_SSE,data_T_S,\n            data_T_SSW,data_T_SWW,data_T_W,data_T_NWW,data_T_NNW]\n\nlist_tableName=[\"N\",\"NNE\",\"NEE\",\"E\",\"SEE\",\"SSE\",\"S\",\"SSW\",\"SWW\",\"W\",\"NWW\",\"NNW\"]\n\ndef graph_T(i):\n    fig = plt.figure(figsize=(20,10))  \n    plt.plot(list_table[i][\"WindSpeed(m\/s)\"],list_table[i][\"Theoretical_Power_Curve (KWh)\"],label=\"Theoretical Power Curve\",\n             marker=\"o\",markersize=10,linewidth = 5)\n    plt.plot(list_table[i][\"WindSpeed(m\/s)\"],list_table[i][\"ActivePower(kW)\"],label=\"Actual Power Curve\",\n             marker=\"o\",markersize=10,linewidth = 5)\n    plt.xlabel(\"Wind Speed (m\/s)\")\n    plt.ylabel(\"Power (kW)\")\n    plt.title(\"Wind Farm {} Power Curve According to {} Wind\".format(turbine_no,list_tableName[i]))\n    plt.legend()\n    plt.show()\n    fig.savefig(\"{}_{}_Powercurve.jpeg\".format(turbine_no,list_tableName[i]))\n    plt.close(fig)\n\n# \"N\"=0, \"NNE\"=1,\"NEE\"=2,\"E\"=3,\"SEE\"=4,\"SSE\"=5,\"S\"=6,\"SSW\"=7,\"SWW\"=8,\"W\"=9,\"NWW\"=10,\"NNW\"=11\n\nfor i in range(0,12):\n    graph_T(i)","0c586edb":"#plotting the data distribution\nplt.figure(figsize=(10, 8))\nfor i in range(4):\n    plt.subplot(2, 2, i+1)\n    sns.kdeplot(data_T_start.iloc[:,i+1], shade=True)\n    plt.title(data_T_start.columns[i+1])\nplt.tight_layout()\nplt.show()","7bedba95":"ax = WindroseAxes.from_ax()\nax.bar(data_T_start['Wind Direction (\u00b0)'], data_T_start['Wind Speed (m\/s)'], normed=True, opening=0.8, edgecolor='white')\nax.set_legend()\nplt.show()","0e1b90f2":"import datetime\nimport time","351b75b2":"data=pd.read_csv('..\/input\/wind-turbine-scada-dataset\/T1.csv')\ndata.head()","957a4f23":"data.rename(columns={'Theoretical_Power_Curve (KWh)':'Power','LV ActivePower (kW)':'ActivePower',\"Wind Speed (m\/s)\":\"WindSpeed\",\"Wind Direction (\u00b0)\":\"WindDirection\"},\n                inplace=True)\ndata.head()","8ce7e945":"data['Time']=data['Date\/Time'].apply(lambda x: time.strptime(x,\"%d %m %Y %H:%M\")[4])\ndata.head()","2eda3f08":"temp=data['Time'][1:].values - data['Time'][0:-1].values\ntemp=np.array([0]+list(temp))","a681f6c9":"data['TimeDiff']=temp","6f3379f1":"data.tail()","e81ff293":"data['Gust']=np.array([0]+list(data['WindSpeed'][1:].values-data['WindSpeed'][:-1].values))\ndata.head()","403f7764":"data.dtypes","3d7c73ff":"data_=data[data['TimeDiff'].isin([10,-50])]\ndata_.head()","13aca479":"len(data_)","627a7610":"data_=data_[data_['ActivePower']>=0]\ndata_.describe()","1c762b4e":"x=data_.sort_values(by='WindSpeed')['WindSpeed']\ny=data_.sort_values(by='WindSpeed')['Power']\nz=data_.sort_values(by='WindSpeed')['Gust']\n\nplt.plot(x,y)\nplt.plot(z,y)","38e45964":"x_train=data_[['WindSpeed','WindDirection','Gust']].values\ny_train=data_['ActivePower'].values","33257f51":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.neighbors import KNeighborsRegressor,RadiusNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor, StackingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom catboost import CatBoostRegressor\nfrom sklearn.experimental import enable_hist_gradient_boosting \nfrom sklearn.ensemble import HistGradientBoostingRegressor","2ffe1a25":"n_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=15).get_n_splits(data_.values)\n    rmse= np.sqrt(-cross_val_score(model, x_train, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","5a7c4b5f":"lasso = make_pipeline(RobustScaler(), Lasso(alpha = 0.5))\nscore = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\nscore","6f3e73ac":"HistGB=HistGradientBoostingRegressor(learning_rate=0.18,max_iter=100,max_leaf_nodes=4)\n\nscore = rmsle_cv(HistGB)\nprint(\"Hist Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\nscore","5aa55eab":"\nKNR=KNeighborsRegressor(n_neighbors=8, weights='uniform', algorithm='auto', leaf_size=100, p=1, metric='minkowski')\n\nscore = rmsle_cv(KNR)\nprint(\"KNR score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\nscore","d6b7046b":"model_xgb1 = xgb.XGBRegressor(learning_rate=2e-2, max_depth=4, \n                             min_child_weight=1.1, n_estimators=100,\n                             reg_alpha=0.3, reg_lambda=0.7,\n                             #subsample=0.5213, silent=1,\n                             nthread = -1)","b2100ab0":"model_xgb1.fit(x_train,y_train)","3d018399":"preds=model_xgb1.predict(x_train)\nscore=mean_squared_error(y_train,preds)\nscore**0.5","97e71ebb":"r2_score(y_train,preds)","97bfa407":"model_xgb1.predict(np.array([6.02,110.0,0.23]).reshape(1,-1))","1b75a640":"model_lgb1 = lgb.LGBMRegressor(objective='regression',num_leaves=2,\n                              learning_rate=0.07, n_estimators=80,\n                              #max_bin = 255, bagging_fraction = 0.8,\n                              #bagging_freq = 5, feature_fraction = 0.8,\n                              #feature_fraction_seed=9, bagging_seed=9,\n                              reg_alpha=0.3,reg_lambda=0.7,\n                              #min_data_in_leaf =3, min_sum_hessian_in_leaf = 2\n                             )","762a80cf":"model_lgb1.fit(x_train,y_train)","30fbc973":"preds=model_lgb1.predict(x_train)\nscore=mean_squared_error(y_train,preds)\nscore**0.5","ebfc85df":"r2_score(y_train,preds)","30d3491f":"model_lgb1.predict(np.array([6.02,110.0,0.23]).reshape(1,-1))","ca34ed1e":"test=[]\nfor i in range(1,6):\n    test.append(pd.read_csv(f'..\/input\/testwindpower\/test{i}.csv'))\n","05784c86":"test=pd.concat(test,axis=0)\ntest.head()","13829346":"test.sort_values(by='Date',inplace=True)\ntest.head()","aed594b5":"test.columns=['Date','Speed','Direction','Energy']\ntest.head()","27af2b63":"len(test)","c5f420b1":"for col in test.columns[1::2]:\n    test[col]=test[col].apply(lambda x: float(x.replace(\".\",\"\").replace(\",\",\".\")))","3571afa3":"test.head()","74655f98":"test['Gust']=np.array([0]+list(test['Speed'][1:].values-test['Speed'][:-1]))\ntest.head()","b7a0e469":"x_val=test[['Speed','Direction','Gust']].values\ny_val=test['Energy'].values\nx_val.shape","55ba9b79":"preds1=model_xgb1.predict(x_val)\npreds1.shape","b87d1abe":"preds2=model_lgb1.predict(x_val)\npreds2.shape","2a1c1d90":"score=mean_squared_error(y_val,preds1)\nscore**0.5","383f6173":"r2_score(y_val,preds1)","c752fa5e":"score=mean_squared_error(y_val,preds2)\nscore**0.5","c9ae6da3":"r2_score(y_val,preds2)","1320d49b":"sam=1000\nf=2\nplt.plot(range(sam,f*sam),y_val[sam:f*sam])\nplt.plot(range(sam,f*sam),preds1[sam:f*sam])\nplt.title('XGB')","8aa7d9e9":"sam=700\nf=4\nplt.plot(range(sam,f*sam),y_val[sam:f*sam])\nplt.plot(range(sam,f*sam),preds2[sam:f*sam])\nplt.title('LGB')","5637d603":"# Notes\n\nThis was just a baseline trial of predicting the power output given wind speed and direction.\n\nMore better fitting of model is very much possible with some hyperparameter tuning and ensemble methods.\n\nTest data was scraped from some different conditions and location of wind turbine.\n\nGreat variance can be seen in testing data due to different conditions and location.","0404b942":"## Testing","9bcac999":"## Let's See the Predictions","cb9938d4":"## LGBM Score","cf42f01c":"## Training","7fb39fca":"## Energy Prediction","9a115147":"## XGBoost Score"}}