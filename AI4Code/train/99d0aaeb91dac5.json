{"cell_type":{"0364a088":"code","e1d93ee3":"code","4279e454":"code","6e32b5ae":"code","0035d6c7":"code","453e50ce":"code","13d3bb70":"code","32c6e6a0":"code","d98b4961":"code","e5342bb0":"code","6f30f7bd":"code","265893ae":"code","bbcc3df1":"code","bbc5cb1e":"code","fb1fba88":"code","50d9843e":"code","3629b74e":"code","af45fc82":"code","5f792cdb":"code","a8d04b74":"code","d97671ca":"code","e7552f46":"code","a58e25fb":"code","bab5a4df":"code","2e2c3a81":"code","7e94febc":"code","22768bd5":"code","a5689bc8":"code","7f73c2aa":"code","9cdb4132":"code","2e1468e7":"code","2791908e":"code","3370ae70":"code","c6fc57c8":"code","b5674bfe":"code","5b5c5f7a":"code","02ba178c":"code","f2ed4356":"code","4eb79bcd":"code","b2f5cbcc":"code","d09d026f":"code","449f6ea5":"code","a11bd954":"code","3336d95b":"code","34578061":"code","2c4e2a4e":"code","07415406":"code","563ff96b":"code","9e7e97d3":"markdown","f5acd25f":"markdown","3dc17d93":"markdown","81c2e334":"markdown","992dbd45":"markdown","068b7c99":"markdown","10fccb6f":"markdown","863d8c34":"markdown","2b793f8b":"markdown","eedae3f1":"markdown","6c9e781e":"markdown","613dea7a":"markdown","e413e6f1":"markdown","4b38742b":"markdown","1f938a3b":"markdown","28a0b220":"markdown","f0f30de1":"markdown","1c2a8820":"markdown","8eb4e9a2":"markdown","2c02240a":"markdown","8f5c5c9f":"markdown","5826cfb0":"markdown","7eb1996c":"markdown","c9a05da1":"markdown","4ec515d4":"markdown","b0ae520d":"markdown","77b44eed":"markdown","b5b1ac1e":"markdown","1a87386f":"markdown","916467a2":"markdown","00b707b3":"markdown","33fa2c0b":"markdown","6ebb14c4":"markdown","b015cb5d":"markdown","0dd0371a":"markdown","7258dfdc":"markdown","a26165f5":"markdown","5c14b674":"markdown","9afc6e42":"markdown","666441fa":"markdown","dbb17557":"markdown","1bd0f653":"markdown","46cc075c":"markdown","06716692":"markdown","c72cfd76":"markdown","6ea8b810":"markdown","1c1b17fa":"markdown","9d52f7bc":"markdown","6ccda1b7":"markdown","63806041":"markdown","0adae606":"markdown","f4641234":"markdown","223edf2b":"markdown","477a0990":"markdown","caa77c50":"markdown"},"source":{"0364a088":"# \u524d\u51e6\u7406\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nimport numpy as np\nimport pandas as pd","e1d93ee3":"# \u53ef\u8996\u5316\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nimport matplotlib.pyplot as plt\n\n# \u30b0\u30e9\u30d5\u3092\u57cb\u3081\u8fbc\u3093\u3067\u8868\u793a\u3059\u308b\u6307\u5b9a\n%matplotlib inline\n# \u30b0\u30e9\u30d5\u306e\u30b9\u30bf\u30a4\u30eb\u306e\u8a2d\u5b9a\uff08\u30b0\u30e9\u30d5\u306b\u30b0\u30ea\u30c3\u30c9\u7dda\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\uff09\nplt.style.use(\"ggplot\")","4279e454":"# \u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u306fExcel\u306e\u8868\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u6271\u3046\uff08\u884c\u3068\u5217\u304c\u3042\u308b\uff09\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\uff08\u751f\u5b58\u304b\u6b7b\u4ea1\u304b\u77e5\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\uff09\ntrain_df = pd.read_csv(\"..\/input\/train.csv\")\n# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\uff08\u751f\u5b58\u304b\u6b7b\u4ea1\u304b\u77e5\u3089\u306a\u3044\u30c7\u30fc\u30bf\uff09\ntest_df = pd.read_csv(\"..\/input\/test.csv\")","6e32b5ae":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\n# (\u884c\u6570, \u5217\u6570) \u3067\u8868\u793a\u3055\u308c\u308b\ntrain_df.shape","0035d6c7":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u30661\u5217\u5c11\u306a\u3044\ntest_df.shape","453e50ce":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u4e0a\u304b\u30895\u884c\u3092\u8868\u793a\n# \u53c2\u8003: train_df.head(7) # \u4e0a\u304b\u30897\u884c\u8868\u793a\ntrain_df.head()","13d3bb70":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u4e0a\u304b\u30895\u884c\u3092\u8868\u793a\n# Survived\u306e\u5217\uff08\u751f\u5b58\u304b\u6b7b\u4ea1\u304b\u3092\u8868\u3059\uff09\u304c\u306a\u3044\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u308b\ntest_df.head()","32c6e6a0":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u60c5\u5831\u3092\u78ba\u8a8d\ntrain_df.info()","d98b4961":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u60c5\u5831\u3092\u78ba\u8a8d\ntest_df.info()","e5342bb0":"# \u751f\u6b7b\u306b\u3064\u3044\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b(pandas\u306e\u30e1\u30bd\u30c3\u30c9)\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0: \u533a\u9593\u306b\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf\u306e\u500b\u6570\u3092\u8868\u3059\u3002\u500b\u6570\u3092\u67f1\u306e\u9ad8\u3055\u306b\u53cd\u6620\u3055\u305b\u308b\n# - alpha: \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u63cf\u753b\u8272\u306e\u900f\u904e\u5ea6\n# - kind: \u63cf\u753b\u3059\u308b\u30b0\u30e9\u30d5\u306e\u7a2e\u985e\uff08\u4eca\u56de\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u6307\u5b9a\uff09\n# - bins\uff1a\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u304a\u3051\u308b\u30c7\u30fc\u30bf\u306e\u533a\u9593\u306e\u6570\uff08\u751f\u6b7b\u304c\u53d6\u308a\u3046\u308b\u5024\u306f0\u304b1\u3002\u533a\u9593\u306f2\u3064\u306a\u306e\u3067\u30010\u306e\u6570\u30681\u306e\u6570\u306b\u5206\u304b\u308c\u308b\uff09\ntrain_df[\"Survived\"].plot(alpha=0.6, kind=\"hist\", bins=2)\nplt.xlabel(\"Survived\")  # x\u8ef8\u30e9\u30d9\u30eb\u306e\u8a2d\u5b9a\nplt.ylabel(\"N\")  # y\u8ef8\u30e9\u30d9\u30eb\u306e\u8a2d\u5b9a\nplt.show()  # \u3053\u308c\u307e\u3067\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\u3092\u63cf\u753b","6f30f7bd":"# \u6027\u5225\u3054\u3068\u306b\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u6a2a\u306b\u4e26\u3079\u3066\u8868\u793a\u3059\u308b\uff09\n# \u63cf\u753b\u9818\u57df\u30681\u30641\u3064\u306e\u30b0\u30e9\u30d5\u3092\u8a2d\u5b9a\uff08\u63cf\u753b\u9818\u57df\u306ffig\u3001\u30b0\u30e9\u30d5\u306faxes\u3068\u3044\u3046\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u4e00\u62ec\u3067\u6271\u3046\uff09\n# 1\u884c2\u5217\u306e\u63cf\u753b\u9818\u57df\u3068\u3057\u30011\u5217\u76ee(\u5de6\u5074)\u306b\u7537\u6027\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u30012\u5217\u76ee(\u53f3\u5074)\u306b\u5973\u6027\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8, 4))\n\nfor i, sex in enumerate([\"male\", \"female\"]):\n    # for\u6587\u306f2\u56de\u56de\u308b\u30021\u56de\u76ee: i=0, sex='male'    2\u56de\u76ee: i=1, sex='female'\n    # Survived\u5217\u306e\u3046\u3061\u8a72\u5f53\u3059\u308bSex\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u62bd\u51fa\u3057\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\n    # \u5f15\u6570ax\u306b\u63cf\u753b\u9818\u57df\u4e2d\u306e\u63cf\u753b\u4f4d\u7f6e\u3092\u6307\u5b9a\uff08\u3053\u3053\u3067\u306f\u3001axes[0]\u304c\u5de6\u5074\u3001axes[1]\u304c\u53f3\u5074\uff09\n    # \u2192 \u3064\u307e\u308a\u3001\u5de6\u5074\u306b\u7537\u6027\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u53f3\u5074\u306b\u5973\u6027\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n    train_df[train_df[\"Sex\"] == sex][\"Survived\"].plot(\n        alpha=0.6, kind=\"hist\", bins=2, ylim=(0, 500), ax=axes[i]\n    )\n    axes[i].set_title(sex)\n\nplt.show()","265893ae":"# \u5e74\u9f62\u306e\u5e45\nprint(f'min age: {train_df[\"Age\"].min()}')\nprint(f'max age: {train_df[\"Age\"].max()}')","bbcc3df1":"# \u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff08\u751f\u5b58\uff0f\u6b7b\u4ea1\u6570\u306e\u7a4d\u307f\u4e0a\u3052\uff09\u3092\u63cf\u753b\uff08\u3069\u306e\u5e74\u9f62\u5c64\u304c\u52a9\u304b\u308a\u3084\u3059\u3044\u306e\u304b\uff1f\uff09\n# \u6b20\u640d\u5024\u306f\u63cf\u753b\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u4e00\u6642\u7684\u306b\u524a\u9664\u3059\u308b\uff08tmp_df\u306f\u6b20\u640d\u5024\u3092\u6301\u305f\u306a\u3044\u304c\u3001train_df\u306f\u6b20\u640d\u5024\u3092\u6301\u3064\uff09\ntmp_df = train_df.dropna(subset=[\"Age\"])\n# matplotlib\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\n# [\u6b7b\u4ea1\u8005\u306e\u5e74\u9f62\u3001\u751f\u5b58\u8005\u306e\u5e74\u9f62]\u306e\u9806\u3067\u6e21\u3057\u3066\u3044\u308b\u2192\u540c\u4e00\u533a\u9593\u3067\u7a4d\u307f\u4e0a\u3052\u3066\u63cf\u753b\u3055\u308c\u308b\n# - range: \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u7bc4\u56f2\uff080\u6b73\u301c80\u6b73\uff09\n# - stacked: \u7a4d\u307f\u4e0a\u3052\u306e\u6709\u52b9\u7121\u52b9\u8a2d\u5b9a\nplt.hist(\n    [\n        tmp_df[(tmp_df[\"Survived\"] == 0)][\"Age\"],\n        tmp_df[(tmp_df[\"Survived\"] == 1)][\"Age\"],\n    ],\n    alpha=0.6,\n    range=(0, 80),\n    bins=10,\n    stacked=True,\n    label=(\"Died\", \"Survived\"),\n)\nplt.legend([\"die\", \"survived\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"N\")\nplt.show()","bbc5cb1e":"# \u6027\u5225\u3054\u3068\u306b\u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff08\u751f\u5b58\uff0f\u6b7b\u4ea1\u6570\u306e\u7a4d\u307f\u4e0a\u3052\uff09\u3092\u63cf\u753b\n# \u6b20\u640d\u5024\u306f\u63cf\u753b\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u4e00\u6642\u7684\u306b\u524a\u9664\u3059\u308b\uff08tmp_df\u306f\u6b20\u640d\u5024\u3092\u6301\u305f\u306a\u3044\u304c\u3001train_df\u306f\u6b20\u640d\u5024\u3092\u6301\u3064\uff09\ntmp_df = train_df.dropna(subset=[\"Age\"])\n# \u63cf\u753b\u9818\u57df\u3092\u7528\u610f\nfig = plt.figure(figsize=(12, 4))\n\nfor i, sex in enumerate([\"male\", \"female\"], 1):\n    # for\u6587\u306f2\u56de\u56de\u308b\u30021\u56de\u76ee: i=1, sex='male'    2\u56de\u76ee: i=2, sex='female'\n    # 1\u56de\u76ee\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u5de6\u5074\u306b\u63cf\u753b\u30012\u56de\u76ee\u306f\u53f3\u5074\u306b\u63cf\u753b\n    ax = fig.add_subplot(1, 2, i)\n    # \u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u3092\u7a4d\u307f\u4e0a\u3052\u305f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u67f1\u306e\u4e2d\u3067\u3001\u751f\u5b58\uff0f\u6b7b\u4ea1\u306e\u5272\u5408\u304c\u898b\u3066\u53d6\u308c\u308b\uff09\n    plt.hist(\n        [\n            tmp_df[(tmp_df[\"Survived\"] == 0) & (tmp_df[\"Sex\"] == sex)][\"Age\"],\n            tmp_df[(tmp_df[\"Survived\"] == 1) & (tmp_df[\"Sex\"] == sex)][\"Age\"],\n        ],\n        alpha=0.6,\n        range=(0, 80),\n        bins=10,\n        stacked=True,\n        label=(\"Died\", \"Survived\"),\n    )\n    ax.set_ylim(0, 120)\n    plt.title(sex)\n    plt.legend([\"die\", \"survived\"])\nplt.show()","fb1fba88":"# \u30c1\u30b1\u30c3\u30c8\u7b49\u7d1a\u3054\u3068\u306b\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u6a2a\u306b\u4e26\u3079\u3066\u8868\u793a\u3059\u308b\uff09\n# 1\u884c3\u5217\u306e\u63cf\u753b\u9818\u57df\u3068\u3059\u308b\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(16, 4))\n\nfor i, pclass in enumerate([1, 2, 3]):\n    # for\u6587\u306f3\u56de\u56de\u308b\u30021\u56de\u76ee: i=0, pclass=1    2\u56de\u76ee: i=1, pclass=2    3\u56de\u76ee: i=0, pclass=3\n    # Survived\u5217\u306e\u3046\u3061\u8a72\u5f53\u3059\u308bpclass\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u62bd\u51fa\u3057\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\n    # \u5de6\u5074\u306bpclass=1\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u4e2d\u592e\u306bpclass=2\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u53f3\u5074\u306bpclass=3\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n    train_df[train_df[\"Pclass\"] == pclass][\"Survived\"].plot(\n        alpha=0.6, kind=\"hist\", bins=2, ylim=(0, 400), ax=axes[i]\n    )\n    axes[i].set_title(f\"Pclass {pclass}\")\n\nplt.show()","50d9843e":"# \u53c2\u8003: \u6027\u5225\uff0f\u30c1\u30b1\u30c3\u30c8\u7b49\u7d1a\uff0f\u751f\u6b7b\u306e\u7d44\u5408\u305b\u5168\u3066\u306b\u5bfe\u3057\u3066\u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\ntmp_df = train_df.dropna(subset=[\"Age\"])\nfor pclass in [1, 2, 3]:\n    # \u63cf\u753b\u9818\u57df\u306e\u4e2d\u306b2\u884c2\u5217\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u914d\u7f6e\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\n    fig, axes = plt.subplots(nrows=2, ncols=2, figsize=[10, 8])\n    sex_n = 0  # axes\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u306a\u308b\n    for sex in [\"male\", \"female\"]:\n        for survived in [0, 1]:\n            # Survived, Sex, Pclass\u304c\u8a72\u5f53\u3059\u308b\u30c7\u30fc\u30bf\u306e\u62bd\u51fa\n            draw_df = tmp_df[\n                (\n                    (tmp_df[\"Survived\"] == survived)\n                    & (tmp_df[\"Sex\"] == sex)\n                    & (tmp_df[\"Pclass\"] == pclass)\n                )\n            ]\n            fig = draw_df[\"Age\"].plot(\n                alpha=0.6,\n                kind=\"hist\",\n                bins=10,\n                xlim=(0, 80),\n                ylim=(0, 70),\n                ax=axes[sex_n][survived],\n            )  # \u8a72\u5f53\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u5185\u3067bin\u309210\u7b49\u5206\u3057\u3066\u3044\u308b\n            fig.set_title(f\"{sex} pclass={pclass} survived={survived}\")\n        sex_n += 1\n    plt.show()","3629b74e":"# \u4e57\u8239\u6e2f\u3054\u3068\u306b\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u6a2a\u306b\u4e26\u3079\u3066\u8868\u793a\u3059\u308b\uff09\n# 1\u884c3\u5217\u306e\u63cf\u753b\u9818\u57df\u3068\u3059\u308b\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(16, 4))\n\nfor i, embarked in enumerate([\"S\", \"Q\", \"C\"]):\n    # for\u6587\u306f3\u56de\u56de\u308b\u30021\u56de\u76ee: i=0, embarked='S'    2\u56de\u76ee: i=1, embarked='Q'    3\u56de\u76ee: i=0, embarked='C'\n    # Survived\u5217\u306e\u3046\u3061\u8a72\u5f53\u3059\u308bembarked\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u62bd\u51fa\u3057\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\n    # \u5de6\u5074\u306bpclass=1\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u4e2d\u592e\u306bpclass=2\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u53f3\u5074\u306bpclass=3\u306e\u751f\u6b7b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n    train_df[train_df[\"Embarked\"] == embarked][\"Survived\"].plot(\n        alpha=0.6, kind=\"hist\", bins=2, ylim=(0, 450), ax=axes[i]\n    )\n    axes[i].set_title(f\"Embarked {embarked}\")\n\nplt.show()","af45fc82":"# \u53c2\u8003: \u6027\u5225\uff0f\u30c1\u30b1\u30c3\u30c8\u7b49\u7d1a\uff0f\u751f\u6b7b\u306e\u7d44\u5408\u305b\u5168\u3066\u306b\u5bfe\u3057\u3066\u5e74\u9f62\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\ntmp_df = train_df.dropna(subset=[\"Age\"])\nfor embarked in [\"S\", \"Q\", \"C\"]:\n    fig, axes = plt.subplots(nrows=2, ncols=2, figsize=[10, 8])\n    sex_n = 0\n    for sex in [\"male\", \"female\"]:\n        for survived in [0, 1]:\n            # Survived, Sex, Embarked\u304c\u8a72\u5f53\u3059\u308b\u30c7\u30fc\u30bf\u306e\u62bd\u51fa\n            draw_df = tmp_df[\n                (\n                    (tmp_df[\"Survived\"] == survived)\n                    & (tmp_df[\"Sex\"] == sex)\n                    & (tmp_df[\"Embarked\"] == embarked)\n                )\n            ]\n            fig = draw_df[\"Age\"].plot(\n                alpha=0.6,\n                kind=\"hist\",\n                bins=10,\n                xlim=(0, 80),\n                ylim=(0, 80),\n                ax=axes[sex_n][survived],\n            )  # \u8a72\u5f53\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u5185\u3067bin\u309210\u7b49\u5206\u3057\u3066\u3044\u308b\n            fig.set_title(f\"{sex} embarked={embarked} survived={survived}\")\n        sex_n += 1\n    plt.show()","5f792cdb":"# \u3053\u3053\u307e\u3067\u306e\u5206\u6790\u3092\u5143\u306b\u3001\u4ee5\u4e0b\u306e4\u3064\u306e\u60c5\u5831\u304b\u3089\u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306b\u3059\u308b\ncolumns = [\"Age\", \"Pclass\", \"Sex\", \"Embarked\"]","a8d04b74":"# \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\u3092X, \u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u60c5\u5831\uff08\u3053\u3053\u3067\u306f\u751f\u6b7b\uff09\u3092y\u3068\u3059\u308b\uff08X\u3068y\u3068\u3044\u3046\u5909\u6570\u540d\u304c\u591a\u3044\uff09\nX = train_df[columns].copy()\ny = train_df[\"Survived\"]\n# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u4e88\u6e2c\u306b\u4f7f\u3046\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u3066\u304a\u304f\nX_test = test_df[columns].copy()","d97671ca":"X.head()","e7552f46":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX.isnull().sum()","a58e25fb":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nX_test.isnull().sum()","bab5a4df":"# Age\u306e\u6b20\u640d\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u308b\n# **Note**: \u30e2\u30af\u30e2\u30af\u30bf\u30a4\u30e0\u3067\u4ed6\u306e\u57cb\u3081\u65b9\u3092\u8a66\u3059\u969b\u306f\u3001\u3053\u306e\u30bb\u30eb\u3092\u7f6e\u304d\u63db\u3048\u307e\u3059\nage_mean = X[\"Age\"].mean()\nprint(f\"Age mean: {age_mean}\")\nX[\"AgeFill\"] = X[\"Age\"].fillna(age_mean)\nX_test[\"AgeFill\"] = X_test[\"Age\"].fillna(age_mean)","2e2c3a81":"# \u6b20\u640d\u3092\u542b\u3080Age\u5217\u3092\u524a\u9664\uff08\u5e74\u9f62\u306e\u60c5\u5831\u306fAgeFill\u5217\u3092\u53c2\u7167\u3059\u308b\uff09\nX = X.drop([\"Age\"], axis=1)\nX_test = X_test.drop([\"Age\"], axis=1)","7e94febc":"# Embarked\u306e\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\nembarked_freq = X[\"Embarked\"].mode()[0]\nprint(f\"Embarked freq: {embarked_freq}\")\nX[\"Embarked\"] = X[\"Embarked\"].fillna(embarked_freq)\n# X_test\u306bEmbarked\u306e\u6b20\u640d\u5024\u304c\u306a\u3044\u305f\u3081\u3001\u5b9f\u65bd\u3057\u306a\u3044","22768bd5":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024(Embarked, AgeFill)\u304c\u57cb\u307e\u3063\u305f\u3053\u3068\u3092\u78ba\u8a8d\nX.isnull().sum()","a5689bc8":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u304c\u57cb\u307e\u3063\u305f\u3053\u3068\u3092\u78ba\u8a8d\nX_test.isnull().sum()","7f73c2aa":"# \u6027\u5225\uff08female\/male\uff09\u30920\/1\u306b\u5909\u63db\u3059\u308b\uff08male\u3068female\u306e\u307e\u307e\u3067\u306fsklearn\u304c\u6271\u3048\u306a\u3044\uff09\n# \u30ab\u30c6\u30b4\u30ea\u3092\u6574\u6570\u306b\u7f6e\u304d\u63db\u3048\u308b\u305f\u3081\u306e\u8f9e\u66f8\u3092\u7528\u610f\ngender_map = {\"female\": 0, \"male\": 1}\n# \u5f15\u6570\u306e\u8f9e\u66f8\u306e\u30ad\u30fc\uff08\u30b3\u30ed\u30f3\u306e\u5de6\u5074\uff09\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u3001\u8f9e\u66f8\u306e\u5024\uff08\u30b3\u30ed\u30f3\u306e\u53f3\u5074\uff09\u306b\u7f6e\u304d\u63db\u308f\u308b\uff08female\u304c0\u306b\u7f6e\u304d\u63db\u308f\u308a\u3001male\u304c1\u306b\u7f6e\u304d\u63db\u308f\u308b\uff09\n# \u6ce8: Sex\u306e\u53d6\u308a\u3046\u308b\u5024\u306ffemale\u304bmale\nX[\"Gender\"] = X[\"Sex\"].map(gender_map).astype(int)\nX_test[\"Gender\"] = X_test[\"Sex\"].map(gender_map).astype(int)","9cdb4132":"# Sex\u306b\u4ee3\u3048\u3066Gender\u3092\u4f7f\u3046\u305f\u3081\u3001Sex\u5217\u3092\u524a\u9664\u3059\u308b\nX = X.drop([\"Sex\"], axis=1)\nX_test = X_test.drop([\"Sex\"], axis=1)","2e1468e7":"# Embarked\uff08S, Q, C\u3068\u3044\u30463\u30ab\u30c6\u30b4\u30ea\uff09\u3092\u30c0\u30df\u30fc\u5909\u6570\u306b\u3059\u308b\n# \uff08Embarked\u5217\u304c\u6d88\u3048\u3001Embarked_S, Embarked_Q, Embarked_C\u5217\u304c\u8ffd\u52a0\u3055\u308c\u308b\uff09\nX = pd.get_dummies(X, columns=[\"Embarked\"])\nX_test = pd.get_dummies(X_test, columns=[\"Embarked\"])","2791908e":"# \u524d\u51e6\u7406\u3057\u305f\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nX.head()","3370ae70":"# \u524d\u51e6\u7406\u3057\u305f\u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nX_test.head()","c6fc57c8":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u30fb\u6027\u80fd\u8a55\u4fa1\u306b\u4f7f\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier","b5674bfe":"# \u4eca\u56de\u306e\u30cf\u30f3\u30ba\u30aa\u30f3\u306f7:3\u306b\u5206\u3051\u3066\u9032\u3081\u308b\nX_train, X_val, y_train, y_val = train_test_split(\n    X, y, test_size=0.3, random_state=1\n)","5b5c5f7a":"# \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u306e\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_train)","02ba178c":"# \u30e2\u30c7\u30eb\u6027\u80fd\u78ba\u8a8d\u7528\u306e\u30c7\u30fc\u30bf\u306e\u6570\u306e\u78ba\u8a8d\nlen(y_val)","f2ed4356":"# \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u7528\u610f\nmodel = LogisticRegression(random_state=1, solver=\"liblinear\")\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u306f\u4ee5\u4e0b\u306e1\u884c\uff08\u3053\u3053\u307e\u3067\u306e\u524d\u51e6\u7406\u306b\u5bfe\u3057\u3066\u305f\u3063\u305f1\u884c\uff01\uff09\u3067\u5b8c\u4e86\u3059\u308b\nmodel.fit(X_train, y_train)","4eb79bcd":"# \u30e2\u30c7\u30eb\u6027\u80fd\u78ba\u8a8d\u7528\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\npred = model.predict(X_val)\n# accuracy\u3092\u7b97\u51fa\u3057\u3066\u8868\u793a\naccuracy_score(y_val, pred)","b2f5cbcc":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\npred = model.predict(X_test)","d09d026f":"# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306b\u5909\u63db\nsubmission = pd.DataFrame(\n    {\"PassengerId\": test_df[\"PassengerId\"], \"Survived\": pred}\n)\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u4f5c\u6210\nsubmission.to_csv(\"submission.csv\", index=False)","449f6ea5":"# \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u304a\u624b\u5143\u3067\u306f\u5b9f\u884c\u4e0d\u8981\u3067\u3059\n# import pandas as pd\n# gender_submission_df = pd.read_csv(\"..\/input\/gender_submission.csv\")\n# gender_submission_df.to_csv(\"submission.csv\", index=False)","a11bd954":"# \uff08\u68481\uff09 \u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\uff08\u5e74\u9f62\u3092\u5927\u304d\u3044\u9806\u306b\u4e26\u3079\u305f\u3068\u304d\u306b\u4e2d\u592e\u306b\u6765\u308b\u5024\u3002\u5e73\u5747\u5024\u3068\u306f\u7570\u306a\u308b\u5024\u3068\u306a\u308b\u3053\u3068\u304c\u591a\u3044\uff09\n\"\"\"\nage_median = X[\"Age\"].median()\nprint(f\"Age mean: {age_median}\")\nX[\"AgeFill\"] = X[\"Age\"].fillna(age_median)\nX_test[\"AgeFill\"] = X_test[\"Age\"].fillna(age_median)\n\"\"\"","3336d95b":"# (\u68482) \u4eee\u8aac: \u5e74\u9f62\u306e\u5e73\u5747\u5024\u306f\u6027\u5225\u3054\u3068\u306b\u9055\u3046\u306e\u3067\u306f\uff1f\n# AgeFill\u5217\u3092\u4f5c\u308b\u524d\u306b\u3001\u6027\u5225\u3054\u3068\u306e\u5e74\u9f62\u306e\u5e73\u5747\u5024\u3092\u78ba\u8a8d\n# X[[\"Sex\", \"Age\"]].groupby(\"Sex\").mean()","34578061":"# \uff08\u68482\uff09\u78ba\u8a8d\u3059\u308b\u3068\u3001\u7537\u6027\u306e\u5e73\u5747\u5e74\u9f62 31\u6b73\u3001\u5973\u6027\u306e\u5e73\u5747\u5e74\u9f62 28\u6b73\n'''\ndef age_by_sex(col):\n    \"\"\"col: [age, sex]\u3068\u60f3\u5b9a\"\"\"\n    age, sex = col\n    if pd.isna(age):  # Age\u304c\u6b20\u640d\u306e\u5834\u5408\u306e\u51e6\u7406\n        if sex == \"male\":\n            return 31\n        elif sex == \"female\":\n            return 28\n        else:  # \u6574\u6570\u306b\u5909\u66f4\u3057\u305fsex\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306a\u3069\n            print(\"Sex\u304cmale\/female\u4ee5\u5916\u306e\u5024\u3092\u3068\u3063\u3066\u3044\u307e\u3059\")\n            return -1\n    else:  # Age\u304c\u6b20\u640d\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306e\u51e6\u7406\n        return age\n\n\n# train_df\u304b\u3089Age\u3068Sex\u306e2\u5217\u3092\u53d6\u308a\u51fa\u3057\u3001\u5404\u884c\u306b\u3064\u3044\u3066age_by_sex\u95a2\u6570\u3092\u9069\u7528\n# age_by_sex\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3067Age\u5217\u306e\u5024\u3092\u4e0a\u66f8\u304d\u3059\u308b\uff08\u6b20\u640d\u306e\u5834\u5408\u306f\u3001\u5024\u304c\u57cb\u3081\u3089\u308c\u308b\uff09\nX[\"AgeFill\"] = X[[\"Age\", \"Sex\"]].apply(age_by_sex, axis=1)\nX_test[\"AgeFill\"] = X_test[[\"Age\", \"Sex\"]].apply(age_by_sex, axis=1)\n'''","2c4e2a4e":"# (\u68483) \u4eee\u8aac: \u5e74\u9f62\u306e\u5e73\u5747\u5024\u306f\u30c1\u30b1\u30c3\u30c8\u306e\u968e\u7d1a\u3054\u3068\u306b\u9055\u3046\u306e\u3067\u306f\uff1f\uff08\u5e74\u9f62\u9ad8\u3044\u2192\u304a\u91d1\u6301\u3063\u3066\u3044\u308b\u2192\u3044\u3044\u30c1\u30b1\u30c3\u30c8\uff09\n# AgeFill\u5217\u3092\u4f5c\u308b\u524d\u306b\u3001\u30c1\u30b1\u30c3\u30c8\u306e\u7b49\u7d1a\u3054\u3068\u306e\u5e74\u9f62\u306e\u5e73\u5747\u5024\u3092\u78ba\u8a8d\n# X[[\"Pclass\", \"Age\"]].groupby(\"Pclass\").mean()","07415406":"# \uff08\u68483\uff09 pclass==1 38\u6b73\u3001pclass==2 30\u6b73\u3001pclass==3 25\u6b73\n'''\ndef age_by_pclass(col):\n    \"\"\"col: [age, pclass]\u3068\u60f3\u5b9a\"\"\"\n    age, pclass = col\n    if pd.isna(age):  # Age\u304c\u6b20\u640d\u306e\u5834\u5408\u306e\u51e6\u7406\n        if pclass == 1:\n            return 38\n        elif pclass == 2:\n            return 30\n        else:  # pclass == 3\u306b\u76f8\u5f53\u3059\u308b\n            return 25\n    else:  # Age\u304c\u6b20\u640d\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306e\u51e6\u7406\n        return age\n\n\nX[\"AgeFill\"] = X[[\"Age\", \"Pclass\"]].apply(age_by_pclass, axis=1)\nX_test[\"AgeFill\"] = X_test[[\"Age\", \"Pclass\"]].apply(age_by_pclass, axis=1)\n'''","563ff96b":"\"\"\"\n# \u6c7a\u5b9a\u6728\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u7528\u610f\nmodel = DecisionTreeClassifier(\n    random_state=1, criterion=\"entropy\", max_depth=3, min_samples_leaf=2\n)\n# \u30e2\u30c7\u30eb\u4f5c\u6210\u306f\u4ee5\u4e0b\u306e1\u884c\uff08\u3053\u3053\u307e\u3067\u306e\u524d\u51e6\u7406\u306b\u5bfe\u3057\u3066\u305f\u3063\u305f1\u884c\uff01\uff09\u3067\u5b8c\u4e86\u3059\u308b\nmodel.fit(X_train, y_train)\n\"\"\"","9e7e97d3":"### \u5909\u66f4\u5c65\u6b74\nhttps:\/\/www.kaggle.com\/ftnext\/kaggle-spzcolab-201901 \u3092\u30d9\u30fc\u30b9\u306b\u30c7\u30fc\u30bf\u306e\u5206\u6790\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u52a0\u3048\u3066\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u305f  \nref: https:\/\/github.com\/PyDataTokyo\/pydata-tokyo-tutorial-1\n\nV6: \u5206\u6790\u90e8\u5206\u3067\u30b3\u30e1\u30f3\u30c8\u6271\u3044\u306b\u3057\u3066\u3044\u305f\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\uff08\u30cf\u30f3\u30ba\u30aa\u30f3\u4e2d\u3067\u306f\u6642\u9593\u306e\u5236\u7d04\u304b\u3089\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6587\u5b57\u5217\u3068\u3057\u3066\u3044\u305f\uff09  \nV7: \u30b0\u30e9\u30d5\u306bylim\u3092\u8a2d\u5b9a\u3057\u3001\u3088\u308a\u898b\u6bd4\u3079\u3084\u3059\u304f\u3057\u305f\u3002\u307e\u305f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306bblack\u3092\u9069\u7528","f5acd25f":"\u3053\u306e\u3042\u3068\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u304c\u3001\u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\u524d\u306b\u3001  \n\u3069\u306e\u7a0b\u5ea6\u306e\u6027\u80fd\u306e\u30e2\u30c7\u30eb\u306a\u306e\u304b\u78ba\u8a8d\u3057\u305f\u3044\u3002  \n\u2192\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u3092\u30e9\u30f3\u30c0\u30e0\u306b2\u3064\u306b\u5206\u3051\u308b\uff08`train_test_split`\uff09\n\n- \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u4f8b\u3048\u30707\u5272\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\n- \u6b8b\u308a\u306e3\u5272\u3067\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u8a55\u4fa1\u3059\u308b\n\n\u53c2\u8003\u60c5\u5831\n\n- \u30e9\u30f3\u30c0\u30e0\u306b\u5206\u3051\u3066\u3044\u308b\u304c\u3001`random_state`\u5f15\u6570\u306e\u5024\u304c\u540c\u3058\u306a\u3089\u3001**\u4f55\u56de\u5b9f\u884c\u3057\u3066\u3082\u540c\u3058** \u3088\u3046\u306b\u30e9\u30f3\u30c0\u30e0\u306b\u5206\u304b\u308c\u308b","3dc17d93":"0\u301c80\u6b73\u309210\u5206\u5272\u306a\u306e\u3067\u3001\u7d048\u6b73\u305a\u3064\u5206\u5272\u3055\u308c\u308b  \n\u52a9\u304b\u3063\u3066\u3044\u308b\u5272\u5408\u304c\u9ad8\u3044\u5e74\u9f62\u5c64\u306f0\u6b73\u301c8\u6b73\uff08\u534a\u6570\u4ee5\u4e0a\uff09\u300110\u4ee3\u524d\u534a\u300130\u4ee3\u5f8c\u534a\u300150\u301c60\u6b73\uff08\u534a\u6570\u7a0b\u5ea6\uff09","81c2e334":"- \u7537\u6027\u306f0\u6b73~8\u6b73\u304c\u751f\u5b58\u7387\u304c\u9ad8\u3044\n- \u2192\u6027\u5225\u4ee5\u5916\u306b\u5e74\u9f62\u3082\u4f7f\u3048\u305d\u3046","992dbd45":"`apply`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-map-applymap-apply\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.apply.html","068b7c99":"- `tmp_df[(tmp_df['Survived']==0) & (tmp_df['Sex']==sex)]['Age']`\n    - **\u6b7b\u4ea1**\u304b\u3064Sex\u304csex(male\u307e\u305f\u306ffemale)\u3068\u4e00\u81f4\u3059\u308b\u884c\u306e\u3046\u3061\u306eAge\u5217\n- `tmp_df[(tmp_df['Survived']==1) & (tmp_df['Sex']==sex)]['Age']`\n    - **\u751f\u5b58**\u304b\u3064Sex\u304csex(male\u307e\u305f\u306ffemale)\u3068\u4e00\u81f4\u3059\u308b\u884c\u306e\u3046\u3061\u306eAge\u5217\n\n\u30ea\u30b9\u30c8\u306b[\u6b7b\u4ea1\u3001\u751f\u5b58]\u306e\u9806\u3067\u683c\u7d0d\u3057\u3001`plt.hist()`\u3067\u6b7b\u4ea1\u3001\u751f\u5b58\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b  \n\u63cf\u753b\u3055\u308c\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u7a4d\u307f\u91cd\u306d\u3089\u308c\u308b  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.hist.html","10fccb6f":"`fillna`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-nan-dropna-fillna\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html","863d8c34":"`train_test_split`  \n\u53c2\u8003: https:\/\/docs.pyq.jp\/python\/machine_learning\/tips\/train_test_split.html  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html","2b793f8b":"## 2-B. \u30e2\u30c7\u30eb\u4f5c\u6210\n\n\u30e2\u30c7\u30eb\u306f\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3057\u3066\u4f5c\u6210\u3059\u308b\u3002  \n\u4eca\u56de\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u4f7f\u3046\uff08\u5f8c\u307b\u3069\u5909\u66f4\u3082\u8a66\u305b\u307e\u3059\uff09  \n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u95a2\u6570): https:\/\/scikit-learn.org\/stable\/auto_examples\/linear_model\/plot_logistic.html","eedae3f1":"## \u3053\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u3084\u308b\u3053\u3068\n\n1. \u5206\u6790\n1. \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u304b\u3089\u4e57\u5ba2\u306e\u751f\u5b58\uff0f\u6b7b\u4ea1\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\n    1. \u524d\u51e6\u7406\n    2. \u30e2\u30c7\u30eb\u4f5c\u6210\n    3. \u6027\u80fd\u78ba\u8a8d\n2. 2\u3067\u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u4e88\u6e2c\u3059\u308b\uff08\u305d\u306e\u5f8c\u3001Kaggle\u306b\u63d0\u51fa\u3059\u308b\uff09","6c9e781e":"\u57cb\u3081\u308b\u306e\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\n\n- Age: \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u5024\uff08=\u5e74\u9f62\u306e\u7dcf\u548c\/\u500b\u6570\uff09\n- Embarked: \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u3067\u4e00\u756a\u591a\u304f\u767b\u5834\u3059\u308b\u5024\uff08\u4e00\u756a\u591a\u304f\u306e\u4eba\u304c\u4e57\u3063\u3066\u3044\u308b\u6e2f\uff09","613dea7a":"info\u306e\u60c5\u5831\u306b\u3001train_df\u3067\u306f891\u3088\u308a\u3082\u5c11\u306a\u3044\u6570\u306e\u5217\u3001  \ntest_df\u3067\u306f418\u3088\u308a\u3082\u5c11\u306a\u3044\u6570\u306e\u5217\u304c\u3042\u3063\u305f\u3002  \n\u2192\u6b20\u3051\u305f\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f\u5f8c\u307b\u3069\u524d\u51e6\u7406\u3067\u6271\u3044\u307e\u3059","e413e6f1":"`info`  \n\u89e3\u8aac: https:\/\/note.nkmk.me\/python-pandas-len-shape-size\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.info.html","4b38742b":"`mode`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-mode\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.mode.html","1f938a3b":"- \u6b20\u3051\u305f\u30c7\u30fc\u30bf\uff1d**\u6b20\u640d\u5024**\uff08missing value\u3001\u6b20\u6e2c\u5024\u3068\u3082\u547c\u3070\u308c\u308b\uff09  \n- \u6b20\u640d\u306e\u8981\u56e0\uff1a\u30c7\u30fc\u30bf\u306e\u53ce\u96c6\u904e\u7a0b\u3067\u629c\u3051\u3066\u3057\u307e\u3063\u305f\u306a\u3069\n- \u6a5f\u68b0\u5b66\u7fd2\u306e\u30c4\u30fc\u30eb\u306f **\u4e00\u822c\u306b\u6b20\u640d\u5024\u306b\u5bfe\u51e6\u3067\u304d\u306a\u3044**\uff08\u305d\u306e\u305f\u3081\u30c7\u30fc\u30bf\u3092\u524d\u51e6\u7406\u3059\u308b\uff09\n- \u524a\u9664\u3059\u308b\u3068\u8cb4\u91cd\u306a\u30c7\u30fc\u30bf\u304c\u6e1b\u308b\u306e\u3067\u3001**\u57cb\u3081\u308b**","28a0b220":"## 2-C. \u6027\u80fd\u78ba\u8a8d\n\n\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306e\u5834\u5408\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u306faccuracy\u3068\u3044\u3046\u30b9\u30b3\u30a2\u3067\u8a55\u4fa1\u3055\u308c\u308b  \n\uff08**\u6ce8**\uff1a\u6027\u80fd\u3092\u8868\u3059\u30b9\u30b3\u30a2\u306f\u4ed6\u306b\u3082\u3042\u308b\uff09\n\n- 418\u540d\u306e\u3046\u3061\u751f\u6b7b\u3092\u6b63\u3057\u304f\u4e88\u60f3\u3067\u304d\u305f\u3082\u306e\u306e\u5272\u5408\n- 1\u306b\u8fd1\u3044\u307b\u3069\u6027\u80fd\u304c\u3088\u3044\n\n| \u30b1\u30fc\u30b9 | \u6b63\u89e3\uff0f\u8aa4\u308a |\n| ----- | ----- |\n| \u751f\u5b58\u3057\u305f\u4e57\u5ba2\u3092\u751f\u5b58\u3068\u4e88\u6e2c | \u6b63\u89e3 |\n| \u751f\u5b58\u3057\u305f\u4e57\u5ba2\u3092\u6b7b\u4ea1\u3068\u4e88\u6e2c | \u8aa4\u308a |\n| \u6b7b\u4ea1\u3057\u305f\u4e57\u5ba2\u3092\u751f\u5b58\u3068\u4e88\u6e2c | \u8aa4\u308a |\n| \u6b7b\u4ea1\u3057\u305f\u4e57\u5ba2\u3092\u6b7b\u4ea1\u3068\u4e88\u6e2c | \u6b63\u89e3 |\n\naccuracy = (\u6b63\u89e3\u306e\u7dcf\u6570) \/ (\u6b63\u89e3\u306e\u7dcf\u6570 + \u8aa4\u308a\u306e\u7dcf\u6570)\n\n>Your score is the percentage of passengers you correctly predict. This is known simply as \"accuracy\u201d.\n\nref: https:\/\/www.kaggle.com\/c\/titanic#evaluation","f0f30de1":"`drop`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-drop\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html","1c2a8820":"`groupby`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-groupby-statistics\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.groupby.html","8eb4e9a2":"- \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3068\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u6587\u5b57\u5217\u306e\u5024\u3092\u53d6\u308b\u5909\u6570\n    - Sex: male, female\n    - Embarked: S, Q, C\u3000\uff08\u4e57\u8239\u3057\u305f\u6e2f\u306e\u982d\u6587\u5b57\uff09\n- \u6587\u5b57\u5217\u3092\u6574\u6570\u306b\u5909\u63db\u3059\u308b\n    - Sex: male=1, female=0\u3068\u3057\u3066\u7f6e\u304d\u63db\u3048\n    - Embarked: \u30c0\u30df\u30fc\u5909\u6570\u5316\uff08\u5f8c\u8ff0\uff09","2c02240a":"`plot`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-plot\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8:  https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.plot.html","8f5c5c9f":"- \u7537\u6027\u306e\u751f\u5b58\u7387\u306f\u4f4e\u3044\uff08\u5de6\u5074\u3088\u308a\u53f3\u5074\u306e\u307b\u3046\u304c\u4f4e\u3044\uff09\n- \u5973\u6027\u306e\u751f\u5b58\u7387\u306f\u9ad8\u3044\uff08\u5de6\u5074\u3088\u308a\u3082\u53f3\u5074\u306e\u307b\u3046\u304c\u9ad8\u3044\uff09\n- \u2192 \u6027\u5225\u306f\u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\u969b\u306b\u6709\u529b\u306a\u60c5\u5831\u3068\u8003\u3048\u3089\u308c\u308b\n- \u4eba\u6570\u306f\u7537\u6027\u306e\u65b9\u304c\u591a\u3044\uff08\u7537\u6027550\u540d\u3001\u5973\u6027300\u540d\uff09","5826cfb0":"## 2-A. \u524d\u51e6\u7406\n\n1. \u6b20\u640d\u5024\n1. \u30ab\u30c6\u30b4\u30ea\u5909\u6570","7eb1996c":"\u6b20\u3051\u305f\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5217\n\n| \u30c7\u30fc\u30bf\u7a2e\u5225 | \u5217\u540d | \u6b20\u3051\u5177\u5408 |\n| ----- | ----- | ----- |\n| \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30fb\u6027\u80fd\u8a55\u4fa1\u7528 | **Age** | 20%\u7a0b\u5ea6 |\n| \u30e2\u30c7\u30eb\u4f5c\u6210\u7528 | **Embarked** | \u6570\u4ef6 |","c9a05da1":"## 1. \u5206\u6790","4ec515d4":"\u521d\u56de\u306f\u3059\u3050\u63d0\u51fa\u3002  \n\u5225\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u305f\u3068\u304d\u306b\u3001\u4ee5\u524d\u306b\u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u3088\u308a\u30b9\u30b3\u30a2\u304c\u4f4e\u3051\u308c\u3070\u3001\u63d0\u51fa\u3057\u306a\u3044\u3068\u3044\u3046\u5224\u65ad\u304c\u3067\u304d\u308b  \n\uff08Kaggle\u306b\u63d0\u51fa\u3057\u306a\u304f\u3066\u3082\u8a66\u884c\u932f\u8aa4\u304c\u9032\u3081\u3089\u308c\u308b\u3002\u63d0\u51fa\u56de\u6570\u306b\u306f\u65e5\u6b21\u306e\u4e0a\u9650\u304c\u3042\u308b\uff09","b0ae520d":"## \u53c2\u8003: \u63d0\u51fa\u7df4\u7fd2\u30c7\u30fc\u30bf\u3092\u63d0\u51fa\u3057\u3066\u307f\u308b","77b44eed":"Embarked\u306e\u30c0\u30df\u30fc\u5909\u6570\u5316\u306b\u3064\u3044\u3066\n\n- S=1, Q=2, C=3\u3068\u6574\u6570\u306b\u7f6e\u304d\u63db\u3048\u308b\n    - **\u672c\u6765\u306a\u304b\u3063\u305f\u5927\u5c0f\u95a2\u4fc2\u304c\u60f3\u5b9a\u3055\u308c\u3066\u3057\u307e\u3046**\n- (S, Q, C)\u3068\u3044\u3046\u5f62\u5f0f\u3067\u6574\u6570\u306b\u7f6e\u304d\u63db\u3048\u308b\n\n| Embarked\u306e\u5024 | \u7f6e\u304d\u63db\u3048\u305f\u3042\u3068 |\n| ----- | ----- |\n| S | (1, 0, 0) |\n| Q | (0, 1, 0) |\n| C | (0, 0, 1) |","b5b1ac1e":"## \u57fa\u672c\u64cd\u4f5c\n\n\u30b3\u30fc\u30c9\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u30d6\u30ed\u30c3\u30af\u3092 **\u30bb\u30eb** \u3068\u547c\u3073\u307e\u3059\u3002  \n\n1. \u30bb\u30eb\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u9078\u629e\u3059\u308b\uff08\u5165\u529b\u3067\u304d\u308b\u72b6\u614b\u306b\u306a\u308b\uff09\n2. \u9078\u629e\u3057\u305f\u30bb\u30eb\u3092\u5b9f\u884c\u3059\u308b\n    - \u5165\u529b\u3067\u304d\u308b\u72b6\u614b\u3067Shift+Enter\u30ad\u30fc\u3092\u62bc\u3059\uff08\u3053\u3061\u3089\u306b\u6163\u308c\u308b\u3068\u7c21\u5358\u3067\u3059\uff09\n    - \u5de6\u5074\u306b\u8868\u793a\u3055\u308c\u308b\u518d\u751f\u30dc\u30bf\u30f3\u25b6\u3092\u30af\u30ea\u30c3\u30af","1a87386f":"\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u30b3\u30f3\u30da\u3067\u306f\u4ee5\u4e0b\u306e\u30d5\u30a9\u30eb\u30c0\u914d\u7f6e\u3068\u306a\u308b\u3002\u3053\u308c\u3092\u8e0f\u307e\u3048\u3066\u3001\u76f8\u5bfe\u30d1\u30b9\u3067\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\n\n- \u2523 \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    - \u2517 \u73fe\u5728\u306ekernel\n- \u2517 input\/\n    - \u2523 train.csv\uff08\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\uff09\n    - \u2523 test.csv\uff08\u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\uff09\n    - \u2517 gender_submission.csv\uff08\u63d0\u51fa\u7df4\u7fd2\u7528\u30c7\u30fc\u30bf\uff09","916467a2":"- pclass=2\u306emale\u306f0\u6b73\u301c10\u6b73\uff08\u82e5\u3044\u5c64\uff09\u304c\u751f\u5b58\n- pclass=3\u306efemale\u306fpclass=1,2\u306efemale\u3068\u6bd4\u3079\u3066\u52a9\u304b\u3089\u306a\u3044\u4eba\u3082\u591a\u3044\uff08\u534a\u3005\u304f\u3089\u3044\uff09","00b707b3":"`accuracy_score`  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.accuracy_score.html","33fa2c0b":"`read_csv`  \n\u89e3\u8aac: https:\/\/note.nkmk.me\/python-pandas-read-csv-tsv\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html","6ebb14c4":"### Age\u306e\u6b20\u640d\u306e\u57cb\u3081\u65b9\u3092\u898b\u76f4\u3059\n\n- \uff08\u68481\uff09 \u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\n- \uff08\u68482\uff09 Sex\u306b\u5fdc\u3058\u3066\u5e74\u9f62\u3092\u57cb\u3081\u308b\n- \uff08\u68483\uff09 Pclass\u306b\u5fdc\u3058\u3066\u5e74\u9f62\u3092\u57cb\u3081\u308b\n\nKernel\u3092Edit\u3059\u308b\u969b\u3001\u5e73\u5747\u5024\u3067\u57cb\u3081\u305f\u90e8\u5206\u3092\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002  \n\u73fe\u72b6\u30b3\u30e1\u30f3\u30c8\u6271\u3044\u306b\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30b3\u30fc\u30c9\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u306b\u306f\u3001\u59cb\u3081\u3068\u7d42\u308f\u308a\u306e`\"\"\"`\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059","b015cb5d":"`get_dummies`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-get-dummies\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.get_dummies.html","0dd0371a":"### 2-A 1.\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\n\n- Age\n- Embarked","7258dfdc":"`shape`  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.shape.html","a26165f5":"`head`  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.head.html","5c14b674":"| \u5909\u6570\u540d | \u7528\u9014 |\n| ----- | ----- |\n| X_train | \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u306e\u30c7\u30fc\u30bf\uff08\u4e57\u5ba2\u306e\u5c5e\u6027\uff09 |\n| y_train | \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u306e\u30c7\u30fc\u30bf\uff08\u751f\u6b7b\uff09 |\n| X_val | \u30e2\u30c7\u30eb\u306e\u6027\u80fd\u78ba\u8a8d\u7528\u306e\u30c7\u30fc\u30bf\uff08\u4e57\u5ba2\u306e\u5c5e\u6027\uff09 |\n| y_val | \u30e2\u30c7\u30eb\u306e\u6027\u80fd\u78ba\u8a8d\u7528\u306e\u30c7\u30fc\u30bf\uff08\u751f\u6b7b\uff09 |","9afc6e42":"- \u5de6\u5074: 0=\u6b7b\u4ea1\u3001\u53f3\u5074: 1=\u751f\u5b58\n- \u751f\u5b58\u8005\uff08\u53f3\u5074\uff09\u306f\u6b7b\u4ea1\u8005\uff08\u5de6\u5074\uff09\u306e\u534a\u5206\u304f\u3089\u3044\n- \u2192 \u751f\u5b58\u7387\u306f1\/3\u304f\u3089\u3044","666441fa":"## \u3053\u306e\u30ab\u30fc\u30cd\u30eb\u306b\u3064\u3044\u3066\n\n2019\/03\u958b\u50ac[Kaggle\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u30cf\u30f3\u30ba\u30aa\u30f3\uff08\u30b5\u30dd\u30fc\u30bf\u30fc\u30ba\u52c9\u5f37\u4f1a\uff09](https:\/\/supporterzcolab.com\/event\/740\/)\u7528\u306ekernel\u3067\u3059\u3002  \n\u30cf\u30f3\u30ba\u30aa\u30f3\u30d1\u30fc\u30c8\u3067\u4f7f\u3044\u307e\u3059\n\n1. \u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3057\u3066\u5206\u6790\u3059\u308b\n2. \u30e2\u30c7\u30eb\u4f5c\u6210\u3092\u4e00\u7dd2\u306b\u4e00\u56de\u3084\u3063\u3066kernel\u306e\u64cd\u4f5c\u306b\u6163\u308c\u308b\n3. \u3082\u304f\u3082\u304f\u30bf\u30a4\u30e0\u3067\u5404\u81ea\u8a66\u884c\u932f\u8aa4\uff08\u30b3\u30fc\u30c9\u7247\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\uff09","dbb17557":"`mean`  \n\u53c2\u8003: https:\/\/deepage.net\/features\/pandas-mean.html  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.mean.html","1bd0f653":"### 1-A 2.\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u6570\u5024\u5316\u3059\u308b\n\n- Sex\uff08male, female\uff09\n- Embarked(S, Q, C)","46cc075c":"- \u6e2fQ\u3067\u4e57\u8239\u3057\u305f\u4eba\u306f\u307b\u3068\u3093\u3069\u304c\u7537\u6027\u3067\u6b7b\u4ea1\u3057\u3066\u3044\u308b","06716692":"`train_df[train_df['Sex']==sex]['Survived']`  \ntrain_df\u306e\u4e2d\u3067\u3001Sex\u304csex(male\u307e\u305f\u306ffemale)\u3068\u4e00\u81f4\u3059\u308b\u884c\u306e\u3046\u3061\u306eSurvived\u5217\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b  \n\uff08\u7d9a\u304f`.plot`\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\uff09  \n  \n\u53c2\u8003: \u5217\u306e\u53d6\u308a\u51fa\u3057 https:\/\/note.nkmk.me\/python-pandas-index-row-column\/  \n\u53c2\u8003: \u771f\u507d\u5024\u3067\u884c\u306e\u53d6\u308a\u51fa\u3057 https:\/\/note.nkmk.me\/python-pandas-multiple-conditions\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: 10 minutes pandas\u306e\u4e2d\u306eSelection https:\/\/pandas.pydata.org\/pandas-docs\/stable\/getting_started\/10min.html#selection\n","c72cfd76":"`isna`  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.isna.html","6ea8b810":"| \u30c7\u30fc\u30bf\u306e\u60c5\u5831 | \u5217\u540d |\u3000\u610f\u5473 |\n| ----- | ----- | ----- |\n| int | PassengerId | \u4e57\u5ba2ID |\n| int | **Pclass** | \u30c1\u30b1\u30c3\u30c8\u306e\u7b49\u7d1a (1, 2, 3) |\n| int | SibSp | \u540c\u4e57\u3057\u305f\u5144\u5f1f\u59c9\u59b9\/\u914d\u5076\u8005\u306e\u4eba\u6570 |\n| int | Parch | \u540c\u4e57\u3057\u305f\u4e21\u89aa\/\u5b50\u4f9b\u306e\u4eba\u6570 |\n| int | *Survived* | 0\uff1a\u6b7b\u4ea1\u30011\uff1a\u751f\u5b58 |\n| float | **Age** | \u5e74\u9f62\uff08\u63a8\u6e2c\u304c\u3042\u308b\u305f\u3081\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09 |\n| float | Fare | \u904b\u8cc3 |\n| object | Name | \u6c0f\u540d |\n| object | **Sex** | \u6027\u5225 |\n| object | Ticket | \u30c1\u30b1\u30c3\u30c8\u756a\u53f7 |\n| object | Cabin | \u8239\u5ba4\u756a\u53f7\u3000|\n| object | **Embarked** | \u4e57\u8239\u3057\u305f\u6e2f\u306e\u982d\u6587\u5b57(S, Q, C) |\n\nref: https:\/\/www.kaggle.com\/c\/titanic\/data","1c1b17fa":"## \u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\n\n\u7cbe\u5ea6\u304c\u5909\u308f\u308b\u65b9\u6cd5\uff08\u4e0a\u304c\u3089\u306a\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\uff09\n\n- Age\u306e\u6b20\u640d\u306e\u57cb\u3081\u65b9\u3092\u898b\u76f4\u3059\n- \u30e2\u30c7\u30eb\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5909\u3048\u308b","9d52f7bc":"## 3. \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u751f\u6b7b\u3092\u4e88\u6e2c\n\n- \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\uff08418\u4ef6\uff09\u306b\u3064\u3044\u3066\u4e88\u6e2c\u3057\u305f\u3042\u3068\u3001\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\n- \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u306eCSV\u3068\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\uff081\u304c\u751f\u5b58\u30010\u304c\u6b7b\u4ea1\uff09\n\nPassengerId | Survived\n----- | -----\n892 | 0\n: | :\n1309|1\n\n- ref: https:\/\/www.kaggle.com\/c\/titanic#evaluation","6ccda1b7":"`median`  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.median.html","63806041":"- \u6e2fC\u306f\u751f\u5b58\u8005\u304c\u534a\u5206\u7a0b\u5ea6\n- \u6e2fS, Q\u306f\u751f\u5b58\u8005\u304c3\u5206\u306e1\u7a0b\u5ea6\n- \u2192Embarked\u3082\u751f\u6b7b\u306e\u4e88\u6e2c\u306b\u52a0\u3048\u3066\u307f\u308b","0adae606":"- Pclass=1\u306f\u751f\u5b58\u8005\u304c\u904e\u534a\u6570\u3092\u8d85\u3048\u3066\u3044\u308b\n- Pclass=2\u306f\u751f\u5b58\u8005\u304c\u534a\u5206\u7a0b\u5ea6\n- Pclass=3\u306f\u751f\u5b58\u8005\u304c\u5c11\u306a\u3044\uff084\u5206\u306e1\u7a0b\u5ea6\uff09\n- \u2192Pclass\u3082\u751f\u6b7b\u306e\u4e88\u6e2c\u306b\u4f7f\u3048\u308b\n- \u4eba\u6570\u306e\u591a\u3044\u9806\u306b\u4e26\u3079\u308b\u3068\u3001Pclass=3(500\u540d), 1(220\u540d), 2\uff08180\u540d\uff09","f4641234":"`map`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-map-replace\/  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.map.html","223edf2b":"| info\u306b\u3088\u308b\u60c5\u5831 | \u610f\u5473 |\n| ----|---- | \n| int | \u6574\u6570 |\n| float | \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 |\n| object | \u6587\u5b57\u5217 |","477a0990":"### \u30e2\u30c7\u30eb\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5909\u3048\u308b\n\n\u6c7a\u5b9a\u6728\u3092\u8a66\u3059  \n\n\u53c2\u8003: https:\/\/scikit-learn.org\/stable\/modules\/tree.html#classification  \n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeClassifier.html","caa77c50":"`isnull().sum()`  \n\u53c2\u8003: https:\/\/note.nkmk.me\/python-pandas-nan-judge-count\/"}}