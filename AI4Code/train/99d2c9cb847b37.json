{"cell_type":{"f4c83bb8":"code","d9c9abbf":"code","0168aec2":"code","3657f314":"code","f67076c6":"code","1b3e3970":"code","9cf76a5c":"code","eb05b7bb":"code","ef1825b7":"code","c5aa3dc6":"code","8f300ebf":"code","3e7eaafc":"code","469b5a37":"code","17315745":"code","aef0191f":"code","e9627f6e":"code","aaad9628":"code","557e5ef1":"code","0019acc2":"code","69963498":"code","7baefbea":"code","e06c5ee0":"code","7fcc50ec":"code","dfb9a9c8":"code","13e2b020":"code","6b0f65c5":"code","872cd810":"code","e6c482a0":"code","a93510d7":"code","25615fba":"code","563dda38":"code","0acfaf62":"code","e6cb8790":"code","7f77978a":"code","cde65c5b":"code","05489820":"code","429e2d9e":"code","14db7140":"code","d1092b80":"code","c878b720":"code","f346a5a0":"code","65011a88":"code","40e05e0f":"code","760cf0bc":"code","4182a2ed":"code","dee29830":"code","df65cd36":"code","f2b9f4e3":"code","61c7f967":"code","29ee6a7a":"code","3b258353":"code","4e0096c4":"code","5b4fac21":"code","0e1ffcfa":"code","b51ed298":"code","63856ab4":"code","310adbc0":"code","71a01baa":"code","85a50f32":"code","abe79c95":"code","030cf89e":"code","4d39f111":"markdown","a602d438":"markdown","387a4d70":"markdown","77b3f597":"markdown","df9c2c29":"markdown","b80c1524":"markdown","c9d278db":"markdown","063cc518":"markdown","658d52af":"markdown","c4365cf7":"markdown","6cfd59dc":"markdown","8518a4da":"markdown","812f2f19":"markdown","2cbc4960":"markdown","65c4cb7c":"markdown","6efd9a4f":"markdown","0a7318ab":"markdown","9d4d5760":"markdown","36882280":"markdown","0531f5d1":"markdown","b064cbc3":"markdown","65245c01":"markdown","dd2e87f5":"markdown","7bf10b78":"markdown","721e9cd7":"markdown","b1a3a615":"markdown","dcb09e1f":"markdown","197f60bf":"markdown","15ca3e69":"markdown","65a3bc1e":"markdown","0e5c8403":"markdown","fcb0b654":"markdown","c438ba74":"markdown","795fa0f1":"markdown","a83fcc3f":"markdown","d298c804":"markdown","e6f964b5":"markdown","c8b4854b":"markdown","93f97a29":"markdown","2d5fd95d":"markdown","70d59245":"markdown","4dcfe740":"markdown","5d7b847e":"markdown","3ec891eb":"markdown","cad5f7f7":"markdown","77a95e13":"markdown","89aaa63f":"markdown","a3660013":"markdown","189f1741":"markdown","d3050b3f":"markdown","b7bcfaa8":"markdown","59fa3e1f":"markdown","8fe732ce":"markdown","efafcc7d":"markdown","a6880bdb":"markdown"},"source":{"f4c83bb8":"import os # accessing directory structure\nimport itertools\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as ticker\nfrom pandas.plotting import andrews_curves\nimport plotly.plotly as py\nimport math\nimport datetime as dt\nfrom datetime import datetime\nfrom dateutil.parser import parse\n#df.to_csv('pandas_dataframe_importing_csv\/example.csv') #exporting to csv\n\n# Any results you write to the current directory are saved as output.","d9c9abbf":"print(os.listdir('..\/input'))","0168aec2":"df = pd.read_csv('..\/input\/spotifys-worldwide-daily-song-ranking\/data.csv')\ndf2 = pd.read_csv('..\/input\/top-spotify-tracks-of-2018\/top2018.csv')\ndf3 = pd.read_csv('..\/input\/top-tracks-of-2017\/featuresdf.csv')\ndf.columns = (df.columns.str.lower()\n                .str.replace(' ', '_'))\ndf.columns","3657f314":"df.head()","f67076c6":"\ndf['date'] = df['date'].astype('datetime64[ns]')\nplt.rcParams[\"figure.figsize\"] = [16,9]\nplt.plot(df['date'], df['streams'],'*')\nplt.xticks(rotation='vertical')\nplt.ylabel('Streams')\nplt.xlabel('Dates')\nplt.title('Scatterplot of Streams vs Time')","1b3e3970":"df3.columns","9cf76a5c":"df3 = df3.rename(columns={'name': 'track_name'})\ndf3 = df3.drop(columns=['id'])\ndf3.head()","eb05b7bb":"df2 = df2.rename(columns={'name': 'track_name'})\ndf2 = df2.drop(columns=['id'])\ndf3.head()","ef1825b7":"df.drop('url', axis=1, inplace=True)\n","c5aa3dc6":"# Validate all artists and track names are the same missing\n(df['artist'].isna() == df['track_name'].isna()).all()","8f300ebf":"\n# drop null rows\ndf = df.dropna(axis=0)\n","3e7eaafc":"df = df[df['region'].str.contains(\"us\")] #include only a region, US","469b5a37":"df.describe(include='all')","17315745":"df.artist.describe()","aef0191f":"df.position.describe()","e9627f6e":"df.track_name.describe()","aaad9628":"df.streams.describe()","557e5ef1":"#histogram\nsns.distplot(df['position'])","0019acc2":"x = np.log10(df.loc[:,'streams'])\nsns.distplot(x, hist=False)","69963498":"ax1 = df.plot.scatter(x='position', y='streams', c='DarkBlue')","7baefbea":"sns.jointplot(x='position', y='streams', data=df);","e06c5ee0":"df['date'].min() #First date entry","7fcc50ec":"df['date'].max() #Last date entry","dfb9a9c8":"dftest = df[(df['date'] > '2017-12-31')]\ndf=df[(df['date'] < '2018-01-01')]","13e2b020":"df.tail()","6b0f65c5":"dftest.head()","872cd810":"dftest.tail()","e6c482a0":"dfnew = pd.merge(df, df3, on='track_name')\ndfnew = dfnew.drop(columns=['artists'])\ndfnew.sort_values(by='date')\ndfnew.head()","a93510d7":"dftest = pd.merge(dftest, df2, on='track_name')\ndftest = dftest.drop(columns=['artists'])\ndftest.head()","25615fba":"dfnew.describe()","563dda38":"testtn = dftest.track_name.unique()","0acfaf62":"dftesttn = pd.DataFrame({'track_name': testtn})\nprint(dftesttn)","e6cb8790":"dftrain = pd.merge(dfnew, dftesttn, on='track_name')\n\ndftrain.head()","7f77978a":"\nfig,ax= plt.subplots()\nfor n, group in dftrain.groupby('track_name'):\n    group.plot(x='date',y='streams', ax=ax,label=n)\n    \nplt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',\n           ncol=4, mode=\"expand\", borderaxespad=1.)\nplt.title('Scatterplot of Streams vs Time for Training Data Track Names')","cde65c5b":"\nfig,ax= plt.subplots()\nfor n, group in dftrain.groupby('track_name'):\n    group.plot(x='date',y='position', ax=ax,label=n)\n    plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left',\n           ncol=4, mode=\"expand\", borderaxespad=1.)\nplt.gca().invert_yaxis()\nplt.title('Scatterplot of Position vs Time for Training Data Track Names')","05489820":"x=dftrain['time_signature']\nplt.hist(x, bins=10)\nplt.gca().set(title='Time Signature in Ranking Data', ylabel='Frequency');","429e2d9e":"\nx=dftrain['instrumentalness']\nplt.hist(x, bins=10)\nplt.gca().set(title='Instrumentalness in Ranking Data', ylabel='Frequency');","14db7140":"\nx=dftrain['speechiness']\nplt.hist(x, bins=10)\nplt.gca().set(title='Speechiness in Ranking Data', ylabel='Frequency');","d1092b80":"corr = dftrain.corr()\ncorr.style.background_gradient(cmap='cool').set_precision(2)","c878b720":"dfin = dfnew.set_index('date')\ndfin['streams'].plot(linewidth=0.5);","f346a5a0":"ax = dfin.loc['2017-08':'2017-10', 'streams'].plot(marker='o', linestyle='-')\n","65011a88":"from IPython.display import Image\nImage(\"..\/input\/images2\/positioncolormap.PNG\")","40e05e0f":"\nImage(\"..\/input\/images\/img\/img\/artistvsstreams.png\")","760cf0bc":"\nImage(\"..\/input\/images2\/tracknamevsstreams.png\")","4182a2ed":"\nImage(\"..\/input\/images\/img\/img\/DanceabilityvsStreams.png\")","dee29830":"\nImage(\"..\/input\/images\/img\/img\/DurationvsStreams.png\")","df65cd36":"\nImage(\"..\/input\/images\/img\/img\/EnergyvsStreams.png\")","f2b9f4e3":"\nImage(\"..\/input\/images\/img\/img\/InstrumentalnessvsStreams.png\")","61c7f967":"\nImage(\"..\/input\/images\/img\/img\/KeyvsStreams.png\")","29ee6a7a":"\nImage(\"..\/input\/images\/img\/img\/LivenessvsStreams.png\")","3b258353":"\nImage(\"..\/input\/images\/img\/img\/LoudnessvsStreams.png\")","4e0096c4":"\nImage(\"..\/input\/images\/img\/img\/ModevsStreams.png\")","5b4fac21":"\nImage(\"..\/input\/images\/img\/img\/SpeechinessvsStreams.png\")","0e1ffcfa":"\nImage(\"..\/input\/images\/img\/img\/TempovsStreams.png\")","b51ed298":"\nImage(\"..\/input\/images\/img\/img\/TimeSignaturevsStreams.png\")","63856ab4":"\nImage(\"..\/input\/images\/img\/img\/ValencevsStreams.png\")","310adbc0":"\nImage(\"..\/input\/images\/img\/img\/AcousticnessvsStreams.png\")","71a01baa":"dftrainin = dftrain.set_index('date')\ny = dftrainin['streams'].resample('D').mean()\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(y,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue\n","85a50f32":"mod = sm.tsa.statespace.SARIMAX(y,\n                                order=(0, 1, 0),\n                                seasonal_order=(1, 1, 1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","abe79c95":"results.plot_diagnostics(figsize=(16, 8))\nplt.show()","030cf89e":"pred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = y['2017':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('streams')\nplt.legend()\nplt.show()","4d39f111":"Combining Song Features with Ranking Data","a602d438":"Loading Data and Checking Column Labels","387a4d70":"Quick visuals of the streams vs position to help understand the distribution above.","77b3f597":"See quick description of data of Spotify's Worldwide Daily Song Ranking dataset","df9c2c29":"Checking on the distribution of the Position to make sure they look like what is expected.","b80c1524":"Combine features with songs for test data.","c9d278db":"**Let us use the dates in 2018 as the test set.\nWe will cut these dates off from the training set and store it\nin dateframe called dftest.**","063cc518":"Here is where we load the data into dataframes:\n* df is Spotify's Worldwide Daily Song Ranking\n    This dataset is used for understanding streams and positions of tracks.\n* df2 is Top Spotify Tracks of 2018\n* df3 is Top Spotify Tracks of 2017\n    The two datasets above are for pairing track names with their qualitative features","658d52af":"**CONTENT of Notebook:**\n\n* Loading of datasets\n* Preprocessing\n* Cleaning Ranking data\n* Combining datasets\n* Statistical Analysis\n* Matlab Analysis: Classification Learner Results with **Conclusion on Most Preferred Features of 2017**\n* ARIMA attempt\n","c4365cf7":"We do this again for the Track feature of 2018","6cfd59dc":"Joint plot of streams and positions with distributions plotted on the secondary axes.","8518a4da":"**We also now know there are 1624 unique track names and Drake's Unforgettable is the most frequency position.**","812f2f19":"**Here we will combine ranking data with song features.\nThis will give us insight on position and streams related to song qualities.\nHowever, be warned that this will drop all track names that are not stored in the features data.\nWe can use this to draw out the list of track names that have reached the top 100 list of 2017.**","2cbc4960":"Checking to NaN values and dropping them from the set.","65c4cb7c":"**From Danceability vs Streams, we see that most hits were very high in their Danceability scale. People like to cut a rug **","6efd9a4f":"**We have 487 unique artists, with Drake being counted the most often.**","0a7318ab":"**Below we can quickly find out the range of the data entries.\nThis data was first collected on the first day of 2017 and ended\non the Jan. 9th 2018**","9d4d5760":"Here is where I export the cleaned data out of python and into Matlab for further analysis. \nResults from **Matlab** posted below.\n![](https:\/\/media.giphy.com\/media\/NvMls3V5aID4c\/giphy.gif)","36882280":"**From Instrumentalness vs Streams, listeners prefer songs with mostly lyrics. **","0531f5d1":"Dropping Url as they are also not needed.","b064cbc3":"![](https:\/\/media.giphy.com\/media\/952bbbsLYuuNW\/giphy.gif)","65245c01":"**Categorical Comparisons of Features relative to Stream and Position.\nPosition is represented by the rainbow color scale seen below.**","dd2e87f5":"**From Duration vs Streams, we see that shorter songs are preferred over longer songs. **","7bf10b78":"**From Track Name vs Streams, we can see that Kendrick Lamar's HUMBLE. had the most streams as well as number 1 positions as well as Ed Sheeran's Shape of You trailing in 2nd in this cleaned data set. **","721e9cd7":"For this time series data, we want the dates to be of the type datetime for ease of modeling and plotting.\n**Scatterplot of Streams vs Time**","b1a3a615":"> Categorical Comparisons of Features relative to Stream and Position.\n\n**In 2017, listeners preferred songs with:**\n* High Danceability\n* Short Durations (length of song)\n* Energy == 0.6 or higher\n* Low Instrumentalness\n* Liveliness == 0.1\n* Loudness around -6\n* Mode == 0\n* Low Speechiness\n* Tempos between 150 and 90\n* Time Signatures == 4\n* Average Valence\n* Low Acoustiness","dcb09e1f":"**From Artist vs Streams, we can see that Kendrick Lamar had the most streams as well as number 1 positions with Ed Sheeran trailing second in this cleaned data set. **","197f60bf":"**Below is an attempt at ARIMA modeling**","15ca3e69":"**From Tempo vs Streams, tempos are spread across 90 to 190 but it appears our top songs are around 150. **","65a3bc1e":"**From Time signature vs Streams, 4 is the hottest choice.**","0e5c8403":"**Visualizations**","fcb0b654":"**From Liveness vs Streams, we see liveliness is hot around 0.1 but the highest value on this plot is a little over 0.2. **","c438ba74":"![](https:\/\/media.giphy.com\/media\/8zT0D36Myf9C0\/giphy.gif)","795fa0f1":"**Matlab Results**","a83fcc3f":"**From Energy vs Streams, we see that higher energy is more preferred than lower energy. **","d298c804":"**In the Top Spotify Tracks of 2017, the track name column is called 'name'.\nWe need to change this to 'track_name', so we can link this data to the Spotify's Worldwide Daily Song Ranking dataset.\nThe 'id' column will be removed as well since it is not need.\nWe will then peek at the header of the information.**","e6f964b5":"**From Speechiness vs Streams, speechiness between 0.1 and 0.01 is highly preferred. **","c8b4854b":"Above we see the column names of the Top Spotify Tracks of 2017 datasets","93f97a29":"**From Acousticness vs Streams, There is a high preference for little to no acousticness. **","2d5fd95d":"**Now our training data has the same track names as our\ntest data and we can model with validation data.\nWe want to model predictions regarding streams and position, respectively to time.**","70d59245":"**From Mode vs Streams, mode 0 is most preferred.**","4dcfe740":"Above we see the column names of the Spotify's Worldwide Daily Song Ranking dataset","5d7b847e":"**Below are quick descriptions of the columns to understand the size of our trimmed dataset**","3ec891eb":"**From Loudness vs Streams, we see loudness is most preferred around -6. **","cad5f7f7":"Below are standard packages to import","77a95e13":"**From Valence vs Streams, there is a spread in the values but around 0.4 seems to have the most expected value. **","89aaa63f":"Correlation Heatmap of song features","a3660013":"**Considering only the US**","189f1741":"![](https:\/\/media.giphy.com\/media\/e53HTalHxfY2s\/giphy.gif)","d3050b3f":"**From Key vs Streams, the keys are well distributed and there is no preference.**","b7bcfaa8":"**We have ~74,000 positions. Since there is a little more than 365 days that the ranking data was collected for the top 200 positions,\nthis makes sense**","59fa3e1f":"Here we take the log of the streams to see that the distrubition is heaviest for the bottom positions.","8fe732ce":"Let us find the track names that are in the test set to try and model.","efafcc7d":"\n\n**Finding Trends in Spotify Music Goals:**\n* Find incremental changes in positions on the charts \n* Model time elapsed changes in position\n* Find features that can model likelihood of being at position 1","a6880bdb":"**Below is an exploration of the song features and their correlation to ranking and streams**"}}