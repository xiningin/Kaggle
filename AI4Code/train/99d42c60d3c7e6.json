{"cell_type":{"a4bd08f0":"code","a5098eb8":"code","47d04656":"code","270271ca":"code","935e17f8":"code","9855b062":"code","6cca0449":"code","14aeeca0":"code","53294803":"code","6a3c08ce":"code","0ec7763b":"code","52a2e00d":"code","562d5e6f":"code","636bed66":"code","f88119c5":"code","d4581d3f":"code","9e6da88f":"code","9dfe1804":"code","61e7e361":"code","4a79c08c":"code","86b7fc44":"code","6c76d7ff":"code","d455df9c":"code","34e6e88e":"markdown","234964b9":"markdown","b2800d52":"markdown","5b3dd252":"markdown","6766e927":"markdown","063b1490":"markdown","3b20d174":"markdown","352cbfc8":"markdown","6ea405a9":"markdown","88888c0e":"markdown","5662dd3f":"markdown","0da6a389":"markdown","45fba633":"markdown","97224d64":"markdown","f736a3eb":"markdown","a113236d":"markdown","e6d060df":"markdown","3bad787f":"markdown","ded3245f":"markdown","ccf4865d":"markdown","3d6c5b8f":"markdown","78744a6f":"markdown","529e19ad":"markdown","043c9331":"markdown","2fccdf39":"markdown","dbedaeac":"markdown","3edcf6ae":"markdown","bf084a92":"markdown","80822bcb":"markdown"},"source":{"a4bd08f0":"# Imports\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\n\nfrom glob import glob\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom matplotlib import pyplot as plt\nimport matplotlib\nimport pydicom\n\nimport sys\nsys.path.insert(0, '..\/input\/siim-acr-pneumothorax-segmentation')\nfrom mask_functions import rle2mask # import mask utilities","a5098eb8":"# Load full training and test sets\ntrain_fns = sorted(glob('..\/input\/siim-train-test\/siim\/dicom-images-train\/*\/*\/*.dcm'))\ntest_fns = sorted(glob('..\/input\/siim-train-test\/siim\/dicom-images-test\/*\/*\/*.dcm'))\n\nprint('The training set contains {} files.'.format(len(train_fns)))\nprint('The test set contains {} files.'.format(len(test_fns)))","47d04656":"# load masks for training images\ntrain_rle = pd.read_csv('..\/input\/siim-train-test\/siim\/train-rle.csv')\ntrain_rle.head()","270271ca":"# visualize pie chart\nlabels = 'Train', 'Test'\nsizes = [len(train_fns), len(test_fns)]\nexplode = (0, 0.1)  # \"explode\" the 2nd slice\n\nfig, ax = plt.subplots(figsize=(7,7))\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title(\"Number of images in train\/test sets\")\nplt.show()","935e17f8":"without_neumothorax = train_rle[train_rle[' EncodedPixels'] == ' -1'][' EncodedPixels'].count() # note that the name of the column starts with a space 0_o\nwith_neumothorax = train_rle[train_rle[' EncodedPixels'] != ' -1'][' EncodedPixels'].count()\n\nprint('There are {} samples with pneumothorax in training set.'.format(with_neumothorax))\nprint('There are {} samples without pneumothorax in training set.'.format(without_neumothorax))","9855b062":"# visualize pie chart\nlabels = 'No pneumothorax', 'Pneumothorax'\nsizes = [without_neumothorax, with_neumothorax]\nexplode = (0, 0.1)  # \"explode\" the 2nd slice\n\nfig, ax = plt.subplots(figsize=(7,7))\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title(\"Pneumothorax\/No Pneumothorax examples\")\nplt.show()","6cca0449":"missing_data = len(train_rle) - len(train_fns)\nprint('There are {} missing samples.'.format(missing_data))","14aeeca0":"def get_metadata(file_path):\n    '''\n    Function get the metadata from file.\n    INPUT:\n        file_path - path to the file containing the image\n    OUTPUT:\n        age - patient's age\n        sex - patient's sex\n        modality - represents file type (CR = Computed Radiography) (see https:\/\/www.dicomlibrary.com\/dicom\/modality\/)\n        body_part - part of the body on image\n        view_position - PA or AP (PA - view from posterior, AP - the opposite view,\n            see https:\/\/www.quora.com\/What-is-the-difference-between-an-AP-and-a-PA-view-of-an-X-ray)\n    '''\n    \n    dataset = pydicom.dcmread(file_path)\n    \n    age = dataset.PatientAge\n    sex = dataset.PatientSex\n    modality = dataset.Modality\n    body_part = dataset.BodyPartExamined\n    view_position = dataset.ViewPosition\n\n    return age, sex, modality, body_part, view_position","53294803":"# copy dataframe\ntrain_rle_meta = train_rle.copy()\n\n# create new columns\ntrain_rle_meta['age'] = np.nan\ntrain_rle_meta['sex'] = np.nan\ntrain_rle_meta['modality'] = np.nan\ntrain_rle_meta['body_part'] = np.nan\ntrain_rle_meta['view_position'] = np.nan\n\n# fill columns\nfor fn in train_fns:\n    try:\n        age, sex, modality, body_part, view_position = get_metadata(fn)\n        image_id = fn.split('\/')[-1][:-4]\n\n        # get index\n        ind = train_rle_meta[train_rle_meta.ImageId == image_id]['age'].index[0]\n\n        # set metadata values by index\n        train_rle_meta.iloc[ind, train_rle_meta.columns.get_loc('age')] = age\n        train_rle_meta.iloc[ind, train_rle_meta.columns.get_loc('sex')] = sex\n        train_rle_meta.iloc[ind, train_rle_meta.columns.get_loc('modality')] = modality\n        train_rle_meta.iloc[ind, train_rle_meta.columns.get_loc('body_part')] = body_part\n        train_rle_meta.iloc[ind, train_rle_meta.columns.get_loc('view_position')] = view_position\n    except:\n        print('Index for {} not found.'.format(fn))","6a3c08ce":"# create new columns\ntrain_rle_meta['timestamp'] = ''\ntrain_rle_meta['year'] = np.nan\ntrain_rle_meta['month'] = np.nan\ntrain_rle_meta['day'] = np.nan\n\n# iterate through dataframe\nfor index, row in train_rle_meta.iterrows():\n    image_id = row.ImageId\n    \n    # get unix timestamp string from image id\n    unix_ts = int(image_id.split('.')[-2])\n    \n    # get timestamp\n    ts = datetime.fromtimestamp(unix_ts)\n    \n    # add timestamp to dataframe\n    train_rle_meta.iloc[index, train_rle_meta.columns.get_loc('timestamp')] = ts.strftime('%Y-%m-%d %H:%M:%S')\n    train_rle_meta.iloc[index, train_rle_meta.columns.get_loc('year')] = ts.year\n    train_rle_meta.iloc[index, train_rle_meta.columns.get_loc('month')] = ts.month\n    train_rle_meta.iloc[index, train_rle_meta.columns.get_loc('day')] = ts.day","0ec7763b":"train_rle_meta.head()","52a2e00d":"# save csv for later\ntrain_rle_meta.to_csv('train_data_meta.csv')","562d5e6f":"# remove nan\ntrain_rle_meta_cleaned = train_rle_meta.dropna()","636bed66":"# convert age to numeric\ntrain_rle_meta_cleaned[\"age\"] = pd.to_numeric(train_rle_meta_cleaned[\"age\"])","f88119c5":"train_rle_meta_cleaned[train_rle_meta_cleaned['age'] > 100]","d4581d3f":"fig, axs = plt.subplots(1, 3, figsize=(20,7), sharey=True,)\n\naxs[0].hist(train_rle_meta_cleaned[train_rle_meta_cleaned['age'] < 100]['age'].values, bins=20)\naxs[0].set_title('Age')\n\naxs[1].hist(train_rle_meta_cleaned[(train_rle_meta_cleaned['age'] < 100) & (train_rle_meta_cleaned[' EncodedPixels'] == ' -1')]['age'].values, bins=20)\naxs[1].set_title('Age without Pneumothorax')\n\naxs[2].hist(train_rle_meta_cleaned[(train_rle_meta_cleaned['age'] < 100) & (train_rle_meta_cleaned[' EncodedPixels'] != ' -1')]['age'].values, bins=20)\naxs[2].set_title('Age with Pneumothorax')","9e6da88f":"columns = ['sex', 'modality', 'body_part', 'view_position']\n\nfig, axs = plt.subplots(1, 4, figsize=(20,5))\n\nfor i in range(4):\n    column = columns[i]\n    \n    x_pos = np.arange(0, len(train_rle_meta_cleaned[column].unique()))\n    \n    axs[i].bar(x_pos, train_rle_meta_cleaned[column].value_counts().values, align='center')\n    \n    tick_labels = []\n    for label in train_rle_meta_cleaned[column].value_counts().index.values.tolist():\n        tick_labels.append(label)\n        \n    axs[i].set_xticks(range(len(tick_labels)))\n    axs[i].set_xticklabels(tick_labels)\n\n    axs[i].set_title(column)","9dfe1804":"train_rle_meta.hist(column = 'year')","61e7e361":"train_rle_meta.hist(column = 'month')","4a79c08c":"train_rle_meta.hist(column = 'day')","86b7fc44":"# Plot 9 random images from training dataset\nfig, axs = plt.subplots(3, 3, figsize=(10,10))\n    \nfor im in range(9):\n    i = im \/\/ 3\n    j = im % 3\n\n    # choose random images from train set\n    fn = np.random.choice(train_fns)\n    img = pydicom.read_file(fn).pixel_array\n\n    #plot the data\n    axs[i,j].imshow(img, cmap='bone')\n    axs[i,j].axis('off')\n        \n# set suptitle\nplt.suptitle('Pneumothorax images samples (training)')\nplt.show()","6c76d7ff":"# visualize random images without Pneumothorax\n# plot 9 random images from training dataset\nfig, axs = plt.subplots(3, 3, figsize=(10,14))\nim = 0\n\nwhile im < 9:\n    i = im \/\/ 3\n    j = im % 3\n\n    # get random images from training set\n    fn = np.random.choice(train_fns)\n    img = pydicom.read_file(fn).pixel_array\n    \n    # get id of the image\n    image_id = fn.split('\/')[-1][:-4]\n    \n    # find mask\n    # if mask = -1 (no Pneumothorax) then display image and increase counter\n    # otherwise look for another image\n    mask = train_rle[train_rle.ImageId == image_id].iloc[0].values[1]\n    if mask == ' -1':\n        im += 1\n        meta = get_metadata(fn)\n        axs[i,j].imshow(img, cmap='bone') #plot the data\n        axs[i,j].axis('off')\n        axs[i,j].set_title('Age: {age}\\n Sex: {sex}\\n Modality: {modality}\\n Body part: {body_part}\\n View position:{view} '.format(age = meta[0],\n                                                                                                                                   sex = meta[1],\n                                                                                                                                   modality = meta[2],\n                                                                                                                                   body_part = meta[3],\n                                                                                                                                   view = meta[4]))\n        \n# set suptitle\nplt.suptitle('Images without pneumothorax')\nplt.show()","d455df9c":"#visualize images with pneumothorax and masks\n\n# plot 9 random images from training dataset\nfig, axs = plt.subplots(3, 2, figsize=(10,20))\nim = 0\n\nwhile im < 3:\n    i = im\n\n    # get random images from training set\n    fn = np.random.choice(train_fns)\n    img = pydicom.read_file(fn).pixel_array\n    \n    # get id of the image\n    image_id = fn.split('\/')[-1][:-4]\n    \n    # find mask\n    # if mask is not -1 (no Pneumothorax) then display image and increase counter\n    # otherwise look for another image\n    mask = train_rle[train_rle.ImageId == image_id].iloc[0].values[1]\n    if mask != ' -1':\n        im += 1\n        \n        #plot the original data\n        axs[i,0].imshow(img, cmap='bone') \n        axs[i,0].axis('off')\n        meta = get_metadata(fn)\n        # add metadata\n        axs[i,0].set_title('Without mask\\n Age: {age}\\n Sex: {sex}\\n Modality: {modality}\\n Body part: {body_part}\\n View position:{view} '.format(age = meta[0],\n                                                                                                                                   sex = meta[1],\n                                                                                                                                   modality = meta[2],\n                                                                                                                                   body_part = meta[3],\n                                                                                                                                   view = meta[4]))\n        \n        #plot data and add the mask\n        axs[i,1].imshow(img, cmap='bone')\n        axs[i,1].axis('off')  \n        rle_mask = rle2mask(mask, 1024, 1024).T\n        axs[i,1].imshow(rle_mask, alpha=0.3, cmap=\"Reds\")    \n        axs[i,1].set_title('With mask')\n        \n# set suptitle\nplt.suptitle('Images with pneumothorax')\nplt.show()","34e6e88e":"From the plots above we see that all images are marked with 2018-02-05 or 2018-02-06. So datetimes from filenames are not informative at all.","234964b9":"It seems that there are __more rows in the table, than provided images__. Let's find out how many images are lost for the training set:","b2800d52":"It seems that we have some outliers for age values. Let's look at rows, where age is greater than 100:","5b3dd252":"Plot histogram for age column:","6766e927":"Surprisingly, there are very old people in the dataset. I will consider these as outliers.","063b1490":"There is a [tutorial](https:\/\/www.radiologymasterclass.co.uk\/gallery\/chest\/pneumothorax\/pneumothorax_j#top_1st_img) on how to distinguish pneumothorax on x-ray images. It may help to analyze pneumothorax images.","3b20d174":"Explore the number of examples in train and test sets:","352cbfc8":"It seems that we can __easily distinguish male from female adults__ looking on these images.","6ea405a9":"That's why I will plot histograms for age values less than 100:","88888c0e":"Unfortunately, there is only a sample of competition data on Kaggle, but many thanks to [See__](https:\/\/www.kaggle.com\/seesee), who created [full dataset](https:\/\/www.kaggle.com\/seesee\/siim-train-test) on Kaggle. I used this dataset and some code from [his kernel](https:\/\/www.kaggle.com\/seesee\/full-dataset).\n\nLoad the dataset:","5662dd3f":"It [was also discovered](https:\/\/www.kaggle.com\/c\/siim-acr-pneumothorax-segmentation\/discussion\/97119#latest-562337) that filenames of the images contain timestamps. Let's add them to the table and try to analyze:","0da6a389":"# Pneumothorax EDA to Get Started with the Competition","45fba633":"Plot bar charts for other columns:","97224d64":"## Analyze Metadata","f736a3eb":"Now it is time to visualize images, which contain Pneumothorax. I will plot both the original image and the image with mask right next to it. I will also add metadata to the plot.","a113236d":"It seems that it is __very hard to find the Pneumothorax__ on the image for an untrained person like me. Raw images certainly require soma data augmentation to make it possible to see Pneumothorax.","e6d060df":"Explore the number of examples with Pneumothorax in train set:","3bad787f":"Add metadata to the dataframe:","ded3245f":"## Plot Sample Images","ccf4865d":"## Credits\n1. [Full dataset](https:\/\/www.kaggle.com\/seesee\/siim-train-test) and sample code from [his kernel](https:\/\/www.kaggle.com\/seesee\/full-dataset) by [See__](https:\/\/www.kaggle.com\/seesee).\n2. Thanks to [Intro - chest xray, DICOM, viz, U-nets - full data](https:\/\/www.kaggle.com\/jesperdramsch\/intro-chest-xray-dicom-viz-u-nets-full-data) kernel for showing how to read the data and masks.","3d6c5b8f":"Modality and body part features are not informative. This is quite obvious, that we have all the images of the same type.","78744a6f":"## Load Data","529e19ad":"Visualize statistics for metadata:","043c9331":"Many thanks to [this kernel](https:\/\/www.kaggle.com\/jesperdramsch\/intro-chest-xray-dicom-viz-u-nets-full-data) for showing how to work with the images.\n\nAt first let's plot some random images at first:","2fccdf39":"We see that __the training set is imbalanced__: the majority of images don't have any Pneumothorax on them.","dbedaeac":"Let's take a look at dates extracted from filenames:","3edcf6ae":"Let's visualize some images of patients without Pneumothorax and related metadata:","bf084a92":"We are also provided with some metadata for each image.\n\nThe following function will help us to explore this metadata:","80822bcb":"It seems that Pneumothorax doesn't really depend on one's age."}}