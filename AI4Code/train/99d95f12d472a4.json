{"cell_type":{"69eb2654":"code","e3e52164":"code","0921b665":"code","37f3e4d0":"code","7d15eb0e":"code","dfa06a2d":"code","2648f316":"code","e109a469":"code","55be5750":"code","09eae28c":"code","1d857faf":"code","87c5fcf0":"code","eee93d98":"code","e3649fed":"code","43d8219e":"code","75d65e3e":"code","c9a1c3c2":"code","9ff8d8c8":"markdown"},"source":{"69eb2654":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3e52164":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom operator import attrgetter\nimport matplotlib.colors as mcolors","0921b665":"df = pd.read_csv('..\/input\/online-retail-ii-uci\/online_retail_II.csv',dtype={'CustomerID':str,\n                                                                             'InvoiceID':str},\n                parse_dates=['InvoiceDate'],\n                infer_datetime_format=True)\ndf.head()","37f3e4d0":"df.info()","7d15eb0e":"df.describe()","dfa06a2d":"df.isnull().sum()","2648f316":"df.rename(columns={'Customer ID':'CustomerID'},inplace=True)","e109a469":"df.shape","55be5750":"df.dropna(subset=['CustomerID'],inplace=True)","09eae28c":"# Benzersiz Sipari\u015f Say\u0131s\u0131\nn_orders = df.groupby(['CustomerID'])['Invoice'].nunique()\n# Birden fazla verilen sipari\u015f say\u0131s\u0131n\u0131n M\u00fc\u015fteri Say\u0131s\u0131na B\u00f6l\u00fcm\u00fc\nmult_orders_perc = np.sum(n_orders > 1) \/ df['CustomerID'].nunique()\nprint(f\"M\u00fc\u015fterilerin %{100 * mult_orders_perc:.2f}'i birden fazla sipari\u015f vermi\u015ftir.\")","1d857faf":"ax = sns.displot(data=df,x=n_orders,kde=True,kind='hist')\nax.set(title='Distribution of number of orders per customer',\n       xlabel = '# or orders',\n       ylabel = '# of customers');","87c5fcf0":"df = df[['CustomerID', 'Invoice', 'InvoiceDate']].drop_duplicates()","eee93d98":"df['order_month'] = df['InvoiceDate'].dt.to_period('M')\ndf['cohort'] = df.groupby('CustomerID')['InvoiceDate'] \\\n                 .transform('min') \\\n                 .dt.to_period('M') ","e3649fed":"df_cohort = df.groupby(['cohort', 'order_month']) \\\n              .agg(n_customers=('CustomerID', 'nunique')) \\\n              .reset_index(drop=False)\ndf_cohort['period_number'] = (df_cohort.order_month - df_cohort.cohort).apply(attrgetter('n'))","43d8219e":"cohort_pivot = df_cohort.pivot_table(index = 'cohort',\n                                     columns = 'period_number',\n                                     values = 'n_customers')","75d65e3e":"cohort_size = cohort_pivot.iloc[:,0]\nretention_matrix = cohort_pivot.divide(cohort_size, axis = 0)","c9a1c3c2":"with sns.axes_style(\"white\"):\n    fig, ax = plt.subplots(1, 2, figsize=(12, 8), sharey=True, gridspec_kw={'width_ratios': [1, 11]})\n    \n    # retention matrix\n    sns.heatmap(retention_matrix, \n                mask=retention_matrix.isnull(), \n                annot=True, \n                fmt='.0%', \n                cmap='RdYlGn', \n                ax=ax[1])\n    ax[1].set_title('Monthly Cohorts: User Retention', fontsize=16)\n    ax[1].set(xlabel='# of periods',\n              ylabel='')\n\n    # cohort size\n    cohort_size_df = pd.DataFrame(cohort_size).rename(columns={0: 'cohort_size'})\n    white_cmap = mcolors.ListedColormap(['white'])\n    sns.heatmap(cohort_size_df, \n                annot=True, \n                cbar=False, \n                fmt='g', \n                cmap=white_cmap, \n                ax=ax[0])\n\n    fig.tight_layout()","9ff8d8c8":"## Cohort Analysis"}}