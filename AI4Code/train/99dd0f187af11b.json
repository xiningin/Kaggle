{"cell_type":{"c6b0ac78":"code","1f6eaae5":"code","374d0f9b":"code","86717045":"code","08b046c8":"code","8b1ac52c":"code","85fe1211":"code","917bdd4b":"code","73a9e130":"code","88f16312":"code","4efb64a8":"code","c8e07226":"code","df7025bc":"code","abad2fa1":"code","31fc3cf6":"code","0d8f9e0b":"code","919ae355":"code","398c675b":"code","4b2d5230":"code","7bfc66f1":"code","18bef652":"code","4e6f808d":"code","a772dcbc":"code","81c4a52f":"code","8ada8363":"code","332857b9":"code","405ddcda":"code","a33b7a08":"code","779cfb40":"markdown","941107df":"markdown","941af9f3":"markdown","d11926ab":"markdown","e93be4f0":"markdown","940913db":"markdown","96518311":"markdown"},"source":{"c6b0ac78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f6eaae5":"# Necessary imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom matplotlib import rcParams\n%matplotlib inline","374d0f9b":"# Read Train\/Test  Data\ntrain=pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/train.csv\")\ntest=pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/test.csv\")","86717045":"train.head()","08b046c8":"#Check data shape\nprint('There are {} rows in the training data and {} varaible columns on training data '.format\n      (train.shape[0],train.shape[1]))\n\n# check how many unique customer id's are there\nprint('There are also {} unique customers. That is there are no duplication info on customer'.format(len(train['id'].unique())))","8b1ac52c":"print(train.columns)","85fe1211":"# 1. Check data types\nprint(train.dtypes)","917bdd4b":"\n# 2. Let's check are there any missing values across each variable\nprint(train.isnull().sum())","73a9e130":"# 3.Univarte Analysis\n\n# 3.1 Distribution of Response\nprint(train.Response.unique())\n","88f16312":"# Returns the sum of all not-null values in `Response` column\nn_response = train['Response'].value_counts().sum()\nprint('There are {} responses'.format(n_response))\n\n\n# Count the frequency of unique values in the `Response` column of train dataframe. \n# By default, returns the decreasing order of the frequency.\nresponse_counts = train['Response'].value_counts()\nprint(response_counts)\n","4efb64a8":"### Ploting Functions\n\ndef single_categorical_prop_plot(data,variable,order_=True,lable_rotation=0):\n    # Specify the figure size in inches, for both X, and Y axes\n    rcParams['figure.figsize'] = 5,4\n    # Considering the same chart from the Example 1 above, print the text (proportion) BELOW the bars\n    base_color = sb.color_palette()[1]\n    \n    type_counts = data[variable].value_counts()\n    \n    # Returns the sum of all not-null values in `Response` column\n    n_response = data[variable].value_counts().sum()\n    \n    \n    if order_:\n        type_order = type_counts.index\n        sb.countplot(data=data, x=variable, color=base_color, order=type_order)\n    else:\n        sb.countplot(data=data, x=variable, color=base_color)\n    \n    \n    \n    # get the current tick locations and labels\n    locs, labels = plt.xticks(rotation=lable_rotation) \n\n    # loop through each pair of locations and labels\n    for loc, label in zip(locs, labels):\n        #print(loc)\n        #print(label)\n        # get the text property for the label to get the correct count\n        if isinstance(type_counts.index.values[0],str):\n            count = type_counts[(label.get_text())]\n        else:\n            count = type_counts[float(label.get_text())]\n        pct_string = '{:0.1f}%'.format(100*count\/n_response)\n\n        # print the annotation just below the top of the bar\n        plt.text( loc,count,pct_string, ha = 'center', color = 'black')\n    \n        \n    plt.xlabel('{} '.format(variable))  \n    plt.title('{} distribution plot'.format(variable))","c8e07226":"# Let's check response variable distribution\n\nsingle_categorical_prop_plot(data=train,variable='Response')\ntotal_string='Total_Responses:{}'.format(train.shape[0])\nplt.text(1,300000,total_string,ha = 'center', color = 'black')\n","df7025bc":"# Resize the chart, and have two plots side-by-side\n# set a larger figure size for subplots\nplt.figure(figsize = [11, 5]) \n# histogram on left, example of too-large bin size\n# 1 row, 2 cols, subplot 1\nplt.subplot(1, 2, 1) \nsingle_categorical_prop_plot(data=train,variable='Gender')\nplt.title('Train Gender Distribution')\n\n# histogram on right, example of too-small bin size\nplt.subplot(1, 2, 2) # 1 row, 2 cols, subplot 2\nsingle_categorical_prop_plot(data=test,variable='Gender')\nplt.title('Test Gender Distribution')","abad2fa1":"#Lets examine distribution of driving license possesion \n# Resize the chart, and have two plots side-by-side\n# set a larger figure size for subplots\nplt.figure(figsize = [11, 5]) \n# histogram on left, example of too-large bin size\n# 1 row, 2 cols, subplot 1\nplt.subplot(1, 2, 1) \nsingle_categorical_prop_plot(data=train,variable='Driving_License',order_=True)\nplt.title('Train Driving_License Distribution')\n\n# histogram on right, example of too-small bin size\nplt.subplot(1, 2, 2) # 1 row, 2 cols, subplot 2\nsingle_categorical_prop_plot(data=test,variable='Driving_License',order_=True)\nplt.title('Test Driving_License Distribution')","31fc3cf6":"#Lets examine distribution of driving license possesion \n# Resize the chart, and have two plots side-by-side\n# set a larger figure size for subplots\nplt.figure(figsize = [11, 5]) \n# histogram on left, example of too-large bin size\n# 1 row, 2 cols, subplot 1\nplt.subplot(1, 2, 1) \nsingle_categorical_prop_plot(data=train,variable='Vehicle_Age',order_=True)\nplt.title('Train Vehicle_Age Distribution')\n\n# histogram on right, example of too-small bin size\nplt.subplot(1, 2, 2) # 1 row, 2 cols, subplot 2\nsingle_categorical_prop_plot(data=test,variable='Vehicle_Age',order_=True)\nplt.title('Test Vehicle_Age Distribution')","0d8f9e0b":"#Lets examine distribution of driving license possesion \n# Resize the chart, and have two plots side-by-side\n# set a larger figure size for subplots\nplt.figure(figsize = [30, 10]) \n# histogram on left, example of too-large bin size\n# 1 row, 2 cols, subplot 1\nplt.subplot(2, 1, 1) \nsingle_categorical_prop_plot(data=train,variable='Region_Code',order_=True)\nplt.title('Train Region_Code Distribution')\n\n# histogram on right, example of too-small bin size\nplt.subplot(2, 1, 2) # 1 row, 2 cols, subplot 2\nsingle_categorical_prop_plot(data=test,variable='Region_Code',order_=True)\nplt.title('Test Region_Code Distribution')","919ae355":"#Lets examine distribution of driving license possesion \n# Resize the chart, and have two plots side-by-side\n# set a larger figure size for subplots\nplt.figure(figsize = [11, 5]) \n# histogram on left, example of too-large bin size\n# 1 row, 2 cols, subplot 1\nplt.subplot(1, 2, 1) \nsingle_categorical_prop_plot(data=train,variable='Previously_Insured',order_=True)\nplt.title('Train Previously_Insured Distribution')\n\n# histogram on right, example of too-small bin size\nplt.subplot(1, 2, 2) # 1 row, 2 cols, subplot 2\nsingle_categorical_prop_plot(data=test,variable='Previously_Insured',order_=True)\nplt.title('Test Previously_Insured Distribution')","398c675b":"#Lets examine distribution of driving license possesion \n# Resize the chart, and have two plots side-by-side\n# set a larger figure size for subplots\nplt.figure(figsize = [11, 5]) \n# histogram on left, example of too-large bin size\n# 1 row, 2 cols, subplot 1\nplt.subplot(1, 2, 1) \nsingle_categorical_prop_plot(data=train,variable='Vehicle_Damage',order_=True)\nplt.title('Train Vehicle_Damage Distribution')\n\n# histogram on right, example of too-small bin size\nplt.subplot(1, 2, 2) # 1 row, 2 cols, subplot 2\nsingle_categorical_prop_plot(data=test,variable='Vehicle_Damage',order_=True)\nplt.title('Test Vehicle_Damage Distribution')","4b2d5230":"#Lets examine distribution of Policy_Sales_Channel \n# Resize the chart, and have two plots side-by-side\n# set a larger figure size for subplots\nplt.figure(figsize = [100, 10]) \n# histogram on left, example of too-large bin size\n# 1 row, 2 cols, subplot 1\nplt.subplot(2, 1, 1) \nsingle_categorical_prop_plot(data=train,variable='Policy_Sales_Channel',order_=True)\nplt.title('Train Policy_Sales_Channel Distribution')\n\n# histogram on right, example of too-small bin size\nplt.subplot(2, 1, 2) # 1 row, 2 cols, subplot 2\nsingle_categorical_prop_plot(data=test,variable='Policy_Sales_Channel',order_=True)\nplt.title('Test Policy_Sales_Channel Distribution')","7bfc66f1":"train.head()","18bef652":"# Resize the chart, and have two plots side-by-side\n# Set a larger figure size for subplots\nplt.figure(figsize = [15, 5]) \nsb.distplot(train['Age'])\nplt.title('Distirbution Plot')","4e6f808d":"train.Age.describe()","a772dcbc":"\n\n\n#Define the figure size\nplt.figure(figsize = [20, 5])\n\n# histogram on left: full data\nplt.subplot(1, 2, 1)\n#bin_edges = np.arange(0, train['Annual_Premium'].max()+,)\nsb.distplot(train['Annual_Premium'])\nplt.title('Distirbution Plot')\n\n# histogram on right: focus in on bulk of data < 6\nplt.subplot(1, 2, 2)\nbin_edges = np.arange(0, train['Annual_Premium'].max()+5000, 5000)\nsb.distplot(train['Annual_Premium'], bins = bin_edges)\nplt.xlim(0, 100000) # could also be called as plt.xlim((0, 6))\nplt.title('Distirbution Plot')","81c4a52f":"train.Annual_Premium.describe()","8ada8363":"# Resize the chart, and have two plots side-by-side\n# Set a larger figure size for subplots\nplt.figure(figsize = [15, 5]) \nsb.distplot(train['Vintage'])\nplt.title('Distirbution Plot')","332857b9":"train.Vintage.describe()","405ddcda":"train.head()","a33b7a08":"#Violin Plot\n#categorical vs Numrical graph\nplt.figure(figsize=[20,5])\nbase_color = sb.color_palette()[1]\n\n\n# The \"inner\" argument represents the datapoints in the violin interior. \n# It can take any value from {\u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None}\n# If \"box\", it draws a miniature boxplot. \nplt.subplot(1, 2, 1)\nsb.violinplot(data=train, x='Response', y='Age', color=base_color, innner='quartile')\nplt.title('Violin Plot')\n\n\nplt.subplot(1, 2, 2)\nsb.boxplot(data=train, y='Age', x='Response', color=base_color)\nplt.title('Box Plot')","779cfb40":"# Bivariate Exploration","941107df":"Most of the of customers are from 28,8,46 region code.","941af9f3":"From the above plot it seems that our response rate is imbalanced.So we need to take care while building model","d11926ab":" # Data Understanding","e93be4f0":"# Exploratory Analysis of data\n### Lets get feel of each variable","940913db":"Clearly it shows distribution of Gender in both train and test dataset is same.Also Male distribtion in the dataset is slightly higher than Female Distribution","96518311":"#### There aren't any  missing values in  variable columns"}}