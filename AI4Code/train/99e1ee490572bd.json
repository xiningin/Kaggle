{"cell_type":{"c622f785":"code","b749ee1d":"code","290b1739":"code","a8e54854":"code","db3b0916":"code","79f3ff50":"code","fa39fc76":"code","9d51bde1":"code","cdb630c7":"code","803f7dfd":"code","98b37ec4":"code","5b2aed96":"code","93f92292":"code","71bf497d":"code","70c82066":"code","5b93b1ea":"code","85c62391":"code","9cd2b524":"markdown","bded13cf":"markdown","b02eccdc":"markdown","8b9280cd":"markdown","71cdc241":"markdown","c674f203":"markdown"},"source":{"c622f785":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b749ee1d":"import tensorflow as tf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","290b1739":"data = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')","a8e54854":"data.head()","db3b0916":"# Sample some pictures\n\ndata['pixels']=data['pixels'].apply(lambda x:  np.array(x.split(), dtype=\"float32\"))\n\nplt.figure(figsize=(16,16))\nfor i in range(2500,2510):\n    plt.subplot(5,5,(i%25)+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(data['pixels'].iloc[i].reshape(48,48))\n    plt.xlabel(\n        \"Age:\"+str(data['age'].iloc[i])+\n        \"  Ethnicity:\"+str(data['ethnicity'].iloc[i])+\n        \"  Gender:\"+ str(data['gender'].iloc[i])\n    )\nplt.show()","79f3ff50":"# Reshape the pictures' pixels\ndata = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')\n\nX = data.drop(['age', 'ethnicity', 'age'], axis=1)\nX = pd.Series(X['pixels'])\nX = X.apply(lambda x: x.split(' '))\nX = X.apply(lambda x: np.array(list(map(lambda z: np.int(z), x))))\nX = np.array(X)\nX = np.stack(np.array(X), axis=0)\npictures = np.reshape(X, (-1, 48, 48,1))","fa39fc76":"# Get the different labels\n\ny_ethnicity = np.array(data['ethnicity'])\ny_gender = np.array(data['gender'])","9d51bde1":"# Split the data into a training, validation, and testing sets for each tasks\n\nrandom_seed = 2\nx_gender_train, x_gender_tv, y_gender_train, y_gender_tv = train_test_split(pictures, y_gender, test_size=0.3, \n                                                                              random_state=random_seed)\n\nx_gender_val, x_gender_test, y_gender_val, y_gender_test = train_test_split(x_gender_tv, y_gender_tv, test_size=0.5, \n                                                                              random_state=random_seed)\n\nx_ethnicity_train, x_ethnicity_tv, y_ethnicity_train, y_ethnicity_tv = train_test_split(\n    pictures, y_ethnicity, test_size=0.1, random_state=random_seed)\n\nx_ethnicity_val, x_ethnicity_test, y_ethnicity_val, y_ethnicity_test = train_test_split(\n    x_ethnicity_tv, y_ethnicity_tv, test_size=0.1, random_state=random_seed)\n\n\n# Data Augmentation\ndatagen = ImageDataGenerator(rescale=1\/255,\n                             rotation_range=20,\n                             brightness_range=[0.8,1.2],\n                             zoom_range=0.2,\n                             shear_range = 0.2,\n                             width_shift_range=0.2,\n                             height_shift_range=0.2,\n                             horizontal_flip=True)\ndatagen.fit(x_gender_train)\ndatagen.fit(x_ethnicity_train)","cdb630c7":"# Build the model\n\ngender_model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(48,48,1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(1, activation='sigmoid'),\n])\n\ngender_model.compile(optimizer='rmsprop', \n              loss='binary_crossentropy', \n              metrics=['accuracy'])\n\ngender_model.summary()","803f7dfd":"gender_history = gender_model.fit(datagen.flow(x_gender_train, y_gender_train, batch_size=64),\n                   validation_data=(x_gender_val, y_gender_val),\n                   epochs=15,\n                   verbose=2,\n                   steps_per_epoch=len(x_gender_train)\/64)","98b37ec4":"# Plot the performance history of the model \n\nacc = gender_history.history['accuracy']\nval_acc = gender_history.history['val_accuracy']\nloss = gender_history.history['loss']\nval_loss = gender_history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\n\nplt.show()","5b2aed96":"# Evaluate the model on the test set\n\ngender_model.evaluate(x_gender_test, y_gender_test)","93f92292":"# First let's find how many ethnicities labels there are \n\ndata['ethnicity'].unique()","71bf497d":"# Build the model for ethnicity\n\nethnicity_model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(48,48,1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(5, activation='softmax'),\n])\n\nethnicity_model.compile(optimizer='rmsprop', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])\n\nethnicity_model.summary()","70c82066":"ethnicity_history = ethnicity_model.fit(datagen.flow(x_ethnicity_train, y_ethnicity_train, batch_size=64),\n                   validation_data=(x_ethnicity_val, y_ethnicity_val),\n                   epochs=15,\n                   verbose=2,\n                   steps_per_epoch=len(x_ethnicity_train)\/64)","5b93b1ea":"# Plot the performance history of the model \n\nacc = ethnicity_history.history['accuracy']\nval_acc = ethnicity_history.history['val_accuracy']\nloss = ethnicity_history.history['loss']\nval_loss = ethnicity_history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\n\nplt.show()","85c62391":"# Evaluate the model on the test set\n\nethnicity_model.evaluate(x_ethnicity_test, y_ethnicity_test)","9cd2b524":"We have a 86.28% accuracy on the testing with this relatively simple CNN that uses data augmentation","bded13cf":"credit to Gabriel Atkin and Shahraiz for some preprocessing code","b02eccdc":"# MODEL FOR PREDICTING ETHNICITY","8b9280cd":"# DATA PREPROCESSING","71cdc241":"We have an accuracy of 63.87% on the testing set for predicting ethnicity. This is much lower than when I trained it but it happens, and it's only a basic CNN so it makes sense that the performance is not great.","c674f203":"# MODEL FOR PREDICTING GENDER"}}