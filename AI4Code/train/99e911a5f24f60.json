{"cell_type":{"3a0aae92":"code","7c73a2fe":"code","055c04a4":"code","f75a3450":"code","5b8b260f":"code","c91c7fc4":"code","6794c265":"code","83e69832":"code","6eaefb17":"code","706d26f5":"markdown","1883efb4":"markdown","c18b9ae7":"markdown","1232b164":"markdown","e2bcb528":"markdown","0dd61042":"markdown","2aaac2f5":"markdown"},"source":{"3a0aae92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as datetime\n# For rendering animations in notebook:\nfrom IPython.display import HTML\nimport io\nimport base64\n# For me\nimport time\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7c73a2fe":"# Look at all of the columns that exist in dataset\ndf = pd.read_csv('..\/input\/CLIWOC15.csv')\nfor clm in df.columns:\n    print(clm)","055c04a4":"import matplotlib.pyplot as plt\nfrom matplotlib import animation\nfrom mpl_toolkits.basemap import Basemap  \n\nfig = plt.figure(figsize=(20,10))\n\n# Setup Base Map\nm = Basemap(projection='robin',lon_0=180,resolution='c', llcrnrlon=120, urcrnrlon=-30)\nm.drawcoastlines()\nm.drawcountries()\nm.drawmeridians(np.arange(0,360,30))\nm.drawparallels(np.arange(-90,90,30))\nm.fillcontinents(color='grey')\n\n# Lets try trace one ships journey across the globe\nship_name = df['ShipName'].unique()[342]\nprint('Ship name = ', ship_name)\n\n# Make a dataframe for a specific ship\ndf_ship = df[df['ShipName'] == ship_name]\ndf_ship = df_ship.reset_index()\n\n# Have a sneaky look at where it travelled to and from\ndeparture_port = df_ship['VoyageFrom'].unique()\narrival_port = df_ship['VoyageTo'].unique()\n\nprint('Journey: ', departure_port , '-', arrival_port)\n\n# Function to create a numpy array given a dataframe and dataframe index (column)\ndef get_numpy_array(df, string):\n    output = df[string]\n    output = output[~np.isnan(output)]\n    return output\n\n# Get array values for those with one axis\nyear = get_numpy_array(df_ship, 'Year')\nmonth = get_numpy_array(df_ship, 'Month')\nday = get_numpy_array(df_ship, 'Day')\n\n# Create an matrix with x, y coordinates \nlat = df_ship['Lat3']\nlon = df_ship['Lon3']\ncoord = np.column_stack((list(lon),list(lat)))\n# Remove nan values\ncoord = coord[~np.isnan(coord).any(axis=1)]\n\n# Get the x and y coordinates \nx, y = m(coord[:,0], coord[:,1])\n# Draw the path on the map (reduce alpha so that it is faded slightly)\nm.plot(x, y,'.', color='grey', alpha=0.9)\n\n# Lets set up the animation\nx,y = m(0, 0)\n# Point will be altered by the init and animate functions\n# Essentially moving the points on the plot\npoint = m.plot(x, y, 'o', markersize=7, color='red')[0]\n\n# Set up the animation (empty points)\ndef init():\n    point.set_data([], [])\n    return point,\n\n# Function for animating the data; takes coordinates at time equal to i\ndef animate(i):\n    # Transform the coordinates\n    x, y = m(coord[i,0], coord[i,1])\n    point.set_data(x,y)\n    # Set the date as the title (English format)\n    fig.suptitle('%2i \/ %2i \/ %4i \\n %s \\n %s - %s' % (day[i], month[i], year[i], \n                                                    ship_name,\n                                                    departure_port, arrival_port))\n    return point,\n\n# Create the output\noutput = animation.FuncAnimation(fig,\n                                 animate,\n                                 init_func=init,\n                                 frames=len(coord),\n                                 interval=100,\n                                 blit=True,\n                                 repeat=False)\n# Write the output\n# output.save('ship_journey.gif', writer='imagemagick')\n# Show last frame on screen\n# plt.show()\n\n# ani = animation.FuncAnimation(fig,animate,sorted(df.pickup_hour.unique()), interval = 1000)\nplt.close()\noutput.save('ship_journey.gif', writer='imagemagick', fps=2)\nfilename = 'ship_journey.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","f75a3450":"# Key for ship colours:\n# Try to match up with national colours at time - TODO\nnational_color_dict = {'Spanish'  : 'yellow',\n                       'British'  : 'red',\n                       'British ' : 'red',\n                       'French'   : 'blue',\n                       'Dutch'    : 'orange',\n                       'Hamburg'  : 'green',\n                       'American' : 'navy',\n                       'Danish'   : 'pink',\n                       'Swedish'  : 'purple'}","5b8b260f":"# Make a new column called YearDay will allow iteration through each day \n# removes the hour etc columns that could cause difficulty when plotting all ships present\n# df['YearDay'] = df['Year'].map(str) + df['Day'].map(str)\ndf['YearMonthDay'] = df['UTC'].astype(str).str[:-2].astype(np.int64)\n# Sort the values (so animation is in order)\ndf = df.sort_values(by=['YearMonthDay'], ascending=True)\n# Reset index\ndf = df.reset_index()\n# Have a look at the head\nprint(\"\\n YearMonthDay head = \", df['YearMonthDay'].head(5))\n# How many values\nprint(\"\\n Number of YearMonthDay = \", df['YearMonthDay'].count())\n\ndf['YearMonthDay'][124]","c91c7fc4":"# Try and look at all ships present at a certain date\n\n# First lets try plot all ships present at a certain date\n\n# Take a temporary array at a certain YearDay\ndf_temp = df[df['YearMonthDay']==df['YearMonthDay'][10000]]\nprint(\"\\n Chosen YearMonthDay = \", df_temp['YearMonthDay'].unique()[0])\n\n# Will still have multiple entries \n# Will take last entry from the ships log for the day\ndf_temp = df_temp.drop_duplicates(subset='ShipName', keep='last')\n\n# Generate base map\nplt.figure(figsize=(20,10))\n# Setup Base Map\nm = Basemap(projection='robin',lon_0=180,resolution='c', llcrnrlon=120, urcrnrlon=-30)\nm.drawcoastlines()\nm.drawcountries()\nm.drawmeridians(np.arange(0,360,30))\nm.drawparallels(np.arange(-90,90,30))\nm.fillcontinents(color='grey')\n\n# Now would like to plot position of each ship\nfor index, row in df_temp.iterrows():\n    # Add points to world map\n    m.scatter(row['Lon3'], row['Lat3'],\n              color=national_color_dict[row['Nationality']],\n              marker='o', latlon=True)\n# Set title\nplt.title('%2i \/ %2i \/ %4i' % (df_temp['Day'].unique()[0],\n                               df_temp['Month'].unique()[0],\n                               df_temp['Year'].unique()[0]))\nplt.show()","6794c265":"# Animate ship positions\n# Generate base map\nfig = plt.figure(figsize=(20,10))\n# Setup Base Map\nm = Basemap(projection='robin',lon_0=180,resolution='c', llcrnrlon=120, urcrnrlon=-30)\nm.drawcoastlines()\nm.drawcountries()\nm.drawmeridians(np.arange(0,360,30))\nm.drawparallels(np.arange(-90,90,30))\nm.fillcontinents(color='grey')\n\n#####################################\n\n# Lets animate the path\nnational_colours = 'British'\nscat = m.scatter([0], [0],\n                 color=national_color_dict[national_colours],\n                 marker='o',\n                 latlon=True)\n\ndef init():\n    return scat,\n\n# Function for animating the data; takes coordinates at time equal to i\ndef update_plot(yearmonthday):\n#     Make temprary dataframe for passed in year day\n    df_temp = df[df['YearMonthDay']==yearmonthday]\n    \n    # Will still have multiple entries \n    # Will take last entry from the ships log for the day\n    df_temp = df_temp.drop_duplicates(subset='ShipName', keep='last')\n    \n    # Drop NA lon and lat\n    # df_temp = df_temp.dropna(subset=['Lon3', 'Lat3'])\n\n    # Get x, y arrays\n    longitude_array = df_temp['Lon3'].values\n    latitude_array = df_temp['Lat3'].values\n    \n    # Transform coordinates\n    x, y = m(longitude_array, latitude_array)\n    # Arange coordinates for correct format for passing to set offsets\n    coordinates = np.vstack([x, y]).T\n    \n    # Get national colour array\n    national_colours = df_temp['Nationality']\n    df_temp['NationalColor'] = df_temp['Nationality'].map(national_color_dict) \n    \n    # Pass arrays of coordinates and colours to scat\n    scat.set_offsets(coordinates)\n    scat.set_color(df_temp['NationalColor'])\n    \n    # Set the date as the title (English format)\n    fig.suptitle('%2i \/ %2i \/ %4i' % (df_temp['Day'].values[0],\n                                      df_temp['Month'].values[0],\n                                      df_temp['Year'].values[0]))\n     \n    print('\\r', 'YearMonthDay', yearmonthday, ' \/ ', df['YearMonthDay'].nunique(), end='')\n\n    return scat,\n\n# Prep dataframe again\n# Just take a certain Year?\ndf = df[df['Year'].between(1774,1775)]\n\n# Create the output\noutput = animation.FuncAnimation(fig,                                                #\n                                 update_plot,                                              #\n                                 init_func=init,                                           #\n                                 frames=np.sort(df['YearMonthDay'].unique())[:],           #\n                                 interval=100,                                             # Interval between frames in ms\n                                 blit=False,                                               # TODO: what is blit?\n                                 repeat=False)                                             #\n# # Write the output\n# output.save('European_Historical_Ship_Travels.gif', writer='imagemagick')\n# # Show last frame on screen\n# plt.show()\nplt.close()\noutput.save('European_Historical_Ship_Travels.gif', writer='imagemagick', fps=2)\nfilename = 'European_Historical_Ship_Travels.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","83e69832":"i = 0\nfor i in range(10):\n    print('\\r', 'Iteration', i, 'Score:', 3, end='')\n    time.sleep(1)\n#\n","6eaefb17":"df2 = df[df['Year'].between(1774,1784)]\ndf2['Year'].unique()","706d26f5":"First off lets try plot one random ship's journey. This is based on an ealier kernel by XXX (link) plotting Captain Cook's travels.\n\n","1883efb4":"How are we going to iterate through each day?\nWe have the UTC column which is in the format YYYYMMDDHH. If we disregard the hour we will have common entries for each day. If the logbook was not updated on a certain day then the ship will not be plotted that day. Here I am assuming that back in the day they were pretty meticolous when keeping logs. \n\nWe have 280280 unique values so it looks like there should be somthing to plot for the time range. ","c18b9ae7":"### Colour Dictionary Creation\nCreating dictionaries to help assign values to a certain colour can be helpful; especially if dealing with large amount of data. As long as all of the values are listed as keys one only has to modify the dictionary to update the colours. I have done this below; trying to assign colours representative of the county's national colours at the time (sorry Denmark there are alot of Reds). \n\nNOTE: to find all countries present I performed the command: \"df['Nationaility'].unique()\"","1232b164":"That worked, not lets try plot and animate all ships between a certain time perdiod. A period of interest could be the American War of Independence (19 Apr 1775 \u2013 3 Sep 1783). Lets look at the years 1774-1784 so we can see any changes before\/after the war. ","e2bcb528":"Lets take the \"CLIWOC15.csv\" table for further analysis. By looking at the columns we can see we get the infomation that we are looking for:\n* \"Lon3\" - seems to be the ship's longitude\n* \"Lat3\" - seems to be the ship's latitude\n*  \"UTC\" - the universal time. Seems to be in the format YYYYMMDDHH\n\nOther useful information:\n* \"Nationaility\" - the ship's nationaility\n\n\nNOTE: I have printed each column instead of using \"df.info()\" due to the large amount of columns present within the dataset. \"df.info\" was clipped; hiding some columns. ","0dd61042":"# Historic Ship Global Visualsation\nThe aim of this notebook is to see if we can plot all ships sailing on the high seas at one moment and then on animate their journeys.\n<br>\nFirst off lets import some Python packages:","2aaac2f5":"![](https:\/\/pics.me.me\/usa-france-help-me-france-cant-im-broke-usa-its-34517921.png)"}}