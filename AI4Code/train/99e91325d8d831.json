{"cell_type":{"a75400b4":"code","564f48ef":"code","6e361013":"code","fd5d8533":"code","1150f5e8":"code","d7acb58a":"code","4245084e":"code","90c1e8db":"code","2bd46646":"code","7361f3ec":"code","8f1beb21":"code","59a716cf":"code","6fb4dec2":"code","651cf42b":"markdown","14365e44":"markdown","0fc93068":"markdown","e4f0ae28":"markdown","0d4eda73":"markdown","dd6dc44e":"markdown","7c008054":"markdown","ba8c5f7f":"markdown","7a4d2afb":"markdown"},"source":{"a75400b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# Any results you write to the current directory are saved as output.","564f48ef":"dataset = pd.read_csv(os.path.join(dirname, filename))\nX = dataset.iloc[:, 0:30].values\ny = dataset.iloc[:, 30].values","6e361013":"dataset.head()","fd5d8533":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","1150f5e8":"dataset['class'].sum()\n","d7acb58a":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","4245084e":"\n# Fitting K-NN to the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2, algorithm='auto')\nclassifier.fit(X_train, y_train)","90c1e8db":"y_pred = classifier.predict(X_test)","2bd46646":"\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","7361f3ec":"#Accuracy\naccuracy =  (cm[0,0]+cm[1,1])\/len(X_test)\nprint(accuracy)","8f1beb21":"from sklearn.svm import SVC\nfrom sklearn.model_selection  import GridSearchCV\ndef svc_param_selection(X, y, nfolds):\n    Cs = [0.001, 0.01, 0.1, 5, 10,15]\n    gammas = [0.001, 0.01, 0.1,0.5, 0.10, 1]\n    param_grid = {'C': Cs, 'gamma' : gammas}\n    grid_search = GridSearchCV(SVC(kernel='rbf'), param_grid, cv=nfolds)\n    grid_search.fit(X_train, y_train)\n    grid_search.best_params_\n    return grid_search.best_params_\n\n\n\n\n\n","59a716cf":"svc_param_selection(X_train,y_train,5)","6fb4dec2":"classifier = SVC(kernel = 'rbf', random_state = 3, gamma=0.1, degree=3, C=10)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)","651cf42b":"Let's set the column for the analysis","14365e44":"Wow That's awesome, we got almost 99.99% correct predictions","0fc93068":"Here are the results \nBingo!\n","e4f0ae28":"This is important step to feature scale the data set","0d4eda73":"Now Let's start with SVM","dd6dc44e":"The system is already predict the fraud, let see how accurate the results from confusion matrix","7c008054":"This is the step where the algo will predict the fraud","ba8c5f7f":"Preparing Training & Test set","7a4d2afb":"We are using K-NN algorithm to perform the Fraud detection"}}