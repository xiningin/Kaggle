{"cell_type":{"d435fe72":"code","6f32f39b":"code","2484d3be":"code","96d39633":"code","c610d8db":"code","e89ca0ac":"code","ab8e7d88":"code","619b7e11":"code","122bd51b":"code","2f9758d8":"code","f0324db7":"code","4d91498f":"code","0e5369e4":"code","176473ef":"markdown","b14ea197":"markdown","3abb4c70":"markdown","8d9e0a48":"markdown","3570df23":"markdown","813153c9":"markdown","fb54798c":"markdown","0ee8e7b6":"markdown","3a69d6a8":"markdown","890b0db1":"markdown","efc5f603":"markdown","6a5eb7e5":"markdown","98e8f301":"markdown","f97344a1":"markdown","7f505e20":"markdown","30404f22":"markdown"},"source":{"d435fe72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6f32f39b":"# Requirements\nimport keras\nfrom keras import Sequential\n\n# Turn off complaints\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2484d3be":"# Import Data\ndf = pd.read_csv('..\/input\/Iris.csv')","96d39633":"# Check it out\ndf.head()","c610d8db":"# EDA\nimport seaborn as sns\n\nsns.pairplot(df, hue=\"Species\")","e89ca0ac":"# Data Prep\n\n# Manip\ntargets = df[\"Species\"]\ndf.drop([\"Species\", \"Id\"], axis = 1, inplace=True)\n\n\n# Normalize\nfrom sklearn import preprocessing\n\nx = df.values #returns a numpy array\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndf = pd.DataFrame(x_scaled)\n","ab8e7d88":"# Convert Targets to One-Hots\ntargets = targets.replace(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'],\n                [0,1,2])\n\ntargets = keras.utils.np_utils.to_categorical(targets, num_classes=3)","619b7e11":"# Sanity\nlen(df)\n","122bd51b":"# Build Neural Network\nfrom keras.layers import Dense\n\n# Create a new Sequential object\nmodel = Sequential()\n\n# Create the input layer, 50 nodes\nmodel.add(Dense(10, input_shape=(4,)))\n\n# Create the hidden layer\nmodel.add(Dense(10, activation=\"relu\"))\n          \n# Create an output layer, 3 nodes\nmodel.add(Dense(3, activation=\"sigmoid\"))\n\n# Compile model\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['acc'])\n\n# Train the NN model\nmodel.fit(x=df, y=targets, epochs=100, batch_size=2, validation_split=0.10)\n","2f9758d8":"# Evaluate model\nmodel.evaluate(x=df, y=targets, batch_size=16)","f0324db7":"preds = model.predict_classes(df)\n\nfor i in range(len(df)):\n    print(\"Prediction = %s, Actual = %s\" % (preds[i], targets[i]))","4d91498f":"# Manip\ndata = df.copy()\ndata[\"preds\"] = preds\n","0e5369e4":"sns.pairplot(data, hue=\"preds\", vars=[0,1,2,3])","176473ef":"# Neural Network Model\nThe NN is sequential, built with Dense layers.\n* The input layer contains 10 nodes, with an input shape of 4 corresponding to the four predictive variables.\n* There is one hidden layer, 10 nodes, with non-linearities introduced by the `relu` function.\n* The output layer has 3 nodes. We use the `sigmoid` function as opposed to `softmax` here.\n\nThe model is compiled with the following settings:\n* `optimizer` - `rmsprop` as opposed to `adam`.\n* `loss` - `categorical_crossentropy` since this is a categorical prediction problem.\n* `metrics` - `acc` for a 0.0 -1.00 accuracy score.\n\nThe model is then trained with the following settings:\n* x values are chosen from `df`\n* y values are the `targets`\n* 100 epochs\n* `batch_size` of 2 \n* `validation_split` on 10 percent of the data","b14ea197":"# Viewing pairplots\nUsing `Seaborn` , a visualization library for Python, we can see scatterplots of each variable against the other.","3abb4c70":"# Requirements\nInstead of using the Tensorflow library directly, I'm using the Keras API to Tensorflow's routines.","8d9e0a48":"# Neural Network Classification on Iris Data\n[Previously](https:\/\/github.com\/bbevan\/Colabs\/blob\/master\/K_Means_Speciation.ipynb), I ran a K-Means classification algorithm on this data, which achieved a success rate of ~88%. I'd like to know if a simple Neural Network can do better.","3570df23":"# Data preparation\nSince this is a supervised learning task, we need to distinguish between the targets and the predictive factors.\n* `targets` - contains the Species labels.\n* `df` - will contain the Sepal and Petal measurements by dropping `Species` and `Id` in place.\n\nThe data is then normalized by the `sklearn` `preprocessing` routines.","813153c9":"About 95% Accurate.\n\n*Caveat: the code may return different accuracy readings when re-run.*","fb54798c":"As a reminder:\n* Sepal lengths and Sepal width are entangled within each other.\n* K-Means was able to predict the correct species with 88% accuracy\n* The goal in this experiment is to find out if a Neural Network can identify the correct species with greater accuracy despite the same entangled data.","0ee8e7b6":"# Visualizations","3a69d6a8":"Lets just make sure everything is ok at this point with `len`.","890b0db1":"Shoutout to [this notebook](https:\/\/www.kaggle.com\/nityansuman\/iris-deep-classifier) , which helped me diagnose a few issues.","efc5f603":"As you can see from the Pair Plot above, this particular model recognized all three species. In the original Neural Network code that I built, only two species were identified due to the entanglements metioned above.","6a5eb7e5":"# Model evaluation\nI've evaluated the model much like the evaluation of the K-Means model. I'm just re-predicting the species labels based on the entire dataset. In reality, this is never done due the fact that the accuracy score would be artificially inflated due to overfitting. But I'm hoping that this method returns a value comparable to the K-Means acuracy measure.","98e8f301":"# Predicting the class labels\nThe Keras API has a built in method for predicting class labels\n* These class labels are the Species identifiers.","f97344a1":"`head` is a nice function for making sure the data is sane.","7f505e20":"# Data\nThe same data is used from the K-Means experiment. In short, it is the Iris flower data collected by R.A. Fisher to determine Taxanomic classification by Sepal and Petal measurements. The model will use four columns of measurements (sepal and petal lengths and widths)  as factors for predicting species labels.","30404f22":"# One-Hot Encoding\nThe target values are categorical in nature. \n* Neural Networks are capable of working with categorical variables.\n* They must be encoded numerically, however.\n* One-hot encoding encodes categorical variables as binary arrays."}}