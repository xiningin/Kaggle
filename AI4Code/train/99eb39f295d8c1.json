{"cell_type":{"3e801fbf":"code","25d476b1":"code","3a1f4cc0":"code","6969f3af":"code","006e5fe7":"code","417ddcd0":"code","ecdd1839":"code","6c1d42eb":"code","6d3d4b53":"code","b8517f36":"code","e7e7668b":"code","92f9288c":"code","97fd17cf":"code","ee04ba1f":"code","3e55b078":"code","6eb007d7":"code","6ec9c735":"code","da90d321":"code","a7e64271":"code","afc61a82":"code","c262e089":"code","34cd194f":"code","9b4a9b7e":"code","6dd48507":"code","0e708582":"code","af56888a":"code","baf67c77":"code","17d61838":"code","521b12ea":"code","1520740a":"code","d00931a1":"code","71eaa2e1":"code","a2ad0dc0":"code","865a987b":"code","febe7b02":"code","007871f5":"code","fa1f0eb7":"code","208dddc1":"code","a6bc7db5":"code","b08a820d":"code","e2ed04d4":"code","41203894":"code","88225cec":"code","0b6291d1":"code","364669ea":"code","da33c5b7":"code","b2145e54":"code","c30d7d0b":"code","f064290f":"code","6592a599":"code","09fcc8b0":"code","39f01440":"code","c40e896c":"code","11f990f0":"code","b6dc71c7":"code","027a5b08":"code","a6df203b":"code","d316e98a":"code","aef71499":"code","6ef16dc9":"code","5755f7d8":"markdown","11a068b5":"markdown","1bbb1192":"markdown","e6a43605":"markdown","72642d9d":"markdown","06f382fd":"markdown","af5f2667":"markdown","65c0b153":"markdown","aae12b3d":"markdown","430ed3a4":"markdown","cf622810":"markdown","2f7b5745":"markdown","df7c017d":"markdown","90f77ed6":"markdown","c6d9b903":"markdown","928e5f9a":"markdown","265a5e58":"markdown"},"source":{"3e801fbf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","25d476b1":"import warnings\nwarnings.filterwarnings('ignore')","3a1f4cc0":"data=pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\n","6969f3af":"data.head()","006e5fe7":"data.shape","417ddcd0":"data.columns","ecdd1839":"data.info()","6c1d42eb":"data.isnull().sum()","6d3d4b53":"data.describe().T","b8517f36":"# Plotting histogram for the entire dataset\nfig = plt.figure(figsize = (15,15))\nax = fig.gca()\ng = data.hist(ax=ax)","e7e7668b":"sns.countplot(x='output',hue='sex',data=data)","92f9288c":"women=data.loc[data.sex==1]['output']\nrate_women=sum(women)\/len(women) * 100\nprint(' % of women got heart attack : ', rate_women)","97fd17cf":"men=data.loc[data.sex==0]['output']\nrate_men=sum(men)\/len(men) * 100\nprint(' % of men got heart attack : ', rate_men)","ee04ba1f":"# Visualization to check if the dataset is balanced or not\nsns.countplot(x='output', data=data)\n","3e55b078":"sns.countplot(x='output',hue='cp',data=data) #chest pain type","6eb007d7":"sns.countplot(x='output',hue='exng',data=data) #exercise induced angina","6ec9c735":"#(fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\nsns.countplot(x='output',hue='fbs',data=data) \n","da90d321":"sns.distplot(data['chol']) #cholestoral in mg\/dl fetched via BMI sensor","a7e64271":"sns.distplot(data['age'])","afc61a82":"data.corr()","c262e089":"# Selecting correlated features using Heatmap\n\n# Get correlation of all the features of the dataset\ncorr_matrix = data.corr()\ntop_corr_features = corr_matrix.index\n\n# Plotting the heatmap\nplt.figure(figsize=(20,20))\nsns.heatmap(data=data[top_corr_features].corr(), annot=True, cmap='RdYlGn')","34cd194f":"for i in data.columns:\n    sns.boxplot(data[i])\n    plt.title(i)\n    plt.show()","9b4a9b7e":"def outlinefree(dataCol):\n    sorted(dataCol)\n        # getting percentile 25 and 27 that will help us for getting IQR (interquartile range)\n    Q1,Q3 = np.percentile(dataCol,[25,75])\n        # getting IQR (interquartile range)\n    IQR = Q3-Q1\n        # getting Lower range error\n    LowerRange = Q1-(1.5 * IQR)\n        # getting upper range error\n    UpperRange = Q3+(1.5 * IQR)\n        # return Lower range and upper range.\n    return LowerRange,UpperRange","6dd48507":"lwtrtbps,uptrtbps = outlinefree(data['trtbps'])\nlwchol,upchol = outlinefree(data['chol'])\nlwoldpeak,upoldpeak = outlinefree(data['oldpeak'])","0e708582":"data['trtbps'].replace(list(data[data['trtbps'] > uptrtbps].trtbps) ,uptrtbps,inplace=True)\ndata['chol'].replace(list(data[data['chol'] > upchol].chol) ,upchol,inplace=True)\ndata['oldpeak'].replace(list(data[data['oldpeak'] > upoldpeak].oldpeak) ,upoldpeak,inplace=True)","af56888a":"dataset = pd.get_dummies(data, columns=['sex', 'cp', 'fbs', 'restecg', 'exng', 'slp', 'caa', 'thall'])","baf67c77":"dataset.columns","17d61838":"from sklearn.preprocessing import StandardScaler\nstandScaler = StandardScaler()\ncolumns_to_scale = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']\ndataset[columns_to_scale] = standScaler.fit_transform(dataset[columns_to_scale])","521b12ea":"dataset.head()","1520740a":"X=dataset.drop('output',axis=1).values\nY=dataset['output'].values","d00931a1":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=100)","71eaa2e1":"from sklearn.linear_model import LogisticRegression\nreg= LogisticRegression()  \nreg.fit(x_train, y_train)","a2ad0dc0":"predict1=reg.predict(x_test)","865a987b":"from sklearn.metrics import accuracy_score\nacc1=accuracy_score(predict1,y_test)\nacc1","febe7b02":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict1)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","007871f5":"from sklearn.neighbors import KNeighborsClassifier\nclassifier= KNeighborsClassifier() \nclassifier.fit(x_train, y_train) \n","fa1f0eb7":"predict2=classifier.predict(x_test)","208dddc1":"from sklearn.metrics import accuracy_score\nacc2=accuracy_score(predict2,y_test)\nacc2","a6bc7db5":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict2)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","b08a820d":"from sklearn.tree import DecisionTreeClassifier\ntree_classifier=DecisionTreeClassifier(criterion = 'entropy',max_depth=3,random_state=2)\ntree_classifier.fit(x_train,y_train)","e2ed04d4":"predict3=tree_classifier.predict(x_test)\n","41203894":"from sklearn.metrics import accuracy_score\nacc3=accuracy_score(predict3,y_test)\nacc3","88225cec":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict3)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","0b6291d1":"from sklearn.ensemble import RandomForestClassifier\nrandomforest_model = RandomForestClassifier(max_depth=5, random_state=2)\nrandomforest_model.fit(x_train, y_train)","364669ea":"predict4=randomforest_model.predict(x_test)\n","da33c5b7":"from sklearn.metrics import accuracy_score\nacc4=accuracy_score(predict4,y_test)\nacc4","b2145e54":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict4)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","c30d7d0b":"from sklearn import model_selection\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nseed = 7\nnum_trees = 50","f064290f":"kfold = model_selection.KFold(n_splits=10, random_state=seed)\nmodel = GradientBoostingClassifier(n_estimators=num_trees, random_state=seed)\nmodel.fit(x_train,y_train)\n# results = model_selection.cross_val_score(model, x, y, cv=kfold)\n# results","6592a599":"predict5=model.predict(x_test)","09fcc8b0":"from sklearn.metrics import accuracy_score\nacc5=accuracy_score(predict5,y_test)\nacc5","39f01440":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predict5)\nsns.heatmap(cm\/np.sum(cm), annot=True, fmt='.2%', cmap='Blues')\ncm","c40e896c":"from sklearn.metrics import precision_score,recall_score,f1_score,mean_absolute_error,roc_auc_score\ndef metric(y_test,y_predict):\n    ps=precision_score(y_test,y_predict) #Precision\n    rs=recall_score(y_test,y_predict) #Recall\n    f1s=f1_score(y_test,y_predict) #f1Score\n    return(ps,rs,f1s)","11f990f0":"lr=list(metric(y_test,predict1))\nlr.append(acc1)\nlr=pd.Series(lr,index=['precession','Recall','F1_score','accuracy_score'])\nlr","b6dc71c7":"knn=list(metric(y_test,predict2))\nknn.append(acc2)\nknn=pd.Series(knn,index=['precession','Recall','F1_score','accuracy_score'])\nknn","027a5b08":"dt=list(metric(y_test,predict3))\ndt.append(acc3)\ndt=pd.Series(dt,index=['precession','Recall','F1_score','accuracy_score'])\ndt","a6df203b":"rf=list(metric(y_test,predict4))\nrf.append(acc4)\nrf=pd.Series(rf,index=['precession','Recall','F1_score','accuracy_score'])\nrf","d316e98a":"gb=list(metric(y_test,predict5))\ngb.append(acc5)\ngb=pd.Series(gb,index=['precession','Recall','F1_score','accuracy_score'])\ngb","aef71499":"eval=pd.DataFrame([lr,knn,dt,rf,gb],index=['LogisticRegression','KNN_Classifier','Decision_Tree','Random Forest','Gradient Boosting'])","6ef16dc9":"eval","5755f7d8":"## Spliting data into train and test sets","11a068b5":"# Outliers Detection","1bbb1192":"## For Gradient Boosting","e6a43605":"# Model Building","72642d9d":"## For Random Forest","06f382fd":"## for KNN Classifier","af5f2667":"## Random Forest","65c0b153":"# Handling Outliers","aae12b3d":"## Gradient Boosting","430ed3a4":"## Logistic Regression","cf622810":"# Feature Engineering","2f7b5745":"# Evaluation","df7c017d":"## for Decision Tree","90f77ed6":"## for logistic regression","c6d9b903":"**Precision**\n\nIt is the number of correct positive results divided by the number of positive results predicted by the classifier.\n\n**Recall**\n\nIt is the number of correct positive results divided by the number of all relevant samples (all samples that should have been identified as positive).\n\n**f1_score**\n\nF1 Score is used to measure a test\u2019s accuracy\n\nF1 Score is the Harmonic Mean between precision and recall. It tells you how precise your classifier is (how many instances it classifies correctly), as well as how robust it is (it does not miss a significant number of instances).","928e5f9a":"## Decision Tree Classifier","265a5e58":"## KNeighbours Classifier"}}