{"cell_type":{"fcc214dd":"code","608fed7c":"code","514380c4":"code","40bb9836":"code","b1b82f72":"code","cbf8a1b0":"code","374abc41":"code","78d18be8":"code","821272a8":"code","b43edb01":"code","8345e792":"code","fb4d022a":"code","c35403bc":"code","5ee54214":"code","199b3aaa":"code","187a06d2":"code","a81793b5":"code","2db431f3":"markdown","70615642":"markdown","0ef641c5":"markdown","ffb2998c":"markdown","60c62efb":"markdown","72acd13b":"markdown","9e1822a0":"markdown","71c33c42":"markdown","420788af":"markdown","a0e9a05e":"markdown"},"source":{"fcc214dd":"# Importing necessary libraries we are going to use\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\n!pip install yellowbrick\nfrom yellowbrick.cluster import KElbowVisualizer\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\n# to display all columns and rows and string formatting:\n\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);\npd.set_option('display.float_format', lambda x: '%.0f' % x)\nimport matplotlib.pyplot as plt\n\n#Data set reading process was performed.\ndf_2010_2011 = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name = \"Year 2010-2011\")\ndf = df_2010_2011.copy()","608fed7c":"# We extract the returned transactions from the data.\nreturned = df[df[\"Invoice\"].str.contains(\"C\",na=False)].index\ndf = df.drop(returned, axis = 0)\n\n# How much money has been earned per invoice? (It is necessary to create a new variable by multiplying two variables)\ndf[\"TotalPrice\"] = df[\"Quantity\"]*df[\"Price\"]\n\n# Missing observations were deleted.\ndf.dropna(inplace = True)","514380c4":"# try to determine the earliest invoice date\ndf[\"InvoiceDate\"].min()\n\n# try to determine the latest invoice date\ndf[\"InvoiceDate\"].max()\n\n# we set the latest date of dataset as todays`s date\nimport datetime as dt\ntoday_date = dt.datetime(2011,12,9) \n\n# try to determine the latest transaction date for each customer\ndf.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}).head()\n\n# if we substarct the latest date of transaction for each customer from today`s date, we can get the recency \ntemp_df = (today_date - df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}))\n\n# change the column name from 'InvoiceDate'to 'Recency'\ntemp_df.rename(columns={\"InvoiceDate\": \"Recency\"}, inplace = True)\n\n# just take the days \nrecency_df = temp_df[\"Recency\"].apply(lambda x: x.days) \nrecency_df.head()","40bb9836":"#finding frequency value of each customer. Lists invoices and counts them\ntemp_df = df.groupby([\"Customer ID\",\"Invoice\"]).agg({\"Invoice\":\"count\"})\n\n#counts all invoices for each customer\nfreq_df = temp_df.groupby(\"Customer ID\").agg({\"Invoice\":\"count\"})\n\n#changes column name (Invoice -> Frequency)\nfreq_df.rename(columns={\"Invoice\": \"Frequency\"}, inplace = True)\nfreq_df.head() ","b1b82f72":"#shows each customer's total spendings\nmonetary_df = df.groupby(\"Customer ID\").agg({\"TotalPrice\":\"sum\"})\n\n#changes column name (TotalPrice -> Monetary)\nmonetary_df.rename(columns = {\"TotalPrice\": \"Monetary\"}, inplace = True)\nmonetary_df.head()","cbf8a1b0":"# Try to combine recency, frequency, and monetary as columns in rfm dataframe\nrfm = pd.concat([recency_df, freq_df, monetary_df],  axis=1)\nrfm.head()\n\n# if interested, outliers can be determined for RFM scores\nfor feature in [\"Recency\",\"Frequency\",\"Monetary\"]:\n\n    Q1 = rfm[feature].quantile(0.05)\n    Q3 = rfm[feature].quantile(0.95)\n    IQR = Q3-Q1\n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n\n    if rfm[(rfm[feature] > upper) | (rfm[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n        print(rfm[(rfm[feature] > upper) | (rfm[feature] < lower)].shape[0])\n    else:\n        print(feature, \"no\")\n        \nmms = MinMaxScaler((0,1))\ncols = rfm.columns\nindex = rfm.index\nscaled_rfm = mms.fit_transform(rfm)\nscaled_rfm = pd.DataFrame(scaled_rfm, columns=cols, index = index)\nscaled_rfm.head()","374abc41":"# Clustering with the K-Means Algorithm\nsc = MinMaxScaler((0,1))\ndf = sc.fit_transform(rfm)\nkmeans = KMeans(n_clusters = 10)\nk_fit = kmeans.fit(df)\nk_fit.labels_","78d18be8":"#Determining the Optimum Number of Clusters\nkmeans = KMeans(n_clusters = 10)\nk_fit = kmeans.fit(df)\nssd = []\n\nK = range(1,30)\n\nfor k in K:\n    kmeans = KMeans(n_clusters = k).fit(df)\n    ssd.append(kmeans.inertia_)\n\nplt.plot(K, ssd, \"bx-\")\nplt.xlabel(\"Distance Residual Sums Versus Different k Values\")\nplt.title(\"Elbow method for Optimum number of clusters\")","821272a8":"from yellowbrick.cluster import KElbowVisualizer\nkmeans = KMeans()\nvisu = KElbowVisualizer(kmeans, k = (2,20))\nvisu.fit(df)\nvisu.poof();","b43edb01":"kmeans = KMeans(n_clusters = 6).fit(df)\nkumeler = kmeans.labels_\npd.DataFrame({\"Customer ID\": rfm.index, \"Kumeler\": kumeler})\nrfm[\"cluster_no\"] = kumeler\nrfm[\"cluster_no\"] = rfm[\"cluster_no\"] + 1\nrfm.groupby(\"cluster_no\").agg({\"cluster_no\":\"count\"})","8345e792":"rfm.head()","fb4d022a":"rfm.groupby(\"cluster_no\").agg({\"mean\"})","c35403bc":"from scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nhc_complete = linkage(rfm, \"complete\")\nhc_average = linkage(rfm, \"average\")\n\nplt.figure(figsize = (15,10))\nplt.title(\"Hierarchical Cluster Dendrogram\")\nplt.xlabel(\"Observation Unit\")\nplt.ylabel(\"Distance\")\ndendrogram(hc_complete,\n           truncate_mode = \"lastp\",\n           p = 10,\n           show_contracted = True,\n          leaf_font_size = 10);","5ee54214":"cluster_labels = cut_tree(hc_complete, n_clusters=4).reshape(-1, )\nrfm['Cluster_Labels'] = cluster_labels\nrfm['Cluster_Labels'] = rfm['Cluster_Labels'] + 1\nrfm.groupby(\"Cluster_Labels\").agg(np.mean)","199b3aaa":"sns.boxplot(x='Cluster_Labels', y='Monetary', data=rfm);","187a06d2":"sns.boxplot(x='Cluster_Labels', y='Frequency', data=rfm);","a81793b5":"sns.boxplot(x='Cluster_Labels', y='Recency', data=rfm);","2db431f3":"### Recency Metric","70615642":"## Creating RFM scores \n* Recency : How recently a customer has made a purchase\n* Frequency : How often a customer makes a purchase\n* Monetary : How much money a customer spends on purchases","0ef641c5":"### Frequency Metric","ffb2998c":"### Hierarchical Clustering","60c62efb":"## CONCLUSIONS\n\nAccording to K-Means Clustering with optimized 6 cluster_no;\n\n* Customers belong to cluster_no 6 are the ones having the highest amount of transactions as compared to other cluster_noes.\n\n* Customers in Cluster_no 4 are the ones bring us the least amount of money and not recent buyers.\n\n* For the Hierarchical Clustering Model, customers in cluster_label 3 has the highest amount of transactions.\n\n* Customers in cluster_label 2 are the ones having the least transaction frequency.\n","72acd13b":"## MODEL DEVELOPMENT\n### K-Means Clustering","9e1822a0":"## DATA PREPROCESSING","71c33c42":"# RFM Clustering of Customers using K-Means\n\n## Aim\nAn e-commerce company wants to segment its customers and determine marketing strategies according to these segments.\nFor this purpose, we will define the behavior of customers and we will form groups according to clustering.\nIn other words, we will take those who exhibit common behaviors into the same groups and we will try to develop sales and marketing techniques specific to these groups.\n\n## Data Set Information:\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Online+Retail+II\n\nThis Online Retail II data set contains all the transactions occurring for a UK-based and registered, non-store online retail between 01\/12\/2009 and 09\/12\/2011.The company mainly sells unique all-occasion gift-ware. Many customers of the company are wholesalers.\n\n## Attribute Information:\n* InvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. If this code starts with the letter 'c', it indicates a cancellation.\n* StockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product.\n* Description: Product (item) name. Nominal.\n* Quantity: The quantities of each product (item) per transaction. Numeric.\n* InvoiceDate: Invice date and time. Numeric. The day and time when a transaction was generated.\n* UnitPrice: Unit price. Numeric. Product price per unit in sterling (\u00c2\u00a3).\n* CustomerID: Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer.\n* Country: Country name. Nominal. The name of the country where a customer resides.","420788af":"## RFM Scores","a0e9a05e":"### Monetary Metric"}}