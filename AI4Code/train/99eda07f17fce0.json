{"cell_type":{"009a4e51":"code","6bfdf51e":"code","492d10c2":"code","72598891":"code","f7fa59c5":"code","799ac3da":"code","649c6864":"code","64f8f447":"code","f70c2b08":"code","44fb4600":"code","0dd2b978":"code","2b215fb2":"code","cd740007":"code","77ccad89":"code","d41a9cd6":"code","77eb046a":"code","36602ddf":"code","5dab91b4":"code","2fe0d143":"code","242a8e05":"code","34cecf18":"code","2424b630":"code","ef921ff3":"code","7b63afb6":"code","50ae3d4c":"code","60adf114":"code","6204bd50":"code","91a5a971":"code","a597b925":"code","6485455a":"markdown","54db10a3":"markdown","5727788c":"markdown","168ead24":"markdown","b30588de":"markdown","46d00864":"markdown","83dbca09":"markdown","380f036d":"markdown","871260f4":"markdown","bdb035c8":"markdown","a3f5a93b":"markdown","8accdba1":"markdown","666845ca":"markdown","8ff88773":"markdown","5abcab18":"markdown","3e79046c":"markdown","c4228a50":"markdown","041bcbdf":"markdown","5a6975ad":"markdown","9a55b991":"markdown"},"source":{"009a4e51":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6bfdf51e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Visualization\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nfrom sklearn import linear_model\nimport statsmodels.api as sm","492d10c2":"# Location of the training images\nBASE_PATH = '..\/input\/osic-pulmonary-fibrosis-progression'\n\n# image directories\ndata_train_dir = f'{BASE_PATH}\/train'\ndata_test_dir = f'{BASE_PATH}\/test'\n\n# Location of training labels\ntrain = pd.read_csv(f'{BASE_PATH}\/train.csv')\ntest = pd.read_csv(f'{BASE_PATH}\/test.csv')","72598891":"sample_submission = pd.read_csv(f'{BASE_PATH}\/sample_submission.csv')","f7fa59c5":"patient_dict = {}\ndef init_fvc(row):\n    if row['Patient'] not in patient_dict.keys():\n        patient_dict[row['Patient']] = row['FVC']\n        return row['FVC']\n    else:\n        return patient_dict[row['Patient']]\n\ntrain['InitFVC'] = train.apply(lambda row: init_fvc(row), axis=1)\ntrain.head(20)","799ac3da":"patient_dict = {}\ndef init_week(row):\n    if row['Patient'] not in patient_dict.keys():\n        patient_dict[row['Patient']] = row['Weeks']\n        return row['Weeks']\n    else:\n        return patient_dict[row['Patient']]\n\ntrain['InitWeeks'] = train.apply(lambda row: init_week(row), axis=1)\ntrain.head(20)","649c6864":"patient_dict = {}\ndef init_percent(row):\n    if row['Patient'] not in patient_dict.keys():\n        patient_dict[row['Patient']] = row['Percent']\n        return row['Percent']\n    else:\n        return patient_dict[row['Patient']]\n\ntrain['InitPercent'] = train.apply(lambda row: init_percent(row), axis=1)\ntrain.head(20)","64f8f447":"train_df = pd.get_dummies(train, columns=['Sex', 'SmokingStatus'], prefix=['Sex', 'SmokingStatus'])","f70c2b08":"train_df.head()","44fb4600":"test.head()","0dd2b978":"data = []\nfor i in range(-12, 133+1):\n    for index, row in test.iterrows():\n        new_cols = list(test.columns)\n        new_cols.append('InitWeeks')\n        new_vals = [row['Patient'], i, row['FVC'], row['Percent'],row['Age'],row['Sex'],row['SmokingStatus'], row['Weeks']]\n        data.append(dict(zip(new_cols, new_vals)))\ntest_df = pd.DataFrame(data)\ntest_df.head(10)","2b215fb2":"# Naive Simple Linear Regression (FVC vs. Weeks)\nX = train[['Weeks']]\nY = train['FVC']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)\n\nmodel = sm.OLS(Y, X).fit()\nprint(model.summary())","cd740007":"sns.lmplot(x='Weeks', y='FVC', data=train.sample(frac=0.8))","77ccad89":"X_test = test[['Weeks']]\nY_test = test['FVC']\nprint('Predicted FVCs: \\n', regr.predict(X_test))\nprint('Actual FVCs: \\n', Y_test)","d41a9cd6":"# Naive Simple Linear Regression (FVC vs. Weeks)\nX = train[['Weeks', 'InitFVC']]\nY = train['FVC']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)\n\nmodel = sm.OLS(Y, X).fit()\nprint(model.summary())","77eb046a":"sns.lmplot(x='Weeks', y='FVC', hue='InitFVC', data=train.head(98))\n\ndisplay(test.head())","36602ddf":"X_test = test_df[['Weeks', 'FVC']]\nY_test = test_df['FVC']\n\nY_pred = regr.predict(X_test)\n# print('Predicted FVCs: \\n', Y_pred)\n# print('Actual FVCs: \\n', Y_test)","5dab91b4":"# Multiple Linear Regression \nX = train[['Weeks', 'InitFVC', 'InitWeeks']]\nY = train['FVC']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)\n\nmodel = sm.OLS(Y, X).fit()\nprint(model.summary())","2fe0d143":"X_test = test_df[['Weeks', 'FVC', 'InitWeeks']]\nY_test = test_df['FVC']\n\nY_pred = regr.predict(X_test)\n# print('Predicted FVCs: \\n', Y_pred)\n# print('Actual FVCs: \\n', Y_test)","242a8e05":"# use df.iloc[idx] to access specific row \ndata = []\nfor i in range(test_df.shape[0]):\n    new_cols = ['Patient', 'Weeks', 'FVC', 'Confidence']\n    new_vals = [test_df.iloc[i]['Patient'], test_df.iloc[i]['Weeks'], Y_pred[i], 100]\n    data.append(dict(zip(new_cols, new_vals)))\nviz = pd.DataFrame(data)\nsns.lmplot(x='Weeks', y='FVC', hue='Patient', data=viz)","34cecf18":"train.head()","2424b630":"# Multiple Linear Regression \nX = train[['Weeks', 'InitFVC','InitWeeks']]\nY = train['FVC']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)\n\nmodel = sm.OLS(Y, X).fit()\nprint(model.summary())","ef921ff3":"# Multiple Linear Regression \nX = train[['Weeks', 'InitFVC', 'InitWeeks', 'Age']]\nY = train['FVC']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)\n\nmodel = sm.OLS(Y, X).fit()\nprint(model.summary())","7b63afb6":"X_test = test_df[['Weeks', 'FVC', 'InitWeeks', 'Age']]\nY_test = test_df['FVC']\n\nY_pred = regr.predict(X_test)\n# print('Predicted FVCs: \\n', Y_pred)\n# print('Actual FVCs: \\n', Y_test)","50ae3d4c":"train_df.head()","60adf114":"# Multiple Linear Regression \nX = train_df[['Weeks', 'InitFVC', 'InitWeeks', 'Age', 'SmokingStatus_Currently smokes']]\nY = train_df['FVC']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, Y)\n\nprint('Intercept: \\n', regr.intercept_)\nprint('Coefficients: \\n', regr.coef_)\n\nmodel = sm.OLS(Y, X).fit()\nprint(model.summary())","6204bd50":"test.head()","91a5a971":"# use df.iloc[idx] to access specific row \ndata = []\nfor i in range(test_df.shape[0]):\n    new_cols = ['Patient_Week', 'FVC', 'Confidence']\n    new_vals = [test_df.iloc[i]['Patient']+\"_\"+str(test_df.iloc[i]['Weeks']), Y_pred[i], 244]\n    data.append(dict(zip(new_cols, new_vals)))\nsubmission = pd.DataFrame(data)\nsubmission.head(95)\n\n# create function to compare dif between actual and pred fvc for given week ","a597b925":"submission.to_csv('submission.csv', index=False)","6485455a":"### Create 'Initial FVC' Column","54db10a3":"## Import Libraries","5727788c":"### Convert Sex and SmokingStatus to Indicator Variables","168ead24":"# OSIC: Pulmonary Fibrosis | Baseline Regression\n\n* Feature engineering\n* Experimentation with simple and multiple regression models\n* Preparation of sample submissions","b30588de":"## 5. MLR (FVC vs. Weeks, Age, InitWeeks, InitFVC)\n* Incorporation of age --> p-value of predictor < 0.05. \n* Age could have an effect on **rate of decline**. ","46d00864":"## 3. Basic Multiple Linear Regression (FVC vs. InitFVC, Weeks, InitWeeks)","83dbca09":"## Feature Engineering | Test\n* For each patient, add a row for weeks with range -12 to 133. \n* All else is *constant* for now\n* Age is *initial age*","380f036d":"# Sample Submission\n\n* **Confidence** - Redefined as **UNCERTAINTY\/STANDARD DEVIATION**\n* TODO: Implement confidence optimization function based on predictions. \n* Current optimal confidence estimate ~ **244** based on graph from https:\/\/www.kaggle.com\/rohanrao\/osic-understanding-laplace-log-likelihood\/data?select=train","871260f4":"## 4. MLR (FVC vs. Weeks, InitPercent, InitWeeks)","bdb035c8":"## 5. MLR (FVC vs. Weeks, Age, Sex, InitWeeks, InitFVC)","a3f5a93b":"### Visualize Weeks vs. FVC Grouped by InitFVC\n* When grouped by InitFVC, the negative correlation is much more pronounced. ","8accdba1":"# Regression Models","666845ca":"### Create Weeks vs. FVC Plot \n\nTrend is very weak because of the different initial FVC for each patient. (Everyone has different starting points, and decline at different rates). \n\n* A negative correlation can be visualized by **grouping by InitFVC** (See section 2 below). ","8ff88773":"## Feature Engineering | Train","5abcab18":"## 2. Basic Multiple Linear Regression (FVC vs. InitFVC & Weeks)\n* Incorporate InitFVC as a feature in the linear regression model in order to differentiate beteween each patient's starting points. \n* InitFVC controls y-intercept of line. ","3e79046c":"# Load Data","c4228a50":"### Add Column 'InitPercent'","041bcbdf":"### Create 'Initial Week' Column","5a6975ad":"## 1. Naive Simple Linear Regression (FVC vs. Weeks)","9a55b991":"### Visualize Test Regression \n* Slopes are equal for this model, since **InitFVC** and **InitWeeks** are *constant* for each patient"}}