{"cell_type":{"30aed203":"code","bd9cf728":"code","b615b551":"code","f3a157c0":"code","3eee1b8a":"code","1ce307a4":"code","347dd965":"code","f9f1dc28":"code","ac15989f":"code","5f075f27":"code","27e98de4":"code","d3066fa8":"code","5067f403":"code","54bc1e3b":"code","151c62a6":"code","74c41c47":"code","4041598d":"code","0a104b96":"markdown","d60bd9bc":"markdown","769dabf2":"markdown","f37522cd":"markdown","cd21e822":"markdown","56eeab12":"markdown","aa171a05":"markdown","ebe36460":"markdown","5aef9e13":"markdown","c15c74bd":"markdown","6c07f9d9":"markdown","5e5a5b66":"markdown","84a3cc54":"markdown","3cd6ef9d":"markdown","941449c0":"markdown","08d32582":"markdown","d56ba9c1":"markdown"},"source":{"30aed203":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n# Any results you write to the current directory are saved as output.","bd9cf728":"data = pd.read_csv('..\/input\/mbti_1.csv')","b615b551":"data.head()","f3a157c0":"data.describe()","3eee1b8a":"text = data.posts[0]","1ce307a4":"wordcloud = WordCloud().generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","347dd965":"fullText = data.posts[1000]","f9f1dc28":"wordcloud = WordCloud().generate(fullText)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","ac15989f":"descType = data.groupby(\"type\")","5f075f27":"descType.describe()","27e98de4":"names = data['type'].unique()","d3066fa8":"enfj = \" \".join(review for review in data[data[\"type\"]==\"ENFJ\"].posts)","5067f403":"stopWords = set(STOPWORDS)\n#add each lower case personality type as a stopword\nfor word in names:\n    word.lower()\n    stopWords.add(word.lower())\n#Remove all of the most common words\nmoreWords =['lot', 'time', 'love', 'actually', 'seem', 'need', 'infj', 'actually', 'pretty', 'sure', 'thought','type', 'one', 'even', 'someone', 'thing','make', \n            'now', 'see', 'things', 'feel', 'think', 'i', 'people', 'know', '-', \"much\", \"something\", \"will\", \"find\", \"go\", \"going\", \"need\", 'still', 'though', \n            'always', 'through', 'lot', 'time', 'love', 'really', 'want', 'way', 'never', 'find', 'say', 'it.', 'good', 'me.', 'many', 'first', 'wp', 'go', \n            'really', 'much', 'why', 'youtube', 'right', 'know', 'want', 'tumblr', 'great', 'say', 'well', 'people', 'will', 'something', 'way', 'sure', \n            'especially', 'thank', 'friend', 'good', 'ye', 'person', 'https', 'watch', 'yes', 'got', 'take', 'person', 'life', 'might', 'me', 'me,', 'around', 'best', 'try', \n            'maybe', 'probability', 'usually', 'sometimes', 'trying', 'read', 'us', 'may', 'use', 'work', ':)', 'said', 'two', 'makes', 'little', 'quite','fe', 'u', 'intps', 'probably', 'made', 'it', 'seems', 'look', 'yeah',\n           'different', 'come', 'it,', 'friends', 'entps', 'different', 'esfjs', 'look', 'infjs', 'estps', 'kind', 'intjs', 'enfjs', \n            'entjs', 'infps', 'every', 'long', 'tell', 'new', 'jpg']\n\nfor i in moreWords:\n    stopWords.add(i)\n\n","54bc1e3b":"#get count of each personality type\ndata[\"type\"].value_counts()\ndata[\"type\"].value_counts().plot(kind=\"bar\")\n","151c62a6":"names = data['type'].unique()\ni = 0\nwhile i < len(names):\n    for name in names:\n        print(name)\n        #filter by type\n        specRows = data['type'] == name\n        #combine the rows by type\n        nameReturn = \"\".join(post for post in data[data[\"type\"]== name].posts)\n        nameReturn = nameReturn.lower()\n        #make into a list to use comprehension to remove stopwords\n        split = nameReturn.split()\n        filtered_list = [word for word in split if word not in stopWords]\n        filtered_words = \"\".join(filtered_list)\n        #collocations = false to prevent duplicate words\n        wordcloud = WordCloud(stopwords=stopWords, collocations=False).generate(filtered_words)\n        plt.imshow(wordcloud, interpolation='bilinear')\n        plt.axis(\"off\")\n        plt.show()\n        i +=1                                      ","74c41c47":"\nfrom collections import Counter \nimport nltk\nfrom nltk.corpus import stopwords\nnames = data['type'].unique()\nt=0     \nwhile t < len(names):\n    for name in names:\n        #combine the rows by type\n        nameReturn = \"\".join(post for post in data[data[\"type\"]== name].posts)\n        nameReturn = nameReturn.lower()\n        print('The top 10 words for the ' + name + ' personality are')\n        split = nameReturn.split() \n        filtered_words = [word for word in split if word not in stopWords]\n        counter = Counter(filtered_words)\n        most_occur = counter.most_common(10) \n        print(name)\n        df = pd.DataFrame(most_occur, columns = ['Word', 'Count'])\n        df.plot.bar(x='Word',y='Count', title=name)\n        print(most_occur)\n        t+=1","4041598d":"\n\ncounter = Counter(filtered_words)\nmost_overall = counter.most_common(10) \ndf = pd.DataFrame(most_overall, columns = ['Word', 'Count'])\ndf.plot.bar(x='Word',y='Count', title='Overall top words')","0a104b96":"**Get unique list of values in type column**","d60bd9bc":"**Create a Wordcloud of the first post**","769dabf2":"**Get the data from the first post**","f37522cd":"**The text below will show the first 1000 posts**","cd21e822":"# Make word clouds for each personality type - get each type - then filter by the personality type\n","56eeab12":"**Get the first 5 rows of data to see what it looks like**","aa171a05":"# Now make a bar chart of how often each personality type is mentioned in a post","ebe36460":"# Create a graph to illustrate the count of top 10 most common words over all personality types","5aef9e13":"**Group by Briggs personality type**","c15c74bd":"**Describe by type**","6c07f9d9":"**Display the generated image:**","5e5a5b66":"# Remove stopwords","84a3cc54":"**Use describe() to get counts and stats for data set**","3cd6ef9d":"# Example of getting posts by type","941449c0":"# Now go through all the personality type names to get data","08d32582":"Now make a chart to see the words visually","d56ba9c1":"**Now Load the data**"}}