{"cell_type":{"13bd506a":"code","cf323497":"code","44cae254":"code","c6764c76":"code","1eb22661":"code","232ad977":"code","624f6b84":"code","7f977137":"code","8e3a9327":"code","ec1f65f4":"code","0ba2ea8c":"code","dde19d0e":"code","86f092bd":"code","a436a368":"code","08303235":"code","ef9e4d6b":"code","ff31ddfa":"code","4e7cd4cd":"code","b6414fa4":"code","c42281ed":"code","10572f69":"code","9c0f20f6":"code","be1ee6c2":"code","af98d49b":"code","b158d9df":"code","e7f991f4":"code","bac69420":"code","de6823cf":"code","ae4efc0e":"markdown","ece4724a":"markdown","d336a393":"markdown"},"source":{"13bd506a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf323497":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LogisticRegression\n \nfrom sklearn.model_selection import train_test_split\n \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\n ","44cae254":"df = pd.read_csv('\/kaggle\/input\/us-gasoline-and-diesel-retail-prices-19952021\/PET_PRI_GND_DCUS_NUS_W.csv')\ndf.Date = pd.to_datetime(df.Date, format='%m\/%d\/%Y')\ndf","c6764c76":"# sns.pairplot( df ) ","1eb22661":"plt.plot(df.Date, df.A1)\nplt.plot(df.Date, df.A2)\nplt.plot(df.Date, df.A3)\nplt.plot(df.Date, df.R1)\nplt.plot(df.Date, df.R2)\nplt.plot(df.Date, df.R3)\nplt.plot(df.Date, df.M1)\nplt.plot(df.Date, df.M2)\nplt.plot(df.Date, df.M3)\nplt.plot(df.Date, df.P1)\nplt.plot(df.Date, df.P2)\nplt.plot(df.Date, df.P3)\nplt.plot(df.Date, df.D1)\nplt.title('All Price')\nplt.xlabel('Date')\nplt.ylabel('Price')\nplt.legend(['A1','A2','A3','R1','R2','R3','M1','M2','M3','P1','P2','P3','D1'])\nplt.figure(figsize=(15,15))\nplt.show()","232ad977":"df['avg'] = df.A1 + df.A2 + df.A3 + df.R1 + df.R2 + df.R3 + df.M1 + df.M2 + df.M3 + df.P1 + df.P2 + df.P3 + df.D1\ndf.avg = df.avg \/ 13\ndf","624f6b84":"df.plot(x='Date',y='avg')","7f977137":"df['Rol5'] = df.avg.rolling(5).mean()\ndf['Rol20'] = df.avg.rolling(20).mean()\ndf['Rol3'] = df.avg.rolling(3).mean()\ndf = df.dropna()\ndf","8e3a9327":"df.plot(x='Date',y='Rol5')","ec1f65f4":"df.plot(x='Date',y='Rol3')","0ba2ea8c":"df.plot(x='Date',y='Rol20')","dde19d0e":"df['Rol50'] = df.avg.rolling(100).mean()\ndf.dropna().plot(x='Date',y='Rol50')","86f092bd":"plt.plot(df.Date, df.Rol50)\nplt.plot(df.Date, df.avg)\nplt.show()","a436a368":"dateTest = '2012-01-04'\n# df.loc[df['Host'] == 'a', 'Port'].item()\ny1 = df.loc[df.Date < dateTest, 'Rol50'].tail(1).item()\ny2 = df.loc[df.Date >= dateTest, 'Rol50'].head(1).item()\nm = y2 - y1\npred = df.loc[df.Date >= dateTest, 'Rol50'].head(2).tail(1).item()\ndf['slopePred'] = df.Rol50 + m\ndf","08303235":"df.slopePred = df.Rol50.diff()\ndf","ef9e4d6b":"df.slopePred = df.Rol50 + df.slopePred","ff31ddfa":"plt.plot(df.Date, df.Rol50)\nplt.plot(df.Date, df.avg)\nplt.plot(df.Date, df.slopePred)\nplt.show()","4e7cd4cd":"df.Rol50.shift(1)","b6414fa4":"df.Rol50","c42281ed":"oilPred = df[['Date','avg','Rol50']]\noilPred = oilPred.dropna()\noilPred","10572f69":"oilPred.plot(x='Date',y='avg')","9c0f20f6":"oilPred.plot(x='Date',y='Rol50')","be1ee6c2":"oilPred['Up'] = oilPred.Rol50.shift(1)\n# oilPred['Low'] = oilPred.Rol50.shift(-1)\noilPred","af98d49b":"oilPred['Dev1'] = oilPred.Rol50 - oilPred.Up\n# oilPred.slope = oilPred.slope \/ 2\noilPred['pred'] = oilPred.Rol50 + oilPred.Dev1\noilPred['pred'] = oilPred['pred'].shift(1)\noilPred['error'] = oilPred.Rol50 - oilPred.pred\noilPred","b158d9df":"oilPred.describe()","e7f991f4":"oilModelTest = oilPred[['Date','avg','Rol50']]\noilModelTest['Shift1'] = oilModelTest.Rol50.shift(1)\noilModelTest['Shift2'] = oilModelTest.Rol50.shift(2)\noilModelTest['Shift3'] = oilModelTest.Rol50.shift(3)\noilModelTest['Shift4'] = oilModelTest.Rol50.shift(4)\noilModelTest['Shift5'] = oilModelTest.Rol50.shift(5)\noilModelTest = oilModelTest.dropna()\noilModelTest","bac69420":"model = LinearRegression()\nx = oilModelTest[['Shift1','Shift2','Shift3','Shift4','Shift5']]\ny = oilModelTest.Rol50\ntrain_x, test_x, train_y, test_y = train_test_split(x, y)\nmodel.fit(train_x, train_y)\npredictions = model.predict( test_x )\n\nmean_absolute_error(test_y, predictions)","de6823cf":"model = LinearRegression()\nx = oilModelTest[['Shift1']]\ny = oilModelTest.Rol50\ntrain_x, test_x, train_y, test_y = train_test_split(x, y)\nmodel.fit(train_x, train_y)\npredictions = model.predict( test_x )\n\nmean_absolute_error(test_y, predictions)","ae4efc0e":"4.679743e-04 = 0.000468","ece4724a":"0.00035","d336a393":"0.005182"}}