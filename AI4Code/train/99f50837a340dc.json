{"cell_type":{"02dec394":"code","0c359288":"code","37d8cb99":"code","ddaf61ee":"code","7482e201":"code","2685fdf5":"code","c06e06ec":"code","587f3fee":"code","c6746c75":"code","852bf55b":"code","14ea3f28":"code","d86c4137":"code","dc078782":"code","b38338d7":"code","97ec42e4":"code","b951f731":"code","5c369b99":"code","479f8cce":"code","e2d409ec":"markdown","4654dd5b":"markdown","e1044391":"markdown","00b96eb4":"markdown","eb02c4ed":"markdown","dc2e0e68":"markdown","2123f3fa":"markdown","208bf1aa":"markdown","b73c3c64":"markdown","b0312a99":"markdown","60eb1517":"markdown","5a98e94b":"markdown"},"source":{"02dec394":"import pandas as pd\nimport random\n\nrandom.seed(33)\n\nfraction_users = 0.001\nsplit = 0.8","0c359288":"%%time \n\ndata = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                   dtype={'row_id': 'int64',\n                          'timestamp': 'int64',\n                          'user_id': 'int32',\n                          'content_id': 'int16',\n                          'content_type_id': 'int8',\n                          'task_container_id': 'int16',\n                          'user_answer': 'int8',\n                          'answered_correctly':'int8',\n                          'prior_question_elapsed_time': 'float32',\n                          'prior_question_had_explanation': 'boolean'\n                         })","37d8cb99":"users = data.user_id.unique()\nno_users_sample = int(round(len(users)*fraction_users,0))\n\nprint(f'no. of unique users: {len(users)}')\nprint(f'no. of users in sample: {no_users_sample}')\n\nusers = random.sample(list(users), no_users_sample)\nmask = data.user_id.isin(users)\ndata = data[mask]","ddaf61ee":"my_planet = data[['timestamp', 'user_id']].groupby('user_id').quantile(split).reset_index()","7482e201":"my_planet.head()","2685fdf5":"my_planet.columns = ['user_id', 'quartile']\ndata = pd.merge(data, my_planet)\n","c06e06ec":"mask = data['timestamp']>data['quartile']\ndata['mask'] = mask","587f3fee":"data['split'] = 'none'","c6746c75":"\ndata['split'].where(data['mask'] is True) = 'val'\n#data['split'][data['mask'] is False] = 'train'","852bf55b":"data.head()","14ea3f28":"%%time\n\n# https:\/\/stackoverflow.com\/questions\/20625582\/how-to-deal-with-settingwithcopywarning-in-pandas\npd.options.mode.chained_assignment = None\n\nfrom tqdm import tqdm\n\ndata['split'] = 'na'\n\nfor i in tqdm(range(len(data))):\n    current_user = data.user_id.iloc[i]\n    percentile = user_percentile[current_user]\n    if data.timestamp.iloc[i] <= percentile:\n        data.at[i, split] = 'train'\n    else:\n        data.at[i, split] = 'val'\n","d86c4137":"train = data[data.split == 'train']\nval = data[data.split == 'val']\n\ntrain = train.drop('split', axis=1)\nval = val.drop('split', axis=1)","dc078782":"print(f'no. of users in train: {len(train.user_id.unique())}')\nprint(f'no. of users in val: {len(val.user_id.unique())}')\nprint('-> should be the same')\nprint(f'no. of records in train: {len(train)}')\nprint(f'no. of records in val: {len(val)}')","b38338d7":"train_ids = set(train['user_id'].unique())\nval_ids = set(val['user_id'].unique()) \ncnt=0\n\nmissing_ids = train_ids - val_ids\n\nfor id in missing_ids:\n    print(data[['timestamp', 'user_id']][data['user_id']==id])","97ec42e4":"train = train[~train.user_id.isin(missing_ids)]","b951f731":"print(f'no. of users in train: {len(train.user_id.unique())}')\nprint(f'no. of users in val: {len(val.user_id.unique())}')\nprint('-> should be the same')\nprint(f'no. of records in train: {len(train)}')\nprint(f'no. of records in val: {len(val)}')","5c369b99":"valid_question = val[val.content_type_id == 0]\ntrain_question = train[train.content_type_id == 0]\n\nprint(f'accuracy of answering in train: {round(train_question.answered_correctly.mean(), 2)} (stdev={round(train_question.answered_correctly.std(), 2)})')\nprint(f'accuracy of answering in val: {round(valid_question.answered_correctly.mean(), 2)} (stdev={round(valid_question.answered_correctly.std(), 2)})')","479f8cce":"train.to_csv(f'\/kaggle\/working\/train_{int(fraction_users*100)}percent.csv')\nval.to_csv(f'\/kaggle\/working\/val_{int(fraction_users*100)}percent.csv')","e2d409ec":"check again","4654dd5b":"interesting that there are a number of entries with equal timestamp for this user. But for now let us remove them just from train, val","e1044391":"\nthank you, tito, https:\/\/www.kaggle.com\/its7171\/cv-strategy for valuable insights","00b96eb4":"take a subset of users","eb02c4ed":"**Have a (random) subset of users' data to enable quick model experiments, split into train, val w\/o much hassle**\n\nprinciples:\n* keep each user's time course healthy, i.e. do not downsample for the sake of smaller data\n* first part of time course should go into train - remaining part into val\n* across users, have a fixed portion go into train and val, respectively","dc2e0e68":"oops - what's this?","2123f3fa":"split","208bf1aa":"get xth percentile of timestamp, to prepare split","b73c3c64":"mark rows with train, val flag","b0312a99":"write train, val to csv files","60eb1517":"look at mean, standard deviation","5a98e94b":"check properties for train and val"}}