{"cell_type":{"cbe9b983":"code","cc09683e":"code","d23b34d4":"code","b1646ee2":"code","0527f608":"code","09060c7a":"code","4174d798":"code","0e4b0e7a":"code","20500efb":"code","8abc1fe8":"code","4d6e4555":"code","0aec2b45":"code","9d42e7ad":"code","a1471994":"code","40c5c004":"code","a98843ee":"code","13291664":"code","e1b812aa":"code","12f7feab":"code","0ccc0ac0":"code","4fd6d420":"code","15e4c80b":"code","86125ce7":"code","c004a03a":"code","41593752":"code","2283299f":"code","0b176bae":"code","e1fe9620":"code","f8e28915":"code","96e4272f":"code","c31e32aa":"code","172ce5b1":"code","588d0e08":"code","e1445867":"code","39c26bd4":"markdown","e8b40cc0":"markdown","e93f3b71":"markdown","ac4b8382":"markdown","a0da4f82":"markdown"},"source":{"cbe9b983":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc09683e":"import matplotlib.pyplot as plt\nimport seaborn as sb","d23b34d4":"#importing dataset\ndataset = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\ndataset.head()","b1646ee2":"# Looking for null values\nprint(dataset.isnull().any())","0527f608":"dataset.shape","09060c7a":"dataset.describe()","4174d798":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('price distribution plot')\nsb.distplot(dataset.price,color ='darkblue')\n\nplt.subplot(1,2,2)\nplt.title('price  boxplot')\nax = sb.boxplot(y = dataset.price ,color = 'darkblue' )\n\n\nplt.show()","0e4b0e7a":"\n#scatterplot\ndataset.plot(kind='scatter', x='bedrooms', y='price', figsize=(10, 6), color='darkblue')\nplt.title('bedroooms vs price ')\nplt.xlabel('bedrooms')\nplt.ylabel('price')\n\nplt.show()\n\n#barplot\ndf = pd.DataFrame(dataset.groupby(['bedrooms'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(color = 'darkblue')\nplt.title('bedrooms vs Average price')\nplt.show()\n","20500efb":"#scatterplot\ndataset.plot(kind='scatter', x='bathrooms', y='price', figsize=(10, 6), color='darkblue')\nplt.title('bathrooms vs price ')\nplt.xlabel('bedrooms')\nplt.ylabel('price')\n\nplt.show()\n\n#barplot\ndf = pd.DataFrame(dataset.groupby(['bathrooms'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(color = 'darkblue')\nplt.title('bathrooms vs Average price')\nplt.show()","8abc1fe8":"x = dataset['sqft_living']      # year on x-axis\ny = dataset['price']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\nfit","4d6e4555":"\n#plotting scatterplot\n\n\ndataset.plot(kind='scatter', x ='sqft_living', y ='price', figsize=(10, 6), color='darkblue')\n\nplt.title('price vs sqft_living')\nplt.xlabel('sqft_living')\nplt.ylabel('price')\n\n# plot line of best fit\n\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()\n\n# print out the line of best fit\n'price = {0:.0f} * sqft_living + {1:.0f}'.format(fit[0], fit[1]) ","0aec2b45":"x = dataset['sqft_lot']      # year on x-axis\ny = dataset['price']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\nfit","9d42e7ad":"#plotting scatterplot\n\n\ndataset.plot(kind='scatter', x ='sqft_lot', y ='price', figsize=(10, 6), color='darkblue')\n\nplt.title('price vs sqft_lot')\nplt.xlabel('sqft_living')\nplt.ylabel('price')\n\n# plot line of best fit\n\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()\n\n# print out the line of best fit\n'price = {0:.0f} * sqft_lot + {1:.0f}'.format(fit[0], fit[1]) ","a1471994":"#scatterplot\ndataset.plot(kind='scatter', x='floors', y='price', figsize=(10, 6), color='darkblue')\nplt.title('floors vs price ')\nplt.xlabel('floors')\nplt.ylabel('price')\n\nplt.show()\n\n#barplot\ndf = pd.DataFrame(dataset.groupby(['floors'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(color = 'darkblue')\nplt.title('floors vs Average price')\nplt.show()\n\n#histogram_for_frequency\n# np.histogram returns 2 values\ncount, bin_edges = np.histogram(dataset['floors'])\n\ndataset['floors'].plot(kind='hist', figsize=(8, 5),color = 'darkblue')\n\n\nplt.title('frquency of houses with diff no. of floors') # add a title to the histogram\nplt.ylabel('frequency') # add y-label\nplt.xlabel('floors') # add x-label\n\nplt.show()\n\n","40c5c004":"plt.figure(figsize=(25, 6))\n\n\nplt.subplot(1,3,1)\n#boxplot to calculate range of houses with and without waterfront\nsb.boxplot(x=dataset['waterfront'],y=dataset['price'])\nplt.show()\n\nplt.subplot(1,1,1)\n#histogram_for_frequency\n# np.histogram returns 2 values\ncount, bin_edges = np.histogram(dataset['waterfront'])\ndataset['waterfront'].plot(kind='hist', figsize=(8, 5),color = 'darkblue')\nplt.title('frquency of houses with and without waterfront') # add a title to the histogram\nplt.ylabel('frequency') # add y-label\nplt.xlabel('waterfront') # add x-label\n\nplt.show()","a98843ee":"plt.figure(figsize=(25, 6))\n\n\nplt.subplot(1,3,1)\n#boxplot to calculate range of houses with and without waterfront\nsb.boxplot(x=dataset['view'],y=dataset['price'])\nplt.show()\n\n#plt.subplot(1,3,2)\n#barplot\ndf = pd.DataFrame(dataset.groupby(['view'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(color = 'darkblue')\nplt.title('view vs Average price')\nplt.show()\n\n","13291664":"#scatterplot\n#barplot\ndf = pd.DataFrame(dataset.groupby(['condition'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(color = 'darkblue')\nplt.title('view vs Average price')\nplt.show()\n\n\n\n#histogram_for_frequency\n# np.histogram returns 2 values\ncount, bin_edges = np.histogram(dataset['condition'])\ndataset['condition'].plot(kind='hist', figsize=(8, 5),color = 'darkblue')\nplt.title('frquency of houses with condition ranging from 0 to 5') # add a title to the histogram\nplt.ylabel('frequency') # add y-label\nplt.xlabel('condition') # add x-label\n\nplt.show()\n","e1b812aa":"fig=plt.figure(figsize=(19,12.5))\nax=fig.add_subplot(3,2,1, projection=\"3d\")\nax.scatter(dataset['floors'],dataset['bedrooms'],dataset['bathrooms'],c=\"darkblue\",alpha=.5)\nax.set(xlabel='\\nFloors',ylabel='\\nBedrooms',zlabel='\\nBathrooms \/ Bedrooms')\nax.set(ylim=[0,12])\n\nax=fig.add_subplot(3,2,2, projection=\"3d\")\nax.scatter(dataset['floors'],dataset['bedrooms'],dataset['sqft_living'],c=\"darkblue\",alpha=.5)\nax.set(xlabel='\\nFloors',ylabel='\\nBedrooms',zlabel='\\nsqft Living')\nax.set(ylim=[0,12])\n\nax=fig.add_subplot(3,2,3, projection=\"3d\")\nax.scatter(dataset['sqft_living'],dataset['sqft_lot'],dataset['bathrooms'],c=\"darkblue\",alpha=.5)\nax.set(xlabel='\\n sqft Living',ylabel='\\nsqft Lot',zlabel='\\nBathrooms \/ Bedrooms')\nax.set(ylim=[0,250000])\n\nax=fig.add_subplot(3,2,4, projection=\"3d\")\nax.scatter(dataset['sqft_living'],dataset['sqft_lot'],dataset['bedrooms'],c=\"darkblue\",alpha=.5)\nax.set(xlabel='\\n sqft Living',ylabel='\\nsqft Lot',zlabel='Bedrooms')\nax.set(ylim=[0,250000]);\n\nax=fig.add_subplot(3,2,5, projection=\"3d\")\nax.scatter(dataset['sqft_living'],dataset['sqft_lot'],dataset['condition'],c=\"darkblue\",alpha=.5)\nax.set(xlabel='\\n sqft Living',ylabel='\\nsqft Lot',zlabel='condition')\nax.set(ylim=[0,250000]);\n\n\n\nax=fig.add_subplot(3,2,6, projection=\"3d\")\nax.scatter(dataset['condition'],dataset['sqft_lot'],dataset['bedrooms'],c=\"darkblue\",alpha=.5)\nax.set(xlabel='\\ncondition',ylabel='\\nsqft Lot',zlabel='\\nBedrooms')\nax.set(ylim=[0,250000]);\n\n\n","12f7feab":"#scatterplot\n#barplot\ndf = pd.DataFrame(dataset.groupby(['grade'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(color = 'darkblue')\nplt.title('view vs Average price')\nplt.show()\n\n\n\n#histogram_for_frequency\n# np.histogram returns 2 values\ncount, bin_edges = np.histogram(dataset['grade'])\ndataset['grade'].plot(kind='hist', figsize=(8, 5),color = 'darkblue')\nplt.title('frquency of houses with condition ranging from 0 to 5') # add a title to the histogram\nplt.ylabel('frequency') # add y-label\nplt.xlabel('grade') # add x-label\n\nplt.show()","0ccc0ac0":"x = dataset['sqft_above']      # year on x-axis\ny = dataset['price']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\nfit","4fd6d420":"#plotting scatterplot\n\n\ndataset.plot(kind='scatter', x ='sqft_above', y ='price', figsize=(10, 6), color='darkblue')\n\nplt.title('price vs sqft_above')\nplt.xlabel('sqft_above')\nplt.ylabel('price')\n\n# plot line of best fit\n\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()\n\n# print out the line of best fit\n'price = {0:.0f} * sqft_above + {1:.0f}'.format(fit[0], fit[1]) ","15e4c80b":"x = dataset['sqft_basement']      # year on x-axis\ny = dataset['price']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\nfit","86125ce7":"#plotting scatterplot\n\n\ndataset.plot(kind='scatter', x ='sqft_basement', y ='price', figsize=(10, 6), color='darkblue')\n\nplt.title('price vs sqft_basement')\nplt.xlabel('sqft_basement')\nplt.ylabel('price')\n\n# plot line of best fit\n\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()\n\n# print out the line of best fit\n'price = {0:.0f} * sqft_basement + {1:.0f}'.format(fit[0], fit[1]) ","c004a03a":"fig=plt.figure(figsize=(19,12.5))\nax=fig.add_subplot(3,2,1, projection=\"3d\")\nax.scatter(dataset['sqft_above'],dataset['sqft_basement'],dataset['price'],c=\"darkblue\",alpha=.5)\nax.set(xlabel='sqft_above',ylabel='sqft_basement',zlabel='price')\nax.set(ylim=[0,25000])","41593752":"sb.distplot(dataset['yr_built'])\n","2283299f":"\ndataset.plot(kind='scatter', x ='yr_renovated', y ='price', figsize=(10, 6), color='darkblue')\n\nplt.title('price vs yr_renovated')\nplt.xlabel('yr_renovatedt')\nplt.ylabel('price')\n\n# plot line of best fit\n\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()\n\n# print out the line of best fit\n'price = {0:.0f} * yr_renovated + {1:.0f}'.format(fit[0], fit[1]) ","0b176bae":"str_list = [] # empty list to contain columns with strings (words)\nfor colname, colvalue in dataset.iteritems():\n    if type(colvalue[1]) == str:\n         str_list.append(colname)\n# Get to the numeric columns by inversion            \nnum_list = dataset.columns.difference(str_list) \n# Create Dataframe containing only numerical features\nhouse_num = dataset[num_list]\nf, ax = plt.subplots(figsize=(16, 12))\nplt.title('Pearson Correlation of features')\n# Draw the heatmap using seaborn\n#sns.heatmap(house_num.astype(float).corr(),linewidths=0.25,vmax=1.0, square=True, cmap=\"PuBuGn\", linecolor='k', annot=True)\nsb.heatmap(house_num.astype(float).corr(),linewidths=0.25,vmax=1.0, square=True, cmap=\"cubehelix\", linecolor='k', annot=True)","e1fe9620":"dataset.drop(['id', 'date','long','zipcode'], axis = 1, inplace = True)\ndataset.describe()","f8e28915":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nimport sklearn.metrics as metrics\n\ntrain_data, test_data = train_test_split(dataset, train_size =0.8, random_state = 3)\n\nfeatures1 = ['bedrooms','bathrooms','sqft_living','sqft_above','floors','waterfront','view','grade','sqft_above','sqft_basement','lat','sqft_living15']\n\n\npolyfeat = PolynomialFeatures(degree =2)\nxtrain_poly=polyfeat.fit_transform(train_data[features1])\nxtest_poly=polyfeat.fit_transform(test_data[features1])\n\npoly = LinearRegression()\npoly.fit(xtrain_poly,train_data['price'])\npredp= poly.predict(xtest_poly)\n\nprint('Polynomial Regression 2 ')\nmean_squared_error = metrics.mean_squared_error(test_data['price'], predp)\nprint('Mean Squared Error (MSE) ', round(np.sqrt(mean_squared_error), 2))\nprint('R-squared (training) ', round(poly.score(xtrain_poly, train_data['price']), 3))\nprint('R-squared (testing) ', round(poly.score(xtest_poly, test_data['price']), 3))","96e4272f":"print('Polynomial Regression 3')\n\npolyfeat = PolynomialFeatures(degree =3)\nxtrain_poly=polyfeat.fit_transform(train_data[features1])\nxtest_poly=polyfeat.fit_transform(test_data[features1])\n\npoly = LinearRegression()\npoly.fit(xtrain_poly,train_data['price'])\npredp= poly.predict(xtest_poly)\n\n\nmean_squared_error = metrics.mean_squared_error(test_data['price'], predp)\nprint('Mean Squared Error (MSE) ', round(np.sqrt(mean_squared_error), 2))\nprint('R-squared (training) ', round(poly.score(xtrain_poly, train_data['price']), 3))\nprint('R-squared (testing) ', round(poly.score(xtest_poly, test_data['price']), 3))","c31e32aa":"from sklearn.neighbors import KNeighborsRegressor\nknnreg = KNeighborsRegressor(n_neighbors=20)\nknnreg.fit(train_data[features1],train_data['price'])\npred = knnreg.predict(test_data[features1])\n\n\n\nmean_squared_error = metrics.mean_squared_error(test_data['price'], pred)\n\n\nprint('KNN regression')\nprint('Mean Squared Error (MSE) ', round(np.sqrt(mean_squared_error), 2))\nprint('R-squared (training)',float(format(knnreg.score(train_data[features1],train_data['price']),'.3f')))\nprint('R-squared(testing)', float(format(knnreg.score(test_data[features1],test_data['price']),'.3f')))\n# print('adjusted R-squared(training)',float(format(adjustedR2(knnreg.score(train_data[features1],train_data['Price']),test_data.shape[0],len(features1)),'.3f')))\n\n# print('adjusted R-squared(testing)',float(format(adjustedR2(knnreg.score(test_data[features1],test_data['Price']),test_data.shape[0],len(features1)),'.3f')))\n\n","172ce5b1":"from sklearn.svm import SVR\nsvr = SVR(kernel='rbf')\nsvr.fit(train_data[features1],train_data['price'])\npred = svr.predict(test_data[features1])\nprint('SVR')\nmean_squared_error = metrics.mean_squared_error(test_data['price'], pred)\nprint('Mean Squared Error (MSE) ', round(np.sqrt(mean_squared_error), 2))\nprint('R-squared (training)',float(format(svr.score(train_data[features1],train_data['price']),'.3f')))\nprint('R-squared(testing)', float(format(svr.score(test_data[features1],test_data['price']),'.3f')))","588d0e08":"\n# Fitting the random forest regression to the dataset\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 300 , random_state = 0)\nregressor.fit(train_data[features1],train_data['price'])\n# Predicting a new result\npred = regressor.predict(test_data[features1])\nprint('Random Forest Regression')\nmean_squared_error = metrics.mean_squared_error(test_data['price'], pred)\nprint('Mean Squared Error (MSE) ', round(np.sqrt(mean_squared_error), 2))\nprint('R-squared (training)',float(format(regressor.score(train_data[features1],train_data['price']),'.3f')))\nprint('R-squared(testing)', float(format(regressor.score(test_data[features1],test_data['price']),'.3f')))","e1445867":"# Fitting Decision Tree Regression to the dataset\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(train_data[features1],train_data['price'])\n\n# Predicting a new result\npred = regressor.predict(test_data[features1])\n\nprint('Decision Tree Regression')\nmean_squared_error = metrics.mean_squared_error(test_data['price'], pred)\nprint('Mean Squared Error (MSE) ', round(np.sqrt(mean_squared_error), 2))\nprint('R-squared (training)',float(format(regressor.score(train_data[features1],train_data['price']),'.3f')))\nprint('R-squared(testing)', float(format(regressor.score(test_data[features1],test_data['price']),'.3f')))","39c26bd4":"The data does not contain any null values","e8b40cc0":"Using the equation of line of best fit, we can estimate the price for any value of sqft_living by just putting the value and solving for it\n","e93f3b71":"The output is an array with the polynomial coefficients, highest powers first. Since we are plotting a linear regression y= a*x + b, our output has 2 elements ([7.94701446e-01, 5.28082613e+05]) with the the slope in position 0 and intercept in position 1.","ac4b8382":"The output is an array with the polynomial coefficients, highest powers first. Since we are plotting a linear regression y= a*x + b, our output has 2 elements ([   280.6235679 , -43580.74309447])  with the the slope in position 0 and intercept in position 1.","a0da4f82":"Hey there, welcome to my notebook."}}