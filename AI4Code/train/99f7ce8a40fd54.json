{"cell_type":{"980b1f21":"code","4f535f7d":"code","6c600d20":"code","a5b5dd29":"code","d7b11f52":"code","8d711e92":"code","b575e746":"code","b1e0d863":"code","cb5785e3":"code","eb879fe2":"code","8fede7e0":"code","767cd909":"code","90d34a2d":"code","2a0ad57f":"code","4e7bd061":"code","e856b12b":"code","ce1b682f":"code","b8bb6b2d":"code","482585f8":"code","4af70c7a":"code","bb78c5d3":"code","3d03d2c4":"code","2a8ec728":"code","5db005f9":"code","23152108":"code","e7bb532b":"code","ef9f49d4":"code","17c93e13":"code","1fa25dc1":"code","d1c852a5":"code","fad8ab55":"code","0fd59628":"code","9c6ed3d6":"code","77e407a2":"code","25f14977":"code","b3be2ddc":"code","d76c3df8":"code","890d0ff9":"code","eb28c199":"code","cc17a42f":"code","73dc95d6":"code","773c5914":"code","7b2eb2a9":"code","8824ec0e":"code","2d74a08f":"code","cb911933":"code","0e605825":"code","c02d176f":"code","0fc207ba":"code","c046bb14":"code","8c0e87ff":"code","a4b34dfd":"code","425fc663":"code","a8c40ce0":"code","bf1ba585":"markdown","3abe31e9":"markdown","56c57472":"markdown","6002c9f7":"markdown","be1878e0":"markdown","6ee1dbd6":"markdown","17241822":"markdown","b9b22909":"markdown","5e6ac999":"markdown","7341c88d":"markdown","fb98b232":"markdown","1b02b410":"markdown","851b65fc":"markdown","660db3fd":"markdown","09f91f28":"markdown","068c3139":"markdown","4aef4dc1":"markdown","acb857be":"markdown","0cb17583":"markdown","f96f942d":"markdown","e7b422e3":"markdown","ead5904c":"markdown","3cdd915d":"markdown","11649eef":"markdown","9b0760b5":"markdown","0ff58eb0":"markdown","066bc5d6":"markdown","e1ac317f":"markdown","16d3a549":"markdown","d6fd8e45":"markdown","7439fd13":"markdown","69477f48":"markdown","c7072f86":"markdown","0c4132a4":"markdown","b603ba9b":"markdown","c023c22b":"markdown","7761a5c1":"markdown","232a5385":"markdown","7df847ea":"markdown","32f4baf1":"markdown","c36af83c":"markdown"},"source":{"980b1f21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f535f7d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport re\n\nimport pickle \n#import mglearn\nimport time\n\n\nfrom nltk.tokenize import TweetTokenizer # doesn't split at apostrophes\nimport nltk\nfrom nltk import Text\nfrom nltk.tokenize import regexp_tokenize\nfrom nltk.tokenize import word_tokenize  \nfrom nltk.tokenize import sent_tokenize \nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem import PorterStemmer\n\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.multiclass import OneVsRestClassifier\n\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import make_pipeline\n","6c600d20":"txt = [\"He is ::having a great Time, at the park time?\",\n       \"She, unlike most women, is a big player on the park's grass.\",\n       \"she can't be going\"]","a5b5dd29":"# Initialize a CountVectorizer object: count_vectorizer\ncount_vec = CountVectorizer(stop_words=\"english\", analyzer='word', \n                            ngram_range=(1, 1), max_df=1.0, min_df=1, max_features=None)\n\n# Transforms the data into a bag of words\ncount_train = count_vec.fit(txt)\nbag_of_words = count_vec.transform(txt)\n\n# Print the first 10 features of the count_vec\nprint(\"Every feature:\\n{}\".format(count_vec.get_feature_names()))\nprint(\"\\nEvery 3rd feature:\\n{}\".format(count_vec.get_feature_names()[::3]))","d7b11f52":"print(\"Vocabulary size: {}\".format(len(count_train.vocabulary_)))\nprint(\"Vocabulary content:\\n {}\".format(count_train.vocabulary_))","8d711e92":"count_vec = CountVectorizer(stop_words=\"english\", analyzer='word', \n                            ngram_range=(1, 2), max_df=1.0, min_df=1, max_features=None)\n\ncount_train = count_vec.fit(txt)\nbag_of_words = count_vec.transform(txt)\n\nprint(count_vec.get_feature_names())","b575e746":"count_vec = CountVectorizer(stop_words=\"english\", analyzer='word', \n                            ngram_range=(1, 3), max_df=1.0, min_df=1, max_features=None)\n\ncount_train = count_vec.fit(txt)\nbag_of_words = count_vec.transform(txt)\n\nprint(count_vec.get_feature_names())","b1e0d863":"count_vec = CountVectorizer(stop_words=\"english\", analyzer='word', \n                            ngram_range=(1, 1), max_df=1.0, min_df=0.6, max_features=None)\n\ncount_train = count_vec.fit(txt)\nbag_of_words = count_vec.transform(txt)\n\nprint(count_vec.get_feature_names())\nprint(\"\\nOnly 'park' becomes the vocabulary of the document term matrix (dtm) because it appears in 2 out of 3 documents, \\\nmeaning 0.66% of the time.\\\n      \\nThe rest of the words such as 'big' appear only in 1 out of 3 documents, meaning 0.33%. which is why they don't appear\")","cb5785e3":"count_vec = CountVectorizer(stop_words=\"english\", analyzer='word', \n                            ngram_range=(1, 1), max_df=0.50, min_df=1, max_features=None)\n\ncount_train = count_vec.fit(txt)\nbag_of_words = count_vec.transform(txt)\n\nprint(count_vec.get_feature_names())\nprint(\"\\nOnly 'park' is ignored because it appears in 2 out of 3 documents, meaning 0.66% of the time.\")","eb879fe2":"count_vec = CountVectorizer(stop_words=\"english\", analyzer='word', \n                            ngram_range=(1, 1), max_df=1.0, min_df=1, max_features=4)\n\ncount_train = count_vec.fit(txt)\nbag_of_words = count_vec.transform(txt)\n\nprint(count_vec.get_feature_names())","8fede7e0":"txt1 = ['His smile was not perfect', 'His smile was not not not not perfect', 'she not sang']\ntf = TfidfVectorizer(smooth_idf=False, sublinear_tf=False, norm=None, analyzer='word')\ntxt_fitted = tf.fit(txt1)\ntxt_transformed = txt_fitted.transform(txt1)\nprint (\"The text: \", txt1)","767cd909":"tf.vocabulary_","90d34a2d":"idf = tf.idf_\nprint(dict(zip(txt_fitted.get_feature_names(), idf)))\nprint(\"\\nWe see that the tokens 'sang','she' have the most idf weight because \\\nthey are the only tokens that appear in one document only.\")\nprint(\"\\nThe token 'not' appears 6 times but it is also in all documents, so its idf is the lowest\")","2a0ad57f":"rr = dict(zip(txt_fitted.get_feature_names(), idf))","4e7bd061":"token_weight = pd.DataFrame.from_dict(rr, orient='index').reset_index()\ntoken_weight.columns=('token','weight')\ntoken_weight = token_weight.sort_values(by='weight', ascending=False)\ntoken_weight \n\nsns.barplot(x='token', y='weight', data=token_weight)            \nplt.title(\"Inverse Document Frequency(idf) per token\")\nfig=plt.gcf()\nfig.set_size_inches(10,5)\nplt.show()","e856b12b":"# get feature names\nfeature_names = np.array(tf.get_feature_names())\nsorted_by_idf = np.argsort(tf.idf_)\nprint(\"Features with lowest idf:\\n{}\".format(\n       feature_names[sorted_by_idf[:3]]))\nprint(\"\\nFeatures with highest idf:\\n{}\".format(\n       feature_names[sorted_by_idf[-3:]]))","ce1b682f":"print(\"The token 'not' has  the largest weight in document #2 because it appears 3 times there. But in document #1\\\n its weight is 0 because it does not appear there.\")\ntxt_transformed.toarray()","b8bb6b2d":"new1 = tf.transform(txt1)\n\n# find maximum value for each of the features over all of dataset:\nmax_val = new1.max(axis=0).toarray().ravel()\n\n#sort weights from smallest to biggest and extract their indices \nsort_by_tfidf = max_val.argsort()\n\nprint(\"Features with lowest tfidf:\\n{}\".format(\n      feature_names[sort_by_tfidf[:3]]))\n\nprint(\"\\nFeatures with highest tfidf: \\n{}\".format(\n      feature_names[sort_by_tfidf[-3:]]))","482585f8":"train = pd.read_csv('\/kaggle\/input\/encoded-train\/encoded_train.csv')\nholdout = pd.read_csv('\/kaggle\/input\/health-data\/Test_health.csv')\nsub = pd.read_csv('\/kaggle\/input\/health-data\/ss_health.csv')","4af70c7a":"train = pd.read_csv('\/kaggle\/input\/encoded-train\/encoded_train.csv')\nholdout = pd.read_csv('\/kaggle\/input\/health-data\/Test_health.csv').fillna(' ')","bb78c5d3":"\"\"\"Lemmatizing and stemming gives us a lower ROC-AUC score. So we will only clean \\\\n's, Username, IP and http links\"\"\"\n\nstart_time=time.time()\n# remove '\\\\n'\ntrain['text'] = train['text'].map(lambda x: re.sub('\\\\n',' ',str(x)))\n    \n# remove any text starting with User... \ntrain['text'] = train['text'].map(lambda x: re.sub(\"\\[\\[User.*\",'',str(x)))\n    \n# remove IP addresses or user IDs\ntrain['text'] = train['text'].map(lambda x: re.sub(\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\",'',str(x)))\n    \n#remove http links in the text\ntrain['text'] = train['text'].map(lambda x: re.sub(\"(http:\/\/.*?\\s)|(http:\/\/.*)\",'',str(x)))\n\nend_time=time.time()\nprint(\"total time\",end_time-start_time)","3d03d2c4":"# remove '\\\\n'\nholdout['text'] = holdout['text'].map(lambda x: re.sub('\\\\n',' ',str(x)))\n    \n# remove any text starting with User... \nholdout['text'] = holdout['text'].map(lambda x: re.sub(\"\\[\\[User.*\",'',str(x)))\n    \n# remove IP addresses or user IDs\nholdout['text'] = holdout['text'].map(lambda x: re.sub(\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\",'',str(x)))\n    \n#remove http links in the text\nholdout['text'] = holdout['text'].map(lambda x: re.sub(\"(http:\/\/.*?\\s)|(http:\/\/.*)\",'',str(x)))","2a8ec728":"x = train['text']\ny = train.iloc[:, 2:6]  ","5db005f9":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state=13)","23152108":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","e7bb532b":"# Instantiate the vectorizer\nword_vectorizer = TfidfVectorizer(\n    stop_words='english',\n    sublinear_tf=True,\n    strip_accents='unicode',\n    analyzer='word',\n    token_pattern=r'\\w{2,}',  #vectorize 2-character words or more\n    ngram_range=(1, 1),\n    max_features=30000)\n\n# fit and transform on it the training features\nword_vectorizer.fit(X_train)\nX_train_word_features = word_vectorizer.transform(X_train)\n\n#transform the test features to sparse matrix\ntest_features = word_vectorizer.transform(X_test)\n\n# transform the holdout text for submission at the end\nholdout_text = holdout['text']\nholdout_word_features = word_vectorizer.transform(holdout_text)","ef9f49d4":"class_names = ['Depression','Alcohol','Suicide','Drugs']\n\nlosses = []\nauc = []\n\nfor class_name in class_names:\n    #call the labels one column at a time so we can run the classifier on them\n    train_target = y_train[class_name]\n    test_target = y_test[class_name]\n    classifier = LogisticRegression(solver='sag', C=10)\n\n    cv_loss = np.mean(cross_val_score(classifier, X_train_word_features, train_target, cv=5, scoring='neg_log_loss'))\n    losses.append(cv_loss)\n    print('CV Log_loss score for class {} is {}'.format(class_name, cv_loss))\n\n    cv_score = np.mean(cross_val_score(classifier, X_train_word_features, train_target, cv=5, scoring='accuracy'))\n    print('CV Accuracy score for class {} is {}'.format(class_name, cv_score))\n    \n    classifier.fit(X_train_word_features, train_target)\n    y_pred = classifier.predict(test_features)\n    y_pred_prob = classifier.predict_proba(test_features)[:, 1]\n    auc_score = metrics.roc_auc_score(test_target, y_pred_prob)\n    auc.append(auc_score)\n    print(\"CV ROC_AUC score {}\\n\".format(auc_score))\n    \n    print(confusion_matrix(test_target, y_pred))\n    print(classification_report(test_target, y_pred))\n\nprint('Total average CV Log_loss score is {}'.format(np.mean(losses)))\nprint('Total average CV ROC_AUC score is {}'.format(np.mean(auc)))\n","17c93e13":"x = train['text']\ny = train.iloc[:, 2:8]  \nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state=13)","1fa25dc1":"start_time=time.time()\n\npipe = make_pipeline(TfidfVectorizer(\n                                    stop_words='english',\n                                    strip_accents='unicode',\n                                    token_pattern=r'\\w{1,}', #accept tokens that have 1 or more characters\n                                    analyzer='word',\n                                    ngram_range=(1, 1),\n                                    min_df=5),\n                     OneVsRestClassifier(LogisticRegression()))\nparam_grid = {'tfidfvectorizer__max_features': [10000, 30000],\n              'onevsrestclassifier__estimator__solver': ['liblinear', 'sag'],\n             } \ngrid = GridSearchCV(pipe, param_grid, cv=3, scoring='roc_auc')\n\ngrid3 = grid.fit(X_train, y_train)\n\nend_time=time.time()\nprint(\"total time\",end_time-start_time)","d1c852a5":"# Save classifier to a file\n\n#save_classif = open(\"Tfidf_LogR_3.pickle\", 'wb')   #wb= write in bytes. \n#pickle.dump(grid3, save_classif)   #use pickle to dump the grid3 we trained, as 'Tfidf_LogR.pickle' in wb format\n#save_classifier.close() ","fad8ab55":"# Retrieve the saved file and uplaod it to an object\n\n# vec = open(\"Tfidf_LogR_3.pickle\", 'rb') # rb= read in bytes\n# grid3 = pickle.load(vec)\n# vec.close()","0fd59628":"print(grid3.best_estimator_.named_steps['onevsrestclassifier'])\nprint(grid3.best_estimator_.named_steps['tfidfvectorizer'])","9c6ed3d6":"grid3.best_params_","77e407a2":"grid3.best_score_","25f14977":"predicted_y_test = grid3.predict(X_test)","b3be2ddc":"print(\"Depression Confusion Matrixs: \\n{}\".format(confusion_matrix(y_test['Depression'], predicted_y_test[:,0])))\nprint(\"\\nAlcohol: \\n{}\".format(confusion_matrix(y_test['Alcohol'], predicted_y_test[:,1])))\nprint(\"\\nSuicide: \\n{}\".format(confusion_matrix(y_test['Suicide'], predicted_y_test[:,2])))\nprint(\"\\nDrugs: \\n{}\".format(confusion_matrix(y_test['Drugs'], predicted_y_test[:,3])))\n#print(\"\\nInsult: \\n{}\".format(confusion_matrix(y_test['insult'], predicted_y_test[:,4])))\n#print(\"\\nIdentity Hate: \\n{}\".format(confusion_matrix(y_test['identity_hate'], predicted_y_test[:,5])))\n\nprint(\"\\nDepression Classification report: \\n{}\".format(classification_report(y_test['Depression'], predicted_y_test[:,0])))\nprint(\"\\nAlcohol: \\n{}\".format(classification_report(y_test['Alcohol'], predicted_y_test[:,1])))\nprint(\"\\nSuicide: \\n{}\".format(classification_report(y_test['Suicide'], predicted_y_test[:,2])))\nprint(\"\\nDrugs: \\n{}\".format(classification_report(y_test['Drugs'], predicted_y_test[:,3])))\n#print(\"\\nInsult: \\n{}\".format(classification_report(y_test['insult'], predicted_y_test[:,4])))\n#print(\"\\nIdentity Hate: \\n{}\".format(classification_report(y_test['identity_hate'], predicted_y_test[:,5])))\n","d76c3df8":" #grid3.cv_results_","890d0ff9":"vectorizer = grid3.best_estimator_.named_steps[\"tfidfvectorizer\"]\n# transform the training dataset:\nX_test_set = vectorizer.transform(X_test)\n\n\n# find maximum value for each of the features over dataset:\nmax_value = X_test_set.max(axis=0).toarray().ravel()\nsorted_by_tfidf = max_value.argsort()\n\n# get feature names\nfeature_names = np.array(vectorizer.get_feature_names())\n\nprint(\"Features with lowest tfidf:\\n{}\".format(\n      feature_names[sorted_by_tfidf[:20]]))\n\nprint(\"\\nFeatures with highest tfidf: \\n{}\".format(\n      feature_names[sorted_by_tfidf[-20:]]))","eb28c199":"sorted_by_idf = np.argsort(vectorizer.idf_)\nprint(\"Features with lowest idf:\\n{}\".format(\n       feature_names[sorted_by_idf[:100]]))","cc17a42f":"# print(y_train.columns)\n# print(\"\\n-Columns are ordered as above, which is why coef_[0] refers to toxic and coef_[5] refers to identity hate.\")\n# print(\"-The blue bars refer to the label (toxic here) and the red refer to Not toxic\")\n# mglearn.tools.visualize_coefficients(\n#     grid3.best_estimator_.named_steps[\"onevsrestclassifier\"].coef_[0],\n#     feature_names, n_top_features=40)","73dc95d6":"# mglearn.tools.visualize_coefficients(\n#     grid3.best_estimator_.named_steps[\"onevsrestclassifier\"].coef_[1],\n#     feature_names, n_top_features=40)","773c5914":"# mglearn.tools.visualize_coefficients(\n#     grid3.best_estimator_.named_steps[\"onevsrestclassifier\"].coef_[5],\n#     feature_names, n_top_features=40)","7b2eb2a9":"holdout_comments = holdout['text']\n# holdoutComments are automatically transformed throguh the grid3 pipeline before prodicting probabilities\ntwod = grid3.predict_proba(holdout_comments)","8824ec0e":"holdout_predictions = {}\nholdout_predictions = {'ID': holdout['ID']}  \n\nholdout_predictions['Depression']=twod[:,0]\nholdout_predictions['Alcohol']=twod[:,1]\nholdout_predictions['Suicide']=twod[:,2]\nholdout_predictions['Drugs']=twod[:,3]\n#holdout_predictions['insult']=twod[:,4]\n#holdout_predictions['identity_hate']=twod[:,5]\n    \nsubmission = pd.DataFrame.from_dict(holdout_predictions)\nsubmission = submission[['ID','Depression','Alcohol','Suicide','Drugs']] #rearrange columns\nsubmission.to_csv('submission.csv', index=False)","2d74a08f":"# calculate lenght of characters in each comment\ntrain['len_character'] = train['text'].apply(lambda x: len(re.findall(r\"[\\w]\", str(x))))","cb911933":"from sklearn.preprocessing import FunctionTransformer\nfrom sklearn.pipeline import FeatureUnion #unites all arrays into one array\nfrom sklearn.pipeline import Pipeline","0e605825":"x = train[['text','len_character']] #these will be our features\ny = train.iloc[:, 2:6]  \nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state=13)","c02d176f":"# Preprocess the numeric data: get_numeric_data\nget_numeric_data = FunctionTransformer(lambda a: a[['len_character']], validate=False)\nget_text_data = FunctionTransformer(lambda a: a['text'], validate=False)\n\nprint(get_text_data.fit_transform(X_train).shape)\nprint(get_numeric_data.fit_transform(X_train).shape)","0fc207ba":"pl = Pipeline([\n        ('union', FeatureUnion(                      #unites both text and numeric arrays into one array\n            transformer_list = [\n                ('numeric_features', Pipeline([\n                    ('selector', get_numeric_data)\n                ])),\n                ('text_features', Pipeline([\n                    ('selector', get_text_data),\n                    ('vectorizer', TfidfVectorizer(\n                                                    stop_words='english',\n                                                    strip_accents='unicode',\n                                                    token_pattern=r'\\w{2,}',\n                                                    analyzer='word',\n                                                    ngram_range=(1, 1),\n                                                    min_df=5))\n                ]))\n             ]\n        )), #right here is where we would put interaction terms preprocessing such as PolynomialFeatures\n            #(right here is where we would put a scaler if we needed one)\n        ('clf', OneVsRestClassifier(LogisticRegression())) \n    ])","c046bb14":"param_grid = {'union__text_features__vectorizer__max_features': [10000, 30000],\n              'clf__estimator__C': [0.1, 1]\n             } \ngrid = GridSearchCV(pl, param_grid, cv=3, scoring='roc_auc')\n\ngrid4 = grid.fit(X_train, y_train)","8c0e87ff":"# # Pickle grid4 to your computer\n#dill: this is necessary in order for pickle to save grid4 which has a lambda function inside of it.\nimport dill as pickled\n\n# save_grid4 = open(\"Tfidf_LogR_4.pickle\", 'wb') #wb= write in bytes. 'Tfidf_LogR.pickle' is the name of the file saved\n# pickled.dump(grid4, save_grid4) #use pickle to dump the grid1 we trained as 'Tfidf_LogR.pickle' in wb format\n# save_grid4.close() ","a4b34dfd":"import dill as pickled\n# Retrieve the saved file and uplaod it to an object\n\n# vec4 = open(\"Tfidf_LogR_4.pickle\", 'rb') # rb= read in bytes\n# grid4 = pickled.load(vec4)\n# vec4.close()","425fc663":"print(grid4.best_score_)\nprint(grid4.best_params_)\nprint(grid4.estimator)","a8c40ce0":"pred_y_test = grid4.predict(X_test)\n\nprint(\"Depression Confusion Matrixs: \\n{}\".format(confusion_matrix(y_test['Depression'], pred_y_test[:,0])))\nprint(\"\\nAlcohol: \\n{}\".format(confusion_matrix(y_test['Alcohol'], pred_y_test[:,1])))\nprint(\"\\nSuicide: \\n{}\".format(confusion_matrix(y_test['Suicide'], pred_y_test[:,2])))\nprint(\"\\nDrugs: \\n{}\".format(confusion_matrix(y_test['Drugs'], pred_y_test[:,3])))\n#print(\"\\nInsult: \\n{}\".format(confusion_matrix(y_test['insult'], pred_y_test[:,4])))\n#print(\"\\nIdentity Hate: \\n{}\".format(confusion_matrix(y_test['identity_hate'], pred_y_test[:,5])))\n\nprint(\"\\nDepression Classification report: \\n{}\".format(classification_report(y_test['Depression'], pred_y_test[:,0])))\nprint(\"\\nAlcohol: \\n{}\".format(classification_report(y_test['Alcohol'], pred_y_test[:,1])))\nprint(\"\\nSuicide: \\n{}\".format(classification_report(y_test['Suicide'], pred_y_test[:,2])))\nprint(\"\\nDrugs: \\n{}\".format(classification_report(y_test['Drugs'], pred_y_test[:,3])))\n#print(\"\\nInsult: \\n{}\".format(classification_report(y_test['insult'], pred_y_test[:,4])))\n#print(\"\\nIdentity Hate: \\n{}\".format(classification_report(y_test['identity_hate'], pred_y_test[:,5])))\n","bf1ba585":"**Limit the amount of features (vocabulary) that the vectorizer will learn**","3abe31e9":"**Vocabulary and vocabulary ID**","56c57472":"formula used: \ntf-idf(d, t) = tf(t) * idf(d, t)\n                * tf(t)= the term frequency is the number of times the term appears in the document\n                * idf(d, t) = the document frequency is the number of documents 'd' that contain term 't'","6002c9f7":"**Train**","be1878e0":"# Bonus: Adding features to pipeline","6ee1dbd6":"# Pickle the classifier","17241822":"Divide features into numeric and text features, so we can feed into the pipeline later","b9b22909":"The learned corpus vocabulary","5e6ac999":"*    CountVectorizer can lowercase letters, disregard punctuation and stopwords, but it can't LEMMATIZE or STEM","7341c88d":"# Min_df","fb98b232":"Graphing inverse document frequency","1b02b410":"# Max_features","851b65fc":"# Classify \n* Run a Logistic regression on each label separately","660db3fd":"We see that our recall is the lowest with severely toxic, threats, and identity_ hate comments. Perhaps if we had a higher number of comments (more data) in those categories, our classifier would do better","09f91f28":"**When building the vocabulary, it ignores terms that have a document frequency strictly higher than the given threshold. This could be used to exclude terms that are too frequent and are unlikely to help predict the label. For example, by analyzing reviews on the movie Lion King, the term 'Lion' might appear in 90% of the reviews (documents), in which case, we could consider establishing Max_df=0.89**","068c3139":"**TF-IDF** - Maximum token value throughout the whole dataset","4aef4dc1":"# Submission","acb857be":"**Weight of tokens per document**","0cb17583":"* Identity Hate","f96f942d":"# Clean, Train, Vectorize, Classify Toxic Comments (w\/o parameter tuning)","e7b422e3":"Cleaning HOLDOUT text","ead5904c":"# CountVectorizer ","3cdd915d":"Use Pickle to save files, documents, trained algorithms, etc., on your computer. In this case, we are saving our PC's processor the time it would take it to fit and transform all the text and run a logistic regression(345 seconds).","11649eef":"# Vectorize, Classify (with parameter tuning)","9b0760b5":"**Sometimes min_df is used to limit the vocabulary size, so it learns only those terms that appear in at least 10%, 20%, etc. of the documents.**","0ff58eb0":"* Summary: the more times a token appears in a document, the more weight it will have. However, the more documents the token appears in, it is 'penalized' and the weight is diminished. For example, the weight for token 'not' is 4, but if it did not appear in all documents (that is, only in one document) its weight would have been 8.3","066bc5d6":"* Severe toxic","e1ac317f":"# Analysis","16d3a549":"# Graphing coefficients of tokens in BNBR text comments","d6fd8e45":"**Clean Train text**","7439fd13":"Listing (instead of graphing) inverse document frequency","69477f48":"* N=3","c7072f86":"This would work only once you downlaod the mglearn library, as it does not exist on Kaggle. Many thanks to Andreas Mueller. This is his work and code: https:\/\/github.com\/amueller\/introduction_to_ml_with_python\/blob\/master\/07-working-with-text-data.ipynb \n* Toxic","0c4132a4":"**Features in Bag of Words**","b603ba9b":"# Max_df","c023c22b":"**Min_df ignores terms that have a document frequency (presence in % of documents) strictly lower than the given threshold. For example, Min_df=0.66 requires that a term appear in 66% of the docuemnts for it to be considered part of the vocabulary.","7761a5c1":"The goal of using tf-idf is to scale down the impact of tokens that occur very frequently in a given corpus and that are hence empirically less informative than features that occur in a small fraction of the training corpus. (https:\/\/github.com\/scikit-learn\/scikit-learn\/blob\/a24c8b46\/sklearn\/feature_extraction\/text.py#L1365)","232a5385":"# TfidfVectorizer -- Brief Tutorial","7df847ea":"# N-grams (sets of consecutive words)\n* N=2","32f4baf1":"**IDF:** The inverse document frequency","c36af83c":"**Vectorize**"}}