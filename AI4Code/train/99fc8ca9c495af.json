{"cell_type":{"8bc0c824":"code","c1e7c965":"code","b8193fe8":"code","5e9d3a44":"code","1538a764":"code","c337644c":"code","9bc4d674":"code","a19cb5b7":"code","a4c14d63":"code","68cba607":"code","a33a1d4f":"code","eb8362f1":"code","2c2465b1":"code","345f4017":"code","c812a43d":"markdown","38d54599":"markdown","087f369a":"markdown","d7d0fa46":"markdown","d6c20b8d":"markdown","d6269dbc":"markdown","5cee5b38":"markdown","79da5429":"markdown","05f7d5a0":"markdown","2a9c4cd9":"markdown","90ab6001":"markdown"},"source":{"8bc0c824":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1e7c965":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom statsmodels.api import Logit\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","b8193fe8":"data = pd.read_csv(\"\/kaggle\/input\/autoprice\/dataset_2193_autoPrice.csv\")\ndata.head()","5e9d3a44":"data.info()","1538a764":"plt.figure(figsize=(10,6))\n\nheatmap = sns.heatmap(data.corr(), vmin=-1,vmax=1, annot=True, cmap='viridis')\n\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12)\nplt.show()","c337644c":"Predictors = data[data.columns.values.tolist()[0:-1]]\nTarget = data[['class']]","9bc4d674":"corr_mat = Predictors.corr()\n\neig_vals, eig_vectors = np.linalg.eig(corr_mat)\n\ntotal_sum = sum(eig_vals)\nvar_exp = [(i\/total_sum)*100 for i in eig_vals]\ncum_var_exp = np.cumsum(var_exp)\n\nwith plt.style.context('dark_background'):\n    plt.figure(figsize=(16,9))\n    plt.bar(range(15),cum_var_exp, label='Cummulative Variance Explained for components')\n    plt.xlabel('Principal Components')\n    plt.ylabel('Cummulative Variance Explained')\n    plt.legend(loc=(0,0.9))\n    for i in range(15):\n        plt.text(x = i-0.5 , y = cum_var_exp[i]+1, s = '{:.2f}'.format(cum_var_exp[i]), size = 12)\n","a19cb5b7":"acp = PCA(n_components=9)\nPCA_Predictors = acp.fit_transform(Predictors)","a4c14d63":"PCA_Predictors = pd.DataFrame(PCA_Predictors)\nPCA_Predictors.head()","68cba607":"plt.figure(figsize=(10,6))\n\nheatmap = sns.heatmap(PCA_Predictors.corr(), vmin=-1,vmax=1, annot=True, cmap='viridis')\n\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12)\nplt.show()","a33a1d4f":"X_tr, X_tst, Y_tr, Y_tst = train_test_split(PCA_Predictors,Target,test_size=0.25, shuffle=True, random_state=0)","eb8362f1":"KNN_m = KNeighborsRegressor()\n\nKNN_m.fit(X_tr,Y_tr)\n\nprint('The accuracy given by R^2 has been: {:.4f}'.format(KNN_m.score(X_tst,Y_tst)))\n\nY_pred = KNN_m.predict(X_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model has a rmse of: {:.2f}'.format(rmse))\n\nPrice_mean = np.mean(Y_tst[\"class\"])\nerror=rmse\/Price_mean\nprint('The error is: {:.2f}%'.format(error*100))","2c2465b1":"DTR = DecisionTreeRegressor(random_state=42)\n\nresults = DTR.fit(X_tr,Y_tr)\nprint('The accuracy by the criterion',results.criterion, 'has been: {:.4f}'.format(results.score(X_tst,Y_tst)))\n\nY_pred = results.predict(X_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model has a rmse of: {:.2f}'.format(rmse))\nPrice_mean = np.mean(Y_tst[\"class\"])\nerror=rmse\/Price_mean\nprint('The error is: {:.2f}%'.format(error*100))","345f4017":"RFR = RandomForestRegressor(oob_score=True, random_state=42)\n\nresults = RFR.fit(X_tr,np.array(Y_tr).ravel())\n\nprint('The Out Of Bag score is: {:.2f}'.format(results.oob_score))\nprint('The accuracy by the criterion',results.criterion,'has been: {:.2f}%'.format(results.score(X_tst,Y_tst)*100))\n\nY_pred = results.predict(X_tst)\nrmse = np.sqrt(mean_squared_error(Y_pred,Y_tst))\nprint('The model has a rmse of: {:.2f}'.format(rmse))\n\nPrice_mean = np.mean(Y_tst[\"class\"])\nerror=rmse\/Price_mean\nprint('The error is: {:.2f}%'.format(error*100))","c812a43d":"## Regression\n\n### Train Test Split","38d54599":"## Decision Tree Regressor","087f369a":"The dataset is complete.","d7d0fa46":"## Random Forest Regressor","d6c20b8d":"# Car Auto Price","d6269dbc":"## Correlations","5cee5b38":"### The best regressor has been the Random Forest Regressor with an error of 19.05%","79da5429":"Will take a PCA on the components to reduce dimensionality from 15 to 9 keeping the 96.25% of the infromation.","05f7d5a0":"This is the dataset which is gonna be studied.","2a9c4cd9":"### K Nearest Neighbours","90ab6001":"There are some correlations between attributes and between class and some attributes. Let's see if is worthy to take a PCA on the predictor components."}}