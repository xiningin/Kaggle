{"cell_type":{"02b91d83":"code","ea4814a5":"code","650d72df":"code","ec92ced7":"code","a5d13faf":"code","f0536d92":"code","61291a34":"code","d23d442f":"code","5c878437":"code","529f5537":"code","2a608e4b":"code","b8efc30d":"code","007ec98d":"code","48709cf2":"code","2bb9e109":"code","116534a7":"code","e5a343d1":"code","2cd89c12":"code","af576bc4":"code","958318bc":"code","dc178390":"code","97a34208":"code","94471031":"code","c4b19ad7":"code","db33dde3":"code","0acbf159":"code","d46b29a4":"code","9e477494":"code","a8165d4d":"code","5eaee895":"code","7f2e6015":"code","19a0400f":"code","aaafc243":"code","c72e08f8":"code","7218e389":"markdown","c7c93739":"markdown","b1dad81f":"markdown","3c4c56bf":"markdown","d027e1f7":"markdown","6c1f8dd6":"markdown","3bb7c0eb":"markdown","7f134f9b":"markdown","b1de89a9":"markdown","1fb81866":"markdown"},"source":{"02b91d83":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom keras.callbacks import EarlyStopping\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ea4814a5":"df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","650d72df":"df.head()","ec92ced7":"y = df['label'] #expected output\nX = df.drop('label', axis=1) #respective input","a5d13faf":"X.head()","f0536d92":"sns.countplot(y)\nplt.title('Numbers in trainning data')\nplt.show()","61291a34":"nlist = []\nfor i in range(10):\n    number = np.array(df[df['label'] == i].drop('label', axis=1).iloc[0]).reshape(28, 28)\n    nlist.append(number)","d23d442f":"#visualizing some example digits\nfig, axs = plt.subplots(2, 5)\na, b = 0, 0\nfor element in nlist:\n    axs[a, b].imshow(element)\n    b = b + 1\n    if b == 5:\n        b = 0\n        a = 1","5c878437":"X = np.array(X)","529f5537":"X.shape","2a608e4b":"X.max()\n\n#is easier for the computer to use normalized numbers, let's normalize it\n# dividing the whole dataset by 255\nX = X \/ 255","b8efc30d":"# Since our data is in only one row we need to transform each image into a 28x28 matrix\nX = X.reshape(-1,28,28,1)","007ec98d":"X.shape","48709cf2":"model = Sequential([\n    layers.Conv2D(16, kernel_size=(3, 3), padding='same', activation='relu', input_shape=(28, 28, 1)),\n    layers.MaxPooling2D((3, 3)),\n    layers.Conv2D(32,  kernel_size=(3, 3), padding='same', activation='relu'),\n    layers.MaxPooling2D((3, 3)),\n    layers.Conv2D(32,  kernel_size=(3, 3), padding='same', activation='relu'),\n    layers.MaxPooling2D((3, 3)),\n    layers.Conv2D(64,  kernel_size=(3, 3), padding='same', activation='relu'),\n    \n    layers.Flatten(),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(128, activation='relu'),\n    layers.Dropout(0.2, seed=42),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(32, activation='relu'),\n    layers.Dense(16, activation='relu'),\n    layers.Dense(10, activation='softmax')\n])","2bb9e109":"model.compile(optimizer=\"Adam\", loss=\"SparseCategoricalCrossentropy\", metrics=[\"sparse_categorical_accuracy\"])","116534a7":"es1 = EarlyStopping(patience=50, monitor='val_acc', mode='auto')\nes2 = EarlyStopping(patience=50, monitor='val_loss', mode='auto')","e5a343d1":"history = model.fit(x=X,\n                    y=y,\n                    epochs=10000,\n                    validation_split=0.3,\n                    callbacks=[es1, es2])","2cd89c12":"time = np.arange(1, len(history.history['loss'])+1)","af576bc4":"sns.lineplot(data=history.history, x=time, y='loss')\nsns.lineplot(data=history.history, x=time, y='val_loss')\nplt.title('Loss fitting history')\nplt.legend(labels=['Loss', 'Validation loss'])","958318bc":"sns.lineplot(data=history.history, x=time, y='val_sparse_categorical_accuracy')\nsns.lineplot(data=history.history, x=time, y='sparse_categorical_accuracy')\nplt.title('Accuracy fitting history')\nplt.legend(labels=['Accuracy', 'Validation accuracy'])","dc178390":"test_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","97a34208":"test_X = np.array(test_df)","94471031":"#Normalizing the data\ntest_X = test_X \/ 255","c4b19ad7":"test_X.shape","db33dde3":"test_X = test_X.reshape(-1,28,28,1)","0acbf159":"test_X.shape","d46b29a4":"final_pred = model.predict(test_X)","9e477494":"numbers = final_pred.argmax(axis=1)","a8165d4d":"numbers","5eaee895":"final_df = pd.DataFrame(numbers, columns=['Label'])","7f2e6015":"ImageId = np.array(final_df.index) + 1","19a0400f":"final_df['ImageId'] = ImageId","aaafc243":"final_df","c72e08f8":"final_df.to_csv('final.csv', index=False)","7218e389":"## Early stopping system:\nWe will create an early stopping system that decides when to stop trainning with the data to prevent overfitting, this system will be based in the validation accuracy and the validation loss.\nIf the accuracy stops raising during 50 epochs or the loss stops decreasing the model will stop fitting.\n* Because we have this system we can set as many epochs as we want, the model itself will know when it's the time to stop.","c7c93739":"# Visualizing model perfomance:","b1dad81f":"# Exploratory analysis:\n\nLet's take a look on our data and see if we can extract any insight","3c4c56bf":"# Saving predicted values:","d027e1f7":"# Importing our libraries","6c1f8dd6":"# Introduction:\n\n## What is a convolutional neural network (CNN)?\nA CNN  it's a neural network generaly used to analyse image data and recognize patterns.\nIt can recognize something in images even if these images are distorted, scaled and even rotated.\nA basic CNN is based in 4 steps:\n1. Conlutional layer:\n  This one test some filters and choose the better one\n\n2. MaxPooling:\n  This layer chooses the most important parts of the image to have the best information gain and reduce the processing\n\n3. FLattening:\n  Transforms the image in a array\/vector in order to make it be fitted in a common Neural Network\n\n4. Neural network:\n  The last part is training it like a common neural networks.\n  \nYou can take a look in [this very well explained post on Towards data science medium blog](https:\/\/miro.medium.com\/max\/1838\/1*uAeANQIOQPqWZnnuH-VEyw.jpeg)\n  \n![Image of a CNN structure by towards data science](https:\/\/miro.medium.com\/max\/1838\/1*uAeANQIOQPqWZnnuH-VEyw.jpeg)","3bb7c0eb":"Is our data well distributed? what digits do we have and how many of each? let's take a look now","7f134f9b":"So, as we can see this dataset has labeled data and each columns represents one of the pixels in the image, let's split our trainning data in X and y, X being the inputs and y being the outputs.","b1de89a9":"# Predicting values:","1fb81866":"# Creating CNN model:"}}