{"cell_type":{"3bb939da":"code","d0892584":"code","4d51cd72":"code","56dfa2f6":"code","f36e2325":"code","5115d417":"code","ea78d259":"code","9290c1e0":"code","ba27d928":"code","f56de13e":"code","22b3bd89":"code","82bc3da4":"code","5bcd0449":"code","86658e80":"code","05cad637":"code","24323fa3":"code","e4811fa1":"code","620e14f3":"code","4f539a5a":"code","6babd7ae":"code","eca69623":"code","ad0194f7":"markdown","dcecfcfc":"markdown","6bf64478":"markdown","b577abb2":"markdown","2eda561a":"markdown","7a0b2e8d":"markdown","c89c275b":"markdown","751e9b63":"markdown","871d3b72":"markdown","88c9b7cf":"markdown","bfee9805":"markdown","4a642b8f":"markdown","307b5824":"markdown","9add4901":"markdown","4048cf84":"markdown","973f830e":"markdown","f681c7de":"markdown","133139ac":"markdown","055b5591":"markdown","0d3117b4":"markdown","c89a02bf":"markdown","3ac2cd74":"markdown","033cf4ab":"markdown","364d3f53":"markdown","b5ed941f":"markdown"},"source":{"3bb939da":"\nimport numpy as np \nimport pandas as pd\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d0892584":"data_s = pd.read_csv('\/kaggle\/input\/intel-stock-prices-historical-data-intc\/INTC.csv')\n\ndata_s","4d51cd72":"data = data_s[['Date', 'Open', 'High', 'Low', 'Close']]","56dfa2f6":"\nimport plotly.graph_objs as go\n\nfig=go.Figure(data=[go.Scatter(name = 'Close',x= data['Date'],y= data['Close']),\n                   go.Scatter(name = 'Open',x= data['Date'],y= data['Open']),\n                   go.Scatter(name = 'High',x= data['Date'],y= data['High']),\n                   go.Scatter(name = 'Low',x= data['Date'],y= data['Low'])\n                    ])\n\nfig.show()","f36e2325":"dfs = data.loc[data['Date'] >'1995']\n\n#dfs = data\n\ndfs","5115d417":"df = dfs.iloc[:,1:]\n\ndf","ea78d259":"import seaborn as sns\n\nsns.heatmap(df.corr(), annot=True, cmap='RdYlGn', linewidths=0.1, vmin=0)","9290c1e0":"training_set = df.iloc[:round(len(df)*0.8)].values\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1))\ntraining_set = scaler.fit_transform(training_set)","ba27d928":"print(training_set.shape)","f56de13e":"trainX = [] \ntrainY = []\n\nin_future = 1 # Number of days we want to predict into the future \nin_past = 28 # Number of past days we want to use to predict the future\n\nfor i in range(in_past, len(training_set) - in_future +1): \n    trainX.append(training_set[i - in_past:i, 0:training_set.shape[1]]) \n    trainY.append(training_set[i + in_future - 1:i + in_future, 0])\n\ntrainX, trainY = np.array(trainX), np.array(trainY)\n\nprint('trainX shape = {}.'.format(trainX.shape)) \nprint('trainY shape = {}.'.format(trainY.shape))","22b3bd89":"from keras.models import Sequential\nfrom keras.layers import LSTM\nfrom keras.layers import Dense, Dropout\n\nmodel = Sequential()\nmodel.add(LSTM(50, activation='relu', input_shape=(trainX.shape[0], trainX.shape[2]), return_sequences=True))\nmodel.add(LSTM(25, activation='relu', return_sequences=False))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(4))\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()","82bc3da4":"history = model.fit(trainX, trainY, epochs=30, batch_size=50, validation_split=0.2, verbose=1)","5bcd0449":"import matplotlib.pyplot as plt\n\n\nplt.plot(history.history['loss'], label='Training loss')\nplt.plot(history.history['val_loss'], label='Validation loss')\nplt.legend();","86658e80":"inputs_data =df.iloc[round(len(df)*0.8):,:].values\n\nscaler = MinMaxScaler(feature_range=(0, 1))\ninputs_data = scaler.fit_transform(inputs_data)\n\n\nprediction_stocks = []\n\nfor i in range(28, len(inputs_data)):\n    prediction_stocks.append(inputs_data[i-28:i])\n    \nprediction_stocks = np.array(prediction_stocks)","05cad637":"predictions = model.predict(prediction_stocks)","24323fa3":"\n#forecast_copies = np.repeat(predictions, prediction_stocks.shape[2], axis=-1)\ny_pred_future = scaler.inverse_transform(predictions)","e4811fa1":"df_forecast = pd.DataFrame({'Date':dfs.Date[-y_pred_future.shape[0]:],\n                            'Open': y_pred_future[:,0],\n                            'High':y_pred_future[:,1],\n                            'Low':y_pred_future[:,2], \n                            'Close':y_pred_future[:,3]})\n\ndf_forecast","620e14f3":"import plotly.graph_objs as go\n\nfig2=go.Figure(data=[go.Scatter(name = 'Close',x= dfs['Date'],y= dfs['Close']),\n                   go.Scatter(name = 'Close_Predicted',x= df_forecast['Date'],y= df_forecast['Close'])\n                    ])\n\nfig2.show()","4f539a5a":"sum_err = np.sum((dfs.Close[-y_pred_future.shape[0]:]-df_forecast['Close'])**2)\n\nprint(sum_err)\n\nx = (1\/(len(df_forecast))*sum_err)\n\nstdev = np.sqrt(x)\n\ninterval = \t1.645*stdev\n\nprint(interval)","6babd7ae":"df_forecast['Close Confidence Min'] = df_forecast['Close'] - interval\n\ndf_forecast['Close Confidence Max'] = df_forecast['Close'] + interval\n\ndf_forecast['Orginal Close'] = dfs.Close[-y_pred_future.shape[0]:]\n\ndf_forecast","eca69623":"\n     \nfig3=go.Figure(data=[\n                        go.Scatter(\n                                    name = 'Close',\n                                    x= df_forecast['Date'],\n                                    y= df_forecast['Orginal Close']),\n                     \n                        go.Scatter(\n                                    name = 'Close Predicted',\n                                    x= df_forecast['Date'],\n                                    y= df_forecast['Close']),\n\n                        go.Scatter(\n                                    name='Upper Bound',\n                                    x= df_forecast['Date'],\n                                    y= df_forecast['Close Confidence Max'],\n                                    mode='lines',\n                                    marker=dict(color=\"green\"),\n                                    line=dict(width=1),\n                                    showlegend=False),\n\n                         go.Scatter(\n                                    name='Lower Bound',\n                                    x= df_forecast['Date'],\n                                    y= df_forecast['Close Confidence Min'],\n                                    marker=dict(color=\"purple\"),\n                                    line=dict(width=1),\n                                    mode='lines',\n                                    fillcolor='rgba(68, 68, 68, 0.3)',\n                                    fill='tonexty',\n                                    showlegend=False)\n\n                    ])\n\nfig3.show()","ad0194f7":"Now making dataset for our model to predict.","dcecfcfc":"For 90% confidence level, t-multiplier is 1.645 which is calculated from degree of freedom of the sample.\n\n\nt-multiplier(1.645) * standard deviation(stdev) gives the magnitude of interval.\n\nThe minimum and maximum range is given by :\nconfidence min = value-interval\nconfidence max = value + interval","6bf64478":"Preparing Keras Model.","b577abb2":"Now we are going to feed in the prediction dataset to the model.","2eda561a":"#### Here, we are going to use Intel Stock Dataset from Kaggle to use it for our lstm Keras model for prediction","7a0b2e8d":"#### Adding the Close Confidence Min and Close Confidence Max to the dataframe, Plus the original closing price data too.","c89c275b":"Extracting Date, Open, High, Low and Close from the Dataframe.","751e9b63":"### Ploting the Closing Price(Original and Predicted) with the Close Confidence Min as 'Lower Bound' and Close Confidence Max as 'Upper Bound' which gives the idea of the Model's 90% Confidence Level.","871d3b72":"Here, we are going to make such arrangement with the training dataset that previous 28 Days will be used to predict 29th day.","88c9b7cf":"Using Plotly we will see how is the stock looks like.","bfee9805":"### The predicted data need's to be invert transformed so that the values returns into the original scale.","4a642b8f":"Ploting the Loss and valid loss so as to observe the learning of the Model.","307b5824":" ### Ploting the predicted 'Close' Stock Price with Original 'Close' Stock Price.","9add4901":"For the LSTM Model Splitting the dataframe to make training dataset.","4048cf84":"Fitting the Model to the training dataset","973f830e":"### Calculation of prediction interval(90% confidence level)","f681c7de":"Below seaborn libray is used to see correlation between the features in HeatMap visualization.","133139ac":"#### Looks like the Prediction is quite well","055b5591":"# Intel Stock Prediction using LSTM Keras","0d3117b4":"<img src=\"https:\/\/images.pexels.com\/photos\/159888\/pexels-photo-159888.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\" width=\"800px\">","c89a02bf":"#### There are instances where the original Closing Price is out of bound from the 90% Confidence Level.\n\n#### But in general sense the model tracks the original Closing Price inside the 90% Confidence Level Bound.","3ac2cd74":"It seems that the model is learning quite well. \nAnd the overfitting is not present in our model.","033cf4ab":"### Taking these predicted data and making it into dataframe so that it can be interpret.","364d3f53":"From the plot stock data from year 1995 onwards will be used.","b5ed941f":"Extracing High, Low, Close from the previous dataframe and load to other and discarding date."}}