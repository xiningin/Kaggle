{"cell_type":{"c6c9a48a":"code","76698574":"code","f18b9396":"code","0a0c8633":"code","89c682d6":"code","ea22806e":"code","2ae8229d":"code","f884a04a":"code","79bfb7dc":"code","2741f1ed":"code","8ed21765":"code","08e27a95":"code","66df98ca":"code","6b0289ef":"code","72e34a67":"code","efc07c7e":"code","88da2e08":"code","fc52d6d1":"code","e9e801f7":"code","39bcc23d":"code","c4c46edf":"code","5caa1873":"code","aab34a75":"code","676f0fed":"code","81cd638e":"code","901f531d":"code","26cef928":"code","ca5db5d7":"code","83bb4561":"code","f754b278":"code","16d437c0":"code","a93305e4":"code","e6f0574a":"code","5b99f5d9":"code","2db9dbc2":"code","e71eac49":"code","3e215e23":"code","c1c66be1":"code","bdcab386":"code","3d84ced9":"code","170d0fc3":"code","5c673fb3":"code","085d5eac":"code","a9afb07b":"markdown","dde92821":"markdown","8befc08d":"markdown","964ddd1c":"markdown","a893aead":"markdown","d908d6cb":"markdown","ca95cfa1":"markdown","5c4cfb47":"markdown","1d4eeadd":"markdown","bdad5f99":"markdown","f9275376":"markdown","cfc4749d":"markdown","4a6ec890":"markdown","d06ad1f3":"markdown","11fb5776":"markdown","975bdb9d":"markdown","ffc48791":"markdown","1e91f14f":"markdown","e690a0a3":"markdown","7069d0ba":"markdown","6e383d1e":"markdown"},"source":{"c6c9a48a":"import warnings\nwarnings.simplefilter('ignore')","76698574":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","f18b9396":"pd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)","0a0c8633":"filepath = '..\/input\/breast-cancer-wisconsin-data\/data.csv'\ndata = pd.read_csv(filepath)","89c682d6":"data.sample(10)","ea22806e":"data.shape","2ae8229d":"data.columns","f884a04a":"data.info()","79bfb7dc":"data.describe()","2741f1ed":"data.isnull().sum()","8ed21765":"data.drop(['Unnamed: 32', 'id'], axis=1, inplace=True)","08e27a95":"duplicate_rows = data[data.duplicated()]\nduplicate_rows.shape[0]","66df98ca":"data['diagnosis'].value_counts()","6b0289ef":"plt.figure(figsize=(7, 5))\nsns.countplot(data=data, x='diagnosis')\nplt.show()","72e34a67":"data.replace({'diagnosis':{'M': 0,\n                            'B': 1}},inplace=True)","efc07c7e":"data.drop('diagnosis', axis=1).hist(figsize=(18, 15))\nplt.show()","88da2e08":"data.corr(method='spearman')","fc52d6d1":"plt.figure(figsize = (15, 12))\ncormat = sns.heatmap(data.corr(method='spearman'), linecolor='k')\ncormat.set_title('Correlation Matrix')\nplt.show()","e9e801f7":"from sklearn.preprocessing import scale\nscaled_data = scale(data)\n\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(scaled_data)\nreduced_data = pca.transform(scaled_data)","39bcc23d":"print(pca.components_)","c4c46edf":"sns.set()\nplt.figure(figsize=(10, 6))\nsns.scatterplot(x=reduced_data[:, 0], y=reduced_data[:, 1], s=75, hue=data['diagnosis'])\nplt.show()","5caa1873":"X = data.drop('diagnosis', axis=1)\ny = data['diagnosis']","aab34a75":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)","676f0fed":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","81cd638e":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, f1_score, precision_score, recall_score, roc_auc_score, roc_curve","901f531d":"from sklearn.svm import SVC\nsvc = SVC(probability=True)\nsvc.fit(X_train, y_train)","26cef928":"y_pred_svc = svc.predict(X_test)\ny_pred_proba_svc = svc.predict_proba(X_test)[:, 1]","ca5db5d7":"print(\"Train accuracy :{:.2f}\".format(accuracy_score(y_train, svc.predict(X_train))))\nprint(\"Test accuracy :{:.2f}\".format(accuracy_score(y_test, svc.predict(X_test))))","83bb4561":"conmat = confusion_matrix(y_test, y_pred_svc)\nsns.heatmap(conmat, annot=True, cbar=False)\nplt.title(\"Confusion Matrix\")\nplt.show()","f754b278":"print(\"Classification Report\")\nprint(classification_report(y_test, y_pred_svc))","16d437c0":"print(\"F1 Score: {:.2f}\".format(f1_score(y_test, y_pred_svc)))\nprint(\"Precision: {:.2f}\".format(precision_score(y_test, y_pred_svc)))\nprint(\"Recall: {:.2f}\".format(recall_score(y_test, y_pred_svc)))","a93305e4":"tp = conmat[0][0]\nfp = conmat[0][1]\nfn = conmat[1][0]\ntn = conmat[1][1]\ntpr = tp\/(tp+fn)\ntnr = tn\/(fp+tn)\nfpr = fp\/(tp+fn)\nfnr = fn\/(fp+tn)","e6f0574a":"print(\"Type 1 Error: {:.2f}\".format(fpr))\nprint(\"Type 2 Error: {:.2f}\".format(fnr))","5b99f5d9":"print(\"Sensitivity: {:.2f}\".format(tpr))\nprint(\"Specificity: {:.2f}\".format(1-fpr))","2db9dbc2":"print(\"AUC Score: {:.2f}\".format(roc_auc_score(y_test, y_pred_proba_svc)))","e71eac49":"from sklearn.model_selection import cross_val_score\nsvc_acc = np.mean(cross_val_score(svc, X, y, cv=10, scoring='accuracy')) \nprint(\"Cross Validation Score: {:.2f}\".format(svc_acc))","3e215e23":"fpr_svc, tpr_svc, threshold_svc = roc_curve(y_test, y_pred_proba_svc)\n\nplt.style.use('seaborn-whitegrid')\nplt.figure(figsize=(8, 5))\nplt.plot(fpr_svc, tpr_svc, label=\"Support Vector Classifier\")\nplt.legend(loc='lower right', frameon=True)\nplt.title(\"ROC Curve\")\nplt.ylabel(\"TPR\")\nplt.xlabel(\"FPR\")\nplt.show()","c1c66be1":"from sklearn.model_selection import learning_curve\ntrain_sizes, train_scores, test_scores = learning_curve(svc, X, y, \n                                    train_sizes=np.linspace(0.1, 1, 10), cv=10, scoring='accuracy', n_jobs=-1, verbose=1)","bdcab386":"train_scores_mean = train_scores.mean(axis=1)\ntest_scores_mean = test_scores.mean(axis=1)","3d84ced9":"plt.style.use('seaborn-whitegrid')\nplt.figure(figsize=(8, 5))\nplt.plot(train_sizes, train_scores_mean, '-o', label = \"Training Score\", color='red')\nplt.plot(train_sizes, test_scores_mean, '-o', label = \"Cross Validation Score\", color='blue')\nplt.legend(loc='best', frameon=True)\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training Size\")\nplt.ylabel(\"Accuracy\")\nplt.show()","170d0fc3":"from sklearn.model_selection import RandomizedSearchCV\n\nparams = { 'C': [1, 10, 100, 1000, 10000],\n           'kernel': ['poly', 'rbf'],\n         }\n\nrandom = RandomizedSearchCV(svc, param_distributions=params, cv=10, scoring='accuracy', n_jobs=-1)\nrandom.fit(X,y)","5c673fb3":"random.best_params_","085d5eac":"print(\"Cross Validation Score after Hyperparameter Tuning: {:.2f}\".format(random.best_score_))","a9afb07b":"### Dropping unnecessary columns -","dde92821":"### Performing train-test split -","8befc08d":"### Checking the outcome labels -","964ddd1c":"### Plotting the Learning Curve -","a893aead":"### Plotting the ROC Curve -","d908d6cb":"### Plotting the correlation matrix -","ca95cfa1":"### Seperating dependent & independent variables -","5c4cfb47":"### Encoding the target variable -","1d4eeadd":"### Performing PCA -","bdad5f99":"### Checking for duplicate rows -","f9275376":"### Checking the data distribution -","cfc4749d":"## **Support Vector Classifier**","4a6ec890":"### Loading the dataset -","d06ad1f3":"### Scaling the data -","11fb5776":"### Checking for null values -","975bdb9d":"### Importing required libraries -","ffc48791":"### Visualizing the data points -","1e91f14f":"### Importing performance metrics for classification -","e690a0a3":"### Performing EDA -","7069d0ba":"### Checking the correlation between variables -","6e383d1e":"### Tuning the Hyperparameters -"}}