{"cell_type":{"b940f852":"code","b7371ecb":"code","7bb80a75":"code","20a2ff19":"code","8828c4f0":"code","4296469b":"markdown","3393864d":"markdown","864d2a79":"markdown","e770fb92":"markdown","c8ad30db":"markdown","9e2220eb":"markdown","8b42d3db":"markdown","ed18d413":"markdown","9eec00dc":"markdown","5583f603":"markdown","e6b2da85":"markdown","f1dcb067":"markdown"},"source":{"b940f852":"# We must use an internet-connected kernel to download the latest version of the environment\n!pip install \"kaggle_environments==0.1.6\"","b7371ecb":"import kaggle_environments as ke","7bb80a75":"config_9x7 = {\n    'columns': 9,\n    'rows': 8,\n    'inarow': 5\n}\nenv_9x7 = ke.make('connectx', configuration=config_9x7)\nenv_9x7.render()","20a2ff19":"config_5x4 = {\n    'columns': 5,\n    'rows': 4,\n    'inarow': 3\n}\nenv_5x4 = ke.make('connectx', configuration=config_5x4)\nenv_5x4.render()","8828c4f0":"config_8x8 = {\n    'columns': 8,\n    'rows': 8,\n    'inarow': 4\n}\nenv_8x8 = ke.make('connectx', configuration=config_8x8)\nenv_8x8.render()","4296469b":"# Making new environments","3393864d":"In order to customize our boards, we need to pass a custom configuration dictionary to `make`.  We do not need to specify all of the configuration parameters, only those whose default values we wish to override.  As an example:","864d2a79":"The `configuration` dictionary provided to `make` is where we can specify new board parameters. The default configuration can be found within the specification JSON file here:[kaggle_environments\/envs\/connectx\/connectx.json](https:\/\/github.com\/Kaggle\/kaggle-environments\/blob\/master\/kaggle_environments\/envs\/connectx\/connectx.json).  I've copied the entire `0.1.6` version of the file below for convenience:","e770fb92":"# End","c8ad30db":"# Installing the latest environment","9e2220eb":"# Using a custom configuration","8b42d3db":"Using these new environment variations, we can train our agents on custom board sizes to develop configuration-agnostic algorithms in anticipation of future changes to the default board size.","ed18d413":"In the `kaggle_environments` API, we create new instances of the `Environment` class using the `make` command in: https:\/\/github.com\/Kaggle\/kaggle-environments\/blob\/master\/kaggle_environments\/core.py.  The `make` function appears to be a wrapper around the `Environment` initialization function, validating inputs.  The command takes four parameters:\n* `environment` - this can be a string for one of the folders in in `kaggle_environments.envs` (https:\/\/github.com\/Kaggle\/kaggle-environments\/tree\/master\/kaggle_environments\/envs) or an instance of an Environment.  Currently, there are only three types: ConnectX, TicTacToe and an Identity environment - this last one appears to be a dummy for testing.\n* `configuration` \\[optional\\] - this is a `Dict` specifying game parameters used by the game engine specified above.  I will spend more on this time later.\n* `steps` \\[optional\\] - this is a `list` of game states to fastforward the game board, if empty, the initial state is used by default.  Potentially, this could be used to implement the [\"5-in-a-row\"](https:\/\/en.wikipedia.org\/wiki\/Connect_Four#5-in-a-Row) variant.\n* `debug` \\[optional\\] - this is a flag that determines whether the engine will print various messages to console during the call to `step()`; used by the private function `__debug_print`","9eec00dc":"# Configuring ConnectX Board for Custom Dimensions","5583f603":"Many people in the discussion boards have discussed an interest in competing on alternative boards.  In advance of a potential switch to other board sizes, here are some examples for how to set up the environment with the `0.1.6` API with custom board sizes.","e6b2da85":"```json\n{\n  \"name\": \"connectx\",\n  \"title\": \"ConnectX\",\n  \"description\": \"Classic Connect in a row but configurable.\",\n  \"version\": \"1.0.0\",\n  \"agents\": [2],\n  \"configuration\": {\n    \"timeout\": {\n      \"description\": \"Seconds an agent can run before timing out.\",\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"default\": 5\n    },\n    \"columns\": {\n      \"description\": \"The number of columns on the board\",\n      \"type\": \"integer\",\n      \"default\": 7,\n      \"minimum\": 1\n    },\n    \"rows\": {\n      \"description\": \"The number of rows on the board\",\n      \"type\": \"integer\",\n      \"default\": 6,\n      \"minimum\": 1\n    },\n    \"inarow\": {\n      \"description\": \"The number of checkers in a row required to win.\",\n      \"type\": \"integer\",\n      \"default\": 4,\n      \"minimum\": 1\n    }\n  },\n  \"reward\": {\n    \"description\": \"0 = Lost, 0.5 = Draw, 1 = Won\",\n    \"enum\": [0, 0.5, 1],\n    \"default\": 0.5\n  },\n  \"observation\": {\n    \"board\": {\n      \"description\": \"Serialized grid (rows x columns). 0 = Empty, 1 = P1, 2 = P2\",\n      \"type\": \"array\",\n      \"items\": {\n        \"enum\": [0, 1, 2]\n      },\n      \"default\": []\n    },\n    \"mark\": {\n      \"default\": 0,\n      \"description\": \"Which checkers are the agents.\",\n      \"enum\": [1, 2]\n    }\n  },\n  \"action\": {\n    \"description\": \"Column to drop a checker onto the board.\",\n    \"type\": \"integer\",\n    \"minimum\": 0,\n    \"default\": 0\n  },\n  \"reset\": {\n    \"status\": [\"ACTIVE\", \"INACTIVE\"],\n    \"observation\": [{ \"mark\": 1 }, { \"mark\": 2 }]\n  }\n}\n```","f1dcb067":"We primarily care about the `configuration` section of the specification.  The elements that we can modify are:\n* `timeout` - controls the maximum time of each agent, 5 is the default\n* `columns` - controls how wide the board is, 7 is the default\n* `rows` - controls how tall the board is, 6 is the default\n* `inarow` - controls how many markers must be connected to win, 4 is the default"}}