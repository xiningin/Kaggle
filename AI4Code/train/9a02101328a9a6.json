{"cell_type":{"3368b64d":"code","a7336df1":"code","450f0331":"code","c8ab672c":"code","d75d876f":"code","5b2ceef8":"code","7d1a42aa":"code","502063bd":"code","4312bee9":"code","9bbade9b":"code","bc1d770f":"code","b5ac0bf0":"code","3fba6bbd":"code","1e159ae4":"code","4538bf17":"code","1f6a32f1":"code","c2519dbe":"code","b72d2d9d":"code","74303e28":"code","53e48803":"code","6b9c2f39":"code","b7a28351":"code","5f9dc7c0":"code","459f23c2":"code","5bbaa560":"code","363bba4d":"code","f20e6252":"code","3605a74b":"code","7a37f58a":"code","4430b9dd":"code","c47c10e1":"code","25d68eab":"code","b9e28492":"code","6d67b75a":"code","aa453f76":"code","776a87be":"code","33254cd2":"code","9c6631f8":"code","68da5f9e":"code","37a3450e":"code","ed834c9b":"code","a9ec3faa":"code","3779d1af":"code","d6a5e9b5":"code","eb3f1287":"code","c53b33e8":"code","38d4985c":"code","de159389":"code","eb808fdc":"code","6eeac88d":"code","477ba3ac":"code","033e5449":"code","6e8f2987":"code","4a4519a1":"code","e937a34e":"code","8fa09af7":"code","68434c59":"code","c6903362":"code","577ec66b":"code","fc38577d":"code","59cad39c":"code","a5471239":"code","74bf0bfe":"code","740140bf":"code","0523552c":"code","3acbb8c8":"code","0d0a9ff9":"code","54e7934d":"code","28c7fe2d":"code","f232771e":"code","aa0ef361":"code","8d3a7c05":"code","4badff1b":"code","a4417a77":"code","1f8a7780":"code","e56108aa":"code","0c98b0be":"code","02ad39f2":"code","31d00f2d":"code","20e80a8d":"code","4a9f1f41":"code","d2787f90":"code","79c88d90":"code","91ae2db3":"code","ac5a61d0":"code","bbbd43ca":"code","11254b14":"code","609cdb65":"code","2af7415a":"code","610412a4":"code","0e65cea6":"code","fe197f83":"code","dbe9f881":"code","67de5588":"code","f8c32d79":"code","0ea65375":"code","59789cd9":"code","a8ed0a4e":"code","3904754b":"code","92dd4b2a":"code","cab3c374":"code","cb69facf":"code","14b5a839":"code","58f5648d":"code","75ad2c1a":"code","9819025f":"code","6ae77f22":"code","dd49bc83":"code","2d356349":"code","cf5f99e0":"code","f8be76b3":"code","7bc0d56e":"code","2ca74583":"code","30aae939":"code","4c12c34c":"code","b8e798c6":"code","f19ed2ee":"code","de8eacd3":"code","5afbc7c5":"code","1c89bcc9":"code","fd18012d":"code","224efdf7":"code","21cf452d":"code","187617f8":"code","b2f423c5":"markdown","096a5200":"markdown","354c660f":"markdown","102a0c91":"markdown","ba43fa07":"markdown","34ed42d3":"markdown","9eee4041":"markdown","e96225c0":"markdown","ef5e3d3e":"markdown","f862c59e":"markdown","7c900cad":"markdown","def3dcfc":"markdown","30ef9a69":"markdown","d7674336":"markdown","61f1c94a":"markdown","26914889":"markdown","123a953a":"markdown","c16cc915":"markdown","9c0f21bb":"markdown","53d7ae18":"markdown","9d9cab51":"markdown","8b596c67":"markdown","f0355c68":"markdown","cdd3a6ef":"markdown"},"source":{"3368b64d":"import numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import neighbors\nfrom sklearn.svm import SVR\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","a7336df1":"df = pd.read_csv('..\/input\/hitters\/Hitters.csv')\ndf = df.dropna()\ndf = pd.get_dummies(df, columns = ['League','Division','NewLeague'], drop_first = True)\ny = df['Salary']\nX = df.drop('Salary', axis = 1)","450f0331":"X.head()","c8ab672c":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)","d75d876f":"knn_model = KNeighborsRegressor().fit(X_train,y_train)\nknn_model","5b2ceef8":"y_pred = knn_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test,y_pred))","7d1a42aa":"knn_model","502063bd":"RMSE = []\n\nfor k in range(20):\n    k = k + 2\n    knn_model = KNeighborsRegressor(n_neighbors = k).fit(X_train, y_train)\n    y_pred = knn_model.predict(X_test)\n    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n    RMSE.append(rmse)\n    print(\"k =\", k, \"i\u00e7in RMSE de\u011feri:\", rmse)","4312bee9":"knn_params = {'n_neighbors': np.arange(2,30,1)}\n\nknn_model = KNeighborsRegressor()\n\nknn_cv_model = GridSearchCV(knn_model, knn_params, cv = 10).fit(X_train, y_train)","9bbade9b":"knn_cv_model.best_params_","bc1d770f":"knn_tuned = KNeighborsRegressor(**knn_cv_model.best_params_).fit(X_train, y_train)","b5ac0bf0":"y_pred = knn_tuned.predict(X_test)","3fba6bbd":"np.sqrt(mean_squared_error(y_test,y_pred))","1e159ae4":"svr_model = SVR('linear').fit(X_train, y_train)\nsvr_model","4538bf17":"y_pred = svr_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","1f6a32f1":"svr_model = SVR('linear')\n\nsvr_params = {'C': [0.01, 0.001, 0.2, 0.1, 0.5, 0.8,0.9,1]}\n\nsvr_cv_model = GridSearchCV(svr_model, svr_params, cv=10, n_jobs= -1, verbose= 2).fit(X_train, y_train)\n","c2519dbe":"svr_cv_model.best_params_","b72d2d9d":"svr_tuned = SVR('linear', C = 0.001).fit(X_train, y_train)","74303e28":"y_pred = svr_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","53e48803":"svr_model = SVR()\n\nsvr_params = {'C': [0.01,0.001, 0.2, 0.1,0.5,0.8,0.9,1, 10, 100, 500,1000]}\n\nsvr_cv_model = GridSearchCV(svr_model, svr_params, cv=10, n_jobs= -1, verbose=2).fit(X_train, y_train)","6b9c2f39":"svr_cv_model.best_params_","b7a28351":"svr_tuned = SVR(**svr_cv_model.best_params_).fit(X_train, y_train)\nnp.sqrt(mean_squared_error(y_test, y_pred))","5f9dc7c0":"scaler = StandardScaler()","459f23c2":"scaler.fit(X_train)\n\nX_train_scaled = scaler.transform(X_train)\n","5bbaa560":"scaler.fit(X_test)\nX_test_scaled = scaler.transform(X_test)","363bba4d":"mlp_model = MLPRegressor().fit(X_train_scaled, y_train)","f20e6252":"y_pred = mlp_model.predict(X_test_scaled)\nnp.sqrt(mean_squared_error(y_test, y_pred))","3605a74b":"mlp_params = {\"alpha\": [0.1, 0.01, 0.02, 0.001, 0.0001], \n             \"hidden_layer_sizes\": [(10,20), (5,5), (100,100), (1000,100,10)]}","7a37f58a":"mlp_cv_model = GridSearchCV(mlp_model, mlp_params, cv = 10, verbose = 2, n_jobs = -1).fit(X_train_scaled, y_train)","4430b9dd":"mlp_cv_model.best_params_","c47c10e1":"mlp_tuned = MLPRegressor(**mlp_cv_model.best_params_).fit(X_train_scaled, y_train)","25d68eab":"y_pred = mlp_tuned.predict(X_test_scaled)\nnp.sqrt(mean_squared_error(y_test, y_pred))","b9e28492":"cart_model = DecisionTreeRegressor(random_state = 52)\ncart_model.fit(X_train, y_train)","6d67b75a":"y_pred = cart_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","aa453f76":"?cart_model","776a87be":"cart_params = {'max_depth': [2,3,4,5,10,20, 100, 1000],\n              'min_samples_split': [2,10,5,30,50,10]}","33254cd2":"cart_model = DecisionTreeRegressor()","9c6631f8":"cart_cv_model = GridSearchCV(cart_model,cart_params, cv = 10).fit(X_train,y_train)","68da5f9e":"cart_cv_model.best_params_","37a3450e":"cart_tuned = DecisionTreeRegressor(**cart_cv_model.best_params_).fit(X_train,y_train)","ed834c9b":"y_pred = cart_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","a9ec3faa":"cart_tuned = DecisionTreeRegressor(max_depth = 2).fit(X_train, y_train)","3779d1af":"!pip install skompiler\nfrom skompiler import skompile\nprint(skompile(cart_tuned.predict).to('python\/code'))","d6a5e9b5":"rf_model = RandomForestRegressor(random_state = 42).fit(X_train, y_train)","eb3f1287":"y_pred = rf_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","c53b33e8":"df.shape","38d4985c":"?rf_model","de159389":"rf_params = {'max_depth': [5,8,10,None],\n            'max_features': [2,5,10,15,17],\n            'n_estimators': [100,200,500,1000],\n            'min_samples_split': [2,5,10,20,30]}","eb808fdc":"rf_cv_model = GridSearchCV(rf_model, rf_params, cv = 10, n_jobs = -1, verbose = 2).fit(X_train, y_train)","6eeac88d":"rf_cv_model.best_params_","477ba3ac":"rf_tuned = RandomForestRegressor(**rf_cv_model.best_params_).fit(X_train,y_train)","033e5449":"y_pred = rf_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","6e8f2987":"rf_tuned.feature_importances_","4a4519a1":"Importance = pd.DataFrame({'Importance':rf_tuned.feature_importances_*100}, \n                          index = X_train.columns)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'r', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","e937a34e":"import pandas as pd\nfrom sklearn.model_selection import train_test_split, GridSearchCV\ndf = pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf = df.dropna()\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf[\"NEW_catbat\"] = df[\"CAtBat\"]\/df[\"Years\"]\ndf[\"NEW_chits\"] =df[\"CHits\"]\/df[\"Years\"]\ndf[\"NEW_chmrun\"] = df[\"CHmRun\"]\/df[\"Years\"]\ndf[\"NEW_cruns\"] = df[\"CRuns\"]\/df[\"Years\"]\ndf[\"NEW_crbi\"] = df[\"CRBI\"]\/df[\"Years\"]\ndf[\"NEW_cwalks\"]=df[\"CWalks\"]\/df[\"Years\"]","8fa09af7":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)","68434c59":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)","c6903362":"rf_params = {\"max_depth\": [5,8,None],\n            \"max_features\": [2,3,4,5],\n            \"n_estimators\": [100,200, 500],\n            \"min_samples_split\": [2,5,7]}","577ec66b":"rf_model = RandomForestRegressor(random_state = 42).fit(X,y)","fc38577d":"rf_cv_model = GridSearchCV(rf_model, rf_params, cv = 10, n_jobs = -1, verbose = 2).fit(X, y)","59cad39c":"rf_cv_model.best_params_","a5471239":"rf_tuned = RandomForestRegressor(**rf_cv_model.best_params_).fit(X_train,y_train)","74bf0bfe":"y_pred = rf_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","740140bf":"Importance = pd.DataFrame({'Importance':rf_tuned.feature_importances_*100}, \n                          index = X_train.columns)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'r', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","0523552c":"df = pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf = df.dropna()\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf[\"NEW_catbat\"] = df[\"CAtBat\"]\/df[\"Years\"]\ndf[\"NEW_chits\"] =df[\"CHits\"]\/df[\"Years\"]\ndf[\"NEW_chmrun\"] = df[\"CHmRun\"]\/df[\"Years\"]\ndf[\"NEW_cruns\"] = df[\"CRuns\"]\/df[\"Years\"]\ndf[\"NEW_crbi\"] = df[\"CRBI\"]\/df[\"Years\"]\ndf[\"NEW_cwalks\"]=df[\"CWalks\"]\/df[\"Years\"]\n\ny = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)","3acbb8c8":"gbm_model = GradientBoostingRegressor().fit(X_train, y_train)","0d0a9ff9":"gbm_model","54e7934d":"y_pred = gbm_model.predict(X_test)","28c7fe2d":"np.sqrt(mean_squared_error(y_test,y_pred))","f232771e":"gbm_params = {'learning_rate': [0.001,0.1],\n             'max_depth': [3,5,8,9,10],\n             'n_estimators': [100,200,10,15],\n             'subsample': [1,0.4,0.5,0.7],\n             \"loss\": [\"ls\",\"lad\",\"quantile\"]}","aa0ef361":"gbm_model = GradientBoostingRegressor().fit(X_train, y_train)","8d3a7c05":"gbm_cv_model = GridSearchCV(gbm_model, \n                            gbm_params, \n                            cv = 5, \n                            n_jobs=-1, \n                            verbose = 2).fit(X, y)","4badff1b":"gbm_cv_model.best_params_","a4417a77":"?gbm.tuned","1f8a7780":"gbm_tuned = GradientBoostingRegressor(**gbm_cv_model.best_params_).fit(X_train,y_train)","e56108aa":"y_pred = gbm_tuned.predict(X_test)","0c98b0be":"np.sqrt(mean_squared_error(y_test, y_pred))","02ad39f2":"Importance = pd.DataFrame({'Importance':gbm_tuned.feature_importances_*100}, \n                          index = X_train.columns)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'r', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","31d00f2d":"df = pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf = df.dropna()\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf[\"NEW_catbat\"] = df[\"CAtBat\"]\/df[\"Years\"]\ndf[\"NEW_chits\"] =df[\"CHits\"]\/df[\"Years\"]\ndf[\"NEW_chmrun\"] = df[\"CHmRun\"]\/df[\"Years\"]\ndf[\"NEW_cruns\"] = df[\"CRuns\"]\/df[\"Years\"]\ndf[\"NEW_crbi\"] = df[\"CRBI\"]\/df[\"Years\"]\ndf[\"NEW_cwalks\"]=df[\"CWalks\"]\/df[\"Years\"]\n\ny = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)","20e80a8d":"#!pip install xgboost","4a9f1f41":"import xgboost\nfrom xgboost import XGBRegressor","d2787f90":"xgb = XGBRegressor().fit(X_train, y_train)\ny_pred = xgb.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","79c88d90":"xgb_params = {\"learning_rate\": [0.1,0.01,0.5],\n             \"max_depth\": [2,3,4,5,8],\n             \"n_estimators\": [100,200,500,1000],\n             \"colsample_bytree\": [0.4,0.7,1]}","91ae2db3":"xgb_cv_model = GridSearchCV(xgb, xgb_params, cv=10, n_jobs=-1, verbose=2).fit(X_train,y_train)","ac5a61d0":"xgb_cv_model.best_params_","bbbd43ca":"xgb_tuned = XGBRegressor(**xgb_cv_model.best_params_).fit(X_train, y_train)","11254b14":"y_pred = xgb_tuned.predict(X_test)","609cdb65":"np.sqrt(mean_squared_error(y_test, y_pred))","2af7415a":"Importance = pd.DataFrame({'Importance':xgb_tuned.feature_importances_*100}, \n                          index = X_train.columns)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'r', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","610412a4":"print('asda')","0e65cea6":"df = pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf = df.dropna()\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf[\"NEW_catbat\"] = df[\"CAtBat\"]\/df[\"Years\"]\ndf[\"NEW_chits\"] =df[\"CHits\"]\/df[\"Years\"]\ndf[\"NEW_chmrun\"] = df[\"CHmRun\"]\/df[\"Years\"]\ndf[\"NEW_cruns\"] = df[\"CRuns\"]\/df[\"Years\"]\ndf[\"NEW_crbi\"] = df[\"CRBI\"]\/df[\"Years\"]\ndf[\"NEW_cwalks\"]=df[\"CWalks\"]\/df[\"Years\"]\n\ny = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)","fe197f83":"#!pip install lightgbm\n#conda install -c conda-forge lightgbm","dbe9f881":"from lightgbm import LGBMRegressor","67de5588":"lgb_model = LGBMRegressor().fit(X_train, y_train)\nlgb_model","f8c32d79":"y_pred = lgb_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","0ea65375":"lgb_model = LGBMRegressor()\nlgb_model","59789cd9":"lgbm_params = {\"learning_rate\": [0.01,0.001, 0.1, 0.5, 1],\n              \"n_estimators\": [200,500,1000,5000],\n              \"max_depth\": [2,4,6,7,10],\n              \"colsample_bytree\": [1,0.8,0.5,0.4]}","a8ed0a4e":"lgbm_cv_model = GridSearchCV(lgb_model, \n                             lgbm_params, \n                             cv = 10, \n                             n_jobs = -1, \n                             verbose =2).fit(X_train, y_train)","3904754b":"lgbm_cv_model.best_params_","92dd4b2a":"lgbm_tuned = LGBMRegressor(**lgbm_cv_model.best_params_).fit(X_train, y_train)","cab3c374":"y_pred = lgbm_tuned.predict(X_test)","cb69facf":"np.sqrt(mean_squared_error(y_test, y_pred))","14b5a839":"Importance = pd.DataFrame({'Importance':lgbm_tuned.feature_importances_*100}, \n                          index = X_train.columns)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'r', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","58f5648d":"?lgbm_tuned","75ad2c1a":"df = pd.read_csv(\"Hitters.csv\")\ndf = df.dropna()\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf[\"NEW_catbat\"] = df[\"CAtBat\"]\/df[\"Years\"]\ndf[\"NEW_chits\"] =df[\"CHits\"]\/df[\"Years\"]\ndf[\"NEW_chmrun\"] = df[\"CHmRun\"]\/df[\"Years\"]\ndf[\"NEW_cruns\"] = df[\"CRuns\"]\/df[\"Years\"]\ndf[\"NEW_crbi\"] = df[\"CRBI\"]\/df[\"Years\"]\ndf[\"NEW_cwalks\"]=df[\"CWalks\"]\/df[\"Years\"]\n\ny = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)","9819025f":"#!pip install catboost\nfrom catboost import CatBoostRegressor","6ae77f22":"catb_model = CatBoostRegressor(verbose = False).fit(X_train, y_train)","dd49bc83":"catb_params = {\"iterations\": [200,500,100],\n              \"learning_rate\": [0.01,0.1],\n              \"depth\": [3,6,8]}","2d356349":"catb_model = CatBoostRegressor()","cf5f99e0":"catb_cv_model = GridSearchCV(catb_model,catb_params, cv = 5,n_jobs = -1, \n             verbose = 2).fit(X_train, y_train)","f8be76b3":"catb_cv_model.best_params_","7bc0d56e":"catb_tuned = CatBoostRegressor(**catb_cv_model.best_params_).fit(X_train, y_train)","2ca74583":"np.sqrt(mean_squared_error(y_test, y_pred))","30aae939":"df = pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf = df.dropna()\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf[\"NEW_catbat\"] = df[\"CAtBat\"]\/df[\"Years\"]\ndf[\"NEW_chits\"] =df[\"CHits\"]\/df[\"Years\"]\ndf[\"NEW_chmrun\"] = df[\"CHmRun\"]\/df[\"Years\"]\ndf[\"NEW_cruns\"] = df[\"CRuns\"]\/df[\"Years\"]\ndf[\"NEW_crbi\"] = df[\"CRBI\"]\/df[\"Years\"]\ndf[\"NEW_cwalks\"]=df[\"CWalks\"]\/df[\"Years\"]\n\ny = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)","4c12c34c":"def compML(df, y, alg):\n    model = alg().fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    RMSE = np.sqrt(mean_squared_error(y_test, y_pred))\n    model_ismi = alg.__name__\n    print(model_ismi, \"Modeli Test Hatas\u0131:\", RMSE)","b8e798c6":"compML(df, \"Salary\", SVR)","f19ed2ee":"models = [LGBMRegressor,\n          GradientBoostingRegressor, \n          RandomForestRegressor, \n          DecisionTreeRegressor,\n          MLPRegressor,\n          KNeighborsRegressor, \n          SVR]","de8eacd3":"for model in models:\n    compML(df, \"Salary\", model)","5afbc7c5":"import warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning)","1c89bcc9":"import numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import neighbors\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import cross_val_score","fd18012d":"models = []\nmodels.append(('LR', LinearRegression()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('CART', DecisionTreeRegressor()))\nmodels.append(('RF', RandomForestRegressor()))\nmodels.append(('SVR', SVR()))\nmodels.append(('GBM', GradientBoostingRegressor()))\nmodels.append((\"XGBoost\", XGBRegressor()))\nmodels.append((\"LightGBM\", LGBMRegressor()))\nmodels.append((\"CatBoost\", CatBoostRegressor(verbose = False)))","224efdf7":"for name, model in models:\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n        msg = \"%s: (%f)\" % (name, rmse)\n        print(msg)","21cf452d":"for name, model in models:\n        model.fit(X, y)\n        y_pred = model.predict(X)\n        rmse = np.sqrt(mean_squared_error(y, y_pred))\n        msg = \"%s: (%f)\" % (name, rmse)\n        print(msg)","187617f8":"for name, model in models:\n        rmse = np.sqrt(np.mean(-cross_val_score(model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\n        msg = \"%s: (%f)\" % (name, rmse)\n        print(msg)","b2f423c5":"# All Models","096a5200":"# Second Option ","354c660f":"# Feature Engineering","102a0c91":"# Now let`s separate the dataset as a train and test","ba43fa07":"# Model Tuning**","34ed42d3":"# SUPPORT VECTOR REGRESSION (SVR)**","9eee4041":"# Model Tuning","e96225c0":"*NON LINEAR*","ef5e3d3e":"# *SVR TUNING*","f862c59e":"# CatBoost","7c900cad":"# let`s set the KNN model and then predict the X.","def3dcfc":"# **CART**","30ef9a69":"# ARTIFICIAL NEURAL NETWORK","d7674336":"# *Model Tuning*","61f1c94a":"# LIGHT GBM","26914889":"# XGBoost","123a953a":"# Model Tuning","c16cc915":"# Model Tuning","9c0f21bb":"# Random Forests","53d7ae18":"# Firstly we apply K Nearest Neighbors model.","9d9cab51":"# **GBM**","8b596c67":"# Model Tuning","f0355c68":"# *GRIDSEARCH CV*","cdd3a6ef":"# KNN MODEL TUNING"}}