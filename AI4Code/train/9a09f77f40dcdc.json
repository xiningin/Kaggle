{"cell_type":{"032883a9":"code","c7b641d8":"code","df686de3":"code","3f70fddd":"code","cd9d28fb":"code","b7faef63":"code","45bb5ebc":"code","788ce587":"code","c50db167":"code","b0c06cd4":"code","bf296879":"code","d620ce3d":"code","8ef74f21":"code","6c8f2dc8":"code","467799b1":"code","c0f45cac":"code","3a5a0abc":"code","03944088":"code","f6d16ee1":"code","3239b015":"code","27f31a9f":"code","eec10470":"code","c9b6aff8":"code","5d519754":"code","31c72f2c":"code","6148b4c1":"code","0e73ec8e":"code","8187dcd2":"code","583179bb":"code","1eaf5c13":"code","158a132a":"code","665021f7":"code","d4cb5933":"code","816a2397":"code","91918476":"code","00272160":"code","2c593e03":"code","fa000a58":"markdown","1efe2f6b":"markdown","e1ecc935":"markdown","168996a9":"markdown","49596098":"markdown","604e8185":"markdown","aa96c301":"markdown","9e3a74ca":"markdown","068947ae":"markdown","9426c9ab":"markdown","adb5b568":"markdown","975c169f":"markdown","d2d5da2b":"markdown","8a88cdd9":"markdown","071c0649":"markdown","15ac4884":"markdown","b7d96b49":"markdown","8ab21ef8":"markdown","4f0d8816":"markdown","75681a29":"markdown","ea65dfd4":"markdown","1ff9260c":"markdown","44b5f66c":"markdown","7a7f4b2d":"markdown","3601a90f":"markdown","1c2e4771":"markdown","9c65c407":"markdown","c010068f":"markdown","77fa9f98":"markdown","a7655783":"markdown","10b69ab7":"markdown","f4e1c1fb":"markdown","de163d26":"markdown","0dd7175a":"markdown"},"source":{"032883a9":"### Import neccessary package as Kaggle recommended\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n### Have a look at the data directory and get the link to the updated dataset\nlist_path = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        list_path.append(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c7b641d8":"# Install wget to download the data\n# !pip install wget\n#import wget","df686de3":"# Import other neccessary package\nfrom datetime import date\nimport datetime as dt\nimport collections\nimport random\nimport statistics\n\n# matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Patch\nimport matplotlib.style as style\nimport matplotlib.gridspec as gridspec\nimport matplotlib as mpl # use\/reset style\nfrom matplotlib.dates import DateFormatter\nimport matplotlib.dates as mdates\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n%matplotlib inline\n\n# seaborn\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n\n## Map visualization\nimport folium\nimport altair as alt\n\n# Plotly\nfrom plotly import tools, subplots\nfrom plotly.subplots import make_subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True) # Required to use plotly offline in jupyter notebook\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.io as pio\npio.templates.default = \"plotly_white\"\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown\ndef bold(string):\n    display(Markdown(string))","3f70fddd":"### Reading patient data - Main data \nvietnam_patient_data = pd.read_csv('\/kaggle\/input\/vietnam-covid19-patient-dataset\/Vietnam_COVID-19_patient_data_May10_2020.csv')\nvietnam_patient_data.tail()","cd9d28fb":"### Reading the number of hopitalized patients (Active case) through the start date 02\/22\/2020 - up to the most updated date\n# This kind of data is not so consistent among different sources, \n#so I downloaded directly from the Vietnam Health Ministry website\n\nvietnam_hospitalized_patient_info = pd.read_csv('\/kaggle\/input\/vietnam-covid19-patient-dataset\/Vietnam_COVID-19_HospitalizedPatient_May10_2020.csv')\nvietnam_hospitalized_patient_info.tail()","b7faef63":"### Reading province information (providing the latitude and longtitude for each province\/city in Vietnam)\nvietnam_region_info = pd.read_csv('\/kaggle\/input\/vietnam-covid19-patient-dataset\/Vietnam_province_info.csv')\nvietnam_region_info.tail()","45bb5ebc":"## Data correction - No need anymore\n# vietnam_patient_data.columns[8]\n# vietnam_patient_data['\\x08Confirmed Date']\n# '\\x08Confirmed Date' => Need to be fixed by renaming # '\\x08Confirmed Date'\n# vietnam_patient_data = vietnam_patient_data.rename({'Confirmed Date': 'Date'}, axis = 'columns')\n\n# vietnam_patient_data.shape\n# # (999, 23) => Need to be fixed number of length (currently: 999)\n# vietnam_patient_data = vietnam_patient_data[vietnam_patient_data['Date'].isnull() != True]","788ce587":"## Change 'Confirmed Date' to 'Date'\nvietnam_patient_data = vietnam_patient_data.rename({'Confirmed Date': 'Date'}, axis = 'columns')\n\n## Convert date from string to datetime type\nvietnam_patient_data['Date'] = pd.to_datetime(vietnam_patient_data['Date'])\n#vietnam_patient_data['Date'] = pd.to_datetime(vietnam_patient_data['Date']).dt.strftime('%m\/%d\/%Y')\nvietnam_patient_data.shape","c50db167":"vietnam_patient_data.columns","b0c06cd4":" # What is the types of the features (categorical, numerical, mixed)?\n#vietnam_patient_data.dtypes","bf296879":"vietnam_patient_data.describe(include=['O'])","d620ce3d":"#vietnam_patient_data.info()","8ef74f21":"### BASIC DATA FRAME FOR PATIENT DATA:\n# Name 'patient_data'\n\ntarget_list = ['ID', 'Gender', 'Age', 'Nationality', 'Detection Location', 'Date',\n               'Travel History','Travel Country, Correct', 'Source of Infection', \n               'Relationship', 'Health Condition When Confirmed', \n               'Detail Symptoms When Confirmed (clean up)','Underlying Health Condition','Discharged Date', 'Re-Infected']\npatient_data = vietnam_patient_data[target_list]\n\n## brief look at the data\n# sns.pairplot(patient_data)\n\n## Convert date from string to datetime type\npatient_data['Date'] = pd.to_datetime(patient_data['Date'])\n\npatient_data['Discharged Date'].unique()\n# => Remove the one that has no exact date, starting as '(', for example '(Feb 2020, no exact date)'\npatient_data['Discharged Date'] = patient_data['Discharged Date'].replace(to_replace = r'^\\(', \n                                                                value = np.nan, regex = True)\n\n## Fill NaN in 'Health Condition When Confirmed' with Not Reported\npatient_data['Health Condition When Confirmed'] = patient_data['Health Condition When Confirmed'].fillna('Not Reported')\n\npatient_data.head()","6c8f2dc8":"### DATA FRAME FOR PATIENT'S GENDER, AGE AND NATIONALITY:\n# Name 'patient_nationality'\n\n# Prepare patient data\npatient_nationality = patient_data[['Gender','Age', 'Nationality', 'Travel History']]\n# Condition for columns distinguish Vietnamese and foreigners\npatient_nationality['Patient Nationality'] = patient_nationality['Nationality']\npatient_nationality.loc[patient_nationality['Patient Nationality'] != 'Vietnam', 'Patient Nationality'] = 'Foreigner'\npatient_nationality.loc[patient_nationality['Patient Nationality'] == 'Vietnam', 'Patient Nationality'] = 'Vietnamese'\npatient_nationality.loc[patient_nationality['Gender'] == 'F', 'Gender'] = 'Female'\npatient_nationality.loc[patient_nationality['Gender'] == 'M', 'Gender'] = 'Male'\npatient_nationality.loc[patient_nationality['Travel History'] == 1, 'Travel History'] = 'Imported Cases'\npatient_nationality.loc[patient_nationality['Travel History'] == 0, 'Travel History'] = 'Locally Transmitted Cases'\npatient_nationality","467799b1":"### DATA FRAME FOR HOSPITALIZED TIME:\n# Name 'hospitalized_time'\n\nhospitalized_time = patient_data[['Date','Discharged Date','Gender','Age', 'Nationality']]\nhospitalized_time = hospitalized_time.dropna()\n## Convert date from string to datetime type\nhospitalized_time['Discharged Date'] = pd.to_datetime(hospitalized_time['Discharged Date'])\nhospitalized_time['Days Hospitalized Since Confirmed'] = (hospitalized_time['Discharged Date'] - hospitalized_time['Date'])\/pd.Timedelta('1 days')\nhospitalized_time = hospitalized_time.sort_values('Days Hospitalized Since Confirmed', ascending = True).reset_index(drop=True)\n## Modify the 'Nationality' column (2 classes: Vietnamese and Foreigner)\nhospitalized_time.loc[hospitalized_time['Gender'] == 'F', 'Gender'] = 'Female'\nhospitalized_time.loc[hospitalized_time['Gender'] == 'M', 'Gender'] = 'Male'\nhospitalized_time.loc[hospitalized_time['Nationality'] != 'Vietnam', 'Nationality'] = 'Foreigners'\nhospitalized_time.loc[hospitalized_time['Nationality'] == 'Vietnam', 'Nationality'] = 'Vietnamese'\nhospitalized_time","c0f45cac":"### DATAFRAMES FOR TRAVEL COUNTRY:\n# Name 'travel_country'\n# 2 data frames for the first and second wave of infection (secondwave was started with patient BN17)\n# df_travel_country_firstwave\n# df_travel_country_secondwave\n\n### Function to extract the travel countries information\ndef extract_travel_country(df):\n    travel_country = df['Travel Country, Correct'].dropna().tolist()\n    travel_countries = []\n    for country in travel_country:\n        name = country.split(', ')\n        travel_countries.extend(name)\n    counter = collections.Counter(travel_countries)\n    df_travel_country = pd.DataFrame(list(counter.items()),columns = ['Country','Number of Cases'])\n    df_travel_country = df_travel_country.sort_values('Number of Cases', ascending = False)\n    return df_travel_country\n\n## All travel countries\ndf_travel_country = extract_travel_country(patient_data)\n\n## All travel countries - separate first and second wave\nsecondwave_start_index = 16 #BN17\nfirstwave = vietnam_patient_data[:secondwave_start_index]\nsecondwave = vietnam_patient_data[secondwave_start_index:]\n\ndf_travel_country_firstwave = extract_travel_country(firstwave)\ndf_travel_country_secondwave = extract_travel_country(secondwave)","3a5a0abc":"### BASIC DATAFRAME FOR CASES (STATISTICS):\n# Name 'df_cases'\n\n# STEP 1: Create a date dataframe (all days from start to end)\nstart_date = '01\/22\/2020'\n# end_date =  patient_data['Date'].iloc[-1]\nend_date =  vietnam_hospitalized_patient_info['Date'].iloc[-1]\n## create an array of date from start_date to end_date, one per day\narr_date = pd.date_range(start = start_date, end = end_date)\n## create dataframe\ndf_date = pd.DataFrame(arr_date, columns = ['Date'])\n## Convert date from string to datetime type\ndf_date['Date'] = pd.to_datetime(df_date['Date'])\n# df_date\n\n# STEP 2: create df_cases dataframe\ndf_cases = pd.DataFrame(columns = ['Date', 'Travel History', 'New Imported Cases',\n                                             'New Local Cases'])\n## fill up date and travel information\ndf_cases['Date'] = patient_data['Date']\ndf_cases['Travel History'] = patient_data['Travel History']\n## classify as local or imported cases\ndf_cases.loc[df_cases['Travel History'] == 0, 'New Local Cases'] = 1\ndf_cases.loc[df_cases['Travel History'] == 1, 'New Imported Cases'] = 1\ndf_cases['New Local Cases'] = df_cases['New Local Cases'].fillna(0)\ndf_cases['New Imported Cases'] = df_cases['New Imported Cases'].fillna(0)\n\n## Sum up all the cases of the same date \ndf_cases = df_cases.groupby(['Date'])['New Imported Cases', 'New Local Cases'].sum().sort_values('Date').reset_index()\ndf_cases['New Confirmed Cases'] = df_cases['New Imported Cases'] + df_cases['New Local Cases']\n\n## Adding all missing date so the date is continous (Join 2 dataframe):\ndf_cases = df_date.set_index('Date').join(df_cases.set_index('Date'))\n\ndf_cases['New Local Cases'] = df_cases['New Local Cases'].fillna(0)\ndf_cases['New Imported Cases'] = df_cases['New Imported Cases'].fillna(0)\ndf_cases['New Confirmed Cases'] = df_cases['New Confirmed Cases'].fillna(0)\n\n## Add accumulative cases column 'Confirmed Cases'\ndf_cases['Confirmed Cases'] = df_cases['New Confirmed Cases'].cumsum()\n## Add accumulative imported and locally transmitted cases column 'Imported Cases', 'Local Cases'\ndf_cases['Imported Cases'] = df_cases['New Imported Cases'].cumsum()\ndf_cases['Local Cases'] = df_cases['New Local Cases'].cumsum()\n\n## Add number of hospitalized patients by date (from 'vietnam_hospitalized_patient_info' )\ndf_cases = df_cases.join(vietnam_hospitalized_patient_info.set_index('Date'))\ndf_cases","03944088":"### DATAFRAME FOR PROVINCE\/REGION INFORMATION (THE SAME FORMAT AS WORLD DATA (JOHNS HOPKINS UNIVERSITY - CSSEGI):\n# Name 'vietnam_cases_all_times'\n\n### STEP 1: CREATE A DATAFRAME OF NEW CASES IN EACH PROVINCE IN EACH AVAILABLE DATE\n\n## Create the dataframe\nvietnam_patient_extracted_data = pd.DataFrame(columns = \n                                              ['Province\/State','Date','New Confirmed Cases', 'Deaths'])\n\n# Add 'Treatment Location' as 'Province\/State' and 'Date'\nvietnam_patient_extracted_data['Province\/State'] = vietnam_patient_data['Treatment Location']\nvietnam_patient_extracted_data['Date'] = vietnam_patient_data['Date']\n## Fill 1 for each line in 'Confirmed Cases' since every row in vietnam_patient_data is a single case\nvietnam_patient_extracted_data['New Confirmed Cases'] = vietnam_patient_extracted_data['New Confirmed Cases'].fillna(1)\nvietnam_patient_extracted_data['Deaths'] = vietnam_patient_extracted_data['Deaths'].fillna(0)\n#vietnam_patient_extracted_data.tail()\n# Sum up all the cases of the same date and location\nvietnam_patient_extracted_data_sum = vietnam_patient_extracted_data.groupby(['Date',\n            'Province\/State'])['New Confirmed Cases', 'Deaths'].sum().sort_values('Date').reset_index()\nvietnam_patient_extracted_data_sum\n\n### STEP 2: CREATE A DATAFRAME OF SINGLE COLUMN FOR DATE (FROM START DATE TO END DATE)\n\nstart_date = '01\/22\/2020'\n# end_date =  vietnam_patient_extracted_data_sum['Date'].iloc[-1]\n# end_date =  patient_data['Date'].iloc[-1]\nend_date =  vietnam_hospitalized_patient_info['Date'].iloc[-1]\n\n## create an array of date from start_date to end_date, one per day\narr_date = pd.date_range(start = start_date, end = end_date)\n\n## create dataframe\ndf_date = pd.DataFrame(columns = ['Date'])\n## Add 'Date'\ndf_date['Date'] = arr_date\n## Convert date from string to datetime type\ndf_date['Date'] = pd.to_datetime(df_date['Date'])\n#df_date['Date'] = pd.to_datetime(df_date['Date']).dt.strftime('%m\/%d\/%Y')\n\n### Step 3: CREATE THE TARGET DATAFRAME \n\n## Target dataframe is 'vietnam_cases_all_times'\nvietnam_cases_all_times = pd.DataFrame(columns = ['Date','Province\/State','New Confirmed Cases', 'Deaths',\n                                                  'Lat', 'Long', 'Confirmed Cases'])\n\n### Function to extract data from a single province and add that to the vietnam_cases_all_times\ndef extract_combine_province(province_name):\n    \n    df_province = df_date\n    df_province_extracted = vietnam_patient_extracted_data_sum[vietnam_patient_extracted_data_sum['Province\/State'] == province_name]\n    ## Join 2 data:\n    df_province = df_province.set_index('Date').join(df_province_extracted.set_index('Date'))\n    ## Add Lat and Long value\n    lat = vietnam_region_info.loc[vietnam_region_info['Province\/State'] == province_name, 'Lat'].values[0]\n    long = vietnam_region_info.loc[vietnam_region_info['Province\/State'] == province_name,'Long'].values[0]\n    df_province['Lat'] = lat\n    df_province['Long'] = long\n    \n    ## Fill NaN with 0\n    df_province['New Confirmed Cases'] = df_province['New Confirmed Cases'].fillna(0)\n    df_province['Deaths'] = df_province['Deaths'].fillna(0)\n    df_province['Province\/State'] = df_province['Province\/State'].fillna(province_name)\n    df_province = df_province.reset_index()\n    ## Add accumulative cases column 'Confirmed Cases'\n    sum_case = df_province['New Confirmed Cases']\n    sum_case = sum_case.cumsum()\n    df_province['Confirmed Cases'] = sum_case\n    return df_province\n\n### Add the data of each province\n## The provinces that have confirmed cases in the dataset\nprovinces = vietnam_patient_extracted_data_sum['Province\/State'].unique()\n\nfor province_name in provinces:\n    region_df = extract_combine_province(province_name)  \n    vietnam_cases_all_times = vietnam_cases_all_times.append(region_df)\nvietnam_cases_all_times","f6d16ee1":"# Brief overview of cases\n\n## Extract the final date in the dataframe\ndate = vietnam_cases_all_times['Date'].iloc[-1]\nimported_cases = int(df_cases['Imported Cases'].iloc[-1])\nlocal_cases = int(df_cases['Local Cases'].iloc[-1])\nactive_cases = int(df_cases['No of Hospitalized Patients'].iloc[-1])\nmost_recent_data = vietnam_cases_all_times[vietnam_cases_all_times['Date'] == date]\nprint('Vietnam COVID-19 data on date {}:\\n'.format(date))\nprint('Total confirmed cases:   {}'.format(int(most_recent_data['Confirmed Cases'].sum())))\nprint('Total imported cases:    {}'.format(imported_cases))\nprint('Total local cases:       {}'.format(local_cases))\nprint('Total death cases:         {}'.format(int(most_recent_data['Deaths'].sum())))\nprint('Total active cases:       {}'.format(active_cases))\nprint('Total reinfected cases:   {}'.format(patient_data['Re-Infected'].count()))","3239b015":"## GRAPH OF CASES\n\n# reset style use\nmpl.rcParams.update(mpl.rcParamsDefault)\n# formate for date on graph\nmyFmt = DateFormatter('%m\/%d')\n\nfig, ax = plt.subplots(figsize  = (10,3))\n\n#draw plot\nax.plot(df_cases.index, df_cases['Confirmed Cases'], '-o', markersize = 2, color = 'red', markevery=[-1])\nax.plot(df_cases.index, df_cases['No of Hospitalized Patients'],'-o',markersize = 2, color = 'darkviolet', markevery=[-1])\n\n# decoration\nax.set_ylabel('Total Cases', fontdict = {'fontweight':'bold'})\nax.legend(['Confirmed Cases', 'Active Cases'])\nax.set_title('COVID-19 Cases: Trend in Vietnam', loc = 'left', fontdict = {'fontweight':'bold'})\nax.set_xlabel('Date (2020)', fontdict = {'fontweight':'bold'})\n\n# axis\nax.xaxis.set_major_formatter(myFmt)\nstart, end = ax.get_xlim()\nax.set_xlim(left = start)\nax.set_ylim(top = 300)\nx_value = np.arange(start, end, 8)\nax.xaxis.set_ticks(x_value)\n\n# Annotation\nend_date =  mdates.date2num(df_cases.index[-1])\ncase_value = []\ncase_value.append(df_cases['Confirmed Cases'].iloc[-1])\ncase_value.append(df_cases['No of Hospitalized Patients'].iloc[-1])\n\n# Add annotation\nfor val in case_value:\n    plt.annotate(int(val), # this is the text\n                 (end_date,val), # this is the point to label\n                 color = '#333F4B',fontsize = 8, weight = 'bold',\n                 textcoords = \"offset points\", # how to position the text\n                 xytext = (6,-2), # distance from text to points (x,y)\n                 ha = 'left') # \nplt.savefig('Covid19Cases_Vietnam_trend.png', dpi = 200, bbox_inches='tight')    \nplt.show()\n","27f31a9f":"## The number of cases for each province\/city in Vietnam\n# Convert date to string for map\nvietnam_cases_all_times['Date'] = pd.to_datetime(vietnam_cases_all_times['Date']).dt.strftime('%m\/%d\/%Y')\n\nfig = px.line(vietnam_cases_all_times,\n              x='Date', y='Confirmed Cases', color='Province\/State', \n              color_discrete_sequence = px.colors.diverging.Spectral)\n\nfig.update_layout(title = {'text': 'Confirmed Cases for Each Province\/City in Vietnam', 'x': 0.5},\n                   xaxis_title = 'Date (2020)',\n                   yaxis_title = 'Confirmed Cases',\n                 legend = {'title': None})\n# set up axis\nfig.update_xaxes(nticks=6)\n\nfig.show()","eec10470":"##### *********  MAP - STYLE 2  *********\n# Using plotly.express (px)\n# Using dataframe vietnam_cases_all_times\n\n# Convert date to string for map\nvietnam_cases_all_times['Date'] = pd.to_datetime(vietnam_cases_all_times['Date']).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(\n    vietnam_cases_all_times, lat = 'Lat', lon = 'Long', \n    color = 'Confirmed Cases', size = 'Confirmed Cases', \n    scope = 'asia',\n    animation_frame = 'Date', \n    range_color = [0, vietnam_cases_all_times['Confirmed Cases'].max()],  \n    hover_name = 'Province\/State',\n    center = {'lat': 16, 'lon': 108}\n)\n#range_color = [0, vietnam_cases_all_times['Confirmed Cases'].max()], \nfig.update_layout(margin={\"r\": 0,\"t\": 0, \"l\": 0,\"b\": 0})\nfig.layout.geo.projection = go.layout.geo.Projection(scale = 5)\nfig.show()","c9b6aff8":"color_case = 'YlOrRd'\ncolor_death = 'YlOrRd'\nprovince_cases = most_recent_data.groupby('Province\/State')['Confirmed Cases', 'Deaths'].sum()\nprovince_cases.sort_values('Confirmed Cases', ascending = False).reset_index()\\\n            .style.background_gradient(cmap = color_case, subset = ['Confirmed Cases'])\\\n            .background_gradient(cmap = color_death, subset = ['Deaths'])","5d519754":"##### *********  MAP - STYLE 2  *********\n# Using folium\n\n#drop the province\/city that has 0 'Confirmed Cases' (if any)\nmost_recent_data = most_recent_data [most_recent_data['Confirmed Cases'] != 0]\n\n#setting style for map\nmapstyle = 'CartoDB positron'\nline_color = '#da635eff'\nfill_color = '#da635eff'\nfill_opacity = 0.6\nline_weight = 1.5\n# other styles: 'OpenStreetMap', \"Stamen Terrain\u201d, \u201cStamen Toner\u201d, \u201cStamen Watercolor\u201d\n\nvietnam_map = folium.Map(location = [16,108], zoom_start = 5, max_zoom = 12, min_zoom = 2, tiles = mapstyle)\n\nfor lat, long, case, name in zip(most_recent_data['Lat'], most_recent_data['Long'], most_recent_data['Confirmed Cases'],\\\n                                most_recent_data['Province\/State']):\n    folium.CircleMarker([lat, long], radius = (int((np.log(case + 1.00001))) + 0.8) * 5,\n                       popup = ('<strong>Province\/City<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(case) + '<br>'),\\\n                       color = line_color, weight= line_weight, \\\n                        fill_color = fill_color, fill_opacity = fill_opacity).add_to(vietnam_map)\n\n#opacity = fill_opacity, \n ### Add text\ngrid_pt=(51.4,0.05)\nW=grid_pt[1]-0.005\nE=grid_pt[1]+0.005\nN=grid_pt[0]+0.005\nS=grid_pt[0]-0.005\n\n\nupper_left=(N,W)\nupper_right=(N,E)\nlower_right=(S,E)\nlower_left=(S,W)\nline_color='red'\nfill_color='red'\nweight=2\ntext='text'\nedges = [upper_left, upper_right, lower_right, lower_left]\nvietnam_map.add_child(folium.vector_layers.Polygon(locations=edges, color=line_color, fill_color=fill_color,\n                                              weight=weight, popup=(folium.Popup(text))))\n\n# Save map\nvietnam_map.save(\".\/vietnam_map.html\")\nvietnam_map","31c72f2c":"## GRAPH OF CASES\n# reset style use\nmpl.rcParams.update(mpl.rcParamsDefault)\n# formate for date on graph\n\nmyFmt = DateFormatter('%m\/%d')\n# Layout: 2x1\nfig, axs = plt.subplots(2,1, figsize  = (10,6), sharex = True)\n\n## GRAPH OF NEW CASES - DAILY CASES\nwidth = 0.5\naxs[0].bar(df_cases.index, df_cases['New Imported Cases'], width, color = 'tomato',alpha=0.8 )\naxs[0].bar(df_cases.index, df_cases['New Local Cases'], width, bottom = df_cases['New Imported Cases'], color = 'mediumpurple', alpha=0.8 )\naxs[0].set_ylabel('New Cases', fontdict = {'fontweight':'bold'})\naxs[0].legend(['New Imported', 'New Locally Transmitted'], loc = 'upper left')\naxs[0].set_title('Vietnam COVID-19 Daily Confirmed Cases', loc = 'left', fontdict = {'fontweight':'bold'})\naxs[0].set_ylim(top = 40)\n\n#Annotation \nfirstwave = dt.datetime(2020, 2, 4)\nsecondwave = dt.datetime(2020, 3, 26)\naxs[0].annotate('The first wave of COVID-19',color = 'firebrick',\n            xy = (mdates.date2num(firstwave), 5), \n            xytext = (mdates.date2num(firstwave), 14),\n            ha = \"center\", va = \"bottom\",\n            arrowprops = dict(facecolor='peachpuff', edgecolor = 'none', shrink = 0.01)\n               )\n\naxs[0].annotate('The second wave of COVID-19',color = 'firebrick',\n            xy = (mdates.date2num(secondwave), 22), \n            xytext = (mdates.date2num(secondwave), 30),\n            ha = \"center\", va = \"bottom\",\n            arrowprops = dict(facecolor='peachpuff', edgecolor = 'none', shrink = 0.01)\n            )\n\n# CUMULLATIVE CASES - TOTAL CASES, IMPORTED AND LOCAL TRANSMITTED CASES\n# plot\naxs[1].plot(df_cases.index, df_cases['Confirmed Cases'], '-o', markersize = 2, color = 'red', markevery=[-1])\naxs[1].plot(df_cases.index, df_cases['Imported Cases'], '-o', markersize = 2, color = 'tomato', markevery=[-1])\naxs[1].plot(df_cases.index, df_cases['Local Cases'], '-o', markersize = 2, color = 'mediumpurple', markevery=[-1])\n# decoration\naxs[1].set_ylabel('Total Cases', fontdict = {'fontweight':'bold'})\naxs[1].legend(['Confirmed', 'Imported','Locally Transmitted'])\naxs[1].set_title('COVID-19 Cases: Trend in Vietnam', loc = 'left', fontdict = {'fontweight':'bold'})\naxs[1].set_xlabel('Date (2020)', fontdict = {'fontweight':'bold'})\n# set up axis\naxs[1].xaxis.set_major_formatter(myFmt)\nstart, end = axs[1].get_xlim()\naxs[1].set_xlim(left = start)\naxs[1].set_ylim(top = 300)\nx_value = np.arange(start, end, 8)\naxs[1].xaxis.set_ticks(x_value)\n\n# Annotation\nend_date =  mdates.date2num(df_cases.index[-1])\ncase_value = []\ncase_value.append(df_cases['Confirmed Cases'].iloc[-1])\ncase_value.append(df_cases['Imported Cases'].iloc[-1])\ncase_value.append(df_cases['Local Cases'].iloc[-1])\n\n# Add annotation\nfor val in case_value:\n    plt.annotate(int(val), # this is the text\n                 (end_date,val), # this is the point to label\n                 color = '#333F4B',fontsize = 8, weight = 'bold',\n                 textcoords = \"offset points\", # how to position the text\n                 xytext = (6,-2), # distance from text to points (x,y)\n                 ha = 'left') # \nplt.savefig('Covid19Cases_Vietnam_DailyCases.png', dpi = 200, bbox_inches='tight')  \nplt.show()","6148b4c1":"## GRAPH OF CASES\n# reset style use\n# mpl.rcParams.update(mpl.rcParamsDefault)\n# # formate for date on graph\n\n# myFmt = DateFormatter('%m\/%d')\n# fig, ax = plt.subplots(figsize  = (10,3))\n\n# ## GRAPH OF NEW CASES - DAILY CASES\n# width = 0.5\n# ax.bar(df_cases.index, df_cases['New Imported Cases'], width, color = 'tomato',alpha=0.8 )\n# ax.bar(df_cases.index, df_cases['New Local Cases'], width, bottom = df_cases['New Imported Cases'], color = 'mediumpurple', alpha=0.8 )\n# ax.set_ylabel('New Cases', fontdict = {'fontweight':'bold'})\n# ax.legend(['New Imported', 'New Locally Transmitted'], loc = 'upper left')\n# ax.set_title('Vietnam COVID-19 Daily Confirmed Cases', loc = 'left', fontdict = {'fontweight':'bold'})\n# ax.set_ylim(top = 40)\n\n# #Annotation \n# firstwave = dt.datetime(2020, 2, 4)\n# secondwave = dt.datetime(2020, 3, 26)\n# ax.annotate('The first wave of COVID-19',color = 'firebrick',\n#             xy = (mdates.date2num(firstwave), 5), \n#             xytext = (mdates.date2num(firstwave), 14),\n#             ha = \"center\", va = \"bottom\",\n#             arrowprops = dict(facecolor='peachpuff', edgecolor = 'none', shrink = 0.01)\n#                )\n\n# ax.annotate('The second wave of COVID-19',color = 'firebrick',\n#             xy = (mdates.date2num(secondwave), 22), \n#             xytext = (mdates.date2num(secondwave), 30),\n#             ha = \"center\", va = \"bottom\",\n#             arrowprops = dict(facecolor='peachpuff', edgecolor = 'none', shrink = 0.01)\n#             )\n\n\n# ax.set_xlabel('Date (2020)', fontdict = {'fontweight':'bold'})\n# # set up axis\n# ax.xaxis.set_major_formatter(myFmt)\n# start, end = ax.get_xlim()\n# ax.set_xlim(left = start)\n# x_value = np.arange(start, end, 8)\n# ax.xaxis.set_ticks(x_value)\n\n# plt.savefig('Covid19Cases_Vietnam_Daily_Alone.png', dpi = 200, bbox_inches='tight')  \n# plt.show()","0e73ec8e":"## TRAVEL COUNTRY - THE LIST OF COUNTRY WHERE THE IMPORTED CASES WERE POSSIBLY EXPOSURED AND GOT INFECTED\n# Plot the number of cases for each country, dividing into 2 groups: first and second infection waves:\n\n# Prepare data for plot\ngroup_name = df_travel_country_firstwave['Country'].tolist()\ngroup_name.extend(df_travel_country_secondwave['Country'].tolist())\ngroup_size = df_travel_country_firstwave['Number of Cases'].tolist()\nsub_group1 = len(group_size)\ngroup_size.extend(df_travel_country_secondwave['Number of Cases'].tolist())\nsub_group2 = len(group_size) - sub_group1\n\n\n## Choose the position of each barplots on the x-axis, left 5 empty positions between 2 waves\ngroup_pos1 = np.arange(0,sub_group1)\nskip_step = sub_group1 + 7\ngroup_pos2 = np.arange(skip_step,sub_group2 + skip_step)\nx_pos = np.concatenate((group_pos1, group_pos2))\n\n# Draw plot\nfig, ax = plt.subplots(figsize=(10,8), dpi = 80)\nax.vlines(x = x_pos, ymin = 0, ymax = group_size, color = 'firebrick', alpha = 0.7, linewidth = 2)\nax.scatter(x = x_pos, y = group_size, color = 'firebrick', alpha = 0.7)\n\n\n# Annotate\nfor i in range(0,len(x_pos)):\n    ax.text(x_pos[i], group_size[i] + 2, s = f'{group_name[i]} ({group_size[i]})', wrap = True, rotation = 90, \n            fontsize = 10, va = 'center_baseline')\nax.set_ylabel('Cases', fontsize =  'large', fontdict = {'fontweight':'bold'})\nax.set_title('Where Vietnam COVID-19 Imported Cases Had Travelled', loc = 'left', \n             fontsize =  'x-large', fontdict = {'fontweight':'bold'})\n\n# Make the chart more beautiful\n\n# Beautiful axis\nax.set_ylim(bottom = 0, top = 85)\nax.set_xlim(left = -4)\n\n# remove top and right spines\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\n\n# hide grid\nax.grid(False)\n\n# Change the xticks\nplt.xticks([0.5,statistics.median(group_pos2)], ['First Wave', 'Second Wave'], \n           fontsize =  'large', fontweight = 'bold')\n# remove tick on the x axis since tick is not reflect the position of first and second wave\nplt.tick_params(axis = \"x\", which = \"both\", bottom = False, top = False)\n\n# Show graphic\nplt.savefig('TravelHistories.png', dpi = 200, bbox_inches='tight') \nplt.show()\n\n#### Draw plot - horizontal\n# fig, ax = plt.subplots(figsize=(6, 18), dpi= 80)\n# ax.hlines(y=y_pos, xmin=0, xmax=group_size, color='firebrick', alpha=0.7, linewidth=2)\n# ax.scatter(y=y_pos, x=group_size, color='firebrick', alpha=0.7)\n\n# # Annotate\n# for i in range(0,len(y_pos)):\n#     ax.text(group_size[i] + 1, y_pos[i], s = f'{group_name[i]} ({group_size[i]})', \n#             horizontalalignment = 'left', verticalalignment = 'center', fontsize = 10)","8187dcd2":"### LIST OF COUNTRY WHERE VIETNAM GOT THE COVID-19 IMPORTED CASES\n\n## Simple style to visualize the list of country - Not in use, kept as reference\n\n# df_travel_country.reset_index(drop=True)\n# df_travel_country.style.background_gradient(cmap = 'YlOrRd', subset = ['Number of Cases'])\n\n## Another way to visualize the data\n# Using matplotlib.pyplot plt\n\ndf_travel_country1 = df_travel_country.sort_values('Number of Cases', ascending = True).reset_index(drop=True)\ndf_travel_country1 = df_travel_country1.set_index('Country')\n# we first need a numeric placeholder for the y axis\nmy_range = list(range(1,df_travel_country1.shape[0]+1))\n\n#set color\ncolor_bar = 'tomato'\ncolor_marker = 'red'\n# set font\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['font.sans-serif'] = 'Helvetica'\n# set the style of the axes and the text color\nplt.rcParams['axes.edgecolor']='#333F4B'\nplt.rcParams['axes.linewidth']=0.8\nplt.rcParams['xtick.color']='#333F4B'\nplt.rcParams['ytick.color']='#333F4B'\nplt.rcParams['text.color']='#333F4B'\n# hide grid\nax.grid(False)\n\nfig, ax = plt.subplots(figsize = (6,6)) \n# represented by the specific expense percentage value.\nplt.hlines(y = my_range, xmin = 0, xmax = df_travel_country1['Number of Cases'],\n           color = color_bar, alpha = 0.8, linewidth = 5)\n\n# create for each expense type a dot at the level of the expense percentage value\nplt.plot(df_travel_country1['Number of Cases'], my_range, \"o\", markersize=5, color=color_marker, alpha=0.9)\n\n# set labels\nax.set_xlabel('Number of Cases', fontsize = 10, fontweight='black', color = '#333F4B')\nax.set_ylabel('')\n\n# Add annotation\n# zip joins x and y coordinates in pairs\nfor x,y in zip(df_travel_country1['Number of Cases'],my_range):\n\n    label = x\n\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 color = '#333F4B',\n                 textcoords = \"offset points\", # how to position the text\n                 xytext = (6,-2), # distance from text to points (x,y)\n                 ha = 'left') # \n    \n# set axis\nax.tick_params(axis='both', which='major', labelsize = 10)\nplt.yticks(my_range, df_travel_country1.index)\n\n# add an horizonal label for the y axis \nfig.text(0, 0.92, 'Travel Countries Of Vietnam COVID-19 Patients Before Confirmed Positive',\n         fontsize = 12, fontweight = 'black', color = '#333F4B')\n\n# change the style of the axis spines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# set the spines position\nax.spines['bottom'].set_position(('axes', 0))\nax.spines['left'].set_position(('axes', 0.0))\n\nplt.savefig('hist2.png', dpi = 100, bbox_inches = 'tight')\nplt.show()","583179bb":"## Basic pie chart for infection source\n\npull_val = [0]* len(df_travel_country1['Number of Cases'])\npull_val[-1] = 0.1\n\n# pull is given as a fraction of the pie radius\nfig = go.Figure(data=[go.Pie(labels=df_travel_country1['Number of Cases'].index, values=df_travel_country1['Number of Cases'], \n                             pull=pull_val, marker_colors = px.colors.qualitative.Light24, sort = False, \n                   )])\n\nfig.show()","1eaf5c13":"## Prepare value for charts\n# data for left plot\nnationality_list = list(patient_nationality['Patient Nationality'].value_counts())\nall_cases_labels = [\"Vietnamese\", \"Foreigners\"]\n# data for right plot\nforeigners_list = dict(patient_nationality[patient_nationality['Nationality'] != 'Vietnam']['Nationality'].value_counts())\nnames, values = zip(*foreigners_list.items())\n\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows = 1, cols = 2, specs = [[{'type':'domain'}, {'type':'domain'}]])\n# all cases chart\ncolors = ['lightskyblue', 'plum']\nfig.add_trace(go.Pie(labels = all_cases_labels, values = nationality_list,texttemplate = \"%{percent} (%{value})\", \n                     marker_colors = colors, name = \"All COVID-19 cases\"),\n              1, 1)\nfig.add_trace(go.Pie(labels = names, values = values, name = \"Foreigner patients\", \n                    marker_colors = px.colors.qualitative.Pastel, sort = False, \n                    direction = 'clockwise',texttemplate = \"%{percent} (%{value})\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.6, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text = \"<b>Nationality of Vietnam COVID-19 Patients<\/b>\",\n    # Add annotations in the center of the donut pies.\n    annotations = [dict(text = '<b>All\\nCases<\/b>', x = 0.15, y = 0.5, font_size = 16, showarrow = False),\n                 dict(text = '<b>Foreigners<\/b>', x = 0.87, y = 0.5, font_size = 16, showarrow = False)])\nfig.show()","158a132a":"# Plot the number of cases regarding gender, nationality and travel history\ncolors = ['#98D8D8','#EE99AC']\n## Setting up for plot\nsns.set(style='whitegrid', rc={\"grid.linewidth\": 0.1})\n\n## Drawing plot\ng = sns.catplot(x = \"Patient Nationality\", hue = \"Gender\", col = 'Travel History', palette = colors,\n            data = patient_nationality, kind = 'count', height = 4, aspect = 0.7)\n\n## Decoration\nplt.ylim([0,80])\n\ng.fig.subplots_adjust(wspace=.5, hspace=.05)\n\ng.fig.suptitle('Vietnam COVID-19 Patients: Gender, Nationality and Travel History', y = 1.1, weight = 'bold')\ng.set_titles(\"{col_name}\")\ng.set(ylabel ='Cases') \ng.set(xlabel ='')\n\nfor i in np.arange(2):\n        ax1 = g.facet_axis(0,i)\n        for p in ax1.patches:\n            if str(p.get_height()) != 'nan':\n                ax1.text(p.get_x() + 0.15, p.get_height()+ 0.5, '{}'.format(p.get_height()),size='small')\n\nplt.setp(g._legend.get_title(), fontsize=12, weight = 'bold')\nplt.show()","665021f7":"# Plot the distribution of patients' age regarding gender, nationality and travel history\ncolors = ['#98D8D8','#EE99AC']\n\n## Setting up for plot\nsns.set(style='whitegrid', rc={\"grid.linewidth\": 0.1})\n\n## Drawing plot\ng = sns.catplot(x = \"Age\", y = \"Travel History\",\n            hue = \"Gender\", col = \"Patient Nationality\",\n            data = patient_nationality,\n            orient = \"h\", height = 5, aspect = 1, palette = colors,\n            kind = \"violin\", dodge = True, cut = 0, bw = .2)\n\n## Decoration\nplt.xlim([0,90])\nsns.set_style({\"ytick.left\":False},)\ng.fig.suptitle('Vietnam COVID-19 Patients: Age Distribution Per Gender, Nationality and Travel History', \n               fontsize = 15, y = 1.1, weight = 'bold')\ng.set_titles(\"{col_name}\", fontdict = {'fontweight':'bold'})\ng.set_xlabels(fontdict = {'fontweight':'bold'})\ng.set_ylabels('', fontdict = {'fontweight':'bold'})\ng.set(ylabel ='')\nplt.setp(g._legend.get_title(), fontsize=12, weight = 'bold')\n\ng.set_yticklabels(['Imported Cases', 'Local Cases'], fontdict = {'fontweight':'bold'})\n\nplt.tight_layout()\nplt.savefig('Covid19Cases_Vietnam_AgeGender.png', dpi = 200, bbox_inches='tight') \nplt.show()","d4cb5933":"# PATIENT SYMPTOMS - BRIEF GRAPH\n# Using seaborn\n\nplt.figure(figsize=(15,5))\nfig = sns.countplot(y = 'Health Condition When Confirmed', data = patient_data,\n                   palette = 'Set2')\nfig.set_title('Symptoms of Vietnam COVID-19 Patients', fontdict = {'fontsize':20})\nfig.set_xlabel('Number of Cases')\nplt.show()","816a2397":"# PATIENT SYMPTOMS - PIE CHART\n# Using plotly.graph_objs\n\n## Counting the group of symptoms\nsymptoms = patient_data['Health Condition When Confirmed'].tolist()\ncounter = collections.Counter(symptoms)\n\n## Make an order symptom group so that the pie chart will served its purpose\nsymptom_group = (\n     'Not reported',\n     'Not reported (Stable condition)',\n     'No symptom when positive',\n    'Cold\/Flu-like symptoms',\n     'COVID-19 (with\/without cold\/flu-like symptoms)',\n    'Showing symptoms (no detail)')\n\n## Extract the group_size for graph\ngroup_size = []\nfor key in symptom_group:\n    group_size.append(counter[key])\n\n# Rename the name\nlabel_group = (\n     'Not reported',\n     'Not reported (stable condition)',\n     'Showing no symptoms',\n    'Cold\/flu-like symptoms',\n     'COVID-19 symptoms',\n    'Showing symptoms (no detail)')\n\n## Picking colors\ncolors = ['lightgray', 'silver','#66b3ff', '#ff9999', 'tomato','#ffcc99']\nfig = go.Figure(data = [go.Pie(labels = label_group, values = group_size, hole = .7,\n                             marker_colors = colors,textinfo = 'percent+label',\n                              insidetextorientation = 'radial', sort = False, direction = 'counterclockwise',\n                             rotation = 220, texttemplate = \"%{label} (%{percent})\",\n                            pull = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01], \n                            showlegend = False)])\n\nfig.update_traces(textfont_size = 14)\nfig.show()","91918476":"# PATIENT SYMPTOMS - DISPLAYING ASYMPTOMATIC VS SYMPTOMATIC CASES - NESTED PIE CHART\n# Using matplotlib pyplot\n\n## Counting the group of symptoms\nsymptoms = patient_data['Health Condition When Confirmed'].tolist()\ncounter = collections.Counter(symptoms)\n\n#### MAKING SUBGROUP (INSIDE CIRCLE) (symptom_group and group_size)\n## Make an order symptom group so that the chart will served its purpose\nsymptom_group = (\n     'Not reported',\n     'Not reported (Stable condition)',\n     'No symptom when positive',\n    'Cold\/Flu-like symptoms',\n     'COVID-19 (with\/without cold\/flu-like symptoms)',\n    'Showing symptoms (no detail)')\n\n## Extract the group_size for graph\ngroup_size = []\nfor key in symptom_group:\n    group_size.append(counter[key])\n    \ngroup_size_labels = []\nfor i in group_size:\n    label = (i\/sum(group_size))*100\n    group_size_labels.append(f\"{label:.1f}%\")\n\n#### MAKING MAINGROUP (OUTSIDE CIRCLE) (symptom_main_value, symptom_main_percentage and symptom_main_label)\nsymptom_main_value = []\nsymptom_main_percentage = []\nsymptom_main_value.append(sum(group_size[:3]))\nsymptom_main_value.append(sum(group_size[3:]))\nfor i in symptom_main_value: \n    symptom_main_percentage.append(100 * (i\/sum(symptom_main_value)))\n    \nsymptom_main_label = (\n     'Asymptomatic\\n(presumptive) ({:^.1f}%)'.format(symptom_main_percentage[0]),\n     'Symptomatic\\n({:^.1f}%)'.format(symptom_main_percentage[1]))\n\n#### DRAWING NESTED PIE CHART\n# Create colors\na, b, c = [plt.cm.Greys, plt.cm.Blues, plt.cm.OrRd]\n\n## Explosion\nexplode1 = (0.008, 0.008)\nexplode2 = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)\n\n# First Ring (outside)\nfig, ax = plt.subplots()\nfig.set_dpi(200)\nax.axis('equal')\nmypie, _ = ax.pie(symptom_main_value, radius = 1.3, \n                  labels = symptom_main_label, labeldistance = 1.05, textprops = {'fontsize': 10,'weight':'bold'},\n                  startangle = 90, explode = explode1,\n                  colors = [b(0.5), c(0.6)] )\n\nplt.setp( mypie, width=0.3, edgecolor='white')\n# Second Ring (Inside)\nmypie2,_ = ax.pie(group_size, radius = 1.3-0.3, startangle = 90,\n                   explode = explode2,\n                    labels = group_size_labels, labeldistance = 0.7,textprops = {'fontsize': 7,'weight':'bold'},\n                  rotatelabels = True,\n                   colors=[a(0.3), a(0.2), b(0.3),\n                           c(0.3), c(0.2), c(0.1)])\n    \nplt.setp( mypie2, width=0.4, edgecolor='white')\n\nplt.tight_layout() #Automatically adjust subplot parameters to give specified padding.\n\n# Adding legend\nlegend_elements = [\n                Patch(facecolor = a(0.3), label = symptom_group[0]),\n                Patch(facecolor = a(0.2), label = symptom_group[1]),\n                Patch(facecolor = b(0.3), label = symptom_group[2]),\n                Patch(facecolor = c(0.3), label = symptom_group[3]),\n                Patch(facecolor = c(0.2), label = symptom_group[4]),\n                Patch(facecolor = c(0.1), label = symptom_group[5]),\n]\nleg = ax.legend(handles=legend_elements, fontsize = 10, loc = (-0.8,0.7), frameon = False,\n         title = 'Detail Breakdown of Symptoms\\n', title_fontsize = 12)\nleg._legend_box.align = \"left\"\n\n# save and show\nplt.savefig('pie_symptom.png', dpi = 200, bbox_inches='tight')  #after plt.show() is called, a new figure is created, need to save first\nplt.show()","00272160":"## Plotting the detail symptoms of Vietnam COVID-19 patients\n\n# Preparing the data\ndetail_symptoms = patient_data['Detail Symptoms When Confirmed (clean up)'].dropna().tolist()\nsymptoms = []\nfor symptom in detail_symptoms:    \n    name = symptom.split(', ')\n    symptoms.extend(name)\ncounter = collections.Counter(symptoms)\ndf_symptoms = pd.DataFrame(list(counter.items()),columns = ['Symptoms','Number of Cases'])\ndf_symptoms['Percentage'] = round(df_symptoms['Number of Cases']\/len(detail_symptoms)*100,2)\ndf_symptoms = df_symptoms.sort_values('Number of Cases', ascending = False).reset_index(drop=True)\n\n# SIMPLE LIST OF DETAIL SYMPTOMS\n#df_symptoms.style.background_gradient(cmap = 'YlOrRd', subset = ['Number of Cases', 'Percentage'])\n\n#### BEAUTIFUL CHART FOR DETAIL SYMPTOMS\n# Using matplotlib pyplot\n\ndf_symptoms1 = df_symptoms.sort_values('Number of Cases', ascending = True).reset_index(drop=True)\n\n# set font\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['font.sans-serif'] = 'Helvetica'\ncolor_bar = 'tomato'\ncolor_marker = 'red'\n# set the style of the axes and the text color\nplt.rcParams['axes.edgecolor'] = '#333F4B'\nplt.rcParams['axes.linewidth'] = 0.8\nplt.rcParams['xtick.color'] = '#333F4B'\nplt.rcParams['ytick.color'] = '#333F4B'\nplt.rcParams['text.color'] = '#333F4B'\n\n# we first need a numeric placeholder for the y axis\nmy_range=list(range(1,df_symptoms1.shape[0]+1))\n\nfig, ax = plt.subplots(figsize=(8,8))\n\n# Hide axis\nax.set_frame_on(False)\nax.get_xaxis().tick_bottom()\nax.axes.get_xaxis().set_visible(False)\n# Hide grid lines\nax.grid(False)\n\n# create for each expense type an horizontal line that starts at x = 0 with the length \n# represented by the specific expense percentage value.\nplt.hlines(y=my_range, xmin=0, xmax=df_symptoms1['Percentage'], color=color_bar, alpha=0.8, linewidth=5)\n\n# create for each expense type a dot at the level of the expense percentage value\nplt.plot(df_symptoms1['Percentage'], my_range, \"o\", markersize=5, color=color_marker, alpha=0.9)\n\n# set labels\nax.set_xlabel('Percentage', fontsize=15, fontweight='bold', color = '#333F4B')\nax.set_ylabel('')\n\n# Add annotation\n# zip joins x and y coordinates in pairs\nfor x,y in zip(df_symptoms1['Percentage'],my_range):\n\n    label = \"{:.2f}%\".format(x)\n\n    plt.annotate(label, # this is the text\n                 (x,y), # this is the point to label\n                 color = '#333F4B',\n                 textcoords = \"offset points\", # how to position the text\n                 xytext = (6,-2), # distance from text to points (x,y)\n                 ha = 'left') # \n    \n# set axis\nax.tick_params(axis='both', which='major', labelsize=14)\nplt.yticks(my_range, df_symptoms1['Symptoms'])\n\n# add an horizonal label for the y axis \nfig.text(0.1, 0.9, 'Detail Symptom of COVID-19 Symptomatic Cases', \n         fontsize = 15, fontweight = 'black', color = '#333F4B')\n\n# change the style of the axis spines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# set the spines position\nax.spines['bottom'].set_position(('axes', 0))\nax.spines['left'].set_position(('axes', 0.0))\n\n# remove tick on the x axis since tick is not reflect the position of first and second wave\nplt.tick_params(axis = \"y\", which = \"both\", left = False, right = False)\n\nplt.savefig('hist2.png', dpi = 100, bbox_inches='tight')\nplt.show()","2c593e03":"# Plotting the overall hospitalized time (for the patients that have recovered and been discharged)\ncolors = ['#98D8D8','#EE99AC']\n\n# plot\ng = sns.catplot(x = 'Nationality', y='Days Hospitalized Since Confirmed', hue = 'Gender', \n            kind = 'box', data = hospitalized_time, palette = colors)\n# decoration\ng.fig.suptitle('Vietnam COVID-19 Patients: Duration of Hospitalization Since Confirmed Positive', \n               fontsize = 12, y = 1.02, weight = 'bold')\nplt.setp(g._legend.get_title(), fontsize=12, weight = 'bold')\ng.set_xlabels(fontdict = {'fontweight':'bold'})\ng.set_ylabels('Days', fontdict = {'fontweight':'bold'})\nplt.savefig('Covid19Cases_HospitalizationDuration.png', dpi = 200, bbox_inches='tight') \nplt.show()","fa000a58":"### Vietnam got more COVID-19 confirmed imported cases from Europe and the US than from China.\n\n\nThe COVID-19 pandemic in Vietnam can be described with 2 different waves: \n\n* The first wave with most imported cases from China. The only case imported from the US (shown on chart) was from patient BN7, This case was likely infected when the patient transited for 2 hours in Wuhan, China from his trip from US to Vietnam. \n\n* The second wave started with many cases imported from Europe (dominantly from the UK).\n\nThis trend is pretty much consistent with what happen in the U.S. ([the U.S. got more COVID-19 cases from Europe than from China](https:\/\/theintercept.com\/2020\/04\/12\/u-s-got-more-confirmed-index-cases-of-coronavirus-from-europe-than-from-china\/))","1efe2f6b":"**Geographical map of cases by province**","e1ecc935":"With Vietnamese patients, more COVID-19 cases were female. While for foreigners, more COVID-19 cases were male. This trend likely reflected the occupation, travel purpose and the infection clusters in Vietnam. Let's look into the age distribution of the patients for more details.","168996a9":"**GOALS**\n\n* Download the dataset, clean up, perform exploratory data analysis (EDA) and transform data into different types of dataframe for further study\n\n* Explore the unique features of COVID-19 data in Vietnam","49596098":"**Thank you for reading this notebook.**\n\n**Please upvote if you like this notebook. Any comment\/feeback is much appreciated.**","604e8185":"# COVID-19 VIETNAM DATASET - AN OVERVIEW PICTURE OF THE PANDEMIC AT COUNTRY LEVEL","aa96c301":"## **INTRODUCTION**\n\n**CONTEXT: **\n\nOn December 31, 2019, Chinese officials informed the first case of COVID-19 in Wuhan (China). Around the end of January, 2020, many countries (the US, the UK, South Korea, etc.), including Vietnam, reported their first COVID-19 cases.\n\nWhile the number of confirmed cases and deaths has exponentially risen in other countries, **Vietnam currently only has 270 COVID-19 cases in TOTAL and NO FATALITIES**.\n\nOne remarkable thing in Vietnam is the fact that privacy laws are not as stringent as in the US, Canada or the EU. Therefore, **COVID-19 patient data in Vietnam is publicly available**. (To be more transparent and effective in COVID-19 contact tracing task, Vietnam COVID-19 patient data is publicly available on the Vietnam Ministry of Health's website and on the news.) \n\nThe tradeoff in personal privacy, in this circumtance, provides the data science community the opportunity to look into more details about the COVID-19 pandemic in many aspects, and at the country level.\n\nI hope this analysis will give you some inspirations on the topic.\n\n\n\n**DATA COLLECTION:**\n\nData was acquired by web scrapping with manually curated from the Vietnam Ministry of Health's website (https:\/\/ncov.moh.gov.vn\/) and other mainstream media in Vietnam (cited specifically in each data row).\n\n\n**DISCLAIMER:**\n\n* This is my personal work with no link to any organization. Although this analysis is data-driven and hence provides some insights about the government strategy as well as patient characteristics in Vietnam, my comments reflect my personal perspectives.\n* My results are based on the data collected from the Vietnam Health Ministry website and the mainstream media in Vietnam. Therefore, the data is likely to be biased and reflects what is publicly available on the internet. However, it can served as a good reference for someone who are curious about the COVID-19 pandemic in Vietnam.\n","9e3a74ca":"**2. EXPLORATORY DATA ANALYSIS - CLEAN UP **","068947ae":"**List of transformed dataframes:**\n\n- 'patient_data': all detail about patients\n\n- 'hospitalized_time': number of hospitalized days for each patient\n\n- 'df_travel_country': list of country patients did travel and got infected, \n2 data frames for the first and second wave of infection (secondwave was started with patient BN17) (df_travel_country_firstwave and df_travel_country_secondwave)\n\n- 'df_cases': all statistics about cases\n- 'vietnam_cases_all_times': Number of cases (confirmed cases, new cases, death) in each province\/region - same format as the world data format from Johns Hopkins University - CSSEG","9426c9ab":"**1.2 THE IMPORTED AND LOCALLY TRANSMITTED CASES**","adb5b568":"# EXPLORATORY DATA ANALYSIS","975c169f":"Among all Vietnam COVID-19 confirmed cases, only 35.2% patients showed symptoms right before or right after they tested positive for the virus. Remarkably, only 6.3% of cases reported [the COVID-19 associated symptoms](https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/symptoms-testing\/symptoms.html) (shortness of breath\/pressure in the chest\/mild pneumonia\/respiratory failure).\n\nThe majority of symptomatic patients reported mild common cold\/flu-like symptoms (such as fever, cough, sore throat, fatigue, etc.) (25.4% of all cases).","d2d5da2b":"**1. OVERVIEW ABOUT VIETNAM COVID-19 CASES**\n\n**1.1. GENERAL TREND IN VIETNAM**\n","8a88cdd9":"**4.1 Patient symptoms**","071c0649":"**4. VIETNAM COVID-19 PATIENTS: SYMPTOMS AND HOSPITALIZED TIME**\n","15ac4884":"The COVID-19 pandemic in Vietnam can be described with 2 different waves: the first wave (Jan 23 to Feb 16, 2020) and the second waves (Mar 06 to late April, 2020). The number of imported cases has pretty much remained dominant in the daily new COVID-19 cases.\n\nInterestingly, the increase in the number of COVID-19 imported and locally transmitted cases has the same trend, which added up to the total confirmed cases. In addition, the number of imported cases always larger than the locally transmitted cases. \n\n**=> This trend indicated that Vietnam has been able to control the outbreak consistently overtime.**","b7d96b49":"**A. ENVIRONMENT SETUP**","8ab21ef8":"\n**THE NUMBER OF COVID-19 CASES HAS REMAIN LOW IN VIETNAM**\n\nThe number of confirmed cases and deaths has exponentially risen and reached the grim milestone in many countries. Meanwhile, Vietnam currently has only 270 COVID-19 confirmed cases in total with NO FATALITIES.\n\nThe number of active cases (hospitalized patients) has also remained low. \n\n**Note that in Vietnam, all COVID-19 patients, including the asymptomatic cases, were hospitalized.** (In contrast, [in the US](https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/if-you-are-sick\/steps-when-sick.html), asymptomatic cases or people with mild symptoms are recommended to stay home except to get medical care.)","4f0d8816":"**3. VIETNAM COVID-19 PATIENTS: GENDER, AGE AND NATIONALITY**","75681a29":"**Geographical animation - Cases by Date in Vietnam**","ea65dfd4":"**2. WHERE DID VIETNAM GET THE COVID-19 IMPORTED CASES?**\n\nNOTE: DISEASES HAVE NO BORDERS, SO AS THIS NOVEL CORONAVIRUS. THEREFORE, THIS ANALYSIS IS EQUIVOCAL AND SHOULD BE VIEWED AS A REFERENCCE ONLY.\n\n\n* Some patients had traveled to other countries before coming back to Vietnam. They had transitted in different countries and might be infected during these short transit periods. For example, patient BN7 was likely infected when transitting for 2 hours in Wuhan, China from his trip from US to Vietnam.\n\n=> In this analysis, all the countries, including transit countries were included.\n\n* Some patients traveled to several coutries in Europe (no specific country was given), so the countried they traveled were classified as Europe.","1ff9260c":"**3. PATIENT DETAIL DATA - CLEAN UP, TRANSFORM AND EXTRACT**\n","44b5f66c":"Among symptomatic patients, the common symptoms include fever, cough and sore throat.","7a7f4b2d":"**CONVERTING THE DATA TO THE SAME FORMAT AS WORLD DATA (JOHNS HOPKINS UNIVERSITY - CSSEGI)**\n\n\nThe format for COVID-19 world data is as followed:\n\n* Containing 7 columns: 'Province\/State', 'Country\/Region', 'Lat', 'Long', 'Date', 'Confirmed Cases', 'Deaths'\n* Each row is a date since the start_date up to most updated date (current)\n* Start_date = '01\/22\/2020': First day available on COVID-19 world data (JOHNS HOPKINS UNIVERSITY - CSSEGI)\n\n\n*** NOTE:** \n\nThere are 2 possible columns to use as 'Province\/State': 'Treatment Location' and 'Detection Location'.\n\n=> In here, I chose 'Province\/State' as 'Treatment Location' column because\n\n(i) Most patients were hospitalized locally in the same location as detection location.\n\n(ii) Sometimes, patients were transfer to another hospital, the treatment location is the exact place to track and trace the patient condition.","3601a90f":"**B. DOWNLOAD DATA, CLEAN UP AND TRANSFORM INTO SPECIFIC DATA FRAMES FOR ANALYSIS **\n\n1. DOWNLOAD DATA","1c2e4771":"**=> We are done with preparing the data. Let's do some visualization and analysis!**","9c65c407":"**Distribution of cases by province\/city:**","c010068f":"*This kernel is created to support the '[vietnam-covid19-patient-dataset'](https:\/\/www.kaggle.com\/nhntran\/vietnam-covid19-patient-dataset) published on Kaggle.*\n\n*The writen up report for this analysis could be found [here](https:\/\/towardsdatascience.com\/covid-19-what-do-we-know-about-the-situation-in-vietnam-82c195163d7e).*\n\n*A nice visualization of all Vietnam COVID-19 patients could be found [here](https:\/\/medium.com\/@tranhnnguyenvn\/a-full-picture-of-vietnam-covid-19-patients-496f7ccad3ea). *\n\n*This kernel is created together with [another kernel](https:\/\/www.kaggle.com\/nhntran\/covid-19-the-world-data-eda-and-visualization\/edit\/run\/32144597) which is targeted on global COVID data *.","77fa9f98":"***Some key findings:***\n\n* Only 6.3% of Vietnam COVID-19 confirmed cases reported the COVID-19 associated symptoms when they tested positive for COVID-19. If Vietnam did not respond swiftly with tests and early quarantine people, more than 90% of these COVID-19 cases would have continue to frequent communal and public places, unwittingly spread the virus in the community.\n\n* The very low rate of increase in the number of coronavirus cases suggested that the Vietnam government's initial virus response has succeeded in controlling the virus through swiftly testing, contact tracing, quarantine and surveillance.\n\n* It has been almost 100 days since the first COVID-19 case was confirmed in Vietnam (January 23, 2020); and the outbreak appeared largely under control. Comparing to the scale in other countries, if Vietnam officials tried to suppress the information or underreported COVID-19 cases; 100 days would be more than enough for the pandemic to reach to the grim milestone that no government\/country is able to hide such a diaster.\n\n\n* The majority of Vietnam COVID-19 imported cases are linked to students\/employees performing study\/training abroad and foreigners who travel to Vietnam\n\n\n**Take-away message:**\n\n* Most of the COVID-19 patients were asymptomatic in the early days of symptom development. Therefore, testing, contact tracing, quarantine and surveillance are keys to contain the virus.\n\n* Until vaccine\/specific and effective treatments are available, there is no guarantee for any country to be safe from the virus. Everyone needs to be on alert. Take care and be safe!\n","a7655783":"# VIETNAM COVID-19 DATA - VISUALIZATION AND ANALYSIS","10b69ab7":"* The average hospitalized time for Vietnam COVID-19 patients (since positively confirmed) is around 2 weeks. (In this dataset, the hospitalized time is calculated since the day the patients were confirmed positive to COVID-19, not the day the samples were taken for testing). The time for releasing the testing result might varied among patients.\n\n* Foreigners had a longer hospitalized time comparing to Vietnamese patients. The reasons could be because of the environment inside the hospital (food, language barriers in healthcare) and the age group: majority of foreigners are retired traveller who tend to be more vulnerable to the virus.\n\n* Majority of patients spent 10-20 days in the hospital, mostly because of the stringent discharge policy in Vietnam.(In an uncommon case, the patient BN51 had gone through 13 times of testing before officially discharged (See reference and note on the Vietnam COVID-19 patient dataset).\n\n*The guidelines for discharge (on the Vietnam Health Ministry's website) are as followed:\n\"COVID-19 patient could be discharged after 2 continuous negative laboratory tests within 48 hours, reported no fever for at least 3 continuous days, having normal vitals, normal blood test, improving chest X-ray. And the discharged patient must be sent into quarantine (at home\/hotel) for 14 more days.\"*\n\n**Discussing about the outliners:**\n\n* There was 1 case whose the hospitalized time is only 1 day. The reason for that might be:\n   - The hospitalized time is calculated since the day the patients were confirmed positive to COVID-19, not the day the patients were hospitalized and their samples were taken for testing. Therefore, this patient might have been hospitalized before confirmed positive to the virus.\n   - The time for releasing the testing result might varied among patients.\n   \n* Some patients have a long hospitalized periods (More than 30 days) indicated that their conditions had been more severe. ","f4e1c1fb":"**Note about violin plot:** It is the hybrid of a box plot and a kernel density plot.The white dot: median;\nthe thick gray bar in the center: the interquartile range; Wider and skinner sections of the violin plot: a higher and lower probability, repectively that members of the population will take on the given value.\n\n*** With the imported cases:**\n\n  - The majority of the Vietnamese imported cases were in the age range of 20-30 years old. They were students and young employees who traveled to study and perform training abroad. \n\n  - The majority of the foreigners were in the old age, ranging from 50-70 years old for men and around 45-60 for women. They were likely in the group of retired travelers.\n  \n\n*** With the local cases:**\n\nThe trend of age seems to link to the specific infection clusters in Vietnam (Foreigners who were in their young age link to the Buddha Bar & Grill (a restaurant and bar) cluster; the majority of Vietnamese female patients were link to a food supply company for Bach Mai hospital, etc.)\n\n**=> Currently with this small dataset, it is unable to tell if there is any age-gender population groups that may be in higher risk of contracting COVID-19. The outbreak in Vietnam appeared largely under control when all the cases seems to link to specific clusters and travel groups. **","de163d26":"# CONCLUSIONS","0dd7175a":"**4.2. Hospitalized time**"}}