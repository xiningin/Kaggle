{"cell_type":{"3bd09197":"code","15eedc22":"code","4d46a0cf":"code","957e8759":"code","8eab0579":"code","ba29e7ad":"code","f30ff3f1":"code","a0ade7e8":"code","8d9df1b1":"code","ed893478":"code","36468fb8":"code","c0210132":"code","7c650740":"code","0d35b6b0":"code","df7f6451":"code","705a1517":"code","167dda14":"code","c824a41a":"code","1b86ba2b":"code","8f156bbd":"code","4df05a5e":"code","fce72153":"code","c616c7f9":"code","fe85719e":"code","259829ee":"code","9ffe4586":"code","0f1c4824":"code","1bce21c3":"code","de1e71c7":"code","09adb562":"code","96fa7fb7":"code","139d09ba":"code","1082be26":"code","47435e72":"code","779b7e53":"code","cd5ef138":"code","e827dde3":"code","06e7bd0e":"code","ad68ffe5":"code","480fc5d5":"code","d47693a0":"code","35b6a309":"code","ab31632b":"code","68b61743":"code","1162ce58":"code","bb7d0288":"code","e0f49bb2":"code","ffe292d5":"code","8161a88b":"code","f811272a":"code","a509945e":"code","ec0af073":"code","532cf9d3":"code","5702d319":"code","a72b22e2":"code","daefea56":"code","4d4fb899":"code","7a284d9f":"code","d150487b":"code","7194462e":"code","93ba924f":"code","81026bd4":"code","b12d1dfb":"code","63669be6":"code","0362b77d":"code","4bea3035":"code","6a7d671d":"code","f8c87d41":"code","5501079a":"code","c2ca1a94":"markdown","036d7b60":"markdown","bc6430bb":"markdown","002af934":"markdown","fc29e0ab":"markdown","83f0b515":"markdown","c561cba0":"markdown","801ed268":"markdown","818011b6":"markdown","4dc53eed":"markdown","7677c05c":"markdown","654edc18":"markdown","28ba7a9d":"markdown","cd38575a":"markdown","800ea42b":"markdown","60355fc6":"markdown","4cfbeca0":"markdown","8965eebe":"markdown","aeac4338":"markdown","a35c471e":"markdown"},"source":{"3bd09197":"import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly \nimport plotly.graph_objs as go\nimport plotly.express as px\nimport cufflinks as cf\nfrom plotly.offline import iplot,init_notebook_mode\n# You can go offline on demand by using\ncf.go_offline() \n# To connect java script to your notebook\ninit_notebook_mode(connected=True)","15eedc22":"df = pd.read_csv('..\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\ndf.head()","4d46a0cf":"original_df = df.copy()\ndf.rename(columns={\" gdp_for_year ($) \":\"gdp_for_year\",\n                   \"gdp_per_capita ($)\":\"gdp_per_capita\"}, inplace=True)\ndf.head()","957e8759":"df.info()","8eab0579":"df[['suicides_no','suicides\/100k pop','HDI for year','gdp_per_capita','gdp_for_year']].describe().\\\nstyle.background_gradient(cmap=sns.light_palette('blue', as_cmap=True))","ba29e7ad":"df.isnull().sum()","f30ff3f1":"del df['HDI for year']\ndel df['country-year']","a0ade7e8":"df.info()","8d9df1b1":"# df[\"year\"] = pd.to_datetime(df[\"year\"], format = \"%Y\")","ed893478":"corr = df.corr()\ncorr.iplot(kind='heatmap',colorscale='Reds',hoverinfo='all',\n           layout = go.Layout(title='Correlation Heatmap',titlefont=dict(size=20)))","36468fb8":"data = df[['suicides_no','population','suicides\/100k pop','gdp_for_year','gdp_per_capita']]\ndata.iplot(kind='box',legend=True,mean=True)","c0210132":"data = df[['suicides_no','population','suicides\/100k pop','gdp_for_year','gdp_per_capita']]\ndata.iplot(kind='hist',\n           subplots=True,\n           horizontal_spacing=.1,\n           fill=True,\n           subplot_titles=True,\n           title='Data Distribution')","7c650740":"#Removing outlier \ndef outliers_detection(df, columns):\n    outliers_indices = []\n    for column in columns:\n        Q1 = np.percentile(df[column],25)\n        Q3 = np.percentile(df[column],75)\n        IQR = Q3-Q1 \n        threshold = IQR * 1.5\n        lower, upper = Q1 - threshold, Q3 + threshold\n        outliers = df[(df[column]<lower)|(df[column]>upper)].index\n        outliers_indices.extend(outliers)\n    outlier_indices=Counter(outliers_indices)\n    multiple_outliers=list(i for i,v in outlier_indices.items() if v>1)\n    data = df[~df.index.isin(multiple_outliers)][columns[0]]\n    return data","0d35b6b0":"data_1 = df[['population','gdp_per_capita','suicides\/100k pop']].rename(columns=lambda x:x+' with_outliers')\ndata_2 = outliers_detection(df,[['population','gdp_per_capita','suicides\/100k pop']])\ndata_2 = data_2[['population','gdp_per_capita','suicides\/100k pop']].rename(columns=lambda x:x+' without_outliers')\n\ndata_1.iplot(kind='hist',\n           subplots=True,\n           horizontal_spacing=.1,\n           fill=True,\n           subplot_titles=True,\n           title='Data Distribution With Outliers')\n\ndata_2.iplot(kind='hist',\n           subplots=True,\n           horizontal_spacing=.1,\n           fill=True,\n           subplot_titles=True,\n           title='Data Distribution Without Outliers')","df7f6451":"## Suicides number by year \nyear_suicides = df.groupby('year')[['suicides_no']].sum().reset_index()\nyear_suicides.sort_values(by='suicides_no', ascending=False).style.background_gradient(cmap='Blues', subset=['suicides_no'])","705a1517":"#Grouping the data by Country (Top 10 'suicides\/100k population' Countries )\ndf[['country','suicides_no','population','suicides\/100k pop','gdp_per_capita']].groupby('country').sum().\\\nsort_values('suicides\/100k pop',ascending=False)[0:10].style.background_gradient(cmap='Blues')","167dda14":"#Suicides Number Over the time\nfig = px.choropleth(df, locations='country',\n                   locationmode='country names',color=np.log(df['suicides_no']),\n                   animation_frame=df['year'],\n                   title='Suicides Number over the Time',color_continuous_scale='matter') #px.colors.sequential.matter\n\nfig.show()","c824a41a":"#Suicides Number Over the time\nfig = px.choropleth(df, locations='country',\n                   locationmode='country names',color=np.log(df['suicides\/100k pop']),\n                   animation_frame=df['year'],\n                   title='suicides\/100k popilation over the Time',color_continuous_scale='matter') #px.colors.sequential.matter\n\nfig.show()","1b86ba2b":"temp = df.groupby('country').sum().sort_values(by='suicides_no',ascending=True)[:20]['suicides_no'].reset_index()\n\ndata = px.bar(y=temp['country'],x=temp['suicides_no'], orientation='h')\n\ndata.update_layout(title='Top Ten Countries Suicides Number',\n                   titlefont=(dict(size=20)),\n                  yaxis=dict(title='Country Name',titlefont=dict(size=18)),\n                  xaxis=dict(title='Suicide Number',titlefont=dict(size=18)))\niplot(dict(data=data))","8f156bbd":"temp = df.groupby('country').mean().sort_values(by='suicides\/100k pop',ascending=True)[:20]['suicides\/100k pop'].reset_index()\n\ndata = px.bar(y=temp['country'],x=temp['suicides\/100k pop'],orientation='h')\n\ndata.update_layout(title='Top Ten Countries with for suicides\/100k population',\n                   titlefont=(dict(size=20)),\n                  yaxis=dict(title='Country Name',titlefont=dict(size=18)),\n                  xaxis=dict(title='Suicide Number',titlefont=dict(size=18)))\niplot(dict(data=data))","4df05a5e":"temp = df.groupby('country').sum().sort_values(by='suicides_no',ascending=False)['suicides_no'].reset_index()\ntemp.iplot(kind='line',x='country',y='suicides_no',title='Countries Total Suicides Number')","fce72153":"temp = df[['suicides_no']].groupby(df.year).sum().reset_index()\ntemp.iplot(x='year',\n           y='suicides_no',width=2.0,\n           xTitle='Year', yTitle='Suicides Number', \n           title='Suicides Number Over Years')","c616c7f9":"temp = df.groupby('year').sum()\ntemp = temp.sort_values('suicides_no',ascending=False)\n\ndata = go.Bar(x=temp.index,y=temp['suicides_no'])\nlayout = go.Layout(title='Suicides Number Per Year',\n                  titlefont=(dict(size=25)),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                             tickangle=315,\n                             title='Year',\n                             titlefont=dict(size=18), \n                             tickmode = 'linear'),\n                  yaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',\n                                           size = 14,color = 'black'),\n                             title='Suicide Number',titlefont=dict(size=18)))\niplot(dict(data=data,layout=layout))","fe85719e":"data = df.groupby('year').mean()\n\ndata = go.Bar(x=data.index,y=data['suicides_no'])\n\nlayout = go.Layout(title='Mean Suicides Number per Year',\n                  titlefont=(dict(size=25)),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',\n                                           size = 14,color = 'black'),\n                             tickangle=315,\n                             title='Year',titlefont=dict(size=18), tickmode = 'linear'),\n                  yaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',\n                                           size = 14,color = 'black'),\n                             title='Suicides',titlefont=dict(size=18)))\n\niplot(dict(data=data,layout=layout))","259829ee":"data = df.groupby('year').mean()\n\ndata = go.Bar(x=data.index,y=data['suicides\/100k pop'])\n\nlayout = go.Layout(title='suicides\/100k population per Year',\n                  titlefont=(dict(size=25)),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',\n                                           size = 14,color = 'black'),\n                             tickangle=315,\n                             title='Year',titlefont=dict(size=18), tickmode = 'linear'),\n                  yaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',\n                                           size = 14,color = 'black'),\n                             title='Suicides',titlefont=dict(size=18)))\n\niplot(dict(data=data,layout=layout))","9ffe4586":"#Grouping the data by Country (Top 10 'suicides\/100k population' Countries )\ndf[['sex','suicides_no','population','suicides\/100k pop','gdp_per_capita']].groupby('sex').sum().\\\nsort_values('suicides\/100k pop',ascending=False)[0:10].style.background_gradient(cmap='Blues')","0f1c4824":"# Suicides Number for each gender per year\nsex = df['sex'].unique()\nd1 = df[df['sex']==sex[0]][['year','suicides_no']].rename(columns={'suicides_no':sex[0]}).groupby('year').sum().reset_index()\nd2 = df[df['sex']==sex[1]][['year','suicides_no']].rename(columns={'suicides_no':sex[1]}).groupby('year').sum().reset_index()\nd1.merge(d2,on='year').set_index('year').style.background_gradient('Blues')","1bce21c3":"# Suicides\/100k population Number for each gender per year\nsex = df['sex'].unique()\nd1 = df[df['sex']==sex[0]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':sex[0]}).groupby('year').sum().reset_index()\nd2 = df[df['sex']==sex[1]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':sex[1]}).groupby('year').sum().reset_index()\nd1.merge(d2,on='year').set_index('year').style.background_gradient('Blues')","de1e71c7":"data = df.groupby(['year','sex','age']).sum().reset_index()\nfig = px.bar(data_frame=data ,x='sex', y='suicides_no', color='age', barmode='group' ,opacity=1)\nfig.update_layout(title='Bar Plots for Suicides Number for each gender grouped by age',\n                   titlefont=(dict(size=20)),\n                  yaxis=dict(title='Suicides Number',titlefont=dict(size=18)),\n                  xaxis=dict(title='Gender',titlefont=dict(size=18)))\niplot(dict(data=fig,layout=layout))","09adb562":"data = df.groupby('sex').sum().reset_index()\nfig = plotly.subplots.make_subplots(rows=1, cols=2,\n                                    specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}]],\n                                    subplot_titles=['Bar Polar Plot for the suicides number of each gender',\n                                                    'Pie Plot for the suicides number of each gender'])\n\nfig = px.bar(data_frame=data ,x='sex', y='suicides_no', barmode='group' ,opacity=1)\nfig.update_layout(title='Top Ten Countries Suicides Number',\n                   titlefont=(dict(size=20)),\n                   yaxis=dict(title='Suicides Number',titlefont=dict(size=18)),\n                   xaxis=dict(title='Gender',titlefont=dict(size=18)))\n\nfig.show()","96fa7fb7":"male = df[df['sex']=='male'].groupby('year').sum().reset_index().rename(columns={'suicides\/100k pop':'Male'})\nfemale = df[df['sex']=='female'].groupby('year').sum().reset_index().rename(columns={'suicides\/100k pop':'Female'})\ntemp = pd.merge(male,female,on='year')\n\nlayout = cf.tools.getLayout({'Axis Ranges':{'xrange' : df['year'].unique()}},\n                           title='Gender Suicides over Years')\n\ntemp.iplot(kind='ratio',y=['Male','Female'],x='year',title='suicides\/100k population by gender',layout=layout)","139d09ba":"male = df[df['sex']=='male'].groupby('year').sum().reset_index()\nfemale = df[df['sex']=='female'].groupby('year').sum().reset_index()\n\ndata = [go.Bar(x=male['year'],y=male['suicides_no'],name='Male Suicides'),\n        go.Bar(x=female['year'],y=female['suicides_no'],name='Female Suicides')]\n\nlayout = go.Layout(title='Suicides For Each Year By Gender',\n                   titlefont=dict(size=20),\n                   xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n\niplot(dict(data=data,layout=layout))","1082be26":"#Grouping the data by Country (Top 10 'suicides\/100k population' Countries )\ndf[['generation','suicides_no','population','suicides\/100k pop','gdp_per_capita']].groupby('generation').sum().\\\nsort_values('suicides\/100k pop',ascending=False)[0:10].style.background_gradient(cmap='Blues')","47435e72":"# Suicides Number for each generation per year\ngen = df['generation']\nd1 = df[df['generation']==gen[0]][['year','suicides_no']].rename(columns={'suicides_no':gen[0]}).groupby('year').sum().reset_index()\nd2 = df[df['generation']==gen[1]][['year','suicides_no']].rename(columns={'suicides_no':gen[1]}).groupby('year').sum().reset_index()\nd3 = df[df['generation']==gen[2]][['year','suicides_no']].rename(columns={'suicides_no':gen[2]}).groupby('year').sum().reset_index()\nd4 = df[df['generation']==gen[3]][['year','suicides_no']].rename(columns={'suicides_no':gen[3]}).groupby('year').sum().reset_index()\nd5 = df[df['generation']==gen[4]][['year','suicides_no']].rename(columns={'suicides_no':gen[4]}).groupby('year').sum().reset_index()\nd6 = df[df['generation']==gen[5]][['year','suicides_no']].rename(columns={'suicides_no':gen[5]}).groupby('year').sum().reset_index()\nd1.merge(d2.merge(d3.merge(d4.merge(d5.merge(d6,on='year'),on='year'),on='year'),on='year'),on='year').set_index('year').style.background_gradient('Blues')","779b7e53":"# Suicides Number for each generation per year\ngen = df['generation']\nd1 = df[df['generation']==gen[0]][['year','suicides\/100k pop']].rename(columns={'suicides_no':gen[0]}).groupby('year').sum().reset_index()\nd2 = df[df['generation']==gen[1]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':gen[1]}).groupby('year').sum().reset_index()\nd3 = df[df['generation']==gen[2]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':gen[2]}).groupby('year').sum().reset_index()\nd4 = df[df['generation']==gen[3]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':gen[3]}).groupby('year').sum().reset_index()\nd5 = df[df['generation']==gen[4]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':gen[4]}).groupby('year').sum().reset_index()\nd6 = df[df['generation']==gen[5]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':gen[5]}).groupby('year').sum().reset_index()\nd1.merge(d2.merge(d3.merge(d4.merge(d5.merge(d6,on='year'),on='year'),on='year'),on='year'),on='year').set_index('year').style.background_gradient('Blues')","cd5ef138":"data = df.groupby('generation').sum().reset_index()\nlayout = cf.tools.getLayout(height=600,width=1000,\n                            title='Pie Plot for Sucides number by Gender')\ndata.iplot(kind='pie',labels='generation',\n           textinfo='label+percent',\n           world_readable=True,hole=.4,\n           values='suicides_no',\n           layout=layout)","e827dde3":"temp = df[['suicides_no','suicides\/100k pop']].groupby(df.generation).sum().reset_index().sort_values(by='suicides_no',ascending=False)\n\ndata = [go.Bar(x=temp['generation'], y=temp['suicides_no'],name='Suicides Number'),\n        go.Bar(x=temp['generation'], y=temp['suicides\/100k pop'],name='Suicides\/100k population')]\n\nlayout = go.Layout(title='Suicides and suicides\/100k population By Generation',\n                   titlefont=dict(size=20),\n                   xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n\niplot(dict(data=data,layout=layout))","06e7bd0e":"d1 = df.query('''generation==\"Boomers\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Boomers'}).groupby('year').sum().reset_index()\nd2 = df.query('''generation==\"Generation X\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Generation X'}).groupby('year').sum().reset_index()\nd3 = df.query('''generation==\"Silent\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Silent'}).groupby('year').sum().reset_index()\nd4 = df.query('''generation==\"G.I. Generation\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'G.I. Generation'}).groupby('year').sum().reset_index().reset_index()\nd5 = df.query('''generation==\"Generation Z\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Generation Z'}).groupby('year').sum().reset_index()\nd6 = df.query('''generation==\"Millenials\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Millenials'}).groupby('year').sum().reset_index()\n\ndata = []\n\nfor d in [d1,d2,d3,d4,d5,d6]:\n    data.append(go.Bar(x=d['year'],y=d[d.columns[1]],name=d.columns[1]))\n\nlayout = go.Layout(title='Suicides for each year by generation',\n                   titlefont=dict(size=20),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n    \niplot(dict(data=data,layout=layout))","ad68ffe5":"d1 = df.query('''generation==\"Boomers\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Boomers','suicides\/100k pop':'boomers'}).groupby('year').sum().reset_index()\nd2 = df.query('''generation==\"Generation X\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Generation X','suicides\/100k pop':'Generation_X'}).groupby('year').sum().reset_index()\nd3 = df.query('''generation==\"Silent\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Silent','suicides\/100k pop':'silent'}).groupby('year').sum().reset_index()\nd4 = df.query('''generation==\"G.I. Generation\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'G.I. Generation','suicides\/100k pop':'G.I.Generation'}).groupby('year').sum().reset_index().reset_index()\nd5 = df.query('''generation==\"Generation Z\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Generation Z','suicides\/100k pop':'Generation_Z'}).groupby('year').sum().reset_index()\nd6 = df.query('''generation==\"Millenials\"''')[['year','suicides_no','suicides\/100k pop']].rename(columns={'suicides_no':'Millenials','suicides\/100k pop':'millenials'}).groupby('year').sum().reset_index()\n\ndata = []\n\nfor d in [d1,d2,d3,d4,d5,d6]:\n    data.append(go.Bar(x=d['year'],y=d[d.columns[2]],name=d.columns[2]))\n\nlayout = go.Layout(title='suicides\/100k population for each year by generation',\n                   titlefont=dict(size=20),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n    \niplot(dict(data=data,layout=layout))","480fc5d5":"d1 = df.query('''generation==\"Boomers\"''')[['year','suicides_no',]].rename(columns={'suicides_no':'Boomers'}).groupby('year').sum().reset_index()\nd2 = df.query('''generation==\"Generation X\"''')[['year','suicides_no']].rename(columns={'suicides_no':'Generation X'}).groupby('year').sum().reset_index()\nd3 = df.query('''generation==\"Silent\"''')[['year','suicides_no']].rename(columns={'suicides_no':'Silent'}).groupby('year').sum().reset_index()\nd4 = df.query('''generation==\"G.I. Generation\"''')[['year','suicides_no']].rename(columns={'suicides_no':'G.I. Generation'}).groupby('year').sum().reset_index()\nd5 = df.query('''generation==\"Generation Z\"''')[['year','suicides_no']].rename(columns={'suicides_no':'Generation Z'}).groupby('year').sum().reset_index()\nd6 = df.query('''generation==\"Millenials\"''')[['year','suicides_no']].rename(columns={'suicides_no':'Millenials'}).groupby('year').sum().reset_index()\n\ndata = []\n\nfor d in [d1,d2,d3,d4,d5,d6]:\n    data.append(go.Scatter(x=d['year'],y=d[d.columns[1]],name=d.columns[1]))\n\nlayout = go.Layout(title='Suicides for each year by generation',\n                   titlefont=dict(size=20),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n    \niplot(dict(data=data,layout=layout))","d47693a0":"d1 = df.query('''generation==\"Boomers\"''')[['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':'boomers'}).groupby('year').sum().reset_index()\nd2 = df.query('''generation==\"Generation X\"''')[['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':'Generation_X'}).groupby('year').sum().reset_index()\nd3 = df.query('''generation==\"Silent\"''')[['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':'silent'}).groupby('year').sum().reset_index()\nd4 = df.query('''generation==\"G.I. Generation\"''')[['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':'G.I.Generation'}).groupby('year').sum().reset_index()\nd5 = df.query('''generation==\"Generation Z\"''')[['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':'Generation_Z'}).groupby('year').sum().reset_index()\nd6 = df.query('''generation==\"Millenials\"''')[['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':'millenials'}).groupby('year').sum().reset_index()\n\ndata = []\n\nfor d in [d1,d2,d3,d4,d5,d6]:\n    data.append(go.Scatter(x=d['year'],y=d[d.columns[1]],name=d.columns[1]))\n\nlayout = go.Layout(title='Suicides for each year by generation',\n                   titlefont=dict(size=20),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n    \niplot(dict(data=data,layout=layout))","35b6a309":"# Suicides Number for each age per year\nage = df['age'].unique()\nd1 = df[df['age']==age[0]][['year','suicides_no']].rename(columns={'suicides_no':age[0]}).groupby('year').sum().reset_index()\nd2 = df[df['age']==age[1]][['year','suicides_no']].rename(columns={'suicides_no':age[1]}).groupby('year').sum().reset_index()\nd3 = df[df['age']==age[2]][['year','suicides_no']].rename(columns={'suicides_no':age[2]}).groupby('year').sum().reset_index()\nd4 = df[df['age']==age[3]][['year','suicides_no']].rename(columns={'suicides_no':age[3]}).groupby('year').sum().reset_index()\nd5 = df[df['age']==age[4]][['year','suicides_no']].rename(columns={'suicides_no':age[4]}).groupby('year').sum().reset_index()\nd6 = df[df['age']==age[5]][['year','suicides_no']].rename(columns={'suicides_no':age[5]}).groupby('year').sum().reset_index()\nd1.merge(d2.merge(d3.merge(d4.merge(d5.merge(d6,on='year'),on='year'),on='year'),on='year'),on='year').set_index('year').style.background_gradient('Blues')","ab31632b":"# Suicides\/100k population Number for each age per year\nd1 = df[df['age']==age[0]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[0]}).groupby('year').sum().reset_index()\nd2 = df[df['age']==age[1]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[1]}).groupby('year').sum().reset_index()\nd3 = df[df['age']==age[2]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[2]}).groupby('year').sum().reset_index()\nd4 = df[df['age']==age[3]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[3]}).groupby('year').sum().reset_index()\nd5 = df[df['age']==age[4]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[4]}).groupby('year').sum().reset_index()\nd6 = df[df['age']==age[5]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[5]}).groupby('year').sum().reset_index()\nd1.merge(d2.merge(d3.merge(d4.merge(d5.merge(d6,on='year'),on='year'),on='year'),on='year'),on='year').set_index('year').style.background_gradient('Blues')","68b61743":"data = df.groupby('age').sum().reset_index()\nlayout = cf.tools.getLayout(height=600,width=1000,\n                            title='Pie Plot For World Sucide By Age',\n                            titlefont=dict(size=20))\ndata.iplot(kind='pie',labels='age',\n           textinfo='label+percent',\n           world_readable=True,hole=.4,\n           values='suicides_no',\n           layout=layout)","1162ce58":"temp = df[['suicides_no','suicides\/100k pop']].groupby(df.age).sum().reset_index().sort_values(by='suicides_no',ascending=False)\n\ndata = [go.Bar(x=temp['age'], y=temp['suicides_no'],name='Suicides Number'),\n        go.Bar(x=temp['age'], y=temp['suicides\/100k pop'],name='Suicides\/100k population')]\n\nlayout = go.Layout(title='Suicides Number and suicides\/100k population By Age',\n                   titlefont=dict(size=20),\n                   xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n\niplot(dict(data=data,layout=layout))","bb7d0288":"age = df['age'].unique()\nd1 = df[df['age']==age[0]][['year','suicides_no']].rename(columns={'suicides_no':age[0]}).groupby('year').sum().reset_index()\nd2 = df[df['age']==age[1]][['year','suicides_no']].rename(columns={'suicides_no':age[1]}).groupby('year').sum().reset_index()\nd3 = df[df['age']==age[2]][['year','suicides_no']].rename(columns={'suicides_no':age[2]}).groupby('year').sum().reset_index()\nd4 = df[df['age']==age[3]][['year','suicides_no']].rename(columns={'suicides_no':age[3]}).groupby('year').sum().reset_index()\nd5 = df[df['age']==age[4]][['year','suicides_no']].rename(columns={'suicides_no':age[4]}).groupby('year').sum().reset_index()\nd6 = df[df['age']==age[5]][['year','suicides_no']].rename(columns={'suicides_no':age[5]}).groupby('year').sum().reset_index()\n\ndata = []\n\nfor d in [d1,d2,d3,d4,d5,d6]:\n    data.append(go.Bar(x=d['year'],y=d[d.columns[1]],name=d.columns[1]))\n\nlayout = go.Layout(title='Suicides for each year by Age',\n                   titlefont=dict(size=20),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n    \niplot(dict(data=data,layout=layout))","e0f49bb2":"age = df['age'].unique()\nd1 = df[df['age']==age[0]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[0]}).groupby('year').sum().reset_index()\nd2 = df[df['age']==age[1]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[1]}).groupby('year').sum().reset_index()\nd3 = df[df['age']==age[2]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[2]}).groupby('year').sum().reset_index()\nd4 = df[df['age']==age[3]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[3]}).groupby('year').sum().reset_index()\nd5 = df[df['age']==age[4]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[4]}).groupby('year').sum().reset_index()\nd6 = df[df['age']==age[5]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[5]}).groupby('year').sum().reset_index()\n\ndata = []\n\nfor d in [d1,d2,d3,d4,d5,d6]:\n    data.append(go.Bar(x=d['year'],y=d[d.columns[1]],name=d.columns[1]))\n\nlayout = go.Layout(title='Suicides\/100k population for each year by Age',\n                   titlefont=dict(size=20),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n    \niplot(dict(data=data,layout=layout))","ffe292d5":"age = df['age'].unique()\nd1 = df[df['age']==age[0]][['year','suicides_no']].rename(columns={'suicides_no':age[0]}).groupby('year').sum().reset_index()\nd2 = df[df['age']==age[1]][['year','suicides_no']].rename(columns={'suicides_no':age[1]}).groupby('year').sum().reset_index()\nd3 = df[df['age']==age[2]][['year','suicides_no']].rename(columns={'suicides_no':age[2]}).groupby('year').sum().reset_index()\nd4 = df[df['age']==age[3]][['year','suicides_no']].rename(columns={'suicides_no':age[3]}).groupby('year').sum().reset_index()\nd5 = df[df['age']==age[4]][['year','suicides_no']].rename(columns={'suicides_no':age[4]}).groupby('year').sum().reset_index()\nd6 = df[df['age']==age[5]][['year','suicides_no']].rename(columns={'suicides_no':age[5]}).groupby('year').sum().reset_index()\n\ndata = []\n\nfor d in [d1,d2,d3,d4,d5,d6]:\n    data.append(go.Scatter(x=d['year'],y=d[d.columns[1]],name=d.columns[1]))\n\nlayout = go.Layout(title='Suicides for each year by Age',\n                   titlefont=dict(size=20),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n    \niplot(dict(data=data,layout=layout))","8161a88b":"age = df['age'].unique()\nd1 = df[df['age']==age[0]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[0]}).groupby('year').sum().reset_index()\nd2 = df[df['age']==age[1]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[1]}).groupby('year').sum().reset_index()\nd3 = df[df['age']==age[2]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[2]}).groupby('year').sum().reset_index()\nd4 = df[df['age']==age[3]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[3]}).groupby('year').sum().reset_index()\nd5 = df[df['age']==age[4]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[4]}).groupby('year').sum().reset_index()\nd6 = df[df['age']==age[5]][['year','suicides\/100k pop']].rename(columns={'suicides\/100k pop':age[5]}).groupby('year').sum().reset_index()\n\ndata = []\n\nfor d in [d1,d2,d3,d4,d5,d6]:\n    data.append(go.Scatter(x=d['year'],y=d[d.columns[1]],name=d.columns[1]))\n\nlayout = go.Layout(title='Suicides\/100k population for each year by Age',\n                   titlefont=dict(size=20),\n                  xaxis=dict(tickfont=dict(family = 'Old Standard TT, serif',size = 14,color = 'black'),\n                              tickangle=315,title='Year',titlefont=dict(size=18), tickmode = 'linear'))\n    \niplot(dict(data=data,layout=layout))","f811272a":"df_k = df.copy()","a509945e":"gen_cat = df['generation'].astype('category')\ngen_dict = dict(enumerate(gen_cat.cat.categories))\nprint(gen_dict)","ec0af073":"age_cat = df['age'].astype('category')\nage_dict = dict(enumerate(age_cat.cat.categories))\nprint(age_dict)","532cf9d3":"sex_cat = df['sex'].astype('category')\nsex_dict = dict(enumerate(sex_cat.cat.categories))\nprint(sex_dict)","5702d319":"# first we reverse our dictionaries to apply them on the dataframe \n\nsex_map = {v: k for k, v in sex_dict.items()}\nage_map = {v: k for k, v in age_dict.items()}\ngen_map = {v: k for k, v in gen_dict.items()}\ndf_k = df_k.replace({'sex':sex_map,'age':age_map,'generation':gen_map})\ndf_k","a72b22e2":"d = pd.merge(df['age'],df_k.rename(columns={'age':'cat_age'}),on=df.index)[['age','cat_age']]\nd.head()","daefea56":"d = pd.merge(df['sex'],df_k.rename(columns={'sex':'cat_sex'}),on=df.index)[['sex','cat_sex']]\nd.head()","4d4fb899":"d = pd.merge(df['generation'],df_k.rename(columns={'generation':'cat_generation'}),on=df.index)[['generation','cat_generation']]\nd.head()","7a284d9f":"df_k = df_k.loc[:, 'year':'generation']\ndf_k = df_k.dropna()\ndf_k = df_k[['sex','generation','age']]\ndf_k['suicides_no'] = df['suicides_no']\ndf_k['gdp_for_year'] = df['gdp_for_year']\ndf_k['population'] = df['population']\ndf_k['suicides\/100k pop'] = df['suicides\/100k pop']\ndf_k['gdp_for_year'] = df['gdp_for_year']\ndf_k['gdp_per_capita'] = df['gdp_per_capita']","d150487b":"from sklearn.cluster import KMeans\n\nk = []\nfor i in range(1,30):\n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit(df_k[['sex','generation','age','population','suicides\/100k pop','gdp_per_capita']])\n    k.append(kmeans.inertia_)","7194462e":"elbow_df = pd.DataFrame(index=range(1,30),data=k).reset_index()\nelbow_df = elbow_df.rename(columns={'index':'Number_of_clusters',0:'Sum_of_intra_cluster_squares'})","93ba924f":"elbow_df['Sum_of_intra_cluster_squares'].iplot(kind='line',title='Elbow-Method results')","81026bd4":"from sklearn.cluster import MiniBatchKMeans\n\nkmeans = MiniBatchKMeans(n_clusters=3,\n                          random_state=0,\n                          batch_size=10)\n\ny_pred = kmeans.fit_predict(df_k[['sex','generation','age','population','suicides\/100k pop','gdp_per_capita']])","b12d1dfb":"df_k['k_means_clusters'] = pd.Series(y_pred)\ndf_k","63669be6":"px.scatter(data_frame=df_k ,\n           x='gdp_per_capita',\n           y='suicides_no',\n           color='k_means_clusters')","0362b77d":"px.scatter(data_frame=df_k ,\n           x='gdp_for_year',\n           y='suicides_no',\n           color='k_means_clusters')","4bea3035":"px.scatter(data_frame=df_k,\n           x='population',\n           y='suicides_no',\n           color='k_means_clusters')","6a7d671d":"px.scatter_3d(data_frame=df_k,\n              x='gdp_for_year',\n              y='generation',\n              z='suicides_no',\n              color='k_means_clusters',)","f8c87d41":"px.scatter_3d(data_frame=df_k,\n              x='gdp_per_capita',\n              y='gdp_for_year',\n              z='population',\n              color='k_means_clusters')","5501079a":"px.scatter_3d(data_frame=df_k,\n              x='gdp_per_capita',\n              y='gdp_for_year',\n              z='suicides\/100k pop',\n              color='k_means_clusters')","c2ca1a94":"# Tanks\n## Please Upvote my notebook if you found it useful","036d7b60":"### Let's Visualize the clusters","bc6430bb":"# Suicides by Generation","002af934":"# Suicides number by years","fc29e0ab":"><b>Suicide at most in 1995<\/b>","83f0b515":"### Let's do the encoding ","c561cba0":"> <b>Second (age)","801ed268":"#### Before applying k-Means Let's apply the elbow method to know the best number of clusters (K)","818011b6":"><b>We find that the best number of clusters is 3","4dc53eed":"<h1 align=\"center\"> Suicide Rates Overview 1985 to 2016 <\/h1>\n<img src=\"https:\/\/pulitzercenter.org\/sites\/default\/files\/styles\/project_hero_768_x_480\/public\/epstein_1-101019.jpg?itok=YLWiDcc5\" width=1000 hight=600><br>\n<p>This compiled dataset pulled from four other datasets linked by time and place, and was built to find signals correlated to increased suicide rates among different cohorts globally, across the socio-economic spectrum.<\/p><br>\n<b>Contents:<\/b>\n<li>In this notebook we are going to do some analysis, data visualization, data cleaning and build some clustering models for <a href='https:\/\/www.kaggle.com\/russellyates88\/suicide-rates-overview-1985-to-2016'><b>Suicide Rates<\/b><\/a><\/li><br>\n<b>You can also see:<\/b><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-analysis-with-cufflinks-and-pandas'>Superstore Analysis With Cufflinks and pandas<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-data-analysis-with-plotly'>Superstore Analysis With Plotly\n<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/european-soccer-database-with-sqlite3'>European soccer database with sqlite3<\/a>","7677c05c":"#### <li>Lets see how to do encoding\n> <b>First (generation)","654edc18":"# Let's deal with the outliers","28ba7a9d":"# Preprocessing the Data","cd38575a":"> <b>Third (sex)","800ea42b":"> <b>Let's see the resulst","60355fc6":"### Now let's apply K-Means with (k=3)","4cfbeca0":"# Data Distribution","8965eebe":"# Suicides by Country","aeac4338":"# Suicides by Age","a35c471e":"# Suicides by Gender"}}