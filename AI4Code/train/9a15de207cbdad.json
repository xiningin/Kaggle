{"cell_type":{"bf61b8b4":"code","6439146c":"code","f25e3f2a":"code","26b29bb2":"code","57d1101d":"code","ac446ea6":"code","aaa9a6b3":"code","67260601":"code","b3ffbc25":"code","c72e0035":"code","4dd4b8f2":"code","f33e6056":"code","a5b126d2":"code","3734e20b":"code","0f0584a6":"code","b42927b1":"code","15cd74fa":"code","523d2794":"code","ff5a5edf":"code","68a783bf":"code","48c807b9":"code","7be33022":"code","93b5f471":"code","ff7ffc3e":"code","df9b4474":"code","31143c3e":"code","006a5676":"code","f29d1c66":"code","17d93747":"code","9f4a174f":"code","361560c8":"code","2144e346":"code","a87382b3":"code","bdf6fc3d":"code","77cd158b":"code","eb97dba3":"code","5e6199fc":"markdown"},"source":{"bf61b8b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6439146c":"import os\nfrom os import listdir","f25e3f2a":"listdir(\"\/kaggle\/input\")","26b29bb2":"listdir(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\")","57d1101d":"listdir(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\")","ac446ea6":"listdir(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\")","aaa9a6b3":"listdir(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\/def_front\")","67260601":"from PIL import Image\nimg = Image.open(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\/def_front\/cast_def_0_3040.jpeg\")\nimg","b3ffbc25":"from PIL import Image\nimg = Image.open(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\/def_front\/cast_def_0_3021.jpeg\")\nimg","c72e0035":"from PIL import Image\nimg = Image.open(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\/def_front\/cast_def_0_5595.jpeg\")\nimg","4dd4b8f2":"listdir(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\/ok_front\")","f33e6056":"from PIL import Image\nimg = Image.open(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\/ok_front\/cast_ok_0_2038.jpeg\")","a5b126d2":"img","3734e20b":"from keras.preprocessing.image import load_img","0f0584a6":"img=load_img(\"\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\/ok_front\/cast_ok_0_2038.jpeg\")","b42927b1":"img","15cd74fa":"img.size","523d2794":"import numpy as np\nimg=np.array(img)","ff5a5edf":"img.shape","68a783bf":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator()","48c807b9":"# load and iterate training dataset\ntrain_it = datagen.flow_from_directory('\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train', class_mode='binary',target_size=(256,256),batch_size=64)\n# load and iterate test dataset\ntest_it = datagen.flow_from_directory('\/kaggle\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/test', class_mode='binary',target_size=(256,256), batch_size=64)","7be33022":"train_it.class_indices","93b5f471":"from keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam\nfrom keras.layers import Dropout\nmodel=Sequential()\ndef ima():\n  model=Sequential()\n  model.add(Conv2D(10,(3,3),padding=\"same\",activation=\"relu\",input_shape=(256,256, 3)))\n  model.add(MaxPooling2D((2,2),strides=(2,2)))\n  model.add(Flatten())\n  model.add(Dense(16, activation=\"relu\", kernel_initializer=\"he_uniform\"))\n  model.add(Dense(1, activation=\"sigmoid\"))\n  opt = Adam(lr=0.01)\n  model.compile(optimizer=opt, loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n  return model \n","ff7ffc3e":"model=ima()","df9b4474":"model.summary()","31143c3e":"results = model.fit_generator(train_it,epochs=20,validation_data=test_it,verbose=1)","006a5676":"import matplotlib.pyplot as plt","f29d1c66":"from matplotlib import pyplot","17d93747":"pyplot.title(\"Classification Accuracy\")\npyplot.plot(results.history[\"accuracy\"], color=\"blue\", label=\"train\")\npyplot.plot(results.history[\"val_accuracy\"], color=\"orange\", label=\"test\")","9f4a174f":"from keras import Model","361560c8":"## example of loading the vgg16 model\nfrom keras.applications.vgg16 import VGG16\n","2144e346":"# define cnn model\ndef define_model():\n    model = VGG16(include_top=False, input_shape=(256,256, 3))\n    #mark loaded layers as not trainable\n    for layer in model.layers:\n        layer.trainable = False\n\n    flat1 = Flatten()(model.layers[-1].output)\n    class1 = Dense(64, activation=\"relu\", kernel_initializer=\"he_uniform\")(flat1)\n    class1 = Dense(32, activation=\"relu\", kernel_initializer=\"he_uniform\")(class1)\n    class1 = Dense(16, activation=\"relu\", kernel_initializer=\"he_uniform\")(class1)\n    output = Dense(1, activation=\"sigmoid\")(class1)\n# define new model\n    model = Model(inputs=model.inputs, outputs=output)\n# compile model\n    opt = Adam(lr=0.01)\n    model.compile(optimizer=opt, loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n    return model","a87382b3":"model1=define_model()","bdf6fc3d":"model1.summary()","77cd158b":"results = model1.fit_generator(train_it,epochs=5,validation_data=test_it,verbose=1)","eb97dba3":"pyplot.title(\"Classification Accuracy\")\npyplot.plot(results.history[\"accuracy\"], color=\"blue\", label=\"train\")\npyplot.plot(results.history[\"val_accuracy\"], color=\"orange\", label=\"test\")","5e6199fc":"Lets Use Transfer Learning"}}