{"cell_type":{"af3ca0d7":"code","e3526f46":"code","95d7952f":"code","1a243fcd":"code","78abebec":"code","33df1c96":"code","bb36ea73":"code","dd7a8ef0":"code","91c9ffc6":"code","ba77c089":"code","9be8342c":"code","d83ef609":"code","6dee37b6":"code","6aef5ede":"code","1991d7dc":"code","a3bfc10e":"code","49063b2c":"code","411db6e9":"code","a1e1cc7c":"code","e7f3ed4e":"code","844520d8":"code","7b1ce389":"code","7565588d":"code","3c9ad338":"code","4d324ef9":"code","987b1eb2":"code","b5bf8958":"code","1f879218":"code","b9ec4df7":"code","156b5fb7":"code","1141335c":"code","17e3f39a":"code","9db0b702":"code","e4ae0afb":"code","3a145b70":"code","ed940e1c":"code","876ac6c6":"code","3c0519ff":"code","d120bdbb":"code","c150c35b":"code","3ffa6b15":"code","a7ef3ae5":"code","ea909e0a":"code","c627c5a3":"code","b871a64e":"code","1a7c68c1":"code","08e584fe":"code","1ccf60c5":"code","9ca0a51c":"markdown","11657474":"markdown","2de7bf34":"markdown","552866b7":"markdown","c65b1449":"markdown","8e13eb97":"markdown","27d5a7a0":"markdown","dbab49e5":"markdown","f64ae861":"markdown","f5a03751":"markdown","23ddc90a":"markdown","da2f8661":"markdown","9a3cb5da":"markdown","de5ff75e":"markdown","0484f060":"markdown","ddabd292":"markdown","51741374":"markdown","d21a6211":"markdown","61c638be":"markdown","c1b23cce":"markdown","ddac926e":"markdown","141223f7":"markdown","f8c31eaf":"markdown","323ae762":"markdown","46c7e665":"markdown","28541402":"markdown","e3d9c2b4":"markdown","65b9ad6b":"markdown","969d7b8c":"markdown","75dae3e9":"markdown","93717f64":"markdown","a2e61e47":"markdown","2abce02d":"markdown","ef8545e3":"markdown","5da2b841":"markdown","3a71528f":"markdown","931e0f5c":"markdown","c7473c17":"markdown","93131f4f":"markdown","a8919a74":"markdown","90017d7d":"markdown","ad98eb25":"markdown","05ed0d66":"markdown","f9c57e54":"markdown","dbe6cc85":"markdown","990b1653":"markdown","8eec1522":"markdown","3a443171":"markdown","f7c13669":"markdown","47c7c855":"markdown","f17858ea":"markdown","dd62ad08":"markdown","046cb49c":"markdown","d7aee166":"markdown","757baddf":"markdown","78c83e3a":"markdown"},"source":{"af3ca0d7":"%pip install fuggle","e3526f46":"from fuggle import setup\nsetup()","95d7952f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport time \n\nimport warnings\nwarnings.filterwarnings('ignore')","1a243fcd":"import zipfile\nfile_list = [\n    '\/kaggle\/input\/instacart-market-basket-analysis\/aisles.csv.zip',\n    '\/kaggle\/input\/instacart-market-basket-analysis\/orders.csv.zip',\n    '\/kaggle\/input\/instacart-market-basket-analysis\/sample_submission.csv.zip',\n    '\/kaggle\/input\/instacart-market-basket-analysis\/order_products__train.csv.zip',\n    '\/kaggle\/input\/instacart-market-basket-analysis\/products.csv.zip',  \n    '\/kaggle\/input\/instacart-market-basket-analysis\/order_products__prior.csv.zip',    \n    '\/kaggle\/input\/instacart-market-basket-analysis\/departments.csv.zip']\n\nfor file_name in file_list:\n    with zipfile.ZipFile(file=file_name) as target_zip:\n        target_zip.extractall()","78abebec":"import pandas as pd\n\ndf = pd.DataFrame({\"date\": ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05'],\n                   \"val\": [1,2,3,4,5],\n                   \"val2\": [\"a\",\"b\",\"c\",\"a\",\"b\"]})\ndf['date'] = pd.to_datetime(df['date'])","33df1c96":"%%fsql\nSELECT *\n FROM df\nWHERE date < \"2020-01-03\"\nPRINT","bb36ea73":"%%fsql\nSELECT date, val,\nCASE\n    WHEN val = 1 THEN 'The quantity is 1'\n    WHEN val = 2 THEN 'The quantity is 2'\n    ELSE 'The quantity is greater than 3'\nEND AS valText\nFROM df\nPRINT","dd7a8ef0":"%%fsql\nSELECT date, val, val2\nFROM df\nWHERE val2 IN (\"a\",\"b\")\nPRINT","91c9ffc6":"mytuple = (\"a\", \"b\")","ba77c089":"%%fsql\nSELECT date, val, val2\nFROM df\nWHERE val2 IN {{mytuple}}\nPRINT","9be8342c":"%%fsql\ndf = LOAD \"\/kaggle\/working\/aisles.csv\" (header=TRUE, infer_schema=TRUE)\n\nSELECT * FROM df\nWHERE aisle_id = 3\nPRINT\nSAVE OVERWRITE \"\/kaggle\/working\/aisles-modified.csv\"","d83ef609":"%%fsql\nproducts = LOAD \"\/kaggle\/working\/products.csv\" (header=TRUE, infer_schema=TRUE)\nPRINT 5 ROWS\n\n  SELECT department_id, COUNT(*) AS count\n    FROM products\n   WHERE department_id < 6\nGROUP BY department_id\n   PRINT","6dee37b6":"# Pandas implementation of previous\nproducts = pd.read_csv(\"\/kaggle\/working\/products.csv\")\nproducts['department_id'] = products['department_id'].astype(int)\n\nproducts = products[['department_id']]\\\n    .loc[products['department_id'] < 6]\\\n    .value_counts()\\\n    .reset_index()\\\n    .rename(columns={0:'count'})\\\n\nproducts.head()","6aef5ede":"# Spark implementation of previous\nfrom pyspark.sql import SparkSession\nimport pyspark.sql.functions as sf\n\nspark = SparkSession.builder.getOrCreate()\nproducts = spark.read.format(\"csv\").load(\"\/kaggle\/working\/products.csv\", header = True)\n\nproducts = products.where(\"department_id < 6\")\\\n    .groupBy(\"department_id\")\\\n    .agg(sf.count(sf.lit(1)).alias(\"count\"))\\\n\nproducts.show()","1991d7dc":"%%fsql\ndf = LOAD \"\/kaggle\/working\/aisles.csv\" (header=TRUE)\nPRINT 1 ROW\ndf = ALTER COLUMNS aisle_id:int, aisle:str FROM df\nPRINT 1 ROW","a3bfc10e":"%%fsql\ndf = LOAD \"\/kaggle\/working\/aisles.csv\" (header=TRUE) COLUMNS aisle_id:int, aisle:str\nPRINT 1 ROWS","49063b2c":"test = pd.read_csv(\"\/kaggle\/working\/aisles.csv\")\ntest['new_col'] = 1\ntest.head(3)","411db6e9":"%%fsql\nSELECT *\n  FROM test\n PRINT 5 ROWS","a1e1cc7c":"%%fsql\ndf = LOAD \"\/kaggle\/working\/aisles.csv\" (header=TRUE)\nSELECT * \nFROM df\nWHERE aisle_id = '3'\nYIELD DATAFRAME AS result\nPRINT","e7f3ed4e":"# Printing dataframe from previous step\nprint(result.as_pandas().head())","844520d8":"%%fsql\n-- This is available because of the previous YIELD\nSELECT * FROM result\nPRINT","7b1ce389":"# This is a Python code block\ncheese_aisle = 'specialty cheeses'","7565588d":"%%fsql\ndf = LOAD \"\/kaggle\/working\/aisles.csv\" (header=TRUE)\n\nSELECT *\nFROM df WHERE aisle = '{{cheese_aisle}}'\nPRINT","3c9ad338":"%%fsql\ndf = SELECT * FROM (LOAD \"\/kaggle\/working\/products.csv\" (header=TRUE))\nALTER COLUMNS product_id:int, product_name:str, aisle_id:int, department_id:int\nPRINT 5 ROWS","4d324ef9":"# Some plotting utility functions. These will be used in conjunction with SQL later\ncolor = sns.color_palette()\n\ndef dow_countplot(df:pd.DataFrame) -> None:\n    plt.figure(figsize=(12,8))\n    sns.countplot(df['order_dow'], color=color[0])\n    plt.ylabel('Count', fontsize=12)\n    plt.xlabel('Day of week', fontsize=12)\n    plt.title(\"Frequency of order by week day\", fontsize=15)\n    plt.show()\n    \ndef hour_countplot(df:pd.DataFrame) -> None:\n    plt.figure(figsize=(12,8))\n    sns.countplot(df['order_hour_of_day'], color=color[1])\n    plt.ylabel('Count', fontsize=12)\n    plt.xlabel('Hour of Day', fontsize=12)\n    plt.title(\"Frequency of order by hour of day\", fontsize=15)\n    plt.show()\n    \ndef max_order_barplot(df:pd.DataFrame) -> None:\n    plt.figure(figsize=(12,8))\n    sns.barplot(df['n_orders'], df['count'], alpha=0.8, color=color[2])\n    plt.ylabel('Number of Occurrences', fontsize=12)\n    plt.xlabel('Maximum order number', fontsize=12)\n    plt.title(\"Frequency of maximum order numbers\", fontsize=15)\n    plt.xticks(rotation='vertical')\n    plt.show()\n    \ndef days_since_prior_countplot(df:pd.DataFrame) -> None:\n    plt.figure(figsize=(12,8))\n    sns.countplot(df['days_since_prior_order'], color=color[3])\n    plt.ylabel('Count', fontsize=12)\n    plt.xlabel('Days since prior order', fontsize=12)\n    plt.xticks(rotation='vertical')\n    plt.title(\"Frequency distribution by days since prior order\", fontsize=15)\n    plt.show()\n\ndef top_products_barplot(df:pd.DataFrame) -> None:\n    plt.figure(figsize=(12,8))\n    sns.barplot(df['product_name'], df['count'], alpha=0.8, color=color[4])\n    plt.ylabel('Number of Occurrences', fontsize=12)\n    plt.xlabel('Product Name', fontsize=12)\n    plt.title(\"Frequency of product orders (top 20)\", fontsize=15)\n    plt.xticks(rotation=45, ha=\"right\")\n    plt.show()\n    \ndef top_aisles_barplot(df:pd.DataFrame) -> None:\n    plt.figure(figsize=(12,8))\n    sns.barplot(df['aisle'], df['count'], alpha=0.8, color=color[5])\n    plt.ylabel('Number of Occurrences', fontsize=12)\n    plt.xlabel('Aisle Name', fontsize=12)\n    plt.title(\"Number of Occurances of each aisle\", fontsize=15)\n    plt.xticks(rotation=45, ha=\"right\")\n    plt.show()\n    \ndef department_pieplot(df:pd.DataFrame) -> None:\n    plt.figure(figsize=(10,10))\n    temp_series = df['department'].value_counts()\n    labels = (np.array(temp_series.index))\n    sizes = (np.array((temp_series \/ temp_series.sum())*100))\n    plt.pie(sizes, labels=labels, \n            autopct='%1.1f%%', startangle=200)\n    plt.title(\"Departments distribution\", fontsize=15)\n    plt.show()\n    \n    ","987b1eb2":"%%fsql\nSELECT * FROM (LOAD \"\/kaggle\/working\/orders.csv\" (header=TRUE)\n               COLUMNS order_id:int,user_id:int, eval_set:str, order_number:int, order_dow:int, order_hour_of_day:int, days_since_prior_order:double)\nYIELD FILE AS orders\nPRINT 10 ROWS\n\norder_products = SELECT order_id, product_id, reordered\n                 FROM (LOAD \"\/kaggle\/working\/order_products__prior.csv\" (header=true, infer_schema=true))\norder_products = ALTER COLUMNS reordered:int\nYIELD FILE AS order_products\nPRINT 10 ROWS","b5bf8958":"%%fsql\n-- This can be used because of YIELD FILE\nSELECT COUNT(*) AS count\n  FROM orders \n PRINT\n \nSELECT COUNT(*) AS count\n  FROM order_products\n PRINT","1f879218":"%%fsql\nSELECT COUNT(*) - COUNT(order_id) AS order_id,\n    COUNT(*) - COUNT(user_id) AS user_id,\n    COUNT(*) - COUNT(eval_set) AS eval_set,\n    COUNT(*) - COUNT(order_number) AS order_number,\n    COUNT(*) - COUNT(order_dow) AS order_dow,\n    COUNT(*) - COUNT(order_hour_of_day) AS order_hour_of_day,\n    COUNT(*) - COUNT(days_since_prior_order) AS days_since_prior_order\nFROM orders\nPRINT","b9ec4df7":"#schema: *\ndef null_count(df:pd.DataFrame) -> pd.DataFrame:\n    return pd.DataFrame(df.isnull().sum(axis = 0)).T","156b5fb7":"%%fsql\nTRANSFORM orders USING null_count\nPRINT\n\nTRANSFORM order_products USING null_count\nPRINT","1141335c":"%%fsql\ntempdf = SELECT user_id, MAX(order_number) AS n_orders\nFROM orders\nGROUP BY user_id\nPRINT 2 ROWS\n\nSELECT n_orders, COUNT(n_orders) AS count\nFROM tempdf\nGROUP BY n_orders\nOUTPUT USING max_order_barplot","17e3f39a":"%%fsql\n-- Frequency of orders by day of week\ndf = SELECT * FROM orders\nOUTPUT USING dow_countplot\nOUTPUT USING hour_countplot\nOUTPUT USING days_since_prior_countplot","9db0b702":"%%fsql\ntempdf = SELECT COUNT(*) AS total,\n                SUM(CASE WHEN reordered = 1 THEN 1 ELSE 0 END) AS reordered\n           FROM order_products\n           \nSELECT reordered \/ total * 100 AS percent_reordered\n  FROM tempdf\n PRINT","e4ae0afb":"%%fsql\ntempdf = SELECT order_id, MAX(reordered) AS contains_reorder\n           FROM order_products\n       GROUP BY order_id\n\nSELECT 100 - AVG(contains_reorder) * 100 AS pct_w_no_reorder\n  FROM tempdf\n PRINT","3a145b70":"%%fsql\nproducts = LOAD \"\/kaggle\/working\/products.csv\" (header=TRUE, infer_schema=TRUE) YIELD FILE\nPRINT 5 ROWS\n\naisles = LOAD \"\/kaggle\/working\/aisles.csv\" (header=TRUE, infer_schema=TRUE) YIELD DATAFRAME\nPRINT 5 ROWS\n\ndepartments = LOAD \"\/kaggle\/working\/departments.csv\" (header=TRUE, infer_schema=TRUE) YIELD DATAFRAME\nPRINT 5 ROWS","ed940e1c":"%%fsql dask\n-- Memory issues but dask solves it\nresult = SELECT order_id, aisle, product_name, department, reordered\n           FROM order_products\n     INNER JOIN products\n             ON order_products.product_id = products.product_id\n     INNER JOIN aisles\n             ON products.aisle_id = aisles.aisle_id\n     INNER JOIN departments\n             ON departments.department_id = products.department_id\n     SAVE OVERWRITE \"\/kaggle\/working\/result.parquet\"","876ac6c6":"%%fsql\nresult = LOAD \"\/kaggle\/working\/result.parquet\"\n\n-- Top products\n  SELECT product_name, COUNT(*) AS count\n    FROM result\nGROUP BY product_name\nORDER BY count DESC\n   LIMIT 20\n  OUTPUT USING top_products_barplot\n\n-- Top aisles \n  SELECT aisle, COUNT(*) AS count\n    FROM result\nGROUP BY aisle\nORDER BY count DESC\n   LIMIT 20\n  OUTPUT USING top_aisles_barplot\n \n-- Department pieplot\nOUTPUT result USING department_pieplot\n ","3c0519ff":"#schema: user_id:int, basket_size:int\ndef get_basket_size_median(df:pd.DataFrame) -> pd.DataFrame:\n    return pd.DataFrame({'user_id': [df.iloc[0]['user_id']], 'basket_size' : [int(round(df[['basket_size']].median()))]})","d120bdbb":"# There are 206k users in the dataset. Let us downsample.\nn = 50000","c150c35b":"%%fsql\nuser_id = SELECT DISTINCT user_id FROM orders\nuser_id = SAMPLE {{n}} ROWS SEED 1 FROM user_id\nYIELD FILE AS user_ids","3ffa6b15":"from fugue_sql import fsql\n\nquery = \"\"\"\nresult = LOAD \"\/kaggle\/working\/result.parquet\"\n\nbasket_size = SELECT order_id, COUNT(*) AS basket_size\n                FROM result\n            GROUP BY order_id \n  \norder_id = SELECT orders.user_id, order_id \n             FROM orders\n       INNER JOIN user_ids\n               ON user_ids.user_id = orders.user_id\n            \nbasket_size = SELECT user_id, order_id.order_id, basket_size\n                FROM basket_size\n          INNER JOIN order_id\n                  ON basket_size.order_id = order_id.order_id\n                  \nPRINT 2 ROWS\n\nTRANSFORM basket_size PREPARTITION BY user_id USING get_basket_size_median\nPRINT 2 ROWS\n\"\"\"\n\nstart = time.time()\nfsql(query).run()\nprint(f\"Operation took {time.time() - start} seconds\")","a7ef3ae5":"start = time.time()\nfsql(query).run(\"spark\")\nprint(f\"Operation took {time.time() - start} seconds\")","ea909e0a":"from fugue import FugueWorkflow\nfrom fugue_spark import SparkExecutionEngine\nfrom typing import List, Any, Iterable\n\n# schema: user_id:int, product_name:str, count:int\ndef product_count(df:pd.DataFrame) -> pd.DataFrame:\n    return pd.DataFrame({'user_id': [df.iloc[0]['user_id']], \n                         'product_name': [df.iloc[0]['product_name']],\n                         'count': [df.shape[0]]})\n\n# schema: user_id:int, n_orders:int\ndef nth(df:Iterable[List[Any]], n) -> Iterable[List[Any]]:\n    for row in df:\n        if n==0:\n            yield [row[0], row[1]]\n            return\n        n-=1\n\n        \nwith FugueWorkflow(SparkExecutionEngine) as dag:\n    product_orders = dag.load(\"\/kaggle\/working\/result.parquet\")\n    \n    order_id = dag.df(orders)\n    users = dag.df(user_ids)\n    \n    # Filtering to our sampled users. Note the persist\n    order_id = order_id.join(users, how=\"inner\", on=[\"user_id\"]).persist()\n    \n    # Count for each product by user_id\n    tempdf = dag.df(product_orders).join(order_id, how=\"inner\", on=[\"order_id\"])\n    tempdf = tempdf.partition(by=[\"user_id\", \"product_name\"]).transform(product_count)\n\n    # Join to tempdf2 which gets us the number of orders per user\n    tempdf2 = order_id.partition(by=['user_id'], presort=\"order_id desc\").transform(nth, params={\"n\":0})\n    result = tempdf.join(tempdf2, how=\"inner\", on=[\"user_id\"])\\\n                    .partition(by=[\"user_id\"], presort=\"count desc\")\\\n                    .take(5)\n    result.save(\"\/kaggle\/working\/top_5_products.parquet\", mode=\"overwrite\")\n    result.show(15)","c627c5a3":"%%fsql spark\nproduct_orders = SELECT order_id, product_name FROM (LOAD \"\/kaggle\/working\/result.parquet\")\n\n-- Filtering to our sampled users\norder_id = SELECT orders.user_id, order_id, order_number\n             FROM orders\n       INNER JOIN user_ids\n               ON user_ids.user_id = orders.user_id PERSIST\n\n-- Count for each product by user_id\ntempdf = SELECT user_id, product_name, COUNT(*) AS count\n           FROM product_orders\n     INNER JOIN order_id\n             ON product_orders.order_id = order_id.order_id\n       GROUP BY user_id, product_name\n    \n-- Join to an inner select which gets us the number of orders per user\n    SELECT tempdf.user_id, product_name, count, n_orders\n      FROM tempdf\nINNER JOIN (SELECT user_id, MAX(order_number) AS n_orders\n            FROM order_id\n            GROUP BY user_id) tempdf2\n        ON tempdf.user_id = tempdf2.user_id\n      TAKE 5 ROWS PREPARTITION BY user_id PRESORT count DESC  \n      SAVE OVERWRITE \"\/kaggle\/working\/top_5_products.parquet\"\n     PRINT 15 ROWS","b871a64e":"# schema: user_id:int, trend:double\ndef reorder_trend(df:pd.DataFrame) -> pd.DataFrame:\n    m, b = np.polyfit(list(range(df.shape[0])), df['reorder_rate'], 1)\n    if df.shape[0] > 5:\n        return pd.DataFrame({'user_id': [df.iloc[0]['user_id']], 'trend' : [m]})\n    else:\n        return pd.DataFrame({'user_id': [df.iloc[0]['user_id']], 'trend' : [0]})","1a7c68c1":"%%fsql spark\nproduct_orders = SELECT order_id, reordered FROM (LOAD \"\/kaggle\/working\/result.parquet\")\norder_id = SELECT orders.user_id, order_id, order_number\n             FROM orders\n       INNER JOIN user_ids\n               ON user_ids.user_id = orders.user_id\n               \n    SELECT user_id, order_number, AVG(reordered) AS reorder_rate\n      FROM product_orders\nINNER JOIN order_id\n        ON product_orders.order_id = order_id.order_id\n  GROUP BY user_id, order_number\n  TAKE 10 ROWS PREPARTITION BY user_id PRESORT order_number DESC\n  PRINT 10 ROWS\n  \ntrend = TRANSFORM PREPARTITION BY user_id PRESORT order_number ASC USING reorder_trend \n  PRINT 5 ROWS\n  \n  SELECT * FROM trend\n  YIELD FILE AS trend_stats","08e584fe":"%%fsql\nSELECT * \n     FROM trend_stats\n ORDER BY trend DESC\n PRINT 10 ROWS\n \nSELECT * \n     FROM trend_stats\n ORDER BY trend ASC\n PRINT 10 ROWS","1ccf60c5":"from fugue import FugueWorkflow\nfrom fugue_spark import SparkExecutionEngine\nfrom typing import List, Any, Iterable\n\n# schema: user_id:int, product_name:str, count:int\ndef product_count(df:pd.DataFrame) -> pd.DataFrame:\n    return pd.DataFrame({'user_id': [df.iloc[0]['user_id']], \n                         'product_name': [df.iloc[0]['product_name']],\n                         'count': [df.shape[0]]})\n\n# schema: user_id:int, n_orders:int\ndef nth(df:Iterable[List[Any]], n) -> Iterable[List[Any]]:\n    for row in df:\n        if n==0:\n            yield [row[0], row[1]]\n            return\n        n-=1\n\n        \nwith FugueWorkflow(SparkExecutionEngine) as dag:\n    product_orders = dag.load(\"\/kaggle\/working\/result.parquet\")\n    \n    order_id = dag.df(orders)\n    users = dag.df(user_ids)\n    \n    # Filtering to our sampled users. Note the persist\n    order_id = order_id.join(users, how=\"inner\", on=[\"user_id\"]).persist()\n    \n    # Count for each product by user_id\n    tempdf = dag.df(product_orders).join(order_id, how=\"inner\", on=[\"order_id\"])\n    tempdf = tempdf.partition(by=[\"user_id\", \"product_name\"]).transform(product_count)\n\n    # Join to tempdf2 which gets us the number of orders per user\n    tempdf2 = order_id.partition(by=['user_id'], presort=\"order_id desc\").transform(nth, params={\"n\":0})\n    result = tempdf.join(tempdf2, how=\"inner\", on=[\"user_id\"])\\\n                    .partition(by=[\"user_id\"], presort=\"count desc\")\\\n                    .take(5)\n    result.save(\"\/kaggle\/working\/top_5_products.parquet\", mode=\"overwrite\")\n    result.show(15)","9ca0a51c":"This provides syntax highlighting for Fugue SQL cells and allows us to use the %%fsql magic.","11657474":"## Percentage of product orders that are reorders\n\nHere we check how many individual product orders are reorders. This tells us how many times users are buying new products that they have not ordered before.","2de7bf34":"Although not shown in this notebook, it is worth talking about PERSIST and lazy evaluation for those new to distributed computing. ","552866b7":"# About this notebook\n\nThis notebook is a demonstration of FugueSQL prepared for Thinkful Data Analyst Bootcamp students. **FugueSQL is a language that allows SQL Users to use in-memory data frameworks such Pandas, Spark, and Dask with a SQL interface**. It has some differences from standard SQL that will be shows here. \n\nFugueSQL aims to be more English-like, and provide a fun interface for Data Analysts to work with data in their tool of choice. The FugueSQL notebook extension allows users to use FugueSQL with syntax highlighting in Jupyter notebook cells\n\nFugue also has a programming interface that is not covered in this notebook. The programming interface is not covered here, but the link to the repo and Slack channels are listed below if anyone is interested.","c65b1449":"## Quick Experiments","8e13eb97":"## Loading the Orders and Order Products Table","27d5a7a0":"![DAG](https:\/\/www.edureka.co\/community\/?qa=blob&qa_blobid=12881994506202880144)","dbab49e5":"# Data Analysis","f64ae861":"The order_products table is appromiximately 32 million rows. Operations on this stretches the limits of Pandas.","f5a03751":"## Defining Schema for a DataFrame","23ddc90a":"## Top 5 Products for Each User","da2f8661":"## Jinja Templating\n\nSometime a Python variable will be needed inside a SQL block. Think of dynamic lists used to filter values in a DataFrame. In this case, Jinja templating can be used to pass a variable inside a fsql code block.","9a3cb5da":"## Introductions to Partitions\n\nIn order to understand partitions, we can look at this image showing the way Dask scales Pandas. Each partition is a Pandas DataFrame. A Dask DataFrame is the collection of all of the Pandas DataFrames. Operations are done on each partition, and then aggregated back.","de5ff75e":"Here we make a Python function to help us get the median `basket_size` for one specific user. The median `basket_size` of a `user_id` can be calculated without knowing the information of other `user_ids`. This is a good hint that we can do this on a per partition basis. The partition is a guide for parallelization. **Data that belong to the same partition will live inside the same executor**.","0484f060":"<img src=\"https:\/\/user-images.githubusercontent.com\/11656932\/62263986-bbba2f00-b3e3-11e9-9b5c-8446ba4efcf9.png\" align=\"left\" width=\"700\"\/>","ddabd292":"## Reorder Ratio Over Time","51741374":"## Dask for Handle Memory Spillover","d21a6211":"Notice the variable assignment during the `LOAD` statement. Variable assignment is not limited to `LOAD` opearations. it can also be used during the `SELECT` statement to create intermediate tables. All ANSI SQL keywords are available in FugueSQL","61c638be":"## Installation\n\nNote that this installation is optimized for Kaggle notebooks. `fuggle` is a library for Fugue on Kaggle notebooks. Installating fugue for use outside Kaggle notebooks should just be `pip install fugue`. Join the Slack (listed above) if there are any questions.","c1b23cce":"## Groupby and Filtering","ddac926e":"## Median Basket Size for Each Customer","141223f7":"In this section we are interested in getting the top 5 products for each user. We also want to know how frequently they buy the products. Are they buying it every time they go into the store? Maybe this will tell us which customers are very predictable.","f8c31eaf":"## Anonymity and Inline\n\nAnonymity is when the dataframe to perform the operation on is not specified. As a default, the output of the last operation will be used. This is a FugueSQL feature designed to simplify code. `PRINT` is an example of this. ","323ae762":"## Parquet versus CSV\n\nThe previous operation was saved in a parquet file. Parquet is one of the most common file formats for distributed computing. There are a couple of advantages over CSVs. \n\n* Column based versus row based\n* Compression (70% reduction in size)\n* Optimization with Spark\n* Schema\n* Partition friendly","46c7e665":"## Introduction to Distributed Computing\n\n","28541402":"## Links \n\nFugue is a pure abstraction layer that makes code portable across differing computing frameworks such as Pandas, Spark and Dask. It allows users to write code compatible across all 3 frameworks. It guarantees consistency regardless of scale and a unified framework for compute. All questions are welcome in the Slack channel.\n\n[Fugue Repo](https:\/\/github.com\/fugue-project\/fugue)\n\n[Fugue Slack](https:\/\/join.slack.com\/t\/fugue-project\/shared_invite\/zt-jl0pcahu-KdlSOgi~fP50TZWmNxdWYQ)","e3d9c2b4":"Now we bring the same query into Spark by passing in the ending into the `run` method. We will see the benefits of parallelizing the opeartion. Some of the performance gains are due to the optimizations of SparkSQL. There is more than a 4x speed up just by changing the execution engine.","65b9ad6b":"This is also the first place we observe how to change the execution engine in FugueSQL. All we have to do is specify it after the `%%fsql` cell magic. The corresponding SQL code will then run on that engine. If there is a DataFrame that is available through `YIELD` , then it will have to be converted (under the hood).","969d7b8c":"Note that if we don't infer the schema, Pandas loads most columns as strings. We can use `ALTER COLUMNS` to change the syntax. For DataFrames with a large number of columns, we recommend using infer_schema and then `ALTER COLUMNS` to ensure the correct types.","75dae3e9":"### Ideal Partitioning Strategy\n![Partitioning](https:\/\/blog.scottlogic.com\/mdebeneducci\/assets\/Ideal-Partitioning.png)\n### Skewed Partitions\n![Skewed Partitions](https:\/\/blog.scottlogic.com\/mdebeneducci\/assets\/Skewed-Partitions.png)\n### Inefficient Scheduling\n![Inefficient Scheduling](https:\/\/blog.scottlogic.com\/mdebeneducci\/assets\/Inefficient-Scheduling.png)\n### Data Shuffling\n![Shuffle](https:\/\/blog.scottlogic.com\/mdebeneducci\/assets\/Shuffle-Diagram.png)","93717f64":"## Preprocessing","a2e61e47":"## Credits\n\nA lot of the plots and EDA here is based off this notebook: https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-instacart","2abce02d":"## Analysis","ef8545e3":"**Production Note**\n\nA side note, some people are curious about how to move Fugue from notebooks to production. There is an `fsql` function with Fugue that can be used for the programming interface. A user would wrap their SQL query in a string and then pass it to `fsql`. Of course, we lose syntax highlighting because it's a Python string.","5da2b841":"## Orders with no re-ordered products\n\nThese are the situations where either the customer is buying products for the first time or they are buying an entirely new set of products. We only have data for the second order of a user onwards so we don't need to filter by the order_number.\n\nWe can do this by aggregating on the order_id and getting the MAX of the reordered columns. The average of the resulting binary column will be the percent with reorders. 1 minus this value will be the percentage without reorders.","3a71528f":"## Passing DataFrames to fsql Cells\n\nFugueSQL allows for Python interoperatibility. DataFrames defined outside `%%fsql` cells can be used. In this example, we create a test DataFrame and use it inside a following FugueSQL code block.","931e0f5c":"Before we go into further analysis, we'll first give a brief introduction to distributed computing.\n\nThere is an image in the Dask repo [issues](https:\/\/github.com\/dask\/dask\/issues\/4471) that clearly illustrates the distributed computing paradigm. In general, there is a client or master that takes care of the orchestration and final data collection. The client is responsible for scheduling tasks among workers.\n\nBoth Spark and Dask have local modes also where they use the cores available on the local machine. This means we can still take advantage of the additional processing without having a cluster available.","c7473c17":"## Rowcount of order_products\n\nThis is the largest table and we get the row count here to understand the volume of data we are dealing with. For larger datasets, users should consider using Spark and Dask as the backend to FugueSQL. The Kaggle kernel is a 4-core machine also, but Pandas runs on 1 core by default.\n\nUsing Spark or Dask allows us to parallelize the operations performed on the data.","93131f4f":"## Missing Value Count\n\nThis is an example of an opearation that is a lot more verbose to write in SQL. We can achieve the same thing by using a Python function and one line of Pandas code.","a8919a74":"Similarly, schema can be explicitly defined while loading in the CSV.","90017d7d":"# FugueSQL Syntax\n\nBefore using FugueSQL for data analysis, we'll go over some quick examples on the syntax. These will be put together for more complciated operations later. These will show the enhancements over standard SQL","ad98eb25":"## Persist and Lazy Evaluation","05ed0d66":"**The Case for SQL as Grammar for Logic**\n\nThis is the motivation for Fugue. Can we decouple the expression of our logic from the framework we are using? Fugue achieves this by letting users specity the execution during runtime. We can run the same SQL code on Pandas, Spark, or Dask by simple changing one line of code to define our execution engine. This provides more robust code that is agnostic to the volume of the data we're operating on.\n\nIt is important to note that Fugue also has a Python abstraction layer similar to this SQL abstraction layer. They can also work together. We'll see hints of this later.","f9c57e54":"## Load and Save\n\nFugueSQL allows users to load from csv\/json\/parquet files using Pandas, Spark and Dask under the hood. This means we can load in data, perform transformations on it, and then write out the results. This allows data analysts to work with data not in a database.","dbe6cc85":"## Passing DataFrames out of fsql Cells\n\nDataFrames defined in fsql cells can be in following cells or in native Python by using `YIELD DATAFRAME`. This holds the DataFrame in memory.  ","990b1653":"Here we perform a simple groupby and filter. The syntax is exactly like stadard SQL. There is just a quick `PRINT` statement to show the data we're working with.","8eec1522":"Before moving on to other FugueSQL commands, this is a good place to show what the equivalent Panadas syntax would be for the same opearation. Note that `loc` is used to filter. We need to take care of resetting the index, and the renaming of the column is more verbose. In general, SQL is easier to read for some operations.","3a443171":"## Top 20 Products","f7c13669":"More important though, the Python code is very coupled with the Pandas framework. If the size of data becomes to big, we'd have to move to another framework like Spark or Dask. This Pandas-written code will no longer be applicable. In order to show this, we'll implement the same code in Spark to show how different the syntax is.","47c7c855":"<img src=\"https:\/\/raw.githubusercontent.com\/fugue-project\/fugue\/master\/images\/logo.svg\" align=\"left\" width=\"500\"\/>","f17858ea":"## Other Tables","dd62ad08":"The code snippet below had a lot of memory issues because we are joining all of the tables to the order_products table, which has 32 million rows. This will need some clever optimization to pull off in Pandas (converting dtypes or filtering columns before join). With Dask though, we can perform the join, have the operation spill over to disk, and then get the smaller result set.\n\nPandas needs 3x more RAM than the size of the data to run effectively. This means Dask will probably help your workflows way earlier than you expect. Dask handles writing to disk when it hits around 60-70% of utilization by default. This keeps Pandas operating effectively.","046cb49c":"## [Reference on Partitions](https:\/\/blog.scottlogic.com\/2018\/03\/22\/apache-spark-performance.html) by Scott Logic\n\nThis reference has a lot of good images and explanations","d7aee166":"![Line of best fit](https:\/\/i.investopedia.com\/content\/video\/line_of_best_fit_\/lineofbestfit.png)","757baddf":"<img src=\"https:\/\/docs.dask.org\/en\/latest\/_images\/dask-dataframe.svg\" align=\"left\" width=\"400\"\/>","78c83e3a":"This particular dataset comes in zipfiles so we'll preprocess and unzip to read with pandas\/FugueSQL."}}