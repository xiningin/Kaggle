{"cell_type":{"d6a7f7ff":"code","9f69c16e":"code","2a0ccb61":"code","291f03e7":"code","f068683b":"code","1aab1220":"markdown"},"source":{"d6a7f7ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f69c16e":"#1_importing request to send http request and get response and json to handle json data \nimport requests\nimport json  ","2a0ccb61":"##2_comment-in for using the original google maps api\n# If you have a Google Places API key, enter it here\n# api_key = 'AIzaSy___IDByT70'\n# https:\/\/developers.google.com\/maps\/documentation\/geocoding\/intro\n\napi_key = False \n\n#3_API handling\nif api_key is False:\n    api_key = 42\n    serviceurl = 'http:\/\/py4e-data.dr-chuck.net\/json' #proxy api\nelse :\n    serviceurl = 'https:\/\/maps.googleapis.com\/maps\/api\/geocode\/json' #not using this\n\n","291f03e7":"#4_File handling\nin_file = open(\"..\/input\/geocoding-input-file\/Prac.csv\",\"r\")\n\nlines = in_file.readlines() \nd = {} \n\n#5_exporting all results to another csv\nout_file = open(\"OutputPrac.csv\",\"w\") \nout_file.write(' ')\nout_file.write('\\n')\n\n","f068683b":"#6_loop handling json data and respond.get() method\nfor line in lines[1:]: \n    line = line.strip() \n    address = line #maintain homogeneity\n    payload = dict() #{}\n    payload['address'] = address \n    if api_key is not False: payload['key'] = api_key #needed for the original API\n \n    r = requests.get(serviceurl, params=payload)\n    data = r.text\n   \n    try:\n        js = json.loads(data)\n    except:\n        js = None \n       \n    if line not in d: #for avoiding repeatations\n        try:\n            lat = js['results'][0]['geometry']['location']['lat']\n            lng = js['results'][0]['geometry']['location']['lng']\n            d[line] = [lat, lng]\n            str = '{},{},{}'.format(line, d[line][0], d[line][1])\n            if 20.86382 < lat < 26.33338 and 88.15638 < lng < 92.30153: #Limiting coordinates for Bangladesh\n                print(str)\n            else:\n                print(address + 'WRONG DATA') #for data discrepancy\n        except:\n            print(address + 'NOT FOUND') #data not retrievable\n           \n        out_file.write(str)\n        out_file.write('\\n')\n       \n\nin_file.close()\nout_file.close()\n\nprint(\"FINISHED\")","1aab1220":"*Printing the output, if the data is not retrievable from the API's database, then it will be featured as \"**Not found**\". And if it is a data that falls outside the latitude and longitude limit of Bangladesh, then, this will be featured as \"**Wrong Data**\", as the input file is only dedicated to Bangladesh addresses.*"}}