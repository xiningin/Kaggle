{"cell_type":{"0ceb8ea3":"code","a5e199f0":"code","fcc1c5a8":"code","400c0d52":"code","23610bc5":"code","50261360":"code","70402d33":"code","1a6c742c":"code","d459f55c":"code","9652b65d":"code","821a4d4d":"code","985bc510":"code","815852be":"code","9ecbdb71":"code","7d630f1e":"code","7c86e549":"code","636347b9":"code","8debbbcf":"markdown","9f2070f0":"markdown","63a6c18f":"markdown","96271902":"markdown","dd6fddb3":"markdown","19aa3fe4":"markdown","3414bbfb":"markdown","c9c4af0b":"markdown","6c9a5d06":"markdown","86ebacf5":"markdown","29302164":"markdown","034b8e82":"markdown","159ec7e1":"markdown","9b84f1f0":"markdown","2dfba59b":"markdown","e375ffac":"markdown","51645d17":"markdown"},"source":{"0ceb8ea3":"from IPython.display import HTML\nfile = open(\"..\/input\/notebookassets\/custom.css\")\nHTML(f\"<style>{file.read()}<\/style>\")","a5e199f0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom colorama import Fore, Style\nimport cv2\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff","fcc1c5a8":"def cout(string: str, color: str, end='\\n') -> str:\n    \"\"\"\n    Prints a string in the required color\n    \"\"\"\n    print(color+string+Style.RESET_ALL, end=end)","400c0d52":"TRAIN_DIR = \"..\/input\/hpa-single-cell-image-classification\/train\"\nTEST_DIR = \"..\/input\/hpa-single-cell-image-classification\/test\"","23610bc5":"data = pd.read_csv(\"..\/input\/hpa-single-cell-image-classification\/train.csv\")\ndata.sample(10)","50261360":"top_10_keys = list(dict(data['Label'].value_counts()).keys())[:10]\ntop_10_values = list(dict(data['Label'].value_counts()).values())[:10]\n\ncout(\"Top-10 Labels in the Dataset:\\n\", color=Fore.BLUE)\nfor i, (x, y) in enumerate(zip(top_10_keys, top_10_values)):\n    cout(f\"Rank: {i+1}\", color=Fore.CYAN, end=' \\t')\n    cout(\"Label: \", color=Fore.GREEN, end=' ')\n    cout(f\"{x} \", color=Fore.RED, end='\\t')\n    cout(\"Values: \", color=Fore.GREEN, end=' ')\n    cout(f\"{y} \", color=Fore.RED, end='\\n')","70402d33":"top_10_keys = list(dict(data['Label'].value_counts()).keys())[-10:]\ntop_10_values = list(dict(data['Label'].value_counts()).values())[-10:]\n\ncout(\"Top-10 (least occurring) Labels in the Dataset:\\n\", color=Fore.BLUE)\nfor i, (x, y) in enumerate(zip(top_10_keys, top_10_values)):\n    cout(\"Label: \", color=Fore.GREEN, end=' ')\n    cout(f\"{x} \", color=Fore.RED, end='\\t')\n    cout(\"Values: \", color=Fore.GREEN, end=' ')\n    cout(f\"{y} \", color=Fore.RED, end='\\n')","1a6c742c":"# Get all 4 color grade images for a single id\ncategory_0 = data[data['Label'] == '0']['ID']\nrdm_cat0_img = np.random.choice(category_0.tolist())\nall_imgs_current = []\nfor x in os.listdir(TRAIN_DIR):\n    if rdm_cat0_img in x:\n        all_imgs_current.append(x)","d459f55c":"current_red = None\nfor x in all_imgs_current:\n    if \"red\" in x:\n        current_red = x\ncurrent_red = cv2.imread(os.path.join(TRAIN_DIR, current_red), 0)\nfig = px.imshow(current_red, title='Category: 0, [Microtube Channels (Red)]')\nfig.show()","9652b65d":"current_blue = None\nfor x in all_imgs_current:\n    if \"blue\" in x:\n        current_blue = x\ncurrent_blue = cv2.imread(os.path.join(TRAIN_DIR, current_blue), 0)\nfig = px.imshow(current_blue, title='Category: 0, [Nuclei Channels (Blue)]')\nfig.show()","821a4d4d":"current_yellow = None\nfor x in all_imgs_current:\n    if \"yellow\" in x:\n        current_yellow = x\ncurrent_yellow = cv2.imread(os.path.join(TRAIN_DIR, current_yellow), 0)\nfig = px.imshow(current_yellow, title='Category: 0, [ER Channels (Yellow)]')\nfig.show()","985bc510":"current_green = None\nfor x in all_imgs_current:\n    if \"green\" in x:\n        current_green = x\ncurrent_green = cv2.imread(os.path.join(TRAIN_DIR, current_green), 0)\nfig = px.imshow(current_green, title='Category: 0, [Protein of Interest (Green)]')\nfig.show()","815852be":"# Get all 4 color grade images for a single id\ncategory_16_0 = data[data['Label'] == '16|0']['ID']\nrdm_cat16_0_img = np.random.choice(category_16_0.tolist())\nall_imgs_current = []\nfor x in os.listdir(TRAIN_DIR):\n    if rdm_cat16_0_img in x:\n        all_imgs_current.append(x)","9ecbdb71":"current_red = None\nfor x in all_imgs_current:\n    if \"red\" in x:\n        current_red = x\ncurrent_red = cv2.imread(os.path.join(TRAIN_DIR, current_red), 0)\nfig = px.imshow(current_red, title='Category: 16|0, [Microtube Channels (Red)]')\nfig.show()","7d630f1e":"current_blue = None\nfor x in all_imgs_current:\n    if \"blue\" in x:\n        current_blue = x\ncurrent_blue = cv2.imread(os.path.join(TRAIN_DIR, current_blue), 0)\nfig = px.imshow(current_blue, title='Category: 16|0, [Nuclei Channels (Blue)]')\nfig.show()","7c86e549":"current_yellow = None\nfor x in all_imgs_current:\n    if \"yellow\" in x:\n        current_yellow = x\ncurrent_yellow = cv2.imread(os.path.join(TRAIN_DIR, current_yellow), 0)\nfig = px.imshow(current_yellow, title='Category: 16|0, [ER Channels (Yellow)]')\nfig.show()","636347b9":"current_green = None\nfor x in all_imgs_current:\n    if \"green\" in x:\n        current_green = x\ncurrent_green = cv2.imread(os.path.join(TRAIN_DIR, current_green), 0)\nfig = px.imshow(current_green, title='Category: 16|0, [Protein of Interest (Green)]')\nfig.show()","8debbbcf":"<strong style=\"color:red\">If you like this notebook, please give it an upvote! \u2b06\ufe0f<\/strong>","9f2070f0":"## Top-10 Least Occurring Labels in the Training Dataset\n\nNow let us at the Top-10 least occuring labels in the training dataset.","63a6c18f":"## Top-10 Most Occurring Labels in the Training Dataset\n\nLet's start by looking at the Top-10 most occurring labels in the training dataset.","96271902":"#### Nuclei Channels (Blue)","dd6fddb3":"### Category: 0","19aa3fe4":"## Visualizing Images of a Few Top-Categories\n\nLet's now visualize the images of a few top categories and see what we find.","3414bbfb":"#### Endoplasmic Reticulum - ER Channels(Yellow)","c9c4af0b":"#### Nuclei Channels (Blue)","6c9a5d06":"## Importing Libraries and Data \ud83d\udcda","86ebacf5":"#### Microtube Channels (Red)","29302164":"#### Protein of Interest","034b8e82":"#### Protein of Interest","159ec7e1":"## Are IDs repeated?\n\nNo they are not. But we do have 4 Different Color Images for every single ID.\n\nThese 4 different colors (`Red`, `Blue`, `Yellow`, `Green`) are 4 filters for specific ROIs.","9b84f1f0":"#### Microtube Channels (Red)","2dfba59b":"#### Endoplasmic Reticulum - ER Channels(Yellow)","e375ffac":"### Category: 16|0","51645d17":"### UNDER WORK \ud83d\udee0\ufe0f ============="}}