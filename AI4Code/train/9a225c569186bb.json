{"cell_type":{"62dee3a6":"code","57a535f0":"code","d82e88ce":"code","2b3c8b0b":"code","ab771b9b":"code","555d9f68":"code","f4c0cc93":"code","1138e406":"code","1e3765c0":"code","4e5f3b80":"code","fe3db075":"code","0fe71c1f":"code","9740d94d":"code","6475f735":"code","4516d344":"code","708e910c":"code","a18186dc":"code","fa4b09d0":"code","816d4295":"code","5df1e20d":"code","af53367f":"code","b5e627bc":"code","4416cad6":"code","1f9f0607":"code","00b5b3aa":"code","8ca0bd81":"code","d7b566a8":"code","3b9f94c2":"code","9d6a36a7":"code","97d975b1":"code","09032027":"code","c81dea36":"code","240f81fd":"code","bcaf00f2":"code","3234eb43":"markdown","9baafee8":"markdown","b64a64af":"markdown","97ab81ab":"markdown","2454d7a1":"markdown","87fb0cf9":"markdown","bca1bfb5":"markdown","ed1d2fb6":"markdown","e0613aa7":"markdown","729c5b28":"markdown","ab0358d0":"markdown","7691a907":"markdown","13ceda48":"markdown","8ffd2df5":"markdown"},"source":{"62dee3a6":"#!pip install transformers\n#https:\/\/skimai.com\/fine-tuning-bert-for-sentiment-analysis\/#2.-Tokenization-and-Input-Formatting","57a535f0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d82e88ce":"import os\nimport re\nfrom tqdm import tqdm\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","2b3c8b0b":"sample_submission = pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/sample_submission.csv.zip')\ntest_labels = pd.read_csv('\/\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test_labels.csv.zip')\ntrain = pd.read_csv('\/\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip')\ntest = pd.read_csv('\/\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip')","ab771b9b":"for i in test[0:1]['comment_text']:\n    print(i)","555d9f68":"len(train)","f4c0cc93":"train.head(5)","1138e406":"from sklearn.model_selection import train_test_split","1e3765c0":"#train = train.sample(frac=0.01, replace=True, random_state=1)\n\nX = train.comment_text.values\ny = train[['toxic','severe_toxic','obscene','threat','insult','identity_hate']].values\n\nX_train, X_val, y_train, y_val =train_test_split(X, y, test_size=0.1, random_state=2020)","4e5f3b80":"len(train)","fe3db075":"import torch\n\nif torch.cuda.is_available():       \n    device = torch.device(\"cuda\")\n    print(f'There are {torch.cuda.device_count()} GPU(s) available.')\n    print('Device name:', torch.cuda.get_device_name(0))\n\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","0fe71c1f":"def text_preprocessing(text):\n    \"\"\"\n    - Remove entity mentions (eg. '@united')\n    - Correct errors (eg. '&amp;' to '&')\n    @param    text (str): a string to be processed.\n    @return   text (Str): the processed string.\n    \"\"\"\n    # Remove '@name'\n    text = re.sub(r'(@.*?)[\\s]', ' ', text)\n\n    # Replace '&amp;' with '&'\n    text = re.sub(r'&amp;', '&', text)\n\n    # Remove trailing whitespace\n    text = re.sub(r'\\s+', ' ', text).strip()\n\n    return text","9740d94d":"# Print sentence 0\nprint('Original:\\n', X[0])\nprint('\\n\\n Processed: ', text_preprocessing(X[0]))","6475f735":"from transformers import BertTokenizer\n\n#Load the Bert tokenizer\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased',do_lower_case=True)\n\n# Create a funcition to tokenize a set of text\n\ndef preprocessing_for_bert(data):\n    \"\"\"Perform required preprocessing steps for pretrained BERT.\n    @param    data (np.array): Array of texts to be processed.\n    @return   input_ids (torch.Tensor): Tensor of token ids to be fed to a model.\n    @return   attention_masks (torch.Tensor): Tensor of indices specifying which\n                  tokens should be attended to by the model.\n    \"\"\"\n    # create empty lists to store outputs\n    input_ids = []\n    attention_masks = []\n    \n    #for every sentence...\n    \n    for sent in data:\n        # 'encode_plus will':\n        # (1) Tokenize the sentence\n        # (2) Add the `[CLS]` and `[SEP]` token to the start and end\n        # (3) Truncate\/Pad sentence to max length\n        # (4) Map tokens to their IDs\n        # (5) Create attention mask\n        # (6) Return a dictionary of outputs\n        encoded_sent = tokenizer.encode_plus(\n            text = text_preprocessing(sent),   #preprocess sentence\n            add_special_tokens = True,         #Add `[CLS]` and `[SEP]`\n            max_length= MAX_LEN  ,             #Max length to truncate\/pad\n            pad_to_max_length = True,          #pad sentence to max length \n            return_attention_mask= True        #Return attention mask \n        )\n        # Add the outputs to the lists\n        input_ids.append(encoded_sent.get('input_ids'))\n        attention_masks.append(encoded_sent.get('attention_mask'))\n        \n    #convert lists to tensors\n    input_ids = torch.tensor(input_ids)\n    attention_masks = torch.tensor(attention_masks)\n    \n    return input_ids,attention_masks","4516d344":"# Before tokenizing we need to specify the maximum length of our sentences\n\n#concat the train data and test data\n\nall_text = np.concatenate([train.comment_text.values,test.comment_text.values])\n\n#Encode the concatenated data\nlen_sent = [len(text_preprocessing(sent)) for sent in all_text]\n\n# Find the maximum length\navg_len = np.mean(len_sent)\nprint('Avg length: ',avg_len)","708e910c":"## Now Tokenizing the data\n\nMAX_LEN = 150\n\n# Print sentece 0 and its encoded token ids\ntoken_ids = list(preprocessing_for_bert([X[0]])[0].squeeze().numpy())\nprint('Original: ',X[0])\nprint('Token IDs: ',token_ids)","a18186dc":"# Run function 'preprocessing_for_bert' on the train set and validation set\nprint('Tokenizing data...')\ntrain_inputs, train_masks = preprocessing_for_bert(X_train)\nval_inputs, val_masks = preprocessing_for_bert(X_val)","fa4b09d0":"from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n\n# Convert other data types to torch.Tensor\ntrain_labels = torch.tensor(y_train)\nval_labels = torch.tensor(y_val)\n\n## For fine-tuning Bert, the authors recommmend a batch size of 16 or 32\nbatch_size = 32\n\n# Create the DataLoader for our training set\ntrain_data = TensorDataset(train_inputs,train_masks, train_labels)\ntrain_sampler = RandomSampler(train_data)\ntrain_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n\n# Create the DataLoader for our validation set\nval_data = TensorDataset(val_inputs, val_masks, val_labels)\nval_sampler = SequentialSampler(val_data)\nval_dataloader = DataLoader(val_data, sampler=val_sampler, batch_size=batch_size)","816d4295":"%%time\nimport torch\nimport torch.nn as nn\nfrom transformers import BertModel\n\n# Create the BertClassifier class\n\nclass BertClassifier(nn.Module):\n    \"\"\"\n        Bert Model for classification Tasks.\n    \"\"\"\n    def __init__(self, freeze_bert=False):\n        \"\"\"\n        @param   bert: a BertModel object\n        @param   classifier: a torch.nn.Module classifier\n        @param   freeze_bert (bool): Set `False` to fine_tune the Bert model\n        \"\"\"\n        super(BertClassifier,self).__init__()\n        # Specify hidden size of Bert, hidden size of our classifier, and number of labels\n        D_in, H, D_out = 768, 50 , 6\n        \n        self.bert = BertModel.from_pretrained('bert-base-uncased')\n        \n        self.classifier = nn.Sequential(\n                            nn.Linear(D_in, H),\n                            nn.ReLU(),\n                            #nn.Dropout(0.5),\n                            nn.Linear(H, D_out))\n        # Freeze the Bert Model\n        if freeze_bert:\n            for param in self.bert.parameters():\n                param.requires_grad = False\n    \n    def forward(self,input_ids,attention_mask):\n        \"\"\"\n        Feed input to BERT and the classifier to compute logits.\n        @param    input_ids (torch.Tensor): an input tensor with shape (batch_size,\n                      max_length)\n        @param    attention_mask (torch.Tensor): a tensor that hold attention mask\n                      information with shape (batch_size, max_length)\n        @return   logits (torch.Tensor): an output tensor with shape (batch_size,\n                      num_labels)\n        \"\"\"\n        outputs = self.bert(input_ids=input_ids,\n                           attention_mask = attention_mask)\n        \n        # Extract the last hidden state of the token `[CLS]` for classification task\n        last_hidden_state_cls = outputs[0][:,0,:]\n        \n        # Feed input to classifier to compute logits\n        logits = self.classifier(last_hidden_state_cls)\n        \n        return logits","5df1e20d":"from transformers import AdamW, get_linear_schedule_with_warmup\n\ndef initialize_model(epochs=4):\n    \"\"\"Initialize the Bert Classifier, the optimizer and the learning rate scheduler.\n    \"\"\"\n    \n    # Instantiate Bert Classifier\n    bert_classifier = BertClassifier(freeze_bert=False)\n    \n    bert_classifier.to(device)\n    \n    # Create the optimizer\n    optimizer = AdamW(bert_classifier.parameters(),\n                     lr=5e-5, #Default learning rate\n                     eps=1e-8 #Default epsilon value\n                     )\n    \n    # Total number of training steps\n    total_steps = len(train_dataloader) * epochs\n    \n    # Set up the learning rate scheduler\n    scheduler = get_linear_schedule_with_warmup(optimizer, \n                                              num_warmup_steps=0, # Default value\n                                              num_training_steps=total_steps)\n    return bert_classifier, optimizer, scheduler","af53367f":"import random\nimport time\n\n# Specify loss function\n#loss_fn = nn.CrossEntropyLoss()\nloss_fn = nn.BCEWithLogitsLoss()\n\ndef set_seed(seed_value=42):\n    \"\"\"Set seed for reproducibility.\n    \"\"\"\n    random.seed(seed_value)\n    np.random.seed(seed_value)\n    torch.manual_seed(seed_value)\n    torch.cuda.manual_seed_all(seed_value)\n\ndef train(model, train_dataloader, val_dataloader=None, epochs=4, evaluation=False):\n    \"\"\"Train the BertClassifier model.\n    \"\"\"\n    # Start training loop\n    print(\"Start training...\\n\")\n    for epoch_i in range(epochs):\n        # =======================================\n        #               Training\n        # =======================================\n        # Print the header of the result table\n        print(f\"{'Epoch':^7} | {'Batch':^7} | {'Train Loss':^12} | {'Val Loss':^10} | {'Val Acc':^9} | {'Elapsed':^9}\")\n        print(\"-\"*70)\n\n        # Measure the elapsed time of each epoch\n        t0_epoch, t0_batch = time.time(), time.time()\n\n        # Reset tracking variables at the beginning of each epoch\n        total_loss, batch_loss, batch_counts = 0, 0, 0\n\n        # Put the model into the training mode\n        model.train()\n\n        # For each batch of training data...\n        for step, batch in enumerate(train_dataloader):\n            batch_counts +=1\n            # Load batch to GPU\n            b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)\n\n            # Zero out any previously calculated gradients\n            optimizer.zero_grad()\n\n            # Perform a forward pass. This will return logits.\n            logits = model(b_input_ids, b_attn_mask)\n\n            # Compute loss and accumulate the loss values\n            loss = loss_fn(logits, b_labels.float())\n            batch_loss += loss.item()\n            total_loss += loss.item()\n\n            # Perform a backward pass to calculate gradients\n            loss.backward()\n\n            # Clip the norm of the gradients to 1.0 to prevent \"exploding gradients\"\n            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n            # Update parameters and the learning rate\n            optimizer.step()\n            scheduler.step()\n\n            # Print the loss values and time elapsed for every 20--50000 batches\n            if (step % 50000 == 0 and step != 0) or (step == len(train_dataloader) - 1):\n                # Calculate time elapsed for 20 batches\n                time_elapsed = time.time() - t0_batch\n\n                # Print training results\n                print(f\"{epoch_i + 1:^7} | {step:^7} | {batch_loss \/ batch_counts:^12.6f} | {'-':^10} | {'-':^9} | {time_elapsed:^9.2f}\")\n\n                # Reset batch tracking variables\n                batch_loss, batch_counts = 0, 0\n                t0_batch = time.time()\n\n        # Calculate the average loss over the entire training data\n        avg_train_loss = total_loss \/ len(train_dataloader)\n\n        print(\"-\"*70)\n        # =======================================\n        #               Evaluation\n        # =======================================\n        if evaluation == True:\n            # After the completion of each training epoch, measure the model's performance\n            # on our validation set.\n            val_loss, val_accuracy = evaluate(model, val_dataloader)\n\n            # Print performance over the entire training data\n            time_elapsed = time.time() - t0_epoch\n            \n            print(f\"{epoch_i + 1:^7} | {'-':^7} | {avg_train_loss:^12.6f} | {val_loss:^10.6f} | {val_accuracy:^9.2f} | {time_elapsed:^9.2f}\")\n            print(\"-\"*70)\n        print(\"\\n\")\n    \n    print(\"Training complete!\")\n\n\ndef evaluate(model, val_dataloader):\n    \"\"\"After the completion of each training epoch, measure the model's performance\n    on our validation set.\n    \"\"\"\n    # Put the model into the evaluation mode. The dropout layers are disabled during\n    # the test time.\n    model.eval()\n\n    # Tracking variables\n    val_accuracy = []\n    val_loss = []\n\n    # For each batch in our validation set...\n    for batch in val_dataloader:\n        # Load batch to GPU\n        b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)\n\n        # Compute logits\n        with torch.no_grad():\n            logits = model(b_input_ids, b_attn_mask)\n\n        # Compute loss\n        loss = loss_fn(logits, b_labels.float())\n        val_loss.append(loss.item())\n\n        # Get the predictions\n        #preds = torch.argmax(logits, dim=1).flatten()\n        \n        # Calculate the accuracy rate\n        #accuracy = (preds == b_labels).cpu().numpy().mean() * 100\n        accuracy = accuracy_thresh(logits.view(-1,6),b_labels.view(-1,6))\n        \n        val_accuracy.append(accuracy)\n\n    # Compute the average accuracy and loss over the validation set.\n    val_loss = np.mean(val_loss)\n    val_accuracy = np.mean(val_accuracy)\n\n    return val_loss, val_accuracy\n\ndef accuracy_thresh(y_pred, y_true, thresh:float=0.5, sigmoid:bool=True):\n    \"Compute accuracy when `y_pred` and `y_true` are the same size.\"\n    if sigmoid: \n        y_pred = y_pred.sigmoid()\n    return ((y_pred>thresh)==y_true.byte()).float().mean().item()\n    #return np.mean(((y_pred>thresh).float()==y_true.float()).float().cpu().numpy(), axis=1).sum()","b5e627bc":"set_seed(42)    # Set seed for reproducibility\nbert_classifier, optimizer, scheduler = initialize_model(epochs=1)\ntrain(bert_classifier, train_dataloader, val_dataloader, epochs=1, evaluation=True)","4416cad6":"import torch.nn.functional as F\n\ndef bert_predict(model, test_dataloader):\n    \"\"\"Perform a forward pass on the trained BERT model to predict probabilities\n    on the test set.\n    \"\"\"\n    # Put the model into the evaluation mode. The dropout layers are disabled during\n    # the test time.\n    model.eval()\n\n    all_logits = []\n\n    # For each batch in our test set...\n    for batch in test_dataloader:\n        # Load batch to GPU\n        b_input_ids, b_attn_mask = tuple(t.to(device) for t in batch)[:2]\n\n        # Compute logits\n        with torch.no_grad():\n            logits = model(b_input_ids, b_attn_mask)\n        all_logits.append(logits)\n    \n    # Concatenate logits from each batch\n    all_logits = torch.cat(all_logits, dim=0)\n\n    # Apply softmax to calculate probabilities\n    #probs = F.softmax(all_logits, dim=1).cpu().numpy()\n    probs = all_logits.sigmoid().cpu().numpy()\n    \n\n    return probs\n\n#probs = all_logits.sigmoid().cpu().numpy()","1f9f0607":"## Compute predicted probabilities on the test set\n\nprobs = bert_predict(bert_classifier,val_dataloader)\n\n# Evalueate the bert classifier\n\n#evaluate_roc(probs, y_val)","00b5b3aa":"# Concatenate the train set and the validation set\n\nfull_train_data = torch.utils.data.ConcatDataset([train_data, val_data])\nfull_train_sampler = RandomSampler(full_train_data)\nfull_train_dataloader = DataLoader(full_train_data, sampler=full_train_sampler, batch_size=32 )\n\n# Train the Bert Classifier on the entire training data\nset_seed(42)\nbert_classifier, optimizer, scheduler = initialize_model(epochs=4)\ntrain(bert_classifier, full_train_dataloader, epochs=4)","8ca0bd81":"test.head()\n","d7b566a8":"## Run preprocessing_for_bert on the test set\nprint('Tokenizing data...')\ntest_inputs, test_masks = preprocessing_for_bert(test.comment_text)\n\n# Create the DataLoader for our test set\ntest_dataset = TensorDataset(test_inputs, test_masks)\n#test_sampler = SequentialSampler(test_dataset)\n#test_dataloader = DataLoader(test_dataset, sampler=test_sampler, batch_size=32)\ntest_dataloader = DataLoader(test_dataset, shuffle=False, batch_size=32)","3b9f94c2":"# token_ids = list(preprocessing_for_bert([X[0]])[0].squeeze().numpy())\n# print('Original: ',X[0])\n# print('Token IDs: ',token_ids)","9d6a36a7":"len(test)","97d975b1":"# Compute predicted probabilities on the test set\nprobs = bert_predict(bert_classifier, test_dataloader)\n\n# Get predictions from the probabilities\n#threshold = 0.5. ## Change depending on the accuracy you need\n#preds = np.where(probs[:, 1] > threshold, 1, 0)","09032027":"submission = pd.DataFrame(probs,columns=['toxic','severe_toxic','obscene','threat','insult','identity_hate'])\ntest[['toxic','severe_toxic','obscene','threat','insult','identity_hate']]=submission\nfinal_sub = test[['id','toxic','severe_toxic','obscene','threat','insult','identity_hate']]\nfinal_sub.head()","c81dea36":"final_sub.to_csv('submissions.csv',index=False)#\nfinal_sub.head()","240f81fd":"len(test)","bcaf00f2":"len(probs)","3234eb43":"BERT-base consists of 12 transformer layers, each transformer layer takes in a list of token embeddings, and produces the same number of embeddings with the same hidden size (or dimensions) on the output. The output of the final transformer layer of the [CLS] token is used as the features of the sequence to feed a classifier.\n\nThe transformers library has the BertForSequenceClassification class which is designed for classification tasks. However, we will create a new class so we can specify our own choice of classifiers.\n\nBelow we will create a BertClassifier class with a BERT model to extract the last hidden layer of the [CLS] token and a single-hidden-layer feed-forward neural network as our classifier.","9baafee8":"## Train Our Model on the Entire Training Data","b64a64af":"## Optimizer & Learning Rate Scheduler","97ab81ab":"To fine-tune our Bert Classifier, we need to create an optimizer. The authors recommend following hyper-parameters:\n\nBatch size: 16 or 32\n\nLearning rate (Adam): 5e-5, 3e-5 or 2e-5\n\nNumber of epochs: 2, 3, 4","2454d7a1":"## Train Our Model\n### Create BertClassifier","87fb0cf9":"(1) split our text into tokens,\n(2) add the special [CLS] and [SEP] tokens, and\n(3) convert these tokens into indexes of the tokenizer vocabulary,\n(4) pad or truncate sentences to max length, and\n(5) create attention mask.","bca1bfb5":"We will train our Bert Classifier for 4 epochs. In each epoch, we will train our model and evaluate its performance on the validation set.\n\ntraining\n\n1. Upack data from the dataloader and load the data onto the GPU\n2. Zero the gradients calculated in the previous pass\n3. Perform a forward pass to compute logits and loss\n4. Perform a forward pass to compute logits and loss\n5. Perform a backward pass to compute gradients(loss.backward())\n6. Clip the norm of the gradients to 1.0 to prevent exploding gradients\n7. Update the model's parameters(optimizer.step())\n8. Update the learning rate (scheduler.step())\n\nevaluation \n1. Unpack data and load onto the GPU\n2. Forward pass\n3. Compute loss and accuracy rate over the validation set\n","ed1d2fb6":"### Bert Tokenization and Input Formatting","e0613aa7":"## Create pyTorch DataLoader","729c5b28":"### Predictions","ab0358d0":"## Training Loop","7691a907":"## BERT Tokenizer","13ceda48":"## Prediction on Test Set","8ffd2df5":"## Evaluation on Validation Set"}}