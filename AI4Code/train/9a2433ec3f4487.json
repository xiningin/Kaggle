{"cell_type":{"c76133f0":"code","c02fb37d":"code","4a8e12fc":"code","8543047e":"code","abc6fe54":"code","b036991d":"code","b3a4b8ed":"code","464da513":"code","3d2986d8":"code","16091a50":"code","10e1a7d3":"code","e98f8b9d":"code","5a1cbed0":"code","b478e4aa":"code","7ee15547":"code","ff2fba7b":"code","a75763c9":"code","7c5cdeae":"code","0ab21784":"code","b2f86dd5":"code","1b97d678":"code","93f4afa7":"code","0ca2104a":"code","a4e73abc":"code","7756df29":"code","6bcfddbc":"code","841a6c06":"code","fb76fec6":"code","7efb72d4":"code","81737c80":"code","80057bf1":"code","9408b6db":"code","035fb21d":"code","7fc7b3f5":"code","00b5218e":"code","693b4a41":"code","9676fb4e":"code","22ee6c3c":"code","b37a46d4":"code","5d3dbb88":"code","39e9edd8":"code","b8f2ef2b":"markdown","62690a5c":"markdown","5c1e2ec7":"markdown","31e93a23":"markdown","7976252b":"markdown","eae2f89e":"markdown","f8f25a3b":"markdown","448a0807":"markdown"},"source":{"c76133f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas_profiling import ProfileReport\n\n# seaborn\nimport seaborn as sns  # visualization tool\n\n# plotly\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\n\n#matplotlib\nimport matplotlib.pyplot as plt\n\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c02fb37d":"# Reading and Loading the data\n\ndf = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")","4a8e12fc":"df.head()","8543047e":"df.columns","abc6fe54":"df.info()","b036991d":"report = ProfileReport(df)\nreport","b3a4b8ed":"# Checking for null values\ndf.isnull().sum()","464da513":"# rating\ndf['rating'].value_counts().unique()","3d2986d8":"df[df['rating'].isna()]","16091a50":"df['rating'].value_counts()","10e1a7d3":"# replacing values\ndf['rating'].replace(np.nan, 'TV-MA',inplace  = True)","e98f8b9d":"df[df['rating'].isna()]","5a1cbed0":"# determining the missing data for date_added\ndf[df['date_added'].isna()]","b478e4aa":"# dropping missing date_added datas\ndf = df[df['date_added'].notna()]","7ee15547":"df[df['date_added'].isna()] #controlling","ff2fba7b":"# missing data for country\ndf[df['country'].isna()]","a75763c9":"df['country'].value_counts()","7c5cdeae":"#country\ndf['country'].replace(np.nan, 'United States',inplace  = True)","0ab21784":"# checking data if it is clean or not except director and cast that are yoo much to change or clear\ndf.isna().sum()","b2f86dd5":"df.head()","1b97d678":"df.type.unique()","93f4afa7":"# Movie vs Tv Shows\nax = sns.countplot(x=\"type\", data=df)\nplt.ylabel('Count')\nplt.xlabel('Type')\nplt.title('Analysis of Movies vs TV Shows');","0ca2104a":"df.country.value_counts()","a4e73abc":"# Most common Countries\n\ncountry = df.country\nplt.subplots(figsize =(8,8))\nwordcloud = WordCloud(\n                            background_color = 'white',\n                            width = 512,\n                            height = 384\n                        ).generate(\" \".join(country))\n\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.savefig('graph.png')\n\nplt.show()","7756df29":"countries = df.country.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=countries[:10].index,y=countries[:10].values)\nplt.xticks(rotation=45)\nplt.title('Top 10 Countries',color = 'blue',fontsize=20)\nplt.show()","6bcfddbc":"df.head()","841a6c06":"# Adding year and month columns\ndf['year_added'] = df['date_added'].apply(lambda x: x.split(\" \")[-1])\ndf['month_added'] = df['date_added'].apply(lambda x: x.split(\" \")[0])\ndf.head(10)","fb76fec6":"bar, ax = plt.subplots(figsize = (10,10))\nsns.barplot(x = df['release_year'].value_counts().index[:10], y = df['release_year'].value_counts()[:10])\nplt.xlabel('Year')\nplt.ylabel('Frequency')\nplt.title('Release Frequency over Years')\nplt.show()","7efb72d4":"# Pie Plot - Movie and TV Shows\n\npie1 = df['type'].value_counts().values\n\nlabels = df['type'].value_counts().index\n\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .3]},\n      \"name\": \"Content Type\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .5,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Content Type Rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Content Type\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","81737c80":"# Growth over the years in TV Shows and Movies \n\nmovie = df[df['type'] == 'Movie']\ntv = df[df['type'] == 'TV Show']\n\ndata = df[['type', 'release_year']]\ndata = data.value_counts().to_frame()\ndata.reset_index(level=[0,1], inplace=True)\ndata = data.rename(columns = {0:'count'})\ndata = pd.concat([data[data['type'] == 'Movie'][:10], data[data['type']== 'TV Show'][:10]])\n\nsns.catplot(x = 'release_year', y = 'count', hue = 'type', data = data, kind = 'point')\nplt.xlabel('Release Year')\nplt.ylabel('Frequency')\nplt.title('Growth of Movie\/TV Show over Years', size=14)\nplt.show()","80057bf1":"# Rating Types \nplt.figure(figsize=(12,9))\nplt.title(\"Rating Types\", fontsize=30)\nsns.countplot(x=\"rating\",data=df,order= df['rating'].value_counts().index)\nplt.show()","9408b6db":"df.head()","035fb21d":"df.duration","7fc7b3f5":"movie = df[df['type'] == 'Movie']\ntv = df[df['type'] == 'TV Show']\n\n# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=movie.duration,\n    y=tv.duration,\n    z=df.release_year,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(110,56,186)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","00b5218e":"movie = df[df['type'] == 'Movie']\ntv = df[df['type'] == 'TV Show']\n\ntrace0 = go.Box(\n    y = movie.duration,\n    name = \"Duration of Movies\",\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\n\ntrace1 = go.Box(\n    y = tv.duration,\n    name = \"Duration of TV Shows\",\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\n\ndata = [trace0,trace1]\niplot(data)","693b4a41":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=df.type,\n    y=df.country,\n    z=df.release_year,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(110,56,186)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","9676fb4e":"# Famous Director\nx = list()\nclean_data = df.dropna()\nclean_data.reset_index(inplace=True)\nfor ind, element in clean_data.iterrows():\n    type_show = element['type']\n    for director in str(element['director']).split(','):\n        x.append([type_show, director])\ndirector_data = pd.DataFrame(x, columns= ['type', 'director'])\ndirector_data","22ee6c3c":"directorcount = director_data.value_counts().to_frame()\ndirectorcount.reset_index(level=[0,1], inplace=True)\nfamous_director = directorcount.rename(columns={0:'number'})\nfamous_director","b37a46d4":"x = famous_director.director.head(15)\ny = famous_director.number.head(15)\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name of directors')\nplt.xticks(rotation=45)\nplt.ylabel('Frequency')\nplt.title('Most famous 15 director')\nplt.show()","5d3dbb88":"# Famous Directors in Movies\nfamous_director_movie = famous_director[famous_director['type'] == 'Movie']\n\n\nx = famous_director_movie.director.head(15)\ny = famous_director_movie.number.head(15)\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.color_palette(\"pastel\"))\nplt.xlabel('Name of directors')\nplt.xticks(rotation=45)\nplt.ylabel('Frequency')\nplt.title('Most famous 15 director for movies')\nplt.show()\n","39e9edd8":"# Famous Directors in TV Shows\n\nfamous_director_tv = famous_director[famous_director['type'] == 'TV Show']\nx = famous_director_tv.director.head(15)\ny = famous_director_tv.number.head(15)\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.color_palette())\nplt.xlabel('Name of directors')\nplt.xticks(rotation=45)\nplt.ylabel('Frequency')\nplt.title('Most famous 15 director for TV Shows')\nplt.show()","b8f2ef2b":"When we examine the country data, the US is the most popular country. Thereby, we can change the NaN values with the United States","62690a5c":"# Data Visualizations","5c1e2ec7":"We can deal with filling the director, cast, country, date_added and ratinf values that are null in this dataset.","31e93a23":"## Data Cleaning","7976252b":"As we can see TV-MA is the most common type. Therefore, we can change the Nan values with TV-MA.","eae2f89e":"# Data Analysis","f8f25a3b":"Finding the missing dates for this data is so difficult. Hence, we can drop them that won't affect our analysis much. ","448a0807":"# NETFLIX\n\nData Information: \n\nThis dataset consists of tv shows and movies available on Netflix as of 2019. In 2018, they released an interesting report which shows that the number of TV shows on Netflix has nearly tripled since 2010. The streaming service\u2019s number of movies has decreased by more than 2,000 titles since 2010, while its number of TV shows has nearly tripled. It will be interesting to explore what all other insights can be obtained from the same dataset.\n\nTasks for this dataset:\n\n1. Understanding what content is available in different countries\n2. Identifying similar content by matching text-based features\n3. Network analysis of Actors \/ Directors and find interesting insights\n4. Is Netflix has increasingly focusing on TV rather than movies in recent years.\n\nContent:\n\n1. Data Analysis\n2. Data Visualization\n"}}