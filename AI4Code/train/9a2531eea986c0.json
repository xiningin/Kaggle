{"cell_type":{"dd7ebda4":"code","707d24c4":"code","1b324f9e":"code","8397c16f":"code","f791babd":"code","8c767790":"code","6e78a619":"code","204bd825":"code","3f006b0c":"code","fd352b12":"code","a31201d8":"code","24d7d0fd":"code","d3c8a047":"code","7167e423":"code","bcde0071":"code","e10a6156":"code","ef9799f9":"code","1682907a":"code","2ef65573":"code","e47a63c6":"code","fb967f49":"code","87c2dd8a":"code","674eefe7":"code","916f6d6f":"code","1561c333":"code","6f003d1d":"code","fa227ec5":"code","30c5e32c":"code","21666fdf":"code","d323ea0a":"code","98df3500":"code","f6f91441":"code","66e5a464":"code","325e7ca7":"code","bf470215":"code","d0562ad1":"code","d7938eea":"code","e2931bf0":"code","a90e4201":"code","c814bb69":"code","57955adc":"code","d76b1479":"code","9f61738e":"code","eeef20c6":"code","e2d80cfb":"code","9b6dec00":"code","0663ccfe":"code","d1c31c71":"code","55b9feab":"code","20386bb2":"code","d09febe7":"code","6cb1b4fc":"code","3182414c":"code","7bdf809d":"code","f10aa258":"code","83851bcc":"code","039bccf3":"code","8b020edc":"code","5d5f7bc6":"code","aed20607":"code","e131f5e6":"code","d69df6d2":"code","c7fdae9b":"code","622008df":"code","da50f72e":"code","d9aef5bd":"code","c4f98158":"code","4bf339f3":"code","92d96425":"code","82d7944d":"code","167d0e8c":"code","7f7959a9":"code","f05399cd":"code","2ac65a1a":"code","ddd91b48":"code","eac11145":"markdown","f13d45bf":"markdown","08b73abe":"markdown","e31f6ec1":"markdown","4df35c32":"markdown","9858b64c":"markdown","c2168ba4":"markdown","6d0db044":"markdown","b9ee8761":"markdown","0da1b996":"markdown","ee44e036":"markdown","19a618e4":"markdown","e38f2050":"markdown","b291e051":"markdown","3c9bdcef":"markdown","b023b2cc":"markdown","2465643e":"markdown","ffc777e0":"markdown","7a11e874":"markdown","3b817548":"markdown","3eeb2446":"markdown","8b5ba4e5":"markdown","b9073059":"markdown","962ca680":"markdown"},"source":{"dd7ebda4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","707d24c4":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier","1b324f9e":"import xgboost\nxgboost.__version__","8397c16f":"train_filepath = '\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv'\ntest_filepath = '\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv'","f791babd":"train = pd.read_csv(train_filepath, index_col='PassengerId')\ntest = pd.read_csv(test_filepath, index_col='PassengerId')","8c767790":"print(f'Train dataset shape: {train.shape}')\nprint(f'Test dataset shape: {test.shape}')","6e78a619":"# View summary of each columns in train dataset\ntrain.info()","204bd825":"# Check for missing values in train dataset\ntrain.isnull().sum()","3f006b0c":"# Check for missing values in test dataset\ntest.isnull().sum()","fd352b12":"feature = 'Age'\ntrain[feature] = train[feature].fillna(train[feature].mean())\ntest[feature] = test[feature].fillna(test[feature].mean())","a31201d8":"feature = 'Fare'\ntrain[feature] = train[feature].fillna(train[feature].mean())\ntest[feature] = test[feature].fillna(test[feature].mean())","24d7d0fd":"feature = 'Ticket'\ntrain[feature] = train[feature].fillna('None')\ntest[feature] = test[feature].fillna('None')","d3c8a047":"feature = 'Cabin'\ntrain[feature] = train[feature].fillna('None')\ntest[feature] = test[feature].fillna('None')","7167e423":"feature = 'Embarked'\ntrain[feature] = train[feature].fillna('None')\ntest[feature] = test[feature].fillna('None')","bcde0071":"train.info()","e10a6156":"test.info()","ef9799f9":"train['Cabin'].value_counts()","1682907a":"train['Cabin'].str[0].value_counts()","2ef65573":"# Replace Cabin value with first letter\ntrain['Cabin'] = train['Cabin'].str[0]\ntest['Cabin'] = test['Cabin'].str[0]","e47a63c6":"train['Name'].value_counts()","fb967f49":"# Split LastName, FirstName => LastName\ndef split_name(name):\n    parts = name.split(',')\n    return parts[0].strip()\n\nsplit_name('Johnson, John')","87c2dd8a":"train['LastName'] = train['Name'].apply(split_name)\ntest['LastName'] = test['Name'].apply(split_name)","674eefe7":"train['LastName'].value_counts()","916f6d6f":"# Save only first letter of LastName\ntrain['LastName'].str[0].value_counts()","1561c333":"train['LastName'] = train['LastName'].str[0]\ntest['LastName'] = test['LastName'].str[0]","6f003d1d":"train['Ticket'].value_counts()","fa227ec5":"train['Ticket'].str[0].value_counts()","30c5e32c":"train['Ticket'] = train['Ticket'].str[0]\ntest['Ticket'] = test['Ticket'].str[0]","21666fdf":"train.head()","d323ea0a":"ordinal_cols = ['Pclass']\n\n# There is nothing to do as Pclass is already numerical","98df3500":"# Remove 'Name' column\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","f6f91441":"train.head()","66e5a464":"# Convert categorical features into numerical using pd.get_dummies\ntrain = pd.get_dummies(train, drop_first=True)\ntest = pd.get_dummies(test, drop_first=True)","325e7ca7":"# Age column\ntrain['Age'].describe()","bf470215":"age_bins = np.linspace(0,100,6) # [0, 20, 40, .. 100]\n\ntrain['Age_binned'] = pd.cut(train['Age'], bins=age_bins, labels=False)\ntest['Age_binned'] = pd.cut(test['Age'], bins=age_bins, labels=False)","d0562ad1":"# Fare column\ntrain['Fare'].describe()","d7938eea":"fare_bins = [0, 10, 20, 30, 50, 100, 500, 1000]\nfare_bins","e2931bf0":"# Fare column\ntrain['Fare_binned'] = pd.cut(train['Fare'], bins=fare_bins, labels=False)\ntest['Fare_binned'] = pd.cut(test['Fare'], bins=fare_bins, labels=False)","a90e4201":"train['Fare_binned'].value_counts()","c814bb69":"# Drop Age and Fare columns\ntrain.drop(['Age', 'Fare'], axis=1, inplace=True)\ntest.drop(['Age', 'Fare'], axis=1, inplace=True)","57955adc":"train.head()","d76b1479":"# Check for any NaN values\ntrain.isnull().sum()","9f61738e":"print(f'Train data shape: {train.shape}')\nprint(f'Test data shape: {test.shape}')","eeef20c6":"train['WithFamily'] = (train['SibSp'] + train['Parch']) > 0\ntest['WithFamily'] = (test['SibSp'] + test['Parch']) > 0","e2d80cfb":"train['WithFamily'] = train['WithFamily'].apply(lambda x: int(x))\ntest['WithFamily'] = test['WithFamily'].apply(lambda x: int(x))","9b6dec00":"train['WithFamily'].value_counts()","0663ccfe":"train.head()","d1c31c71":"train.drop(['SibSp','Parch'], axis=1, inplace=True)\ntest.drop(['SibSp','Parch'], axis=1, inplace=True)","55b9feab":"train.head()","20386bb2":"X_train_full = train.drop('Survived', axis=1)\ny_train_full = train['Survived']\nX_test = test","d09febe7":"X_train, X_val, y_train, y_val = train_test_split(X_train_full, y_train_full, test_size=0.3, random_state=41)\n\nprint(X_train.shape, y_train.shape)\nprint(X_val.shape, y_val.shape)","6cb1b4fc":"model_lr = LogisticRegression()","3182414c":"model_lr.fit(X_train, y_train)","7bdf809d":"y_val_preds = model_lr.predict(X_val)","f10aa258":"acc_lr = accuracy_score(y_val, y_val_preds)\n\nprint(f'Logistic Regression: {acc_lr:.4f}')","83851bcc":"model_rf = RandomForestClassifier(random_state=41)","039bccf3":"model_rf.fit(X_train, y_train)","8b020edc":"y_val_preds = model_rf.predict(X_val)","5d5f7bc6":"acc_rf = accuracy_score(y_val, y_val_preds)\n\nprint(f'RandomForest: {acc_rf:.4f}')","aed20607":"model_xgb = XGBClassifier(random_state = 41,\n                         use_label_encoder=False,\n                         eval_metric='logloss')","e131f5e6":"model_xgb = model_xgb.fit(X_train, y_train, eval_set=[(X_val, y_val)], verbose=0)","d69df6d2":"y_val_preds = model_xgb.predict(X_val)","c7fdae9b":"acc_xgb = accuracy_score(y_val, y_val_preds)\n\nprint(f'XGBoost: {acc_xgb:.4f}')","622008df":"def prepare_submission(model):\n    y_preds = model.predict(X_test)\n    out = pd.DataFrame({'PassengerId':X_test.index, 'Survived':y_preds})\n    out.to_csv('submission.csv', index=False)","da50f72e":"prepare_submission(model_xgb) # Kaggle score: 0.77948","d9aef5bd":"model_catb = CatBoostClassifier(\n    verbose=0,\n    eval_metric='Accuracy',\n    random_state=41,\n)","c4f98158":"model_catb = model_catb.fit(X_train, y_train)","4bf339f3":"y_val_preds = model_catb.predict(X_val)","92d96425":"acc_catb = accuracy_score(y_val, y_val_preds)\n\nprint(f'Catboost: {acc_catb:.4f}')","82d7944d":"prepare_submission(model_catb) # Kaggle score: 0.78089","167d0e8c":"model_lgbm = LGBMClassifier(\n    verbose=0,\n    random_state=41,\n    metric='Accuracy',\n    force_row_wise=True\n)","7f7959a9":"model_lgbm.fit(X_train, y_train)","f05399cd":"y_val_preds = model_lgbm.predict(X_val)","2ac65a1a":"acc_lgbm = accuracy_score(y_val, y_val_preds)\n\nprint(f'LGBM: {acc_lgbm:.4f}')","ddd91b48":"prepare_submission(model_lgbm)","eac11145":"# Table of Contents\n\n+ [Preparation](#Preparation)\n  + [Load packages](#Load-packages)\n  + [Load dataset](#Load-dataset)\n+ [Data pre-processing](#Data-pre-processing)\n  + [Missing values](#Handle-missing-values)\n  + [Categorical features](#Handle-categorical-features)\n    + [`Cabin` column](#Cabin-column)\n    + [`Name` column](#Name-column)\n    + [`Ticket` column](#Ticket-column)\n    + [Ordinal features](#Ordinal-features)\n    + [Category features](#Category-features)\n  + [Numerical features](#Numerical-features)\n    + [Binning](#Binning)\n+ [Feature engineering](#Feature-engineering)\n+ [Prepare dataset](#Prepare-dataset)\n+ Model building\n  + Logistic regression\n  + RandomForest classifier\n  + XGBoost \n  + CatBoost\n  + LGBM\n+ Final submission","f13d45bf":"### Binning","08b73abe":"# Data pre-processing","e31f6ec1":"## Numerical features","4df35c32":"### `Ticket` column","9858b64c":"## Load dataset","c2168ba4":"## Load packages","6d0db044":"### XGBoost classifier","b9ee8761":"### RandomForest classifier","0da1b996":"### `Name` column","ee44e036":"### Catboost classifier","19a618e4":"To handle missing values in columns, we'll follow the imputation rule:\n+ Age, Fare  \n  Impute missing values with mean\n+ Ticket, Cabin, Embarked  \n  Impute missing values with 'NA'\n\nWhatever change we make in train dataset, same transform goes to test dataset","e38f2050":"### LightGbm classifier","b291e051":"### Ordinal features","3c9bdcef":"## Model building","b023b2cc":"Create new column 'WithFamily' if SibSp + Parch > 0","2465643e":"## Handle missing values","ffc777e0":"## Feature engineering","7a11e874":"### Category features","3b817548":"## Handle categorical features","3eeb2446":"# Preparation","8b5ba4e5":"### `Cabin` column","b9073059":"## Prepare dataset\n+ Training data\n+ Validation data\n+ Testing data","962ca680":"### Logistic Regression"}}