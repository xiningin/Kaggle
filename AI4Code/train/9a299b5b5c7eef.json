{"cell_type":{"30966457":"code","9a4ac844":"code","9ffa526c":"code","2aa2b68b":"code","87faa884":"code","344e75c2":"code","f80a6e39":"code","a807cfd5":"code","dc6844f8":"code","0a81c550":"code","0e906697":"code","a6eb3d71":"code","7038bbac":"code","91a89c8c":"code","54b61b9e":"code","295c8b30":"code","c6f6ef76":"code","65010268":"code","91939941":"code","1ea61b56":"code","6f98f0a9":"code","76ce90fe":"code","63bc2f5e":"code","b5c96750":"code","ce80184a":"code","53f2e038":"code","4f3e625a":"code","31cafa15":"code","2b514c74":"code","3b7cf607":"code","b35875df":"code","9c655e9e":"code","d8300163":"code","5b84d9d9":"code","785bef8a":"code","88254972":"code","14fcbcfd":"code","0601c131":"code","78b49d58":"code","d2f1c3ed":"code","0649c7cd":"code","3ac7e0af":"code","1238d693":"code","859988dc":"code","b170741b":"markdown","68cd7b7f":"markdown","393a2965":"markdown","e5597320":"markdown","fab7ed22":"markdown","bcd07d49":"markdown"},"source":{"30966457":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n#import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9a4ac844":"# read in train and test data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","9ffa526c":"# info for null values\ntrain.info()","2aa2b68b":"# need to dropna on embarked before we append\ntrain.dropna(subset=['Embarked'], inplace=True)","87faa884":"test.info()","344e75c2":"# Append the test data to the train data so both are manipulated the same way\ndata= train.append(test, ignore_index=True)","f80a6e39":"# drop ID but we will need it later for submission\n#data = data.drop('PassengerId', axis=1)\ntrain_id = train['PassengerId']\ntest_id = pd.DataFrame(test['PassengerId'])","a807cfd5":"data.describe()","dc6844f8":"data.head()","0a81c550":"data['title'] = data.Name.map(lambda x: x.split(\",\")[1].split('.')[0].strip())","0e906697":"data.head(6)","a6eb3d71":"data.groupby('title')['Age'].mean()","7038bbac":"data.groupby('title')['Age'].count()","91a89c8c":"data['Age'] = data.groupby('title').transform(lambda x: x.fillna(x.mean()))","54b61b9e":"# Checking the data where age is null\ndata[data.Age.isnull()]","295c8b30":"fig = plt.figure(figsize=(16,12))\nax1 = fig.add_subplot(111)\nsns.boxplot(x = 'Embarked', y='Fare', hue='Pclass', data=data, ax=ax1)\nax1.set_title('Fare based on Embarked and separated by Pclass')","c6f6ef76":"fig = plt.figure(figsize=(22,14))\nax1 = fig.add_subplot(211)\nsns.boxplot(x = 'title', y='Age', data=data, ax=ax1)\nax1.set_title('Boxplot of age based on Title')\nax2 = fig.add_subplot(212)\nsns.boxplot(x='title', y='Fare', data=data, ax=ax2)\nax2.set_title('Boxplot of Fare paid based on Title');","65010268":"#sns.catplot(x='Age', y='Embarked', hue='Pclass', col='Survived', height=6, kind='point', data=data)","91939941":"#heatmap to show correlation of all the numeric variables\nplt.figure(figsize=(16,8))\nsns.heatmap(data.corr(), annot=True)","1ea61b56":"#Scatter plot of fare and Age\nplt.figure(figsize=(16,8))\nplt.scatter(x='Fare', y='Age', data=data)\nplt.xlabel('Fare($)', fontsize=13)\nplt.ylabel('Age', fontsize=13)\nplt.title('Fare and Age Scatter', fontsize=16);","6f98f0a9":"'''fig = plt.figure(figsize=(16,18))\nax1= fig.add_subplot(111)\nsns.relplot(x='title', y=\"Fare\", hue=\"Survived\", size=\"Age\",\n            sizes=(40, 540), alpha=.5,\n            height=6, data=data,ax=ax1)'''","76ce90fe":"# 3d Plot that shows Fare along with survived and Age\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure(figsize=(16,8))\nax = fig.add_subplot(111, projection='3d')\nxs = data['Fare']\nys = data['Survived']\nzs = data['Age']\nax.scatter(xs,ys,zs)\nax.set_xlabel('Fare')\nax.set_ylabel('Survived')\nax.set_zlabel('Age')\nplt.show()\n","63bc2f5e":"sns.set(style=\"whitegrid\", palette=\"muted\")\nplt.figure(figsize=(16,12))\nsns.swarmplot(x=\"Pclass\", y=\"Fare\", hue=\"Survived\",\n              palette=[\"r\", \"c\", \"y\"], data=data)","b5c96750":"#This came from the seaborn gallery. It's a great visual\nsns.set(style=\"whitegrid\", palette=\"muted\")\nplt.figure(figsize=(18,10))\nsns.catplot(x='Pclass', y='Survived', hue='Sex', data=data, kind='bar', height=8)","ce80184a":"data.info()","53f2e038":"data['Fare'] = data['Fare'].fillna(data['Fare'].median())","4f3e625a":"data.info()","31cafa15":"# dummies=pd.get_dummies(data, columns=['Embarked', 'Pclass', 'Sex'], drop_first=True)\ndummies = pd.get_dummies(data[['Sex','Embarked']],drop_first=True)\ndata = data.join(dummies)","2b514c74":"pclass = pd.get_dummies(data['Pclass'], drop_first=True)\ndata= data.join(pclass)","3b7cf607":"data.drop(['Cabin', 'Ticket', 'Name','Sex', 'Embarked','title', 'Pclass'], axis=1, inplace=True)","b35875df":"missing = data[data['Survived'].isnull()]\nfilled = data[data['Survived'].notnull()]","9c655e9e":"filled= filled.drop('PassengerId', axis=1)\nmissing = missing.drop('PassengerId', axis=1)","d8300163":"plt.hist(data['Age'].dropna(), bins=100);","5b84d9d9":"data.head()","785bef8a":"from sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","88254972":"X_train, X_test, y_train, y_test = train_test_split(filled.drop('Survived', axis=1), filled['Survived'], test_size=.33, random_state=42)","14fcbcfd":"# Specifying the algorithms \ndt = DecisionTreeClassifier()\nrf = RandomForestClassifier(n_estimators=605, min_samples_split=4,random_state=22)\n# best score is with the parameters commented out right here:\n#gbc = GradientBoostingClassifier(n_estimators= 140,max_depth=4,random_state=32)\ngbc = GradientBoostingClassifier(n_estimators= 120,max_depth=4,random_state=32)# lower learning rate when increasing n_estimators","0601c131":"algorithms = [dt,rf,gbc]\nnames = ['Decision Tree', 'Random Forest', 'Gradient Boosting']","78b49d58":"def tDMassess():\n    #fit the data\n    for i in range(len(algorithms)):\n        algorithms[i] = algorithms[i].fit(X_train,y_train)\n    accuracy_train =[]\n    accuracy_test=[]\n    for i in range(len(algorithms)):\n        #print(i) \n        accuracy_train.append(accuracy_score(filled['Survived'], algorithms[i].predict(filled.drop('Survived', axis = 1))))\n        #print(accuracy)\n        accuracy_test.append(accuracy_score(y_test, algorithms[i].predict(X_test)))\n        #print(f1)\n        #print('next loop')\n    metrics = pd.DataFrame(columns =['Accuracy_Train', 'Accuracy_Test'], index=names)#we defined index=names above, where we defined the algorithms\n    metrics['Accuracy_Train'] = accuracy_train\n    metrics['Accuracy_Test'] = accuracy_test\n    return metrics","d2f1c3ed":"tDMassess()","0649c7cd":"y_pred = gbc.predict(missing.drop('Survived', axis=1))","3ac7e0af":"test_id['Survived'] = y_pred.astype('int')","1238d693":"y_test = y_test.astype('int')\ny_pred = y_pred.astype('int')","859988dc":"y_pred = gbc.predict(missing.drop('Survived', axis=1))\ntest_id.to_csv('submission.csv', index=False)","b170741b":"#### Creating a new column, 'title' to more accurately estimate the ages that are NaN","68cd7b7f":"### Modeling","393a2965":"#### Decision tree, Random Forest, Gradient Boosting Classifier","e5597320":"### Now to use the best model to Submit","fab7ed22":"#### option to fill in age here:","bcd07d49":"### There is a value missing in fare. So I'm going to take the median fare price in the dataset and fill in that value  "}}