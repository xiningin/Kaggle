{"cell_type":{"cb2f059e":"code","e9b49264":"code","166b294e":"code","71714815":"code","03d98292":"code","8b84fc84":"code","f2b27213":"code","0e55b3ac":"code","f9cb5644":"code","5c1c874e":"code","e83ebe38":"code","d4137cf2":"code","9d1a236a":"code","32417785":"code","1489e87b":"markdown","cd00a725":"markdown","bc2ae8b4":"markdown","8d7b3ff9":"markdown","b435c878":"markdown","8f95255d":"markdown","5e6deb89":"markdown","d3beb4e1":"markdown","72c8ea32":"markdown","ae879a8a":"markdown","1e136b5a":"markdown","87b4dfe2":"markdown","422df60b":"markdown"},"source":{"cb2f059e":"!pip install imageai","e9b49264":"!wget \"https:\/\/github.com\/OlafenwaMoses\/ImageAI\/releases\/download\/essential-v4\/pretrained-yolov3.h5\"","166b294e":"!wget 'https:\/\/github.com\/OlafenwaMoses\/ImageAI\/releases\/download\/essentials-v5\/resnet50_coco_best_v2.1.0.h5'","71714815":"import numpy as np\nimport os\nimport shutil\nfrom pathlib import Path\nfrom PIL import Image","03d98292":"root_annots_path = '..\/input\/face-mask-detection\/annotations\/'\nroot_images_path = '..\/input\/face-mask-detection\/images\/'\n\nannots_path = sorted([i for i in Path(root_annots_path).glob('*.xml')])\nimages_path = sorted([i for i in Path(root_images_path).glob('*.png')])\n\nn_imgs = len(images_path)\n\nclasses = np.array([\"with_mask\",\"without_mask\",\"mask_weared_incorrect\"])","8b84fc84":"with open(annots_path[500], 'r') as f:\n    print(f.read())","f2b27213":"os.makedirs('imageai\/data\/train\/images', exist_ok=True)\nos.makedirs('imageai\/data\/train\/annotations', exist_ok=True)\n\nos.makedirs('imageai\/data\/validation\/images', exist_ok=True)\nos.makedirs('imageai\/data\/validation\/annotations', exist_ok=True)\n\nos.makedirs('imageai\/data\/test\/images', exist_ok=True)\nos.makedirs('imageai\/data\/test\/annotations', exist_ok=True)","0e55b3ac":"n_imgs = 300\nn_split = n_imgs \/\/ 20\n\n\nfor i, (annot_path, img_path) in enumerate(zip(annots_path, images_path)):    \n    if i > n_imgs:\n        break\n    # train-val-test split\n    if i < n_split:\n        shutil.copy(img_path, 'imageai\/data\/test\/images\/' + img_path.parts[-1])\n        shutil.copy(annot_path, 'imageai\/data\/test\/annotations\/' + annot_path.parts[-1])\n    elif n_split <= i < n_split*5:\n        shutil.copy(img_path, 'imageai\/data\/validation\/images\/' + img_path.parts[-1])\n        shutil.copy(annot_path, 'imageai\/data\/validation\/annotations\/' + annot_path.parts[-1])\n    else:\n        shutil.copy(img_path, 'imageai\/data\/train\/images\/' + img_path.parts[-1])\n        shutil.copy(annot_path, 'imageai\/data\/train\/annotations\/' + annot_path.parts[-1])","f9cb5644":"print(len(list(Path('imageai\/data\/train\/annotations\/').glob('*.xml'))))\nprint(len(list(Path('imageai\/data\/validation\/annotations\/').glob('*.xml'))))\nprint(len(list(Path('imageai\/data\/test\/annotations\/').glob('*.xml'))))","5c1c874e":"from imageai.Detection.Custom import DetectionModelTrainer\n\ntrainer = DetectionModelTrainer()\ntrainer.setModelTypeAsYOLOv3()\ntrainer.setDataDirectory(data_directory=\".\/imageai\/data\/\")\ntrainer.setTrainConfig(object_names_array=[\"with_mask\", \"without_mask\",\"mask_weared_incorrect\"],\n                       batch_size=8,\n                       num_experiments=10,\n                       train_from_pretrained_model=\"pretrained-yolov3.h5\")\n\ntrainer.trainModel()","e83ebe38":"from imageai.Detection.Custom import DetectionModelTrainer\n\ntrainer = DetectionModelTrainer()\ntrainer.setModelTypeAsYOLOv3()\ntrainer.setDataDirectory(data_directory=\".\/imageai\/data\/\")\nmetrics = trainer.evaluateModel(model_path=\"imageai\/data\/models\/\",\n                                json_path=\"imageai\/data\/json\/detection_config.json\",\n                                iou_threshold=0.2,\n                                object_threshold=0.3,\n                                nms_threshold=0.5)","d4137cf2":"!wget \"https:\/\/images.rtl.fr\/~c\/770v513\/rtl\/www\/1418909-des-gens-portant-le-masque-a-biarritz-pyrenees-atlantiques.jpg\"","9d1a236a":"from imageai.Detection.Custom import CustomObjectDetection\n\ndetector = CustomObjectDetection()\ndetector.setModelTypeAsYOLOv3()\ndetector.setModelPath(\"imageai\/data\/models\/detection_model-ex-007--loss-0038.592.h5\")\ndetector.setJsonPath(\"imageai\/data\/json\/detection_config.json\")\ndetector.loadModel()\ndetections = detector.detectObjectsFromImage(minimum_percentage_probability=50,\n                                             input_image=\"1418909-des-gens-portant-le-masque-a-biarritz-pyrenees-atlantiques.jpg\",\n                                             output_image_path=\"detected.jpg\")\nfor detection in detections:\n    print(detection[\"name\"], \" : \", detection[\"percentage_probability\"], \" : \", detection[\"box_points\"])","32417785":"Image.open('detected.jpg')","1489e87b":"On g\u00e9n\u00e8re un certain nombre de mod\u00e8les qu'on peut \u00e9valuer :","cd00a725":"On choisit un mod\u00e8le YOLO v3   \nLe mod\u00e8le est entra\u00een\u00e9 par *transfer learning* \u00e0 partir du mod\u00e8le pr\u00e9entra\u00een\u00e9 :","bc2ae8b4":"Exemple de fichier XML d'annotation :","8d7b3ff9":"On r\u00e9cup\u00e8re les chemins pour les annotations XML et les images.   \nOn peut g\u00e9n\u00e9rer les annotations pour des images avec un logiciel comme LabelImg :   \nhttps:\/\/github.com\/tzutalin\/labelImg","b435c878":"On cr\u00e9e les r\u00e9pertoires pour l'entra\u00eenement et le test (validation) :","8f95255d":"Et on va d\u00e9tecter la pr\u00e9sence de masques sur l'image :","5e6deb89":"On r\u00e9partit en train et validation :","d3beb4e1":"## Exemples de datasets pour exercice\n\nPr\u00e9sence de casque de chantier :   \nhttps:\/\/www.kaggle.com\/andrewmvd\/hard-hat-detection   \nPlaques d'immatriculation :   \nhttps:\/\/www.kaggle.com\/andrewmvd\/car-plate-detection   \nD\u00e9tection de panneaux routiers :   \nhttps:\/\/www.kaggle.com\/andrewmvd\/road-sign-detection   \nTomates :   \nhttps:\/\/www.kaggle.com\/andrewmvd\/tomato-detection   \nD\u00e9tection de nids de poule :   \nhttps:\/\/www.kaggle.com\/andrewmvd\/pothole-detection   \nNavires :   \nhttps:\/\/www.kaggle.com\/andrewmvd\/ship-detection   \n\n","72c8ea32":"## T\u00e9l\u00e9chargement des modules et mod\u00e8les pr\u00e9entrain\u00e9s","ae879a8a":"## Entra\u00eenement du mod\u00e8le","1e136b5a":"## Pr\u00e9paration du dataset d'entra\u00eenement et des annotations","87b4dfe2":"# D\u00e9tection du port du masque dans des images","422df60b":"On t\u00e9l\u00e9charge une image :"}}