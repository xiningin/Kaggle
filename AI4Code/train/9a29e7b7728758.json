{"cell_type":{"7216df3d":"code","b7693932":"code","5135f980":"code","904108c9":"code","6071780a":"code","1d6c424f":"code","9a3bb5a3":"code","859ee01c":"code","95079ebd":"code","c39cd25c":"code","eade7236":"code","b34dc0db":"code","78ca1a9d":"code","5264321d":"code","24fe8b56":"code","ec1d99f5":"code","7ab5e7f3":"code","54a8be62":"code","a61be745":"code","f99378d8":"code","ff682dca":"code","d194212e":"code","b762828b":"code","c67a725b":"code","95b4ea3a":"code","cf8202c3":"code","b7cb95d8":"code","243186ee":"code","3cb6b643":"code","0020a346":"code","f7015602":"markdown","9881159e":"markdown","37d94567":"markdown","642ab29c":"markdown","6d3e12c7":"markdown","e81e5fb2":"markdown","f9cffa31":"markdown","6c86b6fd":"markdown","cc0825f2":"markdown","c824265e":"markdown","a933a102":"markdown","e33361e9":"markdown","f2bc70aa":"markdown","1d1ecf5d":"markdown","1979b03e":"markdown","71414208":"markdown","ce9c30b5":"markdown","e5674405":"markdown","e6b2e73c":"markdown","501af7bf":"markdown","50761c1e":"markdown","8432a619":"markdown","ad8447ca":"markdown","63f1dc5b":"markdown","d21a0a4b":"markdown","2e3184a9":"markdown","55f83210":"markdown","8cad794c":"markdown","45bbbeef":"markdown","43b14381":"markdown","e088fe98":"markdown","cabb3cb0":"markdown","25cbc43f":"markdown","e3f842ea":"markdown","3e931dbc":"markdown","0f65f914":"markdown","8a90d496":"markdown","8e63a050":"markdown","408cebaa":"markdown","1e2ef99e":"markdown","3ff35ae0":"markdown","abc80a9a":"markdown","73643922":"markdown","c5fb6cea":"markdown","8b803bce":"markdown","018a13f7":"markdown"},"source":{"7216df3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7693932":"import numpy as np # for complx mathematical operation\nimport pandas as pd  # for data frame manipulation\nimport matplotlib.pyplot as plt # for creating data visulization\nimport seaborn as sns #for creating data visulization\nfrom ipywidgets import interact # for interactive analysis & also helps in interacting with python\n   # for implementing complex machine learning algorithm","5135f980":"data= pd.read_csv('..\/input\/crop-dataset\/Crop_recommendation.csv')","904108c9":"data.shape\n","6071780a":"data.head()","1d6c424f":"data.info()","9a3bb5a3":"data.describe()","859ee01c":"data.isnull().sum()","95079ebd":"plt.figure(figsize=(25,10))\nplt.bar(data['label'],(data['rainfall']),color=['Blue'])\nplt.xlabel('Crops')\nplt.title('Rainfall requirement Vs Crops')\nplt.ylabel('Rainfall')\nplt.show()","c39cd25c":"plt.figure(figsize=(25,10))\nplt.bar(data['label'],(data['humidity']), color=['Orange'])\nplt.xlabel('Crop')\nplt.ylabel('Humidity')\nplt.title(\"Humidity requirement Vs Crops\")\nplt.show()","eade7236":"plt.figure(figsize=(25,10))\nplt.bar(data['label'],(data['temperature']), color=['Lightblue'])\nplt.xlabel('Crop')\nplt.ylabel('temperature')\nplt.title(\"Temperature requirement Vs Crops\")\nplt.show()","b34dc0db":"plt.figure(figsize=(25,10))\nplt.bar(data['label'],(data['ph']), color=['Green'])\nplt.xlabel('Crop')\nplt.ylabel('Ph_Value')\nplt.title(\"Ph_Value requirement Vs Crops\")\nplt.show()","78ca1a9d":"data['label'].value_counts()","5264321d":"print(\"Average ratio of Nitrogen in soil : {0:.2f}\".format(data['N'].mean()))\nprint(\"Average ratio of Phosphorous in soil:{0:.2f}\".format(data['P'].mean()))\nprint(\"Average ratio of Potassium in soil:{0:.2f}\".format(data[\"K\"].mean()))\nprint(\"Average requirement of Temperature in soil:{0:.2f}\".format(data[\"temperature\"].mean()))\nprint(\"Average requirment of humidity in soil:{0:.2f}\".format(data[\"humidity\"].mean()))\nprint(\"Average requirement of ph scale in soil:{0:.2f}\".format(data[\"ph\"].mean()))\nprint(\"Average requiremen of rainfall in soil:{0:.2f}\".format(data['rainfall'].mean()))\n","24fe8b56":"@interact\ndef summary(crops= list(data['label'].value_counts().index)):\n    x = data[data['label'] == crops]\n    print(\"-------------------------------------------------\")\n    print(\"Statistics for Nitrogen\")\n    print(\"Minimum Nitrogen required:\", x['N'].min())\n    print(\"Average Nitrogen required:\", x['N'].mean())\n    print(\"Maximum Nitrogen required:\", x['N'].max())\n    print(\"-------------------------------------------------\")      \n    print(\"Statistics for Phosphorous\")\n    print(\"Minimum Phosphorous required:\", x['P'].min())\n    print(\"Average Phosphorous required:\", x['P'].mean())\n    print(\"Maximum Phosphorousrequired:\", x['P'].max()) \n    print(\"-------------------------------------------------\")     \n    print(\"Statistics for Potassium\")\n    print(\"Minimum Potassium required:\", x['K'].min())\n    print(\"Average Potassium required:\", x['K'].mean())\n    print(\"Maximum Potassium required:\", x['K'].max())\n    print(\"-------------------------------------------------\")      \n    print(\"Statistics for Temperature\")\n    print(\"Minimum Temperature required:{0:.2f}\".format(x['temperature'].min()))\n    print(\"Average Temperature required:{0:.2f}\".format(x['temperature'].mean()))\n    print(\"Maxmimum Temperature required:{0:.2f}\".format(x['temperature'].max()))      \n    print(\"-------------------------------------------------\")       \n    print(\"Statistics for Humidity\")\n    print(\"Minimum Humidity required:{0:.2f}\".format(x['humidity'].min()))\n    print(\"Average Humidity required:{0:.2f}\".format(x['humidity'].mean()))\n    print(\"Maxmimum Humidity required:{0:.2f}\".format(x['humidity'].max())) \n    print(\"-------------------------------------------------\")\n    print(\"Statistics for PH\")      \n    print(\"Minimum PH required:{0:.2f}\".format(x['ph'].min()))\n    print(\"Average PH required:{0:.2f}\".format(x['ph'].mean()))\n    print(\"Maxmimum PHy required:{0:.2f}\".format(x['ph'].max())) \n    print(\"-------------------------------------------------\")\n    print(\"Statistics for rainfall\")      \n    print(\"Minimum rainfall required:{0:.2f}\".format(x['rainfall'].min()))\n    print(\"Average rainfall required:{0:.2f}\".format(x['rainfall'].mean()))\n    print(\"Maxmimum rainfallrequired:{0:.2f}\".format(x['rainfall'].max())) \n                ","ec1d99f5":"@interact\ndef compare (conditions =['N','P','K','temperature','ph','humidity','rainfall']):\n    print(\"Average Value for\", conditions,\"is{0:.2f}\".format(data[conditions].mean()))\n    print(\"---------------------------------------------\")\n    print(\"Rice: {0:.2f}\".format(data[(data['label'] =='rice')][conditions].mean()))\n    print(\"Black Grams: {0:.2f}\".format(data[(data['label'] =='blackgram')][conditions].mean()))\n    print(\"Banana: {0:.2f}\".format(data[(data['label'] =='banana')][conditions].mean()))\n    print(\"Jute: {0:.2f}\".format(data[(data['label'] =='jute')][conditions].mean()))\n    print(\"Coconut: {0:.2f}\".format(data[(data['label'] =='coconut')][conditions].mean()))\n    print(\"Apple: {0:.2f}\".format(data[(data['label']=='apple')][conditions].mean()))\n    print(\"Papaya: {0:.2f}\".format(data[(data['label'] =='papaya')][conditions].mean()))\n    print(\"Muskmelon: {0:.2f}\".format(data[(data['label'] =='muskmelon')][conditions].mean()))\n    print(\"Grapes: {0:.2f}\".format(data[(data['label'] =='grapes')][conditions].mean()))\n    print(\"Watermelon: {0:.2f}\".format(data[(data['label'] =='watermelon')][conditions].mean()))\n    print(\"Kidney Beans: {0:.2f}\".format(data[(data['label'] =='kidneybeans')][conditions].mean()))\n    print(\"Mung Beans: {0:.2f}\".format(data[(data['label'] =='mungbeans')][conditions].mean()))\n    print(\"Orange: {0:.2f}\".format(data[(data['label'] =='orange')][conditions].mean()))\n    print(\"Chick Peas: {0:.2f}\".format(data[(data['label'] =='chickpea')][conditions].mean()))\n    print(\"Lentils: {0:.2f}\".format(data[(data['label'] =='lentil')][conditions].mean()))\n    print(\"Cotton: {0:.2f}\".format(data[(data['label']=='cotton')][conditions].mean()))\n    print(\"Maize: {0:.2f}\".format(data[(data['label'] =='maize')][conditions].mean()))\n    print(\"Moth Beans: {0:.2f}\".format(data[(data['label'] =='mothbeans')][conditions].mean()))\n    print(\"Pigen Peas: {0:.2f}\".format(data[(data['label'] =='pigeonpeas')][conditions].mean()))\n    print(\"Mango: {0:.2f}\".format(data[(data['label'] =='mango')][conditions].mean()))\n    print(\"Pomegranate: {0:.2f}\".format(data[(data['label'] =='pomegranate')][conditions].mean()))\n    print(\"Coffee: {0:.2f}\".format(data[(data['label'] =='coffee')][conditions].mean()))","7ab5e7f3":"@interact\ndef compare(conditions = ['N','P','K','temperature','ph','humidity','rainfall']):\n    print(\"Crops which needs greater amount than average condition of\", conditions,'\\n')\n    print(data[data[conditions]>data[conditions].mean()]['label'].unique())\n    print(\"---------------------------------------------------\")\n    print(\"Crops which requires less amount than average condition of\", conditions,'\\n')\n    print(data[data[conditions]<=data[conditions].mean()]['label'].unique())","54a8be62":"plt.figure(figsize=(28,7))\nplt.subplot(2,4,1)\nsns.distplot(data['N'], color='orange')\nplt.xlabel('Ratio of Nitrogen', fontsize=12)\nplt.grid()\n\n\nplt.subplot(2,4,2)\nsns.distplot(data['P'],color='red')\nplt.xlabel('Ratio of Phosphorous', fontsize=12)\nplt.grid()\n\nplt.subplot(2,4,3)\nsns.distplot(data['K'], color='darkblue')\nplt.xlabel('Ratio of Potassium', fontsize=12)\nplt.grid()\n\nplt.subplot(2,4,4)\nsns.distplot(data['humidity'], color='grey')\nplt.xlabel('Ratio of humidity', fontsize=12)\nplt.grid()\n\nplt.subplot(2,4,5)\nsns.distplot(data['rainfall'],color='green')\nplt.xlabel('Ratio of rainfall', fontsize=12)\nplt.grid()\n\nplt.subplot(2,4,6)\nsns.distplot(data['ph'], color='darkgreen')\nplt.xlabel('ph', fontsize=12)\nplt.grid()\n\nplt.subplot(2,4,7)\nsns.distplot(data['temperature'],color='lightgreen')\nplt.xlabel('temperature', fontsize=12)\nplt.grid()\n\nplt.suptitle('Distribution for Agricultural Conditions', fontsize =20)\nplt.show()\n\n","a61be745":"print(\" Exceptional crops which needed unique conditions for their growth\")\nprint(\"----------------------------------------------------------\")\nprint('Crops which need extremly high ratio of Nitrogen condition in Soil:', data[data['N']>120]['label'].unique())\nprint(\"Crops which need extremly high ratio of Phosphorous condition in Soil:\", data[data['P']>100]['label'].unique())\nprint(\"Crops which need extremly high ratio of Potassium condition in Soil:\", data[data['K']>200]['label'].unique())\nprint(\"Crops which need extremly heavy rainfall:\", data[data['rainfall']>200]['label'].unique())\nprint(\"Crops which need extremly high temperature:\",data[data['temperature']>40]['label'].unique())\nprint(\"Crop which need extremly low humidity:\",data[data['humidity']<20]['label'].unique())\nprint(\"Crops which need extremly low rainfall:\", data[data['rainfall']<100]['label'].unique())\nprint(\"Crops which ned extremly low ph:\",data[data['ph']<4]['label'].unique())\nprint(\"Crops which need extremly high ph:\",data[data[\"ph\"]>9]['label'].unique())\n","f99378d8":"print(\"Summer Season Crop\")\nprint(data[(data['temperature']>30)&(data['humidity']>50)]['label'].unique())\nprint(\"********************************************************\")\nprint(\"Winter Season crop\")\nprint(data[(data['temperature']<20)&(data['humidity']>30)]['label'].unique())\nprint(\"*********************************************************\")\nprint(\"Rainy season Crop\")\nprint(data[(data['rainfall']>200) &(data['humidity']>30)]['label'].unique())\n      \n      \n      \n           ","ff682dca":"from sklearn.cluster import KMeans # Importing KMeans Algorithm used for clustering Analysis\n# removing the labels column\nx=data.drop(['label'],axis=1) # Removing labels as it is a case of Unsupervised Learning\n\n# selecting all the values of the data\n\nx= x.values\n\n# checking the shape\nprint(x.shape)","d194212e":"\nplt.rcParams['figure.figsize']=(10,4)\n\n\nwcss=[]\nfor i in range(1,11):\n    km=KMeans(n_clusters=i, init ='k-means++', max_iter=300, n_init=10, random_state =0)\n    km.fit(x)\n    wcss.append(km.inertia_)\n    \n    \n#Lets Plot the results\nplt.plot(range(1,11),wcss)\nplt.title('The Elbow Method', fontsize=20)\nplt.xlabel('No of Clusters')\nplt.ylabel('wcss')\nplt.show()","b762828b":"# Lets implement the K means algorithm to perform Clustering analysis\nkm = KMeans(n_clusters=4, init='k-means++', max_iter = 300,n_init=10,random_state=0)\ny_means =km.fit_predict(x)\n\n# Lets find out the Results\na= data['label']\ny_means=pd.DataFrame(y_means)\nz=pd.concat([y_means,a],axis=1)\nz=z.rename(columns={0:'cluster'})\n\n# Lets check the Cluster of each Crops\nprint(\" Lets check the Results After Applying the K Means Clustering Analysis \\n\")\nprint(\"Crops in First Cluster:\", z[z['cluster']==0]['label'].unique())\nprint(\"--------------------------------------------------------------\")\nprint(\" Crops in Second cluster:\", z[z['cluster']==1]['label'].unique())\nprint('---------------------------------------------------------------')\nprint(\"Crops in Third cluster:\", z[z['cluster'] ==2]['label'].unique())\nprint(\"----------------------------------------------------------------\")\nprint(\"Crops in Forth Cluster:\",z[z['cluster']==3]['label'].unique())","c67a725b":"#Let spilit the Dataset for Predictive Modelling\ny=data['label'] # Storing label in Y varriable\nx=data.drop(['label'], axis=1)\nprint(\"Shape of x:\", x.shape)\nprint(\"Shape of y:\", y.shape)\n","95b4ea3a":"#Lets create Training and Testing Sets for validation of Results\nfrom sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.2, random_state=0) # 80% Data will be alotted into trainins set & remaining 20% will be sent into testing set\nprint(\"The Shape of x train:\", x_train.shape)\nprint(\"The Shape of x test:\",x_test.shape)\nprint(\"The Shape of y train:\",y_train.shape)\nprint(\"The Shape of y test\",y_test.shape)","cf8202c3":"from sklearn.linear_model import LogisticRegression  # Importing LogisticRegression from SKlearn to make our predective model\n\n\nmodel = LogisticRegression(solver = 'liblinear') # Storing our Algorithm in varriable name model \nmodel.fit(x_train, y_train) # Our model hase been trained from the data stored into training data set, Our model is fully trained now , further function used to predection\ny_pred = model.predict(x_test) #  we predict our model for x_test data set and further stored it into y_pred variable\n\n\n","b7cb95d8":"from sklearn.metrics import confusion_matrix \nplt.rcParams['figure.figsize']=(10,10)\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot =True, cmap ='Wistia')\nplt.title('Confusion Matrix for Logistic Regression', fontsize = 15)\nplt.show()","243186ee":"from sklearn.metrics import classification_report\ncr= classification_report(y_test, y_pred)\nprint(cr)\n\n    ","3cb6b643":"data.head()","0020a346":"prediction = model.predict((np.array([[90,# 90 for Nitrogen\n                                      40, # 40 for Phosphorous\n                                      40, # 40 for Pota\n                                      20, # 20 for temperature\n                                      80, # 80 for humidity\n                                      7 , # 7 for ph\n                                      200]])))  # 200 for rainfal\nprint(\"The suggested crop for given climatic condition is:\", prediction)  \n                           #Now time to check the output is rice or not","f7015602":"# **Checking the null or any missing value in every column of data**","9881159e":"# **Checking the first 5 row of the data set**","37d94567":"# **Now comparing the requirement of Soil minerals and weather conditions of different crops**","642ab29c":"# **Plot of Temperature requirement Vs Crops**","6d3e12c7":"# **Suitable average cimatic conditions needed by soil for crop production**","e81e5fb2":"# **We know the answer of the x_test data set have been stored into y_test, so to check the accuracy of the model, wew need to compare y_pred with y_test data, and to compare y_test with y_pred we use classification report**","f9cffa31":"![Dashboard 1.png](attachment:1db7ed1f-e443-47fc-9c63-79f19fc82717.png)","6c86b6fd":"# **We need to train our model without labels; because if our model trains woth label, it may cheat and our accuracy declines**\n* So we drop labels from dataset","cc0825f2":"# **Visualization By Tableau**","c824265e":"# **Crops which requires extraordinary\/special climatic conditions**","a933a102":"# **Now its time to divide the data into two sets; train_data & test_data**","e33361e9":"# **96% accuracy of our predicting model has been achived**","f2bc70aa":"# **Project Name:- \"Crop Production optimization Engine\"#\n# **By:- Balkrishan Mahabir** #\n\n## **Description**##\nIn this project, an optimistic attempt has been made to support farmers; with the purpose to improve their farming productivity. Additionally, for doing so, a forecasting model has been developed by the use of machine learning; which can direct us, which crop will be best suitable for a specific climatic condition.","1d1ecf5d":"# **Wow! our model is suggesting accurate crop its mean our model is very much accurate**","1979b03e":"# **Column name and their data type**","71414208":"# loading dataset","ce9c30b5":"# **Classiifying the crops as per their best productivity and sutability to the season**","e5674405":"# **Its time to form a predective model; which guides us about the best prductive crop according to the climatic condition and minerals; for which we need to use an Machine learning algorithm to train our model**\n* After our model get trained, we use the model for further predections\n* We are using Logistic Regression algorithm to train our Model\n* Logistic Regression is a probabilistic model;suitable for probabilistic or multiple classes types cases; we have 22 classes here in our cases","e6b2e73c":"**These helps Farmers to adopting similar kind of crops and yield maximum productivity**","501af7bf":"# **Plot of Humidity requirement Vs Crops**","50761c1e":"![Dashboard 2.png](attachment:d37c3d0e-36eb-42a6-9666-4d4303d91458.png)","8432a619":"**Till now we have performed exploratory analysis of the given data**","ad8447ca":"# **Terms meaning** #\n* N = Nitrogen\n* P = phosphorous\n* K = Potassium\n* Ph = A scale used to identify acidity or basicity nature; (Acid Nature- Ph<7; Neutral- Ph=7; Base Nature-P>7)\n* label = Types of Crop (Rice,Maize, Chickpea; Kidney beans; pigeonpeas; mothbeans; mungbean;blackgram; lentil; pomegranate; banana; mango; grapes; watermelon;                                muskmelon; apple; orange;papaya; coconut; cotton; jute; coffee)","63f1dc5b":"**No missing value is found in the data, indicates a high possibility of insight accuracy**","d21a0a4b":"# **There are two elbows first @ 3 & Second @ 4;always select the last Elbow: Hence our Cluster should be 4**","2e3184a9":"# **Lets check the accuracy of our model**","55f83210":"# **Plot of Rainfall requirement Vs Crops**","8cad794c":"# **Code for classification Report**","45bbbeef":"![164877285-indian-farmer-with-agronomist-at-corn-field-and-showing-laptop-screen.jpg](attachment:67e6ccfc-1ce7-4e98-8037-d8756f9eb721.jpg)","43b14381":"**Average climatic conditions found as given below**\n* ** Average ratio of Nitrogen in soil : 50.55\n* **Average ratio of Phosphorous in soil:53.36\n* ** Average ratio of Potassium in soil:48.15\n* **Average requirement of Temperature in soil:25.62\n* **Average requirment of humidity in soil:71.48\n* **Average requirement of ph scale in soil:6.47\n* **Average requiremen of rainfall in soil:103.46","e088fe98":"**By the help of classification report; we get the value of Precision & recall, further if both precicion and recall are very optimum it indicate strong accuracy of our training model**","cabb3cb0":"**Count is indicating exact number of the column; mean is indicating the average quantification of each column; on the other side standard deviation(std) illustrates variation from the average, \"a low std-most values are close to mean\",\"a high std-most values are at a huge distance from mean\"**","25cbc43f":"**The distributions are indicating that many crops are their which needed more, less and minimum climatic conditions**","e3f842ea":"# Import library #","3e931dbc":"# **Plot of Ph_Value requirement Vs Crops**","0f65f914":"** Column name \"label\" contains different types of crop; including fruits and crops**","8a90d496":"# To find number of rows and column of the data","8e63a050":" so, data contains \"2200\" rows & \"8\" columns ","408cebaa":"# **Distribution plot of different climatic and weather conditions explaining the varriation in them**","1e2ef99e":"# **Use of Interactive function from ipywidget library; to find the best optimum climatic condition for any specific crop**","3ff35ae0":"# **Now, its time to find the crops which need similar climatic conditions and mineral requirements and club them together into a group by the help of \"Clustering Analysis\"**\n**Clustering Analysis comes under unsupervised learning; means we train our model without labels**","abc80a9a":"# **Using Elbow Algorithm to find the optimum number of Clusters required**","73643922":"# **Statistical detail of data**","c5fb6cea":"# **Identifying the crops; which requires unusual or special weather and soil minerals**","8b803bce":"#","018a13f7":"**Here data containd 2200 \"rows\" & 8 \"columns\"**"}}