{"cell_type":{"35b77945":"code","9af3ee82":"code","d924f966":"code","4a8c4e66":"code","5049b1ef":"code","da7cce09":"code","590d89e5":"code","fe7549d9":"code","93b46d12":"code","2b6c4bd3":"code","16981131":"code","39ac9455":"code","6c210a25":"code","49b73b05":"code","73672512":"code","42bdac41":"code","311d7072":"code","e08c5ee1":"code","858c1ad0":"code","b0b906cb":"code","2a05e14e":"code","82088ced":"code","6c97fb8b":"code","567b1fe5":"code","875745b6":"code","6eb1649e":"code","b11372d6":"code","b7fef0ee":"markdown","31736746":"markdown","d48df652":"markdown","d5ec2a0e":"markdown","5f14c18e":"markdown","f1c75332":"markdown","91dbc439":"markdown"},"source":{"35b77945":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")","9af3ee82":"titanic = pd.read_csv(\"..\/input\/titanic-training-data\/titanic-training-data.csv\")","d924f966":"# Checking the data\ntitanic.head()","4a8c4e66":"# Here we need only Name, Sex, Age columns and hence deleting the other columns.\ndrop_columns = ['PassengerId','Survived','Pclass','SibSp','Parch','Ticket','Fare','Cabin','Embarked']\ntitanic.drop(drop_columns,1,inplace=True)","5049b1ef":"titanic.head()","da7cce09":"# Getting the Title from the Name column.\ntitanic['Title']=titanic.Name.apply(lambda x: x.split('.')[0].split(',')[1].strip())\ntitanic.head()","590d89e5":"# Deleting the Name column\ntitanic.drop('Name', axis=1, inplace=True)\ntitanic.head()","fe7549d9":"titanic.info()","93b46d12":"# Checking the missing values.\ntitanic.isnull().sum()[titanic.isnull().sum()>0]","2b6c4bd3":"# Let us create 3 datasets for each method. Use deep=True will create 3 seperate indexes.\ntitanic1 = titanic.copy(deep=True)\ntitanic2 = titanic.copy(deep=True)\ntitanic3 = titanic.copy(deep=True)","16981131":"# Check the values in titanic1\ntitanic1.head(20)","39ac9455":"# Get the mean of Age\ntitanic1.Age.mean()","6c210a25":"# Filling the missing rows in Age column based on mean of the entire Age column.\ntitanic1.Age = titanic1.Age.fillna(titanic1.Age.mean())","49b73b05":"# Checking the missing values.\ntitanic1.isnull().sum()[titanic1.isnull().sum()>0]\n# You can see there are no missing values.","73672512":"# Let us check if the missing values are filled with mean of Age\ntitanic1.head(20)\n# You can notice that the missing values are filled with the value 29.699118","42bdac41":"# check the values in titanic2\ntitanic2.head(20)","311d7072":"# Checking the missing values.\ntitanic2.isnull().sum()[titanic2.isnull().sum()>0]","e08c5ee1":"# Let us see the groupby based on Sex\ntitanic2.groupby('Sex').Sex.count()","858c1ad0":"titanic2.groupby('Sex').Age.mean()\n# You can notice that the mean age of female is 27.915709 and male is 30.726645\n# Expectation here is to fill the missing female values with 27.915709 and male with 30.726645","b0b906cb":"# Let us take the mean of Age of 314 female members and fill the missing values of Age for all females\n# All this in one line\ntitanic2['Age'] = titanic2.apply(lambda row: titanic2.groupby(['Sex']).Age.mean()[row['Sex']] if np.isnan(row['Age']) else row['Age'],axis=1)\ntitanic2.head(20)","2a05e14e":"# You can notice that all the missing Age for female members is 27.915709 and male members is 30.726645","82088ced":"# check the values in titanic3\ntitanic3.head(20)","6c97fb8b":"# Checking the null values for Age column\ntitanic3[titanic3.Age.isnull()].head(20)","567b1fe5":"# Checking the missing values.\ntitanic3.isnull().sum()[titanic3.isnull().sum()>0]","875745b6":"# Let us see the groupby based on Sex\ntitanic3.groupby(['Sex','Title']).Age.mean()","6eb1649e":"# Let us now fill the Age column with mean of unique combination of Sex and Title.\n# This can be done in one line.\ntitanic3['Age'] = titanic3.apply(lambda row: \n                           titanic3.groupby(['Sex','Title']).Age.mean()\n                           [row['Sex']][row['Title']] \n                           if np.isnan(row['Age']) else row['Age'],axis=1)","b11372d6":"# Let us check the filled in values now.\ntitanic3.head(50)","b7fef0ee":"### Method-1: \nTake the mean of Age column and filling the missing values.","31736746":"### Preparing the data","d48df652":"### Method-2:\nTake the mean of Age based on Gender (groupby) and filling the missing values. eg., Mean of Age based on Gender and filling the missing Age for that particular Gender.","d5ec2a0e":"#### I am going to take the example of Titanic training dataset and fill the Age column.\n\n#### Method-1: \nTake the mean of Age column and filling the missing values.\n\n#### Method-2: \nTake the mean of Age based on Gender (groupby) and filling the missing values.\neg., Mean of Age based on Gender and filling the missing Age for that particular Gender.\n\n#### Method-3:\nTake the mean of Age based on Gender and Title and filling the missing values.\neg., Mean of Age based on 'female' and 'Miss' and filling the missing Age for all of 'female'-'Miss' combination.","5f14c18e":"### Method-3:\nTake the mean of Age based on Gender and Title and filling the missing values.\neg., Mean of Age based on 'female' and 'Miss' and filling the missing Age for all of 'female'-'Miss' combination.","f1c75332":"## Filling NA of one Column based on Mean of multiple Columns - One Line Code\n\nI am going to explain how to fill the na values in one column based on the mean taken from the groupby of multiple columns.\n\n### Please upvote if you like it.","91dbc439":"#### There you go. \n\nWe had taken the unique combination of multiple columns and filled in a separate column with the Mean. \n\nAll this in one line.\n\nThere are numerous usecases particularly while doing the Exploratory Data Analysis.\n\n### Please upvote if you like it"}}