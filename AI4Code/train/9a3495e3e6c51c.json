{"cell_type":{"b38a349a":"code","417b4639":"code","194e9569":"code","163453b5":"code","09b56bfb":"code","3f5d47b3":"code","52cb7748":"code","d98dad2c":"code","de875b6a":"code","f1fee70d":"code","8397e384":"code","e5beade3":"code","b8314e70":"code","56b9f136":"code","949b23d1":"code","bd077c1b":"code","cd2e5c3e":"code","db7049d3":"code","0f1b30a2":"code","9f7a3a91":"code","b49ee0dc":"code","233d1a5c":"code","3ab50804":"code","af61e1c1":"code","b67ce2de":"code","85175814":"code","c80d250c":"code","f2fdad0b":"code","7e44f953":"code","16bb0324":"code","ee6fcb1f":"code","320c7ef5":"code","96defdd6":"code","8f22a037":"code","5cb41174":"code","bce3135d":"code","a1fb85aa":"code","4484b29d":"code","a58ee810":"code","9cde62eb":"code","86f70712":"code","7fa2b0ff":"code","2ae42215":"code","73caca1c":"code","11f87997":"code","f4e9a317":"code","87e827c5":"code","ba6c4261":"code","769abf91":"code","63d67cc9":"code","168e0d6b":"code","d86fff42":"code","dadb857f":"code","1e66f390":"code","133010d9":"code","5106f405":"code","ff7f1ae5":"code","41af8ad9":"code","133e25d3":"code","a1490484":"code","21f15f44":"code","65c742a7":"code","cc006920":"code","e1c07f4b":"code","1df2b50e":"code","5ef305e7":"code","5cf43d78":"code","679b2f45":"code","91c63d83":"code","b4859c39":"code","7c729941":"markdown","90f95187":"markdown","b3b1c38f":"markdown","6a584731":"markdown","27358560":"markdown","32166083":"markdown","0c1a11f1":"markdown","72e26fba":"markdown","23f94f0e":"markdown","2c346842":"markdown","c1a17603":"markdown","b91647df":"markdown","f7434a29":"markdown","5aebe155":"markdown","8b4868f1":"markdown","b44f2bfe":"markdown","f971fde9":"markdown","b58bf49c":"markdown","f3dc76a3":"markdown","13667217":"markdown","acf02ff0":"markdown","b0e8848d":"markdown","88c236e9":"markdown","8c08b532":"markdown","1eeeb07d":"markdown","59c1965f":"markdown","da09d5ef":"markdown","c4ef3713":"markdown","c7828c10":"markdown","a01d654b":"markdown","7d4116fb":"markdown"},"source":{"b38a349a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","417b4639":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","194e9569":"#Train_Data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","163453b5":"#Test_Data\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","09b56bfb":"train_data.describe()","3f5d47b3":"train_data.info()","52cb7748":"train_data.nunique()","d98dad2c":"print(train_data.Embarked.unique())\nprint('_'*40)\nprint(train_data.SibSp.unique())\nprint('_'*40)\nprint(train_data.Parch.unique())","de875b6a":"sns.displot(train_data.Pclass, aspect=1)","f1fee70d":"train_data.corr()\n","8397e384":"corrMatrix = train_data.corr()\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","e5beade3":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Age', bins=10)","b8314e70":"# grid = sns.FacetGrid(train_df, col='Pclass', hue='Survived')\ngrid = sns.FacetGrid(train_data, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","56b9f136":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Pclass', bins=3)","949b23d1":"train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","bd077c1b":"train_data[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","cd2e5c3e":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'SibSp', bins=8)","db7049d3":"train_data[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","0f1b30a2":"train_data[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","9f7a3a91":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Parch', bins=8)","b49ee0dc":"train_data[['Fare', 'Survived']].groupby(['Fare'], as_index=False).mean().sort_values(by='Survived', ascending=False)","233d1a5c":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Fare', bins=10)","3ab50804":"sns.regplot(train_data.Fare, train_data.Survived)","af61e1c1":"train_data[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b67ce2de":"df = pd.get_dummies(train_data, columns=['Embarked', 'Sex'])\n","85175814":"df","c80d250c":"df = df.drop(columns=['Cabin','PassengerId','Name'])","f2fdad0b":"df","7e44f953":"df.Age = df.Age.fillna(df.Age.mean())","16bb0324":"df","ee6fcb1f":"df.info()","320c7ef5":"df.corr()","96defdd6":"test_data","8f22a037":"test_data.info()","5cb41174":"df2 = test_data\ndf2","bce3135d":"df2.Age = df.Age.fillna(df2.Age.mean())\ndf2.Fare = df.Age.fillna(df2.Fare.mean())","a1fb85aa":"df2.info()","4484b29d":"df2 = pd.get_dummies(df2, columns=['Embarked','Sex' ])\ndf2","a58ee810":"df2 = df2.drop(columns=['PassengerId', 'Name', 'Cabin'])\ndf2","9cde62eb":"x_train = train_data.iloc[:,2:11]","86f70712":"x_train","7fa2b0ff":"y_train = train_data.iloc[:,1].values","2ae42215":"df","73caca1c":"x_train =df[['Pclass','Age', 'SibSp','Parch','Fare','Embarked_C','Embarked_Q','Embarked_S','Sex_female','Sex_male']]\nx_train\ny_train = df.iloc[: ,0]","11f87997":"x_test =df2[['Pclass','Age', 'SibSp','Parch','Fare','Embarked_C','Embarked_Q','Embarked_S','Sex_female','Sex_male']]\n","f4e9a317":"from sklearn import preprocessing\nscaler = preprocessing.StandardScaler().fit(x_train)","87e827c5":"scaler.scale_","ba6c4261":"scaler.mean_","769abf91":"x_scaled = scaler.transform(x_train)\nx_scaled","63d67cc9":"from sklearn import svm\nsvc = svm.SVC()\nsvc.fit(x_train, y_train)\nY_pred = svc.predict(x_test)\nacc_svc = round(svc.score(x_train, y_train) * 100, 2)\nacc_svc","168e0d6b":"Y_pred","d86fff42":"df_t = pd.concat([df, df2], axis=0)\n","dadb857f":"df_t.info()","1e66f390":"df_t","133010d9":"x_train = df_t.iloc[1:891, 1:12]\nx_train = x_train.drop(columns=['Ticket'])\nx_train = x_train.astype(str)\nx_train","5106f405":"y_train = df_t.iloc[1:891, 0:1] \ny_train = y_train.astype(str)\ny_train","ff7f1ae5":"x_test = df_t.iloc[891:1309, 1:12]\nx_test = x_test.drop(columns=['Ticket'])\nx_test = x_test.astype(str)\nx_test","41af8ad9":"y_test = df_t.iloc[891:1309, 0:1]\ny_test = y_test.astype(str)\ny_test","133e25d3":"from sklearn import svm\nsvc = svm.SVC()\nsvc.fit(x_train, y_train)\ny_test = svc.predict(x_test)\nacc_svc = round(svc.score(x_train, y_train) * 100, 2)\nacc_svc","a1490484":"df_t","21f15f44":"y_test","65c742a7":"#Logistic Algorithm\nfrom sklearn import preprocessing\nimport sklearn\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel = model.fit(x_train,y_train)\nprint(model.coef_)\nprint(\"-\"*40)\nprint(model.intercept_)\nprint(\"-\"*40)\nprint(model.score(x_train,y_train))\nprint(\"-\"*40)\n\n","cc006920":"y_pred = model.predict(x_test)\ny_prob = model.predict_proba(x_test)","e1c07f4b":"from sklearn.tree import DecisionTreeRegressor\nmodel = DecisionTreeRegressor()\nmodel = model.fit(x_train, y_train)\ny_predict = model.predict(x_train)\nprint(model.score(x_train,y_train))","1df2b50e":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(x_train, y_train)\nY_pred = random_forest.predict(x_test)\nrandom_forest.score(x_train, y_train)\nacc_random_forest = round(random_forest.score(x_train, y_train) * 100, 2)\nacc_random_forest","5ef305e7":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(x_train, y_train)\ny_pred = gnb.predict(x_train)\nfrom sklearn import metrics\nprint(\"Gaussian Naive Bayes model accuracy(in %):\", metrics.accuracy_score(y_train, y_pred)*100)\n","5cf43d78":"df2 = test_data","679b2f45":"submission = pd.DataFrame({\n        \"PassengerId\": df2.PassengerId,\n        \"Survived\": y_test\n    })","91c63d83":"submission","b4859c39":"submission.to_csv('submission.csv',index=False)","7c729941":"#  Sex influence on survival","90f95187":"# Logestic Regression","b3b1c38f":"**Dummy Variables** ","6a584731":"# Naive Bays","27358560":"# Now we use dummy variables to fullfill categorical data.","32166083":"**Female has a higher survival rate vs male.**","0c1a11f1":"Accuracy level\n\nLogestic Regression: 0.8\n\nSVC: 0.68\n\nDecision tree: .95\n\nRandom Forest: .98\n\nNaive Bays: .79\n\n**As we can see the best score is for Decision Tree & Random Forest, so we use these method for forcasting.**","72e26fba":"# Fare influence on survival","23f94f0e":"# As name and passengerId don't make any value , and many cabin field are empty we will remove them.","2c346842":"# DecisionTreeRegressor","c1a17603":"**Now as both datasets(train & test) are ready, we jump to modeling**","b91647df":"# get an export","f7434a29":"# Also as we know, name and passengerId don't make any value , and many cabin field are empty we will remove them.","5aebe155":"# ****Age effects on survival","8b4868f1":"**As we see. we have some not filled cells in Age, Fare and Cabin. \nwe fill them with mean.**","b44f2bfe":"# Forcasting Algorithms which we will use them here are Logistic Regression, Support Vector Machine, Naive Bayes, Decision Tree\n# ","f971fde9":"As we can see Pclass, Sex,Embarked are categorical data.\n\nAlso: Age, Cabin and Embarked has some null values, now we should decide how to fill these gaps.","b58bf49c":"**As ticket price grow, survival chance grows**","f3dc76a3":"Corelation doesn't give us much insight so we get into see the varition of each parameter with survival .","13667217":"As it was mentioned, \n\npclass = Ticket class\n\nsibsp = do they have any siblings \/ spouses out of Titanic ?\n\nparch =  do they have any  parents \/ children out of Titanic?\n\nfare = ticket price\n\nembarked =  from where, they get in to the ship\n","acf02ff0":"# SVC","b0e8848d":"**Those who were from Cherbourg has better survival rate.**","88c236e9":"# ****Sibsp effects on survival","8c08b532":"**As we can see infants and higher than 50 has more chance to survive.**","1eeeb07d":"# **Class effect on survival rate**","59c1965f":"**Those with sibilings has higher survival rate.**","da09d5ef":"**Those with parents \/children has higher rate of survival.**","c4ef3713":"# Cabin influence on survival rate","c7828c10":"# RandomForestClassifier","a01d654b":"****As we can see, those from higher class has a better chance of survival**","7d4116fb":"# Parch effects on survival"}}