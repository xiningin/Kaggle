{"cell_type":{"fa6eb546":"code","7e40c96a":"code","a411fac7":"code","e5b3b230":"code","1c3e834d":"code","ced34138":"code","e924c908":"code","36466080":"code","7f1e541e":"code","c230b2bd":"code","7f09ffac":"code","385a6305":"code","954c5a2f":"code","200881c6":"code","bf68c2b7":"code","a4e6b002":"code","e07412dd":"code","25424a7e":"code","ca3218d3":"code","4d4624d0":"code","a5e755b5":"code","36f79e13":"code","ac593e22":"code","92fcfda2":"code","cf4daddd":"code","67ecf618":"code","f40f4fa6":"code","8a7c9655":"code","57cb1b84":"code","e1913048":"code","07b134a1":"code","cd00c9ea":"code","00557e83":"code","32d6ba05":"code","4593bcf4":"code","dcdefbcf":"code","2192c92a":"code","48fb1869":"code","9516eb5e":"code","69fe5582":"code","bea4026c":"code","a6b993be":"code","b3a10c07":"code","e384fe8c":"code","faa9249d":"code","3c234b1c":"code","05625b26":"code","5500c36f":"code","328927e6":"code","5761e469":"code","51961d83":"code","b2981f31":"code","181b3987":"code","cc6a4aa1":"code","7c1f3bf0":"code","cfe76cfa":"code","76a367ac":"code","371a6430":"code","2a681a3f":"code","468cee6f":"code","37316217":"code","30e1705f":"code","4e654700":"code","e9cb48a8":"code","606c0a65":"code","a5d4b63b":"code","dfb3cf9c":"code","36637182":"code","9aecd342":"code","5a250ac7":"code","29f06f16":"code","b5e51fb3":"code","f9dfaa3f":"code","8b826b42":"code","d2a1d787":"code","10969734":"code","6c2addb7":"code","8a8f70c0":"code","065c7e04":"code","d812ec32":"code","d0712c12":"code","80ce9ef3":"code","84839d02":"code","1ca832d6":"code","445dd6d1":"code","749af312":"code","d3861006":"code","4e17a3b1":"code","3b5c8013":"code","0c927eea":"code","4c558704":"code","712970d3":"code","a0bcb7cc":"code","9ecaa4b7":"code","712f42e2":"code","78b7d50c":"code","eaef0e4a":"code","9a1d2387":"code","dbdb40d4":"code","c230bec0":"code","40072398":"code","f48e5226":"code","796ca052":"code","0258c9e0":"code","d9018201":"code","b0f8852f":"code","9aa077c9":"code","16b9f0aa":"code","66f535ff":"code","9aa8f423":"code","54626f09":"code","e5219855":"code","c7ed85ab":"code","450db61b":"code","881dafd8":"code","8c1a932e":"code","1eff4696":"code","a7276d6a":"code","f5124cf1":"code","e5da9c45":"code","c7c3b5a1":"code","f95b157a":"code","8931cb1c":"code","d6341f9e":"code","51428568":"code","6d0a74c1":"code","a88c2d3b":"code","143f7f0e":"code","f3307399":"code","93f722ca":"code","d0286d1d":"code","e3748304":"code","84d4224b":"code","a7d768a3":"code","57aaf73e":"code","dd05174a":"code","c7c61878":"code","98cbd8ef":"code","f9c41421":"code","3e47cf5b":"code","79bd8832":"code","f3228bdf":"code","8692b471":"markdown","9681061b":"markdown","022e50ba":"markdown","b7d46a80":"markdown","e9c12dd4":"markdown","ce828ce8":"markdown","d37faf99":"markdown","7496c722":"markdown","9a6f6e9d":"markdown","e1c01288":"markdown","b25a2b5f":"markdown","30428724":"markdown","668452b2":"markdown","e5971d02":"markdown","b6aff43f":"markdown","dcbaf773":"markdown","4866f285":"markdown","2cfbbd28":"markdown","4614bc97":"markdown","77033e23":"markdown","fb22003f":"markdown","ffaacf78":"markdown","11ec824c":"markdown","2c3e523a":"markdown","682cb8c6":"markdown","7a23ada1":"markdown","6b2c9578":"markdown","632cefe7":"markdown","540ab7f9":"markdown","24617529":"markdown","b45a32d7":"markdown","1eb01246":"markdown","19304dad":"markdown","14ec6737":"markdown","8fde273d":"markdown","f501eba0":"markdown","adedad4f":"markdown","4a54da90":"markdown","453d6207":"markdown","d54c5191":"markdown","c2fa5fb1":"markdown","ad3caff5":"markdown","00e5df13":"markdown","eb1dadfa":"markdown","072529c0":"markdown","66f1e9f0":"markdown","962c5d2a":"markdown","0ecd57f0":"markdown","413922ac":"markdown","544be8cb":"markdown","b2ca45c0":"markdown","06356f24":"markdown","071e64e0":"markdown","d219ffb1":"markdown","9675a7c0":"markdown","5bef4481":"markdown","52ec2f1b":"markdown","c67438d5":"markdown","82368a09":"markdown","e3f01055":"markdown","7ed78e5c":"markdown","d9da1f59":"markdown","7f3fc04e":"markdown","675dfbf5":"markdown","fe0f4740":"markdown","c7393395":"markdown","d1e97446":"markdown","1bb2c2c3":"markdown","9d0e9325":"markdown","f4015766":"markdown","f8764d40":"markdown","42707425":"markdown","d13b8e6a":"markdown","fc28388c":"markdown","838586ac":"markdown","e2d561a1":"markdown","c104cb7a":"markdown"},"source":{"fa6eb546":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn import preprocessing \nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt, numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.cluster import AgglomerativeClustering\nfrom matplotlib.colors import ListedColormap\nimport warnings\nwarnings.filterwarnings('ignore')","7e40c96a":"df = pd.read_csv('..\/input\/alcohol-consumption\/drinks.csv')\ndf","a411fac7":"# Exploratory Data Analysis\ndef libraries():\n    global pd,np\n    import pandas as pd\n    import numpy as np\ndef load():\n    global df\n    df = pd.read_csv(\"..\/input\/alcohol-consumption\/drinks.csv\")\n    \ndef top_rows(value):\n    print('\\033[1m'+ 'displaying the', value, 'rows from top'+'\\033[0m')\n    a=df.head(value)\n    print(a,'\\n')\n    \ndef bottom_rows(value):\n    print('\\033[1m'+'displaying the', value, 'rows from bottom'+'\\033[0m')\n    b=df.tail(value)\n    print(b,'\\n')\n    \ndef rows_columns():\n    print('\\033[1m'+'Shape of the Data set'+'\\033[0m')\n    c=df.shape\n    print(c,'\\n')\n    \ndef col_names():\n    print('\\033[1m'+'Column Names in the Data set'+'\\033[0m')\n    d=df.columns\n    print(d,'\\n')\n    \ndef information():\n    print('\\033[1m'+'Quick Overview of DataSet(info)'+'\\033[0m')\n    e = df.info()\n    print(e,'\\n')\n\ndef sizee():\n    print('\\033[1m'+'No.of Elements in the DataSet'+'\\033[0m')\n    f = df.size\n    print(f,'\\n')\n\ndef ndimension():\n    print('\\033[1m'+'Dimensions in your dataframe'+'\\033[0m')\n    g = df.ndim\n    print(g,'\\n')\n    \ndef stats_summary():\n    print('\\033[1m'+'Staistical Summary of DataSet'+'\\033[0m')\n    h = df.describe()\n    print(h,'\\n')\n    \ndef null_values():\n    print('\\033[1m'+'Number of Missing values in each column'+'\\033[0m')\n    i = df.isnull().sum()\n    print(i,'\\n')\n    \ndef n_unique():\n    print('\\033[1m'+'Number of unique elements'+'\\033[0m')\n    j = df.nunique()\n    print(j,'\\n')\n    \ndef memory_use():\n    print('\\033[1m'+'Memory used by all colomns in bytes'+'\\033[0m')\n    k = df.memory_usage()\n    print(k,'\\n')\n    \ndef is_na(value):\n    print('\\033[1m'+'Dataframe filled with boolean values with true indicating missing values'+'\\033[0m')\n    l = df.isna().head(value)\n    print(l,'\\n')\n    \ndef duplicate():\n    print('\\033[1m'+'Boolean Series denoting duplicate rows'+'\\033[0m')\n    m = df.duplicated().sum()\n    print(m,'\\n')\n    \ndef valuecounts():\n    print('\\033[1m'+'Series containing count of unique values'+'\\033[0m')\n    n = df.value_counts()\n    print(n,'\\n')\n\ndef datatypes():\n    print('\\033[1m'+'Datatype of each column'+'\\033[0m')\n    o = df.dtypes\n    print(o,'\\n')\n    \ndef correlation():\n    print('\\033[1m'+'Correalation between all columns in DataFrame'+'\\033[0m')\n    p = df.corr()\n    print(p,'\\n')\n    \ndef nonnull_count():\n    print('\\033[1m'+'Count of non-null values'+'\\033[0m')\n    q = df.count()\n    print(q,'\\n')\n    \ndef eda():\n    load()\n    value= 5 \n    datatypes()\n    top_rows(value)\n    bottom_rows(value)\n    rows_columns()\n    col_names()\n    information()\n    sizee()\n    ndimension()\n    stats_summary()\n    null_values()\n    n_unique()\n    memory_use()\n    is_na(value)\n    nonnull_count()\n    duplicate()\n    valuecounts()\n    correlation()\n    \n    \n    \n        \ndef stats_u(data,col):\n    if data[col].dtype == \"float64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        max_value = data[col].max()\n        print('Maximum value of',col,'column',max_value)\n        min_value = data[col].min()\n        print('Minimum value of',col,'column',min_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n            \n    elif data[col].dtype == \"int64\":\n        print(col,\"has Quantitative data\")\n        mean_value=data[col].mean()\n        print('mean of',col,'column',mean_value)\n        median_value = data[col].median(skipna = True)\n        print('median of',col,'column',median_value)\n        std_value = data[col].std()\n        print('standard deviation of',col,'column',std_value)\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        print('quartile 1 of',col,'column is',q1)\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        print('quartile 2 of',col,'column is',q2)\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        print('quartile 3 of',col,'column is',q3)\n        q4 = data[col].quantile(1,interpolation='nearest')\n        print('quartile 4 of',col,'column is',q4)\n        IQR = q3 -q1\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        print('Lower Limit Point:',LLP)\n        print('Upper Limit Point:',ULP)\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers\")\n        else:\n            print(\"There are outliers\")\n            print(\"Outliers are:\")\n            print(data[data[col]<LLP][col])\n            print(data[data[col]>ULP][col])\n    else:\n        print(col,'has Qualitative Data')\n        z = df[col].mode()\n        print('mode of',col,'column:\\n',z)\n        print('Count of mode is:\\n',df[col].value_counts())\n        print('Unique strings in',col,'are',data[col].nunique())\n        if(data[col].nunique() == 1):\n            print(col,'has same string')\n        elif(data[col].nunique() == 2):\n            print(col,'has binary strings')\n        else:\n            print(col,'has multi stings')\n\n\nlibraries()\neda()\n\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of DataSet'+'\\033[0m')\nprint('\\033[1m'+'DataTypes in the DataSet:\\n'+'\\033[0m',df.dtypes)\nprint('\\033[1m'+'Columns in DataSet:'+'\\033[0m',df.columns)\nprint('\\033[1m'+'Shape of DataSet:'+'\\033[0m',df.shape)\nprint('\\033[1m'+'Size of DataSet:'+'\\033[0m',df.size)\nprint('\\033[1m'+'Dimension of DataSet:'+'\\033[0m',df.ndim)\nprint('\\033[1m'+'Total Memory used in DataSet:'+'\\033[0m',df.memory_usage().sum())\nprint('\\033[1m'+'Total Number of missing values in DataSet:'+'\\033[0m',df.isnull().sum().sum())\nprint('\\033[1m'+'Total Number of Unique values in DataSet:'+'\\033[0m',df.nunique().sum())\nprint('\\033[1m'+'Total Number of non null values in DataSet:'+'\\033[0m',df.count().sum())\nprint('\\033[1m'+'Total Number of duplicate rows in DataSet:'+'\\033[0m',df.duplicated().sum())\nprint(\"----------------------------------------------------------------------------------------------------------------------\")\nprint('\\033[1m'+'Summary Of Each Colomn'+'\\033[0m')\nprint(\"\\n\")\ncols=df.columns\ncols\nfor i in cols:\n    print('\\033[1m'+i+'\\033[0m')\n    stats_u(df,i)\n    print(\"\\n\")\n            ","e5b3b230":"df.head()","1c3e834d":"df.tail()","ced34138":"df.shape","e924c908":"df.size","36466080":"df.dtypes","7f1e541e":"df.columns","c230b2bd":"df.info()","7f09ffac":"df.describe()","385a6305":"df.isnull().sum()","954c5a2f":"df.duplicated().sum()","200881c6":"df.skew()","bf68c2b7":"df.corr()","a4e6b002":"! pip install chart-studio","e07412dd":"import chart_studio.plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","25424a7e":"init_notebook_mode(connected=True) ","ca3218d3":"data = dict(\n        type = 'choropleth',\n        locations = df['country'],\n    locationmode = 'country names',\n        z = df['beer_servings'],\n        text = df['country'],\n        colorbar = {'title' : 'country wise beer_servings'},\n      ) ","4d4624d0":"layout = dict(\n    title = 'country wise beer_servings',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'natural earth'}\n    )\n)","a5e755b5":"choromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","36f79e13":"data = dict(\n        type = 'choropleth',\n        locations = df['country'],\n    locationmode = 'country names',\n        z = df['spirit_servings'],\n        text = df['country'],\n        colorbar = {'title' : 'country wise spirit_servings'},\n      ) ","ac593e22":"layout = dict(\n    title = 'country wise spirit_servings',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'natural earth1'}\n    )\n)","92fcfda2":"choromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","cf4daddd":"data = dict(\n        type = 'choropleth',\n        locations = df['country'],\n    locationmode = 'country names',\n        z = df['wine_servings'],\n        text = df['country'],\n        colorbar = {'title' : 'country wise wine_servings'},\n      ) ","67ecf618":"layout = dict(\n    title = 'country wise wine_servings',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'natural earth2'}\n    )\n)","f40f4fa6":"choromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","8a7c9655":"data = dict(\n        type = 'choropleth',\n        locations = df['country'],\n    locationmode = 'country names',\n        z = df['total_litres_of_pure_alcohol'],\n        text = df['country'],\n        colorbar = {'title' : 'country wise total_litres_of_pure_alcohol'},\n      ) ","57cb1b84":"layout = dict(\n    title = 'country wise total_litres_of_pure_alcohol',\n    geo = dict(\n        showframe = False,\n        projection = {'type':'hyperelliptical'}\n    )\n)","e1913048":"choromap = go.Figure(data = [data],layout = layout)\niplot(choromap)","07b134a1":"! pip install Autoviz","cd00c9ea":"! pip install xlrd","00557e83":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf_av = AV.AutoViz(\"..\/input\/alcohol-consumption\/drinks.csv\")","32d6ba05":"df['country'].value_counts()# all are unique","4593bcf4":"plt.figure(figsize=(16,9))\nax = sns.heatmap(df.corr(),annot = True, cmap = 'viridis')\nplt.show()","dcdefbcf":"''' Plot a Shifted Correlation Matrix '''\n# Diagonal correlation is always unity & less relevant, shifted variant shows only relevant cases\ndef corrMat(df,id=False):\n    \n    corr_mat = df.corr().round(2)\n    f, ax = plt.subplots(figsize=(12,7))\n    mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n    mask = mask[1:,:-1]\n    corr = corr_mat.iloc[1:,:-1].copy()\n    sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n#     bottom, top = ax.get_ylim() \n#     ax.set_ylim(bottom + 0.5, top - 0.5) \n    ax.set_title('Shifted Linear Correlation Matrix')\n    \ncorrMat(df.drop(['country'],axis = 1))","2192c92a":"sns.pairplot(df)","48fb1869":"fig = px.histogram(df, 'beer_servings',             \n                   color=\"country\",\n                   title=\"<b>Average beer_servings per country<\/b>\")\n\nfig.add_vline(x=df['beer_servings'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","9516eb5e":"df[df['beer_servings'] < 100]['country']","69fe5582":"df[df['beer_servings'] < 100]['country'].count()","bea4026c":"y = df[df['beer_servings'] < 100]['country']\nx = df[df['beer_servings'] < 100]['beer_servings']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'country vs beer_servings lessthan 100',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","a6b993be":"df[df['beer_servings'] > 100]['country']","b3a10c07":"df[df['beer_servings'] > 100]['country'].count()","e384fe8c":"y = df[df['beer_servings'] > 100]['country']\nx = df[df['beer_servings'] > 100]['beer_servings']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'country vs beer_servings greatherthan 100',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='red')\nfig.show()","faa9249d":"df_sort_beer = df[['country','beer_servings']].sort_values('beer_servings')\ndf_sort_beer","3c234b1c":"y = df_sort_beer['country']\nx = df_sort_beer['beer_servings']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'Simple Bar Chart',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='yellowgreen')\nfig.show()","05625b26":"beer_max = df['beer_servings'].max()\nbeer_max","5500c36f":"df[df['beer_servings'] == beer_max]","328927e6":"beer_min = df['beer_servings'].min()\nbeer_min","5761e469":"df[df['beer_servings'] == beer_min]","51961d83":"df[df['beer_servings'] > df['beer_servings'].mean()]['country'].values","b2981f31":"df[['country','beer_servings']].sort_values('beer_servings').tail(10)","181b3987":"df[['country','beer_servings']].sort_values('beer_servings').head(10)","cc6a4aa1":"fig = px.histogram(df, 'spirit_servings',             \n                   color=\"country\",\n                   title=\"<b>Average spirit_servings per country<\/b>\")\n\nfig.add_vline(x=df['spirit_servings'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","7c1f3bf0":"df[df['spirit_servings'] < 100]['country'].values","cfe76cfa":"df[df['spirit_servings'] < 100]['country'].count()","76a367ac":"y = df[df['spirit_servings'] < 100]['country']\nx = df[df['spirit_servings'] < 100]['spirit_servings']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'country vs spirit_servings lessthan 100',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","371a6430":"df[df['spirit_servings'] > 100]['country']","2a681a3f":"df[df['spirit_servings'] > 100]['country'].count()","468cee6f":"y = df[df['spirit_servings'] > 100]['country']\nx = df[df['spirit_servings'] > 100]['spirit_servings']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'country vs spirit_servings greatherthan 100',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='red')\nfig.show()","37316217":"df_sort_spirit = df[['country','spirit_servings']].sort_values('spirit_servings')\ndf_sort_spirit","30e1705f":"y = df_sort_spirit['country']\nx = df_sort_spirit['spirit_servings']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'sorted values WRT spirit_servings',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='yellowgreen')\nfig.show()","4e654700":"spirit_max = df['spirit_servings'].max()\nspirit_max","e9cb48a8":"df[df['spirit_servings'] == spirit_max]","606c0a65":"spirit_min = df['spirit_servings'].min()\nspirit_min","a5d4b63b":"df[df['spirit_servings'] == spirit_min][['country','spirit_servings']]","dfb3cf9c":"df[df['spirit_servings'] > df['spirit_servings'].mean()]['country'].values","36637182":"df[['country','spirit_servings']].sort_values('spirit_servings').tail(10)","9aecd342":"df[['country','spirit_servings']].sort_values('spirit_servings').head(10)","5a250ac7":"fig = px.histogram(df, 'wine_servings',             \n                   color=\"country\",\n                   title=\"<b>Average wine_servings per country<\/b>\")\n\nfig.add_vline(x=df['wine_servings'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","29f06f16":"df[df['wine_servings'] < 10]['country']","b5e51fb3":"df[df['wine_servings'] < 10]['country'].count()","f9dfaa3f":"y = df[df['wine_servings'] < 10]['country']\nx = df[df['wine_servings'] < 10]['wine_servings']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'country vs wine_servings lessthan 10',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","8b826b42":"df[df['wine_servings'] > 10]['country']","d2a1d787":"df[df['wine_servings'] > 10]['country'].count()","10969734":"y = df[df['wine_servings'] > 10]['country']\nx = df[df['wine_servings'] > 10]['wine_servings']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'country vs wine_servings greatherthan 10',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='red')\nfig.show()","6c2addb7":"df_sort_wine = df[['country','wine_servings']].sort_values('wine_servings')\ndf_sort_wine","8a8f70c0":"y = df_sort_wine['country']\nx = df_sort_wine['wine_servings']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'sorted values WRT wine_servings',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='yellowgreen')\nfig.show()","065c7e04":"wine_max = df['wine_servings'].max()\nwine_max","d812ec32":"df[df['wine_servings'] == wine_max]","d0712c12":"wine_min = df['wine_servings'].min()\nwine_min","80ce9ef3":"df[df['wine_servings'] == wine_min][['country','wine_servings']]","84839d02":"df[df['wine_servings'] > df['wine_servings'].mean()]['country'].values","1ca832d6":"df[['country','wine_servings']].sort_values('wine_servings').tail(10)","445dd6d1":"df[['country','wine_servings']].sort_values('wine_servings').head(10)","749af312":"fig = px.histogram(df, 'total_litres_of_pure_alcohol',             \n                   color=\"country\",\n                   title=\"<b>Average total_litres_of_pure_alcohol per country<\/b>\")\n\nfig.add_vline(x=df['total_litres_of_pure_alcohol'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","d3861006":"df[df['total_litres_of_pure_alcohol'] < 6]['country']","4e17a3b1":"df[df['total_litres_of_pure_alcohol'] < 6]['country'].count()","3b5c8013":"y = df[df['total_litres_of_pure_alcohol'] < 6]['country']\nx = df[df['total_litres_of_pure_alcohol'] < 6]['total_litres_of_pure_alcohol']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'country vs total_litres_of_pure_alcohol less than 6 litres',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","0c927eea":"df[df['total_litres_of_pure_alcohol'] > 6]['country']","4c558704":"df[df['total_litres_of_pure_alcohol'] > 6]['country'].count()","712970d3":"y = df[df['total_litres_of_pure_alcohol'] > 6]['country']\nx = df[df['total_litres_of_pure_alcohol'] > 6]['total_litres_of_pure_alcohol']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'country vs total_litres_of_pure_alcohol greather than 6 litres',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.show()","a0bcb7cc":"df_sort_alcohol = df[['country','total_litres_of_pure_alcohol']].sort_values('total_litres_of_pure_alcohol')\ndf_sort_alcohol","9ecaa4b7":"y = df_sort_alcohol['country']\nx = df_sort_alcohol['total_litres_of_pure_alcohol']\ndata = go.Bar(x= x,y= y,orientation = 'h',textposition='auto',opacity=0.8)\nlayout = go.Layout(title = 'sorting values of total_litres_of_pure_alcohol',width=1000,height=1500)\nfig = go.Figure(data=data,layout=layout)\nfig.update_traces(marker_color='yellowgreen')\nfig.show()","712f42e2":"alcohol_max = df['total_litres_of_pure_alcohol'].max()\nalcohol_max","78b7d50c":"df[df['total_litres_of_pure_alcohol'] == alcohol_max]","eaef0e4a":"alcohol_min = df['total_litres_of_pure_alcohol'].min()\nalcohol_min","9a1d2387":"df[df['total_litres_of_pure_alcohol'] == alcohol_min][['country','total_litres_of_pure_alcohol']]","dbdb40d4":"df[df['total_litres_of_pure_alcohol'] > df['total_litres_of_pure_alcohol'].mean()]","c230bec0":"df[['country','total_litres_of_pure_alcohol']].sort_values('total_litres_of_pure_alcohol').tail(10)","40072398":"df[['country','total_litres_of_pure_alcohol']].sort_values('total_litres_of_pure_alcohol').head(10)","f48e5226":"a = []\nfor i in df_sort_beer['country'].tail(5):\n    a.append(i)\ndf_sort_beer.tail()","796ca052":"for i in df_sort_spirit['country'].tail(5):\n    a.append(i)\ndf_sort_spirit.tail()","0258c9e0":"for i in df_sort_wine['country'].tail(5):\n    a.append(i)\ndf_sort_wine.tail()","d9018201":"for i in df_sort_alcohol['country'].tail(5):\n    a.append(i)\ndf_sort_alcohol.tail()","b0f8852f":"a","9aa077c9":"c = []\nfor i in a:\n    if i not in c:\n        c.append(i)\nc\n# removing repeated countries","16b9f0aa":"v = df['country'].index.values\nv","66f535ff":"m = []\nfor i in range(len(v)):\n    if df['country'][i] in c:\n        m.append(v[i])\nm","9aa8f423":"df_top5 = df.loc[m]\ndf_top5\n\n# consists of states which are top 5 respective column","54626f09":"x = df_top5['country']\ny1 = df_top5['beer_servings']\ny2 = df_top5['spirit_servings']\ny3 = df_top5['wine_servings']\ny4 = df_top5['total_litres_of_pure_alcohol']\ntrace1 = go.Bar(x= x,y= y1,marker={'color' : '#FFB300'},name = 'beer_servings')    \ntrace2 = go.Bar(x= x,y= y2,marker={'color' : '#F7DC6F'},name = 'spirit_servings') \ntrace3 = go.Bar(x= x,y= y3,marker={'color' : '#FF9800'},name = 'wine_servings')\ntrace4 = go.Bar(x= x,y= y4,marker={'color' : '#7CB342'},name = 'total_litres_of_pure_alcohol')\nlayout = go.Layout(title= 'Grouped Bar Chart' , width=980,height=800)\ndata = [trace1,trace2,trace3,trace4]\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n\n# over all visualisation of countries\n# usa is most consistent team","e5219855":"df[(df['beer_servings'] > df['beer_servings'].mean()) & (df['spirit_servings'] > df['spirit_servings'].mean())][['country','beer_servings','spirit_servings']]","c7ed85ab":"df[(df['wine_servings'] > df['wine_servings'].median()) & (df['total_litres_of_pure_alcohol'] > df['total_litres_of_pure_alcohol'].median())][['country','wine_servings','total_litres_of_pure_alcohol']]","450db61b":"df['country'].values","881dafd8":"def numerical_feature_overview(feature, rotation=0):\n    print(feature, 'has', df[feature].isnull().sum() \/ len(df) * 100, '% of null values')\n    f,ax = plt.subplots(1, 2, figsize=(20, 6))\n    ax[0].tick_params(labelrotation=rotation)\n    ax[1].tick_params(labelrotation=rotation)\n    sns.scatterplot(data=df, x=feature, y='beer_servings', ax=ax[0]);\n    sns.boxplot(data=df, x=feature, ax=ax[1])\n    plt.show()","8c1a932e":"numerical_feature_overview('beer_servings')","1eff4696":"numerical_feature_overview('spirit_servings')","a7276d6a":"numerical_feature_overview('wine_servings')","f5124cf1":"numerical_feature_overview('total_litres_of_pure_alcohol')","e5da9c45":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nx = df.drop(['country'],axis = 1)\nfor i in x.columns:\n    count_outliers(x,i)","c7c3b5a1":"Num_vars = ['beer_servings','spirit_servings','wine_servings','total_litres_of_pure_alcohol']","f95b157a":"Cat_vars = df.drop(Num_vars, axis = 1).columns.tolist()\nCat_vars","8931cb1c":"Cat_vars_low = list(df[Cat_vars].loc[:, (df[Cat_vars].nunique() < 10)].nunique().index)\nCat_vars_high = list(df[Cat_vars].loc[:, (df[Cat_vars].nunique() >= 10)].nunique().index)","d6341f9e":"sns.set_theme(rc = {'grid.linewidth': 0.5,\n                    'axes.linewidth': 0.75, 'axes.facecolor': '#fff3e9', 'axes.labelcolor': '#6b1000',\n                    'figure.facecolor': '#f7e7da'})\n                    #'xtick.labelcolor': '#6b1000', 'ytick.labelcolor': '#6b1000'","51428568":"with plt.rc_context(rc = {'figure.dpi': 300, 'axes.labelsize': 8, \n                          'xtick.labelsize': 6, 'ytick.labelsize': 6}): \n    \n    fig_0, ax_0 = plt.subplots(2, 2, figsize = (8, 7))\n\n    for idx, (column, axes) in list(enumerate(zip(Num_vars, ax_0.flatten()))):\n        \n        sns.scatterplot(ax = axes, x = df[column], \n                        y = np.log(df['beer_servings']), \n                        hue =  np.log(df['beer_servings']),\n                        palette = 'viridis', alpha = 0.7, s = 8)\n    \n    # Get rid of legend\n    \n        axes.legend([], [], frameon = False)\n    \n    # Remove empty figures\n    \n    else:\n        [axes.set_visible(False) for axes in ax_0.flatten()[idx + 1:]]\n\nplt.tight_layout()\nplt.show()","6d0a74c1":"with plt.rc_context(rc = {'figure.dpi': 300, 'axes.labelsize': 8, \n                          'xtick.labelsize': 6, 'ytick.labelsize': 6}): \n    \n    fig_0, ax_0 = plt.subplots(2, 2, figsize = (8, 7))\n\n    for idx, (column, axes) in list(enumerate(zip(Num_vars, ax_0.flatten()))):\n        \n        sns.scatterplot(ax = axes, x = df[column], \n                        y = np.log(df['spirit_servings']), \n                        hue =  np.log(df['spirit_servings']),\n                        palette = 'viridis', alpha = 0.7, s = 8)\n    \n    # Get rid of legend\n    \n        axes.legend([], [], frameon = False)\n    \n    # Remove empty figures\n    \n    else:\n        [axes.set_visible(False) for axes in ax_0.flatten()[idx + 1:]]\n\nplt.tight_layout()\nplt.show()","a88c2d3b":"with plt.rc_context(rc = {'figure.dpi': 300, 'axes.labelsize': 8, \n                          'xtick.labelsize': 6, 'ytick.labelsize': 6}): \n    \n    fig_0, ax_0 = plt.subplots(2, 2, figsize = (8, 7))\n\n    for idx, (column, axes) in list(enumerate(zip(Num_vars, ax_0.flatten()))):\n        \n        sns.scatterplot(ax = axes, x = df[column], \n                        y = np.log(df['wine_servings']), \n                        hue =  np.log(df['wine_servings']),\n                        palette = 'viridis', alpha = 0.7, s = 8)\n    \n    # Get rid of legend\n    \n        axes.legend([], [], frameon = False)\n    \n    # Remove empty figures\n    \n    else:\n        [axes.set_visible(False) for axes in ax_0.flatten()[idx + 1:]]\n\nplt.tight_layout()\nplt.show()","143f7f0e":"with plt.rc_context(rc = {'figure.dpi': 300, 'axes.labelsize': 8, \n                          'xtick.labelsize': 6, 'ytick.labelsize': 6}): \n    \n    fig_0, ax_0 = plt.subplots(2, 2, figsize = (8, 7))\n\n    for idx, (column, axes) in list(enumerate(zip(Num_vars, ax_0.flatten()))):\n        \n        sns.scatterplot(ax = axes, x = df[column], \n                        y = np.log(df['total_litres_of_pure_alcohol']), \n                        hue =  np.log(df['total_litres_of_pure_alcohol']),\n                        palette = 'viridis', alpha = 0.7, s = 8)\n    \n    # Get rid of legend\n    \n        axes.legend([], [], frameon = False)\n    \n    # Remove empty figures\n    \n    else:\n        [axes.set_visible(False) for axes in ax_0.flatten()[idx + 1:]]\n\nplt.tight_layout()\nplt.show()","f3307399":"del_cols = ['country']\nds = df.drop(del_cols, axis=1)\nscaler = StandardScaler()\nscaler.fit(ds)\nscaled_features = pd.DataFrame(scaler.transform(ds),columns= ds.columns )","93f722ca":"scaled_features.head()","d0286d1d":"pca = PCA(n_components=3)\npca.fit(scaled_features)\nPCA_df = pd.DataFrame(pca.transform(scaled_features), columns=(['beer_servings','spirit_servings','wine_servings']))\nPCA_df.describe().T","e3748304":"x =PCA_df[\"beer_servings\"]\ny =PCA_df[\"spirit_servings\"]\nz =PCA_df[\"wine_servings\"]\n#To plot\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111, projection=\"3d\")\nax.scatter(x,y,z, c=\"magenta\", marker=\"o\" )\nax.set_title(\"A 3D Projection Of Data In The Reduced Dimension\")\nplt.show()","84d4224b":"from sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs\n\nfrom yellowbrick.cluster import KElbowVisualizer","a7d768a3":"model = KMeans()\nvisualizer = KElbowVisualizer(model, k=10)\n\nvisualizer.fit(PCA_df)        # Fit the data to the visualizer\nvisualizer.show()        # Finalize and render the figure","57aaf73e":"#Initiating the Agglomerative Clustering model \nAC = AgglomerativeClustering(n_clusters=4)\n# fit model and predict clusters\nAC_df = AC.fit_predict(PCA_df)\nPCA_df[\"Clusters\"] = AC_df\n#Adding the Clusters feature to the orignal dataframe.\ndf[\"Clusters\"]= AC_df","dd05174a":"#Plotting the clusters\nfig = plt.figure(figsize=(10,8))\nax = plt.subplot(111, projection='3d', label=\"bla\")\nax.scatter(x, y, z, s=40, c=PCA_df[\"Clusters\"], marker='o', cmap = 'viridis' )\nax.set_title(\"The Plot Of The Clusters\")\nplt.show()","c7c61878":"#Plotting countplot of clusters\npl = sns.countplot(x=df[\"Clusters\"])\npl.set_title(\"Distribution Of The Clusters\")\nplt.show()","98cbd8ef":"pl = sns.scatterplot(data = df,x=df[\"beer_servings\"], y=df[\"spirit_servings\"],hue=df[\"Clusters\"])\npl.set_title(\"Cluster's Profile Based On beer and spirit servings\")\nplt.legend()\nplt.show()","f9c41421":"pl = sns.scatterplot(data = df,x=df[\"beer_servings\"], y=df[\"wine_servings\"],hue=df[\"Clusters\"])\npl.set_title(\"Cluster's Profile Based On beer and wine servings\")\nplt.legend()\nplt.show()","3e47cf5b":"pl = sns.scatterplot(data = df,x=df[\"wine_servings\"], y=df[\"spirit_servings\"],hue=df[\"Clusters\"])\npl.set_title(\"Cluster's Profile Based On wine and spirit servings\")\nplt.legend()\nplt.show()","79bd8832":"plt.figure()\npl=sns.swarmplot(x=df[\"Clusters\"], y=df[\"beer_servings\"], color= \"#CBEDDD\", alpha=0.5 )\npl=sns.boxenplot(x=df[\"Clusters\"], y=df[\"beer_servings\"])\nplt.show()","f3228bdf":"#Plotting the total_litres_of_pure_alcohol\nplt.figure()\npl=sns.boxenplot(y=df[\"total_litres_of_pure_alcohol\"],x=df[\"Clusters\"])\npl.set_title(\"total_litres_of_pure_alcohol\")\nplt.show()","8692b471":"#### count of countries which serve less 100 units beer per person is 79","9681061b":"# Query 17 : Find all the countries with less than 10 units per person in wine servings","022e50ba":"#### Advanced Visualisation","b7d46a80":"#### We can see that morethan 100 countries are serving beer less than the mean of that column and less than 100 units per person","e9c12dd4":"# Query 13: Find the country which serves less units of spirit per person","ce828ce8":"# Query 31: Find the bottom 10 countries with total_litres_of_pure_alcohol","d37faf99":"# Exploratory Data Analysis using User Defined Function","7496c722":"# Query 28: Find the Country which serves less total_litres_of_pure_alcohol","9a6f6e9d":"# Data Visualisation using Autoviz","e1c01288":"# Visualisation of Query 17","b25a2b5f":"#### Morethan 100 countries serve less than 100 units per person of spirit ","30428724":"# Visualisation of Query 1","668452b2":"# Clustering","e5971d02":"# Query 29: Find the countries which has total_litres_of_pure_alcoholthan mean of its column","b6aff43f":"#### count of countries which serve less 100 units spirit per person is 125","dcbaf773":"# Query 15: Find the top 10 countries which serves more units of spirits per person","4866f285":"# UPVOTE IF U LIKE","2cfbbd28":"# Feature Scaling","4614bc97":"# Query 10 : Find all the countries with greather than 100 units per person in spirit servings","77033e23":"# Query 1 : Find all the countries with less than 100 units per person in beer servings","fb22003f":"# Count of Outliers using IQR method","ffaacf78":"# Query 5: Find the country which serves less units of beer per person","11ec824c":"# Query 24: Find the bottom 10 countries which serves less units of wine per person","2c3e523a":"# Data Visualisation with World Map","682cb8c6":"# PCA","7a23ada1":"# Query 16: Find the bottom 10 countries which serves less units of spirit per person","6b2c9578":"# Query 19 : Sort all the values of wine_servings and plot them","632cefe7":"# Visualisation of Query 10","540ab7f9":"# Query 2 : Find all the countries with greather than 100 units per person in beer servings","24617529":"# Query 9 : Find all the countries with less than 100 units per person in spirit servings","b45a32d7":"#### count of countries which serve less 6 litres of pure alocohol is 118","1eb01246":"#### We can see that some of countries in asia and africa has very less beer_servings","19304dad":"### Can anyone suggest me good notebooks in kaggle or any sources to learn more about Feature Engineering, Machine Learning algorithms, Deep learning Algorithms, Natural Language Processing","14ec6737":"# Data Visualisation","8fde273d":"# Query 6: Find the countries which has beer_servings greather than mean of its column","f501eba0":"# Visualisation of Query 9","adedad4f":"#### Most of the countries in africa and asia serve no win","4a54da90":"#### count of countries which serve less 10 units beer per person is 88","453d6207":"# Query 30: Find the top 10 countries with total_litres_of_pure_alcohol","d54c5191":"# Query 20: Find the Country which serves more units of wine per person","c2fa5fb1":"## From the above plot, it can be clearly seen that cluster 1 is our biggest set of countries closely followed by cluster 1","ad3caff5":"# Query 11 : Sort all the values of spirit_servings and plot them","00e5df13":"# Query 26 : Find all the countries with greather than 6 litres of pure alcohol","eb1dadfa":"# Analysis and Visualisation using Queries","072529c0":"#### Most of the countries in asia and africa serve lessthan 50 litres of pure alochol","66f1e9f0":"# Query 4: Find the Country which serves more units of beer per person","962c5d2a":"# Exploratory Data Analysis","0ecd57f0":"# Visualisation of Query 25","413922ac":"#### count of countries which serve less 100 units spirit per person is 64","544be8cb":"# Visualisation of Query 18","b2ca45c0":"# Query 22: Find the countries which has wine_servings greather than mean of its column","06356f24":"#### Countries in africa and asia serve less spirits","071e64e0":"#### Nambia, czeh republic, gabon, germany, poland are top 5 countries which produces more units of beer per person","d219ffb1":"# Loading DataSet","9675a7c0":"# Visualisation of Query 25","5bef4481":"## Scatter plots","52ec2f1b":"#### count of countries which serve greatherthan 6 litres of pure alocohol is 75","c67438d5":"# Query 33: Find the countries which has both wine_servings and total_litres_of_pure_alcohol greather than the median of their respective column simultaneously","82368a09":"# Query 32: Find top 5 contries in each column and plot grouped bar plot","e3f01055":"# Query 14: Find the countries which has spirit_servings greather than mean of its column","7ed78e5c":"# Query 25 : Find all the countries with less than 6 litres of pure alcohol","d9da1f59":"# Query 18 : Find all the countries with greather than 10 units per person in wine servings","7f3fc04e":"# Evaluating models","675dfbf5":"# Query 23: Find the top 10 countries which serves more units of wine per person","fe0f4740":"# Importing Libraries","c7393395":"# Query 26 : Sort all the values of total_litres_of_pure_alcohol and plot them","d1e97446":"# Query 3 : Sort all the values of beer_servings and plot them","1bb2c2c3":"# Query 12: Find the Country which serves more units of spirit per person","9d0e9325":"# Visualisation of Query 2","f4015766":"# Query 32: Find the countries which has both beer_servings and spirit_servings greather than the mean of their respective column simultaneously","f8764d40":"# Query 8: Find the bottom 10 countries which serves less units of beer per person","42707425":"#### count of countries which serve less 10 units wine per person is 103","d13b8e6a":"#### One intresting fact here is that country which has beer_savings with 0 has entire row zero except for countries cook islands and saudi arabia","fc28388c":"#### count of countries which serve less 100 units beer per person is 114","838586ac":"# Query 7: Find the top 10 countries which serves more units of beer per person","e2d561a1":"# Query 21: Find the country which serves less units of wine per person","c104cb7a":"# Query 27: Find the Country which serves more total_litres_of_pure_alcohol"}}