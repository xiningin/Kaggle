{"cell_type":{"ebc456e4":"code","42d21481":"code","08798a0a":"code","1e417460":"code","108aca74":"code","a5348b12":"code","308b0bf0":"code","8ac57888":"code","f5df27c2":"code","9db161d8":"code","f7b72b70":"code","120c2909":"code","f85a1307":"code","f82d1d39":"code","54d56d79":"code","60efaa50":"markdown","f2b387d9":"markdown","f2b7b837":"markdown","841753ba":"markdown","e2a3dea7":"markdown","6598b461":"markdown","d7a9013d":"markdown","be86237e":"markdown","35975e89":"markdown","27389055":"markdown","cd21de84":"markdown","9dda9a34":"markdown","a4b2ae55":"markdown","821ca7d4":"markdown","20b1cdec":"markdown","480e0d0e":"markdown","b6551d30":"markdown","0619be91":"markdown"},"source":{"ebc456e4":"from fastai.vision.all import *\nfrom fastai.tabular.all import *\nfrom fastai.medical.imaging import *","42d21481":"source = '..\/input\/rsna-str-pulmonary-embolism-detection'\nfiles = os.listdir(source)\nfiles","08798a0a":"df = pd.read_csv(f'{source}\/train.csv')\ndf.head()","1e417460":"get_x = lambda x:f'{source}\/train\/{x.StudyInstanceUID}\/{x.SeriesInstanceUID}\/{x.SOPInstanceUID}.dcm'\nget_y = ColReader('pe_present_on_image')\n\nblocks = (ImageBlock(cls=PILDicom), CategoryBlock)","108aca74":"set_seed(7)\npe = DataBlock(blocks=blocks,\n                get_x=get_x,\n                splitter=RandomSplitter(),\n                item_tfms=[Resize(512)],\n                get_y=get_y,\n                batch_tfms=aug_transforms(size=512))","a5348b12":"dls = pe.dataloaders(df[:1000], bs=16, n_workers=0)\ndls.show_batch(max_n=4, nrows=1, ncols=4, figsize=(20,20))","308b0bf0":"class LungWindow(PILBase):\n    _open_args,_tensor_cls,_show_args = {},TensorDicom,TensorDicom._show_args\n    @classmethod\n    def create(cls, fn:(Path,str,bytes), mode=None)->None:\n        if isinstance(fn,bytes): im = pydicom.dcmread(pydicom.filebase.DicomBytesIO(fn))\n        if isinstance(fn,(Path,str)): im = dcmread(fn)\n        scaled = np.array(im.windowed(l=-600, w=1500).numpy())*255\n        scaled = scaled.astype(np.uint8)\n        return cls(Image.fromarray(scaled))","8ac57888":"class PEWindow(PILBase):\n    _open_args,_tensor_cls,_show_args = {},TensorDicom,TensorDicom._show_args\n    @classmethod\n    def create(cls, fn:(Path,str,bytes), mode=None)->None:\n        if isinstance(fn,bytes): im = pydicom.dcmread(pydicom.filebase.DicomBytesIO(fn))\n        if isinstance(fn,(Path,str)): im = dcmread(fn)\n        scaled = np.array(im.windowed(l=100, w=700).numpy())*255\n        scaled = scaled.astype(np.uint8)\n        return cls(Image.fromarray(scaled))","f5df27c2":"class MedistinalWindow(PILBase):\n    _open_args,_tensor_cls,_show_args = {},TensorDicom,TensorDicom._show_args\n    @classmethod\n    def create(cls, fn:(Path,str,bytes), mode=None)->None:\n        if isinstance(fn,bytes): im = pydicom.dcmread(pydicom.filebase.DicomBytesIO(fn))\n        if isinstance(fn,(Path,str)): im = dcmread(fn)\n        scaled = np.array(im.windowed(l=40, w=400).numpy())*255\n        scaled = scaled.astype(np.uint8)\n        return cls(Image.fromarray(scaled))","9db161d8":"set_seed(7)\nlung = DataBlock(blocks=(ImageBlock(cls=LungWindow), CategoryBlock),\n                get_x=get_x,\n                splitter=RandomSplitter(),\n                item_tfms=[Resize(512)],\n                get_y=get_y,\n                batch_tfms=aug_transforms(size=512))\n\ndls = lung.dataloaders(df[:1000], bs=16, n_workers=0)\ndls.show_batch(max_n=4, nrows=1, ncols=4, figsize=(20,20))","f7b72b70":"set_seed(7)\npew = DataBlock(blocks=(ImageBlock(cls=PEWindow), CategoryBlock),\n                get_x=get_x,\n                splitter=RandomSplitter(),\n                item_tfms=[Resize(512)],\n                get_y=get_y,\n                batch_tfms=aug_transforms(size=512))\n\ndls = pew.dataloaders(df[:1000], bs=16, n_workers=0)\ndls.show_batch(max_n=4, nrows=1, ncols=4, figsize=(20,20))","120c2909":"set_seed(7)\nmed = DataBlock(blocks=(ImageBlock(cls=MedistinalWindow), CategoryBlock),\n                get_x=get_x,\n                splitter=RandomSplitter(),\n                item_tfms=[Resize(512)],\n                get_y=get_y,\n                batch_tfms=aug_transforms(size=512))\n\ndls = med.dataloaders(df[:1000], bs=16, n_workers=0)\ndls.show_batch(max_n=4, nrows=1, ncols=4, figsize=(20,20))","f85a1307":"blocks = (\n          ImageBlock(cls=LungWindow),\n          ImageBlock(cls=PEWindow),\n          ImageBlock(cls=MedistinalWindow),\n          CategoryBlock\n\n          )\n\ngetters = [\n          get_x,\n          get_x,\n          get_x,\n          ColReader('pe_present_on_image')\n          ]\n\nmultiimage = DataBlock(blocks=blocks,\n              getters=getters,\n              item_tfms=Resize(256),\n              batch_tfms=aug_transforms(size=256)\n              )","f82d1d39":"multiimage.summary(df[:1000])","54d56d79":"dls = multiimage.dataloaders(df[:1000], bs=16)\ndls.show_batch(max_n=8, figsize=(7,7))","60efaa50":"### Combining the Windows in a `DataBlock`","f2b387d9":"### PE","f2b7b837":"Having a look at the images with the customization","841753ba":"Specify the `x` and the `y` and the `blocks`. For the initial datablock I will use the default `PILDicom` class from `fastai`","e2a3dea7":"`summary` is a cool function you can use to see how the batches are collated in `fastai` or for catching any issues there may be in the `DataBlock`","6598b461":"### Medistinal","d7a9013d":"Lets have a look at how the images look in the `datablock` but we will use a smaller subset for testing","be86237e":"Out of the box the images do not look too good! I am going to make a few adjustments to `PILDicom` and use `fastai`s in built functionality of scaling pixels.  You can find out more about the `fastai.medical.imaging` module [here](https:\/\/github.com\/fastai\/fastai\/blob\/master\/nbs\/60_medical.imaging.ipynb)","35975e89":"The great thing about `fastai` is that it is highly customizable.  Here we create 3 window dicom classes to represent the 3 windows, `lung`, `pe` and `medistinal`","27389055":"### PILDicom customization","cd21de84":"creating `windowed` datablocks using fastai.  The specified windows used as based on this [discussion](https:\/\/www.kaggle.com\/c\/rsna-str-pulmonary-embolism-detection\/discussion\/182930). This kernel is purely looking at what the dicom images look like when using the 3 windows.\n\n`lung` window:\n![lung.PNG](attachment:lung.PNG)\n\n`PE` window:\n![lung_pe.PNG](attachment:lung_pe.PNG)\n\n`Mediastinal` window\n![lung_me.PNG](attachment:lung_me.PNG)","9dda9a34":"This version takes care of image inconsistencies found in previous versions","a4b2ae55":"Load the `train.csv`","821ca7d4":"### Lung","20b1cdec":"`set_seed` is an easy way in ensuring reproducibility","480e0d0e":"Medistinal window level=40, width=400","b6551d30":"PE window level=100, width=700","0619be91":"Lung window level=-600, width=1500"}}