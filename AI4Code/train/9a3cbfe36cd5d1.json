{"cell_type":{"c1bd9199":"code","7402bacf":"code","6a46cb15":"code","3fff2aa0":"code","b8405e9d":"code","66de810c":"code","34ecb521":"code","e9d255ae":"code","f0763209":"code","74e9c090":"code","8fb4bb92":"code","3eb60f58":"code","cbbc2d56":"code","d24ed4d3":"code","5d109578":"code","a8098916":"code","7106d7fd":"markdown","a2209bf5":"markdown","7a7205be":"markdown","1709f953":"markdown","02b2635e":"markdown","205dd712":"markdown","3c0c1676":"markdown","1cacf9ae":"markdown","14f5fa68":"markdown","9692c96e":"markdown","9d6aa8f6":"markdown","7f6a1393":"markdown","27c9c614":"markdown"},"source":{"c1bd9199":"from csv import reader as read\nhn = list(read(open(\"..\/input\/hacker-news-posts\/HN_posts_year_to_Sep_26_2016.csv\")))","7402bacf":"for row in hn[0:5]:\n    print(row,\"\\n\")","6a46cb15":"headers = hn[0]\nhn=hn[1:]\nprint(headers,\"\\n\")\nfor row in hn[:5]:\n    print(row,\"\\n\")","3fff2aa0":"ask_posts = []\nshow_posts = []\nother_posts = []\nfor row in hn:\n    title = row[1]\n    if (((title.lower()).startswith(\"ask hn\")) == True):\n        ask_posts.append(row)\n    elif(((title.lower()).startswith(\"show hn\")) == True):\n        show_posts.append(row)\n    else:\n        other_posts.append(row)","b8405e9d":"print(\"total posts: \",len(hn))","66de810c":"print(\"ask posts:\",len(ask_posts),\"- show posts:\",len(show_posts),\"- other posts:\",len(other_posts))","34ecb521":"#first we will find total comments for ask\ntotal_ask_comments = 0\nfor row in ask_posts:\n     total_ask_comments+=int(row[4])\n#then we will find average\navg_ask_comments = total_ask_comments\/len(ask_posts)\nprint(\"Average comments for ask:\",avg_ask_comments)","e9d255ae":"#Now we will find total comments for show\ntotal_show_comments=0\nfor row in show_posts:\n     total_show_comments+=int(row[4])\n#then we will find average\navg_show_comments = total_show_comments\/len(show_posts)\nprint(\"Average comments for show:\",avg_show_comments)","f0763209":"import datetime as dt\nresult_list=[]\n\nfor row in ask_posts:\n    temp=[]\n    temp.append(row[6])\n    temp.append(int(row[4]))\n    result_list.append(temp)\n    \ncounts_by_hour = {}\ncomments_by_hour={}","74e9c090":"for row in result_list:\n    temp = dt.datetime.strptime(row[0],\"%m\/%d\/%Y %H:%M\")\n    temp = temp.strftime(\"%H\")\n    if temp not in counts_by_hour:\n        counts_by_hour[temp]=1\n        comments_by_hour[temp] = row[1]\n    else:\n        counts_by_hour[temp]+=1\n        comments_by_hour[temp]+= row[1]\n    ","8fb4bb92":"avg_by_hour = []\nfor row in counts_by_hour:\n    avg_by_hour.append([row,comments_by_hour[row]\/counts_by_hour[row]])","3eb60f58":"for row in avg_by_hour:\n    print(row)","cbbc2d56":"swap_avg_by_hour =[]\nfor row in avg_by_hour:\n    swap_avg_by_hour.append([row[1],row[0]])\nfor row in swap_avg_by_hour:\n    print(row)","d24ed4d3":"sorted_swap = sorted(swap_avg_by_hour,reverse=True)","5d109578":"print(\"Top 5 Hours for Ask Posts Comments\")","a8098916":"for row in sorted_swap[:5]:\n    temp  = dt.datetime.strptime(row[1],\"%H\")\n    temp = temp.strftime(\"%H:%M\")\n    print(\"{a} : {b:.2f} average comments per post \".format(a=temp,b=row[0]))","7106d7fd":"** Although we now have the results we need, this format makes it hard to identify the hours with the highest values. Let's finish by sorting the list of lists and printing the five highest values in a format that's easier to read. **","a2209bf5":"** Return first five rows: **","7a7205be":"** As we can see people tend to comment more on ask posts . I think the results were expected because most of people will use comments to help someone instead of to really leave a comment on something **","1709f953":"### **Next, we'll determine if ask posts created at a certain time are more likely to attract comments. **","02b2635e":"** Open and read the file: **","205dd712":"** Next, we'll use these two dictionaries to calculate the average number of comments for posts created during each hour of the day. **\n","3c0c1676":"** Header row is in our dataset so we are going remove it. Then we will return header and first five rows**","1cacf9ae":"**TABLE COLUMNS**\n\n* id: The unique identifier from Hacker News for the post.\n\n* title: The title of the post.\n\n* url: The URL that the posts links to, if the post has a URL.\n\n* num_points: The number of points the post acquired, calculated as the total  number of upvotes minus the total number of downvotes.\n\n* num_comments: The number of comments that were made on the post.\n\n* author: The username of the person who submitted the post.\n\n* created_at: The date and time at which the post was submitted. ","14f5fa68":"** End **","9692c96e":"### **Next, let's determine if \"ask\" posts or \"show\" posts receive more comments on average.**","9d6aa8f6":"# Exploring hacker news dataset (dataquest exercise)","7f6a1393":"#### Number of posts","27c9c614":"### ** We're only concerned with post titles beginning with Ask HN or Show HN, we'll create new lists of lists containing just the data for those titles. **"}}