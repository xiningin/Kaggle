{"cell_type":{"f14ee162":"code","87573223":"code","08988720":"code","408143aa":"code","85beb56a":"code","380ac9c4":"code","9bfd6343":"code","b1c8b2cf":"code","ea0e2e3d":"code","4d50422f":"code","f4f1306f":"code","6d7f5c38":"code","19d56495":"code","61bc389d":"code","8456d182":"code","c59ef584":"code","103bdb61":"code","896df230":"markdown","a2f80950":"markdown","e2b3f3cc":"markdown","5e2cfddd":"markdown","7f38365a":"markdown","a2177a16":"markdown","bf04c585":"markdown","151ea7b3":"markdown","b76f6476":"markdown","61f74374":"markdown","05662487":"markdown","fe5ddc59":"markdown","0bce99c0":"markdown","8e4c8d10":"markdown"},"source":{"f14ee162":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","87573223":"data_train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')","08988720":"data_train.head()","408143aa":"dt = data_train[data_train['event_code']==4100]\ndt.head()","85beb56a":"data_specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\ndata_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')","380ac9c4":"data_labels.head()","9bfd6343":"print('---------------Train Data---------------')\nprint(data_train.info())\nprint('---------------Test Data---------------')\nprint(data_test.info())\nprint('---------------Labels Data---------------')\nprint(data_labels.info())","b1c8b2cf":"\nprint('---------------Train Data---------------')\nprint(data_train.isna().sum())\nprint('---------------Test Data---------------')\nprint(data_test.isna().sum())","ea0e2e3d":"print('---------------Train Data---------------')\nprint(data_train.installation_id.nunique())\nprint('---------------Test Data---------------')\nprint(data_test.installation_id.nunique())","4d50422f":"data_train.world.value_counts().plot(kind='bar')","f4f1306f":"grp = data_train.groupby(['world','title'])","6d7f5c38":"grp.size()","19d56495":"grp1 = data_train.query(\"event_code==4100 or event_code==4110\").groupby(['world','title'])","61bc389d":"grp1.size()","8456d182":"grp1.size().plot(kind='pie')","c59ef584":"grpt = data_train.groupby(['world','type'])\ngrpt.size()","103bdb61":"grpt.size().plot(kind='pie')","896df230":"### Let's see data information","a2f80950":"### Dataset is clean. No missing data!!!","e2b3f3cc":"### 'world' view 'type' wise","5e2cfddd":"### View rows in the data with event code 4100 *(row with Assessment detail)*\n","7f38365a":"### View top 5 records in the data","a2177a16":"### Below is view of the 'world' wise split of game session, basis popularity","bf04c585":"![DSB](https:\/\/github.com\/nadarsubash\/articles\/blob\/master\/dataScibowl.jpg?raw=true)","151ea7b3":"### Let's see the Data for all the assessment in the respective World","b76f6476":"### Magmapeak is by far the most played 'World'","61f74374":"### There are 17000 unique users in the Training Data Set & 1000 in Test Data\n","05662487":"### About the Dataset\n\n##### This Dataset include game analytics for the PBS KIDS Measure Up! app. In this app, children navigate a map and complete various levels, which may be activities, video clips, games, or assessments. Each assessment is designed to test a child's comprehension of a certain set of measurement-related skills.  \n\nThese are the main data files which contain the gameplay events.<br>\n\n**event_id** - Randomly generated unique identifier for the event type. Maps to event_id column in specs table.<br>\n**game_session** - Randomly generated unique identifier grouping events within a single game or video play session.<br>\n**timestamp** - Client-generated datetime<br>\n**event_data** - Semi-structured JSON formatted string containing the events parameters. Default fields are: event_count, event_code, and game_time; otherwise fields are determined by the event type.<br>\n**installation_id** - Randomly generated unique identifier grouping game sessions within a single installed application instance.<br>\n**event_count** - Incremental counter of events within a game session (offset at 1). Extracted from event_data.<br>\n**event_code** - Identifier of the event 'class'. Unique per game, but may be duplicated across games. E.g. event code '2000' always identifies the 'Start Game' event for all games. Extracted from event_data.<br>\n**game_time** - Time in milliseconds since the start of the game session. Extracted from event_data.<br>\n**title** - Title of the game or video.<br>\n**type** - Media type of the game or video. Possible values are: 'Game', 'Assessment', 'Activity', 'Clip'.<br>\n**world** - The section of the application the game or video belongs to. Helpful to identify the educational curriculum goals of the media. Possible values are: 'NONE' (at the app's start screen), TREETOPCITY' (Length\/Height), 'MAGMAPEAK' (Capacity\/Displacement), 'CRYSTALCAVES' (Weight).","fe5ddc59":"### Below is a view of *Assessment outcome* for each User (installation_id) per game_session","0bce99c0":"### Let's check if any blank cells","8e4c8d10":"### 'world' view Title wise"}}