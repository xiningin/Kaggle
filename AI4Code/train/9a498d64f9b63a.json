{"cell_type":{"8979287e":"code","6fbb8574":"code","c204349e":"code","65fd23ad":"code","183ad8cb":"code","22497350":"code","82513a42":"code","4eef94e3":"code","c682c246":"code","09258279":"code","4a0fa11b":"code","82e1ac38":"code","8c7b4169":"code","253d1056":"code","254d9e19":"code","cc8cad27":"code","8ab13745":"code","730ab4f1":"code","3213b993":"code","d08483c6":"code","c002c1ed":"code","af0c2f62":"code","17d02ab9":"code","47e707a3":"code","19859528":"code","015aac70":"code","81627ace":"code","a2707bc6":"code","f568e73a":"code","e2cf42ac":"code","50d37849":"code","e5a1bdbb":"code","df9a223e":"code","20dc06c8":"code","4c63db6e":"code","07379d7c":"code","98fd6667":"code","0aff879d":"markdown","40871c69":"markdown","33fa87d4":"markdown","f7d656ab":"markdown","0e597c4c":"markdown","e552daef":"markdown","bdce1692":"markdown","73f6bfc5":"markdown","66c7b0d8":"markdown","1e351632":"markdown","e72663e7":"markdown","e31b3dc0":"markdown","0c4c3a2d":"markdown"},"source":{"8979287e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nprint ('done')","6fbb8574":"train_data_initial = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col = 'Id')\ntrain_data_initial.head()","c204349e":"cols_with_missing = [col for col in train_data_initial.columns\n                     if train_data_initial[col].isnull().any()]\nfor col in cols_with_missing:\n    print (col, train_data_initial[col].isnull().sum())","65fd23ad":"train_data = train_data_initial.copy()","183ad8cb":"cols_with_big_amount_missing = ['Alley', 'PoolQC', 'Fence', 'MiscFeature']\nreduced_train_data = train_data.drop(cols_with_big_amount_missing, axis=1)","22497350":"s = (reduced_train_data.dtypes == 'object')\nobject_cols = list(s[s].index)\nprint(\"Categorical variables:\")\nprint(object_cols)","82513a42":"object_columns_with_missing_values = ['MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \n                                     'BsmtFinType2', 'Electrical', 'FireplaceQu', 'GarageType', 'GarageFinish',\n                                     'GarageQual', 'GarageCond']\nnumeric_columns_with_missing_values = ['LotFrontage', 'MasVnrArea', 'GarageYrBlt']","4eef94e3":"for col in object_columns_with_missing_values:\n    print (col, reduced_train_data[col].value_counts().idxmax())","c682c246":"for col in object_columns_with_missing_values: \n    reduced_train_data[col].fillna(value = reduced_train_data[col].value_counts().idxmax(), inplace = True)\nfor col in numeric_columns_with_missing_values:\n    reduced_train_data[col].fillna(value = reduced_train_data[col].median(), inplace = True)","09258279":"from sklearn.preprocessing import LabelEncoder\nlabel_reduced_train_data = reduced_train_data.copy()\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_reduced_train_data[col] = label_encoder.fit_transform(reduced_train_data[col])","4a0fa11b":"label_reduced_train_data.info()","82e1ac38":"import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","8c7b4169":"tf.__version__","253d1056":"df_val = label_reduced_train_data.sample(frac=0.2, random_state=0)\ndf_val","254d9e19":"df_train = label_reduced_train_data.drop(df_val.index)\ndf_train","cc8cad27":"def df_to_dataset(dataframe, target, shuffle=True, batch_size=50):\n  dataframe = dataframe.copy()\n  labels = dataframe.pop(target)\n  ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n  if shuffle:\n    ds = ds.shuffle(buffer_size=len(dataframe))\n  ds = ds.batch(batch_size)\n  return ds","8ab13745":"train_ds = df_to_dataset(dataframe=df_train, target='SalePrice')\nval_ds = df_to_dataset(dataframe=df_val, target='SalePrice')","730ab4f1":"for b in train_ds.take(1):\n    print(b)","3213b993":"from tensorflow import feature_column\n\nfeature_columns = []\n# numeric cols\nfor col in label_reduced_train_data.columns:\n  if col == 'SalePrice':\n    continue\n  feature_columns.append(feature_column.numeric_column(col, dtype=tf.float16)) \nfeature_columns","d08483c6":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.DenseFeatures(feature_columns))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1))","c002c1ed":"model.compile(loss='mae',\n                optimizer='Adam',\n                metrics=['mae'])","af0c2f62":"model.fit(train_ds, epochs=400, validation_data=val_ds)","17d02ab9":"model.summary()","47e707a3":"model.evaluate(val_ds)","19859528":"test_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')\ntest_data.head()","015aac70":"cols_with_missing_test = [col for col in test_data.columns\n                     if test_data[col].isnull().any()]\nfor col in cols_with_missing_test:\n    print (col, test_data[col].isnull().sum())","81627ace":"cols_with_big_amount_missing = ['Alley', 'PoolQC', 'Fence', 'MiscFeature']\nreduced_test_data = test_data.drop(cols_with_big_amount_missing, axis=1)","a2707bc6":"object_columns_test_with_missing_values = ['MasVnrType', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1', \n                                           'BsmtFinType2', 'GarageType', 'GarageFinish','GarageQual', 'GarageCond',\n                                           'MSZoning', 'Utilities', 'Exterior1st', 'Exterior2nd',\n                                           'KitchenQual', 'Functional', 'SaleType', 'FireplaceQu','BsmtCond']\nnumeric_columns_test_with_missing_values = ['LotFrontage', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n                                            'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', 'GarageYrBlt', \n                                            'GarageCars', 'GarageArea',]","f568e73a":"for col in object_columns_test_with_missing_values:\n    print (col, reduced_train_data[col].value_counts().idxmax())","e2cf42ac":"for col in object_columns_test_with_missing_values: \n    reduced_test_data[col].fillna(value = train_data_initial[col].value_counts().idxmax(), inplace = True)\nfor col in numeric_columns_test_with_missing_values:\n    reduced_test_data[col].fillna(value = train_data_initial[col].mean(), inplace = True)","50d37849":"s = (reduced_test_data.dtypes == 'object')\nobject_cols = list(s[s].index)\nprint(\"Categorical variables:\")\nprint(object_cols)","e5a1bdbb":"from sklearn.preprocessing import LabelEncoder\nlabel_reduced_test_data = reduced_test_data.copy()\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_reduced_train_data[col] = label_encoder.fit(train_data_initial[col].astype(str))\n    label_reduced_test_data[col] = label_encoder.transform(reduced_test_data[col].astype(str))\n    ","df9a223e":"label_reduced_test_data","20dc06c8":"preds = []\nfor i, r in label_reduced_test_data.iterrows():\n    input_dict = {name: tf.convert_to_tensor([value]) for name, value in r.items()}\n    # print(model.predict(input_dict)[0][0])\n    preds.append(model.predict(input_dict)[0][0]) ","4c63db6e":"preds = pd.Series(preds)\npreds","07379d7c":"output = pd.DataFrame({'Id': test_data.index,\n                       'SalePrice': preds})\noutput","98fd6667":"output.to_csv('submission.csv', index=False)\nprint('done!')","0aff879d":"# encode categorical columns in test data.","40871c69":"# drop columns wihich have high amount of missing values","33fa87d4":"# convert dataframe to tensor data","f7d656ab":"# load test data","0e597c4c":"# categorical varables in data","e552daef":"# load data","bdce1692":"# handle for missing values in test data.","73f6bfc5":"# drop columns with big amount of misssing.","66c7b0d8":"# knwing columns with missing values","1e351632":"# most fequent value in categorical columns.","e72663e7":"# encode categorical columns.","e31b3dc0":"# out put","0c4c3a2d":"# handle missing values."}}