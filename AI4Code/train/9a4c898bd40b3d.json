{"cell_type":{"1b3c988a":"code","2eaab229":"code","d954404e":"code","a8f5cae1":"code","f79d390e":"code","f9e75fa5":"code","b5964364":"code","f02776de":"markdown","defbf84d":"markdown","ef987ad9":"markdown","b5fa1b8f":"markdown","c59d8942":"markdown","e4bba2a8":"markdown","5361908c":"markdown","f0fc78c2":"markdown","79354873":"markdown"},"source":{"1b3c988a":"import os\nimport pandas as pd\ncities = pd.read_csv('..\/input\/cities.csv', index_col=['CityId'], nrows=None)\ncities = cities * 1000  # not sure if coords are rounded as concorde\ncities.head()","2eaab229":"%%bash -e\nwget http:\/\/akira.ruc.dk\/~keld\/research\/LKH\/LKH-2.0.9.tgz\ntar xvfz LKH-2.0.9.tgz\ncd LKH-2.0.9\nmake","d954404e":"def write_tsp(nodes, filename, name='traveling-santa-2018-prime-paths'):\n    # From https:\/\/www.kaggle.com\/blacksix\/concorde-for-5-hours.\n    with open(filename, 'w') as f:\n        f.write('NAME : %s\\n' % name)\n        f.write('COMMENT : %s\\n' % name)\n        f.write('TYPE : TSP\\n')\n        f.write('DIMENSION : %d\\n' % len(cities))\n        f.write('EDGE_WEIGHT_TYPE : EUC_2D\\n')\n        f.write('NODE_COORD_SECTION\\n')\n        for row in cities.itertuples():\n            f.write('%d %.11f %.11f\\n' % (row.Index + 1, row.X, row.Y))\n        f.write('EOF\\n')\n\nwrite_tsp(cities, '..\/working\/LKH-2.0.9\/cities.tsp')","a8f5cae1":"def write_parameters(parameters, filename='..\/working\/LKH-2.0.9\/params.par'):\n    with open(filename, 'w') as f:\n        for param, value in parameters:\n            f.write(\"{} = {}\\n\".format(param, value))\n    print(\"Parameters saved as\", filename)\n\nparameters = [\n    (\"PROBLEM_FILE\", \"cities.tsp\"),\n    (\"OUTPUT_TOUR_FILE\", \"tsp_solution.csv\"),\n    (\"SEED\", 2018),\n    ('CANDIDATE_SET_TYPE', 'POPMUSIC'), #'NEAREST-NEIGHBOR', 'ALPHA'),\n    ('INITIAL_PERIOD', 10000),\n    ('MAX_TRIALS', 1000),\n]\nwrite_parameters(parameters)","f79d390e":"%%bash -e\ncd .\/LKH-2.0.9\ntimeout 18000s .\/LKH params.par","f9e75fa5":"def read_tour(filename):\n    tour = []\n    for line in open(filename).readlines():\n        line = line.replace('\\n', '')\n        try:\n            tour.append(int(line) - 1)\n        except ValueError as e:\n            pass  # skip if not a city id (int)\n    return tour[:-1]\n\ntour = read_tour('..\/working\/LKH-2.0.9\/tsp_solution.csv')\nprint(\"Tour length\", len(tour))","b5964364":"import numpy as np\nimport sympy\n\ndef score_tour(tour):\n    df = cities.reindex(tour + [0]).reset_index()\n    primes = list(sympy.primerange(0, len(cities)))\n    df['prime'] = df.CityId.isin(primes).astype(int)\n    df['dist'] = np.hypot(df.X - df.X.shift(-1), df.Y - df.Y.shift(-1))\n    df['penalty'] = df['dist'][9::10] * (1 - df['prime'][9::10]) * 0.1\n    return df.dist.sum() + df.penalty.sum()\n\ndef write_submission(tour, filename):\n    assert set(tour) == set(range(len(tour)))\n    pd.DataFrame({'Path': list(tour) + [0]}).to_csv(filename, index=False)\n\nprint(\"Final score\", score_tour(tour))\nwrite_submission(tour, 'submission.csv')","f02776de":"Finally, we can print the score (considering prime twist) and write the submission file.","defbf84d":"<h2>3. Prepare inputs<\/h2>\n\nWe need to write a TSPLIB file and a parameters file to run LKH. ","ef987ad9":"<h2>2. Build LKH<\/h2>","b5fa1b8f":"Thanks for reading and merry christmas!","c59d8942":"<h2>4. Run and write submission<\/h2>\n\nI'm using a timeout to kill the process after 5 hours.","e4bba2a8":"For a full list of parameters check the [LKH User Guide](http:\/\/akira.ruc.dk\/~keld\/research\/LKH\/LKH-2.0\/DOC\/LKH-2.0_USER_GUIDE.pdf).  I've also created a [discussion here](https:\/\/www.kaggle.com\/c\/traveling-santa-2018-prime-paths\/discussion\/73694), since there are many options.","5361908c":"Read the output file and make a list (tour) of cities.","f0fc78c2":"<h2>1. Read files<\/h2>","79354873":"<h2>LKH 2.0.9<\/h2>\n\nLKH is an effective implementation of the Lin-Kernighan heuristic and is considered one of the best algorithms available for the TSP problem. Even though the algorithm is approximate, optimal solutions are produced with an impressively high frequency. It has been implemented in the programming language C and is distributed for academic and non-commercial use.\n\nIn this notebook I will show how to run LKH for this competition in a kernel environment. For more information please refer to [the official page](http:\/\/akira.ruc.dk\/~keld\/research\/LKH\/) or the [original paper](http:\/\/akira.ruc.dk\/~keld\/research\/LKH\/LKH-2.0\/DOC\/LKH_REPORT.pdf). \n\nNotes:\n\n* I'm not considering the prime penalty.\n* Internet must be enabled.\n\n\nAcknowledgments:  LKH author, [Keld Helsgaun](https:\/\/www.kaggle.com\/keldhelsgaun)."}}