{"cell_type":{"2ac7705b":"code","049618b6":"code","876ff604":"code","93971170":"code","5c31562f":"code","cd0e17b3":"code","a8c1b949":"code","ebc7c536":"code","f7c381e7":"code","e7cb4d5b":"code","8204d92a":"code","f64fda71":"code","41a3e162":"code","b6a885b9":"code","a14838d9":"code","f6d7b299":"code","d7ea4363":"code","00808b8e":"code","ded1a5e1":"code","37f1061d":"code","cb53e032":"code","5771d309":"code","ddd524ff":"code","838d1e8e":"markdown","f3a7a41d":"markdown","6158dea8":"markdown","44fc40be":"markdown","3e63a71b":"markdown"},"source":{"2ac7705b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","049618b6":"# Importing Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nsns.set_style('whitegrid')\n\n# Keras \nimport tensorflow as tf\nfrom tensorflow.keras import layers, models, preprocessing\n\nfrom pandas import set_option\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')","876ff604":"# Loading the dataset\ntrain = pd.read_csv('\/kaggle\/input\/gender-voice\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/gender-voice\/test.csv')","93971170":"print(train.shape)\ntrain.head()","5c31562f":"train.info()","cd0e17b3":"train.describe()","a8c1b949":"X = train.drop(['Id', 'label'], axis=1).values\ny = train.label.values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 9)\ny_train_oh = pd.get_dummies(y_train)\ny_test_oh = pd.get_dummies(y_test)","ebc7c536":"def build_model():\n    model = models.Sequential()\n    \n    # Layer 1\n    model.add(layers.Dense(512, activation='relu', input_shape=(20,)))\n    model.add(layers.Dropout(0.3))\n    \n    # Layer 2\n    model.add(layers.Dense(32, activation='relu'))\n    model.add(layers.Dropout(0.3))\n    \n    # Layer 3\n    model.add(layers.Dense(2, activation='softmax'))\n    \n    return model","f7c381e7":"model = build_model()\nmodel.summary()","e7cb4d5b":"# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","8204d92a":"# Setting variables\nEPOCHS = 200\nBATCH_SIZE = 20","f64fda71":"score = model.fit(X_train, y_train_oh, epochs = EPOCHS, batch_size = BATCH_SIZE, validation_data= (X_test, y_test_oh))","41a3e162":"# Test options and evaluation metric\nnum_folds = 10\nseed = 7\nscoring = 'accuracy'","b6a885b9":"# Spot checking \nmodels = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('SVM', SVC()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('KNN', KNeighborsClassifier()))\n\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits = num_folds, random_state=seed)\n    cv_results = cross_val_score(model, X_train, y_train, cv = kfold, scoring = scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f\"%(name, cv_results.mean())\n    print(msg)","a14838d9":"# Compare Algorithms\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","f6d7b299":"# Standardize the dataset\npipelines = []\npipelines.append(('ScaledLR', Pipeline([('Scaler', StandardScaler()), ('LR', LogisticRegression())])))\npipelines.append(('ScaledLDA', Pipeline([('Scaler', StandardScaler()), ('LDA', LinearDiscriminantAnalysis())])))\npipelines.append(('ScaledCART', Pipeline([('Scaler', StandardScaler()), ('CART', DecisionTreeClassifier())])))\npipelines.append(('ScaledSVM', Pipeline([('Scaler', StandardScaler()), ('SVM', SVC())])))\npipelines.append(('ScaledNB', Pipeline([('Scaler', StandardScaler()), ('NB', GaussianNB())])))\npipelines.append(('ScaledKNN', Pipeline([('Scaler', StandardScaler()), ('KNN', KNeighborsClassifier())])))\n\nresults = []\nnames = []\nfor name, model in pipelines:\n    kfold = KFold(n_splits = num_folds, random_state=seed)\n    cv_results = cross_val_score(model, X_train, y_train, cv = kfold, scoring = scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f\"%(name, cv_results.mean())\n    print(msg)","d7ea4363":"# Compare Algorithms\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","00808b8e":"# Tune Scaled KNN\nscaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\nparam_grid = dict(n_neighbors = np.array(range(1, 22, 2)))\nmodel = KNeighborsClassifier()\nkfold = KFold(n_splits = num_folds, random_state=seed)\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, scoring=scoring, cv = kfold)\ngrid_result = grid.fit(rescaledX, y_train)\n\n# Printing the best results\nprint('Best: %f using %s'%(grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstd = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, std, params):\n    print(\"%f (%f) with: %r\"%(mean, stdev, param))","ded1a5e1":"# Tuning SVM\nscaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\n\nc_values = [0.1, 0.3, 0.5,  0.7, 0.9, 1.0, 1.3, 1.5, 1.7, 2.0]\nkernel_values = ['linear', 'poly', 'rbf', 'sigmoid']\nparam_grid = dict(C = c_values, kernel = kernel_values)\n\nmodel = SVC()\nkfold = KFold(n_splits = num_folds, random_state=seed)\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, scoring=scoring, cv = kfold)\ngrid_result = grid.fit(rescaledX, y_train)\n\n# Printing the best results\nprint('Best: %f using %s'%(grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstd = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, std, params):\n    print(\"%f (%f) with: %r\"%(mean, stdev, param))","37f1061d":"# Ensembles\nensembles = []\nensembles.append(('ScaledAB', Pipeline([('Scaler', StandardScaler()), ('AB', AdaBoostClassifier())])))\nensembles.append(('ScaledGBM', Pipeline([('Scaler', StandardScaler()), ('GBM', GradientBoostingClassifier())])))\nensembles.append(('ScaledRF', Pipeline([('Scaler', StandardScaler()), ('RF', RandomForestClassifier())])))\nensembles.append(('ScaledET', Pipeline([('Scaler', StandardScaler()), ('ET', ExtraTreesClassifier())])))\nresults = []\nnames = []\nfor name, model in ensembles:\n    kfold = KFold(n_splits = num_folds, random_state = seed)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring =scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\"%(name, cv_results.mean(), cv_results.std())\n    print(msg)","cb53e032":"# Compare the algorithms\nfig = plt.figure()\nfig.suptitle('Scaled Ensemble Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","5771d309":"# Tuning GBM\nscaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\n\nparam_grid = dict(n_estimators = np.array(range(50, 401, 50)))\nmodel = GradientBoostingClassifier()\nkfold = KFold(n_splits=num_folds, random_state = seed)\ngrid = GridSearchCV(estimator=model, cv = kfold, scoring = scoring, param_grid = param_grid)\ngrid_result = grid.fit(rescaledX, y_train)\n\n# Printing the best results\nprint('Best: %f using %s'%(grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print('%f (%f) with: %r'%(mean, stdev, param))","ddd524ff":"# Preparing the model with SVM only coz GBM taking long time and not improving much\n# prepare the model\nscaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\nmodel = SVC(C=1.5)\nmodel.fit(rescaledX, y_train)\n\n# estimate accuracy on validation dataset\nrescaledValidationX = scaler.transform(X_test)\npredictions = model.predict(rescaledValidationX)\nprint(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","838d1e8e":"# Testing the Deep Learning Model - Very basic 3 layers network","f3a7a41d":"# Spot Checking all the basic ML algorthims\nIn this notebook, we are not going to do any feature enginnering or EDA. We are just evaluating different ML models.\n\nThe ML models covered here - \n- Logistic Regression\n- KNN\n- Support Vector Machines\n- Decision Trees\n- Linear Discriminant Analysis\n- Naive Bayes\n\n**Ensemble Models**\n- Random Forest Classifier\n- Ada Boost Classifier\n- Graident Boost Clasifier\n- Extra Trees Classifier\n\n**Nueral Network**\n- 3 layer ANN , *almost no hyperparameter tuning*","6158dea8":"We are getting 95% accuracy.","44fc40be":"## Spot Checking","3e63a71b":"# Testing the Machine Learning Algorithms"}}