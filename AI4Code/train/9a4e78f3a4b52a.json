{"cell_type":{"625face5":"code","2b145b29":"code","c3eea81e":"code","b1637acc":"code","9934227e":"code","1695c29c":"code","46b3c2b7":"code","fcd786b7":"code","7e97a8c6":"code","3422d898":"code","36ce3f88":"code","24e5c2dd":"code","89aa74ef":"code","b7513be6":"code","b90d11d2":"markdown","f0b0274d":"markdown","4f2dc667":"markdown","78de931a":"markdown","d1bf4b01":"markdown","b04f8461":"markdown","ca93b337":"markdown","2e1cfd82":"markdown"},"source":{"625face5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b145b29":"df = pd.read_csv('..\/input\/building-permit-applications-data\/Building_Permits.csv')\ndf.head()","c3eea81e":"df.shape\n#DataSet has 43 Rows :-\n#Site Permit ---> Target Variable","b1637acc":"#droping missing values rows\ndf.dropna()","9934227e":"df_loc = df[['Block','Lot','Street Number','Street Number Suffix','Street Name','Street Suffix','Unit','Unit Suffix','Neighborhoods - Analysis Boundaries','Location','Zipcode','Site Permit']]\ndf_loc.head()","1695c29c":"df_loc.info()","46b3c2b7":"(df_loc.isnull().sum()\/len(df)*100).sort_values(ascending=False)","fcd786b7":"print(df['Site Permit'].unique())\n#Y = Yes\n#nan = No <-- we replace nan here with 'N'","7e97a8c6":"df_loc['Site Permit'] = df_loc['Site Permit'].replace(to_replace=np.nan , value='N')","3422d898":"df_loc['Site Permit'].unique()","36ce3f88":"# filling Null Values\ndf_loc_null = df_loc.fillna(method='bfill',axis = 0).fillna(0)","24e5c2dd":"df_loc_null.isnull().sum()","89aa74ef":"df_num = df_loc_null._get_numeric_data()\ndf_num.head()","b7513be6":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfor i in df_num:\n    plt.figure(figsize=(10,5))\n    sns.boxplot(x=df_num[i])\n    plt.show()\n    df_num[i].skew()","b90d11d2":"# Outlier Detection:-","f0b0274d":"We drop Columns 'Street Number Suffix','Unit','Unit Suffix' as it has more than 95% of NULL Values\n\nWe Use Use BackWard Fill Method to Impute the Null Values.","4f2dc667":"* The numeric columns in Location Sections has outliers which needs to be treated:-*","78de931a":"# ****Reading DataSet:-****","d1bf4b01":"# **Dividing DataSet in to Location Details with Target Variable (Site Permit) :-**","b04f8461":"***b) Missing value imputation :-***","ca93b337":"***a) Treating Target Variable:-***","2e1cfd82":"# Finding percentage of Null Values:-****"}}