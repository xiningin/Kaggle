{"cell_type":{"ac16515d":"code","534f2725":"code","9a39ddcc":"code","b147cbc7":"code","98b891b3":"code","890acd73":"code","f63627aa":"code","b7e07e90":"code","a8ec2194":"code","c1c23ba8":"code","e8603681":"code","b19a4743":"code","7fc9aab8":"code","65c4fe5b":"code","6e280e4d":"code","8a81383b":"code","ee68ded7":"code","ef07933b":"code","dd7ccd4c":"code","e2521f82":"code","8043899b":"code","b9cc842a":"code","2e654eb2":"code","f7112346":"code","2fd94d14":"code","5a00d150":"code","cc0e731b":"code","e9cbe920":"code","528db164":"code","58d6a1ea":"code","ad167fe8":"code","b5b24a29":"code","fd0e8ffe":"markdown","2e8364ba":"markdown","99a9aa78":"markdown","d072cdb3":"markdown","98676d54":"markdown","e42e3232":"markdown","afef9220":"markdown","b2ec329c":"markdown","fdf95966":"markdown"},"source":{"ac16515d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","534f2725":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport scipy.stats as stats\nfrom scipy.stats import norm, skew\nimport statsmodels.api as plt\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\nimport xgboost as XGB\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\nimport sklearn\n\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, mean_squared_log_error\n\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")\n","9a39ddcc":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\ntrain.info()","b147cbc7":"train.shape","98b891b3":"# target \n\ntarget = train['SalePrice']\nprint (target.describe())","890acd73":"# check the skewness\n\nsns.distplot(target)","f63627aa":"skew = target.skew()\nkurt = target.kurt()\n\nprint (\"Skewness: %f\" %skew)\nprint (\"Kurtosis: %f\" %kurt)","b7e07e90":"# log transformation \n\ntarget_transform = np.log1p(target)\nsns.distplot(target, fit=norm);","a8ec2194":"# correlation matrix for features.\n\ncorr_mat = train.corr()\nf, ax = plt.subplots(figsize=(12,9))\nsns.heatmap(corr_mat, vmax = .8, square = True)","c1c23ba8":"high_corr = train.corr()\nhigh_corr_features = high_corr.index[abs(high_corr[\"SalePrice\"])>0.5]\n\nplt.figure(figsize=(10,10))\nmat = sns.heatmap(train[high_corr_features].corr(), annot=True, cmap=\"RdYlGn\")","e8603681":"corr_SalePrice = pd.Series(high_corr[\"SalePrice\"].sort_values(ascending=False))\nfeatures = corr_SalePrice[corr_SalePrice.between(0.55, 1)]\nprint (features)\n\nfeatures = features.index","b19a4743":"features","7fc9aab8":"y_train = train['SalePrice']\ntest_id = test['Id']\nfull_data = pd.concat([train, test], axis = 0, sort=False)\nfull_data = full_data.drop(['Id', 'SalePrice'], axis = 1)","65c4fe5b":"full_data.head()","6e280e4d":"total_null = full_data.isnull().sum().sort_values(ascending=False)\npercent = (full_data.isnull().sum()\/full_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total_null, percent], axis=1, keys=['Total','Percent'])\n\nmissing_data.head(20)","8a81383b":"full_data.drop((missing_data[missing_data['Total'] > 5]).index, axis=1, inplace = True)\nprint (full_data.isnull().sum().max())","ee68ded7":"total = full_data.isnull().sum().sort_values(ascending=False)\ntotal.head(20)","ef07933b":"full_data.shape","dd7ccd4c":"numeric_missed = ['BsmtFinSF1',\n                  'BsmtFinSF2',\n                  'BsmtUnfSF',\n                  'TotalBsmtSF',\n                  'BsmtFullBath',\n                  'BsmtHalfBath',\n                  'GarageArea',\n                  'GarageCars']\n\nfor features in numeric_missed:\n    full_data[features] = full_data[features].fillna(0)","e2521f82":"categorical_missed = ['Exterior1st',\n                  'Exterior2nd',\n                  'SaleType',\n                  'MSZoning',\n                   'Electrical',\n                     'KitchenQual']\n\nfor feature in categorical_missed:\n    full_data[feature] = full_data[feature].fillna(full_data[feature].mode()[0])","8043899b":"full_data['Functional'] = full_data['Functional'].fillna('Type')\n","b9cc842a":"full_data.drop(['Utilities'], axis = 1, inplace=True)","2e654eb2":"full_data = pd.get_dummies(full_data)","f7112346":"full_data.isnull().sum().max()","2fd94d14":"from scipy.stats import skew\n\nnumeric = full_data.dtypes[full_data.dtypes != 'object'].index\nskewed = full_data[numeric].apply(lambda col: skew(col)).sort_values(ascending=False)\nskewed = skewed[abs(skewed) > 0.5]\n\nfor col in skewed.index:\n    full_data[col] = np.log1p(full_data[col])","5a00d150":"full_data['TotalSF'] = full_data['TotalBsmtSF'] + full_data['1stFlrSF'] + full_data['2ndFlrSF']","cc0e731b":"x_train = full_data[:len(y_train)]\nx_test = full_data[len(y_train):]","e9cbe920":"x_train.shape, x_test.shape","528db164":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\n\n\n# def rmse():\n#     return mean_squared_error(y_actual, y_predicted, squared=False)","58d6a1ea":"\n\nmodel_xgb = XGB.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468,\n                        learning_rate=0.05, max_depth=3, \n                        min_child_weight=1.7817, n_estimators=2200,\n                        reg_alpha=0.4640, reg_lambda= 0.8571,\n                        subsample=0.5213, random_state=7, nthread=-1)\nmodel_xgb.fit(x_train,y_train)\n\n","ad167fe8":"y_predict = model_xgb.predict(x_test)\n\n\n# y_predict_las = las.predict(x_test)\n\ny_predict","b5b24a29":"submission_xgb1 = pd.DataFrame()\nsubmission_xgb1['Id'] = test_id\nsubmission_xgb1['SalePrice'] = y_predict\nsubmission_xgb1.to_csv('mysubmission_xgb1.csv', index=False)\n\n","fd0e8ffe":"# **Data Modeling - XGBoost**","2e8364ba":"# **Import Libraries**","99a9aa78":"# **Features**","d072cdb3":"# **Submission**","98676d54":"# **Data Cleaning**","e42e3232":"* It's important to know what you do and how benefit from it. We can see 'OverQual' in the top of highest correlation it's 0.79!\n* 'GarageCars' & 'GarageArea' like each other (correlation between them is 0.88)\n* 'TotalBsmtSF' & '1stFlrSF' also like each other (correlation betwwen them is 0.82), so we can keep either one of them or add the1stFlrSF to the Toltal.\n* 'TotRmsAbvGrd' & 'GrLivArea' also has a strong correlation (0.83), I decided to keep 'GrLivArea' because it's correlation with 'SalePrice' is higher.","afef9220":"# Housing Price Prediction - Advanced Regression Techniques. Score = 0.13275\n\nWe will be using advanced Regression techniques to predict the housing sales price with maximum accuracy.  \n\nStructure of the Machine Learning project will be used as below.\n\n    Exploratory Data Analysis\n    Data Visualization \n    Data Preprocessing \n    Feature Engineering\n    Data Modeling\n    Hyperparamter Optimization\n    Submission ","b2ec329c":"# **Exploratory Data Analysis**","fdf95966":"# **Import Data**"}}