{"cell_type":{"0f8b18be":"code","bcc8b777":"code","21240df1":"code","815637a3":"code","eff2cac1":"code","d8632036":"code","2399fceb":"code","a1b44f4e":"code","59cef1d8":"code","7fccbbd3":"code","9f1788f5":"code","27761271":"code","a81fe1fa":"code","06e4a03e":"code","5b9e5686":"code","b13368eb":"code","d9a2f757":"code","8581da34":"code","b47591ca":"code","8d126f85":"code","05a1f19f":"code","50e21c17":"code","819ec58f":"code","9fdc22ec":"code","799014bc":"code","3867e98a":"code","cbaa8b6f":"code","31f80226":"code","b88f2845":"code","0edb233c":"code","b3cccf8a":"code","40e18a57":"code","e9b9447b":"code","639b7625":"code","a94126a6":"code","eaf22add":"code","f92e8701":"code","6e2a0e9d":"code","8a77eb50":"code","e243f01b":"code","02c73a4d":"code","38baca2d":"code","ec05fd00":"code","6690b22c":"code","4531f7a4":"code","2677ad1e":"code","03d9c53a":"code","a1142e2a":"code","24e50309":"code","3d8bad3d":"code","d7035819":"code","cfc9e093":"code","8d119024":"code","2d7d40b3":"code","e66dc9ac":"code","ebb2dc2f":"code","a9163ee1":"code","5b20ba67":"code","201c6906":"code","f636946b":"code","f837d634":"markdown","5985c7d4":"markdown","cd925065":"markdown","bf1c63ea":"markdown","5b2c907f":"markdown","996f3ee0":"markdown","0d0120f9":"markdown","3508f2fa":"markdown","8d72fc8d":"markdown","7e4ac230":"markdown","0b5dbe64":"markdown","fdbc804a":"markdown","a3cd579a":"markdown","9b902966":"markdown","d0d26fe4":"markdown","756c7f7d":"markdown","6146f982":"markdown","28e00417":"markdown","956afdf5":"markdown","5e413d4b":"markdown","3e71ddd9":"markdown","c73a2219":"markdown","aef1ddd8":"markdown","3163d613":"markdown","e51e29b1":"markdown","f2f583ad":"markdown","c165d32e":"markdown","2efab6f6":"markdown","10e0bfd7":"markdown","9e0fd299":"markdown","43074460":"markdown","5bf0020d":"markdown","56fd7ef1":"markdown","993aeb70":"markdown"},"source":{"0f8b18be":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"ticks\", color_codes=True)","bcc8b777":"df = pd.read_csv('..\/input\/hospital_data.csv')\ndf.head()","21240df1":"df = df.drop('Unnamed: 0', axis=1)\ndf.shape","815637a3":"df.dtypes","eff2cac1":"def missing_values(df):\n    missing_val = df.isnull().sum()\n    missing_val_percent = missing_val * 100 \/ len(df)\n    missing_val_table = pd.concat([missing_val, missing_val_percent], axis=1)\n    missing_val_table = missing_val_table.rename(columns={0 : 'Missing Values', 1 : '% of Total Values'})\n    return missing_val_table","d8632036":"missing_vals = missing_values(df)\nmissing_vals.sort_values(by=['% of Total Values'], ascending=False).head()","2399fceb":"df = df.rename(columns={\"Mortality Y \/ N\": \"Mortality\"})","a1b44f4e":"plt.figure(figsize=(8,6))\nsns.countplot(x='Mortality', data=df, order= df['Mortality'].value_counts().index)\nplt.title('Mortality count')\nplt.show()","59cef1d8":"df.loc[df['Mortality'] == 'NO', 'Mortality'] = 0\ndf.loc[df['Mortality'] == 'YES', 'Mortality'] = 1\ndf['Mortality'] = df['Mortality'].astype('int64')","7fccbbd3":"# no. of unique vals in object type cols\ndf.select_dtypes('object').apply(pd.Series.nunique, axis=0)","9f1788f5":"df.loc[(df['SEX'] == 'MALE') , 'SEX'] = 'Male'\ndf.loc[(df['SEX'] == 'FEMALE'), 'SEX'] = 'Female'\ndf.loc[(df['SEX'] == 'Male(Child)'), 'SEX'] = 'Boy'\ndf.loc[(df['SEX'] == 'Female(Child)'), 'SEX'] = 'Girl'","27761271":"sns.catplot(x=\"SEX\", y=\"AGE\", hue=\"Mortality\", kind=\"box\", data=df)\nplt.title('Age plot wrt Sex & Mortality')\nplt.show()","a81fe1fa":"# Using AGE col for plotting purpose since it will have the range of ages, the col will be dropped during training\ndf['Age'] = df['AGE']\n\ndf.loc[df['Age'] == 0, 'Age'] = 5\ndf.loc[(df['Age'] > 100), 'AGE'] = 100","06e4a03e":"df.loc[df['AGE'] <= 10, 'AGE'] = 10\ndf.loc[(df['AGE'] > 10) & (df['AGE'] <= 20), 'AGE'] = 20\ndf.loc[(df['AGE'] > 20) & (df['AGE'] <= 30), 'AGE'] = 30\ndf.loc[(df['AGE'] > 30) & (df['AGE'] <= 40), 'AGE'] = 40\ndf.loc[(df['AGE'] > 40) & (df['AGE'] <= 50), 'AGE'] = 50\ndf.loc[(df['AGE'] > 50) & (df['AGE'] <= 60), 'AGE'] = 60\ndf.loc[(df['AGE'] > 60) & (df['AGE'] <= 70), 'AGE'] = 70\ndf.loc[(df['AGE'] > 70) & (df['AGE'] <= 80), 'AGE'] = 80\ndf.loc[(df['AGE'] > 80) & (df['AGE'] <= 90), 'AGE'] = 90\ndf.loc[(df['AGE'] > 90), 'AGE'] = 100","5b9e5686":"plt.figure(figsize=(12, 6))\nsns.countplot(x=\"AGE\", data=df, order=df['AGE'].value_counts().index)\nplt.title(\"AGE count\")","b13368eb":"temp_df = df.groupby(['Mortality', 'AGE'])['AGE'].count().unstack(['AGE'])\ntemp_df.head()","d9a2f757":"sns.catplot(x='AGE', col='Mortality', hue='SEX', data=df,order=df['AGE'].value_counts().index, kind='count', height=8, aspect=.7)","8581da34":"plt.figure(figsize=(12, 6))\nsns.catplot(x=\"SEX\", kind=\"count\", data=df, order=df['SEX'].value_counts().index)\nplt.title(\"SEX count\")","b47591ca":"temp_df = df.groupby(['Mortality', 'SEX'])['SEX'].count().unstack('Mortality')\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(12,8))\nplt.title('SEX vs Mortality plot')\nplt.show()","8d126f85":"temp_df = df.groupby(['Mortality', 'AGE', 'SEX'])['SEX'].count().unstack(['Mortality']).reset_index()\ntemp_df.columns = ['AGE', 'SEX', '0', '1']\ntemp_df.sort_values(by='0', ascending=False).head()","05a1f19f":"sns.catplot(x='SEX', col='Mortality', hue='AGE', data=df, kind='count', height=8, aspect=.7)","50e21c17":"plt.figure(figsize=(6,4))\nplt.scatter(range(df.shape[0]), np.sort(df['PREAUTH_AMT']))\nplt.xlabel('Index')\nplt.ylabel('PREAUTH_AMT')\nplt.show()","819ec58f":"upper_limit = np.percentile(df['PREAUTH_AMT'], 99)\ndf.loc[(df['PREAUTH_AMT'] > upper_limit), 'PREAUTH_AMT'] = upper_limit","9fdc22ec":"plt.figure(figsize=(12, 8))\nsns.catplot(x=\"SEX\", y=\"PREAUTH_AMT\", hue=\"Mortality\", kind=\"box\", data=df)\nplt.title('PREAUTH_AMT plot wrt Sex & Mortality')\nplt.show()","799014bc":"plt.figure(figsize=(6,4))\nplt.scatter(range(df.shape[0]), np.sort(df['CLAIM_AMOUNT']))\nplt.xlabel('Index')\nplt.ylabel('CLAIM_AMOUNT')\nplt.show()","3867e98a":"upper_limit = np.percentile(df['CLAIM_AMOUNT'], 99)\ndf.loc[(df['CLAIM_AMOUNT'] > upper_limit), 'CLAIM_AMOUNT'] = upper_limit","cbaa8b6f":"sns.catplot(x=\"SEX\", y=\"CLAIM_AMOUNT\", hue=\"Mortality\", kind=\"box\", data=df)\nplt.title('CLAIM_AMOUNT plot wrt Sex & Mortality')\nplt.show()","31f80226":"temp_df = df.groupby(['Mortality', 'CASTE_NAME'])['CASTE_NAME'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(8, 8))\nplt.title('CASTE_NAME vs Mortality plot')\nplt.show()","b88f2845":"sns.catplot(x='CASTE_NAME', col='Mortality', hue='AGE', data=df, kind='count', height=8, aspect=.7)","0edb233c":"temp_df = df.groupby(['CASTE_NAME', 'AGE'])['CASTE_NAME'].count().unstack(['AGE'])\ntemp_df.plot.bar(rot=0, figsize=(25, 8))\nplt.title('Ages with respect to diff caste groups')\nplt.show()","b3cccf8a":"temp_df = df.groupby(['CATEGORY_CODE', 'Mortality'])['CATEGORY_CODE'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(25, 12))\nplt.title('CATEGORY_CODE vs Mortality plot')\nplt.show()","40e18a57":"temp_df = df.groupby(['CATEGORY_NAME', 'Mortality'])['CATEGORY_NAME'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=90, figsize=(25, 12))\nplt.title('CATEGORY_NAME vs Mortality plot')\nplt.show()","e9b9447b":"temp_df = df.groupby(['DISTRICT_NAME', 'Mortality'])['DISTRICT_NAME'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(25, 12))\nplt.title('DISTRICT_NAME vs Mortality plot')\nplt.show()","639b7625":"df = df.drop(['DISTRICT_NAME'], axis=1)","a94126a6":"temp_df = df.groupby(['HOSP_TYPE', 'Mortality'])['HOSP_TYPE'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(8, 6))\nplt.title('HOSP_TYPE vs Mortality plot')\nplt.show()","eaf22add":"temp_df = df.groupby(['HOSP_DISTRICT', 'Mortality'])['HOSP_DISTRICT'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=30, figsize=(12, 8))\nplt.title('HOSP_DISTRICT vs Mortality plot')\nplt.show()","f92e8701":"temp_df = df.groupby(['SRC_REGISTRATION', 'Mortality'])['SRC_REGISTRATION'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(8, 6))\nplt.title('SRC_REGISTRATION vs Mortality plot')\nplt.show()","6e2a0e9d":"df = df.drop(['MORTALITY_DATE'], axis=1)","8a77eb50":"df.loc[(df['DISCHARGE_DATE'].isnull()) , 'DISCHARGE_DATE'] = '0\/0\/0000 0:00'","e243f01b":"df['PREAUTH_DATE'] = pd.to_datetime(df['PREAUTH_DATE'])\ndf['CLAIM_DATE'] = pd.to_datetime(df['CLAIM_DATE'])\ndf['SURGERY_DATE'] = pd.to_datetime(df['SURGERY_DATE'])\ndf['DISCHARGE_DATE'] = pd.to_datetime(df['DISCHARGE_DATE'], errors = 'coerce')\n\ndf['PREAUTH_Month'] = df['PREAUTH_DATE'].dt.month\ndf['PREAUTH_Year'] = df['PREAUTH_DATE'].dt.year\n\ndf['CLAIM_Month'] = df['CLAIM_DATE'].dt.month\ndf['CLAIM_Year'] = df['CLAIM_DATE'].dt.year\n\ndf['SURGERY_Month'] = df['SURGERY_DATE'].dt.month\ndf['SURGERY_YEAR'] = df['SURGERY_DATE'].dt.year\n\ndf['DISCHARGE_Month'] = df['DISCHARGE_DATE'].dt.month\ndf['DISCHARGE_YEAR'] = df['DISCHARGE_DATE'].dt.year","02c73a4d":"df.loc[(df['DISCHARGE_YEAR'].isnull()) , 'DISCHARGE_YEAR'] = round(df['DISCHARGE_YEAR'].mean(), 0)\ndf.loc[(df['DISCHARGE_Month'].isnull()) , 'DISCHARGE_Month'] = round(df['DISCHARGE_Month'].mean(), 0)","38baca2d":"df = df.drop(['PREAUTH_DATE', 'CLAIM_DATE', 'SURGERY_DATE', 'DISCHARGE_DATE'], axis=1)","ec05fd00":"pd.crosstab(df['SURGERY_YEAR'], df['Mortality']).T","6690b22c":"temp_df = df.groupby(['Mortality', 'SURGERY_YEAR'])['SURGERY_YEAR'].count().unstack('SURGERY_YEAR')\ntemp_df = temp_df.T\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(8,6))","4531f7a4":"plt.figure(figsize=(12, 6))\nsns.countplot(x=\"SURGERY_Month\", hue='Mortality', data=df, order= df['SURGERY_Month'].value_counts().index)\nplt.title(\"Months of Surgery\")","2677ad1e":"df = df.drop(['SURGERY_Month', 'CLAIM_Month', 'PREAUTH_Month', 'DISCHARGE_Month', 'AGE'], axis=1)","03d9c53a":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ncat_cols = [col for col in df.columns if df[col].dtype == 'object']\nfor col in cat_cols:\n    df[col] = le.fit_transform(df[col])","a1142e2a":"X = df.drop('Mortality', axis=1)\ny = df['Mortality']","24e50309":"from sklearn.preprocessing import StandardScaler\n\nX = StandardScaler().fit_transform(X)","3d8bad3d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=42)","d7035819":"sns.countplot(y_train)","cfc9e093":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE(random_state=9)\nX_train, y_train = smote.fit_sample(X_train, y_train)\n\nsns.countplot(y_train)","8d119024":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\n\nlog_reg = LogisticRegression(C=1, random_state=17, solver='liblinear')\n\nc_values = np.logspace(-2, 2, 20)\n\nclf = GridSearchCV(estimator=log_reg, param_grid={'C': c_values}, scoring='roc_auc', n_jobs=1, cv=5, verbose=1)\n\nclf.fit(X_train, y_train)\n# clf.best_params_\n\ny_pred = clf.predict(X_test)\n\nprint(accuracy_score(y_test, y_pred))","2d7d40b3":"df.shape","e66dc9ac":"\n  \n# training the model on training set \nfrom sklearn.naive_bayes import GaussianNB \ngnb = GaussianNB() \ngnb.fit(X_train, y_train) \n  \n# making predictions on the testing set \ny_pred = gnb.predict(X_test) \n  \n# comparing actual response values (y_test) with predicted response values (y_pred) \nfrom sklearn import metrics \nprint(\"Gaussian Naive Bayes model accuracy(in %):\", metrics.accuracy_score(y_test, y_pred)*100)","ebb2dc2f":"from xgboost import XGBClassifier\nxgb = XGBClassifier(n_estimators=100)\nxgb.fit(X_train, y_train)\npreds = xgb.predict(X_test)\nacc_xgb = (preds == y_test).sum().astype(float) \/ len(preds)*100\nprint(\"XGBoost's prediction accuracy is: %3.2f\" % (acc_xgb))","a9163ee1":"from sklearn.svm import SVC\nsvc = SVC()\n# training_start = time.perf_counter()\nsvc.fit(X_train, y_train)\n# training_end = time.perf_counter()\n# prediction_start = time.perf_counter()\npreds = svc.predict(X_test)\n# prediction_end = time.perf_counter()\nacc_svc = (preds == y_test).sum().astype(float) \/ len(preds)*100\n# svc_train_time = training_end-training_start\n# svc_prediction_time = prediction_end-prediction_start\nprint(\"Scikit-Learn's Support Vector Machine Classifier's prediction accuracy is: %3.2f\" % (acc_svc))\n","5b20ba67":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report \n\nconf_mat = confusion_matrix(y_test, y_pred)\nreport = classification_report(y_test, y_pred)\n\nprint('Confusion Matrix ==>')\nprint(conf_mat)\nprint('----------------------------------------------------------------------------------------')\nprint('Classification Report ==>')\nprint(report)","201c6906":"from sklearn.metrics import roc_curve, roc_auc_score\n\ny_pred_proba = clf.predict_proba(X_test)[:, 1]\n\nfpr, tpr, _ = roc_curve(y_test, y_pred_proba)\nauc = roc_auc_score(y_test, y_pred_proba)\n\nplt.plot(fpr, tpr, label=\"auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","f636946b":"map_class = {0: 'NO', 1: 'YES'}\ntemp_df = pd.DataFrame({'prediction': y_pred, 'original': y_test})\ntemp_df['prediction'] = temp_df['prediction'].map(map_class)\ntemp_df['original'] = temp_df['original'].map(map_class)\ntemp_df.head()","f837d634":"Claimed amount of Boy with Mortality 1 or alive is maximum","5985c7d4":"CATEGORY_CODE","cd925065":"So preauthorization amount of female is maximum & also preauthorization amount of alive people are greater than dead ones ","bf1c63ea":"In each month almost same no. of surgeries takes place","5b2c907f":"Males within age 31 and 60 have high deaths & Females with ages between 41 and 60 have high deaths","996f3ee0":"Exploring datetime cols","0d0120f9":"Fix that outlier","3508f2fa":"Now exploring each columns","8d72fc8d":"CASTE_NAME","7e4ac230":"Caste BC with ages between 41 and 60 has more deaths","0b5dbe64":"AGE & Sex","fdbc804a":"CLAIM_AMOUNT","a3cd579a":"CATEGORY_NAME","9b902966":"AGE in range of [ages > 30 and ages <= 70] mortality with class 0 is more ","d0d26fe4":"Hospital type C has greater deaths","756c7f7d":"M6, S12 & S15 category codes have higher deaths than others","6146f982":"HOSP_DISTRICT","28e00417":"The sample data contains the following attributes:\n\na) AGE: Age of the patient\n\nb) SEX: Sex of the patient\n\nc) CASTE NAME: Caste of the patient.\n\nd) CATEGORY _CODE: Administrative data\n\ne) CATEGORY NAME: Administrative data\n\nf) SURGERY CODE: Administrative data\n\ng) SURGERY: Name of the surgery operated.\n\nh) DISTRICT_NAME: District of the patient\n\ni) PREAUTH_DATE: Date of pre-authorization of the treatment\n\nj) PREAUTH_AMT: Amount pre-authorized\n\nk) CLAIM_DATE: Date of claim\n\nl) CLAIM_AMOUNT: Amount claimed (post-treatment)\n\nm) HOSP_NAME: Hospital Name\n\nn) HOSP_TYPE: Type of hospital (Government or Private)\n\no) HOSP_DISTRICT: District where the hospital is located\n\np) SURGERY _ DATE: Date of surgery\n\nq) DISCHARGE DATE: Date of discharge from the hospital post surgery\n\nt) Mortality Y \/ N: If the patient died in the process\n\ns) MORTALITY DATE: Date if dead\n\nt) SRC_REGISTRATION: Administrative data\n\nThe target column is => 'Mortality Y \/ N'","956afdf5":"District 3 & 1 has higher deaths than others","5e413d4b":"Most of the surgeries are done in 2017 and 2016, the deaths in these years are also greater than other years","3e71ddd9":"PREAUTH_AMT","c73a2219":"Death rate of male is greater than female","aef1ddd8":"So a lot of ages has its value 0 for boy & girl and a Female has an age > 100, so we have to format the age.","3163d613":"Class imbalance fixed!","e51e29b1":"DISTRICT_NAME","f2f583ad":"AUC score 1 represent perfect classifier and 0.5 represents bad classifier","c165d32e":"D SRC_REGISTRATION has excessively greater amount of deaths than any class","2efab6f6":"NEPHROLOGY, MEDICAL ONCOLOGY & POLY TRAUMA categories have higher deaths","10e0bfd7":"Now we will have to fix the class imbalance on the training set[](http:\/\/)","9e0fd299":"Replace null vals with mean","43074460":"So there is a problem of class imbalance we have to fix that later","5bf0020d":"HOSP_DISTRICT 1, 2, 3 has almost same amount of deaths","56fd7ef1":"SRC_REGISTRATION","993aeb70":"HOSP_TYPE"}}