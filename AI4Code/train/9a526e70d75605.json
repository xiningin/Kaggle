{"cell_type":{"924e3ba9":"code","9b090b66":"code","5b4fe40d":"code","817703e1":"code","28663c2b":"code","98bdd7ce":"code","35730d1f":"code","f16dd79c":"code","81814721":"code","329670e7":"code","6aff8a43":"code","20236dfc":"code","b01b8ba3":"code","36391736":"code","fefa1393":"code","82079449":"code","f1fc3624":"code","d1582355":"code","88b209bb":"code","d2d2af70":"code","d84707d1":"code","c7a5d9dd":"code","61133b25":"code","414c958a":"code","d4e62dfa":"code","e714955a":"code","fd8265d4":"code","36e7c08c":"code","4f4157cc":"code","cae7eadf":"code","c9677f58":"code","7b9c6d6a":"code","8a061ca2":"code","4a6d56b3":"code","485fde98":"code","0b1ff297":"code","61932ec5":"code","dca62ec2":"code","5272a6b6":"code","1efabe6a":"code","3177c92d":"code","6464391e":"markdown","d19d84c9":"markdown","7e47f39c":"markdown","1141a306":"markdown","38f4c17e":"markdown"},"source":{"924e3ba9":"!nvidia-smi","9b090b66":"import warnings\nwarnings.filterwarnings('ignore')","5b4fe40d":"import tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras import Sequential,Model\nfrom tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout,BatchNormalization,SeparableConv2D,Activation,GlobalAveragePooling2D,Add\nfrom tensorflow.keras import backend as k\nfrom tensorflow.keras import applications\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.callbacks import EarlyStopping,ModelCheckpoint, ReduceLROnPlateau,LearningRateScheduler,TensorBoard\nfrom tensorflow.keras.layers.experimental.preprocessing import Rescaling,Resizing\nimport datetime","817703e1":"# Set batch size\n#BATCH_SIZE = 8 * strategy.num_replicas_in_sync\nBATCH_SIZE = 32\n\n# Set number of epochs\nEPOCHS = 500\n\n# Patience for the learning rate\nLR_PATIENCE = 5\n\n# Patience for early stopping\nSTOPPING_PATIENCE = 30","28663c2b":"train_directory = '..\/input\/bird-dataset\/Bird_DataClassification\/Train'\nvalid_directory = '..\/input\/bird-dataset\/Bird_DataClassification\/Valid'\ntest_directory = '..\/input\/bird-dataset\/Bird_DataClassification\/Test'","98bdd7ce":"import glob\nprint('Train: parrot - ',len(glob.glob(train_directory+'\/0\/*')),' || oriole - ',len(glob.glob(train_directory+'\/1\/*')))\nprint('Validation: parrot - ',len(glob.glob(valid_directory+'\/0\/*')),' || oriole - ',len(glob.glob(valid_directory+'\/1\/*')))\nprint('Test: parrot - ',len(glob.glob(test_directory+'\/0\/*')),' || oriole - ',len(glob.glob(test_directory+'\/1\/*')))","35730d1f":"train_ds = tf.keras.preprocessing.image_dataset_from_directory(train_directory,seed=123,image_size=(256,256),batch_size=BATCH_SIZE)\n# train_datagen = ImageDataGenerator(rescale=1.\/255,\n#                                   horizontal_flip=True,fill_mode='reflect'\n#                                   rotation_range=)","f16dd79c":"valid_ds = tf.keras.preprocessing.image_dataset_from_directory(valid_directory,seed=13,image_size=(256,256),batch_size=BATCH_SIZE)","81814721":"test_ds = tf.keras.preprocessing.image_dataset_from_directory(test_directory,seed=123,image_size=(256,256),batch_size=BATCH_SIZE)","329670e7":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(int(labels[i]))\n        plt.axis(\"off\")","6aff8a43":"data_augmentation = tf.keras.Sequential([tf.keras.layers.experimental.preprocessing.RandomFlip(\"horizontal\"),\n                                         tf.keras.layers.experimental.preprocessing.RandomRotation(0.1),\n                                         Rescaling(1.\/ 255)])","20236dfc":"train_ds = train_ds.map(lambda x,y: (data_augmentation(x),y))\nvalid_ds = valid_ds.map(lambda x,y: (data_augmentation(x),y))","b01b8ba3":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy())\n        plt.title(int(labels[i]))\n        plt.axis(\"off\")","36391736":"MobileNetV2_model = applications.MobileNetV2(weights='imagenet',include_top = False,input_shape=(256,256,3),input_tensor=None)","fefa1393":"MobileNetV2_model.summary()","82079449":"status = False # N\u1ebfu g\u1eb7p block_4_add th\u00ec chuy\u1ec3n status t\u1eeb False sang True\nfor layer in MobileNetV2_model.layers:\n    layer.trainable = status\n    if layer.name == 'block_5_add':\n        check = True","f1fc3624":"def classifier_model(input_shape = (256,256,3), num_classes = 2):\n    x = MobileNetV2_model.output\n    x = Flatten()(x)\n    x = Dense(1024,activation='relu')(x)\n    x = Dense(512,activation='relu')(x)\n    if num_classes == 2:\n        activation = \"sigmoid\"\n        units = 1\n    else:\n        activation = \"softmax\"\n        units = num_classes\n    x= Dropout(0.5)(x)\n    outputs = Dense(units,activation=activation)(x)\n    return Model(MobileNetV2_model.input,outputs)","d1582355":"classifier2 = classifier_model(input_shape = (256,256,3), num_classes = 2)","88b209bb":"classifier2.summary()","d2d2af70":"loss = 'binary_crossentropy'\nmetrics=['accuracy']\nclassifier2.compile(optimizer='adam',loss=loss,metrics=metrics)","d84707d1":"learning_rate = ReduceLROnPlateau(patience=LR_PATIENCE,verbose=1,factor=0.5,min_delta=0.000001)\nearly_stopping = EarlyStopping(patience=STOPPING_PATIENCE,monitor='val_loss',verbose=1,restore_best_weights=True,mode='min')","c7a5d9dd":"t0 = datetime.datetime.now()","61133b25":"history = classifier2.fit(train_ds,validation_data=valid_ds,epochs=EPOCHS,callbacks=[learning_rate,early_stopping])","414c958a":"t1 = datetime.datetime.now()\nprint('Time training: ',t1-t0)","d4e62dfa":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('loss')\nplt.xlabel('Epoch')\nplt.legend(['Train','Validation'],loc='upper left')\nplt.show()","e714955a":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train','Validation'],loc='upper left')\nplt.show()","fd8265d4":"classifier2.save('Ex4classifier2.h5')","36e7c08c":"from tensorflow.keras.models import load_model\nfrom sklearn.metrics import classification_report\nloadEx4_model = load_model('.\/Ex4classifier2.h5') ","4f4157cc":"train_score = loadEx4_model.evaluate(train_ds)","cae7eadf":"valid_score = loadEx4_model.evaluate(valid_ds)","c9677f58":"test_score = loadEx4_model.evaluate(test_ds)","7b9c6d6a":"new_url1 = 'https:\/\/sudospaces.com\/gaocung-com\/2021\/01\/chim-vang-anh-an-gi-1.jpg'\nnew_url2 = 'https:\/\/cdn.chotot.com\/MfxqCZMCgcr-PqIvoOCcmP8VZGqZnWVpfbB_wl59QXM\/preset:view\/plain\/5a0e729ef5c9265889ab6e0a6b86d68d-2745499794937820100.jpg'","8a061ca2":"f = open(\"..\/input\/bird-dataset\/Bird_DataClassification\/info.txt\", \"r\")\nprint(f.read()) # in ra b\u1ea3ng th\u00f4ng tin nh\u00e3n","4a6d56b3":"from PIL import Image\nimport requests\n\ndef get_imgURL(url): \n    im = Image.open(requests.get(url, stream=True).raw)\n    im = im.resize((256,256))\n    img_array = np.asarray(im)\n    img_array = tf.expand_dims(img_array,0)\n    return img_array","485fde98":"img1 = get_imgURL(new_url1)\nimg1.shape","0b1ff297":"predictions1 = loadEx4_model.predict(img1)\nscore1 = predictions1[0]\nprint(\"This image is %.2f percent parrot and %.2f percent oriole.\"% (100 * (1 - score1), 100 * score1))","61932ec5":"plt.imshow(img1[0]) # oriole","dca62ec2":"img2 = get_imgURL(new_url2)\nimg2.shape","5272a6b6":"predictions2 = loadEx4_model.predict(img2)\nscore2 = predictions2[0]\nprint(\"This image is %.2f percent parrot and %.2f percent oriole.\"% (100 * (1 - score2), 100 * score2))","1efabe6a":"plt.imshow(img2[0]) # parrot","3177c92d":"# link notebook: https:\/\/www.kaggle.com\/hnganhlnguyn\/ex4-transferlearning\n# Author by Hung Anh","6464391e":"<h2>Nh\u1eadn x\u00e9t<\/h2>\n<li>So v\u1edbi model b\u00e0i 3 th\u00ec model b\u00e0i 4 c\u00f3 \u0111\u1ed9 ch\u00ednh x\u00e1c cao h\u01a1n tr\u00ean c\u1ea3 t\u1eadp train v\u00e0 valid. Tuy nhi\u00ean tr\u00ean t\u1eadp test th\u00ec c\u00f3 \u0111\u1ed9 ch\u00ednh x\u00e1c th\u1ea5p -> Model b\u00e0i 4 b\u1ecb overfitting<\/li>\n<li>So v\u1edbi model b\u00e0i 3 th\u00ec model b\u00e0i 4 c\u1ea7n th\u1eddi gian training l\u00e2u h\u01a1n kho\u1ea3ng 52p (so v\u1edbi b\u00e0i 3 l\u00e0 44p)<\/li>","d19d84c9":"<h2>Data Augmentation<\/h2>","7e47f39c":"<h2>Evaluation<\/h2<","1141a306":"<h2>Build and Train model<\/h2>","38f4c17e":"<h1>Use Strategy3<\/h1>\n<p>- D\u1eef li\u1ec7u nh\u1ecf nh\u01b0ng kh\u00e1c<\/p>"}}