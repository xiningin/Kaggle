{"cell_type":{"8c41f5f1":"code","f14e3fae":"code","cc952b55":"code","96276cbd":"code","9921bc5c":"code","14789b20":"code","fcd72d23":"code","14cab5d3":"code","ebde10d1":"code","974edd5b":"code","6d054de4":"code","059f1d17":"code","b61e92a1":"code","1433bd06":"code","17112b8a":"code","42c7761e":"code","2a1920ee":"code","9cb03679":"code","c2cd85ae":"code","d7ad0add":"code","010d3c45":"code","d867e1d9":"code","783fc70f":"code","3d367cc1":"code","21a7a70b":"code","9a7b4eed":"code","f1b6b6a6":"code","4dd0c809":"code","ad3aee9a":"code","e4f7076b":"markdown","a67d99f3":"markdown","1547fcdf":"markdown","35e54014":"markdown","2046d6dd":"markdown","f7ffc833":"markdown","1832439e":"markdown","df0cdadd":"markdown","804d0711":"markdown","da4d0563":"markdown","e277ab5c":"markdown","ed48d498":"markdown","8d45242a":"markdown","3e3727b1":"markdown","0dfbe81d":"markdown","43dd5c35":"markdown","a6a540cc":"markdown","3959f83e":"markdown","b0e775e7":"markdown","f94ebf9d":"markdown","e1a0691c":"markdown","ce96dd82":"markdown","3bf5a1a5":"markdown","5880182d":"markdown","fd7537ab":"markdown","d13cf40d":"markdown","d68cb86f":"markdown","c12d6bf3":"markdown","74af0140":"markdown","6debe7ca":"markdown","cd6e90c8":"markdown","5f913598":"markdown","ec3bf344":"markdown","8e4cad72":"markdown"},"source":{"8c41f5f1":"from IPython.display import Image\nImage(\"..\/input\/image-power\/power-grid-orig.jpg\")","f14e3fae":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","cc952b55":"#Reading the Datafile\nduq_dt = pd.read_csv('..\/input\/hourly-energy-consumption\/DUQ_hourly.csv', parse_dates=True)\n\n#Extracting Year, Month, Date, Day, Week and Hour details\nduq_dt['Datetime'] =  pd.to_datetime(duq_dt['Datetime'])\nduq_dt['Year'] = duq_dt['Datetime'].dt.year\nduq_dt['Month'] = duq_dt['Datetime'].dt.month\nduq_dt['Day'] = duq_dt['Datetime'].dt.day\nduq_dt['Week'] = duq_dt['Datetime'].dt.dayofweek\nduq_dt['Hour'] = duq_dt['Datetime'].dt.hour\nduq_dt['DName'] = duq_dt['Datetime'].dt.day_name()","96276cbd":"#Plotting the Energy Trend\nEng_trend = duq_dt.iloc[:,0:2]\n\nimport cufflinks as cf\ncf.set_config_file(offline=True, world_readable=True, theme='pearl')\n\nEng_trend.iplot(x='Datetime',kind='scatter', fill = False, \n                title = \"Energy Trend of Duquesne Light Co. (DUQ) from 2005 - 2018 in MW\")","9921bc5c":"range_dt = go.Scatter(\n    x=Eng_trend.Datetime,\n    y=Eng_trend['DUQ_MW'],\n    line = dict(color = '#2a932e'),\n    opacity = 0.6)\n\ndata = [range_dt]\n\nlayout = dict(\n    title='Energy Trend of Duquesne Light Co. (DUQ) from 2005 - 2018 in MW with Slider',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1y',\n                     step='year',\n                     stepmode='backward'),\n                dict(count=3,\n                     label='3y',\n                     step='year',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6y',\n                     step='year',\n                     stepmode='backward'),\n                dict(count=9,\n                     label='9y',\n                     step='year',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date'\n    )\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Time Series with Rangeslider\")","14789b20":"#Data Filtering 2012 - 2017\nduq_dt_5 = duq_dt[(duq_dt.Year >= 2012) & (duq_dt.Year <= 2017)]","fcd72d23":"#Calculating average energy consumption w.r.t to Year and Month\nyr_mon = duq_dt_5.groupby(['Year', 'Month'], as_index = False)['DUQ_MW'].mean()\n\ntrace_2012 = go.Scatter(\n                x=yr_mon.Month[yr_mon.Year == 2012],\n                y=yr_mon.DUQ_MW[yr_mon.Year == 2012],\n                name = \"2012\",\n                line = dict(color = '#17BECF'),\n                opacity = 0.8)\n\ntrace_2013 = go.Scatter(\n                x=yr_mon.Month[yr_mon.Year == 2013],\n                y=yr_mon.DUQ_MW[yr_mon.Year == 2013],\n                name = \"2013\",\n                line = dict(color = '#7F7F7F'),\n                opacity = 0.8)\n\ntrace_2014 = go.Scatter(\n                x=yr_mon.Month[yr_mon.Year == 2014],\n                y=yr_mon.DUQ_MW[yr_mon.Year == 2014],\n                name = \"2014\",\n                line = dict(color = '#29a944'),\n                opacity = 0.8)\n\ntrace_2015 = go.Scatter(\n                x=yr_mon.Month[yr_mon.Year == 2015],\n                y=yr_mon.DUQ_MW[yr_mon.Year == 2015],\n                name = \"2015\",\n                line = dict(color = '#279ff0'),\n                opacity = 0.8)\n\ntrace_2016 = go.Scatter(\n                x=yr_mon.Month[yr_mon.Year == 2016],\n                y=yr_mon.DUQ_MW[yr_mon.Year == 2016],\n                name = \"2016\",\n                line = dict(color = '#db9a08'),\n                opacity = 0.8)\n\ntrace_2017 = go.Scatter(\n                x=yr_mon.Month[yr_mon.Year == 2017],\n                y=yr_mon.DUQ_MW[yr_mon.Year == 2017],\n                name = \"2017\",\n                line = dict(color = '#c90645'),\n                opacity = 0.8)\n\ndata = [trace_2012, trace_2013, trace_2014, trace_2015, trace_2016, trace_2017]\n\nlayout = dict(\n    xaxis=dict(title='Numerical Month'),\n    yaxis=dict(title='Average Energy Consumption in MW'),\n    title = \"Month Wise Average Engergy Consumption [2012 - 2017]\",\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Month\")","14cab5d3":"#Calculating average energy consumption w.r.t to Year and Days\nyr_days = duq_dt_5.groupby(['Year', 'Day'], as_index = False)['DUQ_MW'].mean()\n\ntrace_2012 = go.Scatter(\n                x=yr_days.Day[yr_days.Year == 2012],\n                y=yr_days.DUQ_MW[yr_days.Year == 2012],\n                name = \"2012\",\n                line = dict(color = '#17BECF'),\n                opacity = 0.8)\n\ntrace_2013 = go.Scatter(\n                x=yr_days.Day[yr_days.Year == 2013],\n                y=yr_days.DUQ_MW[yr_days.Year == 2013],\n                name = \"2013\",\n                line = dict(color = '#7F7F7F'),\n                opacity = 0.8)\n\ntrace_2014 = go.Scatter(\n                x=yr_days.Day[yr_days.Year == 2014],\n                y=yr_days.DUQ_MW[yr_days.Year == 2014],\n                name = \"2014\",\n                line = dict(color = '#29a944'),\n                opacity = 0.8)\n\ntrace_2015 = go.Scatter(\n                x=yr_days.Day[yr_days.Year == 2015],\n                y=yr_days.DUQ_MW[yr_days.Year == 2015],\n                name = \"2015\",\n                line = dict(color = '#279ff0'),\n                opacity = 0.8)\n\ntrace_2016 = go.Scatter(\n                x=yr_days.Day[yr_days.Year == 2016],\n                y=yr_days.DUQ_MW[yr_days.Year == 2016],\n                name = \"2016\",\n                line = dict(color = '#db9a08'),\n                opacity = 0.8)\n\ntrace_2017 = go.Scatter(\n                x=yr_days.Day[yr_days.Year == 2017],\n                y=yr_days.DUQ_MW[yr_days.Year == 2017],\n                name = \"2017\",\n                line = dict(color = '#c90645'),\n                opacity = 0.8)\n\ndata = [trace_2012, trace_2013, trace_2014, trace_2015, trace_2016, trace_2017]\n\nlayout = dict(\n    xaxis=dict(title='Day of the Month'),\n    yaxis=dict(title='Average Energy Consumption in MW'),\n    title = \"Day Wise Average Engergy Consumption [2012 - 2017]\",\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Days\")","ebde10d1":"#Calculating average energy consumption w.r.t to Year and Days\nyr_wdays = duq_dt_5.groupby(['Year', 'Week', 'DName'], as_index = False)['DUQ_MW'].mean()\n\ntrace_2012 = go.Scatter(\n                x=yr_wdays.DName[yr_wdays.Year == 2012],\n                y=yr_wdays.DUQ_MW[yr_wdays.Year == 2012],\n                name = \"2012\",\n                line = dict(color = '#17BECF'),\n                opacity = 0.8)\n\ntrace_2013 = go.Scatter(\n                x=yr_wdays.DName[yr_wdays.Year == 2013],\n                y=yr_wdays.DUQ_MW[yr_wdays.Year == 2013],\n                name = \"2013\",\n                line = dict(color = '#7F7F7F'),\n                opacity = 0.8)\n\ntrace_2014 = go.Scatter(\n                x=yr_wdays.DName[yr_wdays.Year == 2014],\n                y=yr_wdays.DUQ_MW[yr_wdays.Year == 2014],\n                name = \"2014\",\n                line = dict(color = '#29a944'),\n                opacity = 0.8)\n\ntrace_2015 = go.Scatter(\n                x=yr_wdays.DName[yr_wdays.Year == 2015],\n                y=yr_wdays.DUQ_MW[yr_wdays.Year == 2015],\n                name = \"2015\",\n                line = dict(color = '#279ff0'),\n                opacity = 0.8)\n\ntrace_2016 = go.Scatter(\n                x=yr_wdays.DName[yr_wdays.Year == 2016],\n                y=yr_wdays.DUQ_MW[yr_wdays.Year == 2016],\n                name = \"2016\",\n                line = dict(color = '#db9a08'),\n                opacity = 0.8)\n\ntrace_2017 = go.Scatter(\n                x=yr_wdays.DName[yr_wdays.Year == 2017],\n                y=yr_wdays.DUQ_MW[yr_wdays.Year == 2017],\n                name = \"2017\",\n                line = dict(color = '#c90645'),\n                opacity = 0.8)\n\ndata = [trace_2012, trace_2013, trace_2014, trace_2015, trace_2016, trace_2017]\n\nlayout = dict(\n    xaxis=dict(title='Day of the Week'),\n    yaxis=dict(title='Average Energy Consumption in MW'),\n    title = \"Day of the week Wise Average Engergy Consumption [2012 - 2017]\",\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Week\")","974edd5b":"#Calculating average energy consumption w.r.t to Year and Hour\nyr_hr = duq_dt_5.groupby(['Year', 'Hour'], as_index = False)['DUQ_MW'].mean()\n\ntrace_2012 = go.Scatter(\n                x=yr_hr.Hour[yr_hr.Year == 2012],\n                y=yr_hr.DUQ_MW[yr_hr.Year == 2012],\n                name = \"2012\",\n                line = dict(color = '#17BECF'),\n                opacity = 0.8)\n\ntrace_2013 = go.Scatter(\n                x=yr_hr.Hour[yr_hr.Year == 2013],\n                y=yr_hr.DUQ_MW[yr_hr.Year == 2013],\n                name = \"2013\",\n                line = dict(color = '#7F7F7F'),\n                opacity = 0.8)\n\ntrace_2014 = go.Scatter(\n                x=yr_hr.Hour[yr_hr.Year == 2014],\n                y=yr_hr.DUQ_MW[yr_hr.Year == 2014],\n                name = \"2014\",\n                line = dict(color = '#29a944'),\n                opacity = 0.8)\n\ntrace_2015 = go.Scatter(\n                x=yr_hr.Hour[yr_hr.Year == 2015],\n                y=yr_hr.DUQ_MW[yr_hr.Year == 2015],\n                name = \"2015\",\n                line = dict(color = '#279ff0'),\n                opacity = 0.8)\n\ntrace_2016 = go.Scatter(\n                x=yr_hr.Hour[yr_hr.Year == 2016],\n                y=yr_hr.DUQ_MW[yr_hr.Year == 2016],\n                name = \"2016\",\n                line = dict(color = '#db9a08'),\n                opacity = 0.8)\n\ntrace_2017 = go.Scatter(\n                x=yr_hr.Hour[yr_hr.Year == 2017],\n                y=yr_hr.DUQ_MW[yr_hr.Year == 2017],\n                name = \"2017\",\n                line = dict(color = '#c90645'),\n                opacity = 0.8)\n\ndata = [trace_2012, trace_2013, trace_2014, trace_2015, trace_2016, trace_2017]\n\nlayout = dict(\n    xaxis=dict(title='Time of the Day'),\n    yaxis=dict(title='Average Energy Consumption in MW'),\n    title = \"Time Wise Average Engergy Consumption [2012 - 2017]\",\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename = \"Time\")","6d054de4":"#Reading the dataset\nduq_dt = pd.read_csv('..\/input\/hourly-energy-consumption\/DUQ_hourly.csv', index_col=[0], parse_dates=[0])","059f1d17":"#Train & Test data based on date index\nsplit_index = '01-Jan-2015'\nduq_dt_tr = duq_dt.loc[duq_dt.index <= split_index].copy()\nduq_dt_ts = duq_dt.loc[duq_dt.index > split_index].copy()","b61e92a1":"#Visualizing the training and test dataset\n_ = duq_dt_ts \\\n    .rename(columns={'DUQ_MW': 'TEST SET'}) \\\n    .join(duq_dt_tr.rename(columns={'DUQ_MW': 'TRAIN SET'}), how='outer') \\\n    .plot(figsize=(15,5), title='Duquesne Light Co. (DUQ)', style='.')","1433bd06":"# Formatting the training data for prophet model using ds and y\nduq_dt_tr.reset_index().rename(columns={'Datetime':'ds', 'DUQ_MW':'y'}).head()","17112b8a":"# Setup and train model\nfrom fbprophet import Prophet\nmodel = Prophet()\nmodel.fit(duq_dt_tr.reset_index().rename(columns={'Datetime':'ds', 'DUQ_MW':'y'}))","42c7761e":"# Predict on training set with model\nduq_dt_ts_forecast = model.predict(df=duq_dt_ts.reset_index().rename(columns={'Datetime':'ds'}))","2a1920ee":"# Plot the forecast\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nfig = model.plot(duq_dt_ts_forecast, ax=ax)","9cb03679":"# Plot the components\nfig = model.plot_components(duq_dt_ts_forecast)","c2cd85ae":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(duq_dt_ts.index, duq_dt_ts['DUQ_MW'], color='g')\nfig = model.plot(duq_dt_ts_forecast, ax=ax)","d7ad0add":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(duq_dt_ts.index, duq_dt_ts['DUQ_MW'], color='g')\nfig = model.plot(duq_dt_ts_forecast, ax=ax)\nax.set_xbound(lower='01-01-2016', upper='02-01-2016')\nax.set_ylim(0, 3000)\nplot = plt.suptitle('January 2017 Forecast vs Actuals')","010d3c45":"# Plot the forecast with the actuals\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nax.scatter(duq_dt_ts.index, duq_dt_ts['DUQ_MW'], color='g')\nfig = model.plot(duq_dt_ts_forecast, ax=ax)\nax.set_xbound(lower='01-01-2016', upper='01-08-2016')\nax.set_ylim(0, 3000)\nplot = plt.suptitle('First Week of January Forecast vs Actuals')","d867e1d9":"mean_squared_error(y_true=duq_dt_ts['DUQ_MW'],\n                   y_pred=duq_dt_ts_forecast['yhat'])","783fc70f":"mean_absolute_error(y_true=duq_dt_ts['DUQ_MW'],\n                   y_pred=duq_dt_ts_forecast['yhat'])","3d367cc1":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nmean_absolute_percentage_error(y_true=duq_dt_ts['DUQ_MW'],\n                   y_pred=duq_dt_ts_forecast['yhat'])","21a7a70b":"#Calandar details\nfrom pandas.tseries.holiday import USFederalHolidayCalendar as calendar\n\ncal = calendar()\ntr_holidays = cal.holidays(start=duq_dt_tr.index.min(), end=duq_dt_tr.index.max())\nts_holidays = cal.holidays(start=duq_dt_ts.index.min(), end=duq_dt_ts.index.max())","9a7b4eed":"# Create a dataframe with ds columns and Holiday\nduq_dt['date'] = duq_dt.index.date\nduq_dt['is_holiday'] = duq_dt.date.isin([d.date() for d in cal.holidays()])\nholiday_df = duq_dt.loc[duq_dt['is_holiday']].reset_index().rename(columns={'Datetime':'ds'})\nholiday_df['holiday'] = 'USFederalHoliday'\nholiday_df = holiday_df.drop(['DUQ_MW','date','is_holiday'], axis=1)","f1b6b6a6":"# Setup and train model with holidays\nmodel_with_holidays = Prophet(holidays=holiday_df)\nmodel_with_holidays.fit(duq_dt_tr.reset_index().rename(columns={'Datetime':'ds', 'DUQ_MW':'y'}))","4dd0c809":"fig2 = model_with_holidays.plot_components(duq_dt_ts_forecast)","ad3aee9a":"# Predict on training set with model\nduq_test_fcst_with_hols = model_with_holidays.predict(df=duq_dt_ts.reset_index().rename(columns={'Datetime':'ds'}))\n\nduq_test_fcst_with_hols.head()","e4f7076b":"**Average Energy Consumption w.r.t Year and Week Day**","a67d99f3":"* Mean Absolute Error","1547fcdf":"**Train - Test Split**  \nFor model building, first we need the training and testing datasets. Here, we are going to split the data with respect to date column in the dataset.   \n* Training data -->  From 1-Jan-2008 to 31-Dec-2015  \n* Testing data --->  From 1-Jan-2016 to 31-Jul-2018","35e54014":"For the year 2012, 2013 and 2017 the peak month of average energy consumption seems to be on month 7 which is July. Further, for all the years from 2012 to 2015 there are two sharp drops on the 4th and 10th month which are April and October respectively.","2046d6dd":"**Plottting the Energy Trend **","f7ffc833":"**Model Prediction with Holidays**","1832439e":"**Predict on testing set with model**","df0cdadd":"**Setting up the Model with holidays**","804d0711":"**Average Energy Consumption w.r.t Year and Days**","da4d0563":"**Visualizing the training and test dataset**","e277ab5c":"**Single Month Prediction**","ed48d498":"**Average Energy Consumption w.r.t Year and Hour**","8d45242a":"**Modelling using Prophet from Facebook**","3e3727b1":"**Hourly Energy Consumption of Duquesne Light Co. (DUQ)**  \nFor the Exploratory analysis and Model building, I will be using Duquesne Light Co. (DUQ) dataset","0dfbe81d":"**Error Metrics**","43dd5c35":"**Setting up the model for Training**","a6a540cc":"**Plotting the forecast**","3959f83e":"**Reading the Data**  ","b0e775e7":"We can clearly observe that the day starts with little high consumption of energy compared to to early morning hours around 4:00 AM. After 5:00 AM the energy consumption starts to rise till 6:00 PM in the evening and then gradully starts to decrease towards the end of the day. ","f94ebf9d":"**Single Week of Predictions**","e1a0691c":"* Mean absolute percentage error [MAPE]","ce96dd82":"**Compare Forecast to Actuals**\n* Green - Actuals\n* Blue - Forceast","3bf5a1a5":"**Average Energy Consumption w.r.t Year and Month**","5880182d":"**Formatting the data for modelling**","fd7537ab":"From the above plot its clearly seen that there has been a repetative pattern over the period of time. But, In order to uncover the pattern the data needs to be analysed to atmost granular level. Therefore, we will analyse the data at different granular level with respect to month, day and hour details.","d13cf40d":"**Note:**  \nKindly upvote the kernel if you find it useful. Suggestions are always welome. Let me know your thoughts in the comment if any.","d68cb86f":"**Effect of Holiday on the Model components**","c12d6bf3":"For all the years from 2012 to 2017, the average energy consumption is up and running from Monday to Friday and drops during the weekends. So, Over all the average energy consumption is starting high on the start of the weekday and ends in a downward trend during the weekends.  \nOne good thing about this plot is that, we can clearly see that the average energy utilization has significantly reduced over the period from 2012 to 2017.","74af0140":"* Mean Square Error","6debe7ca":"Every year from 2012 to 2017, between 12th to 17th and 23rd to 26 there has been a decreasing trend in average enery consumption.","cd6e90c8":"**Impact of Holidays**  \nAs of now the model is implemented without considering the holidays. Now, Let us ingest the holiday parameter into the model and see how the model is impacted.\n\nProphet comes with a Holiday Effects parameter that can be provided to the model prior to training.\n\nWe will use the built in  ** pandas USFederalHolidayCalendar** to pull the list of holidays.","5f913598":"**Analysis and Modelling on Energy Consumption of Duquesne Light Co. (DUQ)**","ec3bf344":"**Analysis Interval**  \nFor analysis purpose, I will be considering 6 years of data from 2012 to 2017.","8e4cad72":"**Plotting the components of the forecasted model**"}}