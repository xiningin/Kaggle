{"cell_type":{"e813014f":"code","17edb1f0":"code","da6734da":"code","0361035e":"code","7e454de3":"code","d11b96f3":"code","b502a2e3":"code","20093413":"code","fe917aca":"code","8cb6f73c":"code","e137e7b4":"code","95be803a":"code","702c6668":"code","b0e92679":"code","7b41db10":"code","1dd8fbbb":"code","a909a6f5":"code","14970d20":"code","1b0f1bf4":"code","a9154144":"code","b66b6b73":"code","323d0668":"code","89cb478d":"code","a93d5cd7":"code","9c9a4cc9":"code","b7f82855":"code","eeb87209":"code","4968ccc7":"code","f3ca8768":"code","183adc39":"code","dece79a6":"code","baa9ee89":"code","b88a2330":"code","d6cfbcf6":"code","099e548a":"code","3989a23d":"code","f0ca9924":"code","6e65b83b":"code","b336f3a1":"code","cbf8feb5":"code","2c165be7":"code","ab5c6f29":"code","4f7c48bc":"code","09476701":"code","d0714a06":"code","a146b0ba":"code","a0fc27ff":"code","ae168c81":"markdown","90b40b4d":"markdown"},"source":{"e813014f":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\n\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import accuracy_score\n","17edb1f0":"data = pd.read_csv('..\/input\/hr-analytics\/general_data.csv')\nemp_survey = pd.read_csv(\"..\/input\/hr-analytics\/employee_survey_data.csv\")\nin_time = pd.read_csv(\"..\/input\/hr-analytics\/in_time.csv\")\nmanager_survey = pd.read_csv(\"..\/input\/hr-analytics\/manager_survey_data.csv\")\nout_time = pd.read_csv(\"..\/input\/hr-analytics\/out_time.csv\")\n#data_dictionary = pd.read_excel(\"..\/input\/hr-analytics\/data_dictionary.xlsx\")\ndiff_time = pd.read_csv(\"..\/input\/hr-analytics\/difference_time.csv\")","da6734da":"emp_survey.head()","0361035e":"data = pd.merge(data,emp_survey, on = 'EmployeeID', how = 'outer')\ndata.head()","7e454de3":"data = pd.merge(data,manager_survey, on = 'EmployeeID', how = 'outer')\ndata.head()","d11b96f3":"diff_time = diff_time.replace(\"#VALUE!\", np.nan)\n\ndef normalize(df):\n    result = df.copy()\n    for feature_name in df.columns:\n        result[feature_name] = df[feature_name].astype(float)\n    return result\n\nnormalize(diff_time)\n","b502a2e3":"diff_time1 = diff_time.iloc[:,1:]\n\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer = imputer.fit(diff_time1.T)\ndiff_time1 = imputer.transform(diff_time1.T)","20093413":"diff_time2 = pd.DataFrame(diff_time1.T)\ndiff_time['Average_Time'] = diff_time2.mean(axis = 1)","fe917aca":"diff_time = diff_time[['EmployeeID','Average_Time']]","8cb6f73c":"data2 = pd.merge(data,diff_time, on = 'EmployeeID', how = 'outer')\ndata2.head()","e137e7b4":"final_data = data2.copy()\n\ntravel = {'Non-Travel': 0, \"Travel_Rarely\": 1, \"Travel_Frequently\":2}\ngender = {\"Male\": 0, \"Female\": 1}\ndept = {\"Sales\": 0, \"Research & Development\":1, \"Human Resources\": 2}\nmarried = {\"Single\": 0, \"Married\":1, \"Divorced\": 2}\nattrition = {\"Yes\":1, \"No\":0}\n\nfinal_data['BusinessTravel'] = final_data['BusinessTravel'].map(lambda x: travel[x])\nfinal_data['Gender'] = final_data['Gender'].map(lambda x: gender[x])\nfinal_data['Department'] = final_data['Department'].map(lambda x: dept[x])\nfinal_data['Attrition'] = final_data['Attrition'].map(lambda x: attrition[x])\nfinal_data['MaritalStatus'] = final_data['MaritalStatus'].map(lambda x: married[x])\n\n\nfinal_data = pd.get_dummies(final_data, columns =['EducationField'])\n\n","95be803a":"final_data = final_data.iloc[:,:-1]\nfinal_data = pd.get_dummies(final_data, columns =['JobRole'])\nfinal_data = final_data.iloc[:,:-1]","702c6668":"final_data.isnull().sum()\n","b0e92679":"final_data = final_data.dropna()\nfinal_data = final_data.drop(['EmployeeCount', 'StandardHours', 'Over18'], axis = 1)","7b41db10":"#data2.to_csv(\"Data.csv\", index = False)\n","1dd8fbbb":"data3 = pd.read_csv(\"..\/input\/hr-analytics\/Data_12.csv\")\ndata3.head()\ndata3 = data3.dropna()\ndata3.head()","a909a6f5":"import matplotlib.patches as mpatches\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn\")\n\nplt.figure(figsize=(15,8))\ncolor = {\"Yes\": 'red', 'No': 'blue'}\nplt.scatter(data3['Age'], data3['MonthlyIncome'], c =data3['Attrition'].apply(lambda x: color[x]), alpha = 0.8 )\nplt.title('Age vs Income')\nplt.xlabel(\"Age\")\nplt.ylabel(\"Income\")\nred_patch = mpatches.Patch(color='red', label='Attrition - Yes')\nblue_patch = mpatches.Patch(color='blue', label='Attrition - NO')\nplt.legend(handles=[red_patch, blue_patch], loc = 'upper right')\n\nplt.show()","14970d20":"data3.isnull().sum()","1b0f1bf4":"plt.figure(figsize = (15,20))\nattrition_JS = data3[data3['Attrition'] == \"Yes\"]['TotalWorkingYears'].value_counts()\nattrition_NJS = data3[data3['Attrition'] == \"No\"]['TotalWorkingYears'].value_counts()\n\ndataframe2 = pd.DataFrame({'Attrition':attrition_JS, 'No Attrition':attrition_NJS})\n\ndataframe2.plot(kind='bar', stacked= 'True', figsize = (20,10))\nplt.xlabel(\"Working Years in a Company\")\nplt.ylabel(\"Count of people\")\nplt.xticks(rotation = 0)\nplt.show()","a9154144":"df = data3[['Attrition', 'MonthlyIncome','JobRole']].groupby(['JobRole','Attrition']).mean().reset_index()\ndf.head()","b66b6b73":"f1 = df['Attrition'] == \"Yes\"\ndf1 = df[f1]\nf2 = df['Attrition'] == \"No\"\ndf2 = df[f2]","323d0668":"df","89cb478d":"fig, ax = plt.subplots()\n\n# Example data\npeople = df2['JobRole']\n\ny_pos = np.arange(len(people))\n\n\nax.barh(y_pos, df2['MonthlyIncome'], align='center')\nax.set_yticks(y_pos)\nax.set_yticklabels(people)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Monthly Income')\nax.set_title('Income vs Attrition (No)')\n\nplt.show()\n","a93d5cd7":"fig, ax = plt.subplots()\n\n# Example data\npeople = df1['JobRole']\n\ny_pos = np.arange(len(people))\n\n\nax.barh(y_pos, df1['MonthlyIncome'], align='center')\nax.set_yticks(y_pos)\nax.set_yticklabels(people)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('Monthly Income')\nax.set_title('Income vs Attrition (Yes)')\n\nplt.show()\n","9c9a4cc9":"plt.figure(figsize = (15,20))\nattrition_JS = df[df['Attrition'] == \"Yes\"]['MonthlyIncome'].value_counts()\nattrition_NJS = df[df['Attrition'] == \"No\"]['MonthlyIncome'].value_counts()\n\ndataframe2 = pd.DataFrame({'No Attrition':attrition_NJS})\n\ndataframe2.plot(kind='barh', stacked= 'True', figsize = (20,10))\nplt.xlabel(\"Working Years in a Company\")\nplt.ylabel(\"Count of people\")\nplt.xticks(rotation = 0)\nplt.show()","b7f82855":"attrition_JS = data3[data3['Attrition'] == \"Yes\"]['JobSatisfaction_D'].value_counts()\nattrition_NJS = data3[data3['Attrition'] == \"No\"]['JobSatisfaction_D'].value_counts()\n\ndataframe2 = pd.DataFrame({'Attrition':attrition_JS, 'No Attrition':attrition_NJS})\n\ndataframe2.plot(kind='bar', stacked= 'True')\nplt.show()","eeb87209":"plt.hist([data3[data3['Attrition']==\"Yes\"]['Age'],data3[data3['Attrition']==\"No\"]['Age']], bins = 10, stacked = True,color = ['red', 'blue'], edgecolor = 'black')\nplt.title(\"Age Group\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\n\nred_patch = mpatches.Patch(color='red', label='Attrition - Yes')\nblue_patch = mpatches.Patch(color='blue', label='Attrition - NO')\nplt.legend(handles=[red_patch, blue_patch], loc = 'upper right')\n\nplt.show()\nplt.show()","4968ccc7":"data3.isnull().sum()","f3ca8768":"plt.figure(figsize = (5,14))\nplt.hist([data3[data3['Attrition']==\"Yes\"]['StockOptionLevel'],data3[data3['Attrition']==\"No\"]['StockOptionLevel']], bins = 3, stacked = True,color = ['red', 'blue'], edgecolor = 'black')\nplt.title(\"Marital Status Group\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.show()","183adc39":"plt.figure(figsize = (5,14))\nplt.hist([data3[data3['Attrition']==\"Yes\"]['MaritalStatus'],data3[data3['Attrition']==\"No\"]['MaritalStatus']], bins = 3, stacked = True,color = ['red', 'blue'], edgecolor = 'black')\nplt.title(\"Marital Status Group\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.show()","dece79a6":"plt.figure(figsize = (8,10))\nplt.hist([data3[data3['Attrition']==\"Yes\"]['Average_Time'],data3[data3['Attrition']==\"No\"]['Average_Time']], bins = 10, stacked = True,color = ['red', 'blue'], edgecolor = 'black')\nplt.title(\"Average Working Hours\")\nplt.xlabel(\"Average Time\")\nplt.ylabel(\"Count\")\nred_patch = mpatches.Patch(color='red', label='Attrition - Yes')\nblue_patch = mpatches.Patch(color='blue', label='Attrition - NO')\nplt.legend(handles=[red_patch, blue_patch], loc = 'upper right')\n\nplt.show()","baa9ee89":"final_data.head()\nX = final_data.drop(['Attrition'], axis = 1)\ny = final_data.iloc[:,1]","b88a2330":"final_data.head()","d6cfbcf6":"from sklearn.neighbors import KNeighborsClassifier\n\n\nKNN_model = KNeighborsClassifier()\n\nparam_grid = {'n_neighbors': [2,4,5,6,7,8,9,10,15,20]}\ngrid = GridSearchCV(KNN_model, param_grid, cv = 10,scoring='accuracy',\n                    return_train_score=True)\ngrid.fit(X, y)\n\nprint(\"Best Parameter: {}\".format(grid.best_params_))\nprint(\"Best Cross Vlidation Score: {}\".format(grid.best_score_))\nprint(\"Best Cross Vlidation Score: {}\".format(grid.best_score_))","099e548a":"from sklearn.svm import SVC\n\n\nsvc = SVC()\n\nparam_grid = {'kernel': ['linear','rbf'], 'C':[1]}\n    \ngrid = GridSearchCV(svc, param_grid, cv = 10,scoring='accuracy',\n                    return_train_score=True)\ngrid.fit(X, y)\n\nprint(\"Best Parameter: {}\".format(grid.best_params_))\nprint(\"Best Cross Vlidation Score: {}\".format(grid.best_score_))","3989a23d":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\n\nparam_grid = {'n_estimators':[50,100,150], 'max_depth':[10,20,30,40,50,60,70,80,90]}\n\ngrid = GridSearchCV(rf, param_grid, cv = 10,scoring='accuracy',\n                    return_train_score=True)\ngrid.fit(X, y)\n\nprint(\"Best Parameter: {}\".format(grid.best_params_))\nprint(\"Best Cross Vlidation Score: {}\".format(grid.best_score_))","f0ca9924":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.3)\n\nrf = RandomForestClassifier(n_estimators = 100, max_depth = 20)\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)\n\nprint(\"Accuracy score is: {}\".format(accuracy_score(y_test, y_pred)))","6e65b83b":"y_pred = rf.predict(X)","b336f3a1":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y, y_pred)\ncm","cbf8feb5":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nplt.figure(figsize= (10,10), dpi=100)\n\nfeat_importances = pd.Series(rf.feature_importances_, index=X.columns)\nfeat_importances = feat_importances.nlargest(20)\nfeat_importances.plot(kind='barh')","2c165be7":"final_data.head()","ab5c6f29":"%matplotlib inline\nimport matplotlib.pyplot as plt\npd.crosstab(data3['JobRole'],data3['Attrition']).plot(kind='bar')\nplt.title('Turnover Frequency for Job ROle')\nplt.xlabel('Department')\nplt.ylabel('Frequency of Turnover')\nplt.savefig('department_bar_chart')","4f7c48bc":"from sklearn.ensemble import AdaBoostClassifier\n\nada = AdaBoostClassifier()\n\nparam_grid = {'n_estimators':[50,100,150], 'learning_rate':[0.05,0.1,0.5,1]}\n\ngrid = GridSearchCV(ada, param_grid, cv = 10,scoring='accuracy',\n                    return_train_score=True)\ngrid.fit(X, y)\n\nprint(\"Best Parameter: {}\".format(grid.best_params_))\nprint(\"Best Cross Vlidation Score: {}\".format(grid.best_score_))","09476701":"from sklearn.naive_bayes import GaussianNB\n\nnb = GaussianNB()\n\nparam_grid = {}\ngrid = GridSearchCV(nb, param_grid, cv = 10,scoring='accuracy',\n                    return_train_score=True)\ngrid.fit(X, y)\n\nprint(\"Best Parameter: {}\".format(grid.best_params_))\nprint(\"Best Cross Vlidation Score: {}\".format(grid.best_score_))\n","d0714a06":"from sklearn.neural_network import MLPClassifier\n\nmlp = MLPClassifier()\n\nparam_grid = {'activation': ['relu'], 'hidden_layer_sizes':[1, 10, 15, 25, 50, 100, [2,10], [3,15],[10,15]]}\ngrid = GridSearchCV(mlp, param_grid, cv = 10,scoring='accuracy',\n                    return_train_score=True)\ngrid.fit(X, y)\n\nprint(\"Best Parameter: {}\".format(grid.best_params_))\nprint(\"Best Cross Vlidation Score: {}\".format(grid.best_score_))\n","a146b0ba":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression(solver = 'newton-cg')\n\nlr.fit(X_train, y_train)\n\ny_pred = lr.predict(X_test)\n\nprint(\"accuracy score: {}\".format(accuracy_score(y_test, y_pred)))","a0fc27ff":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression(solver = 'newton-cg', max_iter=2000)\n\nlr.fit(X_train, y_train)\n\ny_pred = lr.predict(X_test)\n\nprint(\"accuracy score: {}\".format(accuracy_score(y_test, y_pred)))","ae168c81":"# Prediction \n","90b40b4d":"# Visualizations "}}