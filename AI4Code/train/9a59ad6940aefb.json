{"cell_type":{"cc21ccac":"code","86e08282":"code","01b345f1":"code","70887976":"code","395a7e48":"code","bc72bf04":"code","4364a42b":"code","05db146b":"code","e826b145":"code","27963ea0":"code","0ace2029":"code","189ba83a":"code","9e8e4f29":"code","d9da1eaf":"code","10f84d44":"code","b6b60f4b":"code","4fe8081f":"code","cd0ee9b2":"code","98a28481":"code","cf95d95e":"code","b2478291":"code","9b1b73a7":"code","d5cf6d9b":"code","99d3db98":"code","b206bd75":"code","9ea57788":"code","cddeb154":"code","0a18af5c":"code","6d663993":"code","7ba16a84":"code","3fdae4f2":"code","7b1c0dfa":"code","9f1ff825":"code","f728ba3c":"code","f3d24742":"code","6cbc8762":"code","ec7964d0":"code","8d623299":"code","4c247156":"code","4c09f81a":"code","be9e8a32":"code","ad9cc156":"code","cb25dfdd":"code","6a3ec6d8":"code","2abd5eb0":"code","ee629b33":"code","eb947a0a":"code","412b8c58":"code","07e268c1":"code","d9325d84":"code","397ba530":"code","4f683abd":"code","d3442440":"code","295d7716":"code","57bb0df3":"code","3ee79fbe":"code","a8eeb87d":"code","9b32cb57":"code","6b9cce0f":"code","3f263374":"code","97e67b59":"code","ac0b0e04":"code","03fe7ae7":"code","5edd081f":"code","5fba2293":"code","e9c1f05e":"code","782a5a70":"code","1ac49310":"code","6f23ee51":"code","fd3d4a52":"code","c25c6099":"code","59b5ce3b":"code","3b8d9439":"code","b71510db":"code","c6e01ec4":"code","919baa93":"code","74079d32":"code","f9ee9e72":"code","7a2773f2":"code","9d66afe3":"code","7fa78f11":"code","f24ee50b":"code","5b1435e2":"code","81268e7f":"code","45e15d3a":"code","0208dba6":"code","1e15334f":"code","6e60c259":"code","3c13f1bf":"code","10fa9adf":"code","8d86b4a2":"code","4ebf390c":"code","edc88bc1":"code","10d50e34":"code","56185d9d":"code","4c246801":"code","3b21ccca":"code","e1b1084b":"code","a2ec276d":"code","e0721103":"code","8779b472":"code","03b90bb1":"code","1d9f6a55":"code","83f62cb9":"code","8fd71a72":"code","7b46748f":"code","50c6fd1f":"code","8a696902":"code","de26bb24":"code","3c3fb753":"code","3fc8a111":"code","7fd629d7":"markdown","c4072b49":"markdown","878bb851":"markdown","8bc80f02":"markdown","9afd6a75":"markdown","b10c3424":"markdown","d61cc71e":"markdown","89dead04":"markdown","991ff22e":"markdown","b36861df":"markdown","c26729e8":"markdown","69e43841":"markdown","46bca3a5":"markdown","f9d21e62":"markdown","ff3cdc4b":"markdown","ab895432":"markdown","c0329f78":"markdown","6824f77e":"markdown","9d2cda9a":"markdown","b689fffd":"markdown","14d856cc":"markdown","8f266d0f":"markdown","0bf970d7":"markdown","9fca3ea0":"markdown","160354a3":"markdown","7e0b0054":"markdown","0a036106":"markdown","661222e2":"markdown","bf3dd62e":"markdown","4e230ee7":"markdown"},"source":{"cc21ccac":"!pip install imdbpy","86e08282":"import pandas as pd\nimport seaborn as sns\nfrom datetime import date\nfrom datetime import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly import __version__\nfrom collections import Counter\nfrom imdb import IMDb\nimport warnings\n\n\n\ninit_notebook_mode(connected=True)\ncf.go_offline()\nia = IMDb()\nwarnings.filterwarnings('ignore')\n%matplotlib inline","01b345f1":"iurl='https:\/\/github.com\/imamanmehrotra\/Images_for_projects\/raw\/main\/Netflix.jpeg'\nfrom IPython.display import Image\nImage(iurl)","70887976":"url='https:\/\/raw.githubusercontent.com\/imamanmehrotra\/Datasets\/main\/netflix.csv'\ndf=pd.read_csv(url)\ndf.head(10)","395a7e48":"df.info()","bc72bf04":"print('Rows:',df.shape[0])\nprint('\\n')\nprint('Columns:',df.shape[1])\nprint('\\n')\nprint('Features\/Column Names:',df.columns)\nprint('\\n')\nprint('Unique Values:\\n\\n',df.nunique())\nprint('\\nNull Values across columns:')\nprint(df.isna().sum())","4364a42b":"fig,axes=plt.subplots(figsize=[11,8])\nfig=sns.heatmap(df.isna(),yticklabels=False ,cmap='YlGnBu',cbar=False )","05db146b":"#Top 10 dates\nimp_dates=df['date_added'].value_counts().sort_values(ascending=False).head(10).to_frame()\nimp_dates.iplot(kind='bar', layout=({'plot_bgcolor':'black','paper_bgcolor':'black','font_color':'yellow'}),colors='Yellow')","e826b145":"df['date_added'].fillna(df['date_added'].mode()[0], inplace=True)\nprint('Null Values in column date_added:',df['date_added'].isna().sum())","27963ea0":"df[df.rating.isna()]","0ace2029":"rt=df[['rating','listed_in']].value_counts()\nrt.iplot(kind='scatter',layout=({'plot_bgcolor':'black','paper_bgcolor':'black','font_color':'yellow'}),colors='Yellow')","189ba83a":"df.loc[ (df['rating'].isna()) & (df['listed_in']=='Movies'), ['rating']] = ['TV-MA']","9e8e4f29":"df.loc[(df['listed_in'].str.contains('Kids')) & (df['rating'].isna()),['rating']]=['TV-Y7']","d9da1eaf":"#The highest number of Rating in Dramas is for R, so we would go ahead and assign R as rating for missing values in Drama\ndf[(df['listed_in']=='Dramas')][['rating','listed_in']].groupby(by='rating').count().sort_values('listed_in',ascending=False)","10f84d44":"df.loc[(df['listed_in'].str.contains('Dramas')) & (df['rating'].isna()),['rating']]=['R']","b6b60f4b":"#The highest number of Rating in Anime Series, International TV Shows is for TV-14, so we would go ahead and assign TV-14 as rating for missing values in Drama\ndf[(df['listed_in']=='Anime Series, International TV Shows')][['rating','listed_in']].groupby(by='rating').count().sort_values('listed_in',ascending=False)","4fe8081f":"df.loc[(df['listed_in'].str.contains('Anime Series, International TV Shows')) & (df['rating'].isna()),['rating']]=['TV-14']","cd0ee9b2":"print(df.isna().sum())","98a28481":"ca=df[['type','country']].value_counts().head(20).groupby(['country','type']).sum().to_frame().reset_index()\nca.columns=['country','type','Content_Sum']\nca=ca.sort_values(by='Content_Sum',ascending=False)\nca","cf95d95e":"fig=px.bar(data_frame=ca,\n           x='country',\n           y='Content_Sum',\n           color='type',\n           color_discrete_map={\n                     \"TV Show\":\"#ADD8E6\",\n                     \"Movie\":\"Yellow\"} )\nfig.update_layout(\n    title=\"Content across countries\",\n    xaxis_title=\"Country\",\n    yaxis_title=\"Number of Contents Produced\",\n    legend_title=\"Type\",\n    font=dict(family=\"Arial\",size=15, color='yellow'),\n    plot_bgcolor='black',\n    paper_bgcolor='black')","b2478291":"df.loc[(df['country'].isna()) & (df['type']=='TV Show'),['country']]=['United States']","9b1b73a7":"print(df.isna().sum())","d5cf6d9b":"s=df.loc[(df['country'].isna()) & (df['type']=='Movie')]\ns","99d3db98":"def find_nth(string, substring, n):\n    if (n == 1):\n        return string.find(substring)\n    else:\n        return string.find(substring, find_nth(string, substring, n - 1) + 1)\n    \nid_list=[]\nfor name in s['title']: \n    movies = str(ia.search_movie(name))\n    start_index=movies.find(':')+1\n    end=find_nth(movies,'[',2)\n    movie_id=movies[start_index:end]\n    warnings.filterwarnings('ignore')\n    #print(movie_id)\n    id_list.append(movie_id)\n\n\n    ","b206bd75":"\nmovie_ids=pd.DataFrame(id_list)\nmovie_ids.columns=['Movie_ID']\nmovie_ids.replace('[',np.nan, inplace=True)","9ea57788":"movie_ids.index=s.index","cddeb154":"s=pd.concat((s,movie_ids),axis=1)","0a18af5c":"from imdb import IMDb\nc_list=[]\n# create an instance of the IMDb class\nia = IMDb()\n\n# get a movie and print its director(s)\nfor movie_id in s['Movie_ID']:\n    try:\n        ids = ia.get_movie(movie_id)\n        country=ids['countries']\n        #print(country)\n        warnings.filterwarnings('ignore')\n    except:\n        country=np.nan\n        #print(country)\n        warnings.filterwarnings('ignore')\n    \n    c_list.append(country)\n\n# show all information that are currently available for a movie\n#print(sorted(the_matrix.keys()))\n\n# show all information sets that can be fetched for a movie\n#print(ia.get_movie_infoset())","6d663993":"country_find=pd.DataFrame(c_list, columns=['country'])\ncountry_find.index=s.index\ncountry_find\ns['country']=country_find","7ba16a84":"s.isnull().sum()","3fdae4f2":"s['country'].fillna('United States', inplace=True)","7b1c0dfa":"s=s.drop('Movie_ID',axis=1)\ns","9f1ff825":"#Orginal s frame\ns","f728ba3c":"#Original df frame\ndf","f3d24742":"s1=s.copy()","6cbc8762":"df1=df.copy()","ec7964d0":"new_list=[]\nudf=lambda x:x.replace('[','').replace(']','').replace(\"'\",\"\")\nfor iv in s1.country:\n    m=str(iv)\n    s=udf(m)\n    new_list.append(s)\n    #print(s)","8d623299":"country=pd.DataFrame(new_list,columns=['country'])\ncountry.index=s1.index","4c247156":"s1['country']=country","4c09f81a":"df1.drop(s1.index, inplace=True)","be9e8a32":"df1=pd.concat((df1,s1), axis=0)","ad9cc156":"df1.sort_index(axis=0, inplace=True)","cb25dfdd":"df1.isnull().sum()","6a3ec6d8":"df1[df1['director'].isna()]['country'].value_counts().head(10).iplot(kind='bar', layout={'plot_bgcolor':'black','paper_bgcolor':'black','font_color':'yellow'},colors='yellow')","2abd5eb0":"show1=df1[df1['country']=='United States']['director'].value_counts().head(15)\nshow1.iplot(kind='bar', \n            layout=({'plot_bgcolor':'black','paper_bgcolor':'black','font_color':'yellow'}),\n            colors='Yellow'\n           )","ee629b33":"df1[df1['country']=='United States']['director'].value_counts().head(15)","eb947a0a":"miss_dir_usa=df1.loc[(df1['director'].isna()) & (df1['country']=='United States')]","412b8c58":"miss_dir_usa.loc[0:3500,'director']='Marcus Raboy'\nmiss_dir_usa.loc[3501:6000,'director']='Jay Karas'\nmiss_dir_usa.loc[6001:8000,'director']='Jay Chapman'\n\n#miss_dir_usa.director.value_counts()\n\n","07e268c1":"df1=df1.drop(miss_dir_usa.index).reset_index(drop=True)","d9325d84":"df1=pd.concat((df1,miss_dir_usa),axis=0)","397ba530":"df1.reset_index(drop=True)","4f683abd":"show2=df1[df1['country']=='United Kingdom']['director'].value_counts().head(15)\n#print(df1[df1['country']=='United Kingdom']['director'].value_counts().head(15))\nshow2.iplot(kind='bar',layout=({'plot_bgcolor':'black','paper_bgcolor':'black','font_color':'yellow'}), colors='yellow', orientation='v', sortbars=True)","d3442440":"miss_dir_uk=df1.loc[(df1['director'].isna()) & (df1['country']=='United Kingdom')]","295d7716":"miss_dir_uk.loc[0:3500,'director']='Edward Cotterill'\nmiss_dir_uk.loc[3501:5500,'director']='Orlando von Einsiedel'\nmiss_dir_uk.loc[5501:6729,'director']='Chris Howe'\n","57bb0df3":"df1=df1.drop(miss_dir_uk.index).reset_index(drop=True)\ndf1=pd.concat((df1,miss_dir_uk),axis=0)\ndf1.reset_index(drop=True)","3ee79fbe":"#Function to impute the director Values:\ndef best_dir(c,df1):\n    dn=df1[df1['country']==c]['director'].value_counts().head(1).to_dict()\n    key, value = list(dn.items())[0]\n    #print('\\n')\n    #print('For country {} the best director is {}'.format(c,key))\n    df1.loc[(df1['director'].isna()) & (df1['country']==c),['director']]=[key]\n    #print('Missing Values for Director are imputed for',c)\n","a8eeb87d":"for count in df1.loc[df1['director'].isna()]['country'].unique():\n    try:\n        best_dir(count,df1)\n        warnings.filterwarnings('ignore')\n    except:\n        pass","9b32cb57":"direc=[]\nnf=df1[df1['director'].isna()]['country'].str.split(',')\nfor i in nf:\n    #print(i[0])\n    direc.append(i[0])    ","6b9cce0f":"sf=pd.DataFrame(direc, columns=['country'])\nsf.index=nf.index\nsf","3f263374":"sl=df1[df1['director'].isna()]","97e67b59":"sl.drop('country',axis=1, inplace=True)","ac0b0e04":"sl['country']=sf","03fe7ae7":"sl.columns","5edd081f":"sl=sl[['show_id', 'type', 'title', 'director', 'cast','country','date_added',\n       'release_year', 'rating', 'duration', 'listed_in', 'description']]","5fba2293":"df1.drop(sl.index, inplace=True)","e9c1f05e":"df1=pd.concat([df1,sl], ignore_index=True)","782a5a70":"for count in df1.loc[df1['director'].isna()]['country'].unique():\n    try:\n        best_dir(count,df1)\n        warnings.filterwarnings('ignore')\n    except:\n        pass","1ac49310":"df1.loc[df1['director'].isna() & df1['country'].str.startswith('Ukr'),['director']]=['Sergey Loznitsa']\ndf1.loc[df1['director'].isna() & df1['country'].str.startswith('Fin'),['director']]=['Selma Vilhunen']\ndf1.loc[df1['director'].isna(),['director']]=['Yorgos Lanthimos']","6f23ee51":"cast_miss=df1[df1['cast'].isna()]\n","fd3d4a52":"sa=[]\nv1=0\nv2=100\nln=int(len(df1[df1['cast'].isna()]['title']))\nln","c25c6099":"import imdb\nia = imdb.IMDb()\nwhile(v1<ln):\n    for nm in df1[df1['cast'].isna()]['title'][v1:v2]:\n        try:\n            search_results = ia.search_movie(nm)\n            warnings.filterwarnings('ignore')\n\n            if search_results:\n                movieID = search_results[0].movieID\n                movie = ia.get_movie(movieID)\n                if movie:\n                    cast = movie.get('cast')\n                    topActors = 5\n                    for actor in cast[:topActors]:\n                        output=(nm,actor['name'])\n                        output=list(output)\n                        sa.append(output)\n                        #print(output)\n        except:\n            pass\n    v1=v1+100\n    v2=v2+100","59b5ce3b":"ex=pd.DataFrame(sa, columns=['Movie','Cast'])\ndfn=pd.DataFrame(ex.groupby('Movie')['Cast'].apply(lambda x:', '.join((x.values))))\ndfn=dfn.reset_index()\ndfn.columns=['title','cast_found']","3b8d9439":"new_df=pd.merge(cast_miss,dfn, on='title',how='left')","b71510db":"new_df.drop('cast',axis=1, inplace=True)","c6e01ec4":"new_df.rename(columns={'cast_found':'cast'}, inplace=True)","919baa93":"new_df=new_df[['show_id', 'type', 'title', 'director', 'cast','country', 'date_added',\n       'release_year', 'rating', 'duration', 'listed_in', 'description']]","74079d32":"df1.drop(cast_miss.index, inplace=True)","f9ee9e72":"df1=pd.concat([df1,new_df], ignore_index=True)","7a2773f2":"df1[df1['cast'].isna()] # Still Missing Cast","9d66afe3":"#Function to impute the still missing cast Values:\ndef best_cast(c,df1):\n    db=df1[df1['country']==c]['cast'].value_counts().head(1).to_dict()\n    key, value = list(db.items())[0]\n    #print('\\n')\n    #print('For country {} missing cast imputed is {}'.format(c,key))\n    df1.loc[(df1['cast'].isna()) & (df1['country']==c),['cast']]=[key]\n    #print('Missing Values for Cast are imputed for',c)","7fa78f11":"for count in df1.loc[df1['cast'].isna()]['country'].unique():\n    try:\n        best_cast(count,df1)\n    except:\n        pass","f24ee50b":"df1.loc[df1['cast'].isna(),['cast']]=['Generic Character']","5b1435e2":"cr=pd.DataFrame(df1[['type','rating']].value_counts().groupby('rating').sum().sort_values(ascending=False)).reset_index()\ncr.columns=['Ratings','Content_Count']","81268e7f":"\n\nfig=px.bar(cr,x='Ratings',y='Content_Count' ,color='Ratings')\nfig.update_layout(\n    title=\"Count of Content According to Ratings\",\n    xaxis_title=\"Ratings\",\n    yaxis_title=\"Count\",\n    legend_title=\"Rating Type\",\n    font=dict(family=\"Arial\",size=15))\n\nfig.layout.template = 'plotly_dark'\nfig.show()\n\n\n\n","45e15d3a":"fig = px.pie(cr, values='Content_Count', names='Ratings', title='% Distribution by Rating')\nfig.layout.template = 'plotly_dark'\nfig.show()","0208dba6":"fig,axes=plt.subplots(figsize=[15,8])\nsns.countplot(x=df1['rating'],\n              hue=df1['type'],\n              palette=\"pastel\",\n              ax=axes,hue_order=['Movie','TV Show']\n              \n             );\n","1e15334f":"dirct=df1[['director','country']].value_counts().head(10)\nfig=dirct.iplot(kind='bar', \n            color='Yellow',\n            layout=({'plot_bgcolor':'black', 'paper_bgcolor':'black', 'font_color':'#ADD8E6'}), \n            colors='Yellow',\n            title='10 Most Frequently Appearing Directors across the world',\n            yTitle='Number of movies Directed',\n            xTitle='Directors')\n\n","6e60c259":"fig=px.histogram(df['type'],\n                 color=df['type'],\n                 color_discrete_map={\n                     \"TV Show\":\"#ADD8E6\",\n                     \"Movie\":\"Yellow\"},\n                 labels=[] \n                \n                )\n\nfig.update_layout(\n    title=\"Count of Different Kind of Content on Netflix\",\n    xaxis_title=\"Type of Content\",\n    yaxis_title=\"Count\",\n    legend_title=\"Type\",\n    font=dict(\n        family=\"Helvetica\",\n        size=13))\n\nfig.layout.template = 'plotly_dark'\n\nfig.show()","3c13f1bf":"color=['#ADD8E6','Yellow']\ntrace=go.Pie(values=df1['type'].value_counts(),\n             labels=['Movie','TV Show'],\n             marker=dict(colors=color, line=dict(color=\"#2d2d2d\", width=2)),\n             title='% Distribution',\n             titleposition='bottom center',\n             pull=[0.1, 0]\n             \n            )\nfig=go.Figure(data=[trace])\nfig.layout.template = 'plotly_white'\n\niplot(fig)","10fa9adf":"df1['date_added']=pd.to_datetime(df1['date_added'])","8d86b4a2":"df1['Day_Added']=df1['date_added'].dt.day","4ebf390c":"df1['Month_Added']=df1['date_added'].dt.month","edc88bc1":"df1['Year_Added']=df1['date_added'].dt.year","10d50e34":"ya=df1['Year_Added'].value_counts().to_frame().reset_index().rename(columns={'index':'Year','Year_Added':'Count'})","56185d9d":"fig=px.bar(data_frame=ya,x='Count',y='Year',\n       orientation='h',\n       color='Year',\n       color_continuous_scale=px.colors.sequential.Darkmint_r)\n\nfig.add_scatter(x=ya['Count'],y=ya['Year'],marker={'color':'yellow'}, showlegend=False)\n\nfig.update_layout(\n    title=\"Addition of Content on Netflix by Year\",\n    xaxis_title=\"Count of Contents\",\n    yaxis_title=\"Year\",\n    legend_title=\"Year\",\n    font=dict(\n        family=\"Helvetica\",\n        \n        size=13))\n\nfig.layout.template = 'plotly_dark'\n\nfig.iplot()","4c246801":"cy=df1['release_year'].value_counts().head(20).sort_values(ascending=False).to_frame().reset_index().rename(columns={'index':'Year','release_year':'Count'})\n\n\nfig=px.bar(data_frame=cy,x='Count',y='Year',\n       orientation='h',\n       color='Year',\n       color_continuous_scale=px.colors.sequential.Darkmint_r)\n\nfig.add_scatter(x=cy['Count'],y=cy['Year'],showlegend=False, marker={'color':'yellow'})\n\nfig.update_layout(\n    title=\"Release of Content on Netflix by Year\",\n    xaxis_title=\"Count of Contents\",\n    yaxis_title=\"Year\",\n    legend_title=\"Year\",\n    font=dict(\n        family=\"Helvetica\",\n        size=13))\n\nfig.layout.template = 'plotly_dark'\n\nfig.iplot()\n","3b21ccca":"#This code would take aroud 10 - 15 min to scrap the weekday, since there are large number of records, so be patient\ns=[]\nfor i in range(0,len(df1)):\n    a=datetime.strptime(df1['date_added'].astype(str)[i], '%Y-%m-%d').weekday()\n    s.append(a)","e1b1084b":"import calendar\nday=[]\nfor n in s:\n    day_name=calendar.day_name[n]\n    day.append(day_name)\n   ","a2ec276d":"day_week=pd.DataFrame(day,columns=['Day_of_Week'])","e0721103":"df1=pd.concat((df1,day_week),axis=1)","8779b472":"rwd=pd.DataFrame(df1.groupby(by='Day_of_Week')['type'].value_counts()).rename(columns={'type':'Count'}).reset_index()\nrwd=rwd.sort_values(by='Count',ascending=False)","03b90bb1":"#fig,axes=plt.subplots(2,1, figsize=[10,8])\nfig=px.bar(data_frame=rwd,\n       x='Day_of_Week',\n       y='Count', \n       color='type',\n       color_discrete_map={'Movie':'#ADD8E6','TV Show':'Yellow'})\n\n\n\nfig.update_layout(\n    title=\"Release of Content on Netflix by Weekday\",\n    yaxis_title=\"Count of Content\",\n    xaxis_title=\"Day of Week\",\n    legend_title=\"Type of Content\",\n    font=dict(\n        family=\"Arial\",\n        size=13))\n\nfig.layout.template = 'plotly_dark'\n\nfig.iplot()","1d9f6a55":"top_c=df1[df1['type']=='Movie']['country'].value_counts().head(10).to_frame().reset_index().rename(columns={'index':'country','country':'count'})\n\ncolor=['#ADD8E6','Yellow','#FFDFD3','#E2F0CB','Green','Orange','Pink','779ECB','Aqua','FF6961']\ntrace=go.Pie(values=top_c['count'],\n             labels=top_c['country'],\n             marker=dict(line=dict(color=\"#2d2d2d\", width=2), colors=color)\n            )\n\nfig=go.Figure(data=[trace])\n\nfig.layout.template = 'plotly_dark'\n\nfig.update_layout(\n    title=\"% Distribution of Movies by Country\",\n    legend_title=\"Countries\",\n    font=dict(\n        family=\"Arial\",\n        size=15))\n\niplot(fig)","83f62cb9":"top_s=df1[df1['type']=='TV Show']['country'].value_counts().head(10).to_frame().reset_index().rename(columns={'index':'country','country':'count'})\n\ncolor=['#ADD8E6','Yellow','#FFDFD3','#E2F0CB','Green','Orange','Pink','779ECB','Aqua','FF6961']\ntrace=go.Pie(values=top_s['count'],\n             labels=top_s['country'],\n             marker=dict(line=dict(color=\"#2d2d2d\", width=2), colors=color)\n            )\n\nfig=go.Figure(data=[trace])\n\nfig.layout.template = 'plotly_dark'\n\nfig.update_layout(\n    title=\"% Distribution of TV Shows by Country\",\n    legend_title=\"Countries\",\n    font=dict(\n        family=\"Arial\",\n        size=15))\n\niplot(fig)","8fd71a72":"Movie_df=df1[df1['type']=='Movie']\nShow_df=df1[df1['type']=='TV Show']","7b46748f":"n=15\ntop_cast=Show_df[Show_df['cast']!=np.nan].set_index('title').cast.str.split(', ',expand=True).stack().reset_index(level=1, drop=True).value_counts().head(n).to_frame().reset_index().rename(columns={'index':'cast',0:'count'})\ntop_cast_m=Movie_df[Movie_df['cast']!=np.nan].set_index('title').cast.str.split(', ',expand=True).stack().reset_index(level=1, drop=True).value_counts().head(n).to_frame().reset_index().rename(columns={'index':'cast',0:'count'})\n\nfig1=px.funnel(data_frame=top_cast,y='cast',x='count',\n       orientation='h',\n       color='count')\n\n\nfig2=px.funnel(data_frame=top_cast_m,y='cast',x='count',\n       orientation='h',\n       color='count')\n\n\n\nfig1.update_layout(\n    title=\"Top {} Actor\/Actress from TV Shows\".format(n),\n    yaxis_title=\"Actors\/Actress\",\n    xaxis_title=\"Number of Shows Done\",\n    legend_title=\"Actors\/Actress\",\n    font=dict(\n        family=\"Arial\",\n        size=15))\n\n\nfig2.update_layout(\n    title=\"Top {} Actor\/Actress from Movies\".format(n),\n    yaxis_title=\"Actors\/Actress\",\n    xaxis_title=\"Number of Movies Done\",\n    legend_title=\"Actors\/Actress\",\n    font=dict(\n        family=\"Arial\",\n        size=15)     \n)\n\n\nfig1.layout.template = 'plotly_dark'\nfig2.layout.template = 'plotly_dark'\n\nfig1.iplot()\nfig2.iplot()\n","50c6fd1f":"Movie_df.rename(columns={'duration':'duration_(min)'}, inplace=True)","8a696902":"Movie_df['duration_(min)']=Movie_df['duration_(min)'].str.replace(' min','').astype(int)","de26bb24":"#fig1=px.histogram(data_frame=Movie_df,x='duration_(min)')\n\nfig1,axes=plt.subplots(figsize=[12,10])\nfig1=sns.histplot(x=Movie_df['duration_(min)'], kde=True,fill=True)\nfig1=sns.set(style=\"darkgrid\")\n","3c3fb753":"N=15\nimdb_ratings=pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb ratings.csv',usecols=['weighted_average_vote'])\nimdb_titles=pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb movies.csv', usecols=['title','year','genre'])\nratings = pd.DataFrame({'Title':imdb_titles.title,\n                    'Release Year':imdb_titles.year,\n                    'Rating': imdb_ratings.weighted_average_vote,\n                    'Genre':imdb_titles.genre})\n\n\n\nratings=ratings.drop_duplicates(subset=['Title','Release Year','Rating'])\nratings=ratings.dropna()\n\nfinal_data=Movie_df.merge(ratings,left_on='title',right_on='Title',how='left')\nfinal_data=final_data.sort_values(by='Rating', ascending=False)\n\ntop_rated=final_data[0:N]\n\nfig =px.sunburst(\n    top_rated,\n    path=['title','country'],\n    values='Rating',\n    color='Rating',\n    #color_discrete_sequence=px.colors.sequential.Darkmint_r\n    color_continuous_scale=px.colors.sequential.YlGnBu\n\n)\n    \nfig.update_layout(\n    title=\"Top {} Highly Rated Movies\".format(N),\n    legend_title=\"Rating\",\n    font=dict(\n        family=\"Arial\",\n        size=13))\n\nfig.layout.template = 'plotly_dark'\nfig.show()\n","3fc8a111":"most_appear_india=Movie_df[(Movie_df['cast']!=np.nan) & (Movie_df['country']=='India')].set_index('title').cast.str.split(', ',expand=True).stack().reset_index(level=1, drop=True).value_counts().head(50).to_frame().reset_index().rename(columns={'index':'cast',0:'count'})\n\n\nfrom wordcloud import WordCloud\nwordcloud = WordCloud(background_color=\"white\", width=1400, height=950).generate(\" \".join(most_appear_india.cast))\n\nplt.figure(figsize=(14,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.figure(1, figsize=(12, 12))\nplt.show()","7fd629d7":"## We have 10 values missing in Date Added Section. We can handle these missing values by performing MODE operation on Date added and replacing all the missing dates with the most occuring date.","c4072b49":"# Top 10 countries contributing to the Movie Sector:","878bb851":"### So for all those cells where directors are missing specifically for USA, we would replace them with these top 15 directors.","8bc80f02":"# 10 most frequently appearing directors across the platform, irrespective of country:","9afd6a75":"## From the above graph we can observe that maximum number(118) of content gets added to platform on January 1,2020 and also this would be our Mode value as well.Let's go ahead and replace missing values with Mode value","b10c3424":"## Let's analyze on which day most of the content gets released.","d61cc71e":"## From the above Graph we can say that United States is the largest content producer in the world followed by India, and speaking precisely, India majorly produces movies and less of TV shows. We can therfore use this knowledge and try to fill in the missing values in Country Column based on this intel.","89dead04":"## Distribution of TV Show by Country:","991ff22e":"# Let's look at Cast:","b36861df":"# If you have liked my work, please do upvote it, since I am a beginner and that would motivate me to keep going :)","c26729e8":"# Average Duration around Movies on Netfix","69e43841":"- Content Addition By Year","46bca3a5":"<h1><center><i>'Let's Netflix and Chill'<\/i><\/center><\/h1>","f9d21e62":"## Be careful with the release year and year added, release year basically tells the year in which the content is released, year added signifies the year on which the content got added to the platform i.e. Netflix","ff3cdc4b":"# Handling Missing Values for Directors:","ab895432":"## Now for remaining countries we will try to impute the missing values for directors with their mode.","c0329f78":"## We can determine the ratings on the basis of values in listed_in column","6824f77e":"## Data Cleaning and Initial Level Analysis","9d2cda9a":"# Wordcloud of Most Appearing Indian Actors\/Actress:","b689fffd":"# <h>Top 15 Directors from USA <\/h>","14d856cc":"## Now we would Handle Missing values for director in United Kingdom:","8f266d0f":"# Let's divide our Dataframe into 2 categories: For TV Shows and for Movies","0bf970d7":"## Country Analysis for filling the missing country values:","9fca3ea0":"- Parents tend to buy other subscriptions for their children, where content is kid\/children friendly\n- Netflix should increase it's offering in Kids section as well, to increase the market share and coverage.","160354a3":"## - Content According to Ratings","7e0b0054":"# Rising Popularity of Netflix across Years:","0a036106":"## Out of 11 Features above only 1 is having INT data type and every other feature is of object type","661222e2":"## From the above 2 graph, it's pretty evident that most of the content is meant for adult, so there are 2 insights out of this:","bf3dd62e":"# The TOP N Movies:","4e230ee7":"## From above dataframe we can observe that most of the movies are listed in Documentaries and hence this might be the reason that the cast is still missing for them. So we would go ahead and reaplce the NaN with 'Generic Character' in cast column"}}