{"cell_type":{"58298089":"code","91c19a18":"code","70d70e34":"code","6081dfdd":"code","1519d576":"code","a954af68":"code","0d0c5d52":"code","7c163dc3":"code","29490d38":"code","9ed15d99":"code","b980c5c3":"code","7b19ac18":"code","99edb3f0":"code","195700be":"code","221db6a7":"code","0c6a96f9":"code","49613e95":"code","4df2f874":"code","cc48e901":"code","2af97f2d":"code","a2d3afd6":"code","36dd2165":"code","7163d4fd":"code","de477462":"code","cc9a8e4f":"code","6a6ee523":"code","e3dd4855":"code","5fbb550c":"code","cf80c7ff":"code","3bc7082e":"code","72143e2a":"code","98be6b92":"markdown","5e38bb0a":"markdown","5b5a487a":"markdown","aeaa915f":"markdown","7b2222ef":"markdown"},"source":{"58298089":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","91c19a18":"data0 = pd.read_csv(\"..\/input\/pizza-price-prediction\/pizza_v1.csv\")\ndata0","70d70e34":"print(data0['topping'].value_counts())\nprint()\nprint(data0['variant'].value_counts())\nprint()\nprint(data0['size'].value_counts())\nprint()\nprint(data0['company'].value_counts())","6081dfdd":"print(data0.columns.to_list())","1519d576":"price=[]\nfor item in data0['price_rupiah']:\n    price+=[int(item.replace('Rp','').replace(',',''))]\ndata0['price_rupiah']=price","a954af68":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","0d0c5d52":"data1=df\ndata1","7c163dc3":"data1.columns","29490d38":"data1.iloc[:,:].hist(figsize=(15,15))\nplt.show()","9ed15d99":"datap=data1[['company','price_rupiah','diameter','topping','variant','size','extra_sauce','extra_cheese']]\nsns.pairplot(datap)\nplt.show()","b980c5c3":"target=['price_rupiah']\ndataY=data1[target]\ndataX=data1.drop(target,axis=1)","7b19ac18":"print(dataY[0:5].T)\nprint()\nprint(dataX[0:5].T)","99edb3f0":"n=len(dataX)\nN=[]\nfor i in range(n):\n    N+=[i]\nrandom.seed(2021)\nrandom.shuffle(N)","195700be":"trainX=dataX.loc[N[0:(n\/\/4)*3]]\ntrainY=dataY.loc[N[0:(n\/\/4)*3]]\ntestX=dataX.loc[N[(n\/\/4)*3:]]\ntestY=dataY.loc[N[(n\/\/4)*3:]]","221db6a7":"df_columns = list(dataX.columns)\nprint(df_columns)","0c6a96f9":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","49613e95":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","4df2f874":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","cc48e901":"train_feat_df = to_feature(trainX)\ntest_feat_df = to_feature(testX)","2af97f2d":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","a2d3afd6":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","36dd2165":"y = trainY\nprint(y.shape)\nprint(type(y))","7163d4fd":"ydf=pd.DataFrame(y)\nydf","de477462":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)\n","cc9a8e4f":"print(target)","6a6ee523":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","e3dd4855":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","5fbb550c":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\nPRED = pred0[4]\nPRED[0:5]","cf80c7ff":"ans=[]\nfor i in range(len(testY)):\n    ans+=[testY.iloc[i,0]]\nANS=np.array(ans)\nANS[0:5]","3bc7082e":"fig, ax = plt.subplots(figsize=(8,8))\nsns.histplot(PRED, label='Test Predict', ax=ax, color='black',bins=20)\nsns.histplot(oof, label='Train Predict', ax=ax, color='C1',bins=20)\nax.legend()\nax.grid()","72143e2a":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0],fontsize=20)\nax.set_xlabel('actual price',fontsize=12)\nax.set_ylabel('predicted price',fontsize=12)\nax.scatter(ANS,PRED)","98be6b92":"# Data preparation","5e38bb0a":"# Visualize Importance","5b5a487a":"# Model","aeaa915f":"# Target setting","7b2222ef":"### 'Diameter', 'Variant', and 'Size' are the top 3 important factors for 'Price_rupiah',  "}}