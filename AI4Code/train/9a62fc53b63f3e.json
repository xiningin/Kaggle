{"cell_type":{"b69361de":"code","51ec098e":"code","f4d64a6d":"code","1f519353":"code","0dcf6ad0":"code","3f73c73a":"code","de3fc268":"code","f2d6a281":"code","f3937452":"code","29b153e3":"code","9276c8ce":"code","e68cc1d0":"markdown","aafe3b7f":"markdown","552d98a7":"markdown","504e19ea":"markdown"},"source":{"b69361de":"import pandas as pd\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import datasets, linear_model\nimport seaborn as sns\nimport matplotlib.pyplot as plt","51ec098e":"col_name = ['class','left_weight','left_distance','right_weight','right_distance']\nDS=pd.read_csv('..\/input\/balance-datasets\/balance.csv',header=None,names=col_name)\n\nDS.head()","f4d64a6d":"DS.isnull().sum()\nDS.count()","1f519353":"d= DS.iloc[:,1:4].values\ntarget=DS.iloc[0].values\n#X = np.array([d,target])\nprint(d)\nprint(target)","0dcf6ad0":"#plt.scatter(b_data[:0],target[:1],label='True Position')\n#plotting of above points\nimport matplotlib.pyplot as plt\n\n#labels = range(1, 11)  \n\n#plt.figure(figsize=(10, 7))  \n#plt.subplots_adjust(bottom=0.1) \n \nplt.scatter(d[:,0],d[:,1], label='True Position')\n\nplt.show()  ","3f73c73a":"Y = DS.iloc[:,0].values\nlabelencoder_Y = LabelEncoder()\nY = labelencoder_Y.fit_transform(Y)\nprint(Y)","de3fc268":"#drawing dendogram\nimport scipy.cluster.hierarchy as shc\n\nplt.figure(figsize=(10, 7))  \nplt.title(\"Balance Dendograms\")  \ndend = shc.dendrogram(shc.linkage(d, method='ward')) ","f2d6a281":"#Now clustering the data points\nfrom sklearn.cluster import AgglomerativeClustering\n\ncluster = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='complete')  \ncluster_labels=cluster.fit_predict(d)  \nprint(cluster.labels_) \nprint(cluster_labels) \n\nplt.scatter(d[:,0],d[:,1], c=cluster_labels, cmap='rainbow')","f3937452":"# Using Silhouette_score\nfrom sklearn.metrics import silhouette_score\nsilhouette_avg = silhouette_score(d, cluster_labels)\nprint(\"For n_clusters =\", 2,\n          \"The average silhouette_score is :\", silhouette_avg)","29b153e3":"#clustering\nfrom sklearn.cluster import AgglomerativeClustering\n\ncluster = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')  \nd1=cluster.fit_predict(d) \nprint(d1) ","9276c8ce":"#Plotting \nplt.figure(figsize=(10, 7))  \nplt.scatter(d[:,0], d[:,1], c=cluster.labels_, cmap='rainbow')","e68cc1d0":"# Apply agglomerative clustering using single linkage method","aafe3b7f":"# Implement Pre-processing functions\n- Check for NULL values in the dataset. If any NULL value is present then treat it \naccordingly.\n- extract only feature columns from the dataset.","552d98a7":"# Determine the number of clusters using dendogram. Use single linkage method","504e19ea":"# Import Library"}}