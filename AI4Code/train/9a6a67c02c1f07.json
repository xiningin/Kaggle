{"cell_type":{"59f50039":"code","7d3ac8bc":"code","ab8d2d4f":"code","c276e67d":"code","6cb7e22b":"code","dc85edd1":"code","e6af1fd4":"code","95cc6de0":"code","b19900fa":"code","28a84c73":"code","16ff24a0":"code","0a79b57a":"code","ded8d5ac":"code","9e681aba":"code","e608340e":"code","d7a4378f":"code","711a9dbc":"code","a75896ec":"code","f65d51b8":"code","2d71a43d":"code","b9262c36":"code","cff8e5db":"code","7ed17e41":"code","f2041bd0":"code","3cf5d26d":"code","48b40014":"code","ff2d2326":"code","29a91343":"code","a5dcc0df":"code","dfc38da4":"code","e4f9f151":"code","e4c4b330":"code","12717fea":"code","ba76e57d":"code","8508fd61":"code","6810077f":"code","b17d156b":"code","80695c20":"code","e3ae407d":"code","6e4e8d80":"code","e0d651f8":"code","a503a5d5":"code","25d3f59a":"code","df215eb2":"code","6e922fce":"code","d1b4b6ae":"code","9cacfb26":"code","0fd1725c":"code","45ef98aa":"code","08cfdcf8":"code","550402e2":"code","bf6d56fb":"code","265f2ca3":"code","92f3ba18":"code","fc9e3482":"code","308ea477":"code","cecef9d8":"code","bc287104":"code","35f3c403":"code","4b2e4766":"code","b0b423d9":"code","fb114dc9":"code","6db50ff2":"code","3864053b":"code","a8463176":"markdown","dbd089d6":"markdown","ef63f392":"markdown","28cdaaeb":"markdown","c844aecd":"markdown","0beff218":"markdown","36065f4c":"markdown","c4cf68b3":"markdown","fd678e3e":"markdown","19657967":"markdown","33ae2d4a":"markdown","9424c614":"markdown","2ef4ce03":"markdown","2684e4f7":"markdown","e20e9ceb":"markdown","e4bc7ba0":"markdown","138e7cbe":"markdown","e1b389f1":"markdown","5ff6d07d":"markdown","342c6a40":"markdown","bcae7c0c":"markdown","ef52b72a":"markdown","8f2db3c8":"markdown","cb6d8f53":"markdown","711d05bd":"markdown","239f5b99":"markdown","263c6806":"markdown","ca8f746e":"markdown","a70cada0":"markdown"},"source":{"59f50039":"print(\"This is a code cell.\")\nprint(\"Hello world\")\nprint(f\"Hello world, time is {3} o'clock\")","7d3ac8bc":"# Simple variable assignment\n# This is a comment\n# x variable like 3x = 5\nx = 5\/3","ab8d2d4f":"y = x*3\nprint(y)","c276e67d":"# simple calculations\n# ** means exponential\nprint(2**5)\nprint(2**3*3) # computer 2**3 first, 8 is multiplied with 3\nprint(1\/2+1) # 1\/2 first, +1 computed secondly","6cb7e22b":"print(2***5) # unfortunately tetration is not built-in Python","dc85edd1":"# browse the Cats vs dog competition","e6af1fd4":"# == vs =\na = 2 # we let a be 2","95cc6de0":"type(a)","b19900fa":"dir(a)","28a84c73":"# == is checking whether a variable is equal to whatever on the right side of ==\na == 3","16ff24a0":"s = 'David'\nprint(type(s))","0a79b57a":"False is not True","ded8d5ac":"a = 5.\ntype(a)","9e681aba":"a = 7\ntype(a)","e608340e":"s1 = [a, s]\nprint(s1)","d7a4378f":"type({2,3})","711a9dbc":"dict1 = {'Shuhao': 'instructor'}","a75896ec":"# simple logical checking == or using \"is\"\ndict1['Shuhao'] == 'student'","f65d51b8":"1 is 0","2d71a43d":"# simple if-then condition\n# flow control\n\nif 1 is 1:\n    print(\"1 is 1\")\n\nif 1 is 0:\n    print(\"1 is 0\")","b9262c36":"# range(a,b) the integer greater than or equal to a but less than b\nfor i in range(0,5):\n    if i > 2: # press Tab to indent\n        print(i)","cff8e5db":"import os\nimport numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random","7ed17e41":"dir(pandas)","f2041bd0":"dir(pd)","3cf5d26d":"import site\nsite.getsitepackages()","48b40014":"help(pd)","ff2d2326":"print(os.listdir(\"..\/input\/dogs-vs-cats\/\"))","29a91343":"!unzip -q '..\/input\/dogs-vs-cats\/train.zip'\n!unzip -q '..\/input\/dogs-vs-cats\/test1.zip'","a5dcc0df":"filenames = os.listdir(\".\/train\")\nprint(filenames[:10])","dfc38da4":"categories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(0)\n    else:\n        categories.append(1)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})\nprint(df.head(20))","e4f9f151":"len(filenames)","e4c4b330":"from keras.preprocessing.image import load_img","12717fea":"sample = random.choice(filenames)\nimage = load_img(\".\/train\/\"+sample)\nfig = plt.figure()\nfig.set_size_inches(6,6)\nplt.imshow(image);","ba76e57d":"from keras import layers, applications, optimizers, callbacks\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation,GlobalMaxPooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import VGG16\nfrom keras.models import Model, load_model\nfrom keras.utils import plot_model, to_categorical\n\nimage_size = 224\ninput_shape = (image_size, image_size, 3)\n\nepochs = 6\nbatch_size = 16\n\npre_trained_model = VGG16(input_shape=input_shape, include_top=False, weights=\"imagenet\")\n    \nfor layer in pre_trained_model.layers[:15]:\n    layer.trainable = False\n\nfor layer in pre_trained_model.layers[15:]:\n    layer.trainable = True\n    \nlast_layer = pre_trained_model.get_layer('block5_pool')\nlast_output = last_layer.output\n    \n# Flatten the output layer to 1 dimension\nx = GlobalMaxPooling2D()(last_output)\n# Add a fully connected layer with 512 hidden units and ReLU activation\nx = Dense(512, activation='relu')(x)\n# Add a dropout rate of 0.3\nx = Dropout(0.3)(x)\n# Add a final sigmoid layer for classification\nx = layers.Dense(1, activation='sigmoid')(x)\n\nmodel = Model(pre_trained_model.input, x)\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=optimizers.Adam(lr=1e-4),\n              metrics=['accuracy'])\n\nmodel.summary()","8508fd61":"plot_model(model, to_file='\/model_vgg16.png', show_shapes=True)","6810077f":"df['category'] = df['category'].astype('str')","b17d156b":"train_df, validate_df = train_test_split(df, test_size=0.1)\ntrain_df = train_df.reset_index()\nvalidate_df = validate_df.reset_index()\n\n# validate_df = validate_df.sample(n=100).reset_index() # use for fast testing code purpose\n# train_df = train_df.sample(n=1800).reset_index() # use for fast testing code purpose\n\ntotal_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]","80695c20":"train_datagen = ImageDataGenerator(\n    rotation_range=16,\n    rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest',\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    target_size=(image_size, image_size),\n    batch_size=batch_size\n)\n\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \".\/train\/\",  \n    x_col='filename',\n    y_col='category',\n    class_mode='binary',\n    target_size=(image_size, image_size),\n    batch_size=batch_size\n)","e3ae407d":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \".\/train\/\", \n    x_col='filename',\n    y_col='category',\n#     class_mode='binary'\n)\nplt.figure(figsize=(12, 12))\nfor i in range(0, 9):\n    plt.subplot(3, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","6e4e8d80":"test_filenames = os.listdir(\".\/test1\/\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames[:128]\n})\n\nnb_samples = test_df.shape[0]\ntest_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \".\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    batch_size=batch_size,\n    target_size=(image_size, image_size),\n    shuffle=False\n)","e0d651f8":"# this may take a while\npredict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))\nthreshold = 0.5\ntest_df['category'] = np.where(predict > threshold, 1,0)","a503a5d5":"sample_test = test_df.sample(n=9).reset_index()\nsample_test.head()\nplt.figure(figsize=(12, 12))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\".\/test1\/\"+filename, target_size=(256, 256))\n    plt.subplot(3, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')')\nplt.tight_layout()\nplt.show()","25d3f59a":"model = load_model('..\/input\/vgg16catsvsdogs\/model_0_vgg16.h5')\nmodel.summary()","df215eb2":"# this may take a while\npredict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))\nthreshold = 0.5\ntest_df['category'] = np.where(predict > threshold, 1,0)","6e922fce":"sample_test = test_df.sample(n=9).reset_index()\nsample_test.head()\nplt.figure(figsize=(12, 12))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\".\/test1\/\"+filename, target_size=(256, 256))\n    plt.subplot(3, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')')\nplt.tight_layout()\nplt.show()","d1b4b6ae":"# example of scalar, vector, matrix\ns = 1.34992","9cacfb26":"v = [1, 3, 5.2]\nprint(v)","0fd1725c":"m = [[1,3], [8,9]]\nprint(m)","45ef98aa":"m = np.array(m)\nprint(type(m))\nprint(m)","08cfdcf8":"# example of imshow\na = np.array([[0,4], [2,10]])\nplt.imshow(a);","550402e2":"pokemon_filename = os.listdir(\"..\/input\/pokemon-images-dataset\/pokemon_jpg\/pokemon_jpg\/\")","bf6d56fb":"random_pokemon = random.choice(pokemon_filename)\nG = plt.imread(\"..\/input\/pokemon-images-dataset\/pokemon_jpg\/pokemon_jpg\/\"+random_pokemon)\nplt.imshow(G)","265f2ca3":"G","92f3ba18":"m.shape","fc9e3482":"G.shape # 3 represents the Red, Green, Blue color ","308ea477":"# indexing\nG1 = G[:,:,0] # take the red channel","cecef9d8":"G1.shape","bc287104":"# show only 1 color channel\nplt.imshow(G1)","35f3c403":"pkmn = pd.read_csv('..\/input\/pokemon\/Pokemon.csv')","4b2e4766":"pkmn.sample(20)","b0b423d9":"sns.countplot(pkmn['Generation']) # sns means seaborn","fb114dc9":"pkmn = pkmn.drop(['Generation', 'Legendary'],1)","6db50ff2":"sns.jointplot(x=\"HP\", y=\"Speed\", data=pkmn);","3864053b":"sns.jointplot(x=\"Attack\", y=\"Defense\", data=pkmn, kind='hex');","a8463176":"# How computer learns?\n\nLet us load some pokemon data.","dbd089d6":"# G is a tensor!","ef63f392":"# Math Circle Fall 2020 Introduction\n\nWelcome to a math circle session like you have never seen before! Today we will learn how computers learn to tell cats from dogs using machine learning! and some Python language.\n\n![](https:\/\/www.python.org\/static\/community_logos\/python-logo-master-v3-TM.png)\n\nIf you have already registered on Kaggle, now please click the **COPY and EDIT** button on the upper right corner.\n![](https:\/\/sites.wustl.edu\/scao\/files\/2020\/10\/Screen-Shot-2020-10-25-at-1.09.19-PM.png)","28cdaaeb":"# Preprocessing the data for the model","c844aecd":"# Test if our model can recognize this image!","0beff218":"## Let this model see the images again and check the results","36065f4c":"## Features visualization","c4cf68b3":"## Let us load an image from Pokemon dataset","fd678e3e":"The Generation and Legendary variables were added to the dataset.\nWe are going to add a step here to drop the variables so that the presentation is simpler.","19657967":"# Summary:\n\n1. Computer represents data as vector, matrix, or tensor.\n2. Computer learns how to classify images using its features.\n3. Our Neural network model (VGG16) uses mathematical operations to extract features from images.\n\nEmail: s.cao@wustl.edu","33ae2d4a":"In a computer system, we need to represent \"cat\" or \"dog\" these abstract words into 0s and 1s so that computer can understand! We store our data in a Dataframe (like the inventory list in Minecraft).","9424c614":"# How this computer algorithm achieves that?!\nlong story...first we have to learn how computer represent images.","2ef4ce03":"# Now let's load a trained model\n\nImaging we have spent three days doing practice exam for the actual exam!","2684e4f7":"## Now let us go back to the VGG16 model!","e20e9ceb":"## computer stores these images as tensors!\n\nThe name of the software package we are using is called tensorflow!\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/1\/11\/TensorFlowLogo.svg\/1200px-TensorFlowLogo.svg.png)","e4bc7ba0":"Let us unzip the compressed images in the `train.zip` and `test1.zip` (this may take a while).","138e7cbe":"This a markdown cell. We can write words in this cell. \n\n## Headers\nHello\n\n### smaller header","e1b389f1":"## But what is G????","5ff6d07d":"![](https:\/\/sites.wustl.edu\/scao\/files\/2020\/10\/linear_dogs.jpg)\n\n### Computer stores image as a \"matrix\"","342c6a40":"By just looking at a Pokemon's attributes (features), we will know which pokemon it is without knowing its name.","bcae7c0c":"## Augment the data","ef52b72a":"# Logic\nComputer are really good at computing (recognizing numbers), following **EXACT and CLEAR** instructions. However, computer is not so good at many things (used to). For examples, recognizing cats and dogs from photos. \n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/3362\/media\/woof_meow.jpg)","8f2db3c8":"# Computer can learn from examples!\n\nJust like us! Imagine we are preparing an exam, teachers will give us some practice exams (with answers available), we will train ourselves by doing these practice problems, honing our skills, then in the actual exam, we will be able to tackle exam problems without knowing the answer beforehand (hopefully). The examples are call data.\n\nFirst let us load some packages into our system.","cb6d8f53":"## Pretty accurate! isn't it","711d05bd":"Now let us view a sample image (randomly chosen).","239f5b99":"## Prepare the data","263c6806":"## check prediction results\n\nWithout training, the model just assigns every images it sees as a \"dog\" (\"0\" label).","ca8f746e":"![Washu Math](https:\/\/sites.wustl.edu\/scao\/files\/2020\/10\/Screen-Shot-2020-10-25-at-1.03.49-PM.png)\n","a70cada0":"# Deep learning model"}}