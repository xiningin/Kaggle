{"cell_type":{"d1ea279a":"code","28552387":"code","f13924c2":"code","206b249a":"code","8baea011":"code","4eafc069":"code","c81d8893":"code","3b6a7930":"code","7150d88f":"code","bf400a40":"code","1db55959":"code","d0a5a061":"code","7e4d2ad4":"code","a9a7cb15":"code","3a7983be":"code","42fd283c":"code","593819a3":"code","df5f1db3":"code","9d32038f":"code","1d22c2a9":"code","06eed55e":"code","abe55e68":"code","78479c4f":"code","5a6c1361":"code","f031df56":"code","c54466ec":"code","5062e5f3":"code","9a2a9e8a":"code","a5ead55d":"code","b85815a4":"code","cbe36958":"code","d8668dd0":"code","1a97143c":"code","fa4ed978":"code","3ea08803":"code","92de2b7a":"code","0923d2e5":"code","d0671b09":"code","ee57a6aa":"markdown","957e7fed":"markdown","63c905a1":"markdown","a9ee8308":"markdown","98f915c7":"markdown","10af90e7":"markdown","b3987568":"markdown","fce46afe":"markdown","62933c4e":"markdown","3aa1cc3e":"markdown","5cc1c007":"markdown","1469a74a":"markdown","ac504b55":"markdown","016d62e7":"markdown","57280f35":"markdown","de00ff85":"markdown","126e83a4":"markdown","0db34aa6":"markdown","30e4b419":"markdown","47f0029e":"markdown","5fd92802":"markdown","27289606":"markdown","1b53f953":"markdown","8e19fc97":"markdown","6c119fc7":"markdown","0d4c23d8":"markdown","3c820ad8":"markdown","d9c12534":"markdown","253973af":"markdown","589e381f":"markdown","7c82b048":"markdown","42d1d8f9":"markdown","4de450e7":"markdown","26a0822d":"markdown","6803003b":"markdown","90254afb":"markdown","b72dfc68":"markdown","92308072":"markdown","1d99d7d0":"markdown","a17d8779":"markdown","cea954ca":"markdown","b9aab9df":"markdown","100fadd7":"markdown","a6d26a98":"markdown","759594f0":"markdown","2dac68ce":"markdown","b737ff6c":"markdown","d29026e8":"markdown","b9115932":"markdown","0f6c6f76":"markdown","87aab17f":"markdown"},"source":{"d1ea279a":"# \u5bfc\u5165\u5e93\u6587\u4ef6\uff0c\u65b9\u4fbf\u540e\u7eed\u8c03\u7528\n\nfrom sklearn.feature_extraction import DictVectorizer   #\u6807\u79f0\u578b\u7279\u5f81\u5411\u91cf\u5316\nfrom sklearn.compose import ColumnTransformer   #\u7279\u5f81\u5217\u5904\u7406\nfrom sklearn.pipeline import Pipeline   #\u6570\u636e\u8f6c\u6362\u3001\u6a21\u578b\u591a\u6b65\u9aa4\u5904\u7406\nfrom sklearn.impute import SimpleImputer   #\u586b\u5145\u7f3a\u5931\u503c\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder   #\u6807\u51c6\u5316\u3001\u5411\u91cf\u5316\nfrom sklearn.model_selection import train_test_split, GridSearchCV   #\u5212\u5206\u8bad\u7ec3\u96c6\u3001\u7f51\u7edc\u68c0\u7d22\uff08\u53c2\u6570\u8c03\u4f18\uff09\nfrom sklearn.tree import DecisionTreeClassifier   #\u51b3\u7b56\u6811\nfrom sklearn.ensemble import RandomForestClassifier   #\u968f\u673a\u68ee\u6797\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier #\u7ebf\u6027\u56de\u5f52\nfrom sklearn.neighbors import KNeighborsClassifier   #KNN\nfrom sklearn.naive_bayes import GaussianNB #\u9ad8\u65afGB\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nfrom folium.plugins import HeatMap\nimport plotly.express as px\nplt.rcParams[\"font.sans-serif\"] = [\"SimHei\"]\nplt.rcParams[\"font.serif\"] = [\"SimHei\"]","28552387":"# \u6570\u636e\u52a0\u8f7d\ndata = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')","f13924c2":"# \u67e5\u770b\u6570\u636e\u57fa\u672c\u4fe1\u606f\ndata.info()\nprint('---------------------------------------------------------------------''\\n'\n      'hotel_bookings\u6570\u636e\u96c6\u4e2d\uff0c\u5171\u6709{}\u4e2a\u6570\u636e\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c\u6709{}\u4e2a\u6570\u636e\u5b57\u6bb5.'.format(*data.shape))","206b249a":"# \u67e5\u770b\u6570\u636e\u524d\u4e94\u884c\ndata.head()","8baea011":"# \u67e5\u770b\u6570\u636e\u63cf\u8ff0\ndata.describe()","4eafc069":"# \u7edf\u8ba1\u7f3a\u5931\u503c\ndata.isnull().sum()","c81d8893":"#\u7edf\u8ba1\u7f3a\u5931\u7387\ndata.isnull().sum()\/data.shape[0]","3b6a7930":"# \u7f3a\u5931\u503c\u5904\u7406\n\n#\u590d\u523b\u6837\u672c\u6570\u636e\uff0c\u4e0d\u5bf9\u6570\u636e\u6e90\u505a\u5904\u7406\ndf = data.copy()\n\ndf.children.fillna(df.children.mode()[0],inplace=True)\ndf.country.fillna(df.country.mode()[0],inplace=True)\ndf.agent.fillna(0, inplace=True)\ndf.drop('company',inplace=True, axis=1)","7150d88f":"# \u5f02\u5e38\u503c\u5904\u7406\n\n# \u5165\u4f4f\u4eba\u6570\u4e3a0\nzero_guest=df[df[['adults', 'children', 'babies']].sum(axis=1)==0]\ndf.drop(zero_guest.index, inplace=True)\n\n# \u5165\u4f4f\u5929\u6570\u4e3a0\nzero_days = df[df[['stays_in_weekend_nights','stays_in_week_nights']].sum(axis=1) == 0]\ndf.drop(zero_days.index, inplace=True)\n\n# \u9910\u98df\u7c7b\u578bUndefined\/SC\u5408\u5e76\ndf.meal.replace(\"Undefined\", \"SC\", inplace=True)\n\n# # children\u3001agent\u5b57\u6bb5\u4e0d\u53ef\u80fd\u4e3a\u6d6e\u70b9\u6570\uff0c\u9700\u4fee\u6539\u6570\u636e\u7c7b\u578b\ndf.children = df.children.astype(int)\ndf.agent = df.agent.astype(int)\n\n#\u6838\u5b9eadr\u53d8\u91cf\u7684\u79bb\u7fa4\u503c\u60c5\u51b5\nsns.boxplot(x=df['adr'])\n\nax = sns.boxplot(x=df['adr'])\n\n#\u5220\u9664\u79bb\u7fa4\u503c\ndf = df[df[\"adr\"]<5000]","bf400a40":"#\u8981\u8ba1\u7b97\u5b9e\u9645\u7684\u8ba2\u5355\u6570\u5c31\u8981\u53bb\u9664\u90a3\u4e9b\u88ab\u53d6\u6d88\u7684\u8ba2\u5355\n#\u4e3a\u4e86\u597d\u7406\u89e3\uff0c\u6570\u636e\u6e05\u6d17\u540e\uff0c\u5c06\u4e24\u5bb6\u9152\u5e97\u7684\u6570\u636e\u5206\u5f00 \n#\u4ecefull_data_cln\u4e2d\u5206\u51fa\u4e24\u4e2a\u9152\u5e97\u7684\u672a\u53d6\u6d88\u8ba2\u5355\u6570\u636erh\u548cch\n\nrh = df.loc[(df[\"hotel\"] == \"Resort Hotel\") & (df[\"is_canceled\"] == 0)]\nch = df.loc[(df[\"hotel\"] == \"City Hotel\") & (df[\"is_canceled\"] == 0)]\ndf['hotel'].value_counts()","1db55959":"# \u65b9\u4fbf\u540e\u7eed\u5206\u6790\uff0c\u589e\u52a0\u4e24\u4e2a\u65b0\u5217\n\n#\u589e\u52a0\u4e00\u5217\u603b\u4f4f\u5bbf\u665a\u6570stays_nights_total\nnums_stays = df.stays_in_weekend_nights + df.stays_in_week_nights\ndf.insert(9,\"stays_nights_total\",nums_stays)\n\n#\u589e\u52a0\u4e00\u5217\u4f4f\u5bbf\u4eba\u6570number_of_people\nnums_peoples = df.adults + df.children + df.babies\ndf.insert(12,\"number_of_people\",nums_peoples)\ndf.info()","d0a5a061":"# \u67e5\u770b\u9152\u5e97\u7c7b\u578b\u4e0e\u53d6\u6d88\u9884\u5b9a\u7684\u5173\u7cfb\n\nsns.countplot(x=df['hotel'], hue=df['is_canceled'])\nplt.show()","7e4d2ad4":"# \u67e5\u770b\u623f\u95f4\u7c7b\u578b\u4e0e\u53d6\u6d88\u9884\u8ba2\u7684\u5173\u7cfb\nindex = 1\nfor room_type in ['reserved_room_type', 'assigned_room_type']:\n    # plt.figure(figsize=(6,8))\n    ax1 = plt.subplot(2, 1, index)\n    index += 1\n    ax2 = ax1.twinx()\n    ax1.bar(\n        df.groupby(room_type).size().index,\n        df.groupby(room_type).size())\n    ax1.set_xlabel(room_type)\n    ax1.set_ylabel('Number')\n    ax2.plot(\n        df.groupby(room_type)['is_canceled'].mean(),'ro-')\n    ax2.set_ylabel('Cancellation rate')\n    plt.show()","a9a7cb15":"# \u623f\u95f4\u7c7b\u578b\u53d8\u66f4\u5bf9\u53d6\u6d88\u9884\u5b9a\u7684\u5f71\u54cd\ndf['room_changed']=df['reserved_room_type']!=df['assigned_room_type']\nsns.countplot(x=df['room_changed'],hue=df['is_canceled'])","3a7983be":"# \u67e5\u770b\u9884\u5b9a\u4eba\u6570\u4e0e\u53d6\u6d88\u9884\u5b9a\u7684\u5173\u7cfb\nplt.figure(figsize=(12, 6))\nindex = 0\nfor people in ['adults', 'children', 'babies']:\n    index += 1\n    plt.subplot(2, 3, index)\n    plt.plot(df.groupby(people)['is_canceled'].mean(),\n             'ro-',\n             ms=4)\n    plt.title(people, fontsize=15)\n\n    plt.subplot(2, 3, index + 3)\n    people_stats = df[people].value_counts()\n    sns.barplot(x=people_stats.index, y=people_stats.values)\nplt.tight_layout()\nplt.show()","42fd283c":"# \u5165\u4f4f\u4eba\u6570\u6a21\u5f0f\u5206\u6790\n\n# \u5355\u4eba\nsingle = (df.adults == 1) & (df.children == 0) & (df.babies == 0)\n# \u53cc\u4eba\ncouple = (df.adults == 2) & (df.children == 0) & (df.babies == 0)\n# \u5bb6\u5ead\nfamily = (df.adults >= 2) & (df.children > 0) | (df.babies > 0)\n\ndf['people_mode'] = single.astype(int) + couple.astype(int) * 2 + family.astype(int) * 3\nplt.figure(figsize=(10,6))\nindex=1\nfor hotel_kind in ['City Hotel','Resort Hotel']:\n    plt.subplot(1,2,index)\n    index+=1\n    sns.countplot(x=df['people_mode'],\n              hue=df['is_canceled'],\n              data=data[data.hotel == hotel_kind])\n    plt.xticks([0, 1, 2, 3], ['Others', 'Single', 'Couple', 'Family'])\n    plt.title(hotel_kind)\nplt.tight_layout()\nplt.show()","593819a3":"plt.figure(figsize=(12, 6))\nplt.subplot(121)\nplt.pie(df[df['is_canceled'] == 1].meal.value_counts(),\n        labels=df[df['is_canceled'] == 1].meal.value_counts().index,\n        autopct=\"%.2f%%\")\nplt.legend(loc=1)\nplt.title('Canceled')\nplt.subplot(122)\nplt.pie(df[df['is_canceled'] == 0].meal.value_counts(),\n        labels=df[df['is_canceled'] == 0].meal.value_counts().index,\n        autopct=\"%.2f%%\")\nplt.legend(loc=1)\nplt.title('Uncanceled')","df5f1db3":"country_df = pd.DataFrame(df.loc[df[\"is_canceled\"] == 0][\"country\"].value_counts())\n\n\n#\u5f97\u51fa\u4e0d\u540c\u56fd\u5bb6\u7684\u987e\u5ba2\u4eba\u6570\ncountry_df = pd.DataFrame(df.loc[df[\"is_canceled\"] == 0][\"country\"].value_counts())\ncountry_df.rename(columns={\"country\": \"Number of Guests\"}, inplace=True)\ntotal_guests = country_df[\"Number of Guests\"].sum()\ncountry_df[\"Guests in %\"] = round(country_df[\"Number of Guests\"] \/ total_guests * 100, 2)\ncountry_df[\"country\"] = country_df.index\n\n# pie plot \u5236\u4f5c\u997c\u56fe\nfig = px.pie(country_df,\n             values=\"Number of Guests\",\n             names=\"country\",\n             title=\"Home country of guests\",\n             template=\"seaborn\")\nfig.update_traces(textposition=\"inside\", textinfo=\"value+percent+label\")\nfig.show()","9d32038f":"# show on map  \u5236\u4f5c\u5730\u56fe\nguest_map = px.choropleth(country_df,\n                    locations=country_df.index,\n                    color=country_df[\"Guests in %\"], \n                    hover_name=country_df.index, \n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title=\"Home country of guests\")\nguest_map.show()","1d22c2a9":"sns.countplot(x=df['is_repeated_guest'], hue=df['is_canceled'])","06eed55e":"# \u4e4b\u524d\u53d6\u6d88\u9884\u5b9a\u6b21\u6570\nplt.subplot(121)\nplt.plot(df.groupby('previous_cancellations')['is_canceled'].mean(),\n         'ro')\nplt.xlabel('Previous Cancellations')\n# \u4e4b\u524d\u672a\u53d6\u6d88\u9884\u5b9a\u6b21\u6570\nplt.subplot(122)\nplt.plot(df.groupby('previous_bookings_not_canceled')['is_canceled'].mean(),\n         'bo')\nplt.ylim(0, 1)\nplt.xlabel('Previous Un-Cancellations')","abe55e68":"sns.countplot(x=df['customer_type'], hue=df['is_canceled'])","78479c4f":"# \u8f66\u4f4d\u9700\u6c42\u7edf\u8ba1\nsns.countplot(x=df['required_car_parking_spaces'],hue=df['hotel'])","5a6c1361":"# \u7279\u6b8a\u9700\u6c42\u7edf\u8ba1\nsns.countplot(x=df['total_of_special_requests'],hue=df['is_canceled'])","f031df56":"# \u8ba1\u7b97\u53d6\u6d88\u7387:\ntotal_cancelations = df[\"is_canceled\"].sum()\nrh_cancelations = df.loc[df[\"hotel\"] == \"Resort Hotel\"][\"is_canceled\"].sum()\nch_cancelations = df.loc[df[\"hotel\"] == \"City Hotel\"][\"is_canceled\"].sum()\n\nrel_cancel = total_cancelations \/ df.shape[0] * 100\nrh_rel_cancel = rh_cancelations \/ df.loc[df[\"hotel\"] == \"Resort Hotel\"].shape[0] * 100\nch_rel_cancel = ch_cancelations \/ df.loc[df[\"hotel\"] == \"City Hotel\"].shape[0] * 100\n\nprint(f\"Total bookings canceled: {total_cancelations:,} ({rel_cancel:.0f} %)\")\nprint(f\"Resort hotel bookings canceled: {rh_cancelations:,} ({rh_rel_cancel:.0f} %)\")\nprint(f\"City hotel bookings canceled: {ch_cancelations:,} ({ch_rel_cancel:.0f} %)\")","c54466ec":"# \u63d0\u524d\u9884\u5b9a\u65f6\u957f\u7684\u5206\u5e03\u60c5\u51b5\nplt.figure(figsize=(12, 6))\nplt.subplot(121)\nplt.hist(df['lead_time'], bins=50)\nplt.xlabel('Lead Time')\nplt.ylabel('Number')\n\n# \u63d0\u524d\u9884\u5b9a\u65f6\u957f\u5bf9\u53d6\u6d88\u7684\u5f71\u54cd\nplt.subplot(122)\nplt.plot(df.groupby('lead_time')['is_canceled'].mean().index,\n         df.groupby('lead_time')['is_canceled'].mean(),\n         'ro',\n         markersize=2)\nplt.xlabel('Lead Time')\nplt.ylabel('Cancellation rate')","5062e5f3":"# \u751f\u6210\u6708\u4efd\u6392\u5e8f\u5217\u8868\nordered_months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",\n    \"September\", \"October\", \"November\", \"December\"\n]\n\nfor hotel in ['City Hotel','Resort Hotel']:\n    fig, ax1 = plt.subplots()\n    ax2 = ax1.twinx()\n    df_hotel=df[df.hotel==hotel]\n    monthly = df_hotel.groupby('arrival_date_month').size()\n    monthly \/= 2\n    monthly.loc[['July', 'August']] = monthly.loc[['July', 'August']] * 2 \/ 3\n    sns.barplot(x=list(range(1, 13)),y= monthly[ordered_months], ax=ax1)\n    ax2.plot(\n    range(12), df_hotel.groupby('arrival_date_month')\n    ['is_canceled'].mean()[ordered_months].values, 'ro-')\n    ax1.set_xlabel('Month')\n    ax2.set_ylabel('Cancellation rate')","9a2a9e8a":"# \u9884\u5b9a\u6e20\u9053\u5bf9\u53d6\u6d88\u7387\u7684\u5f71\u54cd\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\nsns.countplot(\n    x=df['distribution_channel'],\n    order=df.groupby('distribution_channel')['is_canceled'].mean().index,\n    ax=ax1)\nax1.set_xlabel('Distribution Channel')\nax2.plot(df.groupby('distribution_channel')['is_canceled'].mean(), 'ro-')\nax2.set_ylabel('Rate')","a5ead55d":"plt.figure(figsize=(8, 6))\nsns.heatmap(df.corr().abs(), cmap=sns.cm.rocket_r)","b85815a4":"num_features = [\n    \n    'lead_time', 'arrival_date_week_number', 'arrival_date_day_of_month',\n    'stays_in_weekend_nights', 'stays_in_week_nights', 'adults', 'children',\n    'babies', 'is_repeated_guest', 'previous_cancellations',\n    'previous_bookings_not_canceled', 'agent', 'adr','required_car_parking_spaces',\n    'total_of_special_requests'\n]\n\ncat_features = [\n    'hotel', 'arrival_date_month', 'meal', 'market_segment',\n    'distribution_channel', 'reserved_room_type', 'deposit_type',\n    'customer_type'\n]","cbe36958":"#\u6570\u503c\u578b\u7279\u5f81\u6807\u51c6\u5316\u8fc7\u7a0b\nnum_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])","d8668dd0":"#\u6807\u79f0\u578b\u7279\u5f81\u5411\u91cf\u5316\u8fc7\u7a0b\ncat_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])","1a97143c":"#\u6570\u503c\u578b\u53d8\u91cf\u548c\u6807\u79f0\u578b\u53d8\u91cf\u5206\u522b\u505a\u6807\u51c6\u5316\u3001\u5411\u91cf\u5316\u9884\u5904\u7406\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', num_transformer, num_features),\n        ('cat', cat_transformer, cat_features)])   #\u9884\u5904\u7406\u5668","fa4ed978":"feature = num_features + cat_features\n#\u6837\u672c\u7279\u5f81\nX = df.drop(\"is_canceled\",axis=1)[feature]\n#\u6837\u672c\u7ed3\u679c\ny = df[\"is_canceled\"]","3ea08803":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","92de2b7a":"base_models = [(\"DT_model\", DecisionTreeClassifier(random_state=42)), # \u51b3\u7b56\u6811\n               (\"RF_model\", RandomForestClassifier(random_state=42,n_jobs=-1)),# \u968f\u673a\u68ee\u6797\n               (\"LR_model\", LogisticRegression(random_state=42,n_jobs=-1)),# \u903b\u8f91\u56de\u5f52\n               (\"KNN_model\",KNeighborsClassifier(n_jobs=-1)),# K\u8fd1\u90bb\n               (\"GB_model\",GaussianNB())]   # \u9ad8\u65afNB\nfor name,model in base_models:\n    clf = Pipeline(steps=[('preprocessor', preprocessor),\n                          ('classifier', model)])\n    clf.fit(X_train, y_train)\n    score = clf.score(X_test, y_test)\n    print(\"%s score: %.3f\" % (name,score))","0923d2e5":"rf = RandomForestClassifier()\n#\u53c2\u6570\u9009\u62e9\nparam_dict = {\"n_estimators\":[100,150,200],\"max_depth\":[3,5,8,10,15],\"max_features\":[\"auto\",\"log2\"]}\n#\u7f51\u7edc\u641c\u7d22\u8c03\u4f18\u5668\nrf_model = GridSearchCV(rf,param_grid=param_dict,cv=3)\n\n#\u6a21\u578b\u62df\u5408\nCLF = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('classifier', rf_model)])\nCLF.fit(X_train,y_train)","d0671b09":"rf_model = RandomForestClassifier(n_estimators=160,\n                               max_features=0.22,\n                               min_samples_split=2,\n                               n_jobs=-1,\n                               random_state=0)\nCLF = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('classifier', rf_model)])\nCLF.fit(X_train, y_train)\nCLF.score(X_test, y_test)","ee57a6aa":"## \u5ba2\u6237\u4fe1\u606f\u5206\u6790","957e7fed":"\u53ef\u89c1\uff0c\u5171\u6709\u56db\u5217\u51fa\u73b0\u7f3a\u5931\u503c\uff0c\u5206\u522b\u4f5c\u51fa\u5982\u4e0b\u5904\u7406\uff1a\n\n* children\u548ccountry\u5217\u7531\u4e8e\u7f3a\u5931\u6570\u76ee\u8f83\u5c0f\uff0c\u91c7\u7528\u5bf9\u5e94\u5217\u4f17\u6570\u8fdb\u884c\u586b\u5145\uff1b\n* agent\u7f3a\u593116340\u4e2a\uff0c\u7f3a\u5931\u7387\u4e3a13.6%\uff0c\u7f3a\u5931\u6570\u91cf\u8f83\u5927\uff0c\u4f46agent\u8868\u793a\u9884\u8ba2\u7684\u65c5\u884c\u793e\uff0c\u4e14\u7f3a\u5931\u7387\u5c0f\u4e8e20%\uff0c\u4fdd\u7559\uff0c\u5e76\u75280\u586b\u5145\uff0c\u8868\u793a\u6ca1\u6709\u65c5\u884c\u793eID\uff1b\n* company\u7f3a\u5931112593\u4e2a\uff0c\u7f3a\u5931\u7387\u4e3a94.3%>80%,\u4e0d\u5177\u5907\u4fe1\u606f\u4ef7\u503c\u6709\u6548\u6027\uff0c\u6240\u4ee5\u76f4\u63a5\u5220\u9664","63c905a1":"\u5ba2\u6237\u9884\u5b9a\u5386\u53f2\u6307\u5ba2\u6237\u4e4b\u524d\u9884\u5b9a\u60c5\u51b5\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4f53\u73b0\u4e86\u5ba2\u6237\u7684\u8bda\u4fe1\u5ea6\uff0c\u53cd\u6620\u5f53\u524d\u5ba2\u6237\u610f\u613f","a9ee8308":"\u8fdb\u4e00\u6b65\u63a2\u7d22\u623f\u95f4\u7c7b\u578b\u7684\u53d8\u66f4\uff08\u5373\u5206\u914d\u623f\u578b\u2260\u9884\u5b9a\u623f\u578b\uff09\u5bf9\u4e8e\u53d6\u6d88\u7387\u7684\u5f71\u54cd\u3002","98f915c7":"1\uff09\u9884\u5b9a\u4e3b\u8981\u6765\u81ea\u4e8e\u65c5\u884c\u793e(TA\/TO)\uff0c\u4e2a\u4eba\u76f4\u63a5\u9884\u5b9a(Direct)\u548c\u56e2\u4f53\u9884\u5b9a(Group)\uff1b\n\n2\uff09\u65c5\u884c\u793e\u53d6\u6d88\u9884\u5b9a\u7684\u6982\u7387\u8fdc\u5927\u4e8e\u5176\u4ed6\u6e20\u9053\uff0c\u53ef\u80fd\u662f\u7531\u4e8e\u65c5\u884c\u793e\u51fa\u4e8e\u76c8\u5229\u8003\u8651\u4f1a\u53d6\u6d88\u5229\u6da6\u8f83\u4f4e\u7684\u8ba2\u5355\u3002","10af90e7":"\u2462 \u5165\u4f4f\u6708\u4efd","b3987568":"\u2462 \u56fd\u5bb6\/\u5730\u533a","fce46afe":"* \u5927\u591a\u6570\u9884\u5b9a\u6765\u6e90\u4e8e\u65b0\u5ba2\n* \u56de\u5934\u5ba2\u53d6\u6d88\u9884\u8ba2\u6982\u7387\u8fdc\u8fdc\u4f4e\u4e8e\u65b0\u5ba2\n\n  \u5efa\u8bae\u5bf9\u65b0\u5ba2\u52a0\u5927\u57f9\u517b\uff0c\u63d0\u9ad8\u5bf9\u9152\u5e97\u590d\u8d2d\uff0c\u5982\u4fdd\u6301\u4ef7\u683c\u6700\u4f18\uff1b\u5728\u8ba2\u5355\u652f\u4ed8\u9875\u9762\u518d\u7ed9\u4e00\u4e9b\u4f1a\u5458\u6743\u76ca\uff1b\u7ed9\u65b0\u5ba2\u4e0d\u65ad\u6d3e\u53d1\u4f18\u60e0\u5238\uff0c\u7279\u522b\u662f\u8282\u5047\u65e5\u671f\u95f4\u6216\u8005\u5f53\u5730\u65c5\u6e38\u65fa\u5b63","62933c4e":"* \u5ba2\u6237\u7c7b\u578b\u4e3b\u8981\u662f\u8fc7\u5f80\u65c5\u5ba2\u4e14\u8ba2\u5355\u53d6\u6d88\u7387\u8f83\u9ad8\n* Group\u7c7b\u578b\u5ba2\u6237\u6700\u5c11\u4f46\u51e0\u4e4e\u6ca1\u6709\u53d6\u6d88\uff08\u8fd9\u91cc\u6ca1\u6709\u641e\u61c2Transient-Party\u548cGroup\u7684\u533a\u522b\uff0c\u6211\u7406\u89e3\u7684\u662fTransient-Party\u662f\u65c5\u884c\u793e\uff0cGroup\u662f\u516c\u53f8\u56e2\u4f53\uff0c\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\u4e5f\u4e0d\u96be\u7406\u89e3\uff0c\u516c\u53f8\u56e2\u5efa\u4e00\u822c\u90fd\u662f\u60ef\u4f8b\u4e14\u4e0d\u4f1a\u56e0\u4e2a\u4eba\u539f\u56e0\u800c\u8f7b\u6613\u53d6\u6d88\uff0c\u800c\u65c5\u884c\u793e\u5219\u662f\u4e3b\u8981\u53d6\u51b3\u4e8e\u4e2a\u4eba\u610f\u613f\u6545\u53d6\u6d88\u6982\u7387\u8f83\u5927\uff09\n* \u6574\u4f53\u770b\uff0c\u56e2\u4f53\u53d6\u6d88\u6982\u7387\u8f83\u4e2a\u4eba\u53d6\u6d88\u6982\u7387\u8f83\u4f4e\uff0c\u53ef\u4ee5\u8bbe\u5b9a\u56e2\u8d2d\u4f18\u60e0\uff0c\u4ee5\u786e\u4fdd\u5ba2\u6d41\u91cf\u7684\u7a33\u5b9a\u6027\u3002","3aa1cc3e":"* \u8ba2\u5355\u9884\u5b9a\u548c\u5206\u914d\u7684\u623f\u95f4\u7c7b\u578b\u591a\u6570\u96c6\u4e2d\u5728A\/D\/E\/F\u56db\u7c7b\uff0c\u5176\u4e2dA\u7c7b\u623f\u578b\u53d6\u6d88\u7387\u9ad8\u51fa\u5176\u4f59\u4e09\u7c7b\u7ea67-8\u4e2a\u767e\u5206\u70b9\uff0c\u503c\u5f97\u5173\u6ce8\u3002","5cc1c007":"* \u591a\u6570\u5ba2\u6237\u4e0d\u9700\u8981\u505c\u8f66\u4f4d\n* \u5ea6\u5047\u9152\u5e97\u5ba2\u6237\u9700\u8981\u505c\u8f66\u4f4d\u7684\u6bd4\u4f8b\u8fdc\u5927\u4e8e\u57ce\u5e02\u9152\u5e97\u3002","1469a74a":"* \u5148\u524d\u53d6\u6d88\u8fc7\u9884\u5b9a\u7684\u5ba2\u6237\u672c\u6b21\u9884\u5b9a\u53d6\u6d88\u7684\u6982\u7387\u8f83\u5927\uff0c\u5c24\u5176\u662f\u53d6\u6d88\u8fc7\u9884\u5b9a15\u6b21\u4ee5\u4e0a\u7684\u5ba2\u6237\uff0c\u57fa\u672c\u4e0a\u4e0d\u4f1a\u9009\u62e9\u5165\u4f4f\uff0c\u53ef\u4ee5\u8ba1\u5165\u9152\u5e97\u7684\u201c\u9ed1\u540d\u5355\u201d\n* \u5148\u524d\u9884\u5b9a\u5e76\u5165\u4f4f\u8fc7\u7684\u5ba2\u6237\u76f8\u5bf9\u6765\u8bf4\u4fe1\u7528\u8f83\u597d\uff0c\u9ad8\u5165\u4f4f\u6b21\u6570\uff08>20\u6b21\uff09\u5ba2\u6237\u57fa\u672c\u4e0d\u4f1a\u53d6\u6d88\u9884\u8ba2","ac504b55":"\u2464\u6a21\u578b\u53c2\u6570\u8c03\u4f18\n\n\u53c2\u6570\u8c03\u4f18\u4f7f\u7528GridSearchCV\uff0c\u53c2\u6570\u9009\u62e9\"n_estimators\"\uff1a\u51b3\u7b56\u6811\u7684\u91cf\uff1b\"max_depth\"\uff1a\u51b3\u7b56\u6811\u7684\u6df1\u5ea6\uff08\u9884\u526a\u679d\uff09\uff1b\"max_features\"\uff1a\u9009\u62e9\u7684\u6700\u5927\u7279\u5f81\u91cf","016d62e7":"# Data understanding and cleaning","57280f35":"* \u591a\u6570\u5ba2\u6237\u65e0\u7279\u6b8a\u9700\u6c42\n* \u7ed3\u679c\u5e76\u6ca1\u6709\u8868\u660e\u5ba2\u6237\u7279\u6b8a\u9700\u6c42\u591a\u800c\u53d6\u6d88\u7387\u9ad8\u53cd\u800c\u6709\u76f8\u53cd\u8d8b\u52bf\uff0c\u8bf4\u660e\u9152\u5e97\u6709\u4e00\u5b9a\u7279\u8272\uff0c\u5728\u6ee1\u8db3\u5ba2\u6237\u7279\u6b8a\u9700\u6c42\u8fd9\u4e00\u65b9\u9762\u505a\u5f97\u5f88\u597d\uff0c\u7ee7\u7eed\u4fdd\u6301\u3002","de00ff85":"\u2460 \u8ba2\u5355\u53d6\u6d88\u7387","126e83a4":"\u2460 \u7279\u5f81\u63d0\u53d6\u53ca\u9884\u5904\u7406\n\n\u6a21\u578b\u76ee\u6807\u662f\u5bf9\u8ba2\u5355\u662f\u5426\u53d6\u6d88\u8fdb\u884c\u9884\u6d4b\uff0c\u6311\u9009\u7279\u5f81\u53d8\u91cf\u5e94\u6ee1\u8db3\uff1a\n\n1\uff09\u7279\u5f81\u5fc5\u987b\u4e3a\u5ba2\u6237\u9884\u5b9a\u65f6\u5c31\u80fd\u83b7\u5f97\u7684\u6570\u636e\uff0c\u56e0\u6b64\u6392\u9664booking_changes\uff08\u9884\u5b9a\u66f4\u6539\uff09\uff0creservation_status\uff08\u9884\u5b9a\u6700\u7ec8\u72b6\u6001\uff09\uff0cassigned_room_type \uff08\u6700\u7ec8\u5206\u914d\u623f\u578b\uff09\uff0cdays_in_waiting_list\uff08\u7b49\u5f85\u5929\u6570\uff09\u7b49\u7279\u5f81\n2\uff09\u8003\u8651\u4e00\u5b9a\u7684\u4fe1\u606f\u8131\u654f\u548c\u901a\u7528\u6027\uff0c\u6392\u9664country\uff08\u56fd\u7c4d\uff09\uff0carrival_date_year\uff08\u5165\u4f4f\u5e74\u4efd\uff09\u7b49\u7279\u5f81","0db34aa6":"* \u5bf9\u4e8e\u57ce\u5e02\u9152\u5e97\uff0c\u53d6\u6d88\u9884\u5b9a\u6982\u7387\uff1a\u53cc\u4eba>>\u5355\u4eba\u2248\u5bb6\u5ead\uff0c\u5e94\u6ce8\u610f\u53cc\u4eba\u5165\u4f4f\u5ba2\u6237\u7684\u9ad8\u53d6\u6d88\u7387\u73b0\u8c61\uff0c\u6539\u5584\u9152\u5e97\u5bf9\u4e8e\u53cc\u4eba\u5165\u4f4f\u5ba2\u6237\u7684\u914d\u5957\u670d\u52a1\u4ee5\u964d\u4f4e\u53d6\u6d88\u7387\u3002\n\n* \u5bf9\u4e8e\u5ea6\u5047\u9152\u5e97\uff0c\u53d6\u6d88\u9884\u8ba2\u6982\u7387\uff1a\u5bb6\u5ead>\u53cc\u4eba>\u5355\u4eba\uff0c\u9152\u5e97\u53ef\u9002\u5f53\u9488\u5bf9\u5bb6\u5ead\u5ba2\u6237\u63d0\u4f9b\u76f8\u5e94\u7684\u4f18\u60e0\u6298\u6263\uff0c\u63d0\u9ad8\u5bb6\u5ead\u5ba2\u6237\u5165\u4f4f\u7387\u3002","30e4b419":"* \u57ce\u5e02\u9152\u5e97\u9884\u8ba2\u53d6\u6d88\u7387\u9ad8\u4e8e\u5ea6\u5047\u9152\u5e97\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u57ce\u5e02\u9152\u5e97\u7684\u4e3b\u8981\u7528\u6237\u7fa4\u662f\u5546\u52a1\u5dee\u65c5\u7684\u7528\u6237\uff0c\u5f80\u5f80\u5177\u6709\u7d27\u6025\u6027\u53ca\u672a\u89c4\u5212\u6027\uff0c\u9152\u5e97\u7684\u9884\u8ba2\u5728\u672a\u89c4\u5212\u53ca\u6df1\u5165\u4e86\u89e3\u9152\u5e97\u72b6\u6001\u60c5\u51b5\u4e0b\uff0c\u5bb9\u6613\u76f2\u76ee\u9884\u8ba2\u3001\u9000\u8ba2\uff0c\u6240\u4ee5\u9000\u8ba2\u7387\u9ad8\uff0c\u5efa\u8bae\u5728\u5728\u6e20\u9053\u5e73\u53f0\u589e\u52a0\u201c\u9644\u8fd1\u4f18\u9009\u201d\u529f\u80fd\uff0c\u901a\u8fc7\u8f93\u5165\u5730\u5740\uff0c\u81ea\u52a8\u7b5b\u9009\u63a8\u8350\u9644\u8fd1\u57ce\u5e02\u9152\u5e97\u7684\u5165\u4f4f\u7387\u9ad8\u3001\u590d\u4f4f\u7387\u9ad8\u3001\u8bc4\u4ef7\u9ad8\u7b49\u9ad8\u54c1\u8d28\u56de\u9988\u7684\u57ce\u5e02\u9152\u5e97\uff0c\u4e00\u65b9\u9762\u80fd\u4e3a\u7528\u6237\u63d0\u4f9b\u66f4\u9ad8\u6548\u4fbf\u6377\u7684\u63a8\u8350\u670d\u52a1\uff0c\u53e6\u4e00\u65b9\u9762\u4e5f\u4fc3\u4f7f\u5e73\u53f0\u6e20\u9053\u4f18\u5316\u670d\u52a1\u5185\u5bb9","47f0029e":"\u6570\u636e\u6e05\u6d17\u5b8c\u6210\uff0c\u6e05\u6d17\u5b8c\u7684\u6570\u636e\u96c6\u5927\u5c0f\u53d8\u4e3a118564\u00d733","5fd92802":"# Building the Model","27289606":"## \u5176\u5b83\u56e0\u7d20","1b53f953":"\u7531\u4e8e\u6570\u503c\u578b\u7279\u5f81\u7684\u5355\u4f4d\u91cf\u7eb2\u5747\u4e0d\u4e00\u6837\uff0c\u6a21\u578b\u62df\u5408\u65f6\u5bb9\u6613\u504f\u62df\u5408\uff0c\u6240\u4ee5\u9700\u8981\u505a\u5f52\u4e00\u5316\u5904\u7406\uff0c\u7edf\u4e00\u91cf\u7eb2\uff0c\u5e76\u4fdd\u7559\u6570\u636e\u89c4\u5f8b","8e19fc97":"## \u5ba2\u623f\u4fe1\u606f\u5206\u6790","6c119fc7":"\u2462\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6","0d4c23d8":"\u9488\u5bf9\u4e0d\u540c\u9152\u5e97\uff0c\u91cd\u70b9\u5206\u6790\u4e0b\u5217\u51e0\u79cd\u5165\u4f4f\u4eba\u6570\u60c5\u51b5\u7684\u53d6\u6d88\u7387\uff1a\n\n\u5355\u4eba\u5165\u4f4f\uff1aadults=1, children, babies=0\n\n\u53cc\u4eba\u5165\u4f4f\uff1aadults=2, children, babies=0\n\n\u5bb6\u5ead\u5165\u4f4f\uff1aadults>2, children, babies>0","3c820ad8":"* \u5ba2\u6237\u4e3b\u8981\u503e\u5411\u4e8e\u9009\u62e9\u4e0e\u5165\u4f4f\u65f6\u95f4\u76f8\u8fd1\u7684\u65f6\u95f4\u9884\u5b9a\n* \u968f\u7740\u9884\u5b9a\u63d0\u524d\u65f6\u957f\u7684\u589e\u5927\uff0c\u53ef\u53d8\u56e0\u7d20\u8d8a\u591a\uff0c\u53d6\u6d88\u7387\u5448\u73b0\u4e0a\u5347\u8d8b\u52bf","d9c12534":"\u5728\u6a21\u578b\u62df\u5408\u65f6\uff0c\u6a21\u578b\u65e0\u6cd5\u5bf9\u590d\u6742\u7684\u6807\u79f0\u578b\u7279\u5f81\u505a\u62df\u5408\uff0c\u6240\u4ee5\u9700\u8981\u4f18\u5148\u5bf9\u8be5\u7c7b\u6570\u636e\u8fdb\u884c\u5411\u91cf\u5316\u5904\u7406\uff0c\u8f6c\u5316\u4e3a\u6a21\u578b\u5bb9\u6613\u8fa8\u8bc6\u7684\u6570\u503c\u578b\u7279\u5f81","253973af":"\u5efa\u6a21\u7684\u6d41\u7a0b\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u6b65\u9aa4\uff1a\n\n\u2460\u7279\u5f81\u63d0\u53d6\u53ca\u9884\u5904\u7406\n\n\u2461\u5212\u5206\u6837\u672c\u7279\u5f81\u548c\u6837\u672c\u7ed3\u679c\n\n\u2462\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\n\n\u2463\u6a21\u578b\u642d\u5efa\u5e76\u8bc4\u4f30\n\n\u2464\u6a21\u578b\u53c2\u6570\u8c03\u4f18","589e381f":"\u6a21\u578b\u9009\u62e9\u4e86\u51b3\u7b56\u6811\u3001\u968f\u673a\u68ee\u6797\u3001\u903b\u8f91\u56de\u5f52\u3001K\u8fd1\u90bb\u3001\u9ad8\u65afNB\uff0c\u5206\u522b\u5bf9\u6a21\u578b\u62df\u5408\u6548\u679c\u8bc4\u5206\uff0c\u663e\u7136\u201c\u968f\u673a\u68ee\u6797\u201d\u7684\u8bc4\u52060.869\uff0c\u62df\u5408\u6548\u679c\u66f4\u597d","7c82b048":"\u2461 \u5212\u5206\u6837\u672c\u7279\u5f81\u548c\u6837\u672c\u7ed3\u679c","42d1d8f9":"## \u8ba2\u5355\u4fe1\u606f\u5206\u6790","4de450e7":"\u2461 \u63d0\u524d\u9884\u5b9a\u65f6\u957f","26a0822d":"\u2463 \u9884\u5b9a\u6e20\u9053","6803003b":"\u2463\u6a21\u578b\u642d\u5efa\u5e76\u8bc4\u4f30","90254afb":"\u2460 \u5165\u4f4f\u4eba\u6570","b72dfc68":"* \u9884\u5b9a\u91cf\u4e0a\uff0c\u57ce\u5e02\u9152\u5e977\/8\u6708\u51fa\u73b0\u5927\u5e45\u4e0b\u6ed1\uff0c\u540c\u671f\u5ea6\u5047\u9152\u5e97\u53d8\u5316\u8f83\u5c0f\uff0c\u6574\u4f53\u800c\u8a00\uff0c\u5ea6\u5047\u9152\u5e97\u6708\u5ea6\u5ba2\u6d41\u91cf\u53d8\u5316\u8f83\u5c0f\uff1b\n\n* \u53d6\u6d88\u7387\u4e0a\uff0c\u4e24\u5bb6\u9152\u5e97\u51ac\u5b63\u53d6\u6d88\u7387\u76f8\u5bf9\u8f83\u4f4e\uff0c\u57ce\u5e02\u9152\u5e97\u590f\u5b63\u53d6\u6d88\u7387\u964d\u4f4e\uff0c\u5ea6\u5047\u9152\u5e97\u5374\u5904\u4e8e\u9ad8\u5cf0\u3002","92308072":"\u2465 \u5ba2\u6237\u9700\u6c42","1d99d7d0":"* \u4e0e\u53d6\u6d88\u7387\u76f8\u5173\u6027\u8f83\u5f3a\u7684\u4e94\u4e2a\u56e0\u7d20\u4e3a\uff1a\n* lead_time:\u63d0\u524d\u9884\u5b9a\u5929\u6570\n* total_of_special_requests:\u5ba2\u6237\u63d0\u51fa\u7684\u7279\u6b8a\u8981\u6c42\u7684\u6570\u91cf\n* required_car_parking_spaces:\u5ba2\u6237\u8981\u6c42\u7684\u505c\u8f66\u4f4d\u6570\n* booking_changes:\u5bf9\u9884\u8ba2\u6240\u4f5c\u7684\u66f4\u6539\/\u4fee\u6539\u7684\u6570\u76ee\n* room_changed:\u623f\u95f4\u7c7b\u578b\u66f4\u6539","a17d8779":"* \u7531\u56fe\u53ef\u77e5\uff0c\u5ba2\u6237\u4e3b\u8981\u6765\u81ea\u8461\u8404\u7259\uff0c\u82f1\u56fd\uff0c\u6cd5\u56fd\uff0c\u897f\u73ed\u7259\u7b49\u6b27\u6d32\u56fd\u5bb6\uff0c\u4e0d\u540c\u56fd\u5bb6\u4e4b\u95f4\u9884\u5b9a\u53d6\u6d88\u7387\u7684\u5dee\u8ddd\u975e\u5e38\u663e\u8457\uff0c\u53d6\u6d88\u7387\u8f83\u9ad8\u7684\u56fd\u5bb6\u6709\u8461\u8404\u7259\u3001\u610f\u5927\u5229\u3001\u5df4\u897f\u3001\u4e2d\u56fd\u3001\u4fc4\u7f57\u65af\uff0c\u4ee5\u53d1\u5c55\u4e2d\u56fd\u5bb6\u4e3a\u4e3b\u3002","cea954ca":"\u2463 \u5ba2\u6237\u9884\u5b9a\u5386\u53f2","b9aab9df":"* \u623f\u578b\u53d8\u66f4\u8fc7\u7684\u5ba2\u6237\u53d6\u6d88\u9884\u5b9a\u7684\u6982\u7387\u8fdc\u8fdc\u5c0f\u4e8e\u672a\u53d8\u66f4\u8fc7\u7684\u5ba2\u6237\uff0c\u731c\u6d4b\u539f\u56e0\u53ef\u80fd\u4e3a\uff1a\n\n\u5ba2\u6237\u5bf9\u4e8e\u623f\u578b\u4e0d\u6ee1\u610f\uff0c\u4f46\u4e3a\u4fdd\u8bc1\u6b63\u5e38\u5165\u4f4f\uff0c\u4e0d\u53d6\u6d88\u9884\u5b9a\u800c\u9009\u62e9\u66f4\u6539\u623f\u578b\uff0c\u6545\u53d6\u6d88\u6982\u7387\u4f4e","100fadd7":"\u5b58\u5728\u56db\u79cd\u5f02\u5e38\n* \u5b58\u5728\u5165\u4f4f\u603b\u4eba\u6570\u4e3a0\u548c\u603b\u5165\u4f4f\u5929\u6570\u4e3a0\u7684\u5f02\u5e38\u6570\u636e\uff0c\u9700\u8981\u5bf9\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u7b5b\u9009\u548c\u6e05\u7406\u3002\n* meal\u91cc\u603b\u8ba1\u67095\u79cd\u9910\u578b\uff0c\u5176\u4e2dUndefined \/ SC \u2013\u65e0\u9910\u5957\u9910\u4e3a\u4e00\u7c7b\uff0c\u9700\u7edf\u4e00\u66ff\u6362\u4e3aSC\u7c7b\n* \u5c0f\u5b69\u7684\u5165\u4f4f\u91cf\u3001\u65c5\u884c\u793e\u4ee3\u7406\u5165\u4f4f\u7684\u91cf\u5747\u4e0d\u80fd\u662f\u6d6e\u70b9\u6570\uff0c\u9700\u8981\u7edf\u4e00\u89c4\u5212\u4e3a\u6574\u578b\u6570\u636e\u3002\n* \u9152\u5e97\u5e73\u5747\u6bcf\u65e5\u6536\u8d39\u6709\u4e00\u4e2a\u5927\u4e8e5000\u7684\u79bb\u7fa4\u503c\uff0c\u4f1a\u4e25\u91cd\u5f71\u54cd\u63cf\u8ff0\u6027\u7edf\u8ba1\uff0c\u9700\u5220\u9664\u79bb\u7fa4\u503c","a6d26a98":"* \u5ba2\u4eba\u7279\u522b\u559c\u7231BB\u7c7b\u578b\u9910\u996e\uff0c\u5176\u6b21\u662fHB\u548cSC\uff0c\u5efa\u8bae\u53ef\u4ee5BB\u54c1\u7c7b\u52a0\u8d2dHB\u548cSC\u7684\u6d3b\u52a8\uff0c\u4fc3\u8fdb\u5ba2\u4eba\u6d88\u8d39\n* \u65e0\u8bba\u662f\u5426\u53d6\u6d88\u9884\u8ba2\uff0c\u9910\u98df\u7c7b\u578b\u4e4b\u95f4\u5dee\u5f02\u4e0d\u5927\u3002","759594f0":"\u2464 \u5ba2\u6237\u7c7b\u578b","2dac68ce":"* \u57ce\u5e02\u9152\u5e97\u8ba2\u5355\u91cf\u660e\u663e\u8d85\u8fc7\u5ea6\u5047\u9152\u5e97\uff0c\u4f46\u540c\u65f6\u9884\u8ba2\u53d6\u6d88\u7684\u53ef\u80fd\u6027\u4e5f\u8fdc\u8fdc\u9ad8\u4e8e\u5ea6\u5047\u9152\u5e97\u3002","b737ff6c":"\u2461 \u9910\u996e\u7c7b\u578b","d29026e8":"* \u63d0\u524d\u9884\u5b9a\u65f6\u95f4\u8d8a\u957f\uff0c\u53ef\u53d8\u56e0\u7d20\u8d8a\u591a\uff0c\u53d6\u6d88\u7387\u8d8a\u9ad8\u3002","b9115932":"\u7531\u4e8e\u5904\u7406\u901f\u5ea6\u6709\u9650\uff0c\u672c\u6b21\u53ea\u4f7f\u7528\u4e00\u4e0b\u53c2\u6570\u8c03\u4f18","0f6c6f76":"# Data analysis and visualization","87aab17f":"1\uff09\u591a\u6570\u9884\u5b9a\u8ba2\u5355\u6ca1\u6709\u513f\u7ae5\u548c\u5a74\u513f\u5165\u4f4f\uff0c\u5176\u4e2d\u5355\u4eba\u5165\u4f4f\u548c\u53cc\u4eba\u5165\u4f4f\u662f\u4e3b\u8981\u7684\u9884\u5b9a\u4eba\u6570\u6a21\u5f0f\uff1b\n\n2\uff09\u6709\u5a74\u513f\u5165\u4f4f\u65f6\u9884\u5b9a\u53d6\u6d88\u7387\u5927\u5e45\u4e0b\u964d\uff1b"}}