{"cell_type":{"66fe058b":"code","236b6758":"code","9235197b":"code","ada1d8da":"code","f4a91d37":"code","d43fc2cf":"code","df4dbc6f":"code","71cb093b":"code","ac55b091":"code","7b279226":"code","b83e51df":"code","d8cfdfc7":"code","7b8549c1":"code","73a7b2a5":"code","370c367f":"code","ec8f0d22":"code","ffa94104":"markdown"},"source":{"66fe058b":"import pandas as pd\nimport numpy as np\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport plotly.io as pio\n\n\nimport missingno as msno\nfrom itertools import zip_longest\nfrom itertools import compress\nimport warnings\n\nwarnings.filterwarnings(action = 'ignore')\nnp.set_printoptions(precision = 3, suppress = True)","236b6758":"pio.templates.default = 'simple_white'\ncolors = [\"#7c7cff\",\"#c2c2da\",\"#d4d4e0\",\"#eeeef7\",\"#fefeff\"]\nstatic = {'staticPlot' : True}","9235197b":"test_filepath = '..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv'\ntrain_filepath = '..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv'\ntest = pd.read_csv(test_filepath)\ntrain = pd.read_csv(train_filepath)\n\nhr = pd.concat([test, train], axis = 0)\nhr.drop(columns = 'enrollee_id', inplace = True)","ada1d8da":"# Missing Values\nmsno.bar(hr, fontsize=12, color = \"#7c7cff\", figsize = (12,5))","f4a91d37":"#@title\nhr.head()","d43fc2cf":"entries_count = hr.shape[0]\ncity_count = hr.city.nunique()\n\nfig = go.Figure()\n\nfig.add_annotation(\n    xref = 'paper',\n    yref = 'paper',\n    x = 0,\n    y = 3,\n    text = f'<b>{entries_count:,}<\/b> respondents',\n    font = {'family' : 'Arial', 'size': 40, 'color' : colors[0]},\n    showarrow = False\n)\n\nfig.add_annotation(\n    xref = 'paper',\n    yref = 'paper',\n    x = 0,\n    y = -1,\n    text = 'from <b>{}<\/b> cities'.format(city_count),\n    font = {'family' : 'Arial', 'size': 30},\n    showarrow = False\n)\n\nfig.update_xaxes(visible = False)\nfig.update_yaxes(visible = False)\nfig.update_layout(autosize = False, paper_bgcolor = colors[3],\n    plot_bgcolor = colors[3],\n    height = 200,\n    width = 500\n)\n\nfig.show(config = static)","df4dbc6f":"cities_values = hr.city.value_counts()\ncities_values.index = cities_values.index.str.replace('_', '-').str.upper()\ncity_plot = cities_values.iloc[0:20]\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = city_plot.index,\n    y = city_plot.values,\n    marker_color = colors[0],\n    text = city_plot.values\n))\n\nfig.update_layout(title = '<b>Top 20 Cities<\/b> : Count',\n    font = dict(family = 'Arial', size = 10), xaxis = dict(tickangle = -90))\nfig.update_traces(textposition = 'outside')\nfig.update_yaxes(visible = False)\nfig.show()","71cb093b":"# Preparing Dataframe\nmale_respondents = hr[hr.gender == 'Male']\nfemale_respondents = hr[hr.gender == 'Female']\nother_respondents = hr[hr.gender == 'Other']\n\nmale_plot = male_respondents.education_level.value_counts()\nfemale_plot = female_respondents.education_level.value_counts()\nother_plot = other_respondents.education_level.value_counts()\nall_gender_respondents = [male_plot, female_plot, other_plot]\n\ngender_percentage = hr.gender.value_counts().transform(lambda x : x \/ x.sum() * 100)\ngender_null = round(hr.gender.isnull().sum()\/len(hr)*100, 2)\n\n\n# Creating Figure\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = male_plot.index,\n    y = male_plot.values,\n    name = 'Male',\n    marker_color = colors[0],\n    text = male_plot.values\n))\n\n\nfig.add_trace(go.Bar(\n    x = female_plot.index,\n    y = female_plot.values,\n    name = 'Female',\n    marker_color = colors[1],\n    text = female_plot.values\n))\n\n\nfig.add_trace(go.Bar(\n    x = other_plot.index,\n    y = other_plot.values,\n    name = 'Other',\n    marker_color = colors[2],\n    text = other_plot.values\n))\n\nfig.update_traces(\n    textposition = 'outside'\n)\n\n\n\nfig.add_annotation(\n    xref = 'paper',\n    yref = 'paper',\n    x = .8,\n    y = .8,\n    text = \"<b>Male {}%<\/b>\".format(round(gender_percentage[0], 2)),\n    font = {'family' : 'Arial', 'color' : colors[0], 'size' : 35},\n    showarrow = False\n)\n\nfig.add_annotation(\n    xref = 'paper',\n    yref = 'paper',\n    x = .8,\n    y = .62,\n    text = \"<b>Female {}%<\/b>\".format(round(gender_percentage[1], 2)),\n    font = {'family' : 'Arial', 'color' : colors[1], 'size' : 28},\n    showarrow = False\n)\n\nfig.add_annotation(\n    xref = 'paper',\n    yref = 'paper',\n    x = .8,\n    y = .52,\n    text = \"<b>Other {}%<\/b>\".format(round(gender_percentage[2], 2)),\n    font = {'family' : 'Arial', 'color' : colors[2], 'size' : 20},\n    showarrow = False\n)\n\nfig.add_annotation(\n    xref = 'paper',\n    yref = 'paper',\n    x = 1,\n    y = 1.1,\n    text = \"<b>gender null percentage = {}%<\/b> <br>\".format(gender_null),\n    font = {'family' : 'Arial', 'color' : colors[2], 'size' : 12},\n    showarrow = False\n)\n\nfig.update_traces(textfont = dict(family = 'Arial'))\nfig.update_yaxes(visible = False)\nfig.update_layout(title = '<b>Education Level, Gender Counts<\/b>', font = dict(family = 'Arial', size = 10))\nfig.show()","ac55b091":"# Preparing the Dataframe\nyes_experience = hr.query('relevent_experience == \"Has relevent experience\"')\nno_experience = hr.query('relevent_experience == \"No relevent experience\"')\ndata1 = yes_experience.city_development_index\ndata2 = no_experience.city_development_index\nhistdata = [data1, data2]\nlabel = ['Experienced', 'No Relevant Experience']\n\n# Create Distribution Plot\nfig = ff.create_distplot(\n    histdata,\n    label,\n    bin_size = .1,\n    colors = colors\n)\n\n# Create Annotation\nfig.add_annotation(\n    xref = 'paper',\n    yref = 'paper',\n    y = 1,\n    x = 0.8,\n    text = \"\"\"\n    A <b>denser<\/b> distribution of experienced individuals in <br> \n    cities with higher development index.\"\"\",\n    font = {'family' : 'Arial', 'color' : 'gray'},\n    showarrow = False\n)\n\nfig.update_layout(title = \"<b>Respondents' Experience\", font = dict(family = 'Arial', size = 10))\nfig.show()","7b279226":"# Get company type as dataframes\n\ncompany_type = hr.company_type.unique()\ncompanies_df = []\n\nfor type in company_type:\n    company_query = hr.query(\"company_type == '{}'\".format(type))\n    companies_df.append(company_query)\n\nnan, private, funded_startup, other, public, early_startup, NGO = compress(companies_df,\n    [True, True, True, True, True, True, True]\n)\n\ncompanies = [private, funded_startup, other, public, early_startup, NGO]","b83e51df":"# Preparing the Dataframe\nprivate_experience = private[private['relevent_experience']  == 'Has relevent experience']\nprivate_noexperience = private[private['relevent_experience']  != 'Has relevent experience']\n\npublic_experience = public[public['relevent_experience']  == 'Has relevent experience']\npublic_noexperience = public[public['relevent_experience']  != 'Has relevent experience']\n\nfunded_startup_experience = funded_startup[funded_startup['relevent_experience']  == 'Has relevent experience']\nfunded_startup_noexperience = funded_startup[funded_startup['relevent_experience']  != 'Has relevent experience']\n\nearly_startup_experience = early_startup[early_startup['relevent_experience']  == 'Has relevent experience']\nearly_startup_noexperience = early_startup[early_startup['relevent_experience']  != 'Has relevent experience']\n\nother_experience = other[other['relevent_experience']  == 'Has relevent experience']\nother_noexperience = other[other['relevent_experience']  != 'Has relevent experience']\n\n# Create subplot\nfig = make_subplots(rows = 4, cols = 2,\n    subplot_titles = ('Experience', 'No-relevant Experience'),\n    vertical_spacing = 0.10,\n    horizontal_spacing = 0.10,\n)\n\nplot_experience = [private_experience, public_experience, early_startup_experience, funded_startup_experience]\nplot_noexperience = [private_noexperience, public_noexperience, early_startup_noexperience, funded_startup_noexperience]\nplot_names1 = ['Private(Experience)', 'Public(Experience)', 'Early Start-up(Experience)', 'Funded Start-up(Experience)']\nplot_names2 = ['Private(No-experience)', 'Public(No-experience)', 'Early Start-up(No-experience)', 'Funded Start-up(No-experience)']\n\n# Create flags\nrow_flag = 1\nrow_flag2 = 1\n\n\n# Create Names\nfor frames, names in zip(plot_experience, plot_names1):\n    frames.training_hours.name = '{}'.format(names)\n\nfor frames, names in zip(plot_noexperience, plot_names2):\n    frames.training_hours.name = '{}'.format(names)\n\n# Create Figure\n\nfor types in plot_experience:\n    fig.add_trace(go.Histogram(\n        x = types.training_hours,\n        marker_color = colors[0],\n        histfunc = 'avg',\n        name = types.training_hours.name\n    ), row = row_flag, col = 1)\n    row_flag += 1\n\nfor types in plot_noexperience:\n    fig.add_trace(go.Histogram(\n        x = types.training_hours,\n        marker_color = colors[1],\n        histfunc = 'avg',\n        name = types.training_hours.name\n    ), row = row_flag2, col = 2)\n    row_flag2 += 1\n\nfig.update_layout(\n    height = 800,\n    template = 'plotly_white',\n    title = '<b>Training Hours per Company Type<\/b>',\n    font = dict(family = 'Arial', size = 10),\n    margin = dict(l = 100, t = 200)\n)\n\nfig.update_yaxes(automargin = True)\nfig.show()","d8cfdfc7":"company_type_cdi = hr.groupby(['company_type', 'city_development_index']).size()\nunique_companies = hr.company_type.unique()\n\nfig = go.Figure()\nplot_names = ['nan', 'Private', 'Funded Start-up', 'Other', 'Public', 'Early Start-up', 'NGO']\n\nfor types, names in zip_longest(unique_companies, plot_names):\n    try:\n        if types == 'Pvt Ltd':\n            fig.add_trace(go.Scatter(\n                y = company_type_cdi['{}'.format(types)].values,\n                x = company_type_cdi['{}'.format(types)].index,\n                mode = 'lines+markers',\n                marker_color = colors[0],\n                name = names\n            ))\n        else:\n            fig.add_trace(go.Scatter(\n                y = company_type_cdi['{}'.format(types)].values,\n                x = company_type_cdi['{}'.format(types)].index,\n                mode = 'lines',\n                marker_color = 'gray',\n                name = names\n            ))\n    except:\n        pass\n\n#fig.add_hline(x=0.86, line_width=3, line_dash=\"dash\", line_color=\"yellow\")\n\nfig.update_traces(line_width = 0.5, marker_size = 3)\nfig.update_yaxes(visible = False)\nfig.update_layout(title = '<b>Company Type and City Development Index<\/b>',\n    autosize = True,   \n    font = dict(family = 'Arial', size = 10)\n)\n\nfig.show()","7b8549c1":"def percentage(s):\n    \"\"\"\n    Converts a series to round off - percentage string format.\n    \"\"\"\n    x = s.apply(lambda x : round(x\/s[:].sum() * 100, 2))\n    x = x.apply(lambda x : str(x) + '%')\n    return x","73a7b2a5":"experience = hr.groupby(['relevent_experience','target']).size()\n\njob_change = dict(tickmode = 'array',\n    tickvals = [0, 1],\n    ticktext = ['No',\n    'Yes']     \n)\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    y = experience['Has relevent experience'],\n    name = 'Has relevant experience',\n    text = percentage(experience['Has relevent experience']).values,\n    marker_color = colors[0]\n))\n\nfig.add_trace(go.Bar(\n    y = experience['No relevent experience'],\n    name = 'Has no relevant experience',\n    text = percentage(experience['No relevent experience']).values,\n    marker_color = colors[1]\n))\n\nfig.update_traces(textposition = 'inside')\nfig.update_layout(\n    #barmode = 'overlay', \n    xaxis = job_change,\n    autosize = True,   \n    title = '<b>Relevent Experience and Job Change<\/b>',\n    font = dict(family = 'Arial', size = 10)\n)\n\nfig.update_xaxes(title = 'Job Change')\n\nfig.show()","370c367f":"gender_target = hr.groupby(['gender', 'target']).size()\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    y = gender_target['Male'],\n    name = 'Male',\n    marker_color = colors[0],\n    text = percentage(gender_target['Male']).values\n))\n\nfig.add_trace(go.Bar(\n    y = gender_target['Female'],\n    name = 'Female',\n    marker_color = colors[1],\n    text = percentage(gender_target['Female']).values\n))\n\nfig.add_trace(go.Bar(\n    y = gender_target['Other'],\n    name = 'Other',\n    marker_color = colors[2],\n    text = percentage(gender_target['Other']).values\n))\n\nfig.update_layout(\n    #barmode = 'overlay', \n    xaxis = job_change,\n    autosize = True,   \n    title = '<b>Gender and Job Change<\/b>',\n    font = dict(family = 'Arial', size = 10)\n)\n\nfig.update_traces(\n    textposition = 'outside'\n)\n\nfig.update_xaxes(title = 'Job Change')\n\nfig.show()","ec8f0d22":"#@title\nenrollment = hr.groupby(['enrolled_university', 'target']).size()\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    y = enrollment['Full time course'],\n    name = 'Full time course',\n    marker_color = colors[0],\n    text = percentage(enrollment['Full time course']).values\n))\n\nfig.add_trace(go.Bar(\n    y = enrollment['Part time course'],\n    name = 'Part time course',\n    marker_color = colors[1],\n    text = percentage(enrollment['Part time course']).values\n))\n\nfig.add_trace(go.Bar(\n    y = enrollment['no_enrollment'],\n    name = 'no_enrollment ',\n    marker_color = colors[2],\n    text = percentage(enrollment['no_enrollment']).values\n))\n\nfig.update_layout(\n    xaxis = job_change,\n    autosize = True,   \n    title = '<b>Enrollment and Job Change<\/b>',\n    font = dict(family = 'Arial', size = 10)\n)\n\nfig.update_traces(\n    textposition = 'outside'\n)\n\nfig.update_xaxes(title = 'Job Change')\n\nfig.show()","ffa94104":"**Work in progress..**"}}