{"cell_type":{"78ae3692":"code","ccf3b283":"code","f8e18bfc":"code","44e5eda8":"code","fb29071b":"code","512ba4dd":"code","6a82cf44":"code","baf5decf":"code","0f65da80":"code","35963c79":"code","bb2cfb65":"code","d3f3d141":"code","cc0bf403":"code","2710dd3c":"code","74bcd8ac":"code","257b36fe":"code","bb2c5b27":"code","87905063":"code","e983197a":"code","79e23097":"code","045ccd00":"code","30c310d5":"code","b5b6e645":"code","4bce3687":"code","7226d0c8":"code","bbd4aa72":"code","da4bab6d":"code","f852e662":"code","8af15263":"code","5b45b7c5":"code","62cc6c0b":"code","5715aaae":"code","849f4cdd":"code","d84128da":"code","caae199a":"code","7a3f3f85":"code","76e852e8":"code","8531655d":"code","ea9fe546":"code","2eddb2ae":"code","fd506fbf":"code","e6e0f790":"code","125d9284":"code","0288dc06":"code","101f1f8e":"code","325876e5":"code","7fd73b27":"code","362912a5":"code","50ad8801":"code","6bd3b0a1":"code","131b6f49":"code","beacdeb1":"markdown","b60d78bd":"markdown","2d3c3a5d":"markdown","26cad852":"markdown","1b3570c7":"markdown","e2de70ba":"markdown","03b31298":"markdown","536fb550":"markdown","d9850dd1":"markdown","b5a3f2a6":"markdown","2ad1e74f":"markdown"},"source":{"78ae3692":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.figure_factory as ff\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import zscore\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ccf3b283":"df = pd.read_csv(\"..\/input\/merged-table\/Merged_table_cleaned.xlsx - Sheet1.csv\")","f8e18bfc":"df","44e5eda8":"df.drop(['Unnamed: 0'], axis = 1, inplace = True)","fb29071b":"df.head()","512ba4dd":"len(df['Suburb'].unique())","6a82cf44":"len(df['Method'].unique())","baf5decf":"len(df['SellerG'].unique())","0f65da80":"len(df['CouncilArea'].unique())","35963c79":"len(df['Regionname'].unique())","bb2cfb65":"correlation = df.corr(method ='spearman')\ncorrelation","d3f3d141":"fig = px.imshow(correlation)\nfig['layout']['xaxis']['side'] = 'bottom'\nfig.update_layout(\n        margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n        template='plotly_dark',\n    )\nfig.show()","cc0bf403":"df.drop(['Bedroom2'],axis=1,inplace=True)\ndf.drop(['BuildingArea'],axis=1,inplace=True)","2710dd3c":"# plt.figure(figsize=(10,10))\n# df.corr()['Car'].plot(kind='barh')\nfig = px.bar(correlation['Car'], orientation='h')\nfig.show()","74bcd8ac":"fig = px.bar(correlation['Propertycount'], orientation='h')\nfig.show()","257b36fe":"df.drop(['Suburb'],axis=1,inplace=True)\ndf.drop(['Method'],axis=1,inplace=True)\ndf.drop(['Type'],axis=1,inplace=True)\ndf.drop(['SellerG'],axis=1,inplace=True)\ndf.drop(['CouncilArea'],axis=1,inplace=True)\ndf.drop(['Regionname'],axis=1,inplace=True)\ndf","bb2c5b27":"correlation2 = df.corr(method ='spearman')\ncorrelation2","87905063":"fig = px.imshow(correlation2)\nfig['layout']['xaxis']['side'] = 'bottom'\nfig.update_layout(\n        margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n        template='plotly_dark',\n    )\nfig.show()","e983197a":"fig = px.bar(correlation2['Car'], orientation='h')\nfig.show()","79e23097":"df.head(30)","045ccd00":"from scipy import stats","30c310d5":"df['CarZScore'] = stats.zscore(df['Car'], nan_policy='omit')\n# df['PropertyZScore'] = zscore(df.Propertycount)\ncar = df[df.CarZScore < 3 & (df.CarZScore > -3)]\ncar.head(30)","b5b6e645":"fig = px.scatter(car,x=\"Price\", y=\"Car\")\nfig.show()","4bce3687":"df['PropertyZScore'] = zscore(df.Propertycount, nan_policy='omit')\npropertydf = df[df.PropertyZScore < 3 & (df.PropertyZScore > -3)]\ndf","7226d0c8":"fig = px.bar(correlation2['Propertycount'], orientation='h')\nfig.show()","bbd4aa72":"fig = px.scatter(propertydf,x=\"Propertycount\", y=\"Price\")\nfig.show()","da4bab6d":"# sns.scatterplot(data=df, x=\"Propertycount\", y=\"Suburb\")","f852e662":"g = sns.PairGrid(correlation2)\ng.map_diag(sns.histplot)\ng.map_offdiag(sns.scatterplot)","8af15263":"df.drop(['Address'],axis=1,inplace=True)\ndf.drop(['Date'],axis=1,inplace=True)\ndf.drop(['CarZScore'],axis=1,inplace=True)\ndf.drop(['PropertyZScore'],axis=1,inplace=True)\ndf.drop(['Lattitude'],axis=1,inplace=True)\ndf.drop(['Longtitude'],axis=1,inplace=True)\ndf.drop(['YearBuilt'], axis=1, inplace=True)\ndf.drop(['street'],axis=1,inplace=True)\ndf.drop(['Month'],axis=1,inplace=True)\ndf.drop(['Day'], axis=1, inplace=True)\ndf = df.dropna()\ndf","5b45b7c5":"df['Price range'] = pd.qcut(df['Price'], q=5)\ndf","62cc6c0b":"from sklearn import preprocessing\nfrom sklearn.preprocessing import Normalizer,MinMaxScaler, RobustScaler\n# df = df.drop(['Price'],axis=1)\ndrop = df.drop(['Price range'],axis=1)","5715aaae":"nrm = Normalizer()\nnrm.fit(drop)\nnormal_data = nrm.transform(drop)","849f4cdd":"from sklearn.manifold import TSNE\nfrom scipy.cluster.hierarchy import fcluster\ntsn = TSNE(random_state=20)\nres_tsne = tsn.fit_transform(normal_data)\nplt.figure(figsize=(8,8))\nsns.scatterplot(res_tsne[:,0],res_tsne[:,1]);","d84128da":"from sklearn.cluster import AgglomerativeClustering, ward_tree","caae199a":"from scipy.cluster.hierarchy import dendrogram, linkage\nlink = linkage(res_tsne, method='ward')\nvb = fcluster(link,t=300, criterion='distance')\n# colors = ['r']*25 + ['b']*25 + ['g']*25 + ['y']*25\nfig = plt.figure(figsize=(25,25))\nax1 = fig.add_subplot(3,3,1)\npd.value_counts(vb).plot(kind='barh')\nax2 = fig.add_subplot(3,3,2)\naxpl_2 = sns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1], hue=vb);\naxpl_2.legend_.remove()","7a3f3f85":"plt.figure()\ndn = dendrogram(link)","76e852e8":"from sklearn.metrics import silhouette_samples, silhouette_score","8531655d":"from matplotlib import cm","ea9fe546":"assign = vb\ncluster_labels=np.unique(assign)\nn_clusters = len(np.unique(assign))\nsilhouette_vals = silhouette_samples(res_tsne, assign, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nplt.figure(figsize=(10,8))\nfor i , c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[assign==c]\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)\n        color = cm.jet(float(i) \/ n_clusters)\n        plt.barh(range(y_ax_lower,y_ax_upper),\n                c_silhouette_vals,height=1.0,edgecolor='none',color=color)\n        yticks.append((y_ax_lower+y_ax_upper) \/ 2)\n        y_ax_lower += len(c_silhouette_vals)\nsilhouette_avg = np.mean(silhouette_vals)\n\nplt.axvline(silhouette_avg,color=\"red\",linestyle= \"--\")\nplt.yticks(yticks , cluster_labels + 1)\nplt.ylabel ('Cluster')\nplt.xlabel('Silhouette coefficient')","2eddb2ae":"plt.figure(figsize=(10,10))\nsns.set(font_scale=1.5)\nsns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],hue=df['Price range'],s=70,palette=\"hot\");#,palette=\"RdBu\");","fd506fbf":"drop","e6e0f790":"df['cluster_id'] = vb\ndf","125d9284":"most_sign = ['Car','Propertycount','Postcode','Landsize', 'Distance','Bathroom']\nn_row = 3\nn_col = 3\nfig, axes = plt.subplots(nrows=n_row, ncols=n_col, figsize=(15,15))\nsns.set(font_scale=1)\nsns.axes_style(\"whitegrid\")\nfor i in enumerate(most_sign):\n    qq = sns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],ax=axes[i[0]\/\/n_row,i[0]%n_col],\\\n                     hue=df[i[1]],s=70,palette=\"RdBu\");\nplt.legend().set_title('')\nplt.tight_layout()","0288dc06":"from sklearn.cluster import AgglomerativeClustering\ncluster = AgglomerativeClustering(n_clusters=3, affinity='euclidean', linkage='ward')  \ncluster.fit_predict(normal_data)","101f1f8e":"cluster.labels_","325876e5":"axpl_2 = sns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1], hue=cluster.labels_);","7fd73b27":"# from scipy.cluster.hierarchy import dendrogram, linkage\n# link = linkage(res_tsne, method='ward')\n# vb = fcluster(link,t=300, criterion='distance')\n# # colors = ['r']*25 + ['b']*25 + ['g']*25 + ['y']*25\nfig = plt.figure(figsize=(25,25))\nax1 = fig.add_subplot(3,3,1)\npd.value_counts(cluster.labels_).plot(kind='barh')\nax2 = fig.add_subplot(3,3,2)\naxpl_2 = sns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1], hue=cluster.labels_);\naxpl_2.legend_.remove()","362912a5":"df['cluster123'] = cluster.labels_","50ad8801":"df","6bd3b0a1":"most_sign = ['Car','Propertycount','Postcode','Landsize', 'Distance','Bathroom']\nn_row = 3\nn_col = 3\nfig, axes = plt.subplots(nrows=n_row, ncols=n_col, figsize=(15,15))\nsns.set(font_scale=1)\nsns.axes_style(\"whitegrid\")\nfor i in enumerate(most_sign):\n    qq = sns.scatterplot(x=df[i[1]],y=df['Price'],ax=axes[i[0]\/\/n_row,i[0]%n_col],\\\n                     hue=cluster.labels_,s=70,palette=\"RdBu\");\nplt.legend().set_title('')\nplt.tight_layout()","131b6f49":"assign = cluster.labels_\ncluster_labels=np.unique(assign)\nn_clusters = len(np.unique(assign))\nsilhouette_vals = silhouette_samples(res_tsne, assign, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nplt.figure(figsize=(10,8))\nfor i , c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[assign==c]\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)\n        color = cm.jet(float(i) \/ n_clusters)\n        plt.barh(range(y_ax_lower,y_ax_upper),\n                c_silhouette_vals,height=1.0,edgecolor='none',color=color)\n        yticks.append((y_ax_lower+y_ax_upper) \/ 2)\n        y_ax_lower += len(c_silhouette_vals)\nsilhouette_avg = np.mean(silhouette_vals)\n\nplt.axvline(silhouette_avg,color=\"red\",linestyle= \"--\")\nplt.yticks(yticks , cluster_labels + 1)\nplt.ylabel ('Cluster')\nplt.xlabel('Silhouette coefficient')","beacdeb1":"Since we don't find any correlation of Propertycount to the numberic volumn, let try to compare it with the remain","b60d78bd":"# Correlation","2d3c3a5d":"We will drop all the columns with categorized","26cad852":"* Drop address, date, day, month, Bedroom, Building Area, YearBuilt, Street, Longitude, Attitude","1b3570c7":"Seems like the cluster depends much on the Propertycount","e2de70ba":"Ok, the clustering is a bit ambiguous right now, we need to change the clustering techniques to resolve the problems","03b31298":"Let's visualize it","536fb550":"# Validation Clustering","d9850dd1":"The price in clustering group is not relevant to the cluster group since comparing to the visual below, the range price was widen in each cluster","b5a3f2a6":"Clustering group comparing to price range","2ad1e74f":"From the heatmap below, we can see that there are the correlation between numberic variables\n\n1. Strong correlation (above 0.7):\n    - Rooms - Bedroom2\n    - Rooms - BuildingArea\n    - BedRoom2 - BuildingArea\n<br\/><br>\n2. Moderate correlation (above 0.5):\n    - Rooms - Bathroom\n    - Bedroom2 - Bathroom\n    - Rooms - Price\n    - Price - BuildingArea\n    - Postcode - Longitude\n    - Bathroom - Building Area\n    - Longitude - Postcode"}}