{"cell_type":{"180ce261":"code","bbd02809":"code","cc6c35d2":"code","6cae67f5":"code","661936f2":"code","85b05c8d":"code","fa296258":"code","dfd08be6":"code","cd38392c":"code","5359000a":"code","1eb9b159":"code","89c564f5":"code","a229c181":"code","4e4f050e":"code","c48077d9":"code","a880e272":"markdown","3091dbb3":"markdown","dbee011c":"markdown"},"source":{"180ce261":"import pandas as pd\nimport requests\nimport json\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","bbd02809":"fev = pd.read_csv(\"..\/input\/ifood-restaurants-data\/ifood-restaurants-february-2021.csv\")\nnov = pd.read_csv(\"..\/input\/ifood-restaurants-data\/ifood-restaurants-november-2020.csv\")","cc6c35d2":"print(\"Restaurantes em nov:\", len(nov))\nprint(\"Restaurantes em fev:\", len(fev))\nprint(\"Crescimento no n\u00famero de restaurantes:\", len(fev)-len(nov))","6cae67f5":"exemplo = fev['url'].iloc[0]\n# a url se divide em algumas partes:\nprint(\"Exemplo de URL:\", exemplo)\nprint(\"Base da URL:\", exemplo[0:34])\n# a cidade n\u00e3o necessariamente \u00e9 a mesma do restaurante, \n# pois quem define a localza\u00e7\u00e3o da URL \u00e9 o endere\u00e7o de entrega\nprint(\"Localiza\u00e7\u00e3o:\", exemplo[34:].split(\"\/\")[0])\nprint(\"Nome do restaurante:\", exemplo[34:].split(\"\/\")[1])\nprint(\"Id do restaurante:\", exemplo[34:].split(\"\/\")[2])","661936f2":"fev['id'] = fev['url'].apply(lambda x: x[34:].split(\"\/\")[2])\nnov['id'] = nov['url'].apply(lambda x: x[34:].split(\"\/\")[2])","85b05c8d":"# Mas nem todos os restaurantes de nov continuam no iFood em fev\n# juntar os dois datasets com base em \"id\" (ou seja, contar restaurantes)\n# contar o numero de vezes que o id apareceu duas vezes (ou seja, t\u00e1 em fev e nov)\nquery = nov.append(fev)['id'].value_counts().value_counts()\nprint(\"Restaurantes que estavam no iFood em nov e fev:\", list(query)[0])\nprint(\"Restaurantes que entraram no iFood entre nov e fev:\", list(query)[1])\n# Os outros 76628 s\u00e3o os restaurantes que entraram no iFood, subtraindo esse n\u00famero pelo crescimento no per\u00edodo:\nprint(\"Restaurantes que sa\u00edram entre fev e nov:\", list(query)[1] - (len(fev) - len(nov)))\nprint(\"Rela\u00e7\u00e3o entre restaurantes entrando \/ restaurantes saindo\", list(query)[1]\/(list(query)[1] - (len(fev) - len(nov))))","fa296258":"# a id pode ser usada para obter a localiza\u00e7\u00e3o espec\u00edfica do restaurante\nrestaurant_id = exemplo[34:].split(\"\/\")[2]\n\n# parece que o ifood bloqueou o kaggle, tente fazer a request no seu pr\u00f3prio pc\nresponse = requests.get(f\"https:\/\/marketplace.ifood.com.br\/v1\/merchants\/{restaurant_id}\/extra\")\n#content = response.content\n#restaurant_info = json.loads(content)\n#restaurant_info['address']","dfd08be6":"# ranking de numero de restaurantes por cidade \n# (n\u00e3o muito confi\u00e1vel, melhor seria usar o m\u00e9todo da request que usei na c\u00e9lula acima)\n# para aumentar um pouquinho a confiabilidade podemos usar os dois datasets\nrest_fev = fev['url'].apply(lambda x: x.split('\/')[4]).value_counts()\nrest_nov =  nov['url'].apply(lambda x: x.split('\/')[4]).value_counts()\nrest_media = (rest_fev+rest_nov)\/2\nrest_media.sort_values(ascending=False).iloc[:20]\n# um detalhe: parece que as cidades vizinhas a S\u00e3o Paulo est\u00e3o sendo contabilizadas como S\u00e3o Paulo","cd38392c":"# numero de restaurantes por estado\nestados = pd.DataFrame(fev['url'].apply(lambda x: x.split('\/')[4].split(\"-\")[-1]).value_counts())\nestados = estados.reset_index()\nestados.columns = ['estado', 'quantidade']\nprint(estados)","5359000a":"plt.figure(figsize=[15, 7])\nsns.set(font_scale=2)\nsns.barplot(estados['estado'], estados['quantidade'])\nplt.title(\"N\u00famero de Restaurantes por Estado\")","1eb9b159":"# pegar categorias mais famosas do Brasil\nholder = pd.DataFrame(fev['category'].value_counts())    \nholder = holder.sort_values(by='category', ascending=False).iloc[:10]\nholder = holder.reset_index()\nholder.columns = ['categoria', 'quantidade']\n\nsns.set(font_scale=1.6)\nplt.figure(figsize=[20, 3])\nsns.barplot(holder['categoria'], holder['quantidade'])\nplt.title('Categorias mais comuns no Brasil')","89c564f5":"# pegar categorias mais famosas por regi\u00e3o\n# pivot table inicial\nfev['estado'] = fev['url'].apply(lambda x: x[34:].split(\"\/\")[0].split(\"-\")[-1])\npd.pivot_table(fev, index=['estado'], columns = ['category'], values='id', aggfunc='count')","a229c181":"# pegar categorias mais famosas por regi\u00e3o\n# Pegar o top 5 de cada estado\ncount = 0\nplt.figure(figsize=[25, 50])\nsns.set(font_scale=1.2)\nfor i in list(fev['estado'].unique()):\n    count += 1\n    holder = pd.DataFrame(fev['category'][fev['estado'] == i].value_counts())    \n    holder = holder.sort_values(by='category', ascending=False).iloc[:5]\n    holder = holder.reset_index()\n    holder.columns = ['categoria', 'quantidade']\n\n    plt.subplot(9, 3, count)    \n    sns.barplot(holder['categoria'], holder['quantidade'])\n    plt.title('Estado: ' + i)  \n    #print(\"\")\n    #print(\"Estado:\", i)\n    #print(holder)\n    #print(\"\")\nplt.subplots_adjust(hspace=0.5)","4e4f050e":"# Nomes mais comuns\nfev['name'].value_counts()","c48077d9":"# Price ranges mais comuns\nfev['price_range'].value_counts()","a880e272":"# Distribui\u00e7\u00e3o geogr\u00e1fica","3091dbb3":"# Varia\u00e7\u00f5es no n\u00famero de restaurantes ao longo do tempo","dbee011c":"# Outras an\u00e1lises"}}