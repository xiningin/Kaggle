{"cell_type":{"afaf04e1":"code","c9462516":"code","b0f5ce05":"code","318797eb":"code","7a22b912":"code","36ce9bb2":"code","4fd01ed0":"code","780d5530":"code","267c138a":"code","e75789b0":"code","1e711134":"code","10944a58":"code","b3cfa637":"code","4e861d7e":"code","d4a9032a":"code","2d9e321a":"code","a7e80552":"code","2264e15b":"code","55ed1c71":"code","1395c468":"markdown","f54c4072":"markdown","299868b7":"markdown","c3c726f0":"markdown","8e789a35":"markdown","c9151479":"markdown","cc69e3dc":"markdown","0cfba20f":"markdown","79f7a050":"markdown","6428ace7":"markdown","3ff45a22":"markdown","ce2dda72":"markdown","4e4bb29e":"markdown","475a7ad9":"markdown","6a959e01":"markdown","b4c18616":"markdown","9d132e89":"markdown","b051032d":"markdown","fcd4d78e":"markdown","af282285":"markdown","f4ad85cb":"markdown","2684c5ad":"markdown","668588aa":"markdown","96440389":"markdown","f196a7ab":"markdown","6131fb18":"markdown","032a81a2":"markdown","95b9fe64":"markdown","29ea4bb5":"markdown","f05fd175":"markdown","8d9a7ce6":"markdown"},"source":{"afaf04e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom collections import Counter\nfrom plotly.offline import iplot\nfrom xgboost import XGBRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import SGDRegressor, ElasticNet, Lasso, Ridge\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer, MaxAbsScaler, RobustScaler","c9462516":"df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')","b0f5ce05":"df.head()","318797eb":"cols_data = []\ntotal_data = []\ndf_by_country = []\nfor country in np.unique(df['country']):\n    df_by_country.append(df[df['country']==country])\n\ndef bars(data, x, y, title, figsize=(20, 12), rotation=75, size=8, width=None, height=None, colour=None):\n    count = pd.DataFrame({x:data[x], y:data[y]}).sort_values(ascending=False, by=y)\n    if not colour == None:\n        c = count[colour]\n    else:\n        c = None\n    fig = px.bar(count, x=x, y=y, title=title, width=width, height=height, color=c)\n    fig.show()\n    \ndef scatter(countries, col, threshold):\n    i = 0\n    fig = go.Figure()\n    for country in countries:\n        if list(df[df['country']==country][col])[-1]<threshold:\n            if i % 2 == 0:\n                i += 1\n                continue\n        i += 1\n        df_temp = df[df['country']==country]\n        trace = go.Scatter(x=df_temp['date'], y=df_temp[col], \n                           name=country,\n                           mode='markers+lines')\n        fig.add_trace(trace)\n    fig.update_layout(legend_title=dict(text='Countries', font=dict(family=\"sans-serif\",\n                                         size=18)))\n    fig.update_xaxes(title='date')\n    fig.update_yaxes(title=col)\n    fig.show()\n    \ndef pie(data, x, y, title):\n    data = pd.DataFrame({x:data.keys(), y:data.values()}).sort_values(ascending=False, by=y)\n    fig = px.pie(data, values=y, names=x)\n    fig.update_layout(legend_title=dict(text=title, font=dict(family=\"sans-serif\",\n                                         size=18)))\n    fig.show()\n    \ndef nulls(name, threshold, length):\n    countries = np.array([])\n    usable = 0\n    for i in df_by_country:\n        i = i.reset_index(drop=True)\n        col = i[name]\n        num_null = col.isnull().sum()\n        col_len = len(col.index)\n        usability = round(num_null\/col_len*100, 2)<threshold\n        if usability and col_len>length:\n            usable += 1\n            countries = np.append(countries, i['country'][0])\n    return countries, name","7a22b912":"def last_item(col):\n    total_vaccs = []\n    for country in df_by_country:\n        total_vaccs.append(np.array(country[col])[-1])\n    data = dict(zip(np.unique(df['country']), total_vaccs))\n    return data\n\ndef preprocess(col, x, y):\n    count = Counter(df[col])\n    count = pd.DataFrame({x:count.keys(), y:count.values()}).sort_values(ascending=False, by=y)\n    count = dict(zip(count[x], count[y]))\n    return count\n\ndef bar_pre(col, values):\n    k = 0\n    for i in df[col]:\n        country = df['country'][k]\n        for j in i.split(', '):\n            if j in values:\n                values[j].append(country)\n        k += 1\n    return values\n\ndef bar_col(name, values, colour=False):\n    col_data = bar_pre(name, values)\n    cols_data.append(list(col_data.keys()))\n    temp = []\n    for point in list(col_data.keys()):\n        column = 'days using '+point\n        count = Counter(col_data[point])\n        data = pd.DataFrame({'countries':count.keys(), column:count.values()})\n        temp.append(data)\n        if colour:\n            c = column\n        else:\n            c = None\n        bars(data, 'countries', column, 'Countries who use '+point, colour=c)\n    total_data.append(temp)","36ce9bb2":"count = Counter(df['source_name'])\ncount = pd.DataFrame({'name':count.keys(), 'value':count.values()})\ncount = count[count['value']>50]\nbars(count, x='name', y='value', title='sources', width=800, height=600, colour='value')","4fd01ed0":"data = last_item('total_vaccinations')\ndata = pd.DataFrame({'countries':data.keys(), 'total_vaccinations':data.values()})\ndata = data[data['total_vaccinations']>130000]\nbars(data, 'countries', 'total_vaccinations', 'total_vaccinations per country', height=1000, colour='total_vaccinations')","780d5530":"data = last_item('people_fully_vaccinated')\ndata = pd.DataFrame({'countries':data.keys(), 'people_fully_vaccinated':data.values()})\ndata = data[data['people_fully_vaccinated']>50000]\nbars(data, 'countries', 'people_fully_vaccinated', 'people_fully_vaccinated per country', \n     width=600, height=650, colour='people_fully_vaccinated')","267c138a":"bar_col('vaccines', {'Pfizer\/BioNTech':[], 'Covaxin':[], 'Oxford\/AstraZeneca':[], \n                                       'Moderna':[], 'Sinopharm\/Beijing':[], \n                                        'Sinopharm\/Wuhan':[], 'Sputnik V':[], 'Sinovac':[]},\n       colour=True)","e75789b0":"bar_col('source_name', {'Ministry of Health':[], 'Government of the United Kingdom':[], \n                            'National Health Commission':[], 'National Health Service':[]},\n       colour=True)","1e711134":"for country in ['United States', 'China', 'United Kingdom']:\n    df_temp = df[df['country']==country]\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df_temp['date'], y=df_temp['total_vaccinations'],\n                             mode='markers+lines'))\n    \n    fig.update_layout(title_text=country)\n    fig.update_xaxes(title='Date')\n    fig.update_yaxes(title='Total vaccinations')\n    fig.show()","10944a58":"for i in [['total_vaccinations', 10, 15, 1000000],\n          ['total_vaccinations_per_hundred', 10, 15, 11],\n          ['daily_vaccinations', 2.5, 20, 200000],\n          ['daily_vaccinations_per_million', 2.05, 20, 0],\n          ['people_fully_vaccinated', 60, 20, 500000],\n          ['people_fully_vaccinated_per_hundred', 60, 20, 4]]:\n    countries, title = nulls(i[0], i[1], i[2])\n    scatter(countries, title, i[3])","b3cfa637":"count = Counter(df['vaccines'])\ncount = pd.Series(count).sort_values(ascending=False)[:10]\ncount = dict(zip(count.keys(), count))\npie(count, 'vaccine', 'days using vaccine', '10 most used vaccine combinations')","4e861d7e":"countries = ['United States', 'China', 'United Kingdom', 'India', 'Israel']\nresults = [[], []]\nfor country in countries:\n    count = Counter(df[df['country']==country]['vaccines'])\n    result = pd.DataFrame({'Vaccines':count.keys(), 'Days using vaccines':count.values()})\n    pie(count, 'Vaccines', 'Days using vaccines', country)","d4a9032a":"df['year'] = [int(i.split('-')[0]) for i in df['date']]\ndf['month'] = [int(i.split('-')[1]) for i in df['date']]\ndf['day'] = [int(i.split('-')[2]) for i in df['date']]\n\nfor col in df:\n    df[col] = df[col].fillna(0)","2d9e321a":"fig, ax = plt.subplots(1, 1, figsize=(10, 6))\nsns.heatmap(df.corr(), annot=True)\nplt.show()","a7e80552":"X = df.drop(['total_vaccinations', 'people_vaccinated', 'iso_code', 'date', 'source_website'], axis=1)\ny = df['total_vaccinations']\nX = X.merge(pd.get_dummies(X['source_name']), left_index=True, right_index=True).drop('source_name', axis=1)\nX = X.merge(pd.get_dummies(X['vaccines']), left_index=True, right_index=True).drop('vaccines', axis=1)\nX = X.drop('country', axis=1)","2264e15b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nmodel_names = ['XGBRegressor', 'RandomForestRegressor', 'ElasticNet', 'Lasso', 'Ridge', 'SVR']\nscore_list = []\nr2_list = []\nmae_list = []\nmse_list = []\n\nfor model in [XGBRegressor(), RandomForestRegressor(), ElasticNet(), Lasso(), Ridge(), SVR()]:\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    \n    score = model.score(X_test, y_test)\n    r2 = r2_score(y_test, y_pred)\n    mae = mean_absolute_error(y_test, y_pred)\n    mse = mean_squared_error(y_test, y_pred)\n    \n    score_list.append(score)\n    r2_list.append(r2)\n    mae_list.append(mae)\n    mse_list.append(mse)","55ed1c71":"results = pd.DataFrame({'score':score_list, 'r2':r2_list, 'mae':mae_list, 'mse':mse_list})\nresults.index = model_names\nfor col in results:\n    temp_results = results.sort_values(by=col, ascending=False)\n    fig = px.bar(temp_results, temp_results.index, col,\n                 title=col, color=results[col])\n    fig.show()","1395c468":"Secondly, we will analyse which countries have the largest amount of total vaccinations.","f54c4072":"Subsequently, we visualise which vaccines are most popular among the different nations.","299868b7":"# Predicting total vaccinations","c3c726f0":"Then, we take a look at how many people have been fully vaccinated twice.","8e789a35":"# Countries using vaccines","c9151479":"Then, we visualise the various vaccines used by the five leading countries.","cc69e3dc":"# Countries using sources","0cfba20f":"Next, we analyse globally how the different nations are faring in the total, daily and full vaccinations.","79f7a050":"Hello everyone! Welcome to my COVID-19 vaccinations notebook, where today we will be analysing the vaccination progress in countries around the world.","6428ace7":"Here we can evaluate the performance of the different algorithms.","3ff45a22":"# Global comparison for vaccination type","ce2dda72":"# Total vaccinations","4e4bb29e":"# Visualising COVID-19 Vaccinations","475a7ad9":"# Global vaccination progress","6a959e01":"Please note that the \"Days using vaccines\" label only shows how many days are included in the dataset, not representing the total amount per country in real time.","b4c18616":"# Total vaccinations for US, China and UK","9d132e89":"Firstly, we perform an analysis to see the most popular sources.","b051032d":"# Source type","fcd4d78e":"The predictors we will use are XGBoost, Random Forest, Elastic Net, Lasso, Ridge and SVR.","af282285":"# Vaccines used for the 5 leading countries","f4ad85cb":"## Thank you for reading this notebook.\n## If you enjoyed this notebook and found it helpful, please give it an upvote and provide feedback, as it would help me make more of these.","2684c5ad":"Afterwards, we take a closer look at the total vaccinations for some of the leading countries; US, China and UK.","668588aa":"Now we turn our attention to which countries use the different vaccines.","96440389":"The final visualisation is checking out the correlation for each feature in our dataset.","f196a7ab":"<img src=\"https:\/\/i.redd.it\/g4njpylqb3q41.jpg\" width=\"500px\"\/>","6131fb18":"### Descriptions of features\n* country - The countries which are vaccinated\n* iso_code - Code which represents the currency of the country\n* date - Day of entry\n* iso_code - Number of vaccinations made on that day\n* total_vaccinated _ Total amount of people vaccinated in the country\n* people_fully_vaccinated - Number of people in the country who have two vaccinations\n* daily_vaccinations - Number of vaccinations on that day\n* total_vaccinations_per_hundred - Calculated by (total vaccinated \/ population) * 100\n* people_vaccinated_per_hundred - Calculated by (people vaccinated \/ population) * 100\n* people_fully_vaccinated_per_hundred - Calculated by (people fully vaccinated \/ population) * 100\n* daily_vaccinations_per_million - Calculated by (daily vaccinations \/ population) * one million\n* vaccines - Type of vaccine used\n* source_name - Source of informaiton for the vaccines\n* source_website - Website for source of informaiton for the vaccines","032a81a2":"The last thing we will do is using machine learning models to predict the \"total_vaccinations\" feature using the other variables in our data.","95b9fe64":"# People fully vaccinated","29ea4bb5":"# Correlation","f05fd175":"Similarly, we see which countries use the different sources that provide information on COVID-19.","8d9a7ce6":"<img src=\"https:\/\/i.redd.it\/pqu7qf28n0e41.jpg\" width=\"400px\"\/>"}}