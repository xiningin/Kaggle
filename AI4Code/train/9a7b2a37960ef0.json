{"cell_type":{"9f85c2d0":"code","d72ec834":"code","14a8e2c3":"code","6b7a91f9":"code","930884e0":"code","289c0f01":"code","04433867":"code","a795a2c0":"code","52ae0c47":"code","ff246758":"code","af9712f0":"code","f90a3242":"code","b00fb389":"code","63db086e":"code","1dc08857":"code","ff0b9e6e":"code","149443f6":"code","12530aba":"code","df002a36":"code","1727662f":"code","0da6b173":"code","acb7d221":"code","b9b26b94":"code","15758a75":"code","88cde0d9":"code","26c1c5ae":"code","fccd98d9":"code","47bbb43c":"code","66462565":"code","254a532d":"code","dd7b2463":"code","e819e322":"code","007f014d":"code","ae9d9ce5":"code","165b96fd":"code","af219676":"code","17988207":"code","ccf5140e":"code","d5c5cc9a":"markdown","f45dd7f8":"markdown","bb613326":"markdown","ba97876a":"markdown","10152103":"markdown","aee00a7a":"markdown","0998315a":"markdown","dd8a1533":"markdown","af6d1435":"markdown","493cf9d1":"markdown","ec6a089b":"markdown","16646427":"markdown","5f46e4bd":"markdown","113622c2":"markdown","6eb355d5":"markdown","937c594b":"markdown","ca3c5be7":"markdown","f777c744":"markdown","859df90e":"markdown","ff62b234":"markdown","4aadcd86":"markdown","26b2fa52":"markdown","0f10521b":"markdown","af750be1":"markdown","26f85c69":"markdown","0c05d838":"markdown","cd17d1eb":"markdown","3b773ab7":"markdown","5efb949f":"markdown","0786646e":"markdown","85dddcce":"markdown","dcde7c61":"markdown","bbd44a3c":"markdown","3e869091":"markdown","772fdac6":"markdown","81cf662e":"markdown","0dad701c":"markdown","649d4d11":"markdown","53ae4985":"markdown","e82d00e8":"markdown","88d8717f":"markdown","5d573e1e":"markdown","2dff60e4":"markdown"},"source":{"9f85c2d0":"import matplotlib ","d72ec834":"from matplotlib import pyplot as plt\n# import matplotlib.pyplot as plt","14a8e2c3":"# plotting to our canvas\nplt.plot([1,2,3],[2,3,4])\n\n#showing waht we plotted\nplt.show()","6b7a91f9":"# This figure shows the name of several matplotlib elements composing a figure\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import AutoMinorLocator, MultipleLocator, FuncFormatter\n\n\nnp.random.seed(19680801)\n\nX = np.linspace(0.5, 3.5, 100)\nY1 = 3+np.cos(X)\nY2 = 1+np.cos(1+X\/0.75)\/2\nY3 = np.random.uniform(Y1, Y2, len(X))\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(1, 1, 1, aspect=1)\n\n\ndef minor_tick(x, pos):\n    if not x % 1.0:\n        return \"\"\n    return \"%.2f\" % x\n\nax.xaxis.set_major_locator(MultipleLocator(1.000))\nax.xaxis.set_minor_locator(AutoMinorLocator(4))\nax.yaxis.set_major_locator(MultipleLocator(1.000))\nax.yaxis.set_minor_locator(AutoMinorLocator(4))\nax.xaxis.set_minor_formatter(FuncFormatter(minor_tick))\n\nax.set_xlim(0, 4)\nax.set_ylim(0, 4)\n\nax.tick_params(which='major', width=1.0)\nax.tick_params(which='major', length=10)\nax.tick_params(which='minor', width=1.0, labelsize=10)\nax.tick_params(which='minor', length=5, labelsize=10, labelcolor='0.25')\n\nax.grid(linestyle=\"--\", linewidth=0.5, color='.25', zorder=-10)\n\nax.plot(X, Y1, c=(0.25, 0.25, 1.00), lw=2, label=\"Blue signal\", zorder=10)\nax.plot(X, Y2, c=(1.00, 0.25, 0.25), lw=2, label=\"Red signal\")\nax.plot(X, Y3, linewidth=0,\n        marker='o', markerfacecolor='w', markeredgecolor='k')\n\nax.set_title(\"Anatomy of a figure\", fontsize=20, verticalalignment='bottom')\nax.set_xlabel(\"X axis label\")\nax.set_ylabel(\"Y axis label\")\n\nax.legend()\n\n\ndef circle(x, y, radius=0.15):\n    from matplotlib.patches import Circle\n    from matplotlib.patheffects import withStroke\n    circle = Circle((x, y), radius, clip_on=False, zorder=10, linewidth=1,\n                    edgecolor='black', facecolor=(0, 0, 0, .0125),\n                    path_effects=[withStroke(linewidth=5, foreground='w')])\n    ax.add_artist(circle)\n\n\ndef text(x, y, text):\n    ax.text(x, y, text, backgroundcolor=\"white\",\n            ha='center', va='top', weight='bold', color='blue')\n\n\n# Minor tick\ncircle(0.50, -0.10)\ntext(0.50, -0.32, \"Minor tick label\")\n\n# Major tick\ncircle(-0.03, 4.00)\ntext(0.03, 3.80, \"Major tick\")\n\n# Minor tick\ncircle(0.00, 3.50)\ntext(0.00, 3.30, \"Minor tick\")\n\n# Major tick label\ncircle(-0.15, 3.00)\ntext(-0.15, 2.80, \"Major tick label\")\n\n# X Label\ncircle(1.80, -0.27)\ntext(1.80, -0.45, \"X axis label\")\n\n# Y Label\ncircle(-0.27, 1.80)\ntext(-0.27, 1.6, \"Y axis label\")\n\n# Title\ncircle(1.60, 4.13)\ntext(1.60, 3.93, \"Title\")\n\n# Blue plot\ncircle(1.75, 2.80)\ntext(1.75, 2.60, \"Line\\n(line plot)\")\n\n# Red plot\ncircle(1.20, 0.60)\ntext(1.20, 0.40, \"Line\\n(line plot)\")\n\n# Scatter plot\ncircle(3.20, 1.75)\ntext(3.20, 1.55, \"Markers\\n(scatter plot)\")\n\n# Grid\ncircle(3.00, 3.00)\ntext(3.00, 2.80, \"Grid\")\n\n# Legend\ncircle(3.70, 3.80)\ntext(3.70, 3.60, \"Legend\")\n\n# Axes\ncircle(0.5, 0.5)\ntext(0.5, 0.3, \"Axes\")\n\n# Figure\ncircle(-0.3, 0.65)\ntext(-0.3, 0.45, \"Figure\")\n\ncolor = 'blue'\nax.annotate('Spines', xy=(4.0, 0.35), xycoords='data',\n            xytext=(3.3, 0.5), textcoords='data',\n            weight='bold', color=color,\n            arrowprops=dict(arrowstyle='->',\n                            connectionstyle=\"arc3\",\n                            color=color))\n\nax.annotate('', xy=(3.15, 0.0), xycoords='data',\n            xytext=(3.45, 0.45), textcoords='data',\n            weight='bold', color=color,\n            arrowprops=dict(arrowstyle='->',\n                            connectionstyle=\"arc3\",\n                            color=color))\n\nax.text(4.0, -0.4, \"Made with http:\/\/matplotlib.org\",\n        fontsize=10, ha=\"right\", color='.5')\n\nplt.show()","930884e0":"x = [3,4,6]\ny = [2,6,10]\nplt.plot(x,y)\nplt.title(\"Lines\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.show()","289c0f01":"import numpy as np\nt = np.arange(0,10,2)\nplt.plot(t,t**3)\nplt.title(\"curve\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.show()","04433867":"import matplotlib.pyplot as plt\nx = [1,2,3,4,5,6,7,8,9,10]\ny = [(i**2) for i in x]\nplt.plot(x,y)\nplt.figure(figsize = (100,120))\nplt.title(\"Figsize_visualizing\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.show()","a795a2c0":"import matplotlib.pyplot as plt\nplt.subplot(1,2,1) # rows, column and index\nplt.plot([1,2,3,4,5],[3,4,5,7,9])\nplt.title(\"1st_subplot\")\n\nplt.subplot(1,2,2)\nplt.plot([2,3,3],[5,6,7])\nplt.title(\"2nd_subplot\")\n\nplt.show()","52ae0c47":"import matplotlib.pyplot as plt\nfig = plt.figure()\nax1 = fig.add_subplot(1,1,1) #(rows, column, panel number)\nax1.plot([1,2,3,4,5],[2,4,6,8,10])\nax2 = fig.add_subplot(2,2,1)\nax2.plot([2,4,6,8,10],[1,3,5,7,9])\nax3= fig.add_subplot(2,2,4)\nax3.plot([2,4,6,8,10],[1,3,5,7,9])","ff246758":"import numpy as np\nt=np.arange(0,5,0.2)\n#r-- means red line, -- means type of points\n#b^ means blue curve, ^ means type of points\nplt.plot(t,t,'r--',t,t**3,'b^',t,t**2,'gs')","af9712f0":"%matplotlib inline\n\n\ndata={'a':np.arange(50),\n'c':np.random.randint(0,50,50),\n'd':np.random.randn(50)}\ndata['b']=data['a']+10*np.random.randn(50)\ndata['d']=np.abs(data['d'])*109\nplt.scatter('a','b',c='c',s='d',data=data) # c = color, s = size\n#plt.show()","f90a3242":"%matplotlib inline\n\n\nx1 = np.linspace(0, 10, 100)\n\n\n# create a plot figure\nfig = plt.figure()\n\nplt.plot(x1, np.sin(x1), '-')\nplt.plot(x1, np.cos(x1), '--');\n\n#plt.show()","b00fb389":"# We can get figure information\nprint(plt.gcf())","63db086e":"# We can get axes information\nprint(plt.gca())","1dc08857":"import matplotlib.pyplot as plot\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nstudents = [23,17,35,29,12]\nsection = [\"sec-A\", \"sec-B\",\"sec-C\",\"sec-D\", \"sec-E\"]\nax.bar(section, students)\nprint(plt.gca())\nplt.show()","ff0b9e6e":"# import the pyplot submodule of matplotlib library\n# and rename it as plt\nimport matplotlib.pyplot as plt\n \n# name of the sports\nsports_name=['Aquatics', 'Athletics', 'Rowing', 'Gymnastics', 'Fencing', 'Football','Hockey', 'Wrestling', 'Shooting', 'Sailing', 'Cycling','Canoe \/ Kayak', 'Basketball', 'Volleyball', 'Equestrian', 'Handball','Boxing', 'Weightlifting', 'Judo', 'Baseball', 'Archery', 'Tennis','Rugby', 'Softball', 'Modern Pentathlon', 'Table Tennis', 'Badminton','Tug of War', 'Taekwondo', 'Polo', 'Lacrosse', 'Golf', 'Ice Hockey','Skating', 'Cricket', 'Triathlon', 'Rackets', 'Croquet','Water Motorsports', 'Basque Pelota', 'Jeu de paume', 'Roque']\n \n# These are people which play the respective sport\npeople_playing_the_sports=[3828, 3448, 2523, 2214, 1547, 1387, 1325,140,105,1061,1025,1002,940,910,894,886,842,548,435,335,305,272,192,180,174,120,120,94,80,66,59,30,27,27,24,18,10,8,5,4,3,3]\n \n# To create a bar graph use bar function of pyplot\nplt.bar(sports_name,people_playing_the_sports)\n# Rotate the name of sports by 90 degree in x-axis\nplt.xticks(rotation=90)\n# show the graph \nplt.show()","149443f6":"#Increase the width bby \nSports=['Aquatics', 'Athletics', 'Rowing', 'Gymnastics', 'Fencing', 'Football','Hockey', 'Wrestling', 'Shooting', 'Sailing', 'Cycling','Canoe \/ Kayak', 'Basketball', 'Volleyball', 'Equestrian', 'Handball','Boxing', 'Weightlifting', 'Judo', 'Baseball', 'Archery', 'Tennis','Rugby', 'Softball', 'Modern Pentathlon', 'Table Tennis', 'Badminton','Tug of War', 'Taekwondo', 'Polo', 'Lacrosse', 'Golf', 'Ice Hockey','Skating', 'Cricket', 'Triathlon', 'Rackets', 'Croquet','Water Motorsports', 'Basque Pelota', 'Jeu de paume', 'Roque']\n \nplt.figure(figsize = (15,4))\nplt.bar(Sports, people_playing_the_sports)\nplt.xticks(rotation = 90)\nplt.show()","12530aba":"import matplotlib.pyplot as plt\n \npeople_playing_the_sports=[3828, 3448, 2523, 2214, 1547, 1387, 1325,1140,1105,1061,1025,1002,940,910,894,886,842,548,435,335,305,272,192,180,174,120,120,94,80,66,59,30,27,\n27,24,18,10,8,5,4,3,3]\n \nsports_name=['Aquatics', 'Athletics', 'Rowing', 'Gymnastics', 'Fencing', 'Football','Hockey', 'Wrestling', 'Shooting', 'Sailing', 'Cycling','Canoe \/ Kayak', 'Basketball', 'Volleyball', 'Equestrian', 'Handball','Boxing', 'Weightlifting', 'Judo', 'Baseball', 'Archery', 'Tennis','Rugby', 'Softball', 'Modern Pentathlon', 'Table Tennis', 'Badminton','Tug of War', 'Taekwondo', 'Polo', 'Lacrosse', 'Golf', 'Ice Hockey',\n'Skating', 'Cricket', 'Triathlon', 'Rackets', 'Croquet',\n'Water Motorsports', 'Basque Pelota', 'Jeu de paume', 'Roque']\n \n# Increase the width and the height\nplt.figure(figsize=(15,10))\nplt.barh(Sports,people_playing_the_sports)\nplt.xticks(rotation=90)\nplt.show()","df002a36":"import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(1,1)\na = np.array([11,12,40,35,65, 73, 76, 89])\nax.hist(a, bins = \"auto\")\nax.set_title(\"Histogram\")\nax.set_xlabel(\"Marks\")\nax.set_ylabel(\"Students\")\nplt.show()\n","1727662f":"%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-white')\n\ndata = np.random.randn(1000)\n","0da6b173":"plt.hist(data, bins = 50)\n","acb7d221":"plt.hist(data, bins=5,alpha=0.3,\n         histtype='stepfilled', color='steelblue',\n         edgecolor='none')\n","b9b26b94":"x1 = np.random.normal(0, 0.8, 1000)\nx2 = np.random.normal(-2, 1, 1000)\nx3 = np.random.normal(3, 2, 1000)\n\nkwargs = dict(histtype='barstacked', alpha=0.3, bins=40)\n\nplt.hist(x1, **kwargs)\nplt.hist(x2, **kwargs)\nplt.hist(x3, **kwargs);","15758a75":"counts, bin_edges = np.histogram(data, bins=5)\nprint(counts)","88cde0d9":"girls_grades = [83, 90, 71, 80, 100, 87]\nboys_grade = [90, 70, 56, 78,75,90]  \ngrades_range = [1,2,3,4,5,6]\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.scatter(grades_range, girls_grades, color = \"b\")\nax.scatter(grades_range, boys_grade, color = \"r\")\nax.set_xlabel(\"Grades Range\")\nax.set_ylabel(\"Grades Scored\")\nax.set_title(\"scatter plot\")\nplt.show()","26c1c5ae":"x9 = np.arange(0, 4, 0.2)\n\ny9 = np.exp(-x9)\n\ne1 = 0.1 * np.abs(np.random.randn(len(y9)))\ne1","fccd98d9":"A = [15., 30., 45., 22.]\n\nB = [15., 25., 50., 20.]\n\nz2 = range(4)\n\nplt.bar(z2, A, color = 'b')\nplt.bar(z2, B, color = 'r', bottom = A)\n\nplt.show()","47bbb43c":"# importing matplotlib \nimport matplotlib.pyplot as plt  \n  \n# making a simple plot \nx =[1, 2, 3, 4, 5, 6, 7] \ny =[1, 2, 1, 2, 1, 2, 1] \n  \n# creating error \nx_error = 0.5\n  \n# ploting graph \nplt.plot(x, y) \nplt.errorbar(x, y, \n             xerr = x_error, \n             fmt ='o') ","66462565":"# import require modules  \nimport numpy as np \nimport matplotlib.pyplot as plt \n  \n  \n# defining our function  \nx = np.arange(10)\/10 \ny = (x + 0.1)**2\n  \n# defing our error  \ny_error = np.linspace(0.05, 0.2, 10) \n  \n# ploting our function and  \n# error bar \nplt.plot(x, y) \n  \nplt.errorbar(x, y, yerr = y_error, fmt ='o') ","254a532d":"import matplotlib.pyplot as plt\n\nTasks = [300,500,700]\n\nmy_labels = 'Tasks Pending','Tasks Ongoing','Tasks Completed'\nplt.pie(Tasks,labels=my_labels,autopct='%1.1f%%')\nplt.title('My Tasks')\nplt.axis('equal')\nplt.show()","dd7b2463":"import matplotlib.pyplot as plt\n\nTasks = [300,500,700]\n\nmy_labels = 'Tasks Pending','Tasks Ongoing','Tasks Completed'\nmy_colors = ['lightblue','lightsteelblue','silver']\nmy_explode = (0, 0, 0.1)\nplt.pie(Tasks, labels=my_labels, autopct='%2.2f%%', startangle= 45, shadow = True, colors=my_colors, explode=my_explode)\nplt.title('My Tasks')\nplt.axis('equal')\nplt.show()","e819e322":"from pandas import DataFrame\n\nData = {'Tasks': [300,500,700]}\ndf = DataFrame(Data,columns=['Tasks'])\n\nprint (df)","007f014d":"from pandas import DataFrame\nimport matplotlib.pyplot as plt\n\nData = {'Tasks': [300,500,700]}\ndf = DataFrame(Data,columns=['Tasks'])\n\nmy_labels = 'Tasks Pending','Tasks Ongoing','Tasks Completed'\nmy_colors = ['lightblue','lightsteelblue','silver']\nmy_explode = (0, 0.1, 0)\nplt.pie(df, labels=my_labels, autopct='%1.1f%%', startangle=15, shadow = True, colors=my_colors, explode=my_explode)\nplt.title('My Tasks')\nplt.axis('equal')\nplt.show()","ae9d9ce5":"data3 = np.random.randn(100)\n\nplt.boxplot(data3)\n\nplt.show();","165b96fd":"import matplotlib.pyplot as plt\ntechnologies=['Data Science', 'Cyber Security', 'Web Development', 'Android Development', 'Data Analyst'] \nnumber_of_students=[78,49,112,129,59]\n \n# Wrong way-\nplt.bar(technologies,number_of_students)\nplt.figure(figsize=(10,5))\nplt.xticks(rotation=90)\nplt.show()\n \n \n#Correct way\nplt.figure(figsize=(10,5))\nplt.bar(technologies,number_of_students)\nplt.xticks(rotation=90)\nplt.show()","af219676":"x15 = np.arange(1, 5)\n\nplt.plot(x15, x15*1.5, x15, x15*3.0, x15, x15\/3.0)\n\nplt.grid(True)\n\nplt.show()","17988207":"x16 = np.arange(1, 5)\n\nplt.plot(x16, 'r')\nplt.plot(x16+1, 'g')\nplt.plot(x16+2, 'b')\n\nplt.show()","ccf5140e":"x16 = np.arange(1, 5)\n\nplt.plot(x16, '--', x16+1, '-.', x16+2, ':')\n\nplt.show()","d5c5cc9a":"Suppose we have a` pandas data frame that contains information about some sports and how many people play those sports. Something like this-","f45dd7f8":"# 18. Adding A Grid\nIn some cases, the background of a plot was completely blank. We can get more information, if there is a reference system in the plot. The reference system would improve the comprehension of the plot. An example of the reference system is adding a grid. We can add a grid to the plot by calling the grid() function. It takes one parameter, a Boolean value, to enable(if True) or disable(if False) the grid.","bb613326":"# 19. Different Colors\n\nWe can draw different lines or curves in a plot with different colors. In the code below, we specify color as the last argument to draw red, blue and green lines.","ba97876a":"# 3. Anatomy of A Figure\nBefore learning further lesson, let's see the anatomy of a figure:","10152103":"# 4.  Adding Title\nNow, we can add a title to the plot, as well as the X-axis and Y-axis names using the title(), xlabel(), ylabel() methods, respectively.\n","aee00a7a":"# 5. Matplotlib Subplots:\n\nYou can use the subplot() method to add more than one plot in a figure. \n\nSyntax: plt.subplots(nrows, ncols, index)\n\nThe three-integer arguments specify the number of rows and columns and the index of the subplot grid.","0998315a":"# 20. Line Styles\n\nMatplotlib provides us different line style options to draw curves or plots.Let's see different types of line with  different plot","dd8a1533":"# 15. Style the Pie Chart\n\nYou can further style the pie chart by adding:\n\nStart angle\nShadow\nColors\nExplode component\nThis is the code that you can use for the styled chart:","af6d1435":"The plt.hist docstring has more information on other customization options available. I find this combination of **histtype='stepfilled'** along with some transparency alpha to be very useful when comparing histograms of several distributions:**","493cf9d1":"The axes label is a region of the image with data space. \n\nAn axes object is added to figure by the add_axes() method. The syntax for the axes object is: ax = fig.add_axes([left,right,width,height]).\n\n","ec6a089b":"# 6. Multiline Plots\nWe can plot different lines, curves in one graph.","16646427":"**Colour abbreviation Colour name**\n\nb blue\n\nc cyan\n\ng green\n\nk black\n\nm magenta\n\nr red\n\nw white\n\ny yellow\n\nThere are several ways to specify colours, other than by colour abbreviations:\n\n\u2022 The full colour name, such as yellow\n\n\u2022 Hexadecimal string such as ##FF00FF\n\n\u2022 RGB tuples, for example (1, 0, 1)\n\n\u2022 Grayscale intensity, in string format such as \u20180.7\u2019.\n\n","5f46e4bd":"There exists more plotting type than the given basic types, for example(Contour plot, Area chart etc.) I have given example  1-D plotting, but we can do more than 1 -d drawing with this useful tool.\n(I will try to cover that if everything goes well)\n\nBut I believe it's already clear why matplotlib is the most used and super easy data visualization tool.\n","113622c2":"Here, first array appears on the X-axis, and the second array appears on the Y-axis of the plot.\n\n","6eb355d5":"# 2. Let's Start","937c594b":"We can create a chart based on Pandas Data Frame\n","ca3c5be7":"# 8. Bar Graphs\n\nA  bar graph presents data with heights and lengths proportional to the values they present.**","f777c744":"# 16. Boxplot\nBoxplot allows us to compare distributions of values by showing the median, quartiles, maximum and minimum of a set of values.\n\nWe can plot a boxplot with the boxplot() function as follows:-","859df90e":"# Matplotlib tutorial for beginners\n\nTo make necessary statistical speculation, it is essential to visualize the data and for Python usesrs there is multiple options for data visualization.These Python data visualization tools are as follows:-\n\n\u2022 Matplotlib\n\n\u2022 Seaborn\n\n\u2022 pandas\n\n\u2022 Bokeh\n\n\u2022 Plotly\n\n\u2022 folium\n\n\u2022 ggplot\n\n\u2022 vispy\n\n\nIn the following sections, I discuss Matplotlib as the data visualization tool.(I have another project where datas are visualized with different visualization tools).\n\nBut Matplotlib has emerged as the main data visualization library and many Python libraries are built on Matplotlib.\nTo conceive publication quality figures in hardcopy formats and interactive environments, python users use matplotlib. \nIn this project, I will cover \n\n1. What Is Matplotlib??\n2. Let's Start\n3. Anatomy of A Figure\n4. Title Adding\n5. Matplotlib Subplot\n6. Multiline Plots\n7. Important Types of Plots\n8. Bar Graphs\n9. Changing The Height Using Matplotlib Figsize\n10. Histograms\n11. Scatter Plot\n12. Stacked Bar Chart\n13. Error Bar Chart\n14. Pie Chart\n15. Style The Pie Chart\n16. Boxplot\n17. Matplotlib Figsize Not Working Error\n18. Adding A Grid\n19. Different Colors\n20. Line Styles\n","ff62b234":"# 17. Matplotlib Figsize Not Working Error\n\nSometimes, what we may get an error- \u2018matplotlib figsize not working\u2019. This happens when we first plot the graph and then set the figsize.\n\n","4aadcd86":"The hist() function has many options to tune both the calculation and the display; here's an example of a more customized histogram:","26b2fa52":"#Method figure(), argument figsize()\nUsers can also specify the size of the figure using the figure() method. Additionally, users can pass values as tuples, which make up the width and the height of the graph.It plays vital role while visualizing the data.(An important example is given in the Bar graph) ","0f10521b":"# 14. Pie Chart\nPie charts are circular representations, divided into sectors. The sectors are also called wedges. The arc length of each sector is proportional to the quantity we are describing. It is an effective way to represent information when we are interested mainly in comparing the wedge against the whole pie, instead of wedges against each other.\n","af750be1":"# 13. Error Bar Chart\n\nIn experimental design, the measurements lack perfect precision. So, we have to repeat the measurements. It results in obtaining a set of values. The representation of the distribution of data values is done by plotting a single data point (known as mean value of dataset) and an error bar to represent the overall distribution of data.\n","26f85c69":"Using a \"data\" keyword argument, we can produce Python plots with strings that relate to some variables. We can access these variables with strings.\n","0c05d838":"**Plotting from a Jupyter notebook**\n\nThe Jupyter Notebook (formerly known as the IPython Notebook) is a data analysis and visualization tool that provides multiple tools under one roof. It provides code execution, graphical plots, rich text and media display, mathematics formula and much more facilities into a single executable document.\n\nInteractive plotting within a Jupyter Notebook can be done with the %matplotlib command. There are two possible options to work with graphics in Jupyter Notebook. These are as follows:-\n\n\u2022 %matplotlib notebook \u2013 This command will produce interactive plots embedded within the notebook.\n\n\u2022 %matplotlib inline \u2013 It will output static images of the plot embedded in the notebook.\n\nAfter this command (it needs to be done only once per kernel per session), any cell within the notebook that creates a plot will embed a PNG image of the graphic.","cd17d1eb":"# 11. Scatter Plots\n\nScatter plots are used to represent values for two different numeric variables.\n(We've already seen the scatter plots)","3b773ab7":"We can use Numpy to plot points.\nHere, we are using numpy to plot curve.","5efb949f":"The add_subplot() function of the figure class enables us to add a graph inside a graph.\n\n","0786646e":"The optional bottom parameter of the plt.bar() function allows us to specify a starting position for a bar. Instead of running from zero to a value, it will go from the bottom to value. The first call to plt.bar() plots the blue bars. The second call to plt.bar() plots the red bars, with the bottom of the red bars being at the top of the blue bars.\n\n","85dddcce":"# 7. Important Types of Plots\n\n1. Bar graphs\n2. Histograms\n3. Scatter plots\n4. Stacked bar chart\n5. Error bar chart\n6. Pie chart","dcde7c61":"# 12. Stacked Bar Chart\n\nWe can draw stacked bar chart by using a special parameter called bottom from the plt.bar() function. It can be done as follows:-","bbd44a3c":"![image.png](attachment:image.png)","3e869091":"# 10. Histograms\n\nA histogram is used to understand the distribution of a continuous numerical variable.","772fdac6":"# 1. What is Matplotlib?\n\n.Matplotlib is an open-source drawing library that supports various drawing types.It is a comprehensive plotting library useful for those working with Python and Numpy.\n\n.You can generate plots, histograms, bar charts, and other types of charts with just a few lines of code.\n\n.It\u2019s often used in web application servers, shells, and Python scripts\nPython Training Course.","81cf662e":"#Import Matplotlib\nBefore start using Matplotlib, we need to import it using \"import\" command.","0dad701c":"\u2022 The red bar is the median of the distribution.\n\n\u2022 The box includes 50 percent of the data from the lower quartile to the upper quartile. Thus, the box is centered on the median of the data.\n\n\u2022 The lower whisker extends to the lowest value within 1.5 IQR from the lower quartile.\n\n\u2022 The upper whisker extends to the highest value within 1.5 IQR from the upper quartile.\n\n\u2022 Values further from the whiskers are shown with a cross marker.","649d4d11":"Error bars always run parallel to a quantity of scale axis so they can be displayed either vertically or horizontally depending on whether the quantitative scale is on the y-axis or x-axis if there are two quantity of scales and two pairs of arrow bars can be used for both axes.","53ae4985":"# 9. Changing The Height Using Matplotlib Figsize","e82d00e8":"We can see that due to a lack of space, the graph is too untidy. For a better-looking graph, we need to change the width of the graph. Let us see how we will do that.","88d8717f":"[Most of the time we have to work with **pyplot**, it is a matplotlib module that provides simple functions for adding plot elements, such as lines, images, text, etc. to the axes in the current figure. ]\n","5d573e1e":"Style abbreviation Style\n\n**.** solid line\n\n-- dashed line\n\n-. dash-dot line\n\n: dotted line","2dff60e4":"If you would like to simply compute the histogram (that is, count the number of points in a given bin) and not display it, the np.histogram() function is available:"}}