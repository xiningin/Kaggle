{"cell_type":{"033fc950":"code","033b8c4f":"code","3809feca":"code","9e7a5221":"code","d2fd9875":"code","29f4ae0f":"code","c4b16144":"code","2274c779":"code","d4091b9e":"code","fb6b8044":"code","b18c18e8":"code","ad9e1022":"code","40bf66a8":"code","f432b02e":"code","92f54225":"code","90463c6a":"code","d038ffe0":"code","a3e82cb1":"code","664e3295":"code","4d65b3cd":"code","c1f4bb3a":"code","e39f5dd0":"code","6933db14":"code","b5712c57":"code","7978eec1":"code","570373df":"code","8c46d9d7":"code","da195e96":"code","460c37cd":"code","0e5c4133":"code","7ff17d12":"code","75f069d6":"code","52989cbf":"code","327f6557":"code","3e03a822":"code","97a28a9d":"code","35a4ff1d":"code","273c0f6a":"code","5101a09e":"code","cdab3cb2":"code","53bbccff":"code","e8e05c4a":"code","f6a0b6ca":"code","15687a5c":"code","c320b39d":"code","8e3bbde0":"code","f075475f":"code","2084be4d":"code","73427843":"code","b8f521dc":"code","8792042b":"code","3ee5ca2d":"code","3764525c":"code","a612cb62":"code","9eb1cf9c":"code","c123dd11":"code","49d971ed":"code","7615f035":"code","b8b605a0":"code","48256816":"code","6ee3f25d":"code","c39586c2":"code","deed3864":"code","19e63246":"code","150faa5d":"code","4d52511b":"code","3e034ba5":"code","a8071230":"code","b12870e1":"code","e1b02505":"code","3af191de":"code","935b6afe":"code","8669cfd0":"code","e7ee41b4":"code","4f7e8968":"code","21110c8f":"code","2e2e297d":"code","865d9820":"code","f9afe7d0":"code","532bf3e6":"code","539ea09f":"code","9efd8d3c":"code","be7fdefa":"code","5b354b9b":"code","7cd90310":"code","751235e8":"markdown","0ad30dcd":"markdown","b52cd43f":"markdown","f6f8c413":"markdown","07933e52":"markdown","7901e27e":"markdown","71818a56":"markdown","4c04f92d":"markdown","e883a0cd":"markdown","1884acd2":"markdown"},"source":{"033fc950":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n","033b8c4f":"# refrence from Ken jee and Minsuk Heo.. thanks your work helped a lot","3809feca":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n","9e7a5221":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","d2fd9875":"train.head()","29f4ae0f":"test.head()","c4b16144":"train.info()\ncat = ['Pclass','Sex','SibSp','Parch','Cabin','Embarked']\nnum = ['Survived','Age','Fare']","2274c779":"import seaborn as sns\nsns.set()\ntest.info()","d4091b9e":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","fb6b8044":"bar_chart('Sex')","b18c18e8":"for i in cat:\n    print(bar_chart(i),end = \"  \")","ad9e1022":"train_test = [train,test]","40bf66a8":"for data in train_test:\n    data['Title'] = data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","f432b02e":"train.Title.value_counts()","92f54225":"test.Title.value_counts()","90463c6a":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor data in train_test:\n    data['Title'] = data['Title'].map(title_mapping)","d038ffe0":"test.Title.value_counts()","a3e82cb1":"train.Title.value_counts()","664e3295":"bar_chart('Title')","4d65b3cd":"train.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","c1f4bb3a":"train.head()","e39f5dd0":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor data in train_test:\n    data['Sex'] = data['Sex'].map(sex_mapping)\ntrain.head()","6933db14":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","b5712c57":"sns.distplot(train[train['Survived']==1]['Age'])\nsns.distplot(train[train['Survived']==0]['Age'])","7978eec1":"def binningAge(age):\n    if age<=16:\n        return 0\n    elif age>16 and age<=26:\n        return 1\n    elif age>26 and age<=36:\n        return 2\n    elif age>36 and age<=62:\n        return 3\n    else:\n        return 4","570373df":"for data in train_test:\n    data['ageGrouped']= data['Age'].apply(lambda x : binningAge(x))\ntrain.head()","8c46d9d7":"bar_chart('ageGrouped')","da195e96":"train[train['Survived']==0]['ageGrouped'].value_counts()","460c37cd":"train[train['Survived']==1]['ageGrouped'].value_counts()- train[train['Survived']==0]['ageGrouped'].value_counts()","0e5c4133":"train['Embarked'].value_counts()","7ff17d12":"bar_chart('Embarked')","75f069d6":"# missing value for embarked can assigned with the help of other categorical variable like pclass ","52989cbf":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","327f6557":"# s more then 50% in all class,\n# q only embarked in 3rd and rarely in 2nd class\n# c are mostly in 1 and 3 class,,\n# s in most common in all class, thats why filling s in missing values","3e03a822":"train[train['Pclass']==1]['Embarked'].value_counts()","97a28a9d":"train[train['Pclass']==2]['Embarked'].value_counts()","35a4ff1d":"train[train['Pclass']==3]['Embarked'].value_counts()","273c0f6a":"for data in train_test:\n    data['Embarked'] = data['Embarked'].fillna('S')\n","5101a09e":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","cdab3cb2":"sns.FacetGrid(train, hue=\"Survived\",aspect=4).map(sns.kdeplot,'Fare',shade= True).set(xlim=(0, train['Fare'].max())).add_legend()","53bbccff":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max())).add_legend()\nplt.xlim(0,30)","e8e05c4a":"'''for dataset in train_test:\n    dataset.loc[ dataset['Fare'] <= 17, 'FareGropued'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'FareGropued'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'FareGropued'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'FareGropued'] = 3'''\ndef fare_group(x):\n    if x<=17:\n        return 0\n    elif x>17 and x<=30:\n        return 1\n    elif x>30 and x<=100:\n        return 2\n    else:\n        return 3","f6a0b6ca":"for data in train_test:\n    data['fareGrouped']= data['Fare'].apply(lambda x : fare_group(x))\ntrain.head()","15687a5c":"bar_chart('fareGrouped')","c320b39d":"# those who belong to group 0 and 1 are more likely to be dead more as compare group 2 and 3","8e3bbde0":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","f075475f":"for dataset in train_test:\n    dataset['CabinCoach'] = dataset['Cabin'].str[:1]\ntrain.head()","2084be4d":"Pclass1 = train[train['Pclass']==1]['CabinCoach'].value_counts()\nPclass2 = train[train['Pclass']==2]['CabinCoach'].value_counts()\nPclass3 = train[train['Pclass']==3]['CabinCoach'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","73427843":"train[train['Pclass']==1]['CabinCoach'].value_counts().sort_index()","b8f521dc":"train[train['Pclass']==2]['CabinCoach'].value_counts().sort_index()","8792042b":"train[train['Pclass']==3]['CabinCoach'].value_counts().sort_index()","3ee5ca2d":"train['CabinCoach'].value_counts()","3764525c":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test:\n    dataset['CabinCoach'] = dataset['CabinCoach'].map(cabin_mapping)","a612cb62":"train.head()","9eb1cf9c":"# fill missing Fare with median fare for each Pclass\ntrain[\"CabinCoach\"].fillna(train.groupby(\"Pclass\")[\"CabinCoach\"].transform(\"median\"), inplace=True)\ntest[\"CabinCoach\"].fillna(test.groupby(\"Pclass\")[\"CabinCoach\"].transform(\"median\"), inplace=True)","c123dd11":"train.head()","49d971ed":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","7615f035":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","b8b605a0":"test['FamilySize'].describe()","48256816":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","6ee3f25d":"train.head()","c39586c2":"features_drop = ['Ticket', 'SibSp', 'Parch','Fare','Cabin','Age']\ndf_train = train.drop(features_drop,axis=1)\ndf_test = test.drop(features_drop,axis=1)\n","deed3864":"df_train.head()","19e63246":"df_train = df_train.drop(['PassengerId'],axis =1)\ndf_train.head()","150faa5d":"train_data = df_train.drop(['Survived'],axis=1)\ntrain_data\ntarget = df_train['Survived']","4d52511b":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","3e034ba5":"train_data.info()","a8071230":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","b12870e1":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","e1b02505":"round(np.mean(score)*100, 2)","3af191de":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","935b6afe":"round(np.mean(score)*100, 2)","8669cfd0":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","e7ee41b4":"round(np.mean(score)*100, 2)","4f7e8968":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","21110c8f":"round(np.mean(score)*100, 2)","2e2e297d":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\nround(np.mean(score)*100,2)","865d9820":"test.info()","f9afe7d0":"features_drop = ['Ticket', 'SibSp', 'Parch','Fare','Cabin','Age']\ntest_data = test.drop(features_drop,axis=1)\ntest_data.info()","532bf3e6":"test_data = test_data.drop(['PassengerId'],axis=1)\n","539ea09f":"test_data.info()","9efd8d3c":"clf = SVC()\nclf.fit(train_data, target)\nprediction = clf.predict(test_data)","be7fdefa":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })","5b354b9b":"submission.to_csv('submission.csv', index=False)","7cd90310":"submission = pd.read_csv('submission.csv')\nsubmission.head()","751235e8":"# missing values in test are AGE, Cabin, fare(2)","0ad30dcd":"# data exploration for categorical variable - results","b52cd43f":"# missing values in AGE, Cabin , and embark(2)","f6f8c413":"person with title as MR. are more likely dead and rest others survive as compare to MR","07933e52":"now for embark","7901e27e":"# KNN","71818a56":"# Decision Tree\n","4c04f92d":"for Pclass: mostly 1st class people survived as compared to 3rd class, and second class results are not much different\n\nfor sex: more no of female survived as compared to men\n\nfor sbsip : a person with 2 siblings are more likely to survie and the person with no siblings are likely to be dead.\n\nfor parch : a person with parent\/children are likely to survive and a person with no parent\/children are likely to dead\n\nfor embarked  : person boarded from c likely  to survive,  person boarded from q and s likely to die more,\n\nlater check for correlation.\n\n# now numeric and other variables-- feature engineering","e883a0cd":"1st : a b c d e t\n\n2nd : d e f\n\n3rd : e f g","1884acd2":"person in age group of 1,2,3,4 are more likely to be dead as compare to age group of 0,"}}