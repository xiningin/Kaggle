{"cell_type":{"a5c7cafa":"code","778a0b52":"code","d5d81289":"code","893e5803":"code","1837415d":"code","fc4101b8":"code","92d3662f":"code","fe2b6f1c":"code","17cba80a":"code","31ee5e12":"code","74a065e6":"code","5da78ead":"code","c9df4066":"code","caa3d133":"code","a452dcf0":"code","46a6ee01":"code","7d94a897":"code","8cec1002":"code","3961e38b":"code","bf3a8424":"code","37c36057":"code","7f84fda5":"code","6c43d492":"code","f40b15ee":"code","0ef67551":"code","081a2b28":"code","330c5574":"code","63466391":"code","87bda62a":"code","65a3a45e":"code","2cac917e":"code","c15184ae":"code","d84dddf1":"code","088be96f":"code","a1e422a3":"code","ec96a513":"code","f7a05d07":"code","5df50882":"code","dd101a28":"code","cf066848":"code","15e8979c":"code","c638ea37":"code","7028f3e0":"code","340ef9e2":"code","a80c4449":"code","c119e668":"code","501a2fc3":"code","644865ed":"markdown","81782ade":"markdown","76799317":"markdown","ad4be4b9":"markdown","27d5dbc1":"markdown","0edb3530":"markdown","a6fc976b":"markdown","e0cb16b1":"markdown"},"source":{"a5c7cafa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 100)\nimport matplotlib.pyplot as plt\nimport cufflinks as cf\ncf.set_config_file(offline=True)\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","778a0b52":"import bs4\nimport urllib.request\ndef read_table(page_url):\n    page=urllib.request.urlopen(page_url)\n    soup = bs4.BeautifulSoup(page, 'lxml')\n    table = soup.find(name='table')\n    result = dict()\n    for tr in table.findAll('tr'):\n        tds = tr.findAll('td')\n        if len(tds) >=2:\n            result[tds[0].text] = tds[1].text\n    return result","d5d81289":"def human_format(num):\n    magnitude = 0\n    while abs(num) >= 1000:\n        magnitude += 1\n        num \/= 1000.0\n    # add more suffixes if you need them\n    return '%.2f%s' % (num, ['', 'K', 'M', 'G', 'T', 'P'][magnitude])","893e5803":"s = f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Contributions by individuals.csv\"\ncmd_result = ! wc -l \"{s}\"\ncontribs_cnt = int(cmd_result[0].split()[0])\ncontribs_cnt","1837415d":"# Iteration 42 has some bad data that needs to be fixed manually as below\ndef handle_iteration_42(df):\n    bad_row = df[df['TRANSACTION_DT'] == 'SAN DIEGO']\n    bad_rows = bad_row['OCCUPATION'].str.split('\\n').values[0]\n    other_rows = []\n    for i, row in enumerate(bad_rows):\n        if i==0:\n            first_row_last_part = row.split('|')\n        elif i == len(bad_rows)-1:\n            last_row_first_part = row.split('|')\n        else:\n            other_rows.append(row.split('|'))\n    all_dfs = [df]\n    first_row = list(df.loc[bad_row.index].iloc[:, 0:12].copy().values[0]) + first_row_last_part\n    all_dfs.append(pd.DataFrame([first_row], columns=df.columns))\n    all_dfs.append(pd.DataFrame(other_rows, columns=df.columns))\n    all_dfs.append(pd.DataFrame([last_row_first_part + list(df.loc[bad_row.index].iloc[:, 13:].copy().values[0])\n                                   + [np.NaN, np.NaN, np.NaN, np.NaN, np.NaN]], columns=df.columns))\n    df = pd.concat(all_dfs, axis=0)\n    df = df.drop(index=bad_row.index).reset_index()\n    return df","fc4101b8":"## import gc\nchunksize = 100000\ncontribs_by_indivs = []\ncols = None\nfor i in range(contribs_cnt\/\/chunksize):\n    print(f\"Processing chunk {i}\")\n    df = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Contributions by individuals.csv\", skiprows=i*chunksize, nrows=chunksize)\n    if i == 0:\n        cols = df.columns\n    else:\n        df.columns = cols\n    if i == 42:\n        df = handle_iteration_42(df)\n    interesting_ones = df[df['NAME'].str.match('DEJOY, LOUIS', case=False, na=False)]\n    if len(interesting_ones) > 0:\n        contribs_by_indivs.append(interesting_ones)\n#len(contribs_by_indivs)","92d3662f":"contribs_by_indivs = pd.concat(contribs_by_indivs)\ncontribs_by_indivs.head()","fe2b6f1c":"contribs_by_indivs['TRANSACTION_DT'] = pd.to_datetime(\n    contribs_by_indivs['TRANSACTION_DT'].fillna(0).astype('int').astype('str')\n    .replace('0', np.NaN).str.zfill(8), format='%m%d%Y')\ncontribs_by_indivs.head()","17cba80a":"by_date = contribs_by_indivs.groupby(['TRANSACTION_DT']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_date['TOTAL_CONTRIBUTIONS'] = by_date.sort_values('TRANSACTION_DT')['TRANSACTION_AMT'].cumsum()\nplt.figure(figsize=(15,8))\nsns.lineplot(data=by_date, x='TRANSACTION_DT', y='TOTAL_CONTRIBUTIONS').set_title('Total cumulative Contributions over time')","31ee5e12":"committee_master = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Committee master.csv\")\ncommittee_master.head()","74a065e6":"contribs_by_indivs = contribs_by_indivs.merge(committee_master, on='CMTE_ID', how='left')\ncontribs_by_indivs.head()","5da78ead":"all_candidates = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/All candidates.csv\")\nall_candidates.head()","c9df4066":"contributions_from_committees = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Contributions from committees to candidates  independent expenditures.csv\")\ncontributions_from_committees['TRANSACTION_DT'] = pd.to_datetime(\n    contributions_from_committees['TRANSACTION_DT'].fillna(0).astype('int').astype('str')\n    .replace('0', np.NaN).str.zfill(8), format='%m%d%Y')\ncontributions_from_committees.head()","caa3d133":"indivs_contribs_candidate_null = contribs_by_indivs[contribs_by_indivs['CAND_ID'].isnull()]\nindivs_contribs_candidate = indivs_contribs_candidate_null.merge(contributions_from_committees[['CAND_ID', 'CMTE_ID', 'TRANSACTION_DT', 'TRANSACTION_AMT']], on='CMTE_ID')\nindivs_contribs_candidate = indivs_contribs_candidate[indivs_contribs_candidate['TRANSACTION_DT_y'] > indivs_contribs_candidate['TRANSACTION_DT_x']]\nindivs_contribs_candidate.head()","a452dcf0":"total_indivs_contribs_committee = indivs_contribs_candidate.groupby('CMTE_ID').agg({'TRANSACTION_AMT_y': 'sum'}).reset_index().rename(columns={'TRANSACTION_AMT_y': 'COMMITTEE_TOTAL'})\nindivs_contribs_candidate = indivs_contribs_candidate.merge(total_indivs_contribs_committee, on='CMTE_ID')\nindivs_contribs_candidate.head()","46a6ee01":"num_indivs_contribs_committee_candidate = indivs_contribs_candidate.groupby(['CMTE_ID', 'CAND_ID_y']).agg({'TRANSACTION_AMT_y': 'count'}).reset_index().rename(columns={'TRANSACTION_AMT_y': 'NUM_CONTRIBS'})\nindivs_contribs_candidate = indivs_contribs_candidate.merge(num_indivs_contribs_committee_candidate, on=['CMTE_ID', 'CAND_ID_y'])\nindivs_contribs_candidate.head()","7d94a897":"indivs_contribs_candidate['TRANSACTION_AMT'] = indivs_contribs_candidate['TRANSACTION_AMT_x'] * indivs_contribs_candidate['TRANSACTION_AMT_y']\/(indivs_contribs_candidate['COMMITTEE_TOTAL'] * indivs_contribs_candidate['NUM_CONTRIBS'])\nindivs_contribs_candidate.head()","8cec1002":"indivs_contribs_candidate_filled = indivs_contribs_candidate.rename(columns={'CAND_ID_y': 'CAND_ID', 'TRANSACTION_DT_x': 'TRANSACTION_DT'})[contribs_by_indivs.columns]\nindivs_contribs_candidate_filled.head()","3961e38b":"indivs_contribs_candidate_unfilled = contribs_by_indivs[(contribs_by_indivs['CAND_ID'].isnull()) & (~contribs_by_indivs['CMTE_ID'].isin(indivs_contribs_candidate_filled['CMTE_ID']))]\nindivs_contribs_candidate_unfilled.head()","bf3a8424":"contribs_by_indivs = pd.concat([contribs_by_indivs[~contribs_by_indivs['CAND_ID'].isnull()], indivs_contribs_candidate_unfilled, indivs_contribs_candidate_filled], ignore_index=True)\ncontribs_by_indivs.head()","37c36057":"contribs_by_indivs[contribs_by_indivs['CAND_ID'].isnull()]['CMTE_NM'].unique()","7f84fda5":"all_candidates[all_candidates['CAND_NAME'].str.contains('TRUMP')]","6c43d492":"contribs_by_indivs.loc[contribs_by_indivs['CMTE_NM'] == 'TRUMP VICTORY', 'CAND_ID'] = 'P80001571'\ncontribs_by_indivs.head()","f40b15ee":"contribs_by_indivs = contribs_by_indivs.merge(all_candidates, on='CAND_ID', how='left')\ncontribs_by_indivs['CAND_NAME'] = contribs_by_indivs['CAND_NAME'].fillna('Unknown')\ncontribs_by_indivs.head()","0ef67551":"indivs_contribs_party_null = contribs_by_indivs[contribs_by_indivs['CMTE_PTY_AFFILIATION'].isnull()]\nindivs_contribs_party_null.head()\n\nparty_by_cmts = indivs_contribs_party_null.groupby('CMTE_ID').agg({'CAND_PTY_AFFILIATION': 'unique'}).reset_index()\n\nparty_by_cmts['PARTY'] = party_by_cmts[party_by_cmts['CAND_PTY_AFFILIATION'].apply(len) == 1]['CAND_PTY_AFFILIATION'].apply(lambda x : x[0])\nparty_by_cmts","081a2b28":"contribs_by_indivs = contribs_by_indivs.merge(party_by_cmts[['CMTE_ID', 'PARTY']], on='CMTE_ID', how='left')\ncontribs_by_indivs.head()","330c5574":"contribs_by_indivs['PARTY'] = np.where(contribs_by_indivs['CMTE_PTY_AFFILIATION'].isnull(), contribs_by_indivs['PARTY'], contribs_by_indivs['CMTE_PTY_AFFILIATION'])\ncontribs_by_indivs.head()","63466391":"party_codes = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/party-code-descriptions\/\")\ndef map_cand_party(df):\n    df['PARTY_FULL'] = df['PARTY'].map(party_codes)\n    return df\ncontribs_by_indivs = map_cand_party(contribs_by_indivs)\ncontribs_by_indivs.head()","87bda62a":"def color(val):\n    if val == 'DEM':\n        return \"blue\"\n    elif val == 'REP':\n        return \"red\"\n    return \"green\"\ncontribs_by_indivs['PARTY_COLOR'] = contribs_by_indivs['PARTY'].apply(color)\ncontribs_by_indivs.head()","65a3a45e":"contribs_by_indivs['PARTY_FULL'] = contribs_by_indivs['PARTY_FULL'].fillna('Unknown')","2cac917e":"from IPython.display import HTML\nby_party = contribs_by_indivs.groupby(['PARTY_FULL', 'PARTY_COLOR']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_party = by_party.rename(columns={'PARTY_FULL': 'PARTY', 'TRANSACTION_AMT': 'TOTAL_CONTRIBUTIONS'})\nHTML(by_party[['PARTY', 'TOTAL_CONTRIBUTIONS']].to_html(index=False))","c15184ae":"plt.figure(figsize=(15,8))\nsns.barplot(x='PARTY', y='TOTAL_CONTRIBUTIONS', data=by_party, palette=by_party['PARTY_COLOR']).set_title('Contributions by party')","d84dddf1":"from IPython.display import HTML\nlargest_indiv_contribs = (contribs_by_indivs\n                          .groupby(['CMTE_NM', 'PARTY_COLOR'])\n                          .agg({'TRANSACTION_AMT': 'sum'}).reset_index()\n                          .nlargest(columns='TRANSACTION_AMT', n=10)\n                          .rename(columns={'CMTE_NM': 'COMMITTEE', 'TRANSACTION_AMT': 'TOTAL_CONTRIBUTIONS'})\n                         )\nHTML(largest_indiv_contribs[['COMMITTEE', 'TOTAL_CONTRIBUTIONS']].to_html(index=False))","088be96f":"plt.figure(figsize=(15,8))\nchart = sns.barplot(x='COMMITTEE', y='TOTAL_CONTRIBUTIONS', data=largest_indiv_contribs, palette=largest_indiv_contribs['PARTY_COLOR'])\nchart.set_title('Contributions to committees')\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')","a1e422a3":"largest_indiv_contribs = contribs_by_indivs[contribs_by_indivs['CMTE_NM'].isin(largest_indiv_contribs['COMMITTEE'].values)]\nlargest_indiv_contribs.head()","ec96a513":"by_dt_cmte = largest_indiv_contribs.groupby(['TRANSACTION_DT', 'CMTE_NM']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_dt_cmte['TRANSACTION_DT'] = by_dt_cmte['TRANSACTION_DT'].dt.strftime('%Y-%m-%d')\nplt.figure(figsize=(15,8))\nchart = sns.scatterplot(data=by_dt_cmte.rename(columns={'CMTE_NM': 'COMMITTEE'}), x='TRANSACTION_DT', y='TRANSACTION_AMT', hue='COMMITTEE', s=200, marker='D')\nchart.set_title('Contributions to committees over time')\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n)","f7a05d07":"# candidates = all_candidates[all_candidates['CAND_ID'].isin(contribs_by_indivs['CAND_ID'])]\n# candidates.head()","5df50882":"# party_codes = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/party-code-descriptions\/\")\n# def map_cand_party(df):\n#     df['CAND_PTY_AFFILIATION'] = df['CAND_PTY_AFFILIATION'].map(party_codes)\n#     return df\n# candidates = map_cand_party(candidates)\n# candidates.head()","dd101a28":"# def map_cand_ici(df):\n#     ici_map = {'C': 'Challenger', 'I': 'Incumbent', 'O': 'Open Seat'}\n#     df['CAND_ICI'] = df['CAND_ICI'].map(ici_map)\n#     return df\n# candidates = map_cand_ici(candidates)\n# candidates.head()","cf066848":"# def correct_receipts_disbursements(df):\n#     cond = (df['TRANS_FROM_AUTH'] != 0.0) & (df['TRANS_TO_AUTH'] != 0.0)\n#     df.loc[cond, 'TotalReceiptsCorrected'] = df['TTL_RECEIPTS'] - df['TRANS_FROM_AUTH']\n#     df.loc[:, 'TotalReceiptsCorrected'] = df['TotalReceiptsCorrected'].fillna(df['TTL_RECEIPTS'])\n#     df.loc[cond, 'TotalDisbursementsCorrected'] = df['TTL_DISB'] - df['TRANS_TO_AUTH']\n#     df.loc[:, 'TotalDisbursementsCorrected'] = df['TotalDisbursementsCorrected'].fillna(df['TTL_DISB'])\n#     return df\n# candidates = correct_receipts_disbursements(candidates)\n# candidates.head()","15e8979c":"# from re import split\n\n# def camelize(string):\n#     return ''.join(a.capitalize() for a in split('([^a-zA-Z0-9])', string)\n#        if a.isalnum())","c638ea37":"# candidates_desc = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/all-candidates-file-description\/\")\n# candidates_desc = {key.strip():val.strip() for key, val in candidates_desc.items()}\n# candidates_desc = {k: camelize(v) for k,v in candidates_desc.items()}\n# candidates_desc","7028f3e0":"# candidates_to_display = candidates.rename(columns=candidates_desc)\n# candidates_to_display.head()","340ef9e2":"from IPython.display import HTML\nlargest_indiv_contribs = (contribs_by_indivs\n                          .groupby(['CAND_NAME', 'PARTY_COLOR'])\n                          .agg({'TRANSACTION_AMT': 'sum'}).reset_index()\n                          .nlargest(columns='TRANSACTION_AMT', n=10)\n                          .rename(columns={'CAND_NAME': 'CANDIDATE', 'TRANSACTION_AMT': 'TOTAL_CONTRIBUTIONS'})\n                         )\nHTML(largest_indiv_contribs[['CANDIDATE', 'TOTAL_CONTRIBUTIONS']].to_html(index=False))","a80c4449":"plt.figure(figsize=(15,8))\nchart = sns.barplot(x='CANDIDATE', y='TOTAL_CONTRIBUTIONS', data=largest_indiv_contribs, palette=largest_indiv_contribs['PARTY_COLOR'])\nchart.set_title('Contributions to candidates')\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')","c119e668":"largest_indiv_contribs = contribs_by_indivs[contribs_by_indivs['CAND_NAME'].isin(largest_indiv_contribs['CANDIDATE'].values)]\nlargest_indiv_contribs.head()","501a2fc3":"by_dt_cand = largest_indiv_contribs.groupby(['TRANSACTION_DT', 'CAND_NAME']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_dt_cand['TRANSACTION_DT'] = by_dt_cand['TRANSACTION_DT'].dt.strftime('%Y-%m-%d')\nplt.figure(figsize=(15,8))\nchart = sns.scatterplot(data=by_dt_cand.rename(columns={'CAND_NAME': 'CANDIDATE'}), x='TRANSACTION_DT', y='TRANSACTION_AMT', hue='CANDIDATE', marker='D', s=200)\nchart.set_title('Contributions to candidates over time')\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n)","644865ed":"## Looking at Donor profile from Jan 2019 to June 2020\n\n**Disclaimer** : I have compiled this with my best attempt at accuracy. But, until it's peer-reviewed by others (& please do review the code, data and\/or metrics if you can), I cannot guarantee that it's 100% accurate.","81782ade":"## Total contributions by committee\nIt looks at the first 10 committees that the donor has made the highest total contributions","76799317":"# Individual contributions","ad4be4b9":"Here's a small sample :","27d5dbc1":"## Individual contributions by committees","0edb3530":"## Individual contributions by receiving candidates","a6fc976b":"## Total contributions by candidate\nIt looks at the first 10 candidates that the donor has made the highest total contributions.\n\nNote : The donor contributions are to committees which eventually make contributions to the candidates","e0cb16b1":"## Total Contributions by Party"}}