{"cell_type":{"7b50ceee":"code","d7d42ecc":"code","57bafa06":"code","df0b5406":"code","c65f9647":"code","aef5eb83":"code","1ca934fb":"code","06f7c143":"code","eea654a7":"code","9dcbbf17":"code","fa77e0d1":"code","9bd33822":"code","da040e3f":"code","99cddc48":"code","f337b0ac":"code","42def6ab":"code","42e188b3":"code","b4211302":"code","4f8cffaa":"code","9ac2b169":"code","917e4c14":"code","26bca864":"code","66c08ec8":"code","6862525c":"code","2d5279cd":"code","b682cf68":"code","61bd9004":"code","46172127":"code","affbba27":"code","c8d6067b":"code","59426003":"code","37096b4d":"code","82ebd52c":"code","c0ecd121":"code","f8188a70":"code","05fef849":"code","3d7b20e5":"code","91f951d5":"code","707a3d9f":"code","3eea8fa4":"code","fe29adb8":"code","90391b4c":"code","45ff3856":"markdown"},"source":{"7b50ceee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d7d42ecc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline  ","57bafa06":"human = pd.read_table('..\/input\/humandnadata\/human_data\/human_data.txt')\nchimp = pd.read_table('..\/input\/chimpanzee-and-dog-dna\/chimp_data.txt')\ndog = pd.read_table('..\/input\/chimpanzee-and-dog-dna\/dog_data.txt')\nhuman.head(3535)\n","df0b5406":"human['sequence'][15]","c65f9647":"def noise_check(arr):\n    m=[]\n    count = 0\n    for i in range(0,len(arr)):\n        for j in arr['sequence'][i]:\n            if j!='A' and j!='T' and j!='C' and j!='G':\n                count = count + 1\n                m.append(j)\n    if count>0:\n        print(m)\n        print('Noise Count',count)\n    else:\n        print('No noise')","aef5eb83":"noise_check(human)","1ca934fb":"noise_check(chimp)","06f7c143":"noise_check(dog)","eea654a7":"def remove_noise(arr):\n    for i in range(0,len(arr)):\n        arr['sequence'][i] = arr['sequence'][i].replace('N','')\n            ","9dcbbf17":"remove_noise(human)\nremove_noise(chimp)\nremove_noise(dog)","fa77e0d1":"noise_check(human)\nnoise_check(chimp)\nnoise_check(dog)","9bd33822":"def missing_check(arr):\n    classat=[]\n    seqat=[]\n    count = 0\n    for i in range(0,len(arr)):\n        if arr['sequence'][i]=='':\n            seqat.append(i)\n            count = count + 1\n        if arr['class'][i]=='' or arr['class'][i]>6:\n            classat.append(i)\n            count = count + 1\n    if count==0:\n        print('No missing value')\n    else:\n        print('missing count = ',count)\n    ","da040e3f":"missing_check(human)\nmissing_check(chimp)\nmissing_check(dog)","99cddc48":"chimp.head()\n","f337b0ac":"dog.head()","42def6ab":"# function to convert sequence strings into k-mer words, default size = 6 (hexamer words)\ndef getKmers(sequence, size=6):\n    return [sequence[x:x+size].lower() for x in range(len(sequence) - size + 1)]","42e188b3":"human['words'] = human.apply(lambda x: getKmers(x['sequence']), axis=1)\nhuman = human.drop('sequence', axis=1)\nchimp['words'] = chimp.apply(lambda x: getKmers(x['sequence']), axis=1)\nchimp = chimp.drop('sequence', axis=1)\ndog['words'] = dog.apply(lambda x: getKmers(x['sequence']), axis=1)\ndog = dog.drop('sequence', axis=1)","b4211302":"print(human['words'][0])","4f8cffaa":"human_texts = list(human['words'])\nfor item in range(len(human_texts)):\n    human_texts[item] = ' '.join(human_texts[item])\ny_h = human.iloc[:, 0].values ","9ac2b169":"y_h\nlen(y_h)","917e4c14":"human_texts[0]","26bca864":"\n\nchimp_texts = list(chimp['words'])\nfor item in range(len(chimp_texts)):\n    chimp_texts[item] = ' '.join(chimp_texts[item])\ny_c = chimp.iloc[:, 0].values                       # y_c for chimp\n\ndog_texts = list(dog['words'])\nfor item in range(len(dog_texts)):\n    dog_texts[item] = ' '.join(dog_texts[item])\ny_d = dog.iloc[:, 0].values   ","66c08ec8":"# Creating the Bag of Words model using CountVectorizer()\n# This is equivalent to k-mer counting\n# The n-gram size of 4 was previously determined by testing\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(ngram_range=(4,4))\nX = cv.fit_transform(human_texts)\nX_chimp = cv.transform(chimp_texts)\nX_dog = cv.transform(dog_texts)","6862525c":"print(X.shape)\nprint(X_chimp.shape)\nprint(X_dog.shape)","2d5279cd":"\n\nhuman['class'].value_counts().sort_index().plot.bar()\n\n","b682cf68":"\n\nchimp['class'].value_counts().sort_index().plot.bar()\n\n","61bd9004":"dog['class'].value_counts().sort_index().plot.bar()","46172127":"# Splitting the human dataset into the training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y_h, \n                                                    test_size = 0.20, \n                                                    random_state=42)","affbba27":"\n\nprint(X_train.shape)\nprint(X_test.shape)\n\n","c8d6067b":"### Multinomial Naive Bayes Classifier ###\n# The alpha parameter was determined by grid search previously\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB(alpha=0.1)\nclassifier.fit(X_train, y_train)\n","59426003":"y_pred = classifier.predict(X_test)","37096b4d":"from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_test, name='Actual'), pd.Series(y_pred, name='Predicted')))\ndef get_metrics(y_test, y_predicted):\n    accuracy = accuracy_score(y_test, y_predicted)\n    precision = precision_score(y_test, y_predicted, average='weighted')\n    recall = recall_score(y_test, y_predicted, average='weighted')\n    f1 = f1_score(y_test, y_predicted, average='weighted')\n    return accuracy, precision, recall, f1\naccuracy, precision, recall, f1 = get_metrics(y_test, y_pred)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","82ebd52c":"# Predicting the chimp, dog and worm sequences\ny_pred_chimp = classifier.predict(X_chimp)\ny_pred_dog = classifier.predict(X_dog)","c0ecd121":"# performance on chimp genes\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_c, name='Actual'), pd.Series(y_pred_chimp, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_c, y_pred_chimp)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","f8188a70":"# performance on dog genes\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_d, name='Actual'), pd.Series(y_pred_dog, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_d, y_pred_dog)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","05fef849":"from sklearn.metrics import roc_curve  \nimport seaborn as sns","3d7b20e5":"def plot_roc_curve(fper, tper):  \n    plt.plot(fper, tper, color='orange', label='ROC')\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","91f951d5":"len(y_test)","707a3d9f":"len(y_pred)","3eea8fa4":"\nfrom sklearn.preprocessing import label_binarize\ny_pred = label_binarize(y_pred, classes=[0,1,2,3,4,5,6])\ny_test = label_binarize(y_test, classes=[0,1,2,3,4,5,6])\ny_pred_chimp = label_binarize(y_pred_chimp, classes=[0,1,2,3,4,5,6])\ny_pred_dog = label_binarize(y_pred_dog, classes=[0,1,2,3,4,5,6])\ny_c = label_binarize(y_c, classes=[0,1,2,3,4,5,6])\ny_d = label_binarize(y_d, classes=[0,1,2,3,4,5,6])","fe29adb8":"from sklearn.metrics import roc_curve, auc\nfrom itertools import cycle\ndef get_roc(y_t,y_pd,val):\n    fpr = dict()\n    tpr = dict()\n    roc_auc = dict()\n    for i in range(7):\n        fpr[i], tpr[i], _ = roc_curve(y_t[:, i], y_pd[:, i])\n        roc_auc[i] = auc(fpr[i], tpr[i])\n    lw=2\n    colors = cycle(['aqua', 'darkorange', 'cornflowerblue','red','blue','yellow'])\n    for i, color in zip(range(7), colors):\n        plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n                 label='ROC curve of class {0} (area = {1:0.2f})'\n                 ''.format(i, roc_auc[i]))\n\n    plt.plot([0, 1], [0, 1], 'k--', lw=lw)\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC curve {}'.format(val))\n    plt.legend(loc=\"lower right\")\n    plt.show()\n","90391b4c":"\nget_roc(y_test,y_pred,'Human')\nget_roc(y_c,y_pred_chimp,'Chimpanzee')\nget_roc(y_d,y_pred_dog,'Dog')","45ff3856":"data set consists of dna sequence of humans, dog and chimpanzee . the aim of this project is to find which species dna resembles each other and how much. This can be extended for many species to get relation between them. \n\nHere the dataset consists of dna sequences and the corresponding class to which it belongs. There are seven class which are as followed\nimage"}}