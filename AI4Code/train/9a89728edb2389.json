{"cell_type":{"1649c97b":"code","e89bfc5e":"code","05ed501a":"code","653e4797":"code","7f400536":"code","7a4fa102":"code","b4d4b40e":"code","c7704c3c":"code","151d03af":"code","dc6ebb6e":"code","f5917c0b":"code","15b6618f":"code","824079ed":"code","9bb16797":"code","feed9653":"code","4d9ba437":"code","a7982d1b":"code","6a5cdb2b":"code","b8b7f8e5":"code","09b82fbb":"code","38e0b685":"code","ceba3da3":"code","a95f38a8":"code","3ea94f95":"code","159af7bb":"code","7c6a0e57":"code","08de5e8d":"code","12800230":"code","b4d88b0a":"code","431adb74":"code","e4a302a6":"code","375aeb29":"code","95fccea9":"code","8c168b23":"code","e4dde970":"code","affb53ab":"code","47e85998":"code","decb54ea":"markdown","d1fcbf0a":"markdown","c4e53e61":"markdown","b79bbb62":"markdown","b3b159ca":"markdown","2d4039a9":"markdown","16269e3f":"markdown","895da68c":"markdown","f436d056":"markdown","3efee184":"markdown","3d41d3df":"markdown","a3bc08c4":"markdown","73d56195":"markdown","a9d5338f":"markdown","53d069c5":"markdown","5069b0b1":"markdown","a12af934":"markdown"},"source":{"1649c97b":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import GridSearchCV","e89bfc5e":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')\ndf.head()","05ed501a":"plt.figure(figsize=(16,6))\nplt.title('Age Distribution')\nsns.histplot(df['age'], kde=True)","653e4797":"sns.jointplot(x='age', y='charges', data=df)","7f400536":"figure, axes = plt.subplots(2,2, sharex=True, figsize=(18,10))\nfigure.suptitle('Sex Chart')\nsns.countplot(x='sex', data=df, palette='pastel', ax=axes[0][0])\nsns.boxplot(data=df, x='sex', y='charges', palette='pastel', ax=axes[0][1])\nsns.violinplot(x='sex', y='charges', data=df, palette='pastel', ax=axes[1][0])\nsns.stripplot(x='sex', y='charges', data=df, palette='pastel', jitter=True, ax=axes[1][1])","7a4fa102":"plt.figure(figsize=(16,6))\nplt.title('BMI Distribution')\nsns.histplot(df['bmi'], kde=True)","b4d4b40e":"sns.jointplot(x='bmi', y='charges', data=df)","c7704c3c":"figure, axes = plt.subplots(2,2, sharex=True, figsize=(18,10))\nfigure.suptitle('Chuldren Chart')\nsns.countplot(x='children', data=df, palette='pastel', ax=axes[0][0])\nsns.boxplot(data=df, x='children', y='charges', palette='pastel', ax=axes[0][1])\nsns.violinplot(x='children', y='charges', data=df, palette='pastel', ax=axes[1][0])\nsns.stripplot(x='children', y='charges', data=df, palette='pastel', jitter=True, ax=axes[1][1])","151d03af":"smoker_counts = df['smoker'].value_counts()\ncolors = ['#ff9999','#66b3ff']\nlabels = ['Not Smoker', 'Smoker']\nvalues = [smoker_counts[0], smoker_counts[1]]\nexplode = (0.05,0.05)\n \nfig = plt.gcf()\nfig.set_size_inches(8,8)\nplt.pie(values, colors = colors, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.65, explode = explode)\ncentre_circle = plt.Circle((0,0),0.50,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.tight_layout()\nplt.title(\"Smoker Percantage\")\nplt.show()","dc6ebb6e":"figure, axes = plt.subplots(2,2, sharex=True, figsize=(18,10))\nfigure.suptitle('Smoker Chart')\nsns.countplot(x='smoker', data=df, palette='pastel', ax=axes[0][0])\nsns.boxplot(data=df, x='smoker', y='charges', palette='pastel', ax=axes[0][1])\nsns.violinplot(x='smoker', y='charges', data=df, palette='pastel', ax=axes[1][0])\nsns.stripplot(x='smoker', y='charges', data=df, palette='pastel', jitter=True, ax=axes[1][1])","f5917c0b":"figure, axes = plt.subplots(2,2, sharex=True, figsize=(18,10))\nfigure.suptitle('region Chart')\nsns.countplot(x='region', data=df, palette='pastel', ax=axes[0][0])\nsns.boxplot(data=df, x='region', y='charges', palette='pastel', ax=axes[0][1])\nsns.violinplot(x='region', y='charges', data=df, palette='pastel', ax=axes[1][0])\nsns.stripplot(x='region', y='charges', data=df, palette='pastel', jitter=True, ax=axes[1][1])","15b6618f":"df.head()","824079ed":"df.info()","9bb16797":"df['sex'].replace({'female': 1,'male': 0},inplace=True)\ndf['smoker'].replace({'yes': 1,'no': 0},inplace=True)\ndf = pd.get_dummies(df, drop_first=True)","feed9653":"df.info()","4d9ba437":"features = df.drop(['charges'], axis=1)\nlabel = df['charges']","a7982d1b":"X_train, X_test, y_train, y_test = train_test_split(features, label, test_size=0.2, random_state=101)","6a5cdb2b":"scaler = MinMaxScaler()\nX_train_scaler = scaler.fit_transform(X_train)\nX_test_scaler = scaler.transform(X_test)","b8b7f8e5":"def MAE(y_test, y_pred):\n    return tf.metrics.mean_absolute_error(y_test,\n                                        y_pred)\n  \ndef MSE(y_test, y_pred):\n    return tf.metrics.mean_squared_error(y_test,\n                                       y_pred)","09b82fbb":"y_test_numpy = y_test.to_numpy()","38e0b685":"model_tensorflow = tf.keras.Sequential([\n    tf.keras.layers.Dense(100),\n    tf.keras.layers.Dense(10),\n    tf.keras.layers.Dense(1)\n])\n\nmodel_tensorflow.compile(loss='mae',\n                        optimizer='Adam',\n                        metrics=['mae', 'mse'])\n\ntensorflow_performance = model_tensorflow.fit(X_train_scaler, y_train, epochs=100, verbose=0)","ceba3da3":"pd.DataFrame(tensorflow_performance.history).plot()\nplt.ylabel(\"loss\")\nplt.xlabel(\"epochs\");","a95f38a8":"model_tensorflow.evaluate(X_test_scaler, y_test)","3ea94f95":"result_model_tensor = model_tensorflow.evaluate(X_test_scaler, y_test)\nmodel_tensorflow_mae = result_model_tensor[1]\nmodel_tensorflow_mse = result_model_tensor[2]","159af7bb":"model_tensorflow_mae, model_tensorflow_mse","7c6a0e57":"model_tensorflow_preds = model_tensorflow.predict(X_test_scaler)\ntensorflow_preds_data = pd.DataFrame(model_tensorflow_preds, columns=['predicted'])\ntensorflow_preds_data['actual'] = y_test_numpy\ntensorflow_index = []\nfor id in range(len(y_test_numpy)):\n    tensorflow_index.append(id)\n    \ntensorflow_preds_data['id'] = tensorflow_index\ntensorflow_preds_data.head()","08de5e8d":"model_linreg = LinearRegression()\nmodel_linreg.fit(X_train_scaler,y_train)\nmodel_linreg_preds = model_linreg.predict(X_test_scaler)\nmodel_linref_mae = MAE(y_test, y_pred=model_linreg_preds)\nmodel_linref_mse = MSE(y_test, y_pred=model_linreg_preds)","12800230":"model_linref_mae = model_linref_mae.numpy()\nmodel_linref_mse = model_linref_mse.numpy()\nmodel_linref_mae, model_linref_mse","b4d88b0a":"linreg_preds_data = pd.DataFrame(model_linreg_preds, columns=['predicted'])\nlinreg_preds_data['actual'] = y_test_numpy\nlinreg_index = []\nfor id in range(len(y_test_numpy)):\n    linreg_index.append(id)\n    \nlinreg_preds_data['id'] = linreg_index\nlinreg_preds_data.head()","431adb74":"model_params = {\n    'svr': {\n        'model': SVR(),\n        'params' : {\n            'C': [1,10,20,30,50,100,250],\n            'kernel': ['rbf','linear','poly']\n        }  \n    }\n}\n\nscores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    clf.fit(X_train_scaler, y_train)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf_svr = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf_svr","e4a302a6":"model_svr = SVR(C=250, kernel='poly')\nmodel_svr.fit(X_train_scaler,y_train)\nmodel_svr_preds = model_svr.predict(X_test_scaler)\nmodel_svr_mae = MAE(y_test, y_pred=model_svr_preds)\nmodel_svr_mse = MSE(y_test, y_pred=model_svr_preds)","375aeb29":"model_svr_mae = model_svr_mae.numpy()\nmodel_svr_mse = model_svr_mse.numpy()\nmodel_svr_mae, model_svr_mse","95fccea9":"svr_preds_data = pd.DataFrame(model_svr_preds, columns=['predicted'])\nsvr_preds_data['actual'] = y_test_numpy\nsvr_index = []\nfor id in range(len(y_test_numpy)):\n    svr_index.append(id)\n    \nsvr_preds_data['id'] = svr_index\nsvr_preds_data.head()","8c168b23":"model_performance = {\n    'model': ['Neural Network', 'Linear Regression', 'SVR'],\n    'MAE': [model_tensorflow_mae, model_linref_mae, model_svr_mae],\n    'MSE' : [model_tensorflow_mse, model_linref_mse, model_svr_mse]\n}\n\nmodel_performance_dataset = pd.DataFrame(model_performance) \nmodel_performance_dataset.head()","e4dde970":"figure, axes = plt.subplots(1, 2, sharex=True, figsize=(18,6))\nfigure.suptitle('MSE and MAE Comparson from 3 Model')\nsns.barplot(x='model', y='MAE',data=model_performance_dataset,palette='pastel', ax=axes[0])\nsns.barplot(x='model', y='MSE' ,data=model_performance_dataset,palette='pastel', ax=axes[1])","affb53ab":"figure, axes = plt.subplots(1, 3, sharex=True, figsize=(18,6))\nfigure.suptitle('Scatter Plot from each Model Compare to Actual Data')\naxes[0].set_title('SVR')\nsns.scatterplot(x='id',y='predicted',data=svr_preds_data, ax=axes[0])\nsns.scatterplot(x='id',y='actual',data=svr_preds_data, ax=axes[0])\naxes[1].set_title('Tensorflow')\nsns.scatterplot(x='id',y='predicted',data=tensorflow_preds_data, ax=axes[1])\nsns.scatterplot(x='id',y='actual',data=tensorflow_preds_data, ax=axes[1])\naxes[2].set_title('Linear Regression')\nsns.scatterplot(x='id',y='predicted',data=linreg_preds_data, ax=axes[2])\nsns.scatterplot(x='id',y='actual',data=linreg_preds_data, ax=axes[2])","47e85998":"plt.figure(figsize=(16,12))\nplt.title('Scatter Plot for each Model')\nplt.scatter(svr_index, y_test, c='b', label='Actual Data')\nplt.scatter(svr_index, model_svr_preds, c='g', label='SVR Prediction')\nplt.scatter(svr_index, model_tensorflow_preds, c='r', label='Tensorflow Prediction')\nplt.scatter(svr_index, model_linreg_preds, c='y', label='Linear Regression Prediction')\nplt.legend();","decb54ea":"# Evaluate Model Regression","d1fcbf0a":"# Data Explanation","c4e53e61":"## Linear Regression Model","b79bbb62":"## Children Visualization","b3b159ca":"# Medical Cost Personal Regression & Visualize\n\nThis notebook will create a regression model to find the value of medical costs. It starts by creating visualizations of features related to medical cost and creating regression models using Tensorflow Neural Network, Linear Regression and SVR. at the end of the evaluation of these models","2d4039a9":"# Create Regression Model","16269e3f":"## Region Visualize","895da68c":"# Data Preprocessing","f436d056":"## Smoker Visalization","3efee184":"### Thank You for Reading my Notebook","3d41d3df":"# Visualize Column Data With Correlation to Charges","a3bc08c4":"## Sex Visualization","73d56195":"## Tensorflow Neural Network Regression","a9d5338f":"## SVR ","53d069c5":"## Column Explanation\n* **age**: age of primary beneficiary\n* **sex**: insurance contractor gender, female, male\n* **bmi**: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height,objective index of body weight (kg \/ m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9\n* **children**: Number of children covered by health insurance \/ Number of dependents\n* **smoker**: Smoking\n* **region**: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.\n* **charges**: Individual medical costs billed by health insurance","5069b0b1":"## BMI Visualization","a12af934":"## Age Visualization"}}