{"cell_type":{"bfe4fad9":"code","bea978d2":"code","acf28649":"code","02ae5d8d":"code","ff926ecc":"code","b55016d1":"code","558d24d2":"code","9698efd1":"code","89011ab1":"code","a1f8dab4":"code","e4b7fbed":"code","0661ab33":"code","fde8b93d":"code","b2fc4f91":"code","9d764e68":"code","73599d3e":"code","37dabe34":"code","2d0f6a21":"code","24be5d27":"code","89379217":"code","c57e77dd":"code","0c0b9e68":"code","86a46707":"code","5d19ab49":"code","2b9e77c4":"code","26559646":"code","5ecfb184":"code","9f75b154":"code","580dbe68":"code","c5c80813":"code","a423c96c":"code","643fd52d":"code","bb4d39a9":"code","1a8983d5":"code","ec7bec93":"markdown","72dfd3ac":"markdown","43903108":"markdown","0db7878a":"markdown","67d049b0":"markdown","c5d0421b":"markdown","9f18345c":"markdown","d6eeecf6":"markdown","dc1ab92b":"markdown","e4a3123c":"markdown","60808161":"markdown","283b9aac":"markdown","d72e270e":"markdown","88fd2dcf":"markdown","f1c9307b":"markdown","abcb33eb":"markdown","8ac0fed5":"markdown","8694acff":"markdown","3d8a4aaf":"markdown","b4b8aa2e":"markdown"},"source":{"bfe4fad9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bea978d2":"data= pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","acf28649":"data.head()","02ae5d8d":"data.isnull().sum()","ff926ecc":"import matplotlib.pyplot as plt\nimport seaborn as sns","b55016d1":"sns.countplot(data['Outcome'])","558d24d2":"def boxplot(df: pd.DataFrame) -> None:\n    \"\"\"\n    Visualize a boxplot for each feature for each class.\n    \"\"\"\n    fig, axis = plt.subplots()\n\n    for col in df.columns:\n        if col != 'Outcome':\n            sns.boxplot(x='Outcome', y=col, data=df, palette='Blues')\n            plt.show()\n            \n# call the function to display the boxplot\nboxplot(df=data)","9698efd1":"sns.scatterplot(x='Insulin', y='Glucose', hue='Outcome', data=data)\nplt.xlabel('Insulin')\nplt.ylabel('Glucose')","89011ab1":"#plotting age feature\nsns.FacetGrid(data, hue=\"Outcome\", size=5) \\\n   .map(sns.distplot, \"Age\") \\\n   .add_legend()\nplt.show()","a1f8dab4":"sns.pairplot(data,hue='Outcome')","e4b7fbed":"data.corr()","0661ab33":"plt.subplots(figsize=(15,8))\n\nsns.heatmap(data.corr(),annot=True,cmap='rainbow')","fde8b93d":"y= data['Outcome']","b2fc4f91":"data.drop(['Outcome'],axis=1,inplace=True)","9d764e68":"x= data","73599d3e":"x.head()","37dabe34":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nscaled= scaler.fit_transform(x)","2d0f6a21":"from sklearn.model_selection import train_test_split","24be5d27":"X_train,X_val,y_train,y_val= train_test_split(scaled,y)","89379217":"#importing torch \nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F","c57e77dd":"X_train= torch.FloatTensor(X_train)\nX_val= torch.FloatTensor(X_val)\n","0c0b9e68":"y_train= torch.LongTensor(y_train.values)\ny_val= torch.LongTensor(y_val.values)","86a46707":"class ANN_Model(nn.Module):\n    def __init__(self,input_features=8,hidden1=25,hidden2=20,out_features=2):\n        super().__init__()\n        self.f_connected1=nn.Linear(input_features,hidden1)\n        self.f_connected2=nn.Linear(hidden1,hidden2)\n        self.out=nn.Linear(hidden2,out_features)\n    def forward(self,h):\n        h=F.relu(self.f_connected1(h))\n        h=F.relu(self.f_connected2(h))\n        h=self.out(h)\n        return h","5d19ab49":"torch.manual_seed(20)\nmodel=ANN_Model()","2b9e77c4":"model.parameters","26559646":"loss_function= nn.CrossEntropyLoss()","5ecfb184":"optimizer= torch.optim.Adam(model.parameters(),lr=0.01)","9f75b154":"epochs=100\nfinal_losses=[]\nfor i in range(epochs):\n    i=i+1\n    y_pred=model.forward(X_train)\n    loss=loss_function(y_pred,y_train)\n    final_losses.append(loss)\n    if i%10==1:\n        print(\"Epoch number: {} and the loss : {}\".format(i,loss.item()))\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","580dbe68":"plt.plot(range(epochs),final_losses)\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.show()","c5c80813":"#predictions in data\npredictions=[]\nwith torch.no_grad():\n    for i,data in enumerate(X_val):\n        y_pred=model(data)\n        predictions.append(y_pred.argmax().item())","a423c96c":"predictions","643fd52d":"from sklearn.metrics import accuracy_score","bb4d39a9":"accuracy_score= accuracy_score(y_val,predictions)","1a8983d5":"print(\"The accuracy of your model is {} percent\".format(accuracy_score*100))","ec7bec93":"Splitting Data\n\n","72dfd3ac":"Since there are no null values let's understand the data through visualization","43903108":"# Predicting Diabetes by ANN in PyTorch\n![image.png](attachment:image.png)\n\n**In this notebook we'll attempt to create a artifical neural network(basic) with Pytorch,and use it to predict the diabetes**","0db7878a":"We'll seed to prevent randomness","67d049b0":"# Aartificial Nueral Network\n![image.png](attachment:image.png)","c5d0421b":"Checking model parameters","9f18345c":"Scaling Data for better results","d6eeecf6":"# Data Visualisation","dc1ab92b":"Artificial neural network is an attempt to mimic neurons in human brain,\nNeural networks consist of input and output layers, as well as (in most cases) a hidden layer consisting of units that transform the input into something that the output layer can use. They are excellent tools for finding patterns which are far too complex or numerous for a human programmer to extract and teach the machine to recognize.\n","e4a3123c":"**Preparing data...**","60808161":"#  Let' begin Pytorch:-\n**PyTorch is a library for Python programs that facilitates building deep learning projects PyTorch supports dynamic computational graphs, which means the network behavior can be changed programmatically at runtime. This facilitates more efficient model optimization and gives PyTorch a major advantage over other machine learning frameworks, which treat neural networks as static objects. If you want to explore Deep learning then Pytorch is your friend\nKindly head to https:\/\/pytorch.org\/docs\/master\/nn.html to unvail the beauty of Pytorch library **\n![image.png](attachment:image.png)\n\nother resources https:\/\/www.analyticsvidhya.com\/blog\/2018\/02\/pytorch-tutorial\/\n\nhttps:\/\/machinelearningmastery.com\/pytorch-tutorial-develop-deep-learning-models\/\n","283b9aac":"Let us run our model...\n\nHere for each epoch we are calculating loss and appending it in final losses, then we'll optimize our loss and perform back propagation on it Pytorch provides .backward function for the same","d72e270e":"Before working with Pytorch we have to convert our array to tensor","88fd2dcf":"The accuracy of our model is 74.5% which is pretty good also it can be improved by changing the number of hidden layers and \nneurons\n\ncheck out https:\/\/towardsdatascience.com\/beginners-ask-how-many-hidden-layers-neurons-to-use-in-artificial-neural-networks-51466afa0d3e for more\n\nvideo reference https:\/\/www.youtube.com\/watch?v=Bc2dWI3vnE0","f1c9307b":"Checking the relation between Insulin and Glucose since both are directly related","abcb33eb":"**Let us attempt to build a ANN on our own using PyTorch**\nLet's divide our task in following steps-\n1. Define a class name ANN_Model, which is a subclass of nn.Module class which is Base class for all neural network modules.\n2. the second step is defining the init function which will take input features, number of neurons in a hidden layer and output features(2 in the case of binary classification)\n3. Inside the init function we'll define 2 fully connected Linear network with help of nn in PyTorch\n4. Next we'll define forward function \n5. Inside the forward function we'll activate our fully connected layer, by relu activation function\n6. And also perform forward propogation","8ac0fed5":"Plotting loss ","8694acff":"Define loss as Cross Entropy loss","3d8a4aaf":"we'll optimize our model with Adam optimizer","b4b8aa2e":"**Creating Predictions**\n\nfor this you simply have to pass your validation data to model and simply append all the predictions\n"}}