{"cell_type":{"f87072df":"code","f098975e":"code","c6f8f6ec":"code","abc7b95c":"code","8543c0f1":"code","2295dd41":"code","4ce3b703":"code","900c249a":"code","44c4b37d":"code","e0a6d59c":"code","7208c9b7":"code","5bb6cf56":"code","6d064101":"code","56022127":"code","3fc0667a":"code","f8b56585":"code","22e1767f":"code","c26e0bc7":"code","1c915689":"code","bd620546":"code","5ed887ed":"code","811d5851":"code","23871bc9":"code","3bedcaf0":"code","3ce7162c":"code","86a13d02":"code","f808cdc4":"code","207c267b":"code","9f13ae26":"code","14b6028e":"code","da71b99e":"code","6d2124f3":"code","726176c2":"code","3cce7898":"code","4183b0fd":"code","2a23c0fd":"code","627b0c10":"code","774bfed2":"code","caedbe15":"code","0d2add95":"code","e44756f3":"code","782136b1":"code","fd866920":"code","af648272":"code","65b2dc02":"code","1ba2d38a":"code","1d1daa64":"code","58326017":"code","9ae146aa":"code","118a9ea6":"code","4196aa15":"code","0cfc082e":"markdown","14c5f8e1":"markdown","f0889d90":"markdown","39e06126":"markdown","9eecce86":"markdown","bc64dec4":"markdown","d5271527":"markdown","5c9516cb":"markdown","ec64a7fb":"markdown","ca873749":"markdown","162ba9b2":"markdown","8b6447a8":"markdown","785f8652":"markdown","e7af6d6c":"markdown","f42fa01a":"markdown","f4182865":"markdown","f033a88a":"markdown"},"source":{"f87072df":"\n# Regular EDA and plotting libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# preprocessor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\n\n# Models from Scikit-Learn\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Model Evaluations\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import mean_squared_error,mean_squared_log_error,mean_absolute_error,make_scorer\n#Pipeline\nfrom sklearn.pipeline import Pipeline\nplt.style.use('seaborn-whitegrid')\nfrom datetime import datetime","f098975e":"# combined dataset of training and validation set\ndf = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/TrainAndValid.csv\",parse_dates=['saledate'],low_memory=False) \n# test set\ntest_df = pd.read_csv(\"..\/input\/\/bluebook-for-bulldozers\/Test.csv\",parse_dates=['saledate'],low_memory=False)\n# sorting df according to the saledate\ndf.sort_values(by='saledate',inplace=True)","c6f8f6ec":"df.head().T ","abc7b95c":"df.info() # most of the features are having object DataType","8543c0f1":"test_df.info()","2295dd41":"# shape of the dataframe\ndf.shape","4ce3b703":"test_df.shape","900c249a":"df.isna().sum()","44c4b37d":"test_df.isna().sum()","e0a6d59c":"# visualizing missing entries\ndf_missing_percentage = ((df.isna().sum()\/df.shape[0])*100)\ntest_df_missing_percentage = ((df.isna().sum()\/df.shape[0])*100)","7208c9b7":"pd.DataFrame(df_missing_percentage,columns=['missing%']).sort_values(by='missing%').plot(kind='barh',figsize=(7,15));\nplt.xticks(fontsize = 15);\nplt.yticks(fontsize = 10);","5bb6cf56":"pd.DataFrame(test_df_missing_percentage,columns=['missing%']).sort_values(by='missing%').plot(kind='barh',figsize=(7,15));\nplt.xticks(fontsize = 15);\nplt.yticks(fontsize = 10);","6d064101":"# Concatinatng all data \n# test_df has no SalePrice column , so its data points will have NaN in its SalePrice column when cancatenated with df \nConcat = pd.concat((df,test_df),axis = 0).reset_index(drop=True)\n\n# Converting all columns with object dtype to category dtype\nfor label,content in Concat.items() :\n    if pd.api.types.is_object_dtype(content):\n        Concat[label] = content.astype('category')\n        \n# Enriching features\nConcat['year'] = Concat.saledate.dt.year\nConcat['month']= Concat.saledate.dt.month\nConcat['day']= Concat.saledate.dt.day","56022127":"cat=[] # list for storing all columns with 'cstegory' dtype\ncat_missing = [] # list for storing columns with 'category' dtype and having missing values\nnum_missing = [] # list for storing columns with 'numerical' dtype and having missing values","3fc0667a":"for label,content in Concat.items():\n    \n    if pd.api.types.is_numeric_dtype(content): # checking for numerical features\n        if content.isna().sum() > 0: # checking if the feature has any missing values\n            Concat[f'{label}_ismissing'] = content.isna()\n            num_missing.append(label)\n            \n    if pd.api.types.is_categorical_dtype(content): # checking for categorical features\n        cat.append(label) \n        if content.isna().sum() > 0: # checking if the feature has any missing values\n            Concat[f'{label}_ismissing'] = content.isna()\n            cat_missing.append(label)\n            \ncat_not_missing = list(set(cat) - set(cat_missing))","f8b56585":"# For missing values in categorical datatype, by default `-1` is assigned for its code, so adding 1 before creating new column\nConcat[cat_missing] = Concat[cat_missing].apply(lambda i : i.cat.codes+1)\n\n# For features with no missing values, simply assigning code\nConcat[cat_not_missing] = Concat[cat_not_missing].apply(lambda i : i.cat.codes)","22e1767f":"(Concat.isna().sum() !=0 ).sum() # out which one is SalePrice , which will not be considered","c26e0bc7":"train_df = Concat.loc[Concat.saledate.dt.year < 2012, :].drop('saledate', axis=1)\n\nvalid_df = Concat.loc[Concat.saledate <= pd.Timestamp(\n    year=2012, month=4, day=30)].loc[Concat.saledate >= pd.Timestamp(year=2012, month=1, day=1)].drop('saledate', axis=1)\n\ntest_df = Concat.loc[Concat.saledate >=\n                     pd.Timestamp(year=2012, month=4, day=30), :].drop(['SalePrice','saledate'], axis=1)","1c915689":"train_df.shape","bd620546":"test_df.shape","5ed887ed":"valid_df.shape","811d5851":"train_df[num_missing].isna().sum()","23871bc9":"valid_df[num_missing].isna().sum()","3bedcaf0":"num_imputer = SimpleImputer(strategy='median')\ntransformer = ColumnTransformer(transformers=[('num_missing',num_imputer,train_df.columns)],remainder='passthrough',)\n\ntrain_df_filled = transformer.fit_transform(train_df) # fitting on training data \nvalid_df_filled = transformer.transform(valid_df) # transforming test based on training data to avoid data leakage\n\ntrain_df_filled = pd.DataFrame(train_df_filled,columns=train_df.columns)\nvalid_df_filled = pd.DataFrame(valid_df_filled,columns=valid_df.columns)","3ce7162c":"train_df_filled","86a13d02":"train_df_filled[num_missing].isna().sum()","f808cdc4":"valid_df_filled[num_missing].isna().sum()","207c267b":"# separating features and labels\nX_train_filled,y_train_filled = train_df_filled.drop(['SalePrice'],axis=1),train_df_filled.SalePrice \nX_valid_filled,y_valid_filled = valid_df_filled.drop(['SalePrice'],axis=1),valid_df_filled.SalePrice\n\nX_train,y_train = train_df.drop(['SalePrice'],axis=1),train_df_filled.SalePrice\nX_valid,y_valid = valid_df.drop(['SalePrice'],axis=1),valid_df_filled.SalePrice","9f13ae26":"# array to store diffrent hyperparameters of RandomForestClassifier and respective scores\nmodels=[]","14b6028e":"# function to evaluate diffrent metrics \ndef evaluate(model, X_valid, y_valid):\n    y_pred = model.predict(X_valid)\n    scores = {\n        'R2': model.score(X_valid, y_valid),\n        'MAE': mean_absolute_error(y_valid, y_pred),\n        'RMLE': np.sqrt(mean_squared_log_error(y_valid, y_pred))}\n    return(scores)","da71b99e":"# function to compile hyperparameters and scores of a model\ndef store_result(model,params, X,y):\n    y_pred = model.predict(X)\n    scores = {\n        'R2': model.score(X, y),\n        'MAE': mean_absolute_error(y, y_pred),\n        'RMLE': np.sqrt(mean_squared_log_error(y, y_pred))}\n    model = {\n        'scores': scores,\n        'params': params}\n    if model not in models:\n        models.append(model)\n    return(model)","6d2124f3":"rfr = RandomForestRegressor(n_jobs=-1,n_estimators=100,max_depth=4)","726176c2":"rfr.fit(X_train_filled,y_train_filled) # fitting fileed training data","3cce7898":"evaluate(rfr,X_valid_filled,y_valid_filled)","4183b0fd":"param_grid={\n    'randomforestregressor__n_estimators':np.arange(90,150,10),\n    'randomforestregressor__max_depth':[None],\n    'randomforestregressor__min_samples_split':np.arange(2,20,1),\n    'randomforestregressor__min_samples_leaf':np.arange(1,15,1)\n} ","2a23c0fd":"num_imputer = SimpleImputer(strategy='median')\ntransformer = ColumnTransformer(transformers=[('num_missing',num_imputer,X_train.columns)])\nrfr = RandomForestRegressor(random_state=23,max_samples=10000,n_jobs=-1) # tuning using only 10000 samples","627b0c10":"rfr_pipeline= make_pipeline(transformer,rfr)","774bfed2":"scorer_func= lambda y_true,y_pred: np.sqrt(mean_squared_log_error(y_true,y_pred)) # custom scorer function of rmsle","caedbe15":"scorer = make_scorer(scorer_func,greater_is_better=False)","0d2add95":"rfr_random = RandomizedSearchCV(estimator=rfr_pipeline,\n                                param_distributions=param_grid,\n                                cv=5,\n                                n_jobs=-1,\n                                n_iter=2,\n                                scoring=scorer)","e44756f3":"%%time\nrfr_random.fit(X_train,y_train) #","782136b1":" #fitting entire training data to the best estimator\nrfr = rfr_random.best_estimator_.set_params(randomforestregressor__max_samples = None);\nrfr.fit(X_train,y_train)","fd866920":"store_result(rfr,rfr_random.best_params_,X_valid,y_valid)","af648272":"transformer = ColumnTransformer(transformers=[('num_missing',num_imputer,X_train.columns)])\nrfr = RandomForestRegressor(random_state=23,max_samples=4000,n_jobs=-1)\nrfr_pipeline= make_pipeline(transformer,rfr)","65b2dc02":"param_grid={\n    'randomforestregressor__n_estimators':np.arange(110,121,1),\n    'randomforestregressor__max_depth':[None],\n    'randomforestregressor__min_samples_split':[19],\n    'randomforestregressor__min_samples_leaf':[7]\n}","1ba2d38a":"rfr_grid = GridSearchCV(estimator=rfr_pipeline,\n                                param_grid=param_grid,\n                                cv=5,\n                                n_jobs=-1,\n                                scoring=scorer)","1d1daa64":"rfr_grid.fit(X_train,y_train)","58326017":"rfr = rfr_grid.best_estimator_.set_params(randomforestregressor__max_samples = None);\nrfr.fit(X_train,y_train)","9ae146aa":"store_result(rfr,rfr_grid.best_params_,X_valid,y_valid)","118a9ea6":"models","4196aa15":"{'scores': {'R2': 0.8730819859878117,\n   'MAE': 6050.945892315819,\n   'RMLE': 0.24864908475502068},\n  'params': {'randomforestregressor__n_estimators': 140,\n   'randomforestregressor__min_samples_split': 9,\n   'randomforestregressor__min_samples_leaf': 6,\n   'randomforestregressor__max_depth': None}} # best found results with parameters","0cfc082e":"### Visualizing missing data","14c5f8e1":"First of all, I have concatenated all data points so that we can add missing indicators easliy ","f0889d90":"## Preprocessing","39e06126":"Most the features are having object DataType","9eecce86":"### Adding Missing Indicators for Numerical and Categorical columns","bc64dec4":"### RandomForestRegressor","d5271527":"One more reason to make a single dataset of all data points is to cover all possible value category while assigning codes to categorical data.","5c9516cb":"## Importing essential tools ","ec64a7fb":"## Load data\nParsing saledate as a Datatime column","ca873749":"### Grid","162ba9b2":"## Modeling","8b6447a8":"#### Filling the missing values with median \nTo avoid data leakage , we separate training set, validation set and test set","785f8652":"### RandomizedSearchCV","e7af6d6c":"### Filling categorical values","f42fa01a":"### Filling numerical values ","f4182865":"# Predicting the sale price of bulldozer using ML\nIn this notebook , I am going to go through with the goal of predicting the sale price of Bulldozers.\n\n## 1. Problem definition :\nPredict the sale price of a particular piece of heavy equipment at auction based on it's usage, equipment type, and configuration.\n## 2. Data\nThe data is downloaded from the Kaggle \"Blue Book for bulldozer\" competition.  https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers\/data\n\nThere are 3 main datasets:\n* `Train.csv` is the training set, which contains data through the end of 2011.\n* `Valid.csv` is the validation set, which contains data from January 1, 2012 - April 30, 2012 You make predictions on this set throughout the majority of the competition. Your score on this set is used to create the public Leaderboard.\n* `Test.csv` is the test set, which won't be released until the last week of the competition. It contains data from May 1, 2012 - November 2012. Your score on the test set determines your final rank for the competition.\n\n## 3. Evaluation\nRMSLE (root mean squared log error) between the actual and predicted auction prices.\n## 4 .Features\nhttps:\/\/docs.google.com\/spreadsheets\/d\/1epPQnzxSONR2ZwnVLg92luVi7XEJCs_KXqj3I1lmfQg\/edit?usp=sharing","f033a88a":"### Hyperparameter tuning"}}