{"cell_type":{"e39558f5":"code","872fcea4":"code","c1715c32":"code","6a941dab":"code","ae2a8664":"code","2dee3fa2":"code","c3a2f2d5":"code","f226e9c4":"markdown","c304ff27":"markdown","51a4f8d1":"markdown","a5c53bf7":"markdown"},"source":{"e39558f5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","872fcea4":"#Pairwise Comparison Matrix untuk criteria dengan criteria\ncrxcr = np.array([[[1.,1.,1.],    [3.,4.,5],    [2.,3.,4.],    [4.,5.,6.]],\n                  [[.2,.25,.5],   [1.,1.,1.],   [.25,.33,.50], [1.,2.,3.]],\n                  [[.25,.33,.25], [2.,3.,4.],   [1.,1.,1.],    [2.,3.,4.]],\n                  [[.17,.2,.25],  [.33,.50,1.], [.25,.33,.5],  [1.,1.,1.]]])","c1715c32":"criteriaDict = {\n            1: \"Curah Hujan\",\n            2: \"Kelembaban Udara\",\n            3: \"Suhu\",\n            4: \"Ketinggian Tanah\"}\n\nalternativesName =[\n    \"Padi\",        \"Jagung\",      \"Kedelai\",    \"Kacang Tanah\", \"Kacang Hijau\", \"Ubi Kayu\",     \"Ubi Jalar\" ]\n    \n#Pairwise Comparison Matrix untuk alternatif dengan alternatif berdasarkan criteria 1 (Curah Hujan)\naltxalt_cr1 = np.array([\n    [[1.,1.,1.],   [2.,3.,4.],   [1.,2.,3.],   [2.,3.,4.],   [3,4,5],     [1.,2.,3.],   [4.,5.,6.]  ],\n    [[.25,.33,.50],[1.,1.,1.],   [.33,.5,1.],  [1.,1.,1.],   [1.,2.,3.],  [.33,.5,1.],  [2.,3.,4]   ],\n    [[.33,.50,1.], [1.,2.,3.],   [1.,1.,1.],   [1.,2.,3.],   [2.,3.,4],   [1.,1.,1.],   [3.,4.,5]   ],\n    [[.25,.33,.50],[1.,1.,1.],   [.33,.5,1.],  [1.,1.,1.],   [1.,2.,3.],  [.33,.5,1.],  [2.,3.,4]   ],\n    [[.20,.25,.33],[.33,.50,1.], [.25,.33,.50],[.33,.50,1.], [1.,1.,1.],  [.25,.33,.50],[1.,2.,3.]  ],\n    [[.33,.50,1.], [1.,2.,3.],   [1.,1.,1.],   [1.,2.,3.],   [2.,3.,4],   [1.,1.,1.],   [3.,4.,5]   ],\n    [[.17,.20,.25],[.25,.33,.50],[.20,.25,.33],[.25,.33,.50],[.33,.50,1.],[.20,.25,.33],[1.,1.,1]   ]])\n#Pairwise Comparison Matrix untuk alternatif dengan alternatif berdasarkan criteria 2 (Kelembaban Udara)\naltxalt_cr2 = np.array([\n    [[1.,1.,1.],   [1.,1.,1.],   [3.,4.,5.],   [2.,3.,4.],   [1.,2.,3.],  [2.,3.,4.],   [1.,2.,3.]  ],\n    [[1.,1.,1.],   [1.,1.,1.],   [3.,4.,5.],   [2.,3.,4.],   [1.,2.,3.],  [2.,3.,4.],   [1.,2.,3.]  ],\n    [[.20,.25,.33],[.20,.25,.33],[1.,1.,1.],   [.33,.5,1.],  [.33,.5,1.], [1.,1.,1.],   [.25,.33,.5]],\n    [[.25,.33,.50],[.25,.33,.50],[1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],  [1.,2.,3.],   [1.,1.,1.]  ],\n    [[.33,.50,1.], [.33,.50,1.], [1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],  [1.,2.,3.],   [1.,1.,1]   ],\n    [[.25,.33,.50],[.25,.33,.50],[1.,1.,1.],   [.33,.5,1.],  [.33,.5,1.], [1.,1.,1.],   [.33,.5,1]  ],\n    [[.33,.50,1.], [.33,.50,1.], [2.,3.,4.],   [1.,1.,1.],   [1.,1.,1.],  [1.,2.,3.],   [1.,1.,1]   ]])\n#Pairwise Comparison Matrix untuk alternatif dengan alternatif berdasarkan criteria 3 (Suhu)\naltxalt_cr3 = np.array([\n    [[1.,1.,1.],   [.33,.50,1.], [.33,.50,1.], [1.,1.,1.],   [3.,4.,5.],  [1.,2.,3.],   [2.,3.,4.]  ],\n    [[1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [1.,2.,3.],   [4.,5.,6],   [2.,3.,4.],   [3.,4.,5]   ],\n    [[1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [1.,2.,3.],   [4.,5.,6],   [2.,3.,4.],   [3.,4.,5]   ],\n    [[1.,1.,1.],   [.33,.50,1.], [.33,.50,1.], [1.,1.,1.],   [3.,4.,5.],  [1.,2.,3.],   [2.,3.,4.]  ],\n    [[.20,.25,.33],[.17,.20,.25],[.17,.20,.25],[.20,.25,.33],[1.,1.,1.],  [.25,.33,.50],[.33,.5,1]  ],\n    [[.33,.50,1.], [.25,.33,.50],[.25,.33,.50],[.33,.50,1.], [2.,3.,4.],  [1.,1.,1.],   [1.,2.,3.]  ],\n    [[.25,.33,.50],[.20,.25,.33],[.20,.25,.33],[.25,.33,.50],[1.,2.,3.],  [.33,.50,1.], [1.,1.,1]   ]])\n#Pairwise Comparison Matrix untuk alternatif dengan alternatif berdasarkan criteria 4 (Ketinggian Tanah) daerah kelompok 1\naltxalt_cr4_k1 = np.array([\n    [[1.,1.,1.],   [1.,1.,1.],   [1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [1.,1.,1.],   [4.,5.,6.]   ],\n    [[1.,1.,1.],   [1.,1.,1.],   [1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [1.,1.,1.],   [4.,5.,6.]   ],\n    [[.33,.50,1.], [.33,.50,1.], [1.,1.,1.],   [.33,.50,1.], [.33,.50,1.], [.33,.50,1.], [2.,3.,4.]   ],\n    [[1.,1.,1.],   [1.,1.,1.],   [1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [1.,1.,1.],   [4.,5.,6.]   ],\n    [[1.,1.,1.],   [1.,1.,1.],   [1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [1.,1.,1.],   [4.,5.,6.]   ],\n    [[1.,1.,1.],   [1.,1.,1.],   [1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [1.,1.,1.],   [4.,5.,6.]   ],\n    [[.17,.20,.25],[.17,.20,.25],[.25,.33,.50],[.17,.20,.25],[.17,.20,.25],[.17,.20,.25],[1.,1.,1]    ]])\n#Pairwise Comparison Matrix untuk alternatif dengan alternatif berdasarkan criteria 4 (Ketinggian Tanah) daerah kelompok 2\naltxalt_cr4_k2 = np.array([\n    [[1.,1.,1.],   [1.,1.,1.],   [2.,3.,4.],   [1.,2.,3.],   [1.,2.,3.],   [1.,1.,1.],   [1.,2.,3.]   ],\n    [[1.,1.,1.],   [1.,1.,1.],   [2.,3.,4.],   [1.,2.,3.],   [1.,2.,3.],   [1.,1.,1.],   [1.,2.,3.]   ],\n    [[.25,.33,.50],[.25,.33,.50],[1.,1.,1.],   [.33,.50,1.], [.33,.50,1.], [.25,.33,.50],[.33,.50,1.] ],\n    [[.33,.50,1.], [.33,.50,1.], [1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [.25,.33,.50],[.33,.50,1.] ],\n    [[.33,.50,1.], [.33,.50,1.], [1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [.25,.33,.50],[.33,.50,1.] ],\n    [[1.,1.,1.],   [1.,1.,1.],   [2.,3.,4.],   [2.,3.,4.],   [2.,3.,4.],   [1.,1.,1.],   [1.,2.,3.]   ],\n    [[.33,.50,1.], [.33,.50,1.], [1.,2.,3.],   [1.,2.,3.],   [1.,2.,3.],   [.33,.50,1.], [1.,1.,1]    ]])\n#Pairwise Comparison Matrix untuk alternatif dengan alternatif berdasarkan criteria 4 (Ketinggian Tanah) daerah kelompok 3\naltxalt_cr4_k3 = np.array([\n    [[1.,1.,1.],   [1.,1.,1.],   [4.,5.,6.],   [2.,3.,4.],   [2.,3.,4.],   [1.,2.,3.],   [1.,1.,1.]   ],\n    [[1.,1.,1.],   [1.,1.,1.],   [4.,5.,6.],   [2.,3.,4.],   [2.,3.,4.],   [1.,2.,3.],   [1.,1.,1.]   ],\n    [[.17,.20,.25],[.17,.20,.25],[1.,1.,1.],   [.25,.33,.50],[.25,.33,.50],[.20,.25,.33],[.17,.20,.25]],\n    [[.25,.33,.50],[.25,.33,.50],[2.,3.,4.],   [1.,1.,1.],   [1.,1.,1.],   [.33,.50,1.], [.25,.33,.50]],\n    [[.25,.33,.50],[.25,.33,.50],[2.,3.,4.],   [1.,1.,1.],   [1.,1.,1.],   [.33,.50,1.], [.25,.33,.50]],\n    [[.33,.50,1.], [.33,.50,1.], [3.,4.,5.],   [1.,2.,3.],   [1.,2.,3.],   [1.,1.,1.],   [.33,.50,1.] ],\n    [[1.,1.,1.],   [1.,1.,1.],   [4.,5.,6.],   [2.,3.,4.],   [2.,3.,4.],   [1.,2.,3.],   [1.,1.,1.]   ]])\n#Pairwise Comparison Matrix untuk alternatif dengan alternatif berdasarkan criteria 4 (Ketinggian Tanah) daerah kelompok 4\naltxalt_cr4_k4 = np.array([\n    [[1,1.,1],     [1.,2.,3.],   [5.,6.,7.],   [4.,5.,6.],   [4.,5.,6.],   [3.,4.,5.],   [2.,3.,4]    ],\n    [[.33,.50,1.], [1.,1,1.],    [4.,5.,6.],   [3.,4.,5.],   [3.,4.,5.],   [2.,3.,4.],   [1.,2.,3]    ],\n    [[.14,.17,.20],[.17,.20,.25],[1.,1,1.],    [.33,.5,1.],  [.33,.5,1.],  [.25,.33,.5], [.2,.25,.33] ],\n    [[.17,.20,.25],[.20,.25,.33],[1.,2.,3.],   [1.,1.,1.],   [1.,1.,1],    [.33,.5,1.],  [.25,.33,.5] ],\n    [[.17,.20,.25],[.20,.25,.33],[1.,2.,3.],   [1.,1.,1.],   [1.,1,1.],    [.33,.5,1.],  [.25,.33,.5] ],\n    [[.20,.25,.33],[.25,.33,.50],[2.,3.,4.],   [1.,2.,3.],   [1.,2.,3.],   [1.,1,1.],    [.33,.5,1.]  ],\n    [[.25,.33,.50],[.33,.50,1.], [3.,4.,5.],   [2.,3.,4.],   [2.,3.,4.],   [1.,2.,3.],   [1.,1.,1.]   ]])\n#Pairwise Comparison Matrix untuk alternatif dengan alternatif berdasarkan criteria 4 (Ketinggian Tanah) daerah kelompok 5\naltxalt_cr4_k5 = np.array([\n    [[1,1.,1],     [2.,3.,4.],   [6.,7.,8.],   [5.,6.,7.],   [5.,6.,7.],   [4.,5.,6.],   [3.,4.,5]    ],\n    [[.25,.33,.50],[1.,1,1.],    [5.,6.,7.],   [4.,5.,6.],   [4.,5.,6.],   [3.,4.,5.],   [2.,3.,4]    ],\n    [[.13,.14,.17],[.14,.17,.20],[1.,1,1.],    [.33,.5,1.],  [.33,.5,1.],  [.25,.33,.5], [.17,.2,.25] ],\n    [[.14,.17,.20],[.17,.20,.25],[1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [.33,.5,1.],  [.25,.33,.5] ],\n    [[.14,.17,.20],[.17,.20,.25],[1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [.33,.5,1.],  [.25,.33,.5] ],\n    [[.17,.20,.25],[.20,.25,.33],[2.,3.,4.],   [1.,2.,3.],   [1.,2.,3.],   [1.,1,1.],    [.33,.5,1]   ],\n    [[.20,.25,.33],[.25,.33,.50],[4.,5.,6.],   [2.,3.,4.],   [2.,3.,4.],   [1.,2.,3.],   [1.,1,1]     ]])\n#Pairwise Comparison Matrix untuk alternatif dengan alternatif berdasarkan criteria 4 (Ketinggian Tanah) daerah kelompok 6\naltxalt_cr4_k6 = np.array([\n    [[1,1.,1],     [2.,3.,4.],   [6.,7.,8.],   [5.,6.,7.],   [5.,6.,7.],   [4.,5.,6.],   [3.,4.,5]    ],\n    [[.25,.33,.50],[1.,1,1.],    [5.,6.,7.],   [4.,5.,6.],   [4.,5.,6.],   [3.,4.,5.],   [2.,3.,4]    ],\n    [[.13,.14,.17],[.14,.17,.20],[1.,1,1.],    [.33,.5,1.],  [.33,.5,1.],  [.25,.33,.5], [.17,.2,.25] ],\n    [[.14,.17,.20],[.17,.20,.25],[1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [.33,.5,1.],  [.25,.33,.5] ],\n    [[.14,.17,.20],[.17,.20,.25],[1.,2.,3.],   [1.,1.,1.],   [1.,1.,1.],   [.33,.5,1.],  [.25,.33,.5] ],\n    [[.17,.20,.25],[.20,.25,.33],[2.,3.,4.],   [1.,2.,3.],   [1.,2.,3.],   [1.,1,1.],    [.33,.5,1]   ],\n    [[.20,.25,.33],[.25,.33,.50],[4.,5.,6.],   [2.,3.,4.],   [2.,3.,4.],   [1.,2.,3.],   [1.,1,1]     ]])\n","6a941dab":"#Param: matrix = Matrix yang akan dihitung konsistensinya, printComp = opsi untuk menampilkan komputasi konsistensi matrix\ndef isConsistent(matrix, printComp=True):\n    RI = {\n        1: 0.00,\n        2: 0.00,\n        3: 0.58,\n        4: 0.90,\n        5: 1.12,\n        6: 1.24,\n        7: 1.32,\n        8: 1.41,\n        9: 1.45,\n        10: 1.49\n    }\n\n    mat_len = len(matrix)\n    midMatrix = np.zeros((mat_len, mat_len))\n    #weights_sum = np.sum(matrix)\n    for i in range(mat_len):\n        for j in range(mat_len):\n            midMatrix[i][j] = matrix[i][j][1]\n    if(printComp): print(\"mid-value matrix: \\n\", midMatrix, \"\\n\")\n\n    eigenvalue = np.real(np.linalg.eigvals(midMatrix))\n    lambdaMax = max(eigenvalue)\n    if(printComp): print(\"eigenvalue: \", eigenvalue)\n    if(printComp): print(\"lambdaMax: \", lambdaMax)\n    if(printComp): print(\"\\n\")\n\n    RIValue = RI[mat_len]\n    if(printComp): print(\"R.I. Value: \", RIValue)\n\n    CIValue = (lambdaMax-mat_len)\/(mat_len - 1)\n    if(printComp): print(\"C.I. Value: \", CIValue)\n\n\n    CRValue = CIValue\/RIValue\n    if(printComp): print(\"C.R. Value: \", CRValue)\n\n    if(printComp): print(\"\\n\")\n    if(CRValue<=0.1):\n        if(printComp): print(\"Matrix reasonably consistent, we could continue\")\n        return True\n    else:\n        if(printComp): print(\"Consistency Ratio is greater than 10%, we need to revise the subjective judgment\")\n        return False","ae2a8664":"#Param: matrix = Matrix yang akan dihitung konsistensinya, printComp = opsi untuk menampilkan komputasi konsistensi matrix\ndef pairwiseComp(matrix, printComp=True):\n    matrix_len = len(matrix)\n\n    #calculate fuzzy geometric mean value\n    geoMean = np.zeros((len(matrix),3))\n\n    for i in range(matrix_len):\n        for j in range(3):\n            temp = 1\n            for tfn in matrix[i]:\n                temp *= tfn[j]\n            temp = pow(temp, 1\/matrix_len)\n            geoMean[i,j] = temp\n    \n    if(printComp): print(\"Fuzzy Geometric Mean Value: \\n\", geoMean, \"\\n\")\n    #calculate the sum of fuzzy geometric mean value\n    geoMean_sum = np.zeros(3)\n    for row in geoMean:\n        geoMean_sum[0] += row[0]\n        geoMean_sum[1] += row[1]\n        geoMean_sum[2] += row[2]\n    \n    if(printComp): print(\"Fuzzy Geometric Mean Sum:\", geoMean_sum, \"\\n\")\n    #calculate weights\n    weights = np.zeros(matrix_len)\n\n    for i in range(len(geoMean)):\n        temp = 0\n        for j in range(len(geoMean[0])):\n            temp += geoMean[i,j]*(1\/geoMean_sum[(3-1)-j])\n        weights[i] = temp \n    \n    if(printComp): print(\"Weights: \\n\", weights, \"\\n\")\n    #caculate normaized weights\n    normWeights = np.zeros(matrix_len)\n    weights_sum = np.sum(weights)\n    for i in range(matrix_len): \n        normWeights[i] = weights[i]\/weights_sum\n    \n    if(printComp): print(\"Normalized Weights: \", normWeights,\"\\n\")\n    return normWeights","2dee3fa2":"#Param: crxcr = Pairwise comparison matrix criteria X criteria, altxalt = Pairwise comparison matrices alternatif X alternatif , \n#       alternativesName = Nama dari setiap alternatif, printComp = opsi untuk menampilkan komputasi konsistensi matrix\ndef FAHP(crxcr, altxalt, alternativesName, printComp=True):\n    crxcr_cons = isConsistent(crxcr, False)\n    if(crxcr_cons):\n        if(printComp): print(\"criteria X criteria comparison matrix reasonably consistent, we could continue\")\n    else: \n        if(printComp): print(\"criteria X criteria comparison matrix consistency ratio is greater than 10%, we need to revise the subjective judgment\")\n        \n    for i, altxalt_cr in enumerate(altxalt):\n        isConsistent(altxalt_cr, False)\n        if(crxcr_cons):\n            if(printComp): print(\"alternatives X alternatives comparison matrix for criteria\",i+1,\" is reasonably consistent, we could continue\")\n        else: \n            if(printComp): print(\"alternatives X alternatives comparison matrix for criteria\",i+1,\"'s consistency ratio is greater than 10%, we need to revise the subjective judgment\")\n    \n    if(printComp): print(\"\\n\")\n    \n    if(printComp): print(\"criteria X criteria ======================================================\\n\")\n    crxcr_weights = pairwiseComp(crxcr, printComp)\n    if(printComp): print(\"criteria X criteria weights: \", crxcr_weights)\n    \n    \n    if(printComp): print(\"\\n\")\n    if(printComp): print(\"alternative x alternative ======================================================\\n\")\n    \n    altxalt_weights = np.zeros((len(altxalt),len(altxalt[0])))\n    for i, altxalt_cr in enumerate(altxalt):\n        if(printComp): print(\"alternative x alternative for criteria\", criteriaDict[(i+1)],\"---------------\\n\")\n        altxalt_weights[i] =  pairwiseComp(altxalt_cr, printComp)\n        \n    if(printComp): print(\"alternative x alternative weights:\")\n    altxalt_weights = altxalt_weights.transpose(1, 0)\n    if(printComp): print(altxalt_weights)\n    \n    sumProduct = np.zeros(len(altxalt[0]))\n    for i  in range(len(altxalt[0])):\n        sumProduct[i] = np.dot(crxcr_weights, altxalt_weights[i])\n        \n    if(printComp): print(\"\\n\")\n    if(printComp): print(\"RANKING =====================================================================\\n\")\n    \n    output_df = pd.DataFrame(data=[alternativesName, sumProduct]).T\n    output_df = output_df.rename(columns={0: \"Alternatives\", 1: \"Sum_of_Product\"})\n    output_df = output_df.sort_values(by=['Sum_of_Product'],ascending = False)\n    output_df.index = np.arange(1,len(output_df)+1)\n    \n    if(printComp): print(output_df)\n    \n    return output_df\n    ","c3a2f2d5":"altxalt_k1 = np.stack((altxalt_cr1, altxalt_cr2, altxalt_cr3, altxalt_cr4_k1))\noutput_k1 = FAHP(crxcr, altxalt_k1, alternativesName, False)\nprint(\"Ranking Alternatif untuk kelompok 1:\\n\",output_k1,\"\\n\")\n\naltxalt_k2 = np.stack((altxalt_cr1, altxalt_cr2, altxalt_cr3, altxalt_cr4_k2))\noutput_k2 = FAHP(crxcr, altxalt_k2, alternativesName, False)\nprint(\"Ranking Alternatif untuk kelompok 2:\\n\",output_k2,\"\\n\")\n\naltxalt_k3 = np.stack((altxalt_cr1, altxalt_cr2, altxalt_cr3, altxalt_cr4_k3))\noutput_k3 = FAHP(crxcr, altxalt_k3, alternativesName, False)\nprint(\"Ranking Alternatif untuk kelompok 3:\\n\",output_k3,\"\\n\")\n\naltxalt_k4 = np.stack((altxalt_cr1, altxalt_cr2, altxalt_cr3, altxalt_cr4_k4))\noutput_k4 = FAHP(crxcr, altxalt_k4, alternativesName, False)\nprint(\"Ranking Alternatif untuk kelompok 4:\\n\",output_k4,\"\\n\")\n\naltxalt_k5 = np.stack((altxalt_cr1, altxalt_cr2, altxalt_cr3, altxalt_cr4_k5))\noutput_k5 = FAHP(crxcr, altxalt_k5, alternativesName, False)\nprint(\"Ranking Alternatif untuk kelompok 5:\\n\",output_k5,\"\\n\")\n\naltxalt_k6 = np.stack((altxalt_cr1, altxalt_cr2, altxalt_cr3, altxalt_cr4_k6))\noutput_k6 = FAHP(crxcr, altxalt_k6, alternativesName, False)\nprint(\"Ranking Alternatif untuk kelompok 6:\\n\",output_k6,\"\\n\")\n","f226e9c4":"Note: Proses komputasi pada notebook ini dapat ditampilkan dengan mengubah argumen *printComp=True* pada pemanggilan fungsi *FAHP()*, atau dengan mengakses notebook [versi 3](https:\/\/www.kaggle.com\/kevinismail\/fuzzy-ahp-kecocokan-tanaman-pangan-di-boyolali?scriptVersionId=66974538)","c304ff27":"# Penerapan metode Fuzzy AHP dalam penentuan kecocokan tanaman pangan di Boyolali\n\n> **I Kevin and R A Pratiwi**\n> Jurusan Informatika, Fakultas Matematika dan Ilmu Pengetahuan Alam, Universitas Sebelas Maret\n\n> **Abstract**. Tanaman pangan di Boyolali sangat bermanfaat untuk kepentingan perekonomian daerah juga ketahanan pangan masyarakat. Dengan tidak menentunya iklim juga kondisi lingkungan berbeda, membuat semakin besarnya kemungkinan petani gagal panen. Kondisi tidak menguntungkan ini tentunya dapat mengganggu kesejahteraan masyarakat Boyolali. Penelitian ini bertujuan untuk merancang model yang dapat membantu pengambil keputusan memilih tanaman pangan yang cocok dan tepat untuk di tanam di setiap kecamatan kota Boyolali. Algoritma yang digunakan adalah Fuzzy-AHP dengan mengambil 4 kriteria yaitu Curah Hujan, Suhu Udara, Kelembaban, Ketinggian Tanah dan 7 alternatif yaitu Padi, Jagung, Ubi Kayu, Ubi Jalar, Kedelai, Kacang Tanah, Kacang Hijau. Hasil penelitian ini dapat digunakan sebagai sistem pembantu masyarakat dalam memutuskan komoditas tanaman apa yang cocok untuk ditanam di berbagai wilayah Boyolali.\n","51a4f8d1":"#Menentukan Functions\nFungsi yang dikerjakan pada notebook ini adalah: \n* fungsi untuk mengecek Konsistensi dari Pairwise Comparison Matrices dengan nama fungsi isConsistent()\n* fungsi untuk melakukan komputasi terhadap setiap Pairwise Comparison Matrix hingga mendapatkan weight dengan nama fungsi pairwiseComp()\n* fungsi untuk melakukan komputasi Fuzzy AHP secara keseluruhan, mengolah setiap matrices dengan memanggil fungsi-fungsi lain hingga menghasilkan ranking alternatif","a5c53bf7":"# Menentukan Comparison Matrices"}}