{"cell_type":{"729b1147":"code","25a27378":"code","e9c0c342":"code","ae982bb2":"code","8286b15d":"code","5b9ca4df":"code","e5d0debb":"code","2b486efe":"code","cc10cbfb":"markdown","0ed98979":"markdown","988ca0cc":"markdown","33dee252":"markdown","19c9cb44":"markdown"},"source":{"729b1147":"import os\nfrom pathlib import Path\nimport numpy as np\nimport pandas as pd\nimport numpy as np\nfrom PIL import Image\nfrom fastai.vision.all import *\n\nin_folder = Path(\"..\/input\/digit-recognizer\")","25a27378":"### Function that converts all columns starting with pixel into img and returns others column and pixels replaced with img\ndef get_images(df): \n    IMG_WIDTH = 28\n    IMG_HEIGHT = 28\n    \n    df['img'] = df[df.columns[df.columns.str.startswith('pixel')]].apply(\n        lambda x : PILImage(Image.fromarray(np.array(x.values).reshape((IMG_WIDTH, IMG_HEIGHT)).astype(np.uint8))),axis=1)\n    \n    return df[df.columns[[not x for x in df.columns.str.startswith('pixel')]]]","e9c0c342":"train_df = pd.read_csv(in_folder\/\"train.csv\")\ntrain_df = get_images(train_df)\n#train_df.head()","ae982bb2":"def get_x(r): return r['img']\ndef get_y(r): return r['label']\ndblock = DataBlock(blocks=(ImageBlock, CategoryBlock), get_x = get_x, get_y = get_y)\ndls = dblock.dataloaders(train_df)","8286b15d":"learn = cnn_learner(dls, resnet34, metrics=error_rate).to_fp16()\nlearn.fine_tune(20)","5b9ca4df":"test_df = pd.read_csv(in_folder\/\"test.csv\")\ntest_df['ImageId'] = test_df.index+1\ntest_df = get_images(test_df)\n#test_df.head()","e5d0debb":"#test_df['img1'] = test_df['img'].apply(lambda x : PILImage(x))\ndl = learn.dls.test_dl(list(test_df['img']))\ninp,preds,_,dec_preds = learn.get_preds(dl=dl, with_input=True, with_decoded=True)\ntest_df['Label'] = dec_preds","2b486efe":"submission = test_df[['ImageId','Label']]\nsubmission.to_csv(\"submission.csv\", index = False)","cc10cbfb":"## Settingup & Training the model\nWith my basic knowledge of fastai and using the sample code provided in the [fastai course](https:\/\/course.fast.ai\/). Tried resnet18 and resent 50 as well, but not so great results. So finally settled with resnet50.","0ed98979":"## Loading csv and changing it to img\nReading the csv and converting the the data into images as required for the resnet.","988ca0cc":"# Intro: Context & Quick Overview\n\nThis is my first Kaggle notebook. I used it for my MNIST submmission and got an accuracy of 0.99296.\n\nThis code uses [FastAI ](https:\/\/www.fast.ai\/) library and [Pytorch's pretrained model](https:\/\/pytorch.org\/hub\/pytorch_vision_resnet\/) resnet34.\n\nI am sharing this book as a quick reference guide for someuseful fastai patterns and a decent, very quick image classifier. The other fastai based notebooks of MNIST (Digit Recognizer) are saving the csv files into images to be read back again for processing. That is one area I improved by directly creating an image in memory using the csv content as that is the format resnet expects. It is not by any means intended as a guide (as evident from the documentation or the lack of). \n\nIf you find any optimiztions or tricks I can use to make it better, please let me know.\n\n# Code: The main part\n## Imports of the standard libariries","33dee252":"## Model Inference\nThis is one part I struggled a lot to find the solution. All the fastai sample code I found was efficiently using the GPU for faster training through batches. However, when it came to interpretation \/ inference, all I could find was how to classify a single image. I spent a good amount of time experimenting to get the predictions done in batches. I finally copied the source code of fastai (learner.predict() function to be mroe precise) to acheive that. After that I realized why there was so much emphasis in the fastai course to understand the inner workings rather than treating the libraries as some magic black boxes.\n\nFinally, I was super satisfied when the prediction of 20K images ran under a minute vs 30minute+ projected time when run one at a time.","19c9cb44":"## Finally building the submission file"}}