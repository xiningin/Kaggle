{"cell_type":{"b5c87b67":"code","653ca874":"code","d9f42403":"code","7e4fbcf3":"code","35571db4":"code","25ba6321":"code","e4f802c9":"code","7be8b9cc":"code","ee39d07b":"code","1f8b76d4":"code","e4d5dd30":"code","81be7809":"code","ae0c29b1":"code","0373ed69":"code","0cba670e":"code","a5727e77":"code","915545bb":"code","1f636c85":"code","85ab38a8":"code","51006242":"code","12ef2b9f":"code","6a6f63d2":"code","3783a658":"code","f36cc150":"code","c25fcc1c":"code","9790fbbb":"code","33f0a1a5":"code","230b851b":"code","f0a627c0":"code","43c35618":"code","bc809636":"code","d48a7542":"code","b19d9ece":"code","11d66b55":"code","89e9cce1":"code","deb05c23":"code","36610df8":"code","a3f6dfb6":"code","83b88a7d":"code","c4f549af":"code","e5714c9d":"code","06e885ee":"code","3a7369ce":"code","1bb9f6a1":"code","65877bfa":"code","50115973":"code","f6108055":"code","b931e8ac":"code","0f425501":"code","e066bb6c":"code","6dca1398":"code","b4d66099":"code","05e76265":"code","75cbcd23":"code","46e2b34e":"code","fd4898e7":"code","69271d43":"code","212e54bd":"code","face919b":"code","1f5297e3":"code","f6995994":"code","013be053":"code","6d99c324":"code","2b43a05f":"code","3e2ba2f4":"code","82d86240":"markdown","bfb3b50c":"markdown","cc1156ec":"markdown","7103f241":"markdown","edc5a168":"markdown","3cb93149":"markdown","4aa3918a":"markdown","89904cf5":"markdown","9ab010d2":"markdown","5d18062f":"markdown","42ed5095":"markdown","fbd81c1a":"markdown","cf2d6973":"markdown","9af1edbb":"markdown","39a972eb":"markdown","691c32e6":"markdown","aaed19c2":"markdown","317cc117":"markdown","200bd6be":"markdown","d1845e89":"markdown","2e5524bc":"markdown","fa311ad2":"markdown","713e96ae":"markdown","35c0fe39":"markdown","0ca81d7e":"markdown","9e078f4e":"markdown","0cbec742":"markdown","c7adca8e":"markdown"},"source":{"b5c87b67":"import pandas as pd \nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom matplotlib.dates import DateFormatter\n\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom datetime import date","653ca874":"# 2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE\n# https:\/\/github.com\/CSSEGISandData\/COVID-19\nurlc = 'https:\/\/github.com\/CSSEGISandData\/COVID-19\/blob\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv?raw=true'\nurld = 'https:\/\/github.com\/CSSEGISandData\/COVID-19\/blob\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv?raw=true'\nurlr = 'https:\/\/github.com\/CSSEGISandData\/COVID-19\/blob\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv?raw=true'\n\nconfirmed_df = pd.read_csv(urlc)\ndeaths_df = pd.read_csv(urld)\nrecoveries_df = pd.read_csv(urlr)","d9f42403":"url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\" \ncases_country_df = pd.read_csv(url,parse_dates=['Last_Update'])\nprint(cases_country_df.shape)\nprint(cases_country_df.dtypes)\ncases_country_df.sample(3)\n","7e4fbcf3":"url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_time.csv\"\ncases_time_df = pd.read_csv(url,parse_dates=['Last_Update'])\nprint(cases_time_df.shape)\nprint(cases_time_df.dtypes)\ncases_time_df.loc[cases_time_df.iso3=='ESP'].sample(5)\n","35571db4":"\n#csse_covid_19_daily_reports\/05-01-2020.csv\n\nurl = 'https:\/\/github.com\/CSSEGISandData\/COVID-19\/blob\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/05-01-2020.csv?raw=true'\n\ndaily_df = pd.read_csv(url)\nprint(daily_df.shape)\nprint(daily_df.dtypes)\n\ndaily_df.sample(3)\n#cases_time_df.loc[daily_df.iso3=='ESP']\n","25ba6321":"pcol = [\"Province\/State\",\"Country\/Region\",\"Lat\",\"Long\"]\n\nconfirmed_df = pd.melt(confirmed_df, id_vars=pcol, var_name=\"Date\", value_name=\"confirmed\")\ndeaths_df = pd.melt(deaths_df, id_vars=pcol, var_name=\"Date\", value_name=\"deaths\")\nrecoveries_df = pd.melt(recoveries_df, id_vars=pcol, var_name=\"Date\", value_name=\"recoveries\")\n\nconfirmed_df['Date'] =  pd.to_datetime(confirmed_df['Date'], format='%m\/%d\/%y')\ndeaths_df['Date'] =  pd.to_datetime(deaths_df['Date'], format='%m\/%d\/%y')\nrecoveries_df['Date'] =  pd.to_datetime(recoveries_df['Date'], format='%m\/%d\/%y')\n\npcol.append(\"Date\")","e4f802c9":"cvirus_df = pd.merge(confirmed_df, deaths_df, on=pcol, how='left')\ncvirus_df = pd.merge(cvirus_df, recoveries_df, on=pcol, how='left')\ncvirus_df = cvirus_df.rename(columns={'Province\/State':'ProvinceState'\n                                      ,'Country\/Region':'CountryRegion'})","7be8b9cc":"print(cvirus_df.Date.max())\nprint(cvirus_df.Date.min())","ee39d07b":"cvirus_df.loc[(cvirus_df.Date=='2020-01-22') & (cvirus_df.confirmed > 0)]","1f8b76d4":"cvirus_df.loc[cvirus_df.ProvinceState=='Hubei']","e4d5dd30":"# ToDo Data prior to 01\/22\/2020\n\n# https:\/\/docs.google.com\/spreadsheets\/d\/e\/2PACX-1vTBI8MZx7aNt8EjYqkeojTopZKwSYGWCSKUzyS9xobrS5Tfr9SQZ_4hrp3dv6bRGkHk2dld0wRrJIeV\/pub?gid=32379430&single=true&output=csv","81be7809":"cvirus_df.dtypes","ae0c29b1":"# Test\nplot_df = cvirus_df.groupby(['CountryRegion', 'Date']).confirmed.sum().reset_index()\nplot_df = plot_df[plot_df['CountryRegion'].isin(['China','Spain','US','Italy'])]\n\npcol = [\"CountryRegion\",\"Date\",\"confirmed\"]\nplot_df = plot_df[pcol]\n\n\n# Format Legend\nyesterday = pd.to_datetime(date.today() -  pd.to_timedelta(1, unit='d'))\nlegends_df =plot_df[plot_df.Date == yesterday]\nhueOrder = legends_df.sort_values('confirmed', ascending=0)['CountryRegion']\nlegends = legends_df['CountryRegion'].str.cat(\n    legends_df['confirmed'].apply(lambda x : '{0:,}'.format(x)),sep=\" \")\nlegends = legends.sort_values(ascending=False).reset_index()\n\nplt.figure(figsize=(10,5))\nchart  = sns.lineplot(data=plot_df, x='Date', y='confirmed',hue='CountryRegion', hue_order=hueOrder)\n\nplt.legend(legends['CountryRegion'], title='Countries')\n\n# Define the date format\ndate_form = DateFormatter(\"%m-%d\")\nchart.xaxis.set_major_formatter(date_form)\n\n# Ensure a major tick for each week using (interval=1) \nchart.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))\n","0373ed69":"pcol = [\"CountryRegion\",\"Date\",\"confirmed\",\"deaths\",\"recoveries\"]\nplot_df = cvirus_df[pcol]\nplot_df = plot_df[plot_df['CountryRegion'].isin(['China','Spain','US','Italy'])]\nplot_df = plot_df.groupby(['CountryRegion', 'Date']).sum().reset_index()\n\npcol = [\"CountryRegion\",\"Date\"]\nplot_df = pd.melt(plot_df, id_vars=pcol, var_name=\"type\", value_name=\"cases\")\n\nplt.figure(figsize=(20,5))\n\ndef qqplot(x, y, **kwargs):\n    chart = sns.lineplot(x, y, **kwargs)\n    date_form = DateFormatter(\"%d\")\n    chart.xaxis.set_major_formatter(date_form)\n    # Ensure a major tick for each week using (interval=1) \n    chart.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))\n    chart\n    \ng = sns.FacetGrid(plot_df, col=\"type\", hue='CountryRegion')\n#g = g.map(sns.lineplot,'Date','cases').add_legend()\ng = g.map(qqplot,'Date','cases').add_legend()","0cba670e":"countries_df = pd.read_csv('..\/input\/country-codes\/Country_codes.csv', keep_default_na=False, na_values=[''])","a5727e77":"countries_df.sample(3)","915545bb":"countries_df = countries_df.groupby(['Name','Alpha2Code','Alpha3Code']).size().reset_index()[['Name','Alpha2Code','Alpha3Code']]\ncountries_df = countries_df.rename(columns={'Name':'CountryRegion'})","1f636c85":"cvirus_country_df = pd.DataFrame(cvirus_df['CountryRegion'].unique())\ncvirus_country_df = cvirus_country_df.rename(columns={0:'CountryRegion'})\n\ncvirus_country_no_def_df = cvirus_country_df.merge(countries_df,how='left',on='CountryRegion')\ncvirus_country_no_def_df[cvirus_country_no_def_df.Alpha2Code.isnull()].CountryRegion","85ab38a8":"cvirus_df.loc[cvirus_df.CountryRegion == 'Taiwan*', 'CountryRegion'] = 'Taiwan'","51006242":"cvirus_country_no_def_df = cvirus_df.merge(countries_df,how='left',on='CountryRegion')\ncvirus_country_no_def_df.loc[cvirus_country_no_def_df.Alpha2Code.isnull(), ['ProvinceState','CountryRegion']].drop_duplicates()\n","12ef2b9f":"cvirus_df.drop(cvirus_df[cvirus_df.CountryRegion.isnull()].index , inplace=True)\n","6a6f63d2":"pcol = [\"CountryRegion\",\"Date\",\"confirmed\",\"deaths\",\"recoveries\"]\ncvirus_country_df = cvirus_df[pcol]\ncvirus_country_df = cvirus_country_df.merge(countries_df,how='left',on='CountryRegion')\n\npcol = [\"CountryRegion\",\"Alpha3Code\",\"Date\",\"confirmed\",\"deaths\",\"recoveries\"]\ncvirus_country_df = cvirus_country_df[pcol]\ncvirus_country_df = cvirus_country_df.rename(columns={\"CountryRegion\":'Country'\n                                           ,\"Alpha3Code\":'CountryAlpha3Code'\n                                           })\n\ncvirus_country_df = cvirus_country_df.groupby(['Country', 'CountryAlpha3Code', 'Date']).sum().reset_index()\n","3783a658":"top_country = cvirus_country_df.groupby(['CountryAlpha3Code']).confirmed.max().reset_index()\ntop_country = top_country.sort_values(by='confirmed', ascending=False)\ntop_country = top_country['CountryAlpha3Code'].tolist()","f36cc150":"plot_df = cvirus_country_df[cvirus_country_df['CountryAlpha3Code'].isin(top_country[0:10])]\npcol = [\"Country\",\"Date\",\"confirmed\"]\nplot_df = plot_df[pcol]\n\n# Format Legend\nyesterday = pd.to_datetime(date.today() -  pd.to_timedelta(1, unit='d'))\nlegends_df = plot_df[plot_df.Date == yesterday]\nlegends_df = legends_df.sort_values(['confirmed'], ascending=[False]).reset_index()\nhueOrder = legends_df.sort_values('confirmed', ascending=0)['Country']\nlegends = legends_df['Country'].str.cat(\n    legends_df['confirmed'].apply(lambda x : '{0:,}'.format(x)),sep=\" \")\n\nplt.figure(figsize=(7,5))\nchart  = sns.lineplot(data=plot_df, x='Date', y='confirmed',hue='Country', hue_order=hueOrder)\nplt.legend(legends, title='Countries')\n\n\n# Define the date format\ndate_form = DateFormatter(\"%m-%d\")\nchart.xaxis.set_major_formatter(date_form)\n\n# Ensure a major tick for each week using (interval=1) \nchart.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))","c25fcc1c":"plot_df = cvirus_country_df[cvirus_country_df['CountryAlpha3Code'].isin(top_country[0:10])]\npcol = [\"Country\",\"Date\",\"deaths\"]\nplot_df = plot_df[pcol]\n\n# Format Legend\nyesterday = pd.to_datetime(date.today() -  pd.to_timedelta(1, unit='d'))\nlegends_df = plot_df[plot_df.Date == yesterday]\nhueOrder = legends_df.sort_values('deaths', ascending=0)['Country']\nlegends_df = legends_df.sort_values(['deaths'], ascending=[False]).reset_index()\n\nlegends = legends_df['Country'].str.cat(\n    legends_df['deaths'].apply(lambda x : '{0:,}'.format(x)),sep=\" \")\n\nplt.figure(figsize=(7,5))\nchart  = sns.lineplot(data=plot_df, x='Date', y='deaths',hue='Country', hue_order=hueOrder)\nplt.legend(legends, title='Countries')\n\n# Define the date format\ndate_form = DateFormatter(\"%m-%d\")\nchart.xaxis.set_major_formatter(date_form)\n\n# Ensure a major tick for each week using (interval=1) \nchart.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))","9790fbbb":"alldays = pd.Series(data=pd.date_range(start=cvirus_df['Date'].min(), end=cvirus_df['Date'].max(), freq='d'))\nallcountries = pd.Series(cvirus_country_df['CountryAlpha3Code'].unique())\nindexAll = pd.MultiIndex.from_product([allcountries, alldays], names = [\"CountryAlpha3Code\", \"Date\"])\nindexAll_df = pd.DataFrame(index = indexAll).reset_index()\nindexDf = pd.MultiIndex.from_arrays([cvirus_country_df[col] for col in ['CountryAlpha3Code', 'Date']])\n\nf = indexAll.isin(indexDf)\nindexNoExists_df = indexAll_df[~f]\nindexNoExists_df","33f0a1a5":"\ncvirus_country_ant_df = cvirus_country_df.copy()\ncvirus_country_ant_df.Date += timedelta(days=1)\n\ncvirus_country_merge_df = pd.merge(cvirus_country_df, cvirus_country_ant_df,  how='left', on=['CountryAlpha3Code', 'Date'])\n\ncvirus_country_merge_df = cvirus_country_merge_df.fillna(0)\ncvirus_country_merge_df = cvirus_country_merge_df.reindex()\n\ncvirus_country_merge_df.sample(5)\ncvirus_country_inc_df = cvirus_country_merge_df[['CountryAlpha3Code', 'Date','confirmed_x','confirmed_y','deaths_x','deaths_y','recoveries_x','recoveries_y']]\n\ncvirus_country_inc_df['confirmed_inc'] = cvirus_country_inc_df.apply(lambda row: row.confirmed_x-row.confirmed_y, axis=1)\ncvirus_country_inc_df['deaths_inc'] = cvirus_country_inc_df.apply(lambda row: row.deaths_x-row.deaths_y, axis=1)\ncvirus_country_inc_df['recoveries_inc'] = cvirus_country_inc_df.apply(lambda row: row.recoveries_x-row.recoveries_y, axis=1)\n\npcols = ['CountryAlpha3Code', 'Date','confirmed_inc','deaths_inc','recoveries_inc']\ncvirus_country_inc_df = cvirus_country_inc_df[pcols]\n\ncvirus_country_df = pd.merge(cvirus_country_df, cvirus_country_inc_df,  how='left', on=['CountryAlpha3Code', 'Date'])","230b851b":"cvirus_country_df.sample()","f0a627c0":"plot_df = cvirus_country_df[cvirus_country_df['CountryAlpha3Code'].isin(top_country[0:5])]\npcol = [\"Country\",\"Date\",\"confirmed_inc\"]\nplot_df = plot_df[pcol]\n\n# Legend\nyesterday = pd.to_datetime(date.today() -  pd.to_timedelta(1, unit='d'))\nlegends_df = plot_df[plot_df.Date == yesterday]\nhueOrder = legends_df.sort_values('confirmed_inc', ascending=0)['Country']\nlegends_df = legends_df.sort_values(['confirmed_inc'], ascending=[False]).reset_index()\n\nlegends = legends_df['Country'].str.cat(\n    legends_df['confirmed_inc'].apply(lambda x : '{0:,}'.format(x)),sep=\" \")\n\nplt.figure(figsize=(10,5))\nchart  = sns.lineplot(data=plot_df, x='Date', y='confirmed_inc',hue='Country',hue_order=hueOrder)\nplt.legend(legends, title='Countries')\n\n\n# Define the date format\ndate_form = DateFormatter(\"%m-%d\")\nchart.xaxis.set_major_formatter(date_form)\n\n# Ensure a major tick for each week using (interval=1) \nchart.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))","43c35618":"#cvirus_country_df.drop(['ECR'], axis=1, inplace=True)\n\ncvirus_country_sig_df = cvirus_country_df.copy()\ncvirus_country_sig_df.Date -= timedelta(days=1)\n\ncvirus_country_merge_df = pd.merge(cvirus_country_df, cvirus_country_sig_df,  how='left', on=['CountryAlpha3Code', 'Date'])\n\ncvirus_country_merge_df = cvirus_country_merge_df.fillna(0)\ncvirus_country_merge_df = cvirus_country_merge_df.reindex()\n\ncvirus_country_f_df = cvirus_country_merge_df[['CountryAlpha3Code', 'Date','confirmed_x','confirmed_y']]\n\n# Empirical Contagion Rate\ncvirus_country_f_df['ECR'] = cvirus_country_f_df.apply(lambda row: 0 if (row.confirmed_x == 0) or (row.confirmed_y == 0) else (row.confirmed_y\/row.confirmed_x)-1, axis=1)\n\npcols = ['CountryAlpha3Code','Date','ECR']\ncvirus_country_f_df = cvirus_country_f_df[pcols]\n\ncvirus_country_df = pd.merge(cvirus_country_df, cvirus_country_f_df,  how='left', on=['CountryAlpha3Code', 'Date'])","bc809636":"plot_df = cvirus_country_df[cvirus_country_df['CountryAlpha3Code'].isin(top_country[0:5])]\npcol = [\"Country\",\"Date\",\"ECR\"]\nplot_df = plot_df[pcol]\n\nplt.figure(figsize=(10,5))\nchart  = sns.lineplot(data=plot_df, x='Date', y='ECR',hue='Country')\n\n# Define the date format\ndate_form = DateFormatter(\"%m-%d\")\nchart.xaxis.set_major_formatter(date_form)\n\n# Ensure a major tick for each week using (interval=1) \nchart.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))","d48a7542":"last15days = date.today() -  pd.to_timedelta(15, unit='d')\nlastdays = date.today() -  pd.to_timedelta(1, unit='d')\n\nplot_df = cvirus_country_df[(cvirus_country_df['CountryAlpha3Code'].isin(top_country[0:5]))\n                               & (cvirus_country_df['Date'] > last15days)\n                               & (cvirus_country_df['Date'] < lastdays)]\n\npcol = [\"Country\",\"Date\",\"ECR\"]\nplot_df = plot_df[pcol]\n\nplt.figure(figsize=(10,5))\nchart  = sns.lineplot(data=plot_df, x='Date', y='ECR',hue='Country')\n","b19d9ece":"url = 'https:\/\/oxcgrtportal.azurewebsites.net\/api\/CSVDownload'\n\n# Government Response Tracker\nGRT_df = pd.read_csv(url)","11d66b55":"GRT_df.tail(5)","89e9cce1":"GRT_df.dtypes","deb05c23":"pcol = ['CountryCode', 'Date', 'StringencyIndexForDisplay']\nGRT_df = GRT_df[pcol]\nGRT_df = GRT_df.rename(\n    columns={'CountryCode':'CountryAlpha3Code'\n             ,'StringencyIndexForDisplay':'GRTStringencyIndex'             \n             })","36610df8":"def intToDate(x):\n    strX = str(x)\n    y = strX[0:4]\n    m = strX[4:6]\n    d = strX[6:8]\n    strX = y+'\/'+m+'\/'+d\n    return datetime.strptime(strX, '%Y\/%m\/%d')\n\nGRT_df['Date'] = GRT_df.apply(lambda row: intToDate(row['Date']), axis=1)\n","a3f6dfb6":"cvirus_country_df = pd.merge(cvirus_country_df, GRT_df,  how='left', on=['CountryAlpha3Code', 'Date'])","83b88a7d":"cvirus_country_df.dtypes\n\n\n","c4f549af":"GRT_df.dtypes","e5714c9d":"\nplot_df = pd.concat([cvirus_country_df[cvirus_country_df['CountryAlpha3Code'].isin(top_country[0:5])]\n                     ,cvirus_country_df[(cvirus_country_df['CountryAlpha3Code']=='CHN')]])\n\npcol = [\"Country\",\"Date\",\"GRTStringencyIndex\"]\nplot_df = plot_df[pcol]\n\nplt.figure(figsize=(10,5))\nchart  = sns.lineplot(data=plot_df, x='Date', y='GRTStringencyIndex',hue='Country')\n\n# Define the date format\ndate_form = DateFormatter(\"%m-%d\")\nchart.xaxis.set_major_formatter(date_form)\n\n# Ensure a major tick for each week using (interval=1) \nchart.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))","06e885ee":"url = 'https:\/\/www.gstatic.com\/covid19\/mobility\/Global_Mobility_Report.csv'\n\n# Government Response Tracker\ngoogle_df = pd.read_csv(url)","3a7369ce":"# pip install pandas-profiling\n\n# profile = google_df.profile_report(title='Pandas Profiling Report')\n# profile.to_file(output_file=\"fifa_pandas_profiling.html\")","1bb9f6a1":"print(google_df.shape)\nprint(google_df.dtypes)\ngoogle_df.sample()","65877bfa":"firstday1confirmed_df = cvirus_country_df[cvirus_country_df.confirmed>0].groupby(['CountryAlpha3Code']).Date.min()\nfirstday100confirmed_df = cvirus_country_df[cvirus_country_df.confirmed>100].groupby(['CountryAlpha3Code']).Date.min()\n\ncvirus_country_df = pd.merge(cvirus_country_df, firstday1confirmed_df,  how='left', on='CountryAlpha3Code', suffixes=('', '_1'))\ncvirus_country_df = pd.merge(cvirus_country_df, firstday100confirmed_df,  how='left', on='CountryAlpha3Code', suffixes=('', '_100'))\n\n","50115973":"maxDay = cvirus_country_df.Date.max()+np.timedelta64(1, 'D')\n\ncvirus_country_df.loc[cvirus_country_df.Date_1.isnull(), 'Date_1'] = maxDay\ncvirus_country_df.loc[cvirus_country_df.Date_100.isnull(), 'Date_100'] = maxDay","f6108055":"\ncvirus_country_df['DaysSince1Cases'] = ((cvirus_country_df['Date'] - cvirus_country_df['Date_1']) \n                               \/ np.timedelta64(1, 'D'))\n\ncvirus_country_df['DaysSince100Cases'] = ((cvirus_country_df['Date'] - cvirus_country_df['Date_100']) \n                                 \/ np.timedelta64(1, 'D'))","b931e8ac":"cvirus_country_df.drop(columns=['Date_1', 'Date_100'], inplace=True)","0f425501":"cvirus_country_df.DaysSince1Cases = cvirus_country_df.DaysSince1Cases.astype(int)\ncvirus_country_df.DaysSince100Cases = cvirus_country_df.DaysSince100Cases.astype(int)","e066bb6c":"plot_df = pd.concat([cvirus_country_df[cvirus_country_df['CountryAlpha3Code'].isin(top_country[0:5])]\n                     ,cvirus_country_df[(cvirus_country_df['CountryAlpha3Code']=='CHN')]])\n\n# Delete data older than the first 100 cases\nplot_df.drop(plot_df[plot_df.DaysSince100Cases<0].index, inplace=True)\n\npcol = [\"Country\",\"DaysSince100Cases\",\"confirmed\"]\nplot_df = plot_df[pcol]\n\nplt.figure(figsize=(10,5))\nsns.lineplot(data=plot_df, x='DaysSince100Cases', y='confirmed',hue='Country')","6dca1398":"import urllib.request\nimport os\nimport zipfile\nimport shutil\n\n#os.listdir('..')\n\n# if exists temporary directory is removed\nif os.path.exists('..\/tmp'):\n    shutil.rmtree('..\/tmp')\n\nos.makedirs('..\/tmp') \n\nprint('Beginning file download with urllib2...')\n\nurl = 'http:\/\/api.worldbank.org\/v2\/en\/indicator\/SP.POP.TOTL?downloadformat=csv'\nurllib.request.urlretrieve(url,'..\/tmp\/population.zip')\n    \n# Unzip the files \nwith zipfile.ZipFile('..\/tmp\/population.zip',\"r\") as z:\n    z.extractall(\"..\/tmp\")\n\nfilePopulation = '..\/tmp\/' + [file for file in os.listdir('..\/tmp') if file.startswith('API_SP.POP')][0]\n\nprint(filePopulation)\n\n# The first 4 rows of the file are deleted\nwith open(filePopulation, \"r+\") as f:\n    d = f.readlines()\n    f.seek(0)\n    for i in d[4:]:\n        f.write(i)\n    f.truncate()\n    \n# Country Population\nCountryPopulation_df = pd.read_csv(filePopulation, keep_default_na=False, na_values=[''])\n\n# Temporary directory is removed\nshutil.rmtree('..\/tmp')\n\nCountryPopulation_df.sample()\n","b4d66099":"CountryPopulation_df.drop(columns=[\"Country Name\",\"Indicator Name\",\"Indicator Code\"], inplace=True)\nCountryPopulation_df = pd.melt(CountryPopulation_df\n                               , id_vars=[\"Country Code\"]\n                               , var_name=\"UpdateYear\"\n                               , value_name=\"Population\")\nCountryPopulation_df = CountryPopulation_df.rename(columns={\"Country Code\":'CountryAlpha3Code'\n                                           })\n\n# Records are deleted without defined data\nCountryPopulation_df.drop(CountryPopulation_df[CountryPopulation_df.Population.isnull()].index, inplace=True)\nCountryPopulation_df.UpdateYear = CountryPopulation_df.UpdateYear.astype(int)\n\n# The last year is selected with data\nmaxYear_df = CountryPopulation_df.groupby([\"CountryAlpha3Code\"]).UpdateYear.max().reset_index()\nCountryPopulation_df = pd.merge(maxYear_df, CountryPopulation_df,  how='inner', on=[\"CountryAlpha3Code\",\"UpdateYear\"])\nCountryPopulation_df.drop(columns={'UpdateYear'}, inplace=True)\n\n# it is verified that there is only one registry per country\nprint(CountryPopulation_df.shape)\nprint(CountryPopulation_df.CountryAlpha3Code.unique().size)\n\nCountryPopulation_df.sample()","05e76265":"CountryPopulation_df.to_csv('covid19_country_population.csv',index=False)","75cbcd23":"#CountryPopulation_df = pd.read_csv('..\/input\/covid19-by-country-with-government-response\/covid19_country_population.csv')","46e2b34e":"cvirus_population_df = cvirus_country_df[['CountryAlpha3Code','Date','confirmed','deaths','recoveries']]\ncvirus_population_df = pd.merge(cvirus_population_df, CountryPopulation_df, on='CountryAlpha3Code', how='left')\n\ncvirus_population_df['confirmed_PopPct'] = (cvirus_population_df['confirmed'] * 100) \/ cvirus_population_df['Population']\ncvirus_population_df['deaths_PopPct'] = (cvirus_population_df['deaths'] * 100) \/ cvirus_population_df['Population']\ncvirus_population_df['recoveries_PopPct'] = (cvirus_population_df['recoveries'] * 100) \/ cvirus_population_df['Population']\n\ncvirus_population_df.drop(columns={'confirmed','deaths','recoveries','Population'}, inplace=True)\n\ncvirus_population_df.sample()\n","fd4898e7":"cvirus_country_df = pd.merge(cvirus_country_df, cvirus_population_df, on=['CountryAlpha3Code','Date'], how='left')","69271d43":"plot_df = cvirus_country_df[cvirus_country_df['CountryAlpha3Code'].isin(top_country[0:10])]\npcol = [\"Country\",\"DaysSince100Cases\",\"confirmed_PopPct\"]\nplot_df = plot_df[pcol]\n\n# Delete data older than the first 100 cases\nplot_df.drop(plot_df[plot_df.DaysSince100Cases<0].index, inplace=True)\n\nplt.figure(figsize=(7,5))\nchart  = sns.lineplot(data=plot_df, x='DaysSince100Cases', y='confirmed_PopPct',hue='Country')","212e54bd":"top_country_percent = cvirus_country_df.groupby(['CountryAlpha3Code']).confirmed_PopPct.max().reset_index()\ntop_country_percent = top_country_percent.sort_values(by='confirmed_PopPct', ascending=False)\ntop_country_percent = top_country_percent['CountryAlpha3Code'].tolist()","face919b":"plot_df = cvirus_country_df[cvirus_country_df['CountryAlpha3Code'].isin(top_country_percent[0:10])]\npcol = [\"Country\",\"DaysSince1Cases\",\"confirmed_PopPct\",\"deaths_PopPct\"]\nplot_df = plot_df[pcol]\n\nplot_df.drop(plot_df[plot_df.DaysSince1Cases<0].index, inplace=True)\n\nfig, axs = plt.subplots(2, figsize=(7,10))\n\nplt.figure(figsize=(7,5))\nsns.lineplot(data=plot_df, x='DaysSince1Cases', y='confirmed_PopPct',hue='Country', ax=axs[0])\nsns.lineplot(data=plot_df, x='DaysSince1Cases', y='deaths_PopPct',hue='Country', ax=axs[1])","1f5297e3":"print(cvirus_country_df.shape)\ncvirus_country_df.dtypes","f6995994":"cvirus_country_df.sample()","013be053":"cvirus_country_df.columns[cvirus_country_df.isna().any()]","6d99c324":"cvirus_country_df[cvirus_country_df.isnull().any(axis=1)]","2b43a05f":"cvirus_country_df.to_csv('covid19_by_country.csv',index=False)","3e2ba2f4":"print(cvirus_country_df.Date.max())\nprint(cvirus_df.Date.max())","82d86240":"### Country Study\n\nWe cross country names from the original Johns Hopkins University set with the names from the country code data set","bfb3b50c":"### Daily increments\n\nWe calculate \"confirmed\", \"deaths\", \"recoveries\" increments","cc1156ec":"We visualize increased cases","7103f241":"<script type=\"text\/javascript\"\n        src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/mathjax\/2.7.0\/MathJax.js?config=TeX-AMS_CHTML\"><\/script>\n        \n<script type=\"text\/x-mathjax-config\">\nMathJax.Hub.Config({\ntex2jax: {\ninlineMath: [['$','$'], ['\\\\(','\\\\)']],\nprocessEscapes: true},\njax: [\"input\/TeX\",\"input\/MathML\",\"input\/AsciiMath\",\"output\/CommonHTML\"],\nextensions: [\"tex2jax.js\",\"mml2jax.js\",\"asciimath2jax.js\",\"MathMenu.js\",\"MathZoom.js\",\"AssistiveMML.js\", \"[Contrib]\/a11y\/accessibility-menu.js\"],\nTeX: {\nextensions: [\"AMSmath.js\",\"AMSsymbols.js\",\"noErrors.js\",\"noUndefined.js\"],\nequationNumbers: {\nautoNumber: \"AMS\"\n}\n}\n});\n<\/script>  ","edc5a168":"# Indices since Start Contagion\n\nIndices are generated that allow comparing the evolution in the different countries from common starting points:\n\n* Days since the first case of contagion is overcome\n* Days since 100 cases are exceeded","3cb93149":"Convert Date feature to datetime type","4aa3918a":"The purpose of this section is to add a feature to the dataset by country that tells us what level of action different governments are taking.\n\nIn the country summary, we will use the Stringency Index field, taking as good the calculation made by the researchers of the paper.\n\n\n\nSTRINGENCY INDEX (text taken from the web)\n\nOxCGRT collects publicly available information on 17 indicators of government responses. Eight of the policy indicators (C1-C8) record information on containment and closure policies, such as school closures and restrictions in movement. Four of the indicators (E1-E4) record economic policies, such as income support to citizens or provision of foreign aid, and five indicators (H1-H5) record health system policies such as the COVID-19 testing regime or emergency investments into healthcare. Read the working paper for a full description of the data and how it is collected.\n\nWe\u2019ve also looked at what the data tells us about countries\u2019 readiness to exit lockdown and how closely they meet WHO guidelines in this research note. \n\nThe tracker aggregates the policy scores (not the financial scores) into a common \u2018Stringency Index\u2019. Note that this index simply records the number and strictness of government policies, and should not be interpreted as \u2018scoring\u2019 the appropriateness or effectiveness of a country\u2019s response. A higher position in the Stringency Index does not necessarily mean that a country's response is \u2018better\u2019 than others lower on the index.","89904cf5":"## Summary by country\n\nIt is grouped by country, eliminating the Province\/State and the features of latitude and longitude.","9ab010d2":"Top countries","5d18062f":"Countries that do not join","42ed5095":"# Add ISO 3166 code\n\nList of ISO 3166 country codes","fbd81c1a":"Countries that do not join, after correction\n\nAt the date of generating the notebook, there are only two countries that do not exist that are cruises where the coronavirus was detected.\n\nIf more cases appear, they will need to be corrected.","cf2d6973":"We manually corrected the countries whose name does not match","9af1edbb":"Join data","39a972eb":"Transpose columns dates to rows","691c32e6":"Information of government response is added to the main dataset","aaed19c2":"Other Dataset of Center for Systems Science and Engineering (CSSE) at Johns Hopkins University ","317cc117":"We visualize empirical contagion rate","200bd6be":"# COVID-19 Government Response Level\n\nSource: OXFORD COVID-19 GOVERNMENT RESPONSE TRACKER\nhttps:\/\/www.bsg.ox.ac.uk\/research\/research-projects\/oxford-covid-19-government-response-tracker\nHale, Thomas and Samuel Webster (2020). Oxford COVID-19 Government Response Tracker. Data use policy: Creative Commons Attribution CC BY standard.\n\nUpdate 29 April: They have updated their data with several new indicators and changed the download url.\n","d1845e89":"Source: https:\/\/www.google.com\/covid19\/mobility\/\n\nVer https:\/\/www.kaggle.com\/annaepishova\/starter-geo-openstreetmap-bigquery-dataset","2e5524bc":"This notebook selects data related to covid-19 to facilitate the implementation of models at the country level, it also incorporates the ISO 3166 country code to facilitate the addition of new data and calculated characteristics.\n\nThe original data is updated daily, so the execution of this notebook generates updated data.\n\nData sources:\n\n> <p>Source: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University https:\/\/github.com\/CSSEGISandData\/COVID-19\nProvided by Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE):\nhttps:\/\/systems.jhu.edu\/<\/p>\n\n> <p>Source: OXFORD COVID-19 GOVERNMENT RESPONSE TRACKER https:\/\/www.bsg.ox.ac.uk\/research\/research-projects\/oxford-covid-19-government-response-tracker Hale, Thomas and Samuel Webster (2020). Oxford COVID-19 Government Response Tracker. Data use policy: Creative Commons Attribution CC BY standard.<\/p>\n\n\nThe result is a dataset with the following features:\n\n* Country Name\n\n* Country Code ISO 3166 Alpha 3\n\n* Date\n\n* Incidence data:\n    * confirmed                      \n    * deaths                         \n    * recoveries\n\n* Daily increments:\n    * confirmed_inc                \n    * deaths_inc                   \n    * recoveries_inc               \n\n* Empirical Contagion Rate - ECR   \n\n    I = confirmed cases on a day n\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F3508582%2F3e90ecbcdf76dfbbee54a21800f5e0d6%2FECR.jpg?generation=1586861653126435&alt=media)\n \n* GOVERNMENT RESPONSE TRACKER - GRTStringencyIndex        \n    \n    OXFORD COVID-19 GOVERNMENT RESPONSE TRACKER - Stringency Index \n    \n\n* Indices from Start Contagion\n    * Days since the first case of contagion is overcome\n    * Days since 100 cases are exceeded\n    \n    \n* percentages over the country's population:\n    * confirmed_PopPct                \n    * deaths_PopPct                   \n    * recoveries_PopPct               \n\n\nOutput - Kaggle data:\n    [COVID-19 by country - Daily update](https:\/\/www.kaggle.com\/jcsantiago\/covid19-by-country-with-government-response)\n    ","fa311ad2":"Visualizamos los datos ","713e96ae":"# COVID-19 incidence data\n\nSource: Center for Systems Science and Engineering (CSSE) at Johns Hopkins University https:\/\/github.com\/CSSEGISandData\/COVID-19\n\nProvided by Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE):\nhttps:\/\/systems.jhu.edu\/\n\nTerms of Use:\n\nThis GitHub repo and its contents herein, including all data, mapping, and analysis, copyright 2020 Johns Hopkins University, all rights reserved, is provided to the public strictly for educational and academic research purposes. The Website relies upon publicly available data from multiple sources, that do not always agree. The Johns Hopkins University hereby disclaims any and all representations and warranties with respect to the Website, including accuracy, fitness for use, and merchantability. Reliance on the Website for medical guidance or use of the Website in commerce is strictly prohibited.","35c0fe39":"# Google COVID-19 Community Mobility Reports","0ca81d7e":"# Save data frame","9e078f4e":"We verify the completeness of the dates","0cbec742":"# Population percentages \n\nsource: https:\/\/data.worldbank.org\/indicator\/SP.POP.TOTL\n\nThe source supplies a zip file, which contains the data file and various metadata files.\n\nIn addition, the data file contains several header lines that must be removed.","c7adca8e":"## Empirical Contagion Rate (ECR)\n\nI = confirmed cases on a day n\n\n $$ \\begin{equation} \n     \\Delta I_{n} = ECR \\cdot I_{n-1} \\Rightarrow ECR = \\frac{I_{n+1}}{ I_{n}} - 1  \n \\end{equation} $$\n"}}