{"cell_type":{"518cffd9":"code","8771be13":"code","288cdbe9":"code","481644dc":"code","b0bc33f3":"code","4e8cc88c":"code","fd9d924f":"code","8a9f3d1c":"code","455c919f":"code","e06ca883":"code","02cc990e":"code","7360c524":"code","8b67d8a3":"code","cf5f2b20":"code","0bdcd738":"code","1d3a6c19":"code","25a48e61":"markdown","eb94de49":"markdown","a29c763c":"markdown","625eb629":"markdown","24aaff00":"markdown","f15068ed":"markdown","be9fe3e3":"markdown","968522a5":"markdown"},"source":{"518cffd9":"import numpy as np\nimport pandas as pd\nfrom sqlalchemy import create_engine as ce\nfrom sqlalchemy import inspect\nfrom pathlib import Path","8771be13":"DATA= Path(\"\/kaggle\/input\/books.db\")\n\nengine = ce(\"sqlite:\/\/\/\"+str(DATA))\ninspector = inspect(engine)","288cdbe9":"inspector.get_table_names()","481644dc":"books_df = pd.read_sql(\"books\", con = engine)\nbooks_df","b0bc33f3":"author_df = pd.read_sql(\"authors\", con = engine)\nauthor_df","4e8cc88c":"book_file_df = pd.read_sql(\"book_file\", con = engine)\nbook_file_df","fd9d924f":"text_files_df = pd.read_sql(\"text_files\", con = engine)\ntext_files_df","8a9f3d1c":"def searchAuthor(kw):\n    return author_df[author_df.author.str.contains(kw)]\n\ndef searchBookByAuthor(kw):\n    author_result = list(searchAuthor(kw).index)\n    return books_df[books_df.author_id.isin(author_result)]","455c919f":"from sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, Text, ForeignKey\nfrom sqlalchemy.orm import relationship\nBase = declarative_base()\n\ndef getSession(engine):\n    from sqlalchemy.orm import sessionmaker\n    return sessionmaker()(bind=engine)\n\nclass authorModel(Base):\n    __tablename__ = 'authors'\n    index = Column(Integer, primary_key = True)\n    author = Column(Text)\n    born = Column(Integer)\n    death = Column(Integer)\n    \n    def __repr__(self):\n        return \"<Author: %s, %s to %s>\"%(self.author,self.born_year,self.death_year)\n    \n    @property\n    def born_year(self):\n        if self.born < 9999: return self.born\n        else: return \"No Record\"\n\n    @property\n    def death_year(self):\n        if self.death < 9999: return self.death\n        else: return \"No Record\"\n\nclass chapterModel(Base):\n    __tablename__ = \"text_files\"\n    index = Column(Integer, primary_key = True)\n    fmt = Column(Text) # Format\n    text = Column(Text) # Text content\n    \n    def __repr__(self):\n        return \"book file:%s\"%(self.index)\n    \nclass bookModel(Base):\n    __tablename__ = \"books\"\n    book_id = Column(Integer, primary_key = True)\n    bookname = Column(Text)\n    cate1 = Column(Text)\n    author_id = Column(Integer,ForeignKey(authorModel.index))\n    author = relationship(authorModel)\n    \n    def __repr__(self):\n        return \"<Book: %s>\"%(self.bookname)\n    \nclass bookChapterModel(Base):\n    __tablename__ = \"book_file\"\n    index = Column(Integer, primary_key = True)\n    file_id = Column(Integer,ForeignKey(chapterModel.index))\n    book_id = Column(Integer,ForeignKey(bookModel.book_id))\n    file = relationship(chapterModel)\n    book = relationship(bookModel)\n    chapter = Column(Text())\n\n    def __repr__(self):\n        return \"Book:%s with File:%s, Chapter:%s\"%(self.book,self.file,self.chapter)\n    \nbookModel.maps = relationship(bookChapterModel)\nbookModel.chapters = relationship(chapterModel, secondary = \"book_file\")\nchapterModel.books = relationship(bookModel, secondary = \"book_file\")\nchapterModel.maps = relationship(bookChapterModel)\nauthorModel.books = relationship(bookModel)","e06ca883":"sess = getSession(engine)","02cc990e":"sess.query(authorModel).all()","7360c524":"test_author = sess.query(authorModel).filter_by(index=64).first()\ntest_author","8b67d8a3":"test_author.books[:5]","cf5f2b20":"test_book = test_author.books[2]\ntest_book","0bdcd738":"test_book.chapters","1d3a6c19":"print(test_book.chapters[0].text[:1000])","25a48e61":"### Table Names","eb94de49":"```author``` table, for born and death columns, 10000 is for missing data","a29c763c":"### Connection\nData is a SQLite database file, entire database, single tiny file","625eb629":"### Data Model\n\nSince this is a RMDBS, let's map the data orm models to make things easier","24aaff00":"Check the content of a chapter","f15068ed":"### Helper Functions","be9fe3e3":"# Classic English Literature\n### Exploring the dataset\n* From SQL query to pandas dataframe\n* SQLAlchemy ORM ","968522a5":"```book_file``` table. A mapping relationship between book metadata and text content(in most cases chapter levle) of the book"}}