{"cell_type":{"8dc1752d":"code","71425279":"code","cf6e084b":"code","aa31e503":"code","545ea809":"code","7abc13e6":"code","50a3f090":"code","08d38566":"code","485616c3":"code","7087881c":"code","a7775661":"code","fc26fb18":"code","ef512258":"code","0dd824e4":"code","22faf72a":"code","8184f82a":"code","74afa1e2":"code","2916ebad":"code","0ffc1439":"code","28a0b766":"code","036b8e9f":"code","2a11c43a":"code","b8e3e612":"code","7bd8139b":"code","11d0695b":"code","560dc81f":"code","b0825b54":"code","2883bb3e":"code","c79907fc":"code","d303ffc0":"code","8a0edbef":"code","fcff3dbf":"code","e88bf555":"code","75601d46":"code","16b6b7d1":"code","d2a265ff":"code","92f6d6da":"code","fc74e951":"code","8abebb44":"code","94b30f88":"code","bb155c33":"code","3609eafe":"code","0795150c":"code","9d513b12":"code","41b36a4a":"code","737a692c":"code","16e5f85a":"code","d53aaa05":"code","ad354356":"code","d765fe33":"code","56319f1d":"code","3215215e":"code","33524629":"code","659fa126":"code","f796c978":"code","ce0181bd":"code","68310683":"code","7baacbba":"code","4833066d":"code","969461cb":"code","476b7353":"code","ba3aa215":"code","5f73abd3":"code","60cf16d1":"code","aa7a4ee1":"code","7b0de903":"code","2e5d2b6f":"code","469fa1fa":"code","9d80fd64":"code","663d7262":"code","e6c96254":"code","8a1e6f87":"code","90446dbc":"code","09a61344":"code","04139678":"code","9eebca8f":"code","c4f963a6":"code","308bec2e":"code","2610c101":"code","10b70f63":"code","58571138":"code","838a38ab":"code","18083c22":"code","71b675f9":"code","3be5e522":"code","dbed6568":"code","7d5c324f":"code","ded487b2":"code","6677cdc7":"code","478b85ab":"code","1a1deb79":"code","d30f2f58":"code","02be9b25":"code","ed699c08":"code","def152ad":"code","7f2cd4d6":"code","426867a2":"code","63ff8090":"code","e1f15ed1":"code","74e72154":"code","28c23779":"code","dcbaa846":"code","1c0e506e":"code","f026a11c":"code","bfde4321":"code","5df5bdab":"code","c1d7ae05":"code","a082a65b":"code","32bbba59":"code","88a67c7c":"code","b150c15e":"code","f2f1a93a":"code","d0aba4d2":"code","96d36c4f":"code","fae26f37":"code","345f256a":"code","fef3b466":"code","b08dd920":"code","2b6f4643":"code","fd2adde1":"code","6a32e060":"code","574b0a41":"code","34f9b39b":"code","1a7b7398":"code","df167ce2":"code","13a2511b":"code","cf3bd5b9":"code","2f81deea":"code","44d9e685":"code","1f7351aa":"code","65ef1f54":"code","edfc9d26":"code","2acafa45":"code","ac26f4c6":"code","3d2a9aac":"code","238dab93":"code","26971ce7":"code","6fb36d49":"code","2124c25a":"code","4679e53b":"code","357f08e3":"code","c59163de":"code","8bef694a":"code","42a67bd5":"code","bd7e5269":"code","52154b1f":"code","0f5e1f8f":"code","1ab2ab21":"code","1dab8344":"code","b8867a7d":"code","5d02b169":"code","9274e199":"code","4460a7d5":"code","7ea404e3":"code","63a6ed4a":"code","536e0215":"code","0da9457d":"code","9b05e43c":"code","7a117c16":"code","0c9f4342":"code","a3c6b59c":"code","ac3823f5":"code","204cbf2f":"markdown","5100142d":"markdown","c8132848":"markdown","0144d6d7":"markdown","bd918083":"markdown","438eac5d":"markdown","c104e9b1":"markdown","aba11d7f":"markdown","6b2fd150":"markdown","50030725":"markdown","edcb35e9":"markdown","09370578":"markdown","ebaefe63":"markdown","f8f30e52":"markdown","c70147d3":"markdown","6df9dbc5":"markdown","ea584168":"markdown","e2f8abfd":"markdown","3cc6aeef":"markdown","7e8629ca":"markdown","029888a3":"markdown","d08b3e65":"markdown","6899fc20":"markdown","02d51aa1":"markdown","2d107b35":"markdown","8d7b3a18":"markdown","17bce2f1":"markdown","cb374d4e":"markdown","1e3b2565":"markdown","650c6721":"markdown","97b0a9c5":"markdown","27f57366":"markdown","11ca24dc":"markdown","5fe3a1d7":"markdown","3814f4fc":"markdown","db6c8954":"markdown","b423c187":"markdown","2b532949":"markdown","c0d4c432":"markdown","4ab88954":"markdown","986b76cb":"markdown","a37fb886":"markdown","a0f6ec73":"markdown","d4fa18ba":"markdown","fe90bb2e":"markdown","44d5030e":"markdown","20821c76":"markdown","48a712e6":"markdown","43f41b2a":"markdown","9a808f54":"markdown","dc819bad":"markdown","450b0c09":"markdown","edaefbaf":"markdown","e1c115bf":"markdown","76d5a4e2":"markdown","4df16a1d":"markdown","9a43b785":"markdown","f5448960":"markdown","933ed820":"markdown","f51620ed":"markdown","47c04a8f":"markdown","7a64ff7d":"markdown","85bb2dac":"markdown","2e0d096e":"markdown","a56f1e3a":"markdown","be722698":"markdown","76832894":"markdown","0e180ff9":"markdown","742ddc48":"markdown","f891b55a":"markdown","54ef1906":"markdown","6d28d1d4":"markdown","a1c1001b":"markdown","acb6de3f":"markdown","61734090":"markdown","79eadded":"markdown","0fef91e5":"markdown","91621f3c":"markdown","a55e1b71":"markdown","e5e6fb62":"markdown","9fa4549c":"markdown","9fa15753":"markdown","d575a8e6":"markdown","97306fac":"markdown","9ee2d3e3":"markdown","ec0100e7":"markdown","4f5bbc74":"markdown","2e32afb5":"markdown","5bf2c26c":"markdown","80725673":"markdown","56c8aca6":"markdown","66f5751e":"markdown","ab918f42":"markdown","52952bfb":"markdown","fec70170":"markdown","6f0fc757":"markdown","c4b0239c":"markdown","6c59bc4e":"markdown","bec11581":"markdown","4d58f3e0":"markdown","251f17b4":"markdown","64eb6cac":"markdown","ccc7fad2":"markdown","217c143f":"markdown","cc2f5db7":"markdown","80ea58aa":"markdown","979bec4c":"markdown","edb59de2":"markdown","47029226":"markdown"},"source":{"8dc1752d":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom itertools import combinations\nfrom scipy.stats import ttest_ind\nimport statsmodels.api as sm\nimport scipy.stats as sst\nimport warnings\nfrom datetime import datetime\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import average_precision_score\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n%matplotlib inline","71425279":"class LogDf(): # \u043a\u043b\u0430\u0441\u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    def __init__(self, df, col):\n        self.df = df\n        self.col = col\n        self.col_log = col + '_log'\n        \n    def df_col_log(self):      \n        return  self.df[self.col].apply(lambda x: np.log(x + 1)) \n\nclass NumFitInspect(): # \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n    def __init__(self, df, col):\n        self.df = df[col]\n        self.col = col\n        self.col_log = LogDf(df, col).col_log\n        self.df_log = LogDf(df, col).df_col_log()\n    \n    def show_plots(self, size = 5, log = False): # \u0433\u0440\u0430\u0444\u0438\u043a\u0438\n        \n        if log:\n            data = self.df_log\n            column = self.col_log\n        else:\n            data = self.df\n            column = self.col\n        \n        f = plt.figure()\n        f.clear()\n        plt.close(f)\n\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (3*size,size))\n\n        fig = sm.qqplot(data.dropna(), fit = True, line ='45', ax=ax1) # \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c\n        fig.suptitle('QQ-plot, histogram and boxplot for {0} '.format(column))\n        \n        ax2.hist(data.dropna(), bins = 20, histtype = 'bar', align = 'mid', rwidth = 0.8, color = 'green') # \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430\n        ax3.boxplot(data.dropna(), vert = False)  # \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n     \n        plt.show\n        \n    def boundaries(self, log = False): # \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n        if log:\n            data = self.df_log\n            column = self.col_log\n        else:\n            data = self.df\n            column = self.col\n        \n        q1 = data.quantile(q = 0.25) \n        q3 = data.quantile(q = 0.75) \n        IQR = q3 - q1\n        return q1 - 1.5*IQR, q3 + 1.5*IQR\n\n    def outliers(self, log = False): # \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n        if log:\n            data = self.df_log\n            column = self.col_log\n        else:\n            data = self.df\n            column = self.col\n\n        minb, maxb = self.boundaries(log)\n        return len(data[data < minb])+ len(data[data > maxb])\n","cf6e084b":"class ModelInspect(): # \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043c\u0435\u0442\u0440\u0438\u043a \u043c\u043e\u0434\u0435\u043b\u0438\n    def __init__(self, model, X_test, y_test):\n        self.X_test = X_test\n        self.y_test = y_test\n        self.y_pred = model.predict(X_test)\n        self.probs = model.predict_proba(X_test)[:,1]\n    \n    def roc_curve_plot(self):\n        fpr, tpr, threshold = roc_curve(self.y_test, self.probs)\n        roc_auc = roc_auc_score(self.y_test, self.probs)\n\n        plt.figure()\n        plt.plot([0, 1], label='Baseline', linestyle='--')\n        plt.plot(fpr, tpr, label = 'Regression')\n        plt.title('Logistic Regression ROC AUC = %0.10f' % roc_auc)\n        plt.ylabel('True Positive Rate')\n        plt.xlabel('False Positive Rate')\n        plt.legend(loc = 'lower right')\n        plt.show()\n    \n    def confusion_matrix_plot(self):\n        tn, fp, fn, tp = confusion_matrix(self.y_test, self.y_pred).ravel()\n        cf_matrix = np.array([[tp,fp],[fn,tn]])\n        group_names = ['TP','FP','FN','TN']\n        group_counts = ['{0:0.0f}'.format(value) for value in cf_matrix.flatten()]\n        labels = [f\"{v1}\\n{v2}\" for v1, v2 in zip(group_names,group_counts)]\n        labels = np.asarray(labels).reshape(2,2)\n        plt.figure()\n        sns.heatmap(cf_matrix, annot=labels, annot_kws={\"size\": 20}, fmt='', cmap= 'Pastel1', cbar = False, \\\n                 xticklabels = ['\u0414\u0435\u0444\u043e\u043b\u0442','\u041d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442'], yticklabels= ['\u0414\u0435\u0444\u043e\u043b\u0442','\u041d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442'])\n        plt.title('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0434\u043b\u044f default')\n        plt.show()\n        \n    def get_metrics(self):\n        result = pd.Series({\n            'accuracy' : accuracy_score(self.y_test, self.y_pred),\n            'precision' : precision_score(self.y_test, self.y_pred),\n            'recall' : recall_score(self.y_test, self.y_pred),\n            'F1' : f1_score(self.y_test, self.y_pred),\n            'ROC_AUC': roc_auc_score(self.y_test, self.probs) \n        })\n        return result\n    \n    def recall_precision_plot(self):\n        precisions, recalls, _ = precision_recall_curve(self.y_test, self.y_pred)\n        ap = average_precision_score(self.y_test, self.y_pred)        \n        \n        plt.figure()\n        \n        plt.step(recalls, precisions, color='b', alpha=0.2, where='post')\n        plt.fill_between(recalls, precisions, step='post', alpha=0.2, color='lime')\n        plt.xlabel('Recall');\n        plt.ylabel('Precision');\n        plt.title('Recall-precision curve, \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u043e\u0434 \u043a\u0440\u0438\u0432\u043e\u0439 = %0.10f' % ap)\n        plt.grid(True)\n\n        plt.show()\n                                          \n","aa31e503":"data_directory = '\/kaggle\/input\/sf-dst-scoring\/'\ndata_train = pd.read_csv(data_directory+'train.csv')\ndata_test = pd.read_csv(data_directory+'test.csv')\nsample_submission = pd.read_csv(data_directory+'\/sample_submission.csv')","545ea809":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\n!pip freeze > requirements.txt\nRANDOM_SEED = 42\nCURRENT_DATE = datetime.now()","7abc13e6":"# \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndata_train['Train'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndata_test['Train'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\ndata = data_train.append(data_test, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","50a3f090":"print('\u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', data_train.shape, '\\n')\nprint('\u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', data_test.shape)","08d38566":"data.info()","485616c3":"data.sample(5)","7087881c":"data.isna().sum()","a7775661":"data.describe(include = 'object')","fc26fb18":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044f\u0445\ncols = data.columns\nfor col in cols:\n    if data[col].dtype == 'O':\n        print('\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u043e\u043b\u0435 {0} : {1}'.format(col,data[col].unique()))","ef512258":"# \u0412\u044b\u043f\u0438\u0448\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nbin_cols = ['sex', 'car', 'car_type', 'foreign_passport']\ncat_cols = ['education']","0dd824e4":"data.education.value_counts().plot.barh()","22faf72a":"mode = data.education.mode()[0]\nprint('\u0421\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043f\u043e\u043b\u0435 Education: ', mode)","8184f82a":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 education \u043c\u043e\u0434\u043e\u0439\n\ndata['education'].fillna(mode, inplace=True)\ndata.education.unique()","74afa1e2":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\ndata.education.value_counts()","2916ebad":"data['app_date'] = pd.to_datetime(data.app_date, format='%d%b%Y')\ndata['app_date'].sample(5)","0ffc1439":"data['app_date'].dt.year.value_counts()","28a0b766":"data['app_date'].dt.month.value_counts()","036b8e9f":"data['app_date'].dt.month.value_counts().plot.bar()","2a11c43a":"data['month'] = data['app_date'].dt.month\nfor i in [1,2,3,4]:\n    plt.figure()\n    sns.countplot(x=data[data.month == i]['app_date'].dt.day, data=data[data.month == i])\n    plt.show()","b8e3e612":"NY = pd.to_datetime('01\/01\/2014')\nNY","7bd8139b":"data['days_from_ny'] = (data['app_date'] - NY).dt.days\ndata[data.month == 1]['days_from_ny'].sample(5)","11d0695b":"# \u0438 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0434\u043d\u0435\ndates = data.app_date.value_counts()\ndata['app_cnt'] = data.app_date.apply(lambda x: dates[x])\ndata['app_cnt'].sample(5)","560dc81f":"fig, ax = plt.subplots(1,1, figsize = (8,6))\nax = sns.heatmap(data.loc[:,['month', 'days_from_ny', 'app_cnt']].corr(),annot = True, cmap = 'coolwarm')","b0825b54":"# \u0423\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a app_date\ndata.drop(['app_date', 'month'],  axis = 1, inplace = True)\ndata.info()","2883bb3e":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\ncols = data.columns\nfor col in cols:\n    if data[col].dtype != 'O' and len(data[col].unique())<=20:\n        print('\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u043e\u043b\u0435 {0} : {1}'.format(col,data[col].unique()))","c79907fc":"sns.countplot(x=data['region_rating'], data=data)","d303ffc0":"# \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols += ['region_rating', 'home_address', 'work_address', 'sna', 'first_time']\nbin_cols += ['good_work']","8a0edbef":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a client_id\ndata.client_id.astype('object').describe(include = 'object')","fcff3dbf":"data.drop(['client_id'], axis = 1, inplace = True)\ndata.info()","e88bf555":"print('\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: ',bin_cols)\nprint('\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 :',cat_cols)","75601d46":"# \u0412\u044b\u043f\u0438\u0448\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\nnum_cols = list(set(data.columns) - set(bin_cols + cat_cols + ['default', 'Train']))\nprint('\u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: ', num_cols)","16b6b7d1":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f age\ndata_age = NumFitInspect(data[data.Train == 1], 'age')","d2a265ff":"data_age.show_plots()","92f6d6da":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0438  log(age) \ndata_age.show_plots(log = True)","fc74e951":"# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a age\ndata['age'] = np.log(data['age'] + 1)\ndata['age'].sample(5)","8abebb44":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f decline_app_cnt\ndata_decline_app_cnt = NumFitInspect(data[data.Train == 1], 'decline_app_cnt')","94b30f88":"data_decline_app_cnt.show_plots()","bb155c33":"data_decline_app_cnt.show_plots(log = True)","3609eafe":"print('\u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f decline_app_cnt: ', data_decline_app_cnt.outliers())\nprint('\u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f log(decline_app_cnt): ', data_decline_app_cnt.outliers(log = True))","0795150c":"data[data.decline_app_cnt < 2].decline_app_cnt.value_counts()","9d513b12":"data['decline_flag'] = data.decline_app_cnt.apply(lambda x: 0 if x < 1 else 1)\ndata['decline_flag'].value_counts()","41b36a4a":"new_fits = ['decline_flag']","737a692c":"# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a decline_app_cnt\ndata['decline_app_cnt'] = np.log(data['decline_app_cnt'] + 1)\ndata['decline_app_cnt'].sample(5)","16e5f85a":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f income\ndata_income = NumFitInspect(data[data.Train == 1], 'income')","d53aaa05":"data_income.show_plots()","ad354356":"data['income'][data['region_rating'] == 30].hist()","d765fe33":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445\nfor x in data['region_rating'].value_counts().index:\n    data['income'][data['region_rating'] == x].hist(bins=20)\nplt.show()","56319f1d":"data_income.show_plots(log = True)","3215215e":"print('\u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f income: ', data_income.outliers())\nprint('\u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f log(income): ', data_income.outliers(log = True))","33524629":"# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a income\ndata['income'] = np.log(data['income'] + 1)\ndata['income'].sample(5)","659fa126":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f income\ndata_days_from_ny = NumFitInspect(data[data.Train == 1], 'days_from_ny')","f796c978":"data_days_from_ny.show_plots()","ce0181bd":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f bki_request_cnt\ndata_bki_request_cnt = NumFitInspect(data[data.Train == 1], 'bki_request_cnt')","68310683":"data_bki_request_cnt.show_plots()","7baacbba":"data_bki_request_cnt.show_plots(log = True)","4833066d":"print('\u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f bki_request_cnt: ', data_bki_request_cnt.outliers())\nprint('\u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f log(bki_request_cnt): ', data_bki_request_cnt.outliers(log = True))","969461cb":"# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a bki_request_cnt\ndata['bki_request_cnt'] = np.log(data.bki_request_cnt + 1)\ndata['bki_request_cnt'].sample(5)","476b7353":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f score_bki\ndata_score_bki = NumFitInspect(data[data.Train == 1], 'score_bki')","ba3aa215":"data_score_bki.show_plots()","5f73abd3":"print('\u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f score_bki: ', NumFitInspect(data[data.Train == 1], 'score_bki').outliers())","60cf16d1":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u043b\u044f app_cnt\nNumFitInspect(data[data.Train == 1], 'app_cnt').show_plots()","aa7a4ee1":"print('\u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f score_bki: ', NumFitInspect(data[data.Train == 1], 'app_cnt').outliers())","7b0de903":"fig, ax = plt.subplots(1,1, figsize = (8,6))\nax = sns.heatmap(data.loc[:,num_cols + new_fits].corr(),annot = True, cmap = 'coolwarm')\n","2e5d2b6f":"imp_num = pd.Series(f_classif(data[data.Train == 1][num_cols+new_fits], data[data.Train == 1]['default'])[0], index = num_cols+new_fits)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","469fa1fa":"for col in cat_cols + bin_cols:\n    fig, ax = plt.subplots(1, 1, figsize = (15, 5))\n    sns.boxplot(x = col, y='score_bki', data = data, ax=ax)\n    ax.set_title('Boxplot for {0}'.format(col))\n    plt.show()","9d80fd64":"sns.pairplot(data[data.Train == 1 & (data.decline_app_cnt > 1)].loc[:,['income','score_bki','decline_app_cnt','bki_request_cnt','app_cnt', 'sna','default']], hue = 'default')","663d7262":"for i, col in enumerate(cat_cols + bin_cols):\n    fig, ax = plt.subplots(1,1, figsize = (5,5))\n    sns.countplot(x=col, data=data[data.Train == 1], ax = ax)","e6c96254":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c education \u0432 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442\nlabel_encoder = LabelEncoder()\ndata['education'] = label_encoder.fit_transform(data['education'])\ndata.education.unique()","8a1e6f87":"# \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c region_rating\nlabel_encoder = LabelEncoder()\ndata['region_rating'] = label_encoder.fit_transform(data['region_rating'])\ndata.region_rating.unique()","90446dbc":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0431\u0438\u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nlabel_encoder = LabelEncoder()\nfor col in bin_cols:\n    data[col] = label_encoder.fit_transform(data[col])\n    \n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndata.head(5)","09a61344":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c\nfor column in bin_cols:\n    print('\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u043e\u043b\u0435 {0} : {1}'.format(column,data[column].unique()))","04139678":"imp_cat = pd.Series(mutual_info_classif(data[data.Train == 1][bin_cols + cat_cols], data[data.Train == 1]['default'], \n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","9eebca8f":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nimp_cat = pd.Series(mutual_info_classif(data[data.Train == 1][cat_cols+bin_cols+num_cols], data[data.Train == 1]['default'], \n                                     discrete_features =True), index = cat_cols+bin_cols+num_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","c4f963a6":"# \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0442\u044c \"\u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u044e\u0449\u0443\u044e \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u044c\"\nsns.pairplot(data[data.Train == 1].loc[:,['sna', 'score_bki','income', 'default']], hue = 'default')\n","308bec2e":"import plotly.express as px\n\nfig = px.scatter_3d(data[data.Train == 1], x='score_bki', y='income', z='sna', color='default')\nfig.show()","2610c101":"# \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 get_dummy\ndata_cat = pd.get_dummies(data.loc[:, cat_cols], columns = cat_cols)\ndata_cat.sample(3)","10b70f63":"len(num_cols + cat_cols + bin_cols)","58571138":"# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndata_num = pd.DataFrame(StandardScaler().fit_transform(data[num_cols]), columns = num_cols)","838a38ab":"# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n\nX = pd.concat([data_num, data_cat, data[bin_cols], data['Train'], data['default']], axis = 1)\n#X = pd.concat([data_num, data['Train'], data['default']], axis = 1)\n\nY = data['default'].values","18083c22":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b X\nX.info()","71b675f9":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u0435\u0446 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0441\u0442\u0440\u043e\u043a\nX.sample(3)","3be5e522":"print(cat_cols + bin_cols)","dbed6568":"col = 'income'\nminb, maxb = NumFitInspect(X.loc[:, [col]], col).boundaries()\nmean = X[col].mean()\nX[col] = X[col].apply(lambda x : x if ((x >= minb) & (x <= maxb)) else mean)\nNumFitInspect(X.loc[:, [col]], col).show_plots()","7d5c324f":"train_data = X.query('Train == 1').drop(['Train'], axis=1)\ntest_data = X.query('Train == 0').drop(['Train'], axis=1)\n\ny = train_data.default.values            # \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\nX = train_data.drop(['default'], axis=1)","ded487b2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","6677cdc7":"print(X.shape, X_train.shape, X_test.shape)","478b85ab":"warnings.simplefilter('ignore')\n\nmodel = LogisticRegression(max_iter = 2000, random_state=RANDOM_SEED)\nmodel.fit(X_train, y_train)","1a1deb79":"mi_1 = ModelInspect(model, X_test, y_test)","d30f2f58":"mi_1.roc_curve_plot()","02be9b25":"mi_1.get_metrics()","ed699c08":"mi_1.confusion_matrix_plot()","def152ad":"mi_1.recall_precision_plot()","7f2cd4d6":"ax = sns.countplot(x=\"default\", data=data)","426867a2":"print('\u043a\u043b\u0430\u0441\u0441 0: ', len(y_train[y_train == 0]))\nprint('\u043a\u043b\u0430\u0441\u0441 1: ', len(y_train[y_train == 1]))\nprint('\u0432\u0435\u0441\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432: w0 = {0}, w1 = {1}'.format(round(len(Y[Y == 0])\/len(Y[Y == 1])), 1))","63ff8090":"np.bincount(y_train.flatten().astype(int))","e1f15ed1":"model = LogisticRegression(class_weight='balanced', max_iter = 2000, random_state = RANDOM_SEED)\nmodel.fit(X_train, y_train)\nmi_balanced = ModelInspect(model, X_test, y_test)","74e72154":"mi_balanced.roc_curve_plot()","28c23779":"mi_balanced.get_metrics()","dcbaa846":"mi_balanced.confusion_matrix_plot()","1c0e506e":"mi_balanced.recall_precision_plot()","f026a11c":"model = LogisticRegression(random_state = RANDOM_SEED, \n                           C = 1, \n                           class_weight = 'balanced', \n                           penalty = 'l1', \n                           solver = 'liblinear',\n                           max_iter = 2000,\n                           )\n\nmodel.fit(X_train, y_train)","bfde4321":"df_coef = pd.DataFrame(np.hstack((np.array(X_train.columns).reshape(38,1), model.coef_.reshape(38,1))), columns = ['col', 'coef'])","5df5bdab":"df_coef['abs_coef'] = np.abs(df_coef.coef)\ndf_coef.sort_values(['abs_coef'], ascending = False)","c1d7ae05":"list(np.array(df_coef[df_coef.coef == 0].col))","a082a65b":"cols_4del = list(np.array(df_coef[df_coef.coef == 0].col))\ncols_4del","32bbba59":"X_train.drop(cols_4del, axis = 1, inplace = True)\nX_test.drop(cols_4del, axis = 1, inplace = True)","88a67c7c":"model = LogisticRegression(max_iter = 2000, class_weight='balanced', random_state = RANDOM_SEED)\nmodel.fit(X_train, y_train)\nmi_drop0coef = ModelInspect(model, X_test, y_test)","b150c15e":"pd.concat([mi_balanced.get_metrics(),mi_drop0coef.get_metrics()], axis = 1)","f2f1a93a":"mi_drop0coef.confusion_matrix_plot()","d0aba4d2":"mi_balanced.confusion_matrix_plot()","96d36c4f":"np.logspace(-2, 0, 20)","fae26f37":"C = np.logspace(-1, 3, 10)\niter_ = 1000\nepsilon_stop = 1e-3\n \nhyperparameters = [\n    {'penalty': ['l1'], \n     'C': C,\n     'solver': ['liblinear', 'saga'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['l2'], \n     'C': C,\n     'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['none'], \n     'C': C,\n     'solver': ['newton-cg', 'lbfgs', 'sag', 'saga'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['elasticnet'], \n     'C': C,\n     'solver': ['saga'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n]","345f256a":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n# \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043b\u043e\u0433 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f), \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nmodel = LogisticRegression(class_weight = 'balanced', random_state = RANDOM_SEED)","fef3b466":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\ngridsearch = GridSearchCV(model, hyperparameters, scoring='f1', n_jobs=-1, cv=5)\ngridsearch.fit(X_train, y_train)\nmodel_best_params = gridsearch.best_estimator_\n\n# \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nbest_params = model_best_params.get_params()\nprint(f'\u041b\u0443\u0447\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:') \nfor param_name in best_params.keys():\n        print(f'  {param_name} = {best_params[param_name]},')","b08dd920":"mi_bestparams = ModelInspect(model_best_params, X_test, y_test)","2b6f4643":"mi_bestparams.roc_curve_plot()","fd2adde1":"metrics = pd.concat([mi_drop0coef.get_metrics(), mi_bestparams.get_metrics()],axis = 1)\nmetrics.columns = ['last iter', 'best params']\nmetrics","6a32e060":"mi_bestparams.confusion_matrix_plot()","574b0a41":"mi_drop0coef.confusion_matrix_plot()","34f9b39b":"mi_bestparams.recall_precision_plot()","1a7b7398":"# \u0437\u0430\u043d\u043e\u0432\u043e \u0441\u043e\u0431\u0438\u0440\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\nX = pd.concat([data_num, data_cat, data[bin_cols], data['Train'], data['default']], axis = 1)\nY = data['default'].values\n\ncol = 'income'\nminb, maxb = NumFitInspect(X.loc[:, [col]], col).boundaries()\nmean = X[col].mean()\nX[col] = X[col].apply(lambda x : x if ((x >= minb) & (x <= maxb)) else mean)\n\ntrain_data = X.query('Train == 1').drop(['Train'], axis=1)\ntest_data = X.query('Train == 0').drop(['Train'], axis=1)\n\ny = train_data.default.values            \nX = train_data.drop(['default'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n\nX_train.drop(cols_4del, axis = 1, inplace = True)\nX_test.drop(cols_4del, axis = 1, inplace = True)","df167ce2":"X.drop(cols_4del, axis = 1, inplace = True)","13a2511b":"# \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n\n# \u0431\u0435\u0437 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\nmodel0 = LogisticRegression(\n  C = 1,\n  class_weight = 'balanced',\n  dual = False,\n  fit_intercept = True,\n  intercept_scaling = 1,\n  l1_ratio = None,\n  max_iter = 50,\n  multi_class = 'auto',\n  n_jobs = None,\n  penalty = 'l2',\n  random_state = 42,\n  solver = 'liblinear',\n  tol = 0.001,\n  verbose = 0,\n  warm_start = False\n)","cf3bd5b9":"model1 = LogisticRegression(\nC = 0.021544346900318832,\n  class_weight = 'balanced',\n  dual = False,\n  fit_intercept = True,\n  intercept_scaling = 1,\n  l1_ratio = None,\n  max_iter = 50,\n  multi_class = 'auto',\n  n_jobs = None,\n  penalty = 'l2',\n  random_state = 42,\n  solver = 'liblinear',\n  tol = 0.001,\n  verbose = 0,\n  warm_start = False\n)","2f81deea":"# \u0438\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f kfold \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \nfrom sklearn.model_selection import cross_val_score","44d9e685":"# \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 F1 \u0434\u043b\u044f 10 \u0444\u043e\u043b\u0434\u043e\u0432.\nscores0 = cross_val_score(model0, X, y, cv=10, scoring='f1')\nscores1 = cross_val_score(model1, X, y, cv=10, scoring='f1')","1f7351aa":"x = np.arange(1,11)\n\nfig, ax = plt.subplots(1, 1, figsize = (10,5))\nplt.plot(x, scores0, label = 'C = 1.0', linewidth=10)\nplt.plot(x, scores1, label = 'C = 0.278', linewidth=3)\nplt.legend(loc = 'lower left')\nplt.title('\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u0440\u0430\u0437\u043d\u043e\u0439 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439')\nplt.ylabel('\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 F1')\nplt.xlabel('\u043d\u043e\u043c\u0435\u0440 \u0444\u043e\u043b\u0434\u0430')\nax.set_xticks(x)\nyticks = np.arange(0.32, 0.36, 0.002)\nax.set_yticks(yticks)\nax.grid(True)","65ef1f54":"# \u0437\u0430\u043d\u043e\u0432\u043e \u0441\u043e\u0431\u0438\u0440\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\nX = pd.concat([data_num, data_cat, data[bin_cols], data['Train'], data['default']], axis = 1)\nY = data['default'].values\n#X.drop(['app_cnt'], axis = 1, inplace = True)\n\n\n#col = 'income'\n#minb, maxb = NumFitInspect(X.loc[:, [col]], col).boundaries()\n#mean = X[col].mean()\n#X[col] = X[col].apply(lambda x : x if ((x >= minb) & (x <= maxb)) else mean)\n\ntrain_data = X.query('Train == 1').drop(['Train'], axis=1)\ntest_data = X.query('Train == 0').drop(['Train'], axis=1)\n\ny = train_data.default.values            # \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\nX = train_data.drop(['default'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n\n#X_train.drop(cols_4del, axis = 1, inplace = True)\n#X_test.drop(cols_4del, axis = 1, inplace = True)","edfc9d26":"#Cs_ = np.linspace(0.005, 0.006, 100)\nCs_ = np.logspace(-4, 4, 100)","2acafa45":"from sklearn.linear_model import LogisticRegressionCV\n\nmodel = LogisticRegressionCV(\n  Cs = Cs_,\n  cv = 5,\n  scoring = 'f1',\n  solver = 'saga',\n  tol = 0.0001,\n  max_iter = 1000,   \n  class_weight = 'balanced',\n  n_jobs = -1,\n  random_state = 42,\n)\n\nmodel.fit(X_train, y_train)","ac26f4c6":"model.C_","3d2a9aac":"mi_CV = ModelInspect(model, X_test, y_test)\nmi_CV.roc_curve_plot()","238dab93":"metrics = pd.concat([mi_bestparams.get_metrics(), mi_CV.get_metrics(), ],axis = 1)\nmetrics.columns = ['best params', 'CV']\nmetrics","26971ce7":"mi_CV.confusion_matrix_plot()","6fb36d49":"mi_bestparams.confusion_matrix_plot()","2124c25a":"# \u0437\u0430\u043d\u043e\u0432\u043e \u0441\u043e\u0431\u0438\u0440\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\nX = pd.concat([data_num, data_cat, data[bin_cols], data['Train'], data['default']], axis = 1)\nY = data['default'].values\n\ntrain_data = X.query('Train == 1').drop(['Train'], axis=1)\ntest_data = X.query('Train == 0').drop(['Train'], axis=1)\n\ny = train_data.default.values            # \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\nX = train_data.drop(['default'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n","4679e53b":"from mlxtend.feature_selection import SequentialFeatureSelector as SFS # \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","357f08e3":"'''\n# \u041d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 model = LogisticRegressionCV \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0448\u0430\u0433\u0430 \nsfs = SFS(estimator = model,        \n          k_features = (1, 38),      \n          scoring='f1', \n          forward = True,\n          cv=5)               \n\n# \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043d\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nsfs = sfs.fit(X_train, y_train)\n'''","c59163de":"'''\nprint('\u041b\u0443\u0447\u0448\u0438\u0439 F1 score: %.2f' % sfs.k_score_)   \nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:', len(sfs.k_feature_idx_))                                                    \nprint('\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:', sfs.k_feature_names_) \n'''","8bef694a":"# \u0437\u0430\u043d\u043e\u0432\u043e \u0441\u043e\u0431\u0438\u0440\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\nX = pd.concat([data_num, data_cat, data[bin_cols], data['Train'], data['default']], axis = 1)\nY = data['default'].values\n\ntrain_data = X.query('Train == 1').drop(['Train'], axis=1)\ntest_data = X.query('Train == 0').drop(['Train'], axis=1)\n\ny = train_data.default.values            # \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\nX = train_data.drop(['default'], axis=1)","42a67bd5":"model = LogisticRegressionCV(\n  Cs = Cs_,\n  cv = 5,\n  scoring = 'f1',\n  solver = 'saga',\n  tol = 0.0001,\n  max_iter = 1000,   \n  class_weight = 'balanced',\n  n_jobs = -1,\n  random_state = 42,\n)\n\nmodel.fit(X, y)","bd7e5269":"#model = LogisticRegression(max_iter = 1000, random_state = 42)\n#model.fit(X, y)","52154b1f":"X_test = test_data.drop(['default'], axis=1)\ny_pred_prob = model.predict_proba(X_test)[:,1]\n\nsubmit = pd.DataFrame(data_test.client_id)\nsubmit['default']=y_pred_prob\nsubmit.to_csv('submission.csv', index=False)","0f5e1f8f":"from imblearn.under_sampling import RandomUnderSampler","1ab2ab21":"# \u0437\u0430\u043d\u043e\u0432\u043e \u0441\u043e\u0431\u0438\u0440\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\nX = pd.concat([data_num, data_cat, data[bin_cols], data['Train'], data['default']], axis = 1)\nY = data['default'].values\n\ntrain_data = X.query('Train == 1').drop(['Train'], axis=1)\ntest_data = X.query('Train == 0').drop(['Train'], axis=1)\n\ny = train_data.default.values            # \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\nX = train_data.drop(['default'], axis=1)","1dab8344":"X.info()","b8867a7d":"rus = RandomUnderSampler(random_state=42)\nX_us, y_us = rus.fit_resample(X, y)","5d02b169":"(X_us.shape, y_us.shape)","9274e199":"print(len(y_us[y_us == 0]), len(y_us[y_us == 1]))","4460a7d5":"X_train, X_test, y_train, y_test = train_test_split(X_us, y_us, test_size=0.1, random_state=42)","7ea404e3":"Cs_ = np.logspace(-4, 4, 100)\nmodel_us = LogisticRegressionCV(\n  Cs = Cs_,\n  cv = 5,\n  scoring = 'f1',\n  solver = 'saga',\n  tol = 0.0001,\n  max_iter = 1000,   \n  class_weight = 'balanced',\n  n_jobs = -1,\n  random_state = 42,\n)\n\nmodel_us.fit(X_train, y_train)","63a6ed4a":"mi_us = ModelInspect(model_us, X_test, y_test)\nmi_us.roc_curve_plot()","536e0215":"mi_us.get_metrics()","0da9457d":"mi_us.confusion_matrix_plot()","9b05e43c":"mi_us.recall_precision_plot()","7a117c16":"model_us = LogisticRegressionCV(\n  Cs = Cs_,\n  cv = 5,\n  scoring = 'f1',\n  solver = 'saga',\n  tol = 0.0001,\n  max_iter = 1000,   \n  n_jobs = -1,\n  random_state = 42,\n)\n\nmodel_us.fit(X_us, y_us)","0c9f4342":"model_us.C_","a3c6b59c":"X_test = test_data.drop(['default'], axis=1)\n\ny_pred_prob = model_us.predict_proba(X_test)[:,1]\n\nsubmit = pd.DataFrame(data_test.client_id)\nsubmit['default']=y_pred_prob\n","ac3823f5":"submit.to_csv('submission_us.csv', index=False)","204cbf2f":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438","5100142d":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0442\u0430\u043b \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c. <br>\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","c8132848":"### 4.4. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","0144d6d7":"# 5. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a ML","bd918083":"## 8.1. \u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f","438eac5d":"\u041f\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043e\u0448\u0438\u0431\u043e\u043a \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c.","c104e9b1":"\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 education \u0438 region_rating \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","aba11d7f":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438.","6b2fd150":"# 6. \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","50030725":"#### \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c ROC-\u043a\u0440\u0438\u0432\u0443\u044e","edcb35e9":"***\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e app_cnt*** : \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0435, \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u0431\u0440\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435 \u043c\u043d\u043e\u0433\u043e, \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0445 \u0443\u0434\u0430\u043b\u044f\u0442\u044c.","09370578":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 month \u0438 days_from_ny \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u043e-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445, month, \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u043c.","ebaefe63":"\u041c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438, \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u0430\u0441\u044c, \u043c\u0435\u0442\u0440\u0438\u043a\u0438 recall \u0438 f1 \u043e\u0447\u0435\u043d\u044c \u0432\u043e\u0437\u0440\u043e\u0441\u043b\u0438, \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e\u0441\u044c. \u041e\u0434\u043d\u0430\u043a\u043e \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u043e\u0434\u0430 (\u043d\u0435-\u0434\u0435\u0444\u043e\u043b\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a \u0434\u0435\u0444\u043e\u043b\u0442). \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0442\u0430\u043a\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u043d\u043a \u0440\u0438\u0441\u043a\u0443\u0435\u0442 \u043d\u0435\u0434\u043e\u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0438\u0431\u044b\u043b\u044c. \u041d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u043e\u043b\u043e\u0442\u0443\u044e \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0443.","f8f30e52":"#### 4.3.1. age","c70147d3":"***\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f age***: \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442, \u0432\u0437\u044f\u043b\u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","6df9dbc5":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0442\u043e\u0433\u043e, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d. \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u043d\u0430 \u043d\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c. <br>\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f default","ea584168":"### Submission","e2f8abfd":"\u041f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u043e\u0441\u044c.","3cc6aeef":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a region_rating \u043f\u043e\u0445\u043e\u0436 \u0441\u043a\u043e\u0440\u0435\u0435 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439, \u0447\u0435\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u043a\u0430\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439.","7e8629ca":"#### 4.3.6. app_cnt","029888a3":"\u0418\u0442\u0430\u043a, \u043c\u044b \u0441\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 app_data:\n- month - \u043c\u0435\u0441\u044f\u0446 \u0437\u0430\u044f\u0432\u043a\u0438\n- days_from_ny - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 01.01.2014\n- app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0434\u043d\u0435\n","d08b3e65":"Confusion matrix","6899fc20":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432 \u043e\u0431\u044a\u0435\u043c\u0435. \u041c\u043e\u0436\u0435\u0442 \u0442\u0430\u043c \u0443\u0434\u0430\u0441\u0442\u0441\u044f \"\u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0449\u0443\u044e \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u044c\"","02d51aa1":"- c\u0430\u043c\u044b\u0439 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - sna;\n- \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - sex","2d107b35":"\u0412 \u043f\u043e\u043b\u0435 education \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. <br>\n\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 default - \u0443 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0438\u0445 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c. <br>\ndefault - \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.","8d7b3a18":"\u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438.","17bce2f1":"\u041f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f  \u043f\u0440\u0438\u0437\u043d\u0430\u043a age \u0441\u0442\u0430\u043b \u043c\u0435\u043d\u0435\u0435 \u0441\u043c\u0435\u0449\u0451\u043d\u043d\u044b\u043c\u0438. ","cb374d4e":"***\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e income*** : \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0432\u0437\u044f\u043b\u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u043e\u0441\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0438\u0445 \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u043b\u0438\u044f\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c.","1e3b2565":"\u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 imbalanced-learn","650c6721":"\u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 l1 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b.","97b0a9c5":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","27f57366":"\u041a\u0440\u0430\u0441\u0438\u0432\u043e\u0439 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0449\u0435\u0439 \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u0438 (\u0434\u0430\u0436\u0435 \u043a\u0440\u0438\u0432\u043e\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439) \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f. \u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u043e\u0435.","11ca24dc":"#### \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c","5fe3a1d7":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","3814f4fc":"#### \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439","db6c8954":"\u041d\u0430 \u0441\u044d\u043c\u043f\u043b\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0412\u044b\u0432\u043e\u0434: \u043c\u0435\u0442\u043e\u0434 Undersampling \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 ))","b423c187":"\u0417\u0430\u044f\u0432\u043a\u0438 \u043f\u043e \u0434\u043d\u044f\u043c \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e. \u0421\u0438\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043a\u043e\u0441\u043e\u0432 \u043d\u0435\u0442.","2b532949":"\u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a decline_flag \u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c, \u0447\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 decline_app_cnt, \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.","c0d4c432":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u043e\u0441\u044c.","4ab88954":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445","986b76cb":"\u041c\u044b \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c \u0441\u0438\u043b\u044c\u043d\u043e\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435. \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","a37fb886":"4.3.3. income","a0f6ec73":"\u0421\u0430\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: score_bki, income, sna. <br>\n\u041d\u0430\u0438\u043c\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435: age \u0438 sex. <br>\n\u0427\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043f\u043e\u043b\u043d\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c.","d4fa18ba":"# 9. \u0412\u044b\u0432\u043e\u0434\n- \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c recall \u0432 ~ 20 \u0440\u0430\u0437. <br>\n- \u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u0430\u0441\u044c, \u043c\u044b \u043b\u0443\u0447\u0448\u0435 \u0441\u0442\u0430\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043e\u0434\u043d\u0430\u043a\u043e \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u043e\u0434\u0430 (\u043d\u0435-\u0434\u0435\u0444\u043e\u043b\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a \u0434\u0435\u0444\u043e\u043b\u0442). \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0442\u0430\u043a\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u043d\u043a \u0440\u0438\u0441\u043a\u0443\u0435\u0442 \u043d\u0435\u0434\u043e\u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0438\u0431\u044b\u043b\u044c.\n- Precision \u0438 F1 \u0442\u0430\u043a\u0436\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043b\u0438\u0441\u044c. <br>\n- \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 AUC \u043f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043e\u0441\u043e\u0431\u043e \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b, \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0434\u043b\u044f \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u044d\u0442\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f. ","fe90bb2e":"\u0414\u0435\u0444\u043e\u043b\u0442\u044b \u0438 \u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u044b \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0437\u043c\u0430\u0437\u0430\u043d\u044b \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u043e\u0434\u043d\u0443 \u043f\u0430\u0440\u0443 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.","44d5030e":"# 4. \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","20821c76":"# 1. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","48a712e6":"\u042f \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0434\u043e\u043b\u0433\u043e \u0438\u0433\u0440\u0430\u043b\u0430 \u0441 \u043f\u043e\u0434\u0431\u043e\u0440\u043e\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430: \u043e\u0442 \u0441\u043b\u0430\u0431\u043e\u0439 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0421>50 \u0434\u043e \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e\u0439 c C < 1. <br>\n\u0420\u0435\u0448\u0438\u043b\u0430 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0421 = 0,278. \u041d\u043e \u0435\u0441\u0442\u044c \u0440\u0438\u0441\u043a \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e. ","43f41b2a":"***\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0435\u0437 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438:*** \u043d\u0435 \u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f ROC_AUC \u0438 accuracy \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u0438, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f recall \u0438 F1 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u043d\u0438\u0437\u043a\u0430\u044f, \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u043e\u0434\u0430 (\u043b\u043e\u0436\u043d\u043e \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435, \u0434\u0435\u0444\u043e\u043b\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a \u043d\u0435-\u0434\u0435\u0444\u043e\u043b\u0442) \u043e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0430. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0442\u0430\u043a\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u043d\u043a \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0435\u0441\u0442\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0443\u0431\u044b\u0442\u043a\u0438. <br>\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c:\n- \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c;\n- \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044e.","9a808f54":"#### 4.3.2. decline_app_cnt","dc819bad":"### 4.3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","450b0c09":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 decline_app_cnt \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a:\n- \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439: \u0431\u044b\u043b\u043e \u0438\u043b\u0438 \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0442\u043a\u0430\u0437\u043e\u0432","edaefbaf":"\u0424\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0437\u0430\u0433\u0440\u0430\u043d-\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 SFS \u043d\u0435 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0441\u044f. \u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442 \u043d\u0430 \u0441\u044d\u043c\u043f\u043b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b.","e1c115bf":"***\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e days_from_ny*** : \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e. \u0412\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442. \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e.","76d5a4e2":"# \u041f\u0440\u043e\u0435\u043a\u0442 4. \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 '\u041d\u0435\u0442'","4df16a1d":"\u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438 \u0421 = 0,278 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0435\u043b\u044c\u0437\u044f \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442 (\u043d\u0430 1 \u043b\u043e\u0436\u043d\u043e-\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0430\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435). \u041d\u0443, \u0442\u043e\u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 ).\n\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0421.","9a43b785":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0441\u0442\u0430\u043b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d default","f5448960":"# 8.3. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u044e\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 f1","933ed820":"\u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430. <br>\n\u0414\u043b\u044f \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043c\u043e\u0434\u0435\u043b\u0438\n- class_weight = 'balanced' - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u043b\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n","f51620ed":"\u041f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a income \u0441\u0442\u0430\u043b \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u043c\u0435\u043d\u0435\u0435 \u0441\u043c\u0435\u0449\u0451\u043d\u043d\u044b\u043c\u0438. <br>\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","47c04a8f":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 01.01.2014.","7a64ff7d":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0443","85bb2dac":"\u0412 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435. \u041d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f.","2e0d096e":"# 10. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c undersampling","a56f1e3a":"***\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e score_bki*** : \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043d\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0435, \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u0431\u0440\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435 \u043c\u043d\u043e\u0433\u043e, \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0445 \u0443\u0434\u0430\u043b\u044f\u0442\u044c. \u0421\u043e\u0437\u0434\u0430\u043b\u0438 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a score_bki_abslog","be722698":"\u0422\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b\u0438 \u0441\u0438\u043b\u044c\u043d\u0443\u044e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044e, \u0442\u043e \u0432\u0435\u043b\u0438\u043a \u0440\u0438\u0441\u043a, \u0447\u0442\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0438\u043b\u0430\u0441\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e","76832894":"\u0412\u0441\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043f\u043e\u0434\u0430\u043d\u044b \u0432 2014 \u0433\u043e\u0434\u0443.","0e180ff9":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 num_cols","742ddc48":"#### \u041e\u0434\u043d\u0430\u043a\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438","f891b55a":"# 2. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","54ef1906":"\u0413\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043d\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u043b\u0430\u0441\u044c. \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u0430 \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435. \u041e\u0434\u043d\u0430\u043a\u043e AUC \u043f\u043e\u0434\u0440\u043e\u0441. \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0434\u043b\u044f \u0441\u044d\u043c\u043f\u043b\u0430 \u0421 = 0.278. \u041f\u0440\u0438 \u043d\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 AUC \u043d\u0430 \u0441\u044d\u043c\u043f\u043b\u0435, \u0430 \u0443 \u043d\u0430\u0441 \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 ).","6d28d1d4":"\u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u0434\u043d\u043e\u0444\u0430\u043a\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 (ANOVA))\n\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e f_classif \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn.\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0440\u044b \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 f -\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0427\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u044b\u0448\u0435, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f, \u0438 \u0442\u0435\u043c \u0432\u0430\u0436\u043d\u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.","a1c1001b":"\u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Synthetic Minority Oversampling Technique (SMOTE) \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 imblearn","acb6de3f":"- \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - score_bki;\n- \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 - age \u0438 app_cnt","61734090":"\u0412\u0441\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u0435\u0436\u0434\u0443 4 \u043c\u0435\u0441\u044f\u0446\u0430\u043c\u0438.","79eadded":"### 4.1. \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 education","0fef91e5":"#### \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","91621f3c":"### 4.2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c app_date","a55e1b71":"## 8.2. LogisticRegressionCV","e5e6fb62":"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 LogisticRegressionCV \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u043e\u0436\u043d\u043e-\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 (\u043e\u0442\u043a\u0430\u0437\u043e\u0432) \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u043e\u0441\u044c \u043d\u0430 14, \u0430 \u043b\u043e\u0436\u043d\u043e-\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043d\u0430 4.","9fa4549c":"\u041d\u0430 undersampling \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a \u043e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0438\u0435. \u041c\u044b \u0443\u0432\u0438\u0434\u0435\u043b\u0438, \u043a\u0430\u043a \u0432\u0430\u0436\u043d\u0430 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438.","9fa15753":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442.","d575a8e6":"\u041d\u0443\u043b\u0435\u0432\u044b\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 'region_rating_3', 'sna_2', 'first_time_1' \"\u043d\u0435 \u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f\" \u043c\u043e\u0434\u0435\u043b\u0438, \u0438\u0445 \u0432\u043f\u043e\u043b\u043d\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c.","97306fac":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c:","9ee2d3e3":"\u0421\u043f\u0435\u0440\u0432\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b:","ec0100e7":"# 8. \u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438","4f5bbc74":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043d\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0435. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","2e32afb5":"# 7. \u0420\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u0441\u043e \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c\u044e default","5bf2c26c":"\u041c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 default = {0,1} \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e. <br>\n\u0418\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u044d\u0442\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c.","80725673":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0447\u0435\u043d\u044c \u0441\u043c\u0435\u0449\u0435\u043d. \u041c\u043d\u043e\u0433\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432. <br> \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 log(income)","56c8aca6":"\u041c\u0435\u0442\u0440\u0438\u043a\u0430 ROC_AUC - \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u0435\u043b\u0438\u043a\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u0434\u0430\u0436\u0435 \u0431\u0435\u0437 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043e\u0442\u0431\u043e\u0440\u0430 \u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430\u043c \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u0447\u044c\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u043b\u0430 \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u044f.","66f5751e":"\u0412 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0432\u0441\u0435\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043a\u0440\u0430\u0439\u043d\u0435 \u043d\u0435 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043d\u0435 \u0443\u0434\u0430\u0441\u0442\u0441\u044f.","ab918f42":"***\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e decline_app_cnt*** : \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0435 (\u0442\u0430\u043a, \u0447\u0442\u043e \u0434\u0430\u0436\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u043e \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b\u043e), \u0432\u0437\u044f\u043b\u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0434\u0430\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0438\u0445 \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u043b\u0438\u044f\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c. <br>\n\u0421\u043e\u0437\u0434\u0430\u043b\u0438 \u043d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","52952bfb":"\u041c\u0443\u0441\u043e\u0440\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0442. <br>\n\u0412 \u043f\u043e\u043b\u0435 education \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. <br>\n\u041f\u043e\u043b\u0435 app_date \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0430\u0442\u0443. \u041a\u0430\u043a \u0435\u0441\u0442\u044c, \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f. \u0421\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u0443\u0435\u043c \u043d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","fec70170":"\u041a\u0440\u0438\u0432\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 precision \u043e\u0442 recall","6f0fc757":"# 3. \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","c4b0239c":"4.3.6. score_bki","6c59bc4e":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0442\u0430\u043b \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c. <br>\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","bec11581":"4.3.5. bki_request_cnt","4d58f3e0":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0435\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (default = 0 \u0432 \u0440\u0430\u0437\u044b \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c default = 1) \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 undersampling \u2014 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430-\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430","251f17b4":"\u041f\u043e\u043b\u0435 client_id - \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f. \u0421\u043c\u044b\u0441\u043b\u043e\u0432\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0435 \u043d\u0435\u0441\u0435\u0442, \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.","64eb6cac":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n- client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n- education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n- sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n- decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n- good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n- bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n- home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n- sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n- first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n- score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n- region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n- app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n- default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443\n\n\u0412 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 73799 \u0437\u0430\u043f\u0438\u0441\u0435\u0439, \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 - 36349. \u0412\u0441\u0435\u0433\u043e 19 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (18 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 + \u0446\u0435\u043b\u0435\u0432\u0430\u044f).","ccc7fad2":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c LogisticRegressionCV \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u043e\u0440\u0432.","217c143f":"#### \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 20% \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e","cc2f5db7":"***\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e bki_request_cnt*** : \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0432\u0437\u044f\u043b\u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u043e\u0432 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u043e\u0441\u044c, \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0445 \u0443\u0434\u0430\u043b\u044f\u0442\u044c.","80ea58aa":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0447\u0435\u043d\u044c \u0441\u043c\u0435\u0449\u0435\u043d. \u041c\u043d\u043e\u0433\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432. <br>\n\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","979bec4c":"# Submission","edb59de2":"4.3.4. days_from_ny","47029226":"# 7.1. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b"}}