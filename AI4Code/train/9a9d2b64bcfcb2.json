{"cell_type":{"9c45937f":"code","df495898":"code","7b28387f":"code","357ae712":"code","319bed3c":"code","77ee56b5":"code","4c62c5e1":"code","33c0f442":"code","2f8b1ce5":"code","f68a96ba":"code","b5d11e32":"code","bfa76494":"code","e7ce0220":"code","6be035a0":"code","436cf346":"code","47f59242":"code","32944ea9":"code","085b6976":"code","187607c2":"code","b38b1b18":"code","6433f6f4":"code","70d9493b":"code","6d6a455e":"markdown","c1f4a308":"markdown","4e3436cd":"markdown","2ae0808a":"markdown","87eb3113":"markdown","eb6b2b2e":"markdown","6c95fe38":"markdown","f5db765c":"markdown","80bc9d7f":"markdown","ff549f12":"markdown","8d5c3405":"markdown","5a14dae0":"markdown","806218d9":"markdown","c5bd99c4":"markdown","6e9f20ea":"markdown","780b6fba":"markdown"},"source":{"9c45937f":"!apt-get install p7zip\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/test.tsv.7z\n# !p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission.csv.7z\n# !unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission_stg2.csv.zip\n!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip","df495898":"#Import th\u01b0 vi\u1ec7n :\nimport numpy as np \nimport pandas as pd \nimport time\nimport lzma\nimport os\nfrom scipy import stats, integrate\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport csv\nimport re\n\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score","7b28387f":"#\u0111\u1ecdc d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o :\ntrain = pd.read_csv('train.tsv', sep='\\t')\ntest = pd.read_csv('test_stg2.tsv', sep='\\t')\nprint(\"train data: \",train.shape)\nprint(\"test data: \",test.shape)","357ae712":"#Th\u00f4ng tin t\u1ec7p train \ntrain.info()","319bed3c":"# danh s\u00e1ch 10 m\u1eb7t h\u00e0ng \u0111\u1ea7u ti\u00ean : \ntrain.head(10)","77ee56b5":"# ki\u1ec3m tra thong tin \u1edf t\u1ec7p test \ntest.info()","4c62c5e1":"test.head(10)","33c0f442":"# Th\u1ed1ng k\u00ea m\u1eb7t h\u00e0ng theo nh\u00e3n hi\u1ec7u:\nunique_brands = train['brand_name'].value_counts()\nprint(\"T\u1ed5ng s\u1ed1 nh\u00e3n hi\u1ec7u l\u00e0 {}\".format(len(unique_brands)))\nplt.figure(figsize=(20, 5))\nsns.barplot(unique_brands.index[1:10], unique_brands[1:10])\nplt.xlabel('T\u00ean th\u01b0\u01a1ng hi\u1ec7u')\nplt.ylabel('S\u1ed1 s\u1ea3n ph\u1ea9m')\nplt.show()","2f8b1ce5":"#\u0110\u00e1nh gi\u00e1 v\u1ec1 gi\u00e1 b\u00e1n :\nfig, ax = plt.subplots(figsize=(10,6))\nax.hist(train.price,bins = 30, range = [min(train.price), max(train.price)],label=\"Price\")\nax.set_xlabel('Price',fontsize=15)\nplt.show()","f68a96ba":"fig, ax = plt.subplots(figsize=(10,6))\nax.hist(np.log1p(train['price']),bins = 30, range = [min(np.log1p(train['price'])), max(np.log1p(train['price']))],label=\"Price\")\nax.set_xlabel('log(Price)',fontsize=15)\nplt.show()","b5d11e32":"count = train['item_condition_id'].value_counts()\nplt.figure(figsize=(10, 5))\nsns.barplot(count.index[:5], count[:5])\nplt.ylabel('S\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m')\nplt.xlabel('\u0110i\u1ec1u ki\u1ec7n s\u1ea3n ph\u1ea9m')","bfa76494":"count = train['shipping'].value_counts()\nplt.figure(figsize=(10, 5))\nsns.barplot(count.index[:2], count[:2])\nplt.ylabel('S\u1ed1 l\u01b0\u1ee3ng')\nplt.xlabel('Ph\u00ed ship')","e7ce0220":"def split_cat(text):\n    try: return text.split(\"\/\")\n    except: return (\"None\", \"None\", \"None\")\ntrain['category_1'], train['category_2'], train['category_3'] = \\\nzip(*train['category_name'].apply(lambda x: split_cat(x)))\ntest['category_1'], test['category_2'], test['category_3'] = \\\nzip(*test['category_name'].apply(lambda x: split_cat(x)))\n\n#coi l\u1ea1i d\u1eef li\u1ec7u sau khi t\u00e1ch\ntrain.head(5)\n","6be035a0":"train.isnull().sum()","436cf346":"test.isnull().sum()","47f59242":"def handle_missing(dataset):\n    dataset.brand_name.fillna(value=\"None\", inplace=True)\n    dataset.item_description.fillna(value=\"None\", inplace=True)\n    dataset.category_name.fillna(value=\"None\", inplace=True)\n    return (dataset)\n\ntrain = handle_missing(train)\ntest = handle_missing(test)","32944ea9":"#ki\u1ec3m tra d\u1eef li\u1ec7u c\u00f2n null kh\u00f4ng \ntrain.isnull().sum()","085b6976":"#Nh\u00f3m t\u00ean s\u1ea3n ph\u1ea9m theo gi\u00e1 c\u1ee7a n\u00f3 \ndef create_price_d(grouped, operation_name, orig_colname):\n    price_d = {}\n    for index, row in grouped.iterrows():\n        price_d[row[orig_colname]] = row['price']\n    return {orig_colname + \"_\" + operation_name: price_d}\n\n\n# T\u1ea1o ra d\u1eef li\u1ec7u \u0111\u1ec3 tra c\u1ee9u gi\u00e1 theo t\u00ean s\u1ea3n ph\u1ea9m\nprice_d = {}    \nfor col in ['brand_name','category_1','category_2','category_3' ,'category_name']:\n    price_d.update(create_price_d(train.groupby(col, as_index=False).min(), 'min', col))\n    price_d.update(create_price_d(train.groupby(col, as_index=False).median(), 'median', col))\n    price_d.update(create_price_d(train.groupby(col, as_index=False).mean(), 'mean', col))\n    price_d.update(create_price_d(train.groupby(col, as_index=False).max(), 'max', col))\n\n    \n#\u0110\u01b0a c\u00e1c c\u1ed9t ch\u1ee9a gi\u00e1 s\u1ea3n ph\u1ea9m v\u00e0o data\ndef price_dt(dt, pricedicts):\n    for col in ['brand_name','category_1','category_2','category_3','category_name']:\n        for oper in ['_min', '_median', '_mean', '_max']:\n            dt[col + oper] = dt[col].map(price_d[col + oper])\n            dt[col + oper] = dt[col + oper].fillna(price_d[col + oper].get('Unknown', 5))\n\nprice_dt(train, price_dt)\nprice_dt(test, price_dt)","187607c2":"train.head(5)","b38b1b18":"col = ['item_condition_id', \n       'shipping', \n      'brand_name_min', \n       'brand_name_max', \n       'brand_name_median', \n       'brand_name_mean', \n      'category_name_min', \n       'category_name_max', \n       'category_name_median', \n       'category_name_mean'\n      ]\n\ntrain_col = train[col]\ntrain_pr = train[['price']]\n\ntest_col = test[col]","6433f6f4":"#Train m\u00f4 h\u00ecnh s\u1eed d\u1ee5ng linear regression\nregr = linear_model.LinearRegression()\nregr.fit(train_col, train_pr)\n\n# T\u1ea1o ra d\u1ef1 \u0111o\u00e1n gi\u00e1 tr\u00ean t\u1eadp test\ntest['price'] = regr.predict(test_col)\n\n#\u0110\u01b0a nh\u1eefng d\u1ef1 \u0111o\u00e1n gi\u00e1 nh\u1ecf h\u01a1n 0 v\u1ec1 0\ntest.loc[test.price < 0, 'price'] = 0\n","70d9493b":"submission_col = test[['test_id', 'price']]\nsubmission_col.to_csv('submission.csv', index=False)\nsubmission_col","6d6a455e":"**Ridge Regression** \n\nRidge Regression l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt \u0111\u1ec3 ph\u00e2n t\u00edch d\u1eef li\u1ec7u h\u1ed3i quy nhi\u1ec1u l\u1ea7n. Khi x\u1ea3y ra \u0111a c\u1ed9ng tuy\u1ebfn, c\u00e1c \u01b0\u1edbc l\u01b0\u1ee3ng b\u00ecnh ph\u01b0\u01a1ng nh\u1ecf nh\u1ea5t l\u00e0 kh\u00f4ng ch\u1ec7ch. M\u1ed9t m\u1ee9c \u0111\u1ed9 ch\u1ec7ch \u0111\u01b0\u1ee3c th\u00eam v\u00e0o c\u00e1c \u01b0\u1edbc t\u00ednh h\u1ed3i quy v\u00e0 k\u1ebft qu\u1ea3 l\u00e0 h\u1ed3i quy s\u01b0\u1eddn n\u00fai l\u00e0m gi\u1ea3m c\u00e1c sai s\u1ed1 ti\u00eau chu\u1ea9n.\n","c1f4a308":"**LightGBM**\n\nLightGBM vi\u1ebft t\u1eaft c\u1ee7a Light Gradient Boosting Machine, l\u00e0 m\u00e3 ngu\u1ed3n m\u1edf x\u1eed l\u00fd thu\u1eadt to\u00e1n t\u0103ng c\u01b0\u1eddng \u0111\u1ed9 d\u1ed1c (Gradient Boosting) \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Microsoft. Gradient Boosting l\u00e0 m\u1ed9t thu\u1eadt to\u00e1n xu\u1ea5t ph\u00e1t t\u1eeb thu\u1eadt to\u00e1n C\u00e2y quy\u1ebft \u0111\u1ecbnh (Decision Tree), n\u00f3 th\u1ef1c hi\u1ec7n vi\u1ec7c x\u00e2y d\u1ef1ng tu\u1ea7n t\u1ef1 nhi\u1ec1u C\u00e2y quy\u1ebft \u0111\u1ecbnh v\u00e0 ti\u1ebfn h\u00e0nh h\u1ecdc t\u1eadp.","4e3436cd":"-Gi\u1ea3i n\u00e9n d\u1eef li\u1ec7u :","2ae0808a":"-check s\u1eef li\u1ec7u trong t\u1eadp train v\u00e0 test c\u00f3 null kh\u00f4ng ","87eb3113":"-T\u1ec7p train c\u00f3 1482535 s\u1ea3n ph\u1ea9m c\u00f2n \u1edf t\u1ec7p test c\u00f3 3460725 s\u1ea3n ph\u1ea9m \n\n-Ta c\u00f3 th\u1ec3 th\u1ea5y \u0111\u01b0\u1ee3c \u1edf t\u1ec7p train c\u00f3 th\u00eam c\u1ed9t price so v\u1edbi t\u1ec7p test\n\n-Trong danh m\u1ee5c m\u1eb7t h\u00e0ng c\u00f3 nhi\u1ec1u m\u1eb7t h\u00e0ng c\u00f3 d\u1eef li\u1ec7u null \u1edf c\u1ed9t brand_name (\u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb l\u00e0 NaN)","eb6b2b2e":"-Ta th\u1ea5y d\u1eef li\u1ec7u null \u1edf t\u1ec7p train v\u00e0 test t\u1eadp trung \u1edf c\u1ed9t category_name ,brand_name v\u00e0 item_description\n\n-X\u1eed l\u00ed d\u1eef li\u1ec7u null:","6c95fe38":"-Ph\u1ea7n l\u1edbn c\u00e1c sp kh\u00f4ng c\u00f3 ph\u00ed ship chi\u1ebfm kho\u1ea3ng 55% c\u00f2n l\u1ea1i 45 % kh\u00f4ng c\u00f3 ship","f5db765c":"2.X\u1eed l\u00ed d\u1eef li\u1ec7u :\n\n-\u1ede c\u1ed9t category_name c\u00f3 c\u00e1c m\u1ee5c ph\u00e2n c\u00e1ch b\u1edfi d\u1ea5u '\/' n\u00ean ch\u00fang ta s\u1ebd chia th\u00e0nh 3 c\u1ed9t \u0111\u1ec3 d\u1ec5 x\u1eed l\u00ed","80bc9d7f":"**III.X\u1eec L\u00cd D\u1eee LI\u1ec6U \u0110\u1ea6U V\u00c0O**\n\n1.Ki\u1ec3m tra d\u1eef li\u1ec7u :","ff549f12":"-Ki\u1ec3m tra ph\u00ed ship :","8d5c3405":"-Ta c\u00f3 nhi\u1ec1u m\u1eb7t h\u00e0ng gi\u00e1 t\u1eadp trung d\u01b0\u1edbi 500$ ,ph\u00e2n ph\u1ed1i v\u1ec1 gi\u00e1 b\u1ecb l\u1ec7ch ph\u1ea3i \n\n-S\u1eed d\u1ee5ng h\u00e0m \u0111\u1ed3ng bi\u1ebfn \u0111\u01b0a v\u1ec1 ph\u00e2n b\u1ed1 chu\u1ea9n :","5a14dae0":"**I.M\u00d4 T\u1ea2 B\u00c0I TO\u00c1N :**\n\nB\u00e0i to\u00e1n \u0111\u1ec1 xu\u1ea5t gi\u00e1 m\u1eb7t h\u00e0ng : Vi\u1ec7c \u0111\u1ecbnh gi\u00e1 s\u1ea3n ph\u1ea9m hi\u1ec7n nay kh\u00f3 kh\u0103n tr\u00ean quy m\u00f4 l\u1edbn do c\u00e1c m\u1eb7t h\u00e0ng \u0111\u01b0\u1ee3c \u0111\u1ecbnh gi\u00e1 theo nhi\u1ec1u ph\u01b0\u01a1ng di\u1ec7n kh\u00e1c nhau v\u00ed d\u1ee5 nh\u01b0 qu\u1ea7n \u00e1o \u0111\u1ecbnh gi\u00e1 s\u1ea3n ph\u1ea9m theo m\u00f9a ,c\u00f2n gi\u00e1 c\u1ee7a c\u00e1c s\u1ea3n ph\u1ea9m \u0111i\u1ec7n t\u1eed th\u00ec \u0111\u1ecbnh gi\u00e1 theo th\u00f4ng s\u1ed1 k\u0129 thu\u1eadt c\u1ee7a n\u00f3 . Qua \u0111\u00e2y , Mecari mu\u1ed1n ch\u00fang ta x\u00e2y d\u1ef1ng thu\u1eadt to\u00e1n \u0111\u1ec3 t\u1ef1 \u0111\u1ed9ng \u0111\u1ec1 xu\u1ea5t gi\u00e1 s\u1ea3n ph\u1ea9m ph\u00f9 h\u1ee3p cho ng\u01b0\u1eddi b\u00e1n d\u1ef1a tr\u00ean nh\u1eefng th\u00f4ng tin m\u00e0 h\u1ecd cung c\u1ea5p nh\u01b0 t\u00ean danh m\u1ee5c s\u1ea3n ph\u1ea9m, t\u00ean th\u01b0\u01a1ng hi\u1ec7u v\u00e0 t\u00ecnh tr\u1ea1ng m\u1eb7t h\u00e0ng.","806218d9":"**IV.TH\u1ef0C NGHI\u1ec6M** ","c5bd99c4":"**LinearRegression**\n\nLinear Regression \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 ph\u00e2n t\u00edch d\u1ef1 \u0111o\u00e1n. H\u1ed3i quy tuy\u1ebfn t\u00ednh l\u00e0 m\u1ed9t c\u00e1ch ti\u1ebfp c\u1eadn tuy\u1ebfn t\u00ednh \u0111\u1ec3 m\u00f4 h\u00ecnh h\u00f3a m\u1ed1i quan h\u1ec7 gi\u1eefa ti\u00eau ch\u00ed ho\u1eb7c ph\u1ea3n \u1ee9ng v\u00f4 h\u01b0\u1edbng v\u00e0 nhi\u1ec1u y\u1ebfu t\u1ed1 d\u1ef1 b\u00e1o ho\u1eb7c bi\u1ebfn gi\u1ea3i th\u00edch. H\u1ed3i quy tuy\u1ebfn t\u00ednh t\u1eadp trung v\u00e0o ph\u00e2n ph\u1ed1i x\u00e1c su\u1ea5t c\u00f3 \u0111i\u1ec1u ki\u1ec7n c\u1ee7a ph\u1ea3n h\u1ed3i cho c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c y\u1ebfu t\u1ed1 d\u1ef1 \u0111o\u00e1n. \u0110\u1ed1i v\u1edbi h\u1ed3i quy tuy\u1ebfn t\u00ednh, c\u00f3 nguy c\u01a1 trang b\u1ecb qu\u00e1 m\u1ee9c. C\u00f4ng th\u1ee9c c\u1ee7a h\u1ed3i quy tuy\u1ebfn t\u00ednh l\u00e0: Y = bX + A.\n","6e9f20ea":"-Ki\u1ec3m tra \u0111i\u1ec1u ki\u1ec7n c\u1ee7a s\u1ea3n ph\u1ea9m:","780b6fba":"-Ki\u1ec3m tra d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o : "}}