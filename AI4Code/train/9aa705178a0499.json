{"cell_type":{"b549d4d1":"code","7f00918a":"code","474626a4":"code","6604bdf7":"code","c5349323":"code","414c9346":"code","d23433e3":"code","0db5a59e":"code","a85d3270":"markdown","bd885d6e":"markdown","080b5c5e":"markdown","c0cf3579":"markdown","76447202":"markdown","e96a4811":"markdown"},"source":{"b549d4d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f00918a":"df = pd.read_csv(\"..\/input\/telecommunications\/teleCust1000t.csv\")","474626a4":"X = df[['region', 'tenure', 'age', 'marital', 'address', 'income', 'ed', 'employ', 'retire', 'gender', 'reside']]\ny = df['custcat']\n\nmissing_cols = [col for col in df.columns if df[col].isnull().any()]\nprint(missing_cols)","6604bdf7":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))","c5349323":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)\n","414c9346":"Ks = 6\nmean_acc = np.zeros((Ks - 1))\nstd_acc = np.zeros((Ks - 1))\nfor n in range(1, Ks):\n    # Train Model\n    neigh = KNeighborsClassifier(n_neighbors=n).fit(X_train, y_train)\n    yhat = neigh.predict(X_test)\n    mean_acc[n - 1] = metrics.accuracy_score(y_test, yhat)\n    std_acc[n - 1] = np.std(yhat == y_test) \/ np.sqrt(yhat.shape[0])\n\nprint(mean_acc)","d23433e3":"plt.plot(range(1, Ks), mean_acc, 'g')\nplt.fill_between(range(1, Ks), mean_acc - 1 * std_acc, mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Neighbours (K)')\nplt.tight_layout()\nplt.show()","0db5a59e":"print(\"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax() + 1)\n","a85d3270":"# Feature Scaling","bd885d6e":"# Splitting training and testing dataset","080b5c5e":"# Dependent and Indepent variables","c0cf3579":"# Plot  model accuracy for different number of Neighbours","76447202":"# Modelling with k from 1 to 6 and then storing the accuracy in mean_acc and std_acc","e96a4811":"# Importing dataset"}}