{"cell_type":{"077378c1":"code","93b7a8cd":"code","d468675c":"code","9b878cad":"code","d743fe2d":"code","dd824a69":"code","1dfffb60":"code","28c49c30":"code","43f28672":"code","17979321":"code","c447f107":"code","f9b325dc":"code","e641a013":"code","5c984e12":"code","4efed864":"code","29be58cb":"code","cdf4c756":"code","95575173":"code","17877590":"code","e9543ff0":"code","4fbd9d6c":"code","d0ca867a":"code","cf2404e3":"code","df70b5ec":"code","3770668a":"code","5b567ec2":"code","1db46858":"code","b5a7030e":"code","02e3972a":"code","418eae05":"code","ff12b091":"code","e2fb1aac":"code","6e3e591d":"code","bbf71c35":"code","f69dce4f":"code","2f990767":"code","7b9851e9":"code","87f7d672":"code","ccc175af":"code","7e8330d2":"code","d47c6f7d":"code","0a5a06ea":"code","6d491434":"code","3220e76b":"code","614723dd":"code","b89bf971":"code","d9f2a5bc":"markdown","0621e572":"markdown","2d1aa53b":"markdown","c16f9b82":"markdown","9ff93269":"markdown","a409b4ad":"markdown","2f62551e":"markdown","46a46c66":"markdown","ebf1e8fc":"markdown","e8b2399c":"markdown","5d1aa863":"markdown","dbda74a1":"markdown","4e5c1cfd":"markdown","ec20c0a9":"markdown","e14e8cc5":"markdown","f452bddd":"markdown","50307573":"markdown","8463aa79":"markdown","472b9c84":"markdown"},"source":{"077378c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93b7a8cd":"from matplotlib import pyplot as plt\nimport seaborn as sns\nget_ipython().magic('matplotlib inline')\n\npd.options.display.max_rows = 100","d468675c":"df = pd.read_csv('\/kaggle\/input\/is-this-a-good-customer\/clients.csv')","9b878cad":"df.shape","d743fe2d":"df.head()","dd824a69":"numeric_columns = ['credit_amount', 'credit_term', 'age', 'income']\ncategorical_columns = ['month', 'sex', 'education', 'product_type', 'having_children_flg', 'region', 'family_status', 'phone_operator', 'is_client']","1dfffb60":"df.describe()","28c49c30":"def scale_range(inp, min, max):\n    inp += (-np.min(inp))\n    inp \/= np.max(inp) \/ (max-min)\n    inp += min\n    return inp\n\ndef plot_rate(df, column, target, num_buckets=5):\n    data = pd.DataFrame(df[column], columns=[column,])\n    data['target'] = target\n    tmp_ = data.dropna().groupby(column).agg({'target': ['mean', sum, 'count']})\n    tmp_['index'] = range(tmp_.shape[0])\n    tmp = pd.DataFrame({'index': range(tmp_.shape[0]), 'value': tmp_.index, 'mean': tmp_['target']['mean'], \n                        'sum': tmp_['target']['sum'], 'count': tmp_['target']['count']})\n    breakpoints = np.arange(0, num_buckets+1) \/ (num_buckets) * 100\n    breakpoints = scale_range(breakpoints, np.min(tmp_['index'].values), np.max(tmp_['index'].values))\n    percents = np.histogram(tmp_['index'], breakpoints)[0]\n    \n    l = []\n    for bucket in range(num_buckets):\n        l = l + [bucket] * int(percents[bucket])\n        \n    ll = []\n    if (tmp_.shape[0] > len(l)) | (tmp_.shape == 2):\n        ll = []\n        for j in l:\n            ll.append(j)\n        if tmp.shape[0] > len(ll):\n            tmp['bucket'] = ll + [max(ll)]\n        else:\n            tmp['bucket'] = ll\n    else:\n        tmp['bucket'] = l\n    \n    result = tmp.groupby('bucket').agg({'sum': 'sum', 'count': 'sum', 'value': [min, max]})\n    result['avg_target'] = result['sum']['sum'] \/ result['count']['sum']\n    \n    plt.figure()\n    plt.suptitle(column+' avg_target', size=16)\n    sns.barplot(y=result['value']['min'].astype('int64'), x=result['avg_target'], orient='h')\n    \n    plt.figure()\n    plt.suptitle(column+' count', size=16)\n    sns.barplot(y=result['value']['min'].astype('int64'), x=result['count']['sum'], orient='h')\n\n","43f28672":"sns.distplot(df['credit_amount']);","17979321":"plot_rate(df, 'credit_amount', df['bad_client_target'], num_buckets=20)","c447f107":"sns.distplot(df['credit_term']);","f9b325dc":"plot_rate(df, 'credit_term', df['bad_client_target'], num_buckets=20)","e641a013":"sns.distplot(df['age']);","5c984e12":"plot_rate(df, 'age', df['bad_client_target'], num_buckets=20)","4efed864":"sns.distplot(df['income']);","29be58cb":"plot_rate(df, 'income', df['bad_client_target'], num_buckets=20)","cdf4c756":"df[categorical_columns].describe(include='all')","95575173":"df['month'].value_counts().plot(kind='bar');","17877590":"sns.catplot(x=\"month\", y=\"bad_client_target\", kind=\"bar\", data=df);","e9543ff0":"df[['month', 'bad_client_target']].groupby('month').agg('mean').sort_values('bad_client_target', ascending=False)","4fbd9d6c":"df['sex'].value_counts().plot(kind='bar');","d0ca867a":"sns.catplot(x=\"sex\", y=\"bad_client_target\", kind=\"bar\", data=df);","cf2404e3":"df[['sex', 'bad_client_target']].groupby('sex').agg('mean').sort_values('bad_client_target', ascending=False)","df70b5ec":"df['sex'] = df['sex'].apply(lambda x: 1 if x=='male' else 0)","3770668a":"df['education'].value_counts().plot(kind='bar');","5b567ec2":"cp = sns.catplot(x=\"education\", y=\"bad_client_target\", kind=\"bar\", data=df)\ncp.set_xticklabels(rotation=60);","1db46858":"df[['education', 'bad_client_target']].groupby('education').agg('mean').sort_values('bad_client_target', ascending=False)","b5a7030e":"df['product_type'].value_counts().plot(kind='bar');","02e3972a":"cp = sns.catplot(x=\"product_type\", y=\"bad_client_target\", kind=\"bar\", data=df)\ncp.set_xticklabels(rotation=90);","418eae05":"df[['product_type', 'bad_client_target']].groupby('product_type').agg('mean').sort_values('bad_client_target', ascending=False)","ff12b091":"df['having_children_flg'].value_counts().plot(kind='bar');","e2fb1aac":"cp = sns.catplot(x=\"having_children_flg\", y=\"bad_client_target\", kind=\"bar\", data=df)\ncp.set_xticklabels(rotation=90);","6e3e591d":"df[['having_children_flg', 'bad_client_target']].groupby('having_children_flg').agg('mean').sort_values('bad_client_target', ascending=False)","bbf71c35":"df['region'].value_counts().plot(kind='bar');","f69dce4f":"cp = sns.catplot(x=\"region\", y=\"bad_client_target\", kind=\"bar\", data=df)\ncp.set_xticklabels(rotation=90);","2f990767":"df[['region', 'bad_client_target']].groupby('region').agg('mean').sort_values('bad_client_target', ascending=False)","7b9851e9":"df['family_status'].value_counts().plot(kind='bar');","87f7d672":"cp = sns.catplot(x=\"family_status\", y=\"bad_client_target\", kind=\"bar\", data=df)\ncp.set_xticklabels(rotation=90);","ccc175af":"df[['family_status', 'bad_client_target']].groupby('family_status').agg('mean').sort_values('bad_client_target', ascending=False)","7e8330d2":"df['phone_operator'].value_counts().plot(kind='bar');","d47c6f7d":"cp = sns.catplot(x=\"phone_operator\", y=\"bad_client_target\", kind=\"bar\", data=df)\ncp.set_xticklabels(rotation=90);","0a5a06ea":"df[['phone_operator', 'bad_client_target']].groupby('phone_operator').agg('mean').sort_values('bad_client_target', ascending=False)","6d491434":"df['is_client'].value_counts().plot(kind='bar');","3220e76b":"cp = sns.catplot(x=\"is_client\", y=\"bad_client_target\", kind=\"bar\", data=df)\ncp.set_xticklabels(rotation=90);","614723dd":"df[['is_client', 'bad_client_target']].groupby('is_client').agg('mean').sort_values('bad_client_target', ascending=False)","b89bf971":"df['bad_client_target'].value_counts().plot(kind='bar');","d9f2a5bc":"### 3.6. Region","0621e572":"### 3.7. Family status","2d1aa53b":"# 1. Reading","c16f9b82":"### 3.4. Product type ","9ff93269":"### 2.3. Age","a409b4ad":"### 2.4. Income","2f62551e":"### 3.2. Sex","46a46c66":"# 0. Imports","ebf1e8fc":"### 2.2. Credit term","e8b2399c":"# Buckets EDA for features","5d1aa863":"# 2. Numeric columns eda","dbda74a1":"# 3. Categorical columns eda","4e5c1cfd":"### 3.3. Education","ec20c0a9":"### 3.8. Phone operator","e14e8cc5":"### 3.5. Having children flg","f452bddd":"# 4. Target","50307573":"### 3.9. Family status","8463aa79":"### 3.1. Month","472b9c84":"### 2.1. Credit amount"}}