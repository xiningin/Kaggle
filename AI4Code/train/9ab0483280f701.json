{"cell_type":{"a28b3857":"code","490b6803":"code","fae2a466":"code","acdd0fe4":"code","2448ff54":"code","2fa7ae19":"code","94069165":"code","c7af0b48":"code","15ecabef":"code","75b1e632":"code","3cd591d3":"code","7782c6e2":"markdown","913186da":"markdown","7faee290":"markdown","19878b64":"markdown","e7fbe903":"markdown","3f39a3f6":"markdown","ffb07e32":"markdown","7a73d2da":"markdown","369cc4f0":"markdown","cb5f8f89":"markdown","b2e1ca1a":"markdown","756574a0":"markdown","ba035a26":"markdown"},"source":{"a28b3857":"import matplotlib\nprint(matplotlib.matplotlib_fname())","490b6803":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fae2a466":"#Code By Paul Mooney\n\nchinese_file = '..\/input\/text-dataset-for-63-langauges\/Chinese Simplified.txt'\nwith open(chinese_file) as f: # The with keyword automatically closes the file when you are done\n    print (f.read(1000))","acdd0fe4":"import numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\ndef plotWordFrequency(input):\n    f = open(chinese_file,'r')\n    words = [x for y in [l.split() for l in f.readlines()] for x in y]\n    data = sorted([(w, words.count(w)) for w in set(words)], key = lambda x:x[1], reverse=True)[:40] \n    most_words = [x[0] for x in data]\n    times_used = [int(x[1]) for x in data]\n    plt.figure(figsize=(20,10))\n    plt.bar(x=sorted(most_words), height=times_used, color = 'red', edgecolor = 'black',  width=.5)\n    plt.xticks(rotation=45, fontsize=18)\n    plt.yticks(rotation=0, fontsize=18)\n    plt.xlabel('Most Common Words:', fontsize=18)\n    plt.ylabel('Number of Occurences:', fontsize=18)\n    plt.title('Most Commonly Used Words: %s' % (chinese_file), fontsize=24)\n    plt.show()","2448ff54":"chinese_file = '..\/input\/text-dataset-for-63-langauges\/Chinese Simplified.txt'\nplotWordFrequency(chinese_file)","2fa7ae19":"'\u2026\/matplotlib\/mpl-data\/fonts\/text-dataset-for-63-langauges\/Chinese Simplified.ttf'","94069165":"import matplotlib.font_manager\nmatplotlib.font_manager._rebuild()","c7af0b48":"[f for f in matplotlib.font_manager.fontManager.ttflist if 'Simsum' in f.name]","15ecabef":"import matplotlib as mpl\nfont_name = \"STKaiti\"\nmpl.rcParams['font.family']=font_name\nmpl.rcParams['axes.unicode_minus']=False # in case minus sign is shown as box\n\nplt.text(0.5, 0.5, s=u'\u6d4b\u8bd5')\nplt.show()","75b1e632":"plt.text(0.5, 0.5, s=u'\u6d4b\u8bd5', fontname=font_name)","3cd591d3":"matplotlib.rcParams['font.family'] = ['Simsum']","7782c6e2":"#I tried: Microsoft YaHei, SimHei, Simsum, Dengxian as font name. And didn't work.","913186da":"#The font folder is \u2026\/matplotlib\/mpl-data\/fonts\/ttf , put your ttf file there.","7faee290":"#For macOS, the system Chinese fonts is Heiti,\n\nHeiti is embed in a ttc file (ttc is a collection of multiple ttf files). Get the system ttc file in \/System\/Library\/Fonts\/STHeiti Medium.ttc Copy this file out and convert it to ttf. Here is an online ttc converter:\n\n#My OS is Windows","19878b64":"#The problem is that we do not know which of these fonts support Chinese!  jdhao's blog\n\nhttps:\/\/jdhao.github.io\/2017\/05\/13\/guide-on-how-to-use-chinese-with-matplotlib\/\n\n Some of the ttc font files can not be used by Matplotlib. So we need to find the intersection of available Chinese fonts and fonts indexed by Matplotlib.\n \nSuppose that you have installed \u201cSTKaiti\u201d on your system, the following code will use it to render Chinese: \n\n#I don't have any installed. ","e7fbe903":"#Restart Kaggle Notebook, then test if matplotlib can load your font or not by the ttflist function of the font manager","3f39a3f6":"#Get ttf from ttc file (skip if you have ttf file already)","ffb07e32":"#Windows Default Chinese Fonts: Dengxian, Simsum (Simplified) and PMingLiU (Traditional)\n\nIn Office 2016, the new default font for the Simplified Chinese version of Excel, Word, PowerPoint, Outlook, and OneNote is Dengxian. If you\u2019re using Office 2010 or Office 2013, you can install the Dengxian font pack from the Microsoft Download Center.\n\nDefault Chinese Fonts\n\nWhen you select a Chinese input method and start typing, Windows 7's default fonts will be Songti: SimSum for Simplified characters and PMingLiU for Traditional. These are also the standard Chinese system fonts for filenames, menus and other UI text.","7a73d2da":"In the above code, font_name can be the name of any valid Chinese font. If you just want to use a Chinese font for a particular command, you can directly specify the font\u2019s name in the plotting command","369cc4f0":"#Get the system ttc file in\n\n\/System\/Library\/Fonts\/STHeiti Medium.ttc Copy this file out and convert it to ttf.\n\nHere is an online ttc converter: https:\/\/transfonter.org\/ttc-unpack","cb5f8f89":"#This is the location of matplotlib config file, you will get something like\n\n\u2026\/matplotlib\/mpl-data\/matplotlibrc","b2e1ca1a":"#Rebuild the Matplotlib Cache","756574a0":"#Unfortunately, I still have only Boxes instead of Chinese characters.","ba035a26":"#Using Chinese Characters in Matplotlib, by Kelvin Ng\n\nWhen you try to display Chinese or other non-ascii characters in matplotlib, your characters may not be displayed properly\n\nhttps:\/\/medium.com\/@hoishing\/using-chinese-characters-in-matplotlib-5c49dbb6a2f7"}}