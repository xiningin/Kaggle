{"cell_type":{"636c1803":"code","56445c0f":"code","67dcb580":"code","32bb488f":"code","67a0f590":"code","db12a371":"code","4a5da307":"code","c8e14b14":"code","d6c57862":"code","d115cfb3":"code","9d568493":"code","19a3d75f":"code","726d3878":"code","dfbd2a3f":"code","e26a4252":"code","5dee8f1a":"code","43d993d4":"code","cabf6cf7":"code","17549a08":"code","57090970":"code","d6b44385":"code","5d0ef81d":"code","39dfb7d2":"code","262df497":"code","4ec51f57":"code","a06c5858":"code","46a2b8bc":"code","4ff32d6a":"code","10af1846":"code","a557f242":"code","9ed7e98c":"code","9f9702d1":"code","8346ec10":"code","5fb72c30":"code","6308130e":"code","ae9721b9":"code","009c7157":"code","6e436be3":"code","db9de9f2":"markdown","edd12a6b":"markdown","407e40e7":"markdown","ac17b0ba":"markdown","e675b87e":"markdown","d10ecf7d":"markdown","2a12afe0":"markdown","adc1659b":"markdown","0f6c5865":"markdown","c269cead":"markdown","604906de":"markdown","3e20c0dd":"markdown","eefe51bd":"markdown","cb9b29ff":"markdown","8cf9e752":"markdown"},"source":{"636c1803":"test_path='\/kaggle\/input\/tmdb-box-office-prediction\/test.csv'\ntrain_path='\/kaggle\/input\/tmdb-box-office-prediction\/train.csv'\nimport pandas as pd\ntrain_data=pd.read_csv(train_path)","56445c0f":"from sklearn.ensemble import RandomForestRegressor\nmodel=RandomForestRegressor(random_state=1)","67dcb580":"test_data=pd.read_csv(test_path)","32bb488f":"train_data.describe()","67a0f590":"test_data.describe()","db12a371":"print(\"train.shape \",train_data.shape)\nprint(\"test.shape \",test_data.shape)","4a5da307":"test_data.columns","c8e14b14":"train_data.columns","d6c57862":"test_data.describe()","d115cfb3":"train_data.runtime.unique()","9d568493":"train_data.original_language.unique()","19a3d75f":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ntrain_data['original_language']=le.fit_transform(train_data['original_language'])\ntest_data['original_language']=le.fit_transform(test_data['original_language'])\ntrain_data['runtime']=le.fit_transform(train_data['runtime'])\ntest_data['runtime']=le.fit_transform(test_data['runtime'])","726d3878":"train_data.revenue.mode()","dfbd2a3f":"train_data['runtime'].fillna(6000000, inplace=True)","e26a4252":"train_data.isnull().sum()","5dee8f1a":"train_data.isnull().sum()","43d993d4":"y=train_data.revenue","cabf6cf7":"X=train_data[['budget','original_language','popularity','runtime']]","17549a08":"from sklearn.metrics import mean_absolute_error","57090970":"model.fit(X,y)","d6b44385":"predictions=model.predict(X)","5d0ef81d":"print(mean_absolute_error(y, predictions))","39dfb7d2":"test_id=test_data[\"id\"]\ntest_id.shape\ntest_X=test_data[['budget','original_language','popularity','runtime']]\npredictions=model.predict(test_X)","262df497":"submission = pd.DataFrame({'id': test_id, 'revenue':predictions})\nsubmission = submission[['id', 'revenue']]\nsubmission.head()\nsubmission.to_csv(\"submission.csv\", index=False)","4ec51f57":"import matplotlib.pyplot as plt","a06c5858":"bar_data = {'Actual Revenue':y.mean(), 'Expected Revenue Predicted Using RFR':predictions.mean()}","46a2b8bc":"bar_one = list(bar_data.keys())\nbar_two = list(bar_data.values())","4ff32d6a":"fig = plt.figure(figsize = (10, 5))","10af1846":"plt.bar(bar_one, bar_two, color =['black','blue'],\n        width = 0.4)\n \nplt.xlabel(\"Comparision\")\nplt.ylabel(\"Actual Revenue Collected\")\nplt.title(\"Predicted Revenue\")\nplt.show()","a557f242":"from pandas.plotting import scatter_matrix","9ed7e98c":"scatter_matrix(train_data.drop(\"id\", axis = 1), figsize=(10, 10))\nplt.show()","9f9702d1":"scatter_matrix(test_data.drop(\"id\", axis = 1), figsize=(10, 10))\nplt.show()","8346ec10":"test_data.drop(\"id\", axis = 1).hist(figsize=(15,7.5))\nplt.show()","5fb72c30":"train_data.drop(\"id\", axis = 1).hist(figsize=(15,7.5))\nplt.show()","6308130e":"import seaborn as sns","ae9721b9":"sns.heatmap(train_data.drop(\"id\", axis = 1).isnull(), yticklabels = False, cmap = \"plasma\")\nplt.show()","009c7157":"sns.heatmap(test_data.drop(\"id\", axis = 1).isnull(), yticklabels = False, cmap = \"plasma\")\nplt.show()","6e436be3":"sns.heatmap(test_data.drop(\"id\", axis = 1).isnull(), yticklabels = False, cmap = \"inferno\")\nplt.show()","db9de9f2":"**Setting up the data paths**","edd12a6b":"Let us take a look at the train data","407e40e7":"Importing the mean absolute error metric","ac17b0ba":"Predictor Variable","e675b87e":"Forming the Random Forest Regressor Model","d10ecf7d":"Let us check the error","2a12afe0":"Prediction using test data","adc1659b":"Reading the test data","0f6c5865":"train_data.describe()","c269cead":"Setting up the variables, which are to be used for fitting  ","604906de":"Features","3e20c0dd":"Prediction using train data","eefe51bd":"Filling N\/A Values in runtime","cb9b29ff":"Importing Label Encoder","8cf9e752":"Fitting the model"}}