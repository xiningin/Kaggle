{"cell_type":{"7c8e6cd3":"code","28c12273":"code","a544a9fa":"code","065d1acd":"code","a8825441":"code","0c54cfe4":"code","95eeb7b4":"code","a16fc88c":"code","c00d74d9":"code","8ae0c9d2":"code","6300757f":"code","9fddce89":"code","d1f490f1":"code","97800744":"code","13268cef":"code","04c57026":"code","f2a5931f":"code","c8d68fd3":"code","c9e352af":"markdown","59bc3b8e":"markdown","b86a8427":"markdown","dfc62add":"markdown","0ab0d99a":"markdown","14b3dc3b":"markdown","f3cecf26":"markdown","56680466":"markdown","bd19ad51":"markdown","ca290e28":"markdown","eae289f6":"markdown","5e5d5f6f":"markdown","39588d31":"markdown","9f667576":"markdown","41843ff2":"markdown","35dbf922":"markdown","bb474204":"markdown"},"source":{"7c8e6cd3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","28c12273":"country = ['Turkey', 'Germany']#values\npopulation = ['80000000', '65000000']#values\nlist_label = ['country', 'population']#column names\nlist_column = [country, population]#values have relation with columns \nzipped = list(zip(list_label,list_column))#mwe used zip() method for creating a table form\ndata_dict = dict(zipped)#zip() method returns tuple data type. We have to change it to dictionary for using with Pandas\ndata = pd.DataFrame(data_dict)#dictionary transformed into Data Frame.\ndata","a544a9fa":"data['capital'] = ['Ankara', 'Berlin']\ndata","065d1acd":"data['test'] = '123'\ndata","a8825441":"data1 = pd.read_csv('..\/input\/2017.csv') #creating new data frame from World Happiness Report dataset.\ndata1.head()\ndata1_cols = data1.columns\ndata1_cols = data1_cols.str.replace('.','_')\ndata1.columns = data1_cols\ndata1.head()","0c54cfe4":"data2 = data1.loc[:,['Happiness_Rank', 'Family', 'Freedom']]\ndata2.plot()","95eeb7b4":"data2.plot(subplots = True, figsize= (12,12))\nplt.show()","a16fc88c":"data2.plot(kind='scatter', x= 'Happiness_Rank', y='Freedom', color = 'Red',grid = True, alpha=0.5, figsize = (12,12))\nplt.show()","c00d74d9":"data2.plot(kind='hist', y= 'Happiness_Rank', bins = 50, range=(0,250), density=True)\nplt.show()","8ae0c9d2":"fig,axes = plt.subplots(nrows=2 , ncols=1)\ndata2.plot(kind='hist', y='Freedom', bins = 50, range=(0,1), density=True, ax= axes[0])\ndata2.plot(kind='hist', y='Happiness_Rank', bins= 50, range=(0,250), density=True, ax=axes[1], cumulative = True)\nplt.savefig('graph.png')\nplt.show()","6300757f":"data1.describe()","9fddce89":"time_list=[\"1995-04-23\",\"1999-11-14\",\"1989-1-17\",\"1996-6-5\",\"1999-11-4\"]\nprint(type(time_list[1]))#returns string\n# lets convert it to datetime object\ndata3 = data2.head()\ndatetime_object = pd.to_datetime(time_list)#converting process to datetime\ndata3['date'] = datetime_object#adding to dataframe as a column\ndata3","d1f490f1":"data3 = data3.set_index('date')\ndata3","97800744":"print(data3.loc['1999-11-14'])\nprint(data3.loc['1989-01-17':'1999-11-04'])","13268cef":"data3.resample('A').mean()","04c57026":"data3.resample('M').mean()","f2a5931f":"data3.resample('M').first().interpolate('linear')","c8d68fd3":"data3.resample(\"M\").mean().interpolate(\"linear\")","c9e352af":"Lets drop the index values and creating a new index from datetime list.","59bc3b8e":"I have plotted but it is meaningless. Therefore I am using subplots.","b86a8427":"At here, I resample by year (using ' A '). Showing values from dataframe, and putting NaN values for not found values in dataframe.","dfc62add":"### RESAMPLING PANDAS TIME SERIES\n* Resampling: statistical method over different time intervals\n    * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019 \n    * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html","0ab0d99a":"What is broadcasting ?\n\nBroadcasting is, adding a new column and giving a value. And it works like map function. Broadcasting the value to all data.  ","14b3dc3b":"I am selecting data using time index.","f3cecf26":"I am plotting histogram figure. I am using normed and range parameters this time. \n* Range is used for limiting x-axis. At this example, I have limited Happiness Rank values in-between 0-250.\n* Density is used for formalizating y-label in between 0-1. At this example, I have formalized frequency value of Happiness Rank column.","56680466":"### INDEXING PANDAS TIME SERIES\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","bd19ad51":"There is an example of how to use ' cumulative ' parameter. This parameter works like fibonnaci . For each value, sums each value before it and returns result of sum.","ca290e28":"As you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas.\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy","eae289f6":"### VISUAL EXPLORATORY DATA ANALYSIS\n* Plot\n* Subplot\n* Histogram:\n    * bins: number of bins\n    * range(tuble): min and max values of bins\n    * normed(boolean): normalize or not\n    * cumulative(boolean): compute cumulative distribution","5e5d5f6f":"I resample by months (using ' M '). Showing values from dataframe, and putting NaN values for not found values in dataframe.","39588d31":"### BUILDING DATA FRAMES FROM SCRATCH\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n    * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","9f667576":"Interpolate method fills the NaN values with values between the highest and the lowest index.\nThere is another example of resampling : ","41843ff2":"I have added a new column to data frame.","35dbf922":"### Review of Pandas\n\nYou can find at here : What can we de with Pandas library.\nI included these subjects to kernel :\n* Review of Pandas\n* Building data frames form scratch\n* Visual exploratory data analysis\n* Statictical exploratory data analysis\n* Indexing Pandas time series\n* Resampling Pandas time series","bb474204":"### STATISTICAL EXPLORATORY DATA ANALYSIS\nI already explained it at previous parts. However lets look at one more time.\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry"}}