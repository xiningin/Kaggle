{"cell_type":{"962bd1b2":"code","dd566345":"code","fe8883e1":"code","6518a921":"code","40c73ba4":"code","7113e29c":"code","52e28eca":"code","9453c7e2":"code","2a8e2521":"code","5d5babb3":"code","2b5dd9b7":"code","1bc5f569":"code","0f118876":"code","66554a42":"code","6f4a28cd":"code","8fa74168":"markdown","8d286523":"markdown","9f0b4a53":"markdown","9fe25c8a":"markdown"},"source":{"962bd1b2":"import numpy as np \nimport pandas as pd \nimport math\nimport glob\nimport os\nimport gc\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport time\n%matplotlib inline","dd566345":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)","fe8883e1":"train=pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ntest=pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\nsample_submission=pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')","6518a921":"print(\"Train has\", train.shape[0], \"elements\")\nprint(\"Test has\", test.shape[0], \"elements\")","40c73ba4":"train.head(10)","7113e29c":"dd=(train.isna().sum()\/train.shape[0]).reset_index(name='percentage_na')\ndd=dd.set_index('index')\ndd.T","52e28eca":"import cudf\nimport pandas as pd\n\nimport pynvml\nimport numpy as np\nimport xgboost as xgb\n\nfeatures=train.iloc[:,1:55].columns.tolist()\ntrain['Cover_Type']=train['Cover_Type'].apply(lambda x:  x-1)\ndata = cudf.from_pandas(train)\nfor col in features:\n    data[col]=data[col].astype('float32')\n## spliting training and test set\nfrom cuml import train_test_split\nX=data[features]\ny=data.iloc[:,55]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)","9453c7e2":"from cuml.ensemble import RandomForestClassifier\nX_train.fillna(0, inplace=True)\nmodel = RandomForestClassifier(n_estimators = 140, max_depth =10 )\nmodel.fit(X_train, y_train)","2a8e2521":"from cuml.metrics import accuracy_score\nfrom cupy import asnumpy\nX_test.fillna(0, inplace=True)\nrf_prediction = model.predict(X_test)\n\n","5d5babb3":"\n#rf_predictions=np.round(rf_prediction,0).astype(int)\ncu_score = accuracy_score( y_test, rf_prediction )\n\nprint(\"cuml Accuracy: %.2f%%\" % (cu_score * 100.0))","2b5dd9b7":"start_rapids = time.time()\ndtrain = xgb.DMatrix(\n        X_train,\n        y_train    )\n\ndtest = xgb.DMatrix(\n        X_test,\n        y_test    )\n\n## Train the model\ntrained_model = xgb.train(\n                        {\n                          'nround': 100,\n                          'max_depth': 4,\n                          'max_leavs': 2**8,\n                          'loss': 'ls',\n                          'objective': 'multi:softprob',\n                          'n_estimators':120,\n                          'max_features': 'auto',\n                          'criterion' : 'friedman_mse',\n                          'grow_policy': 'lossguide',\n                          'silent': True,\n                          'num_class':7,\n                          'verbose_eval': True,\n                          'tree_method':'gpu_hist',\n                        },\n                        dtrain,\n                        num_boost_round=400, evals=[(dtrain, 'train')])\n\n## Predict the model\n\nend_rapids = time.time()\nprint(\"Total time taken\", end_rapids-start_rapids, \"seconds\")","1bc5f569":"from cuml.metrics import accuracy_score\nfrom cupy import asnumpy\n\nprediction = trained_model.predict(dtest)\nprediction=np.argmax(prediction,axis=1)\ncu_score = accuracy_score( y_test, prediction )\n\nprint(\"cuml Accuracy: %.2f%%\" % (cu_score * 100.0))","0f118876":"test.fillna(0, inplace=True)\ntest[features]=test[features].astype('float32')\ntest_data = cudf.from_pandas(test[features])\ndtest_actual = xgb.DMatrix(\n        test_data  )\nboost_pred=trained_model.predict(dtest_actual)\nboost_pred=np.argmax(boost_pred,axis=1)\nrf_pred=model.predict(test_data)\n","66554a42":"final_preds=asnumpy(boost_pred)\ntest['Cover_Type']=np.round(final_preds)\ntest['Cover_Type']=test['Cover_Type'].astype(int)\ntest['Cover_Type']=test['Cover_Type']+1","6f4a28cd":"test[['Id','Cover_Type']].to_csv('submission.csv', index=False)","8fa74168":"#### Introduction \ud83d\udcdd \ud83c\udfaf Goal:Multi Class classification based on features\n\n\ud83d\udcd6 Data:\n\ntrain.csv \/ test.csv - the training and testing set\n\nSubmissions are evaluated on accuracy of the multi class classification\n\n","8d286523":"### Lets take a look if there are NA values in the data","9f0b4a53":"### This is a WIP notebook. Please upvote if you find the notebook Useful. I will be working on adding new features and visualizations.\n","9fe25c8a":"### Xgboost in Rapids"}}