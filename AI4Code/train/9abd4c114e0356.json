{"cell_type":{"3714f5f1":"code","df5ee7fc":"code","2c85773c":"code","71108320":"code","b3d8c175":"code","0c63b64e":"code","d2730e4c":"code","af658390":"code","2ae970cd":"code","a325ed73":"code","06885293":"code","b747dd9d":"code","ae5486b1":"code","facbd208":"code","53d9f27e":"code","0b1ab236":"code","8d17dd2e":"code","f18c8658":"code","0b384c17":"code","f55118b6":"code","0d669ab8":"code","d600f311":"code","fbb81929":"code","66d4084a":"code","bbf2fed0":"code","824d3868":"code","5a3a348a":"code","04eac3f3":"code","4326e699":"code","15c111ac":"code","2b37a0ff":"code","1b6ff6fa":"code","5ad154ed":"markdown","acd541b7":"markdown","1645f2b5":"markdown","013eac4e":"markdown","225745de":"markdown","dd9a34f9":"markdown","b1cbe3b6":"markdown","a839d96b":"markdown","bdb05037":"markdown","7c4b3d43":"markdown","96fdc369":"markdown","b8b73116":"markdown","edf81fe0":"markdown","84c38f21":"markdown","b46277d3":"markdown","8eefc777":"markdown"},"source":{"3714f5f1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom collections import Counter\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport warnings\nimport nltk\nfrom nltk.corpus import stopwords\nwarnings.filterwarnings(\"ignore\")","df5ee7fc":"tweet=pd.read_csv('..\/input\/indianeedsoxygen-tweets\/IndiaWantsOxygen.csv')\ntweet.head()","2c85773c":"tweet.info()","71108320":"tweet.shape","b3d8c175":"tweet.isnull().sum()","0c63b64e":"# Dropping Null Values\ntweet.dropna(inplace=True)","d2730e4c":"tweet.isnull().sum()","af658390":"len(tweet.user_name.unique())","2ae970cd":"tweet.describe().T\n","a325ed73":"tweet['user_location'].nunique()","06885293":"tweet['user_location']=tweet['user_location'].apply(lambda x: x.split(\"\/\")[0])\ntweet['user_location']=tweet['user_location'].apply(lambda x: x.split(\",\")[0])\ntweet['user_location'].head()","b747dd9d":"tweet['user_location'].nunique()","ae5486b1":"import re\nimport string\ndef clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = str(text).lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text","facbd208":"tweet['text'] = tweet['text'].apply(lambda x:clean_text(x))","53d9f27e":"tweet['text'].head()","0b1ab236":"from collections import Counter\ntweet['temp_list'] = tweet['text'].apply(lambda x:str(x).split())\ntop = Counter([item for sublist in tweet['temp_list'] for item in sublist])\ntemp = pd.DataFrame(top.most_common(20))\ntemp.columns = ['Common_words','count']\ntemp.style.background_gradient(cmap='Blues')","8d17dd2e":"fig = px.bar(temp, x=\"count\", y=\"Common_words\", title='Commmon Words in Selected Text', orientation='h', \n             width=800, height=700,color='Common_words')\nfig.show()","f18c8658":"# Removing stopwords\ndef remove_stopword(x):\n    return [y for y in x if y not in stopwords.words('english')]\ntweet['temp_list'] = tweet['temp_list'].apply(lambda x:remove_stopword(x))","0b384c17":"top = Counter([item for sublist in tweet['temp_list'] for item in sublist])\ntemp = pd.DataFrame(top.most_common(20))\ntemp = temp.iloc[1:,:]\ntemp.columns = ['Common_words','count']\ntemp.style.background_gradient(cmap='Purples')","f55118b6":"fig = px.treemap(temp, path=['Common_words'], values='count',title='Tree of Most Common Words')\nfig.show()","0d669ab8":"tweet.user_location.value_counts().head(15)","d600f311":"x= tweet.user_location.value_counts().head(15)\nplt.figure(figsize= (10,7))\nsns.set_style(\"whitegrid\")\nax= sns.barplot(x.values,x.index)\nax.set_xlabel(\"No of tweets\")\nax.set_ylabel(\"Locations\")\nplt.show()","fbb81929":"tweet[\"date\"]= pd.to_datetime(tweet.date)\ntweet.date= tweet.date.apply(lambda x: str(x).split(\" \")[0])\ntweet.date.head()","66d4084a":"x= tweet.groupby(\"date\").date.count()\nplt.figure(figsize= (15,7))\nsns.set_style(\"whitegrid\")\nax= sns.lineplot(x.index,x.values)\nax.set_xlabel(\"date\")\nax.set_ylabel(\"No of tweets\")\nplt.title('Number of tweets over time')\nplt.show()","bbf2fed0":"tweet.source.value_counts()\nplt.figure(figsize= (15,7))\nax= sns.countplot(x= \"source\",data= tweet)\nplt.xticks(rotation=90)\nplt.title('Devices used for Tweet')\nplt.show()","824d3868":"x= tweet.user_verified.value_counts()\nplt.figure(figsize= (15,7))\nlabels=(\"Verified\",\"Non verified\")\nplt.pie(x,labels= labels,autopct= \"%1.1f%%\")\nplt.show()","5a3a348a":"x= tweet.is_retweet.value_counts()\ntweet.user_name.value_counts().head(20)\n","04eac3f3":"x= tweet.user_name.value_counts().head(20)\nplt.figure(figsize= (7,10))\nax= sns.barplot(x.values,x.index)\nax.set_xlabel(\"No of tweets\")\nax.set_ylabel(\"Usernames\")\nplt.show()","4326e699":"#unique  Location wordcloud Visualization\ntweet= tweet[pd.notnull(tweet[\"user_name\"])]\ntweet.user_location.unique()\nx = tweet[pd.notnull(tweet[\"user_location\"])]\nfrom wordcloud import WordCloud, STOPWORDS\nplt.figure(figsize= (20,20))\nwords= \"\".join(str(x[\"user_location\"]))\nfinal = WordCloud(width = 2000, height = 800, background_color =\"black\",min_font_size = 10).generate(words)\nplt.imshow(final)\nplt.axis(\"off\") \nplt.show()   ","15c111ac":"# wordcloud visualisation of usernames \nplt.figure(figsize= (20,20))\nwords= \"\".join(tweet[\"user_name\"])\nfinal = WordCloud(width = 2000, height = 800, background_color =\"black\",min_font_size = 10).generate(words)\nplt.imshow(final)\nplt.axis(\"off\") \nplt.show()   \n     ","2b37a0ff":"# Wordcloud visualization for #Hastag\nplt.figure(figsize= (20,20))\nwords= \"\".join(tweet[\"hashtags\"])\nfinal = WordCloud(width = 2000, height = 800, background_color =\"black\",min_font_size = 10).generate(words)\nplt.imshow(final)\nplt.axis(\"off\") \nplt.show()   ","1b6ff6fa":"# Wordcloud visualization for text column\nplt.figure(figsize= (20,20))\nwords= \"\".join(tweet[\"text\"])\nfinal = WordCloud(width = 2000, height = 800, background_color =\"black\",min_font_size = 10).generate(words)\nplt.imshow(final)\nplt.axis(\"off\") \nplt.show()   \n     ","5ad154ed":"## Worst Crisis\n\n**India has reported more than 300,000 daily infections for 21 consecutive days, highlighting the country's slide into the world's worst health crisis. One research model is predicting deaths could quadruple to 1,018,879 from the current official count of almost 254,200. Just as some countries needed ventilators in large quantities last year, India is now desperately seeking oxygen supplies and concentrators.**","acd541b7":"**successfully dropped all the null values**","1645f2b5":"<h2 style=\"color:red\"><b>STAY TUNED!<\/b><\/h2>\n","013eac4e":"**Observation:** 98.4% are Verfied Twitter User's","225745de":"## Importing Requred Libraries","dd9a34f9":"## It's Time For WordClouds","b1cbe3b6":"# <center><div class=\"alert alert-block alert-info\"> EDA & Visualization on #IndiaNeedsOxygen Tweets <\/div><\/center>","a839d96b":"**Observation:** 98% of the User's are Verified User","bdb05037":"<center><div class=\"alert alert-block alert-info\"> Please Upvote \u270c if you like the notebook and share possible improvements in the comments.<\/div> <\/center>","7c4b3d43":"# EDA","96fdc369":"##### <b><p style=\"color:blue\">I hope you Liked my kernel. An upvote is a gesture of appreciation and encouragement that fills me with energy to keep improving my efforts. \ud83d\udc4d<\/p><\/b>","b8b73116":"## About Dataset\n\n* user_name - The name of the user, as they\u2019ve defined it.\n* user_location - The user-defined location for this account\u2019s profile.\n* user_description - The user-defined UTF-8 string describing their account.\n* user_created - Time and date, when the account was created.\n* user_followers - The number of followers an account currently has.\n* user_friends - The number of friends an account currently has.\n* user_favourites - The number of favorites an account currently has\n* user_verified - When true, indicates that the user has a verified account\n* date -  UTC time and date when the Tweet was created\n* text - The actual UTF-8 text of the Tweet\n* hashtags - All the other hashtags posted in the tweet along with #IndiaWantsOxygen\n* source - Utility used to post the Tweet, Tweets from the Twitter website have a source value - web\n* is_retweet - Indicates whether this Tweet has been Retweeted by the authenticating user.","edf81fe0":"**Observation**: The Most Common word used in tweet is indianeedsoxygen ","84c38f21":"**Observation:** Most of tweets are from Android Device","b46277d3":"## Preprocessing","8eefc777":"#### **Observation :** Most of the tweets are from their neighbor Country Pakistan"}}