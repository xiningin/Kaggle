{"cell_type":{"aff4060d":"code","2dc760fd":"code","25fd736c":"code","cb8d1ec8":"code","0fb0ed7e":"code","9670c323":"code","ff4602a9":"code","2be3c359":"code","26ac0a48":"code","0116669a":"code","beed92b5":"code","130b2df9":"code","f9bbb42a":"code","ab9d0b06":"code","60b85664":"code","ee06c233":"code","561e6a2c":"code","c8098e46":"code","a79f35f8":"code","23d565a6":"code","d379e03c":"code","3f754c50":"code","aed4ae94":"code","be3fb74c":"code","2e37bb2d":"code","b1df4d20":"code","70204d10":"code","981e119b":"code","fe9d8991":"code","53f785cc":"code","46265077":"code","b562ea65":"code","a61f1a8e":"code","b31082ca":"code","93d1a283":"code","ff2d94e3":"code","57a1f2ea":"code","732a2851":"code","ac278c94":"code","9df0a5a2":"code","26ac1cc6":"code","714f9dad":"code","24d1d6bf":"code","19983c02":"code","7c1f3f1a":"code","ad6b1945":"code","366cf44f":"code","0f26abde":"code","74d83794":"code","73da3435":"code","7c8edfba":"code","85e39895":"code","29245b80":"code","8c8c9644":"code","ff1f333e":"code","b48e4311":"code","008566a9":"code","5ad06b5f":"code","d5109750":"code","4c6ad074":"code","fb9a85b7":"markdown","c9d6fd2f":"markdown","a148a29b":"markdown","989b40e6":"markdown","f933ff2a":"markdown","a7f7bee3":"markdown","11ac1529":"markdown","1ee8e466":"markdown","95f4fcc3":"markdown","8769b0bf":"markdown","ae8d9a1a":"markdown","85ad77eb":"markdown","35477bbb":"markdown","89953a11":"markdown","213e9117":"markdown","c174807e":"markdown","b8ca40fb":"markdown","a8d39fe6":"markdown","98e4f037":"markdown","a0a0e0ac":"markdown","3b3f4e7b":"markdown","7b48a87f":"markdown","c8493457":"markdown","3a5bd8ee":"markdown","b6f6521a":"markdown","2f30e648":"markdown","747a8cfe":"markdown","5d074323":"markdown","344183a2":"markdown","ac58268b":"markdown","c1b8bceb":"markdown","209b5d93":"markdown","5611b076":"markdown","319c0342":"markdown","8acaecd5":"markdown","35b9852a":"markdown","5ee1b10d":"markdown","5b793f78":"markdown","e4e2845b":"markdown","4df759eb":"markdown","e87c7a9b":"markdown","64c14971":"markdown","cbfe4bb9":"markdown","3718b3df":"markdown","c9c122d8":"markdown","acb4c94a":"markdown","c28d49ba":"markdown","58ea8f7a":"markdown","cda3eb58":"markdown","c5619825":"markdown","a6cabbf0":"markdown"},"source":{"aff4060d":"import pandas as pd","2dc760fd":"chocolate_raw_df = pd.read_csv('..\/input\/chocolate-bar-2020\/chocolate.csv')\nchocolate_raw_df","25fd736c":"chocolate_raw_df.columns","cb8d1ec8":"selected_columns = [\n    # Company and respective ratings\n    'company',\n    'company_location',\n    'country_of_bean_origin', \n    'review_date',\n    'rating',     \n    # Ingredients\n    'cocoa_percent',\n    'counts_of_ingredients',   \n    'cocoa_butter',\n    'vanilla',\n    'lecithin',\n    'salt',\n    'sugar',\n    # Tastes\n    'first_taste',\n    'second_taste',\n    'third_taste',\n    'fourth_taste'\n]\n","0fb0ed7e":"# lets check how many columns we have selected\nlen(selected_columns)","9670c323":"# We will be using copy() function to NOT modify original data frame\n# and to actually create a separate one derived from original\nchocolate_df = chocolate_raw_df[selected_columns].copy()\nchocolate_df","ff4602a9":"chocolate_df.shape","2be3c359":"chocolate_df.lecithin","26ac0a48":"# Let's check unique values in this particular column \nchocolate_df.lecithin.unique()","0116669a":"def change_to_boolean(col_series):\n    return col_series.apply(lambda x: False if 'not' in x else True)","beed92b5":"# old values (to verify)\nchocolate_df.cocoa_butter.value_counts()","130b2df9":"chocolate_df['cocoa_butter'] = change_to_boolean(chocolate_df['cocoa_butter'])\nchocolate_df.cocoa_butter.value_counts()","f9bbb42a":"# old values (to verify)\nchocolate_df.vanilla.value_counts()","ab9d0b06":"chocolate_df['vanilla'] = change_to_boolean(chocolate_df['vanilla'])\nchocolate_df.vanilla.value_counts()","60b85664":"# old values (to verify)\nchocolate_df.lecithin.value_counts()","ee06c233":"chocolate_df['lecithin'] = change_to_boolean(chocolate_df['lecithin'])\nchocolate_df['lecithin'].value_counts()","561e6a2c":"# old values (to verify)\nchocolate_df.salt.value_counts()","c8098e46":"chocolate_df['salt'] = change_to_boolean(chocolate_df['salt'])\nchocolate_df.salt.value_counts()","a79f35f8":"# old values (to verify)\nchocolate_df.sugar.value_counts()","23d565a6":"chocolate_df['sugar'] = change_to_boolean(chocolate_df['sugar'])\nchocolate_df.sugar.value_counts()","d379e03c":"chocolate_df","3f754c50":"chocolate_df.info()","aed4ae94":"chocolate_df.isna().sum()","be3fb74c":"# Let's now see all the columns again\nchocolate_df.columns","2e37bb2d":"chocolate_df.describe()","b1df4d20":"chocolate_df.company.value_counts()","70204d10":"soma_df = chocolate_df[chocolate_df.company == 'Soma']\nsoma_df","981e119b":"chocolate_df.sample(10)","fe9d8991":"# center all output images using HTML\nfrom IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>\n\"\"\")","53f785cc":"import seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (12, 6)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'\nmatplotlib.rcParams[\"axes.labelsize\"] = 14\nmatplotlib.rcParams[\"axes.titlesize\"] = 18\nmatplotlib.rcParams[\"xtick.labelsize\"] = 14\nmatplotlib.rcParams[\"ytick.labelsize\"] = 14","46265077":"# Total companies\nchocolate_df.company.nunique()","b562ea65":"ingredients_df = chocolate_df[['cocoa_butter',\n    'vanilla',\n    'lecithin',\n    'salt',\n    'sugar']].copy()\ningredients_df","a61f1a8e":"# Let's check type of any one column value, which was modified earlier\n# using our custom function change_to_boolean\ntype(ingredients_df.cocoa_butter[0])","b31082ca":"# Percentage of companies preferring an ingredient\ningredients_percentage = ingredients_df.mean().sort_values(ascending=False) * 100\ningredients_percentage","93d1a283":"plt.figure(figsize=(12,6)) \nsns.barplot(x=ingredients_percentage,y=ingredients_percentage.index, palette=\"Paired_r\")\nplt.title(\"Common Ingredients Preference\")\nplt.xlabel('percentage of companies');","ff2d94e3":"# various tastes\ncolumn_values = chocolate_df[[\"first_taste\", \"second_taste\", \"third_taste\"]].values.ravel()\nunique_values =  pd.unique(column_values)\n# type(unique_values)\nunique_values.size","57a1f2ea":"# first_taste preference among companies as percentage \nfirst_taste = chocolate_df.first_taste.value_counts() * 100 \/ chocolate_df.first_taste.count()\nfirst_taste.head(10)","732a2851":"# second_taste preference among companies as percentage \nsecond_taste = chocolate_df.second_taste.value_counts() * 100 \/ chocolate_df.second_taste.count()\nsecond_taste.head(10)","ac278c94":"# third_taste preference among companies as percentage \nthird_taste = chocolate_df.third_taste.value_counts() * 100 \/ chocolate_df.third_taste.count()\nthird_taste.head(10)","9df0a5a2":"# pip install matplotlib-venn\nfrom matplotlib_venn import venn2, venn2_circles\nfrom matplotlib_venn import venn3, venn3_circles\n\nfirst_taste = set(chocolate_df['first_taste'])\nsecond_taste = set(chocolate_df['second_taste'])\nthird_taste = set(chocolate_df['third_taste'])\n\nplt.figure(figsize=(12,6)) \nvenn3([first_taste, second_taste, third_taste], ('First Taste', 'Second Taste', 'Third Taste'))\nplt.title(\"Number of Unique and Common Tastes\")\nplt.show();","26ac1cc6":"# common tastes\na = list(first_taste & second_taste & third_taste)\nlen(a)","714f9dad":"plt.figure(figsize=(12,6)) \nsns.lineplot(x=chocolate_df.review_date, y=chocolate_df.cocoa_percent)\nplt.title(\"Pecentage of Cocoa Used Over Years(2006 - 2020)\");","24d1d6bf":"plt_s = sns.jointplot(x=chocolate_df.rating, y=chocolate_df.cocoa_percent, kind ='kde');\nplt_s.fig.suptitle(\"Rating and Cocoa Percent\")\nplt_s.ax_joint.collections[0].set_alpha(0)\nplt_s.fig.tight_layout()\nplt_s.fig.subplots_adjust(top=0.95)\nplt_s.fig.set_figwidth(12)\nplt_s.fig.set_figheight(7);\n","19983c02":"rating_and_composition = chocolate_df[['rating',\n    'cocoa_percent',\n    'counts_of_ingredients',\n    'cocoa_butter',\n    'vanilla',\n    'lecithin',\n    'salt',\n    'sugar']]\nrating_and_composition","7c1f3f1a":"plt.figure(figsize=(12,9)) \nChocolate_corr = rating_and_composition.corr()\nsns.heatmap(Chocolate_corr, xticklabels=Chocolate_corr.columns, yticklabels=Chocolate_corr.columns, annot=True, cmap='YlOrBr',linewidths=.5)\nplt.title(\"Rating and Composition\");","ad6b1945":"cocoa_or_lecithin_all = chocolate_df[['review_date','rating','cocoa_butter','lecithin']].copy()\ncocoa_or_lecithin = cocoa_or_lecithin_all[(cocoa_or_lecithin_all.review_date >= 2018) & (cocoa_or_lecithin_all.review_date <= 2020)].reset_index(drop=True)\n# cocoa_or_lecithin = cocoa_or_lecithin.set_index('review_date')\ncocoa_or_lecithin","366cf44f":"cocoa_or_lecithin.set_index(['cocoa_butter', 'lecithin'], append=True, inplace=True)","0f26abde":"cocoa_or_lecithin_df = cocoa_or_lecithin.unstack(['cocoa_butter', 'lecithin']).xs('rating',axis=1).plot(figsize=(12,7), colormap='plasma')\ncocoa_or_lecithin_df.legend([\"Only Cocoa butter\", \"Both\",\"None\",\"Only Lecithin\"], prop={'size':14})\nplt.title(\"Rating vs Cocoa butter, Lecithin in Chocolates (2018-2020)\", fontsize=18)\nplt.ylabel(\"Rating\", fontsize=14)\nplt.yticks(fontsize=12)\ncocoa_or_lecithin_df.set_facecolor(\"grey\");\n\n# cocoa_butter, lecithin\n# True, False  (Only Cocoa butter)\n# True, True   (Both)\n# False, False (None)\n# False, True  (Only Lecithin)","74d83794":"top_rated_df = chocolate_df[chocolate_df.rating == chocolate_df.rating.max()]\ntop_rated_df","73da3435":"# number_of_companies = len(top_rated_df[(top_rated_df.cocoa_percent >= 60) & (top_rated_df.cocoa_percent < 70)].index)\n# number_of_companies","7c8edfba":"plt.figure(figsize=(12,6)) \nplt.title(\"Percentage of Cocoa in Chocolates\")\nplt.xlabel('Percentage of cocoa')\nplt.ylabel('Number of companies')\nplt.hist(top_rated_df.cocoa_percent, bins=[30, 50, 60, 70, 85, 99], color='maroon');","85e39895":"top_bean_countries= top_rated_df.country_of_bean_origin.value_counts()\ntop_bean_countries","29245b80":"plt.figure(figsize=(12,6)) \nplt.xticks(rotation=75)\nplt.title('Countries of Bean Origin of Chocolates(In Top Rated)')\nsns.barplot(x=top_bean_countries.index, y=top_bean_countries, palette=\"viridis\")\nplt.xlabel(\"Bean Origin(Country)\")\nplt.ylabel(\"\");","8c8c9644":"top_rated_recent = top_rated_df[(top_rated_df.review_date >= 2016) & (top_rated_df.review_date <= 2020)]\ntop_rated_recent","ff1f333e":"recipe_df = top_rated_recent[(top_rated_recent.review_date == 2019)]\nrecipe_df = recipe_df[['company',\n    'company_location',               \n    'cocoa_percent',    \n    'cocoa_butter',\n    'vanilla',\n    'lecithin',\n    'salt',\n    'sugar',\n    'first_taste',\n    'second_taste',\n    'third_taste'                        \n    ]]\nrecipe_df = recipe_df.set_index('company')\nrecipe_df.style.set_properties(**{'background-color': 'brown', \n                           'color': 'yellow'})","b48e4311":"chocolate_df","008566a9":"average_rating_df = chocolate_df.groupby(['company','company_location'], as_index=False)[['rating']].mean()\naverage_rating_df","5ad06b5f":"top_fifty_df = average_rating_df.sort_values('rating', ascending=False).head(50)\ntop_fifty_df","d5109750":"top_countries= top_fifty_df.company_location.value_counts()\ntop_countries","4c6ad074":"plt.figure(figsize=(12,6)) \nplt.xticks(rotation=75)\nplt.title('Countries in Top 50')\nsns.barplot(x=top_countries.index, y=top_countries, palette=\"hls\")\nplt.xlabel(\"Country\")\nplt.ylabel(\"\");","fb9a85b7":"***\n### <font color=green><u> Q3. From which countries, top companies import cocoa beans?<\/u> <\/font>","c9d6fd2f":"### <font color=green><u>1. Company And Ingredients<\/u> <\/font>\n\nLet's look into how common an ingredient is among companies.","a148a29b":"***\n### <font color=green><u> Q5. What are the major regions of chocolate, companies of which, generally makes it to Top 50?<\/u> <\/font>\n\nIn short, Countries with most companies in Top 50 <br>\nWe take average rating of each company here.<br>\n**NOTE:** If you need to work with a dataframe after aggregation, use ```as_index=False``` ","989b40e6":"Lets use ```pandas.DataFrame.shape``` here, which return's a tuple representing the dimensionality of the DataFrame.","f933ff2a":"We can actually deal with these values and manually adjust the data type for each column on a case-by-case basis.\nTo make our further analysis easier, the best way is to change the values into boolean ```True``` and ```False```, where if _'not'_ is present in the string, it will be taken as _'False'_ to show 'absence' of an item and _'True'_ otherwise.\n<br>\nTo carry these, we will use the functions below in our custom function _'change_to_boolean'_:\n* ```pandas.DataFrame.apply``` <br>\n> __Format:__ ```DataFrame.apply(func, axis=0, raw=False, result_type=None, args=(), **kwds)```\n> <br>Apply a function along an axis of the DataFrame.\n* and ```lambda``` which represents an anonymous function, where if it is used with previous ```pd.Series.apply```, each element of the series is fed into this lambda function. Here we use this for our _if-else_ condition mentioned above.\n> The result will be another ```pd.Series``` with each element run through that ```lambda```.\n\nTo check the output later and also to verify with original data, we will use<br>\n```pandas.Series.value_counts```<br><br>\n__Format:__ ```Series.value_counts(normalize=False, sort=True, ascending=False, bins=None, dropna=True)```<br>\nReturns a Series containing counts of unique values. The resulting object will be in descending order so the first element is the most frequently-occurring element. Excludes NA values by default.","a7f7bee3":"### <font color=green><u> Q1. How presence of cocoa butter and lecithin effect rating in last three years (2018-2020)?<\/u> <\/font>\n\nTo lower the viscosity of chocolate and to actually bind the ingredients, both of these element serves this big purpose. But the question is which of these is popular. Well actually cocoa butter is always the better option but its comparatively expensive. Next option is to use both of these in right quantities or use only lecithin to produce cheapest variety of chocolates. In this section, lets check, how these factors effect chocolate bar rating.","11ac1529":"***\n\n## <a id=\"QA\"><font color=blue><u>__Questions and Answers__<\/u><\/font><\/a>\n\n<!-- <blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\"> -->\n    \nNow all that analysis and visualization in previous section have made us more curious about the whole dataset. Let's look into some common questions that comes to the mind and try to solve the same.\n    \n<!-- <\/blockquote> -->","1ee8e466":" Let's select a subset of columns with the relevant data for our analysis.","95f4fcc3":"<u>**Summary:**<\/u><br>\nIt can be seen that most of these countries are _'developing~countries'_.","8769b0bf":"Let's check percentage of cocoa each of these top companies have.\nTo plot a histogram, we use ```matplotlib.pyplot.hist``` here.\n> __Format:__ ```matplotlib.pyplot.hist(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)[source]```","ae8d9a1a":"We have been displaying dataframes. But it gets boring to look into same design every~time. For this special display of _**recipe**_, let's add background color. We will use:<br>\n```df.style.set_properties```\n> By using this, we can use inbuilt functionality to manipulate data frame styling from font color to background color.<br>\n> ```DataFrame.style``` property, returns styler object having a number of useful methods for formatting and visualizing the data frames.","85ad77eb":"***\n\n## <font color=blue><u>__Table of contents__<\/u><\/font> \n * [Data Preparation and Cleaning](#PC)\n     * .columns,.sample(), .shape, .sum()\n     * .unique(), .apply(), lambda\n     * .value_counts(), .info(), .describe()\n * [Exploratory Analysis and Visualization](#AV)\n     * Company And Ingredients\n     * Tastes\n     * Percentage of Cocoa and Variation Over Years\n     * Rating and Cocoa Percent\n     * Correlation between different columns\n * [Questions and Answers](#QA)\n     * How presence of cocoa butter and lecithin effect rating in latest three years (2018-2020)?\n     * How much cocoa is actually preferred by top companies?\n     * From which countries, top companies import cocoa beans?\n     * What must have been the recipe of top rated chocolate in the year 2019?\n     * What are the major regions of chocolate, companies of which, generally makes it to Top 50?\n * [Inferences and Conclusion](#IC)\n * [References and Future Work](#RF)","35477bbb":"Next, we use ```list(set(df1.A) & set(df2.A) & set(df3.A))``` to find total common tastes.","89953a11":"Let's look into our dataset.\n\nTo read the csv file, we will use ```pd.read_csv()``` function, where we will pass path to our csv file which we would like to use for this project.<br>\nLet's call it ```chocolate_raw_df``` as this is just raw or unprocessed dataset now, on which further modifications will be done for it to be prepared for data analysis.","213e9117":"Hence, here we can learn all the different tastes present, tastes preferred as first, second and third. Since, fourth taste is rarely there, lets ignore this column for now.<br>\nSome functions we explore in this section are:\n\n* ```pandas.Series.ravel```\n> __Format:__ ```Series.ravel(order='C')```<br>\n> Returns the flattened underlying data as an numpy.ndarray or ndarray-like\n\n* ```pandas.unique```\n> __Format:__ ```pandas.unique(values)```<br>\n> Uniques are returned in order of appearance, though this does NOT sort.<br>\n> Significantly faster than numpy.unique. Includes NA values.\n\n* ```pandas.DataFrame.count```\n> __Format:__ ```DataFrame.count(axis=0, level=None, numeric_only=False)```<br>\n> Counts non-NA cells for each column or row. The values None, NaN, NaT, and optionally numpy.inf (depending on pandas.options.mode.use_inf_as_na) are considered NA.\n\n* ```pandas.DataFrame.size```\n> __Format:__ ```property DataFrame.size```<br>\n> Return an int representing the number of elements in this object. Returns the number of rows if Series. Otherwise returns the number of rows times number of columns if DataFrame.\n\n* ```pandas.DataFrame.head```\n> __Format:__ ```DataFrame.head(n=5)```<br>\n> This function returns the first n rows for the object based on position. It is useful for quickly testing if an object has the right type of data in it.<br>\n> For negative values of n, this function returns all rows except the last n rows, equivalent to df[:-n].<br>\n\n* Functions provided by ```matplotlib-venn``` for plotting area-proportional two- and three-way _Venn diagrams_ in matplotlib.<br>\n> The functions ```venn2_circles``` and ```venn3_circles``` draw just the circles, whereas the functions ```venn2``` and ```venn3``` draw the diagrams as a collection of colored patches, annotated with text labels.<br> To install:<br>\n> ```pip install matplotlib-venn```\n","c174807e":"<u>**Summary:**<\/u><br>\nSugar is the most common ingredient, followed by cocoa butter, lecithin and vanilla. Salt as least preferred by companies.","b8ca40fb":"***\n### <font color=green><u> Q4. What must have been the recipe of top rated chocolate in the year 2019?<\/u> <\/font>","a8d39fe6":"<u>**Summary:**<\/u><br>\nAs noticed in previous section 71-73% cocoa being popular among the years. Here, its proved that this generous amount is a safe bet for decent rating. And it is certainly NOT the case that higher the amount of cocoa, higher the rating, though lesser amount of cocoa than average is also a good risk. ","98e4f037":"In this section we explore how the dependence of two variables can be analyzed w.r.t. each other. We can use _joint plot_. A ```jointplot``` augments a bivariate relational or distribution plot with the marginal distributions of the two variables.<br>\nIn short. we visualize how rating & cocoa amount vary using the ```jointplot``` function from ```seaborn```.<br>\n> __Format:__ ```jointplot(x, y[, data, kind, stat_func, ...])```<br>\n> Setting a different ```kind=\"kde\"``` in ```jointplot()``` basically combines two different plots._KDE_ shows the density where the points match up the most . Therefore, It is used to draw a plot of two variables with bivariate and univariate graphs.<br>\n> A kernel density estimate (KDE) plot is a method for visualizing the distribution of observations in a dataset, analagous to a histogram. Several other figure-level plotting functions in seaborn make use of the ```histplot()``` and ```kdeplot()``` functions.<br>\n> x and y are two strings that are the column names and the data that column contains is used by specifying the data parameter.\nhere we can see ```cocoa_percent``` on the _y axis_ and ```rating``` on the _x axis_. _Shade of color_ represents the density of values in a region of the graph.","a0a0e0ac":"***\n### <font color=green><u> Q2. How much cocoa is actually preferred by top companies?<\/u> <\/font>","3b3f4e7b":"We create ```cocoa_or_lecithin_all``` to view the present data in consideration. Then lets create ```cocoa_or_lecithin``` which only has last 3 years data from dataframe ```cocoa_or_lecithin_all```. We move '```cocoa_butter```' and '```lecithin```' to the ```index``` and then ```unstack``` them. This action will assume we have only one (lecithin, cocoa_butter) combination per rating.<br>\n```Stacking``` a DataFrame means moving (also rotating or pivoting) the innermost column index to become the innermost row index and yes as you guessed, the inverse operation is called _unstacking_ which means moving the innermost row index to become the innermost column index again.\n\nHere we will be using visualization function:\n```pandas.DataFrame.plot```<br>\n> __Format:__ ```DataFrame.plot(x=None, y=None, kind='line', ax=None, subplots=False, sharex=None, sharey=False, layout=None, figsize=None, use_index=True, title=None, grid=None, legend=True, style=None, logx=False, logy=False, loglog=False, xticks=None, yticks=None, xlim=None, ylim=None, rot=None, fontsize=None, colormap=None, table=False, yerr=None, xerr=None, secondary_y=False, sort_columns=False, **kwds)```<br>\n> Make plots of a Series or a DataFrame.\n\n","7b48a87f":"<u>**Summary:**<\/u><br>\nWell top recipe does indicate dark chocolate. One of the recipe being using only cocoa butter and sugar over lecithin where it has creamy, fruity & nutty tastes. Another being cocoa butter and  sugar with fig as the only taste.<br>","c8493457":"Well, we've now cleaned up and prepared the dataset all ready for analysis.\n<br>\nLet's take a look at sample of rows from the data frame.","3a5bd8ee":"***\n\n## <a id=\"AV\"><font color=blue><u>__Exploratory Analysis and Visualization__<\/u><\/font><\/a>\n\n<!-- <blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\"> -->\n\nIn this section, we compute mean, percentage etc. We also sort values, explore some more kinds of plot graphs, draw venn diagram and learn about correlation to know interdependence between two or more column variables. We also look into other useful functions such as size and head.\n    \n<!-- <\/blockquote> -->","b6f6521a":"To see interdependence between two or more variables, use correlation function ```pandas.DataFrame.corr```. Then we can, check all the correlations simultaneously.\n> __Format:__ ```DataFrame.corr(method='pearson', min_periods=1)```<br>\n> Computes pairwise correlation of columns, excluding NA\/null values.<br>\n> Returns : A DataFrame (Correlation matrix).<br>\n> The _Pearson method_ is used by default, but the _Pandas_ allows the use of other indexes.<br>\n\n> * 0.9 to 1 positive or negative indicates a very strong correlation.<br>\n> * 0.7 to 0.9 positive or negative indicates a strong correlation.<br>\n> * 0.5 to 0.7 positive or negative indicates a moderate correlation.<br>\n> * 0.3 to 0.5 positive or negative indicates a weak correlation.<br>\n> * 0 to 0.3 positive or negative indicates a negligible corr<br>\n\nTo facilitate this visualization of the correlations, it is possible to use the colors. Let's use the ```heatmap``` function in ```seaborn```.\n> ```seaborn.heatmap```<br>\n> __Format:__ ```seaborn.heatmap(data, *, vmin=None, vmax=None, cmap=None, center=None, robust=False, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor='white', cbar=True, cbar_kws=None, cbar_ax=None, square=False, xticklabels='auto', yticklabels='auto', mask=None, ax=None, **kwargs)```<br>\n> Plots rectangular data as a color-encoded matrix.<br>\n> Annotates each cell with the numeric value using integer formatting.<br>\n> The color gradation is observed in relation to the positive and negative correlations.<br>","2f30e648":"## <a id=\"IC\"><font color=blue><u>__Inferences and Conclusion__<\/u><\/font><\/a>\n\n* 71-73% cocoa is a safe bet as dark chocolates are gaining popularity over the years!\n* There is atleast 155 common tastes which is preferred for first, second and third tastes.\n* Sugar is the most common ingredient, followed by cocoa butter, lecithin and vanilla. Salt as least preferred by companies.\n* Adding only cocoa butter over lecithin does have better chances in gaining good score.\n* Beans are mostly originated in developing countries and is exported to developed countries.","747a8cfe":"<u>**Summary:**<\/u><br>\nAs we can see here using both cocoa butter and lecithin does equally good. But only adding Cocoa butter does have better chances in gaining good score.","5d074323":"We use ```pandas.DataFrame.max``` here:\n> __Format__ ```DataFrame.max(axis=None, skipna=None, level=None, numeric_only=None, **kwargs)```<br>\n> Returns the maximum of the values for the requested axis.","344183a2":"Let's  use ```seaborn.lineplot``` this time to draw a line plot with possibility of several semantic groupings.<br>\n> __Format:__ ```seaborn.lineplot(*, x=None, y=None, hue=None, size=None, style=None, data=None, palette=None, hue_order=None, hue_norm=None, sizes=None, size_order=None, size_norm=None, dashes=True, markers=None, style_order=None, units=None, estimator='mean', ci=95, n_boot=1000, seed=None, sort=True, err_style='band', err_kws=None, legend='auto', ax=None, **kwargs)```<br>\n> By default, the plot aggregates over multiple y values at each value of x and shows an estimate of the central tendency and a confidence interval for that estimate.Passing the entire dataset in long-form mode will aggregate over repeated values (each year) to show the mean and 95% confidence interval:","ac58268b":"This was cool. Let's see what are the companies included in our data.","c1b8bceb":"We can also use ```pandas.DataFrame.describe``` to generate descriptive statistics.\n> __Format:__ ```DataFrame.describe(percentiles=None, include=None, exclude=None, datetime_is_numeric=False)[source]```\n\n_Descriptive statistics_ include those that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution, excluding ```NaN``` values. Analyzes both numeric and object series, as well as ```DataFrame``` column sets of mixed data types.","209b5d93":"Let's begin our analysis and visualization journey by importing ```matplotlib.pyplot``` and ```seaborn``` first.","5611b076":"Now, looking into values in columns such as *cocoa_butter, vanilla, lecithin, salt and, sugar* we can see some kind of similar variation in data of each column. Let's have a look at one of these:","319c0342":"***\n### <font color=green><u>5. Correlation between different columns<\/u> <\/font>","8acaecd5":"We can also check missing values using ```pandas.DataFrame.isna```\n> __Format:__ ```DataFrame.isna()```<br>\n> Returns dataFrame: Mask of bool values for each element in DataFrame that indicates whether an element is not an NA value.\n\nand hence, adding all to get _total sum_ of missing values in each column.","35b9852a":"We create ```ingredients_df``` to view the present data in consideration. Here we will be using functions such as:\n* ```pandas.DataFrame.mean```\n> __Format:__ ```DataFrame.mean(axis=None, skipna=None, level=None, numeric_only=None, **kwargs)```\n> Return the mean of the values for the requested axis as Series or DataFrame (if level specified).\n\n* ```pandas.DataFrame.sort_values```\n> __Format:__ ```DataFrame.sort_values(by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last', ignore_index=False, key=None)```\n> Sort by the values along either axis.\n\n* We will use horizontal bars to visualize our data. Rotating to a horizontal bar chart from traditional vertical one, is one way to give some variance to a report. This kind of chart also allow for extra long bar titles.<br>To draw a set of horizontal bars here, we will use```seaborn.barplot``` <br>\n> __Format:__ ```ax = sns.barplot(x, y)```\n\nLabelling of the axis is achieved using the Matplotlib syntax on the \u201c```plt```\u201d object imported from ```pyplot```. The key functions used here are:<br>\n\n* \u201c```xlabel```\u201d to add an x-axis label\n* \u201c```ylabel```\u201d to add a y-axis label\n* \u201c```title```\u201d to add a plot title","5ee1b10d":"***\n\n## <a id=\"PC\"><font color=blue><u>__Data Preparation and Cleaning__<\/u><\/font><\/a>\n\n<!-- <blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\"> -->\n    \nIn this section, we select relevant data, explore various details such as shape, unique values, information about columns, its values, missing values, count the same, memory usage, sample the same etc. and make any appropriate changes if needed.\n    \n<!-- <\/blockquote> -->","5b793f78":"***\n\n## <a id=\"RF\"><font color=blue><u>__References and Future Work__<\/u><\/font><\/a>\n\n<!-- <blockquote style=\"margin-right:auto; margin-left:auto; background-color: #ebf9ff; padding: 1em; margin:24px;\"> -->\n\n* **_Reference Links:_**<br>\n    * [dataset](https:\/\/www.kaggle.com\/soroushghaderi\/chocolate-bar-2020)\n    * [seaborn](http:\/\/seaborn.pydata.org\/)\n    * [visualization](https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.9.1\/visualization.html)\n    * [pandas.DataFrame.xs](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.xs.html)\n    * [pandas-docs](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/style.html)\n    * [center-a-matplotlib-figure](https:\/\/moonbooks.org\/Articles\/How-to-center-a-matplotlib-figure-in-a-Jupyter-notebook-\/)\n    * [visualization-with-pandas-plot](https:\/\/kanoki.org\/2019\/09\/16\/dataframe-visualization-with-pandas-plot\/)\n    * [color_palettes](https:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html)\n    * [colormaps](https:\/\/matplotlib.org\/3.1.1\/tutorials\/colors\/colormaps.html)\n    * [visualizing_set_diagrams](https:\/\/monstott.github.io\/visualizing_set_diagrams_with_python)\n    * [if-condition-in-pandas](https:\/\/datatofish.com\/if-condition-in-pandas-dataframe\/)\n    * [python-lambda-functions](https:\/\/mode.com\/python-tutorial\/pandas-groupby-and-python-lambda-functions\/)\n    * [seaborn.barplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.barplot.html)\n    * [find-the-unique-values-in-multiple-columns](https:\/\/www.kite.com\/python\/answers\/how-to-find-the-unique-values-in-multiple-columns-of-a-pandas-dataframe-in-python)\n    * [medium.com\/dunder-data](https:\/\/medium.com\/dunder-data\/selecting-subsets-of-data-in-pandas-39e811c81a0c)\n    * [matplotlib-venn](https:\/\/pypi.org\/project\/matplotlib-venn\/)\n    * [seaborn-distribution-plots](https:\/\/www.geeksforgeeks.org\/seaborn-distribution-plots\/)\n    * [area-plot](https:\/\/pythontic.com\/pandas\/dataframe-plotting\/area-plot)\n    * [correlation](https:\/\/medium.com\/brdata\/correlation-straight-to-the-point-e692ab601f4c)\n    * [seaborn.heatmap](https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html)\n    * [the-art-of-subplots](https:\/\/towardsdatascience.com\/master-the-art-of-subplots-in-python-45f7884f3d2e)\n    * [set-the-spacing-between-subplots](https:\/\/www.kite.com\/python\/answers\/how-to-set-the-spacing-between-subplots-in-matplotlib-in-python)\n    * [pandas-dataframe-background-color](https:\/\/www.geeksforgeeks.org\/set-pandas-dataframe-background-color-and-font-color-in-python\/)\n    * [stack-and-unstack-explained](https:\/\/nikgrozev.com\/2015\/07\/01\/reshaping-in-pandas-pivot-pivot-table-stack-and-unstack-explained-with-pictures\/)\n    * [stackoverflow.com](https:\/\/stackoverflow.com\/questions\/19060144\/more-efficient-matplotlib-stacked-bar-chart-how-to-calculate-bottom-values)\n    * [www.shanelynn.ie\/bar-plots-in-python-using-pandas-dataframes](https:\/\/www.shanelynn.ie\/bar-plots-in-python-using-pandas-dataframes\/#:~:text=Stacked%20bar%20plots,-In%20the%20stacked&text=Pandas%20makes%20this%20easy%20with,each%20x%2Daxis%20tick%20mark.)\n    * [scentellegher.github.io\/programming](https:\/\/scentellegher.github.io\/programming\/2017\/07\/15\/pandas-groupby-multiple-columns-plot.html)\n<br>\n***\n* **_Future Work:_**<br>\nThis dataset can be combined with respective company market data to know more about sales and shares. But for starters, the next immediate step can be, building a real-world machine learning model. For example, by looking at this dataset, the target \u2018rating\u2019 can be predicted with the help of many useful features here such as 'company', 'company_location', \u2018country_of_bean_origin', all the ingredients and tastes we have explored & analysed here. If we can do so, for this historical data, then we should be able to estimate ratings for new\/future data too.\n    \n<!-- <\/blockquote> -->","e4e2845b":"Since having three tastes is pretty common, we consider ```first_taste```, ```second_taste``` and ```third_taste``` data from our ```chocolate_df``` dataframe. As this is a _three-circle_ case, we will be using ```venn3``` function.","4df759eb":"***\n### <font color=green><u>3. Percentage of  Cocoa and Variation Over Years<\/u> <\/font>","e87c7a9b":"***\n### <font color=green><u>4. Rating and Cocoa Percent<\/u> <\/font>\n\nLet's see how _cocoa_ amount in chocoloate bars affects its rating. ","64c14971":"Looks like there are 21 columns. Let's see all the columns using ```chocolate_raw_df.columns```","cbfe4bb9":"***\n### <font color=green><u>2. Tastes<\/u> <\/font>\n\nIn the dataset, in column description, we noticed that there is data of first taste, second, third and fourth taste. Lets look into all the tastes, all the common tastes which is switched between these four, most common tastes in each of these four categories and finally draw a venn diagram to get a better view.","3718b3df":"<u>**Summary:**<\/u><br>\nChocolate is broadly classified by the amount of cocoa it contains. And generally, over 70% cocoa is dark chocolate. Therefore, this implies, many top rated companies have preferred manufacturing dark chocolates over other versions of chocolates.","c9c122d8":"<u>**Summary:**<\/u><br>\nFrom the measuring chart in section introduction, we can see _lecithin and cocoa butter;_ or  _lecithin and vanilla_ have a weak correlation whereas _vanilla and rating_; _cocoa percent and cocoa butter\/lecithin\/vanilla_ have negligible correlation.","acb4c94a":"<u>**Summary:**<\/u><br>\nIn top 50, most companies are from U.S.A who generally get best ratings on an average, followed by Japan and Australia. But looking at most of these countries, it is implied that most of these are developed countries.","c28d49ba":"Note: If _x-axis_ labels that are too long for comfortable display, there\u2019s two options in this case \u2013<br>\nrotating the labels to make a bit more space, or rotating the entire chart to end up with a horizontal bar chart.<br>\nThe ```xticks``` function from ```Matplotlib``` is used here, with the rotation.\n> The Matplotlib \u201c```xtick```\u201d function is used to rotate the labels on axes, allowing for longer labels when needed.","58ea8f7a":"#  <center><font color=red><u>__CHOCOLATE BAR RECIPE TREND ANALYSIS<br>(2006-2020)__<\/u><\/font><\/center>\n<br>\n\n![](https:\/\/image.shutterstock.com\/image-photo\/chocolate-bar-pieces-cocoa-beans-600w-1303588735.jpg)\n\n__Here we will study chocolate bar ingredient trends, preferences by companies and its rating. We will mostly use Numpy, Pandas to compute the results and, Matplotlib & Seaborn for plotting graphs. The dataset used in this project is taken from [kaggle.com](https:\/\/www.kaggle.com\/soroushghaderi\/chocolate-bar-2020?select=chocolate.csv) and contains data about 66 chocolate bar companies such as  'company', 'company_location', 'country_of_bean_origin',  'review_date', chocolate 'rating', 'cocoa_percent', common ingredients and tastes information.__\n<br><br>\n__<u>According to Flavors of Cacao Rating Scale<\/u>:__\n<br>\n4.0 - 5.0 &emsp;=&emsp; Outstanding<br>\n3.5 - 3.9 &emsp;=&emsp; Highly Recommended<br>\n3.0 - 3.49&ensp;&nbsp;=&emsp; Recommended<br>\n2.0 - 2.9 &emsp;=&emsp; Disappointing<br>\n1.0 - 1.9 &emsp;=&emsp; Unpleasant<br>","cda3eb58":"<u>**Summary:**<\/u><br>\nIn 2009, less cocoa amount in chocolate bars was popular, but 71-73% cocoa is generally popular over the years. So, 71-73% cocoa is a safe bet!","c5619825":"We can see company 'Soma' has many variety of chocolate bars in our dataset. Let's check in details:","a6cabbf0":"Let's now use ```pandas.DataFrame.info``` to print a concise summary of our DataFrame.\n> __Format:__```DataFrame.info(verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None)```<br>\n> This method prints information about a DataFrame including the index dtype and columns, non-null values and memory usage."}}