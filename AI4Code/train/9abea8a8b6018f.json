{"cell_type":{"055dfbcc":"code","c310ba1a":"code","c4108e26":"code","5f77d0a3":"code","6eb610cb":"code","2b072016":"code","35c9343f":"code","af8c0678":"code","b4cd7938":"code","16634d48":"code","70a7a865":"code","350575e7":"code","01d554d3":"code","823a4224":"code","8f0193d4":"code","dbadc028":"code","4c674691":"code","26fc08eb":"code","2240e0ad":"code","5ba89287":"code","fd55a9b9":"code","383c8905":"code","cd6c48d8":"code","194cdffb":"code","68d524b1":"code","ddb06ff2":"code","b11d865f":"code","e63f30dd":"code","1fd44ae9":"code","dc7d90fe":"code","d7604c32":"code","9bb8b323":"code","5cb020d6":"code","e4748669":"code","81713cb1":"code","69fafa91":"code","c1056bce":"code","8b85e4d6":"code","f8bed497":"code","a9a69eac":"code","ff943b00":"code","75993616":"code","d4e259de":"code","f9add92f":"code","d7406e22":"code","a109c364":"code","050a6768":"code","6da7ae8e":"code","4acc9004":"code","60794d3c":"code","a783278a":"code","0f6287d1":"code","74144f03":"code","2c8b215e":"code","08994dae":"code","2a41288e":"code","07019f4c":"code","2da2bb21":"code","fd282ffd":"code","53d41a43":"code","19fb23e4":"code","cacab410":"markdown","6e23dddc":"markdown","40adad90":"markdown","fc46a129":"markdown","a775fbb7":"markdown","df20270b":"markdown","f3b90596":"markdown","37cb0fdd":"markdown","8b31c46c":"markdown","acdc5e97":"markdown","a496cbcc":"markdown","34499e74":"markdown","08b98c1c":"markdown","55f529e6":"markdown","9f212d1f":"markdown","6909a494":"markdown","811c3775":"markdown","5253982e":"markdown","fb1afbbc":"markdown","6bc26c5d":"markdown"},"source":{"055dfbcc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c310ba1a":"data = pd.read_csv('..\/input\/train_V2.csv')","c4108e26":"data.iloc[:10,]","5f77d0a3":"print('There are {:,} rows and {} columns.'.format(data.shape[0], data.shape[1]))","6eb610cb":"print('There are {} continuous variables and {} categorical variables.'.format(len([x for x in data.dtypes if x == 'int64' or x == 'float64']),len([x for x in data.dtypes if x == 'object'])))\ncat_var = [data.columns[i] for i, x in enumerate(data.dtypes) if x == 'object']\nprint('The categorical variables are {}.'.format(cat_var))\ncont_var = [data.columns[i] for i, x in enumerate(data.dtypes) if x == 'int64' or x == 'float64']\nprint('\\nThe continuous variables are {}.'.format(cont_var))","2b072016":"print('Id - Player\u2019s Id')\nId_describe = data.Id.describe()\nprint(Id_describe)","35c9343f":"print('groupId - ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.')\ngroupId_describe = data.groupId.describe()\nprint(groupId_describe)\nprint('{:.2%} of groupId is unique.'.format(groupId_describe['unique']\/groupId_describe['count']))","af8c0678":"groupId_freq = data.groupId.value_counts()\ngroupId_freq.plot(kind='box')\nprint(groupId_freq.describe())\nprint('The median frequency of groupId is {}.'.format(groupId_freq.median()))","b4cd7938":"print('matchId - ID to identify match. There are no matches that are in both the training and testing set.')\nmatchId_describe = data.matchId.describe()\nprint(matchId_describe)\nprint('{:.2%} of matchId is unique.'.format(matchId_describe['unique']\/matchId_describe['count']))\nmatchId_freq = data.matchId.value_counts()\nmatchId_freq.plot(kind='box')\nprint(matchId_freq.describe())\nprint('The median frequency of matchId is {}.'.format(matchId_freq.median()))","16634d48":"print('matchType - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.')\nmatchType_describe = data.matchType.describe()\nprint(matchType_describe)\n\nmatchType_freq = data.matchType.value_counts()\nmatchType_freq.plot(kind='box')\nprint(matchType_freq.describe())","70a7a865":"matchType_freq.plot(kind='bar', title='Frequency plot of matchType')","350575e7":"print('assists - Number of enemy players this player damaged that were killed by teammates.')\nassists_describe = data.assists.describe()\nprint(assists_describe)\n\ndata.assists.plot(kind='box')\nprint('The median assists is {}.'.format(data.assists.median()))","01d554d3":"print('There are {:,} observations with at least one assists, which is {:.2%} of total observations.'.format(len([x for x in data.assists if x > 0]),len([x for x in data.assists if x > 0])\/len(data.assists)))","823a4224":"print('boosts - Number of boost items used.')\nprint(\"Boosts items are items that increases the player's boost bar, which benefits the player's health regeneration and\/or movement speed.\")\nboosts_describe = data.boosts.describe()\nprint(boosts_describe)\n\ndata.boosts.plot(kind='box')\nprint('The median boost item used is {}.'.format(data.boosts.median()))","8f0193d4":"print('There are {:,} observations with at least one boosts, which is {:.2%} of total observations.'.format(len([x for x in data.boosts if x > 0]),len([x for x in data.boosts if x > 0])\/len(data.boosts)))","dbadc028":"print('damageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.')\n\ndamageDealt_describe = data.damageDealt.describe()\nprint(damageDealt_describe)\n\ndata.damageDealt.plot(kind='box')\nprint('The median damageDealt is {}.'.format(data.damageDealt.median()))","4c674691":"print('There are {:,} observations with damageDealth more than zero, which is {:.2%} of total observations.'.format(len([x for x in data.damageDealt if x > 0]),len([x for x in data.damageDealt if x > 0])\/len(data.damageDealt)))","26fc08eb":"print('DBNOs - Number of enemy players knocked.')\nprint('''Knocked down happens when a player hit points reach zero during a duo or squad match. \nIn solo games, player dies instead of knocked down.\nKnocking enemy down is not equivalent to killing the enemy.''')\nDBNOs_describe = data.DBNOs.describe()\nprint(DBNOs_describe)\n\ndata.DBNOs.plot(kind='box')\nprint('The median DBNOs is {}.'.format(data.DBNOs.median()))","2240e0ad":"print('There are {:,} observations with DBNOs is at least one, which is {:.2%} of total observations.'.format(len([x for x in data.DBNOs if x > 0]),len([x for x in data.DBNOs if x > 0])\/len(data.DBNOs)))","5ba89287":"print('headshotKills - Number of enemy players killed with headshots')\n\nheadshotKills_describe = data.headshotKills.describe()\nprint(headshotKills_describe)\n\ndata.headshotKills.plot(kind='box')\nprint('The median headshotKills is {}.'.format(data.headshotKills.median()))","fd55a9b9":"print('There are {:,} observations with headshotKills is at least one, which is {:.2%} of total observations.'.format(len([x for x in data.headshotKills if x > 0]),len([x for x in data.headshotKills if x > 0])\/len(data.headshotKills)))","383c8905":"print('heals - Number of healing items used.')\nprint(\"Healing items are items that increases the player's health.\")\nheals_describe = data.heals.describe()\nprint(heals_describe)\n\ndata.heals.plot(kind='box')\nprint('The median healing items used is {}.'.format(data.heals.median()))","cd6c48d8":"print('There are {:,} observations with heals is at least one, which is {:.2%} of total observations.'.format(len([x for x in data.heals if x > 0]),len([x for x in data.heals if x > 0])\/len(data.heals)))","194cdffb":"print('killPlace - Ranking in match of number of enemy players killed.')\nprint('killPlace is the ranking in terms of number of enemy killed')\nkillPlace_describe = data.killPlace.describe()\nprint(killPlace_describe)\n\ndata.killPlace.plot(kind='box')","68d524b1":"print('killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.')\n\nkillPoints_describe = data.killPoints.describe()\nprint(killPoints_describe)\n\ndata.killPoints.plot(kind='hist')\n","ddb06ff2":"data.killPoints.plot(kind='box')","b11d865f":"print('There are {:,} observations with killPoints equals zero, which is {:.2%} of total observations.'.format(len([x for x in data.killPoints if x == 0]),len([x for x in data.killPoints if x == 0])\/len(data.killPoints)))\nprint('The lowest rank other than zero is {}.'.format(min([x for x in data.killPoints if x != 0])))","e63f30dd":"print('kills - Number of enemy players killed.')\n\nkills_describe = data.kills.describe()\nprint(kills_describe)\n\ndata.kills.plot(kind='box')\nprint('The median kills is {}.'.format(data.kills.median()))","1fd44ae9":"print('There are {:,} observations with kills of at least one, which is {:.2%} of total observations.'.format(len([x for x in data.kills if x > 0]),len([x for x in data.kills if x > 0])\/len(data.kills)))","dc7d90fe":"print('killStreaks - Max number of enemy players killed in a short amount of time.')\n\nkillStreaks_describe = data.killStreaks.describe()\nprint(killStreaks_describe)\n\ndata.killStreaks.plot(kind='box')\nprint('The median killStreaks is {}.'.format(data.killStreaks.median()))","d7604c32":"print('There are {:,} observations with killStreaks of at least one, which is {:.2%} of total observations.'.format(len([x for x in data.killStreaks if x > 0]),len([x for x in data.killStreaks if x > 0])\/len(data.killStreaks)))","9bb8b323":"print('longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.')\n\nlongestKill_describe = data.longestKill.describe()\nprint(longestKill_describe)\n\ndata.longestKill.plot(kind='box')\nprint('The median longestKill is {}.'.format(data.longestKill.median()))","5cb020d6":"print('There are {:,} observations with longestKill of more than zero, which is {:.2%} of total observations.'.format(len([x for x in data.longestKill if x > 0]),len([x for x in data.longestKill if x > 0])\/len(data.longestKill)))\nprint('The minimum longestKill is {}.'.format(min([x for x in data.longestKill if x != 0])))","e4748669":"print('matchDuration - Duration of match in seconds.')\n\nmatchDuration_describe = data.matchDuration.describe()\nprint(matchDuration_describe)\n\ndata.matchDuration.plot(kind='box')\nprint('The median matchDuration is {}.'.format(data.matchDuration.median()))","81713cb1":"print('The minimum matchDuration is {} seconds.'.format(min(data.matchDuration)))","69fafa91":"print('maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.')\n\nmaxPlace_describe = data.maxPlace.describe()\nprint(maxPlace_describe)\n\ndata.maxPlace.plot(kind='box')\nprint('The median maxPlace is {}.'.format(data.maxPlace.median()))","c1056bce":"print('The minimum maxPlace is {}.'.format(min(data.maxPlace)))","8b85e4d6":"print('numGroups - Number of groups we have data for in the match.')\n\nnumGroups_describe = data.numGroups.describe()\nprint(numGroups_describe)\n\ndata.numGroups.plot(kind='box')\nprint('The median numGroups is {}.'.format(data.numGroups.median()))","f8bed497":"print('rankPoints - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use with caution. Value of -1 takes place of \u201cNone\u201d.')\n\nrankPoints_describe = data.rankPoints.describe()\nprint(rankPoints_describe)\n\ndata.rankPoints.plot(kind='box')\nprint('The median rankPoints is {}.'.format(data.rankPoints.median()))","a9a69eac":"print('There are {:,} observations with rankPoints equals -1 or 0, which is {:.2%} of total observations.'.format(len([x for x in data.rankPoints if x <= 0]),len([x for x in data.rankPoints if x <= 0])\/len(data.rankPoints)))\n\nprint('The lowest rank other than -1 and 0 is {}.'.format(min([x for x in data.rankPoints if x > 0])))","ff943b00":"print('revives - Number of times this player revived teammates.')\nprint('Revives is only possible in non-solo games')\nrevives_describe = data.revives.describe()\nprint(revives_describe)\n\ndata.revives.plot(kind='box')\nprint('The median revives is {}.'.format(data.revives.median()))","75993616":"print('There are {:,} observations with revives of at least one, which is {:.2%} of total observations.'.format(len([x for x in data.revives if x > 0]),len([x for x in data.revives if x > 0])\/len(data.revives)))","d4e259de":"print('rideDistance - Total distance traveled in vehicles measured in meters.')\nprint('For reference, the entire map is a 8km x 8km map.')\nrideDistance_describe = data.rideDistance.describe()\nprint(rideDistance_describe)\n\ndata.rideDistance.plot(kind='box')\nprint('The median rideDistance is {}.'.format(data.rideDistance.median()))","f9add92f":"print('There are {:,} observations with rideDistance of more than zero, which is {:.2%} of total observations.'.format(len([x for x in data.rideDistance if x > 0]),len([x for x in data.rideDistance if x > 0])\/len(data.rideDistance)))","d7406e22":"print('roadKills - Number of kills while in a vehicle.')\n\nroadKills_describe = data.roadKills.describe()\nprint(roadKills_describe)\n\ndata.roadKills.plot(kind='box')\nprint('The median roadKills is {}.'.format(data.roadKills.median()))","a109c364":"print('There are {:,} observations with roadKills of at least one, which is {:.2%} of total observations.'.format(len([x for x in data.roadKills if x > 0]),len([x for x in data.roadKills if x > 0])\/len(data.roadKills)))","050a6768":"print('swimDistance - Total distance traveled by swimming measured in meters.')\nprint('For reference, the entire map is a 8km x 8km map.')\nswimDistance_describe = data.swimDistance.describe()\nprint(swimDistance_describe)\n\ndata.swimDistance.plot(kind='box')\nprint('The median swimDistance is {}.'.format(data.swimDistance.median()))","6da7ae8e":"print('There are {:,} observations with swimDistance of more than zero, which is {:.2%} of total observations.'.format(len([x for x in data.swimDistance if x > 0]),len([x for x in data.swimDistance if x > 0])\/len(data.swimDistance)))","4acc9004":"print('teamKills - Number of times this player killed a teammate.')\nprint('There is friendly fire in PUBG games.')\nteamKills_describe = data.teamKills.describe()\nprint(teamKills_describe)\n\ndata.teamKills.plot(kind='box')\nprint('The median teamKills is {}.'.format(data.teamKills.median()))","60794d3c":"print('There are {:,} observations with teamKills of at least one, which is {:.2%} of total observations.'.format(len([x for x in data.teamKills if x > 0]),len([x for x in data.teamKills if x > 0])\/len(data.teamKills)))","a783278a":"print('vehicleDestroys - Number of vehicles destroyed.')\n\nvehicleDestroys_describe = data.vehicleDestroys.describe()\nprint(vehicleDestroys_describe)\n\ndata.vehicleDestroys.plot(kind='box')\nprint('The median vehicleDestroys is {}.'.format(data.vehicleDestroys.median()))","0f6287d1":"print('There are {:,} observations with vehicleDestroys of at least one, which is {:.2%} of total observations.'.format(len([x for x in data.vehicleDestroys if x > 0]),len([x for x in data.vehicleDestroys if x > 0])\/len(data.vehicleDestroys)))","74144f03":"print('walkDistance - Total distance traveled on foot measured in meters.')\nprint('For reference, the entire map is a 8km x 8km map.')\nwalkDistance_describe = data.walkDistance.describe()\nprint(walkDistance_describe)\n\ndata.walkDistance.plot(kind='box')\nprint('The median walkDistance is {}.'.format(data.walkDistance.median()))","2c8b215e":"print('There are {:,} observations with walkDistance of more than zero, which is {:.2%} of total observations.'.format(len([x for x in data.walkDistance if x > 0]),len([x for x in data.walkDistance if x > 0])\/len(data.walkDistance)))","08994dae":"print('weaponsAcquired - Number of weapons picked up.')\n\nweaponsAcquired_describe = data.weaponsAcquired.describe()\nprint(weaponsAcquired_describe)\n\ndata.weaponsAcquired.plot(kind='box')\nprint('The median weaponsAcquired is {}.'.format(data.weaponsAcquired.median()))","2a41288e":"print('There are {:,} observations with weaponsAcquired of at least one, which is {:.2%} of total observations.'.format(len([x for x in data.weaponsAcquired if x > 0]),len([x for x in data.weaponsAcquired if x > 0])\/len(data.weaponsAcquired)))","07019f4c":"print('winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.')\n\nwinPoints_describe = data.winPoints.describe()\nprint(winPoints_describe)\n\ndata.winPoints.plot(kind='hist')\n","2da2bb21":"print('There are {:,} observations with winPoints equals zero, which is {:.2%} of total observations.'.format(len([x for x in data.winPoints if x == 0]),len([x for x in data.winPoints if x == 0])\/len(data.winPoints)))\nprint('The lowest rank other than zero is {}.'.format(min([x for x in data.winPoints if x != 0])))","fd282ffd":"print('winPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.')\n\nwinPlacePerc_describe = data.winPlacePerc.describe()\nprint(winPlacePerc_describe)\n\ndata.winPlacePerc.plot(kind='hist')\nprint('The median winPlacePerc is {}.'.format(data.winPlacePerc.median()))","53d41a43":"cat_unique = {}\nfor x in cat_var:\n    cat_unique[x] = eval(x+'_describe')['unique']\/eval(x+'_describe')['count'] * 100\n\ncat_summary = pd.DataFrame([x for x in cat_unique.values()], index=cat_var, columns=['Percent Unique'])\ncat_summary","19fb23e4":"cont_median = {}\nfor x in cont_var:\n    cont_median[x] = [data.loc[:,x].median(), len([y for y in data.loc[:,x] if y > 0])\/len(data.loc[:,x])*100]\n\ncont_summary = pd.DataFrame([x for x in cont_median.values()], index=cont_var, columns=['Median','Percent Non-zero'])\ncont_summary.sort_values('Percent Non-zero', ascending=False)","cacab410":"The max frequency of groupId is 74. Does this suggest that there are 74 players in the group?","6e23dddc":"**TL;DR**\n\nA large portion of the data contains zero, which might indicate inactive players or not very good players in the match.","40adad90":"This minimum match duration is suspicious. 9 seconds game?","fc46a129":"Continuous Variable Summary","a775fbb7":"**Univariate Analysis - Continous Variable**\n\nHaving seen all the categorical variables, let's see the continuous variables.","df20270b":"**Summary**\n\nCategorical Variable Summary","f3b90596":"**Univariate Analysis - Categorical**\n\nLet's first take a look at each categorical variables.","37cb0fdd":"The max of 40km travelled may require additional investigation as it implies that there were a lot of travelling in a 8km x 8km map.","8b31c46c":"From the frequency plot, we can see that 6 out of 16 matchType contribute to majority of the observations. The rest of the observations can be grouped as event\/custom, as detailed in the data field description.","acdc5e97":"The min frequency of matchId is 1. Does this mean that the match only has 1 player?","a496cbcc":"We can see that generally there are no assists at all i.e. median = 0. We can find how many assists are at least one.","34499e74":"The maximum of weaponsAcquired is 236, which seems to be too excessive.","08b98c1c":"**Conclusion**\n\nFrom this univariate analysis, we can see that a large portion of the data contains zero, which might indicate inactive players or not very good players in the match.","55f529e6":"Minimum maxPlace = 1 may suggests that match only has one player.","9f212d1f":"Theoretically, the largest ranking should have been 100. However, the maximum rank is 101 in this dataset.","6909a494":"Half of the records are duplicate. Let's see a boxplot of frequency.","811c3775":"Notice that there are many zero ranking.","5253982e":"All Player's Id are unique i.e. there are no duplicates.","fb1afbbc":"Maximum of walkDistance = 25km suggests this player must have walked a lot in the map.","6bc26c5d":"Maximum numGroups = 100 may suggest solo games."}}