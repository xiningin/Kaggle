{"cell_type":{"5789d0b5":"code","9096fe33":"code","87001123":"code","924239ae":"code","23a46380":"code","28d8d080":"code","162bb768":"code","5de1bf2c":"code","a32f71a6":"code","e38aa1df":"code","b34e4fd7":"code","88d3fecc":"code","979953b9":"code","1fcbb12e":"code","a4427974":"code","d49ba6ba":"code","f781928a":"code","55481c89":"code","34fcaac2":"code","abe35195":"code","cbf4a1e5":"code","c959a57f":"code","d6288c0a":"code","fd08b5b5":"code","3e69f19d":"code","44bc3a0c":"markdown","18399e97":"markdown","83d55fc5":"markdown","1b9219ec":"markdown","d167466f":"markdown","4e35e5ee":"markdown","a6b60698":"markdown","646c5d05":"markdown","3da0b623":"markdown","45df843e":"markdown","5c86dd3f":"markdown","3e6999fd":"markdown","4748c7c1":"markdown","5a76abae":"markdown","ca18912c":"markdown","6172def6":"markdown","a01d7794":"markdown","d1a205e3":"markdown","ca36cc0d":"markdown","2641e188":"markdown"},"source":{"5789d0b5":"pip install -q git+https:\/\/github.com\/tensorflow\/examples.git","9096fe33":"!pip install tensorflow_datasets","87001123":"from __future__ import absolute_import, division, print_function, unicode_literals\nimport tensorflow as tf\n\nfrom tensorflow_examples.models.pix2pix import pix2pix\n\nimport tensorflow_datasets as tfds\ntfds.disable_progress_bar()\n\nfrom IPython.display import clear_output\nimport matplotlib.pyplot as plt","924239ae":"dataset, info = tfds.load('oxford_iiit_pet:3.*.*', with_info=True)","23a46380":"def normalize(input_image, input_mask):\n  input_image = tf.cast(input_image, tf.float32) \/ 255.0\n  input_mask -= 1\n  return input_image, input_mask","28d8d080":"@tf.function\ndef load_image_train(datapoint):\n  input_image = tf.image.resize(datapoint['image'], (128, 128))\n  input_mask = tf.image.resize(datapoint['segmentation_mask'], (128, 128))\n\n  if tf.random.uniform(()) > 0.5:\n    input_image = tf.image.flip_left_right(input_image)\n    input_mask = tf.image.flip_left_right(input_mask)\n\n  input_image, input_mask = normalize(input_image, input_mask)\n  return input_image, input_mask","162bb768":"def load_image_test(datapoint):\n  input_image = tf.image.resize(datapoint['image'], (128, 128))\n  input_mask = tf.image.resize(datapoint['segmentation_mask'], (128, 128))\n  input_image, input_mask = normalize(input_image, input_mask)\n  return input_image, input_mask","5de1bf2c":"TRAIN_LENGTH = info.splits['train'].num_examples\nBATCH_SIZE = 64\nBUFFER_SIZE = 1000\nSTEPS_PER_EPOCH = TRAIN_LENGTH ","a32f71a6":"train = dataset['train'].map(load_image_train, num_parallel_calls=tf.data.experimental.AUTOTUNE)\ntest = dataset['test'].map(load_image_test)","e38aa1df":"train_dataset = train.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()\ntrain_dataset = train_dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\ntest_dataset = test.batch(BATCH_SIZE)","b34e4fd7":"def display(display_list):\n  plt.figure(figsize=(15, 15))\n\n  title = ['Input Image', 'True Mask', 'Predicted Mask']\n\n  for i in range(len(display_list)):\n    plt.subplot(1, len(display_list), i+1)\n    plt.title(title[i])\n    plt.imshow(tf.keras.preprocessing.image.array_to_img(display_list[i]))\n    plt.axis('off')\n  plt.show()","88d3fecc":"for image, mask in train.take(1):\n  sample_image, sample_mask = image, mask\ndisplay([sample_image, sample_mask])","979953b9":"OUTPUT_CHANNELS = 3","1fcbb12e":"base_model = tf.keras.applications.MobileNetV2(input_shape=[128, 128, 3], include_top=False)\n# Use the activations of these layers\nlayer_names = [\n    'block_1_expand_relu',   # 64x64\n    'block_3_expand_relu',   # 32x32\n    'block_6_expand_relu',   # 16x16\n    'block_13_expand_relu',  # 8x8\n    'block_16_project',      # 4x4\n]\nlayers = [base_model.get_layer(name).output for name in layer_names]\n\n# Create the feature extraction model\ndown_stack = tf.keras.Model(inputs=base_model.input, outputs=layers)\ndown_stack.trainable = False","a4427974":"up_stack = [\n    pix2pix.upsample(512, 3),  # 4x4 -> 8x8\n    pix2pix.upsample(256, 3),  # 8x8 -> 16x16\n    pix2pix.upsample(128, 3),  # 16x16 -> 32x32\n    pix2pix.upsample(64, 3),   # 32x32 -> 64x64\n]","d49ba6ba":"def unet_model(output_channels):\n  inputs = tf.keras.layers.Input(shape=[128, 128, 3])\n  x = inputs\n\n  # Downsampling through the model\n  skips = down_stack(x)\n  x = skips[-1]\n  skips = reversed(skips[:-1])\n\n  # Upsampling and establishing the skip connections\n  for up, skip in zip(up_stack, skips):\n    x = up(x)\n    concat = tf.keras.layers.Concatenate()\n    x = concat([x, skip])\n\n  # This is the last layer of the model\n  last = tf.keras.layers.Conv2DTranspose(\n      output_channels, 3, strides=2,\n      padding='same')  #64x64 -> 128x128\n\n  x = last(x)\n  return tf.keras.Model(inputs=inputs, outputs=x)","f781928a":"model = unet_model(OUTPUT_CHANNELS)\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","55481c89":"tf.keras.utils.plot_model(model, show_shapes=True)","34fcaac2":"def create_mask(pred_mask):\n  pred_mask = tf.argmax(pred_mask, axis=-1)\n  pred_mask = pred_mask[..., tf.newaxis]\n  return pred_mask[0]","abe35195":"def show_predictions(dataset=None, num=1):\n  if dataset:\n    for image, mask in dataset.take(num):\n      pred_mask = model.predict(image)\n      display([image[0], mask[0], create_mask(pred_mask)])\n  else:\n    display([sample_image, sample_mask,\n             create_mask(model.predict(sample_image[tf.newaxis, ...]))])","cbf4a1e5":"show_predictions()","c959a57f":"class DisplayCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs=None):\n    clear_output(wait=True)\n    show_predictions()\n    print ('\\nSample Prediction after epoch {}\\n'.format(epoch+1))","d6288c0a":"EPOCHS = 20\nVAL_SUBSPLITS = 5\nVALIDATION_STEPS = info.splits['test'].num_examples\n\nmodel_history = model.fit(train_dataset, epochs=EPOCHS,\n                          steps_per_epoch=STEPS_PER_EPOCH,\n                          validation_steps=VALIDATION_STEPS,\n                          validation_data=test_dataset,\n                          callbacks=[DisplayCallback()])","fd08b5b5":"loss = model_history.history['loss']\nval_loss = model_history.history['val_loss']\n\nepochs = range(EPOCHS)\n\nplt.figure(figsize = (10, 8)) \nplt.plot(epochs, loss, 'r', label='Training loss')\nplt.plot(epochs, val_loss, 'bo', label='Validation loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss Value')\nplt.ylim([0, 1])\nplt.legend()\nplt.show()","3e69f19d":"show_predictions(test_dataset, 7)","44bc3a0c":"![](https:\/\/www.tensorflow.org\/tutorials\/images\/segmentation_files\/output_a6u_Rblkteqb_0.png)","18399e97":"## We are Using Oxford IIIT Pet Dataset The dataset consists of images, their corresponding labels, and pixel-wise masks. The masks are basically labels for each pixel. Each pixel is given one of three categories \n\n*    Class 1 : Pixel belonging to the pet.\n*     Class 2 : Pixel bordering the pet.\n*     Class 3 : None of the above\/ Surrounding pixel.","83d55fc5":"# Image Segmentation using Tensorflow","1b9219ec":"## Let's Train the model","d167466f":"![](https:\/\/media.giphy.com\/media\/l3q2FnW3yZRJVZH2g\/giphy.gif)","4e35e5ee":"## Let's observe how the model improves while it is training. To accomplish this task, a callback function is defined below. ","a6b60698":"## The decoder\/upsampler is simply a series of upsample blocks implemented in TensorFlow examples.","646c5d05":"## Defining the Unet","3da0b623":"## Let's Begin","45df843e":"# First question arise what is Image Segmentation?","5c86dd3f":"## The following code performs a simple augmentation of flipping an image. In addition, image is normalized to [0,1]. Finally, as mentioned above the pixels in the segmentation mask are labeled either {1, 2, 3}. For the sake of convenience, let's subtract 1 from the segmentation mask, resulting in labels that are : {0, 1, 2}.","3e6999fd":"## The dataset already contains the required splits of test and train and so let's continue to use the same split.","4748c7c1":"# Now it's time to the define the model","5a76abae":"## Let's try out the model to see what it predicts before training.","ca18912c":"![](https:\/\/miro.medium.com\/max\/2592\/1*rZ1vDrOBWqISFiNL5OMEbg.jpeg)","6172def6":"## The reason to output three channels is because there are three possible labels for each pixel. Think of this as multi-classification where each pixel is being classified into three classes.","a01d7794":"# Upvote my kernel if you like it","d1a205e3":"## Have a quick look at the resulting model architecture","ca36cc0d":"## So far you have seen image classification, where the task of the network is to assign a label or class to an input image. However, suppose you want to know where an object is located in the image, the shape of that object, which pixel belongs to which object, etc. In this case you will want to segment the image, i.e., each pixel of the image is given a label. Thus, the task of image segmentation is to train a neural network to output a pixel-wise mask of the image. This helps in understanding the image at a much lower level, i.e., the pixel level. Image segmentation has many applications in medical imaging, self-driving cars and satellite imaging to name a few.","2641e188":"## The model being used here is a modified U-Net. A U-Net consists of an encoder (downsampler) and decoder (upsampler). In-order to learn robust features, and reduce the number of trainable parameters, a pretrained model can be used as the encoder. Thus, the encoder for this task will be a pretrained MobileNetV2 model,"}}