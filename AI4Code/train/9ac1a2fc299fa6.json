{"cell_type":{"a702f5ba":"code","76e8396d":"code","8c01a0ff":"code","c5281e8c":"code","143bd9b1":"code","a9b84a27":"code","213ae0de":"code","2440acb3":"code","bb08ad7c":"code","4f88bcf4":"code","dc0cf02a":"code","9c50c9a0":"code","bd54cc37":"code","5409748e":"code","927ee60f":"code","f2976c84":"code","3305fc7b":"code","f8723a25":"code","9976027b":"code","e3b5c2da":"code","0f16aa81":"code","f7228e37":"code","44719c02":"code","397638ef":"code","f5120fd2":"code","cc744311":"code","1fd3b846":"markdown"},"source":{"a702f5ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","76e8396d":"import seaborn as sns\nimport matplotlib.pyplot as plt\n#a new type of import\nimport pandas_profiling as pp\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})","8c01a0ff":"#bring thte data to the dataframe\ndata = pd.read_csv('\/kaggle\/input\/learn-together\/train.csv')\n\n#describe the data\ndata.describe()","c5281e8c":"#as id is not a feature or something, we can drop it \ndata.drop(['Id'], axis = 1 , inplace = True)\n\ndata.describe()","143bd9b1":"print(data.columns)","a9b84a27":"#using Pandas_profiling for eda\nreport = pp.ProfileReport(data)\nreport.to_file(\"report.html\")\n\nreport","213ae0de":"data = data.rename(columns={\"Horizontal_Distance_To_Roadways\": \"HDR\", \"Horizontal_Distance_To_Fire_Points\": \"HDF\"  })\ndata = data.rename(columns={\"Horizontal_Distance_To_Hydrology\": \"HDH\", \"Vertical_Distance_To_Hydrology\": \"VDH\" })","2440acb3":"data.columns","bb08ad7c":"sns.heatmap(data.corr() , cmap = 'gist_ncar')","4f88bcf4":"#appending all the positive correlated data\nlst = []\ncolumn = []\n\nfor col in data.columns:\n    if(data.corr()['Cover_Type'][col] > 0.0):\n        column.append(col)\n        print(col +\" : \" +  str(data.corr()['Cover_Type'][col]))\n        lst.append(float(data.corr()['Cover_Type'][col]))\n#print(lst.sort()[:5])","dc0cf02a":"print(type(column[1]))\nprint(type(lst[0]))","9c50c9a0":"print(column)\ncolumn = column[:-1]","bd54cc37":"column","5409748e":"selected = data[column]\n\ntest_df = pd.read_csv('\/kaggle\/input\/learn-together\/test.csv')\ntest_df = test_df.rename(columns={\"Horizontal_Distance_To_Roadways\": \"HDR\", \"Horizontal_Distance_To_Fire_Points\": \"HDF\"  })\ntest_df = test_df.rename(columns={\"Horizontal_Distance_To_Hydrology\": \"HDH\", \"Vertical_Distance_To_Hydrology\": \"VDH\" })\ntest_sel = test_df[[\"Id\"] + column]","927ee60f":"test_sel.columns","f2976c84":"#selected.describe()\nfrom sklearn.model_selection import train_test_split , cross_val_score\nfrom sklearn.metrics import accuracy_score\n\ny = data['Cover_Type'][:]\n\nX_train , X_test , y_train , y_test = train_test_split(selected , y , stratify = y , random_state = 7)","3305fc7b":"X_test.shape\ny_test = y_test.to_numpy()","f8723a25":"from sklearn.ensemble import AdaBoostClassifier , BaggingClassifier , RandomForestClassifier , ExtraTreesClassifier , GradientBoostingClassifier\nfrom sklearn.tree import ExtraTreeClassifier","9976027b":"#AdaBoostClassifier\n\nl = [10 , 50 , 25 , 75 , 100 , 150 , 200]\n\nfor n in range(5 , 100 ,5):\n    clf = AdaBoostClassifier(n_estimators=n , random_state = 0)\n    clf.fit(X_train , y_train)\n    \n    y_pred = clf.predict(X_test)\n      \n    print(\"For l=\" + str(n) , end = ' ')\n    print(accuracy_score(y_pred , y_test))","e3b5c2da":"#ExtraTreesClassifier\nfor n in range(300 , 500 ,10):\n    clf = ExtraTreesClassifier(n_estimators=n , random_state = 0)\n    clf.fit(X_train , y_train)\n    \n    y_pred = clf.predict(X_test)\n      \n    print(\"For Max Depth \" + str(n) , end = ' ')\n    print(accuracy_score(y_pred , y_test))","0f16aa81":"%%time\n#GradientBoostingClassifier\nfor n in range(300 , 500 ,50):\n    clf = GradientBoostingClassifier(learning_rate=0.2 , n_estimators=n , random_state = 0)\n    clf.fit(X_train , y_train)\n    \n    y_pred = clf.predict(X_test)\n      \n    print(\"For Max Depth \" + str(n) , end = ' ')\n    print(accuracy_score(y_pred , y_test))","f7228e37":"%%time\n#RandomForestClassifier\nfor n in range(100 , 1500 ,100):\n    clf = RandomForestClassifier(n_estimators=n , random_state = 0)\n    clf.fit(X_train , y_train)\n    \n    y_pred = clf.predict(X_test)\n      \n    print(\"For Max Depth \" + str(n) , end = ' ')\n    print(accuracy_score(y_pred , y_test))","44719c02":"#BagggingClasssifier with ExtraTreeClassifier as base estimator\n\nbase = ExtraTreeClassifier(max_depth = 500)\n\nfor n in range(100 , 1500 ,100):\n    clf = BaggingClassifier(base_estimator = base , n_estimators=n , random_state = 0)\n    clf.fit(X_train , y_train)\n    \n    y_pred = clf.predict(X_test)\n      \n    print(\"For Max Depth \" + str(n) , end = ' ')\n    print(accuracy_score(y_pred , y_test))","397638ef":"train_X = selected.to_numpy()\ntrain_y = y.to_numpy()","f5120fd2":"model = BaggingClassifier(base_estimator = base , n_estimators=200 , random_state = 0)\n\nid = test_sel['Id']\n\ntest_sel = test_sel.drop(['Id'] , axis = 1)\nprint(\"Training\")\nmodel.fit(train_X , train_y)\nprint(\"Finished!!!\")\nprint(\"Predicting\")\npred = model.predict(test_sel)\n","cc744311":"submission = pd.DataFrame({ 'Id': id,\n                            'Cover_Type': pred })\nsubmission.to_csv(\"submission_example.csv\", index=False)","1fd3b846":"as the initial model Max Depth 200 with this expt gives the best possible accuracy\nwithout an oversampling, undersampling,or any other optimization done for the differential distribution of train and test"}}