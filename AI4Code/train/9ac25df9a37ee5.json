{"cell_type":{"f300bb0c":"code","831e08ca":"code","ca724ddc":"code","cf597921":"code","a8e9e2bb":"code","9716582a":"code","f5ec7804":"code","ade9475a":"code","4acce1ea":"code","c4dba1d0":"code","a7a922c8":"code","f85bb34c":"code","70231507":"code","87bdf983":"code","7caaf5a4":"code","e6b5caf7":"code","7e224a57":"code","dcd82038":"code","03438d46":"code","2517dce3":"code","d3461be7":"code","4cf742a8":"code","41f6ff4e":"code","8e952a18":"code","60133745":"code","26608b7d":"code","493f08e7":"code","1b0dee55":"code","3a42733a":"code","ad727f27":"markdown","3b4e8fd4":"markdown","90625fba":"markdown","a5afd252":"markdown","53e3eb69":"markdown","23d3db1b":"markdown","c2a842ee":"markdown","b8b1a09b":"markdown","834755c1":"markdown","cd0280d0":"markdown","b00ace3b":"markdown","a02d73d8":"markdown","7f817817":"markdown","6dd5ed71":"markdown","a18c6aa2":"markdown"},"source":{"f300bb0c":"MAX_SAMPLE = None # set a small number for experimentation, set None for production.","831e08ca":"!pip install datasets --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\/packages\/datasets\n!pip install ..\/input\/coleridge-packages\/seqeval-1.2.2-py3-none-any.whl\n!pip install ..\/input\/coleridge-packages\/tokenizers-0.10.1-cp37-cp37m-manylinux1_x86_64.whl\n!pip install ..\/input\/coleridge-packages\/transformers-4.5.0.dev0-py3-none-any.whl","ca724ddc":"import os\nimport re\nimport json\nimport time\nimport datetime\nimport random\nimport glob\nimport importlib\n\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nrandom.seed(123)\nnp.random.seed(456)","cf597921":"COMPUTE_EVAL = True","a8e9e2bb":"if COMPUTE_EVAL:\n    df = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/train.csv')\n    df['split'] = np.random.randn(df.shape[0], 1)\n\n    msk = np.random.rand(len(df)) <= 0.9\n\n    train = df[msk]\n    train2 = train\n    val = df[~msk]\nelse:\n    train_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train.csv'\n    train = pd.read_csv(train_path)\n    train = train[:MAX_SAMPLE]\n\npaper_train_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\npapers = {}\nfor paper_id in train['Id'].unique():\n    with open(f'{paper_train_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers[paper_id] = paper","9716582a":"if COMPUTE_EVAL:\n    sample_submission = val\n    paper_test_folder = paper_train_folder\nelse: \n    sample_submission_path = '..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv'\n    sample_submission = pd.read_csv(sample_submission_path)\n\n    paper_test_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/test'\n\nfor paper_id in sample_submission['Id']:\n    with open(f'{paper_test_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers[paper_id] = paper\n    ","f5ec7804":"all_labels = set()\n\nfor label_1, label_2, label_3 in train[['dataset_title', 'dataset_label', 'cleaned_label']].itertuples(index=False):\n    all_labels.add(str(label_1).lower())\n    all_labels.add(str(label_2).lower())\n    all_labels.add(str(label_3).lower())\n    \nprint(f'No. different labels: {len(all_labels)}')","ade9475a":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()\n\ndef totally_clean_text(txt):\n    txt = clean_text(txt)\n    txt = re.sub(' +', ' ', txt)\n    return txt","4acce1ea":"literal_preds = []\n\nfor paper_id in sample_submission['Id']:\n    paper = papers[paper_id]\n    text_1 = '. '.join(section['text'] for section in paper).lower()\n    text_2 = totally_clean_text(text_1)\n    \n    labels = set()\n    for label in all_labels:\n        if label in text_1 or label in text_2:\n            labels.add(clean_text(label))\n    \n    literal_preds.append('|'.join(labels))\n","c4dba1d0":"literal_preds[:5]","a7a922c8":"MAX_LENGTH = 64 # max no. words for each sentence.\nOVERLAP = 20 # if a sentence exceeds MAX_LENGTH, we split it to multiple sentences with overlapping\n\nPREDICT_BATCH = 64000 \n\nPRETRAINED_PATH = '..\/input\/bert-standard-90-training-data\/output'\nTEST_INPUT_SAVE_PATH = '.\/input_data'\nTEST_NER_DATA_FILE = 'test_ner_input.json'\nTRAIN_PATH = '..\/input\/bert-standard-90-training-data\/train_ner.json'\nVAL_PATH = '..\/input\/bert-standard-90-training-data\/train_ner.json'\n\nPREDICTION_SAVE_PATH = '.\/pred'\nPREDICTION_FILE = 'test_predictions.txt'","f85bb34c":"train = train.groupby('Id').agg({\n    'pub_title': 'first',\n    'dataset_title': '|'.join,\n    'dataset_label': '|'.join,\n    'cleaned_label': '|'.join\n}).reset_index()\n\nprint(f'No. grouped training rows: {len(train)}')","70231507":"def clean_training_text(txt):\n    \"\"\"\n    similar to the default clean_text function but without lowercasing.\n    \"\"\"\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt)).strip()\n\ndef shorten_sentences(sentences):\n    short_sentences = []\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > MAX_LENGTH:\n            for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n                short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n        else:\n            short_sentences.append(sentence)\n    return short_sentences","87bdf983":"test_rows = [] # test data in NER format\npaper_length = [] # store the number of sentences each paper has\n\nfor paper_id in sample_submission['Id']:\n    # load paper\n    paper = papers[paper_id]\n    \n    # extract sentences\n    sentences = [clean_training_text(sentence) for section in paper \n                 for sentence in section['text'].split('.')\n                ]\n    sentences = shorten_sentences(sentences) # make sentences short\n    sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n    sentences = [sentence for sentence in sentences if any(word in sentence.lower() for word in ['data', 'study'])]\n        \n    # collect all sentences in json\n    for sentence in sentences:\n        sentence_words = sentence.split()\n        dummy_tags = ['O']*len(sentence_words)\n        test_rows.append({'tokens' : sentence_words, 'tags' : dummy_tags})\n    \n    # track which sentence belongs to which data point\n    paper_length.append(len(sentences))\n    \nprint(f'total number of sentences: {len(test_rows)}')","7caaf5a4":"os.environ[\"MODEL_PATH\"] = f\"{PRETRAINED_PATH}\"\nos.environ[\"TRAIN_FILE\"] = f\"{TRAIN_PATH}\"\nos.environ[\"VALIDATION_FILE\"] = f\"{VAL_PATH}\"\nos.environ[\"TEST_FILE\"] = f\"{TEST_INPUT_SAVE_PATH}\/{TEST_NER_DATA_FILE}\"\nos.environ[\"OUTPUT_DIR\"] = f\"{PREDICTION_SAVE_PATH}\"","e6b5caf7":"# copy my_seqeval.py to the working directory because the input directory is non-writable\n!cp \/kaggle\/input\/coleridge-packages\/my_seqeval.py .\/\n\n# make necessart directories and files\nos.makedirs(TEST_INPUT_SAVE_PATH, exist_ok=True)","7e224a57":"def bert_predict():\n    !python ..\/input\/kaggle-ner-utils\/kaggle_run_ner.py \\\n    --model_name_or_path \"$MODEL_PATH\" \\\n    --train_file \"$TRAIN_FILE\" \\\n    --validation_file \"$VALIDATION_FILE\" \\\n    --test_file \"$TEST_FILE\" \\\n    --output_dir \"$OUTPUT_DIR\" \\\n    --report_to 'none' \\\n    --seed 123 \\\n    --do_predict","dcd82038":"bert_outputs = []\n\nfor batch_begin in range(0, len(test_rows), PREDICT_BATCH):\n    # write data rows to input file\n    with open(f'{TEST_INPUT_SAVE_PATH}\/{TEST_NER_DATA_FILE}', 'w') as f:\n        for row in test_rows[batch_begin:batch_begin+PREDICT_BATCH]:\n            json.dump(row, f)\n            f.write('\\n')\n    \n    # remove output dir\n    !rm -r \"$OUTPUT_DIR\"\n    \n    # do predict\n    bert_predict()\n    \n    # read predictions\n    with open(f'{PREDICTION_SAVE_PATH}\/{PREDICTION_FILE}') as f:\n        this_preds = f.read().split('\\n')[:-1]\n        bert_outputs += [pred.split() for pred in this_preds]","03438d46":"# get test sentences\ntest_sentences = [row['tokens'] for row in test_rows]\n\ndel test_rows","2517dce3":"bert_dataset_labels = [] # store all dataset labels for each publication\n\nfor length in paper_length:\n    labels = set()\n    for sentence, pred in zip(test_sentences[:length], bert_outputs[:length]):\n        curr_phrase = ''\n        for word, tag in zip(sentence, pred):\n            if tag == 'B': # start a new phrase\n                if curr_phrase:\n                    labels.add(curr_phrase)\n                    curr_phrase = ''\n                curr_phrase = word\n            elif tag == 'I' and curr_phrase: # continue the phrase\n                curr_phrase += ' ' + word\n            else: # end last phrase (if any)\n                if curr_phrase:\n                    labels.add(curr_phrase)\n                    curr_phrase = ''\n        # check if the label is the suffix of the sentence\n        if curr_phrase:\n            labels.add(curr_phrase)\n            curr_phrase = ''\n    \n    # record dataset labels for this publication\n    bert_dataset_labels.append(labels)\n    \n    del test_sentences[:length], bert_outputs[:length]","d3461be7":"bert_dataset_labels[:5]","4cf742a8":"def jaccard_similarity(s1, s2):\n    l1 = s1.split(\" \")\n    l2 = s2.split(\" \")    \n    intersection = len(list(set(l1).intersection(l2)))\n    union = (len(l1) + len(l2)) - intersection\n    return float(intersection) \/ union\n\nfiltered_bert_labels = []\n\nfor labels in bert_dataset_labels:\n    filtered = []\n    \n    for label in sorted(labels, key=len):\n        label = clean_text(label)\n        if len(filtered) == 0 or all(jaccard_similarity(label, got_label) < 0.75 for got_label in filtered):\n            filtered.append(label)\n    \n    filtered_bert_labels.append('|'.join(filtered))","41f6ff4e":"filtered_bert_labels[:5]","8e952a18":"counter = 0\nfinal_predictions = []\nfor literal_match, bert_pred in zip(literal_preds, filtered_bert_labels):\n    if bert_pred:\n        final_predictions.append(bert_pred)\n        \n    else:\n        #print(\"we used Literal Matching\")\n        final_predictions.append(literal_match)\n        counter = counter+1","60133745":"sample_submission['PredictionString'] = final_predictions\nsample_submission.head()","26608b7d":"t = {'cleaned_label': sample_submission['cleaned_label'], 'Prediction_string': final_predictions}\ndict(list(t.items())[:0])\n#print(final_predictions[350])","493f08e7":"def getMetric(col):\n    def f1score(row):\n        n = len(np.intersect1d(row.PredictionString.split('|'), row[col]))\n        return 2*n \/ (len(row.PredictionString.split('|')) + len(row[col]))\n    return f1score\n\ndef my_jaccard(strs): \n    str1, str2 = strs\n    temp_list = []\n    for sentence in str1.lower().split('|'):\n        a = set(str1.lower().split()) \n        b = set(str2.lower().split())\n        c = a.intersection(b)\n        d = float(len(c)) \/ (len(a) + len(b) - len(c))\n        temp_list.append(d)\n    return sum(temp_list) \/ len(temp_list)   ","1b0dee55":"if COMPUTE_EVAL:\n    getMetric_score = sample_submission.apply(getMetric('cleaned_label'), axis=1)\n    print('getMetric_score =', getMetric_score.mean())\n    my_jaccard_score = sample_submission[['PredictionString', 'cleaned_label']].apply(my_jaccard, axis=1)\n    print('my_jaccard_score =', my_jaccard_score.mean())\n    print('amount of times literal matching is used: ', counter)\n    ","3a42733a":"sample_submission.to_csv(f'submission.csv', index=False)","ad727f27":"# Bert prediction","3b4e8fd4":"### Matching on test data","90625fba":"# Aggregate final predictions and write submission file","a5afd252":"This notebook gives a simple combination of literal matching and Named Entity Recognition using BERT (base model from huggingface).\n\nThe training phase of the BERT model was done in another kernel: Pytorch BERT for Named Entity Recognition.","53e3eb69":"# Import","23d3db1b":"### Create a knowledge bank","c2a842ee":"# Install packages","b8b1a09b":"### Filter based on Jaccard score and clean","834755c1":"# Literal matching","cd0280d0":"### Paths and Hyperparameters","b00ace3b":"### Transform data to NER format","a02d73d8":"# Load data","7f817817":"### Restore Dataset labels from predictions","6dd5ed71":"### Do predict and collect results","a18c6aa2":"Group by publication, training labels should have the same form as expected output."}}