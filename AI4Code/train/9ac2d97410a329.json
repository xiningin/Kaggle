{"cell_type":{"b41eb4a7":"code","4bd12ae4":"code","be0af04a":"code","54f0d56c":"code","a73e0234":"code","76dcec7e":"code","9d6a0fa6":"code","2008cc81":"code","304edde8":"code","a6262616":"code","5ade6ff1":"code","b32e841b":"code","dc24f072":"code","52a1b0e4":"code","68d32803":"code","99fd4a00":"code","6351ccda":"markdown","963bd426":"markdown","3e01bc37":"markdown","06528626":"markdown","f4089cc8":"markdown","c02a656c":"markdown","a0b33f00":"markdown","2df1a1dc":"markdown","c2a77624":"markdown"},"source":{"b41eb4a7":"import os\nimport zipfile\nimport numpy as np\nimport pandas as pd\nimport random\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split","4bd12ae4":"filenames = os.listdir(\"..\/input\/dogs-vs-cats\/train\/train\")\nlabels = []\nfor name in filenames:\n    label = name.split('.')[0]\n    if label == 'dog':\n        labels.append(1)\n    else:\n        labels.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'label': labels\n})\n\ndf.head()","be0af04a":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\nfrom keras.optimizers import RMSprop\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid')) \n\nmodel.compile(loss='binary_crossentropy', optimizer=RMSprop(lr=0.001), metrics=['accuracy'])\n\nmodel.summary()\n","54f0d56c":"df['label'] = df['label'].replace({0:'cat', 1:'dog'})\n\ntrain_df, validate_df = train_test_split(df, test_size=0.20, random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","a73e0234":"train_df.shape","76dcec7e":"validate_df.shape","9d6a0fa6":"train_datagen = ImageDataGenerator(rescale=1\/255,\n                                  rotation_range=40,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True,\n                                  fill_mode='nearest')\n\ntrain_generator = train_datagen.flow_from_dataframe(train_df,\n                                                    '..\/input\/dogs-vs-cats\/train\/train',\n                                                    x_col = 'filename',\n                                                    y_col = 'label',\n                                                    batch_size=20,\n                                                    class_mode='binary',\n                                                    target_size=(150, 150))","2008cc81":"valid_datagen = ImageDataGenerator(rescale=1\/255)\n\nvalid_generator = valid_datagen.flow_from_dataframe(validate_df,\n                                                   '..\/input\/dogs-vs-cats\/train\/train',\n                                                   x_col = 'filename',\n                                                   y_col = 'label',\n                                                   batch_size = 20,\n                                                   class_mode = 'binary',\n                                                   target_size = (150,150))","304edde8":"history = model.fit_generator(train_generator,\n                              validation_data=valid_generator,\n                              steps_per_epoch=100,\n                              epochs=100,\n                              validation_steps=50,\n                              verbose=2)","a6262616":"import matplotlib\nfrom matplotlib import pyplot as plt\n\n# Retrieve a list of list results on training and test data sets for each training epoch\nacc      = history.history[     'acc' ]\nval_acc  = history.history[ 'val_acc' ]\nloss     = history.history[    'loss' ]\nval_loss = history.history['val_loss' ]\n\nepochs   = range(len(acc)) # Get number of epochs\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\n\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()\n\n\n","5ade6ff1":"test_filenames = os.listdir(\"..\/input\/dogs-vs-cats\/test1\/test1\")\ntest_df = pd.DataFrame({\n    'id': test_filenames\n})\ntest_df.shape","b32e841b":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"..\/input\/dogs-vs-cats\/test1\/test1\/\", \n    x_col='id',\n    y_col=None,\n    class_mode=None,\n    target_size=(150,150),\n    batch_size=20\n)","dc24f072":"predict = model.predict_generator(test_generator, steps=625) # test shape\/ batch_size","52a1b0e4":"test_df['label'] = (predict > 0.5).astype(int)","68d32803":"test_df['id'] = test_df['id'].str.split('.').str[0]","99fd4a00":"test_df.to_csv('submission.csv', index=False)","6351ccda":"# Fit model","963bd426":"# Loading data","3e01bc37":"## Training generator","06528626":"# Prepare test set","f4089cc8":"# Plot training - validation accuracy & loss","c02a656c":"## Validation generator","a0b33f00":"# Import libraries","2df1a1dc":"# Train - validation set","c2a77624":"# Build CNN model"}}