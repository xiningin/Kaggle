{"cell_type":{"863070bb":"code","e1f985bc":"code","13bffccb":"code","84c89c05":"markdown","be106569":"markdown","653bc6ea":"markdown","8fc8036f":"markdown","8b19c42d":"markdown"},"source":{"863070bb":"import numpy as np\nimport pandas as pd\nfrom collections import defaultdict\nNUMBER_DAYS = 100\nNUMBER_FAMILIES = 5000\nMAX_BEST_CHOICE = 5\ndata = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/c-stochastic-product-search-65ns\/submission.csv')\nassigned_days = submission['assigned_day'].values\ncolumns = data.columns[1:11]\nDESIRED = data[columns].values\n\nCOST_PER_FAMILY        = [0,50,50,100,200,200,300,300,400,500]\nCOST_PER_FAMILY_MEMBER = [0, 0, 9,  9,  9, 18, 18, 36, 36,235]\nN_PEOPLE = data['n_people'].astype(int).values\n\ndef get_daily_occupancy(assigned_days):\n    daily_occupancy = np.zeros(100, np.int32)\n    for i, r in enumerate(assigned_days):\n        daily_occupancy[r-1] += N_PEOPLE[i]\n    return daily_occupancy\n\ndef cost_function(prediction):\n    N_DAYS = 100\n    MAX_OCCUPANCY = 300\n    MIN_OCCUPANCY = 125\n    penalty = 0\n    days = list(range(N_DAYS,0,-1))\n    tmp = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv', index_col='family_id')\n    family_size_dict = tmp[['n_people']].to_dict()['n_people']\n\n    cols = [f'choice_{i}' for i in range(10)]\n    choice_dict = tmp[cols].to_dict()\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if v > MAX_OCCUPANCY or v < MIN_OCCUPANCY:\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5))\n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (today_count-125.0) \/ 400.0 * today_count**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    return penalty, accounting_cost, penalty + accounting_cost","e1f985bc":"%%time\nfrom ortools.graph import pywrapgraph\nfor num_members in range(2, 9): # Families have minimum 2 and maximum 8 members\n    daily_occupancy = get_daily_occupancy(assigned_days)\n    fids = np.where(N_PEOPLE == num_members)[0]\n\n    PCOSTM = {}\n    for fid in range(NUMBER_FAMILIES):\n        if fid in fids:\n            for i in range(MAX_BEST_CHOICE):\n                PCOSTM[fid, DESIRED[fid][i]-1] = COST_PER_FAMILY[i] + N_PEOPLE[fid] * COST_PER_FAMILY_MEMBER[i]\n        else:\n            daily_occupancy[assigned_days[fid]-1] -= N_PEOPLE[fid]\n\n    offset = fids.shape[0]\n    solver = pywrapgraph.SimpleMinCostFlow()\n    for day in range(NUMBER_DAYS):\n        solver.SetNodeSupply(offset+day, int(daily_occupancy[day]\/\/num_members))\n\n    for i in range(offset):\n        fid = fids[i]\n        solver.SetNodeSupply(i, -1)\n        for j in range(MAX_BEST_CHOICE):\n            day = DESIRED[fid][j]-1\n            solver.AddArcWithCapacityAndUnitCost(int(offset+day), i, 1, int(PCOSTM[fid, day]))\n    solver.SolveMaxFlowWithMinCost()\n\n    for i in range(solver.NumArcs()):\n        if solver.Flow(i) > 0:\n            assigned_days[fids[solver.Head(i)]] = solver.Tail(i) - offset + 1\n    print(cost_function(assigned_days))","13bffccb":"submission['assigned_day'] = assigned_days\nsubmission.to_csv('submission.csv', index=False)","84c89c05":"\n### Merry Christmas and Happy New Year!","be106569":"## Let's try my Santa2019 notebooks and datasets:\n* https:\/\/www.kaggle.com\/golubev\/manual-to-improve-submissions\n* https:\/\/www.kaggle.com\/golubev\/c-stochastic-product-search-65ns\n* https:\/\/www.kaggle.com\/golubev\/mip-optimization-preference-cost\n* https:\/\/www.kaggle.com\/golubev\/benchmark-mip-solvers-draft\n* https:\/\/www.kaggle.com\/golubev\/datasets","653bc6ea":"As a fact we split the dataset for 7 parts and can't find the best swaps between these parts, but result almost immediately.","8fc8036f":"### Please upvote my notebooks and datasets if you like my work!","8b19c42d":"About Min Cost Flow (MCF) you can read there: [OR-Tools](https:\/\/developers.google.com\/optimization\/flow\/mincostflow), [Wiki](https:\/\/en.wikipedia.org\/wiki\/Minimum-cost_flow_problem)\n\nDon't have simple(!) way to get optimum preference cost from MCF because we can't split families, but if we could I recomend this notebook: [Lower bound](https:\/\/www.kaggle.com\/mihaild\/lower-bound-on-preference-cost)\n\nIn this example we will optimize preference cost between families with same numbers members without changing daily occupation:"}}