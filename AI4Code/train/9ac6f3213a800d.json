{"cell_type":{"f7424442":"code","0927585f":"code","d7c0552e":"code","71931ae6":"code","0cc75a7e":"code","ec81cb57":"code","c7c65992":"code","87c78218":"code","57281c10":"code","5df644f9":"code","345ac79e":"code","e9ae03e4":"code","fafca3e9":"code","549d6d45":"code","b9f82b2b":"code","aaa949e2":"code","04951bda":"code","3feb25c0":"code","790a347e":"code","aeb23006":"code","04bac03c":"code","9c80eaad":"code","15648538":"code","8e970d32":"code","8c86db05":"code","b7a0ee91":"code","6b667095":"code","bdfc2468":"code","b2c6d55f":"code","891bc07a":"code","954a8c03":"code","353243ed":"code","8a6165dd":"code","07d9a592":"code","7408324a":"code","8929b173":"code","8b1454be":"code","fb825068":"code","97b52812":"code","5286492e":"code","84a143df":"code","6a8d50cb":"code","09e41e55":"code","e96638ee":"code","5c73b02d":"code","cebcfb9e":"markdown","4a357c32":"markdown","90ceac7b":"markdown","28279dbe":"markdown","0a059323":"markdown","28b801e1":"markdown","21d2ce97":"markdown","9426a242":"markdown","011a5866":"markdown","7079349e":"markdown","280b99e0":"markdown"},"source":{"f7424442":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0927585f":"import plotly.express as px","d7c0552e":"df = pd.read_csv('\/kaggle\/input\/indian-food-101\/indian_food.csv')","71931ae6":"# function Exploratory Data Analysis\ndef eda(dfA, all=False, desc='Exploratory Data Analysis'):\n    print(desc)\n    print(f'\\nShape:\\n{dfA.shape}')\n    print(f'\\nDTypes - Numerics')\n    print(dfA.select_dtypes(include=np.number).columns.tolist())\n    print(f'\\nDTypes - Categoricals')\n    print(dfA.select_dtypes(include='object').columns.tolist())\n    print(f'\\nIs Null: {dfA.isnull().sum().sum()}')\n    print(f'{dfA.isnull().mean().sort_values(ascending=False)}')\n    dup = dfA.duplicated()\n    print(f'\\nDuplicated: \\n{dfA[dup].shape}\\n')\n    try:\n        print(dfA[dfA.duplicated(keep=False)].sample(4))\n    except:\n        pass\n    if all:  # here you put yours prefered analysis that detail more your dataset\n        \n        print(f'\\nDTypes - Numerics')\n        print(dfA.describe(include=[np.number]))\n        print(f'\\nDTypes - Categoricals')\n        print(dfA.describe(include=['object']))\n\n# function Fill NaN values\ndef cleanNaN(dfA):\n  for col in dfA:\n    if type(dfA[col]) == 'object':\n        dfA[col] = dfA[col].fillna('unknow')\n    else:\n        dfA[col] = dfA[col].fillna(0)\n  return dfA","0cc75a7e":"eda(df)","ec81cb57":"df.region.unique() # only columns with null value","c7c65992":"cleanNaN(df)\neda(df)","87c78218":"pd.set_option('display.max_colwidth', None)\ndf.sample(2)","57281c10":"ingredientsAll = []\nfor k in df.ingredients.values.tolist():\n    for i in k.split(','):\n        ingredientsAll.append(i.strip())","5df644f9":"ingredients = pd.value_counts(ingredientsAll)\ningredients","345ac79e":"ing20=ingredients[:20]\ning20","e9ae03e4":"fig = px.bar(ing20, color=ing20.index, title='Top 20 - Ingredients')\nfig.show()","fafca3e9":"diets = df.diet.unique()\ndiets","549d6d45":"xd = df.diet.value_counts()\nfig = px.pie(xd, values=xd.values, names=xd.index, title='Diets', \n             color=xd.index, color_discrete_sequence=px.colors.sequential.Greens_r)\nfig.show()","b9f82b2b":"flavors = df['flavor_profile'].unique()\nflavors","aaa949e2":"df.loc[df['flavor_profile']=='-1','flavor_profile'] = 'unknow'","04951bda":"flavors = df['flavor_profile'].unique()\nflavors","3feb25c0":"xd = df['flavor_profile'].value_counts()\nfig = px.pie(xd, values=xd.values, names=xd.index, title='Flavors', \n             color=xd.index, color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","790a347e":"courses = df.course.unique()\ncourses","aeb23006":"xd = df.course.value_counts()\nfig = px.pie(xd, values=xd.values, names=xd.index, title='Courses', \n             color=xd.index, color_discrete_sequence=px.colors.sequential.YlGnBu)\nfig.show()","04bac03c":"states = df.state.unique()\nstates","9c80eaad":"st = df.state.value_counts()\nfig = px.bar(st, color=st.index, title='States')\nfig.show()","15648538":"regions = df.region.unique()\nregions","8e970d32":"df.loc[df.region=='-1','region'] = 'unknow'\ndf.loc[df.region==0,'region'] = 'unknow'\nregions = df.region.unique()\nregions","8c86db05":"xd = df.region.value_counts()\nfig = px.pie(xd, values=xd.values, names=xd.index, title='Regions', \n             color=xd.index, color_discrete_sequence=px.colors.sequential.Electric_r)\nfig.show()","b7a0ee91":"df.prep_time.unique()","6b667095":"# I'll considere prep_time with mean to values equal -1\npt = int(df.prep_time.mean())\ndf.loc[df.prep_time == -1,'prep_time'] = pt","bdfc2468":"xd = df.prep_time.value_counts()[:5]\nxd","b2c6d55f":"fig = px.bar(x=xd.index, y=xd.values, color=xd.index, title='Preparation Time (min)',\n            labels=dict(x='minutes', y='qty of plates'))\nfig.show()","891bc07a":"df.cook_time.unique()","954a8c03":"# I'll considere cook_time with mean to values equal -1\nct = int(df.cook_time.mean())\ndf.loc[df.cook_time == -1,'cook_time'] = ct","353243ed":"xd = df.cook_time.value_counts()[:5]\nxd","8a6165dd":"fig = px.bar(x=xd.index, y=xd.values, color=xd.index, title='Cooking Time (min)',\n            labels=dict(x='minutes', y='qty of plates'))\nfig.show()","07d9a592":"# creating ingredients list\nlistIngredients = ingredients.index.tolist()","7408324a":"# return % similarity betweens 2 lists\ndef similarityArrays(t1,t2):\n    return len(set(t1) & set(t2)) \/ float(len(set(t1) | set(t2))) * 100","8929b173":"# convert ingredients to numeric array\ndef convertIngredients(listIng):\n    li = []\n    for ing in listIng.split(','):\n        ing = ing.strip()\n        li.append(listIngredients.index(ing))\n    return li","8b1454be":"# get one sample \ningSample = df.ingredients.head(1).values[0]\ningSample","fb825068":"# double check in function\nfor teste in convertIngredients(ingSample):\n    print(listIngredients[teste], end=' ')","97b52812":"# testing function in lambda\ndf.ingredients.head(1).apply(lambda x: convertIngredients(x))","5286492e":"df['ingredientsList'] = df.ingredients.apply(lambda x: convertIngredients(x))","84a143df":"# look at sugar and ghee\ndf[['ingredients','ingredientsList']].head()","6a8d50cb":"dfs = pd.DataFrame()\nfor a in range(0, len(df)):\n    dishA = df.name.iloc[a]\n    dishAlist = df.ingredientsList.iloc[a]\n    for b in range(0, len(df)):\n        if a != b:\n            dishB = df.name.iloc[b]\n            dishBlist = df.ingredientsList.iloc[b]\n            s = similarityArrays(dishAlist, dishBlist)\n            dfs = dfs.append({'plate A': dishA, 'plate B': dishB, 'similarity': s}, \n                             ignore_index=True)\n","09e41e55":"dfs[dfs.similarity >50].sort_values(by='similarity', ascending=False)","e96638ee":"df[df.name=='Pattor']","5c73b02d":"df[df.name=='Patra']","cebcfb9e":"**Ingredients**","4a357c32":"**Preparation Time**","90ceac7b":"**Courses**","28279dbe":"**Flavors**","0a059323":"**Regions**","28b801e1":"**States**","21d2ce97":"# **Similarity:**\n\n**based on list of ingredients.**","9426a242":"**Cooking time**","011a5866":"**Diet**","7079349e":"# **Libs & Data**","280b99e0":"# **Exploratory Data Analysis**"}}