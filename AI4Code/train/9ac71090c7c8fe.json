{"cell_type":{"88d56098":"code","cdb04b21":"code","24ebb5cc":"code","dc161124":"code","a9abf612":"code","f132e261":"code","35de2de8":"code","4baeb7e8":"code","5211abdc":"code","3c45ed56":"code","4e793442":"code","b6bb70cb":"code","c6092041":"code","8d0f0fac":"code","8ae959bc":"code","a4268bcb":"code","e6cc5d6d":"code","ce16b735":"code","c8a3643f":"code","02c7a399":"code","30eca20d":"code","5f366f7d":"code","6e8e8af3":"code","31f100c3":"code","34ad31dd":"code","d3a2f69d":"code","8e4869b0":"code","4d9ee7ad":"code","d0c4a78a":"code","8c2a8310":"code","b6af8771":"code","5f3e0d63":"code","68da0a5a":"code","2f75dba4":"code","394632a1":"code","e2b20521":"code","4ffce8cd":"code","451890d1":"code","caf2d579":"code","f60a97af":"code","f36cf9ba":"code","cef48031":"code","cf625e80":"code","46867b28":"code","d8726bb1":"code","74f77d21":"code","a998a6f3":"code","5b30706a":"code","d3c748e2":"markdown","eaa86748":"markdown","8a51ac19":"markdown","bf855f6a":"markdown","b65df6f5":"markdown"},"source":{"88d56098":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cdb04b21":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport altair as alt\nimport squarify\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport folium\nfrom IPython.display import Markdown, display, Image\nfrom IPython.core.display import display, HTML\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","24ebb5cc":"display(Image(filename='..\/input\/ipl-logo-pic\/ipl image.png',width=500,height=300))","dc161124":"df1=pd.read_csv(\"..\/input\/d\/malaydhami\/ipl-2021-dataset\/IPL Matches.csv\");df1.head()","a9abf612":"df1.date=pd.to_datetime(df1[\"date\"],format=\"%Y-%m-%d\")","f132e261":"df1.dtypes","35de2de8":"df1.decision.value_counts().plot.bar(color=[\"red\",\"green\"])\nplt.xlabel(\"Decision\")\nplt.ylabel(\"count of Matches\")\nplt.show()\nprint(\"number of matches played in 2021 season:\" ,df1.count()[\"match_no\"])","4baeb7e8":"teams =df1[\"winner\"].unique().tolist()\nfield_won=df1[df1[\"decision\"]==\"field\"][\"winner\"].value_counts()\nbat_won=df1[df1[\"decision\"]==\"bat\"][\"winner\"].value_counts()\ndf_add=pd.DataFrame({\"teams\":teams,\"field\":field_won,\"bat\":bat_won})\ndf_add=df_add.reset_index(0).drop(columns=\"teams\")\nx = np.array(df_add[\"index\"])\ny1 = np.array(df_add[\"field\"])\ny2 = np.array(df_add[\"bat\"])\n# plot bars in stack manner\nplt.bar(x, y1, color='r')\nplt.bar(x, y2, bottom=y1, color='b')\nplt.xlabel(\"winner\")\nplt.ylabel(\"toss\")\nplt.legend([\"field\", \"bat\"])\nplt.xticks(rotation=90)\nplt.title(\"Matches won after taking field or bat decision\")\nplt.show()\n","5211abdc":"dict1 = {\"Task\": \"Start_Of_IPL_2021\", \"Start\":df1[df1[\"date\"].dt.month==4].date[0], \"End\":max(df1[df1[\"date\"].dt.month==5].date) }\ndict2 = {\"Task\": \"Resume_Of_IPL_2021\", \"Start\":min(df1[df1[\"date\"].dt.month==9].date), \"End\":max(df1[df1[\"date\"].dt.month==10].date)}\nsource = pd.DataFrame([dict1,dict2])\nalt.Chart(source).mark_bar().encode(\n    x='Start',\n    x2='End',\n    y='Task',\n).properties(width=800,height=200)","3c45ed56":"fig,axes=plt.subplots(1,2,figsize=(25,5),edgecolor=\"black\",facecolor=\"pink\")\ndf1.team1.value_counts().plot.bar(ax=axes[0],color=\"orange\");axes[0].set_title(\"team1 counts\")\naxes[0].legend()\ndf1.team2.value_counts().plot.bar(ax=axes[1]);axes[1].set_title(\"team2 counts\")\nplt.legend()\nplt.show()\n","4e793442":"list_match_day=df1.date.value_counts().values.tolist()\nprint(\"Matches Played for how many days: \",len(list_match_day) ,\"days\")","b6bb70cb":"count_of_matches_inaday=[\"Two matches played in a day\" if i>1 else \"only one match played in a day\" for i in list_match_day]\nfrom collections import Counter\nCounter(count_of_matches_inaday)","c6092041":"values=list(Counter(count_of_matches_inaday).values())\nlabels=list(Counter(count_of_matches_inaday).keys())\nplt.pie(labels=labels,x=values, autopct= \"%.1f%%\",explode=[0,.1],colors=[\"black\",\"hotpink\"])\nplt.title(\"Matches Played in a Day\",fontsize=20);plt.legend()\nplt.show()","8d0f0fac":"df1.venue.value_counts().plot.barh(title=\"Total matches played in a stadium\",color=[\"red\",\"yellow\",\"green\",\"grey\",\"teal\",\"peru\",\"cyan\"])","8ae959bc":"plt.figure(figsize=(20,8))\nsns.countplot(y=\"venue\",data=df1,hue=\"winner\",palette=\"Accent\");plt.title(\"Matches played on stadium with their winners\")\nplt.show()","a4268bcb":"fig,axes=plt.subplots(1,2,figsize=(20,5),sharey=True)\ndf1.groupby(\"toss\")[\"winner\"].count()\nsns.barplot(y=df1.groupby(\"toss\")[\"winner\"].count().keys(),x=df1.groupby(\"toss\")[\"winner\"].count().values,ax=axes[0]);plt.xticks(rotation=90);\naxes[0].set_title(\"Teams with most wins after winning the toss\")\nsns.barplot(y=df1.where(df1[\"toss\"]!=df1[\"winner\"]).dropna()[\"winner\"].value_counts().keys(),x=df1.where(df1[\"toss\"]!=df1[\"winner\"]).dropna()[\"winner\"].value_counts().values,ax=axes[1]);plt.xticks(rotation=90);\naxes[1].set_title(\"Teams with most wins after lossing the toss\")\nplt.suptitle(\"Team wins after the toss\")\nplt.show()","e6cc5d6d":"source=df1.mom.value_counts().sort_values(ascending=False)\nplt.figure(figsize=(25,8),dpi=180)\nlabels = [f'{Player_name}\\n{count_of_mom}' for Player_name, count_of_mom in zip(source.index, source.values)]\nsquarify.plot(label=labels,sizes=source.values,pad = True, alpha=.6)\nplt.title(\"Count of Man of match award in 2021 ipl\",fontsize=23,fontweight=\"bold\")\nplt.axis(\"off\");plt.show()","ce16b735":"categories =df1[df1[\"target\"]==\"runs\"].groupby([\"winner\"]).count()[\"match_no\"].index.tolist()\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatterpolar(\n      r=df1[df1[\"target\"]==\"runs\"].groupby([\"winner\"]).count()[\"match_no\"].values.tolist(),\n      theta=categories,\n      fill='toself',\n      name='Defended'\n))\nfig.add_trace(go.Scatterpolar(\n      r=df1[df1[\"target\"]==\"wickets\"].groupby([\"winner\"]).count()[\"match_no\"].values.tolist(),\n      theta=categories,\n      fill='toself',\n      name='Chased'\n))\nfig.add_trace(go.Scatterpolar(\n      r=df1[df1[\"target\"]==\"Over\"].groupby([\"winner\"]).count()[\"match_no\"].values.tolist(),\n      theta=categories,\n      fill='toself',\n      name='Super Over'\n))\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[0, 8]\n    )),\n  showlegend=False\n)\nfig.update_layout(\n    title_text=\"matches won either while defending , chasing or Super Over\",\n    font_family=\"Courier New\",\n    font_color=\"black\",\n    title_font_family=\"Times New Roman\",\n    title_font_color=\"black\",\n    legend_title_font_color=\"green\",\n    title_x=0.05\n)\nfig.show()","c8a3643f":"!pip install pySankey","02c7a399":"from pySankey.sankey import sankey\ncolors = {\n    \"Mumbai\": \"#f71b1b\",\n    \"Chennai\": \"#1b7ef7\",\n    \"Hyderabad\": \"#f3f71b\",\n    \"Rajasthan\": \"#12e23f\",\n    \"Kolkata\": \"#f78c1b\",\n    \"Punjab\":\"skyblue\",\n    \"Delhi\":\"hotpink\",\n    \"Bangalore\":\"peru\"\n}\n\nsankey(df1[\"team1\"], df1[\"team2\"], aspect=20, colorDict=colors, fontsize=12)\nplt.title(\"Team1 played how many times with other teams\")\nplt.show()","30eca20d":"plt.figure(figsize=(25,5))\nsns.countplot(x=\"mom\",hue=\"target\",data=df1)\nplt.ylim((0,5));plt.xticks(rotation=30)\nplt.title(\"Man of the match while chasing or defending\")\nplt.show()","5f366f7d":"venues=df1.venue.value_counts().index.tolist()\ncount_of_played_matches=df1.venue.value_counts().values.tolist()\nlon=[55.217999128,80.27918,72.82573,55.42093,54.4535,72.59732,77.24309]\nlat=[25.041333168,13.06251,18.93855,25.33086,24.41609,23.09181,28.63778]\ndf_location=pd.DataFrame({\"venues\":venues,\"matches_played\":count_of_played_matches,\"longitude\":lon,\"latitude\":lat})","6e8e8af3":"n = folium.Map(location=[25,80], tiles=\"OpenStreetMap\", zoom_start=4,width=1500,height=500)\nfor i in range(0,len(df_location)):\n   folium.CircleMarker(\n      location=[df_location.iloc[i]['latitude'], df_location.iloc[i]['longitude']],\n      popup=df_location.iloc[i]['venues'],tooltip=df_location.iloc[i]['venues'],\n      radius=float(df_location.iloc[i]['matches_played'])*3,\n      color='#69b3a2',\n      fill=True,\n      fill_color='magma'\n   ).add_to(n)\nn","31f100c3":"players_fav_ground=pd.DataFrame(df1.loc[:,[\"mom\",\"venue\"]].value_counts()).reset_index()\nplayers_fav_ground.rename(columns = {0:'count_of_mom'}, inplace = True);players_fav_ground\nplt.figure(figsize=(25,5))\nchart=sns.catplot(x=\"mom\",y=\"count_of_mom\",data=players_fav_ground,col=\"venue\",kind=\"bar\")\nchart.set_xticklabels(rotation=90,fontsize=9)\nplt.show()# click on the chart to get full view","34ad31dd":"df2=pd.read_csv(\"..\/input\/d\/malaydhami\/ipl-2021-dataset\/Deliveries.csv\",engine=\"python\");df2","d3a2f69d":"!pip install circlify","8e4869b0":"df3=pd.DataFrame(df2.groupby(\"extra_type\")[\"extra_run\"].sum()).reset_index()\n","4d9ee7ad":"import circlify\ncircles = circlify.circlify(\n    df3['extra_run'].tolist(), \n    show_enclosure=False, \n    target_enclosure=circlify.Circle(x=0, y=0, r=1)\n)\n\n# Create just a figure and only one subplot\nfig, ax = plt.subplots(figsize=(10,10))\n\nfor circle in circles:\n    x, y, r = circle\n    ax.add_patch(plt.Circle((x, y), r, alpha=0.2, linewidth=2, fill=False))\n\n# Title\nax.set_title('Circular packing for balls treated for extra_runs')\n\n# Remove axes\nax.axis('off')\n\n# Find axis boundaries\nlim = max(\n    max(\n        abs(circle.x) + circle.r,\n        abs(circle.y) + circle.r,\n    )\n    for circle in circles\n)\nplt.xlim(-lim, lim)\nplt.ylim(-lim, lim)\n\nextra=[f'{Player_name}\\n{count_of_mom}' for Player_name, count_of_mom in zip(df3.extra_type, df3.extra_run)]\n# list of labels\nlabels = extra\n\n# print circles\nfor circle, label in zip(circles, labels):\n    x, y, r = circle\n    ax.add_patch(plt.Circle((x, y), r, alpha=0.2, linewidth=2,facecolor=\"firebrick\",edgecolor=\"black\"))\n    plt.annotate(\n          label, \n          (x,y ) ,\n          va='center',\n          ha='center'\n     )\n","d0c4a78a":"df2.groupby(\"match_no\")[\"total_run\"].sum().plot.hist(bins=30)\nplt.title(\"Histogram for total runs scored in match\");plt.show()","8c2a8310":"allrounders=list(set(df2.batsman) & set(df2.bowler))\ndf4=df2.loc[df2[\"batsman\"].isin (allrounders)].loc[:,[\"bowler\",\"batsman\",\"is_wicket\",\"batsman_run\"]]\ndf4.groupby(\"bowler\")[\"is_wicket\"].sum()\ndf4.groupby(\"batsman\")[\"batsman_run\"].sum()\nfig,axes=plt.subplots(2,1,figsize=[20,10],sharex=True)\nsns.set_style(\"darkgrid\")\nsns.barplot(x=df4.groupby(\"bowler\")[\"is_wicket\"].sum().index,y=df4.groupby(\"bowler\")[\"is_wicket\"].sum().values,ax=axes[0])\naxes[0].set_ylabel(\"number of wickets\")\nsns.barplot(x=df4.groupby(\"batsman\")[\"batsman_run\"].sum().index,y=df4.groupby(\"batsman\")[\"batsman_run\"].sum().values,ax=axes[1])\naxes[1].set_ylabel(\"number of runs\")\nplt.xticks(rotation=90)\nplt.suptitle(\"All rounders performance in both batting and bowling\")\nplt.show()","b6af8771":"names = df2.dismissal_type.value_counts().keys()\nsize = df2.dismissal_type.value_counts().values\nlab=[f'{dismiss}\\n{no}' for dismiss, no in zip(df2.dismissal_type.value_counts().index, df2.dismissal_type.value_counts().values)]\n \n# Create a circle at the center of the plot\nmy_circle = plt.Circle( (0,0), 0.7, color='white')\n\n# Give color names\nplt.pie(size, labels=lab, colors=['red','green','blue','skyblue'])\np = plt.gcf()\np.gca().add_artist(my_circle)\n\n# Show the graph\nplt.show()","5f3e0d63":"x = df2.bowler.value_counts().head(50).keys()\n \n#y-axis values\ny2 = df2.loc[df2['bowler'].isin (df2.bowler.value_counts().head(50).keys())].loc[:,[\"bowler\",\"is_wicket\"]].groupby(\"bowler\")[\"is_wicket\"].sum()\n \n# secondary y-axis values\ny1 = df2.loc[df2['bowler'].isin (df2.bowler.value_counts().head(50).keys())][\"bowler\"].value_counts()\n\ndataframe=pd.DataFrame({\"balls\":y1,\"wickets\":y2},index=x).reset_index()\n\nfig, ax = plt.subplots(figsize = (20, 8))\nplt.title('Dual Y label bar graph for players with highest balls bowled with their wickets')\n \n# using the twinx() for creating\n# another axes object for secondary y-Axis\nax2 = ax.twinx()\n\n# creating a bar plot\nax.bar(dataframe[\"index\"], dataframe[\"balls\"], color = 'teal')\nax2.bar(dataframe[\"index\"], dataframe[\"wickets\"], color = 'peru',alpha=.75)\n \n# giving labels to the axises\nax.set_xlabel('players(bowlers) name', color = 'r',fontsize=20)\nax.set_ylabel('balls bowled', color = 'teal')\n \n# secondary y-axis label\nax2.set_ylabel('wickets taken', color = 'peru')\n \n# defining display layout\nplt.tight_layout()\n\nax.set_xticklabels(x,rotation=90)\n# show plot\nplt.show()","68da0a5a":"fig,axes=plt.subplots(figsize=(10,5),sharex=True)\ndf2.batsman.value_counts().head(20).plot.bar(title=\"most balls faced by batsman\",axes=axes)\ndf2.loc[df2['batsman'].isin(list(df2.batsman.value_counts().head(20).keys()))].groupby(\"batsman\")[\"batsman_run\"].sum().plot.line(axes=axes,\n                                                                                                                                 color=\"red\",linestyle=\"dashed\",marker=\"o\")\nplt.legend(title=\"balls by\",loc=\"upper right\");\nplt.xticks(rotation=90)\nplt.show()","2f75dba4":"x=list(df2.groupby(\"batsman\")[\"batsman_run\"].sum().sort_values().tail(20).keys())\ny=df2.groupby(\"batsman\")[\"batsman_run\"].sum().sort_values().tail(20).values.tolist()\nplt.figure(figsize=(15,8))\nplt.barh(x, y,color=\"teal\")\n\nfor index, value in enumerate(y):\n    plt.text(value, index,\n             str(value))\nplt.title(\"top run getter batsman in ipl 2021\")\nplt.show()","394632a1":"df_strikerate=pd.DataFrame({\"balls\":df2[\"batsman\"].value_counts(),\"runs\":df2.groupby(\"batsman\")[\"batsman_run\"].sum()}).reset_index()\ndf_strikerate[\"strike_rate\"]=df_strikerate[\"runs\"]*100\/df_strikerate[\"balls\"];\n\nbar = alt.Chart(df_strikerate,title=\"Players strike rate\").mark_bar().encode(\n    x='index',\n    y='strike_rate'\n)\n\nrule = alt.Chart(df_strikerate).mark_rule(color='red').encode(\n    y='mean(strike_rate)',\n)\n\n(bar + rule).properties(width=1500)","e2b20521":"plt.figure(figsize=(25,8))\nsns.countplot(x=\"fielder\",data=df2[[\"fielder\",\"dismissal_type\"]].dropna(),hue=\"dismissal_type\",palette=\"rocket\")\nplt.xticks(rotation=90)\nplt.show()","4ffce8cd":"df_merged=df1.merge(df2, on=\"match_no\",how=\"outer\")\nsns.boxplot(x=\"inning\",y=\"total_run\",data=\n           pd.DataFrame(df_merged[[\"match_no\",\"inning\",\"total_run\"]].groupby([\"match_no\",\"inning\"])[\"total_run\"].sum()).reset_index())\nplt.title(\"Boxplot for innings score\")\nplt.show()","451890d1":"plt.figure(figsize=(25,7))\nsns.barplot(x=\"match_no\",y=\"total_run\",hue=\"inning\",data=\n            pd.DataFrame(df_merged[[\"match_no\",\"inning\",\"total_run\"]].groupby([\"match_no\",\"inning\"])[\"total_run\"].sum()).reset_index()).axhline(y=pd.DataFrame(df_merged[[\"match_no\",\"inning\",\"total_run\"]].groupby([\"match_no\",\"inning\"])[\"total_run\"].sum()).reset_index()[\"total_run\"].mean(),\n            color=\"hotpink\",label=\"Average runs scored in an inning\")\nplt.title(\"total score in innings per match\")\nplt.legend(facecolor=\"white\")\nplt.show()","caf2d579":"df1.target.value_counts().plot.bar(color=[\"red\",\"blue\",\"orange\"])\nplt.ylabel(\"Matches won\");plt.title(\"Matches Won by target\")\nplt.show()","f60a97af":"sns.categorical.catplot(y=\"venue\",x=\"matches_won\",col=\"target\",kind=\"bar\",\n                        data=pd.DataFrame(df1[[\"venue\",\"target\"]].value_counts()).reset_index().rename(columns={0:\"matches_won\"}))\nplt.show()","f36cf9ba":"df_merged.loc[:,[\"bowler\",\"is_wicket\"]].where(df_merged.loc[:,[\"bowler\",\n                                                               \"is_wicket\"]][\"is_wicket\"]==0).fillna(0).groupby(\n    \"bowler\")[\"is_wicket\"].count().sort_values().tail(20).plot.bar(title=\"Bowler who bowled most dot balls \");\nplt.show()","cef48031":"df_economical=pd.DataFrame(df_merged[[\"bowler\",\"is_wicket\"]].groupby([\"bowler\"])[\"is_wicket\"].count()).reset_index().merge(pd.DataFrame(df_merged[[\"bowler\",\"batsman_run\"]].\n                                                                                                                          groupby([\"bowler\"])[\"batsman_run\"].sum()).reset_index(),on=\"bowler\",how=\"outer\")\n\ndf_economical[\"economy\"]=df_economical[\"batsman_run\"]*6\/df_economical[\"is_wicket\"]\nfig = plt.figure(figsize=(25,8))\nplt.subplot(121)\nsns.barplot(x=\"bowler\",y=\"economy\",data=df_economical.sort_values(by=\"economy\",ascending=\"True\").head(30))\nplt.xticks(rotation=90)\nplt.subplot(122)\nsns.barplot(x=\"bowler\",y=\"economy\",data=df_economical.sort_values(by=\"economy\",ascending=\"False\").tail(30))\nplt.xticks(rotation=90)\nplt.suptitle(\"Bowlers with worst and best economy\")\nplt.show()","cf625e80":"df1_concat=pd.concat([pd.DataFrame(df_merged[[\"bowler\",\"is_wicket\"]].groupby(\"bowler\")[\"is_wicket\"].sum()).reset_index().rename(columns={\"bowler\":\"player\"})\n                      ,df_strikerate.rename(columns={\"index\":\"player\"}),pd.DataFrame(df_merged[\"fielder\"].value_counts()).reset_index().rename(columns={\"index\":\"player\"})\n                      ,df_economical.sort_values(by=\"economy\",ascending=\"True\").rename(columns={\"bowler\":\"player\"})[[\"player\",\"economy\"]]]).fillna(0)\nexp1=[True if a>=10 else False for a in df1_concat[\"is_wicket\"]]#wicket taken greater than or equal to 10\nexp3=[True if c>=150 else False for c in df1_concat[\"runs\"]]#runs scored greater than 150\nexp4=[True if d>=120 else False for d in df1_concat[\"strike_rate\"]]#strike rate greater than or equal to 120\nexp5=[True if e>=5 else False for e in df1_concat[\"fielder\"]]#fielder contribution in wickets\nexp6=[False if f>=8 or f==0 else True for f in df1_concat[\"economy\"]]#economy in bowling\nretention=pd.DataFrame({\"players\":df1_concat[\"player\"],\"wicket\":exp1,\"runs\":exp3,\"strike_rate\":exp4,\"fielder\":exp5,\"economy\":exp6})\n","46867b28":"retained_players=retention.loc[(retention['wicket']==True) | (retention[\"runs\"]==True) | (retention['strike_rate']==True) | (retention['fielder']==True) | (retention['economy']==True)]","d8726bb1":"wicket=retained_players[retained_players[\"wicket\"]==True][\"players\"].count()\nruns=retained_players[retained_players[\"runs\"]==True][\"players\"].count()\nstrike_rate=retained_players[retained_players[\"strike_rate\"]==True][\"players\"].count()\nfielder=retained_players[retained_players[\"fielder\"]==True][\"players\"].count()\neconomy=retained_players[retained_players[\"economy\"]==True][\"players\"].count()\n\npd.DataFrame(data=[wicket,runs,strike_rate,fielder,economy],index=[\"wicket\",\"runs\",\"strike_rate\",\"fielding\",\"economy\"]).rename(columns={0:\"count_of_retain\"}).plot.barh(title=\"Retain on the basis of\");plt.show()","74f77d21":"non_retained_players=retention.loc[(~retention['wicket']==True) & (~retention[\"runs\"]==True) & (~retention['strike_rate']==True) & (~retention['fielder']==True) & (~retention['economy']==True)]\nnon_retained_players=non_retained_players[~non_retained_players[\"players\"].isin(retained_players[\"players\"])]","a998a6f3":"pd.DataFrame(data=[retained_players[\"players\"].count(),non_retained_players[\"players\"].count()],\n             index=[\"retain\",\"non_retain\"]).rename(columns={0:\"count_of_retain\"}).plot.bar(color=[\"firebrick\"],title=\"Retention of players count\")\nplt.show()","5b30706a":"retained_players.to_csv(\"retained players.csv\")\nnon_retained_players.to_csv(\"non_retained_players.csv\")","d3c748e2":"## *list_of_retained and non retained players*","eaa86748":"***List of may be Retained players for next ipl 2022***","8a51ac19":"*The Indian Premier League (IPL) is a professional Twenty20 cricket league, contested by eight teams based out of eight Indian cities. The league was founded by the Board of Control for Cricket in India (BCCI) in 2007. It is usually held between March and May of every year and has an exclusive window in the ICC Future Tours Programme.*\n\n*The IPL is the most-attended cricket league in the world and in 2014 was ranked sixth by average attendance among all sports leagues. In 2010, the IPL became the first sporting event in the world to be broadcast live on YouTube.The brand value of the IPL in 2019 was \u20b947,500 crore (US$6.3 billion), according to Duff & Phelps.*","bf855f6a":"## Retention of players","b65df6f5":"***List of may be non Retained players for next ipl 2022***"}}