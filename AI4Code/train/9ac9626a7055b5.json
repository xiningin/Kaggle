{"cell_type":{"c31637c6":"code","8f92157f":"code","06b477ca":"code","3e9197fc":"code","638fa7ed":"code","96e8975d":"code","5ee3ac56":"code","4a8983b2":"code","c05f0352":"code","1ab401ee":"code","c4c69886":"code","ee7e2e31":"code","026c6cd3":"code","4689f775":"code","dbca31a3":"code","162e3265":"code","c74170f4":"code","b607a507":"code","83315ac2":"code","aa3ec4dc":"code","d8c6e980":"code","cd27b470":"code","932ffd51":"code","a79e8b27":"markdown","67ec1b9a":"markdown","c8e89c12":"markdown","02ac3dc1":"markdown","18ca45e6":"markdown","780a5478":"markdown","4a3d9698":"markdown","d90cce03":"markdown","e85836f4":"markdown","34041000":"markdown","75986a68":"markdown","d9d7c0f1":"markdown","56826505":"markdown","2ba5cfea":"markdown"},"source":{"c31637c6":"import pandas as pd\nimport numpy as np\nimport warnings\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport glob\nimport seaborn as sns\nimport plotly as py\nimport statistics as stat\nimport plotly.express as px\nimport plotly.graph_objs as go\nwarnings.filterwarnings(\"ignore\")\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\n\n\npd.set_option('display.max_columns', None)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\ndistricts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv')\nproducts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv')\nengagement_data_path = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data'\n\nengagement_files = glob.glob(engagement_data_path + \"\/*.csv\")\nfiles = []\n\nfor file in engagement_files:\n    df = pd.read_csv(file, index_col = None, header = 0)\n    district_id = file.split('\/')[4].split('.')[0]\n    df['district_id'] = district_id\n    files.append(df)\n    \nengagement = pd.concat(files)\nengagement = engagement.reset_index(drop = True)\nengagement['time'] = pd.to_datetime(engagement['time'])\n\ndistricts.info()\n#df.head()","8f92157f":"#get the % of missing informations \npercent_missing = districts.isnull().sum() * 100 \/ len(districts)\npercent_missing.sum(axis=0)\/len(districts.columns)","06b477ca":"districts.dropna(inplace=True)","3e9197fc":"for i in ['pct_black\/hispanic', 'pct_free\/reduced']:\n    districts[i] = districts[i].apply(lambda x: float(x.split(',')[0][1:]) + 0.1)\n\ndistricts['pp_total_raw'] = districts['pp_total_raw'].apply(lambda x: int(x.split(',')[0][1:]) + 1000)\n\ndistricts.drop('county_connections_ratio', axis = 1, inplace = True)\n\ndistricts.head(3)","638fa7ed":"products.info()","96e8975d":"products['Basic_category'] = 'x'\nfor i in range(len(products)):\n    if pd.isna(products['Primary Essential Function'][i]) == False:\n        products['Basic_category'][i] = products['Primary Essential Function'][i].split('-')[0][:-1]\nproducts.head()","5ee3ac56":"products.head(5)","4a8983b2":"#engagement.head()\n#percent_missing_ = engagement.isnull().sum() * 100 \/ len(districts)\nengagement.fillna(method='ffill')\nengagement.head()","c05f0352":"state_abb = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District Of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\ndistricts['state_abb'] = districts['state'].map(state_abb)\n\nfig = go.Figure()\nlayout = dict(\n    title_text = \"Count of districts in the available States\",\n    title_font = dict(\n            family = \"monospace\",\n            size = 25,\n            color = \"black\"\n            ),\n    geo_scope = 'usa'\n)\n\nfig.add_trace(\n    go.Choropleth(\n        locations = districts['state_abb'].value_counts().to_frame().reset_index()['index'],\n        zmax = 1,\n        z = districts['state_abb'].value_counts().to_frame().reset_index()['state_abb'],\n        locationmode = 'USA-states',\n        marker_line_color = 'white',\n        geo = 'geo',\n        colorscale = \"cividis\", \n    )\n)\n            \nfig.update_layout(layout)   \nfig.show()\n\nplt.figure(figsize = (15, 8))\nsns.set_style(\"white\")\na = sns.barplot(data = districts['state'].value_counts().reset_index(), x = 'state', y = 'index', color = '#90afc5')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14, color = '#283655')\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(0.5 + width, p.get_y() + 0.55 * p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 15, color = '#283655')\n\nplt.show()","1ab401ee":"fig = px.pie(districts['locale'].value_counts().reset_index().rename(columns = {'locale': 'count'}), values = 'count', names = 'index', width = 700, height = 700)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.7, \n                  marker = dict(colors = ['#90afc5','#336b87','#2a3132','#763626'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = ' The count of districts <br>in each type <br>of areas', \n                                      x = 0.5, y = 0.5, font_size = 26, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = '#283655')],\n                  showlegend = False)\n                  \nfig.show()","c4c69886":"districts.isna().sum()","ee7e2e31":"df_pct_black_hispanic=districts.groupby('locale').agg({'pct_black\/hispanic':np.mean})\ndf_pct_black_hispanic=df_pct_black_hispanic.reset_index()\nplt.figure(figsize=(16,8))\nsns.barplot(x=\"locale\", y=\"pct_black\/hispanic\", data=df_pct_black_hispanic,\n                 palette=\"bwr_r\")\nplt.title(\"Percentage of blacks and hispanic in the locales\")","026c6cd3":"df_free_reduced=districts.groupby('locale').agg({'pct_free\/reduced':np.mean})\ndf_free_reduced=df_free_reduced.reset_index()\nplt.figure(figsize=(16,8))\nsns.barplot(x=\"locale\", y=\"pct_free\/reduced\", data=df_free_reduced,\n                 palette=\"rocket\")\nplt.title(\"Percentage of Free and Reduced in the locales\")","4689f775":"fig = plt.figure(figsize = (12, 18))\nplt.figtext(0.6,0.7,'''The average number of\nstudents who identified themselves \nas Black or Hispanic is\nbetween 0.25 \u2013 0.4 i.e 25% - 40%''')\nsns.distplot(districts['pct_free\/reduced'])","dbca31a3":"fig = plt.figure(figsize = (12, 9))\nplt.figtext(0.38, 0.65, '''The average number of students who identified themselves\nas Black or Hispanic is 23.2%. The most common value is 10%.''')\nsns.distplot(districts['pct_black\/hispanic'])","162e3265":"plt.figure(figsize = (12, 12))\nsns.set_style(\"white\")\nplt.title('Count of products by subcategory', size = 35, x = 0.2, y = 1.06, fontname = 'monospace', color = '#000000')\na = sns.barplot(data = products['Primary Essential Function'].value_counts().reset_index(), x = 'Primary Essential Function', y = 'index', color = '#90afc5')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 10, color = '#000000')\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(1 + width, p.get_y() + 0.55 * p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 11, color = '#000000')\n\nplt.show()\n##########\nfig = px.pie(products.query(\"Basic_category != 'x'\")['Basic_category'].value_counts().reset_index().rename(columns = {'Basic_category': 'count'}), values = 'count', names = 'index', width = 700, height = 700)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.7, \n                  marker = dict(colors = ['#90afc5','#336b87','#2a3132','#763626'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Count of products <br>by category', \n                                      x = 0.5, y = 0.5, font_size = 26, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = '#000000')],\n                  showlegend = False)\n                  \nfig.show()","c74170f4":"plt.figure(figsize=(15,10))\nplt.ticklabel_format(style='plain')\nsns.countplot(y=\"Primary Essential Function\",data=products,order=products['Primary Essential Function'].value_counts().index,palette=\"ocean_r\")\nplt.title(\"Distribution of primary essential Sub-category\",font=\"Georgia\", fontsize=25)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.xlabel('Number of products', fontsize=20)\nplt.ylabel('Sub-category', fontsize=20)\n\nplt.show()","b607a507":"plt.rcParams.update({'font.size': 33,})\nfig, ax  = plt.subplots(1, 2, figsize=(70, 15))\nexplode = (0.04, 0.04, 0.04, 0.04, 0.04)\nlabels = list(products['Sector(s)'].value_counts().index)\nsizes = products['Sector(s)'].value_counts().values\n\npatches, texts, autotexts = ax[0].pie(sizes, explode=explode, startangle=60, labels=labels, autopct='%1.0f%%', pctdistance=0.7, colors=[\"#c5d0bd\",\"#5b863e\",\"#6ebb3a\",\"#d4e5c8\", \"#1e4104\"])\n\ntexts[4].set_fontsize(2)\nax[0].add_artist(plt.Circle((0,0),0.6,fc='white'))\nfont = {'fontname':'Georgia'}\nax[0].title.set_text('Sector-wise % distribution of products')\n\n\n\nplt.ticklabel_format(style='plain')\nsns.countplot(y=\"Sector(s)\",data=products, ax=ax[1],order=products['Sector(s)'].value_counts().index,palette=\"husl\",linewidth=3)\nax[1].title.set_text(\"Sector-wise distribution of products\")\nplt.xticks(fontsize=30)\nplt.yticks(fontsize=30)\nplt.xlabel('Number of products', fontsize=35)\nplt.ylabel('Sector', fontsize=35)\n\nplt.show()\n","83315ac2":"\nproducts['primary_essential_category'] = products['Primary Essential Function'].str.split(\" - \",expand=True)[0]\nproducts['primary_essential_subcategory'] = products['Primary Essential Function'].str.split(\" - \",expand=True)[1]\nlp_id_virtual = products[products.primary_essential_subcategory == 'Virtual Classroom']['LP ID'].unique()\n\nplt.rcParams.update({'font.size': 14,})\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(24, 6))\n\nfor product_id in lp_id_virtual:\n    dummy = engagement[engagement.lp_id == product_id].groupby('time').pct_access.mean().to_frame().reset_index(drop=False)\n    sns.lineplot(x=dummy.time, y=dummy.pct_access, label=products[products['LP ID'] == product_id]['Product Name'].values[0])\nplt.legend()\nplt.title('Variation of pct_access over time for Virtual Classroom products', fontsize = 20)\nplt.show()","aa3ec4dc":"engagement['weekday'] = pd.DatetimeIndex(engagement['time']).weekday\nengagement_updated = engagement[engagement.weekday < 5]\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(24, 6))\n\nfor product_id in lp_id_virtual:\n    dummy = engagement_updated[engagement_updated.lp_id == product_id].groupby('time').pct_access.mean().to_frame().reset_index(drop=False)\n    sns.lineplot(x=dummy.time, y=dummy.pct_access, label=products[products['LP ID'] == product_id]['Product Name'].values[0])\nplt.legend()\nplt.title('Variation of pct_access over time for Virtual Classroom products', fontsize = 20)\nplt.show()","d8c6e980":"f, ax = plt.subplots(nrows=1, ncols=1, figsize=(24, 6))\nfor product_id in lp_id_virtual:\n    dummy = engagement_updated[engagement_updated.lp_id == product_id].groupby('time').engagement_index.mean().to_frame().reset_index(drop=False)\n    sns.lineplot(x=dummy.time, y=dummy.engagement_index, label=products[products['LP ID'] == product_id]['Product Name'].values[0])\nplt.legend()\nplt.title('Variation of engagement_index over time for Virtual Classroom products', fontsize = 20)\nplt.show()","cd27b470":"engagement.lp_id.head()\n\nlp_id_digital = products[products.primary_essential_subcategory == 'Digital Learning Platforms']['LP ID'].unique()\n\nlp_id_digital = [36692, 92993, 71279, 25559, 64998, 61441]\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(24, 6))\n\nfor product_id in lp_id_digital:\n    dummy = engagement_updated[engagement_updated.lp_id == product_id].groupby('time').pct_access.mean().to_frame().reset_index(drop=False)\n    sns.lineplot(x=dummy.time, y=dummy.pct_access, label=products[products['LP ID'] == product_id]['Product Name'].values[0])\nplt.legend()\nplt.title('Variation of pct_access over time for TOP 6 most accessed Digital Learning platforms', fontsize = 20)\nplt.show()","932ffd51":"f, ax = plt.subplots(nrows=1, ncols=1, figsize=(24, 6))\n\nfor product_id in lp_id_digital:\n    dummy = engagement_updated[engagement_updated.lp_id == product_id].groupby('time').engagement_index.mean().to_frame().reset_index(drop=False)\n    sns.lineplot(x=dummy.time, y=dummy.engagement_index, label=products[products['LP ID'] == product_id]['Product Name'].values[0])\nplt.legend()\nplt.title('Variation of engagement_index over time for TOP 6 most accessed Digital Learning platforms', fontsize = 20)\nplt.show()","a79e8b27":"from pct_free_reduced graph,We conclude that, most of students who live in city or town are get free or reduced price education.","67ec1b9a":"Information about pct_black\/hispanic, pct_free\/reduced, county_connections_ratio and pp_total_raw is presented in the form of intervals, where \"[a, b[\" means that a \u2264 x < b. All values in pct_black\/hispanic and pct_free\/reduced values have an interval of 20%, for a more understandable view we can convert them to a single value with a deviation of +- 10%. The information about county_connections_ratio is represented by the most abstract value from 18% to 100% and, unfortunately, this information is of no use. All values of of pp_total_raw have an interval of 2000, following the example of the previous two columns, we convert the values to a single value with a deviation of +- 1000.","c8e89c12":"***PRODUCTS***\n\nThe product file includes information about the characteristics of the top 372 products with most users in 2020:\n\n1. ***LP ID*** - the unique identifier of the product.\n2. ***URL*** \n3. ***Product Name***\n4. ***Provider\/Company Name***\n5. ***Sector(s)*** - sector of education where the product is used.\n6. ***Primary Essential Function*** - the basic function of the product. There are two layers of labels here. Products are first labeled as one of these three categories: LC = Learning & Curriculum, CM = Classroom Management, and SDO = School & District Operations. Each of these categories have multiple sub-categories with which the products were labeled.\n","02ac3dc1":"Now the graph shows better variation of pct_access data without ripples which were earlier present because of weekend data in the dataset.","18ca45e6":"***ENGAGEMENT***\n\nThe engagement file includes information about engagement of students with learning products in various school districts for the entire year 2020:\n\n1. ***time*** - date.\n2. ***lp_id*** - the unique identifier of the product.\n3. ***pct_access*** - percentage of students in the district have at least one page-load event of a given product and on a given day.\n4. ***engagement_index*** - total page-load events per one thousand students of a given product and on a given day.\n5. ***district_id***","780a5478":" the variation of \"pct_access\" data and \"engagement_index\" data over time.","4a3d9698":"The average number of students who identified themselves as Black or Hispanic it between 0.25 \u2013 0.4 i.e 25% - 40%","d90cce03":"We see that with the engagement dataset containing weekends as well as weekdays data, the graph shows variation like the above with ripples. Since, people usually don't like to work on weekends which can be substantiated by the above graph, we can remove weekend data from our dataset.","e85836f4":"let's get insight from pct_black\/hispanic i.e get the value of percentage balack\/hispanic based on 'local' category, From this we conclude that large numbers of Hispanic or black people live in city.","34041000":"**Dataset Basic information** \nwe have given engagement_data,districts_info.csv and products_info.csv\n\n***Districts_info***\n1. district_id\n2. state\n3. locale\n4. pct_black\/hispanic\n5. pct_free\/reduced\n6. county_connections_ratio\n7. pp_total_raw \n\n","75986a68":"**Introduction**\n\nShort-term assistance measures have been implemented in some nations, including the provision of digital learning devices, financial help for students and schools, and cash for safety and cleaning equipment. Countries used online platforms for (a) educational information, (b) live classes on virtual meeting platforms, and (c) self-paced formalized learning.\n\nThe loss of instructional time supplied in a classroom context, as well as the lack of human touch between teacher and student, are two drawbacks of emergency remote learning.\n\nIn this study, we look into the various forms of learning as well as the socioeconomic issues that may influence student engagement. The datasets and data dictionaries can be found on this kaggle page. Evidence from some of the region's wealthiest countries suggests that the pandemic is causing learning losses and an increase in illiteracy.","d9d7c0f1":"**Districts**","56826505":"we have 27% missing values ","2ba5cfea":"**Products**"}}