{"cell_type":{"2b34ff33":"code","1b1f62f4":"code","3ed8c03c":"code","2b68eb70":"code","6cbfd40c":"code","a191549c":"code","ae09aca4":"code","be340eac":"code","776bc905":"code","64cec6e1":"code","57f8d49b":"code","f52dafaa":"markdown","60c04e7d":"markdown","3624632d":"markdown","c4e891e2":"markdown"},"source":{"2b34ff33":"import keras\nfrom keras.datasets import cifar100\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom keras import optimizers\nimport numpy as np\nfrom keras.layers.core import Lambda\nfrom keras import backend as K\nfrom keras import regularizers\nfrom keras.utils import np_utils\nimport os\nimport numpy as np\nimport scipy.io\nimport scipy.misc\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split","1b1f62f4":"num_classes = 102\nweight_decay = 0.0005\nx_shape = [32,32,3]","3ed8c03c":"model = Sequential()\nmodel.add(Conv2D(64, (3, 3), padding='same',\n                 input_shape=x_shape,kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(64, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(128, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(128, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(256, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(256, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(256, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(512,kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes))\nmodel.add(Activation('softmax'))\n\nmodel.summary()","2b68eb70":"def imread(path):\n    img = scipy.misc.imread(path).astype(np.float)\n    if len(img.shape) == 2:\n        img = np.transpose(np.array([img, img, img]), (2, 0, 1))\n    return img\n    \npath = '..\/input\/101_objectcategories\/101_ObjectCategories'\nvalid_exts = [\".jpg\", \".gif\", \".png\", \".jpeg\"]\nprint (\"[%d] CATEGORIES ARE IN \\n %s\" % (len(os.listdir(path)), path))\n\ncategories = sorted(os.listdir(path))\nncategories = len(categories)\nimgs = []\nlabels = []\n# LOAD ALL IMAGES \nfor i, category in enumerate(categories):\n    iter = 0\n    for f in os.listdir(path + \"\/\" + category):\n        if iter == 0:\n            ext = os.path.splitext(f)[1]\n            if ext.lower() not in valid_exts:\n                continue\n            fullpath = os.path.join(path + \"\/\" + category, f)\n            img = scipy.misc.imresize(imread(fullpath), [32,32, 3])\n            img = img.astype('float32')\n            img[:,:,0] -= 123.68\n            img[:,:,1] -= 116.78\n            img[:,:,2] -= 103.94\n            imgs.append(img) # NORMALIZE IMAGE \n            label_curr = i\n            labels.append(label_curr)\n        #iter = (iter+1)%10;\nprint (\"Num imgs: %d\" % (len(imgs)))\nprint (\"Num labels: %d\" % (len(labels)) )\nprint (ncategories)","6cbfd40c":"seed = 7\nnp.random.seed(seed)\nx_train, x_test, y_train, y_test = train_test_split(imgs, labels, test_size = 0.1)\nx_train = np.stack(x_train, axis=0)\ny_train = np.stack(y_train, axis=0)\nx_test = np.stack(x_test, axis=0)\ny_test = np.stack(y_test, axis=0)\nprint (\"Num train_imgs: %d\" % (len(x_train)))\nprint (\"Num test_imgs: %d\" % (len(x_test)))\n\ny_train = np_utils.to_categorical(y_train)\ny_test = np_utils.to_categorical(y_test)\n#num_classes= y_test.shape[1]","a191549c":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","ae09aca4":"#training parameters\nbatch_size = 128\nmaxepoches = 300\nlearning_rate = 0.1\nlr_decay = 1e-6\nlr_drop = 20","be340eac":"def lr_scheduler(epoch):\n    return learning_rate * (0.5 ** (epoch \/\/ lr_drop))\nreduce_lr = keras.callbacks.LearningRateScheduler(lr_scheduler)\n\n\n#data augmentation\ndatagen = ImageDataGenerator(\n    featurewise_center=False,  # set input mean to 0 over the dataset\n    samplewise_center=False,  # set each sample mean to 0\n    featurewise_std_normalization=False,  # divide inputs by std of the dataset\n    samplewise_std_normalization=False,  # divide each input by its std\n    zca_whitening=False,  # apply ZCA whitening\n    rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)\n    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n    horizontal_flip=True,  # randomly flip images\n    vertical_flip=False)  # randomly flip images","776bc905":"datagen.fit(x_train)\n\n#optimization details\nsgd = optimizers.SGD(lr=learning_rate, decay=lr_decay, momentum=0.9, nesterov=True)\nmodel.compile(loss='categorical_crossentropy', optimizer=sgd,metrics=['accuracy'])\n\n# training process in a for loop with learning rate drop every 25 epoches.\nhist = model.fit_generator(datagen.flow(x_train, y_train,\n                                 batch_size=batch_size),\n                    steps_per_epoch=x_train.shape[0] \/\/ batch_size,\n                    epochs=maxepoches,\n                    validation_data=(x_test, y_test),callbacks=[reduce_lr],verbose=2)\nmodel.save_weights('caltech101-vgg.h5')","64cec6e1":"scores = model.evaluate(x_test, y_test, verbose=0)\nprint(\"Training Accuracy: %.2f%%\" % (hist.history['acc'][maxepoches - 1]*100))\nprint(\"Testing Accuracy: %.2f%%\" % (scores[1]*100))","57f8d49b":"plt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.legend(['train','test'])\nplt.title('loss')\nplt.savefig(\"loss7.png\",dpi=300,format=\"png\")\nplt.figure()\nplt.plot(hist.history['acc'])\nplt.plot(hist.history['val_acc'])\nplt.legend(['train','test'])\nplt.title('accuracy')\nplt.savefig(\"accuracy7.png\",dpi=300,format=\"png\")\nmodel_json = model.to_json()\nwith open(\"model7.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nmodel.save_weights(\"model7.h5\")\nprint(\"Saved model to disk\")","f52dafaa":"**SPLIT THE DATA INTO TRAIN AND TEST DATASETS**","60c04e7d":"**TRAIN THE MODEL**","3624632d":"**LOAD THE DATASET**","c4e891e2":"**VALIDATE THE MODEL**"}}