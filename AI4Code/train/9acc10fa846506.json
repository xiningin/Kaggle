{"cell_type":{"1ed65d81":"code","624aa55e":"code","dcd05d12":"code","1b088354":"code","9c4d63b3":"code","a4b5e8d9":"code","84cabfdb":"code","075e5e1e":"code","fc0e3cf0":"code","fa74325e":"code","43714482":"code","b4ac9cb9":"code","c89e76aa":"code","1e410dc5":"code","1ea298da":"code","3966c353":"code","390604ad":"code","6aad69d9":"code","5df6b1d2":"code","7d4c838a":"code","ca227b0d":"code","5f41ce92":"code","7a73efd8":"code","9b0c8a7d":"code","c3e4e5eb":"code","44018e37":"code","ae6a47f8":"markdown","dca05f2a":"markdown"},"source":{"1ed65d81":"# linear algebra\nimport numpy as np\n\n# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd \n\n# Visualization\nimport matplotlib.pyplot as plt\n\n# Modeling and Predicting\n\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.metrics import confusion_matrix\n","624aa55e":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","dcd05d12":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","1b088354":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","9c4d63b3":"def highlight(value):\n    if value >= 0.75:\n        style = 'background-color: green'\n    elif value >= 0.5:\n        style = 'background-color: palegreen'\n    elif value >= 0.25:\n        style = 'background-color: pink'\n    else:\n        style = 'background-color: red'\n    return style","a4b5e8d9":"women = train_data.loc[train_data.Sex == 'female']['Survived']\nrate_women = sum(women) \/ len(women)\nprint('percent of women who survived :', rate_women)","84cabfdb":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"percent of men who survived :\", rate_men)","075e5e1e":"train_data['Family_size'] = train_data['SibSp'] + train_data['Parch'] + 1","fc0e3cf0":"pd.pivot_table(train_data, values='Survived', index=['Sex', 'Family_size']).style.applymap(highlight)","fa74325e":"missing_age_value = train_data['Age'].isnull().sum()\npercent_of_missing_age_value = missing_age_value \/ 100\nprint('% of missing age value =', percent_of_missing_age_value)","43714482":"# Culculating the avarange value of data of Age\nmean_age = train_data['Age'].mean()\nprint(mean_age)","b4ac9cb9":"train_data['Age_5'] = train_data['Age'] \/\/ 5\ntrain_data['Age_5'] = train_data['Age_5'].fillna(mean_age \/\/ 5).astype('int')","c89e76aa":"number_of_unique_age_values = len(train_data['Age_5'].unique())\nprint(number_of_unique_age_values)","1e410dc5":"pd.pivot_table(train_data, values='Survived', index=['Pclass']).style.applymap(highlight)","1ea298da":"pd.pivot_table(train_data, values='Survived', index=['Sex', 'Family_size', 'Age_5', 'Pclass']).style.applymap(highlight)","3966c353":"def df_transform(df):\n    \n    df['Family_size'] = df['SibSp'] + df['Parch'] + 1\n    \n    df['Age_5'] = df['Age'] \/\/ 5\n    \n    mean_age = df['Age'].mean()\n        \n    df['Age_5'] = df['Age_5'].fillna(mean_age \/\/ 5).astype('int')\n    \n    df['Sex'] = df['Sex'].replace({'male': 0, 'female': 1})\n    \n    df = df[['Family_size', 'Age_5', 'Sex', 'Pclass']]\n    \n    return df\n     ","390604ad":"target = train_data.pop('Survived')","6aad69d9":"train_data = df_transform(train_data)\ntrain_data.head()","5df6b1d2":"test_data = df_transform(test_data)\ntest_data.head()","7d4c838a":"model = DecisionTreeClassifier(max_depth=5, random_state=42)\nmodel.fit(train_data, target)","ca227b0d":"# Visualization - build a plot with Decision Tree\nplt.figure(figsize=(20,12))\nplot_tree(model, filled=True, rounded=True, class_names=[\"No Survived\", \"Survived\"], feature_names=train_data.columns)","5f41ce92":"# Prediction for training data\ny_train = model.predict(train_data).astype(int)","7a73efd8":"confusion_matrix(target, y_train)","9b0c8a7d":"# Prediction of target for test data\ny_pred = model.predict(test_data).astype(int)","c3e4e5eb":"# Saving the result into submission file\nsubmission[\"Survived\"] = y_pred\nsubmission.to_csv('submission.csv', index=False) # Competition rules require that no index number be saved\n\n# Building the Histogram of predicted target values for test data\nsubmission['Survived'].hist()","44018e37":"submission['Survived'].mean()","ae6a47f8":"These things I've changed:\n1. Index by which I divide the age of passengers\n2. Added 'Pclass'\n3. Choose parameter max_depth=5 in modeling","dca05f2a":"Thanks https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l1t-titanic-decision-tree?scriptVersionId=47240467"}}