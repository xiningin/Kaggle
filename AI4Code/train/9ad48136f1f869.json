{"cell_type":{"8f85b5bc":"code","ebd7f984":"code","77ce442c":"code","d63c6467":"code","fdd9f515":"code","e36bc41e":"code","a1a7fb9c":"code","2010d602":"code","af46b53d":"code","43d70344":"code","209038d8":"code","e803d527":"code","7a96b089":"code","8a7a9a23":"code","64925e3c":"code","91ec7d98":"code","1ca0d0fb":"code","447703c2":"code","fe456bed":"code","b58562aa":"code","bd061f6b":"code","dce0fe2e":"code","e3e86b37":"code","dc34f654":"code","86866aeb":"code","24c29ebf":"code","517f3d15":"code","5e612ede":"code","a1dad323":"code","bdbe225f":"code","93fd7b0a":"code","2d90787e":"code","3bf271cc":"code","a0c04daf":"code","4947238f":"code","e3f385c3":"code","3ef97fdf":"code","cc104d68":"code","4732bf32":"code","cb2ca971":"code","e9974fb5":"code","2dedb298":"code","6ed2609b":"code","fa573a1d":"code","f80f78b5":"code","2037371a":"code","ec8a4d37":"code","0e436f59":"code","aa122df5":"code","2b7e118e":"code","c540aab2":"code","98309137":"code","c5a00103":"code","170ffa12":"code","63ab81fb":"code","8e8a9599":"code","0fe1a161":"code","08f6dc2b":"code","eaf0692e":"code","30ccaaff":"code","e50ff57a":"code","92395b9f":"code","7e12f744":"code","8a2b17ae":"code","fffedcc7":"code","75e7ac5b":"code","f1fce4b8":"code","6f82d8cf":"code","f9b91df4":"markdown","ad1d44f3":"markdown","dedf0935":"markdown","80774709":"markdown","06afa1c4":"markdown","a6c48de2":"markdown","bd6f859f":"markdown","71fc7949":"markdown","8c839479":"markdown","0f0364d3":"markdown","45958d11":"markdown","c966dcae":"markdown","5bf14a83":"markdown","24285f9a":"markdown","787cd6c2":"markdown","5367f085":"markdown","0e2c8833":"markdown","fc3b8fac":"markdown","cb430165":"markdown","1c9790d1":"markdown","7604399b":"markdown","88acfa8d":"markdown","f8b9d1ae":"markdown","ac095d1b":"markdown","0b1a04c2":"markdown","30ccdd1f":"markdown","5ff6c4d8":"markdown","d81196ae":"markdown","0baa95ef":"markdown","bcb9a8e2":"markdown","ab992616":"markdown","be945781":"markdown","5545da58":"markdown","2a9a3846":"markdown","4458b6ac":"markdown","c25e183a":"markdown","ece7c6e5":"markdown","15f6dabd":"markdown","ccc8429d":"markdown","74d1ff76":"markdown","e1209bd5":"markdown","0d9e5ffe":"markdown","043bc24f":"markdown","a7eade55":"markdown","8c3723c6":"markdown"},"source":{"8f85b5bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np \nimport pandas as pd \nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport missingno as msno\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ebd7f984":"df = pd.read_csv('\/kaggle\/input\/data-police-shootings\/fatal-police-shootings-data.csv')\ndf.columns","77ce442c":"df_population = pd.read_csv('..\/input\/us-census-2019-population-est\/US_census_2019_quickfacts.csv')\ndf_population.head(25)","d63c6467":"df.head()","fdd9f515":"df.info()","e36bc41e":"df.describe(include='all')","a1a7fb9c":"cardinality={}\nfor col in df.columns:\n    cardinality[col] = df[col].nunique()\n\ncardinality","2010d602":"print('MANNER OF DEATH')\nprint(df['manner_of_death'].unique())\nprint('-'*40)\nprint('RACE')\nprint(df['race'].unique())\nprint('-'*40)\nprint('THREAT LEVEL')\nprint(df['threat_level'].unique())\nprint('-'*40)\nprint('FLEE')\nprint(df['flee'].unique())\n","af46b53d":"missing_values = df.isnull()\nmissing_values.head()","43d70344":"for column in missing_values.columns.tolist():\n    print(column)\n    print(missing_values[column].value_counts())\n    print('')","209038d8":"missing_percentage = (missing_values.sum()*100)\/df.shape[0]\nmissing_percentage","e803d527":"msno.matrix(df)","7a96b089":"#DROP NULL VALUES\n\ndf.dropna(inplace=True)","8a7a9a23":"# SEPARATE DAY, MONTH, YEAR INTO INDIVIDUAL COLUMNS\ndf['date']=pd.to_datetime(df['date'])\ndf['year']=pd.to_datetime(df['date']).dt.year\ndf['month']=pd.to_datetime(df['date']).dt.month\ndf['month_name']=df['date'].dt.strftime('%B')\ndf['month_num']=df['date'].dt.strftime('%m')\ndf['weekday']=df['date'].dt.strftime('%A')  \ndf['date_num']=df['date'].dt.strftime('%d').astype(int)\ndf['year_month']=df.date.dt.to_period(\"M\")\n\n# CLASSIFY VICTIM AGES INTO AGE RANGE GROUPS\ndf['age_range']=np.where(df['age']<18,'<18',np.where((df['age']>=18)&(df['age']<=35),'18-35',\nnp.where((df['age']>=36)&(df['age']<=50),'36-50', np.where(df['age']>65,'65+',\nnp.where((df['age']>=51)&(df['age']<=65),'51-65',\"Not Specified\")))))\n\n# CHANGE ORDER OF COLUMNS\ncols = ['id', 'name', 'age', 'age_range', 'gender', 'race', 'manner_of_death', 'armed', 'flee', \n        'signs_of_mental_illness', 'threat_level', 'body_camera', 'city', 'state',\n        'date', 'date_num', 'year', 'year_month', 'month', 'month_name', 'month_num', 'weekday']\ndf=df[cols]\n\n#REPLACE VALUES OF RACE COLUMN WITH FULL NAME\nfor i in df['race']:\n        df['race'].replace({'A':'Asian', 'W':'White', 'H':'Hispanic', 'B':'Black', 'O':'Other', 'N':'Native'}, inplace=True)\n\n# DROP YEAR 2020 From dataset\n\ndf = df[df['year'] != 2020]\n\ndf.head(3)","64925e3c":"# DROP UNNECESSARY ROWS AND COLUMNS\npopulation1 = df_population\npopulation1.drop(population1.index[1:7], inplace=True)\npopulation1.reset_index(inplace=True)\npopulation1 = population1[0:10]\npopulation1.drop(columns=['index'], inplace=True)\n\n# REMOVE UNNECESSARY WORDS AND REPLACE NONSENSICAL VALUES\npopulation1 = population1.replace({'alone':''}, regex=True)\npopulation1.replace('Z', 0, inplace=True) #Replace values Z with number 0 so we can convert columns to float\n\n# CONVERT NUMBERS FROM STRING TO FLOAT\nfor col in population1.columns[1:52]:\n     population1[col] = pd.to_numeric(population1[col])","91ec7d98":"df.info()","1ca0d0fb":"fig = ff.create_distplot([df['age']], ['age'], bin_size=5, colors=['blue'])\nfig.update_layout(title_text=\"Distribution of Age\", title_x=0.5)\nfig.show()","447703c2":"age_count = df['age_range'].value_counts().to_frame().reset_index()\nage_count.rename(columns={'index':'age_range', 'age_range':'count'}, inplace=True)\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"Age Range Count\", \"Age Range Percentages\"))\n\ncolors=['#3ad0e0', '#20bd79', '#519c5c', '#718752', '#38e0a5']\n\nfig.add_trace(go.Bar(x=age_count['age_range'], \n                     y=age_count['count'],\n                     text=age_count['count'],\n                     textposition = 'auto',\n                     name='Age Range Count',\n                     opacity = 0.8, \n                     marker=dict(color=colors, line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Pie(labels=age_count['age_range'], \n                     values=age_count['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Age Range Percent\",\n                     marker  = dict(colors=colors, line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.update_layout(height=500, showlegend=True)\n\nfig.show()","fe456bed":"gender_count = df['gender'].value_counts().to_frame().reset_index()\ngender_count.rename(columns={'index':'gender', 'gender':'count'}, inplace=True)\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"Gender Count\", \"Gender Percentages\"))\n\n# bar_colors=['#3b76a3', '#3ba372', '#a3873b', '#a33b3b', '#863ba3', '#3ba3a1']\n\nfig.add_trace(go.Bar(x=gender_count['gender'], \n                     y=gender_count['count'],\n                     text=gender_count['count'],\n                     textposition = 'auto',\n                     name='Gender Count',\n                     opacity = 0.8, \n                     marker=dict(color= ['#398fcc','#cf4485'], line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Pie(labels=gender_count['gender'], \n                     values=gender_count['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Gender Percent\",\n                     marker  = dict(colors = ['#398fcc','#cf4485'], line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.update_layout(height=500, showlegend=True)\n\nfig.show()","b58562aa":"    race_percent = population1[2:10]\n    race_percent.sort_values(by='United States', ascending=False, inplace=True)\n    \n    colors=['#c44560', '#3b76a3', '#3ba372', '#a3873b', '#a33b3b', '#863ba3', '#3ba3a1']\n\n#     labels=['White', 'Black', 'Native', 'Asian', 'Hispanic']\n#     values=population['California'][2:4]\n    \n    fig = go.Figure(data=(go.Bar(x=race_percent['Fact'], \n                                 y=race_percent['United States'],\n                                 text=race_percent['United States'],\n                                 textposition = 'auto',\n                                 name=('Percentage of Population'),\n                                 opacity = 0.8, \n                                 marker=dict(color=colors, line=dict(color='#000000',width=1)))))\n\n    \n    fig.update_layout(height=500,\n                      yaxis_title=\"% of Total Population\",\n                      title_text=('United States Total Population: ' + df_population['United States'][0]),\n                      showlegend=False)\n    fig.show()\n\n","bd061f6b":"race_count = df['race'].value_counts().to_frame().reset_index()\nrace_count.rename(columns={'index':'race', 'race':'count'}, inplace=True)\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"Race Count\", \"Race Percentages\"))\n\ncolors=['#f299ac', '#1c1811', '#a3873b', '#f7ea72', '#c95742', '#3ba3a1']\n\nfig.add_trace(go.Bar(x=race_count['race'], \n                     y=race_count['count'],\n                     text=race_count['count'],\n                     textposition = 'auto',\n                     name='Race Count',\n                     opacity = 0.8, \n                     marker=dict(color=colors, line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Pie(labels=race_count['race'], \n                     values=race_count['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Race Percent\",\n                     marker  = dict(colors=colors, line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.update_layout(height=500, showlegend=True)\n\nfig.show()","dce0fe2e":"manner_count = df['manner_of_death'].value_counts().to_frame().reset_index()\nmanner_count.rename(columns={'index':'manner_of_death', 'manner_of_death':'count'}, inplace=True)\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"Manner of Death Count\", \"Manner of Death Percentages\"))\n\nfig.add_trace(go.Bar(x=manner_count['manner_of_death'], \n                     y=manner_count['count'],\n                     text=manner_count['count'],\n                     textposition = 'auto',\n                     name='Manner of Death Count',\n                     opacity = 0.8, \n                     marker=dict(color= ['#ad3131','#089ebf'], line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Pie(labels=manner_count['manner_of_death'], \n                     values=gender_count['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Manner of Death Percent\",\n                     marker  = dict(colors = ['#ad3131','#089ebf'], line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.update_layout(height=500, showlegend=True)\n\nfig.show()","e3e86b37":"top_armed = df['armed'].value_counts().to_frame()\ntop_armed.reset_index(inplace=True)\ntop_armed = top_armed.rename(columns={'index':'armed', 'armed':'count'})\n\nfig = px.histogram(top_armed[0:15], x='armed', y='count', color='armed')\n\nfig.update_layout(title_text='Weapon of Victim', title_x=0.5)\nfig.show()","dc34f654":"fig = px.histogram(df, x='flee', color='flee')\nfig.update_layout(title_text='Was Victim Fleeing?', title_x=0.5)\nfig.show()","86866aeb":"mental_illness = df['signs_of_mental_illness'].value_counts().to_frame().reset_index()\nmental_illness.rename(columns={'index':'signs_of_mental_illness', 'signs_of_mental_illness':'count'}, inplace=True)\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"Mental Illness Count\", \"Mental Illness Percentages\"))\n\nfig.add_trace(go.Bar(x=mental_illness['signs_of_mental_illness'], \n                     y=mental_illness['count'],\n                     text=mental_illness['count'],\n                     textposition = 'auto',\n                     name='Mental Illness Count',\n                     opacity = 0.8, \n                     marker=dict(color=['#089ebf','#ad3131'], line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Pie(labels=mental_illness['signs_of_mental_illness'], \n                     values=mental_illness['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Mental Illness Percent\",\n                     marker  = dict(colors = ['#089ebf','#ad3131'], line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.update_layout(height=500, showlegend=True)\n\nfig.show()","24c29ebf":"threat = df['threat_level'].value_counts().to_frame().reset_index()\nthreat.rename(columns={'index':'threat_level', 'threat_level':'count'}, inplace=True)\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"Threat Level Count\", \"Threat Level Percentages\"))\n\nfig.add_trace(go.Bar(x=threat['threat_level'], \n                     y=threat['count'],\n                     text=threat['count'],\n                     textposition = 'auto',\n                     name='Threat Level Count',\n                     opacity = 0.8, \n                     marker=dict(color=['#ba2d2d','#2d97ba', '#5c663f'], line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Pie(labels=threat['threat_level'], \n                     values=threat['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Threat Level Percent\",\n                     marker  = dict(colors = ['#ba2d2d','#2d97ba', '#5c663f'], line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.update_layout(height=500, showlegend=True)\n\nfig.show()","517f3d15":"body_cam = df['body_camera'].value_counts().to_frame().reset_index()\nbody_cam.rename(columns={'index':'body_camera', 'body_camera':'count'}, inplace=True)\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"Body Camera Count\", \"Body Camera Percentages\"))\n\nfig.add_trace(go.Bar(x=body_cam['body_camera'], \n                     y=body_cam['count'],\n                     text=body_cam['count'],\n                     textposition = 'auto',\n                     name='Body Camera Count',\n                     opacity = 0.8, \n                     marker=dict(color=['#ad3131', '#089ebf'], line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Pie(labels=body_cam['body_camera'], \n                     values=body_cam['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Body Camera Percent\",\n                     marker  = dict(colors = ['#ad3131', '#089ebf'], line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.update_layout(height=500,\n                  title_text=\"Was the Officer's Body Camera On?\",\n                  showlegend=True)\n\nfig.show()","5e612ede":"#STATE WHERE SHOOTINGS TOOK PLACE\nstate_pop = population1.iloc[:1,2:52]\nstate_pop = state_pop.melt(var_name='state', value_name='population')\nstate_pop.sort_values(by='population', ascending=False, inplace=True)\n\nfig = go.Figure(go.Bar(x=state_pop['state'],\n                       y=state_pop['population'],\n                        text=state_pop['population'],\n                       textposition='outside', marker_color=state_pop['population']))\n\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='State Populations', yaxis_title='Population',\n                 xaxis_title='States', title_x=0.5, height=600)\n\nfig.show()","a1dad323":"#STATE WHERE SHOOTINGS TOOK PLACE\nstates = df['state'].value_counts().to_frame().reset_index()\nstates.rename(columns={'index':'state', 'state':'count'}, inplace=True)\n# states = states.sort_values(by='count', ascending=False)\nstates\n\n\nfig = go.Figure(go.Bar(x=states['state'].sort_index(ascending=True), \n                       y=states['count'].sort_index(ascending=True),\n                        text=states['count'].sort_index(ascending=True),\n                       textposition='outside', marker_color=states['count'].sort_index(ascending=True)))\n\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='Police Killings, Organized by States',yaxis_title='States',\n                 xaxis_title='Total number of victims', title_x=0.5, height=600)\n\nfig.show()","bdbe225f":"#STATE WHERE SHOOTINGS TOOK PLACE\ncities = df['city'].value_counts().to_frame().reset_index()\ncities.rename(columns={'index':'city', 'city':'count'}, inplace=True)\n# states = states.sort_values(by='count', ascending=False)\ncities = cities[:25]\n\n\nfig = go.Figure(go.Bar(x=cities['city'].sort_index(ascending=True), \n                       y=cities['count'].sort_index(ascending=True),\n                        text=cities['count'].sort_index(ascending=True),\n                       textposition='outside', marker_color=cities['count'].sort_index(ascending=True)))\n\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='Police Killings, Organized by Cities',yaxis_title='Cities',\n                 xaxis_title='Total number of victims', title_x=0.5, height=600)\n\nfig.show()","93fd7b0a":"df_years = df['year'].value_counts().to_frame().reset_index()\ndf_years.rename(columns={'index':'year', 'year':'count'}, inplace=True)\ndf_years = df_years.sort_values(by='year')\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=df_years['year'], \n                         y=df_years['count'], \n                         mode='lines+markers', \n                         marker_color=\"red\"))\n\nfig.update_layout(title_text='Police Killings by Year',\n                  xaxis_title='Years',\n                  yaxis_title='Total number of kills', \n                  title_x=0.5)\n\nfig.show()\n","2d90787e":"df_monthly = df['date'].groupby(df.date.dt.to_period(\"M\")).agg('count').to_frame(name=\"count\").reset_index()\ndf_monthly = df_monthly.sort_values(by='date')\n\nyear_month=[]\nfor i in df_monthly['date']:\n    year_month.append(str(i))\n    \ndf_monthly.head()","3bf271cc":"fig = make_subplots(rows=2, cols=1, subplot_titles=(\"Monthly series\", \"Distribution of monthly count\"))\n\nfig.add_trace(go.Scatter(x=year_month, y=df_monthly['count'], \n                         name=\"Monthly Deaths\", mode='lines+markers'),row=1,col=1)\n\nfig.add_trace(go.Box(y=df_monthly['count'], name='Count',\n                marker_color = 'indianred',boxmean='sd'),row=2,col=1)\n\nfig.update_xaxes(title_text=\"Year\", row=1, col=1,showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_xaxes(title_text=\" \", row=2, col=1,showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(title_text=\"Number of Victims\", row=1, col=1,showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(title_text=\"Number of Victims\", row=2, col=1,showline=True, linewidth=2, linecolor='black', mirror=True)\n\nfig.update_layout(title_text='Fatal Killing Monthly Count 2015 - 2019', title_x=0.5,showlegend=False,height=1000)\nfig.show()","a0c04daf":"df_monthly['year'] = df_monthly['date'].dt.strftime('%Y')\n\ndef plot_month(year, color):\n    temp_month = []\n    for i in df_monthly.loc[df_monthly['year']==year]['date']:\n        temp_month.append(str(i))\n    trace=go.Bar(x=temp_month, y=df_monthly.loc[df_monthly['year']==year]['count'], \n                 name=year, marker_color=color)\n    return trace","4947238f":"fig = make_subplots(rows=3, cols=2, subplot_titles=('2015', '2016', '2017', '2018', '2019'))\n\nfig.add_trace(plot_month('2015', 'blue'), row=1, col=1)\nfig.add_trace(plot_month('2016', 'red'), row=1, col=2)\nfig.add_trace(plot_month('2017', 'green'), row=2, col=1)\nfig.add_trace(plot_month('2018', 'orange'), row=2, col=2)\nfig.add_trace(plot_month('2019', 'purple'), row=3, col=1)\n\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title_text='Distribution of Monthly Killings by Year', title_x=0.5, showlegend=False)\nfig.show()","e3f385c3":"only_month = df.groupby(['year','month_name', 'month'])[['month_name']].count()\nonly_month.rename(columns={'month_name':'count'}, inplace=True)\nonly_month.reset_index(inplace=True)\nonly_month = only_month.groupby(['month_name', 'month'])[['count']].mean()\nonly_month.sort_values(by='month', inplace=True)\nonly_month = only_month.round(2)\nonly_month.reset_index(inplace=True)\n\nfig = go.Figure(data=[go.Bar(x=only_month['month_name'], \n                             y=only_month['count'], \n                             name='Months', \n                             marker_color='blue', \n                             text=only_month['count'],\n                             textposition='auto')])\n\nfig.update_xaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\nfig.update_layout(title_text='Average Deaths - All Months', xaxis_title='Months',\n                 yaxis_title='Average Number of Killings', title_x=0.5,barmode='stack')\n\nfig.show()","3ef97fdf":"year_count = df.groupby(['year'])[['id']].agg('count')\nyear_count.reset_index(inplace=True)\nyear_count.rename(columns={'id':'count'}, inplace=True)\n\nfig = go.Figure(data=[go.Bar(x=year_count['year'], \n                             y=year_count['count'], \n                             name='Years', \n                             marker_color='blue',\n                             text=year_count['count'],\n                             textposition='auto')])\n\nfig.update_xaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\nfig.update_layout(title_text='Deaths - All Years',xaxis_title='Years',\n                 yaxis_title='Total number of kills', title_x=0.5,barmode='stack')\nfig.show()","cc104d68":"weekday_count = df.groupby(['weekday'])[['id']].agg('count')\nweekday_count = weekday_count.reindex(['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'])\nweekday_count.reset_index(inplace=True)\nweekday_count.rename(columns={'id':'count'}, inplace=True)\n\nfig = go.Figure(data=[go.Bar(x=weekday_count['weekday'], \n                             y=weekday_count['count'],\n                             name='Weekdays', \n                             marker_color='blue',\n                             text=weekday_count['count'],\n                             textposition='auto')])\n\nfig.update_xaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\nfig.update_layout(title_text='Deaths - Days of the Week',xaxis_title='Weekdays',\n                 yaxis_title='Total Number of Killings', title_x=0.5,barmode='stack')\nfig.show()","4732bf32":"race_armed = df.loc[(df['armed'] == 'gun') | (df['armed'] == 'knife') | (df['armed'] == 'unarmed')]\nrace_armed = race_armed.groupby(['race','armed'])[['armed']].count()\nrace_armed.rename(columns={race_armed.columns[0] : 'count'}, inplace=True)\nrace_armed.reset_index(inplace=True)\nrace_armed.sort_values(by='count', ascending=False, inplace=True)","cb2ca971":"race_gun = race_armed.loc[race_armed['armed'] == 'gun']\nrace_knife = race_armed.loc[race_armed['armed'] == 'knife']\nrace_unarmed = race_armed.loc[race_armed['armed'] == 'unarmed']\n\nfig = make_subplots(rows=3, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}], \n                           [{\"type\": \"xy\"}, {\"type\": \"domain\"}],\n                           [{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"Gun Count\", \"Gun Percentages\",\n                                    \"Knife Count\", \"Knife Percentages\",\n                                   \"Unarmed Count\", 'Unarmed Percentages'))\n\ncolors=['#f299ac', '#1c1811', '#a3873b', '#f7ea72', '#c95742', '#3ba3a1']\n\n\nfig.add_trace(go.Bar(x=race_gun['race'], \n                     y=race_gun['count'],\n                     text=race_gun['count'],\n                     textposition = 'auto',\n                     name='Gun Count',\n                     opacity = 0.8, \n                     marker=dict(color=colors, line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Bar(x=race_knife['race'], \n                     y=race_knife['count'],\n                     text=race_knife['count'],\n                     textposition = 'auto',\n                     name='Knife Count',\n                     opacity = 0.8, \n                     marker=dict(color=colors, line=dict(color='#000000',width=1))), row=2, col=1)\n\nfig.add_trace(go.Bar(x=race_unarmed['race'], \n                     y=race_unarmed['count'],\n                     text=race_unarmed['count'],\n                     textposition = 'auto',\n                     name='Unarmed Count',\n                     opacity = 0.8, \n                     marker=dict(color=colors, line=dict(color='#000000',width=1))), row=3, col=1)\n\n\nfig.add_trace(go.Pie(labels=race_gun['race'], \n                     values=race_gun['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Gun Percent\",\n                     marker  = dict(colors = colors, line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.add_trace(go.Pie(labels=race_knife['race'], \n                     values=race_knife['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Knife Percent\",\n                     marker  = dict(colors = colors, line = dict(width = 1.5))), \n              row=2, col=2)\n\nfig.add_trace(go.Pie(labels=race_gun['race'], \n                     values=race_unarmed['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Unarmed Percent\",\n                     marker  = dict(colors = colors, line = dict(width = 1.5))), \n              row=3, col=2)\n\nfig.update_layout(height=1000, showlegend=True)\n\nfig.show()","e9974fb5":"pd.pivot_table(df, index = 'race', columns = 'age_range', values = 'id',aggfunc ='count')","2dedb298":"df_race_age = df.groupby(['race', 'age_range']).agg('count')['id'].to_frame('count').reset_index()\ndf_black = df_race_age.loc[df_race_age['race'] == 'Black']\ndf_white = df_race_age.loc[df_race_age['race'] == 'White']\ndf_hispanic = df_race_age.loc[df_race_age['race'] == 'Hispanic']\ndf_native = df_race_age.loc[df_race_age['race'] == 'Native']\ndf_asian = df_race_age.loc[df_race_age['race'] == 'Asian']\ndf_other = df_race_age.loc[df_race_age['race'] == 'Other']","6ed2609b":"black = go.Bar(x = df_black['age_range'], y = df_black['count'], \n             marker=dict(color='black'),name=\"black\")\n\nwhite = go.Bar(x=df_white['age_range'],y=df_white['count'],\n               marker=dict(color='pink'),name=\"white\")\n\nhispanic = go.Bar(x=df_hispanic['age_range'],y=df_hispanic['count'],\n               marker=dict(color='tan'),name=\"hispanic\")\n\nasian = go.Bar(x=df_asian['age_range'],y=df_asian['count'],\n               marker=dict(color='yellow'),name=\"asian\")\n\nnative = go.Bar(x=df_native['age_range'],y=df_native['count'],\n               marker=dict(color='red'),name=\"native\")\n\nother = go.Bar(x=df_other['age_range'],y=df_other['count'],\n               marker=dict(color='teal'),name=\"other\")\n\ndata=[white,black,hispanic,asian,native,other]\n\nfig = go.Figure(data)\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title=\"Race & Age Range\",title_x=0.5,xaxis=dict(title=\"Age Range\"),yaxis=dict(title=\"Number of Victims\"),\n                   barmode=\"group\")\nfig.show()","fa573a1d":"race_age = df.loc[(df['age_range'] == '<18') | (df['age_range'] == '18-35') | (df['age_range'] == '36-50') | (df['age_range'] == '51-65') | (df['age_range'] == '65+') ]\nrace_age = race_age.groupby(['race','age_range'])[['age_range']].count()\nrace_age.rename(columns={race_age.columns[0] : 'count'}, inplace=True)\nrace_age.reset_index(inplace=True)\nrace_age.sort_values(by='count', ascending=False, inplace=True)\n\nrace_age1 = race_age.loc[race_age['age_range'] == '<18']\nrace_age2 = race_age.loc[race_age['age_range'] == '18-35']\nrace_age3 = race_age.loc[race_age['age_range'] == '36-50']\nrace_age4 = race_age.loc[race_age['age_range'] == '51-65']\nrace_age5 = race_age.loc[race_age['age_range'] == '65+']","f80f78b5":"fig = make_subplots(rows=2, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}], \n                           [{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"18-35 Count\", \"8-35 Percentages\",\n                                    \"36-50 Count\", \"36-50 Percentages\"))\n\ncolors=['#f299ac', '#1c1811', '#a3873b', '#f7ea72', '#c95742', '#3ba3a1']\n\n\nfig.add_trace(go.Bar(x=race_age2['race'], \n                     y=race_age2['count'],\n                     text=race_age2['count'],\n                     textposition = 'auto',\n                     name='18-35 Count',\n                     opacity = 0.8, \n                     marker=dict(color=colors, line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Bar(x=race_age3['race'], \n                     y=race_age3['count'],\n                     text=race_age3['count'],\n                     textposition = 'auto',\n                     name='36-50 Count',\n                     opacity = 0.8, \n                     marker=dict(color=colors, line=dict(color='#000000',width=1))), row=2, col=1)\n\nfig.add_trace(go.Pie(labels=race_age2['race'], \n                     values=race_age2['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"18-35 Percent\",\n                     marker  = dict(colors = colors, line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.add_trace(go.Pie(labels=race_age3['race'], \n                     values=race_age3['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"36-50 Percent\",\n                     marker  = dict(colors = colors, line = dict(width = 1.5))), \n              row=2, col=2)\n\nfig.update_layout(height=1000, showlegend=True)\n\nfig.show()","2037371a":"df_race_gender = df.groupby(['race', 'gender']).agg('count')['id'].to_frame('count').reset_index()\n\ndf_black_gender = df_race_gender.loc[df_race_gender['race'] == 'Black']\ndf_black_gender = df_black_gender.sort_values(by='count', ascending=False)\n\ndf_white_gender = df_race_gender.loc[df_race_gender['race'] == 'White']\ndf_white_gender = df_white_gender.sort_values(by='count', ascending=False)\n\ndf_hispanic_gender = df_race_gender.loc[df_race_gender['race'] == 'Hispanic']\ndf_hispanic_gender = df_hispanic_gender.sort_values(by='count', ascending=False)\n\ndf_asian_gender = df_race_gender.loc[df_race_gender['race'] == 'Asian']\ndf_asian_gender = df_asian_gender.sort_values(by='count', ascending=False)\n\ndf_native_gender = df_race_gender.loc[df_race_gender['race'] == 'Native']\ndf_native_gender = df_native_gender.sort_values(by='count', ascending=False)\n\ndf_other_gender = df_race_gender.loc[df_race_gender['race'] == 'Other']\ndf_other_gender = df_other_gender.sort_values(by='count', ascending=False)","ec8a4d37":"black = go.Bar(x=df_black_gender['gender'], y=df_black_gender['count'], \n              marker=dict(color='black'),name=\"black\", \n              text=df_black_gender['count'], textposition='auto')\n\nwhite = go.Bar(x=df_white_gender['gender'], y=df_white_gender['count'], \n              marker=dict(color='pink'),name=\"white\",\n              text=df_white_gender['count'], textposition='auto')\n\nhispanic = go.Bar(x=df_hispanic_gender['gender'], y=df_hispanic_gender['count'], \n              marker=dict(color='tan'),name=\"hispanic\",\n            text=df_hispanic_gender['count'], textposition='auto')\n\nasian = go.Bar(x=df_asian_gender['gender'], y=df_asian_gender['count'], \n              marker=dict(color='yellow'),name=\"asian\",\n              text=df_asian_gender['count'], textposition='auto')\n\nnative = go.Bar(x=df_native_gender['gender'], y=df_native_gender['count'], \n              marker=dict(color='red'),name=\"native\",\n               text=df_native_gender['count'], textposition='auto')\n\nother = go.Bar(x=df_other_gender['gender'], y=df_other_gender['count'], \n              marker=dict(color='teal'),name=\"other\",\n              text=df_other_gender['count'], textposition='auto')\n\ndata=[white, black, hispanic, asian, native, other]\n\nfig = go.Figure(data)\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title=\"Race & Gender\", \n                  title_x=0.5, \n                  xaxis=dict(title=\"Gender\"), \n                  yaxis=dict(title=\"Number of Victims\"),\n                  barmode=\"group\")\nfig.show()","0e436f59":"def pop_plot(state):\n    \n    state_pop = population1[['Fact',state]][2:9]\n    state_pop.sort_values(by=state, ascending=False, inplace=True)\n    \n    colors=['#3b76a3', '#3ba372', '#a3873b', '#a33b3b', '#863ba3', '#3ba3a1']\n\n#     labels=['White', 'Black', 'Native', 'Asian', 'Hispanic']\n#     values=population['California'][2:4]\n    \n    fig = go.Figure(data=(go.Bar(x=state_pop['Fact'], \n                                 y=state_pop[state],\n                                 text=state_pop[state],\n                                 textposition = 'auto',\n                                 name=('Percentage of Population'),\n                                 opacity = 0.8, \n                                 marker=dict(color=colors, line=dict(color='#000000',width=1)))))\n    \n    fig.update_layout(height=500,\n                      yaxis_title=\"% of Total Population\",\n                      title_text=(state + ' Total Population: ' + df_population[state][0]),\n                      showlegend=False)\n    fig.show()\n\n","aa122df5":"state_count = df['state'].value_counts().to_frame()[:10]\nstate_count.reset_index(inplace=True)\nstate_count.rename(columns={'index':'state', 'state':'count'}, inplace=True)\n\nrace_state = df.groupby(['race','state'])[['state']].count()\nrace_state.rename(columns={'state':'count'}, inplace=True)\nrace_state.reset_index(inplace=True)\nrace_state = race_state.loc[race_state['state'].isin(state_count['state'])]\nrace_state.sort_values(by='count', ascending=False, inplace=True)","2b7e118e":"def race_state_count(state):\n\n    fig = make_subplots(rows=1, cols=2, \n                        specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]] ,\n                        subplot_titles=((state + \" Race Count\"), (state +\" Race Percentages\")))\n\n    colors=['#3b76a3', '#3ba372', '#a3873b', '#a33b3b', '#863ba3', '#3ba3a1']\n\n    fig.add_trace(go.Bar(x=race_state['race'].loc[race_state['state'] == state], \n                         y=race_state['count'].loc[race_state['state'] == state],\n                         text=race_state['count'].loc[race_state['state'] == state],\n                         textposition = 'auto',\n                         name=(state +' Race Count'),\n                         opacity = 0.8, \n                         marker=dict(color=colors, line=dict(color='#000000',width=1))), row=1, col=1)\n\n    fig.add_trace(go.Pie(labels=race_state['race'].loc[race_state['state'] == state], \n                         values=race_state['count'].loc[race_state['state'] == state],\n                         textfont=dict(size=15), opacity = 0.8,\n                         hole = 0.5, \n                         hoverinfo = \"label+percent+name\",\n                         domain  = dict(x = [.0,.48]),\n                         name    = (state + \" Race Percent\"),\n                         marker  = dict(colors = colors, line = dict(width = 1.5))), \n                  row=1, col=2)\n\n    fig.update_layout(height=500, showlegend=True)\n\n    fig.show()","c540aab2":"pop_plot('California')","98309137":"race_state_count('CA')","c5a00103":"pop_plot('Texas')","170ffa12":"race_state_count('TX')","63ab81fb":"pop_plot('Florida')","8e8a9599":"race_state_count('FL')","0fe1a161":"pop_plot('Colorado')","08f6dc2b":"race_state_count('CO')","eaf0692e":"pop_plot('Arizona')","30ccaaff":"race_state_count('AZ')","e50ff57a":"pop_plot('Georgia')","92395b9f":"race_state_count('GA')","7e12f744":"pop_plot('Oklahoma')","8a2b17ae":"race_state_count('OK')","fffedcc7":"race_mental = df.groupby(['race','signs_of_mental_illness']).agg('count')['id'].to_frame('count').reset_index()\n\nblack_mental = race_mental.loc[race_mental['race'] == 'Black']\nblack_mental = black_mental.sort_values(by='count', ascending=False)\n\nwhite_mental = race_mental.loc[race_mental['race'] == 'White']\nwhite_mental = white_mental.sort_values(by='count', ascending=False)\n\nhispanic_mental = race_mental.loc[race_mental['race'] == 'Hispanic']\nhispanic_mental = hispanic_mental.sort_values(by='count', ascending=False)\n\nasian_mental = race_mental.loc[race_mental['race'] == 'Asian']\nasian_mental = asian_mental.sort_values(by='count', ascending=False)\n\nnative_mental = race_mental.loc[race_mental['race'] == 'Native']\nnative_mental = native_mental.sort_values(by='count', ascending=False)\n\nother_mental = race_mental.loc[race_mental['race'] == 'Other']\nother_mental = other_mental.sort_values(by='count', ascending=False)","75e7ac5b":"black = go.Bar(x=black_mental['signs_of_mental_illness'], y=black_mental['count'],\n              marker=dict(color='black'),name=\"black\")\n\nwhite = go.Bar(x=white_mental['signs_of_mental_illness'], y=white_mental['count'],\n              marker=dict(color='pink'),name=\"white\")\n\nhispanic = go.Bar(x=hispanic_mental['signs_of_mental_illness'], y=hispanic_mental['count'],\n              marker=dict(color='tan'),name=\"hispanic\")\n\nasian = go.Bar(x=asian_mental['signs_of_mental_illness'], y=asian_mental['count'],\n              marker=dict(color='yellow'),name=\"asian\")\n\nnative = go.Bar(x=native_mental['signs_of_mental_illness'], y=native_mental['count'],\n              marker=dict(color='red'),name=\"native\")\n\nother = go.Bar(x=other_mental['signs_of_mental_illness'], y=other_mental['count'],\n              marker=dict(color='teal'),name=\"other\")\n\ndata = [white,black,hispanic,asian,native,other]\n\nfig = go.Figure(data)\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\nfig.update_layout(title=\"Death Toll - Race & Mental Illness\", title_x=0.5,\n                  xaxis=dict(title=\"Signs of Mental Illness\"),\n                  yaxis=dict(title=\"Number of Victims\"),\n                   barmode=\"group\")\nfig.show()","f1fce4b8":"threat_count = df['threat_level'].value_counts().to_frame()[:10]\nthreat_count.reset_index(inplace=True)\nthreat_count.rename(columns={'index':'threat_level', 'threat_level':'count'}, inplace=True)\n\nrace_threat = df.groupby(['race','threat_level'])[['threat_level']].count()\nrace_threat.rename(columns={'threat_level':'count'}, inplace=True)\nrace_threat.reset_index(inplace=True)\nrace_threat = race_threat.loc[race_threat['threat_level'].isin(threat_count['threat_level'])]\nrace_threat.sort_values(by='count', ascending=False, inplace=True)","6f82d8cf":"attack = race_threat.loc[race_threat['threat_level'] == 'attack']\nundetermined = race_threat.loc[race_threat['threat_level'] == 'undetermined']\nother = race_threat.loc[race_threat['threat_level'] == 'other']\n\nfig = make_subplots(rows=3, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}], \n                           [{\"type\": \"xy\"}, {\"type\": \"domain\"}],\n                           [{\"type\": \"xy\"}, {\"type\": \"domain\"}]], \n                    subplot_titles=(\"Attack Count\", \"Attack Percentages\",\n                                    \"Other Count\", \"Other Percentages\",\n                                   \"Undetermined Count\", 'Undetermined Percentages'))\n\nbar_colors=['#3b76a3', '#3ba372', '#a3873b', '#a33b3b', '#863ba3', '#3ba3a1']\npie_colors=['#3b76a3', '#3ba372', '#a3873b', '#a33b3b', '#863ba3', '#3ba3a1']\n\nfig.add_trace(go.Bar(x=attack['race'], \n                     y=attack['count'],\n                     text=attack['count'],\n                     textposition = 'auto',\n                     name='Attack Count',\n                     opacity = 0.8, \n                     marker=dict(color=bar_colors, line=dict(color='#000000',width=1))), row=1, col=1)\n\nfig.add_trace(go.Bar(x=undetermined['race'], \n                     y=undetermined['count'],\n                     text=undetermined['count'],\n                     textposition = 'auto',\n                     name='Undetermined Count',\n                     opacity = 0.8, \n                     marker=dict(color=bar_colors, line=dict(color='#000000',width=1))), row=2, col=1)\n\nfig.add_trace(go.Bar(x=other['race'], \n                     y=other['count'],\n                     text=other['count'],\n                     textposition = 'auto',\n                     name='Unarmed Count',\n                     opacity = 0.8, \n                     marker=dict(color=bar_colors, line=dict(color='#000000',width=1))), row=3, col=1)\n\n\nfig.add_trace(go.Pie(labels=attack['race'], \n                     values=attack['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Attack Percent\",\n                     marker  = dict(colors = pie_colors, line = dict(width = 1.5))), \n              row=1, col=2)\n\nfig.add_trace(go.Pie(labels=undetermined['race'], \n                     values=undetermined['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Undetermined Percent\",\n                     marker  = dict(colors = pie_colors, line = dict(width = 1.5))), \n              row=2, col=2)\n\nfig.add_trace(go.Pie(labels=other['race'], \n                     values=other['count'],\n                     textfont=dict(size=15), opacity = 0.8,\n                     hole = 0.5, \n                     hoverinfo = \"label+percent+name\",\n                     domain  = dict(x = [.0,.48]),\n                     name    = \"Other Percent\",\n                     marker  = dict(colors = pie_colors, line = dict(width = 1.5))), \n              row=3, col=2)\n\nfig.update_layout(height=1000, showlegend=True)\n\nfig.show()","f9b91df4":"# <a id='2'>II. DATA OVERVIEW & INSIGHTS<\/a>","ad1d44f3":"### **RACE & GENDER**","dedf0935":"### **GEORGIA**","80774709":"### **RACE DISTRIBUTION**","06afa1c4":"### **THREAT LEVEL DISTRIBUTION**","a6c48de2":"### **RACE AND AGE GROUP**","bd6f859f":"### **MANNER OF DEATH DISTRIBUTION**","71fc7949":"### **MOST KILLINGS BY DAY**","8c839479":"### **NUMBER OF KILLINGS PER STATE**","0f0364d3":"### **RACE & LOCATION**\n\nLet's take a look at the racial distribution of the 7 states with the most deaths.\n\nFirst lets create some plotting functions to vizualize data from the census and our original dataset.","45958d11":"# <a id=\"3\">III. MISSING VALUES<\/a>\n","c966dcae":"### **CARDINALITY**","5bf14a83":"# <a id=\"5\">V. EXPLORATORY DATA ANALYSIS<\/a>","24285f9a":"### **RACE & THREAT LEVEL**","787cd6c2":"### OBSERVATIONS: \n* Although Hispanic\/Latino people make up 39.4% of California's population, they are killed by police at a rate of 43.6%. \n* Black people are killed at a rate three times higher than their actual population number in California.\n* White people are killed at a rate less than half of their population number. ","5367f085":"### **YEARS WITH MOST KILLINGS**","0e2c8833":"# <a id='1'>I. LOAD PACKAGES & LIBRARIES<\/a>","fc3b8fac":"### **AGE RANGE DISTRIBUTION**","cb430165":"### **FLORIDA**","1c9790d1":"<a id=\"univariate\"><\/a>\n## **UNIVARIATE DATA EXPLORATION & VISUALIZATION**\n\nIn this section we'll create visualizations for numeric and categorical data on an individual basis.  ","7604399b":"I consider the above analysis to be only partially complete as there are many other aspects of the data to explore. But it is certainly a good start! I will continue to revisit the data and create new visualizations to gain further insight into the data.\n\nThe data set does not include population information, so the numbers of killings by race does not reflect any disparities or biases that may be present. However, census data reveals that Black and Hispanic people make up about 13% & 16% of the United States population respectively and White people make up about 70%; each are killed disproportionately to their population. Of the people listed in the data set, 51% are White, 26% are Black (twice the population!) and 18% are Hispanic.\n\nIt would also be very interesting to have knowledge of the economic status of each of the victims, although that is far outside the scope of this dataset. \n\nThanks for stopping by!","88acfa8d":"# <a id=\"4\">IV. FEATURE ENGINEERING<\/a>","f8b9d1ae":"### **WAS OFFICER'S BODY CAMERA ON?**","ac095d1b":"# <a id=\"6\">VI. CONCLUSION<\/a>","0b1a04c2":"### **GENDER DISTRIBUTION**","30ccdd1f":"<a id=\"timewise\"><\/a>\n## **TIMEWISE DATA EXPLORATION**\n\nIn this section we'll get an idea of how the killings are distributed throughout the years, months, and days. We'll look at averages and totals to determine which years, months, and days have the most and least number of deaths. ","5ff6c4d8":"### **TOP 15 WEAPONS**","d81196ae":"### RACE & WEAPON TYPE","0baa95ef":"### **MONTHLY DEATHS BY YEAR**\n\nLet's visualize how many police killings occurred each month from 2015 to 2020","bcb9a8e2":"### **WAS VICTIM FLEEING?**","ab992616":"### **MONTHS WITH THE HIGHEST AVERAGE KILLINGS**","be945781":"### **MONTHLY DEATHS ORGANIZED BY YEAR**\nFor a better comparison, let's visualize the number of killings each month for every year. ","5545da58":"### **OBSERVATIONS:**\n* Suprisingly, not all of the most populated states have the highest number of killings. ","2a9a3846":"<p  style=\"text-align: center;\"><font size=\"8\"><b>POLICE KILLINGS IN THE USA <br>2015 to 2019<\/b><\/font><\/p>\n\n<img src=\"https:\/\/github.com\/miltonsuggs\/EDA_USA-Police-Shootings\/blob\/master\/Don't%20Shoot.jpg?raw=true\" alt=\"Don't Shoot\">  \n\n\n## **INTRODUCTION**\n\nSince its inception, police in America have continued to have a tenuous and volatile relationship with many of its citizens, especially those of lower economic status and those whose race is not classified as White. \n\nIn this notebook I will perform a exploratory data analysis on a dataset that consists of people killed by police throughout the United States. I have also added US census data to get a clearer picture of how the racial statistics compare to those of the United States as a whole. \n\nI hope this notebook provides you with insights and I hope that we can work toward rectifying the racial and economic disparity that continues to fuel police brutality in these United States of America. ","4458b6ac":"### **POLICE KILLINGS BY YEAR**","c25e183a":"### **OKLAHOMA**","ece7c6e5":"### **MENTAL ILLNESS DISTRIBUTION**","15f6dabd":"### **RACE AND MENTAL ILLNESS**","ccc8429d":"### **CALIFORNIA**","74d1ff76":"<a id=\"top\"><\/a>\n\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of Contents<\/h3>\n\n* <a href='#1'>I. LOAD LIBRARIES & PACKAGES<\/a>\n* <a href='#2'>II. DATA OVERVIEW & INSIGHTS<\/a>\n* <a href='#3'>III. MISSING VALUES<\/a>\n* <a href='#4'>IV. FEATURE ENGINEERING<\/a>\n* <a href='#5'>V. EXPLORATORY DATA ANALYSIS<\/a>  \n    * [Univariate Data Exploration](#univariate)\n    * [Timewise Data Exploration](#timewise)\n    * [Bivariate Data Exploration](#bivariate)\n* <a href='#6'>VI. CONCLUSION<\/a>","e1209bd5":"### **TEXAS**","0d9e5ffe":"### **ARIZONA**","043bc24f":"<a id=\"bivariate\"><\/a>\n## **BIVARIATE DATA EXPLORATION & VISUALIZATION**","a7eade55":"### **COLORADO**","8c3723c6":"### **AGE AND AGE RANGES**"}}