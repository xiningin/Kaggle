{"cell_type":{"df73fd3d":"code","58697e8f":"code","238c9793":"code","6b8a6884":"code","a8e8ef12":"code","95f1ebf1":"code","a3f30ea9":"code","5fc33d8a":"code","96a9879a":"code","d14794dd":"code","2e1cc9b6":"code","ab6e6ef8":"code","1b32627f":"code","23b9cd7b":"code","8b5d1e0f":"code","3b5cdcde":"markdown","26982dde":"markdown","72fa4f19":"markdown","cc9e8380":"markdown","23f2adf4":"markdown","80e43f15":"markdown","5ac56f47":"markdown","d8926927":"markdown","5197c9fa":"markdown","93e6f247":"markdown","bca8f65f":"markdown","32ddc411":"markdown","b6d74415":"markdown","7ad63406":"markdown","6a9066cb":"markdown","08e83da2":"markdown"},"source":{"df73fd3d":"# imports\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport pandas as pd \n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# fetch datasets\ncompetitions = pd.read_csv('..\/input\/d\/kaggle\/meta-kaggle\/Competitions.csv')\ndatasets = pd.read_csv('..\/input\/d\/kaggle\/meta-kaggle\/Datasets.csv')\ndataset_version = pd.read_csv('..\/input\/d\/kaggle\/meta-kaggle\/DatasetVersions.csv')\nusers = pd.read_csv('..\/input\/d\/kaggle\/meta-kaggle\/Users.csv')\nkernels = pd.read_csv(\"..\/input\/d\/kaggle\/meta-kaggle\/Kernels.csv\")\nkernel_versions = pd.read_csv('..\/input\/d\/kaggle\/meta-kaggle\/KernelVersions.csv')\nforum_topics = pd.read_csv(\"..\/input\/d\/kaggle\/meta-kaggle\/ForumTopics.csv\")\nimport datetime\n \n\n# for clickable url\ndef make_clickable_both(val): \n    title, competition_url = str(val).split('#')\n    return f'<a href=\"{competition_url}\">{title}<\/a>'\n","58697e8f":"print(f'Note: This Kernal is executed on meatadata avaialble at : {datetime.datetime.now()}')","238c9793":" print (f'Total Number of Kernels Created in Kaggle  :{ kernels.shape[0]}')","6b8a6884":"df = kernels.sort_values(by ='TotalVotes' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:25]\n\ndf = pd.merge(df, kernel_versions, how='left', left_on=['CurrentKernelVersionId'],\n               right_on=['Id'])\n \ndf= df[['AuthorUserId_x','CurrentUrlSlug','Title', 'TotalVotes_x']]\n\ndf = pd.merge(df, users, how='left', left_on=['AuthorUserId_x'], right_on=['Id'])\ndf['keranel_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['CurrentUrlSlug']\ndf['Kernel'] = df['Title'] + '#' + df['keranel_url']\ndf= df.filter(['Kernel','TotalVotes_x'], axis=1)\ndf.rename(columns={'TotalVotes_x':'TotalVotes'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Kernel': make_clickable_both}).hide_index()","a8e8ef12":"df = kernels.sort_values(by ='TotalViews' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:25]\n\ndf = pd.merge(df, kernel_versions, how='left', left_on=['CurrentKernelVersionId'],\n               right_on=['Id'])\n \ndf= df[['AuthorUserId_x','CurrentUrlSlug','Title', 'TotalViews']]\n\ndf = pd.merge(df, users, how='left', left_on=['AuthorUserId_x'], right_on=['Id'])\ndf['keranel_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['CurrentUrlSlug']\ndf['Kernel'] = df['Title'] + '#' + df['keranel_url']\ndf= df.filter(['Kernel','TotalViews'], axis=1)\n#df.rename(columns={'TotalVotes_x':'TotalVotes'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Kernel': make_clickable_both}).hide_index()","95f1ebf1":"print(f'Total Number of Hosted Competitions in Kaggle :{competitions.shape[0]}')","a3f30ea9":"ax = competitions['HostSegmentTitle'].value_counts().plot(kind='barh', figsize=(10,7),\n                                                 color=\"slateblue\", fontsize=13);\nax.set_alpha(0.8)\nax.set_title(\" Competitions in Kaggle\", fontsize=18)\nax.set_xlabel(\"Number of Competitions\", fontsize=18);\nax.set_xticks([0, 500, 1000, 1500, 2000 ])\nfor i in ax.patches:\n    ax.text(i.get_width()+.1, i.get_y()+.31, \\\n            str(round((i.get_width()), 2)), fontsize=15, color='dimgrey')\n\n# invert for largest on top \nax.invert_yaxis()","5fc33d8a":"df = competitions.sort_values(by ='TotalSubmissions' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:25]\ndf['competition_url'] ='https:\/\/www.kaggle.com\/c\/'+df['Slug']\ndf['Competition'] = df['Title'] + '#' + df['competition_url']\ndf= df.filter(['Competition','TotalSubmissions', 'HostSegmentTitle'], axis=1)\ndf.rename(columns={'TotalSubmissions':'Total Submissions','HostSegmentTitle':'Competition Type'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Competition': make_clickable_both}).hide_index()","96a9879a":"df = competitions.sort_values(by ='TotalTeams' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:25]\ndf['competition_url'] ='https:\/\/www.kaggle.com\/c\/'+df['Slug']\ndf['Competition'] = df['Title'] + '#' + df['competition_url']\ndf= df.filter(['Competition','TotalTeams', 'HostSegmentTitle'], axis=1)\ndf.rename(columns={'TotalTeams':'Total Teams','HostSegmentTitle':'Competition Type'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Competition': make_clickable_both}).hide_index()","d14794dd":"df = competitions.sort_values(by ='NumPrizes' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:25]\ndf['competition_url'] ='https:\/\/www.kaggle.com\/c\/'+df['Slug']\ndf['Competition'] = df['Title'] + '#' + df['competition_url']\ndf= df.filter(['Competition','NumPrizes', 'HostSegmentTitle'], axis=1)\ndf.rename(columns={'HostSegmentTitle':'CompetitionType'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Competition': make_clickable_both}).hide_index()","2e1cc9b6":"print (f'Total Number of Datasets Uploaded on Kaggle   :{ datasets.shape[0]}')","ab6e6ef8":"df = datasets.sort_values(by ='TotalDownloads' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:25]\ndf = df[['Id','CreatorUserId','TotalDownloads']]\ndf2 = dataset_version[['DatasetId','Title','Slug']].drop_duplicates(subset=['DatasetId','Title','Slug'])\n\ndf = pd.merge(df, df2, how='left', left_on=['Id'], right_on=['DatasetId']).drop_duplicates(subset=['Id','CreatorUserId','TotalDownloads'])\ndf = pd.merge(df, users, how='left', left_on=['CreatorUserId'], right_on=['Id'])\n\n# special case\ndf['UserName'].replace(\n    to_replace=['promptcloud'],\n    value='PromptCloudHQ',\n    inplace=True\n)\n\ndf['dataset_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['Slug']\ndf['Dataset'] = df['Title'] + '#' + df['dataset_url']\ndf= df.filter(['Dataset','TotalDownloads'], axis=1)\ndf.reset_index(drop=True).style.format({'Dataset': make_clickable_both}).hide_index()","1b32627f":"df = datasets.sort_values(by ='TotalVotes' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:25]\ndf = df[['Id','CreatorUserId','TotalVotes']]\ndf2 = dataset_version[['DatasetId','Title','Slug']]\n\ndf = pd.merge(df, df2, how='left', left_on=['Id'], right_on=['DatasetId'])\ndf= df.drop_duplicates(subset=['Title','Slug'])\ndf = pd.merge(df, users, how='left', left_on=['CreatorUserId'], right_on=['Id'])\ndf= df.drop_duplicates(subset=['CreatorUserId','DatasetId'])\n\n\ndf['UserName'].replace(\n    to_replace=['promptcloud'],\n    value='PromptCloudHQ',\n    inplace=True\n)\n\ndf['dataset_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['Slug']\ndf['Dataset'] = df['Title'] + '#' + df['dataset_url']\ndf= df.filter(['Dataset','TotalVotes'], axis=1)\ndf.reset_index(drop=True).style.format({'Dataset': make_clickable_both}).hide_index()\n","23b9cd7b":"performancetier = {0 : \"Novice\",1: \"Contributor\", 2: \"Expert\", 3: \"Master\", 4: \"Grandmaster\", 5 :\"Kaggle Team Member\" }\nusers['PerformanceTier'] = users['PerformanceTier'].map(performancetier)\n\nprint (f'Total Number of Users Registered in Kaggle   :{ users.shape[0]}')","8b5d1e0f":"ax = users['PerformanceTier'].value_counts().plot(kind='barh', figsize=(10,7),\n                                                 color=\"slateblue\", fontsize=13);\nax.set_alpha(0.8)\nax.set_title(\" Status of Kaggle Users  \", fontsize=18)\nax.set_xlabel(\"Number of Users \", fontsize=18);\n#ax.set_xticks([0, 500000, 1000000, 1500000, 2000000, 2500000, 3000000, 3500000, 4000000, 4500000 ])\n\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_width pulls left or right; get_y pushes up or down\n    ax.text(i.get_width()+.1, i.get_y()+.31, \\\n            str(round((i.get_width()), 2)), fontsize=15, color='dimgrey')","3b5cdcde":"### Thanks for reading. If you find the kernel usefull please do <font color='purple'> Upvote<\/font>.\n","26982dde":"### Top 25 Kaggle Competitions with most number of participated teams","72fa4f19":"### Top 25 Most Voted Kaggle Datasets  ","cc9e8380":"### Top 25 Most Voted Kaggle Kernels","23f2adf4":"<font color='purple'> <B> Kaggle is a sea of Data Science and is growing exponentially. For Kagglers, specially newbies, finding best of Kaggle items is like finding gems from ocean. I am trying to put best of Kaggle materials at one place through this kernel. <B\/><\/font>","80e43f15":"## Best of Kaggle: DataSets","5ac56f47":"### Top 25 Kaggle Competitions with most number of submissions","d8926927":"## Best of Kaggle in one place ","5197c9fa":"![](https:\/\/media.giphy.com\/media\/26ufdipQqU2lhNA4g\/giphy.gif)\n<div align=\"center\"><font size=\"1\">Source:giphy.com<\/font><\/div> ","93e6f247":"### Top 25 Most Viewed Kaggle Kernels  ","bca8f65f":"### Top 25 Most Downloaded Kaggle Datasets  ","32ddc411":"## Best of Kaggle: Users","b6d74415":"### Top 25 Kaggle competitions  with most number of prizes","7ad63406":"## Best of Kaggle: Kernels","6a9066cb":"#####  Acknowledgment : \n\nI thanks Kaggle team for sharing this [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) dataset and many Kaggle stalwarts specially [shivamb](https:\/\/www.kaggle.com\/shivamb),[kabure](https:\/\/www.kaggle.com\/kabure),[srk](https:\/\/www.kaggle.com\/sudalairajkumar) for writing cool kernels on this dataset and showing how to wonderfully use this metadata. \n\n","08e83da2":"## Best of Kaggle: Competitions"}}