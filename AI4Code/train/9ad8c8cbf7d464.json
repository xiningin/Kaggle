{"cell_type":{"86fa5294":"code","3fac21c2":"code","f7068f82":"code","e4aefb46":"code","0a84e6c1":"code","b4f3e56f":"code","037f8d9d":"code","9dedd632":"code","830ccf44":"code","d5fe9cf9":"code","21d1ca79":"code","336cde59":"code","61a073a2":"code","d40895ef":"code","89e8fe44":"markdown"},"source":{"86fa5294":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nfrom PIL import Image\nimport cv2\nimport os\nimport keras\nimport skimage.io\nimport keras.backend as K\nimport tensorflow as tf\nfrom tensorflow.keras import Input, Model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout,BatchNormalization ,Activation,add\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.applications import DenseNet201\nfrom keras.applications.mobilenet import MobileNet\nfrom keras.applications.densenet import DenseNet169\nfrom keras.applications.vgg19 import VGG19\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import to_categorical\nfrom keras.layers.experimental.preprocessing import RandomFlip, RandomRotation, RandomCrop, Rescaling, RandomTranslation\nfrom keras import Sequential\nfrom tqdm import tqdm\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.optimizers import Adam","3fac21c2":"root_dir = '..\/input\/cassava-leaf-disease-classification'\n\ntrain_df = pd.read_csv(os.path.join(root_dir, 'train.csv'))\nprint(\"there are \" + str(train_df.shape[0]) + \" train samples\" )\ntrain_df.head()","f7068f82":"train_img_dir = os.path.join(root_dir, 'train_images')  \n\nfigure = plt.figure(figsize = (20,20))\n\ncont = 0\n    \nfor i in range(5):\n    \n    speci = train_df[train_df['label'] == i]\n    \n    for j in range(5):\n        \n        img = Image.open(os.path.join(train_img_dir, speci.iloc[j,0]))\n        \n        plt.subplot(5,5, cont+1)\n        \n        plt.imshow(img)\n        \n        cont = cont + 1","e4aefb46":"image_preprocessor = Sequential([\n    RandomFlip(\"horizontal_and_vertical\"),\n    RandomCrop(150,150),\n    RandomTranslation(0.3, 0.3),\n    RandomRotation(0.5),\n    Rescaling(1.\/255)])\n\ndef custom_gen(batch_size, image_dir, h = 150, w = 150):\n    \n    start = 0\n    end = batch_size\n    images = train_df['image_id']\n    labels = train_df['label']\n    while 1:\n        \n        if end >= train_df.shape[0]:\n            start = 0\n            end = batch_size \n            continue\n        else:\n        \n            batch = []\n\n            if start == 0:\n                names = images[:end]\n                y = to_categorical(labels[:end], num_classes = 5)\n            else:\n                names = images[start:end]\n                y = to_categorical(labels[start:end], num_classes = 5)\n\n            for name in names:\n\n                img = cv2.imread(os.path.join(image_dir,name))\n                img = np.expand_dims(img, axis = 0)\n                img = image_preprocessor(img)\n                img = np.squeeze(img, axis = 0)\n                batch.append(img)\n\n\n\n            end = end + batch_size\n            start = start +  batch_size\n\n\n            yield np.array(batch), y","0a84e6c1":"base_model = tf.keras.applications.ResNet50(input_shape=(150,150,3),include_top=False,weights=\"imagenet\")","b4f3e56f":"# Freezing Layers\n\nfor layer in base_model.layers[:-4]:\n    layer.trainable=False","037f8d9d":"# Building Model\n\nmodel=Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(128,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(32,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dense(5, activation = 'softmax'))","9dedd632":"# Model Summary\n\nmodel.summary()","830ccf44":"from tensorflow.keras.utils import plot_model\nfrom IPython.display import Image\nplot_model(model, to_file='convnet.png', show_shapes=True,show_layer_names=True)\nImage(filename='convnet.png') ","d5fe9cf9":"lrd = ReduceLROnPlateau(monitor = 'val_loss',patience = 2,verbose = 1,factor = 0.75, min_lr = 1e-4)\n\nmcp = ModelCheckpoint('model.h5')\n\nes = EarlyStopping(verbose=1, patience=2)","21d1ca79":"model.compile(optimizer = 'adam', loss = 'categorical_crossentropy',metrics=['accuracy'])","336cde59":"batch_size = 64\nepochs = 20\nsteps_per_epoch = train_df.shape[0] \/\/ batch_size\ntrain_gen = custom_gen(batch_size, train_img_dir)\n%time\nhistory = model.fit(train_gen, epochs = epochs, steps_per_epoch = steps_per_epoch,verbose = 1,callbacks=[lrd,mcp,es] )","61a073a2":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","d40895ef":"test_leaf = \"..\/input\/cassava-leaf-disease-classification\/test_images\"\n\ntest_names = pd.Series(os.listdir(test_leaf))\n\n\nfor j in range(3):\n\n    for i in tqdm(range(len(test_names))):\n\n        image = cv2.imread(os.path.join(test_leaf, test_names[i]))\n        image = np.expand_dims(image, axis = 0)\n        image = image_preprocessor(image)\n        if i ==0:\n\n            pred = model.predict(image)\n        else:\n            pred = np.concatenate([pred, model.predict(image)])\n            \n    if j ==0:\n        final = pred\n    else:\n        final = final +pred\n     \npred = pd.Series(np.argmax(final, axis = 1))\n\n\ntest_df = pd.concat([test_names, pred], axis = 1)\ntest_df = test_df.rename(columns = {0: 'image_id', 1: 'label'})\n\ntest_df.to_csv('submission.csv', index = False)\n","89e8fe44":"## Cassava Leaf Disease Classification models using ResNet50\n\n\n### ResNet50\n\nResNet50 is a variant of ResNet model which has 48 Convolution layers along with 1 MaxPool and 1 Average Pool layer. It has 3.8 x 10^9 Floating points operations. It is a widely used ResNet model and we have explored ResNet50 architecture in depth.\n\n\n[![image.png](attachment:image.png)](http:\/\/)\n\n\n\n\n### Description\n\n[train\/test]_images the image files. The full set of test images will only be available to your notebook when it is submitted for scoring. Expect to see roughly 15,000 images in the test set.\n\ntrain.csv\n\n* image_id the image file name.\n\n* label the ID code for the disease.\n\nsample_submission.csv A properly formatted sample submission, given the disclosed test set content.\n\n* image_id the image file name.\n\n* label the predicted ID code for the disease.\n\n#### Dataset:\n\n[Link](https:\/\/www.kaggle.com\/c\/cassava-leaf-disease-classification\/data)"}}