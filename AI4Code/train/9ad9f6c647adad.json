{"cell_type":{"fa71eafa":"code","068c6a5a":"code","aecea4f3":"code","b652ab28":"code","bee7dff0":"code","02f02692":"code","90e0beb5":"code","dcf43a6c":"code","e247acb3":"code","efaa41b0":"code","082e2ba0":"code","986c459b":"code","91713d88":"code","9d42fb3d":"code","6c77f249":"code","8ed06118":"code","f7dbeea2":"code","6fe588b1":"code","f2d0b5b1":"code","2dbee472":"code","5b5048db":"code","78b92a83":"code","831205e1":"code","7b6f9239":"code","17580b1a":"code","da7d6f8f":"code","4c7567ae":"code","091e8475":"code","4816578c":"code","a8a0c8bb":"code","7ea78c7b":"code","80b484bc":"code","26c15bf4":"code","387f6dbb":"code","12ded2ad":"code","0ff34ab1":"code","47d64651":"code","4f597bd1":"code","02bb370f":"code","7206057e":"code","1b1eed47":"code","dbce09a3":"code","78ede8de":"code","17df76e5":"code","cb58dd7e":"code","086ba7d6":"code","c4d54555":"code","aa34f795":"code","4ce768da":"code","d0343db6":"code","9fdebff8":"code","67912ab4":"code","a2441373":"code","363a0487":"code","a27fa53d":"code","e7c89678":"code","43fa5445":"code","9577af8b":"code","22a342bd":"code","654b4359":"code","cc99b9ca":"code","2f407900":"code","9751063c":"code","199e5649":"code","3f950dc3":"code","4a199d5a":"code","559b008b":"code","d7af24b2":"markdown","33d03a97":"markdown","7f771994":"markdown","d132f724":"markdown","4e8f2cdb":"markdown","ee1de775":"markdown","86039f51":"markdown","140812d8":"markdown","87a9f103":"markdown","9b4248f0":"markdown","ea09d91b":"markdown","ff5c4d7e":"markdown","12e58f60":"markdown","0ff7bd83":"markdown","6eb80e2e":"markdown","48539eba":"markdown","7632e85f":"markdown","f10cb2ae":"markdown","5318384e":"markdown","12a61627":"markdown","72caeb24":"markdown","8b36bc77":"markdown"},"source":{"fa71eafa":"\n\nimport numpy as np \nimport pandas as pd \nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.metrics import r2_score\nfrom sklearn.ensemble import RandomForestRegressor\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","068c6a5a":"df=pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/unclean cclass.csv')\ndf.head()","aecea4f3":"df.duplicated().sum()\n\n#as there are 98 duplicate rows so removing them and resetting index\ndf.drop_duplicates(inplace=True)\ndf.index=[x for x in range(df.shape[0])]","b652ab28":"df.info()\n\n#some of ther features has null values so dealing with them.\n#some of the columns have wrong data type so converting them to correct datatype\n\n\n","bee7dff0":"#replacing null value with mode as year can be treated as categorical, which is more relevent\ndf['year']=df['year'].replace(np.nan,2019.0)\n\n#histogram \nsns.set_style('whitegrid')\nsns.set(font_scale=1)\nsns.histplot(df.year,color='blue',binwidth=1,kde=True)\n\n\n'''year data is negatively skewed,i.e most of the cars which are for sell \nare recent'''\n\n#we can leave bins to default if we want,i have chosen it to be 30 for better view\n","02f02692":"#price should be of float type ,so converting it to float type\nfor index in range(df.shape[0]):\n    #removing \u00a3 and ,\n    if type(df['price'][index])==str:\n        l=df['price'][index].split('\u00a3')\n\n        l1=l[1].split(',')\n        df['price'][index]=float(''.join(l1))\n\n\n#converting it to float type\ndf['price'].astype('float')\n\n#now replacing null value with average\navg=df['price'].sum()\/df.shape[0]\ndf['price'].fillna(avg,inplace=True)\n\n#now renaming this column as price in \u00a3\ndf.rename(columns={'price':'price in \u00a3'},inplace=True)\n\n#histogram\nsns.set_style('whitegrid')\nsns.set(font_scale = 1)\nsns.histplot(df['price in \u00a3'],color='blue',bins=50)","90e0beb5":"#histogram with more bins\nsns.set_style('whitegrid')\nsns.histplot(df['price in \u00a3'],color='blue',bins=200,kde=True)\n#data is positively skewed\n","dcf43a6c":"# transmission column has one null value so replcaing it with mode of column as it is categorical\n\n\ndf['transmission'].fillna('Semi-Auto',inplace=True)\n\n#barplot\nsns.set_style('white')\nsns.countplot(df['transmission'],palette='turbo_r')","e247acb3":"#mileage should be of float type,so relacing ',' with nothing\n\nfor index in range(df.shape[0]):\n    if  ',' in str(df['mileage'][index]):\n        df['mileage'][index]=df['mileage'][index].replace(',','')\n\n\n#There are some values as'Unknown' so replacing it with NaN\ndf['mileage']=df['mileage'].replace('Unknown',np.nan)\n\n        \n        \n#converting to float type        \ndf['mileage']=df['mileage'].astype('float')\n\n#replacing missing values with median\nmedian=df['mileage'].median()\ndf['mileage'].fillna(median,inplace=True)\n","efaa41b0":"#histogram\nsns.set_style('whitegrid')\nsns.histplot(df['mileage'],bins=50,color='blue')\n\n#data is positively skewed","082e2ba0":"#fuel type which is represented by a number represent the gasoline and ethanol mixture \n# e.g 30 =30% ethanol +70% gasoline\n\n\n#as more than 50% values are missing in this column so assigning a new category to missing values\n\ndf['fuel type']=df['fuel type'].replace(np.NaN,'U')","986c459b":"#count plot\nsns.set_style('whitegrid')\nsns.set(font_scale = 3)\nplt.figure(figsize=(40,15))\nsns.countplot(df['fuel type'])\n","91713d88":"#lets leave this column for now as values are ambiguous in this column","9d42fb3d":"# mileage should be of float type\n#removing ',' and converting it to float type\n\nfor index in range(df.shape[0]):\n    if ',' in str(df['mileage2'][index]):\n        df['mileage2'][index]=df['mileage2'][index].replace(',','')\n\ndf['mileage2']=df['mileage2'].replace('Unknown',np.nan)\n\ndf['mileage2']=df['mileage2'].astype('float')\n# Nan values with median as variation in data is very large\ndf['mileage2']=df['mileage2'].replace(np.nan,df['mileage'].median())","6c77f249":"#histogram\nsns.set_style('whitegrid')\nsns.set(font_scale = 1)\nsns.histplot(np.log(df['mileage2']),color='red',binwidth=1)\n\n#data is highly skewed(+ve skewed)","8ed06118":"#replacing null with mode\n#as 'Diesel' is most frequently occuring value\ndf['fuel type2']=df['fuel type2'].replace(np.nan,'Diesel')\n","f7dbeea2":"#countplot\nsns.set_style('white')\nsns.countplot(df['fuel type2'],palette=\"PuRd_r\")","6fe588b1":"#some values are in liters and some are in cc so converting all the values in liters\nfor index in range(df.shape[0]):\n    if str(df['engine size2'][index])!='Nan' and df['engine size2'][index]!='Unknown':\n        \n        if float(df['engine size2'][index])>1000:\n            df['engine size2'][index]=float(df['engine size2'][index])\/1000\n            \n            \n#replacing 'Unknown' with nan\n\ndf['engine size2']=df['engine size2'].replace('Unknown',np.nan)\n\n#converting column to float type\ndf['engine size2']=df['engine size2'].astype('float')\n\n#replacing null with mean \ndf['engine size2']=df['engine size2'].replace(np.nan,df['engine size2'].mean())\n\n\n\n","f2d0b5b1":"#histogram\nsns.set_style('whitegrid')\nsns.histplot(df['engine size2'],bins=10,color='blue')\n#data is skewed","2dbee472":"#this column is not relevent for our model so dropping this\ndf=df.drop(columns='reference')","5b5048db":"sns.set_style('whitegrid')\nsns.set(font_scale = 3)\nplt.figure(figsize=(50,30))\nsns.countplot(df['year'],hue=df['transmission'],palette='tab20')\n\n#since 1991  share(in %) of cars with manual and automatic transmission are continuously decresing\n#and share(in %)  of cars with semi-automatic transmission continuously increasing","78b92a83":"sns.set_style('white')\nsns.set(font_scale = 3)\nplt.figure(figsize=(50,30))\nsns.countplot(df['year'],hue=df['fuel type2'],palette='turbo_r')\n\n#number of hybrid cars are very less as compared to diesel and petrol\n#Majority of cars available are Diesel and petrol cars","831205e1":"a=df[df['fuel type2']=='Petrol']['price in \u00a3'].sum()\nb=df[df['fuel type2']=='Petrol']['price in \u00a3'].count()\navg_price_petrol=a\/b\n\nc=df[df['fuel type2']=='Diesel']['price in \u00a3'].sum()\nd=df[df['fuel type2']=='Diesel']['price in \u00a3'].count()\n\navg_price_diesel=c\/d\n\ne=df[df['fuel type2']=='Hybrid']['price in \u00a3'].sum()\nf=df[df['fuel type2']=='Hybrid']['price in \u00a3'].count()\n\navg_price_hybrid=e\/f\n\ndata=pd.DataFrame({'avg price':[avg_price_hybrid,avg_price_diesel,avg_price_petrol],'type of car':['Hybrid','Diesel','Petrol']})\n\nl=[avg_price_hybrid,avg_price_diesel,avg_price_petrol]\nsns.set_style('white')\nsns.set(font_scale = 1)\nsns.barplot(x=data['type of car'],y=data['avg price'],palette='turbo_r')\n\n\n#avg price of petrol is more as compared to diesel and hybrid car\n\n\n","7b6f9239":"a=df[df['transmission']=='Semi-Auto']['price in \u00a3'].sum()\nb=df[df['transmission']=='Semi-Auto']['price in \u00a3'].count()\navg_price_semi_auto=a\/b\n\nc=df[df['transmission']=='Automatic']['price in \u00a3'].sum()\nd=df[df['transmission']=='Automatic']['price in \u00a3'].count()\n\navg_price_auto=c\/d\n\ne=df[df['transmission']=='Manual']['price in \u00a3'].sum()\nf=df[df['transmission']=='Manual']['price in \u00a3'].count()\n\navg_price_manual=e\/f\n\ndata=pd.DataFrame({'avg price':[avg_price_semi_auto,avg_price_auto,avg_price_manual],'type of transmission':['Semi-Auto','Automatic','Manual']})\n\nsns.set_style('whitegrid')\nsns.set(font_scale = 1)\nsns.barplot(x=data['type of transmission'],y=data['avg price'],palette='terrain_r')\n\n\n#avg price of semi-automatic cars are more than that of automatic and manual transmission\n","17580b1a":"sns.set_style('whitegrid')\nplt.figure(figsize=(50,50))\nsns.pairplot(df)","da7d6f8f":"plt.scatter(df['year'],df['price in \u00a3'],color='red')\nplt.xlabel('year')\nplt.ylabel('price in \u00a3')\nplt.show()\n\n#it is evident that newer the car more the price. It is quite practical ,and it is also evident that only year doesn't \n#decide the price other factors also influence the car price, newer cars have higher avg selling price\n","4c7567ae":"plt.scatter(df['mileage'],df['price in \u00a3'],color='orange')\nplt.xlabel('mileage')\nplt.ylabel('price in \u00a3')\nplt.show()\n\n\n# It is evident that more the mileage lesser the price of car,but mileage alone can't decide the price, cars with\n#lesser mileage have higher avg selling price","091e8475":"plt.scatter(df['mileage2'],df['price in \u00a3'],color='green')\nplt.xlabel('mileage2')\nplt.ylabel('price in \u00a3')\nplt.show()","4816578c":"plt.scatter(df['engine size2'],df['price in \u00a3'],color='cyan')\nplt.xlabel('engine size2')\nplt.ylabel('price in \u00a3')\nplt.show()\n\n#cars with large engine size have higher average price but price also depends on other factors","a8a0c8bb":"sns.set_style('white')\nsns.set(font_scale=1)\nsns.boxplot(df['price in \u00a3'],color='red')","7ea78c7b":"sns.set_style('white')\nsns.set(font_scale=1)\nsns.boxplot(df['year'],color='yellow')","80b484bc":"sns.set_style('white')\nsns.set(font_scale=1)\nsns.boxplot(df['mileage'],color='orange')","26c15bf4":"sns.set_style('white')\nsns.set(font_scale=1)\nsns.boxplot(df['engine size2'],color='green')","387f6dbb":"#as model column has only one category so dropping it \n# engine size column have ambiguous units so dropping it for now\ndf=df.drop(columns=['engine size','model'])\n","12ded2ad":"#importing libraries\nfrom sklearn.preprocessing import StandardScaler  #for scaling the data\nfrom sklearn.model_selection import train_test_split,GridSearchCV\n\n","0ff34ab1":"#encoding categorical features\ndf=pd.get_dummies(df)\n","47d64651":"y=df['price in \u00a3']\ndf=df.drop(columns=['price in \u00a3'])\nx=df.values","4f597bd1":"#splitting the data in training and test set\nx_tr,x_te,y_tr,y_te=train_test_split(x,y,test_size=.2,random_state=0)","02bb370f":"#applying feature scaling so that features with higher values don't dominate the results\nsc=StandardScaler()\nx_tr=sc.fit_transform(x_tr)\nx_te=sc.transform(x_te)","7206057e":"from sklearn.tree import DecisionTreeRegressor\n\ndtr=DecisionTreeRegressor()\n\n#finding the optimum hyper parameters\nparams={'max_depth':[5,10,15,20],'max_features':[\"auto\", \"sqrt\", \"log2\"],'splitter':[\"best\", \"random\"]}\n\ngcv=GridSearchCV(dtr,params,verbose=5,cv=10)\ngcv.fit(x_tr,y_tr)","1b1eed47":"gcv.best_params_","dbce09a3":"#now training the model with optimal parameters and finding the accuracy\ndtr=DecisionTreeRegressor(max_depth=10,max_features='auto',splitter='best')\ndtr.fit(x_tr,y_tr)\n\n#predicting the results for test set\ny_pr=dtr.predict(x_te)","78ede8de":"#importing the library for calculating the accuracy\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.metrics import r2_score\nerror=mse(y_te,y_pr)\nrmse=error**.5\nprint(rmse)\nr2_score(y_te,y_pr)\n\n","17df76e5":"from sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor(random_state=0)\n\n#tunning hyper parameters\nparams={'n_estimators':[100,200],'max_depth':[8,15,18],'max_features':[\"auto\", \"sqrt\", \"log2\"]}\n\ngcv=GridSearchCV(rfr,params,verbose=5,cv=10)\ngcv.fit(x_tr,y_tr)","cb58dd7e":"gcv.best_params_","086ba7d6":"#training model with optimum parameters\nrfr=RandomForestRegressor(max_depth=15,max_features='auto',n_estimators=100,random_state=0)\nrfr.fit(x_tr,y_tr)\n\n#predicting for test set\ny_pr=rfr.predict(x_te)\n\n\n#accuracy of model\nerror=mse(y_te,y_pr)\nrmse=error**.5\nprint(rmse)\nr2_score(y_te,y_pr)","c4d54555":"import pickle","aa34f795":"filename = \"rfr{'max_depth': 15, 'max_features': 'auto', 'n_estimators': 100}.sav\"\npickle.dump(rfr, open(filename, 'wb'))","4ce768da":"df.shape","d0343db6":"from sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression","9fdebff8":"x_tr,x_te,y_tr,y_te=train_test_split(x,y,test_size=.3,random_state=0)\nsc=StandardScaler()\nx_tr=sc.fit_transform(x_tr)\nx_te=sc.transform(x_te)","67912ab4":"best_params=[]\n","a2441373":"random=RandomForestRegressor(random_state=0)\nparams={'n_estimators':[100,200,500,1000],'max_depth':[8,12,14],'max_features':[\"auto\", \"sqrt\", \"log2\"]}\ngcv=GridSearchCV(random,params,verbose=10)\ngcv.fit(x_tr,y_tr)\n","363a0487":"gcv.best_params_","a27fa53d":"random=RandomForestRegressor(random_state=0,max_depth=14,n_estimators=1000,max_features='auto')\nrandom.fit(x_tr,y_tr)\ny_pr=random.predict(x_te)\nerror=mse(y_te,y_pr)\nrmse=error**.5\nrmse","e7c89678":"r=r2_score(y_te,y_pr) \nr","43fa5445":"best_params.append((gcv.best_params_,r))","9577af8b":"best_params","22a342bd":"\nreg=XGBRegressor()\n    \n\nparams={'n_estimators':[100,200,500,1000],'max_depth':[4,6,3,8,10], 'learning_rate':[.07,.08,.03,.05]}\n\ngcv=GridSearchCV(reg,params,verbose=10,cv=3)\ngcv.fit(x_tr,y_tr)\n\n                        ","654b4359":"gcv.best_params_\n\n","cc99b9ca":"reg=XGBRegressor(n_estimators=1000,learning_rate=.08,max_depth=3)\nreg.fit(x_tr,y_tr)\ny_pr=reg.predict(x_te)","2f407900":"error=mse(y_te,y_pr)\nrmse=error**.5\nrmse\nbest_params.append((gcv.best_params_,r2_score(y_te,y_pr) ))","9751063c":"\nr2_score(y_te,y_pr) ","199e5649":"rmse","3f950dc3":"df['mileage2'].dtype","4a199d5a":"df=pd.DataFrame((y_te,y_pr),columns=['y_test','y_pr'])\ndf","559b008b":"d={'y_te':y_te,'y_pr':y_pr}\ndf=pd.DataFrame(d)\ndf","d7af24b2":"# importing unclean data set and performing EDA","33d03a97":"# reference","7f771994":"# price ","d132f724":"# Checking for duplicate rows and removing them","4e8f2cdb":"# Random forest model","ee1de775":"# Decision tree model","86039f51":"# fuel type ","140812d8":"# some more insights from data","87a9f103":"# scatter plot between target and features","9b4248f0":"# engine size2","ea09d91b":"# box plot ","ff5c4d7e":"# Hyper parameters tunning","12e58f60":"# mileage ","0ff7bd83":"#  engine size","6eb80e2e":"# Transmission ","48539eba":"# splitting the data into training and test set ,applying feature scaling and model training","7632e85f":"# model building","f10cb2ae":"# fuel type2","5318384e":"# year ","12a61627":"# Random forest model","72caeb24":"# Information about each column","8b36bc77":"# x and y from data"}}