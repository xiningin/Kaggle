{"cell_type":{"2e9d78c1":"code","b765c1ac":"code","93c1c62e":"code","e3378df7":"code","7fea0986":"code","bee2ebea":"code","0e0042e8":"code","76172260":"code","3da86b51":"code","ccb3e164":"code","c189bc9e":"code","14fc7a73":"code","8ffb39fc":"code","c3de9a7d":"code","955da76a":"markdown","57e812fd":"markdown","30f6316a":"markdown","d471be85":"markdown","24603394":"markdown","716ee4e2":"markdown","d9e18b93":"markdown"},"source":{"2e9d78c1":"import plotly.offline as pyo\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n\nimport plotly.graph_objs as go\nimport pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.options.display.max_columns = None\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b765c1ac":"df = pd.read_csv('\/kaggle\/input\/crop-recommendation-dataset\/Crop_recommendation.csv')\ndf.head()","93c1c62e":"df.shape","e3378df7":"df.info()","7fea0986":"df.describe()","bee2ebea":"fig, ax = plt.subplots(1, 1, figsize=(15, 9))\nsns.countplot(data=df, x='label')\nax.set(xlabel='Crop')\nax.set(ylabel='Count')\nplt.xticks(rotation=45)\n\nplt.title('Count of crop', fontsize = 20, c='black')\nplt.show()","0e0042e8":"fig, ax = plt.subplots(1, 1, figsize=(15, 9))\nsns.heatmap(df.corr(), annot=True)\nax.set(xlabel='features')\nax.set(ylabel='features')\n\nplt.title('Correlation between different features', fontsize = 20, c='black')\nplt.show()","76172260":"columns = ['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']\n\n\nfig, ax = plt.subplots(7, 1, figsize=(15, 63), sharex=True)\n\ni = 0\nfor column in columns:\n    sns.violinplot(data=df, x='label', y=column, ax=ax[i])\n    plt.xticks(rotation=45)\n    i = i + 1\n\nplt.title('Correlation between different features', fontsize = 20, c='black')\nplt.show()","3da86b51":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\ntarget = ['label']\nfeatures = ['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']\n\nX = df[features]\ny = df[target]\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)\n\nmodels = []\nmodels.append(('LogisticRegression', LogisticRegression(random_state=0)))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier(random_state=0)))\nmodels.append(('XGBClassifier', XGBClassifier(random_state=0)))\nmodels.append(('GradientBoostingClassifier', GradientBoostingClassifier(random_state=0)))\nmodels.append(('KNeighborsClassifier', KNeighborsClassifier()))\nmodels.append(('RandomForestClassifier', RandomForestClassifier(random_state=0)))\n\nmodel_name = []\naccuracy = []\n\nfor name, model in models: \n    model.fit(X_train,y_train)\n    y_pred=model.predict(X_test)\n    model_name.append(name)\n    accuracy.append(metrics.accuracy_score(y_test,y_pred))\n    print(name, metrics.accuracy_score(y_test,y_pred))","ccb3e164":"plt.figure(figsize=(15,9))\nplt.title('Accuracy Comparison')\nplt.xlabel('Accuracy')\nplt.ylabel('Model')\nsns.barplot(x = accuracy, y = model_name)\nplt.show()","c189bc9e":"model=RandomForestClassifier(random_state=0)\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)\n\nfrom sklearn import metrics\n\ncm = metrics.confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(15,15))\nsns.heatmap(cm, annot=True, fmt=\".0f\", linewidths=.5, square = True, cmap = 'Blues_r');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Confusion Matrix - score:'+str(metrics.accuracy_score(y_test,y_pred))\nplt.title(all_sample_title, size = 15);\nplt.show()\nprint(metrics.classification_report(y_test,y_pred))","14fc7a73":"from IPython.display import YouTubeVideo\nYouTubeVideo('6xtZP552OBs', width=568, height=306)","8ffb39fc":"!pip install dash","c3de9a7d":"#importing the modules\nimport dash\nimport dash_core_components as dcc\nimport dash_html_components as html\nfrom dash.dependencies import Input, Output, State\n\n\nimport plotly.graph_objs as go\nimport pandas as pd\nimport numpy as np\n\n#Data loading and cleaning\ndf = pd.read_csv('Crop_recommendation.xls')\n\n\n#features and targets\nfeatures = ['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']\ntarget = 'labels'\n\n\nfeature_options = []\nfor feature in features:\n    feature_options.append({'label':str(feature), 'value':feature})\n    \ncrop_options = []\nfor crop in df['label'].unique() :\n    crop_options.append({'label':str(crop), 'value':crop})\n\n#dashboard layout\napp = dash.Dash()\n\napp.layout = html.Div([\n                        html.Div([\n                                    html.Hr(),\n                                    html.H1('Crop Recommendation Dataset'),\n                                    html.P('The data used for this app is from the following link:'),\n                                    html.A('Crop Recommendation Dataset', href='https:\/\/www.kaggle.com\/atharvaingle\/crop-recommendation-dataset')\n                                    ]),\n                            \n                            \n                        html.Div([\n                                    html.Hr(),\n                                    html.H2('Crop wise statistics'),\n                                    html.Div('Select the crop type:'),\n                                    dcc.Dropdown(id='crop-picker', options=crop_options, value='rice'),\n                                    html.Div([\n                                             html.P('N (Nitrogen)'),\n                                             html.P(id='N (Nitrogen) mean'),\n                                             html.P(id='N (Nitrogen) range'),\n                                             ]\n                                             , style={'display':'inline-block', 'width':'14%'}),\n                                    html.Div([\n                                             html.P('P (Phosphorus)'),\n                                             html.P(id='P (Phosphorus) mean'),\n                                             html.P(id='P (Phosphorus) range'),\n                                             ]\n                                             , style={'display':'inline-block', 'width':'14%'}),\n                                    html.Div([\n                                             html.P('K (Potassium)'),\n                                             html.P(id='K (Potassium) mean'),\n                                             html.P(id='K (Potassium) range'),\n                                             ]\n                                             , style={'display':'inline-block', 'width':'14%'}),\n                                    html.Div([\n                                             html.P('Temperature'),\n                                             html.P(id='Temperature mean'),\n                                             html.P(id='Temperature range'),\n                                             ]\n                                             , style={'display':'inline-block', 'width':'14%'}),\n                                    html.Div([\n                                             html.P('Humidity'),\n                                             html.P(id='Humidity mean'),\n                                             html.P(id='Humidity range'),\n                                             ]\n                                             , style={'display':'inline-block', 'width':'14%'}),\n                                    html.Div([\n                                             html.P('pH'),\n                                             html.P(id='pH mean'),\n                                             html.P(id='pH range'),\n                                             ]\n                                             , style={'display':'inline-block', 'width':'15%'}),\n                                    html.Div([\n                                             html.P('Rainfall'),\n                                             html.P(id='Rainfall mean'),\n                                             html.P(id='Rainfall range'),\n                                             ]\n                                             , style={'display':'inline-block', 'width':'15%'}),\n                                    ]),\n                            \n                        html.Div([\n                                    html.Hr(),\n                                    html.H2('Violin plots'),\n                                    dcc.Dropdown(id='feature-picker', options=feature_options, value='N'),\n                                    dcc.Graph(id='violin_plot'),\n                                    ]),\n                            \n                        html.Div([\n                                    html.Hr(),\n                                    html.Div('Developed by Nitesh Halai.'),\n                                    html.Div('Mobile\/Whatsapp: +254 715 977 346'),\n                                    html.Div('Email: nitesh.dataviz@gmail.com'),                    \n                                    ]),\n                        ])\n\n\n#Nitrogen mean\n@app.callback(Output('N (Nitrogen) mean', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_N_mean(selected_crop):\n    mean = round(df[df['label'] == selected_crop]['N'].mean(),2)\n    return 'Mean: '+str(mean)\n\n\n#Nitrogen range\n@app.callback(Output('N (Nitrogen) range', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\n\ndef update_N_range(selected_crop):\n    minimum = round(df[df['label'] == selected_crop]['N'].min(),2)\n    maximum = round(df[df['label'] == selected_crop]['N'].max(),2)\n    return 'Range: '+str(minimum)+' - '+str(maximum)\n\n#Phosphorus mean\n@app.callback(Output('P (Phosphorus) mean', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_P_mean(selected_crop):\n    mean = round(df[df['label'] == selected_crop]['P'].mean(),2)\n    return 'Mean: '+str(mean)\n\n#Phosphorus range\n@app.callback(Output('P (Phosphorus) range', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_P_range(selected_crop):\n    minimum = round(df[df['label'] == selected_crop]['P'].min(),2)\n    maximum = round(df[df['label'] == selected_crop]['P'].max(),2)\n    return 'Range: '+str(minimum)+' - '+str(maximum)\n\n\n#Potassium mean\n@app.callback(Output('K (Potassium) mean', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_K_mean(selected_crop):\n    mean = round(df[df['label'] == selected_crop]['K'].mean(),2)\n    return 'Mean: '+str(mean)\n\n#Potassium range\n@app.callback(Output('K (Potassium) range', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_K_range(selected_crop):\n    minimum = round(df[df['label'] == selected_crop]['K'].min(),2)\n    maximum = round(df[df['label'] == selected_crop]['K'].max(),2)\n    return 'Range: '+str(minimum)+' - '+str(maximum)\n\n\n#Temperature mean\n@app.callback(Output('Temperature mean', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_temperature_mean(selected_crop):\n    mean = round(df[df['label'] == selected_crop]['temperature'].mean(),2)\n    return 'Mean: '+str(mean)\n\n#Temperature range\n@app.callback(Output('Temperature range', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_temperature_range(selected_crop):\n    minimum = round(df[df['label'] == selected_crop]['temperature'].min(),2)\n    maximum = round(df[df['label'] == selected_crop]['temperature'].max(),2)\n    return 'Range: '+str(minimum)+' - '+str(maximum)\n\n\n#Humidity mean\n@app.callback(Output('Humidity mean', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_humidity_mean(selected_crop):\n    mean = round(df[df['label'] == selected_crop]['humidity'].mean(),2)\n    return 'Mean: '+str(mean)\n\n\n#Humidity range\n@app.callback(Output('Humidity range', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_humidity_range(selected_crop):\n    minimum = round(df[df['label'] == selected_crop]['humidity'].min(),2)\n    maximum = round(df[df['label'] == selected_crop]['humidity'].max(),2)\n    return 'Range: '+str(minimum)+' - '+str(maximum)\n\n#pH mean\n@app.callback(Output('pH mean', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_ph_mean(selected_crop):\n    mean = round(df[df['label'] == selected_crop]['ph'].mean(),2)\n    return 'Mean: '+str(mean)\n\n#pH mean\n@app.callback(Output('pH range', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_ph_range(selected_crop):\n    minimum = round(df[df['label'] == selected_crop]['ph'].min(),2)\n    maximum = round(df[df['label'] == selected_crop]['ph'].max(),2)\n    return 'Range: '+str(minimum)+' - '+str(maximum)\n\n\n#Rainfall mean\n@app.callback(Output('Rainfall mean', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_rainfall_mean(selected_crop):\n    mean = round(df[df['label'] == selected_crop]['rainfall'].mean(),2)\n    return 'Mean: '+str(mean)\n\n\n#Rainfall range\n@app.callback(Output('Rainfall range', 'children'),\n              [Input('crop-picker', 'value')]\n    )\n\ndef update_rainfall_range(selected_crop):\n    minimum = round(df[df['label'] == selected_crop]['rainfall'].min(),2)\n    maximum = round(df[df['label'] == selected_crop]['rainfall'].max(),2)\n    return 'Range: '+str(minimum)+' - '+str(maximum)\n\n#Violin plot\n@app.callback(Output('violin_plot', 'figure'),\n              [Input('feature-picker','value')]\n              )\n\ndef update_violin_plot(selected_feature):\n    \n    violin_plot = go.Violin(\n                    x = df['label'],\n                    y = df[selected_feature],\n                    name='violin plot')\n\n    data1 = [violin_plot]\n    \n    layout1 = go.Layout(title=selected_feature,\n                      xaxis = dict(title='Crop'),\n                      yaxis = dict(title=selected_feature))\n    \n    return {'data':data1,'layout':layout1}    \n\n\nif __name__ == '__main__':\n    app.run_server()","955da76a":"# Code to dashboard application\n\nLink to dashboard app: http:\/\/pythoncodesnippets.com\/crop-recommendation-dataset\n\nNote: \n1. You will need to copy the below code as Kaggle doesn't seem to support Dash applications.\n2. Change the file path as per your requirement in line 13 if file not in same folder as script.\n\n## To view in YouTube\n\nhttps:\/\/www.youtube.com\/watch?v=6xtZP552OBs\n","57e812fd":"# Correlation between different figures\n\nApart from between P and K, there is low correlation between the features.","30f6316a":"We have 2200 rows and 8 columns in the dataset with no missing values.\n\nAll values in the data are numberical except for the label data.","d471be85":"# Violin plots of all features!","24603394":"# Building the model","716ee4e2":"# First look at the dataset","d9e18b93":"# A very balanced dataset"}}