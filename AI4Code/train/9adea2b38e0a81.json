{"cell_type":{"137e3eed":"code","7e865eb8":"code","787b87c6":"code","f7055041":"code","d39ea9d7":"code","b8263895":"code","7f854628":"code","f99aeb90":"code","a49dcc9d":"code","3e0a4412":"code","25cac70e":"code","440491fd":"code","bb9201bf":"code","8861bb3d":"code","ecf489fb":"code","9ca8d310":"code","041b39d0":"code","18d03c11":"code","1fb71cbe":"code","408c43ef":"code","86ca22de":"code","9864fd1e":"code","64b700e5":"markdown","9b52d048":"markdown","1fc476fe":"markdown","5b589677":"markdown","7c4b181b":"markdown","d5a3ef75":"markdown","d70adfff":"markdown","29ae0fc2":"markdown"},"source":{"137e3eed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e865eb8":"os.chdir(\"..\/input\")\nos.listdir()","787b87c6":"import pandas as pd\nimport numpy as np\n\ndf=pd.read_csv(\"..\/input\/heart-disease-dataset\/proc_heart_cleve_3_withheader.csv\")","f7055041":"import matplotlib.pyplot as plt\nfrom sklearn.metrics import f1_score\n","d39ea9d7":"df.info()","b8263895":"df.head()","7f854628":"df.isnull().sum()","f99aeb90":"# Data Pre-Processing\ndf[\"Disease\"] = df[\"Disease\"].replace(-1,0)","a49dcc9d":"# The process of looking at the importance of other parameters for 'Disease'\nnew_corr = df.corr()\nnew_corr['Disease'].sort_values(ascending=False)","3e0a4412":"features = [['Serum_cholest', 'Max_heart_rate', 'Age', 'resting_BP', 'ST_dep_by_exerc']]\n\n# Scaling\nfor feature in features:\n    df[feature]=(df[feature]-np.min(df[feature]))\/(np.max(df[feature])-np.min(df[feature]))","25cac70e":"x_data=df.drop(['Disease'],axis=1)\ny=df['Disease'].values","440491fd":"x_data.info()","bb9201bf":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x_data,y,test_size=0.35,random_state=1)","8861bb3d":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\n\nknn=KNeighborsClassifier(n_neighbors=20)\nknn.fit(x_train,y_train)\n\n","ecf489fb":"knn_pred=knn.predict(x_test)\n\nf1_knn=f1_score(y_test,knn_pred)\n\n\nprecision_knn = precision_score(y_test, knn_pred)\n\nrecall_knn = recall_score(y_test, knn_pred)\n\n\n\n\n\nprint(\"knn f1 score: \",f1_knn)\nprint(\"KNN Precision: \",precision_knn)\nprint(\"KNN Recall: \", recall_knn)\nprint(\"KNN accuracy: \",knn.score(x_test,y_test))","9ca8d310":"#%% find best k value\nscore_list=[]\n\nfor each in range(1,70):\n    knn2=KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\nplt.plot(range(1,70),score_list)\nplt.xlabel(\"k\")\nplt.ylabel(\"accuracy\")\nplt.show()\n","041b39d0":"from sklearn.svm import SVC\nsvm=SVC(random_state=1,gamma=\"auto\")\nsvm.fit(x_train,y_train)","18d03c11":"\nsvm_pred=svm.predict(x_test)\n\n\nf1_svm=f1_score(y_test,svm_pred)\n\n\nprecision_svm = precision_score(y_test, svm_pred)\n\n\nrecall_svm = recall_score(y_test, svm_pred)\n\n\nprint(\"svm f1 score: \",f1_svm)\nprint(\"SVM Precision: \",precision_svm)\nprint(\"SVM Recall: \", recall_svm)\nprint(\"SVM accuracy: \",svm.score(x_test,y_test))","1fb71cbe":"\nfrom sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n","408c43ef":"dt_pred=dt.predict(x_test)\n\n\nf1_dt=f1_score(y_test,dt_pred)\n\nprecision_dt = precision_score(y_test, dt_pred)\n\n\nrecall_dt = recall_score(y_test, dt_pred)\n\nprint(\"dt f1 score: \",f1_dt)\nprint(\"DT Precision: \",precision_dt)\nprint(\"DT Recall: \",recall_dt)\nprint(\"DT accuracy: \",dt.score(x_test,y_test))","86ca22de":"\nfrom sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier(n_estimators=150,random_state=1)\nrf.fit(x_train,y_train)\n\n\n\nrf_pred=rf.predict(x_test)\n\n","9864fd1e":"\nf1_rf=f1_score(y_test,rf_pred)\n\nprecision_rf = precision_score(y_test, rf_pred)\n\n\nrecall_rf = recall_score(y_test, rf_pred)\n\nprint(\"rf f1 score: \",f1_rf)\nprint(\"RF Precision: \",precision_rf)\nprint(\"RF Recall:\",recall_rf)\nprint(\"RF accuracy: \",rf.score(x_test,y_test))\n","64b700e5":"### Preparation of Model Data and Scaling of Data","9b52d048":"##  Support Vector Machine","1fc476fe":"# Modelling","5b589677":"## KNN","7c4b181b":"## Decision Tree Classification\n","d5a3ef75":"\n## Data Read","d70adfff":"## Random Forest Classification","29ae0fc2":"### hyper parameter"}}