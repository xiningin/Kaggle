{"cell_type":{"c43e2ab3":"code","e5f7e6c8":"code","1e0788da":"code","167c72b2":"code","8de27cbb":"code","8c96af74":"code","4d87eaa1":"code","15299e2e":"code","5c0ec139":"code","cf730400":"code","9ae5d409":"code","43bb0b25":"code","c7aa63c2":"code","b76053e9":"code","2b91aa21":"code","694d55b9":"code","426d8cf3":"code","e31f98b8":"code","89d264d9":"code","c694f9a1":"code","6c497ed1":"code","ec700037":"code","9634ba91":"code","f2dabadb":"code","45e52728":"code","cf96e4f7":"code","5ed92c31":"code","3566409a":"code","1ee17844":"code","dc37bb07":"code","ac7b0b82":"code","7705a69e":"code","27f5d96e":"code","86d08d0c":"code","e78e0d09":"code","ca40164f":"code","cee8ddb9":"code","dcabcf38":"code","4143a46d":"code","cb80fdd1":"code","07d6f0e9":"code","223b4bdd":"code","009346de":"code","8ca49118":"markdown","be1cd984":"markdown","b5642352":"markdown","e00cb66d":"markdown","ee47249a":"markdown","9adfe442":"markdown","131fe3d8":"markdown","937d7591":"markdown","a44e3771":"markdown","f24ab4f1":"markdown","80bd7c2f":"markdown","0fb45251":"markdown","fd3df6be":"markdown","d9667dcd":"markdown","46c1a088":"markdown","815108ba":"markdown","6a36d30d":"markdown","6e12cf41":"markdown","3381d0b6":"markdown","6042834a":"markdown","4a9683ab":"markdown","35764ce7":"markdown","3681033f":"markdown","b3573c3f":"markdown","98c4532a":"markdown","6e283b83":"markdown","f57f3d41":"markdown","9800df81":"markdown","0824bf07":"markdown","f5345183":"markdown","ae95328b":"markdown","32718783":"markdown","e42491a4":"markdown","13d76ad9":"markdown","a95ba823":"markdown","c337721f":"markdown","43f89828":"markdown","63a25c28":"markdown","c0ac13c6":"markdown","1aa89f7d":"markdown","b64df1cd":"markdown"},"source":{"c43e2ab3":"# Uncomment the command below if Numpy or PyTorch is not installed\n# !conda install numpy pytorch cpuonly -c pytorch -y","e5f7e6c8":"import numpy as np\nimport torch","1e0788da":"# Input (temp, rainfall, humidity)\ninputs = np.array([[73, 67, 43], \n                   [91, 88, 64], \n                   [87, 134, 58], \n                   [102, 43, 37], \n                   [69, 96, 70]], dtype='float32')","167c72b2":"# Targets (apples, oranges)\ntargets = np.array([[56, 70], \n                    [81, 101], \n                    [119, 133], \n                    [22, 37], \n                    [103, 119]], dtype='float32')","8de27cbb":"# Convert inputs and targets to tensors\ninputs = torch.from_numpy(inputs)\ntargets = torch.from_numpy(targets)\nprint(inputs)\nprint(targets)","8c96af74":"# Weights and biases\nw = torch.randn(2, 3, requires_grad=True)\nb = torch.randn(2, requires_grad=True)\nprint(w)\nprint(b)","4d87eaa1":"def model(x):\n    return x @ w.t() + b","15299e2e":"# Generate predictions\npreds = model(inputs)\nprint(preds)","5c0ec139":"# Compare with targets\nprint(targets)","cf730400":"# MSE loss\ndef mse(t1, t2):\n    diff = t1 - t2\n    return torch.sum(diff * diff) \/ diff.numel()","9ae5d409":"# Compute loss\nloss = mse(preds, targets)\nprint(loss)","43bb0b25":"# Compute gradients\nloss.backward()","c7aa63c2":"# Gradients for weights\nprint(w)\nprint(w.grad)","b76053e9":"w.grad.zero_()\nb.grad.zero_()\nprint(w.grad)\nprint(b.grad)","2b91aa21":"# Generate predictions\npreds = model(inputs)\nprint(preds)","694d55b9":"# Calculate the loss\nloss = mse(preds, targets)\nprint(loss)","426d8cf3":"# Compute gradients\nloss.backward()\nprint(w.grad)\nprint(b.grad)","e31f98b8":"# Adjust weights & reset gradients\nwith torch.no_grad():\n    w -= w.grad * 1e-5\n    b -= b.grad * 1e-5\n    w.grad.zero_()\n    b.grad.zero_()","89d264d9":"print(w)\nprint(b)","c694f9a1":"# Calculate loss\npreds = model(inputs)\nloss = mse(preds, targets)\nprint(loss)","6c497ed1":"# Train for 100 epochs\nfor i in range(100):\n    preds = model(inputs)\n    loss = mse(preds, targets)\n    loss.backward()\n    with torch.no_grad():\n        w -= w.grad * 1e-5\n        b -= b.grad * 1e-5\n        w.grad.zero_()\n        b.grad.zero_()","ec700037":"# Calculate loss\npreds = model(inputs)\nloss = mse(preds, targets)\nprint(loss)","9634ba91":"# Predictions\npreds","f2dabadb":"# Targets\ntargets","45e52728":"import torch.nn as nn","cf96e4f7":"# Input (temp, rainfall, humidity)\ninputs = np.array([[73, 67, 43], [91, 88, 64], [87, 134, 58], \n                   [102, 43, 37], [69, 96, 70], [73, 67, 43], \n                   [91, 88, 64], [87, 134, 58], [102, 43, 37], \n                   [69, 96, 70], [73, 67, 43], [91, 88, 64], \n                   [87, 134, 58], [102, 43, 37], [69, 96, 70]], \n                  dtype='float32')\n\n# Targets (apples, oranges)\ntargets = np.array([[56, 70], [81, 101], [119, 133], \n                    [22, 37], [103, 119], [56, 70], \n                    [81, 101], [119, 133], [22, 37], \n                    [103, 119], [56, 70], [81, 101], \n                    [119, 133], [22, 37], [103, 119]], \n                   dtype='float32')\n\ninputs = torch.from_numpy(inputs)\ntargets = torch.from_numpy(targets)","5ed92c31":"inputs","3566409a":"from torch.utils.data import TensorDataset","1ee17844":"# Define dataset\ntrain_ds = TensorDataset(inputs, targets)\ntrain_ds[0:3]","dc37bb07":"from torch.utils.data import DataLoader","ac7b0b82":"# Define data loader\nbatch_size = 5\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True)","7705a69e":"for xb, yb in train_dl:\n    print(xb)\n    print(yb)\n    break","27f5d96e":"# Define model\nmodel = nn.Linear(3, 2)\nprint(model.weight)\nprint(model.bias)","86d08d0c":"# Parameters\nlist(model.parameters())","e78e0d09":"# Generate predictions\npreds = model(inputs)\npreds","ca40164f":"# Import nn.functional\nimport torch.nn.functional as F","cee8ddb9":"# Define loss function\nloss_fn = F.mse_loss","dcabcf38":"loss = loss_fn(model(inputs), targets)\nprint(loss)","4143a46d":"# Define optimizer\nopt = torch.optim.SGD(model.parameters(), lr=1e-5)","cb80fdd1":"# Utility function to train the model\ndef fit(num_epochs, model, loss_fn, opt, train_dl):\n    \n    # Repeat for given number of epochs\n    for epoch in range(num_epochs):\n        \n        # Train with batches of data\n        for xb,yb in train_dl:\n            \n            # 1. Generate predictions\n            pred = model(xb)\n            \n            # 2. Calculate loss\n            loss = loss_fn(pred, yb)\n            \n            # 3. Compute gradients\n            loss.backward()\n            \n            # 4. Update parameters using gradients\n            opt.step()\n            \n            # 5. Reset the gradients to zero\n            opt.zero_grad()\n        \n        # Print the progress\n        if (epoch+1) % 10 == 0:\n            print('Epoch [{}\/{}], Loss: {:.4f}'.format(epoch+1, num_epochs, loss.item()))","07d6f0e9":"fit(100, model, loss_fn, opt, train_dl)","223b4bdd":"# Generate predictions\npreds = model(inputs)\npreds","009346de":"# Compare with targets\ntargets","8ca49118":"The gradients are stored in the .grad property of the respective tensors. Note that the derivative of the loss w.r.t. the weights matrix is itself a matrix, with the same dimensions.","be1cd984":"# Optimizer\n\nInstead of manually manipulating the model's weights & biases using gradients, we can use the optimizer optim.SGD. SGD stands for stochastic gradient descent. It is called stochastic because samples are selected in batches (often with random shuffling) instead of as a single group.","b5642352":"We have already achieved a significant reduction in the loss, simply by adjusting the weights and biases slightly using gradient descent.\n\n\n# Train for multiple epochs\n\nTo reduce the loss further, we can repeat the process of adjusting the weights and biases using the gradients multiple times. Each iteration is called an epoch. Let's train the model for 100 epochs.","e00cb66d":"You can see that there's a huge difference between the predictions of our model, and the actual values of the target variables. Obviously, this is because we've initialized our model with random weights and biases, and we can't expect it to just work.\n\n\n# Loss function\nBefore we improve our model, we need a way to evaluate how well our model is performing. We can compare the model's predictions with the actual targets, using the following method:\n\n* Calculate the difference between the two matrices (preds and targets).\n* Square all elements of the difference matrix to remove negative values.\n* Calculate the average of the elements in the resulting matrix.\n\nThe result is a single number, known as the mean squared error (MSE).","ee47249a":"The TensorDataset allows us to access a small section of the training data using the array indexing notation ([0:3] in the above code). It returns a tuple (or pair), in which the first element contains the input variables for the selected rows, and the second contains the targets.\n\nWe'll also create a DataLoader, which can split the data into batches of a predefined size while training. It also provides other utilities like shuffling and random sampling of the data.","9adfe442":"Let's compute the loss for the current predictions of our model.","131fe3d8":"# Compute gradients\n\nWith PyTorch, we can automatically compute the gradient or derivative of the loss w.r.t. to the weights and biases, because they have requires_grad set to True","937d7591":"The prediction are now quite close to the target variables, and we can get even better results by training for a few more epochs.","a44e3771":"We are using 15 training examples this time, to illustrate how to work with large datasets in small batches.\n\n# Dataset and DataLoader\n\nWe'll create a TensorDataset, which allows access to rows from inputs and targets as tuples, and provides standard APIs for working with many different types of datasets in PyTorch.","f24ab4f1":"torch.sum returns the sum of all the elements in a tensor, and the .numel method returns the number of elements in a tensor. Let's compute the mean squared error for the current predictions of our model.","80bd7c2f":"The loss is a quadratic function of our weights and biases, and our objective is to find the set of weights where the loss is the lowest. If we plot a graph of the loss w.r.t any individual weight or bias element, it will look like the figure shown below. A key insight from calculus is that the gradient indicates the rate of change of the loss, or the slope of the loss function w.r.t. the weights and biases.\n\nIf a gradient element is **positive**:\n\n**increasing** the element's value slightly will **increase** the loss.\n**decreasing** the element's value slightly will **decrease** the loss.\n![hFYoVgU.png](attachment:hFYoVgU.png)\n\nIf a gradient element is **negative**:\n\n**increasing** the element's value slightly will **decrease** the loss.\n**decreasing** the element's value slightly will **increase** the loss.\n![w3Wii7C.png](attachment:w3Wii7C.png)\n\nThe increase or decrease in loss by changing a weight element is proportional to the value of the gradient of the loss w.r.t. that element. This forms the basis for the optimization algorithm that we'll use to improve our model.\n\nBefore we proceed, we reset the gradients to zero by calling .zero_() method. We need to do this, because PyTorch accumulates, gradients i.e. the next time we call .backward on the loss, the new gradient values will get added to the existing gradient values, which may lead to unexpected results.\n\n","0fb45251":"We've separated the input and target variables, because we'll operate on them separately. Also, we've created numpy arrays, because this is typically how you would work with training data: read some CSV files as numpy arrays, do some processing, and then convert them to PyTorch tensors as follows:","fd3df6be":"The data loader is typically used in a for-in loop. Let's look at an example.","d9667dcd":"# Adjust weights and biases using gradient descent\n\nWe'll reduce the loss and improve our model using the gradient descent optimization algorithm, which has the following steps:\n\n1. Generate predictions\n2. Calculate the loss\n3. Compute gradients w.r.t the weights and biases\n4. Adjust the weights by subtracting a small quantity proportional to the gradient\n5. Reset the gradients to zero\n\nLet's implement the above step by step.","46c1a088":"Let's generate predictions using our model and verify that they're close to our targets.","815108ba":"Note that the predictions are same as before, since we haven't made any changes to our model. The same holds true for the loss and gradients.","6a36d30d":"Indeed, the predictions are quite close to our targets, and now we have a fairly good model to predict crop yields for apples and oranges by looking at the average temperature, rainfall and humidity in a region.","6e12cf41":"Finally, we update the weights and biases using the gradients computed above.","3381d0b6":"The nn.functional package contains many useful loss functions and several other utilities.","6042834a":"# Linear regression using PyTorch built-ins\n\nThe model and training process above were implemented using basic matrix operations. But since this such a common pattern , PyTorch has several built-in functions and classes to make it easy to create and train models.\n\nLet's begin by importing the torch.nn package from PyTorch, which contains utility classes for building neural networks.","4a9683ab":"# Training data\n\nThe training data can be represented using 2 matrices: inputs and targets, each with one row per observation, and one column per variable.","35764ce7":"As you can see, the loss is now much lower than what we started out with. Let's look at the model's predictions and compare them with the targets.","3681033f":"In each iteration, the data loader returns one batch of data, with the given batch size. If shuffle is set to True, it shuffles the training data before creating batches. Shuffling helps randomize the input to the optimization algorithm, which can lead to faster reduction in the loss.\n","b3573c3f":"Linear regression model from scratch\nThe weights and biases (w11, w12,... w23, b1 & b2) can also be represented as matrices, initialized as random values. The first row of w and the first element of b are used to predict the first target variable i.e. yield of apples, and similarly the second for oranges.","98c4532a":"With the new weights and biases, the model should have lower loss.","6e283b83":"As before, we represent the inputs and targets and matrices.","f57f3d41":"We can use the model to generate predictions in the exact same way as before:","9800df81":"torch.randn creates a tensor with the given shape, with elements picked randomly from a normal distribution with mean 0 and standard deviation 1.\n\nOur model is simply a function that performs a matrix multiplication of the inputs and the weights w (transposed) and adds the bias b (replicated for each observation).\n\n![WGXLFvA.png](attachment:WGXLFvA.png)\n\nWe can define the model as follows:","0824bf07":"Once again, let's verify that the loss is now lower:","f5345183":"Here\u2019s how we can interpret the result: On average, each element in the prediction differs from the actual target by about 145 (square root of the loss 20834). And that\u2019s pretty bad, considering the numbers we are trying to predict are themselves in the range 50\u2013200. Also, the result is called the loss, because it indicates how bad the model is at predicting the target variables. Lower the loss, better the model","ae95328b":"# nn.Linear\nInstead of initializing the weights & biases manually, we can define the model using the nn.Linear class from PyTorch, which does it automatically.","32718783":"A few things to note above:\n\n* We use torch.no_grad to indicate to PyTorch that we shouldn't track, calculate or modify gradients while updating the weights and biases.\n\n* We multiply the gradients with a really small number (10^-5 in this case), to ensure that we don't modify the weights by a really large amount, since we only want to take a small step in the downhill direction of the gradient. This number is called the learning rate of the algorithm.\n \n* After we have updated the weights, we reset the gradients back to zero, to avoid affecting any future computations.\n \nLet's take a look at the new weights and biases.","e42491a4":"Let's compare the predictions of our model with the actual targets.","13d76ad9":"Note that model.parameters() is passed as an argument to optim.SGD, so that the optimizer knows which matrices should be modified during the update step. Also, we can specify a learning rate which controls the amount by which the parameters are modified.","a95ba823":"Some things to note above:\n\n* We use the data loader defined earlier to get batches of data for every iteration.\n\n* Instead of updating parameters (weights and biases) manually, we use opt.step to perform the update, and opt.zero_grad to reset the gradients to zero.\n \n* We've also added a log statement which prints the loss from the last batch of data for every 10th epoch, to track the progress of training. loss.item returns the actual value stored in the loss tensor.\n\nLet's train the model for 100 epochs.","c337721f":"@ represents matrix multiplication in PyTorch, and the .t method returns the transpose of a tensor.\n\nThe matrix obtained by passing the input data into the model is a set of predictions for the target variables","43f89828":"We begin by importing Numpy and PyTorch:","63a25c28":"PyTorch models also have a helpful .parameters method, which returns a list containing all the weights and bias matrices present in the model. For our linear regression model, we have one weight matrix and one bias matrix.","c0ac13c6":"# Loss Function\n\nInstead of defining a loss function manually, we can use the built-in loss function mse_loss.","1aa89f7d":"# Train the model\n\nWe are now ready to train the model. We'll follow the exact same process to implement gradient descent:\n\n1. Generate predictions\n2. Calculate the loss\n3. Compute gradients w.r.t the weights and biases\n4. Adjust the weights by subtracting a small quantity proportional to the gradient\n5. Reset the gradients to zero\n\nThe only change is that we'll work batches of data, instead of processing the entire training data in every iteration. Let's define a utility function fit which trains the model for a given number of epochs.","b64df1cd":"Continuing where the [previous tutorial](http:\/\/https:\/\/www.kaggle.com\/gauravahujaravenclaw\/pytorch-basics) left off, we'll discuss one of the foundational algorithms of machine learning in this post: Linear regression. We'll create a model that predicts crop yields for apples and oranges (target variables) by looking at the average temperature, rainfall and humidity (input variables or features) in a region. Here's the training data:\n\n![6Ujttb4.png](attachment:6Ujttb4.png)\n\nIn a linear regression model, each target variable is estimated to be a weighted sum of the input variables, offset by some constant, known as a bias :\n\n          yield_apple  = w11 * temp + w12 * rainfall + w13 * humidity + b1\n          yield_orange = w21 * temp + w22 * rainfall + w23 * humidity + b2\n\nVisually, it means that the yield of apples is a linear or planar function of temperature, rainfall and humidity:\n\n![4DJ9f8X.png](attachment:4DJ9f8X.png)\n\nThe learning part of linear regression is to figure out a set of weights w11, w12,... w23, b1 & b2 by looking at the training data, to make accurate predictions for new data (i.e. to predict the yields for apples and oranges in a new region using the average temperature, rainfall and humidity). This is done by adjusting the weights slightly many times to make better predictions, using an optimization technique called gradient descent."}}