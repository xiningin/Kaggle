{"cell_type":{"740d302b":"code","3f93dfcb":"code","49777f17":"code","76ce4901":"code","a615dfed":"code","c3962cca":"code","5fbc195f":"code","5d3b161b":"code","491abd00":"code","d03dc432":"code","7d706320":"code","52ea3445":"code","3f464b43":"code","59f547ec":"code","86b3df66":"code","12f57789":"code","5c70f8a8":"code","9220b92e":"code","ec68d033":"code","a328fa79":"code","cacea967":"code","89fc9c33":"code","a97edb5a":"code","52f84a70":"code","66d0602b":"code","0cfce7ef":"markdown","b7f5d279":"markdown","72e2b793":"markdown","f4116bef":"markdown","f8e28cb6":"markdown","231d3c73":"markdown","0be05df1":"markdown","8a01d21d":"markdown","9c98b269":"markdown","6790a665":"markdown","e1dc9d1f":"markdown","e6745097":"markdown","75b3a216":"markdown","81e6404b":"markdown","dfd41a5e":"markdown"},"source":{"740d302b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f93dfcb":"import nltk\nimport pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport string","49777f17":"data = pd.read_csv(\"\/kaggle\/input\/SMSSpamCollection.tsv\", sep='\\t')\ndata.columns = ['label', 'body_text'] # Giving the column columns","76ce4901":"data.head()","a615dfed":"data.isnull().sum()","c3962cca":"data.label.value_counts()","5fbc195f":"data['text_cleaned']=data['body_text'].apply(lambda x: ''.join(word for word in x if word not in string.punctuation))","5d3b161b":"data.head() # In in index 2,4,5 we can see the changes occured","491abd00":"stopwords = nltk.corpus.stopwords.words('english')","d03dc432":"data['text_cleaned']=data['text_cleaned'].apply(lambda x: ' '.join(word for word in re.split('\\W+', x) if word.lower() not in stopwords))\ndata.head()","7d706320":"wn = nltk.WordNetLemmatizer()","52ea3445":"data['text_cleaned']=data['text_cleaned'].apply(lambda x: ' '.join(wn.lemmatize(word) for word in re.split('\\W+', x)))","3f464b43":"data.head()","59f547ec":"from sklearn.feature_extraction.text import CountVectorizer\n\ncount_vect = CountVectorizer()\nX_counts = count_vect.fit_transform(data['text_cleaned'])\nprint(X_counts.shape)","86b3df66":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_vect = TfidfVectorizer()\nX_tfidf = tfidf_vect.fit_transform(data['text_cleaned'])\nprint(X_tfidf.shape)","12f57789":"def count_punct(text):\n    count = sum([1 for char in text if char in string.punctuation])\n    return round(count\/(len(text) - text.count(\" \")), 3)*100","5c70f8a8":"data['body_len'] = data['body_text'].apply(lambda x: len(x) - x.count(\" \"))\ndata['punct%'] = data['body_text'].apply(lambda x: count_punct(x))","9220b92e":"data.head()","ec68d033":"X_features = pd.concat([data['body_len'], data['punct%'], pd.DataFrame(X_tfidf.toarray())], axis=1)\nX_features.head()","a328fa79":"from sklearn.metrics import precision_recall_fscore_support as score\nfrom sklearn.model_selection import train_test_split","cacea967":"X_train, X_test, y_train, y_test = train_test_split(X_features, data['label'], test_size=0.2)","89fc9c33":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators=50, max_depth=20, n_jobs=-1)\nrf_model = rf.fit(X_train, y_train)","a97edb5a":"sorted(zip(rf_model.feature_importances_, X_train.columns), reverse=True)[0:10]","52f84a70":"y_pred = rf_model.predict(X_test)\nprecision, recall, fscore, support = score(y_test, y_pred, pos_label='spam', average='binary')","66d0602b":"print('Precision: {} \/ Recall: {} \/ Accuracy: {}'.format(round(precision, 3),\n                                                        round(recall, 3),\n                                                        round((y_pred==y_test).sum() \/ len(y_pred),3)))","0cfce7ef":"Test Train Split","b7f5d279":"### Clean up text","72e2b793":"#### Punctuation Removal","f4116bef":"#### CountVectorizer","f8e28cb6":"### Importing Libraries","231d3c73":"### Vectorizing the text","0be05df1":"#### Modelling","8a01d21d":"#### Lemmatization","9c98b269":"In index three WILL is name but, it is removed as stopwords","6790a665":"Feature Importance","e1dc9d1f":"### Importing Datasets","e6745097":"#### Feature Engineering","75b3a216":"### Understading the data","81e6404b":"#### TfidfVectorizer","dfd41a5e":"#### Removing Stopwords"}}