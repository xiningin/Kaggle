{"cell_type":{"4bf7fb5d":"code","e6d3b686":"code","13f237b2":"code","900a9614":"code","49983d12":"code","5ea1ee36":"code","11047219":"code","7cfb7467":"code","6a718e36":"code","f2394669":"code","87202642":"code","e220096a":"code","a4b6409f":"code","0a9286a1":"code","c0df14e7":"code","3a51fe66":"code","9ca293d6":"code","357573af":"code","24631f53":"code","93d4bf6b":"code","7157ca02":"code","391f81c2":"code","26f0a59a":"code","ea4c60df":"code","6c710d1e":"code","4ce7dc54":"code","5106215f":"code","3b816616":"code","aeceb9d4":"code","e7bc6541":"code","4c7f24da":"code","cde23e4a":"code","30706943":"code","b898d583":"code","e9ddaa6c":"code","214350ef":"code","eff45c00":"code","ca26a0b6":"code","0981032e":"code","c7d2c3fe":"code","7021b078":"code","f473024f":"code","e4a4e1ad":"code","e2b90117":"code","f608a1b6":"code","9477b744":"code","3253d4c3":"code","e789b140":"code","926fc3ee":"code","3a6cb5c3":"code","26183c5b":"code","6008a7bb":"markdown","abe0e33b":"markdown","f3e33388":"markdown","371c88d7":"markdown","8383179d":"markdown","6525f9a0":"markdown","f3e1df76":"markdown","e2c8ca2e":"markdown","5fcffa4b":"markdown","67b7ebec":"markdown","ccd04d67":"markdown","9f998617":"markdown","f6475d0a":"markdown","38c733ed":"markdown","cab2eaea":"markdown","097532b8":"markdown","cb366f06":"markdown","2a89621f":"markdown","a5deb6af":"markdown","f8e8e863":"markdown","2318be2f":"markdown","6f25c07c":"markdown","71350978":"markdown"},"source":{"4bf7fb5d":"import re\nimport sys\n\nimport time\nimport datetime as dt\nfrom datetime import datetime\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import metrics, preprocessing\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.metrics import confusion_matrix, cohen_kappa_score, classification_report, accuracy_score, f1_score","e6d3b686":"df = pd.read_csv('..\/input\/KaggleV2-May-2016.csv')\ndf.head()","13f237b2":"# check if any missing values\ndf.isnull().any()","900a9614":"sns.heatmap(df.isnull(), cmap='viridis')","49983d12":"# check for doublications\ndf.duplicated().any()","5ea1ee36":"df['Age'].unique()","11047219":"# clean Age\ndf = df[(df['Age'] > 0) & (df['Age'] < 95)]","7cfb7467":"# clean AppointmentDay\ndf['AppointmentDay'] = df['AppointmentDay'].apply(lambda x : x.replace('T00:00:00Z', ''))\ndf['AppointmentDay'] = pd.to_datetime(df['ScheduledDay'])","6a718e36":"# extract days & months from the appointments\ndf['AppointmentDays'] = df['AppointmentDay'].apply(lambda x : dt.datetime.strftime(x, '%A'))\ndf['AppointmentMonths'] = df['AppointmentDay'].apply(lambda x : dt.datetime.strftime(x, '%B'))","f2394669":"# summary statistics\ndf.describe()","87202642":"# who visits the doctor more often?\nvisits = df[df['No-show'] == 'No']\nsns.countplot(x='Gender', data=visits)","e220096a":"# what is the proportion of male & female?\ndf['Gender'].value_counts(normalize = True)","a4b6409f":"# visualise male vs female distribution\nfig, pie = plt.subplots()\ndf['Gender'].value_counts(normalize = True).plot(kind='pie', autopct='%1.1f%%')\npie.axis('equal')","0a9286a1":"# what is the proportion of no-shows\ndf['No-show'].value_counts(normalize = True)","c0df14e7":"# no. of patients who miss their appointments\nlen(df[df['No-show'] == 'Yes'].index)","3a51fe66":"# overall no-show percentage\n# from __future__ import division\nlen(df[df['No-show'] == 'Yes'].index) \/ len(df.index)","9ca293d6":"# visualise prcentage of no-shows\nsns.countplot(x='No-show', data=df)","357573af":"# male vs female age and its effect on showing?\nsns.violinplot(df['No-show'], df['Age'], hue=df['Gender'])","24631f53":"# what is the patient age distribution for no-shows versus shows?\ndf.groupby('No-show')['Age'].mean()","93d4bf6b":"# age distribution for show & no show\n# use FacetGrid to plot multiple kdeplots on one plot\nfig = sns.FacetGrid(df, hue='No-show', aspect=4)\n# call FacetGrid.map() to use sns.kdeplot() to show age distribution\nfig.map(sns.kdeplot, 'Age', shade=True)\nfig.add_legend()","7157ca02":"# what is the proportion of missing the appointment whether the patient is male or female?\nx = sns.countplot(x='No-show', hue='Gender', data=df)\n# to plot the values over the labels\ntotal = float(len(df))\nfor p in x.patches:\n    height = p.get_height()\n    x.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha='center')","391f81c2":"# what is the relationship between no-show and diabetes?\nsns.countplot(x='No-show', hue='Diabetes', data=df)","26f0a59a":"# what is the relationship between no-show and each of scholarship, handicap, hipertension and alcoholism respectively?\nfig, ax =plt.subplots(2,2, figsize=(15,10))\nsns.countplot(x='No-show', hue='Scholarship', data=df, ax=ax[0][0]).set_title('No-show vs Scholarship')\nsns.countplot(x='No-show', hue='Handcap', data=df, ax=ax[0][1]).set_title('No-show vs Handicap')\nsns.countplot(x='No-show', hue='Hipertension', data=df, ax=ax[1][0]).set_title('No-show vs Hipertension')\nsns.countplot(x='No-show', hue='Alcoholism', data=df, ax=ax[1][1]).set_title('No-show vs Alcoholism')","ea4c60df":"# what is the relationship between neighbourhoods and the number of shows?\nplt.figure(figsize=(35,4))\nsns.countplot(x='Neighbourhood', hue='No-show', data=df)\nplt.xticks(rotation=45)","6c710d1e":"# which neighbourhoods have the highest number of shows?\nshows = df[df['No-show'] == 'No']\nshows.groupby('Neighbourhood')['No-show'].count().sort_values(ascending=False).head(20)","4ce7dc54":"# visualise neighbourhoods vs shows\nplt.figure(figsize=(35,4))\nsns.countplot(x='Neighbourhood', data=shows)\nplt.xticks(rotation=45)","5106215f":"# in which month most patients miss their appointments\nsns.countplot(x='AppointmentMonths', hue='No-show', data=df, order = df['AppointmentMonths'].value_counts().index)\nplt.xticks(rotation=20)","3b816616":"# in which day the patients visit their doctors most frequently?\nsns.countplot(x='AppointmentDays', data=visits)\nplt.xticks(rotation=15)","aeceb9d4":"# is there specific weekday when most patients miss their appointments?\nmiss = df[df['No-show'] == 'Yes']\nmiss.groupby('AppointmentDays')['No-show'].count().sort_values(ascending=False)","e7bc6541":"# what is the weekly no-show count\nsns.countplot(x='AppointmentDays', hue='No-show', data=df)","4c7f24da":"# do men and women visit the doctor on the same days?\nsns.countplot(x='AppointmentDays', hue='Gender', data=visits)","cde23e4a":"# how likely patients comes to their scheduled appointment if they have received a sms\nsns.catplot('SMS_received', hue='No-show', data=df, kind='count')","30706943":"# what is the proportion of patients who has received familia scholarship?\nsns.catplot('Scholarship', hue='Gender', data=df, kind='count')","b898d583":"# based on neighbourhood and scholarship, how showing-up is affected?\nnbrhd_schlrshp_nshw = pd.DataFrame(df[['Neighbourhood','Scholarship','No-show']].groupby( ['Neighbourhood', 'No-show','Scholarship']).size().reset_index(name = 'Count'))\nnbrhd_schlrshp_nshw.head(30)","e9ddaa6c":"# visualise showing up based on Neighbourhood vs Scholarship\nnbrhd_schlrshp_nshw['Neighbourhood'] = nbrhd_schlrshp_nshw['Neighbourhood'].apply(lambda x: x)\nsns.catplot(x = 'Count', y = 'Neighbourhood', hue = 'No-show', data = nbrhd_schlrshp_nshw, col = 'Scholarship', kind = 'swarm', height = 20, aspect = 0.25)","214350ef":"# which factors can help to predict the showing up of a patient?\n# first, let's look at how much each independent variable correlates with No-show (dependent variable)\nfrom IPython import display\ndf['No-show'] = pd.get_dummies(df['No-show'])\nindependent_variables = ['SMS_received', 'Scholarship', 'Hipertension', 'Alcoholism', 'Diabetes', 'Handcap']\nfor variable in independent_variables :\n    display.display(df.groupby(variable)['No-show'].mean())","eff45c00":"# converting categorical data to numerical data\ndf['Gender'] = pd.get_dummies(df['Gender'])\n\nle = preprocessing.LabelEncoder()\ndf['Age'] = le.fit_transform(df['Age'])\n\nle = preprocessing.LabelEncoder()\ndf['ScheduledDay'] = le.fit_transform(df['ScheduledDay'])\n\nle = preprocessing.LabelEncoder()\ndf['Neighbourhood'] = le.fit_transform(df['Neighbourhood'])\n\nle = preprocessing.LabelEncoder()\ndf['AppointmentDay'] = le.fit_transform(df['AppointmentDay'])","ca26a0b6":"# split data\nfeatures = ['ScheduledDay', 'AppointmentDay', 'PatientId', 'AppointmentID', 'Gender', 'Age', 'Neighbourhood', 'Scholarship', 'Hipertension', 'Diabetes', 'Alcoholism', 'Handcap', 'SMS_received']\nX = df[features]\ny = df['No-show']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)","0981032e":"lr = LogisticRegression(solver='lbfgs')\nlr.fit(X_train, y_train)\n\nlr_y_pred = lr.predict(X_test)\nlr_conf_mat = confusion_matrix(y_test, lr_y_pred)","c7d2c3fe":"sns.heatmap(lr_conf_mat, cmap='PuBu', annot=True, fmt='d')\nplt.ylabel('Actual class')\nplt.xlabel('Predicted class')\nplt.title('Confusion Matrix')","7021b078":"TN = lr_conf_mat[0][0]\nTP = lr_conf_mat[1][1]\naccuracy = 100*float(TP+TN)\/float(np.sum(lr_conf_mat))\n'Accuracy: ' + str(np.round(accuracy, 2)) + '%'","f473024f":"knn = KNeighborsClassifier(n_neighbors=5)  \nknn.fit(X_train, y_train)","e4a4e1ad":"knn_y_pred = knn.predict(X_test)\nknn_conf_mat = confusion_matrix(y_test, knn_y_pred)","e2b90117":"sns.heatmap(knn_conf_mat, cmap='YlGnBu', annot=True, fmt='d')\nplt.ylabel('Actual class')\nplt.xlabel('Predicted class')\nplt.title('Confusion Matrix')","f608a1b6":"# classification_report(y_test, knn_y_pred)\n'Accuracy: ' + str(metrics.accuracy_score(y_test, knn_y_pred))","9477b744":"error = []\n# calculating error for K values between 1 and 50\nfor i in range(1, 50):  \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    error.append(np.mean(pred_i != y_test))","3253d4c3":"plt.figure(figsize=(12, 6))  \nplt.plot(range(1, 50), error, color='red', linestyle='dashed', marker='o',  \n         markerfacecolor='blue', markersize=10)\nplt.title('Error Rate K Value')  \nplt.xlabel('K Value')  \nplt.ylabel('Mean Error')","e789b140":"rf = RandomForestClassifier(n_estimators=250, max_depth=100, min_samples_split=50, min_samples_leaf=100, n_jobs=-1)\nrf.fit(X_train, y_train)\n\nrf_y_pred = rf.predict(X_test)\nrn_conf_mat = confusion_matrix(y_test, rf_y_pred)","926fc3ee":"sns.heatmap(rn_conf_mat, cmap='RdPu', annot=True, fmt='d')\nplt.ylabel('Actual class')\nplt.xlabel('Predicted class')\nplt.title('Confusion Matrix')","3a6cb5c3":"'Accuracy: ' + str(accuracy_score(y_test, rf_y_pred))","26183c5b":"'F1: ' +  str(f1_score(y_test, rf_y_pred))","6008a7bb":"This shows 1% of patients have received Bolsa Familia Scholarship!","abe0e33b":"# Random Forest Model","f3e33388":"This notebook analyses data collected from 100k medical appointments in Brazil and focuses on the question of whether or not patients show up for their appointment","371c88d7":"That's great! The dataset has zero duplicates and zero null values.","8383179d":"# Machine Learning","6525f9a0":"It's strange that about 70% of the patients don't receive SMS they don't miss their appointments and has even higher proportion than the ones who have received SMS!","f3e1df76":"Above result shows that the rate of patients who vistit their doctors (about 80%) is more than that of those who miss their appointments.","e2c8ca2e":"In order to predict the no-show each analyzed column that has categorical data must be converted to a numerical form; as many machine learning algorithms cannot operate on label data directly. They require all input variables and output variables to be numeric. After transforming the columns that needed changing, the dataset will be split into two subsets:<br>\n\n**Training set  \u2014** a subset to train a model.<br>\n**Test set \u2014** a subset to test the trained model.<br>\n\nLogistic Regression, K-Nearest Neighbors and Random Forest will be implemented, in order to determine the effectiveness of the models in no-show prediction, f1-tests will be calculated..","5fcffa4b":"# Data Cleaning","67b7ebec":"## How to predict whether or not the patient will show up for an appointment?","ccd04d67":"So there is no any NaN anywhere in the data","9f998617":"1) Who visits the doctor more often?<br>\n2) What is the proportion of male & female?<br>\n3) Male vs female age and its effect on showing?<br>\n4) What is the patient age distribution for no-shows versus shows?<br>\n5) What is the proportion of missing the appointment whether the patient is male or female?<br>\n6) What is the relationship between no-show and diabetes?<br>\n7) What is the relationship between no-show and each of scholarship, handicap, hipertension and alcoholism respectively?<br>\n8) What is the relationship between neighbourhoods and the number of shows?<br>\n9) Which neighbourhoods have the highest number of shows?<br>\n10) In which day the patients visit their doctors most frequently?<br>\n11) Is there specific weekday when most patients miss their appointments?<br>\n12) Do men and women visit the doctor on the same days?<br>\n13) What is the proportion of patients who has received familia scholarship?<br>\n14) Based on neighbourhood and scholarship, how showing-up is affected?<br>\n15) Which factors can help to predict the showing up of a patient?<br>\n16) How to predict whether or not a patient will attend an appointment?<br>","f6475d0a":"I do admit that it is possible to live 100 years but I would like to keep the age as real as possible so any ages more than 95 will be removed..","38c733ed":"The characteristics that show the highest correlation with showing up for the appointments are SMS_received and 4th handicap","cab2eaea":"From the output we can see that the mean error is the smallest when the values of k is more than 20!","097532b8":"## Why do 30% of patients miss their scheduled appointments?","cb366f06":"# K-Nearest Neighbours","2a89621f":"Appointments are more likely to be missed on Tuesdays, and less likely on Saturdays..","a5deb6af":"## Questions to Be Investigated with This Dataset","f8e8e863":"# Exploratory Data Analysis","2318be2f":"# Logistic Regression Model","6f25c07c":"# Load Libraries","71350978":"So the percent of patients who miss their appointments is about 20%"}}