{"cell_type":{"3ebf8acf":"code","27947002":"code","44b9f87e":"code","9facb9a4":"code","3eebe047":"code","b790106e":"code","bf25e8f0":"code","0414ddf6":"code","7ae0561a":"code","e8d1c39b":"code","eb4190d5":"code","1f84fcdf":"code","ac87eccb":"code","f5ce1a75":"code","85725269":"code","a8221bd6":"code","ae09af85":"code","39e50615":"code","39d58df3":"code","bef5336e":"code","b45f2f9b":"code","1083d960":"code","21df804b":"code","9a689663":"code","c5c0c27b":"code","3a678831":"code","f71a85d5":"code","332a7b40":"code","c4181251":"markdown","53858fbf":"markdown","f601b8c7":"markdown","31266c01":"markdown","bb534cd6":"markdown","58c5468d":"markdown","1c9e36fe":"markdown"},"source":{"3ebf8acf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27947002":"import pandas as pd\nimport matplotlib.pyplot as plt","44b9f87e":"# Get the train data\ndf_train = pd.read_csv(\"\/kaggle\/input\/mobile-price-classification\/train.csv\")\ndf_train.head()","9facb9a4":"# Training data columns\ndf_train.columns","3eebe047":"# Count the values of different classes\ndf_train['price_range'].value_counts()","b790106e":"# Training data info\ndf_train.info()","bf25e8f0":"# Get test data\ndf_test = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/test.csv')\ndf_test.head()","0414ddf6":"# Split the training data\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(df_train.drop('price_range',axis=1), df_train['price_range'],test_size=0.2, random_state=5)","7ae0561a":"# Import packages\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix,classification_report","e8d1c39b":"# Create model and fit it\nLR = LogisticRegression()\nLR.fit(x_train,y_train)","eb4190d5":"# Predict\ny_pred = LR.predict(x_test)","1f84fcdf":"accuracy_score(y_test,y_pred)","ac87eccb":"confusion_matrix(y_test,y_pred)","f5ce1a75":"print(classification_report(y_test,y_pred))","85725269":"# Import packages\nfrom sklearn.neighbors import KNeighborsClassifier","a8221bd6":"# Create and fit the model\nneigh = KNeighborsClassifier(n_neighbors=4)\nneigh.fit(x_train, y_train)","ae09af85":"# Predict\ny_pred1 = neigh.predict(x_test)","39e50615":"accuracy_score(y_test,y_pred1)","39d58df3":"confusion_matrix(y_test,y_pred1)","bef5336e":"print(classification_report(y_test,y_pred1))","b45f2f9b":"# Import packages\nfrom sklearn.svm import SVC","1083d960":"# Create and fit the model\nsvc = SVC(C=1,kernel='linear',gamma = 0.001)\nsvc.fit(x_train, y_train)","21df804b":"# Predict\ny_pred2 = svc.predict(x_test)","9a689663":"accuracy_score(y_test,y_pred2)","c5c0c27b":"confusion_matrix(y_test,y_pred2)","3a678831":"print(classification_report(y_test,y_pred2))","f71a85d5":"# Predict\ntest_pred = svc.predict(df_test.drop('id',axis=1))","332a7b40":"test_pred","c4181251":"## Model building - KNN","53858fbf":"## Splitting data","f601b8c7":"## Model building - SVM","31266c01":"## Import packages","bb534cd6":"## Model building - Logistic regression","58c5468d":"## Data","1c9e36fe":"## Predictions\n\nSince the SVM model gave the best results, it will be used to predict the test dataset."}}