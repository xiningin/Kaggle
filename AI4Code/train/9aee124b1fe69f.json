{"cell_type":{"5bee4227":"code","6ce98de0":"code","799e2c64":"code","961f516f":"code","8a78a060":"code","5feefd48":"code","616814ae":"code","20263349":"code","bd269205":"code","140315d2":"code","277f0553":"code","a5153be1":"code","aabda242":"code","2cfb657d":"code","7480ce66":"code","8a5641d4":"code","137c1216":"code","0e7b9f23":"code","bd1e504e":"markdown","8c8dae43":"markdown","bc972041":"markdown","4eee28ad":"markdown","6dfc228c":"markdown","b1c57b23":"markdown","33e3b06e":"markdown","3f03499c":"markdown"},"source":{"5bee4227":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ce98de0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nplt.style.use('ggplot')\n\nimport cufflinks as cf\nimport plotly.express as px\nimport plotly.offline as py\nfrom plotly.offline import plot\nimport plotly.graph_objects as go\nimport plotly.graph_objs as go\n\ntry:\n    import apyori\nexcept:\n    !pip install apyori\n\nfrom apyori import apriori","799e2c64":"df = pd.read_csv(\"..\/input\/groceries-dataset\/Groceries_dataset.csv\")\ndf.head()","961f516f":"print(\"We have :\", df.shape[0], \"items in the Dataset\")\nprint(f\"And null values :\\n{df.isnull().sum()}\")","8a78a060":"print(f\"And nan values :\\n{df.isna().sum()} \")","5feefd48":"print(f'There are : {len(df[\"itemDescription\"].unique())} unique items')","616814ae":"df[\"Year\"] = df[\"Date\"].str.split(\"-\").str[-1]\ndf[\"Months_Year\"] = df[\"Date\"].str.split(\"-\").str[1] + \"-\" + df[\"Date\"].str.split(\"-\").str[-1] \ndf.head()","20263349":"df[\"Months_Year\"].unique()","bd269205":"#Graph : Months\/Year by count\nfig = px.bar(df[\"Months_Year\"].value_counts(ascending=False), orientation=\"v\", color=df[\"Months_Year\"].value_counts(ascending=False), color_continuous_scale=px.colors.sequential.Plasma, \n             log_x=False, labels={'value':'Count', \n                                'index':'Date',\n                                 'color':'None'\n                                })\n\nfig.update_layout(\n    font_color=\"black\",\n    title_font_color=\"red\",\n    legend_title_font_color=\"green\",\n    title_text=\"Date by count\"\n)\n\nfig.show()","140315d2":"#Graph : Item by count\nfig = px.bar(df[\"itemDescription\"].value_counts()[:20], orientation=\"v\", color=df[\"itemDescription\"].value_counts()[:20], color_continuous_scale=px.colors.sequential.Plasma, \n             log_x=False, labels={'value':'Count', \n                                'index':'Item',\n                                 'color':'None'\n                                })\n\nfig.update_layout(\n    font_color=\"black\",\n    title_font_color=\"red\",\n    legend_title_font_color=\"green\",\n    title_text=\"Item by count\"\n)\n\nfig.show()","277f0553":"products = df[\"itemDescription\"].unique()","a5153be1":"one_hot = pd.get_dummies(df['itemDescription'])\n\ndf.drop(['itemDescription'], inplace=True, axis=1)\ndf = df.join(one_hot)\n\ndf.head()","aabda242":"records = df.groupby([\"Member_number\",\"Date\"])[products[:]].sum()\nrecords = records.reset_index()[products]\n\nrecords","2cfb657d":"def get_product_names(x):\n    for product in products:\n        if x[product] != 0:\n            x[product] = product\n    return x\n\nrecords = records.apply(get_product_names, axis=1)\nrecords.head()\n\nprint(f\"Total transactions: {len(records)}\")","7480ce66":"# Removing zeros in DataFrame\nx = records.values\nx = [sub[~(sub == 0)].tolist() for sub in x if sub[sub != 0].tolist()]\ntransactions = x","8a5641d4":"association_rules = apriori(transactions,min_support=0.00030, min_confidance=0.01, min_lift=3, min_length=2, target=\"rules\")\nassociation_results = list(association_rules)","137c1216":"print(association_results[0])","0e7b9f23":"for item in association_results:\n\n    pair = item[0] \n    items = [x for x in pair]\n    \n    print(\"Rule : \", items[0], \" -> \" + items[1])\n    print(\"Support : \", str(item[1]))\n    print(\"Confidence : \",str(item[2][0][2]))\n    print(\"Lift : \", str(item[2][0][3]))\n    \n    print(\"=====================================\")","bd1e504e":"## Reading Data \ud83d\udcdd","8c8dae43":"## Feature Engineering \ud83c\udff7\ufe0f","bc972041":"To create an apriory model we have to change the 0 values into the name of the product :\n(I also saw that's better if we create transactions to group transactions in the same day)","4eee28ad":"## Data Exploration \ud83d\udcca","6dfc228c":"We buy more in october and conversely, in march we buy less. (in this case)","b1c57b23":"## Modelling \ud83d\udfe9","33e3b06e":"## Import librairies \ud83d\udcda","3f03499c":"In this dataset, we buy a lot of milk."}}