{"cell_type":{"ac16c003":"code","992010b0":"code","5f6bf115":"code","7fe9a6b1":"code","34674b32":"code","77f94b97":"code","290c8d97":"code","7f83a5e7":"code","294c974a":"code","5daa0007":"code","9cbddc20":"code","1544b7ef":"code","b068e2e7":"code","aeb6ab80":"code","5564f196":"code","1feaeb5d":"code","dba12683":"code","bfb465ec":"code","322c7d12":"code","54005cb3":"code","2ff63bdd":"code","276a5017":"code","653451e3":"code","7756e93e":"markdown","03abdc2b":"markdown","bdc5ce89":"markdown","7256c72a":"markdown","f27900eb":"markdown","f175f519":"markdown","c1c74ed7":"markdown","0cda70d8":"markdown","dc03c7b9":"markdown","b01a8b6e":"markdown"},"source":{"ac16c003":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n#         print(os.path.join(dirname, filename))\n        pass\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","992010b0":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings \nwarnings.simplefilter(action='ignore', category=FutureWarning)","5f6bf115":"train_df = pd.read_parquet('..\/input\/kaggle-pog-series-s01e01\/train.parquet')","7fe9a6b1":"train_df.head(4)","34674b32":"train_df.info()","77f94b97":"# train_df.describe()","290c8d97":"train_df['publishedDate'] = train_df['publishedAt'].dt.date\ntrain_df['publishedDate']","7f83a5e7":"train_df['publishedAt'] = train_df['publishedAt'].dt.time\ntrain_df['publishedAt']","294c974a":"train_df.drop(['video_id', 'id', 'channelId', 'thumbnail_link', 'dislikes', 'comment_count', 'target', 'description'], axis=1, inplace=True)\ntrain_df.head()","5daa0007":"bool_cat = ['comments_disabled', 'ratings_disabled', 'has_thumbnail']\nfor i in bool_cat:\n    plt.figure(figsize=(5,5))\n    sns.countplot(train_df[i])\n    plt.show()","9cbddc20":"for i in range(len(bool_cat)):\n    print(bool_cat[i], \"\\n\", train_df[bool_cat[i]].value_counts())","1544b7ef":"for i in bool_cat:\n    plt.figure(figsize=(10,5))\n    sns.barplot(x=i, y=\"likes\", data=train_df.sort_values(by=i, ascending=False))\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.show()","b068e2e7":"likes_vs_ratings = train_df[train_df['ratings_disabled'] == True]\nlikes_vs_ratings['likes']","aeb6ab80":"train_df.drop(['ratings_disabled'], axis=1, inplace=True)\ntrain_df.head()","5564f196":"train_df['categoryId'].unique()","1feaeb5d":"plt.figure(figsize=(10,5))\nsns.barplot(x='categoryId', y=\"likes\", data=train_df.sort_values(by='categoryId', ascending=False))\nplt.xticks(rotation=90)\nplt.tight_layout()\nplt.show()","dba12683":"plt.figure(figsize = (15,5))\nsns.heatmap(train_df.isna().values, cmap = ['#800080','#FFFACD'], xticklabels=train_df.columns)\nplt.title(\"Missing values in training Data\", size=15);","bfb465ec":"train_df['duration_seconds'].max(), train_df['duration_seconds'].min()","322c7d12":"plt.figure(figsize = (25,5))\nsns.countplot(train_df['duration_seconds'])","54005cb3":"train_df.isnull().sum()","2ff63bdd":"train_df[\"duration_seconds\"].fillna(train_df[\"duration_seconds\"].median(), inplace=True)","276a5017":"plt.figure(figsize = (15,5))\nsns.heatmap(train_df.isna().values, cmap = ['#800080','#FFFACD'], xticklabels=train_df.columns)\nplt.title(\"Missing values in training Data\", size=15);","653451e3":"train_df['channelTitle'].value_counts()","7756e93e":"## **categoryId vs likes**\n#### Conclusion from the below plot: Category 10 has the highest likes whereas category 25 has the least no. of likes","03abdc2b":"## **Handling the missing values in duration_seconds**\n**Replaacing the missing values with the median as this is right skewed distribution**","bdc5ce89":"## **Analysing the training data**","7256c72a":"## **Checking the missing values**","f27900eb":"## **Take the bool values for visualizing the spread**","f175f519":"## **Extracting the Date and Time from publishedAt**","c1c74ed7":"## As the target attribute is the ratio of **view_count** to **likes** attributes, I suppose, we need to predict the **likes** for each video_id and then calculate the target attribute.","0cda70d8":"## Dropping the below attributes for initial analysis:\n **1. video_id**\n \n **2. channelId**\n \n **3. id**\n \n **4. thumbnail_link**\n \n **5. dislikes and comment_count (as they are not provided in test set neither will we require these in predicting the likes attribute)**\n \n **6. target (as our target is likes attribute, using which we can calculate the target ratio)**\n \n **7. description (title attribute will be sufficient for now)**","dc03c7b9":"# **Checking Correlation of the bool attributes with the target variable**","b01a8b6e":"## **As we can see that the True's in ratings_disabled are insignifficant and the likes are also 0 for true values. So, dropping the column**"}}