{"cell_type":{"301d1e06":"code","af27eb9c":"code","48f23d91":"code","ccf6e092":"code","1ed3f9a9":"code","020ced40":"code","6a6070a6":"code","c4d25e77":"code","9dc375d9":"code","83dc6e24":"code","12cacdf4":"code","07547db8":"code","78e157f9":"code","02a8ad4d":"code","d31dc52a":"code","d8e868ab":"code","44f190b2":"code","c8b72732":"code","4d7bff3d":"code","fab24ed8":"code","0594372a":"code","b6dfcf24":"code","ebf3357f":"code","f6a12e66":"code","a78e7bb7":"code","4d627a02":"code","447a622f":"code","1626d3a6":"code","7ec4988d":"code","0930c7b8":"code","1c800ab5":"code","5373d2a5":"code","100bf7e4":"code","d8981086":"code","34d385bd":"code","4173ccfa":"code","c256966d":"code","48b2dc79":"code","bb016e62":"code","1d3ba924":"code","1cab016c":"code","d817177f":"markdown","23cdcf38":"markdown","9f0adc48":"markdown"},"source":{"301d1e06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","af27eb9c":"data = pd.read_csv(\"..\/input\/ContinousDataset.csv\")","48f23d91":"data.head()","ccf6e092":"labels = data[['Winner']]\ndata = data[['Team 1', 'Team 2', 'Ground', 'Host_Country', 'Venue_Team1', 'Venue_Team2', 'Innings_Team1', 'Innings_Team2']]","1ed3f9a9":"data.head()","020ced40":"data_hot = pd.get_dummies(data)","6a6070a6":"data_hot.head()","c4d25e77":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(labels)\nlabels = le.transform(labels) \n# labels = pd.get_dummies(labels)","9dc375d9":"# labels = labels.reshape(labels.shape[0],1)","83dc6e24":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(data_hot, labels, test_size=0.1)","12cacdf4":"from sklearn.neural_network import MLPClassifier\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)\nclf.fit(x_train, y_train)\npreds = clf.predict(x_test)\nlen(preds[preds == y_test])\/len(preds)","07547db8":"from sklearn.ensemble import RandomForestClassifier as rfc\nclf = rfc(n_estimators=100, max_depth=2, random_state=0)\nclf.fit(x_train, y_train)\npreds = clf.predict(x_test)\nlen(preds[preds == y_test])\/len(preds)","78e157f9":"from sklearn.neighbors import KNeighborsClassifier as knn\nclf = knn(n_neighbors=10)\nclf.fit(x_train, y_train)\npreds = clf.predict(x_test)\nlen(preds[preds == y_test])\/len(preds)","02a8ad4d":"data.head()","d31dc52a":"data = pd.read_csv(\"..\/input\/ContinousDataset.csv\")","d8e868ab":"data = data[((data['Team 1'] == 'Australia') | (data['Team 1'] == 'West Indies')) & ((data['Team 2'] == 'Australia') | (data['Team 2'] == 'West Indies'))]","44f190b2":"labels = data[['Winner']]\ndata = data[['Team 1', 'Team 2', 'Ground', 'Host_Country', 'Venue_Team1', 'Venue_Team2', 'Innings_Team1', 'Innings_Team2']]","c8b72732":"data_hot = pd.get_dummies(data) #one hot encoding our data","4d7bff3d":"# from sklearn import preprocessing\n# le = preprocessing.LabelEncoder()\n# le.fit(labels)\n# labels = le.transform(labels) \n# # labels = pd.get_dummies(labels)","fab24ed8":"# labels = labels.reshape(labels.shape[0],1)","0594372a":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(data_hot, labels, test_size=0.1)","b6dfcf24":"from sklearn.neural_network import MLPClassifier\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)\nclf.fit(x_train, y_train)\npreds = clf.predict(x_test)\npreds = preds.reshape(preds.shape[0],1)\nlen(preds[preds == y_test])\/len(preds)","ebf3357f":"from sklearn.ensemble import RandomForestClassifier as rfc\nclf = rfc(n_estimators=5, max_depth=2, random_state=0)\nclf.fit(x_train, y_train)\npreds = clf.predict(x_test)\npreds = preds.reshape(preds.shape[0],1)\nlen(preds[preds == y_test])\/len(preds)","f6a12e66":"from sklearn.tree import DecisionTreeClassifier as DTC\nclf = DTC(random_state=0)\nclf.fit(x_train, y_train)\npreds = clf.predict(x_test)\npreds = preds.reshape(preds.shape[0],1)\nlen(preds[preds == y_test])\/len(preds)","a78e7bb7":"from sklearn.neighbors import KNeighborsClassifier as knn\nclf = knn(n_neighbors=3)\nclf.fit(x_train, y_train)\npreds = clf.predict(x_test)\npreds = preds.reshape(preds.shape[0],1)\nlen(preds[preds == y_test])\/len(preds)","4d627a02":"from sklearn.naive_bayes import GaussianNB as nb\nclf = nb()\nclf.fit(x_train, y_train)\npreds = clf.predict(x_test)\npreds = preds.reshape(preds.shape[0],1)\nlen(preds[preds == y_test])\/len(preds)","447a622f":"data = pd.read_csv(\"..\/input\/ContinousDataset.csv\")","1626d3a6":"data = data[((data['Team 1'] == 'Australia') | (data['Team 1'] == 'India')) & ((data['Team 2'] == 'Australia') | (data['Team 2'] == 'India'))]","7ec4988d":"data","0930c7b8":"# recent_match = pd.DataFrame([0,\"ODI # 4038\", \"Aghanistan\", \"Sri Lanka\", \"Winning1stInning\", \"Sep 17, 2018\", \"Aghanistan\", \"Dubai\", \"Neutral\", \"Neutral\", \"First\", \"Second\"])","1c800ab5":"# data = data.append({'Unnamed: 0' : 0 , 'Scorecard' : \"ODI # 4038\", 'Team 1':\"Aghanistan\", 'Team 2': \"Sri Lanka\", 'Margin':\"Winning1stInning\", 'Ground': \"Abu Dubai\", 'Match Date': \"Sep 17, 2018\", 'Winner': \"Afghanistan\", 'Host_Country': \"UAE\", 'Venue_Team1':\"Neutral\", 'Venue_Team2':\"Neutral\", 'Innings_Team1': \"First\", 'Innings_Team2': \"Second\"} , ignore_index=True)","5373d2a5":"labels = data[['Winner']]\ndata = data[['Team 1', 'Team 2', 'Ground', 'Host_Country', 'Venue_Team1', 'Venue_Team2', 'Innings_Team1', 'Innings_Team2']]","100bf7e4":"#making an example entry for our test example\nl = [(\"Australia\", \"India\", \"London\", \"England\", \"Neutral\", \"Neutral\", \"First\", \"Second\"), \n     (\"Australia\", \"India\", \"London\", \"England\", \"Neutral\", \"Neutral\", \"Second\", \"First\")\n    ]\ncolumns = [\"Team 1\", \"Team 2\", \"Ground\", \"Host_Country\", \"Venue_Team1\", \"Venue_Team2\", \"Innings_Team1\", \"Innings_Team2\"]\ntest_data = pd.DataFrame(l, columns = columns) #creating test example dataframe\ndata = data.append(test_data) #appending our world cup single match example to the dataset\ndata_hot = pd.get_dummies(data) #one hot encoding our data","d8981086":"#splitting test and train examples\n#only last two examples are for the match we want to predict\nx_train = data_hot[:-2]\ny_train = labels\nx_test = data_hot[-2:]","34d385bd":"from sklearn.neighbors import KNeighborsClassifier as knn\nclf = knn(n_neighbors=3)\nclf.fit(x_train, y_train)\npreds = clf.predict_proba(x_test)\n# len(preds[preds == y_test])\/len(preds)","4173ccfa":"from sklearn.neural_network import MLPClassifier\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)\nclf.fit(x_train, y_train)\npreds = clf.predict_proba(x_test)\n# preds = preds.reshape(preds.shape[0],1)\n# len(preds[preds == y_test])\/len(preds)","c256966d":"preds","48b2dc79":"Team1 = 0.15 * 0.33 + 0.85 * 0.60","bb016e62":"Team2 = 0.15 * 0.67 + 0.85 * 0.40","1d3ba924":"Team1","1cab016c":"eng","d817177f":"Real training team by team","23cdcf38":"Match1:\n* England vs South Africa\n* predicted winner: England\n* Actual winner: England\n\nMatch2:\n* West Indies vs Pakistan\n* Predicted winner : West Indies\n* Actual winner : West Indies\n\nMatch3:\n* Sri Lanka vs New Zealand\n* predicted winner : New Zealand (if New Zealand bat first)\n* predicted winner : New Zealand (if New zealand bat first)\n\nMatch4:\n* Afghnistan vs Australia\n* predicted winner : Australia (if Australia bat first)\n* predicted winner : Australia (if Afghanistan bat first)\n\nMatch5:\n* South Africa vs Bangladesh\n* predicted winner : South Africa\n\nMatch6:\n* England vs Pakistan\n* predicted winner : England\n\nMatch7:\n* Afghanistan vs Srilanka\n* predicted winner : Srilanka","9f0adc48":"****Real data predictions****"}}