{"cell_type":{"08082d7a":"code","18cfc85c":"code","479202e3":"code","2c59c4ee":"code","62e12050":"code","a4610cc6":"code","c08e3207":"code","889d9383":"code","927b6c3f":"code","be1bf127":"code","4ccc7bdf":"code","f26f7136":"code","7f74857b":"code","365bab0a":"code","46f2c21d":"code","039e92b9":"code","796b374c":"code","41fd577e":"code","17b18670":"code","2a0d5986":"code","ee2a8aa8":"code","e69f0652":"code","e3b4e49b":"code","f8cf954b":"code","f0e5c3e6":"code","7f235d0e":"code","4ffe2c2f":"code","41903cbd":"code","9a3be7a2":"code","da1e892f":"code","05683d14":"markdown","b7762fc3":"markdown","b703485a":"markdown","fec46566":"markdown","8a42669f":"markdown","4ace6f64":"markdown","149d09d8":"markdown"},"source":{"08082d7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18cfc85c":"import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA","479202e3":"train_features = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntest_features = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ntrain_targets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')","2c59c4ee":"print('Train shape:',train_features.shape)\nprint('Test shape:',test_features.shape)","62e12050":"# check for missing values in train and test data\nprint(train_features.isnull().sum().value_counts())\nprint(test_features.isnull().sum().value_counts())","a4610cc6":"train_features.head()","c08e3207":"test_features.head()","889d9383":"train_features['train\/test'] = 'train'\ntest_features['train\/test'] = 'test '","927b6c3f":"# combining train and test features for the purpose of data exploaration\ntrain_test_concat = pd.concat([train_features, test_features])\ntrain_test_concat","be1bf127":"# helper function to plot countplots for categorical features\ndef plotc(x, title):\n    sns.set_style('darkgrid')\n    sns.catplot(x = x, hue = 'train\/test', kind = 'count', data = train_test_concat, palette = 'pastel');\n    plt.title('Countplot for '+ title);","4ccc7bdf":"# Plotting count plots for cp_type, cp_time and cp_dose\nplotc('cp_type', 'treated and control')\nplotc('cp_time', 'treatment duration')\nplotc('cp_dose', 'dosage')","f26f7136":"# separating the gene expression columns (g-) and cell viability columns (c-)\ngene_columns = [col for col in train_features.columns if col.startswith('g-')]\ncell_columns = [col for col in train_features.columns if col.startswith('c-')]","7f74857b":"print(\"Gene expression columns:\", len(gene_columns), \"\\nCell viability columns:\", len(cell_columns))","365bab0a":"# helper function for plotting distribution of gen expression and cell viability data\ndef plotd(col, label, color):\n    sns.set_style('darkgrid')\n    sns.distplot(train_features[col], kde = True, color = color, label = label);","46f2c21d":"# Plotting distribution of randomly selected gene expression features\nfig = plt.figure(figsize = (12,12))\nplt.suptitle('Distribution of random sample of gene expression features')\ncols = random.sample(gene_columns, 8)\ncolors = plt.rcParams[\"axes.prop_cycle\"]()\nfor i in range(len(cols)):\n    c = next(colors)[\"color\"]\n    plt.subplot(4,2,i+1)\n    plotd(cols[i], label = cols[i], color=c)\nfig.tight_layout(pad = 3.0)\nfig.legend(loc=\"upper right\")\nplt.show()","039e92b9":"# Plotting distribution of randomly selected cell viability features\nfig = plt.figure(figsize = (12,12))\nplt.suptitle('Distribution of random sample of cell viability features')\ncols = random.sample(cell_columns, 8)\ncolors = plt.rcParams[\"axes.prop_cycle\"]()\nfor i in range(len(cols)):\n    c = next(colors)[\"color\"]\n    plt.subplot(4,2,i+1)\n    plotd(cols[i],label = cols[i], color=c)\nfig.tight_layout(pad = 3.0)\nfig.legend(loc=\"upper right\")\nplt.show()","796b374c":"# plotting correlation matrix for randomly selected features\nselected_cols = random.sample(gene_columns, 8) + random.sample(cell_columns, 8)\ncorr_selected_cols = train_features[selected_cols].corr()\nplt.figure(figsize = (12,12))\nsns.heatmap(corr_selected_cols, cmap=\"YlGnBu\", annot = True, fmt = '.1g', square = True)\nplt.title('Correlation between random sample of gene expression and cell viability features');","41fd577e":"train_targets_scored.head()","17b18670":"# getting the column wise sum of all targets (number of positive responses for each target)\nx = train_targets_scored.drop('sig_id', axis = 1).sum().sort_values().reset_index()\nx.columns = ['target','num_pos_responses']\nx","2a0d5986":"# plotting the number of positive responses for each target class\nfig = plt.figure(figsize = (20,10))\nplt.title('Number of positive responses for each target')\nax = sns.barplot(x = 'target', y = 'num_pos_responses', data = x)\nax.set_xticklabels(x.target, rotation = 90);","ee2a8aa8":"# plotting the target classes with highest number of positive responses\nfig = plt.figure(figsize = (12,8))\nplt.title('Target classes with highest number of positive responses')\nax = sns.barplot(x = 'target', y = 'num_pos_responses', data = x.tail(20))\nax.set_xticklabels(x.tail(20).target, rotation = 90);","e69f0652":"# plotting the target classes with lowest number of positive responses\nfig = plt.figure(figsize = (12,8))\nplt.title('Target classes with lowest number of positive responses')\nax = sns.barplot(x = 'target', y = 'num_pos_responses', data = x.head(20))\nax.set_xticklabels(x.head(20).target, rotation = 90);","e3b4e49b":"# getting the row wise sum of all the unique sig_id (number of activations per sig_id)\ny = train_targets_scored.sum(axis = 1)\n# number of observations for each number of activations\ny.value_counts()","f8cf954b":"ax = sns.countplot(y, palette = 'pastel')\nplt.title('Number of activations');\ntotal = len(y)\nfor p in ax.patches:\n    ht = p.get_height()\n    ax.text(p.get_x(), ht, '{:1.2f}%'.format(ht*100\/total))","f0e5c3e6":"new_train_features = train_features.copy()\nnew_train_features.drop(columns = ['sig_id','cp_type','cp_time','cp_dose','train\/test'], inplace = True)\nnew_train_features","7f235d0e":"scaler = StandardScaler()\nscaler.fit(new_train_features)","4ffe2c2f":"train_transform = scaler.transform(new_train_features)\n(np.min(train_transform), np.max(train_transform))","41903cbd":"print('new_train_features', new_train_features.shape)\nprint('train_transform', train_transform.shape)","9a3be7a2":"pca = PCA().fit(train_transform)","da1e892f":"# plotting the explained variance\nsns.set_style('darkgrid')\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance');","05683d14":"* Around 400 components to explain 90% of the variance\n* Around 800 components to explain almost 100% of the variance","b7762fc3":"Importing libraries for plotting and pca","b703485a":"* There are very few control observations and these control observaions have no MoA.\n* The distribution of treatment durations is almost equal for all 3 categories(24hr, 48hr, 72hr) in both train and test data.\n* The distribution of dosage is equal for D1 & D2 in both train and test data.","fec46566":"* Majority of the sig_ids have 1 activation and a considerable number of observations have no activations\n* The number of observations decreases for higher number of activations .","8a42669f":"References: \n* https:\/\/www.kaggle.com\/headsortails\/explorations-of-action-moa-eda\n* https:\/\/www.kaggle.com\/isaienkov\/mechanisms-of-action-moa-prediction-eda","4ace6f64":"Great! no missing values.\nLet us take a look at the features of train and test data.","149d09d8":"Let's read all the csv files"}}