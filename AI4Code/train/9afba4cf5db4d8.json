{"cell_type":{"9bf7da5a":"code","ad1cd5a6":"code","17968507":"code","30da8a70":"code","bbebeb2e":"code","9e343952":"code","c577c42d":"code","16133dd0":"code","086f912c":"code","6c73ae1f":"code","c4d523d4":"code","ac3429eb":"code","f9c82d06":"code","8092e982":"code","d2b2f53f":"code","0c6b0958":"code","8fab6e88":"code","e1d7b910":"code","dd9d42c6":"code","21f6b9e8":"code","045faef7":"code","f187512a":"code","74588b85":"code","b8c99716":"code","9509409b":"code","c9f1efca":"code","7788b7be":"code","43a8c639":"code","4cac2e06":"code","564142e3":"code","b252dfc6":"code","98e09602":"code","6ebc816a":"code","d48d9ffe":"code","2e4bcb39":"code","589eef03":"code","c1781514":"code","1fa80630":"code","306eb8fc":"code","09a6b56f":"code","30de9081":"code","1204644e":"code","9470498f":"code","dbf00c29":"code","722e2608":"code","a7d52367":"code","d13b9928":"code","04a5f2bd":"code","2ef39a87":"code","61753a5d":"code","d8e400ac":"code","b334860d":"code","3e63c244":"code","83e70cad":"code","717d8abc":"code","1aafd7b0":"code","25169fc0":"code","4453e321":"code","0418aa1d":"code","3e414c19":"code","0c5226ef":"code","37dc0784":"code","27e46763":"code","6d2f3704":"code","0e06275c":"code","e145e467":"code","5f2e5e50":"code","fa20f648":"code","1aa802ea":"code","eefca9ae":"code","21c27134":"code","261e2b3c":"code","8f809ba5":"code","6ea99fd5":"code","627f9a46":"code","362cec06":"code","4ed4b7bf":"code","fbd10d94":"code","92ca2775":"code","60299841":"code","e571b523":"code","851fc1df":"code","c3e99a5f":"code","7574c42f":"code","c05ded55":"code","95cf0787":"code","1ed8c3cc":"code","f1a51556":"code","dbe78420":"code","53bebb18":"code","0f682f13":"code","e789e984":"code","84f75599":"code","4c944205":"code","17035566":"markdown","302fa4e9":"markdown","fc3fa5f9":"markdown","ea183356":"markdown","b4bc91c9":"markdown","5ba6116f":"markdown","fb61c681":"markdown","706ce2e3":"markdown","25e0319a":"markdown","a72454d4":"markdown","a7b5728c":"markdown","b162856e":"markdown","24aebce0":"markdown","7263ce90":"markdown","abf2152d":"markdown","cc348e8b":"markdown","1929e2bc":"markdown"},"source":{"9bf7da5a":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import metrics\nfrom sklearn.preprocessing import LabelEncoder","ad1cd5a6":"bank_data = pd.read_csv('..\/input\/bank-marketing-campaign-eda-prediction\/bank-additional-full.csv', sep = ';')\nbank_data","17968507":"bank_data.shape","30da8a70":"bank_data.info()","bbebeb2e":"print(bank_data['job'].unique())\nprint(bank_data['marital'].unique())\nprint(bank_data['education'].unique())\nprint(bank_data['default'].unique())\nprint(bank_data['month'].unique())\nprint(bank_data['day_of_week'].unique())\nprint(bank_data['contact'].unique())\nprint(bank_data['housing'].unique())\nprint(bank_data['loan'].unique())\nprint(bank_data['poutcome'].unique())\nprint(bank_data['previous'].unique())\nprint(bank_data['pdays'].unique())\nprint(bank_data['y'].unique())","9e343952":"bank_data.rename(columns = {'default':'Default Credit', 'housing': 'Housing Loan', 'loan': 'Personal Loan', 'contact':'Mode of Contact',\n                            'month':'Contact Month', 'day_of_week':'Contact Day', 'duration':'Contact Duration','pdays':'Passed_Days',\n                           ' previous':'Performed_Contacts', 'poutcome':'Outcome_of_Campaign','nr.employed':'No._Of_Employees','y':'Term Deposit'}, inplace=True)\nbank_data.head(10)","c577c42d":"bank_data.replace({'unknown': 'NaN'}, inplace=True)\nbank_data.replace(['nonexistent', 'failure', 'success'], [0, 1, 2], inplace=True)\nbank_data.replace(['mar','apr','may','jun','jul','aug','sep','oct','nov','dec'], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], inplace=True)\nbank_data","16133dd0":"bank_data.replace({'basic.4y':'Basic+4yr', 'high.school':'High_School', 'basic.6y':'Basic+6yr', 'basic.9y':'Basic+9yr',\n                   'professional.course':'Professional Course','university.degree':'University Degree','illiterate': 'Illiterate'}, inplace=True)\nbank_data","086f912c":"sns.heatmap(bank_data.corr())","6c73ae1f":"bank_data.isnull().sum()","c4d523d4":"default = bank_data['Default Credit'].values\nhouse_loan = bank_data['Housing Loan'].values\npersonal_loan = bank_data['Personal Loan'].values\nterm_deposit = bank_data['Term Deposit'].values","ac3429eb":"bank_data_df = pd.DataFrame(bank_data)","f9c82d06":"bank_data_df.drop(['Mode of Contact','emp.var.rate','euribor3m','cons.price.idx','cons.conf.idx'], axis=1, inplace=True)","8092e982":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabelencoder=LabelEncoder()\ndefault = labelencoder.fit_transform(bank_data_df['Default Credit'])\nhouse_loan = labelencoder.fit_transform(bank_data_df['Housing Loan'])\npersonal_loan = labelencoder.fit_transform(bank_data_df['Personal Loan'])\nterm_deposit = labelencoder.fit_transform(bank_data_df['Term Deposit'])\nonehotencoder=OneHotEncoder()","d2b2f53f":"print(default)\nprint(house_loan)\nprint(personal_loan)\nprint(term_deposit)","0c6b0958":"print(bank_data.head(25))","8fab6e88":"bank_data_df['Default Credit'] = default\nbank_data_df['Housing Loan'] = house_loan \nbank_data_df['Personal Loan'] = personal_loan\nbank_data_df['Term Deposit'] = term_deposit","e1d7b910":"bank_data_df.head(25)","dd9d42c6":"bank_data_df.info()","21f6b9e8":"plt.figure(figsize=(20,15))\nsns.countplot(y='job', data=bank_data_df)","045faef7":"plt.figure(figsize=(12,6))\nsns.countplot('marital', data=bank_data)","f187512a":"plt.figure(figsize=(15,10))\nsns.countplot(y='education', data=bank_data)","74588b85":"plt.figure(figsize=(12,6))\nsns.countplot(y='Contact Month', data=bank_data)","b8c99716":"plt.figure(figsize=(12,6))\nsns.countplot('Contact Day', data=bank_data)","9509409b":"plt.figure(figsize=(12,6))\nsns.countplot('Outcome_of_Campaign', data=bank_data)","c9f1efca":"plt.figure(figsize=(10,6))\nsns.barplot('Personal Loan', 'Contact Duration', hue='Default Credit', data=bank_data)","7788b7be":"plt.figure(figsize=(10,6))\nsns.barplot('Personal Loan', 'Contact Duration', hue='Term Deposit', data=bank_data)","43a8c639":"plt.figure(figsize=(12,6))\nsns.barplot('Housing Loan', 'age', hue='Term Deposit', palette=\"Paired\", data=bank_data)","4cac2e06":"plt.figure(figsize=(20,15))\nsns.barplot('age', 'No._Of_Employees', hue='job', palette=\"Pastel1\", data=bank_data)","564142e3":"plt.figure(figsize=(20,15))\nsns.boxplot('age', 'Contact Duration', hue='Term Deposit', palette=\"Pastel1\", data=bank_data)","b252dfc6":"plt.figure(figsize=(10, 5))\nsns.lineplot('Housing Loan', 'age', hue='Outcome_of_Campaign', size='Personal Loan', style='Term Deposit', data=bank_data_df, palette=\"dark\", markers=True )","98e09602":"from matplotlib.colors import LogNorm\nplt.figure(figsize=(20,15))\nsns.lineplot('campaign', 'Contact Duration', hue='Passed_Days',size='Outcome_of_Campaign', style='Term Deposit',hue_norm=LogNorm(), data=bank_data_df)","6ebc816a":"plt.figure(figsize=(20,15))\nsns.barplot('Contact Duration', 'marital', hue='Term Deposit', palette=\"prism\", data=bank_data)","d48d9ffe":"plt.figure(figsize=(20,15))\nsns.barplot('Contact Duration', 'job', hue='Outcome_of_Campaign', palette=\"colorblind\", data=bank_data)","2e4bcb39":"plt.figure(figsize=(20,15))\nsns.catplot('age', 'job', hue='Housing Loan', palette=\"PiYG\", data=bank_data, kind='box')","589eef03":"#bank_data_df.info()","c1781514":"#import os","1fa80630":"#%pwd","306eb8fc":"#bank_data.to_csv('Bank Data.csv')","09a6b56f":"# month = bank_data_df.sort_values(by='Contact Month', ascending=True, inplace=True)\n# day = bank_data_df.sort_values(by='Contact Day', ascending=True, inplace=True)\nduration = bank_data_df.sort_values(by='Contact Duration', ascending=True, inplace=True)\n#bank_data_df","30de9081":"bank_data_df.groupby(['age','job','Default Credit', 'marital', 'Housing Loan','Personal Loan','Contact Month','Contact Duration','Passed_Days','campaign','Outcome_of_Campaign','No._Of_Employees','Term Deposit']).age.count()\nbank_data_df","1204644e":"bank_data_df.replace({'NaN': 0}, inplace=True)","9470498f":"bank_data_df.drop(['Contact Day'], axis=1, inplace=True)","dbf00c29":"bank_data_df['job']= pd.to_numeric(bank_data_df['job'], errors='coerce')\nbank_data_df['marital']= pd.to_numeric(bank_data_df['marital'], errors='coerce')\nbank_data_df['education']= pd.to_numeric(bank_data_df['education'], errors='coerce')\nbank_data_df['No._Of_Employees'] = bank_data_df['No._Of_Employees'].astype(int)\nbank_data_df['Outcome_of_Campaign']= pd.to_numeric(bank_data_df['Outcome_of_Campaign'], errors='coerce')","722e2608":"bank_data_df['marital'].unique","a7d52367":"bank_data_df.head()","d13b9928":"bank_data_df.info()\n#bank_data_df.describe()","04a5f2bd":"bank_data_df['education'].isnull().sum()","2ef39a87":"bank_data_df.drop(['job', 'marital', 'education'], axis=1, inplace=True)","61753a5d":"bank_data_df.info()","d8e400ac":"bank_data_df.describe()","b334860d":"x = bank_data_df.drop(['Term Deposit'], axis=1)\ny = bank_data_df['Term Deposit'].values","3e63c244":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=32)","83e70cad":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","717d8abc":"from sklearn.linear_model import LogisticRegression\nlo_reg = LogisticRegression()\nlo_reg.fit(X_train,y_train)","1aafd7b0":"pred = lo_reg.predict(X_test)\npred","25169fc0":"pred.shape","4453e321":"score=lo_reg.score(X_test, y_test)\nprint(score)","0418aa1d":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test, pred)\n# print(cm)\nplt.figure(figsize=(20,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square=True, cmap='nipy_spectral')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nall_sample_title=f\"Accuracy Score: {score}\"\nplt.title(all_sample_title, size=15)","3e414c19":"print(\"Precision:\",metrics.precision_score(y_test, pred))\nprint(\"Recall:\",metrics.recall_score(y_test, pred))","0c5226ef":"bank_data.replace({'unknown': 'NaN'}, inplace=True)\nbank_data.replace(['nonexistent', 'failure', 'success'], [0, 1, 2], inplace=True)\nbank_data.replace(['mar','apr','may','jun','jul','aug','sep','oct','nov','dec'], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], inplace=True)\nbank_data.replace(['married', 'single', 'divorced','unknown'], [2, 1, 3, 0], inplace=True)\nbank_data","37dc0784":"bank_data_df = pd.DataFrame(bank_data)","27e46763":"sns.heatmap(bank_data.corr())","6d2f3704":"plt.figure(figsize=(20,15))\nsns.countplot(y='job', data=bank_data_df)","0e06275c":"plt.figure(figsize=(12,6))\nsns.countplot('marital', data=bank_data)","e145e467":"plt.figure(figsize=(15,10))\nsns.countplot(y='education', data=bank_data)","5f2e5e50":"job = bank_data_df['job'].values\nmarital = bank_data_df['marital'].values\nedu = bank_data_df['education'].values\ndefault = bank_data['Default Credit'].values\nhouse_loan = bank_data['Housing Loan'].values\npersonal_loan = bank_data['Personal Loan'].values\nterm_deposit = bank_data['Term Deposit'].values","fa20f648":"bank_data_df.drop(['Mode of Contact','emp.var.rate','euribor3m','cons.price.idx','cons.conf.idx'], axis=1, inplace=True)","1aa802ea":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabelencoder=LabelEncoder()\ndefault = labelencoder.fit_transform(bank_data_df['Default Credit'])\njob = labelencoder.fit_transform(bank_data_df['job'])\nedu = labelencoder.fit_transform(bank_data_df['education'])\nhouse_loan = labelencoder.fit_transform(bank_data_df['Housing Loan'])\npersonal_loan = labelencoder.fit_transform(bank_data_df['Personal Loan'])\nterm_deposit = labelencoder.fit_transform(bank_data_df['Term Deposit'])\nonehotencoder=OneHotEncoder()","eefca9ae":"print(default)\nprint(job)\nprint(edu)\nprint(house_loan)\nprint(personal_loan)\nprint(term_deposit)","21c27134":"bank_data_df['Default Credit'] = default\nbank_data_df['job'] = job\nbank_data_df['education'] = edu\nbank_data_df['Housing Loan'] = house_loan \nbank_data_df['Personal Loan'] = personal_loan\nbank_data_df['Term Deposit'] = term_deposit","261e2b3c":"bank_data_df.info()","8f809ba5":"duration = bank_data_df.sort_values(by='Contact Duration', ascending=True, inplace=True)\nbank_data_df.groupby(['age','job','Default Credit', 'marital', 'Housing Loan','Personal Loan','Contact Month','Contact Duration','Passed_Days','campaign','Outcome_of_Campaign','No._Of_Employees','Term Deposit']).age.count()\nbank_data_df","6ea99fd5":"bank_data_df.replace({'NaN': 0}, inplace=True)\nbank_data_df.drop(['Contact Day'], axis=1, inplace=True)","627f9a46":"bank_data_df['No._Of_Employees'] = bank_data_df['No._Of_Employees'].astype(int)\nbank_data_df['Outcome_of_Campaign']= pd.to_numeric(bank_data_df['Outcome_of_Campaign'], errors='coerce')","362cec06":"bank_data_df.describe()","4ed4b7bf":"x = bank_data_df.drop(['Term Deposit'], axis=1)\ny = bank_data_df['Term Deposit'].values","fbd10d94":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=32)","92ca2775":"from sklearn.tree import DecisionTreeClassifier\nDT = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)\nDT = DT.fit(X_train, y_train)","60299841":"pred = DT.predict(X_test)\npred","e571b523":"DT.predict_proba(X_test) ","851fc1df":"print(\"Predicticed Subscription for term deposit: \", pred)  ","c3e99a5f":"from sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, pred))","7574c42f":"from sklearn import tree\nplt.figure(figsize=(20,15))\ntree.plot_tree(DT)","c05ded55":"plt.scatter(y_test, pred, color = 'red')\nplt.plot(y_test, pred, color = 'blue')","95cf0787":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test, pred)\n# print(cm)\nplt.figure(figsize=(20,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square=True, cmap='jet')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nall_sample_title=f\"Accuracy Score: \",metrics.accuracy_score(y_test, pred)\nplt.title(all_sample_title, size=15)","1ed8c3cc":"x = bank_data_df.drop(['Term Deposit'], axis=1)\ny = bank_data_df['Term Deposit'].values","f1a51556":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=32)","dbe78420":"from sklearn.ensemble import RandomForestClassifier\nrdm_forest = RandomForestClassifier(n_estimators = 100, random_state = 0)\nrdm_forest = rdm_forest.fit(X_train,y_train)","53bebb18":"pred = rdm_forest.predict(X_test)\npred","0f682f13":"train_rf_predictions = rdm_forest.predict(X_train)\ntrain_rf_probs =rdm_forest.predict_proba(X_train)\n\nrf_predictions = rdm_forest.predict(X_test)\nrf_probs = rdm_forest.predict_proba(X_test)","e789e984":"print(train_rf_predictions)\nprint(train_rf_probs)\nprint(rf_predictions)\nprint(rf_probs)","84f75599":"from sklearn.metrics import precision_score, recall_score, roc_auc_score, roc_curve\nprint(f'Accuracy ROC AUC  Score: {roc_auc_score(y_test, pred)}')\nprint(f'Precision ROC Score: {precision_score(y_test, pred)}')\nprint(f'Recall ROC Score: {recall_score(y_test, pred)}')\nprint(f'Recall ROC Score: {roc_curve(y_test, pred)}')","4c944205":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test, pred)\n# print(cm)\nplt.figure(figsize=(20,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square=True, cmap='nipy_spectral')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nall_sample_title=f\"Accuracy Score: {roc_auc_score(y_test, pred)}\"\nplt.title(all_sample_title, size=15)","17035566":"# 4) Visualization","302fa4e9":"# **6) Data Spliting**","fc3fa5f9":"# 3) Preprocessing of Dataset","ea183356":"# 6) Model Training and prediction","b4bc91c9":"# **4) Visualization**","5ba6116f":"# **Bank Analysis Data using Random Forest**","fb61c681":"# **8) Visualizing Result**","706ce2e3":"*From the above analysis, it can be said that Logistic Regression could be best model as it's accuracy is 90%.This states that the chances of people going for Term Deposit could be more accurate based on the analysis. Also, our machine error was a little more as compared to others*\n\n*Decision tree is the 2nd best option for this kind of analysis as prediction is 89% accurate, near about the prediction by Logistic Regression. Our model had comparatively more error*\n\n*Random Forest could also be used as it's accuracy is also good but less than the other two although error by machine is very less*\n\n\n**Preference based on Accuracy**\nLogistic(90%)>Decision Tree(89%)>Random Forest(72%)\n\n**Preference based on Error**\nRandom Forest(False Negative=126)>Logistic(False Negative= 132)>Decision Tree(False Negative = 206)","25e0319a":"# **Bank Data Analysis using Decision Tree**","a72454d4":"# 5) Data Spliting","a7b5728c":"# ** Model Training and prediction**","b162856e":"# ** Data Spliting **","24aebce0":"# **5) Converting to Numeric**","7263ce90":"# **7) Model Training and prediction**","abf2152d":"# Converting to numeric data type","cc348e8b":"# 1) Importing Libraries","1929e2bc":"# 2) Loading Dataset"}}