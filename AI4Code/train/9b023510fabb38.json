{"cell_type":{"b9735d16":"code","1ee3c913":"code","8fd85acf":"code","755b7dca":"code","fe2ec41c":"code","a4a2cff5":"code","bd62a1f4":"code","f5f823bb":"code","8a516eb5":"code","f18b65bd":"code","80dc64d1":"code","5396f277":"code","8fac3308":"code","59e18c52":"code","8cd8eed3":"code","424b04ff":"code","478ebdf9":"code","cddfb5bb":"code","cfacaa03":"code","66a41e15":"code","47a94324":"code","147e9ad9":"code","95473597":"code","397e0480":"code","e50bed8f":"code","859f06c3":"code","9ec3ca88":"code","6fab3da4":"code","38231952":"code","62c68593":"code","de83038d":"code","bd53bb73":"markdown","44b9b7aa":"markdown","e62bba2c":"markdown","ae2bbe88":"markdown","373a0854":"markdown"},"source":{"b9735d16":"# install the package we need\n!pip install vincent\n!pip install pmdarima\n!pip install chart_studio","1ee3c913":"import seaborn as sns\nimport matplotlib.pyplot as plt \nimport numpy as np\nfrom pathlib import Path\nimport pandas as pd","8fd85acf":"# plotly standard imports\nimport plotly.graph_objs as go\nimport chart_studio.plotly as py\n\n# Cufflinks wrapper on plotly\nimport cufflinks\n\n\n# Display all cell outputs\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\n\nfrom plotly.offline import iplot\ncufflinks.go_offline()\n\n# Set global theme\ncufflinks.set_config_file(world_readable=True, theme='ggplot')","755b7dca":"filename = '..\/input\/coronavirusdataset\/'\nroute = pd.read_csv(filename+'\/route.csv')","fe2ec41c":"route.head()","a4a2cff5":"route.info()","bd62a1f4":"route['date'] = pd.to_datetime(route['date'])\nroute = route.set_index('date')\nroute.head()","f5f823bb":"#check if data have missing value\nmissing = route.isnull().sum()\nmissing","8a516eb5":"province_id = route.groupby('province')['id'].aggregate([np.sum])\ncity_id = route.groupby('city')['id'].aggregate([np.sum])\nvisit_id = route.groupby('visit')['id'].aggregate([np.sum])","f18b65bd":"province_id.iplot(kind='bar', title='total id in each province', xTitle='Province',\\\n                  yTitle='total id')","80dc64d1":"city_id.iplot(kind='bar', title='total id in each city', xTitle='city',\\\n                  yTitle='total id')","5396f277":"visit_id.iplot(kind='bar', title='total id in each visit', xTitle='city',\\\n                  yTitle='total id')","8fac3308":"\ndef color(id):\n    minimun = int(route['id'].min())\n    step = int((route['id'].max() - route['id'].min())\/3)\n    \n    if id in range(minimun, minimun+step):\n        col = 'blue'\n    elif id in range(minimun+step, minimun+step*2):\n        col = 'orange'\n    else:\n        col = 'red'\n    \n    return col","59e18c52":"import folium as fl\nimport json\nimport vincent\n\ndef geospace():\n\n    mapped = fl.Map(location=[route['latitude'].mean(),route['longitude'].mean()],zoom_start=6,\\\n             control_scale=True, world_copy_jump=True, no_wrap=False)\n\n    fg_province= fl.FeatureGroup(name=\"Province\")\n    for lat, lon, name, id in zip(route['latitude'], route['longitude'], route['province'],route['id']):\n        fl.Marker(location=[lat, lon], popup=(fl.Popup(name+ ' id = '+ str(id))),\\\n              icon = fl.Icon(color=color(id))).add_to(fg_province)\n    \n    fg_city = fl.FeatureGroup(name='City')\n    for lat, lon, name, id in zip(route['latitude'], route['longitude'], route['city'],route['id']):\n        fl.Marker(location=[lat, lon], popup=(fl.Popup(name+ ' id = '+ str(id))), \\\n              icon = fl.Icon(color=color(id))).add_to(fg_city)\n    \n    fg_visit = fl.FeatureGroup(name=\"Visit\")\n    for lat, lon, name, id in zip(route['latitude'], route['longitude'], route['visit'],route['id']):\n        fl.Marker(location=[lat, lon], popup=(fl.Popup(name+ ' id = '+ str(id))),\\\n              icon = fl.Icon(color=color(id))).add_to(fg_visit)\n    \n    fg_time = fl.FeatureGroup(name='South Korean covid-19|year=2020')\n    for lat, lon, name, id in zip(route['latitude'], route['longitude'], route['province'],route['id']):\n    \n        y=route['id'][route['province']==name]\n    \n        date = [d.strftime('%m\/%d') for d in y.index.date] #[]\n    \n        \n        multi_iter2 = pd.DataFrame(y.values, index=date).sort_index()\n        scatter = vincent.GroupedBar(multi_iter2, height=200, width=350)\n        data = json.loads(scatter.to_json())\n    \n        v = fl.features.Vega(data, width='100%', height='100%')\n        p = fl.Popup(name)\n        pop =p.add_child(v)\n        fl.features.Marker(location=[lat, lon], popup=pop,icon = fl.Icon(color=color(id))).add_to(fg_time)\n    \n    \n    \n    fg_province.add_to(mapped)\n    fg_city.add_to(mapped)\n    fg_visit.add_to(mapped)\n    fg_time.add_to(mapped)\n    fl.LayerControl().add_to(mapped)\n    \n    return mapped   ","8cd8eed3":"geo_map = geospace()\ngeo_map.save(outfile='South Korean Coronavirus.html')","424b04ff":"geo_map","478ebdf9":"route_daily = route[['latitude', 'longitude', 'id']]","cddfb5bb":"route_daily['day'] = [d.strftime('%m\/%d') for d in route.index.date]\nroute_daily.head() ","cfacaa03":"fig, ax = plt.subplots(1,1, figsize=(15.5,5.5))\nh=sns.boxplot(x='day', y='id', data=route_daily.sort_values(by=['day']), ax=ax)\nax.set_title('South Korean COVID-19|year=2020 boxplot')","66a41e15":"# display each time series\nfrom pmdarima import *","47a94324":"fx=utils.tsdisplay(route_daily['longitude'],title='longitude')","147e9ad9":"fy =  utils.tsdisplay(route_daily['id'], title='id')","95473597":"fv = utils.tsdisplay(route_daily['latitude'], title='latitude')","397e0480":"ts_route = route_daily.copy()\nts_route = ts_route.reset_index()\nts_route = ts_route.sort_values(by=['date'])\nts_route.head()","e50bed8f":"def is_GrangerCause(data=None, maxlag=30):\n    \"\"\"This function find if x2 Granger cause x1 vis versa \"\"\"    \n    from statsmodels.tsa.stattools import grangercausalitytests\n    gc = grangercausalitytests(data, maxlag=maxlag, verbose=False)\n    \n    for i in range(maxlag):\n        x=gc[i+1][0]\n        p1 = x['lrtest'][1] # pvalue for lr test\n        p2 = x['ssr_ftest'][1] # pvalue for ssr ftest\n        p3 = x['ssr_chi2test'][1] #pvalue for ssr_chi2test\n        p4 = x['params_ftest'][1] #pvalue for 'params_ftest'\n        \n        condition = ((p1 < 0.05 and p2 < 0.05) and (p3 < 0.05 and p4 < 0.05))\n        \n        if condition == True:\n            cols = data.columns\n            print('Yes: {} Granger causes {}'.format(cols[0], cols[1]))\n            print('maxlag = {}\\nResults: {}'.format(i, x))\n            break\n            \n        else:\n            if i == maxlag - 1:\n                cols = data.columns\n                print('No: {} does not Granger cause {}'.format(cols[0], cols[1]))","859f06c3":"is_GrangerCause(data = ts_route[['longitude', 'id']])","9ec3ca88":"is_GrangerCause(data = ts_route[['id','longitude']])","6fab3da4":"is_GrangerCause(data = ts_route[['id','latitude']])","38231952":"is_GrangerCause(data = ts_route[['latitude','id']])","62c68593":"is_GrangerCause(data = ts_route[['latitude','longitude']])","de83038d":"is_GrangerCause(data = ts_route[['longitude','latitude']])","bd53bb73":"**We can therefore say from the results that the prediction of the number of patients confirmed in the future, gives us the place where there will be the next contamination of covid-19. in other words, it is enough to know the number of patients confirmed in the future if we want to know which province, city or visit will be infected in the future.**\n\nThank for reading!\nyou can download for your own use","44b9b7aa":"# Granger causality\n\nWe say X Granger-causes Y if prediction of values of Y based on its own past values and on the past values of X are better than predictions of Y based on its past value alone. \n\nor, It is based on the idea that if X causes Y, then the forecast of Y based on previous values of Y AND the previous values of X should outperform the forecast of Y based on previous values of Y alone. \n\nwe are finding if there exist Granger causality between variable time series","e62bba2c":" Something happens in this three figure. we can see index interval [40, 60] and [60,80] for longitude and id plotting. Also [20,40] and [60, 80] for latitude plotting. we are checking if there exist Granger causality between feature.","ae2bbe88":"### the file we are using in this notebook is route.csv ","373a0854":"We are going to implement Granger causality with a statsmodel package below. it accepts only 2D array with 2 columns. The values are in the first column and the predictor (X) is in the second column. \n\n> **The Null hypothesis for grangercausalitytests** is that the time series in\nthe second column, x2, does NOT Granger cause the time series in the first\ncolumn, x1. Grange causality means that past values of x2 have a\nstatistically significant effect on the current value of x1, taking past\nvalues of x1 into account as regressors. \n\n> We reject the null hypothesis that **x2 does not Granger cause x1**\nif the pvalues are below a desired size\nof the test.\n> The null hypothesis for all four test is that the coefficients\ncorresponding to past values of the second time series are zero.\n- 'params_ftest', 'ssr_ftest' are based on F distribution\n- 'ssr_chi2test', 'lrtest' are based on chi-square distribution\n\nAlso see: **https:\/\/www.statisticshowto.datasciencecentral.com\/granger-causality\/**"}}