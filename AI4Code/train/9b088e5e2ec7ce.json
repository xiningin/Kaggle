{"cell_type":{"3875daa9":"code","b63c1c2a":"code","221cbe8e":"code","8b14828e":"code","4f8c912c":"code","cee8062c":"code","000207f9":"code","c24c51c4":"code","ab950091":"code","2eeb74cb":"code","ccd60cc0":"code","3552216e":"code","7f48c75e":"code","2db0607d":"code","30b80a1d":"code","d32b1052":"code","0e76593f":"code","f46b3741":"code","057d9d3d":"code","8e427b06":"code","aa051133":"code","f4412d34":"code","2ff96942":"code","7450180c":"code","fa3e9a69":"code","4be70d01":"code","4cefc3ef":"code","ebcb9539":"code","fff3b9a5":"code","765b13fc":"code","e216dd17":"code","47ccbaf1":"code","5c50090b":"code","a373495a":"code","2324c542":"code","7de062c3":"code","3276558f":"code","5a0be3f4":"markdown","c2e866de":"markdown","d8e3c22d":"markdown","8614bb48":"markdown","f1b43d1a":"markdown","55225c2f":"markdown","f72344d9":"markdown","79896a79":"markdown","0d4f5191":"markdown","c924139b":"markdown","c879ad8c":"markdown","c7455cfa":"markdown","13095f9a":"markdown","4ec59a5c":"markdown","e4997453":"markdown","9c4ba54e":"markdown"},"source":{"3875daa9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b63c1c2a":"udemy_data = pd.read_csv(r'\/kaggle\/input\/udemy-courses\/udemy_courses.csv')\nudemy_data.head()","221cbe8e":"print(\"Number of datapoints in the dataset : \",udemy_data.shape[0])\nprint(\"Number of features in the dataset : \",udemy_data.shape[1])\nprint(\"Features : \",udemy_data.columns.values)","8b14828e":"udemy_data.info()","4f8c912c":"udemy_data.describe()","cee8062c":"print(\"Number of duplicate values in this dataset are : \",udemy_data.duplicated().sum())","000207f9":"udemy_data = pd.DataFrame.drop_duplicates(udemy_data)\nprint(\"Number of duplicate values in this dataset after removal are : \",udemy_data.duplicated().sum())","c24c51c4":"udemyu_data = udemy_data.reset_index(drop=True)\nudemy_data.head()","ab950091":"fig = plt.figure(figsize=(20,18))\n\nplt.subplot(2,2,1)\nsns.countplot('level',data=udemy_data)\nplt.grid()\n\nplt.subplot(2,2,2)\nsns.countplot(x='is_paid',data=udemy_data)\nplt.grid()\n\nplt.subplot(2,2,3)\nsns.countplot('subject',data=udemy_data)\nplt.grid()\n\nplt.show()","2eeb74cb":"plt.figure(figsize=(12,20))\nsns.countplot(y = udemy_data['content_duration'])\nplt.title(\"Content durations and their count in the dataset\")\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","ccd60cc0":"plt.figure(figsize=(15,8))\nsns.countplot(x = udemy_data['price'])\nplt.grid()\nplt.show()","3552216e":"fig = plt.figure(figsize=(20,18))\n\nplt.subplot(2,2,1)\nsns.countplot('level',hue='is_paid',data=udemy_data,color='red')\nplt.grid()\n\nplt.subplot(2,2,2)\nsns.countplot('subject',hue='is_paid',data=udemy_data,color='violet')\nplt.grid()\n\nplt.show()","7f48c75e":"fig,ax = plt.subplots(1,2,figsize=(20,10))\nsns.countplot('is_paid',hue='subject',palette=['yellow','green','purple','brown'],data=udemy_data,ax=ax[0])\nsns.countplot('is_paid',hue='level',palette=['pink','teal','darkblue','orange'],data=udemy_data,ax=ax[1])\nplt.show()","2db0607d":"fig,ax = plt.subplots(nrows=1,ncols=2,figsize=(20,10))\nsns.countplot('subject',hue='level',data=udemy_data,ax=ax[0])\nsns.countplot('level',hue='subject',data=udemy_data,ax=ax[1])\nplt.show()","30b80a1d":"fig1 = px.histogram(udemy_data,x='level',y='price',color='level')\nfig1.show()\nfig2 = px.histogram(udemy_data,x='subject',y='price',color='subject')\nfig2.show()","d32b1052":"fig1 = px.histogram(udemy_data,x='level',y='num_subscribers',color='level')\nfig2 = px.histogram(udemy_data,x='subject',y='num_subscribers',color='subject')\nfig1.show()\nfig2.show()","0e76593f":"fig1 = px.histogram(udemy_data,x='level',y='num_lectures',color='level')\nfig2 = px.histogram(udemy_data,x='subject',y='num_lectures',color='subject')\nfig1.show()\nfig2.show()","f46b3741":"fig1 = px.histogram(udemy_data,x='level',y='content_duration',color='level')\nfig2 = px.histogram(udemy_data,x='subject',y='content_duration',color='subject')\nfig1.show()\nfig2.show()","057d9d3d":"fig1 = px.histogram(udemy_data,x='level',y='num_subscribers',color='subject')\nfig2 = px.histogram(udemy_data,x='subject',y='num_subscribers',color='level')\nfig1.show()\nfig2.show()","8e427b06":"fig1 = px.histogram(udemy_data,x='level',y='num_subscribers',color='is_paid')\nfig2 = px.histogram(udemy_data,x='subject',y='num_subscribers',color='is_paid')\nfig1.show()\nfig2.show()","aa051133":"fig = px.pie(udemy_data, names= 'level')\nfig.update_traces(textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig.show()\n\nfig1 = px.pie(udemy_data, names= 'subject')\nfig1.update_traces(textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig1.show()","f4412d34":"fig1 = px.pie(udemy_data,values='num_subscribers', names= 'level',template='seaborn')\nfig1.update_traces(rotation=90, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig1.show()\n\nfig2 = px.pie(udemy_data,values='num_subscribers', names= 'subject',template='seaborn')\nfig2.update_traces(rotation=90, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig2.show()","2ff96942":"fig1 = px.pie(udemy_data,values='num_lectures', names= 'level',color_discrete_sequence=px.colors.sequential.RdBu)\nfig1.update_traces(rotation=90, pull=0.02, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig1.show()\n\nfig2 = px.pie(udemy_data,values='num_lectures', names= 'subject',color_discrete_sequence=px.colors.sequential.RdBu)\nfig2.update_traces(rotation=90, pull=0.02, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig2.show()","7450180c":"fig1 = px.pie(udemy_data,values='price', names= 'level',color_discrete_sequence=px.colors.sequential.YlOrBr)\nfig1.update_traces(rotation=90, pull=0.02, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig1.show()\n\nfig2 = px.pie(udemy_data,values='price', names= 'subject',color_discrete_sequence=px.colors.sequential.YlOrBr)\nfig2.update_traces(rotation=90, pull=0.02, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig2.show()","fa3e9a69":"len(np.unique(udemy_data['course_title']))   #number of unique courses","4be70d01":"courses = (udemy_data.groupby('course_title')['num_subscribers'].max().reset_index()).sort_values(by='num_subscribers',ascending=False)\ncourses = (courses.head(20)).reset_index(drop=True)\nprint(courses)\n\nfig = px.pie(courses, values='num_subscribers', names= 'course_title' , title='Max Subscribers different for Courses',color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(rotation=90, pull=0.02, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","4cefc3ef":"courses = (udemy_data.groupby('course_title')['num_lectures'].max().reset_index()).sort_values(by='num_lectures',ascending=False)\ncourses = (courses.head(20)).reset_index(drop=True)\nprint(courses)\n\nfig = px.pie(courses, values='num_lectures', names= 'course_title' , title='Most Lectures for different Courses',color_discrete_sequence=px.colors.sequential.GnBu)\nfig.update_traces(rotation=90, pull=0.02, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","ebcb9539":"courses = (udemy_data.groupby('course_title')['price'].max().reset_index()).sort_values(by='price',ascending=False)\ncourses = (courses.head(25)).reset_index(drop=True)\nprint(courses)\n\nfig = px.pie(courses, values='price', names= 'course_title' , title='High price Courses',color_discrete_sequence=px.colors.sequential.RdPu)\nfig.update_traces(rotation=90, pull=0.02, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","fff3b9a5":"courses = (udemy_data.groupby('course_title')['content_duration'].max().reset_index()).sort_values(by='content_duration',ascending=False)\ncourses = (courses.head(25)).reset_index(drop=True)\nprint(courses)\n\nfig = px.pie(courses, values='content_duration', names= 'course_title' , title='Max duration courses',color_discrete_sequence=px.colors.sequential.YlOrRd)\nfig.update_traces(rotation=90, pull=0.02, textinfo=\"percent+label\",marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","765b13fc":"udemy_data.head()","e216dd17":"labels = udemy_data['is_paid']\ndata = pd.DataFrame.drop(udemy_data,labels=['published_timestamp','course_id','course_title','url','is_paid'],axis=1)\ndata.head()","47ccbaf1":"#dealing with categorical data\nle = LabelEncoder()    \ndata['level'] = le.fit_transform(data['level'])\ndata['subject'] = le.fit_transform(data['subject'])\ndata.head()","5c50090b":"X_train,X_test,Y_train,Y_test = train_test_split(data,labels,test_size=0.2)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","a373495a":"Y_test = Y_test.reset_index(drop=True)","2324c542":"def plot_conf_matrix(Y_test,Y_pred):\n    conf = confusion_matrix(Y_test,Y_pred)\n    sns.heatmap(conf,annot=True,cmap='YlOrBr',fmt=\".3f\")\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')","7de062c3":"lr = LogisticRegression(max_iter=5000)\nlr.fit(X_train,Y_train)\nY_pred = lr.predict(X_test)\n\nr=0\nfor i in range(len(Y_test)):\n    if Y_test[i] == Y_pred[i]:\n        r=r+1\nprint(\"Accuracy : \",r\/len(Y_test)*100)\n\nplot_conf_matrix(Y_test,Y_pred)","3276558f":"dt = DecisionTreeClassifier()\ndt.fit(X_train,Y_train)\nY_pred = dt.predict(X_test)\n\nr=0\nfor i in range(len(Y_test)):\n    if Y_test[i] == Y_pred[i]:\n        r=r+1\nprint(\"Accuracy : \",r\/len(Y_test)*100)\n\nplot_conf_matrix(Y_test,Y_pred)","5a0be3f4":"# ** Preparation of data :**","c2e866de":"** Plotly Histograms :**","d8e3c22d":"# **ML Models :**","8614bb48":"** Countplots : **","f1b43d1a":"# **# Train-Test Split :**","55225c2f":"**<strong>The maximum occuring price is 20 followed by 50.<\/strong> **","f72344d9":"**Logistic Regression :**","79896a79":"# **Loading the Dataset :**","0d4f5191":"** Pie Charts :**","c924139b":"**Decision Tree :**","c879ad8c":"**This udemy data has no null values.**","c7455cfa":"# ** Visualisation :**","13095f9a":"<h1 style=\"color:red\"> Hey everyone , if you like my effort here an <span style=\"color:purple\">UPVOTE<\/span> is appreciated. Thanks for viewing :)","4ec59a5c":"**<p>The maximum occuring level in the data is All Levels.<\/p>**\n**<p>The maximum number of courses in the data are paid.<\/p>**\n**<p>The subjects Business Finance and Web Development are the major subject courses choosen.<\/p>**","e4997453":"**<strong>The maximum occuring content_duration in the data is 1.0 followed by 1.5 and 2.0.<strong>**","9c4ba54e":"# ** Duplicate Values :**"}}