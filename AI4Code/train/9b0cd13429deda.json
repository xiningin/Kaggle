{"cell_type":{"dec17f98":"code","b8dd8dc4":"code","73b5624f":"code","fe54d026":"code","6d8e2d15":"code","e854cbf2":"code","51bceab6":"code","b78cb919":"code","58fb2a9e":"code","0120bff9":"code","c08dd5ba":"code","0d6f8a54":"code","ee763087":"code","46faa7eb":"code","78be73c0":"markdown","06c85a1f":"markdown","24c87632":"markdown","eaf4a988":"markdown","52c27b05":"markdown","eeba67f2":"markdown","e32727bb":"markdown","b679bf63":"markdown","aa85c9f4":"markdown","c3f01574":"markdown"},"source":{"dec17f98":"# ! pip install -q lightning-flash[tabular]\n! pip install -q 'https:\/\/github.com\/PyTorchLightning\/lightning-flash\/archive\/refs\/heads\/master.zip#egg=lightning-flash[tabular]'\n! pip install -q mplfinance\n! pip install -q --upgrade pandas --force-reinstall\n! pip list | grep -E \"lightning|torch|finance|crypto\"","b8dd8dc4":"%reload_ext autoreload\n%autoreload 2\n\nimport pandas as pd\n\nTAB_COLUMN_TYPES = {\n    'Asset_ID': 'int8',\n    'Count': 'int32',\n    'row_id': 'int32',\n    'Count': 'int32',\n    'Open': 'float64',\n    'High': 'float64',\n    'Low': 'float64',\n    'Close': 'float64',\n    'Volume': 'float64',\n    'VWAP': 'float64',\n}\ndf_train = pd.read_csv(\"\/kaggle\/input\/g-research-crypto-forecasting\/train.csv\", low_memory=False, dtype=TAB_COLUMN_TYPES)\ndisplay(df_train.head())","73b5624f":"df_counts = df_train.groupby(\"Asset_ID\").size()\ndf_counts.plot.bar(grid=True)","fe54d026":"df_asset_details = pd.read_csv(\"\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv\")\ndisplay(df_asset_details.T)","6d8e2d15":"mapping = dict(df_asset_details[['Asset_ID', 'Asset_Name']].values)\ndf_train[\"Asset_Name\"] = df_train[\"Asset_ID\"].map(mapping)","e854cbf2":"import mplfinance as mpf\n\nfor n, dfg in df_train.groupby(\"Asset_Name\"):\n    dfg['timestamp'] = pd.to_datetime(dfg['timestamp'])\n    dfg.set_index(\"timestamp\", inplace=True)\n    mpf.plot(\n        dfg[-300:], # the dataframe containing the OHLC (Open, High, Low and Close) data\n        type='candle', # use candlesticks \n        volume=True, # also show the volume\n        mav=(3, 6, 9), # use three different moving averages\n        figsize=(14, 2), # set the ratio of the figure\n        style='yahoo',\n        title=n,\n    )","51bceab6":"# df_train_small = df_train[df_train[\"Asset_ID\"].isin([0, 1, 2])]\ndf_train_small = df_train[df_train[\"Asset_ID\"] == 0].interpolate()","b78cb919":"import flash\nimport pandas as pd\nimport torch\nfrom flash.tabular.forecasting import TabularForecaster, TabularForecastingData\nfrom pytorch_forecasting.data import NaNLabelEncoder\nfrom pytorch_forecasting.data.examples import generate_ar_data","58fb2a9e":"datamodule = TabularForecastingData.from_data_frame(\n    time_idx=\"timestamp\",\n    target=\"Target\",\n    # categorical_encoders={\"series\": NaNLabelEncoder().fit(data.series)},\n    group_ids=[\"Asset_ID\"],\n    time_varying_unknown_reals=[\"Target\"],\n    allow_missing_timesteps=True,\n    max_encoder_length=60,\n    max_prediction_length=1,\n    train_data_frame=df_train_small,\n    val_data_frame=df_train_small,\n    batch_size=512,\n    num_workers=4,\n)","0120bff9":"model = TabularForecaster(\n    datamodule.parameters,\n    backbone=\"deep_ar\",\n    # backbone_kwargs={\"widths\": [32, 512], \"backcast_loss_ratio\": 0.1},\n)","c08dd5ba":"import torch\nfrom pytorch_lightning.loggers import CSVLogger\nfrom pytorch_lightning.callbacks import StochasticWeightAveraging\n\nswa = StochasticWeightAveraging(swa_epoch_start=0.6)\nlogger = CSVLogger(save_dir='logs\/')\ntrainer = flash.Trainer(\n    max_epochs=10,\n    logger=logger,\n    gpus=torch.cuda.device_count(),\n    gradient_clip_val=0.01,\n)\n\n# ==============================\n\ntrainer.tune(model, datamodule=datamodule, lr_find_kwargs=dict(min_lr=2e-5, max_lr=1, num_training=65),)\nprint(f\"Learning Rate: {model.learning_rate}\")\n\n# ==============================\n\ntrainer.fit(model, datamodule=datamodule)","0d6f8a54":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nmetrics = pd.read_csv(f'{trainer.logger.log_dir}\/metrics.csv')\nmetrics = metrics[[c for c in metrics.columns if \"_step\" not in c]]\ndel metrics[\"step\"]\nmetrics.set_index(\"epoch\", inplace=True)\ndisplay(metrics.dropna(axis=1, how=\"all\").head())\ng = sns.relplot(data=metrics, kind=\"line\")\ng.set(yscale=\"log\")\nplt.gcf().set_size_inches(15, 5)","ee763087":"outputs = model.predict(df_train_small[-1000:])\nprint(outputs[0].keys())\npredictions = [o['prediction'] for o in outputs]\nprint(predictions)","46faa7eb":"import gresearch_crypto\nfrom pprint import pprint\nfrom tqdm.auto import tqdm\n\nenv = gresearch_crypto.make_env()   # initialize the environment\niter_test = env.iter_test()\n\nfor i, (df_test, df_pred) in tqdm(enumerate(iter_test)):\n    display(df_test.head())\n    df_test_small = df_test[df_test[\"Asset_ID\"] == 0]\n    df_test_small['Target'] = [None]\n    # TODO\n#     out = model.predict(df_test_small)\n#     preds = zip(df_test_small[row_id], out['prediction'])\n#     pprint(preds)\n    env.predict(df_pred)   # register your predictions\n    break","78be73c0":"### 4. Generate predictions","06c85a1f":"# \ud83e\ude99Crypto \ud83d\udcc8forecasting with Lightning\u26a1Flash\n\n[Flash](https:\/\/lightning-flash.readthedocs.io\/en\/stable) makes complex AI recipes for over 15 tasks across 7 data domains accessible to all.\n\nIn a nutshell, Flash is the production grade research framework you always dreamed of but didn't have time to build.","24c87632":"### 2. Build the task","eaf4a988":"### Linking with coins\n\nShow how naby data points we heva pear crypto","52c27b05":"# Training with Flash Lightning\n\nSee the forecasting docs: https:\/\/lightning-flash.readthedocs.io\/en\/stable\/reference\/tabular_forecasting.html","eeba67f2":"### 1. Create the DataModule\n\nExample based on this tutorial: https:\/\/pytorch-forecasting.readthedocs.io\/en\/latest\/tutorials\/ar.html","e32727bb":"### 3. Create the trainer and train the model","b679bf63":"### Prune\n\nlimit the amout dues to limited computing resources","aa85c9f4":"## Data exolorations & preparation\n\nChecking the input data and pairing with Crypto names","c3f01574":"### Finantial timeseries\n\nshowing short tail of each coin with `mplfinance` package"}}