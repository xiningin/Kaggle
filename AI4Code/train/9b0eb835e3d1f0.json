{"cell_type":{"673c7049":"code","ee32de05":"code","dfc69249":"code","3c812e81":"code","db4f51d5":"code","517de992":"code","65ad6a91":"code","17bd5306":"code","ce57ea1c":"code","ae5f96d2":"code","608a119c":"code","2df7ff82":"code","1e78cf2f":"code","ed58ba9e":"code","b9d522c4":"code","461c9c2b":"code","d6c0359b":"code","a5ea6e57":"code","b245f906":"code","08b27648":"code","bac1f7a8":"code","81fe0b23":"code","487ecc7a":"code","c840b1bb":"code","4f681bb5":"code","caaef7a2":"code","75ac3cdb":"code","368f9a3a":"code","c036d839":"code","d033120a":"code","5a9ec7ef":"code","48e89b80":"code","47540512":"code","a7f41ec1":"code","45570dad":"code","22fc9ced":"code","de9d8a53":"code","462fd2fe":"code","63a456cf":"code","fe8036ee":"code","f7fea58b":"code","95700161":"code","fee5dcb9":"code","6e32b1c7":"code","c307034a":"code","00c8143e":"code","3cedaf37":"code","d066440d":"code","7b2ad38b":"code","901b8f10":"code","b566a36b":"code","d7c0a118":"code","bec41749":"code","d8e29906":"code","f048f406":"code","36cf4eb8":"code","a0363dc7":"code","ab32683b":"code","a91c80cf":"code","32290285":"code","dbf8e3ea":"code","c83bb19b":"code","09b652ad":"code","58102211":"code","66d81389":"code","5dbae169":"code","47d94f82":"code","836b555f":"code","71a74559":"code","92b72941":"code","90190206":"code","7a18e894":"code","68d59d76":"code","c6936b2f":"code","ba0e8946":"code","7bad197c":"code","4e30cd19":"code","6ed0e833":"code","2ee24a6c":"markdown","0a67e8df":"markdown","120ee81e":"markdown","d4fd6eb2":"markdown","7483b21a":"markdown","ee9bc696":"markdown","6cb46cf9":"markdown","e49a7ad3":"markdown","d097ac2c":"markdown"},"source":{"673c7049":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee32de05":"train = pd.read_csv('\/kaggle\/input\/sanbercode-data-science-0620\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/sanbercode-data-science-0620\/test.csv')\nsample= pd.read_csv('\/kaggle\/input\/sanbercode-data-science-0620\/sampleSubmission.csv')","dfc69249":"dede= train.loc[train['Kelas Pekerja']!='?'].copy()\nList_Pendidikan = list(dede['Pendidikan'].unique())\ndicts={}\ndede.loc[dede['Pendidikan']=='SMA','Kelas Pekerja'].mode()\nfor i in List_Pendidikan:\n    dicts[i]= dede.loc[dede['Pendidikan']==i,'Kelas Pekerja'].mode().values[0]\ndicts","3c812e81":"#Hampir rata\" bekerja jadi Wirausaha dwalaupun sudah disesuaikan dengan kelas pekerja nya kesimpulannya ? pada kelas pekerja diganti jadi kode wirausaha\ntrain['Kelas Pekerja'] = train['Kelas Pekerja'].replace({'?': 'Wiraswasta'})\ntest['Kelas Pekerja'] = test['Kelas Pekerja'].replace({'?': 'Wiraswasta'})","db4f51d5":"dicts_pekerjaan= {}\nfor i in List_Pendidikan:\n    dicts_pekerjaan[i] = dede.loc[dede['Pendidikan']==i,'Pekerjaan'].mode().values[0]\nprint(dicts_pekerjaan)","517de992":"train.loc[train['Kelas Pekerja']=='?'].index.tolist()","65ad6a91":"train['Pekerjaan'].value_counts()","17bd5306":"train","ce57ea1c":"#Pembagian Berat Akhir menjadi 10 Kategori Interval 1-10\nberat_label= [1,2,3,4,5,6,7,8,9,10]\ntest['Berat Akhir']=pd.qcut(test['Berat Akhir'],10, labels=berat_label)\ntrain['Berat Akhir']=pd.qcut(train['Berat Akhir'],10, labels=berat_label)\n\n","ae5f96d2":"#Pemberian Kode Pendidikan\ntrain['Pendidikan']=train['Pendidikan'].replace({'SMA':1,'10th':2,'D3':3,'Sarjana':4,'Master':5,'Pendidikan Tinggi':6,'1st-4th':7,'Sekolah Professional':8,'7th-8th':9,'Doktor':10,'5th-6th':11,'11th':12,'9th':13,'D4':14, '12th':15,'SD':16})\ntest['Pendidikan']=test['Pendidikan'].replace({'SMA':1,'10th':2,'D3':3,'Sarjana':4,'Master':5,'Pendidikan Tinggi':6,'1st-4th':7,'Sekolah Professional':8,'7th-8th':9,'Doktor':10,'5th-6th':11,'11th':12,'9th':13,'D4':14, '12th':15,'SD':16})\ntrain['Gaji']=train['Gaji'].replace({'<=7jt':0,'>7jt':1})","608a119c":"#Melihat hubungan Berbaga Fitur dengan Gaji\nfor col in train:\n    if col=='Gaji':\n        break\n    else:\n        print(train[[col,'Gaji']].groupby([col],as_index=False).mean())\n    ","2df7ff82":"# Pemberian Label Status Perkawinan\ntrain['Status Perkawinan'] = train['Status Perkawinan'].replace({'Menikah':5, 'Belum Pernah Menikah':4,'Cerai':3, 'Berpisah':2, 'Janda':1, 'Menikah LDR':0})\ntest['Status Perkawinan'] = test['Status Perkawinan'].replace({'Menikah':5, 'Belum Pernah Menikah':4,'Cerai':3, 'Berpisah':2, 'Janda':1, 'Menikah LDR':0})\n","1e78cf2f":"#Pemberian label pada kelas pekerja\ntrain['Kelas Pekerja'].unique()\ntrain['Kelas Pekerja']=train['Kelas Pekerja'].replace({'Wiraswasta':1, 'Pemerintah Lokal':2, 'Pekerja Bebas Perusahaan':3,\n       'Pemerintah Negara':4, 'Pekerja Bebas Bukan Perusahan':5,\n       'Pemerintah Provinsi':6, 'Tidak Pernah Bekerja':7, 'Tanpa di Bayar':8})\ntest['Kelas Pekerja']=test['Kelas Pekerja'].replace({'Wiraswasta':1, 'Pemerintah Lokal':2, 'Pekerja Bebas Perusahaan':3,\n       'Pemerintah Negara':4, 'Pekerja Bebas Bukan Perusahan':5,\n       'Pemerintah Provinsi':6, 'Tidak Pernah Bekerja':7, 'Tanpa di Bayar':8})","ed58ba9e":"#Pemberian label pada pekerjaan\ntrain['Pekerjaan']=train['Pekerjaan'].replace({'Servis Lainnya':1, 'Ekesekutif Managerial':2, 'Spesialis':3,\n       'Perbaikan Kerajinan':4, '?':5, 'Sales':6, 'Pembersih':7, 'Pemuka Agama':8,\n       'Petani':9, 'Tech-support':10, 'Mesin Inspeksi':11, 'Supir':12,\n       'Asisten Rumah Tangga':13, 'Penjaga':14, 'Tentara':15})\ntest['Pekerjaan']=test['Pekerjaan'].replace({'Servis Lainnya':1, 'Ekesekutif Managerial':2, 'Spesialis':3,\n       'Perbaikan Kerajinan':4, '?':5, 'Sales':6, 'Pembersih':7, 'Pemuka Agama':8,\n       'Petani':9, 'Tech-support':10, 'Mesin Inspeksi':11, 'Supir':12,\n       'Asisten Rumah Tangga':13, 'Penjaga':14, 'Tentara':15})","b9d522c4":"#Pemberian label pada jenis kelamin\ntrain['Jenis Kelamin'] =train['Jenis Kelamin'].replace({'Perempuan':1,'Laki2':2})\ntest['Jenis Kelamin'] =test['Jenis Kelamin'].replace({'Perempuan':1,'Laki2':2})","461c9c2b":"#Memberikan Label pada keuntungan kapital\na, b  =pd.cut(train['Keuntungan Kapital'],10 ,labels=[1,2,3,4,5,6,7,8,9,10], retbins=True)\ntrain['Keuntungan Kapital']= pd.cut(train['Keuntungan Kapital'], bins=b,labels=[1,2,3,4,5,6,7,8,9,10])\ntest['Keuntungan Kapital']= pd.cut(test['Keuntungan Kapital'], bins=b,labels=[1,2,3,4,5,6,7,8,9,10])\n\n#Memberikan pembagian label pada kerugian capital\nc, d = pd.cut(train['Kerugian Capital'],5 ,labels=[1,2,3,4,5], retbins=True)\ntrain['Kerugian Capital']= pd.cut(train['Kerugian Capital'], bins=d,labels=[1,2,3,4,5])\ntest['Kerugian Capital']= pd.cut(test['Kerugian Capital'], bins=d,labels=[1,2,3,4,5])","d6c0359b":"test.isnull().sum()","a5ea6e57":"import matplotlib.pyplot as plt","b245f906":"plt.boxplot(train['Jam per Minggu'])","08b27648":"#Memberikan label pada jam kerja\ne,f = pd.cut(train['Jam per Minggu'],3, labels=[1,2,3],retbins=True)\ntrain['Jam per Minggu']=pd.cut(train['Jam per Minggu'],bins=f, labels=[1,2,3])\ntest['Jam per Minggu']=pd.cut(test['Jam per Minggu'],bins=f, labels=[1,2,3])","bac1f7a8":"plt.boxplot(train['Umur'])\nprint(train['Umur'].describe())","81fe0b23":"g,h = pd.cut(train['Umur'],3, labels=[1,2,3],retbins=True)\ntrain['Umur']=pd.cut(train['Umur'],bins=h, labels=[1,2,3])\ntest['Umur']=pd.cut(test['Umur'],bins=h, labels=[1,2,3])","487ecc7a":"test.head()","c840b1bb":"train.head()","4f681bb5":"asdasfasfasfas","caaef7a2":"# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import roc_auc_score","75ac3cdb":"X_train = train.drop([\"id\",\"Gaji\"], axis=1)\nY_train = train[\"Gaji\"]\nX_test  = test.drop(\"id\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","368f9a3a":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred_LS = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","c036d839":"#Penilaian ROC AUC SCORE MODEL LOGISTIC REGRESI\nY_train_pred_LS = logreg.predict(X_train)\nroc_auc_score(Y_train,Y_train_pred_LS)","d033120a":"random_forest = RandomForestClassifier(n_estimators=200)\nrandom_forest.fit(X_train, Y_train)\nY_pred_RF = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","5a9ec7ef":"#Penilaian ROC AUC SCORE MODEL RANDOM FOREST CLASSIFIER\nY_train_RF = random_forest.predict(X_train)\nroc_auc_score(Y_train,Y_train_RF)","48e89b80":"knn = KNeighborsClassifier(n_neighbors = 24, weights='uniform')\nknn.fit(X_train, Y_train)\nY_pred_KNN = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","47540512":"#Penilaian ROC AUC SCORE MODEL KNN\nY_train_KNN = random_forest.predict(X_train)\nroc_auc_score(Y_train,Y_train_KNN)","a7f41ec1":"from sklearn.model_selection import GridSearchCV , RandomizedSearchCV\nimport numpy as np\nmodel = KNeighborsClassifier()\nparam_grid ={'n_neighbors':np.arange(5,25), 'weights':['uniform','distance']}\ngscv = GridSearchCV(model, param_grid=param_grid, scoring='accuracy', cv=5)\ngscv.fit(X_train, Y_train)","45570dad":"gscv.best_params_","22fc9ced":"test['Gaji'] = Y_pred_RF\ntest.head()","de9d8a53":"train2 = pd.read_csv('\/kaggle\/input\/sanbercode-data-science-0620\/train.csv')\ntest2 = pd.read_csv('\/kaggle\/input\/sanbercode-data-science-0620\/test.csv')","462fd2fe":"#Kembalikan Nilai ? Pada Tempatnya baik pada Kelas Pekerja maupun Pekerjaan\ntrain['Kelas Pekerja'] = train2['Kelas Pekerja'].copy()\ntest['Kelas Pekerja'] = test2['Kelas Pekerja'].copy()\ntrain['Pekerjaan'] = train2['Pekerjaan'].copy()\ntest['Pekerjaan'] = test2['Pekerjaan'].copy()","63a456cf":"test.head()","fe8036ee":"train.head()","f7fea58b":"gabungan = pd.concat([train,test],ignore_index=False)\n#kemudian berikan kembali label pada kelas pekerja dan pekerjaannya\n#yang kali ini tanda tanyanya dibiarkan aja\ngabungan['Pekerjaan']=gabungan['Pekerjaan'].replace({'Servis Lainnya':1, 'Ekesekutif Managerial':2, 'Spesialis':3, 'Perbaikan Kerajinan':4,  'Sales':5, 'Pembersih':6, 'Pemuka Agama':7, 'Petani':8, 'Tech-support':9, 'Mesin Inspeksi':10, 'Supir':11, 'Asisten Rumah Tangga':12, 'Penjaga':13, 'Tentara':14})\ngabungan['Kelas Pekerja']=gabungan['Kelas Pekerja'].replace({'Wiraswasta':1, 'Pemerintah Lokal':2, 'Pekerja Bebas Perusahaan':3,\n       'Pemerintah Negara':4, 'Pekerja Bebas Bukan Perusahan':5,\n       'Pemerintah Provinsi':6, 'Tidak Pernah Bekerja':7, 'Tanpa di Bayar':8})","95700161":"gabungan.tail()","fee5dcb9":"#Pisahkan data yang punya  ? dengan yang tidak\ndata1 = gabungan.loc[gabungan['Kelas Pekerja']!='?'].copy()\ndata2 = gabungan.loc[gabungan['Kelas Pekerja']=='?'].copy()\n","6e32b1c7":"#42978 rows \u00d7 13 columns\n#2615 rows \u00d7 13 columns","c307034a":"data1['Pekerjaan']","00c8143e":"data1['Pekerjaan'].value_counts()\n#Ternyata ada nilai ? yang hadeh , karna ini data training dan cuma , gampangnya di mode aja :)\ndata1['Pekerjaan']= data1['Pekerjaan'].replace({'?':data1['Pekerjaan'].mode().values[0]})","3cedaf37":"x_data1_train = data1.drop(['id','Kelas Pekerja','Pekerjaan'], axis=1).copy()\ny_data1_train_KP = data1['Kelas Pekerja'].copy().astype('int64')\nx_data2_test = data2.drop(['id','Kelas Pekerja','Pekerjaan'], axis=1).copy()","d066440d":"x_data1_train","7b2ad38b":"x_data2_test ","901b8f10":"#Kita coba prediksi pakai RFC\nmodel_RFC = RandomForestClassifier(n_estimators=100)\nmodel_RFC.fit(x_data1_train, y_data1_train_KP)\ny_data1_test = model_RFC.predict(x_data2_test)\nacc_model_RFC = round(model_RFC.score(x_data1_train, y_data1_train_KP) * 100, 2)\nacc_model_RFC","b566a36b":"data2['Kelas Pekerja'] = y_data1_test\ndata2['Kelas Pekerja'].value_counts()","d7c0a118":"data1['Kelas Pekerja'] = data1['Kelas Pekerja'].astype('int64')","bec41749":"data1['Kelas Pekerja'] ","d8e29906":"#Sekarang kita akan lengkapi data pekerjaan HOHO\nx_data1_train_P = data1.drop(['id','Pekerjaan'], axis=1).copy()\ny_data1_train_P = data1['Pekerjaan'].copy()\nx_data2_test_P = data2.drop(['id','Pekerjaan'], axis=1).copy()","f048f406":"x_data2_test_P","36cf4eb8":"y_data1_train_P.value_counts()","a0363dc7":"#Prediksi Pekerjaan\nmodel_RFC = RandomForestClassifier(n_estimators=100)\nmodel_RFC.fit(x_data1_train_P, y_data1_train_P)\ny_data2_test = model_RFC.predict(x_data2_test_P)\nacc_model_RFC = round(model_RFC.score(x_data1_train_P, y_data1_train_P) * 100, 2)\nacc_model_RFC","ab32683b":"y_data2_test.shape","a91c80cf":"data2['Pekerjaan'] = y_data2_test\ndata2['Pekerjaan'].value_counts()","32290285":"data1['Kelas Pekerja']","dbf8e3ea":"data1","c83bb19b":"data","09b652ad":"#Menyatukan kembali kedua data\nData_lengkap= pd.concat([data1, data2],ignore_index=True)\nData_lengkap.info()","58102211":"test.head()","66d81389":"#45593 rows \u00d7 12 columns\nData_lengkap  =Data_lengkap.sort_values(by=['id']).set_index('id')","5dbae169":"#Split data kembali menjadi Train dan Test final\nTrain_final = Data_lengkap.iloc[:35994]\nTest_final = Data_lengkap.loc[35994:].drop('Gaji', axis=1)","47d94f82":"Train_final","836b555f":"Test_final","71a74559":"#Prediksi kembali gajinya\nx_Train_final = Train_final.drop('Gaji',axis=1).copy()\ny_Train_final = Train_final['Gaji'].copy()\nx_Test_final = Test_final.copy()","92b72941":"x_Train_final","90190206":"#Random Forest\nRFC = RandomForestClassifier(n_estimators=250)\nRFC.fit(x_Train_final, y_Train_final)\ny_Test_final = RFC.predict(x_Test_final)\nacc_RFC = round(RFC.score(x_Train_final, y_Train_final) * 100, 2)\nacc_RFC","7a18e894":"y_Train_final_Coba= RFC.predict(x_Train_final)\nroc_auc_score(y_Train_final,y_Train_final_Coba)","68d59d76":"#Model KNN\nknn = KNeighborsClassifier()\nparam_grid ={'n_neighbors':np.arange(5,50), 'weights':['uniform']}\ngscv = GridSearchCV(knn, param_grid=param_grid, scoring='accuracy', cv=5)\ngscv.fit(x_Train_final, y_Train_final)","c6936b2f":"gscv.best_params_","ba0e8946":"knn = KNeighborsClassifier(n_neighbors = 15, weights='uniform')\nknn.fit(x_Train_final, y_Train_final)\ny_Test_final_knn = knn.predict(x_Test_final)\nacc_knn = round(knn.score(x_Train_final, y_Train_final) * 100, 2)\nacc_knn","7bad197c":"#RFC Paling Tinggi\nsubmission = pd.DataFrame({\"id\": test[\"id\"],\"Gaji\": y_Test_final}) \nsubmission.to_csv('erickwang18_submission_5.csv',index=False)","4e30cd19":"s = pd.read_csv('.\/erickwang18_submission_1.csv')\ns","6ed0e833":"a = submission['Gaji']\nb = s['Gaji']\na.corr(b)","2ee24a6c":"GRID CV","0a67e8df":"Menggunakan Logistic Regression","120ee81e":"KNN","d4fd6eb2":"RANDOM FOREST","7483b21a":"9599 rows \u00d7 13 columns\n35994 rows \u00d7 13 columns","ee9bc696":"\n    id - id unique yang dimiliki setiap sample\n    Umur - umur yang dimiliki setiap sample\n    Kelas Pekerja - kelompok kelas pekerjaan masing-masing sample\n    Berat Akhir - berisi nilai akumulasi berdasarkan populasi, ras, dan gender dengan umur 16+ suatu wilayah, sample yang diambil dari wilayah yang memiliki karakteristik demografis yang sama akan memiliki nilai berat akhir yang sama\n    Pendidikan - tingkat pendidikan terakhir masing-masing sample\n    Jmlh Tahun Pendidikan - berisi jumlah tahun masing-masing sample mengenyam pendidikan\n    Status Perkawinan - status perkawinan masing-masing sample\n    Pekerjaan - pekerjaan saat ini masing-masing sample\n    Jenis Kelamin - jenis kelamin masing-masing sample\n    Keuntungan Kapital - keuntungan yang didapat jika sample menjual semua aset miliknya\n    Kerugian Kapital - kerugian yang didapat jika sample menjual semua aset miliknya\n    Jam per Minggu - jam kerja masing-masing sample setiap minggunya\n    Gaji - nilai gaji masing-masing sample apakah kurang dari sama dengan 7jt atau lebih dari 7jt\n","6cb46cf9":"# MODEL TESTING> ","e49a7ad3":"\ntrain['Pekerjaan']=train['Pekerjaan'].replace({'Servis Lainnya':1, 'Ekesekutif Managerial':2, 'Spesialis':3,\n       'Perbaikan Kerajinan':4, '?':5, 'Sales':6, 'Pembersih':7, 'Pemuka Agama':8,\n       'Petani':9, 'Tech-support':10, 'Mesin Inspeksi':11, 'Supir':12,\n       'Asisten Rumah Tangga':13, 'Penjaga':14, 'Tentara':15})","d097ac2c":"1. Sekarang setelah mendapatkan Perkiraan Gaji Full\n2. Satukan Semua DATA\n3. Saya akan memprediksi kembali Kelas pekerja dan Pekerjaan melalui data yang hasil olah ML yang pertama"}}