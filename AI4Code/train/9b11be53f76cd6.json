{"cell_type":{"503373ed":"code","7076ec02":"code","2209985f":"code","13738475":"code","5035fbab":"code","7bea521f":"code","430ca267":"code","9668546d":"code","0a8a0a34":"code","257f3cdf":"code","a55435ef":"code","0e19ce85":"code","43658ee6":"code","0acec71d":"code","4118e288":"code","ec97696c":"code","d28bc68d":"code","d589ded9":"code","323dfff8":"code","08e99caa":"code","b7370991":"code","53f4343b":"code","716caeda":"code","55ee94d8":"code","e9eda484":"code","4f314d61":"code","bc04774e":"markdown","6a8e3b9e":"markdown","a6e09baa":"markdown","5d7f4e88":"markdown","a918d693":"markdown","203c4db2":"markdown"},"source":{"503373ed":"#Wrangling\nimport pandas as pd\nimport numpy as np\n\n#Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#training and testing\nimport sklearn\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","7076ec02":"#import dataset\ntrain_raw = pd.read_csv('..\/input\/train.csv')\ntest_raw = pd.read_csv('..\/input\/test.csv')","2209985f":"#check column names\ntrain_raw.columns.values","13738475":"#dataset dimension\ntrain_raw.shape","5035fbab":"#datasets information\nprint(train_raw.info())\nprint('_'*40)\nprint(test_raw.info())","7bea521f":"#check Missing Values\nprint(train_raw.isnull().sum())\nprint('_'*40)\nprint(test_raw.isnull().sum())","430ca267":"#Fill in missing values expect cabin column \ntrain_raw['Age'] = train_raw.Age.fillna(train_raw.Age.mean())\ntest_raw['Age'] = test_raw.Age.fillna(test_raw.Age.mean())\ntrain_raw['Embarked'] = train_raw.Embarked.fillna(train_raw.Embarked.mode()[0])\ntest_raw['Embarked'] = test_raw.Embarked.fillna(test_raw.Embarked.mode()[0])\ntest_raw['Fare'] = test_raw.Fare.fillna(test_raw.Fare.mean())\nprint(train_raw.isnull().sum())\nprint('_'*40)\nprint(test_raw.isnull().sum())","9668546d":"#Check outliers for continuous variables \nplt.figure(figsize = (15,5))\nplt.subplot(2,1,1)\nsns.boxplot(x = 'Age', data = train_raw)\nplt.subplot(2,1,2)\nsns.boxplot(x = 'Fare', data = train_raw)","0a8a0a34":"#Age Analysis\nplt.figure(figsize = (15,10))\nplt.subplot(2,1,1)\nax1 = sns.distplot(train_raw.Age)\nax1.set(xlabel = \"Age\", ylabel = \"Percentage\")\nplt.subplot(2,1,2)\nax2 = sns.boxplot(train_raw.Age)\nfor i in np.arange(0,1.25,0.25):\n    print(\"{0:.0f}%:\".format(i * 100),train_raw['Age'].quantile(i))","257f3cdf":"#Fare Analysis\nplt.figure(figsize = (15,10))\nplt.subplot(2,1,1)\nax1 = sns.distplot(train_raw.Fare)\nax1.set(xlabel = \"Fare\", ylabel = \"Percentage\")\nplt.subplot(2,1,2)\nax2 = sns.boxplot(train_raw.Fare)\nfor i in np.arange(0,1.25,0.25):\n    print(\"{0:.0f}%:\".format(i * 100), train_raw['Fare'].quantile(i))","a55435ef":"train = train_raw.copy()","0e19ce85":"#Total Survival Rate\ntrain.Survived.mean()","43658ee6":"#Sex classes and survival rate for each class\nprint(train.groupby('Sex').size())\nprint('_'*40)\nprint(train.groupby('Sex').mean()['Survived'].sort_values(ascending = False))","0acec71d":"#Partition Age\nage_partition_size = pd.DataFrame()\nage_partition = pd.DataFrame(train[['Survived','Age']])\nage_partition['Partition'] = pd.cut(train['Age'], [0,10,20,30,40,50,60,70,80])\n\nage_partition_size['Survived'] = age_partition.groupby('Partition').mean()['Survived']\nage_partition_size['Size'] = age_partition.groupby('Partition').size()\nage_partition_size","4118e288":"#Embarked classes and survival rate for each class\nprint(train.groupby('Embarked').size())\nprint('_'*40)\nprint(train.groupby('Embarked').mean()['Survived'].sort_values(ascending = False))","ec97696c":"#SibSp classes and survival rate for each class\nprint(train.groupby('SibSp').size())\nprint('_'*40)\nprint(train.groupby('SibSp').mean()['Survived'].sort_values(ascending = False))","d28bc68d":"#Parch classes and survival rate for each class\nprint(train.groupby('Parch').size())\nprint('_'*40)\nprint(train.groupby('Parch').mean()['Survived'].sort_values(ascending = False))","d589ded9":"#correlation\nsns.pairplot(train)","323dfff8":"#Drop columns\ntrain_Predict = train.copy()\nlabel = train_Predict.Survived\ntrain_Predict = train_Predict.drop(['PassengerId','Survived','Name','Ticket','Cabin'], axis = 1)","08e99caa":"#One hot encoding \ndef sex_binary(sex):\n    if sex == \"male\": \n        return 0\n    else:\n        return 1\n    \ndef embarked_class(embarked):\n    if embarked == 'S':\n        return 0\n    elif embarked == 'C':\n        return 1\n    elif embarked == 'Q':\n        return 2","b7370991":"train_Predict['Age'] = age_partition['Partition']\ntrain_Predict['Sex'] = train['Sex'].apply(sex_binary)\ntrain_Predict['Embarked'] = train['Embarked'].apply(embarked_class)\ntrain_Predict['Age'] = age_partition['Partition'].apply(lambda x: x.mid)","53f4343b":"#training set \ntrain_Predict.tail()","716caeda":"#Decision Tree Classifier\nclf = DecisionTreeClassifier()\nx_train, y_train, x_test, y_test = train_test_split(train_Predict, label, train_size = 0.8, random_state = 0)\nclf.fit(x_train, x_test)","55ee94d8":"#Moment of Truth\ny_pred = clf.predict(y_train)\naccuracy_score(y_test, y_pred)","e9eda484":"#Random Forest Classifier\nclf = RandomForestClassifier()\nx_train, y_train, x_test, y_test = train_test_split(train_Predict, label, train_size = 0.8, random_state = 0)\nclf.fit(x_train, x_test)","4f314d61":"#Moment of Truth\ny_pred = clf.predict(y_train)\naccuracy_score(y_test, y_pred)","bc04774e":"**First we check datasets dimension and information**","6a8e3b9e":"**Analysing Correlations**","a6e09baa":"**Classifing and Testing using ML models **","5d7f4e88":"**Survival Rate Analysis**","a918d693":"**Clean Datasets**\n1. Fill in Missing Values\n2. Remove Outliers","203c4db2":"Now we analyse distributions of data  "}}