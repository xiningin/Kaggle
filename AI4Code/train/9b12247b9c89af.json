{"cell_type":{"c1cb9775":"code","b9e1e501":"code","65e70179":"code","95ceec0b":"code","a69a361a":"code","d9b8136f":"code","b938088c":"code","b3003074":"code","386742e1":"code","e3cd02e2":"code","3bc1ded5":"code","45a3dcc0":"code","275326eb":"code","2a63b8e7":"code","dd999d8a":"code","34c5acff":"code","00a83003":"code","13bcb664":"code","b39bb4ad":"code","6e6e2bb0":"code","f3c52798":"code","fd89d590":"code","855dfa74":"code","719c3961":"code","0860ccf4":"code","83850271":"code","948a7b23":"code","98218cf5":"code","91e3db32":"code","d1322d15":"code","4b2c3d40":"code","79695afa":"code","b62785d8":"code","76ba487b":"code","bc8decae":"code","aaf499e1":"code","cdd9b2a0":"code","81bd853c":"code","0caa9416":"code","99e05a09":"code","c3f0564d":"code","61ded2da":"code","277c6186":"code","8d4431a8":"code","eff2297d":"code","608cb48f":"code","c0490891":"code","1302e1e8":"code","0d8f30f8":"code","f0594cd0":"code","46a20e29":"code","3ad1c4f6":"code","08d46b82":"code","6d0b6dc2":"code","42e77891":"code","947d3a77":"code","31635ff2":"code","330142c8":"code","2624af4c":"code","a8f90ddf":"code","1d1f338d":"code","30a7d314":"code","7bd76839":"code","ce34a545":"code","d12c8bce":"code","e5970d4f":"code","185fcc2a":"code","a0da1fa5":"code","715d3c16":"code","a8e86645":"code","ed4308fb":"code","64accf01":"code","c7ae844c":"code","23b031a0":"code","e57d63fb":"code","52a0953d":"code","746dda26":"code","71b11f48":"code","bdd27faa":"code","97f83346":"code","75085b85":"code","f83f0ef0":"code","1393c11e":"code","eaf2900c":"code","70c02358":"code","14a2c2dd":"code","86da66d0":"code","d349265d":"code","ac266161":"code","dc1ac4c5":"code","3e8bf155":"code","4a4f5f6e":"code","a2d56879":"code","4b01700f":"markdown","422afaea":"markdown","3dc5d8ad":"markdown","3c0629c5":"markdown","d083cfb2":"markdown","74c31c3d":"markdown","3ecd8f60":"markdown","299d0ee9":"markdown","925dc64f":"markdown","80325d00":"markdown","ec30283e":"markdown","cbf6f027":"markdown","5d3848e0":"markdown","470049f1":"markdown","8bf04d4a":"markdown","87cbe54d":"markdown","c924814d":"markdown","0c3bedfc":"markdown","f20fba76":"markdown","55441be2":"markdown","79a9da4a":"markdown","9d3a1cea":"markdown"},"source":{"c1cb9775":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b9e1e501":"bc = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","65e70179":"bc.info()","95ceec0b":"bc.describe()","a69a361a":"bc.head()","d9b8136f":"bc.drop(['id', 'Unnamed: 32'], axis=1, inplace=True)","b938088c":"bc.isnull().sum().sum()","b3003074":"bc.isnull().any(axis=1).sum()","386742e1":"bc['diagnosis'].value_counts()","e3cd02e2":"sns.countplot(bc['diagnosis'])","3bc1ded5":"bc.groupby('diagnosis').mean()","45a3dcc0":"plt.figure(figsize=(15,5))\nplt.plot((bc.groupby('diagnosis').mean().loc['M'])\/((bc.groupby('diagnosis').mean().loc['B'])))\nplt.title('Ratio of Malignant to Benign values')\nplt.xticks(rotation=90)\nplt.show()","275326eb":"X = bc.iloc[:, 1:]\ny = bc.iloc[:, :1]","2a63b8e7":"X1 = X.iloc[:, :15]","dd999d8a":"X1 = (X1-X1.mean())\/X1.std()","34c5acff":"data = pd.concat([y, X1], axis=1)","00a83003":"data = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')","13bcb664":"plt.figure(figsize=(20,7))\nsns.swarmplot(x='features', y='value', hue='diagnosis', data=data)\nplt.xticks(rotation=45)\nplt.show()","b39bb4ad":"X2 = X.iloc[:, 15:]","6e6e2bb0":"X2 = (X2-X2.mean())\/X2.std()","f3c52798":"data = pd.concat([y, X2], axis=1)","fd89d590":"data = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')","855dfa74":"plt.figure(figsize=(20,7))\nsns.swarmplot(x='features', y='value', hue='diagnosis', data=data)\nplt.xticks(rotation=45)\nplt.show()","719c3961":"from sklearn.preprocessing import OneHotEncoder, MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split","0860ccf4":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_curve, auc, precision_recall_curve","83850271":"from sklearn.ensemble import RandomForestClassifier","948a7b23":"def processing(df):\n    X = df.iloc[ :, 1:]\n    y = df['diagnosis']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    scale = MinMaxScaler()\n    X_train = scale.fit_transform(X_train)\n    X_test = scale.transform(X_test)\n    X_train = pd.DataFrame(X_train)\n    X_test = pd.DataFrame(X_test)\n    return X_train, X_test, y_train, y_test ","98218cf5":"def random_forest(df, i):\n    X = df.iloc[ :, 1:]\n    y = df['diagnosis']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=i)\n    scale = MinMaxScaler()\n    X_train = scale.fit_transform(X_train)\n    X_test = scale.transform(X_test)\n    rfc = RandomForestClassifier(n_estimators=100)\n    rfc.fit(X_train, y_train)\n    return rfc, X_test, y_test","91e3db32":"def scores(f, df, n):\n    \"\"\"\n        f is machine learning algorithm funtion\n        df is dataframe to given to ml funtion\n        n is number of random states used for splitting the dataframe\n        this function returns array of scores for random states 0 to n.\n    \"\"\"\n    scores = []\n    for i in range(n):\n        clf, X_test, y_test = f(df, i)\n        scores.append(clf.score(X_test, y_test))\n    return np.array(scores)","d1322d15":"score_list = scores(random_forest, bc, 100)","4b2c3d40":"plt.figure(figsize=(15,5))\nplt.plot(score_list)\nplt.xlabel('random state')\nplt.ylabel('mean accuracy score')","79695afa":"score_list.mean()","b62785d8":"rfc, X_test, y_test = random_forest(bc, 109)","76ba487b":"predictions = rfc.predict(X_test)","bc8decae":"accuracy_score(y_test, predictions)","aaf499e1":"print(classification_report(y_test, predictions))","cdd9b2a0":"fig, axes = plt.subplots(1,1, figsize=(15,5))\nsns.heatmap(confusion_matrix(y_test, predictions), annot=True, ax=axes)","81bd853c":"pred_prob = rfc.predict_proba(X_test)","0caa9416":"fpr, tpr, thresholds = roc_curve(y_test, pred_prob[:, 1], pos_label='M')","99e05a09":"precision, recall, thresholds = precision_recall_curve(y_test, pred_prob[:, 1], pos_label='M')","c3f0564d":"roc_score = auc(fpr, tpr)","61ded2da":"plt.plot(fpr, tpr, label='(area = %0.2f)' % roc_score)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([-0.05, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")","277c6186":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,5), gridspec_kw={'width_ratios': [1, 2]})\nsns.heatmap(pred_prob[np.argsort(pred_prob[:, 0])], ax=ax1)\nax2.plot(pred_prob[np.argsort(pred_prob[:, 0])])\nax2.set_xlabel('test case number')\nax2.set_ylabel('probability')\nax2.legend(['B', 'M'])","8d4431a8":"pred_prob[(pred_prob[:, 0] < .8) & (pred_prob[:, 1] < .8)]","eff2297d":"percentage = pred_prob[(pred_prob[:, 0] < .8) & (pred_prob[:, 1] < .8)].shape[0]\/pred_prob.shape[0]","608cb48f":"f'{np.round(percentage*100, 2)} percentage of the predictions have less than 80 % of accuracy'","c0490891":"plt.figure(figsize=(15,10))\nsns.heatmap(bc.corr(), cmap='Spectral', annot=True, fmt='.1f')","1302e1e8":"lst = ['diagnosis', 'texture_mean', 'area_mean', 'smoothness_mean', 'compactness_mean', 'symmetry_mean', 'fractal_dimension_mean','texture_se',\n       'area_se', 'smoothness_se','compactness_se', 'symmetry_se','fractal_dimension_se', 'texture_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'symmetry_worst', 'fractal_dimension_worst']","0d8f30f8":"bc_1 = bc.loc[:, lst]","f0594cd0":"plt.figure(figsize=(15,10))\nsns.heatmap(bc_1.corr(), cmap='Spectral', annot=True)","46a20e29":"data = bc_1.iloc[:, 1:]","3ad1c4f6":"data = (data-data.mean())\/data.std()","08d46b82":"data = pd.concat([bc['diagnosis'], data], axis=1)","6d0b6dc2":"data = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')","42e77891":"plt.figure(figsize=(20,7))\nsns.violinplot(x='features', y='value', hue='diagnosis', data=data, split=True, inner='quart')\nplt.xticks(rotation=45)\nplt.show()","947d3a77":"plt.figure(figsize=(20,7))\nsns.swarmplot(x='features', y='value', hue='diagnosis', data=data)\nplt.xticks(rotation=45)\nplt.show()","31635ff2":"score_list_1 = scores(random_forest, bc_1, 100)","330142c8":"score_1 = np.round(score_list_1.mean(), 2)","2624af4c":"score_1","a8f90ddf":"rfc, X_test, y_test = random_forest(bc_1, 34)","1d1f338d":"y = bc['diagnosis']","30a7d314":"rfc.score(X_test, y_test)","7bd76839":"sns.heatmap(confusion_matrix(y_test, rfc.predict(X_test)), annot=True)","ce34a545":"feature_imp = pd.DataFrame(rfc.feature_importances_, bc_1.iloc[:, 1:].columns, columns=['importance']).sort_values(by='importance', ascending=False)","d12c8bce":"feature_imp.head()","e5970d4f":"rfc_df = pd.concat([bc['diagnosis'], bc_1[feature_imp.head().index]], axis=1)","185fcc2a":"score_list_fs_1 = scores(random_forest, rfc_df , 100)","a0da1fa5":"score_fs_1 = np.round(score_list_fs_1.mean(), 2)","715d3c16":"score_fs_1","a8e86645":"F\"With five important features we can get the score of {score_fs_1} compared to {score_1} with 18 features.\"","ed4308fb":"rfc, X_test, y_test = random_forest(rfc_df, 34)","64accf01":"sns.heatmap(confusion_matrix(y_test, rfc.predict(X_test)), annot=True)","c7ae844c":"from sklearn.feature_selection import SelectKBest, chi2, RFE, RFECV","23b031a0":"X_train, X_test, y_train, y_test = train_test_split(bc.iloc[:, 1:], bc['diagnosis'], test_size=0.2, random_state=23)","e57d63fb":"min_ = X_train.min()\nmax_ = X_train.max()","52a0953d":"X_train = (X_train - min_)\/(max_ - min_)","746dda26":"X_test = (X_test - min_)\/(max_ - min_)","71b11f48":"best_features = SelectKBest(chi2, k=5).fit(X_train, y_train)","bdd27faa":"X_train.columns[best_features.get_support(indices=True)]","97f83346":"score_list = scores(random_forest, pd.concat([bc['diagnosis'], bc[X_train.columns[best_features.get_support(indices=True)]]], axis=1), 100)","75085b85":"score_list.mean()","f83f0ef0":"f'Score with features selected by chi2 {np.round(score_list.mean(), 2)}'","1393c11e":"rfecv = RFECV(RandomForestClassifier(), min_features_to_select=5)","eaf2900c":"rfecv.fit(X_train, y_train)","70c02358":"X_train.columns[rfecv.support_]","14a2c2dd":"rfecv.n_features_","86da66d0":"from sklearn.decomposition import PCA","d349265d":"X_train, X_test, y_train, y_test = train_test_split(bc.iloc[:, 1:], bc['diagnosis'], test_size=0.2, random_state=101)","ac266161":"X_train = (X_train - X_train.min())\/(X_train.max() - X_train.min())","dc1ac4c5":"pca = PCA()","3e8bf155":"pca.fit(X_train)","4a4f5f6e":"pca.explained_variance_ratio_","a2d56879":"plt.figure(figsize=(15,5))\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.xticks(np.arange(0, 31))\nplt.grid()\nplt.xlabel('n_components')\nplt.ylabel('cumulative explained_variance_ratio_')","4b01700f":"Random forest classifier for reduced number of features.","422afaea":"Plotting Swarm plots for features","3dc5d8ad":"Heat map of correlations with reduced number of features.","3c0629c5":"Average score for Random Forest Classifier is 0.96","d083cfb2":"## Feature selection using random forest","74c31c3d":"# Random Forest Classifier","3ecd8f60":"## Feature Selection using chi2","299d0ee9":"Plotting probabilities for each case.","925dc64f":"This notebook corresponds Breast Cancer Wisconsin (Diagnostic) Data Set.\nHere I analyze and visualize the data and Use Random Forest Classifier to predict diagnosis.\nAlso try various feature selection methods.","80325d00":"predictions with less than 80% probability","ec30283e":"1. 'radius_mean', 'perimeter_mean', 'area_mean' are correlated with each other with Correlation coefficient of 1.0\n2. 'radius_worst', 'perimeter_worst', 'area_worst' are correlated with each other with Correlation coefficient of 1.0\n3. 'radius_se', 'perimeter_se', 'area_se' are correlated with each other with Correlation coefficient of 0.9 or more\n4. 'compactness_mean', 'concavity_mean', 'concave points_mean' are correlated with each other with Correlation coefficient of 0.8 or more\n5. 'compactness_worst', 'concavity_worst', 'concave points_worst' are correlated with each other with Correlation coefficient of 0.8 or more\n6. 'compactness_se', 'concavity_se', 'concave points_se' are correlated with each other with Correlation coefficient of 0.7 or more","cbf6f027":"We can drop the empty 'Unnamed: 32' column and 'id' column as they are not relevant to diagnosis.","5d3848e0":"Check for any null values","470049f1":"Let us select only one feature among three correlated features.","8bf04d4a":"All values are higher for Malignant diagnosis than Benign diagnosis.","87cbe54d":"# Feature Selection","c924814d":"Since there are 30 features let us look into the correlations to see if we can reduce the number of features.","0c3bedfc":"# Data Visualization","f20fba76":"6 components can be used to explain more than 90% variance.","55441be2":"Violin plot and Swarm plot for visualizing features.\nFeatures are also standardized","79a9da4a":"## Feature Extraction by Principal Component Analysis","9d3a1cea":"## Feature Selection using RFECV"}}