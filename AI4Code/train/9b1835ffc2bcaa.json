{"cell_type":{"a8c57a4a":"code","4e5a0972":"code","0a150333":"code","acf6f2bf":"code","d229a49e":"code","f680c0d2":"code","fb74ee83":"code","7c8c8095":"code","92b5d1cc":"code","d5c52a1c":"code","3718e1f6":"code","9d550881":"code","cc7fef74":"code","b996a5a7":"code","291dfd0c":"code","3f765e4d":"code","6602c5ec":"code","0a15a408":"code","8908fa3b":"code","973eabeb":"code","4f02b5ed":"code","538e9f3b":"code","548cceb9":"code","34738593":"code","efd640d9":"code","5ba29c62":"code","a3ca1c62":"code","70775abf":"code","98bae569":"code","d1baea77":"code","b5b6b419":"code","62990112":"code","494967a1":"code","259118c3":"code","3dde2476":"code","ae5467ae":"code","3dc45994":"code","6bdfaa5e":"code","c1ea1208":"code","91800a87":"code","47948ecd":"code","921ef4d1":"markdown","b843c97c":"markdown","f4d8a86e":"markdown","7be2e77b":"markdown","64665050":"markdown","accb8b70":"markdown","ce35a0f0":"markdown","a4e30826":"markdown","3379ec2b":"markdown","764c3e12":"markdown","911fa5c5":"markdown","7a70f7fe":"markdown","cc8f7881":"markdown","1655bc61":"markdown","d4ae67b1":"markdown","dbb2085e":"markdown","717e3a99":"markdown","4f7c24d8":"markdown"},"source":{"a8c57a4a":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\n\nimport math\nimport gc\nimport copy\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom lightgbm import LGBMRegressor","4e5a0972":"DATA_PATH = '..\/input'\nSUBMISSIONS_PATH = '.\/'\n# use atomic numbers to recode atomic names\nATOMIC_NUMBERS = {\n    'H': 1,\n    'C': 6,\n    'N': 7,\n    'O': 8,\n    'F': 9\n}","0a150333":"pd.set_option('display.max_colwidth', -1)\npd.set_option('display.max_rows', 120)\npd.set_option('display.max_columns', 120)","acf6f2bf":"train_dtypes = {\n    'molecule_name': 'category',\n    'atom_index_0': 'int8',\n    'atom_index_1': 'int8',\n    'type': 'category',\n    'scalar_coupling_constant': 'float32'\n}\ntrain_csv = pd.read_csv(f'{DATA_PATH}\/train.csv', index_col='id', dtype=train_dtypes)\ntrain_csv['molecule_index'] = train_csv.molecule_name.str.replace('dsgdb9nsd_', '').astype('int32')\ntrain_csv = train_csv[['molecule_index', 'atom_index_0', 'atom_index_1', 'type', 'scalar_coupling_constant']]\ntrain_csv.head(10)","d229a49e":"print('Shape: ', train_csv.shape)\nprint('Total: ', train_csv.memory_usage().sum())\ntrain_csv.memory_usage()","f680c0d2":"submission_csv = pd.read_csv(f'{DATA_PATH}\/sample_submission.csv', index_col='id')","fb74ee83":"test_csv = pd.read_csv(f'{DATA_PATH}\/test.csv', index_col='id', dtype=train_dtypes)\ntest_csv['molecule_index'] = test_csv['molecule_name'].str.replace('dsgdb9nsd_', '').astype('int32')\ntest_csv = test_csv[['molecule_index', 'atom_index_0', 'atom_index_1', 'type']]\ntest_csv.head(10)","7c8c8095":"structures_dtypes = {\n    'molecule_name': 'category',\n    'atom_index': 'int8',\n    'atom': 'category',\n    'x': 'float32',\n    'y': 'float32',\n    'z': 'float32'\n}\nstructures_csv = pd.read_csv(f'{DATA_PATH}\/structures.csv', dtype=structures_dtypes)\nstructures_csv['molecule_index'] = structures_csv.molecule_name.str.replace('dsgdb9nsd_', '').astype('int32')\nstructures_csv = structures_csv[['molecule_index', 'atom_index', 'atom', 'x', 'y', 'z']]\nstructures_csv['atom'] = structures_csv['atom'].replace(ATOMIC_NUMBERS).astype('int8')\nstructures_csv.head(10)","92b5d1cc":"print('Shape: ', structures_csv.shape)\nprint('Total: ', structures_csv.memory_usage().sum())\nstructures_csv.memory_usage()","d5c52a1c":"def build_type_dataframes(base, structures, coupling_type):\n    base = base[base['type'] == coupling_type].drop('type', axis=1).copy()\n    base = base.reset_index()\n    base['id'] = base['id'].astype('int32')\n    structures = structures[structures['molecule_index'].isin(base['molecule_index'])]\n    return base, structures","3718e1f6":"def add_coordinates(base, structures, index):\n    df = pd.merge(base, structures, how='inner',\n                  left_on=['molecule_index', f'atom_index_{index}'],\n                  right_on=['molecule_index', 'atom_index']).drop(['atom_index'], axis=1)\n    df = df.rename(columns={\n        'atom': f'atom_{index}',\n        'x': f'x_{index}',\n        'y': f'y_{index}',\n        'z': f'z_{index}'\n    })\n    return df","9d550881":"def add_atoms(base, atoms):\n    df = pd.merge(base, atoms, how='inner',\n                  on=['molecule_index', 'atom_index_0', 'atom_index_1'])\n    return df","cc7fef74":"def merge_all_atoms(base, structures):\n    df = pd.merge(base, structures, how='left',\n                  left_on=['molecule_index'],\n                  right_on=['molecule_index'])\n    df = df[(df.atom_index_0 != df.atom_index) & (df.atom_index_1 != df.atom_index)]\n    return df","b996a5a7":"def add_center(df):\n    df['x_c'] = ((df['x_1'] + df['x_0']) * np.float32(0.5))\n    df['y_c'] = ((df['y_1'] + df['y_0']) * np.float32(0.5))\n    df['z_c'] = ((df['z_1'] + df['z_0']) * np.float32(0.5))\n\ndef add_distance_to_center(df):\n    df['d_c'] = ((\n        (df['x_c'] - df['x'])**np.float32(2) +\n        (df['y_c'] - df['y'])**np.float32(2) + \n        (df['z_c'] - df['z'])**np.float32(2)\n    )**np.float32(0.5))\n\ndef add_distance_between(df, suffix1, suffix2):\n    df[f'd_{suffix1}_{suffix2}'] = ((\n        (df[f'x_{suffix1}'] - df[f'x_{suffix2}'])**np.float32(2) +\n        (df[f'y_{suffix1}'] - df[f'y_{suffix2}'])**np.float32(2) + \n        (df[f'z_{suffix1}'] - df[f'z_{suffix2}'])**np.float32(2)\n    )**np.float32(0.5))","291dfd0c":"def add_distances(df):\n    n_atoms = 1 + max([int(c.split('_')[1]) for c in df.columns if c.startswith('x_')])\n    \n    for i in range(1, n_atoms):\n        for vi in range(min(4, i)):\n            add_distance_between(df, i, vi)","3f765e4d":"def add_n_atoms(base, structures):\n    dfs = structures['molecule_index'].value_counts().rename('n_atoms').to_frame()\n    return pd.merge(base, dfs, left_on='molecule_index', right_index=True)","6602c5ec":"def build_couple_dataframe(some_csv, structures_csv, coupling_type, n_atoms=10):\n    base, structures = build_type_dataframes(some_csv, structures_csv, coupling_type)\n    base = add_coordinates(base, structures, 0)\n    base = add_coordinates(base, structures, 1)\n    \n    base = base.drop(['atom_0', 'atom_1'], axis=1)\n    atoms = base.drop('id', axis=1).copy()\n    if 'scalar_coupling_constant' in some_csv:\n        atoms = atoms.drop(['scalar_coupling_constant'], axis=1)\n        \n    add_center(atoms)\n    atoms = atoms.drop(['x_0', 'y_0', 'z_0', 'x_1', 'y_1', 'z_1'], axis=1)\n\n    atoms = merge_all_atoms(atoms, structures)\n    \n    add_distance_to_center(atoms)\n    \n    atoms = atoms.drop(['x_c', 'y_c', 'z_c', 'atom_index'], axis=1)\n    atoms.sort_values(['molecule_index', 'atom_index_0', 'atom_index_1', 'd_c'], inplace=True)\n    atom_groups = atoms.groupby(['molecule_index', 'atom_index_0', 'atom_index_1'])\n    atoms['num'] = atom_groups.cumcount() + 2\n    atoms = atoms.drop(['d_c'], axis=1)\n    atoms = atoms[atoms['num'] < n_atoms]\n\n    atoms = atoms.set_index(['molecule_index', 'atom_index_0', 'atom_index_1', 'num']).unstack()\n    atoms.columns = [f'{col[0]}_{col[1]}' for col in atoms.columns]\n    atoms = atoms.reset_index()\n    \n    # downcast back to int8\n    for col in atoms.columns:\n        if col.startswith('atom_'):\n            atoms[col] = atoms[col].fillna(0).astype('int8')\n            \n    atoms['molecule_index'] = atoms['molecule_index'].astype('int32')\n    \n    full = add_atoms(base, atoms)\n    add_distances(full)\n    \n    full.sort_values('id', inplace=True)\n    \n    return full","0a15a408":"def take_n_atoms(df, n_atoms, four_start=4):\n    labels = []\n    for i in range(2, n_atoms):\n        label = f'atom_{i}'\n        labels.append(label)\n\n    for i in range(n_atoms):\n        num = min(i, 4) if i < four_start else 4\n        for j in range(num):\n            labels.append(f'd_{i}_{j}')\n    if 'scalar_coupling_constant' in df:\n        labels.append('scalar_coupling_constant')\n    return df[labels]","8908fa3b":"%%time\nfull = build_couple_dataframe(train_csv, structures_csv, '1JHN', n_atoms=10)\nprint(full.shape)","973eabeb":"full.columns","4f02b5ed":"df = take_n_atoms(full, 7)\n# LightGBM performs better with 0-s then with NaN-s\ndf = df.fillna(0)\ndf.columns","538e9f3b":"X_data = df.drop(['scalar_coupling_constant'], axis=1).values.astype('float32')\ny_data = df['scalar_coupling_constant'].values.astype('float32')\n\nX_train, X_val, y_train, y_val = train_test_split(X_data, y_data, test_size=0.2, random_state=128)\nX_train.shape, X_val.shape, y_train.shape, y_val.shape","548cceb9":"paramsLGB = {\n    'learning_rate': (0.001,0.1),\n    'num_leaves': (32,256),\n    'min_child_samples': (15,100),\n    'min_data_in_leaf': (10, 90),\n    'bagging_freq' : (5,90),\n    'max_depth': (-1,9),\n    'subsample_freq': (1,9),\n    'subsample': (0.001,0.9),\n    'bagging_seed': (10,50),\n    'reg_alpha': (0.001,0.1),\n    'reg_lambda': (0.001,0.3),\n    'colsample_bytree': (1.0,9.0)\n    \n}","34738593":"def LGB_bayesian(\n    bagging_freq,\n    learning_rate,\n    num_leaves,\n    min_child_samples,\n    min_data_in_leaf,\n    max_depth,\n    subsample_freq,\n    subsample,\n    bagging_seed,\n    reg_alpha,\n    reg_lambda,\n    colsample_bytree\n     ):\n    \n    # LightGBM expects next three parameters need to be integer. \n    num_leaves = int(num_leaves)\n    max_depth = int(max_depth)\n    min_data_in_leaf = int(min_data_in_leaf)\n    bagging_freq = int(bagging_freq)\n    Random_Seed = 4520\n    assert type(num_leaves) == int\n    assert type(max_depth) == int\n    assert type(min_data_in_leaf) == int\n    assert type(bagging_freq) == int\n    \n\n    param = {\n              'bagging_freq' : bagging_freq,\n              'num_leaves': num_leaves,\n              'learning_rate' : learning_rate,\n              'min_child_samples' : min_child_samples,\n              'min_data_in_leaf' : min_data_in_leaf,\n              'max_depth' : max_depth,\n              'subsample_freq' : subsample_freq,\n              'subsample' : subsample,\n              'reg_alpha' : reg_alpha,\n              'reg_lambda' : reg_lambda, \n              'colsample_bytree': colsample_bytree,\n              'seed': Random_Seed,\n              'feature_fraction_seed': Random_Seed,\n              'bagging_seed': Random_Seed,\n              'drop_seed': Random_Seed,\n              'data_random_seed': Random_Seed,\n              'boosting_type': 'gbdt',\n              'is_unbalance': False,\n              'boost_from_average': True,\n              'objective': 'regression',\n              'metric': 'mae',\n              'verbosity': -1,\n              'boosting_type': 'gbdt',\n              'feature_fraction' : 1\n            }    \n    \n    model = LGBMRegressor(**param, n_estimators=10000, n_jobs = -1)\n    model.fit(X_train, y_train, \n    eval_set=[(X_train, y_train), (X_val, y_val)], eval_metric='mae',\n    verbose=100, early_stopping_rounds=200)\n\n    y_pred = model.predict(X_val)\n    score = np.log(mean_absolute_error(y_val, y_pred))\n\n    return score","efd640d9":"from bayes_opt import BayesianOptimization\nLGB_BO = BayesianOptimization(LGB_bayesian, paramsLGB, random_state=42)","5ba29c62":"print(LGB_BO.space.keys)","a3ca1c62":"init_points = 10\nn_iter = 15","70775abf":"import warnings\nprint('-' * 130)\nwith warnings.catch_warnings():\n    warnings.filterwarnings('ignore')\n    LGB_BO.maximize(init_points=init_points, n_iter=n_iter, acq='ucb', xi=0.0, alpha=1e-6)","98bae569":"LGB_BO.max['target']","d1baea77":"LGB_BO.max['params']","b5b6b419":"#Now we have optimized Hyper params\nRandom_Seed = 4520\nLGB_PARAMS = {\n                'bagging_freq': int(LGB_BO.max['params']['bagging_freq']), \n                'num_leaves': int(LGB_BO.max['params']['num_leaves']),\n                'learning_rate': LGB_BO.max['params']['learning_rate'],\n                'min_child_samples': LGB_BO.max['params']['min_child_samples'],\n                'min_data_in_leaf': int(LGB_BO.max['params']['min_data_in_leaf']), \n                'max_depth': int(LGB_BO.max['params']['max_depth']),\n                'subsample_freq' : LGB_BO.max['params']['subsample_freq'],\n                'subsample' : LGB_BO.max['params']['subsample'],\n                'reg_alpha' : LGB_BO.max['params']['reg_alpha'],\n                'reg_lambda' : LGB_BO.max['params']['reg_lambda'], \n                'colsample_bytree': LGB_BO.max['params']['colsample_bytree'],\n                'seed': Random_Seed,\n                'feature_fraction_seed': Random_Seed,\n                'bagging_seed': Random_Seed,\n                'drop_seed': Random_Seed,\n                'data_random_seed': Random_Seed,\n                'boosting_type': 'gbdt',\n                'is_unbalance': False,\n                'boost_from_average': True,\n                'objective': 'regression',\n                'metric': 'mae',\n                'verbosity': -1,\n                'boosting_type': 'gbdt',\n                'feature_fraction' : 1\n}","62990112":"model = LGBMRegressor(**LGB_PARAMS, n_estimators=10000, n_jobs = -1)\nmodel.fit(X_train, y_train, \n        eval_set=[(X_train, y_train), (X_val, y_val)], eval_metric='mae',\n        verbose=100, early_stopping_rounds=200)\n\ny_pred = model.predict(X_val)\nnp.log(mean_absolute_error(y_val, y_pred))","494967a1":"cols = list(df.columns)\ncols.remove('scalar_coupling_constant')\ncols\ndf_importance = pd.DataFrame({'feature': cols, 'importance': model.feature_importances_})\nsns.barplot(x=\"importance\", y=\"feature\", data=df_importance.sort_values('importance', ascending=False));","259118c3":"def build_x_y_data(some_csv, coupling_type, n_atoms):\n    full = build_couple_dataframe(some_csv, structures_csv, coupling_type, n_atoms=n_atoms)\n    \n    df = take_n_atoms(full, n_atoms)\n    df = df.fillna(0)\n    print(df.columns)\n    \n    if 'scalar_coupling_constant' in df:\n        X_data = df.drop(['scalar_coupling_constant'], axis=1).values.astype('float32')\n        y_data = df['scalar_coupling_constant'].values.astype('float32')\n    else:\n        X_data = df.values.astype('float32')\n        y_data = None\n    \n    return X_data, y_data","3dde2476":"def train_and_predict_for_one_coupling_type(coupling_type, submission, n_atoms, n_folds=5, n_splits=5, random_state=128):\n    print(f'*** Training Model for {coupling_type} ***')\n    \n    X_data, y_data = build_x_y_data(train_csv, coupling_type, n_atoms)\n    X_test, _ = build_x_y_data(test_csv, coupling_type, n_atoms)\n    y_pred = np.zeros(X_test.shape[0], dtype='float32')\n\n    cv_score = 0\n    \n    if n_folds > n_splits:\n        n_splits = n_folds\n    \n    kfold = KFold(n_splits=n_splits, shuffle=True, random_state=random_state)\n\n    for fold, (train_index, val_index) in enumerate(kfold.split(X_data, y_data)):\n        if fold >= n_folds:\n            break\n\n        X_train, X_val = X_data[train_index], X_data[val_index]\n        y_train, y_val = y_data[train_index], y_data[val_index]\n\n        model = LGBMRegressor(**LGB_PARAMS, n_estimators=1500, n_jobs = -1)\n        model.fit(X_train, y_train, \n            eval_set=[(X_train, y_train), (X_val, y_val)], eval_metric='mae',\n            verbose=100, early_stopping_rounds=200)\n\n        y_val_pred = model.predict(X_val)\n        val_score = np.log(mean_absolute_error(y_val, y_val_pred))\n        print(f'{coupling_type} Fold {fold}, logMAE: {val_score}')\n        \n        cv_score += val_score \/ n_folds\n        y_pred += model.predict(X_test) \/ n_folds\n        \n        \n    submission.loc[test_csv['type'] == coupling_type, 'scalar_coupling_constant'] = y_pred\n    return cv_score","ae5467ae":"model_params = {\n    '1JHN': 7,\n    '1JHC': 10,\n    '2JHH': 9,\n    '2JHN': 9,\n    '2JHC': 9,\n    '3JHH': 9,\n    '3JHC': 10,\n    '3JHN': 10\n}\nN_FOLDS = 10\nsubmission = submission_csv.copy()\n\ncv_scores = {}\nfor coupling_type in model_params.keys():\n    cv_score = train_and_predict_for_one_coupling_type(\n        coupling_type, submission, n_atoms=model_params[coupling_type], n_folds=N_FOLDS)\n    cv_scores[coupling_type] = cv_score","3dc45994":"pd.DataFrame({'type': list(cv_scores.keys()), 'cv_score': list(cv_scores.values())})","6bdfaa5e":"np.mean(list(cv_scores.values()))","c1ea1208":"submission[submission['scalar_coupling_constant'] == 0].shape","91800a87":"submission.head(10)","47948ecd":"submission.to_csv(f'{SUBMISSIONS_PATH}\/submission.csv')","921ef4d1":"And cv mean score:","b843c97c":"#### lets add Bayesian Optimization for Hyper parameters.","f4d8a86e":"## Submission Model","7be2e77b":"Let's build a separate model for each type of coupling. Dataset is split into 5 pieces and in this kernel we will use only 3 folds for speed up.\n\nMain tuning parameter is the number of atoms. I took good numbers, but accuracy can be improved a bit by tuning them for each type.","64665050":"## Load Everything","accb8b70":"It's funny, but looks like atom types aren't used a lot in the final decision. Quite a contrary to what a man would do.","ce35a0f0":"## Build Distance Dataset","a4e30826":"Checking cross-validation scores for each type:","3379ec2b":"For experiments, full dataset can be built with higher number of atoms, and for building a training\/validation sets we can trim them:","764c3e12":"The Entire credit goes to Sergii for this kernel: (Please upvote his kernel. I am trying to use Bayesian Optimization to tune in hyper parameters\n\nhttps:\/\/www.kaggle.com\/criskiev\/distance-is-all-you-need-lb-1-481. \n\nMy reference is my own kernel for Bayesian Optimization.\n\n## Core Idea\n\nDespite a lot of creeping Physics and Chemistry knowledge introduced in the description, this competition is more about Geometry and pattern matching.\n\nThe hypothesis of this kernel is next:\n1. If we have two similar sets of atoms with the same distances between them and the same types - the scalar coupling constant should be very close.\n2. More closest atoms to the pair of atoms under prediction have higher influence on scalar coupling constant then those with higher distance\n\nSo, basically, this problem could be dealt with some kind of K-Nearest Neighbor algorithm or any tree-based - e.g. LightGBM, in case we can find some representation which would describe similar configurations with similar feature sets.\n\nEach atom is described with 3 cartesian coordinates. This representation is not stable. Each coupling pair is located in a different point in space and two similar coupling sets would have very different X,Y,Z.\n\nSo, instead of using coordinates let's consider next system:\n1. Take each pair of atoms as two first core atoms\n2. Calculate the center between the pair\n3. Find all n-nearest atoms to the center (excluding first two atoms)\n4. Take two closest atoms from step 3 - they will be 3rd and 4th core atoms\n5. Calculate the distances from 4 core atoms to the rest of the atoms and to the core atoms as well\n\nUsing this representation each atom position can be described by 4 distances from the core atoms. This representation is stable to rotation and translation. And it's suitable for pattern-matching. So, we can take a sequence of atoms, describe each by 4 distances + atom type(H,O,etc) and looking up for the same pattern we can find similar configurations and detect scalar coupling constant.\n\nHere I used LightGBM, because sklearn KNN can't deal with the amount of data. My blind guess is that hand-crafted KNN can outperform LightGBM.\n\nLet's code the solution!","911fa5c5":"We don't calculate distances for `d_0_x`, `d_1_1`, `d_2_2`, `d_2_3`, `d_3_3` because we already have them in later atoms(`d_0_1` == `d_1_0`) or they are equal to zeros(e.g. `d_1_1`, `d_2_2`).","7a70f7fe":"By default all data is read as `float64` and `int64`. We can trade this uneeded precision for memory and higher prediction speed. So, let's read with Pandas all the data in the minimal representation: ","cc8f7881":"There are many steps, how to improve the score for this kernel:\n* Tune LGB hyperparameters - This is now done!\n* Tune number of atoms for each type\n* Try to add other features\n* Play with categorical features for atom types (one-hot-encoding, CatBoost?)\n* Try other tree libraries\n\nAlso, this representation fails badly on `*JHC` coupling types. The main reason for this is that 3rd and 4th atoms are usually located on the same distance and representation starts \"jittering\" randomly picking one of them. So, two similar configurations will have different representation due to usage of 3\/4 of 4\/3 distances.\n\nThe biggest challenge would be to implement handcrafted KNN with some compiled language(Rust, C++, C).\n\nWould be cool to see this kernel forked and addressed some of the issues with higher LB score.","1655bc61":"Sanity check for all cells to be filled with predictions:","d4ae67b1":"## Check LightGBM with the smallest type","dbb2085e":"## Room for improvement","717e3a99":"## Load Dataset","4f7c24d8":"Not a bad score for such a simple set of features."}}