{"cell_type":{"9562bc39":"code","70e8ca43":"code","5f3b2f07":"code","4f27d457":"code","e52a92de":"markdown"},"source":{"9562bc39":"# cwt\n!pip install git+https:\/\/github.com\/\/Kevin-McIsaac\/cmorlet-tensorflow@Performance --no-deps > \/dev\/null","70e8ca43":"# data\nfrom tensorflow.keras.utils import Sequence\nfrom random import shuffle\nfrom CWT.cwt import ComplexMorletCWT\nfrom scipy import signal\nimport numpy as np\nimport math\n\n# bandpass filter\nfs = 2048\nlower_freq = 20\nupper_freq = 500\nwavelet_width = 1\nbHP, aHP = signal.butter(8, (lower_freq, upper_freq), btype='bandpass', fs=fs)\ndef bandpass_filter(wav):  # Apply a 20Hz high pass filter to three channels, a larger spike around 20hz\n    return signal.filtfilt(bHP, aHP, wav)\n\nclass Dataset(Sequence):\n    def __init__(self, df, is_train=True):\n        self.id = df[\"id\"].values\n        self.y = df[\"target\"].values\n        self.file = df[\"file\"].values\n        self.batch_size = 32\n        self.is_train = is_train\n        self.shuffle = True\n        \n    def __len__(self):\n        batch_cnt = math.ceil(len(self.id) \/ self.batch_size) # all batch times\n        return int(batch_cnt*0.4)\n        \n    def __getitem__(self, i):\n        batch_file = self.file[i * self.batch_size:(i + 1) * self.batch_size]\n        if self.y is not None:\n            y = self.y[i * self.batch_size: (i + 1) * self.batch_size]\n\n        x = np.array([self.feature(k) for k in batch_file])\n        x = np.stack(x)\n        if self.is_train:\n            return x, y\n        else:\n            return x\n\n    def feature(self, file):  # for one sample\n        wav = np.load(file)\n        wav = bandpass_filter(wav)\n        wav = np.array([wav[i]\/wav[i].max() for i in range(3)]) # rescale by max\n        return wav\n\n    def on_epoch_end(self):\n        if self.shuffle and self.is_train:\n            tmp = list(zip(self.file, self.y))\n            shuffle(tmp)\n            self.file, self.y = list(zip(*tmp))","5f3b2f07":"# model\nfrom tensorflow.keras.layers import InputLayer, GlobalAveragePooling2D, Dense, Permute, Input, Dropout\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications import EfficientNetB4\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import MeanSquaredError, AUC\n\ninput_wav = Input(shape=(3, 4096))\n# cwt\nx = ComplexMorletCWT(n_scales = 64, stride=64, output='magnitude', data_format='channels_first',\n                     fs=fs,lower_freq=lower_freq,upper_freq=upper_freq,wavelet_width=wavelet_width)(input_wav)\nx = Permute(dims=(2,3,1))(x) # -> [:, time, n_scales, channels]\ncnn = EfficientNetB4(include_top=False, weights='imagenet')\nx = cnn(x)\nx = GlobalAveragePooling2D()(x)\nx = Dense(32*2, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(32, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(1, activation='sigmoid')(x)\n\nmodel = Model(inputs=[input_wav], outputs=x)\n\nmodel.compile(optimizer=\"sgd\",\n              #optimizer=Adam(learning_rate=1e-4),\n              loss='binary_crossentropy',\n              metrics=[AUC(),\"binary_accuracy\"])\nmodel.summary()","4f27d457":"# train\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndd = \"..\/input\/g2net-gravitational-wave-detection\"\ntrain = pd.read_csv('{}\/training_labels.csv'.format(dd))\ndef get_train_file(img_id):\n    return \"{}\/train\/{}\/{}\/{}\/{}.npy\".format(dd, img_id[0], img_id[1], img_id[2], img_id)\ntrain['file'] = train['id'].apply(get_train_file)\n\ntr_d, val_d = train_test_split(train,test_size=0.1,random_state=32,stratify=train[\"target\"])\ntr_d = Dataset(tr_d)\nval_d = Dataset(val_d)\n\ntrain_h = model.fit(\n    tr_d,\n    epochs = 30,\n    validation_data = val_d\n)","e52a92de":"g2net wave binary classification  \n- g2net wave\n- bandpass filter\n- rescale ([-1,1]) \n- CWT scalogram \n- EfficientNet (CNN-based) image recognizer\n\nreference\nhttps:\/\/www.kaggle.com\/c\/g2net-gravitational-wave-detection\/discussion\/261721"}}