{"cell_type":{"5854d13e":"code","5fc47e66":"code","5da3cb2a":"code","d41a2fe9":"code","a77f5a76":"code","5e14c3f6":"code","538aea88":"markdown","f0c01638":"markdown","1605c243":"markdown","bb30aea9":"markdown","4877e07f":"markdown","8f93822c":"markdown"},"source":{"5854d13e":"import numpy as np\nimport pandas as pd\n\nimport pickle\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","5fc47e66":"data = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/hyundi.csv\", usecols=[\"year\", \"mileage\", \"mpg\",\"engineSize\"]).to_numpy() # You can probably change the car to whatever you want\nlabels = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/hyundi.csv\", usecols=[\"price\"]).to_numpy()\n\nx_train, x_test, y_train, y_test = train_test_split(data, labels, test_size=0.3, random_state=30)\n\nsc1 = StandardScaler()\nsc1.fit(x_train)\n\nx_train = sc1.transform(x_train)\nx_test = sc1.transform(x_test)\n\nsc2 = StandardScaler()\nsc2.fit(y_train)\n\ny_train = sc2.transform(y_train)\ny_test = sc2.transform(y_test)","5da3cb2a":"model = MLPRegressor(hidden_layer_sizes=(100, 100, 100), max_iter=500, solver=\"lbfgs\")\nmodel.fit(x_train, y_train)","d41a2fe9":"print(\"Accuracy: \", model.score(x_test, y_test))","a77f5a76":"with open(\"model.pkl\", \"wb\") as f:\n    pickle.dump(model, f)\nprint(\"Model successfully saved!\")","5e14c3f6":"year = float(input(\"Registration year: \"))\nmileage = float(input(\"Mileage: \"))\nmpg = float(input(\"MPG: \"))\nengine_size = float(input(\"Engine Size: \"))\n\ndata = np.array([year, mileage, mpg, engine_size]).reshape(1, 4)\n\ndata = sc1.transform(data)\n\nprediction = model.predict(data)\n\nprediction = sc2.inverse_transform(prediction)\n\nprint(\"Predicted price for car: \", prediction[0])","538aea88":"# Loading Data","f0c01638":"# Importing Libraries","1605c243":"# Creating The Model","bb30aea9":"## Measuring Accuracy","4877e07f":"### Saving The Model","8f93822c":"# Getting Prices"}}