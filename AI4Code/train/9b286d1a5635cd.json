{"cell_type":{"cf8229e5":"code","6c63ef4e":"code","e21fb07b":"code","e0463d0a":"code","68edae7d":"code","24c3e2e0":"code","c1f2f75e":"code","e2c08362":"code","36eaa16f":"code","bfd2d026":"code","2bd11e10":"code","61773af9":"code","47beb788":"code","f78bc041":"code","e506b4a6":"code","573e62f1":"code","1c031829":"code","1a7271b2":"code","732653a9":"code","2770044e":"code","f6db8175":"code","cd143f7a":"code","8c7fccfd":"code","df363fde":"code","c2194d4e":"code","d9d30860":"code","7c7cb4c2":"code","f9a58abe":"code","79e11daf":"code","a5fda0b2":"code","a40e1380":"code","5e058cd1":"code","04dd64af":"code","78844647":"code","84b63331":"code","285e661f":"code","b1c1cd12":"code","f12b62c3":"code","31f10772":"code","494e8604":"code","0f1fc6e6":"code","784a6366":"code","345c4460":"code","13035de5":"code","6f56e371":"code","46f559d0":"code","d8ab3228":"code","f29b5401":"code","d538126e":"code","cc0c1583":"code","148f23b3":"code","fa844e0f":"code","3a9f91f1":"code","5acc6933":"code","e3158dd8":"code","17352586":"code","7390486b":"code","c97df377":"code","d3e43f2d":"code","a96b2d69":"code","a808d40f":"code","546d44a6":"code","765cc894":"code","5d5ae0ec":"code","f19e1ded":"code","e4c4e175":"code","79a74b96":"code","ce851379":"code","409b9a3a":"code","4dc8d9ae":"code","40eab53b":"code","b1587703":"code","ddf704a8":"code","07a199e5":"code","b6d2e693":"code","5e96f493":"code","82459273":"code","27be86fc":"code","a0475583":"code","e480a081":"code","4fdf8ffc":"code","465efedd":"code","d185e698":"code","df1bfa53":"code","048467b1":"code","4d989572":"code","6b744e21":"code","18e6ca1d":"code","3f7b89b0":"code","daf8b139":"code","6598df6d":"code","d5572f3a":"code","b7cb0844":"code","6e751298":"code","bee5acc5":"code","46dcd8d3":"code","f91ced24":"markdown","b672a0e1":"markdown","3101b473":"markdown","903c0560":"markdown","4e6321b7":"markdown","40fb6e1b":"markdown","8552c344":"markdown","8a6dfdc8":"markdown","026824f7":"markdown","aea0e92d":"markdown","b12fcf32":"markdown","13adbc80":"markdown","473b4a03":"markdown","96b3715d":"markdown","85acdff8":"markdown","1d2baa99":"markdown","43b00d80":"markdown","18ca9bd5":"markdown","975f20b4":"markdown","027b9005":"markdown","1216794f":"markdown","b065ced6":"markdown","c2b63532":"markdown","a73b6667":"markdown","9e300030":"markdown","8abf1e0c":"markdown","f9659043":"markdown","c0f13081":"markdown","bc36deb0":"markdown","03d620b8":"markdown","82480fa4":"markdown","17cd8a03":"markdown","1fbd2895":"markdown","caf931ac":"markdown","929abb51":"markdown","d03f73a9":"markdown","de705ffb":"markdown","f600d9d1":"markdown","83a8d742":"markdown","2b0905bd":"markdown","ff6d3313":"markdown","dd20fc0b":"markdown","f4bd23b9":"markdown","c596cf76":"markdown"},"source":{"cf8229e5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import date, timedelta\n\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\nimport seaborn as sns\nimport scipy as sp","6c63ef4e":"case = pd.read_csv('..\/input\/coronavirusdataset\/case.csv')\ncase","e21fb07b":"region = case.groupby(['province','city']).confirmed.sum()\nregion =pd.DataFrame(region)\nregion","e0463d0a":"count = region.groupby(['province']).sum() \ncount = pd.DataFrame(count)\ncount","68edae7d":"count.reset_index(inplace=True)\ncount.index=[\"Busan\",\"Chungcheongbuk-do\",\"Chungcheongnam-do\",\"Daegu\",\"Daejeon\",\"Gangwon-do\",\"Gwangju\",\"Gyeonggi-do\",\"Gyeongsangbuk-do\",\"Gyeongsangnam-do\",\n            \"Incheon\",\"Jeju-do\",\"Jeollabuk-do\",\"Jeollanam-do\",\"Sejong\",\"Seoul\",\"Ulsan\"]\nfig = px.pie(count, values=count.confirmed, names=count.index)\nfig.show()","24c3e2e0":"daily_report =pd.read_csv('..\/input\/coronavirusdataset\/time.csv')\ndaily_report.head(5)","c1f2f75e":"col = ['confirmed','negative','test']\ndataset = daily_report[col]\nprint(dataset.info())\n\nimport datetime\nend = datetime.datetime.now() - datetime.timedelta(1)\ndate_index = pd.date_range('2020-01-20', end)\ndataset.index = date_index\n\nfig = px.area(dataset, x=dataset.index, y='test' )\nfig.show()","e2c08362":"dataset.tail()","36eaa16f":"import cufflinks as cf \ncf.go_offline(connected=True)\ndataset.iplot( fill=True)","bfd2d026":"fatality_rate = pd.DataFrame({'Confirmed':[80814, 15113, 10075, 7979, 3146, 2876, 2745, 1762],\n                              'Death':     [3177,   1016,  429,  67,   86,   61,    6,  41]}) \nfatality_rate = fatality_rate.rename(index={0:\"China\",1:\"Italy\", 2:\"Iran\", 3:\"Korea\", 4:\"Spain\", 5: \"France\", 6:\" Germany\" , 7:\"USA\" })\nfatality_rate['fatality'] = fatality_rate['Death']  \/fatality_rate['Confirmed'] *100\nfatality_rate","2bd11e10":"plt.rcParams['figure.figsize']=15,7\nax= fatality_rate['Confirmed'].plot(kind='bar',  title = \"International nCOV-19 Confirmed patients\", color=['slateblue'])\nfor p in ax.patches:\n  left, bottom, width, height = p.get_bbox().bounds\n  ax.annotate(\"%.f\"%(height), (left+width\/2, height*1.01), ha='center')\n    \nplt.sca(ax)\nplt.box(False) # \uadf8\ub798\ud504 \uc678\uacfd\uc120 \uc9c0\uc6b0\uae30\nplt.show()","61773af9":"plt.rcParams['figure.figsize']=18,7\nax = fatality_rate['fatality'].plot(kind='barh', stacked=True, title= \"International nCOV-19 fatality_rate\", rot=0, color=['red', 'skyblue','darkgreen', 'orange','lightgreen','slateblue','yellow', 'darkblue']) \nfor p in ax.patches: \n  left, bottom, width, height = p.get_bbox().bounds \n  ax.annotate(\"%.2f%%\"%(width), xy=(left+width*1.05, bottom+height\/2), ha='center', va='center') \n\nplt.sca(ax)\nplt.box(False) \nplt.show()\n","47beb788":"df_patient = pd.read_csv('..\/input\/coronavirusdataset\/patient.csv')\ndf_patient","f78bc041":"df_patient.info() # most data have missing value...","e506b4a6":"# get daily confirmed count \n# \ud558\ub8e8\ud558\ub8e8 \ud655\uc9c4\uc790\ub85c \ud310\uba85\ubc1b\ub294 \ub370\uc774\ud130\uc758 id \uac2f\uc218\ub97c \uc138\uba74 = \ub2f9\uc77c \ud655\uc9c4\uc790\uc218\uac00 \ub098\uc635\ub2c8\ub2e4\ndaily_count = df_patient.groupby('confirmed_date').patient_id.count()\n \n# get accumulated confirmed count\n# \ub2f9\uc77c \ud655\uc9c4\uc790\uc218\ub97c \ubaa8\ub450 cumsum \ud569\uccd0\uc11c \ub204\uc801\ud655\uc9c4\uc790\uc218\ub97c \uad6c\ud569\ub2c8\ub2e4.\n\naccumulated_count = daily_count.cumsum()\n\nplt.figure(figsize=(18,5))\n\ncolor = 'tab:red'\nax = accumulated_count.plot(title='Korea nCOV19 Confirmed individuals', rot=90, color=color)\nax.set_ylabel('Accumulated_count', color=color)\nplt.box(False)\n\n# double-y axis graph = \ud558\ub098\uc758 \uadf8\ub798\ud504\uc5d0 2\uac1c\uc758 y\ucd95 \uc0ac\uc6a9\nax2 = ax.twinx()\ncolor = 'tab:blue'\nax2 = daily_count.plot(kind='bar',color=color, alpha=0.1)\nfor p in ax2.patches:\n  left, bottom, width, height = p.get_bbox().bounds\n  ax2.annotate(\"%.f\"%(height), (left+width\/2, height*1.01), ha='center') # ha =horizontal align\nax2.set_ylabel('Confirmed_count', color=color)\nax2.tick_params(axis='y', color=color)\n\nplt.box(False)\nplt.show()","573e62f1":"daily_count = pd.DataFrame(daily_count)\ndaily_count_data =daily_count.reset_index()\ndaily_count_data","1c031829":"# get accumulated confirmed count\naccumulated_count = daily_count.cumsum()\naccumulated_count.reset_index(inplace=True)\naccumulated_count","1a7271b2":"fig = go.Figure()\nfig.add_trace(\n    go.Scatter(x=daily_count_data.confirmed_date, y=daily_count.patient_id,\n        name='nCOV-19 in Korea'))\n# Add figure title\nfig.update_layout(title_text=\"daily Confirmed_patient of nCOV-19 in Korea\")\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"2020 01 ~03\")","732653a9":"fig = go.Figure()\nfig.add_trace(\n    go.Scatter(x=accumulated_count.confirmed_date, y=accumulated_count.patient_id, \n               name='nCOV-19 in Korea'))\n\n# Add figure title\nfig.update_layout(title_text=\"Accumulated Confirmed_patient of nCOV-19 in Korea\")\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"2020 01 ~03\")","2770044e":"from plotly.subplots import make_subplots\n\n# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n\n# Add traces\nfig.add_trace(\n    go.Scatter(x=daily_count_data.confirmed_date, y=daily_count.patient_id,\n        name='Confirmed in Korea'), secondary_y=False,)\n\nfig.add_trace(\n    go.Scatter(x=accumulated_count.confirmed_date, y=accumulated_count.patient_id,\n        name='Accumulated in Korea'), secondary_y=True,)\n\n# Add figure title\nfig.update_layout(title_text=\"Corona19 in Korea\")\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"2020 01 ~03\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>Confirmed<\/b> individual\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>Accumulated<\/b> individual\", secondary_y=True)\n\nfig.update_layout(\n    legend=dict(x=0, y=1,\n        traceorder=\"normal\",\n        font=dict(\n            family=\"sans-serif\",\n            size=14,\n            color=\"black\" ),\n        bgcolor=\"white\",\n        bordercolor=\"Black\",\n        borderwidth=2 ))\n\nfig.show()","f6db8175":"df_prophet = accumulated_count.rename(columns={ 'confirmed_date': 'ds', 'patient_id': 'y' })\n\ndf_prophet","cd143f7a":"m = Prophet(\n    changepoint_prior_scale=0.2, # increasing it will make the trend more flexible\n    changepoint_range=0.95, # place potential changepoints in the first 98% of the time series\n    yearly_seasonality=False,\n    weekly_seasonality=False,\n    daily_seasonality=True,\n    seasonality_mode='additive'\n)\n\nm.fit(df_prophet)\n\nfuture = m.make_future_dataframe(periods=7)\nforecast = m.predict(future)\n\n\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(7)","8c7fccfd":"fig = plot_plotly(m, forecast)\npy.iplot(fig) \n\nfig = m.plot(forecast)\na = add_changepoints_to_plot(fig.gca(), m, forecast)\n","df363fde":"sns.distplot(m.params[\"delta\"], kde=False, fit=sp.stats.laplace)\nplt.box(False)\n","c2194d4e":"day_plus = pd.DataFrame(index=['2020-03-12', '2020-03-13','2020-03-14' ]) \ndaily_count_= pd.concat([daily_count, day_plus],sort=True)\n  \naccumulated_count_ = daily_count_.cumsum()\naccumulated_count_","d9d30860":"plt.figure(figsize=(25,8))\ncolor = 'tab:red'\nforecast.yhat.plot(color=color)\nplt.ylabel('Accumulated_Confirmed', color=color)\nplt.xlabel('days')\nplt.title('Prediction by Prophet', color=color, fontdict ={'fontsize':15})\nplt.ylim=[0,14000,2000]\nplt.box(False)\n\naccumulated_count_['patient_id'].plot()\n\n\ndaily_count_['patient_id'].plot(kind='bar', color=['coral'] )\nplt.text(x=19, y=200, s='169',color='red', horizontalalignment='center') ;plt.text(x=20, y=300, s='231',color='red' ,horizontalalignment='center') \nplt.text(x=21, y=200, s='143',color='red',horizontalalignment='center') ;plt.text(x=22, y=330, s='285',color='red',horizontalalignment='center') \nplt.text(x=23, y=560, s='505',color='red',horizontalalignment='center') ;plt.text(x=24, y=610, s='571',color='red',horizontalalignment='center') \nplt.text(x=25, y=900, s='813',color='red',horizontalalignment='center') ;plt.text(x=26, y=1100, s='1061',color='red',horizontalalignment='center')\nplt.text(x=27, y=650, s='600',color='red',horizontalalignment='center') ;plt.text(x=28, y=600, s='516',color='red',horizontalalignment='center')\nplt.text(x=29, y=500, s='438',color='red',horizontalalignment='center') ;plt.text(x=30, y=600, s='518',color='red',horizontalalignment='center')\nplt.text(x=31, y=500, s='483',color='red',horizontalalignment='center') ;plt.text(x=32, y=400, s='367',color='red',horizontalalignment='center')\nplt.text(x=33, y=300, s='248',color='red',horizontalalignment='center') ;plt.text(x=34, y=200, s='131',color='red',horizontalalignment='center')\nplt.text(x=35, y=300, s='242',color='red',horizontalalignment='center') ;plt.text(x=36, y=200, s='114',color='red',horizontalalignment='center')\n\nplt.annotate('',xy=(14,10), xytext=(14,700), arrowprops=dict(facecolor='black'))\nplt.text(x=13, y=800, s='secodary infection by 31 patient',color='green', fontweight='bold')\nplt.annotate('',xy=(19,1000), xytext=(19,3300), arrowprops=dict(facecolor='black'))\nplt.text(x=19, y=3500, s='president\\'s Declaration',color='blue',fontweight='bold')\n\n\nplt.show()","7c7cb4c2":"daily_released_count = df_patient.groupby('released_date').patient_id.count()\ndaily_released_count = pd.DataFrame(daily_released_count)\n\ndaily_released_count = daily_released_count.drop(['2020-03-05','2020-03-07'])\n\ndaily_plus = pd.DataFrame([47,20,10,12,36,81,41,45,177],\n                          index=['2020-03-05','2020-03-06','2020-03-07','2020-03-08','2020-03-09','2020-03-10', '2020-03-11','2020-03-12','2020-03-13'],\n                          columns=['patient_id'])\ndaily_released_count =pd.concat( [daily_released_count ,daily_plus] )\ndaily_released_count","f9a58abe":"accumulated_released_count = daily_released_count.cumsum()\naccumulated_released_count.tail()","79e11daf":"plt.rcParams['figure.figsize']=10,6\ncolor = 'tab:blue'\nax = daily_released_count.plot(kind='bar', title = 'Korea nCOV-19 Recovered individu1es', color=color, alpha=0.1, legend=False)\nfor p in ax.patches:\n  left, bottom, width, height = p.get_bbox().bounds\n  ax.annotate(\"%.f\"%(height), (left+width\/2, height*1.01), ha='center') \nax.set_ylabel('Recovered_count', color=color)\nax.tick_params(axis='y', color=color)\nax.hlines(y = 10, xmin=0, xmax=28, colors=color, linestyles='dotted')\nax.hlines(y = 40, xmin=0, xmax=28, colors=color, linestyles='dotted')\nplt.box(False)\n\n\ncolor='tab:green'\nax2= accumulated_released_count.plot( color=color, legend=False)\nax2.set_ylabel('Accumulated_count', color=color)\nax2.tick_params(axis='y', color=color)\nax2.hlines(y = 50, xmin=0, xmax=28, colors='green', alpha=0.4, linestyles='dotted')\nax2.hlines(y = 100, xmin=0, xmax=28, colors='green', alpha=0.4,  linestyles='dotted')\nax2.hlines(y = 150, xmin=0, xmax=28, colors='green', alpha=0.4,  linestyles='dotted')\nax2.hlines(y = 200, xmin=0, xmax=28, colors='green', alpha=0.4,  linestyles='dotted')\n","a5fda0b2":"data = df_patient[[\"patient_id\",\"sex\",\"birth_year\",\"confirmed_date\",\"released_date\",\"deceased_date\",\"state\"]]\nreleased_base_data = data.dropna(subset=['released_date'])\nreleased_base_data = released_base_data.drop(['deceased_date'], axis=1)\nreleased_base_data.info() # 03-04 data \/ not updated on 03-05 \/ 47 peoples data ","a40e1380":"released_base_data.confirmed_date = pd.to_datetime(df_patient.confirmed_date)\nreleased_base_data.released_date = pd.to_datetime(df_patient.released_date)\n\n# recovered_period =\uce58\ub8cc\uae30\uac04(\ud68c\ubcf5\uae30\uac04) \uacc4\uc0b0\ud558\uae30\nreleased_base_data['recovered_period'] = released_base_data['released_date'].dt.date - released_base_data['confirmed_date'].dt.date\nreleased_base_data['recovered_period'] = released_base_data['recovered_period'].dt.days.astype(int)\n# Age\nreleased_base_data[\"age\"] = released_base_data[\"confirmed_date\"].dt.year - released_base_data[\"birth_year\"]\nreleased_base_data = released_base_data.drop(['birth_year'], axis=1)\n# Age_class\nreleased_base_data[\"age_class\"] = pd.cut(released_base_data[\"age\"], np.arange(0, 100, 10), include_lowest=True, right=False)\nreleased_base_data","5e058cd1":"boxplot = pd.DataFrame(released_base_data['recovered_period'].describe()).T\nboxplot","04dd64af":"red_square = dict(markerfacecolor='r', marker='s')\nfig, ax1 = plt.subplots(figsize=(8,2))\nax1.set_title('Recovered time on Korea nCOV-19 patient')\nax1.set_ylabel('Period')\nax1.boxplot(boxplot,  vert=False, flierprops=red_square)","78844647":"released_period= released_base_data.pivot_table( index=\"state\", columns='age_class', values='recovered_period', aggfunc='count').fillna('0')\nreleased_period = released_period.T\nreleased_period.reset_index(inplace=True)\nreleased_period","84b63331":"released_period.index=['10-19','20-29','30-39','40-49','50-59','60-69', '70-']\n\nimport plotly.express as px\n\nfig = go.Figure(data=[\n    go.Bar(name='All', x=released_period.index, y=released_period.released)])\n\n\nfig.show()","285e661f":"released_by_age= released_base_data.pivot_table( index=\"sex\", columns='age_class', values='released_date', aggfunc='count').fillna('0')\nreleased_by_age = released_by_age.T\nreleased_by_age.reset_index(inplace=True)\nreleased_by_age","b1c1cd12":"released_by_age.index=['10-19','20-29','30-39','40-49','50-59','60-69', '70-']\n\n\nfig = go.Figure(data=[\n    go.Bar(name='Female', x=released_by_age.index, y=released_by_age.female),\n    go.Bar(name='Male', x=released_by_age.index, y=released_by_age.male)])\n\nfig.update_layout(barmode='group')\nfig.show()","f12b62c3":"Confirmed_sex = pd.DataFrame({'sex':[4661,2852], 'rate':[62.0,38.0]})\nConfirmed_sex = Confirmed_sex.rename(index={0:\"female\", 1:\"male\"})\nConfirmed_sex","31f10772":"\nplt.rcParams['figure.figsize']=12,8\ngroup_explodes = (0.05, 0) #explode 1st slice\nplt.pie(Confirmed_sex['sex'], explode=group_explodes,labels=[\"female\",\"male\"], colors=['lightcoral', 'lightskyblue'],autopct='%1.2f%%', shadow=True, startangle=90, textprops={'fontsize':14})\nplt.axis('equal')\nplt.title('Confirmed individual by sex')\nplt.show()","494e8604":"Confirmed_age = pd.DataFrame({'Confirmed':[67,393,2213,789,1030,1416,926,454,222], 'rate':[0.9, 5.2, 29.5, 10.5, 13.7, 18.8, 12.4, 6.0, 3.0]})\nConfirmed_age = Confirmed_age.rename(index={0:\"0-9\", 1:\"10-19\", 2:\"20-29\", 3:\"30-39\", 4:\"40-49\", 5:\"50-59\", 6:\"60-69\", 7:\"70-79\", 8:\"80-\"})\nConfirmed_age","0f1fc6e6":"plt.rcParams['figure.figsize']=12,5\ncolor = 'tab:red'\nax= Confirmed_age['Confirmed'].plot( title = \" nCOV19 - Confirmed individule by Age\", rot=0,color=color)\nax.set_ylabel('Confirmed_count',color=color)\nax.tick_params(axis='y',color=color)\nax.legend()\n\nax2 = ax.twinx()\ncolor = 'tab:blue'\nax2 = Confirmed_age['rate'].plot(kind='bar', color=color, alpha=0.1)\nax2.set_ylabel(' %')\n\nfor p in ax2.patches: \n  left1, bottom1, width1, height1 = p.get_bbox().bounds \n  ax2.annotate(\"%.f%%\"%(height1), xy=(left1+width1\/2, bottom1+height1\/2), ha='center', va='center')\n\nplt.sca(ax)\nplt.show()","784a6366":"df_patient.info() # infection_reason    154 non-null object","345c4460":"pd.DataFrame(df_patient[\"infection_reason\"].value_counts())","13035de5":"reason_dict = {   \n    \"contact with the patient\": \"contact with patient\", \n    \"visit to Shincheonji Church\" : \"contact with patient\", \n    \"contact with patient in Japan\":  \"visit to other Country\",\n    \"contact with patient in Singapore\":  \"visit to other Country\",\n    \"visit to Daegu\" : \"contact with patient\",  \n    \"visit to Shincheonji Church\" : \"contact with patient\",\n\n    \"visit to Wuhan\" : \"visit to China\",\n    \" visit to China\" :  \"visit to China\",\n    \"visit to China\": \"visit to China\",\n    \"residence in Wuhan\" : \"residence in Wuhan\",\n\n    \"visit to Thailand\":  \"visit to other Country\",\n    \"visit to Japan\": \"visit to other Country\",\n    \"visit to Italy\":  \"visit to other Country\",\n    \"visit to Vietnam\":  \"visit to other Country\",\n\n    \"contact with patient in Japan\":  \"visit to other Country\",\n    \"visit to Cheongdo Daenam Hospital\" :\"contact with patient\",\n    \"pilgrimage to Israel\":  \"visit to other Country\",\n    \"visit to ooo\" :\"contact with patient\",\n    \"contact with patient in Daegu\" :\"contact with patient\"\n\n}\ninfection_reason =pd.DataFrame(df_patient[\"infection_reason\"].replace(reason_dict).value_counts())\ninfection_reason\n\n","6f56e371":"infection_reason.reset_index(inplace=True)","46f559d0":"region = pd.DataFrame(df_patient[\"region\"].value_counts())\nregion.reset_index(inplace=True)\nregion","d8ab3228":"infection_reason.index=['contact with patient','visit to other Country','visit to China','residence in Wuhan']\nregion.index = ['capital area','Gyeongsangbuk-do','Daegu','Daejeon','Gwangju','Gangwon-do','Jeju-do',\n                'filtered at airport','Jeollabuk-do','Jeollanam-do', 'Ulsan','Chungcheongbuk-do','Busan','Chungcheongnam-do']\n\nfig = make_subplots(rows=2, cols=1)\n\nfig.add_trace(go.Bar(x=infection_reason.index, y=infection_reason.infection_reason,\n                    marker=dict(color=infection_reason.infection_reason, coloraxis=\"coloraxis\")),  1, 1)\n\n\nfig.add_trace(go.Bar(x=region.index, y=region.region,\n                    marker=dict(color=region.region, coloraxis=\"coloraxis\")),  2, 1)\n\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False)\nfig.update_layout(height=1000, showlegend=False)\nfig.show()","f29b5401":"region_by3_9 = pd.DataFrame({'patient':[5571,1107,152,130,102, 96, 83], 'rate':[75.47, 15.0, 2.06, 1.76, 1.38, 1.3, 1.12]})\nregion_by3_9 = region_by3_9.rename(index={0:\"Deagu\", 1:\"Gyeongbuk\", 2:\"Gyeonggi\", 3:\"Seoul\", 4:\"Chungnam\", 5:\"Busan\", 6:\"Gyeongnam\"})\nregion_by3_9","d538126e":"plt.rcParams['figure.figsize']=15,4\ncolor = 'tab:red'\nax= region_by3_9['patient'].plot( title = \" nCOV19 - Confirmed individule by region\", rot=0,color=color)\nax.set_ylabel('Confirmed_count',color=color)\nax.tick_params(axis='y',color=color)\nax.legend()\n\nax2 = ax.twinx()\ncolor = 'tab:blue'\nax2 = region_by3_9['rate'].plot(kind='bar', color=color, alpha=0.1)\nax2.set_ylabel(' %')\n\nfor p in ax2.patches: \n  left1, bottom1, width1, height1 = p.get_bbox().bounds \n  ax2.annotate(\"%.f%%\"%(height1), xy=(left1+width1\/2, bottom1+height1\/2), ha='center', va='center')\n\nplt.sca(ax)\nplt.show()","cc0c1583":"region_by3_9.reset_index(inplace=True)\nregion_by3_9.index=[\"Deagu\",\"Gyeongbuk\",\"Gyeonggi\",\"Seoul\",\"Busan\",\"Chungnam\",\"Gyeongnam\"]\nfig = px.pie(region_by3_9, values='rate', names='index')\nfig.show()","148f23b3":"count.reset_index(inplace=True)\ncount.index=[\"Busan\",\"Chungcheongbuk-do\",\"Chungcheongnam-do\",\"Daegu\",\"Daejeon\",\"Gangwon-do\",\"Gwangju\",\"Gyeonggi-do\",\"Gyeongsangbuk-do\",\"Gyeongsangnam-do\",\n            \"Incheon\",\"Jeju-do\",\"Jeollabuk-do\",\"Jeollanam-do\",\"Sejong\",\"Seoul\",\"Ulsan\"]\nfig = px.pie(count, values='confirmed', names='index')\nfig.show()","fa844e0f":"sex = pd.DataFrame(df_patient[\"sex\"].value_counts())\nsex = pd.DataFrame(df_patient[\"sex\"].replace({'feamle':'female'}).value_counts())\nsex","3a9f91f1":"sex.reset_index(inplace=True)\nsex.index=['female','male']\nimport plotly.express as px\nfig = px.pie(sex, values='sex', names='index')\nfig.show()","5acc6933":"plt.rcParams['figure.figsize']=12,8\ngroup_explodes = (0.05, 0) #explode 1st slice\nplt.pie(Confirmed_sex['sex'], explode=group_explodes,labels=[\"female\",\"male\"], colors=['lightcoral', 'lightskyblue'],autopct='%1.2f%%', shadow=True, startangle=90, textprops={'fontsize':14})\nplt.axis('equal')\nplt.title('Confirmed individual by sex')\nplt.show()","e3158dd8":"data = df_patient[[\"patient_id\",\"sex\",\"birth_year\",\"confirmed_date\",\"deceased_date\",\"state\"]]\ndeath_data = data.dropna(subset=['deceased_date'])\ndeath_data","17352586":"death_data.confirmed_date = pd.to_datetime(df_patient.confirmed_date)\ndeath_data.deceased_date = pd.to_datetime(df_patient.deceased_date)\n\n# deceased_period \uc0ac\ub9dd\uae4c\uc9c0 \uc18c\uc694\ub41c \uc2dc\uac04 \uacc4\uc0b0\ndeath_data['deceased_period'] = death_data['deceased_date'].dt.date - death_data['confirmed_date'].dt.date\n# Age\ndeath_data[\"age\"] = death_data[\"confirmed_date\"].dt.year - death_data[\"birth_year\"]\ndeath_data = death_data.drop(['birth_year'], axis=1)\n# Age_class\ndeath_data[\"age_class\"] = pd.cut(death_data[\"age\"], np.arange(0, 100, 10), include_lowest=True, right=False)\ndeath_data","7390486b":"mean = death_data['deceased_period'].dt.days.mean()\nprint('\ud3c9\uade0 \uc0ac\ub9dd\uae4c\uc9c0 \uac78\ub9b0 \uc2dc\uac04 %.2f%%'%(mean),'days')","c97df377":"death_data = death_data.dropna(subset=['age_class'])\ndeath_data","d3e43f2d":"death_data_by_age = death_data.pivot_table( index=\"state\", columns='age_class', values='deceased_date', aggfunc='count').fillna('0')\ndeath_data_by_age = death_data_by_age.T\ndeath_data_by_age.reset_index(inplace=True)\ndeath_data_by_age","a96b2d69":"death_data_by_age.index=['30-39','40-49','50-59','60-69', '70-79','80-89']\n\nimport plotly.express as px\n\nfig = go.Figure(data=[\n    go.Bar(name='All', x=death_data_by_age.index, y=death_data_by_age.deceased)])\n\n\nfig.show()\n","a808d40f":"death_data= death_data.pivot_table( index=\"sex\", columns='age_class', values='deceased_date', aggfunc='count').fillna('0')\ndeath_data = death_data.T\ndeath_data.reset_index(inplace=True)\ndeath_data","546d44a6":"death_data.index=['30-39','40-49','50-59','60-69', '70-79', '80-']\n\nimport plotly.express as px\n\nfig = go.Figure(data=[\n    go.Bar(name='Female', x=death_data.index, y=death_data.female),\n    go.Bar(name='Male', x=death_data.index, y=death_data.male)])\n\nfig.update_layout(barmode='group')\nfig.show()","765cc894":"death_count = df_patient.groupby('deceased_date').patient_id.count()\ndeath_count = pd.DataFrame(death_count)\ndeath_accumulated = death_count.cumsum()","5d5ae0ec":"plt.rcParams['figure.figsize']=10,6\n\ncolor='tab:blue'\nax= accumulated_released_count.plot(kind='bar' ,title = 'Korea nCOV-19 Recoved & Death individules',\n                                    alpha=0.5, color=color, legend=False)\nax.set_ylabel('Recovered_count', color=color)\nax.tick_params(axis='y', color=color)\nplt.box(False)\ncolor = 'black'\nax2 = death_accumulated.plot(kind='bar', color=color, alpha=0.5, legend=False)\nax2.set_ylabel('Deceased_count', color=color)\nax2.tick_params(axis='y', color=color)\nplt.box(False)\n\n","f19e1ded":"daily_count = df_patient.groupby('confirmed_date').patient_id.count()\ndaily_count = pd.DataFrame(daily_count)\ndata = daily_count.cumsum()\ndata ","e4c4e175":"dataset = data.iloc[14:]\ndataset","79a74b96":"# Future forcasting\ndays_in_future = 3\ndates = pd.date_range('2020-2-18','2020-3-11')\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\n# future_forcast #3\uc77c\uc744 \ucd94\uac00\ud574\uc11c > \ubbf8\ub798 3\uc77c\uc758 \uadf8\ub798\ud504\ub97c \uadf8\ub824\ubcf8\ub2e4.\n\ndays = np.array([i for i in range(len(dates))]).reshape(-1, 1) # index -> ndarray\ndata = np.array(dataset).reshape(-1, 1) # count->ndarray","ce851379":"kernel = ['linear', 'rbf']\nc = [0.01, 0.1, 1, 10, 100]\ngamma = [ 0.001, 0.01, 0.1, 10]\nepsilon = [0.01, 0.1, 1, 10, 100]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVR\nsvm = SVR()\nsvm_search = GridSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=5, return_train_score=True, n_jobs=-1,verbose=1)\n\n# \ubaa8\ub378 fitting \uc804\uc5d0 train, test \ub97c \ub098\ub220\uc11c \ud574\ubd24\uc73c\ub098, \ud604\uc7ac \ub370\uc774\ud130\uc14b\uc774 \ub108\ubb34 \ubc94\uc704\uac00 \uc791\uc544 \ud655\uc9c4\uc790\uc99d\uac00\ub97c \ubc18\uc601\ud558\uc9c0 \ubabb\ud574. \uc804\uccb4 \ub370\uc774\ud130\uc14b\uc73c\ub85c fitting \ud568.\nsvm_search.fit(days, data)","409b9a3a":"svm_search.best_params_","4dc8d9ae":"svm_search.best_estimator_","40eab53b":"svm_pred = svm_search.best_estimator_.predict(future_forcast)\nsvm_pred","b1587703":"import statsmodels.api as sm\n\nlm= sm.OLS(data,days)\nresults =lm.fit()\nresults.summary()","ddf704a8":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nlinear_model = LinearRegression(fit_intercept=False, normalize=True)\nlinear_model.fit(days, data)\nlinear_pred = linear_model.predict(future_forcast)\nlinear_model.coef_","07a199e5":"plt.plot(svm_pred, color='green', ls='-.', label = 'Prediction by SVM')\nplt.plot(linear_pred, color='red', ls='--', label='Prediction by Linear Regression')\nplt.plot(dataset, label='Accumulated real count')\nplt.xlabel('days')\nplt.vlines(x=22, ymin=0, ymax=10000, alpha=0.3, linestyles='--')\nplt.text(x=24, y=5000, s='prediction',color='black', fontsize =20,horizontalalignment='center') \nplt.xticks(rotation=90, ha='left')\nplt.legend()\nplt.box(False)","b6d2e693":"dataset.columns = ['Confirmed']\nlen(dataset)","5e96f493":"data = np.array(dataset).reshape(-1, 1) # count->ndarray","82459273":"train_data = dataset[:len(dataset)-3]\ntest_data = dataset[len(dataset)-3:]","27be86fc":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n#\uc2dc\uacc4\uc5f4 \uc790\ub8cc {  Yt } \uc758 \uc0c1\uad00 \ud568\uc218\ub294 acf, pacf, iacf \uac00 \uc788\ub294\ub370 \uc774\ub294 ARMA \ubaa8\ud615 \uc9c4\ub2e8\uc5d0 \uc0ac\uc6a9\ub41c\ub2e4.\ndiff_1=train_data.diff(periods=1).iloc[1:] # diff() \ucc28\ubd84\ud568\uc218 => 1\ucc28 \ucc28\ubd84\ud568\uc218\ndiff_1.plot()\nplot_acf(diff_1)\nplot_pacf(diff_1)","a0475583":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\narima_model = SARIMAX(train_data['Confirmed'].values, order = (1,2,1))\narima_result = arima_model.fit(trend='c', full_output=True, disp=True)\narima_result.summary()","e480a081":"pred_Arima = arima_result.forecast(steps=3)\npred_Arima","4fdf8ffc":"x = days[:20] # train test split\ny = train_data.values\ntest = days[20:]","465efedd":"from sklearn.neural_network import MLPRegressor\nmodel = MLPRegressor(hidden_layer_sizes=[20, 10, 10, 3], max_iter=20000, random_state=42)\nMLP = model.fit(x, y)","d185e698":"pred_MLP = model.predict(test)\npred_MLP","df1bfa53":"# Before creating LSTM model we should create a Time Series Generator object.\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)\nscaled_test_data = scaler.transform(test_data)\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM\n\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nn_input =2\nn_features =1\n                             \ngenerator = TimeseriesGenerator(scaled_train_data,scaled_train_data, length=n_input, batch_size=1)\n\nlstm_model = Sequential()\nlstm_model.add(LSTM(19, activation='relu', input_shape = (n_input, n_features)))\nlstm_model.add(Dense(10))\nlstm_model.add(Dense(5))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer='adam', loss='mse')\nlstm_model.summary()\n","048467b1":"lstm_model.fit_generator(generator, epochs=20)","4d989572":"lstm_model.history.history.keys()","6b744e21":"losses_lstm = lstm_model.history.history['loss']\nplt.figure(figsize = (12,4))\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.xticks(np.arange(0,21,1))\nplt.plot(range(len(losses_lstm)), losses_lstm)","18e6ca1d":"lstm_predictions_scaled = []\n\nbatch = scaled_train_data[-n_input:]\ncurrent_batch = batch.reshape((1, n_input, n_features))\n\nfor i in range(len(test_data)):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    lstm_predictions_scaled.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)\n\n\n# As you know we scaled our data that\u2019s why we have to inverse it to see true predictions.\nlstm_predictions_scaled","3f7b89b0":"lstm_predictions = scaler.inverse_transform(lstm_predictions_scaled) # \uc5f4\ub85c \ub123\uc5b4\uc918\uc57c \uc2dc\uac01\ud654 \ud560\uc218 \uc788\uc74c\nlstm_predictions","daf8b139":"test_data['ARIMA'] = pred_Arima\ntest_data['MLP regression'] = pred_MLP\ntest_data['LSTM_Predictions'] = lstm_predictions\ntest_data","6598df6d":"test_data.plot()","d5572f3a":"print('MAE of ARIMA Model ', mean_absolute_error(test_data['Confirmed'], test_data['ARIMA']))\nprint('MAE of MLP Model ',mean_absolute_error(test_data['Confirmed'], test_data['MLP regression']))\nprint('MAE of LSTM Model ',mean_absolute_error(test_data['Confirmed'], test_data['LSTM_Predictions']))\nprint('----------------------------------------------------')\nprint('MSE of ARIMA Model ', mean_squared_error(test_data['Confirmed'], test_data['ARIMA']))\nprint('MSE of MLP Model ',mean_squared_error(test_data['Confirmed'], test_data['MLP regression']))\nprint('MSE of LSTM Model ',mean_squared_error(test_data['Confirmed'], test_data['LSTM_Predictions']))","b7cb0844":"from sklearn.metrics import r2_score\nprint('Coefficient of determination : r2_score of ARIMA Model ', r2_score(test_data['Confirmed'], test_data['ARIMA']))\nprint('Coefficient of determination : r2_score of MLP Model ',r2_score(test_data['Confirmed'], test_data['MLP regression']))\nprint('Coefficient of determination : r2_score of LSTM Model ',r2_score(test_data['Confirmed'], test_data['LSTM_Predictions']))\n\n# \uacb0\uc815\uacc4\uc218\uac00 - \uc74c\uc218\ub85c \ub098\uc628\ub2e4\ub294\uac74, \ubaa8\ub378\uc774 \uc758\ubbf8\uac00 \uc5c6\ub2e4\ub294\uac78\ub85c \ud574\uc11d\ub418\ub124\uc694.. \n# \uc2dc\uacc4\uc5f4\ubd84\uc11d\uc778 ARIMA \ub9cc \uc124\uba85\ub825\uc774 \uc591\uc218\ub85c 0.50 \uc73c\ub85c \ud655\uc778\ub429\ub2c8\ub2e4.. (\ube44\uacc4\uc808\uc131 ARIMA \ubaa8\ud615\uc785\ub2c8\ub2e4.)","6e751298":"from statsmodels.tsa.statespace.sarimax import SARIMAX\ndata = np.array(dataset).reshape(-1, 1)\narima_model = SARIMAX(data, order = (1,2,1))\narima_result = arima_model.fit(trend='c', full_output=True, disp=True)\narima_result.summary()","bee5acc5":"pred_Arima = arima_result.forecast(steps=6) \npred_Arima = pd.DataFrame(pred_Arima, columns=['predict'])\npred_Arima","46dcd8d3":"forecast[['ds', 'yhat']].tail(7)","f91ced24":"# \uc0ac\ub9dd\uc790\uac00 \ub9ce\uc544\uc9d0\uc5d0 \ub530\ub77c, \uc0ac\ub9dd\uc790\uc5d0 \ub530\ub978 \uc5f0\ub839\ubcc4 \uc131\ubcc4 EDA \ub97c \ucd94\uac00\ud568","b672a0e1":"! pip install pmdarima # \uc124\uce58\ud574\uc11c \uc368\uc57c\ud568.\n\n## from pmdarima import auto_arima\n## auto_arima(accumulated_count, seasonal=False)\n\n\ud55c\ub2ec\uac04 \uc77c\uc5b4\ub09c \uc804\uc5fc\ubcd1 \uc2dc\uacc4\uc5f4\ub370\uc774\ud130\ub85c \uacc4\uc808\uc131 \uc694\uc778\uc740 False \ub85c \uc9c0\uc815\ud55c\ub2e4.\n\nAuto_arima() \ud568\uc218\ub97c \uc774\uc6a9\ud574\uc11c p,d,q=() \uc54c\uc544\ub0bc\uc218 \uc788\ub2e4. \n\n\uc704\uc758 ACF, PCAF \ub97c \ucc38\uace0\ud574\uc11c (1,2,1)\ub85c \ub300\uc785\ud588\uc744\ub54c \uac00\uc7a5 \uc801\uc740 AIC =215, BIC =217\ub85c \uc124\uba85\ub428\uc744 \ud655\uc778\ud588\ub2e4\n","3101b473":"## Accumulated Released individules count was doubled on 2020-03-05 compared to 2020-03-04\n03-05 \ud558\ub8e8\uc758 \uc644\uce58\uc790\uc218\ub294 47\uba85\uc758 \ub370\uc774\ud130\ub294 \ucd94\ud6c4 EDA \ub97c \ud1b5\ud55c \ud68c\ubcf5\uc728\uc774 \uc870\uae08 \ub2ec\ub77c\uc9c8\uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n## 2020-03-13, 177 patients ware recoveried ! congratulation !\n\uae30\uc874\uc5d0 \ud655\uc9c4\uc790\uac00 \ub9ce\uc558\ub358 \ub9cc\ud07c, 2\uc8fc\uc758 \ud3c9\uade0\uae30\uac04\uc744 \ud68c\ubcf5\uae30\ub85c \ubcf4\uace0, \ub9ce\uc740 \ud658\uc790\ub4e4\uc774 \uc55e\uc73c\ub85c\ub3c4 \uaca9\ub9ac\ud574\uc81c \ub420\uac83\uc73c\ub85c \ubcf4\uc5ec\uc9d1\ub2c8\ub2e4","903c0560":"# Prophet\uc740 \ub2e4\uc74c \uc21c\uc11c\ub85c \uc2dc\uacc4\uc5f4\uc5d0 \ub300\ud55c \uc120\ud615\ud68c\uadc0\ubd84\uc11d \ubaa8\ud615\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n\n*  \uc2dc\uac04 \ub370\uc774\ud130\uc758 \uac01\uc885 \ud2b9\uc9d5\uc744 \uc784\ubca0\ub529\ud574\uc11c \uacc4\uc808\uc131 \ucd94\uc815\uc744 \ud55c\ub2e4.\n*  \ub098\uba38\uc9c0 \ub370\uc774\ud130\ub294 \uad6c\uac04\ubcc4 \uc120\ud615\ud68c\uadc0(piecewise linear regression) \ubd84\uc11d\uc744 \ud55c\ub2e4.\n\n\uc120\ud615 \ud68c\uadc0\ubd84\uc11d\uc740 \uc804\uccb4 \uc2dc\uacc4\uc5f4\uc758 \uc55e 80%\ubd80\ubd84\uc744 25\uac1c\uc758 \uad6c\uac04\uc73c\ub85c \ub098\ub204\uc5b4 \uc2e4\uc2dc\ud569\ub2c8\ub2e4.\n\ndefault \uac12\uc774 \uc544\ub2cc \ucf54\ub4dc\uc5d0\uc11c changepoint \ub97c \uc218\uc815\ud574\uc8fc\uc5c8\uae30 \ub54c\ubb38\uc5d0 \uc704 \uadf8\ub798\ud504\uc640 \uac19\uc774 13\uad70\ub370\uc5d0\uc11c \uad6c\uac04\uc744 \ub098\ub220\uc11c \ubd84\uc11d\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4.\n\n(\uad6c\uac04 \uad6c\ubd84\uc810(change point)\ub294 changepoints \uc18d\uc131\uc5d0 \uc788\uace0 , \uc704 \ucf54\ub4dc\uc5d0\uc11c \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\ub85c \uc870\uc815\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.)\n\n# \uc120\ud615\ud68c\uadc0\ubaa8\ud615\uc758 \uae30\uc6b8\uae30\uc640 y-\uc808\ud3b8\uc740 param \uc18d\uc131\uc758 delta\uc640 beta\uac12\uc5d0 \uc788\ub2e4.\n\uc544\ub798 \uadf8\ub798\ud504\uc5d0\uc11c \uae30\uc6b8\uae30\uc5d0 \ub300\ud55c \uad6c\uac04\uc744 \uadf8\ub824\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n*  prophet\uc740 \ub9c8\uc9c0\ub9c9 20% \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uc120\ud615\ud68c\uadc0\ubd84\uc11d\uc744 \ud558\uace0 \uc2e0\ub8b0\uad6c\uac04\uc744 \uacc4\uc0b0\ud560 \uc218 \uc788\ub2e4.\n*  \uc2e0\ub8b0\uad6c\uac04\uc740 \uad6c\uac04\ubcc4 \uae30\uc6b8\uae30\uc758 \ubd84\ud3ec\ub97c \ub77c\ud50c\ub77c\uc2a4 \ud655\ub960\ubd84\ud3ec\ub85c \ucd94\uc815\ud55c \ud6c4 \uae30\uc6b8\uae30 \ubcc0\ud654\ub97c \uac00\uc815\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \uc2e0\ub8b0\uad6c\uac04\uc744 \uacc4\uc0b0\ud55c\ub2e4.\n\n\n\uc2e0\ub8b0\uad6c\uac04\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc744 \uc544\ub798 \ucd9c\ucc98\ub97c \ucc38\uace0\ud558\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4\nhttps:\/\/datascienceschool.net\/view-notebook\/8903aa20770746e78fb5b1834ab5334b\/","4e6321b7":"id, confirmed_date ,state , Country = no missing data \uacb0\uce21\uce58\uac00 \uc5c6\ub294 \ub370\uc774\ud130\uc774\uace0\n\nMost of data are missing value \n\uadf8\uc678\uc5d0\ub294 5%\ubc16\uc5d0 \uc548\ub418\ub294 \ub370\uc774\ud130\ub4e4\ub85c \uad6c\uc131\ub418\uc5b4\uc788\uc5b4 \uc0ac\uc2e4 EDA \ub97c \ud560\ub9cc\ud55c \uc790\ub8cc\uac00 \uc801\uc2b5\ub2c8\ub2e4.\n\n\uc131\ubcc4\uc774\ub098 \uc5f0\ub839\ub300\ubcc4 \uc9c0\uc5ed\ubcc4 \ub370\uc774\ud130\ub294 \uc9c8\ubcd1\uad00\ub9ac\ubcf8\ubd80 \uc790\ub8cc\ub97c \ud1a0\ub300\ub85c \uc2dc\uac01\ud654\ud558\uc5ec, \ud604\uc7ac \ub370\uc774\ud130\uc14b\uacfc \ube44\uad50\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\uc138\ubd80\uc801\uc778 info\uac00 \uc5c5\ub370\uc774\ud2b8 \ub418\uac8c \ub418\uba74, EDA \uc5d0 \ub9e4\uc6b0 \ub3c4\uc6c0\ub420\uac83\uc73c\ub85c \uc0dd\uac01\ud569\ub2c8\ub2e4.\n\n\uacb0\uce21\uce58\uac00 \uc5c6\ub294 confirmed_date\ub85c\ub9cc new dataset \uc744 \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.","40fb6e1b":"# LinearRegression","8552c344":"# MLP \uba40\ud2f0\ud37c\uc149\ud2b8\ub860","8a6dfdc8":"# load Korea nCov-19","026824f7":"# updated by 2020-03-07\nI tried Machine Learning on Korea-Corona-19 Confirmed count data\n\n# SVM ( Support Vector Machine ), Linear Regression","aea0e92d":"# Prediction line + daily Confirmed_count bar graph\n\uae30\uc874\uc758 \ub370\uc774\ud130\uac00 \ubc1c\ud45c\ub418\ub294 \ud655\uc9c4\uc790\uc218\ub97c \uac19\uc774 \uc2dc\uac01\ud654 \ud558\uc600\uc2b5\ub2c8\ub2e4.","b12fcf32":"* # Prophet model \ub85c \uc608\uce21\ud55c \uac12\uc744 \uac00\uc7a5 \ub9c8\uc9c0\ub9c9\uc5d0 ARIMA \uc640 \ube44\uad50\ud574\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.\n# ARIMA model\n1. \uc2dc\uacc4\uc5f4 \uc790\ub8cc - \uc2dc\uac04\uc758 \ud750\ub984\uc5d0 \ub530\ub77c \uad00\ucc30\ub41c \ub370\uc774\ud130\n\n\n\uc2dc\uacc4\uc5f4 \ubaa8\ud615\n*  (1) \uc790\uae30\ud68c\uadc0 \ubaa8\ud615 (Autoregressive model, AR)\n*  (2) \uc774\ub3d9\ud3c9\uade0 \ubaa8\ud615 (Moving average model, MA)\n*  (3) AR + MA = ARMA\n\nARIMA, \uc790\uae30\ud68c\uadc0\ub204\uc801\uc774\ub3d9\ud3c9\uade0 \ubaa8\ud615 (Autoregressive integrated moving average model)\n- \ube44\uc815\uc0c1 \uc2dc\uacc4\uc5f4 \ubaa8\ud615 \ucc28\ubd84\uc774\ub098 \ubcc0\ud658\uc744 \ud1b5\ud574 AR, MA, \ub610\ub294 \uc774 \ub458\uc744 \ud569\ud55c ARMA \ubaa8\ud615\uc73c\ub85c \uc815\uc0c1\ud654 \n-    ARIMA(p, d, q) - d : \ucc28\ubd84 \ucc28\uc218 \/ p : AR \ubaa8\ud615 \ucc28\uc218 \/ q : MA \ubaa8\ud615 \ucc28\uc218\n\n\n\ubaa8\ud615 \uadf8 \uc790\uccb4\uc5d0 \uc774\ub7ec\ud55c \ube44\uc815\uc0c1\uc131\uc744 \uc81c\uac70\ud558\ub294 \uacfc\uc815\uc744 \ud3ec\ud568\ud55c\uac83\uc774 ARIMA\ubaa8\ud615\uc774\uba70 ARIMA(p, d, q)\ub85c \ud45c\ud604\ud55c\ub2e4.\n \n      I: Integrated. \ub204\uc801\uc744 \uc758\ubbf8\ud558\ub294 \uac83\uc73c\ub85c, \ucc28\ubd84\uc744 \uc774\uc6a9\ud558\ub294 \uc2dc\uacc4\uc5f4\ubaa8\ud615\ub4e4\uc5d0 \ubd99\uc774\ub294 \ud45c\ud604\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uba74 \ud3b8\ud558\ub2e4. \n      \ucc28\ubd84(Diffrence)\ud69f\uc218\ub97c \uc758\ubbf8\ud558\ub294 d\n\n","13adbc80":"# \uc804\uccb4\ud14c\uc2a4\ud2b8\uc218, \uc74c\uc131\ud310\uc815\uc790, \ud655\uc9c4\uc790 \ub0a0\uc9dc\ubcc4 \ub370\uc774\ud130","473b4a03":"# Daily Confirmed patient, and Accumulated patient EDA\n* Blue line : real accumulated line\n* Red line : prediction line \n* bar graphs is daily Confirmed_count.","96b3715d":"# 03-05 on dataset is mismatched compared to Korea CDC report\n## \uc5c5\ub370\uc774\ud2b8\ub418\ub294 \ub370\uc774\ud130\uc14b\uc5d0 \uc790\ub3d9\uc73c\ub85c \uc644\uce58\uc790\uc218\uac00 \ud569\uccd0\uc9c0\ub294\ub370,, 3\uc6d4 5\uc77c \uc644\uce58\uc790\uc218\uac00 3\uba85\uc73c\ub85c \ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4.\n# need to change value on dataset \ub370\uc774\ud130\uc14b\uc758 \uc218\uc815\uc774 \ud544\uc694\ud55c\uac70\uac19\ub124\uc694. \n\n# \uc798\ubabb\ub41c \ub370\uc774\ud130 3\uc6d45\uc77c\uacfc 3\uc6d47\uc77c\uc758 \ub370\uc774\ud130\ub294 \uc0ad\uc81c\ud588\uace0, \uc62c\ubc14\ub978 \ub370\uc774\ud130\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.","85acdff8":"# **display in double_y graph** plotly \n\n### \ub204\uc801\ud655\uc9c4\uc790\uc218 \uc120\uadf8\ub798\ud504\uc640 \ub2f9\uc77c \ubc1c\ud45c\ub418\ub294 \ud655\uc9c4\uc790\uc218\uc120\uadf8\ub798\ud504\ub97c \ud558\ub098\ub85c \ud45c\uc2dc\ud574\uc11c\n### \ucd5c\uace0\uce58\ub97c \ucc0d\uc740 \ud655\uc9c4\uc790\uc218\ub97c \ud55c\ubc88\uc5d0 \uc2dc\uac01\ud654\ud558\ub3c4\ub85d \ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\ub204\uc801\ud655\uc9c4\uc790\uc218 \uae30\uc6b8\uae30\uac00 \uac00\ud30c\ub97c\ub54c \ub2f9\uc77c \ud655\uc9c4\uc790\uc218\uac00 \ucd5c\uace0\uce58\ub97c \ucc0d\uc5c8\uc74c\uc744 \ubcfc\uc218\uc788\uac8c \ub3c4\uc640\uc90d\ub2c8\ub2e4.","1d2baa99":"# select data by region\n\n# \uc9c0\uc5ed\ub370\uc774\ud130\uac00 \ubc1d\ud600\uc9c4 \ud658\uc790\ub4e4\uc911 Daegu patient =48 \uc774\ub77c \uc194\uc9c1\ud788 \ubb34\uc758\ubbf8\ud55c \ubd84\uc11d\uc785\ub2c8\ub2e4.\n","43b00d80":"# to be continuous... Machine Learning","18ca9bd5":"# Prophet \ubaa8\ub378\uacfc Arima model \uc608\uce21\uac12 \ube44\uad50\n\nprophet\uc740 \ud398\uc774\uc2a4\ubd81\uc5d0\uc11c \uac1c\ubc1c\ud55c \uc2dc\uacc4\uc5f4 \uc608\uce21 \ud328\ud0a4\uc9c0\ub2e4. ARIMA\uc640 \uac19\uc740 \ud655\ub960\ub860\uc801\uc774\uace0 \uc774\ub860\uc801\uc778 \ubaa8\ud615\uc774 \uc544\ub2c8\ub77c \uba87\uac00\uc9c0 \uacbd\ud5d8\uc801 \uaddc\uce59(heuristic rule)\uc744 \uc0ac\uc6a9\ud558\ub294 \ub2e8\uc21c \ud68c\uadc0\ubaa8\ud615\uc774\uc9c0\ub9cc \ub2e8\uae30\uc801 \uc608\uce21\uc5d0\uc11c\ub294 \ud070 \ubb38\uc81c \uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.","975f20b4":"# 3\uc6d4 11\uc77c \uae30\uc900 \uad6d\ub0b4 \ud655\uc9c4\uc790\uc218 \uc5f0\ub839\ub300\ubcc4 \ubd84\ud3ec","027b9005":"# 3-5 \uc644\uce58\uc790\uc218(\uaca9\ub9ac\ud574\uc81c\uc218)\uac00 47\uba85\uc73c\ub85c \ub9ce\uc740 \ud658\uc790\ubd84\uc758 \uce58\ub8cc\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\ucd94\ud6c4\uc758 \uce58\ub8cc\uae30\uac04\uc744 \uacc4\uc0b0\ud574\uc11c \ud68c\ubcf5\uc728\uc758 \uc218\uce58\ub97c \uacc4\uc0b0\ud558\uba74 \uc804\uc5fc\ubcd1\ubaa8\ub378\uc778 SIR \ubaa8\ub378\uc758 parameter \ub85c \uc0ac\uc6a9\ub420\uc218 \uc788\uc2b5\ub2c8\ub2e4","1216794f":"# \uc644\uce58\uc790\uc218\ub97c \uc5f0\ub839\ub300\ubcc4 \uba87\uba85\uc529 \ubd84\ud3ec\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud6c4, \uc131\ubcc4\ub85c \uc7ac\ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n# Classification of sex","b065ced6":"# recent data\n\n![](http:\/\/www.cdc.go.kr\/cdc\/img\/main\/h1_logo.png)\n\nby http:\/\/ncov.mohw.go.kr\/tcmBoardView.do?brdId=&brdGubun=&dataGubun=&ncvContSeq=353378&contSeq=353378&board_id=&gubun=ALL\n","c2b63532":"# CDC \uc9c8\ubcd1\uad00\ub9ac\ubcf8\ubd80 \ubc1c\ud45c\uc77c 3\uc6d4 9\uc77c \uae30\uc900 \uc9c0\uc5ed\ubcc4 \ud655\uc9c4\uc790\uc218 ","a73b6667":"Machine Learning \uc73c\ub85c \uc704\uc758 \uc608\uce21\ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5c8\uc73c\ub098, \ucd94\uac00\ub85c \ub525\ub7ec\ub2dd \ubaa8\ub378\ub85c \ub3c4\uc804\ud574\ubcf4\uae30\ub85c \ud588\uc2b5\ub2c8\ub2e4.\n\n\uc544\uc9c1 \ub525\ub7ec\ub2dd\uacf5\ubd80\ub97c \ub9c8\uc2a4\ud130\ud558\uc9c0 \uc54a\uc558\uae30\ub54c\ubb38\uc5d0 \ud2c0\ub9b0\ubd80\ubd84\uc5d0 \ub300\ud574 \ucca8\uc0ad \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4.\n\n\uc120\ud615\ud68c\uadc0\ub85c \uc2dc\uacc4\uc5f4\ub370\uc774\ud130\ub97c \ubc18\uc601\ud55c \uc2dc\uacc4\uc5f4\ubd84\uc11d\uacfc MLP, LSTM \uc744 \uc2dc\ub3c4\ud588\uc2b5\ub2c8\ub2e4.\n\n# Deep Learning  for Analysis\n\n1. \uc2dc\uacc4\uc5f4 \ubd84\uc11d ARIMA \ubaa8\ub378 ( LSTM \uacfc \ube44\uad50\ud558\uae30 \uc704\ud568)\n2. MLP \uba40\ud2f0\ud37c\uc149\ud2b8\ub860\n3. LSTM Neural Network\n\ucf00\ub77c\uc2a4 TimeseriesGenerator \uc73c\ub85c \uc608\uce21\ud558\uae30\n\n\n\n![\ub300\uccb4 \ud14d\uc2a4\ud2b8](https:\/\/miro.medium.com\/max\/696\/0*kY5G6-jVm6iII65m.png)","9e300030":"# \ud55c\uad6d \ub370\uc774\ud130\uc14b\uc744 \uac00\uc9c0\uace0 \ubd84\uc11d\ud558\uae30\uc5d0 \uc55e\uc11c \uc804\uc138\uacc4\uc801\uc73c\ub85c \ubcc0\ud654\ud558\ub294 \uc218\uce58\ub97c \uac00\uc9c0\uace0 \uc2dc\uac01\ud654\ud558\uc600\uc2b5\ub2c8\ub2e4\n\n# before EDA analysis of Korea nCov-19 , I checked the data of international Confirmed count\nby https:\/\/www.worldometers.info\/coronavirus\/","8abf1e0c":"# \uc9c8\ubcd1\uad00\ub9ac\ubcf8\ubd80 \uc815\ub840\ube0c\ub9ac\ud551 \ubc1c\ud45c\uc790\ub8cc\uc5d0 \uc758\ud55c EDA\n\nhttp:\/\/ncov.mohw.go.kr\/tcmBoardView.do?brdId=&brdGubun=&dataGubun=&ncvContSeq=353378&contSeq=353378&board_id=&gubun=ALL\n\n[\ubcf4\ub3c4\ucc38\uace0\uc790\ub8cc] \ucf54\ub85c\ub098\ubc14\uc774\ub7ec\uc2a4\uac10\uc5fc\uc99d-19 \uad6d\ub0b4 \ubc1c\uc0dd \ud604\ud669(\uc815\ub840\ube0c\ub9ac\ud551).hwp \ub2e4\uc6b4\ubc1b\uc544\ubcf4\uc138\uc694","f9659043":"\uc804\uc138\uacc4\uc801\uc73c\ub85c 2\ubc88\uc9f8 \ub192\uc740 \ud655\uc9c4\uc790\uc218\ub97c \uae30\ub85d\ud558\ub2e4\uac00 \uba87\uc77c\uc804 3\uc704\ub85c,, \uc774\uc81c 4\uc704\ub85c \ub5a8\uc5b4\uc84c\uc2b5\ub2c8\ub2e4.\n\uc774\ub780\uacfc \uc774\ud0c8\ub9ac\uc544\uac00 \ub9ce\uc774 \uac71\uc815\ub418\ub294 \ucd94\uc138\uc785\ub2c8\ub2e4.\n\n# Display of Fatality rate \n\n# \uadf8\ub2e4\uc74c\uc73c\ub85c\ub294 \uc0ac\ub9dd\uc790\uc728\uc5d0 \ub300\ud55c \uce58\uc0ac\uc728 \uadf8\ub798\ud504\uc785\ub2c8\ub2e4.","c0f13081":"# Modeling \uc744 \uc704\ud574\uc11c numpy \ubc30\uc5f4\ub85c \ub9cc\ub4e0\ub2e4.","bc36deb0":"# \uc9c8\ubcd1\uad00\ub9ac\ubcf8\ubd80\uc5d0 \ubcf4\uace0\ub41c \uc815\ub840\ube0c\ub9ac\ud551\uc5d0 \ub530\ub978 \uc9c0\uc5ed\ubcc4 \ubd84\ud3ec \ud30c\uc774\ucc28\ud2b8\uc640\n# \uce90\uae00\ub370\uc774\ud130\uc14b case \uc5d0\uc11c \ubf51\uc544\uc628 \uc9c0\uc5ed\ubcc4 \ubd84\ud3ec \ud30c\uc774\ucc28\ud2b8\uac00 \uc720\uc0ac\ud558\uac8c \ub098\ud0c0\ub0a9\ub2c8\ub2e4.","03d620b8":"# \ucd5c\uc18c\uc790\uc2b9\ubc95 OLS - Simple Linear Regression","82480fa4":"# \uaca9\ub9ac\ud574\uc81c \ub370\uc774\ud130\uac00 55\uba85\uc73c\ub85c \uc77c\uc8fc\uc77c\uc9f8 \uba48\ucdb0\uc788\uc2b5\ub2c8\ub2e4.\n# No update on released date. I can't analize about recovery","17cd8a03":"# Classification of age_generation","1fbd2895":"# Prophet prediction\n\n# \uc2dc\uacc4\uc5f4\ubd84\uc11d\uc744 \uc704\ud574\uc11c Prophet \ubaa8\ub378\uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4.\nhttps:\/\/facebook.github.io\/prophet\/docs\/trend_changepoints.html\nProphet \ubaa8\ub378\uc740 \ubc18\ub4dc\uc2dc 2\uac1c\uc758 \uc5f4 : index, y\uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c\ud569\ub2c8\ub2e4.","caf931ac":"1. New_data EDA update\n    *  Korea Province #patinet \ub370\uc774\ud130\uc758 \uc9c0\uc5ed\ubcc4 \uacb0\uce21\uce58\uac00 \ub9ce\uc558\ub294\ub370, case data\ub97c \uc774\uc6a9\ud574\uc11c EDA \uac00 \uac00\ub2a5\ud574\uc84c\uc2b5\ub2c8\ub2e4.\n    *  test, negative, confirmed analysis #time \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uc5ed\uc2dc \ucd94\uac00\ub85c EDA \uac00\ub2a5\ud574\uc11c \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4.\n2. Intermational data EDA\n3. Patient count EDA analysis plus Prophet time-series analysis.\n4. patient released count EDA analysis.  Classification of age_generation, sex, etc\n5. ARIMA model. SVM, Linear Regressor, MLPm LSTM,","929abb51":"# 3\uc6d4 11\uc77c \uae30\uc900 \uad6d\ub0b4 \ud655\uc9c4\uc790\uc218 \uc131\ubcc4 \ubd84\ud3ec","d03f73a9":"# LSTM with Time Series Generator","de705ffb":"# classification of sex\n\nid                  7383 non-null int64\n\nsex                almost - null value","f600d9d1":"# select data by infection_reason\n\n\ud655\uc9c4\uc790\uc218 dataset\uc5d0\ub294 \uac10\uc5fc\uc774\uc720\ub85c \ubc1d\ud600\uc9c4 \uc218\ub294 146\uba85\uc73c\ub85c \ubaa8\uc9d1\ub2e8\uc778 5328 \uc758 2%\uc5d0 \ubd88\uacfc\ud569\ub2c8\ub2e4. \ubd84\uc11d\uc6a9\uc73c\ub85c\ub294 \ud070\uc758\ubbf8\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\n\ud604\uc7ac Deagu \uc9c0\uc5ed\uc774\ub098 group \uc778 \uacbd\uc6b0 = \uac00\uc7a5 \ud070 \uac10\uc5fc\uc774\uc720\uc778  \"contact with patient\" \ub85c missing value \ub97c replace \ud574\uc900\ub2e4\uba74 \uc880\ub354 \ud45c\ubcf8\uc9d1\ub2e8\uc774 \ucee4\uc9c8\uac83\uc774\ub77c \uc0dd\uac01\uc744 \ud574\ubd05\ub2c8\ub2e4.","83a8d742":"# It doesn't matched on real data\nbottom Pie graph is based on data by CDC","2b0905bd":"# Prophet code \uc5d0\uc11c changepoint_range=default :0.8 \uc785\ub2c8\ub2e4.\n2\uc6d4\ub9d0\ubd80\ud130 3\uc6d4\uae4c\uc9c0 0.98 - 0.9 \ubc94\uc704\uc548\uc5d0\uc11c \uacc4\uc18d \uc870\uc815\ud574\ubcf4\uba74\uc11c 0.95 \uac00 \ucd5c\uc801\uac12\uc784\uc744 \ucc3e\uc558\uc2b5\ub2c8\ub2e4. \n\ucc98\uc74c\ubd80\ud130 \ucd5c\uc801\uac12\uc744 \ucc3e\uace0\uc790 \ud55c\ub2e4\uba74 parameter \ub97c dictionary \ub85c \ub9cc\ub4e4\uc5b4\uc11c \ucd5c\uc801\uc758 \uac12\uc744 \ucc3e\uc544\uac00\ub294 \ubc29\ubc95\uc744 \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","ff6d3313":"# display by plotly module. \n# You can look for detail data when mouse cursor is put on line graph.\n## plotly \uc2dc\uac01\ud654\ub97c \uc774\uc6a9\ud558\uba74 \uc2e4\uc2dc\uac04\uc73c\ub85c \uadf8\ub798\ud504\uc704\uc5d0 \ub370\uc774\ud130\ub97c \ud655\uc778\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4\n## \uc120\uc704\uc5d0 \ub9c8\uc6b0\uc2a4\ucee4\uc11c\ub97c \uc62c\ub9ac\uba74 \uadf8\uc704\uce58\uc758 \uc815\ubcf4\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. (\ucd94\uac00, \uc6d0\ud558\ub294 \uac04\uaca9\uc73c\ub85c \ud655\uc7a5\uac00\ub2a5)","dd20fc0b":"### \uc704\ub370\uc774\ud130\ub294 \uc218\ub3c4\uc640 \uacbd\uae30\ub3c4\uac00 \uac00\uc7a5\ub9ce\uc740 \ud658\uc790\ub85c \ub098\ud0c0\ub098\ub294\ub370 \n### \uc9c8\ubcd1\uad00\ub9ac\ubcf8\ubd80\uc758 \uc815\ub840\ube0c\ub9ac\ud551 \uc790\ub8cc\uc5d0 \ub530\ub974\uba74 \ud604\uc7ac \ub300\uad6c\ub9cc 4000\uba85\uc744 \ub118\uc5c8\uc73c\ub2c8\uae4c\uc694.","f4bd23b9":"# display pie chart","c596cf76":"# \uc644\uce58\uc790 EDA - Released_count\n### groupby('released date') \uc644\uce58\uc790\ub4e4\uc758 dataset \uc744 \ubf51\uc544\ub0c8\uc2b5\ub2c8\ub2e4.\nDataset \uc758 \uc5c5\ub370\uc774\ud2b8\uc911\uc5d0 \ucd5c\uadfc data\ub294 \ucd94\uac00\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \uad6d\ub0b4\uc5d0 \ubcf4\uace0\ub41c \uc218\uce58\uc640 \ub9ce\uc774 \ub2ec\ub77c\uc11c Dataset \uc758 \uc815\ud655\uc131\uc774 \ub5a8\uc5b4\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n03-05 \ubc1c\ud45c\ub85c \ubcf4\uba74 \uaca9\ub9ac\ud574\uc81c\uac00 \ucd1d 88\uba85\uc73c\ub85c.. \uaca9\ub9ac\ud574\uc81c \uc644\uce58\uc790\uc218\uac00 40\uba85\uc774\uc0c1 \uae09\uc99d\ud588\uc2b5\ub2c8\ub2e4.\n\ub370\uc774\ud130\uc14b\uc5d0\uc11c\ub294 3\uba85\uc73c\ub85c \ub418\uc5b4\uc788\uc73c\ub2c8... \uc2ec\uac01\ud558\uac8c \ucc28\uc774\ub098\ub124\uc694.\n\n![](http:\/\/ncov.mohw.go.kr\/front_new\/modules\/img_view.jsp?img_loc=\/upload\/mwEditor\/202003\/1583404684656_20200305193804.png)"}}