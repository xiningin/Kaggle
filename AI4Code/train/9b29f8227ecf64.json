{"cell_type":{"3e095703":"code","61fd3654":"code","de89d802":"code","16ca445f":"code","8ca48063":"code","3decd9d4":"code","26bfbce4":"code","766c2a11":"code","277f48c2":"code","77d1b6cd":"code","eff033be":"code","625defce":"code","d318bc15":"code","c7f11e44":"code","e20fa8d0":"code","66a20c2d":"code","aba182e0":"code","2c5a5b59":"markdown"},"source":{"3e095703":"import os\nimport random\nfrom shutil import copyfile\nimport numpy as np\nfrom sklearn.metrics import *\n!pip install --upgrade keras","61fd3654":"from keras.preprocessing.image import ImageDataGenerator\nimport keras\nfrom keras.layers import Dense,Activation\nfrom keras import models\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dropout\nfrom keras.layers.core import Dense\nfrom keras.applications import inception_v3","de89d802":"def img_train_test_split(img_source_dir, train_size, validation_size):\n    \"\"\"\n    Randomly splits images over a train and validation folder, while preserving the folder structure\n    \n    Parameters\n    ----------\n    img_source_dir : string\n        Path to the folder with the images to be split. Can be absolute or relative path   \n        \n    train_size : float\n        Proportion of the original images that need to be copied in the subdirectory in the train folder\n    \"\"\"\n        \n    # Set up empty folder structure if not exists\n    if not os.path.exists('data'):\n        os.makedirs('data')\n    else:\n        if not os.path.exists('data\/train'):\n            os.makedirs('data\/train')\n        if not os.path.exists('data\/validation'):\n            os.makedirs('data\/validation')\n        if not os.path.exists('data\/test'):\n            os.makedirs('data\/test')    \n    # Get the subdirectories in the main image folder\n    subdirs = [subdir for subdir in os.listdir(img_source_dir) if os.path.isdir(os.path.join(img_source_dir, subdir))]\n\n    for subdir in subdirs:\n        subdir_fullpath = os.path.join(img_source_dir, subdir)\n        if len(os.listdir(subdir_fullpath)) == 0:\n            print(subdir_fullpath + ' is empty')\n            break\n\n        train_subdir = os.path.join('data\/train', subdir)\n        validation_subdir = os.path.join('data\/validation', subdir)\n        test_subdir = os.path.join('data\/test', subdir)\n\n        # Create subdirectories in train and validation folders\n        if not os.path.exists(train_subdir):\n            os.makedirs(train_subdir)\n\n        if not os.path.exists(validation_subdir):\n            os.makedirs(validation_subdir)\n            \n        if not os.path.exists(test_subdir):\n            os.makedirs(test_subdir)\n\n        train_counter = 0\n        validation_counter = 0\n        test_counter = 0\n\n        # Randomly assign an image to train or validation folder\n        for filename in os.listdir(subdir_fullpath):\n            if filename.endswith(\".jpg\") or filename.endswith(\".png\"): \n                fileparts = filename.split('.')\n\n                if random.uniform(0, 1) <= train_size:\n                    if random.uniform(0, 1) <= validation_size:\n                        copyfile(os.path.join(subdir_fullpath, filename), os.path.join(validation_subdir, str(validation_counter) + '.' + fileparts[1]))\n                        validation_counter += 1\n                    else:\n                        copyfile(os.path.join(subdir_fullpath, filename), os.path.join(train_subdir, str(train_counter) + '.' + fileparts[1]))\n                        train_counter += 1\n                else:\n                    copyfile(os.path.join(subdir_fullpath, filename), os.path.join(test_subdir, str(test_counter) + '.' + fileparts[1]))\n                    test_counter += 1\n                    \n        print('Copied ' + str(train_counter) + ' images to data\/train\/' + subdir)\n        print('Copied ' + str(validation_counter) + ' images to data\/validation\/' + subdir)\n        print('Copied ' + str(test_counter) + ' images to data\/test\/' + subdir)","16ca445f":"!mkdir \/tmp\/Xray_train_data\n!cp -R \"..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\" \"\/tmp\/Xray_train_data\/Viral Pneumonia\"\n!cp -R \"..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/NORMAL\" \"\/tmp\/Xray_train_data\"\n!cp -R \"..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/COVID-19\" \"\/tmp\/Xray_train_data\"\n!ls \"\/tmp\/Xray_train_data\/\"","8ca48063":"train_data_dir= \"\/tmp\/Xray_train_data\"","3decd9d4":"img_train_test_split(train_data_dir, 0.8, 0.2)","26bfbce4":"COUNT_NORMAL = len([filename for filename in os.listdir('data\/train\/NORMAL')])\nprint(\"Normal images count in training set: \" + str(COUNT_NORMAL))\n\nCOUNT_COVID = len([filename for filename in os.listdir('data\/train\/COVID-19')])\nprint(\"COVID-19 images count in training set: \" + str(COUNT_COVID))\n\nCOUNT_PNEUMONIA = len([filename for filename in os.listdir('data\/train\/Viral Pneumonia')])\nprint(\"Pneumonia images count in training set: \" + str(COUNT_PNEUMONIA))\n\nprint(\"Normal images count in training set: \" + str(COUNT_NORMAL + COUNT_COVID + COUNT_PNEUMONIA))","766c2a11":"# plt.figure(figsize=(10,5))\n# plt.plot(history.history[\"recall\"],label=\"recall\")\n# plt.plot(history.history[\"val_recall\"],label=\"val_recall\")\n# plt.legend(loc='upper left')","277f48c2":"def Complete_data_generator(img_height = 1024, img_width=1024, batch_size = 16, split = 0.3):\n\n    training_data_directory = \"data\/train\"\n    validation_data_directory = \"data\/validation\"\n    test_data_directory = \"data\/test\"\n    \n    \n    # Rotation is not helpful since, all images have a normalized orientation [Pretty much standard for any xray]\n    # Vertical Flip is also not useful for same reasons\n    # I beleive horizontal flip to be important due to the possibility of more evident infection in one lung.\n    \n    \n    train_datagen = ImageDataGenerator(horizontal_flip=True, rescale=1.\/255, featurewise_center=True,\n                     featurewise_std_normalization=True)\n    test_datagen = ImageDataGenerator(horizontal_flip=True, rescale=1.\/255, featurewise_center=True,\n                     featurewise_std_normalization=True)\n\n    train_generator = train_datagen.flow_from_directory(\n        training_data_directory,\n        target_size=(img_height, img_width),\n        batch_size=batch_size,\n        class_mode='categorical'\n    )\n    \n    validation_generator = test_datagen.flow_from_directory(\n        validation_data_directory,\n        target_size=(img_height, img_width),\n        batch_size=batch_size,\n        class_mode='categorical'\n    )\n    \n    test_generator = test_datagen.flow_from_directory(\n        test_data_directory,\n        target_size=(img_height, img_width),\n        batch_size=batch_size,\n        class_mode='categorical'\n    )\n    \n    return train_generator, validation_generator, test_generator","77d1b6cd":"METRICS = [\n        'accuracy',\n        keras.metrics.Recall(name=\"recall\")\n]","eff033be":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.optimizers import Adam\nimport keras\nfrom keras.models import load_model","625defce":"pretrained_model = load_model('..\/input\/pneumatic-vs-normal-pretrained-model\/PneumoniaVNormal.h5')\n\nprint('Model Loaded')\n\npretrained_model.pop()\n\npretrained_model.add(Dense(3, activation = \"softmax\", name = \"classification_layer\"))","d318bc15":"pretrained_model.summary()","c7f11e44":"pretrained_model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics = METRICS)\n\ntrain_generator, validation_generator, test_generator = Complete_data_generator(224, 224)\n\ntrainer = pretrained_model.fit(train_generator,validation_data=validation_generator,epochs=20,verbose=2)\n\npretrained_model.save('Final.h5', overwrite=True)\n\nprint('Model saved.')","e20fa8d0":"from IPython.display import FileLink\nFileLink(r'Final.h5')","66a20c2d":"Final_Model = load_model('Final.h5')\nFinal_Model.evaluate(test_generator)","aba182e0":"from keras.utils import plot_model\nplot_model(Final_Model, to_file='model.png', rankdir = 'LR')","2c5a5b59":"# Splitting Images between Multiple Folders:\n\nCertain Parts referenced from:\n\nhttps:\/\/gist.github.com\/bertcarremans\/679624f369ed9270472e37f8333244f5"}}