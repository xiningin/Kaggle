{"cell_type":{"c46fe8e3":"code","8b5b3aac":"code","dec25743":"code","265e3409":"code","a9732f8e":"code","ec151d65":"code","7d585e83":"code","3b83dcf2":"code","055cf213":"code","08d3d293":"code","a747ab45":"code","6ddc1dd6":"code","f51379d6":"code","749ae5cf":"code","cd909f5d":"code","55e3f22f":"code","52285f7c":"code","5f4be0dc":"code","580139d7":"code","cf23d337":"code","5d847f56":"code","b6616375":"code","fccdbfef":"code","2f7776ba":"code","9a6ed80f":"code","5cb8045f":"code","f6be5e93":"code","d526c98f":"code","49b7a388":"code","e746163b":"code","7e712a36":"code","197fa488":"code","d8706b3a":"code","8610efb9":"code","376ca3db":"code","2d00cb6b":"code","c10f5cd8":"code","475e532e":"code","c5ae9f94":"code","95a80d34":"code","25a57d24":"markdown","7065eb51":"markdown","399bb5fc":"markdown","1a258811":"markdown"},"source":{"c46fe8e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8b5b3aac":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import roc_curve, roc_auc_score, auc, confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n%matplotlib inline\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression","dec25743":"train = pd.read_csv(\"..\/input\/santander-customer-transaction-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/santander-customer-transaction-prediction\/test.csv\")\n","265e3409":"train.head()","a9732f8e":"test.head()","ec151d65":"print('Train:', train.shape)\nprint('Test:', test.shape)","7d585e83":"sns.countplot(train['target'])","3b83dcf2":"train['target'].value_counts()","055cf213":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of mean values per row in the train and test set\")\nsns.distplot(train.mean(axis=1),color=\"black\", label='train')\nsns.distplot(test.mean(axis=1),color=\"red\",label='test')\nplt.legend()\nplt.show()","08d3d293":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of std values per rows in the train and test set\")\nsns.distplot(train.std(axis=1),color=\"blue\",label='train')\nsns.distplot(test.std(axis=1),color=\"green\",label='test')\nplt.legend(); plt.show()","a747ab45":"Target = train['target']\ntrain_inp = train.drop(columns = ['target', 'ID_code'])\ntest_inp = test.drop(columns = ['ID_code'])\n","6ddc1dd6":"X_train, X_test, y_train,  y_test = train_test_split(train_inp, Target,test_size=0.5, random_state=0)","f51379d6":"print('Train:',X_train.shape)\nprint('Test:',X_test.shape)\nprint('Train:',y_train.shape)\nprint('Test:',y_test.shape)","749ae5cf":"logist = LogisticRegression(class_weight='balanced')\nlogist.fit(X_train, y_train)","cd909f5d":"logist_pred = logist.predict_proba(X_test)[:,1]","55e3f22f":"logist_pred","52285f7c":"def performance(Y_test, logist_pred):\n    logist_pred_var = [0 if i < 0.5 else 1 for i in logist_pred]\n    fpr, tpr, thresholds = roc_curve(Y_test, logist_pred, pos_label=1)\n    print('AUC:')\n    print(auc(fpr, tpr))","5f4be0dc":"performance(y_test, logist_pred)","580139d7":"logist_pred_test = logist.predict_proba(test_inp)[:,1]\nsubmit = test[['ID_code']]\nsubmit['target'] = logist_pred_test\nsubmit.head()","cf23d337":"submit.to_csv('log_reg_baseline.csv', index = False)","5d847f56":"tree = DecisionTreeClassifier(class_weight='balanced',max_depth=4)","b6616375":"tree.fit(X_train, y_train)","fccdbfef":"tree_pred = tree.predict_proba(X_test)[:, 1]\nperformance(y_test, tree_pred)","2f7776ba":"tree = DecisionTreeClassifier(class_weight='balanced',max_depth=10)","9a6ed80f":"tree.fit(X_train, y_train)","5cb8045f":"tree_pred = tree.predict_proba(X_test)[:, 1]\nperformance(y_test, tree_pred)","f6be5e93":"model = RandomForestClassifier(n_estimators=100, class_weight='balanced')","d526c98f":"model.fit(X_train, y_train)","49b7a388":"forest_pred= model.predict_proba(X_test)[:, 1]\nperformance(y_test, forest_pred)","e746163b":"from sklearn.naive_bayes import GaussianNB","7e712a36":"nb = GaussianNB()","197fa488":"nb.fit(X_train,y_train)","d8706b3a":"nb_pred = nb.predict_proba(X_test)[:, 1]\nperformance(y_test, nb_pred)","8610efb9":"nb_pred","376ca3db":"nb_pred_test = nb.predict_proba(test_inp)[:,1]\nsubmit = test[['ID_code']]\nsubmit['target'] = nb_pred_test\nsubmit.head()","2d00cb6b":"submit.to_csv('NB_baseline.csv', index = False)","c10f5cd8":"from sklearn.utils.testing import ignore_warnings\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom xgboost import XGBClassifier","475e532e":"xgb = XGBClassifier(max_depth=8,random_state=0)","c5ae9f94":"xgb.fit(X_train, y_train)","95a80d34":"xgb_pred = xgb.predict_proba(X_test)[:, 1]\nperformance(y_test, xgb_pred)","25a57d24":"**DECISION TREE  MODEL**","7065eb51":"**My Logistic Regression**","399bb5fc":"**The next is Random Forest**","1a258811":"**Naive Bayes**"}}