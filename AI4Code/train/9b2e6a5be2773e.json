{"cell_type":{"414d8c22":"code","7c86edfc":"code","d20b839f":"code","31c23c1f":"code","4ce5ce57":"code","dd382261":"code","1306cbe1":"code","db9c2eb4":"code","26b95469":"code","8a4cc9bf":"code","9df6d42a":"code","832a46c6":"code","efad213b":"code","e99194d8":"code","d0a31f4e":"code","e646bc18":"code","c8c6c9ba":"code","6c7a74b2":"code","b47b040b":"code","bbd1da81":"code","00850e10":"code","ba4877e6":"code","bf85a44f":"code","988c6a31":"code","f1527f62":"code","7439f749":"code","8e6e78a1":"code","61e52e7d":"code","7e753092":"code","cb1bcc4e":"code","239afa76":"code","bc38254b":"code","4a5838df":"code","9638596b":"code","8d27fac4":"code","a5a34a11":"code","c4e7510c":"code","30a61edf":"code","0e4550b4":"code","acd5da90":"code","71fabc35":"code","5956dcf4":"code","8477e5e2":"code","5b554163":"code","e1260831":"code","7f7f9b25":"code","66585489":"code","fabba486":"code","f2be8e6b":"code","72fa001a":"code","0f2ed464":"code","96e4096b":"code","5f55e5a8":"code","d9cd4230":"code","bc4285cf":"code","ae9afb2c":"code","e0666876":"code","c4979651":"code","1d9d8eba":"code","93a4a28d":"code","66c430ce":"code","56b3f2f4":"code","0c686a62":"code","f2756c34":"code","12b96ce8":"code","63041cef":"code","c8e6ca8f":"code","a3707f49":"code","c20d437d":"code","6379ac0e":"code","450a5b27":"code","4e0f1bed":"code","cbf0f119":"code","009033ad":"code","7f204faf":"code","f31c0b67":"code","af36f9d3":"code","e14ae3fb":"markdown","8d74db58":"markdown","9c6d22e2":"markdown","51e0a4eb":"markdown","17c27c1d":"markdown","e4e26756":"markdown","b7380968":"markdown","2fd9195d":"markdown","b406e4df":"markdown","b9389c48":"markdown","c5358972":"markdown","50dab3be":"markdown","f34d6e1a":"markdown","aca99bc6":"markdown","15297a19":"markdown","069cd332":"markdown","01ef9ec7":"markdown","83d51d30":"markdown","cdd03a6f":"markdown","3c3c4897":"markdown","ea82eeb2":"markdown","9cc79c05":"markdown","6d2988af":"markdown","617aa344":"markdown","20ed2818":"markdown","e0bcfc95":"markdown","dbf43a57":"markdown","a30a497d":"markdown"},"source":{"414d8c22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7c86edfc":"data = pd.read_csv(\"..\/input\/vgsales.csv\")","d20b839f":"data.info()","31c23c1f":"data.corr()","4ce5ce57":"f,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(),annot = True, linewidths=.5, fmt = \".1f\",ax=ax)\nplt.show()","dd382261":"data.head() #5 most sold games","1306cbe1":"data.columns","db9c2eb4":"data2 = data.head(10) #sorting first 10 games for data2\ndata2","26b95469":"data2.NA_Sales.plot(kind = \"line\",color = \"g\",label = \"NA_Sales\",linewidth = 2,alpha = 0.5, grid = True,linestyle = \"solid\")\ndata2.EU_Sales.plot(color = \"r\",label = \"EU_Sales\",linewidth = 2,alpha = 0.5, grid = True,linestyle = \"solid\")\nplt.xlabel(\"Top 10 Games\")\nplt.ylabel(\"Sales\")\nplt.legend(loc=\"upper right\")\nplt.title(\"North America and European Sales Comparison\")","8a4cc9bf":"data3 = data.head(100)","9df6d42a":"data3.plot(kind = \"scatter\",x = \"NA_Sales\",y = \"Global_Sales\",alpha = 0.5,color = \"orange\" )\nplt.xlabel(\"North America Sales\")\nplt.ylabel(\"Global Sales\")\nplt.title(\"Global and NA Sales Scatter Plot\")\nplt.show()","832a46c6":"data.Year.plot(kind = \"hist\",bins = 30,figsize = (10,10)) \nplt.ylabel(\"Games\")\nplt.xlabel(\"Years\")\nplt.title(\"Number of Games Over the Years\")\nplt.show()","efad213b":"data.Platform.unique() #Datailed look for platforms","e99194d8":"data[(data[\"Platform\"]==\"PS2\") & (data[\"Year\"]==2010) & (data[\"Global_Sales\"]>0.1)] #2010 PS2 games which global sales are bigger than 0.1 million","d0a31f4e":"def tuble():\n    a = 4,5,6\n    return a\ny,t,g = tuble()\ny,t,g","e646bc18":"a = 45\ndef scope():\n    a = 30\n    return a\nprint(a)\nprint(scope())","c8c6c9ba":"def haha(*args):\n    for i in args:\n        print(i)\nhaha(2023,334,3555,\"sdbsdjf\")","6c7a74b2":"def hehe(**kwargs):\n    for key,value in kwargs.items():\n        print(key,\":\",value)\nhehe(yaban = \"minnak\", canan = \"cinnak\", hamur = \"abi\")","b47b040b":"kare = lambda a: a**2\nkare(3)","bbd1da81":"liste = [23,4,5,6,76]\na = map(lambda x: x+45,liste)\nprint(list(a))","00850e10":"liste1 = [\"yank\u0131\",\"manc\u0131n\u0131k\",43,65]\nliste2 = [43,\"uyu\",56,\"yan\"]\nz = zip(liste1,liste2)\nzlistesi = list(z)\nprint(zlistesi)","ba4877e6":"un_zip = zip(*zlistesi)\nunliste1,unliste2 = list(un_zip)\nprint(unliste1)\nprint(unliste2)","bf85a44f":"hehey = [3,4,6,7,89,9]\nhudey = [i+3 for i in hehey]\nprint(hudey)","988c6a31":"halay = [3,-10,301,34,6,7,8,23]\nyalan = [i-10 if i>10 else i+20 if i<1 else i for i in halay]\nprint(yalan)","f1527f62":"threshold = sum(data2.Global_Sales)\/len(data2.Global_Sales)\ndata[\"Sales_level\"] = [\"High\" if i > threshold else \"Low\" for i in data.Global_Sales]\ndata.loc[:10,[\"Sales_level\",\"Global_Sales\"]] #setting a sales level for global sales ","7439f749":"data.head()","8e6e78a1":"data.tail()","61e52e7d":"data.shape","7e753092":"data.columns","cb1bcc4e":"data.info()","239afa76":"print(data[\"Platform\"].value_counts(dropna = False))#All platforms in this data","bc38254b":"data.describe()","4a5838df":"data2.boxplot(column=\"NA_Sales\")#seeing first 10 games in a boxplot\nplt.show()","9638596b":"data4 = data.head(10)\ndata4","8d27fac4":"melted = pd.melt(frame=data4,id_vars = \"Name\", value_vars = [\"Platform\",\"NA_Sales\"]) #melting data to see only NA_Sales and Platforms\nmelted","a5a34a11":"melted.pivot(index = \"Name\", columns = \"variable\", values = \"value\") #pivoting melted data to see NA_Sales and Platforms in a good order","c4e7510c":"data2 = data.head(10)\ndata1 = data.tail(10)\nconc_data_row = pd.concat([data2,data1], axis = 0, ignore_index = True) #concatenating data2 and data1 in row\nconc_data_row","30a61edf":"data5 = data[\"Name\"].head()\ndata6 = data[\"Genre\"].head()\ndata7 = data[\"Publisher\"].head()\nconc_data_col = pd.concat([data5,data6,data7],axis = 1) #concatenating data5, data6, and data7 in column\nconc_data_col","0e4550b4":"data.dtypes","acd5da90":"data[\"Platform\"] = data[\"Platform\"].astype(\"category\") #changing Platform's data type object to category","71fabc35":"data.dtypes","5956dcf4":"data.info()","8477e5e2":"data[\"Year\"].value_counts(dropna = False) #we're looking values in Year","5b554163":"data7 = data\ndata7[\"Year\"].dropna(inplace = True) #dropping NaN values","e1260831":"assert data7[\"Year\"].notnull().all() #checking if it has worked \n                                     #it returns nothing so it means worked","7f7f9b25":"#data frames from dictionary\ngame = [\"Metro Exodus\",\"Psychonauts\"]\nsales_numbers = [\"10\",\"16\"]\nlist_label = [\"game\",\"sales numbers\"]\nlist_col = [game,sales_numbers]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","66585489":"df[\"year\"] = [\"2019\",\"2005\"]\ndf","fabba486":"df[\"platform\"] = \"PC\"\ndf","f2be8e6b":"data8 = data.loc[:,[\"NA_Sales\",\"EU_Sales\",\"JP_Sales\"]]\ndata8.plot()","72fa001a":"data8.plot(subplots = True)\nplt.show()","0f2ed464":"data8.plot(kind = \"scatter\", x = \"JP_Sales\",y = \"EU_Sales\")\nplt.show()","96e4096b":"data8.plot(kind = \"hist\", y = \"NA_Sales\", bins = 30, range = (0,1),normed=True)\nplt.show()","5f55e5a8":"time_list = [\"2023-06-15\",\"2023-07-18\"]\ndatatime_object = pd.to_datetime(time_list)\nprint(type(datatime_object))","d9cd4230":"import warnings\nwarnings.filterwarnings(\"ignore\")\ndata9 = data.head()\ndate_list = [\"2023-05-16\",\"2023-06-24\",\"2023-07-01\",\"2023-07-23\",\"2023-08-28\"]\ndatetime_object = pd.to_datetime(date_list)\ndata9[\"date\"] = datetime_object\ndata9 = data9.set_index(\"date\")\ndata9","bc4285cf":"print(data9.loc[\"2023-05-16\"])\nprint(data9.loc[\"2023-07-01\":\"2023-08-28\"])","ae9afb2c":"data9.resample(\"A\").mean()","e0666876":"data9.resample(\"M\").mean()","c4979651":"data9.resample(\"M\").first().interpolate(\"linear\")","1d9d8eba":"data10= data.set_index(\"Rank\")","93a4a28d":"data10 = data.head(20)\ndata10","66c430ce":"data10[\"Publisher\"][17]","56b3f2f4":"data10.Publisher[17]","0c686a62":"data10.loc[17,[\"Publisher\"]]","f2756c34":"data10[[\"Year\",\"NA_Sales\"]]","12b96ce8":"data10.loc[14:20,\"Platform\":\"JP_Sales\"]","63041cef":"data.loc[5:13,\"Genre\":]","c8e6ca8f":"boolean = data10.NA_Sales > 11\ndata10[boolean]","a3707f49":"first_filter = data10.EU_Sales < 12\nsecond_filter = data10.Global_Sales > 30\ndata10[first_filter & second_filter]","c20d437d":"data10.Publisher[data10.Global_Sales<26]","6379ac0e":"data10.Global_Sales.apply(lambda n: n\/2)","450a5b27":"print(data.index.name)\ndata.index.name = \"index\"\ndata.head()","4e0f1bed":"data = pd.read_csv(\"..\/input\/vgsales.csv\")\ndata.head()","cbf0f119":"data11 = data.set_index([\"Publisher\",\"Platform\"])\ndata11.head(100)","009033ad":"dic = {\"Game\":[\"Final Fantasy VIII\",\"Crash Bandicoot 2: Cortex Strikes Back\",\"Call of Duty: World at War\",\"Battlefield 3\"],\n       \"Platform\":[\"PS\",\"PS\",\"X360\",\"X360\"],\n      \"Genre\":[\"Role Playing\",\"Platform\",\"Shooter\",\"Shooter\"],\n      \"Rank\":[\"92\",\"90\",\"93\",\"100\"]}\ndf = pd.DataFrame(dic)\ndf","7f204faf":"df2 = df.pivot(index = \"Game\",columns = \"Platform\", values = \"Genre\")\ndf2","f31c0b67":"values = {\"PS\":\"yok\",\"X360\":\"yok\"}\ndf2.fillna(value = values,inplace = True)\ndf2","af36f9d3":"pd.melt(df,id_vars=\"Game\",value_vars=[\"Platform\",\"Genre\"])","e14ae3fb":"### SLICING DATA FRAME\n","8d74db58":"### SCOPE","9c6d22e2":"### LIST COMPREHENS\u0130ON","51e0a4eb":"# 2. Python Data Science Tool Box","17c27c1d":"### LAMBDA FUNCTION and ANONYMOUS FUNCT\u0130ON","e4e26756":"# 4. PANDAS FOUNDATION ","b7380968":"### MELTING DATA FRAMES\n","2fd9195d":"### INDEX OBJECTS AND LABELED DATA\n","b406e4df":"### TIDY DATA","b9389c48":"### VISUAL EXPLORATORY DATA ANALYSIS","c5358972":"### MISSING DATA and TESTING WITH ASSERT","50dab3be":"### PIVOTING DATA","f34d6e1a":"### PIVOTING DATA FRAMES\n","aca99bc6":"### RESAMPLING PANDAS TIME SERIES\n","15297a19":"# 3. Cleaning Data","069cd332":"### EXPLORATORY DATA ANALYSIS","01ef9ec7":"### ITERATORS","83d51d30":"### DATA TYPES\n","cdd03a6f":"### CONCATENATING DATA","3c3c4897":"### BUILDING DATA FRAMES FROM SCRATCH","ea82eeb2":"# MANIPULATING DATA FRAMES WITH PANDAS","9cc79c05":"# 1. Introduction to Python","6d2988af":"### TRANSFORMING DATA\n","617aa344":"### FILTERING DATA FRAMES\n","20ed2818":"### VISUAL EXPLORATORY DATA ANALYSIS","e0bcfc95":"### INDEXING PANDAS TIME SERIES\n","dbf43a57":"### INDEXING DATA FRAMES\n","a30a497d":"### DEFAULT and FLEXIBLE ARGUMENTS"}}