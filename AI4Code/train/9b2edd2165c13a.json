{"cell_type":{"6461aeb1":"code","70e51c6c":"code","a3e48235":"code","ad54faf6":"code","5fe1bfde":"code","a82bc382":"code","b18bfc7b":"code","8f61b894":"code","6804e6b7":"code","d45e8469":"code","bbae3cf7":"code","e81ce705":"code","7e1f6026":"code","447a7427":"code","4d98a6d5":"code","9d7ed143":"code","3cecbc07":"code","021b5242":"code","4faefc40":"code","db6f82c6":"code","0b4cf0cb":"code","ff5d4681":"code","db2bde20":"code","f94a9f16":"code","2d11f522":"code","5ed60d80":"code","27c5e472":"code","f6775641":"code","a0bd3d7b":"code","d6791b47":"code","6d93fe10":"code","19f555f9":"code","9245a3a6":"code","c6ad706c":"code","69b2444f":"code","a9a1b2d9":"code","34d45c99":"code","469b8b6a":"code","1ec1db81":"code","9ad94005":"code","d30f1a8f":"code","d47134e1":"code","1d614fba":"code","88e3aad5":"code","ddf33ac5":"code","54da6d58":"code","553b9e92":"code","67fbbe77":"code","8fecde58":"code","204aa5d1":"code","62753ff3":"code","acd22050":"code","0b9a7ffe":"code","842f0308":"code","8d3c4998":"code","16c40011":"code","8546ca55":"code","4a5306d2":"code","8365ee20":"code","a05f7c3a":"code","70ad70e4":"code","2ff741fb":"code","2944f6b8":"code","684ddf7e":"code","eaa8346f":"markdown","714c83f0":"markdown","73a17c47":"markdown","efcde9e4":"markdown","9bcd290b":"markdown","a3301588":"markdown","f22b4adc":"markdown","398b4f8c":"markdown","155cc0cb":"markdown","960f0302":"markdown","7be93db1":"markdown","ee7c85e8":"markdown","6cba8302":"markdown","6ccbdf04":"markdown","23e0c4a3":"markdown","119c59e8":"markdown"},"source":{"6461aeb1":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn import metrics\nsns.set()\n%matplotlib inline\nplt.style.use('dark_background')\nimport warnings\nwarnings.filterwarnings(\"ignore\")","70e51c6c":"train_data = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/train.csv\")","a3e48235":"train_data.dtypes","ad54faf6":"train_data.head()","5fe1bfde":"print(f'Number of rows: {train_data.shape[0]};  Number of columns: {train_data.shape[1]};  No of missing values: {sum(train_data.isna().sum())}')","a82bc382":"train_data.describe(include=\"all\").T.style.bar(subset=['max'], color='#d35400')\\\n                 .background_gradient(subset=['min','50%','75%'], cmap='Blues')","b18bfc7b":"print('Loss column basic statistics:')\nprint(train_data[\"loss\"].describe())\nprint(\"unique values:\", train_data[\"loss\"].nunique())","8f61b894":"print('Frequency of loss column values: ')\ntrain_data.loss.value_counts()","6804e6b7":"# pd.options.display.max_rows =  None\ntrain_data.dtypes","d45e8469":"int_train = train_data.select_dtypes(include=['int64'])\nint_train","bbae3cf7":"pd.options.display.max_columns = None\nfloat_train = train_data.select_dtypes(include=['float64'])\nfloat_train","e81ce705":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution integer types values in train\", fontsize=20)\nsns.distplot(int_train.mean(axis=1),color=\"green\", kde=True,bins=150)\nplt.ylabel(\"Density\", fontsize=15)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.show()","7e1f6026":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution float types values in train\", fontsize=20)\nsns.distplot(float_train.mean(axis=1),color=\"red\", kde=True,bins=150)\nplt.ylabel(\"Density\", fontsize=15)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.show()","447a7427":"train_data = train_data.abs().astype(np.int64)","4d98a6d5":"train_data","9d7ed143":"sns.set()\nfig,ax = plt.subplots(figsize=(22, 12.5))\nax = sns.barplot(x = train_data[\"loss\"].value_counts().sort_index(),y = train_data[\"id\"],\n                 ax = ax,data = train_data ,palette = \"deep\")\nax.set_xlabel(\"Loss\",fontsize = 20,fontweight = 'bold')\nax.set_ylabel(\"Density\",fontsize = 20,fontweight = 'bold')\nfor p in ax.patches:\n    ax.annotate(format(p.get_height(), '.1f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'bottom', \n                   xytext = (10, 9), \n                   textcoords = 'offset points',rotation = 0,fontsize = 15)\nplt.xticks(rotation = 90, fontsize= 20)\nplt.yticks(fontsize= 20)\n\nplt.title(\"Loss \",y = 1.01,fontsize = 25,fontweight = 'bold')\nplt.show()\n","3cecbc07":"test_data = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/test.csv\")","021b5242":"test_data.head()","4faefc40":"print(f'Number of rows: {test_data.shape[0]}; Number of columns: {test_data.shape[1]}; No of missing values: {sum(test_data.isna().sum())}')","db6f82c6":"test_data.describe(include=\"all\").T.style.bar(subset=['max'], color='#d35400')\\\n                 .background_gradient(subset=['min','50%','75%'], cmap='Blues')","0b4cf0cb":"test_data.dtypes","ff5d4681":"int_test = test_data.select_dtypes(include=['int64'])\nint_test","db2bde20":"pd.options.display.max_columns = None\nfloat_test = test_data.select_dtypes(include=['float64'])\nfloat_test","f94a9f16":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution integer types values in train\", fontsize=20)\nsns.distplot(int_test.mean(axis=1),color=\"blue\", kde=True,bins=150)\nplt.ylabel(\"Density\", fontsize=15)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.show()","2d11f522":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution Float types values in train\", fontsize=20)\nsns.distplot(float_test.mean(axis=1),color=\"orange\", kde=True,bins=150)\nplt.ylabel(\"Density\", fontsize=15)\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.show()","5ed60d80":"test_data = test_data.abs().astype(np.int64)","27c5e472":"test_data","f6775641":"test_data.drop('id',axis = 1, inplace = True)","a0bd3d7b":"# Setting Targets and Inputs","d6791b47":"targets = train_data[\"loss\"]\ninputs = train_data.drop([\"id\",\"loss\"],axis = 1)","6d93fe10":"# Spliting the data ","19f555f9":"from sklearn.model_selection import train_test_split","9245a3a6":"X_train, X_test , y_train , y_test = train_test_split(inputs,targets,test_size=0.2,random_state=123) \n\nprint('X_train:', X_train.shape)\nprint('X_train:', X_test.shape)\nprint('y_test:', y_train.shape)\nprint('y_test:', y_test.shape)","c6ad706c":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nsc.fit(X_train)\nX_train=sc.transform(X_train)\nX_test=sc.transform(X_test)","69b2444f":"# Modeling ","a9a1b2d9":"from sklearn.linear_model import LinearRegression","34d45c99":"reg = LinearRegression()\nreg.fit(X_train,y_train)","469b8b6a":"prediction = reg.predict(X_test)","1ec1db81":"reg.intercept_","9ad94005":"reg.coef_","d30f1a8f":"plt.style.use(\"ggplot\")\nplt.style.use(\"dark_background\")\nplt.figure(figsize=(10,10))\nsns.regplot(y_test, prediction,fit_reg=True, scatter_kws={\"s\": 100},scatter=True,\n            color=\"blue\")\nplt.xlabel(\"Loss\", fontsize = 17)\nplt.show()","d47134e1":"from sklearn.ensemble import RandomForestRegressor","1d614fba":"regressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(inputs,targets)","88e3aad5":"preds = regressor.predict(inputs)","ddf33ac5":"print(\"Accuracy: \",regressor.score(inputs,targets))","54da6d58":"plt.style.use(\"ggplot\")\nplt.style.use(\"dark_background\")\nplt.figure(figsize=(10,10))\nsns.regplot(targets, preds,fit_reg=True, scatter_kws={\"s\": 100},scatter=True,color=\"red\")\nplt.xlabel(\"Loss\", fontsize = 17)\nplt.show()","553b9e92":"import catboost as ctb","67fbbe77":"cbr = ctb.CatBoostRegressor()\ncbr.fit(inputs,targets)","8fecde58":"preds3 = cbr.predict(inputs)","204aa5d1":"print(\"r2 score: \",metrics.r2_score(targets, preds3))\nprint(\"mse: \",np.log(metrics.mean_squared_log_error(targets, preds3)))","62753ff3":"plt.style.use(\"ggplot\")\nplt.style.use(\"dark_background\")\nplt.figure(figsize=(10,10))\nsns.regplot(targets, preds3,fit_reg=True, scatter_kws={\"s\": 100},scatter=True,color=\"green\")\nplt.xlabel(\"Loss\", fontsize = 17)\nplt.show()","acd22050":"from lightgbm import LGBMRegressor","0b9a7ffe":"ltb = LGBMRegressor(objective='regression')\nltb.fit(inputs, targets)","842f0308":"preds4 = ltb.predict(inputs)","8d3c4998":"# Manually r2 score ","16c40011":"er = []\ng = 0\nfor i in range(len(targets)):\n    print( \"actual=\", targets[i], \" observed=\", preds4[i])\n    x = (targets[i] - preds4[i]) **2\n    er.append(x)\n    g = g + x","8546ca55":"m = np.mean(targets)\ny = 0\nfor i in range(len(targets)):\n    y = y + ((targets[i] - m) ** 2)","4a5306d2":"print(1 - (g \/ y))\nprint(np.log((metrics.mean_squared_log_error(targets, preds4))))","8365ee20":"plt.style.use(\"ggplot\")\nplt.style.use(\"dark_background\")\nplt.figure(figsize=(10,10))\nsns.regplot(targets, preds4,fit_reg=True, scatter_kws={\"s\": 100},scatter=True,color=\"purple\")\nplt.xlabel(\"Loss\", fontsize = 17)\nplt.show()","a05f7c3a":"sub_data = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv\")","70ad70e4":"predt = ltb.predict(test_data)","2ff741fb":"sub_data['loss'] = predt","2944f6b8":"sub_data.head(50)","684ddf7e":"sub_data.to_csv(\"final_submission.csv\",index = False)","eaa8346f":"# CatBoost Model","714c83f0":"# Distribution Float types","73a17c47":"# Cleaning the train data","efcde9e4":". There are 95 columns which are float and 7 columns which are integer \n. Id column is integer","9bcd290b":"# Cleaning the data","a3301588":"# Distribution float types","f22b4adc":"# Distribution float types","398b4f8c":"# Test data","155cc0cb":". There are 95 columns which are float and 7 columns which are integer \n. Loss column is interger ","960f0302":"# Describing the basic Statistics ","7be93db1":"# Random Forest Regressor","ee7c85e8":"# Missing Values ","6cba8302":"# Data types","6ccbdf04":"# Distribution integer types","23e0c4a3":"# Describing the basic Statistics ","119c59e8":"# Data types"}}