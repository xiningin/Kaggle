{"cell_type":{"118ff007":"code","fe929eb6":"code","809fab84":"code","ebf72f7e":"code","e74e4518":"code","e4f393ec":"code","c0fc3551":"code","06185f46":"code","d3ef5942":"code","0a3c1b9d":"code","f6867be4":"code","a874f6b4":"code","2e7b56f9":"code","6f8608d5":"code","20ab192c":"code","0d5c1992":"code","6e7a6b8c":"code","0e62cef1":"code","c30ee2d5":"code","37cdc44e":"code","6dad0e79":"markdown","54a7647c":"markdown","8fb9bf46":"markdown","93f100d3":"markdown","72dce763":"markdown"},"source":{"118ff007":"import pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor,ExtraTreesRegressor,BaggingRegressor\nfrom sklearn.model_selection import train_test_split,RandomizedSearchCV,GridSearchCV\nfrom sklearn.metrics import mean_absolute_error","fe929eb6":"data = pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')\ndata.head(10)","809fab84":"data.info()","ebf72f7e":"data.columns","e74e4518":"fig ,axes = plt.subplots()\naxes.bar(data['Serial No.'] ,data['Chance of Admit '],color='salmon');","e4f393ec":"X = data.drop('Chance of Admit ',axis=1)\ny = data['Chance of Admit ']","c0fc3551":"np.random.seed(42)\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\nmodel = RandomForestRegressor()\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)","06185f46":"np.random.seed(40)\nmodel = GradientBoostingRegressor()\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)","d3ef5942":"np.random.seed(40)\nmodel = ExtraTreesRegressor()\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)","0a3c1b9d":"np.random.seed(40)\nmodel = BaggingRegressor()\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)","f6867be4":"model_gre = GradientBoostingRegressor()\nmodel_gre.fit(X_train,y_train)\nmodel_gre.score(X_test,y_test)","a874f6b4":"model_gre.get_params()","2e7b56f9":"grid = {'max_depth':[1,2,3],\n        'min_samples_leaf':[0.5,1],\n        'max_features':['auto','sqrt'],\n        'min_samples_leaf':[1,2,3],\n        'min_samples_split':[1,2]}\nmodel_gre_gs = GridSearchCV(estimator=model_gre,param_grid=grid,verbose=2,n_jobs=2)\nmodel_gre_gs.fit(X_train,y_train)\nmodel_gre_gs.score(X_test,y_test)","6f8608d5":"y_prediction = model_gre.predict(X)\ny_prediction","20ab192c":"Sub = pd.DataFrame()","0d5c1992":"Sub['Original'] = data['Chance of Admit ']\nSub['Predictions'] = y_prediction","6e7a6b8c":"Sub","0e62cef1":"Sub.plot(kind='bar',figsize=(10,8))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='salmon')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","c30ee2d5":"y_prediction = model_gre.predict(X_test)\nimport sklearn.metrics as met\nmse = met.mean_squared_error(y_test,y_prediction)\nprint('Mean Squared Error : ',mse)\nr2 = met.r2_score(y_test,y_prediction)\nprint('R-square_score : ',r2)\nrmse = np.sqrt(mse)\nprint('Root mean squared error : ',rmse)","37cdc44e":"sns.regplot(x = Sub['Original'], y = Sub['Predictions'],color='salmon');","6dad0e79":"## Lets start modelling.","54a7647c":"## Dividing the data into two planes.","8fb9bf46":"# Summary of the data :\n\n    Using GradientBoostingRegressor RMSE => 0.057001195222511944\n    \n    GradientBoostingRegressor made better predictions than a simple LinearRegression model as well as ExtraTreesRegressor and \n    BaggingRegressor","93f100d3":"## Getting our tools ready","72dce763":"## Importing dataset"}}