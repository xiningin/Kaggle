{"cell_type":{"7bc456ff":"code","b70d1997":"code","3f90137b":"code","1f4c94d0":"code","fb84d0d7":"code","63b0d3de":"code","173cbd25":"code","8fa26b80":"code","ff7d6874":"code","bee1e36c":"code","983a012d":"code","b74d83ed":"code","64581f06":"code","d9b5b07c":"code","5bf0f385":"code","0845b8db":"code","dbc5570e":"code","44da21f6":"code","8efb26f3":"code","73670f79":"code","3786def9":"code","42e8569b":"code","78f52761":"code","a5882e07":"code","97326a6c":"markdown","0cfe9130":"markdown","881cd3e0":"markdown","382775d3":"markdown","eb6eca36":"markdown","bb55da51":"markdown","9f42d316":"markdown"},"source":{"7bc456ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b70d1997":"import math, re, os\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\nprint(\"Tensorflow version \" + tf.__version__)","3f90137b":"# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","1f4c94d0":"from kaggle_datasets import KaggleDatasets\n\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started')\nprint(GCS_DS_PATH) # what do gcs paths look like?","fb84d0d7":"from matplotlib import pyplot as plt\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case,\n                                     # these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is\n    # the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square\n    # or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n\n\ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","63b0d3de":"IMAGE_SIZE = [512, 512]\nGCS_PATH = GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\nAUTO = tf.data.experimental.AUTOTUNE\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') \n\nCLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102\n\n\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset","173cbd25":"IMAGE_SIZE = [512, 512]\ndef resize_and_rescale(image, label):\n  image = tf.cast(image, tf.float32)\n  image = tf.image.resize(image, [IMAGE_SIZE, IMAGE_SIZE])\n  image = (image \/ 255.0)\n  return image, label\n\ndef data_augment(image, label):\n    # Thanks to the dataset.prefetch(AUTO)\n    # statement in the next function (below), this happens essentially\n    # for free on TPU. Data pipeline code is executed on the \"CPU\"\n    # part of the TPU while the TPU itself is computing gradients.\n    \n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_saturation(image, 0, 2)\n    image = tf.image.flip_up_down(image)\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    image = tf.image.rot90(image)\n    image = tf.image.transpose(image)\n    \n#     image, label = resize_and_rescale(image, label)\n#     # Add 6 pixels of padding\n    image = tf.image.resize_with_crop_or_pad(image, IMAGE_SIZE[0] + 6, IMAGE_SIZE[1] + 6) \n#     # Random crop back to the original size\n    image = tf.image.random_crop(image, size=[IMAGE_SIZE[0], IMAGE_SIZE[1], 3])\n    image = tf.image.random_brightness(image, max_delta=0.5) # Random brightness\n    image = tf.clip_by_value(image, 0, 1)\n    \n    image = tf.image.central_crop(image,0.5)\n    \n\n#     NUM_BOXES = 5\n#     IMAGE_HEIGHT = 512\n#     IMAGE_WIDTH = 512\n#     CHANNELS = 3\n#     CROP_SIZE = (24, 24)\n#     boxes = tf.random.uniform(shape=(NUM_BOXES, 4))\n#     box_indices = tf.random.uniform(shape=(NUM_BOXES,), minval=0,\n#     maxval=BATCH_SIZE, dtype=tf.int32)\n#     image = tf.image.crop_and_resize(image, boxes, box_indices, CROP_SIZE)\n\n#     image = tf.image.crop_to_bounding_box(image)  \n#     image = tf.io.decode_and_crop_jpeg(image)\n#     image = tf.image.extract_glimpse(image)\n    \n    \n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec\n    # files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))\n\n# Define the batch size. This will be 16 with TPU off and 128 (=16*8) with TPU on\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nds_train = get_training_dataset()\nds_valid = get_validation_dataset()\nds_test = get_test_dataset()\n\nprint(\"Training:\", ds_train)\nprint (\"Validation:\", ds_valid)\nprint(\"Test:\", ds_test)","8fa26b80":"# Define the batch size. This will be 16 with TPU off and 128 (=16*8) with TPU on\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nds_train = get_training_dataset()\nds_valid = get_validation_dataset()\nds_test = get_test_dataset()\n\nprint(\"Training:\", ds_train)\nprint (\"Validation:\", ds_valid)\nprint(\"Test:\", ds_test)","ff7d6874":"np.set_printoptions(threshold=15, linewidth=80)\n\nprint(\"Training data shapes:\")\nfor image, label in ds_train.take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())","bee1e36c":"print(\"Test data shapes:\")\nfor image, idnum in ds_test.take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) # U=unicode string","983a012d":"ds_iter = iter(ds_train.unbatch().batch(20))","b74d83ed":"one_batch = next(ds_iter)\ndisplay_batch_of_images(one_batch)","64581f06":"# Learning Rate Schedule for Fine Tuning #\nEPOCHS = 12\ndef exponential_lr(epoch,\n                   start_lr = 0.00001, min_lr = 0.00001, max_lr = 0.00005,\n                   rampup_epochs = 5, sustain_epochs = 0,\n                   exp_decay = 0.8):\n\n    def lr(epoch, start_lr, min_lr, max_lr, rampup_epochs, sustain_epochs, exp_decay):\n        # linear increase from start to rampup_epochs\n        if epoch < rampup_epochs:\n            lr = ((max_lr - start_lr) \/\n                  rampup_epochs * epoch + start_lr)\n        # constant max_lr during sustain_epochs\n        elif epoch < rampup_epochs + sustain_epochs:\n            lr = max_lr\n        # exponential decay towards min_lr\n        else:\n            lr = ((max_lr - min_lr) *\n                  exp_decay**(epoch - rampup_epochs - sustain_epochs) +\n                  min_lr)\n        return lr\n    return lr(epoch,\n              start_lr,\n              min_lr,\n              max_lr,\n              rampup_epochs,\n              sustain_epochs,\n              exp_decay)\n\nlr_callback = tf.keras.callbacks.LearningRateScheduler(exponential_lr, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [exponential_lr(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","d9b5b07c":"from sklearn.model_selection import KFold\nfrom tensorflow.keras.applications import DenseNet201\n\nSEED = 777\nFOLDS = 3\nSTEPS_PER_EPOCH = 540\nEPOCHS = 7\n\n# FOLDS = 2\n# STEPS_PER_EPOCH = 1\n# EPOCHS = 1\n\nearly_stopping = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='auto',\n    baseline=None, restore_best_weights=False\n)\n\ndef get_model():\n    with strategy.scope():\n        rnet = DenseNet201(\n            input_shape=(IMAGE_SIZE[0], IMAGE_SIZE[1], 3),\n            weights='imagenet',\n            include_top=False\n        )\n        # trainable rnet\n        rnet.trainable = True\n        model = tf.keras.Sequential([\n            rnet,\n            tf.keras.layers.GlobalAveragePooling2D(),\n            tf.keras.layers.Dense(len(CLASSES), activation='softmax',dtype='float32')\n        ])\n    model.compile(\n        optimizer='adam',\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy']\n    )\n    return model\n\ndef train_cross_validate(folds = 5):\n    histories = []\n    models = []\n    early_stopping = tf.keras.callbacks.EarlyStopping(monitor = 'val_loss', patience = 3)\n    kfold = KFold(folds, shuffle = True, random_state = SEED)\n    for f, (trn_ind, val_ind) in enumerate(kfold.split(TRAINING_FILENAMES)):\n        print(); print('#'*25)\n        print('### FOLD',f+1)\n        print('#'*25)\n        train_dataset = ds_train\n        val_dataset = ds_valid\n        model = get_model()\n        history = model.fit(\n            train_dataset, \n            steps_per_epoch = STEPS_PER_EPOCH,\n            epochs = EPOCHS,\n            callbacks = [early_stopping],#, early_stopping],\n            validation_data = val_dataset,\n            verbose=2\n        )\n        models.append(model)\n        histories.append(history)\n    return histories, models\n\ndef train_and_predict(folds = 5):\n    test_ds = get_test_dataset(ordered=True)\n    test_images_ds = test_ds.map(lambda image, idnum: image)\n    print('Start training %i folds'%folds)\n    histories, models = train_cross_validate(folds = folds)\n    print('Computing predictions...')\n    # get the mean probability of the folds models\n    probabilities = np.average([models[i].predict(test_images_ds) for i in range(folds)], axis = 0)\n    predictions = np.argmax(probabilities, axis=-1)\n    print('Generating submission.csv file...')\n    test_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\n    test_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\n    np.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='',)\n    return histories, models\n\n\n# run train and predict\nhistory, model = train_and_predict(folds = FOLDS)\n\n","5bf0f385":"# history","0845b8db":"# display_training_curves(\n#     history[1].history['loss'],\n#     history[1].history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history[1].history['sparse_categorical_accuracy'],\n#     history[1].history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )","dbc5570e":"# EPOCHS = 24\n\n# with strategy.scope():\n#     pretrained_model = tf.keras.applications.VGG16(\n#         weights='imagenet',\n#         include_top=False ,\n#         input_shape=[*IMAGE_SIZE, 3]\n#     )\n#     pretrained_model.trainable = False\n    \n#     model = tf.keras.Sequential([\n#         # To a base pretrained on ImageNet to extract features from images...\n#         pretrained_model,\n#         # ... attach a new head to act as a classifier.\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#     ])\n    \n# model.compile(\n#     optimizer='adam',\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics=['sparse_categorical_accuracy'],\n# )\n# wide = model \n\n# model.summary()\n\n# # Define training epochs\n# EPOCHS = 20\n# STEPS_PER_EPOCH = 900\n\n# history = model.fit(\n#     ds_train,\n#     validation_data=ds_valid,\n#     epochs=EPOCHS,\n#     steps_per_epoch=STEPS_PER_EPOCH,\n#     callbacks=[lr_callback],\n# )\n\n# display_training_curves(\n#     history.history['loss'],\n#     history.history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history.history['sparse_categorical_accuracy'],\n#     history.history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )","44da21f6":"# EPOCHS = 24\n\n# with strategy.scope():\n#     pretrained_model = tf.keras.applications.DenseNet201(\n#         weights='imagenet',\n#         include_top=False ,\n#         input_shape=[*IMAGE_SIZE, 3]\n#     )\n#     pretrained_model.trainable = False\n    \n#     model = tf.keras.Sequential([\n#         # To a base pretrained on ImageNet to extract features from images...\n#         pretrained_model,\n#         # ... attach a new head to act as a classifier.\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#     ])\n    \n# model.compile(\n#     optimizer='adam',\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics=['sparse_categorical_accuracy'],\n# )\n# wide = model \n\n# model.summary()\n\n# # Define training epochs\n# EPOCHS = 20\n# STEPS_PER_EPOCH = 900\n\n# early_stopping = tf.keras.callbacks.EarlyStopping(\n#     monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='auto',\n#     baseline=None, restore_best_weights=False\n# )\n\n# history = model.fit(\n#     ds_train,\n#     validation_data=ds_valid,\n#     epochs=EPOCHS,\n#     steps_per_epoch=STEPS_PER_EPOCH,\n#     callbacks=[lr_callback,early_stopping],\n# )\n\n# display_training_curves(\n#     history.history['loss'],\n#     history.history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history.history['sparse_categorical_accuracy'],\n#     history.history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )","8efb26f3":"# EPOCHS = 12\n\n# with strategy.scope():\n#     pretrained_model = tf.keras.applications.ResNet101(\n#         weights='imagenet',\n#         include_top=False ,\n#         input_shape=[*IMAGE_SIZE, 3]\n# )\n#     pretrained_model.trainable = False\n    \n#     model = tf.keras.Sequential([\n#         # To a base pretrained on ImageNet to extract features from images...\n#         pretrained_model,\n#         # ... attach a new head to act as a classifier.\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#     ])\n\n    \n    \n#     deep = model\n'''  \nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy'],\n)\n\nmodel.summary()\n\n# Define training epochs\nEPOCHS = 12\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\nhistory = model.fit(\n    ds_train,\n    validation_data=ds_valid,\n    epochs=EPOCHS,\n    steps_per_epoch=STEPS_PER_EPOCH,\n    callbacks=[lr_callback],\n)\n\ndisplay_training_curves(\n    history.history['loss'],\n    history.history['val_loss'],\n    'loss',\n    211,\n)\ndisplay_training_curves(\n    history.history['sparse_categorical_accuracy'],\n    history.history['val_sparse_categorical_accuracy'],\n    'accuracy',\n    212,\n)\n'''","73670f79":"# EPOCHS = 12\n\n# with strategy.scope():\n#     pretrained_model = tf.keras.applications.InceptionV3(\n#         weights='imagenet',\n#         include_top=False ,\n#         input_shape=[*IMAGE_SIZE, 3]\n# )\n#     pretrained_model.trainable = False\n    \n#     model = tf.keras.Sequential([\n#         # To a base pretrained on ImageNet to extract features from images...\n#         pretrained_model,\n#         # ... attach a new head to act as a classifier.\n#         tf.keras.layers.GlobalAveragePooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#     ])\n\n   \n    \n    \n    \n# model.compile(\n#     optimizer='adam',\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics=['sparse_categorical_accuracy'],\n# )\n\n# model.summary()\n\n# # Define training epochs\n# EPOCHS = 12\n# STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\n# history = model.fit(\n#     ds_train,\n#     validation_data=ds_valid,\n#     epochs=EPOCHS,\n#     steps_per_epoch=STEPS_PER_EPOCH,\n#     callbacks=[lr_callback],\n# )\n\n# display_training_curves(\n#     history.history['loss'],\n#     history.history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history.history['sparse_categorical_accuracy'],\n#     history.history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )\n","3786def9":"# from tensorflow import keras\n\n# with strategy.scope():\n#     wide_and_deep = keras.experimental.WideDeepModel(\n#         linear_model=wide,\n#         dnn_model=deep,\n#         activation='sigmoid',\n#     )\n\n# wide_and_deep.compile(\n#     optimizer='adam',\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics=['sparse_categorical_accuracy'],\n# )\n\n\n\n# # Define training epochs\n# EPOCHS = 12\n# STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\n# history = wide_and_deep.fit(\n#     ds_train,\n#     validation_data=ds_valid,\n#     epochs=EPOCHS,\n#     steps_per_epoch=STEPS_PER_EPOCH,\n#     callbacks=[lr_callback],\n# )\n# wide_and_deep.summary()\n# display_training_curves(\n#     history.history['loss'],\n#     history.history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history.history['sparse_categorical_accuracy'],\n#     history.history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )","42e8569b":"# with strategy.scope():\n#     model = tf.keras.models.Sequential([tf.keras.layers.Flatten(), \n#                                         tf.keras.layers.Dropout(0.2, input_shape=(20,)),\n#                                         tf.keras.layers.Dense(128, activation=tf.nn.relu), \n#                                         tf.keras.layers.Dropout(0.2, input_shape=(20,)),\n#                                         tf.keras.layers.Dense(10, activation=tf.nn.softmax)])\n\n# model.compile(\n#     optimizer='adam',\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics=['sparse_categorical_accuracy'],\n# )\n\n# model.fit(\n#     ds_train,\n#     validation_data=ds_valid,\n#     epochs=EPOCHS,\n#     steps_per_epoch=STEPS_PER_EPOCH,\n#     callbacks=[lr_callback],\n# )\n\n# display_training_curves(\n#     history.history['loss'],\n#     history.history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history.history['sparse_categorical_accuracy'],\n#     history.history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )\n","78f52761":"# test_ds = get_test_dataset(ordered=True)\n\n# print('Computing predictions...')\n# test_images_ds = test_ds.map(lambda image, idnum: image)\n# probabilities = model.predict(test_images_ds)\n# predictions = np.argmax(probabilities, axis=-1)\n# print(predictions)","a5882e07":"# print('Generating submission.csv file...')\n\n# # Get image ids from test set and convert to unicode\n# test_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\n# test_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\n# # Write the submission file\n# np.savetxt(\n#     'submission.csv',\n#     np.rec.fromarrays([test_ids, predictions]),\n#     fmt=['%s', '%d'],\n#     delimiter=',',\n#     header='id,label',\n#     comments='',\n# )\n\n# # Look at the first few predictions\n# !head submission.csv","97326a6c":"# Self-made model","0cfe9130":"# DenseNet 201 with kfolds","881cd3e0":"# Using Resnet101","382775d3":"# Using Wide and Deep ","eb6eca36":"# Dense Net 101\n","bb55da51":"# Using InceptionV3","9f42d316":"# Using VGG"}}