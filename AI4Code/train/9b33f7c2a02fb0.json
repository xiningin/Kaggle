{"cell_type":{"81ca9fc6":"code","0cceb0b1":"code","69a1a200":"code","706cc528":"code","8bcf3658":"code","a45663da":"code","fe9ff246":"code","be6c354f":"code","9911efe9":"code","b5e61c20":"code","29999099":"code","ccebaee7":"code","87063714":"code","89f3be21":"code","7c5946a7":"code","4f618400":"code","b387f70f":"code","50d641b3":"code","f5281afa":"code","ef49afec":"code","40913ae6":"code","0715a461":"code","402445ea":"code","297aa78e":"code","20836327":"code","ba66cba3":"code","9eff5be3":"code","fd2c241d":"code","cab3e363":"code","4368a49d":"code","e8a72a0d":"code","4dd8671c":"code","9e14194f":"code","5187ec75":"code","eca17cca":"code","660d57fc":"code","2518b52f":"code","fea2d1ab":"code","6783f4c3":"code","a497ed64":"code","d0f28644":"code","4f3e9659":"code","7999716d":"code","2f7116b5":"code","1aea01db":"code","3d8e2c97":"code","838345c2":"code","48a5e11c":"code","0b89a29e":"markdown","82b65439":"markdown","62e03a4a":"markdown","2f1463aa":"markdown","5e34df3f":"markdown","2df95d9d":"markdown","779b0679":"markdown","725bbd5e":"markdown","aa7fb954":"markdown","d9481f83":"markdown","cbe94205":"markdown","2474a51f":"markdown","79a41075":"markdown","e7feec2c":"markdown","24bee409":"markdown","62f7463f":"markdown","a9eaa08a":"markdown","7cca2f04":"markdown","6846af3c":"markdown","946a96b6":"markdown","1cb2e261":"markdown","6df6f61e":"markdown","d2401bd3":"markdown","e5844593":"markdown","cc31aa11":"markdown","3480415c":"markdown","83131370":"markdown","2355e129":"markdown","272da8ec":"markdown","439df68b":"markdown","be3ad3e2":"markdown","f51472e5":"markdown","4d01adc6":"markdown","645c36d4":"markdown","8ddba184":"markdown","b8028a4b":"markdown","3a2044d0":"markdown"},"source":{"81ca9fc6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline ","0cceb0b1":"from plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\ninit_notebook_mode(connected=True)\ncf.go_offline()","69a1a200":"directory = \"\/kaggle\/input\/airline-passenger-satisfaction\/\"\nfeature_tables = ['train.csv', 'test.csv']\n\ndf_train = directory + feature_tables[0]\ndf_test = directory + feature_tables[1]\n\n# Create dataframes\nprint(f'Reading csv from {df_train}...')\ndf = pd.read_csv(df_train)\nprint('...Complete')\n\nprint(f'Reading csv from {df_train}...')\ndf2 = pd.read_csv(df_test)\nprint('...Complete')","706cc528":"df.head()","8bcf3658":"df.info()","a45663da":"df.isnull().sum()","fe9ff246":"df.isnull().sum()\/len(df)","be6c354f":"df.describe().transpose()","9911efe9":"plt.figure(figsize=(20,15))\nsns.heatmap(df.corr(),annot=True,cmap='coolwarm')\nplt.tight_layout","b5e61c20":"df['satisfaction'].value_counts()","29999099":"sns.countplot(x='satisfaction',data=df)","ccebaee7":"def satisfac(string):\n    if string == 'satisfied': return 1\n    else: return 0\n\ndf['satisfactionN'] =df['satisfaction'].apply(satisfac)    ","87063714":"df.head(5)","89f3be21":"df.drop('satisfaction',inplace=True,axis=1)","7c5946a7":"plt.figure(figsize=(20,15))\nsns.heatmap(df.corr(),annot = True,cmap='coolwarm')","4f618400":"df.corr()['satisfactionN'].sort_values().drop('satisfactionN').plot(kind='bar')","b387f70f":"df['Online boarding'].value_counts()","50d641b3":"df['Online boarding'].plot(kind='hist',ec='black')","f5281afa":"sns.boxplot(x='satisfactionN',y = 'Online boarding',data=df)","ef49afec":"df.head()","40913ae6":"GenderN = pd.get_dummies(df['Gender'],drop_first=True)\nCustomerN = pd.get_dummies(df['Customer Type'],drop_first=True)\nTypeN = pd.get_dummies(df['Type of Travel'],drop_first=True)\nClassN = pd.get_dummies(df['Class'],drop_first=True)\ndf = pd.concat([df,GenderN,CustomerN,TypeN,ClassN],axis =1)\ndf.drop(['Gender','Customer Type','Type of Travel','Class'],inplace =True,axis = 1)","0715a461":"plt.figure(figsize=(25,20))\nsns.heatmap(df.corr(),annot = True,cmap='coolwarm')","402445ea":"df.corr()['satisfactionN'].sort_values().drop('satisfactionN').plot(kind='bar')","297aa78e":"df.corr()['Online boarding'].sort_values().drop(['Online boarding','satisfactionN']).plot(kind='bar')","20836327":"sns.boxplot(x='Inflight wifi service',y = 'Online boarding',data=df)","ba66cba3":"df['Flight Distance'].iplot(kind='hist',bins=50)","9eff5be3":"df['Age'].iplot(kind='hist',bins=50)","fd2c241d":"import plotly.express as px\nfig = px.box(df, x=\"satisfactionN\", y=\"Age\", color=\"Eco\")\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","cab3e363":"sns.lmplot(x='Departure Delay in Minutes',y='Arrival Delay in Minutes',data=df)","4368a49d":"df.drop('Arrival Delay in Minutes',axis=1,inplace=True)","e8a72a0d":"df.isnull().sum()\/len(df)\n# Only 0.002% data is missing, so we can drop the rows \n# Data was missing in only \"Arrival delay in Minutes\" column , so these steps are not necessary","4dd8671c":"df.dropna(axis=0,inplace=True)","9e14194f":"df.drop(['Unnamed: 0','id'],axis=1,inplace=True)","5187ec75":"#importing the libraries\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB","eca17cca":"X_train = df.drop('satisfactionN',axis=1)\ny_train = df['satisfactionN']","660d57fc":"df2['satisfactionN'] =df2['satisfaction'].apply(satisfac)\nGenderN = pd.get_dummies(df2['Gender'],drop_first=True)\nCustomerN = pd.get_dummies(df2['Customer Type'],drop_first=True)\nTypeN = pd.get_dummies(df2['Type of Travel'],drop_first=True)\nClassN = pd.get_dummies(df2['Class'],drop_first=True)\ndf2 = pd.concat([df2,GenderN,CustomerN,TypeN,ClassN],axis =1)\ndf2.drop(['Gender','Customer Type','Type of Travel','Class'],inplace =True,axis = 1)\ndf2.drop('Arrival Delay in Minutes',axis=1,inplace=True)\ndf2.drop(['Unnamed: 0','id'],axis=1,inplace=True)","2518b52f":"df2.drop('satisfaction',axis=1,inplace=True)\nX_test = df2.drop('satisfactionN',axis=1)\ny_test= df2['satisfactionN']","fea2d1ab":"print(\"X_train {}\\nX_test {}\\ny_train {}\\ny_test {}\".format(X_train.shape,X_test.shape,y_train.shape,y_test.shape))","6783f4c3":"classifier1 = RandomForestClassifier(n_estimators=100,criterion='entropy',random_state=0,n_jobs=-1)\nclassifier1.fit(X_train,y_train)","a497ed64":"y_pred = classifier1.predict(X_test)","d0f28644":"# importing accuracy parameters\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(classification_report(y_test,y_pred))\nprint('\\n\\n\\n')\nprint('Confusion matrix : \\n{}'.format(confusion_matrix(y_test,y_pred)))\nprint('\\n')\nprint('Accuracy score : {}'.format(accuracy_score(y_test,y_pred)))\nacc_random_forest = accuracy_score(y_test,y_pred)","4f3e9659":"classifier2 = XGBClassifier(n_estimators = 500,n_jobs=-1)\nclassifier2.fit(X_train,y_train)","7999716d":"#Predicting on test set results\ny_pred = classifier2.predict(X_test)","2f7116b5":"# importing accuracy parameters\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(classification_report(y_test,y_pred))\nprint('\\n\\n\\n')\nprint('Confusion matrix : \\n{}'.format(confusion_matrix(y_test,y_pred)))\nprint('\\n')\nprint('Accuracy score : {}'.format(accuracy_score(y_test,y_pred)))\nacc_xgboost = accuracy_score(y_test,y_pred)","1aea01db":"classifier3 = GaussianNB()\nclassifier3.fit(X_train,y_train)","3d8e2c97":"#Predicting on test set results\ny_pred = classifier3.predict(X_test)","838345c2":"# importing accuracy parameters\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(classification_report(y_test,y_pred))\nprint('\\n\\n\\n')\nprint('Confusion matrix : \\n{}'.format(confusion_matrix(y_test,y_pred)))\nprint('\\n')\nprint('Accuracy score : {}'.format(accuracy_score(y_test,y_pred)))\nacc_naive_bayes = accuracy_score(y_test,y_pred)","48a5e11c":"print('Accuracy:-\\n')\nprint(\"Random Forest {}\\nXGBoost {}\\nNaive Bayes {}\\n\".format(acc_random_forest,acc_xgboost,acc_naive_bayes))","0b89a29e":"Importing the datasets","82b65439":"Removing unnecessary data","62e03a4a":"Removing missing data","2f1463aa":"Checking the missing values in the dataset","5e34df3f":"Arrival Delay and Departure delay have a linear relation, so we can drop one column","2df95d9d":"It is majorly correlated with inflight wifi service ","779b0679":"# Preprocessing the data","725bbd5e":"# Based on the performance,these three models suits our dataset quite efficiently\n# 1. Random Forest Classifier\n# 2. XgBoost\n# 3. Naive Bayes(for general classification)","aa7fb954":"People who gets better service of inflight wifi likely to apply for online boarding and gives better rating.","d9481f83":"Analysing the catagorical variables, we came to know that People travelling in economy class and on a personal travel are unlikely to get satisfied.Now we know that people choosing online boarding are most satisfied. Lets check the correlation of online boarding with others","cbe94205":"# Comparing the results","2474a51f":"# Applying Different models ","79a41075":"# Now applying naive_bayes","e7feec2c":"# Exploratory Data Analysis","24bee409":"percentage of missing data","62f7463f":"# So Random Forest works best for this class","a9eaa08a":"Converting the catagorical parameters to continous using pandas inbuild function get_dummies","7cca2f04":"Age has a normal distribution with most people between 20 to 60","6846af3c":"Predicting on test set ","946a96b6":"So column with numerical value of satisfaction is created  named satisfactionN,\nwe can drop the satisfaction column","1cb2e261":"Now converting the satisfaction column to continuous variable. For this, a function named satisfac is created","6df6f61e":"We have to remove the missing data in column (later)","d2401bd3":"# Now applying Random forest","e5844593":"Most of the flights are between 0 to 1000 kms","cc31aa11":"id and unnamed column doesn't contain any information for model training, so we can drop those column too.(Later)","3480415c":"Importing the libraries","83131370":"From the boxplot we can infer that people who are sitting in economy class between age 24 to 50 are likely to be more satisfied","2355e129":"The more satisfied the person is with online boarding then there are greater chances that the person will be satisfied. Same is the case for all the other parameters ","272da8ec":"From countplot we can say the classes are balanced ","439df68b":"online boarding have maximum correlation with satisfaction","be3ad3e2":"# Now applying XGBoost","f51472e5":"Cheking the heatmap of correlation with continous variables","4d01adc6":"Important continuous factors which contribute more correlation with customer satisfaction are  'Inflight wifi service','Flight Distance','cleanliness','Leg room service','on board service','seat comfort','inflight entertainment','online boarding'","645c36d4":"1. The work on the following project was done by Piyush Singla and Nikhil Sharma 4.\n2. link to Piyush Singla kaggle account -> https:\/\/www.kaggle.com\/mpiyu20\n3. link to Nikhil Sharma kaggle account -> https:\/\/www.kaggle.com\/nikhilsharma4","8ddba184":"Now that satisfaction is continous ","b8028a4b":"Analysing some general trends from the dataset using Plotly -> interactive plots","3a2044d0":"Also applying all the preprocessing on test set and splitting the data into X_test and y_test"}}