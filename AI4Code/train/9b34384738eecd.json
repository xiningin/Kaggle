{"cell_type":{"db59331f":"code","4e4b9a87":"code","995491d3":"code","def05694":"code","5b2b8cc8":"code","6d4ff737":"code","40d61335":"code","fb8ec067":"code","3e593e4e":"code","78940bda":"code","f65d7ae8":"code","9ce6c4f8":"code","bf20bea3":"code","414b360c":"code","e6be86fd":"code","9c1b5a38":"code","4e1204dc":"code","9d6f9ada":"code","09d2f207":"code","ce553589":"code","0fd13a4a":"markdown","1a15258d":"markdown","3517b24b":"markdown","2838192c":"markdown","8140c970":"markdown","a03fb4d5":"markdown","08bce9f7":"markdown","0d833d98":"markdown","c89ba3c2":"markdown"},"source":{"db59331f":"import numpy as np \nimport pandas as pd \nimport json\nimport fnmatch\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport sklearn.linear_model","4e4b9a87":"# Example: list for MLB, from \"General\" data\nmlb_list=os.listdir(\"..\/input\/sports-and-restaurants\/General\/MLB\")\nmlb_list","995491d3":"#function to drop nan from a list\ndef drop_nan(_list):\n    return [_ for _ in _list if _ is not np.nan]","def05694":"# Function to map the price from \"$\" to numeric values and also fill with nan if \"price\" key doesn't exist\ndef price_mapper(dictio):\n    price_map= {\"$\": 1, \"$$\": 2, \"$$$\": 3, \"$$$$\": 4}\n    for i in range(dictio['total']):\n        if 'price' in dictio['businesses'][i] and dictio['businesses'][i]['price'] in price_map:\n            dictio['businesses'][i]['price']=price_map[dictio['businesses'][i]['price']]\n        else:\n            dictio['businesses'][i]['price']=np.nan","5b2b8cc8":"# Function to open a json file\ndef openfile(filep):\n    with open(filep, encoding=\"utf-8\") as f:\n        jsonData=json.load(f)\n    return jsonData","6d4ff737":"# Function that returns a dataframe with price, ratings, reviews and number of businesses statistics for each stadium\/arena\ndef restaurant_statistics(fileList, league, category=False):\n    league_dict={}\n    if category:\n        folder='..\/input\/sports-and-restaurants\/Category'\n    else:\n        folder='..\/input\/sports-and-restaurants\/General'\n    for file in fileList:\n        business_price=[]\n        business_rating=[]\n        business_reviews=[]\n        file_path=os.path.join(folder, league, file)\n        fileData=openfile(file_path)\n        price_mapper(fileData)\n        abs_total=fileData['absolute total']\n        total=fileData['total']\n        stadium=fileData['stadium']\n        stadium_coord=[round(fileData['stadium latitude'],3), round(fileData['stadium longitude'],3)]\n        for t in range(fileData['total']):\n            business_price.append(fileData['businesses'][t]['price'])\n            try:\n                business_rating.append(fileData['businesses'][t]['rating'])\n                business_reviews.append(fileData['businesses'][t]['review_count'])\n            except:\n                business_rating.append(np.nan)\n                business_reviews.append(np.nan)    \n    \n        bprice=drop_nan(business_price)\n        brating=drop_nan(business_rating)\n        breview=drop_nan(business_reviews)\n        league_dict[fileData['team']]=(stadium, stadium_coord, abs_total, np.mean(bprice), np.mean(brating), np.mean(breview))\n    # Dataframe with the statistics    \n    statistics_df = pd.DataFrame.from_dict(league_dict, orient = \"index\",\n                           columns = (\"Stadium\", \"Stadium coordinates\", \"Number of businesses\", \"Average Price (1-4)\", \"Average Ratings (1-5)\", \"Average Number of Reviews\"))\n    return statistics_df","40d61335":"# Dictionary with the statistics dataframe for each league\nleagues=['MLB', 'MLS', 'NBA', 'NFL', 'NHL'] \nstats={}\nfor league in leagues:\n    league_list=os.listdir(os.path.join('..\/input\/sports-and-restaurants\/General', league))\n    stats[league]=restaurant_statistics(league_list, league)\n    # Drop teams that play in the same Stadium (NFL and NBA)\n    stats[league].drop_duplicates(subset=['Stadium'], keep='first', inplace=True)","fb8ec067":"# Let's have a look at one of the dataframes created\nstats[\"MLB\"]","3e593e4e":"def barPlot(league,df,col=\"Number of businesses\", barcolor=\"b\", save=True):\n    sns.set_theme(context='notebook',style=\"whitegrid\")\n    f, ax=plt.subplots(figsize=(6,10))\n    sns.set_color_codes(\"pastel\")\n    sns.barplot(x=col, y=\"Stadium\", data=df, color=barcolor).set(title=f'{col} in 1.8 miles radius around {league} Stadiums')\n    ax.set_xlabel(col,fontsize=14)\n    ax.set_ylabel(\"Stadiums\",fontsize=14)\n    for index, value in enumerate(df[col]):\n        plt.text(value,index, str(round(value,2)), horizontalalignment = \"left\", verticalalignment = \"center\")\n    if save:\n        plt.savefig(f'Images\/{league}_{col}.png', bbox_inches = 'tight')\n    plt.show()","78940bda":"for k,v in stats.items():\n    barPlot(k, v, col=\"Number of businesses\", barcolor=\"b\", save=False)","f65d7ae8":"for k,v in stats.items():\n    barPlot(k,v, \"Average Number of Reviews\",\"r\", save=False)","9ce6c4f8":"for k,v in stats.items():\n    barPlot(k,v, \"Average Price (1-4)\",\"b\", save=False)","bf20bea3":"for k,v in stats.items():\n    barPlot(k,v, \"Average Ratings (1-5)\",\"r\", save=False)","414b360c":"# Pairplot (Major League Baseball)\nsns.PairGrid(stats[\"MLB\"].iloc[:,2:]).map_offdiag(sns.scatterplot)\nplt.show()","e6be86fd":"# Heatmap Correlation matrix for MLB\ncorrelation_matrix=stats[\"MLB\"].corr(method=\"pearson\")\nmask = np.triu(np.ones_like(correlation_matrix, dtype=bool))\ncmap=sns.light_palette(color='#66ccff', n_colors=8, as_cmap=True)\nax=sns.heatmap(correlation_matrix, annot=True, cmap=cmap, square=True, mask=mask).set_title(\"Pearson correlation matrix\", fontsize=16)","9c1b5a38":"def LinearModel(X, y):\n    model=sklearn.linear_model.LinearRegression()\n    model.fit(X, y)\n    return model.predict(X)","4e1204dc":"def PlotModel(X, y, _y, title=None):\n    f, ax=plt.subplots(figsize=(6,10))\n    plt.scatter(X, y, color='b')\n    plt.plot(X, _y, color='r')\n    plt.show","9d6f9ada":"# Example for MLB\nX=np.c_[stats[\"MLB\"][\"Average Number of Reviews\"]]\ny1=np.c_[stats[\"MLB\"][\"Number of businesses\"]]\ny2=np.c_[stats[\"MLB\"][\"Average Price (1-4)\"]]","09d2f207":"Y=[y1,y2]\nmodels=[LinearModel(X, y1),LinearModel(X, y2)]    ","ce553589":"for y, model in zip(Y, models):\n    PlotModel(X, y, model)","0fd13a4a":"## **Bar plots for Average Rating**","1a15258d":"# Functions to read the json files, do some cleaning and create dataframes with statitistical data","3517b24b":"# **Example of dataframe with some statistical data**","2838192c":"# **BAR PLOTS**","8140c970":"# **Pairplot for visual analysis and correlation matrix**\n","a03fb4d5":"# **Exploratory Linear Regression model**","08bce9f7":"## **Bar plots for Total Number of reviews**","0d833d98":"### **Bar plots for Total Number of businesses**","c89ba3c2":"## **Bar plots for Average Price**"}}