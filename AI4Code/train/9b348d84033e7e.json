{"cell_type":{"1ce3652b":"code","83a56439":"code","3bd06fe3":"code","decc5240":"code","31e587bf":"code","53506f9a":"code","b359e844":"code","9ba6c459":"code","5ae5e058":"code","7bae0779":"code","2de1e9e6":"code","a3b1ab87":"code","994ee952":"code","1689f602":"code","d6818110":"code","f3616d64":"markdown","ee59b179":"markdown","98410a10":"markdown","0b2d52f5":"markdown","4b054ca4":"markdown","aa4502f1":"markdown","fde18f0f":"markdown","4f7502a8":"markdown","bf6ea5dd":"markdown","d3ca6ee8":"markdown","12ef92d7":"markdown","fc620f32":"markdown","17e0c72c":"markdown","c9e0c4c6":"markdown","eb55252e":"markdown","fd5908a3":"markdown","abf6daa3":"markdown","ffa4f970":"markdown","98c7e074":"markdown","7815ceb0":"markdown","daed1188":"markdown","67913461":"markdown","b325ea53":"markdown","335d7d01":"markdown","a4cfd9bf":"markdown","29a9c126":"markdown"},"source":{"1ce3652b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# load the data\nae = pd.read_csv('..\/input\/athlete_events.csv')\nnoc = pd.read_csv('..\/input\/noc_regions.csv')\n\n#let's merge them\nae_df = ae.merge(noc, how='left')\n\n# some regions are not filled, for simplicity I am filling them with 'Team' value\nae_df['region_filled'] = ae_df['region'].fillna(ae['Team'])\n\n# let's add a region to the name\nae_df['Name_Region'] = ae_df['Name'] + ' (' + ae_df['region_filled'] + ')'\n\n# let's split the set for summer and winter games\nae_summer = ae_df[ae_df['Season']=='Summer'].copy()\nae_winter = ae_df[ae_df['Season']=='Winter'].copy()\n\n# let's split by men and women\nfae = ae_df[ae_df['Sex']=='F'].copy()\nmae = ae_df[ae_df['Sex']=='M'].copy()\nfae['Medal'].fillna(value= 'No Medal', inplace=True)\nmae['Medal'].fillna(value= 'No Medal', inplace=True)\n\n# Any results you write to the current directory are saved as output.","83a56439":"ae_df.head()","3bd06fe3":"# just some basic stats\nbasic_stats = ae_df.groupby(['Year', 'Season', 'City'])['Name'].agg('nunique').reset_index()\nbasic_stats.head()\n\n# this is needed, since in 1956 the Summer Games were held in Stockholm and Melbourne 5 months apart\nconditions = (ae_df['Year'] == 1956) &\\\n             (ae_df['Season'] == 'Summer')\nae_df.loc[conditions, 'City'] = 'Melbourne\/Stockholm'\nae_summer.loc[conditions, 'City'] = 'Melbourne\/Stockholm'","decc5240":"summer_games = ae_summer.groupby(['Year', 'City', 'Sex'])['Event', 'Name']\\\n                        .agg({'Event': 'nunique', 'Name': 'nunique'})\\\n                        .reset_index()\\\n                        .pivot_table(index=['Year', 'City'], columns='Sex', values=['Event', 'Name'])\\\n                        .fillna(0)\\\n                        .reset_index()\nsummer_games.columns = ['Year', 'City', 'Count of Events - Female', 'Count of Events - Male', 'Female Athletes', 'Male Athletes']\n\nsummer_games.iloc[:, 2:] = summer_games.iloc[:, 2:].astype(int)\n\n# I will need common scaling for the comparison of count of events\npcount_full = summer_games['Female Athletes'].tolist() + summer_games['Male Athletes'].tolist()\n\n# scaling for bubble chart\nscaled_pcount_f = (summer_games['Female Athletes'] - min(pcount_full)) \/ (max(pcount_full) - min(pcount_full)) + 0.1\nscaled_pcount_m = (summer_games['Male Athletes'] - min(pcount_full)) \/ (max(pcount_full) - min(pcount_full)) + 0.1\n\n# I need to create the text for the labels. There must be better way to do it, I am looking for clues :-) \ntext_f = []\nfor i in range(summer_games.shape[0]):\n    text = 'In ' + \\\n           str(summer_games.iloc[i,0]) + \\\n           ', in ' + \\\n           str(summer_games.iloc[i, 1]) + \\\n           ', <br>' + \\\n           str(summer_games.iloc[i,4]) + \\\n           ' Female Athletes <br>' + \\\n           'competed in ' + \\\n           str(summer_games.iloc[i,2]) + \\\n           ' events.'\n    text_f.append(text)\n\ntext_m = []\nfor i in range(summer_games.shape[0]):\n    text = 'In ' + \\\n           str(summer_games.iloc[i,0]) + \\\n           ', in ' + \\\n           str(summer_games.iloc[i, 1]) + \\\n           ', <br>' + \\\n           str(summer_games.iloc[i,5]) + \\\n           ' Male Athletes <br>' + \\\n           'competed in ' + \\\n           str(summer_games.iloc[i,3]) + \\\n           ' events.'\n    text_m.append(text)\n    \n    \n# laying out the bubble chart\ntrace0 = go.Scatter(\n    x=summer_games['Year'],\n    y=summer_games['Count of Events - Female'],\n    mode='markers',\n    marker=dict(\n        size=scaled_pcount_f*50,\n        symbol='circle-open',\n        line=dict(\n            width=4\n        ),\n        color='#2c73d2'\n    ),\n    name='Female Athletes',\n    text=text_f,\n    hoverinfo='text'\n)\ntrace1 = go.Scatter(\n    x=summer_games['Year'],\n    y=summer_games['Count of Events - Male'],\n    mode='markers',\n    marker=dict(\n        size=scaled_pcount_m*50,\n        symbol='circle-open',\n        line=dict(\n            width=4\n        ),\n        color='#f9f871'),\n    name='Male Athletes',\n    text=text_m,\n    hoverinfo='text'\n)\n\nlayout1 = go.Layout(\n    title='Chasing Equality - Summer Olympics',\n    titlefont=dict(\n        size=36,\n        color='#4b8480'\n    ),\n    xaxis=dict(\n        title='Year',\n        color='#4b8480',\n        titlefont=dict(\n            size=20\n        ),\n        showline=True,\n        linewidth=1,\n        linecolor='#4b8480',\n        showgrid=False\n    ),\n    yaxis=dict(\n        title='Number of Events',\n        color='#4b8480',\n        titlefont=dict(\n            size=20\n        ),\n        showline=True,\n        linewidth=1,\n        linecolor='#4b8480',\n        showgrid=False,\n        zeroline=False,\n    ),\n    legend=dict(orientation='h')\n)\n\ndata1 = [trace0, trace1]\n\nfig1 = go.Figure(data=data1, layout=layout1)\n\niplot(fig1)\n","31e587bf":"winter_games = ae_winter.groupby(['Year', 'City', 'Sex'])['Event', 'Name']\\\n                        .agg({'Event': 'nunique', 'Name': 'nunique'})\\\n                        .reset_index()\\\n                        .pivot_table(index=['Year', 'City'], columns='Sex', values=['Event', 'Name'])\\\n                        .fillna(0)\\\n                        .reset_index()\nwinter_games.columns = ['Year', 'City', 'Count of Events - Female', 'Count of Events - Male', 'Female Athletes', 'Male Athletes']\n\nwinter_games.iloc[:, 2:] = winter_games.iloc[:, 2:].astype(int)\n\n# I will need common scaling for the comparison of count of events\npcount_full = winter_games['Female Athletes'].tolist() + winter_games['Male Athletes'].tolist()\n\n# scaling for bubble chart\nscaled_pcount_f = (winter_games['Female Athletes'] - min(pcount_full)) \/ (max(pcount_full) - min(pcount_full)) + 0.1\nscaled_pcount_m = (winter_games['Male Athletes'] - min(pcount_full)) \/ (max(pcount_full) - min(pcount_full)) + 0.1\n\n# I need to create the text for the labels. There must be better way to do it, I am looking for clues :-) \ntext_f = []\nfor i in range(winter_games.shape[0]):\n    text = 'In ' + \\\n           str(winter_games.iloc[i,0]) + \\\n           ', in ' + \\\n           str(winter_games.iloc[i, 1]) + \\\n           ', <br>' + \\\n           str(winter_games.iloc[i,4]) + \\\n           ' Female Athletes <br>' + \\\n           'competed in ' + \\\n           str(winter_games.iloc[i,2]) + \\\n           ' events.'\n    text_f.append(text)\n\ntext_m = []\nfor i in range(winter_games.shape[0]):\n    text = 'In ' + \\\n           str(winter_games.iloc[i,0]) + \\\n           ', in ' + \\\n           str(winter_games.iloc[i, 1]) + \\\n           ', <br>' + \\\n           str(winter_games.iloc[i,5]) + \\\n           ' Male Athletes <br>' + \\\n           'competed in ' + \\\n           str(winter_games.iloc[i,3]) + \\\n           ' events.'\n    text_m.append(text)\n    \n    \n# laying out the bubble chart\ntrace0 = go.Scatter(\n    x=winter_games['Year'],\n    y=winter_games['Count of Events - Female'],\n    mode='markers',\n    marker=dict(\n        size=scaled_pcount_f*50,\n        symbol='circle-open',\n        line=dict(\n            width=4\n        ),\n        color='#2c73d2'\n    ),\n    name='Female Athletes',\n    text=text_f,\n    hoverinfo='text'\n)\ntrace1 = go.Scatter(\n    x=winter_games['Year'],\n    y=winter_games['Count of Events - Male'],\n    mode='markers',\n    marker=dict(\n        size=scaled_pcount_m*50,\n        symbol='circle-open',\n        line=dict(\n            width=4\n        ),\n        color='#ABD9FF'),\n    name='Male Athletes',\n    text=text_m,\n    hoverinfo='text'\n)\n\nlayout1 = go.Layout(\n    title='Chasing Equality - Winter Olympics',\n    titlefont=dict(\n        size=36,\n        color='#A6ABBD'\n    ),\n    xaxis=dict(\n        title='Year',\n        color='#A6ABBD',\n        titlefont=dict(\n            size=20\n        ),\n        showline=True,\n        linewidth=1,\n        linecolor='#A6ABBD',\n        showgrid=False\n    ),\n    yaxis=dict(\n        title='Number of Events',\n        color='#A6ABBD',\n        titlefont=dict(\n            size=20\n        ),\n        showline=True,\n        linewidth=1,\n        linecolor='#A6ABBD',\n        showgrid=False,\n        zeroline=False,\n    ),\n    legend=dict(orientation='h')\n)\n\ndata1 = [trace0, trace1]\n\nfig1 = go.Figure(data=data1, layout=layout1)\n\niplot(fig1)\n","53506f9a":"# counting the number of events, in which female and male athletes competed, by year and sport\nsummer_sports = ae_summer.groupby(['Year', 'Sport', 'Sex'])['Event']\\\n                         .agg('nunique')\\\n                         .reset_index()\\\n                         .pivot_table(index=['Year','Sport'], columns='Sex', values='Event', fill_value=0)\\\n                         .reset_index()\n\n# assigning a score\nsummer_sports['Score'] = (summer_sports['F'] - summer_sports['M']) \/ (summer_sports['F'] + summer_sports['M'])\n\n# final pivot for heatplot\nsummer_sports_pivot = summer_sports.pivot_table(index='Sport', columns='Year', values='Score').reset_index()\n\n# plot set up\ntrace2 = go.Heatmap(z=np.array(summer_sports_pivot.iloc[:,1:]),\n                    x=summer_sports_pivot.columns.tolist()[1:],\n                    y=summer_sports_pivot['Sport'],\n                    colorscale=[[0, '#f9f871'], [0.5, '#00d9b3'], [1, '#2c73d2']],\n                    xgap=0.9,\n                    ygap=0.9,\n                    colorbar=dict(\n                        title='Equality score',\n                        titleside='right',\n                        titlefont=dict(\n                            size=20,\n                            color='#4b8480'),\n                        outlinecolor='white',\n                        tickcolor='#4b8480',\n                        tickfont=dict(color='#4b8480'),\n                        tickmode='array',\n                        tickvals=[-0.95, 0, 0.95],\n                        ticktext=['Only<br>Men', 'Perfectly<br>Equal', 'Only<br>Women']\n                    )\n                   )\n\ndata2 = [trace2]\nlayout2 = go.Layout(\n    title='In summer, men lift weights, women swim(synchronously)',\n    titlefont=dict(\n        size=24,\n        color='#4b8480'\n    ),\n    height=800,\n    #margin=dict(l=180,t=100),\n    xaxis=dict(title='Year', \n               titlefont=dict(\n                   size=16\n               ),\n               showgrid=False, \n               color='#4b8480'\n              ),\n    yaxis=dict(\n               color='#4b8480',\n               tickfont=dict(\n                   size=9\n               ),\n               automargin=True,\n               showgrid=False\n              )\n)\nfig2 = go.Figure(data=data2, layout=layout2)\n\niplot(fig2)\n","b359e844":"# counting the number of events, in which female and male athletes competed, by year and sport\nwinter_sports = ae_winter.groupby(['Year', 'Sport', 'Sex'])['Event']\\\n                         .agg('nunique')\\\n                         .reset_index()\\\n                         .pivot_table(index=['Year','Sport'], columns='Sex', values='Event', fill_value=0)\\\n                         .reset_index()\n\n# assigning a score\nwinter_sports['Score'] = (winter_sports['F'] - winter_sports['M']) \/ (winter_sports['F'] + winter_sports['M'])\n\n# final pivot for heatplot\nwinter_sports_pivot = winter_sports.pivot_table(index='Sport', columns='Year', values='Score').reset_index()\n\n# plot set up\ntrace2 = go.Heatmap(z=np.array(winter_sports_pivot.iloc[:,1:]),\n                    x=winter_sports_pivot.columns.tolist()[1:],\n                    y=winter_sports_pivot['Sport'],\n                    colorscale=[[0, '#ABD9FF'], [0.5, '#76a5e9'], [1, '#2c73d2']],\n                    xgap=0.9,\n                    ygap=0.9,\n                    colorbar=dict(\n                        title='Equality score',\n                        titleside='right',\n                        titlefont=dict(\n                            size=20,\n                            color='#A6ABBD'),\n                        outlinecolor='white',\n                        tickcolor='#A6ABBD',\n                        tickfont=dict(\n                            color='#A6ABBD'\n                        ),\n                        tickmode='array',\n                        tickvals=[-0.95, 0, 0.95],\n                        ticktext=['Only<br>Men', 'Perfectly<br>Equal', 'Only<br>Women']\n                    ),\n                    zmin=-1,\n                    zmax=1\n                   )\n\ndata2 = [trace2]\nlayout2 = go.Layout(\n    title='But in winter, everyone skates or skiis',\n    titlefont=dict(\n        size=24,\n        color='#A6ABBD'\n    ),\n    height=800,\n    #margin=dict(l=180,t=100),\n    xaxis=dict(title='Year', \n               titlefont=dict(\n                   size=16\n               ),\n               showgrid=False, \n               color='#A6ABBD'\n              ),\n    yaxis=dict(\n               color='#A6ABBD',\n               tickfont=dict(\n                   size=12\n               ),\n               automargin=True,\n               showgrid=False\n              )\n)\nfig2 = go.Figure(data=data2, layout=layout2)\n\niplot(fig2)\n","9ba6c459":"# step 2\nsummer_athl = ae_summer.groupby(['region_filled', 'Sex'])['Name']\\\n                      .count()\\\n                      .reset_index()\\\n                      .pivot_table(index='region_filled',\n                                   columns='Sex',\n                                   values='Name',\n                                   fill_value=0)\\\n                      .reset_index()\nsummer_athl['Total Athletes'] = summer_athl['F'] + summer_athl['M']\ncol_rename = {'F': 'Female Athletes', 'M': 'Male Athletes'}\nsummer_athl = summer_athl.rename(columns=col_rename)\n\n# step 3\nsummer_med = ae_summer.dropna(subset=['Medal'])\nsummer_med_pv = summer_med.groupby(['region_filled','Sex'])['Medal']\\\n                          .count()\\\n                          .reset_index()\\\n                          .pivot_table(index='region_filled',\n                                       columns='Sex',\n                                       values='Medal',\n                                       fill_value=0)\\\n                          .reset_index()\nsummer_med_pv['Total'] = summer_med_pv['F'] + summer_med_pv['M']\n\n# step 4\nsummer_stats = summer_athl.merge(summer_med_pv, how='left')\\\n                          .fillna(0)\nsummer_stats_col_rename = {'F': 'Female Medals',\n                           'M': 'Male Medals',\n                           'Total': 'Total Medals'}\nsummer_stats = summer_stats.rename(columns=summer_stats_col_rename)\nsummer_stats['MpFA'] = summer_stats['Female Medals'] \/ summer_stats['Female Athletes']\nsummer_stats['MpMA'] = summer_stats['Male Medals'] \/ summer_stats['Male Athletes']\nsummer_stats['MpA'] = summer_stats['Total Medals'] \/ summer_stats['Total Athletes']\n\n# step 5\ntop_20_med_summer = summer_stats\\\n                    .sort_values(by='Total Medals', ascending=False)\\\n                    .iloc[:20, :]\\\n                    .sort_values(by='MpA')\n\n###--plot--###\ntrace3 = go.Bar(x=top_20_med_summer['MpFA'],\n                y=top_20_med_summer['region_filled'],\n                name='Women',\n                marker=dict(color='#2c73d2'),\n                orientation='h')\n\ntrace4 = go.Bar(x=top_20_med_summer['MpMA'],\n                y=top_20_med_summer['region_filled'],\n                name='Men',\n                marker=dict(color='#f9f871'),\n                orientation='h')\n\nlayout3 = go.Layout(\n    title='Medals per Athlete - Summer Games<br>Top 20 Countries',\n    font=dict(\n        color='#4b8480'\n    ),\n    titlefont=dict(\n        size=28\n    ),\n    height=800,\n    xaxis=dict(\n        title='Medals per Athlete', \n        color='#4b8480',\n        titlefont=dict(\n            size=16\n        ), \n        showline=True,\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(color='#4b8480',showgrid=False, showline=False, automargin=True, ticksuffix='  ')\n)\n\ndata3 = [trace4,trace3]\nfig3 = go.Figure(data=data3, layout=layout3)\niplot(fig3)","5ae5e058":"winter_athl = ae_winter.groupby(['region_filled', 'Sex'])['Name']\\\n                      .count()\\\n                      .reset_index()\\\n                      .pivot_table(index='region_filled',\n                                   columns='Sex',\n                                   values='Name',\n                                   fill_value=0)\\\n                      .reset_index()\nwinter_athl['Total Athletes'] = winter_athl['F'] + winter_athl['M']\ncol_rename = {'F': 'Female Athletes', 'M': 'Male Athletes'}\nwinter_athl = winter_athl.rename(columns=col_rename)\n\n# step 3\nwinter_med = ae_winter.dropna(subset=['Medal'])\nwinter_med_pv = winter_med.groupby(['region_filled','Sex'])['Medal']\\\n                          .count()\\\n                          .reset_index()\\\n                          .pivot_table(index='region_filled',\n                                       columns='Sex',\n                                       values='Medal',\n                                       fill_value=0)\\\n                          .reset_index()\nwinter_med_pv['Total'] = winter_med_pv['F'] + winter_med_pv['M']\n\n# step 4\nwinter_stats = winter_athl.merge(winter_med_pv, how='left')\\\n                          .fillna(0)\nwinter_stats_col_rename = {'F': 'Female Medals',\n                           'M': 'Male Medals',\n                           'Total': 'Total Medals'}\nwinter_stats = winter_stats.rename(columns=winter_stats_col_rename)\nwinter_stats['MpFA'] = winter_stats['Female Medals'] \/ winter_stats['Female Athletes']\nwinter_stats['MpMA'] = winter_stats['Male Medals'] \/ winter_stats['Male Athletes']\nwinter_stats['MpA'] = winter_stats['Total Medals'] \/ winter_stats['Total Athletes']\n\n# step 5\ntop_20_med_winter = winter_stats\\\n                    .sort_values(by='Total Medals', ascending=False)\\\n                    .iloc[:20, :]\\\n                    .sort_values(by='MpA')\n\n###--plot--###\ntrace5 = go.Bar(x=top_20_med_winter['MpFA'],\n                y=top_20_med_winter['region_filled'],\n                name='Women',\n                marker=dict(color='#2c73d2'),\n                orientation='h')\n\ntrace6 = go.Bar(x=top_20_med_winter['MpMA'],\n                y=top_20_med_winter['region_filled'],\n                name='Men',\n                marker=dict(color='#ABD9FF'),\n                orientation='h')\n\nlayout4 = go.Layout(\n    title='Medals per Athlete - Winter Games<br>Top 20 Countries',\n    font=dict(\n        color='#A6ABBD'\n    ),\n    titlefont=dict(\n        size=28\n    ),\n    height=800,\n    xaxis=dict(\n        title='Medals per Athlete', \n        color='#A6ABBD',\n        titlefont=dict(\n            size=16\n        ), \n        showline=True,\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        color='#A6ABBD',\n        showgrid=False,\n        showline=False,\n        automargin=True,\n        ticksuffix='  ')\n)\n\ndata4 = [trace6,trace5]\nfig4 = go.Figure(data=data4, layout=layout4)\niplot(fig4)","7bae0779":"# let's see how many medals of each color each athlete earned\n# we can also check, how many events they participated in with no medal at all\nfmedals = fae.groupby(['Name_Region', 'Medal'])['Event']\\\n             .count()\\\n             .reset_index()\\\n             .pivot_table(index='Name_Region',\n                          columns='Medal',\n                          values='Event',\n                          fill_value=0)\\\n             .reset_index()\n\n# let's reorder columns and add Total as the sum of Bronze, Silver, Gold\nfmedals['Total'] = fmedals['Bronze'] + fmedals['Silver'] + fmedals['Gold']\nfmedals = fmedals[['Name_Region', 'No Medal', 'Bronze', 'Silver', 'Gold', 'Total']]\n\n# take only ones with 10 or more medals\nf10meds = fmedals[fmedals['Total'] >= 10].sort_values(by='Total').copy()\n\n# now onto the plot\ndata_m = []\n\nfor i in range(f10meds.shape[0]):\n    trace = go.Scatter(\n        x=list(range(1, f10meds.iloc[i,5]+1)),\n        y=[f10meds.iloc[i,0]] * f10meds.iloc[i,5],\n        mode='markers',\n        marker=dict(\n            size=30,\n            color=['#A48E65'] * f10meds.iloc[i,2]+\\\n                  ['#DFE0DF'] * f10meds.iloc[i,3]+\\\n                  ['#D5A419'] * f10meds.iloc[i,4],\n            line=dict(color='white',\n                      width=1)\n        ),\n        showlegend=False,\n        text=str(f10meds.iloc[i,0]) +\\\n        '<br>won ' +\\\n        str(f10meds.iloc[i, 5]) +\\\n        ' medals in total.',\n        hoverinfo='text'\n    )\n    data_m.append(trace)\n\nlayout_m = go.Layout(\n    title='Top Olympic Medalists - Women',\n    titlefont=dict(\n        size=24,\n        color='#4b8480'\n    ),\n    height=800, \n    hovermode='closest', \n    yaxis=dict(\n        color='#4b8480',\n        automargin=True,\n    ), \n    xaxis=dict(\n        color='#4b8480',\n        showgrid=False,\n        zeroline=False))\nfig_m = go.Figure(data=data_m, layout=layout_m)\niplot(fig_m, show_link=False)","2de1e9e6":"# let's take the subset of top medalists to contain data necessary for plotting\nf10meds_full = fae[fae['Name_Region'].isin(f10meds['Name_Region'])]\nf10meds_full = f10meds_full[['Name_Region',\n                             'Season',\n                             'Age',\n                             'Year',\n                             'City',\n                             'Event',\n                             'Medal']]\n\n# for better display, let's do this:\ndef insert_break(s):\n    '''\n    This function inserts break point in the\n    middle of the Event's name.\n    arg: string\n    returns: string with breakpoint inserted\n    '''\n    split_s = s.split(' ')\n    split_s.insert(int(len(split_s)\/2), '<br>')\n    s = ' '.join(split_s)\n    return s\n\n# then, let's map the medals to colors\nmedals_map = {'No Medal': '#2c73d2',\n              'Bronze': '#A48E65',\n              'Silver': '#DFE0DF',\n              'Gold' : '#D5A419'}\n\nf10meds_full['Event_br'] = f10meds_full['Event'].apply(insert_break)\nf10meds_full['Medal_clr'] = f10meds_full['Medal'].map(medals_map)\n\n# for hover text\ntext_all = []\nfor i in range(f10meds_full.shape[0]):\n    text = 'In ' +\\\n        f10meds_full.iloc[i, 1] +\\\n        ' Games in ' +\\\n        f10meds_full.iloc[i, 4] +\\\n        ' (' +\\\n        str(f10meds_full.iloc[i, 3]) +\\\n        '),<br>' +\\\n        f10meds_full.iloc[i, 0] +\\\n        '<br>won ' +\\\n        f10meds_full.iloc[i, 6] +\\\n        ' in<br>' +\\\n        f10meds_full.iloc[i, 7] +\\\n        '<br>She was ' +\\\n        str(f10meds_full.iloc[i, 2]) +\\\n        ' at the time.'\n    text_all.append(text)\nf10meds_full['Text'] = text_all\n\n# the main loop iterates over the dataframe with top medalists and creates figure elements\ndata_m = []\nbuttons_m = []\n\nfor i in range(f10meds.shape[0]):\n    subset = f10meds_full[f10meds_full['Name_Region'] == str(f10meds.iloc[i,0])]\n    x_ax_ticks = pd.unique(subset['Year'])\n    # I need to do below, because I need to display something first, without user interaction\n    # looking for help here ;-)\n    \n    if i == f10meds.shape[0] - 1:\n        trace_m = go.Scatter(\n            x=subset['Year'],\n            y=subset['Event_br'],\n            mode='markers',\n            marker=dict(size=30, color=subset['Medal_clr']),\n            text=subset['Text'],\n            hoverinfo='text',\n            visible=True\n            )\n    else:\n        trace_m = go.Scatter(\n            x=subset['Year'],\n            y=subset['Event_br'],\n            mode='markers',\n            marker=dict(size=30, color=subset['Medal_clr']),\n            text=subset['Text'],\n            hoverinfo='text',\n            visible=False\n            )\n        \n    data_m.append(trace_m)\n    \n    visible_traces = np.full(f10meds.shape[0], False)\n    visible_traces[i] = True\n    \n    button_m = dict(\n        label=str(f10meds.iloc[i,0]),\n        method= 'update',\n        args=[\n            dict(\n                visible=visible_traces\n            ),\n            dict(\n                xaxis=dict(\n                    tickvals=x_ax_ticks,\n                    showgrid=False,\n                    tickfont=dict(\n                        size=14\n                    )\n                )\n            )\n        ]\n    )\n    buttons_m.append(button_m)\n    \n    updatemenus = [\n        dict(\n            buttons=buttons_m,\n            active=f10meds.shape[0] - 1,\n            showactive=True,\n            x=0.5,\n            xanchor='center',\n            y=1.1,\n            yanchor='top'\n            )\n        ]\n\nlayout_m = go.Layout(\n    title='Top medalists - breakdown',\n    height=600,\n    font=dict(\n        color='#4b8480'\n        ),\n    titlefont=dict(\n        size=24\n        ),\n    xaxis=dict(\n        tickvals=x_ax_ticks,\n        showgrid=False,\n        tickfont=dict(size=14)\n        ),\n    yaxis=dict(\n        automargin=True\n        ),\n    hovermode='closest',\n    updatemenus=updatemenus\n)\n\nfig = go.Figure(data=data_m, layout=layout_m)\n\n    \niplot(fig, show_link=False)","a3b1ab87":"# first, let's compute the averages - I am discarding the NaNs\nf_avg_age = fae.groupby('Year')['Age'].mean().reset_index()\n\n# same for medalists\nf_avg_age_m = fae[fae['Medal']!='No Medal'].groupby('Year')['Age'].mean().reset_index()\n\n# texts for hovers\nf_avg_age_text_all = []\nf_avg_age_text_meds = []\nfor i in range(len(f_avg_age)):\n    text_all = 'In ' +\\\n            str(f_avg_age.iloc[i, 0]) +\\\n            ' average age<br>of female athlete was ' +\\\n            str(round(f_avg_age.iloc[i, 1], 2))\n    text_medals = 'In ' +\\\n                str(f_avg_age_m.iloc[i, 0]) +\\\n                ' average age<br>of female medalist was ' +\\\n                str(round(f_avg_age_m.iloc[i, 1], 2))\n    f_avg_age_text_all.append(text_all)\n    f_avg_age_text_meds.append(text_medals)\n    \nf_avg_age['Text'] = f_avg_age_text_all\nf_avg_age_m['Text'] = f_avg_age_text_meds\n\n# and plot it\ntrace_faa = go.Scatter(\n    x=f_avg_age['Year'],\n    y=f_avg_age['Age'],\n    mode='lines+markers',\n    text=f_avg_age['Text'],\n    hoverinfo='text', \n    marker=dict(\n        color='#2c73d2'\n    ),\n    name='All Athletes')\n\ntrace_faam = go.Bar(\n    x=f_avg_age_m['Year'],\n    y=f_avg_age_m['Age'],\n    text=f_avg_age_m['Text'],\n    hoverinfo='text',\n    marker=dict(color='#D5A419'), name='Only Medalists'\n)\n\nlayout_faa = go.Layout(\n    title='Mean Age of Female Athletes<br>Over Time',\n    titlefont=dict(\n        size=24\n        ),\n    font=dict(\n        color='#4b8480'\n        ),\n    xaxis=dict(\n        title='Year'\n        ), \n    yaxis=dict(\n        color='#4b8480',\n        title='Average Age',\n        showline=True\n        ), \n    annotations=[\n        dict(\n            x=1940,\n            y= 40,\n            text='With minor exceptions, up until 1952<br>\\\n                average age of medalist was much lower<br>\\\n                (take a look at 1932!)<br>\\\n                from the average age in full population',\n            font=dict(\n                size=10\n            ),\n            showarrow=False\n        ),\n        dict(\n            x=1990,\n            y= 40,\n            text='But from 1952 until recently<br>\\\n                average medalist was over year above<br>\\\n                the mean for the full population<br>\\\n                with growing mean age overall',\n            font=dict(\n                size=10\n            ),\n            showarrow=False\n        )\n    ],\n    legend=dict(orientation='h')\n)\n\ndata_faa = [trace_faa, trace_faam]\nfig_faa = go.Figure(data=data_faa, layout=layout_faa)\n\niplot(fig_faa, show_link=False)\n","994ee952":"# whole population\ntrace_b_faa = go.Box(\n    x=fae['Age'],\n    marker=dict(\n        color='#2c73d2'\n        ),\n    name='All<br>Athletes',\n    showlegend=False\n)\n\n# only medalists\ntrace_b_faam = go.Box(\n    x=fae[fae['Medal']!='No Medal']['Age'],\n    marker=dict(\n        color='#D5A419'\n        ), \n    name='Only<br>Medalists',\n    showlegend=False\n)\n\ndata_b = [trace_b_faam, trace_b_faa]\nlayout_b = go.Layout(\n    title='Do you expect to win an Olympic Medal at 69?',\n    titlefont=dict(size=24),\n    font=dict(\n        color='#4b8480'\n        ),\n    xaxis=dict(\n        title='Average Age',\n        tickfont=dict(\n            size=14\n        ),\n        automargin=True\n    ),\n    annotations=[\n        dict(\n            x=12,\n            y=0.3,\n            text='The youngest<br>\\\n                Olympic Medalist<br>\\\n                was only 11!',\n            font=dict(\n                size=10\n            ),\n            showarrow=False\n        ),\n        dict(\n            x=26,\n            y=0.5,\n            text='Average Medalist has been<br>\\\n                a year older than<br>\\\n                the Average Athlete at Olympics',\n            font=dict(size=10),\n            showarrow=False),\n        dict(\n            x=67,\n            y=0.2,\n            text='The oldest<br>\\\n                Olympic Medalist<br>\\\n                was 69 years old!',\n            font=dict(size=10),\n            showarrow=False)]\n)\nfig_b = go.Figure(data=data_b, layout=layout_b)\niplot(fig_b)","1689f602":"fmedalists = fae[fae['Medal']!='No Medal']\ntrace_h = go.Histogram(x=fmedalists['Age'], marker=dict(color='#D5A419'))\nlayout_h = go.Layout(\n    title='Distribution of Female Medalists\\'s Age',\n    titlefont=dict(\n        size=24\n        ),\n    font=dict(\n        color='#4b8480'\n        ),\n    xaxis=dict(\n        title='Age',\n        color='#4b8480',\n        titlefont=dict(\n            size=14\n            )\n        ),\n    yaxis=dict(\n        title='Count',\n        titlefont=dict(\n            size=14\n            ),\n        zeroline=False\n        ),\n    bargap=0.1\n)\ndata_h = [trace_h]\nfig_h = go.Figure(data=data_h, layout=layout_h)\niplot(fig_h)","d6818110":"fmedalists[(fmedalists['Age']==11) | (fmedalists['Age']==69)][['Name', 'Age', 'Year', 'City', 'Sport', 'Event', 'Medal', 'region']]","f3616d64":"### Let's get to know them a bit better.\nBelow you can see the details of when and how these fantastic athletes got heavier by the weight of the metal ring hanging on their chests.  \nSelect the athlete with the button and hover over datapoints for details.","ee59b179":"This is my Hello World notebook. My intention is to answer few questions I have about Olympic history of female athletes. It's going to grow over time, so if you like it, keep coming back!","98410a10":"According to Wikipedia:  \n**Luigina Giavotti** (October 12, 1916 \u2013 August 4, 1976) was an Italian gymnast who competed in the 1928 Summer Olympics. In 1928 she won the silver medal as a member of the Italian gymnastics team. She was the youngest medalist of the Amsterdam Games and also the youngest female Olympic medalist of all time at the age of 11 years and 302 days. Her record cannot be beaten because the current rules for gymnasts in the Olympics say that they must be at least 16 years old in order to compete.  \n  \n**Letitia Marion Hamilton**  (30 July 1878 \u2013 11 August 1964) was an Irish landscape artist. In 1948 she won a bronze medal at the art competitions at the London Olympic Games.  \nIf you want to know more about the history of art competitions at Olympics, [have a look](https:\/\/en.wikipedia.org\/wiki\/Art_competitions_at_the_Summer_Olympics).\n","0b2d52f5":"The history of women at Olympic Games is obviously mimicking women's struggle for equal rights throughout XX century. Ommited in first modern games in 1896, and marginalised in early days of growing Olympics, women slowly but steadily reach for the piece of well deserved glory.  \nIn the charts below I am showing the rate of women participation in the Olympics over time.  \n  \n **X - axis** is years (obviously)  \n **Y - axis** shows the number of Sport Events  \n **Bubble Size** is the number of athletes competing at Olympics\n\nGo to [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Participation_of_women_in_the_Olympics) for more information.","4b054ca4":"Right, let's have a look at the age of the Olympic Medalists.  \nHow are they comparing to the overall female athletes population?  \nWho were the youngest and oldest medalists?  \nWhich Events 'favor' older\/younger competitors?","aa4502f1":"### But first, let's take a closer look at the youngest\/oldest medalists\nHow can you get a medal, when you are 11?!  Or over 69?  \nWho were they?","fde18f0f":"Right, so we can see that early days it was raining men at Olympic Games. And I suspect that nobody would think of letting women participate in tug-of-war event. So let's measure, which sports have been more egalitarian over time.  \nTo do so, I will need an **Equality Score**.  \nMethod is as follows:  \n1. Calculate the number of Events in each Sport, in each Year.\n2. Break it down on: how many Events in given sport have been accessible to male and female athletes.  \n3. Calculate the score in in the range: **-1 (Events only accessible for Men)**  to **1 (Events only accessible to Women)**.  \n4. **Perfectly equal (same number of Events for Men and Women) Sport will get the Equality Score of 0.**\n  \nExample:  \nIn 2016 in Weightlifting there are 7 Events for women and 8 events for men. We should expect a result slightly below 0 to indicate small skeweness towards male athletes. And indeed, calculating:  \n**fe - female events**  \n**me - male events**  \n  \n$$\\frac {fe-me}{fe+me}$$\n  \ngives us: $$\\frac{7-8}{7+8}$$\n  \n**Equality Score of -0.067**\n","4f7502a8":" **Few Observations:**  \n1. Ha! In 1920 Ice Hockey was actually a summer event. All male of course. Women skating? With sticks? In public? Preposterous! (twirling moustache).  \n2. Women started their Olympic Adventure in 1900. Taking part in Tennis, Equestrianism, Sailing, Golf and Croquet, they must have raised some eybrows of modern gentlemen. It must have hurt, that eyebrows-raising, since they were left with Archery only next time round.  \n3. Tennis seems pretty egalitarian. Why was it not at Olympics between 1924 and 1988?  \n4. Seems like it's easier for certain sport to be egalitarian, if it includes women in swim suits. Swimming and Diving - how progressive to include women from 1912 already. Somehow including women in Shooting competitions was too radical of a change.  \n5. Don't get me started to synchronized swimming...  \n6. Cycling is pretty conservative apparently. It equaled the score between sexes as late as 2012 (did Mayans mean that as the end of the world?).  \n7. Come on ski jumping, pick up the pace, let the women fly!  \n8. But in general winter sports are more egalitarian.  \n\n ","bf6ea5dd":"## Female Athletes race for equality","d3ca6ee8":"# Women of Olympic Games","12ef92d7":" **Few Observations**:  \n * At Summer Olympics, you can clearly see the rate of change starting from the 60s. Cultural changes found their way to sporting events, and women were allowed to participate in rapidly growing number of events.  \n * While participation of male athletes evened out in XXI century, women are catching up and keep improving their mark.  \n * At Winter Olympics, the number of Events grew significantly for both men and women, but women's march to equal representation started in 80s, where from only 15 events in 1984, 48 events were open for women in 2014.  \n \n**To Explore:**  \n * What are those 150 events in Antwerp in 1920? That's a significant uptick. What died off?  \n * Which countries grew their women's teams fastest?  ","fc620f32":" **Few Observations:**  \n 1. Russia and USA dominate. And the women are more 'effective' at getting medals for them.  \n 2. But Russian male athletes are far more 'effective' at winning winter events.  \n 3. South Korean women are twice more likely to get a medal than their male team mates (both at summer and winter games).  \n 4. Almost opposite goes for Sweden.  \n   \n **Worth exploring:**  \n 1. Are there any countries that do not send any women to Olympics?  \n 2. Which competitions are 'the most difficult' to get a medal (most competitors)?","17e0c72c":"## Which countries get more medals per each female athlete they send to the games?","c9e0c4c6":"Let's take a different look","eb55252e":"### Let's see the outliers","fd5908a3":"Let's see how many medals countries get from both men and women. The method will look like this:  \n1. As usual calculate separately for Summer and Winter Games.  \n2. Calculate **total number of athletes per Country (Region), per gender**.  \n3. Calculate **total number of medals per Country(Region), per gender**. To remove the effect of team events (countries sending more athletes to get only one medal in the rankings), I am calculating each medal each athlete brings back home.  \n4. Calculate the ratio.\n5. Take top 20 Countries from the Total Medal Ranking.","abf6daa3":"### Summer Games","ffa4f970":"## 'Manly' and 'Girly' Sports?","98c7e074":"To be continued, if you like\/dislike anything, or find mistakes, please let me know.","7815ceb0":"Time to find those athletes who were faster, higher, stronger most times. Who were they? What Events they dominated?  \nI will take into closer look athletes with **10 or more olympic medals.**","daed1188":" **Few Observations:**  \n1. Barring early days of women's Olympics, from 1920s to 1950s, the mean age of medalists was much lower than the men in the full population. It's probably the effect of amateur character of the Olympics competitors. It is only natural that younger generation was faster and stronger (and jumped higher).  \n2. Starting 1952 the trend reverses. At first the overall mean age drops, while the medalists are older. Younger athletes go to Olympics, but at the same time they go professional. They train for longer, build in structured programs, science kicks in. \n3. Then, from 1976 the average age goes up. Actually, from 1976 (mean age 20.79), to 2016 (mean age 25.57) went up 5 years. At the same time the gap between medalists and the overall closes.  \n---\n  **Worth exploring:**  \n  1. It's worth checking, if some of the young athletes that entered the games very early, at first did not succeed getting medal, and then, getting older they won their medals.  \n  2. Which Sports are are 'favoring' older\/younger athletes?  \n  3. Which countries send the youngest athletes to Olympics?","67913461":"## Intro","b325ea53":"The boxplots below show the distribution of female athletes age:  \n* the box boundaries are (from left to right): 1st quartile, median, 3rd quartile  \n* the whiskers' fences are +\/- 1.5 IQR ([Inter Quartile Range](http:\/\/www.statisticshowto.com\/upper-and-lower-fences\/))  \n* the outliers are the points outside of the fences  \n  \nIf you are unfamiliar with reading boxplots, take a look at [this guide](https:\/\/flowingdata.com\/2008\/02\/15\/how-to-read-and-use-a-box-and-whisker-plot\/).","335d7d01":"## What did you do, when you were 16?","a4cfd9bf":"## Heroines","29a9c126":"## Let's take a peek at the data"}}