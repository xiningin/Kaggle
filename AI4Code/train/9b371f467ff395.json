{"cell_type":{"8353dee2":"code","55922efc":"code","c956f769":"code","f69ff875":"code","d5621309":"code","f35b8c9a":"code","9e57bd14":"code","814909a4":"code","146c56f7":"code","5d7e552f":"code","4e244a3e":"code","0b0676f6":"code","a66f7385":"code","24534393":"code","3bcecf5b":"code","154f545f":"code","357c3ab3":"code","565bad6d":"code","18f6b265":"code","ce16e19b":"code","c179640c":"code","0b845006":"code","3302bedf":"code","6df3cbf7":"code","813f90c8":"code","4178313e":"code","aeee9f96":"code","11b4c73c":"code","8bd51510":"code","42cedafa":"code","733b3cef":"code","e583dd5a":"code","a11cb80f":"code","f1df2ad0":"code","93b274aa":"code","61fed638":"code","e0cd2c0a":"code","b3266fed":"code","163647e9":"code","c23a8922":"code","fe6a52a3":"code","3656818a":"code","cd3b7211":"code","1b34ba61":"code","534abdbb":"code","69628be0":"markdown","e00fa450":"markdown","bfaafcee":"markdown","e931737d":"markdown","4a329178":"markdown","ffe346c0":"markdown","bef622d8":"markdown","712c7f76":"markdown"},"source":{"8353dee2":"# -- Libraries --\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport heapq\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom tabulate import tabulate","55922efc":"# -- Data Load --\nurl = '..\/input\/air-quality-data-india-from-20152020\/city_day_new.csv'\ndata = pd.read_csv(url, header='infer')\n\n# Drop Null\/Missing Records\ndata.dropna(inplace=True)\n\n# Reset Index\ndata.reset_index(inplace=True,drop=True)","c956f769":"#Inspect\ndata.head()","f69ff875":"# Stat Summary\ndata.describe().transpose()","d5621309":"# Function to label AQI Bucket based on AQI Values\ndef AQI_Calc(x):\n    if 0 <= x <= 50:\n        return \"Good\"\n    elif 51 <= x <= 100:\n        return \"Satisfactory\"\n    elif 100 <= x <= 200:\n        return \"Moderate\"\n    elif 201 <= x <= 300:\n        return \"Poor\"\n    elif 301 <= x <= 400:\n        return \"Very Poor\"\n    else:\n        return \"Severe\"\n\n# Function to aggregate monthly data & get the average for Particular City\ndef aggData (city):\n    df = data[data['City'] == city]\n    df.reset_index(inplace=True,drop=True)\n    \n    #Removing AQI_Bucket Column\n    df.drop(['AQI_Bucket'], axis=1,inplace=True)     \n    \n    #convert to DateTime\n    df['Date'] = pd.to_datetime(df['Date'])   \n    \n    df.index = df['Date'] \n    df = df.resample('M').mean()\n    \n    # Drop Null\/Missing Records\n    df.dropna(inplace=True)\n\n    # Calculate AQI Bucket from AQI\n    df['AQI_Bucket'] = df['AQI'].apply(lambda x: AQI_Calc(x))\n    \n    #Convert Date to Column \n    df.reset_index(level=0, inplace=True)\n    \n    df['Date'] = df[\"Date\"].dt.strftime('%d-%b-%Y')\n    \n    return df\n","f35b8c9a":"# Seperate dataframe for Hyderabad with monthly aggregated values\ndf  = aggData('Hyderabad')","9e57bd14":"# Inspect New Dataframe\ndf.head()","814909a4":"# Utility Function to Plot Density Distribution Plot\n\ndef distPlot():\n   \n    hi = heapq.nlargest(1, zip(df['AQI'], df['Date']))\n    lw = heapq.nsmallest(1, zip(df['AQI'], df['Date']))\n    \n    hi_val, hi_dt = zip(*hi)  # Unzip high value list\n    lw_val, lw_dt = zip(*lw)  # Unzip low value list\n    \n    # Define a new list\n    tab = []\n        \n    # Iterating over unzipped list (high val)\n    for i,j in zip(hi_dt,lw_dt):\n        tab.append([\"AQI Index\",i,j])\n    \n    print(\"DATES ON WHICH THE AQI WAS EXTREME \\n\")\n    print(tabulate(tab, headers=['','Poor','Good']))\n    \n    fig = plt.figure(figsize=(20, 15))\n    plt.subplots_adjust(hspace = 0.3)\n    sns.set_palette('muted')\n        \n    plt.subplot(221)\n    ax1 = sns.distplot(df['PM2.5'], color = 'r',label='pm2.5')\n    ax1 = sns.distplot(df['PM10'], color = 'b',label='pm10')\n    plt.title('Particulate Matter Distribution')\n    ax1.legend(loc='upper right')\n    ax1.set_xlabel('')  \n    \n    \n    plt.subplot(222)\n    ax2 = sns.distplot(df['NO'], color = 'r',label='NO')\n    ax2 = sns.distplot(df['NO2'], color = 'b',label='NO2')\n    ax2 = sns.distplot(df['NOx'], color = 'g',label='NOx')\n    plt.title('Nitrous Oxides Distribution')\n    ax2.legend(loc='upper right')\n    ax2.set_xlabel('')  \n    \n    plt.subplot(223)\n    ax3 = sns.distplot(df['CO'], color = 'r',label='CO')\n    ax3 = sns.distplot(df['SO2'], color = 'b',label='SO2')\n    ax3 = sns.distplot(df['O3'], color = 'g',label='O3')\n    plt.title('CO, SO2 & Ground Level Ozone Distribution')\n    ax3.legend(loc='upper right')\n    ax3.set_xlabel('')  \n    \n    plt.subplot(224)\n    ax4 = sns.distplot(df['Benzene'], color = 'r',label='Benzene')\n    ax4 = sns.distplot(df['Toluene'], color = 'b',label='Toulene')\n    ax4 = sns.distplot(df['Xylene'], color = 'g',label='Xylene')\n    plt.title('Benzene, Toluene & Xylene Distribution')\n    ax4.legend(loc='upper right')\n    ax4.set_xlabel('')  \n    \n    plt.show()\n","146c56f7":"# Plotting Distribution Plot for Hyderabad\ndistPlot()","5d7e552f":"# Function to Plot Particulate Matter\ndef PM_Plot():\n    title = 'Particulate Matter [2015-2020]'\n    labels = ['PM2.5', 'PM10','AQI']\n    colors = ['rgb(67,67,67)', 'rgb(115,115,115)','rgb(49,130,189)']\n    \n    mode_size = [8, 8, 10]\n    line_size = [2, 2, 3]\n    \n    x_data = np.vstack((np.array(df['Date']),)*3)\n    y_data = np.array([ df['PM2.5'],df['PM10'], df['AQI'] ])\n    \n    fig = go.Figure()\n\n    for i in range(0, 3):\n        fig.add_trace(go.Scatter(x=x_data[i], y=y_data[i], mode='lines',name=labels[i],line=dict(color=colors[i], width=line_size[i]),\n        connectgaps=True,))\n    \n        fig.add_trace(go.Scatter(x=[x_data[i][0], x_data[i][-1]],y=[y_data[i][0], y_data[i][-1]],mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n    \n    fig.update_layout(xaxis=dict(showline=True,showgrid=False,showticklabels=True,linecolor='rgb(204, 204, 204)',\n                      linewidth=2,ticks='outside',tickfont=dict(family='Arial',size=12,color='rgb(82, 82, 82)',),),\n                      yaxis=dict(showgrid=False,zeroline=False,showline=False,showticklabels=False,),\n                      autosize=False,margin=dict(autoexpand=False,l=100,r=20,t=110,),\n                      showlegend=False,plot_bgcolor='white')\n    \n    annotations = []\n\n    # Adding labels\n    for y_trace, label, color in zip(y_data, labels, colors):\n        \n        # labeling the left_side of the plot\n        annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],xanchor='right', yanchor='middle',\n                                text=label,font=dict(family='Arial',size=12),\n                                showarrow=False))\n        \n        # labeling the right_side of the plot\n        annotations.append(dict(xref='paper', x=0.95, y=y_trace[11],xanchor='left', yanchor='middle',\n                                text='',font=dict(family='Arial',size=12),\n                                showarrow=False))\n\n        # Title\n        annotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,xanchor='left', yanchor='middle',\n                                text=title, font=dict(family='Arial',size=25,color='rgb(37,37,37)'),\n                                showarrow=False))\n\n    fig.update_layout(annotations=annotations,autosize=True)\n    fig.update_xaxes(tickangle=45)\n    fig.show()\n","4e244a3e":"# Function to Plot Nitrogen Oxides\n\ndef NO_Plot():\n    title = 'Nitrogen Oxides [2015-2020]'\n    labels = ['NO', 'NO2','NOx']\n    colors = ['rgb(67,67,67)', 'rgb(115,115,115)','rgb(49,130,189)']\n    \n    mode_size = [8, 8, 10]\n    line_size = [2, 2, 3]\n    \n    x_data = np.vstack((np.array(df['Date']),)*3)\n    y_data = np.array([ df['NO'],df['NO2'], df['NOx'] ])\n    \n    fig = go.Figure()\n\n    for i in range(0, 3):\n        fig.add_trace(go.Scatter(x=x_data[i], y=y_data[i], mode='lines',name=labels[i],line=dict(color=colors[i], width=line_size[i]),\n        connectgaps=True,))\n    \n        fig.add_trace(go.Scatter(x=[x_data[i][0], x_data[i][-1]],y=[y_data[i][0], y_data[i][-1]],mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n    \n    fig.update_layout(xaxis=dict(showline=True,showgrid=False,showticklabels=True,linecolor='rgb(204, 204, 204)',\n                      linewidth=2,ticks='outside',tickfont=dict(family='Arial',size=12,color='rgb(82, 82, 82)',),),\n                      yaxis=dict(showgrid=False,zeroline=False,showline=False,showticklabels=False,),\n                      autosize=False,margin=dict(autoexpand=False,l=100,r=20,t=110,),\n                      showlegend=False,plot_bgcolor='white')\n    \n    annotations = []\n\n    # Adding labels\n    for y_trace, label, color in zip(y_data, labels, colors):\n        \n        # labeling the left_side of the plot\n        annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],xanchor='right', yanchor='middle',\n                                text=label,font=dict(family='Arial',size=12),\n                                showarrow=False))\n        \n        # labeling the right_side of the plot\n        annotations.append(dict(xref='paper', x=0.95, y=y_trace[11],xanchor='left', yanchor='middle',\n                                text='',font=dict(family='Arial',size=12),\n                                showarrow=False))\n\n        # Title\n        annotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,xanchor='left', yanchor='middle',\n                                text=title, font=dict(family='Arial',size=25,color='rgb(37,37,37)'),\n                                showarrow=False))\n\n    fig.update_layout(annotations=annotations, autosize=True)\n    fig.update_xaxes(tickangle=45)\n    fig.show()\n","0b0676f6":"# Function to Plot Various Toxic Gases\n\ndef VTG_Plot():\n    title = 'Various Toxic Gases [2015-2020]'\n    labels = ['Ammonia', 'CarbonMonoOX','SulphurOx','GL Ozone']\n    colors = ['rgb(67,67,67)', 'rgb(115,115,115)','rgb(49,130,189)','rgb(189,189,189)']\n    \n    mode_size = [8, 8, 8,8]\n    line_size = [2, 2, 2,2]\n    \n    x_data = np.vstack((np.array(df['Date']),)*4)\n    y_data = np.array([ df['NH3'],df['CO'], df['SO2'], df['O3'] ])\n    \n    fig = go.Figure()\n\n    for i in range(0, 4):\n        fig.add_trace(go.Scatter(x=x_data[i], y=y_data[i], mode='lines',name=labels[i],line=dict(color=colors[i], width=line_size[i]),\n        connectgaps=True,))\n    \n        fig.add_trace(go.Scatter(x=[x_data[i][0], x_data[i][-1]],y=[y_data[i][0], y_data[i][-1]],mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n    \n    fig.update_layout(xaxis=dict(showline=True,showgrid=False,showticklabels=True,linecolor='rgb(204, 204, 204)',\n                      linewidth=2,ticks='outside',tickfont=dict(family='Arial',size=12,color='rgb(82, 82, 82)',),),\n                      yaxis=dict(showgrid=False,zeroline=False,showline=False,showticklabels=False,),\n                      autosize=False,margin=dict(autoexpand=False,l=100,r=20,t=110,),\n                      showlegend=False,plot_bgcolor='white')\n    \n    annotations = []\n\n    # Adding labels\n    for y_trace, label, color in zip(y_data, labels, colors):\n        \n        # labeling the left_side of the plot\n        annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],xanchor='right', yanchor='middle',\n                                text=label,font=dict(family='Arial',size=12),\n                                showarrow=False))\n        \n        # labeling the right_side of the plot\n        annotations.append(dict(xref='paper', x=0.95, y=y_trace[11],xanchor='left', yanchor='middle',\n                                text='',font=dict(family='Arial',size=12),\n                                showarrow=False))\n\n        # Title\n        annotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,xanchor='left', yanchor='middle',\n                                text=title, font=dict(family='Arial',size=25,color='rgb(37,37,37)'),\n                                showarrow=False))\n\n    fig.update_layout(annotations=annotations, autosize=True)\n    fig.update_xaxes(tickangle=45)\n    fig.show()\n","a66f7385":"# Function to Plot HydroCarbon Gases\n\ndef HC_Plot():\n    title = 'Toxic Hydrocarbon Gases [2015-2020]'\n    labels = ['Benzene', 'Toluene','Xylene']\n    colors = ['rgb(67,67,67)', 'rgb(115,115,115)','rgb(49,130,189)']\n    \n    mode_size = [8, 8, 8]\n    line_size = [2, 2, 2]\n    \n    x_data = np.vstack((np.array(df['Date']),)*3)\n    y_data = np.array([ df['Benzene'],df['Toluene'], df['Xylene'] ])\n    \n    fig = go.Figure()\n\n    for i in range(0, 3):\n        fig.add_trace(go.Scatter(x=x_data[i], y=y_data[i], mode='lines',name=labels[i],line=dict(color=colors[i], width=line_size[i]),\n        connectgaps=True,))\n    \n        fig.add_trace(go.Scatter(x=[x_data[i][0], x_data[i][-1]],y=[y_data[i][0], y_data[i][-1]],mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n    \n    fig.update_layout(xaxis=dict(showline=True,showgrid=False,showticklabels=True,linecolor='rgb(204, 204, 204)',\n                      linewidth=2,ticks='outside',tickfont=dict(family='Arial',size=12,color='rgb(82, 82, 82)',),),\n                      yaxis=dict(showgrid=False,zeroline=False,showline=False,showticklabels=False,),\n                      autosize=False,margin=dict(autoexpand=False,l=100,r=20,t=110,),\n                      showlegend=False,plot_bgcolor='white')\n    \n    annotations = []\n\n    # Adding labels\n    for y_trace, label, color in zip(y_data, labels, colors):\n        \n        # labeling the left_side of the plot\n        annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],xanchor='right', yanchor='middle',\n                                text=label,font=dict(family='Arial',size=12),\n                                showarrow=False))\n        \n        # labeling the right_side of the plot\n        annotations.append(dict(xref='paper', x=0.95, y=y_trace[11],xanchor='left', yanchor='middle',\n                                text='',font=dict(family='Arial',size=12),\n                                showarrow=False))\n\n        # Title\n        annotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,xanchor='left', yanchor='middle',\n                                text=title, font=dict(family='Arial',size=25,color='rgb(37,37,37)'),\n                                showarrow=False))\n\n    fig.update_layout(annotations=annotations, autosize=True)\n    fig.update_xaxes(tickangle=45)\n    fig.show()\n","24534393":"# Plot for Particulate Matter\nPM_Plot()","3bcecf5b":"# Plot for Nitrogen Oxides\nNO_Plot()","154f545f":"# Plot for Various Toxic Gases\nVTG_Plot()","357c3ab3":"# Plot for Toxic Hydrocarbon Gas\nHC_Plot()","565bad6d":"# Seperate dataframe for Delhi with monthly aggregated values\ndf  = aggData('Delhi')","18f6b265":"# Inspect New Dataframe\ndf.head()","ce16e19b":"# Plotting Distribution Plot for Delhi\ndistPlot()","c179640c":"#Plot for Particulate Matter\nPM_Plot()","0b845006":"# Plot for Nitrogen Oxides\nNO_Plot()","3302bedf":"# Plot for Various Toxic Gases\nVTG_Plot()","6df3cbf7":"# Plot for HydroCarbon Gases\nHC_Plot()","813f90c8":"# Seperate dataframe for Kolkata with monthly aggregated values\ndf  = aggData('Kolkata')","4178313e":"# Inspect the New Dataframe\ndf.head()","aeee9f96":"# Plotting Distribution Plot for Kolkata\ndistPlot()","11b4c73c":"#Plot for Particulate Matter\nPM_Plot()","8bd51510":"# Plot for Nitrogen Oxide\nNO_Plot()","42cedafa":"# Plot for Various Toxic Gases\nVTG_Plot()","733b3cef":"# Plot for HydroCarbon\nHC_Plot()","e583dd5a":"# Seperate dataframe for Amaravati with monthly aggregated values\ndf  = aggData('Amaravati')","a11cb80f":"# Inspect New Dataframe\ndf.head()","f1df2ad0":"# Plotting Distribution Plot for Amaravati\ndistPlot()","93b274aa":"#Particulate Matter Plot\nPM_Plot()","61fed638":"# Nitrogen Oxides Plot\nNO_Plot()","e0cd2c0a":"# Various Toxic Gases Plot\nVTG_Plot()","b3266fed":"# HydroCarbon Gases\nHC_Plot()","163647e9":"# Seperate dataframe for Amaravati with monthly aggregated values\ndf  = aggData('Visakhapatnam')","c23a8922":"# Inspect \ndf.head()","fe6a52a3":"# Plotting Distribution Plot for Visakhapatnam\ndistPlot()","3656818a":"# Particulate Matter Plot\nPM_Plot()","cd3b7211":"# NItrogen Oxide Plot\nNO_Plot()","1b34ba61":"# Various Toxic Gases\nVTG_Plot()","534abdbb":"# Hydrocarbon gases\nHC_Plot()","69628be0":"# EDA - Visakhapatnam","e00fa450":"# EDA - Delhi","bfaafcee":"# EDA Preparation\n\nAs part of the preparation for the EDA I will:\n* Aggregate the numerical data per month and average it\n* Construct a function to re-calculate AQI_Bucket based on the monthly aggregated AQI\n* Construct a function to create a seperate dataframe for a particular City","e931737d":"# Air Quality Index India - EDA\n\nIn this notebook, I'm going to attempt to visualize the EDA performed on the AQI data (from 2015-2020) for different Indian Cities. I sincerely hope that these visual insights are an eye opener forus. Please do consider it to UPVOTE if you've been enlightened by these insights.\n\n","4a329178":"# EDA - Hyderabad","ffe346c0":"# EDA - Amaravati","bef622d8":"**Conclusion**: Briefly eye-balling the plots for all the cities above, it is evident that the AQI has slightly improved during the COVID Period in India. ","712c7f76":"# EDA - Kolkata"}}