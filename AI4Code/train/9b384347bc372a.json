{"cell_type":{"8769d4ba":"code","afa75394":"code","55522c1e":"code","e1ec2110":"code","4cddb9e5":"code","e411963d":"code","94ab0285":"code","c6a793ae":"code","e33677b2":"code","f6328fd3":"code","b6f7ca2b":"code","ff1bbfaf":"code","96242f47":"code","cbdc33cb":"code","5c826fc9":"code","60d9f55b":"code","262cda26":"code","925d02fe":"code","4a690802":"code","576e7bcb":"code","75ec21ca":"code","0d6047ec":"code","e6a0438e":"code","06f21900":"code","811d54bf":"code","ff5bdbdf":"markdown","a12f198e":"markdown","a5aa542e":"markdown","6cd5cc69":"markdown","b24c3701":"markdown","2fa5dc7a":"markdown","1a74da9b":"markdown","e3240f43":"markdown","5dc02c02":"markdown"},"source":{"8769d4ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","afa75394":"# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","55522c1e":"# importing the original dataset\noriginal_dataset = pd.read_csv('..\/input\/facebook-ad-campaign\/data.csv')\noriginal_dataset.head()","e1ec2110":"# importing the cleaned dataset\ndf = pd.read_csv('..\/input\/cleaned-data1csv\/cleaned_data1.csv')\n\n# Splittin the dataset to x (independent variables) and y (dependent variable)\nx = df.iloc[:, :-1]\ny = df.iloc[:, -1].values","4cddb9e5":"x.head()","e411963d":"x.describe()","94ab0285":"# get dummies for age\nx = pd.concat([x, pd.get_dummies(x['reporting_start'], drop_first=True, prefix='rs')],axis=1)\nx.drop('reporting_start',inplace=True,axis=1)","c6a793ae":"# Encoding the gender column\nfrom sklearn.preprocessing import LabelEncoder\nlb = LabelEncoder()\nx['gender'] = lb.fit_transform(x['gender'])\n\nx.head()","e33677b2":"x.clicks=x.clicks.astype(int)\nx.age=x.age.astype(int)\nx.impressions=x.impressions.astype(int)\nx.spent=x.spent.astype(int)\nx.interest1=x.interest1.astype(int)\nx.interest2=x.interest2.astype(int)\nx.interest3=x.interest3.astype(int)\nx.campaign_id=x.campaign_id.astype('category')\nx.total_conversion=x.total_conversion.astype(int)\n\nx.dtypes","f6328fd3":"y = y.reshape(len(y),1)\n\nprint(y)","b6f7ca2b":"from sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nsc_y = StandardScaler()\nx = sc_x.fit_transform(x)\ny = sc_y.fit_transform(y)\n\ny","ff1bbfaf":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)\n\nprint(x_train)","96242f47":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(x_train, y_train)","cbdc33cb":"y_pred = regressor.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","5c826fc9":"from sklearn.metrics import r2_score\nscore = r2_score(y_test, y_pred)\n\nround(score, 3)","60d9f55b":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(y_test, y_pred)\n\nround(mae, 3)","262cda26":"from sklearn.metrics import mean_squared_error\nmse = np.sqrt(mean_squared_error(y_test, y_pred))\n\nround(mse, 3)","925d02fe":"from sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 100)\nregressor.fit(x_train, y_train)","4a690802":"y_pred = regressor.predict(x_test)\n\nfrom sklearn.metrics import r2_score\nscore = r2_score(y_test, y_pred)\n\nround(score, 3)","576e7bcb":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(y_test, y_pred)\n\nround(mae, 3)","75ec21ca":"from sklearn.metrics import mean_squared_error\nmse = np.sqrt(mean_squared_error(y_test, y_pred))\n\nround(mse, 3)","0d6047ec":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 10)\nregressor.fit(x_train, y_train)","e6a0438e":"y_pred = regressor.predict(x_test)\n\nfrom sklearn.metrics import r2_score\nscore = r2_score(y_test, y_pred)\n\nround(score, 3)","06f21900":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(y_test, y_pred)\n\nround(mae, 3)","811d54bf":"from sklearn.metrics import mean_squared_error\nmse = np.sqrt(mean_squared_error(y_test, y_pred))\n\nround(mse, 3)","ff5bdbdf":"# Feature Scaling","a12f198e":"## Using Random Forest Regression","a5aa542e":"# Imports","6cd5cc69":"# Splitting the Dataset to Train and Test Sets","b24c3701":"### Basic cleaning of the data was done in Power BI, where some visualizations were also drawn. The data was rearranged to fit the age and gender columns correctly, while ad_id, reporting_end and fb_campaign_id were removed. Reporting_start column was formatted to have only the day of the month, since the month and year were all the same. The reporting_start was further changed to the particular day of the week name (Monday, Tuesday and so on) for better analysis purposes. So from that we saw that the marketing campaign lasted for two weeks. Lastly, we extracted the start of each age row in order to get a singular age to represent the whole age group; this was done for easier computing while creating the model.","2fa5dc7a":"## Using Decision Tree Regression","1a74da9b":"## Using Multiple Linear Regression","e3240f43":"# Trainning the Model on the Trainning Sets and Predicting the Test Set results ","5dc02c02":"# Encoding the categorical data"}}