{"cell_type":{"aee2ed65":"code","daa59855":"code","12c4dacd":"code","beb5fbcf":"markdown","1242a47f":"markdown","4db8540a":"markdown"},"source":{"aee2ed65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","daa59855":"#Importing the dataset\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","12c4dacd":"#Importing the dataset\nds = pd.read_csv(\"\/kaggle\/input\/studentscore.csv\")\nds.head()\nX = ds.iloc[ : ,   : 1 ].values\nY = ds.iloc[ : , 1 ].values\n\n#Fitting Simple Linear Regression Model to the training set\nfrom sklearn.model_selection import train_test_split\n\n#from sklearn.cross_validation import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size = 1\/4, random_state = 0)\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor = regressor.fit(X_train, Y_train)\n\n#Predecting the Result\nY_pred = regressor.predict(X_test)\n\n#Visualising the Training results\nplt.scatter(X_train , Y_train, color = 'red')\nplt.plot(X_train , regressor.predict(X_train), color ='green')\n\n#Visualizing the test results\nplt.scatter(X_test , Y_test, color = 'black')\nplt.plot(X_test , regressor.predict(X_test), color ='blue')","beb5fbcf":"Importing the Libraries","1242a47f":"# Importing the Libraries","4db8540a":"# Importing the dataset"}}