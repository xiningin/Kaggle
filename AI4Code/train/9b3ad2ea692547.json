{"cell_type":{"89cc7aa4":"code","649b9ff8":"code","f0df7754":"code","ad297f59":"code","9b72e13d":"code","243d9494":"code","f67915c0":"code","220cee16":"code","1b31c748":"code","1b024be7":"code","0ad3ac5b":"code","f1f972af":"code","dc3756ca":"code","8eb40b8f":"code","60db4fc9":"code","87e612be":"code","97efe25f":"code","6b4a5396":"code","b489feb3":"code","6ce7fab7":"markdown"},"source":{"89cc7aa4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","649b9ff8":"# load libraries\nimport matplotlib.pyplot as plt","f0df7754":"plt.plot([1, 2, 3, 4])    # only 1 value is given hence it is considered as y value \nplt.ylabel('some numbers')  \nplt.show()","ad297f59":"plt.plot([1, 2, 3, 4], [1, 4, 9, 16]) # first value is of x and other of y ","9b72e13d":"plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')  # r-red and o-circle\nplt.axis([0, 6, 0, 20])\nplt.show()\n# Here we can use different colors and shapes to mark the points \n\"\"\"\"\ncolors\nr - red              \nb - dark blue\ng - green\ny - yellow\nw - white\nm - pruple\nc - light blue\nk - black\n\nshapes\no - circle\ns - square\n- - lines\n-- - dash\n^ - traingle\n< - left sided traingle\n'> - right sided traingle\n'* - star \nx - cross\n\"\"\"","243d9494":"data = {'a': np.arange(50),  # int no from 0 to 49\n        'c': np.random.randint(0, 50, 50), # random 50 int no betn 0 and 49 \n        'd': np.random.randn(50)} # random 50 float no \ndata['b'] = data['a'] + 10 * np.random.randn(50)\ndata['d'] = np.abs(data['d']) * 100\n\nplt.scatter('a', 'b', c='c', s='d', data=data)    # c - color && s - size \nplt.xlabel('entry a')\nplt.ylabel('entry b')\nplt.show()","f67915c0":"names = ['group_a', 'group_b', 'group_c']\nvalues = [1, 10, 100]\n\nplt.figure(figsize=(9, 3))\n\nplt.subplot(131)\nplt.bar(names, values)\nplt.subplot(132)\nplt.scatter(names, values)\nplt.subplot(133)\nplt.plot(names, values)\nplt.suptitle('Categorical Plotting')\nplt.show()","220cee16":"names = ['group_a', 'group_b', 'group_c']\nvalues = [1, 10, 100]\nplt.plot(names, values, linewidth=5.0)  # the last output and this one is same but the width of line here is modified ","1b31c748":"names = ['group_a', 'group_b', 'group_c']\nvalues = [1, 10, 100]\nline, = plt.plot(names, values, '-')\nline.set_antialiased(False) # turn off antialiasing","1b024be7":"lines = plt.plot(names, values)\n# use keyword args\nplt.setp(lines, color='r', linewidth=6.0)\n# or MATLAB style string value pairs\nplt.setp(lines, 'color', 'r', 'linewidth', 6.0)","0ad3ac5b":"def f(t):\n    return np.exp(-t) * np.cos(2*np.pi*t)\n\nt1 = np.arange(0.0, 5.0, 0.1)\nt2 = np.arange(0.0, 5.0, 0.02)\n\nplt.figure()\nplt.subplot(211)\nplt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')\n\nplt.subplot(212)\nplt.plot(t2, np.cos(2*np.pi*t2), 'r--')\nplt.show()","f1f972af":"import matplotlib.pyplot as plt\nplt.figure(1)                # the first figure\nplt.subplot(211)             # the first subplot in the first figure\nplt.plot([1, 2, 3])\nplt.subplot(212)             # the second subplot in the first figure\nplt.plot([4, 5, 6])\n\n\nplt.figure(2)                # a second figure\nplt.plot([4, 5, 6])          # creates a subplot(111) by default\n\nplt.figure(1)                # figure 1 current; subplot(212) still current\nplt.subplot(211)             # make subplot(211) in figure1 current\nplt.title('Easy as 1, 2, 3') # subplot 211 title","dc3756ca":"mu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\n\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')\nplt.axis([40, 160, 0, 0.03])\nplt.grid(True)\nplt.show()","8eb40b8f":"# Data to plot\nlabels = 'Python', 'C++', 'Ruby', 'Java'\nsizes = [215, 130, 245, 210]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\nexplode = (0.4, 0, 0, 0)  # explode 1st slice\n\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=False)\n\nplt.axis('equal')\nplt.show()","60db4fc9":"## Bar plot\n\nx = [2,8,10] \ny = [11,16,9]  \n\nx2 = [3,9,11] \ny2 = [6,15,7] \nplt.bar(x, y) \nplt.bar(x2, y2, color = 'g') \nplt.title('Bar graph') \nplt.ylabel('Y axis') \nplt.xlabel('X axis')  \n\nplt.show()","87e612be":"a = np.array([22,87,5,43,56,73,55,54,11,20,51,5,79,31,27]) \nplt.hist(a) \nplt.title(\"histogram\") \nplt.show()","97efe25f":"x=np.arange(0,10)\ny=np.arange(11,21)\n\na=np.arange(40,50)\nb=np.arange(50,60)\n\n##plotting using matplotlib \n\n##plt scatter\n\nplt.scatter(x,y,c='g')\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.title('Graph in 2D')\nplt.savefig('Test.png')","6b4a5396":"y=x*x\n\n## plt plot\n\nplt.plot(x,y,'r*',linestyle='dashed',linewidth=2, markersize=12)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.title('2d Diagram')","b489feb3":"## Creating Subplots\n\nplt.subplot(2,2,1)\nplt.plot(x,y,'r--')\nplt.subplot(2,2,2)\nplt.plot(x,y,'g*--')\nplt.subplot(2,2,3)\nplt.plot(x,y,'bo')\nplt.subplot(2,2,4)\nplt.plot(x,y,'go')","6ce7fab7":"# Pie-Chart"}}