{"cell_type":{"711604d2":"code","2a349b0f":"code","94eedd38":"code","c97a945e":"code","a3eb732b":"code","5716d605":"code","47bd5eaf":"code","7ad1b30c":"code","0769b856":"code","9d90c7b4":"code","33b022cf":"code","6bb7b525":"code","c320b155":"code","10882ec2":"markdown","6eb211a4":"markdown","4e949e86":"markdown","70694297":"markdown","86c50d38":"markdown","099aad79":"markdown"},"source":{"711604d2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.models as M\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.optimizers as O\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard, ReduceLROnPlateau\n\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2a349b0f":"TEST_SIZE = 0.25\nRANDOM_SEED = 42","94eedd38":"images = np.load('\/kaggle\/input\/sf-captcha-recognition\/data\/images.npy')\nlabels = np.load('\/kaggle\/input\/sf-captcha-recognition\/data\/labels.npy')\n\nprint(\"Train dataset:\", images.shape, labels.shape, \"Labels are:\", set(labels))\nprint(\"Picture shape:\", images[0].shape)","c97a945e":"submission = pd.read_csv('..\/input\/sf-captcha-recognition\/sample_submission.csv')","a3eb732b":"images[0]","5716d605":"cols = 8\nrows = 2\nfig = plt.figure(figsize=(2 * cols - 1, 2.5 * rows - 1))\nfor i in range(cols):\n    for j in range(rows):\n        random_index = np.random.randint(0, len(labels))\n        ax = fig.add_subplot(rows, cols, i * rows + j + 1)\n        ax.grid('off')\n        ax.axis('off')\n        ax.imshow(images[random_index])\n        ax.set_title(labels[random_index])\nplt.show()","47bd5eaf":"def normalize_pictures(pics):\n    return pics.astype('float32')\/255 - 0.5\nn_images = normalize_pictures(images)","7ad1b30c":"images_sub = np.load('..\/input\/sf-captcha-recognition\/data\/images_sub.npy')\nimages_sub = normalize_pictures(images_sub)","0769b856":"def make_callbacks():\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u043b\u0431\u044d\u043a\u043e\u0432 \u0434\u043b\u044f \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0440\u0430\u043d\u043d\u0435\u0439 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043b\u0435\u0440\u043d\u0438\u043d\u0433 \u0440\u0435\u0439\u0442\u0430 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043b\u0430\u0442\u043e, \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0447\u0435\u043a\u043f\u043e\u0438\u043d\u0442\u0430, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435\n    \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u0430\u0441\u044c \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438\"\"\"\n    callback_early_stopping = EarlyStopping(monitor='val_loss',\n                                        patience=10, verbose=1)\n    callback_reduce_lr = ReduceLROnPlateau(monitor='val_loss',\n                                       factor=0.5,\n                                       min_lr=1e-10,\n                                       patience=0,\n                                       verbose=1)\n    callback_tensorboard = TensorBoard(log_dir='.\/23_logs\/',\n                                   histogram_freq=0,\n                                   write_graph=False)\n    path_checkpoint = 'checkpoint.keras'\n    callback_checkpoint = ModelCheckpoint(filepath=path_checkpoint,\n                                      monitor='val_loss',\n                                      verbose=1,\n                                      save_weights_only=True,\n                                      save_best_only=True)\n\n    return [callback_checkpoint,\n                 callback_tensorboard,\n                 callback_reduce_lr]\n\ncallbacks = make_callbacks()","9d90c7b4":"def make_model():\n    model = Sequential()\n    model.add(L.Input(shape =  (48, 48, 3)))\n    model.add(L.Conv2D(16, kernel_size = 3, padding = 'same', activation = 'relu', input_shape = (48, 48, 3)))\n    model.add(BatchNormalization())\n    model.add(L.Conv2D(32, kernel_size = 3, padding = 'same', activation = 'relu', input_shape = (48, 48, 3)))\n    model.add(BatchNormalization())\n    model.add(L.MaxPooling2D(pool_size = 2, padding = 'same'))\n    model.add(L.Dropout(rate = 0.25))\n    model.add(L.Conv2D(32, kernel_size = 3, padding = 'same', activation = 'relu', input_shape = (48, 48, 3)))\n    model.add(BatchNormalization())\n    model.add(L.Conv2D(64, kernel_size = 3, padding = 'same', activation = 'relu', input_shape = (48, 48, 3)))\n    model.add(BatchNormalization())\n    model.add(L.MaxPooling2D(pool_size = 2, padding = 'same'))\n    model.add(L.Dropout(rate = 0.25))\n    model.add(L.Flatten())\n    model.add(L.Dense(units=256, activation = 'relu'))\n    model.add(BatchNormalization())\n    model.add(L.Dropout(rate = 0.25))\n    model.add(L.Dense(units=100, activation = 'relu'))\n    model.add(BatchNormalization())\n    model.add(L.Dropout(rate = 0.25))\n    model.add(L.Dense(units=26, activation = 'softmax'))\n    return model\n\nopt = O.Adam(learning_rate=0.005)\n\n\ndef train_model(make_model_func=make_model, optimizer=opt):\n    BATCH_SIZE = 48\n    EPOCHS = 30\n\n    K.clear_session()\n    model = make_model_func()\n\n    model.compile(\n      loss='sparse_categorical_crossentropy',\n      optimizer=optimizer,\n      metrics=['accuracy']\n  )\n\n    model.fit(\n      n_images, labels,  # \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n      batch_size=BATCH_SIZE, validation_split = 0.15,\n      epochs=EPOCHS,\n      callbacks=callbacks,\n      shuffle=False\n  )\n  \n    return model\n","33b022cf":"labels_sub = train_model().predict(images_sub)","6bb7b525":"submission['Category'] = labels_sub.argmax(axis = 1)","c320b155":"submission.set_index('Id').to_csv('submission.csv')","10882ec2":"# DATA DOWNLOAD","6eb211a4":"Labels are positions of the letter in latin alphabet.","4e949e86":"Baseline on tensorflow course example:","70694297":"Let's get a closer look to the pictures","86c50d38":"# Submission","099aad79":"# IMPORT"}}