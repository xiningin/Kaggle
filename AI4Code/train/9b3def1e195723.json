{"cell_type":{"3bb7d23d":"code","98f82ee1":"code","762c04ba":"code","883d8219":"code","af5c870d":"code","6f963116":"code","817472e3":"code","f0a77593":"code","b27c07ae":"code","93747640":"code","1a8784c4":"code","8d8b474c":"code","d7a7336c":"code","9de7a204":"code","6fcee506":"markdown","c0ca6db8":"markdown","34704058":"markdown"},"source":{"3bb7d23d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98f82ee1":"## Import libraries \n\nimport cv2\nimport numpy as np\nimport os\nimport pandas as pd\n\nfrom tqdm import tqdm\nfrom glob import glob\nfrom albumentations import RandomCrop, HorizontalFlip, VerticalFlip\n\nfrom sklearn.model_selection import train_test_split\nfrom PIL import Image\n\nfrom tensorflow.keras.layers import Input, Conv2D, BatchNormalization, Activation, MaxPool2D, UpSampling2D, Concatenate\nfrom tensorflow.keras.models import Model\n# from keras.utils import plot_model\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping, Callback\nfrom keras.utils import plot_model\nimport os","762c04ba":"from tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())","883d8219":"## Data Augmentation\n## It was chosen the resolution of 1536x1024px keep the ratio of the original images (6000x4000px). \n\ndef create_dir(path):\n    if not os.path.exists(path):\n        os.makedirs(path)\n        \ndef augment_data(images, masks, save_path, augment=True):\n    H = 1024\n    W = 1536\n    for x,y in tqdm(zip(images, masks), total=len(images)):\n        name = x.split(\"\/\")[-1].split(\".\")\n        image_name = name[0]\n        image_extn = name[1]\n\n        name = y.split(\"\/\")[-1].split(\".\")\n        mask_name = name[0]\n        mask_extn = name[1]       \n        \n        x = cv2.imread(x, cv2.IMREAD_COLOR)\n        x = cv2.resize(x, (W, H))\n        y = cv2.imread(y, cv2.IMREAD_COLOR)\n        y = cv2.resize(y, (W, H))\n        \n        if augment == True:\n            \n            aug = RandomCrop(int(2*H\/3), int(2*W\/3), always_apply=False, p=1.0)\n            augmented = aug(image=x, mask=y)\n            x1 = augmented[\"image\"]\n            y1 = augmented[\"mask\"]\n \n            aug = HorizontalFlip(always_apply=False, p=1.0)\n            augmented = aug(image=x, mask=y)\n            x2 = augmented[\"image\"]\n            y2 = augmented[\"mask\"]\n            \n            aug = VerticalFlip(always_apply=False, p=1.0)\n            augmented = aug(image=x, mask=y)\n            x3 = augmented[\"image\"]\n            y3 = augmented[\"mask\"] \n            \n            save_images = [x, x1, x2, x3]\n            save_masks = [y, y1, y2, y3]            \n          \n        else:\n            save_images = [x]\n            save_masks = [y]\n        \n        idx = 0\n        for i, m in zip(save_images, save_masks):\n            i = cv2.resize(i, (W, H))\n            m = cv2.resize(m, (W, H))\n            \n            tmp_img_name = f\"{image_name}_{idx}.{image_extn}\"\n            tmp_msk_name = f\"{mask_name}_{idx}.{mask_extn}\" \n            \n            image_path = os.path.join(save_path, \"images\", tmp_img_name)\n            mask_path = os.path.join(save_path, \"masks\", tmp_msk_name)\n            \n            cv2.imwrite(image_path, i)\n            cv2.imwrite(mask_path, m)\n\n            idx+=1\n\n\npath = \"..\/input\/semantic-drone-dataset\/dataset\/semantic_drone_dataset\/\"\nimages = sorted(glob(os.path.join(path, \"original_images\/*\")))\nmasks = sorted(glob(os.path.join(path, \"label_images_semantic\/*\")))\nprint(f\"Original images:  {len(images)} - Original masks: {len(masks)}\")\n\ncreate_dir(\".\/new_data\/images\/\")\ncreate_dir(\".\/new_data\/masks\/\")\n\nsave_path = \".\/new_data\/\"\n\naugment_data(images, masks, save_path, augment=True)\n\nimages = sorted(glob(os.path.join(save_path, \"images\/*\")))\nmasks = sorted(glob(os.path.join(save_path, \"masks\/*\")))\nprint(f\"Augmented images:  {len(images)} - Augmented masks: {len(masks)}\")","af5c870d":"## Create dataframe\n\nimage_path =  os.path.join(save_path, \"images\/\")\nlabel_path = os.path.join(save_path, \"masks\/\")\n\ndef create_dataframe(path):\n    name = []\n    for dirname, _, filenames in os.walk(path):\n        for filename in filenames:\n            name.append(filename.split('.')[0])\n    \n    return pd.DataFrame({'id': name}, index = np.arange(0, len(name)))\n\ndf_images = create_dataframe(image_path)\ndf_masks = create_dataframe(label_path)\nprint('Total Images: ', len(df_images))\n#print(df_images)","6f963116":"## Split data\n\nX_trainval, X_test = train_test_split(df_images['id'], test_size=0.1, random_state=19)\nX_trainval=df_images['id']\nX_train, X_val = train_test_split(X_trainval, test_size=0.2, random_state=19)\n\nprint(f\"Train Size : {len(X_train)} images\")\nprint(f\"Val Size   :  {len(X_val)} images\")\nprint(f\"Test Size  :  {len(X_test)} images\")\n\ny_train = X_train #the same values for images (X) and labels (y)\ny_test = X_test\ny_val = X_val\n\nimg_train = [os.path.join(image_path, f\"{name}.jpg\") for name in X_train]\nmask_train = [os.path.join(label_path, f\"{name}.png\") for name in y_train]\nimg_val = [os.path.join(image_path, f\"{name}.jpg\") for name in X_val]\nmask_val = [os.path.join(label_path, f\"{name}.png\") for name in y_val]\nimg_test = [os.path.join(image_path, f\"{name}.jpg\") for name in X_test]\nmask_test = [os.path.join(label_path, f\"{name}.png\") for name in y_test]","817472e3":"from keras.layers import Input, SeparableConv2D, BatchNormalization, MaxPooling2D, Conv2DTranspose\nfrom keras.layers import concatenate, Conv2D\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler\nfrom keras.models import Model\nfrom keras.optimizers import Adam\n\ndef mobileunet(input_size, num_classes):\n    inputs = Input(input_size)\n\n    conv1  = SeparableConv2D(64, 3, activation='relu', padding='same')(inputs)\n    conv1  = BatchNormalization()(conv1)\n    conv1  = SeparableConv2D(64, 3, activation='relu', padding='same')(conv1)\n    conv1  = BatchNormalization()(conv1)\n    pool1  = MaxPooling2D(pool_size=(2, 2))(conv1)\n    \n    conv2  = SeparableConv2D(128, 3, activation='relu', padding='same')(pool1)\n    conv2  = BatchNormalization()(conv2)\n    conv2  = SeparableConv2D(128, 3, activation='relu', padding='same')(conv2)\n    conv2  = BatchNormalization()(conv2)\n    pool2  = MaxPooling2D(pool_size=(2, 2))(conv2)\n    \n    conv3  = SeparableConv2D(256, 3, activation='relu', padding='same')(pool2)\n    conv3  = BatchNormalization()(conv3)\n    conv3  = SeparableConv2D(256, 3, activation='relu', padding='same')(conv3)\n    conv3  = BatchNormalization()(conv3)\n    pool3  = MaxPooling2D(pool_size=(2, 2))(conv3)\n    \n    conv4  = SeparableConv2D(512, 3, activation='relu', padding='same')(pool3)\n    conv4  = BatchNormalization()(conv4)\n    conv4  = SeparableConv2D(512, 3, activation='relu', padding='same')(conv4)\n    conv4  = BatchNormalization()(conv4)\n    pool4  = MaxPooling2D(pool_size=(2, 2))(conv4)    \n    \n    conv5  = SeparableConv2D(1024, 3, activation='relu', padding='same')(pool4)\n    conv5  = BatchNormalization()(conv5)\n    conv5  = SeparableConv2D(1024, 3, activation='relu', padding='same')(conv5)\n    conv5  = BatchNormalization()(conv5)\n    \n    conv6  = Conv2DTranspose(512, 3, strides=(2, 2), activation='relu', padding='same')(conv5)\n    cat6   = concatenate([conv4, conv6], axis = 3)\n    conv6  = SeparableConv2D(512, 3, activation='relu', padding='same')(cat6)\n    conv6  = BatchNormalization()(conv6)\n    conv6  = SeparableConv2D(512, 3, activation='relu', padding='same')(conv6)\n    conv6  = BatchNormalization()(conv6)\n    \n    conv7  = Conv2DTranspose(256, 3, strides=(2, 2), activation='relu', padding='same')(conv6)\n    cat7   = concatenate([conv3, conv7], axis = 3)\n    conv7  = SeparableConv2D(256, 3, activation='relu', padding='same')(cat7)\n    conv7  = BatchNormalization()(conv7)\n    conv7  = SeparableConv2D(256, 3, activation='relu', padding='same')(conv7)\n    conv7  = BatchNormalization()(conv7)\n    \n    conv8  = Conv2DTranspose(128, 3, strides=(2, 2), activation='relu', padding='same')(conv7)\n    cat8   = concatenate([conv2, conv8], axis = 3)\n    conv8  = SeparableConv2D(128, 3, activation='relu', padding='same')(cat8)\n    conv8  = BatchNormalization()(conv8)\n    conv8  = SeparableConv2D(128, 3, activation='relu', padding='same')(conv8)    \n    conv8  = BatchNormalization()(conv8)\n    \n    conv9  = Conv2DTranspose(64, 3, strides=(2, 2), activation='relu', padding='same')(conv8)\n    cat9   = concatenate([conv1, conv9], axis = 3)\n    conv9  = SeparableConv2D(64, 3, activation='relu', padding='same')(cat9)\n    conv9  = BatchNormalization()(conv9)\n    conv9  = SeparableConv2D(64, 3, activation='relu', padding='same')(conv9)        \n    conv9  = BatchNormalization()(conv9)\n    conv9  = Conv2D(2, 3, activation='relu', padding='same')(conv9)\n    conv10 = Conv2D(num_classes, 1, activation='sigmoid')(conv9)\n    \n    output = conv10\n    return Model(inputs, output)","f0a77593":"## Define the resolution of the images and the number of classes\n\n\nH = 768   #to keep the original ratio \nW = 1152 \nnum_classes = 23\n\n#model = build_unet((W, H, 3), num_classes)  \nmodel = mobileunet((W, H, 3),num_classes)","b27c07ae":"model.summary()\nplot_model(model,to_file='model.png')","93747640":"## Dataset Pipeline used for training the model\n\ndef read_image(x):\n    x = cv2.imread(x, cv2.IMREAD_COLOR)\n    x = cv2.resize(x, (W, H))\n    x = x\/255.0\n    x = x.astype(np.float32)\n    return x\n\n\ndef read_mask(x):\n    x = cv2.imread(x, cv2.IMREAD_GRAYSCALE)\n    x = cv2.resize(x, (W, H))\n    x = x.astype(np.int32)\n    return x\n\n\ndef tf_dataset(x,y, batch=4):\n    dataset = tf.data.Dataset.from_tensor_slices((x,y))\n    dataset = dataset.shuffle(buffer_size=500)\n    dataset = dataset.map(preprocess)\n    dataset = dataset.batch(batch)\n    dataset = dataset.repeat()\n    dataset = dataset.prefetch(2)\n    return dataset\n    \n\ndef preprocess(x,y):\n    def f(x,y):\n        x = x.decode()\n        y = y.decode()\n        image = read_image(x)\n        mask = read_mask(y)\n        return image, mask\n    \n    image, mask = tf.numpy_function(f,[x,y],[tf.float32, tf.int32])\n    mask = tf.one_hot(mask, num_classes, dtype=tf.int32)\n    image.set_shape([H, W, 3])    # In the Images, number of channels = 3. \n    mask.set_shape([H, W, num_classes])    # In the Masks, number of channels = number of classes. \n    return image, mask","1a8784c4":"## Train the model\n\n# Seeding\nnp.random.seed(42)\ntf.random.set_seed(42)\n\n# Hyperparameters\nshape = (H, W, 3)\nnum_classes = 23  \nlr = 1e-4\nbatch_size = 4\nepochs = 20\n\n# Model\nmodel = build_unet(shape, num_classes)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=tf.keras.optimizers.Adam(lr), metrics=['accuracy'])\n\ntrain_dataset = tf_dataset(img_train, mask_train, batch = batch_size)\nvalid_dataset = tf_dataset(img_val, mask_val, batch = batch_size)\n\ntrain_steps = len(img_train)\/\/batch_size\nvalid_steps = len(img_val)\/\/batch_size\n\ncheckpointer = [\n    ModelCheckpoint(filepath=\".\/model.h5\",monitor='val_loss',verbose=2,save_best_only=True),\n    ReduceLROnPlateau(monitor='val_loss', patience=3, factor=0.1, verbose=2, min_lr=1e-6),\n    EarlyStopping(monitor='val_loss', patience=10, verbose=2)\n]\n\nmodel.fit(train_dataset,\n          steps_per_epoch=train_steps,\n          validation_data=valid_dataset,\n          validation_steps=valid_steps,\n          epochs=epochs,\n          callbacks=checkpointer\n         )","8d8b474c":"## Prediction\n\ncreate_dir('.\/results')  #create the folder for the predictions\n\n# Seeding\nnp.random.seed(42)\ntf.random.set_seed(42)\n\n# Model\nmodel = tf.keras.models.load_model(\"model.h5\")\n\n# Saving the masks\nfor x, y in tqdm(zip(img_test, mask_test), total=len(img_test)):\n    name = x.split(\"\/\")[-1]\n    \n    ## Read image\n    x = cv2.imread(x, cv2.IMREAD_COLOR)\n    x = cv2.resize(x, (W, H))\n    x = x\/255.0\n    x = x.astype(np.float32)\n\n    ## Read mask\n    y = cv2.imread(y, cv2.IMREAD_GRAYSCALE)\n    y = cv2.resize(y, (W, H))\n    \n    y = np.expand_dims(y, axis=-1) #(384,256,1)\n    \n    y = y * (255\/num_classes)\n    y = y.astype(np.int32)\n    y = np.concatenate([y, y, y], axis=2)\n    \n    ## Prediction\n    p = model.predict(np.expand_dims(x, axis=0))[0]\n    p = np.argmax(p, axis=-1)\n    \n    p = np.expand_dims(p, axis=-1)  \n    \n    p = p * (255\/num_classes)\n    p = p.astype(np.int32)\n    p = np.concatenate([p, p, p], axis=2)\n      \n    cv2.imwrite(f\".\/results\/{name}\", p)\n    ","d7a7336c":"# From the test set, take only images that represent the ones in the original dataset and not those are obtained from the data augmentation.\n# (they have _0 in the name)\n\nimage_list = []\nmask_list = []\n\nfor x,y in tqdm(zip(img_test, mask_test), total=len(img_test)):\n    name = x.split(\"\/\")[-1]\n    image_name = name[4]\n\n    name = y.split(\"\/\")[-1]\n    mask_name = name[4]\n    \n    if image_name == '0':\n        image_list.append(x)\n        mask_list.append(y)","9de7a204":"## Plot 5 images to verify the accuracy in the predictions\n\nimg_selection = image_list[10:15]\nmask_selection = mask_list[10:15]\n\nfor img, mask in zip(img_selection, mask_selection):\n    name = img.split(\"\/\")[-1]\n    x = cv2.imread(img, cv2.IMREAD_COLOR)\n    x = cv2.cvtColor(x, cv2.COLOR_BGR2RGB)\n    x = cv2.resize(x, (W, H))\n\n    y = cv2.imread(mask, cv2.IMREAD_GRAYSCALE)\n    y = cv2.resize(y, (W, H))\n\n\n    p = cv2.imread(f\".\/results\/{name}\", cv2.IMREAD_GRAYSCALE)\n    p = cv2.resize(p, (W, H))\n\n    #Plotto le tre immagini\n    fig, axs = plt.subplots(1, 3, figsize=(20, 20), constrained_layout=True)\n\n    axs[0].imshow(x, interpolation = 'nearest')\n    axs[0].set_title('image')\n    axs[0].grid(False)\n\n    axs[1].imshow(y, interpolation = 'nearest')\n    axs[1].set_title('GT')\n    axs[1].grid(False)\n\n    axs[2].imshow(p)\n    axs[2].set_title('prediction')\n    axs[2].grid(False)","6fcee506":"# Introduction of Semantic Segmentation","c0ca6db8":"the goal of semantic image segmentation is to label each pixel of an image with a corresponding class of what is being represented.  \nBecause we're predicting for every pixel in the image, this task is commonly referred to as dense prediction.\n\n<img src=\"https:\/\/www.jeremyjordan.me\/content\/images\/2018\/05\/Screen-Shot-2018-05-17-at-7.42.16-PM.png\" width=\"700px\"  \/>\n\n### Field of Application\n\n|**Autonomous Driving**|**Medical Image Diagnostics**|\n|---|---|\n|<img src=\"https:\/\/storage.googleapis.com\/kaggle-media\/competitions\/cvpr\/image_example.jpg\" width=\"300px\"  \/>|<img src=\"https:\/\/media.springernature.com\/lw685\/springer-static\/image\/art%3A10.1186%2Fs12880-020-00543-7\/MediaObjects\/12880_2020_543_Fig3_HTML.jpg\" width=\"300px\"  \/>|\n","34704058":"## Typical network for Semantic Segmentation\n- FCN, SegNet, UNet, DeepLab, ENet etc\n\n> ### FCN   \n \n Adopted Skip Connection to provide the necessary detail in order to reconstruct accurate shapes for segmentation boundaries.  \n Deconvolution's procedures are so simple that the details of the object disappear.  \n <img src=\"https:\/\/www.jeremyjordan.me\/content\/images\/2018\/05\/Screen-Shot-2018-05-20-at-12.26.53-PM.png\" width=\"700px\"\/>\n \n> ### UNet   \n \n UNet consists of a U-shaped network.  \n UNet proposed a model that applied Up-sampling and Skip Archetecture of an expanded concep than FCNs.\n <img src=\"https:\/\/www.jeremyjordan.me\/content\/images\/2018\/05\/Screen-Shot-2018-05-20-at-1.46.43-PM.png\" width=\"700px\"\/>\n \n## MobileUNet\nUsing MobileNet as a backbone of UNet to speed up applications.  \n<img src=\"https:\/\/img1.daumcdn.net\/thumb\/R1280x0\/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FlS9vx%2Fbtq3DGy86Av%2FvLwlUcjx4JTSq0Xz6jQ0Sk%2Fimg.png\" width=\"1000px\"\/>"}}