{"cell_type":{"202cadbe":"code","b42f3b16":"code","420b7214":"code","79031286":"code","690853ef":"code","db937bc8":"code","b1b178bd":"code","826dab7c":"code","4ce2aa6b":"code","5c83bda7":"code","6bd47c94":"code","f84916f6":"code","01cd7c03":"code","d7c051d9":"code","13bd8ac5":"code","d46cfbe8":"code","61c703b8":"code","5b8815bd":"code","b1beb38f":"code","92c71f1a":"code","4210d998":"code","a53d0752":"code","70545193":"code","fe240eb7":"code","828e437b":"code","d9d440dc":"code","d673094a":"markdown","29a38e29":"markdown","d9c305a5":"markdown"},"source":{"202cadbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b42f3b16":"# Importando a base\ndf_vinho = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\n\ndf_vinho.shape","420b7214":"# Visualizando os dados\ndf_vinho.head()","79031286":"# Conferindo os tipos e quantidades\ndf_vinho.info()","690853ef":"# Selecionando as colunas para treinamento\nfeats = [c for c in df_vinho.columns if c not in ['quality']]","db937bc8":"# Separando o dataframe\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(df_vinho, random_state = 42)\n\ntrain.shape, test.shape","b1b178bd":"# Treinando um modelo de RF Regressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(n_estimators=200, n_jobs=-1, random_state=42)\n\nrf.fit(train[feats], train['quality'])","826dab7c":"# Fazendo previs\u00f5es com o modelo treinado\npreds = rf.predict(test[feats])\n\npreds","4ce2aa6b":"# Visualizar os 5 \u00faltimos registros da base de teste\ntest.tail()","5c83bda7":"# Verificando o desempenho de acordo com a m\u00e9trica\nfrom sklearn.metrics import mean_squared_error\n\nmean_squared_error(test['quality'], preds)","6bd47c94":"# Avaliando o desempenho do modelo em cima de dados conhecidos (dados de treino)\npreds_train = rf.predict(train[feats])\n\nmean_squared_error(train['quality'], preds_train)","f84916f6":"# Importando a base\ndf_cardio = pd.read_csv('\/kaggle\/input\/cardiovascular-disease-dataset\/cardio_train.csv', sep=';')\n\ndf_cardio.shape","01cd7c03":"# Visualizando os dados\ndf_cardio.head()","d7c051d9":"# Tipos e tamanhos\ndf_cardio.info()","13bd8ac5":"# Selecionando as colunas para treinamento\nfeats = [c for c in df_cardio.columns if c not in ['id', 'cardio']]","d46cfbe8":"# Separando o dataframe\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(df_cardio, random_state = 42, test_size=0.1)\n\ntrain, valid = train_test_split(train, random_state = 42, test_size=0.1)\n\ntrain.shape, valid.shape, test.shape","61c703b8":"# Treinando um modelo de RF Classifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators=200, n_jobs=-1, random_state=42)\n\nrf.fit(train[feats], train['cardio'])","5b8815bd":"# Fazendo previs\u00f5es com o modelo treinado na base de valida\u00e7\u00e3o\npreds_val = rf.predict(valid[feats])\n\npreds_val","b1beb38f":"# Visualizando os 3 primeiros registros da base de valida\u00e7\u00e3o\nvalid.head(3)","92c71f1a":"# Visualizando os 3 \u00faltimos registros da base de valida\u00e7\u00e3o\nvalid.tail(3)","4210d998":"# Verificando o desempenho de acordo com a m\u00e9trica - base de valida\u00e7\u00e3o\nfrom sklearn.metrics import accuracy_score\n\naccuracy_score(valid['cardio'], preds_val)","a53d0752":"# Vamos verificar qual o valor de base para a coluna target da base de valida\u00e7\u00e3o\nvalid['cardio'].value_counts(normalize=True)","70545193":"# Fazendo previs\u00f5es com o modelo treinado na base de teste\npreds_test = rf.predict(test[feats])\n\npreds_test","fe240eb7":"# Verificando o desempenho de acordo com a m\u00e9trica - base de teste\naccuracy_score(test['cardio'], preds_test)","828e437b":"import matplotlib.pyplot as plt\n\nfig=plt.figure(figsize=(15, 5))\n\n# Avaliando a importancia de cada coluna (cada vari\u00e1vel de entrada)\npd.Series(rf.feature_importances_, index=feats).sort_values().plot.barh()","d9d440dc":"# importando a bilbioteca para plotar o gr\u00e1fico de Matriz de Confus\u00e3o\nimport scikitplot as skplt\n\n# Matriz de Confus\u00e3o - Dados de Teste\nskplt.metrics.plot_confusion_matrix(test['cardio'], preds_test)","d673094a":"## Qualidade do vinho - Modelo de Regress\u00e3o","29a38e29":"# IESB - Miner II - Aula 06 - Regress\u00e3o e Classifica\u00e7\u00e3o\n## Qualidade do vinho\n## Doen\u00e7as cardiovasculares","d9c305a5":"## Doen\u00e7as cardiovasculares - Modelo de classifica\u00e7\u00e3o bin\u00e1ria"}}