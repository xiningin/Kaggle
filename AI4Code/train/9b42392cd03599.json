{"cell_type":{"effc24ef":"code","c9b8212e":"code","4a8f9f1d":"code","d3b14f8c":"code","0cc1ec3d":"code","397b922d":"code","95e8f645":"code","0fab9763":"code","837476e7":"code","0aad33e7":"code","2bdb4886":"code","fe5098f6":"code","60f88ef3":"code","9491ddd6":"code","7ad3d37d":"code","3182a780":"code","ab0a53ed":"code","3faab14f":"code","681f70d9":"code","53024ff2":"code","16a13212":"code","690038c5":"code","5053e805":"code","7068e680":"code","fc96dbad":"code","661aafad":"code","749bea8d":"code","d840974a":"code","3c56f899":"code","410bb7bf":"code","e72d71ab":"code","2bddd3ae":"code","25893460":"code","2e2b6c7c":"code","4d60fffe":"markdown","df14fdd2":"markdown","ff55ebc1":"markdown","89f5717e":"markdown","3e8a1e09":"markdown","49960482":"markdown"},"source":{"effc24ef":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom sklearn import preprocessing\nimport xgboost as xgb\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom sklearn.metrics import roc_auc_score\nimport time","c9b8212e":"# data load\ntrain_transaction = pd.read_csv('..\/input\/train_transaction.csv', index_col='TransactionID')\ntest_transaction = pd.read_csv('..\/input\/test_transaction.csv', index_col='TransactionID')\n\ntrain_identity = pd.read_csv('..\/input\/train_identity.csv', index_col='TransactionID')\ntest_identity = pd.read_csv('..\/input\/test_identity.csv', index_col='TransactionID')\n\nsample_submission = pd.read_csv('..\/input\/sample_submission.csv', index_col='TransactionID')","4a8f9f1d":"## Function to reduce the DF size: \n# --- taken from https:\/\/www.kaggle.com\/kabure\/extensive-eda-and-modeling-xgb-hyperopt\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n","d3b14f8c":"train = train_transaction.merge(train_identity, how='left', left_index=True, right_index=True)\ntest = test_transaction.merge(test_identity, how='left', left_index=True, right_index=True)\n\nprint(train.shape)\nprint(test.shape)","0cc1ec3d":"## REducing memory\ntrain = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","397b922d":"del train_transaction, train_identity, test_transaction, test_identity","95e8f645":"# subselect variables: :::::::::::::::: manually ::::::::::::::\nvariables  = ['TransactionDT','TransactionAmt','card1','card2', 'card3', 'card5', 'addr1', 'addr2', 'dist1',\n                       'C1', 'C2','C3', 'C4','C5', 'C6','C7', 'C8','C9', 'C10', 'C11', 'C12','C13', 'C14',\n              'DeviceType', 'isFraud']\n\ntrain =  train[variables]\nvariables.remove('isFraud')\ntest = test[variables]\n\nprint(train.shape)\n\nprint(test.shape)","0fab9763":"# alternative encoding\n\nFraud = train['isFraud'].copy()\ntrain_df = train.drop('isFraud', axis=1).copy()\ndf = pd.concat([test, train_df])\ntraindex = train_df.index\ntestdex = test.index\n","837476e7":"df.head(4)","0aad33e7":"#df_dummy = pd.get_dummies(df)\n\n# Scaling between -1 and 1. Good practice for continuous variables.\nfrom sklearn import preprocessing\ncontinuous_features = ['TransactionDT','TransactionAmt','card1','card2', 'card3', 'card5', 'addr1', 'addr2', 'dist1',\n                       'C1', 'C2','C3', 'C4','C5', 'C6','C7', 'C8','C9', 'C10', 'C11', 'C12','C13', 'C14']\nfor col in continuous_features:\n    transf = df[col].values.reshape(-1,1)\n    scaler = preprocessing.StandardScaler().fit(transf)\n    df[col] = scaler.transform(transf)","2bdb4886":"# Finish Pre-Processing\n# Dummmy Variables (One Hot Encoding)\ndf = pd.get_dummies(df, columns=['DeviceType'])\ndf.columns\n\n#df = df.drop(['Cabin', 'Name', 'Ticket'], axis = 1)\n# Now that pre-processing is complete, split data into train\/test again.\ntrain_df = df.loc[traindex, :]\ntrain_df['isFraud'] = Fraud\ntest_df = df.loc[testdex, :]\n\ntrain_df = df.loc[traindex, :]\ntrain_df['isFraud'] = Fraud\ntest_df = df.loc[testdex, :]\n\n### \nX_train = train_df.drop(['isFraud'], axis = 1)\ny_train = train_df['isFraud']\nX_test = test_df\n\n\n# fill NA values\nX_train = X_train.fillna(-999)\nX_test = X_test.fillna(-999)","fe5098f6":"threshold = 0.98\n    \n# Absolute value correlation matrix\ncorr_matrix = train[train['isFraud'].notnull()].corr().abs()\n\n# Getting the upper triangle of correlations\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n# Select columns with correlations above threshold\nto_drop = [column for column in upper.columns if any(upper[column] > threshold)]\n\nprint('There are %d columns to remove.' % (len(to_drop)))\ntrain = train.drop(columns = to_drop)\ntest = test.drop(columns = to_drop)\n","60f88ef3":"del df, train, test, Fraud","9491ddd6":"# y_train = train['isFraud'].copy()\n\n# # Drop target\n# X_train = train.drop('isFraud', axis=1)\n# X_test = test.copy()","7ad3d37d":"print(X_train.shape)\nprint(X_test.shape)","3182a780":"X_train.head()","ab0a53ed":"# df = pd.concat([X_train_full, y_train_full], axis=1)\n# df.head()","3faab14f":"# df.describe()","681f70d9":"# # sample dataframe to obtain better exectution time\n# N = 5000\n# df = df.sample(n = N, random_state = 0)\n# sns.pairplot(data=df)","53024ff2":"# plt.figure(figsize=(10,10))\n# sns.boxplot(x=\"features\", y=\"value\", hue=\"isFraud\", data=df)\n# plt.xticks(rotation=90)","16a13212":"# del df","690038c5":"# # Label Encoding\n# for f in X_train_full.columns:\n#     if X_train_full[f].dtype=='object' or X_test[f].dtype=='object': \n#         lbl = preprocessing.LabelEncoder()\n#         lbl.fit(list(X_train_full[f].values) + list(X_test[f].values))\n#         X_train_full[f] = lbl.transform(list(X_train_full[f].values))\n#         X_test[f] = lbl.transform(list(X_test[f].values)) ","5053e805":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.3, random_state=0)","7068e680":"## REducing memory\nX_train = reduce_mem_usage(X_train)\nX_val = reduce_mem_usage(X_val)","fc96dbad":"X_train.shape","661aafad":"m = RandomForestClassifier(n_jobs=-1, n_estimators = 200)\nm.fit(X_train, y_train)\n\nprint(roc_auc_score(y_val,m.predict_proba(X_val)[:,1] ))","749bea8d":"sample_submission['isFraud'] = m.predict_proba(X_test)[:,1]\nsample_submission.to_csv('base_RF.csv')","d840974a":"# top N importances\nN = 10\nimportances = m.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in m.estimators_],\n             axis=0)\n\n# create a dataframe\nimportances_df = pd.DataFrame({'variable':X_train.columns, 'importance': importances})\n\ntop_N = importances_df.sort_values(by=['importance'], ascending=False).head(N)\n\ntop_N","3c56f899":"sns.barplot(data = top_N, y = \"variable\", x = \"importance\", color = 'steelblue')","410bb7bf":"print(X_train.shape)\nprint(X_val.shape[0])","e72d71ab":"from sklearn.model_selection import ParameterGrid\n\n# Create a dictionary of hyperparameters to search\ngrid = {'n_estimators':[150,200,250], 'max_depth': [10,15,20], 'max_features': [10,15, 20], 'random_state': [0]}\ntest_scores = []\n\n# Loop through the parameter grid, set the hyperparameters, and save the scores\nfor g in ParameterGrid(grid):\n    m.set_params(**g)  # ** is \"unpacking\" the dictionary\n    m.fit(X_train, y_train)\n    #test_scores.append(m.score(X_val, y_val))\n    test_scores.append(roc_auc_score(y_val, m.predict_proba(X_val)[:,1]))\n\n# Find best hyperparameters from the test score and print\nbest_idx = np.argmax(test_scores)\nprint(test_scores[best_idx], ParameterGrid(grid)[best_idx])","2bddd3ae":"# pick the best results\nm.set_params(**ParameterGrid(grid)[best_idx])","25893460":"print(roc_auc_score(y_val,m.predict_proba(X_val)[:,1] ))","2e2b6c7c":"sample_submission['isFraud'] = m.predict_proba(X_test)[:,1]\nsample_submission.to_csv('tuned_RF.csv')","4d60fffe":"# Feature engineering","df14fdd2":"## Feature Importances","ff55ebc1":"# Random Forest Model","89f5717e":"# Reduce memory usage","3e8a1e09":"## Improving the model\n\n### Hyperparameters","49960482":"## EDA"}}