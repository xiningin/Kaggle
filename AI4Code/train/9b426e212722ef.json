{"cell_type":{"0a715ad2":"code","69d99c34":"code","2358ab0d":"code","5ac5b852":"code","dde65a75":"code","53f0802f":"code","80c94a3c":"code","421cbacb":"code","1c012fe9":"code","2f58f5b0":"code","2bb9b5f0":"code","41e2b330":"code","d1acc981":"code","2d8cc446":"code","6ac5c66e":"code","e9915e31":"markdown","4b603ed8":"markdown","9138d3db":"markdown","2d62ec0f":"markdown","8c952d64":"markdown","767104fc":"markdown","90b206b7":"markdown","df102465":"markdown","d1b41c7b":"markdown","086bad10":"markdown","f12dbfa1":"markdown","ae226d19":"markdown","1ebb67f0":"markdown","b51d28b2":"markdown","36329dbd":"markdown","28d1e19f":"markdown","6c99e3b2":"markdown","e8385393":"markdown"},"source":{"0a715ad2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv('\/kaggle\/input\/online-chess-games\/chess_games.csv')","69d99c34":"print(df.dtypes)","2358ab0d":"#Getting rid of all of the games that are one move only\ndf = df[df.moves.str.len() >= 6] #If you were wondering, I did not notice the 'turns' column until way after this lol\n\n#Making a new Series in the dataframe to contain a list of all the moves\ndf['moves_list'] = df.moves.apply(lambda x: x.split())\n\n#Add columns called opening_move and response, which are the first moves by white and black, respectively\ndf['opening_move'] = df.moves_list.apply(lambda x: x[0])\ndf['response'] = df.moves_list.apply(lambda x: x[1])\n\n#Adding an opening_name column to name a few common opening moves\ndf['opening_name'] = df.moves_list.apply(lambda x: 'King\\'s Pawn' if x[0] == 'e4' else ('Queen\\'s Pawn' if x[0] == 'd4' else ('English' if x[0] == 'c4' else ('Reti' if x[0] == 'Nf3' else 'Other'))))\n\n#What was the rating gap between the two players?\ndf['rating_gap'] = abs(df['white_rating'] - df['black_rating'])\n\n#Did the higher-rated player win?\ndf['higher_rated_victory'] = np.where((df['winner'] == 'White') & (df['white_rating'] > df['black_rating']) | (df['winner'] == 'Black') & (df['black_rating'] > df['white_rating']), 1, 0)\n\n#Classify the rating gap\ndf['rating_gap_class'] = df.rating_gap.apply(lambda x: '0-50' if (x <= 50) else ('51-100' if (x > 50 and x <= 100) else ('101-150' if (x > 100 and x <= 150) else ('151-200' if (x > 150 and x <= 200) else ('201-250' if (x > 200 and x <= 250) else '>250')))))\n\n#Did white win?\ndf['white_victory'] = np.where(df['winner'] == 'White', 1, 0)\n\n#Split into three of the most popular openings by white\nenglish = df[df.opening_move == 'c4']\nqueens_pawn = df[df.opening_move == 'd4']\nkings_pawn = df[df.opening_move == 'e4']\nreti = df[df.opening_move == 'Nf3']\n\n#Visualize which openings are used the most\nopening_data = df.groupby('opening_name')['game_id'].count()\nplt.pie(x=opening_data, autopct='%.1f%%', labels=opening_data.keys(), pctdistance=0.5)\nplt.title('Percentage of Openings', fontsize=14)\nplt.show()\nplt.clf()","5ac5b852":"#Visualize who was able to win after each opening using pie chart\n\n#For each DataFrame, create additional DataFrame counting the number of times white or black won (or drew)\nenglish_winner_data = english.groupby('winner')['game_id'].count()\nqueen_winner_data = queens_pawn.groupby('winner')['game_id'].count()\nking_winner_data = kings_pawn.groupby('winner')['game_id'].count()\nreti_winner_data = reti.groupby('winner')['game_id'].count()\n\npie, axs = plt.subplots(2,2, figsize=[10,10])\n\nplt.subplot(2,2,1)\nplt.pie(x=english_winner_data, autopct=\"%.1f%%\", labels=english_winner_data.keys(), pctdistance=0.5)\nplt.title(\"Winners After a c4 Opening\", fontsize=14)\n\nplt.subplot(2,2,2)\nplt.pie(x=queen_winner_data, autopct=\"%.1f%%\", labels=queen_winner_data.keys(), pctdistance=0.5)\nplt.title(\"Winners After a d4 Opening\", fontsize=14)\n\nplt.subplot(2,2,3)\nplt.pie(x=king_winner_data, autopct=\"%.1f%%\", labels=king_winner_data.keys(), pctdistance=0.5)\nplt.title(\"Winners After a e4 Opening\", fontsize=14)\n\nplt.subplot(2,2,4)\nplt.pie(x=reti_winner_data, autopct=\"%.1f%%\", labels=reti_winner_data.keys(), pctdistance=0.5)\nplt.title(\"Winners After a Nf3 Opening\", fontsize=14)\nplt.show()","dde65a75":"#Creating a DataFrame to tell me the total amount of wins by the white pieces in four common openings\n\n#Counts the total amount of white piece victories, grouped by opening name\ndf_grouped_ratings = df.groupby('opening_name')['higher_rated_victory'].sum()\ndf_grouped_ratings = df_grouped_ratings.to_frame() #Converting from series to dataFrame\n\n#Adding a column for the total number of games\ndf_grouped_ratings['totals'] = df.groupby('opening_name')['higher_rated_victory'].count()\n#Adding a column for draws\/losses\ndf_grouped_ratings['losses_or_draws'] = df_grouped_ratings['totals'] - df_grouped_ratings['higher_rated_victory']\nprint(df_grouped_ratings.head(10))","53f0802f":"#Visualize which ratings dominate which opening\n\nfig, ax = plt.subplots(1, figsize=(12,10))\nax.bar(df_grouped_ratings.index, df_grouped_ratings['higher_rated_victory'], label='Higher Rating Win', color='#ae24d1')\nax.bar(df_grouped_ratings.index, df_grouped_ratings['losses_or_draws'], label='Draw or Lower Rating Win', bottom=df_grouped_ratings['higher_rated_victory'], color='#24b1d1')\nax.set_ylabel('Wins', fontsize=14)\nax.set_xlabel('Opening Move', fontsize=14)\nax.set_title('Wins by Opening Move', fontsize=18)\nax.legend()\nplt.show()\nplt.clf()","80c94a3c":"pie, axs = plt.subplots(2,2, figsize=[16,10])\n\nplt.subplot(2,2,1)\nsns.barplot(\n    data=kings_pawn,\n    x='response',\n    y='white_victory',\n    palette='rocket'\n)\nplt.title('King\\'s Pawn Opening Response')\nplt.ylabel('White Winning Rate')\nplt.xlabel('Black\\'s Response')\nplt.axhline(0.5)\n\nplt.subplot(2,2,2)\nsns.barplot(\n    data=queens_pawn,\n    x='response',\n    y='white_victory',\n    palette='Spectral'\n)\nplt.title('Queen\\'s Pawn Opening Response')\nplt.ylabel('White Winning Rate')\nplt.xlabel('Black\\'s Response')\nplt.axhline(0.5)\n\nplt.subplot(2,2,3)\nsns.barplot(\n    data=english,\n    x='response',\n    y='white_victory',\n    palette='brg_r'\n)\nplt.title('English Opening Response')\nplt.ylabel('White Winning Rate')\nplt.xlabel('Black\\'s Response')\nplt.axhline(0.5)\n\nplt.subplot(2,2,4)\nsns.barplot(\n    data=reti,\n    x='response',\n    y='white_victory',\n    palette='Wistia'\n)\nplt.title('Reti Opening Response')\nplt.ylabel('White Winning Rate')\nplt.xlabel('Black\\'s Response')\nplt.axhline(0.5)\n\nplt.show()\nplt.clf()","421cbacb":"#Create desired dataframe where every player is rated under 1000 ELO\n#Note, this was originally 1000, but there weren't many games like that\n#This mainly became a cell for me to mess around with the numbers a bit then\n#see how it affected the pie chart\nnum = 1100\ndf_under_1000 = df[(df.white_rating < num) & (df.black_rating < num)]\n\ndf_under_1000_winners = df_under_1000.groupby('winner')['game_id'].count()\ndf_under_1000_winners\n\nplt.pie(x=df_under_1000_winners, autopct=\"%.1f%%\", labels=df_under_1000_winners.keys(), pctdistance=0.5)\nplt.title(\"Winning Percentage for Games Under {} ELO\".format(num), fontsize=14)","1c012fe9":"sns.barplot(\n    data=df,\n    x='rating_gap_class',\n    y='higher_rated_victory',\n    order=['0-50', '51-100', '101-150', '151-200', '201-250', '>250'],\n    palette='mako'\n)\nplt.xlabel('Rating Gap', fontsize=16)\nplt.ylabel('Win Rate', fontsize=16)\nplt.title('Win Rate by Rating Gap', fontsize=16)\nplt.show()\nplt.clf","2f58f5b0":"#Get a DataFrame of all users who played white pieces and how many wins they accrued\ndf_users_white = df.groupby('white_id').agg(white_victories=('white_victory', 'sum'), white_games=('game_id', 'count'))\n\n#Get a DataFrame of all users who had black pieces and how many victories their opponents accrued\ndf_users_black = df.groupby('black_id').agg(white_victories=('white_victory', 'sum'), black_games=('game_id', 'count'))\n\n#Since we only know white piece victories, we need black piece victories to give us the number of games won by the key\ndf_users_black['black_victories'] = df_users_black.black_games - df_users_black.white_victories\ndf_users_black.drop('white_victories', axis=1, inplace=True)\n\n#Join the two dataframes together on the index (username in this case). Some will have NaN values because of the nature of the join\n#But we can just replace those with 0\ndf_users = df_users_white.join(df_users_black)\ndf_users = df_users.fillna(0)\n\n#add columns for total victories and total games played\ndf_users['victories'] = df_users.white_victories + df_users.black_victories\ndf_users['games_played'] = df_users.white_games + df_users.black_games\n\n#Now that we have total number of wins and games played, how about winning percentage?\ndf_users['win_pct'] = df_users.victories \/ df_users.games_played\n\n\n#Let's sort the df by people who have the highest win percentage\ndf_users_sorted = df_users.sort_values(by=['win_pct'], ascending=False)\ndf_users_sorted.head(5)","2bb9b5f0":"game_threshold = 24\ndf_users_many_games = df_users[(df_users.games_played >= game_threshold)]\ndf_users_many_games_sorted = df_users_many_games.sort_values(by=['win_pct'], ascending=False)\ndf_users_many_games_sorted.head(10)","41e2b330":"#Get a DataFrame containing all of the games chesscarl played\ndf_carl = df[(df.white_id == 'chesscarl') | (df.black_id == 'chesscarl')]\ndf_carl.rated.unique()","d1acc981":"#Get all the unique ids in the games chesscarl has played\nprint(df_carl.white_id.unique())\nprint(df_carl.black_id.unique())","2d8cc446":"#In how many games was chesscarl the higher-rated player? Adding a column to tell us whether they were or not\ndf_carl['carl_higher'] = np.where((df_carl['white_id'] == 'chesscarl') & (df_carl['white_rating'] > df_carl['black_rating']) | (df_carl['black_id'] == 'chesscarl') & (df_carl['black_rating'] > df_carl['white_rating']), 1, 0)\n\n#df_carl[['white_id', 'white_rating', 'black_id', 'black_rating', 'carl_higher', 'rating_gap']].head(10)\n\n#We can get the number of games that chesscarl was rated higher than their opponents by using the .sum() function on the dataframe\ndf_carl.carl_higher.sum()","6ac5c66e":"df_carl_is_higher = df_carl[(df_carl.carl_higher == 1)]\ndf_carl_is_lower = df_carl[(df_carl.carl_higher == 0)]\n\nprint(df_carl_is_higher.rating_gap.mean(), df_carl_is_lower.rating_gap.mean())","e9915e31":"# Cheater Case Study\n\nI am going to pick a particularly fishy player from our list of people above. Let's take a look at the user **chesscarl** based on the fact that they won 45 out of 46 games played in this set of data.","4b603ed8":"Hmm, so it looks like this 'Carl' character got most of their wins by bullying players at a much lower rating. When Carl's opponents had a higher rating (which was only in 3 games) they averages 68 points higher. When Carl was the higher-rated player, Carl was, on average, 355 points above their opponent.","9138d3db":"At this point I think we can be fairly confident that being the white pieces in chess gives you *some* statistical advantage. After all, white pieces go first, and essentially control the flow of the game until a grave mistake is made. If no mistakes are made, then everything black does is just in response to whatever white does.\n\nBut certainly, rating also comes into play right? The lower your rating is, the more likely you are to make one of these mistakes (and that's completely fine).\n\nWe should try grouping the games by rating to see what kind of effect it will have on the outcomes of the games.","2d62ec0f":"## Adding columns, separating data by opening\n\nIn the next cell, I am going to add a few columns to the dataFrame that will be helpful in the analysis of the data. For example, the moves are given in one long string, which could prove to be hard to access if we are searching for a move number in particular. To make it easier for us, we can turn this string into a list.\n\nSince we are also interested in how rating affects the outcome of the games, we might want a column telling us the rating difference between the players, and another column telling us whether or not the higher-rated player won. Other columns have been added as needed.\n\nAdditionally, I've created four new DataFrames based on four common opening moves by white. The frequency with which these opening moves are used are visualized in a pie chart below the next cell.","8c952d64":"## Does having white offer a particular advantage based on rating?","767104fc":"I want some sort of visual evidence to indicate whether or not white is completely dominant over black or not. I've grouped these by four common openings to see whether or not openings might have an affect on the outcome of the game.","90b206b7":"So it looks like chesscarl was the higher-rated player in 43 out of the 46 games they played. This might account for their extraordinary amount of wins. As one last check, let's see what the average rating gap between the two players were in both the games carl was higher-rated and lower-rated.","df102465":"Since there are many different accounts chesscarl played against, it's unlikely the third option is true, so we can rule that out. Let's take a look at a few more things.","d1b41c7b":"Okay, **now** we might have found some cheaters. We can report these guys to Lichess or further analyze their data to see wat they're up to. The list of possible cheaters is not limited to just the names shown, to be clear. I just displayed the top 10 users who played 24 games or more.","086bad10":"Okay, cool. Since we want to see what sort of affect being the white or black pieces can have on your chances of winning, let's take a look at that data for each of the four common openings.\n\n## Is there a color advantage by opening?","f12dbfa1":"Well, if anything, it's fun to mess with the 'num' variable. For example, if you set it to 1100, the black pieces actually have a higher winning rate than the white pieces.\n\n# How does rating gap affect who wins?\nI think the answer to this question should be fairly simple. Our intuition might tell us that the higher-rated person would win a majority of the time. The more the rating gap between two players is, the higher the chance the higher-rated player will win. I can see this type of data being used in many ways, however. For instance, if a lower-rated player has many wins against someone with a significantly higher than them, it could be a red flag that they're using an engine to cheat. other variables would need to be looked at though. Are those games rated? Were the wins against the same person? If the answers are no then yes, in all likelihood a lower-rated player could just be practicing against a higher-rted friend. If yes then no, maybe the person is cheating. If yes then yes, perhaps someone is intentionally giving up points to someone else.\n\nThere are many possibilities.","ae226d19":"We now have a *possible* list of cheaters listed up above. However, the names displayed really didn't play that many games, so there is a good chance these users played fair and square.\n\nLet's try to filter the number of games played by the users to see if we can spot any possible cheaters.\n","1ebb67f0":"A quick glance at the DataFrame tells us that all the games chesscarl has played were rated games, meaning ELO points were on the line. This tells me that there are three possibilities:\n- chesscarl is cheating\n- chesscarl created a smurf account, and is quickly climbing the ratings\n- chesscarl is grabbing ELO points from a friend\n\nWe can take a look at the opponents chesscarl played to try to rule out the third option:","b51d28b2":"# Black's Response Victory Rate by Opening\n\nBelow I've plotted barplots coresponding to the winning rate of the white pieces when black makes the move indicated by the x-axis.\n\nI've included all of the response moves in the dataset, so some of the lesser-used (and frankly, terrible) moves by black are seen in the plots. Since these are used so little, the error bars are gigantic. The further you get to the right on each plot, the rarer the move, and the bigger the error bar.\n\nAgain, I've done these plots for four comon first moves by the white pieces.","36329dbd":"## How often does the higher-rated player win?","28d1e19f":"As expected, the higher the rating gap, the higher the probability that the person with the higher rating wins.\n\n# Anybody with a particularly high amount of wins? What about win rate?","6c99e3b2":"Looking at the barplot, we can see that white has a slight advantage in just about every opening, as we saw in the pie charts as well.","e8385393":"Before we begin analysis, let's see what kind of data we're dealing with here. We might have to add some columns to help with analysis, or clean the data a bit."}}