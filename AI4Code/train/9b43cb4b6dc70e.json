{"cell_type":{"4aa81157":"code","d9599c05":"code","19452486":"code","77bde940":"code","af78afad":"code","d7347eb6":"code","dac2d5ec":"code","ec12b6c1":"code","1f771efd":"code","647e0da1":"code","68dc9ee2":"code","8772d6fd":"code","27316588":"code","ae88565d":"code","bd49f9c1":"code","baa4ac60":"code","a9b9396e":"code","e30fea02":"code","4c7b306c":"code","78e276af":"code","834b2975":"code","6812282f":"code","efcbd9dd":"code","5ba74238":"code","f9b4a68c":"code","4dc92bd6":"code","1b46d530":"code","cd74f604":"code","1f92561d":"code","8ebb2da9":"code","4d7b881a":"code","3fcf637a":"code","e72b55c6":"code","5337961b":"code","357a07eb":"markdown","53d028d1":"markdown","27298ea7":"markdown","a2251c5a":"markdown","e9b1e7ad":"markdown","210d85c4":"markdown","5aef36a5":"markdown","8850ca9e":"markdown","3bb6e029":"markdown","fa987423":"markdown","b4398220":"markdown","f1078412":"markdown","feb61ec2":"markdown","bc48d9cb":"markdown","88c1d38b":"markdown","7a70bf24":"markdown","9aa03d3c":"markdown","8b7a8297":"markdown","23b37880":"markdown","347877fb":"markdown","a9d42ae0":"markdown","ba6f547f":"markdown","a119fe1b":"markdown","abc7fd36":"markdown","3332f9e2":"markdown","a976d610":"markdown","1856673e":"markdown","c8a99d14":"markdown","0ebd2e43":"markdown","fba07d2d":"markdown","97ac3940":"markdown","a04e7fc4":"markdown","42e1cdfe":"markdown","37b3bcdd":"markdown","cd1f04f4":"markdown","e1b58dcf":"markdown","3a8b6d54":"markdown","e1fd5d9f":"markdown"},"source":{"4aa81157":"%%bash\npip install transformers","d9599c05":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pathlib import Path \nfrom collections import defaultdict\n\nimport os\n\nimport torch\nimport torch.optim as optim\n\nimport random \n\n# fastai\nfrom fastai import *\nfrom fastai.text import *\nfrom fastai.callbacks import *\n\n# transformers\nfrom transformers import PreTrainedModel, PreTrainedTokenizer, PretrainedConfig\nfrom transformers import DistilBertForSequenceClassification, DistilBertTokenizer, DistilBertConfig","19452486":"import fastai\nimport transformers\nprint('fastai version :', fastai.__version__)\nprint('transformers version :', transformers.__version__)","77bde940":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","af78afad":"irony_data = pd.read_csv('\/kaggle\/input\/ironic-corpus\/irony-labeled.csv')\nirony_data.head()\nprint(irony_data.shape)\nirony_data.head()","d7347eb6":"irony_data.label.value_counts()","dac2d5ec":"seed = 42\nuse_fp16 = False\nbs = 16\n\nmodel_type = 'distilbert'\npretrained_model_name = 'distilbert-base-uncased'\n\nMODEL_CLASSES = {\n    'distilbert': (DistilBertForSequenceClassification, DistilBertTokenizer, DistilBertConfig)\n}\n\nmodel_class, tokenizer_class, config_class = MODEL_CLASSES[model_type]","ec12b6c1":"model_class.pretrained_model_archive_map.keys()","1f771efd":"def seed_all(seed_value):\n    random.seed(seed_value) # Python\n    np.random.seed(seed_value) # cpu vars\n    torch.manual_seed(seed_value) # cpu  vars\n    \n    if torch.cuda.is_available(): \n        torch.cuda.manual_seed(seed_value)\n        torch.cuda.manual_seed_all(seed_value) # gpu vars\n        torch.backends.cudnn.deterministic = True  #needed\n        torch.backends.cudnn.benchmark = False","647e0da1":"seed_all(seed)","68dc9ee2":"class TransformersBaseTokenizer(BaseTokenizer):\n    \"\"\"Wrapper around PreTrainedTokenizer to be compatible with fast.ai\"\"\"\n    def __init__(self, pretrained_tokenizer: PreTrainedTokenizer, model_type = 'bert', **kwargs):\n        self._pretrained_tokenizer = pretrained_tokenizer\n        self.max_seq_len = pretrained_tokenizer.max_len\n        self.model_type = model_type\n\n    def __call__(self, *args, **kwargs): \n        return self\n\n    def tokenizer(self, t:str) -> List[str]:\n        \"\"\"Limits the maximum sequence length and add the spesial tokens\"\"\"\n        CLS = self._pretrained_tokenizer.cls_token\n        SEP = self._pretrained_tokenizer.sep_token\n        if self.model_type in ['roberta']:\n            tokens = self._pretrained_tokenizer.tokenize(t, add_prefix_space=True)[:self.max_seq_len - 2]\n        else:\n            tokens = self._pretrained_tokenizer.tokenize(t)[:self.max_seq_len - 2]\n        return [CLS] + tokens + [SEP]","8772d6fd":"transformer_tokenizer = tokenizer_class.from_pretrained(pretrained_model_name)\ntransformer_base_tokenizer = TransformersBaseTokenizer(pretrained_tokenizer = transformer_tokenizer, model_type = model_type)\nfastai_tokenizer = Tokenizer(tok_func = transformer_base_tokenizer, pre_rules=[], post_rules=[])","27316588":"tokenizer_class.pretrained_vocab_files_map","ae88565d":"class TransformersVocab(Vocab):\n    def __init__(self, tokenizer: PreTrainedTokenizer):\n        super(TransformersVocab, self).__init__(itos = [])\n        self.tokenizer = tokenizer\n    \n    def numericalize(self, t:Collection[str]) -> List[int]:\n        \"Convert a list of tokens `t` to their ids.\"\n        return self.tokenizer.convert_tokens_to_ids(t)\n        #return self.tokenizer.encode(t)\n\n    def textify(self, nums:Collection[int], sep=' ') -> List[str]:\n        \"Convert a list of `nums` to their tokens.\"\n        nums = np.array(nums).tolist()\n        return sep.join(self.tokenizer.convert_ids_to_tokens(nums)) if sep is not None else self.tokenizer.convert_ids_to_tokens(nums)","bd49f9c1":"transformer_vocab =  TransformersVocab(tokenizer = transformer_tokenizer)\nnumericalize_processor = NumericalizeProcessor(vocab=transformer_vocab)\n\ntokenize_processor = TokenizeProcessor(tokenizer=fastai_tokenizer, include_bos=False, include_eos=False)\n\ntransformer_processor = [tokenize_processor, numericalize_processor]","baa4ac60":"pad_first = bool(model_type in ['xlnet'])\npad_idx = transformer_tokenizer.pad_token_id","a9b9396e":"from sklearn.model_selection import KFold\n\nX = irony_data['comment_text']\ny = irony_data['label']\nkf = KFold(n_splits=5)\nkf.get_n_splits(X) # returns the number of splitting iterations in the cross-validator","e30fea02":"trains = list()\ntests = list()\nfor train_index, test_index in kf.split(X):\n    trains.append(train_index)\n    tests.append(test_index)","4c7b306c":"def create_validation(valnum):\n\n    train = {'comment_text': X[trains[valnum]], 'label': y[trains[valnum]],'is_valid':False}\n    dftrain = pd.DataFrame(data=train)\n    \n    valid = {'comment_text': X[tests[valnum]], 'label': y[tests[valnum]],'is_valid':True}\n    dfvalid = pd.DataFrame(data=valid)\n    \n    alldata = dftrain.append(dfvalid)\n    \n    return alldata","78e276af":"fold1 = create_validation(0)\nfold2 = create_validation(1)\nfold3 = create_validation(2)\nfold4 = create_validation(3)\nfold5 = create_validation(4)","834b2975":"bs = 10\ndatabunch = (TextList.from_df(fold2, cols='comment_text', processor=transformer_processor)\n             .split_from_df(col='is_valid')\n             .label_from_df(cols= 'label')\n             .databunch(bs=bs, pad_first=pad_first, pad_idx=pad_idx))","6812282f":"print('[CLS] token :', transformer_tokenizer.cls_token)\nprint('[SEP] token :', transformer_tokenizer.sep_token)\nprint('[PAD] token :', transformer_tokenizer.pad_token)\ndatabunch.show_batch()","efcbd9dd":"print('[CLS] id :', transformer_tokenizer.cls_token_id)\nprint('[SEP] id :', transformer_tokenizer.sep_token_id)\nprint('[PAD] id :', pad_idx)\ntest_one_batch = databunch.one_batch()[0]\nprint('Batch shape : ',test_one_batch.shape)\nprint(test_one_batch)","5ba74238":"# defining our model architecture \nclass CustomTransformerModel(nn.Module):\n    def __init__(self, transformer_model: PreTrainedModel):\n        super(CustomTransformerModel,self).__init__()\n        self.transformer = transformer_model\n        \n    def forward(self, input_ids, attention_mask=None):\n        \n        #attention_mask = (input_ids!=1).type(input_ids.type()) # Test attention_mask for RoBERTa\n        \n        logits = self.transformer(input_ids,\n                                attention_mask = attention_mask)[0]   \n        return logits","f9b4a68c":"config = config_class.from_pretrained(pretrained_model_name)\nconfig.num_labels = 2\nconfig.use_bfloat16 = use_fp16\nprint(config)","4dc92bd6":"transformer_model = model_class.from_pretrained(pretrained_model_name, config = config)\n# transformer_model = model_class.from_pretrained(pretrained_model_name, num_labels = 5)\n\ncustom_transformer_model = CustomTransformerModel(transformer_model = transformer_model)","1b46d530":"weights = [1., 3.]\nclass_weights=torch.FloatTensor(weights).cuda()","cd74f604":"from fastai.callbacks import *\nfrom transformers import AdamW\n\nlearner = Learner(databunch, \n                  custom_transformer_model, \n                  loss_func = nn.CrossEntropyLoss(weight=class_weights),\n                  opt_func = lambda input: AdamW(input,correct_bias=False), \n                  metrics=[Precision(),Recall(),FBeta(beta=1)])\n\n# Show graph of learner stats and metrics after each epoch.\nlearner.callbacks.append(ShowGraph(learner))\n\n# Put learn in FP16 precision mode. --> Seems to not working\nif use_fp16: learner = learner.to_fp16()\nlearner.save('untrained')\n","1f92561d":"# constants across test\nepochs = 2\nn_reps = 2\n\nfolds = [fold1, fold2, fold3, fold4, fold5]\nlearning_rates = 1e-6\nmoms = (0.825,0.725)\n\nmetrics = np.zeros([len(folds),n_reps,3]) ","8ebb2da9":"for reps in range(n_reps):\n    \n    for fold in range(0,len(folds)):\n        \n        # create a databunch with the current fold\n        databunch = (TextList.from_df(folds[fold], cols='comment_text', processor=transformer_processor)\n            .split_from_df(col='is_valid')\n            .label_from_df(cols= 'label')\n            .databunch(bs=bs, pad_first=pad_first, pad_idx=pad_idx))\n        learner = Learner(databunch, \n            custom_transformer_model, \n            loss_func = nn.CrossEntropyLoss(weight=class_weights),\n            opt_func = lambda input: AdamW(input,correct_bias=False), \n            metrics=[Precision(),Recall(),FBeta(beta=1)])\n        if use_fp16: learner = learner.to_fp16()\n    \n        # start with empty weights\n        learner.load('untrained')\n        learner.unfreeze()\n        #learner.freeze_to(unfreeze_layers)\n        # train on current parameters\n        learner.fit_one_cycle(epochs, max_lr=learning_rates, moms=moms)\n        metrics[fold,reps:] = learner.recorder.metrics[-1]","4d7b881a":"metrics.shape","3fcf637a":"avg_per_fold = np.mean(metrics,axis=1);avg_per_fold","e72b55c6":"def format_scores(avg_metrics):\n    def print_line(name,arr):\n        print(name,':',format(np.mean(arr), '.3f'), '(range ', np.min(arr), ' - ',np.max(arr))\n    \n    print_line('F1 score',avg_metrics[:,2])\n    print_line('recall',avg_metrics[:,1])\n    print_line('precision',avg_metrics[:,0])\n    ","5337961b":"format_scores(avg_per_fold)","357a07eb":"# Interpreting the results","53d028d1":"This loop creates a new databunch and new learner for each fold in the cross validation. The last metrics from each training cycle are retained. ","27298ea7":"Although I've chosen to use the 'distilbert-base-uncased' model, there are a few distilbert moddels to choose from. ","a2251c5a":"### Learner\u00a0: Custom Optimizer \/ Custom\u00a0Metric\nIn ``pytorch-transformers``, HuggingFace had implemented two specific optimizers \u200a-\u200a BertAdam and OpenAIAdam \u200a-\u200a that have been replaced by a single AdamW optimizer.\nThis optimizer matches Pytorch Adam optimizer Api, therefore, it becomes straightforward to integrate it within ``fastai``.\nIt is worth noting that for reproducing BertAdam specific behavior, you have to set ``correct_bias = False``.\n\nHere, because the dataset is imbalanced, we want to use weighted cross entropy. An empty model is created and then saved. Because we are going to use cross validation, we need to be able to return to a clean beginning. If not, we might end up having some items cross over between the training and validation sets, thus inflating our metrics. ","e9b1e7ad":"Function to set the seed for generating random numbers.","210d85c4":"Scores presented in the paper:\n- average [F1 score](https:\/\/en.wikipedia.org\/wiki\/F1_score): 0.383 (range 0.330 - 0.412)\n- average [recall](https:\/\/en.wikipedia.org\/wiki\/Precision_and_recall): 0.496 (range 0.446 - 0.548)\n- average [precision](https:\/\/en.wikipedia.org\/wiki\/Precision_and_recall): 0.315 (range 0.261 - 0.380)","5aef36a5":"To match pre-training, we have to format the model input sequence in a specific format.\nTo do so, you have to first **tokenize** and then **numericalize** the texts correctly.\nThe difficulty here is that each pre-trained model, that we will fine-tune, requires exactly the same specific pre-process\u200a-\u200a**tokenization** & **numericalization**\u200a-\u200athan the pre-process used during the pre-train part.\nFortunately, the **tokenizer class** from ``transformers`` provides the correct pre-process tools that correspond to each pre-trained model.\n\nIn the ``fastai`` library, data pre-processing is done automatically during the creation of the ``DataBunch``. \nAs you will see in the ``DataBunch`` implementation, the **tokenizer** and **numericalizer** are passed in the processor argument under the following format :\n\n``processor = [TokenizeProcessor(tokenizer=tokenizer,...), NumericalizeProcessor(vocab=vocab,...)]``\n\nLet's first analyse how we can integrate the ``transformers`` **tokenizer** within the ``TokenizeProcessor`` function.","8850ca9e":"## Transformers: another type of transfer learning","3bb6e029":"The current versions of the fastai and transformers libraries are respectively 1.0.58 and 2.1.1.","fa987423":"As mentioned [here](https:\/\/github.com\/huggingface\/transformers#models-always-output-tuples), every model's forward method always outputs a ``tuple`` with various elements depending on the model and the configuration parameters. In our case, we are interested to access only to the logits.\u00a0[Note here](https:\/\/huggingface.co\/transformers\/_modules\/transformers\/modeling_distilbert.html#DistilBertForSequenceClassification) in the `outputs` of the DistilBERT classifier, the logits are output in the first position.\n\nHere we access them by creating a custom model.","b4398220":"Now that we have integrated the transformers compenents into the fastai architecture, we can begin to create the data structures we will need. Since the original paper used a 5 fold cross validation, we divide the data into 5 folds using `sklearn`.","f1078412":"Here, we separate each fold into the 'train' and 'test' (i.e., validation) sets. ","feb61ec2":"## Custom Tokenizer","bc48d9cb":"Fastai uses a structure called a `DataBunch` to hold everything related to the data: the processor, training and testing sets. Let's do a check to make sure it works correctly. ","88c1d38b":"# Loading the data","7a70bf24":"Load and check the Irony Corpus data","9aa03d3c":"Let's see how the results compare to the ones presented in the paper. ","8b7a8297":"Check batch and tokenizer :","23b37880":"Before starting the implementation, you will need to install the ``fastai`` and ``transformers`` libraries. To do so, just follow the instructions [here](https:\/\/github.com\/fastai\/fastai\/blob\/master\/README.md#installation) and [here](https:\/\/github.com\/huggingface\/transformers#installation).\n\nIn Kaggle, the ``fastai`` library is already installed. So you just have to instal ``transformers`` with :","347877fb":"# Training the model","a9d42ae0":"## Custom Numericalizer","ba6f547f":"Each fold is then condensed into one dataframe with the validationset labelled in the `is_valid` column.","a119fe1b":"# Ironic Sentences - with DistilBERT","abc7fd36":"In ``transformers``, each model architecture is associated with 3 main types of classes:\n* A **model class** to load\/store a particular pre-train model.\n* A **tokenizer class** to pre-process the data and make it compatible with a particular model.\n* A **configuration class** to load\/store the configuration of a particular model.\n\nFor example, if you want to use the Bert architecture for text classification, you would use [``BertForSequenceClassification``](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html#bertforsequenceclassification) for the **model class**, [``BertTokenizer``](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html#berttokenizer) for the **tokenizer class** and [``BertConfig``](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html#bertconfig) for the **configuration class**.\u00a0\n\nFirst, we set some parameters, and create a utility function for random numbers.","3332f9e2":"To make our transformers adapted to multiclass classification, before loading the pre-trained model, we need to precise the number of labels. To do so, you can modify the config instance or either modify like in [Keita Kurita's article](https:\/\/mlexplained.com\/2019\/05\/13\/a-tutorial-to-fine-tuning-bert-with-fast-ai\/) (Section: *Initializing the Learner*) the ``num_labels`` argument.\n\nHere, we have two labels: 'ironic' and 'not ironic'","a976d610":"For the DataBunch creation, you have to pay attention to set the processor argument to our new custom processor ``transformer_processor`` and manage correctly the padding.\n\nAs mentioned in the HuggingFace documentation, DistilBERT models use absolute position embeddings, so it's usually advised to pad the inputs on the right rather than the left. Regarding XLNET, it is a model with relative position embeddings, therefore, you can either pad the inputs on the right or on the left.","1856673e":"In ``fastai``, [``NumericalizeProcessor``  object](https:\/\/docs.fast.ai\/text.data.html#NumericalizeProcessor) takes as ``vocab`` argument a [``Vocab`` object](https:\/\/docs.fast.ai\/text.transform.html#Vocab). \nHere, we create a new class ``TransformersVocab`` that inherits from ``Vocab`` and uses the functions ``convert_tokens_to_ids`` and ``convert_ids_to_tokens`` respectively to overwrite the ``numericalize`` and ``textify`` functions. ","c8a99d14":"# Integrating transformers and fastai for data processing","0ebd2e43":"# Creating a custom model","fba07d2d":"This kernel is taken from [this tutorial kernel](https:\/\/www.kaggle.com\/maroberti\/fastai-with-transformers-bert-roberta) ADD URL, which is a suplement of the Medium article [\"Fastai with \ud83e\udd17Transformers (BERT, RoBERTa, XLNet, XLM, DistilBERT)\"](https:\/\/medium.com\/p\/fastai-with-transformers-bert-roberta-xlnet-xlm-distilbert-4f41ee18ecb2?source=email-29c8f5cf1dc4--writer.postDistributed&sk=119c3e5d748b2827af3ea863faae6376). Make sure to upvote the original tutorial, too, if you found this helpful.","97ac3940":"Check batch and numericalizer :","a04e7fc4":"This kernel uses pretrained transformers to perform a classification tasks. In another kernel, I use the [ULMFiT tecchnique]().\n\nSince the introduction of ULMFiT, **Transfer Learning** became very popular in NLP and yet Google (BERT, Transformer-XL, XLNet), Facebook (RoBERTa, XLM) or even OpenAI (GPT, GPT-2) begin to pre-train their own model on very large corpora. This time, instead of using the AWD-LSTM neural network, they all used a more powerful architecture based on the Transformer (cf. [Attention is all you need](https:\/\/arxiv.org\/abs\/1706.03762)).\n\nAlthough these models are powerful, ``fastai`` do not integrate all of them. Fortunately, [HuggingFace](https:\/\/huggingface.co\/) \ud83e\udd17 created the well know [transformers library](https:\/\/github.com\/huggingface\/transformers). Formerly knew as ``pytorch-transformers`` or ``pytorch-pretrained-bert``, this library brings together over 40 state-of-the-art pre-trained NLP models (BERT, GPT-2, RoBERTa, CTRL\u2026). The implementation gives interesting additional utilities like tokenizer, optimizer or scheduler.\n\nThe ``transformers`` library can be self-sufficient but incorporating it within the ``fastai`` library provides simpler implementation compatible with powerful fastai tools like  **Discriminate Learning Rate**, **Gradual Unfreezing** or **Slanted Triangular Learning Rates**. The point here is to allow non-NLP-experts to get easily state-of-the-art results and therefore \"make NLP uncool again\".\n\nBefore beginning the implementation, note that integrating ``transformers`` within ``fastai`` can be done in multiple different ways. The tutorial author decided to implement generic and flexible solutions. Specifically, he made the minimum amount of modifications in both libraries while making them compatible with the maximum amount of transformer architectures. Go check out the [original tutorial](https:\/\/www.kaggle.com\/maroberti\/fastai-with-transformers-bert-roberta) to see other transfomer architectures. \n\nThis notebook contains the following sections:\n1. Loading the data\n1. Integrating transformers and fastai for data processing\n    - Custom Tokenizer\n    - Custom Numericalizer\n    - Custom Processor\n1. Preparing cross validations and testing the DataBunch\n1. Creating a custom model\n\n","42e1cdfe":"## References\n* Hugging Face, Transformers GitHub (Nov 2019), [https:\/\/github.com\/huggingface\/transformers](https:\/\/github.com\/huggingface\/transformers)\n* Fast.ai, Fastai documentation (Nov 2019), [https:\/\/docs.fast.ai\/text.html](https:\/\/docs.fast.ai\/text.html)\n* Jeremy Howard & Sebastian Ruder, Universal Language Model Fine-tuning for Text Classification (May 2018), [https:\/\/arxiv.org\/abs\/1801.06146](https:\/\/arxiv.org\/abs\/1801.06146)\n* Keita Kurita's article\u00a0: [A Tutorial to Fine-Tuning BERT with Fast AI](https:\/\/mlexplained.com\/2019\/05\/13\/a-tutorial-to-fine-tuning-bert-with-fast-ai\/)\u00a0(May 2019)\n* Dev Sharma's article\u00a0: [Using RoBERTa with Fastai for NLP](https:\/\/medium.com\/analytics-vidhya\/using-roberta-with-fastai-for-nlp-7ed3fed21f6c) (Sep 2019)","37b3bcdd":"Although we can use fastai build-in features like **Slanted Triangular Learning Rates**, **Discriminate Learning Rate** and **gradually unfreezing the model**, it is unclear if this will help in training. Here, we unfreeze the whole model for training. Since there is some randomness involved, we will run the model multiple times and average the output.","cd1f04f4":"Overall, the tranformers perform comaribly to the SVM. What I notice on the transformers is that occasionally they perform very badly at first. The minimum values can be very low on some folds, thus bringing the average down. ","e1b58dcf":"This part can be a little bit confusing because a lot of classes are wrapped in each other and with similar names.\nTo resume, if we look attentively at the ``fastai`` implementation, we notice that\u00a0:\n1. The [``TokenizeProcessor`` object](https:\/\/docs.fast.ai\/text.data.html#TokenizeProcessor) takes as ``tokenizer`` argument a ``Tokenizer`` object.\n2. The [``Tokenizer`` object](https:\/\/docs.fast.ai\/text.transform.html#Tokenizer) takes as ``tok_func`` argument a ``BaseTokenizer`` object.\n3. The [``BaseTokenizer`` object](https:\/\/docs.fast.ai\/text.transform.html#BaseTokenizer) implement the function ``tokenizer(t:str) \u2192 List[str]`` that take a text ``t`` and returns the list of its tokens.\n\nTherefore, we can simply create a new class ``TransformersBaseTokenizer`` that inherits from ``BaseTokenizer`` and overwrite a new ``tokenizer`` function.","3a8b6d54":"#### Custom processor\nNow that we have our custom **tokenizer** and **numericalizer**, we can create the custom **processor**. Notice we are passing the ``include_bos = False`` and ``include_eos = False`` options. This is because ``fastai`` adds its own special tokens by default which interferes with the ``[CLS]`` and ``[SEP]`` tokens added by our custom tokenizer.","e1fd5d9f":"# Preparing cross validations and testing the DataBunch"}}