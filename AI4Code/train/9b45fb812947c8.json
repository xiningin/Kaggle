{"cell_type":{"545d3eae":"code","223d7576":"code","696dc8c9":"code","bf8a0ac2":"code","6abf5830":"code","2223da32":"code","d9a8360e":"code","bb76983a":"code","9432a594":"code","d816bb6e":"code","48e1fff6":"code","7b13259e":"code","cc6e0d09":"code","d1dc2b23":"code","b2240fc3":"code","9d281d03":"code","6705c27a":"code","3379f39b":"code","3375863d":"code","644e3324":"code","720ea7ef":"code","4583113e":"code","b05e1930":"code","6098b2ec":"code","b0199e99":"code","3dc69e8d":"code","b6a384e7":"code","4d84729a":"code","dd0bcb40":"code","7d4b942f":"code","451ba771":"code","89e9625f":"code","536b9e6d":"code","489d1c0a":"code","41849f94":"code","f068cd0b":"code","2ec9c3ad":"code","9480118f":"code","ca793698":"code","c8c0db55":"code","7961d5aa":"code","f58ef35c":"code","32823b58":"code","a21cc197":"code","6112a5e4":"code","2d89c573":"code","31eefd44":"code","1f9b0edb":"markdown","e3c9caa0":"markdown","2e6fa3db":"markdown","9bd8939e":"markdown","a5cadfe2":"markdown","d169823d":"markdown","fa822253":"markdown","a7f8503b":"markdown","1406f5af":"markdown","09e44a73":"markdown","40ec999d":"markdown","c7a0a125":"markdown","ec3b3d17":"markdown"},"source":{"545d3eae":"#importing necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport nltk\n","223d7576":"#importing data to pandas dataframe \n#importing the updated dataset GP Orders - 5.csv  \ndf = pd.read_csv('\/kaggle\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 5.csv')\n","696dc8c9":"#Inspecting the datasets\ndf.head(10)","bf8a0ac2":"df.columns","6abf5830":"# Rename columns\ncol_names = {'Order Number' : 'OrderNumber' , 'Order Status' : 'OrderStatus', 'Book Name' : 'BookName',\n           'Order Date & Time' : 'OrderDate', 'City' : 'City', 'Payment Method' : 'PaymentMethod', 'Total items' : 'TotalItems', 'Total weight (grams)' : 'TotalWeight'}\ndf.rename(col_names, axis = 1, inplace = True)","2223da32":"df.columns","d9a8360e":"print(f'Shape of the dataset {df.shape}')","bb76983a":"#inspecting the dataset\nprint(df.info())\nprint(df.describe())","9432a594":"#Checking the Null values\ndf.isnull().sum()","d816bb6e":"#As there aren't so much null values, dropping them won't affect the analysis\ndf.dropna(inplace = True)","48e1fff6":"df.isnull().sum()","7b13259e":"print(df['BookName'].head(10))","cc6e0d09":"print(f'There are {len(df[\"City\"].unique())} unique city names in the dataset \\\nand {len(df[\"BookName\"].unique())} unique book names.')","d1dc2b23":"df['BookName'].value_counts().head(10)","b2240fc3":"df['BookName'].value_counts().tail(10)","9d281d03":"#Separating multiple book names into separate columns\ndf[\"BookName\"] = df[\"BookName\"].str.split(\"\/\").str[0]\ndf[\"BookName\"].tail(10)","6705c27a":"#Convert entries into lower case\ndf['BookName'] = df['BookName'].str.lower()","3379f39b":"#Remove any special character in the \"Book Name\" column\nchars = [\"!\",'\"',\"#\",\"%\",\"&\",\"'\",\"(\",\")\",\"*\",\"+\",\",\",\".\",\"\/\",\":\",\";\",\"<\",\n        \"=\",\">\",\"?\",\"@\",\"[\",\"\\\\\",\"]\",\"^\",\"_\",\"`\",\"{\",\"|\",\"}\",\"~\",\"\u2013\"]\nfor char in chars:\n    df['BookName'] = df['BookName'].str.replace(char, ' ')","3375863d":"df['BookName'].value_counts().head(20)","644e3324":"#Some books names need to be changed such as \"python programming\" and\n#\"python programming- release date  august 14  2020 \"\n\ndf[\"BookName\"] = df[\"BookName\"].str.replace(\"python programming- release date: august 14, 2020\" , \"python programming\")\ndf[\"BookName\"] = df[\"BookName\"].str.replace(\"\u0627\u0646\u0679\u0631\u0646\u06cc\u0679 \u0633\u06d2 \u067e\u06cc\u0633\u06c1 \u06a9\u0645\u0627\u0626\u06cc\u06ba\u061f- \u0645\u0633\u062a\u062d\u0642\u06cc\u0646 \u0632\u06a9\u0648\u0627\u0629\" , \"\")\ndf[\"BookName\"] = df[\"BookName\"].str.replace(\"molo masali - \u0645\u0648\u0644\u0648 \u0645\u0635\u0644\u06cc\" , \"molo masali\" )\ndf[\"BookName\"] = df[\"BookName\"].str.replace(\"r ka taaruf  \u0622\u0631 \u06a9\u0627 \u062a\u0639\u0627\u0631\u0641\" , \"r ka taaruf\")\ndf[\"BookName\"] = df[\"BookName\"].str.replace(\"linux - an introduction release data - october 3, 2020\" , \"linux - an introduction\")","720ea7ef":"df['BookName'].value_counts().head(10)","4583113e":"print(f'There are {len(df[\"City\"].unique())} unique city names in the dataset \\\nand {len(df[\"BookName\"].unique())} unique book names.')","b05e1930":"#Now check for cities, there are 4163 unique city names and required cleaning\ndf.City.sample(20)","6098b2ec":"#Lowering the case and replacing the special characters\nfor char in chars:\n    df['City'] = df['City'].str.lower().str.replace(char, ' ')","b0199e99":"df[\"City\"].value_counts().head(10)","3dc69e8d":"df.City.value_counts().head(10)","b6a384e7":"#The ispection shows there are so many distinct values in the city column\ncities = ['islamabad', 'ahmed nager chatha', 'ahmadpur east', 'ali khan abad', 'alipur', 'arifwala', 'attock', 'bhera',\n              'bhalwal', 'bahawalnagar','bahawalpur', 'bhakkar', 'burewala', 'chillianwala', 'chakwal', 'chichawatni',\n              'chiniot', 'chishtian','daska', 'darya khan', 'dera ghazi khan', 'dhaular', 'dina', 'dinga', 'dipalpur', 'faisalabad', 'ferozewala',\n              'fateh jhang','ghakhar mandi', 'gojra', 'gujranwala', 'gujrat', 'gujar khan', 'hafizabad', 'haroonabad', 'hasilpur',\n              'haveli lakha', 'jatoi',\n              'jalalpur', 'jattan', 'jampur', 'jaranwala', 'jhang', 'jhelum', 'kalabagh', 'karor lal esan', 'kasur', 'kamalia', 'kamoke',\n              'khanewal',\n              'khanpur', 'kharian', 'khushab', 'kot addu', 'jauharabad', 'lahore', 'lalamusa', 'layyah', 'liaquat pur',\n              'lodhran', 'malakwal', 'mamoori', 'mailsi', 'mandi bahauddin', 'mian channu', 'mianwali', 'multan', 'murree', \n              'muridke', 'mianwali bangla', 'muzaffargarh', 'narowal', 'nankana sahib', 'okara', 'renala khurd', 'pakpattan', \n              'pattoki', 'pir mahal', 'qaimpur', 'qila didar singh', 'rabwah', 'raiwind', 'rajanpur', 'rahim yar khan',\n              'rawalpindi',\n              'sadiqabad', 'safdarabad', 'sahiwal', 'sangla hill', 'sarai alamgir', 'sargodha', 'shakargarh', 'sheikhupura',\n              'sialkot','sohawa', 'soianwala', 'siranwali', 'talagang', 'taxila', 'toba tek singh', 'vehari', 'wah cantonment', \n              'wazirabad',\n              'badin', 'bhirkan', 'rajo khanani', 'chak', 'dadu', 'digri', 'diplo', 'dokri', 'ghotki', 'haala', 'hyderabad',\n              'islamkot', 'jacobabad', 'jamshoro', 'jungshahi', 'kandhkot', 'kandiaro', 'karachi', 'kashmore', 'keti bandar',\n              'khairpur', 'kotri', 'larkana', 'matiari', 'mehar', 'mirpur khas', 'mithani', 'mithi', 'mehrabpur', 'moro',\n              'nagarparkar', 'naudero', 'naushahro feroze', 'naushara', 'nawabshah', 'nazimabad', 'qambar', 'qasimabad', \n              'ranipur', 'ratodero', 'rohri', 'sakrand', 'sanghar', 'shahbandar', 'shahdadkot', 'shahdadpur',\n              'shahpur chakar', 'shikarpaur', 'sukkur', 'tangwani', 'tando adam khan', 'tando allahyar',\n              'tando muhammad khan', 'thatta', 'umerkot', 'warah', 'abbottabad', 'adezai', 'alpuri', 'akora khattak',\n              'ayubia', 'banda daud shah', 'bannu', 'batkhela', 'battagram', 'birote', 'chakdara', 'charsadda', 'chitral',\n              'daggar', 'dargai', 'darya khan', 'dera ismail khan', 'doaba', 'dir', 'drosh', 'hangu', 'haripur', 'karak',\n              'kohat', 'kulachi', 'lakki marwat', 'latamber', 'madyan', 'mansehra', 'mardan', 'mastuj', 'mingora', 'nowshera','paharpur', 'pabbi', 'peshawar', 'saidu sharif', 'shorkot', 'shewa adda', 'swabi', 'swat', 'tangi', 'tank',\n              'thall', 'timergara', 'tordher', 'awaran', 'barkhan', 'chagai', 'dera bugti', 'gwadar', 'harnai', 'jafarabad',\n              'jhal magsi', 'kacchi', 'kalat', 'kech', 'kharan', 'khuzdar', 'killa abdullah', 'killa saifullah', 'kohlu',\n              'lasbela', 'lehri', 'loralai', 'mastung', 'musakhel', 'nasirabad', 'nushki', 'panjgur', 'pishin valley', \n              'quetta', 'sherani', 'sibi', 'sohbatpur', 'washuk', 'zhob', 'ziarat']\n\ndef city_unique(city):\n    for i in cities:\n        if i in str(city):\n            return i\n    return city","4d84729a":"df.City = df.City.apply(city_unique)","dd0bcb40":"df[\"City\"].nunique()","7d4b942f":"# Function courtesy @hammad40241\n\ndef clean_city(row):\n    address = row.City.split()\n    add = set()\n    for a in address:\n        a = a.strip()\n        if a:\n            add.add(a)\n    for city in cities:\n        if row.City.__contains__(city):\n            return city\n        \n    for a in add:\n        for c in cities:\n            if nltk.edit_distance(a, c) <= 15: # considering spelling mistakes upto 5 letters\n                return c\n    return row.City","451ba771":"df.City = df.apply(clean_city, axis =1)","89e9625f":"print(f'There are {len(df[\"City\"].unique())} unique city names in the dataset \\\nand {len(df[\"BookName\"].unique())} unique book names.')","536b9e6d":"df.OrderDate.dtype","489d1c0a":"#Converting the object datatype into Pandas Date Time\ndf.OrderDate = pd.to_datetime(df.OrderDate)\ndf.OrderDate.head()","41849f94":"df.info()","f068cd0b":"#Checking the order status\nprint(df.OrderStatus.unique())\nprint(df.OrderStatus.value_counts())","2ec9c3ad":"#Visualizing order status\nsns.set()\nplt.figure(figsize = (10,8))\nplt.hist(x = 'OrderStatus', data = df)\nplt.show()","9480118f":"status_19 = df[df.OrderDate.dt.year == 2019].OrderStatus\nstatus_20 = df[df.OrderDate.dt.year == 2020].OrderStatus\nstatus_21 = df[df.OrderDate.dt.year == 2021].OrderStatus\n\n_ = plt.figure(figsize = (16, 10))\n_ = plt.subplot(1,3,1)\n_ = plt.hist(status_19)\n_ = plt.title('Order Status 2019')\n_ = plt.xlabel('Order status')\n_ = plt.ylabel('Total no of orders')\n\n_ = plt.subplot(1,3,2)\n_ = plt.hist(status_20)\n_ = plt.title('Order Status 2020')\n_ = plt.xlabel('Order status')\n_ = plt.ylabel('Total no of orders')\n\n_ = plt.subplot(1,3,3)\n_ = plt.hist(status_21)\n_ = plt.title('Order Status 2021')\n_ = plt.xlabel('Order status')\n_ = plt.ylabel('Total no of orders')","ca793698":"#Top selling books\ntop_books = df.BookName.value_counts().nlargest(10).to_frame()\nprint(top_books)\nfig = px.bar(top_books, x = top_books.index, y = top_books.BookName, title = 'Top 10 Most Selling Books', \\\n             labels={'index':'Book Name', 'BookName':'Order Counts'}, color = 'BookName', text = 'BookName')\nfig.update_traces(texttemplate='%{text:.3}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","c8c0db55":"top_cities = df.City.value_counts().nlargest(20).to_frame()\nprint(top_cities)\nfig = px.bar(top_cities, x = top_cities.index, y = top_cities.City, title = 'Top 20 Cities with Most Orders', \\\n             labels={'index':'City', 'City':'Order Counts'}, color = 'City', text = 'City')\nfig.update_traces(texttemplate='%{text:.3}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","7961d5aa":"top_cities.plot(kind='pie',figsize=(12,12),autopct='%1.1f%%', subplots = True)","f58ef35c":"top_months = df.OrderDate.dt.month.value_counts().to_frame()\n#Changing the months int to months name\nimport calendar\nd=dict((enumerate(calendar.month_abbr)))\ntop_months = top_months.rename(index=d)\nprint(top_months)\nfig = px.bar(top_months, x = top_months.index, y = top_months.OrderDate, title = 'Top Months with Most Orders', \\\n             labels={'index':'Months', 'OrderDate':'Order Counts'}, color = 'OrderDate', text = 'OrderDate')\nfig.update_traces(texttemplate='%{text:.3}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","32823b58":"top_days = df.OrderDate.dt.day.value_counts().to_frame()\ntop_days.index = top_days.index.map(str)\n#Changing the months int to months name\nprint(top_days)\nfig = px.bar(top_days, x = top_days.index, y = top_days.OrderDate, title = 'Top Days with Most Orders', \\\n             labels={'index':'Day', 'OrderDate':'Order Counts'}, color = 'OrderDate', text = 'OrderDate')\nfig.update_traces(texttemplate='%{text:.3}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","a21cc197":"pay_method_order_count = df.groupby('OrderStatus')['PaymentMethod'].value_counts().to_frame()\nprint(pay_method_order_count)","6112a5e4":"df.PaymentMethod = df.PaymentMethod.replace({'Cash on Delivery (COD)': 'Cash on delivery'})\nfig = px.histogram(df, x = 'PaymentMethod', width = 600, height = 400, title = 'Frequency of Payment Method', color = 'PaymentMethod')\nfig.show()","2d89c573":"_ = plt.figure(figsize = (20, 8))\n_ = plt.subplot(1,4,1)\n_ = sns.countplot(x = 'OrderStatus', data = df[df.PaymentMethod == 'Cash on delivery'])\n_.set_title('Order Status for Cash on Delivery')\n_ = plt.subplot(1,4,2)\n_ = sns.countplot(x = 'OrderStatus', data = df[df.PaymentMethod == 'EasyPaisa'])\n_.set_title('Order Status for EasyPaisa')\n_ = plt.subplot(1,4,3)\n_ = sns.countplot(x = 'OrderStatus', data = df[df.PaymentMethod == 'JazzCash'])\n_.set_title('Order Status for JazzCash')\n_ = plt.subplot(1,4,4)\n_ = sns.countplot(x = 'OrderStatus', data = df[df.PaymentMethod == 'BankTransfer'])\n_.set_title('Order Status for BankTransfer')","31eefd44":"fig = px.line(df, x=\"OrderDate\", title='Date Wise Order Counts', labels={'index':'Order Counts', 'OrderDate':'Date'})\nfig.show()","1f9b0edb":"## Results\nFrom the above analysis of the data, the sales is started to increase from December, 2019 and a rapid growth in sales is observed at the end of April, 2020 (Might be the effect of digital marketing). Moreover, the data shows that maximum of Pakistanis prefer cash on delivery method during online purchase. Data also shows that best sale month is January, and best sale day is 9th of the month. Best sale city is Islamabad with 30% of overall sale and the best book is \u0627\u0646\u0679\u0631\u0646\u06cc\u0679 \u0633\u06d2 \u067e\u06cc\u0633\u06c1 \u06a9\u0645\u0627\u0626\u06cc\u06ba\n\n#### The notebook is still inProcess\n","e3c9caa0":"## GP - A Complete Overview\n\n### This notebook have the complete and detailed overview of the Dataset \n\n### There are following insights that we'll explore through this dataset\n1. What is the best-selling book?\n2. Visualize order status frequency\n3. Find a correlation between date and time with order status\n4. Find a correlation between city and order status\n5. Find any hidden patterns that are counter-intuitive for a layman\n6. Can we predict number of orders, or book names in advance?","2e6fa3db":"#### As seen in the above plots, the Cash on Delivery Method remain successful among all other methods ","9bd8939e":"### Month wise order frequency","a5cadfe2":"### Payment method wise order count","d169823d":"### According to the sales data, there is the big difference in sales from the start date","fa822253":"#### The data is cleaned now, let's explore further columns","a7f8503b":"### Order Status Payment Method wise","1406f5af":"### Year wise ordr status","09e44a73":"### If you like this notebook, please upvote and if you want to discuss or want to suggest improvements, please comment. Thanks ","40ec999d":"### Top 20 cities with most sale\n","c7a0a125":"### Day wise order frequency","ec3b3d17":"### The unique city names have been reduced from 4163 to only 1869\n*However there are many city names with mispelled characters along with complete address, that need to be cleaned* "}}