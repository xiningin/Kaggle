{"cell_type":{"1f24dbec":"code","187cfcf7":"code","30318946":"code","f7a0b2b1":"code","86bd5f48":"code","f8016e92":"code","077797e0":"code","c6acc59b":"code","e819cc8c":"code","cd2b7a55":"code","581b3336":"code","5990d445":"code","09a9b7f6":"code","05b95af6":"code","074cf025":"code","0c3f2b30":"code","27ad0176":"code","9d42b214":"code","9f44a7a0":"code","b005e7f2":"code","0fbcac20":"code","8af370bc":"code","8be0a910":"code","4b1dc621":"code","0c476f96":"code","43174fa3":"code","ddebfa56":"code","98752d87":"code","567e27c5":"code","da51ce97":"code","296dee1c":"code","82bf33ce":"code","2d477cc7":"code","b21c7daf":"code","849d44d9":"code","928fa933":"code","cfd16922":"code","31ac47f8":"code","49454e43":"code","4fc976bb":"code","9afa4ffb":"code","be177750":"code","d4edc42d":"code","d89ec8fa":"code","4d91adce":"code","fffdc173":"code","d6dd23e4":"code","6efec387":"code","268b7532":"code","fd9aaa67":"code","b828f195":"code","8ab17622":"code","af37ab24":"code","6f951ba2":"code","7264c28b":"code","38535834":"code","587e4299":"code","d2de4bc4":"code","98d0313f":"code","4812b16a":"code","42cc51ad":"code","a0e88f52":"code","00d4e261":"code","2338d3c4":"code","f7d1baa9":"code","0cda5c0d":"code","d690ff98":"code","9509372f":"code","05fd798a":"code","f89febee":"code","46908b4a":"code","ede2015f":"code","a31b8115":"code","fcd36f11":"code","dadc3018":"code","8addad10":"code","3616eadb":"code","23a70491":"code","87e158da":"code","6189e6a1":"code","3c99e952":"code","5f65522c":"code","cd9b3d7c":"code","347d459c":"code","6521b905":"code","1a7f4ef9":"code","e3afdc85":"code","23f38d2b":"code","e2a62088":"code","c4de7698":"code","0f5cc574":"code","8b5d752f":"markdown","11339c73":"markdown","38aaded0":"markdown","6eccad1f":"markdown","2c151257":"markdown","547b1940":"markdown","8115a7fc":"markdown","faa975c8":"markdown","523ca657":"markdown","53ea6eb1":"markdown","141aede1":"markdown","de9ae26a":"markdown","c2cc32e4":"markdown","4820303a":"markdown","41cfb977":"markdown","6f736795":"markdown","13db8203":"markdown","c8b2f947":"markdown","224169cb":"markdown"},"source":{"1f24dbec":"#importing useful libraries\nimport math\nimport string\nimport datetime\nimport chardet\nimport fuzzywuzzy\nfrom fuzzywuzzy import process\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nimport scipy\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling as pp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport plotly.express as px\nimport plotly.graph_objects as go\nsns.color_palette('bright')\nsns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\nfrom plotly.offline import iplot\nfrom sklearn.pipeline import make_pipeline \n%matplotlib inline\nprint(\"Ready,set,go....\")","187cfcf7":"#reading data sets\ndf = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nprint(df.shape)","30318946":"#checking head\ndf.head()","f7a0b2b1":"#checking info\ndf.info()","86bd5f48":"#reading data sets\ndftest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(dftest.shape)","f8016e92":"dftest.head()","077797e0":"#checking info\ndftest.info()","c6acc59b":"#visuvalising the  null values\nplt.figure(figsize=(16,10))\nsns.heatmap(df.isnull())\nplt.title('Heatmap for checking Null Values')\nplt.show()","e819cc8c":"#visuvalising the  null values\nplt.figure(figsize=(16,10))\nsns.heatmap(dftest.isnull())\nplt.title('Heatmap for checking Null Values')\nplt.show()","cd2b7a55":"# checking for any NaN values\ndf.isna().any()","581b3336":"#getting sum of null values\ndf.isnull().sum().sort_values(ascending=False)\n","5990d445":"# checking for any NaN values\ndftest.isna().any()","09a9b7f6":"#getting sum of null values\ndftest.isnull().sum().sort_values(ascending=False)","05b95af6":"#function for caluclating missing percentage\ndef missing_percentage(df):\n    # get the number of missing data points per column\n    missing_values_count = df.isnull().sum()\n    total_cells = np.product(df.shape)\n    total_missing = missing_values_count.sum()\n    # percent of data that is missing\n    percent_missing = (total_missing\/total_cells) * 100\n    print(\"missing percentage in the given data frame is:{}\".format(percent_missing))\n    \n#function for null dataframe\ndef null_dataframe(df):\n    miss_percent = 100*(df.isnull().sum()\/len(df))\n    miss_percent = miss_percent[miss_percent>0].sort_values(ascending=False)\n    df_null = pd.DataFrame(miss_percent,columns=['percentage'])\n    return df_null\n\n#function for plotting graph of null values\ndef null_graph(df):\n    train_null = null_dataframe(df)\n    plt.figure(figsize=(16,9))\n    sns.barplot(data = train_null,x=train_null.index,y='percentage')\n    plt.xticks(rotation = 45)\n    plt.show()\n    \n#function for filling values\ndef filling_values(df,var,val):\n    df[var].fillna(value = val,inplace = True)","074cf025":"#missing percentage in train\nmissing_percentage(df)","0c3f2b30":"#missing percentage in test\nmissing_percentage(dftest)","27ad0176":"#checking null values percentage\ntrain_null = null_dataframe(df)\ntrain_null","9d42b214":"#graph for null values percentage in train\nnull_graph(df)","9f44a7a0":"#checking null values percentage for test\ntest_null = null_dataframe(dftest)\ntest_null","b005e7f2":"#graph for null values percentage in train\nnull_graph(dftest)","0fbcac20":"#dropping unnecessary columns\n#dropping values more than 50%\ndf.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis=1,inplace=True)\ndftest.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis=1,inplace=True)","8af370bc":"#getting null_dataframe\ndf_null = null_dataframe(df)\nli_train = list(df_null.index)\nli_train","8be0a910":"null_graph(df)","4b1dc621":"#for getting clear understand about wether none value should include or not\nfor i in df_null.index:\n    if df[i].dtypes == 'object':\n        print(i)\n        print(list(df[i].unique()))\n        print(\"-\"*50)","0c476f96":"#filling the train dataframe\n#except lotfrontage \nfor i in li_train:\n    if (df[i].dtypes!='object') & (i not in ['LotFrontage']):\n        filling_values(df,i,0)\n    elif (i not in ['LotFrontage']):\n        filling_values(df,i,df[i].describe()['top'])","43174fa3":"#checking null graph\nnull_graph(df)","ddebfa56":"#filling lotfrontage with mean\ndf['LotFrontage'].fillna(value = df['LotFrontage'].mean(),inplace = True)","98752d87":"missing_percentage(df)","567e27c5":"#visuvalising the  null values\nplt.figure(figsize=(16,10))\nsns.heatmap(df.isnull())\nplt.title('Heatmap for checking Null Values')\nplt.show()","da51ce97":"#getting null_dataframe\ndf_null = null_dataframe(dftest)\nli_test = list(df_null.index)\nli_test","296dee1c":"null_graph(dftest)","82bf33ce":"for i in df_null.index:\n    if dftest[i].dtypes == 'object':\n        print(i)\n        print(list(dftest[i].unique()))\n        print(\"-\"*50)","2d477cc7":"for i in li_test:\n    if (dftest[i].dtypes!='object') & (i not in ['LotFrontage']):\n        filling_values(dftest,i,0)\n    elif (i not in ['LotFrontage']):\n        filling_values(dftest,i,dftest[i].describe()['top'])","b21c7daf":"null_graph(dftest)","849d44d9":"#filling Lotfrontage with its mean\ndftest['LotFrontage'].fillna(value = dftest['LotFrontage'].mean(),inplace = True)","928fa933":"missing_percentage(dftest)","cfd16922":"#visuvalising the  null values\nplt.figure(figsize=(16,10))\nsns.heatmap(dftest.isnull())\nplt.title('Heatmap for checking Null Values')\nplt.show()","31ac47f8":"px.bar(df['SalePrice'],template='plotly_dark')","49454e43":"sns.set(style='darkgrid',rc = {'figure.figsize':(15,8)})\nsns.distplot(df['SalePrice'],bins = 30)","4fc976bb":"df_corr = df.corr()\ndf_corr['SalePrice']","9afa4ffb":"plt.figure(figsize=(10,8))\nplt.plot( df.groupby('YrSold')['SalePrice'].mean())\nplt.title(\"saleprice(mean) trend in every year\")\nplt.show()","be177750":"#checking overallqual because of correlation\nsns.set(style='darkgrid',rc = {'figure.figsize':(10,8)})\nsns.scatterplot(data = df ,y = 'OverallQual',x = 'SalePrice')","d4edc42d":"#checking grlivarea because of correleation\nsns.set(style='darkgrid',rc = {'figure.figsize':(10,8)})\nsns.scatterplot(data=df,x=\"GrLivArea\",y=\"SalePrice\")","d89ec8fa":"#columns for encoding\n\nobj_col = df.columns[df.dtypes=='object']\n\nobj_colt = dftest.columns[dftest.dtypes=='object']","4d91adce":"obj_col","fffdc173":"#checking which values have different unique values\nfor i in obj_col:\n    print(i)\n    print(list(df[i].unique()))\n    print(\"-\"*50)","d6dd23e4":"obj_colt","6efec387":"#checking which values have different unique values\nfor i in obj_colt:\n    print(i)\n    print(list(dftest[i].unique()))\n    print(\"-\"*50)","268b7532":"df.head()","fd9aaa67":"dftest.head()","b828f195":"df= pd.get_dummies(df,columns =[\"MSZoning\",\"Street\",\"LotShape\",\"LandContour\",'LandSlope', \n                                'LotConfig','Neighborhood', 'Condition1', 'BldgType', \n                                'RoofStyle',  'MasVnrType', 'ExterQual', \n                                'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', \n                                'BsmtFinType1', 'HeatingQC', 'CentralAir', \n                                'KitchenQual', 'GarageType', 'GarageFinish', \n                                'GarageCond', 'PavedDrive', 'SaleType', 'SaleCondition'],drop_first=True)\n                   ","8ab17622":"df.head()","af37ab24":"dftest= pd.get_dummies(dftest,columns =[\"MSZoning\",\"Street\",\"LotShape\",\"LandContour\",'LandSlope', \n                                'LotConfig','Neighborhood', 'Condition1', 'BldgType', \n                                'RoofStyle',  'MasVnrType', 'ExterQual', \n                                'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', \n                                'BsmtFinType1', 'HeatingQC', 'CentralAir', \n                                'KitchenQual', 'GarageType', 'GarageFinish', \n                                'GarageCond', 'PavedDrive', 'SaleType', 'SaleCondition'],drop_first=True)","6f951ba2":"dftest.head()","7264c28b":"#dropping other values\ndf.drop([\"Exterior2nd\",\"Condition2\",\"BsmtFinType2\",\"Utilities\", 'HouseStyle',\n         'RoofMatl', 'Exterior1st',  'Heating', 'Electrical', 'Functional', \n        'GarageQual'],axis=1,inplace=True)","38535834":"#dropping other values\ndftest.drop([\"Exterior2nd\",\"Condition2\",\"BsmtFinType2\",\"Utilities\", 'HouseStyle',\n         'RoofMatl', 'Exterior1st',  'Heating', 'Electrical', 'Functional', \n        'GarageQual'],axis=1,inplace=True)","587e4299":"#assiging X values\nX=df.drop([\"SalePrice\",'Id'],axis=1)\nX = X.values\nX.shape","d2de4bc4":"y = df['SalePrice']\ny = y.values\ny.shape","98d0313f":"#assiging xtest values\nxtest=dftest.drop(['Id'],axis=1)\nxtest = xtest.values\nxtest.shape","4812b16a":"from sklearn.linear_model import LinearRegression,RidgeCV,LassoCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor,XGBRFRegressor","42cc51ad":"#train_test_split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1\/3, random_state = 69)","a0e88f52":"lr = LinearRegression()\nlr.fit(X_train,y_train)","00d4e261":"pred = lr.predict(X_test)","2338d3c4":"#evaluvating the regressor performance (near to 1 is good)\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nprint(r2_score(y_test,pred)*100)\nprint('Mean Absolute Error:', mean_absolute_error(y_test, pred))\nprint('Mean Squred Error:', mean_squared_error(y_test, pred))\nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, pred)))","f7d1baa9":"#visuvalising the errors\nsns.set(style='darkgrid',rc = {'figure.figsize':(10,8)})\nsns.distplot(pred-y_test,kde=False)","0cda5c0d":"rc = RidgeCV(cv = 20)\nrc.fit(X_train,y_train)","d690ff98":"pred = rc.predict(X_test)","9509372f":"#evaluvating the regressor performance (near to 1 is good)\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nprint(r2_score(y_test,pred)*100)\nprint('Mean Absolute Error:', mean_absolute_error(y_test, pred))\nprint('Mean Squred Error:', mean_squared_error(y_test, pred))\nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, pred)))","05fd798a":"#visuvalising the errors\nsns.set(style='darkgrid',rc = {'figure.figsize':(10,8)})\nsns.distplot(pred-y_test,kde=False)","f89febee":"ls = LassoCV(cv = 20)\nls.fit(X_train,y_train)","46908b4a":"pred = ls.predict(X_test)\n#evaluvating the regressor performance (near to 1 is good)\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nprint(r2_score(y_test,pred)*100)\nprint('Mean Absolute Error:', mean_absolute_error(y_test, pred))\nprint('Mean Squred Error:', mean_squared_error(y_test, pred))\nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, pred)))","ede2015f":"#visuvalising the errors\nsns.set(style='darkgrid',rc = {'figure.figsize':(10,8)})\nsns.distplot(pred-y_test,kde=False)","a31b8115":"rf = RandomForestRegressor(max_depth=5,n_estimators = 500)\nrf.fit(X_train,y_train)","fcd36f11":"pred = rf.predict(xtest)","dadc3018":"pred = rf.predict(X_test)\n#evaluvating the regressor performance (near to 1 is good)\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nprint(r2_score(y_test,pred)*100)\nprint('Mean Absolute Error:', mean_absolute_error(y_test, pred))\nprint('Mean Squred Error:', mean_squared_error(y_test, pred))\nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, pred)))","8addad10":"#visuvalising the errors\nsns.set(style='darkgrid',rc = {'figure.figsize':(10,8)})\nsns.distplot(pred-y_test,kde=False)","3616eadb":"xgb = XGBRegressor()\nxgb.fit(X_train,y_train)","23a70491":"pred = xgb.predict(X_test)\n#evaluvating the regressor performance (near to 1 is good)\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nprint(r2_score(y_test,pred)*100)\nprint('Mean Absolute Error:', mean_absolute_error(y_test, pred))\nprint('Mean Squred Error:', mean_squared_error(y_test, pred))\nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, pred)))","87e158da":"#visuvalising the errors\nsns.set(style='darkgrid',rc = {'figure.figsize':(10,8)})\nsns.distplot(pred-y_test,kde=False)","6189e6a1":"xgb = XGBRFRegressor()\nxgb.fit(X_train,y_train)","3c99e952":"pred = xgb.predict(X_test)\n#evaluvating the regressor performance (near to 1 is good)\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nprint(r2_score(y_test,pred)*100)\nprint('Mean Absolute Error:', mean_absolute_error(y_test, pred))\nprint('Mean Squred Error:', mean_squared_error(y_test, pred))\nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, pred)))","5f65522c":"#visuvalising the errors\nsns.set(style='darkgrid',rc = {'figure.figsize':(10,8)})\nsns.distplot(pred-y_test,kde=False)","cd9b3d7c":"from sklearn.ensemble import GradientBoostingRegressor","347d459c":"gd = GradientBoostingRegressor(n_estimators=300,max_depth=6)\ngd.fit(X_train,y_train)","6521b905":"pred = gd.predict(X_test)\n#evaluvating the regressor performance (near to 1 is good)\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nprint(r2_score(y_test,pred)*100)\nprint('Mean Absolute Error:', mean_absolute_error(y_test, pred))\nprint('Mean Squred Error:', mean_squared_error(y_test, pred))\nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, pred)))","1a7f4ef9":"#visuvalising the errors\nsns.set(style='darkgrid',rc = {'figure.figsize':(10,8)})\nsns.distplot(pred-y_test,kde=False)","e3afdc85":"!pip install lazypredict","23f38d2b":"from lazypredict.Supervised import LazyRegressor","e2a62088":"reg = LazyRegressor(verbose=0,ignore_warnings = False,custom_metric=None)","c4de7698":"models,predict = reg.fit(X_train,X_test,y_train,y_test)","0f5cc574":"models","8b5d752f":"<h2> Selecting Models <\/h2>","11339c73":"<h2>GradientBoostingRegressor<\/h2>","38aaded0":"<h2> Understanding The Target Vraiable<\/h2>","6eccad1f":"<h2>Ridge Regressor<\/h2>","2c151257":"<h2>Cleaning The Data<\/h2>","547b1940":"<h2>Checking Correlation <\/h2>","8115a7fc":"<h2>Random Forest<\/h2>","faa975c8":"<h2>Understanding the Given Data<\/h2>","523ca657":"<h2>Linear Regression<\/h2>","53ea6eb1":"<h2>visuvalising the  null values<\/h2>","141aede1":"<h4> 1.Train data <\/h4>","de9ae26a":"GradientBoostingRegressor is winner ","c2cc32e4":"<h2> understanding the Null values<\/h2>","4820303a":"<h4>2.Test data<\/h4>","41cfb977":"<h2>XGBoost<\/h2>","6f736795":"<h2> Defining useful methods<\/h2>","13db8203":"<h2>preparing Training data<\/h2>","c8b2f947":"<h2>Lasso<\/h2>","224169cb":"<h2> Using Lazypredict <\/h2"}}