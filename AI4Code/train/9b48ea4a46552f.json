{"cell_type":{"d911773d":"code","62815ca7":"code","9be8c52c":"code","63e47f95":"code","144fdee2":"code","bdd9b3d3":"code","f7dbf013":"code","961630fd":"code","797f5fa7":"code","88ab184d":"code","6d35bccc":"code","54a592ec":"code","a2234f4c":"code","90faf2f6":"code","386fd7f5":"code","8bdc9d7d":"code","6e1ea84b":"code","76392c21":"code","b21f9862":"code","df58b4fa":"markdown","470d499e":"markdown","53d1ef21":"markdown","fed0f845":"markdown","ac0cfd8a":"markdown","385369c9":"markdown"},"source":{"d911773d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","62815ca7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom pathlib import Path\nfrom PIL import Image\n\n## less Important\nfrom functools import partial\nimport os\nfrom scipy import stats\nimport missingno as msno\nimport joblib\nimport tarfile\nimport shutil\nimport urllib\n\n\nfrom sklearn import datasets\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, GroupKFold\nfrom sklearn.metrics import accuracy_score\n\n\nimport tensorflow as tf   \n\nimport tensorflow.keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten ,Dropout, MaxPooling2D,AveragePooling2D\nfrom tensorflow.keras import backend as K \nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Lambda, ELU, Activation, BatchNormalization\nfrom keras.layers.convolutional import Convolution2D, Cropping2D, ZeroPadding2D, MaxPooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\n","9be8c52c":"def plot_history(history):\n    \n    f = plt.figure(figsize=(15,5))\n    ax = f.add_subplot(121)\n    ax.plot(history.history['accuracy'])\n    ax.plot(history.history['val_accuracy'])\n    ax.set_title('Model Accuracy')\n    ax.set_ylabel('Accuracy')\n    ax.set_xlabel('Epoch')\n    ax.legend(['Train', 'Val'])\n    \n    ax2 = f.add_subplot(122)\n    ax2.plot(history.history['loss'])\n    ax2.plot(history.history['val_loss'])\n    ax2.set_title('Model Loss')\n    ax2.set_ylabel('Loss')\n    ax2.set_xlabel('Epoch')\n    ax2.legend(['Train', 'Val'],loc= 'upper left')\n    \n    plt.show()\n    ","63e47f95":"train_labels = pd.read_csv('..\/input\/arabic-hwr-ai-pro-intake1\/train.csv')\ntrain_images = Path(r'..\/input\/arabic-hwr-ai-pro-intake1\/train')\n\n## read these all training images paths as Series\ntrain_images_paths = pd.Series(sorted(list(train_images.glob(r'*.png'))), name='Filepath').astype(str)\n\ntrain_images_paths.head()","144fdee2":"img_key_value = {}\nfor value in train_labels['label'].unique():\n    img_key_value[value] = train_labels[train_labels['label']==value].index[0]\n    \nimg_index = list(img_key_value.values())\nimg_label = list(img_key_value.keys())\n\nfig, ax = plt.subplots(4, 7, figsize=(12, 8))\n\ni = 0\nfor row in range(4):\n    for col in range(7):\n        plt.sca(ax[row, col])\n        plt.title(f'label = {img_label[i]}')\n        img = plt.imread(train_images_paths.iloc[img_index[i]])\n        plt.imshow(img)\n        plt.axis('off')\n        i+=1","bdd9b3d3":"train_labels.groupby('label').count()","f7dbf013":"print('Number of Instances in train_set =>', len(train_images_paths))\nprint('Number of Instances in train_labels =>', len(train_labels))\n\nprint()\n\nimg = plt.imread(train_images_paths.iloc[img_index[0]])\nprint('shape of each Image is =>', img.shape)","961630fd":"train_full_labels = train_labels['label'].values\ntrain_full_set = np.empty((13440, 32, 32, 3), dtype=np.float32)  #take only the first 3 channels\n\nfor idx, path in enumerate(train_images_paths):\n    img = plt.imread(path)\n    img = img[:,:,:3]\n    train_full_set[idx] = img\n    \nprint('train_full_set.shape =>', train_full_set.shape)\nprint('train_full_labels.shape =>', train_full_labels.shape)","797f5fa7":"test_labels = pd.read_csv('..\/input\/arabic-hwr-ai-pro-intake1\/test.csv')\ntest_images = Path(r'..\/input\/arabic-hwr-ai-pro-intake1\/test')\n\n## read these all training images paths as Series\ntest_images_paths = pd.Series(sorted(list(test_images.glob(r'*.png'))), name='Filepath').astype(str)\n\ntest_images_paths.head()","88ab184d":"print('Number of Instances in test_set is', len(test_images_paths))","6d35bccc":"test_full_set = np.empty((3360, 32, 32, 3), dtype=np.float32)  #take only the first 3 channels\n\nfor idx, path in enumerate(test_images_paths):\n    img = plt.imread(path)\n    img = img[:,:,:3]\n    test_full_set[idx] = img\n    \nprint('test_full_set.shape =>', test_full_set.shape)","54a592ec":"X_train, X_valid, y_train, y_valid = train_test_split(train_full_set, train_full_labels, \n                                                      test_size=0.2, shuffle=True, random_state=42)\n\nprint('X_train.shape =>', X_train.shape)\nprint('X_valid.shape =>', X_valid.shape)\nprint('y_train.shape =>', y_train.shape)\nprint('y_valid.shape =>', y_valid.shape)\n","a2234f4c":"datagen = ImageDataGenerator(        \n        horizontal_flip = False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(train_full_set)\n\n","90faf2f6":"from keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import BatchNormalization\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.preprocessing import image\nfrom sklearn.metrics import confusion_matrix\ndef create_model():\n        model = Sequential()\n        model.add(Conv2D(32 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu' , input_shape = (32,32,3)))\n        model.add(BatchNormalization())\n        model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n        model.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n        model.add(Dropout(0.1))\n        model.add(BatchNormalization())\n        model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n        model.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n        model.add(BatchNormalization())\n        model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n        model.add(Conv2D(128 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n        model.add(Dropout(0.2))\n        model.add(BatchNormalization())\n        model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n        model.add(Conv2D(256 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n        model.add(Dropout(0.25))\n        model.add(BatchNormalization())\n        model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n        model.add(Conv2D(512 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n        model.add(Dropout(0.3))\n        model.add(BatchNormalization())\n        model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n        model.add(Conv2D(256 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n        model.add(Dropout(0.25))\n        model.add(BatchNormalization())\n        model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n        model.add(Conv2D(128 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\n        model.add(Dropout(0.2))\n        \n        model.add(BatchNormalization())\n        model.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\n        model.add(Flatten())\n        model.add(Dense(units = 64 , activation = 'relu'))\n        model.add(Dropout(0.2))\n        model.add(Dense(units = 29, activation='softmax'))\n        optimizer=tf.keras.optimizers.Adamax(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name=\"Adamax\")\n        \n        \n        \n        model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n        \n        \n        \n        return(model)\n\n","386fd7f5":"kf = KFold(n_splits=5, shuffle=True, random_state=42)\n\ntest_preds = []\n\nfor fold, (train_idx, test_idx) in enumerate(kf.split(train_full_set, train_full_labels)):\n    print(f\"****** fold: {fold+1} *******\")\n    X_train, X_valid = train_full_set[train_idx], train_full_set[test_idx]\n    y_train, y_valid = train_full_labels[train_idx], train_full_labels[test_idx]\n    \n    model = create_model()\n    checkpointer = tf.keras.callbacks.ModelCheckpoint(filepath = 'weights.best.letters.hdf5', \n                               verbose = 2, \n                               save_best_only = True)\n    \n    history = model.fit(datagen.flow(X_train, y_train), validation_data=datagen.flow(X_valid, y_valid), \n                epochs=200, batch_size = 128, callbacks=[checkpointer]\n               )\n    plot_history(history)\n    \n    cm=confusion_matrix(y_valid,np.argmax(model.predict(X_valid), axis=-1))\n    df_cm = pd.DataFrame(cm, range(28),\n                      range(28))\n    \n    plt.figure(figsize = (20,15))\n    sns.set(font_scale=1.4)#for label size\n    sns.heatmap(df_cm, annot=True,annot_kws={\"size\": 16})# font size\n    \n    y_preds_classes = np.argmax(model.predict(test_full_set), axis=-1)\n    test_preds.append(y_preds_classes)\n    \n    \n    del  model\n","8bdc9d7d":"# \u0627   \u0628   \u062a   \u062b   \u062c   \u062d   \u062e   \u062f   \u0630   \u0631     \u0632   \u0633   \u0634   \u0635   \u0636   \u0637    \u0638   \u0639   \u063a    \u0641    \u0642   \u0643   \u0644   \u0645   \u0646   \u0647   \u0648   \u064a\n# 27  26 25  24  23  22  21   20   19   18  17  16    15  14   13   12   11   10   9   8   7   6   5   4   3   2   1   0","6e1ea84b":"test_labels['label'] = stats.mode(np.array(test_preds))[0].reshape(-1)","76392c21":"test_labels\n","b21f9862":"test_labels[['id', 'label']].to_csv('\/kaggle\/working\/submission.csv', index=False)","df58b4fa":"## Split the Data","470d499e":"# Load test Data","53d1ef21":"## Model Training","fed0f845":"## Explore the Data","ac0cfd8a":"## Loading the Data and Look at the Big Picture","385369c9":"## Data Preprocessing"}}