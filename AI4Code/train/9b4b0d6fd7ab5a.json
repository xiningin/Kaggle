{"cell_type":{"0f22ef15":"code","45880ab7":"code","659f18b7":"code","20f86955":"code","1e500a4d":"code","b2c07b4a":"code","82d46d20":"code","ae13ecc9":"code","e4ce126c":"code","c713dc2d":"code","a37fc060":"code","13b0cf95":"markdown","88261dd8":"markdown","65cea0db":"markdown","9bca9cb6":"markdown","cb8728f3":"markdown","e64b1bfc":"markdown","c210dc8e":"markdown"},"source":{"0f22ef15":"import torch\nimport torchvision\nimport torchvision.transforms as transforms\n\nimport torch.nn as nn\nimport torch.nn.functional as fn\n\nimport torch.optim as optim # Optim module for loss functions\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","45880ab7":"# The output of torchvision datasets are PILImage images of range [0, 1]. \n# We transform them to Tensors of normalized range [-1, 1]\ntransform = transforms.Compose(\n    [transforms.ToTensor(),\n     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n    ])","659f18b7":"trainset = torchvision.datasets.CIFAR10(root='\/kaggle\/working\/', train=True, download=True, transform=transform)\n\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=4, shuffle=True, num_workers=2)\n\n# Loading testset\ntestset = torchvision.datasets.CIFAR10(root='\/kaggle\/working\/', train=False, download=True, transform=transform)\ntestloader = torch.utils.data.DataLoader(testset, batch_size=4, shuffle=False, num_workers=2)\n","20f86955":"# Class labels\nclasses = ('plane', 'car', 'bird', 'cat','deer', 'dog', 'frog', 'horse', 'ship', 'truck')","1e500a4d":"def show_img(img):\n    img = img \/ 2 + 0.5\n    img_np = img.numpy()\n    \n    plt.imshow(np.transpose(img_np, (1,2,0)))\n    plt.show()\n    \n","b2c07b4a":"# get some random training images\ndetaiter = iter(trainloader)\nimages,labels = detaiter.next()","82d46d20":"show_img(torchvision.utils.make_grid(images))\n\nprint(' '.join('%5s' % classes[labels[j]] for j in range(4)))\n","ae13ecc9":"# Class CNN inherits nn.Module\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        \n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n    \n    def forward(self, x):\n        x = self.pool(fn.relu(self.conv1(x)))\n        x = self.pool(fn.relu(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = fn.relu(self.fc1(x))\n        x = fn.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\ncnn_model = CNN()","e4ce126c":"criterian = nn.CrossEntropyLoss()\n\noptimizer = optim.SGD(cnn_model.parameters(), lr=0.001, momentum=0.9)","c713dc2d":"for epoch in range(2):\n    running_loss = 0.0\n    \n    for i, data in enumerate(trainloader, 0):\n        # get inputs and labels\n        inputs, labels = data\n        \n        optimizer.zero_grad()\n        \n        outputs = cnn_model(inputs)\n        loss = criterian(outputs, labels)\n        loss.backward()\n        \n        optimizer.step()\n        \n        running_loss += loss.item()\n        if i % 2000 == 1999:\n            print('[%d, %5d] loss: %.3f' % (epoch + 1, i+1, running_loss\/2000))\n            \n            running_loss = 0.0\n            \nprint('Finished Training')\n        ","a37fc060":"PATH = '\/kaggle\/working\/cifar_cnn_net.pth'\n\ntorch.save(cnn_model.state_dict(), PATH)","13b0cf95":"## Train the model","88261dd8":"## Build Convolutional Neural Network(CNN)","65cea0db":"## Exploring Data","9bca9cb6":"## Save the model\n","cb8728f3":"# CNN Image Classification - PyTorch","e64b1bfc":"### Defining loss function and optimizer\n\nWe will use a classification Cross-Entropy loss and SGD with momentum.","c210dc8e":"## Loading Dataset\n\n**CIFAR** \n\nWe will use the CIFAR10 dataset. It has the classes: \u2018airplane\u2019, \u2018automobile\u2019, \u2018bird\u2019, \u2018cat\u2019, \u2018deer\u2019, \u2018dog\u2019, \u2018frog\u2019, \u2018horse\u2019, \u2018ship\u2019, \u2018truck\u2019. The images in CIFAR-10 are of size 3x32x32, i.e. 3-channel color images of 32x32 pixels in size."}}