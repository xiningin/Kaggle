{"cell_type":{"d38cce54":"code","d707047a":"code","4dedb4a6":"code","b9b4e58d":"code","7720754d":"code","9aae9319":"code","56ff863e":"code","d54db659":"code","71b3f686":"code","23ba4d39":"code","07e0e1dd":"code","17b2dc84":"code","dfcbc41f":"code","b8d4442c":"code","38dccee5":"code","39b5dee6":"code","32b3a647":"code","6aa66065":"code","83b629b3":"code","89b555a9":"code","cdc701b5":"code","c5f19cc0":"code","5e2e3188":"code","64b91e70":"code","a2f0f3ab":"code","743f6d28":"code","f88e419a":"code","f30d8026":"code","904872d5":"code","4e2115a2":"code","845323c4":"code","4254da76":"code","dbc548a5":"code","6e3da92d":"code","df1404dc":"code","724e0746":"code","422fb60d":"code","69ee71e4":"code","788b9303":"code","edf7ad85":"code","a4a63df8":"code","7f131ec0":"code","b08f67c1":"code","0a11a142":"code","244b6c72":"code","d9b98077":"code","d23ee8d9":"code","d11f4f9c":"code","e61a1a81":"code","0dbced2c":"code","10c95eb5":"code","90e4e3d7":"code","aa0ce523":"code","e2aa69e6":"code","3634a62a":"code","c03998eb":"code","ddcd8b2b":"code","9db21f24":"code","8f541b49":"code","fc6b1ab3":"code","59e68f81":"code","f763b40a":"code","3fd5db6b":"code","03bf920b":"code","86d5d6f2":"code","b545f7dc":"code","1076f065":"code","c83bf810":"code","a1f7540f":"code","b12611f3":"code","4d4bda57":"code","57124892":"code","682d874d":"code","6cb6a698":"code","a596a5c9":"code","c4146149":"code","7feb063d":"code","28c95f77":"code","71645985":"code","e1adfdac":"code","803333e7":"code","1bb19355":"code","71932f1c":"code","ca70680c":"code","991679c5":"code","ca771f24":"code","a0bc1c78":"code","61ec5b44":"code","13849939":"code","0c23a187":"code","b20a467a":"code","f211da3a":"code","e5134606":"code","570d8a76":"code","6ba79425":"code","ec9e592f":"code","9108f979":"code","044b64e3":"code","bc471251":"code","b461710b":"code","a493c213":"code","a4b05029":"code","6dd9d159":"code","25520483":"code","f7e1f121":"markdown","8a475026":"markdown","471a22aa":"markdown","29086117":"markdown","9eb8a594":"markdown","492764e8":"markdown","83f237aa":"markdown","8770a65d":"markdown","fc728b7a":"markdown","cfcba72d":"markdown","634fceef":"markdown","cf60c6eb":"markdown","1b38128d":"markdown","3764a127":"markdown","a815ff80":"markdown","e2f59559":"markdown","9d5b2d8f":"markdown","18ddc7a9":"markdown","ed91d30c":"markdown","78bcff4c":"markdown","b88cbee4":"markdown","d50b7a38":"markdown","24e50fa1":"markdown","845c682c":"markdown","7a74db7c":"markdown","26ba487c":"markdown","8f720308":"markdown","838f81c2":"markdown","290c47af":"markdown","e3ae14e0":"markdown","bdc27ef9":"markdown","95141038":"markdown","b4d0b2a5":"markdown","b73efbe9":"markdown","9d76b38d":"markdown","1976779b":"markdown","931c5a18":"markdown","73bb240f":"markdown","ff812ef5":"markdown","95938a09":"markdown","cce2620f":"markdown"},"source":{"d38cce54":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport csv #implements classes to read and write tabular data in CSV format\n%matplotlib inline\n# output is displayed in this juptyer notebook (inline dislay)\nimport matplotlib.pyplot as plt #collection of command style functions that make matplotlib work like MATLAB & data visulization\nimport seaborn as sns #Seaborn is a Python data visualization library based on matplotlib.\nimport copy #contains functions that are used to copy objects\nimport warnings # is actually a subclass of Exception\nwarnings.filterwarnings('ignore') #ignore this warning\nfrom IPython.display import clear_output, Image, display #ipython functions this if it runs in different envirovement\nimport plotly.offline as py #users to create beautiful interactive\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go #users to create beautiful interactive\nimport plotly.tools as tls #users to create beautiful interactive\nimport sys #provides information about constants, functions and methods\nimport plotly.express as px  #high-level API for rapid data exploration and figure generation\nimport re #provides regular expression matching operations similar to those","d707047a":"print(\"python:\", sys.version)\nprint(\"numpy:\", np.__version__)\nprint(\"pandas:\", pd.__version__)\nprint(\"csv:\", csv.__version__)\nprint(\"seaborn:\", sns.__version__)\n\n","4dedb4a6":"# Setting the scale for seaborn plots\nsns.set(font_scale=1.5)","b9b4e58d":"mcdonald_df = pd.read_csv('..\/input\/Mcdonald .csv') # Get the data","7720754d":"#View the first 5 rows of data\nmcdonald_df.head()","9aae9319":"#View the last 10 rows of data\nmcdonald_df.tail(10)","56ff863e":"#dimension of the dataset\nprint('Dimension of the dataset   ' + str(mcdonald_df.shape))","d54db659":"# size of data \nprint ('Size of the dataset    ' + str(mcdonald_df.size))","71b3f686":"# types of each column in the dataset\nmcdonald_df.dtypes","23ba4d39":"#count of different data type\nmcdonald_df.dtypes.value_counts() ","07e0e1dd":"# informatio of variables of the data set \nprint (mcdonald_df.info())","17b2dc84":"print(mcdonald_df.isnull().any())","dfcbc41f":"# Same as above, gives non-null number of records\nmcdonald_df.count()","b8d4442c":"# to get the summary of the dataset\nmcdonald_df.describe().T","38dccee5":"mcdonald_df.describe(include='all').T","39b5dee6":"print(mcdonald_df['Category'].unique())","32b3a647":"print(mcdonald_df['Item'].unique())","6aa66065":"#Creating new columns, and removing the space in the column name, encoding the space with \"_\". If we need to use them, later.\nmcdonald_df_encoded_space = copy.deepcopy(mcdonald_df)\nmcdonald_df_encoded_space\n\n","83b629b3":"mcdonald_df_encoded_space.columns=['Category', 'Item', 'Serving_Size', 'Calories', 'Calories_from_Fat',\n       'Total_Fat', 'Total_Fat_(%_Daily_Value)', 'Saturated_Fat',\n       'Saturated_Fat_(% Daily_Value)', 'Trans_Fat', 'Cholesterol',\n       'Cholesterol_(% Daily_Value)', 'Sodium', 'Sodium_(%_Daily_Value)',\n       'Carbohydrates', 'Carbohydrates_(%_Daily_Value)', 'Dietary_Fiber',\n       'Dietary_Fiber_(%_Daily_Value)', 'Sugars', 'Protein',\n       'Vitamin_A_(%_Daily_Value)', 'Vitamin_C_(%_Daily_Value)',\n       'Calcium_(%_Daily_Value)', 'Iron_(%_Daily_Value)']\nmcdonald_df_encoded_space.columns","89b555a9":"#How many menu items are in each cateogry?\nmcdonald_df.Category.value_counts()","cdc701b5":"#How many menu items are in each cateogry? - different way\nfood_categories = mcdonald_df.groupby('Category').count()\nfood_categories_count = food_categories[['Item']].sort_values('Item',ascending= False)\nfood_categories_count","c5f19cc0":"#Create a pie chart that includes the relative proportions of each cateogry of food (Pie chart for the \"Category\" column using the value_counts() method.\nmcdonald_df.Category.value_counts().plot.pie()","5e2e3188":"# Count plot for meal categories\ng = sns.countplot(x=\"Category\", data=mcdonald_df, palette=\"Greens_d\");\ng.set_xticklabels(g.get_xticklabels(), rotation=90)","64b91e70":"mcdonald_df.Category.value_counts().plot.bar()","a2f0f3ab":"mcdonald_df.groupby('Category')['Item'].count().plot(kind='bar')","743f6d28":"#Checking for the outliers - first set\nplt.figure(figsize= (20,15))\nplt.subplot(3,1,1)\nsns.boxplot(x= mcdonald_df['Calories'], color='lightblue')\n\nplt.subplot(3,1,2)\nsns.boxplot(x= mcdonald_df['Calories from Fat'], color='lightblue')\n\nplt.subplot(3,1,3)\nsns.boxplot(x= mcdonald_df['Total Fat'], color='lightblue')\n\n\nplt.show()","f88e419a":"#Checking for the outliers - second set\nplt.figure(figsize= (20,15))\nplt.subplot(3,1,1)\nsns.boxplot(x= mcdonald_df['Saturated Fat'], color='lightblue')\n\nplt.subplot(3,1,2)\nsns.boxplot(x= mcdonald_df['Cholesterol'], color='lightblue')\n\nplt.subplot(3,1,3)\nsns.boxplot(x= mcdonald_df['Trans Fat'], color='lightblue')\n\n\nplt.show()\n\n\n\n\n","f30d8026":"#Checking for the outliers - third set\nplt.figure(figsize= (20,15))\nplt.subplot(3,1,1)\nsns.boxplot(x= mcdonald_df['Sodium'], color='lightblue')\n\nplt.subplot(3,1,2)\nsns.boxplot(x= mcdonald_df['Dietary Fiber'], color='lightblue')\n\nplt.subplot(3,1,3)\nsns.boxplot(x= mcdonald_df['Sugars'], color='lightblue')\n\n\nplt.show()\n\n\n\n\n","904872d5":"#Checking for the outliers - fourth set\nplt.figure(figsize= (20,15))\nplt.subplot(3,1,1)\nsns.boxplot(x= mcdonald_df['Protein'], color='lightblue')\n\nplt.subplot(3,1,2)\nsns.boxplot(x= mcdonald_df['Vitamin A (% Daily Value)'], color='lightblue')\n\nplt.subplot(3,1,3)\nsns.boxplot(x= mcdonald_df['Vitamin C (% Daily Value)'], color='lightblue')\n\n\nplt.show()","4e2115a2":"#Checking for the outliers - fifth set\nplt.figure(figsize= (20,15))\nplt.subplot(3,1,1)\nsns.boxplot(x= mcdonald_df['Calcium (% Daily Value)'], color='lightblue')\n\nplt.subplot(3,1,2)\nsns.boxplot(x= mcdonald_df['Iron (% Daily Value)'], color='lightblue')\n\nplt.subplot(3,1,3)\nsns.boxplot(x= mcdonald_df['Carbohydrates'], color='lightblue')\n\n\nplt.show()","845323c4":"#Checking for the outliers - sixth set\nplt.figure(figsize= (20,15))\nplt.subplot(3,1,1)\nsns.boxplot(x= mcdonald_df['Total Fat (% Daily Value)'], color='lightblue')\n\nplt.subplot(3,1,2)\nsns.boxplot(x= mcdonald_df['Saturated Fat (% Daily Value)'], color='lightblue')\n\nplt.subplot(3,1,3)\nsns.boxplot(x= mcdonald_df['Cholesterol (% Daily Value)'], color='lightblue')\n\n\nplt.show()","4254da76":"#Checking for the outliers - seventh set\nplt.figure(figsize= (20,15))\nplt.subplot(3,1,1)\nsns.boxplot(x= mcdonald_df['Sodium (% Daily Value)'], color='lightblue')\n\nplt.subplot(3,1,2)\nsns.boxplot(x= mcdonald_df['Carbohydrates (% Daily Value)'], color='lightblue')\n\nplt.subplot(3,1,3)\nsns.boxplot(x= mcdonald_df['Dietary Fiber (% Daily Value)'], color='lightblue')\n\n\nplt.show()","dbc548a5":"mcdonald_df.corr()","6e3da92d":"f,ax = plt.subplots(figsize=(16, 16))\nsns.heatmap(mcdonald_df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.title(\"Mcdonald Data Correlation Heatmap\")\nplt.show()","df1404dc":"#Co-orelation plot between calories and Protein \nsns.jointplot(x= \"Calories\", y = \"Protein\", data = mcdonald_df,  kind=\"reg\", space=0, color=\"g\")\n#Co-orelation plot between calories and Carbohydrates\nsns.jointplot(x= \"Calories\", y = \"Carbohydrates\", data = mcdonald_df,  kind=\"reg\", space=0, color=\"g\")\n#Co-orelation plot between Total Fat and Protein \nsns.jointplot(x= \"Total Fat\", y = \"Protein\", data = mcdonald_df,  kind=\"reg\", space=0, color=\"g\") \n#Co-orelation plot between calories and Total Fat\nsns.jointplot(x= \"Calories\", y = \"Total Fat\",data = mcdonald_df,  kind=\"reg\", space=0, color=\"g\")","724e0746":"cols = ['Calories','Cholesterol','Trans Fat','Sugars','Dietary Fiber']\ncm = np.corrcoef(mcdonald_df[cols].values.T)\nsns.set(font_scale = 1.5)\nhm = sns.heatmap(cm,cbar = True, annot = True,square = True, fmt = '.2f', annot_kws = {'size':15}, yticklabels = cols, xticklabels = cols)","422fb60d":"corr = mcdonald_df.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True)\nplt.title(\"Mcdonald Data Correlation Heatmap\")\n\nplt.show()","69ee71e4":"cholesterol_trace = go.Scatter(\n    y = mcdonald_df['Cholesterol (% Daily Value)'].values,\n    x = mcdonald_df['Item'].values,\n    mode='markers',\n    marker=dict(\n        size= mcdonald_df['Cholesterol (% Daily Value)'].values,\n        #color = np.random.randn(500), #set color equal to a variable\n        color = mcdonald_df['Cholesterol (% Daily Value)'].values,\n        colorscale='Portland',\n        showscale=True\n    ),\n    text = mcdonald_df['Item'].values\n)\ndata = [cholesterol_trace]\n\nlayout= go.Layout(\n    autosize= True,\n    title= 'Scatter plot of Cholesterol (% Daily Value) per Item on the Menu',\n    hovermode= 'closest',\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False\n    ),\n    yaxis=dict(\n        title= 'Cholesterol (% Daily Value)',\n        ticklen= 5,\n        gridwidth= 2,\n        showgrid=False,\n        zeroline=False,\n        showline=False\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatterChol')","788b9303":"sodium_trace = go.Scatter(\n    y = mcdonald_df['Sodium (% Daily Value)'].values,\n    x = mcdonald_df['Item'].values,\n    mode='markers',\n    marker=dict(\n        size= mcdonald_df['Sodium (% Daily Value)'].values,\n        #color = np.random.randn(500), #set color equal to a variable\n        color = mcdonald_df['Sodium (% Daily Value)'].values,\n        colorscale='Portland',\n        showscale=True\n    ),\n    text = mcdonald_df['Item'].values\n)\ndata = [sodium_trace]\n\nlayout= go.Layout(\n    autosize= True,\n    title= 'Scatter plot of Sodium (% Daily Value) per Item on the Menu',\n    hovermode= 'closest',\n        xaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False\n    ),\n    yaxis=dict(\n        title= 'Sodium (% Daily Value)',\n        ticklen= 5,\n        gridwidth= 2,\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatterChol')","edf7ad85":"fig = px.scatter(mcdonald_df, x=\"Sodium (% Daily Value)\",y='Calories', color=\"Category\",\n                 size='Calories', hover_name=\"Item\",trendline=\"ols\",\n                 template=\"plotly_dark\",marginal_x=\"box\",marginal_y=\"box\")\nfig.show()","a4a63df8":"mcdonald_df[['Sodium']].idxmax()","7f131ec0":"mcdonald_df.at[82,'Item']","b08f67c1":"saturated_fat_trace = go.Scatter(\n    y = mcdonald_df['Saturated Fat (% Daily Value)'].values,\n    x = mcdonald_df['Item'].values,\n    mode='markers',\n    marker=dict(\n        size= mcdonald_df['Saturated Fat (% Daily Value)'].values,\n        #color = np.random.randn(500), #set color equal to a variable\n        color = mcdonald_df['Saturated Fat (% Daily Value)'].values,\n        colorscale='Portland',\n        showscale=True\n    ),\n    text = mcdonald_df['Item'].values\n)\ndata = [saturated_fat_trace]\n\nlayout= go.Layout(\n    autosize= True,\n    title= 'Scatter plot of Saturated Fat (% Daily Value) per Item on the Menu',\n    hovermode= 'closest',\n        xaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False\n    ),\n    yaxis=dict(\n        title= 'Saturated Fat (% Daily Value)',\n        ticklen= 5,\n        gridwidth= 2,\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatterChol')","0a11a142":"fig = px.scatter(mcdonald_df, x=\"Saturated Fat (% Daily Value)\",y='Calories', color=\"Category\",\n                 size='Calories', hover_name=\"Item\",trendline=\"ols\",\n                 template=\"plotly_dark\",marginal_x=\"box\",marginal_y=\"box\")\nfig.show()","244b6c72":"fig = px.scatter(mcdonald_df, x=\"Cholesterol (% Daily Value)\",y='Calories', color=\"Category\",\n                 size='Calories', hover_name=\"Item\",trendline=\"ols\",\n                 template=\"plotly_dark\",marginal_x=\"box\",marginal_y=\"box\")\nfig.show()","d9b98077":"fig = px.scatter(mcdonald_df, x=\"Dietary Fiber (% Daily Value)\",y='Calories', color=\"Category\",\n                 size='Calories', hover_name=\"Item\",trendline=\"ols\",\n                 template=\"plotly_dark\",marginal_x=\"box\",marginal_y=\"box\")\nfig.show()","d23ee8d9":"\n\nfig = px.scatter(mcdonald_df, x=\"Total Fat (% Daily Value)\",y='Cholesterol (% Daily Value)', color=\"Category\",\n                 size='Calories', hover_name=\"Item\",trendline=\"ols\",\n                 template=\"plotly_dark\",marginal_x=\"box\",marginal_y=\"box\")\nfig.show()","d11f4f9c":"fig = px.scatter(mcdonald_df, x=\"Carbohydrates (% Daily Value)\",y='Sugars', color=\"Category\",\n                 size='Calories', hover_name=\"Item\",trendline=\"ols\",\n                 template=\"plotly_dark\",marginal_x=\"box\",marginal_y=\"box\")\nfig.show()","e61a1a81":"fig = px.scatter(mcdonald_df, x='Dietary Fiber (% Daily Value)',y='Vitamin C (% Daily Value)', color=\"Category\",\n                 size='Calories',  hover_name=\"Item\",\n                 trendline=\"ols\",template=\"plotly_dark\",marginal_x=\"box\",marginal_y=\"box\")\nfig.show()","0dbced2c":"fig = px.scatter(mcdonald_df, x='Protein',y='Sugars', color=\"Category\",size='Calories',\n                 hover_name=\"Item\",trendline=\"ols\",template=\"plotly_dark\",marginal_x=\"box\",marginal_y=\"box\")\nfig.show()","10c95eb5":"measures = ['Calories', 'Total Fat', 'Cholesterol','Sodium', 'Sugars', 'Carbohydrates']\n\nfor m in measures:   \n    plot = sns.swarmplot(x=\"Category\", y=m, data=mcdonald_df)\n    plt.setp(plot.get_xticklabels(), rotation=45)\n    plt.title(m)\n    plt.show()","90e4e3d7":"print('Highest Calorie meal: {} \\n\\\n       Highest Fat meal: {} \\n\\\n       Highest Cholesterol meal: {} \\n\\\n       Highest Sodium meal: {} \\n\\\n       Highest Sugar meal: {} \\n\\\n       Highest Carb meal: {}'.format(mcdonald_df.Item[mcdonald_df['Calories'].idxmax()],\\\n                                     mcdonald_df.Item[mcdonald_df['Total Fat'].idxmax()],\\\n                                     mcdonald_df.Item[mcdonald_df['Cholesterol'].idxmax()],\\\n                                     mcdonald_df.Item[mcdonald_df['Sodium'].idxmax()],\\\n                                     mcdonald_df.Item[mcdonald_df['Sugars'].idxmax()],\\\n                                     mcdonald_df.Item[mcdonald_df['Carbohydrates'].idxmax()]))","aa0ce523":"plot=sns.swarmplot(x=\"Category\", y=\"Sodium\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Sodium Content\")\nplt.show()","e2aa69e6":"#The purpose of the code below is to group all of the foods by category and to plot the\n#average calary count of items in the group.\n\nCalories = mcdonald_df.drop('Item', axis = 1)\nCalories = mcdonald_df.groupby([\"Category\"])[\"Calories\"].mean()\nCalories = Calories.sort_values(ascending=False)\nprint(Calories)\n\n\nCategory = ['Chicken & Fish', 'Smoothies & Shakes', 'Breakfast',\n'Beef & Pork', 'Coffee & Tea', 'Salads', 'Snacks & Sides','Desserts','Beverages']\n\nplt.figure(figsize = (20,10))\nplt.suptitle('Calories by Category', fontsize = 24)\nplt.xlabel('Category', fontsize = 20)\nplt.ylabel(\"Calories\", fontsize = 20)\nplt.bar(Category, Calories)\nplt.xticks(rotation=90)\nplt.show()","3634a62a":"mcdonald_df.pivot_table('Vitamin A (% Daily Value)', 'Category').plot(kind='bar', stacked=True)","c03998eb":"mcdonald_df.pivot_table('Vitamin C (% Daily Value)', 'Category').plot(kind='bar', stacked=True, color = 'c')","ddcd8b2b":"mcdonald_df.pivot_table('Cholesterol', 'Category').plot(kind='bar', stacked=True, color = 'c')","9db21f24":"x = max(mcdonald_df['Cholesterol'])\nmcdonald_df[(mcdonald_df.Cholesterol ==x)]\n#the most dangerous for your heart breakfasts.It can be your last ...Cholesterol is a cause of heart attacks","8f541b49":"sns.boxplot(data= mcdonald_df, x = 'Category',y = 'Dietary Fiber')\nplt.xticks(rotation=90)\nplt.show()","fc6b1ab3":"#I was suprised by the amount of average calaries that were in the \"Smoothies & Shakes\"\n#the code below takes a look at the highest Calorie counts in that category.\nSmoothShakes = mcdonald_df[mcdonald_df[\"Category\"] == \"Smoothies & Shakes\"]\nSmoothShakes = SmoothShakes.sort_values(\"Calories\", ascending = False)\nprint(SmoothShakes[[\"Item\", \"Calories\"]].head(5))","59e68f81":"mcdonald_df.pivot_table('Calcium (% Daily Value)', 'Category').plot(kind='bar', stacked=True, color = 'r')","f763b40a":"mcdonald_df.pivot_table('Iron (% Daily Value)', 'Category').plot(kind='bar', stacked=True, color = 'k')","3fd5db6b":"mcdonald_df.pivot_table('Protein', 'Category').plot(kind='bar', stacked=True, color = 'b')","03bf920b":"mcdonald_df.pivot_table('Calories', 'Category').plot(kind='bar', stacked=True, color = 'c')","86d5d6f2":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution Calories\")\nax = sns.distplot(mcdonald_df[\"Calories\"], color = 'r')\n\nprint(mcdonald_df.Calories.mean())\nprint(mcdonald_df.Calories.median())","b545f7dc":"plt.figure(figsize=(12,5))\nplt.title(\"Distribution Sugars\")\nax = sns.distplot(mcdonald_df[\"Sugars\"], color = 'c')\n\n\nprint(mcdonald_df.Sugars.mean())\nprint(mcdonald_df.Sugars.median())","1076f065":"def plot(grouped):\n    item = grouped[\"Item\"].sum()\n    item_list = item.sort_index()\n    item_list = item_list[-20:]\n    plt.figure(figsize=(9,10))\n    graph = sns.barplot(item_list.index,item_list.values)\n    labels = [aj.get_text()[-40:] for aj in graph.get_yticklabels()]\n    graph.set_yticklabels(labels)","c83bf810":"sugar = mcdonald_df.groupby(mcdonald_df[\"Sugars\"])\nplot(sugar)","a1f7540f":"vitaminC = mcdonald_df.groupby(mcdonald_df[\"Vitamin C (% Daily Value)\"])\nplot(vitaminC)","b12611f3":"protein = mcdonald_df.groupby(mcdonald_df[\"Protein\"])\nplot(protein)","4d4bda57":"cholesterol = mcdonald_df.groupby(mcdonald_df[\"Cholesterol\"])\nplot(cholesterol)","57124892":"fats = mcdonald_df.groupby(mcdonald_df[\"Trans Fat\"])\nplot(fats)","682d874d":"calories = mcdonald_df.groupby(mcdonald_df[\"Calories\"])\nplot(calories)","6cb6a698":"for m in measures:\n    g = sns.factorplot(x=\"Category\", y=m,data=mcdonald_df, kind=\"swarm\",size=5, aspect=2.5);","a596a5c9":"#Produce the data for the ten largest items (Largest in terms of \"Serving Size\") using the tail and sort_values methods.\nmcdonald_df.sort_values('Serving Size' ).tail(10)","c4146149":"#What menu item has the most sugar? Using idxmax and loc\nmcdonald_df.loc[mcdonald_df.Sugars.idxmax() ].Item","7feb063d":"#what is the mean (average) calorie count of each category? Use round() method to round each mean by two decimals\nmcdonald_df.groupby(\"Category\").Calories.mean().round(2)","28c95f77":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n#plt.figure()\n\nax = sns.boxenplot(x=\"Category\", y='Calories', data=mcdonald_df, color='#eeeeee', palette=\"tab10\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \n#ax = sns.stripplot(x='Category', y='Cholesterol (% Daily Value)', data=menu, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n#\nplt.title(\"Calories  \\n\", loc=\"center\",size=32,color='#be0c0c',alpha=0.6)\nplt.xlabel('Category',color='#34495E',fontsize=20) \nplt.ylabel('Calories',color='#34495E',fontsize=20)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)  \nplt.yticks(size=15,color='#006600')\n#plt.text(2.5, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\n#plt.ylim(0,200)\n#plt.legend(loc=\"upper right\",fontsize=14,ncol=5,title='Category',title_fontsize=22,framealpha=0.99)\nplt.show()","71645985":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n#plt.figure()\n\nax = sns.boxenplot(x=\"Category\", y='Total Fat (% Daily Value)', data=mcdonald_df, color='#eeeeee', palette=\"tab10\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \n#ax = sns.stripplot(x='Category', y='Cholesterol (% Daily Value)', data=menu, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n#\nplt.title(\"Total Fat (% Daily Value)  \\n\", loc=\"center\",size=32,color='#be0c0c',alpha=0.6)\nplt.xlabel('Category',color='#34495E',fontsize=20) \nplt.ylabel('Total Fat (% Daily Value)',color='#34495E',fontsize=20)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)  \nplt.yticks(size=15,color='#006600')\n#plt.text(2.5, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\n#plt.ylim(0,200)\n#plt.legend(loc=\"upper right\",fontsize=14,ncol=5,title='Category',title_fontsize=22,framealpha=0.99)\nplt.show()","e1adfdac":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(22,10))\n#plt.figure()\n\nax = sns.boxenplot(x=\"Category\", y='Saturated Fat (% Daily Value)', data=mcdonald_df, color='#eeeeee', palette=\"tab20\")\n\n# Add transparency to colors\nfor patch in ax.artists:\n    r, g, b, a = patch.get_facecolor()\n    patch.set_facecolor((r, g, b, .9))\n    \n#ax = sns.stripplot(x='Category', y='Cholesterol (% Daily Value)', data=menu, color=\"orange\", jitter=0.5, size=5,alpha=0.15)\n#\nplt.title(\"Saturated Fat (% Daily Value)  \\n\", loc=\"center\",size=32,color='#be0c0c',alpha=0.6)\nplt.xlabel('Category',color='#34495E',fontsize=20) \nplt.ylabel('Saturated Fat (% Daily Value)',color='#34495E',fontsize=20)\nplt.xticks(size=16,color='#008abc',rotation='horizontal', wrap=True)  \nplt.yticks(size=15,color='#006600')\n#plt.text(2.5, 1, 'Courtesy: https:\/\/seaborn.pydata.org\/examples\/grouped_boxplot.html', fontsize=13,alpha=0.2)\n#plt.ylim(0,200)\n#plt.legend(loc=\"upper right\",fontsize=10,ncol=5,title='Category',title_fontsize=14,framealpha=0.99)\nplt.show()","803333e7":"### Vitamin A Swarmplot\nplot = sns.swarmplot(x=\"Category\", y=\"Vitamin A (% Daily Value)\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Vitamin A (% Daily Value)\")\nplt.show()","1bb19355":"### Vitamin C Swarmplot\nplot = sns.swarmplot(x=\"Category\", y=\"Vitamin C (% Daily Value)\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Vitamin C (% Daily Value)\")\nplt.show()","71932f1c":"### Calcium Swarmplot\nplot = sns.swarmplot(x=\"Category\", y=\"Calcium (% Daily Value)\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Calcium (% Daily Value)\")\nplt.show()","ca70680c":"### Iron Swarmplot\nplot = sns.swarmplot(x=\"Category\", y=\"Iron (% Daily Value)\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Iron (% Daily Value)\")\nplt.show()","991679c5":"### Protein Swarmplot\nplot = sns.swarmplot(x=\"Category\", y=\"Protein\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Protein\")\nplt.show()","ca771f24":"### Trans Fat Swarmplot\nplot = sns.swarmplot(x=\"Category\", y=\"Trans Fat\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Trans Fat\")\nplt.show()","a0bc1c78":"### Sugars Swarmplot\nplot = sns.swarmplot(x=\"Category\", y=\"Sugars\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Sugars\")\nplt.show()","61ec5b44":"### Cholesterol Swarmplot\nplot = sns.swarmplot(x=\"Category\", y=\"Cholesterol\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Cholesterol\")\nplt.show()","13849939":"### Calories Swarmplot \nplot = sns.swarmplot(x=\"Category\", y=\"Calories\", data=mcdonald_df)\nplt.setp(plot.get_xticklabels(),rotation=70)\nplt.title(\"Calories\")\nplt.show()","0c23a187":"# Plotting the KDEplots\nf, axes = plt.subplots(3, 3, figsize=(10, 10), sharex=True, sharey=True)\n\ns = np.linspace(0, 3, 10)\ncmap = sns.cubehelix_palette(start=0.0, light=1, as_cmap=True)\n\n# Generate and plot a random bivariate dataset\nx = mcdonald_df['Cholesterol (% Daily Value)'].values\ny = mcdonald_df['Sodium (% Daily Value)'].values\nsns.kdeplot(x, y, cmap=cmap, shade=True, cut=5, ax=axes[0,0])\naxes[0,0].set(xlim=(-10, 50), ylim=(-30, 70), title = 'Cholesterol and Sodium')\n\ncmap = sns.cubehelix_palette(start=0.333333333333, light=1, as_cmap=True)\n\n# Generate and plot a random bivariate dataset\nx = mcdonald_df['Carbohydrates (% Daily Value)'].values\ny = mcdonald_df['Sodium (% Daily Value)'].values\nsns.kdeplot(x, y, cmap=cmap, shade=True, ax=axes[0,1])\naxes[0,1].set(xlim=(-5, 50), ylim=(-10, 70),  title = 'Carbs and Sodium')\n\ncmap = sns.cubehelix_palette(start=0.666666666667, light=1, as_cmap=True)\n\n# Generate and plot a random bivariate dataset\nx = mcdonald_df['Carbohydrates (% Daily Value)'].values\ny = mcdonald_df['Cholesterol (% Daily Value)'].values\nsns.kdeplot(x, y, cmap=cmap, shade=True, ax=axes[0,2])\naxes[0,2].set(xlim=(-5, 50), ylim=(-10, 70),  title = 'Carbs and Cholesterol')\n\ncmap = sns.cubehelix_palette(start=1.0, light=1, as_cmap=True)\n\n# Generate and plot a random bivariate dataset\nx = mcdonald_df['Total Fat (% Daily Value)'].values\ny = mcdonald_df['Saturated Fat (% Daily Value)'].values\nsns.kdeplot(x, y, cmap=cmap, shade=True, ax=axes[1,0])\naxes[1,0].set(xlim=(-5, 50), ylim=(-10, 70),  title = 'Total Fat and Saturated Fat')\n\ncmap = sns.cubehelix_palette(start=1.333333333333, light=1, as_cmap=True)\n\n# Generate and plot a random bivariate dataset\nx = mcdonald_df['Total Fat (% Daily Value)'].values\ny = mcdonald_df['Cholesterol (% Daily Value)'].values\nsns.kdeplot(x, y, cmap=cmap, shade=True, ax=axes[1,1])\naxes[1,1].set(xlim=(-5, 50), ylim=(-10, 70),  title = 'Cholesterol and Total Fat')\n\ncmap = sns.cubehelix_palette(start=1.666666666667, light=1, as_cmap=True)\n\n# Generate and plot a random bivariate dataset\nx = mcdonald_df['Vitamin A (% Daily Value)'].values\ny = mcdonald_df['Cholesterol (% Daily Value)'].values\nsns.kdeplot(x, y, cmap=cmap, shade=True, ax=axes[1,2])\naxes[1,2].set(xlim=(-5, 50), ylim=(-10, 70),  title = 'Vitamin A and Cholesterol')\n\ncmap = sns.cubehelix_palette(start=2.0, light=1, as_cmap=True)\n\n# Generate and plot a random bivariate dataset\nx = mcdonald_df['Calcium (% Daily Value)'].values\ny = mcdonald_df['Sodium (% Daily Value)'].values\nsns.kdeplot(x, y, cmap=cmap, shade=True, ax=axes[2,0])\naxes[2,0].set(xlim=(-5, 50), ylim=(-10, 70),  title = 'Calcium and Sodium')\n\ncmap = sns.cubehelix_palette(start=2.333333333333, light=1, as_cmap=True)\n\n# Generate and plot a random bivariate dataset\nx = mcdonald_df['Calcium (% Daily Value)'].values\ny = mcdonald_df['Cholesterol (% Daily Value)'].values\nsns.kdeplot(x, y, cmap=cmap, shade=True, ax=axes[2,1])\naxes[2,1].set(xlim=(-5, 50), ylim=(-10, 70),  title = 'Cholesterol and Calcium')\n\ncmap = sns.cubehelix_palette(start=2.666666666667, light=1, as_cmap=True)\n\n# Generate and plot a random bivariate dataset\nx = mcdonald_df['Iron (% Daily Value)'].values\ny = mcdonald_df['Total Fat (% Daily Value)'].values\nsns.kdeplot(x, y, cmap=cmap, shade=True, ax=axes[2,2])\naxes[2,2].set(xlim=(-5, 50), ylim=(-10, 70),  title = 'Iron and Total Fat')\n\n\nf.tight_layout()","b20a467a":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","f211da3a":"#Distribution graphs (histogram\/bar graph) of sampled columns:\nplotPerColumnDistribution(mcdonald_df, 10, 5)","e5134606":"mcdonald_df_sugars = pd.DataFrame(columns=('Item','Sugars'))\nmcdonald_df_sugars['Item'] = mcdonald_df['Item']\nmcdonald_df_sugars['Sugars'] = mcdonald_df['Sugars']\nprint(\"Let's sort them by the amount of sugar they have in a ascending order: \")\nmcdonald_df_sugars = mcdonald_df_sugars.sort_values('Sugars', ascending=[True])\nprint(mcdonald_df_sugars.head(10))","570d8a76":"print(\"Number of items in the menu: \"+str(len(mcdonald_df.index)))\nprint(\"Number of items without sugar in the menu: \"+str(len(mcdonald_df_sugars.loc[mcdonald_df_sugars['Sugars'] == 0])))\nprint(mcdonald_df_sugars.loc[mcdonald_df_sugars['Sugars'] == 0])","6ba79425":"sns.lmplot(y='Trans Fat', x='Cholesterol',  hue = 'Category',\n           data=mcdonald_df, \n           fit_reg=False, scatter_kws={'alpha':0.7})","ec9e592f":"sns.lmplot(y='Total Fat', x='Sugars', hue = 'Category' ,\n           data=mcdonald_df, \n           fit_reg=False, scatter_kws={'alpha':0.7})","9108f979":"mcdonald_df['Category'] = mcdonald_df['Category'].astype('category')\n\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"Category\", y=\"Calories\", data=mcdonald_df, inner=None)\nsns.swarmplot(x=\"Category\", y=\"Calories\", data=mcdonald_df, color=\"white\", edgecolor=\"gray\")\nplt.xticks(rotation = 75,fontsize=15)\nplt.yticks(fontsize=15)\nplt.xlabel('Category',fontsize=15)\nplt.ylabel('Calories',fontsize=15)\nplt.title('Calories by Category', fontsize=15)\nplt.tight_layout()\nplt.show()\n\nn_bins = 5\nx = np.arange(min(mcdonald_df['Calories']),max(mcdonald_df['Calories']),(max(mcdonald_df['Calories'])-min(mcdonald_df['Calories']))\/n_bins)\nplt.figure(figsize=(10,10))\nplt.hist(mcdonald_df['Calories'], bins=n_bins, density=True)\nplt.xticks(x,fontsize=15)\nplt.yticks(fontsize=15)\nplt.xlabel('Calories',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.title('Calories Distribution', fontsize=15)\nplt.tight_layout()\nplt.show()","044b64e3":"oz_list = []\nfor i in mcdonald_df['Serving Size'].tolist():\n    oz = re.match(r'\\d+\\.?\\d*',i).group(0)\n    oz_list.append(float(oz))\nmcdonald_df['oz'] = oz_list\nmcdonald_df['cal\/unit'] = mcdonald_df['Calories']\/mcdonald_df['oz']\n\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"Category\", y=\"cal\/unit\", data=mcdonald_df, inner=None)\nsns.swarmplot(x=\"Category\", y=\"cal\/unit\", data=mcdonald_df, color=\"white\", edgecolor=\"gray\")\nplt.xticks(rotation = 75,fontsize=15)\nplt.yticks(fontsize=15)\nplt.xlabel('Category',fontsize=15)\nplt.ylabel('Calories\/Unit (oz\/fl oz)',fontsize=15)\nplt.title('Calories\/Unit (oz\/fl oz) by Category', fontsize=15)\nplt.tight_layout()\nplt.show()\n\nn_bins = 5\nx = np.arange(min(mcdonald_df['cal\/unit']),max(mcdonald_df['cal\/unit']),(max(mcdonald_df['cal\/unit'])-min(mcdonald_df['cal\/unit']))\/n_bins)\nplt.figure(figsize=(10,10))\nplt.hist(mcdonald_df['cal\/unit'], bins=n_bins, density=True)\nplt.xticks(x,fontsize=15)\nplt.yticks(fontsize=15)\nplt.xlabel('Calories\/Unit (oz\/fl oz)',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.title('Calories\/Unit (oz\/fl oz) Distribution', fontsize=15)\nplt.tight_layout()\nplt.show()","bc471251":"print(mcdonald_df[mcdonald_df['cal\/unit'] > 150]['Item'])","b461710b":"#Sugar content in Menu\u2019s items \nmcdonald_df_sugars = pd.DataFrame(columns=('Item','Sugars'))\nmcdonald_df_sugars['Item'] = mcdonald_df['Item']\nmcdonald_df_sugars['Sugars'] = mcdonald_df['Sugars']\nprint(\"Let's  sort  them  by  the  amount  of  sugar  they  have  in  a ascending order: \")\nmcdonald_df_sugars = mcdonald_df_sugars.sort_values('Sugars', ascending=[True])\nprint(mcdonald_df_sugars.head(260))","a493c213":"#Check for item which contains nosugar.\nprint(\"Number  of  items  in  the  menu:  \"+str(len(mcdonald_df.index)))\nprint(\"Number    of    items    without    sugar    in    the    menu: \"+str(len(mcdonald_df_sugars.loc[mcdonald_df_sugars['Sugars'] == 0])))\nprint(mcdonald_df_sugars.loc[mcdonald_df_sugars['Sugars'] == 0])","a4b05029":"# The function creates a Scatter graph object (go) and uses the data frame .isin() selection to extract the requested information\ndef make_scatter(mcdonald_df,category,x_cat,y_cat):\n    return  go.Scatter(\n       x = mcdonald_df[mcdonald_df['Category'].isin([category])][x_cat],\n       y = mcdonald_df[mcdonald_df['Category'].isin([category])][y_cat],\n       mode = \"markers\",\n       name = category,\n       text=  mcdonald_df.Item)","6dd9d159":"# Define our categories to plot\nx_cat = 'Calories'; y_cat = 'Carbohydrates'# Create a list of scatter plots to view all at once\ndata = [make_scatter(mcdonald_df,cat,x_cat,y_cat) for cat in\n   mcdonald_df.Category.unique().tolist()]# Define the plot layout (title, ticks etc.)\nlayout = dict(title = 'McDonalds Nutrition',\n   xaxis= dict(title= 'Calories',ticklen=5,zeroline= False),\n   yaxis= dict(title= 'Carbohydrates(g)',ticklen= 5,zeroline=False))# Finally we will plot the data with the layout\nfig = dict(data = data, layout = layout)\niplot(fig)","25520483":"# Define our categories to plot\nx_cat = 'Total Fat'; y_cat = 'Sodium'# Create a list of scatter plots to view all at once\ndata = [make_scatter(mcdonald_df,cat,x_cat,y_cat) for cat in\n   mcdonald_df.Category.unique().tolist()]# Define the plot layout (title, ticks etc.)\nlayout = dict(title = 'McDonalds Nutrition',\n   xaxis= dict(title= 'Total Fat',ticklen=5,zeroline= False),\n   yaxis= dict(title= 'Sodium',ticklen= 5,zeroline=False))# Finally we will plot the data with the layout\nfig = dict(data = data, layout = layout)\niplot(fig)","f7e1f121":"# Few Sample Version Information","8a475026":"Well the correlation matrix confirms the finding that we have discovered (e.g in SQL). Conclusion What to avoid?\n\nChicken McNuggets:- Although its provide you ample amount of protein but its also contain huge amount of calories (more than 1750).\nBig Breakfast with Hotcakes (Regular Biscuit):- contain excess amount of cholesterol.\nDouble Quarter Pounder with Cheese :- If you are on diet than avoid this item, it contain a bumper amount of trans fat\nSafe options\n\nHash Brown\nDiet Coke (Small)","471a22aa":"# 5. Which item contributes maximum to the Sodium intake?","29086117":"\n\nBasically, the products contain relatively little sugar. But remember that most of the sugar contained in shakes, and do not forget about it at the next visit to McDonald's :) \n\nThe enemy must know in person! Look at these brazen sugar delicious foods lol\n","9eb8a594":"# 4. Which category contributes to the maximum % of Cholesterol in a diet (% daily value)?","492764e8":"It has 260 rows and 24 columns in the given dataset.","83f237aa":"Probably better to have Breakfast at home.","8770a65d":"# 1.Plot graphically which food categories have the highest and lowest varieties","fc728b7a":"#sns.pairplot(mcdonald_df)  #pairplot\n#plt.show()\n####Not using the same, as pairplot for so many vaiable, it will take long time and also output will be very micro\/small, so not readable","cfcba72d":"Takeaway from the plots\n\nWhoa! These scatter plots now show a much larger distribution of red plots. This shows that there are quite a handful of MacDonald's food items which contain a dangerous amount of Saturated Fat, where one single food item can contain an amount close to the one's recommended daily allowance. For example the McFlurry with M&M candies or even the Frappe with Chocolate Chips.\n\nGreatest amount of Saturate Fats: McFlurry with M&M candies, Chicken McNuggets (40 piece), Frappe Chocolate Chip, Big Breakfast with Hotcakes etc\n","634fceef":"From above, there is no missing values, dataset is good.","cf60c6eb":"# 3.Which variables have the highest correlation? Plot them and find out the value?","1b38128d":"We already know the highest from above max frequency is Coffee & Tea, from describe function output. We will reconfirm our findings below.","3764a127":"\n\nTakeaway from the plot\n\nThe scatter plots for Sodium (% Daily Value) seem to follow a similar distribution of points whereby MacDonald food items contributing the greatest amount of sodium are scaled largest. As evinced by the largest red circular plot, the 40-piece Chicken McNuggets are the greatest contributor to Sodium intake.\n\nThe Big Breakfast range with Hotcakes follow up as a close second as a contributor to the sodium amount.\n\nGreatest amount of Sodium : Chicken McNuggets (40 piece)\n","a815ff80":"# Let\u2019s look at a plot of the Carbohydrates vs. Calories coloured by menu item type. To do this I will first define a new function to make a scatter plot with Plotly:","e2f59559":"We should normalize by serving size and replot.","9d5b2d8f":"Observation\nBased on the above  visualization, the below variables have outlier:\n\nCalories                           outlier\nCalories from Fat                  outlier\nTotal Fat                          outlier\nTotal Fat (% Daily Value)          outlier\nTrans Fat                          outlier\nCholesterol                        outlier\nCholesterol (% Daily Value)        outlier\nSodium                             outlier\nSodium (% Daily Value)             outlier\nCarbohydrates                      outlier\nCarbohydrates (% Daily Value)      outlier\nDietary Fiber (% Daily Value)      outlier\nSugars                             outlier\nProtein                            outlier\nVitamin A (% Daily Value)          outlier\nVitamin C (% Daily Value)          outlier\nCalcium (% Daily Value)            outlier\nIron (% Daily Value)               outlier\n\n------\nSaturated Fat                      No outlier\nDietary Fiber                      No outlier\nSaturated Fat (% Daily Value)      No outlier","18ddc7a9":"It shows we have 18 integors, 3 floats and 3 objects (Categorial) for 21 columns.","ed91d30c":"I think it would be nice to view calories in a histogram and in a beeswarm plot split by category.","78bcff4c":"# Import the dataset and Load the dataset - Mcdonald dataset","b88cbee4":"\n\nIf you are on a diet but sometimes like to sin with a hamburger then this is for you! You can afford a drink and a salad. \n","d50b7a38":"The above boxplot shows very clearly Salad contribution to the dietary fibre.","24e50fa1":"# 6.Which 4 food items contain the most amount of Saturated Fat?","845c682c":"# 2. Which all variables have an outlier?","7a74db7c":"I think it is important to see what dishes we can meet vitamins","26ba487c":"So only 25 elements of 260, which means that only the 9.61% of the items in McDonalds doesn't have any amount of sugar.","8f720308":"# Initial Galance of  the dataset records ( head & tail)","838f81c2":"# Set Initial Settings","290c47af":"I am using the subplot of three, so it is easy from appearance perpestive. ","e3ae14e0":"We can see that there are various parameters with strong correlation between them. Lets plot these strong relationships individually.","bdc27ef9":"Unsurpisingly, the menu item with highest calorie density is in the dessert category. Let's find out what it is.","95141038":"## McDonald's mostly sells coffee and tea and sells a small amount of Salads in comparison\n\nI had no idea that the mass majority of the items on McDonald's menu were coffee and Tea, But I'm not surprised the item they sell the least of is Salads 36 % of McDonald s menu is comprised of Coffee and Tea while only 2 % is comprised of salads","b4d0b2a5":"# Additional Information about the dataset , useful analysis","b73efbe9":"# Check for missing values","9d76b38d":"# Additional Analysis from the data","1976779b":"# Information about the dataset - Object Type - Categorical Variable - Unique","931c5a18":"from different *****","73bb240f":"# Information about the dataset","ff812ef5":"Well, no amazing discoveries we have not made. The correlation matrix confirmed the idea that cholesterol and trans fats are best avoided. They are not only harmful to the body, but also increase the caloric content of food hehe If you want to know the average calorie content of products, you can see the distribution. Or look at any of the measures of the Central trend.","95938a09":"# Load the necessary libraries.","cce2620f":"\n\nTakeaway from the plot\n\nThe most striking visuals from the scatter plot are the few large red plots close to the top. These circular plots were scaled such as that the higher the Cholesterol (% Daily value), the larger the plot thereby making for intuitive visuals. As we can see, the main culprit (red circle) is the MacDonald's Big Breakfast range, accounting for a whooping 185% of Cholesterol (% Daily value).\n\nFurther down from larger red plots, there are a greater number of yellow circular plots which can be attributed to items such as the Egg\/Sausage McMuffin range contributing to nearly a day's worth of Cholesterol.\n\nMost Cholesterol-laden item : Big Breakfast (Large Biscuit)\n"}}