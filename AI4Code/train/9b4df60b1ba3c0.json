{"cell_type":{"c4f56e19":"code","c2f384cc":"code","af55a48d":"code","87aadf2a":"code","93ca49ec":"code","9cb4d52d":"code","56696ea0":"code","129d0ea3":"code","2a4ecf46":"code","d22a08f3":"code","514d9ba8":"code","b52e5c13":"code","b76e4acb":"code","36f94643":"code","5cffce80":"code","0131c8e5":"code","ade0f360":"code","4e2bb926":"code","8c3055a9":"code","a388c691":"code","38c1b7e9":"code","d66abfaf":"code","fa5f7ddb":"code","9dae50f7":"code","39b5f1fb":"code","0f3fac34":"code","19fdf128":"code","de99db0e":"code","347802bb":"code","7a107249":"code","588ebca6":"code","b38b8500":"code","2d672b88":"code","5dcf9335":"code","97e842fc":"code","d895848c":"code","119bb734":"code","7cd3c0eb":"code","075eb4b7":"code","401ca5b7":"code","37f60faf":"code","031c05c3":"code","7b4230c0":"code","8acd036b":"code","8a52682a":"code","559119f1":"code","e35bc680":"code","c66fc220":"code","f79474fe":"code","82d2b5c9":"code","0c663edf":"code","5207424e":"code","e137893e":"code","cd06a6e5":"code","c20b7d9d":"code","3d148017":"code","55b6b0d1":"code","67c18d38":"code","ba98ad4a":"code","ceefe43f":"code","56e501e0":"code","2f6a9c4a":"code","2b4cbfb9":"code","2bc7fb4b":"code","0bcf24f2":"code","acbf61a3":"code","c2bdbb0c":"code","05f107f8":"code","99646729":"code","868a572e":"code","1d4249ae":"code","de1e0ab7":"code","328a08f4":"code","03957525":"code","5163ff90":"code","78aac4d3":"code","8449ec48":"code","e682894b":"code","6fc3e04c":"code","8f3ac99c":"code","b6590abc":"code","1e10549e":"code","48cbf9a3":"code","56f13e00":"code","873a9e1a":"code","80afd77b":"code","f8193a50":"code","12e628b6":"code","be27ea25":"code","852f879b":"markdown","8c6e9780":"markdown","a8d77d15":"markdown","4047aa1f":"markdown","34833dfc":"markdown","e12e9a63":"markdown","f2595ce2":"markdown","70aa0f5e":"markdown","e2d99411":"markdown","bc779a7f":"markdown","98f04cef":"markdown","b0e4d62f":"markdown","72351c07":"markdown","2a8af659":"markdown","9ab58676":"markdown","4b828c07":"markdown","91388c08":"markdown","9ed6486c":"markdown","213de3b7":"markdown","ff7436fd":"markdown","efc60da3":"markdown","d732f03a":"markdown","02d5831f":"markdown","08dc1c7b":"markdown","66f91e08":"markdown","086f1dae":"markdown","9a70de8c":"markdown","e09af185":"markdown","fa19d12d":"markdown","424c834e":"markdown","b7bf24f7":"markdown","96d886d5":"markdown","c6d93a61":"markdown","4fdfd11d":"markdown","b1d3fae5":"markdown","0ec7d25b":"markdown","d320516a":"markdown","b401eb59":"markdown","3fb52c9d":"markdown","2e53a7dd":"markdown","a0881c75":"markdown","bb0779c3":"markdown","2e05f8b5":"markdown","309a3c23":"markdown","97548817":"markdown","115d210e":"markdown","e39ddfcc":"markdown","4f24f5f6":"markdown","a93ff692":"markdown","65a58a7b":"markdown","327b4da7":"markdown"},"source":{"c4f56e19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2f384cc":"# \uae00\uc528\uccb4 \uc870\uc815\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nimport seaborn as sns\n%matplotlib inline\nrc('font', family='AppleGothic')\n\nplt.rcParams['axes.unicode_minus'] = False","af55a48d":"#\ub77c\uc774\ube0c\ub7ec\ub9ac \ud638\ucd9c\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport calendar\nfrom scipy import stats\nfrom datetime import datetime","87aadf2a":"train = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv', parse_dates=['datetime'])\ntrain.shape","93ca49ec":"test = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv', parse_dates=['datetime'])\ntest.shape","9cb4d52d":"import missingno as msno\nmsno.matrix(train, figsize=(10,5))","56696ea0":"train[\"year\"] = train.datetime.dt.year\ntrain[\"month\"] = train.datetime.dt.month\ntrain[\"day\"] = train.datetime.dt.day\ntrain[\"hour\"] = train.datetime.dt.hour\ntrain[\"minute\"] = train.datetime.dt.minute\ntrain[\"dayofweek\"] = train.datetime.dt.dayofweek\n\ntrain.shape","129d0ea3":"test[\"year\"] = test.datetime.dt.year\ntest[\"month\"] = test.datetime.dt.month\ntest[\"day\"] = test.datetime.dt.day\ntest[\"hour\"] = test.datetime.dt.hour\ntest[\"minute\"] = test.datetime.dt.minute\ntest[\"dayofweek\"] = test.datetime.dt.dayofweek\n\ntest.shape","2a4ecf46":"def concate_year_month(datetime):\n    return \"{0}-{1}\".format(datetime.year, datetime.month)\n\ntrain[\"year_month\"] = train[\"datetime\"].apply(concate_year_month)\ntest[\"year_month\"] = test[\"datetime\"].apply(concate_year_month)","d22a08f3":"print(train.head())\ntrain.info()","514d9ba8":"print(train.registered.head())\nprint(train.casual.head())\nprint(train['count'].head())","b52e5c13":"# \ubaa9\uc801 \ub370\uc774\ud130(count) \ud0d0\uc0c9\nsns.boxplot(data=train, y='count', orient='v')","b76e4acb":"#outlier \ud0d0\uc0c9 \n# outlier = n_i \uac12\uacfc \ud3c9\uade0\uac00\uc758 \ucc28\uc774\uac00 3*(\ud45c\uc900\ud3b8\ucc28)\ucd08\uacfc\uc778 \uac12\n\ntrain_without_liers = train[np.abs(train['count'] - train['count'].mean()) <= (3*train['count'].std())]\nprint(train.shape)\nprint(train_without_liers.shape)","36f94643":"#\uc5f0\ub3c4\ubcc4, \uc6d4\ubcc4, \uc77c\uc790\ubcc4, \uc2dc\uac04\ubcc4 \uc2dc\uac01\ud654\nfigure, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)\nfigure.set_size_inches(18,12)\n\nsns.barplot(data=train, x='year', y='count', ax=ax1)\nsns.barplot(data=train, x='month', y='count', ax=ax2)\nsns.barplot(data=train, x='day', y='count', ax=ax3)\nsns.barplot(data=train, x='hour', y='count', ax=ax4)\n\nax1.set(ylabel='count', title='count of year')\nax2.set(ylabel='count', title='count of month')\nax3.set(ylabel='count', title='count of day')\nax4.set(ylabel='count', title='count of hour')","5cffce80":"fig, ax = plt.subplots(nrows=1)\nfig.set_size_inches(18,4)\n\nsns.barplot(data=train, x='year_month', y='count', ax=ax)","0131c8e5":"#\uacc4\uc808, \ud734\uc77c\uc5ec\ubd80, \ud3c9\uc77c, \ub0a0\uc528\nfig, ((ax1, ax2),(ax3, ax4)) = plt.subplots(nrows=2, ncols=2)\nfig.set_size_inches(18, 12)\n\nsns.barplot(data=train, x='season', y='count', ax=ax1)\nsns.barplot(data=train, x='holiday', y='count', ax=ax2)\nsns.barplot(data=train, x='workingday', y='count', ax=ax3)\nsns.barplot(data=train, x='weather', y='count',ax=ax4)","ade0f360":"bad_weather = train[train['weather']==4]\nbad_weather.head()","4e2bb926":"train[(train['year']==2012) & (train['month'] == 1) & (train['day']== 9) ]","8c3055a9":"train.dayofweek.value_counts()","a388c691":"sns.barplot(data=train, x='dayofweek', y='count')","38c1b7e9":"fig, ((ax1, ax2),(ax3, ax4)) = plt.subplots(nrows=2, ncols=2)\nfig.set_size_inches(12,10)\n\nsns.lineplot(data=train, x='temp', y='count', ax=ax1)\nsns.lineplot(data=train, x='atemp', y='count', ax=ax2)\nsns.lineplot(data=train, x='humidity', y='count', ax=ax3)\nsns.lineplot(data=train, x='windspeed', y='count', ax=ax4)","d66abfaf":"fig, axes = plt.subplots(nrows=2)\nfig.set_size_inches(19,10)\n\nplt.sca(axes[0])\nplt.xticks(rotation=30, ha='right')\naxes[0].set(ylabel='count', title='train windspeed')\nsns.countplot(data=train, x='windspeed', ax=axes[0])\n\nplt.sca(axes[1])\nplt.xticks(rotation=30, ha='right')\naxes[1].set(ylabel='count', title='test windspeed')\nsns.countplot(data=test, x='windspeed', ax=axes[1])","fa5f7ddb":"#train \ubc0f test \ub370\uc774\ud130 \ubaa8\ub450 \ubcc0\uacbd\ndef to_right_season(month):\n  if month in [3, 4, 5]:\n    return 1\n  elif month in [6,7,8] :\n    return 2\n  elif month in [9,10, 11]:\n    return 3\n  else : return 4\n\ntrain['season'] = train.month.apply(to_right_season)\ntest['season'] = test.month.apply(to_right_season)","9dae50f7":"fig, ax = plt.subplots(1,1)\nfig.set_size_inches(18,5)\nsns.barplot(data=train, x='season', y='count', ax=ax)\n","39b5f1fb":"# \ud48d\uc18d\uc774 0\uc778 \uac12\uc5d0 \ub300\ud574 \ud655\uc778\ntrain_wind0 = train[train['windspeed']==0]\ntrain_wind0","0f3fac34":"# randomforest\nfrom sklearn.ensemble import RandomForestClassifier\n\ndef predict_wind(data):\n    \n    #windspeed\uac00 0\uc778 \uac12\uacfc \uc544\ub2cc \uac12 \uad6c\ubd84\n    data_wind0 = data.loc[data['windspeed']==0]\n    data_windnot0 = data.loc[data['windspeed']!=0]\n    \n    #\uc608\uce21\ud560 \ub54c \uc0ac\uc6a9\ud560 feature = \uceec\ub7fc\ub4e4 (\uc5f0\ub3c4\uc640 \ub0a0\uc9dc\ub294 \uc0c1\uad00\uc774 \uc5c6\uc744 \uac83\uc73c\ub85c \uc608\uce21(1\ub144 \uc0ac\uc774\uc758 \uc77c\uc774\uae30 \ub54c\ubb38))\n    wCol = ['season', 'weather', 'humidity', 'month', 'temp', 'atemp']\n    \n    #\ubb38\uc790\uc5f4\ub85c \ubcc0\ud658 (\ubd84\ub958\ub97c \ud65c\uc6a9\ud558\uae30\uc5d0)\n    data_windnot0[\"windspeed\"] = data_windnot0['windspeed'].astype('str')\n    \n    \n    # \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 \ubd84\ub958\uae30\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n    rfModel_wind = RandomForestClassifier()\n\n    # wCol\uc5d0 \uc788\ub294 \ud53c\ucc98\uc758 \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c \ud48d\uc18d\uc744 \ud559\uc2b5\uc2dc\ud0a8\ub2e4.\n    rfModel_wind.fit(data_windnot0[wCol], data_windnot0[\"windspeed\"])\n\n    # \ud559\uc2b5\ud55c \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c \ud48d\uc18d\uc774 0\uc73c\ub85c \uae30\ub85d\ub41c \ub370\uc774\ud130\uc758 \ud48d\uc18d\uc744 \uc608\uce21\ud55c\ub2e4.\n    wind0Values = rfModel_wind.predict(X = data_wind0[wCol])\n\n    # \uac12\uc744 \ub2e4 \uc608\uce21 \ud6c4 \ube44\uad50\ud574 \ubcf4\uae30 \uc704\ud574\n    # \uc608\uce21\ud55c \uac12\uc744 \ub123\uc5b4 \uc904 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uc0c8\ub85c \ub9cc\ub4e0\ub2e4.\n    predictWind0 = data_wind0\n    predictWindNot0 = data_windnot0\n    \n    #\uc608\uce21\ud55c \uac12\uc744 \ud48d\uc18d 0\uc778 \ub370\uc774\ud130\uc5d0 \ucde8\ud569\n    predictWind0[\"windspeed\"] = wind0Values\n    \n    #0\uc778 \ub370\uc774\ud130\uc640 \uc544\ub2cc \ub370\uc774\ud130 \ucde8\ud569\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \uc0dd\uc131\n    data_rand = predictWindNot0.append(predictWind0)\n    \n    #\uc2e4\uc218 \ud615\ud0dc\ub85c \n    data_rand['windspeed'] = data_rand['windspeed'].astype('float')\n    \n    data_rand.reset_index(inplace=True)\n    data_rand.drop('index', inplace=True, axis=1)\n    \n    return data_rand\n    ","19fdf128":"train_rand = predict_wind(train)\n\nfig, ax1=  plt.subplots()\nfig.set_size_inches(19, 10)\n\nplt.sca(ax1)\nplt.xticks(rotation=30, ha = 'right')\nax1.set(ylabel = 'count' , title = 'train wind speed')\nsns.countplot(data=train_rand, x='windspeed', ax=ax1)","de99db0e":"#train_mean\ndef wind_mean(train):\n    wind_mean1 = train\n    for i in (train[train['windspeed']==0]).index:\n        if (i>0):\n            if (((train.loc[i-1, 'windspeed'] + train.loc[i+1,'windspeed'])\/2) > 1) :\n                wind_mean1.loc[i,'windspeed'] = (train.loc[i-1, 'windspeed'] + train.loc[i+1,'windspeed'])\/2\n    return wind_mean1","347802bb":"train_mean = wind_mean(train)","7a107249":"fig, ax1=  plt.subplots()\nfig.set_size_inches(19, 10)\n\nplt.sca(ax1)\nplt.xticks(rotation=30, ha = 'right')\nax1.set(ylabel = 'count' , title = 'train wind speed')\nsns.countplot(data=train_mean, x='windspeed', ax=ax1)","588ebca6":"# train_rmean\ndef rmean(data):\n    #\ud48d\uc18d\uc774 0\uc778 \ub370\uc774\ud130\uc640 \uc544\ub2cc \ub370\uc774\ud130 \ubd84\ub9ac\n    wind0 = (data[data['windspeed']==0]).index\n    for i in wind0 :\n        if ((i-1, i+1) in wind0) :\n            data.loc[i,'windspeed'] = train_rand.loc[i, 'windspeed']\n        else:\n            data.loc[i,'windspeed'] = train_mean.loc[i, 'windspeed']\n    return data","b38b8500":"train_rmean = rmean(train)","2d672b88":"fig, ax1=  plt.subplots()\nfig.set_size_inches(19, 10)\n\nplt.sca(ax1)\nplt.xticks(rotation=30, ha = 'right')\nax1.set(ylabel = 'count' , title = 'train wind speed')\nsns.countplot(data=train_rmean, x='windspeed', ax=ax1)","5dcf9335":"# \uc218\uce58\ud615 (randomforest)\nfig, ((ax1, ax2),(ax3, ax4)) = plt.subplots(nrows=2, ncols=2)\nfig.set_size_inches(12,10)\n\nsns.lineplot(data=train_rand, x='temp', y='count', ax=ax1)\nsns.lineplot(data=train_rand, x='atemp', y='count', ax=ax2)\nsns.lineplot(data=train_rand, x='humidity', y='count', ax=ax3)\nsns.lineplot(data=train_rand, x='windspeed', y='count', ax=ax4)","97e842fc":"#mean\nfig, ((ax1, ax2),(ax3, ax4)) = plt.subplots(nrows=2, ncols=2)\nfig.set_size_inches(12,10)\n\nsns.lineplot(data=train_mean, x='temp', y='count', ax=ax1)\nsns.lineplot(data=train_mean, x='atemp', y='count', ax=ax2)\nsns.lineplot(data=train_mean, x='humidity', y='count', ax=ax3)\nsns.lineplot(data=train_mean, x='windspeed', y='count', ax=ax4)","d895848c":"#rand+mean\nfig, ((ax1, ax2),(ax3, ax4)) = plt.subplots(nrows=2, ncols=2)\nfig.set_size_inches(12,10)\n\nsns.lineplot(data=train_rmean, x='temp', y='count', ax=ax1)\nsns.lineplot(data=train_rmean, x='atemp', y='count', ax=ax2)\nsns.lineplot(data=train_rmean, x='humidity', y='count', ax=ax3)\nsns.lineplot(data=train_rmean, x='windspeed', y='count', ax=ax4)","119bb734":"# categorical data\nfig, axes = plt.subplots(nrows=2,ncols=2)\nfig.set_size_inches(12, 10)\nsns.boxplot(data=train,y=\"count\",orient=\"v\",ax=axes[0][0])\nsns.boxplot(data=train,y=\"count\",x=\"season\",orient=\"v\",ax=axes[0][1])\nsns.boxplot(data=train,y=\"count\",x=\"hour\",orient=\"v\",ax=axes[1][0])\nsns.boxplot(data=train,y=\"count\",x=\"workingday\",orient=\"v\",ax=axes[1][1])\n\naxes[0][0].set(ylabel='Count',title=\"\ub300\uc5ec\ub7c9\")\naxes[0][1].set(xlabel='Season', ylabel='Count',title=\"\uacc4\uc808\ubcc4 \ub300\uc5ec\ub7c9\")\naxes[1][0].set(xlabel='Hour Of The Day', ylabel='Count',title=\"\uc2dc\uac04\ubcc4 \ub300\uc5ec\ub7c9\")\naxes[1][1].set(xlabel='Working Day', ylabel='Count',title=\"\uadfc\ubb34\uc77c \uc5ec\ubd80\uc5d0 \ub530\ub978 \ub300\uc5ec\ub7c9\")","7cd3c0eb":"#\uc735\ud569\ud615 - \uc2dc\uac01\ud654\nfig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(nrows=5)\nfig.set_size_inches(18,25)\n\nsns.pointplot(data=train, x= \"hour\" , y = \"count\" , ax= ax1)\nsns.pointplot(data=train, x= \"hour\", y=\"count\", hue=\"workingday\", ax=ax2)\nsns.pointplot(data=train, x=\"hour\", y=\"count\", hue=\"dayofweek\", ax=ax3)\nsns.pointplot(data=train, x=\"hour\", y=\"count\", hue= \"weather\", ax=ax4)\nsns.pointplot(data=train, x=\"hour\", y= \"count\", hue=\"season\", ax=ax5)","075eb4b7":"# \uc0c1\uad00\uacc4\uc218 \ud655\uc778(\uc218\uce58\ud615-\uc6d0\ubcf8 \ub370\uc774\ud130)\ncorrMatt= train[[\"temp\", \"atemp\", \"casual\", \"registered\", \"humidity\", \"windspeed\", \"count\"]]\ncorrMatt = corrMatt.corr()\nprint(corrMatt)\n\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\n\nfig, ax = plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corrMatt, mask=mask,vmax=.8, square=True,annot=True)","401ca5b7":"# \uc0c1\uad00\uacc4\uc218 \ud655\uc778(\uc218\uce58\ud615-randomforest)\ncorrMatt= train_rand[[\"temp\", \"atemp\", \"casual\", \"registered\", \"humidity\", \"windspeed\", \"count\"]]\ncorrMatt = corrMatt.corr()\nprint(corrMatt)\n\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\n\nfig, ax = plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corrMatt, mask=mask,vmax=.8, square=True,annot=True)","37f60faf":"# \uc0c1\uad00\uacc4\uc218 \ud655\uc778(\uc218\uce58\ud615-mean)\ncorrMatt= train_mean[[\"temp\", \"atemp\", \"casual\", \"registered\", \"humidity\", \"windspeed\", \"count\"]]\ncorrMatt = corrMatt.corr()\nprint(corrMatt)\n\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\n\nfig, ax = plt.subplots()\nfig.set_size_inches(20,10)\nsns.heatmap(corrMatt, mask=mask,vmax=.8, square=True,annot=True)","031c05c3":"fig,(ax1,ax2,ax3) = plt.subplots(ncols=3)\nfig.set_size_inches(12, 5)\nsns.regplot(x=\"temp\", y=\"count\", data=train,ax=ax1)\nsns.regplot(x=\"windspeed\", y=\"count\", data=train,ax=ax2)\nsns.regplot(x=\"humidity\", y=\"count\", data=train,ax=ax3)","7b4230c0":"fig,(ax1,ax2,ax3) = plt.subplots(ncols=3)\nfig.set_size_inches(12, 5)\nsns.regplot(x=\"windspeed\", y=\"count\", data=train_rand,ax=ax1)\nsns.regplot(x=\"windspeed\", y=\"count\", data=train_mean,ax=ax2)\nsns.regplot(x=\"windspeed\", y=\"count\", data=train_rmean,ax=ax3)","8acd036b":"# count \uac12\uc758 \ub370\uc774\ud130 \ubd84\ud3ec\ub3c4\ub97c \ud30c\uc545\n\nfigure, axes = plt.subplots(ncols=2, nrows=2)\nfigure.set_size_inches(12, 10)\n\nsns.distplot(train[\"count\"], ax=axes[0][0])\nstats.probplot(train[\"count\"], dist='norm', fit=True, plot=axes[0][1])\nsns.distplot(np.log(train_without_liers[\"count\"]), ax=axes[1][0])\nstats.probplot(np.log1p(train_without_liers[\"count\"]), dist='norm', fit=True, plot=axes[1][1])","8a52682a":"# \ubc94\uc8fc\ud615 \ubcc0\uc218\uc5d0 \ub300\ud574 categorical \ubcc0\uc218\ub85c \ubcc0\uacbd\ncategorical_val = ['season', 'holiday', 'workingday', 'weather','dayofweek','month','year','hour']\n\nfor var in categorical_val:\n    train[var] = train[var].astype('category')\n    test[var] = test[var].astype('category')\n    train_rand[var] = train_rand[var].astype('category')\n    train_mean[var] = train_mean[var].astype('category')","559119f1":"feature = ['season','weather','temp','atemp','humidity','windspeed',\n          'year','hour','dayofweek','holiday','workingday']\nfeature","e35bc680":"X_train = train[feature]\nX_train_rand = train_rand[feature]\nX_train_mean = train_mean[feature]","c66fc220":"label_name = 'count'\ny_train = train[label_name]\ny_train_rand = train_rand[label_name]\ny_train_mean = train_mean[label_name]","f79474fe":"X_test = test[feature]\nX_test_rand = test[feature]\nX_test_mean = test[feature]","82d2b5c9":"from sklearn.metrics import make_scorer\n\ndef rmsle(predicted_values, actual_values):\n    # \ub118\ud30c\uc774\ub85c \ubc30\uc5f4 \ud615\ud0dc\ub85c \ubc14\uafd4\uc900\ub2e4.\n    predicted_values = np.array(predicted_values)\n    actual_values = np.array(actual_values)\n\n    # \uc608\uce21\uac12\uacfc \uc2e4\uc81c \uac12\uc5d0 1\uc744 \ub354\ud558\uace0 \ub85c\uadf8\ub97c \uc50c\uc6cc\uc900\ub2e4.\n    log_predict = np.log(predicted_values + 1)\n    log_actual = np.log(actual_values + 1)\n\n    # \uc704\uc5d0\uc11c \uacc4\uc0b0\ud55c \uc608\uce21\uac12\uc5d0\uc11c \uc2e4\uc81c\uac12\uc744 \ube7c\uc8fc\uace0 \uc81c\uacf1\uc744 \ud574\uc900\ub2e4.\n    difference = log_predict - log_actual\n    # difference = (log_predict - log_actual) ** 2\n    difference = np.square(difference)\n\n    # \ud3c9\uade0\uc744 \ub0b8\ub2e4.\n    mean_difference = difference.mean()\n\n    # \ub2e4\uc2dc \ub8e8\ud2b8\ub97c \uc50c\uc6b4\ub2e4.\n    score = np.sqrt(mean_difference)\n\n    return score\n\nrmsle_scorer = make_scorer(rmsle)\nrmsle_scorer","0c663edf":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","5207424e":"from sklearn.ensemble import RandomForestRegressor\n\nmax_depth_list = []\n\nmodel = RandomForestRegressor(n_estimators=100,\n                              n_jobs=-1,\n                              random_state=0)\n\nmodel_rand = RandomForestRegressor(n_estimators=100,\n                              n_jobs=-1,\n                              random_state=0)\n\nmodel_mean = RandomForestRegressor(n_estimators=100,\n                              n_jobs=-1,\n                              random_state=0)\n\n\nmodel","e137893e":"%time score = cross_val_score(model, X_train, y_train, cv=k_fold, scoring=rmsle_scorer)\nscore = score.mean()\n\nprint(\"Score = {0:.5f}\".format(score))","cd06a6e5":"%time score = cross_val_score(model_rand, X_train_rand, y_train_rand, cv=k_fold, scoring=rmsle_scorer)\nscore = score.mean()\n\nprint(\"Score = {0:.5f}\".format(score))","c20b7d9d":"%time score = cross_val_score(model_mean, X_train_mean, y_train_mean, cv=k_fold, scoring=rmsle_scorer)\nscore = score.mean()\n\nprint(\"Score = {0:.5f}\".format(score))","3d148017":"model.fit(X_train, y_train)","55b6b0d1":"model_rand.fit(X_train_rand, y_train_rand)","67c18d38":"model_mean.fit(X_train_mean, y_train_mean)","ba98ad4a":"# \uc608\uce21 - train\npredictions = model.predict(X_test)\nprint(predictions.shape)\npredictions[0:10]","ceefe43f":"# \uc608\uce21 - rand\npredictions_rand = model_rand.predict(X_test_rand)\nprint(predictions_rand.shape)\npredictions_rand[0:10]","56e501e0":"# \uc608\uce21 - mean\npredictions_mean = model_mean.predict(X_test_mean)\nprint(predictions_mean.shape)\npredictions_mean[0:10]","2f6a9c4a":"# \uc608\uce21\ud55c \ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654 \ud574\ubcf8\ub2e4. \nfig,(ax1,ax2)= plt.subplots(ncols=2)\nfig.set_size_inches(12,5)\nsns.distplot(y_train,ax=ax1,bins=50)\nax1.set(title=\"train\")\nsns.distplot(predictions,ax=ax2,bins=50)\nax2.set(title=\"test\")","2b4cbfb9":"# \uc608\uce21\ud55c \ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654 \ud574\ubcf8\ub2e4. \nfig,(ax1,ax2)= plt.subplots(ncols=2)\nfig.set_size_inches(12,5)\nsns.distplot(y_train_rand,ax=ax1,bins=50)\nax1.set(title=\"train\")\nsns.distplot(predictions,ax=ax2,bins=50)\nax2.set(title=\"test\")","2bc7fb4b":"# \uc608\uce21\ud55c \ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654 \ud574\ubcf8\ub2e4. \nfig,(ax1,ax2)= plt.subplots(ncols=2)\nfig.set_size_inches(12,5)\nsns.distplot(y_train_mean,ax=ax1,bins=50)\nax1.set(title=\"train\")\nsns.distplot(predictions,ax=ax2,bins=50)\nax2.set(title=\"test\")","0bcf24f2":"# train dataset \ucd08\uae30\ud654\ntrain = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv', parse_dates=['datetime'])\ntrain.shape","acbf61a3":"test = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv', parse_dates=['datetime'])\ntest.shape","c2bdbb0c":"train[\"year\"] = train[\"datetime\"].dt.year\ntrain[\"month\"] = train[\"datetime\"].dt.month\ntrain[\"hour\"] = train[\"datetime\"].dt.hour\ntrain[\"dayofweek\"] = train[\"datetime\"].dt.dayofweek\ntrain.shape","05f107f8":"test[\"year\"] = test[\"datetime\"].dt.year\ntest[\"month\"] = test[\"datetime\"].dt.month\ntest[\"hour\"] = test[\"datetime\"].dt.hour\ntest[\"dayofweek\"] = test[\"datetime\"].dt.dayofweek\ntest.shape","99646729":"train['season'] = train.month.apply(to_right_season)\ntest['season'] = test.month.apply(to_right_season)","868a572e":"categorical_feature_names = [\"season\",\"holiday\",\"workingday\",\"weather\",\n                             \"dayofweek\",\"month\",\"year\",\"hour\"]","1d4249ae":"for var in categorical_feature_names:\n    train[var] = train[var].astype(\"category\")\n    train_rand[var] = train_rand[var].astype('category')\n    test[var] = test[var].astype(\"category\")","de1e0ab7":"feature_names = [\"season\", \"weather\", \"temp\", \"atemp\", \"humidity\",\n                 \"year\", \"hour\", \"dayofweek\", \"holiday\", \"workingday\"\n                ]\n\nfeature_names","328a08f4":"X_train = train[feature_names]\nprint(X_train.shape)\nX_train.head()","03957525":"X_test = test[feature_names]\n\nprint(X_test.shape)\nX_test.head()","5163ff90":"label_name = \"count\"\n\ny_train = train[label_name]\n\nprint(y_train.shape)\ny_train.head()","78aac4d3":"from sklearn.metrics import make_scorer\n\ndef rmsle(predicted_values, actual_values, convertExp=True):\n\n    if convertExp:\n        predicted_values = np.exp(predicted_values),\n        actual_values = np.exp(actual_values)\n\n    # \ub118\ud30c\uc774\ub85c \ubc30\uc5f4 \ud615\ud0dc\ub85c \ubc14\uafd4\uc900\ub2e4.\n    predicted_values = np.array(predicted_values)\n    actual_values = np.array(actual_values)\n\n    # \uc608\uce21\uac12\uacfc \uc2e4\uc81c \uac12\uc5d0 1\uc744 \ub354\ud558\uace0 \ub85c\uadf8\ub97c \uc50c\uc6cc\uc900\ub2e4.\n    log_predict = np.log(predicted_values + 1)\n    log_actual = np.log(actual_values + 1)\n\n    # \uc704\uc5d0\uc11c \uacc4\uc0b0\ud55c \uc608\uce21\uac12\uc5d0\uc11c \uc2e4\uc81c\uac12\uc744 \ube7c\uc8fc\uace0 \uc81c\uacf1\uc744 \ud574\uc900\ub2e4.\n    difference = log_predict - log_actual\n    difference = np.square(difference)\n\n    # \ud3c9\uade0\uc744 \ub0b8\ub2e4.\n    mean_difference = difference.mean()\n\n    # \ub2e4\uc2dc \ub8e8\ud2b8\ub97c \uc50c\uc6b4\ub2e4.\n    score = np.sqrt(mean_difference)\n\n    return score","8449ec48":"from sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\nimport warnings\npd.options.mode.chained_assignment = None\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\n# \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\uc744 \ucd08\uae30\ud654\nlModel = LinearRegression()\n\n# \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a8\ub2e4.\n\"\"\"\n\uc544\ub798\uc758 \ucee4\ub110\uc744 \ucc38\uc870\ud558\uc5ec yLabels\ub97c \ub85c\uadf8\ud654 \ud558\ub824\ub294\ub370 \uc65c np.log\uac00 \uc544\ub2cc np.log1p\ub97c \ud65c\uc6a9\ud558\ub294\uac00??\nnp.log1p\ub294 np.log(1+x)\uc640 \ub3d9\uc77c. \uc774\uc720\ub294 \ub9cc\uc57d \uc5b4\ub5a4 x\uac12\uc774 0\uc778\ub370 \uc774\ub97c log\ud558\uac8c\ub418\uba74, (-)\ubb34\ud55c\ub300\ub85c \uc218\ub834\ud558\uae30 \ub54c\ubb38\uc5d0 np.log1p\ub97c \ud65c\uc6a9\ud568. \n\ucc38\uc870: https:\/\/ko.wikipedia.org\/wiki\/%EB%A1%9C%EA%B7%B8 \n\"\"\"\ny_train_log = np.log1p(y_train)\nlModel.fit(X_train, y_train_log)\n\n# \uc608\uce21\ud558\uace0 \uc815\ud655\ub3c4\ub97c \ud3c9\uac00\ud55c\ub2e4.\npreds = lModel.predict(X_train)\nprint (\"RMSLE Value For Linear Regression: \",\n       rmsle(np.exp(y_train_log),np.exp(preds), False))","e682894b":"#Ridge\ubaa8\ub378\uc740 L2\uc81c\uc57d\uc744 \uac00\uc9c0\ub294 \uc120\ud615\ud68c\uadc0\ubaa8\ub378\uc5d0\uc11c \uac1c\uc120\ub41c \ubaa8\ub378\uc774\uba70 \ud574\ub2f9 \ubaa8\ub378\uc5d0\uc11c \uc720\uc758 \uae4a\uac8c \ud29c\ub2dd\ud574\uc57c\ud558\ub294 \ud30c\ub77c\ubbf8\ud130\ub294 alpha\uac12\uc774\ub2e4.\nridge_m_ = Ridge()\n#\uc6b0\ub9ac\uac00 \ud29c\ub2dd\ud558\uace0\uc790\ud558\ub294 Ridge\uc758 \ud30c\ub77c\ubbf8\ud130 \uc911 \ud2b9\uc815 \ud30c\ub77c\ubbf8\ud130\uc5d0 \ubc30\uc5f4 \uac12\uc73c\ub85c \ub118\uaca8\uc8fc\uac8c \ub418\uba74 \ud14c\uc2a4\ud2b8 \ud6c4 \uc5b4\ub5a4 \ud30c\ub77c\ubbf8\ud130\uac00 \ucd5c\uc801\uc758 \uac12\uc778\uc9c0 \uc54c\ub824\uc90c \nridge_params_ = { 'max_iter':[3000],'alpha':[0.01, 0.1, 1, 2, 3, 4, 10, 30,100,200,300,400,800,900,1000]}\nrmsle_scorer = metrics.make_scorer(rmsle, greater_is_better=False)\ngrid_ridge_m = GridSearchCV( ridge_m_,\n                          ridge_params_,\n                          scoring = rmsle_scorer,\n                          cv=5)\n\ny_train_log = np.log1p(y_train)\ngrid_ridge_m.fit( X_train, y_train_log )\npreds = grid_ridge_m.predict(X_train)\nprint (grid_ridge_m.best_params_)\nprint (\"RMSLE Value For Ridge Regression: \", rmsle(np.exp(y_train_log),np.exp(preds), False))\n\nfig,ax= plt.subplots()\nfig.set_size_inches(12,5)\ndf = pd.DataFrame(grid_ridge_m.cv_results_)\ndf[\"alpha\"] = df[\"params\"].apply(lambda x:x[\"alpha\"])\ndf[\"rmsle\"] = df[\"mean_test_score\"].apply(lambda x:-x)\n\nplt.xticks(rotation=30, ha='right')\nsns.pointplot(data=df,x=\"alpha\",y=\"rmsle\",ax=ax)","6fc3e04c":"# #Ridge\ubaa8\ub378\uc740 L1\uc81c\uc57d\uc744 \uac00\uc9c0\ub294 \uc120\ud615\ud68c\uadc0\ubaa8\ub378\uc5d0\uc11c \uac1c\uc120\ub41c \ubaa8\ub378\uc774\uba70 \ud574\ub2f9 \ubaa8\ub378\uc5d0\uc11c \uc720\uc758 \uae4a\uac8c \ud29c\ub2dd\ud574\uc57c\ud558\ub294 \ud30c\ub77c\ubbf8\ud130\ub294 alpha\uac12\uc774\ub2e4.\n\nlasso_m = Lasso()\nalpha = 1\/np.array([0.1, 1, 2, 3, 4, 10, 30, 100, 200, 300, 400, 800, 900, 1000])\nlasso_params = { 'max_iter' : [3000], 'alpha' : alpha}\n\ngrid_lasso_m = GridSearchCV( lasso_m, lasso_params, scoring = rmsle_scorer, cv = 5)\ny_train_log = np.log1p(y_train)\ngrid_lasso_m.fit(X_train, y_train_log)\npreds = grid_lasso_m.predict(X_train)\nprint(grid_lasso_m.best_params_)\nprint('RMSLE Value For Lasso Regression : ', rmsle(np.exp(y_train_log), np.exp(preds), False))\n\nfig, ax = plt.subplots()\nfig.set_size_inches(12, 5)\ndf = pd.DataFrame(grid_lasso_m.cv_results_)\ndf[\"alpha\"] = df[\"params\"].apply(lambda x:x[\"alpha\"])\ndf['rmsle'] = df['mean_test_score'].apply(lambda x:-x)\n\nplt.xticks(rotation =30, ha = 'right')\nsns.pointplot(data=df, x='alpha', y='rmsle', ax= ax)","8f3ac99c":"from sklearn.ensemble import RandomForestRegressor\nrfModel = RandomForestRegressor(n_estimators=100)\n\ny_train_log = np.log1p(y_train)\nrfModel.fit(X_train, y_train_log)\n\npreds = rfModel.predict(X_train)\nscore = rmsle(np.exp(y_train_log), np.exp(preds), False)\nprint(\"RMSLE Value for Random Forest : \", score)","b6590abc":"from sklearn.ensemble import GradientBoostingRegressor\ngbm = GradientBoostingRegressor(n_estimators = 4000, alpha=0.01)\ny_train_log = np.log1p(y_train)\ngbm.fit(X_train, y_train_log)\n\npreds = gbm.predict(X_train)\nscore = rmsle(np.exp(y_train_log), np.exp(preds), False)\nprint(\"RMSLE Value For Gradient Boost : \" , score)\n","1e10549e":"from sklearn.ensemble import RandomForestRegressor\nrfModel = RandomForestRegressor(n_estimators=100)\n\ny_train_log = np.log1p(y_train)\nrfModel.fit(X_train, y_train_log)\n\npreds = rfModel.predict(X_train)\nscore = rmsle(np.exp(y_train_log), np.exp(preds), False)\nprint(\"RMSLE Value for Random Forest : \", score)","48cbf9a3":"preds_test = rfModel.predict(X_test)\nfig, (ax1, ax2) = plt.subplots(ncols=2)\nfig.set_size_inches(12, 6)\nsns.distplot(y_train, ax=ax1, bins=50)\nsns.distplot(np.exp(preds_test), ax=ax2, bins=50)","56f13e00":"submission = pd.read_csv('..\/input\/bike-sharing-demand\/sampleSubmission.csv')\nsubmission\n\nsubmission[\"count\"] = np.exp(preds_test)\n\nprint(submission.shape)\nsubmission.head()\n","873a9e1a":"#\uc81c\ucd9c \ud30c\uc77c \uc791\uc131\nsubmission.to_csv(\".\/Score_{0:.5f}_submission.csv\".format(score), index=False)","80afd77b":"from sklearn.ensemble import GradientBoostingRegressor\ngbm = GradientBoostingRegressor()\ngbm_params={'max_depth':range(1,11,1), 'n_estimators' : [1,10,100]}\ngrid_gbm=GridSearchCV(gbm, gbm_params, scoring=rmsle_scorer, cv=5)\n\ny_train_log = np.log1p(y_train)\ngrid_gbm.fit(X_train, y_train_log)\ngbm.fit(X_train, y_train_log)\n\npreds = gbm.predict(X_train)\nscore = rmsle(np.exp(y_train_log), np.exp(preds), False)\nprint(\"RMSLE Value For Gradient Boost : \" , score)\n\n","f8193a50":"from sklearn.ensemble import GradientBoostingRegressor\ngbm = GradientBoostingRegressor(n_estimators = 4000, alpha=0.01)\ny_train_log = np.log1p(y_train)\ngbm.fit(X_train, y_train_log)\n\npreds = gbm.predict(X_train)\nscore = rmsle(np.exp(y_train_log), np.exp(preds), False)\nprint(\"RMSLE Value For Gradient Boost : \" , score)","12e628b6":"# submission \uc81c\ucd9c\ud30c\uc77c \uc791\uc131\nsubmission = pd.read_csv('..\/input\/bike-sharing-demand\/sampleSubmission.csv')\n\nsubmission[\"count\"] = np.exp(preds_test)\n\nprint(submission.shape)\nsubmission.head()","be27ea25":"submission.to_csv(\".\/Score_{0:.5f}_submission.csv\".format(score), index=False)","852f879b":"* \uc608\uc0c1\uacfc \uac19\uc774 \ubd04, \uaca8\uc6b8\uc5d0 \uc0ac\uc6a9\ub960\uc774 \uc800\uc870\ud568","8c6e9780":"## \ud48d\uc18d \ub370\uc774\ud130 \ud0d0\uc0c9","a8d77d15":"# 4.3. \ub9bf\uc9c0 - Regularization Model - Ridge\n\n* \ud68c\uadc0\ub97c \uc704\ud55c \uc120\ud615\ubaa8\ub378\n* \uac00\uc911\uce58(w)\uc758 \ubaa8\ub4e0 \uc6d0\uc18c\uac00 0\uc5d0 \uac00\uae5d\uac8c \ub9cc\ub4e4\uc5b4 \ubaa8\ub4e0 \ud53c\ucc98\uac00 \uc8fc\ub294 \uc601\ud5a5\uc744 \ucd5c\uc18c\ud654(\uae30\uc6b8\uae30\ub97c \uc791\uac8c \ub9cc\ub4e6)\n* Regularization(\uaddc\uc81c)\uc740 \uc624\ubc84\ud53c\ud305(\uacfc\ub300\uc801\ud569)\uc774 \ub418\uc9c0 \uc54a\ub3c4\ub85d \ubaa8\ub378\uc744 \uac15\uc81c\ub85c \uc81c\ud55c\ud55c\ub2e4\ub294 \uc758\ubbf8\n* max_iter(\ubc18\ubcf5 \uc2e4\ud589\ud558\ub294 \ucd5c\ub300 \ud69f\uc218)\ub294 3000\uc744 \ub123\uc5b4\uc8fc\uc5c8\ub2e4.\n\n* GridSearchCV\ub97c \ud65c\uc6a9\ud558\uba74 \uc6b0\ub9ac\uac00 \uc774\uc6a9\ud558\uac8c \ub420 \uac01\uac01\uc758 \ubaa8\ub378\ub9c8\ub2e4 \ubcc0\uacbd\ud574\uc57c \ud558\ub294 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc2dc \uc5b4\ub5a4 \ud30c\ub77c\ubbf8\ud130\uac00 \ucd5c\uc801\uc758 \uac12\uc744 \ub0b4\ub294\uc9c0 \ub4f1\uc744 \uc54c \uc218 \uc788\uc74c.\n\n* GridSearchCV \ucc38\uc870:\n  * https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.GridSearchCV.html\n  * https:\/\/datascienceschool.net\/view-notebook\/ff4b5d491cc34f94aea04baca86fbef8\/","4047aa1f":"# Submission ","34833dfc":"* \uac70\uc758 \ubaa8\ub4e0 0\uc758 \uac12\uc774 \uc5f0\uc18d\ub41c \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc74c","e12e9a63":"* windspeed\uac00 0\uc778\uac12\uc740 \uc5f0\uc18d\uc801\uc778\uac83\uacfc \uc5f0\uc18d\uc801\uc774\uc9c0 \uc54a\uc740 \uac83\ub4e4\uc774 \uc11e\uc5ec \uc788\uc74c\n* \uc138\ubd80\uc801\uc73c\ub85c \ub2e4\uc74c \uc138\ud2b8\ub85c \ub098\ub214\n - train_rand = \ud48d\uc18d0\uc5d0 \ub300\ud574 randomforest\ub97c \ub3cc\ub824 \uc608\uce21\n - train_mean = \ud48d\uc18d\uc774 0\uc778 \ub370\uc774\ud130\uc758 \uc55e\ub4a4 \uac12\uc758 \ud3c9\uade0\n - train_rmean = \uc5f0\uc18d\ub418\ub294 \ud48d\uc18d0\uc740 randomforest \uac12, \uc5f0\uc18d\ub418\uc9c0 \uc54a\uc73c\uba74 \uc55e\ub4a4 \ud3c9\uade0","f2595ce2":"# 4.6. Ensemble Model - Gradient Boost\n\n* \uc5ec\ub7ec \uac1c\uc758 \uacb0\uc815 \ud2b8\ub9ac\ub97c \ubb36\uc5b4 \uac15\ub825\ud55c \ubaa8\ub378\uc744 \ub9cc\ub4dc\ub294 \ub610 \ub2e4\ub978 \uc559\uc0c1\ube14 \uae30\ubc95\n* \ud68c\uadc0\uc640 \ubd84\ub958\uc5d0 \ubaa8\ub450 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c\n* \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\uc640 \ub2ec\ub9ac \uc774\uc9c4 \ud2b8\ub9ac\uc758 \uc624\ucc28\ub97c \ubcf4\uc644\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc21c\ucc28\uc801\uc73c\ub85c \ud2b8\ub9ac\ub97c \ub9cc\ub4e0\ub2e4.\n* \ubb34\uc791\uc704\uc131\uc774 \uc5c6\uace0 \uac15\ub825\ud55c \uc0ac\uc804 \uac00\uc9c0\uce58\uae30\uac00 \uc0ac\uc6a9\ub428\n* 1~5\uac1c\uc758 \uae4a\uc9c0 \uc54a\uc740 \ud2b8\ub9ac\ub97c \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \uba54\ubaa8\ub9ac\ub97c \uc801\uac8c \uc0ac\uc6a9\ud558\uace0 \uc608\uce21\uc774 \ube60\ub984\n* learning_rate : \uc624\ucc28\ub97c \uc5bc\ub9c8\ub098 \uac15\ud558\uac8c \ubcf4\uc815\ud560 \uac83\uc778\uc9c0\ub97c \uc81c\uc5b4\n* n_estimator\uc758 \uac12\uc744 \ud0a4\uc6b0\uba74 \uc559\uc0c1\ube14\uc5d0 \ud2b8\ub9ac\uac00 \ub354 \ub9ce\uc774 \ucd94\uac00\ub418\uc5b4 \ubaa8\ub378\uc758 \ubcf5\uc7a1\ub3c4\uac00 \ucee4\uc9c0\uace0 \ud6c8\ub828 \uc138\ud2b8\uc5d0\uc11c\uc758 \uc2e4\uc218\ub97c \ubc14\ub85c\uc7a1\uc744 \uae30\ud68c\uac00 \ub9ce\uc544\uc9c0\uc9c0\ub9cc, \ub108\ubb34 \ud06c\uba74 \ubaa8\ub378\uc774 \ubcf5\uc7a1\ud574\uc9c0\uace0 \uc624\ubc84\ud53c\ud305(\uacfc\ub300\uc801\ud569)\uc774 \ub420 \uc218 \uc788\ub2e4.\n* maxdepth(maxleaf_nodes) \ubcf5\uc7a1\ub3c4\ub97c \ub108\ubb34 \ub192\uc774\uc9c0 \ub9d0\uace0 \ud2b8\ub9ac\uc758 \uae4a\uc774\uac00 5\ubcf4\ub2e4 \uae4a\uc5b4\uc9c0\uc9c0 \uc54a\uac8c \ud55c\ub2e4.\n","70aa0f5e":"# 4. \ubd84\uc11d","e2d99411":"## Feature Selection\n\n* \uc2e0\ud638\uc640 \uc7a1\uc74c\uc758 \uad6c\ubd84 \ud544\uc694\n* \uc5f0\uc18d\ud615 feature = ['temp', 'humidity', 'windspeed', 'atemp']\n* \ubc94\uc8fc\ud615 \ubcc0\uc218","bc779a7f":"## gradian","98f04cef":" * \ub2f9\uc77c\uc758 \ub0a0\uc528\uac00 \ub9e4\uc6b0 \uc548\uc88b\uc558\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc74c\n * \ucd94\uac00\uc801\uc73c\ub85c \ud48d\uc18d\uc774 0\uc778 \uc2dc\uac04 \uc55e\ub4a4\ub85c \ud48d\uc18d\uc774 \ucc28\uc774\uac00 \ud06c\uae30 \uc54a\ub2e4\ub294 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc74c.\n  - \ucc28\ud6c4 \ud48d\uc18d 0 \uc778 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ud6c4\ucc98\ub9ac \ud544\uc694\n  - 1. \uacc4\ud68d\uc0c1 randomforest\ub97c \ub3cc\ub824 \ud655\uc778\ud55c\ub2e4\n  - 2. \uc218\ud559\uc801\uc73c\ub85c \uba85\ud655\ud55c \ubc29\ubc95\uc744 \uc704\ud558\uc5ec \ud48d\uc18d\uc774 0\uc778 \uc2dc\uac04 \uc804\ud6c4\uac12\uc758 \ud3c9\uade0\uac12\uc73c\ub85c \uc218\uc815\ud55c \ub370\uc774\ud130 \uc138\ud2b8\ub3c4 \uc0b0\ucd9c\ud558\uc5ec \ube44\uad50\ud560 \ud544\uc694\uc131 \uc788\uc74c","b0e4d62f":"* \uac01 \uc804\ucc98\ub9ac \uac12\uc5d0 \ub530\ub77c \ud06c\uac8c \uc720\uc758\ubbf8\ud55c \ubcc0\ud654\ub294 \uc5c6\ub294 \uac83\uc73c\ub85c \ubcf4\uc784","72351c07":"* \uc5f0\ub3c4\ubcc4 \uc0ac\uc6a9\ub960\uc758 \uc99d\uac00\ub294 \ub69c\ub837\ud558\uba70, \uacc4\uc808\uc5d0 \ub530\ub77c \uc0ac\uc6a9\ub960\uc758 \ucc28\uc774\uac00 \uba85\ud655\ud568\uc744 \uc54c \uc218 \uc788\uc74c","2a8af659":"* \uc774\uc804 EDA\uc640 \uac19\uc774, \ucd9c\ud1f4\uadfc \uc2dc\uac04\uc5d0 \uc0ac\uc6a9\ube48\ub3c4\uac00 \uac00\uc7a5 \ub192\uace0, \ub0a0\uc528\uac00 \uc88b\uace0, \ud3c9\uc77c\uc77c\ub54c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","9ab58676":"## \uce74\ud14c\uace0\ub9ac \ub370\uc774\ud130 Categorical Data (Season, Holiday, Working Day, Weather)","4b828c07":"* \uacc4\uc808 \n  * 1 : 1,2,3\uc6d4 = Spring? \n  * \uacc4\uc808\uc5d0 \ub300\ud55c \ud0d0\uc0c9 \ud544\uc694\n  * \ubd04\uc5d0 \uc624\ud788\ub824 \uc0ac\uc6a9 \uc218\uac00 \uac00\uc7a5 \uc801\uc740\uac83\uc5d0 \ub300\ud55c \ubb38\uc81c, \uc218\uc815 \ud544\uc694\n\n* \ud3c9\uc77c\uc5d4 \uc624\ud788\ub824 \ub192\uace0 \uc8fc\ub9d0\uc5d4 \ub354 \uc26c\uc5b4\uc57c \ud558\uc9c0 \uc54a\ub294\uac00? (\uc9d1\ub3cc\uc774\uc758 \uc608\uc0c1)\n\n* \ub0a0\uc528\uac00 \uac00\uc7a5 \uc548\uc88b\uc744 \ub54c \ub354 \ub9ce\uc774 \ud0c4\ub2e4? \ud3b8\ucc28 \ubc14\uac00 \uc5c6\ub294 \uac83\uc73c\ub85c \ubcf4\uc544 \ud45c\ubcf8\uc218\uac00 \ub9e4\uc6b0 \uc801\uc744 \uac83\uc73c\ub85c \uc608\uc0c1 \ud655\uc778\ud544\uc694\n","91388c08":"# 3. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n * outlier \ucc98\ub9ac : \ube44\uc815\uc0c1\uc801\uc778\uac12(\ud3b8\ucc28 > 3*\ud45c\uc900\ud3b8\ucc28) \ud655\uc778 \ubc0f \ucc98\ub9ac\n * NA\/\uc774\uc0c1\uce58 \ucc98\ub9ac : \uc804\uccb4 \uc0ad\uc81c or \ud3c9\uade0 \ub300\uccb4 or \ub2e4\ub978 \ubc29\ubc95\ub860\uc744 \ud1b5\ud55c \uac12 \uc608\uce21","9ed6486c":"## \uc218\uce58\ud615 \ub370\uc774\ud130\ub4e4\uc5d0 \ub300\ud55c \uc2dc\uac01\ud654\n- \uc628\ub3c4 (temp)\n- \uccb4\uac10\uc628\ub3c4 (atemp)\n- \uc2b5\ub3c4 (humidity)\n- \ud48d\uc18d (windspeed)","213de3b7":"# 4. \ubd84\uc11d \uc804 EDA\n\n* Feature Selection\uc744 \uc704\ud55c EDA\n* \uac01 \ub370\uc774\ud130 \ubcc4 count\uc640 \uad00\ub828\uc131 \ud655\uc778\uc744 \uc704\ud55c \uc2dc\uac01\ud654","ff7436fd":" * \uc608\uc0c1\uacfc \uac19\uc774 \ub370\uc774\ud130\ub294 \ud558\ub098\ubc16\uc5d0 \uc5c6\uc74c\n  - \uc2b5\ub3c4\ub294 \ub192\uc73c\ub098, \ud48d\uc18d\uc740 \uac15\ud558\uc9c0 \uc54a\uc74c\n  - \uc774\uc804 \uc2dc\uac04 \ub370\uc774\ud130 \ud655\uc778 \ud544\uc694","efc60da3":"* count \ubcc0\uc218\uac00 \uc624\ub978\ucabd\uc5d0 \uce58\uc6b0\uccd0\uc838 \uc788\ub2e4. \ub300\ubd80\ubd84\uc758 \uae30\uacc4\ud559\uc2b5\uc740 \uc885\uc18d\ubcc0\uc218\uac00 normal\uc774\uc5b4\uc57c \ud558\uae30\uc5d0 \uc815\uaddc\ubd84\ud3ec\ub97c \uac16\ub294 \uac83\uc774 \ubc14\ub78c\uc9c1\ud558\ub2e4.\n* \ub300\uc548\uc73c\ub85c outlier data\ub97c \uc81c\uac70\ud558\uace0 count \ubcc0\uc218\uc5d0 \ub85c\uadf8\ub97c \uc50c\uc6cc \ubcc0\uacbd\ud574 \ubd10\ub3c4 \uc815\uaddc\ubd84\ud3ec\ub97c \ub530\ub974\uc9c0\ub294 \uc54a\uc9c0\ub9cc, \uc774\uc804 \uadf8\ub798\ud504\ubcf4\ub2e4\ub294 \uc880 \ub354 \uc790\uc138\ud788 \ud45c\ud604\ud558\uace0 \uc788\ub2e4.\n* ref:https:\/\/programmers.co.kr\/learn\/courses\/21\/lessons\/942","d732f03a":"# 0. \ubaa9\uc801 \uc815\uc758\n\n1. \ubd84\uc11d \ubaa9\uc801 : 2011\ub144\ub3c4\uc640 2012\ub144\ub3c4\uc758 \uc790\uc804\uac70 \ub300\uc5ec \uc218\uce58\uc5d0 \ub530\ub77c \uacf5\ub780\uc73c\ub85c \ub098\uc628 count\uac12\uc5d0 \ub300\ud55c \uc608\uce21\n\n2. \ubd84\uc11d \ubc29\ubc95 : \ub370\uc774\ud130\uc5d0 \ub300\ud55c EDA \ud6c4, \uc804\ucc98\ub9ac, \ubd84\uc11d \uc804 \ud655\uc778 \ubc0f \ud68c\uadc0, RNN \ub4f1\uc758 \uae30\ubc95\uc744 \ud65c\uc6a9\ud558\uc5ec \uc608\uce21","02d5831f":"## Train","08dc1c7b":" * \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \ubcf4\uace0 \uc5f0\/\uc6d4\/\uc77c\/\uc2dc\uac04\/\ubd84(\ubb34\uc758\ubbf8) \/ \uc26c\ub294 \ub0a0\uc778\uc9c0 \uc544\ub2cc\uc9c0\uc5d0 \ub300\ud55c \uc5ec\ubd80 \ucd94\uac00","66f91e08":"## \uc2dc\uac04 \ub370\uc774\ud130 \ud0d0\uc0c9","086f1dae":"# 4.2 \uc120\ud615 \ud68c\uadc0\n\n* \uc120\ud615\ud68c\uadc0 \ub610\ub294 \ucd5c\uc18c\uc81c\uacf1\ubc95\uc740 \uac00\uc7a5 \uac04\ub2e8\ud558\uace0 \uc624\ub798\ub41c \ud68c\uadc0\uc6a9 \uc120\ud615 \uc54c\uace0\ub9ac\uc998\n* \uc120\ud615\ud68c\uadc0\ub294 \uc608\uce21\uacfc \ud6c8\ub828 \uc138\ud2b8\uc5d0 \uc788\ub294 \ud0c0\uae43 y \uc0ac\uc774\uc758 \ud3c9\uade0 \uc81c\uacf1 \uc624\ucc28(MSE)\ub97c \ucd5c\uc18c\ud654\ud558\ub294 \ud30c\ub77c\ubbf8\ud130 w\uc640 b\ub97c \ucc3e\ub294\ub2e4.\n* \ub9e4\uac1c\ubcc0\uc218\uac00 \uc5c6\ub294 \uac83\uc774 \uc7a5\uc810\uc774\uc9c0\ub9cc, \ubaa8\ub378\uc758 \ubcf5\uc7a1\ub3c4\ub97c \uc81c\uc5b4\ud560 \uc218 \uc5c6\ub2e4\ub294 \ub2e8\uc810\uc774 \uc788\ub2e4.\n* \uc544\ub798 \uc704\ud0a4\ud53c\ub514\uc544\uc5d0\uc11c \uac00\uc838\uc628 \uadf8\ub798\ud504\uc5d0\uc11c \ud30c\ub780 \uc120\uc774 \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\uc744 \ub098\ud0c0\ub0b4\uace0 \ube68\uac04 \uc810\ub4e4\uc774 \ud6c8\ub828\ub370\uc774\ud130\ub97c \ub098\ud0c0\ub0b8\ub2e4.\n* ref : https:\/\/youtu.be\/woSEc5d_skE","9a70de8c":"* \uac00\uc7a5 \ub192\uc740 \uc810\uc218\ub294 Randomforest (0.11..)","e09af185":" * \uc804\uccb4 \uceec\ub7fc\uc5d0 na\uac12 \uc5c6\uc74c","fa19d12d":"# 1. \ub370\uc774\ud130 \ubaa8\uc591 \ud655\uc778","424c834e":"* \uc81c\ucd9c \uacb0\uacfc : 0.413... \n* \ud06c\uac8c \ub192\uc740 \uc810\uc218\ub294 \uc544\ub2d8","b7bf24f7":" * \uc608\uce21 \uacb0\uacfc \uac00\uc7a5 \uc810\uc218\uac00 \uc88b\uc740(\ub0ae\uc740 \uc810\uc218)\ub294 randomforest\ub97c \ud1b5\ud574 \ub3cc\ub9b0 \uac12\uc73c\ub85c \ud310\ub2e8\n * \uc774\uc5d0 \ub530\ub77c \ucd5c\uc885 \uc559\uc0c1\ube14\uc744 \uc704\ud55c \ub370\uc774\ud130 \uc138\ud2b8\ub294 randomforest\ub85c \uc124\uc815\ud558\uc5ec \uc218\ud589","96d886d5":"* \ud3c9\uade0\uac12\uc73c\ub85c \uc870\uc815\ud560 \uacbd\uc6b0 count\uc758 \ubcc0\ud654\ub7c9\uc774 \uae09\uaca9\ud558\uac8c \ucee4\uc9d0\n* \ud2b9\ud788 \ud48d\uc18d\uc774 \ub0ae\uc744 \ub54c count \uac12\uc758 \ubcc0\ud654\uac00 \uc2ec\ud568 \ub2e4\ub978 \uc694\uc778\uc774 \uac1c\uc785\ub41c \uac83\uc774\uac70\ub098, \uc608\uce21\uc744 \uc798\ubabb\ud588\uc744 \uacbd\uc6b0","c6d93a61":"## Data \uc124\uba85 \n\n* datetime - hourly date + timestamp  \n - 2011-01-01 01:00:00 (\uc5f0-\uc6d4-\uc77c 1\uc2dc 0\ubd84 0\ucd08)\n - \ub144\/\uc6d4\/\uc77c\/\uc2dc \ubcc4 column \uc0dd\uc131\n* season -  1 = spring, 2 = summer, 3 = fall, 4 = winter \n - 1 : \ubd04, 2 : \uc5ec\ub984, 3 : \uac00\uc744, 4 : \uaca8\uc6b8\n* holiday - whether the day is considered a holiday\n - 0 : \ud3c9\uc77c, 1 : \uacf5\ud734\uc77c \uc5ec\ubd80(\uc8fc\ub9d0 \uc81c\uc678)\n* workingday - whether the day is neither a weekend nor holiday\n - 0 : \uc26c\ub294 \ub0a0, 1: \ud3c9\uc77c\n* weather \n - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n    - \ub9d1\uc74c, \uc57d\uac04 \uad6c\ub984\n - 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n    - \ud750\ub9bc, \uc548\uac1c \n - 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n    - \uc57d\ud55c \ub208\/\ube44, \ucc9c\ub465\n - 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \n    - \uac15\ud55c \ub208, \uc6b0\ubc15, \ucc9c\ub465, \uc548\uac1c\n* temp - temperature in Celsius\n - \uc628\ub3c4\n* atemp - \"feels like\" temperature in Celsius\n - \uccb4\uac10 \uc628\ub3c4\n* humidity - relative humidity\n - \uc2b5\ub3c4\n* windspeed - wind speed\n - \ubc14\ub78c \uc18d\ub3c4\n* casual - number of non-registered user rentals initiated\n - \ucc98\uc74c \uc0ac\uc6a9\ud558\ub294 \uc0ac\ub78c\uc758 \uc218\n* registered - number of registered user rentals initiated\n - \uc6d0\ub798 \ub4f1\ub85d\ud588\ub358 \uc0ac\ub78c\uc758 \uc0ac\uc6a9\uc218\n* count - number of total rentals = Test\uc5d0\ub294 \uc5c6\ub294 \uac12--> \uc608\uce21\ud574\uc57c \ud560 \uac12\n - \uc804\uccb4 \ub300\uc5ec \uc218 (casual + registered)\n* dayofweek - The day of week\n - 0 : Mon, 1 : Tue, 2 : Wed, 3: Thu, 4 : Fri, 5 : Sat, 6 : Sun","4fdfd11d":"* temp, atemp\ub294 \uc720\uc0ac\ud55c \ubaa8\uc591\uc73c\ub85c, \uc628\ub3c4\uc640 \uccb4\uac10\uc628\ub3c4\uac00 \ud06c\uac8c \ub2e4\ub974\uc9c0 \uc54a\uc74c\uc744 \uc608\uc0c1\ud560 \uc218 \uc788\uc74c\n - \uadf8\uc5d0 \ub530\ub77c \uc0ac\uc6a9\ub960 \ub610\ud55c \uc720\uc0ac\ud55c \ubaa8\uc591\uc744 \uadf8\ub9ac\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc74c\n* \uc2b5\ub3c4\uc758 \uacbd\uc6b0, 20\ubbf8\ub9cc\uc758 \uc218\uce58\uc5d0 \ub300\ud574 \ubcc0\ub3d9\uc131(\uc605\uc740 \uc0c9)\uc774 \ud06c\uac8c \uc5c6\uc74c\uc744 \ubcf4\uc544, \uadf9\uc18c\uc218\uc758 \uc22b\uc790\ub85c \ub098\ud0c0\ub098\ub294 \uac83\uc73c\ub85c \ubcf4\uc784\n* \ud48d\uc18d\uc758 \uacbd\uc6b0, \ud48d\uc18d\uc774 \ub0ae\uc744 \ub54c\ub294 \uc77c\uad00\uc801\uc778 \ubcc0\ub3d9\ud3ed\uc744 \ubcf4\uc774\uc9c0\ub9cc, \ud401\uc18d\uc774 \ub192\uc544\uc9c8\uc218\ub85d \uc0ac\uc6a9\ub960 \ubcc0\ub3d9\uc774 \ub9e4\uc6b0 \ucee4\uc9d0 \n - \ud48d\uc18d\uc5d0 \ub300\ud55c \ucd94\uac00 \uc124\uba85 \ud544\uc694","b1d3fae5":"# 4-1. \ubd84\uc11d - Randomforest\n## randomforest","0ec7d25b":"* 2011\ub144\uc5d0 \ube44\ud574 2012\ub144\uc5d0\ub294 \uc57d 50%\uc774\uc0c1\uc758 \uc99d\uac00\ub97c \ud588\uc73c\uba70, \uc774\ub294 \uc0ac\uc6a9\uc790 \ud480\uc774 \ub298\uc5b4\ub09c \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.\n* \uc6d4\ubcc4\ub85c \ud655\uc778 \ud588\uc744 \ub54c, \uaca8\uc6b8, \ubd04\uc5d0\ub294 \uc0ac\uc6a9\ub960\uc774 \ub0ae\uc73c\uba70, \uc5ec\ub984, \uac00\uc744\uc758 \uacbd\uc6b0 \ud06c\uac8c \ub298\uc5b4\ub09c \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \n* \uc77c\uc790\ubcc4\ub85c \ubd24\uc744 \uacbd\uc6b0, \uac01 \uc77c\uc790\uac00 \ud06c\uac8c \ub2e4\ub974\uc9c0 \uc54a\uc73c\ubbc0\ub85c (\uc720\uc758\ubbf8\ud55c \ucc28\uc774 \uc5c6\uc74c) \uc77c\uc790\uc5d0 \ub300\ud55c \uc758\ubbf8\ub294 \uc5c6\ub294 \uac83\uc73c\ub85c \ud310\ub2e8\n  - day = 19\uc77c\uae4c\uc9c0 \ubc16\uc5d0 \uc5c6\uc74c\n* \uc2dc\uac04\ub300 \ubcc4\ub85c \ubd24\uc744 \uacbd\uc6b0,\ucd9c\ud1f4\uadfc \uc2dc\uac04(8\uc2dc, 5\/6\uc2dc \ub4f1)\uc5d0 \ubab0\ub824\uc11c \uc0ac\uc6a9\ud558\uba70, \ucde8\uce68\uc2dc\uac04\uc5d0\ub294 \uc0ac\uc6a9\ub960\uc774 \uac00\uc7a5 \uc800\uc870\ud55c \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","d320516a":"* \uc57d 150\uac1c\uc758 \ub370\uc774\ud130\ub97c \uc9c0\uc6b8 \uc218 \uc788\uc74c...\uc801\uc6a9 \uc5ec\ubd80\ub294 \ub450\uac00\uc9c0 \ubaa8\ub450 \ub3cc\ub824 \ubcf8 \ud6c4 \ube44\uad50","b401eb59":"## Cross validation \uad50\ucc28 \uac80\uc99d\n* \uc77c\ubc18\ud654 \uc815\ub3c4\ub97c \uce21\uc815\ud558\uae30 \uc704\ud574 \uc5ec\ub7ec \ub370\uc774\ud130\ub97c training \/ test \ub85c \ub098\ub220 \ubc18\ubcf5 \ud559\uc2b5\n* K-fold \uad50\ucc28\uac80\uc99d\n  * \ub370\uc774\ud130\ub97c \ud3f4\ub4dc\ub77c \ubd80\ub974\ub294 \ube44\uc2b7\ud55c \ud06c\uae30\uc758 \ubd80\ubd84\uc9d1\ud569(n_splits)\uc73c\ub85c \ub098\ub204\uace0 \uac01\uac01\uc758 \ud3f4\ub4dc \uc815\ud655\ub3c4\ub97c \uce21\uc815\ud55c\ub2e4.\n  * \uccab \ubc88\uc9f8 \ud3f4\ub4dc\ub97c \ud14c\uc2a4\ud2b8 \uc138\ud2b8\ub85c \uc0ac\uc6a9\ud558\uace0 \ub098\uba38\uc9c0 \ud3f4\ub4dc\ub97c \ud6c8\ub828 \uc138\ud2b8\ub85c \uc0ac\uc6a9\ud558\uc5ec \ud559\uc2b5\ud55c\ub2e4.\n  * \ub098\uba38\uc9c0 \ud6c8\ub828 \uc138\ud2b8\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \uc138\ud2b8\uc758 \uc815\ud655\ub3c4\ub97c \uccab \ubc88\uc9f8 \ud3f4\ub4dc\ub85c \ud3c9\uac00\ud55c\ub2e4.\n  * \ub2e4\uc74c\uc740 \ub450 \ubc88\uc9f8 \ud3f4\ub4dc\uac00 \ud14c\uc2a4\ud2b8 \uc138\ud2b8\uac00 \ub418\uace0 \ub098\uba38\uc9c0 \ud3f4\ub4dc\uc758 \ud6c8\ub828 \uc138\ud2b8\ub97c \ub450 \ubc88\uc9f8 \ud3f4\ub4dc\ub85c \uc815\ud655\ub3c4\ub97c \uce21\uc815\ud55c\ub2e4.\n  * \uc774 \uacfc\uc815\uc744 \ub9c8\uc9c0\ub9c9 \ud3f4\ub4dc\uae4c\uc9c0 \ubc18\ubcf5\ud55c\ub2e4.\n  * \uc774\ub807\uac8c \ud6c8\ub828 \uc138\ud2b8\uc640 \ud14c\uc2a4\ud2b8\uc138\ud2b8\ub85c \ub098\ub204\ub294 N\uac1c\uc758 \ubd84\ud560\ub9c8\ub2e4 \uc815\ud655\ub3c4\ub97c \uce21\uc815\ud558\uc5ec \ud3c9\uade0\uac12\uc744 \ub0b8 \uc815\ud655\ub3c4","3fb52c9d":"## \uacc4\uc808 \uc7ac\uc815\uc758\n* \ubd04 : 3,4,5 \n* \uc5ec\ub984 : 6, 7, 8\n* \uac00\uc744 : 9, 10, 11\n* \uaca8\uc6b8 : 12, 1, 2\n\nref. https:\/\/ko.weatherspark.com\/y\/23912\/%EB%AF%B8%EA%B5%AD-%EB%89%B4%EC%9A%95-%EC%A3%BC-%EB%89%B4%EC%9A%95%EC%9D%98-%EB%85%84%EC%A4%91-%ED%8F%89%EA%B7%A0-%EB%82%A0%EC%94%A8","2e53a7dd":"* \uc608\uc0c1\uacfc \uac19\uc774 \ud48d\uc18d\uc774 0\uc778 \ub370\uc774\ud130\uac00 \ub9e4\uc6b0 \ub9ce\uc74c \n - \uc2e4\uc81c\ub85c \ubc14\ub78c\uc774 0\uc778\uc9c0 \uce21\uc815\uc774 \uc548\ub41c \uac83\uc778\uc9c0 \ud655\uc778\ud544\uc694\n - \ud48d\uc18d\uc774 0 \uc778 \ub370\uc774\ud130\uc758 \uc804\/\ud6c4\ub85c \ub370\uc774\ud130 \uac12\uc774 \uc788\ub2e4\uba74 \ub204\ub77d\uc73c\ub85c \ud310\ub2e8\n - \uc5c6\ub2e4\uba74 \uc2e4\uc81c \ud48d\uc18d\uc774 0\uc77c \uc218 \uc788\uc744 \ub4ef","a0881c75":"### 2011\ub144 \uc6d4\ubcc4 ->12\ub144 \uc6d4\ubcc4 \ub370\uc774\ud130\uae4c\uc9c0 \uc2dc\uac04\uc21c \ud655\uc778","bb0779c3":" * \ud0d0\uc0c9\ud574\uc57c \ud560 \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \uc0b4\ud3b4\ubd23\uc744\ub54c, \uadf9\ub2e8\uce58\uc758 \uc874\uc7ac\uac00 \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \ubcc0\uacbd\ud558\uace0 \uc788\ub294 \uac83\uc73c\ub85c \ud655\uc778 \ud574\ub2f9 \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ub97c \ud560 \uac83\uc778\uc9c0 \uacb0\uc815 \ud544\uc694","2e05f8b5":"* \ub300\uc5ec\ub7c9\uc758 \uadf9\ub2e8\uce58 \uac12\uc774 \uc874\uc7ac\ud558\ub294 \uac83\uc73c\ub85c \ud655\uc778\n* \uacc4\uc808\ubcc4\ub85c \ubaa8\uc591\uc740 \uc720\uc0ac\ud558\uc9c0\ub9cc \uadf9\ub2e8\uce58\uac00 \ub9ce\uc740 \uac83\uc73c\ub85c \ubcf4\uc784\n* \uadf9\ub2e8\uce58\ub97c \uc81c\uc678\ud55c \ub300\ubd80\ubd84\uc758 \ubaa8\uc591\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc74c\n* working Day \uc758 \ud3c9\uade0 \uac12\uc740 \ucc28\uc774\uac00 \ucee4\ubcf4\uc774\uc9c0 \uc54a\uc73c\ub098, \uadf9\ub2e8\uce58\uc758 \uac12\uc774 \uc77c\ud558\ub294\ub0a0 \ub354 \ub9ce\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc787\uc74c","309a3c23":"* 5, 6 =  \uc8fc\ub9d0, \uc0dd\uac01\ubcf4\ub2e4 \uc0ac\uc6a9\ub960\uc774 \ub9e4\uc6b0 \ub192\uc74c. \n* \ud3c9\uc77c\ub9cc\ud07c \uc8fc\ub9d0\uc5d0\ub3c4 \ub9ce\uc774 \ud0c4\ub2e4\ub294 \uacb0\ub860\n* \uc77c\uc694\uc77c\uc5d0 \uac00\uc7a5 \uc801\uc74c (\uc720\uc758\ubbf8\ud574 \ubcf4\uc774\uc9c0\ub294 \uc54a\uc74c)","97548817":"* windspeed\uc758 \ubcc0\ud654\ub97c \uc8fc\uc5b4\ubd24\uc9c0\ub9cc \ud070 \uc0c1\uad00\uc774 \uc5c6\ub294 \uac83\uc73c\ub85c\ubcf4\uc784\n* register\uc758 \uacbd\uc6b0 \ub192\uc740 \uc0c1\uad00\uacc4\uc218\ub97c \ubcf4\uc5ec\uc8fc\uc9c0\ub9cc, test\uc5d0\ub294 \ud574\ub2f9 \uac12\uc774 \uc5c6\uc74c","115d210e":"# 4.5. - Ensembel Model - RandomForest","e39ddfcc":"# Kaggle Bike Sharing Demand \n\n*   EDA --> Preprocess --> \ud68c\uadc0  --> Randomforest --> 10Percent \ub3c4\uc804\n*   \ud56d\ubaa9 \ucd94\uac00\n# \ub370\uc774\ud130 \ubd84\uc11d \ubc29\ubc95\ub860\n\n#0. \ubaa9\uc801 \uc815\uc758 \n - \ubd84\uc11d \ubaa9\uc801\uc758 \uba85\ud655\ud654\n - \ubd84\uc11d \ubc29\ubc95 \uc815\uc758\n \n#1. \ub370\uc774\ud130 \ubaa8\uc591 \ud655\uc778\n - \ub2e8\uc21c \uc2dc\uac01\ud654 : \ubaa9\uc801\uc5d0 \ub530\ub978 \ub370\uc774\ud130 \ud45c\ud604\n \n#2. \uc774\uc0c1\uce58 \ud655\uc778 \ubc0f NA\ud655\uc778\n\n#3. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\n - NA\/\uc774\uc0c1\uce58 \ucc98\ub9ac : \uc804\uccb4 \uc0ad\uc81c or \ud3c9\uade0 \ub300\uccb4 or \ub2e4\ub978 \ubc29\ubc95\ub860\uc744 \ud1b5\ud55c \uac12 \uc608\uce21\n \n#4. \ubd84\uc11d \uc804 EDA\n - \ubc94\uc8fc\ud615\n - \uc5f0\uc18d\ud615\n - \uc735\ud569\ud615 (\ubc94\uc8fc+\uc5f0\uc18d)\n\n#5. \ubd84\uc11d\n - \ud68c\uadc0\n - randomforest?\n - 10percent\n\n#6. \uacb0\ub860 \ub3c4\ucd9c\n\nReference : \n - https:\/\/www.kaggle.com\/kwonyoung234\/for-beginner\n - https:\/\/www.youtube.com\/watch?v=woSEc5d_skE&feature\n ","4f24f5f6":"## \ud48d\uc18d\ub370\uc774\ud130 \uc804\ucc98\ub9ac\n* \ud48d\uc18d\uc774 0\uc778 \ub370\uc774\ud130\ub9cc \ucd94\ub824 \uc5f0\uc18d\ub418\ub294\uc9c0 \ud655\uc778\ud558\uace0, \uc5f0\uc18d\ub418\ub294 \ub370\uc774\ud130\ub4e4\uc774 \uc544\ub2c8\ub77c\uba74, \ub2e4\uc74c\uc744 \uc218\ud589\n* \ud48d\uc18d\uc774 0\uc778 \ub370\uc774\ud130\uac00 \uc5f0\uc18d\ub418\uba74 randomforest \uac12 \ud65c\uc6a9","a93ff692":"# Score\n## RMSLE\n\n\uacfc\ub300\ud3c9\uac00 \ub41c \ud56d\ubaa9\ubcf4\ub2e4\ub294 \uacfc\uc18c\ud3c9\uac00 \ub41c \ud56d\ubaa9\uc5d0 \ud398\ub110\ud2f0\ub97c \uc900\ub2e4.\n\n\uc624\ucc28(Error)\ub97c \uc81c\uacf1(Square)\ud574\uc11c \ud3c9\uade0(Mean)\ud55c \uac12\uc758 \uc81c\uacf1\uadfc(Root)\uc73c\ub85c \uac12\uc774 \uc791\uc744\uc218\ub85d \uc815\ubc00\ub3c4\uac00 \ub192\ub2e4.\n\n0\uc5d0 \uac00\uae4c\uc6b4 \uac12\uc774 \ub098\uc62c\uc218\ub85d \uc815\ubc00\ub3c4\uac00 \ub192\uc740 \uac12\uc774\ub2e4.\n\nSubmissions are evaluated one the Root Mean Squared Logarithmic Error (RMSLE)\n\n$$ \\sqrt{\\frac{1}{n} \\sum{i=1}n (\\log(pi + 1) - \\log(a_i+1))2 } $$\n\n* \\({n}\\) is the number of hours in the test set\n* \\(p_i\\) is your predicted count\n* \\(a_i\\) is the actual count\n* \\(\\log(x)\\) is the natural logarithm\n\n* \uc880 \ub354 \uc790\uc138\ud55c \uc124\uba85\uc740 : RMSLE cost function\n\n* \uc794\ucc28(residual)\uc5d0 \ub300\ud55c \ud3c9\uade0\uc5d0 \ub85c\uadf8\ub97c \uc50c\uc6b4 \uac12\uc774\ub2e4. => \uacfc\ub300\ud3c9\uac00 \ub41c \ud56d\ubaa9\ubcf4\ub2e4 \uacfc\uc18c\ud3c9\uac00 \ub41c \ud56d\ubaa9\uc5d0 \ud398\ub110\ud2f0\ub97c \uc8fc\uae30 \uc704\ud574\n\n* \uc815\ub2f5\uc5d0 \ub300\ud55c \uc624\ub958\ub97c \uc22b\uc790\ub85c \ub098\ud0c0\ub0b8 \uac12\uc73c\ub85c \uac12\uc774 \ud074\uc218\ub85d \uc624\ucc28\uac00 \ud06c\ub2e4\ub294 \uc758\ubbf8\ub2e4.\n\n* \uac12\uc774 \uc791\uc744\uc218\ub85d \uc624\ub958\uac00 \uc801\ub2e4\ub294 \uc758\ubbf8\ub97c \ub098\ud0c0\ub0b8\ub2e4.","65a58a7b":"# 4.4. \ub77c\uc3d8 - Regularization Model - Lasso\n\n* \uc120\ud615 \ud68c\uadc0\uc758 Regularization(\uaddc\uc81c)\ub97c \uc801\uc6a9\ud558\ub294 \ub300\uc548\n* \uacc4\uc218\ub97c 0\uc5d0 \uac00\uae5d\uac8c \ub9cc\ub4e4\ub824\uace0 \ud558\uba70, \uc774\ub97c L1 \uaddc\uc81c\ub77c\uace0 \ud568. \uc5b4\ub5a4 \uacc4\uc218\uac00 0\uc774\ub418\uae30\ub3c4 \ud558\uba74, \ud574\ub2f9 \ud53c\ucc98\ub294 \uc644\uc804\ud788 \uc81c\uc678\n* \ud53c\ucc98 \uc120\ud0dd\uc774 \uc790\ub3d9\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c4\ub2e4\uace0 \ubcfc \uc218 \uc788\uc74c\n* alpha \uc758 default\uac12\uc774 1.0, \uacfc\uc18c\uc801\ud569\uc744 \uc904\uc774\uae30 \uc704\ud574 \ud574\ub2f9 \uac12\uc744 \uc904\uc5ec\uc57c \ud568\n* \uadf8\ub9ac\ub4dc \uc11c\uce58\ub85c \ub77c\uc3d8\ubaa8\ub378\uc744 \uc2e4\ud589 \ud588\uc744 \ub54c \ubca0\uc2a4\ud2b8 \uc54c\ud30c\uac12\uc740 0.0025\n* max_iter(\ubc18\ubcf5 \uc2e4\ud589\ud558\ub294 \ucd5c\ub300\ud68c\uc218) = 3000\uc73c\ub85c \uc124\uc815 \n  * ref : https:\/\/youtu.be\/woSEc5d_skE\n  * ref: https:\/\/www.kaggle.com\/kwonyoung234\/for-beginner","327b4da7":"### Holiday \ud655\uc778\n* \uc77c\ud558\ub294 \ub0a0\uc778\uc9c0\uac00 \ub354 \uc911\uc694\ud558\uc9c0 \uc54a\uc744\uae4c "}}