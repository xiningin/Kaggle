{"cell_type":{"59779b93":"code","34c7c79c":"code","c27c3a8d":"code","f140cd4e":"code","79f15da6":"code","7d73b314":"code","b31586da":"code","564ead18":"code","d486644f":"code","257b88a0":"code","4f28e11e":"code","229d9a6c":"code","3525f049":"code","e17b742e":"code","dcc9f9c8":"code","1f3ffe23":"code","c6a57a51":"code","12177f09":"code","a7242fab":"code","44e98fbd":"code","a990d6bb":"code","3088364e":"code","34164c00":"code","514f4649":"code","72e76a65":"code","0a6f1c4c":"code","94299816":"code","7f436da3":"code","3108cf2b":"code","4dd340cf":"code","c91cc1a6":"code","02ffab15":"markdown","34ebc528":"markdown","4eb71d71":"markdown","e70d3f9e":"markdown","348300e7":"markdown","01eabd37":"markdown"},"source":{"59779b93":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D, Dropout\nfrom tensorflow.keras.utils import to_categorical   ","34c7c79c":"sample_submission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","c27c3a8d":"Y = np.array(train[\"label\"])\nprint(Y.shape)\nY = to_categorical(Y)\nprint(Y.shape)","f140cd4e":"del train[\"label\"]","79f15da6":"X = train.values","7d73b314":"img = X[14]\nimg = np.array(img, dtype = 'float')\nimg = img.reshape(28, 28)\n\nplt.imshow(img)\nplt.show()","b31586da":"X.shape","564ead18":"X = X.reshape(X.shape[0], 28, 28, 1)","d486644f":"X.shape","257b88a0":"model1 = Sequential()\nmodel2 = Sequential()","4f28e11e":"cnn1 = Conv2D(32, (3,3), padding = \"same\", activation = \"relu\", input_shape = (28, 28, 1))\npool1 = MaxPool2D(pool_size = (2,2))\ncnn2 = Conv2D(64, (3,3), padding = \"same\", activation = \"relu\")\npool2 = MaxPool2D(pool_size = (2,2))\ndrop1 = Dropout(0.2)","229d9a6c":"flatten = Flatten()\ndense1 = Dense(units = 128, activation = \"relu\")\ndrop2 = Dropout(0.1)\ndense2 = Dense(units = 10, activation = \"softmax\")","3525f049":"model1.add(cnn1)\nmodel1.add(pool1)\nmodel1.add(cnn2)\nmodel1.add(pool2)\nmodel1.add(drop1)\nmodel1.add(flatten)\nmodel1.add(dense1)\nmodel1.add(drop2)\nmodel1.add(dense2)","e17b742e":"model2.add(cnn1)\nmodel2.add(pool1)\nmodel2.add(cnn2)\nmodel2.add(pool2)\nmodel2.add(drop1)\nmodel2.add(flatten)\nmodel2.add(dense1)\nmodel2.add(dense2)","dcc9f9c8":"model1.compile(optimizer = \"adadelta\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","1f3ffe23":"model2.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","c6a57a51":"# model1.fit(X, Y, epochs = 20, batch_size = 128)","12177f09":"model2.fit(X, Y, epochs = 5, batch_size = 128)","a7242fab":"X_test = np.array(test.values)","44e98fbd":"X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)","a990d6bb":"X_test.shape","3088364e":"# predictions1 = model1.predict(X_test)\npredictions2 = model2.predict(X_test)","34164c00":"# pred1 = np.argmax(predictions1, axis = 1)\npred2 = np.argmax(predictions2, axis = 1)","514f4649":"# s1 = pd.DataFrame(pred1)\ns2 = pd.DataFrame(pred2)","72e76a65":"labels = np.array([i for i in range(1, 28001)])","0a6f1c4c":"# del s1[\"ImageI\"]\n# s1.insert(0, \"ImageId\", labels, True)","94299816":"s2.insert(0, \"ImageId\", labels, True)","7f436da3":"# s1.rename(columns = {0:'Label'}, inplace = True)","3108cf2b":"s2.rename(columns = {0:'Label'}, inplace = True)","4dd340cf":"# s1.to_csv(\"submit1.csv\", index=False)","c91cc1a6":"s2.to_csv(\"submit2.csv\", index=False)","02ffab15":"## Data Reshaping for CNN","34ebc528":"# --------------------------------------------------------------------------------------","4eb71d71":"## Setting up Model","e70d3f9e":"## Loading Data","348300e7":"## Preparing Test Data and Getting Preds","01eabd37":"## Training data and observing result"}}