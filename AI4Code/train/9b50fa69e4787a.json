{"cell_type":{"f5f8574a":"code","761c34ac":"code","b79a0612":"code","41028286":"code","405fbf1f":"code","4993433c":"code","b1be1f80":"code","56b9f9ab":"code","6098ddfc":"code","ae4fac35":"code","d067edfa":"code","041d4f45":"code","8c309cf5":"code","ecc64006":"code","a01e8724":"code","a8f5bee7":"code","61eb3aba":"code","47f575db":"code","a21f2139":"code","39d6a52b":"code","688cf219":"code","70947878":"code","cc10ec4d":"code","aed3d66c":"code","1a6cfc8d":"code","0d2c191a":"code","e3cb3a0f":"code","ca4bc3c6":"code","f2ee8168":"code","d5853856":"code","a9c3bd24":"code","4daa45ae":"code","cc77d388":"code","4659d990":"code","9542d36c":"code","c7c8e0b7":"code","5d5be9bc":"code","f53f0eed":"code","36ccae6d":"code","16fd02f3":"code","e9dd5062":"code","01b19216":"code","d61df3a5":"code","783f105b":"code","17a6abb2":"code","f463c63e":"code","67e1761f":"code","ab2be8d7":"code","0fcf7a7f":"code","2091399e":"code","fd11c3d5":"code","0a1fcbf8":"code","075bcb37":"code","39654f3f":"markdown","9ce3f094":"markdown","e0fe5337":"markdown","800a684b":"markdown","3b193033":"markdown","9f0267ce":"markdown","8258d14e":"markdown","64ef590c":"markdown","30490fe4":"markdown","3aa24014":"markdown","a827c57a":"markdown","387df273":"markdown","ec6e8a61":"markdown","3e36db9c":"markdown","ded017c5":"markdown","725455a0":"markdown","74f8edf0":"markdown"},"source":{"f5f8574a":"#importando bibliotecas\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # visualization\nimport seaborn as sns # visualization\nfrom scipy import stats\nfrom scipy.stats import norm \nimport warnings \nwarnings.filterwarnings('ignore') #ignore warnings\n\n%matplotlib inline\nimport gc","761c34ac":"stores=pd.read_csv(\"C:\/Users\/sony\/OneDrive\/Documentos\/teste_ds_ze\/stores.csv\")","b79a0612":"stores","41028286":"features = pd.read_csv(\"C:\\\\Users\\\\sony\\\\OneDrive\\\\Documentos\\\\features.csv\")\n","405fbf1f":"features","4993433c":"test = pd.read_csv(\"C:\\\\Users\\\\sony\\\\OneDrive\\\\Documentos\\\\test.csv\")","b1be1f80":"test","56b9f9ab":"train = pd.read_csv(\"C:\\\\Users\\\\sony\\\\OneDrive\\\\Documentos\\\\train.csv\")","6098ddfc":"train","ae4fac35":"print(\"the structure of train data is \", train.shape)\nprint(\"the structure of test  data is \", test.shape)\nprint(\"the ratio of train data : test data is \", (round(train.shape[0]*100\/(train.shape[0]+test.shape[0])),100-round(train.shape[0]*100\/(train.shape[0]+test.shape[0]))))","d067edfa":"train=train.merge(stores, on='Store', how='left')\ntrain.head()","041d4f45":"dataset  =  pd.merge(stores, features) \ndataset","8c309cf5":"sns.pairplot(dataset)","ecc64006":"def scatter(dataset, column):\n    plt.figure()\n    plt.scatter(dataset[column] , dataset['weeklySales'])\n    plt.ylabel('weeklySales')\n    plt.xlabel(column)","a01e8724":"def scatter(dataset, column):\n    plt.figure()\n    plt.scatter(dataset[column] , dataset['weeklySales'])\n    plt.ylabel('weeklySales')\n    plt.xlabel(column)","a8f5bee7":"fig = plt.figure(figsize=(18, 14))\ncorr = dataset.corr()\nc = plt.pcolor(corr)\nplt.yticks(np.arange(0.5, len(corr.index), 1), corr.index)\nplt.xticks(np.arange(0.5, len(corr.columns), 1), corr.columns)\nfig.colorbar(c)","61eb3aba":"sns.pairplot(dataset, vars=['weeklySales', 'Fuel_Price', 'Size', 'CPI', 'Dept', 'Temperature', 'Unemployment'])","47f575db":"sns.pairplot(dataset, vars=[ 'Fuel_Price', 'Size', 'CPI', 'Dept', 'Temperature', 'Unemployment'])","a21f2139":"Year=pd.Series(train['Year'].unique())\nWeek=pd.Series(train['Week'].unique())\nMonth=pd.Series(train['Month'].unique())\nDay=pd.Series(train['Day'].unique())\nn_days=pd.Series(train['n_days'].unique())","39d6a52b":"print(\"the shape of stores data set is\", stores.shape)\nprint(\"the unique value of store is\", stores['Store'].unique())\nprint(\"the unique value of Type is\", stores['Type'].unique())","688cf219":"print(stores.head())\ngrouped=stores.groupby('Type')\nprint(grouped.describe()['Size'].round(2))","70947878":"plt.style.use('ggplot')\nlabels=['A store','B store','C store']\nsizes=grouped.describe()['Size'].round(1)\nsizes=[(22\/(17+6+22))*100,(17\/(17+6+22))*100,(6\/(17+6+22))*100] # convert to the proportion\n\n\nfig, axes = plt.subplots(1,1, figsize=(10,10))\n\nwprops={'edgecolor':'black',\n      'linewidth':2}\n\ntprops = {'fontsize':30}\n\n\naxes.pie(sizes,\n        labels=labels,\n        explode=(0.02,0,0),\n        autopct='%1.1f%%',\n        pctdistance=0.6,\n        labeldistance=1.2,\n        wedgeprops=wprops,\n        textprops=tprops,\n        radius=0.8,\n        center=(0.5,0.5))\nplt.show()\n","cc10ec4d":"data = pd.concat([stores['Type'], stores['Size']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='Type', y='Size', data=data)","aed3d66c":"data = pd.concat([train['Type'], train['Weekly_Sales']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='Type', y='Weekly_Sales', data=data, showfliers=False)","1a6cfc8d":"plt.style.use('ggplot')\n\nfig=plt.figure()\nax=fig.add_subplot(111)\n\nax.scatter(train['Size'],train['Weekly_Sales'], alpha=0.5)\n\nplt.show()","0d2c191a":"types=stores['Type'].unique()\n\nplt.style.use('ggplot')\n\nfig=plt.figure(figsize=(10,5))\nax=fig.add_subplot(111)\n\nfor t in types:\n    x=train.loc[train['Type']==t, 'Size']\n    y=train.loc[train['Type']==t, 'Weekly_Sales']\n    \n    ax.scatter(x,y,alpha=0.5, label=t)\n\nax.set_title('Scatter plot size and sales by store type')\nax.set_xlabel('Size')\nax.set_ylabel('Weekly_Sales')\n\nax.legend(loc='higher right',fontsize=12)\n\nplt.show()","e3cb3a0f":"train.head()","ca4bc3c6":"data = pd.concat([train['Store'], train['Weekly_Sales'], train['Type']], axis=1)\nf, ax = plt.subplots(figsize=(25, 8))\nfig = sns.boxplot(x='Store', y='Weekly_Sales', data=data, showfliers=False, hue=\"Type\")","f2ee8168":"data = pd.concat([train['Store'], train['Weekly_Sales'], train['IsHoliday']], axis=1)\nf, ax = plt.subplots(figsize=(25, 8))\nfig = sns.boxplot(x='Store', y='Weekly_Sales', data=data, showfliers=False, hue=\"IsHoliday\")","d5853856":"data = pd.concat([train['Dept'], train['Weekly_Sales'], train['Type']], axis=1)\nf, ax = plt.subplots(figsize=(25, 10))\nfig = sns.boxplot(x='Dept', y='Weekly_Sales', data=data, showfliers=False)","a9c3bd24":"data = pd.concat([train['Dept'], train['Weekly_Sales'], train['Type']], axis=1)\nf, ax = plt.subplots(figsize=(10, 50))\nfig = sns.boxplot(y='Dept', x='Weekly_Sales', data=data, showfliers=False, hue=\"Type\",orient=\"h\") ","4daa45ae":"data = pd.concat([train['Dept'], train['Weekly_Sales'], train['IsHoliday']], axis=1)\nf, ax = plt.subplots(figsize=(25, 10))\nfig = sns.boxplot(x='Dept', y='Weekly_Sales', data=data, showfliers=False, hue=\"IsHoliday\")","cc77d388":"train.head()","4659d990":"plt.style.use('ggplot')\nfig, axes = plt.subplots(1,2, figsize = (20,5))\nfig.subplots_adjust(wspace=1, hspace=1)\nfig.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9)\n\nsales_holiday=train[['IsHoliday','Weekly_Sales']]\ntarget=[sales_holiday['Weekly_Sales'].loc[sales_holiday['IsHoliday']==True],sales_holiday['Weekly_Sales'].loc[sales_holiday['IsHoliday']==False]]\nlabels=['Holiday','Not Holiday']\n\n#median\nmedianprop={'color':'#2196F3',\n            'linewidth': 2,\n            'linestyle':'-'}\n\n# outliers\n\nflierprop={'color' : '#EC407A',\n          'marker' : 'o',\n          'markerfacecolor': '#2196F3',\n          'markeredgecolor':'white',\n          'markersize' : 3,\n          'linestyle' : 'None',\n          'linewidth' : 0.1}\n\n\n\naxes[0].boxplot(target,labels=labels, patch_artist = 'Patch',\n                  showmeans=True,\n                  flierprops=flierprop,\n                  medianprops=medianprop)\n\n\n\n\naxes[1].boxplot(target,labels=labels, patch_artist = 'Patch',\n                  showmeans=True,\n                  flierprops=flierprop,\n                  medianprops=medianprop)\n\naxes[1].set_ylim(-6000,80000)\n\nplt.show()\n\n\n","9542d36c":"print(train[train['IsHoliday']==True]['Weekly_Sales'].describe().round(1))\nprint(train[train['IsHoliday']==False]['Weekly_Sales'].describe().round(1))","c7c8e0b7":"train.head()","5d5be9bc":"data = pd.concat([train['Month'], train['Weekly_Sales']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='Month', y=\"Weekly_Sales\", data=data, showfliers=False)","f53f0eed":"data = pd.concat([train['Month'], train['Weekly_Sales'],train['IsHoliday']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='Month', y=\"Weekly_Sales\", data=data, showfliers=False, hue='IsHoliday')","36ccae6d":"data = pd.concat([train['Month'], train['Weekly_Sales'],train['Type']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='Month', y=\"Weekly_Sales\", data=data, showfliers=False, hue='Type')","16fd02f3":"data = pd.concat([train['Year'], train['Weekly_Sales']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='Year', y=\"Weekly_Sales\", data=data, showfliers=False)","e9dd5062":"data = pd.concat([train['Week'], train['Weekly_Sales']], axis=1)\nf, ax = plt.subplots(figsize=(20, 6))\nfig = sns.boxplot(x='Week', y=\"Weekly_Sales\", data=data, showfliers=False)","01b19216":"f, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(train['Weekly_Sales'])","d61df3a5":"print(\"Skewness: \", train['Weekly_Sales'].skew()) #skewness\nprint(\"Kurtosis: \", train['Weekly_Sales'].kurt()) #kurtosis","783f105b":"train['Weekly_Sales'].min()","17a6abb2":"fig = plt.figure(figsize = (10,5))\n\nfig.add_subplot(1,2,1)\nres = stats.probplot(train.loc[train['Weekly_Sales']>0,'Weekly_Sales'], plot=plt)\n\nfig.add_subplot(1,2,2)\nres = stats.probplot(np.log1p(train.loc[train['Weekly_Sales']>0,'Weekly_Sales']), plot=plt)","f463c63e":"train.describe()['Weekly_Sales']","67e1761f":"train_over_zero=train[train['Weekly_Sales']>0]\ntrain_below_zero=train[train['Weekly_Sales']<=0]\nsales_over_zero = np.log1p(train_over_zero['Weekly_Sales'])\n#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(sales_over_zero)","ab2be8d7":"print(\"Skewness: \", sales_over_zero.skew()) #skewness\nprint(\"Kurtosis: \", sales_over_zero.kurt()) #kurtosis","0fcf7a7f":"grouped=train.groupby(['Dept','Date']).mean().round(0).reset_index()\nprint(grouped.shape)\nprint(grouped.head())\ndata=grouped[['Dept','Date','Weekly_Sales']]\n\n\ndept=train['Dept'].unique()\ndept.sort()\ndept_1=dept[0:20]\ndept_2=dept[20:40]\ndept_3=dept[40:60]\ndept_4=dept[60:]\n\nfig, ax = plt.subplots(2,2,figsize=(20,10))\nfig.subplots_adjust(wspace=0.5, hspace=0.5)\nfig.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9)\n\nfor i in dept_1 :\n    data_1=data[data['Dept']==i]\n    ax[0,0].plot(data_1['Date'], data_1['Weekly_Sales'],label='Dept_1_mean_sales')\n\nfor i in dept_2 :\n    data_1=data[data['Dept']==i]\n    ax[0,1].plot(data_1['Date'], data_1['Weekly_Sales'],label='Dept_1_mean_sales')\n    \nfor i in dept_3 :\n    data_1=data[data['Dept']==i]\n    ax[1,0].plot(data_1['Date'], data_1['Weekly_Sales'],label='Dept_1_mean_sales')    \n\nfor i in dept_4 :\n    data_1=data[data['Dept']==i]\n    ax[1,1].plot(data_1['Date'], data_1['Weekly_Sales'],label='Dept_1_mean_sales')        \n    \nax[0,0].set_title('Mean sales record by department(0~19)')\nax[0,1].set_title('Mean sales record by department(20~39)')\nax[1,0].set_title('Mean sales record by department(40~59)')\nax[1,1].set_title('Mean sales record by department(60~)')\n\n\nax[0,0].set_ylabel('Mean sales')\nax[0,0].set_xlabel('Date')\nax[0,1].set_ylabel('Mean sales')\nax[0,1].set_xlabel('Date')\nax[1,0].set_ylabel('Mean sales')\nax[1,0].set_xlabel('Date')\nax[1,1].set_ylabel('Mean sales')\nax[1,1].set_xlabel('Date')\n\n\nplt.show()","2091399e":"grouped=train.groupby(['Store','Date']).mean().round(0).reset_index()\ngrouped.shape\ngrouped.head()\n\ndata=grouped[['Store','Date','Weekly_Sales']]\ntype(data)\n\n\nstore=train['Store'].unique()\nstore.sort()\nstore_1=store[0:5]\nstore_2=store[5:10]\nstore_3=store[10:15]\nstore_4=store[15:20]\nstore_5=store[20:25]\nstore_6=store[25:30]\nstore_7=store[30:35]\nstore_8=store[35:40]\nstore_9=store[40:]\n\nfig, ax = plt.subplots(5,2,figsize=(20,15))\n\nfig.subplots_adjust(wspace=0.5, hspace=0.5)\nfig.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9)\n\nfor i in store_1 :\n    data_1=data[data['Store']==i]\n    ax[0,0].plot(data_1['Date'], data_1['Weekly_Sales'])\n    \nfor i in store_2 :\n    data_2=data[data['Store']==i]\n    ax[0,1].plot(data_2['Date'], data_2['Weekly_Sales'])\n    \nfor i in store_3 :\n    data_3=data[data['Store']==i]\n    ax[1,0].plot(data_3['Date'], data_3['Weekly_Sales'])\n\nfor i in store_4 :\n    data_4=data[data['Store']==i]\n    ax[1,1].plot(data_4['Date'], data_4['Weekly_Sales'])\n    \nfor i in store_5 :\n    data_5=data[data['Store']==i]\n    ax[2,0].plot(data_5['Date'], data_5['Weekly_Sales'])  \n\nfor i in store_6 :\n    data_6=data[data['Store']==i]\n    ax[2,1].plot(data_6['Date'], data_6['Weekly_Sales'])  \n\nfor i in store_7 :\n    data_7=data[data['Store']==i]\n    ax[3,0].plot(data_7['Date'], data_7['Weekly_Sales'])      \n\nfor i in store_8 :\n    data_8=data[data['Store']==i]\n    ax[3,1].plot(data_8['Date'], data_8['Weekly_Sales'])     \n    \nfor i in store_9 :\n    data_9=data[data['Store']==i]\n    ax[4,0].plot(data_9['Date'], data_9['Weekly_Sales'])     \n\n    \nax[0,0].set_title('Mean sales record by store(0~4)')\nax[0,1].set_title('Mean sales record by store(5~9)')\nax[1,0].set_title('Mean sales record by store(10~14)')\nax[1,1].set_title('Mean sales record by store(15~19)')\nax[2,0].set_title('Mean sales record by store(20~24)')\nax[2,1].set_title('Mean sales record by store(25~29)')\nax[3,0].set_title('Mean sales record by store(30~34)')\nax[3,1].set_title('Mean sales record by store(35~39)')\nax[4,0].set_title('Mean sales record by store(40~)')\n\n\n\nax[0,0].set_ylabel('Mean sales')\nax[0,0].set_xlabel('Date')\nax[0,1].set_ylabel('Mean sales')\nax[0,1].set_xlabel('Date')\nax[1,0].set_ylabel('Mean sales')\nax[1,0].set_xlabel('Date')\nax[1,1].set_ylabel('Mean sales')\nax[1,1].set_xlabel('Date')\nax[2,0].set_ylabel('Mean sales')\nax[2,0].set_xlabel('Date')\nax[2,1].set_ylabel('Mean sales')\nax[2,1].set_xlabel('Date')\nax[3,0].set_ylabel('Mean sales')\nax[3,0].set_xlabel('Date')\nax[3,1].set_ylabel('Mean sales')\nax[3,1].set_xlabel('Date')\nax[4,0].set_ylabel('Mean sales')\nax[4,0].set_xlabel('Date')\n\n\n\nplt.show()","fd11c3d5":"import pandas as pd\nfeatures = pd.read_csv(\"..\/input\/features.csv\")","0a1fcbf8":"import pandas as pd\ntest = pd.read_csv(\"..\/input\/test.csv\")","075bcb37":"import pandas as pd\ntrain = pd.read_csv(\"..\/input\/train.csv\")","39654f3f":"* A suposi\u00e7\u00e3o 1 est\u00e1 correta. Por boxplot, podemos inferir que a loja do tipo A \u00e9 a maior e C \u00e9 a menor\n* Ainda mais, n\u00e3o h\u00e1 \u00e1rea sobreposta em tamanho entre A, B e C. O tipo \u00e9 o melhor preditor para Tamanho\n* Para verificar a suposi\u00e7\u00e3o 2, \u00e9 feito um boxplot mostrando a rela\u00e7\u00e3o entre vendas e tipo","9ce3f094":"* O resultado n\u00e3o \u00e9 t\u00e3o bom. N\u00e3o pode haver rela\u00e7\u00e3o distinta entre tamanho e vendas.\n* Parece um pouco linear\n* Para torn\u00e1-lo mais claro, faceta dados com tipo de loja (A, B, C)","e0fe5337":"scatter(dataset, 'Fuel_Price')\nscatter(dataset, 'Size')\nscatter(dataset, 'CPI')\nscatter(dataset, 'Type')\nscatter(dataset, 'isHoliday')\nscatter(dataset, 'Unemployment')\nscatter(dataset, 'Temperature')\nscatter(dataset, 'Store')\nscatter(dataset, 'Dept')","800a684b":"* Diferente da rela\u00e7\u00e3o de loja e feriado, departamento e feriado n\u00e3o explicam nenhuma rela\u00e7\u00e3o\n* 72 departamento mostra o maior aumento nas vendas durante as f\u00e9rias\n* No entanto, outros n\u00e3o e ainda mais em alguns dopartments as vendas que n\u00e3o s\u00e3o de feriados s\u00e3o maiores.\n* Isso significa que o car\u00e1ter do produto (departamento) \u00e9 diferente da rela\u00e7\u00e3o com as vendas","3b193033":"* Vendas em feriados s\u00e3o um pouco mais que vendas em feriados n\u00e3o","9f0267ce":"###Possivel conclusao####\n\n1. Em conclus\u00e3o, as informa\u00e7\u00f5es mais altas do dia de vendas fornecer\u00e3o poder para prever\n2. A contagem 1 (o maior dia de vendas por departamento e loja) mostra mediana superior \u00e0 contagem 0 (dia normal de vendas)","8258d14e":"1. Como departamento, s\u00e9ries temporais de vendas por loja mostrar\u00e3o tend\u00eancia de vendas\n2. Suposi\u00e7\u00e3o: Como departamento, a loja dar\u00e1 uma sensa\u00e7\u00e3o de n\u00edvel de vendas\n3. Suposi\u00e7\u00e3o_2: Al\u00e9m disso, isso tamb\u00e9m dar\u00e1 o dia das vendas mais altas","64ef590c":"* A tabela de lojas consiste em tr\u00eas colunas ** 1. ID da loja 2. tipo de loja 3. tamanho da loja. **\n* A, B e C s\u00e3o os tipos de lojas e um total de 45 lojas do Walmart est\u00e3o vendendo mercadorias para os clientes\n","30490fe4":"* A mediana de A \u00e9 a mais alta e C \u00e9 a mais baixa\n* Isso significa que lojas com mais tamanhos t\u00eam maior recorde de vendas (a ordem da mediana do tamanho e da mediana das vendas \u00e9 a mesma)","3aa24014":"* Cada departamento mostra os diferentes n\u00edveis de vendas\n* O departamento pode ser a vari\u00e1vel poderosa para prever vendas\n* Quando departamento e tipo de loja s\u00e3o considerados juntos, geralmente o departamento do tipo A mostra o maior recorde de vendas\n\nSuposi\u00e7\u00e3o 4: Tipo e departamento podem ter o efeito de intera\u00e7\u00e3o","a827c57a":"** An\u00e1lise **\n1. As vendas podem responder ao fator tempo e espa\u00e7o\n2. Os registros de vendas da loja s\u00e3o a agrega\u00e7\u00e3o de cada departamento\n3. A vari\u00e1vel de data pode ser dividida em vari\u00e1veis y \/ m \/ w \/ d\n4. A vari\u00e1vel dia pode fornecer muitas informa\u00e7\u00f5es sobre vendas\n5. Dados externos, como feriado nacional dos EUA, ser\u00e3o combinados para adicionar informa\u00e7\u00f5es","387df273":"* A loja pode ser a vari\u00e1vel que fornece informa\u00e7\u00f5es sobre vendas\n* Mas a loja inclui muitas informa\u00e7\u00f5es intr\u00ednsecas de tipo, tamanho e departamento","ec6e8a61":"Holiday e Store n\u00e3o mostram rela\u00e7\u00f5es significativas, mas apenas pequenas vendas mais altas disparam quando hoiliday","3e36db9c":"Pelo gr\u00e1fico de linhas, podemos ver os seguintes\n* O n\u00edvel de vendas \u00e9 diferente por departamento e o n\u00edvel de registro de vendas de um departamento \u00e9 est\u00e1vel\n* Existem alguns pontos altos em janeiro e maio. Portanto, pode haver um evento para altas vendas\n* Alguns departamentos est\u00e3o altamente relacionados com esses eventos. Assim, o recorde de vendas sobe acentuadamente em torno de janeiro ou maio\n\n* Conclus\u00e3o 1: Departamento \u00e9 um bom recurso para prever vendas\n* Couclusion 2: Date (especialmente event) \u00e9 um bom recurso para prever vendas","ded017c5":"* O tipo de lapida\u00e7\u00e3o n\u00e3o fornece informa\u00e7\u00f5es adicionais, exceto a rela\u00e7\u00e3o entre tamanho e tipo","725455a0":"1. Suposi\u00e7\u00e3o: o maior dia de vendas (por exemplo, Cristo mas) fornecer\u00e1 alto poder de previs\u00e3o\n2. Suposi\u00e7\u00e3o: o maior dia de vendas ser\u00e1 diferente por departamento e loja (por exemplo, alguns departamentos n\u00e3o s\u00e3o sens\u00edveis ao Chisrt mas)\n3. Portanto, extraia o dia mais alto e combine esse dia com o conjunto de dados do trem","74f8edf0":"* Vamos fazer um gr\u00e1fico de pizza para mostrar a propor\u00e7\u00e3o dos tipos A, B e C do total de 45 lojas Walmart.\n* Primeiro, vamos agrupar os dados por tipo de loja e ver as figuras descritivas"}}