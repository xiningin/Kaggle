{"cell_type":{"4bb60863":"code","eda13198":"code","aaa86760":"code","1270660a":"code","1b0d9d1f":"code","1918a7b6":"code","d46829a2":"code","1464a08b":"code","bbeebaaa":"code","1371d12e":"code","42f7c7ae":"code","c3af410a":"code","194c487a":"code","aa854f98":"code","d70b8819":"code","ffd689e0":"markdown","5dcf828d":"markdown"},"source":{"4bb60863":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eda13198":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')","aaa86760":"# data frames from dictionary\ncountry = ['spain', 'france']\npopulation = ['11','12']\nlist_label = ['country', 'population']\nlist_column = [country, population]\nzipped = list(zip(list_label, list_column))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","1270660a":"# add a new column\ndf['capital'] = ['madrid','paris']\ndf","1b0d9d1f":"# broadcasting\ndf['income'] = 0 # broadcasting the entire column\ndf","1918a7b6":"# plotting all data\ndata1 = data.loc[:,['Attack', 'Defense', 'Speed']]\ndata1.plot()\nplt.show()","d46829a2":"# subplots\ndata.plot(subplots = True)\nplt.show()","1464a08b":"# hist plot\ndata1.plot(kind = 'hist', y = 'Defense', bins = 50, range = (0,250), normed = True) # range is the range of x axis and normed makes the y values between 0 and 1\n","bbeebaaa":"# histogram subplot with cumulative and non cumulative \nfig, axes = plt.subplots(nrows = 2, ncols = 1)\ndata1.plot(kind = 'hist', y = 'Defense', bins = 50, range = (0,250), normed = True, ax = axes[0])\ndata1.plot(kind = 'hist', y = 'Defense', bins = 50, range = (0,250), normed = True, ax = axes[1], cumulative = True\nplt.savefig('graph.png')\nplt","1371d12e":"# since we don't have dates in our data set, we have to add them\ntime_list = ['2000-11-21', '2000-01-22']\nprint(type(time_list[0]))   # as seen, the date is a string\n\n# to convert it to a datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","42f7c7ae":"# let's take the first 5 lines of the data and add it a time list\ndata2 = data.head()\ndate_list = ['2000-11-20', '2000-01-22', '2001-06-18', '2001-05-27', '2001-07-30']\ndatetime_object = pd.to_datetime(date_list)\ndata2['date'] = datetime_object\n\n# let's change the indexes as dates\ndata2 = data2.set_index('date')\ndata2","c3af410a":"# now we can acces the specific lines according to the dates\nprint(data2.loc['2000-01-22'])\nprint(data2.loc['2001-06-01':'2001-07-30'])","194c487a":"data2.resample('A').mean()","aa854f98":"data2.resample('M').mean()","d70b8819":"# interpolate : filling the NaNs.\ndata2.resample('M').first().interpolate('linear')","ffd689e0":"**Resampling:** Statistical method over different time intervals. Needs string to specify frequency like 'M' for month and 'A' for year.","5dcf828d":"**Indexing Pandas Time Series**"}}