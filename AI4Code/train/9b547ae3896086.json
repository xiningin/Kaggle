{"cell_type":{"b31eeb64":"code","caa25f0e":"code","37e97fb5":"code","842863df":"code","e12d1039":"code","5053da8b":"code","92043dae":"code","a02aec36":"code","64fea1d1":"code","59b4d915":"code","9f182def":"code","48d50a82":"code","65384525":"code","c2be9e56":"code","6d939d58":"code","f950aa47":"code","afd9afd9":"code","e89aacaa":"code","2e23c671":"code","a8163b6f":"code","c7da59bf":"code","6bb57e9f":"code","6cf9a126":"code","30dccdf6":"markdown","ca2aa110":"markdown","af940bf9":"markdown","2d13da8b":"markdown","501c8383":"markdown","cd3fddaa":"markdown","28d8a5f6":"markdown","03a60b44":"markdown","25892a39":"markdown","09bb1572":"markdown"},"source":{"b31eeb64":"# Declare an Array of Strings\nnames = []\n\n# Append two items\nnames.append( \"Bob\" )\nnames.append( \"Carol\" )\nassert( len(names) == 2 ) # Verify\n\n# Print Them Out\nprint( names[ 0 ] )\nprint( names[ 1 ] )\n\n# Remove One Item\nnames.remove( \"Bob\" )\nassert( len(names) == 1 ) # Verify\n\nnames","caa25f0e":"phrase_book: {str:str} = {\n    \"alpha\" : \"A as in Alpha\",\n    \"bravo\" : \"B as in Bravo\",\n    \"charlie\" : \"C is for Charlie\",\n}\n\nphrase = phrase_book[ \"bravo\" ]\n\nassert(\"B as in Bravo\" == phrase)\nprint( phrase )\n\nphrase_book","37e97fb5":"# coin_quantities:{int:int} = {}\n\n# coin_quantities[ 1 ] = 5 # We have 5 pennies\n# coin_quantities[ 5 ] = 4 # We have 4 nickels\n# coin_quantities[ 10 ] = 3 # We have 3 dimes\n# coin_quantities[ 25 ] = 2 # We have 2 quarters\n\ncoin_quantities = {1:5,5:4,10:3,25:2}\n\ncoint_count = coin_quantities[ 5 ]\nprint(coint_count)\n# assert( 2 == quarter_count )\ncoin_quantities","842863df":"oneThroughFive = range(1,6)\n# up to but not including the number on the right.\n# [1,2,3,4,5]\n\nzeroToFour = range(0,5) \n# Up to but not including the number on the right.\n#  [0,1,2,3]\nprint(list(oneThroughFive))\nprint(list(zeroToFour))\n\n","e12d1039":"# Loop through a range 0 to 4:\nfor index in range(0, 5):\n    print(index)\n\n# Loop through a list of names:\npeople = [ \"Bob\", \"Carol\", \"Ted\", \"Alice\" ]\nfor person in people:\n\tprint( person )\n\n","5053da8b":"# Loop until we reach zero:\n\ncountDownFrom = 10 # Set the initial value\n\n# Enter the loop only if the expression is true.\nwhile countDownFrom >= 1:\n\tprint( countDownFrom )\n\t# Increment the count\n# \tcountDownFrom = countDownFrom - 1 \n\tcountDownFrom -= 1 \n\n","92043dae":"age = 20\nnotDriving = True\n\nif age > 88 and notDriving:\n\tprint( f\"May Drink a little. {age}\" )\nelif age >= 21 and notDriving:\n\tprint( f\"May Drink. {age}\" )\nelse:\n\tprint( f\"May Not Drink. {age}\" )\n\n","a02aec36":"# def addTwo(a:int = 0, b:int = 0) -> int:\ndef addTwo(a, b):\n    return a + b\n\naddResult1 = addTwo(11,22)\naddResult2 = addTwo(2, 4)\n\nprint(addResult1)\nprint(addResult2)\n\n","64fea1d1":"def twice(text: str) -> str:\n#     return text + \" zzz \" + text\n    return f\"{text} zzz {text}\"\n\n\ntwiceResult = twice(\"abc\")\nprint(twiceResult)\n\n","59b4d915":"import sys\n\ndef get_smallest(data: [int]) -> int:\n    smallest: int = sys.maxsize\n    #PUT YOUR CODE HERE\n    # loop\n    # if item is smaller than the smallest then its the new smallest\n\n#ANSWER:\n#     for item in data:\n#         if item < smallest:\n#             print(f\"{item} is the new smallest\")\n#             smallest = item\n#         else:\n#             print(item)\n\n    # What are the steps?\n    return smallest\n\n#Sample Data\n#Test function\ndata = [123,597,631,61,93,509]\nresult = get_smallest(data)\n\nprint(result))\n\n","9f182def":"def get_total(data):\n    total = 0\n    for value in data:\n        total = total + value\n    return total\n\nprint(get_total([445,111,555,333,999]))\nprint(get_total([111,333,155]))\n","48d50a82":"def get_reverse(data):\n    quantity = len(data)\n    output = []\n    for index in range(quantity - 1, -1, -1):\n        output.append(data[index])\n    return output\n\nd = [\"AAA\",\"BBB\",\"CCC\"]\nresult = get_reverse(d)\nprint(result)","65384525":"coin_quantities = {}\ncoin_quantities[ 1 ] = 5 # We have 5 pennies\ncoin_quantities[ 5 ] = 4 # We have 4 nickels\ncoin_quantities[ 10 ] = 3 # We have 3 dimes\ncoin_quantities[ 25 ] = 2 # We have 2 quarters\n\ndef coin_total(coin_quantities):\n    value = 0\n    for k in coin_quantities: # this pulls out just the keys 1,5,10,25\n        value = value + coin_quantities[k] * k \n    return value\n\n# another set of coins\ncq2 = {1:9,5:3,10:0,25:8}\n# how can we convert lines 7-10 into a function we can use on cq2?\n\nr1 = coin_total(cq2)\nr2 = coin_total(coin_quantities)\nprint( r1, r2)","c2be9e56":"\ndef get_value(coin_quantities): #wrap in function definition\n    value = 0\n    for k in coin_quantities: # this pulls out just the keys 1,5,10,25\n        value = value + coin_quantities[k] * k \n    return value # change from print to return\n\nright_pocket = {}\nright_pocket[ 1 ] = 5 # We have 5 pennies\nright_pocket[ 5 ] = 4 # We have 4 nickels\nright_pocket[ 10 ] = 3 # We have 3 dimes\nright_pocket[ 25 ] = 2 # We have 2 quarters\n\n# another set of coins\nleft_pocket = {1:9, 5:3, 10:0, 25:8}\n# how can we convert lines 7-10 into a function we can use on cq2?\nprint(get_value(left_pocket))\nprint(get_value(right_pocket))\n\npeople = {\n    \"KEL\":\"Kevin\",\n    \"JDL\": \"John\", \n}\n","6d939d58":"class Dog:\n    # Constructor\n    def __init__(self, name, breed = \"mutt\", message=\"Woof\"):\n        self.name = name\n        self.breed = breed\n        self.message = message\n    \n    def speak(self):\n        print(self.message)\n    \n    def __str__(self):\n        return f\"{self.name} is a {self.breed}.\"\n        \nf = Dog('Fido', \"Mutt\", \"Grrr\")\ns = Dog('Sue', \"Black Lab\")\nt = Dog(\"Toby\", \"Black Lab\")\nprint(t)\n\nprint(f)\n\nprint(s)\n\ns.speak()\n\nf.speak()\nf.message = \"Meow\"\nf.speak()\n","f950aa47":"class Counter:\n        #CONSTRUCTOR\n        def __init__(self):\n                self.count = 0\n\n        def increment(self, value=1):\n                self.count += value\n\n        def decrement(self, value=1):\n                self.count -= value\n\n        def reset(self):\n                 self.count = 0\n","afd9afd9":"# TEST \u2013 Create an instance of the Class\ncounter = Counter()\n# the initial counter value is 0\n\ncounter.increment(100)\ncounter.increment()\ncounter.increment()\n# the counter's value is now 3\nprint(counter.count)\n\ncounter.decrement(25)\n# the counter's value is now 2\nprint(counter.count)\n\ncounter.reset()\n# the counter's value is now 0\nprint(counter.count)\n\n","e89aacaa":"class Person:\n    \n    def __init__(self, first, last):\n        self.first = first\n        self.last = last\n        self.score = 0\n        \n    def get_full_name(self):\n        return f\"{self.last}, {self.first}\"\n\npeople = [\n    Person(\"Kevin\", \"Long\"),\n    Person(\"Nina\", \"Marie\"),\n]\nfor p in people:\n    print( p.get_full_name() )\n    \nclass Employee(Person):\n    pass\n\nclass Boss(Person):\n    pass\n\npeople = [\n    Employee(\"Kevin\", \"Long\"),\n    Boss(\"Nina\", \"Marie\"),\n]\n\npeople[1].score = 13\n\nfor dude in people:\n    print( dude.get_full_name(), dude.score )\n \n","2e23c671":"playing = True\nwhile playing:\n    user_value = input(\"Enter data (blank line to quit):\")\n    print(user_value)\n    if user_value == \"\":\n        playing = False\n","a8163b6f":"FIRST = 0\nLAST = 1\npeople = [\n    [\"Kevin\",\"Long\"],\n    [\"Nina\",\"Marie\"]\n]\nprint(people[1][FIRST])\nprint(people[1][LAST])","c7da59bf":"from sys import getsizeof\nprint(getsizeof(123))","6bb57e9f":"matrix_board = [\n    [0,0,0],\n    [0,0,0],\n    [0,0,0],\n]\n\nmatrix_board[1][1] = 1\n\nfor row in matrix_board:\n    for column in row:\n        print(column, end=\" \")\n    print(\" end row\")\n\nprint(\"---\")\nfor y in range(0,len(matrix_board)):\n    for x in range(len(matrix_board[y])):\n        print(matrix_board[y][x], end=\" \")\n    print(\" end row\")\n","6cf9a126":"while True:\n    print(\"KEVIN\", end=\" \")\n    ","30dccdf6":"# Lists","ca2aa110":"Using Lists instead of classes:","af940bf9":"# Ranges","2d13da8b":"# Dictionaries with Numeric Keys","501c8383":"# Dict - Dictionary","cd3fddaa":"# Loops","28d8a5f6":"# While Loops","03a60b44":"# EXERCISE - FUNCTIONS:","25892a39":"# Functions","09bb1572":"# Conditionals \u2013 If \/ Else"}}