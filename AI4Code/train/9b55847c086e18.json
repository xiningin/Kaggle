{"cell_type":{"9de8d59a":"code","b6758ce2":"code","18359582":"code","d66a815d":"code","80293be7":"code","26a20992":"code","237c16df":"code","5e654622":"code","e58848d2":"code","d383c899":"code","e5340977":"code","47e3336a":"code","0bec040d":"code","25c853ee":"code","fe40b252":"code","dce150d8":"code","d039322c":"code","ab6c2e50":"code","cf55d0fc":"code","4ab739b5":"code","68b270ab":"code","7fad2baa":"code","91e48a04":"code","e1100a4a":"code","eb47f12a":"code","13045b91":"code","cf412aed":"code","8726a50f":"code","5985bd36":"code","b3cf9216":"code","fbabcf34":"code","108df8e3":"code","a3a850a4":"code","0025cc65":"code","9e664441":"code","f7a720de":"code","fdf766c4":"code","3afadf92":"code","222040a8":"code","5e565cde":"code","04f487ce":"code","d0503298":"code","779ddd12":"code","7feb653d":"code","0aff01dc":"code","7b2852b4":"code","801dc6f4":"code","bd4c16d2":"code","cc774bdb":"code","84378f27":"code","b66b5b1c":"code","b3fafc2c":"markdown"},"source":{"9de8d59a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b6758ce2":"# Importar librerias y funciones\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set() # set seaborn default plots\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score","18359582":"# Leer datos y llevarlos a la estructura Data Frame\ntitanic_data = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","d66a815d":"test.head()","80293be7":"train.head()","26a20992":"print(\"train tiene \",train.shape[0], \" filas y \", train.shape[1], \" columnas\")","237c16df":"print(\"test tiene \",test.shape[0], \" filas y \", test.shape[1], \" columnas\")","5e654622":"train.info()","e58848d2":"test.info()","d383c899":"train.isnull().sum()","e5340977":"test.isnull().sum()","47e3336a":"def bar_chart(feature):\n    survived = train[train['Survived'] == 1][feature].value_counts()\n    dead = train[train['Survived'] == 0][feature].value_counts()\n    df = pd.DataFrame([survived, dead])\n    df.index = ['Survived', 'Dead']\n    df.plot(kind='bar', stacked=True, figsize=(10,5))","0bec040d":"bar_chart('Sex')","25c853ee":"bar_chart('Pclass')","fe40b252":"bar_chart('SibSp')","dce150d8":"bar_chart('Parch')","d039322c":"train_test_data = [train, test]\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","ab6c2e50":"train['Title'].value_counts()","cf55d0fc":"test['Title'].value_counts()","4ab739b5":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2,\n                \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Mlle\": 3, \"Col\": 3, \"Major\": 3, \"Don\": 3, \"Mme\": 3, \"Sir\": 3, \"Ms\": 3, \"Capt\": 3,\n                \"Jonkheer\": 3, \"Countess\": 3, \"Lady\": 3, \"Dona\": 3 }\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","68b270ab":"train.head()","7fad2baa":"test.head()","91e48a04":"bar_chart('Title')","e1100a4a":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","eb47f12a":"bar_chart('Sex')","13045b91":"# fill missing age with median age for each title\ntrain['Age'].fillna(train.groupby('Title')['Age'].transform('median'), inplace=True)\ntest['Age'].fillna(train.groupby('Title')['Age'].transform('median'), inplace=True)","cf412aed":"facet = sns.FacetGrid(train, hue='Survived', aspect=4)\nfacet.map(sns.kdeplot, 'Age', shade=True)\nfacet.set(xlim = (0, train['Age'].max()))\nfacet.add_legend()\n\nplt.show()","8726a50f":"for dataset in train_test_data:\n    dataset.loc[dataset['Age'] <= 18, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 23), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 23) & (dataset['Age'] <= 33), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 41), 'Age'] = 3,\n    dataset.loc[dataset['Age'] > 41, 'Age'] = 4","5985bd36":"train.head()","b3cf9216":"bar_chart('Age')","fbabcf34":"Pclass1 = train[train['Pclass'] == 1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass'] == 2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass'] == 3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class', '2nd class', '3rd class']\ndf.plot(kind='bar', stacked=True, figsize=(10, 5))","108df8e3":"# try with 'C' instead of 'S' because of the Embarked proportions\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","a3a850a4":"train.head()","0025cc65":"embarked_mapping = {'S': 0, 'C': 1, 'Q': 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","9e664441":"# fill missing Fare with median fare for each Pclass\ntrain['Fare'].fillna(train.groupby('Pclass')['Fare'].transform('median'), inplace=True)\ntest['Fare'].fillna(test.groupby('Pclass')['Fare'].transform('median'), inplace=True)","f7a720de":"facet = sns.FacetGrid(train, hue='Survived', aspect=4)\nfacet.map(sns.kdeplot, 'Fare', shade=True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n\nplt.show()","fdf766c4":"facet = sns.FacetGrid(train, hue='Survived', aspect=4)\nfacet.map(sns.kdeplot, 'Fare', shade=True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0,100)","3afadf92":"for dataset in train_test_data:\n    dataset.loc[dataset['Fare'] <= 17, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[dataset['Fare'] > 100, 'Fare'] = 3    ","222040a8":"train.head()","5e565cde":"train.Cabin.value_counts()","04f487ce":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","d0503298":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class', '2nd class', '3rd class']\ndf.plot(kind='bar', stacked=True, figsize=(10, 5))","779ddd12":"cabin_mapping = {'A': 0, 'B': 0.4, 'C': 0.8, 'D': 1.2, 'E': 1.6, 'F': 2, 'G': 2.4, 'T': 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","7feb653d":"# fill missing Cabin with median fare for each Pclass\ntrain['Cabin'].fillna(train.groupby('Pclass')['Cabin'].transform('median'), inplace=True)\ntest['Cabin'].fillna(test.groupby('Pclass')['Cabin'].transform('median'), inplace=True)","0aff01dc":"# familiy size\ntrain['FamilySize'] = train['SibSp'] + train['Parch'] + 1\ntest['FamilySize'] = test['SibSp'] + test['Parch'] + 1","7b2852b4":"facet = sns.FacetGrid(train, hue='Survived', aspect=4)\nfacet.map(sns.kdeplot, 'FamilySize', shade=True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","801dc6f4":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","bd4c16d2":"train.head()","cc774bdb":"features_drop = ['Ticket', 'SibSp', 'Parch', 'Name']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","84378f27":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","b66b5b1c":"train_data.head()","b3fafc2c":"# **Bar Chart for Categorical Features**\n- Pclass\n- Sex\n- SibSp (# of siblings and spouse)\n- Parch (# of parents and children)\n- Embarked\n- Cabin"}}