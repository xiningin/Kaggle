{"cell_type":{"146d3411":"code","345b8532":"code","4c55c85e":"code","42f2dc0d":"code","e657d780":"code","9b632666":"code","a5ef29b8":"code","06462876":"code","47c298a4":"code","eb719be7":"code","160c830a":"code","6049ddc9":"code","b379345b":"code","7f3e04bb":"code","0e9e5448":"code","820ec129":"code","8034ee8b":"code","b6c62862":"code","fd0a0755":"code","af112e98":"code","950ab236":"code","d521fe38":"code","13a27427":"code","848265a8":"code","839516b4":"code","0dc5e6e3":"code","b26b7740":"code","87b6bd78":"code","ed8b1c35":"code","a9fa0385":"code","70669dbf":"code","467da66a":"code","ac55a016":"code","5beaf6e4":"code","96cd5e80":"code","a62ac3bf":"code","debf0a73":"markdown"},"source":{"146d3411":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","345b8532":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","4c55c85e":"train.head()","42f2dc0d":"train.columns","e657d780":"#Visit the Label Values\n\ntrain.SalePrice.describe()\n\n#Oh my, look at the standard deviation!\nimport seaborn as sns\nsns.distplot(train.SalePrice)\n\n# Right-Skewed and Peaky\n# We are going to need a robust model and some clever feature engineering","9b632666":"# And considering when these homes were sold... This is going to be a fun task\ntrain.YrSold.unique()","a5ef29b8":"# Let's start by getting rid of nulls\n#Find and count missing values\ntrain.isnull().sum().sort_values(ascending=False).head(20)\n\n#Considering that there are 81 features and 1460 entries, this data is not in poor shape.\n#Especially since it looks like many of these null values may just be because a home doesn't have a Garage, etc.\n#Let's go one by one","06462876":"##  **Handling Nulls**\n#Pool Quality\ntrain.PoolQC.unique()\ntrain['PoolQC'] = train.PoolQC.fillna('No_Pool')\n\n#New feature for home having a pool, the number of those who have one is too small for other data\ntrain['HasPool']=0\ntrain.loc[train['PoolArea']>0,'HasPool']=1\ntrain = train.drop(['PoolArea','PoolQC'], axis=1)\n\n#Misc Feature\ntrain.MiscFeature.unique()\ntrain['MiscFeature'] = train.MiscFeature.fillna('No_Misc_Feature')\n\n#Alley\ntrain.Alley.unique()\ntrain['Alley'] = train.Alley.fillna('No_Alley_Access')\n\n#Fence\ntrain.Fence.unique()\ntrain['Fence'] = train.Fence.fillna('No_Fence')\n\n#Fireplace Quality\ntrain.FireplaceQu.unique()\ntrain['FireplaceQu'] = train.FireplaceQu.fillna('No_Fireplace')\n\n#How many feet of street attached to lot aka Lot Frontage\ntrain.LotFrontage.unique()\ntrain['LotFrontage'] = train.LotFrontage.fillna(0)\n\n#Garage Condition\ntrain.GarageCond.unique()\ntrain['GarageCond'] = train.GarageCond.fillna('No_Garage')\n\n#Garage Type\ntrain.GarageType.unique()\ntrain['GarageType'] = train.GarageCond.fillna('No_Garage')\n\n#Year Garage was built\ntrain.GarageYrBlt.unique()\ntrain['GarageYrBlt'] = train.GarageCond.fillna('No_Garage')\n\n#Garage's Interior Finish\ntrain.GarageFinish.unique()\ntrain['GarageFinish'] = train.GarageFinish.fillna('No_Garage')\n\n#Garage's Quality\ntrain.GarageQual.unique()\ntrain['GarageQual'] = train.GarageQual.fillna('No_Garage')\n\n#New category for homes with no garage - may signify a type of home like condo\ntrain['NoGarage'] = 0\ntrain.loc[train['GarageQual']=='No_Garage','NoGarage']=1\n\n#Basement Finish Type 2\ntrain['BsmtFinType2'] = train.BsmtFinType2.fillna('No_Basement')\n\n#Basment Exposure\ntrain['BsmtExposure'] = train.BsmtExposure.fillna('No_Basement')\n\n#Basement Condition\ntrain['BsmtCond'] = train.BsmtCond.fillna('No_Basement')\n\n#Basement Quality\ntrain['BsmtQual'] = train.BsmtQual.fillna('No_Basement')\n\n#Basement Finish Type 1\ntrain['BsmtFinType1'] = train.BsmtFinType1.fillna('No_Basement')\n\n#New category for homes with no basement - may signify a type of home like condo\ntrain['No_Basement'] = 0\ntrain.loc[train['BsmtQual']=='No_Basement','No_Basement'] = 1\n\n#Masonry Veneer Area\ntrain['MasVnrArea'] = train.MasVnrArea.fillna(0)\n\n#Masonry Type\ntrain['MasVnrType'] = train.MasVnrType.fillna('No_Veneer')\n\n#Electrical\ntrain.Electrical.unique()\ntrain.Electrical.value_counts()\ntrain['Electrical'] = train.Electrical.fillna('SBrkr')","47c298a4":"# One Hot Encoding for categorical variables\ncategorical_vars = []\nfor x in train.columns:\n    if train[x].dtype==object:\n        categorical_vars.append(x)\ntrain = train.join(pd.get_dummies(train[categorical_vars]))\ntrain = train.drop(categorical_vars,axis=1)","eb719be7":"#So now the purely categorical features are gone, right? Nope\ntrain.head()\n\n","160c830a":"train['TotalSF'] = train['TotalBsmtSF'] + train['1stFlrSF'] + train['2ndFlrSF']\nimport matplotlib.pyplot as plt\nplt.scatter(train['TotalSF'],train['SalePrice'])\n# This looks like a good feature - I wonder what's going on with those outliers, though - 8000 and 12000 SF but selling for 200k?","6049ddc9":"Incomplete_Homes = train.loc[train['SaleCondition_Partial']>0]\nplt.scatter(Incomplete_Homes['OverallCond'],Incomplete_Homes['SalePrice'])\n# Interesting... Nearly every home that shows as Incomplete also shows as OverallCondition of 5\n# Maybe we should introduce this as a new category to increase the efficacy of OverallCond","b379345b":"# Hopefully we can remove some of these extraneous 5's and break it out into categories\ntrain.OverallCond.hist()","7f3e04bb":"train.loc[train['SaleCondition_Partial']>0,'OverallCond'] = 'Incomplete'\ntrain.loc[train['OverallCond']==5].Id.count()","0e9e5448":"# What values from the dataset are numerical but should be categorical?\n#MSSubClass, YrSold, MoSold, OverallCond, OverallQual\ntrain = train.join(pd.get_dummies(train['MSSubClass'], prefix='SubClass'))\ntrain = train.join(pd.get_dummies(train['YrSold'], prefix='YrSold'))\ntrain = train.join(pd.get_dummies(train['MoSold'], prefix='Month'))\ntrain = train.join(pd.get_dummies(train['OverallCond'],prefix='OverallCond'))\ntrain = train.join(pd.get_dummies(train['OverallQual'],prefix='OverallQual'))","820ec129":"train = train.drop(['MSSubClass', 'MoSold', 'OverallCond', 'OverallQual'],axis=1)\n#YrSold not dropped yet, so it can be used in the future for more features","8034ee8b":"plt.scatter(train['TotalSF'],train['SalePrice'])\n","b6c62862":"# Let's try and see if we can map out what homes are on the younger side and what homes are on the older side\ntrain.YearBuilt.mean() #1971\ntrain.YearBuilt.std() #30\n\n# 1 standard deviation outliers for newer and older homes\ntrain['OldHome'] = 0\ntrain.loc[train['YearBuilt']<1941, 'OldHome'] = 1\ntrain['NewHome'] = 0\ntrain.loc[train['YearBuilt']>2001,'NewHome'] = 1\n\n","fd0a0755":"#Try and find out of normal \ntrain.SalePrice.mean() #180921\ntrain.SalePrice.std() #79442\n# NoRidge, NridgHt, StoneBr, Timber let's check these out\ntrain.loc[train['Neighborhood_NoRidge']==1].SalePrice.mean() #335295\ntrain.loc[train['Neighborhood_NridgHt']==1].SalePrice.mean() #316270\ntrain.loc[train['Neighborhood_StoneBr']==1].SalePrice.mean() #310499\ntrain.loc[train['Neighborhood_Timber']==1].SalePrice.mean() #242247\n","af112e98":"train['PricePerSF'] = train['SalePrice']\/train['TotalSF']","950ab236":"train.PricePerSF.mean() #69\ntrain.PricePerSF.std() #15\n#Outliers above 84\ntrain.loc[train['Neighborhood_NoRidge']==1].PricePerSF.mean() #82.67\ntrain.loc[train['Neighborhood_NridgHt']==1].PricePerSF.mean() #88.61\ntrain.loc[train['Neighborhood_StoneBr']==1].PricePerSF.mean() #89.28\ntrain.loc[train['Neighborhood_Timber']==1].PricePerSF.mean() #77.88\n\n#Calculate relative age of the home, start at 1\ntrain['RelativeAge'] = train['YrSold'] - train['YearRemodAdd'] + 1\n\n#Outliers above 85\ntrain.loc[(train['Neighborhood_NoRidge']==1) & (train['RelativeAge']<15)].PricePerSF.mean() #85.39\ntrain.loc[(train['Neighborhood_NridgHt']==1) & (train['RelativeAge']<15)].PricePerSF.mean() #88.61\ntrain.loc[(train['Neighborhood_StoneBr']==1) & (train['RelativeAge']<15)].PricePerSF.mean() #97.83\ntrain.loc[(train['Neighborhood_Timber']==1) & (train['RelativeAge']<15)].PricePerSF.mean() #85\n\n#These neighborhoods seem to have more premium homes, especially when built in the last few years\n# Let's create a category for them: 'PremiumHome'\n\ntrain['PremiumHome'] = 0\ntrain.loc[((train['Neighborhood_NoRidge']==1) | (train['Neighborhood_NridgHt']==1) | (train['Neighborhood_StoneBr']==1) | (train['Neighborhood_Timber']==1))&(train['RelativeAge']<15), 'PremiumHome'] = 1","d521fe38":"train = train.drop('YrSold', axis=1)\ntrain = train.drop('PricePerSF',axis=1)","13a27427":"#Let's start Machine Learning\nfrom sklearn.model_selection import train_test_split\n\ny=train['SalePrice']\nX= train.drop('SalePrice', axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3)","848265a8":"# Random Forest Regression\nfrom sklearn.ensemble import RandomForestRegressor\n\nrfreg = RandomForestRegressor(n_estimators=500)\n\nrfreg.fit(X_train, y_train)\nrfreg.score(X_test, y_test)","839516b4":"#Now to retrofit the test data\ntest.isnull().sum().sort_values(ascending=False).head(20)","0dc5e6e3":"##  **Handling Nulls**\n#Pool Quality\ntest.PoolQC.unique()\ntest['PoolQC'] = test.PoolQC.fillna('No_Pool')\n\n#New feature for home having a pool, the number of those who have one is too small for other data\ntest['HasPool']=0\ntest.loc[test['PoolArea']>0,'HasPool']=1\ntest = test.drop(['PoolArea','PoolQC'], axis=1)\n\n#Misc Feature\ntest.MiscFeature.unique()\ntest['MiscFeature'] = test.MiscFeature.fillna('No_Misc_Feature')\n\n#Alley\ntest.Alley.unique()\ntest['Alley'] = test.Alley.fillna('No_Alley_Access')\n\n#Fence\ntest.Fence.unique()\ntest['Fence'] = test.Fence.fillna('No_Fence')\n\n#Fireplace Quality\ntest.FireplaceQu.unique()\ntest['FireplaceQu'] = test.FireplaceQu.fillna('No_Fireplace')\n\n#How many feet of street attached to lot aka Lot Frontage\ntest.LotFrontage.unique()\ntest['LotFrontage'] = test.LotFrontage.fillna(0)\n\n#Garage Condition\ntest.GarageCond.unique()\ntest['GarageCond'] = test.GarageCond.fillna('No_Garage')\n\n#Garage Type\ntest.GarageType.unique()\ntest['GarageType'] = test.GarageCond.fillna('No_Garage')\n\n#Year Garage was built\ntest.GarageYrBlt.unique()\ntest['GarageYrBlt'] = test.GarageCond.fillna('No_Garage')\n\n#Garage's Interior Finish\ntest.GarageFinish.unique()\ntest['GarageFinish'] = test.GarageFinish.fillna('No_Garage')\n\n#Garage's Quality\ntest.GarageQual.unique()\ntest['GarageQual'] = test.GarageQual.fillna('No_Garage')\n\n#New category for homes with no garage - may signify a type of home like condo\ntest['NoGarage'] = 0\ntest.loc[test['GarageQual']=='No_Garage','NoGarage']=1\n\n#Basement Finish Type 2\ntest['BsmtFinType2'] = test.BsmtFinType2.fillna('No_Basement')\n\n#Basment Exposure\ntest['BsmtExposure'] = test.BsmtExposure.fillna('No_Basement')\n\n#Basement Condition\ntest['BsmtCond'] = test.BsmtCond.fillna('No_Basement')\n\n#Basement Quality\ntest['BsmtQual'] = test.BsmtQual.fillna('No_Basement')\n\n#Basement Finish Type 1\ntest['BsmtFinType1'] = test.BsmtFinType1.fillna('No_Basement')\n\n#New category for homes with no basement - may signify a type of home like condo\ntest['No_Basement'] = 0\ntest.loc[test['BsmtQual']=='No_Basement','No_Basement'] = 1\n\n#Masonry Veneer Area\ntest['MasVnrArea'] = test.MasVnrArea.fillna(0)\n\n#Masonry Type\ntest['MasVnrType'] = test.MasVnrType.fillna('No_Veneer')\n\n#Electrical\ntest.Electrical.unique()\ntest.Electrical.value_counts()\ntest['Electrical'] = test.Electrical.fillna('SBrkr')\n\n#MSZoning\ntest.MSZoning.unique()\ntest.MSZoning.value_counts()\ntest['MSZoning'] = test.MSZoning.fillna('RM')\n\n#Functional\ntest.Functional.unique()\ntest.Functional.value_counts()\ntest['Functional'] = test.Functional.fillna('Typ')\n\n#Utilities\ntest.Utilities.unique()\ntest['Utilities'] = test.Utilities.fillna('AllPub')\n\n#BsmtHalfBath\ntest.BsmtHalfBath.value_counts()\ntest['BsmtHalfBath'] = test.BsmtHalfBath.fillna(0)\n\n#BsmtFullBath\ntest.BsmtFullBath.value_counts()\ntest['BsmtFullBath'] = test.BsmtFullBath.fillna(0)\n\n#KitchenQual\ntest.loc[test['KitchenQual'].isna(),'OverallQual']\ntest['KitchenQual'] = test.KitchenQual.fillna('TA')\n\n#BsmtFinSF1, BsmtFinSF2, TotalBsmtSF, BsmtUnfSF\ntest.loc[test['BsmtFinSF1'].isna(), 'YearBuilt']\ntest['BsmtFinSF1'] = test.BsmtFinSF1.fillna(0)\ntest['BsmtFinSF2'] = test.BsmtFinSF2.fillna(0)\ntest['TotalBsmtSF'] = test.TotalBsmtSF.fillna(0)\ntest['BsmtUnfSF'] = test.BsmtUnfSF.fillna(0)\n\n#Exterior1st\ntest.loc[test['YearBuilt']==1940].Exterior1st.value_counts()\ntest['Exterior1st'] = test.Exterior1st.fillna('Wd Sdng')\ntest['Exterior2nd'] = test.Exterior2nd.fillna('Wd Sdng')\n\n#GarageCars, GarageArea\ntest.loc[test['GarageArea'].isna()]\ntest['GarageArea'] = test.GarageArea.fillna(0)\ntest['GarageCars'] = test.GarageCars.fillna(0)\n\n#SaleType\ntest.SaleType.value_counts()\ntest['SaleType'] = test.SaleType.fillna('Typ')","b26b7740":"#Now to retrofit the test data\ntest.isnull().sum().sort_values(ascending=False).head(20)","87b6bd78":"# One Hot Encoding for categorical variables\ncategorical_vars = []\nfor x in test.columns:\n    if test[x].dtype==object:\n        categorical_vars.append(x)\ntest = test.join(pd.get_dummies(test[categorical_vars]))\ntest = test.drop(categorical_vars,axis=1)\n","ed8b1c35":"#Create TotalSF Feature\ntest['TotalSF'] = test['TotalBsmtSF'] + test['1stFlrSF'] + test['2ndFlrSF']\n\n#Create Incomplete Homes Feature\ntest.loc[test['SaleCondition_Partial']>0,'OverallCond'] = 'Incomplete'\ntest","a9fa0385":"# One Hot Encoding for Test Numerical features\ntest = test.join(pd.get_dummies(test['MSSubClass'], prefix='SubClass'))\ntest = test.join(pd.get_dummies(test['YrSold'], prefix='YrSold'))\ntest = test.join(pd.get_dummies(test['MoSold'], prefix='Month'))\ntest = test.join(pd.get_dummies(test['OverallCond'],prefix='OverallCond'))\ntest = test.join(pd.get_dummies(test['OverallQual'],prefix='OverallQual'))\n#Now Drop\ntest = test.drop(['MSSubClass', 'MoSold', 'OverallCond', 'OverallQual'],axis=1)","70669dbf":"#Outlier Age Homes\ntest['OldHome'] = 0\ntest.loc[test['YearBuilt']<1941, 'OldHome'] = 1\ntest['NewHome'] = 0\ntest.loc[test['YearBuilt']>2001,'NewHome'] = 1","467da66a":"#Calculate relative age of the home, start at 1\ntest['RelativeAge'] = test['YrSold'] - test['YearRemodAdd'] + 1\n\n#These neighborhoods seem to have more premium homes, especially when built in the last few years\n# Let's create a category for them: 'PremiumHome'\n\ntest['PremiumHome'] = 0\ntest.loc[((test['Neighborhood_NoRidge']==1) | (test['Neighborhood_NridgHt']==1) | (test['Neighborhood_StoneBr']==1) | (test['Neighborhood_Timber']==1))&(test['RelativeAge']<15), 'PremiumHome'] = 1","ac55a016":"#Final fitting of the test df\nzerocols = ['Utilities_NoSeWa', 'Condition2_RRAe', 'Condition2_RRAn', 'Condition2_RRNn', 'HouseStyle_2.5Fin', 'RoofMatl_ClyTile', 'RoofMatl_Membran', \n'RoofMatl_Metal', 'RoofMatl_Roll', 'Exterior1st_ImStucc', 'Exterior1st_Stone', 'Exterior2nd_Other', 'Heating_Floor', 'Heating_OthW', \n'Electrical_Mix', 'GarageQual_Ex', 'MiscFeature_TenC']\nfor x in zerocols:\n    test[x]=0\n\nX['SaleType_Typ'] = 0\nX['SubClass_150'] = 0\n","5beaf6e4":"test = test.drop('YrSold', axis=1)\n\nX = X.sort_index(axis=1)\ntest = test.sort_index(axis=1)","96cd5e80":"#Now let's start the ML\nrfreg = RandomForestRegressor(n_estimators=500)\n\nrfreg.fit(X,y)\nsubmission = rfreg.predict(test)","a62ac3bf":"submission = pd.DataFrame(submission)\nsubmission.to_csv('HousePricesSubmission.csv')","debf0a73":"# **Data fields**\nHere's a brief version of what you'll find in the data description file.\n\nSalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n\nMSSubClass: The building class\n\nMSZoning: The general zoning classification\n\nLotFrontage: Linear feet of street connected to property\n\nLotArea: Lot size in square feet\n\nStreet: Type of road access\n\nAlley: Type of alley access\n\nLotShape: General shape of property\n\nLandContour: Flatness of the property\n\nUtilities: Type of utilities available\n\nLotConfig: Lot configuration\n\nLandSlope: Slope of property\n\nNeighborhood: Physical locations within Ames city limits\n\nCondition1: Proximity to main road or railroad\n\nCondition2: Proximity to main road or railroad (if a second is present)\n\nBldgType: Type of dwelling\n\nHouseStyle: Style of dwelling\n\nOverallQual: Overall material and finish quality\n\nOverallCond: Overall condition rating\n\nYearBuilt: Original construction date\n\nYearRemodAdd: Remodel date\n\nRoofStyle: Type of roof\n\nRoofMatl: Roof material\n\nExterior1st: Exterior covering on house\n\nExterior2nd: Exterior covering on house (if more than one material)\n\nMasVnrType: Masonry veneer type\n\nMasVnrArea: Masonry veneer area in square feet\n\nExterQual: Exterior material quality\n\nExterCond: Present condition of the material on the exterior\n\nFoundation: Type of foundation\n\nBsmtQual: Height of the basement\n\nBsmtCond: General condition of the basement\n\nBsmtExposure: Walkout or garden level basement walls\n\nBsmtFinType1: Quality of basement finished area\n\nBsmtFinSF1: Type 1 finished square feet\n\nBsmtFinType2: Quality of second finished area (if present)\n\nBsmtFinSF2: Type 2 finished square feet\n\nBsmtUnfSF: Unfinished square feet of basement area\n\nTotalBsmtSF: Total square feet of basement area\n\nHeating: Type of heating\n\nHeatingQC: Heating quality and condition\n\nCentralAir: Central air conditioning\n\nElectrical: Electrical system\n\n1stFlrSF: First Floor square feet\n\n2ndFlrSF: Second floor square feet\n\nLowQualFinSF: Low quality finished square feet (all floors)\n\nGrLivArea: Above grade (ground) living area square feet\n\nBsmtFullBath: Basement full bathrooms\n\nBsmtHalfBath: Basement half bathrooms\n\nFullBath: Full bathrooms above grade\n\nHalfBath: Half baths above grade\n\nBedroom: Number of bedrooms above basement level\n\nKitchen: Number of kitchens\n\nKitchenQual: Kitchen quality\n\nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n\nFunctional: Home functionality rating\n\nFireplaces: Number of fireplaces\n\nFireplaceQu: Fireplace quality\n\nGarageType: Garage location\n\nGarageYrBlt: Year garage was built\n\nGarageFinish: Interior finish of the garage\n\nGarageCars: Size of garage in car capacity\n\nGarageArea: Size of garage in square feet\n\nGarageQual: Garage quality\n\nGarageCond: Garage condition\n\nPavedDrive: Paved driveway\n\nWoodDeckSF: Wood deck area in square feet\n\nOpenPorchSF: Open porch area in square feet\n\nEnclosedPorch: Enclosed porch area in square feet\n\n3SsnPorch: Three season porch area in square feet\n\nScreenPorch: Screen porch area in square feet\n\nPoolArea: Pool area in square feet\n\nPoolQC: Pool quality\n\nFence: Fence quality\n\nMiscFeature: Miscellaneous feature not covered in other categories\n\nMiscVal: $Value of miscellaneous feature\n\nMoSold: Month Sold\n\nYrSold: Year Sold\n\nSaleType: Type of sale\n\nSaleCondition: Condition of sale\n\n---\n"}}