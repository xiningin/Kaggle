{"cell_type":{"29f28a2b":"code","80ca69aa":"code","dfef8a1a":"code","592b2724":"code","27574391":"code","ba2707d1":"code","026f660e":"code","3f783b1b":"code","72f9af30":"code","0ac887cd":"code","9572674d":"code","2ba9cc9c":"code","067ee3c7":"code","9ff963b7":"code","a5486f3a":"code","2d85a76e":"code","48028b52":"code","1996a1e5":"code","73cdb8dd":"code","181d7fe0":"code","8a2a6301":"code","764802d1":"code","0c536585":"code","580b6862":"code","d49226cf":"code","01fdb4cf":"code","658d1132":"markdown"},"source":{"29f28a2b":"import pandas as pd\nimport os\nfrom skimage.transform import resize\nfrom skimage.io import imread\nimport numpy as np\nimport matplotlib.pyplot as plt","80ca69aa":"Categories=['NORMAL','PNEUMONIA']","dfef8a1a":"flat_data_arr=[]#input array\ntarget_arr=[] #output array\ndatadirTrain='..\/input\/chest-xray-pneumonia\/chest_xray\/train' \ndatadirTest='..\/input\/chest-xray-pneumonia\/chest_xray\/test' ","592b2724":"# x\u1eed l\u00fa d\u1eef li\u1ec7u \u1ea3nh\nfor i in Categories:\n    print(f'loading... category : {i}')\n    path=os.path.join(datadirTrain,i)\n    for img in os.listdir(path):\n        img_array=imread(os.path.join(path,img))\n        img_resized=resize(img_array,(100,100,3))\n        flat_data_arr.append(img_resized.flatten())\n        target_arr.append(Categories.index(i))\n    print(f'loaded category:{i} successfully')\nflat_data=np.array(flat_data_arr)\ntarget=np.array(target_arr)\ndf=pd.DataFrame(flat_data)\ndf['Target']=target\ndf\n","27574391":"df.shape","ba2707d1":"# c\u00e1c thu\u1ed9c t\u00ednh X ()\nx=df.iloc[:,:-1]\n# ph\u00e2n l\u1edbp y 0 l\u00e0 kh\u00f4ng b\u1ecb vi\u00eam ph\u1ed5i 1 l\u00e0 b\u1ecb\ny=df.iloc[:,-1]","026f660e":"# chia d\u1eef li\u1ec7u train test\n# stratifyTham s\u1ed1 n\u00e0y t\u1ea1o ra s\u1ef1 ph\u00e2n t\u00e1ch \u0111\u1ec3 t\u1ef7 l\u1ec7 c\u00e1c gi\u00e1 tr\u1ecb trong m\u1eabu \u0111\u01b0\u1ee3c t\u1ea1o ra s\u1ebd gi\u1ed1ng v\u1edbi t\u1ef7 l\u1ec7 c\u00e1c gi\u00e1 tr\u1ecb \u0111\u01b0\u1ee3c cung c\u1ea5p cho tham s\u1ed1 stratify.\n#V\u00ed d\u1ee5: n\u1ebfu bi\u1ebfn yl\u00e0 m\u1ed9t bi\u1ebfn ph\u00e2n lo\u1ea1i nh\u1ecb ph\u00e2n v\u1edbi c\u00e1c gi\u00e1 tr\u1ecb 0v\u00e0 1v\u00e0 c\u00f3 25% s\u1ed1 kh\u00f4ng v\u00e0 75% gi\u00e1 tr\u1ecb, stratify=ys\u1ebd \u0111\u1ea3m b\u1ea3o r\u1eb1ng ph\u1ea7n t\u00e1ch ng\u1eabu nhi\u00ean c\u1ee7a b\u1ea1n c\u00f3 25% s\u1ed1 0v\u00e0 75% s\u1ed1 1.\n#n\u1ebfu b\u1ea1n kh\u00f4ng ch\u1ec9 \u0111\u1ecbnh random_statem\u00e3 trong m\u00e3 c\u1ee7a m\u00ecnh th\u00ec m\u1ed7i l\u1ea7n b\u1ea1n ch\u1ea1y (th\u1ef1c thi) m\u00e3 c\u1ee7a m\u00ecnh s\u1ebd t\u1ea1o ra m\u1ed9t gi\u00e1 tr\u1ecb ng\u1eabu nhi\u00ean m\u1edbi v\u00e0 c\u00e1c b\u1ed9 d\u1eef li\u1ec7u ki\u1ec3m tra v\u00e0 hu\u1ea5n luy\u1ec7n s\u1ebd c\u00f3 c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c nhau m\u1ed7i l\u1ea7n.\n#Tuy nhi\u00ean, n\u1ebfu m\u1ed9t gi\u00e1 tr\u1ecb c\u1ed1 \u0111\u1ecbnh \u0111\u01b0\u1ee3c g\u00e1n nh\u01b0 th\u1ebf random_state = 42th\u00ec cho d\u00f9 b\u1ea1n c\u00f3 th\u1ef1c thi m\u00e3 c\u1ee7a m\u00ecnh bao nhi\u00eau l\u1ea7n th\u00ec k\u1ebft qu\u1ea3 s\u1ebd gi\u1ed1ng nhau .ie, c\u00f9ng c\u00e1c gi\u00e1 tr\u1ecb trong t\u1eadp d\u1eef li\u1ec7u th\u1eed nghi\u1ec7m v\u00e0 ki\u1ec3m tra.\n\n\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=77,stratify=y)\nprint('Splitted Successfully')\nprint(x_train.shape,x_test.shape,y_train.shape,y_test.shape)","3f783b1b":"# from sklearn.model_selection import GridSearchCV\n# from sklearn import svm\n# param_grid={'C':[0.1,1,10,100],'gamma':[0.0001,0.001,0.1,1],'kernel':['rbf','poly']}\n# svc=svm.SVC(probability=True)\n# print(\"The training of the model is started, please wait for while as it may take few minutes to complete\")\n# model=GridSearchCV(svc,param_grid)\n# model.fit(x_train,y_train)\n# print('The Model is trained well with the given images')\n# model.best_params_","72f9af30":"from sklearn.svm import SVC\nclf_SVM=SVC(C=10,kernel='rbf')\nclf_SVM.fit(x_train,y_train)","0ac887cd":"y_pred=clf_SVM.predict(x_test)\nprint(\"The predicted Data is :\")\ny_pred","9572674d":"print(\"The actual data is:\")\nnp.array(y_test)","2ba9cc9c":"from sklearn.metrics import classification_report,accuracy_score,confusion_matrix\nprint(f\"The model is {accuracy_score(y_pred,y_test)*100}% accurate\")","067ee3c7":"from sklearn.metrics import classification_report, plot_confusion_matrix,plot_roc_curve\nprint (classification_report(y_test,clf_SVM.predict(x_test)))\nplot_confusion_matrix(clf_SVM,x_test,y_test)\nfig=plot_roc_curve(clf_SVM,x_test,y_test,label=\"Roc Test\")\nfig=plot_roc_curve(clf_SVM,x_train,y_train,color='r',label=\"Roc Train\",ax = fig.ax_)\nplt.title(\"ROC CURVE\")\nplt.show()","9ff963b7":"# c\u00e1c thu\u1ed9c t\u00ednh X ()\nx=df.iloc[:,:-1]\n# ph\u00e2n l\u1edbp y 0 l\u00e0 kh\u00f4ng b\u1ecb vi\u00eam ph\u1ed5i 1 l\u00e0 b\u1ecb\ny=df.iloc[:,-1]","a5486f3a":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=77,stratify=y)\nprint('Chia d\u1eef li\u1ec7u Train\/Test xong')\nprint(x_train.shape,x_test.shape,y_train.shape,y_test.shape)","2d85a76e":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","48028b52":"from sklearn.decomposition import PCA\npca = PCA(n_components=0.95)\nscaler = StandardScaler()\nx_train = pca.fit_transform(x_train)\nx_test = pca.transform(x_test)\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)\n","1996a1e5":"x_train=x_train\nx_test= x_test","73cdb8dd":"print(\"D\u1eef li\u1ec7u sau PCA train:\" , x_train.shape)\nprint(\"D\u1eef li\u1ec7u sau PCA test:\" , x_test.shape)","181d7fe0":"x_train","8a2a6301":"x_test","764802d1":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nparam_grid = {'C': [0.1, 1, 10, 100], \n              'gamma': [1, 0.75, 0.1], \n              'kernel': ['rbf', 'poly', 'linear']} \n\ngrid = GridSearchCV(SVC(), param_grid)\ngrid.fit(x_train, y_train)\nbest_params = grid.best_params_\nprint(f\"Best params: {best_params}\")\n\nsvm_clf = SVC(**best_params)\nsvm_clf.fit(x_train, y_train)","0c536585":"from sklearn.svm import SVC\nclf_SVM=SVC(C=10,kernel='rbf')\nclf_SVM.fit(x_train,y_train)","580b6862":"from sklearn.metrics import classification_report,accuracy_score,confusion_matrix\ny_pred = svm_clf.predict(x_test)\nprint(f\"The model is {accuracy_score(y_pred,y_test)*100}% accurate\")","d49226cf":"from sklearn.metrics import classification_report, plot_confusion_matrix,plot_roc_curve\nprint (classification_report(y_test,svm_clf.predict(x_test)))\nplot_confusion_matrix(svm_clf,x_test,y_test)\nfig=plot_roc_curve(svm_clf,x_test,y_test,label=\"Roc Test\")\nfig=plot_roc_curve(svm_clf,x_train,y_train,color='r',label=\"Roc Train\",ax = fig.ax_)\nplt.title(\"ROC CURVE\")\nplt.show()\n","01fdb4cf":"# import pickle\n# pickle.dump(clf_SVM,open('img_model.p','wb'))\n# print(\"Pickle is dumped successfully\")","658d1132":"**S\u1eed D\u1ee5ng PCA**"}}