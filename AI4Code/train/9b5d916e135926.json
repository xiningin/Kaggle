{"cell_type":{"7634e638":"code","083c6b9a":"code","a02b8030":"code","63934cb4":"code","dd076bc3":"code","5976b07d":"code","51eb9792":"code","d4ebdab2":"code","8c54edeb":"code","2cc5d58a":"code","1940bee4":"code","afb115ee":"code","bfcc2879":"code","0967554a":"code","531d110e":"code","7253b994":"code","ca41e771":"code","2288712f":"code","c225a293":"code","dcc8629d":"code","d54ed4d1":"code","3e8db31b":"code","03fcc54f":"code","625e7e61":"code","a6b46178":"code","b943de04":"code","37034146":"code","919858b7":"code","c89fe0e6":"code","4539b17e":"code","3b06e527":"code","3e4bd163":"code","e5d7de9c":"code","c58caf0a":"code","c1b0735a":"markdown","afd88dec":"markdown","f3682ba5":"markdown","30d34fdd":"markdown","2830bb8f":"markdown","d984ea7a":"markdown","2538270e":"markdown","8cca3cd0":"markdown","b8911b3a":"markdown","7b7cde4d":"markdown","a4c2bc85":"markdown","25b04b77":"markdown","893fe109":"markdown"},"source":{"7634e638":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report,confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n%matplotlib inline","083c6b9a":"data = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndata.head()","a02b8030":"data.shape","63934cb4":"data.isnull().sum()","dd076bc3":"data.info()","5976b07d":"data.describe()","51eb9792":"data.hist(figsize=(20,20));","d4ebdab2":"corr = data.corr().sort_values(by='target',ascending=False).round(2)\nprint(corr['target'])","8c54edeb":"plt.subplots(figsize=(12, 9))\nsns.heatmap(corr,annot=True)","2cc5d58a":"data.target.value_counts()","1940bee4":"# Checking if its a balanced dataset\nsns.countplot(x='target',data=data)\nplt.title('Affected vs Unaffected');","afb115ee":"# Affected vs Unaffected based on gender\nsns.countplot(x='sex',hue='target',data=data)\nplt.title('Based on Gender')\nplt.xlabel('sex')","bfcc2879":"# Distribution based on age\nplt.subplots(figsize=(10, 7))\nsns.countplot(x='age',data=data);\nplt.title('Age')","0967554a":"print('Min age: ', min(data['age']))\nprint('Max age: ', max(data['age']))\nprint('Average age: ', data['age'].mean())","531d110e":"# Display chest pain types in bar chart\ndata.groupby(data['cp']).count()['target'].plot(kind = 'bar', title = 'Chest Pain Types', figsize = (8, 6))\nplt.xlabel('Chest Pain Types')\nplt.xticks(np.arange(4), ('typical angina', 'atypical angina', 'non-anginal pain', 'asymptomatic'), rotation = 0)\nplt.show()","7253b994":"# Display chest pain types based on the target\npd.crosstab(data.cp,data.target).plot(kind = \"bar\", figsize = (8, 6))\nplt.title('Heart Disease Frequency According to Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(np.arange(4), ('typical angina', 'atypical angina', 'non-anginal pain', 'asymptomatic'), rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","ca41e771":"# Display blood pressure distribution\ndata['trestbps'].plot(kind = 'hist', title = 'Blood Pressure in mm Hg', figsize = (8, 6))\nplt.show()","2288712f":"# Display Cholestoral distribution\ndata['chol'].plot(kind = 'hist', title = 'Serum Cholestoral in mg\/dl', figsize = (8, 6))\nplt.show()","c225a293":"# Display fasting blood sugar in bar chart\ndata.groupby(data['fbs']).count()['target'].plot(kind = 'bar', title = 'Fasting Blood Sugar', figsize = (8, 6))\nplt.xticks(np.arange(2), ('fbs < 120 mg\/dl', 'fbs > 120 mg\/dl'), rotation = 0)\nplt.show()","dcc8629d":"data.groupby(data['restecg']).count()['target'].plot(kind = 'bar', title = 'Resting Electrocardiographic Results', figsize = (8, 6))\nplt.xticks(np.arange(3), ('normal', 'ST-T wave abnormality', 'probable or left ventricular hypertrophy'))\nplt.show()","d54ed4d1":"# Display resting electrocardiographic results based on the target\npd.crosstab(data.restecg,data.target).plot(kind = \"bar\", figsize = (8, 6))\nplt.title('Heart Disease Frequency According to Resting Electrocardiographic Results')\nplt.xticks(np.arange(3), ('normal', 'ST-T wave abnormality', 'probable or left ventricular hypertrophy'))\nplt.xlabel('Resting Electrocardiographic Results')\nplt.ylabel('Frequency')\nplt.show()","3e8db31b":"# Display maximum heart rate distribution\ndata['thalach'].plot(kind = 'hist', title = 'Maximum Heart Rate Achieved', figsize = (8, 6))\nplt.show()","03fcc54f":"# Display exercise induced angina in bar chart\ndata.groupby(data['exang']).count()['target'].plot(kind = 'bar', title = 'Exercise Induced Angina',  figsize = (8, 6))\nplt.xticks(np.arange(2), ('No', 'Yes'), rotation = 0)\nplt.show()","625e7e61":"# Display exercise induced angina based on the target\npd.crosstab(data.exang,data.target).plot(kind = \"bar\", figsize = (8, 6))\nplt.title('Heart Disease Frequency According to Exercise Induced Angina')\nplt.xlabel('Exercise Induced Angina')\nplt.xticks(np.arange(2), ('No', 'Yes'), rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","a6b46178":"sns.pairplot(data[corr['target'].head(7).index], hue='target')","b943de04":"X = data.drop(['target'], axis = 1)\ny = data['target']\nX.head()","37034146":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state= 5)","919858b7":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train_sc = sc.fit_transform(X_train)\nX_test_sc = sc.transform(X_test)","c89fe0e6":"from sklearn.svm import SVC\nsvc_classifier = SVC()\nsvc_classifier.fit(X_train, y_train)\ny_pred_scv = svc_classifier.predict(X_test)\naccuarcy_svm=accuracy_score(y_test, y_pred_scv)\nprint(accuarcy_svm)","4539b17e":"from sklearn.linear_model import LogisticRegression\nlr_classifier = LogisticRegression(random_state = 51, penalty = 'l1', solver='liblinear')\nlr_classifier.fit(X_train, y_train)\ny_pred_lr = lr_classifier.predict(X_test)\naccuracy_score(y_test, y_pred_lr)\naccuarcy_lr=accuracy_score(y_test, y_pred_lr)\nprint(accuarcy_lr)","3b06e527":"from sklearn.tree import DecisionTreeClassifier\ndt_classifier = DecisionTreeClassifier(criterion = 'entropy',random_state = 51)\ndt_classifier.fit(X_train, y_train)\ny_pred_dt = dt_classifier.predict(X_test)\naccuarcy_dt=accuracy_score(y_test, y_pred_dt)\nprint(accuarcy_dt)","3e4bd163":"rf_model=RandomForestClassifier()\nrf_model.fit(X_train,y_train)\ny_pred_rf = rf_model.predict(X_test)\naccuarcy_rf=accuracy_score(y_test, y_pred_rf)\nprint(accuarcy_rf)","e5d7de9c":"cm = confusion_matrix(y_test, y_pred_rf)\nplt.title('Heatmap of Confusion Matrix', fontsize = 15)\nsns.heatmap(cm, annot = True)\nplt.show()","c58caf0a":"# dumping the model in pickle file for future use\nimport pickle\npickle.dump(lr_classifier, open('heart_disease_detector.pickle','wb'))# load model\nheart_disease_detector_model = pickle.load(open('.\/heart_disease_detector.pickle', 'rb'))","c1b0735a":"# Importing necessary libraries","afd88dec":"# Checking maximum correlated features","f3682ba5":"# Relation among highest correlated features","30d34fdd":"**fbs, chol** are the lowest correlated with the target variable.","2830bb8f":"### Logistic Regression performed best on this dataset","d984ea7a":"# Confusion Matrix","2538270e":"# Importing dataset","8cca3cd0":"##### NO NULL VALUES!","b8911b3a":"**X-axis**: Here 1 is male, 0 is female\n\n**target**: 0 unaffected, 1 affected","7b7cde4d":"[Check this link for deploying it into an end to end model](https:\/\/medium.com\/analytics-vidhya\/the-lifecycle-to-build-a-web-app-for-prediction-from-scratch-bec1632b5f27)","a4c2bc85":"## Thank You\n## If you find this kernel useful **Upvote** it\n## Feel free to ask any queries or give any suggestions","25b04b77":"# Exploratory Data Analysis","893fe109":"# Training on different models"}}