{"cell_type":{"239e5d31":"code","0099b80b":"code","0884c17f":"code","babbd0da":"code","d20c3918":"code","b3609252":"code","99155d1f":"code","3809fba7":"code","165b05cf":"code","ac58046f":"code","ef654790":"code","7d34a365":"code","57245c2d":"code","2486da88":"code","15a15369":"code","b22c7f3f":"code","9fc1ff57":"code","f56e1abe":"code","d67f97f0":"code","68be9616":"code","c5d7f353":"code","8a30c16a":"code","3b1be88d":"code","9842f86c":"code","971074ee":"code","50f25d00":"code","088a2788":"code","55675f6f":"code","d43f794a":"code","7dc40fc0":"code","6fc332d5":"code","fe185eaa":"code","22784850":"code","85f94e4a":"code","67c7e133":"code","f2926223":"code","0a6b0b19":"code","952f0b73":"code","1d90196a":"code","3b561a39":"code","041c0276":"code","2fea775b":"code","7bcf4ace":"code","0a907f72":"code","7c9a62f8":"code","162afd97":"code","9d1cca87":"code","8720108f":"code","7a910e9b":"code","976110f5":"code","3fd28b43":"code","925b5830":"code","17310a0e":"code","79db347c":"code","e05c87ae":"code","4d74d71a":"code","3b793568":"code","d5778637":"code","e8cfb274":"code","cbc26b1b":"code","1183a820":"code","91fca7ae":"code","0fce3db5":"code","85f00f43":"code","1af664ee":"code","16892ef6":"code","3eb7e606":"code","500b6dd8":"code","9d9829c3":"code","8d1b061d":"code","987938b9":"code","a837d592":"code","72ad69e5":"code","1319577e":"code","6e1b3ee5":"markdown","a1550058":"markdown","546f8dd6":"markdown","8a1395ba":"markdown","70be212e":"markdown","a364a571":"markdown","85b35a74":"markdown","4513ce74":"markdown","db29e8a6":"markdown","d0386537":"markdown","65a96104":"markdown","c0351e79":"markdown","1ca72c18":"markdown","f6e67765":"markdown","4666ada2":"markdown","794b3b0c":"markdown","5ff5359b":"markdown"},"source":{"239e5d31":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score,roc_auc_score,roc_curve\nimport numpy as np\nimport seaborn as sns\nfrom sklearn import preprocessing, metrics\nimport lightgbm as lgb\nimport gc\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\n#from sklearn.metrics import roc_auc_score\ngc.enable()\nimport matplotlib.pyplot as plt\nimport datetime\nfrom sklearn import preprocessing\nimport re\nprint('Libraries Imported')","0099b80b":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }","0884c17f":"# reading a subset of the data for EDA:\ntrain = pd.read_csv('..\/input\/train.csv', dtype=dtypes, low_memory=True)\nprint('Loaded train data\\n')\n","babbd0da":"(train.isnull().sum()\/train.shape[0]).sort_values(ascending=False)","d20c3918":"# dtype_df = train.dtypes.reset_index()\n# dtype_df.columns = [\"Count\", \"Column Type\"]\n# dtype_df.groupby(\"Column Type\").aggregate('count').reset_index()","b3609252":"# #print \nprint(\"Dimension of dataset\",train.shape)\nprint(\"Target values description\")\nprint((train['HasDetections'].value_counts().reset_index()))","99155d1f":"# count the number of NaN values in each column\nprint(train.isnull().sum())","3809fba7":"#Visualisations\n#Function to display barplots\ndef count_plot(col_name):\n    ax = sns.countplot(x=col_name, hue=\"HasDetections\", data=train)\n    ax.set_xlabel(col_name)\n    ax.set_ylabel(\"count\")    ","165b05cf":"count_plot(train['HasDetections'].name)","ac58046f":"count_plot(train['Platform'].name)","ef654790":"count_plot(train['IsBeta'].name)","7d34a365":"count_plot(train['Processor'].name)","57245c2d":"count_plot(train['ProductName'].name)","2486da88":"count_plot(train['AppVersion'].name)","15a15369":"# #Extract  sub version from subversion\ntrain[\"AppVersion\"] = train[\"AppVersion\"].astype(object)\ntrain[\"AppVersion\"] = train[\"AppVersion\"].apply(lambda x:  (re.split(r'\\.',x))[1])\ntrain[\"AppVersion\"].value_counts()\n\n\n#Extract  sub version from EngineVersion\ntrain[\"EngineVersion\"] = train[\"EngineVersion\"].astype(object)\ntrain[\"EngineVersion\"] = train[\"EngineVersion\"].apply(lambda x:  (re.split(r'\\.',x))[2])\ntrain[\"EngineVersion\"].value_counts()\n\n\n#Extract  sub version from AvSigVersion\ntrain[\"AvSigVersion\"] = train[\"AvSigVersion\"].astype(object)\ntrain[\"AvSigVersion\"] = train[\"AvSigVersion\"].apply(lambda x:  (re.split(r'\\.',x))[1])\n# train[\"AvSigVersion\"].value_counts()\n\n\n","b22c7f3f":"# train[\"AppVersion\"] = train[\"AppVersion\"].astype(int)\n# train[\"EngineVersion\"] = train[\"EngineVersion\"].astype(int)\n# train[\"AvSigVersion\"] = train[\"AvSigVersion\"].astype(int)\n\n\ntrain['AppVersion'] = pd.to_numeric(train['AppVersion'], errors='coerce').fillna(0)\ntrain['EngineVersion'] = pd.to_numeric(train['EngineVersion'], errors='coerce').fillna(0)\ntrain['AvSigVersion'] = pd.to_numeric(train['AvSigVersion'], errors='coerce').fillna(0)","9fc1ff57":"train[\"AppVersion\"].dtype","f56e1abe":"train[\"AvSigVersion\"].value_counts()","d67f97f0":"count_plot(train['AppVersion'].name)","68be9616":"count_plot(train['AVProductsInstalled'].name)","c5d7f353":"count_plot(train['CountryIdentifier'].name)","8a30c16a":"count_plot(train['IsProtected'].name)","3b1be88d":"count_plot(train['UacLuaenable'].name)","9842f86c":"count_plot(train['SmartScreen'].name)  ","971074ee":"count_plot(train['Firewall'].name)","50f25d00":"count_plot(train['Census_OSVersion'].name)","088a2788":"count_plot(train['Census_OSArchitecture'].name)","55675f6f":"count_plot(train['Census_ProcessorClass'].name)","d43f794a":"count_plot(train['Census_IsWIMBootEnabled'].name)","7dc40fc0":"count_plot(train['Census_IsFlightsDisabled'].name)","6fc332d5":"count_plot(train['Census_IsFlightingInternal'].name)","fe185eaa":"count_plot(train['AutoSampleOptIn'].name)","22784850":"count_plot(train['Census_ThresholdOptIn'].name)","85f94e4a":"count_plot(train['SMode'].name)","67c7e133":"count_plot(train['Census_IsPortableOperatingSystem'].name)","f2926223":"count_plot(train['Census_DeviceFamily'].name)","0a6b0b19":"count_plot(train['Census_IsVirtualDevice'].name)","952f0b73":"count_plot(train['Census_OSInstallLanguageIdentifier'].name)","1d90196a":"count_plot(train['Census_OSSkuName'].name)","3b561a39":"count_plot(train['Platform'].name)","041c0276":"cat_cols = [\n'OsPlatformSubRelease'   ,\n'SkuEdition'                                ,\n'SmartScreen'                              ,\n'Census_MDC2FormFactor'                    ,\n'Census_PrimaryDiskTypeName'                ,\n# 'Census_ChassisTypeName'                  ,\n'Census_PowerPlatformRoleName'            ,\n'Census_InternalBatteryType'             ,\n# 'Census_OSArchitecture'                   ,\n# 'Census_OSBranch'                          ,\n'Census_OSEdition'                         ,\n'Census_OSInstallTypeName'                  ,\n'Census_OSWUAutoUpdateOptionsName'          ,\n'Census_GenuineStateName'                ,  \n'Census_ActivationChannel'                 ,\n'Census_FlightRing',\n'ProductName',\n# 'AppVersion',\n# 'EngineVersion',\n# 'AvSigVersion'\n #   'Census_OSArchitecture','Census_OSBranch'\n]                   \n\n\ndef doLabelEncoding(dataset,cat_cols):\n    le = LabelEncoder()\n    for col in cat_cols:\n        if dataset[col].dtype.name == 'category': \n            print(col)\n            dataset[col] = dataset[col].fillna(dataset[col].mode(),inplace=True)\n            dataset[col] = le.fit_transform(dataset[col])\n\ndoLabelEncoding(train,cat_cols)","2fea775b":"train.Census_OSBranch.value_counts()","7bcf4ace":"# def set_hd_category(row):\n#     horz='Census_InternalPrimaryDisplayResolutionHorizontal'\n#     vert='Census_InternalPrimaryDisplayResolutionVertical'\n    \n#     if row[horz]  * row[vert] < 923600:\n#         return 1 #Not hd\n#     elif (row[horz]  * row[vert] >= 923600) and (row[horz]  * row[vert] <= 1036800):\n#         return 2 # hd ready\n#     elif (row[horz]  * row[vert] >= 1036800) and (row[horz]  * row[vert] <= 2073600):\n#         return 3 # Hd\n#     elif (row[horz]  * row[vert] <= 2073600):\n#         return 4 #UHD\n#     else: \n#         return 5\n\n# train[\"hd\"] = train.apply(set_hd_category, axis=1)","0a907f72":"int_cols  =   [#Int cclumns\n        'Census_OEMNameIdentifier'                             ,\n        'Census_OEMModelIdentifier'                            ,\n        'Census_ProcessorModelIdentifier'                      ,\n        'Census_PrimaryDiskTotalCapacity'                      ,\n        'Census_SystemVolumeTotalCapacity'                     ,\n        'Census_TotalPhysicalRAM'                              ,\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches'    ,\n        'Census_InternalBatteryNumberOfCharges'                ,\n        'Census_FirmwareVersionIdentifier'                     ]","7c9a62f8":"# train['Census_PrimaryDiskTotalCapacity'] = preprocessing.scale(train['Census_PrimaryDiskTotalCapacity'].values)\n# train['Census_SystemVolumeTotalCapacity'] = preprocessing.scale(train['Census_SystemVolumeTotalCapacity'].values)\n\n# train['Census_TotalPhysicalRAM'] = preprocessing.scale(train['Census_TotalPhysicalRAM'].values)\n\n# train['Census_InternalPrimaryDiagonalDisplaySizeInInches'] = preprocessing.scale(train['Census_InternalPrimaryDiagonalDisplaySizeInInches'].values)\n\n# train['Census_InternalBatteryNumberOfCharges'] = preprocessing.scale(train['Census_InternalBatteryNumberOfCharges'].values)\n\n","162afd97":"#         'Census_FlightRing'                                    ,\n#         'Census_FirmwareManufacturerIdentifier'                ,\n#         'Census_IsSecureBootEnabled'                           ,   \n#         'Census_IsTouchEnabled'                                ,\n#         'Census_IsPenCapable'                                  ,\n#         'Census_IsAlwaysOnAlwaysConnectedCapable'              ,\n#         'Wdft_IsGamer'                                         ]","9d1cca87":"plt.figure(figsize=(10,10))\nsns.heatmap(train[int_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('Correlation between columns')\nplt.show()","8720108f":"# plt.figure(figsize=(10,10))\n# sns.heatmap(train[cat_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\n# plt.title('Correlation between columns')\n# plt.show()","7a910e9b":"# % of  Missing data \n# PuaMode                                              0.99969\n# Census_ProcessorClass                                0.99573\n# DefaultBrowsersIdentifier                            0.95110\n# Census_IsFlightingInternal                           0.83163\n# Census_InternalBatteryType                           0.71240\n# Census_ThresholdOptIn                                0.63738\n# Census_IsWIMBootEnabled                              0.63659\n\nremove_cols = ['PuaMode', 'Census_ProcessorClass', 'Census_IsWIMBootEnabled',\n               'IsBeta', 'Census_IsFlightsDisabled', 'Census_IsFlightingInternal',\n               'AutoSampleOptIn', 'Census_ThresholdOptIn', 'SMode',\n               'Census_IsPortableOperatingSystem', 'Census_DeviceFamily', \n               'UacLuaenable',  'Platform', 'Census_OSSkuName', \n               'Census_OSInstallLanguageIdentifier', 'Processor']\n\ntrain.drop(remove_cols, axis=1, inplace=True)\n\n\nremove_cols = ['CountryIdentifier','GeoNameIdentifier',\n               'OsVer','OsBuild','OsBuildLab',\n               'Census_OSVersion',\n             #  'Census_OSArchitecture','Census_OSBranch',\n               'Census_OSBuildNumber','Census_OSBuildRevision'\n]\n\ntrain.drop(remove_cols, axis=1, inplace=True)\n\nremove_cols = ['Census_InternalPrimaryDisplayResolutionHorizontal',\n               \"Census_InternalPrimaryDisplayResolutionVertical\",\n               'Census_PrimaryDiskTotalCapacity'\n]\n\ntrain.drop(remove_cols, axis=1, inplace=True)\n\n    ","976110f5":"ohe_cols = [\n'OsPlatformSubRelease'   ,\n'SkuEdition'                                ,\n'SmartScreen'                              ,\n'Census_MDC2FormFactor'                    ,\n'Census_PrimaryDiskTypeName'                ,\n# 'Census_ChassisTypeName'                  ,\n'Census_PowerPlatformRoleName'            ,\n'Census_InternalBatteryType'             ,\n# 'Census_OSArchitecture'                   ,\n# 'Census_OSBranch'                          ,\n'Census_OSEdition'                         ,\n'Census_OSInstallTypeName'                  ,\n'Census_OSWUAutoUpdateOptionsName'          ,\n'Census_GenuineStateName'                ,  \n'Census_ActivationChannel'                 ,\n'Census_FlightRing',\n'ProductName',\n'AppVersion',\n'EngineVersion',\n'AvSigVersion',\n'AVProductsInstalled',\n'AVProductsEnabled',\n'HasTpm'  ,\n'IsProtected',\n'Firewall',\n# 'Census_OEMNameIdentifier',\n# 'Census_OEMModelIdentifier',\n# 'Census_ProcessorCoreCount',\n# 'Census_ProcessorManufacturerIdentifier',\n# 'Census_ProcessorModelIdentifier',\n# 'Census_OSArchitecture',\n# 'Census_OSBranch',\n'Census_IsSecureBootEnabled',\n'Census_IsVirtualDevice',\n'Census_IsTouchEnabled',\n'Census_IsPenCapable',\n'Census_IsAlwaysOnAlwaysConnectedCapable',\n'Wdft_IsGamer'\n]                   \n","3fd28b43":"# plt.figure(figsize=(26,26))\n# sns.heatmap(train[ohe_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\n# plt.title('Correlation between columns')\n# plt.show()","925b5830":"# def one_hot(dataset, cols):\n#     \"\"\"\n#     @param df pandas DataFrame\n#     @param cols a list of columns to encode \n#     @return a DataFrame with one-hot encoding\n#     \"\"\"\n#     df = pd.DataFrame()\n#     for each in cols:\n#         dummies = pd.get_dummies(dataset[each], prefix=each, drop_first=False)\n#         df = pd.concat([df, dummies], axis=1)\n#     return df","17310a0e":"# ohe_df = one_hot(train,ohe_cols)\n# one_hot_cat_cols = ohe_df.columns","79db347c":"# train.drop(ohe_cols, axis=1, inplace=True)\n# train = pd.concat([train, ohe_df], axis=1)","e05c87ae":"features = [        'ProductName'                                          ,\n        'EngineVersion'                                        ,\n        'AppVersion'                                           ,\n        'AvSigVersion'                                         ,        \n        'RtpStateBitfield'                                     ,\n        'IsSxsPassiveMode'                                     ,\n        'DefaultBrowsersIdentifier'                            ,\n        'AVProductStatesIdentifier'                            ,\n        'AVProductsInstalled'                                  ,\n        'AVProductsEnabled'                                    ,\n        'HasTpm'                                               ,\n        'CityIdentifier'                                       ,\n        'OrganizationIdentifier'                               ,\n        'LocaleEnglishNameIdentifier'                          ,\n        'OsSuite'                                              ,\n        'OsPlatformSubRelease'                                 ,\n        'SkuEdition'                                           ,\n        'IsProtected'                                          ,\n        'IeVerIdentifier'                                      ,\n        'SmartScreen'                                          ,\n        'Firewall'                                             ,\n        'Census_MDC2FormFactor'                                ,        \n        'Census_ProcessorCoreCount'                            ,\n        'Census_ProcessorManufacturerIdentifier'               ,\n        'Census_PrimaryDiskTypeName'                           ,\n        'Census_HasOpticalDiskDrive'                           ,\n        'Census_PowerPlatformRoleName'                         ,\n        'Census_InternalBatteryType'                           ,\n        'Census_OSEdition'                                     ,\n        'Census_OSInstallTypeName'                             ,\n        'Census_OSUILocaleIdentifier'                          ,\n        'Census_OSWUAutoUpdateOptionsName'                     ,\n        'Census_GenuineStateName'                              ,\n        'Census_ActivationChannel'                             ,\n        'Census_FlightRing'                                    ,\n        'Census_FirmwareManufacturerIdentifier'                ,\n        'Census_IsSecureBootEnabled'                           ,   \n                'Census_IsVirtualDevice',\n        'Census_IsTouchEnabled'                                ,\n        'Census_IsPenCapable'                                  ,\n        'Census_IsAlwaysOnAlwaysConnectedCapable'              ,\n        'Wdft_IsGamer'                                         ,\n        'Wdft_RegionIdentifier'                               ,\n              #Int cclumns\n        'Census_OEMNameIdentifier'                             ,\n        'Census_OEMModelIdentifier'                            ,\n        'Census_ProcessorModelIdentifier'                      ,\n        \n        'Census_SystemVolumeTotalCapacity'                     ,\n        'Census_TotalPhysicalRAM'                              ,\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches'    ,\n        'Census_InternalBatteryNumberOfCharges'                ,\n        'Census_FirmwareVersionIdentifier'     \n            \n           ]\n\ntarget = ['HasDetections']                                            ,\n","4d74d71a":"# def remove_cols(features, cols):\n#     for col in cols:\n#        if col in features:\n#           features.remove(col)\n#     return features\n\n# def add_cols(features, cols):\n#     for col in cols:\n#         features.append(col)\n#     return features\n\n# features = remove_cols(features,ohe_cols)\n# features = add_cols(features,one_hot_cat_cols)","3b793568":"y = train['HasDetections'].values\nX = train[features]\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.25, random_state=1234)\nprint(\"Training, validation split  done\")","d5778637":"del X,y, train\ngc.collect()\nprint(datetime.datetime.now())","e8cfb274":"\nN_FOLDS = 5\nMAX_BOOST_ROUNDS = 5\nLEARNING_RATE = .1\n\n\nparams = {'num_leaves':30,\n            'objective':'binary',\n            \"metric\" : \"auc\",\n            'max_depth':7,\n            'learning_rate':.001,\n            'max_bin':2000,\n            \"bagging_fraction\" : 0.7,\n            \"feature_fraction\" : 0.5,\n            \"bagging_frequency\" : 6,\n            \"bagging_seed\" : 42,\n            \"verbosity\" : 1,\n#           \"boosting\": ['rf'],\n           \"reg_alpha\" : 0,\n           'reg_lambda' :10\n         }\n      \nlgbm_train = lgb.Dataset(train_X, label=train_y)\n\n\nmodel = lgb.train(params, lgbm_train,num_boost_round=120,categorical_feature=ohe_cols)\n\nprint(datetime.datetime.now())","cbc26b1b":"#predicting on test set\nval_y_pred=model.predict(val_X)\nval_y_pred[0:5]  # showing first 5 predictions\nval_y_pred = np.where(val_y_pred > 0.5, 1, 0)","1183a820":"print(\"Accuracy:\",accuracy_score(val_y, val_y_pred))\n\n# Model Precision: what percentage of positive tuples are labeled as such?\nprint(\"Precision:\",precision_score(val_y, val_y_pred))\n\n# Model Recall: what percentage of positive tuples are labelled as such?\nprint(\" True positive rate or (Recall or Sensitivity) :\",recall_score(val_y, val_y_pred))\n\ntn, fp, fn, tp = confusion_matrix(val_y, val_y_pred).ravel()\nspecificity = tn \/ (tn+fp)\n\n#Specitivity. or True negative rate\nprint(\" True Negative rate or Specitivity :\",specificity)\n\nfalse_negative = fn \/ (fn+tp)\n\n#False negative rate\nprint(\" False Negative rate :\",false_negative)\n\n#False positive rate\nprint(\" False positive rate (Type 1 error) :\",1 - specificity)","91fca7ae":"fig, ax = plt.subplots(figsize=(12,10))\nlgb.plot_importance(model, max_num_features=50, height=0.8, ax=ax)\nax.grid(False)\nplt.title(\"LightGBM - Feature Importance\", fontsize=15)\nplt.show()","0fce3db5":"#Clear memory\ndel train_X, val_X, train_y, val_y\ngc.collect()","85f00f43":"# reading  test data\ntest = pd.read_csv('..\/input\/test.csv', dtype=dtypes,  low_memory=True)\nprint('Loaded test data\\n')","1af664ee":"test.shape","16892ef6":"doLabelEncoding(test,cat_cols)","3eb7e606":"# print(test[\"AppVersion\"].value_counts())\n# print(test[\"EngineVersion\"].value_counts())\n# print(test[\"AvSigVersion\"].value_counts())","500b6dd8":"# #Extract  sub version from subversion\ntest[\"AppVersion\"] = test[\"AppVersion\"].astype(object)\ntest[\"AppVersion\"] = test[\"AppVersion\"].apply(lambda x:  (re.split(r'\\.', str(x)))[1])\n\n\n#Extract  sub version from EngineVersion\ntest[\"EngineVersion\"] = test[\"EngineVersion\"].astype(object)\ntest[\"EngineVersion\"] = test[\"EngineVersion\"].apply(lambda x:  (re.split(r'\\.',str(x)))[2])\n# test[\"EngineVersion\"].value_counts()\n\n\n#Extract  sub version from AvSigVersion\ntest[\"AvSigVersion\"] = test[\"AvSigVersion\"].astype(object)\ntest[\"AvSigVersion\"] = test[\"AvSigVersion\"].apply(lambda x:  (re.split(r'\\.',str(x)))[1])\n# test[\"AvSigVersion\"].value_counts()\n\n","9d9829c3":"\ntest['AppVersion'] = pd.to_numeric(test['AppVersion'], errors='coerce').fillna(0)\ntest['EngineVersion'] = pd.to_numeric(test['EngineVersion'], errors='coerce').fillna(0)\ntest['AvSigVersion'] = pd.to_numeric(test['AvSigVersion'], errors='coerce').fillna(0)","8d1b061d":"# test['Census_PrimaryDiskTotalCapacity'] = preprocessing.scale(test['Census_PrimaryDiskTotalCapacity'].values)\n# test['Census_SystemVolumeTotalCapacity'] = preprocessing.scale(test['Census_SystemVolumeTotalCapacity'].values)\n\n# test['Census_TotalPhysicalRAM'] = preprocessing.scale(test['Census_TotalPhysicalRAM'].values)\n\n# test['Census_InternalPrimaryDiagonalDisplaySizeInInches'] = preprocessing.scale(test['Census_InternalPrimaryDiagonalDisplaySizeInInches'].values)\n\n# test['Census_InternalBatteryNumberOfCharges'] = preprocessing.scale(test['Census_InternalBatteryNumberOfCharges'].values)\n\n","987938b9":"# test[\"hd\"] = test.apply(set_hd_category, axis=1)","a837d592":"remove_cols = ['PuaMode', 'Census_ProcessorClass', 'Census_IsWIMBootEnabled',\n               'IsBeta', 'Census_IsFlightsDisabled', 'Census_IsFlightingInternal',\n               'AutoSampleOptIn', 'Census_ThresholdOptIn', 'SMode',\n               'Census_IsPortableOperatingSystem', 'Census_DeviceFamily', \n               'UacLuaenable', 'Platform', 'Census_OSSkuName', \n               'Census_OSInstallLanguageIdentifier', 'Processor']\n\ntest.drop(remove_cols, axis=1, inplace=True)\n\n\nremove_cols = ['CountryIdentifier','GeoNameIdentifier',\n               'OsVer','OsBuild','OsBuildLab',\n               'Census_OSVersion',\n             #  'Census_OSArchitecture','Census_OSBranch',\n               'Census_OSBuildNumber','Census_OSBuildRevision'\n]\n\n# train.drop(remove_cols, axis=1, inplace=True)\n\ntest.drop(remove_cols, axis=1, inplace=True)\n\n\nremove_cols = ['Census_InternalPrimaryDisplayResolutionHorizontal',\n               \"Census_InternalPrimaryDisplayResolutionVertical\"\n]\n\ntest.drop(remove_cols, axis=1, inplace=True)\n","72ad69e5":"# ohe_df = one_hot(test,ohe_cols)\n# one_hot_cat_cols = ohe_df.columns\n\n# test.drop(ohe_cols, axis=1, inplace=True)\n# test = pd.concat([test, ohe_df], axis=1)\n","1319577e":"pred_test_y = model.predict(test[features])\nout_df = pd.DataFrame({\"MachineIdentifier\":test[\"MachineIdentifier\"].values})\nout_df['HasDetections'] = pred_test_y\nout_df.to_csv(\"submission.csv\", index=False)","6e1b3ee5":"Label encoding these category columns","a1550058":"Preprocess Test data","546f8dd6":"Now let us have a look at the data type of all the variables present in the dataset.\n","8a1395ba":"Training using Light GBM","70be212e":"From the above chart we can understand that the target column is balanced","a364a571":"1. **EDA**","85b35a74":"Most of the computers use 64 bit architecture","4513ce74":"**Setting the features**","db29e8a6":"**Metrics**","d0386537":"Lets Look at the number of unique values in the training dataset\n","65a96104":"**3. Feature Engineering****","c0351e79":"1 = True\n0 = Not beta.\n\nFrom the above chart we can see that the IsBeta feature is not balanced","1ca72c18":"default defender program provided by windows dominates the list","f6e67765":"Windows 10 dominates the list","4666ada2":"Following columns are highly skewed. So removing these coloumns","794b3b0c":"Majority of the 'object' columns are related to the product information.\n'Float' columns are related to product versions.\n'int' columns represent true false information","5ff5359b":"Removing these less important features. \n\nthanks - https:\/\/www.kaggle.com\/jiegeng94\/everyone-do-this-at-the-beginning\n"}}