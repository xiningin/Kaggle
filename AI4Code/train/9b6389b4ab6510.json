{"cell_type":{"618239e6":"code","450d8755":"code","a64d4583":"code","1bc07c22":"code","61adbe64":"code","0993cc60":"code","75cb4f1d":"code","a4779fd5":"code","c1247194":"code","69deaa69":"code","bec7f4d1":"code","7d89a385":"code","a1be67c5":"code","969b3d1a":"code","903588d5":"code","a0adaa01":"code","5e601fe6":"code","63162e39":"code","61da4978":"markdown","538fa09d":"markdown","fe3ed43a":"markdown","346cdb7f":"markdown"},"source":{"618239e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","450d8755":"import pandas_profiling\nimport pandas_summary as ps\n\n# Data processing, metrics and modeling\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import TruncatedSVD, PCA\nfrom sklearn.impute import SimpleImputer\n\n# Lgbm\nimport lightgbm as lgb\n\n# Suppr warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Plots\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\n\n# Others\nimport shap\nimport datetime\nfrom tqdm import tqdm_notebook\nimport sys\nimport pickle\nimport re\nimport json\nimport gc\n\npd.set_option('display.max_columns', 5000)\npd.set_option('display.max_rows', 500)\npd.set_option('display.width', 1000)\npd.set_option('use_inf_as_na', True)\n\nwarnings.simplefilter('ignore')\nmatplotlib.rcParams['figure.dpi'] = 100\nsns.set()\n%matplotlib inline","a64d4583":"folder = '\/kaggle\/input\/find-a-defect-in-the-production-extrusion-line\/'\nstats_df = pd.read_csv(folder + 'stat.csv', sep=',')\nfull_df = pd.read_csv(folder + 'extrusion.csv', sep=',')","1bc07c22":"stats_df.shape, full_df.shape","61adbe64":"stats_df.head()","0993cc60":"full_df.head()","75cb4f1d":"full_df.tail()","a4779fd5":"full_df['Datum'] = pd.to_datetime(full_df['Datum'])\nfull_df = full_df.reset_index()\nfull_df.index = full_df['Datum'] ","c1247194":"full_df.head()","69deaa69":"dfs = ps.DataFrameSummary(full_df)\ndfs.summary()","bec7f4d1":"stats_df[(stats_df['Tags'] == 'ST110_VAREx_0_SDickeIst')]","7d89a385":"full_df['ST110_VAREx_0_SDickeIst'].hist(bins=40);","a1be67c5":"full_df[full_df['ST110_VAREx_0_SDickeIst'] < 50]['ST110_VAREx_0_SDickeIst'].hist(bins=40);","969b3d1a":"full_df[(full_df['ST110_VAREx_0_SDickeIst'] < 28)]['ST110_VAREx_0_SDickeIst'].shape[0]","903588d5":"full_df[(full_df['ST110_VAREx_0_SDickeIst'] > 0)].shape[0]","a0adaa01":"full_df['ST110_VAREx_0_SDickeIst'].apply(lambda x: 1 if x == 0 else 0).value_counts(normalize=True)","5e601fe6":"full_df['ST110_VAREx_0_SDickeIst'].apply(lambda x: 1 if x == 0 else 0).hist();","63162e39":"full_df[['ST110_VAREx_0_SDickeIst']].describe()","61da4978":"### Here, production is almost continuous. Downtime is usually present after a film break or for other reasons (others are not important for the task).","538fa09d":"### Let's make a binary target variable. Since the production is continuous, there are often cases when the film breaks along the metric for several periods in a row. In order not to retrain, we will split it into a train in a much smaller proportion compared to validation, more on that later.","fe3ed43a":"## Statistics of deficiency. Let's look at the distribution of the target.","346cdb7f":"The essence of the problem is as follows: there is a production of plastic film. Production itself is very common and looks relatively simple (google) - roughly speaking, propylene granules are poured, they are melted, pulled, assembled into a large cylinder (pictured in the attached documents) - rolled out, cut. A more detailed process of production is quite easy to find on the Internet.\n\nThe bottom line is that sometimes clippings of this film occur. I would like to investigate how these cliffs depend on the regime of production, on the recipes.\n\nThe link contains data from the extruder equipment - telemetry tags for the year. In the attachment is a description of these tags in Russian. The film breakage can be found by the tag \u201cthickness\u201d - (ST110_VAREx_0_SDickeIst)."}}