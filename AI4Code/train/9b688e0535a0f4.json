{"cell_type":{"46cbcaf0":"code","dbf27465":"code","a996c8cc":"code","db4fedde":"code","7c0e0c7a":"code","0c82749e":"code","438fd970":"code","e3f52afe":"code","b5fd8ebe":"code","31de8054":"code","326567b2":"code","9b4d58a3":"code","845102b4":"code","afb0a9de":"code","3d2e56b0":"code","b564068d":"code","17c297af":"code","d890a4e8":"code","ed1d044f":"code","e92344dd":"code","9a2b3308":"code","861db63a":"code","651073ff":"markdown"},"source":{"46cbcaf0":"import pandas as pd\nimport csv\nimport datetime\nimport numpy as np\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nimport spacy\nnlp = spacy.load('en_core_web_sm')\nimport seaborn as sns\nimport matplotlib.pyplot as plt","dbf27465":"df= pd.read_csv(\"..\/input\/twitter-tweets-with-event-classification\/fyp.csv\",header= 0,\n                        encoding= 'unicode_escape')","a996c8cc":"\ndf.head()\n","db4fedde":"#tweet preprocessing \n\ndef text_preprocessing(text):\n    \n    text = re.sub('[^ A-Za-z]+', '', text)\n    text = text.split()\n    text = [word for word in text if word not in stopwords.words('english')]\n    text = ' '.join(text)\n    text = nlp(text)\n    text = [word.lemma_ for word in text]\n    text = ' '.join(text)\n    \n    return text","7c0e0c7a":"from tqdm.notebook import tqdm\ntqdm.pandas()\n\ndf['text'] = df['text'].progress_apply(text_preprocessing)\n","0c82749e":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndf['event labels'] = labelencoder.fit_transform(df['event'])\ndf['class labels'] = labelencoder.fit_transform(df['class'])\nnew_df = pd.DataFrame(df,columns = ['text', 'event','event labels','class','class labels'])\nnew_df","438fd970":"\nle_event = LabelEncoder()\nle_class = LabelEncoder()\nl1 = le_event.fit_transform(df[\"event\"])\nl2 = le_class.fit_transform(df[\"class\"])\ndf= df.drop(\"class\",axis='columns')\ndf= df.drop(\"event\",axis='columns')\n\n\ndf","e3f52afe":"df['event'] = l1\ndf['class'] = l2\ndf","b5fd8ebe":"x = df[\"event\"].values\ny = df[\"class\"].values\nx = x.reshape(-1, 1)\ny = y.reshape(-1,1)\n","31de8054":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","326567b2":"plt.plot(x,y)\nplt.show()","9b4d58a3":"plt.scatter(x,y,color='red')","845102b4":"#DECISION TREE ALGO\nfrom sklearn import tree\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(x_train,y_train)\nscore = model.score(x,y)\nprint ('the score of Decision Tree classifier is:',score)\nplt.scatter(x,y,color='red')\nplt.plot(x,model.predict(x),color='blue')\n","afb0a9de":"# SVM ALGO\nfrom sklearn.svm import SVC\nsvc = SVC(kernel='linear')\nsvc.fit(x_train,y_train)\nscore = svc.score(x,y)\n\nprint('the score of SVM is',score)\nplt.scatter(x,y,color='red')\nplt.plot(x,svc.predict(x),color='blue')","3d2e56b0":"# LINEAR REGRESSION ALGO\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(x_train,y_train)\nscore = reg.score(x,y)\nprint('the score of linear regression is',score)\nplt.scatter(x,y,color='red')\nplt.plot(x,reg.predict(x),color='blue')","b564068d":"def identifier(text):\n    earthquake = ['earthquake','aftershock','aftershocks']\n    tsunami = ['tsunami','flood']\n    fire = ['wildfire','fire']\n    tornedo = ['tornedo','twister', 'cyclone']\n    thunderstorm = ['thunderstorm','storm']\n    bombing = ['suicide bombing','bomb','bomber','explosive']\n    snowstorm = ['snowstorm']\n    sandstorm = ['sandstorm']\n    explosion = ['explosion','blast']\n    rescued = ['rescued','recovered','survived']\n    christmas = ['christmas','xmas']\n    eid = ['eid','eid ul fitr','eid ul adha']\n    ramadan = ['ramzan','ramadan']\n    independence = ['independence day','independence','day of independence']\n    str = text.lower()\n    if any(x in str for x in earthquake):\n        return 1\n    if any(x in str for x in tsunami):\n        return 12\n    if any(x in str for x in fire):\n        return 13\n    if any(x in str for x in tornedo):\n        return 11\n    if any(x in str for x in tsunami):\n        return 12\n    if any(x in str for x in thunderstorm):\n        return 10\n    if any(x in str for x in bombing):\n        return 9\n    if any(x in str for x in snowstorm):\n        return 8\n    if any(x in str for x in sandstorm):\n        return 7\n    if any(x in str for x in bombing):\n        return 9\n    if any(x in str for x in explosion):\n        return 3\n    if any(x in str for x in rescued):\n        return 6\n    if any(x in str for x in christmas):\n        return 0\n    if any(x in str for x in eid):\n        return 2\n    if any(x in str for x in ramadan):\n        return 5\n    if any(x in str for x in independence):\n        return 4","17c297af":"def classifier(x):\n    if x == 1:\n        a = 'disaster'\n        return a\n    if x == 0:\n        a = 'alarming'\n        return a\n    if x == 2:\n        a = 'happy'\n        return a\n    if x == 3:\n        a = 'religious'\n        return a","d890a4e8":"def check(x):\n    try:\n        a = classifier(model.predict([[identifier(x)]])) \n        return a\n    except:\n        print(\"\") ","ed1d044f":"text=['today earthquake occured in lahore','i am sensing a thunderstorm','Eid mubarak all muslims!']\n\ndp = pd.DataFrame(text,columns=['text'])\n\ndp","e92344dd":"dp['text'] = dp['text'].progress_apply(text_preprocessing)\ndp['predictions']=dp['text'].progress_apply(check)","9a2b3308":"new_dp = pd.DataFrame(dp,columns = ['text', 'predictions'])","861db63a":"new_dp","651073ff":"Now, our model is predicting the class of event \n"}}