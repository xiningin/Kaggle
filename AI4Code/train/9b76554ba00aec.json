{"cell_type":{"a4a4d3a1":"code","d4d73ea5":"code","0e50682c":"code","f85afeb3":"markdown","e8a64332":"markdown","2b4ee968":"markdown","c9821337":"markdown"},"source":{"a4a4d3a1":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\n\ndef mean_absolute_error(y_true, y_pred):\n    mae = np.mean(np.abs(y_true - y_pred))\n    return mae\n\n# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ny_true = pd.read_csv('..\/input\/the-datascience-cup-beta\/train.csv')['price'].values\ny_pred_low = np.load('..\/input\/dsc-oob\/oof_sub1.npy')\ny_pred_high = np.load('..\/input\/dsc-oob\/oof_sub2.npy')\n\n# MAE\u306e\u8a08\u7b97\noof_score_low = mean_absolute_error(y_true, y_pred_low)\noof_score_high = mean_absolute_error(y_true, y_pred_high)\n\nprint('y_true: len = {}'.format(y_true.shape[0]))\nprint('y_pred_low: len = {}'.format(y_pred_low.shape[0]))\nprint('y_pred_high: len = {}'.format(y_pred_high.shape[0]))\nprint('oof score (low): MAE = {:.4}'.format(oof_score_low))\nprint('oof score (high) MAE = {:.4}'.format(oof_score_high))","d4d73ea5":"NUM_TRIALS = 10000\n\nidx = np.arange(len(y_true))\ndiff_score_low = np.zeros(NUM_TRIALS)\ndiff_score_high = np.zeros(NUM_TRIALS)\n\nfor i in tqdm(range(NUM_TRIALS)):\n    idx_train, idx_test = train_test_split(idx, train_size=0.3)\n    \n    # \u64ec\u4f3c\u7684\u306a public score \u3068 private score \u3092\u8a08\u7b97\n    pub_low = mean_absolute_error(y_true[idx_train], y_pred_low[idx_train])\n    pri_low = mean_absolute_error(y_true[idx_test], y_pred_low[idx_test])\n    pub_high = mean_absolute_error(y_true[idx_train], y_pred_high[idx_train])\n    pri_high = mean_absolute_error(y_true[idx_test], y_pred_high[idx_test])\n    \n    # \u5dee\u3092\u8a08\u7b97\n    diff_score_low[i] = pri_low - pub_low\n    diff_score_high[i] = pri_high - pub_high","0e50682c":"fig, ax = plt.subplots(2, 1, figsize=(16,8))\nax[0].hist(diff_score_low, bins=64, rwidth=0.5, color='steelblue')\nax[1].hist(diff_score_high, bins=64, rwidth=0.5, color='darkorange')\nax[0].set_xlim(-8000, 8000)\nax[1].set_xlim(-8000, 8000)\nax[0].set_title('MAE: Low Accuracy')\nax[1].set_title('MAE: High Accuracy')\nplt.suptitle('PrivateLB - PublicLB', ha='center');","f85afeb3":"## \u4f7f\u7528\u30c7\u30fc\u30bf\n\n- `y_true`: \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e`price`\n- `y_pred_low`: \u9069\u5f53\u306a\u30e2\u30c7\u30eb\u3067\u8a08\u7b97\u3057\u305fOOF\u4e88\u6e2c\u5024\n- `y_pred_high`: \u9069\u5f53\u306a\u30e2\u30c7\u30eb\u3067\u8a08\u7b97\u3057\u305fOOF\u4e88\u6e2c\u5024 (`y_pred_low`\u3088\u308a\u9ad8\u3044\u7cbe\u5ea6)","e8a64332":"## \u7d50\u679c\n\n\u6a2a\u8ef8\u306f `private score - public score` \u3067\u3001\u7e26\u8ef8\u306f\u983b\u5ea6\u3067\u3059\u3002  \n\u9752\u3044\u30b0\u30e9\u30d5\u306f\u4f4e\u3044\u7cbe\u5ea6\u306e\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u305f\u7d50\u679c\u3001  \n\u30aa\u30ec\u30f3\u30b8\u8272\u306e\u30b0\u30e9\u30d5\u306f\u9ad8\u3044\u7cbe\u5ea6\u306e\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u305f\u7d50\u679c\u3067\u3059\u3002  \n\u3053\u306e\u7d50\u679c\u304b\u3089\u3001\u4ee5\u4e0b\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n- public score \u3068 private score \u306e\u5dee\u306e\u3070\u3089\u3064\u304d\u306f\u304b\u306a\u308a\u5927\u304d\u3044\n- \u9ad8\u3044\u7cbe\u5ea6\u306e\u30e2\u30c7\u30eb\u306e\u65b9\u304c\u3070\u3089\u3064\u304d\u306f\u5c11\u306a\u3044\n\n+-1000\u7a0b\u5ea6\u306e\u30b9\u30b3\u30a2\u5909\u5316\u306f\u60f3\u5b9a\u3057\u3066\u304a\u3044\u305f\u65b9\u304c\u3044\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093","2b4ee968":"## \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n\n30:70\u306e\u5272\u5408\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u5206\u5272\u3057\u3066\u4f5c\u6210\u3057\u305f  \n\u64ec\u4f3c\u7684\u306apublic\/private\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7cbe\u5ea6\u306e\u5dee\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002  ","c9821337":"# Shake\u5ea6\u5408\u3044\u3092\u898b\u7a4d\u3082\u308a\u305f\u3044\n\nPublicLB(\u66ab\u5b9a\u7d50\u679c)\u3068PrivateLB(\u6700\u7d42\u7d50\u679c)\u306b\u5dee\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u3092shake\u3068\u8a00\u3044\u307e\u3059\u3002  \n\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f [Naive experiment on LB shakeup](https:\/\/www.kaggle.com\/maxwell110\/naive-experiment-on-lb-shakeup) \u3092\u53c2\u8003\u306b\u3057\u3066\u3001  \n\u3053\u306e\u30b3\u30f3\u30da\u3067\u3069\u306e\u7a0b\u5ea6\u306eshake\u304c\u767a\u751f\u3059\u308b\u304b\u3092\u898b\u7a4d\u3082\u308b\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u307e\u3059\u3002\n\n## \u3069\u3046\u3084\u3063\u3066\uff1f\n\n\u3044\u304f\u3064\u304b\u4eee\u5b9a\u3092\u304a\u304d\u307e\u3059\u3002  \n\n- `train.csv`\u3068`test.csv`\u306f\u540c\u3058\u6027\u8cea\u3067\u3042\u308b(=\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066\u5206\u5272\u3055\u308c\u3066\u3044\u308b)\n- `test.csv`\u306e\u3046\u3061\u3001PublicLB\u7528\u306e\u30c7\u30fc\u30bf(30%)\u3068PrivateLB\u7528\u306e\u30c7\u30fc\u30bf(70%)\u3082\u540c\u3058\u6027\u8cea\u3067\u3042\u308b\n\n\u305d\u306e\u4e0a\u3067\u3001\u9069\u5f53\u306a\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u3066\u8a08\u7b97\u3057\u305fOOF(out of fold)\u4e88\u6e2c\u5024\u3092\u5229\u7528\u3057\u307e\u3059\u3002  \n\u30c7\u30fc\u30bf\u306e\u4ef6\u6570\u306e\u5dee(\u5b66\u7fd25000\u4ef6\u3001\u30c6\u30b9\u30c85760\u4ef6)\u306f\u8003\u3048\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n1. \u30c7\u30fc\u30bf\u309230:70\u306b\u30e9\u30f3\u30c0\u30e0\u5206\u5272\u3057\u3001\u524d\u8005\u3092\u64ec\u4f3c\u7684\u306a`public data`\u3001\u5f8c\u8005\u3092`private data`\u3068\u3059\u308b\n2. \u64ec\u4f3c\u7684\u306a`public score`\u3001`private score` (MAE)\u3092\u8a08\u7b97\u3059\u308b\n3. `public score`\u3068`private score`\u306e\u5dee\u3092\u8a08\u7b97\u3059\u308b\n4. 1-3\u309210000\u56de\u7e70\u308a\u8fd4\u3057\u3001\u30b9\u30b3\u30a2\u306e\u5dee\u306e\u5206\u5e03\u3092\u78ba\u8a8d\u3059\u308b\n\n## \u4e88\u60f3\n\n\u76f4\u611f\u7684\u306b\u306f\u3001\u7d50\u69cb\u5927\u304d\u306a\u5dee\u304c\u51fa\u308b\u306e\u3067\u306f\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002  \n\u306a\u305c\u306a\u3089\u3001\u4f8b\u3048\u3070\u3044\u304f\u3064\u304b\u5b58\u5728\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b100\u4e07\u5186\u306e\u7269\u4ef6\u306e\u3072\u3068\u3064\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u5024\u309250\u4e07\u5186\u3068\u3057\u3066\u3057\u307e\u3046\u3068\u3001  \n\u305d\u308c\u3060\u3051\u3067`publicLB`\u4e0a\u306eMAE\u3092`(500_000 \/ (5760*0.3))=289.4`\u7a0b\u5ea6\u62bc\u3057\u4e0a\u3052\u3066\u3057\u307e\u3046\u304b\u3089\u3067\u3059\u3002  \n\u9ad8\u984d\u7269\u4ef6\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u7cbe\u5ea6\u304c\u307e\u3061\u307e\u3061\u3067\u3042\u308b\u306a\u3089\u3001\u305d\u306e\u6210\u5426\u306b\u3088\u3063\u3066MAE\u306e\u5024\u304c\u5927\u304d\u304f\u3076\u308c\u3066\u3057\u307e\u3044\u305d\u3046\u3067\u3059\u3002\n\n## \u7d50\u8ad6\n\n- \u5dee\u306e\u3070\u3089\u3064\u304d\u306f\u5927\u304d\u305d\u3046\n- \u73fe\u6642\u70b9\u306e`PublicLB`\u3092\u898b\u308b\u9650\u308a\u3001\u8ab0\u304c1\u4f4d\u306b\u306a\u3063\u3066\u3082\u304a\u304b\u3057\u304f\u306a\u3055\u305d\u3046\n"}}