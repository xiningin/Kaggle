{"cell_type":{"a84f5a8c":"code","5ecca571":"code","dbc88a44":"code","73571d71":"code","5886a06b":"code","2bb78f81":"code","dbbced0a":"code","8b53c604":"code","f338e442":"code","6238fcd0":"code","201eb592":"code","03a0a0ab":"code","c6a766fa":"code","5c270ea8":"code","5395fb50":"code","4467b7f6":"code","657f497c":"code","f3a5b096":"code","f2d346bf":"code","4199c5ad":"code","c61d58dc":"code","6bee7dbd":"code","660fd95e":"code","c841b966":"code","a195a67d":"markdown","8c52f7d4":"markdown","1d5081f3":"markdown","d93358ed":"markdown","d7919ee2":"markdown","e26a5ba7":"markdown","0dcaa0f8":"markdown","97255074":"markdown","02973384":"markdown","43cf9ebc":"markdown","d6e5c2aa":"markdown","5aeff403":"markdown","abf52492":"markdown","6e120456":"markdown"},"source":{"a84f5a8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ecca571":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine = [train_df, test_df]","dbc88a44":"train_df.head()","73571d71":"train_df.info()\nprint('='*40)\ntest_df.info()","5886a06b":"train_df.describe(include=['object', 'float', 'integer'])","2bb78f81":"train_df[['Sex', 'Survived']].groupby('Sex', as_index=True).mean().sort_values(by='Survived', ascending=False)","dbbced0a":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([\\w]+)\\.', expand=False)\n\npd.crosstab(train_df['Title'], train_df['Sex'])","8b53c604":"train_df['Name']","f338e442":"# No significant correlation between Sex and Age\ntrain_df[['Sex', 'Age']].groupby('Sex').mean(),\\\ntrain_df[['Sex', 'Age']].groupby('Sex').std(),\\\ntrain_df[['Sex', 'Age']].groupby('Sex').median() ","6238fcd0":"grid = sns.FacetGrid(train_df, col='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","201eb592":"train_df = train_df.drop(['Name', 'PassengerId', 'Ticket', 'Cabin', 'Embarked'], axis=1)\ntest_df = test_df.drop(['Name', 'PassengerId', 'Ticket', 'Cabin', 'Embarked'], axis=1).copy(deep=False)\ncombine = [train_df, test_df]\ntrain_df.shape, test_df.shape\n\n","03a0a0ab":"# Switching 'Sex' to numerical values, easy to interpret \nfor dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()","c6a766fa":"combine[0].info(),\\\ncombine[1].info()","5c270ea8":"nrows = dataset['Sex'].unique().shape[0]\nncolumns = dataset['Title'].unique().shape[0]\n\n# combine includes both training and testing datasets. \nfor dataset in combine:\n    for i in dataset['Sex'].unique():\n        for j in dataset['Title'].unique():\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                                  (dataset['Title'] == j)]['Age'].dropna()\n            \n            \n            if (len(guess_df) == 0):\n                continue\n            print('Sex', i, 'Title', j)\n            \n            # We can also plot histograms here\n            #plt.figure()\n            #plt.hist(guess_df, bins=np.linspace(0, 80, 30))\n            #plt.title('Sex='+str(i)+';Title='+str(j))\n            \n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Title == j),\\\n                    'Age'] = np.mean(guess_df)\n            print(np.median(guess_df))\n            \n    print('Still null:', dataset.loc[(dataset.Age.isnull()), ['Age', 'Sex', 'Title']])","5395fb50":"print(dataset.loc[(dataset.Age.isnull()), ['Age', 'Sex', 'Title']])\ndataset.loc[(dataset.Age.isnull()), ['Age', 'Sex', 'Title']] = 28\nprint(dataset.loc[(dataset.Age.isnull()), ['Age', 'Sex', 'Title']])","4467b7f6":"# We want to drop some unrelevant features\n# Fare is not related to the survival so we drop it.\ntrain_df = train_df.drop(['Title', 'Fare'], axis=1)\ntest_df = test_df.drop(['Title', 'Fare'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.shape, test_df.shape","657f497c":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df\nX_train.shape, Y_train.shape, X_test.shape","f3a5b096":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = logreg.score(X_train, Y_train)\nacc_log\n\n# Our model has about 79% accuracy. ","f2d346bf":"coeff_logreg = pd.Series(data = logreg.coef_[0], index = X_train.columns)\ncoeff_logreg.sort_values()","4199c5ad":"from sklearn.model_selection import cross_val_score","c61d58dc":"cv_scorefei = cross_val_score(logreg, X_train, Y_train,\n                              cv=10)\nnp.mean(cv_scorefei), np.max(cv_scorefei), np.min(cv_scorefei)","6bee7dbd":"#os.mkdir('\/kaggle\/working\/titanic\/')","660fd95e":"test_df_orginal = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_df_orginal[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('\/kaggle\/working\/submission.csv', index=False)","c841b966":"submission","a195a67d":"### 1. Read in training and testing data","8c52f7d4":"#### No more NaN age values now! :)","1d5081f3":"#### To complete feature 'Age', we think it is reasonable to use 'Title' and 'Sex' to estimate the age. ","d93358ed":"#### The score of the logistic regression tells us the accuracy of the model prediction using training datasets. score = correct predictions\/total # of predictions","d7919ee2":"#### There is only 1 passenger in the testing dataset still null even after imputing estimated age values. This because in the testing dataset there are no female with title 'Ms'. Therefore, we plug in age value for this passenger based on the result in the training dataset, which is 28 years old. ","e26a5ba7":"#### ","0dcaa0f8":"### 5. To better test our model, we apply cross validation.\n\nWe divided the training datasets into train and validation into 10 folds. ","97255074":"### Submit files","02973384":"### ","43cf9ebc":"#### We can notice that there is a strong correlation between sex and survival. More females survived in this accident. ","d6e5c2aa":"### 2. Explore the dataset\n#### For the training dataset, we noticed that: 1)some features including 'Age', 'Cabin', and 'Embarked' has null values; 2) 2 float columns, 5 integer columns and 5 object columns, total 12 columns. For the testing dataset, we noticed that: 1)some features including 'Age', 'Cabin', and 'Fare' has null values; 2) 4 integer columns instead of 5 (no target column 'Survived')","5aeff403":"### 3. Imputing and adding features\n#### Imputing 'Age' column. Completing the null values in the 'Age' column based on its correlation with other features. ","abf52492":"### 4. Finally we run Logistic Regression to predict the survival of X_test.\n\nBefore running it, make sure no null values in the X_test.","6e120456":"#### The average score is 79% which is not bad~ :D"}}