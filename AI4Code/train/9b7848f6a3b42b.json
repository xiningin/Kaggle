{"cell_type":{"8ab463cc":"code","7019b1d6":"code","fcdc2efe":"code","3246f528":"code","7689682d":"code","fc201260":"code","a8c313eb":"code","b99ddb62":"code","a08c2c45":"code","e4fb45a7":"code","da9577f3":"code","0d2f1a41":"code","51c0d689":"code","19107513":"code","3bf01809":"markdown","1efa0590":"markdown","b0caf813":"markdown","b6cacdb4":"markdown","f332181e":"markdown"},"source":{"8ab463cc":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet, RidgeCV, LassoCV, ElasticNetCV","7019b1d6":"data = pd.read_csv('..\/input\/insurance\/insurance.csv')","fcdc2efe":"data","3246f528":"data.info()","7689682d":"print(\"Total missing values:\", data.isna().sum().sum())","fc201260":"data['children'] = data['children'].astype(str)","a8c313eb":"print(\"Total non-numeric columns:\", len(data.select_dtypes('object').columns))","b99ddb62":"{column: list(data[column].unique()) for column in data.select_dtypes('object').columns}","a08c2c45":"def binary_encode(df, column, positive_value):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: 1 if x == positive_value else 0)\n    return df\n\ndef onehot_encode(df, column, prefix):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=prefix)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","e4fb45a7":"def preprocess_inputs(df, scaler, train_size=0.7):\n    \n    df = df.copy()\n    \n    # Binary encode sex and smoker columns\n    df = binary_encode(df, 'sex', 'male')\n    df = binary_encode(df, 'smoker', 'yes')\n    \n    # One-hot encode the children and region columns\n    df = onehot_encode(df, 'children', 'ch')\n    df = onehot_encode(df, 'region', 're')\n    \n    # Split df in X and y\n    y = df['charges'].copy()\n    X = df.drop('charges', axis=1).copy()\n    \n    # Scale X with the given scaler\n    X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\n    \n    # Split into train and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=train_size, random_state=123)\n    \n    return X_train, X_test, y_train, y_test","da9577f3":"data","0d2f1a41":"X_train, X_test, y_train, y_test = preprocess_inputs(data, StandardScaler(), train_size=0.7)","51c0d689":"models = {\n    '         OLS Model:': LinearRegression(),\n    '          L2 Model:': Ridge(),\n    '          L1 Model:': Lasso(),\n    '  ElasticNet Model:': ElasticNet(),\n    '       L2 CV Model:': RidgeCV(),\n    '       L1 CV Model:': LassoCV(),\n    'ElasticNetCV Model:': ElasticNetCV()\n}\n\nfor model in models.values():\n    model.fit(X_train, y_train)","19107513":"print(\"Model R^2 Scores:\\n-----------------\")\n\nfor name, model in models.items():\n    print(name, model.score(X_test, y_test))","3bf01809":"# Getting Started","1efa0590":"# Preprocessing","b0caf813":"# Task for Today  \n\n***\n\n## Medical Cost Prediction  \n\nGiven *patient data*, let's try to predict the **charges** a given patient will incur.  \n  \nWe will use a variety of linear regression models to make our predictions.","b6cacdb4":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/3GCv4Qq5DZQ","f332181e":"# Training"}}