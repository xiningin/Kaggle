{"cell_type":{"b1f7b905":"code","c3f4c5fb":"code","b323cbf9":"code","5bbc733b":"code","1507596b":"code","c38a7480":"code","fe3c0a20":"code","078ffb77":"code","f24d0342":"code","7c49308a":"code","6fe8deb0":"code","26a9d229":"code","a2109638":"code","bd00282c":"code","55352714":"code","85bb81e5":"code","ffc683bc":"code","deb7a98e":"code","d187871e":"code","bf0e0f59":"code","64efa105":"code","e4b3ee34":"code","64117d39":"code","e08f4045":"code","1a1ab418":"code","0b6552e3":"code","4e3f49b1":"code","92e04712":"code","9cd08635":"code","1c0252dd":"code","9429222b":"markdown","13b51bba":"markdown","9a2aee63":"markdown","53c2bb03":"markdown","76f5e8ce":"markdown","f698d061":"markdown","b3c6849d":"markdown","26c54d67":"markdown","02847d16":"markdown","9f6fa022":"markdown","84caee32":"markdown","194ea6a4":"markdown","0feef1b7":"markdown","17e6d2b0":"markdown","b3b276bb":"markdown","3c74a284":"markdown","c42acd78":"markdown","cb8980f6":"markdown","5b59a6a4":"markdown","76218b9b":"markdown","fb3daeca":"markdown","0cb1a92c":"markdown","b70f7a15":"markdown"},"source":{"b1f7b905":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3f4c5fb":"df = pd.read_csv(\"\/kaggle\/input\/heart-failure-prediction\/heart.csv\")","b323cbf9":"df.head()","5bbc733b":"df.shape","1507596b":"print(df.hist())","c38a7480":"import seaborn as sns\nimport matplotlib.pyplot as plt\nf, axes = plt.subplots(2, 3, figsize=(15, 10))\n\nsns.countplot(x = df['HeartDisease'], data = df, palette='rocket', ax=axes[0,0])\nsns.countplot(x = df['RestingECG'], data = df, palette='rocket', ax=axes[0,1])\nsns.countplot(x = df['ChestPainType'], data = df, palette='rocket', ax=axes[0,2])\n\nsns.countplot(x = df['ExerciseAngina'], data = df, palette='rocket', ax=axes[1,0])\nsns.countplot(x = df['RestingECG'], data = df, palette='rocket', ax=axes[1,1])\nsns.countplot(x = df['Sex'], data = df, palette='rocket', ax=axes[1,2])\nplt.show()","fe3c0a20":"# checkin NULL values in dataset\ndf.isna().sum()","078ffb77":"df.columns","f24d0342":"pip install python-highcharts","7c49308a":"from highcharts import Highchart\nimport matplotlib.pyplot as plt","6fe8deb0":"gender_placed = df[df['Sex'] == 'M'].HeartDisease.value_counts().to_frame()\ngender_not_placed = df[df['Sex'] == 'F'].HeartDisease.value_counts().to_frame()\ngender_placed=gender_placed.merge(gender_not_placed,left_index=True,right_index=True,how='left').dropna()\ngender_placed.columns=['Male', 'Female',]\n\nH = Highchart(width=1000,height=400)\n\noptions = {\n    'title': {\n        'text': 'Male vs Female Heart Disease(YES or NO)'\n    },\n    'xAxis': {\n        'categories': ['Heart-Disease', 'Normal',],\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Respondents'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(gender_placed['Male'])\ndata2 = list(gender_placed['Female'])\nH.add_data_set(data1,'bar','Male')\nH.add_data_set(data2,'bar','Female')\nH\n","26a9d229":"gender_asy = df[df['ChestPainType'] == 'ASY'].HeartDisease.value_counts().to_frame()\ngender_nap = df[df['ChestPainType'] == 'NAP'].HeartDisease.value_counts().to_frame()\ngender_ata = df[df['ChestPainType'] == 'ATA'].HeartDisease.value_counts().to_frame()\ngender_ta = df[df['ChestPainType'] == 'TA'].HeartDisease.value_counts().to_frame()\ngender_asy=gender_asy.merge(gender_nap,left_index=True,right_index=True,how='left').dropna()\ngender_y = gender_ata.merge(gender_asy,left_index=True,right_index=True,how='left').dropna()\ngender_z = gender_ta.merge(gender_y,left_index=True,right_index=True,how='left').dropna()\ngender_z\ngender_z.columns=['TA', 'ATA','ASY','NAP']\n\nH = Highchart(width=1000,height=600)\n\noptions = {\n    'title': {\n        'text': 'Male vs Female Heart Disease(YES or NO)'\n    },\n    'xAxis': {\n        'categories': ['Normal', 'Heart-disease'],\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Respondents'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(gender_z['ASY'])\ndata2 = list(gender_z['NAP'])\ndata3 = list(gender_z['ATA'])\ndata4 = list(gender_z['TA'])\nH.add_data_set(data1,'bar','ASY')\nH.add_data_set(data2,'bar','NAP')\nH.add_data_set(data3,'bar','ATA')\nH.add_data_set(data4,'bar','TA')\n\nH","a2109638":"gender_n = df[df['RestingECG'] == 'LVH'].HeartDisease.value_counts().to_frame()\ngender_l = df[df['RestingECG'] == 'ST'].HeartDisease.value_counts().to_frame()\ngender_s = df[df['RestingECG'] == 'Normal'].HeartDisease.value_counts().to_frame()\n\ngender_n=gender_n.merge(gender_l,left_index=True,right_index=True,how='left').dropna()\ngender_s = gender_s.merge(gender_n,left_index=True,right_index=True,how='left').dropna()\n\n\ngender_s.columns=['Normal', 'LVH','Others']\n\nH = Highchart(width=1000,height=600)\n\noptions = {\n    'title': {\n        'text': 'Male vs Female Heart Disease(YES or NO)'\n    },\n    'xAxis': {\n        'categories': ['Heart-Disease', 'Normal'],\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Respondents'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(gender_s['Normal'])\ndata2 = list(gender_s['LVH'])\ndata3 = list(gender_s['Others'])\n\nH.add_data_set(data1,'bar','Normal')\nH.add_data_set(data2,'bar','LVH')\nH.add_data_set(data3,'bar','Others')\n\n\nH","bd00282c":"gender_placed = df[df['FastingBS'] == 0].HeartDisease.value_counts().to_frame()\ngender_not_placed = df[df['FastingBS'] == 1].HeartDisease.value_counts().to_frame()\ngender_placed=gender_placed.merge(gender_not_placed,left_index=True,right_index=True,how='left').dropna()\n\ngender_placed.columns=['FastingBS <120 mg\/dl', 'FastingBS >120 mg\/dl',]\n\nH = Highchart(width=800,height=750)\n\noptions = {\n    'title': {\n        'text': ' FastingBS'\n    },\n    'xAxis': {\n        'categories':['Normal', 'Heart-disease'],\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Respondents'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(gender_placed[ 'FastingBS >120 mg\/dl'])\ndata2 = list(gender_placed[ 'FastingBS <120 mg\/dl'])\nH.add_data_set(data1,'bar','FastingBS > 120 mg\/dl')\nH.add_data_set(data2,'bar','FastingBS < 120 mg\/dl')\nH","55352714":"gender_placed = df[df['ExerciseAngina'] == \"N\"].HeartDisease.value_counts().to_frame()\ngender_not_placed = df[df['ExerciseAngina'] == 'Y'].HeartDisease.value_counts().to_frame()\ngender_placed=gender_placed.merge(gender_not_placed,left_index=True,right_index=True,how='left').dropna()\n\ngender_placed.columns=['NO', 'YES',]\n\nH = Highchart(width=800,height=750)\n\noptions = {\n    'title': {\n        'text': 'ExerciseAngina'\n    },\n    'xAxis': {\n        'categories':['Normal', 'Heart-disease'],\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Respondents'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(gender_placed['NO'])\ndata2 = list(gender_placed['YES'])\nH.add_data_set(data1,'bar','NO')\nH.add_data_set(data2,'bar','YES')\nH","85bb81e5":"gender_n = df[df['ST_Slope'] == 'Up'].HeartDisease.value_counts().to_frame()\ngender_l = df[df['ST_Slope'] == 'Flat'].HeartDisease.value_counts().to_frame()\ngender_s = df[df['ST_Slope'] == 'Down'].HeartDisease.value_counts().to_frame()\n\ngender_n=gender_n.merge(gender_l,left_index=True,right_index=True,how='left').dropna()\ngender_s = gender_s.merge(gender_n,left_index=True,right_index=True,how='left').dropna()\n\n\ngender_s.columns=['Up', 'Flat','Down']\n\nH = Highchart(width=1000,height=600)\n\noptions = {\n    'title': {\n        'text': ' ST_Slope'\n    },\n    'xAxis': {\n        'categories': ['Heart-Disease', 'Normal'],\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Respondents'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(gender_s['Up'])\ndata2 = list(gender_s['Flat'])\ndata3 = list(gender_s['Down'])\n\nH.add_data_set(data1,'bar','Up')\nH.add_data_set(data2,'bar','Flat')\nH.add_data_set(data3,'bar','Down')\n\n\nH","ffc683bc":"plt.figure(figsize=(15,8))\nsns.heatmap(df.corr(), annot=True, cmap='RdYlBu')","deb7a98e":"df.dtypes\n","d187871e":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\n\ndf['Sex']=le.fit_transform(df['Sex'])\ndf['RestingECG']=le.fit_transform(df['RestingECG'])\ndf['ChestPainType']=le.fit_transform(df['ChestPainType'])\ndf['ExerciseAngina']=le.fit_transform(df['ExerciseAngina'])\ndf['ST_Slope']=le.fit_transform(df['ST_Slope'])","bf0e0f59":"df","64efa105":"# dropping heart-disease coloumn as it will our main be our label for the model hence we will be dropping it and using rest of the data as features for our model\n\nX = df.drop('HeartDisease', axis=1)\n","e4b3ee34":"#  creating label\n\ny = df['HeartDisease']","64117d39":"\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\nfrom sklearn.metrics import confusion_matrix ,classification_report,accuracy_score","e08f4045":"\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.4)\n\nprint(\"X_train: \", x_train.shape)\nprint(\"X_test: \", x_test.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"y_test: \", y_test.shape)","1a1ab418":"\nclf_ada= AdaBoostClassifier()\n\nclf_ada.fit(x_train,y_train)\npred=clf_ada.predict(x_test)\nprint('accuracy score through AdaBoostClassifier is :')\nprint(round((accuracy_score(y_test,pred)),3))\nprint(\"----------------------------------------------------------------------------\")\nprint('classification report is')\nprint(classification_report(y_test,pred))\nprint(\"----------------------------------------------------------------------------\")\nprint('confusion matrix is')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')","0b6552e3":"clf_rf = RandomForestClassifier()\n\nclf_rf.fit(x_train,y_train)\npred_r=clf_rf.predict(x_test)\nprint('accuracy score through random forest is :')\nprint(round((accuracy_score(y_test,pred_r)),3))\nprint(\"----------------------------------------------------------------------------\")\nprint('classification report is')\nprint(classification_report(y_test,pred_r))\nprint(\"----------------------------------------------------------------------------\")\nprint('confusion matrix is')\nprint(confusion_matrix(y_test,pred_r))\nprint('\\n')","4e3f49b1":"clf_tree= tree.DecisionTreeClassifier()\n\nclf_tree.fit(x_train,y_train)\npred_tree=clf_tree.predict(x_test)\nprint('accuracy score through is DecisionTreeClassifier :')\nprint(round((accuracy_score(y_test,pred_tree)),3))\nprint(\"----------------------------------------------------------------------------\")\nprint('classification report is')\nprint(classification_report(y_test,pred_tree))\nprint(\"----------------------------------------------------------------------------\")\nprint('confusion matrix is')\nprint(confusion_matrix(y_test,pred_tree))\nprint('\\n')","92e04712":"print(clf_ada.predict([[40,1,1,140,289,0,1,172,0.0,0,2]]))","9cd08635":"print(clf_rf.predict([[68,1,0,144,193,1,1,141,0,3.4,1]]))","1c0252dd":"print(clf_rf.predict([[38,1,2,138,175,0,1,173,0,0.0,2]]))","9429222b":"#  **5. On basis of ExerciseAngina**","13b51bba":"**RandomForestClassifier**","9a2aee63":"#  **2. On basis of ChestPainType**","53c2bb03":"# **1. On basis of gender**","76f5e8ce":"checking the datatype of each column","f698d061":"**Columns in the data set**","b3c6849d":"# Building The Model\n","26c54d67":"**Patients having \"ST\" are more prone to heart-disease**","02847d16":"#  **4. On basis of  FastingBS**","9f6fa022":"**splitting the data set into train and test:**\n\n**training dataset->60% of actual datset**\n\n**testing dataset ->40% of actual dataset**","84caee32":"# Analysis Of Target Variable(HeartDisease) With The Features Of Data-set","194ea6a4":"# HEATMAP","0feef1b7":"#  **3. On basis of RestingECG**","17e6d2b0":"#  **6. On basis of ST_Slope**","b3b276bb":"**people having high blood-sugar are more prone to heart -disease**","3c74a284":"**count of each value of every coloumn in dataset**","c42acd78":"**From above plot we can interpret that:**\n\n**1] patients having \"ASY\" type chest pain are highest in number then \"NAP\"type chest pain pateints followed by \"ATA\" and at last comes\"TA\"chest pain patients**\n\n**2] patient  of \"ASY\" type chest pain are more prone to heart-disease**","cb8980f6":"**We will be using three classifiers i;e Adaboost,RandomForest,Descision tree**","5b59a6a4":"**From above plot we can interpret that Males are highly prone to Heart-Disease as Compared to Females, i:e males have 90% chances for disease whereas females have less than 10% chances for the disease**","76218b9b":"**Ada boost classifier**","fb3daeca":"> **People having exercise angenia,i:e when you do more physical activity like climbing running etc... are more prone to heart-disease**","0cb1a92c":"**As in the above section we see that there are many features that have string\/object dtype and machine learning does not read string type data rather read only int. dtypes hence to convert them into int. dtype we need to encode them using LabelEncoder**","b70f7a15":"**DecisionTreeClassifier**"}}