{"cell_type":{"3a0a27be":"code","2f984022":"code","294cfe68":"code","4e40cb6a":"code","f188a678":"code","6c41fad3":"code","2c70c56c":"code","b0d71a73":"code","96ef418b":"code","e1321b77":"code","feefed36":"code","70aac179":"code","ad777fb5":"code","f0aadab8":"code","abd68d9a":"code","db57b15e":"code","52fc1cde":"code","40817da2":"code","8d44f6b3":"code","0bd1fded":"code","9d4d2b05":"code","e7b28235":"code","56b79dbf":"code","c4555a74":"code","5a63780d":"code","6590737b":"code","f901d01c":"code","2d5e08f8":"markdown","dd01bc74":"markdown","f1f693ac":"markdown","675415ca":"markdown"},"source":{"3a0a27be":"#!pip install autoviml==0.1.671\n!pip install autoviml","2f984022":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nfrom autoviml.Auto_ViML import Auto_ViML\nfrom fastai.tabular import *\nimport datetime\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","294cfe68":"train = pd.read_csv('\/kaggle\/input\/workation-price-prediction-challengemachinehack\/Train.csv')\ntest = pd.read_csv('\/kaggle\/input\/workation-price-prediction-challengemachinehack\/Test.csv')\nsub = pd.read_csv('\/kaggle\/input\/workation-price-prediction-challengemachinehack\/Test.csv')\nfor i in sub.columns:\n    if i != 'Uniq Id':\n        del sub[i]\nsub['Per Person Price'] = -1\ndel sub['Uniq Id']\nprint(train.shape,test.shape)","4e40cb6a":"test['Per Person Price'] = 0\n#append test to train for feature creation\nfull=train.append(test)\nfull=full.reset_index()\nfull=full.drop('index',axis=1)\nprint(full.shape)","f188a678":"# various data correction & preprocessing\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":One\",':1.0')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":Two\",':2.0')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":Three\",':3.0')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":Four\",':4.0')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\":Five\",':5.0')\nfull['Itinerary'] = ' ' + full['Itinerary'].astype(str)\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\")\",'')\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\"(\",'')\nfull.iloc[27211,5] = full.iloc[27211,3]\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.lower()\nfull['Hotel Details'] = full['Hotel Details'].str.lower()\nfull['Itinerary'] = full['Itinerary'].str.lower()\nfull['Airline'] = full['Airline'].str.lower()","6c41fad3":"# extract and create features from destination\nalldest = []\ntemp = full['Destination']\nfor i in temp:\n    truc = i.split('|')\n    for i in truc:\n        # Island \n        alldest.append(i)\ndest = list(set(alldest))\nclean = ['Singapore Cruise','Kovalam and Poovar']\nfor i in dest:\n    if i not in clean:\n        full[i] = False\n        full.loc[full['Destination'].str.contains(i), i] = True \nlen(dest)","2c70c56c":"#sorted(dest)","b0d71a73":"#full[full['Singapore']==True]","96ef418b":"# extract and create features from destination Hotel Details\nfull['mmt'] = False\nfull.loc[full['Hotel Details'].str.contains('mmt'), 'mmt'] = True\n\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\" - mmt holidays special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"- mmt holidays special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"-mmt holidays special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"(mmt holidays special)\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\" - mmt special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"- mmt speciall\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"-mmt special\",'')\nfull['Hotel Details'] = full['Hotel Details'].str.replace(\"mmt special\",'')\n\nhotels = []\ntemp = full['Hotel Details']\nfor i in tqdm(temp):\n    truc = i.split('|')\n    for i in truc:\n        keep = ''\n        if i[-4] == \":\":\n            keep = i[:-4]\n        else:\n            if i[-3] == \":\":\n                keep = i[:-3]\n            else:\n                if i[-2] == \":\":\n                    keep = i[:-2]\n                else:\n                    if i[-1] == \":\":\n                        keep = i[:-1]\n                    \n        hotels.append(keep)\nhotels = list(set(hotels))\nfor i in tqdm(hotels):\n    full[i] = False\n    full.loc[full['Hotel Details'].str.contains(i), i] = True \nlen(hotels)","e1321b77":"# extract and create features from Sightseeing Places Covered\nfull['mmt2'] = False\nfull.loc[full['Sightseeing Places Covered'].str.contains('mmt'), 'mmt2'] = True\nfull['bus'] = False\nfull.loc[full['Sightseeing Places Covered'].str.contains('bus'), 'bus'] = True\n\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\"mmt - \",'')\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\" - mmt \",'')\n\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\"north\",'')\nfull['Sightseeing Places Covered'] = full['Sightseeing Places Covered'].str.replace(\"south\",'')\n\nexc = []\ntemp = full['Sightseeing Places Covered']\nfor i in temp:\n    truc = i.split('|')\n    for i in truc:\n        exc.append(i)\nexc = list(set(exc))\nfor i in tqdm(exc):\n    full[i] = False\n    full.loc[full['Sightseeing Places Covered'].str.contains(i), i] = True \n\nlen(exc)\n","feefed36":"def sumdigits(str):\n    return sum(int(c) for c in str if c.isdigit())\n\ndef feature_engineering(df):\n    #'Package Type'\n    df['Package Type'].replace('Budget', 0,inplace=True)\n    df['Package Type'].replace('Standard', 1,inplace=True)\n    df['Package Type'].replace('Deluxe', 2,inplace=True)\n    df['Package Type'].replace('Luxury', 3,inplace=True)\n    df['Package Type'].replace('Premium', 4,inplace=True)\n    #'Itinerary'\n    duration = []\n    for i in range(0,len(df)):\n        duration.append(sumdigits(df.iloc[i,4]))\n    df['duration'] = duration\n    #'Places Covered'\n    places = []\n    temp = df['Places Covered']\n    for i in temp:\n        truc = i.split('|')\n        places.append(len(truc))\n    df['places'] = places\n    #'Travel Date'\n    #full['Travel Date'] = pd.to_datetime(full['Travel Date'], format='%d-%m-%Y')\n    #add_datepart(full,'Travel Date',prefix='day$',drop=False,time=False)\n    #df['day'] = df['Travel Date'].str[0:2]\n    #df['month'] = df['Travel Date'].str[3:5]\n    #df['year'] = df['Travel Date'].str[-4:]\n    #'Hotel Details'\n    score =[]\n    temp = df['Hotel Details']\n    for i in tqdm(temp):\n        stars = 0.\n        if i == 'Not Available':\n            score.append(stars)\n        else:\n            truc = i.split('|')\n            tot = 0\n            for j in range(0,len(truc)):# pattern :x.x\n                if truc[j][-4:-3]==':':\n                    stars += float(truc[j][-3:])\n                    tot+=1\n                else:# pattern :x.x\n                    if truc[j][-2:-1]==':':\n                        stars += float(truc[j][-1:])\n                        tot+=1\n            if stars != 0.:\n                stars = stars \/ tot\n            score.append(stars)\n    df['score'] = score\n    df['score'] = df['score'].replace(0., np.nan)\n    #'Start City'\n    df['Start City'].replace('New Delhi', 0,inplace=True)\n    df['Start City'].replace('Mumbai', 1,inplace=True)\n    #'Airline'\n    airlines = []\n    temp = df['Airline']\n    for i in temp:\n        truc = i.split('|')\n        airlines.append(len(truc))\n    df['Airnum'] = airlines\n    #'Flight Stops'\n    #'Meals'\n    #'Sightseeing Places Covered'\n    visits = []\n    temp = df['Sightseeing Places Covered']\n    for i in temp:\n        truc = i.split('|')\n        visits.append(len(truc))\n    df['visits'] = visits\n    #'Cancellation Rules'\n    temp = df['Cancellation Rules'].unique()\n    for i in range(0,len(temp)):\n        df['Cancellation Rules'].replace(temp[i], i,inplace=True)\n    #'Per Person Price'\n    \n    ##################################################################\n    #'Uniq Id'\n    del df['Uniq Id']\n    #'Package Name'\n    del df['Package Name']\n    #'Destination'\n    del df['Destination']\n    #'Itinerary'\n    del df['Itinerary']\n    #'Places Covered'\n    del df['Places Covered']\n    #'Travel Date'\n    del df['Travel Date'] \n    #'Hotel Details'\n    del df['Hotel Details']\n    #'Airline'\n    #del df['Airline']\n    #'Sightseeing Places Covered'\n    del df['Sightseeing Places Covered']\n","70aac179":"feature_engineering(full)","ad777fb5":"train = full[full['Per Person Price']!=0]\ntest = full[full['Per Person Price']==0]","f0aadab8":"train['Per Person Price'] = np.log(train['Per Person Price'])","abd68d9a":"target  = 'Per Person Price'\nmodel, features, trainm, testm = Auto_ViML(\n    train,\n    target,\n    test,\n    sub,\n    hyper_param=\"RS\",\n    feature_reduction=False,\n    scoring_parameter= \"neg_mean_squared_log_error\",#\n    KMeans_Featurizer=True,#False,\n    Boosting_Flag= 'catboost',#True,#\n    Binning_Flag=False,\n    Add_Poly=1,\n    Stacking_Flag=False,\n    Imbalanced_Flag=False,\n    verbose=2\n)","db57b15e":"sub['Per Person Price'] = np.expm1(sub['Per Person Price'])","52fc1cde":"sub.to_csv('baseline_v20kc.csv', index=False)# catboost RMSLE = 0.1659","40817da2":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@master","8d44f6b3":"from supervised.automl import AutoML # mljar-supervised","0bd1fded":"col = list(trainm.columns)\ncol.remove('Per Person Price')","9d4d2b05":"x_cols = col\ny_col = 'Per Person Price'","e7b28235":"automl = AutoML(\n    mode=\"Compete\", \n    eval_metric=\"rmse\",\n    total_time_limit=10000,\n    features_selection=False # switch off feature selection\n)\nautoml.fit(trainm[x_cols], trainm[y_col])","56b79dbf":"preds = automl.predict(testm[x_cols])","c4555a74":"sub['Per Person Price'] = np.expm1(preds)","5a63780d":"sub.to_csv('baseline_v20kd.csv', index=False)# rmse 0.158027","6590737b":"sub.describe()","f901d01c":"automl.report()","2d5e08f8":"# Model 2 : MLJAR AutoML","dd01bc74":"# Model 1 : Auto ViML","f1f693ac":"# Feature Encoding","675415ca":"# Feature Engineering"}}