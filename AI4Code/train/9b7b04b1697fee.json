{"cell_type":{"7815a7cf":"code","0ce24df2":"code","a1ac40a9":"code","7e9cbbe4":"code","b2aa5196":"code","85e11880":"code","d51684e8":"code","7ff4bec8":"code","1ef1b6cb":"code","adb59d6e":"code","bbd1778a":"code","836b3733":"code","0989a9a1":"code","a8acc60d":"code","42bfb362":"code","c43d3064":"code","b8625f52":"code","f18bdce4":"code","893b212a":"code","9278ae9a":"code","7220fac6":"code","f81d08ce":"code","57a29311":"code","c392a937":"code","4c7aacb3":"code","3297462c":"code","07ae1a99":"code","0d986c86":"code","e9668116":"code","ded562c6":"code","30fa22ef":"code","bab6546e":"code","8ab20bc5":"code","0b571d0f":"code","0c4f5131":"code","1df43324":"code","3ad85395":"code","fe2cdc83":"code","7a2bf158":"code","8ebe1303":"code","b71ce633":"code","6685e6f1":"code","e97ec48b":"code","154b116c":"code","f40307fd":"code","5a5f7f79":"code","66b14a76":"code","8e6225a4":"code","981e20cf":"code","f50323af":"code","47c86ef2":"code","18f9078e":"code","4ca23a3e":"code","646f2f8e":"code","720d8065":"code","8c641e5e":"markdown","746db1dd":"markdown","25d85a6c":"markdown","bfff3807":"markdown","a3e7a61f":"markdown","ae796a29":"markdown","3605b3d5":"markdown","c0d8bc03":"markdown","93b04a2f":"markdown","ba117192":"markdown"},"source":{"7815a7cf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nimport lightgbm as lgb\nimport xgboost as xgb\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom boruta import BorutaPy\nfrom sklearn.feature_selection import RFE\nimport sys","0ce24df2":"train = pd.read_csv('..\/input\/bigcon2019083101\/Train.csv')\ntest1 = pd.read_csv('..\/input\/bigcon2019083101\/Test1.csv')\ntest2 = pd.read_csv('..\/input\/bigcon2019083101\/Test2.csv')","a1ac40a9":"validation_acc = pd.read_csv('..\/input\/bigcontest2019\/train_valid_user_id.csv')","7e9cbbe4":"train_churn = train.loc[train['survival_time'] != 64]\ntrain_churn.head()","b2aa5196":"temp_train = train.drop(columns = ['acc_id','amount_spent','survival_time'],axis =1)\ntemp_target = train.survival_time\n\ngbm = lgb.LGBMRegressor()\ngbm.fit(temp_train,temp_target)\ngbm.booster_.feature_importance()\n\nfea_imp_ = pd.DataFrame({'cols':temp_train.columns, 'fea_imp':gbm.feature_importances_})\nfea_imp_.loc[fea_imp_.fea_imp > 0].sort_values(by = ['fea_imp'], ascending = False).head(10)","85e11880":"fig, ax = plt.subplots(figsize=(10,10))\nlgb.plot_importance(gbm,ax=ax)\nplt.show()","d51684e8":"rf_params = {'n_estimators' : 1000,\n            'max_depth' : 5}\n\nrf = RandomForestRegressor(**rf_params,random_state = 123)\nrf.fit(temp_train,temp_target)","7ff4bec8":"feature_imp = pd.DataFrame({'cols':temp_train.columns, 'importance':rf.feature_importances_})\nfeature_imp.loc[feature_imp.importance > 0].sort_values(by = ['importance'],ascending = False).head(10)","1ef1b6cb":"selector = RFE(gbm,18,step = 1) #####\nselector = selector.fit(temp_train,temp_target)\n\nprint(selector.support_)\n\nfea_rank_ = pd.DataFrame({'cols':temp_train.columns,'fea_rank':selector.ranking_ })\nfea_rank_.loc[fea_rank_.fea_rank > 0].sort_values(by = ['fea_rank'], ascending = True).head(10)","adb59d6e":"survival_col=list(fea_rank_.loc[fea_rank_.fea_rank > 0].sort_values(by = ['fea_rank'], ascending = True).head(18)['cols'])+['acc_id','amount_spent','survival_time']\nsurvival_col_non_target = list(fea_rank_.loc[fea_rank_.fea_rank > 0].sort_values(by = ['fea_rank'], ascending = True).head(18)['cols'])","bbd1778a":"temp_target = train_churn.amount_spent\ntemp_train = train_churn.drop(columns = ['acc_id','amount_spent','survival_time'],axis =1)\n\ngbm = lgb.LGBMRegressor()\ngbm.fit(temp_train,temp_target)\n\nfea_imp_ = pd.DataFrame({'cols':temp_train.columns, 'fea_imp':gbm.feature_importances_})\nfea_imp_.loc[fea_imp_.fea_imp > 0].sort_values(by = ['fea_imp'], ascending = False).head(10)","836b3733":"rf = RandomForestRegressor(**rf_params,random_state = 123)\nrf.fit(temp_train,temp_target)","0989a9a1":"feature_imp = pd.DataFrame({'cols':temp_train.columns,'importance':rf.feature_importances_})\nfeature_imp.loc[feature_imp.importance > 0].sort_values(by = ['importance']).head(10)","a8acc60d":"selector = RFE(gbm,18,step = 1)\nselector = selector.fit(temp_train,temp_target)\n\nprint(selector.support_)\n\nfea_rank_ = pd.DataFrame({'cols':temp_train.columns,'fea_rank':selector.ranking_ })\nfea_rank_.loc[fea_rank_.fea_rank > 0].sort_values(by = ['fea_rank'], ascending = True).head(10)","42bfb362":"amount_spent_col=list(fea_rank_.loc[fea_rank_.fea_rank > 0].sort_values(by = ['fea_rank'], ascending = True).head(18)['cols'])+['acc_id','amount_spent','survival_time']\namount_spent_col_non_target=list(fea_rank_.loc[fea_rank_.fea_rank > 0].sort_values(by = ['fea_rank'], ascending = True).head(18)['cols'])","c43d3064":"survival_feature_selection_train = train_churn[survival_col]\namount_feature_selection_train = train_churn[amount_spent_col]","b8625f52":"def survival64(y_pred, dataset):\n    y_true = dataset.get_label()\n    y_pred = np.array([64 if x > 64 else x for x in y_pred])\n    y_pred = np.array([0 if x < 0 else x for x in y_pred])\n    y_pred = np.round(y_pred)\n    error = np.sqrt(mean_squared_error(y_true, y_pred))\n    return 'error', error, False","f18bdce4":"train_index = validation_acc[validation_acc.set == 'Train'].acc_id\nvalid_index = validation_acc[validation_acc.set == 'Validation'].acc_id\n\nsurvival_train_set = survival_feature_selection_train[train['acc_id'].isin(train_index)]\nsurvival_valid_set = survival_feature_selection_train[train['acc_id'].isin(valid_index)]\n\namount_train_set = amount_feature_selection_train[train['acc_id'].isin(train_index)]\namount_valid_set = amount_feature_selection_train[train['acc_id'].isin(valid_index)]\n\nprint('Survival Train set:',survival_train_set.shape)\nprint('Survival Valid set:',survival_valid_set.shape)\n\nprint('Amount Spent Train set:',amount_train_set.shape)\nprint('Amount Spent Valid set:',amount_valid_set.shape)","893b212a":"lgb_params = {'n_estimators': 1000,\n             'seed': 123}\n\nlgb_train_amount = lgb.Dataset(amount_train_set.drop(['acc_id','amount_spent','survival_time'],axis = 1),\n                              amount_train_set.amount_spent)\nlgb_train_survival = lgb.Dataset(survival_train_set.drop(['acc_id','amount_spent','survival_time'],axis = 1),\n                                survival_train_set.survival_time)","9278ae9a":"lgb_amount = lgb.train(lgb_params,\n                      lgb_train_amount,\n                      feval = survival64,\n                      valid_sets = [lgb_train_amount],\n                      verbose_eval=100)\n\nlgb_amount_pred = lgb_amount.predict(amount_valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_amount_pred = pd.Series(lgb_amount_pred).apply(lambda x: 0 if x < 0 else x)","7220fac6":"lgb_survival = lgb.train(lgb_params,\n                        lgb_train_survival,\n                        feval =survival64,\n                        valid_sets = [lgb_train_survival],\n                        verbose_eval = 100)\n\nlgb_survival_pred = lgb_survival.predict(survival_valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_survival_pred = pd.Series(lgb_survival_pred).apply(lambda x: 64 if x > 64 else x)\nlgb_survival_pred = lgb_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","f81d08ce":"lgb_pred_df = pd.DataFrame({'acc_id':survival_valid_set.acc_id.values,\n                           'survival_time':lgb_survival_pred,\n                           'amount_spent':lgb_amount_pred})\nprint('lgb_pred_df shape: ',lgb_pred_df.shape)","57a29311":"rf_params = {\n    'n_estimators':1000,\n    'max_depth':5,\n}","c392a937":"rf_amount = RandomForestRegressor(**rf_params)\nrf_amount.fit(amount_train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n              amount_train_set.amount_spent)\nrf_amount_pred = rf_amount.predict(amount_valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_amount_pred = pd.Series(rf_amount_pred).apply(lambda x: 0 if x < 0 else x)","4c7aacb3":"rf_survival = RandomForestRegressor(**rf_params)\nrf_survival.fit(survival_train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                survival_train_set.survival_time)\nrf_survival_pred = rf_survival.predict(survival_valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_survival_pred = pd.Series(rf_survival_pred).apply(lambda x: 64 if x > 64 else x)\nrf_survival_pred = rf_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","3297462c":"rf_pred_df = pd.DataFrame({'acc_id':survival_valid_set.acc_id.values,\n                           'survival_time':rf_survival_pred,\n                           'amount_spent':rf_amount_pred})\nprint('rf_pred_df shape: ',rf_pred_df.shape)","07ae1a99":"rf_pred_df.describe()","0d986c86":"amount_dtrain = xgb.DMatrix(amount_train_set.drop(['acc_id','amount_spent','survival_time'], axis = 1),label = amount_train_set.amount_spent)\nsurvival_dtrain = xgb.DMatrix(survival_train_set.drop(['acc_id','amount_spent','survival_time'], axis = 1),label = survival_train_set.survival_time)\n\namount_dval = xgb.DMatrix(amount_valid_set.drop(['acc_id','amount_spent','survival_time'],axis = 1))\nsurvival_dval = xgb.DMatrix(survival_valid_set.drop(['acc_id','amount_spent','survival_time'],axis = 1))","e9668116":"xgb_params_amount={'eta':0.01,\n            'max_depth':3,\n            'objective':'reg:squarederror',\n            'eval_metric':'mae',\n            'min_child_samples':1}\n\nnum_round = 10000","ded562c6":"bst = xgb.cv(xgb_params, amount_dtrain, num_round,early_stopping_rounds = 100, nfold = 5, verbose_eval = 100)\nbst_round_amount = bst.index.size\n\nprint('Amount Spent Best Rounds:',bst_round_amount)","30fa22ef":"xgb_params_survival={'eta':0.01,\n            'max_depth':5,\n            'objective':'reg:squarederror',\n            'eval_metric':'mae',\n            'min_child_samples':1}","bab6546e":"bst = xgb.cv(xgb_params_survival, survival_dtrain, num_round, early_stopping_rounds = 100, nfold = 2,verbose_eval = 100)\nbst_round_survival = bst.index.size\n\nprint('Survival Time Best Rounds:',bst_round_survival)","8ab20bc5":"model_survival = xgb.train(xgb_params_survival,survival_dtrain,num_boost_round = bst_round_amount)\ny_pred_survival = model_survival.predict(survival_dval)","0b571d0f":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model_survival, ax = ax)\nplt.show()","0c4f5131":"model_amount = xgb.train(xgb_params_amount,amount_dtrain,num_boost_round = bst_round_amount)\ny_pred_amount = model_amount.predict(amount_dval)","1df43324":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model_amount, ax =ax)","3ad85395":"xgb_pred = pd.DataFrame({'acc_id':survival_valid_set['acc_id'],\n                        'survival_time':y_pred_survival,\n                        'amount_spent': y_pred_amount})\nxgb_pred.head()","fe2cdc83":"xgb_pred['survival_time'] = xgb_pred['survival_time'].apply(lambda x : 64 if x > 64 else (1 if x < 1 else x))\nxgb_pred['amount_spent'] = xgb_pred['amount_spent'].apply(lambda x : 0 if x < 0 else x)","7a2bf158":"scaler = MinMaxScaler(feature_range = [0, 39.412632])\n\nscale_rf_pred_df = rf_pred_df.copy()\nscale_lgb_pred_df = lgb_pred_df.copy()\nscale_xgb_pred_df = xgb_pred.copy()\n\nscale_rf_pred_df['amount_spent'] = scaler.fit_transform(scale_rf_pred_df['amount_spent'].values.reshape(-1,1))\nscale_lgb_pred_df['amount_spent'] = scaler.fit_transform(scale_lgb_pred_df['amount_spent'].values.reshape(-1,1))\nscale_xgb_pred_df['amount_spent'] = scaler.fit_transform(scale_xgb_pred_df['amount_spent'].values.reshape(-1,1))","8ebe1303":"def score_function(predict, actual):\n    \n    # predict = pd.read_csv(predict_label, engine='python') # \uc608\uce21 \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n    # actual = pd.read_csv(actual_label,engine='python') # \uc2e4\uc81c \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n\n\n    predict.acc_id = predict.acc_id.astype('int')\n    predict = predict.sort_values(by =['acc_id'], axis = 0) # \uc608\uce21 \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c \n    predict = predict.reset_index(drop = True)\n    actual.acc_id = actual.acc_id.astype('int')\n    actual = actual.sort_values(by =['acc_id'], axis = 0) # \uc2e4\uc81c \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c\n    actual =actual.reset_index(drop=True)\n    \n    if predict.acc_id.equals(actual.acc_id) == False:\n        print('acc_id of predicted and actual label does not match')\n        sys.exit() # \uc608\uce21 \ub2f5\uc548\uc758 acc_id\uc640 \uc2e4\uc81c \ub2f5\uc548\uc758 acc_id\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc5d0\ub7ec\ucc98\ub9ac \n    else:\n            \n        S, alpha, L, sigma = 30, 0.01, 0.1, 15  \n        cost, gamma, add_rev = 0,0,0 \n        profit_result = []\n        survival_time_pred = list(predict.survival_time)\n        amount_spent_pred = list(predict.amount_spent)\n        survival_time_actual = list(actual.survival_time)\n        amount_spent_actual = list(actual.amount_spent)    \n        for i in range(len(survival_time_pred)):\n            if survival_time_pred[i] == 64 :                 \n                cost = 0\n                optimal_cost = 0\n            else:\n                cost = alpha * S * amount_spent_pred[i]                    #\ube44\uc6a9 \uacc4\uc0b0\n                optimal_cost = alpha * S * amount_spent_actual[i]          #\uc801\uc815\ube44\uc6a9 \uacc4\uc0b0 \n            \n            if optimal_cost == 0:\n                gamma = 0\n            elif cost \/ optimal_cost < L:\n                gamma = 0\n            elif cost \/ optimal_cost >= 1:\n                gamma = 1\n            else:\n                gamma = (cost)\/((1-L)*optimal_cost) - L\/(1-L)              #\ubc18\uc751\ub960 \uacc4\uc0b0\n            \n            if survival_time_pred[i] == 64 or survival_time_actual[i] == 64:\n                T_k = 0\n            else:\n                T_k = S * np.exp(-((survival_time_pred[i] - survival_time_actual[i])**2)\/(2*(sigma)**2))    #\ucd94\uac00 \uc0dd\uc874\uae30\uac04 \uacc4\uc0b0\n                \n            add_rev = T_k * amount_spent_actual[i]                         #\uc794\uc874\uac00\uce58 \uacc4\uc0b0\n    \n           \n            profit = gamma * add_rev - cost                                #\uc720\uc800\ubcc4 \uae30\ub300\uc774\uc775 \uacc4\uc0b0\n            profit_result.append(profit)\n            \n        score = sum(profit_result)                                         #\uae30\ub300\uc774\uc775 \ucd1d\ud569 \uacc4\uc0b0\n    return score","b71ce633":"lgb_valid_score = score_function(lgb_pred_df, survival_valid_set[['acc_id','survival_time','amount_spent']])\nrf_valid_score = score_function(rf_pred_df, survival_valid_set[['acc_id','survival_time','amount_spent']])\nxgb_valid_score = score_function(xgb_pred,survival_valid_set[['acc_id','survival_time','amount_spent']])\n\nscale_lgb_valid_score = score_function(scale_lgb_pred_df, survival_valid_set[['acc_id','survival_time','amount_spent']])\nscale_rf_valid_score = score_function(scale_rf_pred_df, survival_valid_set[['acc_id','survival_time','amount_spent']])\nscale_xgb_valid_score = score_function(scale_xgb_pred_df, survival_valid_set[['acc_id','survival_time','amount_spent']])\ntrue_score = score_function(amount_valid_set[['acc_id','survival_time','amount_spent']],\n                            survival_valid_set[['acc_id','survival_time','amount_spent']])\n\nprint(\"Random Froest score: \", rf_valid_score)\nprint('Light GBM score: ',lgb_valid_score)\nprint('XGB score:', xgb_valid_score)\nprint(\"Scale Random Forest score\",scale_rf_valid_score)\nprint(\"Scale XGB scroe\",scale_xgb_valid_score)\nprint(\"Scale Light GBM score\",scale_lgb_valid_score)","6685e6f1":"test1.rename(columns = {'get_ect':'get_etc'},inplace= True)\ntest2.rename(columns = {'get_ect':'get_etc'},inplace= True)","e97ec48b":"amount_train_churn = train_churn[amount_spent_col]\nsurvival_train_churn = train_churn[survival_col]\n\namount_test1 = test1[amount_spent_col_non_target]\nsurvival_test1 = test1[survival_col_non_target]","154b116c":"rf_params = {\n    'n_estimators':1000,\n    'max_depth':5,\n}","f40307fd":"rf_amount = RandomForestRegressor(**rf_params)\nrf_amount.fit(amount_train_churn.drop(['acc_id','amount_spent','survival_time'], axis=1),\n              amount_train_churn.amount_spent)\nrf_amount_pred = rf_amount.predict(amount_test1)\nrf_amount_pred = pd.Series(rf_amount_pred).apply(lambda x: 0 if x < 0 else x)","5a5f7f79":"rf_survival = RandomForestRegressor(**rf_params)\nrf_survival.fit(amount_train_churn.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                amount_train_churn.survival_time)\nrf_survival_pred = rf_survival.predict(amount_test1)\nrf_survival_pred = pd.Series(rf_survival_pred).apply(lambda x: 64 if x > 64 else x)\nrf_survival_pred = rf_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","66b14a76":"rf_pred_df = pd.DataFrame({'acc_id':test1.acc_id.values,\n                           'survival_time':rf_survival_pred,\n                           'amount_spent':rf_amount_pred})\nprint('rf_pred_df shape: ',rf_pred_df.shape)","8e6225a4":"scaler = MinMaxScaler(feature_range = [0, 39.412632])\n\nrf_pred_df['amount_spent'] = scaler.fit_transform(rf_pred_df['amount_spent'].values.reshape(-1,1))","981e20cf":"rf_pred_df.to_csv('test1_predict.csv', index = False) ","f50323af":"amount_test2 = test2[amount_spent_col_non_target]\nsurvival_test2 = test2[survival_col_non_target]","47c86ef2":"rf_amount = RandomForestRegressor(**rf_params)\nrf_amount.fit(amount_train_churn.drop(['acc_id','amount_spent','survival_time'], axis=1),\n              amount_train_churn.amount_spent)\nrf_amount_pred = rf_amount.predict(amount_test2)\nrf_amount_pred = pd.Series(rf_amount_pred).apply(lambda x: 0 if x < 0 else x)","18f9078e":"rf_survival = RandomForestRegressor(**rf_params)\nrf_survival.fit(amount_train_churn.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                amount_train_churn.survival_time)\nrf_survival_pred = rf_survival.predict(amount_test2)\nrf_survival_pred = pd.Series(rf_survival_pred).apply(lambda x: 64 if x > 64 else x)\nrf_survival_pred = rf_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","4ca23a3e":"rf_pred_df = pd.DataFrame({'acc_id':test2.acc_id.values,\n                           'survival_time':rf_survival_pred,\n                           'amount_spent':rf_amount_pred})\nprint('rf_pred_df shape: ',rf_pred_df.shape)","646f2f8e":"scaler = MinMaxScaler(feature_range = [0, 39.412632])\n\nrf_pred_df['amount_spent'] = scaler.fit_transform(rf_pred_df['amount_spent'].values.reshape(-1,1))","720d8065":"rf_pred_df.to_csv('test2_predict.csv', index = False)","8c641e5e":"#### Test2","746db1dd":"# Import Module","25d85a6c":"## RandomForest","bfff3807":"## Modeling\n### RandomForest\n#### Test1","a3e7a61f":"### LightGBM","ae796a29":"## Validation","3605b3d5":"## XGBoost","c0d8bc03":"# Load Dataset","93b04a2f":"## Target. Amount_spent : Feature Selection","ba117192":"## Target. Survival_time: Feature Selection"}}