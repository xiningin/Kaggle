{"cell_type":{"2e115849":"code","2b5acc0c":"code","f43869c3":"code","a90fdc95":"code","f2f2d28f":"code","e981ec00":"code","ebd77fa4":"code","b621ea1f":"code","467fc2eb":"code","2d8a892c":"code","7be4567d":"code","b35c734f":"code","705e68c9":"code","a43f004e":"code","5a0123af":"code","fce6a575":"code","a72e1191":"code","55e2ac08":"code","43035104":"code","39ce5b76":"code","73a2c806":"code","3c609d9a":"code","eef64332":"code","0d5da54b":"code","d5ef0839":"code","64060c73":"code","3dd57050":"code","0998c7c1":"code","08391cf9":"code","3072e2f7":"code","55ebe491":"code","ae3030fa":"code","9df37369":"code","69843a01":"code","f6ccca7b":"code","47c570ee":"code","4510a968":"code","7b69375c":"code","baedc8e6":"code","896b4ddf":"code","b527b387":"code","c770183a":"code","19745882":"code","6bb8003d":"code","f08464b2":"code","4344a2d6":"code","ca9bf7be":"code","47e9b62a":"code","daff4bfb":"code","03407570":"code","e83a0b71":"code","4f6f643a":"markdown"},"source":{"2e115849":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b5acc0c":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","f43869c3":"train.head()","a90fdc95":"train.isna().sum()","f2f2d28f":"dfs = [train , test]\n\nfor df in dfs:\n    df['Age'].fillna(df['Age'].median(), inplace=True)","e981ec00":"train.isna().sum()","ebd77fa4":"train['Cabin'].value_counts()","b621ea1f":"for df in dfs:\n    df['Cabin'].fillna(0, inplace = True)","467fc2eb":"cabins = []\nfor i in train['Cabin']:\n    cabins.append(str(i))","2d8a892c":"letters = []\nfor i in cabins:\n    letter = i[0]\n    letters.append(letter)","7be4567d":"train['Cabin'] = letters","b35c734f":"cabins = []\nfor i in test['Cabin']:\n    cabins.append(str(i))","705e68c9":"letters = []\nfor i in cabins:\n    letter = i[0]\n    letters.append(letter)","a43f004e":"test['Cabin'] = letters","5a0123af":"train['Cabin'].head()","fce6a575":"train['Embarked'].value_counts()","a72e1191":"for df in dfs:\n    df['Embarked'].fillna('S')","55e2ac08":"train.isna().sum()","43035104":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr_matrix = train.corr()\nfig, ax = plt.subplots(figsize = (10,8))\nsns.heatmap(corr_matrix, annot=True)","39ce5b76":"train.dtypes","73a2c806":"numeric_cols = ['Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\nfig, ax = plt.subplots(figsize = (10,5))\nsns.boxplot(data = train[numeric_cols], orient = 'h', palette = 'Set2')","3c609d9a":"from pandas.plotting import scatter_matrix\nscatter_matrix(train[numeric_cols], figsize= (12,8))","eef64332":"train.hist(bins = 20, figsize = (12,8))","0d5da54b":"sns.countplot(train[train['Survived'] == 1]['Pclass']).set_title('Count Survived for each Class')","d5ef0839":"len(train[train['Pclass'] == 1]), len(train[train['Pclass']==2]), len(train[train['Pclass']==3])","64060c73":"train[train['Pclass'] == 1]['Survived'].sum(), train[train['Pclass']==2]['Survived'].sum(), train[train['Pclass']==3]['Survived'].sum()","3dd57050":"percentages = []\nfirst = 136 \/ 216\nsecond = 87 \/ 184\nthird = 119\/491\npercentages.append(first)\npercentages.append(second)\npercentages.append(third)","0998c7c1":"percents = pd.DataFrame(percentages)\npercents.index+=1","08391cf9":"percents['PClass'] = ['1', '2','3']\ncols= ['Percent', 'PClass']\npercents.columns = [i for i in cols]\nsns.barplot(y = 'Percent', x = 'PClass', data = percents).set_title('Percent Survived for Passenger Class')","3072e2f7":"train['Family'] = train.apply(lambda x: x['SibSp'] + x['Parch'], axis = 1)\ntest['Family'] = test.apply(lambda x: x['SibSp'] + x['Parch'], axis=1)","55ebe491":"train.drop(['SibSp', 'Parch', 'Name', 'Ticket'], axis = 1, inplace = True)\ntest.drop(['SibSp', 'Parch', 'Name', 'Ticket'], axis = 1, inplace = True)","ae3030fa":"train.head(5)","9df37369":"test.isna().sum()","69843a01":"test['Fare'].fillna(test['Fare'].median(), inplace=True)","f6ccca7b":"train_df = pd.get_dummies(train)\ntest_df = pd.get_dummies(test)","47c570ee":"train_df.drop('PassengerId', axis=1, inplace=True)","4510a968":"y = train_df['Survived']\ntrain_df.drop('Survived', axis = 1, inplace = True)\ntrain_df.drop('Cabin_T', axis = 1, inplace = True)\ntest_df.drop('PassengerId', axis = 1, inplace = True)","7b69375c":"X_test = test_df\nX_train =train_df","baedc8e6":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","896b4ddf":"rfc = RandomForestClassifier()","b527b387":"param_grid = {\n    'n_estimators': [200, 500, 1000],\n    'max_features': ['auto'],\n    'max_depth': [6, 7 ,8],\n    'criterion': ['entropy']\n}","c770183a":"CV = GridSearchCV(estimator = rfc, param_grid = param_grid, cv = 5)\nCV.fit(X_train, y)\nCV.best_estimator_","19745882":"rfc = RandomForestClassifier(criterion = 'entropy', max_depth = 8, n_estimators = 500, random_state = 42)","6bb8003d":"rfc.fit(X_train, y)","f08464b2":"y_pred = rfc.predict(X_test)\n","4344a2d6":"y_pred","ca9bf7be":"submission = y_pred.reshape(-1, 1)","47e9b62a":"sub_df = pd.DataFrame(submission)","daff4bfb":"sub_df['PassengerId'] = test['PassengerId']\nsub_df['Survived'] = submission\ncols = ['PassengerId',\n       'Survived']\nsub_df.drop(0, axis = 1, inplace = True)\nsub_df.columns = [i for i in cols]\nsub_df = sub_df.set_index('PassengerId')","03407570":"sub_df.head(10)","e83a0b71":"sub_df.to_csv(r'submission.csv')","4f6f643a":"One Hot Encoding"}}