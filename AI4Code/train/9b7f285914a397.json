{"cell_type":{"ec644002":"code","35dce5a5":"code","3cfeb49a":"code","a005046c":"code","7d599b15":"code","e54987e7":"code","590dc5a4":"code","a80fa0ff":"code","7f71183f":"code","2dec842b":"code","0741cbfc":"code","aecad944":"code","b7383a2f":"code","abdd8d6a":"code","fd89cab6":"code","8188606b":"code","acf74e94":"code","d1595295":"code","57abb8ee":"code","ddb41529":"code","0f1d87ae":"code","ae3a1126":"code","6d63d1d0":"code","84953097":"code","a45a5341":"code","dd13ad7b":"code","431e3117":"code","ba812c6d":"code","0b18478a":"code","8d2ca108":"code","549d2d1f":"code","f744c031":"code","c7d755bc":"markdown","8590534f":"markdown","796e31e3":"markdown","72305565":"markdown","c77503b5":"markdown","4589d1e0":"markdown","3355ca66":"markdown","d70d6328":"markdown","e9e3b165":"markdown","e306d1df":"markdown"},"source":{"ec644002":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35dce5a5":"plant_1_weather_sensor_data = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\nplant_1_generation_data = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\nplant_2_weather_sensor_data = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')\nplant_2_generation_data = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')\nprint('success')","3cfeb49a":"plant_1_weather_sensor_data.describe()","a005046c":"plant_1_generation_data.describe()","7d599b15":"plant_2_weather_sensor_data.describe()","e54987e7":"plant_2_generation_data.describe()","590dc5a4":"plant_1_weather_sensor_data.head()","a80fa0ff":"plant_1_generation_data.head()","7f71183f":"plant_2_weather_sensor_data.head()","2dec842b":"plant_2_generation_data.head()","0741cbfc":"plant_1_weather_sensor_data.isnull().sum()","aecad944":"plant_1_generation_data.isnull().sum()","b7383a2f":"plant_1_weather_sensor_data.isnull().sum()","abdd8d6a":"plant_2_generation_data.isnull().sum()","fd89cab6":"plant_1_irradiation = plant_1_weather_sensor_data['IRRADIATION']\nsum(plant_1_irradiation)","8188606b":"plant_2_irradiation = plant_2_weather_sensor_data['IRRADIATION']\nsum(plant_2_irradiation)","acf74e94":"plant_1_ambient_temperature = plant_1_weather_sensor_data['AMBIENT_TEMPERATURE']\nmax(plant_1_ambient_temperature)","d1595295":"plant_2_ambient_temperature = plant_2_weather_sensor_data['AMBIENT_TEMPERATURE']\nmax(plant_2_ambient_temperature)","57abb8ee":"plant_1_weather_sensor_data.size","ddb41529":"plant_2_weather_sensor_data.size","0f1d87ae":"plant_2_generation_data.iloc[[max(plant_2_generation_data['DC_POWER'])]]","ae3a1126":"plant_1_generation_data.iloc[[max(plant_1_generation_data['DC_POWER'])]]","6d63d1d0":"plant_2_generation_data.sort_values(\"DC_POWER\", axis = 0, ascending = False, \n                 inplace = True, na_position ='last') \nplant_2_generation_data","84953097":"plant_1_generation_data.sort_values(\"DC_POWER\", axis = 0, ascending = False, \n                 inplace = True, na_position ='last') \nplant_1_generation_data","a45a5341":"df_date = plant_1_generation_data['DATE_TIME'].str.split()\nx = []\nfor d in df_date:\n    va = d[0]\n    x.append(va)\nplant_1_generation_data['DATE'] = pd.DataFrame(x)\nplant_1_generation_data.drop(['DATE_TIME'],axis=1,inplace=True)","dd13ad7b":"plant_1_generation = plant_1_generation_data.groupby(\"DATE\")['SOURCE_KEY'].count().reset_index()\ndf = plant_1_generation.sort_values('DATE',ascending=False)\nplt.figure(figsize=(15,5))\nchart = sns.barplot(\n    data = plant_1_generation,\n    x = 'DATE',\n    y = 'SOURCE_KEY',\n    palette = 'Set1'\n)\nchart = chart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light',\n)\nplt.show()","431e3117":"plant_1_generation = plant_1_generation_data.groupby(\"DATE\")['DC_POWER'].count().reset_index()\ndf = plant_1_generation.sort_values('DATE',ascending=False)\nplt.figure(figsize=(15,5))\nchart = sns.barplot(\n    data = plant_1_generation,\n    x = 'DATE',\n    y = 'DC_POWER',\n    palette = 'Set1'\n)\nchart = chart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light',\n)\nplt.show()","ba812c6d":"plant_1_generation = plant_1_generation_data.groupby(\"DATE\")['AC_POWER'].count().reset_index()\ndf = plant_1_generation.sort_values('DATE',ascending=False)\nplt.figure(figsize=(15,5))\nchart = sns.barplot(\n    data = plant_1_generation,\n    x = 'DATE',\n    y = 'AC_POWER',\n    palette = 'Set1'\n)\nchart = chart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light',\n)\nplt.show()","0b18478a":"df_date = plant_2_generation_data['DATE_TIME'].str.split()\nx = []\nfor d in df_date:\n    va = d[0]\n    x.append(va)\nplant_2_generation_data['DATE'] = pd.DataFrame(x)\nplant_2_generation_data.drop(['DATE_TIME'],axis=1,inplace=True)","8d2ca108":"plant_2_generation = plant_2_generation_data.groupby(\"DATE\")['SOURCE_KEY'].count().reset_index()\ndf = plant_2_generation.sort_values('DATE',ascending=False)\nplt.figure(figsize=(15,5))\nchart = sns.barplot(\n    data = plant_2_generation,\n    x = 'DATE',\n    y = 'SOURCE_KEY',\n    palette = 'Set2'\n)\nchart = chart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light',\n)\nplt.show()","549d2d1f":"plant_2_generation = plant_2_generation_data.groupby(\"DATE\")['DC_POWER'].count().reset_index()\ndf = plant_2_generation.sort_values('DATE',ascending=False)\nplt.figure(figsize=(15,5))\nchart = sns.barplot(\n    data = plant_1_generation,\n    x = 'DATE',\n    y = 'AC_POWER',\n    palette = 'Set2'\n)\nchart = chart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light',\n)\nplt.show()","f744c031":"plant_2_generation = plant_2_generation_data.groupby(\"DATE\")['AC_POWER'].count().reset_index()\ndf = plant_2_generation.sort_values('DATE',ascending=False)\nplt.figure(figsize=(15,5))\nchart = sns.barplot(\n    data = plant_1_generation,\n    x = 'DATE',\n    y = 'AC_POWER',\n    palette = 'Set2'\n)\nchart = chart.set_xticklabels(\n    chart.get_xticklabels(), \n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light',\n)\nplt.show()","c7d755bc":"# Plant 1 Generation Data w.r.t Date and DC POWER","8590534f":"# Maximum Ambient Temperature","796e31e3":"# Check if any missing values","72305565":"# Describe the data","c77503b5":"# Plant 2 Generation Data w.r.t Date and Total Inverters","4589d1e0":"# Plant 1 Generation Data w.r.t Date and AC POWER","3355ca66":"# Plant 2 Generation Data w.r.t Date and AC POWER","d70d6328":"# Plant 1 Generation Data w.r.t Date and Total Inverters","e9e3b165":"# Total number of Inverters","e306d1df":"# Plant 2 Generation Data w.r.t Date and DC POWER"}}