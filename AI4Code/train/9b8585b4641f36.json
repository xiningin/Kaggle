{"cell_type":{"e79e62b6":"code","969eace2":"code","26011eec":"code","74d92791":"code","a61f959e":"code","f81f5512":"code","3bbb2710":"code","94a061d3":"code","e9106cf2":"code","d4a00cd5":"code","423d9b6f":"code","6b203b91":"code","99695b61":"code","22ce863f":"code","4885c61c":"code","7e60d69c":"code","04f58e11":"code","f6a42d3f":"code","81e8f494":"code","04e47ef1":"code","202d1735":"code","2bf12530":"code","0441e445":"code","7ba56fce":"code","7970f78a":"code","64141bef":"code","78290867":"code","a2ad63ed":"code","2112297b":"code","245cee0c":"code","46d342cd":"code","f6a72c8c":"code","b06308d2":"code","7b854c63":"code","4afff890":"code","08f08852":"code","26e3aa23":"code","3b3847ef":"code","0061ee48":"code","70819d1b":"code","cb54bba4":"code","3d3511b8":"code","62c0b19a":"code","6c9deff2":"code","13d79fdc":"code","ab2d070f":"code","a20f11da":"code","ec97af53":"code","b31a59cd":"markdown","4a35e8f1":"markdown","7ff05f81":"markdown","551c4392":"markdown","32476da6":"markdown","b21ae819":"markdown","23770d1c":"markdown","22b6b7d5":"markdown","cfcc83a5":"markdown","7865244e":"markdown","35ae7e0d":"markdown"},"source":{"e79e62b6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","969eace2":"attrition = pd.read_csv(\"..\/input\/employee\/train.csv\")","26011eec":"attrition.head() #Top 5 Records","74d92791":"attrition.isnull().any()","a61f959e":"attrition.dtypes","f81f5512":"categorical = attrition.select_dtypes(include = 'object')\nprint(categorical.columns)","3bbb2710":"numerical = attrition.select_dtypes(include=['float64','int64'])","94a061d3":"print((numerical.columns))","e9106cf2":"sns.kdeplot(attrition['Age'])","d4a00cd5":"sns.distplot(attrition['Age'])","423d9b6f":"fig, ax = plt.subplots(5,2, figsize=(9,9))\nsns.distplot(attrition['TotalWorkingYears'], ax = ax[0,0])\nsns.distplot(attrition['MonthlyIncome'], ax = ax[0,1])\nsns.distplot(attrition['YearsAtCompany'], ax = ax[1,0])\nsns.distplot(attrition['DistanceFromHome'], ax = ax[1,1])\nsns.distplot(attrition['YearsWithCurrManager'], ax = ax[2,0])\nsns.distplot(attrition['YearsSinceLastPromotion'], ax = ax[2,1])\nsns.distplot(attrition['PercentSalaryHike'], ax = ax[3,0])\nsns.distplot(attrition['YearsAtCompany'], ax = ax[3,1])\nsns.distplot(attrition['YearsSinceLastPromotion'], ax = ax[4,0])\nsns.distplot(attrition['TrainingTimesLastYear'], ax = ax[4,1])\nplt.tight_layout()\nplt.show()","6b203b91":"sns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'BusinessTravel')","99695b61":"sns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'Department')","22ce863f":"sns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'EducationField')","4885c61c":"bins = [0, 18, 35, 60, np.inf]\nlabels = ['Student', 'Freshers\/junior', 'Senior', 'Retired']\nattrition['AgeGroup'] = pd.cut(attrition[\"Age\"], bins, labels = labels)\nsns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'AgeGroup')","7e60d69c":"sns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'Gender')","04f58e11":"sns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'JobRole')","f6a42d3f":"sns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'Over18')","81e8f494":"sns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'OverTime')","04e47ef1":"sns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'MaritalStatus')","202d1735":"sns.factorplot(data = attrition, kind = 'count', aspect = 3, size = 5, x = 'Attrition')","2bf12530":"cor_mat = attrition.corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)]=False\nfig = plt.gcf()\nfig.set_size_inches(60,12)\nsns.heatmap(data = cor_mat, mask = mask, square = True, annot = True, cbar = True)","0441e445":"attrition.columns","7ba56fce":"continious = ['Age',  'DailyRate', 'HourlyRate', 'MonthlyIncome', 'MonthlyRate', 'TotalWorkingYears', 'YearsAtCompany' ]","7970f78a":"for var in continious:\n    #boxplot\n    plt.figure(figsize = (10,5))\n    plt.subplot(1,2,1)\n    fig = attrition.boxplot(column = var)\n    fig.set_ylabel(var)\n    \n    #histogram\n    plt.subplot(1,2,2)\n    fig = attrition[var].hist(bins = 20)\n    fig.set_ylabel('No. of Employees')\n    fig.set_xlabel(var)\n    \n    plt.show()\n    ","64141bef":"attrition['TotalWorkingYears'].describe()","78290867":"categorical.head()","a2ad63ed":"attrition_cat = pd.get_dummies(categorical)","2112297b":"attrition_cat.head()","245cee0c":"numerical.head()","46d342cd":"attrition_final = pd.concat([numerical,attrition_cat], axis=1)","f6a72c8c":"attrition_final.head()","b06308d2":"attrition_final = attrition_final.drop('Attrition', axis = 1)","7b854c63":"attrition_final","4afff890":"target = attrition['Attrition']","08f08852":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, classification_report","26e3aa23":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(attrition_final ,target, test_size = 0.2, random_state = 0)","3b3847ef":"x_train.shape","0061ee48":"x_test.shape","70819d1b":"model = RandomForestClassifier()\nmodel.fit(x_train,y_train)\nmodel_predictions = model.predict(x_test)\nprint(\"Accuracy: \", accuracy_score(y_test, model_predictions))\nprint(classification_report(y_test, model_predictions))","cb54bba4":"model = LogisticRegression()\nmodel.fit(x_train,y_train)\nmodel_predictions = model.predict(x_test)\nprint(\"Accuracy: \", accuracy_score(y_test, model_predictions))\nprint(classification_report(y_test, model_predictions))","3d3511b8":"model = DecisionTreeClassifier()\nmodel.fit(x_train,y_train)\nmodel_predictions = model.predict(x_test)\nprint(\"Accuracy: \", accuracy_score(y_test, model_predictions))\nprint(classification_report(y_test, model_predictions))","62c0b19a":"model = KNeighborsClassifier()\nmodel.fit(x_train,y_train)\nmodel_predictions = model.predict(x_test)\nprint(\"Accuracy: \", accuracy_score(y_test, model_predictions))\nprint(classification_report(y_test, model_predictions))","6c9deff2":"model = SVC()\nmodel.fit(x_train,y_train)\nmodel_predictions = model.predict(x_test)\nprint(\"Accuracy: \", accuracy_score(y_test, model_predictions))\nprint(classification_report(y_test, model_predictions))","13d79fdc":"from imblearn.over_sampling import SMOTE","ab2d070f":"oversampler = SMOTE(random_state = 12, sampling_strategy = 1.0)\nsmote_train, smote_target = oversampler.fit_sample(x_train,y_train)","a20f11da":"smote_train.shape","ec97af53":"model = RandomForestClassifier()\nmodel.fit(smote_train,smote_target)\nmodel_predictions = model.predict(x_test)\nprint(\"Accuracy: \", accuracy_score(y_test, model_predictions))\nprint(classification_report(y_test, model_predictions))","b31a59cd":"Build Basline Models","4a35e8f1":"**Data quality checks**\n\nTo look for any null values, we can just invoke the **isnull** call as follows","7ff05f81":"In collaboration with [Rohit Sahoo](https:\/\/www.kaggle.com\/rohitsahoo)","551c4392":"### Correlation of Features\n\nThe next tool in a data explorer's arsenal is that of a correlation matrix. By plotting a correlation matrix, we have a very nice overview of how the features are related to one another. For a Pandas dataframe, we can conveniently use the call **.corr** which by default provides the Pearson Correlation values of the columns pairwise in that dataframe.\n\nIn this correlation plot, I will use the the Plotly library to produce a interactive Pearson correlation matrix via the Heatmap function as follows:","32476da6":"### Distribution of the dataset\n\nGenerally one of the first few steps in exploring the data would be to have a rough idea of how the features are distributed with one another. To do so, I shall invoke the familiar **kdeplot** function from the Seaborn plotting library and this generates bivariate plots as follows:","b21ae819":"# Introduction\nAttrition is a problem that impacts all businesses, irrespective of geography, industry and size of the company. Employee attrition leads to significant costs for a business, including the cost of business disruption, hiring new staff and training new staff. As such, there is great business interest in understanding the drivers of, and minimizing staff attrition. Let us therefore turn to our predictive modelling capabilities and see if we can predict employee attrition on this IBM dataset.\n\nThis notebook is structured as follows:\n\n1. **Exploratory Data Analysis:** In this section, we explore the dataset by taking a look at the feature distributions, how correlated one feature is to the other and create some Seaborn and Plotly visualisations\n2. **Feature Engineering and Categorical Encoding:** Conduct some feature engineering as well as encode all our categorical features into dummy variables\n3. **Implementing Machine Learning models:** We implement a Random Forest and a Gradient Boosted Model after which we look at feature importances from these respective models\n\nLet's Go.","23770d1c":"# 1. Exploratory Data Analysis","22b6b7d5":"![](https:\/\/www.clearpeaks.com\/wp-content\/uploads\/2019\/05\/Advanced-analytics-Employee-Attrition-1200-630.jpg)","cfcc83a5":"**If you like my notebook, please upvote it!**","7865244e":"# IBM Employee Attrition Analysis and Prediction","35ae7e0d":"**For Futhur Analysis we can seperate the numerical and categorical columns**"}}