{"cell_type":{"5843b718":"code","ee7239c8":"code","7c9d686a":"code","a7180b7b":"code","476ce82a":"code","687ca10f":"code","e0fa64ef":"code","0e0d7a66":"code","1a81c2cd":"code","ff526887":"code","74fe4c00":"code","580e4514":"code","e74112ad":"code","02a7a6b1":"code","e6c523ba":"code","47c37e3e":"code","a259ce5c":"code","63a24444":"code","d2d8c2fa":"code","aad95945":"code","6f681bab":"code","307bd7cb":"code","01199076":"code","9069dbcd":"code","9bdeb91a":"code","895a1d37":"code","b96f518a":"code","47a06e36":"code","f1b5a4c2":"code","0019159d":"code","578fd0cb":"code","59693ab8":"code","7c9f5c95":"code","e46c27fc":"code","6e49a21a":"code","caa8e0ab":"code","a9368edc":"code","81c3140a":"code","b8b083ca":"code","38c88cf1":"code","7e13bb9b":"code","6552f308":"code","b9d21413":"code","a60eee29":"code","7f1f92f7":"code","dd90e712":"code","c37559b9":"code","ea115924":"code","4a13d77d":"code","9d8c4120":"code","b9c1ef13":"markdown","3c7f78ec":"markdown","ba653309":"markdown","3a7d6f66":"markdown","e6979188":"markdown","540cea9c":"markdown","526444d3":"markdown","c4e5bd81":"markdown","72097884":"markdown","95369cbd":"markdown","15f89174":"markdown","d962f487":"markdown","a97b0d0d":"markdown","ddedb2e9":"markdown","b8099188":"markdown","6a98acf9":"markdown","89bf6d92":"markdown","1772257d":"markdown","852be14a":"markdown","8dfac462":"markdown","85629d7e":"markdown","85c9455f":"markdown","836726cb":"markdown","1e0736dd":"markdown","fd3acd70":"markdown","bfae721c":"markdown","c74b04f7":"markdown","5e8daf5f":"markdown"},"source":{"5843b718":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px","ee7239c8":"fifa21 = pd.read_csv('..\/input\/fifa-21-complete-player-dataset\/fifa21_male2.csv')","7c9d686a":"missing = pd.DataFrame()\nmissing['column'] = fifa21.columns\n\nmissing['percent'] = [\n    round(100* fifa21[col].isnull().sum() \/ len(fifa21), 2) for col in fifa21.columns\n]\nmissing = missing[missing['percent']>0].sort_values('percent')\n\nfig = px.bar(\n    missing, \n    x='percent',\n    y=\"column\", \n    orientation='h', \n    title='Percent of Missing Values in each Column', \n    height=1300, \n    width=800\n)\nfig.show()\n","a7180b7b":"fifa21.drop(['Loan Date End','Joined','Hits','Gender'],axis=1,inplace=True)","476ce82a":"fifa21.head()","687ca10f":"print(fifa21.Value.dtype)\nprint(fifa21.Wage.dtype)\nprint(fifa21['Release Clause'].dtype)\nprint(fifa21.Height.dtype)\nprint(fifa21.Weight.dtype)","e0fa64ef":"fifa21.Value.head(),fifa21.Wage.head(),fifa21['Release Clause'].head()","0e0d7a66":"fifa21['Weight'].head(),fifa21['Height'].head()","1a81c2cd":"#formating the Value column\ndef format_money(column):\n    values = []\n    for value in fifa21[column]:\n        if value[-1]=='M':\n            money = 1000000\n            money *= float(value[1:-1])\n        elif value[-1]=='K':\n            money = 1000\n            money *= float(value[1:-1])\n        else: \n            money = 0\n        values.append(money)\n    return values\n\n# formating Weight column\ndef format_weight():\n    weights = []\n    for weight in fifa21['Weight'].fillna(''):\n        if weight != '':\n            weights.append(int(weight[:-3]))\n        else:\n            weights.append(np.nan)\n    return weights\n\n# formating Height Column\ndef format_height():\n    heights = []\n    for height in fifa21['Height'].fillna(''):\n        if height != '':\n            height =int(height[0])*12 + int(height[2])\n            heights.append(height)\n        else:\n            heights.append(np.nan)\n    return heights\n\n# # formating Release Clause\n\ndef format_release_clause():\n    release_clause = []\n    for clause in fifa21['Release Clause'].fillna(''):\n        if clause == '':\n            money=0.0\n        elif clause[-1]=='M':\n            money = 1000000\n            money *= float(clause[1:-1])\n        elif clause[-1]=='K':\n            money = 1000\n            money *= float(clause[1:-1])\n        else: \n            money = 0\n        release_clause.append(money)\n    return release_clause","ff526887":"fifa21['Value'] =  format_money('Value')\nfifa21['Wage'] = format_money('Wage')\nfifa21['Weight'] = format_weight()\nfifa21['Height'] = format_height()\nfifa21['Release Clause'] = format_release_clause()","74fe4c00":"(fifa21).describe()","580e4514":"dropdex = (fifa21.loc[fifa21.Value==0].index)\ndropdex = dropdex.append((fifa21.loc[fifa21.Wage==0].index))\ndropdex = dropdex.append((fifa21.loc[fifa21['Release Clause']==0].index))\ndropdex = np.unique(dropdex)","e74112ad":"fifa21 = fifa21.drop(index=dropdex, axis = 1)","02a7a6b1":"print(sum(fifa21.Value==0),sum(fifa21.Wage==0),sum(fifa21['Release Clause']==0))","e6c523ba":"fifa21.shape","47c37e3e":"conditions = [\n    (fifa21['BP'] == 'RF') | (fifa21['BP'] == 'ST') | (fifa21['BP'] == 'LW') | (fifa21['BP'] == 'LF') | (fifa21['BP'] == 'RS') | (fifa21['BP'] == 'LS') | (fifa21['BP'] == 'RW') | (fifa21['BP'] == 'CF')\n    ,(fifa21['BP'] == 'RCM') | (fifa21['BP'] == 'LCM') | (fifa21['BP'] == 'LDM') | (fifa21['BP'] == 'CAM') | (fifa21['BP'] == 'CDM') | (fifa21['BP'] == 'RM') | (fifa21['BP'] == 'LAM') | (fifa21['BP'] == 'LM') | (fifa21['BP'] == 'RDM') | (fifa21['BP'] == 'CM') | (fifa21['BP'] == 'RAM')\n    ,(fifa21['BP'] == 'RCB') | (fifa21['BP'] == 'CB') | (fifa21['BP'] == 'LCB') | (fifa21['BP'] == 'LB') | (fifa21['BP'] == 'RB') | (fifa21['BP'] == 'LWB') | (fifa21['BP'] == 'RWB')\n    ,(fifa21['BP'] == 'GK')]\n\nchoices = ['FW','MID','DEF',\"GK\"]\nfifa21['GPOS'] = np.select(conditions, choices, default='N\/A')\nfifa21['GPOS']","a259ce5c":"from sklearn import preprocessing\n# label_encoder object knows how to understand word labels. \nlabel_encoder = preprocessing.LabelEncoder() \n  \n# Encode labels in column 'GPOS'. \nfifa21['GPOS']= label_encoder.fit_transform(fifa21['GPOS']) \n  \nfifa21['GPOS'].unique()","63a24444":"#Inverse the encoding\nlabel_encoder.inverse_transform(fifa21.GPOS)","d2d8c2fa":"import math","aad95945":"fifa21['BMI'] = fifa21.Weight*0.453592\/pow((fifa21.Height*2.54)\/100,2)","6f681bab":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor","307bd7cb":"df = fifa21.copy()","01199076":"categorical = [\n    'Nationality', \n    'Club', \n    'foot',\n    'A\/W',\n    'D\/W',\n    'W\/F',\n    'BP',\n    'SM',\n    'IR'\n]","9069dbcd":"for item in categorical:\n    df[item] = df[item].fillna('0') \n    le = preprocessing.LabelEncoder()\n    df[item] = le.fit_transform(df[item])","9bdeb91a":"drop = [\n    'ID', 'Name', 'Player Photo' \n     ,'POT', 'Club Logo', 'Flag Photo' \n      ,'Team & Contract','Contract' , 'Position', 'BOV'\n    \n    ,'Release Clause'\n    ,'Wage' \n    #,'Growth'\n    ,'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF' \n    ,'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM' \n    ,'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB','GK'\n    \n    #,'PAC' \n    ,'SHO', 'PAS', 'DRI', 'DEF', 'PHY'\n    , 'Total Stats','Base Stats' \n    ,'Skill'\n    ,'GPOS'\n    , 'BMI'\n,'Nationality'\n,'Club'\n,'BP'\n,'Height'\n,'Weight'\n,'foot'\n,'Balance'\n,'Jumping'\n,'Strength'\n,'Interceptions'\n,'Defending'\n,'Marking'\n,'Standing Tackle'\n,'Sliding Tackle'\n,'Goalkeeping'\n,'GK Diving'\n,'GK Handling'\n,'GK Kicking'\n,'GK Positioning'\n,'GK Reflexes'\n,'W\/F'\n,'A\/W'\n,'D\/W'\n]\n\ndf = df.drop(drop, axis=1)","895a1d37":"fifacluster=fifa21[[\"Attacking\",\"Crossing\",\"Finishing\"\n,\"Heading Accuracy\",\"Short Passing\",\"Volleys\"\n,\"Skill\",\"Dribbling\",\"Curve\"\n,\"FK Accuracy\",\"Long Passing\",\"Ball Control\"\n,\"Movement\",\"Acceleration\",\"Sprint Speed\"\n,\"Agility\",\"Reactions\",\"Balance\"\n,\"Power\",\"Shot Power\",\"Jumping\"\n,\"Stamina\",\"Strength\",\"Long Shots\"\n,\"Mentality\",\"Aggression\",\"Interceptions\"\n,\"Positioning\",\"Vision\",\"Penalties\"\n,\"Composure\",\"Defending\",\"Marking\"\n,\"Standing Tackle\",\"Sliding Tackle\",\"Goalkeeping\"\n,\"GK Diving\",\"GK Handling\",\"GK Kicking\"\n,\"GK Positioning\",\"GK Reflexes\",\"GPOS\"]]\nfifacluster.head()","b96f518a":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nprincipalComponents1 = pca.fit_transform(fifacluster[fifacluster.columns[~fifacluster.columns.isin(['GPOS'])]])","47a06e36":"# Creating a dataframe featuring the two Principal components that we acquired through PCA.\nPCA_dataset1 = pd.DataFrame(data = principalComponents1, columns = ['component1', 'component2'] )\nPCA_dataset1.head()","f1b5a4c2":"principal_component1 = PCA_dataset1['component1']\nprincipal_component2 = PCA_dataset1['component2']","0019159d":"# Visualizing PCA in 2 Dimensions.\nplt.figure()\nplt.figure(figsize=(10,10))\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\nplt.title('Two Dimensional PCA')\nplt.scatter(PCA_dataset1['component1'], PCA_dataset1['component2']\n            #, c = y_kmeans, s=10\n           )\nplt.show()","578fd0cb":"from yellowbrick.cluster import KElbowVisualizer","59693ab8":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters = 4, init = 'k-means++', random_state = 1)\ny_kmeans = kmeans.fit_predict(principalComponents1)","7c9f5c95":"model = KMeans()\nfig = KElbowVisualizer(model,k=(1,10))\nfig.fit(fifacluster[fifacluster.columns[~fifacluster.columns.isin(['GPOS','BMI','eGPOS'])]])\nfig.show();","e46c27fc":"fifacluster['principal component 1'] = principal_component1\nfifacluster['principal component 2'] = principal_component2\nfifacluster['cluster'] = y_kmeans","6e49a21a":"from matplotlib import colors as mcolors","caa8e0ab":"plt.figure(figsize=(10,7))\nplt.scatter(principalComponents1[y_kmeans == 0, 0], principalComponents1[y_kmeans == 0, 1], s = 100, c = 'blue', label = 'Cluster 1')\nplt.scatter(principalComponents1[y_kmeans == 1, 0], principalComponents1[y_kmeans == 1, 1], s = 100, c = 'red', label = 'Cluster 2')\nplt.scatter(principalComponents1[y_kmeans == 2, 0], principalComponents1[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(principalComponents1[y_kmeans == 3, 0], principalComponents1[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\n#plt.scatter(principalComponents1[y_kmeans == 4, 0], principalComponents1[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\n#plt.scatter(principalComponents1[y_kmeans == 5, 0], principalComponents1[y_kmeans == 5, 1], s = 100, c = 'limegreen', label = 'Cluster 6')\n#plt.scatter(principalComponents1[y_kmeans == 6, 0], principalComponents1[y_kmeans == 6, 1], s = 100, c = 'silver', label = 'Cluster 7')\n#plt.scatter(principalComponents1[y_kmeans == 7, 0], principalComponents1[y_kmeans == 7, 1], s = 100, c = 'rosybrown', label = 'Cluster 8')\n#plt.scatter(principalComponents1[y_kmeans == 8, 0], principalComponents1[y_kmeans == 8, 1], s = 100, c = 'mediumpurple', label = 'Cluster 9')\n\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 25, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of Players')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.legend()\nplt.show()","a9368edc":"fifacluster.groupby(\"GPOS\")[\"cluster\"].value_counts().plot(kind=\"barh\",color=\"teal\",figsize=(14,6))\nplt.ylabel('General Positions')\nplt.xlabel('Count')\nplt.title(' Count of Positions in Each Cluster')\nplt.show()","81c3140a":"pd.crosstab( index=fifacluster['cluster'],columns=fifacluster['GPOS'])","b8b083ca":"target = np.log1p(df['Value'])\noriginal_target = df['Value']\ndf = df.drop(['Value'], axis=1)","38c88cf1":"plt.hist(original_target,color='green')\nplt.title('Distrubution of Value')\nplt.show()","7e13bb9b":"plt.hist(target,color='green')\nplt.title('Distrubution of Log Normalized Value')\nplt.show()","6552f308":"scaler=MinMaxScaler()\n\nX = df.copy()\n\ny = target.copy()\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.33, random_state=99,shuffle=True)\n\nX_train = scaler.fit_transform(X_train)\n\nX_test = scaler.fit_transform(X_test)","b9d21413":"reg = LinearRegression()\n\nreg.fit(X_train,y_train)\n\npred = reg.predict(X_train)\n\nscores = cross_val_score(reg,X,y)\n \npred_1 = reg.predict(X_test)\n\nrespred=(np.expm1(pred_1))\nrestrue=(np.expm1(y_test))\n\n\n#Defining MAPE function\ndef MAPE(Y_actual,Y_Predicted):\n    mape = np.mean(np.abs((Y_actual - Y_Predicted)\/Y_actual))*100\n    return mape\n#Real value MAPE\nLR_MAPE= MAPE(y_test,pred_1)\n\nprint('MAPE:', '{:0.3f}'.format(LR_MAPE)+'%')\nprint('Train r2 Score:','{:0.3f}'.format(reg.score(X_train, y_train)*100)+'%')\nprint('Test r2 Score:','{:0.3f}'.format(reg.score(X_test, y_test)*100))\nprint('Adjusted r2 Score:','{:0.3f}'.format((1-((1-reg.score(X_test, y_test)*100)*((4188-1))\/(4188-35-1))))+'%')\n#print('MSE:', mean_squared_error(y_true=restrue, y_pred=respred,squared=True))\nprint('RMSE:', mean_squared_error(restrue, respred,squared=False))\nprint('MAE:', mean_absolute_error(restrue, respred))\n\nrespred=np.array(np.expm1(pred_1)).reshape(-1,1)\nrestrue=np.array(np.expm1(y_test)).reshape(-1,1)\nprint('Cross Validation Score:','{:0.3f}'.format(cross_val_score(reg,restrue,respred,cv=2).mean()*100)+'%')","a60eee29":"plt.figure(figsize=(10,8))\nsns.regplot(x=y_test, y=pred_1)\nplt.xlabel('Actual Values ')\nplt.ylabel('Predictions ')\nplt.title('Linear Model Predictions vs Actual')\nplt.show()","7f1f92f7":"random = RandomForestRegressor()\n\nrandom.fit(X_train, y_train)\n\ny_pred = random.predict(X_test)","dd90e712":"RF_MAPE= MAPE((y_test),(y_pred))\n\ny_pred1=np.array(np.expm1(y_pred)).reshape(-1,1)\ny_test1=np.array(np.expm1(y_test)).reshape(-1,1)\n\ncvs=cross_val_score(random,y_test1,y_pred1).mean()","c37559b9":"print('Train r2 Score:',random.score(X_train, y_train))\nprint('Test r2 Score:',random.score(X_test, y_test))\nprint('Adjusted r2 Score:',(1-((1-random.score(X_test, y_test))*((4188-1))\/(4188-35-1))))\n#print('MSE:', mean_squared_error(y_true=y_test1, y_pred=y_pred1,squared=True))\nprint('RMSE:', mean_squared_error(y_true=y_test1, y_pred=y_pred1,squared=False))\nprint('MAE:', mean_absolute_error(y_test1, y_pred1))\nprint('MAPE:', RF_MAPE)\nprint('Cross Validation Score:',cvs)","ea115924":"plt.figure(figsize=(10,7))\n\nsns.regplot(x=y_test, y=y_pred)\nplt.xlabel('Actual Values ')\nplt.ylabel('Predictions ')\nplt.title('Random Forest Predictions vs Actual')\nplt.show()\n","4a13d77d":"importances = random.feature_importances_\nimportances","9d8c4120":"features = df.columns\nimp = pd.DataFrame({'Features': features, 'Importance': importances})\nimp.sort_values(by='Importance',ascending=False)","b9c1ef13":"# Normalizing 'Value'","3c7f78ec":"### Removing zeroes in wage,release clause, and value columns","ba653309":"# Linear Regression","3a7d6f66":"# Feature Engineering","e6979188":"### Dropping problematic columns","540cea9c":"#### Intrestingly, we see a large peice of scatter (to the left) which looks made up of 2 seperate clusters and a smaller, distant piece of scatter (to the right)\n#### It would be interesting to see how these attributes cluster...","526444d3":"# Data Preprocessing","c4e5bd81":"## Data Cleaning","72097884":"# Feature Importance","95369cbd":" ## Encoding GPOS","15f89174":"### How many Clusters do we need?","d962f487":"#### In FIFA, there are 24 different positions... Our goal here is to create a new variable in the data connotating players' general positions.\n\n#### The Four General Positions are:\n- Forward\n- Midfielder\n- Defender\n- Goalkeeper","a97b0d0d":"### We must omit the Euro symbol and multiply the number in the object by either 1000 for 'K' or 1000000 for 'M'\n### Height and Weight will be formatted as well","ddedb2e9":"## Formatting Object Types","b8099188":"### Looks like we have 0s inplace for some 'Wage' and 'Value' obs. I cross validated this with sofifa.com, and it turns out the website just doesn't yet have data on those players. Essentially, every '0' inplace for Value overlaps with that of Wage, so we can drop observations relative to Wage = 0, but the following is another way to drop them via the use of numpy","6a98acf9":"### It seems as if our clusters form generally\/mostly around each player position. Given the attributes fed to the model, and the discerning of the four clusters, we can confidently say that players along the borders of the three neighboring clusters are position-fluid - this means that we can potentially try to find 'well-rounded' players along that general area, and perhaps between the centroids of the three clusters.\n\n### It would even make sense to continue to cluster to try to pinpoint these groups of players","89bf6d92":"# Modeling","1772257d":"## Feature Selection","852be14a":"### We lost ~4500 observations in the cleaning process... It's okay, though - our data is still just as comprehensive","8dfac462":"### 'Value' is un-normal, and is skewed to the right","85629d7e":"## General Position ","85c9455f":"## Train\/Test Split","836726cb":"### However, 'Value' is log normal.","1e0736dd":"# Random Forest","fd3acd70":"## Visualizaing Clusters","bfae721c":"# PCA & Clustering","c74b04f7":"### Looks like we have Object Types...","5e8daf5f":"## BMI\n### Since we have player Height and Weight, why not calculate their BMI? Perhaps it can be a helpful variable in the future..."}}