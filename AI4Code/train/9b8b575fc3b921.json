{"cell_type":{"a0a49f5a":"code","3a0180c1":"code","cfac3730":"code","12e794c1":"code","31f9d093":"code","ab41dd3c":"code","68e96e63":"code","d0d05837":"code","84f858f5":"code","2e2db241":"code","49fdbc1b":"code","4d3282cf":"code","3fb6d47d":"code","001fbe7c":"code","34ca3dbd":"code","440f3c3a":"code","983d0f45":"code","71f5d7dd":"code","b28e2a27":"code","012449ea":"code","d858070d":"code","4cd9de55":"code","843def77":"code","dcaa21b1":"code","d24e28aa":"code","3c3b6688":"code","859e1aeb":"code","24e083af":"code","0d7c5105":"code","f85ba0fe":"code","f0ba8381":"code","544c8e44":"code","5a597d6d":"code","a565c1e2":"code","893bb68e":"code","982eb8d0":"code","f7559692":"code","2fa04d75":"code","7c74ac6c":"code","bd0e7722":"code","344fdff8":"code","6f55b333":"code","0f98889a":"code","72bd0291":"code","dcc85493":"code","d7a985bc":"code","317db48b":"code","e51ae54c":"code","6898ccbe":"code","8ab5b5bc":"code","8cb916b9":"code","4a503664":"code","e2f305cd":"code","ebbe6805":"code","e6fcc8ce":"code","baf4cd87":"code","2a280ef4":"code","744bb075":"code","c2667339":"markdown","2fea83ba":"markdown","6e5664c3":"markdown","d0aea790":"markdown","17d343c1":"markdown","1658f84e":"markdown","2c6c952c":"markdown","1e682a29":"markdown","03881cdd":"markdown","14f868a9":"markdown","c055ebf2":"markdown","88b5838a":"markdown","028f90d2":"markdown","b237c424":"markdown","d381f093":"markdown","eda01e6f":"markdown","79ccca41":"markdown","7ffc7cc4":"markdown","628ec8cf":"markdown","ddf184f7":"markdown","21973de0":"markdown","9d083ef7":"markdown","90503a84":"markdown","ab2e6166":"markdown","c91eea34":"markdown","d34d129f":"markdown","b6a6f7f0":"markdown","626d4822":"markdown","6d04fe4b":"markdown","c2534305":"markdown","e12e7880":"markdown","50d40e6f":"markdown","22d06525":"markdown","a6b95585":"markdown","44d46ad9":"markdown","fbc361f7":"markdown"},"source":{"a0a49f5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a0180c1":"# Load in our libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n%matplotlib inline","cfac3730":"Train_Path = \"\/kaggle\/input\/titanic\/train.csv\"\nTest_Path = \"\/kaggle\/input\/titanic\/test.csv\"\nGender_Submission_Path = \"\/kaggle\/input\/titanic\/gender_submission.csv\"","12e794c1":"# Database contain Training Data\n# Test_Data contain Testing Data\n# Gender_Submission contain sample submission file\nDatabase = pd.read_csv(Train_Path)\nTest_Data = pd.read_csv(Test_Path)\nGender_Submission = pd.read_csv(Gender_Submission_Path)","31f9d093":"Database.head()","ab41dd3c":"Database.isna().sum()","68e96e63":"Database.info()","d0d05837":"Database.describe()","84f858f5":"Test_Data.head()","2e2db241":"Test_Data.isnull().sum()","49fdbc1b":"Test_Data.info()","4d3282cf":"Test_Data.describe()","3fb6d47d":"sns.barplot(Database[\"Sex\"], Database[\"Survived\"])","001fbe7c":"Female_Survival_Rate = len(Database[(Database[\"Survived\"] == 1) & (Database[\"Sex\"] == \"female\")])\/len(Database[Database[\"Sex\"] == \"female\"])\nMale_Survival_Rate = len(Database[(Database[\"Survived\"] == 1) & (Database[\"Sex\"] == \"male\")])\/len(Database[Database[\"Sex\"] == \"male\"])\nprint(\"Male Survival Rate is\", Male_Survival_Rate)\nprint(\"Female Survival Rate is\", Female_Survival_Rate)","34ca3dbd":"for Data in [Database, Test_Data]:    \n    Data[\"Male\"] = Data[\"Sex\"].apply(lambda x: 1 if(x == \"male\") else 0)\n    Data[\"Female\"] = Data[\"Sex\"].apply(lambda x: 1 if(x == \"female\") else 0)","440f3c3a":"Database.head()","983d0f45":"sns.barplot(Database[\"Embarked\"], Database[\"Survived\"])","71f5d7dd":"Database[\"Embarked\"].unique()","b28e2a27":"Database[\"Embarked\"].value_counts()","012449ea":"# Most Ocuured value is S\nDatabase[\"Embarked\"] = Database[\"Embarked\"].fillna(\"S\")","d858070d":"for Data in [Database, Test_Data]:    \n    Data[\"Southampton\"] = Data[\"Embarked\"].apply(lambda x: 1 if(x == \"S\") else 0)\n    Data[\"Cherbough\"] = Data[\"Embarked\"].apply(lambda x: 1 if(x == \"C\") else 0)\n    Data[\"Queenstown\"] = Data[\"Embarked\"].apply(lambda x: 1 if(x == \"Q\") else 0)","4cd9de55":"Database.head()","843def77":"for Data in [Database, Test_Data]:    \n    Data[\"Title\"] = Data[\"Name\"].str.extract(pat = '([A-Za-z]+)\\.')\nDatabase.head()","dcaa21b1":"plt.figure(figsize = (15, 5))\nsns.barplot(Database[\"Title\"], Database[\"Survived\"])","d24e28aa":"Database[\"Title\"].unique()","3c3b6688":"Database[\"Title\"].value_counts()","859e1aeb":"for Data in [Database, Test_Data]:\n    Data[\"Title\"] = Data[\"Title\"].replace([\"Lady\", \"Countess\", \"Capt\", \"Col\", \"Don\", \"Dr\", \"Major\", \"Rev\", \"Sir\", \"Jonkheer\", \"Dona\"], \"Rare\")\n    Data[\"Title\"] = Data[\"Title\"].replace([\"Mlle\", \"Ms\"], \"Miss\")\n    Data[\"Title\"] = Data[\"Title\"].replace(\"Mme\", \"Mrs\")\n    Data[\"Mr\"] = Data[\"Title\"].apply(lambda x: 1 if(x == \"Mr\") else 0)\n    Data[\"Miss\"] = Data[\"Title\"].apply(lambda x: 1 if(x == \"Miss\") else 0)\n    Data[\"Mrs\"] = Data[\"Title\"].apply(lambda x: 1 if(x == \"Mrs\") else 0)\n    Data[\"Master\"] = Data[\"Title\"].apply(lambda x: 1 if(x == \"Master\") else 0)\n    Data[\"Rare\"] = Data[\"Title\"].apply(lambda x: 1 if(x == \"Rare\") else 0)\nDatabase.head()","24e083af":"sns.barplot(Database[\"Pclass\"], Database[\"Survived\"])","0d7c5105":"# To give more weightage to Rich people we will change their label\nDatabase[\"Pclass\"] = Database[\"Pclass\"].map({1:3,3:1,2:2})\nTest_Data[\"Pclass\"] = Test_Data[\"Pclass\"].map({1:3,3:1,2:2})\nDatabase.head()","f85ba0fe":"Database.groupby([\"Survived\"])[\"Age\"].plot(kind = \"hist\", alpha = 0.5, figsize = (10, 5))\nplt.title(\"Age Distribution\")\nplt.xlabel(\"Age\")\nplt.legend([\"Not Survived\", \"Survived\"])\nplt.show()","f0ba8381":"Database[[\"Sex\", \"Age\", \"Pclass\"]].groupby([\"Sex\", \"Pclass\"]).mean()","544c8e44":"Database[(Database[\"Sex\"] == \"female\") & (Database[\"Pclass\"] == 1)][\"Age\"].mean()","5a597d6d":"print(Database[Database[\"Title\"] == \"Master\"][\"Age\"].mean())\nprint(Database[(Database[\"Title\"] == \"Miss\") & (Database[\"Parch\"] == 0)][\"Age\"].mean())\nprint(Database[(Database[\"Title\"] == \"Miss\") & (Database[\"Parch\"] != 0)][\"Age\"].mean())","a565c1e2":"Database[\"Age\"] = Database[\"Age\"].fillna(0)\nTest_Data[\"Age\"] = Test_Data[\"Age\"].fillna(0)\nfor Data in [Database, Test_Data]:\n    for row in Data.index:\n        if(Data.loc[row, \"Age\"] == 0.0):\n            if(Data.loc[row, \"Title\"] == \"Miss\"):\n                if(Data.loc[row, \"Parch\"] == 0):\n                    Data.loc[row, \"Age\"] = Data[(Data[\"Title\"] == \"Miss\") & (Data[\"Parch\"] == 0)][\"Age\"].mean()\n                elif(Data.loc[row, \"Parch\"] != 0):\n                    Data.loc[row, \"Age\"] = Data[(Data[\"Title\"] == \"Miss\") & (Data[\"Parch\"] != 0)][\"Age\"].mean()\n            elif(Data.loc[row, \"Title\"] == \"Master\"):\n                Data.loc[row, \"Age\"] = Data[Data[\"Title\"] == \"Master\"][\"Age\"].mean()\n            elif(Data.loc[row, \"Sex\"] == \"female\"):\n                if(Data.loc[row, \"Pclass\"] == 1):\n                    Data.loc[row, \"Age\"] = Data[(Data[\"Sex\"] == \"female\") & (Data[\"Pclass\"] == 1)][\"Age\"].mean()\n                elif(Data.loc[row, \"Pclass\"] == 2):\n                    Data.loc[row, \"Age\"] = Data[(Data[\"Sex\"] == \"female\") & (Data[\"Pclass\"] == 2)][\"Age\"].mean()\n                elif(Data.loc[row, \"Pclass\"] == 3):\n                    Data.loc[row, \"Age\"] = Data[(Database[\"Sex\"] == \"female\") & (Data[\"Pclass\"] == 3)][\"Age\"].mean()\n            elif(Data.loc[row, \"Sex\"] == \"male\"):\n                if(Data.loc[row, \"Pclass\"] == 1):\n                    Data.loc[row, \"Age\"] = Data[(Data[\"Sex\"] == \"male\") & (Data[\"Pclass\"] == 1)][\"Age\"].mean()\n                elif(Data.loc[row, \"Pclass\"] == 2):\n                    Data.loc[row, \"Age\"] = Data[(Data[\"Sex\"] == \"male\") & (Data[\"Pclass\"] == 2)][\"Age\"].mean()\n                elif(Data.loc[row, \"Pclass\"] == 3):\n                    Data.loc[row, \"Age\"] = Data[(Database[\"Sex\"] == \"male\") & (Data[\"Pclass\"] == 3)][\"Age\"].mean()","893bb68e":"Database[\"Age_Band\"] = pd.cut(Database[\"Age\"], 5)\nDatabase[\"Age_Band\"].unique()","982eb8d0":"for Data in [Database, Test_Data]:\n    Data.loc[(Data[\"Age\"] <= 16.336), \"Age\"] = 1\n    Data.loc[((Data[\"Age\"] > 16.336) & (Data[\"Age\"] <= 32.252)), \"Age\"] = 2\n    Data.loc[((Data[\"Age\"] > 32.252) & (Data[\"Age\"] <= 48.168)), \"Age\"] = 3\n    Data.loc[((Data[\"Age\"] > 48.168) & (Data[\"Age\"] <= 64.084)), \"Age\"] = 4\n    Data.loc[(Data[\"Age\"] > 64.084), \"Age\"] = 5\n    Data[\"Age\"] = Data[\"Age\"].astype(int)\nDatabase.head()","f7559692":"# Graph of Label encoded Age and Survival Rate\nsns.barplot(Database[\"Age\"], Database[\"Survived\"])","2fa04d75":"Database.head()","7c74ac6c":"# SibSp :- Number of Siblings\/Spouse\n# Parch :- Number of Parents\/Childrens","bd0e7722":"Database[\"SibSp\"].unique()","344fdff8":"Database[\"Parch\"].unique()","6f55b333":"Database[\"Family\"] = Database[\"SibSp\"] + Database[\"Parch\"] + 1\nTest_Data[\"Family\"] = Test_Data[\"SibSp\"] + Test_Data[\"Parch\"] + 1\nDatabase.head()","0f98889a":"Database[\"IsAlone\"] = Database[\"Family\"].apply(lambda x: 1 if(x != 1) else 0)\nTest_Data[\"IsAlone\"] = Test_Data[\"Family\"].apply(lambda x: 1 if(x != 1) else 0)\nDatabase.head()","72bd0291":"sns.barplot(Database[\"IsAlone\"], Database[\"Survived\"])","dcc85493":"Database[\"Fare_Band\"] = pd.qcut(Database[\"Fare\"],4)\nDatabase[\"Fare_Band\"].unique()","d7a985bc":"Test_Data[\"Fare\"].fillna(Test_Data['Fare'].dropna().median(), inplace=True)","317db48b":"for Data in [Database, Test_Data]:    \n    for row in Data.index:\n        if(Data.loc[row, \"Fare\"] <= 7.91):\n            Data.loc[row, \"Fare\"] = 0\n        elif((Data.loc[row, \"Fare\"] > 7.91) & (Data.loc[row, \"Fare\"] <= 14.454)):\n            Data.loc[row, \"Fare\"] = 1\n        elif((Data.loc[row, \"Fare\"] > 14.454) & (Data.loc[row, \"Fare\"] <= 31)):\n            Data.loc[row, \"Fare\"] = 2\n        else:\n            Data.loc[row, \"Fare\"] = 3\nDatabase[\"Fare\"] = Database[\"Fare\"].astype(int)\nTest_Data[\"Fare\"] = Test_Data[\"Fare\"].astype(int)\nDatabase.head()","e51ae54c":"Test_Data.head()","6898ccbe":"sns.barplot(Database[\"Fare\"], Database[\"Survived\"])","8ab5b5bc":"# Drop all unnecessary columns\nDatabase.drop(columns = [\"PassengerId\", \"Name\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\", \"Title\", \"Age_Band\", \"Family\", \"Cabin\", \"Ticket\", \"Fare_Band\"], inplace = True)\nTest_Data.drop(columns = [\"Name\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\", \"Title\", \"Family\", \"Cabin\", \"Ticket\"], inplace = True)","8cb916b9":"Database.head()","4a503664":"Test_Data.head()","e2f305cd":"X = Database[[\"Pclass\", \"Age\", \"Fare\", \"Male\", \"Female\", \"Southampton\", \"Cherbough\", \"Queenstown\", \"Mr\", \"Miss\", \"Mrs\", \"Master\", \"Rare\", \"IsAlone\"]]\ny = Database[\"Survived\"]\nTest_X = Test_Data[[\"Pclass\", \"Age\", \"Fare\", \"Male\", \"Female\", \"Southampton\", \"Cherbough\", \"Queenstown\", \"Mr\", \"Miss\", \"Mrs\", \"Master\", \"Rare\", \"IsAlone\"]]","ebbe6805":"# Level 0 Models\nlevel0 = list()\nlevel0.append(('lr', LogisticRegression()))\nlevel0.append(('knn', KNeighborsClassifier()))\nlevel0.append(('cart', DecisionTreeClassifier()))\nlevel0.append(('svm', SVC()))\nlevel0.append(('bayes', GaussianNB()))\n\n# Level 1 Model\nlevel1 = LogisticRegression()\n\nmodel = StackingClassifier(estimators=level0, final_estimator=level1, cv=5)\n\nmodel.fit(X, y)\n\n\nFinal = model.predict(Test_X)\n","e6fcc8ce":"Submission = pd.DataFrame({\n        \"PassengerId\": Test_Data[\"PassengerId\"],\n        \"Survived\": Final\n        })\nSubmission.to_csv('Submission.csv', index=False)","baf4cd87":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size = 0.2, random_state = 0)","2a280ef4":"# #max_depth = 11\n# #min_samples_split = 6\n# #max_leaf_nodes = 10\n# Train_List = []\n# Test_List = []\n# for i in range(1, 14, 1):\n    \n#     Model = RandomForestClassifier(random_state = 0, max_features = i)\n#     Model.fit(Train_X, Train_y)\n#     train_ypred = Model.predict(Train_X)\n#     test_ypred = Model.predict(Test_X)\n#     Train = f1_score(train_ypred, Train_y, average = \"macro\")\n#     Test = f1_score(test_ypred, Test_y, average = \"macro\")\n#     Train_List.append(Train)\n#     Test_List.append(Test)\n# plt.plot(range(1, 14, 1), Train_List)\n# plt.plot(range(1, 14, 1), Test_List)\n# plt.show()","744bb075":"Submission = pd.DataFrame({\n        \"PassengerId\": Test_Data[\"PassengerId\"],\n        \"Survived\": Final\n        })\nSubmission.to_csv('Submission16.csv', index=False)","c2667339":"* **Sex**","2fea83ba":"From graph we can observe that person travelling alone has more survival rate.\nSo we will us IsAlone as a feature.","6e5664c3":"* **IsAlone**","d0aea790":"* **Age**","17d343c1":"# Acquire Data","1658f84e":"Analyze Test Data","2c6c952c":"Test Data contain missing Fare value. So we are filling it with median fare value","1e682a29":"Age column contain missing value.\nSo what we are doing basically is we are using Title, Parch, Sex, Pclass to fill missing value.\nHere, if a person has Title \"Master\" then he must be a child whereas if a person has Title \"Miss\" and Parch = 0 then she must be an adult whereas if a person has Title \"Miss\" and Parch != 0 then she must be a child.\nFor rest of the person that does not have \"Miss\" or \"Master\" as a Title we are using Sex, Pclass to fill thier Age.","03881cdd":"**First Analyze Traning Data**","14f868a9":"Now we will extract Title from Name feature","c055ebf2":"Here we can observe that in Traning Data Age, Cabin, Embarked column contain missing value.\nMost of the value in Cabin column is missing, so we will not use it as a feature. ","88b5838a":"Here we can observe that in Test Data Age, Cabin, Fare column contain missing value.","028f90d2":"From graph we can observe that Most childrens survived whereas adults died.","b237c424":"Here we are creating a feature that will tell us wether a person is travelling Alone or not.","d381f093":"* **Fare**","eda01e6f":"# Modeling","79ccca41":"* **Title** ","7ffc7cc4":"# Submission ","628ec8cf":"In training data Embarked contain missing value. So we try to fill with most occured value","ddf184f7":"Some Titles have less observation, so we will merge them in Rare.\nThen we will one-hot encode them.","21973de0":"From graph we can observe that their is some correlation between Title and Survival Rate","9d083ef7":"Now basically we are Label encoding Age ","90503a84":"To use Embarked as a feature we will one-hot encode it.","ab2e6166":"Basically we are label encoding Fare","c91eea34":"Basically what here we are doing is we are making prediction from all level 0 models and giving that to level 1 model and prediction from level 1 model is used as our final ans.","d34d129f":"From graph and survival rate we can obesreve that most of the female survived whereas most of the male died.","b6a6f7f0":"Finnal Training and Testing Data","626d4822":"# Ensembling and Stacking","6d04fe4b":"# Feature Engineering","c2534305":"So to use Sex as a Feature we will do one-hot encoding","e12e7880":"From graph we can observe that survival rate is more for people giving more Fare. So we will use it as our feature ","50d40e6f":"From graph we can observe that most rich people survived whereas most poor people died.","22d06525":"* **Pclass**","a6b95585":"* **Embarked**","44d46ad9":"From graph we can observe that their is a correlation between Embarked and Survival rate. So we will use Embarked","fbc361f7":"# Analyze by describing data"}}