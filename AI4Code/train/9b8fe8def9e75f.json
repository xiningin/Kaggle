{"cell_type":{"f58fb42e":"code","b5951c61":"code","117ab961":"code","b444ecf2":"code","e722e15d":"code","2cce9fc3":"code","4690e307":"code","7e842c0c":"code","4dd04ed5":"code","24c5c3c6":"code","0fb27f60":"code","394c9897":"code","c6e117ba":"code","eee7a594":"code","650ccbe0":"code","3af8498f":"code","307d86aa":"code","c21c88d5":"code","a1d46830":"markdown","d622888c":"markdown","fdfd6f09":"markdown","c6f08b4d":"markdown"},"source":{"f58fb42e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5951c61":"from sklearn.preprocessing import LabelEncoder\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n                         \ntemp_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\n\n\nsns.pairplot(train_data[[\"Age\",\"Pclass\",\"Survived\"]])\n\ntrain_data.drop(['Name','Ticket','Cabin', 'Embarked'], axis = 1 , inplace = True)\n\nlabel_encoder = LabelEncoder()\n\nx = train_data['Sex']\ntrain_data['Sex'] = label_encoder.fit_transform(x)\ntrain_data.head()","117ab961":"sns.lmplot(x='Survived', y='Age', hue='Sex', \n           data=temp_data.loc[temp_data['Sex'].isin(['female', 'male'])],\n           fit_reg=False)\n\nsns.lmplot(x='Survived', y='Pclass', hue='Sex', \n           data=temp_data.loc[temp_data['Sex'].isin(['female', 'male'])],\n           fit_reg=False)","b444ecf2":"import pandas as pd\nfrom pandas.plotting import parallel_coordinates\n\np = (temp_data[(temp_data['Embarked'].isin([\"S\", \"C\",\"Q\"]))]\n         .loc[:, ['Embarked', 'Age', 'SibSp','Parch', 'Pclass']]\n    )\n\nparallel_coordinates(p, 'Embarked',color=['g','m','r'])\n\n","e722e15d":"from sklearn import preprocessing\n\n\ntemp_data[['Age', 'SibSp','Parch']] = preprocessing.minmax_scale(temp_data[['Age', 'SibSp','Parch']])\n\n\nk = (temp_data[(temp_data['Pclass'].isin([1, 2,3]))]\n         .loc[:, ['Pclass', 'Age', 'SibSp','Parch']]\n    )\n\nparallel_coordinates(k, 'Pclass',color=['g','m','r'])","2cce9fc3":"\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()\n\n\ntest_data.drop(['Name','Ticket','Cabin', 'Embarked'], axis = 1 , inplace = True)\n\nlabel_encoder = LabelEncoder()\n\nx = test_data['Sex']\ntest_data['Sex'] = label_encoder.fit_transform(x)\n\ntest_data.head()","4690e307":"train_data.describe()\nprint(train_data.isna().sum())\nfor column in train_data.columns[1 : ]:\n    train_data[column].fillna(value = train_data[column].mean(), inplace = True)\n    \ntest_data.describe()\nprint(test_data.isna().sum())\nfor column in test_data.columns[1 : ]:\n    test_data[column].fillna(value = test_data[column].mean(), inplace = True)","7e842c0c":"women = train_data.loc[train_data.Sex == 0][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","4dd04ed5":"men = train_data.loc[train_data.Sex == 1][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)\n\ntrain_data[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","24c5c3c6":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.heatmap(train_data.corr(), annot =True)\n","0fb27f60":"import matplotlib.pyplot as plt\nplt.scatter(train_data['Survived'],train_data['Fare'], alpha = 0.7)\nplt.xlabel('Survived')\nplt.ylabel('Fare')\nplt.show()","394c9897":"sns.lmplot(x = 'Age', y= 'Fare', hue ='Survived', data = train_data)\nplt.show()","c6e117ba":"#import plotly.express  as px\n\n#fig = px.box(train_data, x=\"Age\" )\n#fig.show()\n\nupper_limit = train_data['Age'].quantile(0.99)\nlower_limit = train_data['Age'].quantile(0.01)\n\nmedian = train_data.loc[train_data['Age']<upper_limit, 'Age'].median()\ntrain_data[\"Age\"] = np.where(train_data[\"Age\"] >upper_limit, median,train_data['Age'])\ntrain_data[\"Age\"] = np.where(train_data[\"Age\"] <lower_limit, median,train_data['Age'])\n\n#fig = px.box(train_data, x=\"Fare\" )\n#fig.show()\n\nupper_limit = train_data['Fare'].quantile(0.99)\nlower_limit = train_data['Fare'].quantile(0.01)\n\nmedian = train_data.loc[train_data['Fare']<upper_limit, 'Fare'].median()\ntrain_data[\"Fare\"] = np.where(train_data[\"Fare\"] >upper_limit, median,train_data['Fare'])\ntrain_data[\"Fare\"] = np.where(train_data[\"Fare\"] <lower_limit, median,train_data['Fare'])\n\n\n","eee7a594":"#fig = px.box(train_data, x=\"Age\" )\n#fig.show()\n\n\n#fig = px.box(train_data, x=\"Fare\" )\n#fig.show()\n\n","650ccbe0":"#from sklearn import preprocessing\n\n\n#train_data[['Age' , 'Fare']] = preprocessing.minmax_scale(train_data[['Age' , 'Fare']])\n#train_data.head()","3af8498f":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\n\nmodel = DecisionTreeClassifier(max_depth = 4)\n\ny = train_data['Survived']\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",\"Fare\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmy_pipeline = Pipeline(steps=[\n                              ('model', model)\n                             ])","307d86aa":"from sklearn.metrics import mean_absolute_error\n\nmy_pipeline.fit(X, y)\npredictions = my_pipeline.predict(X_test)\n\n\nprint(predictions)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\n\nprint(output)\nprint(\"Your submission was successfully saved!\")\n","c21c88d5":"from IPython.display import display\nimport graphviz \nfrom sklearn.tree import export_graphviz\ndisplay( graphviz.Source(export_graphviz(model,feature_names= [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",\"Fare\"], class_names = ['1', '0'])))","a1d46830":"To calculate accuracy of model, we need to use decision tree model . ","d622888c":"We need to drop some columns for making model simple and efficient.","fdfd6f09":"Let's look at relationship between Age and Fare into Survived","c6f08b4d":"We need to make categorical data to numarical data"}}