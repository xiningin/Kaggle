{"cell_type":{"4e440776":"code","297e3d2d":"code","3ad6622d":"code","1974b404":"code","bcadac5f":"code","3bc78184":"code","d64803fb":"code","b66a5286":"code","0a9690ce":"code","1bda5f4e":"markdown","d7c2a006":"markdown","4a7e202f":"markdown"},"source":{"4e440776":"import numpy as np,pandas as pd,pylab as pl\nimport h5py,tensorflow as tf\nfrom tensorflow import image as timg\nimport tensorflow.keras.layers as tfkl\nimport tensorflow.keras.applications as tfka","297e3d2d":"def resize_info(x_train,y_train,\n                x_test,y_test,pixels):\n    x_train=np.array(timg.resize(x_train,[pixels,pixels]))\n    x_test=np.array(timg.resize(x_test,[pixels,pixels]))\n    N=len(y_train); shuffle_ids=np.arange(N)\n    np.random.RandomState(12).shuffle(shuffle_ids)\n    x_train,y_train=x_train[shuffle_ids],y_train[shuffle_ids]\n    N=len(y_test); shuffle_ids=np.arange(N)\n    np.random.RandomState(23).shuffle(shuffle_ids)\n    x_test,y_test=x_test[shuffle_ids],y_test[shuffle_ids]\n    n=int(len(x_test)\/2)\n    x_valid,y_valid=x_test[:n],y_test[:n]\n    x_test,y_test=x_test[n:],y_test[n:]\n    df=pd.DataFrame([[x_train.shape,x_valid.shape,x_test.shape],\n                     [x_train.dtype,x_valid.dtype,x_test.dtype],\n                     [y_train.shape,y_valid.shape,y_test.shape],\n                     [y_train.dtype,y_valid.dtype,y_test.dtype]],\n                    columns=['train','valid','test'],\n                    index=['image shape','image type',\n                           'label shape','label type'])\n    display(df)    \n    return [[x_train,x_valid,x_test],\n            [y_train,y_valid,y_test]]\ndef display_examples(x,y):\n    n=np.random.randint(1,50)\n    fig=pl.figure(figsize=(11,4))\n    for i in range(n,n+5):\n        ax=fig.add_subplot(1,5,i-n+1,\\\n        xticks=[],yticks=[],title=y[i])\n        ax.imshow(x[i]); \n    pl.show()","3ad6622d":"pixels=64\nfpath='..\/input\/tf-cats-vs-dogs\/'\nf='CatDogImages.h5'\nf=h5py.File(fpath+f,'r')\nkeys=list(f.keys()); print(keys)\nx_test=np.array(f[keys[0]])\ny_test=np.array(f[keys[1]]).reshape(-1)\nx_train=np.array(f[keys[2]])\ny_train=np.array(f[keys[3]]).reshape(-1)\n[[x_train,x_valid,x_test],\n [y_train,y_valid,y_test]]=\\\nresize_info(x_train,y_train,x_test,y_test,pixels)","1974b404":"display_examples(x_valid,y_valid)","bcadac5f":"def VGG16L(pixels):\n    base_model=tfka.VGG16(include_top=False,\n                          weights='imagenet',\n                          input_shape=(pixels,pixels,3))\n    x=base_model.output\n    x=tfkl.GlobalAveragePooling2D()(x)\n    x=tfkl.Dense(1024)(x)\n    x=tfkl.LeakyReLU(alpha=.02)(x)\n    y=tfkl.Dense(1,activation=tf.nn.sigmoid)(x)\n    model=tf.keras.Model(inputs=base_model.input,outputs=y)\n    model.compile(optimizer='adam',\n                  loss='binary_crossentropy',\n                  metrics=['accuracy'])\n    return model","3bc78184":"fw='weights.best.hdf5'\ndef cb(fw):\n    early_stopping=tf.keras.callbacks\\\n    .EarlyStopping(monitor='val_loss',patience=20,verbose=2)\n    checkpointer=tf.keras.callbacks\\\n    .ModelCheckpoint(filepath=fw,save_best_only=True,verbose=2)\n    lr_reduction=tf.keras.callbacks\\\n    .ReduceLROnPlateau(monitor='val_loss',verbose=2,\n                       patience=5,factor=.8)\n    return [checkpointer,early_stopping,lr_reduction]\ndef history_plot(fit_history):\n    pl.figure(figsize=(12,10)); pl.subplot(211)\n    keys=list(fit_history.history.keys())[0:4]\n    pl.plot(fit_history.history[keys[0]],\n            color='slategray',label='train')\n    pl.plot(fit_history.history[keys[2]],\n            color='#4876ff',label='valid')\n    pl.xlabel(\"Epochs\"); pl.ylabel(\"Loss\")\n    pl.legend(); pl.grid()\n    pl.title('Loss Function')     \n    pl.subplot(212)\n    pl.plot(fit_history.history[keys[1]],\n            color='slategray',label='train')\n    pl.plot(fit_history.history[keys[3]],\n            color='#4876ff',label='valid')\n    pl.xlabel(\"Epochs\"); pl.ylabel(\"Accuracy\")    \n    pl.legend(); pl.grid()\n    pl.title('Accuracy'); pl.show()","d64803fb":"model=VGG16L(pixels)\nhistory=model.fit(x=x_train,y=y_train,\n                  batch_size=128,epochs=20,\n                  callbacks=cb(fw),\n                  validation_data=(x_valid,y_valid))","b66a5286":"history_plot(history)","0a9690ce":"model.load_weights(fw)\nmodel.evaluate(x_test,y_test)","1bda5f4e":"## VGG16","d7c2a006":"## Code Modules & Functions","4a7e202f":"## Data"}}