{"cell_type":{"e823845c":"code","51105966":"code","189e2707":"code","adf01bfc":"code","bb300d01":"code","88ce416a":"code","744ae545":"code","8357293e":"code","9d2317a5":"code","9f1a2eb0":"code","6fa2ca6e":"code","e1c6750b":"code","d36f3b5d":"code","5bdebe63":"code","3f19c025":"code","4ae39ebb":"code","dee265d6":"code","54168581":"code","0ab2072e":"code","f3d542b0":"code","98b4543e":"code","5d6b0d4f":"code","865e8bb1":"code","eceb16b7":"code","35ae0d98":"code","e197c34d":"code","2dc9be69":"code","d6df9ba0":"markdown","e133d450":"markdown","b3fc2a7c":"markdown","65044fcd":"markdown","88a385f9":"markdown","0a69382e":"markdown","cd114591":"markdown","e6a7861a":"markdown","b9b2a7e7":"markdown"},"source":{"e823845c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# SLIPT DATASET\nimport sklearn.model_selection as model_selection\n# Clustering\nfrom sklearn.cluster import KMeans\n\nfrom sklearn.metrics import pairwise_distances\nimport seaborn as sns\n\n## Matplotlib\n%matplotlib inline\nplt.rc('font', size=14)\n# Set the font dictionaries (for plot title and axis titles)\ntitle_font = {'fontname':'Arial', 'size':'16', 'color':'black', 'weight':'normal',\n  'verticalalignment':'bottom'} # Bottom vertical alignment for more space\naxis_font = {'fontname':'Arial', 'size':'12'}\n\nimport matplotlib.ticker as mtick\ndr_dark_blue = '#08233F'\ndr_blue = '#1F77B4'\ndr_orange = '#FF7F0E'\ndr_red = '#BE3C28'","51105966":"!pip install datarobot","189e2707":"import datarobot","adf01bfc":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')\ndf.head()","bb300d01":"df[df.columns[2]].value_counts().to_frame().style.bar()","88ce416a":"def plot_hist_preenchimento(df,fig_filename,log=True):\n    fig, ax = plt.subplots()\n    fig = plt.gcf()\n    fig.set_size_inches(40,15)\n\n    labels_ = df.columns.values\n    y_pos = np.arange(len(labels_))\n    performance =  100 - (df.isnull().sum().values\/df.shape[0]*100)\n\n    ax.bar(y_pos, performance, align='center')\n    ax.set_xticks(y_pos)\n    ax.set_xticklabels(labels_)\n    ax.invert_xaxis()  # labels read top-to-bottom\n\n    ax.set_xlabel('Campos')\n    ax.set_ylabel('Preenchimento Porcentagem')\n    ax.set_title('Campos mais preenchidos')\n    plt.axhline(y=20, ls='--',color='red')\n    plt.axhline(y=50, ls='--',color='red')\n    plt.axhline(y=70, ls='--',color='red')\n    plt.xticks(rotation=45, ha='right')\n\n\n    #plt.xscale(\"log\")\n    if log :\n        plt.yscale(\"log\")\n    plt.savefig(fig_filename)\n    plt.show()\n","744ae545":"plot_hist_preenchimento(df,'campos_preenchidos_porcentagem.png',log=False)","8357293e":"titulo_ = \"(rows,columns) - \" + str(df.shape)\n\ndf.isnull().sum(axis=1).hist(bins=20)\nfig = plt.gcf()\nplt.title('Most completed fields : '+titulo_)\nfig.set_size_inches(10,5)\nplt.xlabel('Missing Features')\nplt.ylabel('Row quantity')\n#plt.xscale(\"log\")\n#plt.yscale(\"log\")\nplt.savefig(\"campos_preenchidos.png\")\nplt.show()\n","9d2317a5":"df.columns = [x.lower().strip().replace(' ','_') for x in df.columns]\ndf.columns.shape","9f1a2eb0":"df.drop(['coronavirusoc43','adenovirus','parainfluenza_3', 'metapneumovirus','chlamydophila_pneumoniae','parainfluenza_2','coronavirus229e','myelocytes','influenza_b','patient_addmited_to_semi-intensive_unit_(1=yes,_0=no)','ionized_calcium'], axis=1, inplace=True)","6fa2ca6e":"df.columns.shape","e1c6750b":"titulo_ = \"dataset : (rows,columns) - \" + str(df.shape)\ndf.isnull().sum(axis=1).hist(bins=20)\nfig = plt.gcf()\nplt.title(titulo_)\nfig.set_size_inches(10,5)\nplt.xlabel('Null features')\nplt.ylabel('Row Count ')\n#plt.xscale(\"log\")\n#plt.yscale(\"log\")\nplt.savefig(\"campos_preenchidos_apos_remocao.png\")\nplt.show()","d36f3b5d":"msk_90 = df.isnull().sum(axis=1) > 90\nrow_idx = msk_90.index[msk_90.values]\ndf_lt_90 = df.drop(row_idx,axis=0)\ndf_lt_90.shape","5bdebe63":"df_lt_90[df_lt_90.columns[2]].value_counts().to_frame().style.bar()","3f19c025":"df_lt_90.to_csv('df_lt_90.csv', index=False, encoding='utf-8')","4ae39ebb":"import datarobot as dr\ndr.Client(token='_valid_token_', endpoint='https:\/\/app.datarobot.com\/api\/v2')\nproject = dr.Project.create('df_lt_90.csv',project_name='_1_kaggle_einstein_lt_90')","dee265d6":"project.set_target(target='sars-cov-2_exam_result',\n                   metric='LogLoss',\n                   worker_count = '4',\n                   advanced_options=dr.AdvancedOptions(accuracy_optimized_mb = True),\n                   partitioning_method = dr.RandomCV(20, 5, seed=0),\n                   mode=dr.AUTOPILOT_MODE.FULL_AUTO)","54168581":"models = project.get_models()\nlen(models)","0ab2072e":"models = project.get_models()\nroc = models[1].get_roc_curve('validation')\ndf = pd.DataFrame(roc.roc_points)\ndf.columns.values","f3d542b0":"\nacc_list = []\nmodels_name\nfor i in np.arange(len(models)):\n    roc = models[i].get_roc_curve('validation')\n    df = pd.DataFrame(roc.roc_points)\n    acc_list.append(df.iloc[df.f1_score.idxmax(),:].to_dict())\n","98b4543e":"df_ = pd.DataFrame(acc_list)\ndf_.insert(loc=0, column='models', value=models)\ndf_ = df_.sort_values(by=['accuracy','false_negative_score'],ascending=[False,True])\ndf_.head()","5d6b0d4f":"plt.figure()\nplt.scatter(df_.false_negative_score,df_.accuracy)\nplt.xlabel('false_negative_score')\nplt.ylabel('accuracy')\nplt.show()","865e8bb1":"best_model = models[0]\nbest_model","eceb16b7":"roc = best_model.get_roc_curve('validation')\nthreshold = roc.get_best_f1_threshold()\nmetrics = roc.estimate_threshold(threshold)\nmetrics","35ae0d98":"roc_df = pd.DataFrame({\n    'Predicted Negative': [metrics['true_negative_score'],\n                           metrics['false_negative_score'],\n                           metrics['true_negative_score'] + metrics[\n                               'false_negative_score']],\n    'Predicted Positive': [metrics['false_positive_score'],\n                           metrics['true_positive_score'],\n                           metrics['true_positive_score'] + metrics[\n                               'false_positive_score']],\n    'Total': [len(roc.negative_class_predictions),\n              len(roc.positive_class_predictions),\n              len(roc.negative_class_predictions) + len(\n                  roc.positive_class_predictions)]})\nroc_df.index = pd.MultiIndex.from_tuples([\n    ('Actual', '-'), ('Actual', '+'), ('Total', '')])\nroc_df.columns = pd.MultiIndex.from_tuples([\n    ('Predicted', '-'), ('Predicted', '+'), ('Total', '')])\nroc_df.style.set_properties(**{'text-align': 'right'})\nroc_df","e197c34d":"plt.rcParams.update({'font.size': 10}) \n\nfeature_impacts = best_model.get_or_request_feature_impact()\n\n\npercent_tick_fmt = mtick.PercentFormatter(xmax=1.0)\n\nimpact_df = pd.DataFrame(feature_impacts)\nimpact_df.sort_values(by='impactNormalized', ascending=True, inplace=True)\n\n# Positive values are blue, negative are red\nbar_colors = impact_df.impactNormalized.apply(lambda x: dr_red if x < 0 else dr_blue)\n\nax = impact_df.plot.barh(x='featureName', y='impactNormalized',\n                         legend=False,\n                         color=bar_colors,\n                         figsize=(10, 14))\nax.xaxis.set_major_formatter(percent_tick_fmt)\nax.xaxis.set_tick_params(labeltop=True)\nax.xaxis.grid(True, alpha=0.2)\nax.set_facecolor(dr_dark_blue)\n\nplt.ylabel('')\nplt.xlabel('Effect')\nplt.xlim((None, 1))  # Allow for negative impact\nplt.title('Feature Impact', y=1.04);\n","2dc9be69":"dr_roc_green = '#03c75f'\nwhite = '#ffffff'\ndr_purple = '#65147D'\ndr_dense_green = '#018f4f'\nimport seaborn as sns\nsns.set_style(\"whitegrid\", {'axes.grid': False})\n\nfig = plt.figure(figsize=(8, 8))\naxes = fig.add_subplot(1, 1, 1, facecolor=dr_dark_blue)\n\nshared_params = {'shade': True, 'clip': (0, 1), 'bw': 0.2}\nsns.kdeplot(np.array(roc.negative_class_predictions),\n            color=dr_purple, **shared_params)\nsns.kdeplot(np.array(roc.positive_class_predictions),\n            color=dr_dense_green, **shared_params)\n\nplt.title('Prediction Distribution')\nplt.xlabel('Probability of Event')\nplt.xlim([0, 1])\nplt.ylabel('Probability Density');","d6df9ba0":"## Confusion Matrix","e133d450":"# Diagnosis of COVID-19 and its clinical spectrum\n_______\n\nExploratory Analysis and Model Setup to perform TASK 1<br>\nAIOPS-TIVIT <br>\n01\/April\/2020\n03\/April\/2020","b3fc2a7c":"## Build DataFrame with best max f1 score, max acc and lowest false negatives of tested models","65044fcd":"## Feature Impact","88a385f9":"## Model Parameters","0a69382e":"# Checking for populated fields","cd114591":"# Removing features with more than 90 missing values.","e6a7861a":"# Removing fields","b9b2a7e7":"### Here we can see that only 5 features has 70% pof valid data, 17 features has almost 20% rows but the most part of the dataset, 89 features, is populated with only 10% of valid data. "}}