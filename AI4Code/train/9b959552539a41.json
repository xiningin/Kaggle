{"cell_type":{"15fd68c2":"code","8202a1d8":"code","6ea607b6":"code","34a6e41c":"code","cd1cc1c6":"code","754e225d":"code","e971fd4a":"code","50bfc536":"code","a49c4337":"code","2e606318":"code","f9d37f7d":"code","3e8ac3d8":"code","b9768be1":"code","649e76ff":"code","c54c3b7f":"code","45a412fe":"code","067097fc":"code","5acb6d16":"code","28250cdc":"code","b202fbea":"code","033b805f":"code","4675838a":"code","f75fb37d":"code","8f419ff3":"code","d137c3ba":"code","3de8551f":"code","1416a4ba":"code","731afee2":"code","7b394d50":"code","3b512da6":"code","1891a6ec":"code","ba733a83":"code","2fb79f05":"code","26e81ac2":"code","a8841d8c":"code","f219f265":"code","ed7df59a":"code","b967eef2":"code","86f7b225":"code","ff67f1b6":"code","3aa0c024":"code","e1a5d8a0":"code","9f190c98":"code","c809a95b":"code","2a42001a":"code","2253b9f3":"code","27ebbd4a":"code","8eee7ef3":"code","4be2ca95":"code","9e193602":"code","d8741e7a":"code","9ffa20d5":"code","3b7b669f":"code","56cf46f2":"code","74f1a8ec":"code","4b2cb067":"code","30b1d7e4":"code","b816a21d":"code","0f3c8dc3":"code","66fc8f4e":"code","5382e5a2":"code","0ced04c3":"code","132b4366":"code","de4cc046":"code","203f07af":"code","9330002e":"code","e563dc88":"code","9068bad4":"code","15f971cb":"code","8b3c7dc8":"code","6befc4e3":"code","01227c6b":"code","b01083da":"code","518d7564":"code","2392602a":"code","53030edd":"code","36675509":"code","55ecf78f":"code","5f322024":"code","4bae15b4":"code","87c90aa1":"code","d89f2fb4":"markdown","3f1ab9c3":"markdown","97b074cf":"markdown","86f0750d":"markdown","d504ad47":"markdown"},"source":{"15fd68c2":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","8202a1d8":"items = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nitems_cat = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\ntrain = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nshops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')","6ea607b6":"train.head()","34a6e41c":"df_items = pd.merge(left = items,right=items_cat,on = 'item_category_id')","cd1cc1c6":"df_shops = pd.merge(left = train,right=shops,on = 'shop_id')","754e225d":"df = pd.merge(left = df_shops , right = df_items,on = 'item_id')","e971fd4a":"df.head()","50bfc536":"df.shape","a49c4337":"df.nunique()","2e606318":"df.info()","f9d37f7d":"df.describe()","3e8ac3d8":"df.describe(include = 'object')","b9768be1":"df.columns","649e76ff":"df1=df.drop(['shop_id','item_id','item_category_id'],axis=1)","c54c3b7f":"df1['date'] = pd.to_datetime(df1['date'],dayfirst=True ,format = '%d.%m.%Y')","45a412fe":"df1['year'] = df1['date'].dt.year\ndf1['month'] = df1['date'].dt.month","067097fc":"df1.head()","5acb6d16":"df1['year'].value_counts().plot(kind = 'bar')","28250cdc":"df1['month'].value_counts().plot(kind = 'bar')","b202fbea":"#As we extracted year and month we don't need  date column any more\ndf_new = df1.drop('date',axis=1)","033b805f":"df_new['year'] = df_new['year'].replace({2013:1,2014:2,2015:3})","4675838a":"df_new['year'] = df_new['year'].astype('object')","f75fb37d":"df_new['month'] =  df_new['month'].astype('object')","8f419ff3":"df_new.columns","d137c3ba":"features = df_new[['date_block_num','item_price','item_cnt_day','year','month']]","3de8551f":"for i in features.columns:\n    for j in features.columns:\n        if i != j:\n            sns.scatterplot(x = df_new[i],y = df_new[j])\n            plt.show()","1416a4ba":"df_new.isnull().sum()","731afee2":"for i in df_new.select_dtypes(include = 'number').columns:\n    sns.boxplot(df_new[i])\n    plt.show()","7b394d50":"#treating outliers \nfor i in df_new.select_dtypes(include = 'number').columns:\n    if i != 'item_cnt_day':\n        q1 = df_new[i].quantile(0.25)\n        q3 = df_new[i].quantile(0.75)\n        iqr = q3-q1\n        ll = q1-(1.5*iqr)\n        ul = q3+(1.5*iqr)\n        df_new[i] = df_new[(df_new[i]>ll)&(df_new[i]<ul)][i]\n","3b512da6":"df_new.isnull().sum()","1891a6ec":"df_new['item_price'].skew()","ba733a83":"df_new['item_price'] = df_new['item_price'].fillna(df_new['item_price'].median())","2fb79f05":"df_new['year'] = df_new['year'].astype('int64')","26e81ac2":"df_new['month'] =  df_new['month'].astype('int64')","a8841d8c":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","f219f265":"for i in df_new.select_dtypes('object').columns:\n    df_new[i] = le.fit_transform(df_new[i])","ed7df59a":"df_new.head()","b967eef2":"df_new.head()","86f7b225":"df_new.info()","ff67f1b6":"x = df_new.drop('item_cnt_day',axis=1)\ny = np.log(df_new['item_cnt_day'])\ny = y.fillna(y.median())","3aa0c024":"import statsmodels.api as sm\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.feature_selection import RFE","e1a5d8a0":"xc = sm.add_constant(x)\nmodel = sm.OLS(y,xc).fit()\nprint(model.summary())","9f190c98":"xtrain,xtest,ytrain,ytest = train_test_split(x,y,train_size=0.7,random_state=7)","c809a95b":"lr = LinearRegression()\nmodel_v1 = lr.fit(xtrain,ytrain)\nypred = model_v1.predict(xtest)","2a42001a":"lr_scores = cross_val_score(estimator = lr,X=x,y=y,scoring = 'neg_root_mean_squared_error',cv = 5)\nlr_rmse = np.mean(lr_scores)\nprint('RMSE = ',lr_rmse)\nprint(np.std(lr_scores))","2253b9f3":"rf = RFE(estimator = lr,n_features_to_select=5)\nrf.fit(x,y)","27ebbd4a":"rfe_df = pd.DataFrame({'features':x.columns,'ranking':rf.ranking_})","8eee7ef3":"rfe_df","4be2ca95":"# as item_price and item_name is not important we are going to drop it\nx = x.drop(['item_price','item_name'],axis=1)\n","9e193602":"# We can do OLS again\nxc = sm.add_constant(x)\nmodel = sm.OLS(y,xc).fit()\nmodel.summary()","d8741e7a":"xtrain,xtest,ytrain,ytest = train_test_split(x,y,train_size=0.7,random_state=7)","9ffa20d5":"model_v2 = lr.fit(xtrain,ytrain)\nypred_lr = model_v2.predict(xtest)","3b7b669f":"lr_scores = cross_val_score(estimator = lr,X=x,y=y,scoring = 'neg_root_mean_squared_error',cv = 5)\nlr_rmse = np.mean(lr_scores)\nprint('RMSE = ',lr_rmse)\nprint(np.std(lr_scores))","56cf46f2":"#RMSE and stability improved a little bit","74f1a8ec":"resid = pd.DataFrame({'Predicted' : ypred , 'Actuals':ytest,'Residual':ypred-ytest})","4b2cb067":"plt.scatter(resid['Predicted'],resid['Residual'])\nplt.grid()","30b1d7e4":"# most of the predictions have an error rate between 0 to -6","b816a21d":"rid = Ridge()\nmodel_v3 = rid.fit(xtrain,ytrain)\nypred_rid = model_v3.predict(xtest)","0f3c8dc3":"rid_scores = cross_val_score(estimator = rid,X=x,y=y,scoring = 'neg_root_mean_squared_error',cv = 5)\nrid_rmse = np.mean(rid_scores)\nprint('RMSE = ',rid_rmse)\nprint(np.std(rid_scores))","66fc8f4e":"# RMSE is not much different compared to Linear Regression","5382e5a2":"resid = pd.DataFrame({'Predicted' : ypred_rid , 'Actuals':ytest,'Residual':ypred_rid-ytest})\nplt.scatter(resid['Predicted'],resid['Residual'])\nplt.grid()","0ced04c3":"# even with feature selection there is not much of an improvement","132b4366":"# Let's move to non-linear models\nx = df_new.drop('item_cnt_day',axis=1)\ny = np.log(df_new['item_cnt_day'])\ny = y.fillna(y.median())\n","de4cc046":"xtrain,xtest,ytrain,ytest = train_test_split(x,y,train_size=0.7,random_state=7)","203f07af":"knn = KNeighborsRegressor()\nmodel_v4 = knn.fit(xtrain,ytrain)\nypred_knn = model_v4.predict(xtest)","9330002e":"knn_scores = cross_val_score(estimator = knn,X=x,y=y,scoring = 'neg_root_mean_squared_error',cv = 5)\nknn_rmse = np.mean(knn_scores)\nprint('RMSE = ',knn_rmse)\nprint(np.std(knn_scores))","e563dc88":"# error is increased and stability stability is reduced","9068bad4":"resid = pd.DataFrame({'Predicted' : ypred_knn , 'Actuals':ytest,'Residual':ypred_knn-ytest})\nplt.scatter(resid['Predicted'],resid['Residual'])\nplt.grid()","15f971cb":"dt = DecisionTreeRegressor()\nmodel_v5 = dt.fit(xtrain,ytrain)\nypred_dt = model_v5.predict(xtest)","8b3c7dc8":"dt_scores = cross_val_score(estimator = dt,X=x,y=y,scoring = 'neg_root_mean_squared_error',cv = 5)\ndt_rmse = np.mean(dt_scores)\nprint('RMSE = ',dt_rmse)\nprint(np.std(dt_scores))","6befc4e3":"# here both error rate and stability is depleted","01227c6b":"resid = pd.DataFrame({'Predicted' : ypred_dt , 'Actuals':ytest,'Residual':ypred_dt-ytest})\nplt.scatter(resid['Predicted'],resid['Residual'])\nplt.grid()","b01083da":"gb = GradientBoostingRegressor()\nmodel_v6 = gb.fit(xtrain,ytrain)\nypred_gb = model_v6.predict(xtest)","518d7564":"gb_scores = cross_val_score(estimator = gb,X=x,y=y,scoring = 'neg_root_mean_squared_error',cv = 5)\ngb_rmse = np.mean(gb_scores)\nprint('RMSE = ',gb_rmse)\nprint(np.std(gb_scores))","2392602a":"resid = pd.DataFrame({'Predicted' : ypred_gb , 'Actuals':ytest,'Residual':ypred_gb-ytest})\nplt.scatter(resid['Predicted'],resid['Residual'])\nplt.grid()","53030edd":"xgb = XGBRegressor()\nmodel_v7 = xgb.fit(xtrain,ytrain)\nypred_xgb = model_v7.predict(xtest)","36675509":"xgb_scores = cross_val_score(estimator = xgb,X=x,y=y,scoring = 'neg_root_mean_squared_error',cv = 5)\nxgb_rmse = np.mean(xgb_scores)\nprint('RMSE = ',xgb_rmse)\nprint(np.std(xgb_scores))","55ecf78f":"resid = pd.DataFrame({'Predicted' : ypred_xgb , 'Actuals':ytest,'Residual':ypred_xgb-ytest})\nplt.scatter(resid['Predicted'],resid['Residual'])\nplt.grid()","5f322024":"scores_df = pd.DataFrame({'Models':['Linear Regression','Ridge','KNN','Decision Tree','Gradient Boosting','XG Boosting'],\n                         'Scores_RMSE' : [lr_rmse,rid_rmse,knn_rmse,dt_rmse,gb_rmse,xgb_rmse]})","4bae15b4":"scores_df.sort_values('Scores_RMSE',ascending=False)","87c90aa1":"# Xg Boost is the best predictor out of all","d89f2fb4":"# Data cleaning and EDA","3f1ab9c3":"# Understanding the data","97b074cf":"# Merging data into one piece","86f0750d":"# Converting the data into dependent and independent features","d504ad47":"# Model Building"}}