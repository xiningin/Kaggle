{"cell_type":{"82b599c0":"code","c9250c43":"code","78cf7c0f":"code","2f54c47e":"code","bf3aafce":"code","c25d2d2c":"code","019217a7":"code","a95c855c":"code","a7eab610":"code","dff95088":"code","bcd58f70":"code","fc8dae37":"code","55a4ba08":"code","7606e898":"code","bf87b9e6":"code","5a6bdc67":"code","9238cbb7":"code","c2f3e68c":"code","c854db2f":"code","3f407856":"code","da1fe550":"code","d9343559":"code","b767dce8":"code","2891ab29":"code","ce980585":"code","140c3640":"code","a03f6897":"code","bc530b6d":"code","3ee19852":"code","187d017c":"code","4fed805a":"code","3f77e0a5":"code","867c1914":"code","073f17f3":"code","49299b85":"code","e4b672c5":"code","9a7e2075":"code","ad5e921a":"code","5111905a":"code","01bf34c9":"code","70db6930":"code","72f4c96a":"code","d0b3b6fd":"code","eb0b406d":"code","5b0bf968":"code","4d7b4d9b":"code","03d596a0":"code","ba9d1164":"code","5e11d43c":"markdown","49d9f658":"markdown","558ce5ce":"markdown","d642b254":"markdown","f97a1372":"markdown","d3951ad8":"markdown","b5f757eb":"markdown","05f8f8c2":"markdown","aa8062bb":"markdown","a21cd5c3":"markdown","d63a30aa":"markdown","92ebf695":"markdown","1fa4c078":"markdown","1c1cf42b":"markdown","0738d49b":"markdown"},"source":{"82b599c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9250c43":"df_train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","78cf7c0f":"df_train.head()","2f54c47e":"df_train.info()","bf3aafce":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c25d2d2c":"print(df_train['Survived'].unique())\nprint(df_train['Pclass'].unique())\nprint(df_train['Embarked'].unique())\nprint(df_train['SibSp'].unique())","019217a7":"sns.barplot(x='Pclass',y=\"Survived\",data=df_train)","a95c855c":"sns.barplot(x='Pclass',y=\"Survived\",data=df_train,hue=\"Sex\")","a7eab610":"sns.barplot(x='Pclass',y=\"Survived\",data=df_train,palette=\"Blues_d\")","dff95088":"sns.barplot(x='Pclass',y=\"Survived\",data=df_train,color='salmon',saturation=0.9)","bcd58f70":"sns.barplot(x='Pclass',y=\"Survived\",data=df_train,capsize=0.5)","fc8dae37":"sns.catplot(x='Pclass',y='Survived',col='Sex',kind='bar',data=df_train)","55a4ba08":"sns.catplot(x='Pclass',y='Survived',col='Sex',hue='Embarked',kind='bar',data=df_train)","7606e898":"sns.pairplot(df_train)","bf87b9e6":"grid=sns.FacetGrid(df_train,col='Survived')\ngrid.map(plt.hist,'Age',bins=20)\ngrid.add_legend()","5a6bdc67":"grid=sns.FacetGrid(df_train,row='Survived',col='Pclass')\ngrid.map(plt.hist,\"Age\",bins=20)","9238cbb7":"grid=sns.FacetGrid(df_train,col='Embarked')\ngrid.map(sns.pointplot,'Pclass','Survived','Sex')\ngrid.add_legend()","c2f3e68c":"grid=sns.FacetGrid(df_train,col=\"Survived\",row='Embarked')\ngrid.map(sns.barplot,'Fare','Sex')\ngrid.add_legend()","c854db2f":"grid=sns.FacetGrid(df_train,col=\"Survived\",row='Pclass')\ngrid.map(sns.barplot,'Fare','Sex')\ngrid.add_legend()","3f407856":"grid=sns.FacetGrid(df_train,row='Embarked',col='Survived')\ngrid.map(sns.barplot,\"Sex\",\"Fare\")","da1fe550":"df_train.corr()","d9343559":"df_train.head()","b767dce8":"sns.heatmap(df_train.corr())","2891ab29":"print(df_train.isnull().sum()\/df_train.shape[0]*100)","ce980585":"print(df_test.isnull().sum()\/df_train.shape[0]*100)","140c3640":"df_train=df_train.drop(['Cabin'],axis=1)\ndf_test=df_test.drop(['Cabin'],axis=1)","a03f6897":"df_train=df_train.drop(['Name','Ticket'],axis=1)\ndf_test=df_test.drop(['Name','Ticket'],axis=1)","bc530b6d":"print(df_train.shape)\nprint(df_test.shape)","3ee19852":"df_train=df_train.drop(['PassengerId'],axis=1)","187d017c":"df_train.head()","4fed805a":"df_train['Sex']=df_train['Sex'].map({\"female\":1,'male':0})\ndf_test['Sex']=df_test['Sex'].map({\"female\":1,'male':0})","3f77e0a5":"df_train['Embarked']=df_train['Embarked'].map({'Q':0,'S':1,'C':2})\ndf_test['Embarked']=df_test['Embarked'].map({'Q':0,'S':1,'C':2})","867c1914":"print(df_train.isnull().sum())\nprint('--------',)\nprint(df_test.isnull().sum())","073f17f3":"df_train_copy=df_train.copy()\ndf_test_copy=df_test.copy()","49299b85":"df_train_copy['Age']=df_train_copy['Age'].fillna(method='ffill')\ndf_train_copy['Embarked']=df_train_copy['Embarked'].fillna(method='ffill')","e4b672c5":"df_test_copy['Age']=df_test_copy['Age'].fillna(method='ffill')\ndf_test_copy['Fare']=df_test_copy['Fare'].fillna(method='ffill')","9a7e2075":"df_train_copy.head()","ad5e921a":"df_test_copy.head()","5111905a":"X_train=df_train_copy.drop('Survived',axis=1)\nY_train=df_train_copy['Survived']\nX_test=df_test_copy.drop('PassengerId',axis=1).copy()","01bf34c9":"print(X_train.shape,Y_train.shape,X_test.shape)","70db6930":"from sklearn.linear_model import LogisticRegression\nlog_model=LogisticRegression()\nlog_model.fit(X_train,Y_train)\npredictions=log_model.predict(X_test)","72f4c96a":"log_model.score(X_train,Y_train)","d0b3b6fd":"from sklearn.tree import DecisionTreeClassifier\nmodel_des=DecisionTreeClassifier()\nmodel_des.fit(X_train,Y_train)\nmodel_des.predict(X_test)","eb0b406d":"model_des.score(X_train,Y_train)","5b0bf968":"from sklearn.ensemble import RandomForestClassifier\nmodel_rand=RandomForestClassifier()\nmodel_rand.fit(X_train,Y_train)\ny_pred=model_rand.predict(X_test)\ny_pred","4d7b4d9b":"model_rand.score(X_train,Y_train)","03d596a0":"my_submission=pd.DataFrame({'PassengerId':df_test_copy['PassengerId'],'Survived':y_pred})","ba9d1164":"my_submission.to_csv('submission.csv', index=False)","5e11d43c":"We have to convert Sex and Embarked value in numeric so we could pass it on the model.","49d9f658":"Numeric feature Age","558ce5ce":"DIfferent columns have different unique values. But you can see Embraked features has NAN value which we will remove after some time. ","d642b254":"Cabin column has most of null values which is about 77%. while Age and Embarked have 20 and 0.2 percente missing values respectively.","f97a1372":"We will drop Name and Ticket columns.","d3951ad8":"As like train data Cabin has 36 percent missing values. Whereas Age has 9 percent missing values. \n\nThat's why we will drop Cabin Columns.","b5f757eb":"# Lets play with parameter of barplot to show different kind of charts.","05f8f8c2":"Dataset have 11 columns in which you can find \"Passenger ID\", \"Name\",\"Age\",\"Ticket\" and \"Fare\" have countinuos value. while other columns have categorical value. How many categories are there we will find it by UNIQUE operations.","aa8062bb":"Numerical Feature Age and Ordinal Feature Pclass","a21cd5c3":"# Feature Checking and selection","d63a30aa":"# SEX MALE\n* As you can see pclass 1 and 2 have not the Embraked type Q which is green colour.\n* Embarked Type C is higher as compared to S Type\n\n\n# SEX FEMALE\n* As we have seen in previous Survived rate is higher in Female so our graph rate is much higher as compare to male. \n* Pclass 1 has almost similar value in all embarked types.\n* Pclass 3 has less value in which Embarked Type Q has Higher value.","92ebf695":"Heatmap only works on categorical features","1fa4c078":"# **EXPLORATARY DATA ANALYSIS**","1c1cf42b":"As we havent drop passenegr Id that why it will show different column.\n\nSo we will drop passenger id as it is not useful for classification","0738d49b":"# model prediction"}}