{"cell_type":{"e4d149eb":"code","3618bc2c":"code","7d3bc39f":"code","fed5831f":"code","99b5889c":"code","6c09b3aa":"code","97bcfcd8":"code","829d3e4a":"code","48c3632f":"code","d5813525":"markdown"},"source":{"e4d149eb":"\nimport matplotlib.pyplot as plt\nimport random\nimport time\nimport os\n\nimport numpy as np\nfrom sklearn.pipeline import make_pipeline\n# Binary Relevanceer\n\n# Performance metric\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.metrics import hamming_loss\nfrom sklearn.metrics import label_ranking_average_precision_score\nfrom sklearn.metrics import multilabel_confusion_matrix\nfrom sklearn.metrics import classification_report\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n\nfrom sklearn.model_selection import cross_val_score","3618bc2c":"ACTIONS = [\"kiri\", \"maju\",\"idle\",\"kanan\"]\nreshape = (-1,8, 60)\n","7d3bc39f":"def create_data(starting_dir=\"..\/input\/eeg8chanel\/data8\"):\n    training_data = {}\n    for action in ACTIONS:\n        if action not in training_data:\n            training_data[action] = []\n        data_dir = os.path.join(starting_dir,action)\n        for item in os.listdir(data_dir):\n            data = np.load(os.path.join(data_dir, item))\n            for item in data:\n                training_data[action].append(item)\n\n    lengths = [len(training_data[action]) for action in ACTIONS]\n    print(lengths)\n\n    for action in ACTIONS:\n        np.random.shuffle(training_data[action])  \n        training_data[action] = training_data[action][:min(lengths)]\n\n    lengths = [len(training_data[action]) for action in ACTIONS]\n    print(lengths)\n    combined_data = []\n    for action in ACTIONS:\n        for data in training_data[action]:\n            if action == \"kiri\":\n                combined_data.append([data, [1, 0, 0,0]])\n            elif action == \"maju\":\n                combined_data.append([data, [0, 1, 0, 0]])\n            elif action == \"idle\":\n                combined_data.append([data, [0, 0, 1, 0]])\n            elif action == \"kanan\":\n                combined_data.append([data, [0, 0, 0, 1]])\n\n    np.random.shuffle(combined_data)\n    print(\"length:\",len(combined_data))\n    return combined_data\n","fed5831f":"print(\"creating training data\")\ntraindata = create_data(starting_dir=\"..\/input\/eeg8chanel\/data8\")\ntrain_X = []\ntrain_y = []\n\nfor X, y in traindata:\n    train_X.append(X)\n    train_y.append(y)\n    \n\n","99b5889c":"train_X = np.array(train_X).reshape(1000,480)\ntrain_y = np.array(train_y)\ntrain_X.shape,train_y.shape\n","6c09b3aa":"x_train,x_test,y_train,y_test=train_test_split(train_X,train_y,test_size=0.2 )\nx_train.shape,y_train.shape, x_test.shape , y_test.shape","97bcfcd8":"#predictions = model.predict_classes(x_train, batch_size=32, verbose=1)\ny_tn=np.argmax(y_train, axis=1)\ny_tt=np.argmax(y_test, axis=1)\n#predictions[1]\ny_tn[1],y_tt[1]","829d3e4a":"from sklearn import linear_model, datasets, metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import BernoulliRBM\nfrom sklearn.pipeline import Pipeline","48c3632f":"logistic = linear_model.LogisticRegression(solver='newton-cg', tol=1)\nrbm = BernoulliRBM(random_state=0, verbose=True)\n\nrbm_features_classifier = Pipeline(\n    steps=[('rbm', rbm), ('logistic', logistic)])\n\nrbm.learning_rate = 0.001\nrbm.n_iter = 10\n\nrbm.n_components = 1000\nlogistic.C = 6000\n\n# Training RBM-Logistic Pipeline\nrbm_features_classifier.fit(x_train,y_tn)\nY_pred = rbm_features_classifier.predict(x_test)\nprint(\"Logistic regression using RBM features:\\n%s\\n\" % (metrics.classification_report(y_tt, Y_pred)))\n","d5813525":"# DATA"}}