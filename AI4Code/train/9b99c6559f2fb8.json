{"cell_type":{"ab05046a":"code","ed5c9880":"code","8727cca7":"code","33360e67":"code","c27d5174":"code","21192f56":"code","85ba3977":"code","f4009297":"code","20082b69":"code","c59b3a48":"code","42e482a6":"code","b7fb2500":"code","eeb348c8":"code","2f09fc6f":"code","2e65ea71":"code","cd208d1d":"code","810beb3e":"code","3aa08ae8":"code","5f79a3c0":"code","be94ea69":"code","ff063a67":"code","8a666f18":"code","8bda17c5":"code","acdb4e9f":"code","d22787d1":"code","ec769b49":"code","27529e3e":"code","a819d284":"code","0005d10e":"code","f3454eb9":"code","40a5b58e":"code","87222fce":"code","2e401ff8":"code","6f798f15":"code","c73dce78":"code","9f6ba976":"code","4d435748":"code","cb44afa2":"code","bccf0682":"code","010e7bb3":"code","d44f3a2b":"markdown","4b7f0a07":"markdown","7f0bec8c":"markdown","8f2f2caf":"markdown","2e7ef3e2":"markdown","4674c193":"markdown","16b44713":"markdown","6b9017db":"markdown","1d5d25d1":"markdown","6729ea79":"markdown","af2ef1cc":"markdown","7328b6d7":"markdown","aa323595":"markdown","d78e20ef":"markdown","db65c284":"markdown","1da14d90":"markdown","41a5e7fd":"markdown","24d44c25":"markdown","e94f6308":"markdown","7ac7e80a":"markdown","a8d4a00b":"markdown","7627a490":"markdown","5aafe37f":"markdown","2c30e06a":"markdown","7ea64ded":"markdown","62ed3a9a":"markdown","cc0aa24f":"markdown","387a07cc":"markdown","9e94629f":"markdown","1a96715f":"markdown","5ab8e807":"markdown","d0c68809":"markdown","dfeee636":"markdown","a98ec23c":"markdown","fe5137c9":"markdown","8db4cdbe":"markdown","6230b084":"markdown"},"source":{"ab05046a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.metrics import accuracy_score, roc_auc_score, recall_score, make_scorer\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nraw_data = pd.read_excel('\/kaggle\/input\/covid19\/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx')","ed5c9880":"demo_lst = [i for i in raw_data.columns if \"AGE_\" in i]\ndemo_lst.append(\"GENDER\")\nvitalSigns_lst = raw_data.iloc[:,193:-2].columns.tolist()\n\nraw_data = raw_data[['PATIENT_VISIT_IDENTIFIER']+demo_lst+vitalSigns_lst+['WINDOW','ICU']]","8727cca7":"raw_data.head(5)","33360e67":"df_ICU_list = raw_data.groupby(\"PATIENT_VISIT_IDENTIFIER\").agg({\"ICU\":(list)})\nraw_data['ICU_list'] = raw_data.apply(lambda row: df_ICU_list.loc[row['PATIENT_VISIT_IDENTIFIER']]['ICU'], axis=1)\nraw_data['VALID_WINDOW'] = raw_data.apply(lambda row: row['ICU_list'].index(1)-1 if 1 in row['ICU_list'] else 4, axis=1)\nfor index, row in raw_data.iterrows():\n    if index%5 > row['VALID_WINDOW']:\n        raw_data.loc[index, vitalSigns_lst] = np.nan","c27d5174":"(raw_data[raw_data.isnull().any(axis=1)].isna().sum() \/ len(raw_data)).mean()","21192f56":"def agg_function(column):\n    if column.name in demo_lst: return min(column)\n    elif column.name in vitalSigns_lst: return list(column.dropna())[0] if len(column.dropna()) > 0 else np.nan\n    elif column.name == 'ICU': return max(column)\n    else: return column\n        \nagg_data = raw_data.groupby(\"PATIENT_VISIT_IDENTIFIER\", as_index=False).agg(agg_function)","85ba3977":"(agg_data[agg_data.isnull().any(axis=1)].isna().sum() \/ len(agg_data)).max()","f4009297":"agg_data.dropna(inplace=True)","20082b69":"agg_data.dtypes[:10]","c59b3a48":"agg_data['AGE_PERCENTIL'] = agg_data['AGE_PERCENTIL'].apply(lambda row: 9 if row[0] == 'A' else int(row[0]) )","42e482a6":"data = agg_data.copy(deep=True)","b7fb2500":"low_variances = data.var()\nlow_variances = low_variances.loc[low_variances < 0.01]\nlow_variances.sort_values()","eeb348c8":"data.shape","2f09fc6f":"model_data = data.drop(low_variances.index, axis=1)","2e65ea71":"model_data.shape","cd208d1d":"width=8\nheight=6\nfig = plt.figure(figsize=(width,height))\nsns.heatmap(model_data.iloc[:, 1:-1].corr(), cmap='bwr')","810beb3e":"corr_values = model_data.iloc[:, 1:-1].corr(method='pearson').abs()\ncorrdf = corr_values.unstack().sort_values(ascending=False).to_frame()\ncorrdf.reset_index(inplace=True)\ncorrdf.columns=['Feature 1', 'Feature 2', 'Pearsons R']\ncorrdf['SAME_FEAT'] = corrdf.apply(lambda row: 1 if row['Feature 1'] == row['Feature 2'] else 0, axis=1)\ncorrdf = corrdf.loc[corrdf['SAME_FEAT'] == 0]\ncorrdf.drop('SAME_FEAT', axis=1, inplace=True)\nmulticol_df = corrdf[corrdf['Pearsons R'] > 0.8].iloc[::2]\nmulticol_df['Feat1 Target Corr'] = multicol_df.apply(lambda row: model_data.corr().abs()['ICU'][row['Feature 1']], axis=1)\nmulticol_df['Feat2 Target Corr'] = multicol_df.apply(lambda row: model_data.corr().abs()['ICU'][row['Feature 2']], axis=1)\nmulticol_df.reset_index(drop=True, inplace=True)\nmulticol_df","3aa08ae8":"multicol_columns_to_drop = multicol_df.apply(lambda x: x['Feature 1'] if x['Feat1 Target Corr'] < x['Feat2 Target Corr'] else x['Feature 2'], axis=1).unique()\nmulticol_columns_to_drop","5f79a3c0":"model_data.drop(multicol_columns_to_drop, axis=1, inplace=True)","be94ea69":"width=8\nheight=6\nfig = plt.figure(figsize=(width,height))\nsns.heatmap(model_data.iloc[:, 1:-1].corr(), cmap='bwr')","ff063a67":"model_data.columns","8a666f18":"tnr = make_scorer(recall_score,pos_label=0)","8bda17c5":"X = model_data.iloc[:,1:-1]\ny = model_data['ICU']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=17)","acdb4e9f":"X_train.shape","d22787d1":"clf = RandomForestClassifier(max_depth=5, random_state=42)\nclf.fit(X_train, y_train)\nprint('True Negative Rate: ', tnr(clf, X_test, y_test))","ec769b49":"importance = pd.DataFrame(clf.feature_importances_, index=X.columns, columns=[\"Importance\"])\nimportance.sort_values(by='Importance').plot(kind='barh');","27529e3e":"model_data_fe = model_data.copy(deep=True)","a819d284":"model_data_fe['SpO2_DIFF'] = (data['OXYGEN_SATURATION_MAX'] - data['OXYGEN_SATURATION_MIN'])\nmodel_data_fe['SpO2_MEAN'] = (data['OXYGEN_SATURATION_MAX'] + data['OXYGEN_SATURATION_MIN'])\/2","0005d10e":"scaler = MinMaxScaler((1,3))\nBPSMean = scaler.fit_transform(data['BLOODPRESSURE_SISTOLIC_MEAN'].to_numpy().reshape(-1,1))\nBPDMean = scaler.fit_transform(data['BLOODPRESSURE_DIASTOLIC_MEAN'].to_numpy().reshape(-1,1))\nPAMMean = ((BPDMean*2) \/ BPSMean)\/3\nmodel_data_fe['PAM_MEAN'] = PAMMean\nmodel_data_fe['PULSE_PRESSURE'] = BPSMean - BPDMean","f3454eb9":"X = model_data_fe.iloc[:,1:].drop(['ICU'], axis=1)\ny = model_data_fe['ICU']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=17)","40a5b58e":"X_train.shape","87222fce":"clf = RandomForestClassifier(max_depth=5, random_state=42)\nclf.fit(X_train, y_train)\nprint('True Negative Rate: ', tnr(clf, X_test, y_test))\n","2e401ff8":"importance = pd.DataFrame(clf.feature_importances_, index=X.columns, columns=[\"Importance\"])\nimportance.sort_values(by='Importance').plot(kind='barh');","6f798f15":"X_train.shape","c73dce78":"param_grid = { \n    'n_estimators': [100, 500, 1000, 2000],\n    'max_features' : [3, 4, 6, 8],\n    'max_leaf_nodes' : [2, 5, 10],\n    'criterion' :['gini', 'entropy'],\n}","9f6ba976":"gs_rfc = GridSearchCV(\n    estimator=RandomForestClassifier(random_state=42), \n    param_grid=param_grid, \n    cv=5, \n    scoring=tnr)\ngs_rfc.fit(X_train, y_train)","4d435748":"gs_rfc.best_params_","cb44afa2":"final_clf = RandomForestClassifier(**gs_rfc.best_params_)\nfinal_clf.fit(X_train, y_train)","bccf0682":"importance = pd.DataFrame(final_clf.feature_importances_, index=X.columns, columns=[\"Importance\"])\nimportance.sort_values(by='Importance').plot(kind='barh');","010e7bb3":"def score(pred, real):\n    accuracy  = accuracy_score(pred, real)\n    roc_auc   = roc_auc_score(pred, real)\n    recall    = recall_score(pred, real)\n    specificity = tnr(final_clf, X_test, y_test)\n    return pd.DataFrame.from_dict(\n        {'True Negative Rate': specificity, 'Accuracy': accuracy, 'ROC_AUC': roc_auc, 'Recall': recall},\n        orient='index',\n        columns=['Score']\n    )\n\nscore(final_clf.predict(X_test), y_test)","d44f3a2b":"## 3. Data exploration and preprocessing","4b7f0a07":"As stated, for this analysis, only demographic and vital signs columns will be used as features. Let's select them.","7f0bec8c":"Frontline health workers in any setting need to define as soon and as safely as possible which COVID-19 patients won't need ICU admission.\n\nThis would allow them to take better decisions like safely discharging, reducing hospital overcrowding and other undesired outcomes.\n\nThis is a submission for task no. 2.","8f2f2caf":"## Random Forest to predict NOT admitted to ICU","2e7ef3e2":"### 6. Conclusions","4674c193":"Now we have added 4 new features to our model, let's check how it performs","16b44713":"To predict which COVID-19 patients won't be addmitted to the ICU using only demographics and vital signs from early windows.","6b9017db":"Checking predictors with variance < 0.01:","1d5d25d1":"Thus, let's group the data by patient using the following rules:\n1. For vital signs columns, use data from Window '0-2'. If not available, fill with data from the earliest valid window.\n2. For demographic columns, use data avilable from Window '0-2'.\n3. For the target variable column 'ICU', we'll attribute 1 if the patient was aditted to the ICU in any window. ","6729ea79":"According to the dataset authors in the data description, the data present in rows where ICU = 1 is unreliable because it is unknown if it was obtained before or after the outcome we are predicting, so, let's transform that to NaNs: ","af2ef1cc":"#### <font color='#777'>Zero or Near-zero variances","7328b6d7":"#### 3.2 Missing Data","aa323595":"Since our aim is to predict which patients will NOT be admitted to the ICU, or ICU = 0, the most important metric to evaluate the models is the <b>Specificity<\/b> or <b>True Negative Rate<\/b>. Let's create a scorer for that.","d78e20ef":"The final model is relatively simple, containing only 12 features, but good at predicting which COVID-19 patients won't need ICU admission as part of their care, with high specificity.\n\nBetter performance was achieved through feature engineering clinical known measurements, like Mean Arterial Pressure and Pulse Pressure, which showed great importance in the final model.","db65c284":"#### <font color='#777'>Multicollinearity","1da14d90":"## 5. Feature engineering","41a5e7fd":"Oxygen saturation (<b>SpO2<\/b>) features where excluded from the analysis due to low variance or high multicollinearity, but it is an important vital sign, let's create two new columns based on them.","24d44c25":"There's a high number of multicollinear features. Let's check out the features that show very high multicollinearity (Pearson's R > 0.8)","e94f6308":"After removing the other features, we're left with 39 features (42 columns - ['WINDOW', 'ICU' and 'PATIENT_VISIT_IDENTIFIER'])","7ac7e80a":"48% of data is missing on avarage in each column after removing the data.","a8d4a00b":"## 1. Introduction","7627a490":"We will use the same Random Forest Classifier. We will optimize for the True Negative Rate or Specificity score, as used before.","5aafe37f":"### 5. Cross-Validation, Optimization and Final Model","2c30e06a":"  +4.3% improvement after feature engineering, not bad. Specially because the new features have good importances in the better performing model.\n  \n  Let's crossvalidate and optimize for the final model.","7ea64ded":"#### 3.3 Dimensionality Reduction","62ed3a9a":"According to the data description:\n>  It is reasonable to assume that a patient who does not have a measurement recorded in a time window is clinically stable, potentially presenting vital signs and blood labs similar to neighboring windows. Therefore, one may fill the missing values using the next or previous entry. ","cc0aa24f":"26 features left after removing near zero variance features.","387a07cc":"Now our data has 8 features. Let's see how well model performs.","9e94629f":"#### 3.1 Invalid data","1a96715f":"Ok, now we have max 20.3% missing data for column. For now, Let's drop these rows.","5ab8e807":"Mean Arterial Pressure (<b>MAP<\/b>) e Pulse Pressure(<b>PP<\/b>) are disease predictors based on blood pressure. \n\nMAP is calculable from non-invasive blood pressure measurements with the formula: [systolic blood pressure + (2 X diastolic blood pressure)] \/ 3\n\nPP = Sistolic Blood Pressure - Diastolic Blood Pressure\n\n\n[Systolic and Diastolic Blood Pressure, Pulse Pressure, and Mean Arterial Pressure as Predictors of Cardiovascular Disease Risk in Men. Sesso HD et al.. Hypertension. 2000;36:801\u2013807](https:\/\/www.ahajournals.org\/doi\/abs\/10.1161\/01.HYP.36.5.801)","d0c68809":"82.9% True Negative Rate using only 8 variables, all of them showing importance to the model.\n\nCan we improve that with some Feature Engineering?","dfeee636":"Now let's check the columns:","a98ec23c":"## 4. Preliminary modeling","fe5137c9":"In this table we have the 33 predictor features correlation, their Person's R between each other, and the correlation of each one with the target variable.\n\nLet's drop the columns that have less correlation with the target variable.","8db4cdbe":"## 2. Aim","6230b084":"Hm, ok, let's drop those columns for now.\n\nWe might use some of these features later during feature engineering."}}