{"cell_type":{"2cc10a66":"code","f6b6f42e":"code","d0366a2b":"code","45ee8348":"code","1e5b5e94":"code","1c11ba4b":"code","a27ea117":"code","5b8f6030":"code","2e394b42":"code","2e994837":"code","0d6311da":"code","7c8cbb12":"code","c877cc5e":"code","215f1a73":"code","2820ccf1":"code","673500e3":"code","27a6cdc9":"code","6063be87":"code","7f84b40e":"code","a4165663":"code","6c895c10":"code","c2565a2b":"code","554007b1":"code","c6bfb787":"code","f9db4ed8":"code","1e645a3f":"code","8181c8b1":"code","6b48f9bb":"code","9ce7f23b":"code","7596e055":"code","c9d72a66":"markdown","a8b53910":"markdown","50c0370f":"markdown","7efe0807":"markdown","b54f5fa1":"markdown","2e5490dc":"markdown","4d0b4b01":"markdown","d6625b69":"markdown","3952719d":"markdown"},"source":{"2cc10a66":"\nimport numpy as np \nimport pandas as pd \nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f6b6f42e":"train=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\",index_col=['Id'])\nprint(train.shape)\ntrain.head()","d0366a2b":"test=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\",index_col=['Id'])\nprint(test.shape)\ntest.head()","45ee8348":"sub=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\",index_col=['Id'])\nprint(sub.shape)\nsub.head()","1e5b5e94":"train.info()","1c11ba4b":"def missing_value_count(dataframe):\n    count = 0\n    for i, col in enumerate(dataframe.columns):\n        missing = sum(dataframe[col].isna())\n        is_missing = True if missing >= 1 else False\n        if is_missing:\n            count += 1\n            print(f'Total null in {col} column : {missing}')\n        if i == len(dataframe.columns) - 1 and count == 0:\n            print('Null is not detected')\n    return count\nmissing_value_count(train)","a27ea117":"train.describe()","5b8f6030":"train.describe(include=[np.object])","2e394b42":"df_all = pd.concat([train, test], axis=0).reset_index(drop=True)\ndf_all.drop(\"SalePrice\", axis=1, inplace=True)\ndf_all.head()","2e994837":"df_all.shape","0d6311da":"for col in [\"PoolQC\", \"MiscFeature\", \"Alley\", \"Fence\", \"FireplaceQu\",\n           \"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\",\n           'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n           \"MasVnrType\", \"MSSubClass\"]:\n    df_all[col] = df_all[col].fillna(\"None\")","7c8cbb12":"for col in ['GarageYrBlt', 'GarageArea', 'GarageCars',\n           'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath',\n           \"MasVnrArea\"]:\n    df_all[col] = df_all[col].fillna(0)","c877cc5e":"for col in ['MSZoning', 'Electrical', 'KitchenQual', 'Exterior1st', 'Exterior2nd', 'SaleType', 'Functional']:\n    df_all[col] = df_all[col].fillna(df_all[col].mode()[0])","215f1a73":"df_all[\"LotFrontage\"] = df_all.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","2820ccf1":"df_all.drop([\"Utilities\", \"Condition2\", \"RoofMatl\", \"Heating\"], axis=1, inplace=True)","673500e3":"df_all.isna().sum().sum()","27a6cdc9":"from sklearn.preprocessing import LabelEncoder\n\nordered_cols = ['OverallCond', 'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond',\n                'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'HeatingQC', 'KitchenQual',\n                'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'Street', 'Alley',\n                'LandSlope', 'Functional', 'GarageFinish', 'MoSold', 'YrSold', 'PavedDrive', \n                'CentralAir', 'LotShape', 'MSSubClass',]\n\nfor col in ordered_cols:\n    le = LabelEncoder()\n    df_all[col] = le.fit_transform(df_all[col])\ndf_all.head()","6063be87":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor","7f84b40e":"train.shape","a4165663":"#creating train test dataset\nX_train = df_all[:train.shape[0]]\nX_test = df_all[train.shape[0]:]\ny_train = train[\"SalePrice\"]","6c895c10":"X_train.shape, X_test.shape, y_train.shape","c2565a2b":"features = [\"OverallQual\", \"GrLivArea\", \"GarageCars\", \"GarageArea\" ,\"TotalBsmtSF\", \"1stFlrSF\", \"FullBath\", \"YearBuilt\", \"YearRemodAdd\", \"GarageYrBlt\"]\n\nX = X_train[features]\ny = y_train\n\nclf = RandomForestRegressor()\ncross_val_score(clf, X, y, cv=5, scoring=\"neg_root_mean_squared_error\")","554007b1":"clf.fit(X,y)","c6bfb787":"pred=clf.predict(X_test[features])","f9db4ed8":"sub['SalePrice']=pred\nsub.head()","1e645a3f":"sub.to_csv(\".\/submission.csv\")","8181c8b1":"from sklearn import linear_model\nreg = linear_model.LassoLars(alpha=.1, normalize=False)\nreg.fit(X,y)\n","6b48f9bb":"pre=reg.predict(X_test[features])","9ce7f23b":"sub['SalePrice']=pre\nsub.head()","7596e055":"sub.to_csv(\".\/submission-lassolars.csv\")","c9d72a66":"preprocessing ","a8b53910":"submitting the prediction","50c0370f":"loading data","7efe0807":"checking statistical details of train dataset","b54f5fa1":"checking the column with missing values","2e5490dc":"import library","4d0b4b01":"Implementing Randomforest regressor","d6625b69":"implementing LassoLars","3952719d":"checking the info about the train dataset columns"}}