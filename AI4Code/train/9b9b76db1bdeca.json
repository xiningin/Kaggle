{"cell_type":{"5f3c335b":"code","e2f9bbd5":"code","534d34de":"code","99bfff27":"code","15a0b0d4":"code","8655ac13":"code","7e7062bf":"code","294a0408":"code","821395dc":"code","31596d52":"code","50e0dae6":"code","f1a1f60d":"code","d6a7c417":"code","d703fd1b":"code","f7acf55a":"code","4c38f592":"code","33e58c60":"code","58ca9496":"code","cabc5b51":"code","e1270072":"code","72d24777":"code","be905ae8":"code","a1bd25aa":"code","d154d5ce":"code","acc5f286":"code","a426f526":"code","745aadbc":"code","fc91d24e":"code","1c334b4a":"code","b472a47c":"code","2832e851":"code","16e35908":"code","aea3a0fe":"code","9c9a7d8d":"code","f624217e":"code","0f76fbbb":"code","1a7b63bc":"code","c4b282d3":"code","0215b96f":"code","b7514a96":"code","60159730":"code","01e48678":"code","fd06de47":"code","efdd3a6e":"code","aa5e5707":"code","c1198508":"code","cccd9e4e":"code","bf981ab3":"code","28b4c081":"code","83ceec7d":"code","705c737c":"code","f692c631":"code","1858afb6":"code","b70eb5e1":"code","b4d84d9e":"code","fe7808ef":"code","0984ecfe":"code","bd62a6c1":"code","1a3a2281":"code","ffb3edca":"code","cca41e03":"code","e40e8246":"code","18259a16":"code","e7a1182a":"code","2a28f004":"code","1ac3b719":"markdown","04a2e89f":"markdown","b85fa38e":"markdown","374de193":"markdown","059ae37e":"markdown","463d4efb":"markdown","b8be3858":"markdown","cd3bb599":"markdown","8793ffaf":"markdown","d39f1aa3":"markdown","34d9fbbc":"markdown","19dbcb2a":"markdown","63fc3725":"markdown","d3312649":"markdown","eb8ce8c6":"markdown","b9699630":"markdown","ad688c38":"markdown","eee03336":"markdown","fbf64086":"markdown","584f9f85":"markdown","080f7ab4":"markdown","755bd090":"markdown","0086ff56":"markdown","78810bc1":"markdown","3ef857f5":"markdown","3c98799e":"markdown","8e7dadee":"markdown","ff49c17f":"markdown","e79e6033":"markdown","56445d31":"markdown","1f8984c8":"markdown","a7181c74":"markdown","bc4fe011":"markdown","647d4696":"markdown","7cfd3a1a":"markdown","f46b61d3":"markdown","91a439fa":"markdown","5cf3cb00":"markdown","24b26047":"markdown","e716a7e8":"markdown","f111b328":"markdown"},"source":{"5f3c335b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e2f9bbd5":"test = pd.read_csv('..\/input\/titanic\/test.csv')   # for basic checks\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.head()","534d34de":"train.info()","99bfff27":"test.info()","15a0b0d4":"len(test)","8655ac13":"total_len = len(train) + len(test)\nprint(len(train) \/ total_len * 100)\nprint(len(test) \/ total_len * 100)","7e7062bf":"train = train.drop(columns='PassengerId')","294a0408":"train.describe()","821395dc":"fig, ax = plt.subplots(2, 2, figsize=(12,8))\ntrain['Survived'].value_counts().plot.bar(ax=ax[0,0], title='Survived')\ntrain['Pclass'].value_counts().plot.bar(ax=ax[1,0], title='Pclass')\ntrain['SibSp'].value_counts().plot.bar(ax=ax[0,1], title='SibSp')\ntrain['Parch'].value_counts().plot.bar(ax=ax[1,1], title='Parch')\nplt.setp(ax[:, 0], ylabel='Counts')\nplt.setp(ax[0,0].xaxis.get_majorticklabels(), rotation=360)\nplt.setp(ax[1,0].xaxis.get_majorticklabels(), rotation=360)\nplt.setp(ax[0,1].xaxis.get_majorticklabels(), rotation=360)\nplt.setp(ax[1,1].xaxis.get_majorticklabels(), rotation=360);","31596d52":"age_fare = train[['Age', 'Fare']]\nage_fare.hist(bins=20, figsize=(12,4));","50e0dae6":"print(train['Survived'].value_counts())\nprint('\\n')\nprint(train['Survived'].value_counts() \/ len(train) * 100)\nprint('\\n')\nprint('0 = No, 1 = Yes')","f1a1f60d":"plt.boxplot([train['Age'].dropna(axis=0)]) # drop missing values otherwise it will not work\nplt.title('Distribution of Age')\nplt.xlabel('Age')\nplt.ylabel('Years');","d6a7c417":"q_1, q_3 = np.percentile(train['Age'].dropna(axis=0), [25, 75])\nIQR = q_3 - q_1\nupper_bound = q_3 + (1.5 * IQR)\nage_outliers = train[train['Age'] > upper_bound]\nage_outliers","d703fd1b":"len(age_outliers)","f7acf55a":"print(np.min(age_outliers['Age']))\nprint(np.max(age_outliers['Age']))","4c38f592":"surv = train[train['Survived'] == 1]\nsurv_no = train[train['Survived'] == 0]\n\nsurv_age = surv['Age'].dropna(axis=0)\nsurv_no_age = surv_no['Age'].dropna(axis=0)\n\nplt.hist(surv_age, bins=50, alpha=0.4, label='Survived')\nplt.hist(surv_no_age, bins=50, alpha=0.4, label='Did not survive')\nplt.legend(loc='upper right');","33e58c60":"plt.boxplot(train['Fare'])\nplt.title('Distribution of Fare')\nplt.xlabel('Fare')\nplt.ylabel('Dollars');","58ca9496":"q_1, q_3 = np.percentile(train['Fare'], [25, 75])\nIQR = q_3 - q_1\nupper_bound = q_3 + (1.5 * IQR)\nfare_outliers = train[train['Fare'] > upper_bound]\nfare_outliers","cabc5b51":"train[train['Fare'] > 500]","e1270072":"len(fare_outliers)","72d24777":"len(fare_outliers) \/ len(train) * 100","be905ae8":"surv = train[train['Survived'] == 1]\nsurv_no = train[train['Survived'] == 0]\n\nsurv_fare = surv['Fare'].dropna(axis=0)\nsurv_no_fare = surv_no['Fare'].dropna(axis=0)\n\nplt.hist(surv_fare, bins=20, alpha=0.4, label='Survived')\nplt.hist(surv_no_fare, bins=20, alpha=0.4, label='Did not survive')\nplt.legend(loc='upper right');","a1bd25aa":"len(surv[surv['Fare'] <= 10])","d154d5ce":"len(surv_no[surv_no['Fare'] <= 10])","acc5f286":"len(surv_no[surv_no['Fare'] == 0])","a426f526":"surv = train[train['Survived'] == 1]\nsurv_no = train[train['Survived'] == 0]\n\nsurv_fare = np.log10(surv['Fare'].dropna(axis=0).values+1)       # to adjust fare entries which are 0\nsurv_no_fare = np.log10(surv_no['Fare'].dropna(axis=0).values+1)\n\nplt.hist(surv_fare, bins=20, alpha=0.4, label='Survived')\nplt.hist(surv_no_fare, bins=20, alpha=0.4, label='Did not survive')\nplt.legend(loc='upper right');","745aadbc":"cond1 = train['Parch'] == 0\ncond2 = train['SibSp'] == 0\nlen(train[cond1 & cond2])","fc91d24e":"cond1 = train['Parch'] == 0\ncond2 = train['SibSp'] == 0\nalone = train[cond1 & cond2]\n\ncond1 = train['Parch'] != 0\ncond2 = train['SibSp'] != 0\nnot_alone = train[cond1 & cond2]\n\nprint('Alone:')\nprint((alone['Survived'].value_counts()) \/ len(alone) * 100)\nprint('\\n')\nprint('Not alone:')\nprint((not_alone['Survived'].value_counts()) \/ len(not_alone) * 100)","1c334b4a":"train['TravellingAlone'] = 0\ncond = (train['Parch'] == 0) & (train['SibSp'] == 0)\ntrain.loc[cond, 'TravellingAlone'] = 1\ntrain['TravellingAlone'].value_counts().sort_values(ascending=True)","b472a47c":"train['TravellingAlone'].value_counts(ascending=True).plot.bar()\nplt.title('TravellingAlone')\nplt.xticks(rotation=360)\nplt.ylabel('Counts')\nplt.figtext(0.90, 0.01, '0 = No, 1 = Yes', horizontalalignment='right');","2832e851":"print(alone['Survived'].value_counts())\nprint('\\n')\nprint(alone['Survived'].value_counts() \/ len(alone) * 100)","16e35908":"print(not_alone['Survived'].value_counts().sort_values(ascending=False))\nprint('\\n')\nprint(not_alone['Survived'].value_counts().sort_values(ascending=False) \/ len(not_alone) * 100)","aea3a0fe":"alone = train[train['TravellingAlone'] == 1]\nnot_alone = train[train['TravellingAlone'] == 0]\n\nsurvived_alone = alone['Survived'].value_counts()\nsurvived_not_alone = not_alone['Survived'].value_counts().sort_values(ascending=False)\n\nn_groups = 2\nindex = np.arange(n_groups)\n\nwidth = 0.3\n\nplt.bar(np.arange(len(survived_alone)), survived_alone, width=width, label='Alone')\nplt.bar(np.arange(len(survived_not_alone)) + 0.3, survived_not_alone, width=width, label='Not Alone', color='mediumseagreen')\nplt.xticks(index + 0.15, ('0', '1'), rotation=360)\nplt.title('Survived by TravellingAlone')\nplt.xlabel('Survived')\nplt.ylabel('Counts')\nplt.legend()\nplt.figtext(0.90, 0.01, '0 = No, 1 = Yes', horizontalalignment='right');","9c9a7d8d":"train['Name'].head()","f624217e":"train['Name'].tail()","0f76fbbb":"train['Sex'].value_counts().plot.bar()\nplt.title('Sex')\nplt.xticks(rotation=360)\nplt.ylabel('Counts');","1a7b63bc":"males = train[train['Sex'] == 'male']\nfemales = train[train['Sex'] == 'female']\n\nsurvived_males = males['Survived'].value_counts()\nsurvived_females = females['Survived'].value_counts().sort_values(ascending=True)\n\nn_groups = 2\nindex = np.arange(n_groups)\n\nwidth = 0.3\n\nplt.bar(np.arange(len(survived_males)), survived_males, width=width, label='Male')\nplt.bar(np.arange(len(survived_females)) + 0.3, survived_females, width=width, label='Female', color='mediumseagreen')\nplt.xticks(index + 0.15, ('0', '1'), rotation=360)\nplt.title('Survived by Sex')\nplt.xlabel('Survived')\nplt.ylabel('Counts')\nplt.legend()\nplt.figtext(0.90, 0.01, '0 = No, 1 = Yes', horizontalalignment='right');","c4b282d3":"train['Ticket'].head()","0215b96f":"train['Ticket'].tail()","b7514a96":"train['Ticket'].value_counts()","60159730":"train[train['Ticket'] == 'CA. 2343']","01e48678":"train[train['Ticket'] == '347082']","fd06de47":"train['Cabin'].head()","efdd3a6e":"train['Cabin'].tail()","aa5e5707":"train['Cabin'].value_counts()","c1198508":"train['CabinLetter'] = train['Cabin'].str[:1]\ntrain['CabinLetter'].value_counts()","cccd9e4e":"train['CabinLetter'].value_counts().plot.bar()\nplt.title('Cabin Prefix')\nplt.xticks(rotation=360)\nplt.ylabel('Counts');","bf981ab3":"train[train['CabinLetter'] == 'C'].head()","28b4c081":"train['CabinLetter'].fillna('unassigned', inplace=True) # For passengers without an assigned cabin, give them a value of 'unassigned'\ntrain['CabinLetter'].value_counts()","83ceec7d":"train['Cabin'].isnull().sum()","705c737c":"cabin_notnull = train[train['Cabin'].notnull()]\ncabin_notnull.head()","f692c631":"surv = train[train['Survived'] == 1]\nsurv_no = train[train['Survived'] == 0]\n\nsurv_fare = np.log10(surv['Fare'].dropna(axis=0).values+1)       # to adjust fare entries which are 0\nsurv_no_fare = np.log10(surv_no['Fare'].dropna(axis=0).values+1)\n\nplt.hist(surv_fare, bins=20, alpha=0.4, label='Survived')\nplt.hist(surv_no_fare, bins=20, alpha=0.4, label='Did not survive')\nplt.legend(loc='upper right');","1858afb6":"# Passengers where Cabin is not missing\nage_fare_notnull = cabin_notnull[['Age', 'Fare']]\nage_fare_notnull.hist(bins=20, figsize=(12,4), label='Assigned cabin')\n\n# Passengers where Cabin is missing\ncabin_null = train[train['Cabin'].isnull()]\nage_fare_null = cabin_null[['Age', 'Fare']]\nage_fare_null.hist(bins=20, figsize=(12,4), label='No cabin assigned');","b70eb5e1":"counts_null = cabin_null['Survived'].value_counts()\ncounts_notnull = cabin_notnull['Survived'].value_counts().sort_values(ascending=True)\n\nn_groups = 2\nindex = np.arange(n_groups)\n\nwidth = 0.3\n\nplt.bar(np.arange(len(counts_null)), counts_null, width=width, label='No cabin assigned')\nplt.bar(np.arange(len(counts_notnull)) + 0.3, counts_notnull, width=width, label='Cabin assigned', color='mediumseagreen')\nplt.xticks(index + 0.15, ('0', '1'), rotation=360)\nplt.title('Survived by Cabin (assigned or unassigned)')\nplt.xlabel('Survived')\nplt.ylabel('Counts')\nplt.legend()\nplt.figtext(0.90, 0.01, '0 = No, 1 = Yes', horizontalalignment='right');","b4d84d9e":"train['CabinAssigned'] = train['Cabin'].notnull().convert_dtypes(convert_boolean=False)","fe7808ef":"train['Embarked'].value_counts(ascending=False).plot.bar()\nplt.title('Embarked')\nplt.xticks(rotation=360)\nplt.ylabel('Counts')\nplt.figtext(0.90, 0.01, 'S = Southampton, C = Cherbourg, Q = Queenstown', horizontalalignment='right');","0984ecfe":"print('Counts:')\nprint(train['Embarked'].value_counts(ascending=False))\nprint('\\n')\nprint('%:')\nprint(train['Embarked'].value_counts(ascending=False) \/ len(train) * 100)","bd62a6c1":"train['Pclass'].value_counts(ascending=False).plot.bar()\nplt.title('Pclass')\nplt.xticks(rotation=360)\nplt.ylabel('Counts')\nplt.figtext(0.90, 0.01, '1 = 1st class, 2 = 2nd class, 3 = 3rd class', horizontalalignment='right');","1a3a2281":"(train.isnull().sum().sort_values(ascending=True) \/ len(train) * 100).plot.barh()\nplt.title('Missing values')\nplt.xlabel('Percentage')\nplt.ylabel('Attribute');","ffb3edca":"print('Missing counts:')\nprint(train.isnull().sum().sort_values(ascending=False))\nprint('\\n')\nprint('Missing %:')\nprint(train.isnull().sum().sort_values(ascending=False) \/ len(train) * 100)","cca41e03":"print('Missing counts:')\nprint(test.isnull().sum().sort_values(ascending=False))","e40e8246":"make_num = {'Sex':         {'male': 0, 'female': 1},\n            'Embarked':    {'S': 0, 'C': 1, 'Q': 2},\n            'CabinLetter': {'unassigned': 0,\n                            'C': 1,\n                            'B': 2,\n                            'D': 3,\n                            'E': 4,\n                            'A': 5,\n                            'F': 6,\n                            'G': 7,\n                            'T': 8}\n           }\n\ntrain.replace(make_num, inplace=True)","18259a16":"corr_matrix = train.corr()","e7a1182a":"plt.figure(figsize=(10,8))\nsns.heatmap(corr_matrix, annot=True, vmin=-1, vmax=1, cmap='RdBu');","2a28f004":"corr_matrix['Survived'].sort_values(ascending=False)","1ac3b719":"<a id='transformations'><\/a>\n\n# Promising transformations\n\nHere is a list of promising transformations I can experiment with when creating models to predict passenger survival:\n* Fill missing `Age` values with the median.\n* Create `TravellingAlone`, which indicates whether or not a passenger was travelling alone.\n* Drop `Ticket` as it has no useful information.\n* Create `CabinAssigned`, which indicates whether or not the passenger had a cabin assigned.\n* Create `CabinLetter`, which is similar to `CabinAssigned` but includes additional information for passengers that *were* assigned a cabin (e.g., deck `C`).\n* Drop `Cabin` because it is mostly missing, as the above attributes (which were derived from `Cabin`) should be useful\n* Fill missing values for `Embarked` with the mode.\n* Transform `Age` and `Fare` to make them more normally distributed (`Fare` is especially skewed).\n* Scale features so they have similar values.\n\nThis concludes my first round of exporation of the Titanic dataset. Of course, not all of the above transformations will be useful (in fact, some may *decrease* accuracy). Next, I will train some models for predicting `Survival` using the insights I have obtained from this analysis. Once I inspect the outputs of these models, I might continue to do some more exploration to see if there are any other potentially useful transformations.","04a2e89f":"### `Pclass`","b85fa38e":"The majority of passengers with an assigned `Cabin`\u00a0survived. I will create `CabinAssigned` to indicate whether or not a passenger was assigned a cabin. `CabinLetter`, which provides additional information (deck letters and unassigned), is also promising. Later I will compute the correlation between these derived features and `Survived` to see their potential usefulness for modelling.","374de193":"How many passengers travelled alone (i.e., had a value of 0 for both `Parch` and `SibSp`)? Were they more likely to survive compared to those that travelled with family?","059ae37e":"I wonder how helpful titles (e.g., Mr.) might be?","463d4efb":"Machine learning algorithms typically do not handle skewed features very well. One way of dealing with this is by transforming the attribute logarithmically.","b8be3858":"#### `Parch` and `SibSp`","cd3bb599":"These values seem reasonable.","8793ffaf":"### `Age`","d39f1aa3":"Additionally, as seen from the above plot, there appears to be many low\/zero fare entries, particularly for those passengers that did not survive.","34d9fbbc":"Were younger passengers more likely to survive compared to older passengers?","19dbcb2a":"### `Embarked`","63fc3725":"On the test set, `Cabin`, `Age`, and `Fare` have missing values. Any imputations applied to the training set will also need to be applied to the test set. `Cabin` will most likely be dropped and replaced with a derived feature such as `CabinAssigned`.","d3312649":"There are 11 data points above the upper bound (3rd quartile + 1.5 times the IQR).","eb8ce8c6":"# Titanic Exploratory Data Analysis\n\n# Introduction\n\nThis is an exploration of the Titanic dataset. My goal is to get an in depth understanding of the data and to shortlist a few promising transformations to experiment with during model creation, where my aim will be to predict passenger survival.\n\n## Outline\n\n1. [Get the data](#obtain)\n1. [Explore the data](#explore)\n1. [Promising transformations](#transformations)","b9699630":"Survival was higher for very young children (< 5 years of age). Additionally, there appears to be many young adults (up to about 30 years of age) who did not survive. Otherwise the distributions are similar.","ad688c38":"## Correlations","eee03336":"According to the data dictionary, `Ticket`represents ticket number. I'm not sure how helpful this will be. Of those passengers with a ticket number, what do they have in common?","fbf64086":"### `Name`","584f9f85":"The target attribute `Survived` is a binary attribute where 0 = No and 1 = Yes. Most passengers (62%) did not survive. `Pclass`, which represents ticket class, is an ordinal integer feature where 1 = 1st, 2 = 2nd, and 3 = 3rd class ticket. The majority of passengers had a 3rd class ticket, followed by 1st class, and then 2nd class. I will keep `Survived` and `Pclass`, as well as `SibSp` and `Parch`, as numerical attributes as most machine learning algorithms cannot work with categorical features.\n\nFor the remaining numerical attributes:\n* `Age` approximates a normal distribution, but it is slightly skewed to the right.\n* `Fare` is heavily skewed to the right.\n* These attributes may need to be transformed later on to have a more bell-shaped distribution.\n* There are some very different scales here (e.g., `Age` ranges from 0\u201380 while `Fare` appears to have values at about 500), so feature scaling will be necessary.\n\nA very simple classifier might predict 'No' for every instance, given that most passengers did not survive. Doing this would result in an accuracy of about 60%. I want to create a model that significantly improves on this.\n\nNext, I'll take a closer look at `Age` and `Fare`.","080f7ab4":"<a id='explore'><\/a>\n\n# Explore the data\n\nI will first explore the numerical attributes, followed by the categorical attributes. I'll start off broad to gain a general understanding of the kind of data I'm manipulating, and then I'll follow this up with an in-depth investigation of the individual attributes.\n\n## Numerical attributes","755bd090":"### `Ticket`","0086ff56":"To summarise the above:\n* There are 891 instances in the training set, each one representing a unique passenger.\n* There are 12 attributes: two of these are `float64`, five are `int64`, and the remaining five are `object`s.\n* The target attribute is `Survived`, so it is not present on the test set. Additionally, it has no missing values.\n* `Age`, `Cabin`, `Embarked` have missing values in the training set.\n* In the test set, `Age`, `Cabin`, and `Fare` have missing values.\n* `PassengerId` is a running index. Therefore, it will not provide any useful information during modelling and can be dropped.\n* The dataset is split 70\/30 into training and test sets.","78810bc1":"I wonder if one sex was more likely to survive than the other? I expect that women and children were evacuated first.","3ef857f5":"Most passengers embarked from Southampton. Were these people more or less likely to survive? How does `Embarked` relate to other attributes such as `Pclass`?","3c98799e":"Passengers that did not survive typically paid less for their fare compared to those that did survive.","8e7dadee":"The `Fare` values of 512.33 are extreme. According to [this source](https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/annie-moore-ward.html), the fare price is accurate. Additionally, there are 116 data points above the upper bound (3rd quartile + 1.5 times the IQR). This is 13% of all `Fare` values.","ff49c17f":"`Cabin`, `Age`, and `Embarked` have missing values ranging from 0.2%\u201377.1%. I will impute missing `Embarked` values (most likely with the mode `S`) because there are so few. I may need to drop `Cabin` because there are so many missing values (687), and I'm not sure what to do about `Age` just yet (177 missing).","e79e6033":"To summarise the correlations above:\n* There is a moderate positive relationship between `Survived` and `Sex`. This indicates that females were more likely to survive than males (0 = male, 1 = female).\n* There is a moderate negative relationship between `Survived` and `Pclass`. So, passengers in a higher ticket class (e.g., 1st class) were more likely to survive than passengers in a lower ticket class (e.g., third class).\n* There is a moderate positive relationship between `Survived` and `CabinAssigned` (the attribute I derived earlier, which indicates whether or not a passenger has an assigned cabin).\n* `CabinLetter` has a weaker association with `Survived` compared to the other cabin attribute I derived, `CabinAssigned`. Perhaps the extra information is not so helpful.\n* There is a weak positive relationship between `Survived` and `Fare`. So, those that paid more for their ticket were more likely to to survive than those that paid less.\n* `Parch`, `SibSp`, and `Age` don't have much of a linear relationship with `Survived`. Perhaps there is some additional feature engineering work that can be done with these attributes.\n* I derived `TravellingAlone` from `SibSp` and `Parch`. This attribute has a stronger, negative relationship with `Survived`. So, passengers that were not travelling alone were more likely to survive compared to passengers that were.","56445d31":"### `Fare`","1f8984c8":"The letter prefix (e.g., `G`, `C`) might provide useful information for the model. Perhaps this represents sections of the ship.","a7181c74":"## Categorical attributes","bc4fe011":"These passengers were in the same family.","647d4696":"<a id='obtain'><\/a>\n\n# Get the data\n\nLet's load the data and have a quick look at its structure.","7cfd3a1a":"### `Cabin`","f46b61d3":"## Missing values","91a439fa":"Most passengers (537) were travelling alone. Of these passengers, 30% survived. In comparison, the survival of passengers who were *not* travelling alone was 49%. I wonder if survival varies as a function of `SibSp` and\/or `Parch`? In particular, perhaps the likelihood of survival increases up until a certain point (large families might be a hindrance).","5cf3cb00":"Additionally, there are many missing values for `Cabin`. Of those passengers that have a value for `Cabin`, what do they have in common?","24b26047":"### `Sex`","e716a7e8":"`Pclass` is a categorical attribute (ticket class) that has been encoded as numerical (1 = 1st, 2 = 2nd, and 3 = 3rd class).","f111b328":"The majority of female passengers survived, while most male passengers did not. A simple classifier might predict all female passengers survive while all male passengers do not. The accuracy of such a model on the test set is 76.5%. It will be interesting to see how much I can improve on this simple model using a classification algorithm and investing some time into feature engineering.\n\nSo, there are two potential baseline models to compare to:\n1. Nobody survives. Accuracy is about 60%.\n2. Females survive; males do not. Accuracy is 76.5%."}}