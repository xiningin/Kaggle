{"cell_type":{"7f373558":"code","cc26b6fd":"code","30833362":"code","a2ca8430":"code","444d7744":"code","0d2af5e9":"code","086750e3":"code","6e15f71b":"code","187de94e":"code","105c1e2b":"code","63544586":"code","353d1342":"code","255f1625":"code","c3776efd":"code","38787e5b":"code","d2356d24":"code","4d5906e7":"code","d1a05f3d":"code","2b0c7f22":"code","a8c923a4":"code","44ff4035":"code","618d6f1d":"markdown","8f119632":"markdown","f3d58f20":"markdown","411dbf5c":"markdown","bebd9b21":"markdown","9d1a3b1a":"markdown"},"source":{"7f373558":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndf = pd.read_csv('\/kaggle\/input\/clinical-dataset-of-the-cypguides-trial\/Dataset.csv',delimiter=',')\n\n# random forest classifier\ndf.head(2)","cc26b6fd":"df.info()","30833362":"df.columns","a2ca8430":"\n# los is in hours lets convert it to full days\ndf.LOS = df.LOS.apply(lambda x: round(x\/24,0))","444d7744":"# target feature is the readmission flag\n# most patients did not get readmitted\n# 1358 patients did not get readmitted while 142 patients did\ndf.RAR.value_counts()","0d2af5e9":"# cast the values to categorical values and substitute them with dummy numerical values\ndf[\"GENDER\"] = df[\"GENDER\"].astype('category').cat.codes\ndf[\"RACE\/ETHNICITY\"] = df[\"RACE\/ETHNICITY\"].astype('category').cat.codes\ndf['MD'] = df['MD'].astype('category').cat.codes\ndf['Assignment'] = df['Assignment'].astype('category').cat.codes\ndf['EMR'] = df['EMR'].astype('category').cat.codes\ndf['Therapeutic Guidances'] = df['Therapeutic Guidances'].astype('category').cat.codes\n","086750e3":"df.head(2)","6e15f71b":"# take a look at the Diagnosis column\n# here we can see that we can combine some diagnosis together \n# also the frequency and severity of the illness is kept in this text field\ndf.Diagnosis.value_counts()","187de94e":"# put similar diagnosis types together\n# diagnosis_type -> states the main diagnosis given\n# frequency      -> states the frequency the illness appears\n# severity       -> states the severity of the illness\n# features       -> special \"features\" of the illness e.g. anxiety or psychotic features\n\nfor idx,row in df.iterrows():\n    if row[\"Diagnosis\"] == \"MDD, Recurrent, Severe Without Psychotic Features\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n        df.loc[idx,\"severity\"] = \"severe\"\n        df.loc[idx,\"features\"] = None\n    elif row[\"Diagnosis\"] == \"Depressive Disorder NOS\":\n        df.loc[idx,\"diagnosis_type\"] = \"depression\"\n    elif row[\"Diagnosis\"] == \"MDD, Recurrent, Unspecified\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n    elif row[\"Diagnosis\"] == \"MDD, Single Episode,Severe Without Psychotic Features\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"single\"\n        df.loc[idx,\"severity\"] = \"severe\"\n        df.loc[idx,\"features\"] = None\n    elif row[\"Diagnosis\"] == \"MDD\" or row[\"Diagnosis\"] == \"Unspecified Depressive Disorder\" or row[\"Diagnosis\"] == \"Major depression, melancholic type\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n    elif row[\"Diagnosis\"]==\"row MDD, Single Episode, Severe With Psychotic Features\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"single\"\n        df.loc[idx,\"severity\"] = \"severe\"\n        df.loc[idx,\"features\"] = \"psychotic\"\n    elif row[\"Diagnosis\"] == \"MDD, Recurrent, Severe With Psychotic Features\" \\\n        or row[\"Diagnosis\"] == \"Major depressive disorder, recurrent episode, severe, with psychosis\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n        df.loc[idx,\"severity\"] = \"severe\"\n        df.loc[idx,\"features\"] = \"psychotic\"\n    elif row[\"Diagnosis\"] == \"MDD, Single Episode, Unspecified\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"single\"\n    elif row[\"Diagnosis\"] == \"MDD, Recurrent, Moderate\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n        df.loc[idx,\"severity\"] = \"moderate\"\n    elif row[\"Diagnosis\"] == \"MDD, Recurrent, Chronic\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n        df.loc[idx,\"severity\"] = \"chronic\"\n    elif row[\"Diagnosis\"] == \"MDD, recurrent, severe\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n        df.loc[idx,\"severity\"] = \"severe\"\n    elif row[\"Diagnosis\"] == \"Severe episode of recurrent major depressive disorder, without psychotic features\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n        df.loc[idx,\"severity\"] = \"severe\"\n        df.loc[idx,\"features\"] = None\n    elif row[\"Diagnosis\"] == \"MDD, Single Episode, Moderate\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"single\"\n        df.loc[idx,\"severity\"] = \"moderate\"\n    elif row[\"Diagnosis\"] == \"\\tDepression, unspecified type \":\n        df.loc[idx,\"diagnosis_type\"] = \"depression\"\n    elif row[\"Diagnosis\"] == \"MDD, Recurrent, Mild\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n        df.loc[idx,\"severity\"] = \"mild\"\n    elif row[\"Diagnosis\"] == \"MDD, Single Episode, Mild\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"single\"\n        df.loc[idx,\"severity\"] = \"mild\"\n    elif row[\"Diagnosis\"] == \"MDD, recurrent episodes\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n    elif row[\"Diagnosis\"] == \"Depression with suicidal ideation\":\n        df.loc[idx,\"diagnosis_type\"] = \"depression\"\n        df.loc[idx,\"severity\"] = \"severe\"\n    elif row[\"Diagnosis\"] == \"Bipolar II Disorder\":\n        df.loc[idx,\"diagnosis_type\"] = \"bipolar_disorder\"\n    elif row[\"Diagnosis\"] == \"Mood Disorder NOS\":\n        df.loc[idx,\"diagnosis_type\"] = \"mood_disorder\"\n    elif row[\"Diagnosis\"] == \"Major depressive disorder, recurrent episode with anxious distress\" or row[\"Diagnosis\"] == \"\\tMDD, recurrent episode with anxious distress\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n        df.loc[idx,\"features\"] = \"anxiety\"\n    elif row[\"Diagnosis\"] == \"MDD, single episode with psychotic features, mood-conguent\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"single\"\n        df.loc[idx,\"features\"] = \"psychotic\"\n    elif row[\"Diagnosis\"] == \"Adjustment Disorder With Depressed Mood\":\n        df.loc[idx,\"diagnosis_type\"] = \"adjustment_disorder\"\n    elif row[\"Diagnosis\"] == \"Major depressive disorder, recurrent, with postpartum onset\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n    elif row[\"Diagnosis\"] == \"MDD, recurrent, severe with atypical features\":\n        df.loc[idx,\"diagnosis_type\"] = \"major_depressive_disorder\"\n        df.loc[idx,\"frequency\"] = \"recurrent\"\n        df.loc[idx,\"severity\"] = \"severe\"\n        df.loc[idx,\"features\"] = \"atypical\"\n    elif row[\"Diagnosis\"] == \"Schizoaffective Disorder\":\n        df.loc[idx,\"diagnosis_type\"] = \"schizoaffective_disorder\"\n    elif row[\"Diagnosis\"] == \"Dissociative Disorder\":\n        df.loc[idx,\"diagnosis_type\"] = \"dissociative_disorder\"\n\nprint(\"Count of unique diagnosis: \")\nprint(df.diagnosis_type.value_counts(dropna=False))\nprint(\"\")\nprint(\"Count of frequencies: \")\nprint(df.frequency.value_counts(dropna=False))\nprint(\"\")\nprint(\"Count of severity stages: \")\nprint(df.severity.value_counts(dropna=False))\nprint(\"\")\nprint(\"Count of features: \")\nprint(df.features.value_counts(dropna=False))\n","105c1e2b":"# cast the values to categorical values and substitute them with dummy numerical values\ndf['diagnosis_type'] = df['diagnosis_type'].astype('category').cat.codes\ndf['frequency'] = df['frequency'].astype('category').cat.codes\ndf['severity'] = df['severity'].astype('category').cat.codes\ndf['features'] = df['features'].astype('category').cat.codes","63544586":"# drop the Diagnosis and ID columns as the have no value for the prediction\ndf.drop([\"Diagnosis\",\"ID\"], axis=1, inplace=True)","353d1342":"# columns in the current data set\ndf.columns","255f1625":"# split the data in train and test set\nfrom sklearn.model_selection import train_test_split\n\nX=df.drop(columns=\"RAR\")\ny=df[\"RAR\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)\n\n\n# use ADASYN for oversampling of the minority class 1 (people who did not get readmitted) of the training data\n# ONLY USE THESE TECHNIQUES FOR THE TRAINING DATA IF YOU WANT TO PREVENT DATA LEAKAGE\nfrom imblearn.over_sampling import ADASYN\n\nsmt = ADASYN(random_state=42) \nX_train, y_train = smt.fit_resample(X_train, y_train)\n\n","c3776efd":"# take a look at new data distribution\n# both classes are now evenly distributed\ny_train.value_counts()","38787e5b":"# we have 1200 observations in the training set and 300 in the test set\nX_train.shape, y_train.shape","d2356d24":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# define parameter space\nmax_iter = np.arange(100, 3000, step=500)\n\nparameter_space = {\n    'hidden_layer_sizes': [(20,),(128,64,32,16,4), (64,32,16,8,4), (32,16,8,4,2), (16,8,4,2,1), (100)],\n    'activation': ['tanh', 'relu'],\n    'solver': ['sgd', 'adam'],\n    'alpha': [0.0001, 0.001, 0.05,1, 2],\n    'learning_rate': ['constant','adaptive'],\n    'max_iter': max_iter\n}\n\n# define model\nmodel = MLPClassifier(random_state=42)\n\n#use RandomizedSearchCV as a gridsearch approach\n# scoring for f1 considering the imbalanced nature of the data set\nclf = RandomizedSearchCV(model, parameter_space, n_jobs=-1, cv=3,scoring=\"f1\")\nclf.fit(X_train, y_train)\n# get best hyperparameter combination - best estimator\nprint(clf.best_estimator_)","4d5906e7":"model = clf.best_estimator_\n\ny_pred = model.predict(X_test)\n\n# plot the classification report of the classification\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","d1a05f3d":"print(df.columns)","2b0c7f22":"\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# define parameter space that is to be searched\nn_estimators = np.arange(100, 2000, step=100)\nmax_features = [\"auto\", \"sqrt\", \"log2\"]\nmax_depth = list(np.arange(10, 100, step=10)) + [None]\nmin_samples_split = np.arange(2, 10, step=2)\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\n\nparameter_space = {\n    \"n_estimators\": n_estimators,\n    \"max_features\": max_features,\n    \"max_depth\": max_depth,\n    \"min_samples_split\": min_samples_split,\n    \"min_samples_leaf\": min_samples_leaf,\n    \"bootstrap\": bootstrap,\n}\n\nmodel = RandomForestClassifier(random_state=42)\n\nclf = RandomizedSearchCV(model, parameter_space, n_jobs=-1, cv=3, scoring=\"f1\")\nclf.fit(X_train, y_train)\n\n# get best hyperparameter combination - best estimator\nprint(clf.best_estimator_)","a8c923a4":"model = clf.best_estimator_\n\ny_pred = model.predict(X_test)\n\nprint(classification_report(y_test, y_pred))","44ff4035":"# severity semes to be the most important feature \n# however, the numbers of importance are very low\n# we have to do further feature engineering \n# also different oversampling approaches and models have to be considered\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind='barh')","618d6f1d":"# Random Forest Classifier","8f119632":"# Introduction\n\nThe following data set is a first template for a classification of the RAR Feature (Readmission Rate). I did not further plot the individual features or their relationsship to each other as this is not the scope of this notebook. Some work regarding an EDA was already provided by @mpwolke.\n\nWith this notebook I wanted to deliver a first template for a classification of the RAR feature. \nTo achieve some good results I used a MLPClassifier as well as a Random Forest Classifier and performed a Random Gridsearch for hyperparameter tuning.\n\nMost of the work here went in the feature engineering of the free text Diagnosis feature which in my opinion can be one of the key indicators for the RAR feature.\n\nFor the oversamplingn of the minority class the ADASYN model was used. \n(https:\/\/imbalanced-learn.org\/dev\/references\/generated\/imblearn.over_sampling.ADASYN.html)\n\nFeel free to comment on my work so that you and I can learn something from this. \n\nI hope you have fun reading this notebook. \n\nCheers Dominik\n","f3d58f20":"# Multi Layer Perceptron Classifier","411dbf5c":"# **Diagnosis Feature Engineering**\n\n**A key feature of the data set is the free text Diagnosis column. In order to make sense of this feature I clustered some diagnosis together and created new features indicating the**\n1. diagnosis_type -> which states the main diagnosis given\n2. frequency      -> which states the frequency the illness appears\n3. severity       -> which states the severity of the illness\n4. features       -> special \"features\" of the illness e.g. anxiety or psychotic features","bebd9b21":"Although the accuracy of 83% does not seem to bad this measure is misleading as the performance on the minority class is very bad. A realistic picture of the classification performance is given by the f1-score that shows us, that we have a lot room to improve.","9d1a3b1a":"# Conclusion\n\n**Considering the imbalance nature of the data set and the bad results on the minority class, we have to some further feature engineering, as well as to take other measures, in order to be able to boost the prediction quality. However, I hope this notebook gave you a first idea of working with this data set for classification**"}}