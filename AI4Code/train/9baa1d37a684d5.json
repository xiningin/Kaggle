{"cell_type":{"aeceb3d0":"code","555d5f7b":"code","afcc0ce9":"code","1fec90f7":"code","e40cea55":"code","b5670d2c":"code","692ebcd1":"code","c58dea61":"code","2174c0e7":"code","81882dfb":"code","c73841ff":"code","db2eb984":"code","4111e6c4":"code","dcff3f23":"code","5e635f6d":"code","1fb9dfa5":"code","f6f694ae":"code","8b874abf":"code","db611154":"code","76bc784f":"code","548ccfc9":"code","ab1b0c5f":"code","0e3db1cf":"code","28707520":"code","93bc3ef2":"code","c31af882":"code","da77c56b":"code","ad15c930":"code","551a46ba":"code","2bf7bab9":"code","4ea233b7":"code","4352359f":"code","e80c12d0":"code","d9e21dcc":"code","a2b608e5":"code","37880f31":"code","ad2abf39":"code","65a9da6c":"code","000800b4":"code","13938ec6":"code","d3fbfe5c":"code","b1e6f948":"code","c8c33c2d":"code","ef7d8b7b":"code","521509cc":"code","3491d0e5":"code","b4857683":"code","e3d6fe47":"code","a3e52413":"code","c02e3e95":"code","b4e8aeef":"code","9e6c667c":"code","1e0cbcaa":"code","4d9861e8":"code","79d7e4c6":"code","317851ee":"code","8f244c71":"code","e39357d9":"code","0a473ddf":"code","cf7be142":"code","da57a076":"code","e7866028":"code","0e92e38a":"code","6b478747":"code","082bb21f":"code","aa18474b":"code","70d09665":"code","c6000fa1":"code","5806307c":"code","b41bbafc":"code","a8a064e6":"code","cead074e":"code","74915c54":"code","27678322":"markdown","96f928a9":"markdown","2e1bb423":"markdown","54b7286d":"markdown","60d56c6f":"markdown","1125d76b":"markdown","e71480a2":"markdown","2af0e375":"markdown","929d49e9":"markdown"},"source":{"aeceb3d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","555d5f7b":"import warnings\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom xgboost import XGBRegressor\nwarnings.filterwarnings('ignore')","afcc0ce9":"df_train=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf_train.tail(5)","1fec90f7":"df_train.isna().sum()","e40cea55":"df_train['Province_State'].isna().sum()","b5670d2c":"df_train['Province_State']=df_train['Province_State'].fillna('')\ndf_train['Province_State'].isna().sum()","692ebcd1":"df_train['Country_Region']=df_train['Country_Region']+'_'+df_train['Province_State']","c58dea61":"#df_train.sort_values(by=['Date'],inplace=True)","2174c0e7":"df_train","81882dfb":"df_test=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")\ndf_test.sample(5)","c73841ff":"df_test.isna().sum()","db2eb984":"df_test['Province_State']=df_test['Province_State'].fillna('')\ndf_test['Province_State'].isna().sum()","4111e6c4":"df_test","dcff3f23":"df_test['Country_Region']=df_test['Country_Region']+'_'+df_test['Province_State']","5e635f6d":"df_test.sample(8)","1fb9dfa5":"def create_features(df,label=None):\n    \"\"\"\n    Creates time series features from datetime index.\n    \"\"\"\n    df = df.copy()\n    df['Date'] = df.index\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['quarter'] = df['Date'].dt.quarter\n    df['month'] = df['Date'].dt.month\n    \n    df['dayofyear'] = df['Date'].dt.dayofyear\n    df['dayofmonth'] = df['Date'].dt.day\n    df['weekofyear'] = df['Date'].dt.weekofyear\n    \n    X = df[['dayofweek','quarter','month',\n           'dayofyear','dayofmonth','weekofyear']]\n   \n    return X","f6f694ae":"train = df_train.set_index(['Date'])\ntrain.index = pd.to_datetime(train.index)\ntrain_features=pd.DataFrame(create_features(train))\ntrain_features","8b874abf":"df_train_final = pd.concat([train,train_features], axis=1)\ndf_train_final.reset_index(drop=True ,inplace =True )\ndf_train_final","db611154":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf_train_final['Country_Region'] = le.fit_transform(df_train_final['Country_Region'])","76bc784f":"df_train_final.sample(8)","548ccfc9":"df_train_final.drop(columns='Province_State' , inplace=True)\ndf_train_final","ab1b0c5f":"test = df_test.set_index(['Date'])\ntest.index = pd.to_datetime(test.index)\ntest_features=pd.DataFrame(create_features(test))\ntest_features","0e3db1cf":"df_test_final = pd.concat([test,test_features], axis=1)\ndf_test_final.reset_index(drop=True ,inplace =True )\ndf_test_final","28707520":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf_test_final['Country_Region'] = le.fit_transform(df_test_final['Country_Region'])","93bc3ef2":"df_test_final.sample(8)","c31af882":"df_test_final.drop(columns='Province_State' , inplace=True)\ndf_test_final","da77c56b":"df_test_final = df_test_final.drop(['ForecastId'],axis=1)","ad15c930":"df_train_final.corr()","551a46ba":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15,8))\n\nsns.heatmap(df_train_final.corr(),annot=True , linewidth=1.5 )","2bf7bab9":"df_train_final['ConfirmedCases'] = df_train_final['ConfirmedCases'].apply(int)\ndf_train_final['Fatalities'] = df_train_final['Fatalities'].apply(int)","4ea233b7":"df_train_final.columns","4352359f":"y_conf=df_train_final['ConfirmedCases']\ny_conf.sample(6)\ny_fat=df_train_final['Fatalities']","e80c12d0":"df_train_final_fat = df_train_final.drop(['Id','Fatalities'],axis=1)\ndf_train_final_fat.columns","d9e21dcc":"\ndf_train_final_ConCases = df_train_final.drop(['Id','ConfirmedCases','Fatalities'],axis=1)\ndf_train_final_ConCases.columns","a2b608e5":"df_train_final_fat","37880f31":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(df_train_final_ConCases,y_conf,test_size=0.2,random_state=42)","ad2abf39":"rf = XGBRegressor(n_estimators = 2400 , random_state = 0 , max_depth = 26)\nrf.fit(X_train,y_train)","65a9da6c":"pred_conf = rf.predict(X_test)\npredictions = [round(value) for value in pred_conf]\npredictions","000800b4":"rf.score(X_test,y_test)","13938ec6":"from sklearn.metrics import mean_squared_error\nr=np.sqrt(mean_squared_error(y_test,predictions))\nr","d3fbfe5c":"from sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(y_test,predictions)\nprint('MAE: %f' % mae)","b1e6f948":"from sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test,predictions)\nprint('MSE: %f' % mse)","c8c33c2d":"from math import sqrt\nrmse = sqrt(mse)\nprint('RMSE: %f' % rmse)","ef7d8b7b":"from sklearn.metrics import r2_score\nR2=r2_score(y_test,predictions)\nprint('R2: %f' % R2)","521509cc":"dfpred = pd.DataFrame(data=predictions, columns=[ \"pred\"] , index=y_test.index )\ndfpred1=pd.concat([dfpred,y_test],axis=1)\ndfpred1.sample(30)","3491d0e5":"from sklearn.model_selection import train_test_split\nX_train2,X_test2,y_train2,y_test2 = train_test_split(df_train_final_fat,y_fat,test_size=0.2,random_state=42)","b4857683":"X_train2","e3d6fe47":"rf2 = XGBRegressor(n_estimators = 2000 , random_state = 0 , max_depth = 20)\nrf2.fit(X_train2,y_train2)","a3e52413":"pred_fat = rf2.predict(X_test2)\npredictions_fat = [round(value) for value in pred_fat]\npredictions_fat","c02e3e95":"rf2.score(X_test2,y_test2)","b4e8aeef":"from sklearn.metrics import mean_squared_error\nr=np.sqrt(mean_squared_error(y_test2,predictions_fat))\nr","9e6c667c":"from sklearn.metrics import mean_absolute_error\nmae2 = mean_absolute_error(y_test2,predictions_fat)\nprint('MAE: %f' % mae2)","1e0cbcaa":"from sklearn.metrics import mean_squared_error\nmse2 = mean_squared_error(y_test2,predictions_fat)\nprint('MSE: %f' % mse2)","4d9861e8":"from math import sqrt\nrmse2 = sqrt(mse2)\nprint('RMSE: %f' % rmse2)","79d7e4c6":"from sklearn.metrics import r2_score\nR2_fat=r2_score(y_test2,predictions_fat)\nprint('R2: %f' % R2_fat)","317851ee":"dfpred_fat = pd.DataFrame(data=predictions_fat, columns=[ \"pred\"] , index=y_test2.index )\ndfpred_fat1=pd.concat([dfpred_fat,y_test2],axis=1)\ndfpred_fat1.sample(30)","8f244c71":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test2,predictions_fat)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","e39357d9":"xgb = XGBRegressor(n_estimators = 2400 , random_state = 0 , max_depth = 26)\nxgb.fit(df_train_final_ConCases,y_conf)","0a473ddf":"df_train_final_fat","cf7be142":"pred_conf = xgb.predict(df_test_final)\npredictions_conf = [round(value) for value in pred_conf]\npredictions_conf","da57a076":"predictions_conf  = np.around(predictions_conf ,decimals = 0)\npredictions_conf ","e7866028":"conf_test=pd.DataFrame(predictions_conf,index=df_test_final.index,columns=[\"ConfirmedCases\"])\ndf_test_final=pd.concat([df_test_final,conf_test],axis=1)","0e92e38a":"df_test_final.loc[10135]","6b478747":"xgb2 = XGBRegressor(n_estimators = 2400 , random_state = 0 , max_depth = 26)\nxgb2.fit(df_train_final_fat,y_fat)","082bb21f":"df_test_final","aa18474b":"df_test_final=df_test_final[['Country_Region', 'ConfirmedCases', 'dayofweek', 'quarter', 'month',\n       'dayofyear', 'dayofmonth', 'weekofyear']]","70d09665":"df_test_final","c6000fa1":"pred_fat = xgb2.predict(df_test_final)\npredictions_fat = [round(value) for value in pred_fat]\npredictions_fat","5806307c":"predictions_fat  = np.around(predictions_fat ,decimals = 0)\npredictions_fat ","b41bbafc":"df_sub=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv\")\ndf_sub.tail(5)","a8a064e6":"df_sub['ConfirmedCases']=predictions_conf\ndf_sub['Fatalities']=predictions_fat","cead074e":"df_sub","74915c54":"df_sub.to_csv(\"submission.csv\" , index = False)","27678322":"## Function to transform Date To Others features\n","96f928a9":"# Train ","2e1bb423":"   # TEST Date ","54b7286d":"# TRAIN CORR","60d56c6f":"# Encoder Test ","1125d76b":"# df train && Y conf ","e71480a2":"# Encoder Train ","2af0e375":"# TRAIN date ","929d49e9":"# 2- Test "}}