{"cell_type":{"5a5d9c7a":"code","2bf786a0":"code","889a4186":"code","8331b860":"code","cd6c3ccf":"code","462897f3":"code","ba7ca6ea":"code","2798024d":"code","88c48613":"code","61818c03":"code","3fde607a":"code","29ab31da":"code","300f1e57":"code","714c5477":"code","00e4633b":"code","4de40bb2":"code","5a9edb93":"code","eb6ea02f":"code","81b56f78":"code","b5be561f":"code","bb16930c":"code","604dc10b":"code","05673fbf":"code","ee09a6b8":"code","f5b5da7b":"code","f25fd797":"markdown","d9197650":"markdown","cb99cd9b":"markdown","de35907f":"markdown","ac105002":"markdown","130fd637":"markdown","4aa25216":"markdown","1f1a682f":"markdown","7a4dafa7":"markdown","90a5a3b0":"markdown","9b9a1c1d":"markdown","184ff713":"markdown","4704fb47":"markdown","ea28d791":"markdown","1597b43e":"markdown","1f97c9e1":"markdown","4566a7fe":"markdown","3040429b":"markdown","b4d9490d":"markdown","8588ffbc":"markdown","6753bac3":"markdown","b5db7990":"markdown","784764af":"markdown","ae1ca199":"markdown","0369e74b":"markdown"},"source":{"5a5d9c7a":"import pandas as pd\nimport numpy as np\nimport random\nimport time\nimport matplotlib.pyplot as plt\n# % matplotlib inline\nimport seaborn as sns\nfrom sklearn.metrics import matthews_corrcoef\nimport datetime\n\nimport torch\nfrom transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset, random_split\nfrom torch.utils.data import DataLoader, RandomSampler, SequentialSampler\nfrom transformers import BertForSequenceClassification, AdamW, BertConfig\nfrom transformers import get_linear_schedule_with_warmup","2bf786a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","889a4186":"bert_model_name = 'bert-base-multilingual-cased'  # 'bert-base-uncased'","8331b860":"# If there's a GPU available...\nif torch.cuda.is_available ():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device (\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count ())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device (\"cpu\")","cd6c3ccf":"# Saving best-practices: if you use defaults names for the model, you can reload it using from_pretrained()\n\noutput_dir = '.\/model_save\/'\n\ndef save_my_bert_model (model, tokenizer, output_dir):\n\n    # Create output directory if needed\n    if not os.path.exists (output_dir):\n        os.makedirs (output_dir)\n\n    print (\"Saving model to %s\" % output_dir)\n\n    # Save a trained model, configuration and tokenizer using `save_pretrained()`.\n    # They can then be reloaded using `from_pretrained()`\n    model_to_save = model.module if hasattr (model, 'module') else model  # Take care of distributed\/parallel training\n    model_to_save.save_pretrained (output_dir)\n    tokenizer.save_pretrained (output_dir)\n\n    # Good practice: save your training arguments together with the trained model\n    # torch.save(args, os.path.join(output_dir, 'training_args.bin'))\n    return","462897f3":"def load_my_bert_model (output_dir, model_class=BertForSequenceClassification, tokenizer_class=BertTokenizer):\n    \n    # Load a trained model and vocabulary that you have fine-tuned\n    model = model_class.from_pretrained (output_dir)\n    tokenizer = tokenizer_class.from_pretrained (output_dir)\n\n    # Copy the model to the GPU.\n    model.to (device)\n    return model, tokenizer","ba7ca6ea":"train = pd.read_csv(\"..\/input\/contradictory-my-dear-watson\/train.csv\")\ntrain.head()","2798024d":"sentences1 = train.premise.values\nsentences2 = train.hypothesis.values\nlabels     = train.label.values","88c48613":"tokenizer = BertTokenizer.from_pretrained (bert_model_name, do_lower_case=True)","61818c03":"# Print the original sentence.\nprint (' Original: ', sentences1[0])\n\n# Print the sentence split into tokens.\nprint ('Tokenized: ', tokenizer.tokenize (sentences1[0]))  # tokenizer (sentences1[0]) = tokenizer.encode_plus()\n\n# Print the sentence mapped to token ids.\nprint ('Token IDs: ', tokenizer.convert_tokens_to_ids (tokenizer.tokenize (sentences1[0])))","3fde607a":"max_len = 0\n\n# For every sentence...\nfor sent in sentences1:\n\n    # Tokenize the text and add `[CLS]` and `[SEP]` tokens.\n    input_ids = tokenizer.encode (sent, add_special_tokens=True)\n\n    # Update the maximum sentence length.\n    max_len = max (max_len, len (input_ids))\n\nprint ('Max sentence length: ', max_len, 'setting it =', 256)\nmax_len = 256","29ab31da":"# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\nattention_masks = []\nsegment_ids = []\n\n# For every sentence...\nfor sent1, sent2 in zip (sentences1, sentences2):\n    encoded_dict = tokenizer (\n                        sent1,                     # 1st of the Sentence pair to encode.\n                        sent2,                     # 2nd of the Sentence pair to encode. \n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        truncation=True,           # just max_len will not automatically truncate\n                        max_length = max_len,      # Pad & truncate all sentences.\n                        padding='max_length',\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n    )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append (encoded_dict['input_ids'])\n    \n    # Add its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append (encoded_dict['attention_mask'])\n    \n    # Add segment ids i.e differentiate 1st sentence\/text from second.\n    segment_ids.append (encoded_dict['token_type_ids'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat (input_ids, dim=0)\nattention_masks = torch.cat (attention_masks, dim=0)\nsegment_ids = torch.cat (segment_ids, dim=0)\nlabels = torch.tensor (labels)\n\n# Print sentence 0, now as a list of IDs.\nprint ('Original: ', sentences1[0], sentences2[0])\nprint ('Token IDs:', input_ids[0])","300f1e57":"encoded_dict","714c5477":"# input_ids -> max_len, attention_mask = 1 for each token of the input including [CLS] & [SEP]; = 0 for padding [PAD]\nlen (input_ids[0]), (encoded_dict['input_ids']>0).sum(), (encoded_dict['attention_mask']>0).sum()","00e4633b":"# Combine the training inputs into a TensorDataset.\ndataset = TensorDataset (input_ids, attention_masks, segment_ids, labels)\n\n# Create a 90-10 train-validation split.\n\n# Calculate the number of samples to include in each set.\ntrain_size = int (0.9 * len (dataset))\nval_size = len (dataset) - train_size\n\n# Divide the dataset by randomly selecting samples.\ntrain_dataset, val_dataset = random_split (dataset, [train_size, val_size])\n\nprint('{:>5,} training samples'.format (train_size))\nprint('{:>5,} validation samples'.format (val_size))","4de40bb2":"# The DataLoader needs to know our batch size for training, so we specify it \n# here. For fine-tuning BERT on a specific task, the authors recommend a batch \n# size of 16 or 32.\nbatch_size = 32\n\n# Create the DataLoaders for our training and validation sets.\n# We'll take training samples in random order. \ntrain_dataloader = DataLoader (\n            train_dataset,  # The training samples.\n            sampler = RandomSampler (train_dataset), # Select batches randomly\n            batch_size = batch_size # Trains with this batch size.\n)\n\n# For validation the order doesn't matter, so we'll just read them sequentially.\nvalidation_dataloader = DataLoader (\n            val_dataset, # The validation samples.\n            sampler = SequentialSampler (val_dataset), # Pull out batches sequentially.\n            batch_size = batch_size # Evaluate with this batch size.\n)","5a9edb93":"# Load BertForSequenceClassification, the pretrained BERT model with a single \n# linear classification layer on top. \nmodel = BertForSequenceClassification.from_pretrained (\n    \n    bert_model_name,              # Use the pretrained BERT model.\n    num_labels = 3,               # The number of output labels--2 for binary classification.\n                                  # You can increase this for multi-class tasks.   \n    output_attentions = False,    # Whether the model returns attentions weights.\n    output_hidden_states = False, # Whether the model returns all hidden-states.\n)\n\n# Tell pytorch to run this model on the GPU.\nmodel.cuda()","eb6ea02f":"# Note: AdamW is a class from the huggingface library (as opposed to pytorch) \n# I believe the 'W' stands for 'Weight Decay fix\"\noptimizer = AdamW (model.parameters (),\n                   lr = 5e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5\n                   eps = 1e-8 # args.adam_epsilon  - default is 1e-8 is \u201ca very small number to prevent any division by zero\"\n)\n\n# Number of training epochs. The BERT authors recommend between 2 and 4. \n# We chose to run for 4, but we'll see later that this may be over-fitting the\n# training data.\nepochs = 4\n\n# Total number of training steps is [number of batches] x [number of epochs]. \n# (Note that this is not the same as the number of training samples).\ntotal_steps = len (train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nscheduler = get_linear_schedule_with_warmup (optimizer, \n                                             num_warmup_steps = 0, # Default value in run_glue.py\n                                             num_training_steps = total_steps)","81b56f78":"# Function to calculate the accuracy\/matthews correlatoin coefficient, of our predictions vs labels\ndef flat_accuracy (preds, labels):\n    \n    pred_flat = np.argmax (preds, axis=1).flatten ()\n    labels_flat = labels.flatten ()\n    acc = np.sum (pred_flat == labels_flat) \/ len (labels_flat)\n    mcc = matthews_corrcoef (labels_flat, pred_flat)\n    return mcc\n\ndef format_time (elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    \n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str (datetime.timedelta (seconds=elapsed_rounded))","b5be561f":"# This training code is based on the `run_glue.py` script here:\n# https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128\n\n# Set the seed value all over the place to make this reproducible.\nseed_val = 42\n\nrandom.seed (seed_val)\nnp.random.seed (seed_val)\ntorch.manual_seed (seed_val)\ntorch.cuda.manual_seed_all (seed_val)\n\n# We'll store a number of quantities such as training and validation loss, \n# validation accuracy, and timings.\ntraining_stats = []\n\n# Measure the total training time for the whole run.\ntotal_t0 = time.time()\n\n# For each epoch...\nfor epoch_i in range(0, epochs):\n    \n    # ========================================\n    #               Training\n    # ========================================\n    \n    # Perform one full pass over the training set.\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_train_loss = 0\n\n    # Put the model into training mode. Don't be mislead--the call to \n    # `train` just changes the *mode*, it doesn't *perform* the training.\n    # `dropout` and `batchnorm` layers behave differently during training\n    # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-model-train-do-in-pytorch)\n    model.train()\n\n    # For each batch of training data...\n    for step, batch in enumerate(train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n\n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n        # `to` method.\n        #\n        # `batch` contains four pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: segment_ids\n        #   [3]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_segment_ids = batch[2].to(device)\n        b_labels = batch[3].to(device)\n\n        # Always clear any previously calculated gradients before performing a\n        # backward pass. PyTorch doesn't do this automatically because \n        # accumulating the gradients is \"convenient while training RNNs\". \n        # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n        model.zero_grad()        \n\n        # Perform a forward pass (evaluate the model on this training batch).\n        # The documentation for this `model` function is here: \n        # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n        # It returns different numbers of parameters depending on what arguments\n        # arge given and what flags are set. For our useage here, it returns\n        # the loss (because we provided labels) and the \"logits\"--the model\n        # outputs prior to activation.\n        loss, logits = model(b_input_ids, \n                             token_type_ids=b_segment_ids, \n                             attention_mask=b_input_mask, \n                             labels=b_labels)\n\n        # Accumulate the training loss over all of the batches so that we can\n        # calculate the average loss at the end. `loss` is a Tensor containing a\n        # single value; the `.item()` function just returns the Python value \n        # from the tensor.\n        total_train_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        # Clip the norm of the gradients to 1.0.\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        # Update parameters and take a step using the computed gradient.\n        # The optimizer dictates the \"update rule\"--how the parameters are\n        # modified based on their gradients, the learning rate, etc.\n        optimizer.step()\n\n        # Update the learning rate.\n        scheduler.step()\n\n    # Calculate the average loss over all of the batches.\n    avg_train_loss = total_train_loss \/ len(train_dataloader)            \n    \n    # Measure how long this epoch took.\n    training_time = format_time(time.time() - t0)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(training_time))\n        \n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    model.eval()\n\n    # Tracking variables \n    total_eval_accuracy = 0\n    total_eval_loss = 0\n    nb_eval_steps = 0\n\n    # Evaluate data for one epoch\n    for batch in validation_dataloader:\n        \n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using \n        # the `to` method.\n        #\n        # `batch` contains four pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: segment_ids\n        #   [3]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_segment_ids = batch[2].to(device)\n        b_labels = batch[3].to(device)\n        \n        # Tell pytorch not to bother with constructing the compute graph during\n        # the forward pass, since this is only needed for backprop (training).\n        with torch.no_grad():        \n\n            # Forward pass, calculate logit predictions.\n            # token_type_ids is the same as the \"segment ids\", which \n            # differentiates sentence 1 and 2 in 2-sentence tasks.\n            # The documentation for this `model` function is here: \n            # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n            # Get the \"logits\" output by the model. The \"logits\" are the output\n            # values prior to applying an activation function like the softmax.\n            (loss, logits) = model(b_input_ids, \n                                   token_type_ids=b_segment_ids, \n                                   attention_mask=b_input_mask,\n                                   labels=b_labels)\n            \n        # Accumulate the validation loss.\n        total_eval_loss += loss.item()\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n\n        # Calculate the accuracy for this batch of test sentences, and\n        # accumulate it over all batches.\n        total_eval_accuracy += flat_accuracy (logits, label_ids)\n        \n\n    # Report the final accuracy for this validation run.\n    avg_val_accuracy = total_eval_accuracy \/ len (validation_dataloader)\n    print(\"  Accuracy: {0:.2f}\".format (avg_val_accuracy))\n\n    # Calculate the average loss over all of the batches.\n    avg_val_loss = total_eval_loss \/ len(validation_dataloader)\n    \n    # Measure how long the validation run took.\n    validation_time = format_time (time.time() - t0)\n    \n    print(\"  Validation Loss: {0:.2f}\".format (avg_val_loss))\n    print(\"  Validation took: {:}\".format (validation_time))\n\n    # Record all statistics from this epoch.\n    training_stats.append (\n        {\n            'epoch': epoch_i + 1,\n            'Training Loss': avg_train_loss,\n            'Valid. Loss': avg_val_loss,\n            'Valid. Accur.': avg_val_accuracy,\n            'Training Time': training_time,\n            'Validation Time': validation_time\n        }\n    )\n\nprint(\"\")\nprint(\"Training complete!\")\n\nprint(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))","bb16930c":"# Display floats with two decimal places.\npd.set_option ('precision', 2)\n\n# Create a DataFrame from our training statistics.\ndf_stats = pd.DataFrame (data=training_stats)\n\n# Use the 'epoch' as the row index.\ndf_stats = df_stats.set_index ('epoch')\n\n# A hack to force the column headers to wrap.\n#df = df.style.set_table_styles ([dict (selector=\"th\",props=[('max-width', '70px')])])\n\n# Display the table.\ndf_stats","604dc10b":"# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(df_stats['Training Loss'], 'b-o', label=\"Training\")\nplt.plot(df_stats['Valid. Loss'], 'g-o', label=\"Validation\")\n\n# Label the plot.\nplt.title(\"Training & Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.xticks([1, 2, 3, 4])\n\nplt.show()","05673fbf":"# Load the dataset into a pandas dataframe.\ntestDF = pd.read_csv(\"..\/input\/contradictory-my-dear-watson\/test.csv\")\n\n# Report the number of sentences.\nprint('Number of test sentences: {:,}\\n'.format(testDF.shape[0]))\n\n# Create sentence and label lists\nsentences1 = testDF.premise.values\nsentences2 = testDF.hypothesis.values\n# labels     = testDF.label.values\n\n# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\nattention_masks = []\nsegment_ids = []\n\n# For every sentence...\nfor sent1, sent2 in zip (sentences1, sentences2):\n    encoded_dict = tokenizer.encode_plus (\n                        sent1,                     # 1st Sentence of the pair to encode.\n                        sent2,                     # 2nd Sentence of the pair to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        truncation=True,           # just max_len will not automatically truncate\n                        max_length = max_len,      # Pad & truncate all sentences.\n                        padding='max_length',\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n    )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append (encoded_dict['input_ids'])\n    \n    # Add its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append (encoded_dict['attention_mask'])\n    \n    # Add segment ids i.e differentiate 1st sentence\/text from second.\n    segment_ids.append (encoded_dict['token_type_ids'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat (input_ids, dim=0)\nattention_masks = torch.cat (attention_masks, dim=0)\nsegment_ids = torch.cat (segment_ids, dim=0)\n# labels = torch.tensor (labels)\n\n# Set the batch size.  \nbatch_size = 32  \n\n# Create the DataLoader.\nprediction_data = TensorDataset (input_ids, attention_masks, segment_ids) #, labels)\nprediction_sampler = SequentialSampler (prediction_data)\nprediction_dataloader = DataLoader (prediction_data, sampler=prediction_sampler, batch_size=batch_size)","ee09a6b8":"# Prediction on test set\n\nprint ('Predicting labels for {:,} test sentences...'.format(len(input_ids)))\n\n# Put model in evaluation mode\nmodel.eval ()\n\n# Tracking variables \npredictions = []\n# true_labels = []\n\n# Predict \nfor batch in prediction_dataloader:\n  # Add batch to GPU\n  batch = tuple (t.to (device) for t in batch)\n  \n  # Unpack the inputs from our dataloader\n  b_input_ids, b_input_mask, b_segment_ids = batch\n  # b_input_ids, b_input_mask, b_segment_ids, b_labels = batch\n  \n  # Telling the model not to compute or store gradients, saving memory and \n  # speeding up prediction\n  with torch.no_grad ():\n      # Forward pass, calculate logit predictions\n      outputs = model (b_input_ids, token_type_ids=b_segment_ids, attention_mask=b_input_mask)\n\n  logits = outputs[0]\n\n  # Move logits and labels to CPU\n  logits = logits.detach ().cpu ().numpy ()\n  # label_ids = b_labels.to ('cpu').numpy ()\n  \n  # Store predictions and true labels\n  predictions.append (logits)\n  # true_labels.append (label_ids)\n  print ('Done predictions for ', len(predictions), '\/', len(prediction_dataloader), 'batches')\n\nprint('    DONE.')","f5b5da7b":"# Combine the results across all batches. \nflat_predictions = np.concatenate (predictions, axis=0)\n\n# For each sample, pick the label (0 or 1) with the higher score.\nflat_predictions = np.argmax (flat_predictions, axis=1).flatten()\n\n# Combine the correct labels for each batch into a single list.\n# flat_true_labels = np.concatenate (true_labels, axis=0)\n\n# Calculate the MCC\n# mcc = matthews_corrcoef (flat_true_labels, flat_predictions)\n# print('Total MCC: %.3f' % mcc)\n\nsubmitDF = testDF[['id']]\nsubmitDF['prediction'] = flat_predictions\nsubmitDF.prediction = submitDF.prediction.astype (int)\nsubmitDF.to_csv ('submission.csv', index=False)\nsubmitDF.head ()","f25fd797":"# This code is taken from:\n# https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L102\n\n# Don't apply weight decay to any parameters whose names include these tokens.\n# (Here, the BERT doesn't have `gamma` or `beta` parameters, only `bias` terms)\nno_decay = ['bias', 'LayerNorm.weight']\n\n# Separate the `weight` parameters from the `bias` parameters. \n# - For the `weight` parameters, this specifies a 'weight_decay_rate' of 0.01. \n# - For the `bias` parameters, the 'weight_decay_rate' is 0.0. \noptimizer_grouped_parameters = [\n    # Filter for all parameters which *don't* include 'bias', 'gamma', 'beta'.\n    {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],\n     'weight_decay_rate': 0.1},\n    \n    # Filter for parameters which *do* include those.\n    {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)],\n     'weight_decay_rate': 0.0}\n]\n\n# Note - `optimizer_grouped_parameters` only includes the parameter values, not the names.","d9197650":"We use MCC here because the classes are imbalanced:","cb99cd9b":"With the test set prepared, we can apply our fine-tuned model to generate predictions on the test set.","de35907f":"# Mount Google Drive to this Notebook instance.\nfrom google.colab import drive\n    drive.mount ('\/content\/drive')\n\n# Copy the model files to a directory in your Google Drive.\n!cp -r .\/model_save\/ \".\/drive\/Shared drives\/ChrisMcCormick.AI\/Blog Posts\/BERT Fine-Tuning\/\"","ac105002":"To save your model across Colab Notebook sessions, download it to your local machine, or ideally copy it to your Google Drive.","130fd637":"Now we\u2019ll load the holdout dataset and prepare inputs just as we did with the training set. Then we\u2019ll evaluate predictions using Matthew\u2019s correlation coefficient because this is the metric used by the wider NLP community to evaluate performance on CoLA. With this metric, +1 is the best score, and -1 is the worst score. This way, we can see how well we perform against the state of the art models for this specific task.","4aa25216":"Note: To maximize the score, we should remove the \u201cvalidation set\u201d (which we used to help determine how many epochs to train for) and train on the entire training set.","1f1a682f":"print ('Positive samples: %d of %d (%.2f%%)' % (testDF.label.sum(), len(testDF.label), (testDF.label.sum() \/ len(testDF.label) * 100.0)))","7a4dafa7":"We are required to:\n\n1. Add special tokens to the start and end of each sentence: [CLS], [SEP], and [PAD].\n\n2. Pad & truncate all sentences to a single constant length.\n\n3. Explicitly differentiate real tokens from padding tokens with the \u201cattention mask\u201d.","90a5a3b0":"Let\u2019s view the summary of the training process.","9b9a1c1d":"We\u2019ll also create an iterator for our dataset using the torch DataLoader class. This helps save on memory during training because, unlike a for loop, with an iterator the entire dataset does not need to be loaded into memory.","184ff713":"huggingface pytorch implementation includes a set of interfaces designed for a variety of NLP tasks. Though these interfaces are all built on top of a trained BERT model, each has different top layers and output types designed to accomodate their specific NLP task.\n\nHere is the current list of classes provided for fine-tuning:\n\n1. BertModel\n2. BertForPreTraining\n3. BertForMaskedLM\n4. BertForNextSentencePrediction\n5. BertForSequenceClassification - The one we\u2019ll use.\n6. BertForTokenClassification\n7. BertForQuestionAnswering","4704fb47":"The huggingface example includes the following code block for enabling weight decay, but the default decay rate is \u201c0.0\u201d, so I moved this to the appendix.\n\nThis block essentially tells the optimizer to not apply weight decay to the bias terms (e.g., $ b $ in the equation $ y = Wx + b $ ). Weight decay is a form of regularization\u2013after calculating the gradients, we multiply them by, e.g., 0.99.","ea28d791":"For the purposes of fine-tuning, the authors recommend choosing from the following values (from Appendix A.3 of the BERT paper):\n\n1. Batch size: 16, 32\n2. Learning rate (Adam): 5e-5, 3e-5, 2e-5\n3. Number of epochs: 2, 3, 4","1597b43e":"matthews_set = []\n\n# Evaluate each test batch using Matthew's correlation coefficient\nprint ('Calculating Matthews Corr. Coef. for each batch...')\n\n# For each input batch...\nfor i in range (len (true_labels)):\n  \n  # The predictions for this batch are a 2-column ndarray (one column for \"0\" \n  # and one column for \"1\"). Pick the label with the highest value and turn this\n  # in to a list of 0s and 1s.\n  pred_labels_i = np.argmax (predictions[i], axis=1).flatten ()\n  \n  # Calculate and store the coef for this batch.  \n  matthews = matthews_corrcoef (true_labels[i], pred_labels_i)                \n  matthews_set.append (matthews)","1f97c9e1":"Training with Validation loop","4566a7fe":"BERT has two constraints:\n\n1. All sentences must be padded or truncated to a single, fixed length.\n2. The maximum sentence length is 512 tokens. You can reduce it to ur custom needs.","3040429b":"Before we are ready to encode our text, though, we need to decide on a maximum sentence length for padding \/ truncating to.","b4d9490d":"Saving & Loading Fine-Tuned Model","8588ffbc":"Now we\u2019ll combine the results for all of the batches and calculate our final MCC score.","6753bac3":"Let\u2019s apply the tokenizer to one sentence just to see the output.","b5db7990":"The following functions will load the model back from disk.","784764af":"# Create a barplot showing the MCC score for each batch of test samples.\nax = sns.barplot (x=list (range (len (matthews_set))), y=matthews_set, ci=None)\n\nplt.title ('MCC Score per Batch')\nplt.ylabel ('MCC Score (-1 to +1)')\nplt.xlabel ('Batch #')\n\nplt.show ()","ae1ca199":"Notice that, while the the training loss is going down with each epoch, the validation loss is increasing! This suggests that we are training our model too long, and it\u2019s over-fitting on the training data.\n\n(For reference, we are using 7,695 training samples and 856 validation samples).\n\nValidation Loss is a more precise measure than accuracy, because with accuracy we don\u2019t care about the exact output value, but just which side of a threshold it falls on.\n\nIf we are predicting the correct answer, but with less confidence, then validation loss will catch this, while accuracy will not.","0369e74b":"The tokenizer.encode_plus function combines multiple steps for us:\n\n1. Split the sentence into tokens.\n\n2. Add the special [CLS] and [SEP] tokens.\n\n3. Map the tokens to their IDs.\n\n4. Pad or truncate all sentences to the same length.\n\n5. Create the attention masks which explicitly differentiate real tokens from [PAD] tokens.\n\nThe first four features are in tokenizer.encode, but I\u2019m using tokenizer.encode_plus to get the fifth item (attention masks)."}}