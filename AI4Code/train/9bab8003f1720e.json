{"cell_type":{"177688f9":"code","4f95a163":"code","5c767ab8":"code","9ed1067e":"code","40f53ddc":"code","d7b1d2b1":"code","d317bbb1":"code","186da55e":"code","20533501":"code","b06cc888":"code","cd6dbd9b":"code","4f2ecfb5":"code","2d92782f":"code","f098e819":"code","a8c5579d":"code","2f7fbce8":"code","32643070":"code","5a4a90b8":"code","ef792e5e":"code","194f5f32":"code","17151069":"code","2e8e863e":"code","ccf947e5":"code","078f87f0":"code","e9305e75":"code","8204b847":"code","b0b52b20":"markdown","019724b6":"markdown","559eb861":"markdown","38bf20c4":"markdown"},"source":{"177688f9":"import numpy as np \nimport pandas as pd \nimport glob\n\nfrom kaggle_datasets import KaggleDatasets\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nimport tensorflow_addons as tfa\n\n\nimport matplotlib.pyplot as plt \nimport matplotlib.image as mpimg\n\nfrom PIL import Image\nimport plotly.express as px\nimport string\nimport re\nimport cv2\nimport warnings\n\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n        \ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n    \nprint(tf.__version__)       \n\nwarnings.filterwarnings(\"ignore\")","4f95a163":"# Images Directory jpg\nmonet_path = \"..\/input\/gan-getting-started\/monet_jpg\/\"\nphoto_path = \"..\/input\/gan-getting-started\/photo_jpg\"\n\nprint('Monet TFRecord Files:', len(monet_path))\nprint('photo TFRecord Files:', len(photo_path))","5c767ab8":"for dirname, _, filenames in os.walk('\/kaggle\/input\/gan-getting-started\/monet_jpg'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n       # print(os.path.join(dirname, filename))\n    \ndef img_nparray(dir):\n    data = []\n    for i, image_path in enumerate(glob.glob(os.path.join(dir,'*.jpg'))):\n        if i > 4:\n            continue\n        img = cv2.imread(image_path) \n        img_expanded = np.expand_dims(img,axis=0) \n        data.append(img_expanded)    \n    data_np = np.concatenate(data,axis=0)\n    return data_np\n\ndef img_show_grid(imd_data,height,width):\n    %matplotlib inline\n    # Show multi img\n    plt.figure(figsize=(12,12))\n    for i,d in enumerate(imd_data):\n        if i >= width*height:         \n            continue\n        plt.subplot(height,width,i+1)\n        plt.imshow(\uff44)","9ed1067e":"monet_dir = '\/kaggle\/input\/gan-getting-started\/monet_jpg\/'\nmonet_data = img_nparray(monet_dir)\nimg_show_grid(monet_data,1,4)","40f53ddc":"photo_dir = '\/kaggle\/input\/gan-getting-started\/photo_jpg\/'\nphoto_data = img_nparray(photo_dir)\nimg_show_grid(photo_data,1,4)","d7b1d2b1":"GCS_PATH = KaggleDatasets().get_gcs_path()\n\nMONET_FILENAMES = tf.io.gfile.glob(str(GCS_PATH + '\/monet_tfrec\/*.tfrec'))\nprint('Monet TFRecord Files:', len(MONET_FILENAMES))\n\nPHOTO_FILENAMES = tf.io.gfile.glob(str(GCS_PATH + '\/photo_tfrec\/*.tfrec'))\nprint('Photo TFRecord Files:', len(PHOTO_FILENAMES))","d317bbb1":"IMAGE_SIZE = [256,256]\n\ndef decode_image(image):\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = (tf.cast(image, tf.float32)\/127.5)-1\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image\n\ndef read_tfrecord(example):\n    tfrecord_format = {\n        \"image_name\": tf.io.FixedLenFeature([], tf.string),\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"target\": tf.io.FixedLenFeature([], tf.string)\n    }\n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_image(example['image'])\n    return image\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    dataset = tf.data.TFRecordDataset(filenames)\n    dataset = dataset.map(read_tfrecord, num_parallel_calls=AUTOTUNE)\n    return dataset\n\nmonet_dataset = load_dataset(MONET_FILENAMES).batch(1)\nphoto_dataset = load_dataset(PHOTO_FILENAMES).batch(1)\n\n## Used for the metric calculation\nfid_photo_ds = load_dataset(PHOTO_FILENAMES).take(1024).batch(32*strategy.num_replicas_in_sync).prefetch(32)\nfid_monet_ds = load_dataset(MONET_FILENAMES).batch(32*strategy.num_replicas_in_sync).prefetch(32)\n\nexample_monet = next(iter(monet_dataset))\nexample_photo = next(iter(photo_dataset))\n\nplt.subplot(121)\nplt.title('Photo')\nplt.imshow(example_photo[0] * 0.5 + 0.5)\n# plt.imshow(example_photo[0])\n\nplt.subplot(122)\nplt.title('Monet')\nplt.imshow(example_monet[0] * 0.5 + 0.5)\n# plt.imshow(example_monet[0])","186da55e":"def prepare_dataset(monet_filenames, photo_filenames):\n    \n    monet_dataset = load_dataset(monet_filenames)\n    photo_dataset = load_dataset(photo_filenames)  \n        \n#     monet_dataset = monet_dataset.shuffle(100000, seed=42)\n#     photo_dataset = photo_dataset.shuffle(100000, seed=42)\n    \n    monet_dataset = monet_dataset.repeat()\n    photo_dataset = photo_dataset.repeat()\n    \n#     monet_dataset = monet_dataset.batch(16)\n#     photo_dataset = photo_dataset.batch(16)\n    \n    monet_dataset = monet_dataset.batch(4)\n    photo_dataset = photo_dataset.batch(4)\n    \n    monet_dataset = monet_dataset.prefetch(AUTOTUNE)\n    photo_dataset = photo_dataset.prefetch(AUTOTUNE)\n    \n    final_dataset = tf.data.Dataset.zip((monet_dataset, photo_dataset))\n    \n    return final_dataset","20533501":"final_dataset = prepare_dataset(MONET_FILENAMES, PHOTO_FILENAMES)\n","b06cc888":"with strategy.scope():\n\n    inception_model = tf.keras.applications.InceptionV3(input_shape=(256,256,3),pooling=\"avg\",include_top=False)\n\n    mix3  = inception_model.get_layer(\"mixed9\").output\n    f0 = tf.keras.layers.GlobalAveragePooling2D()(mix3)\n\n    inception_model = tf.keras.Model(inputs=inception_model.input, outputs=f0)\n    inception_model.trainable = False\n\n    \n    \n    def calculate_activation_statistics_mod(images,fid_model):\n\n            act=tf.cast(fid_model.predict(images), tf.float32)\n\n            mu = tf.reduce_mean(act, axis=0)\n            mean_x = tf.reduce_mean(act, axis=0, keepdims=True)\n            mx = tf.matmul(tf.transpose(mean_x), mean_x)\n            vx = tf.matmul(tf.transpose(act), act)\/tf.cast(tf.shape(act)[0], tf.float32)\n            sigma = vx - mx\n            return mu, sigma\n    myFID_mu2, myFID_sigma2 = calculate_activation_statistics_mod(fid_monet_ds,inception_model)\n    fids=[]","cd6dbd9b":"with strategy.scope():\n    def calculate_frechet_distance(mu1,sigma1,mu2,sigma2):\n        fid_epsilon = 1e-14\n       \n        covmean = tf.linalg.sqrtm(tf.cast(tf.matmul(sigma1,sigma2),tf.complex64))\n\n        covmean = tf.cast(tf.math.real(covmean),tf.float32)\n  \n        tr_covmean = tf.linalg.trace(covmean)\n\n        return tf.matmul(tf.expand_dims(mu1 - mu2, axis=0),tf.expand_dims(mu1 - mu2, axis=1)) + tf.linalg.trace(sigma1) + tf.linalg.trace(sigma2) - 2 * tr_covmean\n    \n    \n    def FID(images,gen_model,inception_model=inception_model,myFID_mu2=myFID_mu2, myFID_sigma2=myFID_sigma2):\n        inp = layers.Input(shape=[256, 256, 3], name='input_image')\n        x  = gen_model(inp)\n        x=inception_model(x)\n        fid_model = tf.keras.Model(inputs=inp, outputs=x)\n\n        mu1, sigma1= calculate_activation_statistics_mod(images,fid_model)\n\n        fid_value = calculate_frechet_distance(mu1, sigma1,myFID_mu2, myFID_sigma2)\n\n\n        return fid_value","4f2ecfb5":"OUTPUT_CHANNELS = 3\n\ndef downsample(filters, size, apply_instancenorm=True):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = tf.keras.initializers.RandomNormal(mean=0., stddev=0.02)\n    \n    model_down = tf.keras.Sequential()\n    model_down.add(layers.Conv2D(filters, size, strides=2, padding='same', \n                                kernel_initializer=initializer, use_bias=False))\n    \n    if apply_instancenorm:\n        model_down.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n    \n    model_down.add(layers.LeakyReLU())\n    \n    return model_down\n    ","2d92782f":"def upsample(filters, size, apply_dropout=False):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = tf.keras.initializers.RandomNormal(mean=0., stddev=0.02)\n    \n    model_up = tf.keras.Sequential()\n    model_up.add(layers.Conv2DTranspose(filters, size, strides=2, padding='same', \n                                kernel_initializer=initializer, use_bias=False))\n    \n    model_up.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n    \n    if apply_dropout:\n        model_up.add(layers.Dropout(0.5))\n    \n    model_up.add(layers.ReLU())\n    \n    return model_up  ","f098e819":"def Generator():\n    inputs = layers.Input([256,256,3])\n    \n    down_stack = [\n        downsample(64, 4, apply_instancenorm=False),\n        downsample(128, 4),\n        downsample(256, 4),\n        downsample(512, 4),\n        downsample(512, 4),\n        downsample(512, 4),\n        downsample(512, 4),\n        downsample(512, 4),\n    ]\n    \n    up_stack = [\n        upsample(512, 4, apply_dropout=True),\n        upsample(512, 4, apply_dropout=True),\n        upsample(512, 4, apply_dropout=True),\n        upsample(512, 4),\n        upsample(256, 4),\n        upsample(128, 4),\n        upsample(64, 4),\n    ]\n    \n    initializer = tf.random_normal_initializer(0., 0.02)\n    last = layers.Conv2DTranspose(OUTPUT_CHANNELS, 4, strides=2, padding='same', \n                                kernel_initializer=initializer, activation='tanh')\n    \n    x = inputs\n    \n    skips = []\n    for down in down_stack:\n        x = down(x)\n        skips.append(x)\n    \n    skips = reversed(skips[:-1])\n    \n    for up, skip in zip(up_stack, skips):\n        x = up(x)\n        x = layers.Concatenate()([x, skip])\n    \n    x = last(x)\n    \n    return tf.keras.Model(inputs=inputs, outputs=x)\n    ","a8c5579d":"Generator()\n","2f7fbce8":"def Discriminator():\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = tf.keras.initializers.RandomNormal(mean=0., stddev=0.02)\n    \n    inp = layers.Input(shape=[256, 256, 3], name='input_image')\n    \n    x = inp\n    \n    down1 = downsample(64, 4, False)(x)\n    down2 = downsample(128, 4)(down1)\n    down3 = downsample(256, 4)(down2)\n    \n    zero_pad1 = layers.ZeroPadding2D()(down3)\n    \n    conv = layers.Conv2D(512, 4, strides=1, \n                        kernel_initializer=initializer, use_bias=False)(zero_pad1)\n    \n    norm1 = tfa.layers.InstanceNormalization(gamma_initializer=gamma_init)(conv)\n    \n    leaky_relu = layers.LeakyReLU()(norm1)\n    \n    zero_pad2 = layers.ZeroPadding2D()(leaky_relu)\n    \n    last = layers.Conv2D(1, 4, strides=1, \n                        kernel_initializer=initializer)(zero_pad2)\n    \n    return tf.keras.Model(inputs=inp, outputs=last)","32643070":"Discriminator()\n","5a4a90b8":"with strategy.scope():\n    monet_generator = Generator()\n    photo_generator = Generator()\n    \n    monet_discriminator = Discriminator()\n    photo_discriminator = Discriminator()\n","ef792e5e":"to_monet = monet_generator(example_photo)\n\nplt.subplot(1, 2, 1)\nplt.title(\"Original Photo\")\nplt.imshow(example_photo[0] * 0.5 + 0.5)\n\nplt.subplot(1, 2, 2)\nplt.title(\"Monet-esque Photo\")\nplt.imshow(to_monet[0] * 0.5 + 0.5)\nplt.show()","194f5f32":"class CycleGan(tf.keras.Model):\n    def __init__(\n        self,\n        monet_generator,\n        photo_generator,\n        monet_discriminator,\n        photo_discriminator, \n        lambda_cycle=10):\n        super(CycleGan, self).__init__()\n        self.m_gen = monet_generator\n        self.p_gen = photo_generator\n        self.m_disc = monet_discriminator\n        self.p_disc = photo_discriminator\n        self.lambda_cycle = lambda_cycle\n    \n    def compile(\n        self,\n        m_gen_optimizer,\n        p_gen_optimizer,\n        m_disc_optimizer,\n        p_disc_optimizer,\n        gen_loss_fn,\n        disc_loss_fn,\n        cycle_loss_fn,\n        identity_loss_fn,\n        aug_fn\n        ):\n        super(CycleGan, self).compile()\n        self.m_gen_optimizer = m_gen_optimizer\n        self.p_gen_optimizer = p_gen_optimizer\n        self.m_disc_optimizer = m_disc_optimizer\n        self.p_disc_optimizer = p_disc_optimizer\n        self.gen_loss_fn = gen_loss_fn\n        self.disc_loss_fn = disc_loss_fn\n        self.cycle_loss_fn = cycle_loss_fn\n        self.identity_loss_fn = identity_loss_fn\n        self.aug_fn = aug_fn\n        \n    def train_step(self, batch_data):\n        real_monet, real_photo = batch_data\n        batch_size = tf.shape(real_monet)[0]\n        \n        with tf.GradientTape(persistent=True) as tape:\n            fake_monet = self.m_gen(real_photo, training=True)\n            cycled_photo = self.p_gen(fake_monet, training=True)\n            \n            fake_photo = self.p_gen(real_monet, training=True)\n            cycled_monet = self.m_gen(fake_photo, training=True)\n            \n            same_monet = self.m_gen(real_monet, training=True)\n            same_photo = self.p_gen(real_photo, training=True)\n            \n            # With DiffAugment\n            both_monet = tf.concat([real_monet, fake_monet], axis=0)\n            aug_monet = self.aug_fn(both_monet)\n#             print(\"HERE1\")\n            aug_real_monet = aug_monet[:batch_size]\n            aug_fake_monet = aug_monet[batch_size:]\n#             print(\"HERE2\")\n            disc_real_monet = self.m_disc(aug_real_monet, training=True)\n            disc_real_photo = self.p_disc(real_photo, training=True)\n            \n            disc_fake_monet = self.m_disc(aug_fake_monet, training=True)\n            disc_fake_photo = self.p_disc(fake_photo, training=True)\n\n            monet_gen_loss = self.gen_loss_fn(disc_fake_monet)\n            photo_gen_loss = self.gen_loss_fn(disc_fake_photo)\n            \n            total_cycle_loss = self.cycle_loss_fn(real_monet, cycled_monet, self.lambda_cycle) + self.cycle_loss_fn(real_photo, cycled_photo, self.lambda_cycle)\n            \n            total_monet_gen_loss = total_cycle_loss + monet_gen_loss + self.identity_loss_fn(real_monet,same_monet, self.lambda_cycle)\n            total_photo_gen_loss = total_cycle_loss + photo_gen_loss + self.identity_loss_fn(real_photo,same_photo, self.lambda_cycle)\n            \n            monet_disc_loss = self.disc_loss_fn(disc_real_monet, disc_fake_monet)\n            photo_disc_loss = self.disc_loss_fn(disc_real_photo, disc_fake_photo)\n#         print(\"HERE3\")\n        monet_generator_gradients = tape.gradient(total_monet_gen_loss, self.m_gen.trainable_variables) \n        photo_generator_gradients = tape.gradient(total_photo_gen_loss, self.p_gen.trainable_variables) \n#         print(\"HERE4\")\n        monet_discriminator_gradients = tape.gradient(monet_disc_loss, self.m_disc.trainable_variables) \n        photo_discriminator_gradients = tape.gradient(photo_disc_loss, self.p_disc.trainable_variables)\n#         print(\"HERE5\")\n        self.m_gen_optimizer.apply_gradients(zip(monet_generator_gradients, self.m_gen.trainable_variables))\n        self.p_gen_optimizer.apply_gradients(zip(photo_generator_gradients, self.p_gen.trainable_variables))\n        self.m_disc_optimizer.apply_gradients(zip(monet_discriminator_gradients, self.m_disc.trainable_variables))\n        self.p_disc_optimizer.apply_gradients(zip(photo_discriminator_gradients, self.p_disc.trainable_variables))\n#         print(\"HERE6\")\n        return {\n            \"monet_gen_loss\":total_monet_gen_loss,\n            \"photo_gen_loss\":total_photo_gen_loss,\n            \"monet_disc_loss\":monet_disc_loss,\n            \"photo_disc_loss\":photo_disc_loss\n        }","17151069":"with strategy.scope():\n    def discriminator_loss(real, generated):\n        real_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.ones_like(real), real)\n        \n        generator_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.zeros_like(generated), generated)\n        \n        total_disc_loss = real_loss + generator_loss\n        \n        return 0.5*total_disc_loss\nwith strategy.scope():\n    def generator_loss(generated):\n        return tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.ones_like(generated), generated)\nwith strategy.scope():\n    def cycle_loss(real_image, cycled_image, LAMBDA):\n        return LAMBDA*(tf.reduce_mean(tf.abs(real_image-cycled_image)))\nwith strategy.scope():\n    def identity_loss(real_image, gen_image, LAMBDA):\n        return 0.5*LAMBDA*(tf.reduce_mean(tf.abs(real_image-gen_image)))\nwith strategy.scope():\n# Differentiable Augmentation for Data-Efficient GAN Training\n# Shengyu Zhao, Zhijian Liu, Ji Lin, Jun-Yan Zhu, and Song Han\n# https:\/\/arxiv.org\/pdf\/2006.10738\n# from https:\/\/github.com\/mit-han-lab\/data-efficient-gans\/blob\/master\/DiffAugment_tf.py\n\n    def DiffAugment(x, policy='', channels_first=False):\n        if policy:\n            if channels_first:\n                x = tf.transpose(x, [0, 2, 3, 1])\n            for p in policy.split(','):\n                for f in AUGMENT_FNS[p]:\n                    x = f(x)\n            if channels_first:\n                x = tf.transpose(x, [0, 3, 1, 2])\n        return x\n\n\n    def rand_brightness(x):\n        magnitude = tf.random.uniform([tf.shape(x)[0], 1, 1, 1]) - 0.5\n        x = x + magnitude\n        return x\n\n\n    def rand_saturation(x):\n        magnitude = tf.random.uniform([tf.shape(x)[0], 1, 1, 1]) * 2\n        x_mean = tf.reduce_sum(x, axis=3, keepdims=True) * 0.3333333333333333333\n        x = (x - x_mean) * magnitude + x_mean\n        return x\n\n\n    def rand_contrast(x):\n        magnitude = tf.random.uniform([tf.shape(x)[0], 1, 1, 1]) + 0.5\n        x_mean = tf.reduce_sum(x, axis=[1, 2, 3], keepdims=True) * 5.086e-6\n        x = (x - x_mean) * magnitude + x_mean\n        return x\n\n    def rand_translation(x, ratio=0.125):\n        batch_size = tf.shape(x)[0]\n        image_size = tf.shape(x)[1:3]\n        shift = tf.cast(tf.cast(image_size, tf.float32) * ratio + 0.5, tf.int32)\n        translation_x = tf.random.uniform([batch_size, 1], -shift[0], shift[0] + 1, dtype=tf.int32)\n        translation_y = tf.random.uniform([batch_size, 1], -shift[1], shift[1] + 1, dtype=tf.int32)\n        grid_x = tf.clip_by_value(tf.expand_dims(tf.range(image_size[0], dtype=tf.int32), 0) + translation_x + 1, 0, image_size[0] + 1)\n        grid_y = tf.clip_by_value(tf.expand_dims(tf.range(image_size[1], dtype=tf.int32), 0) + translation_y + 1, 0, image_size[1] + 1)\n        x = tf.gather_nd(tf.pad(x, [[0, 0], [1, 1], [0, 0], [0, 0]]), tf.expand_dims(grid_x, -1), batch_dims=1)\n        x = tf.transpose(tf.gather_nd(tf.pad(tf.transpose(x, [0, 2, 1, 3]), [[0, 0], [1, 1], [0, 0], [0, 0]]), tf.expand_dims(grid_y, -1), batch_dims=1), [0, 2, 1, 3])\n        return x\n\n\n    def rand_cutout(x, ratio=0.5):\n        batch_size = tf.shape(x)[0]\n        image_size = tf.shape(x)[1:3]\n        cutout_size = tf.cast(tf.cast(image_size, tf.float32) * ratio + 0.5, tf.int32)\n        offset_x = tf.random.uniform([tf.shape(x)[0], 1, 1], maxval=image_size[0] + (1 - cutout_size[0] % 2), dtype=tf.int32)\n        offset_y = tf.random.uniform([tf.shape(x)[0], 1, 1], maxval=image_size[1] + (1 - cutout_size[1] % 2), dtype=tf.int32)\n        grid_batch, grid_x, grid_y = tf.meshgrid(tf.range(batch_size, dtype=tf.int32), tf.range(cutout_size[0], dtype=tf.int32), tf.range(cutout_size[1], dtype=tf.int32), indexing='ij')\n        cutout_grid = tf.stack([grid_batch, grid_x + offset_x - cutout_size[0] \/\/ 2, grid_y + offset_y - cutout_size[1] \/\/ 2], axis=-1)\n        mask_shape = tf.stack([batch_size, image_size[0], image_size[1]])\n        cutout_grid = tf.maximum(cutout_grid, 0)\n        cutout_grid = tf.minimum(cutout_grid, tf.reshape(mask_shape - 1, [1, 1, 1, 3]))\n        mask = tf.maximum(1 - tf.scatter_nd(cutout_grid, tf.ones([batch_size, cutout_size[0], cutout_size[1]], dtype=tf.float32), mask_shape), 0)\n        x = x * tf.expand_dims(mask, axis=3)\n        return x\n\n\n    AUGMENT_FNS = {\n        'color': [rand_brightness, rand_saturation, rand_contrast],\n        'translation': [rand_translation],\n        'cutout': [rand_cutout],\n}\n    def aug_fn(image):\n        return DiffAugment(image,\"color,translation,cutout\")\n\n\nwith strategy.scope():\n    monet_generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    \n    monet_discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    \n    callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)\nwith strategy.scope():\n    cycle_gan_model = CycleGan(monet_generator, photo_generator, monet_discriminator, photo_discriminator)\n    \n    cycle_gan_model.compile(\n        m_gen_optimizer = monet_generator_optimizer,\n        p_gen_optimizer = photo_generator_optimizer,\n        m_disc_optimizer = monet_discriminator_optimizer,\n        p_disc_optimizer = photo_discriminator_optimizer,\n        gen_loss_fn = generator_loss,\n        disc_loss_fn = discriminator_loss,\n        cycle_loss_fn = cycle_loss,\n        identity_loss_fn = identity_loss,\n        aug_fn = aug_fn\n    )\n","2e8e863e":"import re\ndef count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nn_monet_samples = count_data_items(MONET_FILENAMES)\nn_photo_samples = count_data_items(PHOTO_FILENAMES)","ccf947e5":"ds_iter = iter(photo_dataset)\nfor n_sample in range(8):\n    example_sample = next(ds_iter)\n    generated_sample = monet_generator(example_sample)\n     \n    f = plt.figure(figsize=(32, 32))\n  \n    plt.subplot(121)\n    plt.title('Input image')\n    plt.imshow(example_sample[0] * 0.5 + 0.5)\n    plt.axis('off')\n\n    plt.subplot(122)\n    plt.title('Generated image')\n    plt.imshow(generated_sample[0] * 0.5 + 0.5)\n    plt.axis('off')\n    plt.show()","078f87f0":"import PIL\n! mkdir ..\/images","e9305e75":"i = 1\nfor img in photo_dataset:\n    prediction = monet_generator(img, training=False)[0].numpy()\n    prediction = (prediction * 127.5 + 127.5).astype(np.uint8)\n    im = PIL.Image.fromarray(prediction)\n    im.save(\"..\/images\/\" + str(i) + \".jpg\")\n    i += 1","8204b847":"import shutil\nshutil.make_archive(\"\/kaggle\/working\/images\", 'zip', \"\/kaggle\/images\")","b0b52b20":"**Referances:**\n\nhttps:\/\/www.kaggle.com\/amyjang\/monet-cyclegan-tutorial\n\nhttps:\/\/www.kaggle.com\/unfriendlyai\/diffaugment-is-all-you-need\n\nhttps:\/\/www.kaggle.com\/victorsullivan\/i-m-something-of-a-painter-myself\/notebook","019724b6":"# Introduction\n\n**What is Monet known for?**\n\nClaude Monet was a famous French painter whose work gave a name to the art movement Impressionism, which was concerned with capturing light and natural forms.","559eb861":"# Loading and exploring data (EDA) - JPG\n","38bf20c4":"# Loading and exploring data (EDA) - tfrec\n\nkeep photo dataset and Monet dataset separate.load the filenames of the TFRecords (.tfrec)."}}