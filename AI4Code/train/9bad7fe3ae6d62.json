{"cell_type":{"9d9b3d90":"code","f737b2ee":"code","8570bfca":"code","2a15e9c9":"code","b4bed3da":"code","4aa0c92b":"code","f9cd7f07":"code","a328c76a":"code","76137d92":"code","fbb16ad3":"code","4772c8f5":"code","9218c6d9":"code","d02d0317":"code","18f15a51":"code","f6708a90":"code","122f1496":"markdown","84d16d6a":"markdown","5c4a6b0a":"markdown"},"source":{"9d9b3d90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f737b2ee":"masks_train = pd.read_csv('..\/input\/train_ship_segmentations_v2.csv')\nmasks_train.info()","8570bfca":"masks_train.head()","2a15e9c9":"#checking train files\nTRAIN=\"..\/input\/train_v2\"\nfile_names=os.listdir(TRAIN)\nprint(\"Train files :\",len(file_names))","b4bed3da":"#checking test files\nTEST=\"..\/input\/test_v2\"\ntest_file_names=os.listdir(TEST)\nprint(\"Test files :\",len(test_file_names))","4aa0c92b":"from PIL import Image\nImageId=file_names[25]\nim = Image.open(TRAIN+\"\/\"+ImageId)\nim.size","f9cd7f07":"im_test = Image.open(TEST+\"\/\"+test_file_names[5])\nim_test.size","a328c76a":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.imshow(im)","76137d92":"# ref: https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\ndef rle_decode(mask_rle, shape=(768, 768)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T  # Needed to align to RLE direction","fbb16ad3":"img_masks = masks_train.loc[masks_train['ImageId'] == ImageId, 'EncodedPixels'].tolist()","4772c8f5":"mask_img = np.zeros((768, 768))\nfor mask in img_masks:\n    mask_img += rle_decode(mask)\nplt.imshow(mask_img)","9218c6d9":"def show_img(im, figsize=None, ax=None, alpha=None):\n    if not ax: fig,ax = plt.subplots(figsize=figsize)\n    ax.imshow(im, alpha=alpha)\n    ax.set_axis_off()\n    return ax","d02d0317":"def get_mask_img(ImageId):\n    img_masks = masks_train.loc[masks_train['ImageId'] == ImageId, 'EncodedPixels'].tolist()\n    mask_img = np.zeros((768, 768))\n    if len(img_masks)==1:\n        return mask_img\n    for mask in img_masks:\n        mask_img += rle_decode(mask)\n    return mask_img","18f15a51":"fig, axes = plt.subplots(4, 5, figsize=(18, 12))\nfor i,ax in enumerate(axes.flat):\n    imageid=file_names[i+100]\n    img=Image.open(TRAIN+\"\/\"+imageid)\n    mask=get_mask_img(imageid)\n    ax = show_img(img, ax=ax)\n    show_img(mask, ax=ax, alpha=0.3)\nplt.tight_layout(0.1)","f6708a90":"#check for Nan\ncount=masks_train['EncodedPixels'].isnull().sum()\nprint(\"Null mask counts :\",count )\nprint(\"Train images contatining ships :\",len(masks_train)-count )","122f1496":"<h2>Lets check a random train image<\/h2>","84d16d6a":"<h2>Check train csv<\/h2>","5c4a6b0a":"<h2>Train image +Mask<\/h2>"}}