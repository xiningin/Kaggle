{"cell_type":{"19f8cf45":"code","a013533d":"code","b3c5e36f":"code","ce186b17":"code","d0c93214":"code","0d237ae2":"code","c031f0c6":"code","b664d570":"code","154d6f31":"code","b2411e55":"code","78ba3dc5":"code","e991d16f":"code","ae4178f9":"code","91f1ab5c":"code","4b913465":"code","59292f8d":"code","a138e7aa":"code","51496e9f":"code","10ccd653":"markdown","85caccb4":"markdown","21d7130f":"markdown","9efc75ca":"markdown","479d1769":"markdown","8bf9ea61":"markdown","a919f721":"markdown","7eb33a53":"markdown","715c6168":"markdown","43fb8c59":"markdown","4a0da80f":"markdown","fc6d3cab":"markdown","84e61236":"markdown","7790d2b4":"markdown","2438dbfb":"markdown","76aa3371":"markdown","e88d2c0d":"markdown","1277777e":"markdown","07e20745":"markdown","c618518b":"markdown","5bae0a29":"markdown","c2a7eaca":"markdown","8809c187":"markdown","117311a4":"markdown","009eb252":"markdown","4ea53647":"markdown","36d107d3":"markdown","758e7a3e":"markdown","15e5f1ca":"markdown","b1819fa8":"markdown","9ad6cca5":"markdown","35c63e47":"markdown","711d6086":"markdown","6f139c02":"markdown","2321c7fb":"markdown","e9f5ea50":"markdown","edbadeb8":"markdown","38d14879":"markdown","a9bf5a1d":"markdown","69f9fe64":"markdown"},"source":{"19f8cf45":"from plotly.offline import init_notebook_mode, iplot\nfrom wordcloud import WordCloud\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nfrom plotly import tools\nfrom datetime import date\nimport pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport random \nimport warnings\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\n\npath = \"..\/input\/\"\n\ndef bar_hor(df, col, title, color, w=None, h=None, lm=0, limit=100, return_trace=False, rev=False, xlb = False):\n    \"\"\"\n    \u6a2a\u5411\u304d\u68d2\u30b0\u30e9\u30d5\u4f5c\u6210\u95a2\u6570\n    df:  \n    col: \n    title: \n    color: \n    w=None: \n    h=None: \n    lm=0: \n    limit=100: \n    return_trace=False: \n    rev=False: \n    xlb = False:\n    \"\"\"\n    cnt_srs = df[col].value_counts()\n    yy = cnt_srs.head(limit).index[::-1] \n    xx = cnt_srs.head(limit).values[::-1] \n    if rev:\n        yy = cnt_srs.tail(limit).index[::-1] \n        xx = cnt_srs.tail(limit).values[::-1] \n    if xlb:\n        trace = go.Bar(y=xlb, x=xx, orientation = 'h', marker=dict(color=color))\n    else:\n        trace = go.Bar(y=yy, x=xx, orientation = 'h', marker=dict(color=color))\n    if return_trace:\n        return trace \n    layout = dict(title=title, margin=dict(l=lm), width=w, height=h)\n    data = [trace]\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n\ndef bar_hor_noagg(x, y, title, color, w=None, h=None, lm=0, limit=100, rt=False):\n    trace = go.Bar(y=x, x=y, orientation = 'h', marker=dict(color=color))\n    if rt:\n        return trace\n    layout = dict(title=title, margin=dict(l=lm), width=w, height=h)\n    data = [trace]\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n\n\ndef bar_ver_noagg(x, y, title, color, w=None, h=None, lm=0, rt = False):\n    trace = go.Bar(y=y, x=x, marker=dict(color=color))\n    if rt:\n        return trace\n    layout = dict(title=title, margin=dict(l=lm), width=w, height=h)\n    data = [trace]\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n    \ndef gp(col, title):\n    \"\"\"\n    \u30b0\u30eb\u30fc\u30d7\u5316\u68d2\u30b0\u30e9\u30d5\u3092\u8868\u793a\n    col: \u8868\u793a\u3059\u308b\u5217\n    title: \u56f3\u306e\u30bf\u30a4\u30c8\u30eb\n    \"\"\"\n    df1 = app_train[app_train[\"TARGET\"] == 1]\n    df0 = app_train[app_train[\"TARGET\"] == 0]\n    a1 = df1[col].value_counts()\n    b1 = df0[col].value_counts()\n\n    trace1 = go.Bar(x=a1.index, y=a1.values, name='Target : 1', marker=dict(color=\"#44ff54\"))\n    trace2 = go.Bar(x=b1.index, y=b1.values, name='Target : 0', marker=dict(color=\"#ff4444\"))\n\n    data = [trace1, trace2]\n    layout = go.Layout(barmode='group', height=300, title = title)\n\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig, filename='grouped-bar')","a013533d":"app_train = pd.read_csv(path + \"application_train.csv\") # application train \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\napp_train.head() # \u6700\u521d\u306e5\u884c\u3092\u8868\u793a","b3c5e36f":"# \u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\n# \u6a2a\u5411\u304d\u68d2\u30b0\u30e9\u30d5\u306e\u8868\u793a\nbar_hor(app_train, # \u8868\u793a\u3059\u308b\u30c7\u30fc\u30bf \n        \"TARGET\", # \u8868\u793a\u3059\u308b\u5217\u540d\n        \"Distribution of Target Variable\" , # \u56f3\u306e\u30bf\u30a4\u30c8\u30eb\n        [\"#44ff54\", '#ff4444'], # \u68d2\u30b0\u30e9\u30d5\u306e\u8272\n        h=400, # \u56f3\u306e\u9ad8\u3055\n        w=800, # \u56f3\u306e\u5e45\n        lm=100, # ?\n        xlb = ['Target : 1','Target : 0'] # \u5404\u30d0\u30fc\u306e\u8aac\u660e\n       )","ce186b17":"bureau = pd.read_csv(path + \"bureau.csv\")\nbureau.head()","d0c93214":"bureau_balance = pd.read_csv(path + \"bureau_balance.csv\")\nbureau_balance.head()","0d237ae2":"credit_card_balance = pd.read_csv(path + \"credit_card_balance.csv\")\ncredit_card_balance.head()","c031f0c6":"pcb = pd.read_csv(path + \"POS_CASH_balance.csv\")\npcb.head()","b664d570":"previous_application = pd.read_csv(path + \"previous_application.csv\")\nprevious_application.head()","154d6f31":"# \u5951\u7d04\u72b6\u6cc1 (\u53d7\u7406\u3001\u62d2\u5426\u3001\u7533\u8acb\u30ad\u30e3\u30f3\u30bb\u30eb\u3001\u7533\u8acb\u306a\u3057 (unused offer))\u306e\u6bd4\u7387\u306e\u5186\u30b0\u30e9\u30d5\u3092\u8868\u793a\nt = previous_application['NAME_CONTRACT_STATUS'].value_counts()\nlabels = t.index\nvalues = t.values\n\ncolors = ['#FEBFB3', '#E1396C', '#96D38C', '#D0F9B1']\n\ntrace = go.Pie(labels=labels, \n               values=values,\n               hoverinfo='', \n               textinfo='',\n               textfont=dict(size=12), # \u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\n               marker=dict(colors=colors, # \u8272\u8a2d\u5b9a\n                           line=dict(color='#fff', width=2))\n              )\n\nlayout = go.Layout(title='Name Contract Status in Previous Applications', height=400)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","b2411e55":"installments_payments = pd.read_csv(path + \"installments_payments.csv\")\ninstallments_payments.head()","78ba3dc5":"from sklearn.model_selection import train_test_split \nimport lightgbm as lgb\n\n# \u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\napp_test = pd.read_csv('..\/input\/application_test.csv')\n\napp_test['is_test'] = 1 \napp_test['is_train'] = 0\napp_train['is_test'] = 0\napp_train['is_train'] = 1\n\n# \u76ee\u7684\u5909\u6570\nY = app_train['TARGET']\ntrain_X = app_train.drop(['TARGET'], axis = 1)\n\n# \u30c6\u30b9\u30c8ID\ntest_id = app_test['SK_ID_CURR']\ntest_X = app_test\n\n# \u524d\u51e6\u7406\u306e\u305f\u3081\u306b\u30c8\u30ec\u30a4\u30f3\u3068\u30c6\u30b9\u30c8\u3092\u9023\u7d50\ndata = pd.concat([train_X, test_X], axis=0)","e991d16f":"# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\ndef _get_categorical_features(df):\n    feats = [col for col in list(df.columns) if df[col].dtype == 'object']\n    return feats\n\n# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u30d5\u30a1\u30af\u30c8\u30e9\u30a4\u30ba (\u6574\u6570\u306b\u7f6e\u63db)\u3059\u308b\u95a2\u6570\ndef _factorize_categoricals(df, cats):\n    for col in cats:\n        df[col], _ = pd.factorize(df[col])\n    return df \n\n# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30c0\u30df\u30fc\u5909\u6570 (\u4e8c\u5024\u5909\u6570\u5316)\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570\ndef _get_dummies(df, cats):\n    for col in cats:\n        df = pd.concat([df, pd.get_dummies(df[col], prefix=col)], axis=1)\n    return df \n\n# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u53d6\u5f97\ndata_cats = _get_categorical_features(data)\nprev_app_cats = _get_categorical_features(previous_application)\nbureau_cats = _get_categorical_features(bureau)\n\n# \u30c0\u30df\u30fc\u5909\u6570\u3092\u53d6\u5f97\nprevious_application = _get_dummies(previous_application, prev_app_cats)\nbureau = _get_dummies(bureau, bureau_cats)\n\n# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u30d5\u30a1\u30af\u30c8\u30e9\u30a4\u30ba\ndata = _factorize_categoricals(data, data_cats)","ae4178f9":"## \u53c2\u8003: \u3088\u308a\u826f\u3044\u7279\u5fb4\u91cf : https:\/\/www.kaggle.com\/ogrellier\/good-fun-with-ligthgbm \n\n### \u904e\u53bb\u306e\u7533\u8acb\u66f8\u60c5\u5831\u3092\u73fe\u5728\u306e\u7533\u8acb\u66f8\u60c5\u5831\u3068\u7d50\u3073\u3064\u3051\u308b\n\n# ID\u3054\u3068\u306b\u904e\u53bb\u306e\u7533\u8acb\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\nprev_apps_count = previous_application[['SK_ID_CURR', 'SK_ID_PREV']].groupby('SK_ID_CURR').count()\nprevious_application['SK_ID_PREV'] = previous_application['SK_ID_CURR'].map(prev_apps_count['SK_ID_PREV'])\n\n# ID\u3054\u3068\u306b\u904e\u53bb\u306e\u7533\u8acb\u66f8\u306e\u7279\u5fb4\u91cf\u306e\u5024\u306e\u5e73\u5747\u3092\u53d6\u308b\nprev_apps_avg = previous_application.groupby('SK_ID_CURR').mean()\nprev_apps_avg.columns = ['p_' + col for col in prev_apps_avg.columns]\ndata = data.merge(right=prev_apps_avg.reset_index(), how='left', on='SK_ID_CURR')\n\n### \u4fe1\u7528\u60c5\u5831\u6a5f\u95a2\u3092\u73fe\u5728\u306e\u7533\u8acb\u66f8\u60c5\u5831\u3068\u7d50\u3073\u3064\u3051\u308b\n\n# ID\u3054\u3068\u306b\u4fe1\u7528\u60c5\u5831\u6a5f\u95a2\u306e\u7279\u5fb4\u91cf\u306e\u5024\u306e\u5e73\u5747\u3092\u53d6\u308b\nbureau_avg = bureau.groupby('SK_ID_CURR').mean()\nbureau_avg['buro_count'] = bureau[['SK_ID_BUREAU','SK_ID_CURR']].groupby('SK_ID_CURR').count()['SK_ID_BUREAU']\nbureau_avg.columns = ['b_' + f_ for f_ in bureau_avg.columns]\ndata = data.merge(right=bureau_avg.reset_index(), how='left', on='SK_ID_CURR')\n\n# \u6700\u7d42\u7684\u306atrain\u3068test\u30c7\u30fc\u30bf\u3092\u7528\u610f\nignore_features = ['SK_ID_CURR', 'is_train', 'is_test']\nrelevant_features = [col for col in data.columns if col not in ignore_features]\ntrainX = data[data['is_train'] == 1][relevant_features]\ntestX = data[data['is_test'] == 1][relevant_features]","91f1ab5c":"x_train, x_val, y_train, y_val = train_test_split(trainX, Y, test_size=0.2, random_state=18)\nlgb_train = lgb.Dataset(data=x_train, label=y_train)\nlgb_eval = lgb.Dataset(data=x_val, label=y_val)","4b913465":"params = {'task': 'train', 'boosting_type': 'gbdt', 'objective': 'binary', 'metric': 'auc', \n          'learning_rate': 0.01, 'num_leaves': 48, 'num_iteration': 5000, 'verbose': 0 ,\n          'colsample_bytree':.8, 'subsample':.9, 'max_depth':7, 'reg_alpha':.1, 'reg_lambda':.1, \n          'min_split_gain':.01, 'min_child_weight':1}\n## model = lgb.train(params, lgb_train, valid_sets=lgb_eval, early_stopping_rounds=150, verbose_eval=200)","59292f8d":"## lgb.plot_importance(model, figsize=(12, 50));","a138e7aa":"## preds = model.predict(testX)\n## sub_lgb = pd.DataFrame()\n## sub_lgb['SK_ID_CURR'] = test_id\n## sub_lgb['TARGET'] = preds\n## sub_lgb.to_csv(\"lgb_baseline.csv\", index=False)\n## sub_lgb.head()","51496e9f":"##\u8a55\u4fa1\u7528\u30e1\u30bd\u30c3\u30c9\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score\n\ndef get_evaluate(y_test, predict):\n\n    fpr, tpr, thr_arr = metrics.roc_curve(y_test, predict)\n\n    auc = metrics.auc(fpr, tpr)\n    ## precision = metrics.precision_score(y_test, predict)\n    precision = 0\n    ## recall = metrics.recall_score(y_test, predict)      \n    recall = 0\n    ## auc\u306e\u4ed6\u306e\u7b97\u51fa\u65b9\u6cd5\u5019\u88dc\n    ## auc = roc_auc_score(y_test, predict)\n\n    return auc, precision, recall\n\n##CV \nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\n## \u5206\u5272\u6570\u306f5\nkfold = KFold(n_splits=5, random_state=42)\n\nauc_list = []\nprecision_list = []\nrecall_list = []\n\n# kfold\u3067\u5206\u5272\n##for train_index, test_index in kfold.split(X, y):\n##\u5f15\u6570\u306f\u524d\u6bb5\u3067\u7528\u610f\u3057\u3066\u3044\u305ftrainX\nfor train_index, test_index in kfold.split(trainX, Y):\n\n    cv_X_train = trainX.iloc[train_index]\n    cv_y_train = Y.iloc[train_index]\n    cv_X_test = trainX.iloc[test_index]\n    cv_y_test = Y.iloc[test_index]\n\n    # \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\n    cv_lgb_train = lgb.Dataset(cv_X_train, cv_y_train)\n    cv_lgb_eval = lgb.Dataset(cv_X_test, cv_y_test)\n\n    # \u5b66\u7fd2\n    ## cv_model = lgb.train(params, cv_lgb_train)\n    ## cv_model = lgb.train(params, cv_lgb_train, early_stopping_rounds=150, verbose_eval=200)\n    ## cv_model = lgb.train(params, cv_lgb_train,valid_sets=cv_lgb_eval, early_stopping_rounds=150, verbose_eval=200)\n    ## cv_model = lgb.train(params, cv_lgb_train,valid_sets=cv_lgb_eval, early_stopping_rounds=5, verbose_eval=3)\n    cv_model = lgb.train(params, cv_lgb_train,valid_sets=cv_lgb_eval, early_stopping_rounds=150, verbose_eval=1000)\n\n    predict_proba = cv_model.predict(cv_X_test, num_iteration=cv_model.best_iteration)\n    ## debug\n    ## print(predict_proba)\n\n    # predict_proba\u304c0.5\u4ee5\u4e0a\u306a\u30891\u3068\u3059\u308b \u2192\u4e0d\u8981\u306a\u6319\u52d5\u3068\u306a\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u304f\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n    ## predict = [0 if i < 0.5 else 1 for i in predict_proba]\n    predict = predict_proba\n    ## debug\n    ## print(predict)\n    \n\n    auc, precision, recall = get_evaluate(cv_y_test, predict)\n\n    print('AUC:{}, precision:{}, recall:{}'.format(auc, precision, recall))\n    print(f'cv_y_train y==1 rate: {sum(cv_y_train)\/len(cv_y_train)}')\n    print(f'cv_y_test y==1 rate: {sum(cv_y_test)\/len(cv_y_test)}')\n\n    auc_list.append(auc)\n    precision_list.append(precision)\n    recall_list.append(recall)\n\n# kfold\u306e\u5e73\u5747\u5024\u3092\u53d6\u5f97\nprint('Kfold\u5e73\u5747 AUC:{}, precision:{}, recall:{}'.format(np.mean(auc_list), \n                                                         np.mean(precision_list), \n                                                         np.mean(recall_list)))\n","10ccd653":"### 9.4 validation\u30c7\u30fc\u30bf\u306e\u4f5c\u6210","85caccb4":"> - \u65e2\u5a5a\u306e\u9867\u5ba2\u304c\u6700\u3082\u591a\u304f (\u7d04196k) \u72ec\u8eab\u304c\u305d\u308c\u306b\u7d9a\u304f\u3002\n> - \u4f4f\u5c45\u306f\u591a\u304f\u304c \"\u4e00\u8ed2\u5bb6\/\u30a2\u30d1\u30fc\u30c8\" \u306785%\u3092\u5360\u3081\u3001\u4e21\u89aa\u3068\u540c\u5c45\u3001\u516c\u55b6\u4f4f\u5b85\u304c\u7d9a\u304f\u3002\n\n### 2.6.2 \u5a5a\u59fb\u72b6\u6cc1\u30fb\u4f4f\u5c45\u3068\u76ee\u7684\u5909\u6570\u3068\u306e\u95a2\u4fc2","21d7130f":">- \u904e\u53bb\u306e\u7533\u8acb\u66f8\u306e\u540c\u4f34\u8005\u306e\u591a\u304f\u304c\u540c\u4f34\u8005\u306a\u3057\u3067\u3042\u308a (60%)\u3001\u5bb6\u65cf\u304c\u305d\u308c\u306b\u7d9a\u304f (25%)\u3002\n\n## 7.4 \u904e\u53bb\u306e\u501f\u5165\u7533\u8acb\u66f8\u306e\u9867\u5ba2\u30bf\u30a4\u30d7","9efc75ca":"## 6. POS\u30ad\u30e3\u30c3\u30b7\u30e5\u6b8b\u9ad8\u306e\u30c7\u30fc\u30bf\u63a2\u7d22\n\n\u501f\u5165\u7533\u8acb\u8005\u306e\u6301\u3064\u30db\u30fc\u30e0\u30fb\u30af\u30ec\u30b8\u30c3\u30c8\u306b\u95a2\u3059\u308b\u904e\u53bb\u306ePOS\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u30ed\u30fc\u30f3\u306e\u5404\u6708\u306e\u6b8b\u9ad8\u60c5\u5831\u3002  \n\u30c6\u30fc\u30d6\u30eb\u306e\u5404\u5217\u306b\u306f\u3001\u3042\u308b\u30ed\u30fc\u30f3\u306ex\u6708 (\u501f\u5165\u7533\u8acb\u304b\u3089x\u30f6\u6708\u524d) \u306e\u50b5\u52d9\u72b6\u6cc1\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u307e\u3059\u3002 \n\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u306f\u3001\u30ed\u30fc\u30f3 \u306e\u5404\u6708\u306e\u6b8b\u9ad8\u304c1\u884c\u305a\u3064\u8a18\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u3002  \n(\u8a33\u6ce8: \u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f)\n\n## 6.1 POS\u30ad\u30e3\u30c3\u30b7\u30e5\u6b8b\u9ad8\u30c7\u30fc\u30bf\u306e\u6982\u89b3","479d1769":"> \u540c\u4f34\u8005\u306e\u30c8\u30c3\u30d73\u306f\u540c\u4f34\u8005\u306a\u3057 (250k)\u3001\u5bb6\u65cf\u3001\u592b\u5a66\u3067\u3042\u308b\u3002\n> \u53ce\u5165\u5f62\u614b\u306f8\u30bf\u30a4\u30d7\u304c\u3042\u308a\u30c8\u30c3\u30d7\u306f:  \n    - Working Class\u52b4\u50cd\u968e\u7d1a (158K)\n    - Pensiner \u5e74\u91d1\u53d7\u7d66\u8005 (55K)\u540c\u4f34\u8005\n\n### 2.5.2 \u540c\u4f34\u8005\u30fb\u53ce\u5165\u5f62\u614b\u3068\u76ee\u7684\u5909\u6570\u3068\u306e\u95a2\u4fc2","8bf9ea61":"## 2.11 \u5546\u54c1\u4fa1\u683c\u306e\u5206\u5e03\n- \u5546\u54c1\u4fa1\u683c: \u30ed\u30fc\u30f3\u3092\u7d44\u3080\u76ee\u7684\u3067\u3042\u308b\u5546\u54c1\u306e\u4fa1\u683c","a919f721":"## 2.10 \u5e74\u91d1\u306e\u5206\u5e03\n- \u5e74\u91d1: \u30ed\u30fc\u30f3\u5e74\u91d1 (\u3063\u3066\u4f55?)","7eb33a53":">-  \u591a\u304f\u306e\u4eba\u304c\u904e\u53bb\u306b\u7533\u8acb\u304c\u53d7\u7406\u3055\u308c\u3066\u3044\u308b (62%)\u3002\u4e00\u65b9\u306719%\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u300117%\u304c\u62d2\u5426\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n## 7.3 \u904e\u53bb\u306e\u501f\u5165\u7533\u8acb\u66f8\u306e\u540c\u4f34\u8005\u306e\u5206\u5e03","715c6168":"## 2.16 \u5bb6\u65cf\u4eba\u6570","43fb8c59":"> - \u5e73\u5c4b\u304c150k\u3067\u307b\u3068\u3093\u3069\u3092\u5360\u3081\u3001\u7279\u6b8a\u5bb6\u5c4b\u3001\u30c6\u30e9\u30b9\u30cf\u30a6\u30b9\u306f1500\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n> - \u58c1\u306f\u30d1\u30cd\u30eb\u3001\u77f3\u30fb\u30ec\u30f3\u30ac\u304c\u307b\u307c\u540c\u6570\u3067120k\u8fd1\u304f\u3092\u5360\u3081\u308b\u3002\n\n### 2.8.4 \u58c1\u306e\u7a2e\u985e\u30fb\u57fa\u790e\u306e\u7a2e\u985e\u30fb\u5bb6\u5c4b\u306e\u7a2e\u985e\u3068\u76ee\u7684\u5909\u6570\u3068\u306e\u95a2\u4fc2","4a0da80f":"## 7. \u904e\u53bb\u306e\u501f\u5165\u7533\u8acb\u66f8\u306e\u30c7\u30fc\u30bf\u63a2\u7d22\n\n## 7.1  \u904e\u53bb\u306e\u501f\u5165\u7533\u8acb\u66f8\u30c7\u30fc\u30bf\u306e\u6982\u89b3","fc6d3cab":"> \u591a\u304f\u306e\u5272\u5408\u304c\u4e2d\u7b49\u6559\u80b2\u306b\u5360\u3081\u3089\u308c (218k)\u3001\u9ad8\u7b49\u6559\u80b2 (75k) \u304c\u305d\u308c\u306b\u7d9a\u304f\u3002\n\n### 2.7.2 \u6559\u80b2\u3068\u76ee\u7684\u5909\u6570\u3068\u306e\u95a2\u4fc2","84e61236":"### 9.3 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4e00\u7b87\u6240\u306b\u307e\u3068\u3081\u308b","7790d2b4":"> \u7533\u8acb\u8005\u306e\u4e2d\u3067\u591a\u3044\u696d\u7a2e\u306f\u52b4\u50cd\u8005 (55k)\u3001\u8ca9\u58f2\u54e1 (32k)\u3001\u30b3\u30a2\u30b9\u30bf\u30c3\u30d5 (28k)  \n> \u591a\u3044\u7d44\u7e54\u306f\u7b2c3\u7a2e\u6cd5\u4eba\u304c\u6700\u591a\u306767k\u3092\u5360\u3081\u308b\n\n### 2.8.2 \u7d44\u7e54\u30fb\u696d\u7a2e\u3068\u76ee\u7684\u5909\u6570\u3068\u306e\u95a2\u4fc2","2438dbfb":"## 2.7. \u6559\u80b2\n\n### 2.7.1 \u6559\u80b2\u306e\u5206\u5e03","76aa3371":"## 2.13 \u5e74\u9f62\u306e\u5206\u5e03\n- \u5e74\u9f62: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u501f\u5165\u7533\u8acb\u65e5\u306e\u4f55\u65e5\u524d\u306b\u751f\u307e\u308c\u305f\u304b","e88d2c0d":">- \u904e\u53bb\u306e\u501f\u5165\u7533\u8acb\u8005\u306e74%\u304c\u30ea\u30d4\u30fc\u30bf\u30fc\u306718%\u304c\u65b0\u898f\u30018%\u304c\u518d\u767b\u9332? (refreshed)\u3067\u3042\u308b\u3002\n\n## 7.5 \u30c1\u30e3\u30cd\u30eb\u30bf\u30a4\u30d7\n- \u30c1\u30e3\u30cd\u30eb\u30bf\u30a4\u30d7: \u3069\u306e\u65b9\u6cd5\u3067\u501f\u5165\u7533\u8acb\u66f8\u3092\u53d7\u3051\u53d6\u3063\u305f\u304b","1277777e":"> - \u76ee\u7684\u5909\u6570\u306f\u7d04282k (85%) \u304c 0 \u3067\u3001\u308f\u305a\u304b24k\u304c 1 \u3067\u3059\u3002\n\n## 2.3 \u3069\u306e\u6027\u5225\u3001\u3069\u306e\u5951\u7d04\u30bf\u30a4\u30d7\u304c\u30ed\u30fc\u30f3\u3092\u7533\u3057\u8fbc\u3093\u3067\u3044\u308b\u304b\n- \u6027\u5225: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u6027\u5225  \n- \u5951\u7d04\u30bf\u30a4\u30d7: \u30ed\u30fc\u30f3\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u30ea\u30dc\u6255\u3044\u304b  \n\n### 2.3.1 \u6027\u5225\u30fb\u5951\u7d04\u30bf\u30a4\u30d7\u306e\u5206\u5e03","07e20745":"## 2.5 \u540c\u4f34\u8005\u30fb\u53ce\u5165\u5f62\u614b\n- \u540c\u4f34\u8005 (NAME_TYPE_SUITE): \u501f\u5165\u7533\u8acb\u66f8\u63d0\u51fa\u6642\u306b\u540c\u4f34\u3057\u305f\u4eba\u7269\n\n### 2.5.1 \u540c\u4f34\u8005\u30fb\u53ce\u5165\u5f62\u614b\u306e\u5024","c618518b":"> 307,511\u4ef6\u306e\u30ed\u30fc\u30f3\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308a\u3001\u5217\u6570\u306f122\u3067\u3059\u3002\n\n## 2.2 \u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\n\u76ee\u7684\u5909\u6570\n- 1: \u652f\u6255\u304c\u56f0\u96e3\u306a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 = \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u6700\u521d\u306eY\u56de\u306e\u5206\u5272\u6255\u3044\u306e\u5185\u306b\u5c11\u306a\u304f\u3068\u3082\u4e00\u56de\u3067X\u65e5\u4ee5\u4e0a\u5ef6\u6ede\u3057\u3066\u3044\u305f\u5834\u5408\n- 0: \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408","5bae0a29":"## 2.14 \u96c7\u7528\u65e5\u6570\u306e\u5206\u5e03\n- \u96c7\u7528\u65e5\u6570: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u501f\u5165\u7533\u8acb\u65e5\u306e\u4f55\u65e5\u524d\u304b\u3089\u73fe\u5728\u306e\u4ed5\u4e8b\u3092\u59cb\u3081\u305f\u304b","c2a7eaca":"## 2.12 \u76f8\u5bfe\u5730\u57df\u4eba\u53e3\u5206\u5e03\u306e\u5206\u5e03\n- \u76f8\u5bfe\u5730\u57df\u4eba\u53e3: \u6b63\u898f\u5316\u3055\u308c\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u4f4f\u3093\u3067\u3044\u308b\u5730\u57df\u306e\u4eba\u53e3 (\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u3088\u308a\u4eba\u5de5\u306e\u591a\u3044\u5730\u57df\u306b\u4f4f\u3093\u3067\u3044\u308b\u3053\u3068\u3092\u8868\u3059) ","8809c187":"## 3. \u4fe1\u7528\u60c5\u5831\u6a5f\u95a2\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u63a2\u7d22\n\n\u4fe1\u7528\u60c5\u5831\u6a5f\u95a2\u306b\u3088\u3063\u3066\u5831\u544a\u3055\u308c\u3066\u3044\u308b\u9867\u5ba2\u306e\u904e\u53bb\u306e\u4ed6\u306e\u91d1\u878d\u6a5f\u95a2\u3067\u501f\u5165\u5c65\u6b74\u3002  \n\u9867\u5ba2\u306e\u501f\u5165\u7533\u8fbc\u65e5\u4ee5\u524d\u306e\u501f\u5165\u56de\u6570\u3068\u540c\u3058\u884c\u6570\u306e\u501f\u5165\u60c5\u5831\u304c\u542b\u307e\u308c\u308b\u3002  \n\n## 3.1 \u4fe1\u7528\u60c5\u5831\u6a5f\u95a2\u30c7\u30fc\u30bf\u306e\u6982\u89b3","117311a4":"this is folked kernel with japanese comment for education\n\n# \u30db\u30fc\u30e0\u30fb\u30af\u30ec\u30b8\u30c3\u30c8\u793e \u50b5\u52d9\u4e0d\u5c65\u884c\u30ea\u30b9\u30af - \u30c7\u30fc\u30bf\u63a2\u7d22 + \u57fa\u672c\u30e2\u30c7\u30eb\n\n\u878d\u8cc7\u5c65\u6b74\u304c\u5c11\u306a\u304b\u3063\u305f\u308a\u7121\u304b\u3063\u305f\u308a\u3059\u308b\u305f\u3081\u306b\u3001\u591a\u304f\u306e\u4eba\u3005\u304c\u878d\u8cc7\u3092\u53d7\u3051\u308b\u306e\u306b\u82e6\u52b4\u3057\u3066\u3044\u307e\u3059\u3002  \n\u305d\u3057\u3066\u3001\u6b8b\u5ff5\u306a\u3053\u3068\u306b\u3001\u3053\u306e\u3088\u3046\u306a\u4eba\u3005\u306f\u3001\u602a\u3057\u3052\u306a\u91d1\u8cb8\u3057\u5c4b\u306b\u3088\u3063\u3066\u3057\u3070\u3057\u3070\u30ab\u30e2\u306b\u3055\u308c\u307e\u3059\u3002  \n\u30db\u30fc\u30e0\u30af\u30ec\u30b8\u30c3\u30c8\u793e\u306f\u3001\u30dd\u30b8\u30c6\u30a3\u30d6\u3067\u5b89\u5168\u306a\u501f\u5165\u7d4c\u9a13\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001  \n\u9280\u884c\u53e3\u5ea7\u3092\u6301\u305f\u306a\u3044\u4eba\u3005\u306e\u305f\u3081\u306e\u30d5\u30a1\u30a4\u30ca\u30f3\u30b7\u30e3\u30eb\u30fb\u30a4\u30f3\u30af\u30eb\u30fc\u30b8\u30e7\u30f3 (\u8ca7\u56f0\u5c64\u306b\u6b63\u898f\u306e\u91d1\u878d\u53d6\u5f15\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u6539\u5584\u3059\u308b\u89e3\u6c7a\u7b56\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068) \u3092\u5e83\u3081\u308b\u305f\u3081\u306b\u52aa\u529b\u3057\u3066\u3044\u307e\u3059\u3002  \n\u3053\u306e\u91d1\u92ad\u7684\u306b\u4e0d\u5229\u306a\u4eba\u3005\u304c\u30dd\u30b8\u30c6\u30a3\u30d6\u306a\u501f\u5165\u7d4c\u9a13\u3092\u6301\u3064\u3053\u3068\u3092\u78ba\u5b9f\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30db\u30fc\u30e0\u30af\u30ec\u30b8\u30c3\u30c8\u306f\u96fb\u8a71\u3084\u53d6\u5f15\u60c5\u5831\u3092\u542b\u3080\u3055\u307e\u3056\u307e\u306a\u4ee3\u66ff\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u9867\u5ba2\u306e\u8fd4\u6e08\u80fd\u529b\u3092\u4e88\u6e2c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30db\u30fc\u30e0\u30af\u30ec\u30b8\u30c3\u30c8\u793e\u306f\u73fe\u5728\u3001\u3053\u308c\u3089\u306e\u4e88\u6e2c\u3092\u884c\u3046\u305f\u3081\u306b\u3055\u307e\u3056\u307e\u306a\u7d71\u8a08\u7684\u65b9\u6cd5\u3084\u6a5f\u68b0\u5b66\u7fd2\u65b9\u6cd5\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001  \n\u30db\u30fc\u30e0\u30af\u30ec\u30b8\u30c3\u30c8\u793e\u306f\u793e\u306e\u6301\u3064\u30c7\u30fc\u30bf\u306e\u6f5c\u5728\u80fd\u529b\u3092\u6700\u5927\u9650\u306b\u767a\u63ee\u3059\u308b\u305f\u3081\u306bKagglers\u306b\u6311\u6226\u3092\u6311\u307f\u307e\u3057\u305f\u3002  \n\u3053\u306e\u30b3\u30f3\u30da\u306b\u3088\u308a\u3001\u8fd4\u6e08\u80fd\u529b\u306e\u3042\u308b\u9867\u5ba2\u304c\u7121\u4e8b\u501f\u5165\u3067\u304d\u308b\u3053\u3068\u3001\u305d\u3057\u3066\u9867\u5ba2\u304c\u3088\u308a\u78ba\u5b9f\u306b\u8fd4\u6e08\u5b8c\u4e86\u3067\u304d\u308b\u3088\u3046\u306a\u501f\u5165\u984d\u3001\u5b8c\u6e08\u65e5\u3001\u8fd4\u6e08\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n\u3053\u308c\u306f\u30db\u30fc\u30e0\u30fb\u30af\u30ec\u30b8\u30c3\u30c8\u793e\u50b5\u52d9\u4e0d\u5c65\u884c\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306e\u30c7\u30fc\u30bf\u63a2\u7d22\u3068\u57fa\u672c\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u306e\u7c21\u5358\u306a\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u3059\u3002  \n**Contents**   \n1. Dataset Preparation    \n2. Exploration - Applications Train  \n&nbsp;&nbsp;&nbsp;&nbsp; 2.1 Snapshot - Application Train    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.2 Distribution of Target Variable    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.3 Gender and Contract Type Distribution and Target Variable    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.4 Own Realty and Own Car  - Distribution with Target Variable  \n&nbsp;&nbsp;&nbsp;&nbsp; 2.5 Suit Type and Income Type    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.6 Family Statue and Housing Type   \n&nbsp;&nbsp;&nbsp;&nbsp; 2.7 Education Type and Income Type   \n&nbsp;&nbsp;&nbsp;&nbsp; 2.8.1 Organization Type and Occupation Type   \n&nbsp;&nbsp;&nbsp;&nbsp; 2.8.2 Walls Material, Foundation and House Type   \n&nbsp;&nbsp;&nbsp;&nbsp; 2.9 Amount Credit Distribution    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.10 Amount Annuity Distribution  \n&nbsp;&nbsp;&nbsp;&nbsp; 2.11 Amount Goods Price   \n&nbsp;&nbsp;&nbsp;&nbsp; 2.12 Amount Region Population Relative    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.13 Days Birth   \n&nbsp;&nbsp;&nbsp;&nbsp; 2.14 Days Employed    \n&nbsp;&nbsp;&nbsp;&nbsp; 2.15 Num Days Registration  \n&nbsp;&nbsp;&nbsp;&nbsp; 2.15 Count of Family Members  \n3. Exploration - Bureau Data  \n&nbsp;&nbsp;&nbsp;&nbsp; 3.1 Snapshot - Bureau Data    \n4. Exploration - Bureau Balance Data  \n&nbsp;&nbsp;&nbsp;&nbsp; 4.1 Snapshot - Bureau Balance Data     \n5. Exploration - Credit Card Balance Data   \n&nbsp;&nbsp;&nbsp;&nbsp; 5.1 Snapshot - Credit Card Balance Data   \n6. Exploration - POS Cash Balance Data   \n&nbsp;&nbsp;&nbsp;&nbsp; 6.1 Snapshot - POS Cash Balance Data   \n7. Exploration - Previous Application Data   \n&nbsp;&nbsp;&nbsp;&nbsp; 7.1 Snapshot - Previous Application Data  \n&nbsp;&nbsp;&nbsp;&nbsp; 7.2 Contract Status Distribution - Previous Applications  \n&nbsp;&nbsp;&nbsp;&nbsp; 7.3 Suite Type Distribution - Previous Application    \n&nbsp;&nbsp;&nbsp;&nbsp; 7.4 Client Type Distribution  - Previous Application    \n&nbsp;&nbsp;&nbsp;&nbsp; 7.5 Channel Type Distribution - Previous Applications  \n7. Exploration - Installation Payments  \n&nbsp;&nbsp;&nbsp;&nbsp; 8.1 Snapshot of Installation Payments  \n9. Baseline Model  \n&nbsp;&nbsp;&nbsp;&nbsp; 9.1 Dataset Preparation  \n&nbsp;&nbsp;&nbsp;&nbsp; 9.2 Label Encoding     \n&nbsp;&nbsp;&nbsp;&nbsp; 9.3 Validation Sets Preparation    \n&nbsp;&nbsp;&nbsp;&nbsp; 9.4 Model Fitting    \n&nbsp;&nbsp;&nbsp;&nbsp; 9.5 Feature Importance    \n&nbsp;&nbsp;&nbsp;&nbsp; 9.6 Prediction \n\n\n\n## 1. Dataset Preparation ","009eb252":"## 2.6. \u5a5a\u59fb\u72b6\u6cc1\u30fb\u4f4f\u5c45\n\n### 2.6.1 \u5a5a\u59fb\u72b6\u6cc1\u30fb\u4f4f\u5c45\u306e\u5024","4ea53647":"### 9.6 \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6","36d107d3":"## 8. \u5206\u5272\u652f\u6255\u306e\u30c7\u30fc\u30bf\u63a2\u7d22\n## 8.1 \u5206\u5272\u652f\u6255\u30c7\u30fc\u30bf\u306e\u6982\u89b3","758e7a3e":"## 2.9. \u501f\u91d1\u984d\u306e\u5206\u5e03","15e5f1ca":"> \u6027\u5225\u306b\u3064\u3044\u3066\u306f\u3001\u5973\u6027\u304c\u591a\u304f (202448) \u7537\u6027\u306f\u5c11\u306a\u3044 (105059)\u3002  \n> \u5951\u7d04\u30bf\u30a4\u30d7\u306b\u3064\u3044\u3066\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u4e3b\u3067\u30ea\u30dc\u6255\u3044\u306f\u7d0429k\u3068\u304b\u306a\u308a\u5c11\u306a\u3044\u3002\n\n### 2.3.2 \u6027\u5225\u30fb\u5951\u7d04\u30bf\u30a4\u30d7\u3068\u76ee\u7684\u5909\u6570\u3068\u306e\u95a2\u4fc2","b1819fa8":"### 9.2 \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u51e6\u7406\n\n\u3088\u308a\u826f\u3044\u51e6\u7406\u3092\u3057\u305f\u3051\u308c\u3070Oliver\u306e\u7d20\u6674\u3089\u3057\u3044kernel\u3092\u898b\u306b\u884c\u3063\u3066\u304f\u3060\u3055\u3044: https:\/\/www.kaggle.com\/ogrellier\/good-fun-with-ligthgbm ","9ad6cca5":"### 9.5 \u30e2\u30c7\u30eb (Light GBM)\u306e\u5b66\u7fd2","35c63e47":"## 2.8. \u7d44\u7e54\u30fb\u696d\u7a2e\n-  \u7d44\u7e54: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u50cd\u3044\u3066\u3044\u308b\u7d44\u7e54\n-  \u696d\u7a2e: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u696d\u7a2e\n\n### 2.8.1 \u7d44\u7e54\u30fb\u696d\u7a2e\u306e\u5206\u5e03","711d6086":"### 9.7 \u63a8\u5b9a","6f139c02":"## 2.4. \u571f\u5730\u6240\u6709\u30fb\u8eca\u6240\u6709","2321c7fb":"## 4. \u4fe1\u7528\u60c5\u5831\u6a5f\u95a2\u6b8b\u9ad8\u306e\u30c7\u30fc\u30bf\u63a2\u7d22\n\n\u4fe1\u7528\u60c5\u5831\u6a5f\u95a2\u306e\u904e\u53bb\u306e\u501f\u5165\u306e\u6708\u9593\u6b8b\u9ad8\u3002   \n\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u306f\u3001\u904e\u53bb\u306e\u501f\u5165\u306b\u3064\u3044\u3066\u306e\u5404\u6708\u306e\u6b8b\u9ad8\u304c1\u884c\u305a\u3064\u8a18\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u3002  \n\u30c6\u30fc\u30d6\u30eb\u306e\u5404\u5217\u306b\u306f\u3001\u3042\u308b\u501f\u5165\u306ex\u6708 (\u501f\u5165\u7533\u8acb\u304b\u3089x\u30f6\u6708\u524d) \u306e\u50b5\u52d9\u72b6\u6cc1\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u307e\u3059\u3002  \n\n## 4.1 \u4fe1\u7528\u60c5\u5831\u6a5f\u95a2\u6b8b\u9ad8\u30c7\u30fc\u30bf\u306e\u6982\u89b3","e9f5ea50":"### 2.8.3. \u58c1\u306e\u7a2e\u985e\u30fb\u57fa\u790e\u306e\u7a2e\u985e\u30fb\u5bb6\u5c4b\u306e\u7a2e\u985e\u306e\u5206\u5e03\n\u5909\u6570\u306e\u610f\u5473\u304c\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u2026","edbadeb8":"## 5. \u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u6b8b\u9ad8\u306e\u30c7\u30fc\u30bf\u63a2\u7d22\n\n\u501f\u5165\u7533\u8acb\u8005\u306e\u6301\u3064\u30db\u30fc\u30e0\u30fb\u30af\u30ec\u30b8\u30c3\u30c8\u793e\u88fd\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306e\u5404\u6708\u306e\u6b8b\u9ad8\u60c5\u5831\u3002  \n\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u306f\u3001\u501f\u5165\u7533\u8acb\u8005\u306e\u6301\u3064\u30db\u30fc\u30e0\u30fb\u30af\u30ec\u30b8\u30c3\u30c8\u793e\u88fd\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9 (\u6d88\u8cbb\u8005\u91d1\u878d\u30fb\u30ad\u30e3\u30c3\u30b7\u30e5\u30ed\u30fc\u30f3) \u306e\u5404\u6708\u306e\u6b8b\u9ad8\u304c1\u884c\u305a\u3064\u8a18\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u3002  \n\u30c6\u30fc\u30d6\u30eb\u306e\u5404\u5217\u306b\u306f\u3001\u3042\u308b\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306ex\u6708 (\u501f\u5165\u7533\u8acb\u304b\u3089x\u30f6\u6708\u524d) \u306e\u50b5\u52d9\u72b6\u6cc1\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u307e\u3059\u3002 \n\n## 5.1 \u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u6b8b\u9ad8\u30c7\u30fc\u30bf\u306e\u6982\u89b3","38d14879":"## 2.15 \u767b\u9332\u65e5\u306e\u5206\u5e03\n- \u767b\u9332\u65e5: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u501f\u5165\u7533\u8acb\u65e5\u306e\u4f55\u65e5\u524d\u306b\u767b\u9332\u60c5\u5831\u3092\u66f4\u65b0\u3057\u305f\u304b","a9bf5a1d":"## 9. \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30fb\u30e2\u30c7\u30eb\n\n### 9.1 \u524d\u51e6\u7406","69f9fe64":"## 2. \u30c7\u30fc\u30bf\u63a2\u7d22: Application (\u30ed\u30fc\u30f3\u7533\u8fbc\u66f8)\n\n## 2.1 Application Train \u306e\u6982\u89b3\n\nApplication \u30c7\u30fc\u30bf\u306f\u5168\u30ed\u30fc\u30f3\u7533\u8fbc\u66f8\u306e\u7d71\u8a08\u60c5\u5831\u304b\u3089\u306a\u308a\u3001\u5404\u884c\u304c1\u3064\u306e\u30ed\u30fc\u30f3\u3092\u8868\u3059\u3002"}}