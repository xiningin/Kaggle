{"cell_type":{"ea7b34c3":"code","036ec67e":"code","d1ab3b29":"code","aefcc0f0":"code","0bf35977":"code","0b49c730":"code","2807596b":"code","f823f3ab":"code","9af06171":"code","57273c74":"code","2e5eb92a":"code","93775d93":"code","7be739e7":"code","c1cb4643":"code","cd93db00":"code","ec033666":"code","2ab2097f":"code","e8257b31":"code","c3633291":"code","faaac720":"code","2ac5464a":"code","81780794":"code","e39e5981":"code","35e4fddd":"code","eb3ccc76":"code","0a7a803a":"code","c6aea78f":"code","e79db207":"code","fe53ef04":"code","ff062210":"code","bd6ae4d3":"code","2899b4a0":"code","43f755a8":"code","da0b9816":"code","b19405cf":"code","d2f728b2":"code","22bd5c42":"code","230e423b":"code","1c293892":"code","7a7125d8":"code","78769cf6":"code","4621f6f6":"code","fd451044":"code","e9de9c87":"code","d48f2f15":"code","62cc91a3":"code","c828f049":"code","3cda16fe":"code","21beb678":"code","7e713a95":"code","f08fa3ea":"code","4434daa9":"code","130c1ebd":"code","583eeb9a":"code","5a5a7a15":"code","cb5e799b":"code","072097b7":"code","c4855a86":"code","6f189d50":"code","8de7894d":"code","aaa705c4":"code","08fda58d":"code","ccfd9a55":"code","34b52459":"code","99e1375d":"code","ef47440e":"code","cd1c3403":"code","3537fc79":"code","247ac0d4":"code","455d12a8":"code","ac8596d2":"markdown","80f12603":"markdown","db61a05a":"markdown","ad91f4af":"markdown","f5cfef5c":"markdown","5dc13033":"markdown","206c39d9":"markdown","e5c15c6c":"markdown","2f15d1a8":"markdown","9349d813":"markdown","6c135eab":"markdown","a0bcbaee":"markdown","06b03686":"markdown","e89e00bd":"markdown","cb7544bd":"markdown","9fd431d4":"markdown","7b1969cc":"markdown"},"source":{"ea7b34c3":"# Importing some important librarys\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","036ec67e":"df = pd.read_csv('..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')","d1ab3b29":"df.shape","aefcc0f0":"df.head()\n\n# We got some categorical data, and it's a binary classification (Yes, NO)","0bf35977":"df.info()\n\n# We have missing data , we will handle them as we go","0b49c730":"# Describe the numerical data\n\ndf.describe()","2807596b":"# we will change the type of Credit_History to object becaues we can see that it is 1 or 0\n\ndf['Credit_History'] = df['Credit_History'].astype('O')","f823f3ab":"# describe categorical data (\"objec\")\n\ndf.describe(include='O')","9af06171":"# we will drop ID because it's not important for our model and it will just mislead the model\n\ndf.drop('Loan_ID', axis=1, inplace=True)","57273c74":"df.duplicated().any()\n\n# we got no duplicated rows","2e5eb92a":"# let's look at the target percentage\n\nplt.figure(figsize=(8,6))\nsns.countplot(df['Loan_Status']);\n\nprint('The percentage of Y class : %.2f' % (df['Loan_Status'].value_counts()[0] \/ len(df)))\nprint('The percentage of N class : %.2f' % (df['Loan_Status'].value_counts()[1] \/ len(df)))\n\n# We can consider it as imbalanced data, but for now i will not","93775d93":"df.columns","7be739e7":"df.head(1)","c1cb4643":"# Credit_History\n\ngrid = sns.FacetGrid(df,col='Loan_Status', size=3.2, aspect=1.6)\ngrid.map(sns.countplot, 'Credit_History');\n\n# we didn't give a loan for most people who got Credit History = 0\n# but we did give a loan for most of people who got Credit History = 1\n# so we can say if you got Credit History = 1 , you will have better chance to get a loan\n\n# important feature","cd93db00":"# Gender\n\ngrid = sns.FacetGrid(df,col='Loan_Status', size=3.2, aspect=1.6)\ngrid.map(sns.countplot, 'Gender');\n\n# most males got loan and most females got one too so (No pattern)\n\n# i think it's not so important feature, we will see later","ec033666":"# Married\nplt.figure(figsize=(15,5))\nsns.countplot(x='Married', hue='Loan_Status', data=df);\n\n# most people who get married did get a loan\n# if you'r married then you have better chance to get a loan :)\n# good feature","2ab2097f":"# Dependents\n\nplt.figure(figsize=(15,5))\nsns.countplot(x='Dependents', hue='Loan_Status', data=df);\n\n# first if Dependents = 0 , we got higher chance to get a loan ((very hight chance))\n# good feature","e8257b31":"# Education\n\ngrid = sns.FacetGrid(df,col='Loan_Status', size=3.2, aspect=1.6)\ngrid.map(sns.countplot, 'Education');\n\n# If you are graduated or not, you will get almost the same chance to get a loan (No pattern)\n# Here you can see that most people did graduated, and most of them got a loan\n# on the other hand, most of people who did't graduate also got a loan, but with less percentage from people who graduated\n\n# not important feature","c3633291":"# Self_Employed\n\ngrid = sns.FacetGrid(df,col='Loan_Status', size=3.2, aspect=1.6)\ngrid.map(sns.countplot, 'Self_Employed');\n\n# No pattern (same as Education)","faaac720":"# Property_Area\n\nplt.figure(figsize=(15,5))\nsns.countplot(x='Property_Area', hue='Loan_Status', data=df);\n\n# We can say, Semiurban Property_Area got more than 50% chance to get a loan\n\n# good feature","2ac5464a":"# ApplicantIncome\n\nplt.scatter(df['ApplicantIncome'], df['Loan_Status']);\n\n# No pattern","81780794":"# the numerical data\n\ndf.groupby('Loan_Status').median() # median because Not affected with outliers\n\n# we can see that when we got low median in CoapplicantInocme we got Loan_Status = N\n\n# CoapplicantInocme is a good feature","e39e5981":"df.isnull().sum().sort_values(ascending=False)","35e4fddd":"# We will separate the numerical columns from the categorical\n\ncat_data = []\nnum_data = []\n\nfor i,c in enumerate(df.dtypes):\n    if c == object:\n        cat_data.append(df.iloc[:, i])\n    else :\n        num_data.append(df.iloc[:, i])","eb3ccc76":"cat_data = pd.DataFrame(cat_data).transpose()\nnum_data = pd.DataFrame(num_data).transpose()","0a7a803a":"cat_data.head()","c6aea78f":"num_data.head()","e79db207":"# cat_data\n# If you want to fill every column with its own most frequent value you can use\n\ncat_data = cat_data.apply(lambda x:x.fillna(x.value_counts().index[0]))\ncat_data.isnull().sum().any() # no more missing data \n","fe53ef04":"# num_data\n# fill every missing value with their previous value in the same column\n\nnum_data.fillna(method='bfill', inplace=True)\nnum_data.isnull().sum().any() # no more missing data ","ff062210":"from sklearn.preprocessing import LabelEncoder  \nle = LabelEncoder()\ncat_data.head()","bd6ae4d3":"# transform the target column\n\ntarget_values = {'Y': 0 , 'N' : 1}\n\ntarget = cat_data['Loan_Status']\ncat_data.drop('Loan_Status', axis=1, inplace=True)\n\ntarget = target.map(target_values)","2899b4a0":"# transform other columns\n\nfor i in cat_data:\n    cat_data[i] = le.fit_transform(cat_data[i])","43f755a8":"target.head()","da0b9816":"cat_data.head()","b19405cf":"df = pd.concat([cat_data, num_data, target], axis=1)","d2f728b2":"df.head()","22bd5c42":"X = pd.concat([cat_data, num_data], axis=1)\ny = target ","230e423b":"# we will use StratifiedShuffleSplit to split the data Taking into consideration that we will get the same ratio on the target column\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\n\nsss = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n\nfor train, test in sss.split(X, y):\n    X_train, X_test = X.iloc[train], X.iloc[test]\n    y_train, y_test = y.iloc[train], y.iloc[test]\n    \nprint('X_train shape', X_train.shape)\nprint('y_train shape', y_train.shape)\nprint('X_test shape', X_test.shape)\nprint('y_test shape', y_test.shape)\n\n# almost same ratio\nprint('\\nratio of target in y_train :',y_train.value_counts().values\/ len(y_train))\nprint('ratio of target in y_test :',y_test.value_counts().values\/ len(y_test))\nprint('ratio of target in original_data :',df['Loan_Status'].value_counts().values\/ len(df))","1c293892":"# we will use 4 different models for training\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodels = {\n    'LogisticRegression': LogisticRegression(random_state=42),\n    'KNeighborsClassifier': KNeighborsClassifier(),\n    'SVC': SVC(random_state=42),\n    'DecisionTreeClassifier': DecisionTreeClassifier(max_depth=1, random_state=42)\n}","7a7125d8":"# loss\n\nfrom sklearn.metrics import precision_score, recall_score, f1_score, log_loss, accuracy_score\n\ndef loss(y_true, y_pred, retu=False):\n    pre = precision_score(y_true, y_pred)\n    rec = recall_score(y_true, y_pred)\n    f1 = f1_score(y_true, y_pred)\n    loss = log_loss(y_true, y_pred)\n    acc = accuracy_score(y_true, y_pred)\n    \n    if retu:\n        return pre, rec, f1, loss, acc\n    else:\n        print('  pre: %.3f\\n  rec: %.3f\\n  f1: %.3f\\n  loss: %.3f\\n  acc: %.3f' % (pre, rec, f1, loss, acc))","78769cf6":"# train_eval_train\n\ndef train_eval_train(models, X, y):\n    for name, model in models.items():\n        print(name,':')\n        model.fit(X, y)\n        loss(y, model.predict(X))\n        print('-'*30)\n        \ntrain_eval_train(models, X_train, y_train)\n\n# we can see that best model is LogisticRegression at least for now, SVC is just memorizing the data so it is overfitting .","4621f6f6":"X_train.shape","fd451044":"# train_eval_cross\n# in the next cell i will be explaining this function\n\nfrom sklearn.model_selection import StratifiedKFold\nskf = StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n\ndef train_eval_cross(models, X, y, folds):\n    # we will change X & y to dataframe because we will use iloc (iloc don't work on numpy array)\n    X = pd.DataFrame(X) \n    y = pd.DataFrame(y)\n    idx = [' pre', ' rec', ' f1', ' loss', ' acc']\n    for name, model in models.items():\n        ls = []\n        print(name,':')\n\n        for train, test in folds.split(X, y):\n            model.fit(X.iloc[train], y.iloc[train]) \n            y_pred = model.predict(X.iloc[test]) \n            ls.append(loss(y.iloc[test], y_pred, retu=True))\n        print(pd.DataFrame(np.array(ls).mean(axis=0), index=idx)[0])  #[0] because we don't want to show the name of the column\n        print('-'*30)\n        \ntrain_eval_cross(models, X_train, y_train, skf)\n\n# ohhh, as i said SVC is just memorizing the data, and you can see that here DecisionTreeClassifier is better than LogisticRegression ","e9de9c87":"# some explanation of the above function\n\nx = []\nidx = [' pre', ' rec', ' f1', ' loss', ' acc']\n\n# we will use one model\nlog = LogisticRegression()\n\nfor train, test in skf.split(X_train, y_train):\n    log.fit(X_train.iloc[train], y_train.iloc[train])\n    ls = loss(y_train.iloc[test], log.predict(X_train.iloc[test]), retu=True)\n    x.append(ls)\n    \n# thats what we get\npd.DataFrame(x, columns=idx)\n\n# (column 0 represent the precision_score of the 10 folds)\n# (row 0 represent the (pre, rec, f1, loss, acc) for the first fold)\n# then we should find the mean of every column\n# pd.DataFrame(x, columns=idx).mean(axis=0)","d48f2f15":"# ooh, we got it right for most of the features, as you can see we've say at the first of the kernel ,\n# that Credit_Histroy and Married etc, are good features, actually Credit_Histroy is the best .\n\ndata_corr = pd.concat([X_train, y_train], axis=1)\ncorr = data_corr.corr()\nplt.figure(figsize=(10,7))\nsns.heatmap(corr, annot=True);\n\n# here we got 58% similarity between LoanAmount & ApplicantIncome \n# and that may be bad for our model so we will see what we can do","62cc91a3":"X_train.head()","c828f049":"# I will try to make some operations on some features, here I just tried diffrent operations on diffrent features,\n# having experience in the field, and having knowledge about the data will also help\n\nX_train['new_col'] = X_train['CoapplicantIncome'] \/ X_train['ApplicantIncome']  \nX_train['new_col_2'] = X_train['LoanAmount'] * X_train['Loan_Amount_Term'] ","3cda16fe":"data_corr = pd.concat([X_train, y_train], axis=1)\ncorr = data_corr.corr()\nplt.figure(figsize=(10,7))\nsns.heatmap(corr, annot=True);\n\n# new_col 0.03 , new_col_2, 0.047\n# not that much , but that will help us reduce the number of features","21beb678":"X_train.drop(['CoapplicantIncome', 'ApplicantIncome', 'Loan_Amount_Term', 'LoanAmount'], axis=1, inplace=True)","7e713a95":"train_eval_cross(models, X_train, y_train, skf)\n\n# ok, SVC is improving, but LogisticRegression is overfitting\n# i wan't change nothing so we can see what will happen as we go","f08fa3ea":"# first lets take a look at the value counts of every label\n\nfor i in range(X_train.shape[1]):\n    print(X_train.iloc[:,i].value_counts(), end='\\n------------------------------------------------\\n')","4434daa9":"# new_col_2\n\n# we can see we got right_skewed\n# we can solve this problem with very simple statistical teqniq , by taking the logarithm of all the values\n# because when data is normally distributed that will help improving our model\n\nfrom scipy.stats import norm\n\nfig, ax = plt.subplots(1,2,figsize=(20,5))\n\nsns.distplot(X_train['new_col_2'], ax=ax[0], fit=norm)\nax[0].set_title('new_col_2 before log')\n\nX_train['new_col_2'] = np.log(X_train['new_col_2'])  # logarithm of all the values\n\nsns.distplot(X_train['new_col_2'], ax=ax[1], fit=norm)\nax[1].set_title('new_col_2 after log');","130c1ebd":"# now we will evaluate our models, and i will do that continuously ,so i don't need to mention that every time\n\ntrain_eval_cross(models, X_train, y_train, skf)\n\n# wooow our models improved really good by just doing the previous step .","583eeb9a":"# new_col\n\n# most of our data is 0 , so we will try to change other values to 1\n\nprint('before:')\nprint(X_train['new_col'].value_counts())\n\nX_train['new_col'] = [x if x==0 else 1 for x in X_train['new_col']]\nprint('-'*50)\nprint('\\nafter:')\nprint(X_train['new_col'].value_counts())","5a5a7a15":"train_eval_cross(models, X_train, y_train, skf)\n\n# ok we are improving our models as we go ","cb5e799b":"for i in range(X_train.shape[1]):\n    print(X_train.iloc[:,i].value_counts(), end='\\n------------------------------------------------\\n')\n    \n# looks better","072097b7":"# we will use boxplot to detect outliers\n\nsns.boxplot(X_train['new_col_2']);\nplt.title('new_col_2 outliers', fontsize=15);\nplt.xlabel('');","c4855a86":"threshold = 0.1  # this number is hyper parameter , as much as you reduce it, as much as you remove more points\n                 # you can just try different values the deafult value is (1.5) it works good for most cases\n                 # but be careful, you don't want to try a small number because you may loss some important information from the data .\n                 # that's why I was surprised when 0.1 gived me the best result\n            \nnew_col_2_out = X_train['new_col_2']\nq25, q75 = np.percentile(new_col_2_out, 25), np.percentile(new_col_2_out, 75) # Q25, Q75\nprint('Quartile 25: {} , Quartile 75: {}'.format(q25, q75))\n\niqr = q75 - q25\nprint('iqr: {}'.format(iqr))\n\ncut = iqr * threshold\nlower, upper = q25 - cut, q75 + cut\nprint('Cut Off: {}'.format(cut))\nprint('Lower: {}'.format(lower))\nprint('Upper: {}'.format(upper))\n\n\noutliers = [x for x in new_col_2_out if x < lower or x > upper]\nprint('Nubers of Outliers: {}'.format(len(outliers)))\nprint('outliers:{}'.format(outliers))\n\ndata_outliers = pd.concat([X_train, y_train], axis=1)\nprint('\\nlen X_train before dropping the outliers', len(data_outliers))\ndata_outliers = data_outliers.drop(data_outliers[(data_outliers['new_col_2'] > upper) | (data_outliers['new_col_2'] < lower)].index)\n\nprint('len X_train before dropping the outliers', len(data_outliers))","6f189d50":"X_train = data_outliers.drop('Loan_Status', axis=1)\ny_train = data_outliers['Loan_Status']","8de7894d":"sns.boxplot(X_train['new_col_2']);\nplt.title('new_col_2 without outliers', fontsize=15);\nplt.xlabel('');\n\n# good :)","aaa705c4":"train_eval_cross(models, X_train, y_train, skf)\n\n# know we got 94.1 for precision & 53.5 for recall","08fda58d":"# Self_Employed got really bad corr (-0.00061) , let's try remove it and see what will happen\n\ndata_corr = pd.concat([X_train, y_train], axis=1)\ncorr = data_corr.corr()\nplt.figure(figsize=(10,7))\nsns.heatmap(corr, annot=True);\n","ccfd9a55":"#X_train.drop(['Self_Employed'], axis=1, inplace=True)\n\ntrain_eval_cross(models, X_train, y_train, skf)\n\n# looks like Self_Employed is not important\n# KNeighborsClassifier improved\n\n# droping all the features Except for Credit_History actually improved KNeighborsClassifier and didn't change anything in other models\n# so you can try it by you self\n# but don't forget to do that on testing data too\n\n#X_train.drop(['Self_Employed','Dependents', 'new_col_2', 'Education', 'Gender', 'Property_Area','Married', 'new_col'], axis=1, inplace=True)","34b52459":"data_corr = pd.concat([X_train, y_train], axis=1)\ncorr = data_corr.corr()\nplt.figure(figsize=(10,7))\nsns.heatmap(corr, annot=True);","99e1375d":"X_test.head()","ef47440e":"X_test_new = X_test.copy()","cd1c3403":"x = []\n\nX_test_new['new_col'] = X_test_new['CoapplicantIncome'] \/ X_test_new['ApplicantIncome']  \nX_test_new['new_col_2'] = X_test_new['LoanAmount'] * X_test_new['Loan_Amount_Term']\nX_test_new.drop(['CoapplicantIncome', 'ApplicantIncome', 'Loan_Amount_Term', 'LoanAmount'], axis=1, inplace=True)\n\nX_test_new['new_col_2'] = np.log(X_test_new['new_col_2'])\n\nX_test_new['new_col'] = [x if x==0 else 1 for x in X_test_new['new_col']]\n\n#X_test_new.drop(['Self_Employed'], axis=1, inplace=True)\n\n# drop all the features Except for Credit_History\n#X_test_new.drop(['Self_Employed','Dependents', 'new_col_2', 'Education', 'Gender', 'Property_Area','Married', 'new_col'], axis=1, inplace=True)","3537fc79":"X_test_new.head()","247ac0d4":"X_train.head()","455d12a8":"for name,model in models.items():\n    print(name, end=':\\n')\n    loss(y_test, model.predict(X_test_new))\n    print('-'*40)","ac8596d2":"**Train the data**\n\n* we will stop here for know and train the data.\n\nwe are going to use **StratifiedShuffleSplit**, for more information .","80f12603":"# **Outliers**\n\nthere is different techniques to handle outliers, here we are going to use IQR","db61a05a":"**Simple process for the data**","ad91f4af":"**we will work on the features that have varied values**","f5cfef5c":"# evaluate the models on Test_data\n\n**here we will just repeat what we did in training data**","5dc13033":"**simple look on the data**","206c39d9":"build functions****","e5c15c6c":"**Missing values**\n\nhere i am just going to use a simple techniques to handle the missing data","2f15d1a8":"# Conclusion:\n\nwhat ever we do, our \n\n**recall score **  \n\nwill not improving , maybe because we don't have a good amount of data, so I think if we got **more data** and we try more **complex models** our accuracy will improve,I am not sure about this, so please if I made any mistakes in this kernel , or if you have any suggestions which can improve the accuracy please feel free to share it with us in the comments .\n\nThanks :)\n","9349d813":"**first we will go through the categorical features**","6c135eab":"**categorical columns**\n\n* we are going to use **LabelEncoder** :\n\nwhat it is actually do it encode labels with value between 0 and n_classes-1 , for more examples .","a0bcbaee":"**Before we start:**\n\nIf you like my work, please upvote this kernel as it will keep me motivated to do more in the future and share the kernel with others so we can all benefit from it .\n\n**Introduction:**\n\nIn this kernel ,I will try to show you how different models can improve just by doing simple process on the data .\n\nwe are going to work on **binary classification problem,** where we got some information about sample of peoples , and we need to predict whether we should give some one a loan or not depending on his information . we actually have a few sample size (614 rows), so we will go with machine learning techniques to solve our problem .\n\n**\nwhat you will learn in this kernel ?**\n\n* basics of visualizing the data .\n* how to compare between **feature importance **(at less in this data) .\n\n* feature selection\n* feature engineer\n\n* some simple techniques to **process** the data .\n* handling **missing data** .\n* how to deal with **categorical** and **numerical** data .\n*** outliers** data detection\n* but the most important thing that you will learn , is how to **evaluate your model** at every step you take .\n**\nwhat we will use ?**\n\n* some important libraries like **sklearn, matplotlib, numpy, pandas, seaborn, scipy**\n* fill the values using **backward 'bfill' method** for numerical columns , and **most frequent value** for categorical columns (simple techniques)\n* 4 different models to train your data, so we can compare between them\n\n**a) logistic regression\n\nb) KNeighborsClassifier\n\nC) SVC\n\nd) DecisionTreeClassifier**\n\n**Note :** I am writing this kernel while i am still studying and learning about this field , so if there is any mistake i have made, please feel free to tell me in the comment below, and you can ask me any question about this kernel .\n\nSo let's start\n\n","06b03686":"**Classification Loan Status**","e89e00bd":"**we are going to build 3 functions :\n\n1) ** **loss :** to evaluate our models\n\n* precision\n* recall\n* f1\n* log_loss\n* accuracy_score\n\n2)** train_eval_train** : to evaluate our models in the same data that we train it on .\n3) **train_eval_cross** : to evaluate our models using different data that we train the model on.\n\n* StratifiedKFold\n\n**so you may ask why we don't just train our model and evaluate it without building this functions ?**\n\nactually you can do that,but mostly your model will not work good at beginning, so you need to change something about your data to improve your accuracy , by changing i mean **data processing**, and every step you will make, you should **evaluate your model** to see if it is improving or not, so to not do this step every time, this functions will make life easy as you go :)","cb7544bd":"# features selection","9fd431d4":"**let's look deeper in the data**","7b1969cc":"**Let's start to improve our model\n\nfeatures engineer**"}}