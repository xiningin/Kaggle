{"cell_type":{"19fd43c3":"code","e2c4d352":"code","c827e274":"code","298fb8aa":"code","93bc4461":"code","d0c0f89b":"code","9a06bc15":"code","1b02e5f2":"code","49a18e91":"code","e6d010f6":"code","cf282ef1":"code","32cf0998":"code","ae9212bb":"code","dcf718a0":"code","6a419332":"code","66370f2a":"code","8bd650a1":"code","0dfeb29d":"code","bca8e25b":"code","340ddc93":"code","ae0f78e4":"code","08d11df6":"markdown","38346ddb":"markdown","2273c09f":"markdown","4cfb9bbd":"markdown","4436b143":"markdown","a5104242":"markdown","40fc93c7":"markdown","15499af2":"markdown","f817ef7c":"markdown","c16f61ae":"markdown","92bfd8c9":"markdown","16eaab7c":"markdown","7da99c91":"markdown","5a643f80":"markdown","c9f70f2b":"markdown","c70f949a":"markdown","46a2e28f":"markdown","c4395dcd":"markdown","866d1575":"markdown"},"source":{"19fd43c3":"import pandas as pd #pandas for dataframe\nimport numpy as np #numpy for arrays","e2c4d352":"df = pd.read_csv('https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DL0101EN\/labs\/data\/concrete_data.csv')\ndf.head()","c827e274":"dfcolumns = df.columns #lets extract the columns\n\npredictors = df[dfcolumns[dfcolumns != 'Strength']] # all columns except Strength\ntarget = df['Strength'] # Strength column","298fb8aa":"predictors.head()","93bc4461":"target.head()","d0c0f89b":"ncols = predictors.shape[1]","9a06bc15":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense","1b02e5f2":"# define regression model\ndef regression_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(10, activation='relu', input_shape=(ncols,)))\n    model.add(Dense(1))\n    \n    # compile model\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model","49a18e91":"model = regression_model() #declaring the model\nerrorlist=[] #list for keeping 50 mean squared error values\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nfor x in range(50):\n    print (\"Iteration \", x)\n    X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.3, random_state=42)\n    model.fit(X_train, y_train, validation_data=(X_test,y_test), epochs=50, verbose=2)\n    score = model.evaluate(X_test, y_test, verbose=0) ##returns the value for the mean squared error\n    errorlist.append(score)\n    x = x+1","e6d010f6":"print (errorlist)\nprint (\"---------------------------------\")\nprint (\"The mean of MSEs is: \", np.mean(errorlist))\nprint (\"The Std. Deviation of MSEs is: \", np.std(errorlist))","cf282ef1":"predictors_norm = (predictors - predictors.mean()) \/ predictors.std()\npredictors_norm.head()","32cf0998":"errorlistB=[]\n\nfor x in range(50):\n    print (\"Iteration \", x)\n    X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3, random_state=42)\n    model.fit(X_train, y_train, validation_data=(X_test,y_test), epochs=50, verbose=2)\n    score = model.evaluate(X_test, y_test, verbose=0) ##returns the value for the mean squared error\n    errorlistB.append(score)\n    x = x+1","ae9212bb":"print (errorlistB)\nprint (\"---------------------------------\")\nprint (\"The mean of MSEs is: \", np.mean(errorlistB))\nprint (\"The Std. Deviation of MSEs is: \", np.std(errorlistB))","dcf718a0":"print (\"The Mean of MSEs of part A: \", np.mean(errorlist))\nprint (\"The Mean of MSEs of part B: \", np.mean(errorlistB))\nprint (\"Difference: \", (np.mean(errorlist) - np.mean(errorlistB)))","6a419332":"errorlistC=[]\n\nfor x in range(50):\n    print (\"Iteration \", x)\n    X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3, random_state=42)\n    model.fit(X_train, y_train, validation_data=(X_test,y_test), epochs=100, verbose=2)\n    score = model.evaluate(X_test, y_test, verbose=0) ##returns the value for the mean squared error\n    errorlistC.append(score)\n    x = x+1","66370f2a":"print (errorlistC)\nprint (\"---------------------------------\")\nprint (\"The mean of MSEs is: \", np.mean(errorlistC))\nprint (\"The Std. Deviation of MSEs is: \", np.std(errorlistC))","8bd650a1":"print (\"The Mean of MSEs of part B: \", np.mean(errorlistB))\nprint (\"The Mean of MSEs of part C: \", np.mean(errorlistC))\nprint (\"Difference: \", (np.mean(errorlistB) - np.mean(errorlistC)))","0dfeb29d":"# define regression model\ndef regression_modelD():\n    # create model\n    model = Sequential()\n    model.add(Dense(10, activation='relu', input_shape=(ncols,)))\n    model.add(Dense(10, activation='relu'))\n    model.add(Dense(10, activation='relu'))\n    model.add(Dense(1))\n    \n    # compile model\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model","bca8e25b":"model = regression_modelD()\nerrorlistD=[]\n\nfor x in range(50):\n    print (\"Iteration \", x)\n    X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3, random_state=42)\n    model.fit(X_train, y_train, validation_data=(X_test,y_test), epochs=100, verbose=2)\n    score = model.evaluate(X_test, y_test, verbose=0) ##returns the value for the mean squared error\n    errorlistD.append(score)\n    x = x+1","340ddc93":"print (errorlistC)\nprint (\"---------------------------------\")\nprint (\"The mean of MSEs is: \", np.mean(errorlistD))\nprint (\"The Std. Deviation of MSEs is: \", np.std(errorlistD))","ae0f78e4":"print (\"The Mean of MSEs of part B: \", np.mean(errorlistB))\nprint (\"The Mean of MSEs of part C: \", np.mean(errorlistD))\nprint (\"Difference: \", (np.mean(errorlistB) - np.mean(errorlistD)))","08d11df6":"#### importing keras and necessary functions","38346ddb":"#### now training the model again for 50 times on the normalized data for Part B so that we can compare Mean of MSEs of both Part A and Part B","2273c09f":"## PART B","4cfb9bbd":"#### Split data into predictors and target","4436b143":"#### printing the list containing MSE values for 50 iterations","a5104242":"#### lets extract number of columns from predictors for parameter to the model","40fc93c7":"#### increasing the number of Epochs to 100 in part B","15499af2":"## PART A","f817ef7c":"#### lets import the dataset","c16f61ae":"#### lets do a quick check of predictors and target","92bfd8c9":"#### training and testing the model in a loop for 50 times to keep a list of mean squared error","16eaab7c":"#### The difference between MEAN of MSE of Part B and Part C","7da99c91":"#### The difference between MEAN of MSE of Part B and Part D","5a643f80":"#### building a neural network with 3 hidden layers","c9f70f2b":"#### normalizing the predictors","c70f949a":"#### Building the Neural Network","46a2e28f":"## PART D","c4395dcd":"## PART C","866d1575":"#### The difference between MEAN of MSE of Part A and Part B"}}