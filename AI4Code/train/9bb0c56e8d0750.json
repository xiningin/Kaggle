{"cell_type":{"8353c656":"code","5e1d8542":"code","2710f31b":"code","b3e5009e":"code","00abddc0":"code","50f9faa0":"code","957dc14a":"code","04115772":"code","2b5a2fbb":"code","f6e98819":"code","e6589b15":"code","4f2b48bb":"code","38deb886":"code","c5a6cee5":"code","4bdb4b0e":"code","1f6d582f":"code","e86bb0a8":"markdown","7a06e729":"markdown","75a24c80":"markdown","994ebc79":"markdown","a640aa3b":"markdown","ee913544":"markdown","8e2558f1":"markdown","44562e8a":"markdown","4ad873c6":"markdown"},"source":{"8353c656":"import numpy as np \nimport pandas as pd \nfrom pathlib import Path\nimport os.path\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport cv2\n\nfrom keras.preprocessing.image import load_img\nfrom keras.utils import to_categorical\nfrom keras.models import Model\nfrom keras.layers import BatchNormalization, Dense, GlobalAveragePooling2D,Lambda, Dropout, InputLayer, Input\nfrom tensorflow import keras\nfrom keras.applications import Xception\nfrom keras.applications.xception import preprocess_input\nfrom keras.callbacks import EarlyStopping\nfrom keras.models import Sequential","5e1d8542":"train_img_path = '..\/input\/pneumothorax-binary-classification-task\/small_train_data_set\/small_train_data_set'\nlabels = pd.read_csv(r'..\/input\/pneumothorax-binary-classification-task\/train_data.csv')","2710f31b":"labels.head()","b3e5009e":"#drop unnecessary columns\nlabels.drop(['Unnamed: 0','Unnamed: 0.1'],axis=1,inplace=True)","00abddc0":"print(f'Number of pictures in the training dataset: {labels.shape[0]}\\n')\nprint(f'Number of different labels: {len(labels.target.unique())}\\n')\nprint(f'Labels: {labels.target.unique()}')","50f9faa0":"plt.figure(figsize=(20,40))\ni=1\nfor idx,s in labels.head(6).iterrows():\n    img_path = os.path.join(train_img_path,s['file_name'])\n    img=cv2.imread(img_path)\n    img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    fig=plt.subplot(6,2,i)\n    fig.imshow(img)\n    fig.set_title(s['target'])\n    i+=1","957dc14a":"#Extracting different classes\nclasses = sorted(labels['target'].unique())\nn_classes = len(classes)\nprint(f'number of class: {n_classes}')","04115772":"classes_to_num = dict(zip(classes,range(n_classes)))","2b5a2fbb":"#Function to load and convert images to array\n\ndef images_to_array(data_dir,df,image_size):\n    image_names = df['file_name']\n    image_labels = df['target']\n    data_size = len(image_names)\n    \n    X = np.zeros([data_size,image_size[0],image_size[1],image_size[2]],dtype = np.uint8)\n    y = np.zeros([data_size,1],dtype = np.uint8)\n    \n    for i in range(data_size):\n        img_name = image_names[i]\n        img_dir = os.path.join(data_dir,img_name)\n        img_pixels = load_img(img_dir,target_size=image_size)\n        X[i] = img_pixels\n        y[i] = classes_to_num[image_labels[i]]\n        \n    y = to_categorical(y)\n    ind = np.random.permutation(data_size)\n    X = X[ind]\n    y = y[ind]\n    print('Ouptut Data Size: ', X.shape)\n    print('Ouptut Label Size: ', y.shape)\n    return X, y  \n","f6e98819":"#Selecting image size according to pretrained models\nimg_size = (299,299,3)\nX, y = images_to_array(train_img_path,labels,img_size)","e6589b15":"\ndef get_features(model_name, data_preprocessor,weight, input_size, data):\n    #Prepare pipeline.\n    input_layer = Input(input_size)\n    preprocessor = Lambda(data_preprocessor)(input_layer)\n    \n    base_model = model_name(weights=weight,\n                            include_top=False,\n                            input_shape=input_size)(preprocessor)\n    \n    avg = GlobalAveragePooling2D()(base_model)\n    feature_extractor = Model(inputs = input_layer, outputs = avg)\n    \n    #Extract feature.\n    feature_maps = feature_extractor.predict(data, batch_size=128, verbose=1)\n    print('Feature maps shape: ', feature_maps.shape)\n    return feature_maps","4f2b48bb":"#Extracting features using Xception\nXception_preprocessor = preprocess_input\nXception_features = get_features(Xception,\n                                  Xception_preprocessor,\n                                 '..\/input\/keras-pretrained-models\/Xception_NoTop_ImageNet.h5',\n                                  img_size, X)","38deb886":"#Callbacks\nEarlyStop_callback = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\nmy_callback=[EarlyStop_callback]","c5a6cee5":"#Adding the final layers to the above base models where the actual classification is done in the dense layers\n#Building Model\nmodel = Sequential()\nmodel.add(InputLayer(Xception_features.shape[1:]))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(2,activation='sigmoid'))\n\nmodel.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['AUC'])\nmodel.summary()\n\n# Training the CNN on the Train features and evaluating it on the val data\nhistory = model.fit(Xception_features,y,validation_split=0.20,callbacks=my_callback, epochs = 50, batch_size=128)","4bdb4b0e":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","1f6d582f":"# summarize history for AUC\nplt.plot(history.history['auc'])\nplt.plot(history.history['val_auc'])\nplt.title('model AUC')\nplt.ylabel('AUC')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","e86bb0a8":"Pneumothorax small dataset contains 2027 images medical images of lungs done by radiologist during chest x-ray of the patients.","7a06e729":"<div style=\"background-color:orange;\">\n    <h1><center>Converting Images to Array<\/center><\/h1>\n<\/div>","75a24c80":"<div style=\"background-color:orange;\">\n    <h1><center>Extracting features using Xception<\/center><\/h1>\n<\/div>","994ebc79":"<div style=\"background-color:orange;\">\n    <h1><center>What is Pneumothorax?<\/center><\/h1>\n<\/div>\n\n* A pneumothorax can be defined as air in the pleural cavity. This occurs when there is a breach of the lung surface or chest wall which allows air to enter the pleural cavity and consequently cause the lung to collapse.\n\n* Pneumothorax can be caused by a blunt chest injury, damage from underlying lung disease, or most horrifying\u2014it may occur for no obvious reason at all. On some occasions, a collapsed lung can be a life-threatening event.\n\n* Pneumothorax is usually diagnosed by a radiologist on a chest x-ray, and can sometimes be very difficult to confirm. An accurate AI algorithm to detect pneumothorax would be useful in a lot of clinical scenarios. AI could be used to triage chest radiographs for priority interpretation, or to provide a more confident diagnosis for non-radiologists.\n","a640aa3b":"<div style=\"background-color:orange;\">\n    <h1><center>Importing The Dataset<\/center><\/h1>\n<\/div>","ee913544":"<div class=\"alert alert-warning\">\n<h4>If you like this notebook, please upvote it! \n     Thank you! :)<\/h4>\n<\/div>","8e2558f1":"<div style=\"background-color:orange;\">\n    <h1><center>Model Building<\/center><\/h1>\n<\/div>","44562e8a":"<div style=\"background-color:orange;\">\n    <h1><center>Importing Libraries<\/center><\/h1>\n<\/div>","4ad873c6":"<div style=\"background-color:orange;\">\n    <h1><center>Data Visualization<\/center><\/h1>\n<\/div>"}}