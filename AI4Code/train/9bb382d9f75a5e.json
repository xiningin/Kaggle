{"cell_type":{"6d4438ba":"code","b2ab3537":"code","2d8273d7":"code","7ddc4bda":"code","a9a8cfb6":"code","caa00abd":"code","9e3001b4":"code","392dc31a":"code","2916d8dd":"code","f069e4b6":"code","8528f5ef":"code","857bbc77":"code","4106c731":"code","497d58bd":"code","254e4ca8":"code","43815188":"code","504e961e":"code","36c0f44e":"code","b8962e70":"code","f83d38ac":"code","08b068a4":"code","0dfbdc49":"code","c8a631a1":"code","570b0ff8":"code","9588cfa9":"code","6fefdcba":"code","9b3d8d79":"code","0fcd1b7c":"code","d5a1eb25":"code","38274e67":"code","bacc9739":"code","1df46e06":"code","be44c877":"code","ccc6360d":"code","b59e18af":"code","4c9bc7c1":"code","a08595be":"code","04e03bea":"code","0af25f95":"markdown","a993b9da":"markdown","70405e98":"markdown","32b7abd3":"markdown","10f6bc48":"markdown","3178af83":"markdown","19dc26bf":"markdown","20b13cde":"markdown"},"source":{"6d4438ba":"import pandas as pd\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules","b2ab3537":"data = {'ID':[1,2,3,4,5,6],\n       'Onion':[1,0,0,1,1,1],\n       'Potato':[1,1,0,1,1,1],\n       'Burger':[1,1,0,0,1,1],\n       'Milk':[0,1,1,1,0,1],\n       'Beer':[0,0,1,0,1,0]}","2d8273d7":"df = pd.DataFrame(data)\ndf = df[['ID', 'Onion', 'Potato', 'Burger', 'Milk', 'Beer' ]]\ndf","7ddc4bda":"frequent_itemsets = apriori(df[['Onion', 'Potato', 'Burger', 'Milk', 'Beer' ]], \n                            min_support=0.50, use_colnames=True)","a9a8cfb6":"frequent_itemsets","caa00abd":"rules = association_rules(frequent_itemsets, metric='lift', min_threshold=1)","9e3001b4":"rules","392dc31a":"rules [ (rules['lift'] >1.125)  & (rules['confidence']> 0.8)  ]","2916d8dd":"retail_shopping_basket = {'ID':[1,2,3,4,5,6],\n                         'Basket':[['Beer', 'Diaper', 'Pretzels', 'Chips', 'Aspirin'],\n                                   ['Diaper', 'Beer', 'Chips', 'Lotion', 'Juice', 'BabyFood', 'Milk'],\n                                   ['Soda', 'Chips', 'Milk'],\n                                   ['Soup', 'Beer', 'Diaper', 'Milk', 'IceCream'],\n                                   ['Soda', 'Coffee', 'Milk', 'Bread'],\n                                   ['Beer', 'Chips']\n                                  ]\n                         }","f069e4b6":"retail = pd.DataFrame(retail_shopping_basket)\nretail = retail[['ID', 'Basket']]\npd.options.display.max_colwidth=100","8528f5ef":"retail","857bbc77":"retail = retail.drop('Basket' ,1).join(retail.Basket.str.join(',').str.get_dummies(','))","4106c731":"retail","497d58bd":"frequent_itemsets_2 = apriori(retail.drop('ID',1), use_colnames=True)","254e4ca8":"frequent_itemsets_2","43815188":"association_rules(frequent_itemsets_2, metric='lift')","504e961e":"association_rules(frequent_itemsets_2)","36c0f44e":"movies = pd.read_csv('..\/input\/movies.csv')","b8962e70":"movies.head(10)","f83d38ac":"movies_ohe = movies.drop('genres',1).join(movies.genres.str.get_dummies())\npd.options.display.max_columns=100","08b068a4":"movies_ohe.head()","0dfbdc49":"stat1 = movies_ohe.drop(['title', 'movieId'],1).apply(pd.value_counts)\nstat1.head()","c8a631a1":"stat1 = stat1.transpose().drop(0,1).sort_values(by=1, \n                                                ascending=False).rename(columns={1:'No. of movies'})","570b0ff8":"stat1.head()","9588cfa9":"stat2 = movies.join(movies.genres.str.split('|').reset_index().genres.str.len(), rsuffix='r').rename(\n    columns={'genresr':'genre_count'})","6fefdcba":"stat2.head(10)","9b3d8d79":"stat2 = stat2[stat2['genre_count']==1].drop('movieId',1).groupby('genres').sum().sort_values(\n    by='genre_count', ascending=False)","0fcd1b7c":"stat2.head(10)","d5a1eb25":"stat2.shape","38274e67":"stat = stat1.merge(stat2, how='left', left_index=True, right_index=True).fillna(0)","bacc9739":"stat.genre_count=stat.genre_count.astype(int)\nstat.rename(columns={'genre_count': 'No. of movies with only 1 genre'},inplace=True)","1df46e06":"stat.head()","be44c877":"movies_ohe.set_index(['movieId','title'],inplace=True)","ccc6360d":"movies_ohe.head()","b59e18af":"frequent_itemsets_movies = apriori(movies_ohe,use_colnames=True, min_support=0.025)","4c9bc7c1":"frequent_itemsets_movies","a08595be":"rules_movies =  association_rules(frequent_itemsets_movies, metric='lift', min_threshold=1.25)","04e03bea":"rules_movies","0af25f95":"**fundamental concepts in association rules**\n\n(Not a Rule) Support: number of times X occurs over all instances.\n\nSupport(X\u2192Y) is the probability of co-occurence of both items within all data.\n\nConfidence(X\u2192Y) is the probability of Y occurs given that X is present.\n\nLift(X\u2192Y) is the probability of Y being bought given that X is present, taking into account the popularity of Y as well.\n\nConviction(X\u2192Y) is the measure of implication. A value > 1 indicates that Y is highly depending on X.\n\nSo basically it is probability\/statistics. A simple but useful decision making tool for a wide range of usages such as market basket analysis, customer relationship management, recommender system, marketing activities, network traffic analysis, intrusion detection (fraud & malware detection) and bioinformatics.","a993b9da":"**Final Step: generate the rules with their corresponding support, confidence and lift, (and leverage & conviction):\nassociation_rules(df, metric='confidence', min_threshold=0.8)**\n\nHere, df means the frequent_itemsets dataframe;\n\nmetrics is the parameters to consider if there is association. You can set it to one of the five metrics.\n\nmin_threshold is the mininum value for the specified metrics.","70405e98":"Just by calculating the support(X>Y), [Beer, Chips] & [Beer, Diaper] are the two frequent basket of intereseted.\n\nBut which one is more correlated than the other?","32b7abd3":"\nSubsetting the lift and confidence values return you with the itemsets that are relatively highly correlated in this data.\n\nWe can see that:\n\nIf Onion or Burger is in a users' basket, it is highly likely that the user will buy Potato as well.\n\nIf Burger and Onion is in a users' basket, it is highly likely that the user will also buy Potato.","10f6bc48":"**What can you discover from the two rules? **\n\nClearly, {Diaper, Beer} is the most associated itemset in this data!","3178af83":"**First one-hot encode the basket, but how?**","19dc26bf":"**Some notes on Lift, Conviction & Leverage:**\n\n**Lift(X\u2192Y) :** the likelihood of Y being bought when X is present, taking into account the popularity of Y as well.\n\nWhen Lift=1, X makes no impact on Y\n\nWhen Lift>1, there is a relationship between X & Y\n\n**Conviction(X\u2192Y):** Conviction is a measure of the implication and has value 1 if items are unrelated.\nA high conviction value means that the consequent is highly depending on the antecedent. For instance, in the case of a perfect confidence score, the denominator becomes 0 (due to 1 - 1) for which the conviction score is defined as 'inf'. Similar to lift, if items are independent, the conviction is 1.\n\n**Leverage(X\u2192Y):** the difference between the observed frequency of X and Y appearing together and the frequency that would be expected if X and Y were independent. An leverage value of 0 indicates independence.","20b13cde":"Then, we can generate frequent itemsets based on support.\nHere we need to set the minimum support value between [0,1]. Using min_supp = 50% means we only want itemsets that co-occur more than half of the time.\n\napriori(df, min_support=0.5, use_colnames=False, max_len=None)"}}