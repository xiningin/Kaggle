{"cell_type":{"68a4c89e":"code","27fceeca":"code","17b6d941":"code","65456f5a":"code","d46b868c":"code","bcba79ee":"code","995417d2":"code","6e46ca2c":"code","92dee80f":"code","dd6486ad":"code","85d857bb":"code","415a95a1":"code","f7719b3e":"code","3b2b946f":"code","88d8d119":"code","db3ee79f":"code","6fa81f75":"code","815fa828":"code","cbef129c":"code","b5823f1d":"code","38854587":"code","a93edb6e":"code","4a5c7d90":"code","04e7df23":"code","5a3e7015":"code","8005df8a":"code","cb4c1f6e":"code","cf85d4c3":"code","dd8b2fe1":"code","be15f3c4":"markdown","9cca99d3":"markdown","e4c0a170":"markdown","06f4376c":"markdown","ddaaba8f":"markdown","f01c9f03":"markdown","0f6b8753":"markdown","17cd7496":"markdown","70b647f8":"markdown"},"source":{"68a4c89e":"from PIL import Image\nImage.open(r\"..\/input\/pix2pix-maps\/train\/1.jpg\")","27fceeca":"import tensorflow as tf\n\nimport os\nimport time\n\nfrom matplotlib import pyplot as plt\nfrom IPython import display","17b6d941":"global_path = '..\/input\/pix2pix-maps\/'\ntrain_path = global_path + 'train\/'\nval_path = global_path + 'val\/'","65456f5a":"BUFFER_SIZE = 400\nBATCH_SIZE = 1\nIMG_WIDTH = 256\nIMG_HEIGHT = 256\nOUTPUT_CHANNELS = 3\nLAMBDA = 100","d46b868c":"def load(image_file):\n  image = tf.io.read_file(image_file)\n  image = tf.image.decode_jpeg(image)\n\n  w = tf.shape(image)[1]\n\n  w = w \/\/ 2\n  real_image = image[:, :w, :]\n  input_image = image[:, w:, :]\n\n  input_image = tf.cast(input_image, tf.float32)\n  real_image = tf.cast(real_image, tf.float32)\n\n  return input_image, real_image","bcba79ee":"def resize(input_image, real_image, height, width):\n  input_image = tf.image.resize(input_image, [height, width],\n                                method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)\n  real_image = tf.image.resize(real_image, [height, width],\n                               method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)\n\n  return input_image, real_image","995417d2":"def random_crop(input_image, real_image):\n  stacked_image = tf.stack([input_image, real_image], axis=0)\n  cropped_image = tf.image.random_crop(\n      stacked_image, size=[2, IMG_HEIGHT, IMG_WIDTH, 3])\n\n  return cropped_image[0], cropped_image[1]","6e46ca2c":"# normalizing the images to [-1, 1]\n\ndef normalize(input_image, real_image):\n  input_image = (input_image \/ 127.5) - 1\n  real_image = (real_image \/ 127.5) - 1\n\n  return input_image, real_image","92dee80f":"@tf.function()\ndef random_jitter(input_image, real_image):\n  # resizing to 286 x 286 x 3\n  input_image, real_image = resize(input_image, real_image, 286, 286)\n\n  # randomly cropping to 256 x 256 x 3\n  input_image, real_image = random_crop(input_image, real_image)\n\n  if tf.random.uniform(()) > 0.5:\n    # random mirroring\n    input_image = tf.image.flip_left_right(input_image)\n    real_image = tf.image.flip_left_right(real_image)\n\n  return input_image, real_image","dd6486ad":"def load_image_train(image_file):\n  input_image, real_image = load(image_file)\n  input_image, real_image = random_jitter(input_image, real_image)\n  input_image, real_image = normalize(input_image, real_image)\n\n  return input_image, real_image","85d857bb":"def load_image_test(image_file):\n  input_image, real_image = load(image_file)\n  input_image, real_image = resize(input_image, real_image,\n                                   IMG_HEIGHT, IMG_WIDTH)\n  input_image, real_image = normalize(input_image, real_image)\n\n  return input_image, real_image","415a95a1":"train_dataset = tf.data.Dataset.list_files(train_path + '*.jpg')\ntrain_dataset = train_dataset.map(load_image_train,\n                                  num_parallel_calls=tf.data.experimental.AUTOTUNE)\ntrain_dataset = train_dataset.shuffle(BUFFER_SIZE)\ntrain_dataset = train_dataset.batch(BATCH_SIZE)\n","f7719b3e":"test_dataset = tf.data.Dataset.list_files(val_path + '*.jpg')\ntest_dataset = test_dataset.map(load_image_test)\ntest_dataset = test_dataset.batch(BATCH_SIZE)","3b2b946f":"def downsample(filters, size, apply_batchnorm=True):\n  initializer = tf.random_normal_initializer(0., 0.02)\n\n  result = tf.keras.Sequential()\n  result.add(\n      tf.keras.layers.Conv2D(filters, size, strides=2, padding='same',\n                             kernel_initializer=initializer, use_bias=False))\n\n  if apply_batchnorm:\n    result.add(tf.keras.layers.BatchNormalization())\n\n  result.add(tf.keras.layers.LeakyReLU())\n\n  return result","88d8d119":"def upsample(filters, size, apply_dropout=False):\n  initializer = tf.random_normal_initializer(0., 0.02)\n\n  result = tf.keras.Sequential()\n  result.add(\n    tf.keras.layers.Conv2DTranspose(filters, size, strides=2,\n                                    padding='same',\n                                    kernel_initializer=initializer,\n                                    use_bias=False))\n\n  result.add(tf.keras.layers.BatchNormalization())\n\n  if apply_dropout:\n      result.add(tf.keras.layers.Dropout(0.5))\n\n  result.add(tf.keras.layers.ReLU())\n\n  return result","db3ee79f":"def Generator():\n  inputs = tf.keras.layers.Input(shape=[256,256,3])\n\n  down_stack = [\n    downsample(64, 4, apply_batchnorm=False), # (bs, 128, 128, 64)\n    downsample(128, 4), # (bs, 64, 64, 128)\n    downsample(256, 4), # (bs, 32, 32, 256)\n    downsample(512, 4), # (bs, 16, 16, 512)\n    downsample(512, 4), # (bs, 8, 8, 512)\n    downsample(512, 4), # (bs, 4, 4, 512)\n    downsample(512, 4), # (bs, 2, 2, 512)\n    downsample(512, 4), # (bs, 1, 1, 512)\n  ]\n\n  up_stack = [\n    upsample(512, 4, apply_dropout=True), # (bs, 2, 2, 1024)\n    upsample(512, 4, apply_dropout=True), # (bs, 4, 4, 1024)\n    upsample(512, 4, apply_dropout=True), # (bs, 8, 8, 1024)\n    upsample(512, 4), # (bs, 16, 16, 1024)\n    upsample(256, 4), # (bs, 32, 32, 512)\n    upsample(128, 4), # (bs, 64, 64, 256)\n    upsample(64, 4), # (bs, 128, 128, 128)\n  ]\n\n  initializer = tf.random_normal_initializer(0., 0.02)\n  last = tf.keras.layers.Conv2DTranspose(OUTPUT_CHANNELS, 4,\n                                         strides=2,\n                                         padding='same',\n                                         kernel_initializer=initializer,\n                                         activation='tanh') # (bs, 256, 256, 3)\n\n  x = inputs\n\n  # Downsampling through the model\n  skips = []\n  for down in down_stack:\n    x = down(x)\n    skips.append(x)\n\n  skips = reversed(skips[:-1])\n\n  # Upsampling and establishing the skip connections\n  for up, skip in zip(up_stack, skips):\n    x = up(x)\n    x = tf.keras.layers.Concatenate()([x, skip])\n\n  x = last(x)\n\n  return tf.keras.Model(inputs=inputs, outputs=x)","6fa81f75":"generator = Generator()\ntf.keras.utils.plot_model(generator, show_shapes=True, dpi=64)","815fa828":"def generator_loss(disc_generated_output, gen_output, target):\n  gan_loss = loss_object(tf.ones_like(disc_generated_output), disc_generated_output)\n\n  # mean absolute error\n  l1_loss = tf.reduce_mean(tf.abs(target - gen_output))\n\n  total_gen_loss = gan_loss + (LAMBDA * l1_loss)\n\n  return total_gen_loss, gan_loss, l1_loss","cbef129c":"def Discriminator():\n  initializer = tf.random_normal_initializer(0., 0.02)\n\n  inp = tf.keras.layers.Input(shape=[256, 256, 3], name='input_image')\n  tar = tf.keras.layers.Input(shape=[256, 256, 3], name='target_image')\n\n  x = tf.keras.layers.concatenate([inp, tar]) # (bs, 256, 256, channels*2)\n\n  down1 = downsample(64, 4, False)(x) # (bs, 128, 128, 64)\n  down2 = downsample(128, 4)(down1) # (bs, 64, 64, 128)\n  down3 = downsample(256, 4)(down2) # (bs, 32, 32, 256)\n\n  zero_pad1 = tf.keras.layers.ZeroPadding2D()(down3) # (bs, 34, 34, 256)\n  conv = tf.keras.layers.Conv2D(512, 4, strides=1,\n                                kernel_initializer=initializer,\n                                use_bias=False)(zero_pad1) # (bs, 31, 31, 512)\n\n  batchnorm1 = tf.keras.layers.BatchNormalization()(conv)\n\n  leaky_relu = tf.keras.layers.LeakyReLU()(batchnorm1)\n\n  zero_pad2 = tf.keras.layers.ZeroPadding2D()(leaky_relu) # (bs, 33, 33, 512)\n\n  last = tf.keras.layers.Conv2D(1, 4, strides=1,\n                                kernel_initializer=initializer)(zero_pad2) # (bs, 30, 30, 1)\n\n  return tf.keras.Model(inputs=[inp, tar], outputs=last)\n","b5823f1d":"discriminator = Discriminator()\ntf.keras.utils.plot_model(discriminator, show_shapes=True, dpi=64)","38854587":"def discriminator_loss(disc_real_output, disc_generated_output):\n  real_loss = loss_object(tf.ones_like(disc_real_output), disc_real_output)\n\n  generated_loss = loss_object(tf.zeros_like(disc_generated_output), disc_generated_output)\n\n  total_disc_loss = real_loss + generated_loss\n\n  return total_disc_loss","a93edb6e":"generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\ndiscriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)","4a5c7d90":"loss_object = tf.keras.losses.BinaryCrossentropy(from_logits=True)","04e7df23":"def generate_images(model, test_input, tar):\n  prediction = model(test_input, training=True)\n  plt.figure(figsize=(15,15))\n\n  display_list = [test_input[0], tar[0], prediction[0]]\n  title = ['Input Image', 'Ground Truth', 'Predicted Image']\n\n  for i in range(3):\n    plt.subplot(1, 3, i+1)\n    plt.title(title[i])\n    # getting the pixel values between [0, 1] to plot it.\n    plt.imshow(display_list[i] * 0.5 + 0.5)\n    plt.axis('off')\n  plt.show()","5a3e7015":"for example_input, example_target in test_dataset.take(1):\n  generate_images(generator, example_input, example_target)","8005df8a":"EPOCHS = 20","cb4c1f6e":"@tf.function\ndef train_step(input_image, target, epoch):\n  with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n    gen_output = generator(input_image, training=True)\n\n    disc_real_output = discriminator([input_image, target], training=True)\n    disc_generated_output = discriminator([input_image, gen_output], training=True)\n\n    gen_total_loss, gen_gan_loss, gen_l1_loss = generator_loss(disc_generated_output, gen_output, target)\n    disc_loss = discriminator_loss(disc_real_output, disc_generated_output)\n\n  generator_gradients = gen_tape.gradient(gen_total_loss,\n                                          generator.trainable_variables)\n  discriminator_gradients = disc_tape.gradient(disc_loss,\n                                               discriminator.trainable_variables)\n\n  generator_optimizer.apply_gradients(zip(generator_gradients,\n                                          generator.trainable_variables))\n  discriminator_optimizer.apply_gradients(zip(discriminator_gradients,\n                                              discriminator.trainable_variables))","cf85d4c3":"def fit(train_ds, epochs, test_ds):\n  for epoch in range(epochs):\n    start = time.time()\n\n    display.clear_output(wait=True)\n\n    for example_input, example_target in test_ds.take(1):\n      generate_images(generator, example_input, example_target)\n    print(\"Epoch: \", epoch)\n\n    # Train\n    for n, (input_image, target) in train_ds.enumerate():\n      print('.', end='')\n      if (n+1) % 100 == 0:\n        print()\n      train_step(input_image, target, epoch)\n    print()\n\n    print ('Time taken for epoch {} is {} sec\\n'.format(epoch + 1,\n                                                        time.time()-start))","dd8b2fe1":"fit(train_dataset, EPOCHS, test_dataset)","be15f3c4":"<a id='plot'><\/a>\n# Plot generated images","9cca99d3":"<a id='training'><\/a>\n# Training","e4c0a170":"<a id='disccriminator'><\/a>\n# Discriminator","06f4376c":"# Pix2Pix tf Maps","ddaaba8f":"<a id='preparation'><\/a>\n# Data Preparation","f01c9f03":"## Content\n* [Data Preparation](#preparation)\n* [Downsample, Upsample Modules](#modules)\n* [Generator](#generator)\n* [Discriminator](#discriminator)\n* [Plot function](#plot)\n* [Training](#training)","0f6b8753":"<a id='generator'><\/a>\n# Generator","17cd7496":"<a id='modules'><\/a>\n# Prepare the downsample, upsample modules","70b647f8":"## Definition\n\nPix2Pix is shorthand for an implementation of a generic image-to-image translation using conditional adversarial networks. Image-to-image translation is to learn a mapping between images from a source domain and images from a target domain.<br><br>\nThe Pix2Pix model is a type of conditional GAN, or cGAN, where the generation of the output image is conditional on an input, in this case, a source image. The discriminator is provided both with a source image and the target image and must determine whether the target is a plausible transformation of the source image.\n\nTo understand more about Generative Adversarial Networks, please check out [GAN from scratch](https:\/\/www.kaggle.com\/alincijov\/fashionmnist-gan-from-scratch)."}}