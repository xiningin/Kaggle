{"cell_type":{"d79541f6":"code","86be837a":"code","ced7d26b":"code","60b200c5":"code","7733a88c":"code","ee21ce97":"code","aaa2ca6f":"code","3798fe8e":"code","c5260842":"code","a846131a":"code","4a775489":"code","0bf45e02":"code","ef7e8165":"code","b8683105":"code","aeff8f16":"code","3de1c1b9":"code","ba6dbbdc":"code","24e71ba4":"code","4dac170e":"code","29e847a7":"code","24c8660d":"code","1697354c":"code","3f38a8cd":"code","b376141e":"code","d345db77":"code","0c55763d":"code","e48df423":"code","9c7e7894":"code","d8433d0f":"code","d32bdac5":"code","49f30fad":"markdown","78dde29b":"markdown"},"source":{"d79541f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn import preprocessing\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\npd.set_option('display.max_columns',100)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","86be837a":"ls","ced7d26b":"train = pd.read_csv('..\/input\/learn-together\/train.csv')","60b200c5":"train.head()","7733a88c":"train.shape","ee21ce97":"train.drop(['Id'], axis = 1).describe()","aaa2ca6f":"binary_rows = train.iloc[:,11:55]\nbinary_rows['Id'] = train['Id']\nbinary_rows['Cover_Type'] = train['Cover_Type']","3798fe8e":"train.drop(binary_rows, axis = 1).skew()","c5260842":"train.drop(binary_rows, axis = 1).head(2)","a846131a":"corr = train.drop(binary_rows, axis = 1).corr()","4a775489":"mask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nplt.figure(figsize= (10,10))\nsns.heatmap(corr, annot= True, linewidths= 3, mask = mask, fmt='.1f')","0bf45e02":"robustscaler = preprocessing.RobustScaler()\nstdscaler = preprocessing.StandardScaler()\nminmaxscaler = preprocessing.MinMaxScaler()\nmaxabsscaler = preprocessing.MaxAbsScaler()\nnormalizer = preprocessing.Normalizer()\nquantiletransformation_normal = preprocessing.QuantileTransformer(output_distribution= 'normal')\nquantiletransformation_uniform = preprocessing.QuantileTransformer(output_distribution= 'uniform')\nyeo_johnson = preprocessing.PowerTransformer(method= 'yeo-johnson')\nbox_cox = preprocessing.PowerTransformer(method= 'box-cox')\n\n\n\nstdscaled_train = stdscaler.fit_transform(train.drop(binary_rows, axis = 1))\nstdscaled_train_df = pd.DataFrame(stdscaled_train,columns=['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points'])\n\nminmaxscaler_train = minmaxscaler.fit_transform(train.drop(binary_rows, axis = 1))\nminmaxscaler_train_df = pd.DataFrame(minmaxscaler_train,columns=['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points'])\n\nmaxabsscaler_train = maxabsscaler.fit_transform(train.drop(binary_rows, axis = 1))\nmaxabsscaler_train_df = pd.DataFrame(maxabsscaler_train,columns=['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points'])\n\nrscaled_train = robustscaler.fit_transform(train.drop(binary_rows, axis = 1))\nrscaled_train_df = pd.DataFrame(rscaled_train,columns=['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points'])\n\nnorm_train = normalizer.fit_transform(train.drop(binary_rows, axis = 1))\nnorm_train_df = pd.DataFrame(norm_train ,columns=['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points'])\n\nquantiletransformation_normal = quantiletransformation_normal.fit_transform(train.drop(binary_rows, axis = 1))\nquantiletransformation_normal_df = pd.DataFrame(quantiletransformation_normal ,columns=['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points'])\n\nquantiletransformation_uniform = quantiletransformation_uniform.fit_transform(train.drop(binary_rows, axis = 1))\nquantiletransformation_uniform_df = pd.DataFrame(quantiletransformation_uniform ,columns=['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points'])\n\nyeo_johnson = yeo_johnson.fit_transform(train.drop(binary_rows, axis = 1))\nyeo_johnson_df = pd.DataFrame(yeo_johnson ,columns=['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points'])\n\nbox_cox = box_cox.fit_transform(train[train.drop(binary_rows, axis = 1).apply(lambda x: x>0)].drop(binary_rows, axis = 1))\nbox_cox_df = pd.DataFrame(box_cox ,columns=['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points'])\n\n\n\nax1 = train.drop(binary_rows, axis = 1).plot.kde()\nax1.set_title('Before Scaling')\nax6 = norm_train_df.plot.kde(legend = None)\nax6.set_title('Normalizer Scaling')\nax2= minmaxscaler_train_df.plot.kde(legend = None)\nax2.set_title('Minmax Scaling')\nax3 = maxabsscaler_train_df.plot.kde(legend = None)\nax3.set_title('Maxabs Scaling')\nax4 = stdscaled_train_df.plot.kde(legend = None)\nax4.set_title('Standard Scaling')\nax5 = rscaled_train_df.plot.kde(legend = None)\nax5.set_title('Robust Scaling')\nax7 = quantiletransformation_normal_df.plot.kde()\nax7.set_title('Quantile Normal Transformation')\nax8 = quantiletransformation_uniform_df.plot.kde()\nax8.set_title('Quantile Uniform Transformation')\nax9 = yeo_johnson_df.plot.kde()\nax9.set_title('Yeo Johnson Power Transformation')\nax10 = box_cox_df.plot.kde()\nax10.set_title('Box Cox Power Transformation')","ef7e8165":"print('Normalizer skewness')\nprint(norm_train_df.skew())\nprint('\\nMinmax Scaler Skewness')\nprint(minmaxscaler_train_df.skew())\nprint('\\nMaxabs Scaler Skewness')\nprint(maxabsscaler_train_df.skew())\nprint('\\nStandard Scaler Skewness')\nprint(stdscaled_train_df.skew())\nprint('\\nRobust Scaling Skewness')\nprint(rscaled_train_df.skew())\nprint('\\nQuantile Normal Transformation Skewness')\nprint(quantiletransformation_normal_df.skew())\nprint('\\nQuantile Uniform Transformation Skewness')\nprint(quantiletransformation_uniform_df.skew())\nprint('\\nYeo Johnson Skewness')\nprint(yeo_johnson_df.skew())\nprint('\\nBox-cox Skewness')\nprint(box_cox_df.skew())","b8683105":"quantiletransformation_uniform_df.head(2)","aeff8f16":"sns.pairplot(quantiletransformation_uniform_df, diag_kind='kade', kind = 'reg')","3de1c1b9":"sns.jointplot(x = train['Hillshade_3pm'], y= train['Hillshade_Noon'], kind = 'hex', color = 'Pink')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)\nsns.jointplot(x = quantiletransformation_uniform_df['Hillshade_3pm'], y= quantiletransformation_uniform_df['Hillshade_Noon'], kind = 'hex', color = 'Pink')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)","ba6dbbdc":"sns.jointplot(x = train['Hillshade_3pm'], y= train['Hillshade_9am'], kind= 'hex')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)\nsns.jointplot(x = quantiletransformation_uniform_df['Hillshade_3pm'], y= quantiletransformation_uniform_df['Hillshade_9am'], kind= 'hex')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)","24e71ba4":"sns.jointplot(x = train['Aspect'], y= train['Hillshade_3pm'], kind= 'hex', color='Black')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)\nsns.jointplot(x = quantiletransformation_uniform_df['Aspect'], y= quantiletransformation_uniform_df['Hillshade_3pm'], kind= 'hex', color='Black')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)","4dac170e":"sns.jointplot(x = train['Aspect'], y= train['Hillshade_9am'], kind= 'hex', color='Red')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)\nsns.jointplot(x = quantiletransformation_uniform_df['Aspect'], y= quantiletransformation_uniform_df['Hillshade_9am'], kind= 'hex', color='Red')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)","29e847a7":"sns.jointplot(x = train['Horizontal_Distance_To_Hydrology'], y= train['Vertical_Distance_To_Hydrology'], kind= 'kde', color = 'Yellow')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)\nsns.jointplot(x = quantiletransformation_uniform_df['Horizontal_Distance_To_Hydrology'], y= quantiletransformation_uniform_df['Vertical_Distance_To_Hydrology'], kind= 'kde', color = 'Yellow')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)","24c8660d":"sns.jointplot(x = train['Horizontal_Distance_To_Roadways'], y= train['Elevation'], kind= 'kde', color = 'Orange')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)\nsns.jointplot(x = quantiletransformation_uniform_df['Horizontal_Distance_To_Roadways'], y= quantiletransformation_uniform_df['Elevation'], kind= 'kde', color = 'Orange')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)","1697354c":"sns.jointplot(x = quantiletransformation_uniform_df['Slope'], y= quantiletransformation_uniform_df['Hillshade_Noon'], kind= 'hex', color='Purple')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)","3f38a8cd":"sns.jointplot(x = quantiletransformation_uniform_df['Horizontal_Distance_To_Roadways'], y= quantiletransformation_uniform_df['Horizontal_Distance_To_Fire_Points'], kind= 'kde', color='Green')\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(10,6)","b376141e":"for i in train[['Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3', 'Wilderness_Area4']]:\n    train[i].replace(1,i,inplace = True)","d345db77":"train['Wilderness_Area'] = train[['Wilderness_Area1', \n                                  'Wilderness_Area2', \n                                  'Wilderness_Area3', \n                                  'Wilderness_Area4']].apply(lambda x: x['Wilderness_Area1'] \n                                                                    or x['Wilderness_Area2'] \n                                                                    or x['Wilderness_Area3'] \n                                                                    or x['Wilderness_Area4'], axis = 1)","0c55763d":"for i in train.drop(binary_rows, axis = 1).columns:\n    print(i,train[i].nunique())","e48df423":"plt.figure(figsize = (25,10))\nax = sns.countplot(train['Wilderness_Area'], palette= 'Reds_r', order= train['Wilderness_Area'].value_counts().index)\nax.set_xticklabels(train['Wilderness_Area'].value_counts().index, fontsize = 15)\nax.set_yticklabels(range(0,7000,1000), fontsize = 15)\nax.set_xlabel('Wilderness Area', fontdict = {'size':20})\nax.set_ylabel('Count', fontdict = {'size':20})\nax.set_title('Number of Wilderness Area', fontdict = {'size':25, 'weight':'bold'})\nax.grid(True, c= 'black')\n","9c7e7894":"pd.crosstab(train['Cover_Type'], train['Wilderness_Area'])","d8433d0f":"ax = pd.crosstab(train['Cover_Type'], train['Wilderness_Area']).plot.barh(align = 'center', width = 0.8)\nax.set_xlabel('Number of Listings')\nax.set_title(\"Number of Listings with it's Type in each Borough\", fontdict = {'size':15, 'weight':'bold'})\nfig = plt.gcf()\nplt.tight_layout()\nfig.set_size_inches(18,6)\nplt.grid(True, color = 'black')","d32bdac5":"train.head(2)","49f30fad":"So I'll be going ahead with data scaled by using Quantile Uniform Transformation Skewness because it has minimum skewness","78dde29b":"## Joint Plots for correlation greater than 50%"}}