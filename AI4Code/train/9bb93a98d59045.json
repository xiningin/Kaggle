{"cell_type":{"ab08ad1c":"code","e9710363":"code","fcedaec8":"code","0c07eaff":"code","1c66f56f":"code","3f21b812":"code","560982b2":"code","6d3970e7":"code","c6be4d93":"code","f1331b61":"code","8def487f":"code","ba198af9":"code","43818c6d":"code","1e7bb04d":"code","fef93fab":"code","e6275954":"code","2085553a":"code","42b5c471":"code","2a8780ce":"code","cdfb262b":"code","d835c818":"code","8361a82b":"code","580b97cc":"code","c3e5a608":"code","bee07f5b":"code","e28e2948":"code","414dbd08":"code","a890f300":"code","d7e2a3f5":"code","0ac16371":"code","a390a909":"code","9d849fdb":"code","5457d45b":"code","3989be79":"code","1721bafa":"code","bddf4383":"code","4aa2f57c":"code","d3fe325b":"code","736a9001":"code","c123daf8":"code","9cee3174":"code","25b7083d":"code","eab1c757":"code","6928ad6a":"code","7ebf517f":"code","c9b194aa":"code","7fc35556":"code","9cb44d91":"code","af1941f8":"code","14317de4":"code","1a7e1ba2":"code","0985aad6":"code","91b2025a":"code","2d5785ec":"code","9090e61a":"code","07d5355b":"code","103588d1":"code","3d9279a6":"code","2ae75708":"code","d6014ea6":"code","98cb1a39":"code","d8ea8b34":"code","565335fe":"code","96c1ad8c":"code","c045c5e2":"code","e1fd8c63":"code","7aa7dece":"code","e8d28cf3":"code","5fb0cccb":"code","2ae21e51":"code","34135f3b":"code","d0db5172":"code","742ee6c3":"code","6d22b680":"code","b7550b1b":"code","813d471a":"code","91e408a8":"code","61458f69":"code","d157dea5":"code","c3811cad":"code","4dd61057":"code","d4c3e2ee":"code","96e83758":"code","53bc8a73":"code","6a49a674":"code","e0047172":"code","f3579b09":"code","a082b719":"code","f7c714c6":"code","8facf160":"code","9b191deb":"code","947af51d":"code","6a60968d":"code","0da99663":"code","3721ca39":"code","82320630":"code","d67a6f6f":"code","68f5f848":"code","fa4143a0":"code","09db9393":"code","1e26d03e":"code","77bdfd19":"code","21a1435f":"code","e2407eff":"code","d8da20b8":"code","63f775ce":"markdown","7df550c2":"markdown","31eb0154":"markdown","23080a77":"markdown","9e6c8f25":"markdown","0e3e30b4":"markdown","e15c03b3":"markdown","72d81c49":"markdown","c668b125":"markdown","886541ae":"markdown","866e5777":"markdown","37a4d981":"markdown","03291434":"markdown","1f944900":"markdown","07537eb9":"markdown","f204ef51":"markdown","445240b9":"markdown","ce72e363":"markdown","52730120":"markdown","0a442e32":"markdown","6da5eed9":"markdown","94b715a5":"markdown","330b8990":"markdown","7efea487":"markdown","2577b319":"markdown","db6bbd06":"markdown","0eb59be4":"markdown","5ff2f194":"markdown","7442c999":"markdown","0a3b8534":"markdown","004a432d":"markdown","be94b5ca":"markdown","cc7e9c57":"markdown","73892b7c":"markdown","f35a188b":"markdown","68b8650d":"markdown","d634d853":"markdown","987aa1d7":"markdown","75d89745":"markdown","1ed4250b":"markdown","10e19b75":"markdown","b1ae1d8e":"markdown","d3fbe65c":"markdown","caa31006":"markdown","5b0a9a51":"markdown","de0bc1fd":"markdown","aca365d1":"markdown","04777921":"markdown","fc1af8d5":"markdown","f21f955f":"markdown","9fb8dd6f":"markdown","eebe04f9":"markdown","a6ce6705":"markdown","2d7c881e":"markdown","7a8b288c":"markdown","15b61828":"markdown","44e6bb35":"markdown","0be5fce3":"markdown","80959f9b":"markdown","68516d5f":"markdown","af7e3aa9":"markdown","b77e4e6b":"markdown","be0916bd":"markdown","a2ba7326":"markdown","516a66b0":"markdown","1947d2ad":"markdown","93421990":"markdown","9b4428ad":"markdown","481fc9b5":"markdown","fe7fa1a0":"markdown","bac71a99":"markdown","2b67f58d":"markdown","ff0cce1d":"markdown","42b4cf81":"markdown","30601758":"markdown","1db09f5c":"markdown","6a7e05d3":"markdown","057cb696":"markdown"},"source":{"ab08ad1c":"!pip install dataprep","e9710363":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport typing as tp\n\nfrom collections import Counter\n\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport scipy.stats as stats\n\nfrom matplotlib import pyplot as plt\nfrom dataprep.eda.missing import plot_missing\n\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")","fcedaec8":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0c07eaff":"sns.set(rc={'figure.figsize':(11.7, 8.27)})","1c66f56f":"# data description .txt file\ndata_description_path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt'\n\ndef readDataDescriptionFile(path: str) -> None:\n  with open(path, mode='r') as file:\n    for line in file.readlines():\n      print(line, end='')\n      \n  return None\n\nreadDataDescriptionFile(data_description_path)","3f21b812":"sample_sumbission_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/\/sample_submission.csv')\n\nsample_sumbission_data.head()","560982b2":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\n\nprint(f'Train data shape: {train.shape}\\n')\nprint(f'Colums: {train.columns}\\n')\nprint(f'DataFrame information: {train.info()}\\n')\ntrain.head()","6d3970e7":"test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.head()","c6be4d93":"plot_missing(train)","f1331b61":"plot_missing(test)","8def487f":"columns_count = len(train.columns)\npd.options.display.max_rows = columns_count\n\ntrain.isnull().sum()","ba198af9":"train.head()","43818c6d":"test.head()","1e7bb04d":"print(f'Train shape {train.shape}, test shape {test.shape}')","fef93fab":"train.dtypes","e6275954":"categorical_features = train.select_dtypes(include=['object']).columns\nnumerical_features = [col_name for col_name in train.columns if train.dtypes[col_name] != 'object']\n\nnumerical_features.remove('Id')\nnumerical_features.remove('SalePrice')","2085553a":"print(len(categorical_features))\ncategorical_features","42b5c471":"print(len(numerical_features))\nnumerical_features","2a8780ce":"train.head()","cdfb262b":"missing_series = train.isnull().sum()\n\nmissing_values = pd.DataFrame(missing_series[missing_series > 0]) \\\n                                                                .reset_index() \\\n                                                                .rename(columns={'index': 'feature_name', 0: 'values'}) \\\n                                                                .sort_values(by=['values'], ascending=False)\n\npx.bar(missing_values, x='feature_name', y='values', color='values')","d835c818":"sns.displot(train, x='SalePrice', kde=True, height=7)","8361a82b":"def distribution_fit(data: pd.Series, dist_names: list) -> list:\n    results = []\n\n    for dist_name in dist_names:\n        dist = getattr(stats, dist_name)\n        param = dist.fit(data)\n        k_test_stats = stats.kstest(data, dist_name, args=param)\n\n        statistic, p_value = k_test_stats\n        results.append((dist_name, statistic, p_value))\n\n    results.sort(key=lambda x: float(x[2]), reverse=True)\n\n    return results\n\n\ndef print_distributions_info(results: list) -> None:\n    for dist_name, statistic, p_value in results:\n        print(f'{dist_name}: statistic = {statistic}, pvalue = {p_value}')\n\n\ny = train['SalePrice']\ndist_names = [ 'alpha', 'anglit', 'arcsine', 'beta', 'betaprime', 'bradford', 'burr', 'cauchy', 'chi', 'chi2', 'cosine', 'dgamma', 'dweibull', 'erlang', 'expon', 'exponweib', 'exponpow', 'f', 'fatiguelife', 'fisk', 'foldcauchy', 'foldnorm', 'frechet_r', 'frechet_l', 'genlogistic', 'genpareto', 'genexpon', 'genextreme', 'gausshyper', 'gamma', 'gengamma', 'genhalflogistic', 'gilbrat', 'gompertz', 'gumbel_r', 'gumbel_l', 'halfcauchy', 'halflogistic', 'halfnorm', 'hypsecant', 'invgamma', 'invgauss', 'invweibull', 'johnsonsb', 'johnsonsu', 'ksone', 'kstwobign', 'laplace', 'logistic', 'loggamma', 'loglaplace', 'lognorm', 'lomax', 'maxwell', 'mielke', 'nakagami', 'ncx2', 'ncf', 'nct', 'norm', 'pareto', 'pearson3', 'powerlaw', 'powerlognorm', 'powernorm', 'rdist', 'reciprocal', 'rayleigh', 'rice', 'recipinvgauss', 'semicircular', 't', 'triang', 'truncexpon', 'truncnorm', 'tukeylambda', 'uniform', 'vonmises', 'wald', 'weibull_min', 'weibull_max', 'wrapcauchy'] \n# dist_names = stats._continuous_distns._distn_names\n\nresults = distribution_fit(y, dist_names)\nprint_distributions_info(results)","580b97cc":"selected_distributions = [stats.johnsonsu, stats.lognorm, stats.nct, stats.norm]\n\nfig, axes = plt.subplots(nrows=1, ncols=len(selected_distributions), figsize=(24, 8))\n    \nfor i, distribution in enumerate(selected_distributions):\n    sns.distplot(train, x=train['SalePrice'], kde=False, fit=distribution, ax=axes[i])\n    axes[i].set_title(distribution.name)","c3e5a608":"train.SalePrice.describe()","bee07f5b":"def test_shapiro(col: pd.Series) -> bool:\n    statistic, p_value = stats.shapiro(col)\n    return p_value < 0.001\n\nnumerical_data = pd.DataFrame(train[numerical_features])\nnormal_dist_test = numerical_data.apply(test_shapiro)\n\nnot normal_dist_test.any()","e28e2948":"choosed_features_data = train[['OverallQual', 'GrLivArea', 'TotalBsmtSF', 'YearBuilt', 'SalePrice']]\n\nchoosed_features_data.dtypes\n# ff.create_scatterplotmatrix(choosed_features_data, diag='scatter', colormap='Viridis', height=1000, width=1150)\n\nfig = px.scatter(train, x='SalePrice', y='GrLivArea', color_discrete_sequence=px.colors.sequential.Rainbow)\n\nfig.update_layout(height=600, width=800, title_text='GrLivArea\/SalePrice')\nfig.show()\n","414dbd08":"fig = px.scatter(train, x='SalePrice', y='TotalBsmtSF', color_discrete_sequence=px.colors.sequential.Oryel_r)\n\nfig.update_layout(height=600, width=800, title_text='TotalBsmtSF\/SalePrice')\nfig.show()","a890f300":"fig = px.box(choosed_features_data[['YearBuilt', 'SalePrice']], x='YearBuilt', y='SalePrice', color='YearBuilt')\n\nfig.update_layout(height=600, width=1400, title_text='YearBuilt\/SalePrice')\nfig.show()","d7e2a3f5":"fig = px.box(choosed_features_data, x='OverallQual', y='SalePrice', color='OverallQual', points='all')\n\nfig.show()","0ac16371":"correlation_matrix = train.corr()\nscores_names = [list(train.columns.drop('Id'))]\n\nfig = ff.create_annotated_heatmap(x=list(correlation_matrix.index.values),\n                                              y=list(correlation_matrix.columns.values),\n                                              z=correlation_matrix.to_numpy().round(3), showscale=True)\n\nfig.update_layout(title_text='<b>Correlation matrix<b>', titlefont={'size': 50, 'family':'Serif'}, autosize=True, width=2000, height=2000)\n\nfig.show()","a390a909":"corr_features = ['OverallQual', 'YearBuilt', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'FullBath', 'GarageCars', 'GarageArea']\n\nsns.pairplot(train[corr_features], size=4)","9d849fdb":"train_rows, train_cols = train.shape\ntest_rows, test_cols = test.shape\n\ny_train = train['SalePrice']\n\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)","5457d45b":"all_data.shape","3989be79":"missing_all_data = all_data.isna().sum().sort_values(ascending=False)\nmissing_all_data_percent = ((all_data.isna().sum() \/ len(all_data)) * 100).sort_values(ascending=False)\n\nmissing_info = pd.concat([missing_all_data, missing_all_data_percent], axis=1, keys=['Total_missing', 'Percent'])\nmissing_info.head(35)","1721bafa":"all_data = all_data.drop(labels=['Id'], axis=1)","bddf4383":"all_data = all_data.drop(labels=(missing_info[missing_info['Percent'] > 80]).index, axis=1)","4aa2f57c":"all_data['FireplaceQu'] = all_data['FireplaceQu'].fillna('None')","d3fe325b":"FireplaceQu_info = pd.DataFrame(all_data['FireplaceQu'].value_counts().reset_index().rename(columns={'index': 'type', 'FireplaceQu': 'count'}, inplace=False))\n\npx.bar(FireplaceQu_info, x='type', y='count', color='type')\n","736a9001":"all_data['LotFrontage'] = all_data.groupby('Neighborhood', as_index=False)['LotFrontage'].transform(lambda x: x.fillna(x.median()))","c123daf8":"garage_features = [feature for feature in all_data.columns if 'Garage' in feature]\ngarage_features","9cee3174":"for feature in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[feature] = all_data[feature].fillna('None')\n\nfor feature in ('GarageYrBlt', 'GarageCars', 'GarageArea'):\n    all_data[feature] = all_data[feature].fillna(0)","25b7083d":"bsmt_features = [feature for feature in all_data.columns if 'Bsmt' in feature]\nbsmt_features","eab1c757":"# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 (\u043d\u0435\u0442 \u043f\u043e\u0434\u0432\u0430\u043b\u0430)\nfor feature in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[feature] = all_data[feature].fillna('None')\n\n# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 (\u043d\u0435\u0442 \u043f\u043e\u0434\u0432\u0430\u043b\u0430)\nfor feature in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[feature] = all_data[feature].fillna(0)","6928ad6a":"all_data['MasVnrType'] = all_data['MasVnrType'].fillna('None')\nall_data['MasVnrArea'] = all_data['MasVnrArea'].fillna(0)","7ebf517f":"MSZoning_mode = all_data['MSZoning'].mode()[0]\nall_data['MSZoning'] = all_data['MSZoning'].fillna(MSZoning_mode)","c9b194aa":"all_data = all_data.drop(['Utilities'], axis=1)","7fc35556":"all_data['Functional'] = all_data['Functional'].fillna('Typ')","9cb44d91":"Electrical_mode = all_data['Electrical'].mode()[0]\nall_data['Electrical'] = all_data['Electrical'].fillna(Electrical_mode)","af1941f8":"kitchen_qual_mode = all_data['KitchenQual'].mode()[0]\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(kitchen_qual_mode)","14317de4":"Exterior1st_mode = all_data['Exterior1st'].mode()[0]\nExterior2nd_mode = all_data['Exterior2nd'].mode()[0]\n\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(Exterior1st_mode)\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(Exterior2nd_mode)\n\nSaleType_mode = all_data['SaleType'].mode()[0]\nall_data['SaleType'] = all_data['SaleType'].fillna(SaleType_mode)\n\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna('None')","1a7e1ba2":"missing_all_data = all_data.isna().sum().sort_values(ascending=False)\nmissing_all_data_percent = ((all_data.isna().sum() \/ len(all_data)) * 100).sort_values(ascending=False)\n\nmissing_info = pd.concat([missing_all_data, missing_all_data_percent], axis=1, keys=['Total_missing', 'Percent'])\nmissing_info.head(35)","0985aad6":"all_data.isnull().sum().max()","91b2025a":"# standartizize our data\nsale_price_scaled = StandardScaler().fit_transform(train['SalePrice'][:, np.newaxis])","2d5785ec":"low = sale_price_scaled[sale_price_scaled[:, 0].argsort()][:10]\nhigh = sale_price_scaled[sale_price_scaled[:, 0].argsort()][-10:]","9090e61a":"print(low, '\\n\\n', high)","07d5355b":"high","103588d1":"np.mean(sale_price_scaled, axis=1)","3d9279a6":"np.std(sale_price_scaled, axis=1)","2ae75708":"fig = px.scatter(train, x='SalePrice', y='GrLivArea', color_discrete_sequence=px.colors.sequential.Rainbow)\n\nfig.update_layout(height=600, width=800, title_text='GrLivArea\/SalePrice')\nfig.show()","d6014ea6":"train_modified = train.drop(train.sort_values(by='GrLivArea', ascending=False)[:2].index)","98cb1a39":"fig = px.scatter(train_modified, x='SalePrice', y='GrLivArea', color_discrete_sequence=px.colors.sequential.Rainbow)\n\nfig.update_layout(height=600, width=800, title_text='GrLivArea\/SalePrice')\nfig.show()","d8ea8b34":"fig = px.scatter(train_modified, x='SalePrice', y='TotalBsmtSF', color_discrete_sequence=px.colors.sequential.Oryel_r)\n\nfig.update_layout(height=600, width=800, title_text='TotalBsmtSF\/SalePrice')\nfig.show()","565335fe":"stats.probplot(train_modified['SalePrice'], plot=plt)","96c1ad8c":"train_modified['SalePrice'] = np.log(train_modified['SalePrice'])\n\nsns.distplot(train_modified['SalePrice'], fit=stats.norm)","c045c5e2":"stats.probplot(train_modified['SalePrice'], plot=plt)","e1fd8c63":"sns.distplot(train_modified['TotalBsmtSF'], fit=stats.norm)","7aa7dece":"stats.probplot(train_modified['TotalBsmtSF'], plot=plt)","e8d28cf3":"train_modified['HasBmtSF'] = pd.Series(len(train_modified['TotalBsmtSF']), index=train_modified.index)\ntrain_modified['HasBmtSF'] = 0\n\ntrain_modified.loc[train_modified['TotalBsmtSF'] > 0, 'HasBmtSF'] = 1\n\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c (\u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043c, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0432\u0430\u043b)\ntrain_modified.loc[train_modified['HasBmtSF'] == 1, 'TotalBsmtSF'] = np.log(train_modified['TotalBsmtSF'])\n\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\nsns.distplot(train_modified[train_modified['TotalBsmtSF'] > 0]['TotalBsmtSF'], fit=stats.norm)","5fb0cccb":"stats.probplot(train_modified[train_modified['TotalBsmtSF'] > 0]['TotalBsmtSF'], plot=plt)","2ae21e51":"train_modified['GrLivArea'] = np.log(train_modified['GrLivArea'])\n\nsns.distplot(train['GrLivArea'], fit=stats.norm)","34135f3b":"stats.probplot(train_modified['GrLivArea'], plot=plt)","d0db5172":"fig = px.scatter(train_modified, x='SalePrice', y='GrLivArea', color_discrete_sequence=px.colors.sequential.Rainbow)\n\nfig.update_layout(height=600, width=800, title_text='GrLivArea\/SalePrice')\nfig.show()","742ee6c3":"fig = px.scatter(train_modified, x='SalePrice', y='TotalBsmtSF', color_discrete_sequence=px.colors.sequential.Oryel_r)\n\nfig.update_layout(height=600, width=800, title_text='TotalBsmtSF\/SalePrice')\nfig.show()","6d22b680":"train_from_all_data = all_data[:train_rows]\ntest_from_all_data = all_data[train_rows:]","b7550b1b":"# train_from_all_data = all_data[:train_rows]\n# test_from_all_data = all_data[train_rows:]\n# y_train = train['SalePrice']\n\n# train_from_all_data = pd.concat([train_from_all_data, y_train], axis=1)\n\n# # \u0443\u0434\u0430\u043b\u0438\u043c 2 \u0432\u044b\u0431\u0440\u043e\u0441\u0430 GrLivArea, \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n# indexes_to_drop_outlairs = train_from_all_data.sort_values(by='GrLivArea', ascending=False)[:2].index\n# train_from_all_data = train_from_all_data.drop(indexes_to_drop_outlairs)\n\n# # \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c SalePrice \u043a \u0441\u0445\u043e\u0436\u0435\u043c\u0443 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e (log)\n# train_from_all_data['SalePrice'] = np.log(train_from_all_data['SalePrice'])\n\n# # --\n# # total bmsmt (\u043f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e \u043d\u0443\u043b\u0438 \u043d\u0435 \u0434\u0430\u044e\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c)\n# train_from_all_data['HasBmtSF'] = pd.Series(len(train_from_all_data['TotalBsmtSF']), index=train_from_all_data.index)\n# train_from_all_data['HasBmtSF'] = 0\n\n# train_from_all_data.loc[train_from_all_data['TotalBsmtSF'] > 0, 'HasBmtSF'] = 1\n\n# # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c (\u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043c, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0432\u0430\u043b)\n# train_from_all_data.loc[train_from_all_data['HasBmtSF'] == 1, 'TotalBsmtSF'] = np.log(train_from_all_data['TotalBsmtSF'])\n# # --\n\n# # GrLivArea\n# train_from_all_data['GrLivArea'] = np.log(train_from_all_data['GrLivArea'])","813d471a":"y_train = train['SalePrice']\ntrain_from_all_data\n\n# \u0443\u0434\u0430\u043b\u0438\u043c 2 \u0432\u044b\u0431\u0440\u043e\u0441\u0430 GrLivArea, \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n# indexes_to_drop_outlairs = train_from_all_data.sort_values(by='GrLivArea', ascending=False)[:2].index\n\n# all_data = all_data.drop(labels=indexes_to_drop_outlairs)\n# y_train = y_train.drop(indexes_to_drop_outlairs)\n# train_rows -= 2\n\n# \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c SalePrice \u043a \u0441\u0445\u043e\u0436\u0435\u043c\u0443 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e (log)\ny_train = np.log(y_train)\n\n# --\n# total bmsmt (\u043f\u043e\u043c\u043d\u0438\u043c, \u0447\u0442\u043e \u043d\u0443\u043b\u0438 \u043d\u0435 \u0434\u0430\u044e\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c)\nall_data['HasBmtSF'] = pd.Series(len(all_data['TotalBsmtSF']), index=all_data.index)\nall_data['HasBmtSF'] = 0\n\nall_data.loc[all_data['TotalBsmtSF'] > 0, 'HasBmtSF'] = 1\n\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c (\u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043c, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0432\u0430\u043b)\nall_data.loc[all_data['HasBmtSF'] == 1, 'TotalBsmtSF'] = np.log(all_data['TotalBsmtSF'])\n# --\n\n# GrLivArea\nall_data['GrLivArea'] = np.log(all_data['GrLivArea'])","91e408a8":"# Change OverallCond feature into a categorical variable (\u0422\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a)\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n# Year and month sold are transformed into categorical features (\u0422\u043e\u0436\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435)\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","61458f69":"all_data.head()","d157dea5":"from sklearn.preprocessing import LabelEncoder\n\ncolumns = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n\n# process columns, apply LabelEncoder to categorical features\nfor c in columns:\n    lbl_all_data = LabelEncoder() \n    lbl_all_data.fit(list(all_data[c].values)) \n    all_data[c] = lbl_all_data.transform(list(all_data[c].values))","c3811cad":"all_data_preprocessed = pd.get_dummies(all_data)","4dd61057":"all_data_preprocessed.head()","d4c3e2ee":"X_train, X_test = all_data_preprocessed[:train_rows], all_data_preprocessed[train_rows:]\ny_train = y_train","96e83758":"X_train.shape, X_test.shape","53bc8a73":"X_train.shape, y_train.shape","6a49a674":"import xgboost as xgb\n\nfrom sklearn.linear_model import ElasticNet, Lasso, LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler, StandardScaler\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n","e0047172":"folds_count = 6\n\ndef rmse_cv(model):\n    kf_splits = KFold(n_splits=folds_count, random_state=42, shuffle=True).get_n_splits(X_train)\n    rmse_score = np.sqrt(-cross_val_score(model, X_train, y_train, cv=kf_splits, n_jobs=-1, scoring='neg_mean_squared_error'))\n\n    return np.array(rmse_score)\n\ndef rmsle(y, y_prediction):\n    return np.sqrt(mean_squared_error(y, y_prediction))","f3579b09":"lasso_model = make_pipeline(RobustScaler(), Lasso(alpha=0.0005, random_state=1))\n\nprint(f'RMSE on cross-validation: {rmse_cv(lasso_model).mean()}')","a082b719":"elastic_model = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, random_state=3, l1_ratio=.9))\n\nprint(f'RMSE on cross-validation: {rmse_cv(elastic_model).mean()}')","f7c714c6":"linear_regression_model = make_pipeline(RobustScaler(), LinearRegression(normalize=False))\n\nprint(f'RMSE on cross-validation: {rmse_cv(linear_regression_model).mean()}')","8facf160":"KR_model = KernelRidge(alpha=4.5, kernel='polynomial', degree=2, coef0=2.3)\n\nprint(f'RMSE on cross-validation: {rmse_cv(KR_model).mean()}')","9b191deb":"gb_model = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                    max_depth=4, max_features='sqrt',\n                                    min_samples_leaf=15, min_samples_split=10, \n                                    loss='huber', random_state=5)\n\nprint(f'RMSE on cross-validation: {rmse_cv(gb_model).mean()}')","947af51d":"xgb_model = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.04, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2400,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state=7, nthread=-1)\n\nprint(f'RMSE on cross-validation: {rmse_cv(xgb_model).mean()}')","6a60968d":"class AverageModels(BaseEstimator, TransformerMixin, RegressorMixin):\n    def __init__(self, models):\n        self.models = models\n\n    def fit(self, X, y):\n        self.clone_models = [clone(model) for model in self.models]\n\n        for model in self.clone_models:\n            model.fit(X, y)\n\n        return self\n\n    def predict(self, X):\n        average_predictions = np.column_stack([model.predict(X) for model in self.clone_models])\n\n        return np.mean(average_predictions, axis=1)\n","0da99663":"averaged_models = AverageModels(models=(lasso_model, elastic_model, gb_model, xgb_model))\n\naveraged_models.fit(X_train, y_train)\naveraged_models_predictions_train = averaged_models.predict(X_train)","3721ca39":"print(f'RMSLE on train data: {rmsle(y_train, averaged_models_predictions_train)}')\nprint(f'RMSE on cross-validation: {rmse_cv(averaged_models).mean()}')","82320630":"averaged_models_predictions = np.expm1(averaged_models.predict(X_test))","d67a6f6f":"lasso_model.fit(X_train, y_train)\n\nlasso_predictions = np.expm1(lasso_model.predict(X_test))\nlasso_predictions_train = lasso_model.predict(X_train)\n\nprint(f'Lasso predictions:\\n{lasso_predictions}')","68f5f848":"elastic_model.fit(X_train, y_train)\n\nelastic_predictions = np.expm1(elastic_model.predict(X_test))\nelastic_predictions_train = elastic_model.predict(X_train)\n\nprint(f'Elastic Net predictions:\\n{elastic_predictions}')","fa4143a0":"gb_model.fit(X_train, y_train)\n\ngb_predictions = np.expm1(gb_model.predict(X_test))\ngb_predictions_train = gb_model.predict(X_train)\n\nprint(f'Gradient boosting predictions:\\n{gb_predictions}')","09db9393":"xgb_model.fit(X_train, y_train)\n\nxgb_predictions = np.expm1(xgb_model.predict(X_test).astype('float64'))\nxgb_predictions_train = xgb_model.predict(X_train).astype('float64')\n\nprint(f'XGBoost predictions:\\n{xgb_predictions}')","1e26d03e":"all_predicitons = [('Lasso', lasso_predictions_train),\n                   ('ElasticNet', elastic_predictions_train),\n                   ('GradBoosting', gb_predictions_train), \n                   ('XGBoost', xgb_predictions_train)]\n\nfor model, predictions in all_predicitons:\n    print(f'RMSLE on train data for {model} is: {rmsle(y_train, predictions)}')","77bdfd19":"ensemble_prediction = 0.6 * averaged_models_predictions + 0.2 * xgb_predictions + 0.2 * gb_predictions\nensemble_prediction_train = 0.6 * averaged_models_predictions_train + 0.2 * xgb_predictions_train + 0.2 * gb_predictions_train","21a1435f":"print(f'Rmsle of final ensemble on train data is: {rmsle(y_train, ensemble_prediction_train)}')","e2407eff":"submition = pd.DataFrame({'Id': test['Id'], 'SalePrice': ensemble_prediction})\nprint(f'Sale price prediction on test data:\\n{submition}')","d8da20b8":"# from google.colab import files\n\n# submition.to_csv('submititon.csv', index=False)\n# files.download('submititon.csv')","63f775ce":"\u0423\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 `Id`","7df550c2":"\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442","31eb0154":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 + \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","23080a77":"\u0412\u0441\u0435 \u0447\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 `Bsmt`, \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u043f\u0440\u043e\u0441\u0442\u0430\u0432\u0438\u043c `0`, \u0430 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 -  `None` (\u043d\u0435\u0442 \u043f\u043e\u0434\u0432\u0430\u043b\u0430)","9e6c8f25":"\u041e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \\\n\n\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0442\u0443\u0442 - \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u043e\u0440\u043e\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435 \u043a\u0430\u043a \u0432\u044b\u0431\u0440\u043e\u0441. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435. \u0412 \u044d\u0442\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0 \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 1.","0e3e30b4":"# Submition","e15c03b3":"To do graphics bigger","72d81c49":"Read a description file","c668b125":"# Exploratory data analysis","886541ae":"\u0422\u0435\u043f\u0435\u0440\u044c \u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 TotalBsmtSF","866e5777":"\u041e\u0431\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 `Lasso` `ElasticNet` \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b \u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0434\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f RobustScaler","37a4d981":"### My hypothesis (comments) about missing data","03291434":"## Train data","1f944900":"\u041d\u0430\u0448\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u0444\u0438\u0447\u0435\u0439, \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e. \\\n\n\n1.   OverallQual (which is a variable that I don't like because I don't know how it was computed; a funny exercise would be to predict 'OverallQual' using all the other variables available).\n2.   YearBuilt.\n3.   TotalBsmtSF\n4.   GrLivArea\n\n\u042d\u0442\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u043e\u0431\u0449\u0443\u044e \u0446\u0435\u043d\u0443 \u0434\u043e\u043c\u0430.\n\u0421\u0442\u043e\u0438\u0442 \u0438\u0445 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n","07537eb9":"# Final prediction on `stacking_models`, `XGBoost`, `GBoost`, make from them an ensemble ","f204ef51":"Label Encoding some categorical variables that may contain information in their ordering set (\u044d\u0442\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a) \\\n\n## \u041c\u044b \u043f\u0440\u043e\u0448\u043b\u0438\u0441\u044c LabelEncoder'om \u043f\u043e \u0442\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a!\n","445240b9":"## Libraries","ce72e363":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","52730120":"### XGBoost","0a442e32":"## Let's concat our train and test data and work with it","6da5eed9":"\u0425\u043e\u0440\u043e\u0448\u043e \u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n\n`\u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432`\n\n\u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0438\u0445 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0420\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 3 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432: `MCAR`, `MAR`, `MNAR`:\n\n`MCAR (Missing Completely At Random)` \u2014 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0441\u044f \u0441\u043e\u0446\u0438\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043e\u043f\u0440\u043e\u0441, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0434\u0435\u0441\u044f\u0442\u043e\u043c\u0443 \u0440\u0435\u0441\u043f\u043e\u043d\u0434\u0435\u043d\u0442\u0443 \u043e\u0434\u0438\u043d \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u043d\u0435 \u0437\u0430\u0434\u0430\u0432\u0430\u043b\u0441\u044f, \u043f\u0440\u0438\u0447\u0435\u043c \u043d\u0430 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0440\u0435\u0441\u043f\u043e\u043d\u0434\u0435\u043d\u0442\u044b \u043e\u0442\u0432\u0435\u0447\u0430\u043b\u0438, \u0442\u043e \u0438\u043c\u0435\u0435\u0442 \u043c\u0435\u0441\u0442\u043e \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c MCAR. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\/\u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0435 \u0432\u0435\u0434\u0435\u0442 \u043a \u0438\u0441\u043a\u0430\u0436\u0435\u043d\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432. \\\\\n`MAR (Missing At Random)` \u2014 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u044b \u043d\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e, \u0430 \u0432\u0432\u0438\u0434\u0443 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0435\u0439. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043e\u0442\u043d\u043e\u0441\u044f\u0442 \u043a MAR, \u0435\u0441\u043b\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0440\u0443\u0433\u043e\u0439 \u0438\u043c\u0435\u044e\u0449\u0435\u0439\u0441\u044f \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 (\u043f\u043e\u043b, \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u043c\u0430\u044f \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u2026), \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u00ab\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u00bb, \u043a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 MCAR, \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0438\u0441\u043a\u0430\u0436\u0435\u043d\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432. \\\\\n`MNAR (Missing Not At Random)` \u2014 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432. MNAR \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043c\u043e\u0433\u043b\u0430 \u0431\u044b \u0431\u044b\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432, \u043d\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u044d\u0442\u0438\u043c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442. \u041a\u0430\u043a \u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0440\u0430\u0437\u0438\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439\u0441\u044f \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0432\u0437\u044f\u0442\u0430 \u043e\u0442\u0441\u044e\u0434\u0430: https:\/\/loginom.ru\/blog\/missing","94b715a5":"\u0412\u043e\u0437\u044c\u043c\u0435\u043c `all_data`  \u0438 \u043f\u0440\u043e\u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0442\u0435\u0445 4 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043d\u0430 `SalePrice`","330b8990":"## I will try to fit distribution to data using scipy library","7efea487":"## Missing values","2577b319":"`Utilities`: \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u00abAllPub\u00bb, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043e\u0434\u043d\u043e\u0439 \u00abNoSeWa\u00bb \u0438 2 NA. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0434\u043e\u043c \u0441 \u00abNoSewa\u00bb \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440, \u044d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043d\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438. \u041c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c.","db6bbd06":"\u0412 \u043f\u043e\u0438\u0441\u043a\u0430\u0445 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0433\u043e\u043c\u043e\u0441\u043a\u0435\u0434\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \\\n\u041b\u0443\u0447\u0448\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0433\u043e\u043c\u043e\u0441\u043a\u0435\u0434\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 - \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0439. \u041e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u0440\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043d\u0443\u0441\u043e\u0432 (\u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430, \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435) \u0438\u043b\u0438 \u0440\u043e\u043c\u0431\u043e\u0432 (\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0447\u0435\u043a \u0432 \u0446\u0435\u043d\u0442\u0440\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f).\n\n\u041d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \"SalePrice\" \u0438 \"GrLivArea\" ...","0eb59be4":"\u0412\u0441\u0435, \u0447\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 `Garage` \u043f\u0440\u043e\u0441\u0442\u0430\u0432\u0438\u043c `None`, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0431\u0443\u0441\u043b\u043e\u0432\u043b\u0435\u043d\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435, \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0441\u0442\u0430\u0432\u0438\u043c 0","5ff2f194":"`Electrical`: \u0438\u043c\u0435\u0435\u0442 \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 NA. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0438\u043c\u0435\u0435\u0442 \u00abSBrkr\u00bb, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0434\u043b\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u043c\u043e\u0434\u0430).","7442c999":"## TotalBsmtSF","0a3b8534":"\u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043b\u0443\u0447\u0448\u0435","004a432d":"\u041f\u0440\u0438\u0448\u043b\u0430 \u0438\u0434\u0435\u044f \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434\n`Indicator Method`\n\n`Indicator Method` \u2014 \u043c\u0435\u0442\u043e\u0434, \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0449\u0438\u0439 \u0437\u0430\u043c\u0435\u043d\u0443 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0443\u043b\u044f\u043c\u0438 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430-\u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u0430, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0435\u0439, \u0433\u0434\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0438 \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0430\u043c, \u0433\u0434\u0435 \u0440\u0430\u043d\u0435\u0435 \u0431\u044b\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 [Miettinen, 1985].\n\n`\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0435\u0434\u0438\u043d\u0438\u0446 \u0438 \u043d\u0443\u043b\u0435\u0439 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043a\u043e\u0440\u0435\u043b\u043b\u044f\u0446\u0438\u044e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a(\u0444\u0438\u0447\u0435\u0439) \u0432 \u0437\u0430\u043f\u0438\u0441\u044f\u0445`","be94b5ca":"Scatterplot on correlated features with SalePrice","cc7e9c57":"## **Elastic Net** - \u043f\u043e \u0441\u0443\u0442\u0438, \u044d\u0442\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 $L_1 \u0438 L_2$ \n\\\n## **Lasso** - \u044d\u0442\u043e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 $L_1$ \n\\\n## **KernelRidge** - \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0441\u043e\u0431\u043e\u0439 \u043f\u043e\u043b\u0438\u043d\u043e\u043c \u0441\u0442\u0435\u043f\u0435\u043d\u0438 $p$, \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0430 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044e $L_2$","73892b7c":"\u041e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0447\u0430\u0441\u0442\u044c, \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c, \u0442\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044f (stacking)","f35a188b":"# Working with missing data","68b8650d":"As we can see, `johnsonsu` and `lognormal` distribution approximate (follow) our data better than others","d634d853":"# \u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","987aa1d7":"2 \u0432\u044b\u0431\u0440\u043e\u0441\u0430, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0433\u0430\u0440\u0430\u0436\u0430  \u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0441\u043b\u043e\u0432\u043b\u0435\u043d\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u0433\u0430\u0440\u0430\u0436 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0441\u0435\u043b\u044c\u0441\u043a\u043e\u0445\u043e\u0437\u044f\u0439\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438. \u0423\u0434\u0430\u043b\u0438\u043c \u0438\u0445.","75d89745":"## SalePrice","1ed4250b":"### Elastic Net","10e19b75":"\u041e\u0431\u044b\u0447\u043d\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 RobustScaler (\u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u0430 \u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c)","b1ae1d8e":"\u041e\u0442\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e SalePrice \u043e\u0442\u043a\u043b\u043e\u043d\u044f\u0435\u0442\u0441\u044f \u043e\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \\\n\u0415\u0441\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c SalePrice, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043d\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e","d3fbe65c":"`KitchenQual` - \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0447\u0442\u043e \u0438 \u0441 `Electrical`","caa31006":"\u041e\u0442\u043b\u0438\u0447\u043d\u043e!","5b0a9a51":"# \u0422\u0435\u043f\u0435\u0440 \u043e \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u0445 (\u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b \u0442\u043e\u043b\u044c\u043a\u043e 4 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432\u044b\u0448\u0435)","de0bc1fd":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c `FireplaceQu`, 'nan' \u043e\u0441\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0435\u0433\u043e \u043d\u0435\u0442\u0443, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 `None`","aca365d1":"# Cross-validation strategy","04777921":"\u0412 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e SalePrice \u043d\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e, \u0435\u0433\u043e, \u043a\u0430\u043a \u044f \u0433\u043e\u0432\u043e\u0440\u0438\u043b \u0432\u044b\u0448\u0435 - \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \\\n\n\u0412\u044b\u0448\u0435 \u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 SalePrice \u0441\u0445\u043e\u0436\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441 Johnson SU \u0438 lognormal","fc1af8d5":"## \u0414\u043b\u044f `GrLivArea`","f21f955f":"\u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0441\u043a\u0430\u0436\u0435\u043c, \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0432, \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u0445\u043e\u0436\u0435\u0435 \u043d\u0430 `\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435`, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435.\n\\\n\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 `Johnson su` -> `normal` \u044f \u043f\u043e\u043a\u0430 \u043e\u043f\u0443\u0441\u0442\u0438\u043b","9fb8dd6f":"\u0412 \u0446\u0435\u043b\u043e\u043c, \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u0440\u0435\u043b\u043b\u044f\u0446\u0438\u044e OverallQual \u043d\u0430 SalePrice, TotalBsmtSF \u0438 GrLiveArea\n","eebe04f9":"### Gradient boosting","a6ce6705":"# \u0418 \u043d\u0430\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u043a, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 (get_dumnies)","2d7c881e":"## \u042f \u0432\u0437\u044f\u043b 6 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0439 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0434\u043b\u044f \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438","7a8b288c":"`Functional`: \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e NA \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0439 (`typical`) -> `Typ`","15b61828":"# Reading data","44e6bb35":"### `Gradient boosting` model\n","0be5fce3":"\u0422\u0443\u0442 \u0432\u0441\u0435 \u043e\u043a, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 (\u044f\u0440\u043a\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u044b\u0445) \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f","80959f9b":"# More feature engineering","68516d5f":"\u0412\u043e \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0432\u0441\u0435\u0433\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e `Exterior1st` `Exterior2nd` `SaleType` - \u0438\u0445 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0430\u043c\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, `MSSubClass` - \u044d\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 - \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 - \u043d\u0430 `None`","af7e3aa9":"\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u044f \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u0440\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 alpha, \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0430 KernelRidge \u0438 \u0434\u0440\u0443\u0433\u0438\u0445\\\n\u041f\u043e\u043d\u044f\u0442\u043d\u043e\u0435 \u0434\u0435\u043b\u043e, \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f `GridSearch`","b77e4e6b":"`MSZoning` (\u041e\u0431\u0449\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0437\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f): \u0433\u043b\u044f\u0434\u044f \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u00abRL\u00bb \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e 'RL', \u0442\u043e \u0435\u0441\u0442\u044c - \u043c\u043e\u0434\u043e\u0439","be0916bd":"19 features have missing values, 4 - over 80%, 1 - ~50%. \\\nMost often, NaN means the absence of any object: pool, fireplace, etc.","a2ba7326":"\u0422\u0430\u043a \u043a\u0430\u043a \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u044e, \u043d\u0443\u0436\u043d\u043e \u0438\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c.","516a66b0":"There are 1460 instances of training data and 1459 of test data. Total number of attributes equals 81, of which 36 is numerical, 43 categorical + Id and SalePrice","1947d2ad":"Let's look at target variable distribution","93421990":"\u0411\u043e\u043b\u044c\u0448\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 log.\n\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u0434\u0432\u0430\u043b\u0430 (\u0434\u0432\u043e\u0438\u0447\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f). \u0417\u0430\u0442\u0435\u043c \u043c\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439, \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044f \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0435 \u0442\u0435\u0440\u044f\u044f \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u044d\u0444\u0444\u0435\u043a\u0442\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u0434\u0432\u0430\u043b\u0430.","9b4428ad":"### Lasso","481fc9b5":"## Missing data using dataprep library","fe7fa1a0":"\u0423\u0436\u0435 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \\\n\u041f\u043e\u0432\u0442\u043e\u0440\u0438\u043c \u0434\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: `TotalBsmtSF`, `GrLivArea`, \u0438\u0437 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445, \u043a\u0430\u043a \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043a\u043e\u0440\u0435\u043b\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 `SalePrice`\n","bac71a99":"# Missing values & Feature engineering","2b67f58d":"### XGBoost","ff0cce1d":"\u0423\u0434\u0430\u043b\u0438\u043c \u0442\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0433\u0434\u0435 > 80 % \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: `PoolQC` `MiscFeature` `Alley` `Fence`","42b4cf81":"MasVnrArea and MasVnrType \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u044e\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0438\u0435 \u043e\u0431\u043b\u0438\u0446\u043e\u0432\u043a\u0438. \u0414\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 - `0`, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 - `None`","30601758":"\u0421\u0440\u0430\u0437\u0443 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 (`\u043f\u043e\u0434\u0432\u0430\u043b`)\\\n`BsmtQual`          37\\\n`BsmtCond`           37\\\n`BsmtExposure`       38\\\n`BsmtFinType1`       37\\\n`BsmtFinType2`       38\n\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0443 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0442\u043c\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u044f\u0432\u043d\u044b\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0438\u0447\u0430\u0445 \u043e `\u043f\u043e\u0434\u0432\u0430\u043b\u0435`\\\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u0437\u0434\u0435\u0441\u044c, \u0432\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u0435 \u0438\u0441\u043a\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 `MAR (Missing At Random)`\\\n\u0422\u0430\u043a \u043a\u0430\u043a \u043c\u043e\u0433\u0443\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: \u043d\u0430\u0431\u043e\u0440 \u0444\u0438\u0447\u0435\u0439 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043f\u043e\u0434\u0432\u0430\u043b, \u0441\u043a\u0430\u0436\u0435\u043c, \u0434\u043e\u043c \u043d\u0435 \u0447\u0430\u0441\u0442\u043d\u044b\u0439, \u0430 \u043c\u043d\u043e\u0433\u043e\u044d\u0442\u0430\u0436\u043a\u0430\n\n---\nC `\u0433\u0430\u0440\u0430\u0436\u043e\u043c` \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043f\u043e\u043b\u0430\u0433\u0430\u044e, \u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0443 \u043b\u044e\u0434\u0435\u0439 \u043d\u0435\u0442. \\\nUse   `MAR (Missing At Random)` \\\n\n`GarageType`         81 \\\n`GarageYrBlt`        81\\\n`GarageFinish`       81\\\n`GarageQual`         81\\\n`GarageCond`         81\\\n\n---\n`\u0411\u0430\u0441\u0441\u0435\u0439\u043d\u0430` \u0443 \u043b\u044e\u0434\u0435\u0439 \u0442\u043e\u0436\u0435 \u043d\u0435\u0442 \\\nUse   `MAR (Missing At Random)` \\\n\n`PoolArea`            0\\\n`PoolQC`           1453\\\n\n---\n`\u0418\u0437\u0433\u043e\u0440\u043e\u0434\u0438` \u043d\u0435\u0442 \\\nUse   `MAR (Missing At Random)` \\\n\n`Fence`            1179 \\\n\n---\n`\u0418\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438` \u0442\u043e\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \\\nUse   `MAR (Missing At Random)` \\\n\n`MiscFeature`      1406\\\n`MiscVal`             0\n\n\n---\n`\u041a\u0430\u043c\u0438\u043d` \u0442\u043e\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e, \u0435\u0433\u043e \u043d\u0435\u0442 \\\nUse   `MAR (Missing At Random)` \\\n\n`Fireplaces`      0\\\n`FireplaceQu`     690\n\n---\nElectrical \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\n---\n\nLotFrontage \u043d\u0430 \u043c\u043e\u0434\u0443?\u041c\u0435\u0434\u0438\u0430\u043d\u0443?\n\n---\n\n`\u0410\u043b\u043b\u0435\u0438` \u043d\u0435\u0442 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u0434\u043e\u043c \u043d\u0435 \u0447\u0430\u0441\u0442\u043d\u044b\u0439 (\u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438) \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442 \u0435\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \\\nAlley            1369 \u0438\u0437 14... (\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432)\n","1db09f5c":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0431\u044b\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 **RMSE** (Root Mean Square Error) \\\n\u041f\u0443\u0441\u0442\u044c $y_{p}$ - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0430 $y$ - \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\\\n\\\n\u0422\u043e\u0433\u0434\u0430 $RMSE = {\\sqrt {\\frac{1}{m} \\sum_{i=1}^m (y_{p} - y)^2}}$","6a7e05d3":"`LotFrontage` \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 LotFrontage c \u043f\u043e\u043c\u043e\u0449\u044c\u044e neighboorhood, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u043c \u0434\u043e\u043c\u0430\u043c \u044d\u0442\u043e\u0433\u043e \u0436\u0435 \u0440\u0430\u0439\u043e\u043d\u0430","057cb696":"# Modeling\n\n"}}