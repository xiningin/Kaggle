{"cell_type":{"7269d931":"code","d822b249":"code","eda1c4c8":"code","1f1e92c3":"code","654d8509":"code","b37cb9a0":"code","9e647b8a":"code","868c2827":"code","9ce4cfad":"code","d7b0a31e":"code","a851b51b":"code","c66653b1":"code","f0104996":"code","02d62e60":"code","1dc19b5d":"code","4e81b488":"code","a8cdd0f3":"code","e3b6321b":"code","87e85967":"code","51a19149":"markdown","65b3058d":"markdown","8867fb66":"markdown","2e30a58f":"markdown","f372242d":"markdown","f4c6e803":"markdown","7c869be2":"markdown","83b28bdd":"markdown"},"source":{"7269d931":"################## \uc2dc\ud5d8 \uc548\ub0b4 \ubb38\uad6c \ubc0f \ucf54\ub4dc ##################\n# \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n# \uc608\uc2dc) print(df.head())\n\n# getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n# \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n# \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\nimport pandas as pd\nX_test = pd.read_csv(\"..\/input\/hr-data\/X_test.csv\")\nX_train = pd.read_csv(\"..\/input\/hr-data\/X_train.csv\")\ny_train = pd.read_csv(\"..\/input\/hr-data\/y_train.csv\")\n\n# \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n# \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n# \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n# pd.DataFrame({'enrollee_id': X_test.enrollee_id, 'target': pred}).to_csv('003000000.csv', index=False)","d822b249":"# \ub370\uc774\ud130 \ud06c\uae30 \ud655\uc778\nX_train.shape, y_train.shape, X_test.shape","eda1c4c8":"# \ub370\uc774\ud130 \uc0d8\ud50c \ud655\uc778\nX_train.head()","1f1e92c3":"# \uc608\uce21 \ud574\uc57c\ud560 \ud0c0\uac9f \uc0d8\ud50c \ud655\uc778 (0\uacfc 1\uc774\uc9c0\ub9cc \ubb38\uc81c\uc5d0\uc11c\ub294 \ud655\ub960\uac12\uc73c\ub85c \uc608\uce21\ud558\ub77c\uace0 \ub418\uc5b4 \uc788\uc74c)\ny_train.head()","654d8509":"# \uc608\uce21\ud560 \ub370\uc774\ud130 \uade0\ud615 \ud655\uc778\ny_train['target'].value_counts()","b37cb9a0":"# \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\nprint(X_train.info())","9e647b8a":"# \uacb0\uce21\uce58 \ud655\uc778\nprint(\"##Train##\")\nprint(X_train.isnull().sum())\nprint(\"\\n##Test##\")\nprint(X_test.isnull().sum())","868c2827":"# \uc774\uc0c1\uce58IQR\n# training_hours\nimport numpy as np\nQ1 = np.percentile(X_train['training_hours'],25)\nQ3 = np.percentile(X_train['training_hours'],75)\nIQR = Q3 - Q1\noutdata1 = X_train[X_train['training_hours']<(Q1 - 1.5 * IQR)]\noutdata2 = X_train[X_train['training_hours']>(Q3 + 1.5 * IQR)]\nlen(outdata1), len(outdata2)\n# \uc0ad\uc81c\ud558\uae34 \ub9ce\uc74c","9ce4cfad":"# city_development_index       \nQ1 = np.percentile(X_train['city_development_index'],25)\nQ3 = np.percentile(X_train['city_development_index'],75)\nIQR = Q3 - Q1\noutdata1 = X_train[X_train['city_development_index']<(Q1 - 1.5 * IQR)]\noutdata2 = X_train[X_train['city_development_index']>(Q3 + 1.5 * IQR)]\nlen(outdata1), len(outdata2)\n#\uc0ad\uc81c \uc608\uc815","d7b0a31e":"# \ub370\uc774\ud130 \ud655\uc778\nobj_cols = np.array(X_train.columns[X_train.dtypes == object])\nfor col in obj_cols:\n    print(\"\\n##### : \",col)\n    print(X_train[col].value_counts())\nobj_cols","a851b51b":"# \uc2ec\ud50c \uacb0\uce21\uce58 \ucc98\ub9ac\nX_train = X_train.fillna(\"X\")\nX_test = X_test.fillna(\"X\")","c66653b1":"# \uc774\uc0c1\uce58 \uc0ad\uc81c\nprint(X_train.shape)\nind = X_train[X_train['city_development_index']<(Q1 - 1.5 * IQR)].index\nX_train = X_train.drop(index=ind, axis=0)\ny_train = y_train.drop(index=ind, axis=0)\n\nprint(X_train.shape)","f0104996":"from sklearn.preprocessing import LabelEncoder\n\nall_df = pd.concat([X_train.assign(ind=\"train\"), X_test.assign(ind=\"test\")])\nle = LabelEncoder()\nall_df[obj_cols] = all_df[obj_cols].apply(le.fit_transform)\n\nX_train = all_df[all_df['ind'] == 'train']\nX_train = X_train.drop('ind',axis=1)\nX_train\n\nX_test = all_df[all_df['ind'] == 'test']\nX_test = X_test.drop('ind',axis=1)\nX_test","02d62e60":"# \uc2a4\ucf00\uc77c\ub9c1\nfrom sklearn.preprocessing import RobustScaler\nscaler = RobustScaler()\n\nn_cols = ['city_development_index', 'training_hours']\nX_train[n_cols] = scaler.fit_transform(X_train[n_cols])\nX_test[n_cols] = scaler.transform(X_test[n_cols])\nX_train","1dc19b5d":"# \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \uac80\uc99d\uc6a9 \ub370\uc774\ud130\ub85c \uad6c\ubd84\n# \ud559\uc2b5\uc5d0 \ub9ce\uc740 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \uac80\uc99d\uc740 \uc791\uac8c \uac00\uc838\uac10\nfrom sklearn.model_selection import train_test_split\n\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train['target'], test_size=0.1, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","4e81b488":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nrf = RandomForestClassifier(random_state = 2022)\nrf.fit(X_tr, y_tr)\npred = rf.predict_proba(X_val)[:,1]\nprint(roc_auc_score(y_val, pred))","a8cdd0f3":"# Test\ub370\uc774\ud130\npred = rf.predict_proba(X_test)[:,1]","e3b6321b":"# csv\uc0dd\uc131\ucf54\ub4dc\npd.DataFrame({'enrollee_id': X_test.enrollee_id, 'target': pred}).to_csv('003000000.csv', index=False)","87e85967":"# \uccb4\uc810\nimport pickle\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score\n\nwith open( \"..\/input\/hr-data\/answer.pickle\", \"rb\" ) as file:\n    ans = pickle.load(file)\n    ans = pd.DataFrame(ans)\nprint(roc_auc_score(ans['target'], pred))","51a19149":"# \uc81c\ucd9c\uc6a9","65b3058d":"# \uccb4\uc810","8867fb66":"# \ub370\uc774\ud130 \ubd84\ub9ac","2e30a58f":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","f372242d":"# EDA","f4c6e803":"# \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","7c869be2":"\ud29c\ud1a0\ub9ac\uc5bc\uc744 \uc704\ud574 \ub178\ud2b8\ubd81\uc73c\ub85c \uc791\uc131\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc720\uc0ac\ud55c \uc2dc\ud5d8\ud658\uacbd\uc744 \uc704\ud574 \uc2a4\ud06c\ub9bd\ud2b8 \ubaa8\ub4dc\ub85c \uc791\uc131\ud574 \ubcf4\uc138\uc694!!","83b28bdd":"# \ubaa8\ub378 \ud559\uc2b5 \ubc0f \ud3c9\uac00"}}