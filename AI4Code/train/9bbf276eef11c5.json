{"cell_type":{"4bdd25ba":"code","14ed5147":"code","7b731f0b":"code","48a1f075":"code","ea21d75a":"code","12238c3b":"code","6806afdc":"markdown","0cd1c98a":"markdown"},"source":{"4bdd25ba":"import numpy as np\nimport pandas as pd\nfrom torch.utils.data.sampler import BatchSampler, Sampler\nfrom torch.utils.data import DataLoader, Dataset\nfrom typing import Iterator, List, Optional, Union, Dict","14ed5147":"class WeightedClassSampler(Sampler):\n    \"\"\"Abstraction over data sampler.\n\n    Allows you to create stratified sample on unbalanced classes.\n    \"\"\"\n\n    def __init__(\n        self, labels: List[int], class_weights: Dict \n    ):\n        \"\"\"\n        Args:\n            labels (List[int]): list of class label\n                for each elem in the dataset\n            class_weights (dict): give dict of class\n                how may time its repete\n        \"\"\"\n        super().__init__(labels)\n\n        labels = np.array(labels)\n        samples_per_class = {\n            label: int((labels == label).sum() * class_weights[label]) for label in set(labels)\n        }\n        \n\n\n        self.lbl2idx = {\n            label: np.arange(len(labels))[labels == label].tolist()\n            for label in set(labels)\n        }\n        \n        self.length = sum(samples_per_class.values())\n        self.labels = labels\n        self.samples_per_class = samples_per_class\n        self.class_weights = class_weights\n\n\n    def __iter__(self) -> Iterator[int]:\n        \"\"\"\n        Yields:\n            indices of stratified sample\n        \"\"\"\n        indices = []\n        for key in sorted(self.lbl2idx):\n            replace_flag = self.class_weights[key] > 1\n            indices += np.random.choice(\n                self.lbl2idx[key], self.samples_per_class[key], replace=replace_flag\n            ).tolist()\n        assert len(indices) == self.length\n        np.random.shuffle(indices)\n\n        return iter(indices)\n\n\n    def __len__(self) -> int:\n        \"\"\"\n        Returns:\n             length of result sample\n        \"\"\"\n        return self.length","7b731f0b":"train = pd.read_csv(\"..\/input\/siim-isic-melanoma-classification\/train.csv\")","48a1f075":"class BalanceDataset:\n    def __init__(self, df):\n        self.target = df.target.values\n    \n    def __len__(self):\n        return len(self.target)\n    \n    def __getitem__(self, item):\n        return self.target[item]\n    \n    def __get_labels__(self):\n        return self.target","ea21d75a":"dataset = BalanceDataset(df=train)\n\ndata_loader = DataLoader(\n    dataset,\n    sampler= WeightedClassSampler(labels=dataset.__get_labels__(), class_weights= {0:1, 1:10}),\n    batch_size=5\n)\n\nlen(data_loader)","12238c3b":"for i, d in enumerate(data_loader):\n    print(d)\n    if i == 10: break","6806afdc":"### Example","0cd1c98a":"- `class_weights= {0:1, 1:10}` this means class 0 only 1time, class 1 repete 10 times"}}