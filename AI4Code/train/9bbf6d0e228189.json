{"cell_type":{"c786ac3f":"code","d3fd7bfd":"code","583321ec":"code","7000859f":"code","e7b4ca5c":"code","89d57656":"code","b5b53c6a":"code","c89e61f7":"code","b1a39fc5":"code","bbb8a673":"code","c763c947":"code","8d0bcd02":"code","2b90a0bb":"code","1c4b21e7":"code","ca2ad138":"code","246f6a2e":"code","de117c40":"code","617d6f22":"code","3b6dd612":"code","fe57d5d9":"code","a649872e":"code","ed23de40":"code","be503b14":"code","1e115fca":"code","406f5309":"code","0151500b":"code","1ee7cf39":"code","bb9fa352":"code","72ff47b0":"code","d3989a42":"code","8535684f":"markdown","36c824ff":"markdown","07219018":"markdown","6237890f":"markdown","a64ea93e":"markdown","369b94fb":"markdown","70851119":"markdown","d1e4c21c":"markdown","b273387a":"markdown","8fa8d1da":"markdown","98fcb025":"markdown","c1e3681a":"markdown","ceeba265":"markdown"},"source":{"c786ac3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3fd7bfd":"df_train = pd.read_csv('..\/input\/thangnguyen\/jigsaw-toxic-comment-train.csv')\ndel(df_train['id'])\ndf_train.head()","583321ec":"df_valid = pd.read_csv('..\/input\/jigsaw-multilingual-toxic-test-translated\/jigsaw_miltilingual_valid_translated.csv')\ndel(df_valid['id'])\ndf_valid.head()","7000859f":"df_test = pd.read_csv('..\/input\/jigsaw-multilingual-toxic-test-translated\/jigsaw_miltilingual_test_translated.csv')\ndel(df_test['id'])\ndf_test.head()","e7b4ca5c":"print(\"There are %.2f%% toxic comments in the training data.\"%(df_train['toxic'].value_counts()[1]\/df_train['toxic'].value_counts()[0]*100))","89d57656":"print(\"There are %.2f%% toxic comments in the validation data.\"%(df_valid['toxic'].value_counts()[1]\/df_valid['toxic'].value_counts()[0]*100))","b5b53c6a":"print(\"The validation dataframe represents a %.2f%% of the training data.\" %(df_valid.shape[0]\/(df_train.shape[0]+df_valid.shape[0])))","c89e61f7":"import plotly.express as px\nimport plotly.graph_objects as go\n\ncols = [col for col in df_train.columns]\ncols.remove('comment_text')\ntoxic_cats = {}\n\nfor i in cols:\n    i1 = i.capitalize()\n    i1 = i1.replace(\"_\", \" \")\n    toxic_cats[i1] = df_train[i].value_counts()[1]\n\n\n\n\n\nfig = px.bar(x=toxic_cats.values(), y=toxic_cats.keys(), text=toxic_cats.values(),\n             width=700, height=400, title='N\u00ba of comments per toxicity level',\n             color=toxic_cats.values(),\n             labels={'x': 'N\u00ba of comments', 'y': 'Level'})\nfig.update_layout(barmode='stack', yaxis={'categoryorder':'total ascending'})\n\nwith_toxic = {}\n\nfor i in cols:\n    i1 = i.capitalize()\n    i1 = i1.replace(\"_\", \" \")\n    with_toxic[i1] = sum(np.where((df_train['toxic'] == df_train[i]) & (df_train['toxic'] == 1),\n                                   True, False))\n\nfig = px.bar(x=with_toxic.values(), y=with_toxic.keys(), text=with_toxic.values(),\n             width=700, height=400, title='N\u00ba of comments per toxicity level',\n             color=with_toxic.values(),\n             labels={'x': 'N\u00ba of comments', 'y': 'Level'})\nfig.update_layout(barmode='stack', yaxis={'categoryorder':'total ascending'})\nfig.show()","b1a39fc5":"fig = px.pie(values=toxic_cats.values(), names=toxic_cats.keys(), width=700, height=400,\n            title=\"Distribution of comments' toxicity categories\")\nfig.show()","bbb8a673":"fig = go.Figure(data=[\n    go.Bar(y=[a for a in toxic_cats.values()], x=[a for a in toxic_cats.keys()],\n           name='Total', marker_color='purple'),\n    go.Bar(y=[a for a in with_toxic.values()], x=[a for a in with_toxic.keys()],\n          name='Toxic as well', marker_color='yellow')\n])\n\nfig.update_layout(title='Are comments in other categories in toxic as well?', barmode='group', xaxis={'categoryorder':'total descending'})\n\n\nfig.show()\n","c763c947":"toxic_bfr = df_train.toxic.value_counts()[1]\n\nfor i in range(len(df_train)):\n    if (df_train.loc[i,'toxic'] == 0) and (df_train.loc[i,'obscene'] == 1 or\n                                         df_train.loc[i, 'severe_toxic'] == 1 or\n                                         df_train.loc[i, 'threat'] == 1 or\n                                         df_train.loc[i, 'insult'] == 1 or\n                                         df_train.loc[i, 'identity_hate'] == 1):\n        df_train.loc[i,'toxic'] = 1\n        \ntoxic_after = df_train.toxic.value_counts()[1]\ntoxic_comments = toxic_after - toxic_bfr\nprint('There are %i new toxic comments.' %toxic_comments)","8d0bcd02":"import gc\n\ndel(df_train['obscene'])\ndel(df_train['identity_hate'])\ndel(df_train['insult'])\ndel(df_train['threat'])\ndel(df_train['severe_toxic'])\n\ngc.collect()","2b90a0bb":"languages_val = {a:b for a,b in zip(df_valid['lang'].unique(), df_valid['lang'].value_counts())}\nlanguages_val['Spanish'] = languages_val.pop('es')\nlanguages_val['Italian'] = languages_val.pop('it')\nlanguages_val['Turkish'] = languages_val.pop('tr')\n\n\nfig = px.pie(values=languages_val.values(), names=languages_val.keys(), width=700, height=400,\n            title=\"Distribution of comments' languages in validation data\")\nfig.show()","1c4b21e7":"languages_test = {a:b for a,b in zip(df_test['lang'].unique(), df_test['lang'].value_counts())}\nlanguages_test['Spanish'] = languages_test.pop('es')\nlanguages_test['Italian'] = languages_test.pop('it')\nlanguages_test['Turkish'] = languages_test.pop('tr')\nlanguages_test['Russian'] = languages_test.pop('ru')\nlanguages_test['French'] = languages_test.pop('fr')\nlanguages_test['Portuguese'] = languages_test.pop('pt')\n\nfig = px.pie(values=languages_test.values(), names=languages_test.keys(), width=700, height=400,\n            title=\"Distribution of comments' languages in testing data\")\nfig.show()\n","ca2ad138":"del(df_valid['lang'])\ndel(df_valid['comment_text'])\ndf_valid = df_valid.rename(columns={'translated':'comment_text'})\n\ngc.collect()","246f6a2e":"df = pd.concat([df_train, df_valid], ignore_index=True, axis=0)\n\ndf","de117c40":"df_toxic = df[df['toxic'] == 1]\ndf_toxic","617d6f22":"from sklearn.model_selection import train_test_split\n\nX = df['comment_text']\ny = df['toxic']\n\nx_train, x_valid, y_train, y_valid = train_test_split(X, y,\n                                                       random_state=1,\n                                                       train_size=0.2)","3b6dd612":"y_train.sum()\/y_train.shape[0]","fe57d5d9":"from sklearn.feature_extraction.text import TfidfVectorizer\n\nvec = TfidfVectorizer(decode_error='ignore',stop_words='english', max_df=0.8, max_features=3400)\nx_train = vec.fit_transform(x_train).todense()\nx_train = pd.DataFrame(x_train, columns=vec.get_feature_names())","a649872e":"x_valid = vec.transform(x_valid).todense()\nx_valid = pd.DataFrame(x_valid, columns=vec.get_feature_names())","ed23de40":"del(df)","be503b14":"from xgboost import XGBClassifier\n\ndir(XGBClassifier)","1e115fca":"learning_rate = 0.1; max_depth=6; colsample_bytree=1;gamma=1; n_jobs=4","406f5309":"from xgboost import XGBClassifier\nfrom sklearn.metrics import f1_score\n\nmodel = XGBClassifier(n_estimators=585,\n                      use_label_encoder=False,\n                      learning_rate=0.1,\n                      max_depth=6,\n                      colsample_bytree=1,\n                      gamma=1,\n                      n_jobs=4,\n                      scale_pos_weight=10000,\n                      random_state=1)\n\nmodel.fit(x_train, y_train)\n\npreds = model.predict(x_valid)\n\nf1 = f1_score(preds, y_valid)\n\nprint(\"F1 Score: %.4f\" %f1)\n#0.6852","0151500b":"from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\ncm = confusion_matrix(y_valid, preds, labels=model.classes_, normalize='true')\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                             display_labels=model.classes_)\ndisp.plot()","1ee7cf39":"model.best_ntree_limit","bb9fa352":"x_test = vec.transform(df_test['translated']).todense()\nx_test = pd.DataFrame(x_test, columns=vec.get_feature_names())\n#x_test = pca.transform(x_test)","72ff47b0":"preds_test = model.predict(x_test)\n\n# Save test predictions to file\noutput = pd.DataFrame({'id': df_test.index,\n                       'toxic': preds_test})\noutput.to_csv('submission.csv', index=False)\n\noutput.head()","d3989a42":"output['toxic'].value_counts()","8535684f":"S\u1eed d\u1ee5ng tr\u00ecnh bi\u00ean d\u1ecbch t\u1ea5t c\u1ea3 v\u1ec1 ti\u1ebfng anh","36c824ff":"TEST****","07219018":"# KI\u1ec2M TRA D\u1eee LI\u1ec6U","6237890f":"S\u1eed d\u1ee5ng tr\u00ecnh bi\u00ean d\u1ecbch v\u00e0 test","a64ea93e":"# PH\u00c2N T\u00cdCH D\u1eee LI\u1ec6U\nHU\u1ea4N LUY\u1ec6N","369b94fb":"# NH\u1eacP D\u1eee LI\u1ec6U\nKh\u1edfi ch\u1ea1y th\u1eed data c\u1ea7n train","70851119":"Ch\u00fang ta c\u00f3 th\u1ec3 th\u1ea5y r\u00f5 m\u1ed1i quan h\u1ec7 gi\u1eefa toxic  v\u00e0 c\u00e1c lo\u1ea1i kh\u00e1c, v\u00ec v\u1eady ch\u00fang ta s\u1ebd thay th\u1ebf c\u00e1c nh\u1eadn x\u00e9t \u0111\u01b0\u1ee3c ph\u00e2n lo\u1ea1i l\u00e0 none toxic  th\u00e0nh toxic n\u1ebfu ch\u00fang \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o m\u1ee9c \u0111\u1ed9 toxic kh\u00e1c.","d1e4c21c":"In ra s\u1ed1 ph\u1ea7n tr\u0103m toxic comments khi th\u1ea9m \u0111\u1ecbnh","b273387a":"# X\u1eec L\u00dd D\u1eee LI\u1ec6U","8fa8d1da":"D\u1eef li\u1ec7u \u0111\u01b0\u1ee3c nh\u1eadp v\u00e0o l\u00e0 d\u1eef li\u1ec7u \u0111\u00e3 \u0111\u01b0\u1ee3c d\u1ecbch sang ti\u1ebfng anh \u1edf tr\u00ean","98fcb025":"In ra s\u1ed1 ph\u1ea7n tr\u0103m toxic comments \u1edf data c\u1ea7n train","c1e3681a":"T\u1ec9 l\u1ec7 toxic comments khi th\u1ea9m \u0111\u1ecbnh so v\u1edbi data c\u1ea7n trian","ceeba265":"# TH\u1ea8M \u0110\u1ecaNH"}}