{"cell_type":{"d2065d1b":"code","e52341a8":"code","5b3ec79a":"code","557ec47c":"code","7e89c8b9":"code","a030d4a5":"code","a499a4c2":"code","0b913468":"code","1802c177":"code","a87e4013":"code","9221da28":"code","f019662e":"code","7f8127ae":"code","1edfd027":"code","6f56ee8c":"code","a1f1b90a":"code","1953693a":"code","a07b8108":"code","1f506f2f":"code","81d4a56d":"code","4c2250d9":"markdown","996f44fd":"markdown","1032420b":"markdown","10dfabd9":"markdown","0ca4b99b":"markdown","649c8bf6":"markdown","a3f9a5bf":"markdown","134fe883":"markdown","3acdd19c":"markdown","8ae07ba6":"markdown","b42cf78d":"markdown","43c76511":"markdown","9085f606":"markdown"},"source":{"d2065d1b":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\nimport numpy as np \nimport pandas as pd \nimport plotly.express as px\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, recall_score, confusion_matrix\nfrom imblearn.under_sampling import NearMiss\nfrom collections import Counter\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\npd.set_option('display.max_columns', None)","e52341a8":"cus_raw = pd.read_csv(\"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ncus_df = cus_raw.dropna()\ncus_df.head(5)\n\nprint('There are a total of ' + str(cus_df.shape[0]) + ' observations in the dataset.')","5b3ec79a":"cus_df.dtypes\ncus_df['TotalCharges'] = pd.to_numeric(cus_df['TotalCharges'],errors = 'coerce')","557ec47c":"cus_df.nunique()\n\ncus_df.describe()","7e89c8b9":"churn=cus_df['Churn'].value_counts()\nfig = px.pie(cus_df, values=churn.values, names=churn.index,color_discrete_sequence=px.colors.sequential.RdBu,\n            title='Churn Breakdown')\nfig.show()","a030d4a5":"fig = px.histogram(cus_df, x=\"tenure\",title=\"Tenure Breakdown\", color_discrete_sequence=['indianred'] )\nfig.show()\n\nfig = px.histogram(cus_df, x=\"MultipleLines\",title=\"Lines Breakdown\", color_discrete_sequence=['indianred'] )\nfig.show()\n\nfig = px.histogram(cus_df, x=\"gender\",title=\"Gender Breakdown\" ,color_discrete_sequence=['indianred'] )\nfig.show()\n\nfig = px.histogram(cus_df, x=\"Partner\",title=\"Partner Breakdown\" ,color_discrete_sequence=['indianred'] )\nfig.show()","a499a4c2":"fig = px.scatter(x=cus_df['tenure'], y=cus_df['TotalCharges'], \n                 color = cus_df['Churn'],color_discrete_sequence=px.colors.qualitative.Antique, template = 'presentation', \n                 opacity = 0.7, facet_col = cus_df['Contract'], \n                 title = 'Customer Churn by Contract',\n                 labels = {'x' : 'Tenure', 'y' : 'Total Charges'})\nfig.show()\n\nfig = px.scatter(x=cus_df['tenure'], y=cus_df['TotalCharges'], \n                 color = cus_df['Churn'],color_discrete_sequence=px.colors.qualitative.Antique, template = 'presentation', \n                 opacity = 0.7, facet_col = cus_df['Partner'], \n                 title = 'Customer Churn by Partner',\n                 labels = {'x' : 'Tenure', 'y' : 'Total Charges'})\nfig.show()","0b913468":"cus_df.head(2)\nfor col in cus_df:\n    print(str(col) + '' +  str(cus_df[col].unique()))","1802c177":"cusohe_df =pd.get_dummies(data=cus_df,columns=['gender', 'Partner', 'Dependents', \n       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod'],drop_first=True)\ncusohe_df\n\ncusohe_df['Churn'] = cusohe_df['Churn'].replace(\"No\", 0).replace(\"Yes\", 1)","a87e4013":"cusohe_df.isnull().values.any()\n\ncusohe_df['TotalCharges'].isnull().values.any()","9221da28":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(missing_values=np.nan, strategy=\"mean\")\ncusohe_df.TotalCharges = imputer.fit_transform(cusohe_df[\"TotalCharges\"].values.reshape(-1, 1))","f019662e":"from sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE \nsm = SMOTE(random_state=42)\nX = cusohe_df.drop(['Churn','customerID'],axis = 1)\nY = cusohe_df['Churn']\nX_sm, y_sm = sm.fit_resample(X, Y)\n\nprint(f'''Shape of X before SMOTE: {X.shape}\nShape of X after SMOTE: {X_sm.shape}''')\n\nprint('\\nBalance of positive and negative classes (%):')\ny_sm.value_counts(normalize=True) * 100","7f8127ae":"X_train, X_test, y_train, y_test = train_test_split(\n    X_sm, y_sm, test_size=0.25, random_state=42\n)\n\nmodel = RandomForestClassifier(random_state=42)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\n\nprint(f'Accuracy = {accuracy_score(y_test, preds):.2f}\\nRecall = {recall_score(y_test, preds):.2f}\\n')\ncm = confusion_matrix(y_test, preds)","1edfd027":"from xgboost import XGBClassifier\nxgb = XGBClassifier(booster = 'gblinear', learning_rate = 1, n_estimators = 10)\nxgb.fit(X_train, y_train)\ny_pred = xgb.predict(X_test)\n\nprint(accuracy_score(y_test, y_pred))","6f56ee8c":"from imblearn.combine import SMOTEENN\nsmenn = SMOTEENN()\nX_train_smenn, y_train_smenn = smenn.fit_resample(X,Y)\n\nprint('Original dataset shape:', Counter(Y))\nprint('Resample dataset shape:', Counter(y_train_smenn))","a1f1b90a":"model.fit(X_train_smenn, y_train_smenn)\npreds = model.predict(X_test)\n\nprint(f'Accuracy = {accuracy_score(y_test, preds):.2f}\\nRecall = {recall_score(y_test, preds):.2f}\\n')\ncm = confusion_matrix(y_test, preds)","1953693a":"xgb.fit(X_train_smenn, y_train_smenn)\ny_pred = xgb.predict(X_test)\nprint(accuracy_score(y_test, y_pred))","a07b8108":"nm = NearMiss()\nX_nm, Y_nm = nm.fit_resample(X, Y)\n\nprint('Original dataset shape:', Counter(Y))\nprint('Resample dataset shape:', Counter(Y_nm))","1f506f2f":"model.fit(X_nm, Y_nm)\npreds = model.predict(X_test)\n\nprint(f'Accuracy = {accuracy_score(y_test, preds):.2f}\\nRecall = {recall_score(y_test, preds):.2f}\\n')\ncm = confusion_matrix(y_test, preds)","81d4a56d":"xgb.fit(X_nm, Y_nm)\ny_pred = xgb.predict(X_test)\nprint(accuracy_score(y_test, y_pred))","4c2250d9":"**Random Forest Classifier**","996f44fd":"## **Dealing with Class Imbalance with SMOTE**","1032420b":"**XGBOOST Classifier**","10dfabd9":"## **Dealing with Class Imbalance with SMOTE + ENN**","0ca4b99b":"# **Simple Example of Classification using Synthetic Minority Oversampling Technique (SMOTE), Hybridization and Near Miss**","649c8bf6":"73","a3f9a5bf":"**Impute missing values in TotalCharges with mean**","134fe883":"## **Dealing with Class Imbalance with NearMiss**","3acdd19c":"## Data Preparation","8ae07ba6":"**Random Forest Classifier**","b42cf78d":"**XGBoost Classifier**","43c76511":"**XGBoost Classifier**","9085f606":"**Random Forest Classifier**"}}