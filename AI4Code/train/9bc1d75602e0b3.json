{"cell_type":{"0552590e":"code","e130cc8e":"code","5e5821aa":"code","b3b622d2":"code","6c5b3800":"code","a24ff118":"code","3a702425":"code","15c420f6":"code","0301360b":"code","19830bad":"code","6bb5d47a":"code","10c052bc":"code","faa7ca80":"code","f9473e14":"code","cd42c3e5":"code","f3c6edde":"code","e9fb3d29":"code","ba9622a7":"code","f11399cf":"code","0e1ed38e":"code","4a9e2ec6":"code","64daa8f8":"code","b6b355fe":"code","790edbdd":"code","d96f8ce4":"code","4acddb69":"code","96cbbfae":"code","962b26cb":"code","eb9f1957":"code","c1397c1f":"code","41481892":"code","a73c0be0":"code","2acf787d":"code","285abd7c":"code","d07f0c18":"code","6b52106d":"code","1e3fa216":"code","550186ea":"code","4bde4301":"code","b7c4a265":"code","2a0b2946":"code","fb9df0e3":"code","fecf2af0":"code","42aebe73":"code","7e0b77b1":"code","881a4825":"code","d3c56245":"code","cd3ce685":"code","86af9248":"code","904831b2":"code","1c3131c7":"code","ff2be3db":"code","c2b90e6b":"code","86ffdca6":"code","a2717ce7":"code","ddfa2602":"code","cbac3ed3":"markdown","b52f7eb0":"markdown","5200d230":"markdown","e912af55":"markdown","aa4aa352":"markdown","615a2aab":"markdown","f550c0b9":"markdown","7c310287":"markdown","b1f33815":"markdown"},"source":{"0552590e":"import re\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesRegressor\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.model_selection import cross_val_score, KFold","e130cc8e":"train_df = pd.read_csv(\"..\/input\/train.csv\", dtype={\"Age\": np.float64})\ntest_df = pd.read_csv(\"..\/input\/test.csv\", dtype={\"Age\": np.float64})","5e5821aa":"target = train_df[\"Survived\"].values\ntarget[0:5]  # target\u306f0(\u6b7b\u4ea1)\/1(\u751f\u5b58)\u306e\u4e26\u3073","b3b622d2":"# train_df\u304c\u4e0a\u3001test_df\u3092\u4e0b\u306b\u3057\u3066\u7e26\u306b\u9023\u7d50\u3059\u308b\uff08test_df\u306eSurvived\u306f\u7a7a\u6b04\uff09\n# \u9023\u7d50\u306f\u4e57\u5ba2\u306e\u4eba\u6570\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u6709\u52b9\u3068\u601d\u308f\u308c\u308b\uff08\u5b9f\u52d9\u306e\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306ftest_df\u304c\u3042\u3089\u304b\u3058\u3081\u4e0e\u3048\u3089\u306a\u3044\u306e\u3067\u3001\u540c\u3058\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u306f\u9650\u3089\u306a\u3044\uff09\n# sort=True\u3060\u3068\u5217\u304c\u4e26\u3073\u66ff\u3048\u3089\u308c\u308b\nfull_df = pd.concat([train_df, test_df], sort=False)\nfull_df.shape","6c5b3800":"full_df.head()","a24ff118":"# \u6570\u306e\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u57fa\u672c\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d\nfull_df.describe()","3a702425":"full_df.info()","15c420f6":"# \u540d\u524d\u306f\u300c<\u59d3>, ...\u300d\u3068\u3044\u3046\u5f62\u5f0f\u3002\u59d3\u3092\u5168\u90e8\u5c0f\u6587\u5b57\u306b\u3057\u3066\u53d6\u308a\u51fa\u3059\n# \u4f8b\n\"Braund, Mr. Owen Harris\".split(\",\")[0].lower()","0301360b":"# \u59d3\u3092\u53d6\u308a\u51fa\u3057\u3066\u65b0\u305f\u306b\u5217\u3092\u4f5c\u308b\nfull_df[\"surname\"] = full_df[\"Name\"].apply(lambda x: x.split(\",\")[0].lower())","19830bad":"# \u656c\u79f0\uff08Mr.\u306a\u3069\uff09\u3092\u53d6\u308a\u51fa\u3057\u3066\u65b0\u305f\u306b\u5217\u3092\u4f5c\u308b\nfull_df[\"Title\"] = full_df[\"Name\"].apply(\n    lambda x: re.search(\" ([A-Za-z]+)\\.\", x).group(1)\n)","6bb5d47a":"# \u656c\u79f0\u3092\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\u3066\u3001\u65b0\u305f\u306b\u5217\u3092\u4f5c\u308b\ntitle_mapping = {\n    \"Mr\": 1,\n    \"Miss\": 2,\n    \"Mrs\": 3,\n    \"Master\": 4,\n    \"Dr\": 5,\n    \"Rev\": 6,\n    \"Major\": 7,\n    \"Col\": 7,\n    \"Mlle\": 2,\n    \"Mme\": 3,\n    \"Don\": 9,\n    \"Dona\": 9,\n    \"Lady\": 10,\n    \"Countess\": 10,\n    \"Jonkheer\": 10,\n    \"Sir\": 9,\n    \"Capt\": 7,\n    \"Ms\": 2,\n}\nfull_df[\"TitleCat\"] = full_df[\"Title\"].map(title_mapping)","10c052bc":"# \u81ea\u5206\u3092\u5165\u308c\u305f\u540c\u4e57\u8005\u306e\u4eba\u6570\u306e\u5217\u3092\u4f5c\u308b\nfull_df[\"FamilySize\"] = full_df[\"SibSp\"] + full_df[\"Parch\"] + 1\n# \u540c\u4e57\u8005\u306e\u4eba\u6570\u306b\u5fdc\u3058\u30660,1,2\u306e\u3044\u305a\u308c\u304b\u306b\u5206\u5272\uff081\u4eba\u4ee5\u4e0b\u30014\u4eba\u4ee5\u4e0b\u300120\u4eba\u4ee5\u4e0b\uff09\u3053\u306e\u3042\u305f\u308a\u53ef\u8996\u5316\u3057\u305f\u60c5\u5831\u3092\u4f7f\u3063\u3066\u3044\u305d\u3046\nfull_df[\"FamilySize\"] = pd.cut(\n    full_df[\"FamilySize\"], bins=[0, 1, 4, 20], labels=[0, 1, 2]\n)","faa7ca80":"# Name\u306e\u6587\u5b57\u6570\u3092\u6570\u3048\u3066\u3001\u65b0\u305f\u306b\u5217\u3092\u4f5c\u308b\nfull_df[\"NameLength\"] = full_df[\"Name\"].apply(lambda x: len(x))","f9473e14":"# Embarked: S,Q,C\u3092\u6574\u6570\u306b\u7f6e\u304d\u63db\u3048\npd.Categorical(full_df[\"Embarked\"]).codes","cd42c3e5":"# Embarked: S,Q,C\u3092\u6574\u6570\u306b\u7f6e\u304d\u63db\u3048\uff08TODO\uff1a\u3053\u3053\u306fget_dummies\u3092\u8a66\u3057\u305f\u3044\uff09\nfull_df[\"Embarked\"] = pd.Categorical(full_df[\"Embarked\"]).codes","f3c6edde":"# \u904b\u8cc3\u306e\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\uff088.05\u306f\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u3002\u9078\u3093\u3060\u7406\u7531\u304c\u4e0d\u660e\uff09\nfull_df[\"Fare\"] = full_df[\"Fare\"].fillna(8.05)","e9fb3d29":"# Sex\u5217\u3092\u6b8b\u3057\u3064\u3064\u3001\u30ab\u30c6\u30b4\u30ea\u5024\u3068\u3057\u3066\u6271\u3063\u305f\u5217\u3092\u8ffd\u52a0\u3059\u308b\nfull_df = pd.concat([full_df, pd.get_dummies(full_df[\"Sex\"])], axis=1)","ba9622a7":"# Cabin\u306e\u6b20\u640d\u5024\u30920\u3068\u3044\u3046\u5024\u3067\u57cb\u3081\u308b\n# Cabin\uff08\u6587\u5b57\u5217\uff09\u306e1\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3001\u6587\u5b57\u5217\u3092\u5236\u3059\u3046\u3064\u306b\u7f6e\u304d\u63db\u3048\u3066\u3001\u65b0\u3089\u3057\u3044\u5217\u3068\u3059\u308b\uff08TODO\uff1a\u3053\u3053\u3082\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3068\u3057\u3066\u6271\u3046\u3079\u304d\u3067\u306f\uff1f\uff09\nfull_df[\"CabinCat\"] = pd.Categorical(\n    full_df[\"Cabin\"].fillna(\"0\").apply(lambda x: x[0])\n).codes","f11399cf":"# function to get oven\/odd\/null from cabine\ndef get_type_cabine(cabine):\n    # Use a regular expression to search for a title.\n    cabine_search = re.search(\"\\d+\", cabine)\n    # If the title exists, extract and return it.\n    if cabine_search:\n        num = cabine_search.group(0)\n        if np.float64(num) % 2 == 0:\n            return \"2\"\n        else:\n            return \"1\"\n    return \"0\"","0e1ed38e":"# Cabin\u5217\u306e\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\nfull_df[\"Cabin\"] = full_df[\"Cabin\"].fillna(\" \")","4a9e2ec6":"# Cabin\u304c\u5947\u6570\/\u5076\u6570\/\u6b20\u640d\u304b\u3067\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u3051\u3001\u65b0\u305f\u306b\u5217\u3092\u4f5c\u308b\nfull_df[\"CabinType\"] = full_df[\"Cabin\"].apply(get_type_cabine)","64daa8f8":"# \u4eba\u306e\u30ab\u30c6\u30b4\u30ea\u5206\u3051\u7528\u306e\u95a2\u6570\uff08\u5b50\u4f9b\u3001\u6210\u4eba\u5973\u6027\u3001\u6210\u4eba\u7537\u6027\uff09\nchild_age = 18\n\n\ndef get_person(passenger):\n    age, sex = passenger\n    if age < child_age:\n        return \"child\"\n    elif sex == \"female\":\n        return \"female_adult\"\n    else:\n        return \"male_adult\"","b6b355fe":"# Sex\u3068Age\u3092\u3082\u3068\u306b\u4eba\u306e\u30ab\u30c6\u30b4\u30ea\u5206\u3051\u3092\u3057\u305f\u5217\u3092\u8ffd\u52a0\nfull_df = pd.concat(\n    [\n        full_df,\n        pd.DataFrame(\n            full_df[[\"Age\", \"Sex\"]].apply(get_person, axis=1),\n            columns=[\"person\"],\n        ),\n    ],\n    axis=1,\n)","790edbdd":"# \u4eba\u306e\u30ab\u30c6\u30b4\u30ea\u30920\/1\u3067\u8868\u3057\u305f\u5217\u3092\u8ffd\u52a0\nfull_df = pd.concat([full_df, pd.get_dummies(full_df[\"person\"])], axis=1)","d96f8ce4":"table_ticket = pd.DataFrame(full_df[\"Ticket\"].value_counts())\n# \u540c\u3058\u30c1\u30b1\u30c3\u30c8\u306e\u30e1\u30f3\u30d0\u30fc\u3092\u8003\u3048\u3066\u3044\u308b\uff1f\ntable_ticket.rename(columns={\"Ticket\": \"Ticket_Members\"}, inplace=True)","4acddb69":"# \u6761\u4ef6\uff1a\u6210\u4eba\u5973\u6027\u3001\u304b\u3064\u3001\u6b7b\u4ea1\u3001\u304b\u3064\u3001\u540c\u4e57\u8005\u304c\u3044\u308b\ntable_ticket[\"Ticket_perishing_women\"] = full_df.Ticket[\n    (full_df.female_adult == 1.0)\n    & (full_df.Survived == 0.0)\n    & ((full_df.Parch > 0) | (full_df.SibSp > 0))\n].value_counts()","96cbbfae":"# \u53c2\u8003\uff08\u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u2192\u4eba\u6570\u3092\u96c6\u8a08\u3057\u3066\u3044\u308b\uff09\nfull_df.Ticket[\n    (full_df.female_adult == 1.0)\n    & (full_df.Survived == 0.0)\n    & ((full_df.Parch > 0) | (full_df.SibSp > 0))\n].value_counts()","962b26cb":"# \u57cb\u307e\u3063\u3066\u3044\u306a\u3044\u5024\u30920\u3067\u57cb\u3081\u308b\ntable_ticket[\"Ticket_perishing_women\"] = table_ticket[\n    \"Ticket_perishing_women\"\n].fillna(0)","eb9f1957":"# 0\u3067\u57cb\u307e\u3063\u3066\u3044\u306a\u3044\u5024\uff082\u3064\u4e0a\u306e\u30bb\u30eb\u3067\u57cb\u3081\u305f\u5024\u30921.0\u306b\u3059\u308b\uff09\n# TODO: \u53d6\u308a\u3046\u308b\u5024\u30920\u304b1\u306b\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u3053\u306e\u51e6\u7406\u306f\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3067\u304d\u305d\u3046\ntable_ticket[\"Ticket_perishing_women\"][\n    table_ticket[\"Ticket_perishing_women\"] > 0\n] = 1.0","c1397c1f":"table_ticket[\"Ticket_surviving_men\"] = full_df.Ticket[\n    (full_df.male_adult == 1.0)\n    & (full_df.Survived == 1.0)\n    & ((full_df.Parch > 0) | (full_df.SibSp > 0))\n].value_counts()","41481892":"table_ticket[\"Ticket_surviving_men\"] = table_ticket[\n    \"Ticket_surviving_men\"\n].fillna(0)\ntable_ticket[\"Ticket_surviving_men\"][\n    table_ticket[\"Ticket_surviving_men\"] > 0\n] = 1.0","a73c0be0":"table_ticket[\"Ticket_Id\"] = pd.Categorical(table_ticket.index).codes\n# compress under 3 members into one code.\ntable_ticket[\"Ticket_Id\"][table_ticket[\"Ticket_Members\"] < 3] = -1\ntable_ticket[\"Ticket_Members\"] = pd.cut(\n    table_ticket[\"Ticket_Members\"], bins=[0, 1, 4, 20], labels=[0, 1, 2]\n)","2acf787d":"table_ticket.head()","285abd7c":"table_ticket.tail()","d07f0c18":"# \u30c1\u30b1\u30c3\u30c8\u306e\u30c7\u30fc\u30bf\u3092full_df\u306b\u5217\u3068\u3057\u3066\u8ffd\u52a0\nfull_df = pd.merge(\n    full_df,\n    table_ticket,\n    left_on=\"Ticket\",\n    right_index=True,\n    how=\"left\",\n    sort=False,\n)","6b52106d":"table_surname = pd.DataFrame(full_df[\"surname\"].value_counts())\n# \u540c\u3058\u59d3\u306e\u4eba\u6570\u3092\u8003\u3048\u308b\uff1f\ntable_surname.rename(columns={\"surname\": \"Surname_Members\"}, inplace=True)","1e3fa216":"table_surname[\"Surname_perishing_women\"] = full_df.surname[\n    (full_df.female_adult == 1.0)\n    & (full_df.Survived == 0.0)\n    & ((full_df.Parch > 0) | (full_df.SibSp > 0))\n].value_counts()\ntable_surname[\"Surname_perishing_women\"] = table_surname[\n    \"Surname_perishing_women\"\n].fillna(0)\ntable_surname[\"Surname_perishing_women\"][\n    table_surname[\"Surname_perishing_women\"] > 0\n] = 1.0","550186ea":"table_surname[\"Surname_surviving_men\"] = full_df.surname[\n    (full_df.male_adult == 1.0)\n    & (full_df.Survived == 1.0)\n    & ((full_df.Parch > 0) | (full_df.SibSp > 0))\n].value_counts()\ntable_surname[\"Surname_surviving_men\"] = table_surname[\n    \"Surname_surviving_men\"\n].fillna(0)\ntable_surname[\"Surname_surviving_men\"][\n    table_surname[\"Surname_surviving_men\"] > 0\n] = 1.0","4bde4301":"table_surname[\"Surname_Id\"] = pd.Categorical(table_surname.index).codes\n# compress under 3 members into one code.\ntable_surname[\"Surname_Id\"][table_surname[\"Surname_Members\"] < 3] = -1","b7c4a265":"table_surname[\"Surname_Members\"] = pd.cut(\n    table_surname[\"Surname_Members\"], bins=[0, 1, 4, 20], labels=[0, 1, 2]\n)","2a0b2946":"table_surname.head()","fb9df0e3":"table_surname.tail()","fecf2af0":"# \u59d3\u306e\u30c7\u30fc\u30bf\u3092full_df\u306b\u5217\u3068\u3057\u3066\u8ffd\u52a0\nfull_df = pd.merge(\n    full_df,\n    table_surname,\n    left_on=\"surname\",\n    right_index=True,\n    how=\"left\",\n    sort=False,\n)","42aebe73":"# Age\u306e\u4e88\u6e2c\u306b\u4f7f\u3046\u5217\nclassers = [\n    \"Fare\",\n    \"Parch\",\n    \"Pclass\",\n    \"SibSp\",\n    \"TitleCat\",\n    \"CabinCat\",\n    \"female\",\n    \"male\",\n    \"Embarked\",\n    \"FamilySize\",\n    \"NameLength\",\n    \"Ticket_Members\",\n    \"Ticket_Id\",\n]\netr = ExtraTreesRegressor(n_estimators=200)\n# Age\u306e\u4e88\u6e2c\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\uff08\u6b20\u640d\u306e\u306a\u3044Age\uff09\nX_train = full_df[classers][full_df[\"Age\"].notnull()]\nY_train = full_df[\"Age\"][full_df[\"Age\"].notnull()]\n# \u6b20\u640d\u306e\u3042\u308bAge\u3092\u4e88\u6e2c\u5bfe\u8c61\u3068\u3059\u308b\nX_test = full_df[classers][full_df[\"Age\"].isnull()]","7e0b77b1":"etr.fit(X_train, np.ravel(Y_train))\nage_preds = etr.predict(X_test)\n# Age\u306e\u6b20\u640d\u5024\u3092\u4e88\u6e2c\u3057\u305f\u5024\u3067\u57cb\u3081\u308b\nfull_df[\"Age\"][full_df[\"Age\"].isnull()] = age_preds","881a4825":"full_df.head()","d3c56245":"features = [\n    \"female\",\n    \"male\",\n    \"Age\",\n    \"male_adult\",\n    \"female_adult\",\n    \"child\",\n    \"TitleCat\",\n    \"Pclass\",\n    \"Ticket_Id\",\n    \"NameLength\",\n    \"CabinType\",\n    \"CabinCat\",\n    \"SibSp\",\n    \"Parch\",\n    \"Fare\",\n    \"Embarked\",\n    \"Surname_Members\",\n    \"Ticket_Members\",\n    \"FamilySize\",\n    \"Ticket_perishing_women\",\n    \"Ticket_surviving_men\",\n    \"Surname_perishing_women\",\n    \"Surname_surviving_men\",\n]","cd3ce685":"len(features)","86af9248":"# \u7e26\u306b\u9023\u7d50\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u3068\u4e88\u6e2c\u5bfe\u8c61\u7528\u306b\u5207\u308a\u623b\u3059\ntrain = full_df[0:891].copy()\ntest = full_df[891:].copy()","904831b2":"selector = SelectKBest(f_classif, k=len(features))\nselector.fit(train[features], target)\nscores = -np.log10(selector.pvalues_)\nindices = np.argsort(scores)[::-1]\nprint(\"Features importance :\")\nfor f in range(len(scores)):\n    print(\"%0.2f %s\" % (scores[indices[f]],features[indices[f]]))","1c3131c7":"# \u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\uff08\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6307\u5b9a\uff09\nrfc = RandomForestClassifier(\n    n_estimators=3000, min_samples_split=4, class_weight={0: 0.745, 1: 0.255}\n)","ff2be3db":"kf = KFold(n_splits=3, random_state=1)\nscores = cross_val_score(rfc, train[features], target, cv=kf)\nprint(\n    \"Accuracy: %0.3f (+\/- %0.2f) [%s]\"\n    % (scores.mean() * 100, scores.std() * 100, \"RFC Cross Validation\")\n)","c2b90e6b":"# \u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3055\u305b\u308b\nrfc.fit(train[features], target)\nscore = rfc.score(train[features], target)\nprint(\"Accuracy: %0.3f            [%s]\" % (score * 100, \"RFC full test\"))","86ffdca6":"# \u30e2\u30c7\u30eb\u306efeature importance\u3092\u78ba\u8a8d\nimportances = rfc.feature_importances_\nindices = np.argsort(importances)[::-1]\nfor f in range(len(features)):\n    print(\n        \"%d. feature %d (%f) %s\"\n        % (\n            f + 1,\n            indices[f] + 1,\n            importances[indices[f]] * 100,\n            features[indices[f]],\n        )\n    )","a2717ce7":"# \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u4e88\u6e2c\npredictions = rfc.predict(test[features])","ddfa2602":"PassengerId = np.array(test[\"PassengerId\"]).astype(int)\nmy_prediction = pd.DataFrame(predictions, PassengerId, columns=[\"Survived\"])\n\nmy_prediction.to_csv(\"submission.csv\", index_label=[\"PassengerId\"])","cbac3ed3":"# \u3055\u3055\u3084\u304b\u306a\u5fdc\u7528\u30b3\u30f3\u30c6\u30f3\u30c4\uff08Kaggle\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u30cf\u30f3\u30ba\u30aa\u30f3 Appendix\uff09\n\n\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5143\u306b\u5199\u7d4c\u4e2d\u306eKernel\u3092\u516c\u958b\u3057\u307e\u3059\u3002  \nref: https:\/\/www.kaggle.com\/francksylla\/titanic-machine-learning-from-disaster  \n\u6027\u80fd\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u3001\u3053\u3093\u306a\u3053\u3068\u306b\u53d6\u308a\u7d44\u3080\u306e\u304b\u3068\u3044\u3046\u3053\u3068\u3092\u63b4\u3093\u3067\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002  \n\u307e\u305f\u3001Kernel\u306e\u5b66\u7fd2\u306e\u4ed5\u65b9\u306e\u4e00\u4f8b\u3068\u3057\u3066\u3082\u898b\u3066\u3044\u305f\u3060\u3051\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002","b52f7eb0":"### \u4ea4\u5dee\u691c\u8a3c\n\n\u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u30c7\u30fc\u30bf\u306e\u5206\u5272\u306b\u3088\u3089\u306a\u3044\u6027\u80fd\u78ba\u8a8d\u3002  \n\u73fe\u5728\u306e\u30c7\u30fc\u30bf\u304b\u3089\u3069\u306e\u7a0b\u5ea6\u306e\u6027\u80fd\u304c\u51fa\u308b\u306e\u304b\u3092\u628a\u63e1\u3059\u308b","5200d230":"## \u4e88\u6e2c\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n\n\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u305f\u308a\u3001\u7d44\u307f\u5408\u308f\u305b\u305f\u308a\u3057\u3066\u3001\u751f\u6b7b\u306e\u50be\u5411\u3092\u53cd\u6620\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u51fa\u3059","e912af55":"### \u7279\u5fb4\u9078\u629e\n\n\u5897\u3084\u3057\u305f\u30c7\u30fc\u30bf\u305d\u308c\u305e\u308c\u304c\u3001\u751f\u5b58\u306b\u3069\u306e\u7a0b\u5ea6\u95a2\u4fc2\u3059\u308b\u304b\u5024\u3092\u7b97\u51fa\u3059\u308b  \n\u5927\u304d\u3044\u307b\u3069\u751f\u5b58\u306b\u95a2\u4fc2\uff08\u2192TODO\uff1a\u3053\u306e\u60c5\u5831\u3092\u3082\u3068\u306bfeatures\u3092\u7d5e\u308b\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u308b\uff09","aa4aa352":"### \u59d3\u306e\u60c5\u5831\u3092\u6271\u3046\n\n\u6b7b\u4ea1\u3057\u305f\u5973\u6027\u3068\u751f\u5b58\u3057\u305f\u7537\u6027","615a2aab":"## \u30e2\u30c7\u30eb\u4f5c\u6210","f550c0b9":"V2: Black\u3092\u9069\u7528\u3057\u3066\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u3092\u5411\u4e0a","7c310287":"### \u30c1\u30b1\u30c3\u30c8\u306e\u60c5\u5831\u3092\u6271\u3046\n\n\u6b7b\u4ea1\u3057\u305f\u5973\u6027\u3068\u751f\u5b58\u3057\u305f\u7537\u6027\uff08\u3069\u3061\u3089\u3082\u5c11\u6570\u6d3e\u3002\u5973\u6027\u306f\u52a9\u304b\u308a\u3001\u7537\u6027\u306f\u6b7b\u4ea1\uff09","b1f33815":"### Age\u306e\u6b20\u640d\u3092\u4e88\u6e2c\u3057\u3066\u57cb\u3081\u308b"}}