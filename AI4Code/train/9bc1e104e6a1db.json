{"cell_type":{"58efdff7":"code","725b5147":"code","718077b5":"code","fc975b7a":"code","82d8afe0":"code","e921bb37":"code","8b6f61c6":"code","19074abe":"code","00a6142c":"code","8e239a6c":"code","92926347":"code","0209717b":"code","a77f046c":"code","0d4f6d4c":"code","0faecf41":"code","857462e3":"markdown","63d819f9":"markdown","15e8e491":"markdown","4582796c":"markdown","3c8800f2":"markdown","b79418e2":"markdown","552bfb21":"markdown","32cb0823":"markdown"},"source":{"58efdff7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","725b5147":"# To preprocess data, run this code\n# X_train, y_train will be training input data and target labels\n# X_test will be test input data\n# y_test: store predictions here\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler  # use min max scaler (x- min)\/(max - min)\n\n\npath_to_data = \"\/kaggle\/input\/tabular-playground-series-sep-2021\/\"\n\nsample_solution = pd.read_csv(path_to_data + \"sample_solution.csv\")\ntest_data = pd.read_csv(path_to_data + \"test.csv\")\ntrain_data = pd.read_csv(path_to_data + \"train.csv\")\n\n# unpack tdataset to retrieve last column of labels\nX, y = train_data.iloc[: , :train_data.shape[1] - 1], train_data.iloc[:, train_data.shape[1]-1]\nX_test = test_data\n\n#fill in missing values with median\nX = X.apply(lambda x: x.fillna(x.median()), axis=0)\n\n# scale training data\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\nX_scaled = pd.DataFrame(X_scaled)\n\n#scale test data, independently of training data\nscaler2 = MinMaxScaler()\nX_scaled2 = scaler2.fit_transform(X_test)\nX_scaled2 = pd.DataFrame(X_scaled2)\n\nX_train = X_scaled\nX_test = X_scaled2\n\nX_train.drop(columns=[0], inplace=True)\nX_test.drop(columns=[0], inplace=True)\n#X_train.insert(0, 'id', X[X.columns[0]])\ny_train = y\n\n# do this if you want to drop the index column\n#X.drop(['id'], axis=1)\n\n# debug\n#X_train.hist(bins=50, figsize=(25,20))\n#plt.show()","718077b5":"%matplotlib inline\nimport matplotlib.pyplot as plt","fc975b7a":"path_to_data = \"\/kaggle\/input\/tabular-playground-series-sep-2021\/\"\n\nsample_solution = pd.read_csv(path_to_data + \"sample_solution.csv\")\ntest_data = pd.read_csv(path_to_data + \"sample_solution.csv\")\ntrain_data = pd.read_csv(path_to_data + \"train.csv\")","82d8afe0":"train_data.head()","e921bb37":"test_data.head()","8b6f61c6":"# unpack tdataset to retrieve last column of labels\nX, y = train_data.iloc[: , :train_data.shape[1]-1], train_data.iloc[:, train_data.shape[1]-1]\nX_test = test_data[test_data.columns[0]]","19074abe":"X.info()","00a6142c":"X.hist(bins=50, figsize=(25,20))\nplt.show()","8e239a6c":"# display summary statistics of the dataset\nX.describe()  # excludes nan values","92926347":"# count number of nan values per column\nprint(\"Count of nans per column\")\nprint(X.isna().sum(axis=0))\nprint(\"Count of nans per row\")\nprint(X.isna().sum(axis=1))\nprint(y.isna().sum(axis=0))  # label column has no nan values\nprint(\"Percentage of nan values per column is: \")\nprint(round((X.isna().sum(axis=0) \/ len(X)) * 100, 2))\nprint(\"The proportion of rows that contain nan values is \")\nnan_row_counts = X.isna().sum(axis=1)\nprint(str(round(len(nan_row_counts[nan_row_counts > 0]) \/ len(X) * 100, 2)) + \"%\" )","0209717b":"# fill in nan-s with mean\nX = X.apply(lambda x: x.fillna(x.median()), axis=0)\n\n# this prints 0 because there are no more nan values in the dataframe\nprint(X.isna().sum().sum())","a77f046c":"from sklearn.preprocessing import MinMaxScaler  # use min max scaler (x- min)\/(max - min)\n\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\nX_scaled = pd.DataFrame(X_scaled)","0d4f6d4c":"X.hist(bins=50, figsize=(25,20))\nX_scaled.hist(bins=50, figsize=(25,20))\nplt.show()","0faecf41":"X_train = X_scaled","857462e3":"There are quite a few missing values for a feature. To deal with that, three options:\n\n**1.** Get rid of corresponding rows of that feature \n\n**2.** Get rid of entire feature.\n\n**3.** Set the values to some value (zero, mean, median, etc.).\n\nI wouldn't remove features for now, and I would also not remove rows that contain nan values, because that's 62% of our training data. Therefore, for me, the most sensible approach is to replace the values to either zero, mean, or median, or something else.\n\nIt doesn't make sense to me to replace the nans by the mean, because one can take a look at the features 51, 62 say, which have most of their values concentrated around 0 or around 1, so the mean will be in-between, possibly an outlier for that feature. \n\nIn conclusion, in the following I will fill in any missing value in any feature column with the median of the column column it belongs to. Recall we have no categorical columns, all columns are numerical.","63d819f9":"Following steps from the popular book hands-on machine learning aimed on how we use machine learning in practice.","15e8e491":"**Run cell below and ignore the rest to produce preprocessed data and proceed to modelling. Do not ignore what is below the code below if you want to see why I made the choices in the code.**","4582796c":"**We are now ready to fit a model.**","3c8800f2":"**We are now ready to begin analysing the data. It has no missing values now.**","b79418e2":"All columns are numerical, there are no categorical columns. Had there been categorical columns, we would have used the .value_counts() method, which is applied to a column and outputs what categories exist and how many entries belong to each category.","552bfb21":"The reason my code above looks like that is all of the below.","32cb0823":"Feature scaling:\n\nWe can see from the histogram plots that the features have quite different ranges. "}}