{"cell_type":{"252740d8":"code","5947e5fd":"code","f1eb8eb6":"code","984e7935":"code","43bc54f8":"code","41a11b8a":"code","61ca6f27":"code","940199ec":"code","ccca452b":"code","a4afad9a":"code","221bc858":"code","4421663a":"code","67e1d07d":"code","d114f9be":"code","9e4da6c5":"code","71eb3138":"code","630f7eb9":"code","0c42ca21":"code","7cbf3b3d":"code","714d8793":"code","e837b30f":"code","73e5b1f9":"code","7d628b26":"code","ab6f7f35":"code","d9536278":"code","8fbc01a6":"code","1a32fbec":"code","1b69c56e":"code","757da826":"code","2ff18c0e":"code","f5243080":"code","52fddb54":"code","ff22a999":"code","5f837efe":"code","e0f534e0":"code","e35a4a18":"code","5df0eedd":"code","29359d8c":"code","0d4d16e6":"code","939bda56":"code","16bf948a":"code","2aaa7ade":"code","5acd1d6d":"code","ea784f6b":"code","4a2b6799":"code","c44dc24f":"code","7b5efcc1":"code","88b997f1":"code","4ae4b407":"code","fb555bd5":"code","345f327e":"code","698992d4":"code","32e98b95":"code","50f54492":"markdown","81329f19":"markdown","3e9d43fc":"markdown","7836bc7e":"markdown","c9000de6":"markdown","bf69fabb":"markdown","535eccba":"markdown","d2012db8":"markdown","cdcfac3c":"markdown","c5a239ba":"markdown","4e84317e":"markdown","635850ab":"markdown","32d9f1d6":"markdown","e583018f":"markdown","eb0ec08b":"markdown","53320b0c":"markdown","353d65ef":"markdown","c49c03a7":"markdown","3ef3895d":"markdown","c4fa07c3":"markdown","3f73f5d6":"markdown","197fea7b":"markdown","d35f57bf":"markdown","464c3391":"markdown","3501f8bb":"markdown","e7edb58c":"markdown","368d5d50":"markdown","d4e2720e":"markdown","187bc098":"markdown","84c32838":"markdown","b04fed55":"markdown","2582c96a":"markdown","ad179e6c":"markdown","5511f0e6":"markdown","4f7c42fe":"markdown","f438a076":"markdown","72788a58":"markdown","da623247":"markdown","2746aee7":"markdown","a34b5c4a":"markdown","c7a2ac3c":"markdown","d4f2db6f":"markdown","ff01dfbc":"markdown","03ef08df":"markdown","418640fa":"markdown","4d72ab29":"markdown","fdb261ac":"markdown","862f08d9":"markdown","5db6ad7b":"markdown","9a799489":"markdown","3e7fa9cb":"markdown","974b41b9":"markdown","aa881c3b":"markdown","3c90745b":"markdown","907d4bc3":"markdown","521e59b5":"markdown","2b5ec7b6":"markdown","7da1be4f":"markdown","87a566a8":"markdown","13208c99":"markdown","848a1737":"markdown"},"source":{"252740d8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport collections\nfrom datetime import datetime\n%matplotlib inline","5947e5fd":"# first let's load the data into a dataframe\ndf = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')","f1eb8eb6":"df.head()","984e7935":"df.info()","43bc54f8":"[type(df['Gender'][0]), type(df['ScheduledDay'][0]), type(df['AppointmentDay'][0]), type(df['Neighbourhood'][0]), type(df['No-show'][0])]","41a11b8a":"df.isnull().sum()","61ca6f27":"df.duplicated().sum()","940199ec":"df.nunique()","ccca452b":"# function to get unique values\ndef unique(data):\n \n    unique = []\n     \n    for v in data:\n        if v not in unique:\n            unique.append(v)\n\n    for v in unique:\n        print(v)","a4afad9a":"unique(df['Handcap'])","221bc858":"collections.Counter(df['Handcap'])","4421663a":"df.describe()","67e1d07d":"collections.Counter(df['Age']<0)","d114f9be":"df.Age.replace(to_replace=-1, value=0, inplace=True, limit=None, regex=False, method='pad')\ncollections.Counter(df['Age']<0)","9e4da6c5":"df.Handcap.replace(to_replace=[2, 3, 4], value=1, inplace=True, limit=None, regex=False, method='pad')\ncollections.Counter(df['Handcap'])","71eb3138":"# this is how to create a new list of ScheduledDay == AppointmentDay bool\n# first, create lists of ScheduledDay and AppointmentDay series\nScheduledDay = list(df['ScheduledDay'])\nAppointmentDay = list(df['AppointmentDay'])\n\n# next, create a combined list of them\ndates = list(zip(ScheduledDay, AppointmentDay))\ndates[:10]","630f7eb9":"same_test = []\nfor sday, aday in dates:\n    same = sday[5:10] == aday[5:10]\n    same_test.append(same)\nsame_test[:10]","0c42ca21":"sameday = []\nfor v in same_test:\n    if v == True:\n        v = 1\n    else:\n        v = 0\n    sameday.append(v)\nsameday[:10]","7cbf3b3d":"sameday = np.array(sameday)\ndf['SameDay'] = sameday\ndf['SameDay']","714d8793":"df.drop(['PatientId', 'AppointmentID', 'ScheduledDay', 'AppointmentDay','Neighbourhood'], axis=1, inplace=True)","e837b30f":"df.rename(columns={'No-show':'Noshow'}, inplace=True)\ndf= df.rename(columns=str.lower)","73e5b1f9":"cols = df.columns.tolist()\ncols","7d628b26":"cols = ['noshow', 'gender', 'age', 'hipertension', 'diabetes', 'alcoholism', 'handcap',\n 'scholarship', 'sms_received','sameday']\ndf = df[cols]\ndf.head()","ab6f7f35":"df.noshow.replace(to_replace=['No', 'Yes'], value=[0, 1], inplace=True, limit=None, regex=False, method='pad')\ndf.gender.replace(to_replace=['F', 'M'], value=[0, 1], inplace=True, limit=None, regex=False, method='pad')","d9536278":"df.head()","8fbc01a6":"miss = df.noshow == 1\nshow = df.noshow == 0","1a32fbec":"# plotting the pie chart\nplt.pie(df['noshow'].value_counts(), labels = ['No', 'Yes'], colors=['tab:blue', 'tab:red'], \n        startangle=270, shadow = True, explode = (0, 0.1),\n        radius = 1.0, autopct = '%1.1f%%')\n# plot title\nplt.title('Missed the Appointment?', fontweight=\"bold\")\n# showing the plot\nplt.show()","1b69c56e":"corrMatrix = df.corr()\nsns.set(rc={'figure.figsize':(10,6)})\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","757da826":"# first line resets seaborn charts to original size\nsns.reset_orig()\n\nplt.pie(df['scholarship'].value_counts(), labels = ['No', 'Yes'], colors=['tab:red', 'tab:green'], \n        startangle=0, shadow = True, explode = (0, 0.1),\n        radius = 1.0, autopct = '%1.1f%%')\n\nplt.title('Bolsa Fam\u00edlia Beneficiary?', fontweight=\"bold\")\n\nplt.show()","2ff18c0e":"ax = sns.countplot(x=\"scholarship\", hue=\"noshow\", data=df)\nax.set(title='Bolsa Fam\u00edlia and Missed Appointments')\nplt.xticks([0, 1], ['Not Covered', 'Covered'])\nax.set_xlabel('Bolsa Fam\u00edlia')\nL=plt.legend()\nL.get_texts()[0].set_text('Attended')\nL.get_texts()[1].set_text('Missed')\nplt.show()","f5243080":"plt.pie(df['sms_received'].value_counts(), labels = ['No', 'Yes'], colors=['tab:purple', 'tab:pink'], \n        startangle=30, shadow = True, explode = (0, 0.1),\n        radius = 1.0, autopct = '%1.1f%%')\n\nplt.title('Received SMS?', fontweight=\"bold\")\n    \nplt.show()","52fddb54":"df['noshow'].corr(df['sms_received'])","ff22a999":"ax = sns.countplot(x=\"sms_received\", hue=\"noshow\", data=df)\nax.set(title='SMS Notifications and Missed Appointments')\nplt.xticks([0, 1], ['No SMS', 'Received SMS'])\nax.set_xlabel('SMS Received')\nL=plt.legend()\nL.get_texts()[0].set_text('Attended')\nL.get_texts()[1].set_text('Missed')\nplt.show()","5f837efe":"plt.pie(df['sameday'].value_counts(), labels = ['No', 'Yes'], colors=['tab:orange', 'tab:blue'], \n        startangle=30, shadow = True, explode = (0, 0.1),\n        radius = 1.0, autopct = '%1.1f%%')\n  \nplt.title('Scheduled on the Same Day?', fontweight=\"bold\")\n     \nplt.show()","e0f534e0":"df['noshow'].corr(df['sameday'])","e35a4a18":"ax = sns.countplot(x=\"sameday\", hue=\"noshow\", data=df)\nax.set(title='Missed Appointments if Scheduled on the Same Day')\nplt.xticks([0, 1], ['Different', 'Same'])\nax.set_xlabel('Schedule Day vs Appointment Day')\nL=plt.legend()\nL.get_texts()[0].set_text('Attended')\nL.get_texts()[1].set_text('Missed')\nplt.show()","5df0eedd":"ax=sns.displot(df, x=\"age\", discrete=True).set(title='Age Histogram', xlabel='Age');","29359d8c":"collections.Counter(df['age']<=4)","0d4d16e6":"sns.catplot(y=\"age\", kind=\"box\", data=df).set(title='Age Box Plot', ylabel='Age');\nplt.show()","939bda56":"df['noshow'].corr(df['age'])","16bf948a":"# both histograms on the same plot\nax=sns.displot(df, x=\"age\", hue=\"noshow\", multiple=\"stack\", discrete=True, legend=False, palette=\"Set1\").set(title='Age and Missed Appointments', xlabel='Age');\nplt.legend(labels=[\"Missed\",\"Attended\"])\nplt.show()","2aaa7ade":"# boxplot for each group\nax=sns.catplot(y=\"age\", col=\"noshow\",kind=\"box\", data=df);\nax.set_axis_labels(\"\", \"Age\")\nax.fig.suptitle('Box Plot Age Comparision');","5acd1d6d":"[df.age[miss].mean(), df.age[show].mean()]","ea784f6b":"plt.pie(df['gender'].value_counts(), labels = ['Female', 'Male'], colors=['firebrick', 'navy'], \n        startangle=0, shadow = True, explode = (0, 0.1),\n        radius = 1.0, autopct = '%1.1f%%')\n\nplt.title('Gender', fontweight=\"bold\")\n\nplt.show()","4a2b6799":"df['noshow'].corr(df['gender'])","c44dc24f":"ax = sns.countplot(x=\"gender\", hue=\"noshow\", data=df)\nax.set(title='Gender and Missed Appointments')\nplt.xticks([0, 1], ['Female', 'Male'])\nax.set_xlabel('Gender')\nL=plt.legend()\nL.get_texts()[0].set_text('Attended')\nL.get_texts()[1].set_text('Missed')\nplt.show()","7b5efcc1":"plt.pie(df['hipertension'].value_counts(), labels = ['No', 'Yes'], colors=['tan', 'grey'], \n        startangle=30, shadow = True, explode = (0, 0.1),\n        radius = 1.0, autopct = '%1.1f%%')\n  \nplt.title('Has Hypertension?', fontweight=\"bold\")\n     \nplt.show()","88b997f1":"df['noshow'].corr(df['hipertension'])","4ae4b407":"ax = sns.countplot(x=\"hipertension\", hue=\"noshow\", data=df)\nax.set(title='Hypertension and Missed Appointments')\nplt.xticks([0, 1], ['No Hypertension', 'Has Hypertension'])\nax.set_xlabel('Hypertension')\nL=plt.legend()\nL.get_texts()[0].set_text('Attended')\nL.get_texts()[1].set_text('Missed')\nplt.show()","fb555bd5":"plt.pie(df['diabetes'].value_counts(), labels = ['No', 'Yes'], colors=['deepskyblue', 'crimson'], \n        startangle=30, shadow = True, explode = (0, 0.1),\n        radius = 1.0, autopct = '%1.1f%%')\n  \nplt.title('Has Diabetes?', fontweight=\"bold\")\n     \nplt.show()","345f327e":"df['noshow'].corr(df['diabetes'])","698992d4":"ax = sns.countplot(x=\"diabetes\", hue=\"noshow\", data=df)\nax.set(title='Diabetes and Missed Appointments')\nplt.xticks([0, 1], ['No Diabetes', 'Has Diabetes'])\nax.set_xlabel('Diabetes')\nL=plt.legend()\nL.get_texts()[0].set_text('Attended')\nL.get_texts()[1].set_text('Missed')\nplt.show()","32e98b95":"ax = sns.catplot(x=\"diabetes\", hue=\"noshow\", col=\"hipertension\", kind=\"count\", data=df, legend=False)\nax.set_axis_labels(\"Diabetes\", \"count\")\nplt.xticks([0, 1], ['No Diabetes', 'Has Diabetes'])\nL=plt.legend()\nL.get_texts()[0].set_text('Attended')\nL.get_texts()[1].set_text('Missed')\nax.fig.suptitle('Diabetes with Hypertension');","50f54492":"The main problem that this report discuss is the high rate of no_show patient in the Brazilian healthcare system. Let's explore our dependent variable **`noshow`**.","81329f19":"We first notice that there are many *Neighbourhood* values in our data, this makes it less useful in our analysis.\n\nThe second observation is that most columns are binary variables (categorical variables that  take only two values), including our dependent variable *(No-Show)*. This will affect our Exploratory Data Analysis, pie and bar charts will be more useful than histograms in most cases.\n\nWe also notice that ***Handcap*** have 5 unique values, according to [Kaggle](https:\/\/www.kaggle.com\/joniarroba\/noshowappointments) it should be 2 (0 or 1). let's investigate that further.","3e9d43fc":"Since `noshow = 1` in the case of no_show. This means there is a slight higher chance of no_show for those who received an SMS.","7836bc7e":"Why is the minimum value of 'Age' is -1? this is an input error. Let's investigate:","c9000de6":"Let's start by cleaning input errors in 'Handcap' and 'Age' columns.\n\n'Age' has only one input error of -1, we will replace it with 0:","bf69fabb":"What if a patient has both hypertension and diabetes, will that affect the chance of no_show? Let's investigate:","535eccba":"Now let's check for null and duplicated values.","d2012db8":"This is our **cleaned DataFrame**:","cdcfac3c":"We notice that we have no bools. We also notice that some columns has *object* dtype instead of *str*, this is because Pandas stores pointers to strings in dataframes and series.<br>\nWe can confirm that these objects are indeed strings with the following command:","c5a239ba":"#### 3. Health Condition\n\nWe have four types of health problems in our dataset. Of those, we will examine `hipertension` and `diabetes`, based on their prevalence and the correlation matrix.","4e84317e":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n> Now that we've trimmed and cleaned the data, we're ready to move on to exploration. Compute statistics and create visualizations with the goal of addressing the research questions.\n\n> It's important to note that this analysis focus is on the correlation between our variables. This is not enough to assume there is a causal relation between. Further studies using inferential statistics is required for that.","635850ab":"This is `age` boxplot:","32d9f1d6":"Actually, if a patient suffer from both illnesses, he much less likely to miss the appointment.","e583018f":"Now to our questions.","eb0ec08b":"#### I. Hypertension\n\n19.7% of patients had hypertension, but there is no correlation with `noshow`.","53320b0c":"#### 1. Age\n\n`age` is our only numerical variable in the dataset. Let's start by checking its histogram.","353d65ef":"More than 20% of scheduled appointments had no_shows, why?","c49c03a7":"let's convert `same_test` values to 1 or 0 to be consistent with the data.","3ef3895d":"There is almost no correlation between `noshow` and `age`.","c4fa07c3":"The number of values of 2 or more are very few (less than 200 values), so they're probably **input errors**.","3f73f5d6":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n> In this section, we will load in the data, check for cleanliness, and then trim and clean your dataset for analysis.\n\n### General Properties","197fea7b":"We have no nulls nor duplicates, which is great.\n\nLet's look further into the data, check unique values for each column.","d35f57bf":"Finally, let's convert `noshow` and `gender` to dummy variables (change values to 0 and 1) so we can calculate the correlation coefficients. ","464c3391":"Finally, let's review some descriptive statistics of our data:","3501f8bb":"***Handcap*** values ranges from 0 to 4, I can think of two reasons for that:\n- The system have 4 degrees of Handicaps: 1-4 , plus 0 for none.\n- These are input errors.\n\nLet's check how many strange values we have:","e7edb58c":"Before continuing our cleaning, we need to think about what we need from the dataset. The report explores ***'No-show'*** as a dependent variable. As for my choices of the independent variables, there are two groups:\n\n**1. Variables related to the system:** (Scholarship, SMS_received, if ScheduledDay == AppointmentDay).<br>\n**2. Variables related to the patient:** (Age, Gender, Medical conditions).","368d5d50":"<a id='intro'><\/a>\n## Introduction\n\n> This report analyses a [dataset](https:\/\/www.kaggle.com\/joniarroba\/noshowappointments) of more than 110k Brazilian patients from late April to early June 2016. Data shows that in 20% of scheduled appointments, the patient didn't show up.\n> Our goal is trying to answer the question:<br> ***what are the factors leading to no_shows?<br> Is it the system or personal attributes to blame?***  \n\n> The report distinguishes between two groups of factors that might have significance: those related to the system, and personal attributes of the patients themselves.","d4e2720e":"Let's have a look at the first few rows of the data using`.head()`:","187bc098":"We can still comare the age of our two groups:","84c32838":"Let's start to check the correlation matrix:","b04fed55":"Now we create a list of our desired bool","2582c96a":"We will investigate three variables: `scholarship`, `sms_received` and `sameday`.","ad179e6c":"The number of newborn and children up to 4 years is considerably higher, let's investigate further:","5511f0e6":"`No-show` is a bad name to a variable, let's change that. We will also change columns to lowercase.","4f7c42fe":"There is no correlation between `noshow` and `gender`","f438a076":"Now let's append `samaday` to df, we need to create a numpy array, then append it to `df`.","72788a58":"Now we will investigate `Age`, `Gender` and `four medical conditions` for the patients.","da623247":"#### 3. Scheduled for the Same Day\n\nIf the patients got their appointment at the same day of booking, will that make them less likley to miss?<br>\n34.9% got their appointment on the same day.","2746aee7":"We have only one input error in 'Age' column.","a34b5c4a":"# Project<br>Medical Appointment No Shows Data Investigation\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","c7a2ac3c":"#### 2. SMS_Received\n\nDoes sending SMS reminders to a patient decrease the chance of no_show? 32.1% of our dataset received an SMS as shown here: ","d4f2db6f":"### Research Question 1<br> Is the System Responsible for the High Rate of No-Shows","ff01dfbc":"Explore `noshow` variable with a pie chart using `matplotlib`.","03ef08df":"There is a very weak positive correlation between `noshow` and `sms_received`:","418640fa":"#### II. Diabetes\n\n7.2% of patients had diabetes, but there is no correlation with `noshow`.\n","4d72ab29":"#### 2. Gender\n\n`gender` takes 0 for females, and 1 for males. Female patients formed 65% of the dataset.","fdb261ac":"### Research Question 2<br> Are Patients' Attributes Responsible for the High Rate of No-Shows","862f08d9":"Data shows that `gender` is not a decisive factor in our question.","5db6ad7b":"<a id='conclusions'><\/a>\n## Conclusions\n\n### Results\n> This report examined a dataset of Brazilian patients, trying to figure out what are the factors that correlates with missing appointments.\n\n> It found that the most important factor was whether the patient got his appointment at the same day of booking. This factor was negatively correlated with no_show cases, meaning that there were less no_shows when the patient was scheduled on the same day.\n\n> Regarding the system, the report found that sending SMS notifications didn't help. In fact, it was weakly positively correlated with no_show cases. Implying that those who received an SMS were slightly more likely to miss. Receiving benefits from Bolsa Fam\u00edlia didn't seem to correlate with no_show cases.\n\n> Personal attributes didn't seem to correlate with no_shows. Except that patients who missed their appointments were younger in general of those who didn't. It is also noted that having multiple illnesses seems to correlate with less no_shows.\n\n### Limitations\n\n> Most columns in the dataset are binary variables (categorical variables that take only two values), including the dependent variable `noshow`. This limits the statistical methods that can be used to analyze the data.\n\n> Some results were counter-intuitive, The analysis found that there is a slight higher chance of no_show for those who received an SMS. The nature of the data prevents further investigation.\n\n> It's important to note that this analysis focus is on the correlation between the variables. This is not enough to assume there is a causal relation between them. Further studies using inferential statistics is required for that. Also, most correlations were weak due to the categorical nature of the variables.","9a799489":"There is a negative correlation between `noshow` and `sameday`.","3e7fa9cb":"#### 1. Scholarship (Bolsa Fam\u00edlia)\n\n[Bolsa Fam\u00edlia](https:\/\/en.wikipedia.org\/wiki\/Bolsa_Fam%C3%ADlia) is a social welfare program of the Government of Brazil. It provides financial aid to poor Brazilian families.\n\n`scholarship = 1` for patients who receive funds from this program.<br> This totals to 9.8% of the dataset as shown in the pie chart below:","974b41b9":"First, let's create masks according to noshow values","aa881c3b":"Now, let's rearrange the columns:","3c90745b":"Display info about each column using `.info()` method.","907d4bc3":"### Data Cleaning","521e59b5":"The correlation coefficient between `scholarship` and `noshow` is very low `0.029`. We can't notice differences in the no_show rate between those who benefit from 'Bolsa Fam\u00edlia' and those who don't.","2b5ec7b6":"This requires creating a new variable to check if `ScheduledDay == AppointmentDay`. We can use datetime library, but since both 'ScheduledDay' and 'AppointmentDay' columns are in ISO 8601 standard format, it's much simpler to use string slicing.","7da1be4f":"From the above boxplot and the below code, we find that patients who missed their appointments are younger (on average) than those who showed.","87a566a8":"We will drop all columns that we don't need.","13208c99":"Though the correlation is somewhat weak, it's the highest in the correlation matrix.\n\nThis negative correlation means that patients who got their appointments on the same day are less likely to miss.","848a1737":"Now for 'Handcap', since 1 stands for handicaps = True, these positive errors are most likely should have been 1. Although changing these inputs to 1 will increase the number of people in this category by 10%; they still represent very a small percentage of the whole dataset (2%), so this will probably have little effect."}}