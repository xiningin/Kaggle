{"cell_type":{"664fbe1e":"code","aff8a12e":"code","bfd402ee":"code","a94ad91c":"code","ccf3ff4d":"code","7e0d355d":"code","0eccee44":"code","d0658f02":"code","2ff29952":"code","7c2a230b":"code","9d8718be":"code","dbfabcdf":"code","843c2695":"code","3d6ce411":"code","f964075b":"code","4e28788c":"code","75b05e2a":"code","0638c5f1":"code","b41285bd":"code","8c85db9a":"code","80c9973a":"code","f365a668":"code","7930a3c4":"code","8ce61305":"code","5eaae9b8":"code","d4617cd6":"code","a2850f59":"code","6c64469c":"code","c6a867cd":"code","808c194a":"code","04c82b35":"code","3cd1cf11":"code","fb772a49":"code","cdff0ee9":"code","42055bda":"code","f1797de7":"code","30d46d53":"code","12fcbfe4":"code","59287ee7":"code","c0096126":"code","fc846b4d":"code","254edf57":"code","1fc9ba84":"code","f7644524":"code","d67e4a9c":"code","b067e10d":"code","1df915cf":"code","feb1567e":"code","d5820db4":"code","4da92e39":"code","03de7553":"code","64b26a7c":"code","c681cd7c":"code","cf22f49d":"code","ddfd61a0":"markdown","eb33eaaa":"markdown","28abdadd":"markdown","b9b63aa2":"markdown","eb5c4cb3":"markdown","df8c7466":"markdown","3b412d94":"markdown","4ebffde2":"markdown","b530121c":"markdown","70abbc1e":"markdown","b3b4859f":"markdown","9483656f":"markdown","ede06531":"markdown","0b056c88":"markdown","b2d0e437":"markdown","af08d03a":"markdown","37a46120":"markdown","6330a5cd":"markdown","1565d852":"markdown","299216e8":"markdown","31d772e0":"markdown","1bc6f966":"markdown","ef6c2f16":"markdown","39f85c43":"markdown","a48d8190":"markdown","a0f385db":"markdown","d3ae1f87":"markdown","bbfe8d2e":"markdown","48cba7a2":"markdown","88635440":"markdown","8b4b884f":"markdown","62d0d85b":"markdown","a0d5020a":"markdown","52e742c4":"markdown","a81bafd6":"markdown","9f2cc6ad":"markdown","12fd904c":"markdown","263d4601":"markdown","f38eb8ed":"markdown","cd5ec7d0":"markdown","fbc0a994":"markdown","a71d567d":"markdown","97ab608c":"markdown","61fe8536":"markdown","12456617":"markdown","e5ce65a3":"markdown","488d4c07":"markdown","3b230e33":"markdown","efd64ad0":"markdown","73c9c916":"markdown","fc1e579d":"markdown","dd0b69fb":"markdown","51bc61ce":"markdown","2a5aaac7":"markdown","6c417c79":"markdown","54f5229a":"markdown","854b548d":"markdown","629d4339":"markdown","46c8223d":"markdown","16f3d145":"markdown","a165deda":"markdown","266b5ef1":"markdown","320ddc98":"markdown","1c001df7":"markdown","457fc754":"markdown","01a8b16c":"markdown","aed3635e":"markdown","6bd06276":"markdown","4b0c292a":"markdown","d578bad4":"markdown","d41636e2":"markdown","ed267a16":"markdown","d5fa5e49":"markdown","ac445f03":"markdown"},"source":{"664fbe1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aff8a12e":"data = pd.read_csv('\/kaggle\/input\/water-potability\/water_potability.csv')","bfd402ee":"data.info()","a94ad91c":"data.head()","ccf3ff4d":"data.describe()","7e0d355d":"data.columns","0eccee44":"def feature_plot(df,feature):\n    #set plot size\n    plt.figure(figsize=(7,2))\n\n    #draw plot\n    plt.hist(df[feature])\n\n    #set plot labels\n    y_label = 'Frequency'\n    plt.xlabel(feature)\n    plt.ylabel(y_label)\n\n    #show plot\n    plt.show()\n    \nfeature_list = ['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Conductivity','Organic_carbon', 'Trihalomethanes', 'Turbidity', 'Potability']\n\nfor i in feature_list:\n    feature_plot(data,i)","d0658f02":"data.isnull().sum()","2ff29952":"data.ph = data.ph.fillna(data.groupby(['Potability'])['ph'].transform('mean'))\ndata.Sulfate=data.Sulfate.fillna(data.groupby(['Potability'])['Sulfate'].transform('mean'))\ndata.Trihalomethanes =data.Trihalomethanes.fillna(data.groupby(['Potability'])['Trihalomethanes'].transform('mean'))","7c2a230b":"data.head()","9d8718be":"#Check again\n\ndata.isnull().sum()","dbfabcdf":"from collections import Counter\n\n#drop the label \noutlier_list = ['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Conductivity','Organic_carbon', 'Trihalomethanes', 'Turbidity'] \n\ndef detect_outlier(df,feature):\n    \n    outlier_indices = []\n    \n    for f in feature:\n        \n        #lower quartile\n        q1 = np.percentile(df[f],25)\n        \n        #upper quartile\n        q3 = np.percentile(df[f],75)\n        \n        #interquartile range\n        iqr = q3-q1\n        \n        #with coefficient\n        with_coef = 1.5*iqr\n        \n        #detect outlier(s)\n        lower_rule = q1-with_coef\n        upper_rule = q3+with_coef\n        \n        outlier_variable = df[(df[f]<lower_rule) | (df[f]>upper_rule)].index\n        outlier_indices.extend(outlier_variable)\n    \n    #converting to amount\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i,v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers\n\n \n#drop outliers\ndata = data.drop(detect_outlier(data,outlier_list),axis=0).reset_index(drop=True)","843c2695":"plt.figure(figsize=(9,3))\nsns.heatmap(data[feature_list].corr(),annot=True,fmt='.2f')\nplt.show()","3d6ce411":"data.head()","f964075b":"data.info()","4e28788c":"data.tail()","75b05e2a":"ftr_list = ['ph','Hardness','Solids','Chloramines', 'Sulfate', 'Conductivity','Organic_carbon', 'Trihalomethanes', 'Turbidity'] \n      \n    \n    \nfor f in ftr_list:\n    \n    ftr_min = data[f].min()\n    ftr_max = data[f].max()\n    \n    \n    #lower quartile\n    q1 = np.percentile(data[f],25)\n    \n    q2 = data[f].median()\n    \n    #upper quartile\n    q3 = np.percentile(data[f],75)\n    \n    data[f] = [4 if i>= q3 and i < ftr_max else 3 if i>= q2 and i<q3 else 2 if i>=q1 and i<q2 else 1 if i>=ftr_min and i<q1 else 3 for i in data[f]]","0638c5f1":"data.head()","b41285bd":"def feature_analysis(df,x,y):\n    g = sns.catplot(x=x,y=y,data=df,kind='bar',height=4)\n    plt.show()\n    \nfeature_list = ['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Conductivity','Organic_carbon', 'Trihalomethanes', 'Turbidity'] \nlabel = 'Potability'\n\nfor i in feature_list:\n    feature_analysis(data,i,label)","8c85db9a":"g = sns.FacetGrid(data,col='Potability',row='ph',height=3)\ng.map(plt.hist,'Sulfate',bins=25)\ng.add_legend()\nplt.show()","80c9973a":"g = sns.FacetGrid(data,col='Potability',row='ph',height=3)\ng.map(plt.hist,'Hardness',bins=25)\ng.add_legend()\nplt.show()","f365a668":"g = sns.FacetGrid(data,col='Potability',row='ph',height=3)\ng.map(plt.hist,'Solids',bins=25)\ng.add_legend()\nplt.show()","7930a3c4":"g = sns.FacetGrid(data,col='Potability',row='ph',height=3)\ng.map(plt.hist,'Conductivity',bins=25)\ng.add_legend()\nplt.show()","8ce61305":"g = sns.FacetGrid(data,col='Potability',row='ph',height=3)\ng.map(plt.hist,'Organic_carbon',bins=25)\ng.add_legend()\nplt.show()","5eaae9b8":"g = sns.FacetGrid(data,col='Potability',row='ph',height=3)\ng.map(plt.hist,'Chloramines',bins=25)\ng.add_legend()\nplt.show()","d4617cd6":"g = sns.FacetGrid(data,col='Potability',row='ph',height=3)\ng.map(plt.hist,'Trihalomethanes',bins=25)\ng.add_legend()\nplt.show()","a2850f59":"g = sns.FacetGrid(data,col='Potability',row='ph',height=3)\ng.map(plt.hist,'Turbidity',bins=25)\ng.add_legend()\nplt.show()","6c64469c":"data['ph_in']=[1 if i == 2 else 0 for i in data.ph]","c6a867cd":"data['Hardness_in']=[1 if i == 1 or i == 4 else 0 for i in data.Hardness]","808c194a":"data['Sulfate_in']=[0 if i == 3 else 1 for i in data.Sulfate]","04c82b35":"data['ph_Sulfate_11']=[1 if data['ph'][i]==1 and data['Sulfate'][i]==1 else 0 for i in range(len(data['ph']))]\ndata['ph_Sulfate_13']=[1 if data['ph'][i]==1 and data['Sulfate'][i]==3 else 0 for i in range(len(data['ph']))]\ndata['ph_Sulfate_22']=[1 if data['ph'][i]==2 and data['Sulfate'][i]==2 else 0 for i in range(len(data['ph']))]\ndata['ph_Sulfate_33']=[1 if data['ph'][i]==3 and data['Sulfate'][i]==3 else 0 for i in range(len(data['ph']))]\ndata['ph_Sulfate_43']=[1 if data['ph'][i]==4 and data['Sulfate'][i]==3 else 0 for i in range(len(data['ph']))]\ndata['ph_Sulfate_44']=[1 if data['ph'][i]==4 and data['Sulfate'][i]==4 else 0 for i in range(len(data['ph']))]","3cd1cf11":"data['ph_Hardness_32']=[1 if data['ph'][i]==3 and data['Hardness'][i]==2 else 0 for i in range(len(data['ph']))]\ndata['ph_Hardness_34']=[1 if data['ph'][i]==3 and data['Hardness'][i]==4 else 0 for i in range(len(data['ph']))]\ndata['ph_Hardness_43']=[1 if data['ph'][i]==4 and data['Hardness'][i]==3 else 0 for i in range(len(data['ph']))]\ndata['ph_Hardness_44']=[1 if data['ph'][i]==4 and data['Hardness'][i]==4 else 0 for i in range(len(data['ph']))]","fb772a49":"data['ph_Solids_14']=[1 if data['ph'][i]==1 and data['Solids'][i]==4 else 0 for i in range(len(data['ph']))]\ndata['ph_Solids_31']=[1 if data['ph'][i]==3 and data['Solids'][i]==1 else 0 for i in range(len(data['ph']))]\ndata['ph_Solids_32']=[1 if data['ph'][i]==3 and data['Solids'][i]==2 else 0 for i in range(len(data['ph']))]\ndata['ph_Solids_33']=[1 if data['ph'][i]==3 and data['Solids'][i]==3 else 0 for i in range(len(data['ph']))]","cdff0ee9":"data['ph_Conductivity_31']=[1 if data['ph'][i]==3 and data['Conductivity'][i]==1 else 0 for i in range(len(data['ph']))]\ndata['ph_Conductivity_32']=[1 if data['ph'][i]==3 and data['Conductivity'][i]==2 else 0 for i in range(len(data['ph']))]\ndata['ph_Conductivity_33']=[1 if data['ph'][i]==3 and data['Conductivity'][i]==3 else 0 for i in range(len(data['ph']))]\ndata['ph_Conductivity_34']=[1 if data['ph'][i]==3 and data['Conductivity'][i]==4 else 0 for i in range(len(data['ph']))]","42055bda":"data['ph_Organic_c_31']=[1 if data['ph'][i]==3 and data['Organic_carbon'][i]==1 else 0 for i in range(len(data['ph']))]\ndata['ph_Organic_c_32']=[1 if data['ph'][i]==3 and data['Organic_carbon'][i]==2 else 0 for i in range(len(data['ph']))]\ndata['ph_Organic_c_33']=[1 if data['ph'][i]==3 and data['Organic_carbon'][i]==3 else 0 for i in range(len(data['ph']))]","f1797de7":"data['ph_Chloramines_14']=[1 if data['ph'][i]==1 and data['Chloramines'][i]==4 else 0 for i in range(len(data['ph']))]\ndata['ph_Chloramines_31']=[1 if data['ph'][i]==3 and data['Chloramines'][i]==1 else 0 for i in range(len(data['ph']))]\ndata['ph_Chloramines_32']=[1 if data['ph'][i]==3 and data['Chloramines'][i]==2 else 0 for i in range(len(data['ph']))]\ndata['ph_Chloramines_41']=[1 if data['ph'][i]==4 and data['Chloramines'][i]==1 else 0 for i in range(len(data['ph']))]\n","30d46d53":"data['ph_Trihalomethanes_31']=[1 if data['ph'][i]==3 and data['Trihalomethanes'][i]==1 else 0 for i in range(len(data['ph']))]\ndata['ph_Trihalomethanes_32']=[1 if data['ph'][i]==3 and data['Trihalomethanes'][i]==2 else 0 for i in range(len(data['ph']))]\ndata['ph_Trihalomethanes_33']=[1 if data['ph'][i]==3 and data['Trihalomethanes'][i]==3 else 0 for i in range(len(data['ph']))]\ndata['ph_Trihalomethanes_34']=[1 if data['ph'][i]==3 and data['Trihalomethanes'][i]==4 else 0 for i in range(len(data['ph']))]","12fcbfe4":"data['ph_Turbidity_31']=[1 if data['ph'][i]==3 and data['Turbidity'][i]==1 else 0 for i in range(len(data['ph']))]\ndata['ph_Turbidity_32']=[1 if data['ph'][i]==3 and data['Turbidity'][i]==2 else 0 for i in range(len(data['ph']))]","59287ee7":" \"\"\"\n    from ph to ph_1, ph_2, ph_3, and ph_4\n    ...\n    ...\n    from Turbidity to Turbidity_1, Turbidity_2, Turbidity_3, Turbidity_4\n\"\"\"\n\ndata = pd.get_dummies(data,columns=['ph']) \ndata = pd.get_dummies(data,columns=['Hardness'])    \ndata = pd.get_dummies(data,columns=['Solids'])   \ndata = pd.get_dummies(data,columns=['Chloramines'])  \ndata = pd.get_dummies(data,columns=['Sulfate'])  \ndata = pd.get_dummies(data,columns=['Conductivity'])  \ndata = pd.get_dummies(data,columns=['Organic_carbon'])\ndata = pd.get_dummies(data,columns=['Trihalomethanes'])\ndata = pd.get_dummies(data,columns=['Turbidity']) ","c0096126":"original_data = pd.read_csv('\/kaggle\/input\/water-potability\/water_potability.csv')","fc846b4d":"#filling missing values\noriginal_data.ph = original_data.ph.fillna(original_data.groupby(['Potability'])['ph'].transform('mean'))\noriginal_data.Sulfate=original_data.Sulfate.fillna(original_data.groupby(['Potability'])['Sulfate'].transform('mean'))\noriginal_data.Trihalomethanes =original_data.Trihalomethanes.fillna(original_data.groupby(['Potability'])['Trihalomethanes'].transform('mean'))","254edf57":"#drop outliers\noriginal_data = original_data.drop(detect_outlier(original_data,outlier_list),axis=0).reset_index(drop=True)","1fc9ba84":"#adding the new feature from binning\noriginal_data['ph_in']=data['ph_in']\noriginal_data['Sulfate_in']=data['Sulfate_in']\noriginal_data['Hardness_in']=data['Hardness_in']\n\n\n\n#from sulfate and ph\noriginal_data['ph_Sulfate_11']=data['ph_Sulfate_11']\noriginal_data['ph_Sulfate_13']=data['ph_Sulfate_13']\noriginal_data['ph_Sulfate_22']=data['ph_Sulfate_22']\noriginal_data['ph_Sulfate_33']=data['ph_Sulfate_33']\noriginal_data['ph_Sulfate_43']=data['ph_Sulfate_43']\noriginal_data['ph_Sulfate_44']=data['ph_Sulfate_44']\n\n#from hardness and ph\noriginal_data['ph_Hardness_32']=data['ph_Hardness_32']\noriginal_data['ph_Hardness_34']=data['ph_Hardness_34']\noriginal_data['ph_Hardness_43']=data['ph_Hardness_43']\noriginal_data['ph_Hardness_44']=data['ph_Hardness_44']\n\n#from solids and ph\noriginal_data['ph_Solids_14']=data['ph_Solids_14']\noriginal_data['ph_Solids_31']=data['ph_Solids_31']\noriginal_data['ph_Solids_32']=data['ph_Solids_32']\noriginal_data['ph_Solids_33']=data['ph_Solids_33']\n\n#from organic carbon and ph\noriginal_data['ph_Organic_c_31']=data['ph_Organic_c_31']\noriginal_data['ph_Organic_c_32']=data['ph_Organic_c_32']\noriginal_data['ph_Organic_c_33']=data['ph_Organic_c_33']\n\n#from chloramines and ph\noriginal_data['ph_Chloramines_14']=data['ph_Chloramines_14']\noriginal_data['ph_Chloramines_31']=data['ph_Chloramines_31']\noriginal_data['ph_Chloramines_32']=data['ph_Chloramines_32']\noriginal_data['ph_Chloramines_41']=data['ph_Chloramines_41']\n\n#from trihalomethanes and ph\noriginal_data['ph_Trihalomethanes_31']=data['ph_Trihalomethanes_31']\noriginal_data['ph_Trihalomethanes_32']=data['ph_Trihalomethanes_32']\noriginal_data['ph_Trihalomethanes_33']=data['ph_Trihalomethanes_33']\noriginal_data['ph_Trihalomethanes_34']=data['ph_Trihalomethanes_34']\n\n#from turbidity and ph\noriginal_data['ph_Turbidity_31']=data['ph_Turbidity_31']\noriginal_data['ph_Turbidity_32']=data['ph_Turbidity_32']\n","f7644524":"from sklearn.model_selection import train_test_split,StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error\nimport math","d67e4a9c":"X = original_data.drop(['Potability'],axis=1)\ny = original_data['Potability']\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.25,\n                                                    random_state =42)","b067e10d":"rf_params = {'max_features':[1,3,10],\n           'min_samples_split':[2,3,10],\n           'min_samples_leaf':[1,3,10],\n           'bootstrap':[False],\n           'n_estimators':[100,300],\n           'criterion':['gini']}","1df915cf":"from sklearn.neural_network import MLPClassifier\n\nann_params = {'alpha':[0.1,0.01,0.02,0.005,0.0001,0.00001],\n             'hidden_layer_sizes':[(10,10,10),\n                                 (100,100,100),\n                                 (100,100),\n                                 (3,5),\n                                 (5,3)],\n             'solver':['lbfgs','adam','sgd'],\n             'activation':['relu','logistic']\n        \n}","feb1567e":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb_params = {'learning_rate':[0.001,0.01,0.1,0.05],\n            'n_estimators':[100,500,100],\n            'max_depth':[3,5,10],\n            'min_samples_split':[2,5,10]\n    \n}","d5820db4":"from catboost import CatBoostClassifier\n\ncb_params = {\n    'iterations':[200,500],\n    'learning_rate':[0.01,0.05,0.1],\n    'depth':[3,5,8]\n}","4da92e39":"classifier = [\n    RandomForestClassifier(),\n    CatBoostClassifier(),\n    MLPClassifier(),\n    GradientBoostingClassifier(),\n   \n     ]\n\nclassifier_param = [\n    rf_params,\n    cb_params,\n    ann_params,\n    gb_params,\n    \n    \n]","03de7553":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n#cross validation results\ncv_results = []\n\n#to use in ensemble modeling\nbest_estimators = []\n\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i],\n                       param_grid = classifier_param[i],\n                       cv = StratifiedKFold(n_splits=2),\n                       scoring = 'roc_auc',\n                       n_jobs = -1,\n                       verbose=1)\n    \n    clf.fit(X_train_scaled,y_train)\n    cv_results.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print('Method: {}  Score: {}'.format(classifier[i],cv_results[i]))\n    \n\n\nresults = pd.DataFrame({'Cross Validation Means':cv_results,\n                       'ML Models':[\n                           'Random Forest',\n                           'Cat Boosting',\n                           'Artificial Neural Network',\n                           'Gradient Boosting',\n                           \n                       ]})\n\n\n#visualization of results\ng = sns.barplot('Cross Validation Means','ML Models',data=results)\ng.set_xlabel('Mean Accuracy')\ng.set_title('ROC-AUC Score')","64b26a7c":"#so as to optimization\nvoting_c = VotingClassifier(estimators=[('cb',best_estimators[1]),\n                                        ('rf',best_estimators[0]),\n                                        ('gb',best_estimators[3]),\n                                       ('ann',best_estimators[2])],\n                            voting='hard',\n                            n_jobs= -1\n                            \n)\n ","c681cd7c":"voting_c = voting_c.fit(X_train_scaled,y_train)\nmy_score = accuracy_score(voting_c.predict(X_test_scaled),y_test)\nprint(my_score)","cf22f49d":"# road to KAGGLE!\n# water_quality=pd.Series(original_data,name='Potability').astype(int)\noriginal_data.to_csv('water_potability.csv',index=False)\n","ddfd61a0":"<a id='115'><\/a>\n### Insight-15-16-17-18:\n\n* **(15)** If group of **'pH'** value is 3, and **'Hardness'** is 2, percentage of water potability is %22. Another one is %78.\n* **(16)** If group of **'pH'** value is 3, and **'Hardness'** is 4, percentage of water potability is %20. Another one is %80.\n* **(17)** If group of **'pH'** value is 4, and **'Hardness'** is 3, percentage of water potability is %27. Another one is %73.\n* **(18)** If group of **'pH'** value is 4, and **'Hardness'** is 4, percentage of water potability is %33. Another one is %67.","eb33eaaa":"<a id='1'><\/a>\n\n# Load and Check Data","28abdadd":"#### [According to Insight-30-31-32-33:](#130)","b9b63aa2":"<a id='36'><\/a>\n## Submission","eb5c4cb3":"<a id='108'><\/a>\n### Insight-8\n\nWater with **'Sulfate'** value in first, second, and fourth groups are more potable than other groups. It can be grouped according to 1st, 2nd and 4th ones.","df8c7466":"<a id='103'><\/a>\n### Insight-3\nDataset consists of continuous and decimal variable. Therefore, we may not be able to draw on graph of the data without grouping it.","3b412d94":"<a id='107'><\/a>\n### Insight-7\n\nWater with **'Hardness'** value in first and fourth group is more potable than other groups. It can be grouped according to 1st and 4th ones.","4ebffde2":"<a id='28'><\/a>\n### Artificial Neural Network","b530121c":"<a id='34'><\/a>\n## Ensemble Modeling","70abbc1e":"#### [According to Insight-27-28-29:](#127)","b3b4859f":"<a id='11'><\/a>\n### (x) - Potability","9483656f":"#### [According to Insight-6:](#106)\n","ede06531":"#### [According to Insight-9-10-11-12-13-14:](#109)\n","0b056c88":"<a id='18'><\/a>\n### ph-Trihalomethanes-Potability","b2d0e437":"<a id='4'><\/a>\n### Data Visualization","af08d03a":"<a id='8'><\/a>\n# Correlation Matrix","37a46120":"<a id='24'><\/a>\n## Import Library","6330a5cd":"#### [According to Insight-34-35-36-37:](#134)","1565d852":"# Table of Contents\n\n\n\n 1. [Load and Check Data](#1)\n 1. [Feature Description](#2)\n     * [Count of Data Types and Information](#3)\n     * [Data Visualization](#4)\n 1. [Missing Values](#5)\n 1. [Filling Values](#6)\n 1. [Detect Outlier](#7)\n 1. [Correlation Matrix](#8)\n 1. [Binning](#9)\n 1. [Feature Analysis](#10)\n     * [(x) - Potability](#11)\n     * [ph-Sulfate-Potability](#12)\n     * [ph-Hardness-Potability](#13)\n     * [ph-Solids-Potability](#14)\n     * [ph-Conductivity-Potability](#15)\n     * [ph-Organic_carbon-Potability](#16)\n     * [ph-Chloramines-Potability](#17)\n     * [ph-Trihalomethanes-Potability](#18)\n     * [ph-Turbidity-Potability](#19)\n 1. [Feature Engineering](#20)\n 1. [Dummies Section](#21)\n 1. [Data Transforming](#22)\n 1. [Modeling](#23)\n     * [Import Library](#24)\n     * [Train-Test Split](#25)\n     * [Machine Learning Algorithms](#26)\n         * [Random Forest](#27)\n         * [Artificial Neural Network](#28)\n         * [Gradient Boosting](#29)\n         * [Cat Boost](#30)\n     * [Classifiers and Parameters](#31)\n     * [Optimization](#32)\n         * [Grid Search and Cross Validation](#33)\n         * [Ensemble Modeling](#34)\n     * [Prediction](#35)\n 1. [Submission](#36)\n<br><\/br>\n\n## Insight List:\n* [Insight-1](#101)\n* [Insight-2](#102)\n* [Insight-3](#103)\n* [Insight-4](#104)\n* [Insight-5](#105)\n* [Insight-6](#106)\n* [Insight-7](#107)\n* [Insight-8](#108)\n* [Insight-9-10-11-12-13-14](#109)\n* [Insight-15-16-17-18](#115)\n* [Insight-19-20-21-22](#119)\n* [Insight-23-24-25-26](#123)\n* [Insight-27-28-29](#127)\n* [Insight-30-31-32-33](#130)\n* [Insight-34-35-36-37](#134)\n* [Insight-38-39](#138)\n","299216e8":"<a id='15'><\/a>\n### ph-Conductivity-Potability","31d772e0":"#### [According to Insight-38-39:](#138)","1bc6f966":"<a id='105'><\/a>\n### Insight-5\nThe variables are independent each other. There is not correlation.","ef6c2f16":"<a id='23'><\/a>\n# Modeling","39f85c43":"<a id='2'><\/a>\n# Feature Description","a48d8190":"<a id='9'><\/a>\n# Bining","a0f385db":"That's filled in with the average (the mean value).","d3ae1f87":"In this section, it is checked whether missing values exist or not.","bbfe8d2e":"<a id='119'><\/a>\n### Insight-19-20-21-22:\n* **(19)** If group of **'pH'** value is 1, and **'Solids'** is 4, percentage of water potability is %27. Another one is %73.\n* **(20)** If group of **'pH'** value is 3, and **'Solids'** is 1, percentage of water potability is %21. Another one is %78.\n* **(21)** If group of **'pH'** value is 3, and **'Solids'** is 2, percentage of water potability is %25. Another one is %75.\n* **(22)** If group of **'pH'** value is 3, and **'Solids'** is 3, percentage of water potability is %24. Another one is %76.","48cba7a2":"<a id='30'><\/a>\n### Cat Boost","88635440":"<a id='19'><\/a>\n### ph-Turbidity-Potability","8b4b884f":"<a id='6'><\/a>\n# Filling Values","62d0d85b":"At the continuation of the this study, **Bayesian Optimization** and **Randomized Search Cross Validation** methods will be add. Furthermore, the device is running longer, the score can be improved.\n","a0d5020a":"#### [According to Insight-23-24-25-26:](#123)","52e742c4":"<a id='127'><\/a>\n### Insight-27-28-29:\n* **(27)** If group of **'pH'** value is 3, and **'Organic_carbon'** is 1, percentage of water potability is %27. Another one is %73.\n* **(28)** If group of **'pH'** value is 3, and **'Organic_carbon'** is 2, percentage of water potability is %30. Another one is %70.\n* **(29)** If group of **'pH'** value is 3, and **'Organic_carbon'** is 3, percentage of water potability is %33. Another one is %67.","a81bafd6":"<a id='130'><\/a>\n### Insight-30-31-32-33:\n* **(30)** If group of **'pH'** value is 1, and **'Chloramines'** is 4, percentage of water potability is %30. Another one is %70.\n* **(31)** If group of **'pH'** value is 3, and **'Chloramines'** is 1, percentage of water potability is %27. Another one is %73.\n* **(32)** If group of **'pH'** value is 3, and **'Chloramines'** is 2, percentage of water potability is %25. Another one is %75.\n* **(33)** If group of **'pH'** value is 4, and **'Chloramines'** is 1, percentage of water potability is %27. Another one is %73.","9f2cc6ad":"<a id='134'><\/a>\n### Insight-34-35-36-37:\n* **(34)** If group of **'pH'** value is 3, and **'Trihalomethanes'** is 1, percentage of water potability is %25. Another one is %75.\n* **(35)** If group of **'pH'** value is 3, and **'Trihalomethanes'** is 2, percentage of water potability is %29. Another one is %71.\n* **(36)** If group of **'pH'** value is 3, and **'Trihalomethanes'** is 3, percentage of water potability is %30. Another one is %70.\n* **(37)** If group of **'pH'** value is 3, and **'Trihalomethanes'** is 4, percentage of water potability is %33. Another one is %67.","12fd904c":"<a id='106'><\/a>\n### Insight-6\n\nWater with **'pH'** value in second group are more potable than other groups. It can be grouped according to 2nd one.","263d4601":"<a id='31'><\/a>\n### Classifiers and Parameters","f38eb8ed":"<a id='104'><\/a>\n### Insight-4\n\nIt has unbalanced dataset and there's density on the median values. Additionally, amount of potable water is more than impotable water.","cd5ec7d0":"<a id='25'><\/a>\n## Train-Test Split","fbc0a994":"<a id='102'><\/a>\n### Insight-2:\nData standardization, scaling or binning is required, as there's highly difference between the maximum values.","a71d567d":"<a id='26'><\/a>\n## Machine Learning Algorithms","97ab608c":"<a id='5'><\/a>\n# Missing Values","61fe8536":"<a id='33'><\/a>\n### Grid Search and Cross Validation","12456617":"<a id='17'><\/a>\n### ph-Chloramines-Potability","e5ce65a3":"<a id='14'><\/a>\n### ph-Solids-Potability","488d4c07":"<a id='10'><\/a>\n# Feature Analysis","3b230e33":"First of all, we import require library for accomplished output.","efd64ad0":"<a id='27'><\/a>\n### Random Forest","73c9c916":"<a id='3'><\/a>\n### Count Data Types and Information\n\n* float: (9)\n    * **ph              :** unit of the water meaning power of hydrogen that can be an acid or a base\n    * **Hardness        :** ratio of dissolved calcium and magnesium in water\n    * **Solids          :** total dissolved solids (fresh, brackish, saline water)\n    * **Chloramines     :** disinfectants used to treat drinking water\n    * **Sulfate         :** a salt that forms when sulfuric acid reacts with another chemical\n    * **Conductivity    :** the water's ability to conduct electricity\n    * **Organic_carbon  :** a measure of the carbon contained within soil organic matter\n    * **Trihalomethanes :** chemical compounds in which three of the four hydrogen atoms of methane (CH4) are replaced by halogen atoms\n    * **Turbidity       :** the measure of relative clarity of water\n* int: (1)\n    * **Potability      :** suitable for drinking","fc1e579d":"<a id='138'><\/a>\n### Insight-38-39:\n* **(38)** If group of **'pH'** value is 3, and **'Turbidity'** is 1, percentage of water potability is %25. Another one is %75.\n* **(49)** If group of **'pH'** value is 3, and **'Turbidity'** is 2, percentage of water potability is %29. Another one is %71.","dd0b69fb":"This chapter includes data information and count of data types.","51bc61ce":"<a id='32'><\/a>\n## Optimization","2a5aaac7":"<a id='21'><\/a>\n# Dummies Section","6c417c79":"<a id='29'><\/a>\n### Gradient Boosting","54f5229a":"<a id='16'><\/a>\n### ph-Organic_carbon-Potability","854b548d":"The data set is splitted in order to training, testing and cross validation.","629d4339":"#### [According to Insight-19-20-21-22:](#119)","46c8223d":"<a id='13'><\/a>\n### ph-Hardness-Potability","16f3d145":"#### [According to Insight-7:](#107)\n","a165deda":"In this chapter, it's included data visualization with cat and histogram plots.","266b5ef1":"#### [According to Insight-8:](#108)\n","320ddc98":"<a id='23'><\/a>\n### Insight-23-24-25-26:\n* **(23)** If group of **'pH'** value is 3, and **'Conductivity'** is 1, percentage of water potability is %27. Another one is %73.\n* **(24)** If group of **'pH'** value is 3, and **'Conductivity'** is 2, percentage of water potability is %25. Another one is %75.\n* **(25)** If group of **'pH'** value is 3, and **'Conductivity'** is 3, percentage of water potability is %29. Another one is %71.\n* **(26)** If group of **'pH'** value is 3, and **'Conductivity'** is 4, percentage of water potability is %28. Another one is %72.","1c001df7":"Parameters in literature is selected.","457fc754":"<a id='35'><\/a>\n## Prediction","01a8b16c":"<a id='22'><\/a>\n# Data Transforming","aed3635e":"<a id='7'><\/a>\n# Detect Outlier","6bd06276":"<a id='101'><\/a>\n#### Insight-1: \n\nThere are missing values on **'ph', 'Sulfate', and 'Trihalomethanes'** columns.","4b0c292a":"#### [According to Insight-15-16-17-18:](#115)\n","d578bad4":"<a id='12'><\/a>\n### ph-Sulfate-Potability","d41636e2":"* That's utilized machine learning algorithms called the \n    * **Random Forest,** \n    * **Artificial Neural Network,** \n    * **Gradient Boost**\n    * and **Cat Boost**\n    classifiers in literature. \n   <br><\/br>\n* In the meantime, it's executed the hyperparameter tuning method that it's named the **Grid Search Cross Validation**.  \n<br><\/br>\n* As a consequence, that's chosen best parameter and algorithm through *ensemble modeling.*","ed267a16":"It's splitted from ordinal to binary form.","d5fa5e49":"<a id='20'><\/a>\n# Feature Engineering","ac445f03":"<a id='109'><\/a>\n### Insight-9-10-11-12-13-14:\n* **(9)** If group of **'pH'** value is 1, and **'Sulfate'** is 1, percentage of water potability is %25. Another one is %75.\n* **(10)** If group of **'pH'** value is 1, and **'Sulfate'** is 3, percentage of water potability is %16. Another one is %84.\n* **(11)** If group of **'pH'** value is 2, and **'Sulfate'** is 2, percentage of water potability is %25. Another one is %75.\n* **(12)** If group of **'pH'** value is 3, and **'Sulfate'** is 3, percentage of water potability is %16. Another one is %84.\n* **(13)** If group of **'pH'** value is 4, and **'Sulfate'** is 3, percentage of water potability is %20. Another one is %80.\n* **(14)** If group of **'pH'** value is 4, and **'Sulfate'** is 4, percentage of water potability is %25. Another one is %75."}}