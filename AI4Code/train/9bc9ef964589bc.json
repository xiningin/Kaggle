{"cell_type":{"d10e1fb5":"code","67a7bf45":"code","4ab3af87":"code","23a78a91":"code","9b59f030":"code","9529bc85":"code","4c70dd1b":"code","c0d96d03":"markdown","4cd87605":"markdown","d9b64c7f":"markdown"},"source":{"d10e1fb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67a7bf45":"train_data = pd.read_csv(r'..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain_data.head()","4ab3af87":"test_data = pd.read_csv(r'..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest_data.head()","23a78a91":"train_data = train_data.fillna(0)\ntest_data = test_data.fillna(0)","9b59f030":"pearson = train_data.corr(\"pearson\")\npearson.sort_values(by = \"SalePrice\", ascending = False, inplace = True)\npearson.head(30)","9529bc85":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX = sc.fit_transform(X)\nX_test = sc.transform(X_test)\n\ny = train_data[\"SalePrice\"]\nfeatures = [\"OverallQual\", \"GrLivArea\", \"TotalBsmtSF\", \"TotRmsAbvGrd\", \"GarageCars\",\"GarageArea\", \"1stFlrSF\", \"FullBath\", \"YearBuilt\",\"YearRemodAdd\"]\n\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions_RF = model.predict(X_test)\n\noutput = pd.DataFrame({'Id': test_data.Id, 'SalePrice': predictions_RF})\noutput.to_csv('house_submission_forest.csv', index=False)\nprint(\"Your submission was successfully saved!\")","4c70dd1b":"from sklearn.tree import DecisionTreeClassifier\n\nfeatures = [\"OverallQual\", \"GrLivArea\", \"TotalBsmtSF\", \"TotRmsAbvGrd\", \"GarageCars\",\"GarageArea\", \"1stFlrSF\", \"FullBath\", \"YearBuilt\",\"YearRemodAdd\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\nHouseTree = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 3)\nHouseTree.fit(X,y)\npredictions_DT = HouseTree.predict(X_test)\n\noutput = pd.DataFrame({'Id': test_data.Id, 'SalePrice': predictions_DT})\noutput.to_csv('my_submission_tree.csv', index=False)\nprint(\"Your submission was successfully saved!\")","c0d96d03":"## Loading the training data:","4cd87605":"## Calculate Pearson correlation and sort by highest correlation:","d9b64c7f":"## Loading the test data:"}}