{"cell_type":{"9875a548":"code","3f5ad727":"code","c68c62a2":"code","1a37e9f5":"code","653bdf2a":"code","74c9a22a":"code","1fb3a179":"code","93e29b2c":"code","ce3a2afb":"code","30b4362f":"code","9ff7c9ac":"code","fe5ba6df":"code","a7abd1b6":"code","4ae6ac37":"code","9ca6d968":"code","63eef24d":"code","ad4eb929":"code","50a76c56":"code","d67b9e20":"code","dc82975e":"code","656fe553":"code","a8c6f924":"markdown","c1c264d1":"markdown"},"source":{"9875a548":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f5ad727":"#------------------Import_libraries------------------\nimport pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","c68c62a2":"df = pd.read_csv(\"\/kaggle\/input\/wineuci\/Wine.csv\")","1a37e9f5":"#--------------print_sample_of_dataset------------------\ndf.head()","653bdf2a":"#---------------Check_dataset_information--------------\ndf.info()","74c9a22a":"#---------------Check_distribution_of_dataset----------------------\ndf.describe()","1fb3a179":"#-----------------Check_null_values_in_dataset--------------------\ndf.isnull().sum()","93e29b2c":"#-------------Check_imbalance_in_dataset--------------------\nsns.countplot(x = '1',data=df)","ce3a2afb":"target = df['1']\ndf = df.drop('1',axis=1)","30b4362f":"#-----------Split_dataset_into_train_test_set--------------\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(df,target,test_size =0.20,random_state=42)","9ff7c9ac":"sns.pairplot(X_train)","fe5ba6df":"#------------Implement_scaling-----------\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","a7abd1b6":"X_train = pd.DataFrame(X_train)\nX_test = pd.DataFrame(X_test)","4ae6ac37":"sns.pairplot(X_train)","9ca6d968":"#-----------------Build_classifier_model_using_all_available_variables------\nfrom sklearn.linear_model import LogisticRegression\nmodel  = LogisticRegression()\nmodel.fit(X_train,y_train)\nmodel","63eef24d":"#--------Check_model_performance-------------------\nfrom sklearn.metrics import classification_report\nprint(\"The classification_report is:{}\".format(classification_report(y_test,model.predict(X_test))))","ad4eb929":"#-----------------Check_correlation_between_independent_variables---------------\nplt.figure(figsize =(10,8))\nsns.heatmap(X_train.corr(),annot=True)","50a76c56":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\ntr_comp = pca.fit_transform(X_train)\nts_comp = pca.transform(X_test)","d67b9e20":"#--------------Plot_PCA-----------------------\nsns.scatterplot(tr_comp[:,0],tr_comp[:,1])\nplt.xlabel(\"PC1\")\nplt.ylabel(\"PC2\")","dc82975e":"#---------------Build_ml_model_on_extracted_components---------------\nfrom sklearn.linear_model import LogisticRegression\npc_model = LogisticRegression()\npc_model.fit(tr_comp,y_train)\npc_model","656fe553":"#------------Evaluate_model_performance---------------\nfrom sklearn.metrics import classification_report\nprint(\"The classification report is: {}\".format(classification_report(y_test,pc_model.predict(ts_comp))))","a8c6f924":"Compoents Looks orthogonal to each other","c1c264d1":"**The performance of logistic regression model is improved after performing principal component analysis. PCA not only removed some redundancy \nbut also improved variance in the dataset.**"}}