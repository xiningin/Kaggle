{"cell_type":{"1440a555":"code","64dbd232":"code","d1609f6d":"code","897b8eb1":"code","68b3b25f":"code","97a04da8":"code","83bda9ac":"code","30836163":"code","8e86ff09":"code","f789cb12":"code","30648ff5":"code","6e4a95dd":"code","c226b9e7":"code","2a539fcb":"code","d0a1f688":"code","9b558f11":"code","5fc5d0b7":"code","d9f050d2":"code","792ac7e5":"code","2ad82d3d":"code","02f480f2":"code","2b780634":"code","0e392f72":"code","c4c43549":"code","5ed48e2a":"code","cfeaee4f":"code","fe49b45c":"code","ceaaad24":"code","f4423860":"code","35c3e585":"code","0487acb2":"code","b593ab38":"code","4b967aa8":"code","9e6b3d7f":"code","daf05763":"code","c9dafd91":"code","dc1d3ab3":"code","a0357520":"code","b13aec2f":"code","61039a57":"code","79cb1ef6":"code","39abdffe":"code","805ff280":"code","d303254f":"code","497b15b5":"code","55e91f7e":"code","4e204d2a":"code","a499bd94":"markdown","9d9465b6":"markdown","6549e587":"markdown","8e73c9d7":"markdown","cdacfd1e":"markdown","e3bdc65c":"markdown","23d77865":"markdown","3d7a910d":"markdown","8fa0bef9":"markdown","ec9c0033":"markdown","850f4716":"markdown","a917e682":"markdown","8496e184":"markdown","0634eb85":"markdown","c420b31b":"markdown","e5087e22":"markdown","bbfd166a":"markdown","1bacacf4":"markdown","785355e5":"markdown","a981b8a1":"markdown","00df5305":"markdown","996dc1fa":"markdown","c1ca63fb":"markdown","b389e59f":"markdown"},"source":{"1440a555":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, \\\nroc_auc_score, classification_report, confusion_matrix, plot_roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler,MinMaxScaler\nimport matplotlib.pyplot as plt","64dbd232":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 40)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.width', 170)","d1609f6d":"df=pd.read_csv(\"..\/input\/diabetes-data-set\/diabetes.csv\")","897b8eb1":"df.head()","68b3b25f":"df.isnull().sum()","97a04da8":"df[[\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]] = df[[\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]].replace(0,np.NaN)","83bda9ac":"df.isnull().sum()","30836163":"from sklearn.impute import KNNImputer\nscaler = RobustScaler()\ndff = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\ndff.head()","8e86ff09":"imputer = KNNImputer(n_neighbors=3)\ndff = pd.DataFrame(imputer.fit_transform(dff), columns=dff.columns)\ndff.head()\ndff.isnull().sum()","f789cb12":"df = pd.DataFrame(scaler.inverse_transform(dff), columns=dff.columns)","30648ff5":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car","6e4a95dd":"cat_cols, num_cols, cat_but_car = grab_col_names(df)","c226b9e7":"df.describe().T","2a539fcb":"df[\"Age\"].describe()","d0a1f688":"df.loc[(df[\"Age\"]<30),\"new_Age\"]=\"young\"\ndf.loc[(df[\"Age\"]>=30) & (df[\"Age\"] <46),\"new_Age\"]=\"mature\"\ndf.loc[(df[\"Age\"]>=46),\"new_Age\"]=\"grownup+\"","9b558f11":"df[\"Gli_risk\"]=[1 if i>140 else 0 for i in df[\"Glucose\"]]","5fc5d0b7":"df.loc[(df[\"Outcome\"] == 1),\"SkinThickness\"].sort_values(ascending=False).describe().T","d9f050d2":"df[\"DiabetesPedigreeFunction\"].describe()","792ac7e5":"df.loc[df[\"DiabetesPedigreeFunction\"]<0.33,\"Genetics_risk\"]=\"low\"\ndf.loc[(df[\"DiabetesPedigreeFunction\"]>=0.33) & (df[\"DiabetesPedigreeFunction\"]<0.66),\"Genetics_risk\"]=\"high\"\ndf.loc[(df[\"DiabetesPedigreeFunction\"]>=0.66),\"Genetics_risk\"]=\"very high\"","2ad82d3d":"df.loc[(df[\"BMI\"]<30),\"BMI_risk\"]=\"low\"\ndf.loc[(df[\"BMI\"]>=30) & (df[\"BMI\"]<35),\"BMI_risk\"]=\"high\"\ndf.loc[(df[\"BMI\"]>=35),\"BMI_risk\"]=\"very high\"","02f480f2":"df[\"Pregnancies\"].nunique()","2b780634":"df[\"Pregnancies\"].unique()","0e392f72":"df[\"BloodPressure_risk\"]=[1 if i>90 else 0 for i in df[\"BloodPressure\"]]","c4c43549":"df[df[\"Insulin\"]>400][[\"Insulin\",\"Outcome\"]]","5ed48e2a":"df.loc[df[\"Insulin\"]>400,\"Ins_risk\"]=\"very high\"\ndf.loc[(df[\"Insulin\"]<=400) & (df[\"Insulin\"]>200),\"Ins_risk\"]=\"high\"\ndf.loc[(df[\"Insulin\"]<=200),\"Ins_risk\"]=\"usual\"","cfeaee4f":"cat_cols, num_cols, cat_but_car = grab_col_names(df)\nbinary_cols = [col for col in df.columns if df[col].dtype not in [int, float]\n               and df[col].nunique() == 2]","fe49b45c":"for i in binary_cols:\n    df[i] = labelencoder.fit_transform(df[i])","ceaaad24":"ohe_cols = [col for col in df.columns if 10 >= df[col].nunique() > 2]","f4423860":"df=pd.get_dummies(df, columns=ohe_cols, drop_first=True)","35c3e585":"def rare_encoder(dataframe, rare_perc):\n    temp_df = dataframe.copy()\n\n    rare_columns = [col for col in temp_df.columns if temp_df[col].dtypes == 'O'\n                    and (temp_df[col].value_counts() \/ len(temp_df) < rare_perc).any(axis=None)]\n\n    for var in rare_columns:\n        tmp = temp_df[var].value_counts() \/ len(temp_df)\n        rare_labels = tmp[tmp < rare_perc].index\n        temp_df[var] = np.where(temp_df[var].isin(rare_labels), 'Rare', temp_df[var])\n\n    return temp_df","0487acb2":"df=rare_encoder(df, 0.01)","b593ab38":"for col in num_cols:\n    transformer = RobustScaler().fit(df[[col]])\n    df[col] = transformer.transform(df[[col]])","4b967aa8":"y = df[\"Outcome\"]\nX = df.drop([\"Outcome\"], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.20, random_state=1)\n\nlog_model = LogisticRegression().fit(X_train, y_train)","9e6b3d7f":"# tahmin'lerin olu\u015fturulmas\u0131 ve kaydedilmesi\ny_pred = log_model.predict(X_train)","daf05763":"# s\u0131n\u0131f olas\u0131l\u0131klar\u0131\nlog_model.predict_proba(X_train)[0:10]","c9dafd91":"# 1. s\u0131n\u0131fa ait olma olas\u0131l\u0131klar\u0131:\ny_prob = log_model.predict_proba(X_train)[:, 1]","dc1d3ab3":"y_pred = log_model.predict(X_train)\naccuracy_score(y_train, y_pred)","a0357520":"# Di\u011fer metrikler i\u00e7in y_pred\ny_pred = log_model.predict(X_test)","b13aec2f":"# AUC Score i\u00e7in y_prob\ny_prob = log_model.predict_proba(X_test)[:, 1]","61039a57":"# CONFUSION MATRIX\ndef plot_confusion_matrix(y, y_pred):\n    acc = round(accuracy_score(y, y_pred), 2)\n    cm = confusion_matrix(y, y_pred)\n    sns.heatmap(cm, annot=True, fmt=\".0f\")\n    plt.xlabel('y_pred')\n    plt.ylabel('y')\n    plt.title('Accuracy Score: {0}'.format(acc), size=10)\n    plt.show()","79cb1ef6":"plot_confusion_matrix(y_test, y_pred)","39abdffe":"#tahminlerin do\u011fru tahmin edilme oran\u0131\naccuracy_score(y_test, y_pred)","805ff280":"#Pozitif olarak tahmin edilenlerin do\u011fru tahmin edilme oranlar\u0131n\u0131 verir.\nprecision_score(y_test, y_pred)","d303254f":"#Ger\u00e7ekte pozitif olan durumlar\u0131n do\u011fru tahmin edilme oran\u0131n\u0131 verir.\nrecall_score(y_test, y_pred)","497b15b5":"f1_score(y_test, y_pred)","55e91f7e":"roc_auc_score(y_test, y_prob)","4e204d2a":"print(classification_report(y_test, y_pred))","a499bd94":"Bir ki\u015finin glikoz de\u011feri 140'tan y\u00fcksek ise risk grubundad\u0131r.","9d9465b6":"Nadir olan durumlar 0.01 oran\u0131nda g\u00f6rmezden gelinir.","6549e587":"# DIABETES PREDICTION","8e73c9d7":"Veri seti k\u00fc\u00e7\u00fck oldu\u011fundan ayk\u0131r\u0131 de\u011ferlere herhangi bir i\u015flem yap\u0131lmad\u0131.","cdacfd1e":"Hamilelik say\u0131s\u0131n\u0131n artmas\u0131 da \u015feker hastas\u0131 olma ihtimalini art\u0131r\u0131yor","e3bdc65c":"FEATURE ENGINEERING","23d77865":"Encoding i\u015flemleri yap\u0131l\u0131r.","3d7a910d":"G\u00f6rsele bak\u0131ld\u0131\u011f\u0131nda ger\u00e7ekte 0 olan 99 veri varm\u0131\u015f bunun 88'i do\u011fru tahmin edilmi\u015f 11'i ise 1 olarak yanl\u0131\u015f tahmin edilmi\u015f.\nGer\u00e7ekte 1 olan 55 veri varken bunlar\u0131n 36's\u0131 do\u011fru tahmin edilmi\u015f 19'u ise 0 olarak yanl\u0131\u015f tahmin edilmi\u015f; buradan \u00e7\u0131kar\u0131lacak sonu\u00e7 model 0'lar\u0131 tahmin ederken g\u00f6sterdi\u011fi ba\u015far\u0131y\u0131 1'leri tahmin ederken g\u00f6steremiyor olur.","8fa0bef9":"Olu\u015fan bo\u015f de\u011ferler,bo\u015f de\u011ferlerin 3 kom\u015fusuna bak\u0131larak knn imputer ile doldurulur.","ec9c0033":"G\u00f6rsel: https:\/\/jnyh.medium.com\/building-a-machine-learning-classifier-model-for-diabetes-4fca624daed0","850f4716":"V\u00fccut Kitle \u0130ndeksi (BMI)\nBMI de\u011feri 30'dan k\u00fc\u00e7\u00fckse \u015feker hastas\u0131 olma ihtimali d\u00fc\u015f\u00fck ama 30'u ge\u00e7erse y\u00fcksek.","a917e682":"\u0130ns\u00fclin de\u011ferleri de risk durumuna g\u00f6re 3 kategoriye ayr\u0131l\u0131r.","8496e184":"![image.png](attachment:014d44d4-706d-490a-8020-48c1ec403f2e.png)","0634eb85":"Yeni columnlar olu\u015ftu\u011fundan tekrar kategorik-numerik ayr\u0131m\u0131 yap\u0131l\u0131r.","c420b31b":"\u015eeker hastalar\u0131n\u0131n cildi kal\u0131nla\u015f\u0131r.Say\u0131sal de\u011fer oldu\u011fundan ve belli bir metri\u011fe indirgenemedi\u011finden\nbu \u015fekilde b\u0131rak\u0131l\u0131r.","e5087e22":"Bo\u015f de\u011ferleri knn ile doldurmak i\u00e7in \u00f6ncelikle dataframe'in standartla\u015ft\u0131r\u0131lmas\u0131 gerekir. Standartla\u015ft\u0131r\u0131lan de\u011ferler bo\u015f de\u011ferler doldurulduktan sonra tekrar inverse.transform ile eski haline getirilir.\nGer\u00e7ek de\u011ferlere g\u00f6re feaature olu\u015fturmak mant\u0131kl\u0131 olaca\u011f\u0131ndan bu i\u015flem yap\u0131l\u0131r.","bbfd166a":"**Veri Seti Hakk\u0131nda Bilgi:** ABD'deki Arizona Eyaleti'nin en b\u00fcy\u00fck 5. \u015fehri olan Phoenix \u015fehrinde ya\u015fayan 21\nya\u015f ve \u00fczerinde olan Pima Indian kad\u0131nlar\u0131 \u00fczerinde yap\u0131lan diyabet ara\u015ft\u0131rmas\u0131 i\u00e7in kullan\u0131lan verilerdir.\n768 g\u00f6zlem ve 8 say\u0131sal ba\u011f\u0131ms\u0131z de\u011fi\u015fkenden olu\u015fmaktad\u0131r. Hedef de\u011fi\u015fken \"outcome\" olarak belirtilmi\u015f olup;\n1 diyabet test sonucunun pozitif olu\u015funu,0 ise negatif olu\u015funu belirtmektedir.\n\n**De\u011fi\u015fkenler:**\nPregnancies \u2013 Hamilelik say\u0131s\u0131,Glucose \u2013 Glikoz de\u011feri,SkinThickness \u2013 Cilt Kal\u0131nl\u0131\u011f\u0131,Insulin \u2013 2 saatlik serum ins\u00fclini (mu U\/ml)\nBlood Pressure \u2013 Kan Bas\u0131nc\u0131 (K\u00fc\u00e7\u00fck tansiyon) (mm Hg),DiabetesPedigreeFunction\u2013 Aile \u00f6yk\u00fcs\u00fcne dayal\u0131 olarak diyabet olas\u0131l\u0131\u011f\u0131n\u0131 puanlayan bir fonksiyon\nAge \u2013 Ya\u015f (y\u0131l),Outcome\u2013 Hastal\u0131\u011fa sahip (1) ya da de\u011fil (0)\n\n**Ama\u00e7:** \u00d6zellikleri belirtildi\u011finde ki\u015filerin diyabet hastas\u0131 olup olmad\u0131klar\u0131n\u0131 tahmin edebilecek bir makine \u00f6\u011frenmesi\nmodeli geli\u015ftirmek.\n\n**Yararlan\u0131lan kaynak**: https:\/\/bootcamp.veribilimiokulu.com\/egitim\/veri-bilimci-yetistirme-programi\/","1bacacf4":"BloodPressure kan bas\u0131nc\u0131n\u0131n y\u00fcksek olmas\u0131 da etkiliyor","785355e5":"DiabetesPedigreeFunction: aile \u00f6yk\u00fcs\u00fcne dayal\u0131 olarak diyabet olas\u0131l\u0131\u011f\u0131n\u0131 puanlayan bir i\u015flev","a981b8a1":"Modele katmak i\u00e7in standartla\u015ft\u0131rma i\u015flemi yap\u0131L\u0131r veri seti k\u00fc\u00e7\u00fck oldu\u011fundan ve \u00e7ok u\u00e7 bir de\u011fer olmad\u0131\u011f\u0131ndan\nayk\u0131r\u0131 de\u011ferlere herhangi bir i\u015flem yap\u0131lmad\u0131 bu y\u00fczden robust scaler kullan\u0131ld\u0131.","00df5305":"Veri setinde baz\u0131 g\u00f6zlemlerde ins\u00fclin de\u011ferleri 0 olarak girilmi\u015f. Bir ki\u015finin ins\u00fclin de\u011ferinin 0 olmas\u0131 m\u00fcmk\u00fcn de\u011fildir,anla\u015f\u0131lan ins\u00fclin de\u011ferlerine bak\u0131lmayan ki\u015filerin ins\u00fclin de\u011ferleri, s\u0131f\u0131r olarak girilmi\u015f; bunlar nan olarak de\u011fi\u015ftirilir. Ayn\u0131 sorunun oldu\u011fu di\u011fer columnlarda da b\u00f6yle bir de\u011fi\u015fiklik yap\u0131l\u0131r.","996dc1fa":"VER\u0130YE GENEL BAKI\u015e","c1ca63fb":"Zaten aralar\u0131nda bir s\u0131ralama oldu\u011fundan bu \u015fekilde b\u0131rak\u0131l\u0131r.","b389e59f":"EKS\u0130K DE\u011eERLER\u0130N DOLDURULMASI"}}