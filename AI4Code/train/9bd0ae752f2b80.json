{"cell_type":{"79849375":"code","2c815566":"code","93d5bb66":"code","a7d9bef1":"code","e9a25b67":"code","68919bd4":"code","3dc81f74":"code","88c5542a":"code","886eb0ff":"code","b87b986f":"code","3b7bc97b":"code","6868ce85":"code","09eadc3a":"code","63e4490a":"code","a917afc8":"code","5f577dc5":"code","3637b894":"code","1e84da93":"code","59a3fc4a":"code","240f0b0a":"code","ee96a971":"code","79516c21":"code","71cd5838":"code","bdcdd3c7":"code","80a92793":"code","157dedf0":"code","1ae9e5cd":"code","5e1f999d":"code","8110cffd":"code","44fb052d":"code","05365266":"code","4d736b69":"code","ef254916":"code","19a50f7b":"code","ec689076":"code","63c2f2a2":"code","a80a92e9":"code","a6484cb3":"code","0e730023":"code","bbc74a18":"code","393c2dcb":"code","46ee7d22":"code","565e53d8":"code","8e909163":"code","9763666c":"code","7b0dbf45":"markdown","aa832b4a":"markdown","e4e38657":"markdown","d9f89534":"markdown","2105536e":"markdown","42ed9d97":"markdown","a305c992":"markdown","43569ee7":"markdown","597bb6e3":"markdown","7cceeee9":"markdown","44ab7ca9":"markdown","690b5e8e":"markdown","40bc3d16":"markdown"},"source":{"79849375":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set()","2c815566":"df = pd.read_csv(\"..\/input\/bri-data-hackathon-people-analytic\/train.csv\")\ndf.sample(10)","93d5bb66":"df.info()","a7d9bef1":"cols_with_na = df.columns[df.isnull().any()]\n\nnull_df = df[cols_with_na].isnull().sum().rename(\"missing_rows\").to_frame()\nnull_df['percentage'] = round(null_df['missing_rows'] \/ df.shape[0] * 100, 2)\nnull_df.sort_values('missing_rows', ascending=False).style.background_gradient('magma')","e9a25b67":"null_df.shape","68919bd4":"null_df.mean()","3dc81f74":"categorical_df = df.select_dtypes(include=\"object\")\ncategorical_df.sample(5)","88c5542a":"categorical_df.columns","886eb0ff":"for column in categorical_df.columns:\n    unique = categorical_df[column].unique()\n    print(f\"{column} has {len(unique)} unique values, they are: {unique}\\n\")","b87b986f":"def analyze_wrt_bestperformance(column_name):\n    performance_df = df.groupby(column_name)['Best Performance'].mean().multiply(100).sort_values(ascending=False)\n\n    for index in performance_df.index:\n        print(f\"{column_name} {index} best performance percentage is {round(performance_df[index], 2)}%\")\n\ndef visualize_wrt_bestperformance(column_name, width=12):\n    plt.figure(figsize=(width, 8))\n    joblevel_viz = sns.countplot(df[column_name], hue=df['Best Performance'])\n    joblevel_viz.set_title(f\"{column_name} Best Performance Count\")\n\n    for axes in joblevel_viz.patches:\n        value = axes.get_height()\n        text = f\"{value} ({round(value \/ df.job_level.shape[0] * 100, 2)}%)\"\n        x = axes.get_x() + axes.get_width() \/ 2\n        joblevel_viz.annotate(text, (x, value), ha='center', va='center', fontsize=8, xytext=(0, 5), textcoords='offset points')\n\n    plt.legend([\"Not Best\", \"Best\"])\n    return plt.show()","3b7bc97b":"best_performance_df = df['Best Performance'].value_counts()\nbest_performance_df.index = ['Not Best', 'Best']\n\nplt.axis(\"equal\")\nplt.pie(\n    best_performance_df.values,\n    labels=best_performance_df.index,\n    autopct='%.2f%%',\n    explode=[0, 0.3],\n    radius=1.5,\n)\n\nplt.legend()\nplt.show()","6868ce85":"analyze_wrt_bestperformance('job_level')","09eadc3a":"visualize_wrt_bestperformance('job_level')","63e4490a":"analyze_wrt_bestperformance('person_level')","a917afc8":"visualize_wrt_bestperformance('person_level', width=20)","5f577dc5":"analyze_wrt_bestperformance('Employee_type')","3637b894":"visualize_wrt_bestperformance('Employee_type')","1e84da93":"analyze_wrt_bestperformance('Employee_status')","59a3fc4a":"visualize_wrt_bestperformance('Employee_status')","240f0b0a":"analyze_wrt_bestperformance('gender')","ee96a971":"visualize_wrt_bestperformance('gender')","79516c21":"analyze_wrt_bestperformance('marital_status_maried(Y\/N)')","71cd5838":"visualize_wrt_bestperformance('marital_status_maried(Y\/N)')","bdcdd3c7":"analyze_wrt_bestperformance('Education_level')","80a92793":"visualize_wrt_bestperformance('Education_level', width=20)","157dedf0":"plt.figure(figsize=(12, 8))\njoblevel_viz = sns.countplot(df[df.Education_level == 'level_1']['Education_level'], hue=df['job_level'])\n# joblevel_viz.set_title(f\"{column_name} Best Performance Count\")\n\nfor axes in joblevel_viz.patches:\n    value = axes.get_height()\n    text = f\"{value} ({round(value \/ df.job_level.shape[0] * 100, 2)}%)\"\n    x = axes.get_x() + axes.get_width() \/ 2\n    joblevel_viz.annotate(text, (x, value), ha='center', va='center', fontsize=8, xytext=(0, 5), textcoords='offset points')\n\nplt.legend(loc=\"upper right\")\nplt.show()","1ae9e5cd":"numerical_df = df.select_dtypes(exclude=\"object\")\nnumerical_df.sample(10)","5e1f999d":"numerical_df.describe().T","8110cffd":"age = numerical_df.age.unique()\nage.sort()\nprint(age)","44fb052d":"def count_ideal_graduated(year_born):\n    year_slta = year_born + 7 + 6 + 3 + 3\n    year_d1 = year_slta + 1\n    year_d3 = year_slta + 3\n    year_strata1 = year_slta + 4\n    year_strata2 = year_strata1 + 2\n\n    print(f\"Usia SLTA: {year_slta}\")\n    print(f\"Usia D1: {year_d1}\")\n    print(f\"Usia D3: {year_d3}\")\n    print(f\"Usia S1: {year_strata1}\")\n    print(f\"Usia S2: {year_strata2}\")","05365266":"count_ideal_graduated(1992)","4d736b69":"df[df.age == 2017][['age', 'Education_level', 'year_graduated']]","ef254916":"numerical_df.corr()['Best Performance'].sort_values(ascending=False).to_frame().style.background_gradient('magma')","19a50f7b":"plt.figure(figsize=(20, 20))\nsns.heatmap(numerical_df.drop('Best Performance', axis=1).corr(), annot=True, square=True)","ec689076":"from sklearn.linear_model import LinearRegression as linreg\n\nlr = linreg(normalize=True)","63c2f2a2":"def inspect_multicol(first_col, second_col):\n    local_df = numerical_df[[first_col, second_col]].dropna()\n    corr_value = local_df.corr()[first_col][second_col]\n    print(f\"Correlation value: {round(corr_value, 2)}\")\n\n    plt.figure(figsize=(12, 6))\n    \n    plt.scatter(local_df[first_col], local_df[second_col])\n\n    lr_x = local_df[first_col].values.reshape(-1, 1)\n    lr_y = local_df[second_col].values.reshape(-1, 1)\n    lr.fit(lr_x, lr_y)\n    line = lr.predict(lr_x)\n    lr_x, line = lr_x.reshape(-1), line.reshape(-1)\n    plt.plot(lr_x, line, color='r')\n\n    plt.xlabel(first_col)\n    plt.ylabel(second_col)\n\n    plt.title(f\"{first_col} vs {second_col}\")\n    return plt.show()","a80a92e9":"inspect_multicol('job_duration_in_current_job_level', 'job_duration_in_current_person_level')","a6484cb3":"first_col, second_col = 'job_duration_in_current_job_level', 'Best Performance'\n\nplt.figure(figsize=(15, 6))\nplt.scatter(df[first_col], df[second_col])\nplt.show()","0e730023":"first_col, second_col = 'job_duration_in_current_person_level', 'Best Performance'\n\nplt.figure(figsize=(15, 6))\nplt.scatter(df[first_col], df[second_col])\nplt.show()","bbc74a18":"inspect_multicol('job_duration_as_permanent_worker', 'job_duration_from_training')","393c2dcb":"inspect_multicol('job_rotation', 'branch_rotation')","46ee7d22":"inspect_multicol('job_duration_from_training', 'branch_rotation')","565e53d8":"inspect_multicol('job_duration_from_training', 'job_rotation')","8e909163":"\ndf[['number_of_dependences', 'number_of_dependences (male)', 'number_of_dependences (female)', 'marital_status_maried(Y\/N)']].sample(10)","9763666c":"df[['Best Performance',\t'Avg_achievement_%', 'Last_achievement_%', 'Achievement_above_100%_during3quartal']].sample(10)","7b0dbf45":"### person_level","aa832b4a":"### Employee_type","e4e38657":"### job_level","d9f89534":"### Education_level","2105536e":"I want to check every single of categorical columns relation with target values","42ed9d97":"### Employee_status","a305c992":"### gender","43569ee7":"## Inspecting Numerical Columns","597bb6e3":"### marital_status_maried(Y\/N)","7cceeee9":"### Inspecting redundant predictors suspect\n\ndefinisi redundant = predictor yg memberikan informasi sama","44ab7ca9":"## Inpecting Categorical Columns","690b5e8e":"### Best Performance","40bc3d16":"# Exploratory Data Analysis"}}