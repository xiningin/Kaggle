{"cell_type":{"20ef1383":"code","6cf0f9a0":"code","ff8ea242":"code","67128fb8":"code","b1b0af1a":"code","2e466502":"code","4fa8cb2c":"code","61a6e03e":"code","0701cc32":"code","700eeed8":"code","3c9628fb":"code","be0079dd":"code","3709ec56":"code","5033f745":"code","c89f36c3":"markdown","99515152":"markdown","3e657431":"markdown","1ec882d4":"markdown","df5f4a31":"markdown","450236a9":"markdown","013af795":"markdown","9a0e224c":"markdown","748fc068":"markdown","d94531a4":"markdown","6b1980b9":"markdown","b2ad9e75":"markdown","545a9da0":"markdown","8562cdd4":"markdown","03ea1aea":"markdown","20e042f2":"markdown","8adc2204":"markdown","817b1d5d":"markdown"},"source":{"20ef1383":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os","6cf0f9a0":"path_to_data = '..\/input\/dog-breed-identification'\ndf = pd.read_csv(os.path.join(path_to_data,'labels.csv'))","ff8ea242":"# Build a dataframe with the number of instances in each class\nbreed_distrib = df['breed'].value_counts()\nbreed_distrib.columns = ['breed', 'number']\n\n# Horizontal bar plot\nplt.figure(figsize=(30,100))\nsns.set(style=\"whitegrid\")\nsns.set(font_scale=5)\nax = sns.barplot(breed_distrib,breed_distrib.index)\nplt.show()","67128fb8":"sns.set(font_scale=2)\nn_breeds = len(breed_distrib.index)\nprint('Number of breeds : ', n_breeds)\nfor i in range(n_breeds):\n    br = breed_distrib.index[i]\n    path = df.loc[df['breed'] == br].iloc[0].id + '.jpg'\n    path = os.path.join(path_to_data,'train',path)\n    img = plt.imread(path)\n    plt.axis('off')\n    plt.imshow(img)\n    plt.title(br)\n    plt.show() ","b1b0af1a":"from keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.preprocessing import image\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions","2e466502":"vgg16_weights = '..\/input\/vgg16\/vgg16_weights_tf_dim_ordering_tf_kernels.h5'\nbase_model = VGG16(weights=vgg16_weights)","4fa8cb2c":"base_model.summary()","61a6e03e":"model = Model(inputs=base_model.input, outputs=base_model.get_layer('fc1').output)\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy')","0701cc32":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\n\ndf['breed'] = LabelEncoder().fit_transform(df['breed'])\ny = df['breed'] \nonehot = OneHotEncoder()\ny = onehot.fit_transform(np.expand_dims(y, axis=1)).toarray()\n\n#Generator\ndef generator(df):\n    path_train = '..\/input\/dog-breed-identification\/train'\n    while 1:\n        for i in range(int(df.shape[0])):\n            img_path = os.path.join(path_train, df.iloc[i]['id']+ '.jpg')\n    \n            img = image.load_img(img_path, target_size=(224, 224))\n            x = image.img_to_array(img)\n            x = np.expand_dims(x, axis=0)\n            x = preprocess_input(x)\n            y = df.iloc[i]['breed']\n            y = onehot.transform(y).toarray()\n            #print(img.shape,np.array([y]).shape)\n            yield (x,y)\n                    \ngen = generator(df)","700eeed8":"X_pred = model.predict_generator(gen,steps=10221, verbose=1)","3c9628fb":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_pred, df.iloc[:10221]['breed'])","be0079dd":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators=500)\nclf.fit(X_train, y_train)","3709ec56":"y_pred = clf.predict(X_test)","5033f745":"from sklearn.metrics import accuracy_score\n\nacc = accuracy_score(y_test, y_pred)\n\nprint(\"Incredible accuracy of : \",acc)","c89f36c3":"**Good news**, the distribution is relatively balanced. The less represented breed contrains 65 images and the more represented contains 110 images.\n\n**Bad news**, there isn't a lot of images per class. In this context we need to be careful to overfitting. ","99515152":"# Features Extraction\n\nMost Computer Vision task are solved by using a very large and complicated Neural Network which require millons and millons of parameters to train. This can't be achieved by simple laptop, it requires one or more GPU and a lot of memory. Since I didn't have access to such materials I decided to use a pre-trained model to extract high level features for this task.\n\n## Load pre-trained model\n\nA lot of pre-trained model are available on most machine learning frameworks including PyTorch and Keras. \n\nHere I decided to use Keras and the VGG16 model trained on ImageNet dataset.\n\n![](https:\/\/s3.ap-south-1.amazonaws.com\/techleer\/309.jpg)\n","3e657431":"## Extract features","1ec882d4":"# Final Predictions\n\nWith these new features, we can now run a simple classifier.","df5f4a31":"Since we do not want to perform fine-tuning because it is very computationally expensive, we will cut vgg16 at its first fully connected layer called 'fc1'.","450236a9":"## Image exploration","013af795":"Let's see the distribution of the different dog breed. \n\nFor this I used pandas which comes with a lot of fancy functions for data exploration.","9a0e224c":"## Evaluation","748fc068":"To experiment with this technique, I chose the **Dog Breed Identification challenge**. But a lot of Image Classification task could be adress in the same way.\n\nFirst let's see what this dataset is all about.","d94531a4":"## Generator\n\nTo avoid loading all images in memory at once, I used a generator. It enables to load only a batch of images.","6b1980b9":"## Loading data","b2ad9e75":"# Introduction\n\nThis notebook aims to present a very simple technique to perform image classification. Comparing to most of trending techniques, this one do not need a lot of materials, and computational power. So it can be run on almost any laptop. You will see that a ***70% accuracy*** can be reached very easily on the ***dog breed identification*** challenge.\n\nThis notebook is organized as follow : \n1. First some data exploration\n2. Features extraction\n3. Final predictions","545a9da0":"VGG16 model is a very deep architecture which achieved great performance on ImageNet. \n\nBut we don't want to perform fine-tuning because it required a lot of computational power. Instead we will cut the model at the first fully connected layer. \n\nWith this new simplified model, we will pass the data throught the network. The ouput is then higher level and abstract features which should be useful to perform classification task.","8562cdd4":"Now let's see what these images look like. And because I don't know myself every dog breed,  let's plot one image for each one ;)","03ea1aea":"## Breed distribution","20e042f2":"# Data exploration","8adc2204":"With this simple technique we reached around ***70 % of accuracy***.  It is a good score since there are ***120 different breeds***. ","817b1d5d":"Most of the images are centered on the dog but some of them are surrounded by their master or other objects which harden the task."}}