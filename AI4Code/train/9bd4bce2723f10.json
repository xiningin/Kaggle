{"cell_type":{"18fe2d8f":"code","6d00e56b":"code","89b4bafc":"code","1e46a5eb":"code","df737f0c":"code","39c84b6f":"code","8af91dce":"code","88e0b261":"code","5e371301":"code","75804a31":"code","75dd36ed":"code","ea9a3982":"code","cda95c92":"code","41227057":"markdown","bd1ce2e2":"markdown","d086a25e":"markdown"},"source":{"18fe2d8f":"!pip install -q efficientnet","6d00e56b":"import tensorflow as tf\nimport tensorflow.keras.layers as layers\nimport tensorflow.keras.layers.experimental.preprocessing as preprocessing\nfrom kaggle_datasets import KaggleDatasets\nimport efficientnet.tfkeras as efficient\nimport numpy as np\nimport math, os, re, warnings, random\n\nprint(\"Tensorflow version \" + tf.__version__)","89b4bafc":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","1e46a5eb":"GCS_DS_PATH = KaggleDatasets().get_gcs_path() # you can list the bucket with \"!gsutil ls $GCS_DS_PATH\"","df737f0c":"IMAGE_SIZE = [512, 512] # at this size, a GPU will run out of memory. Use the TPU\nHEIGHT=IMAGE_SIZE[0]\nWIDTH=IMAGE_SIZE[1]\nEPOCHS = 30\nCHANNELS = 3\n\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nAUG_SIZE=2\n\n\nNUM_TRAINING_IMAGES = 12753\nNUM_TEST_IMAGES = 7382\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE","39c84b6f":"AUTO = tf.data.experimental.AUTOTUNE\n\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\n\ndef get_validation_dataset():\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-512x512\/val\/*.tfrec'), labeled=True, ordered=False)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-512x512\/test\/*.tfrec'), labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n\n\ndef data_augment(image, label):\n    crop_size = tf.random.uniform([], int(HEIGHT*.8), HEIGHT, dtype=tf.int32)\n        \n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    image = tf.image.random_saturation(image, lower=0.7, upper=1.5)\n    image = tf.image.random_contrast(image, lower=0.9, upper=1.5)\n    image = tf.image.random_brightness(image, max_delta=.2)\n#    image = tf.image.adjust_gamma(image, gamma=.6)\n\n    image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])\n    image = tf.image.resize(image, size=[HEIGHT, WIDTH])\n\n    return image, label\n\ndef get_training_dataset():\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-512x512\/train\/*.tfrec'), labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(100000)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\n\ntraining_dataset = get_training_dataset()\nvalidation_dataset = get_validation_dataset()","8af91dce":"from keras.callbacks import EarlyStopping\nearly_stopping = EarlyStopping(monitor='val_loss', min_delta=0.01, patience=7, verbose=1) # \uc870\uae30\uc885\ub8cc","88e0b261":"\nwith strategy.scope():    \n    pt_model = efficient.EfficientNetB7(\n        input_shape=(512, 512, 3),\n        weights='imagenet',\n        include_top=False\n    )\n    \"\"\"pt_model= tf.keras.applications.InceptionV3(\n    include_top=False, weights='imagenet', input_tensor=None,\n    input_shape=[*IMAGE_SIZE, 3]\n    )\"\"\"\n    \n    model = tf.keras.Sequential([\n        pt_model,\n        layers.GlobalAveragePooling2D(),\n        layers.Dense(104, activation='softmax'),\n    ])\n        \n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=0.0007),\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy']\n    )\n\nmodel.summary()\n\nhistorical = model.fit(training_dataset, \n          steps_per_epoch=STEPS_PER_EPOCH,\n          epochs=EPOCHS, \n          validation_data=validation_dataset, callbacks=[early_stopping])","5e371301":"import pandas as pd\nhistory_frame = pd.DataFrame(historical.history)\nhistory_frame.loc[1:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[1:, ['sparse_categorical_accuracy','val_sparse_categorical_accuracy']].plot();","75804a31":"\"\"\"with strategy.scope():    \n    for i in range(1,4):\n        model.layers[-i].trainable=True\n    \n        \n    model.compile(\n        optimizer=tf.keras.optimizers.SGD(lr=0.03,momentum=0.9,decay=0.001),\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy']\n    )\n\nhistorical = model.fit(training_dataset, \n          steps_per_epoch=STEPS_PER_EPOCH,\n          epochs=EPOCHS, \n          validation_data=validation_dataset, callbacks=[early_stopping])\n          \"\"\"","75dd36ed":"new_early_stopping = EarlyStopping(monitor='val_loss', min_delta=0.001, patience=7, verbose=1) # \uc870\uae30\uc885\ub8cc\n\nwith strategy.scope():    \n    model.trainable=True\n\n\n    model.compile(\n        optimizer=tf.keras.optimizers.SGD(lr=0.02,momentum=0.9,decay=0.001),\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy']\n    )\n\nhistorical = model.fit(training_dataset, \n          epochs=EPOCHS,\n          steps_per_epoch=STEPS_PER_EPOCH,\n          validation_data=validation_dataset, callbacks=[new_early_stopping])","ea9a3982":"import pandas as pd\nhistory_frame = pd.DataFrame(historical.history)\nhistory_frame.loc[1:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[1:, ['sparse_categorical_accuracy','val_sparse_categorical_accuracy']].plot();","cda95c92":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","41227057":"# Compute your predictions on the test set!\n\nThis will create a file that can be submitted to the competition.","bd1ce2e2":"#### Build a model on TPU (or GPU, or CPU...) with Tensorflow 2.4.1!","d086a25e":"# Load my data\n\nThis data is loaded from Kaggle and automatically sharded to maximize parallelization."}}