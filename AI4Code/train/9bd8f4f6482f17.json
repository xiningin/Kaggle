{"cell_type":{"03fe964f":"code","aba754c0":"code","dc0664dc":"code","e5087c9c":"code","74354782":"code","0beb8a24":"code","01c4d8b7":"code","f501569e":"code","82fba827":"code","af7a956b":"code","b0d934e1":"code","4a47c6b6":"code","d20ef0da":"code","bae57f3f":"code","a4964f41":"code","5276cf25":"code","0158cb49":"code","c77c1d03":"code","7455151d":"code","52dab72f":"code","41c7d98c":"code","49134f4c":"code","57b5f7ef":"code","5579a20b":"code","5732ee8b":"code","dddeae00":"code","2ff2b9e3":"code","485e468b":"code","31ddbae1":"code","3c38533c":"code","cd831880":"code","62d123de":"code","cda74481":"code","1585aa22":"code","742bcc7f":"code","e2976291":"code","80e69ba3":"code","c172e190":"code","4402bba1":"code","fea49888":"code","575e2967":"code","18309970":"markdown","a36c0a9b":"markdown","4312faf0":"markdown","e10cc41f":"markdown","aa860305":"markdown","afa5810b":"markdown","cd7b87ec":"markdown","e25d59af":"markdown","99e1adbe":"markdown","0c452c37":"markdown","4a275c9e":"markdown","2dea3cc0":"markdown","cb3cd721":"markdown","0b895216":"markdown","370e0693":"markdown","2d822018":"markdown","e06234a7":"markdown","45d42dce":"markdown","690e5284":"markdown","e09d01fb":"markdown","efe44522":"markdown","3bf679c9":"markdown","05ade03e":"markdown","5afd9b61":"markdown","2a37e8b4":"markdown"},"source":{"03fe964f":"import os\nimport torch\nimport torchvision\nfrom torch.utils.data import random_split\nimport torchvision.models as models\nimport torch.nn as nn\nimport torch.nn.functional as F","aba754c0":"data_dir  = '\/kaggle\/input\/garbage-classification\/Garbage classification\/Garbage classification'\n\nclasses = os.listdir(data_dir)\nprint(classes)","dc0664dc":"from torchvision.datasets import ImageFolder\nimport torchvision.transforms as transforms\n\ntransformations = transforms.Compose([transforms.Resize((256, 256)), transforms.ToTensor()])\n\ndataset = ImageFolder(data_dir, transform = transformations)\n\ndataset","e5087c9c":"import matplotlib.pyplot as plt\n%matplotlib inline\n\ndef show_sample(img, label):\n    print(\"Label:\", dataset.classes[label], \"(Class No: \"+ str(label) + \")\")\n    plt.imshow(img.permute(1, 2, 0))","74354782":"img, label = dataset[12]\nshow_sample(img, label)","0beb8a24":"img, label = dataset[7]\nshow_sample(img, label)","01c4d8b7":"img, label = dataset[2]\nshow_sample(img, label)","f501569e":"random_seed = 42\ntorch.manual_seed(random_seed)","82fba827":"train_ds, val_ds, test_ds = random_split(dataset, [1593, 176, 758])\nlen(train_ds), len(val_ds), len(test_ds)","af7a956b":"from torch.utils.data.dataloader import DataLoader\nbatch_size = 32","b0d934e1":"train_dl = DataLoader(train_ds, batch_size, shuffle = True, num_workers = 4, pin_memory = True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers = 4, pin_memory = True)","4a47c6b6":"from torchvision.utils import make_grid\n\ndef show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow = 16).permute(1, 2, 0))\n        break","d20ef0da":"show_batch(train_dl)","bae57f3f":"show_batch(val_dl)","a4964f41":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    \n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch {}: train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch+1, result['train_loss'], result['val_loss'], result['val_acc']))","5276cf25":"class ResNet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        \n        # Use a pretrained model\n        self.network = models.resnet50(pretrained=True)\n    \n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, len(dataset.classes))\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n\nmodel = ResNet()","0158cb49":"def get_default_device():\n    \n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","c77c1d03":"device = get_default_device()\ndevice","7455151d":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device)","52dab72f":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        \n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n            \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","41c7d98c":"model = to_device(ResNet(), device)","49134f4c":"evaluate(model, val_dl)","57b5f7ef":"num_epochs = 8\nopt_func = torch.optim.Adam\nlr = 5.5e-5\n\nhistory = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","5579a20b":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');\n\nplot_accuracies(history)","5732ee8b":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');\n\nplot_losses(history)","dddeae00":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    prob, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return dataset.classes[preds[0].item()]","2ff2b9e3":"img, label = test_ds[17]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","485e468b":"img, label = test_ds[23]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","31ddbae1":"img, label = test_ds[51]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","3c38533c":"img, label = test_ds[4]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","cd831880":"img, label = test_ds[19]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","62d123de":"img, label = test_ds[5]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","cda74481":"import urllib.request\nurllib.request.urlretrieve(\"https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Fengage.vic.gov.au%2Fapplication%2Ffiles%2F1415%2F0596%2F9236%2FDSC_0026.JPG&f=1&nofb=1\", \"plastic.jpg\")\n\nurllib.request.urlretrieve(\"https:\/\/external-content.duckduckgo.com\/iu\/?u=http%3A%2F%2Fi.ebayimg.com%2Fimages%2Fi%2F291536274730-0-1%2Fs-l1000.jpg&f=1&nofb=1\", \"cardboard.jpg\")    \n\nurllib.request.urlretrieve(\"https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.2F0uH6BguQMctAYEJ-s-1gHaHb%26pid%3DApi&f=1\", \"cans.jpg\") \n\nurllib.request.urlretrieve(\"https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Ftinytrashcan.com%2Fwp-content%2Fuploads%2F2018%2F08%2Ftiny-trash-can-bulk-wine-bottle.jpg&f=1&nofb=1\", \"wine-trash.jpg\")\n\nurllib.request.urlretrieve(\"http:\/\/ourauckland.aucklandcouncil.govt.nz\/media\/7418\/38-94320.jpg\", \"paper-trash.jpg\")\n\nurllib.request.urlretrieve(\"https:\/\/programmingaltanai.files.wordpress.com\/2020\/09\/1.jpg?w=616\", \"mixed-trash.jpg\")","1585aa22":"loaded_model = model","742bcc7f":"from PIL import Image\nfrom pathlib import Path\n\ndef predict_external_image(image_name):\n    image = Image.open(Path('.\/' + image_name))\n\n    example_image = transformations(image)\n    plt.imshow(example_image.permute(1, 2, 0))\n    print(\"The image resembles\", predict_image(example_image, loaded_model) + \".\")","e2976291":"predict_external_image('cans.jpg')","80e69ba3":"predict_external_image('cardboard.jpg')","c172e190":"predict_external_image('plastic.jpg')","4402bba1":"predict_external_image('wine-trash.jpg')","fea49888":"predict_external_image('paper-trash.jpg')","575e2967":"predict_external_image('mixed-trash.jpg')","18309970":"# Conclusion:\n\nOur model is able to classify garbage with **95% accuracy**!","a36c0a9b":"# Visualizing Predictions:","4312faf0":"Transformations to the dataset and import it for use.","e10cc41f":"Import the libraries especially torchvision","aa860305":"# Model Base:","afa5810b":"training and validation dataloaders using `DataLoader`.","cd7b87ec":"visualize batches:","e25d59af":"Let us load the model. You can load an external pre-trained model too!","99e1adbe":"This function takes the image's name and prints the predictions:","0c452c37":"## Porting to GPU:","4a275c9e":"Print classes present in the dataset:","2dea3cc0":"## Transformations:","cb3cd721":"This is the function for fitting the model.","0b895216":"Let's create the model base:","370e0693":"# Training the Model:","2d822018":"# Garbage Segrigation ( Object Classification ) on PyTorch\n\nSegrigate waste inot either of these classes 'trash', 'cardboard', 'glass', 'paper', 'plastic', 'metal'","e06234a7":"Let's now test with external images.\n\nI'll use `urllib` for downloading external images.","45d42dce":"ResNet50 for classifying images:","690e5284":"Helper function to see the image and its corresponding label:","e09d01fb":"Let's start training the model:","efe44522":"Let us see the model's predictions on the test dataset:","3bf679c9":"# Loading and Splitting Data:","05ade03e":"# Predicting External Images:","5afd9b61":"Using GPU for computation","2a37e8b4":"We'll split the dataset into training, validation and test sets:"}}