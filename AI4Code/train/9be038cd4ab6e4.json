{"cell_type":{"02072cdb":"code","bb8f56c2":"code","c8aada29":"code","93c354cb":"code","4759ef58":"code","3c1615eb":"code","a78a5c1f":"code","e9555df3":"code","74859780":"code","56ff438e":"code","562eeabd":"code","d71a81c5":"code","379140d4":"code","c8fca69c":"code","562313b4":"code","4e8adbc9":"code","de3e79b5":"code","df0b1d7f":"code","c0d95a09":"code","ab22654f":"code","a2b8ba86":"code","de5b8979":"code","35b8b9ea":"code","5d7641d3":"code","4564ba76":"code","4c918b1a":"code","99f63c00":"code","faf1f1aa":"code","f1bb5837":"code","b2a8abf9":"code","7c84703e":"code","74c75855":"code","1df7c75a":"code","3b05e845":"code","dee4c7b2":"code","58b914bd":"code","88fa7705":"code","ee814135":"code","17041287":"code","3e47e358":"code","f12313ea":"code","9d41f209":"code","0a0e36f2":"code","9fbefca4":"code","8e919aff":"code","a50b4894":"code","60ac5047":"code","dd7e7c46":"code","f9676d90":"code","ba658997":"code","75aa8b03":"code","b5f4e73f":"code","a1760f2c":"code","9ec1cea7":"code","94c0b3b9":"code","c6c18dfa":"code","3cd0eddf":"code","778e8216":"code","f74a62dd":"code","a648b25b":"code","0e05027d":"code","0bf050ee":"code","e4c89c60":"code","2fa048f9":"code","7e96a666":"code","789916aa":"code","40db858c":"code","c0e000b3":"code","3566b922":"code","aecfb358":"code","f924cf7a":"code","9e02e5d5":"code","c1cc1c5d":"code","6c7d1764":"code","a9f2bb47":"code","5d878da8":"code","7a762939":"code","505d3479":"code","d39598de":"code","65511259":"code","441c3dcc":"code","ec790f55":"code","851d1cc5":"code","09bb93a7":"code","9be5ed0a":"code","e917632a":"code","ce7e6a66":"code","7a22c688":"code","7c0ec499":"code","82fa6b15":"code","ec41445c":"code","70c1cc66":"code","7b096625":"code","eacf8c4c":"code","110b00c8":"code","27167ab8":"code","fb8cf92a":"code","01e2dc77":"code","9b4c7dda":"markdown","1e7a37b4":"markdown","27acd982":"markdown","fbad9b14":"markdown","9cc23d06":"markdown","79d3a15e":"markdown","5b4490ec":"markdown"},"source":{"02072cdb":"# importing libraries\n\nimport datetime\nimport os\nimport sys\nimport random\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom plotly import tools, subplots\nimport plotly.offline as py\nfrom plotly.offline import plot\npy.init_notebook_mode(connected = True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.io as pio\n\nfrom datetime import datetime","bb8f56c2":"confirmed_global_url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\nconfirmed_global = pd.read_csv(confirmed_global_url)\n\ndeaths_global_url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\ndeaths_global = pd.read_csv(deaths_global_url)\n\nrecovered_global_url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"\nrecovered_global = pd.read_csv(recovered_global_url)\n\nconfirmed_us_url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_US.csv\"\nconfirmed_us = pd.read_csv(confirmed_us_url)\n\ndeaths_us_url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_US.csv\"\ndeaths_us = pd.read_csv(deaths_us_url)","c8aada29":"confirmed_global","93c354cb":"# Renaming the columns\nconfirmed_global.rename(columns = {\n    'Country\/Region':'Country_Region',\n    'Province\/State': 'Province_State',\n    'Longitude': 'Long',\n    'Latitude': 'Lat'\n}, inplace = True)\n\nrecovered_global.rename(columns = {\n    'Country\/Region':'Country_Region',\n    'Province\/State': 'Province_State',\n    'Longitude': 'Long',\n    'Latitude': 'Lat'\n}, inplace = True)\n\ndeaths_global.rename(columns = {\n    'Country\/Region':'Country_Region',\n    'Province\/State': 'Province_State',\n    'Longitude': 'Long',\n    'Latitude': 'Lat'\n}, inplace = True)","4759ef58":"# calculating the NaN values\nprint(confirmed_global.isnull().sum())\nprint(recovered_global.isnull().sum())\nprint(deaths_global.isnull().sum())","3c1615eb":"# replacing Nan values to string values 'nan'\nconfirmed_global[\"Province_State\"].fillna(\"nan\", inplace = True)\nrecovered_global[\"Province_State\"].fillna(\"nan\", inplace = True)\ndeaths_global[\"Province_State\"].fillna(\"nan\", inplace = True)","a78a5c1f":"confirmed_global.Country_Region.unique()","e9555df3":"confirmed_global = confirmed_global[~confirmed_global[\"Province_State\"].str.match('Diamond Princess')]\nconfirmed_global = confirmed_global[~confirmed_global[\"Country_Region\"].str.match('Diamond Princess')]\n\ndeaths_global = deaths_global[~deaths_global[\"Province_State\"].str.match('Diamond Princess')]\ndeaths_global = deaths_global[~deaths_global[\"Country_Region\"].str.match('Diamond Princess')]\n\nrecovered_global = recovered_global[~recovered_global[\"Province_State\"].str.match('Diamond Princess')]\nrecovered_global = recovered_global[~recovered_global[\"Country_Region\"].str.match('Diamond Princess')]","74859780":"# declaring function for converting Date formats\ndef convert_date(data):\n    try:\n        data.columns = list(data.columns[:4]) + [datetime.strptime(dt, \"%m\/%d\/%y\").date().strftime(\"%Y-%m-%d\") for dt in data.columns[4:]]\n    except:\n        data.columns = list(data.columns[:4]) + [datetime.strptime(dt, \"%m\/%d\/%Y\").date().strftime(\"%Y-%m-%d\") for dt in data.columns[4:]]","56ff438e":"# calling function to change date formats\nconvert_date(confirmed_global)\nconvert_date(recovered_global)\nconvert_date(deaths_global)","562eeabd":"confirmed_global","d71a81c5":"confirmed_global_df = confirmed_global.melt(id_vars = ['Country_Region','Province_State','Lat','Long'],\n                                            value_vars = confirmed_global.columns[4:],\n                                            var_name = 'Date',\n                                            value_name = 'Confirmed_Cases')","379140d4":"deaths_global_df = deaths_global.melt(id_vars = ['Country_Region','Province_State','Lat','Long'],\n                                            value_vars = confirmed_global.columns[4:],\n                                            var_name = 'Date',\n                                            value_name = 'Deaths')","c8fca69c":"recovered_global_df = recovered_global.melt(id_vars = ['Country_Region','Province_State','Lat','Long'],\n                                            value_vars = confirmed_global.columns[4:],\n                                            var_name = 'Date',\n                                            value_name = 'Recovered')","562313b4":"recovered_global_df","4e8adbc9":"train = confirmed_global_df.merge(deaths_global_df, on = ['Country_Region', 'Province_State','Date'])\ntrain = train.merge(recovered_global_df, on = ['Country_Region', 'Province_State','Date'])","de3e79b5":"global_dataset = train.groupby('Date')['Confirmed_Cases','Recovered','Deaths'].sum().reset_index()","df0b1d7f":"global_dataset['Daily_Rise'] = global_dataset['Confirmed_Cases'] - global_dataset['Confirmed_Cases'].shift(1)\nglobal_dataset['Mortality_Rate'] = global_dataset['Deaths']\/ global_dataset['Confirmed_Cases']\nglobal_dataset","c0d95a09":"global_dataset_df = pd.melt(global_dataset,\n                           id_vars = ['Date'],\n                           value_vars = ['Confirmed_Cases','Recovered', 'Mortality_Rate', 'Deaths', 'Daily_Rise'])\nglobal_dataset_df","ab22654f":"visual_confirmed = global_dataset_df[global_dataset_df[\"variable\"].str.match('Confirmed_Cases')]\nvisual_deaths = global_dataset_df[global_dataset_df[\"variable\"].str.match('Deaths')]\nvisual_recovered = global_dataset_df[global_dataset_df[\"variable\"].str.match('Recovered')]\nvisual_mortality = global_dataset_df[global_dataset_df[\"variable\"].str.match('Mortality_Rate')]\nvisual_daily_rise = global_dataset_df[global_dataset_df[\"variable\"].str.match('Daily_Rise')]","a2b8ba86":"visual_confirmed","de5b8979":"visual_deaths","35b8b9ea":"visual_recovered","5d7641d3":"visual_mortality","4564ba76":"visual_daily_rise","4c918b1a":"fig = px.line(global_dataset_df,\n             x = 'Date',\n             y = 'value',\n             color = 'variable',\n             title = 'Global Confirmed\/ Deaths\/ REcovered\/ cases with Mortality and Daily Rises')\nfig.show()","99f63c00":"fig = px.line(global_dataset_df,\n             x = 'Date',\n             y = 'value',\n             color = 'variable',\n             title = 'Global Confirmed\/ Deaths\/ REcovered\/ cases with Mortality and Daily Rises (Logrithmic)',\n             log_y = True)\nfig.show()","faf1f1aa":"fig = px.line(visual_confirmed,\n             x = 'Date',\n             y = 'value',\n             color = 'variable',\n             title = 'Confirmed cases over time(Globally)')\nfig.show()","f1bb5837":"fig = px.line(visual_deaths,\n             x = 'Date',\n             y = 'value',\n             color = 'variable',\n             title = 'Deaths reported over time(Globally)')\nfig.show()","b2a8abf9":"fig = px.line(visual_mortality,\n             x = 'Date',\n             y = 'value',\n             color = 'variable',\n             title = 'Change in Mortality Rate over time')\nfig.show()","7c84703e":"fig = px.line(visual_daily_rise,\n             x = 'Date',\n             y = 'value',\n             color = 'variable',\n             title = 'Daily rise of the infected people(Globally)')\nfig.show()","74c75855":"country_wise = train.groupby(['Country_Region','Province_State','Date'])['Confirmed_Cases','Recovered','Deaths'].sum().reset_index()","1df7c75a":"country_wise","3b05e845":"country_wise = pd.melt(country_wise,\n                           id_vars = ['Date','Country_Region','Province_State'],\n                           value_vars = ['Confirmed_Cases','Recovered', 'Deaths'])\n","dee4c7b2":"country_wise","58b914bd":"country_wise_visual_confirmed = country_wise[country_wise[\"variable\"].str.match('Confirmed_Cases')]\ncountry_wise_visual_deaths = country_wise[country_wise[\"variable\"].str.match('Deaths')]\ncountry_wise_visual_recovered = country_wise[country_wise[\"variable\"].str.match('Recovered')]","88fa7705":"country_wise","ee814135":"fig = px.line(country_wise_visual_confirmed,\n             x = 'Date',\n             y = 'value',\n             color = 'Country_Region',\n             title = 'Confirmed cases')\nfig.show()","17041287":"fig = px.line(country_wise_visual_deaths,\n             x = 'Date',\n             y = 'value',\n             color = 'Country_Region',\n             title = 'People that are missed')\nfig.show()","3e47e358":"fig = px.line(country_wise_visual_recovered,\n             x = 'Date',\n             y = 'value',\n             color = 'Country_Region',\n             title = 'Recovered cases')\nfig.show()","f12313ea":"current_date = country_wise_visual_confirmed['Date'][country_wise_visual_confirmed.index[-1]]","9d41f209":"# finding out total deaths, confirmed cases and recovered cases \ncountry_wise_total_confirmed = country_wise_visual_confirmed[country_wise_visual_confirmed[\"Date\"].str.match(current_date)]\ncountry_wise_total_deaths = country_wise_visual_deaths[country_wise_visual_deaths[\"Date\"].str.match(current_date)]\ncountry_wise_total_recovered = country_wise_visual_recovered[country_wise_visual_recovered[\"Date\"].str.match(current_date)]","0a0e36f2":"country_wise_total_deaths","9fbefca4":"country_wise_total_recovered","8e919aff":"country_wise_total_confirmed","a50b4894":"worst_hit_countries_30 = country_wise_total_confirmed.sort_values(by = 'value', ascending = False).head(30)\n\nplt.figure(figsize = (12, 10))\nsns.barplot(data = worst_hit_countries_30, y = 'Country_Region', x = 'value', hue = 'Country_Region', dodge = False)\nplt.legend(loc = 'lower right')\nplt.xlabel('Total Confirmed reported')\nplt.ylabel('Countries')\nplt.title('Worst 30 countries hit by coronavirus(Confirmed)')\nplt.show()","60ac5047":"worst_hit_countries_30 = country_wise_total_deaths.sort_values(by = 'value', ascending = False).head(30)\n\nplt.figure(figsize = (12, 10))\nsns.barplot(data = worst_hit_countries_30, y = 'Country_Region', x = 'value', hue = 'Country_Region', dodge = False)\nplt.legend(loc = 'lower right')\nplt.xlabel('Most number of people missed')\nplt.ylabel('Countries')\nplt.title('Worst 30 countries hit by coronavirus(Deaths)')\nplt.show()","dd7e7c46":"recovering_countries_30 = country_wise_total_recovered.sort_values(by = 'value', ascending = False).head(30)\n\nfig = px.bar(recovering_countries_30,\n             x='value', y='Country_Region', color='Country_Region', barmode='relative',\n             title=f'Most Recovered', text='value', height=1500, width = 950, orientation='h')\nfig.show()","f9676d90":"locations = confirmed_global[confirmed_global[\"Province_State\"].str.match('nan')].reset_index()\nlocations = locations[['Country_Region','Lat','Long']]\nlocations","ba658997":"country_wise_total_confirmed = country_wise_total_confirmed.groupby(['Country_Region','Date'])[['value']].sum().reset_index()\ncountry_wise_total_deaths = country_wise_total_deaths.groupby(['Country_Region','Date'])[['value']].sum().reset_index()\ncountry_wise_total_recovered = country_wise_total_recovered.groupby(['Country_Region','Date'])[['value']].sum().reset_index()","75aa8b03":"total_countries = country_wise_total_confirmed.merge(country_wise_total_deaths, on = ['Country_Region','Date'])\ntotal_countries = total_countries.merge(country_wise_total_recovered, on = ['Country_Region','Date'])","b5f4e73f":"total_countries","a1760f2c":"country_wise_total_confirmed","9ec1cea7":"total_countries.rename(columns = {\n    'value_x': 'Confirmed_Cases',\n    'value_y': 'Deaths',\n    'value' : 'Recovered'}, inplace = True)\n\n#total_countries.drop(['variable_x','variable_y','variable'], axis = 1, inplace = True)","94c0b3b9":"fig = px.choropleth(total_countries,\n                   locations = 'Country_Region',\n                   locationmode='country names',\n                   color = 'Confirmed_Cases',\n                   hover_name = 'Country_Region',\n                   color_continuous_scale=\"Viridis\",\n                   scope = 'world',\n                   hover_data = ['Confirmed_Cases','Deaths','Recovered'],\n                   title='Covid19 cases worldwide')\n\nfig.update_geos(fitbounds=\"locations\", visible=True)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\nfig.show()","c6c18dfa":"fig = px.choropleth(total_countries,\n                   locations = 'Country_Region',\n                   locationmode='country names',\n                   color = 'Confirmed_Cases',\n                   hover_name = 'Country_Region',\n                   color_continuous_scale=\"Viridis\",\n                   scope = 'north america',\n                   hover_data = ['Confirmed_Cases','Deaths','Recovered'],\n                   title='Covid19 cases worldwide')\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n","3cd0eddf":"country_names = []\nfor i in (total_countries[\"Country_Region\"]):\n    country_names.append(i)","778e8216":"country_names.remove('Holy See')\ncountry_names.remove('Kosovo')\ncountry_names.remove('MS Zaandam')\ncountry_names.remove('Timor-Leste')\ncountry_names.remove('US')\ncountry_names.remove('West Bank and Gaza')\ncountry_names.remove(\"Western Sahara\")","f74a62dd":"country_names = [sub.replace('Burma', 'Myanmar') for sub in country_names] \ncountry_names = [sub.replace('Congo (Brazzaville)', 'Congo') for sub in country_names] \ncountry_names = [sub.replace('Congo (Kinshasa)', 'Democratic Republic of the Congo') for sub in country_names] \ncountry_names = [sub.replace('Cote d\\'Ivoire', 'C\u00f4te d\\'Ivoire') for sub in country_names] \ncountry_names = [sub.replace('Korea, South', 'South Korea') for sub in country_names] \ncountry_names = [sub.replace('Taiwan*', 'Taiwan') for sub in country_names]","a648b25b":"!pip install pycountry\n!pip install pycountry-convert","0e05027d":"from pycountry_convert import country_alpha2_to_continent_code, country_name_to_country_alpha2\n\ncontinents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU': 'Europe'\n}\ny = [continents[country_alpha2_to_continent_code(country_name_to_country_alpha2(country))] for country in country_names]\n","0bf050ee":"#continent and countries\ncontinents_country = pd.DataFrame(list(zip(country_names, y)), \n               columns =['Country_Region', 'Continent'])","e4c89c60":"continents_country['Country_Region'] = continents_country['Country_Region'].replace({'Congo':'Congo (Brazzaville)',\n                                                                                  'Democratic Republic of the Congo':'Congo (Kinshasa)',\n                                                                                  'C\u00f4te d\\'Ivoire': 'Cote d\\'Ivoire',\n                                                                                  'South Korea': 'Korea, South',\n                                                                                  'Myanmar': 'Burma',\n                                                                                  'Taiwan': 'Taiwan*'})","2fa048f9":"total_countries_and_cont = total_countries.merge(continents_country, on = ['Country_Region'])","7e96a666":"african_countries  = total_countries_and_cont[total_countries_and_cont[\"Continent\"].str.match('Africa')].reset_index()\nasian_countries  = total_countries_and_cont[total_countries_and_cont[\"Continent\"].str.match('Asia')].reset_index()\nnorth_american_countries  = total_countries_and_cont[total_countries_and_cont[\"Continent\"].str.match('North America')].reset_index()\neuropean_countries  = total_countries_and_cont[total_countries_and_cont[\"Continent\"].str.match('Europe')].reset_index()\naustralian_countries  = total_countries_and_cont[total_countries_and_cont[\"Continent\"].str.match('Australia')].reset_index()\nsouth_american_countries  = total_countries_and_cont[total_countries_and_cont[\"Continent\"].str.match('South America')].reset_index()\n\n\nfig = px.choropleth(african_countries,\n                   locations = 'Country_Region',\n                   locationmode='country names',\n                   color = 'Confirmed_Cases',\n                   hover_name = 'Country_Region',\n                   color_continuous_scale=\"Viridis\",\n                   scope = 'africa',\n                   hover_data = ['Confirmed_Cases','Deaths','Recovered'],\n                   title='Covid19 cases worldwide')\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","789916aa":"fig = px.choropleth(asian_countries,\n                   locations = 'Country_Region',\n                   locationmode='country names',\n                   color = 'Confirmed_Cases',\n                   hover_name = 'Country_Region',\n                   color_continuous_scale=\"Viridis\",\n                   scope = 'asia',\n                   hover_data = ['Confirmed_Cases','Deaths','Recovered'],\n                   title='Covid19 cases worldwide')\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","40db858c":"fig = px.choropleth(south_american_countries,\n                   locations = 'Country_Region',\n                   locationmode='country names',\n                   color = 'Confirmed_Cases',\n                   hover_name = 'Country_Region',\n                   color_continuous_scale=\"Viridis\",\n                   scope = 'south america',\n                   hover_data = ['Confirmed_Cases','Deaths','Recovered'],\n                   title='Covid19 cases worldwide')\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","c0e000b3":"fig = px.choropleth(australian_countries,\n                   locations = 'Country_Region',\n                   locationmode='country names',\n                   color = 'Confirmed_Cases',\n                   hover_name = 'Country_Region',\n                   color_continuous_scale=\"Viridis\",\n                   hover_data = ['Confirmed_Cases','Deaths','Recovered'],\n                   title='Covid19 cases worldwide')\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","3566b922":"fig = px.choropleth(european_countries,\n                   locations = 'Country_Region',\n                   locationmode='country names',\n                   color = 'Confirmed_Cases',\n                   hover_name = 'Country_Region',\n                   color_continuous_scale=\"Viridis\",\n                   scope = 'europe',\n                   hover_data = ['Confirmed_Cases','Deaths','Recovered'],\n                   title='Covid19 cases worldwide')\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","aecfb358":"confirmed_us.drop(['UID','iso2','iso3','Admin2','Country_Region','code3','Combined_Key'],axis = 1, inplace = True)","f924cf7a":"deaths_us.drop(['UID','iso2','iso3','Admin2','Country_Region','code3','Combined_Key','Population'], axis = 1, inplace = True)","9e02e5d5":"# declaring function for converting Date formats\ndef convert_date_us(data):\n    try:\n        data.columns = list(data.columns[:4]) + [datetime.strptime(dt, \"%m\/%d\/%y\").date().strftime(\"%Y-%m-%d\") for dt in data.columns[4:]]\n    except:\n        data.columns = list(data.columns[:4]) + [datetime.strptime(dt, \"%m\/%d\/%Y\").date().strftime(\"%Y-%m-%d\") for dt in data.columns[4:]]","c1cc1c5d":"convert_date_us(deaths_us)\nconvert_date_us(confirmed_us)","6c7d1764":"confirmed_us","a9f2bb47":"from urllib.request import urlopen\nimport json\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)","5d878da8":"confirmed_us_df = confirmed_us.melt(id_vars = ['Province_State','FIPS','Lat','Long_'],\n                                            value_vars = confirmed_us.columns[4:],\n                                            var_name = 'Date',\n                                            value_name = 'Confirmed_Cases')","7a762939":"deaths_us_df = deaths_us.melt(id_vars = ['Province_State','FIPS','Lat','Long_'],\n                                            value_vars = deaths_us.columns[4:],\n                                            var_name = 'Date',\n                                            value_name = 'Confirmed_Cases')","505d3479":"confirmed_us_df = confirmed_us_df.groupby(['Province_State','FIPS','Date'])['Confirmed_Cases'].sum().reset_index()","d39598de":"confirmed_us_df.info()","65511259":"confirmed_us_df['FIPS'] = confirmed_us_df['FIPS'].astype(int)","441c3dcc":"x = confirmed_us_df.groupby(['Province_State','FIPS'])['Confirmed_Cases'].sum().reset_index()\nx","ec790f55":"# due to missing data (FIPS) from few counties the map won't highlight all the regions info \nfig = px.choropleth(x,\n                    geojson=counties, \n                    locations='FIPS', color='Confirmed_Cases',\n                    color_continuous_scale=\"Viridis\",\n                    range_color=(confirmed_us_df['Confirmed_Cases'].min(), confirmed_us_df['Confirmed_Cases'].max()),\n                    hover_name = 'Province_State',\n                    scope = 'usa')\n\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","851d1cc5":"india = confirmed_global[confirmed_global['Country_Region'].str.match('India')]\nindia","09bb93a7":"india_1 = india.melt(id_vars = ['Country_Region'],\n                                            value_vars = confirmed_global.columns[4:],\n                                            var_name = 'Date',\n                                            value_name = 'Confirmed_Cases')\nindia_1","9be5ed0a":"india_2 = india_1.iloc[:, 2:3].values\nindia_2","e917632a":"last = len(india_2)\ntrain_selection_value = int(last\/100 * 70)\ntest_selection_value = last - train_selection_value","ce7e6a66":"train_selection_value","7a22c688":"test_selection_value","7c0ec499":"india_train_df = india_1[:train_selection_value]\nindia_test_df = india_1[train_selection_value-1:]","82fa6b15":"india_train_df","ec41445c":"india_train = india_1.iloc[:, 2:3].values\nindia_train = india_train[:train_selection_value]\n\nindia_test = india_1.iloc[:, 2:3].values\nindia_test = india_test[train_selection_value-1:]","70c1cc66":"from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0,1))\nindia_train_scaled = sc.fit_transform(india_train)\nindia_test_scaled = sc.fit_transform(india_test)\n\nX_train = []\ny_train = []\nfor i in range(25, train_selection_value-1):\n    X_train.append(india_train_scaled[i-25: i, 0])\n    y_train.append(india_train_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)\n\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_train","7b096625":"# Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout","eacf8c4c":"# Initialising the RNN\nregressor = Sequential()\n\n# Adding the first LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\n# Adding a second LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a third LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a fourth LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, epochs = 100, batch_size = 5)\n","110b00c8":"real = india_test_df.iloc[:, 2:3].values","27167ab8":"dataset_total = pd.concat((india_train_df['Confirmed_Cases'], india_test_df['Confirmed_Cases']), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(india_test_df) - 25:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)","fb8cf92a":"X_test = []\n\nfor i in range(25, len(inputs)):\n    X_test.append(inputs[i-25:i, 0])\n    \nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted = regressor.predict(X_test)\npredicted = sc.inverse_transform(predicted)","01e2dc77":"# Visualising the results\nplt.figure(figsize = (25,8))\nplt.plot(real, color = 'red', label = 'Real')\nplt.plot(predicted, color = 'blue', label = 'Predicted')\nplt.title('Prediction')\nplt.xlabel('Time')\nplt.ylabel('confirmed')\nplt.legend()\nplt.show()","9b4c7dda":"## Loading Data","1e7a37b4":"## Responsive Choropleth Maps","27acd982":"## How good is India doing dealing with the recent condition or say how fast is the virus spreading\n\n<p> I have used the RNN algorithm to predict the confirmed cases growth.","fbad9b14":"## Bar Plot Representation","9cc23d06":"## Visualization","79d3a15e":"## USA","5b4490ec":"## Data Modification and Cleaning"}}