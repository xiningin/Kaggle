{"cell_type":{"4a3f2a76":"code","593f4445":"code","a79b40ab":"code","a8952767":"code","db7abeb1":"code","8420686b":"code","75441617":"code","42c2015f":"code","9913453f":"code","6e13bb2f":"code","c0e7120c":"code","2ee76686":"code","3fe70215":"code","0e71e790":"markdown"},"source":{"4a3f2a76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy.cluster.hierarchy import dendrogram, linkage, fcluster\nfrom sklearn.cluster import KMeans\nfrom sklearn import preprocessing\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (15,12)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","593f4445":"data = pd.read_csv(\"\/kaggle\/input\/cluster-data\/beverage_r.csv\", sep=\";\", index_col=\"numb.obs\")\ndata.head()\n","a79b40ab":"link = linkage(data, \"ward\", \"euclidean\")","a8952767":"dn = dendrogram(link)","db7abeb1":"data[\"cluster\"] = fcluster(link, 3, criterion=\"distance\")\ndata.groupby(\"cluster\").sum()\n# 1 - \u0441\u0447\u0438\u0442\u0430\u044e\u0442 \u0434\u0438\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u0430\u043f\u0438\u0442\u043a\u0438 \u043c\u0435\u043d\u0435\u0435 \u0432\u0440\u0435\u0434\u043d\u044b\u043c\u0438\n# 2 - \u043f\u0435\u043f\u0441\u0438\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u0438\n# 3 - \u043b\u044e\u0431\u0438\u0442\u0435\u043b\u0438 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u044f, \u0440\u0430\u0432\u043d\u043e\u0434\u0443\u0448\u043d\u044b \u043a \u0434\u0438\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0432\u0435\u0440\u0441\u0438\u044f\u043c","8420686b":"scaler = preprocessing.MinMaxScaler()","75441617":"data = pd.read_excel(\"\/kaggle\/input\/lab-52-dataset\/mobile.xlsx\")\ndata","42c2015f":"scaled_data = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)\nscaled_data","9913453f":"clusterizators = []\nfor x in range(2, 11):\n    kmean = KMeans(n_clusters=x)\n    kmean.fit(scaled_data)\n    clusterizators.append(kmean)\ninertias = [x.inertia_ for x in clusterizators]\nplt.plot(range(2, 11), inertias)","6e13bb2f":"clusterizator = clusterizators[3]\ncentroids = scaler.inverse_transform(clusterizator.cluster_centers_)\ncentroids\n# 1 \u0430\u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0431\u0438\u0447\u0438\n# 2 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \n# 3 \u0441\u043c\u0441\u043e\u0447\u043d\u0438\u043a\u0438\n# 4 \u043b\u044e\u0431\u0438\u0442\u0435\u043b\u0438 \u0442\u0440\u0435\u043f\u0430\u0442\u044c\u0441\u044f \u0447\u0430\u0441\u0430\u043c\u0438, \u043c\u043d\u043e\u0433\u043e \u0434\u0435\u043d\u044f\u043a \u0442\u0440\u0430\u0442\u044f\u0442 \u043d\u0430 \u0441\u0432\u044f\u0437\u044c, \u043f\u0440\u0435\u0437\u0438\u0440\u0430\u044e\u0442 \u0441\u043c\u0441\u043a\u0438\n# 5 \u0441\u043c\u0441\u043e\u0447\u043d\u0438\u043a\u0438 x2","c0e7120c":"from mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure(figsize = (15,12))\nax = fig.add_subplot(111, projection=\"3d\")\nax.scatter(data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e SMS \u0437\u0430 \u043c\u0435\u0441\u044f\u0446\"], data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0432\u043e\u043d\u043a\u043e\u0432\"], data[\"\u0421\u0440\u0435\u0434\u043d\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0440\u0430\u0441\u0445\u043e\u0434\"], c=clusterizator.labels_, alpha=0.2, zorder=-1, lw=0)\nax.scatter(centroids[:, 0], centroids[:, 1], centroids[:, 2], c=\"red\", s=150, alpha=1)","2ee76686":"clusterizator = clusterizators[1]\ncentroids = scaler.inverse_transform(clusterizator.cluster_centers_)\ncentroids","3fe70215":"fig = plt.figure(figsize = (15,12))\nax = fig.add_subplot(111, projection=\"3d\")\nax.scatter(data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e SMS \u0437\u0430 \u043c\u0435\u0441\u044f\u0446\"], data[\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0432\u043e\u043d\u043a\u043e\u0432\"], data[\"\u0421\u0440\u0435\u0434\u043d\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0440\u0430\u0441\u0445\u043e\u0434\"], c=clusterizator.labels_, alpha=0.2)\nax.scatter(centroids[:, 0], centroids[:, 1], centroids[:, 2], c=\"red\", s=150, alpha=1)","0e71e790":"# **K-means**"}}