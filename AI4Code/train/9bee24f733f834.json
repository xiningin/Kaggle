{"cell_type":{"9f1fe648":"code","71fcea94":"code","2c093e71":"code","d0833bcb":"code","ca36f4f2":"code","a7bcdd92":"code","2a7d7a72":"code","9c276a36":"code","52f50b71":"code","e19dd781":"code","9b68e6df":"code","6afd8b69":"code","54911fbc":"code","36261ebe":"code","b5d5737b":"code","3661546a":"code","fa91824e":"code","73e4709f":"code","0eab5a2c":"code","8ad7033b":"code","3ee5b702":"code","3afe1e6a":"code","69f8c896":"code","2b97c114":"code","b6a47830":"code","fb208e10":"code","7b6f01f5":"code","d1366da5":"code","167a5e97":"code","1adeb2ac":"code","0560c8a7":"code","afd733af":"code","e7398a0f":"code","397c09cb":"code","342cf2f6":"code","d24962d7":"code","674053a3":"code","2134f466":"code","e163dec3":"code","a5203c65":"code","8c086d58":"code","76660883":"code","239ae55f":"code","3caacdb2":"code","d599672d":"code","b5cde5cb":"code","b30131de":"code","79c84cf6":"code","31e6a797":"code","d976d271":"code","2af8b597":"code","939d0877":"code","4f6805b4":"code","ebddc9fd":"code","2eec6903":"code","575308f5":"code","80825e19":"code","a0cdc1fa":"code","2961be6e":"code","2753958e":"code","5752ac61":"code","fecf3687":"code","c420eacd":"code","7e7f5bd6":"code","0c8e8f7c":"code","4f095dd4":"code","c91f0ad4":"code","95df7f61":"code","2d406919":"code","590fd4b6":"code","584c05cc":"code","5d6c6384":"code","b264f0b4":"code","5ec8c6bc":"code","c8e2476d":"code","4c777893":"code","082ae22a":"code","d1075df1":"code","e437d909":"code","a502c575":"code","1de4415a":"code","5841d28b":"code","b8631a81":"code","c518483e":"code","b0fbf6b4":"code","66662709":"code","2c8259db":"code","e29ab7ac":"code","4bad6e55":"code","e4d5d985":"code","e10978c7":"code","ac997dbf":"code","0a4de7c2":"code","4ceef7ee":"code","a16d389a":"code","c072db82":"code","17203367":"code","3d393247":"code","3392e404":"code","a7e41fec":"code","2fcf3f62":"code","c20e0320":"code","1c9f3244":"code","23921cbc":"code","3f3f92f5":"code","f7d653ce":"code","2d2cffbc":"markdown","13f96389":"markdown","622ec30e":"markdown","bd64f9f4":"markdown","c978836f":"markdown","d962e486":"markdown","5793c5ab":"markdown","8922fd42":"markdown","77af824f":"markdown","e99ceb00":"markdown","9365e8b9":"markdown","434d8ac6":"markdown","3efe17f4":"markdown","66c9294a":"markdown","5cbdb4cf":"markdown","90c9ba2f":"markdown","fe504f31":"markdown","5fdd7f1e":"markdown","87a790b7":"markdown","bc21b8e2":"markdown","30a6f9e5":"markdown","2e5237ef":"markdown","b75d1bdf":"markdown","77140fad":"markdown","7dd58007":"markdown","cf1d10e2":"markdown","3388f575":"markdown","6f3df10c":"markdown","bbff6d76":"markdown","19b2ffc2":"markdown","8f274eba":"markdown","490397fe":"markdown","9942f462":"markdown","49d0a611":"markdown","0207343a":"markdown","af989852":"markdown","d8028fbc":"markdown","53827c1d":"markdown","55f54116":"markdown","717e8a66":"markdown","f0e7701d":"markdown","af14a3cc":"markdown","8f1621b2":"markdown","06b7bcf8":"markdown","c0005c45":"markdown","a45c79f4":"markdown","b16e8c14":"markdown","4038b1b2":"markdown","5d908754":"markdown","1c5d4ed8":"markdown","df3ae53e":"markdown","5864fdcf":"markdown","7031f287":"markdown","abe740c3":"markdown","cc83ee1e":"markdown","36d607da":"markdown","9b2f4b9e":"markdown","dd60a2e7":"markdown","16405b66":"markdown","df233f57":"markdown","0ae11646":"markdown","41417c9d":"markdown","c01c7934":"markdown","11a2a601":"markdown","81b24a5e":"markdown","ff4bbf50":"markdown","0588a1de":"markdown","ce2eddf4":"markdown","5eedb373":"markdown","fd738ae5":"markdown","1773be7a":"markdown"},"source":{"9f1fe648":"import os\nimport re\nimport math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom scipy import stats\nfrom matplotlib import pyplot as plt","71fcea94":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import Normalizer","2c093e71":"from sklearn.dummy import DummyClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier","d0833bcb":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom xgboost import XGBClassifier","ca36f4f2":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score","a7bcdd92":"np.warnings.filterwarnings('ignore')\n\nsns.set_style(\"whitegrid\")\nsns.set_palette([\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"])","2a7d7a72":"INPUT_DIR = \"..\/input\"\nTRAIN_CSV = os.path.join(INPUT_DIR, \"train.csv\")\nTEST_CSV = os.path.join(INPUT_DIR, \"test.csv\")","9c276a36":"# Columns name in order of appearance\nID_COLUMNS = [\"PassengerId\"]\nFEATURE_COLUMNS = [\"Pclass\", \"Name\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Ticket\", \"Fare\", \"Cabin\", \"Embarked\"]\nTARGET_COLUMNS = [\"Survived\"]\n\nTRAIN_COLUMNS = ID_COLUMNS + FEATURE_COLUMNS + TARGET_COLUMNS\nTEST_COLUMNS = ID_COLUMNS + FEATURE_COLUMNS","52f50b71":"TRAIN_DATA = pd.read_csv(TRAIN_CSV, usecols = TRAIN_COLUMNS, index_col = ID_COLUMNS)\nTEST_DATA = pd.read_csv(TEST_CSV, usecols = TEST_COLUMNS, index_col = ID_COLUMNS)\n\nALL_DATA = pd.concat([TRAIN_DATA[FEATURE_COLUMNS], TEST_DATA[FEATURE_COLUMNS]])","e19dd781":"TRAIN_COUNT = TRAIN_DATA.shape[0]\nTEST_COUNT = TEST_DATA.shape[0]\nALL_COUNT = TRAIN_COUNT + TEST_COUNT\n\nprint(\"{:,d} total passengers | {:,d} passengers tagged ({:,.0%}) | {:,d} passengers untagged ({:,.0%})\".format(\n    ALL_COUNT, TRAIN_COUNT, TRAIN_COUNT \/ ALL_COUNT, TEST_COUNT, TEST_COUNT \/ ALL_COUNT\n))","9b68e6df":"TRAIN_DATA.head()","6afd8b69":"TRAIN_DATA.dtypes","54911fbc":"def plot_missing_values(data):\n    missing_values = data.isnull().sum().to_frame(\"Count\")\n    missing_values = missing_values[missing_values[\"Count\"] > 0]\n    missing_values = missing_values.sort_values(by = \"Count\", ascending = False)\n    \n    plt.figure(figsize = (15, 10))\n    d = sns.barplot(x = missing_values.index, y = missing_values[\"Count\"])\n    \n    total = len(data)\n    for p in d.patches:\n        y = p.get_height()\n        x = p.get_x()\n        \n        d.text(x + p.get_width() \/ 2, y, \"{:.1%}\".format(y \/ total), va = \"bottom\", ha = \"center\") \n    \n    plt.title(\"Missing Values By Feature\")\n    plt.xlabel(\"Feature\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\n\nplot_missing_values(ALL_DATA)","36261ebe":"ALL_DATA[ALL_DATA[\"Fare\"].isnull()]","b5d5737b":"def impute_missing_fares(data):\n    missing_fare_rows = data[data[\"Fare\"].isnull()]\n    \n    for index, row in missing_fare_rows.iterrows():\n        similars = data[(data[\"Pclass\"] == row[\"Pclass\"]) &\n                        (data[\"SibSp\"]  + data[\"Parch\"] == row[\"SibSp\"] + row[\"Parch\"]) &\n                        (data[\"Embarked\"] == row[\"Embarked\"])]\n        data.loc[index, \"Fare\"] = similars[\"Fare\"].mean()\n    \n    return data\n\nALL_DATA = impute_missing_fares(ALL_DATA)","3661546a":"AGE_MISSING_COUNT = ALL_DATA[\"Age\"].isnull().sum()\n\nprint(\"{:,d} total passengers > {:,d} missing age values ({:,.0%})\".format(\n    ALL_COUNT, AGE_MISSING_COUNT, AGE_MISSING_COUNT \/ ALL_COUNT\n))","fa91824e":"def plot_age_and_sex_distribution(data, subtitle, axis):\n    copy = data.copy()\n    copy[\"All\"] = \"\"\n    \n    sns.violinplot(\n        hue = \"Sex\",\n        y = \"Age\",\n        x = \"All\",\n        data = copy,\n        scale = \"width\",\n        inner = \"quartile\",\n        split = True,\n        ax = axis\n    )\n    axis.set_xlabel(\"\")\n    axis.set_title(\"Age Distribution ({:s})\".format(subtitle))","73e4709f":"def plot_age_imputed_dist(data):\n    fig, ax = plt.subplots(3, 2, figsize = (15, 15))\n    plot_age_and_sex_distribution(data, \"Original\", ax[0][0])\n    plot_age_and_sex_distribution(data.fillna(data[\"Age\"].mean()), \"Impute With Mean\", ax[0][1])\n    plot_age_and_sex_distribution(data.fillna(stats.gmean(data[\"Age\"].dropna())), \"Impute With GMean\", ax[1][0])\n    plot_age_and_sex_distribution(data.fillna(stats.hmean(data[\"Age\"].dropna())), \"Impute With HMean\", ax[1][1])\n    plot_age_and_sex_distribution(data.fillna(data[\"Age\"].mode()[0]), \"Impute With Mode\", ax[2][0])\n    plot_age_and_sex_distribution(data.fillna(data[\"Age\"].median()), \"Impute With Median\", ax[2][1])\n    sns.despine(trim = True)\n    plt.tight_layout()\n    plt.show()\n\nplot_age_imputed_dist(ALL_DATA)","0eab5a2c":"def impute_missing_ages_with_similars(data):\n    missing_age_rows = data[data[\"Age\"].isnull()]\n    \n    for index, row in missing_age_rows.iterrows():\n        similars = data[(data[\"SibSp\"] == row[\"SibSp\"]) &\n                        (data[\"Parch\"] == row[\"Parch\"] &\n                        (data[\"Pclass\"] == row[\"Pclass\"]))]\n        data.loc[index, \"Age\"] = similars[\"Age\"].mean()\n        \n    return data","8ad7033b":"def plot_age_imputed_dist(data):\n    fig, ax = plt.subplots(1, 2, figsize = (15, 5))\n    plot_age_and_sex_distribution(data, \"Original\", ax[0])\n    \n    filled = impute_missing_ages_with_similars(data.copy())\n    plot_age_and_sex_distribution(filled, \"Impute With Similars Mean\", ax[1])\n    sns.despine(trim = True)\n    plt.tight_layout()\n    plt.show()\n    \nplot_age_imputed_dist(ALL_DATA)","3ee5b702":"def impute_missing_ages_with_ml(data):\n    target_cols = [\"Age\"]\n    feature_cols = [\"SibSp\", \"Parch\", \"Pclass\"]\n    \n    missing_values = data[data[\"Age\"].isnull()]\n    present_values = data[~data[\"Age\"].isnull()]\n    model = ElasticNet()\n    model.fit(pd.get_dummies(present_values[feature_cols]), present_values[target_cols])\n    \n    missing_values[\"Age\"] = model.predict(missing_values[feature_cols])\n\n    return pd.merge(missing_values, present_values, how = \"outer\")","3afe1e6a":"def plot_age_imputed_dist(data):\n    fig, ax = plt.subplots(1, 2, figsize = (15, 5))\n    plot_age_and_sex_distribution(data, \"Original\", ax[0])\n    \n    filled = impute_missing_ages_with_ml(data.copy())\n    plot_age_and_sex_distribution(filled, \"Impute With ML (ElasticNet)\", ax[1])\n    sns.despine(trim = True)\n    plt.tight_layout()\n    plt.show()\n    \nplot_age_imputed_dist(ALL_DATA)","69f8c896":"ALL_DATA = impute_missing_ages_with_ml(ALL_DATA)","2b97c114":"ALL_DATA[\"Name\"].head()","b6a47830":"def get_title(name):\n    return name.split(\",\")[1].split(\".\")[0].strip().replace(\"the\", \"\").strip()","fb208e10":"def create_title_feature(data):\n    data[\"Title\"] = data[\"Name\"].apply(lambda name : get_title(name))\n    \n    return data\n\nALL_DATA = create_title_feature(ALL_DATA)","7b6f01f5":"ALL_DATA[\"Title\"].unique()","d1366da5":"def plot_title_dist(data):\n    plt.figure(figsize = (15, 10))\n    sns.countplot(\n        data[\"Title\"],\n        order = data[\"Title\"].value_counts().index\n    )\n    plt.xticks(rotation = 45)\n    plt.title(\"Title Distribution\")\n    plt.show()\n    \nplot_title_dist(ALL_DATA)","167a5e97":"ALL_DATA[\"Title\"].unique()","1adeb2ac":"SOCIAL_GROUP_BY_TITLES = {\n    (\"Major\", \"Col\", \"Capt\") : \"Officer\",\n    (\"Lady\", \"Don\", \"Jonkheer\", \"Countess\", \"Dona\") : \"Royal\",\n    (\"Dr\",) : \"Academic\",\n    (\"Rev\",) : \"Clergy\",\n}\n\nSOCIAL_GROUP_BY_TITLE = {}\nfor titles, social_group in SOCIAL_GROUP_BY_TITLES.items():\n    for title in titles:\n        SOCIAL_GROUP_BY_TITLE[title] = social_group","0560c8a7":"def create_socialGroup_feature(data):\n    data[\"SocialGroup\"] = data[\"Title\"].map(SOCIAL_GROUP_BY_TITLE)\n    \n    return data\n    \nALL_DATA = create_socialGroup_feature(ALL_DATA)","afd733af":"ALL_DATA[\"SocialGroup\"].unique()","e7398a0f":"def plot_socialGroup_dist(data):\n    plt.figure(figsize = (15, 10))\n    sns.countplot(\n        data[\"SocialGroup\"],\n        order = data[\"SocialGroup\"].value_counts().index\n    )\n    plt.xticks(rotation = 45)\n    plt.title(\"SocialGroup Distribution\")\n    plt.show()\n    \nplot_socialGroup_dist(ALL_DATA)","397c09cb":"ALL_DATA[\"Cabin\"].unique()","342cf2f6":"def create_deck_feature(data):\n    data[\"Deck\"] = data[\"Cabin\"].str[0]\n    \n    return data\n\nALL_DATA = create_deck_feature(ALL_DATA)","d24962d7":"ALL_DATA[\"Deck\"].unique()","674053a3":"def plot_deck_dist(data):\n    plt.figure(figsize = (15, 10))\n    sns.countplot(\n        data[\"Deck\"],\n        order = data[\"Deck\"].value_counts().index\n    )\n    plt.xticks(rotation = 45)\n    plt.title(\"Deck Assigned Distribution\")\n    plt.show()\n    \nplot_deck_dist(ALL_DATA)","2134f466":"ALL_DATA[\"Cabin\"].unique()","e163dec3":"def create_cabinCount_feature(data):\n    data[\"CabinCount\"] = data[\"Cabin\"].str.split().str.len()\n    data[\"CabinCount\"] = data[\"CabinCount\"].fillna(0).astype(int)\n    \n    return data\n\nALL_DATA = create_cabinCount_feature(ALL_DATA)","a5203c65":"ALL_DATA[\"CabinCount\"].unique()","8c086d58":"def plot_cabinCount_dist(data):\n    plt.figure(figsize = (15, 10))\n    sns.countplot(\n        data[\"CabinCount\"],\n        order = data[\"CabinCount\"].value_counts().index\n    )\n    plt.xticks(rotation = 45)\n    plt.title(\"CabinCount Distribution\")\n    plt.show()\n    \nplot_cabinCount_dist(ALL_DATA)","76660883":"ALL_DATA.columns","239ae55f":"def create_familySize_feature(data):\n    data[\"FamilySize\"] = data[\"SibSp\"] + data[\"Parch\"] + 1\n    \n    return data\n\nALL_DATA = create_familySize_feature(ALL_DATA)","3caacdb2":"ALL_DATA[\"FamilySize\"].unique()","d599672d":"def plot_familySize_dist(data):\n    plt.figure(figsize = (15, 10))\n    sns.countplot(\n        data[\"FamilySize\"],\n        order = data[\"FamilySize\"].value_counts().index\n    )\n    plt.xticks(rotation = 45)\n    plt.title(\"FamilySize Distribution\")\n    plt.show()\n    \nplot_familySize_dist(ALL_DATA)","b5cde5cb":"ALL_DATA.columns","b30131de":"def create_isAlone_feature(data):\n    data[\"TravelingAlone\"] = (data[\"SibSp\"] + data[\"Parch\"] == 0) * 1\n    \n    return data\n\nALL_DATA = create_isAlone_feature(ALL_DATA)","79c84cf6":"ALL_DATA[\"TravelingAlone\"].describe()","31e6a797":"ALL_DATA[\"Ticket\"].head()","d976d271":"def create_ticketPrefix_feature(data):\n    data[\"TicketPrefix\"] = data[\"Ticket\"].str.extract(\"(.*)\\s+\\d*$\")\n    data[\"TicketPrefix\"] = data[\"TicketPrefix\"].str.replace(\"\\W\", \"\", regex = True)\n    data[\"TicketPrefix\"] = data[\"TicketPrefix\"].str.upper().str.strip()\n    \n    return data\n\nALL_DATA = create_ticketPrefix_feature(ALL_DATA)","2af8b597":"ALL_DATA[\"TicketPrefix\"].unique()","939d0877":"def plot_ticketPrefix_dist(data):\n    plt.figure(figsize = (15, 10))\n    sns.countplot(\n        data[\"TicketPrefix\"], \n        order = data[\"TicketPrefix\"].value_counts().index\n    )\n    plt.xticks(rotation = 45)\n    plt.title(\"TicketPrefix Distribution\")\n    plt.show()\n    \nplot_ticketPrefix_dist(ALL_DATA)","4f6805b4":"ALL_DATA[\"Sex\"].unique()","ebddc9fd":"def convert_sex_feature(data):\n    data[\"IsMale\"] = (data[\"Sex\"] == \"male\") * 1\n    \n    return data\n\nALL_DATA = convert_sex_feature(ALL_DATA)","2eec6903":"ALL_DATA[\"Embarked\"].unique()","575308f5":"PORTS_MAP = {\n    \"S\" : \"Southampton\",\n    \"C\" : \"Cherbourg\",\n    \"Q\" : \"Queenstown\"\n}","80825e19":"def convert_embarked_feature(data):\n    data[\"Port\"] = data[\"Embarked\"].map(PORTS_MAP)\n    \n    return data\n\nALL_DATA = convert_embarked_feature(ALL_DATA)","a0cdc1fa":"ALL_DATA.head()","2961be6e":"ALL_DATA = ALL_DATA.drop([\"Name\", \"Sex\", \"Ticket\", \"Cabin\", \"Embarked\"], axis = 1)","2753958e":"TRAIN_DATA = ALL_DATA[:TRAIN_COUNT].join(TRAIN_DATA[TARGET_COLUMNS], how = \"inner\")\nTEST_DATA = ALL_DATA[TRAIN_COUNT:]\n\nFEATURE_COLUMNS = TRAIN_DATA.columns.difference(TARGET_COLUMNS)","5752ac61":"TRAIN_DATA.head()","fecf3687":"FEATURE_COUNT = pd.get_dummies(ALL_DATA).shape[1]\n\nprint(\"{:,d} passengers tagged X {:,d} features = {:,d} entries\".format(\n    TRAIN_COUNT, FEATURE_COUNT, TRAIN_COUNT * FEATURE_COUNT\n))","c420eacd":"# To be able to create more readable plots...\nTRAIN_DATA[\"AgeRange\"] = pd.cut(TRAIN_DATA[\"Age\"], range(0, 90, 10))\nTRAIN_DATA[\"FareRange\"] = pd.cut(TRAIN_DATA[\"Fare\"], range(0, 550, 25))","7e7f5bd6":"def plot_target_dist(data):\n    plt.figure(figsize = (14, 7))\n    sns.countplot(data[\"Survived\"])\n    plt.title(\"Survavibility Distribution\")\n    \nplot_target_dist(TRAIN_DATA)","0c8e8f7c":"def plot_univariate_dist(data, feature_name, target_name):\n    fig = sns.factorplot(\n        data = data,\n        x = feature_name,\n        y = target_name,\n        kind = \"bar\",\n        height = 7,\n        aspect = 2\n    )\n    sns.despine(trim = True)\n    fig.set_xticklabels(rotation = 45)\n    plt.title(\"Survavibility by {:s}\".format(feature_name))","4f095dd4":"plot_univariate_dist(TRAIN_DATA, \"Pclass\", \"Survived\")","c91f0ad4":"plot_univariate_dist(TRAIN_DATA, \"AgeRange\", \"Survived\")","95df7f61":"plot_univariate_dist(TRAIN_DATA, \"SibSp\", \"Survived\")","2d406919":"plot_univariate_dist(TRAIN_DATA, \"Parch\", \"Survived\")","590fd4b6":"plot_univariate_dist(TRAIN_DATA, \"Title\", \"Survived\")","584c05cc":"plot_univariate_dist(TRAIN_DATA, \"SocialGroup\", \"Survived\")","5d6c6384":"plot_univariate_dist(TRAIN_DATA, \"CabinCount\", \"Survived\")","b264f0b4":"plot_univariate_dist(TRAIN_DATA, \"Deck\", \"Survived\")","5ec8c6bc":"plot_univariate_dist(TRAIN_DATA, \"TravelingAlone\", \"Survived\")","c8e2476d":"plot_univariate_dist(TRAIN_DATA, \"FamilySize\", \"Survived\")","4c777893":"plot_univariate_dist(TRAIN_DATA, \"TicketPrefix\", \"Survived\")","082ae22a":"plot_univariate_dist(TRAIN_DATA, \"Port\", \"Survived\")","d1075df1":"plot_univariate_dist(TRAIN_DATA, \"IsMale\", \"Survived\")","e437d909":"plot_univariate_dist(TRAIN_DATA, \"FareRange\", \"Survived\")","a502c575":"def plot_multivariate_dist(data, x, y, hue):\n    fig = sns.factorplot(\n        data = data,\n        x = x,\n        y = y,\n        hue = hue,\n        kind = \"bar\",\n        legend_out = False,\n        aspect = 2,\n        height = 7,\n    )\n    sns.despine(trim = True)\n    fig.set_xticklabels(rotation = 45)\n    plt.title(\"Survavibility by {:s} and {:s}\".format(x, hue))\n    plt.show()","1de4415a":"plot_multivariate_dist(TRAIN_DATA, \"AgeRange\", \"Survived\", \"IsMale\")","5841d28b":"plot_multivariate_dist(TRAIN_DATA, \"AgeRange\", \"Survived\", \"SocialGroup\")","b8631a81":"plot_multivariate_dist(TRAIN_DATA, \"Deck\", \"Survived\", \"CabinCount\")","c518483e":"plot_multivariate_dist(TRAIN_DATA, \"Deck\", \"Survived\", \"Pclass\")","b0fbf6b4":"plot_multivariate_dist(TRAIN_DATA, \"Pclass\", \"Survived\", \"IsMale\")","66662709":"plot_multivariate_dist(TRAIN_DATA, \"Port\", \"Survived\", \"Pclass\")","2c8259db":"plot_multivariate_dist(TRAIN_DATA, \"FareRange\", \"Survived\", \"Port\")","e29ab7ac":"plot_multivariate_dist(TRAIN_DATA, \"AgeRange\", \"Survived\", \"TravelingAlone\")","4bad6e55":"plot_multivariate_dist(TRAIN_DATA, \"TravelingAlone\", \"Survived\", \"IsMale\")","e4d5d985":"plot_multivariate_dist(TRAIN_DATA, \"TicketPrefix\", \"Survived\", \"Port\")","e10978c7":"plot_multivariate_dist(TRAIN_DATA, \"TicketPrefix\", \"Survived\", \"Pclass\")","ac997dbf":"def plot_correlation_heatmap(data):\n    corr = pd.get_dummies(data).corr()\n    \n    plt.figure(figsize = (25, 20))\n\n    # Generate a mask for the upper triangle\n    mask = np.zeros_like(corr, dtype = np.bool)\n    mask[np.triu_indices_from(mask)] = True\n\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(220, 10, as_cmap = True)\n\n    sns.heatmap(corr, cmap = cmap, mask = mask, square = True, center = 0, robust = True, linewidths = .2)\n    plt.show()","0a4de7c2":"plot_correlation_heatmap(TRAIN_DATA[FEATURE_COLUMNS])","4ceef7ee":"X_TRAIN = pd.get_dummies(TRAIN_DATA[FEATURE_COLUMNS])\nX_TEST = pd.get_dummies(TEST_DATA[FEATURE_COLUMNS])\nY_TRAIN = TRAIN_DATA[TARGET_COLUMNS]","a16d389a":"RANDOM_SEED = 123\nK_FOLDS = StratifiedKFold(n_splits = 10, random_state = RANDOM_SEED)","c072db82":"SCALERS = [\n    (\"Standard\", StandardScaler()),\n    (\"Robust\", RobustScaler()),\n    (\"MinMax\", MinMaxScaler()),\n    (\"Normalizer\", Normalizer())\n]","17203367":"def get_scaled_models(model_tuples, scaler_tuple):\n    scaler_name, scaler = scaler_tuple\n    \n    scaled_tuples = []\n    for model_name, model in model_tuples:\n        scaled_tuples.append((model_name, Pipeline([(scaler_name, scaler), (model_name, model)])))\n            \n    return scaled_tuples","3d393247":"def get_scaled_models_results(model_tuples, scaler_name, x, y, kfolds):\n    results = pd.DataFrame([])\n    \n    for model_name, model in model_tuples:\n        results[model_name] = cross_val_score(model, x, y, cv = kfolds)\n        \n    results = results.melt(var_name = \"Model\", value_name = \"Precision\")\n    results[\"Scaler\"] = scaler_name\n\n    return results","3392e404":"def get_all_models_combinaisons_results(model_tuples, scaler_tuples, x, y, kfolds):\n    results = get_scaled_models_results(model_tuples, \"None\", x, y, kfolds)\n\n    for scaler_tuple in scaler_tuples:\n        scaled_models = get_scaled_models(model_tuples, scaler_tuple)\n        results = results.append(get_scaled_models_results(scaled_models, scaler_tuple[0], x, y, kfolds))\n        \n    return results","a7e41fec":"def plot_models_results(results):  \n    plt.figure(figsize = (20, 10))\n    plt.title('Algorithm Comparison')\n    sns.boxplot(data = results, x = \"Model\", y = \"Precision\", hue = \"Scaler\")\n    sns.despine(trim = True)\n    plt.show()","2fcf3f62":"BASE_MODELS = [\n    (\"SVM\", SVC()), \n    (\"CART\", DecisionTreeClassifier()),\n    (\"KNN\", KNeighborsClassifier()),\n    (\"LR\", LogisticRegression()),\n    (\"LDA\", LinearDiscriminantAnalysis()),\n    (\"MLP\", MLPClassifier()),\n    (\"GPC\", GaussianProcessClassifier()),\n]","c20e0320":"RESULTS = get_all_models_combinaisons_results(BASE_MODELS, SCALERS, X_TRAIN, Y_TRAIN, K_FOLDS)","1c9f3244":"plot_models_results(RESULTS)","23921cbc":"BASE_ENSEMBLES = [\n    (\"ADABOOST\", AdaBoostClassifier()),\n    (\"GRDBOOST\", GradientBoostingClassifier()),\n    (\"BAGGING\", BaggingClassifier()),\n    (\"FOREST\", RandomForestClassifier()),\n    (\"VOTING\", VotingClassifier(BASE_MODELS)),\n    (\"EXTRATREE\", ExtraTreesClassifier()),\n    (\"XGBOOST\", XGBClassifier()),\n]","3f3f92f5":"RESULTS = get_all_models_combinaisons_results(BASE_ENSEMBLES, SCALERS, X_TRAIN, Y_TRAIN, K_FOLDS)","f7d653ce":"plot_models_results(RESULTS)","2d2cffbc":"**Insights**\n* The *Cabin* and *Embarked* can be categorized.\n* The missing *Age* and *Fare* values should be impute.","13f96389":"#### 2.1.1 FARE","622ec30e":"#### 5.1.1 SVM","bd64f9f4":"#### 2.3.4 CABIN COUNT","c978836f":"### 5.2 TUNE WITH FEATURES SELECTION","d962e486":"**Insights**\n* Because there's a significant difference between the number of survivors and the dead passengers, we will need to stratify our samples.","5793c5ab":"#### Insights\n* The *Name* feature encapsulated the person's title.\n* The *Cabin* feature encapsulated the assigned deck of the passenger.\n* The *Embarked* feature refers to the Port of Embarkation of the passenger.\n* The *SibSp* feature refers to the number of sibling and spouses of the passenger.\n* The *Parch* feature refers to the number of parents and children of the passenger.","8922fd42":"**Insights**\n* The passenger title can be regrouped in social group.","77af824f":"## 5. IMPROVE ACCURACY\n---","e99ceb00":"**Insights**\n* Each passenger name encapsulated the passenger title.\n* The passenger title inform us of the passenger social group.","9365e8b9":"### 6.2 SAVE MODEL","434d8ac6":"## 1. PREPARE PROBLEM\n---","3efe17f4":"The sinking of the RMS Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.\n\nOne of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.\n\nIn this challenge, we ask you to complete the analysis of what sorts of people were likely to survive. In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy.","66c9294a":"**Insights**\n* From the passenger cabin number, we can deduce the deck assigned to the passenger.","5cbdb4cf":"### 4.2 DEFINE TEST OPTIONS AND METRICS","90c9ba2f":"### 2.1 COMPLETE DATA","fe504f31":"**Insights**\n* In some case, more than one cabin can be assigned to a passenger.","5fdd7f1e":"#### 1.4.1 TITANIC DECKS","87a790b7":"<img src=\"https:\/\/preview.ibb.co\/cUvtTK\/Titanic_Route_Map.png\" alt=\"Titanic_Route_Map\" border=\"0\">","bc21b8e2":"**Insights**\n* Each model have better results when the data is normalized.","30a6f9e5":"### 6.1 CREATE STANDALONE MODEL","2e5237ef":"### 1.4 SUMMARIZE DATA","b75d1bdf":"#### 2.3.1 PASSENGER TITLE","77140fad":"**Insights**\n* The children had more chance to survive.\n* The oldery had less chance to survive.","7dd58007":"**Insights**\n* The *Name*, *Sex*, *Ticket*, *Cabin* and *Embarked* doesn't add any informations. They can be remove safely.","cf1d10e2":"## 7. CHANGE LOGS\n---","3388f575":"#### 4.3.2 ENSEMBLE MODELS","6f3df10c":"<img src=\"https:\/\/preview.ibb.co\/ehu58K\/top_7_strangely_unique_things_that_sank_with_titanic.jpg\" alt=\"top_7_strangely_unique_things_that_sank_with_titanic\" border=\"0\">","bbff6d76":"#### 3.2.1 UNIVARIATE PLOT","19b2ffc2":"## 2. CLEAN AND TRANSFORM DATA\n---","8f274eba":"**Insights**\n* The upper class had more chance to survive.","490397fe":"### 4.3 SPOT-CHECK MODELS AND ENSEMBLES","9942f462":"#### 1.4.2 TITANIC ITINERARY","49d0a611":"## 3. EXPLORATORY DATA ANALYSIS\n---","0207343a":"#### 2.3.4 FAMILY SIZE","af989852":"### 1.2 CONFIGURE LIBRARIES","d8028fbc":"**Insights**\n* The ticket number can contains a prefix.","53827c1d":"## 8. REfERENCES AND CREDITS\n---","55f54116":"**Insights**\n* The academic passengers had more chance to survive.","717e8a66":"#### 2.3.6 TICKET PREFIX","f0e7701d":"### 1.3 LOAD DATA","af14a3cc":"**Insights**\n* The *SibSp* and *Parch* features encapsulated the number of the family.","8f1621b2":"# TITANIC CHALLENGE - SURVIVABILITY PREDICTION\n---","06b7bcf8":"### 2.4 CONVERT DATA","c0005c45":"### 2.6 PREPARE DATA","a45c79f4":"#### 2.3.5 PASSENGER TRAVELING ALONE","b16e8c14":"#### 2.4.1 PASSENGER IS MALE","4038b1b2":"### 2.2 CORRECT DATA","5d908754":"#### 2.3.2 PASSENGER SOCIAL GROUP","1c5d4ed8":"#### 2.1.2 AGE","df3ae53e":"#### 2.4.2 PORT OF EMBARKATION","5864fdcf":"**Insights**\n* The passengers assigned to the F deck had more chance to survived.","7031f287":"**Insights**\n* A passenger traveling alone doesn't seem to had more chance to survive.","abe740c3":"### 1.1 LOAD LIBRARIES","cc83ee1e":"**Insights**\n* More passengers died than survived.","36d607da":"### 3.2.2 MULTIVARIATE PLOT","9b2f4b9e":"Wich method should we use to impute the missing age values? Should we simply replace missing values by a statistic like the *mean*, *mode*, *gmean*, *hmean* or *median*. Or, should we use the *mean* of the age of similars passengers. Or, as last mesure, should we implement a mahcine learning algorithm to fill missing age values.","dd60a2e7":"### 4.1 SPLIT-OUT DATA","16405b66":"### 5.1 TUNE WITH HYPER-PARAMETERS","df233f57":"The outliers will be handle by using a Robust Scaler while testing.","0ae11646":"### 3.2 VISUALIZE DATA","41417c9d":"#### 4.3.1  MODELS","c01c7934":"#### 3.2.1 TARGET PLOT","11a2a601":"## 4. MODEL DATA\n---","81b24a5e":"**Insights**\n* Maybe if the passenger traveling alone, he has more chance to survive.","ff4bbf50":"### 2.5 REMOVE DATA","0588a1de":"### 3.1 DESCRIBE DATA","ce2eddf4":"#### 2.3.3 DECK ASSIGNED","5eedb373":"## 6. FINALIZE MODEL\n---","fd738ae5":"### 2.3 CREATE DATA","1773be7a":"<img src=\"https:\/\/preview.ibb.co\/hFMQ8K\/Titanic_Deck_Plan.jpg\" alt=\"Titanic_Deck_Plan\" border=\"0\">"}}