{"cell_type":{"f2b75dce":"code","15c8ab13":"code","bbdc6eca":"code","804ee892":"code","c9264f85":"code","8e9acb4c":"code","fe37a7f7":"code","2035ae27":"code","0f92548f":"code","c7787de2":"code","94d2ff8d":"code","d558cecb":"markdown","147ffc45":"markdown","98243fdb":"markdown","e29e413b":"markdown","8d5dbd92":"markdown","da32bc6d":"markdown","d9cb6a2d":"markdown","580bc89a":"markdown"},"source":{"f2b75dce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport tensorflow as tf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15c8ab13":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","bbdc6eca":"sns.pairplot(df, hue='stroke')","804ee892":"df = df[df['gender']!='Other']\ndf['bmi'].fillna(df['bmi'].mean(),inplace=True)\ndf.drop('id',axis=1, inplace=True)\nwork_dict = {}\nj=1\nfor i in df['work_type'].unique():\n   work_dict[i]=j\n   j+=1\ndf['work_type'] = df['work_type'].apply(lambda x: work_dict[x])\ndf = pd.get_dummies(df, columns=['gender','Residence_type','ever_married','smoking_status'],drop_first=True)","c9264f85":"print(df.head())\nprint(df.info())","8e9acb4c":"import keras\nfrom keras import Sequential\nfrom keras.layers import Dense\nfrom keras.losses import binary_crossentropy\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nsmote = SMOTE()","fe37a7f7":"X = df.drop('stroke',axis=1)\ny = df['stroke']\nX, y = smote.fit_resample(X, y)\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=22)","2035ae27":"model = Sequential()\nmodel.add(Dense(5, input_dim=X.shape[1], activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics = ['accuracy'])\nhistory = model.fit(X_train, y_train, verbose=0, epochs = 40, batch_size=64, validation_split=0.33)","0f92548f":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","c7787de2":"model.evaluate(X_test,y_test)","94d2ff8d":"pred=[]\nfor i in model.predict(X_test).reshape(-1): pred.append(round(i))\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, pred))","d558cecb":"### Model Evaluation ","147ffc45":"### Exploring Data","98243fdb":"### Feature Engineering\n   Removing the outliers and converting the classification features to continues features.","e29e413b":"### Getting data","8d5dbd92":"### Model Accuracy","da32bc6d":"### Model Creation","d9cb6a2d":"# Stroke Prediction\n   In this project we will be predicting that the person will be getting heart stoke or not with the help of features like age, gender, smoking status, bmi, etc...\n\nSo we will be doing the following steps as followed in life cycle\n1. Exploring data\n1. Feature Engineering\n1. Creating a Deep Learning model using Keras\n1. traing the model with best set of Hidden Layers and Neurons\n1. evaluating the Model","580bc89a":"### Summary\n\n   So finally we have created a Deep Learning Model for the stroke prediction, which will be predicting at an acuracy of 80%-85%."}}