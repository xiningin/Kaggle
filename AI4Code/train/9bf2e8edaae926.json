{"cell_type":{"4c99f315":"code","4089389c":"code","516d0fac":"code","3b206cd1":"code","9e6055a2":"code","253a7294":"code","c3c847d3":"code","e726c438":"code","42b95efe":"code","61aec5c7":"code","c4f06165":"code","c492aab7":"code","e159ed1d":"code","482b6d41":"code","97bd1431":"code","eb4344ee":"code","7a09aed4":"code","8eaec2f4":"code","845383dd":"code","fa954bdb":"code","fb03e8cd":"code","6d652527":"code","582ee3be":"code","3940aa70":"code","1565ddee":"code","fafcf158":"code","1cd81895":"code","f15d9c32":"code","bf490e85":"markdown","ebfc7a97":"markdown","c1b596f8":"markdown","8105132f":"markdown","c4b5d4b9":"markdown","b4798ebe":"markdown","b45e6c69":"markdown","b50824c4":"markdown","ac3974f1":"markdown","3497a753":"markdown","f60ec289":"markdown","08ec8be5":"markdown","625127b8":"markdown","614e87bc":"markdown","d1c89cff":"markdown","c5863dab":"markdown","8adaedc3":"markdown","7dd196dd":"markdown","183c344a":"markdown","3e5625d2":"markdown"},"source":{"4c99f315":"import pandas as pd\n\nbids_df = pd.read_csv('data\/bids.csv')\ntrain_df = pd.read_csv('data\/train.csv')\ntest_df = pd.read_csv('data\/test.csv')","4089389c":"print(train_df.shape)\nprint(test_df.shape)\nprint(bids_df.shape)","516d0fac":"train_df.head()","3b206cd1":"test_df.head()","9e6055a2":"bids_df.head()","253a7294":"print(train_df.bidder_id.nunique())\nprint(test_df.bidder_id.nunique())\nprint(bids_df.bidder_id.nunique())\n\n# as train+test > bids, there are some bidder_ids with no bid history","c3c847d3":"train_bidder_ids = list(train_df.bidder_id)\ntest_bidder_ids = list(test_df.bidder_id)\nbids_bidder_ids = list(bids_df.bidder_id.unique())","e726c438":"not_found = []\nfor bidderid in train_bidder_ids:\n    if bidderid not in bids_bidder_ids:\n        not_found.append(bidderid)\nprint(len(not_found), 'bidder ids from train.csv are not found in bids.csv')","42b95efe":"not_found = []\nfor bidderid in test_bidder_ids:\n    if bidderid not in bids_bidder_ids:\n        not_found.append(bidderid)\nprint(len(not_found), 'bidder ids from test.csv are not found in bids.csv')","61aec5c7":"bidder_counts = bids_df.groupby(\"bidder_id\")['time'].count().reset_index()\nbidder_counts = bidder_counts.rename(columns={'time':'num_bids'})\nbidder_counts","c4f06165":"feature_set = train_df.merge(bidder_counts, on='bidder_id', how='left')  # Make sure NOT to use the default inner join (how='inner')\nprint(feature_set.isnull().sum())\n\n# since no bid history, can just fill with 0\nfeature_set['num_bids'] = feature_set['num_bids'].fillna(0)  # fill nas with zeros\nfeature_set.isnull().sum()","c492aab7":"bidder_unique = bids_df.groupby(\"bidder_id\").nunique()\nbidder_unique","e159ed1d":"bidder_unique = bidder_unique.drop(columns='bidder_id', errors='ignore').reset_index()\nbidder_unique","482b6d41":"train_set = train_df.merge(bidder_unique, on='bidder_id', how='left')\ntest_set = test_df.merge(bidder_unique, on='bidder_id', how='left')","97bd1431":"train_set = train_set.fillna(0)\ntest_set = test_set.fillna(0)","eb4344ee":"test_set.isnull().sum()","7a09aed4":"import plotly.express as px\ncorr = train_set.corr()\nfig = px.imshow(corr)\nfig.show()","8eaec2f4":"feature_cols = ['auction','device','country']\n\nX = train_set[feature_cols]\ny = train_set['outcome']\n\nX_kaggle = test_set[feature_cols]\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","845383dd":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier(eta=0.21, random_state=5)\n\nxgb_model = model.fit(X_train, y_train)\ny_pred = xgb_model.predict(X_test)\n\nfrom sklearn import metrics\n\naccuracy = metrics.accuracy_score(y_test, y_pred)\nauc = metrics.roc_auc_score(y_test, y_pred)\n\nprint('Accuracy:', round(accuracy, 4) * 100, '%')\nprint('AUC:', round(auc, 4)) ","fa954bdb":"from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier(random_state =5,n_estimators=5)\n\nrf_model = rf_model.fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\n\nfrom sklearn import metrics\n\naccuracy = metrics.accuracy_score(y_test, y_pred)\nauc = metrics.roc_auc_score(y_test, y_pred)\n\nprint('Accuracy:', round(accuracy, 4) * 100, '%')\nprint('AUC:', round(auc, 4)) ","fb03e8cd":"from sklearn.ensemble import GradientBoostingClassifier\n\nmodel = GradientBoostingClassifier(learning_rate=0.27,random_state=5)\n\ngb_model = model.fit(X_train, y_train)\ny_pred = gb_model.predict(X_test)\n\nfrom sklearn import metrics\n\naccuracy = metrics.accuracy_score(y_test, y_pred)\nauc = metrics.roc_auc_score(y_test, y_pred)\n\nprint('Accuracy:', round(accuracy, 4) * 100, '%')\nprint('AUC:', round(auc, 4)) ","6d652527":"final_xg_model = XGBClassifier(eta=0.21, random_state=5)\nfinal_xg_model = final_xg_model.fit(X, y)","582ee3be":"final_rf_model = RandomForestClassifier(random_state =5,n_estimators=5)\nfinal_rf_model = final_rf_model.fit(X, y)","3940aa70":"final_gb_model = GradientBoostingClassifier(learning_rate=0.1,random_state=5)\nfinal_gb_model = final_gb_model.fit(X, y)","1565ddee":"probabilities = final_xg_model.predict_proba(X_kaggle)\nprobabilities","fafcf158":"probabilities = final_gb_model.predict_proba(X_kaggle)\nprobabilities","1cd81895":"kaggle_preds = probabilities[:,1]  # Extract values from the rightmost column\nkaggle_preds","f15d9c32":"output_dataframe = pd.DataFrame({\n    'Id': test_set['bidder_id'],\n    'Predicted': kaggle_preds\n})\noutput_dataframe.to_csv('prediction5.csv', index=False)  ","bf490e85":"#### Check if all bidder_id in test_df and train_df appear in bids_df","ebfc7a97":"# View dataset and apply feature engineering","c1b596f8":"##### 2. RandomForestClassifier","8105132f":"##### 3. GradiantBoostingClassifier","c4b5d4b9":"### Spliting data: train test split","b4798ebe":"##### Produce prediction probability","b45e6c69":"# Model Training","b50824c4":"#### 1.Consolidate given data (convert columns into numerical data)","ac3974f1":"##### 2. RandomForestClassifier","3497a753":"##### 1. XGBoost","f60ec289":"##### 1. XGBoost","08ec8be5":"##### 3. GradientBoostingClassifier","625127b8":"### Feature engineering","614e87bc":"### Generate csv","d1c89cff":"### Read data","c5863dab":"### Model (Classification problem)","8adaedc3":"### Testing using entire train.csv","7dd196dd":"##### 2. GradientBoostingClassifier","183c344a":"(X & y has already been identified above)","3e5625d2":"##### 1. XGBoost"}}