{"cell_type":{"c79633c8":"code","a430eb09":"code","1473d7f7":"code","77c1d233":"code","83129c0e":"code","1974702c":"code","e4420660":"markdown","f4bbbd57":"markdown","4b31636f":"markdown","8f43c593":"markdown","e7afc111":"markdown","68a65ccc":"markdown","56bc1de5":"markdown"},"source":{"c79633c8":"!pip install numericalunits","a430eb09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1473d7f7":"import sklearn.preprocessing as preprocessing\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import (\n    LinearRegression, TheilSenRegressor, RANSACRegressor, HuberRegressor, BayesianRidge, TheilSenRegressor)\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom scipy.interpolate import interp1d, CubicSpline, UnivariateSpline\nimport numericalunits\n\nnumericalunits.reset_units('SI')\n#MeV = 1.602e-19 * 1e6\nMeV = numericalunits.MeV\n#mGy_MBqs = 1e-9\nmGy = numericalunits.mJ\/numericalunits.kg\nMBqs = 1e6 \nmGy_MBqs = mGy\/MBqs\n\nprint(__version__) # requires version >= 1.9.0\ninit_notebook_mode(connected=True)","77c1d233":"import json\nparticles = ['alpha', 'beta-', 'beta+', 'gamma', 'X', 'neutron',\n             'auger', 'IE', 'alpha recoil', 'anihilation',\n             'fission', 'betaD', 'b-spectra']\n\nclass Isotope:\n    def __init__(self, name = '', half_life = 0.0, time_unit = ''):\n        self.name = name\n        self.half_life = half_life\n        self.time_unit = time_unit\n        self.emissions={}\n        for particle in particles:\n            self.emissions[particle] = []\n            \n    def __repr__(self):\n        return json.dumps(self.__dict__)\n    \n    def getEmissionYield(self, particle='beta-'):\n        if particle in particles:\n            r=0.\n            for em in self.emissions[particle]:\n                r+=em[1]\n            return r\n        else:\n            return NAN\n            ","83129c0e":"Isotopes = {}\nisot = 'Y-90'\nimport sqlite3\n\nwith sqlite3.connect(\"..\/input\/icrp107.db3\") as con:\n    cursor = con.cursor()\n    sql= \"SELECT * FROM isotopes\"\n    cursor.execute(sql)\n\n    for row in cursor.fetchall():\n        Isotopes[row[0]]=Isotope(name=row[1], half_life=row[2], time_unit=row[3])\n    \n    sql= \"SELECT * FROM particles\"\n    cursor.execute(sql)\n    particles = {}\n    for row in cursor.fetchall():\n        particles[row[1]]={'id':row[0], 'name':row[1]}\n    \n    sql= \"SELECT * FROM valores WHERE isotope = {} AND particle = {}\"\n    emissions = {}\n    isotope = [k for k in Isotopes.keys() if Isotopes[k].name==isot]\n    isotope=isotope[0]\n    for particle in particles.values():\n        tpart = particle['id']\n        tsql=sql.format(isotope, tpart)\n        cursor.execute(tsql)\n        for row in cursor.fetchall():\n            Isotopes[isotope].emissions[particle['name']].append({'energy':row[1], 'yield':row[2]})\n            ","1974702c":"x=[]\ny=[]\nfor em in Isotopes[isotope].emissions[\"b-spectra\"]:\n    x.append(em[\"energy\"])\n    y.append(em[\"yield\"])\n    \nscat = [go.Scatter(x = x, y = y, mode = 'lines', line = dict(width=1), name = 'b- spectra of '+ Isotopes[isotope].name)]\nlayout_scat = dict(title = 'B- spectra of '+ Isotopes[isotope].name,\n                   xaxis = dict(title = 'energy (MeV)'),\n                   yaxis = dict(title = 'Yield'),\n              )\nfig = dict(data=scat, layout=layout_scat)\niplot(fig)","e4420660":"We declare helper database class, this is a container for one full element","f4bbbd57":"plot the b- spectra of selected isotope, in this example Y-90","4b31636f":"This notebook is an example of how to access a radionuclide database to retrieve desintegration spectra for selected isotope","8f43c593":"We now check if we have access to the database. In this case is a local sqlite3 database.","e7afc111":"With this code we can add missing packages, in this case we need numerical units from pip. We need internet connection activated in the kernel settings.","68a65ccc":"Here we can make all the required imports and initialize plotly","56bc1de5":"Connect to database and retrieve one isotope. In this case is sqlite3 database but connection object can be anything, just adapt to relevant database type."}}