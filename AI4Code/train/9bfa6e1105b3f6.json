{"cell_type":{"531803f1":"code","a9640191":"code","2794bdf7":"code","fcab9ef3":"code","21a9cfc8":"code","0f508bcf":"code","e5c75708":"code","73f6d6ce":"code","fa8465d1":"code","95d18437":"code","83f760fc":"code","c31a752d":"code","8a2be7f1":"code","d81f3bd5":"code","2281e4fc":"code","f6a18c1b":"code","030cc68e":"code","96c83651":"code","a13dfef8":"code","4d0aea10":"code","9f617314":"code","087ca017":"code","bb26668c":"code","90ef1469":"code","9db68e4d":"code","8156765c":"code","03d05f6d":"code","39864cca":"code","0729c67e":"code","c26d04eb":"code","005e76a4":"code","773c497e":"code","ad35df10":"code","6d3e1e68":"code","72507eaf":"code","e818bf0a":"code","851e3e7f":"code","7f575079":"markdown","9bc7b38b":"markdown","a52f73f1":"markdown","e3cdb3a5":"markdown","d9fb12c3":"markdown","31fe4b6d":"markdown","8174f32d":"markdown","2b91dbcf":"markdown","c15ffcca":"markdown","7c54de57":"markdown","5a947b9c":"markdown","f55da37d":"markdown","29a795b6":"markdown","5d8e509a":"markdown","31afe341":"markdown","972e7ab6":"markdown","658bf430":"markdown","de9b6536":"markdown","43307ffd":"markdown","fa60129e":"markdown","3ead8888":"markdown","8067b93c":"markdown","90d3d25e":"markdown","b05a5455":"markdown","a34f79b8":"markdown","1b2b5650":"markdown","1cfee23a":"markdown","46435388":"markdown","f7f30f01":"markdown","44103faa":"markdown","0696e379":"markdown","dae4a9ca":"markdown","17bd13a9":"markdown","e165dbef":"markdown","476a32dd":"markdown","792d1741":"markdown","7011d6f3":"markdown"},"source":{"531803f1":"import requests #library to handle request\nfrom bs4 import BeautifulSoup\nimport pandas as pd  # library to process data as dataframes\nimport numpy as np # library to handle data in a vectorized manner \nfrom geopy.geocoders import Nominatim     # convert an address into latitude and longitude values  \nimport folium      # map rendering library\nfrom pandas.io.json import json_normalize  # tranform JSON file into a pandas dataframe\nfrom sklearn.cluster import KMeans   # import k-means from clustering stage\n\n# Matplotlib and associated plotting modules\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors","a9640191":"page = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_postal_codes_of_Canada:_T')\nsoup = BeautifulSoup(page.content, 'html.parser')","2794bdf7":"table = soup.find('table', attrs={'class':'wikitable sortable'})\n","fcab9ef3":"df = pd.read_html(str(table))[0]\ndf.head()","21a9cfc8":"df = df[df.Borough != 'Not assigned']  # Dropping the rows where Borough is 'Not assigned'\ndf = df[df.Latitude != 'Not assigned']\ndf = df[df.Longitude != 'Not assigned']\ndf = df[df.Neighborhood != 'Not assigned']\ndf = df.groupby(['Postal Code','Borough'], sort=False).agg(', '.join)  # Combining the neighborhoods with same Postal Code\ndf.reset_index(inplace=True)   \n\n\n# Replacing the neighborhoods which are 'Not assigned' with names of Borough\ndf['Neighborhood'] = np.where(df['Neighborhood'] == 'Not assigned',df['Borough'], df['Neighborhood'])\n","0f508bcf":"df.head()","e5c75708":"df.shape","73f6d6ce":"df['Latitude'] = pd.to_numeric(df['Latitude'])  # the latitude value is passed into numeric","fa8465d1":"df['Longitude'] = pd.to_numeric(df['Longitude'])   # the longitude value is passed into numeric","95d18437":"# Get the latitude and longitude coordinates of Calgary\naddress = \"Calgary, Alberta\"\n\ngeolocator = Nominatim(user_agent=\"calgary_explorer\")\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint('The geograpical coordinate of Calgary city are {}, {}.'.format(latitude, longitude))","83f760fc":"# create map of Calgary using latitude and longitude coordinates\nmap_calgary = folium.Map(location=[latitude, longitude], zoom_start=10)\n\nfor lat, lng, borough, neighborhood in zip(\n        df['Latitude'], \n        df['Longitude'], \n        df['Borough'], \n        df['Neighborhood']):\n    label = '{}, {}'.format(neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_calgary)  \n\nmap_calgary\n","c31a752d":"df_calgary = df[df['Borough'].str.contains(\"Calgary\")].reset_index(drop=True)\ndf_calgary.head()","8a2be7f1":"CLIENT_ID = 'K33SGF45U0LCTPWW2P2DTBSMZPWVSZU4YIS5KHC4FQISDKH4' # your Foursquare ID\nCLIENT_SECRET = 'SVEKAXAOHPB1EOM3AP32F1TLL3AEDZLN0TJRW2BET51ELN4L' # your Foursquare Secret\nVERSION = '20180605' # Foursquare API version\n\nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","d81f3bd5":"neighborhood_name = df_calgary.loc[0, 'Neighborhood']\nprint('The first neighborhood is ', neighborhood_name)","2281e4fc":"neighborhood_latitude = df_calgary.loc[0, 'Latitude'] # neighborhood latitude value\nneighborhood_longitude = df_calgary.loc[0, 'Longitude'] # neighborhood longitude value\n\nprint('Latitude and longitude values of {} are {}, {}.'.format(neighborhood_name, \n                                                               neighborhood_latitude, \n                                                               neighborhood_longitude))","f6a18c1b":"LIMIT = 100 # limit of number of venues returned by Foursquare API\nradius = 1500 # define radius\nurl = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n    CLIENT_ID, \n    CLIENT_SECRET, \n    VERSION, \n    neighborhood_latitude, \n    neighborhood_longitude, \n    radius, \n    LIMIT)\n\n# get the result to a json file\nresults = requests.get(url).json()","030cc68e":"def get_category_type(row):\n    try:\n        categories_list = row['categories']\n    except:\n        categories_list = row['venue.categories']\n        \n    if len(categories_list) == 0:\n        return None\n    else:\n        return categories_list[0]['name']","96c83651":"venues = results['response']['groups'][0]['items']\nnearby_venues = json_normalize(venues) # flatten JSON\n\n# filter columns\nfiltered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']\nnearby_venues =nearby_venues.loc[:, filtered_columns]\n\n# filter the category for each row\nnearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\n\n# clean columns\nnearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns]\n\nnearby_venues","a13dfef8":"print('{} venues were returned by Foursquare.'.format(nearby_venues.shape[0]))","4d0aea10":"def getNearbyVenues(names, latitudes, longitudes, radius=1500):\n    venues_list=[]\n    \n    for name, lat, lng in zip(names, latitudes, longitudes):\n        \n            \n        # create the API request URL\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius, \n            LIMIT)\n            \n        # make the GET request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([(\n            name, \n            lat, \n            lng, \n            v['venue']['name'], \n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'],  \n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Neighborhood', \n                  'Neighborhood Latitude', \n                  'Neighborhood Longitude', \n                  'Venue', \n                  'Venue Latitude', \n                  'Venue Longitude', \n                  'Venue Category']\n    \n    return(nearby_venues)","9f617314":"calgary_venues = getNearbyVenues(names=df_calgary['Neighborhood'],\n                                   latitudes=df_calgary['Latitude'],\n                                   longitudes=df_calgary['Longitude']\n                                  )","087ca017":"print(calgary_venues.shape)\ncalgary_venues.head()","bb26668c":"calgary_venues.groupby('Neighborhood').count()","90ef1469":"print('There are {} uniques categories.'.format(len(calgary_venues['Venue Category'].unique())))","9db68e4d":"# one hot encoding\ncalgary_onehot = pd.get_dummies(calgary_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n\n# add neighborhood column back to dataframe\ncalgary_onehot['Neighborhood'] = calgary_venues['Neighborhood'] \n\n# move neighborhood column to the first column\nfixed_columns = [calgary_onehot.columns[-1]] + list(calgary_onehot.columns[:-1])\ncalgary_onehot = calgary_onehot[fixed_columns]\n\ncalgary_onehot.head()\n\n","8156765c":"calgary_grouped = calgary_onehot.groupby('Neighborhood').mean().reset_index()\ncalgary_grouped.head()","03d05f6d":"calgary_grouped.shape","39864cca":"def return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    return row_categories_sorted.index.values[0:num_top_venues]\n\nnum_top_venues = 10\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['Neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighborhood'] = calgary_grouped['Neighborhood']\n\nfor ind in np.arange(calgary_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(calgary_grouped.iloc[ind, :], num_top_venues)\n\nneighborhoods_venues_sorted.head()","0729c67e":"import matplotlib.pyplot as plt\n\ncalgary_grouped_clustering = calgary_grouped.drop('Neighborhood', 1)\ncost =[] \nfor i in range(1, 11): \n    KM = KMeans(n_clusters = i, max_iter = 500) \n    KM.fit(calgary_grouped_clustering) \n      \n    # calculates squared error \n    # for the clustered points \n    cost.append(KM.inertia_)      \n  \n# plot the cost against K values \nplt.plot(range(1, 11), cost, color ='g', linewidth ='3') \nplt.xlabel(\"Value of K\") \nplt.ylabel(\"Sqaured Error (Cost)\") \nplt.show() # clear the plot \n  \n# the point of the elbow is the  \n# most optimal value for choosing k","c26d04eb":"# set number of clusters\nkclusters = 4\n\n# run k-means clustering\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(calgary_grouped_clustering)\n\n# check cluster labels generated for each row in the dataframe\nkmeans.labels_[0:10] ","005e76a4":"# add clustering labels\nneighborhoods_venues_sorted.insert(0,'Cluster Labels', kmeans.labels_)\n\ncalgary_merged = df_calgary\n\n# merge calgary_grouped with calgary_data to add latitude\/longitude for each neighborhood\ncalgary_merged = calgary_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')\n\n # check the last columns!","773c497e":"calgary_merged.head()","ad35df10":"# create map\nmap_clusters = folium.Map(location=[latitude, longitude], zoom_start=10)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(\n        calgary_merged['Latitude'], \n        calgary_merged['Longitude'], \n        calgary_merged['Neighborhood'], \n        calgary_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters\n","6d3e1e68":"calgary_merged.loc[calgary_merged['Cluster Labels'] == 0, calgary_merged.columns[[2] + list(range(5, calgary_merged.shape[1]))]]","72507eaf":"calgary_merged.loc[calgary_merged['Cluster Labels'] == 1, calgary_merged.columns[[2] + list(range(5, calgary_merged.shape[1]))]]","e818bf0a":"calgary_merged.loc[calgary_merged['Cluster Labels'] == 2, calgary_merged.columns[[2] + list(range(5, calgary_merged.shape[1]))]]","851e3e7f":"calgary_merged.loc[calgary_merged['Cluster Labels'] == 3, calgary_merged.columns[[2] + list(range(5, calgary_merged.shape[1]))]]","7f575079":"First we import the necessary libraries ","9bc7b38b":"Let's explore the first neighborhood in the DataFrame 'df_calgary'","a52f73f1":"We will be using the KMeans clustering for the clutering, but first, we need to write the code to get the optimal value of K using the elbow method","e3cdb3a5":"####  Now, we ready to cluster the neighborhoods","d9fb12c3":"###   Exploring and Clustering the neighborhoods of Calgary","31fe4b6d":"Convert the json file into a DataFrame","8174f32d":"####  Now, we'll examine each of the clusters","2b91dbcf":"#### Let's find out how many unique categories can be curated from all the returned venues","c15ffcca":"Defining a function that exctract category of the venues","7c54de57":"######  Defining the Foursquare API credentials and version","5a947b9c":"Let's create a new dataframe that includes the cluster as well as the top 10 venues for each neighborhood.","f55da37d":"The html file is passed into DataFrame","29a795b6":"Analysing the graph suggest the value of 4 as the best fit for k","5d8e509a":"####  Check the 10 most common venues in each neighborhood.","31afe341":"#####  Let's get all the borough in the DataFrame that contains Calgary","972e7ab6":"And how many venues were returned by Foursquare?","658bf430":"Cluster '0'","de9b6536":"Now let's visualize the resulting clusters ","43307ffd":"### Cleaning and Processing the data","fa60129e":"Cluster '3'","3ead8888":"### CONCLUSION\n\nComparing the parameters we set at the beginning of this project which are:\n(a)  locations not already crowded with the presence of restaurant of any kind.\n(b)\tLocations where there is no African restaurant,\nwith the result we obtained from our clustering analysis, the best neighborhood to have our African restuarant set up is the Northwest Calgary. According to the result of our analysis, the Northwest Calgary seems to be the center of sporting activies since there are both a golf course and a football stadium within the viccinity of the neighborhood. Along with this are a number of stores but never a restaurant at least in the first ten places. Considering the fact the sporting events pull a lot crowd and therefore generate a lot of traffic, couple with the fact that there is no restaurant of any kind in the top ten places in the Northwest Calgary neighborhood; I will suggest that this neighborhood is the best place to site an African restaurant. ","8067b93c":"Here, we visualize the Calgary's using the folium libary ","90d3d25e":"#### Let's now create a function to repeat the same process to all the neighborhoods in Calgary","b05a5455":"\n###           Topic: Suggesting the best location for setting up an African Restaurant in Calgary\n","a34f79b8":"Cluster '1'","1b2b5650":"#### Let's check the size of the resulting dataframe","1cfee23a":"Let's check how many venues were returned for each neighborhood","46435388":"Cluster  '2'","f7f30f01":"#### Now we are ready to analyze each neighborhood","44103faa":"### DISCUSSION\nAnalysing the result of the clustering shows an oversaturation of restaurants in the second cluster. Most of the neighborhood in this particular cluster already possess at least one restaurant with neighborhoods such as Highfield and Burns Industrial having six restaurants among their top ten venues. Since the parameter we sent for this project is not to locate our African restaurant in a place with crowded restaurant of any type, we may want to look at the other clusters in setting up the restaurant.\n\nThe first cluster in our analysis projected three neighborhoods also with modest number of restaurants. The third cluster in our analysis reveals that the neighborhood possesses just one restaurant in the first ten venues within the neighborhood. This cluster may be considered for the location. However, the fourth cluster in our algorithm is the Northwest Calgary neighborhood. A critical look at the top ten venues of this neighborhood shows that there is no restaurant of any type. The Northwest Calgary will be the most suitable place to set up our African restaurant. ","0696e379":"#### Now, let's get the top 100 venues that are in Penbrooke Meadows and Marlborough within a radius of 1500 meters.","dae4a9ca":"###  DATA DESCRIPTION\nThe aim for this project therefore is to suggest the best possible location to set up an African Restaurant in the city of Calgary.  The data for the purpose of this project would be sourced from: \na.\tWikipedia. At   https:\/\/en.wikipedia.org\/wiki\/List_of_postal_codes_of_Canada:_T  is a list of the neighborhoods in Calgary together with their latitude and longitude coordinates. This dataset would be filtered and cleaned to extract only the borough of Calgary. \nb.\tThe Forsquare API would be used to get the most common venues in the city of Calgary. \n\nUsing this dataset, we are going to set certain parameters so as to achieve our objectives. These parameters are:\na.\tLocations not already crowded with the presence of restaurant of any kind.\nb.\tLocations where there is no African restaurant\n\n\nA list containing the postal codes of Calgary's neighborhoods along with their latitude and longitude coordinates is scraped from a web page of wikipedia using BeautifulSoup","17bd13a9":"#### INTRODUCTION\/BUSINESS PROBLEM \n\nWith the increasing number of Africans migrating to the city of Calgary and with need for Africa and Africans to start marketing their cultural heritage especially through their dishes to the rest of the world, there is therefore a need to start setting African restaurants. There exist quiet a number of restaurants such as the American Restaurants, Chinese Restaurants, Japanese Restaurants and the likes in the city of Calgary, but very few African Restaurants. According to tripadvisor (available at https:\/\/www.tripadvisor.com\/Restaurants-g154913-Calgary_Alberta.html) there are 3346 restaurants in the city of Calgary, out of which  only seven (7)  are African restaurants. \n\n\n","e165dbef":"### RESULT\nThe result of our clustering shows majority of the neighborhood belong to the second cluster (cluster '1') while the remaining neighborhoods were sparsely distributed among the other three clusters. ","476a32dd":"###  METHODOLOGY\nUsing the cleaned dataset, we filter it  to obtain the neighborhoods of the Calgary borough. The result is passed into the Foursquare API to obtain the venues in each neighborhood within the radius of 1500 meters and the limit of 100. The result is further filtered to obtain the first 10 venues of each neighborhood. The KMeans clustering is then used to cluster the data after having obtained the optimal k value. ","792d1741":"#### Next, let's group rows by neighborhood and by taking the mean of the frequency of occurrence of each category","7011d6f3":"Get the neighborhood's latitude and longitude values."}}