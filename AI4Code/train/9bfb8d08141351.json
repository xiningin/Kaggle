{"cell_type":{"531dc35a":"code","b65ce232":"code","1ebaccb0":"code","3fb4b925":"code","3cd86ddf":"code","11792ec1":"code","0a0af6a7":"code","6071f60b":"code","51e70d26":"code","b4d1d56e":"code","93a8ba27":"markdown","459af632":"markdown","abde4020":"markdown","46c0829b":"markdown","7d986a52":"markdown","1f13d0b6":"markdown","b85d9a67":"markdown"},"source":{"531dc35a":"import math\n\nimport cv2\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt","b65ce232":"DATA_PATH = '..\/input\/made-cv-2021-contest-01-facial-landmarks\/contest01_data\/train'","1ebaccb0":"def show_image(image_name, keypoints, title, rad=1, ax=None):\n    src = cv2.imread(f'{DATA_PATH}\/images\/{image_name}')\n    src = cv2.cvtColor(src, cv2.COLOR_BGR2RGB)\n    for i, (x, y) in enumerate(keypoints):\n        cv2.circle(src, (int(x), int(y)), rad, (0, 255, 0), -1)\n    ax = ax or plt.gca()\n    ax.set_title(title)\n    ax.imshow(src)","3fb4b925":"def pose(points):\n    chin = points[0]\n    left_ear = points[120]\n    right_ear = points[272]\n    if chin[1] < left_ear[1] and chin[1] < right_ear[1]:\n        return 10000\n    return np.linalg.norm(left_ear - chin) \/ np.linalg.norm(right_ear - chin)","3cd86ddf":"def rotation(points):\n    left_ear = points[120]\n    right_ear = points[272]\n    m = left_ear - right_ear\n    return math.degrees(math.atan2(*m[::-1]))","11792ec1":"data = {\n    line.strip().split('\\t')[0]: np.array(list(map(int, line.strip().split('\\t')[1:]))).reshape(-1, 2) \n    for i, line in enumerate(open(f'{DATA_PATH}\/landmarks.csv')) if i > 0\n}","0a0af6a7":"stats = pd.DataFrame.from_dict({\n    'file': list(data.keys()), \n    'pose': list(map(pose, data.values())), \n    'rotation': list(map(rotation, data.values()))\n})","6071f60b":"full_face = stats[(stats.pose > .99) & (stats.pose < 1.1) & (stats.rotation == 0)].file.values[0]\nleft_profile = stats[(stats.pose > 1.50) & (stats.rotation == 0)].file.values[0]\nright_profile = stats[(stats.pose < .60) & (stats.rotation == 0)].file.values[0]\nrotated = stats[(stats.pose > .99) & (stats.pose < 1.1) & (stats.rotation < -30)].file.values[0]","51e70d26":"fig, axes = plt.subplots(1, 4, figsize=(20,10))\n\nshow_image(full_face, data[full_face], title='\u0410\u043d\u0444\u0430\u0441', rad=1, ax=axes[0])\nshow_image(left_profile, data[left_profile], title='\u041f\u0440\u043e\u0444\u0438\u043b\u044c (\u043b\u0435\u0432\u044b\u0439)', rad=1, ax=axes[1])\nshow_image(right_profile, data[right_profile], title='\u041f\u0440\u043e\u0444\u0438\u043b\u044c (\u043f\u0440\u0430\u0432\u044b\u0439)', rad=1, ax=axes[2])\nshow_image(rotated, data[rotated], title='\u0410\u043d\u0444\u0430\u0441 \u0441 \u043d\u0430\u043a\u043b\u043e\u043d\u043e\u043c', rad=1, ax=axes[3])","b4d1d56e":"fig, axes = plt.subplots(1, 3, figsize=(22,8))\n\naxes[0].hist(stats['pose'].values, bins=100)\naxes[0].set_xlabel('pose ratio')\naxes[1].hist(stats['rotation'].values, bins=100)\naxes[1].set_xlabel('rotation degrees')\naxes[2].scatter(stats['pose'].values, stats['rotation'].values, alpha=0.3)\naxes[2].set_xlabel('pose')\naxes[2].set_ylabel('rotation')\n\nplt.show()","93a8ba27":"\u0410 \u043d\u0430\u043a\u043b\u043e\u043d \u0433\u043e\u043b\u043e\u0432\u044b \u043c\u043e\u0436\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a \u0443\u0433\u043e\u043b \u043d\u0430\u043a\u043b\u043e\u043d\u0430 \u043f\u0440\u044f\u043c\u043e\u0439, \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u0447\u0435\u0440\u0435\u0437 \u043b\u044e\u0431\u044b\u0439 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 \u043a \u043e\u0441\u0438 X:","459af632":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b:","abde4020":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435:","46c0829b":"\u041e\u0446\u0435\u043d\u0438\u043c:","7d986a52":"### \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u043e\u0434 \u0435\u0449\u0435 \u043e\u0434\u043d\u0438\u043c \u0443\u0433\u043b\u043e\u043c - \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u0446 \u043d\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430\u0445","1f13d0b6":"\u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u0437\u0443 (\u0430\u043d\u0444\u0430\u0441\\\u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0438 \u0442.\u043f.) \u043c\u043e\u0436\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043e\u0442 \u043b\u044e\u0431\u044b\u0445 \u043a\u0440\u0430\u0439\u043d\u0438\u0445 \u043b\u0435\u0432\u044bx\\\u043f\u0440\u0430\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a, \u0434\u043e \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445.\n\n\u042f \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432\u043e\u0437\u044c\u043c\u0443 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043e\u0442 \u043b\u0435\u0432\u043e\u0433\u043e\\\u043f\u0440\u0430\u0432\u043e\u0433\u043e \u0443\u0445\u0430 \u0434\u043e \u043f\u043e\u0434\u0431\u043e\u0440\u043e\u0434\u043a\u0430:","b85d9a67":"\u041e\u0446\u0435\u043d\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u044d\u0442\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432:"}}