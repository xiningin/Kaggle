{"cell_type":{"66b06083":"code","c54258a6":"code","297ca42c":"code","9b44ad3d":"code","a84e2f23":"code","a2519e8d":"code","b2ef6387":"code","7459738d":"code","0b7d318e":"code","f8c46f57":"code","6fb2f6ce":"code","f782b883":"code","66225bc2":"code","0d989f18":"code","b462d8e3":"code","e637c41c":"code","e9656d8c":"code","ae367b54":"code","81c1c1f7":"code","8db8d105":"code","c464b050":"code","f867b8bc":"code","a82e4b99":"code","62713137":"code","c88ba277":"code","5a0d587f":"code","d5b7e808":"code","d8bde08d":"code","72819047":"code","8f7e28c3":"code","bb40f887":"code","93be04de":"code","c60393c5":"code","77d273c4":"code","f4158872":"markdown","41e65f60":"markdown","dfaf27e2":"markdown","5440ccc4":"markdown","7558c40c":"markdown","e1a20fb4":"markdown","f967cab1":"markdown","fc297049":"markdown","2b178845":"markdown","131cf50b":"markdown","f4b9e3f3":"markdown","87a52a3f":"markdown","23676f2f":"markdown","1e610dfa":"markdown","1f6e2b31":"markdown","51002c44":"markdown","d0286284":"markdown","0a2849d4":"markdown","4fbb584f":"markdown","70536d5a":"markdown","4df74433":"markdown","4e96496b":"markdown","ebcf2c98":"markdown","f4ff8a21":"markdown","8dd3c925":"markdown","a45e5acb":"markdown","ba0536d7":"markdown"},"source":{"66b06083":"# 1. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport numpy as np\nimport pandas as pd\nimport pickle   # \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# 2. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV, cross_val_score\n\n# 3. \u041c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\n# 4. \u041c\u0435\u0442\u0438\u0440\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\nfrom sklearn.metrics import mean_squared_error as mse, r2_score as r2","c54258a6":"import warnings\n\nwarnings.filterwarnings('ignore')\nmatplotlib.rcParams.update({'font.size': 14})","297ca42c":"import datetime\nnow = datetime.datetime.now()","9b44ad3d":"TRAIN_DATASET_PATH = 'C:\\\\GeekBrains\\\\Libraries_Python\\\\Real_estate_course\\\\realestatepriceprediction\\\\train.csv'\nTEST_DATASET_PATH  = 'C:\\\\GeekBrains\\\\Libraries_Python\\\\Real_estate_course\\\\realestatepriceprediction\\\\test.csv'","a84e2f23":"# \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f reduce_mem_usage","a2519e8d":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","b2ef6387":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\n# train_df = reduce_mem_usage(train_df)\ntrain_df.head()\n\ntest_df = pd.read_csv(TEST_DATASET_PATH)","7459738d":"train_df.info()","0b7d318e":"import seaborn as sns\n\nnan_df = (train_df.isna().sum() \/ train_df.shape[0]).reset_index()\nnan_df.columns=['feature', 'nan_percent']\n\nplt.figure(figsize=(16,4))\nsns.barplot(nan_df['feature'], nan_df['nan_percent'])\nplt.title('Percent Missing')\nplt.ylabel('Missing', fontsize=12)\nplt.xlabel('Features', fontsize=12)\nplt.xticks(rotation=90)\nplt.show()","f8c46f57":"plt.figure(figsize=(16, 8))\n\nplt.scatter(train_df['Price'], train_df['Rooms'])\n\nplt.xlabel('Price')\nplt.ylabel('Rooms')\nplt.title('Distribution of Price by Rooms')\nplt.show()","6fb2f6ce":"train_df['Floor'].sort_values().unique()","f782b883":"train_df['HouseFloor'].sort_values().unique()","66225bc2":"train_df['HouseYear'].sort_values().unique()","0d989f18":"train_df[['DistrictId','Floor','HouseFloor','HouseYear','KitchenSquare','Rooms','Square','LifeSquare']].hist(bins=50, figsize=(20,15))\nplt.show()","b462d8e3":"plt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('count')\nplt.xlabel('Price')\n\nplt.title('Price')\nplt.show()","e637c41c":"train_df.dtypes","e9656d8c":"train_df['Id'] = train_df['Id'].astype(str)\n","ae367b54":"class DataPipeline:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n    \n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        self.DistrictId_counts = None\n        self.med_price_by_district = None\n\n    def fit(self, df):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"\n        # \u0420\u0430\u0441\u0447\u0435\u0442\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.LifeSquare_median = df['LifeSquare'].median()\n        self.Square_median = df['Square'].median()\n        self.Rooms_median  = df['Rooms'].median()\n        self.HouseYear     = df['HouseYear'].median()\n        self.HouseFloor    = df['HouseFloor'].median()\n        self.Floor    = df['Floor'].median()\n        self.KitchenSquare    = df['KitchenSquare'].median()\n        # DistrictID\n        district = df['DistrictId'].value_counts()\n        district = district[district > 50]\n        self.DistrictId_counts = dict(district)\n        \n        X = df.copy()\n        X['DistrictId_popular'] = X['DistrictId'].copy()\n        X.loc[~X['DistrictId_popular'].isin(district.keys().tolist())] = np.nan\n        \n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043c2 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        self.med_price_by_district = X.groupby(['DistrictId_popular', 'Rooms'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByDistrict',\n                                                           'DistrictId_popular': 'DistrictId'})\n                \n        \n    def transform(self, df):\n        # * Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        # \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0438 \u0433\u0434\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0431\u043e\u043b\u044c\u0448\u0435 15\n        # df = df[df.Square > 15] \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0438 \u043d\u0435\u043b\u044c\u0437\u044f\n        df.loc[(df['Square'] > 280), 'Square'] = ((df.loc[(df['Square'] > 280), 'Square']) \/ 10)\n        df.loc[(df['Square'] < 16), 'Square'] = ((df.loc[(df['Square'] < 16), 'Square']) * 10)\n\n        \n        # * LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        # \u0418\u0449\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0438 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438\n        lsq_r =  self.LifeSquare_median \/ self.Square_median\n        # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0436\u0438\u043b\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n        df.loc[(df['LifeSquare']== 0) | (df['LifeSquare'].isna()),'LifeSquare'] = df['Square'] - df['KitchenSquare']\n        df.loc[(df['LifeSquare'] < 6 ) | (df['LifeSquare'] > df['Square']),'LifeSquare'] = df['Square']*lsq_r\n        \n        # * Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n        # \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u043b\u043e\u0449\u0430\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b\n        sq_r = self.Square_median \/ self.Rooms_median\n        # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u043a\u0430\u043a \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u0449\u0430\u0434\u044c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b\n        df.loc[(df['Rooms']==0) | (df['Rooms'] > 6), 'Rooms'] = df['Square']\/sq_r\n        df['Rooms'] = df['Rooms'].astype(int)\n        \n        # * Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n        # \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0438 \u0433\u0434\u0435 \u0433\u043e\u0434 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439\n        df.loc[df['HouseYear'] > now.year,'HouseYear'] = now.year\n        \n        # KitchenSquare\n        sqr_k = self.KitchenSquare \/ self.Square_median\n        df.loc[(df['KitchenSquare'] < 5) | (df['LifeSquare'] < df['KitchenSquare']), 'KitchenSquare'] = df['Square']*sqr_k\n        # df.loc[(df['KitchenSquare'] > df['Square']*0.9), 'KitchenSquare'] = df['Square']*sqr_k\n              \n         # HouseFloor, Floor\n        df.loc[df['HouseFloor'] == 0, 'HouseFloor'] = self.HouseFloor\n        df.loc[df['Floor'] == 0, 'Floor'] = self.Floor\n        \n        #df.loc[(df['HouseFloor'] == 0) | (df['HouseFloor'] > 48), 'HouseFloor'] = self.HouseFloor\n        #f.loc[df['Floor'] > df['HouseFloor'], 'Floor'] = df['HouseFloor']\n        #\u041f\u0435\u0440\u0432\u044b\u0439 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u0442\u0430\u0436\u0438 \u043c\u043d\u043e\u0433\u043e\u044d\u0442\u0430\u0436\u043a\u0438\n        # df.loc[(df['Floor'] == 1) & ( df['HouseFloor'] > 4 ) , 'Floor_first'] = 1       \n        # df.loc[df['Floor_first'].isna(),'Floor_first'] = 0\n        # df.loc[(df['Floor'] == df['HouseFloor']) & ( df['HouseFloor'] > 4 ) , 'Floor_last'] = 1\n        # df.loc[df['Floor_last'].isna(),'Floor_last'] = 0\n        \n        # District\n        df['DistrictId_count'] = df['DistrictId'].map(self.DistrictId_counts)\n        df['DistrictId_count'].fillna(df['DistrictId_count'].median(), inplace=True)\n        \n         # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043c2 \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443\n        if self.med_price_by_district is not None:\n            df = df.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n                       \n        # * Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n        #median = df['Healthcare_1'].median()\n        #df.loc[(df['Healthcare_1']== 0) | (df['Healthcare_1'].isna()),'Healthcare_1'] = df['Healthcare_1'].fillna(median)\n        \n        # \u041e\u0442\u0431\u043e\u0440 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0444\u0438\u0447\u0435\u0439) 'Ecology_2', 'Ecology_3','Shops_2\n        df = pd.get_dummies(df, columns=['Ecology_2', 'Ecology_3','Shops_2'])\n        \n        return df","81c1c1f7":"pipe = DataPipeline()\npipe.fit(train_df) # \u0440\u0430\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0441\u0442\u0438\u043a\ntrain_df = pipe.transform(train_df)","8db8d105":"train_df.sort_values(by='Square')","c464b050":"# test_df.sort_values(by='HouseFloor')\n# test_df.loc[test_df['Floor'] > test_df['HouseFloor']].sort_values(by='Floor')","f867b8bc":"train_df.columns.tolist()","a82e4b99":"feature_names = [\n 'DistrictId',\n 'MedPriceByDistrict',\n 'Rooms',\n 'Square',\n 'LifeSquare',\n 'KitchenSquare',\n 'Floor',\n 'HouseFloor',\n 'HouseYear',\n 'Ecology_1',\n 'Social_1',\n 'Shops_1',\n 'Helthcare_2']\n\ntarget_name = 'Price'","62713137":"train_df = train_df[feature_names + [target_name]]\ntrain_df.head(4)","c88ba277":"# DATASET_PATH = 'C:\\\\GeekBrains\\\\Libraries_Python\\\\Real_estate_course\\\\realestatepriceprediction\\\\train.csv'\n# df.to_csv(DATASET_PATH, index=False, encoding='utf-8')","5a0d587f":"X = train_df[feature_names]\ny = train_df[target_name]\n\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=42)","d5b7e808":"def evaluate_preds(true_values, pred_values, save=False):\n    \"\"\"\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0433\u0440\u0430\u0444\u0438\u043a preds vs true\"\"\"\n    \n    print(\"R2:\\t\" + str(round(r2(true_values, pred_values), 3)) + \"\\n\" +\n          \"RMSE:\\t\" + str(round(np.sqrt(mse(true_values, pred_values)), 3)) + \"\\n\" +\n          \"MSE:\\t\" + str(round(mse(true_values, pred_values), 3))\n         )\n    \n    plt.figure(figsize=(8,8))\n    \n    sns.scatterplot(x=pred_values, y=true_values)\n    plt.plot([0, 500000], [0, 500000], linestyle='--', color='black')  # \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c, \u0433\u0434\u0435 true_values = pred_values\n    \n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('True vs Predicted values')\n    \n    if save == True:\n        plt.savefig(REPORTS_FILE_PATH + 'report.png')\n    plt.show()","d8bde08d":"model = CatBoostRegressor(\n    silent=True,\n    learning_rate=0.1,\n    iterations=1150,\n    eval_metric='R2',\n    depth=8\n)\n\ncv_score = cross_val_score(model, X, y, \n                           scoring='r2', \n                           cv=KFold(n_splits=5, shuffle=True, random_state=42))\n# cv_score\nmean = cv_score.mean()\nstd = cv_score.std()\n\nprint('R2: {:.3f} +- {:.3f}'.format(mean, std))","72819047":"model.fit(X, y)","8f7e28c3":"test_df","bb40f887":"# pipe = DataPipeline()\ntest_df = pipe.transform(test_df)","93be04de":"test_df.sort_values(by='LifeSquare')","c60393c5":"X_final = test_df\n\npreds_final = pd.DataFrame()\npreds_final['Id'] = X_final['Id'].copy()\n\nX_final.set_index('Id', inplace=True)\nX_final = X_final[feature_names]","77d273c4":"y_pred_final = model.predict(X_final)\n\npreds_final['Price'] = y_pred_final\npreds_final.to_csv('C:\\\\GeekBrains\\\\Libraries_Python\\\\Real_estate_course\\\\realestatepriceprediction\\\\predictions.csv', index=False, encoding='utf-8', sep=',')\n\npreds_final.head(20)","f4158872":"**Data fields**\n\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","41e65f60":"# \u0428\u0430\u0433 3: \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 Feature engineering","dfaf27e2":"*\u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c 1-3 \u043a\u043e\u043c\u043d, \u043d\u043e \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b*","5440ccc4":"### \u041e\u0442\u0431\u043e\u0440 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0444\u0438\u0447\u0435\u0439)","7558c40c":"# \u0428\u0430\u0433 5. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","e1a20fb4":"#### \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438","f967cab1":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f reduce_mem_usage ","fc297049":"# \u0428\u0430\u0433 2. EDA \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","2b178845":"#### \u0412\u044b\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b","131cf50b":"### \u0420\u0430\u0441\u0447\u0435\u0442 \u0446\u0435\u043d\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","f4b9e3f3":"#### \u0410\u043d\u0430\u043b\u0438\u0437 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","87a52a3f":"### \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435  \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","23676f2f":"#### \u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","1e610dfa":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","1f6e2b31":"#### \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432","51002c44":"# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","d0286284":"\u0411\u0438\u0437\u043d\u0435\u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 - R^2, Root Mean Squared Error (RMSE)","0a2849d4":"### \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","4fbb584f":"### \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445","70536d5a":"# \u0428\u0430\u0433 4. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \/ test","4df74433":"\u041a\u043e\u043c\u043d\u0430\u0442\u044b","4e96496b":"\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 NaN","ebcf2c98":"#### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","f4ff8a21":"#### \u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c","8dd3c925":"### 5.3  LGBMRegressor","a45e5acb":"# \u0428\u0430\u0433 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","ba0536d7":"*LifeSquare \u0438 Healthcare_1 \u0438\u043c\u0435\u044e\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439*"}}