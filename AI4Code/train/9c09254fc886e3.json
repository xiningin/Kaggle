{"cell_type":{"75456496":"code","75cfd23a":"code","3e9ea6f5":"code","49a028f7":"code","a336c75b":"code","196fe7a2":"code","cc4a94df":"code","00eff4f5":"code","794a4946":"code","48e948c4":"code","cfdac46a":"code","1d8e1df7":"code","412f5914":"code","58c74741":"code","8dc17775":"code","e156b3ed":"code","76c01dd1":"code","7dc14185":"code","04120e4a":"code","b3bc813d":"code","e9e63fa8":"code","f6801435":"code","f5b1feef":"code","199649d8":"code","c9de7050":"code","72b6d443":"code","bfad83c8":"code","88d66961":"code","f31973f9":"code","1665e549":"code","2cc71d3f":"code","b420f1b6":"code","3b681ea5":"code","b3b36714":"code","a456a4dd":"code","ea80b1b4":"code","63c0d248":"code","7d84a47c":"code","b13534e6":"code","c70726fc":"code","edd7d022":"code","3ac7ad66":"code","7ad5cb96":"code","f9b04a14":"code","bab19b9f":"code","0fa25b05":"code","1bac04e9":"code","2ee6f008":"code","83e82f79":"code","95f8ab37":"code","ecf7c75e":"code","2415544d":"code","4f0f9b0e":"code","fdbb61bd":"code","9cb9eaad":"code","da5046a1":"code","f52652e1":"code","b813cc99":"code","3dd37a8b":"code","9ad7b768":"code","35471199":"code","429ea03e":"code","1f51ce8b":"code","d6e22c0c":"code","83d0fd96":"code","1f5d63fe":"code","0467235c":"code","0c7f2525":"code","1c1d006f":"code","598e5c15":"code","c807c452":"code","db7bf6ea":"code","8167a8bc":"code","a292ba7c":"code","e0e2afbd":"code","af2579c2":"markdown","097004a6":"markdown","86020bcf":"markdown","85bac7b4":"markdown","5afbbb65":"markdown","c8050ab4":"markdown","83621d01":"markdown","1c9081fd":"markdown","5796ebb1":"markdown","74fcbdae":"markdown","091f0430":"markdown","7cb2fd30":"markdown","a188bf82":"markdown"},"source":{"75456496":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75cfd23a":"# Adding two number\ndef addTwoNumber(a,b):\n    return a + b\n\n","3e9ea6f5":"addTwoNumber(10,29)","49a028f7":"addTwoNumber(\"Hello\",\" World\")","a336c75b":"x = addTwoNumber(20,50)\nx","196fe7a2":"# You will get error as below method expecting two argument\nx = addTwoNumber(20)\nx","cc4a94df":"# Adding two number with default value\ndef addTwoNumber(a,b = 100):\n    return a + b","00eff4f5":"# Now this method will work with one argument as well as second parameter has default value.\nx = addTwoNumber(20)\nx","794a4946":"x = addTwoNumber(20,500)\nx","48e948c4":"s = \"This is test\"\ntype(s)","cfdac46a":"type(10)","1d8e1df7":"type(\"10\")","412f5914":"type(10.88)","58c74741":"type(addTwoNumber)","8dc17775":"x = (1,2,2,'x','y', 10.88)\nx\n","e156b3ed":"len(x)","76c01dd1":"x.count(200)","7dc14185":"x[1]","04120e4a":"type(x)","b3bc813d":"x.append(10) # Tupple is Immutale data structure, hence you can not append anything.","e9e63fa8":"# To know more about Tupple\n??tuple","f6801435":"#help(tuple)\nhelp(tuple.count)","f5b1feef":"x = [1,2,2,'x','y', 10.88]\nx","199649d8":"type(x)","c9de7050":"x.append(100)\nx","72b6d443":"x.sort() # Will not work as many data type elements are there in this list X.","bfad83c8":"def myfun(e):\n    if type(e) != int and type(e) != float:\n        return len(e)\n    else:\n        return e","88d66961":"x.sort(key = myfun)\nx","f31973f9":"s = {'s', 'p', 'a', 'm', 'p', 'a'}\ns","1665e549":"type(s)","2cc71d3f":"# Make an empty Set\ns = {}\ntype(s)","b420f1b6":"s = set()\ntype(s)","3b681ea5":"# Instead of {} you can use 'set' keyword also but you have to pass one array\/list but not individual elements.\naa = set('s', 'p', 'a', 'm', 'p', 'a')\naa","b3b36714":"x","a456a4dd":"aa = set(x)\naa","ea80b1b4":"help(range)","63c0d248":"# Range\nrange(5)                  # produces  five values 0, 1, 2, 3, 4\nrange(1, 5)              # produces  four values 1, 2, 3, 4\nrange(2, 4)              # produces  two values 2, 3\nrange(1, 10, 2)        # produces values starting from zero to nine , at step of 2 i.e. 1, 3, 5, 7, 9\nrange(9, 2, -1)  # produces values starting from nine to three , at step of -1 i.e. 9, 8, 7, 6, 5, 4, 3\n\n","7d84a47c":"for i in range(10):\n        print(i)","b13534e6":"x","c70726fc":"for i in x:\n    print(i)","edd7d022":"for i in range(len(x)):\n    print(x[i])","3ac7ad66":"for i in range(len(x)):\n    print(i, x[i])","7ad5cb96":"x = \"Binod Suman youtube\"\nprint(x[0]) # First character \nprint(x[0:1]) #first character, but we have explicitly set the end character\nprint(x[0:2]) #first two characters","f9b04a14":"x[-1]","bab19b9f":"x[-2]","0fa25b05":"x[:3]","1bac04e9":"x[3:]","2ee6f008":"len(x)","83e82f79":"for i in x:\n    print(i)","95f8ab37":"x.upper()","ecf7c75e":"x.lower()","2415544d":"x.split(\" \")","4f0f9b0e":"a = x.split()","fdbb61bd":"len(a)","9cb9eaad":"idName = {1:\"Binod\", 2:\"Bills\", 3:\"Nandan\", 4:\"Narayan\"}","da5046a1":"idName","f52652e1":"type(idName)","b813cc99":"idName.keys()","3dd37a8b":"idName.values()","9ad7b768":"idName[2]","35471199":"for i in idName.keys():\n    print(idName[i])","429ea03e":"for i in idName.keys():\n    print(i)","1f51ce8b":"idName.items()","d6e22c0c":"for a,b in idName.items():\n    print(a,b)\n    #print(b)","83d0fd96":"sales_data = {\n'price': 9.50,\n'num_items': 10,\n'item': 'pencil'}\n\nprint(sales_data)","1f5d63fe":"sales_formatter = '{} Bought {} items at a each price of {}  for a total of {}'","0467235c":"print(sales_formatter.format(sales_data['item'],\n                             sales_data['num_items'],\n                             sales_data['price'],\n                             sales_data['num_items']*sales_data['price']))\n\n\n","0c7f2525":"import datetime as dt\nimport time as tm","1c1d006f":"dt.date.today()","598e5c15":"tm.time()","c807c452":"dtnow = dt.datetime.fromtimestamp(tm.time())\ndtnow","db7bf6ea":"%timeit L = [n ** 2 for n in range(1000)]","8167a8bc":"L = [n ** 2 for n in range(1000)]","a292ba7c":"%history","e0e2afbd":"%history -n 1-10","af2579c2":"# Dictionaries key value pair","097004a6":"# How to write Fuction in Python","86020bcf":"# Time and Date","85bac7b4":"# String","5afbbb65":"# Set","c8050ab4":"# Built in data types\n### Integer\n### String\n### Float\n### Boolean","83621d01":"# Timing code execution ","1c9081fd":"# Built in Data Structure\n### String \"\"\n### Tuple ()\n### List []\n### Set {}\n### Dictionary {a,b}\n\n","5796ebb1":"# \"type\" function to know what is object type","74fcbdae":"# Loop","091f0430":"* # Function in Python\n* # \"type\" function \n* # Build in Data Structure (List, Set, Tuple, Dict)\n* # String Operations\n* # Loop in different ways\n* # Time and Date","7cb2fd30":"# Thank you, please share your feedback, comment and Vote :)","a188bf82":"# List"}}