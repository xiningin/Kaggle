{"cell_type":{"0babdfbf":"code","18042ea7":"code","44da0089":"code","4d43e365":"code","de43b77c":"code","9afaf3dd":"code","f43ade55":"code","ddbee7c9":"code","423008ba":"code","b36f5b44":"code","f3d11ee8":"code","faa571c1":"code","6ab23918":"code","fdf04895":"code","e2aab439":"code","7e453490":"code","06afb62c":"code","5e1c8f54":"code","877ef332":"code","25c49403":"code","268f8af6":"code","796f595d":"code","585d6bb3":"code","0ab60a7e":"code","8469fe5c":"code","295be193":"code","8b54399e":"code","4ff2c436":"code","c7362809":"code","01cfef76":"code","0924c343":"code","701ad808":"code","d24d898d":"code","252ab22f":"code","b1435908":"code","f3fd0316":"code","5e5237af":"code","f857fe4b":"code","a5dcad02":"code","6510bef9":"code","32774466":"code","1e25a574":"code","ca666750":"code","22c48d36":"code","85a46778":"code","5fe89d38":"code","1b266b9a":"code","e7630883":"code","1e19d561":"code","0eecaca8":"code","edf3e37f":"code","0beec984":"code","0cd8a82c":"code","48af4427":"code","6fa554c4":"code","5a805002":"code","984382d0":"code","6eb60d17":"code","d98da166":"code","d9448f18":"code","caacad51":"code","67a880a8":"code","0d5b1715":"code","fd5961f1":"code","cfea8d2c":"code","6446c22b":"code","c1c26f31":"code","3ade522c":"code","beecda77":"code","15e58b13":"code","2b0cf9d7":"code","51b15ad0":"code","88d2250c":"code","155e9bab":"code","700691c8":"code","5d5bc962":"code","b24ff41d":"code","3f7391f7":"code","a9238539":"code","eb7f0ec6":"code","79865a6b":"code","4009828e":"code","93543407":"code","c1d501d3":"code","a609e476":"code","2f8d80d2":"code","18bf4cf1":"code","b7cf3214":"code","7f210cfc":"code","71f6bb6f":"code","fc8c9f94":"code","c75c1465":"code","7ad0ef6c":"code","a9474622":"code","daffa4c3":"code","658f14ac":"code","5d49ed92":"code","2d99eb2c":"code","c630259a":"code","f9c9c18e":"code","1a62daf0":"code","9c0a4eca":"code","11d282ed":"code","e1ebc151":"code","e5489c57":"code","1d6fc883":"code","907000d8":"code","6cacff85":"code","c4da03f7":"markdown","4e1a6ed1":"markdown","737f2746":"markdown","e5150e9d":"markdown","1c06c199":"markdown","5e466598":"markdown","769641ca":"markdown","a5817668":"markdown","64e3782e":"markdown","7402fb47":"markdown","19b0c003":"markdown","13787a81":"markdown","f62a938d":"markdown","edc390e1":"markdown","0e28b81a":"markdown","feda6dd9":"markdown","6a8ede6b":"markdown","57bc1a77":"markdown","b9a401d7":"markdown","3c1ae4c2":"markdown","100c27e6":"markdown","1823ef8a":"markdown","5fd59a48":"markdown","cd1d97c4":"markdown","19c3e1f3":"markdown","3196b4c9":"markdown","b5508672":"markdown","62b5f893":"markdown","e9efb7b2":"markdown","a373cca6":"markdown","5a7094f1":"markdown","5bc35ef9":"markdown","911d79fb":"markdown","df7ecf3b":"markdown","91fb9f69":"markdown","8a40766c":"markdown","77f12713":"markdown","d19ac0fe":"markdown","74d03f2d":"markdown","0e15fd9c":"markdown","0dcd5b19":"markdown","3ea64225":"markdown","b3f95758":"markdown","baef192e":"markdown","ed86d113":"markdown","b07a2598":"markdown","3e6a6640":"markdown","bafc5297":"markdown","4b1dc2b1":"markdown","9461192e":"markdown","36781c11":"markdown","f82f5375":"markdown","1f1607e9":"markdown","0cd6aaa5":"markdown","249843af":"markdown","b90934a2":"markdown","402b2ec6":"markdown","9e594020":"markdown","110a61c3":"markdown","16468773":"markdown","23e24993":"markdown","0b6c30c7":"markdown","fccff153":"markdown","1d688f23":"markdown","7532d9d4":"markdown","4d5c903a":"markdown","d8646369":"markdown","5a1486d2":"markdown","a4a24daa":"markdown","4fc2edae":"markdown","f2a80edf":"markdown","6efce4e1":"markdown","9670c77c":"markdown","029cdd3c":"markdown","1fd7085a":"markdown","5880cf9e":"markdown","f240100c":"markdown","66b3053f":"markdown","3167dbfd":"markdown","ec34d23c":"markdown","de2d3de7":"markdown","dea5e7cd":"markdown","793c3ab0":"markdown","7a54e90e":"markdown","003fbc90":"markdown"},"source":{"0babdfbf":"import pandas as pd\ntrain_df = pd.read_csv(\"..\/input\/datathon\/assessment\/Assessment Data\/Assessment Train Data.csv\")\nresult_df = pd.read_csv(\"..\/input\/datathon\/assessment\/Assessment Data\/Assessment Result File.csv\")\nprint(train_df.shape)\nprint(result_df.shape)\ntrain_df.head()","18042ea7":"train_df.dtypes","44da0089":"train_df['Departure_YMD_LMT'] = pd.to_datetime(train_df['Departure_YMD_LMT'], format='%Y%m%d')\ntrain_df['Operation_YMD_LMT'] = pd.to_datetime(train_df['Operation_YMD_LMT'], format='%Y%m%d')\nresult_df['Departure_YMD_LMT'] = pd.to_datetime(result_df['Departure_YMD_LMT'], format='%Y%m%d')\nresult_df['Operation_YMD_LMT'] = pd.to_datetime(result_df['Operation_YMD_LMT'], format='%Y%m%d')","4d43e365":"train_df.dtypes","de43b77c":"train_df.describe()","9afaf3dd":"for col_name in train_df.columns:\n    if train_df[col_name].dtype.name == 'object':\n        train_df[col_name] = train_df[col_name].astype('category')\n        result_df[col_name] = result_df[col_name].astype('category')","f43ade55":"train_df.dtypes","ddbee7c9":"for col_name in train_df.columns:\n    if train_df[col_name].dtype.name == 'category':\n        print(col_name, \":\", train_df[col_name].unique())","423008ba":"dict = {\"JW\": 'Online',\n        \"TW\": 'Online',\n        \"TS\": 'Mobile',\n        \"JM\": 'Mobile',\n        \"TY\":\"Counter\",\n        \"QC\":\"Counter\",\n        \"SC\":\"Kiosks\",\n        \"IR\":\"Other\",\n        \"?\":\"Other\",\n        \"IA\":\"Other\",\n        \"BD\":\"Other\",\n        \"CC\":\"Other\",\n        \"QR\":\"Other\",\n        \"QP\":\"Other\",\n        \"QA\":\"Other\"\n        }\ntrain_df['Operation_Channel_Group'] = train_df['Operation_Channel'].map(dict)\ntrain_df['Operation_Channel_Group'].unique()","b36f5b44":"result_df['Operation_Channel_Group'] = result_df['Operation_Channel'].map(dict)\nresult_df['Operation_Channel_Group'].unique()","f3d11ee8":"train_df[\"Operation_Channel_Group\"] = train_df[\"Operation_Channel_Group\"].astype('category')\nresult_df[\"Operation_Channel_Group\"] = result_df[\"Operation_Channel_Group\"].astype('category')","faa571c1":"(train_df.isnull().mean()*100).round(4)","6ab23918":"(result_df.isnull().mean()*100).round(4)","fdf04895":"import numpy as np\ndef unknown_perc(df):\n  print(\"Column Name\\t Percentage\")\n  for col_name in df.columns:\n        if df[col_name].dtype.name == 'category' and (df[col_name] == \"?\").any():\n          count = df[col_name].value_counts(dropna=False)['?']\n          percentage = (count\/len(df)*100).round(3)\n          print(col_name,\"\\t\", percentage)\n  return\n        \nunknown_perc(train_df)","e2aab439":"unknown_perc(result_df)","7e453490":"train_df['Operation_Sonic_Code_Flag'] = np.where(train_df['Operation_Sonic_Code']=='?', '0', '1')\ntrain_df['Operation_Sonic_Code_Flag'] = train_df['Operation_Sonic_Code_Flag'].astype(int)\n#train_df['Terminal_Number_Flag'] = np.where(train_df['Terminal_Number']=='?', '0', '1')\n#train_df['Terminal_Number_Flag'] = train_df['Terminal_Number_Flag'].astype(int)\nresult_df['Operation_Sonic_Code_Flag'] = np.where(result_df['Operation_Sonic_Code']=='?', '0', '1')\nresult_df['Operation_Sonic_Code_Flag'] = result_df['Operation_Sonic_Code_Flag'].astype(int)\n#result_df['Terminal_Number_Flag'] = np.where(result_df['Terminal_Number']=='?', '0', '1')\n#result_df['Terminal_Number_Flag'] = result_df['Terminal_Number_Flag'].astype(int)","06afb62c":"import numpy as np\n#train_df['Terminal_Number'] = train_df['Terminal_Number'].replace('?', np.nan)\n#train_df['Operation_Channel'] = train_df['Operation_Channel'].replace('?', np.nan)\ntrain_df['Passenger_Title'] = train_df['Passenger_Title'].replace('?', np.nan)\ntrain_df['Passenger_Gender'] = train_df['Passenger_Gender'].replace('?', np.nan)\ntrain_df['Inbound_Departure_Airport'] = train_df['Inbound_Departure_Airport'].replace('?', \"Unknown\")\ntrain_df['Outbound_Arrival_Airport'] = train_df['Outbound_Arrival_Airport'].replace('?', \"Unknown\")\ntrain_df['Cabin_Class'] = train_df['Cabin_Class'].replace('?', np.nan)\ntrain_df[\"Operation_Initials\"] = train_df[\"Operation_Initials\"].replace(\"?\",np.nan)\ntrain_df[\"Operation_Sonic_Code\"] = train_df[\"Operation_Sonic_Code\"].replace(\"?\",np.nan)\n\n#result_df['Terminal_Number'] = result_df['Terminal_Number'].replace('?', np.nan)\n#result_df['Operation_Channel'] = result_df['Operation_Channel'].replace('?', np.nan)\nresult_df['Passenger_Title'] = result_df['Passenger_Title'].replace('?', np.nan)\nresult_df['Passenger_Gender'] = result_df['Passenger_Gender'].replace('?', np.nan)\nresult_df['Inbound_Departure_Airport'] = result_df['Inbound_Departure_Airport'].replace('?', \"Unknown\")\nresult_df['Outbound_Arrival_Airport'] = result_df['Outbound_Arrival_Airport'].replace('?', \"Unknown\")\nresult_df['Cabin_Class'] = result_df['Cabin_Class'].replace('?', np.nan)\nresult_df[\"Operation_Initials\"] = train_df[\"Operation_Initials\"].replace(\"?\",np.nan)\nresult_df[\"Operation_Sonic_Code\"] = result_df[\"Operation_Sonic_Code\"].replace(\"?\",np.nan)","5e1c8f54":"(train_df.isnull().mean()*100).round(4)","877ef332":"(result_df.isnull().mean()*100).round(4)","25c49403":"#train_df2 = train_df.copy()\n#result_df2 = result_df.copy()\ntrain_df = train_df.drop(columns = [ \"Departure_Airport\", \"Operation_Sonic_Code\"]) #\"Terminal_Number\", \nresult_df = result_df.drop(columns = [\"Departure_Airport\", \"Operation_Sonic_Code\"]) #\"Terminal_Number\", ","268f8af6":"# Replace missing values whose titles are MISTER with M\ntrain_df.loc[(train_df.Passenger_Gender.isna() ) & (train_df.Passenger_Title=='MISTER'),\"Passenger_Gender\"] = \"M\"\nresult_df.loc[(result_df.Passenger_Gender.isna() ) & (result_df.Passenger_Title=='MISTER'),\"Passenger_Gender\"] = \"M\"\n\n# Replace missing values whose titles are MISS or MISSES with F\ntrain_df.loc[(train_df.Passenger_Gender.isna() ) & ((train_df.Passenger_Title=='MISS') | (train_df.Passenger_Title=='MISSES')) ,\"Passenger_Gender\"] = \"F\"\nresult_df.loc[(result_df.Passenger_Gender.isna() ) & ((result_df.Passenger_Title=='MISS') | (result_df.Passenger_Title=='MISSES')) ,\"Passenger_Gender\"] = \"F\"\n\nsum(train_df[\"Passenger_Gender\"].isnull())","796f595d":"train_df.groupby(\"Operation_Channel_Group\")['Passenger_Gender'].apply(lambda x: x.value_counts().index[0])#.reset_index()","585d6bb3":"train_df.groupby(\"Operation_Channel_Group\")['Passenger_Gender'].apply(lambda x: x.value_counts())","0ab60a7e":"result_df.groupby(\"Operation_Channel_Group\")['Passenger_Gender'].apply(lambda x: x.value_counts())","8469fe5c":"train_df['Passenger_Gender'] = train_df['Passenger_Gender'].replace(np.nan, \"M\")\ntrain_df['Passenger_Gender'].unique()","295be193":"result_df['Passenger_Gender'] = train_df['Passenger_Gender'].replace(np.nan, \"M\")\nresult_df['Passenger_Gender'].unique()","8b54399e":"train_df.groupby(\"Operation_Channel_Group\")['Passenger_Title'].apply(lambda x: x.value_counts())","4ff2c436":"result_df.groupby(\"Operation_Channel_Group\")['Passenger_Title'].apply(lambda x: x.value_counts())","c7362809":"train_df['Passenger_Title'] = train_df['Passenger_Title'].replace(np.nan, \"MISTER\")\ntrain_df['Passenger_Title'].unique()","01cfef76":"result_df['Passenger_Title'] = result_df['Passenger_Title'].replace(np.nan, \"MISTER\")\nresult_df['Passenger_Title'].unique()","0924c343":"train_df.groupby(\"Operation_Channel_Group\")['Cabin_Class'].apply(lambda x: x.value_counts())","701ad808":"train_df[\"Cabin_Class\"].unique()","d24d898d":"result_df.groupby(\"Operation_Channel_Group\")['Cabin_Class'].apply(lambda x: x.value_counts())","252ab22f":"train_df['Cabin_Class'] = train_df['Cabin_Class'].replace(np.nan, \"Y\")\ntrain_df['Cabin_Class'].unique()","b1435908":"result_df['Cabin_Class'] = result_df['Cabin_Class'].replace(np.nan, \"Y\")\nresult_df['Cabin_Class'].unique()","f3fd0316":"train_df.groupby(\"Operation_Channel_Group\")['Operation_Initials'].apply(lambda x: x.value_counts().index[0])","5e5237af":"result_df.groupby(\"Operation_Channel_Group\")['Operation_Initials'].apply(lambda x: x.value_counts().index[0])","f857fe4b":"result_df['Operation_Initials'] = result_df['Operation_Initials'].replace(np.nan, \"KS\")\nresult_df['Operation_Initials'].unique()","a5dcad02":"train_df.loc[(train_df.Operation_Channel_Group == \"Counter\") & (train_df.Operation_Initials.isna()),\"Operation_Initials\"] = \"KS\"\ntrain_df.loc[(train_df.Operation_Channel_Group == \"Kiosks\") & (train_df.Operation_Initials.isna()),\"Operation_Initials\"] = \"SC\"\ntrain_df.loc[(train_df.Operation_Channel_Group != \"Kiosks\") & (train_df.Operation_Channel_Group != \"Counter\") & (train_df.Operation_Initials.isna()),\"Operation_Initials\"] = \"MK\"","6510bef9":"train_df['Early_Check_In'] = (train_df.Departure_YMD_LMT - train_df.Operation_YMD_LMT)\ntrain_df['Early_Check_In'] = (train_df['Early_Check_In']\/86400000000000).astype(int)\ntrain_df['Early_Check_In'].unique()","32774466":"train_df[train_df['Early_Check_In']>100].sort_values('Operation_YMD_LMT')","1e25a574":"train_df.loc[train_df.Early_Check_In > 100, 'Early_Check_In_Status'] = 'Peculiar'\ntrain_df.loc[(train_df.Early_Check_In == 0) | (train_df.Early_Check_In == -1), 'Early_Check_In_Status'] = 'On-time'\ntrain_df.loc[(train_df.Early_Check_In == 1) | (train_df.Early_Check_In == 2) | (train_df.Early_Check_In == 3), 'Early_Check_In_Status'] = 'Early'","ca666750":"result_df['Early_Check_In'] = (result_df.Departure_YMD_LMT - result_df.Operation_YMD_LMT)\nresult_df['Early_Check_In'] = (result_df['Early_Check_In']\/86400000000000).astype(int)\nresult_df.loc[result_df.Early_Check_In > 100, 'Early_Check_In_Status'] = 'Peculiar'\nresult_df.loc[(result_df.Early_Check_In == 0) | (result_df.Early_Check_In == -1), 'Early_Check_In_Status'] = 'On-time'\nresult_df.loc[(result_df.Early_Check_In == 1) | (result_df.Early_Check_In == 2) | (result_df.Early_Check_In == 3), 'Early_Check_In_Status'] = 'Early'","22c48d36":"train_df['Direct_Flight'] = np.where((train_df.Inbound_Departure_Airport == 'Unknown') & (train_df.Outbound_Arrival_Airport == 'Unknown'), 1, 0)\nresult_df['Direct_Flight'] = np.where((result_df.Inbound_Departure_Airport == 'Unknown') & (result_df.Outbound_Arrival_Airport == 'Unknown'), 1, 0)","85a46778":"train_df.loc[(train_df.Operation_Airport == train_df.Inbound_Departure_Airport), 'Checkin_Inbound'] = 1\ntrain_df['Checkin_Inbound'] = train_df['Checkin_Inbound'].replace(np.nan, 0)\n\nresult_df.loc[(result_df.Operation_Airport == result_df.Inbound_Departure_Airport), 'Checkin_Inbound'] = 1\nresult_df['Checkin_Inbound'] = result_df['Checkin_Inbound'].replace(np.nan, 0)\n\n\n\ntrain_df.loc[(train_df.Operation_Airport == train_df.Outbound_Arrival_Airport), 'Checkin_Outbound'] = 1\ntrain_df['Checkin_Outbound'] = train_df['Checkin_Outbound'].replace(np.nan, 0)\n\nresult_df.loc[(result_df.Operation_Airport == result_df.Outbound_Arrival_Airport), 'Checkin_Outbound'] = 1\nresult_df['Checkin_Outbound'] = result_df['Checkin_Outbound'].replace(np.nan, 0)\n","5fe89d38":"train_df.groupby('Operation_Airport').count().sort_values('Operation_Initials', ascending=False).head(10)\n","1b266b9a":"result_df.groupby('Operation_Airport').count().sort_values('Operation_Initials', ascending=False).head(10)\n","e7630883":"train_df['Operation_Airport_Reduced'] = np.where((train_df.Operation_Airport == 'KDT') | (train_df.Operation_Airport == 'IST') | (train_df.Operation_Airport == 'SKW') | (train_df.Operation_Airport == 'EST'), train_df.Operation_Airport, 'OTHERS')\nresult_df['Operation_Airport_Reduced'] = np.where((result_df.Operation_Airport == 'KDT') | (result_df.Operation_Airport == 'IST') | (result_df.Operation_Airport == 'SKW') | (result_df.Operation_Airport == 'EST'), result_df.Operation_Airport, 'OTHERS')","1e19d561":"train_df.groupby('Operation_Initials').count().sort_values('Operation_Airport', ascending=False).head(10)","0eecaca8":"result_df.groupby('Operation_Initials').count().sort_values('Operation_Airport', ascending=False).head(10)\n","edf3e37f":"train_df['Operation_Initials_Reduced'] = np.where((train_df.Operation_Initials == 'KS') | (train_df.Operation_Initials == 'MK') | (train_df.Operation_Initials == 'SC') | (train_df.Operation_Initials == 'Q7') | (train_df.Operation_Initials == 'EY') | (train_df.Operation_Initials == 'LK'), train_df.Operation_Initials, 'OTHERS')\nresult_df['Operation_Initials_Reduced'] = np.where((result_df.Operation_Initials == 'KS') | (result_df.Operation_Initials == 'MK') | (result_df.Operation_Initials == 'SC') | (result_df.Operation_Initials == 'Q7') | (result_df.Operation_Initials == 'EY') | (result_df.Operation_Initials == 'LK'), result_df.Operation_Initials, 'OTHERS')\n","0beec984":"train_df.groupby('Operation_Initials_Reduced').count().sort_values('Operation_Airport', ascending=False).head(10)","0cd8a82c":"train_df.groupby('Inbound_Departure_Airport').count().sort_values('Operation_Airport', ascending=False).head(10)","48af4427":"result_df.groupby('Inbound_Departure_Airport').count().sort_values('Operation_Airport', ascending=False).head(10)","6fa554c4":"train_df['Inbound_Departure_Airport_Reduced'] = np.where((train_df.Inbound_Departure_Airport == 'Unknown') | (train_df.Inbound_Departure_Airport == 'IST') | (train_df.Inbound_Departure_Airport == 'SKW') | (train_df.Inbound_Departure_Airport == 'EST'), train_df.Inbound_Departure_Airport, 'OTHERS')\nresult_df['Inbound_Departure_Airport_Reduced'] = np.where((result_df.Inbound_Departure_Airport == 'Unknown') | (result_df.Inbound_Departure_Airport == 'IST') | (result_df.Inbound_Departure_Airport == 'SKW') | (result_df.Inbound_Departure_Airport == 'EST'), result_df.Inbound_Departure_Airport, 'OTHERS')","5a805002":"train_df.groupby('Outbound_Arrival_Airport').count().sort_values('Operation_Airport', ascending=False).head(10)","984382d0":"result_df.groupby('Outbound_Arrival_Airport').count().sort_values('Operation_Airport', ascending=False).head(10)","6eb60d17":"train_df['Outbound_Arrival_Airport_Reduced'] = np.where((train_df.Outbound_Arrival_Airport == 'Unknown') | (train_df.Outbound_Arrival_Airport == 'KDT'), train_df.Outbound_Arrival_Airport, 'OTHERS')\nresult_df['Outbound_Arrival_Airport_Reduced'] = np.where((result_df.Outbound_Arrival_Airport == 'Unknown') | (result_df.Outbound_Arrival_Airport == 'KDT'), result_df.Outbound_Arrival_Airport, 'OTHERS')","d98da166":"import datetime\ntrain_df['Weekend'] = [x in [5,6] for x in train_df.Departure_YMD_LMT.dt.weekday]\ntrain_df['Weekend'] = train_df['Weekend'].replace(True, int(1))\ntrain_df['Weekend'] = train_df['Weekend'].replace(False, int(0))\nresult_df['Weekend'] = [x in [5,6] for x in result_df.Departure_YMD_LMT.dt.weekday]\nresult_df['Weekend'] = result_df['Weekend'].replace(True, int(1))\nresult_df['Weekend'] = result_df['Weekend'].replace(False, int(0))","d9448f18":"train_df.Weekend.head()","caacad51":"train_df['Departure Day'] = train_df['Departure_YMD_LMT'].dt.weekday_name\n\nresult_df['Departure Day'] = result_df['Departure_YMD_LMT'].dt.weekday_name\n\ntrain_df['Departure Day'].head()","67a880a8":"train_df.insert(1,'Day_of_Month','foo')\ntrain_df['Day_of_Month'] = train_df['Departure_YMD_LMT'].dt.day\n\nresult_df.insert(1,'Day_of_Month','foo')\nresult_df['Day_of_Month'] = result_df['Departure_YMD_LMT'].dt.day\n\ntrain_df['Day_of_Month'].head()","0d5b1715":"dict = {\"Y\": 1,\n        \"C\": 0\n        }\ntrain_df['Economy_Class'] = train_df['Cabin_Class'].map(dict)\ntrain_df = train_df.drop(\"Cabin_Class\", axis = 1)\nresult_df['Economy_Class'] = result_df['Cabin_Class'].map(dict)\nresult_df = result_df.drop(\"Cabin_Class\", axis = 1)\ntrain_df['Economy_Class'].unique()","fd5961f1":"train_df['Fly_Light'] = np.where(train_df['Passenger_Baggage_Count']==0, 1, 0)\nresult_df['Fly_Light'] = np.where(result_df['Passenger_Baggage_Count']==0, 1, 0)","cfea8d2c":"train_df = train_df.drop(columns = [\"Departure_YMD_LMT\", \n                                    \"Operation_YMD_LMT\", \n                                    \"Operation_Initials\", \n                                    \"Operation_Airport\",\n                                    \"Inbound_Departure_Airport\",\n                                    \"Outbound_Arrival_Airport\",\n                                    \"Terminal_Name\",\n                                    \"Early_Check_In\"], axis =1) ","6446c22b":"for col_name in train_df.columns:\n    if train_df[col_name].dtype.name == 'object':\n        train_df[col_name] = train_df[col_name].astype('category')\n        result_df[col_name] = result_df[col_name].astype('category')","c1c26f31":"train_df.dtypes","3ade522c":"train_onehot = train_df.copy()\n#train_onehot.drop(columns = [\"Operation_Initials\", \"Terminal_Name\"], axis =1)\nresult_onehot = result_df.copy()\nfor cols in train_df.columns: #leave as traidf!!!\n  if train_onehot[cols].dtype.name == 'category':\n    print(cols)\n    one_hot = pd.get_dummies(train_df[cols], prefix = cols)\n    train_onehot = train_onehot.drop(cols,axis = 1)\n    train_onehot = train_onehot.join(one_hot)\n  ","beecda77":"train_onehot.columns","15e58b13":"import seaborn as sns\ncorr = train_df.corr()\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","2b0cf9d7":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1,figsize=(10, 8))\ntrain_df[\"Operation_Count\"].hist(bins=500, color=\"blue\", ax=ax)\n","51b15ad0":"import seaborn as sns\nsns.barplot(x='Departure Day',y='Operation_Count',data=train_df)","88d2250c":"sns.barplot(x='Weekend',y='Operation_Count',data=train_df)","155e9bab":"sns.barplot(x='Direct_Flight',y='Operation_Count',data=train_df)","700691c8":"sns.barplot(x='Passenger_Baggage_Count',y='Operation_Count',data=train_df)","5d5bc962":"sns.barplot(x='Fly_Light',y='Operation_Count',data=train_df)","b24ff41d":"sns.distplot(train_df['Passenger_Baggage_Weight'])","3f7391f7":"import lightgbm as lgb\n\n#train_onehot = train_onehot.drop(columns = [\"Departure_YMD_LMT\", \"Operation_YMD_LMT\", \"Operation_Initials\", \"Operation_Airport\"], axis =1)\ntarget = train_onehot[\"Operation_Count\"]\ntrain = train_onehot.drop([\"Operation_Count\"], axis = 1)\n#lightGBM model fit\ngbm = lgb.LGBMRegressor()\ngbm.fit(train, target)\ngbm.booster_.feature_importance()\n\"\"\n# importance of each attribute\nfea_imp_ = pd.DataFrame({'cols':train.columns, 'fea_imp':gbm.feature_importances_})\nfea_imp_.loc[fea_imp_.fea_imp > 0].sort_values(by=['fea_imp'], ascending = False)","a9238539":"from sklearn.model_selection import train_test_split\n# define target\ny = train_onehot.Operation_Count\n# define features\nX = train_onehot.drop(columns = [\"Operation_Count\"])\n# stratified sampling\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) # stratify=X_train.Operation_Channel_Group, \nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.20, random_state=42)\nprint('Training Features Shape:', X_train.shape)\nprint('Training Labels Shape:', y_train.shape)\nprint('Validation Features Shape:', X_val.shape)\nprint('Validation Labels Shape:', y_val.shape)\nprint('Testing Features Shape:', X_test.shape)\nprint('Testing Labels Shape:', y_test.shape)","eb7f0ec6":"y_train_log = np.where(y_train == 1, 1, 0)\ny_val_log = np.where(y_val == 1, 1, 0)\ny_test_log = np.where(y_test == 1, 1, 0)","79865a6b":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train_log)","4009828e":"X_val['Prediction1'] = logreg.predict(X_val)\ny_val_log_pred=X_val['Prediction1']","93543407":"X_train_multi = X_train[y_train_log == 0]\ny_train_multi = y_train[y_train_log == 0]\n\nX_val_multi = X_val[y_val_log_pred == 0]\ny_val_multi = y_val[y_val_log_pred == 0]","c1d501d3":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import RidgeCV, LassoCV, Ridge, Lasso\n\nreg = LassoCV()\nreg.fit(X_train_multi, y_train_multi)\nprint(\"Best alpha using built-in LassoCV: %f\" % reg.alpha_)\nprint(\"Best score using built-in LassoCV: %f\" %reg.score(X,y))\ncoef = pd.Series(reg.coef_, index = X.columns)\n\n\n#regressor = LinearRegression()  \n#regressor.fit(X_train_multi, y_train_multi) #training the algorithm","a609e476":"print(\"Lasso picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")","2f8d80d2":"imp_coef = coef.sort_values()\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Feature importance using Lasso Model\")","18bf4cf1":"cols = ['Fly_Light', 'Operation_Initials_Reduced_SC', 'Direct_Flight', 'Operation_Initials_Reduced_EY', 'Economy_Class', 'Passenger_Gender_M', \n        'Inbound_Departure_Airport_Reduced_Unknown', 'Early_Check_In_Status_Early', 'Operation_Channel_TS', 'SWC_FLY']","b7cf3214":"X_train_multi = X_train_multi[cols]\nX_val_multi = X_val[cols]","7f210cfc":"regressor = LinearRegression()  \nregressor.fit(X_train_multi, y_train_multi) #training the algorithm\n\nX_val['Prediction2'] = regressor.predict(X_val_multi)","71f6bb6f":"X_val['Prediction2'] = X_val['Prediction2'].round()\ny_val_multi_pred= X_val['Prediction2']","fc8c9f94":"X_val['Prediction2'] = X_val['Prediction2'].astype('int64')","c75c1465":"X_val['Prediction_fin'] = np.where((X_val.Prediction1 == 1), 1, X_val.Prediction2)","7ad0ef6c":"X_val['Prediction_fin'] = X_val['Prediction_fin'].astype('int64')","a9474622":"from sklearn.metrics import accuracy_score\n\nscore = accuracy_score(X_val['Prediction_fin'], y_val)\nscore\n","daffa4c3":"# Calculate the absolute errors\nerrors = abs(X_val['Prediction_fin'] - y_val)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ y_val)\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 2), '%.')","658f14ac":"X_test['Prediction1'] = logreg.predict(X_test)\ny_test_log_pred=X_test['Prediction1']","5d49ed92":"X_test_multi = X_test[cols]","2d99eb2c":"X_test['Prediction2'] = regressor.predict(X_test_multi)","c630259a":"X_test['Prediction2'] = X_test['Prediction2'].round()\ny_test_multi_pred= X_test['Prediction2']","f9c9c18e":"X_test['Prediction2'] = X_test['Prediction2'].astype('int64')","1a62daf0":"X_test['Prediction_finito'] = np.where((X_test.Prediction1 == 1), 1, X_test.Prediction2)","9c0a4eca":"X_test['Prediction_finito'] = X_test['Prediction_finito'].astype('int64')","11d282ed":"# Calculate the absolute errors\nerrors = abs(X_test['Prediction_finito'] - y_test)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ y_test)\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 2), '%.')","e1ebc151":"result_df = result_df.drop(columns = [\"Departure_YMD_LMT\", \n                                    \"Operation_YMD_LMT\", \n                                    \"Operation_Initials\", \n                                    \"Operation_Airport\",\n                                    \"Inbound_Departure_Airport\",\n                                    \"Outbound_Arrival_Airport\",\n                                    \"Terminal_Name\",\n                                    \"Early_Check_In\",\n                                       \"Operation_Count\"], axis =1)","e5489c57":"result_onehot = result_df.copy()\nfor cols in result_df.columns: #leave as train_df!!!\n  if result_onehot[cols].dtype.name == 'category':\n    print(cols)\n    one_hot = pd.get_dummies(train_df[cols], prefix = cols)\n    result_onehot = result_onehot.drop(cols,axis = 1)\n    result_onehot = result_onehot.join(one_hot)\n","1d6fc883":"result_onehot['Prediction1'] = logreg.predict(result_onehot)\n","907000d8":"result_onehot_multi = result_onehot[cols]","6cacff85":"result_onehot['Prediction2'] = regressor.predict(result_onehot_multi)","c4da03f7":"## Correlation Matrix","4e1a6ed1":"Logistic Regression is employed:","737f2746":"## Feature Generation","e5150e9d":"Chosen columns are used in linear regression:","1c06c199":"We see that y values are dominated by '1's. Our first aim is to classify the y values as '1's and 'others'.  Then we will use linear regression to find a relation among 'others'.\n","5e466598":"## Encoding Categorical Features","769641ca":" **PART 2 : LINEAR REGRESSION**","a5817668":"#### Imputing Passenger Gender\n\nFirst, we used *Passenger Title* to impute missing values in the gender column. We replaced unknown genders whose titles are *MISTER*, *MISS* and *MISSES* with male and females, respectively. Later, we decided *Operation Channel Group* based imputation for the rest. So we grouped the dataframe by this column and found most frequent observations for the *Passenger Gender* column.","64e3782e":"## References\n\n\n1.   [Impute Missing Values](https:\/\/jamesrledoux.com\/code\/imputation)\n2.   [Is it better to drop or impute values from data sets when applying ML, or would it be better to label them as 'missing' for categorical variables?](https:\/\/www.quora.com\/Is-it-better-to-drop-or-impute-values-from-data-sets-when-applying-ML-or-would-it-be-better-to-label-them-as-missing-for-categorical-variables)\n\n","7402fb47":"## Model Building\n\n### Baseline Model: Random Forest\n\nWe first used all the features avaible.","19b0c003":"### Operation Airport Reduced\nWe now reduce the number of different values in Operation_Airport variable for the most frequent ones since there is a huge drop after *EST* airport.","13787a81":"The values that are different than '1' are set to zero \n\n","f62a938d":"### Missing Value Handling\n\nColumn percentage of null values in the training and test sets are printed below. At first glance,there are only null values in the *Operation Initials* column, however some unknown values are encoded as \"?\" in the datasets.","edc390e1":"## Test and Evaluation\n\n","0e28b81a":"### Drop Unnecessary Columns","feda6dd9":"#THY Travel Datathon Preselection Case Study\n\nby Duygu Can, Meri\u00e7 Pakkan, Neslihan Oflaz, Ahad Khaleghi Ardabili, Ak\u0131n Erdem\n\n\nFlying passengers can check-in through the web site, applications, kiosks and counters. In this case study content, the train data including the number of seven-month passenger check-in operations is provided. We want you to estimate the number of channels (column Operation_Count) in the csv file attached.","6a8ede6b":"#### Imputing Cabin Class\nMost common class is economy class for all channel groups so we imputed missing values with it.","57bc1a77":"Upon observing correlation matrix, we first noticed that *Passenger Baggage Count* is highly correlated with *Passenger Baggage Weight*. These columns are multicollinear, so we are going to include our model only one of them. We decided to continue with *Passenger Baggage Count* since we later observed that this feature has a higher importance weight. Lightly flying passengers with no baggages negatively correlates with baggage count and weight related columns, as expected. CIP's with high commercial value tend to belong a loyalty program.","b9a401d7":"Feature importance:","3c1ae4c2":"The most frequent initials observed in each channel group is \"KS\" for test set so we replaced NA values with it.","100c27e6":"## Feature Importance\n\nSince no strong correlation with the target is found within the data, an automatic feature selection method is employed. Light GBM, is a greadient boosted tree based algorithm. Differing from other three based algorithms, it grows the trees vertically, i.e. it chooses the leaf with maximum loss and grows the tree from there. Details of this algorithm can be found in references.\n\n\n\nImportant Features:\n---\n\n+ Day_of_Month\n+\tSWC_FQTV_Member\n+\tPassenger_Baggage_Count\n+\tDirect_Flight\n+\tEarly_Check_In_Status_Early\n+\tEconomy_Class\n+\tSWC_CIP_Passenger\n+\tTerminal_Number_?\n+\tPassenger_Gender_M\n+\tOperation_Initials_Reduced_MK\n+\tOperation_Channel_TS","1823ef8a":"## Visualization","5fd59a48":"### Check-in Inbound & Check-in Outbound\n\nThe number of different values in Operation_Airport is very high. We think that, whether the Operation_Airport is the same airport with the Inbound_Departure_Airport or the Outbound_Arrival_Airport, is an important feature. So Checkin_Outbound and Operation_Outbound variables indicate if the check-in operation is done at either the Inbound_Departure_Airport or the Outbound_Arrival_Airport. \n\n","cd1d97c4":"The same most frequent 4 airports (KDT, IST, SKW, EST) found in the test set.","19c3e1f3":"Notice that *Operation Sonic Code*  has a missing value ratio of 79% and for *Terminal Number* column this ratio is even higher (>90%). With a ratio this high, we cannot impute missing values correctly. These columns should be dropped, along with the *Departure_Airport* column. \n\n\n\n---\n\nLater we decided to keep *Terminal Number* since it shows high correlation whether the passenger flies or not (SWC_FLY). We thought that even this column composed of values mostly unknown, it can be stil informative.\n\n\n---\n\n\n","3196b4c9":"We replaced the check-in day as early, on-time and peculiar.","b5508672":"Operation count distributed uniformly over days of the week. Fridays are slightly a little busier than the others (?).","62b5f893":"Accuracy check:","e9efb7b2":"**PART 1: Classification**","a373cca6":"In the *Departure_YMD_LMT* and the *Operation_YMD_LMT* colums, date of departure and date of check is stored so it is convenient to convert them to date time objects.","5a7094f1":"### Outbound Arrival Airport Reduced\n\nThe most common *Outbound Departure Airports* are unknowns (those with no outbound flight) and KDT for the test and the training set both. So we kept those and grouped the others as OTHERS.","5bc35ef9":"Now, the new missing value percentages for the training set becomes:","911d79fb":"### Weekend\n\nWe thought that may be week of day, weekend\/weekday information might be usefull. Weekend days are encoded as 1 in the *Weekend* column.","df7ecf3b":"### Operation Initials Reduced\n\nWe followed the same grouping scheme for the Operation_Initials column. There is a huge drop after LK company in terms of count.","91fb9f69":"## Train\/Validation\/Test Split","8a40766c":"Upload the data by reading provided .csv files from Google Drive (change path if needed). There are 808696 samples in the training and 121921 instances in the test sets. Each has 23 features.","77f12713":"#### Generating Flags\n\n\nLet's transform Operation_Sonic_Code to Operation_Sonic_Code_Flag  in order to see if these variables are null or not. We choose to do this since there are so many different classes for these variables.\n\n\n\n---\n\nDepreciated: Terminal_Name to Terminal_Name_Flag\n\n\n---\n\n","d19ac0fe":"### Economy Class\n\nTransform categorical *Cabin Class* column to binary variable.","74d03f2d":"and for the test set the result is:","0e15fd9c":"Column based \"?\" occurance percentages in the training set:","0dcd5b19":"The flights with no inbound and no outbound terminal are direct flights so we generated a new colum to label those flights","3ea64225":"### Departure Day\n\nGenerate *Departure Day* column:","b3f95758":"## Dataset Expolaration","baef192e":"### Early Check-in & Early Check-in Status\n\nWe generate another variable to see if people checked in on-time or not. The date is given as days, so how many days there are between the flight and the check-in is added as a variable.","ed86d113":"Encode categorical columns","b07a2598":"Curious behavior of the operation count:\nBelow we see the *Operation Count* distribution. It is positive skewed. A high majority of the passengers does 1 operation, the population is localized under 20 operations. There is an outlier with 129 operations.","3e6a6640":"Generate *Operation_Channel_Group* as defined in the pdf file.","bafc5297":"Uniform distribution in the operation count among weekend flag. So, there is no difference in number of operations during weekdays and the weekends.","4b1dc2b1":"Convert *object* datatype to category when needed.","9461192e":"Error etc.","36781c11":"There are 981 missing values left in the gender column. We checked channel group based gender distribution and found that the most frequent gender is male for every channel","f82f5375":"Lasso regression is used","1f1607e9":"### Day of Month","0cd6aaa5":"#### Imputing Operation Initials\n\nThe most frequent *Operation Initials* observed in different channel groups for the training and the test set are given below.","249843af":"Applying same staps on the test data","b90934a2":"Data type is changed to integer:","402b2ec6":"*Validation for Part 1:*","9e594020":"### Inbound_Departure_Airport_Reduced\n\nThe most common *Inbound Departure Airports* are unknowns (those with no inbound flight), IST, SKW and EST for the test and the training set both. So we kept those and grouped the others as OTHERS. ","110a61c3":"## Submission","16468773":"Passenger_Baggage_Count","23e24993":"Since most common gender for all channel groups is male, we imputed missing gender values with \"M\".","0b6c30c7":"Columns are chosen according to above Lasso model","fccff153":"Column based \"?\" occurance percentages in the test set:","1d688f23":"### Dropping Uninformative Features","7532d9d4":"Direct flight seems to be an importan predictor of the operation count.","4d5c903a":"See the unique levels of the categorical columns. *Departure Airport* has only one value called \"KDT\". So, it is not informative and should be dropped.","d8646369":"## Prediction\n\non result_df","5a1486d2":"## Feature Normalization\n\nNot needed for DT based algorithms","a4a24daa":"#### Lightly Flying Passengers\n\nNew feature is generated for lightly flying passengers since this case seems like a predictor for the operation count.","4fc2edae":"There are some peculiar cases where check-in made 7000 days before in 1999!","f2a80edf":"In this part, we will train the data set corresponding to y values different than 1.\n\n\n\n\n\n","6efce4e1":"Do the same for the result set.","9670c77c":"The 6 most frequent values differ significantly from the others. The same pattern in the training set is shared with the test set.  We replace the others with \"OTHERS\" and kept the most frequent ones.","029cdd3c":"### MP Model:","1fd7085a":"Convert objects to category","5880cf9e":"However, we need to impute missing values differently for different channels for the training set.","f240100c":"Check what data types we have:","66b3053f":"Change data type to category","3167dbfd":"Do the same for the test set.","ec34d23c":"#### Imputing Passenger Title\n\nAgain, Operation Channel Group based imputation is employed. \"MISTER\" is most common tittle so we employed all the missin values with that.","de2d3de7":"#### Training and Validation of the model","dea5e7cd":"The occurences of most frequent values are far different for the first 4 values. They are the same airport for both train and test data. So, any airport other than these 4 is replaced with \"OTHERS\".","793c3ab0":"Final prediction combining the previus results are encoded in a third column called Prediction_fin","7a54e90e":"Convert \"?\" to NA when needed. Apart from *Inbound_Departure_Airport* and *Outbound_Arrival_Airport*, \"?\" is printed for unknown values (missing). For those specific columns \"?\" means that there is no inbound or outbound flight (direct flight), so they are encoded as a seperate class called *Unknown*.","003fbc90":"A new column is created to encode the first prediction for validation data. "}}