{"cell_type":{"2c9dffa5":"code","8da50cfe":"code","fa29fb0a":"code","255b6388":"code","246cbdca":"code","a77b2400":"code","09f175cf":"code","cd8cde0b":"code","6cbe77c6":"code","0bb709d0":"code","96c055d6":"code","f74a248d":"code","7d971a50":"code","0cf52131":"code","98357310":"markdown"},"source":{"2c9dffa5":"import numpy as np \nimport pandas as pd\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option('display.max_columns', None)\n#########################################################\ndf = pd.read_csv('..\/input\/stock-exchange-data\/indexData.csv')\ndfp = pd.read_csv('..\/input\/stock-exchange-data\/indexProcessed.csv')\ninfo = pd.read_csv('..\/input\/stock-exchange-data\/indexInfo.csv')","8da50cfe":"df","fa29fb0a":"df = df.set_index(pd.DatetimeIndex(df['Date']))\n#drop redundant columns\ndf1 = df[['Index', 'Open','Close']]\ndf1.tail()","255b6388":"price=df1[df1['Index']=='NYA']\nprice","246cbdca":"price = price.drop(['Index'], 1)","a77b2400":"price = df2\n\n#define variables\nSTARTING_BALANCE = 10000\ndown_days = 1\n#calculate return and balance\nprice['oc'] = price.Close \/ price.Open\nprice['cc'] = price.Close \/ price.Close.shift(1)\nprice.cc.iat[0] = 1\nprice['Bench_Bal'] = STARTING_BALANCE * price.cc.cumprod()\n\n\n#calculate benchmark drawdown\nprice['Bench_Peak'] = price.Bench_Bal.cummax()\nprice['Bench_DD'] = price.Bench_Bal - price.Bench_Peak\n\nbench_dd = round(((price.Bench_DD \/ price.Bench_Peak).min() * 100), 2)\n\n\n#calculate additional columns for strategy\n\n#check if today is a down day\nprice['Down'] = price.oc < 1\n\n#count consecutive down days\n#https:\/\/stackoverflow.com\/questions\/27626542\/counting-consecutive-positive-value-in-python-array\ndown = price['Down']\nprice['Consecutive'] = down * (down.groupby((down != down.shift()).cumsum()).cumcount() + 1)\n\nprice.tail()","09f175cf":"#identify entries and allocate trading fees\nprice['Long'] = price.Consecutive >= down_days\n\n#calculate system return and balance\nprice['Sys_Ret'] = np.where(price.Long.shift(1) == True, price.cc, 1)\nprice['Sys_Bal'] = STARTING_BALANCE * price.Sys_Ret.cumprod()\n\nprice.tail()","cd8cde0b":"#plot results\nplt.plot(price.Bench_Bal)\nplt.plot(price.Sys_Bal)\n\nplt.show()","6cbe77c6":"#calculate system drawdown\nprice['Sys_Peak'] = price.Sys_Bal.cummax()\nprice['Sys_DD'] = price.Sys_Bal - price.Sys_Peak\n\nsys_dd = round(((price.Sys_DD \/ price.Sys_Peak).min()) * 100, 2)\n\nsys_dd","0bb709d0":"YEARS = 25\n#calculate metrics\nbench_return = round(((price.Bench_Bal[-1]\/price.Bench_Bal[0]) - 1) * 100, 2)\nbench_cagr = round(((((price.Bench_Bal[-1]\/price.Bench_Bal[0])**(1\/YEARS))-1)*100), 2)\nsys_return = round(((price.Sys_Bal[-1]\/price.Sys_Bal[0]) - 1) * 100, 2)\nsys_cagr = round(((((price.Sys_Bal[-1]\/price.Sys_Bal[0])**(1\/YEARS))-1)*100), 2)\nsys_in_market = round((price.Long.value_counts().loc[True] \/ len(price)) * 100)\nsys_win = price.Sys_Ret[price.Sys_Ret > 1.0].count()\nsys_loss = price.Sys_Ret[price.Sys_Ret < 1.0].count()\nsys_winrate = round(sys_win \/ (sys_win + sys_loss) * 100, 2)\n\nprint(f'Benchmark Total return: {bench_return}%')\nprint(f'Benchmark CAGR: {bench_cagr}')\nprint(f'Benchmark DD: {bench_dd}%')\nprint('')\nprint(f'System Total return: {sys_return}%')\nprint(f'System CAGR: {sys_cagr}')\nprint(f'System DD: {sys_dd}%')\nprint(f'Time in Market: {sys_in_market}%')\nprint(f'Trades Won: {sys_win}')\nprint(f'Trades Loss: {sys_loss}')\nprint(f'Winrate: {sys_winrate}%')","96c055d6":"# Correlation plots\ndf.dropna(inplace = True)\ndf.reset_index(drop = True, inplace = True)\n\nnew_features = ['p_change', 'close-1', 'close-1%', 'volume-1', 'volume-1%']\nfor i in new_features:\n    df[i] = 0\n    df[i] = df[i].astype('float')\n    \nfor k in range(1, len(df)):\n    if df['Index'][k] == df['Index'][k-1]:\n        df['p_change'][k] = df['Close'][k] - df['Open'][k]\n        df['close-1'][k] = df['Close'][k] - df['Close'][k-1]\n        df['close-1%'][k] = ((df['Close'][k] \/ df['Close'][k-1]) * 100) - 100\n        if df['Volume'][k] != 0 and df['Volume'][k-1] != 0:\n            df['volume-1'][k] = df['Volume'][k] - df['Volume'][k-1]\n            df['volume-1%'][k] = ((df['Volume'][k] \/ df['Volume'][k-1]) * 100) - 100\n\ndf['Date'] = pd.to_datetime(df['Date'])\ndf['year'] = df['Date'].dt.year\ndf['month'] = df['Date'].dt.month\n\ncorr_map = pd.DataFrame()\nfor stock in info['Index'].tolist():\n    corr_map[stock] = df.query(\"Index == @stock & year >= 2012\")['Close'].reset_index()['Close']\n\nmatrix = np.triu(corr_map.corr())\nplt.figure(figsize = (12, 10))\nsns.heatmap(corr_map.corr(), annot = True, cmap = 'Blues', fmt=\".2f\", mask = matrix, vmin = -1, vmax = 1, linewidths = 0.1, linecolor = 'white', cbar = False, annot_kws = {'fontsize': 11})\nplt.xticks(size = 10, fontname = 'monospace')\nplt.yticks(size = 11, fontname = 'monospace')\nplt.figtext(0.88, 0.65, '''Correlation \nbetween\nexchanges''', fontsize = 40, fontname = 'monospace', ha = 'right', color = '#4897d8')\nplt.show()","f74a248d":"dfp_1 = pd.merge(dfp, info, on = \"Index\" )\ndfp_1['Index'] = dfp_1['Index'].astype('category')\ndfp_1[\"Date\"] = pd.to_datetime(dfp_1[\"Date\"])\ndfp_1['Region'] = dfp_1['Region'].astype('category')\ndfp_1['Exchange'] = dfp_1['Exchange'].astype('category')\ndfp_1['Currency'] = dfp_1['Currency'].astype('category')\nsns.pairplot(dfp_1)","7d971a50":"stocks = pd.unique(dfp['Index'])\nstock_dfs = []\nfor stock in stocks:\n    stock_dfs.append(dfp_1[dfp_1['Index'] == stock])","0cf52131":"from matplotlib.cm import hsv\nimport matplotlib.patches as mpatches\n\nfig, ax = plt.subplots(figsize=(20, 20))\npatches = []\n\nfor i, stock_df in enumerate(stock_dfs):\n    color = (hsv(i\/len(stock_dfs)))\n    sns.lineplot(ax=ax, x=stock_df['Date'], y=stock_df['CloseUSD'], color=color)\n    patches.append(mpatches.Patch(color=color, label=stock_df['Index'].iloc[0]))\n    \nax.legend(handles=patches)\nstock_dfs = { stock_df['Index'].iloc[0]: stock_df for stock_df in stock_dfs }","98357310":"# **Correlation**"}}