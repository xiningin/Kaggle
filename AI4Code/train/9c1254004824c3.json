{"cell_type":{"2046aae4":"code","7d20a31f":"code","91050da6":"code","4af60f0d":"code","147d5c2f":"code","a40b0548":"code","10dc3415":"code","f9db1ca3":"code","4d9537a4":"code","052088b0":"code","e4c172a1":"code","b0d636c6":"code","7f152ab5":"code","9e420141":"code","22dfaa0e":"code","73855cd0":"code","ac64aafc":"code","d4d1e348":"code","42143061":"code","ec6e5955":"code","c68a4ec6":"code","e6e4913d":"code","89a55e7d":"code","abb1896a":"code","f6df9347":"code","de1167b0":"markdown","62216568":"markdown","93f67cee":"markdown","6ada1065":"markdown","b262b388":"markdown","71ad0b6f":"markdown","a0981ff5":"markdown","debc3298":"markdown","7a21eab9":"markdown","4f085581":"markdown","153148fe":"markdown"},"source":{"2046aae4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7d20a31f":"iris=pd.read_csv('Iris.csv')","91050da6":"iris","4af60f0d":"iris.info()","147d5c2f":"iris.corr()","a40b0548":"sns.heatmap(iris.corr())","10dc3415":"iris.drop('Id',axis=1,inplace=True)","f9db1ca3":"iris","4d9537a4":"plt.figure(figsize=(20,10))\nsns.pairplot(data=iris,hue='Species')","052088b0":"iris.hist(figsize=(20,10),color='r')\nplt.show()","e4c172a1":"iris.isnull().sum()","b0d636c6":"iris['Species'].value_counts()","7f152ab5":"\nx= iris.iloc[:, [0, 1, 2,3]].values","9e420141":"y=iris['Species'].values","22dfaa0e":"x","73855cd0":"y","ac64aafc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)","d4d1e348":"X_train.shape","42143061":"X_test.shape","ec6e5955":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","c68a4ec6":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","e6e4913d":"y_pred = classifier.predict(X_test)","89a55e7d":"y_pred","abb1896a":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\n","f6df9347":"accuracy_score(y_test, y_pred)","de1167b0":"**Predicting the Test Set**","62216568":"**PREDICTION USING DECISION TREE ALGORITHM**","93f67cee":"**Exploratory Data Analysis**","6ada1065":"**NAME: SINJINI ROY**","b262b388":"**Training the Decision Tree Classification Model on the Training Set**","71ad0b6f":"**Feature Scaling**","a0981ff5":"**Import the Libraries**","debc3298":"**THE SPARKS FOUNDATION**\n\n> GRADUATE ROTATIONAL INTERNSHIP PROGRAM\n\n","7a21eab9":"**Evaluation of the Data**","4f085581":"**Splitting the dataset into Training Set and Test Set**","153148fe":"**CONCLUSION:** \n1. Test Score= 97.36%\n2. Confusion Matrix: [[13  0  0]\n [ 0 15  1]\n [ 0  0  9]]\n"}}