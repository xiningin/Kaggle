{"cell_type":{"be37e7b8":"code","d90560b2":"code","38d735dd":"code","31cc9363":"code","04894a4e":"code","8f7b97bd":"code","e065a09a":"code","c4eb38d1":"code","00cbd840":"code","381a5464":"code","e4910def":"code","e804a7ae":"code","3fe8d4dc":"code","2662f312":"code","b6ab581d":"code","9eff2799":"markdown","25982cdc":"markdown","c6e709f7":"markdown","c4e620ff":"markdown","251851da":"markdown","413ed2f9":"markdown","0066a4e4":"markdown","73b33389":"markdown","56926b7e":"markdown","b09fafb4":"markdown","7d9816e2":"markdown"},"source":{"be37e7b8":"# Python 3 environment\n# GPU processor\nimport numpy as np\nimport pandas as pd\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport os\nimport shutil","d90560b2":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","38d735dd":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","31cc9363":"def plotScatterMatrix(df,plotSize,textSize):\n    df=df.select_dtypes(include=[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df=df.dropna('columns')\n    df=df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames=list(df)\n    if len(columnNames)>10: # reduce number of columns for matrix inversion of kernel density plots\n        columnNames=columnNames[:10]\n    df=df[columnNames]\n    ax=pd.plotting.scatter_matrix(df,figsize=[plotSize,plotSize],diagonal='kde')\n    corrs=df.corr().values\n    for i,j in zip(*plt.np.triu_indices_from(ax,k=1)):\n        ax[i,j].annotate('Corr.coef=%.3f' % corrs[i,j],(0.8,0.2),xycoords='axes fraction',ha='center',va='center',size=textSize)\n        plt.suptitle('Scatter and Density Plot')\n        plt.show()","04894a4e":"nRowsRead=1000\ndf1=pd.read_csv('\/kaggle\/input\/sars-coronavirus-accession\/MN997409.1-4NY0T82X016-Alignment-HitTable.csv',delimiter=',',nrows=nRowsRead)\ndf1.dataframeName='MN997409.1-4NY0T82X016-Alignment-HitTable.csv'\nnRow,nCol=df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')\n","8f7b97bd":"df1.head(5)","e065a09a":"plotPerColumnDistribution(df1,10,5)","c4eb38d1":"plotCorrelationMatrix(df1,8)","00cbd840":"plotScatterMatrix(df1, 20, 10)","381a5464":"nRowsRead=1000\ndf2=pd.read_csv('\/kaggle\/input\/sars-coronavirus-accession\/SARS_CORONAVIRUS_287BP_MN975263.1_accession_nucleotide.csv',delimiter=',',nrows=nRowsRead)\ndf2.dataframeName='SARS_CORONAVIRUS_287BP_MN975263.1_accession_nucleotide.csv'\nnRow,nCol=df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","e4910def":"df2.head(5)","e804a7ae":"plotPerColumnDistribution(df2, 10, 5)","3fe8d4dc":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# SARS_CORONAVIRUS_287BP_MN975263.1_protein.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/sars-coronavirus-accession\/SARS_CORONAVIRUS_287BP_MN975263.1_accession_protein.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'SARS_CORONAVIRUS_287BP_MN975263.1_accession_protein.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","2662f312":"df3.head()","b6ab581d":"plotPerColumnDistribution(df3, 10, 5)","9eff2799":"Read in SARS_CORONAVIRUS_287BP_MN975263.1_accession_nucleotide:","25982cdc":"Define function for scatter and density plots","c6e709f7":"Correlation matrix:","c4e620ff":"Scatter and density plots:","251851da":"Define function for distribution graphs (histogram\/bar graph) for column data:","413ed2f9":"Goals:\n* Investigate SARS-CoV-2 virus genetics, origin,  and evolution.\n* Investigate SARS-CoV-2 management measures at the human-animal interface.","0066a4e4":"Define function for correlation matrix:","73b33389":"* Read in csv's nucleotide, protein, and alignment hit (compares nucleotide of virus for identical matches within sequence, percentage of similiar matches, base pairs and its length) \n* These 3 csv's compare the following taxonomy of viruses:  \nSARS-CoV-2 (genbank)  \nSARS2  \n2019-nCov  \nCOVID-19  \nCOVID-19 virus  \nWuhan corona virus  \nWuhan seafood market pnuemonia virus","56926b7e":"Get quick view of data:","b09fafb4":"* Read in data and use plotting functions to visualize data \n* Alignment-HitTable compares nucleotide of virus for identical matches within sequence, percentage of similiar matches, base pairs and its length\n","7d9816e2":"Distribution graphs (histogram\/bar graph) of quick view data:"}}