{"cell_type":{"ce35b11a":"code","71618629":"code","e86e9188":"code","4f122d98":"code","48fa3204":"code","aa315a39":"code","4b70e410":"code","ead1504a":"code","72648f26":"code","b3911ca0":"code","5e866cfa":"code","cfd6ec42":"code","bf5cd79d":"code","ce552236":"code","6c6fe1fd":"code","d4270fbf":"code","27bd289d":"code","b4d1fb92":"code","9ff21b1f":"code","a5c85dbf":"code","55d23142":"code","a3103d65":"code","086f661d":"code","44087aa2":"code","7cd8f5cd":"code","674d6550":"code","e7f089a9":"code","d5baa137":"code","c76ff772":"code","c763a864":"code","17cdfa1d":"code","cf06aacb":"code","e18f0116":"code","ecade157":"code","9683d526":"code","3b139555":"code","9531927a":"code","cb535868":"code","95d89f90":"code","002a466d":"code","510051b8":"code","0a1f5905":"code","ff491c32":"code","0978a024":"code","8ac10d87":"code","59ca10ff":"code","ed39c9b9":"code","a0b04f37":"code","db2f9645":"code","4084a932":"code","64297a2b":"markdown","2a76c754":"markdown","c8a220c9":"markdown","d1376c68":"markdown","9537f91c":"markdown","7beea15f":"markdown","f4ccc513":"markdown","64309936":"markdown","d2652ba7":"markdown","7af49f0f":"markdown","766d3ead":"markdown","e0d0478f":"markdown","20e774d5":"markdown","6a5b8a9b":"markdown","de190d58":"markdown","87248c2c":"markdown","1ea2aa10":"markdown","50a4661d":"markdown","f8bc86cf":"markdown","7010d108":"markdown","f62165f5":"markdown","f6250271":"markdown","337c81a2":"markdown","e0be986b":"markdown","2605ccb3":"markdown","1c11b238":"markdown","291c8cc8":"markdown","003c3b7b":"markdown","b67c4abc":"markdown","5c4537aa":"markdown","7b52ba46":"markdown","b9d1f420":"markdown","06a3542d":"markdown","cbf5aa90":"markdown","46a1318c":"markdown","1b0730a9":"markdown","3ff71044":"markdown","81d4a471":"markdown","61684955":"markdown","fa814fbc":"markdown"},"source":{"ce35b11a":"# dataframe\nimport numpy as np\nimport pandas as pd\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# machine learning\nimport statsmodels.api as sm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, accuracy_score\n## check multicollinearity\nfrom patsy import dmatrices\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# make the figures embedded in the notebook\n%matplotlib inline","71618629":"#pd.set_option('display.max_rows', None) # dangerous if the dataset is too big\npd.set_option('display.max_columns', None) \npd.set_option('display.width', None) \npd.set_option('display.max_colwidth', None) ","e86e9188":"# load dataset\ndf = pd.read_csv('..\/input\/appointment-no-show-cleaned\/no_show_appointments.csv')\ndf","4f122d98":"# Check missing values and NaN values\ndf.info()","48fa3204":"# Check duplicated records\nsum(df.duplicated())","aa315a39":"df.query('Age < 0')","4b70e410":"index = df.query('Age < 0').index\ndf.drop(index, inplace=True)","ead1504a":"df.query('Age < 0')","72648f26":"correction = {'PatientId': 'PatientID', 'Neighbourhood': 'Neighborhood', 'Hipertension': 'Hypertension', 'Handcap': 'Handicap', 'No-show': 'Absence'}\ndf.rename(columns=correction, inplace=True)","b3911ca0":"df['PatientID'] = df['PatientID'].astype('str')\ndf['AppointmentID'] = df['AppointmentID'].astype('str')","5e866cfa":"def replace_blank(column, rep):\n    df[column] = df[column].str.replace(rep, ' ')","cfd6ec42":"replace_blank('ScheduledDay', 'Z')\nreplace_blank('ScheduledDay', 'T')\nreplace_blank('AppointmentDay', 'Z')\nreplace_blank('AppointmentDay', 'T')","bf5cd79d":"df['ScheduledDay'] = df['ScheduledDay'].str.split(expand = True)\ndf['AppointmentDay'] = df['AppointmentDay'].str.split(expand=True)\n\ndf['ScheduledDay']= pd.to_datetime(df['ScheduledDay'])\ndf['AppointmentDay']=pd.to_datetime(df['AppointmentDay'])","ce552236":"df['IntervalDay'] = df['AppointmentDay']-df['ScheduledDay']\ndf['IntervalDay'] = df['IntervalDay'].astype(str).str[:2]\ndf['IntervalDay'] = pd.to_numeric(df['IntervalDay'])","6c6fe1fd":"df.query('IntervalDay < 0')","d4270fbf":"index = df.query('IntervalDay < 0').index\ndf.drop(index, inplace=True)","27bd289d":"df.query('IntervalDay < 0')","b4d1fb92":"df['Absence'] = df['Absence'].map({'Yes': 1, 'No': 0})","9ff21b1f":"df['Handicap'].value_counts()","a5c85dbf":"df[['Handicap_0', 'Handicap_1', 'Handicap_2', 'Handicap_3', 'Handicap_4']] = pd.get_dummies(df['Handicap'])","55d23142":"df.drop(columns='Handicap', inplace=True)","a3103d65":"df[['Female', 'Male']] = pd.get_dummies(df['Gender'])","086f661d":"df.drop(columns='Gender', inplace=True)","44087aa2":"df","7cd8f5cd":"df.info()","674d6550":"corr = df.corr()\nfig, ax = plt.subplots(figsize=(15, 12))\ncmap = sns.diverging_palette(100, 200, as_cmap=True, center='light')\nsns.heatmap(corr, cmap=cmap, center=0, linewidths=.5, square=True, annot=True)\nplt.title('Correlation of Variables', fontsize=15);","e7f089a9":"df['intercept']=1\ny, x = dmatrices('Absence ~ intercept + Age + Scholarship + Hypertension + Diabetes + Alcoholism + SMS_received + IntervalDay + Handicap_1 + Handicap_2 + Handicap_3 + Handicap_4 + Female', df, return_type='dataframe')\nvif = pd.DataFrame()\nvif['VIF Factor'] = [variance_inflation_factor(x.values, i) for i in range(x.shape[1])]\nvif['features'] = x.columns","d5baa137":"vif","c76ff772":"y=df['Absence']\nx=df[['intercept', 'Age', 'Scholarship', 'Hypertension', 'Diabetes', 'Alcoholism', 'SMS_received', 'IntervalDay', 'Handicap_1', 'Handicap_2', 'Handicap_3', 'Handicap_4', 'Female']]\nmod=sm.Logit(y, x)\nresult = mod.fit()\nresult.summary2()","c763a864":"interpre = {'Age': 1\/np.exp(-0.0078), \n            'Scholarship': np.exp(0.2359), \n            'Diabetes': np.exp(0.1264), \n            'Alcoholism': np.exp(0.2134), \n            'SMS_received': np.exp(0.3311), \n            'IntervalDay': np.exp(0.0252)}\ninterpre","17cdfa1d":"df.groupby('Absence').Age.mean()","cf06aacb":"df_absence = df.query('Absence == 1')\ndf_presence = df.query('Absence == 0')","e18f0116":"fig, ax = plt.subplots()\nplt.hist([df_absence['Age'], df_presence['Age']], bins=40, label=['Absence', 'Presence'], color = ['darkgrey', 'lightblue'], stacked=True)\nplt.title('Distribution of Age of Patients Absent and Present at the Appointment')\nplt.ylabel('Number of Patients')\nplt.xlabel('Age')\nplt.legend()\nsns.despine();","ecade157":"Kids = df.query('Age <= 14')['Absence'].mean()\nYouth = df.query('Age > 15 and Age <= 24')['Absence'].mean()\nAdults = df.query('Age > 25 and Age <= 64')['Absence'].mean()\nSeniors = df.query('Age > 65')['Absence'].mean()","9683d526":"fig, ax = plt.subplots(figsize = (4, 3))\nsns.despine()\nheights = [Kids, Youth, Adults, Seniors]\nlabels = ['Kids', 'Youth', 'Adults', 'Seniors']\nsns.barplot(labels, heights, color='cadetblue')\nax.set_xlabel('Age Groups')\nax.set_ylabel('Absence Ratio')\nplt.title('Absence Ratio of Patients in Age Groups', fontsize=12);","3b139555":"Scholarship = df.groupby('Scholarship')['Absence'].mean()\nScholarship","9531927a":"Diabetes = df.groupby('Diabetes')['Absence'].mean()\nDiabetes","cb535868":"Alcoholism = df.groupby('Alcoholism')['Absence'].mean()\nAlcoholism","95d89f90":"sms = df.groupby('SMS_received')['Absence'].mean()\nsms","002a466d":"absence_rate = Scholarship.append(Diabetes).append(Alcoholism).append(sms)\nabsence_rate","510051b8":"fig, ax = plt.subplots()\nsns.despine()\nxlabel=['-Scholarship', '+Scholarship', '-Diabetes', '+Diabetes', '-Alcoholism', '+Alcoholism', '-SMS', '+SMS']\nplt.bar(x=xlabel, height=absence_rate, color='cadetblue')\nplt.title('Absence Rate of Patients')\nplt.ylabel('Absence Rate')\nplt.xticks(rotation=45);","0a1f5905":"interval=df.groupby('Absence')['IntervalDay'].mean()\ninterval","ff491c32":"Y = df['Absence']\nX = df[['Age', 'Scholarship', 'Diabetes', 'Alcoholism', 'SMS_received', 'IntervalDay']]\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)","0978a024":"len(X_train)","8ac10d87":"clf = RandomForestClassifier(class_weight='balanced')\n\nparam_grid = {'n_estimators': [300, 400, 500],\n              'max_depth': [10, 20, 30, 40],\n              'min_samples_split': [10, 5]}\n\ngrid_search = GridSearchCV(clf, param_grid=param_grid)","59ca10ff":"clf = RandomForestClassifier(class_weight='balanced', max_depth=30, min_samples_split=10, n_estimators=500)\nclf.fit(X_train, Y_train)\nY_pred = clf.predict(X_test)","ed39c9b9":"confusion_matrix(Y_test, Y_pred)","a0b04f37":"precision_score(Y_test, Y_pred)","db2f9645":"accuracy_score(Y_test, Y_pred)","4084a932":"recall_score(Y_test, Y_pred)","64297a2b":"There are five unusual records: the date making appointment is later than the actual appointment date. \nI'll drop these rows.","2a76c754":"From these figures, I found that:\n\n    - The average age of patients absent for the appointment is lower. \n    - The distribution of age of patients in both groups are similar. \n    - Very young kids (0-4 years old) showed lowest absence ratio.\n\nTo get a better sense of different absence ratio in different ages, I divided patients in four age groups: \n    - Kids (0~14 years old)\n    - Youth (15~24 years old)\n    - Adults (25~64 years old)\n    - Seniors (65 years old and over)","c8a220c9":"#### Interval Day","d1376c68":"There is no duplicated rows.\n\n#### Check whether the age of all records is reasonable","9537f91c":"<a id='eda'><\/a>\n## Exploratory Data Analysis","7beea15f":"<a id='question3'><\/a>\n### How does the model perform in predicting the patient absence?\n\nThen I'll generate a Logistic regression and assess its performance in predicting the patient absence.","f4ccc513":"Before generating the model, check collinearity by calculating the VIFs for each variable in the Logistic regression model","64309936":"#### Scholarship","d2652ba7":"Based on the figure above, patients receiving SMS showed the highest absence rate. Patients with scholarship showed the second highest absence rate. ","7af49f0f":"#### Remove the record that the age of patient is negative.\n\nCheck the result","766d3ead":"Replace character \"T\" and \"Z\" with blank","e0d0478f":"Because `AppointmentDay` only provides date information, I'll remove the time part in both columns to make them consistent.","20e774d5":"\n# Prediction on Medical Appointment Absence\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","6a5b8a9b":"<a id='question1'><\/a>\n### Identify the variables used to predict the patient absence","de190d58":"Check whether all the intervals are positive","87248c2c":"Consistent to our knowledge, there are positive correlations among `Age`, `Hypertension`, `Diabetes`.\n\nAlso, there is a positive correlation between `IntervalDay` and `SMS_received`. Patients have longer intervals are more likely to receive SMS reminders.\n\nLet's figure out their relationship by further analysis: **Logistic regression model**","1ea2aa10":"Setting to show the full dataset when called","50a4661d":"#### Alcoholism","f8bc86cf":"Finally, check the dataframe and datatypes","7010d108":"The patients in the youth group (15~24 years old) showed highest absence ratio, while those in the seniors group (65 years old and over) showed lowest absence ratio.","f62165f5":"<a id='conclusions'><\/a>\n## Conclusions\n\nIn this project, I generated a Random Forest Classification to predict the patient absence on medical appointment. This model contains six independent variables: age, [Scholarship](https:\/\/en.wikipedia.org\/wiki\/Bolsa_Fam%C3%ADlia), Diabetes, Alcoholism, SMS notification, and interval days between schedule day and appointment day. These variables predict the patient absence with accuracy 0.66, precision 0.31, and recall 0.54, suggesting the good performance of this model. ","f6250271":"There is no NaN values in any column.","337c81a2":"First, let's have a basic understanding on the relationship among all the variables.\n\nThe correlation of variables is shown below:","e0be986b":"<a id='intro'><\/a>\n## Introduction\n\nIn this report, a dataset comprising the characters of patients and their medical appointments records is analyzed. \n\nSpecifically, I'm going to answer following questions to explore this dataset:\n<ul>\n<li><a href=\"#question1\">Which variables could be used to predict patient absence?<\/a><\/li>\n<li><a href=\"#question2\">What are the effects of the variables identified in question 1 on the absence rate?<\/a><\/li>\n<li><a href=\"#question3\">How does the model behave in predicting the patient absence?<\/a><\/li>\n<\/ul>\n\nThe answers to these questions will highlight the important factors helping us to understand whether or not a patient will be absent for medical appointment.","2605ccb3":"##### Convert `PatientId` from `float` to `string`\n\n##### Convert `AppointmentID` from `int` to `string` ","1c11b238":"There is no VIF greater than 10, suggesting the absence of collinearity.","291c8cc8":"##### Convert `Absence` from string to int (0, 1)\n\nUsing (0, 1) instead of (Yes, No) help us to calculate the absence ratio.","003c3b7b":"#### Diabetes","b67c4abc":"To make the column names in a consistant format, and easy to interpret:","5c4537aa":"**Based on the Logistic regression model, these variables explained below could be used to predict whether or not a patient be absent for the appointment:**\n- For every one year decrease in age, a patient is 1.0078 more likely to be absent, holding all other variables constant.\n- If a patient receive scholarship, he\/she is 1.2660 more likely to be absent, holding all other variables constant.\n- If a patient has diabetes, he\/she is 1.1347 more likely to be absent, holding all other variables constant.\n- If a patient has alcoholism, he\/she is 1.2379 more likely to be absent, holding all other variables constant.\n- If a patient receives SMS notification, he\/she is 1.3925 more likely to be absent, holding all other variables constant.\n- For every one day increase in interval day, a patient is 1.0255 more likely to be absent, holding all other variables constant.","7b52ba46":"#### Convert `ScheduledDay` and `AppointmentDay` to `datetime` , then calculate their interval periods","b9d1f420":"#### SMS notification","06a3542d":"#### Generate dummy variables of  `Gender` column","cbf5aa90":"#### Create a new column `Interval` to represent the number of days between the scheduled day and appointment day","46a1318c":"<a id='wrangling'><\/a>\n## Data Wrangling\n","1b0730a9":"<a id='question2'><\/a>\n### On the population level, what are the effects of the variables identified in question 1 on the absence rate?","3ff71044":"Check the result:","81d4a471":"#### Age","61684955":"#### Generate dummy variables of `Handicap` column","fa814fbc":"Compared with patients who showed up, the `IntervalDay` of patients who are absent is much longer, almost double the length."}}