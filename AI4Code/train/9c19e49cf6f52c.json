{"cell_type":{"e3535c23":"code","1ee907d2":"code","bcbee6ab":"code","69c175c4":"code","0c36926a":"code","ae2d7f38":"code","1044384b":"code","9b6164e4":"code","bc48986f":"code","0f285204":"code","d6d6c8c9":"code","5cf9073f":"code","1fcb9516":"code","b43c2a99":"code","70e41009":"code","3505c1eb":"markdown","deaff715":"markdown","ee95ec1e":"markdown","e446532c":"markdown","febcee10":"markdown","69e9425a":"markdown","cd4e39c5":"markdown","02e44dd8":"markdown"},"source":{"e3535c23":"import pandas as pd\nimport numpy as np\n\nfrom collections import Counter\n\nfrom sklearn.model_selection import train_test_split,GridSearchCV\n\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.ensemble import StackingClassifier\n\nseed=42","1ee907d2":"df = pd.read_csv('..\/input\/parkinsons-data-set\/parkinsons.data')\ndf.head()","bcbee6ab":"df.shape","69c175c4":"df.info()","0c36926a":"print(Counter(df['status']))","ae2d7f38":"df.isnull().sum()","1044384b":"X = df.drop(['name','status'],axis=1)\ny = df['status']","9b6164e4":"x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=seed)","bc48986f":"parameters = {'penalty': ['l1', 'l2'], \n              'C': [0.1, 0.4, 0.8, 1, 2, 5,10,20,30]}    \n\ngrid_search=GridSearchCV(estimator=LogisticRegression() ,param_grid=parameters,cv=10,n_jobs=-1,verbose=2)\ngrid_search.fit(x_train,y_train)\n\nlog_reg = grid_search.best_estimator_\n\ngrid_search.best_params_","0f285204":"y_pred=log_reg.predict(x_test)\n\nprint(\"\\n\",confusion_matrix(y_test,y_pred))\nlog_reg_acc = accuracy_score(y_test,y_pred)\n\nprint(\"\\nAccuracy Score {}\".format(log_reg_acc))\nprint(\"Classification report: \\n{}\".format(classification_report(y_test,y_pred)))","d6d6c8c9":"from sklearn.svm import LinearSVC\n\nsvc = LinearSVC()\n\nparameters = {\n      'penalty':['l1', 'l2'],\n      'max_iter': [10,20,50,100,1000], \n      'C': [0.1, 0.4, 0.8, 1, 2, 5,10,20,30],          \n              }\n\ngrid_search=GridSearchCV(estimator=svc ,param_grid=parameters,cv=10,n_jobs=-1,verbose=2)\ngrid_search.fit(x_train,y_train)\n\nsvc = grid_search.best_estimator_\n\ngrid_search.best_params_","5cf9073f":"y_pred=svc.predict(x_test)\n\nprint(\"\\n\",confusion_matrix(y_test,y_pred))\nsvc_acc = accuracy_score(y_test,y_pred)\nprint(\"\\nAccuracy Score {}\".format(svc_acc))\nprint(\"Classification report: \\n{}\".format(classification_report(y_test,y_pred)))","1fcb9516":"xgb = XGBClassifier()\n\nparameters = {'min_child_weight' : np.arange(0,20),\n              'max_depth': [2, 4, 5, 7, 9, 10]}\n\ngrid_search=GridSearchCV(estimator=xgb ,param_grid=parameters,cv=10,n_jobs=-1,verbose=2)\ngrid_search.fit(x_train,y_train)\n\nxgb = grid_search.best_estimator_\n\ngrid_search.best_params_","b43c2a99":"y_pred=xgb.predict(x_test)\n\nprint(\"\\n\",confusion_matrix(y_test,y_pred))\nxgb_acc = accuracy_score(y_test,y_pred)\nprint(\"\\nAccuracy Score {}\".format(xgb_acc))\nprint(\"Classification report: \\n{}\".format(classification_report(y_test,y_pred)))","70e41009":"estimators = [ ('xgb', xgb ), \n              ('svc',svc ),\n              ('log_Reg', log_reg)]\n\n\nstack =StackingClassifier(estimators=estimators ,final_estimator= svc)\n\nstack.fit(x_train,y_train)\nstack_predicted = stack.predict(x_test)\n\nstack_conf_matrix = confusion_matrix(y_test, stack_predicted)\nstack_acc_score = accuracy_score(y_test, stack_predicted)\n\nprint(\"confussion matrix\")\nprint(stack_conf_matrix)\nprint(\"\\n\")\nprint(\"Accuracy of Stacking Classifier:\",stack_acc_score*100,'\\n')\nprint(classification_report(y_test,stack_predicted))","3505c1eb":"# Data preprocessing","deaff715":"# Logistic Regression","ee95ec1e":"# Extreme Gradient Boosting","e446532c":"<h1> 94% Accuracy in Predicting Parkinson's Disease through Ensemble Method \n    \n(Stacking Classifier) <\/h1>","febcee10":"# Support Vector Classifier","69e9425a":"# Models\n\nHere I have used:\n* Logistic Regression\n* Support Vector Classifier\n* Extreme Gradient Boosting\n\nAnd, used GridSearchCV to hyperparameter tune all of them.\n\nThen used StackingClassifier to Stack all of them into an Ensemble.\n","cd4e39c5":"# Exploring the Data","02e44dd8":"# Stacking Ensemble Classifier"}}