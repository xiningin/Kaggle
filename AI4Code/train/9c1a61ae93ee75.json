{"cell_type":{"0fea0101":"code","df3b2508":"code","3b331fe5":"code","6124bfc8":"code","4ce683bb":"code","965c3ee9":"code","92f1a8f2":"code","28a16931":"code","5bd2d020":"code","a034f927":"code","a465030a":"code","41899333":"code","b3d63364":"code","46511467":"code","921381b2":"code","4100bfd8":"code","af6d5eac":"code","680f6d10":"code","479b0385":"code","24133150":"code","6be41e2d":"code","ac471e36":"code","1118c974":"code","e93758e4":"code","3525a465":"code","c887ba43":"code","9899eda4":"code","96a2eac0":"code","549e4ed1":"code","2dc34e0c":"code","093848c7":"code","17ea3263":"code","ef5939c1":"code","4ef753d6":"code","cf697c93":"code","24c97e8c":"code","56cb046c":"code","248cbcfa":"code","e418aa35":"code","bc2f04fe":"code","898b806a":"code","4ac12808":"code","e91d0bee":"code","784354f6":"code","55661929":"code","dff9618b":"code","a36d1c52":"code","c9d67fd7":"code","182efa3c":"code","e398012d":"code","a163e28b":"code","378d6a32":"code","4e346464":"code","c3227c7b":"code","bf114990":"code","a0799a23":"code","f0c50bdc":"code","3ec25782":"code","3810bbf9":"code","38fff3a4":"code","eb46eb4e":"code","3a77bd5d":"code","299063c6":"code","4f2ff8be":"code","30c36eb3":"code","9c0f407a":"code","fb87aa27":"code","6020c0e5":"code","6549d5ec":"code","9bd3c1a3":"code","fbc372f9":"code","d41ce53b":"code","af8f76be":"code","88982c22":"code","1b88ec26":"code","acae5275":"code","5d7938f5":"code","fb4b2489":"code","3e793863":"code","d5772d51":"code","907654c4":"code","cd375f6d":"code","899258af":"code","da246513":"code","01851b2d":"code","7bdfcffc":"code","d7007c3d":"code","379e8070":"code","8e4e5020":"code","83c0149d":"code","765ec3e9":"code","68f60515":"code","2852d820":"code","856e75bc":"code","d74ddf9e":"code","262afed8":"code","33d93818":"code","d57c5dac":"code","80aa5b2e":"code","fbc4ab40":"code","961c962e":"code","3daab77a":"code","91fe8350":"code","a0383ced":"code","5d565cf1":"code","666cdc93":"code","1266f3cb":"code","3697b441":"code","8feaa900":"code","8d95876e":"code","f049cca3":"code","cc4434c4":"code","77b4046b":"code","93478d06":"code","b27bf196":"code","3d62cafd":"code","4938b013":"code","86a22bfc":"code","e957c02e":"code","ae48bf27":"code","94671446":"code","783c6558":"code","35b082a1":"code","9f9a72d3":"code","15326281":"code","b34afb3f":"code","0e273c74":"code","df9ed40d":"code","0ccc24bf":"code","143abda2":"code","1b9db3ce":"code","889b5884":"code","40715d61":"code","1a597f3c":"code","c67c2c94":"code","2698998c":"code","e6f4182d":"markdown","81a3c938":"markdown","10454c85":"markdown","698ff86b":"markdown","69fc522a":"markdown","b4b32855":"markdown","9664bee0":"markdown","ed893273":"markdown","a3b51efc":"markdown","1c6f094b":"markdown","e1015ead":"markdown","78d3bc31":"markdown","59460e82":"markdown","71e0803c":"markdown","c38b4fbc":"markdown","00b4fcc5":"markdown","0ecc6f89":"markdown","1297430f":"markdown","c990b965":"markdown","a45899b9":"markdown","34991ee6":"markdown","7569d4a9":"markdown","b56557bb":"markdown"},"source":{"0fea0101":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df3b2508":"import pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3b331fe5":"summer = pd.read_csv(\"\/kaggle\/input\/olympic-games\/summer.csv\")\nwinter = pd.read_csv(\"\/kaggle\/input\/olympic-games\/winter.csv\")\ndic = pd.read_csv(\"\/kaggle\/input\/olympic-games\/dictionary.csv\")","6124bfc8":"summer.head()","4ce683bb":"summer.info()","965c3ee9":"summer.describe(include = \"O\")","92f1a8f2":"summer.duplicated().sum()","28a16931":"summer[summer.isnull().any(axis = 1)]","5bd2d020":"winter.head()","a034f927":"winter.info()","a465030a":"winter.describe(include = \"O\")","41899333":"winter.duplicated().sum()","b3d63364":"winter[winter.isnull().any(axis = 1)]","46511467":"dic.head()","921381b2":"dic.info()","4100bfd8":"dic.describe(include = \"O\")","af6d5eac":"dic.duplicated().sum()","680f6d10":"dic[dic.isnull().any(axis = 1)]\n#dic.isnull().sum()","479b0385":"# use the concat function\nolympics = pd.concat([summer, winter], axis = 0, keys = [\"Summer\", \"Winter\"], names = [\"Edition\"]).reset_index()","24133150":"olympics.head(10)","6be41e2d":"olympics.drop(columns = \"level_1\", inplace = True)","ac471e36":"dic.head()","1118c974":"olympics = olympics.merge(dic.iloc[:, :2], how = \"left\", left_on = \"Country\", right_on = \"Code\").reset_index(drop = True)","e93758e4":"olympics.head(10)","3525a465":"olympics.drop(columns = [\"Code\"], inplace = True)","c887ba43":"olympics.rename(columns = {\"Country_x\":\"Code\", \"Country_y\": \"Country\"}, inplace = True)","9899eda4":"olympics.info()","96a2eac0":"olympics.reset_index(drop = True, inplace = True)","549e4ed1":"olympics.head(10)","2dc34e0c":"# it is always a good practice to have column names without spaces\ndic.rename(columns = {\"GDP per Capita\":\"GDP\"}, inplace= True)","093848c7":"olympics.info()","17ea3263":"# view the rows having null countrycode\nolympics[olympics.Code.isnull()]","ef5939c1":"# delete these rows\nolympics.dropna(subset = [\"Code\"], inplace = True)","4ef753d6":"olympics.loc[olympics.Country.isnull()]\n\n# few countrycodes do not have a corresponding country name, I can search the web and find these and replace these accordingly","cf697c93":"olympics.loc[olympics.Country.isnull()].Code.index","24c97e8c":"# store the missing indices\nmissingindices = olympics.loc[olympics.Country.isnull()].index","56cb046c":"missingindices","248cbcfa":"# store the missing codes\nmissingcodes = olympics.loc[olympics.Country.isnull()].Code.value_counts().index","e418aa35":"missingcodes","bc2f04fe":"# find the corresponding country name for these and store it in a pandas series\nmissingcountries = pd.Series(index=missingcodes, name = \"Country\", data = [\"Soviet Union\", \"East Germany\", \"Romania\", \"West Germany\", \"Czechoslovakia\",\n                               \"Yugoslavia\", \"Unified Team\", \"Unified Team of Germany\", \"Mixed teams\", \"Serbia\",\n                              \"Australasia\", \"Russian Empire\", \"Montenegro\", \"Trinidad and Tobago\", \"Bohemia\", \n                              \"West Indies Federation\", \"Singapore\", \"Independent Olympic Participants\"])","898b806a":"missingcountries","4ac12808":"# impute the missing countries\nolympics.Country.fillna(olympics.Code.map(missingcountries), inplace = True)","e91d0bee":"olympics.loc[missingindices]","784354f6":"# verify all columns have no null values\nolympics.info()","55661929":"olympics.duplicated().sum()","dff9618b":"# remove the duplicates\nolympics.drop_duplicates(inplace = True)","a36d1c52":"olympics.info()","c9d67fd7":"olympics.Medal = olympics.Medal.astype(\"category\")","182efa3c":"# defining the categories, with ordered set to True\nolympics.Medal.cat.set_categories([\"Bronze\", \"Silver\", \"Gold\"], ordered = True, inplace = True)","e398012d":"olympics.Medal.sort_values()","a163e28b":"olympics.info()","378d6a32":"top10 = olympics.Country.value_counts().head(10)\ntop10","4e346464":"top10.plot(kind = \"bar\", figsize=(12, 8))\nplt.title(\"Top 10 successful countries by Medals\")\nplt.xlabel(\"Country\")\nplt.ylabel(\"Medals\")\nplt.show()","c3227c7b":"olympics10 = olympics[olympics.Country.isin(top10.index)]\nolympics10","bf114990":"plt.figure(figsize=(20, 10))\nsns.set(font_scale = 1.5, palette= \"dark\")\nsns.countplot(data = olympics10, x = \"Country\", order = top10.index)\nplt.title(\"Top 10 successful countries by Medals\", fontsize = 20)\nplt.show()","a0799a23":"plt.figure(figsize=(20, 10))\nsns.set(font_scale=1.5, palette= \"dark\")\nsns.countplot(data = olympics10, x = \"Country\", hue = \"Edition\", order = top10.index)\nplt.title(\"Top 10 Countries by Medals split by Edition\", fontsize = 20)\nplt.show()","f0c50bdc":"plt.figure(figsize=(20, 10))\nsns.set(font_scale=1.5, palette= \"dark\")\nsns.countplot(data = olympics10, x = \"Country\", hue = \"Medal\", order = top10.index, \n              hue_order = [\"Gold\", \"Silver\", \"Bronze\"], palette = [\"gold\", \"silver\", \"brown\"])\nplt.title(\"Top 10 Countries by Medals\", fontsize = 20)\nplt.show()","3ec25782":"plt.figure(figsize=(20, 10))\nsns.set(font_scale=1.5, palette= \"dark\")\nsns.countplot(data = olympics10, x = \"Medal\", hue = \"Country\", \n              order = [\"Gold\", \"Silver\", \"Bronze\"], hue_order= top10.index)\nplt.title(\"Top 10 Countries by Medals\", fontsize = 20)\nplt.show()","3810bbf9":"olympics.head(10)","38fff3a4":"medals_per_country = pd.crosstab(index = olympics.Country, columns = olympics.Medal, \n                                 margins = True, margins_name = \"Total\")","eb46eb4e":"medals_per_country","3a77bd5d":"medals_per_country.drop(\"Total\", axis = 0, inplace = True)","299063c6":"medals_per_country","4f2ff8be":"medals_per_country = medals_per_country[[\"Total\", \"Gold\", \"Silver\", \"Bronze\"]].sort_values(by = [\"Total\", \"Gold\", \"Silver\", \"Bronze\"], ascending = False)","30c36eb3":"medals_per_country.head(50)","9c0f407a":"dic","fb87aa27":"medals_per_country = medals_per_country.merge(dic, how = \"left\", left_index = True, \n                                              right_on = \"Country\")","6020c0e5":"medals_per_country","6549d5ec":"medals_per_country = medals_per_country.drop(columns = [\"Code\"]).set_index(\"Country\")","9bd3c1a3":"medals_per_country","fbc372f9":"olympics.nunique()","d41ce53b":"olympics[\"Games\"] = olympics.apply(lambda x: str(x.Year) + \" \" + x.City, axis = 1)","af8f76be":"olympics.head(10)","88982c22":"olympics.Games.nunique()","1b88ec26":"olympics.Games.value_counts()","acae5275":"olympics.groupby(\"Country\").apply(lambda x: x.Games.nunique())","5d7938f5":"medals_per_country[\"TotalGames\"] = olympics.groupby(\"Country\").apply(lambda x: x.Games.nunique())","fb4b2489":"medals_per_country.head(50)","3e793863":"medals_per_country.rank(ascending = False).head(50)","d5772d51":"medals_per_country","907654c4":"medals_per_country.drop(columns = [\"Gold\", \"Silver\", \"Bronze\"], inplace = True)","cd375f6d":"medals_per_country.corr(method = \"pearson\")","899258af":"medals_per_country.corr(method = \"spearman\")","da246513":"medals_per_country.rank(ascending = False).corr(method = \"pearson\")","01851b2d":"stats.spearmanr(medals_per_country.Total, medals_per_country.Population, \n                             nan_policy = \"omit\")","7bdfcffc":"r, p_value = stats.spearmanr(medals_per_country.Total, medals_per_country.Population, \n                             nan_policy = \"omit\")","d7007c3d":"r","379e8070":"round(p_value)","8e4e5020":"r, p_value = stats.spearmanr(medals_per_country.Total, medals_per_country.GDP,\n                             nan_policy = \"omit\")","83c0149d":"r","765ec3e9":"p_value","68f60515":"medals_per_country.head(50)","2852d820":"r, p_value = stats.spearmanr(medals_per_country.head(50).Total, \n                             medals_per_country.head(50).TotalGames)","856e75bc":"r","d74ddf9e":"p_value","262afed8":"olympics.head(10)","33d93818":"sum_vs_win = pd.crosstab(olympics.Country, olympics.Edition)","d57c5dac":"sum_vs_win","80aa5b2e":"men_vs_women =  pd.crosstab(olympics.Country, olympics.Gender)","fbc4ab40":"men_vs_women","961c962e":"medals_by_cats = pd.concat([sum_vs_win, men_vs_women], axis = 1)","3daab77a":"medals_by_cats ","91fe8350":"medals_by_cats[\"Total\"] = medals_by_cats.Summer + medals_by_cats.Winter","a0383ced":"medals_by_cats","5d565cf1":"medals_by_cats.sort_values(\"Total\", ascending = False, inplace = True)","666cdc93":"medals_by_cats","1266f3cb":"ranks = medals_by_cats.rank(ascending = False, method = \"average\")","3697b441":"ranks","8feaa900":"top50 = ranks.head(50)","8d95876e":"top50.T","f049cca3":"plt.figure(figsize = (50, 10))\nsns.heatmap(top50.T, cmap =\"YlGnBu\", annot = True, fmt = '2.0f')\nplt.show()","cc4434c4":"top50.sort_values(\"Summer\")","77b4046b":"top50.sort_values(\"Winter\")","93478d06":"plt.figure(figsize = (50, 10))\nsns.heatmap(top50.sort_values(\"Summer\").T, cmap = \"YlGnBu\", annot = True, fmt = '2.0f')\nplt.show()","b27bf196":"plt.figure(figsize = (50, 10))\nsns.heatmap(top50.sort_values(\"Winter\").T, cmap = \"YlGnBu\", annot = True, fmt = '2.0f')\nplt.show()","3d62cafd":"top50.Summer.sub(top50.Winter).sort_values()","4938b013":"rank_diff = top50.Summer.sub(top50.Winter).sort_values().to_frame()","86a22bfc":"rank_diff","e957c02e":"plt.figure(figsize = (35, 5))\nsns.heatmap(rank_diff.T, cmap = \"BuPu\", annot = True, fmt = '2.0f', center = 0)\nplt.show()","ae48bf27":"plt.figure(figsize = (50, 10))\nsns.heatmap(top50.sort_values(\"Men\").T, cmap = 'RdYlGn_r', annot = True, fmt ='2.0f')\nplt.show()","94671446":"plt.figure(figsize = (50, 10))\nsns.heatmap(top50.sort_values(\"Women\").T, cmap = 'RdYlGn_r', annot = True, fmt ='2.0f')\nplt.show()","783c6558":"rank_diff2 = top50.Men.sub(top50.Women).sort_values().to_frame()","35b082a1":"rank_diff2","9f9a72d3":"plt.figure(figsize = (35, 5))\nsns.heatmap(rank_diff2.T, cmap = 'BuPu', annot = True, fmt = '2.0f', center = 0)\nplt.show()","15326281":"olympics.head(10)","b34afb3f":"olympics.Sport.value_counts()","0e273c74":"sports = olympics.Sport.value_counts().index","df9ed40d":"sports","0ccc24bf":"top20 = olympics.Country.value_counts().head(20).index","143abda2":"top20","1b9db3ce":"by_sport = pd.crosstab(olympics.Country, olympics.Sport)","889b5884":"by_sport","40715d61":"by_sport = by_sport.rank(ascending = False, method = \"average\")","1a597f3c":"by_sport = by_sport.loc[top20, sports].copy()","c67c2c94":"by_sport","2698998c":"plt.figure(figsize = (30, 10))\nsns.heatmap(by_sport, cmap = \"RdYlGn_r\", vmin = 1, vmax = 6, linewidth = 1)\nplt.show()","e6f4182d":"### 1. Which are the most successful countries of all times in the Olympics?","81a3c938":"Also, split the answer into top countries Summer and Winter olympics wise","10454c85":"## Data Cleaning","698ff86b":"### Importing the data and viewing the data to get an overview","69fc522a":"#### 1. Merging the Summer and Winter games data into a single dataset","b4b32855":"__Reject Hypothesis 3: There is a significant (positive) relationship between Total Medals and Participations__","9664bee0":"__Hypothesis 2: There is no relationship between Total Medals and GDP per Capita__","ed893273":"## Data Visualization - Answering essential questions","a3b51efc":"### 6. Rank Top 20 countries by Sports. This will help figure out which country does good at which sport","1c6f094b":"### 5. Men vs. Women difference for Top 50 countries","e1015ead":"The dataset contains the list winners\/medals given for Summer and Winter Olympic Games from year 1896 to 2021. These details are contained in seperate files for summer and winter games. The dictionary file contains the Country code mapped to Country names","78d3bc31":"#### 3. Data cleaning - remove duplicates & dealing with null values","59460e82":"### 3. Create a Seaborn Heatmap with Medal Ranks for Top 50 Countries (Total Medals, Summer Games Medals, Winter Games Medals, Men, Women).","71e0803c":"#### 2. Add country full name to olympics dataframe using dic ","c38b4fbc":"### 2. Do GDP, Population and Politics matter?","00b4fcc5":"__Reject Hypothesis 1: There is a significant (positive) relationship between Total Medals and Population__","0ecc6f89":"__Hypothesis 3: There is no relationship between Total Medals and Participations__","1297430f":"__Hypothesis 1: There is no relationship between Total Medals and Population__","c990b965":"### 4. Create a heatmap to display Top 50 country ranking based on performnce in Summer vs Winter Olympics","a45899b9":"#### 4. I will convert Medal into an ordered categorical column (Bronze - Silver - Gold). This will be helpful during data visualization","34991ee6":"### The goal of this notebook is to perform Exploratory Data Analysis of the Olympic dataset. I have performed data cleaning, data aggregation and data visualization in this. Various graphs and charts have been generated to answer certain common questions using the Olympic datasets.\n### I use the Pandas, Matplotlib and Seaborn libraries in Python to perform this. ","7569d4a9":"__Reject Hypothesis 2: There is a significant (positive) relationship between Total Medals and GDP per Capita__","b56557bb":"# Exploratory Data Analysis on Olympic Games Datasets"}}