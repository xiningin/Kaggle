{"cell_type":{"839e96c4":"code","de0ba4d8":"code","8d5f9a84":"code","9308788e":"code","589c6ee0":"code","f4a6d2ce":"code","72d56f38":"code","544171da":"code","8ee78d8e":"code","fe0fe438":"code","ad310f6b":"code","cd21a39e":"code","c367f368":"code","c558e41e":"code","33a5680d":"code","9ebafb10":"code","47ac2056":"code","a1b3b256":"code","777be1c2":"code","2a7348d5":"code","9c24e667":"code","bedf7f5e":"code","0cb4936f":"code","94e72bde":"code","3f4cd0f5":"code","218191b2":"code","eb15d43b":"code","51825ce7":"code","265b7e99":"code","6e461f3f":"code","93d59e69":"code","bc9e331c":"code","5ac84966":"code","8c9eb08d":"code","2bd3256a":"code","e114a6ef":"code","19e57741":"code","f9b52e03":"code","b9b99c50":"code","d17d4ecc":"code","8a6c2a11":"code","6dece988":"code","b7b440bf":"code","ddd5e2fe":"code","c8d96b4e":"code","0ced0ce7":"code","7eaf0705":"code","f705a6e5":"code","1c7f3397":"code","fd500643":"code","0735e0e3":"code","65cc9cd8":"code","7a7d3562":"code","09603d1d":"code","d02b2cfc":"code","7d44df01":"code","c42c5b0e":"code","39df00c6":"code","760a0891":"code","fdba6dab":"code","dff46eac":"code","2c453fbb":"code","363d2948":"code","0ca423b2":"code","556ef01e":"code","69dee057":"code","72ef9878":"code","f37ecaea":"code","56a85169":"code","433e1782":"code","ccc0d5fa":"code","ed8bb969":"code","3c85112d":"code","b014d4c4":"code","4f85db92":"code","896ae7cf":"code","68890895":"code","e71e8008":"code","6ce7b677":"code","697ae1d7":"code","63360846":"code","179385c5":"code","0941b6cb":"code","f861d1ee":"code","10fced7b":"code","50880c39":"code","d991069f":"code","23f4a577":"code","4bfc9400":"code","cd6e47a3":"code","6f172dcd":"code","2f1d6886":"code","20e19513":"code","2c7c9df6":"code","19571288":"code","89061aa4":"code","cd3436ae":"code","d4bdba7b":"code","9bdd161b":"code","719bfd4d":"code","fd0e791a":"code","1e03e573":"code","db13f36c":"code","4230a743":"code","946e16dc":"code","7205ab4d":"code","d6180706":"code","7fa23d56":"code","6772e503":"code","0b54c6ed":"code","1e797e18":"code","22cd8c7d":"code","700dbca3":"code","32db6310":"code","ed2badb2":"markdown","33c1bab4":"markdown","273c3ead":"markdown","e0b16279":"markdown","cd18b3d8":"markdown","5483d3bd":"markdown","b2cc732a":"markdown","0e21ff72":"markdown","125f737e":"markdown","b7ba06d5":"markdown","081d17c7":"markdown","fedf2040":"markdown","0203ed29":"markdown","7a2e33d9":"markdown","2dbf02a4":"markdown","f4749a5b":"markdown","e9d5f3e1":"markdown","546bc871":"markdown","f983db81":"markdown","1101581e":"markdown","8a7b5670":"markdown","ee954143":"markdown","71214514":"markdown","129a97b7":"markdown","0c44ff5f":"markdown","7e0cc225":"markdown","4af04a02":"markdown","aebc3259":"markdown","974b87f1":"markdown","3cc2cb29":"markdown","5df4f170":"markdown","4f96b39e":"markdown","8440208b":"markdown","3ca9de62":"markdown","839cc3aa":"markdown","3e9abec1":"markdown","c8ebebbc":"markdown","c4d7b237":"markdown","7fa85339":"markdown","39ea5c5f":"markdown","d66c790b":"markdown","2efb6d33":"markdown","2fb251eb":"markdown","8355d12e":"markdown","dfad2178":"markdown","5983d403":"markdown","c4664432":"markdown","e76cba7d":"markdown","ab11587e":"markdown","fd6d0e78":"markdown","a5c714fc":"markdown","9ece5e2e":"markdown","fd36ace1":"markdown","bb391f51":"markdown","8f34d840":"markdown","ef34dc2c":"markdown","a7d8b6e7":"markdown","b5b860c4":"markdown","2f335755":"markdown","0eb4ee6c":"markdown","43f21091":"markdown","112b1598":"markdown","4116d9ba":"markdown","4f99866d":"markdown"},"source":{"839e96c4":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nimport scipy.stats as stats\nfrom scipy.stats import chi2_contingency\nfrom matplotlib import gridspec\nimport os\nimport sys\nimport glob\n%matplotlib inline\n%precision 4\nplt.style.use('ggplot')\n","de0ba4d8":"df=pd.read_csv('..\/input\/google-playstore-dataset\/playstore.csv')\ndf","8d5f9a84":"df[\"Rating\"]\n","9308788e":"df.shape","589c6ee0":"df.info()","f4a6d2ce":"df.isna().apply(pd.value_counts) ","72d56f38":"df[\"Rating\"].fillna(df[\"Rating\"].mean(),inplace=True)\ndf[\"Rating\"]","544171da":"df.isna().apply(pd.value_counts) ","8ee78d8e":"df[\"Category\"].unique()\n","fe0fe438":"df[\"Category\"].nunique()","ad310f6b":"print(\"Range: \", df[\"Rating\"].min(),\"-\",df[\"Rating\"].max())\n","cd21a39e":"df[\"Reviews\"]","c367f368":"df[\"Reviews\"] = df[\"Reviews\"].astype(int)\ndf[\"Reviews\"] ","c558e41e":"df.Reviews.hist();\nplt.xlabel('No. of Reviews')\nplt.ylabel('Frequency')","33a5680d":"df.Size.value_counts().head()","9ebafb10":"df.Size=df.Size.str.replace('M','e+6')\ndf.Size.head()","47ac2056":"df.info()","a1b3b256":"def is_convertable(v):\n    try:\n        float(v)\n        return True\n    except ValueError:\n        return False\n    \ntemp=df.Size.apply(lambda x: is_convertable(x))\ntemp.head()","777be1c2":"df.Size[~temp].value_counts()","2a7348d5":"df.Size=df.Size.replace('Varies with device',np.nan)","9c24e667":"df.Installs.value_counts()","bedf7f5e":"df.Installs=df.Installs.apply(lambda x: x.strip('+'))\ndf.Installs=df.Installs.apply(lambda x: x.replace(',',''))\ndf.Installs=df.Installs.replace('Free',np.nan)\ndf.Installs.value_counts()","0cb4936f":"df.Installs.str.isnumeric().sum()","94e72bde":"df.Type.value_counts()","3f4cd0f5":"df[\"Content Rating\"].unique()","218191b2":"df.dtypes","eb15d43b":"df.isna().sum()","51825ce7":"df.dropna(inplace=True)","265b7e99":"df.info()","6e461f3f":"df_num=df.select_dtypes(include=np.number)\ndf_cat=df.select_dtypes(include='object')","93d59e69":"df_num.head(5)","bc9e331c":"df_cat.head(5)","5ac84966":"df.mean()","8c9eb08d":"import scipy \nfrom scipy.stats import stats","2bd3256a":"scipy.stats.trim_mean(df['Rating'],proportiontocut=0.1)","e114a6ef":"scipy.stats.trim_mean(df['Reviews'],proportiontocut=0.1)","19e57741":"# We can say that Installs are having outliers","f9b52e03":"df.median()","b9b99c50":"df.mode()","d17d4ecc":"df_cat.mode()","8a6c2a11":"df_cat.describe()","6dece988":"mean1=df['Rating'].mean()\nmedian1=df['Rating'].median()\nmode1=df['Rating'].mode()\n\nprint('Mean: ',mean1,'\\nMedian: ',median1,'\\nMode: ',mode1[0])\nplt.figure(figsize=(10,5))\nplt.hist(df['Rating'],bins=100,color='#e6f49f')\nplt.axvline(mean1,color='#ed0909',label='Mean')\nplt.axvline(median1,color='#2a22c9',label='Median')\nplt.axvline(mode1[0],color='green',label='Mode')\nplt.xlabel('Rating')\nplt.ylabel('Frequency')\nplt.legend()\nplt.show()","b7b440bf":"mean2=df['Reviews'].mean()\nmedian2=df['Reviews'].median()\nmode2=df['Reviews'].mode()\n\nprint('Mean: ',mean2,'\\nMedian: ',median2,'\\nMode: ',mode2[0])\nplt.figure(figsize=(10,5))\nplt.hist(df['Rating'],bins=100,color='#e6f49f')\nplt.axvline(mean2,color='#ed0909',label='Mean')\nplt.axvline(median2,color='#2a22c9',label='Median')\nplt.axvline(mode2[0],color='green',label='Mode')\nplt.xlabel('Rating')\nplt.ylabel('Frequency')\nplt.legend()\nplt.show()","ddd5e2fe":"mean4=df['Installs'].mean()\nmedian4=df['Installs'].median()\nmode4=df['Installs'].mode()\n\nprint('Mean: ',mean4,'\\nMedian: ',median4,'\\nMode: ',mode4[0])\nplt.figure(figsize=(10,5))\nplt.hist(df['Rating'],bins=100,color='#e6f49f')\nplt.axvline(mean4,color='#ed0909',label='Mean')\nplt.axvline(median4,color='#2a22c9',label='Median')\nplt.axvline(mode4[0],color='green',label='Mode')\nplt.xlabel('Installs')\nplt.ylabel('Frequency')\nplt.legend()\nplt.show()","c8d96b4e":"Q1=df.quantile(0.25)\nQ1","0ced0ce7":"Q2=df.quantile(0.5)\nQ2","7eaf0705":"Q3=df.quantile(0.75)\nQ3","f705a6e5":"# import the library matplotlib.pyplot \nimport matplotlib.pyplot as plt\n\n# using the below code line, matplotlib graphs are included in the python notebook\n%matplotlib inline\n\n# set the plot size\nplt.rcParams[\"figure.figsize\"] = [25,10]\n\n# compute the quartiles\nq1 = df.Rating.quantile(q=0.25)   # compute the first quartile\nq2 = df.Rating.quantile(q=0.50)   # compute the second quartile\nq3 = df.Rating.quantile(q=0.75)   # compute the third quartile\nprint('Q1=',q1)\nprint('Q2=',q2)\nprint('Q3=',q3)\n# plot the density plot the density plot\ndf.Rating.plot(kind='density') \n\n# to plot the quartile lines\n# plt.axvline(): plots a line perpendicular to the X-axis at specified location on X-axis\n# x: location on X-axis at which the line is to be plotted\n# ymax: specify the height of the line\n# color: color of the line\n# linestyle: specify the style of the line \n# label: the name of the line. This name is displayed in the legend\nplt.axvline(x = q1, color='red', linestyle='--', label =\"First Quartile\")     # plot the first quartile\nplt.axvline(x = q2, color='blue', linestyle='--', label =\"Second Quartile\")   # plot the second quartile\nplt.axvline(x = q3, color='green', linestyle='--', label =\"Third Quartile\")   # plot the third quartile\n# loc: specify the location of the legend\n# fontsize: set the font size of the legends\nplt.legend(loc=\"best\", fontsize= 15)\n\n# to display the plot title using plt.title()\n# fontsize: set the font size of the title\nplt.title(\"Ratings\", fontsize = 20)\n\n# to label the X-axis using plt.xlabel()\n# fontsize: set the font size of the label\nplt.xlabel(\"Rating\", fontsize = 15)\n\n# to label the Y-axis\n# fontsize: set the font size of the label\nplt.ylabel(\"Frequency\", fontsize = 15)\n\n\n# label the X-axis at the points where we draw the perpendicular lines using plt.xticks()\n# locs: specify the location on X-axis\n# labels: specify the labels on X-axis\n# fontsize: set the font size of the ticks\nlocs,labels = [q1,q2,q3],[\"Q1\",\"Q2\",\"Q3\"]           # get locations and labels\nplt.xticks(locs, labels, fontsize = 15 )            # set locations and labels\n\n# to display the figure\nplt.show()","1c7f3397":"sns.boxplot(df.Rating)","fd500643":"# import the library matplotlib.pyplot \nimport matplotlib.pyplot as plt\n\n# using the below code line, matplotlib graphs are included in the python notebook\n%matplotlib inline\n\n# set the plot size\nplt.rcParams[\"figure.figsize\"] = [25,10]\n\n# compute the quartiles\nq11 = df.Reviews.quantile(q=0.25)   # compute the first quartile\nq21 = df.Reviews.quantile(q=0.50)   # compute the second quartile\nq31 = df.Reviews.quantile(q=0.75)   # compute the third quartile\nprint('Q1=',q11)\nprint('Q2=',q21)\nprint('Q3=',q31)\n# plot the density plot the density plot\ndf.Rating.plot(kind='density') \n\n# to plot the quartile lines\n# plt.axvline(): plots a line perpendicular to the X-axis at specified location on X-axis\n# x: location on X-axis at which the line is to be plotted\n# ymax: specify the height of the line\n# color: color of the line\n# linestyle: specify the style of the line \n# label: the name of the line. This name is displayed in the legend\nplt.axvline(x = q11, color='red', linestyle='--', label =\"First Quartile\")     # plot the first quartile\nplt.axvline(x = q21, color='blue', linestyle='--', label =\"Second Quartile\")   # plot the second quartile\nplt.axvline(x = q31, color='green', linestyle='--', label =\"Third Quartile\")   # plot the third quartile\n# loc: specify the location of the legend\n# fontsize: set the font size of the legends\nplt.legend(loc=\"best\", fontsize= 15)\n\n# to display the plot title using plt.title()\n# fontsize: set the font size of the title\nplt.title(\"Reviews\", fontsize = 20)\n\n# to label the X-axis using plt.xlabel()\n# fontsize: set the font size of the label\nplt.xlabel(\"Reviews\", fontsize = 15)\n\n# to label the Y-axis\n# fontsize: set the font size of the label\nplt.ylabel(\"Reviews\", fontsize = 15)\n\n\n# label the X-axis at the points where we draw the perpendicular lines using plt.xticks()\n# locs: specify the location on X-axis\n# labels: specify the labels on X-axis\n# fontsize: set the font size of the ticks\nlocs,labels = [q11,q21,q31],[\"Q1\",\"Q2\",\"Q3\"]           # get locations and labels\nplt.xticks(locs, labels, fontsize = 15 )            # set locations and labels\n\n# to display the figure\nplt.show()","0735e0e3":"sns.boxplot(df.Reviews)","65cc9cd8":"r=df_num.max()-df_num.min()\nr","7a7d3562":"iqr=df.quantile(0.75)-df.quantile(0.25)\niqr","09603d1d":"from scipy.stats import variation\nscipy.stats.variation(df_num)","d02b2cfc":"df.std()","7d44df01":"# set plot size\nplt.rcParams[\"figure.figsize\"] = [15,10]\n\n# plot density plot using plot()\n# kind: set the type of plot\n# subplots: indicates whether to plot subplot for each variable or a single line plot\n# layout: specify the arrangement of the subplots\n# sharex: indicates whether to have the same scale on x-axis of all subplots\ndf.plot(kind = 'density', subplots = True, layout = (3,3), sharex = False)\n\n# show plot\nplt.show()","c42c5b0e":"df.skew()","39df00c6":"plt.figure(figsize=(15,8))\nsns.distplot(a = df['Rating'], hist = False)\n\n# plot and axes labels\n# set text size using 'fontsize'\nplt.xlabel('Rating', fontsize = 15)\nplt.ylabel('Density', fontsize = 15)\nplt.title('Distribution of Rating', fontsize = 15)\n\n# display the plot\nplt.show()","760a0891":"sns.boxplot(df.Rating)","fdba6dab":"plt.figure(figsize=(15,8))\nsns.distplot(a = df['Reviews'], hist = False)\n\n# plot and axes labels\n# set text size using 'fontsize'\nplt.xlabel('Reviews', fontsize = 15)\nplt.ylabel('Density', fontsize = 15)\nplt.title('Distribution of Reviews', fontsize = 15)\n\n# display the plot\nplt.show()","dff46eac":"sns.boxplot(df.Reviews)","2c453fbb":"plt.figure(figsize=(15,8))\nsns.distplot(a = df['Installs'], hist = False)\n\n# plot and axes labels\n# set text size using 'fontsize'\nplt.xlabel('Installs', fontsize = 15)\nplt.ylabel('Density', fontsize = 15)\nplt.title('Distribution of Install', fontsize = 15)\n\n# display the plot\nplt.show()","363d2948":"var=df.var()\nvar","0ca423b2":"sns.heatmap(df.cov(),annot=True)","556ef01e":"corr=df.corr()\ncorr","69dee057":"sns.heatmap(df.corr(),annot=True)","72ef9878":"df[\"Type\"].value_counts()","f37ecaea":"type_plot = sns.countplot(x=\"Type\", data=df, palette = \"winter\")\ntype_plot.set_xticklabels(type_plot.get_xticklabels(), rotation=90, ha=\"right\")\ntype_plot \nplt.title('Number of Free Apps vs Paid Apps',size = 10)","56a85169":"sample=df.groupby('Type').apply(lambda x:x.sample(8,random_state=4))\nlen(sample)","433e1782":"import scipy.stats as stats\nstat, p_value = stats.shapiro(sample[\"Rating\"])\n\n# print the p-value \nprint('P-Value:', p_value)\nprint(\"pval > 0.05 Therefore Ratings are normally distributed\")\n","ccc0d5fa":"free1 = sample[(sample['Type'] == 'Free')]\npaid1 = sample[(sample['Type'] == 'Paid')]\n","ed8bb969":"all_app_ratings = np.array(df['Rating'])\npaid_app_rating_kde = stats.gaussian_kde(paid1['Rating'])\nratings = np.linspace(0, 7, 1000)\nplt.figure(figsize=(16,5))\nplt.plot(ratings, paid_app_rating_kde(ratings), label=\"Paid apps rating\")\nmean_paid_app_rating = np.mean(paid1['Rating'])\nprob_mean_paid_app_rating = paid_app_rating_kde(mean_paid_app_rating)[0]\nplt.vlines(x=mean_paid_app_rating, ymin=0, ymax=prob_mean_paid_app_rating, color='b', label=\"Mean rating for paid app\")\n\nplt.title(\"Rating distribution of paid apps\")\nplt.xlabel(\"Ratings\")\nplt.ylabel(\"Probability\")\nplt.legend()","3c85112d":"free_app_rating_kde = stats.gaussian_kde(free1['Rating'])\nratings = np.linspace(0, 7, 1000)\nplt.figure(figsize=(16,5))\nplt.plot(ratings, free_app_rating_kde(ratings), label=\"Free apps rating\")\nmean_free_app_rating = np.mean(free1['Rating'])\nprob_mean_free_app_rating = free_app_rating_kde(mean_free_app_rating)[0]\nplt.vlines(x=mean_free_app_rating, ymin=0, ymax=prob_mean_free_app_rating, color='g', label=\"Mean rating for free app\")\nplt.title(\"Rating distribution of free apps\")\nplt.xlabel(\"Ratings\")\nplt.ylabel(\"Probability\")\nplt.legend()","b014d4c4":"free = sample[(sample['Type'] == 'Free')][\"Rating\"]\nlen(free)\npaid = sample[(sample['Type'] == 'Paid')][\"Rating\"]\nlen(paid)","4f85db92":"stat, p_value = stats.levene(free,paid)\nprint('P-Value:', p_value)\nprint(\"From the above result, we can see that the p-value is greater than 0.05, thus we can say that the population variances are equal.\")","896ae7cf":"test_stat, p_value = stats.ttest_ind(a = free, b = paid)\nprint('p-value:', p_value)\nprint(\"p-value is > 0.05 , thus we accept H0 and conclude that the type of app doesnt affect the ratings\")\n","68890895":"sample=df.groupby('Type').apply(lambda x:x.sample(12,random_state=5))\nlen(sample)","e71e8008":"free = sample[(sample['Type'] == 'Free')][\"Installs\"]\nlen(free)\npaid = sample[(sample['Type'] == 'Paid')][\"Installs\"]\nlen(paid)","6ce7b677":"stat, p_value = stats.shapiro(sample[\"Installs\"])\n\n# print the p-value \nprint('P-Value:', p_value)\nprint(\"pval < 0.05 Therefore Ratings are Not normally distributed\")","697ae1d7":"stat, p_value = stats.mannwhitneyu(free,paid,alternative=\"two-sided\")\nprint('P-Value:', p_value)","63360846":"sample=df.groupby('Category').apply(lambda x:x.sample(32,random_state=40))\nprint(\"sample size(n):\",len(sample))","179385c5":"df.Category.value_counts()","0941b6cb":"Cat=sample.Category.unique()\ntype(Cat)\nmylist=list(Cat)\ntype(mylist)\nmylist","f861d1ee":"for item in mylist:\n    myd=sample[sample['Category']==item]['Rating']\n    test,p_val=stats.shapiro(myd)\n    print(item,' : ',p_val)","10fced7b":"plt.rcParams[\"figure.figsize\"] = [25,25]\n\n# divide the plot into the specified number of subplots \ngs = gridspec.GridSpec(4, 5, width_ratios=[3, 3, 3, 3, 3], height_ratios=[1, 1, 1, 1])","50880c39":"#***********************************Plotting for Auto_Vehicles*****************************************************\nAuto_Veh=sample[sample['Category']=='AUTO_AND_VEHICLES']['Rating']\nplt.subplot(gs[0,0])\nplt.title('Dense_Auto_Vehicle')\nsns.distplot(Auto_Veh,color='green')  #Normal so green\n#***********************************Plotting for Beauty************************************************************\nBeauty=sample[sample['Category']=='BEAUTY']['Rating']\nplt.subplot(gs[0,1])\nplt.title('Dense_Beauty')\nsns.distplot(Beauty,color='green')  #Normal so green\n#***********************************Plotting for Books_Reference***************************************************\nBook_Ref=sample[sample['Category']=='BOOKS_AND_REFERENCE']['Rating']\nplt.subplot(gs[0,2])\nplt.title('Dense_Books_Reference')\nsns.distplot(Book_Ref,color='brown')  #Not normal so brown\n#***********************************Plotting for Business**********************************************************\nBusiness=sample[sample['Category']=='BUSINESS']['Rating']\nplt.subplot(gs[0,3])\nplt.title('Dense_Business')\nsns.distplot(Business,color='green')  #Normal so green\n#***********************************Plotting for Communication**********************************************************\nComm=sample[sample['Category']=='COMMUNICATION']['Rating']\nplt.subplot(gs[0,4])\nplt.title('Dense_Communication')\nsns.distplot(Comm,color='green')  #Normal so green\n#***********************************Plotting for Dating************************************************************\nDating=sample[sample['Category']=='DATING']['Rating']\nplt.subplot(gs[1,0])\nplt.title('Dense_Dating')\nsns.distplot(Dating,color='brown')  #Not normal so brown\n#***********************************Plotting for Entertainment************************************************************\nEntrtnmnt=sample[sample['Category']=='ENTERTAINMENT']['Rating']\nplt.subplot(gs[1,1])\nplt.title('Dense_Entertainment')\nsns.distplot(Entrtnmnt,color='brown')  #Not normal so brown\n#***********************************Plotting for Events************************************************************\nEvents=sample[sample['Category']=='EVENTS']['Rating']\nplt.subplot(gs[1,2])\nplt.title('Dense_Events')\nsns.distplot(Events,color='green')  #Normal so green\n#***********************************Plotting for Finance************************************************************\nFin=sample[sample['Category']=='FINANCE']['Rating']\nplt.subplot(gs[1,3])\nplt.title('Dense_Finance')\nsns.distplot(Fin,color='brown') #Not normal so brown\n#***********************************Plotting for Comics************************************************************\nComics=sample[sample['Category']=='COMICS']['Rating']\nplt.subplot(gs[1,4])\nplt.title('Dense_Comics')\nsns.distplot(Comics,color='brown') #Not normal so brown\n#***********************************Plotting for Education************************************************************\nEdu=sample[sample['Category']=='EDUCATION']['Rating']\nplt.subplot(gs[2,0])\nplt.title('Dense_Education')\nsns.distplot(Edu,color='green')  #Normal so green\n#***********************************Plotting for Food_And_Drink************************************************************\nFood_Drink=sample[sample['Category']=='FOOD_AND_DRINK']['Rating']\nplt.subplot(gs[2,1])\nplt.title('Dense_Food_Drink')\nsns.distplot(Food_Drink,color='green')  #Normal so green\n#***********************************Plotting for Game************************************************************\nGame=sample[sample['Category']=='GAME']['Rating']\nplt.subplot(gs[2,2])\nplt.title('Dense_Game')\nsns.distplot(Game,color='brown')  #Not normal so brown\n#***********************************Plotting for Health_And_Fitness************************************************************\nHealth_Fit=sample[sample['Category']=='HEALTH_AND_FITNESS']['Rating']\nplt.subplot(gs[2,3])\nplt.title('Dense_Health_Fitness')\nsns.distplot(Health_Fit,color='brown') #Not normal so brown\n#***********************************Plotting for House_Home************************************************************\nHouse_Home=sample[sample['Category']=='HOUSE_AND_HOME']['Rating']\nplt.subplot(gs[2,4])\nplt.title('Dense_House_Home')\nsns.distplot(House_Home,color='green') #Normal so green\n#***********************************Plotting for Libraries_And_Demo************************************************************\nLib_Demo=sample[sample['Category']=='LIBRARIES_AND_DEMO']['Rating']\nplt.subplot(gs[3,0])\nplt.title('Dense_Lib_Demo')\nsns.distplot(Lib_Demo,color='brown') #Not normal so brown\n#***********************************Plotting for Lifestyle************************************************************\nLifestyle=sample[sample['Category']=='LIFESTYLE']['Rating']\nplt.subplot(gs[3,1])\nplt.title('Dense_LifeStyle')\nsns.distplot(Lifestyle,color='brown') #Not normal so brown\n#***********************************Plotting for Art_Design*****************************************************\nArt_Design=sample[sample['Category']=='ART_AND_DESIGN']['Rating']\nplt.subplot(gs[3,2])\nplt.title('Dense_Art_Design')\nsns.distplot(Art_Design,color='brown') #Not normal so brown\nplt.show()","d991069f":"stats.levene(Art_Design,Auto_Veh,Beauty,Book_Ref,Business,Comm,Dating,Entrtnmnt,Events,Fin,Comics,Edu,Food_Drink,Game,Health_Fit,House_Home,Lib_Demo,Lifestyle)","23f4a577":"p_val = stats.kruskal(Art_Design,Auto_Veh,Beauty,Book_Ref,Business,Comm,\n              Dating,Entrtnmnt,Events,Fin,Comics,Edu,Food_Drink,Game,Health_Fit,\n              House_Home,Lib_Demo,Lifestyle)\nprint(\"pval :\",p_val)\nprint(\"Since p_value < 0.05 we reject H0 and thus we conclude that average rating is not the same   for all the category of apps\")","4bfc9400":"df['Content Rating'].value_counts()","cd6e47a3":"df[df['Content Rating']=='Adults only 18+']","6f172dcd":"df.drop([298], axis=0, inplace=True)","2f1d6886":"df['Content Rating'].value_counts()","20e19513":"sample=df.groupby('Content Rating', group_keys=False).apply(lambda x:x.sample(30,random_state=1))\nsample.shape","2c7c9df6":"df.isna().sum()","19571288":"from statsmodels.stats.multicomp import pairwise_tukeyhsd\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm","89061aa4":"df.columns","cd3436ae":"df['Category'].value_counts()","d4bdba7b":"df['Category'].nunique()","9bdd161b":"df['Content Rating'].value_counts()","719bfd4d":"df['Content Rating'].value_counts()","fd0e791a":"## H0 : The content rating is independent of category\n## H1 : The content rating is dependent of category","1e03e573":"sample=df.groupby('Content Rating', group_keys=False).apply(lambda x:x.sample(30,random_state=1))\nsample","db13f36c":"# for sample\nContent = pd.crosstab(sample['Category'], sample['Content Rating'])\nstat, pvalue, dof, arr = stats.chi2_contingency(Content)\nprint(\"chi-stat :\",stat)\nprint(\"p-value :\",pvalue)","4230a743":"sample2 = df.groupby('Type', group_keys=False).apply(lambda x:x.sample(20,random_state=3))","946e16dc":"sample2['Content Rating'].value_counts()","7205ab4d":"table_type = pd.crosstab(sample2['Type'],sample2['Content Rating'])\ntable_type","d6180706":"plt.figure(figsize=(16,5))\nsns.countplot(sample2['Content Rating'], hue=sample2['Type'])\nplt.title(\"Number of Free and Paid applications for each Content Rating\")\nplt.xlabel(\"Content Rating\")\nplt.ylabel(\"Count\")\nplt.legend()\n","7fa23d56":"# Test Of Independence\nstat, pvalue, dof, arr = stats.chi2_contingency(table_type)\nprint(\"chi-stat :\",stat)\nprint(\"p-value :\",pvalue)\nprint(\"Degrees of Freedom :\",dof)\nprint(\"Expected array :\\n\",np.round(arr))","6772e503":"p=pd.read_csv('..\/input\/google-playstore-dataset\/playstore.csv')\np","0b54c6ed":"# Central Limit Theorem\ndef central_limit_theorem(data,n_samples = 1000, sample_size = 500):\n    \"\"\" Use this function to demonstrate Central Limit Theorem. \n        data = 1D array, or a pd.Series\n        n_samples = number of samples to be created\n        sample_size = size of the individual sample \"\"\"\n    %matplotlib inline\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    min_value = 0  # minimum index of the data\n    max_value = data.count()  # maximum index of the data\n    b = {}\n    for i in range(n_samples):\n        x = np.unique(np.random.randint(min_value, max_value, size = sample_size)) # set of random numbers with a specific size\n        b[i] = data[x].mean()   # mean of each sample\n    c = pd.DataFrame()\n    c['sample'] = b.keys()  # sample number \n    c['Mean'] = b.values()  # mean of that particular sample\n    plt.figure(figsize= (15,5))\n\n    plt.subplot(1,2,2)\n    sns.distplot(c.Mean,color='b')\n    plt.title(f\"Sampling Distribution. \\n \\u03bc = {round(c.Mean.mean(), 3)} & SE = {round(c.Mean.std(),3)}\")\n    plt.xlabel('data')\n    plt.ylabel('freq')\n\n    plt.subplot(1,2,1)\n    sns.distplot(data,color='g')\n    plt.title(f\"Population Distribution. \\n \\u03bc = {round(data.mean(), 3)} & \\u03C3 = {round(data.std(),3)}\")\n    plt.xlabel('data')\n    plt.ylabel('freq')\n    plt.show()\n","1e797e18":"central_limit_theorem(p.Rating)","22cd8c7d":"If tencent is launching a new game when will the rating of the app be above 4","700dbca3":"def rati(t):\n  count=0\n  for i in t:\n     if i>=4:\n       count +=1\n  total_5 = count\n  return float(total_5) \/ len(t)\n\nt=  [np.random.uniform(0,5) for i in range(1000)]\nfreq = rati(t)\nprint(f\"Frequency of ratings above 4 is {freq}\")","32db6310":"j=[]\nf=[]\ng=0\nfor i in range(1,10001):\n    j.append(i)\n    h=0\n    r=np.random.choice([i for i in np.arange(0, 5.1, 0.1)] )\n    if r>4:\n        g=g+1\n    f.append(g\/i)\nplt.figure(figsize=(15, 10), dpi=80, facecolor='w', edgecolor='k')  \nplt.plot(f,color='r')\nplt.xlabel('No of Installs')\nplt.show()","ed2badb2":"## Range for Reviews,Size and Installs is more in the middle half of the dataset","33c1bab4":"CHECKING TO PERFORM TWO-SAMPLE T-TEST (INDEPENDENT)","273c3ead":"#### SHAPIRO TEST TO CHECK FOR NORMALITY","e0b16279":"Now checking unique non numeric values (~temp) in Size.","cd18b3d8":"### It can be seen that data has metric prefixes (Kilo and Mega) along with another string. Replacing M with their values to convert values to numeric.","5483d3bd":"### MANWHITNEY U TEST","b2cc732a":"#### LEVENE TEST TO ASSESS THE VARIANCES","0e21ff72":"## Thus we can conclude that the Content Rating of application is independent of application Type","125f737e":"## <h1 style=\"color:Tomato;\"> INSTALLS <\/h1>","b7ba06d5":"We can say that Size and Installs follow symmetric distrubution as median=mode","081d17c7":"# Median","fedf2040":"### Replacing null values with average ratings","0203ed29":"#### TWO SAMPLE T-TEST","7a2e33d9":"# Range","2dbf02a4":"## <h1 style=\"color:Tomato;\"> CONTENT RATING <\/h1>","f4749a5b":"### The above values show the median for all the variables. These values divide the observations into two halves implying that there are exactly 50% of observations above this point and 50% below.\n","e9d5f3e1":"### Now, we have some two types of values in our Size data.\n\nExponential values (not yet converted to string)\nStrings (that cannot be converted into numeric)\nThus specifing categories 1 and 2 as an boolean array temp, to convert category 1 to numeric.","546bc871":"### Handling NULL values","f983db81":"\nLets formulate our hypothesis to answer this question.\n\n##### Null Hypothesis ($H_0$)\n   Avg rating is same for all the categories of apps \n##### Alternative Hypothesis ($H_A$)\n   Avg rating for atleast one category is not the same\n","1101581e":"##  <h1 style=\"color:Tomato;\"> REVIEWS <\/h1>","8a7b5670":"# Skewness and Kurtosis","ee954143":"Since p-value > 0.05, we fail to reject Null Hypothesis.","71214514":"##  <h1 style=\"color:Tomato;\"> RATING <\/h1>","129a97b7":"### KRUSKALS TEST","0c44ff5f":"### There are 2000 entries and 8 columns out of which reviews and rating are numeric and other 6 columns are categorial in nature","7e0cc225":"Checking if data is converted to numeric","4af04a02":"\nLets formulate our hypothesis to answer this question.\n\n##### Null Hypothesis ($H_0$)\n    The type of app has no significant impact on the average ratings.\n\n##### Alternative Hypothesis ($H_A$)\n    The type of app has significant impact on the average ratings.\n    \n","aebc3259":"We can conclude that 8 ball pool is the most installed app in the app store","974b87f1":"## We can say that coefficent of variation for Reviews and Rating is more","3cc2cb29":"# KRUSKAL'S TEST","5df4f170":"we reject H0 therefore the avg number of installs for paid and free apps is not the same.","4f96b39e":"#### There are 82 null values in ratings column","8440208b":"# Standard Deviation","3ca9de62":"# Understanding the Distrubution of the data","839cc3aa":"Converting the cleaned Size data to numeric type","3e9abec1":"Since p-value<0.05, we reject Null hypothesis Thus we can conclude that Content Rating and Category of applications are associated with each other","c8ebebbc":"## <h1 style=\"color:Tomato;\"> SIZE <\/h1>","c4d7b237":"It can be seen that there are 22 unique values, out of which\n\n1 is 0,\n1 is Free(string) , which we will be converting to nan here\nand rest are numeric but with '+' and ',' which shall be removed to convert these into numeric type.","7fa85339":"##  <h1 style=\"color:Tomato;\"> CATEGORY <\/h1>","39ea5c5f":"# Mean","d66c790b":"Replacing 'Varies with Device' by nan ","2efb6d33":"# IQR","2fb251eb":"#### Checking if all values in number of Reviews numeric","8355d12e":"## <h1 style=\"color:Tomato;\"> TYPE <\/h1>","dfad2178":"## Range for Reviews,Size and Installs is more so we can say that it is affected by outliers","5983d403":"# Reviews is having a significant higher standard deviation","c4664432":"### CHI-SQUARE TEST","e76cba7d":"### Is  application Type dependent on Content Rating?\nLets formulate our hypothesis to answer this question.\n\n##### Null Hypothesis ($H_0$)\n    The application type is independent of Content Rating.\n\n##### Alternative Hypothesis ($H_A$)\n    The application type is dependent of Content Rating.","ab11587e":"As some of the categories are failing to satisfy Shapiro test and levene test is not combinedly satisfied we can not perform ANOVA. So we have to go for non-parametric Kruskal Test.","fd6d0e78":"# Descriptive Statistics","a5c714fc":"# Trimmed Mean","9ece5e2e":"# Coorelation","fd36ace1":"### Is there significant difference between quality of free apps and paid apps?\nLets formulate our hypothesis to answer this question.\n\n##### Null Hypothesis ($H_0$)\n    The content rating is independent of application category.\n\n##### Alternative Hypothesis ($H_A$)\n    The content rating is dependent of application category.","bb391f51":"There are only two types, free and paid. No unwanted data here.","8f34d840":"# Quantiles","ef34dc2c":"**INSIGHTS**\n\n1.After data cleaning from the descriptive statistics we can see that there are 18 different categories of apps with 1498 rows(apps) and 8 columns and Gaming category has most of the apps\n\n2.From Hypothesis 1 its clear that the type of the app doesn\u2019t have any influence on the rating.\n\n3.Hypothesis 2 proved that the number of installs for paid and free apps are not the same. Tencent can concentrate on free apps if they need more installs.\n\n4.The average rating for the categories of apps are different which can be seen from hypothesis 3. If Tencent\u2019s aim is to have good ratings then they have to concentrate on the category of app which they are launching.\n\n5.Hypothesis 4 shows that the content rating is independent of application type.\n\n6.If Tencent is launching an app into the market, the rating of the app stabilizes above a rating of 4 after 2000 installs from the simulation result considering the app isn\u2019t buggy.\n\n","a7d8b6e7":"# Rating is seem to be Rating is negatively skewed and reviews is right skewed","b5b860c4":"# Coefficient of Variation","2f335755":"### There are 18 categories in Category column","0eb4ee6c":"## Free apps and paid apps have same number of installs ?\nLets formulate our hypothesis to answer this question.\n\n##### Null Hypothesis ($H_0$)\n    The average installs for free and paid apps is same\n\n##### Alternative Hypothesis ($H_A$)\n    The average installs for free and paid apps is not same","43f21091":"# Mode","112b1598":"### For instance, consider the Installs , there are 50% of installs below 1000000  and 50% of installs below 1000000","4116d9ba":"# Variance","4f99866d":"NOTE:-\n\n1)Numerical Columns: Ratings,Reviews,Size,Installs\n\n2)Categorical Columns: App,Category,Type,Content Rating"}}