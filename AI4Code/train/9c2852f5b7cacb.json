{"cell_type":{"8c1975e9":"code","6ab94ad2":"code","d96e24e0":"code","7c8dd812":"code","d2963e0d":"code","d2875ba0":"code","fcac66c6":"code","370c79de":"code","98396adc":"code","c94a7429":"code","2df50f13":"code","c76a2438":"markdown","7bb947b4":"markdown","138fefc3":"markdown","39eabdcf":"markdown"},"source":{"8c1975e9":"# Download EfficientNet from LukeMK\n! pip install efficientnet-pytorch","6ab94ad2":"# Importing the libraries\nfrom fastai.vision import *\nfrom efficientnet_pytorch import EfficientNet","d96e24e0":"# Define the path\npath = Path('\/kaggle\/input\/100-bird-species')\npath.ls()","7c8dd812":"# Create the data using fastai's Datablock API\nsrc = (ImageList.from_folder(path)\n                .split_by_folder(train='train', valid='valid')\n                .label_from_folder()\n                .add_test_folder('test')\n                .transform(get_transforms(), size=224))\n\ndata = src.databunch(bs=32).normalize(imagenet_stats)","d2963e0d":"# Let's see some training examples\ndata.show_batch()","d2875ba0":"# Replace the fully connected layer at the end to fit our task\n# Pre-trained model based on adversarial training\narch = EfficientNet.from_pretrained(\"efficientnet-b0\", advprop=True)\narch._fc = nn.Linear(1280, data.c)","fcac66c6":"# Define custom loss function\nloss_func = LabelSmoothingCrossEntropy()","370c79de":"# Define the model\nlearn = Learner(data, arch, loss_func=loss_func, metrics=accuracy, model_dir='\/kaggle\/working')","98396adc":"# Train the model using 1 Cycle policy\nlearn.fit_one_cycle(3, slice(1e-3))","c94a7429":"# Unfreeze the model and retrain\nlearn.unfreeze()\nlearn.fit_one_cycle(2, slice(1e-5))","2df50f13":"# Let's see the result\nlearn.show_results()","c76a2438":"* EfficientNet comes with a variety of sub-models **from b0 to b7**\n* The larger the model, the higher the amount of **width, depth, resolution, and dropout**\n* We can use bigger images later with larger models","7bb947b4":"* In conclusion, our model was able to reach **98-99% accuracy** using EffcientNet_b0 with 224x224 images!\n* The model **converges very fast after just 1-2 epochs**! :o","138fefc3":"* This is a follow-up from this notebook: https:\/\/www.kaggle.com\/nguyncaoduy\/flowers-recognition-96-fastai-efficientnet\n* Basically, I am using EfficientNet for a bird classsification model","39eabdcf":"| Coefficient | Width | Depth | Resolution | Dropout | Last layer |\n|:-----------:|:-----:|:-----:|:----------:|:-------:|:----------:|\n|      b0     |  1.0  |  1.0  |     224    |   0.2   |1280|\n|      b1     |  1.0  |  1.1  |     240    |   0.2   |1280|\n|      b2     |  1.1  |  1.2  |     260    |   0.3   |1408|\n|      b3     |  1.2  |  1.4  |     300    |   0.3   |1536|\n|      b4     |  1.4  |  1.8  |     380    |   0.4   |1792|\n|      b5     |  1.6  |  2.2  |     456    |   0.4   |2048|\n|      b6     |  1.8  |  2.6  |     528    |   0.5   |2304|\n|      b7     |  2.0  |  3.1  |     600    |   0.5   |2560|"}}