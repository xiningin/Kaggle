{"cell_type":{"6e1abb21":"code","3e08a600":"code","afc7ebbc":"code","513548a7":"code","dbd135f0":"code","290a4fc6":"code","e9374838":"code","5f08d571":"code","693aae1c":"code","b879a83a":"code","23d5bd9e":"code","678b1743":"code","894e25af":"code","79ccd74d":"code","16758bc2":"code","1a027d73":"code","2caa2e16":"code","d16ecead":"code","c0f766e7":"code","5100783c":"code","4bf37251":"code","13876c8e":"code","1080be0d":"code","1de79507":"markdown","edcdc70c":"markdown","1b590484":"markdown","fcf2a5b1":"markdown","106cc369":"markdown","457323db":"markdown","4a32f5f8":"markdown","58fe6f64":"markdown"},"source":{"6e1abb21":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQtz2gKmmUJcM5SPcE6PSl2eL5KchSivd7_lBk7BvcpVG-CZ8Eo',width=400,height=400)","3e08a600":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\nimport plotly.graph_objs as go\nimport plotly.offline as py\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","afc7ebbc":"df = pd.read_csv(\"..\/input\/corona-details\/corona.csv\")","513548a7":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcR4cUM904wVorgJ_kQz_HDQ6wKxrc-onAovOphV5LrpcpKJ4hA3',width=400,height=400)","dbd135f0":"df.head().style.background_gradient(cmap='summer')","290a4fc6":"df.dtypes","e9374838":"fig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.heatmap(df.isna(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","5f08d571":"df.dropna(how = 'all',inplace = True)\ndf.drop(['Publications','Geo_Location','Isolation_Source'],axis=1,inplace = True)\ndf.shape","693aae1c":"fig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.heatmap(df.isna(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","b879a83a":"sns.distplot(df[\"Length\"].apply(lambda x: x**4))\nplt.show()","23d5bd9e":"sns.barplot(x=df['Length'].value_counts().index,y=df['Length'].value_counts())","678b1743":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='red',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n    \nshow_wordcloud(df['Genus'])","894e25af":"\nfrom wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='green',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n    \nshow_wordcloud(df['Species'])","79ccd74d":"\nfrom wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='black',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n    \nshow_wordcloud(df['Family'])","16758bc2":"cnt_srs = df['Protein'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Blues',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Protein distribution',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"Protein\")","1a027d73":"plt.figure(figsize=(10,8))\nax=sns.countplot(df['Protein'])\nax.set_xlabel(xlabel=\"Protein\",fontsize=17)\nax.set_ylabel(ylabel='Protein',fontsize=17)\nax.axes.set_title('Protein',fontsize=17)\nax.tick_params(labelsize=13)\nplt.xticks(rotation=90)\nplt.yticks(rotation=90)","2caa2e16":"for col in df.columns:\n    plt.figure(figsize=(18,9))\n    sns.factorplot(x=col,y='Length',data=df)\n    plt.tight_layout()\n    plt.show()","d16ecead":"sns.barplot(x=df['Length'].value_counts().index,y=df['Length'].value_counts())\nplt.xticks(rotation=90)\nplt.yticks(rotation=90)","c0f766e7":"for col in df.columns:\n    plt.figure(figsize=(18,9))\n    sns.factorplot(x=col,y='Length',data=df)\n    plt.tight_layout()\n    plt.show()","5100783c":"for col in df.columns:\n    plt.figure(figsize=(18,9))\n    sns.barplot(x=col,y='Length',data=df)\n    sns.pointplot(x=col,y='Length',data=df,color='Black')\n    plt.tight_layout()\n    plt.show()","4bf37251":"cat = []\nnum = []\nfor col in df.columns:\n    if df[col].dtype=='O':\n        cat.append(col)\n    else:\n        num.append(col)  \n        \n        \nnum ","13876c8e":"plt.style.use('dark_background')\nfor col in df[num].drop(['Length'],axis=1):\n    plt.figure(figsize=(8,5))\n    plt.plot(df[col].value_counts(),color='Blue')\n    plt.xlabel(col)\n    plt.ylabel('Length')\n    plt.tight_layout()\n    plt.show()","1080be0d":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/quotestats.com\/topic\/955595-biogenetic-quotes-92331.jpg',width=400,height=400)","1de79507":"twitter.com - about COVID-19 \"Rigidity of the Outer Shell Predicted by a Protein Intrinsic Disorder Model Sheds Light on the COVID-19 (Wuhan-2019-nCoV) Infectivity\" BY Editor-in-Chief, Dr. Vladimir N. Uversky \n@Biomol_MDPI","edcdc70c":"Heatmap: After removing of null values. I left The Authors. I refuse to drop the Authors","1b590484":"Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","fcf2a5b1":"Check null values with the help of heatmap. Check the less useful columns (yellow color indicates null values) Code from PrashantSri12 https:\/\/www.kaggle.com\/prashanthsri12\/startups-data-eda-basics","106cc369":"Top 16 Biogenetic Quotes -  The hero was distinguished by his achievement; the celebrity by his image or trademark. The hero created himself; the celebrity is created by the media. The hero was a big man; the celebrity is a big name. - Author: Daniel J. Boorstin https:\/\/quotestats.com\/topic\/biogenetic-quotes\/","457323db":"#Codes from Thor the God of Thunder","4a32f5f8":"genengnews.com - Two big-name biopharmas\u2014Takeda Pharmaceutical and Alnylam Pharmaceuticals\u2014today separately entered the scramble to develop new treatments for SARS-CoV-2 infection, the virus identified as the cause of the global COVID-19 outbreak\u2014adding to the 35 coronavirus treatments in development that were identified by GEN this week.https:\/\/www.genengnews.com\/news\/coronavirus-takeda-pursues-plasma-derived-treatment-alnylam-and-vir-eye-sirna-therapy\/","58fe6f64":"On January 29, 2020, the Institut Pasteur, which is responsible for monitoring respiratory viruses in France, sequenced the whole genome of the coronavirus known as \"2019-nCoV\", becoming the first institution in Europe to sequence the virus since the start of the outbreak. The virus was sequenced at the Institut Pasteur's Mutualized Platform for Microbiology (P2M), which performs genome sequencing on bacterial, viral, fungal and parasite strains received by National Reference Centers and World Health Organization Collaborating Centers for the purpose of infectious disease surveillance.https:\/\/www.pasteur.fr\/en\/press-area\/press-documents\/institut-pasteur-sequences-whole-genome-wuhan-coronavirus-2019-ncov"}}