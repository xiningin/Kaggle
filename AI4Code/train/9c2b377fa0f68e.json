{"cell_type":{"0983002e":"code","ea69e2eb":"code","b54df9bd":"code","4be25d63":"code","c62ca291":"code","6c4854e2":"code","c9705520":"code","8b68d2df":"markdown","94760950":"markdown","2ba846d3":"markdown","64f1708a":"markdown"},"source":{"0983002e":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\n\nfrom IPython.display import clear_output\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ea69e2eb":"!pip install autoviz\n!pip install xlrd\n\nfrom autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\n\nclear_output()","b54df9bd":"ff = AV.AutoViz('..\/input\/30-days-of-ml\/train.csv')","4be25d63":"from xgboost import XGBRegressor\nfrom xgboost import plot_tree\nxgb_params = {\n    'n_estimators': 5000,\n    'learning_rate': 0.1235,\n    'subsample': 0.95,\n    'colsample_bytree': 0.11,\n    'max_depth': 2,\n    'booster': 'gbtree', \n    'reg_lambda': 66.1,\n    'reg_alpha': 15.9,\n    'random_state':42\n}\n","c62ca291":"df = pd.read_csv(\"\/kaggle\/input\/ten-folds\/10_folds (1).csv\")\ndf_test = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")\n\nuseful_features = [c for c in df.columns if c not in (\"id\", \"target\", \"kfold\")]\nobject_cols = [col for col in useful_features if 'cat' in col]\ndf_test = df_test[useful_features]","6c4854e2":"final_predictions = []\nfor fold in range(10):\n    xtrain =  df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n\n    ytrain = xtrain.target\n    yvalid = xvalid.target\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    ordinal_encoder = OrdinalEncoder()\n    xtrain[object_cols] = ordinal_encoder.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = ordinal_encoder.transform(xvalid[object_cols])\n    xtest[object_cols] = ordinal_encoder.transform(xtest[object_cols])\n    \n    model = XGBRegressor(**xgb_params)\n    model.fit(xtrain, ytrain)\n    \n    model.fit(xtrain, ytrain)\n    preds_valid = model.predict(xvalid)\n    test_preds = model.predict(xtest)\n    final_predictions.append(test_preds)\n    print(f\"fold: {fold}, rmse: {mean_squared_error(yvalid, preds_valid, squared=False)}\")","c9705520":"preds = np.mean(np.column_stack(final_predictions), axis=1)\nsample_submission.target = preds\nsample_submission.to_csv(\"xgb_submission_z\", index=False)","8b68d2df":"# AUTO EDA","94760950":"# PREDICTIONS","2ba846d3":"# KFOLDS\n\nThis dataset is the same as abishek thakur created!","64f1708a":"# MODELING"}}