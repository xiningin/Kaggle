{"cell_type":{"be28692e":"code","97c2ab8f":"code","f0db92a9":"code","a2dbd297":"code","9b2d89a4":"code","5cc041f6":"code","0feb1cf0":"code","a007becc":"code","a80c34c5":"code","62b8ed45":"code","7797e431":"code","92c599c6":"code","0a960adc":"code","96703279":"code","63f489db":"code","0cf668fc":"code","5588bc9a":"code","4de948d5":"code","f08f68d7":"code","6b57eee6":"code","a3c13198":"code","5d103dee":"code","8cf542f8":"code","9b8e5132":"markdown"},"source":{"be28692e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport os\nimport glob\nfrom PIL import ImageFile\n\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import load_img, img_to_array\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image_dataset_from_directory\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom keras.callbacks import Callback, EarlyStopping","97c2ab8f":"train = '..\/input\/sports-classification\/train'\ntest = '..\/input\/sports-classification\/test'\nvalid = '..\/input\/sports-classification\/valid'","f0db92a9":"filepaths_train = list(glob.glob(train+'\/**\/*.jpg'))\nfilepaths_test = list(glob.glob(test+'\/**\/*.jpg'))","a2dbd297":"def proc_img(filepath):\n    \"\"\" Create a DataFrame with the filepath and the labels of the pictures\n    \"\"\"\n\n    labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepath))\n\n    filepath = pd.Series(filepath, name='Filepath').astype(str)\n    labels = pd.Series(labels, name='Label')\n\n    # Concatenate filepaths and labels\n    df = pd.concat([filepath, labels], axis=1)\n\n    # Shuffle the DataFrame and reset index\n    df = df.sample(frac=1).reset_index(drop = True)\n    \n    return df","9b2d89a4":"train_df = proc_img(filepaths_train)\ntest_df = proc_img(filepaths_test)","5cc041f6":"print(f'Number of training pictures: {train_df.shape[0]}')\nprint(f'Number of test pictures: {test_df.shape[0]}')","0feb1cf0":"fig, axes = plt.subplots(nrows=3, ncols=5, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(train_df.Filepath[i]))\n    ax.set_title(train_df.Label[i])\nplt.tight_layout()\nplt.show()","a007becc":"# This code fix an error, which would occur during the training otherwise\nImageFile.LOAD_TRUNCATED_IMAGES = True","a80c34c5":"train_generator = ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n    validation_split=0.2\n)\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)","62b8ed45":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='training',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='validation',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)","7797e431":"# Load the pretained model\npretrained_model = tf.keras.applications.MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\n\npretrained_model.trainable = False","92c599c6":"inputs = pretrained_model.input\n\nx = tf.keras.layers.Dense(200, activation='relu')(pretrained_model.output)\nx = tf.keras.layers.Dense(200, activation='relu')(x)\n\noutputs = tf.keras.layers.Dense(73, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)","0a960adc":"model.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","96703279":"my_callbacks  = [EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience=5,\n                              mode='auto')]","63f489db":"history = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=100,\n    callbacks = my_callbacks\n)","0cf668fc":"pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()","5588bc9a":"pd.DataFrame(history.history)[['loss','val_loss']].plot()\nplt.title(\"Loss\")\nplt.show()","4de948d5":"results = model.evaluate(test_images, verbose=0)\n\nprint(\"    Test Loss: {:.5f}\".format(results[0]))\nprint(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))","f08f68d7":"# Predict the label of the test_images\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_images.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]\n\n# Display the result\nprint(f'The first 5 predictions: {pred[:5]}')\n","6b57eee6":"y_test = list(test_df.Label)\nprint(classification_report(y_test, pred))","a3c13198":"cf_matrix = confusion_matrix(y_test, pred, normalize='true')\nplt.figure(figsize = (20,15))\nsns.heatmap(cf_matrix, annot=False, xticklabels = sorted(set(y_test)), yticklabels = sorted(set(y_test)))\nplt.title('Normalized Confusion Matrix')\nplt.show()","5d103dee":"# Display 15 picture of the dataset with their labels\nfig, axes = plt.subplots(nrows=3, ncols=5, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(test_df.Filepath.iloc[i]))\n    ax.set_title(f\"True: {test_df.Label.iloc[i]}\\nPredicted: {pred[i]}\")\nplt.tight_layout()\nplt.show()","8cf542f8":"model.save('my_model.h5') ","9b8e5132":"# **Examples of prediction**"}}