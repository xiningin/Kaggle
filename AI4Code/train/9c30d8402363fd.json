{"cell_type":{"6539901b":"code","588c682e":"code","e2881572":"code","c4d2b38d":"code","e40e0203":"code","274441db":"code","dcbd9193":"code","f99503a5":"code","1b62c7b4":"code","2b122fb4":"markdown","d136e783":"markdown","553ad75c":"markdown","22184ab2":"markdown"},"source":{"6539901b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","588c682e":"train = pd.read_csv(\n    '\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv',\n    index_col='row_id', parse_dates=['date'])\ntest = pd.read_csv(\n    '\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv',\n    index_col='row_id', parse_dates=['date'])\nsubmission = pd.read_csv(\n    '\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv',\n    index_col='row_id')","e2881572":"train['year'] = train['date'].dt.year\ntrain['month'] = train['date'].dt.month\ntrain['day'] = train['date'].dt.day\ntrain['dayofweek'] = train['date'].dt.dayofweek\n\ntest['year'] = test['date'].dt.year\ntest['month'] = test['date'].dt.month\ntest['day'] = test['date'].dt.day\ntest['dayofweek'] = test['date'].dt.dayofweek","c4d2b38d":"X_train = train.query(\"year <  2018\").drop('num_sold', 1).reset_index(drop=True)\nX_valid = train.query(\"year == 2018\").drop('num_sold', 1).reset_index(drop=True)\n\ny_train = train.query(\"year <  2018\")['num_sold'].reset_index(drop=True)\ny_valid = train.query(\"year == 2018\")['num_sold'].reset_index(drop=True)","e40e0203":"drop_cols = ['date', 'year']\n\nX_train.drop(drop_cols, 1, inplace=True)\nX_valid.drop(drop_cols, 1, inplace=True)\ntest.drop(drop_cols, 1, inplace=True)","274441db":"le = LabelEncoder()\n\nfor col in X_train.select_dtypes('O'):\n    X_train[col] = le.fit_transform(X_train[col])\n    X_valid[col] = le.transform(X_valid[col])\n    test[col] = le.transform(test[col])","dcbd9193":"params_init = {\n#            'num_leaves': 60,\n           'importance_type': 'gain',\n           'random_state': 42,\n           'n_estimators': 10_000,\n           # 'num_leaves': 2**7,\n           # 'max_depth': 7,\n       }\n\nparams_fit = {\n    'X': X_train,\n    'y': y_train,\n    'eval_set': [(X_train, y_train), (X_valid, y_valid)],\n    'early_stopping_rounds': 100,\n    'verbose': 100,\n#     'eval_metric': eval_metric,\n#     'categorical_feature': category_feature,\n}","f99503a5":"model = lgb.LGBMRegressor(**params_init)\nmodel.fit(**params_fit)","1b62c7b4":"benchmark = submission.copy()\nbenchmark['num_sold'] = model.predict(test)\n\nbenchmark.to_csv('lgb_submission.csv')","2b122fb4":"### Encode the categoricals","d136e783":"### Split and drop data","553ad75c":"### Fitting","22184ab2":"### Create simple time features"}}