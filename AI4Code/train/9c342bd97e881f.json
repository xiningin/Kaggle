{"cell_type":{"a1b2b569":"code","0d052c3d":"code","fe8346ce":"code","ef133cac":"code","20b187f4":"code","fa41f36c":"code","eae69bf6":"code","238bbf44":"code","e85ac8c7":"code","4557a97d":"code","5100a024":"code","50f7130c":"code","69b2ee29":"code","9be1fe61":"markdown","6f09d22c":"markdown","8e11cc1c":"markdown"},"source":{"a1b2b569":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn","0d052c3d":"data_train_1 = pd.read_csv('..\/input\/sentiment\/sentiment\/train_text.txt', error_bad_lines=False, names=['Sentiment'])\ndata_train_2 = pd.read_csv('..\/input\/sentiment\/sentiment\/train_labels.txt', error_bad_lines=False, names=['Label']) \nData_train = data_train_1.copy()\nData_train['Label'] = data_train_2['Label']\n\ndata_train_3 = pd.read_csv('..\/input\/sentiment\/sentiment\/val_text.txt', error_bad_lines=False, names=['Sentiment'])\ndata_train_4 = pd.read_csv('..\/input\/sentiment\/sentiment\/val_labels.txt', error_bad_lines=False, names=['Label']) \nData_val = data_train_3.copy()\nData_val['Label'] = data_train_4['Label']\n\ndata_train_5 = pd.read_csv('..\/input\/sentiment\/sentiment\/test_text.txt', error_bad_lines=False, names=['Sentiment'])\ndata_train_6 = pd.read_csv('..\/input\/sentiment\/sentiment\/test_labels.txt', error_bad_lines=False, names=['Label']) \nData_test = data_train_5.copy()\nData_test['Label'] = data_train_6['Label']","fe8346ce":"print(Data_train.info())\nprint(Data_train.head())","ef133cac":"print(Data_val.info())\nprint(Data_val.head())","20b187f4":"print(Data_test.info())\nprint(Data_test.head())","fa41f36c":"# 0 -> Negative\n# 1 -> Neutral\n# 2 -> Positive\n\nplt.figure(figsize=(17,5))\nplt.subplot(1,3,1)\nplt.title('Train Data')\nsns.countplot(Data_train.Label)\nplt.subplot(1,3,2)\nplt.title('Val Data')\nsns.countplot(Data_val.Label)\nplt.subplot(1,3,3)\nplt.title('Test Data')\nsns.countplot(Data_test.Label)","eae69bf6":"!pip install simpletransformers","238bbf44":"from simpletransformers.classification import ClassificationModel, ClassificationArgs\n\nmodel_args = ClassificationArgs()\nmodel_args.num_train_epochs = 5\nmodel_args.learning_rate = 1e-4\nmodel_args.evaluate_during_training = True\nmodel_args.reprocess_input_data = True\nmodel_args.overwrite_output_dir = True\nmodel_args.train_batch_size = 64\nmodel_args.eval_batch_size = 64\n\nmodel = ClassificationModel(\"roberta\", \"roberta-base\", num_labels=3, use_cuda=True, args=model_args)","e85ac8c7":"model.train_model(Data_train,output_dir= '.\/model.h5', eval_df = Data_val, acc=sklearn.metrics.accuracy_score)","4557a97d":"result, model_outputs, wrong_predictions = model.eval_model(Data_test, acc=sklearn.metrics.accuracy_score)","5100a024":"print('Test Accuracy:',result)","50f7130c":"predictions, raw_outputs = model.predict([\"I am very proud of you\"])","69b2ee29":"if predictions == 0:\n    print('Negative')\nelif predictions == 1:\n    print('Neutral')\nelif predictions == 2:\n    print('Positve')","9be1fe61":"# Sentiment Analysis Using Bert(RoBERTa-Base)","6f09d22c":"## Test Accuracy Achieved: 48.21%","8e11cc1c":"## Model"}}