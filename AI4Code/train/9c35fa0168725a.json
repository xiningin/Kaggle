{"cell_type":{"a4444b73":"code","eafddfec":"code","bd19ee53":"code","13b4b661":"code","e5a157de":"code","d10516d9":"code","b6e1937b":"code","3e47992f":"code","166ad042":"code","eca8e410":"code","4c23f269":"code","21d3b3a5":"code","ccf497a5":"code","b84202d4":"code","2bdade3a":"code","270c6e37":"code","0ec2691b":"code","d6448cc3":"code","dbf37627":"code","7aef2912":"code","54b23254":"code","dd1c5738":"code","20193604":"code","0a9f4bb9":"code","48d10f18":"code","1198b137":"code","17d6023d":"code","5c533ca6":"code","13faca32":"code","82a313c8":"markdown","35690aa3":"markdown","f3c0c6e3":"markdown","13c37e54":"markdown"},"source":{"a4444b73":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn","eafddfec":"keywords = pd.read_csv('..\/input\/the-movies-dataset\/keywords.csv')","bd19ee53":"keywords.head()","13b4b661":"metadata = pd.read_csv('..\/input\/the-movies-dataset\/movies_metadata.csv')","e5a157de":"metadata.head(3)","d10516d9":"m = metadata['vote_count'].quantile(0.90) # lowest one that makes 'The Shawshank Redemption' #1\nm","b6e1937b":"q_movies = metadata.copy().loc[metadata['vote_count'] >= m]\nq_movies.shape","3e47992f":"C = metadata['vote_average'].mean()\n\ndef weighted_rating(x, m=m, C=C):\n    v = x['vote_count']\n    R = x['vote_average']\n    # Calculation based on the IMDB formula\n    return (v\/(v+m) * R) + (m\/(m+v) * C)\nq_movies['score'] = q_movies.apply(weighted_rating, axis=1)","166ad042":"q_movies = q_movies.sort_values('score', ascending=False).reset_index(drop=True)\nq_movies.head(10)[['title','score']]","eca8e410":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\ntfidf = TfidfVectorizer(stop_words='english')","4c23f269":"q_movies['overview'] = q_movies['overview'].fillna('')","21d3b3a5":"tfidf_matrix_ov = tfidf.fit_transform(q_movies['overview'])\n\ntfidf_matrix_ov.shape","ccf497a5":"cosine_sim_ov = linear_kernel(tfidf_matrix_ov, tfidf_matrix_ov)\ncosine_sim_ov.shape","b84202d4":"cosine_sim_ov[0]","2bdade3a":"import re\ndef to_str(a):\n  a = re.sub(r'[^\\w\\s]','',a)\n  a = re.sub(r'[0-9]','',a)\n  a = re.sub(r'id','',a)\n  a = re.sub(r'name','',a)\n  return ' '.join(a.split())","270c6e37":"to_str(q_movies['genres'][6])","0ec2691b":"q_movies['genres_str'] = q_movies['genres'].apply(to_str)","d6448cc3":"q_movies['genres_str'].head()","dbf37627":"tfidf_matrix_genre = tfidf.fit_transform(q_movies['genres_str'])\n\ntfidf_matrix_genre.shape","7aef2912":"cosine_sim_genre = linear_kernel(tfidf_matrix_genre, tfidf_matrix_genre)\ncosine_sim_genre.shape","54b23254":"cosine_sim_genre[1]","dd1c5738":"indices = pd.Series(q_movies.index, index=q_movies['title']).drop_duplicates()","20193604":"indices[:10]","0a9f4bb9":"cosine_sim = cosine_sim_ov*0.6 + cosine_sim_genre*0.4\ncosine_sim.shape","48d10f18":"def get_recommendations(title, cosine_sim=cosine_sim):\n  \n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True) \n    sim_scores = sim_scores[1:11]\n    movie_indices = [i[0] for i in sim_scores]\n\n    return pd.DataFrame(q_movies['title'].iloc[movie_indices]).reset_index(drop=True)","1198b137":"title = \"Rush\"","17d6023d":"get_recommendations(title)","5c533ca6":"q_movies[q_movies['title']==title]['overview'].reset_index(drop=True)[0]","13faca32":"q_movies[q_movies['title']==title]['genres_str'].reset_index(drop=True)[0]","82a313c8":"## Get Recommendation","35690aa3":"![](https:\/\/www.lstream.org\/wp-content\/uploads\/Copy-of-Movie-Ticket-Theatre-Header.jpg) \n# Movie Recommendation System\nIn this project, we will make a recommendation system depending on the overview and the genres of the movies. Then we'll find the most relevant 10 movies for the given movie title.","f3c0c6e3":"## Overwiev","13c37e54":"## Genres"}}