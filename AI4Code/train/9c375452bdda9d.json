{"cell_type":{"6d7fe710":"code","7e9552df":"code","cd5fb613":"code","fa2b523e":"code","be567fba":"code","832b8c12":"code","44290acc":"code","27d3615d":"code","c8222fe2":"code","b6278b09":"code","08e90c50":"code","4485894e":"code","1b6d6353":"code","2ce82722":"code","89c25a75":"code","2449a16b":"code","fe4e1927":"code","b1a2addf":"code","68f91699":"code","d19cb68e":"code","1d0d1a63":"code","89c5b5c8":"code","4d1c82b3":"code","dee60973":"code","6045208f":"code","b2b15aff":"code","da5dbd27":"code","c6937547":"code","e62f95da":"code","7f10d06c":"code","88f45f59":"code","e547c632":"code","5cc3f7e3":"code","169249c9":"code","5fe0369f":"code","ddff653c":"code","37edcc08":"code","50bd7232":"code","2af87868":"code","64043cb2":"code","5eaad4e1":"code","573c7813":"code","add5e9ba":"code","313208e0":"code","a06eb1a7":"code","fed0159f":"code","fafa1e16":"code","8ca3b856":"code","5c9060f4":"code","c5588497":"code","27f50a40":"code","aaf59c6d":"code","1bd6a1de":"code","b6cc69ac":"code","84e743bc":"code","225c5cf3":"code","66bb8a36":"code","b14f2eb4":"code","dee3dc83":"code","b14ee890":"code","53b5e731":"code","a044f8f9":"code","efcf4dea":"code","0f7d56ff":"code","6c235b88":"code","7cd55b93":"code","052cda3d":"code","3f4c5cad":"code","5bb6b753":"code","52bcc569":"code","7b1dd7cc":"code","9429c533":"code","52d7652a":"code","1e82660e":"code","87d85f01":"code","66f6c160":"code","cc80f56b":"code","c8614537":"code","fe76f96a":"code","25fb92b1":"code","20fa048f":"code","24851ae1":"code","af65f4df":"code","e41a6303":"code","5a2de77f":"code","5aec2c59":"code","5b67c534":"code","32dfc411":"code","ecd50fee":"code","20a8703d":"code","4c4e453e":"code","68af222b":"code","343f5a2a":"code","e70dbf66":"code","38fde9b1":"code","e747f5cb":"code","df80aeda":"code","7d2df8d3":"code","7dc90290":"code","a945e351":"code","8ca449d8":"code","55f3d66f":"markdown","d449ffe0":"markdown","256576d9":"markdown","38154de3":"markdown","eb48d393":"markdown","34721b52":"markdown","a89ed645":"markdown"},"source":{"6d7fe710":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e9552df":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams['figure.figsize'] = [15, 9]\nimport warnings\nwarnings.filterwarnings('ignore')","cd5fb613":"train = pd.read_csv('\/kaggle\/input\/sun-spot-counts\/train.csv', parse_dates = ['Month'])\ntrain.head()","fa2b523e":"train.tail()","be567fba":"train.duplicated().sum()","832b8c12":"# We have no duplicate values in our series.","44290acc":"train.isnull().sum()","27d3615d":"# Its good that we have no null values in our data.","c8222fe2":"df = pd.read_csv('\/kaggle\/input\/sun-spot-counts\/train.csv', parse_dates = ['Month'], index_col = ['Month'])\ndf.head()","b6278b09":"test = pd.read_csv('\/kaggle\/input\/sun-spot-counts\/test.csv')\ntest.shape","08e90c50":"df.plot()","4485894e":"# By looking at the plot we can say that series is somewhat stationary. So lets detrend the data & see the seasonality.","1b6d6353":"# Differencing for looking at seasonality.\n\ndf_1 = df.diff().dropna()","2ce82722":"df_1.plot(title = 'First order differencing')","89c25a75":"# By this graph we can say that there is sesonality for sure but we will see the period in ACF graph later.","2449a16b":"## As we know there is no point in taking the data from very past so i will take the 120 years of data in order to\n# predict 10 years of our test data.","fe4e1927":"final_df = df[1704:]","b1a2addf":"final_df.shape","68f91699":"final_df","d19cb68e":"# Lets take a look at our 120 years of data\nfinal_df.plot()","1d0d1a63":"# Yeah after looking at the data we can say that there has a seasonality. Lets check monthly.","89c5b5c8":"# Monthly\n\nsns.boxplot(x = final_df.index.month, y = final_df['Avg_sunspot_count'])\nplt.title(\"Monthly data\")","4d1c82b3":"from statsmodels.tsa.seasonal import seasonal_decompose","dee60973":"decomposition = seasonal_decompose(final_df, model = 'additive')\ndecomposition.plot();","6045208f":"final_df[final_df['Avg_sunspot_count'] == 0].count()","b2b15aff":"# replacing 0 values for multiplicative decomposition\ndf_2 = final_df['Avg_sunspot_count'].replace(to_replace = 0, value = 0.0001)","da5dbd27":"decomposition = seasonal_decompose(df_2,model = 'multiplicative')\ndecomposition.plot();","c6937547":"# Between both the graphs the series tends of have multiplicative model.","e62f95da":"final_df.shape","7f10d06c":"# Taking 12 years for testing\ntrain_S = final_df[:1200]\ntest_S = final_df[1200:]","88f45f59":"train_S.shape","e547c632":"test_S.shape","5cc3f7e3":"train_S.tail()","169249c9":"test_S.tail()","5fe0369f":"from statsmodels.tsa.stattools import adfuller","ddff653c":"obv = final_df.values\ntest_results = adfuller(obv)","37edcc08":"print(f'ADF Statistics : {test_results[0]}')\nprint(f'p-values : {test_results[1]}')\nprint('Critical Values :')\nfor i, j in test_results[4].items():\n    print('\\t', i, j)","50bd7232":"# After comparing ADF < 1% critical values so we can say with 99% confidence that the series is stationary.","2af87868":"from statsmodels.graphics.tsaplots     import  plot_pacf\nfrom statsmodels.graphics.tsaplots     import  plot_acf","64043cb2":"plot_acf(final_df, lags = 150);","5eaad4e1":"# From the above graph we can say that there is seasonality of period = 64 (approx)","573c7813":"plot_pacf(final_df);","add5e9ba":"# As we have seasonality in our series we can surely go to SARIMA model.","313208e0":"import itertools\np = q = range(1, 4)\nd = range(0,1)\npdq = list(itertools.product(p, d, q))\n\nmodel_pdq = [(x[0], x[1], x[2], 6) for x in list(itertools.product(p, d, q))]\nmodel_pdq","a06eb1a7":"frame = pd.DataFrame(columns=['param','seasonal', 'AIC'])\nframe","fed0159f":"import statsmodels.api as sm\nfor param in pdq:\n    for param_seasonal in model_pdq:\n        mod = sm.tsa.statespace.SARIMAX(train_S,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False, # For AR parameter\n                                            enforce_invertibility=False) # For MA parameter\n            \n        results_SARIMA = mod.fit()\n        print('SARIMA{}x{}6 - AIC:{}'.format(param, param_seasonal, results_SARIMA.aic))\n        frame = frame.append({'param':param,'seasonal':param_seasonal ,'AIC': results_SARIMA.aic}, ignore_index=True)","fafa1e16":"frame.sort_values(by=['AIC'])","8ca3b856":"import statsmodels.api as sm\n\nmodel = sm.tsa.statespace.SARIMAX(train_S,\n                                order = (1, 0, 3),\n                                seasonal_order = (3, 0, 3, 6),\n                                enforce_stationarity = False,\n                                enforce_invertibility = False)\n\nmodel_Sarima = model.fit()\nprint(model_Sarima.summary())","5c9060f4":"forecast = model_Sarima.forecast(len(test_S))","c5588497":"plt.plot(train_S,label='Training Data')\nplt.plot(test_S,label='Test Data')\n#plt.plot(test.index,final_df['Avg_sunspot_count'],label='Predicted Data - ARIMA')\nplt.plot(test_S.index,forecast,label='Predicted Data - SARIMA')\nplt.legend(loc='best')\nplt.grid();","27f50a40":"from math import sqrt\nfrom sklearn.metrics import  mean_squared_error\n\nrmse = sqrt(mean_squared_error(test_S.Avg_sunspot_count, forecast))\nprint(rmse)","aaf59c6d":"df_R = final_df.copy()","1bd6a1de":"df_R['lag'] = df_R['Avg_sunspot_count'].shift(-1)","b6cc69ac":"df_R['lag2'] = df_R['Avg_sunspot_count'].shift(-2)","84e743bc":"# Extracting months\ndf_R['Month'] = df_R.index.month","225c5cf3":"df_R.head()","66bb8a36":"# Splitting seperately\n# Taking 12 years for testing\n\ntrain_R = df_R[:1200]\ntest_R = df_R[1200:]","b14f2eb4":"len(train_R)","dee3dc83":"test_R.dropna(inplace=True)","b14ee890":"df_R.dtypes","53b5e731":"df_R.dropna(inplace = True)","a044f8f9":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\nlr.fit(train_R[['Month','lag', 'lag2']],train_R['Avg_sunspot_count'])","efcf4dea":"test_predictions = lr.predict(test_R[['Month','lag', 'lag2']])\ntest_R['Forecast'] = test_predictions","0f7d56ff":"plt.plot(train_R['Avg_sunspot_count'], label='Train')\nplt.plot(test_R['Avg_sunspot_count'], label='Test')\nplt.plot(test_R['Forecast'], label='Regression forecast')\n\nplt.legend(loc='best')\nplt.grid()","6c235b88":"from math import sqrt\nfrom sklearn.metrics import  mean_squared_error\n\nrmse_R = sqrt(mean_squared_error(test_R.Avg_sunspot_count, test_R.Forecast, squared=False))\nprint(rmse_R)","7cd55b93":"d = [['SARIMA', rmse], ['Regression', rmse_R]]\n\nscore_df = pd.DataFrame(d, columns = ['Models', 'rmse_Scores'])","052cda3d":"score_df","3f4c5cad":"df['lag'] = df['Avg_sunspot_count'].shift(-1)","5bb6b753":"# Extracting months\ndf['Month'] = df.index.month","52bcc569":"df.head()","7b1dd7cc":"df.tail()","9429c533":"df.shape","52d7652a":"df.dropna(inplace = True)","1e82660e":"test_final = pd.read_csv('\/kaggle\/input\/sun-spot-counts\/test.csv', parse_dates = ['Month'], index_col = ['Month'])\ntest_final.head()","87d85f01":"test_final['Avg_sunspot_count'] = 0\n\ntest_final['Month'] = test_final.index.month","66f6c160":"test_final.tail()","cc80f56b":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\nlr.fit(df[['Month', 'lag']],df['Avg_sunspot_count'])","c8614537":"df.drop(['lag'], axis = 1, inplace = True)","fe76f96a":"df[120:]","25fb92b1":"t2 = pd.concat([df[-120:], test_final])","20fa048f":"for i in range(120, len(t2)):\n    t2['Avg_sunspot_count'][i] = lr.predict([[t2['Month'][i], t2['Avg_sunspot_count'][i-120]]])","24851ae1":"t3 = t2[120:]","af65f4df":"t3.drop('Month', axis = 1, inplace = True)","e41a6303":"t3.plot()","5a2de77f":"#t3.to_csv('Submission.csv', date_format = '%m-%d-%Y')","5aec2c59":"final_test = pd.read_csv('\/kaggle\/input\/sun-spot-counts\/test.csv', parse_dates = ['Month'])\nfinal_test.head()","5b67c534":"import itertools\np = q = range(1, 4)\nd = range(0,1)\npdq = list(itertools.product(p, d, q))\n\nmodel_pdq = [(x[0], x[1], x[2], 6) for x in list(itertools.product(p, d, q))]","32dfc411":"frame = pd.DataFrame(columns=['param','seasonal', 'AIC'])\nframe","ecd50fee":"df.drop('Month', axis = 1, inplace=True)","20a8703d":"import statsmodels.api as sm\n\nmodel = sm.tsa.statespace.SARIMAX(df,\n                                order = (1, 0, 3),\n                                seasonal_order = (3, 0, 3, 6),\n                                enforce_stationarity = False,\n                                enforce_invertibility = False)\n\nmodel_Sarima = model.fit()\nprint(model_Sarima.summary())","4c4e453e":"#test_final.drop(['Avg_sunspot_count', 'Month'], axis = 1, inplace=True)","68af222b":"sarima_forecast = model_Sarima.forecast(len(test_final))","343f5a2a":"sarima_forecast.values","e70dbf66":"Sarima_df = pd.DataFrame(sarima_forecast.values, columns = df.columns)","38fde9b1":"Sarima_df","e747f5cb":"test_final.drop(['Month', 'Avg_sunspot_count'], axis = 1, inplace = True)","df80aeda":"SARIMA = pd.concat([Sarima_df, test_final], ignore_index=True).head(120)","7d2df8d3":"date = pd.date_range(start = '01\/01\/2011', end = '12\/01\/2020', freq = 'MS')\nprint(date)","7dc90290":"SARIMA['Month'] = date","a945e351":"SARIMA = SARIMA[['Avg_sunspot_count', 'Month']]","8ca449d8":"#SARIMA.to_csv('SARIMA_SUB.csv')","55f3d66f":"### Regression","d449ffe0":"## Proceeding with the regression","256576d9":"### Creating data frame for storing RMSE scores.","38154de3":"#### Decomposition","eb48d393":"### SARIMA","34721b52":"#### Splitting the data","a89ed645":"### Proceeding with SARIMA"}}