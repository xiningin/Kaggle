{"cell_type":{"e2bd5be1":"code","0e45ef20":"code","0370ca14":"code","3c04224b":"code","69a1a153":"code","df3d8c9e":"code","3a78f411":"code","742d4697":"code","1939f45a":"code","58b75a2c":"code","350d7cbe":"code","ce1c878a":"code","3d6bef84":"code","440e07cb":"code","daf96fbc":"code","c5be4a1c":"code","ccc468c2":"code","80bd24fa":"code","d4945d8d":"code","dbb2b7b9":"code","4eee859e":"code","83b11eb1":"code","2fd70d3c":"code","c282ebff":"code","98e93a5d":"code","ffad60c5":"code","9912b0ce":"markdown","1f19e50e":"markdown","d11b9467":"markdown","37b7f5d6":"markdown","6c993a73":"markdown"},"source":{"e2bd5be1":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","0e45ef20":"train_df= pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest_df= pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')","0370ca14":"train_df.shape, test_df.shape","3c04224b":"train_df.head()","69a1a153":"train_df.duplicated().sum()","df3d8c9e":"train_df.info()","3a78f411":"test_df.head()","742d4697":"test_df.duplicated().sum()","1939f45a":"test_df.info()","58b75a2c":"plt.figure(figsize=(10,5))\nsns.countplot(x=\"target\", data=train_df, palette=('magma'))\nplt.show()","350d7cbe":"num_features = train_df[['cont0', 'cont1', 'cont2', 'cont3', 'cont4', 'cont5', 'cont6', 'cont7', 'cont8', 'cont9', 'cont10']]","ce1c878a":"num_features.head()","3d6bef84":"num_features.hist(figsize = (11,11), color=\"#008080\")","440e07cb":"plt.figure(figsize = (10,8))\nsns.heatmap(num_features.corr(), annot=True, cmap='magma')\nplt.title('Numerical Features Correlation')\nplt.show()","daf96fbc":"cat_features = train_df[['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15', 'cat16', 'cat17', 'cat18']]","c5be4a1c":"cat_features.head()","ccc468c2":"for i in cat_features:\n    plt.figure(figsize=(14,4))\n    train_df[i].value_counts().plot(kind='bar', color=\"#008080\")\n    plt.title(i)\n    plt.show()","80bd24fa":"from sklearn.preprocessing import LabelEncoder\nfor i in train_df.columns:\n    if train_df[i].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train_df[i].values) + list(test_df[i].values))\n        train_df[i] = lbl.transform(train_df[i].values)\n        test_df[i] = lbl.transform(test_df[i].values)","d4945d8d":"x = train_df.drop(['target'],axis=1)\ny = train_df['target']","dbb2b7b9":"from sklearn.preprocessing import StandardScaler\nsc= StandardScaler()\nx_scaled= sc.fit_transform(x)","4eee859e":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.30)","83b11eb1":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=200, max_depth=9, random_state=1)\nrf.fit(x_train, y_train)\npredictions = rf.predict(x_test)","2fd70d3c":"from sklearn.metrics import roc_auc_score\nscore = roc_auc_score(y_test, predictions)\nscore","c282ebff":"rf1 = RandomForestClassifier(n_estimators=200, max_depth=7, random_state=1)\nrf1.fit(x_scaled, y)\npredictions1 = rf1.predict(test_df)","98e93a5d":"submission = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv', index_col='id')\nsubmission.head()","ffad60c5":"submission['target'] = rf1.predict_proba(test_df)[:, 1]\nsubmission.to_csv('random_forest.csv')","9912b0ce":"### **Exploratory Data Analysis**","1f19e50e":"### **Model Building**","d11b9467":"### **Data Analysis**","37b7f5d6":"**Let' collate catagorical columns and find their distribution**","6c993a73":"**Let' collate numerical columns and find their distribution**"}}