{"cell_type":{"eac64d96":"code","78567d79":"code","4157a843":"code","e5b9f3dd":"code","9bf30dd1":"code","de5136f6":"code","b78dd1e0":"code","54be0ef3":"markdown","4712cb2d":"markdown","736a6f78":"markdown","a67da9e5":"markdown","f9ef2fc3":"markdown","e1cc1438":"markdown","02a88cbf":"markdown","5add559f":"markdown","ced74fb0":"markdown"},"source":{"eac64d96":"\n%matplotlib inline\n\nimport itertools\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import metrics\n\nks = pd.read_csv('..\/input\/kickstarter-projects\/ks-projects-201801.csv',\n                 parse_dates=['deadline', 'launched'])\n\n# Drop live projects\nks = ks.query('state != \"live\"')\n\n# Add outcome column, \"successful\" == 1, others are 0\nks = ks.assign(outcome=(ks['state'] == 'successful').astype(int))\n\n# Timestamp features\nks = ks.assign(hour=ks.launched.dt.hour,\n               day=ks.launched.dt.day,\n               month=ks.launched.dt.month,\n               year=ks.launched.dt.year)\n\n# Label encoding\ncat_features = ['category', 'currency', 'country']\nencoder = LabelEncoder()\nencoded = ks[cat_features].apply(encoder.fit_transform)\n\ndata_cols = ['goal', 'hour', 'day', 'month', 'year', 'outcome']\nbaseline_data = ks[data_cols].join(encoded)\n\ncat_features = ['category', 'currency', 'country']\ninteractions = pd.DataFrame(index=ks.index)\nfor col1, col2 in itertools.combinations(cat_features, 2):\n    new_col_name = '_'.join([col1, col2])\n    # Convert to strings and combine\n    new_values = ks[col1].map(str) + \"_\" + ks[col2].map(str)\n    label_enc = LabelEncoder()\n    interactions[new_col_name] = label_enc.fit_transform(new_values)\nbaseline_data = baseline_data.join(interactions)\n\nlaunched = pd.Series(ks.index, index=ks.launched, name=\"count_7_days\").sort_index()\ncount_7_days = launched.rolling('7d').count() - 1\ncount_7_days.index = launched.values\ncount_7_days = count_7_days.reindex(ks.index)\n\nbaseline_data = baseline_data.join(count_7_days)\n\ndef time_since_last_project(series):\n    # Return the time in hours\n    return series.diff().dt.total_seconds() \/ 3600.\n\ndf = ks[['category', 'launched']].sort_values('launched')\ntimedeltas = df.groupby('category').transform(time_since_last_project)\ntimedeltas = timedeltas.fillna(timedeltas.max())\n\nbaseline_data = baseline_data.join(timedeltas.rename({'launched': 'time_since_last_project'}, axis=1))\n\ndef get_data_splits(dataframe, valid_fraction=0.1):\n    valid_fraction = 0.1\n    valid_size = int(len(dataframe) * valid_fraction)\n\n    train = dataframe[:-valid_size * 2]\n    # valid size == test size, last two sections of the data\n    valid = dataframe[-valid_size * 2:-valid_size]\n    test = dataframe[-valid_size:]\n    \n    return train, valid, test\n\ndef train_model(train, valid):\n    feature_cols = train.columns.drop('outcome')\n\n    dtrain = lgb.Dataset(train[feature_cols], label=train['outcome'])\n    dvalid = lgb.Dataset(valid[feature_cols], label=valid['outcome'])\n\n    param = {'num_leaves': 64, 'objective': 'binary', \n             'metric': 'auc', 'seed': 7}\n    print(\"Training model!\")\n    bst = lgb.train(param, dtrain, num_boost_round=1000, valid_sets=[dvalid], \n                    early_stopping_rounds=10, verbose_eval=False)\n\n    valid_pred = bst.predict(valid[feature_cols])\n    valid_score = metrics.roc_auc_score(valid['outcome'], valid_pred)\n    print(f\"Validation AUC score: {valid_score:.4f}\")\n    return bst","78567d79":"from sklearn.feature_selection import SelectKBest, f_classif\n\nfeature_cols = baseline_data.columns.drop('outcome')\n\n# Keep 5 features\nselector = SelectKBest(f_classif, k=5)\n\nX_new = selector.fit_transform(baseline_data[feature_cols], baseline_data['outcome'])\nX_new","4157a843":"feature_cols = baseline_data.columns.drop('outcome')\ntrain, valid, _ = get_data_splits(baseline_data)\n\n# Keep 5 features\nselector = SelectKBest(f_classif, k=5)\n\nX_new = selector.fit_transform(train[feature_cols], train['outcome'])\nX_new","e5b9f3dd":"# Get back the features we've kept, zero out all other features\nselected_features = pd.DataFrame(selector.inverse_transform(X_new), \n                                 index=train.index, \n                                 columns=feature_cols)\nselected_features.head()","9bf30dd1":"# Dropped columns have values of all 0s, so var is 0, drop them\nselected_columns = selected_features.columns[selected_features.var() != 0]\n\n# Get the valid dataset with the selected features.\nvalid[selected_columns].head()","de5136f6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import SelectFromModel\n\ntrain, valid, _ = get_data_splits(baseline_data)\n\nX, y = train[train.columns.drop(\"outcome\")], train['outcome']\n\n# Set the regularization parameter C=1\nlogistic = LogisticRegression(C=1, penalty=\"l1\", solver='liblinear', random_state=7).fit(X, y)\nmodel = SelectFromModel(logistic, prefit=True)\n\nX_new = model.transform(X)\nX_new","b78dd1e0":"# Get back the kept features as a DataFrame with dropped columns as all 0s\nselected_features = pd.DataFrame(model.inverse_transform(X_new), \n                                 index=X.index,\n                                 columns=X.columns)\n\n# Dropped columns have values of all 0s, keep other columns \nselected_columns = selected_features.columns[selected_features.var() != 0]","54be0ef3":"# Introduction\n\nOften you'll have hundreds or thousands of features after various encodings and feature generation. This can lead to two problems. First, the more features you have, the more likely you are to overfit to the training and validation sets. This will cause your model to perform worse at generalizing to new data.\n\nSecondly, the more features you have, the longer it will take to train your model and optimize hyperparameters. Also, when building user-facing products, you'll want to make inference as fast as possible. Using fewer features can speed up inference at the cost of predictive performance.\n\nTo help with these issues, you'll want to use feature selection techniques to keep the most informative features for your model.\n\nWe'll show that in this lesson.","4712cb2d":"# L1 regularization\n\nUnivariate methods consider only one feature at a time when making a selection decision. Instead, we can make our selection using all of the features by including them in a linear model with L1 regularization. This type of regularization (sometimes called Lasso) penalizes the absolute magnitude of the coefficients, as compared to L2 (Ridge) regression which penalizes the square of the coefficients.\n\nAs the strength of regularization is increased, features which are less important for predicting the target are set to 0. This allows us to perform feature selection by adjusting the regularization parameter. We choose the parameter by finding the best performance on a hold-out set, or decide ahead of time how many features to keep.\n\nFor regression problems you can use `sklearn.linear_model.Lasso`, or `sklearn.linear_model.LogisticRegression` for classification. These can be used along with `sklearn.feature_selection.SelectFromModel` to select the non-zero coefficients. Otherwise, the code is similar to the univariate tests.","736a6f78":"In this case with the L1 parameter `C=1`, we're dropping the `time_since_last_project` column.\n\nIn general, feature selection with L1 regularization is more powerful the univariate tests, but it can also be very slow when you have a lot of data and a lot of features. Univariate tests will be much faster on large datasets, but also will likely perform worse.\n\n# Your Turn\nDo **[feature selection](https:\/\/www.kaggle.com\/kernels\/fork\/5407500)** to find the most important features in the model you've built in previous lessons.","a67da9e5":"However, I've done something wrong here. The statistical tests are calculated using all of the data. This means information from the validation and test sets could influence the features we keep, introducing a source of leakage. This means we should select features using only a training set.","f9ef2fc3":"This returns a DataFrame with the same index and columns as the training set, but all the dropped columns are filled with zeros. We can find the selected columns by choosing features where the variance is non-zero.","e1cc1438":"Similar to the univariate tests, we get back an array with the selected features. Again, we will want to convert these to a DataFrame so we can get the selected columns.","02a88cbf":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https:\/\/www.kaggle.com\/learn\/feature-engineering\/discussion) to chat with other learners.*","5add559f":"# Univariate Feature Selection\n\nThe simplest and fastest methods are based on univariate statistical tests. For each feature, measure how strongly the target depends on the feature using a statistical test like $\\chi^2$ or ANOVA.\n\nFrom the scikit-learn feature selection module, `feature_selection.SelectKBest` returns the K best features given some scoring function. For our classification problem, the module provides three different scoring functions: $\\chi^2$, ANOVA F-value, and the mutual information score. The F-value measures the linear dependency between the feature variable and the target. This means the score might underestimate the relation between a feature and the target if the relationship is nonlinear. The mutual information score is nonparametric and so can capture nonlinear relationships.\n\nWith `SelectKBest`, we define the number of features to keep, based on the score from the scoring function. Using `.fit_transform(features, target)` we get back an array with only the selected features.","ced74fb0":"You should notice that the selected features are different than when I used the entire dataset. Now we have our selected features, but it's only the feature values for the training set. To drop the rejected features from the validation and test sets, we need to figure out which columns in the dataset were kept with `SelectKBest`. To do this, we can use `.inverse_transform` to get back an array with the shape of the original data."}}