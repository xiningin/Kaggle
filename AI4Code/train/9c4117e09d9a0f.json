{"cell_type":{"3f087740":"code","924f13a3":"code","5373e8b1":"code","8b7a8f2e":"code","fe54001d":"code","e2b78d67":"code","fd27d75a":"code","49abae11":"code","a3510346":"code","c755abcd":"code","bff4c579":"code","6b6fc36e":"code","865e335f":"code","ecec84f9":"code","9f6a9503":"code","2d342901":"code","06574c21":"code","80229ea8":"code","7dd364eb":"code","60855cfd":"code","00f95eb8":"code","351958e7":"code","a6d9823b":"code","09d4dd17":"code","36ab8e94":"code","57309149":"code","8c33bede":"markdown","871adaee":"markdown","27c36130":"markdown","05fe3032":"markdown","e93acfeb":"markdown","acef9da8":"markdown","4c4b3051":"markdown","381dcfd9":"markdown","a335c9ce":"markdown","6b0c6aff":"markdown","ef4a11dd":"markdown","e1a97e79":"markdown","09225d85":"markdown","c1941393":"markdown","0d8678ba":"markdown","59635f8b":"markdown","cc81cdda":"markdown","183748a6":"markdown","5458f537":"markdown","56977e7f":"markdown","48bef532":"markdown","e3494898":"markdown","dcabd532":"markdown"},"source":{"3f087740":"import numpy as np \nimport pandas as pd \nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","924f13a3":"path = '\/kaggle\/input\/netflix-shows\/netflix_titles.csv'\ndf_netflix = pd.read_csv(path)\ndf_netflix.head()","5373e8b1":"df_netflix.info()","8b7a8f2e":"print('Number of columns:', df_netflix.shape[1])\nprint('Number of rows:', df_netflix.shape[0])","fe54001d":"missing_count = df_netflix.isnull().sum()\nmissing_count","e2b78d67":"df_netflix.duplicated().sum()","fd27d75a":"total_null = missing_count.sort_values(ascending=False)\nperc = (missing_count\/df_netflix.isnull().count()*100).sort_values(ascending=False)\ntotal = pd.concat([total_null, perc], axis=1, keys = ['Total null values', 'Percentage of null values'])\ntotal.T.style.bar()","49abae11":"#getting column names\ncol = df_netflix.columns\ncol","a3510346":"#Filling in missing values\nvalue = 'Not Recorded'\nfor i in col:\n    df_netflix[i].fillna(value, inplace=True)\n    \ndf_netflix.isnull().sum()","c755abcd":"df_netflix.head()","bff4c579":"fig = px.histogram(df_netflix['type'])\nfig.update_layout(title='Distribution of content types',title_x=0.5)","6b6fc36e":"pd.crosstab(index=df_netflix['type'], columns=df_netflix['release_year'], margins=True).style.background_gradient(cmap='Greens')","865e335f":"fig = px.histogram(df_netflix['release_year'],nbins=30,labels={'value':'Released Year'})\nfig.update_layout(title='Content Production Over Time',title_x=0.5)","ecec84f9":"df_netflix_movies = df_netflix[df_netflix['type'] == 'Movie']\ndirector_movies = pd.DataFrame(df_netflix_movies['director'].value_counts()).reset_index().head(21)\n\nfig = px.bar(director_movies,director_movies['index'],director_movies['director'],labels={'index':'Directors','splitted':'Frequency'})\nfig.update_layout(title='Top 20 Movie Directors',title_x=0.5)","9f6a9503":"df_netflix_shows = df_netflix[df_netflix['type'] == 'TV Show']\ndirector_shows_recorded = df_netflix_shows[df_netflix_shows['director'] != 'Not Recorded']\ndirector_shows = pd.DataFrame(director_shows_recorded['director'].value_counts()).reset_index().head(20)\n\nfig = px.bar(director_shows,director_shows['index'],director_shows['director'],labels={'index':'Directors','director':'Frequency'})\nfig.update_layout(title='Top 20 TV Show Directors',title_x=0.5)","2d342901":"df_cast_recorded = df_netflix[df_netflix['cast'] != 'Not Recorded']\ndf_cast = df_cast_recorded.assign(var1 = df_cast_recorded.cast.str.split(',')).explode('var1').reset_index(drop = True)\n\ndf_cast['splitted'] = df_cast.var1.str.lstrip()\ndf_cast.head()","06574c21":"cast = pd.DataFrame(df_cast['splitted'].value_counts()).reset_index()\ncast_sorted = cast.sort_values('splitted',ascending=False)[:20][::-1]\n\nfig = px.bar(cast_sorted,cast_sorted['splitted'],cast_sorted['index'],labels={'index':'Cast','splitted':'Frequency'})\nfig.update_layout(title='Top 20 Movie\/TV Show Actors',title_x=0.5)\n","80229ea8":"#splitting countries that work together on a project\ndf_country_recorded = df_netflix[df_netflix['country'] != 'Not Recorded']\ndf_country = df_country_recorded.assign(var1 = df_country_recorded.country.str.split(',')).explode('var1').reset_index(drop = True)\n\ndf_country['splitted'] = df_country.var1.str.lstrip()\ndf_country.head()","7dd364eb":"country = pd.DataFrame(df_country['splitted'].value_counts()).reset_index()\ncountry_sorted = country.sort_values('splitted',ascending=False)[:20][::-1]\n\nfig = go.Figure(data=[go.Scatter(\n    x=country_sorted['index'],\n    y=country_sorted['splitted'],\n    mode='markers',\n    marker=dict(\n        color=4000+np.random.randn(200),\n\n        size=country_sorted['splitted']*0.1,\n        showscale=True\n        )\n)])\nfig.update_layout(\n    title='Top 20 Most Recurred Countries',\n    title_x=0.5,\n    xaxis_title=\"Country\",\n    yaxis_title=\"Frequency\",\n        template='plotly_white'\n\n)\nfig.show()","60855cfd":"ratings = pd.DataFrame(df_netflix['rating'].value_counts()).reset_index()\n\nfig = px.treemap(ratings, path=['index'], values=ratings['rating'], height=700,\n                 title='Age Ratings Distribution', color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.update_layout(title_x=0.5)\nfig.show()\n","00f95eb8":"df_netflix_movies = df_netflix[df_netflix['type'] == 'Movie']\nfig = px.box(df_netflix_movies,y='duration')\nfig.update_layout(title='Box Plot of content duration (Movie)',title_x=0.5)","351958e7":"duration_movies = pd.DataFrame(df_netflix_movies['duration'].value_counts()).reset_index()\nfig = px.bar(duration_movies,duration_movies['index'],duration_movies['duration'],labels={'index':'Duration','duration':'Frequency'})\nfig.update_layout(title='Movie duration distribution',title_x=0.5)","a6d9823b":"df_netflix_shows = df_netflix[df_netflix['type'] == 'TV Show']\nfig = px.box(df_netflix_shows,y='duration')\nfig.update_layout(title='Box Plot of content duration (TV Show)',title_x=0.5)","09d4dd17":"duration_shows = pd.DataFrame(df_netflix_shows['duration'].value_counts()).reset_index()\nfig = px.bar(duration_shows,duration_shows['index'],duration_shows['duration'],labels={'index':'Duration','duration':'Frequency'})\nfig.update_layout(title='TV Show duration distribution',title_x=0.5)","36ab8e94":"df_genres = df_netflix.assign(var1 = df_netflix.listed_in.str.split(',')).explode('var1').reset_index(drop = True)\n\ndf_genres['splitted'] = df_genres.var1.str.lstrip()\ndf_genres.head()","57309149":"genres = pd.DataFrame(df_genres['splitted'].value_counts()).reset_index()\ngenres_sorted = genres.sort_values('splitted',ascending=False)[::-1]\n\nfig = px.bar(genres_sorted,genres_sorted['splitted'],genres_sorted['index'],labels={'index':'Genres','splitted':'Frequency'})\nfig.update_layout(title='Top Genres',title_x=0.5)","8c33bede":"It appears that Netflix's movies outweighted its TV shows in terms of number of productions.","871adaee":"## Directors","27c36130":"#### Top 20 director of movies","05fe3032":"#### Content types' trend","e93acfeb":"163 movies were not having any directors recorded, while there were 2389 empty values in total of the Director field. This mean that there is a huge sum of missing values in TV shows' director. Therefore, I will exlude those values out of the next visualization to avoid any biases.","acef9da8":"#### Total content production over year","4c4b3051":"## Country","381dcfd9":"#### Number of missing values by column","a335c9ce":"<h1><center>Exploratory Analysis<\/center><\/h1>","6b0c6aff":"## Genres","ef4a11dd":"## Age Ratings","e1a97e79":"#### Duration of TV Shows","09225d85":"## Duration","c1941393":"#### Number of duplicated rows","0d8678ba":"Now that Netflix's number of TV shows are having a tendency to surpass its Movies in the two recent years.","59635f8b":"## Content Types","cc81cdda":"#### Top 20 director of TV Shows","183748a6":"#### Proportion of missing values in each fields","5458f537":"#### Distribution of content Types","56977e7f":"## Cast","48bef532":"Based on over 30% missing values count, removing all rows containing emty data seems like an unappropriate way to handle them. However, all columns in which contain the missing values are holding categorical data, so I will replace all NA's with a variable to differentiate them.","e3494898":"<h1><center>Data Cleansing<\/center><\/h1> ","dcabd532":"#### Duration of movies"}}