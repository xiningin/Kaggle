{"cell_type":{"e4bb16db":"code","48d29d22":"code","89062aef":"code","8ff537a8":"code","5ae71fca":"code","29730c38":"code","f226e768":"code","077fa3c8":"code","7b179f31":"code","accda8eb":"code","84795b4d":"code","9c6d6c96":"code","16094a6c":"code","f28de094":"code","d75a445a":"code","c7abc8cb":"code","3202f482":"code","284ea74e":"code","6e410c61":"code","6c46e16e":"code","9d1050bd":"code","309a157b":"code","6f95b486":"code","0b8aa58e":"code","a7600f93":"code","dac83fa4":"code","f6d96010":"code","fcdb9ac5":"code","8e32210d":"code","1b0ee1bc":"code","f810ff41":"code","c97c457f":"code","38b7b98a":"code","64a99bf4":"code","bf38721f":"code","dfba51bf":"code","f916efbc":"code","c730c08b":"code","11cd04de":"code","f0fcfc8f":"code","10ab2b1f":"code","0ab09255":"markdown","4acbb3df":"markdown","fea1c671":"markdown","0675ca6f":"markdown","c7217822":"markdown","f3cb739a":"markdown","f4d99f44":"markdown","acc243fd":"markdown","f080dea4":"markdown","0cf4d8f0":"markdown","30a4a879":"markdown","18b09a2f":"markdown","222ee6c1":"markdown","4501eede":"markdown","80f8f508":"markdown","edadee1a":"markdown","5919c9c2":"markdown","62de477c":"markdown","61e5b4c0":"markdown"},"source":{"e4bb16db":"# Input data files are available in the read-only \"..\/input\/\" directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","48d29d22":"# Import libraries\nimport numpy as np \nimport pandas as pd \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_val_score","89062aef":"# Import data\ndf_shops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ndf_items = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\ndf_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\ndf_sales = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')","8ff537a8":"# View shops\nprint(df_shops.shape)\ndf_shops.head()","5ae71fca":"# View items\nprint(df_items.shape)\ndf_items.head()","29730c38":"# View item categories\nprint(df_categories.shape)\ndf_categories.head()","f226e768":"# View sales train data\nprint(df_sales.shape)\ndf_sales.head()","077fa3c8":"# View test data\nprint(df_test.shape)\ndf_test.head()","7b179f31":"# Get mean sales price per item and rename aggregate column to item_mean_price\nagg_item_price = {'item_price':'item_mean_price'}\ndf_prices = df_sales.groupby('item_id').agg({'item_price':'mean'}).rename(columns=agg_item_price)\nprint(df_prices.shape)\ndf_prices.head()","accda8eb":"# Check data types\ndf_sales.dtypes","84795b4d":"# Check null values\ndf_sales.isnull().sum()","9c6d6c96":"# Drop columns date_block_num and item_price\ndf_sales.drop(['date_block_num', 'item_price'], axis=1, inplace=True)\nprint(df_sales.shape)\ndf_sales.head()","16094a6c":"# Merge sales with item prices (mean price per item)\ndf_sales = pd.merge(df_sales, df_prices, on='item_id', how='left')\nprint(df_sales.shape)\ndf_sales.head()","f28de094":"# Rearrange columns\ndf_sales = df_sales[['date', 'shop_id', 'item_id', 'item_mean_price', 'item_cnt_day']]\nprint(df_sales.shape)\ndf_sales.head()","d75a445a":"# Merge sales with item categories\ndf_sales = pd.merge(df_sales, df_items, on='item_id', how='left')\nprint(df_sales.shape)\ndf_sales.head()","c7abc8cb":"# Drop column item_name\ndf_sales.drop('item_name', axis=1, inplace=True)\nprint(df_sales.shape)\ndf_sales.head()","3202f482":"# Rearrange columns\ndf_sales = df_sales[['date', 'shop_id', 'item_id', 'item_category_id', 'item_mean_price', 'item_cnt_day']]\nprint(df_sales.shape)\ndf_sales.head()","284ea74e":"# Convert date column to YYYY-MM\ndf_sales['date'] = pd.to_datetime(df_sales['date'], dayfirst=True)\ndf_sales['date'] = df_sales['date'].apply(lambda x: x.strftime('%Y-%m'))\nprint(df_sales.shape)\ndf_sales.head()","6e410c61":"# Get sum value for item_cnt_day and rename column to item_sum_qty \nagg_item_cnt = {'item_cnt_day':'item_sum_qty'}\ndf_sales = df_sales.groupby(['date', 'shop_id', 'item_id', 'item_category_id', 'item_mean_price']).agg({'item_cnt_day':'sum'}).rename(columns=agg_item_cnt)\nprint(df_sales.shape)\ndf_sales.head()","6c46e16e":"# Create train dataframe from sales by converting date rows to columns (to be used as features) \ndf_train = df_sales.pivot_table(index=['shop_id', 'item_id', 'item_category_id', 'item_mean_price'], columns='date', values='item_sum_qty', fill_value=0)\ndf_train.reset_index(inplace=True)\nprint(df_train.shape)\ndf_train.head()","9d1050bd":"# Rename train dataframe columns\ndf_train_cols1 = ['shop_id', 'item_id', 'item_category_id', 'item_mean_price']\ndf_train_cols2 = [f'{i}' for i in range(1,35)]\ndf_train_cols = df_train_cols1 + df_train_cols2\ndf_train.columns = df_train_cols\nprint(df_train.shape)\ndf_train.head()","309a157b":"# Declare features and prediction target for train data\nX_train = df_train.drop(['34'], axis = 1)\nY_train = df_train['34'].values\nprint(X_train.shape, Y_train.shape)","6f95b486":"# Prepare test dataframe by merging test and train dataframes \ndf_test = pd.merge(df_test, df_train, on=['shop_id','item_id'], how='left')","0b8aa58e":"# Drop columns to match the features of train dataframe and fill na values with 0\ndf_test.drop(['ID', '1'], axis=1, inplace=True)\ndf_test = df_test.fillna(0)\nprint(df_test.shape)\ndf_test.head()","a7600f93":"# Rename test dataframe columns to match those of train dataframe\ndf_test_cols1 = ['shop_id', 'item_id', 'item_category_id', 'item_mean_price']\ndf_test_cols2 = [f'{i}' for i in range(1,34)]\ndf_test_cols = df_test_cols1 + df_test_cols2\ndf_test.columns = df_test_cols\nprint(df_test.shape)\ndf_test.head()","dac83fa4":"# Declare features for test data\nX_test = df_test\nprint(X_test.shape)","f6d96010":"# Set column transformer for encoding column item_category_id\ncolumn_trans = make_column_transformer((OneHotEncoder(handle_unknown='ignore'), ['item_category_id']), remainder='passthrough')","fcdb9ac5":"# Select model\nrfr = RandomForestRegressor(n_estimators = 100)","8e32210d":"# Create pipeline\npipeline = make_pipeline(column_trans, rfr)","1b0ee1bc":"# Split data\nx_train, x_train_test, y_train, y_train_test = train_test_split(X_train, Y_train, test_size=0.2, random_state=21)\nprint('Train set:', x_train.shape,  y_train.shape)\nprint('Test set:', x_train_test.shape,  y_train_test.shape)","f810ff41":"# Fit pipeline\npipeline.fit(x_train, y_train)","c97c457f":"# Evaluate pipeline\nprint('Train set mse:', mean_squared_error(y_train, pipeline.predict(x_train)))\nprint('Test set mse:', mean_squared_error(y_train_test, pipeline.predict(x_train_test)))\nprint('Test set score:', pipeline.score(x_train, y_train))","38b7b98a":"# Cross validate pipeline\n'''cross_val_score(pipeline, X_train, Y_train, cv=5, scoring='neg_mean_squared_error').mean()'''","64a99bf4":"# Linear regression\nlr = LinearRegression()\nlr.fit(x_train, y_train)\nprint('Train set mse:', mean_squared_error(y_train, lr.predict(x_train)))\nprint('Test set mse:', mean_squared_error(y_train_test, lr.predict(x_train_test)))\nprint('Test set score:', lr.score(x_train, y_train))","bf38721f":"# Random forest regression\nrfr = RandomForestRegressor(n_estimators = 100)\nrfr.fit(x_train, y_train)\nprint('Train set mse:', mean_squared_error(y_train, rfr.predict(x_train)))\nprint('Test set mse:', mean_squared_error(y_train_test, rfr.predict(x_train_test)))\nprint('Test set score:', rfr.score(x_train, y_train))","dfba51bf":"# Cross validate model\n'''cross_val_score(rfr, X_train, Y_train, cv=5, scoring='neg_mean_squared_error').mean()'''","f916efbc":"# Predict with pipeline\nprediction = pipeline.predict(X_test)","c730c08b":"# Prepare predictions\nprediction = prediction.clip(0, 20)","11cd04de":"# Check predictions\nprint(prediction.shape)\nprediction","f0fcfc8f":"df_submission = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nprint(df_submission.shape)\ndf_submission.head()","10ab2b1f":"df_submission['item_cnt_month'] = prediction\ndf_submission.to_csv('submission.csv', index=False)","0ab09255":"## Initialization","4acbb3df":"## Preprocessing (Sales test data)","fea1c671":"## Preprocessing (Item prices)","0675ca6f":"<br>\n<br>\n<br>","c7217822":"## Prediction","f3cb739a":"<br>\n<br>\n<br>","f4d99f44":"<br>\n<br>\n<br>","acc243fd":"## Submission","f080dea4":"## Pipeline Development & Evaluation","0cf4d8f0":"## Preprocessing (Sales train data)","30a4a879":"### Not used in Prediction ","18b09a2f":"<br>\n<br>\n<br>","222ee6c1":"### Used One-Hot Encoding for Item Categories as an example for cases with Nominal Values (Categorical)","4501eede":"<br>\n<br>\n<br>","80f8f508":"## Data Acquisition","edadee1a":"<br>\n<br>\n<br>","5919c9c2":"<br>\n<br>\n<br>","62de477c":"## Model Development & Evaluation","61e5b4c0":"<br>\n<br>\n<br>"}}