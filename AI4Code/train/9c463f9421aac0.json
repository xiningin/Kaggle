{"cell_type":{"0c4cbfff":"code","895b7fd1":"code","199b23b8":"code","5b2ab33b":"code","321fef29":"code","4f79de6d":"code","fa66e128":"code","80b731a5":"code","420eae8f":"code","1aab5f15":"code","3fa86944":"code","341f405e":"code","ff29ba45":"code","00c33432":"code","c2dacbf7":"code","f960234b":"code","627db0aa":"code","47fadba0":"code","6227ec75":"code","9cddde7e":"code","e3da5fe5":"code","97ccf665":"code","86615b65":"code","5e3e6111":"code","389020f1":"code","ab531513":"code","ebb03f30":"code","03322c53":"code","fa338d80":"code","8be5674b":"markdown","a94ff6de":"markdown","473025b5":"markdown","16f53b62":"markdown","8e41922c":"markdown"},"source":{"0c4cbfff":"# \ud83c\udfa8 Justin Faler \n# \ud83d\udcc6 8\/30\/2019\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom skimage.io import imread, imshow, imsave\nfrom skimage.filters import prewitt_h,prewitt_v\nfrom skimage.color import rgb2hsv\nimport scipy.misc\nimport scipy.ndimage\nimport sklearn.metrics\nfrom sklearn.cluster import KMeans\nfrom skimage import measure\nimport imageio\nimport cv2\nimport skimage.io\nimport os","895b7fd1":"df = pd.read_csv('..\/input\/recursion-cellular-image-classification\/pixel_stats.csv')\ndf2 = pd.read_csv(\"..\/input\/recursion-cellular-image-classification\/test_controls.csv\")\ndf3 = pd.read_csv('..\/input\/recursion-cellular-image-classification\/train_controls.csv')\ntrain = pd.read_csv('..\/input\/recursion-cellular-image-classification\/train.csv')\ntest = pd.read_csv('..\/input\/recursion-cellular-image-classification\/test.csv')","199b23b8":"print(train.head())","5b2ab33b":"print(df.head())","321fef29":"print(df2.head())","4f79de6d":"print(df3.head())","fa66e128":"print(test.head())","80b731a5":"test_img_f = '..\/input\/recursion-cellular-image-classification\/test\/HUVEC-21\/Plate3\/H05_s2_w3.png'\nim = skimage.io.imread(test_img_f)\nim_g = skimage.io.imread(test_img_f, as_gray=True)\n\n#skimage.io.imshow(im)\nim.dtype","420eae8f":"plt.figure(figsize=(15, 15))\nimage = imread('..\/input\/recursion-cellular-image-classification\/test\/HUVEC-21\/Plate3\/H05_s2_w3.png', as_gray=True)\nimshow(image)\nplt.ylabel('Height {}'.format(image.shape[0]))\nplt.xlabel('Width {}'.format(image.shape[1]))","1aab5f15":"# Photo negative\nplt.figure(figsize=(20, 15))\nnegative = 255 - image # neg = (L-1) - img\nplt.ylabel('Height {}'.format(image.shape[0]))\nplt.xlabel('Width {}'.format(image.shape[1]))\nplt.imshow(negative);","3fa86944":"plt.figure(figsize=(15, 15))\npic = imageio.imread('..\/input\/recursion-cellular-image-classification\/test\/HUVEC-21\/Plate3\/H05_s2_w3.png')\n\nh,w = pic.shape[:2]\n\nim_small_long = pic.reshape((h * w, 1))\nim_small_wide = im_small_long.reshape((h,w,1))\n\nkm = KMeans(n_clusters=2)\nkm.fit(im_small_long)\n\nseg = np.asarray([(1 if i == 1 else 0)\n                  for i in km.labels_]).reshape((h,w))\n\ncontours = measure.find_contours(seg, 0.5, fully_connected=\"high\")\nsimplified_contours = [measure.approximate_polygon(c, tolerance=5) \n                       for c in contours]\n\nplt.figure(figsize=(20,15))\nfor n, contour in enumerate(simplified_contours):\n    plt.plot(contour[:, 1], contour[:, 0], linewidth=2)\n    \n    \nplt.ylim(h,0)\n","341f405e":"# Matrix \ud83d\udd34\ud83c\udd9a\ud83d\udd35\ud83d\udc8a\nimage = imread('..\/input\/recursion-cellular-image-classification\/test\/HUVEC-21\/Plate3\/H05_s2_w3.png')\nimage.shape, image","ff29ba45":"df.values","00c33432":"df2 = pd.DataFrame(np.random.rand(10, 11), columns=['id_code', 'experiment', 'mean', 'std', 'plate','well', 'site', 'channel', 'median', 'min', 'max'])\ndf2.plot.bar(figsize=(20,15));","c2dacbf7":"corr = df2.corr()\nfig = plt.figure(1, figsize=(20,15))\nplt.imshow(corr,cmap='winter')\nlabels = np.arange(len(df2.columns))\nplt.xticks(labels,df2.columns,rotation=90)\nplt.yticks(labels,df2.columns)\nplt.title('Correlation Matrix of Global Variables')\ncbar = plt.colorbar(shrink=0.85,pad=0.02)\nplt.show()","f960234b":"df.hist(bins=50, figsize=(20,15))\nplt.show()","627db0aa":"plt.figure(); df.plot(figsize=(15,10))","47fadba0":"plt.figure(); df2.plot(figsize=(15,10))","6227ec75":"sns.pairplot(df2,hue='channel',height=2.6)","9cddde7e":"df.loc[0]","e3da5fe5":"image = imread('..\/input\/recursion-cellular-image-classification\/test\/HUVEC-21\/Plate3\/H05_s2_w3.png')\nprint('Type of the image : ' , type(image))\n\nprint('Shape of the image : {}'.format(image.shape))\n\nprint('Image Hight {}'.format(image.shape[0]))\n\nprint('Image Width {}'.format(image.shape[1]))\n\nprint('Dimension of Image {}'.format(image.ndim))","97ccf665":"image = imread('..\/input\/recursion-cellular-image-classification\/test\/HUVEC-21\/Plate3\/H05_s2_w3.png')\nprint('Image size {}'.format(image.size))\n\nprint('Maximum RGB value in this image {}'.format(image.max()))\n\nprint('Minimum RGB value in this image {}'.format(image.min()))","86615b65":"df.shape","5e3e6111":"plt.figure(figsize=(15, 15))\ngrayscale = imread('..\/input\/recursion-cellular-image-classification\/test\/HUVEC-21\/Plate3\/H05_s2_w3.png')\ncounts, vals = np.histogram(grayscale, bins=range(2 ** 8))\nplt.plot(range(0, (2 ** 8) - 1), counts)\nplt.title('Grayscale image histogram')\nplt.xlabel('Pixel intensity')\nplt.ylabel('Count')","389020f1":"df.size","ab531513":"df.isnull().sum()","ebb03f30":"# look at the last 5 rows\ndf.tail()","03322c53":"df.describe()\nprint(\"*\"*50)\ndf.info()\nprint(\"*\"*50)","fa338d80":"df2","8be5674b":"### A histogram for each numerical attribute","a94ff6de":"### Plot Test Dataframe","473025b5":"# Contouring","16f53b62":"### Plot Pixel Stats","8e41922c":"# Correlation Matrix of Global Variables"}}