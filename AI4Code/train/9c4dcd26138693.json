{"cell_type":{"9dda6ca1":"code","5692a50a":"code","3005dbae":"code","f2869833":"code","9371cb24":"code","d25acb58":"code","b43c69f0":"code","5b543b7d":"code","5f2822fc":"code","22697762":"code","ab5b4ed9":"code","b04c2c65":"code","f46e45b7":"code","73d00e90":"code","70a6240b":"code","d20e91d7":"code","83457954":"code","a0367231":"code","f2279d8f":"code","00c65f70":"code","c63b32db":"code","8076e87e":"code","1b2603ee":"code","449c3cb7":"code","401e75ff":"code","cf2e48ef":"code","0ad87816":"code","eafe0dde":"code","1c325c58":"code","142be399":"code","827e6851":"code","a4ba3e44":"code","2134c313":"code","699ee069":"code","c5fd1944":"code","d6469e54":"code","f1f2b1a5":"code","7d5ecbc4":"code","fecce4ad":"code","f31809b4":"code","040b7007":"code","fb1a0472":"code","60267e61":"code","a0ddff03":"code","7c5aaf23":"code","3a93743d":"code","5790fc8a":"code","9c1f6835":"code","ba650747":"code","fea9fa03":"code","2a02deb0":"markdown","bc71165e":"markdown","9e77d8c3":"markdown","27a6547b":"markdown","e603fc3d":"markdown","2a03b7ab":"markdown","003cf4dd":"markdown","0ad36242":"markdown","65be72bd":"markdown","ecd7829d":"markdown","b36e37ab":"markdown","62d12c66":"markdown","3286c248":"markdown","395f586d":"markdown","2fbff555":"markdown","92d70fff":"markdown","1851c3c0":"markdown","ab51dc97":"markdown","12710114":"markdown","64873450":"markdown","7c41b3c2":"markdown"},"source":{"9dda6ca1":"import pandas as pd\nimport numpy as np","5692a50a":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntrain = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')","3005dbae":"# \u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306e\u78ba\u8a8d\nprint(train.shape)\nprint(test.shape)","f2869833":"# 2013\u5e741\u6708\u304b\u30892015\u5e7410\u6708\u307e\u3067\u306e\u65e5\u6b21\u5c65\u6b74\u30c7\u30fc\u30bf\n# \u5404\u30ab\u30e9\u30e0\u306e\u610f\u5473\n# date:\u65e5\u4ed8(\u8868\u793a\u5f62\u5f0f:\u65e5.\u6708.\u5e74\u3063\u307d\u3044)\n# date_block_num:\u5e74\u6708\u3054\u3068\u306e\u9023\u756a\n# shop_id:\u5e97ID\n# item_id:\u30a2\u30a4\u30c6\u30e0ID\n# item_price:\u5546\u54c1\u4fa1\u683c\n# item_cnt_day:\u305d\u306e\u65e5\u306b\u8ca9\u58f2\u3055\u308c\u305f\u88fd\u54c1\u306e\u6570\ntrain.head()","9371cb24":"train.columns = ['date', 'date_block_num', 'shop_id', 'item_id', 'item_price', 'item_cnt_day']\ntrain","d25acb58":"train[train.date_block_num==0].sort_values(['shop_id','item_id'], ascending=True)","b43c69f0":"train['date_block_num'] += 1\ntrain['date_block_num'] ","5b543b7d":"# 2015\u5e7411\u6708\u306e\u30b7\u30e7\u30c3\u30d7ID\u3068\u30a2\u30a4\u30c6\u30e0ID\u306e\u58f2\u4e0a\u3092\u4e88\u6e2c\u3057\u3066\u3044\u304f\n# \u5404\u30ab\u30e9\u30e0\u306e\u610f\u5473\n# ID:\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n# shop_id:\u5e97ID\n# item_id:\u30a2\u30a4\u30c6\u30e0ID\ntest.head()","5f2822fc":"# shop.csv\u306e\u78ba\u8a8d\nshops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv');\nprint(shops.shape)\n# \u5404\u30ab\u30e9\u30e0\u306e\u610f\u5473\n# shop_name:\u5e97\u540d\n# shop_id:\u5e97ID\nshops.head()","22697762":"# item.csv\u306e\u78ba\u8a8d\nitems= pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv');\nprint(items.shape)\n# \u5404\u30ab\u30e9\u30e0\u306e\u610f\u5473\n# item_name:\u5546\u54c1\u540d\n# item_id:\u5546\u54c1ID\n# item_category_id:\u5546\u54c1\u30ab\u30c6\u30b4\u30eaID\nitems.head()","ab5b4ed9":"# item_categories.csv\u306e\u78ba\u8a8d\ncats= pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv');\nprint(cats.shape)\n# \u5404\u30ab\u30e9\u30e0\u306e\u610f\u5473\n# item_category_name:\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u540d\n# item_category_id:\u5546\u54c1\u30ab\u30c6\u30b4\u30eaID\ncats.head()","b04c2c65":"# sample_submission.csv\u306e\u78ba\u8a8d\nsample_submission= pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv');\nprint(sample_submission.shape)\n# \u5404\u30ab\u30e9\u30e0\u306e\u610f\u5473\n# ID:\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(test.csv\u306b\u7d10\u3065\u304f)\n# item_cnt_month:\u305d\u306e\u6708\u306b\u8ca9\u58f2\u3055\u308c\u305f\u88fd\u54c1\u306e\u6570\nsample_submission.head()","f46e45b7":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# train\u30c7\u30fc\u30bf\u306b\u3066\u3001\u300c\u88fd\u54c1\u306e\u500b\u6570\u300d\u3092\u7bb1\u3072\u3052\u56f3\u3067\u78ba\u8a8d\u3059\u308b\nfig,ax = plt.subplots(2,1,figsize=(10,4))\n# \u5c3a\u5ea6\u306e\u8abf\u6574\nplt.xlim(-300, 3000)\n# \u7bb1\u3072\u3052\u56f3\u3092\u63cf\u753b\nax[0].boxplot((train.item_cnt_day) , labels=['train.item_cnt_day'], vert=False)\n\n# train\u30c7\u30fc\u30bf\u306b\u3066\u3001\u300c\u5546\u54c1\u306e\u4fa1\u683c\u300d\u3092\u7bb1\u3072\u3052\u56f3\u3067\u78ba\u8a8d\u3059\u308b\nplt.xlim(-1000, 350000)\nax[1].boxplot((train.item_price) , labels=['train.item_price'], vert=False)\nplt.show()","73d00e90":"# \u5916\u308c\u5024\u306e\u9664\u5916\ntrain = train[train.item_price<100000]\ntrain = train[train.item_cnt_day<1001]","70a6240b":"# 0\u4ee5\u4e0b\u306e\u5024\ntrain[train.item_price<0]","d20e91d7":"# \u540c\u3058\u5e74\u6708\/\u5e97ID\/\u5546\u54c1ID\u306e\u4e2d\u592e\u5024\u3092 median \u306b\u4ee3\u5165\nmedian = train[(train.date_block_num==4)&(train.shop_id==32)&(train.item_id==2973)&(train.item_price>0)].item_price.median()\n# median \u30920\u4ee5\u4e0b\u306e\u5024\u306b\u4ee3\u5165\ntrain.loc[train.item_price<0, 'item_price'] = median\n# \u4ee3\u5165\u3055\u308c\u305f\u305f\u3081\u3001train.item_price\u306b\u30660\u4ee5\u4e0b\u306e\u5024\u304c\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\ntrain[train.item_price<0]","83457954":"# \u5e97\u60c5\u5831\u3092\u78ba\u8a8d(\u5168\u90e8\u306760\u5e97\u3057\u304b\u3042\u308a\u307e\u305b\u3093)\nshops","a0367231":"# \u91cd\u8907\u3057\u3066\u3044\u305f\u5e97\u540d\u306eID\u3092\u7d71\u4e00\u3055\u305b\u307e\u3059\u3002(train\/test\u4e21\u65b9\u3067\u51e6\u7406\u3057\u3066\u304a\u304d\u307e\u3059)\n# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\ntrain.loc[train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\ntrain.loc[train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\ntrain.loc[train.shop_id == 10, 'shop_id'] = 11\ntest.loc[test.shop_id == 10, 'shop_id'] = 11","f2279d8f":"from sklearn.preprocessing import LabelEncoder\n# \u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 = \u30bb\u30eb\u30ae\u30a8\u30d5\u30fb\u30dd\u30b5\u30c9\u304c\u30b9\u30da\u30fc\u30b9\u3067\u7a7a\u3044\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u30b9\u30da\u30fc\u30b9\u3092\u57cb\u3081\u307e\u3059\u3002\nshops.loc[shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\n# shop_name\u306e\u5148\u982d\u3092\u62bd\u51fa\u3057\u3066shop\u306b\u65b0\u305f\u306a\u5217[city(\u90fd\u5e02)]\u3092\u8ffd\u52a0\u3057\u307e\u3059\nshops['city'] = shops['shop_name'].str.split(' ').map(lambda x: x[0])\n# \u90fd\u5e02\u540d\u306e\u5148\u982d\u306b[!]\u304c\u30b4\u30df(\u30bf\u30a4\u30dd\u3089\u3057\u3044)\u3068\u3057\u3066\u5165\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4fee\u6b63\u3059\u308b\nshops.loc[shops.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\n# LabelEncoder\u3092\u4f7f\u3063\u3066\u6570\u5024\u5316\u3057\u307e\u3059\u3002\nshops['city_code'] = LabelEncoder().fit_transform(shops['city'])\n# shops\u306e\u69cb\u9020\u3092['shop_id', 'city_code']\u306b\u8a2d\u5b9a\u3059\u308b\nshops = shops[['shop_id','city_code']]","00c65f70":"# \u524d\u51e6\u7406\u5f8c\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\nshops.head()","c63b32db":"cats","8076e87e":"# '-'\u3067\u30ab\u30c6\u30b4\u30ea\u540d\u3092\u5206\u5272\u3057\u307e\u3059\ncats['split'] = cats['item_category_name'].str.split('-')\n# type\u306b\u306f-\u3067\u5206\u5272\u3057\u305f\u5148\u982d\u306e\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\ncats['type'] = cats['split'].map(lambda x: x[0].strip())\n# \u4e2d\u306b\u306f\u30b5\u30d6\u30bf\u30a4\u30d7\u3092\u6301\u305f\u306a\u3044\u30c7\u30fc\u30bf\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306fsubtype\u306b\u30bf\u30a4\u30d7\u3092\u4ee3\u5165\u3057\u307e\u3059\ncats['subtype'] = cats['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\n# LabelEncoder\u3092\u4f7f\u3063\u3066\u6570\u5024\u5316\u3057\u307e\u3059\u3002\ncats['type_code'] = LabelEncoder().fit_transform(cats['type'])\ncats['subtype_code'] = LabelEncoder().fit_transform(cats['subtype'])\n# shops\u306e\u69cb\u9020\u3092['item_category_id', 'type_code', 'subtype_code']\u306b\u8a2d\u5b9a\u3059\u308b\ncats = cats[['item_category_id','type_code', 'subtype_code']]","1b2603ee":"# \u524d\u51e6\u7406\u5f8c\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\ncats.head()","449c3cb7":"items","401e75ff":"items.drop(['item_name'], axis=1, inplace=True)","cf2e48ef":"items.head()","0ad87816":"# test(item_id) - (test(item_id) \u7a4d\u96c6\u5408 train(item_id)) = train\u306b\u5b58\u5728\u3057\u306a\u3044test\u306e\u5546\u54c1ID\u306e\u6570\nprint(len(list(set(test.item_id) - set(test.item_id).intersection(set(train.item_id)))))\n# test\u306e\u5546\u54c1ID\u306e\u6570(\u91cd\u8907\u306f\u9664\u304f)\nprint(len(list(set(test.item_id))))\n# test\u306e\u7dcf\u6570\nprint(len(test))","eafe0dde":"# train.date_block_num\u306b\u3066\u3001\u5217(Series\u578b)\u3054\u3068\u306b\u30e6\u30cb\u30fc\u30af\u306a\u5024\u3092\u78ba\u8a8d(\u5e74\u6708\u306e\u7d44\u307f\u5408\u308f\u305b\u306f33\u30d1\u30bf\u30fc\u30f3\u3068\u78ba\u8a8d\u3067\u304d\u308b)\ntrain.date_block_num.unique()","1c325c58":"import time\n# \u8907\u6570\u306e\u30ea\u30b9\u30c8\u306e\u76f4\u7a4d\uff08\u30c7\u30ab\u30eb\u30c8\u7a4d\uff09\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom itertools import product\nts = time.time()\n\n# \u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3059\u308b\u3001(\u5e74\u6708\u756a\u53f7,\u5e97ID,\u5546\u54c1ID)\u306e\u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3057\u305f\u884c\u5217\u3092\u751f\u6210\u3057\u3066\u3044\u304f\n# \u6700\u7d42\u7684\u306bmatrix\u3092\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3059\u308b\nmatrix = []\nfor i in range(34):\n    # \u5909\u6570sales\u306bdate_block_num=i\u306e\u884c\u5217(\u8868)\u30c7\u30fc\u30bf\u3092\u4ee3\u5165\u3059\u308b\n    sales = train[train.date_block_num==i]\n    # train\u30c7\u30fc\u30bf\u306b\u5b58\u5728\u3059\u308b\u3001(\u5e74\u6708\u756a\u53f7,\u5e97ID,\u5546\u54c1ID)\u306e\u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3057\u305f\u884c\u5217\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\n    matrix.append(np.array(list(product([i], sales.shop_id.unique(), sales.item_id.unique())), dtype='int16'))\n\n# \u5217\u540d\u3092\u6539\u3081\u3066\u8a2d\u5b9a\u3057\u3066matrix\u3092\u66f4\u65b0\ncols = ['date_block_num','shop_id','item_id']\nmatrix = pd.DataFrame(np.vstack(matrix), columns=cols)\n# .astype(~~~):\u5404\u7279\u5fb4\u91cf\u3092~~~\u3067\u30ad\u30e3\u30b9\u30c8\nmatrix['date_block_num'] = matrix['date_block_num'].astype(np.int8)\nmatrix['shop_id'] = matrix['shop_id'].astype(np.int8)\nmatrix['item_id'] = matrix['item_id'].astype(np.int16)\n# cols\u3092\u30bd\u30fc\u30c8\u5bfe\u8c61\u3068\u3059\u308b\u3001inplace=True\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u305d\u306e\u307e\u307e\u66f4\u65b0\nmatrix.sort_values(cols,inplace=True)\ntime.time() - ts\n# 20.83844780921936","142be399":"matrix.shape","827e6851":"# train\u30c7\u30fc\u30bf\u306b revenue(\u305d\u306e\u65e5\u306e\u53ce\u652f\u5408\u8a08) \u3092\u8ffd\u52a0\u3057\u307e\u3059\ntrain['revenue'] = train['item_price'] *  train['item_cnt_day']\ntrain.head()","a4ba3e44":"# train\u30c7\u30fc\u30bf\u306b\u3066\u3001'date_block_num','shop_id','item_id'\u3067GROUP\u5316\u3057\u305fDataFrameGroupBy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001'item_cnt_day'\u3092\u96c6\u8a08\u3057\u307e\u3059\ngroup = train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': ['sum']})\n# \u5217\u540d\u306e\u66f4\u65b0\ngroup.columns = ['item_cnt_month']\n# DataFrameGroupBy -> DataFrame \u306b\u5909\u63db\ngroup.reset_index(inplace=True)\ngroup.head()","2134c313":"# DataFrame\u540c\u58eb\u3067cols\u3092\u6761\u4ef6\u306b\u5de6\u7d50\u5408\u3059\u308b\nmatrix = pd.merge(matrix, group, on=cols, how='left')\n# item_cnt_month\u306e\u524d\u51e6\u7406\nmatrix['item_cnt_month'] = (matrix['item_cnt_month']\n                                .fillna(0) # 0\u3067\u7a74\u57cb\u3081\u3059\u308b\n                                .clip(0,20) # \u6700\u5c0f\u50240\/\u6700\u5927\u502420\u306b\u53ce\u3081\u308b(\u306a\u305c\u3053\u306e\u5024\uff1f)\n                                .astype(np.float16)) # \u578b\u306e\u30ad\u30e3\u30b9\u30c8\nmatrix.shape","699ee069":" # 2015\u5e7411\u6708\u306e\u30c7\u30fc\u30bf\u306e\u305f\u3081date_block_num = 34\u3068\u3057\u3066\u5217\u3092\u8ffd\u52a0\u3057\u3066\u3042\u3052\u307e\u3057\u3087\u3046\ntest['date_block_num'] = 34\n# \u578b\u306e\u30ad\u30e3\u30b9\u30c8\ntest['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)\ntest.head()","c5fd1944":"test.shape","d6469e54":"ts = time.time()\n# matrix\u306btest\u3092\u9023\u7d50\u3055\u305b\u308b\nmatrix = pd.concat([matrix, test], ignore_index=True, sort=False, keys=cols)\n# NaN\u30920\u306b\u5909\u63db\nmatrix.fillna(0, inplace=True) # 34 month\ntime.time() - ts\nmatrix[matrix.date_block_num==34]","f1f2b1a5":"ts = time.time()\n# Shop\/Cat\/Item\u306e\u7279\u5fb4\u91cf\u3092matrix\u306b\u8ffd\u52a0\u3059\u308b\nmatrix = pd.merge(matrix, shops, on=['shop_id'], how='left')\nmatrix = pd.merge(matrix, items, on=['item_id'], how='left')\nmatrix = pd.merge(matrix, cats, on=['item_category_id'], how='left')\n# \u578b\u306e\u30ad\u30e3\u30b9\u30c8\nmatrix['city_code'] = matrix['city_code'].astype(np.int8)\nmatrix['item_category_id'] = matrix['item_category_id'].astype(np.int8)\nmatrix['type_code'] = matrix['type_code'].astype(np.int8)\nmatrix['subtype_code'] = matrix['subtype_code'].astype(np.int8)\ntime.time() - ts\nmatrix","7d5ecbc4":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        # \u5217\u540d\u306e\u66f4\u65b0\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n    return df","fecce4ad":"matrix","f31809b4":"ts = time.time()\n# [1,2,3,6,12]\u306b\u683c\u7d0d\u3055\u308c\u305f\u5024\u306e\u30f6\u6708\u524d\u306eitem_cnt_month\u3092\u7279\u91cf\u91cf\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'item_cnt_month')\ntime.time() - ts","040b7007":"matrix","fb1a0472":"# import gc\n# import pickle\n# matrix.to_pickle('data.pkl')\n# # del matrix\n# # del cache\n# # del group\n# # del items\n# # del shops\n# # del cats\n# # del train\n# # leave test for submission\n# gc.collect();","60267e61":"# data = pd.read_pickle('data.pkl')","a0ddff03":"# matrix.columns","7c5aaf23":"# data = data[matrix.columns]","3a93743d":"# # \u8a13\u7df4\u7528\u30c7\u30fc\u30bf\n# X_train = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\n# Y_train = data[data.date_block_num < 33]['item_cnt_month']\n# # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u7528\u30c7\u30fc\u30bf\n# X_valid = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\n# Y_valid = data[data.date_block_num == 33]['item_cnt_month']\n# # \n# X_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)","5790fc8a":"# del data\n# gc.collect();","9c1f6835":"# from xgboost import XGBRegressor\n\n# ts = time.time()\n# model = XGBRegressor(\n#     max_depth=8,\n#     n_estimators=1000,\n#     min_child_weight=300, \n#     colsample_bytree=0.8, \n#     subsample=0.8, \n#     eta=0.3,    \n#     seed=42)\n\n# model.fit(\n#     X_train, \n#     Y_train, \n#     eval_metric=\"rmse\", \n#     eval_set=[(X_train, Y_train), (X_valid, Y_valid)], \n#     verbose=True, \n#     early_stopping_rounds = 10)\n\n# time.time() - ts","ba650747":"# Y_pred = model.predict(X_valid).clip(0, 20)\n# Y_test = model.predict(X_test).clip(0, 20)\n\n# submission = pd.DataFrame({\n#     \"ID\": test.index, \n#     \"item_cnt_month\": Y_test\n# })\n# submission.to_csv('xgb_submission.csv', index=False)\n\n# # save predictions for an ensemble\n# pickle.dump(Y_pred, open('xgb_train.pickle', 'wb'))\n# pickle.dump(Y_test, open('xgb_test.pickle', 'wb'))","fea9fa03":"# plot_features(model, (10,14))","2a02deb0":"## Predict Future Sales \n\u3053\u306ekernel\u306f[Feature engineering, xgboost](https:\/\/www.kaggle.com\/dlarionov\/feature-engineering-xgboost)\u3092\u53c2\u8003\u306b\u65e5\u672c\u8a9e\u3067\u6574\u7406\u3057\u3066\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002  \n\u4f5c\u6210\u3057\u306a\u304c\u3089\u69cb\u6210\u306e\u6574\u7406\u7b49\u306f\u884c\u306a\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u8aa4\u3063\u305f\u7b87\u6240\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3054\u6307\u6458\u304a\u9858\u3044\u3057\u307e\u3059\u3002","bc71165e":"## Shop\/Cat\/Item\u306e\u7279\u5fb4\u91cf","9e77d8c3":"\u6b21\u306b\u3001items\u3092\u89b3\u5bdf\u3057\u3066\u307f\u307e\u3057\u3087\u3046","27a6547b":"test.csv\u306f2015\u5e7411\u6708\u306e\u6708\u6b21\u58f2\u4e0a\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u5546\u54c1ID\/\u5e97ID\u306e\u7d44\u307f\u5408\u308f\u305b\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002   \n\u305d\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u306f \u5546\u54c1\u6570(5100) * \u5e97\u6570(42) = 214200\u30da\u30a2\u3042\u308a\u307e\u3059\u3002  \ntest\u306b\u5b58\u5728\u3057\u3066\u3001train\u306b\u5b58\u5728\u3057\u306a\u3044\u5546\u54c1\u306f363\u500b\u3042\u308a\u307e\u3059\u3002  \n\u3057\u305f\u304c\u3063\u3066\u3001\u3053\u308c\u3089\u306e\u5546\u54c1\u306b\u5bfe\u3057\u3066\u306e\u76ee\u7684\u5909\u6570(\u4eca\u56de\u306f\u6708\u6b21\u58f2\u4e0a)\u306f\u4e88\u6e2c\u3067\u304d\u306a\u3044\u306e\u3067\u30010\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002  \n\u4e00\u65b9\u3001train\u30c7\u30fc\u30bf\u304c\u542b\u3080\u5168\u3066\u306e\u5546\u54c1\u306f\u904e\u53bb\u306b\u58f2\u3089\u308c\u3066\u3044\u308b(\u307e\u305f\u306f\u8fd4\u54c1)\u30da\u30a2\u306e\u307f\u3067\u3059\u3002\n\u4eca\u56de\u306e\u4e3b\u3068\u306a\u308b\u65b9\u91dd\u3067\u306f\u3001\u6708\u6b21\u58f2\u4e0a\u3092\u8a08\u7b97\u3057\u3001\u305d\u306e\u30da\u30a2\u3054\u3068\u306b\u58f2\u4e0a\u30920\u306b\u62e1\u5f35\u3057\u3066\u3044\u304d\u307e\u3059\u3002(?)","e603fc3d":"\u4e0a\u8a18\u306eshop\u30c7\u30fc\u30bf\u306a\u3069\u306e\u89b3\u5bdf\u304b\u3089\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n- \u5e97\u540d(shop_name)\u306f\u3001\u30ed\u30b7\u30a2\u306e\u5404\u90fd\u5e02\u540d\u3067\u59cb\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n - shop_name\u306e\u69cb\u6210\u306f [\u90fd\u5e02\u540d \u5e97\u306e\u30bf\u30a4\u30d7 \"\u5e97\u540d\"]\u306a\u3069 \u5fc5\u305a\u90fd\u5e02\u540d\u3067\u59cb\u307e\u3063\u3066\u3044\u308b","2a03b7ab":"## xgboost\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","003cf4dd":"## \u6708\u6b21\u58f2\u4e0a","0ad36242":"train.item_price\u306b\u30660\u4ee5\u4e0b\u306e\u5024\u304c\u8aa4\u3063\u3066\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002","65be72bd":"\u540c\u3058\u5e74\u6708\/\u5e97ID\/\u5546\u54c1ID\u306e\u4e2d\u592e\u5024\u3092\u3053\u306e\u8aa4\u3063\u305f\u5024\u306b\u4ee3\u5165\u3057\u307e\u3059\u3002","ecd7829d":"item_name\u306b\u306f\u7279\u5fb4\u91cf\u3068\u306a\u308a\u305d\u3046\u306a\u60c5\u5831\u304c\u306a\u3044\u306e\u3067\u5217\u3054\u3068\u62b9\u6bba\u3057\u3066\u3084\u308a\u307e\u3057\u3087\u3046\u3002","b36e37ab":"\u4e0a\u8a18\u3067shop\u30c7\u30fc\u30bf\u3092\u5168\u4ef6\u78ba\u8a8d\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30c7\u30fc\u30bf\u78ba\u8a8d\u306f\u7701\u304d\u307e\u3059\u3002  \nshops\u30c7\u30fc\u30bf\u304b\u3089\u78ba\u8a8d\u524d\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002","62d12c66":"\u6b21\u306b\u3001cats\u3067\u3059\u304c\u3001\u6539\u3081\u3066\u5168\u4ef6\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","3286c248":"## \u5916\u308c\u5024\u306e\u78ba\u8a8d\/\u9664\u5916","395f586d":"## Shop\/Cat\/Item\u306e\u524d\u51e6\u7406","2fbff555":"cats\u306e\u89b3\u5bdf\u3067\u4ee5\u4e0b\u306e\u70b9\u306b\u6c17\u3065\u3051\u307e\u3059\u3002\n- \u30ab\u30c6\u30b4\u30ea\u540d\u306f\u3001[\u30bf\u30a4\u30d7-\u30b5\u30d6\u30bf\u30a4\u30d7]\u306e\u69cb\u6210\u3068\u306a\u3063\u3066\u3044\u308b  \n\n\u305d\u306e\u305f\u3081cats\u306e\u30ab\u30c6\u30b4\u30ea\u540d\u304b\u3089\u3001\u30bf\u30a4\u30d7\/\u30b5\u30d6\u30bf\u30a4\u30d7\u306e\u5217\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002","92d70fff":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf(\u524d\u51e6\u7406\u3092\u884c\u3046)","1851c3c0":"\u4e0a\u8a18\u306e\u7bb1\u3072\u3052\u56f3\u3088\u308a\u3001\u5404\u30c7\u30fc\u30bf\u3067\u5916\u308c\u5024\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002  \ntrain.item_price>100000 \u304a\u3088\u3073 >1001 \u306e\u5916\u308c\u5024\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002","ab51dc97":"\u6b21\u306b\u3001\u5e97\u60c5\u5831\u3092\u78ba\u8a8d\u3059\u308b\u3068\u7570\u306a\u308b\u5e97ID\u3067\u540c\u3058\u5e97\u540d(\u53b3\u5bc6\u306b\u306f\u7b49\u3057\u304f\u7121\u3044)\u304c\u8aa4\u3063\u3066\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002  \n(\u3053\u308c\u306f\u30ed\u30b7\u30a2\u5f8c\u8aad\u3081\u306a\u3044\u3068\u7d76\u5bfe\u306b\u6c17\u3065\u3051\u306a\u3044\u524d\u51e6\u7406\u3067\u3059\u306d\u7b11)","12710114":"\u62b9\u6bba\u3055\u308c\u3066\u3001item_id\u3068item_category_id\u306e\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002","64873450":"## \u8aa4\u3063\u3066\u767b\u9332\u3055\u308c\u305f\u30b4\u30df\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\/\u4fee\u6b63","7c41b3c2":"## \u76ee\u7684\u5909\u6570"}}