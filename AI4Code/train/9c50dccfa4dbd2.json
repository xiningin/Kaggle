{"cell_type":{"630668d6":"code","f0f87353":"code","5c71085f":"code","e3251f32":"code","2daea4aa":"code","43076667":"code","dd3862a3":"code","1c9ee59e":"code","a0206fc3":"code","1bd5b9db":"code","a8dc0046":"code","4bd605d2":"code","d182d51e":"code","6fd737de":"code","98f80d5f":"code","e42d5e42":"code","03f80a36":"code","dd119dbe":"code","4a47cf59":"code","892946e3":"code","4007c76d":"code","a73a514c":"markdown","bacecfa3":"markdown","d0c2ff12":"markdown","6f6921c0":"markdown","19782e57":"markdown","3ad2d972":"markdown","efa039b0":"markdown","303c9523":"markdown","a3d300a1":"markdown","426b3d08":"markdown","4a41baaa":"markdown","1785b748":"markdown","f1f9c51f":"markdown","5a55efbb":"markdown","b8dc8a16":"markdown","fd1180bc":"markdown","8b795b4c":"markdown","ddb1f5f2":"markdown","34ac1a5b":"markdown","b7283674":"markdown","c3800cb1":"markdown","5b40d853":"markdown","b311c96d":"markdown","bfc53682":"markdown","1cc2b506":"markdown","28f60d56":"markdown","6a697a9a":"markdown"},"source":{"630668d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f0f87353":"# List of functions explained \nfunction1 = np.concatenate\nfunction2 = np.arange\nfunction3 = np.reshape\nfunction4 = np.pad\nfunction5 = np.extract","5c71085f":"# Example 1 - working (change this)\narr1 = [[1, 2, 3], \n        [3, 4, 3]]\n\narr2 = [[5, 6, 7], \n        [8, 9, 10]]\n\nnp.concatenate((arr1, arr2), axis=1)","e3251f32":"# Example 2 - working\nnp.concatenate((arr1, arr2), axis=0)","2daea4aa":"# Example 3 - breaking (to illustrate when it breaks)\nnew_arr1 = [[1, 2], \n        [3, 4.]]\n\nnew_arr2 = [[5, 6, 7], \n        [8, 9, 10]]\n\nnp.concatenate((new_arr1, new_arr2), axis=0)","43076667":"# Example 1 - working\nnp.arange(5,10,1)","dd3862a3":"# Example 2 - working\nnp.arange(12,2,-2)           #(start, stop, step)","1c9ee59e":"# Example 3 - breaking (to illustrate when it breaks)\nnp.arange(stop=6)","a0206fc3":"# Example 1 - working\na = np.arange(6).reshape((3, 2))\na","1bd5b9db":"# Example 2 - working\nabc = np.array([[1,2,3], [4,5,6]])\nnp.reshape(abc, 6)","a8dc0046":"np.reshape(abc, 6, order='F')","4bd605d2":"# Example 3 - breaking (to illustrate when it breaks)\narray_1 = np.array([[1,2,3,4],\n                  [2,3,4,4]])\narray_1.reshape(3,)","d182d51e":"# Example 1 - working\na = [1, 2, 3, 4, 5]\nnp.pad(a, (2, 3), 'constant', constant_values=(4, 6))","6fd737de":"np.pad(a, (2, 3), 'linear_ramp', end_values=(5, -4))","98f80d5f":"# Example 2 - working\nnp.pad(a, (2,), 'mean')","e42d5e42":"np.pad(a, (2,), 'maximum')","03f80a36":"np.pad(a, (2,), 'minimum')","dd119dbe":"# Example 3 - breaking (to illustrate when it breaks)\nsource_array = np.random.rand(10,6)\ntarget_array_shape = (5,5)\n\npad_x = (target_array_shape[0]-source_array.shape[0])\/\/2\npad_y = (target_array_shape[1]-source_array.shape[1])\/\/2\ntarget_array = np.pad(source_array, ((pad_x,pad_x),(pad_y,pad_y)), mode=\"constant\")\n","4a47cf59":"# Example 1 - working\narr = np.arange(12).reshape((3, 4))\nprint(arr)\n# Define the codition, here we take MOD 3 if zero\ncondition = np.mod(arr, 3)==0\nprint(condition)\n\nnp.extract(condition, arr)","892946e3":"# Example 2 - working\nnp.extract(((arr != 2) & (arr < 8)), arr)","4007c76d":"# Example 3 - breaking (to illustrate when it breaks)\ncondition = np.array([True, False, True, True,True])\narr = np.arange(4)\nnp.extract(condition, arr)","a73a514c":"A common use case for padding tensors is adding zeros around the border of images to convert them to a shape that is amenable to the convolution operation without throwing away any pixel information. You can do this and much more in **NumPy** with the `np.pad()` function.","bacecfa3":"# Numpy: For faster operations\n## What is NumPy?\n* NumPy is a Python library used for working with arrays.\n* It also has functions for working in domain of linear algebra, fourier transform, and matrices.\n* NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.\n* NumPy stands for Numerical Python.\n\n## Why Numpy?\nNumpy arrays offer the following benefits over Python lists for operating on numerical data:\n\n* In Python we have lists that serve the purpose of arrays, but they are slow to process.\n* NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.\n* The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.\n* Arrays are very frequently used in data science, where speed and resources are very important.\n\n## Five Numpy Operations to upgrade yourself\nNumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object\n\n 1. `numpy.concatenate`\n 2. `numpy.arange`\n 3. `numpy.reshape`\n 4. `numpy.pad`\n 5. `numpy.extract`","d0c2ff12":"## Function 3 - `np.reshape`\n\nThe `numpy.reshape()` function enables the user to change the dimensions of the array within which the elements reside. That is, we can reshape the data to any dimension using the `reshape()` function.\n\nMoreover, it allows the programmers to alter the number of elements that would be structured across a particular dimension.\n\nSyntax: `np.reshape(a, shape, order='C')`","6f6921c0":">The order keyword gives the index ordering both for fetching the values from a, and then placing the values into the output array.","19782e57":"In addition to `arange()`, we can apply other `NumPy` array creation routines based on numerical ranges:\n\n* `linspace()` is similar to `arange()` in that it returns evenly spaced numbers. But you can specify the number of values to generate as well as whether to include the endpoint and whether to create multiple arrays at once.\n* `logspace()` and `geomspace()` are similar to `linspace()`, except the returned numbers are spaced evenly on the logarithmic scale.\n* `meshgrid()`, `ogrid()`, and `mgrid()` return grids of points represented as arrays.\n\nAll these functions have their specifics and use cases. You can choose the appropriate one according to your needs.","3ad2d972":"## Conclusion\n\nNumpy array operations plays a vital role in Data Analysis. In this notebook, we covered 5 commonly used numpy array operations. Illustrated with examples, their explanations and errors that may occur in these array-operations.","efa039b0":"## Function 4 - `numpy.pad`\n\n`numpy.pad()` function is used to pad the **Numpy** arrays. Sometimes there is a need to perform padding in **Numpy** arrays, then `numPy.pad()` function is used. The function returns the padded array of rank equal to the given array and the shape will increase according to `pad_width`.\n\n**Syntax:** `numpy.pad(array, pad_width, mode=\u2019constant\u2019, **kwargs)` ","303c9523":"**Conclusion**\n* NumPy's concatenate() is not like a traditional database join. It is like stacking NumPy arrays.\n* This function can operate both vertically and horizontally. This means we can concatenate arrays together horizontally or vertically.","a3d300a1":"## Function 2 - `np.arange`\n\nReturn evenly spaced values within a given interval.\n\nValues are generated within the half-open interval `[start, stop]` (in other words, the interval including `start` but excluding `stop`). For integer arguments, the function is equivalent to the Python built-in `range` function, but returns an `ndarray` rather than a `list`.\n\nSyntax: `np.arange(start, stop, step, dtype=None,)`","426b3d08":">Explanation about example:\nSometimes we\u2019ll want an array with the values decrementing from left to right. In such cases, you can use `arange()` with a negative value for `step`, and with a `start` greater than `stop`:","4a41baaa":"## Function 1 - `np.concatenate`\n\nThe `concatenate()` function is a function from the `NumPy` package. This function essentially combines `NumPy` arrays together. This function is basically used for joining two or more arrays of the same shape along a specified axis\n\nSynatx: `np.concatenate((a1, a2, ...), axis=0, out=None, dtype=None, casting=\"same_kind\")`","1785b748":"Concatenation refers to joining. This function is used to join two or more arrays of the same shape along a specified axis. Here `axis=1` is joining the array horizontally.","f1f9c51f":"Concatenation refers to joining. This function is used to join two or more arrays of the same shape along a specified axis. Here `axis=0` is joining the array vertically.","5a55efbb":"## Function 5 - `numpy.extract`\n\nThe `numpy.extract()` function returns elements of input_array if they satisfy some specified condition.\n\nSyntax: `numpy.extract(condition, array)[source]`","b8dc8a16":"## Reference Links\nProvide links to your references and other interesting articles about Numpy arrays:\n* Numpy official tutorial : https:\/\/numpy.org\/doc\/stable\/user\/quickstart.html\n* Geeks for geeks : https:\/\/www.geeksforgeeks.org\/\n* StackOverflow: https:\/\/stackoverflow.com\/\n* W3Schools Tutorial : https:\/\/www.w3schools.com\/python\/numpy_intro.asp","fd1180bc":">Explanation about example:\n>Taking just the `start` argument is sufficient to get an array. And passing arguments `stop`, `step` makes it even better.","8b795b4c":">Explanation about example (why it breaks and how to fix it)\nHere we get the `ValueError` since an array size of 8 cannot be reshaped into 3 rows. It can either be (2,4), (4,2), (1,8) or (8,1)","ddb1f5f2":">You can think of reshaping as first raveling the array (using the given index order), then inserting the elements from the raveled array into the new array using the same kind of index ordering as was used for the raveling.\nOrder must be one of `'C'`, `'F'`, `'A'`, or `'K'`.","34ac1a5b":">We have used the same array i.e `arr`. In this example we have used `AND` operator to define the condition to extract the array. We can also use other operators like `NOT`, `OR` etc.","b7283674":">Explanation about example (why it breaks and how to fix it):\nIn the above example, the length of the condition array is larger than `arr`. It tries to extract the element on the basis of `True` value which out of the index. Thus `IndexError` is notified. It may be corrected if the  condition array length is smaller or equal to length of the input array. It may also be noted that if the last value of condition array is set to False, then also no error will be called. This is because extraction will not take place from the input array if the condition is set to False, thus extraction will not get out of bounds of input array.","c3800cb1":">Explanation about example (why it breaks and how to fix it):\nThe centering can only be correct if the source array is smaller than the target array otherwise you get a `ValueError(index can't contain negative values)`.\nAlso the target dimension might not be correct if the target and source dimension, are not both even or both odd.","5b40d853":"\nThis example is throwing `ValueError` as all the input array dimensions for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 2 and the array at index 1 has size 3\nThis can be resolved by changing array size or using `reshape()`","b311c96d":"Other operators can also be used or combination of operators can also be used for defining the condition.","bfc53682":">Mode can be of string or a function. Other modes are: `median`, `symmetric`, `wrap`, or etc.","1cc2b506":">We have defined an 2D array with values from 0 to 11 using arange() function and then reshaping it to (3 X 4). Then we have defined the condition where mod 3 is equal to zero i.e numbers divisible by 3 (or number multiple of 3). Then using extract function we have extracted all desired values.","28f60d56":">There are various modes to pad the array. Above is the example where pad values are given in prior.","6a697a9a":"\n>We got the error because `np.arange()` doesn\u2019t allow you to explicitly avoid the first argument that corresponds to `start`. If you provide a single argument, then it has to be `start`, but `np.arange()` will use it to define where the counting stops."}}