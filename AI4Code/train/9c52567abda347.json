{"cell_type":{"d4530888":"code","002a0f93":"code","3b8c0a91":"code","1abf2b6d":"code","6524c927":"code","3f6d0f90":"code","8af7fe53":"code","3c2ee346":"code","9a425aef":"code","b47c3642":"code","53aa2226":"code","5f0bc95a":"code","99423761":"code","dbb9b83b":"code","18735db8":"code","fe38f9ff":"code","b8ba9d1c":"code","6fb4668f":"code","b2d8d784":"code","4458d802":"code","2e566e4c":"code","925ca4ab":"code","0fe3e86c":"markdown","711fa9d8":"markdown","81ece1f1":"markdown","a93af035":"markdown","d0cc8d30":"markdown"},"source":{"d4530888":"# Imported Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Classifier Libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.cluster import KMeans\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV","002a0f93":"credit_card = pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")\ncredit_card.head()","3b8c0a91":"credit_card.describe()","1abf2b6d":"credit_card.shape","6524c927":"credit_card.info()","3f6d0f90":"#checking for null values in features\ncredit_card.isnull().sum()","8af7fe53":"print('No Frauds', round(credit_card['Class'].value_counts()[0]\/len(credit_card) * 100,2), '% of the dataset')\nprint('Frauds', round(credit_card['Class'].value_counts()[1]\/len(credit_card) * 100,2), '% of the dataset')","3c2ee346":"sns.countplot('Class', data=credit_card)\nplt.title('Class Distributions \\n (0: No Fraud || 1: Fraud)', fontsize=14)","9a425aef":"fig, ax = plt.subplots(1, 2, figsize=(18,4))\namount_val = credit_card['Amount'].values\ntime_val = credit_card['Time'].values\n\nsns.distplot(amount_val, ax=ax[0], color='r')\nax[0].set_title('Distribution of Transaction Amount', fontsize=14)\nax[0].set_xlim([min(amount_val), max(amount_val)])\n\nsns.distplot(time_val, ax=ax[1], color='b')\nax[1].set_title('Distribution of Transaction Time', fontsize=14)\nax[1].set_xlim([min(time_val), max(time_val)])\n\nplt.show()","b47c3642":"X = credit_card.iloc[:,:-1]\nX.shape","53aa2226":"corr_mtx = credit_card.corr()\nf, ax = plt.subplots(figsize=(16, 14))\nax = sns.heatmap(corr_mtx,annot=False,cmap=\"YlGnBu\")","5f0bc95a":"X.hist(figsize=(20,21))\nplt.show()","99423761":"\nf, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nf.suptitle('Time of transaction vs Amount by class')\nax1.scatter(credit_card[credit_card['Class']==1].Time, credit_card[credit_card['Class']==1].Amount)\nax1.set_title('Fraud')\nax2.scatter(credit_card[credit_card['Class']==0].Time, credit_card[credit_card['Class']==0].Amount)\nax2.set_title('Normal')\nplt.xlabel('Time (in Seconds)')\nplt.ylabel('Amount')\nplt.show()","dbb9b83b":"f, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nf.suptitle('Amount per transaction by class')\nbins = 50\nax1.hist(credit_card[credit_card['Class']==1].Amount, bins = bins)\nax1.set_title('Fraud')\nax2.hist(credit_card[credit_card['Class']==0].Amount, bins = bins)\nax2.set_title('Normal')\nplt.xlabel('Amount ($)')\nplt.ylabel('Number of Transactions')\nplt.xlim((0, 20000))\nplt.yscale('log')\nplt.show()","18735db8":"#modifying the dataset\ncredit_card_new = credit_card.drop(columns=['Time', 'V1', 'V2', 'V3','V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18','V20','V22', 'V23','V24', 'V25', 'V26', 'V27', 'V28', 'Amount'],axis=1)","fe38f9ff":"credit_card_new.sample(10)","b8ba9d1c":"credit_card_new[\"Class\"].value_counts()","6fb4668f":"y = credit_card_new.iloc[:,-1]\nX = credit_card_new.iloc[:,:-1]\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","b2d8d784":"\nkval = range(1, 6)\ninertias = []\nfor k in kval:\n    model = KMeans(n_clusters=k)\n    model.fit(X_train)\n    inertias.append(model.inertia_)\n    \nplt.plot(kval, inertias, '-o')\nplt.xlabel('number of clusters, k')\nplt.ylabel('inertia')\nplt.xticks(kval)\nplt.show()","4458d802":"model = KNeighborsClassifier(n_neighbors=4)\nk_labels = model.fit(X_train,y_train)","2e566e4c":"model.predict(X_test)","925ca4ab":"model.score(X_test,y_test)","0fe3e86c":"KNN provides 99.9% accuracy","711fa9d8":"## Knowing the dataset and Visualizing it","81ece1f1":"## KNN Classification","a93af035":"# Importing and Exploring the dataset","d0cc8d30":"Hi everyone... Hope all are doing good.\n\nLet's continue happy coding...\n\nHere I have just visualized the dataset and have applied a few ML techniques\n\nIf you like this work of mine please give ur support..."}}