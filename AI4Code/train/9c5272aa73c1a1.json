{"cell_type":{"d9b0110e":"code","0f8a623a":"code","f8f8e9ef":"code","915046e8":"code","d00c34de":"code","1fd1ad87":"code","84cff9f4":"code","73885f76":"code","9a71c349":"code","75418f46":"code","b231fef7":"code","85682706":"code","a3d7cdeb":"code","ebe24b9c":"code","06056425":"code","ac327c2c":"code","821af361":"code","b9774523":"code","bd48241d":"code","69542f63":"code","7e156d59":"code","9e435026":"code","783c3f95":"code","5ebadf1a":"code","38f9d6cd":"code","0e1a2976":"code","12d05cea":"code","11ec6652":"code","6e866ef9":"code","5ec9d56b":"code","3095a3a2":"code","fb013c59":"code","14e71fec":"code","abdafd16":"code","98b0c33e":"code","68644558":"code","632d60df":"code","a2b136d4":"code","2a9ebb41":"code","3d6e3807":"code","1d5fe5eb":"code","36ece597":"code","b4b0b17b":"code","202e57ae":"code","9abb015d":"code","a0dfed03":"markdown","0f91b350":"markdown","00893ca2":"markdown","4fc096d5":"markdown","3c3e61b1":"markdown","ca427774":"markdown","bcb62223":"markdown","9e763cb5":"markdown","0ec90b8b":"markdown","bd2a88a7":"markdown","d8aa48a8":"markdown","98d98a26":"markdown"},"source":{"d9b0110e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f8a623a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom pandas_profiling import ProfileReport\nfrom collections import OrderedDict\n%matplotlib inline","f8f8e9ef":"df=pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","915046e8":"ProfileReport(df,title=\"Netflix Exploratory Data Analysis\",explorative=True)","d00c34de":" ##Replaces the 4 NaN values in ratings column\nrating_replacements = {\n    5989: 'TV-PG',\n    6827: 'TV-14',\n    7312: 'TV-Y7',\n    7537: 'TV-14'\n}\n\nfor id, rate in rating_replacements.items():\n    df.iloc[id,8]=rate","1fd1ad87":"##Replaces the 3 NaN values in duration column\ndurationReplacement={\n    5541:'74 min',\n    5794:'84 min',\n    5813:'66 min'\n}\nfor i in durationReplacement.keys():\n    df.iloc[i,9]=durationReplacement[i]","84cff9f4":"typeDF=df.groupby('type').count()\ntypeDF.reset_index(inplace=True)\ntypeDF=typeDF.iloc[:,:2]\ntypeDF.rename(columns={'show_id':'Count'},inplace=True)\ndata=[go.Pie(values=typeDF['Count'],labels=typeDF['type'],textinfo='label+percent',pull=[0, 0.2])]\nlayout=go.Layout(title='Percentage of Movies and TV Shows available in Netflix')\nfig=go.Figure(data=data,layout=layout)\nfig.show()","73885f76":"countryDF=df.copy()\ncountryDF['country'].fillna('Others',inplace=True)\n\ncountryDict=OrderedDict()\nfor i in range(len(countryDF)):\n    for j in countryDF['country'][i].split(', '):\n        if j not in countryDict:\n            countryDict[j]=1\n        else:\n            countryDict[j]=countryDict[j]+1\n            \ncountryDF2=pd.DataFrame(countryDict,index=['Count']).transpose()\ncountryDF2.reset_index(inplace=True)\ncountryDF2.rename(columns={'index':'Country'},inplace=True)\ncountryDF2.drop(countryDF2[countryDF2['Country']=='Others'].index[0],inplace=True)","9a71c349":"countryDF2=countryDF2.sort_values('Count',ascending=False)[:10]\ndata=[go.Pie(values=countryDF2['Count'],labels=countryDF2['Country'],textinfo='label+percent',hole=0.1,pull=[0.2])]\nlayout=go.Layout(title='Top 10 Countries where Netflix content is released majorily')\nfig=go.Figure(data=data,layout=layout)\nfig.show()","75418f46":"listedInDict=OrderedDict()\nfor i in range(len(df)):\n    for j in df['listed_in'][i].split(', '):\n        if j not in listedInDict:\n            listedInDict[j]=1\n        else:\n            listedInDict[j]=listedInDict[j]+1","b231fef7":"listedInDF=pd.DataFrame(listedInDict,index=['Count']).transpose()\nlistedInDF.reset_index(inplace=True)\nlistedInDF.rename(columns={'index':'Category'},inplace=True)\nlistedInDF=listedInDF.sort_values(by='Count',ascending=False)[:10]\ndata=[go.Pie(values=listedInDF['Count'],labels=listedInDF['Category'],textinfo='label+percent',pull=[0.2],hole=0.2)]\nlayout=go.Layout(title=\"Top 10 Categories among Netflix Shows\/Movies\")\nfig=go.Figure(data=data,layout=layout)\nfig.show()","85682706":"yearDF=df.copy()\nfor i in df[df['date_added'].isnull()].index:\n    yearDF.drop(i,inplace=True)\nyearDF.reset_index(inplace=True)\nyearDF.drop('index',axis=1,inplace=True)","a3d7cdeb":"year=[]\nfor i in range(len(yearDF)):\n    year.append(int(yearDF['date_added'][i][yearDF['date_added'][i].index(',')+2:]))\nyearDF['date_added_year']=year","ebe24b9c":"##  Another way to extract month, year from date_added\n\n# df[\"date_added\"] = pd.to_datetime(df['date_added'])\n\n# df['month_added']=df['date_added'].dt.month\n# df['month_name_added']=df['date_added'].dt.month_name()\n# df['year_added'] = df['date_added'].dt.year","06056425":"yearDFGroupby=yearDF.groupby(['date_added_year','type'],as_index=False).size()\nyearDFGroupby=yearDFGroupby[6:]  ##Considering only after the year 2013. So selected only from 6th row\nyearDFGroupby.reset_index(inplace=True)\nyearDFGroupby.drop('index',axis=1,inplace=True)","ac327c2c":"data=[go.Scatter(x=yearDFGroupby[yearDFGroupby['type']=='Movie']['date_added_year'],\n                 y=yearDFGroupby[yearDFGroupby['type']=='Movie']['size'],\n                 name='Movies',\n                fill='tonexty'),\n      \n     go.Scatter(x=yearDFGroupby[yearDFGroupby['type']=='TV Show']['date_added_year'],\n                y=yearDFGroupby[yearDFGroupby['type']=='TV Show']['size'],\n                name='TV Shows',\n                fill='tozeroy')]\n\nlayout=go.Layout(title='Growth in the number of Movies and Shows released in Netflix across years',xaxis=dict(title='Year'))\nfig=go.Figure(data=data,layout=layout)\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=3,\n        tickmode='linear',\n        dtick=1\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    plot_bgcolor='white'\n)\nfig.show()","821af361":"yearDF['country'].fillna('Others',inplace=True)\n\ncountryYearDict=OrderedDict()\nfor i in range(len(yearDF['date_added_year'])):\n    for j in yearDF['country'][i].split(', '):\n        if j not in countryYearDict and j!=' ':\n            countryYearDict[j]={'2008':0,'2009':0,'2010':0,'2011':0,'2012':0,'2013':0,'2014':0,'2015':0,'2016':0,\n                                  '2017':0,'2018':0,'2019':0,'2020':0,'2021':0}\n            \nfor a in range(len(yearDF['date_added_year'])):\n    for b in yearDF['country'][a].split(', '):\n        if b in countryYearDict:\n            countryYearDict[b][str(yearDF['date_added_year'][a])]=countryYearDict[b][str(yearDF['date_added_year'][a])]+1","b9774523":"countryYearDF=pd.DataFrame(countryYearDict)\ncountryYearDF=countryYearDF[6:]\ncountryYearDF.reset_index(inplace=True)\ncountryYearDF.rename(columns={'index':'Year'},inplace=True)","bd48241d":"data=[go.Scatter(x=countryYearDF['Year'],y=countryYearDF[i],mode='lines+markers',name=i)for i in countryDF2['Country']]\nlayout=go.Layout(title=\"Growth in the No of movies\/TV Shows released in the top countries across years\")\nfig=go.Figure(data=data,layout=layout)\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=3,\n        tickmode='linear',\n        dtick=1\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    plot_bgcolor='white'\n)\nfig.show()","69542f63":"categoryYearDict=OrderedDict()\nfor i in range(len(yearDF)):\n    for j in yearDF['listed_in'][i].split(', '):\n        if j not in categoryYearDict and j!=' ':\n            categoryYearDict[j]={'2008':0,'2009':0,'2010':0,'2011':0,'2012':0,'2013':0,'2014':0,'2015':0,'2016':0,\n                                  '2017':0,'2018':0,'2019':0,'2020':0,'2021':0}\n            \nfor a in range(len(yearDF)):\n    for b in yearDF['listed_in'][a].split(', '):\n        if b in categoryYearDict:\n            categoryYearDict[b][str(yearDF['date_added_year'][a])]=categoryYearDict[b][str(yearDF['date_added_year'][a])]+1","7e156d59":"categoryYearDF=pd.DataFrame(categoryYearDict)\ncategoryYearDF=categoryYearDF[6:]\ncategoryYearDF.reset_index(inplace=True)\ncategoryYearDF.rename(columns={'index':'Year'},inplace=True)","9e435026":"data=[go.Scatter(x=categoryYearDF['Year'],y=categoryYearDF[i],mode='lines+markers',name=i)for i in listedInDF['Category']]\nlayout=go.Layout(title=\"Growth of content in terms of categories\/genre\")\nfig=go.Figure(data=data,layout=layout)\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=3,\n        tickmode='linear',\n        dtick=1\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    plot_bgcolor='white'\n)\nfig.show()","783c3f95":"ratingDF=pd.DataFrame(df['rating'].value_counts()[:10])\nratingDF.reset_index(inplace=True)\nratingDF.rename(columns={'rating':'Count','index':'Rating'},inplace=True)","5ebadf1a":"data=[go.Pie(values=ratingDF['Count'],labels=ratingDF['Rating'],textinfo='label+percent',hole=0.2)]\nlayout=go.Layout(title=\"Classification of Movies\/TV Shows based on their PG Ratings\")\nfig=go.Figure(data=data,layout=layout)\nfig.show()","38f9d6cd":"ageCountDict=OrderedDict()\nratingsAges = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-MA ': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}\n\nfor i in df['rating']:\n    if i not in ['74 min', '84 min', '66 min']:\n        age=ratingsAges[i]\n        if age not in ageCountDict:\n            ageCountDict[age]=1\n        else:\n            ageCountDict[age]=ageCountDict[age]+1\n\nageCountDF=pd.DataFrame(ageCountDict,index=[0]).transpose()\nageCountDF.reset_index(inplace=True)\nageCountDF.rename(columns={0:'Count','index':'Age'},inplace=True)","0e1a2976":"data=[go.Pie(labels=ageCountDF['Age'],values=ageCountDF['Count'],textinfo='label+percent',pull=[0,0.2])]\nlayout=go.Layout(title=\"Netflix content classification based on the audience it caters to\")\nfig=go.Figure(data=data,layout=layout)\nfig.show()","12d05cea":"ageYearDict=OrderedDict()\nfor i in ageCountDict.keys():\n    ageYearDict[i]={'2008':0,'2009':0,'2010':0,'2011':0,'2012':0,'2013':0,'2014':0,'2015':0,'2016':0,\n                                  '2017':0,'2018':0,'2019':0,'2020':0,'2021':0}\nfor i in range(len(yearDF)):\n    a=yearDF['rating'][i]\n    if a not in ['74 min', '84 min', '66 min']:\n        age=ratingsAges[a]\n        year=str(yearDF['date_added_year'][i])\n        if age in ageYearDict:\n            ageYearDict[age][year]=ageYearDict[age][year]+1","11ec6652":"ageYearDF=pd.DataFrame(ageYearDict)[6:]\nageYearDF.reset_index(inplace=True)\nageYearDF.rename(columns={'index':'Year'},inplace=True)","6e866ef9":"data=[go.Bar(x=ageYearDF['Year'],y=ageYearDF[i],name=i)for i in ageYearDF.columns[1:]]\nlayout=go.Layout(title=\"Growth in content across years with respect to the age of viewers\")\nfig=go.Figure(data=data,layout=layout)\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=3,\n        tickmode='linear',\n        dtick=1\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=True,\n        showticklabels=False,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=3,\n    ),\n    plot_bgcolor='white'\n)\nfig.show()","5ec9d56b":"ageCategories=OrderedDict()\nfor i in range(len(yearDF)):\n    for j in yearDF.loc[i]['country'].split(', '):\n        if j not in yearDF and j!='':\n            ageCategories[j]={'Kids':0,'Older Kids':0,'Teens':0,'Adults':0}\n        \nfor i in range(len(yearDF)):\n    for j in yearDF.loc[i]['country'].split(', '):\n        if j!='':\n            rating=yearDF.loc[i]['rating']\n            if rating in ['74 min', '84 min', '66 min']:\n                ageCategories[j]['Adults']=ageCategories[j]['Adults']+1\n            else:\n                ageCategories[j][ratingsAges[rating]]=ageCategories[j][ratingsAges[rating]]+1","3095a3a2":"ageCountryDF=pd.DataFrame(ageCategories)\n##The below statement turns values into percentages For eg : a=10, b=20, Then it converts a=33% , b=67%\nageCountryDF=round(ageCountryDF\/ageCountryDF[ageCountryDF.columns].sum()*100,2)","fb013c59":"fig, ax = plt.subplots(1, 1, figsize=(12, 12))\n\ncountries=['United States', 'India', 'United Kingdom', 'Canada',\n       'France', 'Japan', 'Spain', 'South Korea', 'Germany','Turkey', 'Mexico']\n\nages=['Kids','Older Kids','Teens','Adults']\n\nimg=sns.heatmap(ageCountryDF.loc[ages,countries],square=True,linewidth=3,cbar=False,\n            annot=True,cmap='Reds',ax=ax,vmax=50,vmin=1,annot_kws={\"fontsize\":10})\n\nfor txt in img.texts:\n    txt.set_text(txt.get_text()+' %')\n    \nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif', rotation = 0, fontsize=12,fontweight='medium')\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='sans-serif', rotation=90, fontsize=12,fontweight='medium')\n\nax.set_ylabel('')    \nax.set_xlabel('')\nax.tick_params(axis=u'both', which=u'both',length=0)\nax.set_title('Proportion of Target Audience for Netflix in the top countries',\n                               fontfamily='sans-serif',fontsize=15,fontweight='bold')\nplt.tight_layout()\nplt.show()\n#ageCountryDF[ageCountryDF['Country'].isin(countryDF2['Country'])]","14e71fec":"##Converts for eg 90 minutes as 90 and 2 seasons as 2 and adds to a new column named durationActual\ndurationActual=[]\nfor i in range(len(yearDF)):\n    time=int(yearDF['duration'][i].split(' ')[0])\n    durationActual.append(time)\nyearDF['durationActual']=durationActual","abdafd16":"moviesDurationDict={'2013':0,'2014':0,'2015':0,'2016':0,'2017':0,'2018':0,'2019':0,'2020':0,'2021':0}\n\nfor i in moviesDurationDict.keys():\n    tempDF=yearDF[(yearDF['date_added_year']==int(i)) & (yearDF['type']=='Movie')]\n    moviesDurationDict[i]=int(tempDF['durationActual'].mean())\n    \nmoviesDurationDF=pd.DataFrame(moviesDurationDict,index=[0]).transpose()\nmoviesDurationDF.reset_index(inplace=True)\nmoviesDurationDF.rename(columns={'index':'Year',0:'Duration(In Minutes)'},inplace=True)","98b0c33e":"data=[go.Bar(x=moviesDurationDF['Year'],y=moviesDurationDF['Duration(In Minutes)'],text=moviesDurationDF['Duration(In Minutes)'])]\nlayout=go.Layout(title='Avg Runtime of Movies across years',plot_bgcolor='white',\n                xaxis=dict(\n        showline=True,\n        showgrid=False,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=3,\n        tickmode='linear',\n        dtick=1\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=True,\n        showticklabels=False,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=3,\n        title='Minutes'\n    ),)\nfig=go.Figure(data=data,layout=layout)\nfig.show()","68644558":"# seasonsDurationDict={'2013':0,'2014':0,'2015':0,'2016':0,'2017':0,'2018':0,'2019':0,'2020':0,'2021':0}\n\n# for i in moviesDurationDict.keys():\n#     tempDF=yearDF[(yearDF['date_added_year']==int(i)) & (yearDF['type']=='TV Show')]\n#     seasonsDurationDict[i]=int(tempDF['durationActual'].mean())\n    \n# seasonsDurationDF=pd.DataFrame(seasonsDurationDict,index=[0]).transpose()\n# seasonsDurationDF.reset_index(inplace=True)\n# seasonsDurationDF.rename(columns={'index':'Year',0:'No of Seasons'},inplace=True)","632d60df":"# This chart is for plotting the average seasons for a tv show in netflix\n# data=[go.Bar(x=seasonsDurationDF['Year'],y=seasonsDurationDF['No of Seasons'],text=seasonsDurationDF['No of Seasons'])]\n# layout=go.Layout(title='Avg No of seasons for a TV Show across years',plot_bgcolor='white',\n#                 xaxis=dict(\n#         showline=True,\n#         showgrid=False,\n#         linecolor='rgb(204, 204, 204)',\n#         linewidth=3,\n#         tickmode='linear',\n#         dtick=1\n#     ),\n#     yaxis=dict(\n#         showgrid=False,\n#         zeroline=False,\n#         showline=True,\n#         showticklabels=False,\n#         linecolor='rgb(204, 204, 204)',\n#         linewidth=3,\n#         title='No of seasons'\n#     ),)\n# fig=go.Figure(data=data,layout=layout)\n# fig.show()","a2b136d4":"countryCategoryDict=OrderedDict()\nfor i in countryDF2['Country']:\n    if i!= '':\n        countryCategoryDict[i]={key:0 for key in listedInDict}\n        for j in countryDF[countryDF['country'].str.contains(i)].index:\n            categories=countryDF['listed_in'].loc[j].split(', ')\n            for k in categories:\n                countryCategoryDict[i][k]=countryCategoryDict[i][k]+1","2a9ebb41":"fig=plt.figure(figsize=(25,23))\ngs=fig.add_gridspec(3,3)   \ncountries=list(countryCategoryDict.keys())\n\nn=0\nfor u in range(3):\n    for v in range(3):\n        ax=fig.add_subplot(gs[u,v])\n        for s in ['top', 'left', 'right', 'bottom']:\n            ax.spines[s].set_visible(False)\n        ax.set(xticks=[],yticks=[])\n        ax.text(0.4,0.8,countries[n],fontsize=23,fontweight='bold',fontfamily='serif',color='red')\n        items=list(list(countryCategoryDict.values())[n].values())\n        keys=list(list(countryCategoryDict.values())[n].keys())\n        yPos=0.7\n        for i in sorted(list(list(countryCategoryDict.values())[n].values()),reverse=True)[:5]:\n            index=items.index(i)\n            txt=keys[index]+\" - \"+str(i)+\" Movies & Shows\"\n            ax.text(0,yPos,txt,fontsize=15,fontweight='bold',fontfamily='serif', color='black')\n            yPos=yPos-0.1\n        if n==1:\n            ax.text(-0.4,1,'Top 5 Movie Genres available for Top Countries in Netflix',fontweight='bold',fontsize=24,color='red')\n        n=n+1","3d6e3807":"countryType=OrderedDict()\n\nfor country in countryDF2['Country']:\n    countryType[country]={'Movie':0,'TV Show':0}\n    \nfor i in range(len(countryDF)):\n    for c in countryDF['country'][i].split(', '):\n        if c in countryDF2['Country'].values:\n            type=countryDF['type'][i]\n            countryType[c][type]=countryType[c][type]+1","1d5fe5eb":"countryTypeDF=pd.DataFrame(countryType).transpose()\ncountryTypeDF.reset_index(inplace=True)\ncountryTypeDF.rename(columns={'index':'Country'},inplace=True)","36ece597":"data=[go.Bar(y=countryTypeDF['Country'],x=countryTypeDF['TV Show'],name='TV Shows',orientation='h'),\n     go.Bar(y=countryTypeDF['Country'],x=countryTypeDF['Movie'],name='Movie',orientation='h')]\n\nlayout=go.Layout(title='Proportion of Movies and TV Shows in top countries',barmode='stack'\n                ,plot_bgcolor='white',\n                xaxis=dict(\n        showline=True,\n        showgrid=False,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=3,\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=True,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=3\n    ),)\n\nfig=go.Figure(data=data,layout=layout)\nfig.show()","b4b0b17b":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df[df['type']=='Movie']['listed_in'])\n\nplt.rcParams['figure.figsize'] = (13,13)\nwordcloud = WordCloud(background_color = 'white', width = 1000,  height = 1000, max_words = 100).generate(text)\nplt.imshow(wordcloud)\nplt.title('Top Genres',fontsize=30,fontweight='bold')\nplt.axis('off')\nplt.show()","202e57ae":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df['director'].dropna(axis=0))\n\nplt.rcParams['figure.figsize'] = (13,13)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 500).generate(text)\nplt.imshow(wordcloud)\nplt.title('Top Creators',fontsize=30,fontweight='bold')\nplt.axis('off')\nplt.show()","9abb015d":"##Extract year from date_added column. Plot the increase in the type of content, increase in country wise content,listed_in category","a0dfed03":"> **In the top countries TV Shows and Movies are majorly focussed for Adults. But in India, South Korea, Japan 'Teen' content is more prevalent compared to 'Adult' content**","0f91b350":"> **Netflix mainly focuses on Adult content with kids content taking the backseat**","00893ca2":"> **International content is prevalent in all countries except USA**\n\n> **South Korean people enjoy local TV Shows followed by romantic TV Shows, but TV Shows are enjoyed more than movies**\n\n> **Documentaries have a good viewership share in France and UK**\n\n> **Dramas and Comedies ae enjoyed universally**","4fc096d5":"> **Netflix is starting to develop content for kids and the growth rate for adult content is also brisk.**","3c3e61b1":"> **TV Shows are more popular comparative to movies in Japan and South Korea whereas Movies are more popular comparative to TV Shows in India**","ca427774":"> **United states is the largest market for Netflix followed by India, Uk ans so on. Netflix has presence majorily in North America, Asia and Europe.**","bcb62223":"> **Movies and TV Shows released in USA is growing strongly followed by India. There has been a growth in releases even during the pandemic for some countries like France, Canada and Japan.**","9e763cb5":"> **Categories showing increasing growth(Before the pandemic. Because after the pandemic every category has shown a downfall) are Children&Family movies, TV Dramas and Action&Adventure movies. Internationa movies, comedies and dramas have a good growth rate**","0ec90b8b":"> **From this chart it is evident that Netflix is predominantly made up of movies**","bd2a88a7":"> **From the above chart it is clear that most of the movies available in Netflix have a runtime of less than 2 hrs.**","d8aa48a8":"> **International shows and movies have a good presence in Netflix content followed by drama and comedies. All these categories posses an universal appeal. Interestingly Documentaries also occupy a good share in Netflix content.**","98d98a26":"> **Growth in the number of movies and TV Shows released has increased at a good CAGR. But there has been a fall in 2020 and 2021. It may be attributed to the COVID-19 Pandemic**"}}