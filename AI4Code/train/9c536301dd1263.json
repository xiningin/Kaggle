{"cell_type":{"94e0c385":"code","b5eb42bf":"code","302b34f5":"code","3b9a81d4":"code","8e19b2c2":"code","918e93ac":"code","53a4eb70":"code","925e9f46":"code","2cd7819e":"code","38047c83":"code","3b6ab698":"code","97c512a4":"code","48485db6":"code","58dff6fd":"code","f1c433aa":"code","c8e02195":"code","adf3d12b":"code","536ba87e":"code","cceb35bd":"code","9c72afeb":"code","14eef57d":"code","ebb56e29":"code","bf677e8b":"code","79300bae":"code","b4bc5884":"code","7c7674b0":"code","fbe96882":"code","859df2f7":"code","bc415efa":"code","840fee17":"code","add2b2ab":"code","bf946ebb":"code","e62b1e3b":"code","33676d52":"code","a01e755e":"code","89422d3b":"code","f4368967":"code","3b3bbecc":"code","5ac1c317":"code","f57f512e":"code","2812f0d2":"code","0dc4f4d3":"code","c690c8c6":"code","84fc2e6d":"code","87b1dcef":"code","2cc1d001":"code","4c12d5e9":"code","e19a1871":"code","7091aa59":"code","ed608168":"code","3cf184aa":"code","60ef3171":"code","ebc0ba51":"code","2cb99d66":"code","0343fc7c":"code","3d5da6d1":"code","c4b171c4":"code","e2408ade":"markdown","53e0baab":"markdown","c5388516":"markdown","3ec98b31":"markdown","5850e09f":"markdown","2175f767":"markdown","a99e3bf1":"markdown","afda5b5d":"markdown","084a1d26":"markdown","42675866":"markdown","2c5204ad":"markdown","1973a654":"markdown","a9f90a73":"markdown","713eb315":"markdown","c041e9ae":"markdown","5f1c0172":"markdown","eeb990ec":"markdown","6776db4d":"markdown","1170104f":"markdown","cdf36f99":"markdown","028bf783":"markdown","4be924b9":"markdown","3458a1a4":"markdown","e29cfbde":"markdown","5a9824fe":"markdown","18dbd577":"markdown","28b9505a":"markdown","7419e372":"markdown","aa78ee00":"markdown","05289cd4":"markdown","8dabccf4":"markdown","c13a0cac":"markdown","8d746dd0":"markdown","84d93aac":"markdown","7c12136b":"markdown","0cb9b9d5":"markdown","df4c7c43":"markdown","b59db3f1":"markdown","85bf40a4":"markdown","42a971cf":"markdown","03e5fc53":"markdown","62cf528b":"markdown","795a0ef8":"markdown","0b561f1d":"markdown","663d8042":"markdown","7dacb230":"markdown","59e0c492":"markdown","f7c72cf5":"markdown","e9273a7c":"markdown","056641c4":"markdown","ac38088b":"markdown","d62cb245":"markdown","5282a85e":"markdown","d33d5502":"markdown","ca18a4b1":"markdown","07f3b686":"markdown","fbc3dba0":"markdown","003f926e":"markdown","01520bc2":"markdown","6b284597":"markdown","d79ec97b":"markdown","9d31bb59":"markdown","54439e4e":"markdown","aaa7c0ea":"markdown","20b0dee1":"markdown","3dc90ebf":"markdown"},"source":{"94e0c385":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5eb42bf":"import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option(\"display.max_columns\", 150)\npd.set_option('display.max_rows', 999)\npd.set_option('display.max_colwidth', None)","302b34f5":"data = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv', dtype=object, low_memory=False)\ndata_all = data.iloc[1:,:]","3b9a81d4":"print(\"There are \\033[1m{} countries\\033[0m took part in this survey\".format(len(data_all['Q3'].value_counts().to_list())))","8e19b2c2":"fig = px.treemap(data_all, path=['Q3'], color='Q3')\nfig.update_layout(margin = dict(t=60, l=15, r=15, b=15),\n                  title_text=\"<b>Countries Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=20, color='#000000'))\nfig.show()","918e93ac":"data_ukraine = data[data['Q3']=='Ukraine']\nquestions = data.iloc[0, :]\nprint(\"Ukrainian Respondents:\", data_ukraine.shape[0])","53a4eb70":"# Replace some countries names to make the plot ticks more manageable\ndata['Q3'].replace({\n    'United States of America': 'USA',\n    'United Kingdom of Great Britain and Northern Ireland': 'UK',\n    'Iran, Islamic Republic of...': 'Iran'\n}, inplace=True)\n\n# Calculate number of respondents per Country in 2021\ncountry_cnt_2021 = data['Q3'].value_counts()\n\n# Plot figure object\nfig, ax = plt.subplots(1, 1, figsize=(20, 10), dpi=200)\n\n# Bar plot \nbar_colors = ['#0077b6'] * 28 + ['#EEEF20'] + ['#0077b6'] * 2 \nax.bar(country_cnt_2021.index[:31],\n        country_cnt_2021[:31],\n        color=bar_colors,\n        edgecolor='white',\n        width=0.9);\n\n# Set title\nax.set_title('Number of Respondents per Country',\n             fontsize=20, fontfamily='serif', fontweight='bold', color='black')\n\n\n# Axes xticks rotation\nax.set_xticklabels(labels=country_cnt_2021.index[:31], rotation=65, fontsize=17)\n\n# Remove yticks\nax.tick_params(left=False, bottom=False)\nax.set_yticklabels([])\n\n# Remove spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Annotate bars\nfor i, bar in enumerate(ax.patches):\n    ax.annotate(text=bar.get_height(),\n                xy=(bar.get_x() + bar.get_width() \/ 2, bar.get_height() + 300),\n                ha='center',\n                va='center',\n                rotation=50,\n                size=17 if i != 28 else 25)","925e9f46":"# select responses relative to Ukraine\ndata_ukraine = data[data['Q3']=='Ukraine']\nquestions = data.iloc[0, :]","2cd7819e":"data_ukraine['Q2'].value_counts()","38047c83":"gender = (\n    data_ukraine['Q2']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Gender', 'Q2':'Count'})\n    .replace(['Man','Woman'], ['Male', 'Female']) \n    .groupby('Gender')\n    .sum()\n    .reset_index()    \n          )   \n\nfig = go.Figure(data=[go.Pie(labels=gender['Gender'], \n                             values=gender['Count'])])\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=['#ffff3f', '#0077b6'], line=dict(color='white', width=5)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"<b>Gender Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family='serif', size=20, color='#000000'))\n\nfig.show()","3b6ab698":"data_ukraine['Q4'].replace({\n    'Some college\/university study without earning a bachelor\u2019s degree': 'No bachelor\u2019s degree',\n    'No formal education past high school': 'High school'\n}, inplace=True)\n\neducation = (\n    data_ukraine['Q4']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Education', 'Q4':'Count'})\n          )  \n\neducation['percent'] = ((education['Count'] \/ education['Count'].sum())*100).round(2).astype(str) + '%'\ncolors = ['#014f86', '#2a6f97', '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\n\nfig = go.Figure(go.Bar(\n            x=education['Count'],\n            y=education['Education'],\n            text=education['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{x}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Education Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","97c512a4":"fig = make_subplots(rows=1, cols=2, subplot_titles=(\"<b>Men<\/b>\", \"<b>Women<\/b>\"), shared_yaxes=True)\n\neducation_man = (\n    data_ukraine[data_ukraine['Q2']=='Man']['Q4']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Education', 'Q4':'Count'})\n          )  \n\neducation_man['percent'] = ((education_man['Count'] \/ education_man['Count'].sum())*100).round(2).astype(str) + '%'\ncolors_education_man = ['#014f86', '#2a6f97', '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\nfig.add_trace(\n    go.Bar(\n            x=education_man['Education'],\n            y=education_man['Count'],\n            text=education_man['percent'],\n            marker_color=colors_education_man),\n    row=1, col=1\n)\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra>',\n                  textfont_size=17)\n\n\neducation_woman = (\n    data_ukraine[data_ukraine['Q2']=='Woman']['Q4']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Education', 'Q4':'Count'})\n          )   \n\neducation_woman['percent'] = ((education_woman['Count'] \/ education_woman['Count'].sum())*100).round(2).astype(str) + '%'\ncolors_education_woman = ['#FFA200', '#FFAA00', '#FFB700','#FFC300', '#FFD000', '#FFDD00', '#FFEA00']\n\nfig.add_trace(\n   go.Bar(\n            x=education_woman['Education'],\n            y=education_woman['Count'],\n            text=education_woman['percent'],\n            marker_color=colors_education_woman),\n    row=1, col=2)\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Education Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()\n","48485db6":"fig = make_subplots(rows=1, cols=2, subplot_titles=(\"<b>Men<\/b>\", \"<b>Women<\/b>\"), shared_yaxes=True)\n\nage_man = (\n    data_ukraine[data_ukraine['Q2']=='Man']['Q1']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Age', 'Q1':'Count'})\n          )  \n\nage_man['percent'] = ((age_man['Count'] \/ age_man['Count'].sum())*100).round(2).astype(str) + '%'\ncolors_man = ['#012a4a','#013a63','#01497c','#014f86', '#2a6f97', '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\n\nfig.add_trace(\n    go.Bar(\n            x=age_man['Age'],\n            y=age_man['Count'],\n            text=age_man['percent'],\n            marker_color=colors_man),\n    row=1, col=1\n)\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra>',\n                  textfont_size=17)\n\n\nage_woman = (\n    data_ukraine[data_ukraine['Q2']=='Woman']['Q1']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Age', 'Q1':'Count'})\n          )  \n\nage_woman['percent'] = ((age_woman['Count'] \/ age_woman['Count'].sum())*100).round(2).astype(str) + '%'\ncolors_woman = ['#FF7B00','#FF8800','#FF9500','#FFA200', '#FFAA00', '#FFB700','#FFC300', '#FFD000', '#FFDD00', '#FFEA00']\n\nfig.add_trace(\n   go.Bar(\n            x=age_woman['Age'],\n            y=age_woman['Count'],\n            text=age_woman['percent'],\n            marker_color=colors_woman),\n    row=1, col=2)\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Age Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()\n","58dff6fd":"current_role = (\n    data_ukraine['Q5']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Current role', 'Q5':'Count'})\n          )  \n\ncurrent_role['percent'] = ((current_role['Count'] \/ current_role['Count'].sum())*100).round(2).astype(str) + '%'\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\n\nfig = go.Figure(go.Bar(\n            x=current_role['Count'],\n            y=current_role['Current role'],\n            text=current_role['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{x}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Current role<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","f1c433aa":"fig = px.sunburst(data_ukraine, path=['Q2', 'Q4', 'Q5'], color='Q2',color_discrete_map={'Man':'#0077b6', 'Woman':'#ffff3f'})\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Distribution of roles by gender and education<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","c8e02195":"experience = (\n    data_ukraine['Q6']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Experience', 'Q6':'Count'})\n          )   \n\nexperience['percent'] = ((experience['Count'] \/ experience['Count'].sum())*100).round(2).astype(str) + '%'\ncolors_experience = ['#014f86', '#2a6f97', '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\nfig = go.Figure(\n   go.Bar(\n            x=experience['Experience'],\n            y=experience['Count'],\n            text=experience['percent'],\n            marker_color=colors_experience))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n                  \n    \nexperience_woman = (\n    data_ukraine[data_ukraine['Q2']=='Woman']['Q6']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Experience', 'Q6':'Count'})\n          )  \n\nexperience_woman['percent'] = ((experience_woman['Count'] \/ experience_woman['Count'].sum())*100).round(2).astype(str) + '%'\ncolors_woman = ['#FF7B00','#FF8800','#FF9500','#FFA200', '#FFAA00', '#FFB700','#FFC300', '#FFD000', '#FFDD00', '#FFEA00']\n\nfig.add_trace(\n   go.Bar(\n            x=experience_woman['Experience'],\n            y=experience_woman['Count'],\n            text=experience_woman['percent'],\n            marker_color=colors_woman))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Experience Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()\n","adf3d12b":"data_ukraine.iloc[:,7:20].describe()","536ba87e":"data_ukraine_q7 = (data_ukraine.iloc[:,7:20].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Languages', 'count':'Count'})\n          ) \ndata_ukraine_q7['Languages'].replace({\n    'Q7_Part_1': 'Python',\n    'Q7_Part_2': 'R',\n    'Q7_Part_3': 'SQL',\n    'Q7_Part_4': 'C',\n    'Q7_Part_5': 'C++',\n    'Q7_Part_6': 'Java',\n    'Q7_Part_7': 'Javascript',\n    'Q7_Part_8': 'Julia',\n    'Q7_Part_9': 'Swift',\n    'Q7_Part_10': 'Bash',\n    'Q7_Part_11': 'MATLAB',\n    'Q7_Part_12': 'None',\n    'Q7_OTHER': 'Other'\n}, inplace=True)\n\nfig = go.Figure(data=[go.Pie(labels=data_ukraine_q7['Languages'], \n                             values=data_ukraine_q7['Count'])])\n\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='white', width=2)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"<b>Languages Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family='serif', size=20, color='#000000'))\n\nfig.show()","cceb35bd":"language_recomended = (data_ukraine['Q8'].value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Languages', 'Q8':'Count'})\n          ) \n\nfig = go.Figure(data=[go.Pie(labels=language_recomended['Languages'], \n                             values=language_recomended['Count'])])\n\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='white', width=2)))\n\nfig.update_layout(showlegend=False,\n#                   title_text=\"<b>Recomended Languages Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family='serif', size=20, color='#000000'))\n\nfig.show()","9c72afeb":"data_ukraine.iloc[:,21:34].describe()","14eef57d":"data_ukraine_q9 = (data_ukraine.iloc[:,21:34].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Tools', 'count':'Count'})\n          ) \ndata_ukraine_q9['Tools'].replace({\n    'Q9_Part_1': 'Jupyter (JupyterLab, Jupyter Notebooks, etc)',\n    'Q9_Part_2': 'RStudio',\n    'Q9_Part_3': 'Visual Studio\t',\n    'Q9_Part_4': 'Visual Studio Code',\n    'Q9_Part_5': 'PyCharm',\n    'Q9_Part_6': 'Spyder',\n    'Q9_Part_7': 'Notepad++',\n    'Q9_Part_8': 'Sublime Text',\n    'Q9_Part_9': 'Vim \/ Emacs',\n    'Q9_Part_10': 'MATLAB',\n    'Q9_Part_11': 'Jupyter Notebook\t',\n    'Q9_Part_12': 'None',\n    'Q9_OTHER': 'Other'\n}, inplace=True)\n\ndata_ukraine_q9['percent'] = [((data_ukraine_q9['Count'] \/ data_ukraine_q9['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(13) ]\ndata_ukraine_q9.sort_values(['Count'], ascending=False, inplace=True)\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\nfig = go.Figure(\n   go.Bar(\n            x=data_ukraine_q9['Tools'],\n            y=data_ukraine_q9['Count'],\n            text=data_ukraine_q9['percent'],\n            marker_color=colors))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=40),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Most popular tools<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","ebb56e29":"data_ukraine[\"Q11\"].fillna(\"None\", inplace=True)\ndata_ukraine['Q11'].replace({\n    'A laptop': 'Laptop',\n    'A personal computer \/ desktop': 'Desktop',\n    'A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)': 'Cloud Computing',\n    'A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)': 'DL workstation',\n    'None': 'Prefer not to answer'\n}, inplace=True)\n\n\nfig = px.sunburst(data_ukraine, path=['Q5', 'Q11'], color='Q5')\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Types of computing platform<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","bf677e8b":"data_ukraine_q12 = (data_ukraine.iloc[:,52:58].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'HW', 'count':'Count'})\n          )\n\ndata_ukraine_q12['HW'].replace({\n    'Q12_Part_1': 'NVIDIA GPUs',\n    'Q12_Part_2': 'Google Cloud TPUs',\n    'Q12_Part_3': 'AWS Trainium Chips',\n    'Q12_Part_4': 'AWS Inferentia Chips',\n    'Q12_Part_5': 'None',\n    'Q12_OTHER': 'Other'\n}, inplace=True)\n\ndata_ukraine_q12['percent'] = [((data_ukraine_q12['Count'] \/ data_ukraine_q12['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(6)]\ndata_ukraine_q12.sort_values(['Count'], ascending=False, inplace=True)\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\nfig = go.Figure(\n   go.Bar(\n            x=data_ukraine_q12['HW'],\n            y=data_ukraine_q12['Count'],\n            text=data_ukraine_q12['percent'],\n            marker_color=colors))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=40),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Specialized hardware<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","79300bae":"tpu_usage = (data_ukraine['Q13'].value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'tpu', 'Q13':'Count'})\n          ) \n\nfig = go.Figure(data=[go.Pie(labels=tpu_usage['tpu'], \n                             values=tpu_usage['Count'])])\n\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='white', width=2)))\n\nfig.update_layout(showlegend=False,\n                  margin=dict(pad=120),\n                  title_text=\"<b>TPU usage<\/b>\",\n                  title_x=0.55,\n                  font=dict(family='serif', size=20, color='#000000'))\n\nfig.show()","b4bc5884":"data_ukraine[\"Q15\"].fillna(\"None\", inplace=True)\ndata_ukraine['Q15'].replace({\n    'None': 'Prefer not to answer'\n}, inplace=True)\n\nfig = make_subplots(rows=1, cols=2, subplot_titles=(\"<b>Men<\/b>\", \"<b>Women<\/b>\"), shared_yaxes=True)\n\nexperience_man = (\n    data_ukraine[data_ukraine['Q2']=='Man']['Q15']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Experience', 'Q15':'Count'})\n          )  \n\nexperience_man['percent'] = ((experience_man['Count'] \/ experience_man['Count'].sum())*100).round(2).astype(str) + '%'\ncolors_man = ['#012a4a','#013a63','#01497c','#014f86', '#2a6f97', '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\n\nfig.add_trace(\n    go.Bar(\n            x=experience_man['Experience'],\n            y=experience_man['Count'],\n            text=experience_man['percent'],\n            marker_color=colors_man),\n    row=1, col=1\n)\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra>',\n                  textfont_size=17)\n\n\nexperience_woman = (\n    data_ukraine[data_ukraine['Q2']=='Woman']['Q15']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Experience', 'Q15':'Count'})\n          )  \n\nexperience_woman['percent'] = ((experience_woman['Count'] \/ experience_woman['Count'].sum())*100).round(2).astype(str) + '%'\ncolors_woman = ['#FF7B00','#FF8800','#FF9500','#FFA200', '#FFAA00', '#FFB700','#FFC300', '#FFD000', '#FFDD00', '#FFEA00']\n\nfig.add_trace(\n   go.Bar(\n            x=experience_woman['Experience'],\n            y=experience_woman['Count'],\n            text=experience_woman['percent'],\n            marker_color=colors_woman),\n    row=1, col=2)\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Experience Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()\n","7c7674b0":"fig = px.sunburst(data_ukraine, path=['Q2','Q5', 'Q15'], color='Q2',color_discrete_map={'Man':'#0077b6', 'Woman':'#ffff3f'})\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Relation between current role and years of experience<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","fbe96882":"data_ukraine.iloc[:,72:90].describe().T","859df2f7":"data_ukraine_q16 = (data_ukraine.iloc[:,72:90].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Libs', 'count':'Count'})\n          )\ndata_ukraine_q16.drop(data_ukraine_q16.index[5], inplace=True)\n\ndata_ukraine_q16['Libs'].replace({\n    'Q16_Part_1': 'Scikit-learn',\n    'Q16_Part_2': 'TensorFlow',\n    'Q16_Part_3': 'Keras',\n    'Q16_Part_4': 'PyTorch',\n    'Q16_Part_5': 'Fast.ai',\n    'Q16_Part_7': 'Xgboost',\n    'Q16_Part_8': 'LightGBM',\n    'Q16_Part_9': 'CatBoost',\n    'Q16_Part_10': 'Prophet',\n    'Q16_Part_11': 'H2O 3',\n    'Q16_Part_12': 'Caret',\n    'Q16_Part_13': 'Tidymodels',\n    'Q16_Part_14': 'JAX',\n    'Q16_Part_15': 'PyTorch Lightning',\n    'Q16_Part_16': 'Huggingface',\n    'Q16_Part_17': 'None',\n    'Q16_OTHER': 'Other'\n}, inplace=True)\n\ndata_ukraine_q16['percent'] = [((data_ukraine_q16['Count'] \/ data_ukraine_q16['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(17)]\ndata_ukraine_q16.sort_values(['Count'], ascending=False, inplace=True)\n\n\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae',\n          '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\nfig = go.Figure(\n   go.Bar(\n            x=data_ukraine_q16['Libs'],\n            y=data_ukraine_q16['Count'],\n            text=data_ukraine_q16['percent'],\n            marker_color=colors))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=40),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Most popular frameworks<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","bc415efa":"data_ukraine.iloc[:,90:102].describe().T","840fee17":"data_ukraine_q17 = (data_ukraine.iloc[:,90:102].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'algorithms', 'count':'Count'})\n          ) \ndata_ukraine_q17['algorithms'].replace({\n    'Q17_Part_1': 'Linear\/Logistic Regression',\n    'Q17_Part_2': 'DecisionTrees \/ RandomForests',\n    'Q17_Part_3': 'Gradient Boosting Machines',\n    'Q17_Part_4': 'Bayesian Approaches \t',\n    'Q17_Part_5': 'Evolutionary Approaches',\n    'Q17_Part_6': 'MLPs',\n    'Q17_Part_7': 'CNNs',\n    'Q17_Part_8': 'GANs',\n    'Q17_Part_9': 'RNNs',\n    'Q17_Part_10': 'Transformers (BERT, gpt-3)',\n    'Q17_Part_11': 'None',\n    'Q17_OTHER': 'Other'\n}, inplace=True)\n\nfig = go.Figure(data=[go.Pie(labels=data_ukraine_q17['algorithms'], \n                             values=data_ukraine_q17['Count'])])\n\ncolors = ['#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='white', width=1)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"<b>Algorithms Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family='serif', size=20, color='#000000'))\n\nfig.show()","add2b2ab":"data_ukraine.iloc[:,129:141].describe().T","bf946ebb":"data_ukraine_q27 = (data_ukraine.iloc[:,129:141].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'CC', 'count':'Count'})\n          ) \n\ndata_ukraine_q27.drop([data_ukraine_q27.index[3], data_ukraine_q27.index[4],data_ukraine_q27.index[7],\n                      data_ukraine_q27.index[8], data_ukraine_q27.index[9],], inplace=True)\n\ndata_ukraine_q27['CC'].replace({\n    'Q27_A_Part_1': 'AWS',\n    'Q27_A_Part_2': 'Microsoft Azure',\n    'Q27_A_Part_3': 'GCP',\n    'Q27_A_Part_6': 'SAP Cloud',\n    'Q27_A_Part_7': 'Salesforce Cloud',\n    'Q27_A_Part_11': 'None',\n    'Q27_A_OTHER': 'Other'\n}, inplace=True)\n\ndata_ukraine_q27['percent'] = [((data_ukraine_q27['Count'] \/ data_ukraine_q27['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(7)]\ndata_ukraine_q27.sort_values(['Count'], ascending=False, inplace=True)\n\n\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae',\n          '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\nfig = go.Figure(\n   go.Bar(\n            x=data_ukraine_q27['CC'],\n            y=data_ukraine_q27['Count'],\n            text=data_ukraine_q27['percent'],\n            marker_color=colors))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=40),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Popular cloud computing platforms<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()\n","e62b1e3b":"data_ukraine.iloc[:,147:155].describe()","33676d52":"data_ukraine_q30A = (data_ukraine.iloc[:,147:155].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Storage', 'count':'Count'})\n          ) \ndata_ukraine_q30A['Storage'].replace({\n    'Q30_A_Part_1': 'Microsoft Azure Data Lake Storage',\n    'Q30_A_Part_2': 'Microsoft Azure Disk Storage',\n    'Q30_A_Part_3': 'Amazon Simple Storage Service (S3)',\n    'Q30_A_Part_4': 'Amazon Elastic File System (EFS)',\n    'Q30_A_Part_5': 'Google Cloud Storage (GCS)',\n    'Q30_A_Part_6': 'Google Cloud Filestore',\n    'Q30_A_Part_7': 'None',\n    'Q30_A_OTHER': 'Other'\n}, inplace=True)\n\ndata_ukraine_q30A['percent'] = [((data_ukraine_q30A['Count'] \/ data_ukraine_q30A['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(8)]\ndata_ukraine_q30A.sort_values(['Count'], ascending=False, inplace=True)\n\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\n\nfig = go.Figure(go.Bar(\n            x=data_ukraine_q30A['Count'],\n            y=data_ukraine_q30A['Storage'],\n            text=data_ukraine_q30A['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{x}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Storage products<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","a01e755e":"data_ukraine.iloc[:,155:165].describe()","89422d3b":"data_ukraine_q31A = (data_ukraine.iloc[:,155:165].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'managed', 'count':'Count'})\n          )\n\ndata_ukraine_q31A.drop([data_ukraine_q31A.index[5], data_ukraine_q31A.index[6],data_ukraine_q31A.index[7],\n                        data_ukraine_q31A.index[9]], inplace=True)\n\ndata_ukraine_q31A['managed'].replace({\n    'Q31_A_Part_1': 'Amazon SageMaker',\n    'Q31_A_Part_2': 'Azure Machine Learning Studio',\n    'Q31_A_Part_3': 'Google Cloud Vertex AI',\n    'Q31_A_Part_4': 'DataRobot',\n    'Q31_A_Part_5': 'Databricks',\n    'Q31_A_Part_9': 'None'\n}, inplace=True)\n\ndata_ukraine_q31A['percent'] = [((data_ukraine_q31A['Count'] \/ data_ukraine_q31A['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(6)]\ndata_ukraine_q31A.sort_values(['Count'], ascending=False, inplace=True)\n\ncolors = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\n\nfig = go.Figure(go.Bar(\n            x=data_ukraine_q31A['Count'],\n            y=data_ukraine_q31A['managed'],\n            text=data_ukraine_q31A['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{x}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Managed ML products<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","f4368967":"data_ukraine.iloc[:,165:186].describe()","3b3bbecc":"data_ukraine_q32A = (data_ukraine.iloc[:,165:186].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'BD', 'count':'Count'})\n          )\n\ndata_ukraine_q32A.drop([data_ukraine_q32A.index[5], data_ukraine_q32A.index[6],data_ukraine_q32A.index[16],\n                        data_ukraine_q32A.index[17], data_ukraine_q32A.index[18]], inplace=True)\n\ndata_ukraine_q32A['BD'].replace({\n    'Q32_A_Part_1': 'MySQL',\n    'Q32_A_Part_2': 'PostgreSQL',\n    'Q32_A_Part_3': 'SQLite',\n    'Q32_A_Part_4': 'Oracle Database',\n    'Q32_A_Part_5': 'MongoDB',\n    'Q32_A_Part_8': 'Microsoft SQL Server',\n    'Q32_A_Part_9': 'Microsoft Azure SQL Database',\n    'Q32_A_Part_10': 'Microsoft Azure Cosmos DB',\n    'Q32_A_Part_11': 'Amazon Redshift',\n    'Q32_A_Part_12': 'Amazon Aurora',\n    'Q32_A_Part_13': 'Amazon RDS',\n    'Q32_A_Part_14': 'Amazon DynamoDB',\n    'Q32_A_Part_15': 'Google Cloud BigQuery',\n    'Q32_A_Part_16': 'Google Cloud SQL',\n    'Q32_A_Part_20': 'None',\n    'Q32_A_OTHER': 'Other'\n}, inplace=True)\n\ndata_ukraine_q32A['percent'] = [((data_ukraine_q32A['Count'] \/ data_ukraine_q32A['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(16)]\ndata_ukraine_q32A.sort_values(['Count'], ascending=False, inplace=True)\n\ncolors_32A = ['#1c204b','#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae',\n          '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']","5ac1c317":"BD_often = (\n    data_ukraine['Q33']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'BD', 'Q33':'Count'})\n          )  \nBD_often['percent'] = ((BD_often['Count'] \/ BD_often['Count'].sum())*100).round(2).astype(str) + '%'\ncolors_BD_often = ['#FF7B00','#FF8800','#FF9500','#FFA200', '#FFAA00', '#FFB700','#FFC300', '#FFD000', '#FFDD00', '#FFEA00']","f57f512e":"fig = make_subplots(rows=2, cols=1, subplot_titles=(\"<b>Regular basis used<\/b>\", \"<b>Most often used<\/b>\"), shared_yaxes=True)\n\nfig.add_trace(\n   go.Bar(\n            x=data_ukraine_q32A['BD'],\n            y=data_ukraine_q32A['Count'],\n            text=data_ukraine_q32A['percent'],\n            marker_color=colors_32A), row=1, col=1)\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\nfig.add_trace(\n   go.Bar(\n            x=BD_often['BD'],\n            y=BD_often['Count'],\n            text=BD_often['percent'],\n            marker_color=colors_BD_often), row=2, col=1)\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(height=1100, \n                  showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=30),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Big data tools distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\n\nfig.show()","2812f0d2":"data_ukraine.iloc[:,205:213].describe()","0dc4f4d3":"data_ukraine_q36A = (data_ukraine.iloc[:,205:213].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'AutoML', 'count':'Count'})\n          )\ndata_ukraine_q36A.drop([data_ukraine_q36A.index[3], data_ukraine_q36A.index[7]], inplace=True)\n\ndata_ukraine_q36A['AutoML'].replace({\n    'Q36_A_Part_1': 'Automated data augmentation (e.g. imgaug, albumentations)',\n    'Q36_A_Part_2': 'Automated feature engineering\/selection (e.g. tpot, boruta_py)',\n    'Q36_A_Part_3': 'Automated model selection (e.g. auto-sklearn, xcessiv)',\n    'Q36_A_Part_5': 'Automated hyperparameter tuning (e.g. hyperopt, ray.tune, Vizier)',\n    'Q36_A_Part_6': 'Automation of full ML pipelines (e.g. Google AutoML, H2O Driverless AI)',\n    'Q36_A_Part_7': 'No'\n}, inplace=True)\n\ndata_ukraine_q36A['percent'] = [((data_ukraine_q36A['Count'] \/ data_ukraine_q36A['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(6)]\ndata_ukraine_q36A.sort_values(['Count'], ascending=False, inplace=True)\n\ncolors = ['#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\n\nfig = go.Figure(go.Bar(\n            x=data_ukraine_q36A['Count'],\n            y=data_ukraine_q36A['AutoML'],\n            text=data_ukraine_q36A['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{x}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Automated machine learning tools<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","c690c8c6":"data_ukraine.iloc[:,221:233].describe()","84fc2e6d":"data_ukraine_q38A = (data_ukraine.iloc[:,221:233].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'experiments', 'count':'Count'})\n          )\ndata_ukraine_q38A.drop([data_ukraine_q38A.index[2], data_ukraine_q38A.index[3], data_ukraine_q38A.index[5], data_ukraine_q38A.index[6], \n                        data_ukraine_q38A.index[7], data_ukraine_q38A.index[8]], inplace=True)\n\ndata_ukraine_q38A['experiments'].replace({\n    'Q38_A_Part_1': 'Neptune.ai',\n    'Q38_A_Part_2': 'Weights & Biases',\n    'Q38_A_Part_5': 'TensorBoard',\n    'Q38_A_Part_10': 'MLflow',\n    'Q38_A_Part_11': 'No',\n    'Q38_A_OTHER': 'Other'\n}, inplace=True)\n\nfig = go.Figure(data=[go.Pie(labels=data_ukraine_q38A['experiments'], \n                             values=data_ukraine_q38A['Count'])])\n\ncolors = ['#1f2354','#252a64', '#2b3175', '#323885',  '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='white', width=1)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"<b>Experiments management tools<\/b>\",\n                  title_x=0.55,\n                  font=dict(family='serif', size=20, color='#000000'))\n\nfig.show()","87b1dcef":"data_ukraine.iloc[:,233:243].describe()","2cc1d001":"data_ukraine_q39 = (data_ukraine.iloc[:,233:243].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'deploy', 'count':'Count'})\n          )\ndata_ukraine_q39.drop([data_ukraine_q39.index[2], data_ukraine_q39.index[7]], inplace=True)\n\ndata_ukraine_q39['deploy'].replace({\n    'Q39_Part_1': 'Plotly Dash',\n    'Q39_Part_2': 'Streamlit',\n    'Q39_Part_4': 'GitHub',\n    'Q39_Part_5': 'Personal blog',\n    'Q39_Part_6': 'Kaggle',\n    'Q39_Part_7': 'Colab',\n    'Q39_Part_9': 'I do not share my work publicly',\n    'Q39_OTHER': 'Other'\n}, inplace=True)\n\nfig = go.Figure(data=[go.Pie(labels=data_ukraine_q39['deploy'], \n                             values=data_ukraine_q39['Count'])])\n\ncolors = ['#1f2354','#252a64', '#2b3175', '#323885',  '#383f95', '#3b439e', '#3e46a6', '#414aae']\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='white', width=1)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"<b>Public deploy platforms<\/b>\",\n                  title_x=0.53,\n                  font=dict(family='serif', size=20, color='#000000'))\n\nfig.show()","4c12d5e9":"data_ukraine.iloc[:,243:255].describe()","e19a1871":"data_ukraine_q40 = (data_ukraine.iloc[:,243:255].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'courses', 'count':'Count'})\n          )\n\ndata_ukraine_q40['courses'].replace({\n    'Q40_Part_1': 'Coursera',\n    'Q40_Part_2': 'edX',\n    'Q40_Part_3': 'Kaggle Learn Courses',\n    'Q40_Part_4': 'DataCamp',\n    'Q40_Part_5': 'Fast.ai',\n    'Q40_Part_6': 'Udacity',\n    'Q40_Part_7': 'Udemy',\n    'Q40_Part_8': 'LinkedIn Learning',\n    'Q40_Part_9': 'Cloud-certification programs',\n    'Q40_Part_10': 'University Courses',\n    'Q40_Part_11': 'None',\n    'Q40_OTHER': 'Other'\n}, inplace=True)\n\n\ndata_ukraine_q40['percent'] = [((data_ukraine_q40['Count'] \/ data_ukraine_q40['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(12)]\ndata_ukraine_q40.sort_values(['Count'], ascending=False, inplace=True)\n\n\ncolors = ['#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae',\n          '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\nfig = go.Figure(\n   go.Bar(\n            x=data_ukraine_q40['courses'],\n            y=data_ukraine_q40['Count'],\n            text=data_ukraine_q40['percent'],\n            marker_color=colors))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=40),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Learning platforms<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","7091aa59":"data_ukraine.iloc[:,256:268].describe()","ed608168":"data_ukraine_q42 = (data_ukraine.iloc[:,256:268].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'media', 'count':'Count'})\n          )\ndata_ukraine_q42['media'].replace({\n    'Q42_Part_1': 'Twitter (data science influencers)',\n    'Q42_Part_2': 'Email newsletters (Data Elixir, OReilly Data & AI, etc)',\n    'Q42_Part_3': 'Reddit (r\/machinelearning, etc)',\n    'Q42_Part_4': 'Kaggle (notebooks, forums, etc)',\n    'Q42_Part_5': 'Course Forums (forums.fast.ai, Coursera forums, etc)',\n    'Q42_Part_6': 'YouTube (Kaggle YouTube, Cloud AI Adventures, etc)',\n    'Q42_Part_7': 'Podcasts (Chai Time Data Science, O\u2019Reilly Data Show, etc)',\n    'Q42_Part_8': 'Blogs (Towards Data Science, Analytics Vidhya, etc)',\n    'Q42_Part_9': 'Journal Publications (peer-reviewed journals, conference proceedings, etc)',\n    'Q42_Part_10': 'Slack Communities (ods.ai, kagglenoobs, etc)',\n    'Q42_Part_11': 'None',\n    'Q42_OTHER': 'Other'\n}, inplace=True)\n\n\ndata_ukraine_q42['percent'] = [((data_ukraine_q42['Count'] \/ data_ukraine_q42['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(12)]\ndata_ukraine_q42.sort_values(['Count'], ascending=False, inplace=True)\n\n\ncolors = ['#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae',\n          '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\n\nfig = go.Figure(go.Bar(\n            x=data_ukraine_q42['Count'],\n            y=data_ukraine_q42['media'],\n            text=data_ukraine_q42['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{x}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Media platforms<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()\n","3cf184aa":"data_ukraine[\"Q20\"].fillna(\"No answer\", inplace=True)\ndata_ukraine[\"Q21\"].fillna(\"No answer\", inplace=True)\ndata_ukraine[\"Q22\"].fillna(\"No answer\", inplace=True)","60ef3171":"data_ukraine_q20 = (data_ukraine['Q20'].value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'industry', 'Q20':'Count'})\n          )\n\ndata_ukraine_q20['percent'] = ((data_ukraine_q20['Count'] \/ data_ukraine_q20['Count'].sum())*100).round(2).astype(str) + '%'\n\n\ncolors = ['#1f2354','#22275c','#252a64', '#282e6c',  '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae',\n          '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\nfig = go.Figure(\n   go.Bar(\n            x=data_ukraine_q20['industry'],\n            y=data_ukraine_q20['Count'],\n            text=data_ukraine_q20['percent'],\n            marker_color=colors))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=40),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Industry allocation<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","ebc0ba51":"fig = px.sunburst(data_ukraine, path=['Q20','Q21', 'Q22'], color='Q20')\nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Relation between industry, size of the company and DS team size<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","2cb99d66":"business = (\n    data_ukraine['Q23']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'business', 'Q23':'Count'})\n          )  \n\nbusiness['percent'] = ((business['Count'] \/ business['Count'].sum())*100).round(2).astype(str) + '%'\ncolors = ['#1f2354', '#282e6c', '#2b3175', '#353c8d', '#383f95', '#3e46a6', \n          '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\nfig = go.Figure(go.Bar(\n            x=business['Count'],\n            y=business['business'],\n            text=business['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{x}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Employer incorporate machine learning methods<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","0343fc7c":"data_ukraine.iloc[:,119:127].describe()\n  ","3d5da6d1":"data_ukraine_q24 = (data_ukraine.iloc[:,119:127].describe().T['count']\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'work', 'count':'Count'})\n          )\ndata_ukraine_q24['work'].replace({\n    'Q24_Part_1': 'Analyze and understand data to influence product or business decisions',\n    'Q24_Part_2': 'Build and\/or run the data infrastructure that my business uses for storing, analyzing, and operationalizing data',\n    'Q24_Part_3': 'Build prototypes to explore applying machine learning to new areas',\n    'Q24_Part_4': 'Build and\/or run a machine learning service that operationally improves my product or workflows',\n    'Q24_Part_5': 'Experimentation and iteration to improve existing ML models',\n    'Q24_Part_6': 'Do research that advances the state of the art of machine learning',\n    'Q24_Part_7': 'None of these activities are an important part of my role at work',\n    'Q24_OTHER': 'Other'\n}, inplace=True)\n\n\ndata_ukraine_q24['percent'] = [((data_ukraine_q24['Count'] \/ data_ukraine_q24['Count'].sum())*100).iloc[i].round(2).astype(str) + '%' for i in range(8)]\ndata_ukraine_q24.sort_values(['Count'], ascending=False, inplace=True)\n\ncolors = ['#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2f357d', '#323885', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae',\n          '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\n\nfig = go.Figure(go.Bar(\n            x=data_ukraine_q24['Count'],\n            y=data_ukraine_q24['work'],\n            text=data_ukraine_q24['percent'],\n            orientation='h',\n            marker_color=colors\n                        ))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{x}<extra><\/extra> ',\n                  textfont_size=17)\n                  \nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=20),\n                  xaxis={'showticklabels': False},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Important parts of work<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","c4b171c4":"data_ukraine_q25 = (data_ukraine['Q25'].value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'compensation', 'Q25':'Count'})\n          )\n\ndata_ukraine_q25['percent'] = ((data_ukraine_q25['Count'] \/ data_ukraine_q25['Count'].sum())*100).round(2).astype(str) + '%'\n\n\ncolors = ['#1f2354','#22275c','#252a64', '#282e6c', '#2b3175','#2b3175', '#2f357d', '#2f357d', '#323885', '#353c8d', '#353c8d', '#383f95', '#3b439e', '#3e46a6', '#414aae',\n          '#2c7da0','#468faf', '#61a5c2', '#89c2d9', '#a9d6e5']\n\nfig = go.Figure(\n   go.Bar(\n            x=data_ukraine_q25['compensation'],\n            y=data_ukraine_q25['Count'],\n            text=data_ukraine_q25['percent'],\n            marker_color=colors))\n\nfig.update_traces(texttemplate='%{text}', \n                  textposition='outside',\n                  cliponaxis = False,\n                  hovertemplate='<b>Count<\/b>: %{y}<extra><\/extra> ',\n                  textfont_size=17)\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n \nfig.update_layout(showlegend=False, \n                  plot_bgcolor='white', \n                  margin=dict(pad=40),\n                  xaxis={'showticklabels': True},\n                  yaxis_title=None,\n                  xaxis_title=None,\n                  yaxis={'categoryorder':'total ascending'},\n                  title_text=\"<b>Yearly compensation<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=17, color='#000000'),\n                  title_font_size=30)\nfig.show()","e2408ade":"# **Which types of specialized hardware do data scientists in Ukraine use on a regular basis?**","53e0baab":"<font size=\"5\">My personal choice YouTube and Blogs!<\/font>","c5388516":"# **In what industry is your current employer\/contract?**\n## **What is the size of the company where you are employed?**\n### **How many individuals are responsible for data science workloads at your place of business?**","3ec98b31":"<font size=\"5\">It is plain to see ukrainians have around <em>3-4 years<\/em> in applying Machine Learning algorithms! And girls pretty much on the same level with boys. Amazing!<\/font>","5850e09f":"# **Activities that make up an important part of your role at work**","2175f767":"# **Import libraries**","a99e3bf1":"<font size=\"5\">On the sunburst chart below you can explore relation of current role an years of experience in applying ML. Have fun!<\/font>","afda5b5d":"<font size=\"5\">There are a lot of different frameworks. It is no need to argue which one is better or worse. They are all good for their stuff! <br><br>I really enjoy doing deep learning using <em>PyTorch<\/em> lately :)<\/font>","084a1d26":"# **Exploring educational level of the respondents**","42675866":"# **How many times have ukrainian data scientists used a TPU?**","2c5204ad":"# **Exploring gender distribution**","1973a654":"<font size=\"5\">Yet another one clickable sunburst plot! Feel free to investigate how size of Data Science Team depends on company size and industry :)<\/font>","a9f90a73":"# **Big data products on a regular basis & most often used**","713eb315":"# **Load data**","c041e9ae":"# **Popular ML algorithms**","5f1c0172":"<font size=\"5\">From the chart above clearly that by average respondents have <em>2-5 years<\/em> of general experience in programming. Only 15 men and 1 woman have <em>10 to 20 years<\/em> of experience.<\/font>\n","eeb990ec":"<font size=\"5\">Most of ukrainian respondents take role iether <em>Data Scientist, Student or Software Engineer<\/em>. The role <em>Machine Learning Engineer<\/em> is occupied only by 14 people (7.53%)<\/font>\n","6776db4d":"# **Upgrade your skills**","1170104f":"# **Machine learning frameworks**","cdf36f99":"<font size=\"5\">Time to explore idustry!<\/font>","028bf783":"# **How about managed machine learning products**","4be924b9":"# **Current role**","3458a1a4":"<img src=\"https:\/\/2s7gjr373w3x22jf92z99mgm5w-wpengine.netdna-ssl.com\/wp-content\/uploads\/2016\/10\/shutterstock_show_me_the_money_-Melpomene.jpg\">","e29cfbde":"# **Where do Ukrainian data scientists publicly share or deploy their data analysis or machine learning applications?**","5a9824fe":"# **Popular media sources that report on data science topics**","18dbd577":"<font size=\"5\">In the chart above you can see that there are <strong>186<\/strong> records in oridginal data that we are interested in. Let's dive into it! :)<\/font>","28b9505a":"<font size=\"5\">Not all cloud computing platforms are present in Ukrainian respondents' answers, so, <em>AWS<\/em> and <em>GCP<\/em> are the most popular in Ukraine.\n<br><br><img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAASIAAACuCAMAAAClZfCTAAAA0lBMVEX\/\/\/8lLz7\/mQD\/lwD\/kwD\/lQD\/kgAAFywNHTAfKjrb3N4iLDwaJjcAFCoGGS0TITOsr7MADicXJDXw8fLIys3Bw8Y7Q1C5u79yd3\/5+fqhpKlpbnbh4uQADCaXmqDo6er\/+vNKUVxXXWf\/nBsAACH\/smFDS1eDh44AAByytLiOkpg4QE0tN0VfZW6doKX\/w4L\/9Ob\/6dD\/zpj\/3Lf\/5sptcnr\/1qn\/pzj\/r0v\/slb\/8N55fYWGiZD\/0J3\/oyn\/4L\/\/qkD\/vnj\/yIv\/27H\/u2r\/rFIgOyjKAAAU\/UlEQVR4nO1d60LiSgwWKNDSG1cVBLmouCgKoiKIIl72\/V\/ptIXCJHMtoqwevj9nz5a2M2mSSb5kZvf2dtgQyoVMKXt9Pjk8Oro6Ojy\/zpYyhW2PKToKxezFfau93+1295tXk0qpuqFJ1EvnrUvddnQ3b3kwLCuv607Obd9nM5t5w3egcDDZd2zdtQzD9GEYeW8S+v7VcbH82Qdf1py8YcZoGJaei02K\/Jsz2SU6RaXvVS4ehHccKI68Wuos38IfS\/bK9mbBmIRpuOn0VaWu9C7G2yvtUyfPks7qDXnbqHDmkvmjL+HYf87lLzw+9XR1ecfpsfyOQvs0vXrLH\/YdhYu0Y4lmYei1dja6zZU7zbTLkjslJd2oMJ9w4YLf2deyVx6cwifXOtJRNvNgKF3Wbyq6Lp+FoesX0QyucBFzVOQzH5mzz3JKxy76leylbfRG9oxJFG14wyXjJ5eO4jR0U+A0MAoT2xXaF4aRYyhSKQ1\/lD4Qv7Vaw4\/NyZaDe2g\/1j31i0lO+UvHzFPJCFc4OM3Ln4dg06OrI\/1mTACgQtmDy7bgFXLw93oWXS+0FWyMkJGj6LaLp\/KH0dCvqAc14QeU2c0R5VKtI8lIoZ3F9Cq8Xu0KvTRjElJ\/Ocd9xOcu4FBLFlaLXJX1uhDlLmXbZlfsQZG3M9pIQjF1I5tD9k1CNKM+eAFqAarij4ztAP46Rz9SLNS9FhypC9f8shF5IkZLTUT7kTw1KQI8oX04RvE36jDchi5c9svoDht69ybXGvzomnnhMyIyjbzrx3N+ZJe3ODI0muhJT9Dti+1mwpiRdSgaaBEumeY+uHrMWuwNV7dzeqzbjXmpgRenorxhXRF5IbrebXmpa+egdNDJVp6uLt00c81Ll9AckKXZokX8kvVl9gU34Ng0\/0RerNMSMhyredEp1gtlD4VC3cvMn1pdR199m3VEZOadXPu4hNfCevFcZ4SWBgrdyii3EzkjHCLMIVyFkdO0QeR3hZXSsJsHrCSj2rm309aaIjLcXHdS4uUuB20UGvqjRGp0CMdp0IHB6nHMINgRBHMFZMYWeRErcMy9FMTOxUla92dtCQZIYi4i07Xbx+LotuJg28AOGc3bNPgPe2KaLjQeCBS9WxPyIlYiR+jVPIW\/7tp5ZpLAgq+\/Rrp7ISeDMpTjtqFhlFEUmuY\/c5+5QrOyrhBIqA6pwXWk4a5EQv5YS5PmRPqrOa7\/pHMttWwlg60Dr9I4cuF+pTI2jPCBfI4C+fdTcrnMQs9mxpSmo46iGv8VDAV9LWxpKMDmO6Mi7dgCpLkeBC1Z8NEomRG5tC8HIjDMGAx9qkjNcrznkLkE+Uj3gncH8nMO0F\/oAUzz0\/P8BPBChFMGZA3cyIhwrwa5DvKX4XPoinTSCxYgryJaSb8eZRTKY5VG4Z3Oc0aEnekHpAfj6h3MemFkn4GezVWgeL8Q6GNiw0CD5X1P8mfpOml1PL2rQ0WBskeejfthvgclkdekKQ6XnaYRbt3sghnypncAFwIbGDgKmcQUw5cDmz3OqlB2ylEKYgXyhFwgtIhHD8DnIqoIadGWDW0Pkfg4AkEf1GXyeqSu+WpDxJE8egCuA8i+i2rm\/V1A0aGFYipE6rBXKJJO8\/WMDJzZtBqqBaBCAPKApvW5gutngf01zs1hFGearLCUoNOCyIoMJdi0GgyfMS2OE58t+2u8rOOPjnIBmxUuE44lSLbJyJlNq0GCPY95c8yDC\/KYb8A1FJGDRVSHX5TpjAiKau5aiaCdTatBGVBpCqYwKUL0W4G0hE7mYY7CGixJp821jJwii1ZDzoaKLyn2Kd9et7NhA+jIRIRKOdif78EJ2WX8N6wcFH4X2hYx8+99mry8Q+CrIBVRBi77jNydWMAWK16dWOJYtNoV0EyGEA+pYoFpt7bVDiUV0V4MhjB0HEeEQWGAQ\/galjOCmbxLK2aGwT8ZdqtEP+obIBcRDAtoZ1QgrCrUMVIL6OUIKiYz1qLo\/eCXaUuBTN045CJCse4pjuPIdOF0IQ7S2dCmCZk6ZgqGS8ELmG76UkLJr4Ny9aDydNRqNZvN1tXR5LhTqhOzlIuoDC2NiowIf76MATOEM6JNE6oIu5J0wWsK8aX0FKGVSIrM8ZWZc\/S8ZcxhWa6e9ntBj0tzYRxIRYQCbIpIJFKYVQxIaBZtSKD8z4t5LvklfTNvdyeb8UvFiW67zPq0YbmOnWs+daoKIoJRCjVjwiRWaxMp1hoeFjAiXsdL3RY1J5j5tH3PrD1GQDlrsuvSxGzzDi7KskRUgMt+DjojcvFZ0asVAa0GIy1u+0hRKCMPluO0Op+QUjZGVRJVwCyVQTYAud8KwxXBRQtnoeBxFEO1Qkkmo6DOf7SmX6o20+v10DBFBFcg5IwIkyLC5DKhwIhWK4ueBpBxFdrJLLt7vQZZkj1dsw+LLSLI7kD\/Cug0IkkgVAXxdNAVCdtNCk1OfQ7A1J3IvOQhpza6rogwR0jaP6DTCLdCMgjQ3QD6xXTFU6noSr2tuhGtGtmK1GeqIiJIKoE+JJJOuyQUntQVSKuBphmKKsKo39sqzZumfRTB2pqu\/IkRRQT5duA+iFQD+JwCMTGQysOmGdz2xUDmyFaZkdsVd1YSuOI8zzSsvKu7rr+hiLlvRiAiWAQA9QqCToOZRJNDq8GCAafqBFG\/0G3xZpZgWI5iZvLE6oWyvBBy\/+rw6fi6Url+OjxqXTo5x7UYPp0jIkhOEAQ3SadBkp40zjSRY1yQWqTaBrxXfLrMyfa0mBSrzH4Uw1Pn9VY2A79WuVwtXd+3LVtXCB33cIBNWAdxAfaZAW0hGSHQiRSl5yNz3Jbs\/DG6KoFkl3qGYU+4wi1kKkfwBo6IoAMhWDKSToPlroLNvAE2RTKoIhGqlbaDPyoYmELFrUKZmdMSs76oP4bXiAYiYiKKppj9FQhnRITQoEKu2r9JoJ69qjm8vuhYTqqVZZ1qzRMErwEyaiKCbHMu\/PgFitlfgaTiVtoCCLr1qvXlg\/t8mh0JyPvZqN08aWnYqSiiOvBxy8ZEMhrACX2JwUai8lBu3bpGuXTvUuoQjEwmdLxrTqHLVlFEKOALfQuRtFO8D9kfszRC0DTzqfJYvdJlJOqCrDhABm1VMRkVHeoeVODgiQgE2MvIqEUz+ysQCrMUBqCnPtvykbXoGDAnTvxRyUupFo5qDVwRwd\/VFrInvglNUU8It3Ma\/h3pQ6TbHmUon1P7l0St3ntUl4fSklpU1KI90PK3iGdIudEvI2nxMKEnE+JN9Ap3MBWAd7VBFCAPr9aXI6f3FyB1Isw+CTqN4QTIeGKh0MAVST64GipYRnmRXtTxHjuVnhPU9sAXEQxo5t+KoNNY8yVSwUWmAT4Ivyk7CvCGUyEBhfvDlYaAmjD4IoIN+sFWCLJ8xEoliBaZRe802TSDEpZ1UUfuSJjToCYPsTxDtJUSEB9XVHJF0mmsahg5oIBWK5OuyFLdsiEB8sBC26H2+6oEZmh3vSM4uIN8fN6fH2E2zHgkg2k1UGNVoIqUgNZx4Tbrayyi6AuaKCUACWiwR4ik01gqQfLaAa1GStk0NtR6hvqi2R2rCyDPq6RFuB9MlDWBANvnZvbZzP4KV4hWIyvVG+uDxS3IQkNDIlLwRQWc1IkCXvAJPJmQLY3sgmEF0WpkVOJsqqcK9\/qLnovdtSM39gscwedFZS3Sk3iWRdJp7KMgMrCYDZIde1MtnjiyE63jqDwvtsoAeDOV5GQQEBqbJJ3Gua1MGJYXOJFKtQZVxAFqi06L3Atu7ZLn+fR2TeHJIGAwdqHNY\/ZXIDdh7e+1CIlJz1xRBuy+FZ8mQG0EF8biHu4ZxZKa4A2AGHevSXlx3B65IOdJqjZWUy7pSFCKtBsCHycgOYnlkFUsEZoy+AZdUkScG0hXmidrH+JTDqIAWYKEyMTpipgvOmIWbYXlUd6pNtxPV6bOfVpA1O2wV2zdH6sq2QQv4+JIBy9pIm9UvWSXJM28wNLYBxaI1JV3Do4g0dkrO5bl1lpKSe4EjUhWmMOpvjd2Th5UPk7zai2ieKXAOIFHPGEqqlh8CNGO4LnLs+zLa1nsW6faFySkI82p+adbMWytXOnyOyOEhDJHKfiaV2LrndCcQwdm6nYrK5BS4ZjqP5Kz4Qd0O45lIf9V79zbZPGAci\/MzUIL4ABeOrACu0FI9A7Sx\/tHNp7jUnKAcumQ0Q1RkycUMbomYOq5w1LVP9KmUM9kJ7GcDlt6qb0EliCoo2NNH6KshT4\/LEafB8AVkS+lvG7XuocXlU6x6k2jXq1mitmn\/RzrOExd4YDOA2bzleUEx48auq3jBgvnHAR0AUTrPuuYIuEN56wWKvHpfoyjI0zL1fV0WnetvO7YaZ15mqqEtw7BP0mNebiW7o21iH2wyKCZ7lcUojIXQfEZkbzTNWQwXaVIoR6pT9YOeqMoJ3\/KnzKr80ToIxnHWclKM6x3qOBUkQs\/4AVrDNTmPiSDT4L8w58B42xCSSWDYZqS4IUXWohhniqzmNeqLzBr4Vp3iLYQi9IceqeYhHRh3CA+qY8Vu8hhuBF43ic1Pc0bS70sgA4CpyVabvDRszEZ88M4zbAmSa8ztcgycruRKrvHNbk\/MnNkTNlZaZ5xKmYpGHsyxeFanbJ8UVQxRybGbPvgwqgdRuxOL1mSZmXT6cI15Tx0qo50n+4TXtNk\/SrUImsrdO9d50XdaGg26f3oRcvCvegQZFOPUZrSCiZuyPuR9go2Oh9CVpkvnqKjWZSil3K2rXYkteF01zt2pdjkdXRb6cssrZXllm0YdlvFoDP7ju2EsPW2NBipeCHrEuk0K2tkv+jiUtjZGAv27+2vXybIHJ7iBlMvRrXtQ45SZltN1a9RLZZCZFTKmYXM8p8tyJYisY3V7FXO5sTSpqXXzM\/uAi1etNxa2vH70V0vbq91j65\/0L9rESLTOW960wj+gYtwb2ZeT9diR9nNkLv14kG2cnx83fmR\/zrKEvVi53hy1Wo22+1mq3X\/lFU\/dnCHHXbYYYcddthhhx122GGHHXbYYYcddtghEh7vXp57H2cBPl7fBrd3\/W0P6d\/B421vFk+lNE1LJpMJH95\/k5r3N7Pe7U5O\/eFZ3BNNIhFnIZHUtIfnxrYHuUX0Bw9JTzxM6azEpCWetz3QbeF2lNIk4lkIKTWY39H4X1ldYxBPKcknkNFJcE9P00Y3Wx739+EtqaZAC2i++tylfKs7+39o0u1JJAF5Irrz7nrX\/D8mtV5j2+P\/cvTH6iYWiujdu6+xkGvy17vvGy0ZUUALEe3dLmSU0E5etj2Lr0QDhEBhnOhFigGC0JEnor2bMEBIaLNf7LdfUnPR+OGzpxXTh9H4tff2PJzj7WM0jdOhknY7v7kfDzUwkRo\/bnciX4dG3Ms0kiej18H7zWO\/wfrF4wC789RdeO1Bi6+E9Gs16eamIf3NSxzIKLVa6cdLGXmL2+\/VJAUgl9VYXeml4jshBRgQ694iul5gSFph8hf7JBkeNUJEI3DpBmpYanTHecYvR4PwRslXeK0\/BaFVQpvebmeQ20XjZCUibYivfmhxKKST\/yGrRGpRil7dn1ESk9ASr\/83p9Qn58+4fhNHeUwimRr96rzk7h2x+f2VKSX+su5ojKCxBaoUH\/xSrqQ\/8EPukFuc44UIEd\/Yt73RlEpCS579wvXtbrzg14CMiLgoxZs0ZWyBQFPT36VKjcF06XgT8cbqwsdq9hr\/9jMW9eR5pfGv8UovZykyqydSsb3VgpY8EzxhmGSyT\/4C9wuS3MdeHLJrpBYR3npBFnHQp732QpW0H25w\/ecHihbSeqvrpLduiB814BHhCU2bDSU3\/7O4HWv0vDQyE3td6ldiLHva45StSIGUUqOfJ6XG7QerQpRIAZezckUpBc\/LWP5JXRoNf5DF9d89\/WE52EQSeJzHJSkEljkuHmdcRQqklJz9DCn1h6ME53NrMziD56UYkz3O0xCe2UsboUsPvX88qLx5mzH8Tzh+HD+PVnammpw2RpLynBcuJc+G\/2iu67mfeIrfAZJ6wONeLflyZ73Cy4nI2gIkNS3++vKP2VzjZvCgiTpkkkm6uDpczpWbfDAxEFvbQpm0xEPvpbGpCX4OjZvnEaMqBgasjRnfdGlniWm0NyoWwz0xJWfbF9PNYOxbl3jE7NJzf6kLWmTG9W6q2DHgiSk1fX3fkm\/ymxc1qXj8pJxNczyHdhZViQK8q\/ed+I2C2rQ3fGx8ar7R0PeUJyH0PavxpT44fnMa3q2tl7AP4lK\/jeR0MvsOOTX6L4PxNMFt7aQE9MBLxZf1oWSE5QyO5U3Bb4PR+GaXeDh7u1UoFa81orvb3viE3\/jKGJJ2ws\/f38Lpaeuvzo3eGj06gaBS8b+vg5eNSerx5mXwGvRMq0snEBBjoV8hzM+ogDISGr2kirmzBeUh\/vDxNrxjd2bIX95\/fBm+9bz1fNERFHEIWkI497tFfraWrwbj7PHyHUVJ+aJKxE+ms\/HrYDi8vXts+GC\/y8Pj3cv78Ln3MZqeeCvROqIJBRQfsN8SIqRktc\/Tho2IbadsUQVdYr46pFLe0E6mD7O\/f\/+OF\/D+OJs9BEIhNyB84n1SAe01Qgkp5q+Spw0+o0mMCZBIkv+zoeenTqjSM4VF8pGcbUJCPt4fUtE993aQTM1UYuWH4Huo0USKuDlb03N\/Kzxz\/lDyLTeBEiU24IhI9N\/iG7W3zcNzQW+KMc6ctE4Jqx5r4WUk4GO2DL8fQTkbnTfwpeQuaw30exH2nXwfPPmcqCqQj1vN17kv66h6GX8+CtgsPAP7iEYY95KeVL+SY+4\/T7kE8bfDSzNGt42IM7hNadOvpnAeB1PFnXBfKh4vHxy\/r5OFPn4Lx9V\/Hnm6tD0xef4n\/hFZf74bjfexhDT+Mvn4NN4\/XrAK0Xh5jX+zY\/KLC7Pnf7RSxcHj8yj1TQGT731Otl9UWAt3b38TqS81uoCsO3n92acO3AzPplF40wji8aQT\/y2HMvRv32aCgxXWko6WmL4Ov4gQ3xYe39\/GAdX8GUnNWfDkrPfbpLNC4+b27WMUHGTC2YvKkUzA5qaS07Pe8P9xLIwnqfle1ERIugKicck+BsStT9tORx+94cvPWtM3g0a\/f\/MyfB70Xj\/Go4eph5MQ04fZ+ON18Dx8v+uvVy3Z4fvwH0zzxLxLLuveAAAAAElFTkSuQmCC\">\n<img src=\"https:\/\/www.gstatic.com\/devrel-devsite\/prod\/v7824338a80ec44166704fb131e1860a66ed443b0ce02adfe8171907535d63bde\/cloud\/images\/social-icon-google-cloud-1200-630.png\" width=\"500\"><\/font>","7419e372":"<font size=\"5\">As you can see half of responders have <em>Master's degree<\/em>. And only 2.15% finished only <em>High school<\/em>. So, education really matters!<\/font>\n","aa78ee00":"# **Current role by genders**","05289cd4":"# **Most recommended language**","8dabccf4":"<font size=\"5\">The same situation if we look on it in gender perspective most respondents have <em>MS or BS degree<\/em> at least. But <em>Doctoral degree<\/em> is more popular among men.<\/font>\n","c13a0cac":"<font size=\"5\">The full list of managed machine learning products that were proposed in survey looks as follows:\n<br> <br> \u25cf Amazon SageMaker\n<br> \u25cf Azure Machine Learning Studio\n<br> \u25cf Google Cloud Vertex AI\n<br> \u25cf DataRobot\n<br> \u25cf Databricks\n<br> \u25cf Dataiku\n<br> \u25cf Alteryx\n<br> \u25cf Rapidminer\n<br> \u25cf No \/ None\n<br> \u25cf Other\n<br> <br> Dataiku, Alteryx, Rapidminer are out of interest among Ukrainian data scientists. <br><br>Besides, not a lot of people really use some managed ML products, but still, <em>Amazon SageMaker<\/em> has some popularity.<\/font>","8d746dd0":"<font size=\"5\">Totally agree with chart above. I use first three tools in my projects as well!\n<br><br><img src=\"https:\/\/shwanoff.ru\/wp-content\/uploads\/2020\/03\/images.png\">\n<img src=\"https:\/\/miro.medium.com\/max\/1200\/1*dyNh2RVaforxssl3VR_PHA.png\" width=\"500\" height=\"400\" >\n<img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAQMAAADCCAMAAAB6zFdcAAABF1BMVEX\/\/\/8jics8mdYIeLo8mdQRcLTG4ez+\/vz8\/\/9MnNEsktH\/\/v87mdc+mND\/\/v35\/\/8DdLT\/\/\/gjiMz\/\/\/YmiMcCc7P\/+\/4licYId737\/\/sRcLLz\/\/\/\/\/PgmhtD6\/P\/7\/\/kIebUJdr\/e8\/kAbLMAZKcQb7ro+fyz1OUAbrapytwAaKd8rcgAbqkLeLAAYacAZ7KSwuC03u5Yos8skMmZxd5GjrLq9\/84f60mlMZ+uNXI6OsBcaNprNWf0eQAY56FtstIirsQfaY9l91joMPa+PlJjrYSi95bj7tXn9ilyNY9odhao8HO5\/YshLlrncbU4vEQccV1nryErsVHhqwZap1DgrSGsNYNc5q\/1+Ehjbuyy+cUhdxrqdea91jPAAASeklEQVR4nO2dCXvauNbHRQxIQSAh2zE2tokxaxaaBZqly21ams47M6Gzdeb2zp3v\/zneI5NmITbIfd8GQ\/OfPpl2nnaCfj06i3QkIfSkJz3pSU960pOe9KRVFMGYYYwRwpiQZX+YJQmGTziH0RNAwJb9aZYizBAMHTOGEfYQX\/bHWY4I8zAPdw4PR8UuMr5LQyBEkKPjYblcypcqh+GyP85jiyJOqYMbe9VmtWpuVPL5\/HDUxZh7nCO87E\/3SOJs22Hd562tQNOqWjlfyZdLw8Mu5oax7I\/2aCKeICeng2azCgyqGthBeVNSOEHY2F72h3scUctB4WkzGNhNDVQtbYAqm5Xy2XmIrO\/EO2L04qUNAAKYC\/JfkkE+X6nkS8Pz78A7co+5Dj7aBT9woypMho2NcnmjDCRKr4pMQM7gROmjWPbn\/RYyOLXQ6381m9osg6nKlUrpuCgE4ZBLQw617M\/7LeQRD432NfuhHVwL\/GN5eHxEwBYgiK6lLAu9qWtB5ApiGZQ3wDmWS8c9KCPWzwzgb5USwccHthy4ncBgIw8YKj\/lh5s9F4ExMLZW1uA4jLjj\/l1XcMMgRmALLvEYoUBhXYprWSa7F317FkESg0q5tLnTgAjhyOJyPShQzwgnBTsIZikkMdh4B7Ni5ELS5K2LY3Bo+LZTBQazkyGBQblyVnkHjmF0wtfCOTLMkShuQUBo2poig4p0jpA6lYZvQoIYZas9H6BU3kaf95uBFqcEBrfhMg8pNBOc4pU2Bwj1r3ejOvErGMg0WhYSeKXDJDHQYR1Sw+qDuKjCIF\/Jb+TflfZ+We31Z35esKuB9jAuKtkBQJBRYviarGhhTTAnfFyQBYJtx06Ghww27qssywj4r8NDcK6raAuCWu7lbqwBXGtrEYMbFqXPUHStHgRPoMZFYR6CxXZwC2HsruJsoNb7tw9LhK9lMAxXkQEK95vVIKjGh8WUDDZyRcZXiwKDsq+4b8dHgwQG15Hgflz48qtKqchWzR0Q9rm1iMCMT1zIYNljSimMXx\/Ep8ffCwPK8GE7+I4ZMMQY2mvZDxYLvg8GUW+Jx8X2uLV4\/FIJufItkptfrQwDMACGG4Z7PD8zWmsG0hMw0ThVRbCWDDCmpPu2U1Vwh2vJQK5zMIHCQUdTcYfryIBih1CBX+yqjn8Rg\/taBQYMc+4I0VNIDteWAXa4ZZHR3NWCdWeAiGPxN7tNbU6VmGkGlBL4QZAbhhzCm9z8TlWjCcyshkP29rUHuygrw4AQ5mDGDyfB4KKHgAZJtZ4v+0aoR8bpfIHUw7W0pTHgxNsm3Uv\/g56rBecuQkBE\/U+DOyQMuz\/Um+mMIFsMKNum4VA3a6YJHC5PkEj3\/bhndE+3ftVUU6MbZWguyHaxmq\/rtZqp50x\/cpTKH8BUwGFQuN9ls1IMYCJzA\/UGOdPUdZgLNfgSnHPKBVLqnmUe5\/jFoKnZSRspsbKb8Jvtwdm7ckyhnL\/\/s2\/NgAnesNDrAYz8Rr5vjt8LFytsagj4LVxc7acZfqQAiNl2PV+uxKyfPjIDLLiHDoOcfgcC\/NyE+YAX73MCQTCWXidhS3WBKRT+ffQ\/P2WAAbIo35NTwLy1gyHMB98+xHjx+QqIouTH1ld4gmbH3n\/+nm1W8uWlM4CgdgwWELmBO3YgvxyHSknCmwNt0EzoL5hnBbt7rrX9U6WyVAbMkM1fJ5e+n4sReEiYDxb4BIxjt\/8tQiwIH3uF1FmBJKDt92T\/3WY+cQXxcdYTORVOeNcA7iIABmZwiKZH0OIMgluQXPKf+6lNAObNoP5niDBhwKC8XAbWNr6ayKwgwQ50Uz\/uYkrjm4cp85j7vG+nLBEiHey5SAiaAQYeOzL9GjCItYSpa6gVEaGxDCyMTk5te5CaQbDV32GePNqGl8+AFjW\/lvP1WDuQ0wFiRU0bcSpnxN1PAD4CfqD3b5vNgZZ6LvQnoYzJmJIMMCCXH+aYwA2Kj11wCM7dflHuCI7F1SBVgTDt0LTt3Y8uubarOAYx+pax8Srwc+ZCBr4++YUgAoO++YMCc8yOPtmpPUFgN3dHUWVOssLA9PXFDHK6H4zYvdiAiSd6uymLJBt+e7U5KCJ68\/\/KAAP+H99cPBcmuj+0x9271QNvoJ1U68fXDLT2uAEIblkunwE7siMG8RnCzVyo1fycPykiRhgmVB5X9tj5QXQOQZ0DFEiB3T5EnDlI9laxWwZK+mYM0NEkF2UCChMiGHHPQZRTShDfq6d2BbYm58F9ZYCBRcWLGkx3MyE43mOgB2MXebL\/2OLjmKMI842gWtV2L9\/PLk8tn4GsF1h4oX9QMIOorDSvDK\/BDH5RsMHDp8Jg261zIshMrrV8Bogx0hDdS5WpIGtJKKJGROCT51UY\/yDNqkmgNV8egTuZ7arKAAPKGGQ77tiU4aE2N0pGnCa+\/8oNTyHGgYNTDItygS2w65chgux4dnEuAwwiycNWpm4OFazBBM94MUgzBaSq0VIBiSu\/s8KAbnvuuTbUfYUZAQWE7\/vp1k7Bauo98D1xZVdGGBBiGQ4aTf6bVDnNGIJumpMHR3LmQmiehlBgWDxmgTYjDGQ3JWRuO5PcYjuAOAqkIGdKExJ2f3OZA0kFixlCVhhAyiO3W3sBDO+DqVI+wA+trmQBQaDt7yCDUYpi7wC6zZUX5svffp\/JE3KjKacwHa456AoMgsGv\/bcvsLdNkhbps8RA1gEsrPlKWfO1VOxg92fXEyzOE2SPASKcYiNUiY8pINi7PyLP4Tw6zJ99BhhbhHvdTWUGcgtiwXwoDF4gh1jYSb4ULVMMpARC\/FhXWFi6wZBLWENpypPNrXF34bdUXD94PAaQzBvuq8D3J8oMYucD5MZB0Dx4Q6zVY4AJx5ic2wqJwg2DnB6fKjQHV0g4q8cAggMnDI3s2K23OAaRHkAIms39H07EtruCdkCwganFSE\/TTRVbuGYwMx8ASbP1hhgNuS2fikEWfOJUwiBFO02IzOWm51inNhDYmv2yiBQvP4sY3GwtRxDyCXpMBvISo6KpUkDdpXAnIvQvQ8NoqH2zbDJgnGNDhBOVSvohhMD+dXfPRY6CK4iUTQay+Zxj0b1IwwAqLW1LMqhWZVeB7HlV\/G6ZZAAfy6Kcet1j3ddVqsiIQU4GSXAF9echsyziqN7YMMPgHoyN5TGYysPuOFAvIyWHSdBsjV2Mkyukh5pZP7gZ\/oyWwUBw5jF0rJw1R\/L1wWu5VBC3VpKkDDPABDMyamvzl5pnpPu1jyeypyBFt3eGGcBccPfa\/YKWxg5qpq9Pikihn+9W2WRAGGaeQ8lv7QLIVl9QkLW0mRuMXI8TnCouxI36oR4zP4CiATF3fHBQmEJIYwpy3XncBQJE8XrYbDLAhEBMuGi1OoWpUkEw9Wg+gCUpfrdMMmDyKMKk\/Wv\/ZeErIOhmreYHrzlLkydmjoGHcLh1UN8qfLGDVBCiJjfd\/qereIl69hhQeS5JFHdh+PXCHaWyBJgQvn5ZxBSJxcli5hjIxxAw6z2r7xdmlM4x1nTdtEfY4KprKBliwGTX1U67U+\/MMkiXKEz34z528eIbkjPHAAmDj9pb+zEMUkEABkNT\/zB8sfg7ZowBRRyT3w86+4Xmg7mQDoLcrIJ\/fO01YpBzzbsIM1MMCLOox8ftmNF\/zXS4NohXruEQ4liJaWOmGFjeNm083z2o1\/8fIZi52pVgkatdAQaUY6v7R7tjJ9sBxMt04QEY1Hx9BFU4X7DvnA0GiKCT061CP9kKIgipLWFS0165bNHe+\/IZEA9xD1+9bHW26q3+XAZbX7YUlO0AkoVhiOQlIbEHZ7PCAGPewMV\/dQrzjSBiANlSdMIn1ayY9LhI2HrOCANsuAz12q3OXBOYqt\/aCnJRW5I6ASii9D0enY3LLANqUfHjs35hTkS4Vaffb8r25hRrbLrv6\/5FKAw3w31pDL2J0oKtxRDqnf6n3khTXnOfypSHQHpZ7UszCPE8tHfQURh+vQCT5eDP0MA9Ozr8ojgfop74mm+fc0Y8I3v9yph7hvux3WktZgCTpd959jtBEOeKgZ4zVfr9b1Tz\/dpFiLg7U0ZlYO8d\/mLcPw4UIgIw6HRauz1iCE6YUZw2a6YQRBLf7GFnJlHIAANPdP9s1VuxleKM9vsHp6G88MLwOMbhhVJ78y2CnPSj\/h7PHgPW\/QSuoLO1tTguNtt7rufIO4MwmILRvUzlGGWvt16T8SFrDBget1RCYqcwgHmAcNRzHBVAArtjSJaUG1u\/4NJrnxGBrBQzwu8zyC8C8c38wWBBhRCpWu\/APECec+vULYe4Y\/BzQ8XWpVvZ58LgspJ0MsKAn\/YVssNCf3dMsMX4bQVMiMD8r0Ep\/uaEedL1zRALShycEQbo97aCIey3\/5YvYZA7t\/9z6m1DbmX66Vp2ctG1CrUessS0lMwAAxF+WmwFrT9Dsd2Q57FunTolnNJt9PdE2kG6nSjwjeZ5A2N5lj4LDDAqfur06\/XYGTHNDAvtsZvw\/DDBqAepkq4PU9qC7o9DbCFDIBrD4JF7cbhDr\/6dVDACG6Bz8GPiA8yO8GjR1muT1OtL5nSTngtv+QwIJD3dQdJCah1KpNNfUGLjPSPIYqGZU7hCYdYQdF07dLHMN5bOAFFOaPeP3bhkub4F8+Cja2w3khbCwEtSYoSpOtimCHwT3MK4K+7cCbM0Bg6xLO51L9v9qCi6HX9f1hCd9o6DGzhxGx07zKLcO7mQ+80KdwjcSl65o8ub6RjbjF7wvB64\/FnUsvuYdiBFmDt+BsOeYVA4GBSRt\/BPQwXhHsv6KV0DV8RhMHKNzfK0eF5oC992PdHzXJkndDp33OF+4QBs1VrcchuV36+0FMfBriVvKfQ\/vj++vidruQy4vCV9BBV064bBVrPTHkVX1yz80\/KtHEbOg3TLrFK6CRX4BSDIAAP5cKiHdp7d9YdtmAeMJu8P3Yqi6aGH9LtQury2Uy9vzIx6GQzklihjHuu1o0RBJkb1gx+6wuMsOpq5kAGWqwpoJ9Bl34E6AnlsGCbQRj7u7sDHrBduRAQr7kO+2OoXturPRq7npbpbmFm8F6RcWpqSyCssHTwOA0aIId6\/LIBf7Bx8KmIv1YOJDNPo0ENqApliIDutCQp\/eNZut3\/rRiscKTpumcM5FkZYS11JZ4kBk2kzYzz8XOwyD6PkxChWFNIlQvBXpIwZYoCip1TY9XZYwn2JyaLSaihj3bHv\/ydVlDTvRoOlM\/i\/CuILJY2fTX+Y6tRDXhXCajCAUOqhv9IlS+vGADwKt9AoVZv3ejGIIHicpksZzS8143owkGLyR0\/zTeUouXDsK8cgEj4K1FcT1pQBN67UHeOaMiAch8prjGvKwJDnZCuK7WvKDPKl2csXMy+5HWkuXmFTz5UlgxV777zhju0Fd5SuOwPmcfSXthjCOjNAnmigw8Uxcq0ZQC3eQK+DyBLmLLEpMSjLRUeIC2LV3jZG0bW9gdxmnjMjlOqF8kalkq+UuqvIAHnGUSBvrk+GoFYzAYKN8h7Y1gplCF9EsLxVxJ\/TvaXEIF\/J5yvDUK50L3tE6UUYRuGFH\/\/GRQo7kAhGBkm5wpcNycOCons2dQnxL54sHH65LLeihofcS\/eOXpZEqPszOMZa\/KLzDYMEW8j\/dCYJXPRmb6deKVFs8H+0XMJ7J4sYyLBYORt1ZePO6ip6HPNc0+PPPCy0g83SEAgwlngF4ypIvu2E0UhLeAFpAYNSZcfFFhBQ2PrMsBijSOAdOxftsybFhZlNZnCFMA9KZ68bcuNjpcf\/RZxEhx5yDzKFBAbl\/GalfHY2SuyFWkFh7omivChEkQEQKFX+dpmxihlBgoRMl2TK+MAfxLehld9Veg7UniubEcTIxR7HxvuL+XZQib7A1+Em5AOQEjkrnRXEKdqT1Sf3Sun7c6FcLkNxNDzupblnaqUkN6Y\/ylraT2QAabEksIr1oZo4FpjvyTM9SXMBPOFxD6k8H7qqkk+UYXKoJc4FIHBEGGWe4i1bqygKwnhk63KZUb+JCzIhgi8bw+MiMQAUnz39tm4iQr70IC8vji4RMGVvnsTwrnRcXN8pcF\/E8XBRq\/nyAgFAES0SVTbzpY9HXKE7ei0UPd\/JipP\/Rieh9FrkCsulV0VIHxRe1F4TQQXoiPAi8gclmRZtAAEiL1301i0hSpJ8xZUQ8X4zV5KrZJAT\/lNEghFvtVcI0osI3D0\/K5XfwSy4WqOyKI3AMXroavTq1ZsrxNY4GZgjLDiSb\/rK9qVthZcq1lNQEMhHo0F0ncrjVGLTRVIqj7t+X67wSU960pOe9KSl6H8B6\/kPedOOtwEAAAAASUVORK5CYII=\"  width=\"200\" height=\"200\"><\/font>\n","84d93aac":"<font size=\"5\">Not a surprise that there are many more <em>men<\/em> in the industry, but according to the data <em>women<\/em> contains <em>16.1%<\/em> of all responses.<\/font>\n<!-- <font size=\"3\">This notebook will explore data from Machine Learning and Data Science Survey competition!<\/font> -->","7c12136b":"# **Exploring age distribution**","0cb9b9d5":"<font size=\"5\">I really appreciate that you have read and explored all this stuff! Thank you! I hope you enjoyed it :)\n<br><br>In conclusion, I want to say that Data Science and Machine Learning industry is pretty young in Ukraine, but it is growing extremely fast! I hope, in the near future, our community will have even more talented people who will push data science to the stars!\n<br><br><img src=\"https:\/\/pyimagesearch.com\/wp-content\/uploads\/2016\/05\/cat_face_detector_result_04.jpg\"><\/font>","df4c7c43":"<img src=\"https:\/\/miro.medium.com\/max\/1024\/1*iWzy084DvmZ8fTHQPuE-Aw.png\" width=\"500\"> <img src=\"https:\/\/ainxt.co.in\/wp-content\/uploads\/2021\/03\/LR.png\"  width=\"300\">","b59db3f1":"<font size=\"5\">Sadly, but most ukrainians do not use TPUs or used it just several times.<\/font>","85bf40a4":"<font size=\"5\">As expected, <em>S3<\/em> and <em>Google Cloud Storage<\/em> are the rock stars! :) It is true. I use it in my work as well!<\/font>","42a971cf":"# **What type of computing platform do data scientists use most often?**","03e5fc53":"<font size=\"5\">Sadly, but not a lot of professionals from Ukraine use any automated machine learning tools.<br>I used albumentations a few times:)<\/font>","62cf528b":"# **Most popular language**","795a0ef8":"<font size=\"5\">This notebook will explore data from Machine Learning and Data Science Survey competition!<\/font>\n<br>\n<br><font size=\"5\">I am a data scientist from Ukraine. So, I'd like to explore subgroup of professionals from my country. <\/font>\n<br>\n<br>\n<img src=\"http:\/\/galinfo.com.ua\/media\/gallery\/intxt\/w\/e\/welcome20to20ukraine.jpg\" width=\"600\" height=\"700\">\n<img src=\"https:\/\/www.state.gov\/wp-content\/uploads\/2018\/11\/Ukraine-2109x1406.jpg\" width=\"600\" height=\"700\">\n","0b561f1d":"# **Do Ukrainians use any of the following data storage products on a regular basis?**","663d8042":"# **Do employers incorporate machine learning methods into their business?**","7dacb230":"<font size=\"5\">My favorite part of my work is building models and applying them to the data. You can see from the chart below that this is indeed an important part of work for a lot of other people!<\/font>","59e0c492":"<font size=\"5\">Also as expected the most recomendable programming language is <em>Python<\/em>!<\/font>\n","f7c72cf5":"<font size=\"5\">Age is pretty much the same for all genders. Most respondents in between <em>18-40 years<\/em>. But there are more men rather then women in the age <em>40+<\/em><\/font>\n","e9273a7c":"<font size=\"5\">Another one clickable chart use it to explore allocation of current role and what computational planform these people use.\n<br><br>You can infer that <strong>cloud platforms<\/strong> mostly used by <em>Data Scientists<\/em> and <em>Research Scientist<\/em> then other roles.<\/font>","056641c4":"# **Years of programming experience**","ac38088b":"<font size=\"5\">As expected the most popular programming language is <em>Python<\/em>! But interesting that <em>R<\/em> is less popular in Data Science community in Ukraine then <em>Javascript<\/em>.\n<br><br><img src=\"https:\/\/cdn.ucberkeleybootcamp.com\/wp-content\/uploads\/sites\/106\/2020\/12\/tes_gen_blog_code6.jpg\"><\/font>\n","d62cb245":"<font size=\"5\">On the chart below you can click different parts of it to explore allocation of gender, education level and current role. \n    <br>\n    <br>For me interesting insights that women with <strong>BS degree<\/strong> either unemployed or work as a <em>Data Engineers<\/em>, whereas men with BS takes positions as <em>Data Scientists or Software Engineer<\/em> in addition.\n    <br><br>Men and women with <strong>Doctoral degree<\/strong> mostly take roles as <em>Research Scientists and Data Scientists<\/em>.\n    <br><br>Also, according to the data <strong>High school<\/strong> is enough for <em>Data Analyst<\/em> role in Ukraine.\n    <br>\n    <img src=\"https:\/\/miro.medium.com\/max\/740\/1*1adquzfD-i4n1Z4ZGxlrtQ.jpeg\" width=\"600\" height=\"700\">\n    <\/font>\n\n<!--     <img src=\"https:\/\/naked-science.ru\/wp-content\/uploads\/2020\/09\/Blackboard-with-algorithms-and-info.jpg\" width=\"500\" height=\"500\"> -->","5282a85e":"# **Conclusions**","d33d5502":"<img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAVgAAACSCAMAAAA3tiIUAAAA4VBMVEX\/\/\/+hZv8iLj6fYv+5j\/+cXP8fLDzAnP\/fzf+gZP8aKDmeYP8dKjsZJzn8\/PydXv\/z8\/MwOUXUuf8RIjX5+fnb3N3j4+T9+\/\/r3v+JjJDv7++lpqn48v+aWP\/R0tNhZW1ASFO0tbe2iP\/07P\/Jp\/\/38f8pM0Gtef\/w5v8LHjJpbXNOVF3Gx8h2eX7n1\/85QUydn6Kzg\/\/Gov+\/lv+lbP+Ag4jbxf9ydXvMrf+vsLPXvv\/AwcNLUVmufP\/RtP+GiY3k0v+pcv+0l+e9u8Xh5d2Vb9mzp8yWYO6WT\/8AFSypqLM81FvSAAAUgUlEQVR4nO2dC3+iStKHuSiROwREwQhoDF7AqInGGM3Fs2ffnXm\/\/wfarmrwFjOZ3Zkk7jn9n\/nNaNuQ4bGorq6uZjiOiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYnpb6k\/\/yj9RrX\/4X71BZ2I\/vwnL\/5GmdP\/s776kk5Df\/C\/V\/K\/rr\/6kk5DZ+pvJitWvvqSTkO\/HWyZgUUxsB8kBvaDxMB+kBjYDxID+0F6B6xsmuJeg2iaMgP7E\/oxWJVvt\/mdHrLZJQ3i2wccBet61WpQ9YwvuLyv04\/AiuXb61rtulQuSJanncva1fm6\/J+Bra5solX4BZf3dfoBWHX6dAFdLu6nJpprs12pQUP9pvm20R4Bu3AkIqfxyZf2tXoTrKje9opOvZIq8uq6U8vf1yqPb3raI2BTXSDSBsFnXdQp6C2wZT43V\/rn+frbpI5O8gLpXpZE82fBhraEYEd\/K19wHKwsnl3Cp7WKKt\/R2\/8B\/+p1mqU6Hng9UY8a7SuwxtgRULr\/6qcbhrF9+eZHb+iNHu8f+Ck6BlZu8i9oqJe3vCxPby83vetdVVTXBWP5mNG+AusOdEFLR5KgrPIrdj2igHOri7HvtyB\/Gyx83x9Xi0OCZcOHhowe4O2JOpQgHGOPIvsbwEeEagbNrRPIth8BK\/L3OcrzJmBW1+eImbhajA9Us029wlGjfQV2KRFP4BO6Qn9JW4JUURw\/GwoOKMmqQ9vRHUeXfDitsVglukOVgvew0r6g65KuKbqgOyPA7y5TRYdDlLhB0TYcqZ9WFytBIYfpkffx5N7Ra7Di40Px4T3EVSpxDDiOVSblwqLzceyqw78i+wqsLwmSnbX6guD41JIIWEmIEx1dr6DEK4e+0hwg7w4dAaIIaNNjD8CS7gI5iwR\/AFhrbOcHC0oyg1O6DU3SRpGQNzvDL1\/HeAVWnuISwMUdhxYr813iDszzGldrb8NXuTy5RrT374INbE1QoiAkULQVNaQAwgSJGKCiAQdJ0xWdcoTAwZ07iiIkiaRAy5gYcexoCvmlbYbATCGvNUVC4P0x+bqMBhyvKQrtpo2yz8X4Wq\/Als+g+br0SMA9NeV1pVch3gDBQle1XEbPKqr3V6TfZfeQ7CHYEEx1xrmRLkhJC5uCCMCOhuOWnyCPyG80YmCVgoHOk8HzYpm1IgdiNItz\/cEcfs2Jn0Ybxi9GG80W\/ghfVAuwevzcGKfwhTiLzwZ5qFdgmx3SWhGbJQ7AmnDP35riuYFgZXly\/1RSTVFWTbVb\/wmwxjPBo5PL9Mn16kNsC+DapZbBGRa4XmXukpdL0k8BsEa16qILD1do6wS1ixqTb0FKyKkW6BfAbWTIegyugLwgnS2Y58FX9OWzkSNgiXGelcU2Wmz5HsGixZZU3rwlb2sPnU7nvtO5+RmwXqoJmu3RaFYboS9Ai1VgEDJ8MDnEXSWM0GI3siJlt6VF7n9JIPe962vwHXB4PECMDWqx+oweBmc\/RbAE3U1ZBIs9b5bPcotFVyA3cTJmGLUa+Q1O9l2wLWJmyoCjhIXvGBfgrZyDBTtFsJ6yBWsEYSvMPAJWT4vpWhYrguSAP0Vy2hhb0XjtPbB4P5wkWAKsY6q7Flue5q6geXFw+LtgZ+Dx\/DAMq3OCQ59DXEAvHcOmrcV6xKLRFXBuGI36RLYtUFcAChPS03mGwy241wXqRDOY1SXeHtgIHM0pgkWLVXMfi2BVlYC9ImDFw6KB98AG4AST0Whkx4CAxgV46QpOcI+AdRsjh8ROuq5vDiCOAow8D6JcAJtQsOFIw9ELfayzBXuSFgtgm\/LjBXG1zfINWixPXIFBwKqT64va5f0t1fX7YBt9AQMqIowwJbiDtxbL7bgCKXcFmUO4SfY8SpONxVZxqI\/oRAwtVs8tFgY0JXjlCk5v8JK\/3XBgqiJ\/+\/JE4tX7DdhaiUy75PVZ59E0ZVMlcVcFwB5Oa\/fAWjPIE+TzKB0jK\/c9sNjkV4MAaCo4hwqGgK1I6LoYrT3j6xacM\/0fACtOn9AsKhPTbDbF8vTBoFGBkcexcrnIxcpTQNgryfLbYEMbRu35cDYjvwdgsUm46wp2fWxCXYFFAlpJwg8hKgBXEAyJ3UvpJpUwVmgoQLqAC1ci7uRdgane5TnXXptgLd9gJusMB6+r9oFxl8G2uauDrPce2AYYVOwaIG4JXtYZ74Zb3GuwHoKFD8M4j2Ohk2C38niW45YCniigMQcOVO5JD16y2sZw6grh3q3bL9jlsqtiuFU6uOl5tYNBwl23\/AZYvGmpHRHhbADyI0ddQdWmrsCAXlqUZX6s0CmDBxNYAce\/2LbjkLOGDuQOonkkaPSMJx5umbcIqtI+h9kqV8d3tetbkacThOYBWFm9xY7Xj\/JxsFXIACjF7NIYwx1thztxLBrjPlhkLWhJous4Dwg4T5CKAZAMgUkGHga8rKJDrkBPGsYB2FObIJQxz2o8TU2zVKzK1Oq3Momypufk9WVHPhzp1McX6HVVEo+CHfd1TV9t5k6Zo2i682wEqaPrDvWxjqLruSvQFQfAEkcB97ekj1YKaSFgCUHIruAvHcByWarTKENTYpwpuA2dHJ67AnJ2\/YTAilOw0N6NKcqimSezL+\/X+Ll4j51fbpvN8r5TpgsMd8fBPsfRKn7eLnWl0SpaDaxgRtpxLmA0VmmaIhovXUXxEBq9uUSmB0m0bKXY4pE+ER4aQW+MDTw\/TvpOvz8aZDQVuVhFKWVszeMoTVsfTu4dbcGqXfK2N2mKJj8l8RSgrExF+rG8poNa7br+sj+GEXdA2utv+FgLtH1vBfQ9\/BkgEBdakLwRWEEQYEjiho3xOAygybJc2n0rGsy6QbYYL5ZecXb8CE9pWAc\/9Wu0A7bNYXZg2rmuk7nWBKe0lB1xBuKkAHYx2Sf77epNsB+pk1jY+oF2XMGavL1vll4I0XpTBMwIVuYnExH8LI29yH2\/X68B+YMvAHvq2oI1J+RthfrW6yYmYXDNi3\/ianePJi+L\/B0ecrdfrfGNgT2mHbCP5C2dHtTbap42JAbbhQihd0umAeIEo6sbeohomsxi39YWrLzOm+o3JKxqltDHkk+ndG2x0pV5sdS77N1PIWqVxfZZCcvjmMUe1RZsuU1bzrtlUTUnkCC8eOg2VZm\/w5nCNTHf8nrySIsNxfMLrvYgM4t9SweDV+1u3ZR5dfqQpwwuHtpqWZ3UYUUG4iw5T7moZ9ih02Rg39AB2DsoyWiW6ttg5uJpLcpTMmxd7AawzSf88LJUFk\/SFUC+xvrSepgDV\/BQ5otbv9ehKQOuovIymdIa7Z1oILdYrlaZvAuWXCK5zk+NO93RKo63ecav0IHFPjVlcUJzVo9leYKIe1BXQCy2tJNqkdcFvx7UI\/0AbHUxG0bRfOZnv1T2E4RZFmbhjhF62HK8NDQQFE2PTwksTGkfCanemarCpuNJDyvh5E3BxoYs3+mc01SN8QOw3nMs6bqi6LqU\/FJ1SnUkJImwWwk6E6Bc5nhOwIUl31MBK3fh7u6RKPXs+nzaNOXHrizKZLZVJ9FXvua1I7GsmtOnvHquIh8H6w0dTcj1ayXdVVuTJKnvb0zWS6BBOQ7WsrXTAcvz95g2vJ+aU9k023cX9XYZCrnq6+b0hTuwWOppeZrBvWwfz265MyykgrSfrmi\/CBaLkbY5SFp1+wbYwD4hiyVGeEMT3ZNmeXKO2cAmDxa7PoMsgXF7uG4oq7c9GJPqE\/64xYaY6B4NxuOxH63641\/4d1KwglKcoxprPwDrSicFtliaqbcpYUjCQBkRLSw0aNedtcPt0swbKwiw+K2NoAzYNQLvl0avHKwW56OVn9eA\/g\/4WNB2MZGDeEsV+W2FRl5tSH7nGOli4kXn7cVEv48lb\/s\/MQhbs0GapnN\/W8EdzqI08kMjXGatYnzyxvMoTYd5YXEOVsjNPhC0HbBWNfPncM5ZKy8UTQqwbrgkwmar2piTPsM8kqiS9szlrLC1+Iiaz1fL3\/c52dpdVxWb03x0IqZ5NfnWbJZvK5WbfAedCMmuXunAQRyC3S90I+4hGmm6rhGvK8UNytyY25pOGkfjSBJ0WjBgjFckmiDdpDnyL8DmxVyNfF8DgnX9OBEcXdM0XYngezHcDdhwJSW40MZZ45HkKJrmJAP87hqKINiZN0ik78OPB8vLTVyFubh7JIa4zkf9+g243Je7u8oLvH2gPeFZGpePPyrYwDoYKd4LNmf9TZygawtw0cEgDx00R4eBH3oF8+9QD6NJgtTHEkUEayfkIBgC0cPCOwRrxUV9tyA4NuC0ClfgjcgpNaFlkJ\/yHX4EnNXBMzbIJ8lw1ZcE5zPA0vrYy9upaopnNLN99dA1H3aPucBVWZmvvFdi1ML1VcWOWtv48xmWqhTH6W\/MbwnFAUpf6SNyB8GOoW7LsW0Bti5AjIWLuINUEyQIDBpQYzjfgnXoOaH+oI8tebjlwVq65IwNWvupKaORAmvwvkUtljQJkvSJYM+IuebbjmoPk7LKv+wec0XBTt8Fa83xjpUUxx40crMdr2aLVhiEcKESmI6xgotPF16GVd0I1iN2pMStwF1Cee2qSsHqQ6iB0RcQwwp61IASD8SYprD8FWRQxqAP3I2PpeGeAmcME\/hOGpYVQn0N\/FwEK+maZCufBJZMsm7MPKnNveBOOZjSGpAFp+sL05+0WOLhirtcF1I6RHjVYoeHRguOoJZeolWZEJsiWPJCsnGYWkAV9zIHO\/NgQ0MaLLBKPJMKH1vN3XjVKarDEKy3gMIDB8u\/4NRQ+s0ZCzDdLAebDBpLMlP+HLCktVPGpZlavUQmWCQKALC1kjyddu+uLq7btKf4PliuOrf13Kfq9naCAHvcyF2Kg8ryO63LAIp9CjaIoDgzcC3XzWwSkrYKi8UtOIkP30lsZeT70LfhlgHhKznVwKKuQFr5WEg\/x5pb2AJhB5D0gtJyqFVsYNnXh63mvlUqL69fLuo367LZvSUTA7q5w5RlkX98pFuWeVH+CbBcsBwSt5YXV1CbdbPFmNy6c4WChfqYfHNCIwfrpYABt3QMwJw3YA3cYACjljTmMoLcoVvHDG\/ZGI9bUB2mgCuwcOMSeBbc0JTXHSWDCM6Y0OocAKt\/KlgOCgpMcVrqiqZ4UzdqZ+Z0U23IiyJFKapQLtNbv7drhjOq4zmNOp0ZuQxjOUigpCWx89rD8aZ8awcs1LWRcEvXwf8mG7CuMVZomBVVuWXhCrjqeJVoJIRI4MZAV5AHZ5tZgocTNUgGweAl6MvPB0u3I\/U6crncNG9f4M2LqR5mt0Sz+\/BTexBQ1nKoFTP9BQlNJU13dE3ILdbZFM4VYNEupWJ7ogO9crC4B0SgtVngChBsMOiTc9JvgbICVyDg1jGB+h8PDtue0ck+HyxmComu2+okX6C5ofu8tgVasmo+0V53\/KGOryAEQzA9Yj5hjC\/mw4EtUYsFx6oPjF2wcONKo6E\/xN\/zZy8HC5M4H7Yx6qNgC9YYA8UkJXMv+Ah9LIxa9giGqQRHJqgCl+z8jM\/Dmff5YGX18ZyWE9GNyrWXszJP9yAUhRqqfEtnulf38vtbPqkadBKGtzLsiuO4uU7Btvr5Jrjt4OVhSLR3zYXFkpuadMeK+yIq8HBvXiP3ALkrgDh2DGSVGPfj0sFr71\/0yWAxGbh5BARXv+dVsQxpQ+5GRJOVy928kOvh8Z1NysH2nz2j++PcIVwgxlZFVFAFE5TA\/Vp+Hm7BdlpBa+yu5mzAWlkrn\/sXPhZ3iMXwo7x9sNUF1iVjqhHOqOyl1z4fLIFTvsnRXq+\/yer0nia76lBIYK4fMMKtXT8eferOXhmnNB+3Qs\/zslk+qcLadpiVGiHc7mCxWGks6ZE\/jJ1i5pWBFdvjqmVZHhnwgx2wWxWuoDrKJxHuUilcgYYTBNxfRwLZKp0EkjN6AT2j9TVgiaft5v7gbtJs1zePLLnjm\/k89\/JmevwRG3u5Al13hFGcpgn4PHB3Buz8lEaL5QzqtREslyU4YudblhGsBZtkJSkm0VG60mLvh2A93J4ULVuDRNoHC8MahGvDYmO0k0bzQRQLEDZ\/DVjiaif0yToX9d2\/atSSe\/f8Ww+F2QPr7GxF0pJxQVFz+g60oSsg1mQr2EHCTQqYK1jGuMdGhwwXli4fAVu4AhcXE5R+X9c0Gm5ts1sBjGeQLDCykZKfUdeU1RcMXhuyJp8bJ6jS5m+2uxKvH8U3H2O0l4T57hAzlHAPfd9uwBK4OxN0icRbjpMmjiMgWLeVKk6\/n\/jPegHWWMZ9OBSWtb6DfVUTR+8fgHUc\/Tu4a2\/Vx\/Uvx077eh99LDk\/fWRENoLqcY10W5JXeEZN76PF9nWn\/wVgicz8URu13q0syua0k29KaKs\/eKTZ3uDVGkYrm1iPPYr8fEIe+FEiJPZsWZ3N58OiMWy1lqFRhFugqh+N7MS2RwMfsgvekGi8hyGcD+fzkPaNE8Fe+dUWaYLMlTsjL2Y4l10O5sPh\/NmCnzzAM8aRD89EaQ3zzp8PlpfFyd1V7eq8mxcglyq1Wu9++sOHy+2FW4YbVLNWa5GFwfapOh4Z18OAcy2Yuu\/+WyBkELYrY0GYLZdZlR5Jq7v3qj6gBjyv77bC5WLpuVBCDpGIYWDJOC0PJ4eRX\/SALGtl5Iy0mNwN8rLyD9E7zzYU+Un7USz6lKft9hsPLzoO9qfkFpe3hC1e+nadxPiIsu3Pqsh592mc8NSHDUrRNN\/h+l+ADePBeJmF4QKmnVpqnXoR\/M\/pBB5zmiWOkhDfB5kazf7y7S6\/SScANpQ0IX9qkaaMT+CRWb9FJwC2GpFQChJ6jhP\/ZbieAljOqDb8KE1Tv\/EXeqzkKYDlIBIi+t3X9qU6EbB\/PTGwH6Q\/3glL\/1PJ\/\/pbPSX2bf35T\/V3\/rdT6pr9t1O5fu9\/lFb6\/79MvMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExPSX178BqVM7R09GGvgAAAAASUVORK5CYII=\" width=\"500\">","ca18a4b1":"# **Inroduction**","07f3b686":"<font size=\"5\">I looooove learning! I tried almost all these platforms and they are really great! Never stop exploring something new on your way :)<\/font>","fbc3dba0":"<font size=\"5\">Yeap, <em>TensorBoard<\/em> indeed has some popularity in Ukraine!<\/font>","003f926e":"# **Tools to help manage machine learning experiments**","01520bc2":"# **What about automated machine learning tools (or partial AutoML tools) on a regular basis**","6b284597":"<font size=\"5\">The same for algorithms. They are all good for their stuff! But the most popular in Ukraine are <em>Regression<\/em> and <em>Decission Trees<\/em>. CNNs and Transformers also have their positions. It's cool!<\/font>","d79ec97b":"# **Current yearly compensation (approximate $USD)**","9d31bb59":"<font size=\"5\">\n<img src=\"http:\/\/softwareengineeringdaily.com\/wp-content\/uploads\/2016\/09\/scikit-learn-logo.png\" width=\"600\" height=\"300\">\n<img src=\"https:\/\/camo.githubusercontent.com\/37a83e8eca1db15cf70475cc6bdd4880b1f7b04d\/68747470733a2f2f7777772e74656e736f72666c6f772e6f72672f696d616765732f74665f6c6f676f5f686f72697a6f6e74616c2e706e67\" width=\"600\" height=\"300\">\n<img src=\"https:\/\/keras.io\/img\/logo.png\" width=\"600\" height=\"400\">\n<img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAT4AAACfCAMAAABX0UX9AAAAxlBMVEX\/\/\/\/uTCwlJSUAAAAhISEiIiIXFxcUFBQcHBwRERHR0dHj4+PuSSgNDQ2Dg4NQUFCgoKCtra2amppmZmbw8PDuRiN1dXXtQRr5zMbp6enNzc01NTX5xLv\/+vnuRB\/4+PhAQEAuLi7Z2dnCwsL8495JSUn1mor1oJH0kYD+9vTtNgCAgIAxMTGQkJCbm5u0tLReXl796+jziHbyfmlhYWH4urD7083wYUTvWTz3sKXwaFDydl\/2rKDuUTP2pZfziXnxcFrwZkzh9DwPAAAMHElEQVR4nO2dCXeaTBSGkXUQiLtEMbinSYzVJI1Z2rTN\/\/9T3x1QGGBAQPvF5Nzn9LSJMCyvd+YuM1BBQBAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQTwG5x99BZ+ZcxflK8\/GtFG+0gxMlK88G9OsoHxlOQf1UL6yDN5APZSvJJsOVQ\/lK8fAVw\/lK8Wm4quH8pXB8xooX0kGO9tD+Uqw9RooXykGjHqmOfvoy\/lknL+F6lXcx8i26+uLD7qqz0LoNWjX\/c1uml2+Pj08pjVEhIjXANv7Ftlku6bZsR+uP+raTh\/Wa1TsiHqzbae2Lz\/q4k4e1mtU3KhO9+728xsc\/\/hEvca36MZnjKSz2US8RryPBtLagw+5ulNnYGbYniD87Ow6791HXN2pE7W9hHrgeP1NndcPuLiT5zyz5wIXVzewh+m+fZE8ZNhfLevHOlim19jy+6njvj18EfUEQ9WlxZGOle01dtxtzr+KeCCfLqpnxzlUVrx3AP3qjsnEaOdoMKlm0jvWhVEM7VjybSrZXiOFx32mKClbxPHtqNZqToZ7GtSIkoF1tKGKcjT5ourltr2Xm\/c96a\/E3LssE10arbIF\/IzyzZ73ew0OL3bF3VM+kERR1i1A11SiiPCbNu9nNajphAEaKLrX3kc6RfkunjqlbI8Ol\/ZV5j6SKM\/rHs2z1tjSQRAiTzMaLLsMLVBvVGeZ5L24PBxHvougFFDIa7zc+HL\/ytpJEkkr\/K3dWFuKKKtZ+rH0oMfX8l5PcY4j3wujXn6v8bKzWDfLfUTlg0i1QWRRHu9zIFsM+fTlu2MCvgI919616vzMGP7i8gnCSlZEq5nvJMYnsD6m6xaI976FraL1\/ChJ+YTvliiP8oSAn0K+czvU4b5AGTRU3aykF2A48rVFRZSquc5x+vJdvwddt1gh5SIoX1XcdO\/LkU84U0U9X+9Nla83bSwXi+WqGh9E29Wp4f1QXdUb2x\/ZNmfNRj\/4lJGvN101VtH9c\/EYGtFzsWz2Lkzz0r0HT74GpJpd+LdWq60TF7yCT1e7X1JcR7XrEEtTVc0S581IGtcYjSXaeloTIUpUnXUQ6EyCNrLTnfqq7+Qb9lsjAvsTp5WvV4SEZZabohOQofLp5seTb6X6H3YtIjXiG+cqEYN75lpfe2GpsqjIRKZ\/Ww57iLql0KjoTPNCdFGRvm\/bdHVoA7tD9ijKRFp7oftWvuoPicje\/rIqreKny2QQjHydh0INKcHwl264WfL1QZxRbNuEsA148vUdDUJvsLt1zdFViCKlRdiD62DYU+EMUkXVkkBlzf8mqrSNrOu3I4eG7jD2Lr3DU\/mGTRBPBdODP1TwxBeaxZ9gAOtsirTzmAXmZ7+k7JLSeQntvMMaaBVLI5qaKIVBNUe+iUjASGoro9duG5PFWBVFvRtsBfnIdKUr6vhsWl2dOYrfxiGioo6aE6NnGNV6jaiSd1qQjyy6GlFvF9PJZNKo0W9jXKCocxf0Xfc+f6uAy8D8nlL2SHEdmvft163tDwHDkSyPQmNKjn0GKEFuQwvpdXUII4ODgHxK05GtxTYw8vpobwxtRKZXThaOt92gdqzqo8bujE2wPy1nTEp5CfpuqYVAs3DgTGnOkW\/oyFsL68Fg5EQiwKkUufyk9bVUUXYiFgu3rFi7T0A+0YnXZboaBJpRK\/ctjMqnkC7jvRdw+FHOlAj4G6QOZYyPmXtLy3w58oFEyraHwNVKkfy3C4bJ3GhCvqkK9xur2Cw035FTqHwK05kpfejfErfUQOWL1nAMum\/u3jt7CwavcjO3QczdeeBH3En5JmB82jba6qvRzYYjE1auhHwwWlrf4+cYy4GkVD5Si5rPnIgqv85FXUd0rmO4JqKUWVBjGQSOwy637OLuydwNfvzMIyFfD+5GkXbhniMrbFdsaKLFRg5x+QwJ+lbCOKDV7vug8lnRes4E+uOcnyNysg4Yl63csctv97C+KwhXuyPYfMcdk69Xh0GcGeoh\/9UZy5jLUXXirmOpx32Nd9A5RG3+j9Tzxqy9rvHa+IdPyreELzB36PIQDF1l1+w97npvSuhC5RsOh+12u2dMGt0xhAaiFV6ycQvOI\/xNit1O3Ppa\/K4FI6blq+4FLrGNJDXD5sjXLCDfRVijLx70+cxudoEPv1gDbsJp\/Viva\/PRGOJSEI9IZ8zYRG8u6L1NPTbGx+Rr18Bnc04CAdC2x4J8clSrNpgmSanvHCjf9c500kauHAS+4yd3s0RDA0CWvbSI5ksR6wA3HIzecKckFuVF5Zs4ikI4J6lKou7fM0c+CI7SQpED5QtMxyy\/aCX0HdzNEtXMh6g0J5\/GbuU2HO76EEVHLz0u35jt6sxu0m4ETcrXg6Cv9m\/k24RhR84WSXbDp\/nM3UzlG3nMfywa02RIRTvs1tW1iOJEd4i5jglY0pxzknaWfDD6rv+NfEG9oLTjDV2v+cYt2UOkUcusLINFbXtsb6yo0YCXZ30jzjGMjM77D60vcJsZ9c59XB4on7AGf+L5Cwjf4m41Jp8BY5\/KOUQf5PMtmD\/2Of\/GdYTylV\/T8juQj+t99su3S3Mh4I\/nC1zPyzkaiLbNermeNzUN+wrW194WWaAHavHcihP3WZw5Yoh+dP+npHxeUJiSR5zS2PfMTfv2y0cDfdpp6T9xK4lnHeBn1OSCvN4oCHg48kHWkayZbQ\/\/CTzvXvkMi1ZPadCXuEtOzqvIieLJd3039PHkM1RREflVgFOK+965m3PIJ8yJ7PT6qqIn+mWi4vKDiHHvLAyJEoSOHPlolYasuSc+payD3\/\/zyLeCnGvVJZwdE\/L1wU3Hqk\/DlioGExQ8+bx6H7docEo5L3+pQR75YOyS56KoJ28xWW3uaqKisvc3BNcQemyefMIZLQIuWafe9nOfQ+U7ZsWFX2\/NI59XIgcLSU5SJ+c6vHKhuggOWa2BZwiHQ658bTpTpP8IPh82atJuruMQ+Zh6X1nf8SeYbONPduSSb0JTO5575My09Rzoi6remlYnk2pjbtGZo1AwrnyCMVLp3KaznPb702VN14nEzvOyFJIvrDa7h1ab\/\/KXWeWSj47uosoJznjzvMZap2UvS74dw19gireMK+bLB20sOj2u0QWqGhi67M9wHCrf3aFPqZ3vy1sk3UqplLOs6PwZJzE1NFVP1AiGddEisr\/Wmejqkj18XVI1bm20Oba2KwkUmUhjf2rSkIgVCyObklpgovzQmbZw8EyRf9lsNvZP\/E1JMFsRodftdjk+s91Yj2RLsoizji5xEabQgL\/Op13\/4bVRx7XdEheht16vYxNPKzhA3rWvgvArXJ124DzvQU\/40gmaYquWjep0Ou0XbdOnbfItLczFgasMgomiUq0D2hadETnkCB\/FfeA8SiwzmIULZA56PrphFRivT4qDVlgFI5\/5ekjfHUIqJn1K42PX9xV2vo\/hJPtB7yapyoqaUhM5eZhFQgVXl14HK\/LNp4PeTHKmibmf9Dg1rl\/Dtc38okkKzNrmw4yPOo602YjTZ8CsrL8qMIQFXreg7AnouoijPqr2\/xJaUYFnioRvoeqHud0JJGa3R4zF\/m9mFfapopz2x6hXQHOWnp8dGHMSnxz\/ZDCpR179wkJL2iTHXrrOclWt1kdEJPGqwOci8kSl\/bq\/8Dz7GQpulsr2INgbE9WSJF0WiVP8aZST4pp9GrrzvC\/+Gzwzj\/+6Jb3uVJJFD3Vc9FGUk4Md\/iqmnfmmkdm9Xeq1BzF6TUeSLLC\/lArJpyLyLoNKx71PE3B2ZTOmd8j8uveQWSO+4OqTMnBZ\/Spu5X6Q9AgX5\/dvLrtboUDxSxN5ZyS1QLvy53ETJmPXm8erit0xo+p94AWfGJu3TkS\/itlxK8+vD38uLy\/\/PLw\/V9yogYLCZce9L8nsya7EMc1Ox3XdTsc0E5sKP4H5xbm4tBMipWK\/fp13WR2Lx2d3v3Bev+1c4RsQk1xf2p394pn2K768lM\/mobNHQNN+T3t6FxGE85923Mcy2kFA84L9NpPZt3f6enCedm\/32G33c725\/PvWscN4BYJAu\/J+P0DDy8vs\/Nf93zf7BgDlHn4PNpihlQD\/iwkEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQRAEQU6S\/wCIV\/TfHmqm6wAAAABJRU5ErkJggg==\" width=\"400\" height=\"300\"><\/font>","54439e4e":"# **Most usable cloud computing platforms**","aaa7c0ea":"<font size=\"5\">As it might be seen, most companies not use ML in production, but put effort in investigation of this new exciting area!<\/font>","20b0dee1":"# **Tools allocation**","3dc90ebf":"# **For how many years have data scientists used machine learning methods?**"}}