{"cell_type":{"145856e0":"code","260e831a":"code","f7666337":"code","100caeba":"code","f298e2e2":"code","685404d4":"code","c2538ac8":"code","a208d5f4":"code","4b3ae306":"code","5b4e99a3":"code","1e3efc42":"code","608e3366":"markdown","dfee35db":"markdown","4bebad35":"markdown","d7c292b8":"markdown","5aaf78b8":"markdown","be53d3ee":"markdown","60e4f575":"markdown","d6b085cc":"markdown","4c07a800":"markdown","624391e2":"markdown","fc8a0182":"markdown","e28d8c88":"markdown"},"source":{"145856e0":"# General Data Science\nimport numpy as np\nimport pandas as pd\npd.set_option(\"display.max_columns\", 50)\n\n# Combinatorial Optimization\nfrom ortools.linear_solver import pywraplp\n\n# Miscellaneous\nfrom pathlib import Path\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","260e831a":"data_path = Path(\"\/kaggle\/input\/emoji-diet-nutritional-data-sr28\/\")\nnutritional_information_path = data_path\/\"Emoji Diet Nutritional Data (g) - EmojiFoods (g).csv\"\nnutritional_requirements_path = data_path\/\"Min Dietary Reference Intake (DRI) - Sheet4.csv\"","f7666337":"nutritional_information = pd.read_csv(nutritional_information_path)\nnutritional_information","100caeba":"nutritional_information.set_index(\"name\", inplace=True)\nnutritional_information.drop(\"emoji\", axis=1, inplace=True)\nassert nutritional_information.isna().sum().sum() == 0, \"Missing data.\"","f298e2e2":"nutritional_requirements = pd.read_csv(nutritional_requirements_path)\nnutritional_requirements","685404d4":"nutritional_requirements = nutritional_requirements.T[0]\nnutritional_requirements.name = \"nutritional_requirements\"\nnutritional_requirements.fillna(0, inplace=True)\nnutritional_requirements","c2538ac8":"solver = pywraplp.Solver(name=\"nutrition_solver\", problem_type=pywraplp.Solver.GLOP_LINEAR_PROGRAMMING)\nobjective = solver.Objective()","a208d5f4":"items = {item: solver.NumVar(0., solver.infinity(), item) for item in nutritional_information.index}\nfor item in items.values():\n    objective.SetCoefficient(item, 1)\nobjective.SetMinimization()","4b3ae306":"constraints = {item: solver.Constraint(requirement, solver.infinity()) for item, requirement in nutritional_requirements.iteritems()}\nfor item, item_info in nutritional_information.iterrows():\n    for metric, value in item_info.iteritems():\n        constraints[metric].SetCoefficient(items[item], value)","5b4e99a3":"status = solver.Solve()\nif status == solver.OPTIMAL:\n    print(\"Found the optimal solution!\")\nelif status == solver.FEASIBLE:\n    print(\"Found a feasible solution.\")\nelse:\n    print(\"Problem not solved.\")","1e3efc42":"for item, value in items.items():\n    solution = value.solution_value()\n    if solution > 0.:\n        print(item, \"-\", solution, \"grams\")","608e3366":"Since this table only contains one record, we will convert it to a pandas Series. We will also assume that all missing values have no minimum recommended daily dose and therefore set their value to 0.","dfee35db":"Let's also load the provided nutritional requirements data as a pandas DataFrame and view its contents.","4bebad35":"# Diet Optimization with OR-Tools\n\nLet's use the combinatorial optimization library [OR-Tools](https:\/\/developers.google.com\/optimization) to solve a modified version of the [Stigler diet](https:\/\/en.wikipedia.org\/wiki\/Stigler_diet) problem. The Stigler diet problem was originally conceived as an exercise in minimizing the monetary cost in eating a collection of foods while intaking at a minimum the recommended dietary allowance for 9 nutrients.\n\nFor this exercise, we will use this provided dataset to minimize food consumption while intaking at least the necessary amount of a number of nutrients. We'll begin by loading in the libraries necessary for this analysis and identifying the data file locations.","d7c292b8":"We wish to minimize the amount of food consumed, so we will reflect that in our objective function. The objective function will consist of a linear combination of all food items, each with a coefficent of 1, and the possible values for each item will be set to range from 0 to infinity inclusively. We will also set this objective function to optimize by minimizing its value.","5aaf78b8":"Let's use this solver to see how many grams of these food items are necessary to meet the minimum nutrition requirements.","be53d3ee":"Let's use this information to create Path objects for the relevant files.","60e4f575":"We will also set the nutritional requirements as constraints to this optimization problem. For each nutritional metric, its constraint will be set to a linear combination of each food item with its corresponding value for that metric as its coefficient. This will be set to be equal to a value between its minimum requirement value and infinity inclusively.","d6b085cc":"To my utter delight, it seems that kiwi, peanuts, and a whole lot of ice cream is all that is needed.","4c07a800":"Viewing the above, we can see that we have nutritional information for 57 different food items. Let's set the food item name as the index for each row, and drop the emoji column. We will also confirm that there is no missing data in this table.","624391e2":"Let's now instantiate the solver and objective objects that will be used for this optimization exercise.","fc8a0182":"Let's load the nutritional information data as a pandas DataFrame and view its contents.","e28d8c88":"Let's now run the 'Solve' method of this solver we constructed, and check to see if we found an optimal solution."}}