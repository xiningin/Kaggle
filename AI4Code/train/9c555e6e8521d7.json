{"cell_type":{"3db6ad00":"code","fd7a9056":"code","133cbdc1":"code","ddfd9331":"code","6df4a388":"code","1a3abf03":"code","50cf145e":"code","a4038cbb":"code","38321be6":"code","49d55634":"code","c380ae3e":"code","c6e25bac":"code","729567fb":"code","4a2aad38":"code","22e685a5":"code","1faf8be6":"code","bd9cea8e":"code","a09260ca":"code","90501b05":"code","bcd94841":"code","ae2bb12a":"code","5f20fa14":"code","4d599fe5":"code","90779be6":"code","87f19720":"code","c147aa2b":"code","7af5a047":"code","9330b7f7":"code","897fecbb":"code","3d92a25d":"code","ed1340cb":"code","8df54d0a":"markdown","1026a17c":"markdown","97916313":"markdown","91ec2a7d":"markdown","3577b214":"markdown","e3cc9c55":"markdown","0ef33d88":"markdown","93912edd":"markdown","7a34de2f":"markdown","ce93aace":"markdown","4a32a9d8":"markdown","232a49a7":"markdown","ca4ee2c7":"markdown"},"source":{"3db6ad00":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import make_scorer, confusion_matrix, classification_report\nfrom tpot import TPOTClassifier","fd7a9056":"#read the data\ndf = pd.read_csv('..\/input\/mines-vs-rocks\/sonar.all-data.csv', header=None)","133cbdc1":"#load the data\ndf.head()","ddfd9331":"df.shape #Diminsions of the data (207 rows and 61 columns)","6df4a388":"df.tail()","1a3abf03":"df.info()","50cf145e":"df.describe()","a4038cbb":"# rename the last column to Target Column\ndf.rename(columns={60 : 'Target'}, inplace=True)","38321be6":"df.Target.value_counts() # We have 111 Mines and 97 Rocks in the dataset","49d55634":"df.columns[df.isna().any()] # no null values","c380ae3e":"df.groupby('Target').mean()","c6e25bac":"plt.figure(figsize=(20,12))\n\nplt.subplot(2,2,1)\nsns.countplot(x='Target', data=df, palette='autumn')\n\nplt.subplot(2,2,2)\nMine = df.Target[df.Target == 'M'].count()\nRock = df.Target[df.Target == 'R'].count()\nplt.title(\"Distrbution of the Target Column in the data\", {\"fontsize\":20})\nplt.pie([Mine, Rock], labels=['Mine', 'Rock'], explode=[0.01,0.01], autopct='%.2f%%', colors=['yellow', 'lightgreen'])\nplt.legend()\nplt.show()","729567fb":"# Change target column values to 0's and 1's\ndf.Target = df.Target.apply(lambda x: 1 if x == 'M' else 0)\ndf.Target.head()","4a2aad38":"df.Target.tail()","22e685a5":"df.describe()","1faf8be6":"# Histogram for each column\ndf.hist(sharex=False, sharey=False, xlabelsize=1, ylabelsize=1, figsize=(12,12))\nplt.show()","bd9cea8e":"# Distrbution for each column\ndf.plot(kind='density', subplots=True, layout=(8,8), sharex=False, legend=False, fontsize=1, figsize=(12,12))\nplt.show()","a09260ca":"df.groupby('Target').corr()","90501b05":"# Correlation\nplt.figure(figsize=(25,15))\nsns.heatmap(df.corr(), cbar=True)\nplt.show()","bcd94841":"#plotting some correlation for better understanding\nf, axes = plt.subplots(ncols=4, figsize=(20,4))\n\nsns.boxplot(x=\"Target\", y=10 , data=df, ax=axes[0])\naxes[0].set_title('10 vs Target Postive Correlation')\n\nsns.boxplot(x=\"Target\", y=35, data=df, ax=axes[1])\naxes[1].set_title('35 vs Target Negative Correlation')\n\n\nsns.boxplot(x=\"Target\", y=47, data=df, ax=axes[2])\naxes[2].set_title('47 vs Target Postive Correlation')\n\n\nsns.boxplot(x=\"Target\", y=44, data=df, ax=axes[3])\naxes[3].set_title('44 vs Target Postive Correlation')\n\nplt.show()","ae2bb12a":"X = df.drop('Target', axis=1)\ny = df.Target","5f20fa14":"X","4d599fe5":"scaler = StandardScaler()\nX_scale = scaler.fit_transform(X)\nX_scale[0]","90779be6":"X_train, X_test, y_train, y_test = train_test_split(X_scale,y,test_size=0.25, random_state=195)","87f19720":"len(X_train)","c147aa2b":"len(X_test)","7af5a047":"def my_custom_accuracy(y_true, y_pred):\n    return float(sum(y_pred == y_true)) \/ len(y_true)\nmy_custom_scorer = make_scorer(my_custom_accuracy, greater_is_better=True)\n# Automated ML\nmodel = TPOTClassifier(generations=5, population_size=200, cv=10,\n                                    random_state=100, verbosity=2, scoring=my_custom_scorer)\n#Training the model\nmodel.fit(X_train, y_train)","9330b7f7":"print(f\"Accuracy of the model on the Testing data: {model.score(X_test, y_test) * 100}%\")","897fecbb":"print(classification_report(y_test, model.predict(X_test)))","3d92a25d":"cm = confusion_matrix(y_test, model.predict(X_test))\ncm","ed1340cb":"plt.figure(figsize=(8,5))\nsns.heatmap(cm, annot=True);","8df54d0a":"**<h3>Exploaring the data<\/h3>**","1026a17c":"<h3>Splitting the data into Training and Testing Data<\/h3>","97916313":"M -> Mine<br>\nR -> Rock","91ec2a7d":"<h4>Scalling the Features<\/h4>","3577b214":"<h3>Classification Report<\/h3>","e3cc9c55":"<h4>Assigning Feature and Target Variables<\/h4>","0ef33d88":"so it looks like that the coordinates of the Mine is always higher than the rock","93912edd":"<h3>Accuracy of the model<\/h3>","7a34de2f":"Best Pipeline tpot generated:<br>\nRandomForestClassifier(MLPClassifier(RFE(input_matrix, criterion=entropy, max_features=0.55, n_estimators=100, step=0.4), alpha=0.001, learning_rate_init=0.001), bootstrap=False, criterion=entropy, max_features=0.7000000000000001, min_samples_leaf=14, min_samples_split=4, n_estimators=100)","ce93aace":"<h3>TPOT for auto ML<\/h3>\nUsing TPOT for Automated Machine Learning that optimizes machine learning pipelines using genetic programming.","4a32a9d8":"1 -> Mine<br>\n0 -> Rock","232a49a7":"<h3>Data PreProcessing<\/h3>","ca4ee2c7":"53.37% Mine<br>\n46.63% Rock"}}