{"cell_type":{"af297193":"code","ab91abef":"code","d44f2571":"code","e98534a7":"code","7676396c":"code","126adc34":"code","d35fe0d1":"code","1e0bfb3b":"code","bcb69172":"code","b7829c3b":"code","c88903f7":"code","bf686e0d":"code","04e78eab":"code","9caacb2f":"code","74c18343":"code","52e79368":"code","97e8ba3c":"code","e6679001":"code","f8eec4cb":"code","4a5d828b":"code","70d83ecc":"code","e55685d4":"code","6dfc5a33":"code","d7f1228e":"code","ad14312a":"code","7d50792c":"code","da9653f2":"code","5162f667":"code","e1fc4f2f":"code","cb73763f":"code","6ca522e3":"code","d5139d28":"code","17c3064a":"code","98b900bb":"code","1382f878":"code","a601493b":"code","54fa545c":"code","5fd35c03":"code","bb6404fa":"code","e763fc83":"code","014776ad":"code","5d74166b":"code","47c53f2e":"code","95480015":"code","47f576d1":"code","2bce5ba6":"code","12965bc4":"code","16ad711d":"code","6a04d660":"code","813f9f29":"code","bc9d6e62":"markdown","45e8871f":"markdown","d9909785":"markdown","3cd7e11e":"markdown","e13d4e1f":"markdown","e09e5ca0":"markdown","c770356d":"markdown","00a2001c":"markdown","4337d6f7":"markdown","49e72874":"markdown","12cacf2f":"markdown","9d84af48":"markdown","ae6c6adc":"markdown","71cb95f8":"markdown","976f101b":"markdown","253233f4":"markdown","cad4f714":"markdown","bfd264e1":"markdown","178ba14e":"markdown","04b4d0c8":"markdown","c313afb8":"markdown","c13a69b1":"markdown","29cb407a":"markdown","9935d54a":"markdown","1c9722c3":"markdown","933d7880":"markdown","1f491bff":"markdown","c33ae2ca":"markdown","edec19d6":"markdown","cfc5ed31":"markdown","41300c55":"markdown","366cd276":"markdown"},"source":{"af297193":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n%matplotlib inline\nimport itertools\nplt.style.use('fivethirtyeight')\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import  accuracy_score, f1_score, precision_score,confusion_matrix, recall_score, roc_auc_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\nfrom sklearn.svm import SVC","ab91abef":"df=pd.read_csv('..\/input\/diabetes.csv')","d44f2571":"# Lets look at some of the sample data \ndf.head()","e98534a7":"df.describe()","7676396c":"df.isna().any() # checking No. of Missing Values.","126adc34":"print(df.dtypes)","d35fe0d1":"df.head(50)","1e0bfb3b":"# Calculate the median value for BMI\nmedian_bmi = df['BMI'].median()\n# Substitute it in the BMI column of the\n# dataset where values are 0\ndf['BMI'] = df['BMI'].replace(\n    to_replace=0, value=median_bmi)\n\nmedian_bloodp = df['BloodPressure'].median()\n# Substitute it in the BloodP column of the\n# dataset where values are 0\ndf['BloodPressure'] = df['BloodPressure'].replace(\n    to_replace=0, value=median_bloodp)\n\n# Calculate the median value for PlGlcConc\nmedian_plglcconc = df['Glucose'].median()\n# Substitute it in the PlGlcConc column of the\n# dataset where values are 0\ndf['Glucose'] = df['Glucose'].replace(\n    to_replace=0, value=median_plglcconc)\n\n# Calculate the median value for SkinThick\nmedian_skinthick = df['SkinThickness'].median()\n# Substitute it in the SkinThick column of the\n# dataset where values are 0\ndf['SkinThickness'] = df['SkinThickness'].replace(\n    to_replace=0, value=median_skinthick)\n\n# Calculate the median value for SkinThick\nmedian_skinthick = df['Insulin'].median()\n# Substitute it in the SkinThick column of the\n# dataset where values are 0\ndf['Insulin'] = df['Insulin'].replace(\n    to_replace=0, value=median_skinthick)","bcb69172":"df.head(50)","b7829c3b":"sns.countplot(data=df, x = 'Outcome', label='Count')\n\nDB, NDB = df['Outcome'].value_counts()\nprint('Number of patients diagnosed with Diabtetes disease: ',DB)\nprint('Number of patients not diagnosed with Diabtetes disease: ',NDB)","c88903f7":"columns=df.columns[:8]\nplt.subplots(figsize=(18,15))\nlength=len(columns)\nfor i,j in itertools.zip_longest(columns,range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2,hspace=0.5)\n    df[i].hist(bins=20,edgecolor='black')\n    plt.title(i)\nplt.show()","bf686e0d":"df1=df[df['Outcome']==1]\ncolumns=df.columns[:8]\nplt.subplots(figsize=(18,15))\nlength=len(columns)\nfor i,j in itertools.zip_longest(columns,range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2,hspace=0.5)\n    df1[i].hist(bins=20,edgecolor='black')\n    plt.title(i)\nplt.show()","04e78eab":"sns.pairplot(df, hue = 'Outcome', vars = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin','BMI','DiabetesPedigreeFunction','Age'] )","9caacb2f":"sns.jointplot(\"Pregnancies\", \"Insulin\", data=df, kind=\"reg\")","74c18343":"def set_bmi(row):\n    if row[\"BMI\"] < 18.5:\n        return \"Under\"\n    elif row[\"BMI\"] >= 18.5 and row[\"BMI\"] <= 24.9:\n        return \"Healthy\"\n    elif row[\"BMI\"] >= 25 and row[\"BMI\"] <= 29.9:\n        return \"Over\"\n    elif row[\"BMI\"] >= 30:\n        return \"Obese\"","52e79368":"df = df.assign(BM_DESC=df.apply(set_bmi, axis=1))\n\ndf.head()","97e8ba3c":"def set_insulin(row):\n    if row[\"Insulin\"] >= 16 and row[\"Insulin\"] <= 166:\n        return \"Normal\"\n    else:\n        return \"Abnormal\"","e6679001":"df = df.assign(INSULIN_DESC=df.apply(set_insulin, axis=1))\n\ndf.head()","f8eec4cb":"sns.countplot(data=df, x = 'INSULIN_DESC', label='Count')\n\nAB, NB = df['INSULIN_DESC'].value_counts()\nprint('Number of patients Having Abnormal Insulin Levels: ',AB)\nprint('Number of patients Having Normal Insulin Levels: ',NB)","4a5d828b":"sns.countplot(data=df, x = 'BM_DESC', label='Count')\n\nUD,H,OV,OB = df['BM_DESC'].value_counts()\nprint('Number of patients Having Underweight BMI Index: ',UD)\nprint('Number of patients Having Healthy BMI Index: ',H)\nprint('Number of patients Having Overweigth BMI Index: ',OV)\nprint('Number of patients Having Obese BMI Index: ',OB)","70d83ecc":"g = sns.FacetGrid(df, col=\"INSULIN_DESC\", row=\"Outcome\", margin_titles=True)\ng.map(plt.scatter,\"Glucose\", \"BloodPressure\",  edgecolor=\"w\")\nplt.subplots_adjust(top=1.1)","e55685d4":"g = sns.FacetGrid(df, col=\"Outcome\", row=\"INSULIN_DESC\", margin_titles=True)\ng.map(plt.hist, \"Age\", color=\"red\")\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Disease by INSULIN and Age');","6dfc5a33":"sns.boxplot(x=\"Age\", y=\"INSULIN_DESC\", hue=\"Outcome\", data=df);","d7f1228e":"sns.boxplot(x=\"Age\", y=\"BM_DESC\", hue=\"Outcome\", data=df);","ad14312a":"df[\"INSULIN_DESC\"] = df.INSULIN_DESC.apply(lambda  x:1 if x==\"Normal\" else 0)","7d50792c":"X=pd.get_dummies(df,drop_first=True)\nX=X.drop(['Outcome'],axis=1)\ny = df['Outcome']","da9653f2":"X.head()","5162f667":"y.head()","e1fc4f2f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2,stratify=y, random_state = 1234)","cb73763f":"sc_X = StandardScaler()\nX_train_scaled = pd.DataFrame(sc_X.fit_transform(X_train))\nX_test_scaled = pd.DataFrame(sc_X.transform(X_test))","6ca522e3":"logi = LogisticRegression(random_state = 0, penalty = 'l1')\nlogi.fit(X_train_scaled, y_train)","d5139d28":"xgb_classifier = XGBClassifier()\nxgb_classifier.fit(X_train_scaled, y_train, verbose=True)","17c3064a":"random_forest = RandomForestClassifier(n_estimators = 100,criterion='gini', random_state = 47)\nrandom_forest.fit(X_train_scaled, y_train)","98b900bb":"svc_model_l = SVC(kernel='linear',probability=True)\nsvc_model_l.fit(X_train_scaled, y_train)","1382f878":"svc_model_r = SVC(kernel='rbf',probability=True)\nsvc_model_r.fit(X_train_scaled, y_train)","a601493b":"kfold = model_selection.KFold(n_splits=10, random_state=7)\nscoring = 'accuracy'\n\nacc_logi = cross_val_score(estimator = logi, X = X_train_scaled, y = y_train, cv = kfold,scoring=scoring)\nacc_logi.mean()\n\nacc_xgb = cross_val_score(estimator = xgb_classifier, X = X_train_scaled, y = y_train, cv = kfold,scoring=scoring)\nacc_xgb.mean()\n\nacc_rand = cross_val_score(estimator = random_forest, X = X_train_scaled, y = y_train, cv = kfold, scoring=scoring)\nacc_rand.mean()\n\nacc_svc_l = cross_val_score(estimator = svc_model_l, X = X_train_scaled, y = y_train, cv = kfold,scoring=scoring)\nacc_svc_l.mean()\n\nacc_svc_r = cross_val_score(estimator = svc_model_r, X = X_train_scaled, y = y_train, cv = kfold,scoring=scoring)\nacc_svc_r.mean()","54fa545c":"y_predict_logi = logi.predict(X_test_scaled)\nacc= accuracy_score(y_test, y_predict_logi)\nroc=roc_auc_score(y_test, y_predict_logi)\nprec = precision_score(y_test, y_predict_logi)\nrec = recall_score(y_test, y_predict_logi)\nf1 = f1_score(y_test, y_predict_logi)\n\nresults = pd.DataFrame([['Logistic Regression',acc, acc_logi.mean(),prec,rec, f1,roc]],\n               columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\nresults","5fd35c03":"y_predict_x = xgb_classifier.predict(X_test_scaled)\nroc=roc_auc_score(y_test, y_predict_x)\nacc = accuracy_score(y_test, y_predict_x)\nprec = precision_score(y_test, y_predict_x)\nrec = recall_score(y_test, y_predict_x)\nf1 = f1_score(y_test, y_predict_x)\n\nmodel_results = pd.DataFrame([['XG Boost',acc, acc_xgb.mean(),prec,rec, f1,roc]],\n               columns = ['Model','Accuracy', 'Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\nresults = results.append(model_results, ignore_index = True)\nresults","bb6404fa":"y_predict_r = random_forest.predict(X_test_scaled)\nroc=roc_auc_score(y_test, y_predict_r)\nacc = accuracy_score(y_test, y_predict_r)\nprec = precision_score(y_test, y_predict_r)\nrec = recall_score(y_test, y_predict_r)\nf1 = f1_score(y_test, y_predict_r)\n\nmodel_results = pd.DataFrame([['Random Forest',acc, acc_rand.mean(),prec,rec, f1,roc]],\n               columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\nresults = results.append(model_results, ignore_index = True)\nresults","e763fc83":"y_predict_s = svc_model_l.predict(X_test_scaled)\nroc=roc_auc_score(y_test, y_predict_s)\nacc = accuracy_score(y_test, y_predict_s)\nprec = precision_score(y_test, y_predict_s)\nrec = recall_score(y_test, y_predict_s)\nf1 = f1_score(y_test, y_predict_s)\n\nmodel_results = pd.DataFrame([['SVC Linear',acc, acc_svc_l.mean(),prec,rec, f1,roc]],\n               columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\nresults = results.append(model_results, ignore_index = True)\nresults","014776ad":"y_predict_s1 = svc_model_r.predict(X_test_scaled)\nroc=roc_auc_score(y_test, y_predict_s1)\nacc = accuracy_score(y_test, y_predict_s1)\nprec = precision_score(y_test, y_predict_s1)\nrec = recall_score(y_test, y_predict_s1)\nf1 = f1_score(y_test, y_predict_s1)\n\nmodel_results = pd.DataFrame([['SVC RBF',acc, acc_svc_r.mean(),prec,rec, f1,roc]],\n               columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\nresults = results.append(model_results, ignore_index = True)\nresults","5d74166b":"from sklearn import metrics\nimport matplotlib.pyplot as plt\n\nplt.figure()\n\n# Add the models to the list that you want to view on the ROC plot\nmodels = [\n{\n    'label': 'Logistic Regression',\n    'model': LogisticRegression(random_state = 0, penalty = 'l1'),\n},\n{\n    'label': 'XG Boost',\n    'model': XGBClassifier(),\n},\n    {\n    'label': 'Random Forest Gini',\n    'model': RandomForestClassifier(n_estimators = 100,criterion='gini', random_state = 47),\n},\n    {\n    'label': 'Support Vector Machine-L',\n    'model': SVC(kernel='linear',probability=True)} ,\n        {\n    'label': 'Support Vector Machine-RBF',\n    'model': SVC(kernel='rbf',probability=True) ,\n}\n]\n\n# Below for loop iterates through your models list\nfor m in models:\n    model = m['model'] # select the model\n    model.fit(X_train_scaled, y_train) # train the model\n    y_pred=model.predict(X_test_scaled) # predict the test data\n# Compute False postive rate, and True positive rate\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, model.predict_proba(X_test_scaled)[:,1])\n# Calculate Area under the curve to display on the plot\n    auc = metrics.roc_auc_score(y_test,model.predict(X_test_scaled))\n# Now, plot the computed values\n    plt.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % (m['label'], auc))\n# Custom settings for the plot \nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('1-Specificity(False Positive Rate)')\nplt.ylabel('Sensitivity(True Positive Rate)')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","47c53f2e":"cm_logi = confusion_matrix(y_test, y_predict_logi)\nplt.title('Confusion matrix of the Logistic classifier')\nsns.heatmap(cm_logi,annot=True,fmt=\"d\")\nplt.show()","95480015":"cm_x = confusion_matrix(y_test, y_predict_x)\nplt.title('Confusion matrix of the XGB classifier')\nsns.heatmap(cm_x,annot=True,fmt=\"d\")\nplt.show()","47f576d1":"cm_r = confusion_matrix(y_test, y_predict_r)\nplt.title('Confusion matrix of the Random Forest classifier')\nsns.heatmap(cm_r,annot=True,fmt=\"d\")\nplt.show()","2bce5ba6":"cm = confusion_matrix(y_test, y_predict_s)\nplt.title('Confusion matrix of the SVC Linear classifier')\nsns.heatmap(cm,annot=True,fmt=\"d\")\nplt.show()","12965bc4":"TP = cm_logi[1, 1]\nTN = cm_logi[0, 0]\nFP = cm_logi[0, 1]\nFN = cm_logi[1, 0]","16ad711d":"classification_error = (FP + FN) \/ float(TP + TN + FP + FN)\n\nprint(classification_error)","6a04d660":"sensitivity = TP \/ float(FN + TP)\n\nprint(sensitivity)","813f9f29":"specificity = TN \/ (TN + FP)\n\nprint(specificity)","bc9d6e62":"# About Dataset\n\nThe Pima Indians Diabetes Dataset involves predicting the onset of diabetes within 5 years in Pima Indians given medical details.\n\nIt is a binary (2-class) classification problem. The number of observations for each class is not balanced. There are 768 observations with 8 input variables and 1 output variable. The variable names are as follows:\n\n**Features:**\n\n- **Pregnancies -** Number of times pregnant.\n- **Glucose  -** Plasma glucose concentration a 2 hours in an oral glucose tolerance testPlasma glucose concentration a 2 hours in an oral glucose tolerance test.\n- **BloodPressure -** Diastolic blood pressure (mm Hg).\n- **SkinThickness -** Triceps skinfold thickness (mm).\n- **Insulin -** 2-Hour serum insulin (mu U\/ml).\n- **BMI -** Body mass index (weight in kg\/(height in m)^2).\n- **DiabetesPedigreeFunction -** Diabetes pedigree function.\n- **Age -** Age in years.\n\n**Target Variable :**\n\n- **Outcome -** Class variable 1 if patient has diagnosed diabetes and 0 if not.\n\n## Steps to be Followed :\nFollowing steps I have taken to apply machine learning models:\n\n1. Importing Essential Libraries.\n2. Data Preparation & Data Cleaning.\n3. Data Visualization \n4. Feature Engineering to discover essential features in the process of applying machine learning.\n5. Encoding Categorical Variables.\n6. Train Test Split\n7. Apply Machine Learning Algorithm\n8. Cross Validation\n9. Model Evaluation\n\n## Model Evaluation :\n- [Cross Validation Score] (https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.cross_val_score.html)\n- [Confusion Matrix] (https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.confusion_matrix.html)\n- [Plotting ROC-AUC Curve] (https:\/\/en.wikipedia.org\/wiki\/Receiver_operating_characteristic)\n- [Sensitivity and Specitivity] (https:\/\/en.wikipedia.org\/wiki\/Sensitivity_and_specificity)\n- [Classification Error] (https:\/\/www.dataschool.io\/simple-guide-to-confusion-matrix-terminology\/)","45e8871f":"## Feature Scaling\nMost of the times, your dataset will contain features highly varying in magnitudes, units and range. But since, most of the machine learning algorithms use Eucledian distance between two data points in their computations, this is a problem.\n\nIf left alone, these algorithms only take in the magnitude of features neglecting the units. The results would vary greatly between different units, 5kg and 5000gms. The features with high magnitudes will weigh in a lot more in the distance calculations than features with low magnitudes.\nTo supress this effect, we need to bring all features to the same level of magnitudes. This can be acheived by scaling.","d9909785":"# Model Evaluation Part 2\nIn this part we will further find Classification error,sensitivity and specifitivity of our logistic regression model.","3cd7e11e":"## Data Visualization","e13d4e1f":"**Feature 2: Insulin Indicative Range** <br>\nIf insulin level (2-Hour serum insulin (mu U\/ml)) is >= 16 and <= 166, then it is normal range\nelse it is considered as Abnormal","e09e5ca0":"## Label Encoding","c770356d":"It seems to have even distribution of data in all the features of the dataset.","00a2001c":"The model has 18.83% of classification error.","4337d6f7":"# Brief Analysis of the Data","49e72874":"Segregating Features and Target Variable.\n\nI have taken X as Feature variable and y as target variable.","12cacf2f":"As we have seen from the above model evaluation, Logistic Regression and SVC Linear are best model for this dataset. so we will perform further Model evaluation of Logistic Regression.","9d84af48":"# Feature Engineering\nNow, its time to add important features to the dataset and see their effect by visualizing them.","ae6c6adc":"The model is highly specific and less sensitive model.","71cb95f8":"# Confusion Matrix","976f101b":"## Applying Machine Learning Models","253233f4":"# PIMA INDIAN DIABETES EDA\nIn this Kernel I have predicted the chances of diabetes using PIMA Indian dataset.This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.","cad4f714":"It seems from the above table that there are zero entries in BMI, Blood Pressure,Glucose, Skin Thickness and Insulin which are meaningless so we will fill it with their median values before fitting it into the machine learning models.\n\n**Replacing zero entries BMI, Blood Pressure,Glucose, Skin Thickness and Insulin with their median values**","bfd264e1":"# Importing Essential Libraries","178ba14e":"## Splitting data into Training & Testing Set\nThe training dataset and test dataset must be similar, usually have the same predictors or variables. They differ on the observations and specific values in the variables. If you fit the model on the training dataset, then you implicitly minimize error or find correct responses. The fitted model provides a good prediction on the training dataset. Then you test the model on the test dataset. If the model predicts good also on the test dataset, you have more confidence. You have more confidence since the test dataset is similar to the training dataset, but not the same nor seen by the model. It means the model transfers prediction or learning in real sense.\n\nSo,by splitting dataset into training and testing subset, we can efficiently measure our trained model since it never sees testing data before.Thus it's possible to prevent overfitting.\n\nI am just splitting dataset into 20% of test data and remaining 80% will used for training the model.\n\nI have used stratify parameter.This stratify parameter makes a split so that the proportion of values in the sample produced will be the same as the proportion of values provided to parameter stratify.\n\nFor example, if variable y is a binary categorical variable with values 0 and 1 and there are 25% of zeros and 75% of ones, stratify=y will make sure that your random split has 25% of 0's and 75% of 1's.","04b4d0c8":"## Cross validation","c313afb8":"From the above plot it is evident that patients who are obese as per BMI index are more diabetic in early age of 25 where as patients who are overweight are prone to diabetes in early 30's\n\nAs far as data is concerned it is the data of all women patients at least 21 years old of Pima Indian heritage.So, the findings may differ in other cases.","c13a69b1":"**Feature 1 : BMI Indicator**<br>\nI m adding BMI Indicator feature as we know :\nIf you have a BMI of:\n- Under 18.5 \u2013 you are considered underweight and possibly malnourished.\n- 18.5 to 24.9 \u2013 you are within a healthy weight range for young and middle-aged adults.\n- 25.0 to 29.9 \u2013 you are considered overweight.\n- Over 30 \u2013 you are considered obese.","29cb407a":"# Plotting ROC Curve\nAUC(Area Under Curve) - ROC (Receiver Operating Characterstics) curve is a performance measurement for classification problem at various thresholds settings. ROC is a probability curve and AUC represents degree or measure of separability. It tells how much model is capable of distinguishing between classes. Higher the AUC, better the model is at predicting 0s as 0s and 1s as 1s. By analogy, Higher the AUC, better the model is at distinguishing between patients with disease and no disease.\n\nThe ROC curve is plotted with TPR(True Positive Rate) against the FPR (False Positive Rate) where TPR is on y-axis and FPR is on the x-axis.","9935d54a":"## Data Cleaning & Data Preparation\nIn this step we will find missing entries, if there then fill them with median or mean values, checking data types of all the features to find any inconsistency.","1c9722c3":"# Analysis of Diabetic Cases","933d7880":"In this step we will encode the categorical variables BM_DESC,INSULIN_DESC into numerical values before fitting it into machine learning models.","1f491bff":"This dataset is known to have missing values.Specifically, there are missing observations for some columns that are marked as a zero value.","c33ae2ca":"It seems from the above plot that more than 500 patients have Abnormal Insulin Levels where as around 250 patients have Normal Insulin Levels.","edec19d6":"## Model Evaluation\nIn this step we will compare different performance metric such as cross validation accuracy, Precision,Recall,F1 Score, ROC etc.","cfc5ed31":"Now, all the zero entries are now filled with the median values.","41300c55":"# Sensitivity & Specifitivity\nBefore finding sensitivity and specifitivity we must know what these terms are :\n\nSensitivity and specificity are statistical measures of the performance of a binary classification test, also known in statistics as a classification function:\n\n- **Sensitivity** (also called the true positive rate, the recall, or probability of detection[1] in some fields) measures the proportion of actual positives that are correctly identified as such (e.g., the percentage of sick people who are correctly identified as having the condition).\n- **Specificity** (also called the true negative rate) measures the proportion of actual negatives that are correctly identified as such (e.g., the percentage of healthy people who are correctly identified as not having the condition).","366cd276":"It seems from the above plot that patients having normal insulin levels are more diabetic within the age range from 25 and 42\nwhere as patients having anormal insulin levels are more diabetic in the age range of late 20's to mid 40's."}}