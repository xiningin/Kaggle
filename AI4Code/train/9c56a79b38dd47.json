{"cell_type":{"635ddfae":"code","af7e054f":"code","7cdd0176":"code","5bea9247":"code","2b36a368":"code","7aeb73b5":"code","43170aad":"code","968fca92":"code","a2ef5a76":"code","796dec05":"code","ff57c736":"code","3838784f":"code","9767e419":"code","3a0f96c8":"code","b6543a24":"code","20cd1c3d":"code","55e0ebfc":"code","7204045e":"code","2947f2cf":"code","da9c9b5b":"code","0c4df6c5":"code","1cbce629":"code","0e3962c8":"code","3a2c1b74":"code","44fb095b":"code","9e35ef2d":"code","79548063":"code","12fba1be":"code","1109429e":"code","d443a523":"code","82ec81cd":"code","e1aee6dc":"code","8db4f23e":"code","297511dd":"code","f59e622a":"code","a47bf697":"code","38bd9a5d":"code","8d37998c":"code","3d3ed842":"code","351284dc":"code","56a885a3":"code","8f61440d":"code","056434d3":"code","cbeb37d7":"code","e8063623":"code","f5271f49":"code","b59cf3d6":"code","200b69e6":"code","f2d574f4":"code","7274c467":"code","08941314":"code","45f1fe7e":"code","ec682988":"code","d1593ed6":"code","b821b121":"code","9601d36c":"code","ddbda26f":"code","aa9c06a8":"code","6b768489":"code","883d072e":"code","f6bdaeb0":"code","89222ff0":"code","429b4d9b":"code","89305e82":"code","fdf8b8db":"code","2cf686fe":"code","23e28148":"code","7b809f83":"code","73a64401":"code","54f71b97":"code","380398d3":"code","79721f33":"code","ee43b61b":"code","9e143497":"code","9b9e1e6f":"code","9fadd439":"code","60e02df2":"code","4e6b0959":"code","1218d5fe":"code","ff376473":"code","027448bd":"code","fa63b994":"code","fa4d049e":"code","8806bf78":"code","b2b3101a":"code","b767db58":"code","6da54c34":"code","3f994bb5":"code","deb25b9b":"code","635f3d19":"code","0f4d29ff":"code","9b8e56c5":"code","41c1b893":"code","53ffd8a4":"code","cb4a0a1c":"code","ff88af1d":"code","4be7fb46":"code","55907b4a":"code","40ea6755":"code","0a032fc3":"code","797a5102":"code","cd025c75":"code","79f12ed6":"code","a6b5a5f7":"code","9303506e":"code","a66e80f6":"code","d54289b1":"code","1daa90f2":"code","a38758d9":"code","1a39e091":"code","cfaec167":"code","df9c9145":"code","c1772caa":"code","8747abef":"code","cd67660e":"code","bd0694b9":"code","c47305f9":"code","210fd810":"code","e5f14c12":"code","135fb81b":"code","64487b18":"code","050d313a":"code","8c86f535":"code","7e1f13be":"code","1c045f6b":"code","e84552b5":"code","13c78bca":"code","48d8c191":"code","78b39de1":"code","e728b7c0":"code","13706e52":"code","76a91d3c":"code","1d27352e":"code","238bb211":"code","02a547f0":"code","d492638d":"code","003265d6":"code","cf7292da":"code","098b4d02":"code","189bd2c7":"code","17a1c7bf":"markdown","8ef31907":"markdown","7859f311":"markdown","9786f972":"markdown","599ed4ea":"markdown","7b3ac204":"markdown","39714344":"markdown","d804160d":"markdown","b82cdeb2":"markdown","1e56c792":"markdown","6b3cc639":"markdown","2421d240":"markdown","e531c0d1":"markdown","a8cfee73":"markdown","2e3bdf55":"markdown","8ebb1903":"markdown","488a24fe":"markdown","a8d26a8d":"markdown","e4f24cd6":"markdown","18621087":"markdown","3d26a709":"markdown","8d63bf1f":"markdown","2fa85322":"markdown","c34faac5":"markdown","22ea0fa4":"markdown","ef2dc1ba":"markdown","b789abf0":"markdown","00915ff6":"markdown","e1eeb0e6":"markdown","5d719ca9":"markdown","9d06326f":"markdown","d59d9e70":"markdown","285d8493":"markdown"},"source":{"635ddfae":"v_message = \"Hello\"\n\nv_name = \"gazi\"\nv_surname = \"erdogan\"\nv_fullname = v_name + \" \" + v_surname\n\nv_var1 = \"100\"\nv_var2 = \"200\"\nv_varSum = v_var1 + v_var2\n\nprint(v_message)\n\nprint()\nprint(v_fullname)\n\nprint()\nprint(\"v_varSum : \" , v_varSum)","af7e054f":"#len function :\nprint(\"Length of v_fullname is \" , len(v_fullname))\n\n#title function :\nprint()\nprint(\"Full Name is \" , v_fullname.title())\n\n#upper function :\nprint()\nprint(\"Upper of Full Name is \" , v_fullname.upper())\n\n#lower function :\nprint()\nprint(\"Full Name is \" , v_fullname.lower())\n\n#type\nprint()\nprint(\"Type of v_fullname is \" , type(v_fullname))","7cdd0176":"v_chr1 = v_fullname[1]\nv_chr2 = v_fullname[8]\n\nprint(\"v_chr1 : \" , v_chr1 , \" and v_chr2 : \" , v_chr2)","5bea9247":"# Integer\nv_num1 = 30\nv_num2 = 40\nv_numSum = v_num1 + v_num2\n\nprint(\"v_num1 : \" , v_num1 , \" and type : \" , type(v_num1))\n\nprint()\nprint(\"Sum of Num1 and Num2 is : \" , v_numSum , \" and type : \" , type(v_numSum))","2b36a368":"# Float\nv_num3 = 30.5\nv_numSum2 = v_num3 + v_num2\n\nprint(\"v_num3 : \" , v_num3 , \" and type : \" , type(v_num3))\n\nprint()\nprint(\"Sum of Num2 and Num3 is : \" , v_numSum2 , \" and type : \" , type(v_numSum2))","7aeb73b5":"def f_SayHello():\n    print(\"Hello\")\n    \nf_SayHello()","43170aad":"def f_SayMessage(v_message):\n    print(v_message)\n    \nf_SayMessage(\"I am Gazi\")","968fca92":"def f_Sum1(v_num1 , v_num2):\n    v_sum1 = v_num1 + v_num2\n    print(v_num1 , \" + \" , v_num2, \" = \" , v_sum1)\n    \nf_Sum1(10,20)","a2ef5a76":"#Let's create calculator of circle circumreference function\n\n#Functions can give a value with RETURN\n\ndef f_CircleCircumreference(v_Radius):\n    v_CircumRefenece = 2 * 3.14 * v_Radius\n    return v_CircumRefenece\n\nv_Circle1 = f_CircleCircumreference(2)\nprint(\"Reference is : \" , v_Circle1)","796dec05":"# Default Functions :\n\ndef f_Students1(v_Name , v_Surname , v_ShoeSize = 42):\n    print(\"Shoe size of \",v_Name , \" \" , v_Surname , \" is : \" , v_ShoeSize)\n    \nf_Students1(\"Gazi\",\"Erdogan\")\nf_Students1(\"Muhammed\",\"Dugun\",43)","ff57c736":"#Flexible Functions :\n\ndef f_SayMessage2(v_Name , *v_args):\n    print(\"Hi \", v_Name , \" Your 2nd message is : \" , v_args[1])\n\nf_SayMessage2(\"Gazi\" , \"Message 1\", \"Message 2\", \"Message 3\", \"Message 4\")","3838784f":"# Lambda Function :\n\nv_result1 = lambda x : x*3\nprint(\"Result is : \" , v_result1(6))","9767e419":"print(\"Type of 'f_Students1' is : \" , type(f_Students1))\nprint(\"Type of 'v_result1' is : \" , type(v_result1))","3a0f96c8":"l_list1 = [1,5,3,6,8,9]\nprint(l_list1)\nprint(\"Type of 'l_list1' is : \" , type(l_list1))","b6543a24":"v_list1_4 = l_list1[3]\nprint(v_list1_4)\nprint(\"Type of 'v_list1_4' is : \" , type(v_list1_4))","20cd1c3d":"l_list2 = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"]\nprint(l_list2)\nprint(\"Type of 'l_list2' is : \" , type(l_list1))","55e0ebfc":"v_list2_4 = l_list2[3]\nprint(v_list2_4)\nprint(\"Type of 'v_list2_4' is : \" , type(v_list2_4))","7204045e":"v_list2_x3 = l_list2[-3]\nprint(v_list2_x3)","2947f2cf":"l_list2_2 = l_list2[0:3]\nprint(l_list2_2)","da9c9b5b":"#Len\nv_len_l_list2_2 = len(l_list2_2)\nprint(\"Size of 'l_list2_2' is : \",v_len_l_list2_2)\nprint(l_list2_2)","0c4df6c5":"#Append\nl_list2_2.append(\"Saturday\")\nprint(l_list2_2)\n\nl_list2_2.append(\"Tuesday\")\nprint(l_list2_2)","1cbce629":"#Reverse\nl_list2_2.reverse()\nprint(l_list2_2)","0e3962c8":"#Sort\nl_list2_2.sort()\nprint(l_list2_2)","3a2c1b74":"#Remove\n\n#First add 'Saturday' then Remove 'Saturday'\nl_list2_2.append(\"Saturday\")\nprint(l_list2_2)","44fb095b":"l_list2_2.remove(\"Saturday\")\nprint(l_list2_2)","9e35ef2d":"\nd_dict1 = {\"Home\":\"Ev\" , \"School\" : \"Okul\" , \"Student\": \"\u00d6\u011frenci\"}\n\nprint(d_dict1)\nprint(type(d_dict1))","79548063":"v_school = d_dict1[\"School\"]\nprint(v_school)\nprint(type(v_school))","12fba1be":"#Keys & Values\n\nv_keys = d_dict1.keys()\nv_values = d_dict1.values()\n\n\nprint(v_keys)\nprint(type(v_keys))\n\nprint()\nprint(v_values)\nprint(type(v_values))","1109429e":"\nv_var1 = 10\nv_var2 = 20\n\nif v_var1 > v_var2:\n    print(v_var1 , \" is greater then \" , v_var2)\nelif v_var1 < v_var2:\n    print(v_var1 , \" is smaller then \" , v_var2)\nelse :\n    print(\"This 2 variables are equal\")","d443a523":"# < , <= , > , >= , == , <>\ndef f_Comparison1(v_Comp1 , v_Comp2):\n    if v_Comp1 > v_Comp2:\n        print(v_Comp1 , \" is greater then \" , v_Comp2)\n    elif v_Comp1 < v_Comp2:\n        print(v_Comp1 , \" is smaller then \" , v_Comp2)\n    else :\n        print(\"These \" , v_Comp1 , \" variables are equal\")\n        \nf_Comparison1(33,44)\nf_Comparison1(66,22)\nf_Comparison1(11,11)","82ec81cd":"# using 'IN' with LIST\n\n\ndef f_IncludeOrNot(v_search, v_searchList):\n    if v_search in v_searchList :\n        print(\"Good news ! \",v_search , \" is in list.\")\n    else :\n        print(v_search , \" is not in list. Sorry :(\")\n\nl_list = list(d_dict1.keys())\nprint(l_list)\nprint(type(l_list))\n\nf_IncludeOrNot(\"Home\" , l_list)\nf_IncludeOrNot(\"Pencil\" , l_list)","e1aee6dc":"\nfor a in range(0,10):\n    print(\"Hi \" , a)","8db4f23e":"\nv_happyMessage = \"I AM HAPPY\"\nprint(v_happyMessage)","297511dd":"for v_chrs in v_happyMessage:\n    print(v_chrs)\n    print(\"------\")","f59e622a":"for v_chrs in v_happyMessage.split():\n    print(v_chrs)","a47bf697":"\nprint(l_list1)\nv_sum_list1 = sum(l_list1)\nprint(\"Sum of l_list1 is : \" , v_sum_list1)\n\nprint()\nv_cum_list1 = 0\nv_loopindex = 0\nfor v_current in l_list1:\n    v_cum_list1 = v_cum_list1 + v_current\n    print(v_loopindex , \" nd value is : \" , v_current)\n    print(\"Cumulative is : \" , v_cum_list1)\n    v_loopindex = v_loopindex + 1\n    print(\"------\")","38bd9a5d":"\ni = 0\nwhile(i < 4):\n    print(\"Hi\" , i)\n    i = i+1","8d37998c":"\nprint(l_list1)\nprint()\n\ni = 0\nk = len(l_list1)\n\nwhile(i<k):\n    print(l_list1[i])\n    i=i+1","3d3ed842":"#Let's find minimum and maximum number in list\n\nl_list2 = [3,5,7,-6,-100,255,71,34,-85]\n\nv_min = 0\nv_max = 0\n\nv_index = 0\nv_len = len(l_list2)\n\nwhile (v_index < v_len):\n    v_current = l_list2[v_index]\n    \n    if v_current > v_max:\n        v_max = v_current\n    \n    if v_current < v_min:\n        v_min = v_current\n    \n    v_index = v_index+1\n\nprint (\"Maximum number is : \" , v_max)\nprint (\"Minimum number is : \" , v_min)","351284dc":"# Import library to use\nimport numpy as np","56a885a3":"v_array1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nv_array2_np = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])","8f61440d":"print(\"v_array1 : \" , v_array1)\nprint(\"Type of v_array1 : \" , type(v_array1))","056434d3":"print(\"v_array2_np : \" , v_array2_np)\nprint(\"Type of v_array2_np : \" , type(v_array2_np))","cbeb37d7":"# shape\nv_shape1 = v_array2_np.shape\nprint(\"v_shape1 : \" , v_shape1 , \" and type is : \" , type(v_shape1))\n","e8063623":"# Reshape\nv_array3_np = v_array2_np.reshape(3,5)\nprint(v_array3_np)","f5271f49":"v_shape2 = v_array3_np.shape\nprint(\"v_shape2 : \" , v_shape2 , \" and type is : \" , type(v_shape2))","b59cf3d6":"# Dimension\nv_dimen1 = v_array3_np.ndim\nprint(\"v_dimen1 : \" , v_dimen1 , \" type is : \" , type(v_dimen1))","200b69e6":"# Dtype.name\nv_dtype1 = v_array3_np.dtype.name\nprint(\"v_dtype1 : \" , v_dtype1 , \" and type is : \" , type(v_dtype1))","f2d574f4":"# Size\nv_size1 = v_array3_np.size\nprint(\"v_size1 : \" , v_size1 , \" and type : \" , type(v_size1))","7274c467":"# Let's create 3x4 array\nv_array4_np = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\nprint(v_array4_np)\nprint(\"---------------\")\nprint(\"Shape is : \" , v_array4_np.shape)","08941314":"# Zeros\nv_array5_np = np.zeros((3,4))\nprint(v_array5_np)","45f1fe7e":"# Update an item on this array \nv_array5_np[0,3] = 21\nprint(v_array5_np)","ec682988":"# Ones\nv_array6_np = np.ones((3,4))\nprint(v_array6_np)","d1593ed6":"# Empty\nv_array7_np = np.empty((2,3))\nprint(v_array7_np)","b821b121":"# Arrange\nv_array8_np = np.arange(10,45,5)\nprint(v_array8_np)\nprint(v_array8_np.shape)","9601d36c":"# Linspace\nv_array9_np = np.linspace(10,30,5)\nv_array10_np = np.linspace(10,30,20)\n\nprint(v_array9_np)\nprint(v_array9_np.shape)\nprint(\"-----------------------\")\nprint(v_array10_np)\nprint(v_array10_np.shape)","ddbda26f":"# Sum , Subtract , Square\nv_np1 = np.array([1,2,3])\nv_np2 = np.array([7,8,9])\n\nprint(v_np1 + v_np2) #--> We can not addition of 2 arrays\nprint(v_np1 - v_np2)\nprint(v_np2 - v_np1)\nprint(v_np1 ** 2)\n","aa9c06a8":"# Sinus\nprint(np.sin(v_np2))","6b768489":"# True \/ False\nv_np2_TF = v_np2 < 8\nprint(v_np2_TF)\nprint(v_np2_TF.dtype.name)","883d072e":"# Element wise Prodcut\nv_np1 = np.array([1,2,3])\nv_np2 = np.array([7,8,9])\nprint(v_np1 * v_np2)","f6bdaeb0":"# Transpose\nv_np5 = np.array([[2,4,8],[3,6,1]])\nv_np5Transpose = v_np5.T\nprint(v_np5)\nprint(v_np5.shape)\nprint()\nprint(v_np5Transpose)\nprint(v_np5Transpose.shape)","89222ff0":"# Matrix Multiplication\nv_np6 = v_np5.dot(v_np5Transpose)\nprint(v_np6)","429b4d9b":"# Exponential --> We will use on Statistics Lesson\nv_np5Exp = np.exp(v_np5)\n\nprint(v_np5)\nprint(v_np5Exp)","89305e82":"# Random \nv_np8 = np.random.random((6,6)) # --> It will get between 0 and 1 random numbers\nprint(v_np8)","fdf8b8db":"#Sum , Max ,Min\nv_np8Sum = v_np8.sum()\nprint(\"Sum of array : \", v_np8Sum)  #--> Remember ! If you get sum of array we can use that :  sum(array1)\nprint(\"Max of array : \", v_np8.max()) #--> Remember ! If you get max of array we can use that :  max(array1)\nprint(\"Min of array : \", v_np8.min()) #--> Remember ! If you get min of array we can use that :  min(array1)","2cf686fe":"# Sum with Column or Row\nprint(\"Sum of Columns :\")\nprint(v_np8.sum(axis=0)) # --> Sum of Columns\nprint()\nprint(\"Sum of Rows :\")\nprint(v_np8.sum(axis=1)) #Sum of Rows","23e28148":"# Square , Sqrt\nprint(np.sqrt(v_np8))\nprint()\nprint(np.square(v_np8))","7b809f83":"# Add\nv_np10 = np.array([1,2,3,4,5])\nv_np11 = np.array([10,20,30,40,50])\n\nprint(np.add(v_np10,v_np11))","73a64401":"v_np12 = np.array([1,2,3,4,5,6,7,8,9])\n\nprint(\"First item is : \" , v_np12[0])\nprint(\"Third item is : \" , v_np12[2])","54f71b97":"# Get top 4 rows :\nprint(v_np12[0:4])","380398d3":"# Reverse\nv_np12_Rev = v_np12[::-1]\nprint(v_np12_Rev)","79721f33":"v_np13 = np.array([[1,2,3,4,5],[11,12,13,14,15]])\nprint(v_np13)\nprint()\nprint(v_np13[1,3]) #--> Get a row\n\nprint()\nv_np13[1,3] = 314 #--> Update a row\nprint(v_np13)","ee43b61b":"# Get all rows but 3rd columns :\nprint(v_np13[:,2])","9e143497":"#Get 2nd row but 2,3,4th columns\nprint(v_np13[1,1:4])","9b9e1e6f":"# Get last row all columns\nprint(v_np13[-1,:])","9fadd439":"# Get last columns but all rows\nprint(v_np13[:,-1])","60e02df2":"#Flatten\nv_np14 = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])\nv_np15 = v_np14.ravel()\n\nprint(v_np14)\nprint(\"Shape of v_np14 is : \" ,v_np14.shape)\nprint()\nprint(v_np15)\nprint(\"Shape of v_np15 is : \" ,v_np15.shape)\nprint()","4e6b0959":"# Reshape\nv_np16 = v_np15.reshape(3,4)\nprint(v_np16)\nprint(\"Shape of v_np16 is : \" ,v_np16.shape)","1218d5fe":"v_np17 = v_np16.T\nprint(v_np17)\nprint(\"Shape of v_np17 is : \" ,v_np17.shape)","ff376473":"v_np20 = np.array([[1,2],[3,4],[5,6]])\n\nprint(v_np20)\nprint()\nprint(v_np20.reshape(2,3))\n\nprint()\nprint(v_np20) #--> It has not changed !!","027448bd":"# Resize\nv_np20.resize((2,3))\nprint(v_np20) # --> Now it changed !  Resize can change its shape","fa63b994":"v_np21 = np.array([[1,2],[3,4]])\nv_np22 = np.array([[5,6],[7,8]])\n\nprint(v_np21)\nprint()\nprint(v_np22)","fa4d049e":"# Vertical Stack\nv_np23 = np.vstack((v_np21,v_np22))\nv_np24 = np.vstack((v_np22,v_np21))\n\nprint(v_np23)\nprint()\nprint(v_np24)","8806bf78":"# Horizontal Stack\nv_np25 = np.hstack((v_np21,v_np22))\nv_np26 = np.hstack((v_np22,v_np21))\n\nprint(v_np25)\nprint()\nprint(v_np26)","b2b3101a":"v_list1 = [1,2,3,4]\nv_np30 = np.array(v_list1)\n\nprint(v_list1)\nprint(\"Type of list : \" , type(v_list1))\nprint()\nprint(v_np30)\nprint(\"Type of v_np30 : \" , type(v_np30))","b767db58":"v_list2 = list(v_np30)\nprint(v_list2)\nprint(\"Type of list2 : \" , type(v_list2))","6da54c34":"v_list3 = v_list2\nv_list4 = v_list2\n\nprint(v_list2)\nprint()\nprint(v_list3)\nprint()\nprint(v_list4)","3f994bb5":"v_list2[0] = 55\n\nprint(v_list2)\nprint()\nprint(v_list3) # --> Same address with list2\nprint()\nprint(v_list4) # --> Same address with list2","deb25b9b":"v_list5 = v_list2.copy()\nv_list6 = v_list2.copy()\n\nprint(v_list5)\nprint()\nprint(v_list6)","635f3d19":"v_list2[0] = 71\n\nprint(v_list2)\nprint()\nprint(v_list5) # --> Not same address with list2\nprint()\nprint(v_list6) # --> Not same address with list2","0f4d29ff":"# Import Library\nimport pandas as pd","9b8e56c5":"# Let's create Data Frame from Dictionary\nv_dict1 = { \"COUNTRY\" : [\"TURKEY\",\"U.K.\",\"GERMANY\",\"FRANCE\",\"U.S.A\",\"AZERBAIJAN\",\"IRAN\"],\n            \"CAPITAL\":[\"ISTANBUL\",\"LONDON\",\"BERLIN\",\"PARIS\",\"NEW YORK\",\"BAKU\",\"TAHRAN\"],\n            \"POPULATION\":[15.07,8.13,3.57,2.12,8.62,4.3,8.69]}\n\nv_dataFrame1 = pd.DataFrame(v_dict1)\n\nprint(v_dataFrame1)\nprint()\nprint(\"Type of v_dataFrame1 is : \" , type(v_dataFrame1))","41c1b893":"# get top 5 rows\nv_head1 = v_dataFrame1.head()\nprint(v_head1)\nprint()\nprint(\"Type of v_head1 is :\" ,type(v_head1))","53ffd8a4":"# get top 100 rows\nprint(v_dataFrame1.head(100))","cb4a0a1c":"# get last 5 rows\nv_tail1 = v_dataFrame1.tail()\nprint(v_tail1)\nprint()\nprint(\"Type of v_tail1 is :\" ,type(v_tail1))","ff88af1d":"# Columns\nv_columns1 = v_dataFrame1.columns\nprint(v_columns1)\nprint()\nprint(\"Type of v_columns is : \" , type(v_columns1))","4be7fb46":"v_info1 = v_dataFrame1.info()\nprint(v_info1)\nprint()\nprint(\"Type of v_info1 is : \" , type(v_info1))","55907b4a":"v_dtypes1 = v_dataFrame1.dtypes\nprint(v_dtypes1)\nprint()\nprint(\"Type of v_dtypes1 is : \" , type(v_dtypes1))","40ea6755":"v_descr1 = v_dataFrame1.describe()\nprint(v_descr1)\nprint()\nprint(\"Type of v_descr1 is : \" , type(v_descr1))","0a032fc3":"v_country1 = v_dataFrame1[\"COUNTRY\"]\nprint(v_country1)\nprint()\nprint(\"Type of v_country1 is : \" , type(v_country1))","797a5102":"# Add new column\nv_currenyList1 = [\"TRY\",\"GBP\",\"EUR\",\"EUR\",\"USD\",\"AZN\",\"IRR\"]\nv_dataFrame1[\"CURRENCY\"] = v_currenyList1\n\nprint(v_dataFrame1.head())","cd025c75":"# Get all rows ,  1 column\nv_AllCapital = v_dataFrame1.loc[:,\"CAPITAL\"]\nprint(v_AllCapital)\nprint()\nprint(\"Type of v_AllCapital is : \" , type(v_AllCapital))","79f12ed6":"# Get top 3 rows of Currency\nv_top3Currency = v_dataFrame1.loc[0:3,\"CURRENCY\"]\nprint(v_top3Currency)","a6b5a5f7":"v_CityCountry = v_dataFrame1.loc[:,[\"CAPITAL\",\"COUNTRY\",\"BLABLA\"]] #--> BLABLA not defined !!!\nprint(v_CityCountry)","9303506e":"v_Reverse1 = v_dataFrame1.loc[::-1,:]\nprint(v_Reverse1)","a66e80f6":"print(v_dataFrame1.loc[:,:\"POPULATION\"])\nprint()\nprint(v_dataFrame1.loc[:,\"POPULATION\":])","d54289b1":"#Get data with column index (not column name)\nprint(v_dataFrame1.iloc[:,2])","1daa90f2":"v_filter1 = v_dataFrame1.POPULATION > 4\nprint(v_filter1)","a38758d9":"v_filter2 = v_dataFrame1[\"POPULATION\"] < 9\nprint(v_filter2)","1a39e091":"print(v_dataFrame1[v_filter1 & v_filter2])","cfaec167":"print(v_dataFrame1[v_dataFrame1[\"CURRENCY\"] == \"EUR\"])","df9c9145":"v_meanPop =v_dataFrame1[\"POPULATION\"].mean()\nprint(v_meanPop)\n\nv_meanPopNP = np.mean(v_dataFrame1[\"POPULATION\"])\nprint(v_meanPopNP)","c1772caa":"for a in v_dataFrame1[\"POPULATION\"]:\n    print(a)","8747abef":"v_dataFrame1[\"POP LEVEL\"] = [\"Low\" if v_meanPop > a else \"HIGH\" for a in v_dataFrame1[\"POPULATION\"]]\nprint(v_dataFrame1)","cd67660e":"print(v_dataFrame1.columns)\n\nv_dataFrame1.columns = [a.lower() for a in v_dataFrame1.columns]\n\nprint(v_dataFrame1.columns)","bd0694b9":"v_dataFrame1.columns = [a.split()[0]+\"_\"+a.split()[1] if (len(a.split())>1) else a for a in v_dataFrame1.columns]\nprint(v_dataFrame1.columns)","c47305f9":"v_dataFrame1[\"test1\"] = [-1,-2,-3,-4,-5,-6,-7]\nprint(v_dataFrame1)","210fd810":"v_dataFrame1.drop([\"test1\"],axis=1,inplace = True) #--> inplace = True must be written\nprint(v_dataFrame1)","e5f14c12":"v_data1 = v_dataFrame1.head()\nv_data2 = v_dataFrame1.tail()\n\nprint(v_data1)\nprint()\nprint(v_data2)","135fb81b":"v_dataConcat1 = pd.concat([v_data1,v_data2],axis=0) # axis = 0 --> VERTICAL CONCAT\nv_dataConcat2 = pd.concat([v_data2,v_data1],axis=0) # axis = 0 --> VERTICAL CONCAT\n\nprint(v_dataConcat1)\nprint()\nprint(v_dataConcat2)","64487b18":"v_CAPITAL = v_dataFrame1[\"capital\"]\nv_POPULATION = v_dataFrame1[\"population\"]\n\nv_dataConcat3 = pd.concat([v_CAPITAL,v_POPULATION],axis=1) #axis = 1 --> HORIZONTAL CONCAT\nv_dataConcat4 = pd.concat([v_POPULATION,v_CAPITAL],axis=1) #axis = 1 --> HORIZONTAL CONCAT\nprint(v_dataConcat3)\nprint()\nprint(v_dataConcat4)","050d313a":"v_dataFrame1[\"test1\"] = [a*2 for a in v_dataFrame1[\"population\"]]\nprint(v_dataFrame1)","8c86f535":"def f_multiply(v_population):\n    return v_population*3\n\nv_dataFrame1[\"test2\"] = v_dataFrame1[\"population\"].apply(f_multiply)\nprint(v_dataFrame1)","7e1f13be":"v_dataFrame2 = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\n\nprint(v_dataFrame2.info())","1c045f6b":"v_SpeciesUnique = v_dataFrame2[\"Species\"].unique()\nprint(v_SpeciesUnique)\nprint(type(v_SpeciesUnique))","e84552b5":"print(v_dataFrame2.describe())","13c78bca":"v_Setosa = v_dataFrame2[v_dataFrame2[\"Species\"]==\"Iris-setosa\"]\nv_Versicolor = v_dataFrame2[v_dataFrame2[\"Species\"]==\"Iris-versicolor\"]\nv_Virginica = v_dataFrame2[v_dataFrame2[\"Species\"]==\"Iris-virginica\"]\n\nprint(v_Setosa.describe())\nprint(v_Versicolor.describe())","48d8c191":"# We must import the library\nimport matplotlib.pyplot as plt","78b39de1":"print(v_dataFrame2.head())","e728b7c0":"v_dataFrame2.drop([\"Id\"], axis=1,inplace=True)\nprint(v_dataFrame2.head())","13706e52":"v_dataFrame2.plot()\nplt.show()","76a91d3c":"plt.plot(v_Setosa.index, v_Setosa.PetalLengthCm, color =\"red\",label =\"setosa - PetalLegtnCm\")\nplt.xlabel(\"Index\")\nplt.ylabel(\"PetalLegtnCm\")\nplt.legend() # --> It will add Label into graphic\nplt.show()","1d27352e":"plt.plot(v_Virginica.index, v_Virginica.PetalLengthCm, color =\"green\",label =\"virginica - PetalLegtnCm\")\nplt.xlabel(\"Index\")\nplt.ylabel(\"PetalLegtnCm\")\nplt.legend() # --> It will add Label into graphic\nplt.show()","238bb211":"plt.plot(v_Setosa.index, v_Setosa.PetalLengthCm, color =\"red\",label =\"setosa\")\nplt.plot(v_Versicolor.index, v_Versicolor.PetalLengthCm, color =\"blue\",label =\"versicolor\")\nplt.plot(v_Virginica.index, v_Virginica.PetalLengthCm, color =\"green\",label =\"virginica\")\nplt.xlabel(\"Index\")\nplt.ylabel(\"PetalLegtnCm\")\nplt.legend() # --> It will add Label into graphic\nplt.show()","02a547f0":"v_Setosa = v_dataFrame2[v_dataFrame2[\"Species\"]==\"Iris-setosa\"]\nv_Versicolor = v_dataFrame2[v_dataFrame2[\"Species\"]==\"Iris-versicolor\"]\nv_Virginica = v_dataFrame2[v_dataFrame2[\"Species\"]==\"Iris-virginica\"]\n\nplt.scatter(v_Setosa[\"PetalLengthCm\"],v_Setosa[\"PetalWidthCm\"], color=\"red\",label=\"setosa\")\nplt.xlabel(\"PetalLengthCm\")\nplt.ylabel(\"PetalWidthCm\")\nplt.title(\"Scatter Plot\")\nplt.legend()\nplt.show()","d492638d":"\nplt.scatter(v_Setosa[\"PetalLengthCm\"],v_Setosa[\"PetalWidthCm\"], color=\"red\",label=\"setosa\")\nplt.scatter(v_Versicolor[\"PetalLengthCm\"],v_Versicolor[\"PetalWidthCm\"], color=\"blue\",label=\"versicolor\")\nplt.scatter(v_Virginica[\"PetalLengthCm\"],v_Virginica[\"PetalWidthCm\"], color=\"green\",label=\"virginica\")\nplt.xlabel(\"PetalLengthCm\")\nplt.ylabel(\"PetalWidthCm\")\nplt.title(\"Scatter Plot\")\nplt.legend()\nplt.show()","003265d6":"plt.hist(v_Setosa[\"PetalLengthCm\"],bins=17)\nplt.xlabel(\"PetalLengthCm\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Histogram\")\nplt.show()","cf7292da":"test_x = np.array([1,2,3,4,5,6,7])\ntest_y = test_x*2+6\nplt.bar(test_x,test_y)\nplt.xlabel(\"test_x\")\nplt.ylabel(\"test_y\")\nplt.show()","098b4d02":"v_dataFrame2.plot(grid=True,subplots=True,alpha = 0.8)\nplt.show()","189bd2c7":"plt.subplot(2,1,1)\nplt.plot(v_Setosa.index,v_Setosa[\"PetalLengthCm\"],color=\"red\",label=\"setosa\")\nplt.ylabel(\"PetalLengthCm\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(v_Versicolor.index,v_Versicolor[\"PetalLengthCm\"],color=\"blue\",label=\"versicolor\")\nplt.ylabel(\"PetalLengthCm\")\nplt.xlabel(\"index\")\nplt.legend()\nplt.show()","17a1c7bf":"<a id=\"9.3.\"><\/a> <br>\n**9.3.Indexing and Slicing **","8ef31907":"*1.1) Strings Variables :*","7859f311":"<a id=\"6.\"><\/a> <br>\n# 6. For Loop","9786f972":"1.2) Numbers Variables :\n\n","599ed4ea":"<a id=\"10.\"><\/a> <br>\n# 10. Matplotlib","7b3ac204":"<a id=\"10.3.\"><\/a> <br>\n**10.3.Scatter Plot **","39714344":"<a id=\"8.5.\"><\/a> <br>\n**8.5.Stacking Arrays **","d804160d":"<a id=\"4.\"><\/a> <br>\n# 4. Dictionary","b82cdeb2":"<a id=\"10.6.\"><\/a> <br>\n**10.6.Sub Plot **","1e56c792":"# INTRODUCTION\n\n<ul>\n    <li><a href=\"#1.\">1. Variables and Simple Data Types<\/a><\/li>\n    <li><a href=\"#2.\">2. Functions<\/a><\/li>\n    <li><a href=\"#3.\">3. List<\/a><\/li>\n    <li><a href=\"#4.\">4. Dictionary<\/a><\/li>\n    <li><a href=\"#5.\">5. If Else<\/a><\/li>\n    <li><a href=\"#6.\">6. For Loop<\/a><\/li>\n    <li><a href=\"#7.\">7. While Loop<\/a><\/li>\n    <li><a href=\"#8.\">8. Numpy<\/a><\/li>\n        <ul>\n            <li><a href=\"#8.1.\">8.1. Basics<\/a><\/li>\n            <li><a href=\"#8.2.\">8.2. Basic Operations<\/a><\/li>\n            <li><a href=\"#8.3.\">8.3. Indexing and Slicing<\/a><\/li>\n            <li><a href=\"#8.4.\">8.4. Shape Manipulation<\/a><\/li>\n            <li><a href=\"#8.5.\">8.5. Stacking Arrays<\/a><\/li>\n            <li><a href=\"#8.6.\">8.6. Convert and Copy Array<\/a><\/li>\n        <\/ul>\n    <li><a href=\"#9.\">9. Pandas<\/a><\/li>\n        <ul>\n            <li><a href=\"#9.1.\">9.1. Introduction<\/a><\/li>\n            <li><a href=\"#9.2.\">9.2. Basic Methods<\/a><\/li>\n            <li><a href=\"#9.3.\">9.3. Indexing and Slicing<\/a><\/li>\n            <li><a href=\"#9.4.\">9.4. Filtering<\/a><\/li>\n            <li><a href=\"#9.5.\">9.5. List Comprehension<\/a><\/li>\n            <li><a href=\"#9.6.\">9.6. Drop and Concatenating Data<\/a><\/li>\n            <li><a href=\"#9.7.\">9.7. Transforming Data<\/a><\/li>\n        <\/ul>\n    <li><a href=\"#10.\">10. Matplotlib<\/a><\/li>\n        <ul>\n            <li><a href=\"#10.1.\">10.1. Pandas Review<\/a><\/li>\n            <li><a href=\"#10.2.\">10.2. Line Plot<\/a><\/li>\n            <li><a href=\"#10.3.\">10.3. Scatter Plot<\/a><\/li>\n            <li><a href=\"#10.4.\">10.4. Histogram<\/a><\/li>\n            <li><a href=\"#10.5.\">10.5. Bar Plot<\/a><\/li>\n            <li><a href=\"#10.6.\">10.6. Sub Plot<\/a><\/li>\n        <\/ul>\n<\/ul>","6b3cc639":"<a id=\"8.4.\"><\/a> <br>\n**8.4.Shape Manipulation **","2421d240":"<a id=\"10.2.\"><\/a> <br>\n**10.2.Line Plot **","e531c0d1":"<a id=\"9.7.\"><\/a> <br>\n**9.7.Transforming Data **","a8cfee73":"<a id=\"8.3.\"><\/a> <br>\n**8.3. Indexing and Slicing **","2e3bdf55":"<a id=\"9.2.\"><\/a> <br>\n**9.2.Basic Methods **","8ebb1903":"\n<a id=\"2.\"><\/a> <br>\n# 2. Function","488a24fe":"<a id=\"9.4.\"><\/a> <br>\n**9.4.Filtering **","a8d26a8d":"<a id=\"8.2.\"><\/a> <br>\n**8.2. Basic Operations **","e4f24cd6":"<a id=\"8.6.\"><\/a> <br>\n**8.6.Convert and Copy Array **","18621087":"<a id=\"5.\"><\/a> <br>\n# 5. If Else","3d26a709":"<a id=\"9.6.\"><\/a> <br>\n**9.6.Drop and Concatenating Data **","8d63bf1f":"<a id=\"9.5.\"><\/a> <br>\n**9.5.List Comprehension **","2fa85322":"<a id=\"7.\"><\/a> <br>\n# 7. While Loop","c34faac5":"<a id=\"8.1.\"><\/a> <br>\n**8.1. Basic**","22ea0fa4":"<a id=\"10.5.\"><\/a> <br>\n**10.5.Bar Plot **","ef2dc1ba":"<a id=\"10.1.\"><\/a> <br>\n**10.1.Pandas Review **","b789abf0":"Some Functions :","00915ff6":"<a id=\"1.\"><\/a> <br>\n# 1. Variable","e1eeb0e6":"<a id=\"10.4.\"><\/a> <br>\n**10.4.Histogram **","5d719ca9":"<a id=\"3.\"><\/a> <br>\n# 3. List","9d06326f":"<a id=\"9.1.\"><\/a> <br>\n**9.1.Introduction **","d59d9e70":"<a id=\"9.\"><\/a> <br>\n# 9. Pandas","285d8493":"<a id=\"8.\"><\/a> <br>\n# 8. Numpy"}}