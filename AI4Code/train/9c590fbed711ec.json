{"cell_type":{"ee4e426c":"code","b7635448":"code","8594b3b4":"code","ac11d104":"code","4908a29d":"code","daab30dd":"code","c061b650":"code","d103b0e3":"code","34beea32":"code","0f3595a6":"code","64548795":"code","f294f55f":"code","e34aec96":"code","3de80334":"code","166cb703":"code","f1f20199":"code","acef5d63":"code","2c22179b":"code","c23af670":"code","44b77392":"code","3eb33d64":"code","802cc1ec":"code","c4fcbf4c":"code","1e0a54bf":"code","1357d817":"code","ad240302":"code","88c42dc3":"code","ee1f2b0c":"code","97fca6e2":"code","18e3d323":"code","1eceb471":"code","51a0588f":"code","13a9ff24":"markdown","30c039ce":"markdown"},"source":{"ee4e426c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7635448":"train = pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip')\ntest = pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip')\ntest_labels = pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test_labels.csv.zip')","8594b3b4":"word_to_vec_map = {}\nwords = set()\nwith open('..\/input\/glove-global-vectors-for-word-representation\/glove.6B.50d.txt') as file:\n    for line in file:\n        values = line.strip().split()\n        curr_word = values[0]\n        words.add(curr_word)\n        word_to_vec_map[curr_word] = np.array(values[1:], dtype = np.float64)\nlen(word_to_vec_map)","ac11d104":"train.shape, test.shape, test_labels.shape","4908a29d":"train.head(20)","daab30dd":"test.head(20)","c061b650":"train.info()","d103b0e3":"test.info()","34beea32":"train_sentences = train['comment_text'].values\ntest_sentences = test['comment_text'].values","0f3595a6":"from keras.preprocessing.text import Tokenizer\ntokenizer = Tokenizer(num_words = 10000)\nfrom keras.preprocessing.sequence import pad_sequences","64548795":"max_seq_length = 1000\ntokenizer.fit_on_texts(train_sentences)\ntrain_sequences = tokenizer.texts_to_sequences(train_sentences)\ntest_sequences = tokenizer.texts_to_sequences(test_sentences)\npadded_seq_train = pad_sequences(train_sequences, maxlen = max_seq_length)\npadded_seq_test = pad_sequences(test_sequences, maxlen = max_seq_length)","f294f55f":"index = tokenizer.word_index\nlen(index)","e34aec96":"embedding_matrix = np.zeros((len(index) + 1, 50))\nfor word, i in index.items():\n    temp = word_to_vec_map.get(word)\n    if temp is not None:\n        embedding_matrix[i] = temp","3de80334":"classes = ['toxic', 'severe_toxic', 'obscene', 'threat',\n       'insult', 'identity_hate']\ny = train[classes].values","166cb703":"from sklearn.model_selection import train_test_split","f1f20199":"xTrain, xTest, yTrain, yTest = train_test_split(padded_seq_train, y, test_size = 0.3, random_state = 21)","acef5d63":"yTrain.shape","2c22179b":"from keras.models import Sequential\nfrom keras.layers import Embedding, Bidirectional, Dense, LSTM, GlobalMaxPooling1D, Dropout","c23af670":"embed_layer = Embedding(len(index) + 1, 50, input_length = max_seq_length, weights = [embedding_matrix] )","44b77392":"model = Sequential()\nmodel.add(embed_layer)\nmodel.add(Bidirectional(LSTM(50, return_sequences = True, dropout = 0.1, recurrent_dropout = 0.1)))\nmodel.add(GlobalMaxPooling1D())\nmodel.add(Dense(50, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(6, activation = 'sigmoid'))","3eb33d64":"model.summary()","802cc1ec":"model.compile(loss='binary_crossentropy', optimizer = 'Adam', metrics = ['accuracy'])","c4fcbf4c":"history = model.fit(xTrain, yTrain, epochs = 2, batch_size = 128, validation_split = 0.1)","1e0a54bf":"result = model.evaluate(xTest,yTest)","1357d817":"pred = model.predict(padded_seq_test)","ad240302":"pred.shape","88c42dc3":"sample = pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/sample_submission.csv.zip')","ee1f2b0c":"sample.head()","97fca6e2":"test.head()","18e3d323":"sample[classes] = pred","1eceb471":"sample.head(20)","51a0588f":"sample.to_csv('submission.csv', index = False)","13a9ff24":"Here, the output variables are not exclusive. More than one can occur at same time. ","30c039ce":"No null values"}}