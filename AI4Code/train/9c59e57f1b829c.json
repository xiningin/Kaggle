{"cell_type":{"5335bef1":"code","9dac7ad1":"code","4fcfa339":"code","a31bbf52":"code","095e46e7":"code","6f4ea24d":"code","b9301a76":"code","30c035d4":"markdown","529a3bdd":"markdown","8eb658c4":"markdown","89e547d5":"markdown","9ec4d33e":"markdown","b24494e0":"markdown","c289caba":"markdown"},"source":{"5335bef1":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder as OHE\nfrom sklearn.feature_selection import VarianceThreshold","9dac7ad1":"def scale(x):\n    x = x.loc[:].copy()\n    return (x-x.mean())\/(x.std())\n    \ndef fill_missing(x, mode=False):\n    if mode == False:\n        if x.skew() > 0.5:\n            x[x.isnull()] = x.median()\n        else:\n            x[x.isnull()] = x.mean()\n    else:\n        x[x.isnull()] = x.mode()[0]\n    return x","4fcfa339":"train_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndata = train_data.drop(['Id', 'SalePrice', 'MoSold'], axis=1).append(test_data.drop('Id', axis=1), ignore_index=True)\ndata.head(10)","a31bbf52":"# fill MSZoning and LotFrontage before these features are split into seperate dataframes\ndata.MSZoning = data.MSZoning.fillna(data.MSZoning.mode()[0])\ng = data.groupby(['MSZoning', 'Neighborhood'])['LotFrontage']\ndata['LotFrontage'] = g.transform(lambda x: x.fillna(x.mean()))\n\n# divide data between object type and numerical type\nobjCols = data.loc[:, data.select_dtypes('object').columns].copy()\nnum_cols = data.loc[:, data.select_dtypes(['int64', 'float64']).columns].copy()","095e46e7":"nan_to = 0\npoor_to_good_map = {'Ex': 5,'Gd': 4,'TA': 3,'Fa': 2,'Po': 1, np.nan: nan_to}\nmask = objCols.apply(lambda col: col.str.contains('^Fa$|^TA$').any())\npoor_to_good_cols = objCols.loc[:, mask]\nordinal_cols = poor_to_good_cols.apply(lambda col: col.map(poor_to_good_map))\nobjCols.drop(poor_to_good_cols, axis=1, inplace=True)\n\nBsmtExposure_map = {'Gd': 4,'Av': 3,'Mn': 2,'No': 1, np.nan: nan_to}\nordinal_cols['BsmtExposure'] = objCols.pop('BsmtExposure').map(BsmtExposure_map)\n\nBsmtFinType_map = {'GLQ': 6,'ALQ': 5,'BLQ': 4,'Rec': 3, 'LwQ': 2, 'Unf': 1, np.nan: nan_to}\nBsmtFinType_cols = objCols[['BsmtFinType1', 'BsmtFinType2']]\nordinal_cols[['BsmtFinType1', 'BsmtFinType2']] = BsmtFinType_cols.apply(lambda col: col.map(BsmtFinType_map))\nobjCols.drop(['BsmtFinType1', 'BsmtFinType2'], axis=1, inplace=True)\n\nFunctional_map = {'Typ': 8,'Min1': 7,'Min2': 6,'Mod': 5, 'Maj1': 4, 'Maj2': 3, 'Sev': 2, 'Sal': 1}\nordinal_cols['Functional'] =  objCols.pop('Functional').map(Functional_map)\n\nGarageFinish_map = {'Fin': 3, 'RFn': 2, 'Unf': 1, np.nan: nan_to}\nordinal_cols['GarageFinish'] = objCols.pop('GarageFinish').map(GarageFinish_map)","6f4ea24d":"# convert year cols to number of years since\nmask = num_cols.columns.str.contains('^Year|Yr')\nyear_cols = num_cols.loc[:, mask].copy()\nnum_cols[year_cols.columns] = year_cols.apply(lambda x: 2021 - x)\n\n# fill missing data\nnum_cols = num_cols.apply(fill_missing)\nordinal_cols = ordinal_cols.apply(fill_missing, mode=True)\nobjCols.fillna('nan', inplace=True)\n\n# One Hot Encode\nenc = OHE(sparse=False)\nobjCols = pd.DataFrame(enc.fit_transform(objCols[objCols.columns]))\n\n# Rejoin columns\nall_cols = pd.concat([num_cols, ordinal_cols, objCols], axis=1)\n\n# remove low variance features\nsel = VarianceThreshold(threshold=0.02)\nsel.fit(all_cols)\nall_cols = all_cols.loc[:, sel.get_support()]\n\n# find which cols are left in all_cols from num_cols and scale them\ncols = set(all_cols).intersection(set(num_cols))\nall_cols.loc[:, cols] = all_cols.loc[:, cols].apply(scale)\n\n# Although this results in a higher score in this instance, it is perhaps a bit random \nall_cols['GrLivAreaEXP'] = np.exp(all_cols['GrLivArea'])\n\nall_cols.head(10)","b9301a76":"#save data for modeling\nnp.save('processed.npy', all_cols)","30c035d4":"## Label ordinal features","529a3bdd":"## Import data","8eb658c4":"## Imports","89e547d5":"## [House prices p2: tensorflow model](https:\/\/www.kaggle.com\/carltowers\/house-prices-p2-tensorflow-model)","9ec4d33e":"## Process remaining columns, rejoin, remove low variance features, and scale","b24494e0":"## Functions for scaling and filling missing data","c289caba":"## Split data into numerical and non-numerical dataframes to make processing more efficient"}}