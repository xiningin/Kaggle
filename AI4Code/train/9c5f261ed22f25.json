{"cell_type":{"3aadc54c":"code","0fd6d42c":"code","09a0fda8":"code","a4ccb97a":"code","ba6ba94d":"code","8763185c":"code","6b4803c5":"code","3ea251f3":"code","b92161ea":"code","a4e22b66":"code","3b6a0f07":"code","7b4a74a7":"code","64ef24f6":"code","2302532f":"code","d7b892ad":"code","10933b4b":"code","8c2cb45f":"code","826d5f80":"code","f8930382":"code","3c1e9b4f":"code","a23ea0af":"code","7d4f4d7d":"code","527cb928":"code","3c879edc":"code","a07f91b8":"code","121f381f":"code","5d264a77":"code","e64915df":"code","52d8fea1":"code","b0d749cd":"code","51e69bd2":"code","0a0a0767":"code","b2b6e582":"code","232276d6":"code","d2cdf31c":"code","62969dc1":"code","fd3a422c":"code","600ae4f1":"code","b542f4a6":"code","695c6a0e":"code","b46a3045":"code","30a5df54":"markdown","573aeb6a":"markdown","327c9889":"markdown","d9eaa381":"markdown","99c0dbf4":"markdown","84f1132e":"markdown","b6a4d663":"markdown","e98563eb":"markdown","ed7e7ca2":"markdown","6685d1d2":"markdown","4353e80b":"markdown","78abbaba":"markdown","501a2aab":"markdown","5eb3f272":"markdown","5bcd1599":"markdown","2922d632":"markdown","e5c2cb6c":"markdown","b88c4093":"markdown","cb87d45f":"markdown","d91395e7":"markdown","efdfd6f1":"markdown","4a612e7f":"markdown","fbfef9a1":"markdown","18568413":"markdown","31de3eda":"markdown","5ec62cc6":"markdown","e75378fc":"markdown","2e467afb":"markdown","e49caebb":"markdown","7d72988a":"markdown","866a6dbb":"markdown","51c780a5":"markdown"},"source":{"3aadc54c":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport numpy as np\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import scale, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import KFold\nfrom xgboost import XGBClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) ","0fd6d42c":"df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","09a0fda8":"df.describe()","a4ccb97a":"def info_(dataframe):\n    print(\"shape:\",dataframe.shape)\n    print(dataframe.info())\n    print(\"Index:\",dataframe.index)\n    print(\"Columns:\",dataframe.columns)\n    print(\"ANY_NAN:\",dataframe.isnull().values.any())","ba6ba94d":"info_(df)","8763185c":"df.skew()","6b4803c5":"cat_cols = [col for col in df.columns if df[col].nunique() < 10 \n                and col not in \"Outcome\" ]\n\nnum_cols = [col for col in df.columns if df[col].nunique() > 10\n                and df[col].dtypes != \"O\"\n                and col not in \"Outcome\"]\n\nother_cols = [col for col in df.columns if col not in cat_cols \n                  and col not in num_cols and col not in \"Outcome\"]","3ea251f3":"print(\"Categorical Variables : \" , cat_cols)\nprint(\"Numerical Variables : \" , num_cols)\nprint(\"Other Variables : \" , other_cols)","b92161ea":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.05)\n    quartile3 = dataframe[variable].quantile(0.95)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","a4e22b66":"def has_outliers(dataframe, num_col_names, plot=False):\n    variable_names = []\n    for col in num_col_names:\n        low_limit, up_limit = outlier_thresholds(dataframe, col)\n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None):\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0]\n            print(col, \":\", number_of_outliers)\n            variable_names.append(col)\n            if plot:\n                sns.boxplot(x=dataframe[col])\n                plt.show()\n    return variable_names","3b6a0f07":"has_outliers(df , num_cols )","7b4a74a7":"values_to_change = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\nfor i in values_to_change:\n    df[i]=df[i].replace(0, np.NaN)\n","64ef24f6":"def missing_values_table(dataframe):\n    variables_with_na = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n\n    n_miss = dataframe[variables_with_na].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[variables_with_na].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df)\n    return variables_with_na","2302532f":"missing_values_table(df)","d7b892ad":"def median_target(var):\n    temp = df[df[var].notnull()]\n\n    temp = temp[[var, 'Outcome']].groupby(['Outcome'])[[var]].median().reset_index()\n\n    return temp","10933b4b":"columns = df.columns\ncolumns = columns.drop(\"Outcome\")","8c2cb45f":"for col in columns:\n    df.loc[(df['Outcome'] == 0) & (df[col].isnull()), col] = median_target(col)[col][0]\n    df.loc[(df['Outcome'] == 1) & (df[col].isnull()), col] = median_target(col)[col][1]","826d5f80":"def target(dataframe, target):\n    f, ax = plt.subplots(1, 2, figsize=(18, 8))\n    df[target].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.2f%%', ax=ax[0], shadow=True)\n    ax[0].set_title(target + ' Distribution')\n    ax[0].set_ylabel('')\n    sns.countplot(target, data=df, ax=ax[1])\n    ax[1].set_title(target + \" Count Plot\")\n    plt.show()","f8930382":"target(df, \"Outcome\")","3c1e9b4f":"corr_matrix = df.corr()\nsns.clustermap(corr_matrix, annot = True, fmt = \".2f\", cmap = \"icefire\", figsize=(9,9))\nplt.title(\"Correlation Between Features\")\nplt.show()","a23ea0af":"def pxfornum (dataframe):\n    for col in dataframe[num_cols]:\n        fig = px.histogram(\n        df, x=col, color='Outcome',\n        marginal='box', nbins=50,\n        color_discrete_map={0: '#D62728', 1: '#3366CC'},\n        barmode='overlay')\n        fig.update_layout(height=600, width=800, \n        title_text='Diabetes Feature')\n        fig.show()","7d4f4d7d":"pxfornum(df)","527cb928":"y = df[\"Outcome\"]\nX = df.drop([\"Outcome\"], axis = 1)","3c879edc":"log_model = LogisticRegression().fit(X,y)\ny_pred = log_model.predict(X)\nprint(\"Accuracy Score:\", accuracy_score(y, y_pred), \"\\n\")\nprint(classification_report(y,y_pred))","a07f91b8":"models = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('RF', RandomForestClassifier()))\nmodels.append(('GBM',GradientBoostingClassifier()))\nmodels.append(('XGB', GradientBoostingClassifier()))\nmodels.append((\"LightGBM\", LGBMClassifier()))","121f381f":"results = []\nnames = []\n\nfor name, model in models:\n    \n        cv_results = cross_val_score(model, X, y, cv = 10, scoring= \"accuracy\")\n        results.append(cv_results)\n        names.append(name)\n        msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n        print(msg)","5d264a77":"Importance = pd.DataFrame({'Importance':LGBMClassifier().fit(X, y).feature_importances_*100}, \n                          index = X.columns)\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = '#25B89B', figsize=(10,6))\n\nplt.xlabel('LightGBM Feature Importance')\nplt.gca().legend_ = None","e64915df":"df1 = df.copy()","52d8fea1":"df1.loc[(df1[\"BMI\"] > 0) & (df1[\"BMI\"] <= 18.5), \"HealthRisk\"] = \"Underweight\"\ndf1.loc[(df1[\"BMI\"] > 18.5) & (df1[\"BMI\"] <= 23), \"HealthRisk\"] = \"Normal\"\ndf1.loc[(df1[\"BMI\"] > 23) & (df1[\"BMI\"] <= 27.5), \"HealthRisk\"] = \"Overweight\"\ndf1.loc[(df1[\"BMI\"] > 27.5), \"HealthRisk\"] = \"Obese\"","b0d749cd":"df1['New_BMI_Skin'] = df1['BMI'] * df1['SkinThickness']\ndf1['New_Preg_Age'] =  df1['Pregnancies'] \/ df1['Age']","51e69bd2":"df1[\"New_OGTT\"] = pd.cut(x = df[\"Glucose\"], bins = [0,140,200,300], labels = [\"Normal\",\"Prediabetes\", \"Diabetes\"])","0a0a0767":"df1['New_Glu_Dia'] = df1['Glucose'] \/ df1['DiabetesPedigreeFunction']\n\ndf1['New_Age_Dia'] = df1['Age'] * df1['DiabetesPedigreeFunction']","b2b6e582":"df1['New_BP_Dia'] = pd.cut(x = df['BloodPressure'], bins = [0,80, 89, 120 , 123], labels = [\"Normal\", \"High\/Stage_1\",  \"High\/Stage_2\", \n                                                                                            \"Hyper_Crisis\"])","232276d6":"df1['New_Age_Ins'] = df1['Age'] \/ df1['Insulin']\n","d2cdf31c":"df1.loc[(df1[\"Insulin\"] > 0) & (df1[\"Insulin\"] <= 99), \"New_Ins_Status\"] = \"Abnormal\"\ndf1.loc[(df1[\"Insulin\"] > 99) & (df1[\"Insulin\"] <= 118), \"New_Ins_Status\"] = \"Normal\"\ndf1.loc[(df1[\"Insulin\"] > 118), \"New_Ins_Status\"] = \"Abnormal\"","62969dc1":"def one_hot_encoder(dataframe, categorical_columns, nan_as_category=False):\n    original_columns = list(dataframe.columns)\n    dataframe = pd.get_dummies(dataframe, columns=categorical_columns,\n                               dummy_na=nan_as_category, drop_first=True)\n    new_columns = [col for col in dataframe.columns if col not in original_columns]\n    return dataframe, new_columns\n\ncategorical_columns = [col for col in df1.columns\n                           if len(df1[col].unique()) <= 10\n                      and col != \"Outcome\"]","fd3a422c":"df1, new_cols_ohe = one_hot_encoder(df1,categorical_columns)","600ae4f1":"df1.head()","b542f4a6":"X = df1.drop('Outcome', axis=1)\ny = df1[[\"Outcome\"]]","695c6a0e":"models = [('RF', RandomForestClassifier()),\n          ('GBM',GradientBoostingClassifier()),\n          ('XGBM', XGBClassifier()),\n          (\"LightGBM\", LGBMClassifier())]\n\n# evaluate each model in turn\nresults = []\nnames = []\n\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=123456)\n    cv_results = cross_val_score(model, X, y, cv=kfold, scoring=\"accuracy\")\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","b46a3045":"lgbm = LGBMClassifier(random_state=12345)\ncross_val_score(lgbm, X, y, cv=10).mean()\n\n# model tuning\nlgbm_params = {\"learning_rate\": [0.01, 0.1, 0.5],\n               \"n_estimators\": [500, 1000, 1500],\n               \"max_depth\": [3, 5, 8]}\n\ngs_cv = GridSearchCV(lgbm,\n                     lgbm_params,\n                     cv=5,\n                     n_jobs=-1,\n                     verbose=2).fit(X, y)\n\nlgbm_tuned = LGBMClassifier(**gs_cv.best_params_).fit(X, y)\nauc=cross_val_score(lgbm_tuned, X, y, cv=10).mean()\nprint(\"Auc Score : \" , auc)\n\nfeature_imp = pd.Series(lgbm_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('Variables importance scores')\nplt.ylabel('Variables')\nplt.title(\"Variables importance levels\")\nplt.show()","30a5df54":"\n**Over time, high blood glucose leads to problems such as**\n\n* heart disease\n* stroke\n* kidney disease\n* eye problems\n* dental disease\n* nerve damage\n* foot problems","573aeb6a":"# Data Understanding","327c9889":"# Base Models","d9eaa381":"# Numerical Variable Analysis","99c0dbf4":"# **# Exploratory Data Analysis**","84f1132e":"# What health problems can people with diabetes develop?","b6a4d663":"# New Features","e98563eb":"# BMI","ed7e7ca2":"# Libraries","6685d1d2":"# Feature Importance for base Model","4353e80b":"![bm%C4%B1other.png](attachment:bm%C4%B1other.png)","78abbaba":"![amiatrisk.png](attachment:amiatrisk.png)","501a2aab":"![Bloodpressure.png](attachment:Bloodpressure.png)","5eb3f272":"* 151 people with insulin levels between 160 and 179 were found to have diabetes.\n* And 109 people with insulin levels between 100 and 118 were found to have not diabetes.","5bcd1599":"* We replaced the values we did not expect to be 0 with NaN.","2922d632":"**LightGBM Tuning**","e5c2cb6c":"# Pima Indians Diabetes Classification","b88c4093":"**Type 1 diabetes**\n* If you have type 1 diabetes, your body does not make insulin. Your immune system attacks and destroys the cells in your pancreas that make insulin. Type 1 diabetes is usually diagnosed in children and young adults, although it can appear at any age. People with type 1 diabetes need to take insulin every day to stay alive.\n\n**Type 2 diabetes**\n* If you have type 2 diabetes, your body does not make or use insulin well. You can develop type 2 diabetes at any age, even during childhood. However, this type of diabetes occurs most often in middle-aged and older people. Type 2 is the most common type of diabetes.\n\n**Gestational diabetes**\n* Gestational diabetes develops in some women when they are pregnant. Most of the time, this type of diabetes goes away after the baby is born. However, if you\u2019ve had gestational diabetes, you have a greater chance of developing type 2 diabetes later in life. Sometimes diabetes diagnosed during pregnancy is actually type 2 diabetes.","cb87d45f":"# Blood Pressure","d91395e7":"# What is Diabetes?","efdfd6f1":"# What are the different types of diabetes?\nThe most common types of diabetes are type 1, type 2, and gestational diabetes.","4a612e7f":"* Glucose, BMI, BloodPressure, SkinThickness, Insulin ; such values cannot be expected to be 0.\n* For example, having a blood pressure of 0 indicates that the person is dead.\n* Therefore, it would be more correct to assign NaN instead of 0 values in the variables we chose.","fbfef9a1":"* Diabetes is a disease that occurs when your blood glucose, also called blood sugar, is too high. Blood glucose is your main source of energy and comes from the food you eat. Insulin, a hormone made by the pancreas, helps glucose from food get into your cells to be used for energy. Sometimes your body doesn\u2019t make enough\u2014or any\u2014insulin or doesn\u2019t use insulin well. Glucose then stays in your blood and doesn\u2019t reach your cells.\n\n* Over time, having too much glucose in your blood can cause health problems. Although diabetes has no cure, you can take steps to manage your diabetes and stay healthy.\n\n* Sometimes people call diabetes \u201ca touch of sugar\u201d or \u201cborderline diabetes.\u201d These terms suggest that someone doesn\u2019t really have diabetes or has a less serious case, but every case of diabetes is serious.","18568413":"# Correlation between variables","31de3eda":"# Glucose","5ec62cc6":"# Target Analysis","e75378fc":"![OGTT.png](attachment:OGTT.png)","2e467afb":"# Models","e49caebb":"# Insulin","7d72988a":"* Pregnancies: Number of times pregnant\n* Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n* BloodPressure: Diastolic blood pressure (mm Hg)\n* SkinThickness: Triceps skin fold thickness (mm)\n* Insulin: 2-Hour serum insulin (mu U\/ml)\n* BMI: Body mass index (weight in kg\/(height in m)^2)\n* DiabetesPedigreeFunction: Diabetes pedigree function\n* Age: Age (years)\n* Outcome: Class variable (0 or 1)","866a6dbb":"![diabetes-banner.jpg](attachment:diabetes-banner.jpg)","51c780a5":"* For the values to be given for incomplete observations, I gave the median values of the non-patients to the non-patients and the median values of the patients who were sick to the patients."}}