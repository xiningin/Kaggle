{"cell_type":{"1674b345":"code","7a279224":"code","a383f021":"code","0da2a867":"code","ad41088b":"code","0d9b5fec":"code","7c6106c4":"code","9ebe18d3":"code","d774760d":"code","eeac7a6c":"code","7b9fd557":"code","76ef7662":"code","869835d6":"code","e9d9ccfd":"code","4cb28d57":"code","17900461":"code","13d4f382":"code","a91cb0bf":"code","49be8c45":"code","c09f605d":"code","8d03b35c":"markdown","736ea8e5":"markdown"},"source":{"1674b345":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7a279224":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D","a383f021":"#import scikit libraries\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.neighbors import KNeighborsRegressor","0da2a867":"#Read the csv file using pandas dataframe\ndf = pd.read_csv('..\/input\/kc_house_data.csv')","ad41088b":"#printing the first 5 rows of dataframe\ndf.head()","0d9b5fec":"#summary statistics of the dataframe\ndf.describe()","7c6106c4":"df.corr()\n#This shows how price is positively correlated to other features","9ebe18d3":"#Create the linear regression model\nmodel=linear_model.LinearRegression()\n#split data into training data and testing data\ntrain_data,test_data=train_test_split(df,train_size=0.8,random_state=3)","d774760d":"X_train=np.array(train_data['sqft_living'],dtype=pd.Series).reshape(-1,1)\ny_train=np.array(train_data['price'],dtype=pd.Series).reshape(-1,1)","eeac7a6c":"#fit the training data\nmodel.fit(X_train,y_train)","7b9fd557":"#prepare the testing data\nX_test=np.array(test_data['sqft_living'],dtype=pd.Series).reshape(-1,1)\ny_test=np.array(test_data['price'],dtype=pd.Series).reshape(-1,1)","76ef7662":"print('Average price of the Test Data is %.3f'%(y_test.mean()))\n#predict y_test\nprediction=model.predict(X_test)\nprint('Mean Squared error is %.3f'%(np.sqrt(metrics.mean_squared_error(y_test,prediction))))\nprint('Intercept is %f'%(model.intercept_))\nprint('Coefficient is %f'%(model.coef_))\n#s=model.score(X_train,y_train)\n\nprint('R-squared score of the training set is %s'%model.score(X_test,y_test))\nprint('R-squared score of the testing set is %f'%model.score(X_test,y_test))","869835d6":"#representing the data in graph\nplt.figure(figsize=(6.5,5))\nplt.scatter(X_test,y_test,color='darkgreen',label=\"Data\",alpha=.1)\nplt.xlabel(\"Space in sqft\",fontsize=15)\nplt.ylabel(\"Price is $\",fontsize=15)\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.legend()\n\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)","e9d9ccfd":"sns.set(style='white',font_scale=1)","4cb28d57":"#list all the features of the dataframe\nlist(df.columns.values)","17900461":"features=['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above',\n 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'sqft_living15', 'sqft_lot15']","13d4f382":"mask=np.zeros_like(df[features].corr(),dtype=np.bool) #shows whether the features are correlated or not in the form of an array\nmask[np.triu_indices_from(mask)]=True\n#converts the upper triangular matrux to true from false","a91cb0bf":"f,ax=plt.subplots(figsize=(16,12))\nplt.title('Pearson Correlation Matrix',fontsize=25)\n\nsns.heatmap(df[features].corr(), linewidths=0.25, vmax=1.0, square=True, cmap=\"BuGn_r\", linecolor='w', annot=True, \n            mask=mask, cbar_kws={\"shrink\": .75})\n","49be8c45":"f,axes=plt.subplots(1,2,figsize=(15,5))\n#1,2 means 1 row 2 columnswill be filled with boxes of dimension 15,5\n\nsns.boxplot(x=train_data['bedrooms'],y=train_data['price'],ax=axes[0])\nsns.boxplot(x=train_data['floors'],y=train_data['price'],ax=axes[1])\naxes[0].set(xlabel='Bedrooms',ylabel='Price')\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\naxes[1].set(xlabel='Floors',ylabel='Price')\n\n\n#creating another plot to compare bathrooms vs price of house\nf,axe=plt.subplots(1,1,figsize=(12.18,5))\nsns.boxplot(x=train_data['bathrooms'],y=train_data['price'],ax=axe)\naxe.set(xlabel='Bathrooms\/Bedrooms',ylabel='Price')\n","c09f605d":"fig=plt.figure(figsize=(19,12.5))\nax=fig.add_subplot(2,2,1, projection=\"3d\")\nax.scatter(train_data['floors'],train_data['bedrooms'],train_data['bathrooms'],c=\"darkgreen\",alpha=.5)\nax.set(xlabel='\\nFloors',ylabel='\\nBedrooms',zlabel='\\nBathrooms \/ Bedrooms')\nax.set(ylim=[0,12])\n\nax=fig.add_subplot(2,2,2, projection=\"3d\")\nax.scatter(train_data['floors'],train_data['bedrooms'],train_data['sqft_living'],c=\"darkgreen\",alpha=.5)\nax.set(xlabel='\\nFloors',ylabel='\\nBedrooms',zlabel='\\nsqft Living')\nax.set(ylim=[0,12])\n\nax=fig.add_subplot(2,2,3, projection=\"3d\")\nax.scatter(train_data['sqft_living'],train_data['sqft_lot'],train_data['bathrooms'],c=\"darkgreen\",alpha=.5)\nax.set(xlabel='\\n sqft Living',ylabel='\\nsqft Lot',zlabel='\\nBathrooms \/ Bedrooms')\nax.set(ylim=[0,250000])\n\nax=fig.add_subplot(2,2,4, projection=\"3d\")\nax.scatter(train_data['sqft_living'],train_data['sqft_lot'],train_data['bedrooms'],c=\"darkgreen\",alpha=.5)\nax.set(xlabel='\\n sqft Living',ylabel='\\nsqft Lot',zlabel='Bedrooms')\nax.set(ylim=[0,250000])","8d03b35c":"First we will import the necessary libraries","736ea8e5":"**Complex Model 1**\n"}}