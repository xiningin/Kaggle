{"cell_type":{"65234ab7":"code","48180592":"code","8b9677e8":"code","9c343626":"code","f589a460":"code","ddae5c49":"code","dddc7561":"code","b41d8acd":"code","e7e847ea":"code","ade66439":"code","f9688fa6":"code","90790e82":"code","97f3234f":"code","90e053cc":"code","ef3eea27":"code","dff77420":"code","3b8e4a03":"code","b9b39c34":"code","1050d656":"code","a434ceae":"code","01c9e58c":"code","7e8012f4":"code","fb61e61d":"markdown"},"source":{"65234ab7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48180592":"import numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Dense\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nfrom datetime import datetime","8b9677e8":"df=pd.read_csv('..\/input\/nifty-indices-dataset\/INDIAVIX.csv')\ndf.head()","9c343626":"df.isnull().sum()\n","f589a460":"df.shape","ddae5c49":"df.columns","dddc7561":"df=df[ ['Close','Change','%Change'] ]","b41d8acd":"df['FuturePrice']=df['Close'].shift(-7)# predecting last 7 values for future price","e7e847ea":"features=np.array(df.drop(['FuturePrice'],1))\nfeatures=preprocessing.scale(features)","ade66439":"features = features[:2706]        \npredictions = features[-7:] # for future predictions\nlabels=np.array(df['FuturePrice'])\nlabels=labels[:2706]","f9688fa6":"print(len(features))\nprint(len(predictions))\nprint(len(labels))\n","90790e82":"train_features, test_features, train_labels, test_labels = train_test_split(features, labels,test_size=0.2,random_state=10)\n\n","97f3234f":"print(train_features.shape)\nprint(test_features.shape)\nprint(train_labels.shape)\nprint(test_labels.shape)","90e053cc":"model=LinearRegression()\nmodel.fit(train_features,train_labels)\naccuracy=model.score(test_features,test_labels)\nprint(accuracy)","ef3eea27":"import xgboost as xgb","dff77420":"model1 = xgb.XGBRegressor()\nmodel1.fit(train_features,train_labels)\naccuracy1=model1.score(test_features,test_labels)\nprint(accuracy1)","3b8e4a03":"from sklearn.svm import SVR","b9b39c34":"model2=SVR(epsilon=0.2)\nmodel2.fit(train_features,train_labels)\naccuracy2=model2.score(test_features,test_labels)\nprint(accuracy2)","1050d656":"# best accuracy by Linear Regression","a434ceae":"prediction_prices=model.predict(predictions)\nprint(prediction_prices)","01c9e58c":"for index in range(-7,0,1):\n    rowIndex = df.iloc[-index].name\n    df['FuturePrice'][index]=prediction_prices[index+7]","7e8012f4":"df=df.truncate(before='2020-04-29')\ndf['FuturePrice'].plot()\ndf['Close'].plot()\nplt.legend()\nplt.xlabel('Date')\nplt.ylabel('Price')\nplt.show()\n","fb61e61d":"#visualization of data"}}