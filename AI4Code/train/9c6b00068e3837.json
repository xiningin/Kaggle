{"cell_type":{"3968e4a5":"code","6b80a884":"code","e5904f24":"code","d5973c9f":"code","5fb93462":"code","4ec5f480":"code","54be7e3a":"code","d9585ece":"code","f59c78ed":"code","3efb8c2b":"code","112f931b":"code","55d0f3b0":"code","dec1dc86":"code","db2b5896":"code","c87a7f5b":"code","61c4ba72":"code","65016b15":"code","780a50e2":"code","6199c59c":"code","0d14a262":"code","0dabdbab":"code","04b14247":"code","603dd9db":"markdown","b080231b":"markdown","a3fb22b6":"markdown","521239b5":"markdown","52d9688e":"markdown","61593084":"markdown","936bfbb0":"markdown","e7a68af6":"markdown","4099e8b9":"markdown","964b93d7":"markdown","23539555":"markdown","08532305":"markdown"},"source":{"3968e4a5":"import tensorflow as tf\nimport tensorflow.keras as keras\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow_datasets as tfds\nimport time","6b80a884":"def sample_images(images, row_count, column_count):\n    fig, axs = plt.subplots(row_count, column_count, figsize=(10,10))\n    for i in range(row_count):\n        for j in range(column_count):\n            axs[i,j].imshow(images[i * column_count + j])\n            axs[i,j].axis('off')\n    plt.show()","e5904f24":"def genrate_images(generator,row_count, column_count):\n    fake_images = generator(tf.random.normal([row_count * column_count, random_normal_dimensions]))\n    sample_images(fake_images, row_count, column_count)","d5973c9f":"batch_size = 100\nrandom_normal_dimensions = 32\nn_epochs = 10","5fb93462":"def preproces_image(item):\n    image = item[\"image\"]\n    image = tf.cast(image, \"float\")  \/ 255.0\n    image =tf.reshape(image, (28, 28))\n    return image","4ec5f480":"dataset = tfds.load(\"mnist\", split='train', as_supervised=False).map(preproces_image).shuffle(1024).batch(batch_size, drop_remainder=True).prefetch(1).repeat(n_epochs)","54be7e3a":"tf.keras.backend.clear_session()","d9585ece":"generator = keras.models.Sequential([                                 \n    keras.layers.Dense(64, activation=\"selu\", input_shape=[random_normal_dimensions]),\n    keras.layers.Dense(128, activation=\"selu\"),\n    keras.layers.Dense(28 * 28, activation=\"sigmoid\"),\n    keras.layers.Reshape([28, 28])\n])","f59c78ed":"generator.summary()","3efb8c2b":"discriminator = keras.models.Sequential([\n    keras.layers.Flatten(input_shape=[28, 28]),\n    keras.layers.Dense(128, activation=\"selu\"),\n    keras.layers.Dense(64, activation=\"selu\"),\n    keras.layers.Dense(1, activation=\"sigmoid\")\n])","112f931b":"discriminator.summary()","55d0f3b0":"gan = keras.Sequential([generator, discriminator])","dec1dc86":"gan.summary()","db2b5896":"discriminator.compile(loss=\"binary_crossentropy\", optimizer=\"rmsprop\")\ndiscriminator.trainable = False\ngan.compile(loss=\"binary_crossentropy\", optimizer=\"rmsprop\")","c87a7f5b":"begin = time.time()\ncurrent_traning_images = 0\ntotal = 60000 * n_epochs\ni = 0\nfor real_images in dataset:\n    noise = tf.random.normal(shape=[batch_size, random_normal_dimensions])\n    fake_images = generator(noise)\n    current_traning_images += fake_images.shape[0]\n    mixed_images = tf.concat([fake_images, real_images], axis=0)\n    discriminator_labels = tf.constant([[0.]] * batch_size + [[1.]] * batch_size)\n    discriminator.trainable = True\n    discriminator.train_on_batch(mixed_images, discriminator_labels)\n    noise = tf.random.normal(shape=[batch_size, random_normal_dimensions])\n    generator_labels = tf.constant([[1.]] * batch_size)\n    discriminator.trainable = False\n    gan.train_on_batch(noise, generator_labels)\n    if i > 0 and i % 500 == 0:\n        current_time = time.time() - begin\n        ETA = current_time \/ current_traning_images * total - current_time\n        print(\"ETA: %.2fs\"% (ETA))\n        genrate_images(generator,10, 10)\n    i += 1","61c4ba72":"genrate_images(generator,10, 10)","65016b15":"sample_count = 512\nnoise = tf.random.normal(shape=[sample_count, random_normal_dimensions])\nfake_images = generator(noise)\nprobs = discriminator.predict(fake_images)\ny_true = np.array([0.0] * sample_count)\ny_pred = np.array(probs > 0.5, dtype=int)","780a50e2":"bce = tf.keras.metrics.BinaryCrossentropy()(y_true, y_pred)\nprint(\"BCE:%.2f\"%(bce))","6199c59c":"accuracy = tf.keras.metrics.Accuracy()(y_true, y_pred)\nprint(\"Accuracy:%.2f\"%(accuracy))","0d14a262":"generator.save(\"generator.h5\")","0dabdbab":"discriminator.save(\"discriminator.h5\")","04b14247":"gan.save(\"gan.h5\")","603dd9db":"## Import Datasets","b080231b":"## Save the Model","a3fb22b6":"## Utilities","521239b5":"## Build the Generator","52d9688e":"## Build the Discriminator","61593084":"## Accuracy","936bfbb0":"## Evaluation","e7a68af6":"### BCE","4099e8b9":"## Build the GAN","964b93d7":"# Digits Generation with GAN\n## Import Packages","23539555":"This means that there is 82% of chance that Discriminator can classify the images generated by Generator fake.","08532305":"## Train the Model"}}