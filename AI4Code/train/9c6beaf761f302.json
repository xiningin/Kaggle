{"cell_type":{"ec8ef34b":"code","1eaf2f8f":"code","d6942fe9":"code","1aa8db02":"code","7f86aa23":"code","8c5d1053":"code","b7b639a4":"code","04f640c8":"code","9d9c4726":"code","4c68e523":"code","d3c5492f":"code","d31dacd3":"code","acec7195":"code","78e19798":"code","6bbae3de":"code","95c3107c":"code","db22989e":"code","a9a4214a":"code","64aa995c":"code","f0abcda6":"code","49c71214":"code","58cfe775":"code","c9621898":"code","69c55525":"code","409f7064":"code","acfbc5d9":"code","34953718":"code","3fef56fd":"code","4f32b4d4":"code","d531c12e":"code","d7876c11":"code","e9d8c26d":"code","b8afa422":"code","a7dcadb2":"code","532f6d52":"code","78a50d8b":"code","0cfee60d":"code","8a436ef4":"code","4be02ee4":"code","ed5a6097":"code","0a17e7b6":"code","f4d632d7":"code","2bb0d51d":"code","051d54ab":"code","78c10982":"code","64941aff":"code","e371a8cc":"code","7759555a":"code","704df920":"code","0334a850":"code","336fe6b3":"code","f8fb1255":"code","eb76b5ff":"code","5176169e":"code","8365a2c4":"code","62dad2d9":"code","581f6a7a":"code","ddb2eaf1":"code","81e0fcd8":"code","88eed980":"code","fc60f493":"code","eae350a9":"code","030953be":"code","def6c50a":"code","78b95db2":"code","f5163917":"code","15af3402":"code","f5f8af39":"code","a2e77b4b":"code","c4d15432":"code","44a44bca":"code","7e77fdf3":"code","a1fd0c3b":"code","6ce73dd3":"code","8892bc5d":"code","952598d7":"markdown","ebb27e77":"markdown","b54bc638":"markdown","042db286":"markdown","e5b1e969":"markdown","53fc2f58":"markdown","7a2927b6":"markdown","0f87476c":"markdown","b42548ce":"markdown","0d4632b1":"markdown","15766396":"markdown","e0e145cf":"markdown","5238120d":"markdown","25d7540f":"markdown","4aac98bc":"markdown","58eebe82":"markdown","2e5ef247":"markdown","6ac44cf7":"markdown","da12b0ae":"markdown","75400224":"markdown","99ec12ee":"markdown","64db6e6b":"markdown","c9e277ad":"markdown","0101041e":"markdown","a5a0cdd3":"markdown","e5baac51":"markdown","48438d93":"markdown","ce9d602a":"markdown","a8705fef":"markdown","c2d26313":"markdown","ad828dcc":"markdown","2e27d34c":"markdown","153688c5":"markdown","bd309041":"markdown"},"source":{"ec8ef34b":"import pandas as pd\nimport numpy as np\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.metrics import mean_squared_error\nimport plotly.express as px\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import (LinearRegression, Ridge, Lasso,LogisticRegression)\nimport warnings\nwarnings.simplefilter('ignore')\nfrom math import sqrt","1eaf2f8f":"train = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv\")","d6942fe9":"train.sample(6)","1aa8db02":"train.columns","7f86aa23":"train.shape","8c5d1053":"train.info()","b7b639a4":"cnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \ntemp = train[['Date','Fatalities', 'ConfirmedCases']]\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Fatalities', 'ConfirmedCases'])\nfig = px.treemap(temp, path=[\"variable\"], values=\"value\", height=225, \n                 color_discrete_sequence=[rec, dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","04f640c8":"#Confirmed cases by Country\ncc = train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)","9d9c4726":"top10cc = pd.DataFrame(cc).head(10)\ntop10cc","4c68e523":"#Fatalities cases by Country\nfc = train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['Fatalities'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)","d3c5492f":"top10fc = pd.DataFrame(fc).head(10)\ntop10fc","d31dacd3":"fig = px.bar(top10cc, x=top10cc.index, y='ConfirmedCases', labels={'x':'Country'},\n             color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Plotly3)\nfig.update_layout(title_text='Confirmed COVID-19 cases by country')\nfig.show()","acec7195":"def plot_map(df, col, pal):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country_Region\", locationmode='country names', \n                  color=col, hover_name=\"Country_Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n    fig.show()","78e19798":"plot_map(cc.reset_index(),'ConfirmedCases', 'matter')","6bbae3de":"fig = px.bar(top10fc, x=top10fc.index, y='Fatalities', labels={'x':'Country'},\n             color=\"Fatalities\", color_continuous_scale=px.colors.sequential.Turbo)\nfig.update_layout(title_text='Deaths COVID-19 Cases by Country')\nfig.show()","95c3107c":"plot_map(fc.reset_index(),'Fatalities', 'PuRd')","db22989e":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum()\n                          .sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'US') &(df_by_date.Date >= '2020-03-01')]\n             .sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Rainbow)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in US')\nfig.show()\n","a9a4214a":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum()\n                          .sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Italy') &(df_by_date.Date >= '2020-03-01')]\n             .sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Plasma)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Italy')\nfig.show()","64aa995c":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum()\n                          .sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'China') &(df_by_date.Date >= '2020-01-01')]\n             .sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Aggrnyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in China')\nfig.show()\n","f0abcda6":"def plot_treemap(col,dtfr):\n    df=dtfr.reset_index()\n    fig = px.treemap(df, path=[\"Country_Region\"], values=col, height=700,\n                 title=col, color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","49c71214":"plot_treemap('ConfirmedCases',cc)","58cfe775":"plot_treemap('Fatalities',fc)","c9621898":"def plot_hbar(df, col, n, hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), \n                 x=col, y=\"Country_Region\", color=col,  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()","69c55525":"plot_hbar(cc.reset_index(), 'ConfirmedCases', 20)","409f7064":"plot_hbar(fc.reset_index(), 'Fatalities', 20)","acfbc5d9":"temp = train.groupby('Date')['ConfirmedCases','Fatalities'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['ConfirmedCases','Fatalities'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600, width=700,\n             title='Cases over time', color_discrete_sequence = [rec, dth])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","34953718":"df=train.groupby(['Date','Country_Region']).agg('sum').reset_index()\ndf.head(5)","3fef56fd":"df.columns","4f32b4d4":"def pltCountry_cases(ConfirmedCases,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['ConfirmedCases'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of confirmed cases' )","d531c12e":"def pltCountry_fatalities(Fatalities,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['Fatalities'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of fatalities' )","d7876c11":"pltCountry_cases('ConfirmedCases','China')\npltCountry_fatalities('Fatalities','China')","e9d8c26d":"pltCountry_cases('ConfirmedCases', 'US','Italy','Spain','China')\npltCountry_fatalities('Fatilities','Italy','Spain','US','France')","b8afa422":"from statsmodels.tsa.stattools import adfuller\ndef ad_test(dataset):\n     dftest = adfuller(dataset, autolag = 'AIC')\n     print(\"1. ADF : \",dftest[0])\n     print(\"2. P-Value : \", dftest[1])\n     print(\"3. Num Of Lags : \", dftest[2])\n     print(\"4. Num Of Observations Used For ADF Regression:\",dftest[3])\n     print(\"5. Critical Values :\")\n     for key, val in dftest[4].items():\n         print(\"\\t\",key, \": \", val)\nad_test(df['ConfirmedCases'])","a7dcadb2":"# Format date\ntrain[\"Date\"] = train[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntrain[\"Date\"]  = train[\"Date\"].astype(int)\ntrain.head()","532f6d52":"# Drop NaNs\ntrain = train.drop(['Province_State'],axis=1)\ntrain = train.dropna()\ntrain.isnull().sum()","78a50d8b":"#Cleaning Test Data\ntest[\"Date\"] = test[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntest[\"Date\"]  = test[\"Date\"].astype(int)","0cfee60d":"train.isnull().sum()","8a436ef4":"train2=train.loc[(train['Country_Region'] == 'US')]\ntest2=test.loc[(test['Country_Region'] == 'US')]     \nx = train2[['Date']]\ny1 = train2[['ConfirmedCases']]\ny2 = train2[['Fatalities']]\nx_test = test2[['Date']]\nfrom sklearn.preprocessing import StandardScaler\nX = StandardScaler().fit_transform(x)\nX_test=StandardScaler().fit_transform(x_test)\nX_train, X_test, y_train, y_test = train_test_split(X, y1, test_size=0.25, random_state=324)\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X, y2, test_size=0.25, random_state=324)","4be02ee4":"def roll(country,case):\n    ts=df.loc[(df['Country_Region']==country)]  \n    ts=ts[['Date',case]]\n    ts=ts.set_index('Date')\n    ts.astype('int64')\n    a=len(ts.loc[(ts[case]>=10)])\n    ts=ts[-a:]\n    return (ts.rolling(window=4,center=False).mean().dropna())","ed5a6097":"tsc=roll('US','ConfirmedCases')\ntsf=roll('US','Fatalities')","0a17e7b6":"def split(ts):\n    size = int(len(ts) * 0.85)\n    train= ts[:size]\n    test = ts[size:]\n    return(train,test)\ntscc=tsc['ConfirmedCases'].values\ntsfc=tsf['Fatalities'].values\ntraincc,testcc=split(tscc)\ntrainfc,testfc=split(tsfc)","f4d632d7":"#liste pour stocker les rmse\nrmsecc=[]\nrmsefc=[]","2bb0d51d":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(max_depth=200, random_state=0)","051d54ab":"rf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nRMSE_RF = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nrfcc = pd.DataFrame(y_pred)\nrfcc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_RF)\nrmsecc.append(RMSE_RF)","78c10982":"rfcc","64941aff":"rf.fit(X_train2, y_train2)\ny_pred = rf.predict(X_test2)\nRMSE_RF = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nrffc = pd.DataFrame(y_pred)\nrffc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_RF)\nrmsefc.append(RMSE_RF)","e371a8cc":"rffc","7759555a":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([rfcc,rffc,sub],axis=1)\nsubmit.head()","704df920":"from xgboost import XGBRegressor\nxg = XGBRegressor(n_estimators=100)\nxg.fit(X_train, y_train)\ny_pred = xg.predict(X_test)\nRMSE_xg = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nxgcc = pd.DataFrame(y_pred)\nxgcc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_xg)\nrmsecc.append(RMSE_xg)","0334a850":"xgcc","336fe6b3":"xg.fit(X_train2, y_train2)\ny_pred = xg.predict(X_test2)\nRMSE_xg = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nxgfc = pd.DataFrame(y_pred)\nxgfc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_xg)\nrmsefc.append(RMSE_xg)","f8fb1255":"xgfc","eb76b5ff":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([xgcc,xgfc,sub],axis=1)\nsubmit.head()","5176169e":"dtr = DecisionTreeRegressor(max_depth=20)\ndtr.fit(X_train, y_train)\ny_pred = dtr.predict(X_test)\nRMSE_dtr = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\ndtrcc = pd.DataFrame(y_pred)\ndtrcc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_dtr)\nrmsecc.append(RMSE_dtr)\ndtrcc","8365a2c4":"dtr.fit(X_train2, y_train2)\ny_pred = dtr.predict(X_test2)\nRMSE_dtr = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\ndtrfc = pd.DataFrame(y_pred)\ndtrfc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_dtr)\nrmsefc.append(RMSE_dtr)\ndtrfc","62dad2d9":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([dtrcc,dtrfc,sub],axis=1)\nsubmit.head()","581f6a7a":"from sklearn.ensemble import AdaBoostRegressor\nada = AdaBoostRegressor(DecisionTreeRegressor(max_depth=30), learning_rate=0.5, random_state=42)\nada.fit(X_train, y_train)\ny_pred = ada.predict(X_test)\nRMSE_ada = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nadacc = pd.DataFrame(y_pred)\nadacc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_ada)\nrmsecc.append(RMSE_ada)\nadacc","ddb2eaf1":"ada.fit(X_train2, y_train2)\ny_pred = ada.predict(X_test2)\nRMSE_ada = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nadafc = pd.DataFrame(y_pred)\nadafc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_ada)\nrmsefc.append(RMSE_ada)\nadafc","81e0fcd8":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([adacc,adafc,sub],axis=1)\nsubmit.head()","88eed980":"ls = Lasso(alpha=0.1, normalize=True)\nls.fit(X_train, y_train)\ny_pred = ls.predict(X_test)\nRMSE_ls = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nlscc = pd.DataFrame(y_pred)\nlscc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_ls)\nrmsecc.append(RMSE_ls)\nlscc","fc60f493":"ls.fit(X_train2, y_train2)\ny_pred = ls.predict(X_test2)\nRMSE_ls = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nlsfc = pd.DataFrame(y_pred)\nlsfc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_ls)\nrmsefc.append(RMSE_ls)\nlsfc","eae350a9":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([lscc,lsfc,sub],axis=1)\nsubmit.head()","030953be":"lr = LinearRegression()\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nRMSE_lr = sqrt(mean_squared_error(y_true = y_test, y_pred = y_pred))\nlrcc = pd.DataFrame(y_pred)\nlrcc.columns = [\"Prediction_Confirmed\"]\nprint(RMSE_lr)\nrmsecc.append(RMSE_lr)\nlrcc","def6c50a":"lr.fit(X_train2, y_train2)\ny_pred = lr.predict(X_test2)\nRMSE_lr = sqrt(mean_squared_error(y_true = y_test2, y_pred = y_pred))\nlrfc = pd.DataFrame(y_pred)\nlrfc.columns = [\"Prediction_Fatalities\"]\nprint(RMSE_lr)\nrmsefc.append(RMSE_lr)\nlrfc","78b95db2":"sub = submission[[\"ForecastId\"]]\nsubmit = pd.concat([lrcc,lrfc,sub],axis=1)\nsubmit.head()","f5163917":"pip install pmdarima","15af3402":"#Checking for the best model\nfrom pmdarima import auto_arima\nstepwise_fit = auto_arima(traincc, trace=True,\nsuppress_warnings=True)","f5f8af39":"#Checking for the best model\nfrom pmdarima import auto_arima\nstepwise_fit = auto_arima(trainfc, trace=True,\nsuppress_warnings=True)","a2e77b4b":"def mape(y2, y_pred):\n    return sqrt(mean_squared_error(y_true = y2, y_pred = y_pred))\n\n#Arima modeling for ts\ndef arima(ts,test):\n    p=d=q=range(0,6)\n    a=99999\n    pdq=list(itertools.product(p,d,q))\n    \n    #Determining the best parameters\n    for var in pdq:\n        try:\n            model = ARIMA(ts, order=var)\n            result = model.fit()\n\n            if (result.aic<=a) :\n                a=result.aic\n                param=var\n        except:\n            continue\n            \n    #Modeling\n    model = ARIMA(ts, order=param)\n    result = model.fit()\n    result.plot_predict(start=int(len(ts) * 0.7), end=int(len(ts) * 1.2))\n    pred=result.forecast(steps=len(test))[0]\n    #Plotting results\n    f,ax=plt.subplots()\n    plt.plot(pred,c='green', label= 'predictions')\n    plt.plot(test, c='red',label='real values')\n    plt.legend()\n    plt.title('True vs predicted values')\n    #Printing the error metrics\n    print(result.summary())        \n    \n    print('\\nMean squared error: %f'%mape(test,pred))\n    return (pred)","c4d15432":"pred=arima(traincc,testcc)\nRMSE_arimacc=sqrt(mean_squared_error(y_true = testcc, y_pred = pred))\nrmsecc.append(RMSE_arimacc)","44a44bca":"pred=arima(trainfc,testfc)\nRMSE_arimafc=sqrt(mean_squared_error(y_true = testfc, y_pred = pred))\nrmsefc.append(RMSE_arimafc)","7e77fdf3":"rmsecc","a1fd0c3b":"rmsefc","6ce73dd3":"tablecc=pd.DataFrame({'RMSE':rmsecc,'Algorithmes':['RandomForestRegressor','XGBRegressor','DecisionTreeRegressor',\n                                                   'AdaBoostRegressor','Lasso','LinearRegression','ARIMA']})\ntablecc","8892bc5d":"tablefc=pd.DataFrame({'RMSE':rmsefc,'Algorithmes':['RandomForestRegressor','XGBRegressor','DecisionTreeRegressor',\n                                                   'AdaBoostRegressor','Lasso','LinearRegression','ARIMA']})\ntablefc","952598d7":"# Random Forest Regressor","ebb27e77":"### Remarque : \u00c0 partir des graphiques ci-dessus, nous pouvons dire que les \u00c9tats-Unis ont le plus de cas confirm\u00e9s et sont suivis par l'Italie. Le virus a commenc\u00e9 en Chine mais le virus montre un impact plus important sur les \u00c9tats-Unis et l'Italie que la Chine.","b54bc638":"#### Pour \u00eatre s\u00fbr que les donn\u00e9es sont stationnaires ou non, nous ex\u00e9cutons un test statistique fixe en utilisant le code suivant:","042db286":"# Checking For Stationarity","e5b1e969":"# Tableau Comparatif des diff\u00e9rents mod\u00e9les","53fc2f58":"# AdaBoost","7a2927b6":"# Time evaluation","0f87476c":"# Advanced Visualisations ","b42548ce":"## Confirmed COVID-19 cases per day in China","0d4632b1":"### Remarque : \u00c0 partir des graphiques ci-dessus, nous pouvons dire que les l'Italy ont le plus de d\u00e9c\u00e9s et sont suivis par l'espagne. Le virus a commenc\u00e9 en Chine mais le virus montre un impact plus important sur l'Italie que la Chine en terme de d\u00e9c\u00e9s.","15766396":"# Data Cleaning ","e0e145cf":"# Decision Tree Regressor","5238120d":"# XGBoost","25d7540f":"## Confirmed COVID-19 cases per day in US","4aac98bc":"## Confirmed COVID-19 cases per day in Italy","58eebe82":"# Importing Necessary Packages","2e5ef247":"# Lasso","6ac44cf7":"# Remarque : ARIMA est l'algorithme ayant la plus grande performance pour la pr\u00e9diction des cas confirm\u00e9s ","da12b0ae":"## Deaths COVID-19 Cases by Country (Map)","75400224":"# ARIMA Model","99ec12ee":"## Top 20 ","64db6e6b":"## Confirmed COVID-19 Cases by Country","c9e277ad":"# Linear Regression","0101041e":"### Remarque : En Italie, la propagation du virus a dur\u00e9 longtemps et a donc affect\u00e9 plus de personnes. Mais aux \u00c9tats-Unis dans une courte p\u00e9riode, le spread est plus de cette mani\u00e8re les \u00c9tats-Unis ont eu un grand impact","a5a0cdd3":"# Exploration Data Analysis","e5baac51":"# Remarque : XGBoost est l'algorithme ayant la plus grande performance pour la pr\u00e9diction des d\u00e9c\u00e9s","48438d93":"## Deaths COVID-19 Cases by Country","ce9d602a":"# Prepare Training","a8705fef":"# Importing DataSet","c2d26313":"### Remarque : \u00c0 partir du graphique ci-dessus, nous pouvons dire qu'en Chine, ce virus a commenc\u00e9 et a continu\u00e9 de se propager. \u00c0 partir de cette r\u00e9gion, le virus a commenc\u00e9 \u00e0 se propager dans toutes les r\u00e9gions du monde. En Chine, les cas confirm\u00e9s augmentent de jour en jour.","ad828dcc":"### Remarque : p < 0.05 donc les donn\u00e9es sont stationnaires","2e27d34c":"## Cases over time","153688c5":"## Confirmed COVID-19 Cases by Country (Map)","bd309041":"### Remarque : \u00c0 partir de ce graphique, nous pouvons dire qu'avec une courte p\u00e9riode de temps, le virus s'est propag\u00e9 aux \u00c9tats-Unis et s'est maintenu \u00e0 la 1\u00e8re place."}}