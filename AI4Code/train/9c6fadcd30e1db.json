{"cell_type":{"b9bc22fe":"code","753b32f3":"code","c7493b77":"code","d637065b":"code","e0ba37ff":"code","30ddb7c4":"code","9be9d4ac":"code","442440bb":"code","f90c9621":"code","e183fafb":"code","ff2dcc05":"code","0da24a24":"code","663140da":"code","06ef9432":"code","3671ec39":"code","98922d63":"code","4e9c77a8":"code","0a7bbae1":"code","cd06602c":"code","cd3823d7":"code","0ea49b30":"code","34737461":"code","ca02679b":"code","7c48abda":"code","46fce6f8":"code","ec63f77d":"code","ccefc7f6":"code","3ae2600b":"code","5518eba2":"code","ca94f98b":"code","b68b1b63":"code","523af978":"code","5f2d3a7c":"code","33a70ddf":"code","aadc9964":"code","e473b4be":"code","3e7241fc":"code","925456d9":"code","abfad4e9":"code","4f1af35e":"code","cce1e83a":"code","c1d44f9a":"code","aa2c8cdb":"code","76f5a92c":"code","5896d6ea":"code","26c81a13":"code","41ad3694":"code","3a20957f":"code","e493259a":"code","2e60761c":"code","438fd3f8":"code","34038651":"code","478a4ea6":"code","03074b88":"code","ccfeecec":"code","89703a8e":"code","5b2f1535":"code","e990ece2":"code","fe244061":"code","c4213b3b":"code","95c16982":"code","76fa21da":"code","653f59d1":"code","ba9c7748":"markdown","9a2d8d98":"markdown","186e010d":"markdown","ad07130c":"markdown","b492a90c":"markdown","3097aec5":"markdown","74849e50":"markdown","21a82681":"markdown","8eb9bf80":"markdown","746cb1fb":"markdown","2b933939":"markdown","3760e7c6":"markdown","1a2193c5":"markdown"},"source":{"b9bc22fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","753b32f3":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","c7493b77":"df = pd.read_csv('..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')","d637065b":"df.head()","e0ba37ff":"df.describe()","30ddb7c4":"df.info()","9be9d4ac":"#Null values:\ndf.isnull().sum()","442440bb":"#filling the missing values for numerical terms with the help of mean\ndf ['LoanAmount'] = df ['LoanAmount'].fillna(df['LoanAmount'].mean())\ndf ['Loan_Amount_Term'] = df ['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mean())\ndf ['Credit_History'] = df ['Credit_History'].fillna(df['Credit_History'].mean())","f90c9621":"#filling the missing values for categorical terms with the help of mode\ndf ['Gender'] = df ['Gender'].fillna(df['Gender'].mode()[0])\ndf ['Married'] = df ['Married'].fillna(df['Married'].mode()[0])\ndf ['Dependents'] = df ['Dependents'].fillna(df['Dependents'].mode()[0])\ndf ['Self_Employed'] = df ['Self_Employed'].fillna(df['Self_Employed'].mode()[0])","e183fafb":"df.isnull().sum()","ff2dcc05":"sns.countplot(df['Gender'])","0da24a24":"sns.countplot(df['Married'])","663140da":"sns.countplot(df['Dependents'])","06ef9432":"sns.countplot(df['Education'])","3671ec39":"sns.countplot(df['Self_Employed'])","98922d63":"sns.countplot(df['Property_Area'])","4e9c77a8":"sns.countplot(df['Loan_Status'])","0a7bbae1":"sns.distplot(df['ApplicantIncome'])","cd06602c":"df['ApplicantIncome'] = np.log(df['ApplicantIncome'])","cd3823d7":"sns.distplot(df['ApplicantIncome'])","0ea49b30":"df.head()","34737461":"sns.distplot(df['CoapplicantIncome'])","ca02679b":"df['CoapplicantIncome'] = np.log(df['CoapplicantIncome']+1)","7c48abda":"df.head()","46fce6f8":"sns.distplot(df['CoapplicantIncome'])","ec63f77d":"sns.distplot(df['LoanAmount'])","ccefc7f6":"df['LoanAmount'] = np.log(df['LoanAmount'])","3ae2600b":"sns.distplot(df['LoanAmount'])","5518eba2":"sns.distplot(df['Loan_Amount_Term'])","ca94f98b":"df['Loan_Amount_Term'] = np.log(df['Loan_Amount_Term'])","b68b1b63":"sns.distplot(df['Loan_Amount_Term'])","523af978":"sns.distplot(df['Credit_History'])","5f2d3a7c":"df['Total_Income'] = df['ApplicantIncome'] + df['CoapplicantIncome']","33a70ddf":"df.head()","aadc9964":"df['ApplicantIncomeLog'] = np.log(df['ApplicantIncome'])\nsns.distplot(df['ApplicantIncomeLog'])","e473b4be":"df['CoapplicantIncomeLog'] = np.log(df['CoapplicantIncome']+1)\nsns.distplot(df['CoapplicantIncomeLog'])","3e7241fc":"df['LoanAmountLog'] = np.log(df['LoanAmount'])\nsns.distplot(df['LoanAmountLog'])","925456d9":"df['Loan_Amount_TermLog'] = np.log(df['Loan_Amount_Term'])\nsns.distplot(df['Loan_Amount_TermLog'])","abfad4e9":"df['Total_IncomeLog'] = np.log(df['Total_Income'])\nsns.distplot(df['Total_IncomeLog'])","4f1af35e":"corr = df.corr()","cce1e83a":"plt.figure(figsize=(15,10))\nsns.heatmap(corr,annot=True,cmap=\"BuPu\")","c1d44f9a":"df.head()","aa2c8cdb":"## drop unnecessary columns\ncols = ['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount' ,'Loan_Amount_Term','Total_Income','Loan_ID','CoapplicantIncomeLog']\ndf = df.drop(columns = cols , axis = 1)","76f5a92c":"df.head()","5896d6ea":"from sklearn.preprocessing import LabelEncoder","26c81a13":"cols = ['Gender','Married','Education','Self_Employed','Property_Area','Loan_Status','Dependents']\nle = LabelEncoder()\nfor col in cols :\n    df[col] = le.fit_transform(df[col])","41ad3694":"df.head()","3a20957f":"X = df.drop(columns = ['Loan_Status'],axis =1)","e493259a":"y = df['Loan_Status']","2e60761c":"from sklearn.model_selection import train_test_split","438fd3f8":"x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=42)","34038651":"from sklearn.model_selection import cross_val_score\ndef classify(model,x,y):\n    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)\n    model.fit(x_train,y_train)\n    print(\"Accuracy is \", model.score(x_test,y_test)*100)\n    score=cross_val_score(model,x,y,cv=5)\n    print(\"Cross validation is ,\" ,np.mean(score)*100)","478a4ea6":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nclassify(model,X,y)","03074b88":"from sklearn.tree import DecisionTreeClassifier","ccfeecec":"model = DecisionTreeClassifier()","89703a8e":"classify(model,X,y)","5b2f1535":"from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier\nmodel = RandomForestClassifier()\nclassify(model,X,y)","e990ece2":"model = ExtraTreesClassifier()\nclassify(model,X,y)","fe244061":"model = RandomForestClassifier(n_estimators=100,min_samples_split=25, max_depth=7,max_features=1)\nclassify(model, X,y)","c4213b3b":"model = RandomForestClassifier()\nmodel.fit(x_train,y_train)","95c16982":"from sklearn.metrics import confusion_matrix\ny_pred=model.predict(x_test)\ncm = confusion_matrix(y_pred,y_test)","76fa21da":"cm","653f59d1":"sns.heatmap(cm,annot=True)","ba9c7748":"## LOADING THE DATASET: ","9a2d8d98":"## TRAIN-TEST SPLIT:","186e010d":"## CREATING NEW ATTRIBUTES:","ad07130c":"## HYPERPARAMETER TUNING:","b492a90c":"## LOG TRANSFORMATION:","3097aec5":"##### CATEGORICAL ATTRIBUTE VISUALIZATION:","74849e50":"## PREPROCESSING THE DATASET","21a82681":"##### NUMERICAL ATTRIBUTE VISUALIZATION:","8eb9bf80":"## MODEL TRAINING:","746cb1fb":"## IMPORT MODULES:","2b933939":"## LABEL ENCODING:","3760e7c6":"## EXPLORATORY DATA ANALYSIS:","1a2193c5":"## CORRELATION MATRIX:"}}