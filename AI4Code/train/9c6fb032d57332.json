{"cell_type":{"372c9bff":"code","2474613f":"code","77470c5a":"code","ae7ddb00":"code","bdbdf8d2":"code","5182bb82":"code","28b5d429":"code","b5ae8135":"code","2d91bc26":"code","7a4cd01e":"code","dc486e8f":"code","03055031":"code","dafdad2c":"code","68fecb04":"code","9489f7cf":"code","1b39c94a":"code","bf241a76":"code","66ed8672":"code","3fa09079":"code","8da6a6d2":"code","09051513":"code","ed8f9941":"code","bfe4d42d":"code","27052014":"code","f8d80c2c":"code","547273bd":"code","0b7208b6":"code","a5cc6044":"code","084b248c":"code","e51c5457":"code","a19679f6":"code","42e29fe4":"code","460505b4":"code","d39d5e8d":"code","4fea2960":"code","447aa9b1":"code","c0bc2315":"code","1e00616d":"code","285844e1":"code","4b429d72":"code","cbe75deb":"code","67c93f48":"code","77d3a7ab":"code","9afcd814":"markdown","2de2608a":"markdown","c17dc030":"markdown","04735589":"markdown"},"source":{"372c9bff":"import os, torch, pandas as pd, numpy as np, seaborn as sns, matplotlib.pyplot as plt\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\nimport torchvision\n\n%matplotlib inline\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2474613f":"!pip install imutils\nfrom imutils import paths","77470c5a":"data_dir = \"..\/input\/super-hero\/Q4-superheroes_image_data\/\"\ntrain_dir = data_dir+'CAX_Superhero_Train'\ntest_dir = data_dir+'CAX_Superhero_Test'","ae7ddb00":"label_enc = {\n    'Ant-Man': 0,\n    'Aquaman' : 1,\n    'Avengers': 2,\n    'Batman': 3,\n    'Black Panther': 4,\n    'Captain America': 5,\n    'Catwoman': 6,\n    'Ghost Rider': 7,\n    'Hulk': 8,\n    'Iron Man': 9,\n    'Spiderman': 10,\n    'Superman': 11\n}\nlabel_deco = {\n    0: 'Ant-Man',\n    1: 'Aquaman',\n    2: 'Avengers',\n    3: 'Batman',\n    4: 'Black Panther',\n    5: 'Captain America',\n    6: 'Catwoman',\n    7: 'Ghost Rider',\n    8: 'Hulk',\n    9: 'Iron Man',\n    10: 'Spiderman',\n    11: 'Superman'\n}","bdbdf8d2":"from tqdm import tqdm","5182bb82":"def create_img_df(dir):\n    img_list = list(paths.list_images(dir))\n    data = pd.DataFrame(columns=['File_name', 'Target'])\n    for i, ipaths in tqdm(enumerate(img_list), total=len(img_list)):\n        data.loc[i, 'image_path'] = ipaths\n        data.loc[i, 'File_name']=os.path.basename(ipaths)\n        data.loc[i, 'Target']=(os.path.split(os.path.dirname(ipaths))[-1])\n    return data","28b5d429":"train_csv = create_img_df(train_dir)","b5ae8135":"train_csv.tail(2)","2d91bc26":"#counting number of images under each category\nplt.figure(figsize=(10,6))\ng=sns.countplot(train_csv['Target'])\ng.set_xticklabels(g.get_xticklabels(),rotation=40);","7a4cd01e":"train_csv['Target'] = train_csv['Target'].apply(lambda x: label_enc[x])","dc486e8f":"train_csv.head(5)","03055031":"#train_csv.to_csv('training_csv.csv',index=False)\n#os.remove('training_csv.csv')","dafdad2c":"#encoder decoder for labels\n#encoder converts Target to [0,0,0,0,1,0,0,0,0,0,0,0] format where the binary represents the class\ndef encode_label(label):\n    target = torch.zeros(12,dtype=torch.float)\n    target[int(label)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False,threshold=0.5):\n    label = None\n    for i,x in enumerate(target):\n        if (x >= threshold):\n            label = i\n            break\n    if text_labels:\n        return f\"{label_deco[label]}({label})\"\n    return label\n","68fecb04":"#testing\nencoded_lab = encode_label(4) #class 4 is Black Panther\ndecoded_lab = decode_target(encoded_lab)\ntext = decode_target(encoded_lab,True)\nprint(encoded_lab,decoded_lab,text,sep='\\n')\ndel(encoded_lab,decoded_lab,text)","9489f7cf":"transformer = transforms.Compose([\n    transforms.Resize(130),\n    transforms.CenterCrop(129),\n    transforms.ToTensor()\n])","1b39c94a":"#custom Dataset\nclass heroDataset(Dataset):\n    def __init__(self, csv_file, root_dir, transform=None):\n        self.df = csv_file\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['File_name'], row['Target']\n        img = Image.open(row['image_path'])\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","bf241a76":"train_dataset = heroDataset(train_csv,train_dir,transform=transformer)\n#test_dataset = heroDataset(test_csv,test_dir,transform=transformer)","66ed8672":"train_dataset[250]\n#Label is attached","3fa09079":"train_dataset[1][0].shape","8da6a6d2":"def show_sample(img, target):\n    plt.imshow(img.permute(1, 2, 0));\n    print('Labels:', decode_target(target, text_labels=True))","09051513":"show_sample(*train_dataset[250])","ed8f9941":"show_sample(*train_dataset[2000])","bfe4d42d":"torch.manual_seed(10)\n#11% validation set size\nval_pct = 0.11\nval_size = int(val_pct * len(train_dataset))\ntrain_size = len(train_dataset) - val_size","27052014":"train_ds, val_ds = random_split(train_dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","f8d80c2c":"batch_size = 50\ninput_size = 129*129\noutput_size = 12\n\n#train_loader = DataLoader(train_ds, batch_size, shuffle=True)\n#val_loader = DataLoader(val_ds, batch_size)","547273bd":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","0b7208b6":"for a,b in val_dl:\n    print(a.shape, b.shape,sep='\\n')\n    break","a5cc6044":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = images\n        ax.imshow(make_grid(data, nrow=15).permute(1, 2, 0))\n        break","084b248c":"show_batch(train_dl)\n#Displayed 1 batch","e51c5457":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","a19679f6":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","42e29fe4":"class ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.binary_cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.binary_cross_entropy(out, labels)   # Calculate loss\n        acc = F_score(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))","460505b4":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","d39d5e8d":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","4fea2960":"device = get_default_device()\ndevice","447aa9b1":"def plot_losses(history):\n    losses = [x['val_loss'] for x in history]\n    plt.plot(losses, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.title('Loss vs. No. of epochs');","c0bc2315":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","1e00616d":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\n#test_loader = DeviceDataLoader(test_loader, device)","285844e1":"#CNN Network\n\n\nclass ConvNet(ImageClassificationBase):\n    def __init__(self,num_classes=6):\n        super(ConvNet,self).__init__()\n        \n        #Output size after convolution filter\n        #((w-f+2P)\/s) +1\n        \n        #Input shape= (100,3,129,129)\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 256 x 16 x 16\n\n            nn.Flatten(), \n            nn.Linear(256*16*16, 1024),\n            nn.ReLU(),\n            nn.Linear(1024, 512),\n            nn.ReLU(),\n            nn.Linear(512, 12))\n        \n    def forward(self, xb):\n        return self.network(xb)\n    ","4b429d72":"model2 = to_device(ConvNet(), device)","cbe75deb":"for images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = model2(images)\n    print('out.shape:', out.shape)\n    print('out[0]:', out[0])\n    break","67c93f48":"evaluate(model2, val_dl)","77d3a7ab":"'''from torch.optim import Adam\noptimizer=Adam(model.parameters(),lr=0.001,weight_decay=0.0001)\nloss_function=nn.CrossEntropyLoss()'''\n","9afcd814":"# Model + Training","2de2608a":"# DataLoader","c17dc030":"# Preparing Dataset","04735589":"#### Preparing csv file for image mapping for DataLoader"}}