{"cell_type":{"2033d648":"code","1c39a775":"code","f4a4a797":"code","d1637f56":"code","2dac7508":"code","1ff9da00":"code","28e16b43":"code","e79e725f":"code","e84c8158":"code","e69bce97":"code","83e67e23":"code","13e219ff":"code","9122339a":"code","868ba0e4":"code","b52ef681":"code","c70c75ef":"code","088b2e65":"code","60115a00":"code","52f8a798":"code","f813fc27":"code","619e6a66":"code","ace09b9b":"code","e4a19bc1":"code","f66e1431":"code","6d86bc6b":"code","93ad73dd":"code","095e4774":"code","b770d338":"code","6e055a77":"code","c895a30c":"code","90cdbac6":"code","1d27367a":"code","625225f8":"code","1c422016":"code","2ffc7bb0":"code","b69b5010":"code","8f75be32":"code","0813b453":"code","22d495c6":"code","ac112ca6":"code","b2059919":"code","0fdfc4da":"code","bab035c6":"code","021e2bd5":"code","c8f756d5":"code","40ddadeb":"code","b5caf49c":"code","46b3bccb":"code","667dd438":"markdown","7b4b7580":"markdown","9b97d280":"markdown","db083b7c":"markdown","87e62d6b":"markdown","5a71f025":"markdown","3f8b6733":"markdown","a3c89df0":"markdown","036030d5":"markdown","0308a07b":"markdown","7f2174cd":"markdown","89633052":"markdown","3e196195":"markdown","69ab6963":"markdown"},"source":{"2033d648":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\nsns.set(rc={'figure.figsize':(12, 10)})\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c39a775":"df=pd.read_csv(\"..\/input\/titanic\/test.csv\")","f4a4a797":"df.head(5)","d1637f56":"data=pd.read_csv(\"..\/input\/titanic\/train.csv\")","2dac7508":"data.head()","1ff9da00":"df2=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","28e16b43":"df2.head()","e79e725f":"data.info()","e84c8158":"data.isnull().sum()","e69bce97":"data.describe()","83e67e23":"plt.figure(figsize=(12, 10))\nheatmap = sns.heatmap(data[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr(), annot=True)","13e219ff":"data['SibSp'].nunique()","9122339a":"data['SibSp'].unique()","868ba0e4":"bargraph_sibsp = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = data, kind = \"bar\", size = 8)\nbargraph_sibsp = bargraph_sibsp.set_ylabels(\"survival probability\")","b52ef681":"age_visual = sns.FacetGrid(data, col = 'Survived', size=7)\nage_visual = age_visual.map(sns.distplot, \"Age\")\nage_visual = age_visual.set_ylabels(\"survival probability\")","c70c75ef":"import matplotlib.pyplot as plt\nplt.figure(figsize=(12, 10))\nage_plot = sns.barplot(x = \"Sex\",y = \"Survived\", data = data)\nage_plot = age_plot.set_ylabel(\"Survival Probability\")","088b2e65":"data[[\"Sex\",\"Survived\"]].groupby('Sex').mean()","60115a00":"pclass = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = data, kind = \"bar\", size = 8)\npclass = pclass.set_ylabels(\"survival probability\")","52f8a798":"g = sns.factorplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=data, size=6, kind=\"bar\")\ng = g.set_ylabels(\"survival probability\")","f813fc27":"data[\"Embarked\"].isnull().sum()","619e6a66":"#Fill Embarked with 'S' i.e. the most frequent values\ndata[\"Embarked\"] = data[\"Embarked\"].fillna(\"S\")","ace09b9b":"g = sns.factorplot(x=\"Embarked\", y=\"Survived\", data=data, size=7, kind=\"bar\")\ng = g.set_ylabels(\"survival probability\")","e4a19bc1":"# Explore Pclass vs Embarked \ng = sns.factorplot(\"Pclass\", col=\"Embarked\",  data=data, size=7, kind=\"count\")\ng.despine(left=True)\ng = g.set_ylabels(\"Count\")","f66e1431":"data=pd.read_csv(\"..\/input\/titanic\/train.csv\")","6d86bc6b":"data.head()","93ad73dd":"data.info()","095e4774":"mean = data[\"Age\"].mean()\nstd = data[\"Age\"].std()\nis_null = data[\"Age\"].isnull().sum()\n    \n# compute random numbers between the mean, std and is_null\nrand_age = np.random.randint(mean - std, mean + std, size = is_null)\n    \n# fill NaN values in Age column with random values generated\nage_slice = data[\"Age\"].copy()\nage_slice[np.isnan(age_slice)] = rand_age\ndata[\"Age\"] = age_slice","b770d338":"data[\"Age\"].isnull().sum()","6e055a77":"data.info()","c895a30c":"data[\"Embarked\"].isnull().sum()","90cdbac6":"#Fill Embarked with 'S' i.e. the most frequent values\ndata[\"Embarked\"] = data[\"Embarked\"].fillna(\"S\")","1d27367a":"col_to_drop = ['PassengerId','Cabin', 'Ticket','Name']\ndata.drop(col_to_drop, axis=1, inplace = True)","625225f8":"data.head()","1c422016":"genders = {\"male\": 0, \"female\": 1}\ndata['Sex'] = data['Sex'].map(genders)","2ffc7bb0":"data.head()","b69b5010":"ports = {\"S\": 0, \"C\": 1, \"Q\": 2}\n\ndata['Embarked'] = data['Embarked'].map(ports)","8f75be32":"data.head()","0813b453":"data.info()","22d495c6":"# input and output data\n\nx = data.drop(data.columns[[0]], axis = 1)\ny = data['Survived']","ac112ca6":"x.head()","b2059919":"y.head()","0fdfc4da":"# splitting into training and testing data\nfrom sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.30, random_state =0)","bab035c6":"from sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nxtrain = sc_x.fit_transform(xtrain) \nxtest = sc_x.transform(xtest)","021e2bd5":"logreg = LogisticRegression()\nsvc_classifier = SVC()\ndt_classifier = DecisionTreeClassifier()\nknn_classifier = KNeighborsClassifier(5)\nrf_classifier = RandomForestClassifier(n_estimators=1000, criterion = 'entropy', random_state = 0 )","c8f756d5":"logreg.fit(xtrain, ytrain)\nsvc_classifier.fit(xtrain, ytrain)\ndt_classifier.fit(xtrain, ytrain)\nknn_classifier.fit(xtrain, ytrain)\nrf_classifier.fit(xtrain, ytrain)","40ddadeb":"logreg_ypred = logreg.predict(xtest)\nsvc_classifier_ypred = svc_classifier.predict(xtest)\ndt_classifier_ypred = dt_classifier.predict(xtest)\nknn_classifier_ypred = knn_classifier.predict(xtest)\nrf_classifier_ypred = rf_classifier.predict(xtest)","b5caf49c":"# finding accuracy\nfrom sklearn.metrics import accuracy_score\n\nlogreg_acc = accuracy_score(ytest, logreg_ypred)\nsvc_classifier_acc = accuracy_score(ytest, svc_classifier_ypred)\ndt_classifier_acc = accuracy_score(ytest, dt_classifier_ypred)\nknn_classifier_acc = accuracy_score(ytest, knn_classifier_ypred)\nrf_classifier_acc = accuracy_score(ytest, rf_classifier_ypred)","46b3bccb":"print (\"Logistic Regression : \", round(logreg_acc*100, 2))\nprint (\"Support Vector      : \", round(svc_classifier_acc*100, 2))\nprint (\"Decision Tree       : \", round(dt_classifier_acc*100, 2))\nprint (\"K-NN Classifier     : \", round(knn_classifier_acc*100, 2))\nprint (\"Random Forest       : \", round(rf_classifier_acc*100, 2))","667dd438":"### Let's find the reason","7b4b7580":"## <font color = \"green\">Pclass vs Survived by Sex<\/font>","9b97d280":"###****UpLoading the train csv file....**","db083b7c":"## <font color = \"green\">Sex<\/font>","87e62d6b":"## <font color = \"green\"> Classification<\/font>","5a71f025":"## <font color = \"green\">sibsp - Number of siblings \/ spouses aboard the Titanic <\/font>","3f8b6733":"## <font color = \"green\">Embarked <\/font>","a3c89df0":"## <font color = \"green\">PClass<\/font>","036030d5":"# <font color = \"green\">Preparing data<\/font>","0308a07b":"## <font color = \"green\">Splitting data<\/font>","7f2174cd":"## <font color = \"green\">Feature Scaling<\/font>","89633052":"## <font color = \"green\"> Age <\/font>","3e196195":"## <font color = 'green'>Numerical Value Analysis<\/font>","69ab6963":"## <font color = \"green\">Splitting data<\/font>"}}