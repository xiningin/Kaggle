{"cell_type":{"11a6aba2":"code","cc1a6827":"code","b3d074ee":"code","e61fa993":"code","1f050028":"code","c4317940":"code","5e6fda6d":"code","c3f6d003":"code","26c0d362":"code","f2466651":"code","e3bc54ce":"code","5bbc470f":"code","b6e4f117":"code","ee6c3ce6":"code","64ddf2ad":"code","9c7f6c4a":"code","5b729dd4":"code","3f773ef6":"code","c91c8138":"code","71ef2f4a":"code","e4b98a42":"code","afe2f288":"code","f2b5f367":"code","dbac93c9":"code","90000606":"code","f8269ca0":"code","bb7d53bc":"code","ad4b50b5":"code","0fea128a":"code","8c81cb8e":"code","d0bcc637":"code","90fa79ce":"code","f6d5e84b":"markdown","2d019677":"markdown","fb48acc3":"markdown","4e398177":"markdown","c931875e":"markdown"},"source":{"11a6aba2":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nimport datetime as datetime\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","cc1a6827":"data0 = pd.read_csv(\"..\/input\/goalkeeper-actions-dataset\/attack.csv\",sep=';')\ndata0[0:2].T","b3d074ee":"data0['T']","e61fa993":"sec=[]\nfor item in data0['T']:\n    h=int(item[0:1])\n    m=int(item[2:4])\n    s=int(item[-2:])\n    sec+=[h*3600+m*60+s]\ndata0['Sec']=sec\ndata0[['T','Sec']]","1f050028":"data0.columns","c4317940":"data0['Scoringopportunity'].value_counts()","5e6fda6d":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","c3f6d003":"data1=df\ndata1[0:2].T","26c0d362":"data1.columns","f2466651":"target=['Scoringopportunity']\ndatay=data1[target]\ndatax=data1.drop(target,axis=1)","e3bc54ce":"print(datay[0:2].T)\nprint(datax[0:2].T)","5bbc470f":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","b6e4f117":"df_columns = list(datax.columns)\ndf_columns","ee6c3ce6":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","64ddf2ad":"train_df.columns=df_columns\n#test_df.columns=df_columns","9c7f6c4a":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","5b729dd4":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","3f773ef6":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","c91c8138":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","71ef2f4a":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","e4b98a42":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","afe2f288":"y = trainy\nprint(y.shape)","f2b5f367":"ydf=pd.DataFrame(y)\nydf","dbac93c9":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)\n","90000606":"print(target)","f8269ca0":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","bb7d53bc":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","ad4b50b5":"data2=data1[['Sec','Scoringopportunity']]","0fea128a":"from tensorflow.keras.utils import to_categorical\nlabels0=data1['Scoringopportunity']\nlabels1=to_categorical(labels0)\nlabels1","8c81cb8e":"data2[['Scoringopportunity=0','Scoringopportunity=1']]=labels1\ndata2","d0bcc637":"sec60=[]\nfor i in range(len(data2)):\n    sec60+=[data2.loc[i,'Sec']\/\/60]\ndata2['Sec\/\/60']=sec60\ndata2","90fa79ce":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Bar(x=data2['Sec\/\/60'],y=data2['Scoringopportunity=0'],name=\"ScoringOpportunity=0\"),secondary_y=False,)\nfig.add_trace(go.Bar(x=data2['Sec\/\/60'],y=data2['Scoringopportunity=1'],name=\"ScoringOpportunity=1\"),secondary_y=False,)\nfig.update_layout(autosize=False,width=700,height=500,title_text=\"Scoring Opportunity and Time\")\nfig.update_xaxes(title_text=\"Sec\/\/60\")\nfig.update_yaxes(title_text=\"Cases\",secondary_y=False)\nfig.show()","f6d5e84b":"# Model","2d019677":"# Data preparation","fb48acc3":"### 'Sec' is the most important factor for 'Scoring opportunity' by a goal keeper.  ","4e398177":"# Visualize Importance","c931875e":"# Target setting"}}