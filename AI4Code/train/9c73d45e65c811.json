{"cell_type":{"e837b20b":"code","2bd21fc7":"code","09db7be9":"code","7d9bb8ff":"code","5d19cfb9":"code","3e2c697a":"code","93eb4b0f":"code","02b2b71d":"code","1bdd9790":"code","831af9e5":"code","13fb8dd9":"code","6b363274":"code","a0fd951b":"code","f4115300":"code","2f30d740":"code","62a2244d":"code","d14180b2":"code","529dc613":"code","da4b10a9":"code","5db1dbcb":"code","18d22b1e":"code","9627225f":"code","44772a9d":"code","a28e61ad":"code","4a681471":"code","cbd838d2":"code","496037cc":"code","75d4dae1":"code","423ca1b0":"code","d39243fe":"code","f1c20978":"code","dc5918b8":"code","5b3e224d":"code","b8b52006":"code","32c202ee":"code","0f6e8040":"code","743bd9d9":"code","f5013e1c":"code","59e6ad8e":"code","ac0cf907":"code","58cef137":"code","4c5420df":"code","5804c33f":"code","18083084":"code","8d691786":"code","cc556bde":"markdown","b1b343c5":"markdown","379c02aa":"markdown","7639dab6":"markdown","a4d93211":"markdown","ee2c3f6c":"markdown","35d00091":"markdown","0095166c":"markdown","c23e0ff5":"markdown","a68fdeb9":"markdown","8ce89af7":"markdown","d1927b06":"markdown","7ff63eed":"markdown","222ce5e7":"markdown","4090c290":"markdown","50270cff":"markdown","08a682db":"markdown","f417002c":"markdown","e622c57a":"markdown","c08fb668":"markdown","f3b5be34":"markdown","8caaca9b":"markdown","78a8f96c":"markdown","0b558098":"markdown","2462bee4":"markdown","0d655e7e":"markdown"},"source":{"e837b20b":"# Essentials\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n%matplotlib inline\n\n# Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","2bd21fc7":"# Read in the data\n# !ls ..\/input\/house-prices-advanced-regression-techniques\ntrain_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\n# Check the shapes\ntrain_data.shape, test_data.shape","09db7be9":"train_data.head()","7d9bb8ff":"# Get a rough overview of the training data\ntrain_data.describe()","5d19cfb9":"# Get a look at the column names and object types\ntrain_data.info()","3e2c697a":"# Drop the ID column\ntrain_data.drop('Id', axis=1, inplace=True)","93eb4b0f":"# Collect the names of the Categorical and Numeric Variables seperately\nnum_columns = train_data.select_dtypes(include=np.number).columns.tolist()\nnum_columns.remove(\"SalePrice\") # Capturing feature names exclusively\ncat_columns = train_data.select_dtypes(exclude=np.number).columns.tolist()\n\n# Check if the number makes sense (+1 for the target variable that was dropped)\nlen(num_columns) + len(cat_columns) + 1 == len(train_data.columns)","02b2b71d":"# Explore Categorical Columns\n# cat_columns <- Find a number of variables related to each other by name\n\n# Explore overlapping variable names\nrepetitive = [\"Bsmt\", \"Garage\", \"Sale\", \"Kitchen\"]\nsimilar_cols = []\nprint(\"Looking for highly similar variable names\")\nprint('--'*30)\nfor col in (num_columns + cat_columns):\n    if any(x in col for x in repetitive):\n        print(col)\n        similar_cols.append(col)","1bdd9790":"# Check the cardinality of each of these variables\nprint(\"Looking at Categorical Variable Cardinalities\")\nprint('--'*30)\nfor col in cat_columns:\n    uniques = train_data[col].unique()\n    if len(uniques) > 10:\n        print(f\"{len(uniques)} values in {col}\")\n    else:\n        print(f\"{len(uniques)} values in {col}: {uniques}\")","831af9e5":"# Are there any low cardinality numeric variables?\nprint(\"Checking for Low Cardinality Numeric Variables\")\nprint(\"--\"*30)\nfor col in num_columns:\n    uniques = train_data[col].unique()\n    if len(uniques) < 20:\n        print(f\"{len(uniques)} unique values in {col}: {sorted(uniques)}\")","13fb8dd9":"# Explore which numeric columns have high linear correlation\ncorr_matrix = train_data.corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(corr_matrix, cmap='Blues')","6b363274":"# Sort the highest linear correlations with target variable\ntarget_var = \"SalePrice\"\ncorr_matrix[target_var].apply(lambda x: abs(x)).sort_values(ascending=False)","a0fd951b":"# Explore the second variable (notice the significant Linear Correlation)\nsns.scatterplot(x=\"OverallQual\", y=\"SalePrice\", data=train_data)","f4115300":"# Explore the Distribution of the Target Variable\nsns.distplot(train_data[target_var])","2f30d740":"# Where do most values lie under? Explore the Percentiles.\nfor i in range(95,100):\n    print(f\"{i}% of the target values lie under: {int(np.percentile(train_data[target_var], i))}\")\nprint(f\"Critical Values:\\n\\tMax:{train_data[target_var].max()}\\n\\tMin:{train_data[target_var].min()}\")","62a2244d":"# We can get rid of Outliers by setting some thresholds\nupper_thresh = 38500\n# train_data[train_data[target_var] > upper_thresh][target_var] = upper_thresh","d14180b2":"# Log Transform to reduce skewness of the Target Distribution\nprint(f\"Before Log Transform: Skewness {stats.skew(train_data.SalePrice)}\")\ntrain_data[\"SalePrice\"] = np.log1p(train_data[\"SalePrice\"])\nprint(f\"After Log Transform: Skewness {stats.skew(train_data.SalePrice)}\")\n# y = np.expm1(y)\nprint(f\"Applying Inverse Transformation: Skewness {stats.skew(np.expm1(train_data.SalePrice))}\") # This is to demonstrate retaining our original targets\nprint(f\"Final Skewness: {stats.skew(train_data.SalePrice)}\")\nsns.distplot(train_data[\"SalePrice\"])","529dc613":"# Split the data before moving on\nX = train_data.drop(target_var, axis=1)\ny = train_data[target_var]\nX.shape, y.shape","da4b10a9":"# Get a visual of how many values are missing\nmissing_count = X.isnull().sum()\nmissing_count = missing_count[missing_count > 0]\nmissing_cols = pd.DataFrame(missing_count).index.tolist()\nplt.figure(figsize=(12,8))\nsns.heatmap(X[missing_cols].isnull(), cmap='viridis', cbar=False)","5db1dbcb":"# Get actual numbers \nmissing_count.sort_values(ascending=False) \/ len(X) * 100","18d22b1e":"# Which missing value columns are numeric and which are categorical\nprint(X[missing_cols].dtypes)\nX[missing_cols].head(10)","9627225f":"# Define a function for Data Cleaning\ndef handle_missing(df):\n    # LotFrontage, MasVnrArea are generic numeric features so we can fill with the median\n    cols = ['LotFrontage', 'MasVnrArea']\n    for col in cols:\n        df[col] = df[col].fillna(df[col].median())\n    \n    # Some features have missing values because one does not exist for that instance\n    none_fill_cols = \"Alley BsmtQual BsmtCond BsmtExposure BsmtFinType1 BsmtFinType2 Electrical FireplaceQu GarageType GarageFinish GarageQual GarageCond PoolQC Fence MiscFeature\".split()\n    df[none_fill_cols] = df[none_fill_cols].fillna('NONE')\n    \n    # Deal with Electrical, MasVnrType and GarageYrBlt\n    df['Electrical'] = df['Electrical'].fillna(\"SBrkr\") # This is the average\n    df['MasVnrType'] = df['MasVnrType'].fillna(df.MasVnrType.mode()) # The mode makes more sense based on feature description\n    df['GarageYrBlt'] = df['GarageYrBlt'].fillna(0) # This house instance has no garage\n    \n    # If the testing data has any surprises, we can apply a generic strategy\n    num_cols = df.select_dtypes(include=np.number).columns\n    cat_cols = df.select_dtypes(exclude=np.number).columns\n    for col in num_cols:\n        df[col] = df[col].fillna(df[col].median())\n    for col in cat_cols:\n        df[col] = df[col].fillna('NONE')\n    \n    return df\n    \n# Apply this to a copy of the DataFrame and check\ntmp = X.copy()\ntmp = handle_missing(tmp)\ntmp.isnull().sum()[tmp.isnull().sum() > 0]","44772a9d":"# Apply this to the actual data\nX = handle_missing(X)\nX.isnull().sum().max()","a28e61ad":"# Some interesting features we can create\ndef new_features(X):\n    X['HasWoodDeck'] = (X['WoodDeckSF'] == 0) * 1\n\n    X['HasOpenPorch'] = (X['OpenPorchSF'] == 0) * 1\n    X['HasEnclosedPorch'] = (X['EnclosedPorch'] == 0) * 1\n    X['Has3SsnPorch'] = (X['3SsnPorch'] == 0) * 1\n    X['HasScreenPorch'] = (X['ScreenPorch'] == 0) * 1\n\n    X['Total_Home_Quality'] = X['OverallQual'] + X['OverallCond']\n    X['TotalSF'] = X['TotalBsmtSF'] + X['1stFlrSF'] + X['2ndFlrSF']\n    X['TotalSquareFootage'] = (X['BsmtFinSF1'] + X['BsmtFinSF2'] + X['1stFlrSF'] + X['2ndFlrSF'])\n\n    X['HasPool'] = X['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n    X['Has2ndFloor'] = X['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n    X['HasGarage'] = X['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n    X['HasBsmt'] = X['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n    X['HasFireplace'] = X['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n    \n    return X\n\nX  = new_features(X)\nlen(X.columns)","4a681471":"# Find the heavily skewed features\nnum_columns = X.select_dtypes(include=np.number).columns\nskewed_features = X[num_columns].apply(lambda x: abs(stats.skew(x))).sort_values(ascending=False)\nhigh_skewed = skewed_features[skewed_features > 0.5]\nhigh_skewed ","cbd838d2":"X.shape, y.shape","496037cc":"# Label Encode a copy of the data\nfrom sklearn import preprocessing\ncat_columns = X.select_dtypes(exclude=np.number).columns\nfi_data = X.copy()\nfor feat in cat_columns:\n    fi_data[feat] = preprocessing.LabelEncoder().fit_transform(fi_data[feat])\n# Use a RandomForest model to look at the Feature Importances \nfrom sklearn.ensemble import RandomForestRegressor\nforest_fi = RandomForestRegressor(n_estimators=100,\n                                 min_samples_leaf=5,\n                                 min_samples_split=5,\n                                 n_jobs=-1).fit(fi_data, y)","75d4dae1":"# Extract and visualize the importances\nimportances = forest_fi.feature_importances_\nfeat_imps = pd.Series(importances, index=fi_data.columns)\nfeat_imps","423ca1b0":"# Check the top 10 most relevant features to the target variable\nfeat_imps = feat_imps.sort_values(ascending=False)\nfeat_imps[:10]","d39243fe":"# Visualize the importances\nplt.figure(figsize=(11,9))\nplt.title(\"Feature Importances after Engineering\")\nfeat_imps[:15].plot.bar()","f1c20978":"from sklearn.compose import ColumnTransformer\nfrom sklearn import preprocessing\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest_ids = test_data.Id # TEST IDS STORED HERE!\n\n# Scale and seperate Target Variable\ntarget_var = 'SalePrice'\ntrain_data[target_var] = np.log1p(train_data[target_var]) # TARGET SCALED HERE!\nX = train_data.drop(['Id', target_var], axis=1)\ny = train_data[target_var]\nX_test = test_data.drop('Id', axis=1)\n\n# Data Cleaning\nX = handle_missing(X)\nX_test = handle_missing(test_data)\n\n# Feature Engineering\nX = new_features(X)\nX_test = new_features(X_test)\n\n# Pipelines\nnum_columns = X.select_dtypes(include=np.number).columns\ncat_columns = X.select_dtypes(exclude=np.number).columns\npipeline = ColumnTransformer([\n    (\"one_hot_encoder\", preprocessing.OneHotEncoder(sparse=False, handle_unknown='ignore'), cat_columns),\n    (\"standard_scaler\", preprocessing.StandardScaler(), num_columns)\n])\nX = pipeline.fit_transform(X)\nX_test = pipeline.transform(X_test) # Making sure to not fit to the testing set","dc5918b8":"X.shape, y.shape, X_test.shape","5b3e224d":"# Import dependencies and models\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor, StackingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\n# Instantiate a dict (+function) for storing model scores\nscores = {}\ndef get_cv_score(estimator):\n    return np.sqrt(-1 * cross_val_score(estimator, X=X, y=y, cv=5, scoring='neg_mean_squared_error', n_jobs=-1))","b8b52006":"# Start with a simple Linear Model\nlin_reg = LinearRegression()\nscores['linear_regression'] = get_cv_score(lin_reg)\nscores['linear_regression']","32c202ee":"%%time\nimport time\n\n# Change the boolean to Cross Validate the Base Models\ncheck_cv = False\n\nif check_cv:\n    start = time.time()\n    # SVM with Linear Kernel\n    linear_svr = SVR(kernel='linear', \n                     C=10, \n                     epsilon=0.01, \n                     gamma=0.0005)\n    scores['linear_svr'] = get_cv_score(linear_svr)\n    print(f\"Finished Linear SVR: {time.time()-start:0.2f}sec\")\n    start = time.time()\n    # SVM with RBF kernel\n    svr = SVR(kernel='rbf', \n              C=10, \n              epsilon=0.01, \n              gamma=0.0005)\n    scores['svr'] = get_cv_score(svr)\n    print(f\"Finished Kernel SVR: {time.time()-start:0.2f}sec\")\n    start = time.time()\n    # Random Forest\n    rfr = RandomForestRegressor(n_estimators=250, \n                                max_depth=15, \n                                min_samples_leaf=5, \n                                min_samples_split=5, \n                                n_jobs=-1,\n                               random_state=42)\n    scores['rfr'] = get_cv_score(rfr)\n    print(f\"Finished Random Forest: {time.time()-start:0.2f}sec\")\n    start = time.time()\n    # Gradient Boosting\n    gbr = GradientBoostingRegressor(n_estimators=350, \n                                    learning_rate=0.1, \n                                    loss='huber',\n                                   random_state=42)\n    scores['gbr'] = get_cv_score(gbr)\n    print(f\"Finished Gradient Boosting: {time.time()-start:0.2f}sec\")\n    start = time.time()\n    # LGBM\n    lgbr = LGBMRegressor(objective='regression',\n                        n_estimators=300,\n                        learning_rate=0.1,\n                        random_state=42)\n    scores['lgbr'] = get_cv_score(lgbr)\n    print(f\"Finished LGBM: {time.time()-start:0.2f}sec\")\n    start = time.time()\n    # AdaBoost with DT Base Estimator\n    ada = AdaBoostRegressor(n_estimators=150, \n                            random_state=42)\n    scores['ada'] = get_cv_score(ada)\n    print(f\"Finished AdaBoost: {time.time()-start:0.2f}sec\")\n    start = time.time()\n    # Ending with XGBoost\n    xgb = XGBRegressor(n_estimators=300,\n                      max_depth=5, \n                      learning_rate=0.1,\n                      random_state=42)\n    scores['xgb'] = get_cv_score(xgb)\n    print(f\"Finished XGBoost: {time.time()-start:0.2f}sec\")\n\n    # Evaluate models before any serious Hyperparameter tuning\n    print(f\"AdaBoost: {scores['ada'].mean()}\")\n    print(f\"LGBM: {scores['lgbr'].mean()}\")\n    print(f\"GradientBoosting: {scores['gbr'].mean()}\")\n    print(f\"RandomForest: {scores['rfr'].mean()}\")\n    print(f\"Linear SVR: {scores['linear_svr'].mean()}\")\n    print(f\"Kernel SVR: {scores['svr'].mean()}\")\n    print(f\"XGBoost: {scores['xgb'].mean()}\")","0f6e8040":"# Light Gradient Boosting Regressor\nlightgbm = LGBMRegressor(objective='regression', \n                       num_leaves=6,\n                       learning_rate=0.01, \n                       n_estimators=7000,\n                       max_bin=200, \n                       bagging_fraction=0.8,\n                       bagging_freq=4, \n                       bagging_seed=8,\n                       feature_fraction=0.2,\n                       feature_fraction_seed=8,\n                       min_sum_hessian_in_leaf = 11,\n                       verbose=-1,\n                       random_state=42)\n\n# XGBoost Regressor\nxgboost = XGBRegressor(learning_rate=0.01,\n                       n_estimators=6000,\n                       max_depth=4,\n                       min_child_weight=0,\n                       gamma=0.6,\n                       subsample=0.7,\n                       colsample_bytree=0.7,\n                       nthread=-1,\n                       scale_pos_weight=1,\n                       seed=27,\n                       reg_alpha=0.00006,\n                       random_state=42)\n\n# Support Vector Regressor\nsvr = SVR(C= 20, epsilon= 0.008, gamma=0.0003)\n\n# Gradient Boosting Regressor\ngbr = GradientBoostingRegressor(n_estimators=6000,\n                                learning_rate=0.01,\n                                max_depth=4,\n                                max_features='sqrt',\n                                min_samples_leaf=15,\n                                min_samples_split=10,\n                                loss='huber',\n                                random_state=42)  \n\n# Random Forest Regressor\nrf = RandomForestRegressor(n_estimators=2200,\n                          max_depth=15,\n                          min_samples_split=5,\n                          min_samples_leaf=5,\n                          max_features=None,\n                          oob_score=True,\n                          random_state=42)\n\n# Stack up all the models above, optimized using xgboost\nstack_gen = StackingRegressor(estimators=[\n                                ('xgboost',xgboost), \n                                ('lightgbm',lightgbm), \n                                ('svr',svr),  \n                                ('gbr',gbr), \n                                ('rf',rf)],\n                                final_estimator=xgboost,\n                                n_jobs=-1)","743bd9d9":"%%time\n# Stacking Regressor\nstack_gen.fit(X, y)","f5013e1c":"%%time\n# Random Forest\nrf.fit(X, y)","59e6ad8e":"%%time\n# XGBoost\nxgboost.fit(X, y)","ac0cf907":"%%time\n# Gradient Boosting\ngbr.fit(X, y)","58cef137":"%%time\n# SVR\nsvr.fit(X, y)","4c5420df":"%%time\n# LGBM\nlightgbm.fit(X, y)","5804c33f":"0.1 + 0.2 + 0.2 + 0.1 + 0.05 + 0.35","18083084":"# Blend the predictions\ndef blended_predictions(X):\n    return ((0.1 * svr.predict(X)) + \\\n            (0.2 * gbr.predict(X)) + \\\n            (0.2 * xgboost.predict(X)) + \\\n            (0.1 * lightgbm.predict(X)) + \\\n            (0.05 * rf.predict(X)) + \\\n            (0.35 * stack_gen.predict(X)))\n\n# Get the submission file ready, REMEMBERING to invert the log transform we applied earlier\nsubmission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nsubmission.iloc[:,1] = np.floor(np.expm1(blended_predictions(X_test)))\n\nsubmission.to_csv(\"submission_regression.csv\", index=False)","8d691786":"print(\"FIN\")","cc556bde":"We start with a Linear Regression model that performs *much much worse* than the other strong learners.","b1b343c5":"# Data Cleaning: Dealing with Missing Values","379c02aa":"Even though some features like `YrSold` are discrete enough to become Categorical Variables, we can leave them this way since their hierarchy being preserved makes sense.\n\nExploring the Linear Correlation between Features is helpful since it can \n* Highlight which features *look to be the* most useful for predicting the target variable \n* Shed some light on which features are highly correlated together in which case they could be *mutually redundant* (this helps in Feature Selection)","7639dab6":"The following cells explore the distribution of the Target Variable and it can be seen that it is **left-skewed** and has Outliers (as seen from the Percentiles and the critical values). Some ways to deal with such distributions are to:\n* Perform a logarithmic transformation on the values (Normalization and Standardization do not alter the skewness, just the scale)\n* Explore the Percentiles to come up with some upper\/lower thresholds beyond which the values are set to something more common (Boxplots also help here)\n\nWe use a Log Transform here: it is simple and the resulting distribution is visually very similar to a Gaussian.","a4d93211":"Following cell inspired from Notebook (Hyperparameter values noted):\nhttps:\/\/www.kaggle.com\/lavanyashukla01\/how-i-made-top-0-3-on-a-kaggle-competition#Train-a-model","ee2c3f6c":"The cell below takes ~5mins to finish evaluating the models","35d00091":"The only two necessary steps for preparing Data for Modeling are:\n1. Dealing with Missing values (`nan`)\n2. Finding some numerical representation for Categorical\/Non-numeric Variables\n\nIn Data Cleaning, the focus is on the first step.","0095166c":"We can set some threshold above which the filtered features will undergo a Logarithmic Transformation but a couple of the features justify their high skewness; e.g. only a few luxury homes have pools so there would naturally be outliers and a pulled distribution.","c23e0ff5":"We find that the two features `OverallQual` and `GrLivArea` are the most *linearly* correlated with our target so we can choose to explore them a bit further.","a68fdeb9":"With all the models trained on the data, we can get their predictions and *blend* them (the final predictions will be a linear combination\/weighted sum of the individual models' predictions so that the stronger models aren't totally neglected). The weights should obviously add up to 1.","8ce89af7":"Now that we have gone through the whole process step-by-step, it would help to functionalize everything (create a Pipeline) for efficiency and code-reproducibility in case we want to run more experiments later.\n\nThe following cell applies every transformation\/piece of engineering we did thus far.","d1927b06":"The Cardinality of a Feature refers to the number of Unique Values in that set. We should be on the lookout for:\n* High Cardinality Categorical Variables: for example, if Zipcodes were not stored as numbers, it could cause a Transformer like `OneHotEncoder` to explode\n* Low Cardinality Numeric Variables: for instance, if a feature had values `[1,2,3,4,5]`, we could create new useful features out of it","7ff63eed":"# EDA","222ce5e7":"# Feature Engineering and Feature Selection\n\nSome aspects of Feature Engineering include:\n* Create Aggregated Features (can result in more robust models, as will be seen later)\n* Dealing with heavily Skewed features (either dropping them, transforming them or doing nothing)\n* Scaling\/Normalizing numeric variables (really only required for **non-Tree-based** algorithms like SVMs, Linear Regression, MLP etc.)\n* Encodings for Categorical Variables (the only thing that's necessary to carry out here)","4090c290":"Other than collecting the names of features based on what kind of data they store, we can also find a number of features with similar names. Specifically there are four keywords that are repeated a few times so they may require similar Engineering or special treatment.","50270cff":"We can clearly see below that there is a good mix of Numerical and Categorical Features which could pose difficulties in exploring the data comprehensively.","08a682db":"We don't need the `Id` column for the Training Set so we drop it (it'd act as an unnecessary feature otherwise).","f417002c":"As a final jab at EDA, we shall explore Feature Selection. There are many classes made specifically for this making use of tools like Chi-square tests and whatnot, but a simple and effective approach is to simply **fit a `RandomForest` on the data**.\n\nThe forest is made of many Decision Trees so by iterating through each Tree and seeing which splits contribute to better drops in impurity\/entropy, the Ensemble can get an idea of which features are *more important* for predicting the target. Since the Ensemble is based on Trees, we only have to \n* Make sure there are no missing values\n* Numerically Encode the Categorical Variables (Label vs One Hot doesn't matter for tree-based models since the whole space is explored value-by-value)","e622c57a":"```\nAdaBoost: 34566.742546702626\nLGBM: 29158.163160149958\nGradientBoosting: 26674.092765014524\nRandomForest: 30125.682357409016\nKernel SVR: 43880.25669866572\nLinear SVR: 81085.44385548346\nXGBoost: 26470.758028378285\n```\nWhat we can observe:\n* The SVMs performed the worst (though the RBF Kernel performed much better than the Linear Kernel)\n* AdaBoost got 5th place\n* RandomForests got 4th place\n* LGBM got 3rd\n* Gradient Boosting got 2nd\n* XGBoost performed the best, unsurprisingly, although the training time was nearly 19 times higher","c08fb668":"The variable `PoolQC` has enough values that we could be lazy and drop the entire column, but it may be of benefit to us if we fill the missing values with `0` since the values may just *not exist*. \n\nWe can apply similar thinking to the features related to the Garage and Basements of these houses.","f3b5be34":"# Full Pipeline and Modeling","8caaca9b":"Incredible. Three of our aggregated features are among the best that can be used for predicting the Target Variable. \n\nThe `OverallQual` feature still reigns the highest and by a significant margin at that. Other than that we can also see the `YearBuilt` feature among the top predictors which implies that the later a house was built, the price tended to increase a lot more.\n\nAnother interesting note is that there are no Basement related features in this top-15 list, but there are a number of *Garage* related features. This could imply that in practice, Garages are more valuable than Basements which makes sense.","78a8f96c":"We make use of a `StackingRegressor` here which takes a collection of models and aggregates their predictions by having a *meta-learner* treat it as independent variables and the true values as the targets. This is another form of Ensembling.","0b558098":"Now to finally begin modeling. \n\nIn keeping up with proper Cross Validation schemes, we define a function that returns the RMSE of a model when validated over 5 folds of the data. This is better than using `train_test_split` since that validates the model on only one fold and is vulnerable to randomness influencing the model's performance.","2462bee4":"## Fit the Models","0d655e7e":"Our Pipelines will be easier to construct if we can gather the names of the Numerical and Categorical\/Object Features."}}