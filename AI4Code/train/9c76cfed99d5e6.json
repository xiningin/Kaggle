{"cell_type":{"aefda017":"code","bcd306bc":"code","592ca164":"code","43b6c1cc":"code","28b63698":"code","eaa2f514":"code","269f3b30":"code","082686c6":"code","2488bcaa":"code","a6f1c6c9":"code","6d024c72":"code","a818eb36":"code","9713818a":"code","6a5df9ad":"code","fe8026b7":"code","13b3e456":"code","3cdd7545":"code","d2d6ee9d":"code","7653f2f4":"code","1ff46b51":"code","0476d5ad":"code","76144deb":"code","8758b175":"code","4170bb31":"code","d608666b":"code","30d01c1a":"code","680507ef":"code","2b32b17e":"code","c23975a6":"code","ffc5e5aa":"code","38b80189":"code","179317bf":"code","84c7486d":"code","45d70b40":"code","1cac3873":"code","8495f1f6":"code","76628e2a":"code","5abfd7bf":"code","ea0b3885":"code","6dc369da":"code","26197a08":"code","9f6df438":"code","9fd9019d":"code","b46bb578":"code","b15c3b49":"code","3e763f3d":"code","9f0a0fcc":"code","7ce954d6":"code","e4e3b1ef":"code","bd93fe8c":"code","a8f1162e":"code","cf5ae6a6":"code","60717cd1":"code","339d9515":"code","dbfcb2e5":"code","478285ea":"code","4f5f0efc":"code","d32b5c42":"code","e6f9b225":"code","589eddc2":"code","e5db0f2b":"code","281ef9c0":"code","5e276b83":"code","efaed42d":"code","85dfb871":"code","e1d1d6aa":"code","3cff5491":"code","3b6f8abb":"code","dfc19173":"code","b27145eb":"code","ed71e7d5":"code","822c5b72":"code","c7a7ca84":"code","a8c9d1da":"code","bf076490":"code","930ca690":"code","3daf47b9":"code","7c50e2d6":"code","d24daf5d":"code","263d26db":"code","dc81b6f8":"markdown","3d5a6816":"markdown","c0994595":"markdown","be78973b":"markdown","8d5bbded":"markdown","81dec6f3":"markdown","b26f3c82":"markdown","4ed63a5a":"markdown","4bdbf25d":"markdown","d31060f6":"markdown","77694e8b":"markdown","3dc5bcd4":"markdown","7187c7f7":"markdown","ad0fd7eb":"markdown","4c83f81c":"markdown","0619a8e9":"markdown","cc0a9553":"markdown","67500e18":"markdown","24ca7aca":"markdown","e86003c7":"markdown","1810a096":"markdown","67aae0fc":"markdown","de8a6166":"markdown","7b204879":"markdown","c4f21269":"markdown","8e160406":"markdown","83b7126f":"markdown","d4e660c1":"markdown","13859ff5":"markdown","af5e5081":"markdown"},"source":{"aefda017":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport lightgbm as lgb\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, RandomizedSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier, BaggingClassifier, AdaBoostClassifier, VotingClassifier  \nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import normalize\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier, SGDClassifier, Perceptron\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score\n\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom tensorflow.keras.models import load_model\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","bcd306bc":"df = pd.read_csv(\"..\/input\/cardiovascular-disease-dataset\/cardio_train.csv\", sep=';').drop('id', axis=1)\ndf.head()","592ca164":"df.isnull().sum()","43b6c1cc":"df.duplicated().sum()","28b63698":"# Dropping duplicate values\ndf.drop_duplicates(inplace=True)\nprint(\"number of duplicated data after dropping :\",df.duplicated().sum())","eaa2f514":"df.describe()","269f3b30":"std_list = [\"age\", \"height\", \"weight\", \"ap_hi\", \"ap_lo\"] \n\ndef standartization(x):\n    x_std = x.copy(deep=True)\n    for column in std_list:\n        x_std[column] = (x_std[column] - x_std[column].mean()) \/ x_std[column].std() \n    return x_std\n\ndf_std = standartization(df)\ndf_std.head()","082686c6":"# Melting data for multi box plot\ndf_melt = pd.melt(frame=df_std, id_vars='cardio', value_vars=std_list, var_name='features', value_name='value', col_level=None)\ndf_melt","2488bcaa":"# Box plot\nplt.figure(figsize=(12, 10))\nsns.boxplot(x='features', y='value', hue='cardio', data=df_melt)\nplt.xticks(rotation=90)","a6f1c6c9":"# Diciding upper and lower bound \nap_list = ['ap_hi', 'ap_lo']\ndf_ap = pd.DataFrame(index=['lower_bound', 'upper_bound'])\n\nfor each in ap_list:\n    Q1 = df[each].quantile(0.25)\n    Q3 = df[each].quantile(0.75)\n    IQR = Q3 - Q1\n    \n    lowr_bound = Q1 - 1.5*IQR\n    upper_bound = Q3 + 1.5*IQR\n    df_ap[each] = [lowr_bound, upper_bound]\n    \ndf_ap.head()","6d024c72":"# Outlier rows\nap_hi_filter = (df['ap_hi'] > df_ap['ap_hi'][1])\nap_lo_filter = (df['ap_lo'] > df_ap['ap_lo'][1])\noutlier_filter = (ap_hi_filter | ap_lo_filter)\ndf_outlier = df[outlier_filter]\n\n# graph of outlier\nsns.countplot(x='cardio', data=df_outlier, linewidth=2, edgecolor=sns.color_palette(\"dark\", 1))\n","a818eb36":"# taking less than 250 in ap_hi and less than 200 in ap_lo\noutlier_filter = ((df[\"ap_hi\"]>250) | (df[\"ap_lo\"]>200) )\ndf = df[~outlier_filter]\ndf.shape","9713818a":"df['age'] = (df['age']\/365).round().astype('int')\ndf.head()","6a5df9ad":"def weight_func(x):\n    if x <= 50:\n         return 1\n        \n    if x > 50  and x <= 100:\n         return 2\n        \n    if x >100 and x<= 150:\n         return 3\n        \n    else:\n         return 4\n","fe8026b7":"df['weight_class'] = df['weight'].apply(lambda x: weight_func(x))","13b3e456":"def age_func(x):\n    if x <= 40:\n         return 1\n        \n    if x > 40  and x <= 50:\n         return 2\n        \n    if x > 50 and x <= 60:\n         return 3\n        \n    else:\n         return 4\n","3cdd7545":"df['age_class'] = df['age'].apply(lambda x: age_func(x))","d2d6ee9d":"df['bmi'] = df['weight'] \/ (df['height']\/100)**2\ndf.head()","7653f2f4":"df['gender'] = df['gender'].apply(lambda x: 0 if x==1 else 1)","1ff46b51":"df.head()","0476d5ad":"corr = df.corr()\nf, ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(corr, annot=True, fmt='.3f', linewidths=0.5, ax=ax)","76144deb":"df = df.sample(frac=1).reset_index(drop=True)","8758b175":"X = df.drop('cardio', axis=1)\ny = df.cardio\nprint(\"Shape of X is :\", X.shape, \"Shape of y is :\", y.shape)","4170bb31":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","d608666b":"algs = {\n    \"logistic_regression\": LogisticRegression(),\n    \"decision_tree\": DecisionTreeClassifier(),\n    \"random_forest\": RandomForestClassifier(),\n    \"support_vector machine\": SVC(),\n    \"linear_svc\": LinearSVC(),\n    \"perceptron\": Perceptron(),\n    \"gaussian_naive bayes\": GaussianNB(),\n    \"k nearest_neighbors\": KNeighborsClassifier(),\n    \"sgdclassifier\": SGDClassifier(),\n    \"xgboost\": XGBClassifier(),\n    \"lgbm_classifier\": LGBMClassifier(),\n    \"gradient_boosting\": GradientBoostingClassifier(),\n    \"ridge_classifier\": RidgeClassifier(),\n    \"bagging_classifier\": BaggingClassifier(),\n    \"extra_tree_classifier\": ExtraTreesClassifier(),\n    \"adaboost_classifier\": AdaBoostClassifier()\n}","30d01c1a":"result = pd.DataFrame(columns=['train_accuracy', 'test_accuracy', 'f1_score'])\n\nfor key, value in algs.items():\n    value.fit(x_train, y_train)\n    train_acc = round(value.score(x_train, y_train)*100, 2)  \n    predicted = value.predict(x_test)\n    result.loc[key] = [train_acc, 100* np.round(accuracy_score(y_test, predicted), decimals=4),\n                      round(f1_score(y_test, predicted), 2)]\n    \n# Printing result dataframe  \nresult = result.sort_values(by=['test_accuracy', 'train_accuracy'], ascending=False)\nresult","680507ef":"rfc = RandomForestClassifier() ","2b32b17e":"n_estimators = [100, 300, 500, 800, 1200]\nmax_depth = [5, 8, 15, 25, 30]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10] \n\nhyper_params = dict(n_estimators = n_estimators, \n                    max_depth = max_depth,  \n                    min_samples_split = min_samples_split, \n                    min_samples_leaf = min_samples_leaf)","c23975a6":"grid_s_cv = GridSearchCV(rfc, hyper_params, cv=3)\ngrid_s_cv.fit(x_train, y_train)","ffc5e5aa":"grid_s_cv.best_params_","38b80189":"# training with hyperparameter\nrfc_hyp = RandomForestClassifier() \nrfc_hyp.fit(x_train, y_train)","179317bf":"rfc_predicted = rfc_hyp.predict(x_test)","84c7486d":"print(classification_report(y_test, rfc_predicted))","45d70b40":"cm = confusion_matrix(y_test, rfc_predicted)\nplt.figure(figsize=(7,7))\nsns.heatmap(cm, fmt='.0f', annot=True, linewidths=0.2, linecolor='purple')\nplt.xlabel('predicted value')\nplt.ylabel('Truth value')\nplt.show()","1cac3873":"xgb = XGBClassifier()","8495f1f6":"hyperparameter_grid = {\n    'n_estimators': [100, 500, 900, 1100, 1500],\n    'max_depth':[2, 3, 5, 10, 15],\n    'learning_rate':[0.05,0.1,0.15,0.20],\n    'min_child_weight':[1,2,3,4],\n    'booster':['gbtree','gblinear'],\n    'base_score':[0.25,0.5,0.75,1]\n    }","76628e2a":"random_cv = RandomizedSearchCV(estimator=xgb,\n            param_distributions=hyperparameter_grid,\n            cv=3, \n            n_iter=50,\n            scoring = 'neg_mean_absolute_error',\n            n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)\n","5abfd7bf":"random_cv.fit(x_train, y_train)","ea0b3885":"random_cv.best_estimator_","6dc369da":"# Training\nxgb_hyp = XGBClassifier()\nxgb_hyp.fit(x_train, y_train)","26197a08":"# predicting \nxgb_predicted = xgb_hyp.predict(x_test)","9f6df438":"# Classification Report\nprint(classification_report(y_test, xgb_predicted))","9fd9019d":"# Confusion Matrix \ncm = confusion_matrix(y_test, xgb_predicted)\nplt.figure(figsize=(7,7))\nsns.heatmap(cm, fmt='.0f', annot=True, linewidths=0.2, linecolor='purple')\nplt.xlabel('predicted value')\nplt.ylabel('Truth value')\nplt.show()","b46bb578":"xgb_cvs = XGBClassifier()\ncvs = cross_val_score(xgb_cvs, X, y, cv=5)\ncvs","b15c3b49":"cvs.mean()","3e763f3d":"lgbmc = LGBMClassifier()","9f0a0fcc":"def learning_rate_010_decay_power_099(current_iter):\n    base_learning_rate = 0.1\n    lr = base_learning_rate  * np.power(.99, current_iter)\n    return lr if lr > 1e-3 else 1e-3\n\ndef learning_rate_010_decay_power_0995(current_iter):\n    base_learning_rate = 0.1\n    lr = base_learning_rate  * np.power(.995, current_iter)\n    return lr if lr > 1e-3 else 1e-3\n\ndef learning_rate_005_decay_power_099(current_iter):\n    base_learning_rate = 0.05\n    lr = base_learning_rate  * np.power(.99, current_iter)\n    return lr if lr > 1e-3 else 1e-3\n","7ce954d6":"fit_params={\"early_stopping_rounds\":30, \n            \"eval_metric\" : 'auc', \n            \"eval_set\" : [(x_test, y_test)],\n            'eval_names': ['valid'],\n            'callbacks': [lgb.reset_parameter(learning_rate=learning_rate_010_decay_power_099)],\n            'verbose': 100,\n            'categorical_feature': 'auto'}\n","e4e3b1ef":"param_test ={'num_leaves': sp_randint(6, 50), \n             'min_child_samples': sp_randint(100, 500), \n             'min_child_weight': [1e-5, 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4],\n             'subsample': sp_uniform(loc=0.2, scale=0.8), \n             'colsample_bytree': sp_uniform(loc=0.4, scale=0.6),\n             'reg_alpha': [0, 1e-1, 1, 2, 5, 7, 10, 50, 100],\n             'reg_lambda': [0, 1e-1, 1, 5, 10, 20, 50, 100]}\n","bd93fe8c":"lgbmc = LGBMClassifier(max_depth=-1, random_state=314, silent=True, metric='None', n_jobs=4, n_estimators=5000)\ngs = RandomizedSearchCV(\n                        estimator=lgbmc, \n                        param_distributions=param_test, \n                        n_iter=100,\n                        scoring='roc_auc',\n                        cv=3,\n                        refit=True,\n                        random_state=314,\n                        verbose=True)\n","a8f1162e":"opt_parameters = {'colsample_bytree': 0.9234, 'min_child_samples': 399, 'min_child_weight': 0.1, 'num_leaves': 13, 'reg_alpha': 2, 'reg_lambda': 5, 'subsample': 0.855}","cf5ae6a6":"clf_sw = LGBMClassifier(**lgbmc.get_params())\n#set optimal parameters\nclf_sw.set_params(**opt_parameters)","60717cd1":"gs_sample_weight = GridSearchCV(estimator=clf_sw, \n                                param_grid={'scale_pos_weight':[1,2,6,12]},\n                                scoring='roc_auc',\n                                cv=5,\n                                refit=True,\n                                verbose=True)\n","339d9515":"gs_sample_weight.fit(x_train, y_train, **fit_params)\nprint('Best score reached: {} with params: {} '.format(gs_sample_weight.best_score_, gs_sample_weight.best_params_))\n","dbfcb2e5":"print(\"Valid+-Std     Train  :   Parameters\")\nfor i in np.argsort(gs_sample_weight.cv_results_['mean_test_score'])[-5:]:\n    print('{1:.3f}+-{3:.3f}     {2:.3f}   :  {0}'.format(gs_sample_weight.cv_results_['params'][i], \n                                                         gs_sample_weight.cv_results_['mean_test_score'][i], \n                                                         gs_sample_weight.cv_results_['mean_train_score'][i],\n                                                         gs_sample_weight.cv_results_['std_test_score'][i]))\n    ","478285ea":"lgbmc_hyp = LGBMClassifier(**lgbmc.get_params())\nlgbmc_hyp.set_params(**opt_parameters)","4f5f0efc":"lgbmc_hyp.fit(x_train, y_train, **fit_params)","d32b5c42":"# Predicting with test data\nlgbmc_predicted = lgbmc_hyp.predict(x_test)","e6f9b225":"# classification report\nprint(classification_report(y_test, lgbmc_predicted))","589eddc2":"# Confusion Matrix \ncm = confusion_matrix(y_test, lgbmc_predicted)\nplt.figure(figsize=(7,7))\nsns.heatmap(cm, fmt='.0f', annot=True, linewidths=0.2, linecolor='purple')\nplt.xlabel('predicted value')\nplt.ylabel('Truth value')\nplt.show()","e5db0f2b":"vot_cls = VotingClassifier(estimators=[('lr', rfc_hyp), ('rf', xgb_hyp), ('ab', lgbmc_hyp)], voting='hard')\n\nfor clf, label in zip([rfc_hyp, xgb_hyp, lgbmc_hyp, vot_cls],\n                      ['Random forest classifier', 'XGBClassifier', \"LGBM classifier\", \"Ensemble\"]):\n    scores = cross_val_score(clf, x_train, y_train, cv=10, scoring='accuracy')\n    print(\"Accuracy: %0.2f (+\/- %0.2f) [%s]\"% (scores.mean(), scores.std(), label))\n    ","281ef9c0":"# train score of voting classifier\nvot_cls.fit(x_train, y_train)\ntrain_acc = round(vot_cls.score(x_train, y_train)*100, 2) \ntrain_acc","5e276b83":"# test score of voting classifier\ntest_acc = round(vot_cls.score(x_test, y_test)*100, 2)","efaed42d":"test_acc","85dfb871":"# Neural Network\nModel = Sequential()\nModel.add(Dense(7, input_dim=14, activation='relu'))\nModel.add(Dense(1, activation='sigmoid'))","e1d1d6aa":"# Deep Neural Network\nmodel = Sequential()\nmodel.add(Dense(14, input_dim=14, activation='relu'))\nmodel.add(Dense(50, activation='relu', kernel_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1), bias_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(50, activation='relu', kernel_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1), bias_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(50, activation='relu', kernel_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1), bias_initializer=tf.random_uniform_initializer(minval=-0.1, maxval=0.1)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n","3cff5491":"# Model Summary\nmodel.summary()","3b6f8abb":"# Model Compile\noptimizer = RMSprop(learning_rate=0.002)\nmodel.compile(loss='binary_crossentropy', \n              metrics=['accuracy'], \n              optimizer=optimizer)","dfc19173":"# ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau( \n    monitor='val_loss',    # Quantity to be monitored.\n    factor=0.1,       # Factor by which the learning rate will be reduced. new_lr = lr * factor\n    patience=50,        # The number of epochs with no improvement after which learning rate will be reduced.\n    verbose=1,         # 0: quiet - 1: update messages.\n    mode=\"auto\",       # {auto, min, max}. In min mode, lr will be reduced when the quantity monitored has stopped decreasing;                    \n    min_delta=0.0001,  # threshold for measuring the new optimum, to only focus on significant changes.\n    cooldown=0,        # number of epochs to wait before resuming normal operation after learning rate (lr) has been reduced.\n    min_lr=0.00001     # lower bound on the learning rate.\n    )\n\n# EarlyStopping\nearly_stopping = EarlyStopping(monitor='val_loss', \n                   mode='min', \n                   verbose=1, \n                   patience=400, \n                   restore_best_weights=True)","b27145eb":"# Model Training\nhistory = model.fit(x_train, y_train.values,\n                    batch_size=1024, \n                    epochs=1000,\n                    verbose=0,\n                    validation_split=0.15,\n                    callbacks=[learning_rate_reduction, early_stopping],\n                    shuffle=True)","ed71e7d5":"# Model Evaluate\nmodel.evaluate(x_test, y_test.values, verbose=2)","822c5b72":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()\n\n# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')\nplt.show()","c7a7ca84":"losses = pd.DataFrame(history.history)\nlosses[['loss','val_loss']].plot()","a8c9d1da":"losses = pd.DataFrame(history.history)\nlosses[['accuracy','val_accuracy']].plot()","bf076490":"model.save(\"Cardiovascular_Disease.h5\") ","930ca690":"loaded_model = load_model(\"Cardiovascular_Disease.h5\")","3daf47b9":"ann_predicted = loaded_model.predict(x_test)\nann_predicted","7c50e2d6":"print(classification_report(y_test, ann_predicted.round()))","d24daf5d":"cm = confusion_matrix(y_test, ann_predicted.round()) ","263d26db":"plt.figure(figsize=(7,7))\nsns.heatmap(cm, fmt='.0f', annot=True, linewidths=0.2, linecolor='purple')\nplt.xlabel('predicted value')\nplt.ylabel('Truth value')\nplt.show()","dc81b6f8":"### Using Cross_val_score","3d5a6816":"### Confusion Matrix","c0994595":"### Check duplicate values","be78973b":"## Hyperparameter Tuning with XGBoost","8d5bbded":"## Voting Classifier","81dec6f3":"### Classification Report","b26f3c82":"## Using Machine Learning Algorithms","4ed63a5a":"### Data Describe","4bdbf25d":"In ap_hi and ap_lo have some outlier!","d31060f6":"It is clear that in ap_hi and ap_lo have some unusual outlier!","77694e8b":"### Confusion Matrix","3dc5bcd4":"### Model Saving and Loading\u00b6","7187c7f7":"### New column of weight","ad0fd7eb":"### New column of body mass index","4c83f81c":"### Final Model","0619a8e9":"### Day to Year of age column","cc0a9553":"### Outlier Checking and Dropping","67500e18":"### Check missing values","24ca7aca":"### Classification Report","e86003c7":"## Hyperparameter Tuning with Random Forest","1810a096":"### New column of age","67aae0fc":"### Dividing Dataset","de8a6166":"Hyperparameter tuning takes lots of time! for this I don't run with hyperparameter \nIf you want you can run! ","7b204879":"### shuffle dataset","c4f21269":"### Hyperparameter tuning with LGBMClassifier","8e160406":"### Accuracy and Loss of Training","83b7126f":"### Preprocessing gender column","d4e660c1":"### Predicting with test data","13859ff5":"## Using Neural Network","af5e5081":"### Crrelation"}}