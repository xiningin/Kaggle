{"cell_type":{"4d9e6291":"code","d8f8e01a":"code","8a93a5a2":"code","1fc65e9b":"code","7d9fc998":"code","4b6f86a2":"code","17bf4409":"code","3cb6c724":"code","2dadce90":"code","c05901d7":"code","0cc92a9e":"code","215ba8f5":"code","6ee955f4":"code","616a5562":"code","bd65dc94":"code","849cb500":"markdown","96feaa40":"markdown","97976723":"markdown","eb11768f":"markdown","989f881b":"markdown","ddc8fe26":"markdown","47419aa7":"markdown","3b59d783":"markdown","06a54889":"markdown","7800a999":"markdown","977ecfec":"markdown","4ecddf96":"markdown","a8cc7196":"markdown","dcc5319b":"markdown","abf83dcf":"markdown","59b72065":"markdown","d63da97a":"markdown","31ece3f0":"markdown","5eb00bea":"markdown","f16a9bc9":"markdown","3ca6699d":"markdown"},"source":{"4d9e6291":"# Imports needed\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n%matplotlib inline\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d8f8e01a":"df = pd.read_csv('\/kaggle\/input\/knn-data1\/KNN_Project_Data')","8a93a5a2":"df.head()","1fc65e9b":"sns.heatmap(df.isnull(),cmap='vlag',yticklabels=False)","7d9fc998":"sns.heatmap(df.corr(),cmap='vlag',linewidths=3,linecolor='black')","4b6f86a2":"sns.pairplot(data=df,hue='TARGET CLASS')","17bf4409":"scaler = StandardScaler()\nscaler.fit(df.drop('TARGET CLASS',axis=1))\nscaled = scaler.transform(df.drop('TARGET CLASS',axis=1))\nscaleddf = pd.DataFrame(scaled,columns=df.columns[:-1])","3cb6c724":"scaleddf.head()","2dadce90":"X = scaleddf\ny = df['TARGET CLASS']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","c05901d7":"err_rate = []\n\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    err_rate.append(np.mean(pred_i != y_test))","0cc92a9e":"plt.figure(figsize=(20,10))\nplt.plot(range(1,40),err_rate,color='blue',linestyle='dotted',marker='o',markerfacecolor='red',markersize=8)\nplt.title = 'K Values VS Error Rates'\nplt.xlabel = 'K Value'\nplt.ylabel= 'Error Rate'\nplt.show()","215ba8f5":"knn = KNeighborsClassifier(n_neighbors=22)\nknn.fit(X,y)","6ee955f4":"pred = knn.predict(X_test)","616a5562":"print(classification_report(y_test,pred))","bd65dc94":"print(confusion_matrix(y_test,pred))","849cb500":"# Choosing K value","96feaa40":"#### Confusion Matrix\n\n#### [TP] [FN]\n#### [FP] [TN]","97976723":"# Train Test Split","eb11768f":"#### Plotting the figure of K values comparision","989f881b":"#### Checking head","ddc8fe26":"#### Standardize features by removing the mean and scaling to unit variance & creating a dataframe of scaled values","47419aa7":"#### Predicting values","3b59d783":"#### Creating model with best n_neighbors & Fitting the model to our training data","06a54889":"# KNN","7800a999":"#### Classification Report","977ecfec":"#### Heatmap for all correlations","4ecddf96":"#### X is the scaled dataframe, y is our Target Class, test size is 30%","a8cc7196":"#### Head of scaled values","dcc5319b":"# Getting Data","abf83dcf":"### Thank You, feel free to add any comment or question.","59b72065":"# EDA","d63da97a":"# Evaluations & Results","31ece3f0":"#### Pairplot for all relations with the Target Class","5eb00bea":"#### Comparing error rates to choose which K value has lowest error rate","f16a9bc9":"#### Checking null values","3ca6699d":"# Scaling the data"}}