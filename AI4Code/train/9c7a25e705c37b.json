{"cell_type":{"fd507f60":"code","86a8d412":"code","c28b7f93":"code","555d185d":"code","285dc867":"code","8f855f9e":"code","e37229bd":"code","02f1bdd3":"code","c7c4096c":"code","f6283c8b":"code","f8f19a9f":"code","d2413413":"code","d7b8de4a":"code","c64c1652":"code","61036bdf":"code","9f92fd27":"code","08ac614c":"code","673e14a4":"code","3770c143":"code","6fa36d28":"code","54031357":"code","ae4625f6":"code","e57d3b18":"code","9d331984":"code","a435ec28":"code","c8391674":"code","93df8870":"code","197e3d2a":"code","ec960bb2":"markdown","7b488f17":"markdown","21afe5a6":"markdown","ad7cf450":"markdown","71e5c737":"markdown","7496ae8b":"markdown","43fb3717":"markdown","4f67737c":"markdown","fd5f56fc":"markdown","55ffef3d":"markdown","83ecc221":"markdown","cb747d03":"markdown","d0710c0a":"markdown","8adc7779":"markdown","d6c186f3":"markdown","068e1c3c":"markdown","0870079d":"markdown","b1c3c569":"markdown","81ba1e36":"markdown","593a6c3c":"markdown","21a972eb":"markdown","40268b31":"markdown","36b0bff9":"markdown","a6e7b7dd":"markdown"},"source":{"fd507f60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import randint\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import train_test_split \nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Ridge\nimport math\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\n\n\n\n\n\npd.options.mode.chained_assignment = None  # default='warn'\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86a8d412":"train_data = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/train.csv',dtype={'id': 'int', 'Data As Of': 'str','Start Date': 'str','End Date': 'str','Group': 'str','Year': 'str','Month': 'float','MMWR Week': 'float','Week-Ending Date': 'str','HHS Region': 'str','Race and Hispanic Origin Group': 'str','Age Group': 'str','COVID-19 Deaths': 'float','Total Deaths': 'float','Footnote': 'str'})\ntest_data = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/test.csv',dtype={'id': 'int', 'Data As Of': 'str','Start Date': 'str','End Date': 'str','Group': 'str','Year': 'str','Month': 'float','MMWR Week': 'float','Week-Ending Date': 'str','HHS Region': 'str','Race and Hispanic Origin Group': 'str','Age Group': 'str','Total Deaths': 'float'})\nprint('Import success')","c28b7f93":"train_data.head()","555d185d":"test_data.head()","285dc867":"train_data.shape","8f855f9e":"test_data.shape","e37229bd":"list(train_data.columns)","02f1bdd3":"list(test_data.columns)","c7c4096c":"missingDataTrain = train_data.isna().sum()\nprint(missingDataTrain)","f6283c8b":"missingDataTest = test_data.isna().sum()\nprint(missingDataTest)","f8f19a9f":"# 0-4 years\n# 5-17 years\n# 18-29 years\n# 30-39 years\n# 40-49 years\n# 50-64 years\n# 65-74 years\n# 75-84 years\n# 85 years and over\n\nyears0to4 = 0; x1=0.01\nyears5to17 = 0; x2 = 0.01\nyears18to29 = 0; x3 = 0.01\nyears30to39 = 0; x4 = 0.01\nyears40to49 = 0; x5 = 0.01\nyears50to64 = 0; x6 = 0.01\nyears65to74 = 0; x7 = 0.01\nyears75to84 = 0; x8 = 0.01\nyears85 = 0; x9 = 0.01\n\nfor i in train_data.index:\n    if train_data['Age Group'][i] == '0-4 years':\n        if(train_data['COVID-19 Deaths'][i] >= 0):\n            years0to4 += train_data['COVID-19 Deaths'][i]\n            x1 += 1\n    elif train_data['Age Group'][i] == '5-17 years':\n        if(train_data['COVID-19 Deaths'][i] >= 0):\n            years5to17 += train_data['COVID-19 Deaths'][i]\n            x2 += 1\n    elif train_data['Age Group'][i] == '18-29 years':\n        if(train_data['COVID-19 Deaths'][i] >= 0):\n            years18to29 += train_data['COVID-19 Deaths'][i]\n            x3 += 1\n    elif train_data['Age Group'][i] == '30-39 years':\n        if(train_data['COVID-19 Deaths'][i] >= 0):\n            years30to39 += train_data['COVID-19 Deaths'][i]\n            x4 += 1\n    elif train_data['Age Group'][i] == '40-49 years':\n        if(train_data['COVID-19 Deaths'][i] >= 0):\n            years40to49 += train_data['COVID-19 Deaths'][i]\n            x5 += 1\n    elif train_data['Age Group'][i] == '50-64 years':\n        if(train_data['COVID-19 Deaths'][i] >= 0):\n            years50to64 += train_data['COVID-19 Deaths'][i]\n            x6 += 1\n    elif train_data['Age Group'][i] == '65-74 years':\n        if(train_data['COVID-19 Deaths'][i] >= 0):\n            years65to74 += train_data['COVID-19 Deaths'][i]\n            x7 += 1\n    elif train_data['Age Group'][i] == '75-84 years':\n        if(train_data['COVID-19 Deaths'][i] >= 0):\n            years75to84 += train_data['COVID-19 Deaths'][i]\n            x8 += 1\n    else:\n        if(train_data['COVID-19 Deaths'][i] >= 0):\n            years85 += train_data['COVID-19 Deaths'][i]\n            x9 += 1\n\nyears0to4 = years0to4\/x1;      print(years0to4)\nyears5to17 = years5to17\/x2;    print(years5to17)\nyears18to29 = years0to4\/x3;    print(years0to4)\nyears30to39 = years30to39\/x4;  print(years30to39)\nyears40to49 = years40to49\/x5;  print(years40to49)\nyears50to64 = years50to64\/x6;  print(years50to64)\nyears65to74 = years65to74\/x7;  print(years65to74)\nyears75to84 = years75to84\/x8;  print(years75to84)\nyears85 = years85\/x9;          print(years85)\n\n\n#train_data['COVID-19 Deaths'].fillna(train_data['COVID-19 Deaths'].median(), inplace=True)\n","d2413413":"xxx = 0\nfor i in train_data.index:\n    if train_data['Age Group'][i] == '0-4 years' and not(train_data['COVID-19 Deaths'][i] >= 0):\n        train_data['COVID-19 Deaths'][i] = years0to4\n        xxx += 1\n    if train_data['Age Group'][i] == '5-17 years' and not(train_data['COVID-19 Deaths'][i] >= 0):\n        train_data['COVID-19 Deaths'][i] = years5to17\n        xxx += 1\n    if train_data['Age Group'][i] == '18-29 years' and not(train_data['COVID-19 Deaths'][i] >= 0):\n        train_data['COVID-19 Deaths'][i] = years18to29\n        xxx += 1\n    if train_data['Age Group'][i] == '30-39 years' and not(train_data['COVID-19 Deaths'][i] >= 0):\n        train_data['COVID-19 Deaths'][i] = years30to39\n        xxx += 1\n    if train_data['Age Group'][i] == '40-49 years' and not(train_data['COVID-19 Deaths'][i] >= 0):\n        train_data['COVID-19 Deaths'][i] = years40to49\n        xxx += 1\n    if train_data['Age Group'][i] == '50-64 years' and not(train_data['COVID-19 Deaths'][i] >= 0):\n        train_data['COVID-19 Deaths'][i] = years50to64\n        xxx += 1\n    if train_data['Age Group'][i] == '65-74 years' and not(train_data['COVID-19 Deaths'][i] >= 0):\n        train_data['COVID-19 Deaths'][i] = years65to74\n        xxx += 1\n    if train_data['Age Group'][i] == '75-84 years' and not(train_data['COVID-19 Deaths'][i] >= 0):\n        train_data['COVID-19 Deaths'][i] = years75to84\n        xxx += 1\n    if train_data['Age Group'][i] == '85 years and over'and not(train_data['COVID-19 Deaths'][i] >= 0):\n        train_data['COVID-19 Deaths'][i] = years85\n        xxx += 1\nprint('COVID-19 Deaths has been fixed')\nprint('The number of changed values is: ' + str(xxx))","d7b8de4a":"missingDataTrain = train_data.isna().sum()\nprint(missingDataTrain)","c64c1652":"xxx = 0\nfor i in train_data.index:\n    \n    if not (train_data['MMWR Week'][i]  >= 0):\n        xxx += 1\n        if (train_data['Month'][i]  >= 0): \n            train_data['MMWR Week'][i] = (train_data['Month'][i]*3)\n        else:\n            train_data['MMWR Week'][i] = i%52\n            \nprint('MMWR Week has been fixed')\nprint('The number of changed values is: ' + str(xxx))","61036bdf":"missingDataTrain = train_data.isna().sum()\nprint(missingDataTrain)","9f92fd27":"plt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nplt.title(\"MMWR Week\", fontsize=15)\nsns.kdeplot(data = train_data[\"MMWR Week\"])\nplt.subplot(1,2,2)\nplt.title(\"MMWR Week\", fontsize=15)\nsns.boxplot(data = train_data[\"MMWR Week\"], palette=\"Dark2\")\nplt.show()","08ac614c":"plt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nplt.title(\"Year Bar Graph\", fontsize=15)\nsns.countplot(x = 'Year', data = train_data)\nplt.subplot(1,2,2)\nplt.title(\"Check for Outliers in Death\", fontsize=15)\nsns.scatterplot(x='Year', y='COVID-19 Deaths', data=train_data, hue = 'MMWR Week')\nplt.show()","673e14a4":"smallerTrain = train_data[['MMWR Week','Race and Hispanic Origin Group','Age Group','COVID-19 Deaths','Year']]\nsmallerTest = test_data[['MMWR Week','Race and Hispanic Origin Group','Age Group','Year']]","3770c143":"maxi = smallerTrain[\"COVID-19 Deaths\"].mean() + 3 * train_data[\"COVID-19 Deaths\"].std()\nmini = smallerTrain[\"COVID-19 Deaths\"].mean() - 3 * train_data[\"COVID-19 Deaths\"].std()\ndistributed = smallerTrain[(smallerTrain[\"COVID-19 Deaths\"] > mini) & (smallerTrain[\"COVID-19 Deaths\"] < maxi)]\nplt.title(\"Check for Outliers in Death\", fontsize=15)\nsns.scatterplot(x='Year', y='COVID-19 Deaths', data=distributed, hue = 'MMWR Week')","6fa36d28":"def evalScore(x, y):  \n    \n    r2 = metrics.r2_score(x, y)    \n    mse = metrics.mean_squared_error(x, y)\n    rmse = np.sqrt(metrics.mean_squared_error(x, y))\n    mae = metrics.mean_absolute_error(x, y)\n    return r2, mse, rmse, mae\n    \ndef cvScore(model):\n    return cross_val_score(reg, X, y, cv=10).mean()","54031357":"# I will add dummy passengers to the train variable\nX = pd.get_dummies(distributed)\ny = distributed['COVID-19 Deaths']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\npipeline = Pipeline([\n    ('std_scalar', StandardScaler())\n])\n\n\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","ae4625f6":"reg = LinearRegression()\nreg.fit(X_train,y_train)\n\n\ntest_pred1 = reg.predict(X_test)\ntrain_pred1 = reg.predict(X_train)\n\npd.DataFrame({'True Values': y_test, 'Predicted Values': test_pred1}).plot.scatter(x='True Values', y='Predicted Values')\n\n\nplt.show()\n\nres1 = pd.DataFrame(data=[[\"Least Squares\", * evalScore(y_test, test_pred1) , cvScore(LinearRegression())]],columns=['Model','R Square', 'MSE', 'RMSE', 'MAE', \"Cross Validation\"])\n\nols_score = reg.predict(X_test)\n\nols_score2 = cross_val_score(reg, X, y, cv=10).mean()\n\nres1.describe()","e57d3b18":"r_model = Ridge(alpha=100, solver='cholesky', tol=0.0001, random_state=42)\nr_model.fit(X_train, y_train)\npred = r_model.predict(X_test)\n\ntest_pred2 = r_model.predict(X_test)\ntrain_pred2 = r_model.predict(X_train)\n\n\npd.DataFrame({'True Values': y_test, 'Predicted Values': test_pred2}).plot.scatter(x='True Values', y='Predicted Values')\nplt.show()\n\n#rrScore = r_model.score(X,y)\n\nres2 = pd.DataFrame(data=[[\"Least Squares\", * evalScore(y_test, test_pred2) , cvScore(LinearRegression())]],columns=['Model','R Square', 'MSE', 'RMSE', 'MAE', \"Cross Validation\"])\n\nrrScore = r_model.predict(X_test)\nrrScore2 = cross_val_score(r_model, X, y, cv=10).mean()\n\nres2.describe()","9d331984":"LR_model = Lasso(alpha=0.1, \n              precompute=True, \n              positive=True, \n              selection='random',\n              random_state=42)\nLR_model.fit(X_train, y_train)\n\ntest_pred3 = LR_model.predict(X_test)\ntrain_pred3 = LR_model.predict(X_train)\n\npd.DataFrame({'True Values': y_test, 'Predicted Values': test_pred3}).plot.scatter(x='True Values', y='Predicted Values')\nplt.show()\n\nres3 = pd.DataFrame(data=[[\"Least Squares\", * evalScore(y_test, test_pred1) , cvScore(LinearRegression())]],columns=['Model','R Square', 'MSE', 'RMSE', 'MAE', \"Cross Validation\"])\n\nlrScore = LR_model.predict(X_test)\n\nwlrScore = cross_val_score(LR_model, X, y, cv=10).mean()\n\nres1.describe()","a435ec28":"EN_model = ElasticNet(alpha=0.1, l1_ratio=0.9, selection='random', random_state=42)\nEN_model.fit(X_train, y_train)\n\ntest_pred4 = EN_model.predict(X_test)\ntrain_pred4 = EN_model.predict(X_train)\n\npd.DataFrame({'True Values': y_test, 'Predicted Values': test_pred4}).plot.scatter(x='True Values', y='Predicted Values')\nplt.show()\n\nen_predict = EN_model.predict(X_test)\n\nen_predict2 = cross_val_score(EN_model, X, y, cv=10).mean()\nres4 = pd.DataFrame(data=[[\"Least Squares\", * evalScore(y_test, test_pred4) , cvScore(LinearRegression())]],columns=['Model','R Square', 'MSE', 'RMSE', 'MAE', \"Cross Validation\"])\nr_model\nres1.describe()","c8391674":"test_predict = lrScore[:1152]\ntest_predict[test_predict < 0] = 0\ntest_predict = test_predict.round()\nprint(test_predict)","93df8870":"df_test_predict = pd.DataFrame(test_predict, columns=['COVID-19 Deaths'])\nprint(test_predict)","197e3d2a":"submission = pd.DataFrame({'id': test_data.id, 'COVID-19 Deaths': ols_score2})\nsubmission.to_csv(\"submission.csv\", index=False)\nprint(\"Your submission was successfully saved!\")","ec960bb2":"# Here is where I am checking for missing values:","7b488f17":"Here is where I will be doing some Exploratory Data Analysis:","21afe5a6":"# Here is where I train a Ridge Regression Model\n","ad7cf450":"So at this point I have a filled chart with a date system depending on the MMWR week.\n\nThe Covid 19 deaths have been averaged based on the mean of the age groups.\n\n# Now I will be checking for outliers","71e5c737":"Now I will have to find a way to fill the MMWR Week while making it increase instead of resetting.","7496ae8b":"Here is where I split up the data","43fb3717":"Now that I can see the missing values by category, it is time to decide what exactly to do with them.\nDuring class on 10\/6\/2021, the professor informed us that the only relavent columns are:\n* Start Date\n* MMWR Week\n* Race and Hispanic Origin Group\n* Age Group\n* Covid-19 Deaths\n\nThe only column that has missing values is the MMWR group.\nThe rest can stay the same since we do not need them.","4f67737c":"# Here is where I submit the model","fd5f56fc":"# Here is where I train an Ordinary Least Squares Model:","55ffef3d":"The Missing Values of the Test Data compared to the Train Data are:\n* COVID-19 Deaths\n* Footnote","83ecc221":"Here are functions to get the r squared, mse, rmse, mae and cross validation score to turn it into a dataframe.","cb747d03":"# Here is where I implement an approach to handle those missing values\nNow I will fill the missing values with the corresponding mean values.","d0710c0a":"The above print indicates that the means were accurately filled for the COVID-19 Deaths","8adc7779":"Here is all of the standard imports that I will be using:","d6c186f3":"# Here is where I will be conducting data transformations and feature engineering that are required\nNow I will be doing some calculations on how to get the mean of the specific age groups to fill the NaN values.\nI thought this was an accurate approcach since it will be the mean of the members of the age groups that actually do have values, even if it is a 0.\nI will save these means and insert them for the missing values of COVID-19 Deaths.","068e1c3c":"The above print indicates that the means were accurately filled for the MMWR Week Deaths","0870079d":"Here is where I will be deleting unnessary data.\n\nThe smaller dataframes will only include:\n* MMWR Week\n* Race and Hispanic Origin Group\n* Age Group\n* Covid-19 Deaths","b1c3c569":"# Here is where I will be importing my data from the provided CSV files","81ba1e36":"Now that I have a proper set of years and MMWR weeks, I will categorize the MMWR weeks in order by year starting with 2019.","593a6c3c":"# Here is where I train the Elastic Net Regression model","21a972eb":"# Ryan Kendrick","40268b31":"Before I check for missing values, I will see what the overall shape of the data is and what categories it contains:","36b0bff9":"# Here is where I train a Lasso Regression Model","a6e7b7dd":"So it looks like there are a few outliers, I will try and fix them below.\n\n# Here is my approach to handle the outliers\n\nI will be doing some trimming and standard deviation to the dataset.\n\nThis method will consist of cutting off or getting rid of the outliers at the end of the dataset."}}