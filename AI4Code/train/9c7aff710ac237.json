{"cell_type":{"dfd67d4a":"code","8a93322f":"code","d057b0da":"code","05d59bc7":"code","1e584218":"code","2a7a2de8":"code","6f2caa70":"code","2c44b5b0":"code","09f8c23c":"code","ed87e863":"code","dddf354f":"code","01e08acf":"code","6c46fea2":"code","652b30bc":"code","5ca2fd7b":"code","149a4646":"code","4d672d30":"code","6328d7fe":"code","7002f1b8":"code","7258965e":"code","78892fbd":"code","3724c65e":"markdown","1972748c":"markdown","0bb5a42f":"markdown","0e33629c":"markdown","ed1874fc":"markdown","1f913507":"markdown"},"source":{"dfd67d4a":"import cv2\nfrom PIL import Image\nimport numpy as np\nfrom keras import layers\nfrom keras.applications import ResNet152, InceptionV3\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nimport tensorflow as tf\nfrom tqdm import tqdm\n\n%matplotlib inline","8a93322f":"SEED = 42\nnp.random.seed(SEED)\ntf.random.set_seed(SEED)","d057b0da":"BATCH_SIZE = 16\nLEARNING_RATE = 5e-05\nEPOCHS = 20","05d59bc7":"train_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')","1e584218":"def preprocess_image(image_path, desired_size=224):\n    im = Image.open(image_path)\n    im = im.resize((desired_size, )*2, resample=Image.LANCZOS)\n    \n    return im","2a7a2de8":"N = train_df.shape[0]\nx_train = np.empty((N, 224, 224, 3), dtype=np.uint8)\n\nfor i, image_id in enumerate(tqdm(train_df['id_code'])):\n    x_train[i, :, :, :] = preprocess_image(\n        f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_id}.png'\n    )","6f2caa70":"y_train = pd.get_dummies(train_df['diagnosis']).values","2c44b5b0":"y_train_multi = np.empty(y_train.shape, dtype=y_train.dtype)\ny_train_multi[:, 4] = y_train[:, 4]\n\nfor i in range(3, -1, -1):\n    y_train_multi[:, i] = np.logical_or(y_train[:, i], y_train_multi[:, i+1])","09f8c23c":"x_train, x_val, y_train, y_val = train_test_split(\n    x_train, y_train_multi, \n    test_size=0.15, \n    random_state=SEED\n)","ed87e863":"def create_datagen():\n    return ImageDataGenerator(\n        zoom_range=0.15,\n        fill_mode='constant',\n        cval=0.,\n        horizontal_flip=True,\n        vertical_flip=True,\n    )","dddf354f":"class Metrics(Callback):\n    def on_train_begin(self, logs={}):\n        self.val_kappas = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        X_val, y_val = self.validation_data[:2]\n        y_val = y_val.sum(axis=1) - 1\n        \n        y_pred = self.model.predict(X_val) > 0.5\n        y_pred = y_pred.astype(int).sum(axis=1) - 1\n\n        _val_kappa = cohen_kappa_score(\n            y_val,\n            y_pred, \n            weights='quadratic'\n        )\n\n        self.val_kappas.append(_val_kappa)\n\n        print(f\"val_kappa: {_val_kappa:.4f}\")\n        \n        if _val_kappa == max(self.val_kappas):\n            print(\"Validation Kappa has improved. Saving model.\")\n            self.model.save('model.h5')\n\n        return","01e08acf":"resnet_backbone = ResNet152(\n    weights='imagenet',\n    include_top=False,\n    input_shape=(224,224,3)\n)\n\ninception_backbone = InceptionV3(\n    weights='imagenet',\n    include_top=False,\n    input_shape=(224,224,3)\n)\n\nkappa_metrics = Metrics()","6c46fea2":"def build_model(backbone=inception_backbone, lr=0.00005):\n    model = Sequential()\n    model.add(backbone)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(5, activation='sigmoid'))\n    \n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Adam(lr=lr),\n        metrics=['accuracy']\n    )\n    \n    return model","652b30bc":"def train_model(model, epochs):\n    history = model.fit_generator(\n        data_generator,\n        steps_per_epoch=x_train.shape[0] \/ BATCH_SIZE,\n        epochs=epochs,\n        validation_data=(x_val, y_val),\n        callbacks=[kappa_metrics]\n    )\n\n    return history\n\ndef print_output(history):\n    history_df = pd.DataFrame(history.history)\n    history_df[['loss', 'val_loss']].plot()\n    history_df[['accuracy', 'val_accuracy']].plot()\n\n#    plt.plot(kappa_metrics.val_kappas)","5ca2fd7b":"print('creating datagenerator')\ndata_generator = create_datagen().flow(x_train, y_train, batch_size=BATCH_SIZE, seed=SEED)\nprint('datagenerator done, building model')\nresnet_model = build_model(backbone=resnet_backbone, lr=LEARNING_RATE)\nprint('model done, training model')\nprint(f'ResNet152, {BATCH_SIZE}, {LEARNING_RATE}, sigmoid')\nhistory_resnet = train_model(resnet_model, EPOCHS)\n","149a4646":"print_output(history_resnet)","4d672d30":"print('creating datagenerator')\ndata_generator = create_datagen().flow(x_train, y_train, batch_size=BATCH_SIZE, seed=SEED)\nprint('datagenerator done, building model')\ninception_model = build_model(backbone=inception_backbone, lr=LEARNING_RATE)\nprint('model done, training model')\nprint(f'InceptionV3, {BATCH_SIZE}, {LEARNING_RATE}, sigmoid')\n\nhistory_inception = train_model(inception_model, EPOCHS)\n","6328d7fe":"print_output(history_inception)","7002f1b8":"def generate_contingency(c1, c2, x, y):\n    y2 = y.sum(axis=1) - 1\n\n    c1_pred = c1.predict(x) > 0.5\n    c1_pred = c1_pred.astype(int).sum(axis=1) - 1\n\n    c2_pred = c2.predict(x) > 0.5\n    c2_pred = c2_pred.astype(int).sum(axis=1) - 1\n    \n    c1c2_correct = 0\n    c1_correct = 0\n    c2_correct = 0\n    none_correct = 0\n\n    for i, sample in enumerate(x):\n        if ((y2[i] == c1_pred[i]) and (y2[i] == c2_pred[i])):\n            c1c2_correct += 1\n        elif ((y2[i] == c1_pred[i]) and (y2[i] != c2_pred[i])):\n            c1_correct += 1\n        elif ((y2[i] != c1_pred[i]) and (y2[i] == c2_pred[i])):\n            c2_correct += 1\n        elif ((y2[i] != c1_pred[i]) and (y2[i] != c2_pred[i])):\n            none_correct += 1\n    \n    table = [[c1c2_correct, c1_correct],\n\t\t [c2_correct, none_correct]]\n    total = c1c2_correct + c1_correct + c2_correct + none_correct\n    \n    \n    print(f'c1c2_correct: {c1c2_correct}, c1_correct: {c1_correct}, c2_correct: {c2_correct}, none_correct: {none_correct}, total: {total}')\n    return table","7258965e":"table = generate_contingency(resnet_model, inception_model, x_val, y_val)","78892fbd":"# Example of calculating the mcnemar test\nfrom statsmodels.stats.contingency_tables import mcnemar\n# calculate mcnemar test\nresult = mcnemar(table, exact=False, correction=True)\n# summarize the finding\nprint('statistic=%.3f, p-value=%.3f' % (result.statistic, result.pvalue))\n# interpret the p-value\nalpha = 0.05\nif result.pvalue > alpha:\n\tprint('Same proportions of errors (fail to reject H0)')\nelse:\n\tprint('Different proportions of errors (reject H0)')","3724c65e":"# Training the models\nTrain both the ResNet and Inception model. Print their training process and print the accuracy and loss plots.","1972748c":"# Init\nImport needed libraries and set pseudo-random generators at a static seed.\nAlso define some testing variables, like batch-size, learning-rate and epochs","0bb5a42f":"# Creating Multilabels and splitting data\nA multilabel problems scores higher on the kappa score, which is used by this competiton. Thanks to https:\/\/www.kaggle.com\/lextoumbourou\/blindness-detection-resnet34-ordinal-targets.\nFurthermore the data is split in a 85\/15 train\/val split.","0e33629c":"# Preparing training\nSome functions which need to be defined before training, the datagen builder, the kappa score callback and the model builder, downloading the ResNet and Inception backbones.","ed1874fc":"# McNemar's Test","1f913507":"# Load and preprocess data\nRead the data into a pandas dataframe. Resize the images to 224 x 224. "}}