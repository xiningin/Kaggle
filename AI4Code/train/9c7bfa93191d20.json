{"cell_type":{"3edd4660":"code","86ab18fd":"code","e87ead1f":"code","64fdf5d0":"code","176513eb":"code","1a50d172":"code","52fe09b2":"code","c5ad0ade":"code","1e1c8a2b":"code","d8235d63":"code","609734a3":"code","c98ca91d":"code","e534c577":"code","df128376":"code","6114df66":"code","8c49bc98":"code","fe57350c":"code","5263ddc9":"code","562ede0f":"code","8557a7dd":"code","abe17af8":"code","238122c6":"code","b6bbad85":"markdown","676207fa":"markdown","aaa02d22":"markdown","91f9731a":"markdown","65fdfb07":"markdown","5a42023f":"markdown","d1ef8a6c":"markdown","e9040246":"markdown","d88b34c9":"markdown","6e5e37dc":"markdown","41d0fc9f":"markdown"},"source":{"3edd4660":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86ab18fd":"df = pd.read_csv(\"..\/input\/fifa19\/data.csv\")","e87ead1f":"df","64fdf5d0":"#Remove all columns with strings\n\ndf = df.select_dtypes(exclude = ['object'])","176513eb":"df","1a50d172":"df.isnull().sum()","52fe09b2":"#Replacing null values with means of respective columns\n\nfor colname in df.columns:\n    col_mean = df[colname].mean()\n    df[colname] = df[colname].fillna(col_mean)","c5ad0ade":"#Now there are no null values!\n\ndf.isnull().sum()","1e1c8a2b":"#Let's check what columns we have.\n\ndf.columns","d8235d63":"#Checks if Agility is over 70. If so, then put 1, else put 0. A new column called isAgile is created in the process.\n\ndf['isAgile'] = (df['Agility'] >= 70).astype(int)","609734a3":"#Colourful plot!\n\nimport seaborn as sns\nsns.catplot(x=\"Overall\", y=\"Agility\", kind=\"swarm\", data=df)","c98ca91d":"#A new column came up on the extreme right! \n\ndf","e534c577":"#Masking random rows, to select train and test\n\nmsk = np.random.rand(len(df)) < 0.8 ","df128376":"train = df[msk]\ntest = df[~msk]","6114df66":"X = train.drop(columns = ['isAgile']).values\ny = train['isAgile'].values","8c49bc98":"print(X.shape)\nprint(y.shape)","fe57350c":"from sklearn.linear_model import LogisticRegression\nregr = LogisticRegression()\nregr.fit(X, y)","5263ddc9":"from sklearn import metrics\npred = regr.predict(X)\nmetrics.accuracy_score(pred, y)","562ede0f":"test_pred = test.drop(columns = ['isAgile'])\nprediction = regr.predict(test_pred)","8557a7dd":"correct_output = pd.DataFrame({\"ID:\":test.ID, \"isAgile\":test.isAgile})\npredicted_output = pd.DataFrame({\"ID\":test.ID, \"isAgile\":prediction})","abe17af8":"correct_predictions = 0\n\nfor i in range(len(correct_output)):\n    if(correct_output['isAgile'].iloc[i] == predicted_output['isAgile'].iloc[i]):\n        correct_predictions += 1","238122c6":"correct_percent = (correct_predictions\/len(correct_output))*100\ncorrect_percent","b6bbad85":"# We're going to use Agility as the dependent variable.","676207fa":"# We need to split our data into train and test data.","aaa02d22":"# Fitting the logistic regression model.","91f9731a":"# Finding the accuracy score! It seems to be pretty good.","65fdfb07":"# Let X be the set of dependent variables, and y be the independent variable.","5a42023f":"# Check if you have any null values. If so, we need to replace them!","d1ef8a6c":"# We test our model, and obtain the accuracy score. Let's check how accurate our model ACTUALLY is.","e9040246":"# The train and test distribution is randomized, however, regardless, the actual accuracy should always be well above 80%.","d88b34c9":"# Now, we do not need the strings for our example, only the numbers!","6e5e37dc":"# Checking if the isAgile column in test and the prediction match.","41d0fc9f":"# The first step is to get the data, and display it."}}