{"cell_type":{"3a054dc6":"code","03503218":"code","941d08bc":"code","39c80691":"code","89508f39":"code","077f8cb8":"code","89a3d12e":"code","93a7d1f1":"code","bfb9c430":"code","48a805d9":"code","68e32afb":"code","a3378ad4":"code","ffd6274a":"code","b6188119":"code","b0bd9d3a":"code","9c763bf8":"code","26289ea4":"code","032864b8":"code","50ecbbee":"code","54d5d178":"code","f1ca45e9":"code","95c45ec6":"code","60c30025":"code","61e839ac":"code","fbd7169b":"code","c01d9595":"code","3a02cdc3":"code","b5677381":"markdown","c6335c70":"markdown","48ea83bf":"markdown","6c403172":"markdown","8bfe1a66":"markdown","9294a5f4":"markdown"},"source":{"3a054dc6":"import os\n\n\nimport torch\n\nimport warnings\n\nimport pandas as pd\nimport numpy as np\nimport torch.nn as nn\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import metrics\nfrom transformers import AdamW\nfrom transformers import get_linear_schedule_with_warmup\n\nimport time\nimport torchvision\nimport torch.nn as nn\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom PIL import Image, ImageFile\nfrom torch.utils.data import Dataset\nimport torch\nimport torch.optim as optim\nfrom torchvision import transforms\nfrom torch.optim import lr_scheduler\nimport os\nwarnings.filterwarnings(\"ignore\")","03503218":"BASE_PATH = \"\/kaggle\/input\/alaska2-image-steganalysis\"\ntrain_imageids = pd.Series(os.listdir(BASE_PATH + '\/Cover')).sort_values(ascending=True).reset_index(drop=True)\ntest_imageids = pd.Series(os.listdir(BASE_PATH + '\/Test')).sort_values(ascending=True).reset_index(drop=True)\nsub = pd.read_csv('\/kaggle\/input\/alaska2-image-steganalysis\/sample_submission.csv')","941d08bc":"#https:\/\/www.kaggle.com\/xhlulu\/alaska2-efficientnet-on-tpus\ndef append_path(pre):\n    return np.vectorize(lambda file: os.path.join(BASE_PATH, pre, file))","39c80691":"train_filenames = np.array(os.listdir(\"\/kaggle\/input\/alaska2-image-steganalysis\/Cover\/\"))\nlen(train_filenames)","89508f39":"#https:\/\/www.kaggle.com\/xhlulu\/alaska2-efficientnet-on-tpus\nnp.random.seed(0)\npositives = train_filenames.copy()\nnegatives = train_filenames.copy()\nnp.random.shuffle(positives)\nnp.random.shuffle(negatives)\n\njmipod = append_path('JMiPOD')(positives[:10000])\njuniward = append_path('JUNIWARD')(positives[10000:20000])\nuerd = append_path('UERD')(positives[20000:30000])\n\npos_paths = np.concatenate([jmipod, juniward, uerd])","077f8cb8":"#https:\/\/www.kaggle.com\/xhlulu\/alaska2-efficientnet-on-tpus\ntest_paths = append_path('Test')(sub.Id.values)\nneg_paths = append_path('Cover')(negatives[:30000])","89a3d12e":"train_paths = np.concatenate([pos_paths, neg_paths])\ntrain_labels = np.array([1] * len(pos_paths) + [0] * len(neg_paths))","93a7d1f1":"#https:\/\/www.kaggle.com\/xhlulu\/alaska2-efficientnet-on-tpus\ntrain_paths, valid_paths, train_labels, valid_labels = train_test_split(\n    train_paths, train_labels, test_size=0.15, random_state=2020)","bfb9c430":"len(valid_labels)","48a805d9":"l=np.array([train_paths,train_labels])\ntraindataset = pd.DataFrame({ 'images': list(train_paths), 'label': train_labels},columns=['images','label'])\n","68e32afb":"val_l=np.array([valid_paths,valid_labels])\nvaliddataset=dataset = pd.DataFrame({ 'images': list(valid_paths), 'label': valid_labels},columns=['images','label'])\n","a3378ad4":"#traindataset = pd.concat([traindataset,validdataset])\nlen(traindataset)","ffd6274a":"traindataset.head(2)","b6188119":"len(traindataset)","b0bd9d3a":"#i use this line of code for debugging\n#traindataset = traindataset.head(100)\nlen(traindataset)","9c763bf8":"image = Image.open(train_paths[50] )\nimage","26289ea4":"# add image augmen tation\nclass train_images(Dataset):\n\n    def __init__(self, csv_file):\n\n        self.data = csv_file\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        #print(idx)\n        img_name =  self.data.loc[idx][0]\n        image = Image.open(img_name)\n        image = image.resize((512, 512), resample=Image.BILINEAR)\n        label = self.data.loc[idx][1] #torch.tensor(self.data.loc[idx, 'label'])\n\n# ## https:\/\/pytorch.org\/docs\/stable\/torchvision\/transforms.html\n# transforms.Compose([\n# transforms.CenterCrop(10),\n# transforms.ToTensor(),\n# ])\n        \n#         return {'image': transforms.ToTensor()(image), # ORIG\n        return {'image': transforms.Compose([transforms.RandomVerticalFlip(),\n                                             transforms.RandomHorizontalFlip(),\n                                             transforms.ColorJitter(),\n                                             transforms.ToTensor()])(image),\n            'label': label\n            }","032864b8":"train_dataset = train_images(traindataset)\nvalid_dataset = train_images(validdataset)","50ecbbee":"model = torchvision.models.resnet101(pretrained=True)\n#model.load_state_dict(torch.load(\"..\/input\/pytorch-pretrained-models\/resnet101-5d3b4d8f.pth\"))\n\nnum_features = model.fc.in_features\nmodel.fc = nn.Linear(2048, 1)\nmodel.load_state_dict(torch.load(\"..\/input\/pytorch-transfer-learning-baseline\/model.bin\"))\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\") \nprint(device)\nmodel = model.to(device)\nmodel.eval()","54d5d178":"data_loader = torch.utils.data.DataLoader(train_dataset, batch_size = 16, shuffle=True, num_workers=4)\n'''valid_loader = torch.utils.data.DataLoader(validdataset, batch_size=64, shuffle=True, num_workers=4)\nvalid_loader'''\n\n\nplist = [\n         {'params': model.layer4.parameters(), 'lr': 1e-4, 'weight': 0.001},\n         {'params': model.fc.parameters(), 'lr': 1e-3}\n         ]\n\noptimizer = optim.Adam(plist, lr=0.001)\nscheduler = lr_scheduler.StepLR(optimizer, step_size=10)","f1ca45e9":"#https:\/\/www.kaggle.com\/abhishek\/very-simple-pytorch-training-0-59\/data\nsince = time.time()\ncriterion = torch.nn.MSELoss() # BCEWithLogitsLoss\n\nnum_epochs = 6 # train for longer for better results\n\nfor epoch in range(num_epochs):\n    print('Epoch {}\/{}'.format(epoch, num_epochs - 1))\n    print('-' * 10)\n    scheduler.step()\n    model.train()\n    running_loss = 0.0\n    tk0 = tqdm(data_loader, total=int(len(data_loader)))\n    counter = 0\n    for bi, d in enumerate(tk0):\n        inputs = d[\"image\"]\n        labels = d[\"label\"].view(-1, 1)\n        inputs = inputs.to(device, dtype=torch.float)\n        labels = labels.to(device, dtype=torch.float)\n        optimizer.zero_grad()\n        with torch.set_grad_enabled(True):\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            #loss = criterion(outputs, torch.max(labels, 1)[1])\n            loss.backward()\n            optimizer.step()\n        running_loss += loss.item() * inputs.size(0)\n        #print(running_loss)\n        counter += 1\n        tk0.set_postfix(loss=(running_loss \/ (counter * data_loader.batch_size)))\n    epoch_loss = running_loss \/ len(data_loader)\n    print('Training Loss: {:.4f}'.format(epoch_loss))\n\ntime_elapsed = time.time() - since\nprint('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed \/\/ 60, time_elapsed % 60))\ntorch.save(model.state_dict(), \"model.bin\")","95c45ec6":"class test_images(Dataset):\n\n    def __init__(self, csv_file):\n\n        self.data = csv_file\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        img_name =  self.data.loc[idx][0]\n        image = Image.open(img_name)\n        image = image.resize((512, 512), resample=Image.BILINEAR)\n        #label = self.data.loc[idx][1] #torch.tensor(self.data.loc[idx, 'label'])\n        #image = self.transform(image)\n        return {'image': transforms.ToTensor()(image)}\n\n","60c30025":"testdataset = pd.DataFrame({ 'images': list(test_paths)},columns=['images'])\ntestdataset.head(2)","61e839ac":"testdataset = test_images(testdataset)","fbd7169b":"sub[\"Label\"] = pd.to_numeric(sub[\"Label\"].astype(float))","c01d9595":"%%time\ntest_loader = torch.utils.data.DataLoader(testdataset, batch_size=1, shuffle=False) # test_set contains only images directory\n\nfor param in model.parameters():\n    param.requires_grad = False\n\nprediction_list = []\ntk0 = tqdm(test_loader)\nfor i, x_batch in enumerate(tk0):\n    #print(i)\n    \n    x_batch = x_batch[\"image\"]\n    #print(x_batch)\n    pred =  model(x_batch.to(device))\n    #prediction_list.append(pred.cpu())\n    #print( type(pred.item()))\n    #print(\"\\n\")\n    sub.Label[i] = pred.item()\n    #print(sub.Label[i])","3a02cdc3":"sub.to_csv('submission.csv', index=False)\nsub.head(110)","b5677381":"# ChangeLog\n* v1. Training for 7 epochs because i have ~6 hours gpu quota left now (model resnet101 of torchvision)\n* v2. MSELoss - 10 epoch (forcefully stopped training because of version 3 attempt)\n* v3. Adding sigmoid during inference\n* v4. inferencing by solving inference issue of v3\n\n\n\n* Fork - changed to use pretrained model + more image augmentation","c6335c70":"# TakeAways : \n* [very simple pytorch training](https:\/\/www.kaggle.com\/abhishek\/very-simple-pytorch-training-0-59\/data)\n\n* [Alaska2: EfficientNet on TPUs](https:\/\/www.kaggle.com\/xhlulu\/alaska2-efficientnet-on-tpus)\n\n\n","48ea83bf":"**For now just using the train set only training**","6c403172":"# Import libraries and utility scripts","8bfe1a66":"thanks to @abhishek brother and @xhlulu as i borrowed a lot of code from them,without kaggler like them i am nothing in kaggle. have been learning a lot from them since last 1+ year. ","9294a5f4":"# Inference"}}