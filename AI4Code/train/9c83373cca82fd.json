{"cell_type":{"131be657":"code","0c2802fd":"code","3b12eea5":"code","dd98a5f3":"code","c61aa2b2":"code","55e36799":"code","72a92345":"code","b23b5896":"code","e02511f6":"code","05a3587a":"code","1d2453cb":"code","af448470":"code","84424707":"code","51597f18":"code","64c34120":"code","96a3d9be":"code","012a6b3a":"code","60970bc3":"code","0cb9a771":"code","3259c12c":"code","2505e519":"code","7bd1844f":"code","fe96e6f0":"code","e3882b7f":"code","2dd1e828":"code","367b3fac":"code","bddf6b4b":"code","4974ad20":"code","6b7df126":"code","6f95ecbf":"code","ed7046c3":"code","e4b596b2":"code","ba8fd5ef":"code","5c6f7500":"code","89ad2e0d":"code","672cfb36":"code","e8afc2fc":"markdown","ffe13faa":"markdown","a80616cb":"markdown","1063dd6a":"markdown","257dd9bd":"markdown","3f6c37b3":"markdown","ee35678c":"markdown","65f7ba12":"markdown","2f32321d":"markdown","a1be8fc7":"markdown","bcf79a08":"markdown","dd030c61":"markdown","46c59bbe":"markdown","374d78da":"markdown","23bc9e57":"markdown","a3cc3584":"markdown","33f6dd77":"markdown","884bc8ec":"markdown","029f6b94":"markdown","e943141a":"markdown","41a96c90":"markdown","1753986d":"markdown","75f4dd06":"markdown","526f6e50":"markdown","afc36329":"markdown","e70ba7e4":"markdown","e52abb92":"markdown","5cade3e6":"markdown","f5f7adbb":"markdown","ae8e1f75":"markdown","403aff82":"markdown","a179c138":"markdown","09abe717":"markdown","04a1982b":"markdown"},"source":{"131be657":"! pip install calmap","0c2802fd":"!python --version","3b12eea5":"# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport seaborn as sns\n\nfrom plotnine import *\nimport calmap\n\nimport plotly.express as px\nimport folium\n\n# color pallette\n\nc = '#393e46'\nd = '#ff2e63'\nr = '#30e3ca'\ni = '#f8b400'\ncdr = [c, d, r] # grey - red - blue\nidr = [i, d, r] # yellow - red - blue","dd98a5f3":"!ls ..\/input\/covid19","c61aa2b2":"# importing datasets\nfull_table = pd.read_csv('..\/input\/covid19\/complete_data.csv',parse_dates=['Date'])\nfull_table.head()","55e36799":"# dataframe info\nfull_table.info()","72a92345":"# checking for missing value\n# full_table.isna().sum()","b23b5896":"# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values with NA\nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('NA')\nfull_table[['Confirmed', 'Deaths']] = full_table[['Confirmed', 'Deaths']].fillna(0)","e02511f6":"# complete dataset \n# complete = full_table.copy()\n\n# full table\nspain = full_table[full_table['Country\/Region']=='Spain']\nrow = full_table[full_table['Country\/Region']!='Spain']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nspain_latest = full_latest[full_latest['Country\/Region']=='Spain']\nrow_latest = full_latest[full_latest['Country\/Region']!='Spain']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths'].sum().reset_index()\nspain_latest_grouped = spain_latest.groupby('Province\/State')['Confirmed', 'Deaths'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths'].sum().reset_index()","05a3587a":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths'].max()\ntemp.style.background_gradient(cmap='Pastel1_r')","1d2453cb":"temp = full_table.groupby('Date')['Confirmed', 'Deaths'].sum()\ntemp = temp.reset_index()\ntemp = temp.sort_values('Date', ascending=False)\ntemp.head(1).reset_index(drop=True).style.background_gradient(cmap='Pastel1')","af448470":"temp_f = full_latest_grouped[['Country\/Region', 'Confirmed', 'Deaths']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","84424707":"temp_flg = full_latest_grouped[['Country\/Region', 'Deaths']]\ntemp_flg = temp_flg.sort_values(by='Deaths', ascending=False)\ntemp_flg = temp_flg.reset_index(drop=True)\ntemp_flg = temp_flg[temp_flg['Deaths']>0]\ntemp_flg.style.background_gradient(cmap='Reds')","51597f18":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Reds')","64c34120":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","96a3d9be":"temp_f = spain_latest_grouped[['Province\/State', 'Confirmed', 'Deaths']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","012a6b3a":"temp = spain_latest_grouped[spain_latest_grouped['Confirmed']==\n                          spain_latest_grouped['Deaths']]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","60970bc3":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths']),\n        radius=int(full_latest.iloc[i]['Confirmed'])).add_to(m)\nm","0cb9a771":"# Spain \n\nm = folium.Map(location=[30, 116], tiles='cartodbpositron',\n               min_zoom=2, max_zoom=5, zoom_start=3)\n\nfor i in range(0, len(spain_latest)):\n    folium.Circle(\n        location=[spain_latest.iloc[i]['Lat'], spain_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(spain_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(spain_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(spain_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(spain_latest.iloc[i]['Deaths']),\n        radius=int(spain_latest.iloc[i]['Confirmed'])**1).add_to(m)\nm","3259c12c":"fig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", range_color=[1,2000], \n                    color_continuous_scale=\"aggrnyl\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\n# ------------------------------------------------------------------------\n\nfig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], \n                    locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", \n                    range_color=[1,50], color_continuous_scale=\"agsunset\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","2505e519":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf = formated_gdf[formated_gdf['Country\/Region']!='China']\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.5)\n\nfig = px.scatter_geo(formated_gdf[formated_gdf['Country\/Region']!='China'], \n                     locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread outside China over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","7bd1844f":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf = formated_gdf[formated_gdf['Country\/Region']!='Spain']\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.5)\n\nfig = px.scatter_geo(formated_gdf[formated_gdf['Country\/Region']!='Spain'], \n                     locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread outside Spain over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","fe96e6f0":"fig = px.bar(full_latest_grouped[['Country\/Region', 'Confirmed']].sort_values('Confirmed', ascending=False), \n             x=\"Confirmed\", y=\"Country\/Region\", color='Country\/Region', orientation='h',\n             log_x=True, color_discrete_sequence = px.colors.qualitative.Bold, title='Confirmed Cases', width=900, height=1200)\nfig.show()\n\ntemp = full_latest_grouped[['Country\/Region', 'Deaths']].sort_values('Deaths', ascending=False)\nfig = px.bar(temp[temp['Deaths']>0], \n             x=\"Deaths\", y=\"Country\/Region\", color='Country\/Region', title='Deaths', orientation='h',\n             log_x=True, color_discrete_sequence = px.colors.qualitative.Bold, width=900)\nfig.show()","e3882b7f":"temp = full_table.groupby(['Country\/Region', 'Date'])['Confirmed', 'Deaths'].sum()\ntemp = temp.reset_index()\n# temp.head()\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region', orientation='v', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\nfig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region', orientation='v', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","2dd1e828":"# In Spain\ntemp = spain.groupby('Date')['Confirmed', 'Deaths'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='In Spain',\n             color_discrete_sequence=cdr)\nfig.update_layout(barmode='group')\nfig.show()\n\n#-----------------------------------------------------------------------------\n\n# ROW\ntemp = row.groupby('Date')['Confirmed', 'Deaths'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='Outside Spain',\n             color_discrete_sequence=cdr)\nfig.update_layout(barmode='group')\nfig.show()","367b3fac":"def from_spain_or_not(row):\n    if row['Country\/Region']=='Spain':\n        return 'From Spain'\n    else:\n        return 'Outside Spain'\n    \ntemp = full_table.copy()\ntemp['Region'] = temp.apply(from_spain_or_not, axis=1)\ntemp = temp.groupby(['Region', 'Date'])['Confirmed', 'Deaths']\ntemp = temp.sum().diff().reset_index()\nmask = temp['Region'] != temp['Region'].shift(1)\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\n\nfig = px.bar(temp, x='Date', y='Confirmed', color='Region', barmode='group', \n             text='Confirmed', title='Confirmed', color_discrete_sequence= cdr)\nfig.update_traces(textposition='outside')\nfig.show()\n\nfig = px.bar(temp, x='Date', y='Deaths', color='Region', barmode='group', \n             text='Confirmed', title='Deaths', color_discrete_sequence= cdr)\nfig.update_traces(textposition='outside')\nfig.update_traces(textangle=-90)\nfig.show()","bddf6b4b":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n             title='Number of new cases everyday')\nfig.show()\n\nfig = px.bar(temp[temp['Country\/Region']!='Spain'], x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n             title='Number of new cases outside Spain everyday')\nfig.show()\n\nfig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region',\n             title='Number of new death case reported outside Spain everyday')\nfig.show()\n\nfig = px.bar(temp[temp['Country\/Region']!='Spain'], x=\"Date\", y=\"Deaths\", color='Country\/Region',\n             title='Number of new death case reported outside Spain everyday')\nfig.show()","4974ad20":"c_spread = spain[spain['Confirmed']!=0].groupby('Date')['Province\/State'].unique().apply(len)\nc_spread = pd.DataFrame(c_spread).reset_index()\n\nfig = px.line(c_spread, x='Date', y='Province\/State', \n              title='Number of Provinces\/States\/Regions of Spain to which COVID-19 spread over the time',\n             color_discrete_sequence=cdr)\nfig.show()\n\n# ------------------------------------------------------------------------------------------\n\nspread = full_table[full_table['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nfig = px.line(spread, x='Date', y='Country\/Region', \n              title='Number of Countries\/Regions to which COVID-19 spread over the time',\n             color_discrete_sequence=cdr)\nfig.show()","6b7df126":"rl = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths'].sum()\nrl = rl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrl.head().style.background_gradient(cmap='rainbow')\n\nncl = rl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths']\nncl = ncl.melt(id_vars=\"Country\/Region\", value_vars=['Affected', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=800,\n             # height=600, width=1000,\n             title='Number of Cases outside Spain', color_discrete_sequence=cdr)\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n\n# ------------------------------------------\n\ncl = spain_latest.groupby('Province\/State')['Confirmed', 'Deaths'].sum()\ncl = cl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths']\nncl = ncl.melt(id_vars=\"Province\/State\", value_vars=['Affected','Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Province\/State\", x=\"value\", color='variable', orientation='h', height=800,\n             # height=600, width=1000,\n             title='Number of Cases in Spain', color_discrete_sequence=cdr)\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","6f95ecbf":"fig = px.treemap(spain_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Confirmed\",\n                 title='Number of Confirmed Cases in Spain Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(spain_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Province\/State\"], values=\"Deaths\", \n                 title='Number of Deaths Reported in Spain Provinces',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\n# ----------------------------------------------------------------------------\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Confirmed\", \n                 title='Number of Confirmed Cases outside Spain',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Deaths\", \n                 title='Number of Deaths outside Spain',\n                 color_discrete_sequence = px.colors.qualitative.Pastel)\nfig.show()\n","ed7046c3":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Country\/Region'])\ntemp.head()","e4b596b2":"px.line(temp, x='Date', y='Confirmed')","ba8fd5ef":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Country\/Region'])\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(plt.plot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","5c6f7500":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(sns.lineplot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","89ad2e0d":"temp = full_table.groupby('Date')['Confirmed'].sum()\ntemp = temp.diff()\n\nplt.figure(figsize=(20, 5))\ncalmap.yearplot(temp, fillcolor='white', cmap='Reds', linewidth=0.5)\nplt.plot()","672cfb36":"spread = full_table[full_table['Confirmed']!=0].groupby('Date')\nspread = spread['Country\/Region'].unique().apply(len).diff()\n\nplt.figure(figsize=(20, 5))\ncalmap.yearplot(spread, fillcolor='white', cmap='Greens', linewidth=0.5)\nplt.plot()","e8afc2fc":"# Latest Data","ffe13faa":"# No. of cases each day","a80616cb":"### Across the globe","1063dd6a":"### Import","257dd9bd":"# New cases in each Countries","3f6c37b3":"# Confirmed cases in each Countries","ee35678c":"### Countries with all cases died","65f7ba12":"### Countries with deaths reported","2f32321d":"# Dataset","a1be8fc7":"### In each country","bcf79a08":"# Preprocessing","dd030c61":"# Spain autonomous region wise data","46c59bbe":"# Country wise Data","374d78da":"### Reported cases in Spain","23bc9e57":"### Install","a3cc3584":"### Provinces with all cases died","33f6dd77":"# Proportion of Cases","884bc8ec":"### Cleaning Data","029f6b94":"### Latest Condensed Data","e943141a":"# No. cases in each countries","41a96c90":"# No. of places to which COVID-19 spread","1753986d":"### Number of new cases every day","75f4dd06":"### Countries with no affected case anymore","526f6e50":"# Composition of Cases","afc36329":"### In each autonomous region","e70ba7e4":"# Maps","e52abb92":"### Number of new countries every day","5cade3e6":"# Libraries","f5f7adbb":"# Affected Countries","ae8e1f75":"# No. of new cases everyday","403aff82":"# Calander map","a179c138":"### Derived Tables","09abe717":"# Spread over the time","04a1982b":"### Latest Complete Data"}}