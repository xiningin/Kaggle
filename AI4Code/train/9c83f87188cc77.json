{"cell_type":{"95ac5d4d":"code","b77db407":"code","ccb10c68":"code","dd104eec":"code","c881e1a4":"code","0c0ebf8e":"code","73b45501":"code","4d3d4f89":"code","d7ee513a":"code","3a1998c0":"code","4ab881c2":"code","f610ee23":"code","f75c45dc":"code","70bb9482":"code","e800efff":"code","4282e928":"code","00db72f4":"code","f90fc2c9":"code","d3b8135d":"code","cd563f19":"code","fa054e11":"code","05239214":"code","f4d7a8aa":"code","3dd35813":"code","7adbf561":"code","962cb01f":"code","e0b95ce5":"markdown","45d8a6c5":"markdown","6b66fd34":"markdown","4f43c341":"markdown","dcd9862f":"markdown","0e5b2c62":"markdown","9b0dea71":"markdown","7c396737":"markdown","3a193929":"markdown","15700972":"markdown","90fb781b":"markdown","ab0fc286":"markdown","abba1336":"markdown","c28b4fa9":"markdown","d206b9df":"markdown","cd97539e":"markdown","948fdf4b":"markdown","ab27e325":"markdown"},"source":{"95ac5d4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b77db407":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport textwrap\nimport plotly.graph_objects as go\nimport seaborn as sns","ccb10c68":"eng_jobs = pd.read_csv('..\/input\/data-engineer-jobs\/DataEngineer.csv')\neng_jobs.head(5)","dd104eec":"eng_jobs.drop(columns=['Job Description','Company Name','Competitors'],axis=1,inplace=True)","c881e1a4":"eng_jobs.replace([-1.0,-1,'-1'],np.nan, inplace=True)\neng_jobs['Easy Apply'] = eng_jobs['Easy Apply'].fillna(False).astype(bool)","0c0ebf8e":"eng_jobs['Salary Estimate'] = eng_jobs['Salary Estimate'].str.replace('(','').str.replace(')','').str.replace('Glassdoor est.','').str.replace('Employer est.','')","73b45501":"eng_jobs['Mini Salary'],eng_jobs['Max Salary'] = eng_jobs['Salary Estimate'].str.split('-').str\neng_jobs['Mini Salary'] = eng_jobs['Mini Salary'].str.strip(' ').str.strip('$').str.strip('K').fillna(0).astype(int)\neng_jobs['Max Salary'] = eng_jobs['Max Salary'].str.strip(' ').str.strip('$').str.strip('K').fillna(0).astype(int)","4d3d4f89":"eng_jobs.drop(columns=['Salary Estimate'],axis=1,inplace=True)","d7ee513a":"#Replaced the nan with the most occuring date\neng_jobs.Founded.replace(np.nan, 2000, inplace=True) \neng_jobs['Founded'] = eng_jobs['Founded'].astype(int)","3a1998c0":"eng_jobs.Rating.replace(np.nan, 3.9, inplace=True)","4ab881c2":"eng_jobs['Revenue'].replace('Unknown \/ Non-Applicable',np.nan,inplace=True)\neng_jobs.head(5)","f610ee23":"easy_sec = eng_jobs.loc[eng_jobs['Easy Apply'] == True]\neasy_sec = easy_sec.groupby('Sector')['Easy Apply'].count().reset_index()\nEasy_sec = easy_sec.sort_values('Easy Apply',ascending=False).head(8)","f75c45dc":"easy_sec.head(5)","70bb9482":"fig, ax = plt.subplots(figsize = [16,5])\nsns.barplot(data = Easy_sec,x = 'Sector',y = 'Easy Apply', ax = ax)\nax.set_ylabel('Count Jobs')\nax.set_yticks(np.arange(0, 65, step = 5))\nfor index,Easy_sec in enumerate(Easy_sec['Easy Apply'].astype(int)):\n       ax.text(x=index-0.1 , y =Easy_sec+1 , s=f\"{Easy_sec}\" , fontdict=dict(fontsize=10))\nplt.show()","e800efff":"sala_city = eng_jobs.groupby('Location')[['Mini Salary','Max Salary']].mean().sort_values(['Mini Salary','Max Salary'],ascending=False).head(20)","4282e928":"fig = go.Figure()\n\nfig.add_trace(go.Bar(x=sala_city.index,y=sala_city['Mini Salary'],name='Minimum salary'))\nfig.add_trace(go.Bar(x=sala_city.index,y=sala_city['Max Salary'],name='Maximum Salary'))\n\nfig.update_layout(title='Top 20 cities with their minimum and maximum salaries',barmode='stack')\n\nfig.show()","00db72f4":"loc_job = eng_jobs.groupby('Location')['Job Title'].count().reset_index()\nloc_job = loc_job.sort_values('Job Title', ascending = False).head(10)\n\nfig, ax = plt.subplots(figsize = [16,5])\nsns.barplot(data = loc_job, x = 'Location', y = 'Job Title', ax = ax)\nax.set_ylabel('Count Jobs')\nax.set_yticks(np.arange(0, 250, step = 20))\nfor index,loc_job in enumerate(loc_job['Job Title'].astype(int)):\n       ax.text(x=index-0.1 , y =loc_job+1 , s=f\"{loc_job}\" , fontdict=dict(fontsize=10))\nplt.show()","f90fc2c9":"Job_Rev = eng_jobs.groupby('Industry')['Revenue'].count().reset_index()\nJob_Rev = Job_Rev.sort_values('Revenue',ascending=False).head(5)\nJob_Rev","d3b8135d":"max_width = 15\nfig, ax = plt.subplots(figsize = [16,5])\nsns.barplot(data = Job_Rev,x = 'Industry',y = 'Revenue', ax = ax)\nax.set_ylabel('Count Jobs')\nax.set_title('Industry against Revenue')\nax.set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax.get_xticklabels())\nfor index,Job_Rev in enumerate(Job_Rev['Revenue'].astype(int)):\n       ax.text(x=index-0.1 , y =Job_Rev+1 , s=f\"{Job_Rev}\" , fontdict=dict(fontsize=10))\nplt.show()","cd563f19":"rate_job = eng_jobs.groupby('Job Title')['Rating'].max().reset_index()\nrate_job = rate_job.sort_values('Rating',ascending=True).head(10)\nrate_job","fa054e11":"fig, ax = plt.subplots(figsize = (16,5))\nsns.barplot(data = rate_job,x = 'Rating',y = 'Job Title', ax = ax)\nax.set_ylabel('Job Title')\nax.set_title('Bottowm 10 Job Title Ratings')\nplt.show()","05239214":"jobs = eng_jobs.loc[eng_jobs.Headquarters.isin(['Chicago, IL'])]\njobs.head(5)","f4d7a8aa":"own_sec = jobs.groupby('Type of ownership')['Sector'].count().reset_index()\nown_sec.sort_values('Sector',ascending=False)\nown_sec.head(5)","3dd35813":"fig, ax = plt.subplots(figsize = [16,5])\nsns.barplot(data = own_sec,x = 'Type of ownership',y='Sector',ax = ax)\nax.set_ylabel('Count ownership')\nax.set_yticks(np.arange(0, 80, step = 5))\nfor index,own_sec in enumerate(own_sec['Sector'].astype(int)):\n       ax.text(x=index-0.1 , y =own_sec+1 , s=f\"{own_sec}\" , fontdict=dict(fontsize=10))\nplt.show()","7adbf561":"money_min = jobs.groupby('Sector')[['Mini Salary','Max Salary']].mean().sort_values(['Mini Salary','Max Salary'],ascending=False).head(8)\nmoney_min.reset_index(inplace=True)\n\nmoney_max = jobs.groupby('Sector')[['Mini Salary','Max Salary']].mean().sort_values(['Mini Salary','Max Salary'],ascending=True).head(8)\nmoney_max.reset_index(inplace=True)\n\nprint(money_max, '\\n')\nprint(money_min)","962cb01f":"max_width = 15\nmoney = [money_min,money_max]\nmoney_title = ['Top 8', 'Bottom 8']\nfig, ax = plt.subplots(2,1, figsize = (22,14))\nfig.subplots_adjust(hspace = 0.5)\nfor i in range(0,2):\n    sns.barplot(ax = ax[i], data = money[i], x = 'Sector', y = 'Max Salary', color = 'orangered', label = 'Max Salary')\n    sns.barplot(ax = ax[i], data = money[i], x = 'Sector', y = 'Mini Salary', color = 'darkslateblue', label = 'Mini Salary')\n    ax[i].legend()\n    ax[i].set_title(money_title[i]+' Average Salary in Each Sector', fontsize = 20)\n    ax[i].set_ylabel('Salary', fontsize = 20)\n    ax[i].set_xlabel('Sector', fontsize = 20)\n    ax[i].set_xticklabels(textwrap.fill(x.get_text(), max_width) for x in ax[i].get_xticklabels())\n    ax[i].set_yticks(np.arange(0, 300, step = 50))\n    ax[i].tick_params(labelsize = 18)\n    \nplt.show()","e0b95ce5":"# **Location vs Salaries**","45d8a6c5":"**Import Libraries and Data**","6b66fd34":"# **Sector**","4f43c341":"**If you like my work, do UPVOTE**","dcd9862f":"# **Industry**","0e5b2c62":"# **Preprocessing the Data**","9b0dea71":"**Cleaning the Revenue column values**","7c396737":"**Cleaning Rating column values**","3a193929":"**Cleaning the Salary Estimate column values**","15700972":"**Cleaning the Founded column values**","90fb781b":"Let's see the Minimum and Maximum salary in top 5 sectors in Chicago","ab0fc286":"# **Rating**","abba1336":"**CHICAGO**","c28b4fa9":"**Cleaning the Easy Apply column values**","d206b9df":"# **Visualization**","cd97539e":"Let's see how many sectors are owned by Private or by the Government in Chicago","948fdf4b":"**LOCATION VS JOB TITLES**","ab27e325":"Let's remove some unwanted columns"}}