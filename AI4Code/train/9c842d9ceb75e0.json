{"cell_type":{"1be73e4f":"code","6226150b":"code","5f5bba27":"code","d1b90b1c":"code","c783429c":"code","71d459c0":"code","24e9d097":"code","85420851":"code","c34177bc":"code","f7516e69":"code","889f0311":"code","99c5484a":"code","127cd38f":"code","799ce161":"code","a56b4225":"code","a3d1073c":"code","bead34a4":"code","2c8a4fe0":"markdown"},"source":{"1be73e4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6226150b":"import seaborn as sns\nimport matplotlib.pyplot as plt","5f5bba27":"df = pd.read_csv('..\/input\/online-teacher-languages-and-rates\/data\/anonymousteacherdata - Sheet1.csv')","d1b90b1c":"df","c783429c":"# Let's do a little cleaning (note, you can come back to this stage after doing some EDA, cause it's easier to see stuff now)\n\n# Is_Tutor -> Teacher_Type\nteacher_dict = {0:\"Teacher\",1:\"Tutor\"}\ndf = df.replace({\"Is_Tutor\": teacher_dict})\ndf = df.rename({\"Is_Tutor\":\"Teacher_Type\"}, axis = 'columns')\n\n# Rename 1st teahcing lang column\ndf = df.rename({\"1stTeaching Language\":\"1stTeachingLanguage\"}, axis = 'columns')\ndf","71d459c0":"# Let's get how many spoken languages each perosn speaks and append back onto the other df\nspoken_languages = df.filter(regex=(\"TeachingLanguage|AlsoSpeaks\"))\nspoken_languages","24e9d097":"langlist2 = pd.unique(spoken_languages.values.ravel('K')).tolist()\nlanglist2 = [x for x in langlist2 if str(x) != 'nan']","85420851":"# How many languages does each teacher speak?\n\n# First iterate over columns\nfor (columnName, columnData) in spoken_languages.iteritems():\n    spoken_languages[columnName] = spoken_languages[columnName].apply(lambda x: True if x in langlist2 else False)\nspoken_languages\n","c34177bc":"#Sum up all True's for each row\nspoken_languages['Num_Spoken_Languages'] = (spoken_languages == True).sum(axis=1)\n\n# Append back on to original df\ndf = pd.concat([df,spoken_languages['Num_Spoken_Languages']], axis = 1)\ndf","f7516e69":"# First language value counts (English is the winner, no suprise there)\nfirst_lang = df['1stTeachingLanguage'].value_counts()\nfirst_lang","889f0311":"# Filter < 10\nmore_than_ten = first_lang[first_lang >10]\n# Filter > 10 to be fair and all\nless_than_ten = first_lang[first_lang <10]\n\n# Setup subplots object\nfig, ax =plt.subplots(1,2, figsize=(15,15))\n# Set plots for each position\nax1 = sns.barplot(more_than_ten, more_than_ten.index, ax = ax[0])\nax2 = sns.barplot(less_than_ten, less_than_ten.index, ax = ax[1])\nfig.tight_layout()\nfig.show()","99c5484a":"# Just get the two interesting columns\nmin_price_df = df[['1stTeachingLanguage','Min_Price']]\n\n# groupby what you want, then run numeric function on everything else\nmin_price_df = min_price_df.groupby(['1stTeachingLanguage']).mean().sort_values('Min_Price')\n\n# Plot these values\n# Setup subplots object\nfig, ax =plt.subplots(1, figsize=(15,15))\n# Set plots for each position\nax = sns.barplot(x = min_price_df.index, y = \"Min_Price\", data = min_price_df)\nax.set_xticklabels(ax.get_xticklabels(),rotation=45, horizontalalignment = 'right')\nfig.tight_layout()\nfig.show()","127cd38f":"# Filter < 10 and grab top 9\nmore_than_ten = first_lang[first_lang >10]\nmore_than_ten.iloc[:9].index.tolist()\n\ntop_nine_lang = df[df['1stTeachingLanguage'].isin(more_than_ten.iloc[:9].index.tolist())]\ntop_nine_lang","799ce161":"# Plot these values\n# Setup subplots object\nfig, ax =plt.subplots(1, figsize=(15,15))\n# Set plots for each position\nax = sns.violinplot(x = '1stTeachingLanguage', y = \"Min_Price\", data = top_nine_lang, \n                    hue = 'Teacher_Type', inner = 'stick', split=True)\n# ax = sns.swarmplot(x = '1stTeaching Language', y = \"Min_Price\", data = top_nine_lang, color = '0.25')\nax.set_xticklabels(ax.get_xticklabels(),rotation=45, horizontalalignment = 'right')\nfig.tight_layout()\nfig.show()","a56b4225":"# Arabic has negative values???\ndf[\"Min_Price\"].min()","a3d1073c":"# Let's learn more about teachers that speak multiple languages\ndf['Num_Spoken_Languages'].value_counts()","bead34a4":"# So every teacher claims to speak at least 3 languages huh????","2c8a4fe0":"# EDA"}}