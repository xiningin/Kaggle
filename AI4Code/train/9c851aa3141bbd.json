{"cell_type":{"5308ff93":"code","81844228":"code","0a3d2321":"code","ca66dcbf":"code","a42868e5":"code","ec3628a8":"code","adb9775e":"code","29a83227":"code","f0bcbc7f":"code","b269b760":"code","7475d5c4":"code","e14b729f":"code","19adcb0f":"code","06440e8a":"markdown","445bb52c":"markdown","715915e2":"markdown","babd28fd":"markdown","8d3142a5":"markdown","8a8cb727":"markdown","763e288c":"markdown","6dfbce88":"markdown","d06747fd":"markdown","18f6a871":"markdown","669c194a":"markdown","8f2f3507":"markdown","1b44bad2":"markdown","fd59dbdc":"markdown","1c35ae4d":"markdown","275da3c6":"markdown","83787b67":"markdown","f7cdce16":"markdown"},"source":{"5308ff93":"# standart data tools\nimport numpy as np\nimport pandas as pd\n\n# common visualizing tools\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# CNN layers and the Deep Learning model\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense , Flatten, Dropout\nfrom keras.optimizers import Adam\n\n# splitting tool for the validation set\nfrom sklearn.model_selection import train_test_split\n\n# to block unnecesarry warnings for updates etc.\nimport warnings\nwarnings.filterwarnings(\"ignore\")","81844228":"X = np.load(\"..\/input\/Sign-language-digits-dataset\/X.npy\")\nY = np.load(\"..\/input\/Sign-language-digits-dataset\/Y.npy\")","0a3d2321":"# Since X is a .npy I will use manual ways to figure it out.\n\nprint(\" Max value of X: \",X.max())\nprint(\" Min value of X: \",X.min())\nprint(\" Shape of X: \",X.shape)\n\nprint(\"\\n Max value of Y: \",Y.max())\nprint(\" Min value of Y: \",Y.min())\nprint(\" Shape of Y: \",Y.shape)","ca66dcbf":"plt.figure(figsize=(24,8))\n\nplt.subplot(2,5,1)\nplt.title(Y[0].argmax())\nplt.imshow(X[0])\nplt.axis(\"off\")\n\nplt.subplot(2,5,2)\nplt.title(Y[1000].argmax())\nplt.imshow(X[1000])\nplt.axis(\"off\")\n\nplt.subplot(2,5,3)\nplt.title(Y[222].argmax())\nplt.imshow(X[222])\nplt.axis(\"off\")\n\nplt.subplot(2,5,4)\nplt.title(Y[1500].argmax())\nplt.imshow(X[1500])\nplt.axis(\"off\")\n\nplt.subplot(2,5,5)\nplt.title(Y[2000].argmax())\nplt.imshow(X[2000])\nplt.axis(\"off\")\n\nplt.subplot(2,5,6)\nplt.title(Y[1200].argmax())\nplt.imshow(X[1200])\nplt.axis(\"off\")\n\nplt.subplot(2,5,7)\nplt.title(Y[1700].argmax())\nplt.imshow(X[1700])\nplt.axis(\"off\")\n\nplt.subplot(2,5,8)\nplt.title(Y[500].argmax())\nplt.imshow(X[500])\nplt.axis(\"off\")\n\nplt.subplot(2,5,9)\nplt.title(Y[700].argmax())\nplt.imshow(X[700])\nplt.axis(\"off\")\n\nplt.subplot(2,5,10)\nplt.title(Y[1400].argmax())\nplt.imshow(X[1400])\nplt.axis(\"off\")\n\nplt.suptitle(\"Example of each sign\", fontsize=20)\nplt.show()","a42868e5":"x_9 = X[:204]; x_0 = X[204:409]; x_7 = X[409:615]; x_6 = X[615:822]; x_1 = X[822:1028]; \nx_8 = X[1028:1236]; x_4 = X[1236:1443]; x_3 = X[1443:1649]; x_2 = X[1649:1855]; x_5 = X[1855:];","ec3628a8":"mean0 = x_0.mean(axis=0); mean1 = x_1.mean(axis=0); mean2 = x_2.mean(axis=0);\nmean3 = x_3.mean(axis=0); mean4 = x_4.mean(axis=0); mean5 = x_5.mean(axis=0);\nmean6 = x_6.mean(axis=0); mean7 = x_7.mean(axis=0); mean8 = x_8.mean(axis=0); mean9 = x_9.mean(axis=0);","adb9775e":"plt.figure(figsize=(24,8))\n\nplt.subplot(2,5,1)\nplt.title(\"Mean of digit 0\")\nplt.imshow(mean0)\nplt.axis(\"off\")\n\nplt.subplot(2,5,2)\nplt.title(\"Mean of digit 1\")\nplt.imshow(mean1)\nplt.axis(\"off\")\n\nplt.subplot(2,5,3)\nplt.title(\"Mean of digit 2\")\nplt.imshow(mean2)\nplt.axis(\"off\")\n\nplt.subplot(2,5,4)\nplt.title(\"Mean of digit 3\")\nplt.imshow(mean3)\nplt.axis(\"off\")\n\nplt.subplot(2,5,5)\nplt.title(\"Mean of digit 4\")\nplt.imshow(mean4)\nplt.axis(\"off\")\n\nplt.subplot(2,5,6)\nplt.title(\"Mean of digit 5\")\nplt.imshow(mean5)\nplt.axis(\"off\")\n\nplt.subplot(2,5,7)\nplt.title(\"Mean of digit 6\")\nplt.imshow(mean6)\nplt.axis(\"off\")\n\nplt.subplot(2,5,8)\nplt.title(\"Mean of digit 7\")\nplt.imshow(mean7)\nplt.axis(\"off\")\n\nplt.subplot(2,5,9)\nplt.title(\"Mean of digit 8\")\nplt.imshow(mean8)\nplt.axis(\"off\")\n\nplt.subplot(2,5,10)\nplt.title(\"Mean of digit 9\")\nplt.imshow(mean9)\nplt.axis(\"off\")\n\nplt.suptitle(\"Mean of each sign\", fontsize=20)\nplt.show()","29a83227":"x_train, x_test, y_train, y_test = train_test_split(X,Y,test_size=0.2,random_state=42)\nx_train = x_train.reshape(-1,64,64,1)\nx_test = x_test.reshape(-1,64,64,1)","f0bcbc7f":"CNN_model = Sequential()\n\nCNN_model.add(Conv2D(filters=16,kernel_size=(5,5),activation=\"relu\",padding=\"same\",input_shape=(64,64,1)))\nCNN_model.add(Conv2D(filters=32,kernel_size=(5,5),activation=\"relu\",padding=\"same\"))\nCNN_model.add(MaxPooling2D(pool_size=(2,2),padding=\"same\"))\n\nCNN_model.add(Conv2D(filters=32,kernel_size=(4,4),activation=\"relu\",padding=\"same\"))\nCNN_model.add(Conv2D(filters=32,kernel_size=(4,4),activation=\"relu\",padding=\"same\"))\nCNN_model.add(MaxPooling2D(pool_size=(2,2),padding=\"same\"))\n\nCNN_model.add(Dropout(0.2))\n\nCNN_model.add(Conv2D(filters=32,kernel_size=(3,3),activation=\"relu\",padding=\"same\"))\nCNN_model.add(Conv2D(filters=64,kernel_size=(3,3),activation=\"relu\",padding=\"same\"))\nCNN_model.add(MaxPooling2D(pool_size=(2,2),padding=\"same\"))\n\nCNN_model.add(Dropout(0.2))\n\nCNN_model.add(Conv2D(filters=32,kernel_size=(2,2),activation=\"relu\",padding=\"same\"))\nCNN_model.add(MaxPooling2D(pool_size=(2,2),padding=\"same\"))\n\nCNN_model.add(Dropout(0.2))\n\nCNN_model.add(Flatten())\n\nCNN_model.add(Dense(128,activation=\"relu\"))\nCNN_model.add(Dense(64,activation=\"relu\"))\nCNN_model.add(Dense(40,activation=\"relu\"))\n\nCNN_model.add(Dense(10,activation=\"softmax\"))","b269b760":"CNN_model.summary()","7475d5c4":"CNN_model.compile(optimizer=Adam(lr=0.0002),loss=keras.losses.categorical_crossentropy,metrics=[\"accuracy\"])","e14b729f":"results = CNN_model.fit(x_train,y_train,epochs=70,validation_data=(x_test,y_test))","19adcb0f":"plt.figure(figsize=(24,8))\n\nplt.subplot(1,2,1)\nplt.plot(results.history[\"val_acc\"],label=\"validation_accuracy\",c=\"red\",linewidth=4)\nplt.plot(results.history[\"acc\"],label=\"training_accuracy\",c=\"green\",linewidth=4)\nplt.legend()\nplt.grid(True)\n\nplt.subplot(1,2,2)\nplt.plot(results.history[\"val_loss\"],label=\"validation_loss\",c=\"red\",linewidth=4)\nplt.plot(results.history[\"loss\"],label=\"training_loss\",c=\"green\",linewidth=4)\nplt.legend()\nplt.grid(True)\n\nplt.suptitle(\"ACC \/ LOSS\",fontsize=18)\n\nplt.show()","06440e8a":"### ** Importing libraries **","445bb52c":"### **Dividing each class to visualize**","715915e2":"Yes You didn^t read it wrong, the dataset is designed this way (digits do not correctly map in our order). \n\nOwner of the dataset **Mr. Arda** describes this situation with the comment on the discussions ** \"... I want to create dinamic architecture...\" ** . \n\nSo I will stick to the **Dynamic architecture** and don't re-locate anything on training","babd28fd":"Above it's easy to see there are some visible characteristic differences between pictures( e.g. 5 vs 0 ) . which is what I want since it's a classification problem.","8d3142a5":"### **Plotting each classes of image**","8a8cb727":"Above I see that Y (labels) are already one-hot-encoded. Which is very toughful, respects to the Dataset owner.\n\nAlso, the X (features) are already Scaled between 0 and 1. Which will help my model to train better","763e288c":"# Intro\n### **Success Plan**\nLoading, Exploring, Visualizing the Sign Language digits datasets.\nThen, Training a Convolutional Neural Network on the dataset and tyring to get considerably High Accuracy. (90%++) ","6dfbce88":"### ** Plotting the results **","d06747fd":"### ** Training **","18f6a871":"### ** Plotting the average of each class **","669c194a":"### ** Summary of the model **","8f2f3507":"### ** Getting mean of each digits to have an idea **","1b44bad2":"### **Loading the NumPy datasets**","fd59dbdc":"### ** Splitting train and test **","1c35ae4d":"## ** Creating the CNN model **","275da3c6":"### ** Compilation **","83787b67":"## ** Conclusion **\n\nI think the accuracies I achive both on training and the validation are very acceptable, but can be improved.\n\nThanks for reading, if you find it useful be sure to upvote :)","f7cdce16":"### ** Exploring the X and Y **"}}