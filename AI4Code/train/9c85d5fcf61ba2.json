{"cell_type":{"e0074f55":"code","e8ebb3d9":"code","8b9ba395":"code","1d48a8a0":"code","d32e5df5":"code","dee0f8e0":"code","587bc7d6":"code","bec5e55d":"code","824bc8bb":"code","78a4882c":"code","8b0d5da1":"code","f7d4eda5":"code","f3706a9d":"code","f7fec485":"code","66720607":"code","5cefc613":"code","4d5f903c":"code","64a7ae16":"code","60692d2f":"code","3e2d8037":"code","44d33e9f":"code","b36d9f79":"code","fbe69dd4":"code","0430d83a":"code","f5680c73":"code","934ec965":"code","be915b48":"code","09b8aa6f":"code","dbc624e4":"code","1791e8dc":"code","dc0b7ab1":"code","23e31203":"code","3264fa33":"code","bf56a6c7":"code","640875ff":"code","20a44644":"code","46bb7b1a":"code","0f670ca3":"code","40d68289":"code","4dcbed97":"code","0c5a2953":"code","e990b48d":"code","97582c2a":"markdown","f26f3df3":"markdown","d79e9f9d":"markdown","1af289e3":"markdown","93c0097d":"markdown","6fe1b147":"markdown","4a6147c9":"markdown","a04e79bb":"markdown","fe243a5c":"markdown","18ba0e53":"markdown","9f6a1f03":"markdown","8653d41c":"markdown","0ded2656":"markdown","35dcc8e2":"markdown","5960447a":"markdown","62d4d688":"markdown","6e34e30a":"markdown","aa77350d":"markdown","1a0d2cc4":"markdown","64336127":"markdown","85680550":"markdown","12dc98d7":"markdown","40820352":"markdown","a5e917c1":"markdown"},"source":{"e0074f55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom fbprophet import Prophet\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nimport warnings\nwarnings.filterwarnings('ignore')\nnp.random.seed(42)\n!pip install pmdarima\nimport pmdarima as pm\n!pip install bubbly\n!pip install opencage\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8ebb3d9":"df = pd.read_csv('\/kaggle\/input\/daily-temperature-of-major-cities\/city_temperature.csv')","8b9ba395":"df.shape","1d48a8a0":"df.head()","d32e5df5":"df.columns","dee0f8e0":"df.describe()","587bc7d6":"df['AvgTemperature'].value_counts()","bec5e55d":"print(df['AvgTemperature'].min())\nprint(df['AvgTemperature'].max())","824bc8bb":"df = df[df['AvgTemperature']>-99.0] ","78a4882c":"sns.distplot(df['AvgTemperature'])","8b0d5da1":"df['Region'].unique()","f7d4eda5":"len(df['Region'].unique())","f3706a9d":"df['State'].value_counts().plot(kind= 'bar',figsize = (15,7))","f7fec485":"df['State'].isna().sum()","66720607":"(df['State'].isna().sum() \/ df['State'].shape[0])*100","5cefc613":"len(df['City'].unique())","4d5f903c":"df.groupby('Region')['City'].nunique().plot(kind = 'bar')","64a7ae16":"df['Date'] = df['Day'].astype(str)+ \"-\" + df['Month'].astype(str) + \"-\" + df['Year'].astype(str)","60692d2f":"df['Date'] = pd.to_datetime(df['Date'])","3e2d8037":"df.groupby('Year')['AvgTemperature'].mean().plot(figsize = (15,7))","44d33e9f":"yearly_region_data = df.groupby(['Region', 'Year']).mean().reset_index()\nyearly_region_data","b36d9f79":"import plotly.express as px\nfig = px.scatter(yearly_region_data, x=\"Year\", y=\"AvgTemperature\", color=\"Region\")\nfig.show()","fbe69dd4":"from bubbly.bubbly import bubbleplot \nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\nfigure = bubbleplot(dataset=yearly_region_data, x_column='Year', y_column='AvgTemperature', \n    bubble_column='Region', time_column='Year', color_column='Region', \n    x_title=\"Year\", y_title=\"Average Temperature\", title='Avg Temperature over the years across Regions',\n    scale_bubble=2.5, height=650)\n\niplot(figure, config={'scrollzoom': True})","0430d83a":"plt.subplots(figsize=(15, 6))\nsns.lineplot(x = 'Year', y = 'AvgTemperature', hue = 'Region', data = yearly_region_data)\nplt.xticks(rotation = 90)\nplt.legend()\nplt.title('Temperature changes across regions from 1995-2020.')\nplt.show()","f5680c73":"df.boxplot(column='AvgTemperature', by='Region',figsize = (15,7))","934ec965":"df.groupby(['Region'])['AvgTemperature'].mean().plot(kind='bar',figsize=(17,7))","be915b48":"month_region_data = df.groupby(['Month', 'Year']).mean().reset_index().drop(columns = ['Year', 'Day'])","09b8aa6f":"print(df['Date'].min())\nprint(df['Date'].max())","dbc624e4":"df['Year'].value_counts().plot(kind = 'bar',figsize=(17,7))","1791e8dc":"data = df[df['Date'].astype(str) < '2020-10-00 00:00:00']","dc0b7ab1":"from opencage.geocoder import OpenCageGeocode","23e31203":"key = '737b68f4ab6741308ac6cb4b0d35ee8e'\ngeocoder = OpenCageGeocode(key)","3264fa33":"cities = data.groupby('City')['AvgTemperature'].mean().reset_index()","bf56a6c7":"Latitude = []\nLongitude = []\nfor i in list(cities['City']):\n    #print(i)\n    try:\n        result = geocoder.geocode(i, no_annotations=1, language='es')\n        Latitude.append(list(result[0].get('geometry').values())[0])\n        Longitude.append(list(result[0].get('geometry').values())[1])\n    except:\n        Latitude.append(-34.901112)\n        Longitude.append(-56.164532)","640875ff":"cities['Latitude'] = Latitude\ncities['Longitude'] = Longitude","20a44644":"cities","46bb7b1a":"import folium \nimport webbrowser","0f670ca3":"latitude = 37.0902\nlongitude = -95.7129\nmaps = folium.Map(location=[latitude, longitude], zoom_start=5)","40d68289":"for lat, lon, temp, city in zip(cities['Latitude'], cities['Longitude'], cities['AvgTemperature'], cities['City']):\n    folium.CircleMarker(\n        [lat, lon],\n        radius=0.1*temp,\n        popup = ('City: ' + str(city).capitalize() + '<br>'\n                 'Temerature: ' + str(temp) + '<br>'\n                 +'%'\n                ),\n        color='b',\n        key_on = city,\n        threshold_scale=[0,1,2,3],\n        fill=True,\n        fill_opacity=0.7\n        ).add_to(maps)\n\nmaps\n","4dcbed97":"from fbprophet import Prophet\nfrom fbprophet.plot import plot_yearly","0c5a2953":"for region in list(set(df['City'])):\n    temp = df[df['City'] == region]\n    temp = temp.sort_values('Date')\n    print(temp[['Date','AvgTemperature']])\n    plt.plot(temp['Date'],temp['AvgTemperature'])\n    plt.show()\n    temp.rename(columns = {'Date':'ds','AvgTemperature':'y'},inplace = True)\n    model = Prophet()\n    \n    m = Prophet().fit(temp)\n    a = plot_yearly(m)\n            \n    model.fit(temp[['ds','y']])\n    future = model.make_future_dataframe(periods=100,freq='D')\n    forecast = model.predict(future)\n    model.plot(forecast)\n    \n    break","e990b48d":"for region in list(set(df['City'])):\n    temp = df[df['City'] == region]\n    temp = temp.sort_values('Date')\n    print(temp[['Date','AvgTemperature']])\n    ARIMA_model = pm.auto_arima(temp['AvgTemperature'], start_p=1, d= None , start_q=1, max_p=6, max_d=6, max_q=6, start_P=0,D = 1, start_Q=0, max_P=5,\n                             max_D=5, max_Q=0, max_order=None, m=12, seasonal=True, stationary=False, information_criterion='bic', alpha=0.01, test='kpss', \n                              seasonal_test='ch', stepwise=True, n_jobs=1)\n    break\nARIMA_model.summary()\nforecast = ARIMA_model.predict(n_periods=12)\nforecast_start = '2021-01-01'\nforecast_end = '2021-12-01'\nmonth_list = [i.strftime(\"%Y-%m-%d\") for i in pd.date_range(start=forecast_start, end=forecast_end, freq='MS')]\ndf_forecast = pd.DataFrame()\ndf_forecast['Date'] = month_list\ndf_forecast['Forecasted_Temperature'] = forecast","97582c2a":"# Lets see about state","f26f3df3":"Temperature is in Celcius","d79e9f9d":"Data Shape","1af289e3":"# Auto ARIMA - Try","93c0097d":"Total 7 continents","6fe1b147":"Europe maintains temperature between 50 and 52","4a6147c9":"To include 2020 or not ?","a04e79bb":"# Data Vizualizations","fe243a5c":"Data description","18ba0e53":"# Oultier analysis","9f6a1f03":"We could see many temperatures in 2020 and too in december, November months ( We can use this for forecasting if needed )","8653d41c":"Read Data","0ded2656":"# Date Column","35dcc8e2":"This proves that we have -99 value which can be removed","5960447a":"New column Date is created from the three columns","62d4d688":"More number of cities are considered at North america","6e34e30a":"Data ( Top 5 values )","aa77350d":"Available columns","1a0d2cc4":"The sudden dip in 2020 is because we dont have enough values in 2020","64336127":"# Lets see about regions","85680550":"Avg Temperature = has -99 as a temperature value which can be removed","12dc98d7":"Column names are self explanatory","40820352":"# Lets see about Cities","a5e917c1":"48% of values are null"}}