{"cell_type":{"954f2860":"code","71660526":"code","2d4ba219":"code","147b9c4a":"code","46ffc929":"code","ab002344":"code","3c4d3c2a":"code","39af3eb5":"code","636cc35e":"code","683be53f":"code","82747dbf":"code","5f4b701d":"code","2364508a":"code","3e5279ce":"code","e5a0e6ba":"code","ba949517":"code","dbd1596d":"code","c6995266":"code","d89faea1":"code","21adc5e8":"code","3c8d4592":"code","29d6d12e":"code","e3148ab6":"code","e7ac1a87":"code","e00ded5a":"code","e26470d0":"code","d2572408":"code","d3bef20b":"code","29899059":"code","13c86662":"code","826c652c":"code","8d547755":"code","ccdac3fa":"code","2e588dde":"code","b4a7acfc":"code","c2dfa253":"code","330a5808":"code","24ab88ce":"code","5489f4f3":"code","65988432":"code","6aac0b3c":"code","b5eb76c6":"code","f4baadc2":"code","7bb167b3":"markdown","8a4dcb58":"markdown","e59a0023":"markdown","e4d80f60":"markdown","f9c5bda7":"markdown","22fb3e5e":"markdown","2be6a561":"markdown","5558f7f6":"markdown","ad3de5c9":"markdown","b2222e54":"markdown","55dbb934":"markdown"},"source":{"954f2860":"#Importing relevant libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #plotting\nimport seaborn as sns #prettier Plotting\nimport plotly.express as px # Do explore it!\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import f1_score\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","71660526":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col = 'PassengerId')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', index_col = 'PassengerId')\n\nprint('Train dataset has {} rows and {} columns'.format(train.shape[0], train.shape[1]))\nprint('Test dataset has {} rows and {} columns'.format(test.shape[0], test.shape[1]))","2d4ba219":"print('Training Data:')\ndisplay(train.head(8).T)\nprint('*'*200)\nprint('Testing Data:')\ndisplay(test.head(8).T)","147b9c4a":"train.describe(include = 'all').T","46ffc929":"# Check for any missing values\nprint('Missing values in training data :', train.isnull().sum() )\nprint('*'*50)\nprint('Missing values in training data :', test.isnull().sum() )","ab002344":"print('Percentage of Mising values in Cabin:', train['Cabin'].isnull().sum()\/len(train) )\nprint('*'*50)\nprint('Percentage of Mising values in Age:', train['Age'].isnull().sum()\/len(train) )\nprint('*'*50)\nprint('Percentage of Mising values in Embark:', train['Embarked'].isnull().sum()\/len(train) )","3c4d3c2a":"fig , ax = plt.subplots(2,1,figsize = (15,15))\n\nsns.boxplot(x = 'Pclass', y = 'Age',data = train, ax = ax[0])\nsns.boxplot(x = 'Pclass', y = 'Age',data = test, ax= ax[1])","39af3eb5":"def impute_age(df, strategy = 'mean', stratified = True):\n    '''\n    df = Pandas Dataset\n    strategy = 'mean', 'median'\n    stratified  = Boolean (based on Pclass)\n    '''\n    if stratified == False:\n        \n        if strategy == 'mean':\n            print('Mean age :', df['Age'].mean())\n            df['Age'] = df['Age'].fillna(df['Age'].mean())\n            \n            return df\n            \n        elif strategy == 'median':\n            print('Mean age :', df['Age'].median())\n            df['Age'] = df['Age'].fillna(df['Age'].median())\n            \n            return df\n            \n        else:\n            raise Exception(\"Invalid Type of strategy. Select either 'mean' or 'median'\")\n            \n    if stratified == True:\n        \n        if strategy == 'mean':\n            print('Mean age for first class :', df[df['Pclass'] == 1]['Age'].mean())\n            print('Mean age for second class :', df[df['Pclass'] == 2]['Age'].mean())\n            print('Mean age for third class :', df[df['Pclass'] == 3]['Age'].mean())\n            \n            df.loc[df['Pclass'] == 1,'Age'] = df.loc[df['Pclass'] == 1,'Age'].fillna(df[df['Pclass'] == 1]['Age'].mean())\n            df.loc[df['Pclass'] == 2,'Age'] = df.loc[df['Pclass'] == 2,'Age'].fillna(df[df['Pclass'] == 2]['Age'].mean())\n            df.loc[df['Pclass'] == 3,'Age'] = df.loc[df['Pclass'] == 3,'Age'].fillna(df[df['Pclass'] == 3]['Age'].mean())\n            \n            return df\n            \n            \n        elif strategy == 'median':\n            print('Median age for first class :', df[df['Pclass'] == 1]['Age'].median())\n            print('Median age for second class :', df[df['Pclass'] == 2]['Age'].median())\n            print('Median age for third class :', df[df['Pclass'] == 3]['Age'].median())\n            \n            df.loc[df['Pclass'] == 1,'Age'] = df.loc[df['Pclass'] == 1,'Age'].fillna(df[df['Pclass'] == 1]['Age'].median())\n            df.loc[df['Pclass'] == 2,'Age'] = df.loc[df['Pclass'] == 2,'Age'].fillna(df[df['Pclass'] == 2]['Age'].median())\n            df.loc[df['Pclass'] == 3,'Age'] = df.loc[df['Pclass'] == 3,'Age'].fillna(df[df['Pclass'] == 3]['Age'].median())\n            \n            return df\n            \n        else:\n            raise Exception(\"Invalid Type of strategy. Select either 'mean' or 'median'\")            \n","636cc35e":"train= impute_age(train, strategy = 'median')\ntest= impute_age(test, strategy = 'median')","683be53f":"train['Embarked'].value_counts()","82747dbf":"# Imputed the missing value with most frequent \ntrain['Embarked'] = train['Embarked'].fillna('S')\n\ntrain = train.drop('Cabin', axis = 1)\ntest = test.drop('Cabin', axis = 1)","5f4b701d":"# Lets begin with correlation of different features\nfeature_corr = train.corr()\nfeature_corr\n\nfig , ax = plt.subplots(figsize = (10,10))\nsns.heatmap(feature_corr, annot = True)","2364508a":"s = train.groupby('Survived').size().reset_index()\ns.columns = ['Survived', 'Count']\n\nfig = px.pie(s, values='Count', names='Survived', title='Distribution of people survived')\nfig.show()","3e5279ce":"def age_grouping(df):\n    df['ageGroup'] = np.nan\n    df.loc[df['Age'] <= 12, 'ageGroup'] = 'child'\n    df.loc[(df['Age'] > 12) & (df['Age'] <= 19), 'ageGroup'] = 'teen'\n    df.loc[(df['Age'] > 19) & (df['Age'] <= 45), 'ageGroup'] = 'adults'\n    df.loc[(df['Age'] > 45) & (df['Age'] <= 60), 'ageGroup'] = 'midAgedAdults'\n    df.loc[df['Age'] > 60, 'ageGroup'] = 'old'\n    \n    return df","e5a0e6ba":"train = age_grouping(train)\ntest = age_grouping(test)\n\na = train.groupby('ageGroup').size().reset_index()\na.columns = ['Group', 'Count']\n\nsa = train.loc[train['Survived'] == 1].groupby('ageGroup').size().reset_index()\nsa.columns = ['Group', 'Count']","ba949517":"fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=a.Group.values, values=a.Count.values, name=\"Age Group\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=sa.Group.values, values=sa.Count.values, name=\"Survivor Age Group\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole = 0.4, textinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"Passenger Age Group Titanic\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Passengers', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Survivors', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig.show()","dbd1596d":"fig , ax = plt.subplots(3,1,figsize = (15,20))\n\n\nsns.countplot(x ='ageGroup', data = train, color = '#F5FF29', ax = ax[0] , label = 'Age Group')\nsns.countplot(x ='ageGroup', data = train.loc[train['Survived'] == 1], color = '#FF7E0C', ax = ax[0], label = 'Survived' )\nax[0].set_title('Distribution of people as per Age Group')\nax[0].set_xlabel('Age Group')\nax[0].set_ylabel('No. of People')\nax[0].legend()\n\nfor p in ax[0].patches:\n        ax[0].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.4, p.get_height()+20),ha='center', va='top', color='black', size=14)\n        \n\nsns.countplot(x = 'ageGroup', data = train, hue = 'Sex', ax = ax[1])\nax[1].set_title('Distribution of Gender as per Age Group')\nax[1].set_xlabel('Age Group')\nax[1].set_ylabel('No. of People')       \n        \nfor p in ax[1].patches:\n        ax[1].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.2, p.get_height()+16),ha='center', va='top', color='black', size=14)\n        \n\nsns.countplot(x = 'ageGroup', data = train, hue = 'Pclass', ax = ax[2])\nax[2].set_title('Distribution of Class as per Age Group')\nax[2].set_xlabel('Age Group')\nax[2].set_ylabel('No. of People')       \n        \nfor p in ax[2].patches:\n        ax[2].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.15, p.get_height()+16),ha='center', va='top', color='black', size=14)","c6995266":"f, ax = plt.subplots(3,1,figsize = (20,20))\n\nsns.countplot(x = 'Sex', data = train, hue = 'Survived', ax = ax[0])\nax[0].set_title('Distribution of Survivors per Gender')\nax[0].set_xlabel('Gender')\nax[0].set_ylabel('No. of People')\nfor p in ax[0].patches:\n        ax[0].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.2, p.get_height()+18),ha='center', va='top', color='black', size=14)\n        \n\nsns.countplot(x = 'Sex', data = train, hue = 'Pclass', ax = ax[1])\nsns.countplot(x = 'Sex', data = train.loc[train['Survived'] == 1], color = '#2C1DFF', hue = 'Pclass', ax = ax[1])\nax[1].set_title('Distribution of Survivors by Gender from each Passensger Class')\nax[1].set_xlabel('Passensger Class')\nax[1].set_ylabel('No. of People')\nfor p in ax[1].patches:\n        ax[1].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.15, p.get_height()+14),ha='center', va='top', color='black', size=14)\n\n        \nsns.countplot(x = 'ageGroup', data = train, hue = 'Sex', ax = ax[2])\nax[2].set_title('Distribution of Gender in each Age Group')\nax[2].set_xlabel('Age Group')\nax[2].set_ylabel('No. of People')\nfor p in ax[2].patches:\n        ax[2].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.2, p.get_height()+15),ha='center', va='top', color='black', size=14) ","d89faea1":"f, ax = plt.subplots(4,1,figsize = (20,30))\n\n# FF7E0C(Orange), F5FF29(yellow)\nsns.countplot(x = 'Embarked', data = train, ax = ax[0])\nax[0].set_title('Distribution of boarding ship from different Ports')\nax[0].set_xlabel('Ports')\nax[0].set_ylabel('No. of People')\nax[0].set_xticklabels(( 'Southampton','Cherbourg', 'Queenstown'))\nfor p in ax[0].patches:\n        ax[0].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.4, p.get_height()+24),ha='center', va='top', color='black', size=14)\n        \n        \nsns.countplot(x = 'Embarked', data = train, hue = 'Survived', ax = ax[1])\nax[1].set_title('Distribution of people surviving from different Ports')\nax[1].set_xlabel('Ports')\nax[1].set_ylabel('No. of People')\nax[1].set_xticklabels(( 'Southampton','Cherbourg', 'Queenstown'))\nfor p in ax[1].patches:\n        ax[1].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.2, p.get_height()+18),ha='center', va='top', color='black', size=14)\n        \n\nsns.countplot(x = 'Embarked', data = train, hue = 'ageGroup', ax = ax[2])\nax[2].set_title('Distribution of people from different Age groups boarding from Ports')\nax[2].set_xlabel('Ports')\nax[2].set_ylabel('No. of People')\nax[2].set_xticklabels(( 'Southampton','Cherbourg', 'Queenstown'))\nfor p in ax[2].patches:\n        ax[2].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.08, p.get_height()+18),ha='center', va='top', color='black', size=14)\n        \nsns.countplot(x = 'Embarked', data = train, hue = 'Pclass', ax = ax[3])\nax[3].set_title('Distribution of people boarding to differents Passensger Class from Ports')\nax[3].set_xlabel('Ports')\nax[3].set_ylabel('No. of People')\nax[3].set_xticklabels(( 'Southampton','Cherbourg', 'Queenstown'))\nfor p in ax[3].patches:\n        ax[3].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.15, p.get_height()+14),ha='center', va='top', color='black', size=14)","21adc5e8":"f, ax = plt.subplots(2,1,figsize = (20,15))\n\n# FF7E0C(Orange), F5FF29(yellow)\nsns.countplot(x = 'Pclass', data = train, ax = ax[0])\nax[0].set_title('Distribution of People boarding in different Passenger class')\nax[0].set_xlabel('Passensger Class')\nax[0].set_ylabel('No. of People')\nfor p in ax[0].patches:\n        ax[0].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.4, p.get_height()+20),ha='center', va='top', color='black', size=14)\n        \n        \nsns.countplot(x = 'Pclass', data = train, hue = 'Survived', ax = ax[1])\nax[1].set_title('Distribution of Survivors boarding in different Passenger class')\nax[1].set_xlabel('Passensger Class')\nax[1].set_ylabel('No. of People')\nfor p in ax[1].patches:\n        ax[1].annotate('{:.2f}%'.format(p.get_height()\/len(train)*100), (p.get_x()+0.2, p.get_height()+16),ha='center', va='top', color='black', size=14)\n        ","3c8d4592":"# Deducing if the passenger is t\n\ntrain['familySize'] = train['SibSp'] + train['Parch'] + 1 #1 is person himself\/herself\ntest['familySize'] = test['SibSp'] + test['Parch'] + 1","29d6d12e":"train.loc[train['familySize'] == 1, 'is_alone'] = 1\ntrain.loc[train['familySize'] > 1, 'is_alone'] = 0\n\ntest.loc[test['familySize'] == 1, 'is_alone'] = 1\ntest.loc[test['familySize'] > 1, 'is_alone'] = 0","e3148ab6":"a = train.groupby(['is_alone', 'Sex']).size().reset_index()\na.columns = ['Alone', 'Sex','Count']\na.loc[a['Alone'] == 1, 'Alone'] = 'Yes'\na.loc[a['Alone'] == 0, 'Alone'] = 'No'\na\n","e7ac1a87":"fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=a.Alone.values, values=a.Count.values, name=\"Alone?\"),\n              1, 1)\n\na.loc[a['Alone']==1]\nfig.add_trace(go.Pie(labels=a.Sex.values, values=a.Count.values, name=\"Solo Traveller\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole = 0.4, textinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"People travelling with Companions\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Is Alone?', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Lone Gender?', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig.show()","e00ded5a":"a = train.groupby('familySize').size().reset_index()\na.columns = ['familySize', 'Count']\n\nfig = px.pie(a, values='Count', names='familySize', title = 'Family size of Passensgers')\n\nfig.show()\n","e26470d0":"def title_extract(data):\n    \n    # Extracting titles from Names\n    data['title'] = data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n    data['title'] = data['title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    data['title'] = data['title'].replace('Mlle', 'Miss')\n    data['title'] = data['title'].replace('Ms', 'Miss')\n    data['title'] = data['title'].replace('Mme', 'Mrs')   \n        \n    return data\n\ndef encode_cols(data):\n    #     Encoding the data\n    data['Sex'] = data['Sex'].map({'female' : 1, 'male':2})\n    data['Embarked'] = data['Embarked'].map({'C': 1, 'Q':2 , 'S':3})\n    data['title'] = data['title'].map({'Mr':1, 'Mrs':2, 'Miss':3, 'Master':4, 'Rare':5})\n    data['ageGroup'] = data['ageGroup'].map({'child':1, 'teen':2, 'adults':3, 'midAgedAdults':4, 'old':5})\n    \n    return data","d2572408":"train = title_extract(train)\ntest = title_extract(test)","d3bef20b":"a = train.groupby(['title', 'Survived']).size().reset_index()\na.columns = ['title', 'Survived', 'Count']\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=a.title.values, values=a.Count.values, name=\"Title\"),\n              1, 1)\n\na.loc[a['Survived']==1]\nfig.add_trace(go.Pie(labels=a.title.values, values=a.Count.values, name=\"Survivor Title\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole = 0.4, textinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"Title of the Passensgers\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Title', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Survivor', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig.show()","29899059":"train = encode_cols(train)\ntest = encode_cols(test)","13c86662":"train = train.drop(['Name', 'Ticket', 'Fare'], axis = 1)\ntest = test.drop(['Name', 'Ticket', 'Fare'], axis = 1)","826c652c":"label = train.pop('Survived')","8d547755":"from sklearn.model_selection import GridSearchCV","ccdac3fa":"#initially for Logistic Regression, random Forest  and SVM\ndef gridsearch(data, label, clf, param_grid, scoring = 'f1'):\n    \n    grid = GridSearchCV(clf, param_grid, n_jobs = -1, cv = 10, verbose = 2).fit(data, label)\n    \n    print('The best estimator :', grid.best_estimator_)\n    print('Best Training Score ({}):'.format(scoring),grid.best_score_)\n    \n    return grid.best_estimator_","2e588dde":"paraLR = {'penalty':['l1', 'l2'], 'intercept_scaling':[1,3,5,7,9], 'max_iter':[100,250,500,750,1000]}\n\nLR = gridsearch(train, label, LogisticRegression(solver='liblinear'), paraLR)","b4a7acfc":"pred = pd.DataFrame(LR.predict(test))\npred.index = test.index\npred.columns = ['Survived']\npred.to_csv('lr.csv')","c2dfa253":"X_train, X_test, y_train, y_test = train_test_split(train, label, test_size = 0.2, stratify = label)","330a5808":"lr = LogisticRegression(solver='liblinear').fit(X_train, y_train) \nvalid = lr.predict(X_test)","24ab88ce":"f1_score(y_test, valid)","5489f4f3":"pred = pd.DataFrame(lr.predict(test))\npred.index = test.index\npred.columns = ['Survived']\npred.to_csv('lr.csv')","65988432":"rf = RandomForestClassifier().fit(X_train, y_train)\nvalid = rf.predict(X_test)\n\nf1_score(y_test, valid)","6aac0b3c":"pred = pd.DataFrame(rf.predict(test))\npred.index = test.index\npred.columns = ['Survived']\npred.to_csv('rf.csv')","b5eb76c6":"svc = SVC().fit(X_train, y_train)\nvalid = svc.predict(X_test)\n\nf1_score(y_test, valid)","f4baadc2":"pred = pd.DataFrame(svc.predict(test))\npred.index = test.index\npred.columns = ['Survived']\npred.to_csv('svc.csv')","7bb167b3":"## Loading Data","8a4dcb58":"## Dealing with Missing Values","e59a0023":"# Titanic Dataset\n\nTitanic Competition is ususally the first competition an aspiring data scientist compete in. The dataset contains details for all the passengers who boarded Titanic on its maiden voyage in 1912.with label whether they survived or not. \n\nThe data \nSince, this is my first notebook being published. Any constructive critism is welcomed.","e4d80f60":"Lets check out some stats from port of embarkment","f9c5bda7":"As we saw above that 'Cabin' has 77% data points missing. Hence, I will drop it since imputing it might introduce bias in the data.\n\n\nAs for missing data in Age we can impute it in two ways:\n- **Mean\/median of whole data** : We can impute the missing values by taking average of all the passengers. \n\n- **Mean\/median based on Pclass** : Imputing the values based on class a passenger travelling. This might be better when imputing because first class might have older population, than third class which also contained crew members since they are younger . ","22fb3e5e":"Its interesting to see that 41% of passengers are adults belonging to third class. Proving our hypothesis proposed in imputation as True.","2be6a561":"spliting the passenger into different age groups. ","5558f7f6":"We further explore how do different factors affect your changes of survival.","ad3de5c9":"## Exploratory Data Analysis","b2222e54":"Previously we have achieved:\nLR = 77\nRF = 72\nSVM = 67\n\nNow we will use Grid Search CV for training the model","55dbb934":"Now, we Deduce if the person is travelling alone or with family"}}