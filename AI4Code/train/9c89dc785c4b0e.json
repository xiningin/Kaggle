{"cell_type":{"0bcf353f":"code","6b775e8c":"code","04a0dd88":"code","2ed60985":"code","0a465451":"code","5398a44d":"code","cd38a62c":"code","10cb8b70":"code","ee71fece":"code","e1b8400b":"code","5c698402":"code","f4f0254d":"code","3cc1db66":"code","bcd0188c":"code","e4318fbb":"code","f7c35499":"code","a5204b8f":"code","b01db357":"code","ede37dc2":"code","8d953797":"code","9d03d0e9":"code","ef847023":"code","eeb6b3b8":"code","8cc797f4":"code","934de6f4":"code","5677bb16":"markdown","cb0b5281":"markdown"},"source":{"0bcf353f":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom lightgbm import LGBMClassifier\nimport seaborn as sns","6b775e8c":"train_path = \"..\/input\/data-science-spring-osaka-2021\"","04a0dd88":"df_train = pd.read_csv(\"..\/input\/data-science-spring-osaka-2021\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/data-science-spring-osaka-2021\/test.csv\")\ndf_action = pd.read_csv(\"..\/input\/data-science-spring-osaka-2021\/actions.csv\")","2ed60985":"action_ = df_action[\"action_seq\"].unique()\ntrain_action = df_train[\"action_seq\"].unique()\nprint(action_)\nprint(train_action)","0a465451":"unseen_label = set(train_action) ^ set(action_)\nunseen_label # unseen label ","5398a44d":"j_j_bu = df_train[df_train[\"action_seq\"] == \"jab-jab-bodyupper\"][\"file_path\"]\nj_j_u = df_train[df_train[\"action_seq\"] == \"jab-jab-upper\"][\"file_path\"]","cd38a62c":"#\u305d\u308c\u305e\u308c\u5e73\u5747\u3092\u3068\u308b\u95a2\u6570\nscaler = MinMaxScaler()\ndef join_data(file_paths):\n    df_ = pd.DataFrame()\n    for file_path in file_paths:\n        df_temp = pd.read_csv(train_path + file_path)\n        df_ = pd.concat([df_, df_temp])\n    return df_.reset_index(drop=True)","10cb8b70":"df_jjbu = join_data(j_j_bu)\ndf_jju = join_data(j_j_u)","ee71fece":"df_jju[\"ELBOW_L\"].plot(figsize=(15,6))#\u306a\u3093\u3068\u306a\u304f\u5468\u671f\u7684","e1b8400b":"diff = df_jjbu.mean() - df_jju.mean()\ndiff","5c698402":"j_j_h = df_train[df_train[\"action_seq\"] == \"jab-jab-hook\"][\"file_path\"]\nlen(j_j_h)","f4f0254d":"df = pd.DataFrame()\nfor file_path in j_j_h:\n    df_temp = pd.read_csv(train_path + file_path)\n    df_ = pd.DataFrame(df_temp.mean() + diff)\n    df = pd.concat([df,df_.T])","3cc1db66":"df.columns = [col+'_mean' for col in df.columns] \ndf[\"action_seq\"] = \"jab-jab-bodyhook\"\ndf","bcd0188c":"def add_mean_as_feature(df):\n    df_temp = pd.DataFrame()\n    for path in df.file_path:\n        df_sensor = pd.read_csv('..\/input\/data-science-spring-osaka-2021'+path)\n        df_sensor = pd.DataFrame(df_sensor.mean()).T # \u5e73\u5747\u5024\u3092\u96c6\u8a08\n        df_temp = pd.concat([df_temp, df_sensor])\n    df_temp.columns = [col+'_mean' for col in df_temp.columns] # \u30ab\u30e9\u30e0\u540d\u306b\u5e73\u5747\u3092\u3068\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u308b\u3088\u3046\u306b\u672b\u5c3e\u306b'_mean'\u3092\u4ed8\u8a18\n    df_temp.index = df.index\n    df = pd.concat([df, df_temp], axis=1)\n    return df","e4318fbb":"# \u4e0a\u8a18\u51e6\u7406\u3092\u9069\u7528\u3057\u307e\u3059\ndf_train = add_mean_as_feature(df_train)\ndf_test = add_mean_as_feature(df_test)","f7c35499":"df_train = pd.concat([df,df_train])\ndf_train","a5204b8f":"df_train[\"action_seq\"].unique()","b01db357":"# \u7279\u5fb4\u91cf\uff08=\u8aac\u660e\u5909\u6570\uff09\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\uff08\u88ab\u8aac\u660e\u5909\u6570\uff09\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = df_train[\"action_seq\"]\nX_train = df_train.drop(['file_path', 'action_seq'], axis=1)\nX_test = df_test.drop(['file_path'], axis=1)","ede37dc2":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\uff08\u6570\u5024\u306b\u5909\u63db\uff09\u3057\u3066\u304a\u304d\u307e\u3059\nle = LabelEncoder()\ny_train = le.fit_transform(y_train)","8d953797":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u691c\u5b9a\uff08\u7cbe\u5ea6\u8a55\u4fa1\uff09\u7528\u306b\u5207\u308a\u51fa\u3057\u307e\u3059\n\n# -----------------------------------\n# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n# -----------------------------------\nfrom sklearn.metrics import log_loss, accuracy_score\nfrom sklearn.model_selection import KFold\n\n# \u5404fold\u306e\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\u30ea\u30b9\u30c8\nscores_accuracy = []\nlgb_params = {\n                \"n_estimators\": 50000,\n                \"learning_rate\": 0.05,\n                \"num_leaves\": 8,        \n              }\n\n# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u30924\u3064\u306b\u5206\u5272\u3057\u3001\u3046\u30611\u3064\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3068\u3059\u308b\u3053\u3068\u3092\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3059\nkf = KFold(n_splits=3, shuffle=True, random_state=71)\nfor tr_idx, va_idx in kf.split(X_train):\n    # \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\n    X_train_, X_val = X_train.iloc[tr_idx], X_train.iloc[va_idx]\n    y_train_, y_val = y_train[tr_idx], y_train[va_idx]\n    \n    # \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u884c\u3046\n    model = LGBMClassifier(**lgb_params)\n    model.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='logloss', early_stopping_rounds=50,verbose=False)\n    # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u78ba\u7387\u3067\u51fa\u529b\u3059\u308b\n    y_pred = model.predict(X_val)\n\n    # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3067\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\n    accuracy = accuracy_score(y_val, y_pred)\n    print(f'accuracy: {accuracy:.4f}')\n    # \u305d\u306efold\u306e\u30b9\u30b3\u30a2\u3092\u4fdd\u5b58\u3059\u308b\n    scores_accuracy.append(accuracy)\n\n# \u5404fold\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3092\u51fa\u529b\u3059\u308b\naccuracy = np.mean(scores_accuracy)\nprint(f'CV mean accuracy: {accuracy:.4f}')","9d03d0e9":"# \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\nmodel = LGBMClassifier(**lgb_params)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","ef847023":"df_sub = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/sample_submission.csv')","eeb6b3b8":"df_sub['action_seq'] = le.inverse_transform(y_pred)\ndf_sub","8cc797f4":"# action_seq\u3054\u3068\u306e\u30c7\u30fc\u30bf\u6570\u3092\u307f\u3066\u307f\u308b\ng = sns.countplot(df_sub['action_seq'])\nl = g.set_xticklabels(g.get_xticklabels(), rotation=90)","934de6f4":"# \u51fa\u529b\u3057\u3066\u63d0\u51fa\u3057\u307e\u3059\ndf_sub.to_csv('mysubmission.csv', index=False)","5677bb16":"\u304a\u305d\u3089\u304f\uff0cjab-jab-bodyupper\u3068jab-jab-upper\u306e\u5dee\u5206\u3092\u53d6\u3063\u305f\u5834\u5408\u524d\u534a\u306f\u5dee\u5206\u306e\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u306b\u306a\u308b\u306f\u305a\uff0c\uff0c\uff0c","cb0b5281":"**\u65b9\u91dd**\n\njab-jab-bodyupper\u3068jab-jab-upper\u306e\u5dee\u5206\u3092\u53d6\u308b\n\n\u305d\u306e\u5dee\u5206\u3092\u65e2\u5b58\u306ejab-jab-hook\u306b\u8db3\u3057\u3066jab-jab-bodyhook\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u4f5c\u6210"}}