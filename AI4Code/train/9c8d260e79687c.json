{"cell_type":{"bc8548f0":"code","eb9f6662":"code","74401662":"code","2013cbad":"code","dd7d0ef2":"code","4df487c2":"code","7f0a8f00":"code","8f0234a4":"code","460de866":"code","cf28618a":"code","4b325b99":"code","f3ba7234":"code","efc52cdd":"code","889ecc2d":"code","8c270a9f":"code","425b0722":"code","e85eba5c":"code","3007eda6":"code","c2f4a86a":"markdown","9061aab0":"markdown","68bbcca4":"markdown","4dc40949":"markdown","7a010d47":"markdown","2bca59f6":"markdown","15dfafb9":"markdown","e60e805d":"markdown","0110dce7":"markdown","6b6406bb":"markdown"},"source":{"bc8548f0":"from tensorflow.keras import layers\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport cv2","eb9f6662":"# Understanding the size of example\nimg = cv2.imread('..\/input\/100-bird-species\/images to test\/3.jpg')\nimg.shape","74401662":"# Visualize the example\nplt.imshow(img)\nplt.show()","2013cbad":"train_dir = \"..\/input\/100-bird-species\/train\"\ntest_dir = \"..\/input\/100-bird-species\/test\"\nval_dir = \"..\/input\/100-bird-species\/valid\"","dd7d0ef2":"train_data = tf.keras.preprocessing.image_dataset_from_directory(train_dir, label_mode='categorical',\n                                                                 image_size=(600,600), batch_size=32)\n\ntest_data =  tf.keras.preprocessing.image_dataset_from_directory(test_dir, label_mode='categorical',\n                                                                 image_size=(600,600), batch_size=32)\n\nval_data =  tf.keras.preprocessing.image_dataset_from_directory(val_dir, label_mode='categorical',\n                                                                image_size=(600,600), batch_size=32)","4df487c2":"len(train_data.class_names)","7f0a8f00":"labels_names = train_data.class_names","8f0234a4":"plt.figure(figsize=(12,12))\nfor image, label in train_data.take(1):\n    for i in range(9):\n        plt.subplot(3, 3, i+1)\n        plt.imshow(image[i].numpy().astype('uint8'))\n        plt.title(labels_names[tf.argmax(label[i])])\n        plt.axis(\"off\")","460de866":"base_model = tf.keras.applications.EfficientNetB7(include_top=False, weights='imagenet')","cf28618a":"for layer in base_model.layers[:-5]:\n    base_model.trainable = False\n    \ninputs = tf.keras.Input(shape=(600,600,3))\n\nx = base_model(inputs)\nx = layers.GlobalAveragePooling2D()(x)\n\noutputs = layers.Dense(315, activation='softmax')(x)\n\neff7_model = tf.keras.Model(inputs, outputs)","4b325b99":"eff7_model.summary()","f3ba7234":"eff7_model.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001),\n    metrics = ['accuracy']\n)","efc52cdd":"# Model fitting\n\neff7_model.fit(train_data,\n               epochs=2,\n               steps_per_epoch = len(train_data),\n               validation_data = val_data,\n               validation_steps = len(val_data))","889ecc2d":"eff7_model_evaluation = eff7_model.evaluate(test_data)","8c270a9f":"print(f\"Efficient Model Accuracy: {eff7_model_evaluation[1] * 100 : 0.2f}%\")","425b0722":"# Testing model \ntest_labels = test_data.class_names\n\nlen(test_labels)","e85eba5c":"plt.figure(figsize=(16,16))\n\nfor image, label in test_data.take(1):\n    model_prediction = eff7_model.predict(image)\n    for i in range(18):\n        plt.subplot(6,3,i+1)\n        plt.imshow(image[i].numpy().astype('uint8'))\n        plt.title(f\"Model Prediction: {test_labels[tf.argmax(tf.round(model_prediction[i]))]}\\nOriginal Labels: {test_labels[tf.argmax(label[i])]}\")\n        plt.axis(\"off\")","3007eda6":"plt.figure(figsize=(16,16))\n\nfor image, label in test_data.take(1):\n    model_prediction = eff7_model.predict(image)\n    for i in range(18):\n        plt.subplot(6,3,i+1)\n        plt.imshow(image[i].numpy().astype('uint8'))\n        plt.title(f\"Model Prediction: {test_labels[tf.argmax(tf.round(model_prediction[i]))]}\\nOriginal Labels: {test_labels[tf.argmax(label[i])]}\")\n        plt.axis(\"off\")","c2f4a86a":"## Data Requirements\n\nThis section I will used it for import modules","9061aab0":"## Conclusion\n\nThis was so nice EfficientNetB7, it's approved great model with only 2 epochs can classify 315 class with 98.29% accuracy","68bbcca4":"## Data Understanding\n\nThis steps used for knowing more about the data","4dc40949":"## Evaluation","7a010d47":"## Business Understanding\n\nThis notebooks simply want to classify 315 birds using EfficientNetB7","2bca59f6":"## Modeling\n\nThis steps include building the model","15dfafb9":"## Data Collection\n\nAll data here is collecterd form this [datasets](https:\/\/www.kaggle.com\/gpiosenka\/100-bird-species)","e60e805d":"## Data Preparation\n\nThis steps used for preparing the data. Like I said before, EfficientNetB7 needs resolutions 600","0110dce7":"# EfficientNetB7\n\nThis EfficientNetB7 need 600 Resolutions in size.\n\nI follow [Sarav](https:\/\/www.kaggle.com\/sauravbhuyan\/315-bird-with-efficientnetb5) notebook for writing this","6b6406bb":"## Predicting"}}