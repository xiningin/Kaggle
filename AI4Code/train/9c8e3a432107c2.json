{"cell_type":{"8b7d9a8a":"code","d0493633":"code","1f91c021":"code","3e48d4c7":"code","b56eb1b9":"code","e59f59b9":"code","e6b43811":"code","9e4b6d69":"code","d3648414":"code","0f0630ed":"code","3e0a9627":"code","38e3676d":"code","c9699fd7":"code","834af4cf":"code","0c2ebdad":"code","5683f2de":"code","ccd3f0e5":"code","c03b97f4":"code","b25c8d2f":"code","7f51fa58":"code","f5d85d07":"code","29823f80":"code","44c981f6":"code","c61777e4":"code","e606a5c1":"code","5a5c1047":"code","4a508cce":"markdown","cd86225c":"markdown","92d2db6e":"markdown","e7e99b57":"markdown","52127053":"markdown","f135c146":"markdown","4dc0515f":"markdown","8fe98813":"markdown"},"source":{"8b7d9a8a":"import numpy as np \nimport pandas as pd \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport cufflinks as cf\nimport plotly\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d0493633":"train = pd.read_csv('..\/input\/train_V2.csv')\nprint(train.shape)\ntrain.head()","1f91c021":"train.info()","3e48d4c7":"train['winPlacePerc'].describe()","b56eb1b9":"test = pd.read_csv('..\/input\/test_V2.csv')\nprint(test.shape)\ntest.head()","e59f59b9":"train.isnull().sum().sum()","e6b43811":"test.isnull().sum().sum()","9e4b6d69":"train.winPlacePerc.fillna(1,inplace=True)\ntrain.loc[train['winPlacePerc'].isnull()]","d3648414":"\ntrain[\"distance\"] = train[\"rideDistance\"]+train[\"walkDistance\"]+train[\"swimDistance\"]\ntrain[\"skill\"] = train[\"headshotKills\"]+train[\"roadKills\"]\ntrain.drop(['rideDistance','walkDistance','swimDistance','headshotKills','roadKills'],inplace=True,axis=1)\nprint(train.shape)\ntrain.head()","0f0630ed":"test[\"distance\"] = test[\"rideDistance\"]+test[\"walkDistance\"]+test[\"swimDistance\"]\ntest[\"skill\"] = test[\"headshotKills\"]+test[\"roadKills\"]\ntest.drop(['rideDistance','walkDistance','swimDistance','headshotKills','roadKills'],inplace=True,axis=1)\nprint(test.shape)\ntest.head()","3e0a9627":"corrmat = train.corr() \ncols = corrmat.nlargest(26, 'winPlacePerc').index # nlargest : Return this many descending sorted values\ncm = np.corrcoef(train[cols].values.T)\n\n# correlation \nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(15, 12))\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 8}, \n                 yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","38e3676d":"predictors = [ \"kills\",\n                \"maxPlace\",\n                \"numGroups\",\n                \"distance\",\n                \"boosts\",\n                \"heals\",\n                \"revives\",\n                \"killStreaks\",\n                \"weaponsAcquired\",\n                \"winPoints\",\n                \"skill\",\n                \"assists\",\n                \"damageDealt\",\n                \"DBNOs\",\n                \"killPlace\",\n                \"killPoints\",\n                \"vehicleDestroys\",\n                \"longestKill\"\n               ]\nprint(len(predictors))","c9699fd7":"X_train = train[predictors]\nX_train.head()","834af4cf":"y_train = train['winPlacePerc']\ny_train.head()","0c2ebdad":"import lightgbm as lgb\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import ShuffleSplit","5683f2de":"lgb_reg = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 20, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.8,metric='mse')\nlgb_reg.fit(X_train, y_train)","ccd3f0e5":"X_test = test[predictors]\nX_test.head()","c03b97f4":"y_pred = lgb_reg.predict(X_test)\ny_pred","b25c8d2f":"len(y_pred[y_pred > 1])","7f51fa58":"y_pred[y_pred > 1] = 1","f5d85d07":"len(y_pred[y_pred > 1])","29823f80":"ss = ShuffleSplit(n_splits=10)\nscores = cross_val_score(lgb_reg, X_train, y_train, cv=ss)\nprint(scores)","44c981f6":"accuracy = scores.mean()\nprint(accuracy)","c61777e4":"lgb.plot_importance(lgb_reg, max_num_features=20, figsize=(12, 10),xlabel='Features Importance',ylabel='Features')\nplt.title('Feature importance')","e606a5c1":"test_id = test[\"Id\"]\nsubmit = pd.DataFrame({'Id': test_id, \"winPlacePerc\": y_pred} , columns=['Id', 'winPlacePerc'])\nprint(submit.head())\n","5a5c1047":"submit.to_csv(\"submission.csv\", index = False)","4a508cce":"### Check the Any missing data","cd86225c":"### Check the Coorelation","92d2db6e":"### Predict model","e7e99b57":"## Get Train and test","52127053":"# EDA","f135c146":"## Build Model","4dc0515f":"### Submit the file","8fe98813":"## Features Important"}}