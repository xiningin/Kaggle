{"cell_type":{"355923da":"code","d6223fde":"code","374f59cd":"code","b141fa4c":"code","d645716c":"code","d9a84325":"code","b54f16bd":"code","eb20983e":"code","e18c5c8e":"code","31105df9":"code","12867b53":"code","899f8320":"code","1c577fdd":"code","4ca05800":"code","8d7967a9":"code","ff816d22":"code","08e967f0":"code","1303cf54":"code","03999abf":"code","79139549":"code","ef578e26":"code","b2823dc4":"code","9f139bf2":"code","d48bd085":"code","0b205c5e":"code","0ca80843":"code","5bfea7f8":"code","4658a495":"code","65542dbb":"code","9472db85":"markdown"},"source":{"355923da":"import pandas as pd\nimport numpy as np\n\npd.pandas.set_option('display.max_columns',None)\npd.pandas.set_option('display.max_rows',None)\n\ntrain = pd.read_csv('..\/input\/covid19-symptoms-checker\/Cleaned-Data.csv')\ntrain.head()","d6223fde":"data = train.copy()\ndata = data.drop(['Severity_None','None_Sympton','None_Experiencing','Contact_Dont-Know','Country','Contact_No'],axis = 1)\ndata.head()","374f59cd":"data1 = data.copy()\ndata1 = data.drop(['Severity_Moderate','Severity_Mild'],axis = 1)\ny_data = data1['Severity_Severe']\nx_data = data1.drop(['Severity_Severe'],axis = 1)\n","b141fa4c":"SEED = 42\nfrom sklearn.model_selection import train_test_split\nX_train,X_val,Y_train,Y_val = train_test_split(x_data,y_data,test_size = 0.3,random_state = SEED)","d645716c":"X_train.head()","d9a84325":"Y_train.head()","b54f16bd":"\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","eb20983e":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nrf = RandomForestClassifier()\nparams = {\"max_depth\":[15,20,25], \"n_estimators\":[27,30,33]}\nrf_reg = GridSearchCV(rf, params, cv = 10, n_jobs =10)\nrf_reg.fit(X_train, Y_train)\nprint(rf_reg.best_estimator_)\nbest_estimator=rf_reg.best_estimator_\ny_pred_train = best_estimator.predict(X_train)\ny_pred_val = best_estimator.predict(X_val)\n# rf.fit(X_train,Y_train)","e18c5c8e":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(Y_val,y_pred_val)","31105df9":"scoring = 'accuracy'\nscore = cross_val_score(rf,X_val,Y_val,cv = k_fold,n_jobs=1,scoring=scoring)\nprint(score)\ntype(score)","12867b53":"score.mean()","899f8320":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nimport xgboost ","1c577fdd":"params={'min_child_weight':[4,5], 'gamma':[i\/10.0 for i in range(3,6)],  'subsample':[i\/10.0 for i in range(6,11)],\n'colsample_bytree':[i\/10.0 for i in range(6,11)], 'max_depth': [2,3,4]}","4ca05800":"Clf = xgboost.XGBClassifier()","8d7967a9":"# random_search = RandomizedSearchCV(regressor,param_distributions = params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)\nrandom_search = RandomizedSearchCV(Clf\n                                   , params,n_iter=5, n_jobs=1, cv=5)","ff816d22":"random_search.fit(X_train,Y_train)\n","08e967f0":"random_search.best_estimator_\n","1303cf54":"xgbo = xgboost.XGBClassifier(base_score=0.5, booster=None, colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1.0, gamma=0.3, gpu_id=-1,\n              importance_type='gain', interaction_constraints=None,\n              learning_rate=0.300000012, max_delta_step=0, max_depth=2,\n              min_child_weight=5,monotone_constraints=None,\n              n_estimators=100, n_jobs=0, num_parallel_tree=1,\n              objective='binary:logistic', random_state=0, reg_alpha=0,\n              reg_lambda=1, scale_pos_weight=1, subsample=0.9, tree_method=None,\n              validate_parameters=False, verbosity=None)","03999abf":"xgbo.fit(X_train,Y_train)","79139549":"pred_xgb = xgbo.predict(X_val) \nconfusion_matrix(Y_val,pred_xgb)","ef578e26":"# from sklearn.model_selection import KFold\n\n# ntrain = X_train.shape[0]\n# ntest = X_val.shape[0]\n# NFOLDS = 5\n# kf = KFold(n_splits = NFOLDS, random_state = SEED)\n\n\n\n# class SklearnHelper(object):\n#     def __init__(self, clf, seed=0, params=None):\n#         params['random_state'] = seed\n#         self.clf = clf(**params)\n\n#     def train(self, x_train, y_train):\n#         self.clf.fit(x_train, y_train)\n\n#     def predict(self, x):\n#         return self.clf.predict(x)\n    \n#     def fit(self,x,y):\n#         return self.clf.fit(x,y)\n    \n#     def feature_importances(self,x,y):\n#         print(self.clf.fit(x,y).feature_importances_)\n    \n\n","b2823dc4":"# def get_oof(clf, x_train, y_train, x_test):\n#     oof_train = np.zeros((ntrain,))\n#     oof_test = np.zeros((ntest,))\n#     oof_test_skf = np.empty((NFOLDS,ntest))\n    \n#     for i, (train_index, test_index) in enumerate(kf.split(x_train)):\n#         x_tr = x_train[train_index]\n#         x_te = x_train[test_index]\n#         y_tr = y_train[train_index]\n        \n#         clf.train(x_tr,y_tr)\n#         oof_train[test_index] = clf.predict(x_te)\n#         oof_test_skf[i,:] = clf.predict(x_test)\n        \n#     oof_test[:] = oof_test_skf.mean(axis=0)\n#     return oof_train.reshape(-1,1),oof_test.reshape(-1,1)\n        ","9f139bf2":"# from sklearn.ensemble import RandomForestClassifier\n# from sklearn.ensemble import AdaBoostClassifier\n# from sklearn.ensemble import GradientBoostingClassifier\n# from sklearn.ensemble import ExtraTreesClassifier\n# from sklearn.svm import SVC","d48bd085":"# #Random Forest Parameters\n# rf_params = {\n#     'n_jobs': -1,\n#     'n_estimators': 500,\n#      'warm_start': True, \n#      #'max_features': 0.2,\n#     'max_depth': 6,\n#     'min_samples_leaf': 2,\n#     'max_features' : 'sqrt',\n#     'verbose': 0\n# }\n# #extraTree Parameters\n# et_params = {\n#     'n_jobs': -1,\n#     'n_estimators':500,\n#     #'max_features': 0.5,\n#     'max_depth': 8,\n#     'min_samples_leaf': 2,\n#     'verbose': 0\n# }\n\n# # AdaBoost parameters\n# ada_params = {\n#     'n_estimators': 500,\n#     'learning_rate' : 0.75\n# }\n\n# # Gradient Boosting parameters\n# gb_params = {\n#     'n_estimators': 500,\n#      #'max_features': 0.2,\n#     'max_depth': 5,\n#     'min_samples_leaf': 2,\n#     'verbose': 0\n# }\n\n# # Support Vector Classifier parameters \n# svc_params = {\n#     'kernel' : 'linear',\n#     'C' : 0.025\n#     }","0b205c5e":"# rf = SklearnHelper(clf=RandomForestClassifier, seed=SEED, params=rf_params)\n# et = SklearnHelper(clf=ExtraTreesClassifier, seed=SEED, params=et_params)\n# ada = SklearnHelper(clf=AdaBoostClassifier, seed=SEED, params=ada_params)\n# gb = SklearnHelper(clf=GradientBoostingClassifier, seed=SEED, params=gb_params)\n# svc = SklearnHelper(clf=SVC, seed=SEED, params=svc_params)\n","0ca80843":"# # #X['Survived'].ravel()\n# # y_train = y\n# # train = X\n# # x_train = train.values # Creates an array of the train data\n# # x_test = X1.values #\n\n\n# y_train = y_data\n# X = X_train\n# X_train_values = X.values\n# X_val_values = X_val.values","5bfea7f8":"# et_oof_train, et_oof_test = get_oof(et, X_train_values, y_train, X_val_values) # Extra Trees\n# rf_oof_train, rf_oof_test = get_oof(rf,X_train_values, y_train, X_val_values) # Random Forest\n# ada_oof_train, ada_oof_test = get_oof(ada, X_train_values, y_train, X_val_values) # AdaBoost \n# gb_oof_train, gb_oof_test = get_oof(gb,X_train_values, y_train, X_val_values) # Gradient Boost\n# svc_oof_train, svc_oof_test = get_oof(svc,X_train_values, y_train, X_val_values) # Support Vector Classifier\n\n# print(\"Training is complete\")","4658a495":"# rf_feature = rf.feature_importances(x_train,y_train)\n# et_feature = et.feature_importances(x_train, y_train)\n# ada_feature = ada.feature_importances(x_train, y_train)\n# gb_feature = gb.feature_importances(x_train,y_train)","65542dbb":"# rf_features = [0.3116732 , 0.56566957, 0.05057659, 0.05226303, 0.01981761]\n# et_features = [0.26047002, 0.64797022, 0.03636626, 0.03371078, 0.02148271]\n# ada_features = [0.29  ,0.106 ,0.076 ,0.066 ,0.102]\n# gb_features = [0.24384334 ,0.66760243 ,0.03514145 ,0.0271241 , 0.02628868]","9472db85":"Model \u261d"}}