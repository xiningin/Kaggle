{"cell_type":{"cce2b26b":"code","870f3e00":"code","31b6336c":"code","a44d8081":"code","97310b2e":"code","2ec78759":"code","e4f30d75":"code","5bbcd011":"code","9313ac92":"code","a0677783":"code","e4eee4f3":"code","56733dc4":"code","c5b5cbb9":"markdown","d296a79f":"markdown","b6d5df0e":"markdown","dce005b0":"markdown","55d05c38":"markdown","98996f59":"markdown","516becea":"markdown","4474b58c":"markdown","86d58464":"markdown","4d2f3f69":"markdown","c0662640":"markdown","5cea08f4":"markdown"},"source":{"cce2b26b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","870f3e00":"import warnings\nwarnings.filterwarnings('ignore')","31b6336c":"import seaborn as sns\nimport matplotlib.pyplot as plt","a44d8081":"df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf.head()","97310b2e":"df.describe()","2ec78759":"fig, axes = plt.subplots(1, 3, figsize=(25,6))\nsns.scatterplot(data = df, x = 'LotFrontage', y = 'SalePrice', ax=axes[0])\nsns.scatterplot(data = df, x= 'LotArea', y = 'SalePrice', ax=axes[1])\nsns.scatterplot(data = df, x= 'BsmtFinSF1', y = 'SalePrice', ax=axes[2])\nplt.show()","e4f30d75":"upper_limit_LF = np.nanpercentile(df.LotFrontage, 99)\nupper_limit_LA = np.nanpercentile(df.LotArea, 99)\nupper_limit_BS = np.nanpercentile(df.BsmtFinSF1, 99)\n\nlower_limit_LF = np.nanpercentile(df.LotFrontage, 1)\nlower_limit_LA = np.nanpercentile(df.LotArea, 1)\nlower_limit_BS = np.nanpercentile(df.BsmtFinSF1, 1)","5bbcd011":"df_no_outliers = df.copy()\n\ndf_no_outliers.LotFrontage[(df_no_outliers.LotFrontage > upper_limit_LF)] = upper_limit_LF\ndf_no_outliers.LotFrontage[(df_no_outliers.LotFrontage < lower_limit_LF)] = lower_limit_LF\n\ndf_no_outliers.LotArea[(df_no_outliers.LotArea > upper_limit_LA)] = upper_limit_LA\ndf_no_outliers.LotArea[(df_no_outliers.LotArea < lower_limit_LA)] = lower_limit_LA\n\ndf_no_outliers.BsmtFinSF1[(df_no_outliers.BsmtFinSF1 > upper_limit_BS)] = upper_limit_BS\ndf_no_outliers.BsmtFinSF1[(df_no_outliers.BsmtFinSF1 < lower_limit_BS)] = lower_limit_BS","9313ac92":"fig, axes = plt.subplots(1, 3, figsize=(25,6))\nsns.scatterplot(data = df_no_outliers, x = 'LotFrontage', y = 'SalePrice', ax=axes[0])\nsns.scatterplot(data = df_no_outliers, x= 'LotArea', y = 'SalePrice', ax=axes[1])\nsns.scatterplot(data = df_no_outliers, x= 'BsmtFinSF1', y = 'SalePrice', ax=axes[2])\nplt.show()","a0677783":"df_dropping = df.copy()","e4eee4f3":"df_dropping = df_dropping.drop ( \n     df_dropping[\n         (df_dropping.LotFrontage < lower_limit_LF) |  (df_dropping.LotFrontage > upper_limit_LF)\n                ].index,\n                inplace=False)\n\ndf_dropping = df_dropping.drop ( \n     df_dropping[\n         (df_dropping.LotArea < lower_limit_LA) |  (df_dropping.LotArea > upper_limit_LA)\n                ].index,\n                inplace=False)\n\ndf_dropping = df_dropping.drop ( \n     df_dropping[\n         (df_dropping.BsmtFinSF1 < lower_limit_BS) |  (df_dropping.BsmtFinSF1 > upper_limit_BS)\n                ].index,\n                inplace=False)\n","56733dc4":"fig, axes = plt.subplots(1, 3, figsize=(25,6))\nsns.scatterplot(data = df_dropping, x = 'LotFrontage', y = 'SalePrice', ax=axes[0])\nsns.scatterplot(data = df_dropping, x= 'LotArea', y = 'SalePrice', ax=axes[1])\nsns.scatterplot(data = df_dropping, x= 'BsmtFinSF1', y = 'SalePrice', ax=axes[2])\nplt.show()","c5b5cbb9":"Finally let's plot the features again to see the results once we have dropped the outliers.","d296a79f":"Instead of modifying the value of the outlier, we can also drop it. So we are going to drop the rows that has values outside the limits that we have defined.","b6d5df0e":"## How do we know if a value is an outlier?\n\nFirst we are going to use the describe() method so we can check the min and max values, and also the 25th-percentile and 75th-percentile. If we see a big difference between the 75th-percentile and the maximum value, or between the minimum value and the 25th-percentile, it is possible that there are some outliers.","dce005b0":"# Outlier Treatment\n### 1 - Outlier Imputation\n\nWe can deal with outliers by changing its value to a more *friendly* value. In this notebook, we are going to consider a value an outlier if it is under the 1st-percentile or if it is above the 99th-percentile. So let's define these limits:","55d05c38":"We can see that, in fact, these features have some outliers that we have to treat.","98996f59":"Once we have made a copy of the dataframe, we can drop the rows based on conditions","516becea":"# Reading the data","4474b58c":"In this notebook we are going to detect & treat outliers in a dataset in an easy way. \n\nAs you can imagine, what we are going to do first is to **detect** these values.","86d58464":"# Detecting the outliers","4d2f3f69":"Alright, now let's impute the values:","c0662640":"## 2 -  Outlier Dropping","5cea08f4":"In this case, let's pick some features that happens to have outliers. For example, LotFrontage, LotArea and BsmtFinSF1 features. Then, we are going to plot these features so we can graphically check if there is any outlier."}}