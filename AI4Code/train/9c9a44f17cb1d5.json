{"cell_type":{"bb5b5b4e":"code","738f96b1":"code","3bd008ef":"code","c3bf1633":"code","47605650":"code","e8c47db6":"code","9a98ddc4":"code","c8052f0b":"code","d0845266":"code","c37bdd4e":"code","902292f9":"code","1a2c533d":"code","6ec87ab5":"code","52d80526":"code","aeb54b59":"code","d532a70d":"code","306af4ab":"code","9d856506":"code","826fdff3":"code","d0a8ced0":"code","b1a015cc":"code","0d0bbdaa":"code","aad0d4e7":"code","32c3ebf4":"code","b508898a":"code","b064f53c":"code","9ce49efb":"code","94327437":"code","cc12b484":"code","90a43c20":"code","a9b8c416":"code","df7b7ab2":"code","14ede4c7":"code","5ea96139":"code","29d036d7":"code","6c1833d2":"code","eb4f8f85":"code","e4b89e88":"code","3b64cc99":"code","1b0e0315":"code","b0aec111":"code","aef70a1e":"code","a4352917":"code","7f53d434":"code","aadd5073":"code","c6d6f931":"code","31305f62":"code","f050a9e1":"code","71fec76c":"code","a1d121c8":"code","d41a24ee":"code","aef0a1eb":"code","4335b68f":"code","a0695ac4":"code","459805b8":"code","4cd93336":"code","317dbdda":"code","e737165e":"code","aa8c65ca":"code","a7ce287f":"code","aae9d078":"markdown","aabbd65b":"markdown","1f67d2e3":"markdown","bd02bd7e":"markdown","49f57bc7":"markdown","b180ca04":"markdown","0dcc9fcc":"markdown","87c84385":"markdown","d25e7960":"markdown","f0347f7f":"markdown","359cba35":"markdown","167ada4b":"markdown","9665dd6e":"markdown","40bfdd3c":"markdown","24d85017":"markdown","6eb0e240":"markdown","5379bc23":"markdown","c714f877":"markdown","6683b857":"markdown","d10b694c":"markdown","f8ea439d":"markdown","85b25b0d":"markdown","4c6bae42":"markdown","ba90930b":"markdown","8ad68573":"markdown","067e21e7":"markdown","b7b99209":"markdown","0fcd32b4":"markdown","d4d22077":"markdown","a10b1081":"markdown","9e7ab98e":"markdown","e0f9d546":"markdown","276a9c93":"markdown","d1315cdd":"markdown","5bad72d7":"markdown","b69a5a44":"markdown","d86fd09e":"markdown","c52a7a46":"markdown","3258bae1":"markdown","babb9ae6":"markdown","f0a64efd":"markdown","31b257ca":"markdown","be3326e8":"markdown","f65e352b":"markdown","64e2d460":"markdown","0d685676":"markdown","2b006929":"markdown","f61dc604":"markdown","d07f67c8":"markdown","03814277":"markdown","0d4dc918":"markdown","4f6714cd":"markdown","8479f8b3":"markdown","5659ee77":"markdown","84da8c42":"markdown"},"source":{"bb5b5b4e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\n# check we have for the input dataset\nprint(os.listdir(\"..\/input\"))","738f96b1":"# \"...may19.csv\" is the latest one\nfastfood_data = pd.read_csv('..\/input\/fast-food-restaurants\/Datafiniti_Fast_Food_Restaurants_May19.csv')","3bd008ef":"# shape of dataset\nprint(\"Dataset dimension:\")\nprint(fastfood_data.shape)","c3bf1633":"# check the data type of the columns\nprint(\"Data types:\")\nprint(fastfood_data.dtypes)","47605650":"# take a peek\nprint(\"Top 10 rows:\")\nfastfood_data.head(10)","e8c47db6":"# the id, keys, sourceURLs, and websites are unique identifier\n# we don't need them in our visualizations\nfastfood_data = fastfood_data.drop(['id', 'keys', 'sourceURLs', 'websites'], axis=1)\n\n# shape of dataset\nprint(\"Dimension after dropping columns:\")\nprint(fastfood_data.shape)\n\n# take a peek at the head to verify the drop is successful\nfastfood_data.head()","9a98ddc4":"# my personal reusable function for detecting missing data\ndef missing_value_describe(data):\n    # check missing values in training data\n    missing_value_stats = (data.isnull().sum() \/ len(data)*100)\n    missing_value_col_count = sum(missing_value_stats > 0)\n    missing_value_stats = missing_value_stats.sort_values(ascending=False)[:missing_value_col_count]\n    print(\"Number of columns with missing values:\", missing_value_col_count)\n    if missing_value_col_count != 0:\n        # print out column names with missing value percentage\n        print(\"\\nMissing percentage (desceding):\")\n        print(missing_value_stats)\n    else:\n        print(\"No misisng data!!!\")\nmissing_value_describe(fastfood_data)","c8052f0b":"import matplotlib.pyplot as plt # import matplotlib for graphs","d0845266":"print(\"Number of unique restaurant:\", fastfood_data['name'].nunique())","c37bdd4e":"# top 20 restaurants recorded by count total\nnameplot=fastfood_data['name'].value_counts()[:20].plot.bar(title='Top 20 mentioned restaurants')\nnameplot.set_xlabel('name',size=20)\nnameplot.set_ylabel('count',size=20)","902292f9":"import nltk","1a2c533d":"# # obtained unique names of restaurants\n# restaurant_names = fastfood_data['name'].unique()\n\n# # calculate similarity and record most-similar names together\n# most_similar = []\n# for i in range(len(restaurant_names)):\n#     # temporary list to store the current similar words\n#     temp_similar = [restaurant_names[i]]\n    \n#     # compare and save similar words\n#     for j in range(len(restaurant_names)):\n#         if restaurant_names[i] == restaurant_names[j]:\n#             continue\n#         if nltk.edit_distance(restaurant_names[i].lower(), restaurant_names[j].lower()) < 3:\n#             temp_similar.append(restaurant_names[j])\n            \n#     # similar word(s) found\n#     if len(temp_similar) > 1:\n#         most_similar.append(temp_similar)\n#     if i > 0 and i % 10 == 0:\n#         print(\"index\", i-10, \"-\", i, \"checking finished| most similar size:\", len(most_similar))\n# print(\"similarity checking finished\")\n\n# # count number of similar words\n# most_similar_word_count = 0\n# for i in most_similar:\n#     most_similar_word_count += len(i)\n# print(\"size of the most similar list:\", most_similar_word_count)\n# most_similar","6ec87ab5":"# let's remove the exceptions from the above most_similar's list\n# since the list is small and we only need to do some minor changes, I will just do it manually\n# to avoid running edit-distance again\nmost_similar_edited = [[\"Carl's Jr.\", \"Carl's Jr\", 'Carls Jr'],\n [\"McDonald's\", \"Mc Donald's\", 'Mcdonalds', 'McDonalds'],\n ['Cook-Out', 'Cook Out', 'CookOut'],\n [\"Steak 'n Shake\",\n  \"STEAK 'N SHAKE\",\n  'Steak N Shake',\n  'Steak n Shake',\n  \"Steak 'N Shake\"],\n ['QDOBA Mexican Eats', 'Qdoba Mexican Eats'],\n ['Burger King', 'Burger King\u00ae'],\n [\"Hardee's\", 'Hardees'],\n ['Taco Time', 'TacoTime'],\n [\"Arby's\", 'Arbys'],\n ['Chick-fil-A', 'Chick-Fil-A', 'ChickfilA'],\n ['Subway', 'SUBWAY'],\n ['Kfc', 'KFC'],\n [\"Jack's\", 'Jacks'],\n ['Sonic Drive-In',\n  'SONIC Drive-In',\n  'SONIC Drive In',\n  'Sonic DriveIn',\n  'Sonic Drive-in'],\n [\"Church's Chicken\", 'Churchs Chicken'],\n ['Big Boys', 'Big Boy'],\n ['Dairy Queen', 'Dairy queen'],\n ['Guthries', \"Guthrie's\"],\n ['Chick-Fil-A', 'Chick-fil-A', 'ChickfilA'],\n [\"Wendy's\", 'Wendys'],\n [\"Jimmy John's\", 'Jimmy Johns'],\n ['Dairy Queen Grill Chill', 'Dairy Queen Grill & Chill'],\n [\"Moe's Southwest Grill\", 'Moes Southwest Grill'],\n [\"Domino's Pizza\", 'Dominos Pizza'],\n [\"Rally's\", 'Rallys'],\n ['Full Moon Bar-B-Que', 'Full Moon Bar B Que'],\n [\"Guthrie's\", 'Guthries'],\n [\"McAlister's Deli\", \"Mcalister's Deli\", 'McAlisters Deli'],\n [\"Jason's Deli\", 'Jasons Deli'],\n ['KFC', 'Kfc', 'KFC Kentucky Fried Chicken', 'KFC - Kentucky Fried Chicken'],\n ['Popeyes Louisiana Kitchen', \"Popeye's Louisiana Kitchen\"],\n [\"Long John Silver's\", 'Long John Silvers'],\n ['BLIMPIE', 'Blimpie'],\n ['Five Guys Burgers Fries', 'Five Guys Burgers & Fries'],\n ['SUBWAY', 'Subway'],\n ['Dairy Queen Grill & Chill', 'Dairy Queen Grill Chill'],\n ['Potbelly Sandwich Works', 'Pot Belly Sandwich Works'],\n [\"Charley's Grilled Subs\", 'Charleys Grilled Subs'],\n [\"Jersey Mike's Subs\", 'Jersey Mikes Subs'],\n ['In-N-Out Burger', 'InNOut Burger'],\n [\"Culver's\", \"CULVER'S\", 'Culvers'],\n [\"Famous Dave's\", 'Famous Daves'],\n [\"Freddy's Frozen Custard Steakburgers\",\n  'Freddys Frozen Custard Steakburgers',\n  \"Freddy's Frozen Custard & Steakburgers\"],\n ['Cook Out', 'Cook-Out', 'CookOut'],\n ['TacoTime', 'Taco Time'],\n ['Hooters', 'Roosters'],\n ['BurgerFi', 'Burgerfi'],\n [\"Chen's Restaurant\", \"Chan's Restaurant\"],\n ['Taco Del Mar', 'Taco del Mar'],\n ['SONIC Drive-In',\n  'Sonic Drive-In',\n  'SONIC Drive In',\n  'Sonic DriveIn',\n  'Sonic Drive-in'],\n ['Ciscos Taqueria', \"Cisco's Taqueria\"],\n ['China King', 'China Lin'],\n [\"Bojangles' Famous Chicken 'n Biscuits\",\n  'Bojangles Famous Chicken n Biscuits'],\n [\"Dominic's of New York\", 'Dominics of New York'],\n [\"Papa John's Pizza\", 'Papa Johns Pizza'],\n ['Chanellos Pizza', 'Chanello\u2019s Pizza'],\n [\"Fazoli's\", 'Fazolis'],\n ['Wing Street', 'Wingstreet'],\n [\"George's Gyros Spot\", \"George's Gyros Spot 2\"],\n ['Taco Johns', \"Taco John's\"],\n ['RUNZA', 'Runza'],\n ['Bru Burger Bar', 'Grub Burger Bar'],\n [\"Taco John's\", 'Taco Johns'],\n [\"Bob's Burger Brew\", \"Bob's Burgers Brew\", \"Bob's Burgers Brew\", \"Bob's Burger Brew\"],\n ['Best Burgers', 'Best Burger'],\n ['Burgermaster', 'Burger Master'],\n [\"Dick's Drive-In\", \"DK's Drive-In\"],\n [\"Charley's Grill Spirits\", \"Charley's Grill & Spirits\"],\n ['Tom Drive-in', \"Tom's Drive-In\"],\n [\"Fox's Pizza Den\", 'Foxs Pizza Den'],\n [\"Mc Donald's\", \"McDonald's\", 'Mcdonalds', 'McDonalds'],\n ['Taco CASA', 'Taco Casa'],\n [\"Mcalister's Deli\", \"McAlister's Deli\", 'McAlisters Deli'],\n ['Saras Too', \"Sara's Too\"],\n ['Backyard Burgers', 'Back Yard Burgers'],\n [\"CULVER'S\", \"Culver's\", 'Culvers'],\n [\"Simple Simon's Pizza\", 'Simple Simons Pizza'],\n ['China Sea', 'China Star', 'China Bear'],\n [\"Dino's Drive In\", \"Dan's Drive In\"],\n [\"STEAK 'N SHAKE\",\n  \"Steak 'n Shake\",\n  'Steak N Shake',\n  'Steak n Shake',\n  \"Steak 'N Shake\"],\n ['Stanfields Steak House', \"Stanfield's Steakhouse\"],\n ['Wingstreet', 'Wing Street'],\n [\"Big Billy's Burger Joint\", 'Big Billys Burger Joint'],\n ['Big Boy', 'Big Boys'],\n [\"Frisch's Big Boy Restaurant\", \"1 Frisch's Big Boy Restaurant\", \n  \"40 Frisch's Big Boy Restaurant\", \"1 Frisch's Big Boy Restaurant\",\n  \"90 Frisch's Big Boy Restaurant\"],\n ['Fireplace Restaurant Lounge', 'Fireplace Restaurant & Lounge'],\n [\"Carl's Jr\", \"Carl's Jr.\", 'Carls Jr'],\n [\"Rick's on the River\", 'Ricks on the River'],\n ['Grub Burger Bar', 'Bru Burger Bar'],\n [\"Franky's\", \"Grandy's\"],\n ['Gyro X-Press', 'Gyro Express'],\n ['Dominos Pizza', \"Domino's Pizza\"],\n [\"Pietro's Pizza Gallery of Games\", \"Pietro's Pizza & Gallery of Games\"],\n ['Burrtio Amigos', 'Burrito Amigos'],\n [\"Albee's Ny Gyros\", \"Albee's NY Gyros\"],\n ['Gyro Stop', 'Gyro Spot'],\n ['Nicholas Restaurant', \"Nicholas' Restaurant\"],\n ['Mcdonalds', \"McDonald's\", \"Mc Donald's\", 'McDonalds'],\n ['Burgerfi', 'BurgerFi'],\n [\"Ryan's\", 'Ryans'],\n ['Taste of Buffalo Pizzeria', 'Taste Of Buffalo Pizzeria'],\n ['Bad Daddys Burger Bar', \"Bad Daddy's Burger Bar\"],\n [\"Zaxby's\", \"Arby's\"],\n [\"Topper's Pizza\", 'Toppers Pizza'],\n ['C J Drive In', 'C & J Drive In'],\n ['Full Moon Bar B Que', 'Full Moon Bar-B-Que'],\n ['China Lin', 'China King'],\n [\"Raising Cane's Chicken Fingers\", 'Raising Canes Chicken Fingers'],\n [\"Mary's Pizza Shack\", 'Marys Pizza Shack'],\n ['Peking Chinese Restaurants', 'Peking Chinese Restaurant'],\n ['Arbys', \"Arby's\"],\n ['SONIC Drive In',\n  'Sonic Drive-In',\n  'SONIC Drive-In',\n  'Sonic DriveIn',\n  'Sonic Drive-in'],\n ['Hardees', \"Hardee's\"],\n ['McDonalds', \"McDonald's\", \"Mc Donald's\", 'Mcdonalds'],\n ['Wendys', \"Wendy's\"],\n ['Papa Johns Pizza', \"Papa John's Pizza\"],\n [\"George's Gyros Spot 2\", \"George's Gyros Spot\"],\n ['ChickfilA', 'Chick-fil-A', 'Chick-Fil-A'],\n ['Rallys', \"Rally's\"],\n ['C & J Drive In', 'C J Drive In'],\n ['Steak N Shake',\n  \"Steak 'n Shake\",\n  \"STEAK 'N SHAKE\",\n  'Steak n Shake',\n  \"Steak 'N Shake\"],\n [\"Popeye's Louisiana Kitchen\", 'Popeyes Louisiana Kitchen'],\n [\"DJ's Drive-In\", \"DK's Drive-In\"],\n [\"Dan's Drive In\", \"Dino's Drive In\"],\n ['Best Burger', 'Best Burgers', 'Beef Burger'],\n ['Jimmy Johns', \"Jimmy John's\"],\n ['BaskinRobbins', 'Baskin-Robbins', 'Baskin Robbins'],\n ['Carls Jr', \"Carl's Jr.\", \"Carl's Jr\"],\n ['WG Grinders', 'Wg Grinders'],\n ['McAlisters Deli', \"McAlister's Deli\", \"Mcalister's Deli\"],\n ['Fazolis', \"Fazoli's\"],\n ['Marys Pizza Shack', \"Mary's Pizza Shack\"],\n ['Bojangles Famous Chicken n Biscuits',\n  \"Bojangles' Famous Chicken 'n Biscuits\"],\n ['Jacks', \"Jack's\"],\n [\"Hardee's\/red Burrito\", 'Hardees Red Burrito', \"Hardee's\/Red Burrito\"],\n ['Captain Ds', \"Captain D'S\"],\n ['Mr Hero', 'Mr. Hero'],\n [\"Chan's Restaurant\", \"Chen's Restaurant\"],\n ['Ritters Frozen Custard', \"Ritter's Frozen Custard\"],\n ['Hot Dog on a Stick', 'Hot Dog On A Stick'],\n ['Jersey Mikes Subs', \"Jersey Mike's Subs\"],\n ['AW Restaurants',\n  'Aw Restaurants',\n  'AWRestaurants',\n  'A W Restaurant',\n  'AW Restaurant',\n  'Jam Restaurants'],\n ['Long John Silvers', \"Long John Silver's\"],\n [\"Rally's Hamburgers\", 'Rallys Hamburgers'],\n ['HomeTown Buffet', 'Hometown Buffet'],\n ['Back Yard Burgers', 'Backyard Burgers'],\n ['Hardees Red Burrito', \"Hardee's\/red Burrito\", \"Hardee's\/Red Burrito\"],\n [\"DK's Drive-In\", \"Dick's Drive-In\", \"DJ's Drive-In\", \"K's Drive In\"],\n ['Baskin-Robbins', 'BaskinRobbins', 'Baskin Robbins'],\n ['Churchs Chicken', \"Church's Chicken\"],\n ['Blimpie', 'BLIMPIE'],\n ['Foxs Pizza Den', \"Fox's Pizza Den\"],\n ['Steak n Shake',\n  \"Steak 'n Shake\",\n  \"STEAK 'N SHAKE\",\n  'Steak N Shake',\n  \"Steak 'N Shake\"],\n ['Rallys Hamburgers', \"Rally's Hamburgers\"],\n ['Sonic DriveIn',\n  'Sonic Drive-In',\n  'SONIC Drive-In',\n  'SONIC Drive In',\n  'Sonic Drive-in'],\n ['Famous Daves', \"Famous Dave's\"],\n ['Beef Burger', 'Best Burger'],\n ['Dominics of New York', \"Dominic's of New York\"],\n ['Z-Pizza', 'zpizza'],\n ['KFC - Kentucky Fried Chicken', 'KFC Kentucky Fried Chicken'],\n [\"Rockne's\", 'Rocknes'],\n [\"Hardee's\/Red Burrito\", \"Hardee's\/red Burrito\", 'Hardees Red Burrito'],\n ['Aw Restaurants',\n  'AW Restaurants',\n  'AWRestaurants',\n  'A W Restaurant',\n  'AW Restaurant',\n  'Jam Restaurants'],\n ['AWRestaurants', 'AW Restaurants', 'Aw Restaurants', 'AW Restaurant'],\n [\"Hardee's Restaurant\", \"Hardee's Restaurants\"],\n [\"Hardee's Restaurants\", \"Hardee's Restaurant\"],\n [\"Stanfield's Steakhouse\", 'Stanfields Steak House'],\n ['Dunkin Donuts', \"Dunkin' Donuts\"],\n ['Einstein Bros. Bagels', 'Einstein Bros Bagels'],\n ['Simple Simons Pizza', \"Simple Simon's Pizza\"],\n ['A W Restaurant', 'AW Restaurants', 'Aw Restaurants', 'AW Restaurant'],\n ['Einstein Bros Bagels', 'Einstein Bros. Bagels'],\n ['Roosters', 'Hooters'],\n ['Culvers', \"Culver's\", \"CULVER'S\"],\n ['Slice of Life', 'Slice Of Life'],\n ['Jasons Deli', \"Jason's Deli\"],\n ['Wg Grinders', 'WG Grinders'],\n ['Charleys Grilled Subs', \"Charley's Grilled Subs\"],\n ['Freddys Frozen Custard Steakburgers',\n  \"Freddy's Frozen Custard Steakburgers\"],\n ['Moes Southwest Grill', \"Moe's Southwest Grill\"],\n ['CookOut', 'Cook-Out', 'Cook Out'],\n ['Peking Chinese Restaurant', 'Peking Chinese Restaurants'],\n ['InNOut Burger', 'In-N-Out Burger'],\n [\"Nicholas' Restaurant\", 'Nicholas Restaurant'],\n ['Chanello\u2019s Pizza', 'Chanellos Pizza'],\n ['Ryans', \"Ryan's\"],\n ['Burger King\u00ae', 'Burger King'],\n ['Toppers Pizza', \"Topper's Pizza\"],\n [\"Albee's NY Gyros\", \"Albee's Ny Gyros\"],\n ['Qdoba Mexican Eats', 'QDOBA Mexican Eats'],\n ['Runza', 'RUNZA'],\n ['Slice Of Life', 'Slice of Life'],\n ['Mai-Tai Restaurant', 'Mai Tai Restaurant'],\n ['Gyro Express', 'Gyro X-Press'],\n ['zpizza', 'Z-Pizza'],\n ['Raising Canes Chicken Fingers', \"Raising Cane's Chicken Fingers\"],\n ['Rocknes', \"Rockne's\"],\n ['LL Hawaiian Barbecue', 'L L Hawaiian Barbecue', 'L L Hawaiian Barbeque'],\n ['Dairy queen', 'Dairy Queen'],\n ['Blakes Lotaburger', \"Blake's Lotaburger\"],\n ['Emidio & Sons Italian Restaurant', 'Emidio Sons Italian Restaurant'],\n ['Taste Of Buffalo Pizzeria', 'Taste of Buffalo Pizzeria'],\n ['L L Hawaiian Barbecue',\n  'LL Hawaiian Barbecue',\n  'L L Hawaiian Barbeque',\n  'L & L Hawaiian Barbecue'],\n ['Killer Burgers', 'Killer Burger'],\n [\"Steak 'N Shake\",\n  \"Steak 'n Shake\",\n  \"STEAK 'N SHAKE\",\n  'Steak N Shake',\n  'Steak n Shake'],\n ['Burrito Amigos', 'Burrtio Amigos'],\n [\"Zack's Hamburgers\", \"Jack's Hamburgers\"],\n ['AW Restaurant',\n  'AW Restaurants',\n  'Aw Restaurants',\n  'AWRestaurants',\n  'A W Restaurant'],\n ['Jam Restaurants', 'AW Restaurants', 'Aw Restaurants'],\n ['Big Billys Burger Joint', \"Big Billy's Burger Joint\"],\n ['L L Hawaiian Barbeque', 'LL Hawaiian Barbecue', 'L L Hawaiian Barbecue'],\n [\"Ritter's Frozen Custard\", 'Ritters Frozen Custard'],\n [\"Pietro's Pizza & Gallery of Games\", \"Pietro's Pizza Gallery of Games\"],\n [\"K's Drive In\", \"DK's Drive-In\"],\n ['Killer Burger', 'Killer Burgers'],\n [\"Dunkin' Donuts\", 'Dunkin Donuts'],\n ['Farlows on the Water', \"Farlow's On The Water\"],\n ['Hometown Buffet', 'HomeTown Buffet'],\n [\"Blake's Lotaburger\", 'Blakes Lotaburger'],\n [\"Jack's Hamburgers\", \"Zack's Hamburgers\"],\n [\"Cisco's Taqueria\", 'Ciscos Taqueria'],\n [\"Grandy's\", \"Franky's\"],\n [\"Farlow's On The Water\", 'Farlows on the Water'],\n [\"Bad Daddy's Burger Bar\", 'Bad Daddys Burger Bar'],\n ['Baskin Robbins', 'BaskinRobbins', 'Baskin-Robbins'],\n [\"Sara's Too\", 'Saras Too'],\n ['T & L Hotdogs', 'T & L Hot Dogs'],\n [\"Tom's Drive-In\", 'Tom Drive-in'],\n ['Sonic Drive-in',\n  'Sonic Drive-In',\n  'SONIC Drive-In',\n  'SONIC Drive In',\n  'Sonic DriveIn'],\n ['Taco Casa', 'Taco CASA'],\n ['Emidio Sons Italian Restaurant', 'Emidio & Sons Italian Restaurant'],\n ['Fireplace Restaurant & Lounge', 'Fireplace Restaurant Lounge'],\n ['Mai Tai Restaurant', 'Mai-Tai Restaurant'],\n ['Ricks on the River', \"Rick's on the River\"],\n ['Taco del Mar', 'Taco Del Mar'],\n ['Five Guys Burgers & Fries', 'Five Guys Burgers Fries'],\n ['Mr. Hero', 'Mr Hero'],\n [\"Captain D'S\", 'Captain Ds'],\n ['Gyro Spot', 'Gyro Stop'],\n [\"Charley's Grill & Spirits\", \"Charley's Grill Spirits\"],\n ['Hot Dog On A Stick', 'Hot Dog on a Stick'],\n ['L & L Hawaiian Barbecue', 'L L Hawaiian Barbecue'],\n ['Pot Belly Sandwich Works', 'Potbelly Sandwich Works'],\n ['Burger Master', 'Burgermaster'],\n [\"Freddy's Frozen Custard & Steakburgers\",\n  \"Freddy's Frozen Custard Steakburgers\"]]","52d80526":"# let's sort them by the first element of each sublist\ndef sortFirst(val): \n    return val[0]  \n\n# sorts the array in ascending according to 1st element \nmost_similar_edited.sort(key = sortFirst)  \nmost_similar_edited","aeb54b59":"# let's process the data second time manually to make the data cleaner\nmost_similar_sorted = [\n ['AW Restaurant', 'AW Restaurants', 'Aw Restaurants', 'A W Restaurant', 'AWRestaurants'],\n [\"Albee's NY Gyros\", \"Albee's Ny Gyros\"],\n [\"Arby's\", 'Arbys'],\n ['BLIMPIE', 'Blimpie'],\n ['Back Yard Burgers', 'Backyard Burgers'],\n [\"Bad Daddy's Burger Bar\", 'Bad Daddys Burger Bar'],\n ['Baskin Robbins', 'BaskinRobbins', 'Baskin-Robbins'],\n ['Best Burgers', 'Best Burger'],\n [\"Big Billy's Burger Joint\", 'Big Billys Burger Joint'],\n ['Big Boy', 'Big Boys'],\n [\"Blake's Lotaburger\", 'Blakes Lotaburger'],\n ['Blimpie', 'BLIMPIE'],\n [\"Bob's Burger Brew\",\n  \"Bob's Burgers Brew\"],\n ['Bojangles Famous Chicken n Biscuits',\n  \"Bojangles' Famous Chicken 'n Biscuits\"],\n ['Burger King', 'Burger King\u00ae'],\n ['Burger Master', 'Burgermaster'],\n ['BurgerFi', 'Burgerfi'],\n ['Burgermaster', 'Burger Master'],\n ['Burrito Amigos', 'Burrtio Amigos'],\n ['C & J Drive In', 'C J Drive In'],\n [\"CULVER'S\", \"Culver's\", 'Culvers'],\n [\"Captain D'S\", 'Captain Ds'],\n [\"Carl's Jr\", \"Carl's Jr.\", 'Carls Jr'],\n [\"Chan's Restaurant\", \"Chen's Restaurant\"],\n ['Chanellos Pizza', 'Chanello\u2019s Pizza'],\n [\"Charley's Grill & Spirits\", \"Charley's Grill Spirits\"],\n [\"Charley's Grilled Subs\", 'Charleys Grilled Subs'],\n [\"Chen's Restaurant\", \"Chan's Restaurant\"],\n ['Chick-Fil-A', 'Chick-fil-A', 'ChickfilA'],\n ['China Sea', 'China Star', 'China Bear'],\n [\"Church's Chicken\", 'Churchs Chicken'],\n [\"Cisco's Taqueria\", 'Ciscos Taqueria'],\n ['Cook Out', 'Cook-Out', 'CookOut'],\n [\"Culver's\", \"CULVER'S\", 'Culvers'],\n ['Dairy Queen', 'Dairy queen'],\n ['Dairy Queen Grill & Chill', 'Dairy Queen Grill Chill'],\n [\"Dominic's of New York\", 'Dominics of New York'],\n [\"Domino's Pizza\", 'Dominos Pizza'],\n ['Dunkin Donuts', \"Dunkin' Donuts\"],\n ['Einstein Bros Bagels', 'Einstein Bros. Bagels'],\n ['Emidio & Sons Italian Restaurant', 'Emidio Sons Italian Restaurant'],\n [\"Famous Dave's\", 'Famous Daves'],\n [\"Farlow's On The Water\", 'Farlows on the Water'],\n [\"Fazoli's\", 'Fazolis'],\n ['Fireplace Restaurant & Lounge', 'Fireplace Restaurant Lounge'],\n ['Five Guys Burgers & Fries', 'Five Guys Burgers Fries'],\n [\"Fox's Pizza Den\", 'Foxs Pizza Den'],\n [\"Freddy's Frozen Custard & Steakburgers\",\n  'Freddys Frozen Custard Steakburgers',\n  \"Freddy's Frozen Custard Steakburgers\"],\n [\"Frisch's Big Boy Restaurant\",\n  \"1 Frisch's Big Boy Restaurant\",\n  \"40 Frisch's Big Boy Restaurant\",\n  \"1 Frisch's Big Boy Restaurant\",\n  \"90 Frisch's Big Boy Restaurant\"],\n ['Full Moon Bar B Que', 'Full Moon Bar-B-Que'],\n [\"George's Gyros Spot\", \"George's Gyros Spot 2\"],\n ['Grub Burger Bar', 'Bru Burger Bar'],\n [\"Guthrie's\", 'Guthries'],\n ['Gyro Express', 'Gyro X-Press'],\n ['Gyro Spot', 'Gyro Stop'],\n [\"Hardee's\", 'Hardees'],\n [\"Hardee's Restaurant\", \"Hardee's Restaurants\"],\n [\"Hardee's\/Red Burrito\", \"Hardee's\/red Burrito\", 'Hardees Red Burrito'],\n ['HomeTown Buffet', 'Hometown Buffet'],\n ['Hooters', 'Roosters'],\n ['Hot Dog On A Stick', 'Hot Dog on a Stick'],\n ['In-N-Out Burger', 'InNOut Burger'],\n [\"Jack's\", 'Jacks'],\n [\"Jack's Hamburgers\", \"Zack's Hamburgers\"],\n [\"Jason's Deli\", 'Jasons Deli'],\n [\"Jersey Mike's Subs\", 'Jersey Mikes Subs'],\n [\"Jimmy John's\", 'Jimmy Johns'],\n ['KFC', 'Kfc', 'KFC Kentucky Fried Chicken', 'KFC - Kentucky Fried Chicken'],\n ['Killer Burger', 'Killer Burgers'],\n ['L & L Hawaiian Barbecue', 'L L Hawaiian Barbecue',\n  'LL Hawaiian Barbecue'],\n [\"Long John Silver's\", 'Long John Silvers'],\n ['Mai Tai Restaurant', 'Mai-Tai Restaurant'],\n [\"Mary's Pizza Shack\", 'Marys Pizza Shack'],\n [\"Mc Donald's\", \"McDonald's\", 'Mcdonalds', 'McDonalds'],\n [\"McAlister's Deli\", \"Mcalister's Deli\", 'McAlisters Deli'],\n [\"Moe's Southwest Grill\", 'Moes Southwest Grill'],\n ['Mr Hero', 'Mr. Hero'],\n ['Nicholas Restaurant', \"Nicholas' Restaurant\"],\n [\"Papa John's Pizza\", 'Papa Johns Pizza'],\n ['Peking Chinese Restaurant', 'Peking Chinese Restaurants'],\n [\"Pietro's Pizza & Gallery of Games\", \"Pietro's Pizza Gallery of Games\"],\n [\"Popeye's Louisiana Kitchen\", 'Popeyes Louisiana Kitchen'],\n ['Pot Belly Sandwich Works', 'Potbelly Sandwich Works'],\n ['QDOBA Mexican Eats', 'Qdoba Mexican Eats'],\n ['RUNZA', 'Runza'],\n [\"Raising Cane's Chicken Fingers\", 'Raising Canes Chicken Fingers'],\n [\"Rally's\", 'Rallys'],\n [\"Rally's Hamburgers\", 'Rallys Hamburgers'],\n [\"Rick's on the River\", 'Ricks on the River'],\n [\"Ritter's Frozen Custard\", 'Ritters Frozen Custard'],\n [\"Rockne's\", 'Rocknes'],\n ['Roosters', 'Hooters'],\n ['Runza', 'RUNZA'],\n [\"Ryan's\", 'Ryans'],\n ['SONIC Drive In',\n  'Sonic Drive-In',\n  'SONIC Drive-In',\n  'Sonic DriveIn',\n  'Sonic Drive-in'],\n [\"STEAK 'N SHAKE\",\n  \"Steak 'n Shake\",\n  'Steak N Shake',\n  'Steak n Shake',\n  \"Steak 'N Shake\"],\n ['SUBWAY', 'Subway'],\n [\"Sara's Too\", 'Saras Too'],\n [\"Simple Simon's Pizza\", 'Simple Simons Pizza'],\n ['Slice Of Life', 'Slice of Life'],\n [\"Stanfield's Steakhouse\", 'Stanfields Steak House'],\n ['T & L Hotdogs', 'T & L Hot Dogs'],\n ['Taco CASA', 'Taco Casa'],\n ['Taco Del Mar', 'Taco del Mar'],\n [\"Taco John's\", 'Taco Johns'],\n ['Taco Time', 'TacoTime'],\n ['Taste Of Buffalo Pizzeria', 'Taste of Buffalo Pizzeria'],\n ['Tom Drive-in', \"Tom's Drive-In\"],\n [\"Topper's Pizza\", 'Toppers Pizza'],\n ['WG Grinders', 'Wg Grinders'],\n [\"Wendy's\", 'Wendys'],\n ['Wg Grinders', 'WG Grinders'],\n ['Wing Street', 'Wingstreet'],\n ['Z-Pizza', 'zpizza'],\n [\"Zack's Hamburgers\", \"Jack's Hamburgers\"]]\nprint(\"cleaned, matched restaurant name count:\", len(most_similar_sorted))","d532a70d":"# let's create a dictionary to make name replace easier\nmatch_name_dict = {}\nfor row in most_similar_sorted:\n    for similar_word in row:\n        match_name_dict[similar_word] = row[0]\nmatch_name_dict","306af4ab":"# let's use the match_name_dict to replace names in the dataset to make it cleaner\nnames = fastfood_data['name'].values\nprint(\"size:\", len(names))\n\n# replace names with their dictionary value\nfor i in range(len(names)):\n    if match_name_dict.get(names[i]) != None:\n        names[i] = match_name_dict[names[i]]\n\nfastfood_data['names'] = names","9d856506":"# top 20 restaurants recorded by count total\nprint(\"Number of unique restaurant:\", fastfood_data['name'].nunique())\nnameplot = fastfood_data['name'].value_counts()[:20].plot.bar(title='Top 20 mentioned restaurants')\nnameplot.set_xlabel('name',size=20)\nnameplot.set_ylabel('count',size=20)","826fdff3":"# take a peek at the dateAdded column\nfastfood_data['dateAdded'].head()","d0a8ced0":"# let's parse the dates for dateAdded and dateUpdated\nfrom datetime import datetime\nfrom dateutil.parser import parse","b1a015cc":"# let's convert dateAdded and dateUpdated column data to \n# datetime object with apply function\nfastfood_data['dateAdded'] = fastfood_data['dateAdded'].apply(\n        lambda x: datetime.strptime(x, '%Y-%m-%dT%H:%M:%SZ'))\nfastfood_data['dateUpdated'] = fastfood_data['dateUpdated'].apply(\n        lambda x: datetime.strptime(x, '%Y-%m-%dT%H:%M:%SZ'))","0d0bbdaa":"# check the top 6 rows again to verify the datatype has changed\nprint(fastfood_data['dateAdded'].head())\nprint()\nprint(fastfood_data['dateUpdated'].head())","aad0d4e7":"# we can see the data type changed for the date related columns\nfastfood_data.dtypes","32c3ebf4":"# histogram of dateAdded column\nplt.hist(fastfood_data['dateAdded'])\nplt.xlabel(\"date\")\nplt.ylabel(\"frequency (count)\")\nplt.title(\"Histogram of dateAdded column\")\nplt.show()\n\n# histogram of dateUpdated column\nplt.hist(fastfood_data['dateUpdated'], color=\"orange\")\nplt.xlabel(\"date\")\nplt.ylabel(\"frequency (count)\")\nplt.title(\"Histogram of dateUpdated column\")\nplt.show()","b508898a":"# what types of category do we have for primary categories?\nfastfood_data['primaryCategories'].value_counts()","b064f53c":"# drop primaryCategory column\nfastfood_data = fastfood_data.drop(['primaryCategories'], axis=1)\n\n# shape of dataset\nprint(\"Dimension after dropping columns:\")\nprint(fastfood_data.shape)\n\n# take a peek at the head to verify the drop is successful\nfastfood_data.head()","9ce49efb":"# let's split the categories string data by \",\"\ncategories = fastfood_data['categories'].values\nfor i in range(len(categories)):\n    categories[i] = categories[i].split(\",\")","94327437":"# update the \"categories\" column in the fastfood_data\nfastfood_data['categories'] = categories\nfastfood_data.head()","cc12b484":"# top 50 most appeared restaurants in the dataset and their corresponding category\ntop50_name_by_number = fastfood_data['name'].value_counts()[:50].index.tolist()\ntop50_rest_categories = []\nfor name in top50_name_by_number:\n    category = fastfood_data[fastfood_data.name == name][\"categories\"][:1].values[0]\n    top50_rest_categories.append(category)","90a43c20":"# remove stopword \"Restaurants\", \"Restaurant\", and \"Fast Food Restaurants\" in categories\nstopwords = [\"Fast Food Restaurants\",\"Fast Food restaurants\", \"Fast Food\", \"Restaurants\", \"Restaurant\", \"restaurants\", \"restaurant\"]\nfor i in range(len(top50_rest_categories)):\n    for j in range(len(top50_rest_categories[i])):\n        word = top50_rest_categories[i][j]\n        # remove stopword as the only word given\n        for stopword in stopwords:\n            isRemoved = False\n            if isRemoved == False and word == stopword:\n                top50_rest_categories[i][j] = top50_rest_categories[i][j].replace(stopword, \"\")\n                isRemoved = True\n\n        # replace the stopword within a group of words\n        for stopword in stopwords:\n            if isRemoved == False and stopword in word:\n                top50_rest_categories[i][j] = top50_rest_categories[i][j].replace(stopword, \"\")","a9b8c416":"top50_rest_categories","df7b7ab2":"from wordcloud import WordCloud\n\n# empty string is declare \ntext = \"\" \n\n# iterating through list of rows \nfor row in top50_rest_categories : \n    # iterating through words in the row \n    for word in row:\n        if len(word) == 0:\n            continue\n        # concatenate the words \n        if word[-1] == \" \":\n            word = word[:-1] # remove the last space character\n        text = text + \" \" + word.replace(\" \", \"_\") \nprint(\"Vocabulary of our processed categories data:\\n\")\nprint(text)","14ede4c7":"# generate wordcloud\nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white',\n                min_font_size = 10).generate(text) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (16, 16), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","5ea96139":"# top 20 fast food populated cities recorded by count total\nprint(\"Number of unique cities:\", fastfood_data['city'].nunique())\nnameplot = fastfood_data['city'].value_counts()[:20].plot.bar(title='Top 20 mentioned cities')\nnameplot.set_xlabel('city',size=20)\nnameplot.set_ylabel('count',size=20)","29d036d7":"# let's run pandas' .descirbe() function \nrest_count_by_city = fastfood_data['city'].value_counts()\nrest_count_by_city.describe()","6c1833d2":"print(len(rest_count_by_city[rest_count_by_city < 4]), \"cities opened less than 4 fast food restaurants\")\nprint(\"They are\", round(100*len(rest_count_by_city[rest_count_by_city < 4])\/len(rest_count_by_city),2), \"%\"),\nprint(\"of the total cities recorded in the dataset\")","eb4f8f85":"# plot pie chart\nfig, ax = plt.subplots()\ntotal_cities_with_less_than_4_rests = len(rest_count_by_city[rest_count_by_city < 4])\ntotal_cities_with_greater_equal_4_rests = fastfood_data['city'].nunique() - total_cities_with_less_than_4_rests\nvalues = [total_cities_with_less_than_4_rests, total_cities_with_greater_equal_4_rests]\nax.pie(values, \n       labels=[\"city opened 1-3 shops\", \"city opened more than 3 shops\"], autopct='%.1f%%', radius=1, \n       explode = (0.1, 0))\nax.set_aspect('equal')\nax.set_title(\"US Cities' Fast Food Restaurants Number\")\nplt.show()","e4b89e88":"# input 2 letter code name for easier conversion\nus_state_names = pd.read_csv('..\/input\/us2letterstatecodecsv\/US-2-letter-state-code.csv')\nus_state_names.head()","3b64cc99":"us_state_names.columns","1b0e0315":"# convert the names of the states\ndef convert_state_names(state_code):\n    return us_state_names[us_state_names['state_code']== state_code].values[0][0]\n\n# use the above function to convert code to name\nfastfood_data['province_full'] = \"\"\nstate_names = [None] * len(fastfood_data['province'].values)\nstate_codes = fastfood_data['province'].values\nfor i in range(len(state_codes)):\n    state_names[i] = convert_state_names(state_codes[i])\nprint(state_names[:20])\n\n# # let's replace the province column values with full state names\nfastfood_data['province_full'] = state_names","b0aec111":"fastfood_data['province_full'].value_counts()","aef70a1e":"fastfood_data['province'].head()","a4352917":"# top 20 fast food populated states recorded by count total\nprint(\"Number of unique provinces:\", fastfood_data['province_full'].nunique())\nnameplot = fastfood_data['province_full'].value_counts()[:20].plot.bar(title='Top 20 mentioned province')\nnameplot.set_xlabel('state',size=20) # changed the label to state; it's the US\nnameplot.set_ylabel('count',size=20)","7f53d434":"fastfood_data['province_full'].value_counts().describe()","aadd5073":"fastfood_data['province_full'].value_counts()[fastfood_data['province_full'].value_counts() == 1]","c6d6f931":"# get top 3 fast food populated cities\ntop3_fastfood_populated_cities = fastfood_data['city'].value_counts()[:3].index.tolist()\ntop3_fastfood_populated_cities[:3]","31305f62":"# take a look at the restaurant numbers\nfastfood_data[fastfood_data[\"city\"]==\"Columbus\"][\"names\"].value_counts()","f050a9e1":"# get the restaurant number count by unique restaurant name\ndef get_restaurants_counts(city_name):\n    return fastfood_data[fastfood_data[\"city\"]==city_name][\"names\"].value_counts()\n\n# print the restaurants that opened more than 1 shop\ndef print_more_than_1_shop_rest(restaurants, city_name):\n    more_than_1_shops = restaurants[restaurants > 1]\n    print(\"\\nAmong\", len(restaurants), \"unique fastfood restaurant brands in\", city_name+\",\")\n    print(len(more_than_1_shops), \"brands opened more than 1 shops.\")\n    print(\"They occupied\", str(round(len(more_than_1_shops)\/sum(restaurants)*100,2))+\n          \"% of total restaurants by number\")\n    print(more_than_1_shops)","71fec76c":"# let's generate a quick summary of the shops\nfor city in top3_fastfood_populated_cities:\n    print_more_than_1_shop_rest(get_restaurants_counts(city), city)","a1d121c8":"# reusable function to create data needed for plotting pie chart\ndef create_pie_chart_data(city_name):\n    counts =  fastfood_data[fastfood_data[\"city\"]==city_name][\"names\"].value_counts()[:10].values\n    labels = fastfood_data[fastfood_data[\"city\"]==city_name][\"names\"].value_counts().index.tolist()[:10]\n    return counts, labels","d41a24ee":"# reusable function to plot pie chart for our EDA\ndef plot_pie_chart(counts, labels, city_name):\n    fig, ax = plt.subplots()\n    ax.pie(counts, labels=labels, autopct='%.1f%%', radius=1.1, \n          explode = (0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n    ax.set_aspect('equal')\n    ax.set_title(\"Top 10 Restaurants in \" + city_name)\n    plt.show()","aef0a1eb":"# for each city, let's create the data needed and plot them in pie chart\nfor city in top3_fastfood_populated_cities:\n    counts, labels = create_pie_chart_data(city)\n    print(labels[:3], \"are the top 3 populated restaurants in\", city)\n    plot_pie_chart(counts, labels, city)","4335b68f":"from plotly.offline import init_notebook_mode, iplot\nfrom plotly.graph_objs import *\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","a0695ac4":"# create data needed\nstate_codes = fastfood_data['province'].value_counts().index.tolist()\nvalue_counts_by_states = fastfood_data['province'].value_counts()\n\n# plotly choropleth\ndata= [dict(type='choropleth',\n            locations = state_codes, # Spatial coordinates\n            z = value_counts_by_states, # Data to be color-coded\n            locationmode = 'USA-states', # set of locations match entries in `locations`\n            colorscale = 'Reds',\n            marker_line_color = 'white',\n            colorbar_title = \"Number of Fast Fast Restaurants\"\n        )]\nlayout = dict(title = '2019 US Fast Food Restaurants by State', \n              geo = dict(scope='usa'))\niplot(dict(data=data, layout=layout))","459805b8":"data = [dict(type = 'scattergeo',\n            locationmode = 'USA-states',\n            lon = fastfood_data['longitude'],\n            lat = fastfood_data['latitude'],\n            mode = 'markers',\n            marker = dict(size = 3,\n                opacity = 0.7,\n                reversescale = True,\n                autocolorscale = False,\n                symbol = 'circle',\n                line = dict(width=.5, color='black'),\n                color = 'red'\n            )\n        )]\n\nlayout = dict(title = '2019 US Fast Food Restaurants by GPS location',\n            geo = dict(scope='usa',\n                showland = True,\n                landcolor = \"rgb(250, 250, 250)\",\n                subunitcolor = \"rgb(217, 217, 217)\"\n            )\n        )\niplot(dict(data=data, layout=layout ))","4cd93336":"# input census data with \"|\" as separator\nus_census_data = pd.read_csv('..\/input\/us-census-2017\/US-Census-2017.txt', sep=\"|\", names=[\"state\", \"population\"])\nus_census_data.head()","317dbdda":"# we have number of restaurants per state before\nvalue_counts_by_states.head()","e737165e":"test = int(us_census_data[us_census_data['state']==\"California\"].iloc[0,1].replace(\",\",\"\"))\nprint(test-1)","aa8c65ca":"# let's divide the population by people in each state\nper_capita_count = [None] * len(state_codes)\nfor i in range(len(state_codes)):\n    state = fastfood_data[fastfood_data['province']==state_codes[i]]['province_full'][:1]\n    per_capita_count[i] = value_counts_by_states[i] \/ int(us_census_data[us_census_data['state']==\"California\"].iloc[0,1].replace(\",\",\"\"))\nper_capita_count[:10]","a7ce287f":"# plotly choropleth\ndata= [dict(type='choropleth',\n            locations = state_codes, # Spatial coordinates\n            z = per_capita_count, # Data to be color-coded\n            locationmode = 'USA-states', # set of locations match entries in `locations`\n            colorscale = 'Reds',\n            marker_line_color = 'white',\n            colorbar_title = \"Restaurants opened \/ population\"\n        )]\nlayout = dict(title = 'Ratio between number of fast food Restaurants and population', \n              geo = dict(scope='usa'))\niplot(dict(data=data, layout=layout))","aae9d078":"## 3. Let's drop id, keys, sourceURLs, and websites first","aabbd65b":"### They are string or not datetime object.\n### Let's convert them so we can access date and time easier","1f67d2e3":"### Many cities has only 1-3 restaurants opened and our mean number of restaurants opened is 3.55.\n### How many are cities open less than 4 fast food restaurants in our dataset?","bd02bd7e":"## Question 0: How many fastfood restauraunts are recorded","49f57bc7":"![image.png](attachment:image.png)","b180ca04":"### input the lastest 2017 US Census Data for each state","0dcc9fcc":"#### If you exam the output of the most_similar list, you can see edit-distance algorithm did a very good job except some minor inaccurate results.","87c84385":"### A lot of restaurants only opened 1 shop. Let's take a look how many restaurants open more than 1 shop in the top 3 fast food populated cities","d25e7960":"### If you take a look at the above scatter plot, you can see most of fast food restaurants are located in very populated cities and borders of several states.","f0347f7f":"## 2. Let's take a peek at what we have[](http:\/\/)","359cba35":"## 1. Let's input dataset first","167ada4b":"### If you like this kernel, please give me an Up Vote on top by clicking the up arrow.\n### Below are my super detailed exploratory data analysis with visualizations.\n## Packages used: \n#### 1. Data manipulation: numpy, pandas, datetime, dateutil.parser\n#### 2. Visualization: matplotlib, plotly, wordcloud\n#### 3. Natural Language Processing(NLP): NLTK\n\n### Data is collected from 2014 to May 2019.","9665dd6e":"## Question 1: What are the top 20 recorded fastfood restaurant by count?","40bfdd3c":"## Question 7: What's the geospatial perspective of the restaurants in differnt states?","24d85017":"### Let's convert our fastfood_data dataframe's state to their full name instead of 2 letter code first","6eb0e240":"#### We can see that McDonald's, Subway, SUBWAY are the top3 mentioned places to eat fast food\n## NLP: More data cleaning is needed!!!\n#### We can see there are \"McDonald's\" and \"McDonalds\" and \"Subway\" and \"SUBWAY\"\n#### Let's apply NLTK's edit distance function to find the edit distance between those names\n\n#### **Edit Distance:** The distance between the source string and the target string is the minimum number of edit operations (deletions, insertions, or substitutions) required to transform the source into the target. The lower the distance, the more similar the two strings. ","5379bc23":"## Question 5: What states are crowded with fast food restaurants?","c714f877":"#### Continue to the 'category' column","6683b857":"### let's run pandas' .descirbe() function to see the min, max, and mean of number of fast food restaurants in different cities","d10b694c":"### Let's create WordCloud with given categories","f8ea439d":"## Explore American Fast Food Restaurants Data\n![image.png](attachment:image.png)","85b25b0d":"##  Question 2: When are the data recorded and updated?","4c6bae42":"## 9. Ratio between fast food restaurants opened and population","ba90930b":"## Question 4: What cities are crowded with fast food restaurants?","8ad68573":"### From above combined histograms, we can observe:\n#### 1: Newly updated data are primary recorded in 2019.\n#### 2: Many data are originally recorded from 2014-2019.","067e21e7":"### From the above visualization, the output is consistent with the restaurant per state choropleth. This shows the restaurants are opened based on the populations in each state. That makes sense because restaurants need customers to visit their shops.","b7b99209":"### From above quick summaries, many fast food restaurants actually have opened 1 shop in the top 3 fast food populated cities: 14.29%, 22.34%, and 20.25% of total fast food restaurants number in Columbus, Indianapolis, and Birmingham respectively.","0fcd32b4":"### The top right corner has no color showed because those states have no fast food resaurants data input.","d4d22077":"## Question 8: How are the fast food restaurants scattered?","a10b1081":"### Here is the end of the EDA.\n### If you like this kernel, please give me an Up Vote on top by clicking the up arrow.\n### Feel free to leave a comment!","9e7ab98e":"## 4. Let's check do we have missing data","e0f9d546":"#### The reason why I also track similar words for words that have already be recorded is because examples like this can derive more unseen but similar words.\n['L & L Hawaiian Barbecue', 'L L Hawaiian Barbecue'],\n\n['L L Hawaiian Barbecue',\n  'LL Hawaiian Barbecue',\n  'L L Hawaiian Barbeque',\n  'L & L Hawaiian Barbecue']","276a9c93":"Image from \"World Population Review\": http:\/\/worldpopulationreview.com\/countries\/united-states-population\/","d1315cdd":"### From above descriptions, the stats show that the average number of fast food restaurants opened in different US states is 212. \n### Among 47 recorded states, OH(Ohio) has the maximum number of fast food restaurants opened. In Ohio, there are 922 fast food restaurants opened. CT(Connecticut) has only 1 fast food restaurant opened.","5bad72d7":"### In each city, let's consider the top 10 restaurants as population and plot the percentage of appearance of each top 10 restaurants with pie chart.","b69a5a44":"### From about wordcloud visualization, you can notice that most of the top 50 mentioned fast food restaurants has the categories of \"take out\", \"American\", and \"Hamburger and Hot Dogs\"","d86fd09e":"## 7. Explore the food categories and visualize them","c52a7a46":"#### From above pie-chart, we can see 75.5% of the cities in our dataset has only opened 1-3 fast food restaurants.","3258bae1":"### Comparing the population scatter plot of 2017 US Census data and the scatter plot of our dataset, it's intuitive to see the restaurants are opened in populated areas. That's probably why states like Maine has no fast food restaurant record in the dataset whereas the California region is filled with red dots. ","babb9ae6":"#### uncomment if you want to run the edit-distance similarity checking.\n### Due the reason of time-consuming, I commented out the code.\n### I copied and pasted the results to cells below","f0a64efd":"#### Hmm, they are all listed as \"Accommodation & Food Services\"\n#### Let's drop this column too","31b257ca":"## 8. Let's explore the location data of given dataset","be3326e8":"## Questions 6: What are the proportions of different fast food restaurants in top 3 mentioned cities?","f65e352b":"## Question 9: What is the restaurant per person ratio for each city?","64e2d460":"## Question 3: What are the common categories of top 50 mentioned restaurant?","0d685676":"#### After cleaning the data by using edit-distance and dictionary to store replaced matched, we can see that Mc Donald's became the 2nd most-mentioned fastfood restaurants and SUBWAY became the 1st. Many similar expressions are harmonized now.","2b006929":"#### The above word cloud is generated by the Fast Food Dataset and plotted by wordCloud package with Python","f61dc604":"## Table of Contents:\n[Packages Used](#Packages-used) \n\n[1. Input Dataset](#1.-Let's-input-dataset-first) \n\n[2. Take a peek at the data](#2.-Let's-take-a-peek-at-what-we-have)\n\n[3. Let's check do we have missing data](#3.-Let's-drop-id,-keys,-sourceURLs,-and-websites-first)\n\n[4. Let's drop id, keys, sourceURLs, and websites first](#3.-Let's-drop-id,-keys,-sourceURLs,-and-websites-first)\n\n[5. Restarant Names Exploration and Visualizations:](#5.-Restarant-Names-Exploration-and-Visualizations:)\n\n[6. NLP: More data cleaning](#Questions-6:-What-are-the-proportions-of-different-fast-food-restaurants-in-top-3-mentioned-cities?)\n\n[7. Explore the food categories and visualize them](#Question-7:-What's-the-geospatial-perspective-of-the-restaurants-in-differnt-states?)\n\n[8. Let's explore the location data of given dataset](#Question-8:-How-are-the-fast-food-restaurants-scattered?)\n\n[9. Ratio between restaurants opened and population](#9.-Ratio-between-fast-food-restaurants-opened-and-population)\n","d07f67c8":"## Let's explore the data now!\n#### Among the 12 columns we have:\n#### 1  column with fastfood restaraunt's **name**: [*name*]\n#### 2  **date** data columns: [*dateAdded*, *dateUpdated*]\n#### 2  fast food **category** columns: [*categories*, *primaryCategories*]\n#### 7  **location** data columns: [*address*, *city*, *country*, *latitude*, *longtitude*, *postalCode*, *province*]","03814277":"## 5. Restarant Names Exploration and Visualizations:","0d4dc918":"![image.png](attachment:image.png)","4f6714cd":"### From above choropleth, the interactive visualization shows Ohio(OH), Florida(FL), California(CA), and North Carolina(NC) have the darker red, which indicated there are more restaurants opened in those states than the others.","8479f8b3":"#### Now, let's replace the matched names in our original dataset","5659ee77":"### Let's present our finding with pie chart to show the percentage","84da8c42":"## 6. Date data processing and visualizations\n### Let's process the dateAdded and dateUpdate data"}}