{"cell_type":{"db401f05":"code","2b305c71":"code","5e3bdbed":"code","b5b0a082":"code","d93753b1":"code","0959f84b":"code","e914a217":"code","bf0d39ca":"code","3720a367":"code","34de6e55":"code","65dac652":"code","7263d8ed":"code","60fceec3":"code","68df87f9":"code","05d68009":"code","6ea95ebf":"code","9d2cd224":"code","3968a8c3":"code","8f4db704":"code","b7200146":"code","9986297c":"code","930e099b":"code","02ea7799":"code","8ec0fa19":"code","6d53318f":"code","eb5bb817":"code","46f1ced9":"code","313fe06d":"code","10d1f569":"code","5f1254c8":"code","c5fc41fa":"code","4889c580":"markdown","015e17cf":"markdown","fd791b21":"markdown","602b1df9":"markdown","81e9ae06":"markdown","ce0636dd":"markdown","c7fdbc53":"markdown","8b57fdd9":"markdown","fb578884":"markdown","e2a2a34b":"markdown","6152de73":"markdown","72731eb3":"markdown","0ea43433":"markdown","a48be01e":"markdown","63a8fcf7":"markdown"},"source":{"db401f05":"# Heart Failure Prediction","2b305c71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e3bdbed":"import seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom warnings import filterwarnings\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfilterwarnings(\"ignore\")\n\n\ndata =pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")","b5b0a082":"print(data.shape)","d93753b1":"print(data.head())\n\n","0959f84b":"print(data.info())","e914a217":"print(data.describe().T)","bf0d39ca":"corr_matrix =data.corr()\nsns.clustermap(corr_matrix,annot=True,fmt=\".2f\")\nplt.show()","3720a367":"fig, axs = plt.subplots(4, 3, figsize=(12, 12))\n\nsns.histplot(data=data[\"age\"], kde=True, color=\"skyblue\", ax=axs[0, 0])\nsns.histplot(data=data[\"anaemia\"], kde=False, color=\"olive\", ax=axs[0, 1])\nsns.histplot(data=data[\"creatinine_phosphokinase\"], kde=True, color=\"gold\", ax=axs[0, 2])\n\nsns.histplot(data=data[\"diabetes\"], kde=False, color=\"skyblue\", ax=axs[1, 0])\nsns.histplot(data=data[\"ejection_fraction\"], kde=True, color=\"olive\", ax=axs[1, 1])\nsns.histplot(data=data[\"high_blood_pressure\"], kde=False, color=\"gold\", ax=axs[1, 2])\n\nsns.histplot(data=data[\"platelets\"], kde=True, color=\"skyblue\", ax=axs[2, 0])\nsns.histplot(data=data[\"serum_creatinine\"], kde=True, color=\"olive\", ax=axs[2, 1])\nsns.histplot(data=data[\"serum_sodium\"], kde=True, color=\"gold\", ax=axs[2, 2])\n\nsns.histplot(data=data[\"sex\"], kde=False, color=\"skyblue\", ax=axs[3, 0])\nsns.histplot(data=data[\"smoking\"], kde=False, color=\"olive\", ax=axs[3, 1])\nsns.histplot(data=data[\"time\"], kde=True, color=\"gold\", ax=axs[3, 2])\n\nplt.show()","34de6e55":"zero =0\nones =0\nfor i in range(len(data[\"sex\"])):\n    if data[\"sex\"][i] == 0:\n        zero+=1\n    else :\n        ones+=1\n\nnames = ['zero', 'one']\nsize = [zero,ones]\n \nmy_circle = plt.Circle( (0,0), 0.7, color='white')\n\nplt.pie(size, labels=names, colors=['red','green'])\np = plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.show()","65dac652":"zero =0\nones =0\nfor i in range(len(data[\"smoking\"])):\n    if data[\"smoking\"][i] == 0:\n        zero+=1\n    else :\n        ones+=1\n        \nnames = ['zero', 'one']\n\nsize = [zero,ones]\nmy_circle = plt.Circle( (0,0), 0.7, color='white')\n\nplt.pie(size, labels=names, colors=['red','green'])\np = plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.show()","7263d8ed":"zero =0\nones =0\nfor i in range(len(data[\"high_blood_pressure\"])):\n    if data[\"high_blood_pressure\"][i] == 0:\n        zero+=1\n    else :\n        ones+=1\n        \nnames = ['zero', 'one']\nsize = [zero,ones]\n \nmy_circle = plt.Circle( (0,0), 0.7, color='white')\n\nplt.pie(size, labels=names, colors=['red','green'])\np = plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.show()","60fceec3":"dev =data.corrwith(data['DEATH_EVENT'])\nprint(dev)","68df87f9":"data.plot(y='serum_creatinine')\ndata.plot(y='creatinine_phosphokinase')\ndata.plot(y='ejection_fraction')\n","05d68009":"#Creatinine phosphokinase outlier \n\ncp_out=data[\"creatinine_phosphokinase\"]\nsns.boxplot(y=data[\"creatinine_phosphokinase\"] )\nplt.show()","6ea95ebf":"q1_cp_out=data[\"creatinine_phosphokinase\"].quantile(0.25) #Creatine phosphokinase  0.25 th value\nq3_cp_out =data[\"creatinine_phosphokinase\"].quantile(0.75)#Creatine phosphokinase  0.75 th value\n\nprint(q1_cp_out)\nprint(q3_cp_out)","9d2cd224":"igr_cp_out =q3_cp_out-q1_cp_out\nlow_lim_cp_out =q1_cp_out-1.5*igr_cp_out #lower limit\nup_lim_cp_out =q3_cp_out+1.5*igr_cp_out #upper limit\n\n\nprint(igr_cp_out)\nprint(low_lim_cp_out)\nprint(up_lim_cp_out)","3968a8c3":"cp_out_mean=581.839465\ncp_out[((cp_out>(up_lim_cp_out)) | (cp_out<(low_lim_cp_out)))]=cp_out_mean\n\n\nprint(data[\"creatinine_phosphokinase\"])\nsns.boxplot(y=data[\"creatinine_phosphokinase\"] )\nplt.show()\n","8f4db704":"sc_out=data[\"serum_creatinine\"]\nsns.boxplot(y=data[\"serum_creatinine\"] )\nplt.show()\n","b7200146":"q1_sc_out=data[\"serum_creatinine\"].quantile(0.25)#serum creatinine 0.25 th value\nq3_sc_out =data[\"serum_creatinine\"].quantile(0.75)#serum creatinine 0.75 th value\n\nprint(q1_sc_out)\nprint(q3_sc_out)","9986297c":"igr_sc_out =q3_sc_out-q1_sc_out\nlow_lim_p_out =q1_sc_out-1.5*igr_sc_out #lower limit\nup_lim_p_out =q3_sc_out+1.5*igr_sc_out #upper limit\n\nprint(low_lim_p_out)\nprint(up_lim_p_out)","930e099b":"sc_out_mean=1.393880\nsc_out[((sc_out>(up_lim_p_out)) | (sc_out<(low_lim_p_out)))]=sc_out_mean\nprint(data[\"serum_creatinine\"])\n\nsns.boxplot(y=data[\"serum_creatinine\"] )\nplt.show()\nprint(sc_out.mean())","02ea7799":"ef_out =data[\"ejection_fraction\"]\n\nsns.boxplot(y=data[\"ejection_fraction\"] )\nplt.show()","8ec0fa19":"q1_ef_out=data[\"ejection_fraction\"].quantile(0.25) #ejection_fraction 0.25 th value\nq3_ef_out =data[\"ejection_fraction\"].quantile(0.65) #ejection_fraction 0.65 th value\n\nprint(q1_ef_out)\nprint(q3_ef_out)","6d53318f":"igr_ef_out =q3_ef_out-q1_ef_out\nlow_lim_ef_out =q1_ef_out-1.5*igr_ef_out#lower limit\nup_lim_ef_out =q3_ef_out+1.5*igr_ef_out #upper limit\n\n\nprint(low_lim_ef_out)\nprint(up_lim_ef_out)","eb5bb817":"ef_out_mean=38.083612\nef_out[((ef_out>(up_lim_ef_out)) | (ef_out<(low_lim_ef_out)))]=ef_out_mean\n\nprint(data[\"ejection_fraction\"])\n\nsns.boxplot(y=data[\"ejection_fraction\"] )\nplt.show()","46f1ced9":"y=data[\"DEATH_EVENT\"]\nx=data.drop(\"DEATH_EVENT\",axis=1)\n\n\nx_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.2,random_state=1)","313fe06d":"\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","10d1f569":"## Model creation with Xgboost \n\n\nfrom xgboost import XGBClassifier\n\nmodel =XGBClassifier().fit(x_train,y_train)\ny_pred =model.predict(x_test)\nac = accuracy_score(y_test,y_pred)\ncon = confusion_matrix(y_test, y_pred)\naccuracies = []\naccuracies.append(ac)\nprint(\"Xgboost model accuary\",ac)\nprint(con)\n    ","5f1254c8":"## Model creation with RandomForestClassifier \n\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nmodel =RandomForestClassifier().fit(x_train,y_train)\ny_pred =model.predict(x_test)\nac = accuracy_score(y_test,y_pred)\ncon = confusion_matrix(y_test, y_pred)\naccuracies = []\naccuracies.append(ac)\nprint(\"RandomForestClassifier model accuary\",ac)\nprint(con)\n    ","c5fc41fa":"## Model creation with SVC\n\nfrom sklearn.svm import SVC\n\nmodel = SVC().fit(x_train, y_train)\n\ny_pred = model.predict(x_test)\nac = accuracy_score(y_test,y_pred)\ncon = confusion_matrix(y_test, y_pred)\naccuracies = []\naccuracies.append(ac)\nprint(\"SVC model accuary\",ac)\nprint(con)","4889c580":"# TABLE OF CONTENTS\n\n1-)Importing Libraries And Importing Data\n\n2-)Data Review\n\n3-)Exploratory Data Analysis\n\n4-)Outlier Detection\n\n5-)Preprocessing\n\n6-)Build Model And Accurcy Value","015e17cf":"# Effect Of Data On Death Event","fd791b21":"# 3-)Exploratory Data Analysis","602b1df9":"The properties with the most death event effect are serum creatinine, time and ejection_fraction.","81e9ae06":"**3-) EJECTION FRACTION**","ce0636dd":"# 5-)Standardize","c7fdbc53":"**2-) SERUM CREATININE**","8b57fdd9":"# 6-)Build Model And Accurcy Value","fb578884":"# 1-)Importing Libraries And Importing Data\n","e2a2a34b":"# 2-) Data Review","6152de73":"**1-) CREATININE PHOSPHOKINASE**","72731eb3":"# 4-)Outlier Detection (IQR Method)","0ea43433":"We will find outlier values of serum creatinine, creatine phosphokinase, ejection fraction properties by IQR Method and assign the mean values.","a48be01e":"# Split Data\n","63a8fcf7":"We haven't got null data."}}