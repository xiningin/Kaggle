{"cell_type":{"91ac6dcc":"code","bedc99d0":"code","f0b9ab4b":"code","a3e58987":"code","4193aae6":"code","aa60ff3b":"code","ae954dfd":"code","feffeeaf":"code","b39402ac":"code","1dd9866d":"code","a88aa78b":"code","8f6e88f2":"code","997f8f6b":"code","dd46cb3b":"code","c4a8b577":"code","11d16b2b":"code","27ead2be":"code","851004f8":"code","34012cfa":"code","94a2d63e":"code","d5fd7638":"code","d78f2485":"markdown","901f1987":"markdown","c1329737":"markdown","7efee8b1":"markdown","f1b77beb":"markdown"},"source":{"91ac6dcc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bedc99d0":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS","f0b9ab4b":"data = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\")\ndata.head()","a3e58987":"len(data)","4193aae6":"words = \"\"\nstopwords = set(STOPWORDS)\nfor review in data.description.values:\n    text = str(review)\n    text = text.split()\n    words += \" \".join([(i.lower() + \" \") for i in text])\n    \ncloud = WordCloud(width = 500, height = 500, background_color = 'white', stopwords = stopwords, min_font_size = 10)\ncloud.generate(words)\n\nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(cloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.title(\"Wine Reviews Word Cloud\", fontsize = 16)\n    \nplt.show() ","aa60ff3b":"import string\n\ndef clean_text(text):\n    words = str(text).split()\n    words = [i.lower() + \" \" for i in words]\n    words = \" \".join(words)\n    words = words.translate(words.maketrans('', '', string.punctuation))\n    return words\n\ndata['description'] = data['description'].apply(clean_text)","ae954dfd":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\nvocab_size = 15000\nmax_length = 50\noov_tok = \"<OOV>\"\n\ntokenizer = Tokenizer(num_words = vocab_size, oov_token = oov_tok)\ntokenizer.fit_on_texts(data.description.values)\nword_index = tokenizer.word_index","feffeeaf":"get_word = {v: k for k, v in word_index.items()}","b39402ac":"sequences = tokenizer.texts_to_sequences(data.description.values[::100])\n\nn_gram_sequences = []\nfor sequence in sequences:\n    for i,j in enumerate(sequence):\n        n_gram_sequences.append(sequence[:i + 1])\n        \nnp.array(n_gram_sequences).shape\n","1dd9866d":"n_gram_sequences = np.array(n_gram_sequences)\nmax_len = max([len(i) for i in n_gram_sequences])","a88aa78b":"padded = pad_sequences(n_gram_sequences, maxlen = max_len, padding = 'pre')\ninput_seq, labels = padded[:,:-1], padded[:,-1]\nlabels = tf.keras.utils.to_categorical(labels, num_classes = vocab_size)","8f6e88f2":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional, Flatten\n\ndef create_model():\n    model = Sequential()\n    model.add(Embedding(vocab_size, 64, input_length=max_len-1))\n    #model.add(Bidirectional(LSTM(20, return_sequences = True)))\n    model.add(Bidirectional(LSTM(20)))\n    model.add(Dense(vocab_size, activation='softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n    ","997f8f6b":"use_tpu = False\nif use_tpu:\n    # Create distribution strategy\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n    # Create model\n    with strategy.scope():\n        model = create_model()\nelse:\n    model = create_model()\n\nmodel.summary()","dd46cb3b":"history = model.fit(input_seq, labels, epochs=500, verbose=1)","c4a8b577":"import matplotlib.pyplot as plt\n\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.show()\n\nplot_graphs(history, 'accuracy')\nplot_graphs(history, 'loss')","11d16b2b":"review_length = int(len(words.split())\/len(data))  ## average review length","27ead2be":"seed_text = \"the wine\"\n\ndef write_review(seed_text):\n    for _ in range(review_length):\n        token_list = tokenizer.texts_to_sequences([seed_text])[0]\n        token_list = pad_sequences([token_list], maxlen=max_len-1, padding='pre')\n        pred_probs = model.predict(token_list)\n        predicted = np.random.choice(np.linspace(0, vocab_size - 1, vocab_size), p = pred_probs[0])\n        if predicted == 1: ## if it's OOV, pick the next most likely one.\n            pred_probs[0][1] = 0\n            predicted = np.random.choice(np.linspace(0, vocab_size - 1, vocab_size), p = pred_probs[0])\n        output_word = get_word[predicted]\n        seed_text += \" \" + output_word\n    print(seed_text)","851004f8":"write_review(\"the wine\")","34012cfa":"write_review(\"the wine\")","94a2d63e":"write_review(\"the taste\")","d5fd7638":"write_review(\"I felt\")","d78f2485":"First, I'm going to make a wordcloud of the reviews.","901f1987":"## Visualizing data","c1329737":"Shoutout to the Tensorflow Udacity course, which gave me some starter code for this.","7efee8b1":"Let's see if I can generate realistic-sounding wine reviews using Tensorflow.","f1b77beb":"## Generating Reviews"}}