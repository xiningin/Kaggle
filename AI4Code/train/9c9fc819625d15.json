{"cell_type":{"0ea021ba":"code","b3beb6fe":"code","0a70a3aa":"code","a0bcc888":"code","2e39bde3":"code","2652518c":"code","c82601b3":"code","b1a72e10":"code","0b0203cb":"code","33657e18":"code","f9a9f4d9":"code","0c23c2fd":"code","f9dd5a5c":"code","076c1dcd":"code","72ac7549":"code","2d6cd69c":"code","1ade1452":"code","db6b3134":"code","fe2788db":"code","f728bd7e":"code","e83e8c3c":"code","43e32fc7":"markdown","3934d45e":"markdown","18f40212":"markdown","38acf0af":"markdown","79227519":"markdown","97567ddf":"markdown","65b9a4bd":"markdown","6b5f91e6":"markdown","e2308812":"markdown","8c9b6398":"markdown","58f1d46f":"markdown","ef983b3c":"markdown","08eca4ea":"markdown","bc00a790":"markdown","e3ba832f":"markdown","1a55df0a":"markdown"},"source":{"0ea021ba":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dense, Flatten, BatchNormalization, Conv2D, MaxPool2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport matplotlib.pyplot as plt\n","b3beb6fe":"train_data = ImageDataGenerator(rescale = 1.\/255,\n                                shear_range = 0.2,\n                                zoom_range = 0.2,\n                                horizontal_flip = True)\ntrain_df = train_data.flow_from_directory('..\/input\/cat-and-dog\/training_set\/training_set',\n                                          target_size = (64,64),\n                                          batch_size = 32,\n                                          class_mode = 'binary')","0a70a3aa":"test_data = ImageDataGenerator(rescale = 1.\/255)\ntest_df = test_data.flow_from_directory('..\/input\/cat-and-dog\/test_set\/test_set',\n                                        target_size = (64,64),\n                                        batch_size = 32,\n                                        class_mode = 'binary')","a0bcc888":"cnn = tf.keras.models.Sequential()\ncnn.add(Conv2D(filters = 32,kernel_size = 3,activation = 'relu',input_shape = [64,64,3]))\ncnn.add(MaxPool2D(pool_size = 2,strides = 2))\ncnn.add(Conv2D(filters = 32,kernel_size = 3,activation = 'relu'))\ncnn.add(MaxPool2D(pool_size = 2,strides = 2))\ncnn.add(Flatten())\ncnn.add(Dense(units = 128,activation = 'relu'))\ncnn.add(Dense(units = 128,activation = 'relu'))\ncnn.add(Dense(units = 1,activation = 'sigmoid'))","2e39bde3":"cnn.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics = 'accuracy')","2652518c":"cnn.summary()","c82601b3":"cnn.fit(x = train_df,epochs = 30,validation_data = test_df)","b1a72e10":"plt.plot(cnn.history.history['accuracy'])\nplt.plot(cnn.history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Training set', 'Validation set'], loc='upper left')\nplt.show()","0b0203cb":"plt.plot(cnn.history.history['loss'])\nplt.plot(cnn.history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Training set', 'Validation set'], loc='upper left')\nplt.show()","33657e18":"train_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \\\n    .flow_from_directory('..\/input\/cat-and-dog\/training_set\/training_set',\n                         target_size=(224,224),\n                         classes=['cats', 'dogs'],\n                         batch_size=10)\n\ntest_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \\\n    .flow_from_directory('..\/input\/cat-and-dog\/test_set\/test_set', target_size=(224,224), classes=['cats', 'dogs'], batch_size=10, shuffle=False)","f9a9f4d9":"vgg16_model = tf.keras.applications.vgg16.VGG16()","0c23c2fd":"model = Sequential()\nfor layer in vgg16_model.layers[:-1]:\n    model.add(layer)","f9dd5a5c":"for layer in model.layers:\n    layer.trainable = False","076c1dcd":"model.add(Dense(units=2, activation='softmax'))","72ac7549":"model.summary()","2d6cd69c":"model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])","1ade1452":"model.fit(x = train_batches, \n          steps_per_epoch = len(train_batches),\n          epochs = 5,\n          validation_data = test_batches\n         )","db6b3134":"plt.plot(model.history.history['accuracy'])\nplt.plot(model.history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Training set', 'Validation set'], loc='upper left')\nplt.show();","fe2788db":"plt.plot(model.history.history['val_loss'])\nplt.plot(model.history.history['loss'])\nplt.title('model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Training set', 'Validation set'], loc='upper left')\nplt.show()","f728bd7e":"scores = pd.DataFrame({'Basic Cnn': cnn.evaluate(test_df),\n                         'VGG16': model.evaluate(test_batches)})\nscores","e83e8c3c":"scores.plot(kind = 'bar',\n              figsize = (10,10),\n              color = ['lightgreen','lightblue'])\nplt.title('Scores & Loss Comparision')\nplt.xlabel('0 = Loss,1 = Accuracy')\nplt.ylabel('Percent')\nplt.legend(['Bsic Cnn','VGG16'])\nplt.xticks(rotation = 0);","43e32fc7":"* Optimization","3934d45e":"* Comparing Both The Models","18f40212":"# Building Cnn Model from Scratch\n* Preprocessing the training set","38acf0af":"* Training","79227519":"# Visualization\n* Training Accuracy vs Test Accuracy","97567ddf":"* Training loss vs test loss","65b9a4bd":"# Visualization\n* Training Accuracy Vs Test Accuracy","6b5f91e6":"* Preprocessing \n* Training set\n* Test set","e2308812":"* Building Model","8c9b6398":"* Building the Model","58f1d46f":"#  If You Found This Kernal Useful Please Upvote It.\n#  Any Suggestions\/Feedbacks Would be Appreciated.","ef983b3c":"* Preprocessing the test set","08eca4ea":"* Training","bc00a790":"* Optimization","e3ba832f":"* Training Loss Vs Test loss","1a55df0a":"# Building Model using VGG16"}}