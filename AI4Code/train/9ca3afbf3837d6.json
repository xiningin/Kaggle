{"cell_type":{"508ddcb9":"code","96a95cef":"code","02b91f2c":"code","cffe8a52":"code","c4d563c1":"code","307fa4c4":"code","537c14aa":"code","0a7205d2":"code","0b584a44":"code","a877d17e":"code","93bc1a78":"code","68e31639":"code","031c449f":"code","94cbc9cb":"code","32f11364":"code","62ea48ca":"code","c95d594c":"code","b14391fb":"code","02cf6882":"code","5c436672":"code","0ed3b6ca":"code","e03e7a1e":"code","8a733a55":"code","4de1e481":"code","71983836":"code","65b874ea":"code","200a87c3":"code","ab0c909b":"code","5da22315":"code","2c53dde2":"code","0c0fa1b3":"code","7ee8fb1a":"code","fab2cb4c":"code","bd74a2c3":"code","4e8a5046":"markdown","5e786a98":"markdown","ffe914d9":"markdown","93189956":"markdown","9666514f":"markdown","49cf6d2b":"markdown","87742abc":"markdown","aa27f46a":"markdown"},"source":{"508ddcb9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","96a95cef":"df = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\ndf.head()","02b91f2c":"df.shape","cffe8a52":"df.info()","c4d563c1":"df.columns","307fa4c4":"df.describe(include='O')","537c14aa":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()","0a7205d2":"df = df.apply(LabelEncoder().fit_transform)","0b584a44":"df['class'].value_counts()","a877d17e":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr(),annot=True)","93bc1a78":"X = df.drop('class',axis=1)\ny = df['class']","68e31639":"y","031c449f":"X.describe()","94cbc9cb":"from sklearn.preprocessing import StandardScaler\nS = StandardScaler()","32f11364":"X = pd.DataFrame(S.fit_transform(X),columns=X.columns)","62ea48ca":"X.head()","c95d594c":"from sklearn.model_selection import train_test_split","b14391fb":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3)","02cf6882":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","5c436672":"LR = LogisticRegression()\nRFC = RandomForestClassifier()","0ed3b6ca":"LR.fit(X_train,y_train)\nRFC.fit(X_train,y_train)","e03e7a1e":"print(\"Logistic Regression\",LR.score(X_test,y_test))\nprint(\"RandomForest Classifier\",RFC.score(X_test,y_test))","8a733a55":"y_predL = LR.predict(X_test)     #Logistic\ny_predRF = RFC.predict(X_test)   #RandomForest","4de1e481":"from sklearn.model_selection import cross_val_score\nscoreL = cross_val_score(LR,X,y,cv=5)\nscoreRF = cross_val_score(RFC,X,y,cv=5)","71983836":"print(\"Logistic cross_val_score\",np.mean(scoreL))\nprint(\"Random Forest Classifier cross_val_score\",np.mean(scoreRF))","65b874ea":"from sklearn.metrics import f1_score,classification_report,confusion_matrix","200a87c3":"# This is for Logistic Regression\nprint(confusion_matrix(y_test,y_predL))\nprint(classification_report(y_test,y_predL))","ab0c909b":"# This is for Random Forest Classifier\nprint(confusion_matrix(y_test,y_predRF))\nprint(classification_report(y_test,y_predRF))","5da22315":"\nfrom sklearn.svm import SVC\nsvc = SVC()","2c53dde2":"svc.fit(X_train,y_train)","0c0fa1b3":"print(svc.score(X_test,y_test))","7ee8fb1a":"scoreSvc = cross_val_score(svc,X,y,cv=5)\nprint(\"scoreSvc\",np.mean(scoreSvc))","fab2cb4c":"y_predSvc = svc.predict(X_test)","bd74a2c3":"print(confusion_matrix(y_test,y_predSvc))\nprint(classification_report(y_test,y_predSvc))","4e8a5046":"# Importing the Library","5e786a98":"# Checking For Correlation","ffe914d9":"# Splitting the dataset","93189956":"# Checking the Class Imbalanced or not ","9666514f":"# This is for Support Vector Machine","49cf6d2b":"# Model Selection","87742abc":"# Converting All the columns to numeric using Label Encoder as all the columns content categorical data","aa27f46a":"# Loading Dataset"}}