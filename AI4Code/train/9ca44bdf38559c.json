{"cell_type":{"c9a00054":"code","e2af11bd":"code","e86bd3d2":"code","3a8d57f5":"code","f8db5d74":"code","ee1fb309":"code","8285e3ac":"code","e41fd41c":"code","6665b131":"code","a96448e1":"code","24e5af15":"markdown","8b3bf3f1":"markdown","ddea7b3e":"markdown","fb6ca8b2":"markdown","2ce66ca6":"markdown","0b2647a8":"markdown"},"source":{"c9a00054":"### Utilities\nimport humanize\nimport simplejson\nimport yaml\nimport gzip\n\ntry: import first\nexcept Exception as exception: print('first: ',exception)\n\n\n\n### Multiprocessing\nfrom pathos import multiprocessing\nfrom joblib import Parallel, delayed\n\n\n# Compilers \/ Optimizers\nfrom numba import njit\n\n\n### Profilers\nimport memory_profiler\nimport timeit\n\n\n\n### Data Science\nimport numpy as np\nimport pandas as pd\nimport sympy\n\ntry: import modin\nexcept Exception as exception: print('modin: ',exception)\ntry: import pandarallel\nexcept Exception as exception: print('pandarallel: ',exception)\n\n    \n\n### Visualization\nimport matplotlib.pyplot as plt\nimport seaborn\nimport pydot\n\n\n\n### NLP\nimport nltk\nfrom nltk import Prover9\nimport ply.lex as lex\nimport ply.yacc as yacc\nimport gensim \nfrom bs4 import BeautifulSoup\ntry: import ftfy\nexcept Exception as exception: print('ftfy: ',exception)    \n\n\n\n### Email\ntry: import flanker\nexcept Exception as exception: print('flanker: ',exception)\n\n\n\n### Machine Learning\nimport fastai\nimport sklearn\nimport tensorflow\nimport torch\nimport scipy\ntry: import flanker\nexcept Exception as exception: print('flanker: ',exception)\ntry: import pomegranate\nexcept Exception as exception: print('pomegranate: ',exception)\n\n\n### Logic Programming\nimport ortools\n\ntry: import z3\nexcept Exception as exception: print('z3-solver: ',exception)\ntry: import pylog\nexcept Exception as exception: print('pylog: ',exception)\ntry: import pyke\nexcept Exception as exception: print('pyke: ',exception)\ntry: import pytholog\nexcept Exception as exception: print('pytholog: ',exception)\ntry: import clyngor\nexcept Exception as exception: print('clyngor: ',exception)\ntry: import clorm\nexcept Exception as exception: print('clorm: ',exception)\ntry: import pyDatalog\nexcept Exception as exception: print('pyDatalog: ',exception)\ntry: import quepy\nexcept Exception as exception: print('quepy: ',exception)\ntry: import kanren\nexcept Exception as exception: print('kanren: ',exception)\ntry: import clorm\nexcept Exception as exception: print('clorm: ',exception)\n\n    \n\n### Functional Programming\nfrom pydash import py_ as _ # \u2605601 - \"The kitchen sink of Python utility libraries for doing \"stuff\" in a functional way. Based on the Lo-Dash Javascript library\".\nimport toolz          # \u26052674 - \"A functional standard library for Python\".\nimport cytoolz\nimport funcy          # \u26052289 - \"A fancy and practical functional tools\".\nimport more_itertools # \u26051329 - \"More routines for operating on iterables, beyond itertools\".\n\ntry: import functional; \nexcept Exception as exception: print('pyfunctional: ',exception)\ntry: import fn             # \u26052999 - fn.py \"Functional programming in Python: implementation of missing features to enjoy FP\" (unmaintained since 2014).\nexcept Exception as exception: print('fn: ',exception)\ntry: import hask           # \u2605634 - \"Haskell language features and standard libraries in pure Python\".\nexcept Exception as exception: print('hask: ',exception)\ntry: import returns        # \u2605592 - \"Make your functions return something meaningful, typed, and safe!\"\nexcept Exception as exception: print('returns: ',exception)\ntry: import oslash         # \u2605488 - \"Functors, Applicatives, And Monads in Python\".\nexcept Exception as exception: print('oslash: ',exception)\ntry: import effect         # \u2605309 - \"Effect isolation in Python, to facilitate more purely functional code\".\nexcept Exception as exception: print('effect: ',exception)\ntry: import underscore     # \u2605270 - \"A Python port of excellent javascript library underscore.js\".\nexcept Exception as exception: print('underscore.py: ',exception)\ntry: import phi            # \u2605110 - \"A library that intends to remove as much of the pain as possible from your functional programming experience in Python.\"\nexcept Exception as exception: print('phi: ',exception)    \ntry: import pyramda        # \u2605106 - \"Python package supporting heavy functional programming through currying. Translation of the Ramda library from javascript to python\".\nexcept Exception as exception: print('pyramda: ',exception)    \ntry: import pymonad        # - \"a small library implementing monads and related data abstractions -- functors, applicative functors, and monoids -- for use in implementing functional style programs\".\nexcept Exception as exception: print('PyMonad: ',exception)   \ntry: import pymonet        # \u260526 - \"High abstract python library for functional programming. Contains algebraic data structures known from Haskell or Scala\".\nexcept Exception as exception: print('pyMonet: ',exception)   \ntry: import pfun           # \u260543 - \"Pure functional programming in python\".\nexcept Exception as exception: print('pfun: ',exception)   \ntry: import fnc            # \u260557 - \"Functional programming in Python with generators and other utilities\".\nexcept Exception as exception: print('fnc: ',exception)       \ntry: import unpythonic     # \u260516 - \"Supercharge your Python with parts of Lisp and Haskell.\"\nexcept Exception as exception: print('unpythonic: ',exception)       \n\ntry: import deal\nexcept Exception as exception: print('deal: ',exception)    \ntry: import chainable # \u2605142 - \"Method chaining built on generators\".\nexcept Exception as exception: print('chainable: ',exception)\ntry: import lenses    # \u2605133 - \"A python lens library for manipulating deeply nested immutable structures\".\nexcept Exception as exception: print('python-lenses: ',exception)        \ntry: import sumtypes  # \"Sum Types, aka Tagged Unions, for Python\".\nexcept Exception as exception: print('sumtypes: ',exception)        \n        \n\n\n### Pattern matching\ntry: import pampy\nexcept Exception as exception: print('pampy: ',exception)\ntry: import patternmatching\nexcept Exception as exception: print('patternmatching: ',exception)\n\n\n\n### Tranducers    \ntry: import transducer  #  \u260545 - \"This is a port of the transducer concept from Clojure to Python, with an emphasis on providing as Pythonic as interpretation of transducers as possible, rather than reproducing Clojurisms more literally\".\nexcept Exception as exception: print('Transducers: ',exception)\n\n    \n\n### Reactive Style    \ntry: import rxpy        # \u26053402 -  \"Reactive Extensions for Python\".\nexcept Exception as exception: print('RxPy: ',exception)\ntry: import broqer      # \u260558 - \"Library to operate with continuous streams of data in a reactive style\"\nexcept Exception as exception: print('broqer: ',exception)\n    \n    \n\n# Algebraic Data Types\ntry: import adt\nexcept Exception as exception: print('algebraic-data-types: ',exception)  # https:\/\/pypi.org\/project\/algebraic-data-types\/\n\n\n    \n### Datatypes\nimport sortedcontainers\nimport sortedcollections\n\ntry: import orderedset\nexcept Exception as exception: print('orderedset: ',exception)\ntry: import frozendict\nexcept Exception as exception: print('frozendict: ',exception)    \n    \n    \n### Immutable \/ persistent data structures\ntry: import pyrsistent  # \u26051339 - \"Persistent\/Immutable\/Functional data structures for Python\".\nexcept Exception as exception: print('Pyrsistent: ',exception)\ntry: import immutables  # \u2605656 - \"An immutable mapping type for Python.\"\nexcept Exception as exception: print('Immutables: ',exception)\ntry: import funktown    # \u260575 - \"Immutable Data Structures for Python\".\nexcept Exception as exception: print('Funktown: ',exception)\ntry: import amino       # \u260531 - \"functional data structures and type classes\".\nexcept Exception as exception: print('Amino: ',exception)\ntry: import pysistence  # \"Pysistence is a project that seeks to make functional programming in python easier\".    \nexcept Exception as exception: print('Pysistence: ',exception)\n    \n\n\n### Caching\nfrom fastcache import benchmark, clru_cache, lru_cache\nimport decorator\nimport cachetools\n\ntry: import xxhash\nexcept Exception as exception: print('xxHash: ',exception)\ntry: import cached_property\nexcept Exception as exception: print('cached_property: ',exception)\ntry: import kids.cache  \nexcept Exception as exception: print('kids.cache: ',exception)\ntry: import cacheout\nexcept Exception as exception: print('cacheout: ',exception)\ntry: import beaker\nexcept Exception as exception: print('Beaker: ',exception)  \ntry: import dogpile\nexcept Exception as exception: print('dogpile: ',exception)  # ! pip install dogpile - fails\n    \n    \n# Cellular Automata\ntry: import cellular_automaton\nexcept Exception as exception: print('cellular-automaton: ',exception)  # https:\/\/github.com\/lantunes\/cellpylib\ntry: import cellpylib as cpl\nexcept Exception as exception: print('cellpylib: ',exception)  # https:\/\/github.com\/lantunes\/cellpylib    ","e2af11bd":"Prover9()","e86bd3d2":"### Utilities\n! pip install first\n\n### Data Science\n! pip install pandarallel\n! pip install modin\n\n### Email\n! pip install flanker\n! pip install ftfy\n\n### Caching\n! pip install xxHash\n! pip install cached_property\n! pip install kids.cache\n! pip install cacheout\n! pip install Beaker\n\n### Machine Learning\n! pip install pomegranate","3a8d57f5":"### Caching\n! pip install dogpile    # ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.","f8db5d74":"### Logic Programming\n! pip install z3-solver\n! pip install pylog\n! pip install pytholog\n! pip install clyngor\n! pip install kanren\n! pip install pydatalog\n! pip install quepy\n! pip install pyketools","ee1fb309":"### Logic Programming\n! yes | conda install -c potassco clingo\n! yes | conda install -c potassco clorm","8285e3ac":"### Functional Programming\n! pip install pyfunctional  \n! pip install pampy         \n! pip install deal   \n! pip install hask3\n! pip install returns\n! pip install oslash\n! pip install effect\n! pip install underscore.py\n! pip install phi\n! pip install pyramda\n! pip install PyMonad\n! pip install pyMonet\n! pip install pfun\n! pip install fn\n! pip install fnc\n! pip install unpythonic\n! pip install chainable\n! pip install lenses\n! pip install sumtypes\n! pip install patternmatching\n\n### Tranducers    \n! pip install transducer\n\n### Reactive Style\n! pip install rxpy\n! pip install broqer\n\n### Algebraic Data Types\n! pip install algebraic-data-types\n\n### DataTypes\n! pip install orderedset\n! pip install frozendict\n\n### Immutable \/ persistent data structures\n! pip install immutables\n! pip install funktown\n! pip install amino\n! pip install pysistence","e41fd41c":"# Cellular Automata\n! pip install cellular-automaton  # https:\/\/gitlab.com\/DamKoVosh\/cellular_automaton\n! pip install cellpylib           # https:\/\/github.com\/lantunes\/cellpylib    ","6665b131":"### Utilities\nimport humanize\nimport simplejson\nimport yaml\n\ntry: import first\nexcept Exception as exception: print('first: ',exception)\n\n\n\n### Multiprocessing\nfrom pathos import multiprocessing\n\n\n# Compilers \/ Optimizers\nfrom numba import jit\n\n\n### Profilers\nimport memory_profiler\nimport timeit\n\n\n\n### Data Science\nimport numpy as np\nimport pandas as pd\nimport sympy\n\ntry: import modin\nexcept Exception as exception: print('modin: ',exception)\ntry: import pandarallel\nexcept Exception as exception: print('pandarallel: ',exception)\n\n    \n\n### Visualization\nimport matplotlib.pyplot as plt\nimport seaborn\nimport pydot\n\n\n\n### NLP\nimport nltk\nfrom nltk import Prover9\nimport ply.lex as lex\nimport ply.yacc as yacc\nimport gensim \nfrom bs4 import BeautifulSoup\ntry: import ftfy\nexcept Exception as exception: print('ftfy: ',exception)    \n\n\n\n### Email\ntry: import flanker\nexcept Exception as exception: print('flanker: ',exception)\n\n\n\n### Machine Learning\nimport fastai\nimport sklearn\nimport tensorflow\nimport torch\nimport scipy\ntry: import flanker\nexcept Exception as exception: print('flanker: ',exception)\ntry: import pomegranate\nexcept Exception as exception: print('pomegranate: ',exception)\n\n\n### Logic Programming\nimport ortools\n\ntry: import z3\nexcept Exception as exception: print('z3-solver: ',exception)\ntry: import pylog\nexcept Exception as exception: print('pylog: ',exception)\ntry: import pyke\nexcept Exception as exception: print('pyke: ',exception)\ntry: import pytholog\nexcept Exception as exception: print('pytholog: ',exception)\ntry: import clyngor\nexcept Exception as exception: print('clyngor: ',exception)\ntry: import clorm\nexcept Exception as exception: print('clorm: ',exception)\ntry: import pyDatalog\nexcept Exception as exception: print('pyDatalog: ',exception)\ntry: import quepy\nexcept Exception as exception: print('quepy: ',exception)\ntry: import kanren\nexcept Exception as exception: print('kanren: ',exception)\ntry: import clorm\nexcept Exception as exception: print('clorm: ',exception)\n\n    \n\n### Functional Programming\nfrom pydash import py_ as _ # \u2605601 - \"The kitchen sink of Python utility libraries for doing \"stuff\" in a functional way. Based on the Lo-Dash Javascript library\".\nimport toolz          # \u26052674 - \"A functional standard library for Python\".\nimport cytoolz\nimport funcy          # \u26052289 - \"A fancy and practical functional tools\".\nimport more_itertools # \u26051329 - \"More routines for operating on iterables, beyond itertools\".\n\ntry: import functional; \nexcept Exception as exception: print('pyfunctional: ',exception)\ntry: import fn             # \u26052999 - fn.py \"Functional programming in Python: implementation of missing features to enjoy FP\" (unmaintained since 2014).\nexcept Exception as exception: print('fn: ',exception)\ntry: import hask           # \u2605634 - \"Haskell language features and standard libraries in pure Python\".\nexcept Exception as exception: print('hask: ',exception)\ntry: import returns        # \u2605592 - \"Make your functions return something meaningful, typed, and safe!\"\nexcept Exception as exception: print('returns: ',exception)\ntry: import oslash         # \u2605488 - \"Functors, Applicatives, And Monads in Python\".\nexcept Exception as exception: print('oslash: ',exception)\ntry: import effect         # \u2605309 - \"Effect isolation in Python, to facilitate more purely functional code\".\nexcept Exception as exception: print('effect: ',exception)\ntry: import underscore     # \u2605270 - \"A Python port of excellent javascript library underscore.js\".\nexcept Exception as exception: print('underscore.py: ',exception)\ntry: import phi            # \u2605110 - \"A library that intends to remove as much of the pain as possible from your functional programming experience in Python.\"\nexcept Exception as exception: print('phi: ',exception)    \ntry: import pyramda        # \u2605106 - \"Python package supporting heavy functional programming through currying. Translation of the Ramda library from javascript to python\".\nexcept Exception as exception: print('pyramda: ',exception)    \ntry: import pymonad        # - \"a small library implementing monads and related data abstractions -- functors, applicative functors, and monoids -- for use in implementing functional style programs\".\nexcept Exception as exception: print('PyMonad: ',exception)   \ntry: import pymonet        # \u260526 - \"High abstract python library for functional programming. Contains algebraic data structures known from Haskell or Scala\".\nexcept Exception as exception: print('pyMonet: ',exception)   \ntry: import pfun           # \u260543 - \"Pure functional programming in python\".\nexcept Exception as exception: print('pfun: ',exception)   \ntry: import fnc            # \u260557 - \"Functional programming in Python with generators and other utilities\".\nexcept Exception as exception: print('fnc: ',exception)       \ntry: import unpythonic     # \u260516 - \"Supercharge your Python with parts of Lisp and Haskell.\"\nexcept Exception as exception: print('unpythonic: ',exception)       \n\ntry: import deal\nexcept Exception as exception: print('deal: ',exception)    \ntry: import chainable # \u2605142 - \"Method chaining built on generators\".\nexcept Exception as exception: print('chainable: ',exception)\ntry: import lenses    # \u2605133 - \"A python lens library for manipulating deeply nested immutable structures\".\nexcept Exception as exception: print('python-lenses: ',exception)        \ntry: import sumtypes  # \"Sum Types, aka Tagged Unions, for Python\".\nexcept Exception as exception: print('sumtypes: ',exception)        \n        \n\n\n### Pattern matching\ntry: import pampy\nexcept Exception as exception: print('pampy: ',exception)\ntry: import patternmatching\nexcept Exception as exception: print('patternmatching: ',exception)\n\n\n\n### Tranducers    \ntry: import transducer  #  \u260545 - \"This is a port of the transducer concept from Clojure to Python, with an emphasis on providing as Pythonic as interpretation of transducers as possible, rather than reproducing Clojurisms more literally\".\nexcept Exception as exception: print('Transducers: ',exception)\n\n    \n\n### Reactive Style    \ntry: import rxpy        # \u26053402 -  \"Reactive Extensions for Python\".\nexcept Exception as exception: print('RxPy: ',exception)\ntry: import broqer      # \u260558 - \"Library to operate with continuous streams of data in a reactive style\"\nexcept Exception as exception: print('broqer: ',exception)\n    \n    \n\n# Algebraic Data Types\ntry: import adt\nexcept Exception as exception: print('algebraic-data-types: ',exception)  # https:\/\/pypi.org\/project\/algebraic-data-types\/\n\n\n    \n### Datatypes\nimport sortedcontainers\nimport sortedcollections\n\ntry: import orderedset\nexcept Exception as exception: print('orderedset: ',exception)\ntry: import frozendict\nexcept Exception as exception: print('frozendict: ',exception)    \n    \n    \n### Immutable \/ persistent data structures\ntry: import pyrsistent  # \u26051339 - \"Persistent\/Immutable\/Functional data structures for Python\".\nexcept Exception as exception: print('Pyrsistent: ',exception)\ntry: import immutables  # \u2605656 - \"An immutable mapping type for Python.\"\nexcept Exception as exception: print('Immutables: ',exception)\ntry: import funktown    # \u260575 - \"Immutable Data Structures for Python\".\nexcept Exception as exception: print('Funktown: ',exception)\ntry: import amino       # \u260531 - \"functional data structures and type classes\".\nexcept Exception as exception: print('Amino: ',exception)\ntry: import pysistence  # \"Pysistence is a project that seeks to make functional programming in python easier\".    \nexcept Exception as exception: print('Pysistence: ',exception)\n    \n\n\n### Caching\nfrom fastcache import benchmark, clru_cache, lru_cache\nimport decorator\nimport cachetools\n\ntry: import xxhash\nexcept Exception as exception: print('xxHash: ',exception)\ntry: import cached_property\nexcept Exception as exception: print('cached_property: ',exception)\ntry: import kids.cache  \nexcept Exception as exception: print('kids.cache: ',exception)\ntry: import cacheout\nexcept Exception as exception: print('cacheout: ',exception)\ntry: import beaker\nexcept Exception as exception: print('Beaker: ',exception)  \ntry: import dogpile\nexcept Exception as exception: print('dogpile: ',exception)  # ! pip install dogpile - fails\n    \n    \n# Cellular Automata\ntry: import cellular_automaton\nexcept Exception as exception: print('cellular-automaton: ',exception)  # https:\/\/github.com\/lantunes\/cellpylib\ntry: import cellpylib as cpl\nexcept Exception as exception: print('cellpylib: ',exception)  # https:\/\/github.com\/lantunes\/cellpylib    ","a96448e1":"# Source: https:\/\/github.com\/Z3Prover\/z3\/blob\/master\/examples\/python\/socrates.py\nfrom z3 import *\n\nObject = DeclareSort('Object')\n\nHuman = Function('Human', Object, BoolSort())\nMortal = Function('Mortal', Object, BoolSort())\n\n# a well known philosopher \nsocrates = Const('socrates', Object)\n\n# free variables used in forall must be declared Const in python\nx = Const('x', Object)\n\naxioms = [ForAll([x], Implies(Human(x), Mortal(x))), \n          Human(socrates)]\n\n\ns = Solver()\ns.add(axioms)\n\nprint(axioms, s.check()) # prints sat so axioms are coherent\n\n# classical refutation\ns.add(Not(Mortal(socrates)))\nprint(s, s.check()) # prints unsat so socrates is Mortal","24e5af15":"# Test","8b3bf3f1":"# Pip Libaries Available Without Internet Access","ddea7b3e":"# Z3 Test","fb6ca8b2":"# Broken\n\nCopy\/paste from above","2ce66ca6":"# Available\n- https:\/\/hackernoon.com\/top-8-python-libraries-for-machine-learning-and-artificial-intelligence-y08id3031\n- https:\/\/wiki.python.org\/moin\/PythonForArtificialIntelligence\n- https:\/\/github.com\/sfermigier\/awesome-functional-python","0b2647a8":"# Installable via Internet"}}