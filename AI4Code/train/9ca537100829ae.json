{"cell_type":{"840815e6":"code","9356d31c":"code","ff38814f":"code","3c1ec298":"code","5924ef78":"code","05046d06":"code","5762259a":"code","366dff0e":"code","b2edac54":"code","25b66b61":"code","79df8c27":"code","b6c6aa74":"code","7b4b0ed8":"code","cd4cbbdc":"code","591a1cce":"code","71489913":"code","19717494":"code","a85fe7f2":"code","9b6c9e32":"code","a39adc82":"code","1039b289":"code","02d75de5":"code","f9841555":"code","f3112d33":"code","5c384898":"code","c90f5467":"code","bb976d6f":"code","9116f9d3":"markdown","d0fd95bb":"markdown","9e35cc91":"markdown","5c7cebd9":"markdown","77188b3b":"markdown","1fff0ec5":"markdown","dc655879":"markdown","2522ae80":"markdown","ee74b6fc":"markdown","302df283":"markdown","ba29911d":"markdown","63d39f41":"markdown","55f91116":"markdown","b7d3e1cc":"markdown","d1c94bd5":"markdown","922824f6":"markdown","b5bf118d":"markdown","486c589a":"markdown","f4d6b1cc":"markdown","84349447":"markdown","896f9c00":"markdown","84eddbae":"markdown","c6819169":"markdown"},"source":{"840815e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re #to use regular expressions to find text\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9356d31c":"data_dictionary = pd.DataFrame({'Field Name':[\"FILE_NAME\",\"JOB_CLASS_TITLE\",\"JOB_CLASS_NO\",\"REQUIREMENT_SET_ID\", \"JOB_DUTIES\", \"EDUCATION_YEARS\",\"SCHOOL_TYPE\",\n                                            \"EDUCATION_MAJOR\", \"EXPERIENCE_LENGTH\", \"FULL_TIME_PART_TIME\", \"EXP_JOB_CLASS_TITLE\",\"EXP_JOB_CLASS_FUNCTION\",\n                                            \"COURSES\", \"COURSE_LENGTH\", \"DRIVERS_LICENSE_REQ\",\"DRIV_LIC_TYPE\", \"ADDTL_LIC\", \"EXAM_TYPE\", \"ENTRY_SALARY_GEN\",\n                                            \"ENTRY_SALARY_DWP\", \"OPEN_DATE\"],\n                             })\n\ndata_dictionary['Description'] = [\"The file name of the job bulletin from which each record came.\",\n                                  \"The title of the particular class (e.g., Systems Analyst, Carpenter).\",\n                                  \"The 4-digit code that corresponds to the job class.\",\n                                  \"A\/The requirement(s) that has\/have or might has\/have to be met. These are identified with numbers and letters in the job bulletin.\",\n                                  \"A summary of what someone does in the particular job.\",\n                                  \"Years required in a particular education program\",\n                                  \"School type required (e.g. college or university, high school, certificate, apprenticeship)\",\n                                  \"Major or concentration required\",\n                                  \"Years required in a particular job class or external role.\",\n                                  \"Whether the required experience is full-time or part-time\",\n                                  \"Job class title of Internal City job that one must hold to satisfy a requirement (e.g. Management Assistant)\",\n                                  \"Job experience of jobs (e.g. the development, analysis, implementation or major modification of new or existing computer-based information systems or relational databases)\",\n                                  \"The necessary subject(s) of required courses\",\n                                  \"The semester or quarter unit count needed.\",\n                                  \"Whether a driver\u00e2\u20ac\u2122s license is required, possibly required, or not required. P (or possible) refers to any class that says \\\"Some positions may require a valid California driver's license\\\". R (or required) explicitly says a driver's license is required\",\n                                  \"The specific driver\u00e2\u20ac\u2122s license type required, Class A, Class B or Class C\",\n                                  \"Additional licenses specified in the job bulletin other than Driver's License\",\n                                  \"Classifications have different rules around whether one has to already have Civil Service status to apply or whether experience has to be in a particular department.\",\n                                  \"The base overall salary range. It captures the first range. Some don't have a range.\",\n                                  \"For job classes that are available in the City at large AND the DWP agency specifically, a second DWP salary range will be provided. This field will capture the first DWP-specific salary range.\",\n                                  \"The date the job bulletin opened\"\n                               ]\n\ndata_dictionary['Notes'] = [\"It is the text file name. It consists of the title of the job, code of the job and date in which the text file was created.\",\n                            \"Extracted from file name by searching for the letters in the file name.\",\n                            \"Searched for keywords: \\\"Class Code:\\\" and saved four digits that are after it.\",\n                            \"Searched for keyword: \\\"require\\\" (verb to avoid confusion between requirements and requirement) and counted the lines below for lines that start with a digit or a letter\",\n                            \"Searched for keword:\\\"duties\\\" and saved the lines under it till this a break line\",\n                            \"Searched for keywords:\\\"one...ten year school_type\\\" I limited the search to only years\",\n                            \"Searched for keywords:\\\"college or university, high school, certificate, apprenticeship\",\n                            \"Searched for keywords:\\\"major in x | apprenticeship as x | college or university in x\\\"\",\n                            \"Searched for keywords:\\\"full-time, part-time and apprenticeship as and saved what is before it\\\"\",\n                            \"Searched for keywords:\\\"full-time and part-time\",\n                            \"Searched for keywords:\\\"experience in, experience as, experience with or experience at\\\" and saved what as after it\",\n                            \"Saved what is after title of the job of past exprience when I found it\",\n                            \"When school_type is college or university, searched for keywords:\\\"courses\\\" and saved what is after it till a new line\",\n                            \"When courses are found, I searched for keywords:\\\"quarter uints and semesters and saved digits before them\\\"\",\n                            \"Searched for keywords:\\\"driver's license\\\" then searched for keywords:\\\"is required, may require\\\" to classify it\",\n                            \"After ensuring that a license is required, I searched for keyword:\\\"class followed by A,B or C\\\" and saved the character\",\n                            \"Searched for keyword:\\\"license\\\" and made sure it is not driver's and saved what is before the word license\",\n                            \"Searcged for keywords:\\\"OPEN COMPETITIVE BASIS|INTERDEPARTMENTAL PROMOTIONAL|DEPARTMENTAL PROMOTIONAL BASIS\\\"\",\n                            \"Searched for $ followed by digit. Then searched for word flat to know if it is a range or not\",\n                            \"After finding the $ and digits, I searched for the word dwp to check if there is another salary or not\",\n                            \"Searched for keywords open date: and saved what is after it\"\n                           ]\n\ndata_dictionary['Data Type'] = ['string',\n                               'string',\n                               'string',\n                               'integer',\n                               'string',\n                               'integer',\n                               'string',\n                               'string',\n                               'integer',\n                               'string',\n                               'string',\n                               'string',\n                               'string',\n                               'string',\n                               'string',\n                               'string',\n                               'string',\n                               'string',\n                               'string',\n                               'string',\n                               'string']\n\ndata_dictionary['Accepts Null Values?']=['No',\n                                        'No',\n                                        'No',\n                                        'No',\n                                        'No',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'Yes',\n                                        'No',\n                                        'No',\n                                        'Yes',\n                                        'No']\ndata_dictionary","ff38814f":"filename = 'Dictionary.csv'\n\ndata_dictionary.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","3c1ec298":"def get_drivers_license_req(line):\n    drivers_license = [] #list to store the extracted data (req and class).\n    drivers_license_class = \"\"\n    additional_license = \"\"\n    #keywords\n    words_list1 = \"driver's license\"\n    words_list2 = \"is required\"\n    words_list3 = \"may require\"\n    \n    drivers_license_req = \"\"\n    #check if keywords xist\n    if words_list1 in line:\n        if words_list2 in line: \n            drivers_license_req = \"R\"\n                \n        if words_list3 in line:\n            drivers_license_req = \"P\"\n    else:\n        drivers_license_req = \"\"\n    \n    #find class of the license\n    drivers_license_class = \"\"\n    drivers_license_class_results = re.findall(\"Class [ABC] or Class [ABC] driver's license | Class [ABC]\", line) #reg expression\n\n    if drivers_license_class_results: #acccording to the dictionary, sometime the class of the license isn't mentioned so i have to check if \n        #a class\/es is\/are found\n        for i in range(len(drivers_license_class_results)):\n            if len(drivers_license_class_results) > 1:\n                drivers_license_class = drivers_license_class + drivers_license_class_results[i]\n            else:\n                drivers_license_class = drivers_license_class_results[i]\n    \n    #format the results\n    drivers_license_class = drivers_license_class.replace(\" Class \",\"\") #remove word class\n    drivers_license_class = list(set(drivers_license_class)) #get unique values \n    \n    #store the data\n    drivers_license.append(drivers_license_req)\n    drivers_license.append(drivers_license_class)\n    \n    return drivers_license","5924ef78":"def get_salary(line):\n    salary_gen = \"\"\n    salary_dwp = \"\" \n    salary = []\n    \n    if \"flat\" in line.lower().strip() and \"Department of Water and Power\" not in line.strip(): #flat and not dwp(gen)\n        salary_gen = re.search(r\"\\$\\d{2,3}\\,\\d{3}\", line.lower()).group()\n        salary_dwp = \"\"\n  \n    if \"flat\" not in line.lower().strip() and \"Department of Water and Power\" not in line.strip(): #not flat and not dwp(gen)\n        salary_gen = re.search(r\"\\$\\d{2,3}\\,\\d{3}\\sto\\s\\$\\d{2,3}\\,\\d{3}|\\$\\d{2,3}\\,\\d{3}[*]\\sto\\s\\$\\d{2,3}\\,\\d{3}|\\$\\d{2,3}\\,\\d{3}\", line.lower()).group().replace(\"to\",\"-\")\n        salary_dwp = \"\"\n   \n    if \"flat\" in line.lower().strip() and \"Department of Water and Power\" in line.strip(): #flat and dwp\n        salary_dwp = re.search(r\"\\$\\d{2,3}\\,\\d{3}\", line.lower()).group()\n \n    if \"flat\" not in line.lower().strip() and \"Department of Water and Power\" in line.strip(): #not flat and dwp\n        salary_dwp = re.search(r\"\\$\\d{2,3}\\,\\d{3}\\sto\\s\\$\\d{2,3}\\,\\d{3}|\\$\\d{2,3}\\,\\d{3}\\sto\\s\\$\\d{2,3}\\,\\s\\d{3}\", line.lower()).group().replace(\"to\",\"-\")\n             \n    salary.append(salary_gen)\n    salary.append(salary_dwp)\n\n    return salary","05046d06":"def convert_to_integer(text):\n    global flag\n    flag = 0\n    if \"one\" in text.lower():\n        text = \"1\"\n        flag = 1\n    if \"two\" in text.lower():\n        text = \"2\"\n        flag = 1\n    if \"three\" in text.lower():\n        text = \"3\"\n        flag = 1\n    if \"four\" in text.lower():\n        text = \"4\"\n        flag = 1\n    if \"five\" in text.lower():\n        text = \"5\"\n        flag = 1\n    if \"six\" in text.lower():\n        text = \"6\"\n        flag = 1\n    if \"seven\" in text.lower():\n        text = \"7\"\n        flag = 1\n    if \"eight\" in text.lower():\n        text = \"8\"\n        flag = 1\n    if \"nine\" in text.lower():\n        text = \"9\"\n        flag = 1\n    if \"ten\" in text.lower():\n        text = \"10\"\n        flag = 1\n    return text","5762259a":"def get_experience_length(text):\n    if re.search(r\"\\S{1,}\\s*\\S{1,}\\s*of\\s*full\\s*-\\s*time | \\S{1,}\\s*\\S{1,}\\s*of\\s*part\\s*-\\s*time | S{1,}\\s*\\S{1,}\\s*apprenticeship\\s*as\", text, re.IGNORECASE):\n        experience_length = re.search(r\"\\S{1,}\\s*\\S{1,}\\s*of\\s*full\\s*-\\s*time | \\S{1,}\\s*\\S{1,}\\s*of\\s*part\\s*-\\s*time | S{1,}\\s*\\S{1,}\\s*apprenticeship\\s*as\", text, re.IGNORECASE).group()\n    else:\n        experience_length = \"\"\n    \n    if \"months\" in experience_length.lower():\n        experience_length = experience_length.replace(\"(\",\"\")\n        experience_length = experience_length.replace(\")\",\"\")\n        experience_length = convert_to_integer(experience_length.lower())\n        if flag == 1:\n            experience_length = int(experience_length) \/ 12.0 #convert to years\n        elif flag == 0:\n            experience_length = experience_length[0:1].strip()\n            experience_length = int(experience_length) \/ 12.0 #convert to years\n    else:\n        experience_length = convert_to_integer(experience_length.lower())     \n    return experience_length","366dff0e":"def get_full_time_part_time(text):\n    try:    \n        full_time_part_time = re.search(r\"full\\s*-\\s*time | part\\s*-\\s*time\", text).group()\n        get_exp_job_class_title(text)\n\n    except: #type isn't full-time or part-time\n        full_time_part_time = \"\"\n   \n    return full_time_part_time","b2edac54":"def get_exp_job_class_title(text):\n    try:\n        job = re.search(r\"experience\\s*in\\s*.* | experience\\s*as\\s*.* | experience\\s*with\\s*.* | experience\\s*at\\s*.*\", text, re.IGNORECASE).group()\n        get_exp_duties(text)\n    except:\n        job = \"\"\n        \n    if \"experience in\" in job.lower():\n        job = job.replace(\"experience in\",\"\")\n    if \"experience as\" in job.lower():\n        job = job.replace(\"experience as\",\"\")\n    if \"experience with\" in job.lower():\n        job = job.replace(\"experience with\",\"\")\n    if \"experience at\" in job.lower():\n        job = job.replace(\"experience at\",\"\")\n    return job","25b66b61":"def get_exp_duties(text):\n    if re.search(r\"[a-zA-Z]{1,}ing\\s*.*\", text, re.IGNORECASE):\n        exp_duties = re.search(r\"[a-zA-Z]{1,}ing\\s*.*\", text, re.IGNORECASE).group()\n    else:\n        exp_duties = \"\" \n    return exp_duties","79df8c27":"def get_education_years(text, school_type): \n    found_education_years = \"\"\n    pattern1 = r\"(one|two|three|four|five|six|seven|eight|nine|ten)\\s*-\\s*year\\s*(?=\"+school_type.strip()+\")\\s*\"\n\n    if school_type != \"\":\n        if re.search(pattern1, text, re.IGNORECASE):\n            found_education_years = re.search(pattern1, text, re.IGNORECASE).group()\n            found_education_years = found_education_years.replace(\"-year\",\"\")\n            found_education_years = int(convert_to_integer(found_education_years.lower())) \n        else:\n            found_education_years = \"\"\n         \n    return found_education_years","b6c6aa74":"def get_courses(text):\n    print(\"in\")\n    global courses\n    courses = []\n    flag = 0\n    \n    #get the names of the courses\n    if re.search(r\"courses\", text, re.IGNORECASE):\n        found_courses = re.search(r\"courses\\s*.*\", text, re.IGNORECASE).group()\n        courses.append(found_courses)\n    else:\n        found_courses = \"\"\n        courses.append(found_courses)\n    \n    #get number of semesters\n    if re.search(r\"\\d{1,}\\s*semester\", text, re.IGNORECASE):\n        semesters = re.search(r\"\\d{1,}\\s*semester\", text, re.IGNORECASE).group()\n        flag = 1\n    else:\n        semesters = \"\"\n    \n    #get number of quarter units\n    if re.search(r\"\\d{1,}\\s*quarter\\s*units\", text, re.IGNORECASE):\n        units = re.search(r\"\\d{1,}\\s*quarter\\s*units\", text, re.IGNORECASE).group()\n        flag = 2\n    else:\n        units = \"\"\n    \n    #found semesters and quarter units numbers\n    if flag == 2:\n        semesters_units = semesters + \" and \" + units\n    else:\n        semesters_units = \"\"\n    flag = 0\n    courses.append(semesters_units)\n    return courses","7b4b0ed8":"def get_school_type(text):\n    if re.search(r\"COLLEGE\\s*OR\\s*UNIVERSITY | HIGH\\s*SCHOOL | APPRENTICESHIP | CERTIFICATE | Semester | Semesters | units\", text, re.IGNORECASE):\n        school_type = re.search(r\"COLLEGE\\s*OR\\s*UNIVERSITY | HIGH\\s*SCHOOL | APPRENTICESHIP | CERTIFICATE | Semester | Semesters | units\", text, re.IGNORECASE).group()\n        education_years = get_education_years(text, school_type)       \n    else: \n        school_type = \"\"\n    \n    if re.search(r\"COLLEGE\\s*OR\\s*UNIVERSITY | Semester | Semesters | units\", school_type, re.IGNORECASE):\n        school_type = \"College or University\"\n    if re.search(r\"HIGH\\s*SCHOOL\", school_type, re.IGNORECASE):\n        school_type = \"High School\"\n    if re.search(r\"APPRENTICESHIP\", school_type, re.IGNORECASE):\n        school_type = \"Apprenticeship\"\n    if re.search(r\"CERTIFICATE\", school_type, re.IGNORECASE):\n        school_type = \"Certificate\"\n    \n    if \"college or university\" in school_type.lower(): #get courses' info\n        get_courses(text)\n    else:\n        courses.append(\"\")\n        courses.append(\"\")\n    return school_type","cd4cbbdc":"def get_education_major(text): # major in x | apprenticeship as x | college or university in x\n    education_major = \"\"\n    if re.search(r\"major\\s*in | apprenticeship\\s*as | college\\s*or\\s*university\\s*in\", text, re.IGNORECASE):\n        education_major = re.search(r\"major\\s*in\\s*.* | apprenticeship\\s*as\\s*.* | college\\s*or\\s*university\\s*in\\s*.*\", text, re.IGNORECASE).group()\n    else: \n        education_major = \"\"\n        \n    if \"apprenticeship\" in education_major.lower():\n        education_major = education_major.replace(\"apprenticeship as\",\"\")\n    if \"major in\" in education_major.lower():\n        education_major = education_major.replace(\"major in\",\"\")\n    if \"college or university in\" in education_major.lower():\n        education_major = education_major.replace(\"college or university in\",\"\")      \n    return education_major","591a1cce":"def get_requirements(text, index):\n    requirements = []\n    req_count = 0\n    req_text = []\n    full_time_part_time = \"\"\n    \n    if re.match(r\"\\d{1,}[.]\", text[index]): #search for X. where X is number of 1 digit or more at the beginning of the line\n        while re.match(r\"\\w{1,}[.]\", text[index]): #number. --->main req & character. --->sub req\n            req_count = req_count + 1\n            req_text.append(text[index])\n            index = index  + 1\n        req_text = (\" \").join(req_text) #make req_text into a string\n      \n    else:\n        req_count = 1\n        req_text.append(text[index])\n        req_text = (\" \").join(req_text) #make req_text into a string\n\n    shool_type = get_school_type(req_text)\n    education_years = get_education_years(req_text, shool_type)\n    full_time_part_time = get_full_time_part_time(req_text)\n    education_major = get_education_major(req_text)\n    experience_length = get_experience_length(req_text)\n    experience_job_title = get_exp_job_class_title(req_text)\n    experience_job_duties = get_exp_duties(req_text)\n    \n    requirements.append(req_text)\n    requirements.append(req_count)\n    requirements.append(education_years)\n    requirements.append(shool_type)\n    requirements.append(full_time_part_time)\n    requirements.append(education_major)\n    requirements.append(experience_length)\n    requirements.append(experience_job_title)\n    requirements.append(experience_job_duties)\n    return requirements","71489913":"def get_exam_type(text):\n    found_exam_type = []\n    found = re.findall(r'OPEN COMPETITIVE BASIS|INTERDEPARTMENTAL PROMOTIONAL|DEPARTMENTAL PROMOTIONAL BASIS', text, re.IGNORECASE) #search for these keywords\n\n    if \"OPEN COMPETITIVE BASIS\" in found:\n        found_exam_type.append(\"OPEN\")\n       \n    if \"INTERDEPARTMENTAL PROMOTIONAL\" in found:\n        found_exam_type.append(\"INT_DEPT_PROM\")\n    \n    if \"DEPARTMENTAL PROMOTIONAL BASIS\" in found:\n        found_exam_type.append(\"DEPT_PROM\")\n        \n    found_exam_type = ' ,'.join(found_exam_type)\n    return found_exam_type","19717494":"def get_add_license(text):\n    additional_license = []\n    additional_found_license = \"\"\n  \n    if re.search(r\"(?<!driver's)license\\s{1,}(?=as)\", text):\n        additional_found_license = re.search(r\"license\\s(?=as)(?=as)\\S{1,}\\s\\S{1,}\\s\\S{1,}\\s\\S{1,}\\s\\S{1,}\\s\\S{1,}\", text).group()\n\n    if re.search(r\"\\S{1,}\\s\\S{1,}(?<!driver's)(?<!Class[ABC])(?<!the)(?<!a)(?<!or)(?<!and)\\slicense(?!as)\", text):\n        additional_found_license = re.search(r\"\\S{1,}\\s\\S{1,}(?<!driver's)(?<!Class[ABC])(?<!the)(?<!a)(?<!or)(?<!and)\\slicense\", text).group() \n        \n    additional_license.append(additional_found_license)\n    \n    if len(additional_license) != 0:\n        additional_license = ' ,'.join(additional_license)\n    else:\n        additional_license = \"\"\n    return additional_license","a85fe7f2":"bulletin_dir = \"..\/input\/cityofla\/CityofLA\/Job Bulletins\"\ndata_list = []\n\nfor filename in os.listdir(bulletin_dir):\n    with open(bulletin_dir + \"\/\" + filename, 'r', errors='ignore') as f:\n        text = f.readlines()\n        for line in range(len(text)):\n            text[line] = text[line].replace(\";\",\"\")\n            #print(line)\n            #parse job bulletins\n            job_class_title = re.search(r\"\\D+\",filename).group() #title of the job\n            print(job_class_title)\n            if \"Class Code:\" in text[line]: #get class code\n                job_class_no = re.search(r\"\\d{4}\",text[line]).group()\n            if \"REQUIRE\" in text[line]: #used part of word requirments since it can be singular or plural (Requirements\/Qualifications section)\n                requirements = get_requirements(text, line+2)\n                req_set_id = requirements[1]\n                education_years = requirements[2]\n                school_type = requirements[3]\n                full_time_part_time = requirements[4]\n                education_major = requirements[5]\n                experience_length = requirements[6]\n                experience_job_title = requirements[7]\n                exp_duties = requirements[8]\n                found_courses = courses[0]\n                semeters_units_found = courses[1]\n            if \"DUTIES\" in text[line]: #get duties by searching for headline \"DUTIES\" and storing paragraph below it by two lines\n                job_duties = text[line+2]\n            if \"driver's license\" in text[line]: #get driver's license information\n                drivers_license_req = get_drivers_license_req(text[line])[0]\n                if len(get_drivers_license_req(text[line])[1]) > 1:\n                    drive_lic_type = '\/'.join(get_drivers_license_req(text[line])[1])\n                else:\n                    drive_lic_type = str((get_drivers_license_req(text[line])[1]))\n            \n            if \"license\" in text[line].lower(): #get additional licesnse if exist\n                if \"driver's license\" not in text[line].lower(): #check first it not a driving license\n                    add_license = get_add_license(text[line])\n                else:\n                    add_license = \"\"\n               \n            if \"THIS EXAMINATION IS TO BE GIVEN\" in text[line].upper():#get exam type\n                exam_type = get_exam_type(text[line+1])\n            if re.search(r\"\\$\\d{2,3}\\,\\d{3}\", text[line]): #get salary and salary dwp(if it exists). search for $xx,xxx\/$xxx,xxx expression\n                salary_gen = get_salary(text[line])[0] #entry salary\n                salary_dwp = get_salary(text[line])[1] #dwp salary\n            if \"Open Date:\" in text[line]: #get open date\n                job_bulletin_date = text[line].split(\"Open Date:\")[1].split(\"(\")[0].strip()\n                \n        data_list.append([filename, job_class_title, job_class_no, req_set_id, job_duties, education_years,\n                          school_type, education_major, experience_length, full_time_part_time, experience_job_title,\n                          exp_duties, found_courses, semeters_units_found, drivers_license_req, \n                          drive_lic_type, add_license, exam_type, salary_gen, salary_dwp, job_bulletin_date])\n        entry_salary_dwp = \"0\"","9b6c9e32":"df = pd.DataFrame(data_list) #convert the extracted data to dataframe","a39adc82":"#add row of field names to the dataframe\ndf.columns = [\"FILE_NAME\",\"JOB_CLASS_TITLE\",\"JOB_CLASS_NO\",\"REQUIREMENT_SET_ID\", \"JOB_DUTIES\", \"EDUCATION_YEARS\",\n              \"SCHOOL_TYPE\", \"EDUCATION_MAJOR\", \"EXPERIENCE_LENGTH\", \"FULL_TIME_PART_TIME\", \"EXP_JOB_CLASS_TITLE\",\n              \"EXP_JOB_CLASS_FUNCTION\",\"COURSES\", \"COURSE_LENGTH\", \"DRIVERS_LICENSE_REQ\",\n              \"DRIV_LIC_TYPE\", \"ADDTL_LIC\", \"EXAM_TYPE\", \"ENTRY_SALARY_GEN\", \"ENTRY_SALARY_DWP\", \"OPEN_DATE\"] ","1039b289":"df.head()","02d75de5":"salaries = []\n#format ENTRY_SALARY_GEN by removing $\" , \",\" and \"-\" and convert it to int\ndf['ENTRY_SALARY_GEN'] = [s.replace(\"$\",\"\") for s in df['ENTRY_SALARY_GEN']]\ndf['ENTRY_SALARY_GEN'] = [s.replace(\" \",\"\") for s in df['ENTRY_SALARY_GEN']]\ndf['ENTRY_SALARY_GEN'] = [s.replace(\",\",\"\") for s in df['ENTRY_SALARY_GEN']]\ndf['ENTRY_SALARY_GEN'] = [s.replace(\"*\",\"\") for s in df['ENTRY_SALARY_GEN']] #there is one salary that had \"*\"so I had to manually remove it\ndf['ENTRY_SALARY_GEN'] = [s.split(\"-\") for s in df['ENTRY_SALARY_GEN']]\n\nfor s in df['ENTRY_SALARY_GEN']:\n    if s[0] != \"\":\n        salaries.append(int(s[0]))","f9841555":"plt.figure(figsize=(10,10))\nsns.distplot(salaries,kde=False)\nplt.title('Salary Distribution')\nplt.show()","f3112d33":"plt.figure(figsize=(10,10))\nsns.distplot(df.REQUIREMENT_SET_ID,kde=False)\nplt.title('Number of Requirements Distribution')\nplt.show()\n#print(df.REQUIREMENT_SET_ID.to_string(index=True))","5c384898":"#calculate the mean of the number of the requirements\nprint(df.REQUIREMENT_SET_ID.mean())","c90f5467":"df['SCHOOL_TYPE'].value_counts() #group school_type by type","bb976d6f":"labels = 'College or University', 'Certificate', 'Apprenticeship', 'High School'\nsizes = [99, 44, 37, 11]\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.0f%%',shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","9116f9d3":"Import all the needed libraries.","d0fd95bb":"**4. Single Structured CSV File Code<br>**\nConvert a folder full of plain-text job postings into a single structured CSV file.","9e35cc91":"**Data Science for Good:City of Los Angles Job Bulletins Analysis**","5c7cebd9":"**5.1 Salary Analysis**<br>\n1. Format salaries.\nNote: I only took the starting salary of jobs that have range for salary. For example: salary is \\$89,000 - \\$100,000, I considered only \\$89,000","77188b3b":"1. Plot the data.","1fff0ec5":"**5.3 School Type Analysis**<br>\n","dc655879":"To get two fields of salary,*ENTRY_SALARY_GEN* and *ENTRY_SALARY_DWP*, I scaned the lines for format $xx,xxx\/$xxx,xxx and filtered the results according to **4 salary types**:<br> \n1) flat-rated and not Department of Water and Power(gen)<br>\n2) not flat-rated and not Department of Water and Power(gen)<br>\n3) flat-rated and Department of Water and Power<br>\n4) not flat-rated and Department of Water and Power<br><br>","2522ae80":"For starters, I forked the code in Data Science for Good City of LA Starter Kernel, and then I started working from there. Thank you. It was the push that I needed to start.\n\nOverall, the code open text files one by one and start going through each text file line by line. \nIn the excel sheet \"Kaggle_data_dictionary.csv\", the field names and descriptions of each field are mentioned there. There are **21** fields.*FILE_NAME* and *OPEN_DATE* fields are already extracted in the code that I forked.<br><br> \n\n**For easier computatioins, I made sure to make strings all the same case when I compare them or search for them.**\n","ee74b6fc":"**1. Objective**<br>\nUsing text analysis,The Los Angeles Mayor\u2019s Office wants to improve the city's job bulletins (683 in total) by using text analysis to make suggestions for improvements.\n","302df283":"**5. Data Analysis **(under progress)","ba29911d":"4. Suggestions for Improvements<br>\nAccording to Gobankingrates.com, the income needed for homeowners is **\\$150,392** and for **renters is \\$136,208**. Accroding to the graph above, the average salary is **\\$80,000**.<br> There are **\\$70,392 shortage for homeowners** and **\\$56,208 shortage for renters**. A review on suggested salaries to increase them will most likely increase the quality of the pool of the applicants. If there is a rewarding pay to live comfortably in LA, the jobs will be more appealing.","63d39f41":"Thank you for checking my humble notebook! :D ","55f91116":"Create CSV file.","b7d3e1cc":"2. plot salaries and check the distrubution of salaries.","d1c94bd5":"2. Analyze the graph.<br>\nMost of the jobs have around 1 to 2 requiremets which give chance to more people.\n","922824f6":"**2. Problem Statement**<br>\nThe goal is to convert a folder full of plain-text job postings into a single structured CSV file and then to use this data to:<br> (1) identify language that can negatively bias the pool of applicants<br> \n(2) improve the diversity and quality of the applicant pool<br>\n(3) make it easier to determine which promotions are available to employees in each job class. (optional)","b5bf118d":"**3. Data Dictionary**","486c589a":"3. analyze the graph.<br>\nAmong all salaries, the **MIN salary** is around **\\$30,000** ,and the **MAX salary** is around **\\$230,000**.<br>\nMost jobs have a salary that is around **\\$80,000**(avergae)<br>","f4d6b1cc":"**Note:** I won't consider the 477 unknown school type in the pie chart since the reason behind them missing is unknown. It can be because the patterns I used to search for school type didn't catch them or they might be not mentioned. I didn't have the time to check which reason it is.","84349447":"2. Analyze the pie chart.<br>\n52% (more than half of the jobs) require a college or university degree. While this might ensure that qualified candidtaes only can apply, it can also be a hindrance for the diversity of the pool of the applicants. Due to high costs of colleges, they are not the first option after high school. I suggest that the jobs to be waivered and give more room to those who don't have a college or university degree while ask for extra certificates that are cheaper than tuition of the colleges and universities for example.","896f9c00":"1. Plot the number of requirements and check the distribution.","84eddbae":"**5.2 Number of Requirements Analysis**<br>\n","c6819169":"**Kernel Content**<br>\n1. Objective<br>\n2. Problem Statement<br>\n3. Data Dictionary<br>\n4. Single Structured CSV File Code<br>\n5. Data Analysis<br>"}}