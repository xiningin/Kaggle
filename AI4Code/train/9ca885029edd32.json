{"cell_type":{"ef74f0e7":"code","515aeded":"code","0a4f5369":"code","68480754":"code","0cf2ef77":"code","172f4eaa":"code","c2331fe6":"code","3a3e2ef3":"code","9edd3f75":"code","dcccd925":"code","fa7771b2":"code","787d7cbb":"code","423270ca":"code","f5a146a5":"code","59161994":"code","e3ac79bd":"code","31104f68":"code","da0f4e06":"code","1827614e":"code","0b90a6a3":"code","121a231b":"code","f276b867":"markdown"},"source":{"ef74f0e7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport nltk","515aeded":"import pandas\ndf_sms = pd.read_csv('..\/input\/spam-or-ham\/spam.csv',encoding='latin-1')\ndf_sms.head()","0a4f5369":"round((df_sms.isnull().sum()*100\/len(df_sms)),2)","68480754":"df_sms = df_sms.drop([\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"], axis=1)\ndf_sms = df_sms.rename(columns={\"v1\":\"label\", \"v2\":\"sms\"})\ndf_sms.head()","0cf2ef77":"len(df_sms)","172f4eaa":"round((df_sms.label.value_counts()*100\/len(df_sms)),2)","c2331fe6":"df_sms.describe()","3a3e2ef3":"df_sms['length'] = df_sms['sms'].apply(len)\ndf_sms.head()","9edd3f75":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.figure(figsize=(20,8))\nax1=df_sms['length'].plot( kind='hist')\nfor p in ax1.patches:\n    ax1.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.show()","dcccd925":"df_sms.hist(column='length', by='label', figsize=(20,8))\nplt.show()","fa7771b2":"df_sms.loc[:,'label'] = df_sms.label.map({'ham':0, 'spam':1})\ndf_sms.shape\n","787d7cbb":"df_sms.head()","423270ca":"from sklearn.feature_extraction.text import CountVectorizer\ncount_vector = CountVectorizer()","f5a146a5":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(df_sms['sms'], \n                                                    df_sms['label'],test_size=0.2, \n                                                    random_state=42,shuffle=True, stratify=df_sms['label'])","59161994":"# Fit the training data and then return the matrix\ntraining_data = count_vector.fit_transform(X_train)\n","e3ac79bd":"# Transform testing data and return the matrix. \ntesting_data = count_vector.transform(X_test)","31104f68":"from sklearn.naive_bayes import MultinomialNB\nnaive_bayes = MultinomialNB()\nnaive_bayes.fit(training_data,y_train)","da0f4e06":"MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)","1827614e":"predictions = naive_bayes.predict(testing_data)","0b90a6a3":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score,classification_report\nprint('Accuracy score:  {}'.format(round((accuracy_score(y_test, predictions)),2)))\nprint('Precision score: {}'.format(round((precision_score(y_test, predictions)),2)))\nprint('Recall score:    {}'.format(round((recall_score(y_test, predictions)),2)))\nprint('F1 score:        {}'.format(round((f1_score(y_test, predictions)),2)))","121a231b":"print(classification_report(y_test, predictions))","f276b867":"Remove columns with higher null %"}}