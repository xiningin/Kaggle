{"cell_type":{"6735cb18":"code","6762e3fd":"code","1b1b7ae5":"code","092c9c5c":"code","11375cfa":"code","2b052b75":"code","a26d1b0e":"code","37ccd06c":"code","bfd7926d":"code","f61d9133":"code","d24282ff":"code","e55698f4":"code","e08dc353":"code","9c7a8e2c":"code","ef643645":"code","0d187acf":"code","12a22bf9":"code","e84c8300":"code","b2a156b0":"code","f2e71d14":"code","0f196c16":"code","84b00ded":"code","ddca44f5":"code","be65be27":"code","8064bb07":"code","769345ba":"code","7e725fab":"code","a8d256ab":"code","ec5b821b":"code","b0651fbe":"code","9018ef0a":"code","f52071c9":"code","e6691bd5":"code","34078281":"code","e86cf5b4":"code","93427b81":"code","a61d2e77":"code","24cbae9b":"code","422567f0":"code","42a0d5b4":"code","398278b9":"code","08f88170":"code","b0b8fbb8":"code","4226cee8":"markdown","d52b7dcf":"markdown","0b710b8c":"markdown","7a954d51":"markdown","0adaa6a5":"markdown","2fa57f4b":"markdown","0ee1bef8":"markdown","e5e6cbd4":"markdown","361a6804":"markdown","6fed3bd3":"markdown","b482d852":"markdown","c2f5103e":"markdown","cf56e5b6":"markdown","cc301605":"markdown","ea7250c7":"markdown","2236a1fa":"markdown","b5d08814":"markdown","8ee14e56":"markdown","ca78e769":"markdown","2ef38326":"markdown","80b1c945":"markdown","365ed0d6":"markdown","d0588168":"markdown","09770381":"markdown","2b5529ed":"markdown","1848bc71":"markdown","7bb839b7":"markdown","e0e6a208":"markdown"},"source":{"6735cb18":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras","6762e3fd":"(X_train, y_train), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()","1b1b7ae5":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","092c9c5c":"X_train[0]","11375cfa":"class_labels = [\"T-shirt\/top\",\"Trouser\", \"Pullover\", \"Dress\", \"Coat\", \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\",]","2b052b75":"plt.imshow(X_train[0])\n# plt.imshow(X_train[0], cmap = 'Greys')\nplt.show()","a26d1b0e":"plt.figure(figsize = (16,16))\n\nj = 1\nfor i in np.random.randint(0, 1000, 25):\n    plt.subplot(5,5,j)\n    j+=1\n    plt.imshow(X_train[i], cmap = 'Greys')\n    plt.axis('off')\n    plt.title(class_labels[y_train[i]] + \"=\" + str(y_train[i]))\n#     plt.title(class_labels[y_train[i]] + \"=\" + str(y_train[i]), fontsize = 20)","37ccd06c":"X_train.ndim","bfd7926d":"X_train_dim = np.expand_dims(X_train, -1)\nX_test_dim = np.expand_dims(X_test, -1)","f61d9133":"X_train_dim.ndim, X_train_dim.shape, X_train.shape","d24282ff":"X_train_scale = X_train_dim \/ 255\nX_test_scale = X_test_dim \/ 255","e55698f4":"from sklearn.model_selection import train_test_split","e08dc353":"X_train_model, X_val_model, y_train_model, y_val_model = train_test_split(X_train_scale, y_train, test_size = 0.2, random_state = 2020)","9c7a8e2c":"X_train_model.shape, X_val_model.shape, y_train_model.shape, y_val_model.shape","ef643645":"cnn_model = keras.models.Sequential(\n    [\n        keras.layers.Conv2D(\n            filters = 32,\n            kernel_size = 3,\n            strides = (1,1),\n            padding = 'valid',\n            activation = 'relu',\n            input_shape = [28,28,1]   # 1 is for Black-White Image. 3 will be for RGB images.\n        ),\n        \n        keras.layers.MaxPooling2D(pool_size = (2,2)),\n        \n        keras.layers.Flatten(),\n        \n        keras.layers.Dense(units = 128, activation = 'relu'),\n        \n        keras.layers.Dense(units = 10, activation = 'softmax') # Output Layer\n        \n        \n    ]\n)","0d187acf":"cnn_model.summary()","12a22bf9":"cnn_model.compile(\n    optimizer = 'adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n)","e84c8300":"cnn_model.fit(X_train_model, y_train_model, epochs = 10, batch_size = 512, verbose = 1, validation_data=(X_val_model, y_val_model))","b2a156b0":"X_test_scale[0].ndim","f2e71d14":"y_pred_1 = cnn_model.predict(np.expand_dims(X_test_scale[0], axis = 0)).round(2)","0f196c16":"y_pred_1","84b00ded":"np.argmax(y_pred_1)","ddca44f5":"y_test[0]","be65be27":"y_pred = cnn_model.predict(X_test_scale).round(2)\ny_pred","8064bb07":"cnn_model.evaluate(X_test_scale, y_test)","769345ba":"plt.figure(figsize = (16,30))\n\nj = 1\nfor i in np.random.randint(0, 1000, 60):\n    plt.subplot(10,6,j)\n    j += 1\n    plt.imshow(X_test_scale[i].reshape(28,28), cmap = 'Greys') # As we aer using the scaled dataset we have to reshape it back to 28*28.\n#     plt.imshow(X_test[i], cmap = 'Greys')\n    plt.axis('off')\n    plt.title(\"Actual = {} \\n Predicted = {}\".format(class_labels[y_test[i]], class_labels[np.argmax(y_pred[i])]) )\n    ","7e725fab":"from sklearn.metrics import confusion_matrix","a8d256ab":"cm = confusion_matrix(y_test, [np.argmax(i) for i in y_pred])","ec5b821b":"plt.figure(figsize = (16,9))\nsns.heatmap(cm, annot = True, fmt = \"d\", xticklabels = class_labels, yticklabels = class_labels)","b0651fbe":"from sklearn.metrics import classification_report","9018ef0a":"cr = classification_report(\n    y_test, \n    [ np.argmax(i) for i in y_pred],\n    target_names = class_labels,\n)","f52071c9":"print(cr)","e6691bd5":"cnn_model.save(\"Faishon_MNIST_CNN_model.h5\")","34078281":"model_loaded = keras.models.load_model('Faishon_MNIST_CNN_model.h5')","e86cf5b4":"y_pred_saved_model = model_loaded.predict(np.expand_dims(X_test_scale[99], axis = 0)).round(2)\n","93427b81":"prediction = np.argmax(y_pred_saved_model)\nprediction","a61d2e77":"y_test[99]","24cbae9b":"print(\"Actual = {} \\nPredicted = {}\".format(class_labels[y_test[99]], class_labels[prediction]) )","422567f0":"cnn_model2 = keras.models.Sequential(\n    [\n        keras.layers.Conv2D(\n            filters = 32,\n            kernel_size = 3,\n            strides = (1,1),\n            padding = 'valid',\n            activation = 'relu',\n            input_shape = [28,28,1]   # 1 is for Black-White Image. 3 will be for RGB images.\n        ),\n        \n        keras.layers.MaxPooling2D(pool_size = (2,2)),\n        \n        keras.layers.Conv2D(\n            filters = 64,\n            kernel_size = 3,\n            strides = (2,2),\n            padding = 'same',\n            activation = 'relu',\n            input_shape = [28,28,1]   # 1 is for Black-White Image. 3 will be for RGB images.\n        ),\n        \n        keras.layers.MaxPooling2D(pool_size = (2,2)),\n        \n        keras.layers.Flatten(),\n        \n        keras.layers.Dense(units = 128, activation = 'relu'),\n        \n        keras.layers.Dropout(0.25),\n        \n        keras.layers.Dense(units = 256, activation = 'relu'),\n        \n        keras.layers.Dropout(0.25),\n        \n        keras.layers.Dense(units = 128, activation = 'relu'),\n        \n        keras.layers.Dense(units = 10, activation = 'softmax') # Output Layer\n        \n        \n    ]\n)","42a0d5b4":"cnn_model2.summary()","398278b9":"cnn_model2.compile(\n    optimizer = 'adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n)","08f88170":"cnn_model2.fit(X_train_model, y_train_model, epochs = 20, batch_size = 512, verbose = 1, validation_data=(X_val_model, y_val_model))","b0b8fbb8":"cnn_model2.evaluate(X_test_scale, y_test)","4226cee8":"# Scale the dataset","d52b7dcf":"# Visualize the Image","0b710b8c":"# CNN Model Building\nHere we are going to create one layer of Convolution, and on for Pooling.\nThen will flatten the images.. now our data set is ready to feed to NN, so will proceed with the Neural Network.","7a954d51":"# Classification Report","0adaa6a5":"# Compile the 2nd Model","2fa57f4b":"# Import Library","0ee1bef8":"If we see that our test data is of 3 dimensional.. where as we need to pass 4 dimensional to CNN model. So first we have to make our test data into 4 dimensional.","e5e6cbd4":"# Load Data","361a6804":"# Evaluate","6fed3bd3":"# Split Dataset","b482d852":"Here we are using 2 Convolutional layer and pooling layers.. and then in neural network we used Dense layer followed by Dropout and then again Dense; Dropout; Dense all as hidden layers and finally the output layer.","c2f5103e":"# Load the saved model for prediction","cf56e5b6":"# train the Model","cc301605":"Predict for entire test dataset","ea7250c7":"Refer to https:\/\/www.kaggle.com\/dskagglemt\/keras-handson-fashion-mnist-classification for details on the dataset, and visualization.","2236a1fa":"# Test the Model","b5d08814":"Cool.. our prediction and actual are same.","8ee14e56":"Dimension of our train dataset is 3, and we have to convert this into 4.","ca78e769":"Seems the model with 1 Convolution layer and the 2nd model with 2 convolution layers has similar accuracy.. not much difference.\nProbably we need to keep on training either using high epochs.. or adding more convolution layers and (or) dense layers.","2ef38326":"# Compile the Model","80b1c945":"# Save Model","365ed0d6":"# Visualize Predict output","d0588168":"# Change Dimension","09770381":"# Convolutional Neural Network\nThis is a hands-on on MNIST Fashion Classification Problem using CNN, from step by step.\n\nWill also understand what CNN is?","2b5529ed":"Now the dataset is scalled in range 0 and 1.","1848bc71":"# Making the CNN with multiple layers.","7bb839b7":"# What is CNN?\nIn deep learning, a convolutional neural network (CNN, or ConvNet) is a class of deep neural networks, most commonly applied to analyzing visual imagery.\n\nConvolutional Neural Networks (ConvNets or CNNs) are a category of Neural Networks that have proven very effective in areas such as image recognition and classification. ConvNets have been successful in identifying faces, objects and traffic signs apart from powering vision in robots and self driving cars.\n\nA Convolutional Neural Network (CNN) is comprised of one or more convolutional layers (often with a subsampling step) and then followed by one or more fully connected layers as in a standard multilayer neural network. The architecture of a CNN is designed to take advantage of the 2D structure of an input image (or other 2D input such as a speech signal).","e0e6a208":"# Confusion Matrix"}}