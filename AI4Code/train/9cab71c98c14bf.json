{"cell_type":{"d6c25ec9":"code","6f42e729":"code","20bbd853":"code","91661656":"code","63bd166b":"code","8a8f7fdb":"code","ecc57e20":"code","36250328":"code","a11533d4":"code","cfdcbc20":"code","22d08ba7":"code","d8d5dd7b":"code","01917dd7":"code","f42c7c4e":"code","fc0ddf40":"code","fee2071d":"code","b36c30dd":"code","3edafd4f":"code","4666fd8f":"code","b3e356cf":"code","2e541dc0":"code","3450d075":"code","d9b35d57":"code","7b2c05f7":"code","cd74f131":"code","b8eeaa82":"code","68839550":"code","24610b2b":"code","7fde4503":"code","baedc807":"code","5ed30b8f":"code","27d15d75":"code","e70edcc0":"code","4e352a07":"code","da445b6b":"code","71f04c19":"code","9ffbb04a":"code","dccd8e08":"code","d8f7df14":"code","cce50332":"code","c020e38c":"code","4942c04a":"code","782b0bb5":"markdown","5fdb3d7b":"markdown","d8fb66ac":"markdown","9b7d2800":"markdown","253a0d75":"markdown","96d922fe":"markdown","e8f24c03":"markdown","32cc6ada":"markdown","e04e0887":"markdown","97f77288":"markdown","a3956ace":"markdown","ed0e9727":"markdown","74a9f234":"markdown","b45e742b":"markdown","15eb118f":"markdown","cd54342d":"markdown","507688ff":"markdown","6190835f":"markdown","eab3506f":"markdown","919c13bd":"markdown","7fc8954f":"markdown","5e135a5f":"markdown","810d55ad":"markdown","63d1e928":"markdown","5d5cde11":"markdown","feafab74":"markdown","0db203b9":"markdown","900f54ce":"markdown","2c850a69":"markdown","2f67dde9":"markdown","1b42d7e9":"markdown","399ec7bc":"markdown"},"source":{"d6c25ec9":"# Data manipulation\nimport pandas as pd\nimport numpy as np\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set a few plotting defaults\n%matplotlib inline\nplt.style.use('fivethirtyeight')\nplt.rcParams['font.size'] = 18\nplt.rcParams['patch.edgecolor'] = 'k'","6f42e729":"pd.options.display.max_columns = 150\n\n#Read in data\ntrain = pd.read_csv('..\/input\/costa-rican-household-poverty-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/costa-rican-household-poverty-prediction\/test.csv')\ntrain.head()","20bbd853":"train.info()\n\n#130 \uac1c\uc758 \uc815\uc218 \uc5f4, 8 \uac1c\uc758 \ubd80\ub3d9 (\uc22b\uc790) \uc5f4 \ubc0f 5 \uac1c\uc758 \uac1c\uccb4 \uc5f4\uc774 \uc788\uc74c\n#\uc815\uc218 \uc5f4\uc740 \ubd80\uc6b8 \ubcc0\uc218 (0 \ub610\ub294 1\uc744 \uc0ac\uc6a9), \ubd88\uc5f0\uc18d \uc21c\uc11c \uac12\uc744 \uac00\uc9c4 \uc11c\uc218 \ubcc0\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4.\n#\uac1d\uccb4 \uc5f4\uc740 \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\ub85c \uc9c1\uc811 \uacf5\uae09 \ub420 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c\uac00 \ub420 \uc218\ub3c4 \uc788\ub2e4\n\n#\uc5f4\ubcf4\ub2e4 \ud589\uc774 \ub354 \ub9ce\uc740 test\ub97c \uc0b4\ud3b4\ubcf4\uc790.","91661656":"test.info()\n# \ud0c0\uac9f\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc5f4\uc740 \ud558\ub098\uac00 \uc801\uc74c (train int130\uac1c test int129\uac1c)\n\n#\uc815\uc218 \uc5f4\n#\uc815\uc218 \uc5f4\uc5d0\uc11c \uace0\uc720 \ud55c \uac12\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\uace0\n#\uac01 \uc5f4\uc5d0 \ub300\ud574 \uace0\uc720 \uac12\uc758 \uc218\ub97c \uc138\uace0 \uacb0\uacfc\ub97c \ub9c9\ub300 \uadf8\ub798\ud504\ub85c \ud655\uc778","63bd166b":"train.select_dtypes(np.int64).nunique().value_counts().sort_index().plot.bar(color = 'blue',\n                                                                                 figsize = (8, 6),                                                                          \n                                                                                 edgecolor = 'k', linewidth = 2);\n\nplt.xlabel('Number of Unique Values');plt.ylabel('Count');\nplt.title('Count of Unique Values in Integer Columns');\n\n#\uc815\uc218\uc5f4\uc758 \uace0\uc720\ud55c \uac12\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf8 \uacb0\uacfc","8a8f7fdb":"from collections import OrderedDict\n\nplt.figure(figsize = (20, 16))\nplt.style.use('fivethirtyeight')\n\n#Color mapping\ncolors = OrderedDict({1: 'red', 2:'orange', 3:'blue', 4:'green'})\npoverty_mapping = OrderedDict({1:'extreme', 2:'moderate', 3:'vulnerable', 4:'non vulnerable'})\n\n#Interate through the float columns\nfor i, col in enumerate(train.select_dtypes('float')):\n    ax = plt.subplot(4, 2, i+1)\n    #Interate throught the poverty levels\n    for poverty_level, color in colors.items():\n        #plot each poverty level as a separate line\n        sns.kdeplot(train.loc[train['Target'] == poverty_level, col].dropna(),\n                   ax = ax,color = color, label = poverty_mapping[poverty_level])\n        \n        plt.title(f'{col.capitalize()} Distribution'); plt.xlabel(f'{col}');plt.ylabel('Desity')\n        \n        plt.subplots_adjust(top = 2)\n        \n        #v2al = mothly rent payment \uc6d4\uc138 \uc9c0\ubd88\n        #b18q1 = number of tablets household owns \uc138\ub300\uac00 \uc18c\uc720\ud55c \ud0dc\ube14\ub9bf \uc218\n        #rez_esc, Years behind in school \ud559\uad50 \uba87\ub144\ub4a4\uc5d0 \uac00\ub0d0\n        \n        #overcrowding = persons per room  \ubc29 \ub2f9 \uc0ac\ub78c\n        #SQBovercrowding = overcrowding squared \n      \n        \n        #dependency = dependency, Dependency rate, calculated = (number of members of the household younger than 19 or older than 64)\/\n                                                #(number of member of household between 19 and 64)\n            \n            #\uc758\uc874\uc131, \uc758\uc874\uc131 \ube44\uc728, \uacc4\uc0b0 \ub41c = (19 \uc138 \uc774\ud558 \ub610\ub294 64 \uc138 \uc774\uc0c1 \uac00\uad6c \uad6c\uc131\uc6d0 \uc218) \/ (19-64 \uc138 \uac00\uad6c \uad6c\uc131\uc6d0 \uc218)\n        #SQBdependency = dependency squared\n        #SQBmeaned = square of the mean years of education of adults (>=18) in the household\n        \n","ecc57e20":"train.select_dtypes('object').head()","36250328":"#dependency \uc624\ub958\ub0a8 \uc65c\uc778\uc9c0\ub294 \ubaa8\ub984\n\nmapping = {\"yes\" : 1, \"no\" : 0}\n\n#Apply the same operation to both train and test\nfor df in [train, test]:\n    #Fill in the values with the correct mapping\n    df['dependency'] = df['dependency'].replace(mapping).astype(np.float64)\n    df['edjefa'] = df['edjefa'].replace(mapping).astype(np.float64)\n    df['edjefe'] = df['edjefe'].replace(mapping).astype(np.float64)\n    \n    train[['dependency', 'edjefa', 'edjefe']].describe()\n    ","a11533d4":"plt.figure(figsize = (16, 12))\n\n# Iterate through the float columns\nfor i, col in enumerate(['dependency', 'edjefa', 'edjefe']):\n    ax = plt.subplot(3, 1, i + 1)\n    # Iterate through the poverty levels\n    for poverty_level, color in colors.items():\n        # Plot each poverty level as a separate line\n        sns.kdeplot(train.loc[train['Target'] == poverty_level, col].dropna(), \n                    ax = ax, color = color, label = poverty_mapping[poverty_level])\n        \n    plt.title(f'{col.capitalize()} Distribution'); plt.xlabel(f'{col}'); plt.ylabel('Density')\n\nplt.subplots_adjust(top = 2)\n\n#dependency, Dependency rate, calculated = (number of members of the household younger than 19 or older than 64)\/(number of member of household between 19 and 64)\n#edjefe, years of education of male head of household,based on the interaction of escolari (years of education), head of household and gender, yes=1 and no=0\n#edjefa, years of education of female head of household, based on the interaction of escolari (years of education), head of household and gender, yes=1 and no=0\n\n\n#\uc774\ub7f0 \ub2e8\uacc4\ub97c \uac70\uce58\uba74 \ubcc0\uc218\ub294 \uc774\uc81c \uc22b\uc790\ub85c \uc62c\ubc14\ub974\uac8c \ud45c\uc2dc\ub418\uba70 \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc5d0 \uc81c\uacf5 \ub420 \uc218 \uc788\uc74c\n\n#\uc704\uc640 \uac19\uc740 \uc791\uc5c5\uc744 \uc880 \ub354 \uc27d\uac8c\ud558\uae30 \uc704\ud574 \uad50\uc721 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uacb0\ud569\ud55c\ub2e4.\n#\uae30\ub2a5 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc744 \uc2dc\uc791\ud55c \ud6c4\uc5d0\ub294 \ub450 \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ub3d9\uc77c\ud55c \uc791\uc5c5\uc744 \uc801\uc6a9\ud558\uc5ec\n#\ub3d9\uc77c\ud55c \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \uc911\uc694\ud558\ub2e4. \ub098\uc911\uc5d0 Target\uc744 \uae30\uc900\uc73c\ub85c \uc138\ud2b8\ub97c \ubd84\ub9ac \ud560 \uc218 \uc788\ub2e4.","cfdcbc20":"# Add null Target column to test\ntest['Target'] = np.nan\ndata = train.append(test, ignore_index = True)","22d08ba7":"# Heads of household\nheads = data.loc[data['parentesco1'] == 1].copy()\n\n# Labels for training\ntrain_labels = data.loc[(data['Target'].notnull()) & (data['parentesco1'] == 1), ['Target', 'idhogar']]\n\n# Value counts of target\nlabel_counts = train_labels['Target'].value_counts().sort_index()\n\n# Bar plot of occurrences of each label\nlabel_counts.plot.bar(figsize = (8, 6), \n                      color = colors.values(),\n                      edgecolor = 'k', linewidth = 2)\n\n# Formatting\nplt.xlabel('Poverty Level'); plt.ylabel('Count'); \nplt.xticks([x - 1 for x in poverty_mapping.keys()], \n           list(poverty_mapping.values()), rotation = 60)\nplt.title('Poverty Level Breakdown');\n\nlabel_counts","d8d5dd7b":"# Groupby the household and figure out the number of unique values\nall_equal = train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\n\n# Households where targets are not all equal\nnot_equal = all_equal[all_equal != True]\nprint('There are {} households where the family members do not all have the same target.'.format(len(not_equal)))","01917dd7":"train[train['idhogar'] == not_equal.index[0]][['idhogar', 'parentesco1', 'Target']]","f42c7c4e":"households_leader = train.groupby('idhogar')['parentesco1'].sum()\n\n# Find households without a head\nhouseholds_no_head = train.loc[train['idhogar'].isin(households_leader[households_leader == 0].index), :]\n\nprint('There are {} households without a head.'.format(households_no_head['idhogar'].nunique()))","fc0ddf40":"# Find households without a head and where labels are different\n#head\uac00 \uc5c6\ub294 \uc138\ub300\uc8fc\ub97c \ucc3e\uace0 \uc5b4\ub290 \ub77c\ubca8\uc774 \ub2e4\ub978\uc9c0 \ucc3e\uae30\nhouseholds_no_head_equal = households_no_head.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\nprint('{} Households with no head have different labels.'.format(sum(households_no_head_equal == False)))","fee2071d":"# Iterate through each household\nfor household in not_equal.index:\n    # Find the correct label (for the head of household)\n    true_target = int(train[(train['idhogar'] == household) & (train['parentesco1'] == 1.0)]['Target'])\n    \n    # Set the correct label for all members in the household\n    train.loc[train['idhogar'] == household, 'Target'] = true_target\n    \n    \n# Groupby the household and figure out the number of unique values\nall_equal = train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\n\n# Households where targets are not all equal\nnot_equal = all_equal[all_equal != True]\nprint('There are {} households where the family members do not all have the same target.'.format(len(not_equal)))","b36c30dd":"# Number of missing in each column\nmissing = pd.DataFrame(data.isnull().sum()).rename(columns = {0: 'total'})\n\n# Create a percentage missing\nmissing['percent'] = missing['total'] \/ len(data)\n\nmissing.sort_values('percent', ascending = False).head(10).drop('Target')","3edafd4f":"def plot_value_counts(df, col, heads_only = False):\n    \"\"\"Plot value counts of a column, optionally with only the heads of a household\"\"\"\n    # Select heads of household\n    if heads_only:\n        df = df.loc[df['parentesco1'] == 1].copy()\n        \n    plt.figure(figsize = (8, 6))\n    df[col].value_counts().sort_index().plot.bar(color = 'blue',\n                                                 edgecolor = 'k',\n                                                 linewidth = 2)\n    plt.xlabel(f'{col}'); plt.title(f'{col} Value Counts'); plt.ylabel('Count')\n    plt.show();","4666fd8f":"plot_value_counts(heads, 'v18q1')","b3e356cf":"heads.groupby('v18q')['v18q1'].apply(lambda x: x.isnull().sum())","2e541dc0":"data['v18q1'] = data['v18q1'].fillna(0)","3450d075":"# Variables indicating home ownership\nown_variables = [x for x in data if x.startswith('tipo')]\n\n\n# Plot of the home ownership variables for home missing rent payments\ndata.loc[data['v2a1'].isnull(), own_variables].sum().plot.bar(figsize = (10, 8),\n                                                                        color = 'green',\n                                                              edgecolor = 'k', linewidth = 2);\nplt.xticks([0, 1, 2, 3, 4],\n           ['Owns and Paid Off', 'Owns and Paying', 'Rented', 'Precarious', 'Other'],\n          rotation = 60)\nplt.title('Home Ownership Status for Households Missing Rent Payments', size = 18);","d9b35d57":"# Fill in households that own the house with 0 rent payment\ndata.loc[(data['tipovivi1'] == 1), 'v2a1'] = 0\n\n# Create missing rent payment column\ndata['v2a1-missing'] = data['v2a1'].isnull()\n\ndata['v2a1-missing'].value_counts()","7b2c05f7":"data.loc[data['rez_esc'].notnull()]['age'].describe()","cd74f131":"# If individual is over 19 or younger than 7 and missing years behind, set it to 0\ndata.loc[((data['age'] > 19) | (data['age'] < 7)) & (data['rez_esc'].isnull()), 'rez_esc'] = 0\n\n# Add a flag for those between 7 and 19 with a missing value\ndata['rez_esc-missing'] = data['rez_esc'].isnull()","b8eeaa82":"data.loc[data['rez_esc'] > 5, 'rez_esc'] = 5","68839550":"def plot_categoricals(x, y, data, annotate = True):\n    \"\"\"Plot counts of two categoricals.\n    Size is raw count for each grouping.\n    Percentages are for a given value of y.\"\"\"\n    \n    # Raw counts \n    raw_counts = pd.DataFrame(data.groupby(y)[x].value_counts(normalize = False))\n    raw_counts = raw_counts.rename(columns = {x: 'raw_count'})\n    \n    # Calculate counts for each group of x and y\n    counts = pd.DataFrame(data.groupby(y)[x].value_counts(normalize = True))\n    \n    # Rename the column and reset the index\n    counts = counts.rename(columns = {x: 'normalized_count'}).reset_index()\n    counts['percent'] = 100 * counts['normalized_count']\n    \n    # Add the raw count\n    counts['raw_count'] = list(raw_counts['raw_count'])\n    \n    plt.figure(figsize = (14, 10))\n    # Scatter plot sized by percent\n    plt.scatter(counts[x], counts[y], edgecolor = 'k', color = 'lightgreen',\n                s = 100 * np.sqrt(counts['raw_count']), marker = 'o',\n                alpha = 0.6, linewidth = 1.5)\n    \n    if annotate:\n        # Annotate the plot with text\n        for i, row in counts.iterrows():\n            # Put text with appropriate offsets\n            plt.annotate(xy = (row[x] - (1 \/ counts[x].nunique()), \n                               row[y] - (0.15 \/ counts[y].nunique())),\n                         color = 'navy',\n                         s = f\"{round(row['percent'], 1)}%\")\n        \n    # Set tick marks\n    plt.yticks(counts[y].unique())\n    plt.xticks(counts[x].unique())\n    \n    # Transform min and max to evenly space in square root domain\n    sqr_min = int(np.sqrt(raw_counts['raw_count'].min()))\n    sqr_max = int(np.sqrt(raw_counts['raw_count'].max()))\n    \n    # 5 sizes for legend\n    msizes = list(range(sqr_min, sqr_max,\n                        int(( sqr_max - sqr_min) \/ 5)))\n    markers = []\n    \n    # Markers for legend\n    for size in msizes:\n        markers.append(plt.scatter([], [], s = 100 * size, \n                                   label = f'{int(round(np.square(size) \/ 100) * 100)}', \n                                   color = 'lightgreen',\n                                   alpha = 0.6, edgecolor = 'k', linewidth = 1.5))\n        \n    # Legend and formatting\n    plt.legend(handles = markers, title = 'Counts',\n               labelspacing = 3, handletextpad = 2,\n               fontsize = 16,\n               loc = (1.10, 0.19))\n    \n    plt.annotate(f'* Size represents raw count while % is for a given y value.',\n                 xy = (0, 1), xycoords = 'figure points', size = 10)\n    \n    # Adjust axes limits\n    plt.xlim((counts[x].min() - (6 \/ counts[x].nunique()), \n              counts[x].max() + (6 \/ counts[x].nunique())))\n    plt.ylim((counts[y].min() - (4 \/ counts[y].nunique()), \n              counts[y].max() + (4 \/ counts[y].nunique())))\n    plt.grid(None)\n    plt.xlabel(f\"{x}\"); plt.ylabel(f\"{y}\"); plt.title(f\"{y} vs {x}\");","24610b2b":"plot_categoricals('rez_esc', 'Target', data);","7fde4503":"plot_categoricals('escolari', 'Target', data, annotate = False)","baedc807":"plot_value_counts(data[(data['rez_esc-missing'] == 1)], \n                  'Target')","5ed30b8f":"plot_value_counts(data[(data['v2a1-missing'] == 1)], \n                  'Target')","27d15d75":"# Model imports\nfrom sklearn.svm import LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LogisticRegressionCV, RidgeClassifierCV\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.neighbors import KNeighborsClassifier","e70edcc0":"from hyperopt import hp, tpe, Trials, fmin, STATUS_OK\nfrom hyperopt.pyll.stochastic import sample\nimport csv\nimport ast\nfrom timeit import default_timer as timer","4e352a07":"def objective(hyperparameters, nfolds=5):\n    \"\"\"Return validation score from hyperparameters for LightGBM\"\"\"\n    \n    # Keep track of evals\n    global ITERATION\n    ITERATION += 1\n    \n    # Retrieve the subsample\n    subsample = hyperparameters['boosting_type'].get('subsample', 1.0)\n    subsample_freq = hyperparameters['boosting_type'].get('subsample_freq', 0)\n    \n    boosting_type = hyperparameters['boosting_type']['boosting_type']\n    \n    if boosting_type == 'dart':\n        hyperparameters['drop_rate'] = hyperparameters['boosting_type']['drop_rate']\n    \n    # Subsample and subsample frequency to top level keys\n    hyperparameters['subsample'] = subsample\n    hyperparameters['subsample_freq'] = subsample_freq\n    hyperparameters['boosting_type'] = boosting_type\n    \n    # Whether or not to use limit maximum depth\n    if not hyperparameters['limit_max_depth']:\n        hyperparameters['max_depth'] = -1\n    \n    # Make sure parameters that need to be integers are integers\n    for parameter_name in ['max_depth', 'num_leaves', 'subsample_for_bin', \n                           'min_child_samples', 'subsample_freq']:\n        hyperparameters[parameter_name] = int(hyperparameters[parameter_name])\n\n    if 'n_estimators' in hyperparameters:\n        del hyperparameters['n_estimators']\n    \n    # Using stratified kfold cross validation\n    strkfold = StratifiedKFold(n_splits = nfolds, shuffle = True)\n    \n    # Convert to arrays for indexing\n    features = np.array(train_selected)\n    labels = np.array(train_labels).reshape((-1 ))\n    \n    valid_scores = []\n    best_estimators = []\n    run_times = []\n    \n    model = lgb.LGBMClassifier(**hyperparameters, class_weight = 'balanced',\n                               n_jobs=-1, metric = 'None',\n                               n_estimators=10000)\n    \n    # Iterate through the folds\n    for i, (train_indices, valid_indices) in enumerate(strkfold.split(features, labels)):\n        \n        # Training and validation data\n        X_train = features[train_indices]\n        X_valid = features[valid_indices]\n        y_train = labels[train_indices]\n        y_valid = labels[valid_indices]\n        \n        start = timer()\n        # Train with early stopping\n        model.fit(X_train, y_train, early_stopping_rounds = 100, \n                  eval_metric = macro_f1_score, \n                  eval_set = [(X_train, y_train), (X_valid, y_valid)],\n                  eval_names = ['train', 'valid'],\n                  verbose = 400)\n        end = timer()\n        # Record the validation fold score\n        valid_scores.append(model.best_score_['valid']['macro_f1'])\n        best_estimators.append(model.best_iteration_)\n        \n        run_times.append(end - start)\n    \n    score = np.mean(valid_scores)\n    score_std = np.std(valid_scores)\n    loss = 1 - score\n    \n    run_time = np.mean(run_times)\n    run_time_std = np.std(run_times)\n    \n    estimators = int(np.mean(best_estimators))\n    hyperparameters['n_estimators'] = estimators\n    \n    # Write to the csv file ('a' means append)\n    of_connection = open(OUT_FILE, 'a')\n    writer = csv.writer(of_connection)\n    writer.writerow([loss, hyperparameters, ITERATION, run_time, score, score_std])\n    of_connection.close()\n    \n    # Display progress\n    if ITERATION % PROGRESS == 0:\n        display(f'Iteration: {ITERATION}, Current Score: {round(score, 4)}.')\n    \n    return {'loss': loss, 'hyperparameters': hyperparameters, 'iteration': ITERATION,\n            'time': run_time, 'time_std': run_time_std, 'status': STATUS_OK, \n            'score': score, 'score_std': score_std}","da445b6b":"# Define the search space\nspace = {\n    'boosting_type': hp.choice('boosting_type', \n                              [{'boosting_type': 'gbdt', \n                                'subsample': hp.uniform('gdbt_subsample', 0.5, 1),\n                                'subsample_freq': hp.quniform('gbdt_subsample_freq', 1, 10, 1)}, \n                               {'boosting_type': 'dart', \n                                 'subsample': hp.uniform('dart_subsample', 0.5, 1),\n                                 'subsample_freq': hp.quniform('dart_subsample_freq', 1, 10, 1),\n                                 'drop_rate': hp.uniform('dart_drop_rate', 0.1, 0.5)},\n                                {'boosting_type': 'goss',\n                                 'subsample': 1.0,\n                                 'subsample_freq': 0}]),\n    'limit_max_depth': hp.choice('limit_max_depth', [True, False]),\n    'max_depth': hp.quniform('max_depth', 1, 40, 1),\n    'num_leaves': hp.quniform('num_leaves', 3, 50, 1),\n    'learning_rate': hp.loguniform('learning_rate', \n                                   np.log(0.025), \n                                   np.log(0.25)),\n    'subsample_for_bin': hp.quniform('subsample_for_bin', 2000, 100000, 2000),\n    'min_child_samples': hp.quniform('min_child_samples', 5, 80, 5),\n    'reg_alpha': hp.uniform('reg_alpha', 0.0, 1.0),\n    'reg_lambda': hp.uniform('reg_lambda', 0.0, 1.0),\n    'colsample_bytree': hp.uniform('colsample_by_tree', 0.5, 1.0)\n}\n","71f04c19":"sample(space)","9ffbb04a":"algo = tpe.suggest","dccd8e08":"#\uc5ec\uae30\ubd80\ud130 \ub0b4\uac00 \ub6f0\uc5b4\ub118\uc5b4\uc11c \uc624\ub958 \ubc0f \uc81c\ub300\ub85c \uacb0\uacfc\uac12\uc774 \ub098\uc624\uc9c0 \uc54a\uc74c. \ubcf8\ubb38 \ubcf4\uba74\uc11c \uc124\uba85\ud558\uae30\n# Record results\ntrials = Trials()\n\n# Create a file and open a connection\nOUT_FILE = 'optimization.csv'\nof_connection = open(OUT_FILE, 'w')\nwriter = csv.writer(of_connection)\n\nMAX_EVALS = 100\nPROGRESS = 10\nN_FOLDS = 5\nITERATION = 0\n\n# Write column names\nheaders = ['loss', 'hyperparameters', 'iteration', 'runtime', 'score', 'std']\nwriter.writerow(headers)\nof_connection.close()","d8f7df14":"%%capture --no-display\ndisplay(\"Running Optimization for {} Trials.\".format(MAX_EVALS))\n\n# Run optimization\nbest = fmin(fn = objective, space = space, algo = tpe.suggest, trials = trials,\n            max_evals = MAX_EVALS)","cce50332":"import json\n\n# Save the trial results\nwith open('trials.json', 'w') as f:\n    f.write(json.dumps(str(trials)))","c020e38c":"results = pd.read_csv(OUT_FILE).sort_values('loss', ascending = True).reset_index()\nresults.head()","4942c04a":"plt.figure(figsize = (8, 6))\nsns.regplot('iteration', 'score', data = results);\nplt.title(\"Optimization Scores\");\nplt.xticks(list(range(1, results['iteration'].max() + 1, 3)));\n","782b0bb5":"Model Optimization\n\n\n\ubaa8\ub378 \ucd5c\uc801\ud654\ub294 \uad50\ucc28 \uac80\uc99d\uc744 \ud1b5\ud574 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130\ub97c \uc870\uc815\ud558\uc5ec \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc5d0\uc11c \ucd5c\uc0c1\uc758 \uc131\ub2a5\uc744 \ucd94\ucd9c\ud558\ub294 \ud504\ub85c\uc138\uc2a4\uc774\ub2e4.\n\ucd5c\uc0c1\uc758 \ubaa8\ub378 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130\ub294 \ubaa8\ub4e0 \ub370\uc774\ud130 \uc138\ud2b8\ub9c8\ub2e4 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0\uc774 \uc791\uc5c5\uc774 \ud544\uc694\ud558\ub2e4.\n\n\n1.\uc124\uba85\uc11c\n2.\uadf8\ub9ac\ub4dc \uac80\uc0c9\n3.\ubb34\uc791\uc704 \uac80\uc0c9\n4.\uc790\ub3d9\ud654 \ub41c \ucd5c\uc801\ud654\n\n\uc774 \ubc29\ubc95\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uac00\uc7a5 \ud6a8\uc728\uc801\uc778 \ubc29\ubc95\uc774\uba70 Tree Parzen Estimator\uc640 \ud568\uaed8 \uc218\uc815 \ub41c Bayesian Optimization \ubc84\uc804\uc744 \uc0ac\uc6a9\ud558\ub294 Hyperopt\ub97c \ud3ec\ud568\ud55c \uc5ec\ub7ec \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc27d\uac8c \uad6c\ud604\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 4\uac00\uc9c0\ub97c \uace0\uc218 \ud560 \uac83\uc774\ub2e4.","5fdb3d7b":"\ub9c8\ucee4\uc758 \ud06c\uae30\ub294 \uc6d0\uc2dc \uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4.\n\uadf8\ub9bc\uc744 \uc77d\uc73c\ub824\uba74 \uc8fc\uc5b4\uc9c4 y \uac12\uc744 \uc120\ud0dd\ud55c \ub2e4\uc74c \ud589\uc744 \uc77d\ub294\ub2e4.\n\n\uc608\ub97c \ub4e4\uc5b4, \ube48\uace4 \uc218\uc900\uc774 1 \uc778 \uacbd\uc6b0, \uac1c\uc778\uc758 93 %\uac00 \uc57d 800 \uba85\uc73c\ub85c \ucd1d \uc218\uc5d0 \ub4a4\uccd0\uc9c0\uc9c0 \uc54a\uc73c\uba70,\n\uc57d 0.4 %\uc758 \uac1c\uc778\uc774 5 \ub144 \ub4a4\uc5d0\uc774 \ubc94\uc8fc\uc5d0\uc11c \uc57d 50 \uba85\uc758 \uc804\uccb4 \uac1c\uc778\uc744 \uac16\ub294\ub2e4.\n\uc774 \ud50c\ub86f\uc740 \uc804\uccb4 \uac1c\uc218\uc640 \ubc94\uc8fc \ub0b4 \ube44\uc728\uc744 \ubaa8\ub450 \ud45c\uc2dc\ud558\ub824\uace0 \uc2dc\ub3c4\ud569\ub2c8\ub2e4. ","d8fb66ac":" \uc810\uc758 \ud06c\uae30\uac00 \uac01 x- \uac12\uc73c\ub85c \ud45c\uc2dc\ub418\ub294 \uc8fc\uc5b4\uc9c4 y- \uac12\uc758 \ubc31\ubd84\uc728\uc744 \ub098\ud0c0\ub0b4\ub294 \ub450 \ubc94\uc8fc \ud615\uc758 \uc0b0\uc810\ub3c4.","9b7d2800":"\n\uc874\uc7ac\ud558\ub294 \ub370\uc774\ud130 \ub9cc \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ud0dc\ube14\ub9bf \uc218\ub294 1\n\nv18q\uc758 \uac12\uc744 \uadf8\ub8f9\ud654\ud558\uc5ec (\ud0dc\ube14\ub9bf\uc758 \uacbd\uc6b0 1, \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 0) v18q1\uc758 null \uac12 \uc218\ub97c \uacc4\uc0b0\ud560 \uc218 \uc788\ub2e4.\n\nv18q = \uac00\uc871\uc774 \ud0dc\ube14\ub9bf\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub294\uc9c0 \uc5ec\ubd80\n\uc774 \uce7c\ub7fc\uc744 \uc5ec\ub7ec \ud0dc\ube14\ub9bf\uacfc \uacb0\ud569\ud558\uc5ec \uac00\uc124\uc774 \uc720\uc9c0\ub418\ub294\uc9c0 \ud655\uc778\ud574\uc57c\ud568.\n\n(null \uac12\uc774 \uac00\uc871\uc774 \ud0dc\ube14\ub9bf\uc744 \uc18c\uc720\ud558\uc9c0 \uc54a\uc74c\uc744 \ub098\ud0c0\ub0b4\ub294 \uc9c0 \uc54c\ub824\uc900\ub2e4.)","253a0d75":"rez_esc \n\n\uacb0\uce21\uac12 \ube44\uc728\uc774 \ub192\uc740 \ub9c8\uc9c0\ub9c9 \uc5f4\uc740 rez_esc\uc774\uba70 \ud559\uad50\uc5d0\uc11c \uba87 \ub144\uc774 \uc9c0\ub0ac\uc74c\uc744 \ub098\ud0c0\ub0b8\ub2e4.\nnull \uac12\uc744 \uac00\uc9c4 \uac00\uc815\uc758 \uacbd\uc6b0 \ud604\uc7ac \ud559\uad50\uc5d0 \uc790\ub140\uac00 \uc5c6\uc744 \uac00\ub2a5\uc131\uc774 \uc788\uae30\ub54c\ubb38\uc5d0 \uc774 \uc5f4\uc5d0\uc11c \uacb0\uce21\uac12\uc774\uc5c6\ub294 \uc0ac\ub78c\uc758 \uc5f0\ub839\uacfc\n\uacb0\uce21\uac12\uc774\uc5c6\ub294 \uc0ac\ub78c\uc758 \uc5f0\ub839\uc744 \ucc3e\uc544\uc11c \uc774\uac83\uc744 \ud14c\uc2a4\ud2b8 \ud574\ubcf8\ub2e4.","96d922fe":"4. \uacb0\uacfc \uae30\ub85d\n\uacb0\uacfc\ub97c \uae30\ub85d\ud558\uae30 \uc704\ud574 \ub450 \uac00\uc9c0 \ubc29\ubc95\uc744 \uc0ac\uc6a9\n\n\ud3c9\uac00\ud310 \uac1c\uccb4 : \ubaa9\uc801 \ud568\uc218\uc5d0\uc11c \ubc18\ud658 \ub41c \ubaa8\ub4e0 \ub0b4\uc6a9\uc744 \uc800\uc7a5\ud55c\ub2e4.\n\ubc18\ubcf5 \ud560 \ub54c\ub9c8\ub2e4 CSV \ud30c\uc77c\uc5d0 \uc4f0\uae30\n\uc911\ubcf5\uc744 \uc758\ubbf8\ud558\uae30 \ub54c\ubb38\uc5d0 \uc9c4\ud589 \uc0c1\ud669\uc744 \ucd94\uc801\ud558\uae30 \uc704\ud574 \uc5ec\ub7ec \uac00\uc9c0 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\n\ud55c \uac00\uc9c0 \ubc29\ubc95\uc740 \uc2e4\ud328 \ud560 \uc218 \uc788\uc9c0\ub9cc \ub450 \uac00\uc9c0 \ubc29\ubc95 \ubaa8\ub450 \uadf8\ub807\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4! csv \ud30c\uc77c\uc744 \uc0ac\uc6a9\ud558\uc5ec \uba54\uc11c\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \uba54\uc11c\ub4dc\ub97c \ubaa8\ub2c8\ud130\ub9c1\ud558\uace0 Trials \uac1c\uccb4\ub97c \uc800\uc7a5 \ud55c \ub2e4\uc74c \ub2e4\uc2dc\ub85c\ub4dc\ud558\uc5ec \ucd5c\uc801\ud654\ub97c \ub2e4\uc2dc \uc2dc\uc791\ud560 \uc218 \uc788\ub2e4.","e8f24c03":"\n\"\" \"\uc120\ud0dd\uc801\uc73c\ub85c \uc138\ub300\uc8fc \ub9cc \ud3ec\ud568\ud558\ub294 \uc5f4\uc758 \uac12 \uac1c\uc218\ub97c \ud45c\uc2dc.\" \"\"","32cc6ada":"Object Columns","e04e0887":"Read in Data and look at summary information","97f77288":"Using Optimized Model","a3956ace":"1. \ubaa9\uc801 \ud568\uc218\n\ubaa8\ub378 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130\ub97c \uac00\uc838\uc640 \uad00\ub828 \uc720\ud6a8\uc131 \uac80\uc0ac \uc810\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4 Hyperopt\ub294 \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \uc810\uc218\uac00 \ud544\uc694\ud558\ubbc0\ub85c 1-Macro F1 \uc810\uc218\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.","ed0e9727":"Hyperopt\ub97c \uc0ac\uc6a9\ud55c \ubaa8\ub378 \ud29c\ub2dd\n\ubca0\uc774\uc9c0\uc548 \ucd5c\uc801\ud654\uc5d0\ub294 4 \uac00\uc9c0 \ubd80\ubd84\uc774 \ud544\uc694\ud568.\n\n\ubaa9\ud45c \ud568\uc218 : \uc6b0\ub9ac\uac00 \ucd5c\ub300\ud654\ud558\uace0 \uc2f6\uc740 \uac83\n\ub3c4\uba54\uc778 \uacf5\uac04 : \uac80\uc0c9 \ud560 \uc9c0\uc5ed\n\ub2e4\uc74c \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \uc120\ud0dd \uc54c\uace0\ub9ac\uc998 : \uacfc\uac70 \uacb0\uacfc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c \uac12 \uc81c\uc548\n\uacb0\uacfc \uae30\ub85d : \uacfc\uac70 \uacb0\uacfc\ub97c \uc800\uc7a5\n\uc774\uc804\uc5d0 Hyperopt \uc0ac\uc6a9\uc5d0 \ub300\ud574 \uc791\uc131 \ud588\uc73c\ubbc0\ub85c \uc5ec\uae30\uc11c\ub294 \uad6c\ud604\uc744 \ud55c\ub2e4.","74a9f234":"\ub808\uc774\ube14\uc5d0\ub294 \uc138\ub300\uc8fc\ub9cc \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \uc774 \ub2e8\uacc4\ub294 \uc644\uc804\ud788 \ud544\uc694\ud55c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc\n\uc2e4\uc81c \uc0c1\ud669\uc5d0\uc11c \ubc1c\uc0dd\ud560 \uc218\uc788\ub294 \ub370\uc774\ud130 \uc624\ub958\ub97c \uc218\uc815\ud558\uae30\uc704\ud55c workflow\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uac83\uc774\ub2e4.\n\n\uacbd\ub825\uc744 \uc704\ud574 \uc5f0\uc2b5\ud558\uae30 !","b45e742b":"\uc798\ubabb\ub41c \ub808\uc774\ube14 \ud574\uacb0\n\n\uc2e4\uc81c \ub370\uc774\ud130 \uc138\ud2b8\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c Costa Rican Poverty \ub370\uc774\ud130\uc5d0\ub294 \uba87 \uac00\uc9c0 \ubb38\uc81c\uac00 \uc788\ub2e4.\n\n\uc77c\ubc18\uc801\uc73c\ub85c \ub370\uc774\ud130 \uacfc\ud559 \ud504\ub85c\uc81d\ud2b8\uc758 80 %\ub294 cleaning data and fixing erros \ud558\ub294\ub370 \uc0ac\uc6a9\ud55c\ub2e4.\n\uc0ac\ub78c \uc785\ub825 \uc624\ub958, \uce21\uc815 \uc624\ub958 \ub610\ub294 \ub54c\ub85c\ub294 \uc815\ud655\ud558\uc9c0\ub9cc \ub208\uc5d0 \ub744\ub294 \uadf9\ub2e8\uc801 \uc778 \uac12\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\uc774 \ub370\uc774\ud130 \ubb38\uc81c\uc758 \uacbd\uc6b0, \uac19\uc740 \uac00\uad6c\uc5d0 \uc18d\ud55c \uac1c\uc778\uc758 \ube48\uace4 \uc218\uc900\uc774 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0 \uc77c\ubd80 \ub808\uc774\ube14\uc774 \uc62c\ubc14\ub974\uc9c0 \uc54a\ub2e4.\n\n\uc774\uac83\uc774 \uc65c \uadf8\ub7f0\uc9c0\uc5d0 \ub300\ud574\uc11c\ub294 \uc54c\ub824\uc9c0\uc9c0 \uc54a\uc558\uc9c0\ub9cc \ub370\uc774\ud130\uc81c\uacf5\ucc98(The organizers)\uc5d0\uc11c \uc138\ub300\uc8fc\ub97c\ntrue label\ub85c \ud558\ub294\uac83\uc744 \ucd94\ucc9c\ud588\ub2e4.\n\n\uc774\ub7ec\ud55c \uc815\ubcf4\ub97c \ud1b5\ud574 \uc5c5\ubb34\ub97c \ud6e8\uc52c \uc27d\uac8c \uc218\ud589 \ud560 \uc218 \uc788\uc9c0\ub9cc\n\uc2e4\uc81c \ubb38\uc81c\uc5d0\uc11c\ub294 \ub808\uc774\ube14\uc774 \uc65c \ud2c0\ub9b0\uc9c0, \ubb38\uc81c\ub97c \uc9c1\uc811 \ud574\uacb0\ud558\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c\ud55c\ub2e4.\n\n\uc774 \uc139\uc158\uc5d0\uc11c\ub294 \ub808\uc774\ube14\uc774 \ubc18\ub4dc\uc2dc \ud544\uc694\ud55c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc \ub808\uc774\ube14 \uad00\ub828 \ubb38\uc81c\ub97c \ud574\uacb0\ud560\uac83\uc774\ub2e4.\n\n\n-\uc624\ub958 \uc2dd\ubcc4\n\uba3c\uc800 \uc624\ub958\ub97c \ucc3e\uc544 \uc218\uc815\ud574\uc57c\ud55c\ub2e4.\n\uac00\uc871 \uad6c\uc131\uc6d0\uc5d0 \ub300\ud574 \ub2e4\ub978 \ub808\uc774\ube14\uc774\uc788\ub294 \uc138\ub300\ub97c \ucc3e\uc73c\ub824\uba74 \uc138\ub300\ubcc4\ub85c \ub370\uc774\ud130\ub97c \uadf8\ub8f9\ud654 \ud55c \ub2e4\uc74c\n\ub300\uc0c1\uc758 \uace0\uc720 \ud55c \uac12\uc774 \ud558\ub098\ub9cc \uc788\ub294\uc9c0 \ud655\uc778\ud574\uc57c\ud55c\ub2e4.\n","15eb118f":"\uac00\uc7a5 \uac00\uce58\uac00\uc5c6\ub294 \ub098\uc774: 17 \uc138\n\uc774\ubcf4\ub2e4 \ub098\uc774\uac00 \ub9ce\uc740 \uc0ac\ub78c\uc740 \uc544\ub9c8\ub3c4 \ud559\uad50\uc5d0 \uc788\uc9c0 \uc54a\ub2e4\uace0 \uac00\uc815 \ud560 \uc218 \ub3c4 \uc788\ub2e4.\n\n\uc774 \ubcc0\uc218\ub294 7\uacfc 19 \uc0ac\uc774\uc758 \uac1c\uc778\uc5d0 \ub300\ud574\uc11c\ub9cc \uc815\uc758\n\uc774 \ubc94\uc704\ubcf4\ub2e4 \uc80a\uac70\ub098 \ub354 \uc624\ub798\ub41c \uc0ac\ub78c\uc740 \uc544\ub9c8\ub3c4 \uba87 \ub144 \ub4a4 \ud559\uad50\uc5d0 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uadf8 \uac12\uc740 0\uc73c\ub85c \uc124\uc815\ud574\uc57c\ud568.\n\uc774 \ubcc0\uc218\ub294 \uac1c\uc778\uc774 19 \uc138 \uc774\uc0c1\uc774\uace0 \uacb0\uce21\uac12\uc774 \uc788\uac70\ub098 7\ubcf4\ub2e4 \uc791\uace0 \uacb0\uce21\uac12\uc774\uc788\ub294 \uacbd\uc6b0 0\uc73c\ub85c \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub2e4\ub978 \uc0ac\ub78c\uc5d0\uac8c\ub294 \uac12\uc744 \ub300\uce58\ud558\uace0 \ubd80\uc6b8 \ud50c\ub798\uadf8\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.","cd54342d":"*\ub6f0\uc5b4\ub118\uae30*\n\nModel Selection","507688ff":"V2a1 : \uc6d4 \uc784\ub300\ub8cc \uc9c0\ubd88\n\ub2e4\uc74c\uc73c\ub85c \ub204\ub77d \ub41c \uc5f4\uc740 \uc6d4 \uc784\ub300\ub8cc \uc9c0\ubd88\uc744 \ub098\ud0c0\ub0b4\ub294 v2a1\n\n\uc774 \ubc14\ucc28\ud2b8\ub294 \uc6d4 \uc784\ub300\ub8cc \uc9c0\ubd88\uc5d0 \ub300\ud574 \uc8fc\ud0dd\uc758 \uc18c\uc720\uad8c \uc0c1\ud0dc\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n\n\n\n\uc8fc\ud0dd \uc18c\uc720 \ubcc0\uc218\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\ntipovivi1, = 1 \uc18c\uc720 \ubc0f \uc644\uc804 \uc9c0\ubd88 \uc8fc\ud0dd\ntipovivi2, \"= 1 \uc18c\uc720, \ud560\ubd80 \uc9c0\ubd88\"\ntipovivi3, = 1 \uc784\ub300\ntipovivi4, = 1 \ubd88\uc548\uc815\ud55c \uc0c1\ud0dc\ntipovivi5, \"= 1 \uae30\ud0c0 (\uc9c0\uc815, \ucc28\uc6a9)\"\n\n\uc8fc\ub85c : \uc6d4\uc138\ub97c \uc9c0\ubd88\ud558\uc9c0 \uc54a\ub294 \uac00\uad6c\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc790\uc2e0\uc758 \uc9d1\uc744 \uc18c\uc720\ud55c\ub2e4. \n\n\uc18c\uc720\ud558\uace0 \uc6d4 \uc784\ub300\ub8cc\uac00 \ub204\ub77d \ub41c \uc8fc\ud0dd\uc758 \uacbd\uc6b0 \uc784\ub300\ub8cc \uc9c0\ubd88\uc561\uc744 0\uc73c\ub85c \uc124\uc815\ud560 \uc218 \uc788\ub2e4.\n\ub2e4\ub978 \uc8fc\ud0dd\uc758 \uacbd\uc6b0 \uacb0\uce21\uac12\uc744 \ub300\uce58 \ud560 \uc218 \uc788\uc9c0\ub9cc \ud574\ub2f9 \uac00\uc815\uc5d0 \uacb0\uce21\uac12\uc774 \uc788\uc74c\uc744 \ub098\ud0c0\ub0b4\ub294 \ud50c\ub798\uadf8(\ubd80\uc6b8)\uc5f4\uc744 \ucd94\uac00\ud55c\ub2e4.","6190835f":"The organizers\ub294 \uc62c\ubc14\ub978 \ub808\uc774\ube14\uc774 parentesco1 == 1 \uc778 \uc138\ub300\uc8fc\ub77c\uace0 \ud55c\ub2e4.\n\n\uc774 \uc138\ub300\uc758 \ubaa8\ub4e0 \uad6c\uc131\uc6d0\uc5d0 \ub300\ud574 \uc62c\ubc14\ub978 \ub808\uc774\ube14\uc740 3\uc785\ub2c8\ub2e4.\n\uc6b0\ub9ac\ub294 \uc774 \uac00\uad6c\uc758 \ubaa8\ub4e0 \uac1c\uc778\uc744 \uc62c\ubc14\ub978 \ube48\uace4 \uc218\uc900\uc73c\ub85c \uc7ac \ud560\ub2f9\ud568\uc73c\ub85c\uc368\n(\ub098\uc911\uc5d0 \ubcf4\uc5ec\uc9c0\ub294 \ubc14\uc640 \uac19\uc774)\uc774\ub97c \uc218\uc815\ud55c\ub2e4.\n\n\ub610\ud55c \uc138\ub300\uc8fc\uac00\uc5c6\ub294 \uac00\uc815\uc740 \ub3d9\uc77c\ud55c \uc138\ub300\uc758 \uac1c\uc778\uc5d0\uac8c\n\uc138\ub300\uc8fc \ub808\uc774\ube14\uc744 \ud560\ub2f9\ud558\uc5ec \ubaa8\ub4e0 \uc0c1\ud45c \ubd88\uc77c\uce58\ub97c \uc218\uc815\ud560 \uacc4\ud68d ","eab3506f":"rez_esc \uc5f4\uc5d0\ub294 \uc774\uc0c1\uce58\uac00 \ud558\ub098\uc788\ub2e4.\n\ubcc0\uc218\uc758 \ucd5c\ub300 \uac12\uc774 5\uc784. \ub530\ub77c\uc11c 5\ubcf4\ub2e4 \ud070 \uac12\uc740 5\ub85c \uc124\uc815\ud574\uc57c\ud55c\ub2e4.","919c13bd":"\uacb0\uce21\uac12\uc774 \ub192\uc740 \ub2e4\ub978 3 \uac1c\uc758 \uc5f4\uc744 \ucc98\ub9ac\ud574\uc57c\ud568\n\nv18q1 : \uc815\uc81c \uc218\n\n<\ubc11\uc5d0\ub294 \ubb54\ub9d0\uc778\uc9c0 \ubaa8\ub984\uc6a9>\n\uac00\uc871\uc774 \uc18c\uc720 \ud55c \ud0dc\ube14\ub9bf \uc218\ub97c \ub098\ud0c0\ub0b4\ub294 v18q1\ubd80\ud130 \uc2dc\uc791\ud574\ubcf4\uba74.\uc774 \ubcc0\uc218\uc758 \uac12 \uce74\uc6b4\ud2b8\ub97c \ubcfc \uc218 \uc788\ub2e4.\n\uc774\uac83\uc740 \uac00\uacc4 \ubcc0\uc218\uc774\uae30 \ub54c\ubb38\uc5d0 \uac00\uacc4 \uc218\uc900\uc5d0\uc11c\ub9cc \uc0b4\ud3b4 \ubcf4\ub294 \uac83\uc774 \ud569\ub9ac\uc801\uc774\ubbc0\ub85c \uc138\ub300\uc8fc\ub97c\uc704\ud55c \ud589\ub9cc \uc120\ud0dd\ud569\ub2c8\ub2e4.\n\n\uac12 \uce74\uc6b4\ud2b8\ub97c \ud50c\ub86f\ud558\ub294 \uae30\ub2a5\n\ub2e4\ub978 \uc5f4\uc5d0 \ub300\ud55c \uac12 \uc218\ub97c \ud50c\ub85c\ud305\ud558\uace0 \uc2f6\uc744 \uc218\ub3c4 \uc788\uc73c\ubbc0\ub85c \uac04\ub2e8\ud55c \ud568\uc218\ub97c \uc791\uc131\ud558\uba74\ub429\ub2c8\ub2e4.","7fc8954f":"\n> \ub77c\ubca8 \ubc30\ud3ec \ud0d0\uc0c9\n\n\ub77c\ubca8\uc758 \ubd84\ud3ec\ub97c \ubcf4\uba74 \ubb38\uc81c\uac00 \uc5bc\ub9c8\ub098 \ubd88\uade0\ud615\ud55c\uc9c0 \uc54c \uc218 \uc788\uc74c\n4 \uac00\uc9c0 \uac00\ub2a5\ud55c \uc815\uc218 \uc218\uc900\uc774 \uc788\ub294\ub370, \uc774\ub294 4 \uac00\uc9c0 \ube48\uace4 \uc218\uc900\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n(extreme, moderate vulnerable non vulnerable)\n\n\uc62c\ubc14\ub978 \ub808\uc774\ube14\uc744 \ud655\uc778\ud558\uae30 \uc704\ud574 parentesco1 == 1 \uc778 \uc5f4\ub9cc \ud558\uc704 \uc138\ud2b8\ud569\ub2c8\ub2e4.\n\uac01 \uc138\ub300\uc758 \uc62c\ubc14\ub978 \ub77c\ubca8 \uc778 \uc138\ub300\uc8fc\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. parentesco1, = 1 if \uc138\ub300\uc8fc\n\n\uc544\ub798 \ub9c9\ub300 \uadf8\ub9bc\uc740  test \ub808\uc774\ube14\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uad50\uc721 \ub808\uc774\ube14\uc758 \ubd84\ud3ec\ub97c \ubcf4\uc5ec\uc900\ub2e4.","5e135a5f":"> 0 Households with no head have different labels.\n\nhead\uac00\uc5c6\uace0 \uad6c\uc131\uc6d0\uc758 \ub808\uc774\ube14 \uac12\uc774 \ub2e4\ub978 \uc138\ub300\uc8fc\uc5d0 \ub300\ud574 \uac71\uc815\ud560 \ud544\uc694\uac00 \uc5c6\uc74c\uc744 \uc758\ubbf8\ud568.\n\uc774 \ubb38\uc81c\uc5d0 \ub300\ud574 the organizers\uc5d0 \ub530\ub974\uba74 \uc138\ub300\uc5d0 head\uac00 \uc5c6\uc73c\uba74 true label\uc774 \uc5c6\ub2e4.\n\ub530\ub77c\uc11c head\uac00 \uc5c6\ub294 \uc138\ub300\uc8fc\ub294 \ud2b8\ub808\uc774\ub2dd \ud558\uc9c0 \uc54a\ub294\ub2e4.\n\nCorrect Errors\n\uc774\uc81c, head\uac00\uc788\ub294 \uac00\uad6c\uc640 \ube48\uace4\uce35\uc774 \ub2e4\ub978 \uc138\ub300\uc5d0 \ub300\ud55c \ub808\uc774\ube14\uc744 \uc218\uc815\ud55c\ub2e4.\n","810d55ad":"<\ubb54\ub9d0\uc778\uc9c0 \uc774\ud574\ud558\uc9c0 \ubabb\ud568>\n\uc774\uac83\uc740 \ube48\uace4\uc728\uc774 \ubcf4\ud1b5 \uc778 \ube48\uace4\uc728\uc774 \ub192\uc744\uc218\ub85d \ube48\uace4\uc758 \uc9c0\ud45c\uac00 \ub420 \uc218\uc788\ub294 \uac83\ucc98\ub7fc \ubcf4\uc778\ub2e4.\n\n\uc774\uac83\uc740 \uc911\uc694\ud55c \uc694\uc810\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ub54c\ub85c\ub294 \ub204\ub77d \ub41c \uc815\ubcf4\uac00 \uadc0\ud558\uac00 \uc81c\uacf5 \ud55c \uc815\ubcf4\ub9cc\ud07c \uc911\uc694\ud569\ub2c8\ub2e4.","63d1e928":"v18q1\uc5d0 \ub300\ud574 nan\uc774\uc788\ub294 \ubaa8\ub4e0 \uac00\uc871\uc740 \ud0dc\ube14\ub9bf\uc744 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \ud655\uc778\ub428\n\ub530\ub77c\uc11c \uc774 \uacb0 \uce21\uac12\uc744 0\uc73c\ub85c \ucc44\uc6b8 \uc218 \uc788\ub2e4.","5d5cde11":"\uc9c0\uae08 \uc6b0\ub9ac\ub294 \ubd88\uade0\ud615 class\ubb38\uc81c\ub97c \ub2e4\ub8e8\uace0 \uc815\ub9ac\ud558\ub294 \uc911\uc784\n\n\uc774\ub54c\uae4c\uc9c0 \uc815\ub9ac\ud558\uc5ec \ubc14\ucc28\ud2b8\ub85c \ud655\uc778\ud574\ubcf8 \uacb0\uacfc\nnon vulnerable\uc774 \uac00\uc7a5 \ub9ce\uace0 extreme\uc774 \uac00\uc7a5 \ub0ae\uc740 \uac83\uc73c\ub85c \ub098\uc628\ub2e4.\n\n\uc6b0\ub9ac\uac00 \uad00\uc2ec\uc788\ub294\uac83\uc740 \ube48\uace4\uce35!\n\n\n\ubd88\uade0\ud615 \ubd84\ub958 \ubb38\uc81c\uc758 \ud55c \uac00\uc9c0 \ubb38\uc81c\uc810\uc740 \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\uc774 \uc18c\uc218 \ud074\ub798\uc2a4 \uc608\uce21\ub3c4\uac00 \ub0ae\ub2e4.\n\uc6b0\ub9ac\uac00 \ube48\uace4\uc744 \ubd84\ub958\ud558\uc600\ub294\ub370 extreme\ubcf4\ub2e4 non vulnerable\ud55c \uacbd\uc6b0\ub97c \ub354 \ub9ce\uc774 \ubcf8\ub2e4\uba74,\n\ub178\ucd9c\uc774 \uc801\uae30 \ub54c\ubb38\uc5d0 \ube48\uace4 \uac00\uc815\uc744 \ud30c\uc545\ud558\uae30\uac00 \ub354 \uc5b4\ub824\uc6cc\uc9c4\ub2e4.\n\n\ud074\ub798\uc2a4 \ubd88\uade0\ud615\uc744 \ud574\uacb0\ud558\ub294 \ud55c \uac00\uc9c0 \uac00\ub2a5\ud55c \ubc29\ubc95\uc740 \uc624\ubc84 \uc0d8\ud50c\ub9c1\uc744 \uc774\uc6a9\ud558\ub294 \uac83.","feafab74":"3. \uc54c\uace0\ub9ac\uc998\n\ub2e4\uc74c \uac12\uc744 \uc120\ud0dd\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc740 \ubaa9\uc801 \ud568\uc218\uc758 \ub300\ub9ac \ubaa8\ub378\uc744 \uad6c\uc131\ud558\uae30 \uc704\ud574 \ubca0\uc774\uc988 \uaddc\uce59\uc744 \uc0ac\uc6a9\ud558\ub294 Tree Parzen Estimator\uc774\ub2e4.\n\uc54c\uace0\ub9ac\uc998\uc740 \ubaa9\uc801 \ud568\uc218\ub97c \ucd5c\ub300\ud654\ud558\ub294 \ub300\uc2e0 \ub300\ub9ac \ubaa8\ub378\uc758 EI (Expected Improvement)\ub97c \ucd5c\ub300\ud654\uc774\ub2e4.","0db203b9":"\ub204\ub77d \ub41c \ubcc0\uc218\n\ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d\uc758 \uac00\uc7a5 \uc911\uc694\ud55c \ub2e8\uacc4 \uc911 \ud558\ub098\ub294 \ub370\uc774\ud130\uc5d0\uc11c \ub204\ub77d \ub41c \uac12\uc744 \ucc3e\uc544\uc11c \ucc98\ub9ac \ubc29\ubc95\uc744 \uacb0\uc815\ud558\ub294 \uac83.\n\uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \ub204\ub77d \ub41c \uac12\uc744 \ucc44\uc6cc\uc57c\ud558\uba70,\n\uae30\ub2a5\uc744 \uae30\ubc18\uc73c\ub85c \uac12\uc744 \ucc44\uc6b0\ub294 \uac00\uc7a5 \uc88b\uc740 \uc804\ub7b5\uc744 \uace0\ub824\ud574\uc57c\ud55c\ub2e4.\n\n\uba3c\uc800 \uac01 \uc5f4\uc5d0\uc11c \uacb0 \uce21\uac12\uc758 \ubc31\ubd84\uc728\uc744 \ud655\uc778\ud55c\ub2e4.","900f54ce":"\uc704\uc758 \ub3c4\ud45c\ub97c \ud1b5\ud574 \ubaa8\ub378\uacfc \uac00\uc7a5 \uad00\ub828\uc774\uc788\ub294 \ubcc0\uc218\ub97c \ud30c\uc545 \ud560 \uc218 \uc788\ub2e4.\n\uadf8\ub798\ud504 \uc911 \ud558\ub098\ub97c \uc124\uba85\ud558\uc790\uba74, \n\uc131\uc778\ud3c9\uade0 \uad50\uc721\uc218\uc900\uc774 \ub192\uc744 \uc218\ub85d \ube48\uace4\uc774 \ub35c\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4\n\n\ub610\ud55c \ud53c\ucc98 \uac04\uc758 \uad00\uacc4\ub97c \uce21\uc815\ud558\uae30 \uc704\ud574 \ubcc0\uc218\uc640 \ub300\uc0c1 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \uacc4\uc0b0\ud560 \uac83 \uc774\ub2e4.","2c850a69":"2. \uac80\uc0c9 \uacf5\uac04\n\ub3c4\uba54\uc778\uc740 \uac80\uc0c9\ud558\ub824\ub294 \uc804\uccb4 \uac12 \ubc94\uc704\uc774\ub2e4.\n\uc720\uc77c\ud558\uac8c \uc5b4\ub824\uc6b4 \ubd80\ubd84\uc740 boosting_type = \"goss\"\uc778 \uacbd\uc6b0 1.0\uc73c\ub85c \uc124\uc815\ud574\uc57c\ud558\ub294 \uc11c\ube0c \uc0d8\ud50c \ube44\uc728\uc774\ub2e4.","2f67dde9":"\uac00\uc871\uad6c\uc131\uc6d0\uc911 \uac19\uc9c0\uc54a\uc740 \ud0c0\uac9f\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uc138\ub300\uc8fc\uac00 85\uac1c \uc788\ub2e4.\n\n\uc608\uc2dc.\n\nidhogar = \uc138\ub300 \uc218\uc900 \uc2dd\ubcc4\uc790\nparentesco1, = 1 if \uc138\ub300\uc8fc","1b42d7e9":"\n\uc5ec\uae30\uc11c \ubd84\ud3ec\ub294 \ubaa8\ub4e0 \ub370\uc774\ud130\uc758 \ubd84\ud3ec\uc640 \uc77c\uce58\ud558\ub294 \uac83\uc73c\ub85c \ubcf4\uc778\ub2e4.\n\n(poverty level breakdown \uadf8\ub798\ud504 (\ube68\ub178\ud30c\ucd08))","399ec7bc":"o \ud6c8\ub828\uc744 \ub2e4\uc2dc \uc2dc\uc791\ud558\uba74 \ub3d9\uc77c\ud55c \ud3c9\uac00\ud310 \uac1c\uccb4\ub97c \uc804\ub2ec\ud558\uace0 \ucd5c\ub300 \ubc18\ubcf5 \ud69f\uc218\ub97c \ub298\ub9b4 \uc218 \uc788\ub2e4.\n\ub098\uc911\uc5d0 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud3c9\uac00\ud310\uc744 json\uc73c\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4."}}