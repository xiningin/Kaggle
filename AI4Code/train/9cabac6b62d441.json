{"cell_type":{"ba879b90":"code","f7e0d851":"code","e01fc090":"code","d65bbd27":"code","dd1bc203":"code","0659b8e1":"code","a67e13f0":"code","b7c5f4b4":"code","b32dd757":"code","7dee55d2":"code","d74f5620":"code","e0139f73":"code","88707c16":"code","7bece261":"code","97391ded":"code","ffc197a4":"code","6050ac28":"code","b7a80df5":"code","c1e65d4a":"code","75774f23":"code","e0122d6b":"code","1d3c37d7":"code","d13c61f0":"code","bd1dcf48":"code","b8361609":"code","fd73f4e2":"code","a6d1ab9b":"code","18c349e6":"code","3ba2b604":"code","466441db":"code","ab238d4c":"code","dd5d2ce1":"code","d4973995":"code","4b1a4f31":"code","6c8c3a8e":"code","dcc7d370":"code","4682bb6d":"code","77d2473e":"code","530e9698":"code","267c057e":"code","7847e01d":"code","469b958a":"code","1f3722ee":"code","b4bf144f":"code","1ec80a26":"code","a0250747":"code","5f857671":"code","ed9b2e7c":"code","42f845cf":"code","98df8252":"code","713eabe4":"code","da5bc1ac":"code","2e9fdb11":"code","a59fd97f":"code","c21503d4":"markdown","6e0a3f18":"markdown","d19a90ac":"markdown","e93e1480":"markdown","7e5f7200":"markdown","ed03d1f1":"markdown","37c07e7b":"markdown","a64d4a84":"markdown","11a6dc73":"markdown","559bdd2c":"markdown","ae36c567":"markdown","ad149b55":"markdown","9d23ae56":"markdown","122a8748":"markdown","1500fb69":"markdown","bf6439dc":"markdown"},"source":{"ba879b90":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nprint('Priyatama is ready!')","f7e0d851":"data = pd.read_csv('..\/input\/playstore-analysis\/googleplaystore.csv')\ndata.head()","e01fc090":"data.rename(columns={'Last Updated':'Last_Updated', 'Content Rating':'Content_Rating', 'Current Ver':'Current_Version', 'Android Ver':'Android_Version'}, inplace = True)\ndata.shape","d65bbd27":"data.describe()","dd1bc203":"data.dtypes","0659b8e1":"sns.heatmap(data.isnull())","a67e13f0":"data['Rating']=data['Rating'].fillna(0)","b7c5f4b4":"def strip_installs(data):\n  return data.split('+')[0]\n  \ndata['Installs'] = data['Installs'].apply(lambda x: f\"{strip_installs(x)}\")\ndata.head(3)","b32dd757":"data['Installs'] = data['Installs'].replace({',': ''}, regex=True)","7dee55d2":"data['Last_Updated'] = pd.to_datetime(data['Last_Updated'])","d74f5620":"data['Installs']= pd.to_numeric(data['Installs'])","e0139f73":"data.Price.value_counts()","88707c16":"data['Price']=data['Price'].str.strip()","7bece261":"data['Price'] = data['Price'].str.replace('$', '')\ndata.Price.value_counts()","97391ded":"data['Price']=pd.to_numeric(data['Price'])","ffc197a4":"data['Android_Version'] = data['Android_Version'].replace({' and up':''}, regex=True)\ndata.Android_Version.nunique()","6050ac28":"data.dtypes","b7a80df5":"duplicate =data.groupby(['App']).agg({'Category': 'count'}).reset_index()\nduplicate = duplicate.sort_values(by=['Category'], ascending=False)\nduplicate.head(5)","c1e65d4a":"roblox = data[data['App'].isin(['ROBLOX'])].sort_values(by=['Current_Version'], ascending=True)\nroblox","75774f23":"CBS = data[data['App'].isin(['CBS Sports App - Scores, News, Stats & Watch Live'])].sort_values(by=['Current_Version'], ascending=True)\nCBS","e0122d6b":"instagram = data[data['App'].isin(['Instagram'])].sort_values(by=['Current_Version'], ascending=True)\ninstagram","1d3c37d7":"before = len(data.index)\nprint('Total entries with duplicates were '+ (str(before)))\ndata.drop_duplicates(subset =\"App\",keep = 'first', inplace = True) #Drop duplicates with a value in a specific column.\nafter = len(data.index)\nprint('Total entries after duplicates were dropped are '+ (str(after)))\nprint('Total '+ (str(before-after))+' entries were dropped.')","d13c61f0":"data.shape","bd1dcf48":"data.Size.nunique()","b8361609":"data['Size'].replace(to_replace=\"Varies with device\", value= '1M', inplace = True)","fd73f4e2":"data['S'] = data['Size'].str[-1:]\ndata.S.unique()","a6d1ab9b":"data['Size'] = data['Size'].str[:-1]","18c349e6":"data['Size'] = data['Size'].astype(float)","3ba2b604":"data.assign(Final_Size=data.Size.multiply(0.001).where(data.S.eq('k')))\ndata.drop([ 'S',], axis =1, inplace = True)\ndata.dtypes","466441db":"print('The dataset contains total of '+(str(len(data.Genres.unique())))+' Genres.')","ab238d4c":"print ('In total there are '+(str(len(data.App.unique())))+ ' apps in '+ (str(len(data.Category.unique())))+ ' different categories')","dd5d2ce1":"Category = data.groupby(['Category'])['App'].count().reset_index().rename(columns={'App':'Count of Apps'})\nCategory = Category.sort_values(by=['Count of Apps'], ascending=False)\nCategory.set_index('Category', inplace= True)\nCategory.head()","d4973995":"cat_head= Category.head(10)\ntop_10_cat = data[data['Category'].isin(cat_head.index)]","4b1a4f31":"fig2, ax = plt.subplots(figsize=(22,5))\nsns.stripplot(x='Category', y='Rating', data=top_10_cat, palette='rocket', order= top_10_cat['Category'].value_counts().index)\nplt.xlabel('\\n Top 10 Categories', fontsize= 10, fontweight = 'bold')\nplt.ylabel('Rating', fontsize= 10, fontweight = 'bold')\nplt.title('Rating of Top 10 Categories', fontsize = 15, fontweight = 'bold')\nplt.savefig('Rating of Top 10 Categories.png')\nplt.show()","6c8c3a8e":"data.columns","dcc7d370":"paid_apps = data[(data.Type!='Free')]","4682bb6d":"paid_apps.Content_Rating.nunique()","77d2473e":"fig3, ax = plt.subplots(figsize = (6,4))\nax.set(facecolor='grey')\nsns.countplot(x=paid_apps['Content_Rating'], palette = 'rocket',order = paid_apps['Content_Rating'].value_counts().index) \nplt.xlabel('Content Rating', fontsize = 10, fontweight = 'bold')\nplt.ylabel('Paid Apps', fontsize = 10, fontweight = 'bold')\nplt.title('Paid Apps across different Content Ratings', fontsize = 15, fontweight = 'bold')\nplt.savefig('Paid Apps across different Content Ratings.png')\nplt.show()","530e9698":"Installs_Cat = data.groupby(['Category'])['Installs'].sum().sort_values(ascending=False).reset_index()\nInstalls_Cat.head()","267c057e":"fig4, ax = plt.subplots(figsize =(20,3))\nsns.barplot(x=Installs_Cat['Category'], y=Installs_Cat['Installs'])\nplt.xlabel('\\n Categories', fontsize = 10, fontweight = 'bold')\nplt.ylabel('Installs in Trilions', fontsize = 10, fontweight = 'bold')\nplt.xticks(rotation = 90)\nplt.title('Total Installs per Category', fontsize = 15, fontweight = 'bold')\nplt.savefig('Total Installs per Category.png')\nplt.show()","7847e01d":"Reviews_Cat = data.groupby(['Category'])['Reviews'].sum().sort_values(ascending=False).reset_index().head(10)\nReviews_Cat","469b958a":"Reviews_Cat2 = data[data['Category'].isin(Reviews_Cat.Category)]\nReviews_Cat2.head(3)","1f3722ee":"fig5, ax = plt.subplots(figsize=(20,3))\nsns.countplot(x=Reviews_Cat2['Category'],order=Reviews_Cat2['Category'].value_counts().index,hue = Reviews_Cat2['Type'], saturation=1,edgecolor=(0,0,0),linewidth=2)\nplt.xlabel('\\n Categories', fontsize = 10, fontweight = 'bold')\nplt.ylabel('Count of Apps', fontsize = 10, fontweight = 'bold')\nplt.title('Apps per Category for Highest Review Categories', fontsize = 15, fontweight = 'bold')\nplt.savefig('Apps per Category for Highest Review Categories.png')\nplt.show()","b4bf144f":"#Make a dataframe of multiple column Groupby single column. \nTop_Installs = data.groupby(['Category']).agg({'App': 'count', 'Installs':'sum','Reviews': 'sum'}).reset_index() #reset_index to convert pivot table into a df. \nTop_Installs = Top_Installs.sort_values(by=['Installs'],ascending=False).head(10)\nTop_Installs['Reviews_per_Install'] = Top_Installs['Reviews']\/Top_Installs['Installs']\nTop_Installs['Install_Per_App'] = Top_Installs['Installs']\/Top_Installs['App']\nTop_Installs['Install_Per_App']=Top_Installs['Install_Per_App'].astype(np.int64)\nTop_Installs['Reviews_per_App'] = Top_Installs['Reviews']\/Top_Installs['App']\nTop_Installs['Reviews_per_App']=Top_Installs['Reviews_per_App'].astype(np.int64)\nTop_Installs = Top_Installs.sort_values(by=['Installs'],ascending=False)\nTop_Installs","1ec80a26":"photography = data[data['Category']==('PHOTOGRAPHY')]\nprint('The dataset contains '+ (str((photography.App.nunique())))+ ' photography apps.')","a0250747":"top_install_photo=photography.groupby(\"App\")[\"Installs\"].sum().nlargest(5).index.tolist()\ntop_install_photo","5f857671":"def fuc(row):\n    if row[\"App\"] not in top_install_photo:\n        return(\"Others\")\n    else:\n        return row['App']\nphotography['Top_Installed_Photography']=photography.apply(fuc,axis=1)\nphotography.head(2)","ed9b2e7c":"top_install_photo=photography.groupby(\"Top_Installed_Photography\")[\"Installs\"].sum()\nfig7, ax = plt.subplots(figsize = (8,6))\nexplode = (0.1,0.1,0.1,0,0.1,0)\ntop_install_photo_index=top_install_photo.index\nlabels=top_install_photo.index\nax.set(facecolor = 'grey')\npie = plt.pie(top_install_photo, explode= explode,startangle=0,autopct='%1.1f%%')\nhandles = [] #This hides lables in Pie Chart.\nplt.legend(pie[0],labels, bbox_to_anchor=(0,0.5), loc=\"center right\", fontsize=10, \n           bbox_transform=plt.gcf().transFigure)\nplt.title('Top 5 Installed Photography Apps', fontsize = 15, fontweight='bold')\nplt.savefig('Top 5 Installed Photography Apps.png')\nplt.show()","42f845cf":"photography.head(2)","98df8252":"photography = photography.sort_values(by=['Reviews'], ascending=False)\nphotography.head(3)","713eabe4":"top_rev_photo=photography.groupby(\"App\")[\"Reviews\"].sum().nlargest(5).index.tolist()\ntop_rev_photo","da5bc1ac":"def top_rev(row):\n    if row[\"App\"] not in top_rev_photo:\n        return(\"Others\")\n    else:\n        return row['App']\nphotography['Top_Rev_Photography']=photography.apply(top_rev,axis=1)\nphotography.head(2)","2e9fdb11":"Top_Review_Photo = photography.groupby(['Top_Rev_Photography']).agg({'App': 'count', 'Reviews':'sum'}).reset_index() #reset_index to convert pivot table into a df. \nTop_Review_Photo","a59fd97f":"fig8, ax = plt.subplots(figsize=(4,4))\nax.set(facecolor = 'grey')\nsns.barplot(y=Top_Review_Photo['Top_Rev_Photography'], x=Top_Review_Photo['Reviews'], palette='rocket')\nplt.ylabel('Photography Apps', fontsize =10, fontweight ='bold')\nplt.xlabel('Reviews', fontsize =10, fontweight ='bold')\nplt.title('Top Review Photography Apps', fontsize =15, fontweight ='bold')\nplt.savefig('Top Review Photography Apps.png')\nplt.show()","c21503d4":"##B4)  Which category has had the most installs?","6e0a3f18":"##A2) Fillna with 0.","d19a90ac":"## B) Insights to fetch from the dataset.\n1.  How many different genres are there?\n2.  How many different apps are there across categories?\n3.  How many different paid apps are there per content rating?\n4.  Which category has had the most installs?\n5.  Which category has had most reviews and how many of them were free and paid?\n6.  For top 10 intalled category, what are following values?\n  1.  Reviews Per Install\n  2.  Install Per App\n  3.  Reviews Per App","e93e1480":"## A) Data Cleaning Tasks to be carried out as follows.\n1.   Rename Columns to one word.\n2.   Fillna with 0.\n3.   Remove suffixes like '+' in Installs and 'and up' in Android Ver.\n4.   Change format of columns such as Last Updated, Installs, Price, Rating.\n5.   Remove if any duplicates, keep the latest updated entry.\n6.   Make a column with a single unit of size in column size.\n\n\n\n","7e5f7200":"## B3)  How many different paid apps are there per content rating?","ed03d1f1":"## B1)  How many different genres are there?","37c07e7b":"## A5)  Remove if any duplicates, keep the latest updated entry.","a64d4a84":"## A4) Change format of columns such as Last Updated, Installs, Price, Rating.","11a6dc73":"## B5)  Of the top 10 categories with most reviews how many apps were free and paid?","559bdd2c":"## A1) Rename Columns to one word.","ae36c567":"## A6) Make a column with a single unit of size in column size.","ad149b55":"## A3) Remove suffixes like '+' in Installs and 'and up' in Android Ver.","9d23ae56":"## B7)  What insights can be found about apps in Photography category?","122a8748":"## B6)  For top 10 intalled category, what are following values?\n1.  Reviews Per Install\n2.  Install Per App\n3.  Reviews Per App","1500fb69":"# B3) How are the different apps of top 10 categories rated?","bf6439dc":"# B2) How many different apps are there across categories?"}}