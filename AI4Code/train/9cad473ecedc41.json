{"cell_type":{"68590a28":"code","b8032ecd":"code","e4089fcf":"code","5dd708ae":"code","c3c4f7ab":"code","74372691":"code","6ee4c0fe":"code","1b29509a":"code","868d3835":"code","c54d5fc3":"code","7b65a691":"code","fd6e9418":"code","3b185133":"code","3d07ba53":"code","507ab0b0":"markdown","3a540d8f":"markdown","3e4b3a57":"markdown","b88909df":"markdown","ec122e86":"markdown","947c1d28":"markdown","676978dc":"markdown","5c234429":"markdown","9ebb200d":"markdown","9458f89d":"markdown","abeaaaf5":"markdown","887476f8":"markdown","0c7c8ed3":"markdown","1ef2d624":"markdown","dd99e959":"markdown"},"source":{"68590a28":"import time\nimport numpy as np\nimport pandas as pd\nimport gresearch_crypto\nfrom tqdm import tqdm\n\nimport local_api as la","b8032ecd":"train_df = la.read_csv_slice('..\/input\/g-research-crypto-forecasting\/train.csv')","e4089fcf":"la.LB_WINDOW","5dd708ae":"api = la.API(train_df, use_window=la.LB_WINDOW)","c3c4f7ab":"(data_df, pred_df) = next(api)\ndata_df.head()","74372691":"# next(api)","6ee4c0fe":"api.predict(pred_df)","1b29509a":"(data_df, pred_df) = next(api)\napi.predict(pred_df)","868d3835":"api.predictions","c54d5fc3":"len(api)","7b65a691":"example_window = (la.datestring_to_timestamp(\"2020-05-01T00:00\"),\n                  la.datestring_to_timestamp(\"2020-05-14T00:00\"))\n\napi2 = la.API(train_df, use_window=example_window)","fd6e9418":"api = la.API(train_df, use_window=example_window)\n\nstart_time = time.time()\n\nfor (data_df, pred_df) in tqdm(api):\n    pred_df['Target'] = 0.\n    api.predict(pred_df)\n    \nfinish_time = time.time()\n\ntotal_time = finish_time - start_time\niter_speed = api.init_num_times\/total_time\n\nprint(f\"Iterations\/s = {round(iter_speed, 2)}.\")\ntest_iters = 60 * 24 * 100\nprint(f\"Expected number of iterations in test set is approx. {test_iters}\",\n      f\"which will take {round(test_iters \/ (iter_speed * 3600), 2)} hours\",\n      \"using this API emulator while making dummy predictions.\")","3b185133":"df, score = api.score()\nprint(f\"Your LB score is {round(score, 4)}\")","3d07ba53":"api = la.API(train_df, use_window=la.LB_WINDOW)\n\nfor (data_df, pred_df) in tqdm(api):\n    pred_df['Target'] = np.random.randn(len(pred_df), 1)\n    api.predict(pred_df)\n    \ndf, score = api.score()\n\nprint(f\"Your LB score is {round(score, 4)}\")","507ab0b0":"Get the first batch of data.","3a540d8f":"# Local API Emulator is now a module\n\nThis notebook shows you how to use the new `local_api` module. The module emulates the `gresearch_crypto` timeseries API locally. It gives you the flexibility to:\n+ feed different slices of train.csv into it\n+ create as many instances as you want within one session\n+ calculate your LB score (weighted correlation) locally.\n\nIt enforces similar constraints to the real API and produces realistic error messages. This code extends and updates a previous [notebook version](https:\/\/www.kaggle.com\/jagofc\/local-api-emulator).\n\nFor a quick introduction to importing utility scripts see [this intro video](https:\/\/www.youtube.com\/watch?v=C4h88PfN5jA&ab_channel=Kaggle).\n","3e4b3a57":"The (approx.) public LB timestamp window is available as a constant:","b88909df":"Note that you don't need to to restart the notebook kernel in order to make a new emulator (or to refresh the current one), in contrast with the `gresearch_crypto` env. Here is an instance on a different date window:","ec122e86":"We'll get an error if we try to continue on to the next batch without making our predictions for the current batch. *Commented out so that the notebook doesn't Fail.*","947c1d28":"# Demo\n\nTo use this in your notebook you need to:\n1. In the notebook menu select File > Add Utility Script\n2. Search for \"local_api\" and click Add.\n3. Import `local_api` as you would any module.","676978dc":"## Example main loop\n\nAn example loop on `example_window` (making dummy predictions of Target=0) with a timing estimate for 100 days worth of data.","5c234429":"Now you can continue to iterate. Lets get another slice of data and make another dummy prediction:","9ebb200d":"## TL;DR example loop with random predictions","9458f89d":"`local_api` has some utility functions, constants and the main `API` class. Check out its contents using tab completion. Here we use the utility function `read_csv_slice`.","abeaaaf5":"The API has a `score` method. This returns:\n+ a dataframe containing your predictions, the targets, and weights,\n+ the LB score: weighted correlation between predictions and targets.","887476f8":"Your predictions are stored by the API. Let's just look at the first two prediction batches we made:","0c7c8ed3":"Let's make a dummy prediction using `pred_df`.","1ef2d624":"The API also has a length method, which tracks the number of timestamps still to be served:","dd99e959":"Create an example API instance using the public LB window:"}}