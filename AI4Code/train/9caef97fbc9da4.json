{"cell_type":{"9d2f2ae7":"code","98c0a046":"code","a7e2f7db":"code","f64834a7":"code","a7403b09":"code","1b76d0d7":"code","a3884f07":"code","f524b833":"code","17c1172b":"code","cddda28c":"code","cafce740":"code","7bd02e51":"code","6913ff38":"code","18d37837":"code","5c438686":"code","cd4c4de8":"code","795ece78":"code","a622427a":"code","f3168bca":"code","f8430008":"code","c34c7f40":"code","86b79a08":"markdown","78636061":"markdown","4d1dd187":"markdown","9d6771dd":"markdown","4a4d4efa":"markdown","2a66ecd6":"markdown","1721ef17":"markdown"},"source":{"9d2f2ae7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","98c0a046":"credits = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\ncredits.shape","a7e2f7db":"movies = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\nmovies.shape","f64834a7":"credits.columns = ['id','movie','cast','crew']","a7403b09":"df = movies.merge(credits, on='id')\ndf.shape","1b76d0d7":"df.head(3)","a3884f07":"# Parse the stringified features into their corresponding python objects\nfrom ast import literal_eval\n\nfeatures = ['cast', 'crew', 'keywords', 'genres']\nfor feature in features:\n    df[feature] = df[feature].apply(literal_eval)","f524b833":"# Get the director's name from the crew feature. If director is not listed, return NaN\ndef get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan","17c1172b":"# Returns the list top 3 elements or entire list; whichever is more.\ndef get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        #Check if more than 3 elements exist. If yes, return only first three. If no, return entire list.\n        if len(names) > 5:\n            names = names[:5]\n        return names\n\n    #Return empty list in case of missing\/malformed data\n    return []","cddda28c":"# Define new director, cast, genres and keywords features that are in a suitable form.\ndf['director'] = df['crew'].apply(get_director)\n\nfeatures = ['cast', 'keywords', 'genres']\nfor feature in features:\n    df[feature] = df[feature].apply(get_list)","cafce740":"# Print the new features of the first 3 films\ndf[['title', 'cast', 'director', 'keywords', 'genres']].head(3)","7bd02e51":"# Function to convert all strings to lower case and strip names of spaces\ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''","6913ff38":"# Apply clean_data function to your features.\nfeatures = ['cast', 'keywords', 'director', 'genres']\n\nfor feature in features:\n    df[feature] = df[feature].apply(clean_data)","18d37837":"def create_soup(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])\ndf['soup'] = df.apply(create_soup, axis=1)","5c438686":"# Import CountVectorizer and create the count matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(df['soup'])","cd4c4de8":"# Compute the Cosine Similarity matrix based on the count_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim = cosine_similarity(count_matrix, count_matrix)","795ece78":"# Reset index of our main DataFrame and construct reverse mapping as before\ndf = df.reset_index()\nindices = pd.Series(df.index, index=df['title'])","a622427a":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]","f3168bca":"get_recommendations(\"The Lord of the Rings: The Return of the King\", cosine_sim)","f8430008":"get_recommendations(\"Spectre\", cosine_sim)","c34c7f40":"get_recommendations(\"A.I. Artificial Intelligence\", cosine_sim)","86b79a08":"**Please up-vote! Thanks!**","78636061":"# Introduction","4d1dd187":"# Libraries","9d6771dd":"# Recommendations","4a4d4efa":"# Engine","2a66ecd6":"This is a simple recommendation engine which calculates cosine similarity with CountVectorizer based on meta-data soup from TMDB5000 movie database.","1721ef17":"# Load data"}}