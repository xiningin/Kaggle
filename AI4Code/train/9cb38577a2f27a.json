{"cell_type":{"080106f8":"code","fd3e40d6":"code","ffb3da8b":"code","a757f564":"code","4fc7b800":"code","8058701b":"code","fabf97f1":"code","a2a9d9d1":"code","4b6401cc":"code","aa630940":"code","5f4607ec":"code","35493d9a":"code","8817fd08":"code","06a02e6b":"code","1f9b4dff":"code","a0f1babe":"code","7a329651":"code","301d390e":"code","680a6ce0":"code","5662346d":"code","de357f09":"code","386d58b9":"code","846dec31":"code","aeeffec4":"code","e227e430":"code","6c518109":"code","d2d7b8db":"code","6824f30f":"code","59a1ab8d":"code","d472bc3b":"code","16d3d4c8":"code","5090d5c3":"code","b3860681":"code","9af47883":"code","305af207":"code","570b86ef":"code","ef4857f0":"code","8daff53c":"code","bbd7f724":"code","8d1f8900":"code","dd739223":"code","9eb6ab3a":"code","4385c55e":"code","6c89d27f":"code","1e6928d1":"code","572a6eeb":"code","6305c8ef":"markdown","db462ab9":"markdown","aac936bd":"markdown","268955e4":"markdown","4fd2cdb4":"markdown","30f86fea":"markdown","8e99f5b2":"markdown","5dca5ac8":"markdown"},"source":{"080106f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd3e40d6":"train = pd.read_csv('..\/input\/ipl-2020-player-performance\/Training.csv')\nmatch2020 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\nprev_match = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\nplayers = pd.read_csv('..\/input\/ipl-2020-player-performance\/sample_submission.csv', encoding='windows=1254')","ffb3da8b":"match2020.head()","a757f564":"match2020.isnull().sum()","4fc7b800":"prev_match.isnull().sum()","8058701b":"prev_match.dropna(inplace=True)","fabf97f1":"train.head()","a2a9d9d1":"train.isnull().sum()","4b6401cc":"prev_match.head()","aa630940":"plt.figure(figsize=(12,6))\nsns.pairplot(prev_match, hue='dl_applied')","5f4607ec":"plt.figure(figsize=(12, 6))\nsns.heatmap(prev_match.corr(), annot=True, cmap='magma')","35493d9a":"season = prev_match['season'].value_counts()\nplt.figure(figsize=(12, 6))\nsns.barplot(season.index, season.values)\nplt.show()","8817fd08":"city = prev_match['city'].value_counts()\nplt.figure(figsize=(12, 6))\nsns.barplot(city.index, city.values)\nplt.show()","06a02e6b":"toss = prev_match['toss_winner'].value_counts()\nplt.figure(figsize=(12, 6))\nsns.barplot(toss.index, toss.values)\nplt.xticks(rotation=45)\nplt.show()","1f9b4dff":"winner = prev_match['winner'].value_counts()\nplt.figure(figsize=(12, 6))\nsns.barplot(winner.index, winner.values)\nplt.xticks(rotation=45)\nplt.show()","a0f1babe":"player = prev_match['player_of_match'].value_counts()\nplt.figure(figsize=(12, 6))\nsns.barplot(player.index, player.values)\nplt.xticks(rotation=90)\nplt.show()","7a329651":"wicket = prev_match.sort_values('win_by_wickets', ascending=False)\nplt.figure(figsize=(12, 6))\nsns.barplot(wicket['win_by_wickets'], wicket['umpire1'])\nplt.xticks(rotation=90)\nplt.show()","301d390e":"venue = prev_match['venue'].value_counts()\nplt.figure(figsize=(12, 6))\nsns.barplot(venue.index, venue.values)\nplt.xticks(rotation=90)\nplt.show()","680a6ce0":"prev_match[['city', 'toss_decision', 'result', 'win_by_runs']].sort_values('win_by_runs', ascending=False).style.background_gradient(cmap='Reds')","5662346d":"plt.figure(figsize=(12, 6))\nres = prev_match['result'].value_counts()\nplt.pie(list(res.values), labels=res.index, autopct='%1.1f%%', shadow=True);","de357f09":"plt.figure(figsize=(12, 6))\ntoss = prev_match['toss_decision'].value_counts()\nplt.pie(list(toss.values), labels=toss.index, autopct='%1.1f%%', shadow=True);","386d58b9":"plt.figure(figsize=(12, 6))\ntoss_winner = prev_match['toss_winner'].value_counts()\nplt.pie(list(toss_winner.values), labels=toss_winner.index, autopct='%1.1f%%', shadow=True);","846dec31":"plt.figure(figsize=(12, 6))\nwin = prev_match['winner'].value_counts()\nplt.pie(list(win.values), labels=win.index, autopct='%1.1f%%', shadow=True);","aeeffec4":"match2020.head(2)","e227e430":"match2020.groupby('city')['team1'].count().plot.bar()","6c518109":"match2020.date = pd.to_datetime(match2020.date)","d2d7b8db":"match2020['year'] = match2020['date'].dt.year","6824f30f":"display(match2020[['city','team1', 'umpire1', 'year']].groupby('team1').agg('count').sort_values('year', ascending=False).head(10).style.background_gradient(cmap='Greens'))","59a1ab8d":"train.head()","d472bc3b":"total_points = train.sort_values('Total Points', ascending=False).head(20)\nplt.figure(figsize=(12, 6))\nsns.barplot(total_points['Id'], total_points['Total Points'])\nplt.xticks(rotation=90)\nplt.show()","16d3d4c8":"runs = train.sort_values('Runs', ascending=False).head(20)\nplt.figure(figsize=(12, 6))\nsns.barplot(runs['Id'], runs['Total Points'])\nplt.xticks(rotation=90)\nplt.show()","5090d5c3":"batting_points = train.sort_values('Batting_Points', ascending=False).head(30)\nplt.figure(figsize=(12, 6))\nsns.barplot(batting_points['Id'], batting_points['Batting_Points'])\nplt.xticks(rotation=90)\nplt.show()","b3860681":"bowling_points = train.sort_values('Bowling_Points', ascending=False).head(20)\nplt.figure(figsize=(12, 6))\nsns.barplot(bowling_points['Id'], bowling_points['Bowling_Points'])\nplt.xticks(rotation=90)\nplt.show()","9af47883":"train.head()","305af207":"display(train[['Id','Boundaries', 'Wickets']].groupby('Id').agg(['min', 'max']).style.background_gradient(cmap='Blues'))","570b86ef":"display(train[['Id','Total Points', 'Wickets']].sort_values('Total Points', ascending=False).head(20).style.background_gradient(cmap='magma'))","ef4857f0":"players.head()","8daff53c":"display(players[['Id', 'Total Points']].sort_values('Total Points', ascending=False).style.background_gradient(cmap='viridis'))","bbd7f724":"train.head()","8d1f8900":"train.dtypes","dd739223":"X = train.drop(['Id', 'Total Points'], axis=1)\ny = train['Total Points']","9eb6ab3a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","4385c55e":"from sklearn.metrics import r2_score, mean_squared_error","6c89d27f":"from sklearn.tree import DecisionTreeRegressor\ndt = DecisionTreeRegressor()\ndt.fit(X_train, y_train)\ny_pred_dt = dt.predict(X_test)\nprint('R2 score:',r2_score(y_test, y_pred_dt))\nprint('Root Mean squared error:',np.sqrt(mean_squared_error(y_test, y_pred_dt)))","1e6928d1":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_pred_rf = rf.predict(X_test)\nprint('R2 score:',r2_score(y_test, y_pred_rf))\nprint('Root Mean squared error:',np.sqrt(mean_squared_error(y_test, y_pred_rf)))","572a6eeb":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\ny_pred_lr = lr.predict(X_test)\nprint('R2 score:',r2_score(y_test, y_pred_lr))\nprint('Root Mean squared error:',np.sqrt(mean_squared_error(y_test, y_pred_lr)))","6305c8ef":"# EDA","db462ab9":"Linear Regression is giving best accuracy","aac936bd":"# Linear Regression","268955e4":"# RandomForest","4fd2cdb4":"# Decision Tree","30f86fea":"Thank you.","8e99f5b2":" # Data Preprocessing","5dca5ac8":"# Reading the data"}}