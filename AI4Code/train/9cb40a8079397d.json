{"cell_type":{"3fe26abc":"code","c909a3e0":"code","7be5b370":"code","d6e9ec27":"code","9df28518":"code","e0506d39":"code","c655387c":"code","97afcd85":"code","a16d7a11":"code","d8380573":"code","9635bff3":"code","fe5d4570":"code","39ad26c3":"code","6dff4830":"code","176dfe87":"code","3176e5fd":"code","132a2fcb":"code","a77c24a6":"code","395b334e":"code","3f28d60d":"code","c0918b7b":"code","1c04c16d":"code","6c6664ac":"code","9f928c34":"code","50c0378c":"code","e4a93ac5":"code","a936aa22":"code","f74870cb":"code","44b82d4f":"code","88995bda":"code","5d9b2843":"code","be4b361a":"code","9f4f0a33":"code","29661597":"code","9950d8a8":"code","1661db55":"code","65277f07":"code","78ac27e1":"code","43284dae":"code","78051980":"code","709ae876":"code","9f832ea6":"code","a2a83620":"code","66c1eb12":"code","fc08b954":"code","3fc13d37":"code","2c46bfe9":"code","24c32833":"code","d4559f7e":"code","a3f07a8c":"code","2ef2579e":"code","d63357fb":"code","7c0b24b2":"code","72569169":"code","e84cb34c":"code","37c36bfd":"code","2b9c4b98":"code","513a583b":"code","b1a8bde8":"code","3580cadd":"code","fe23f995":"code","3c852bdc":"code","40914d03":"code","830a919b":"code","13c14d6c":"code","ce1c8277":"code","819bc791":"code","b13c794c":"markdown","70dc8730":"markdown","8add2957":"markdown","7218db44":"markdown","c11e0746":"markdown","84095293":"markdown","d50942fa":"markdown","5cbfef8c":"markdown","ad75b06d":"markdown","2f3ff87e":"markdown","963ad647":"markdown","30ce454f":"markdown","1c0e8c4d":"markdown","269efe46":"markdown","665c5f79":"markdown","48928558":"markdown","3ea87594":"markdown","b61323de":"markdown","0fde4a22":"markdown","0c943821":"markdown","a3336119":"markdown","3ad351fa":"markdown","966c28ea":"markdown","648a6cbf":"markdown","b71e4682":"markdown","cef5039e":"markdown","4abe0970":"markdown","1bdf277f":"markdown","a75a1d0b":"markdown","4ca3ef66":"markdown"},"source":{"3fe26abc":"import numpy as np \nimport pandas as pd \nimport os\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling\n%matplotlib inline\nfrom plotly import tools\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\nfrom ipywidgets import interact, interactive, interact_manual\nimport ipywidgets as widgets\nimport colorlover as cl","c909a3e0":"data = pd.read_csv(\"..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\")\ndata = data.drop(0)\ntop = 5","7be5b370":"mapping = {'Q1':'Age',\n'Q2':'sex',\n'Q3':'Country',\n'Q4':'Degree in two years',\n'Q5':'Career',\n'Q6':'Company Size',\n'Q7':'Team Size',\n'Q8':'ML Status in Company',\n'Q10':'Compensation Status',\n'Q11':'Money Spent'\n}\n\ndata = data.rename(columns= mapping)","d6e9ec27":"data.profile_report()","9df28518":"data.dtypes","e0506d39":"data.head()","c655387c":"dict_salary = dict({\"$0-999\": 500, \"1,000-1,999\": 1500, \"2,000-2,999\": 2500,\n                    \"3,000-3,999\": 3500, \"4,000-4,999\": 4500, \"5,000-7,499\": 6250,\n                    \"7,500-9,999\": 8750, \"10,000-14,999\": 12500, \"15,000-19,999\": 17500,\n                    \"20,000-24,999\": 22500, \"25,000-29,999\": 27500, \"30,000-39,999\": 35000,\n                    \"40,000-49,999\": 45000, \"50,000-59,999\": 55000, \"60,000-69,999\": 65000,\n                    \"70,000-79,999\": 75000, \"80,000-89,999\": 85000, \"90,000-99,999\": 95000,\n                    \"100,000-124,999\": 112500, \"125,000-149,999\": 137500, \"150,000-199,999\": 175000,\n                    \"200,000-249,999\": 225000, \"250,000-299,999\": 275000, \"300,000-500,000\": 400000,\n                    \"> $500,000\": 500000})\ndata[\"Compensation Status\"] = data['Compensation Status'].map(dict_salary)","97afcd85":"data[\"Compensation Status\"].fillna(0)","a16d7a11":"salary = dict({\"$0 (USD)\": 0, \"$1-$99\": 50, \"$100-$999\": 500,\n                    \"$1,000-$9,999\": 5000, \"$10,000-$99,999\": 50000, \"> $100,000 ($USD)\": 100000})\ndata[\"Money Spent\"] = data['Money Spent'].map(salary)","d8380573":"data[\"Money Spent\"].fillna(0)","9635bff3":"import cufflinks\ncufflinks.go_offline(connected=True)","fe5d4570":"data['Money Spent'].iplot(kind='hist', xTitle='Money Spent', yTitle='count', title='Money Spent Distribution')","39ad26c3":"data[['Money Spent', 'Compensation Status']].iplot(\n    kind='hist',\n    histnorm='percent',\n    barmode='overlay',\n    xTitle='Money Spent',\n    yTitle='Compensation Status',\n    title='Money Spent in 5 years to the Compensation Status')","6dff4830":"data.pivot(columns='Career', values='Compensation Status').iplot(\n        kind='box',\n        yTitle='Compensation Status',\n        title='Salary Distribution by Career')","176dfe87":"from wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n\ntext = data.Career.values\nwordcloud = WordCloud(\n    width = 500,\n    height = 250,\n    background_color = 'black',\n    stopwords = STOPWORDS).generate(str(text))\nfig = plt.figure(\n    figsize = (20, 20),\n    facecolor = 'k',\n    edgecolor = 'k')\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","3176e5fd":"male = data[data['sex']=='Male']\nfemale = data[data['sex']=='Female']\ncurrect_residency = data[\"Country\"]\nmale_count = male['Country'].value_counts()[:top].reset_index()\nfemale_count = female['Country'].value_counts()[:top].reset_index()","132a2fcb":"men = go.Pie(labels=male_count['index'],values=male_count['Country'],name=\"Men\",hole=0.5,domain={'x': [0,0.50]})\nwomen = go.Pie(labels=female_count['index'],values=female_count['Country'],name=\"Women\",hole=0.5,domain={'x': [0.50,1]})\nlayout = dict(title = 'Top-5 Countries with Respondents', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.215, y=0.5, text='Men', showarrow=False, font=dict(size=25)),\n                             dict(x=0.81, y=0.5, text='Women', showarrow=False, font=dict(size=25)) ])\n\ntop_countries_with_respondents = dict(data=[men, women], layout=layout)\niplot(top_countries_with_respondents)","a77c24a6":"age = data.groupby(['Age']).apply(lambda x: x.reset_index(drop = True))\nplt.figure(figsize=(10,7))\nage_bar = sns.countplot(y=\"Age\", hue=\"Career\", data=age)","395b334e":"career = data[data['Career'] == 'Data Analyst']\nsize_count = career['Company Size'].value_counts()[:top].reset_index()\nsize = go.Pie(labels=size_count['index'],values=size_count['Company Size'],name=\"Company Size\",hole=0.5,domain={'x': [0,1]})\nlayout1 = dict(title = 'Top 5 company size for data analyst', font=dict(size=20), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.5, y=0.5, text='Company Size', showarrow=False, font=dict(size=20))])\ncomp_size = dict(data=size, layout=layout1)\niplot(comp_size)","3f28d60d":"(\"There are \",career.shape[0], \"data analyst respondents \",career.shape[0]\/data.shape[0],\"%\")","c0918b7b":"degree_count = career['Degree in two years'].value_counts()[:top].reset_index()\ndegree_size = go.Pie(labels=degree_count['index'],values=degree_count['Degree in two years'],name=\"Degree\",hole=0.5,domain={'x': [0,1]})\nlayout2 = dict(title = 'Top 5 degree for data analyst', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.5, y=0.5, text='Degree', showarrow=False, font=dict(size=20))])\ndeg_size = dict(data=degree_size, layout=layout2)\niplot(deg_size)","1c04c16d":"data.Age.value_counts()","6c6664ac":"career.Age.value_counts()","9f928c34":"country_count = career['Country'].value_counts()[:top].reset_index()\ncountry_size = go.Pie(labels=country_count['index'],values=country_count['Country'],name=\"Country\",hole=0.5,domain={'x': [0,1]})\nlayout3 = dict(title = 'Top 5 country with data analyst as a career', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.5, y=0.5, text='Country', showarrow=False, font=dict(size=20))])\ncoun_size = dict(data=country_size, layout=layout3)\niplot(coun_size)","50c0378c":"male_total = career[career['sex'] == 'Male']\nfemale_total = career[career['sex'] == 'Female']\nmale_total = male_total['Country'].value_counts()[:top].reset_index()\nfemale_total = female_total['Country'].value_counts()[:top].reset_index()\nmen_coun = go.Pie(labels=male_total['index'],values=male_total['Country'],name=\"Men\",hole=0.5,domain={'x': [0,0.50]})\nwomen_coun = go.Pie(labels=female_total['index'],values=female_total['Country'],name=\"Women\",hole=0.5,domain={'x': [0.50,1]})\nlayout4 = dict(title = 'Top-5 Countries with Data Analyst', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.215, y=0.5, text='Men', showarrow=False, font=dict(size=25)),\n                             dict(x=0.81, y=0.5, text='Women', showarrow=False, font=dict(size=25)) ])\n\ntop_countries = dict(data=[men_coun, women_coun], layout=layout4)\niplot(top_countries)","e4a93ac5":"def charts(col1,col2,x_title,y_title, data):\n    index = data[col1].dropna().unique()\n    vals = data[col2].unique()\n    layout = go.Layout()\n    trace = []\n    for j,y_axis in enumerate(vals):\n        trace.append(go.Bar(x = data[data[col2] == y_axis][col1].value_counts().index,\n                            y = data[data[col2] == y_axis][col1].sort_values().value_counts().values,\n                opacity = 0.6, name = vals[j]))\n    fig = go.Figure(data = trace, layout = layout)\n    fig.update_layout(\n        title = x_title,\n        yaxis = dict(title = y_title),\n        legend = dict( bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),\n        bargap = 0.15, bargroupgap = 0.1,legend_orientation=\"h\")\n    fig.show()\ncharts(\"Company Size\",\"Age\",\"Company size VS age group\",\"Count\",career)","a936aa22":"data['Q13'] = data.Q13_Part_1.combine_first(data.Q13_Part_2).combine_first(data.Q13_Part_3).combine_first(data.Q13_Part_4).combine_first(data.Q13_Part_5).combine_first(data.Q13_Part_6).combine_first(data.Q13_Part_7).combine_first(data.Q13_Part_2).combine_first(data.Q13_Part_8).combine_first(data.Q13_Part_9).combine_first(data.Q13_Part_10).combine_first(data.Q13_Part_11)\nmapp = {'Q13':'Learning'}\ndata = data.rename(columns= mapp)","f74870cb":"career = data[data['Career'] == 'Data Analyst']\nmale_total = career[career['sex'] == 'Male']\nfemale_total = career[career['sex'] == 'Female']\nmale_learn = male_total['Learning'].value_counts()[:top].reset_index()\nfemale_learn = female_total['Learning'].value_counts()[:top].reset_index()\nmen_learn = go.Pie(labels=male_learn['index'],values=male_learn['Learning'],name=\"Men\",hole=0.5,domain={'x': [0,0.50]})\nwomen_learn = go.Pie(labels=female_learn['index'],values=female_learn['Learning'],name=\"Women\",hole=0.5,domain={'x': [0.50,1]})\nlayout5 = dict(title = 'Top-5 learning sites for Data Analyst', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.215, y=0.5, text='Men', showarrow=False, font=dict(size=25)),\n                             dict(x=0.81, y=0.5, text='Women', showarrow=False, font=dict(size=25)) ])\n\nlearn = dict(data=[men_learn, women_learn], layout=layout5)\niplot(learn)","44b82d4f":"def charts(col1,col2,x_title,y_title, data):\n    index = data[col1].dropna().unique()\n    vals = data[col2].unique()\n    layout = go.Layout()\n    trace = []\n    for j,y_axis in enumerate(vals):\n        trace.append(go.Bar(x = data[data[col2] == y_axis][col1].value_counts().index,\n                            y = data[data[col2] == y_axis][col1].sort_values().value_counts().values,\n                opacity = 0.6, name = vals[j]))\n    fig = go.Figure(data = trace, layout = layout)\n    fig.update_layout(\n        title = x_title,\n        yaxis = dict(title = y_title),\n        legend = dict( bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),\n        bargap = 0.15, bargroupgap = 0.1,legend_orientation=\"h\")\n    fig.show()\ncharts(\"Team Size\",\"Company Size\",\"Company size VS Team Size\",\"Count\",career)","88995bda":"data['Q16'] = data.Q16_Part_1.combine_first(data.Q16_Part_2).combine_first(data.Q16_Part_3).combine_first(data.Q16_Part_4).combine_first(data.Q16_Part_5).combine_first(data.Q16_Part_6).combine_first(data.Q16_Part_7).combine_first(data.Q16_Part_2).combine_first(data.Q16_Part_8).combine_first(data.Q16_Part_9).combine_first(data.Q16_Part_10).combine_first(data.Q16_Part_11)\ncol_map = {'Q16':'Developmental Envorinments'}\ndata = data.rename(columns= col_map)","5d9b2843":"career = data[data['Career'] == 'Data Analyst']\nmale_total = career[career['sex'] == 'Male']\nfemale_total = career[career['sex'] == 'Female']\nmale_envi = male_total['Developmental Envorinments'].value_counts()[:top].reset_index()\nfemale_envi = female_total['Developmental Envorinments'].value_counts()[:top].reset_index()\nmen_envi = go.Pie(labels=male_envi['index'],values=male_envi['Developmental Envorinments'],name=\"Men\",hole=0.5,domain={'x': [0,0.50]})\nwomen_envi = go.Pie(labels=female_envi['index'],values=female_envi['Developmental Envorinments'],name=\"Women\",hole=0.5,domain={'x': [0.50,1]})\nlayout6 = dict(title = 'Top-5 developmental environments(IDE) for Data Analyst', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.215, y=0.5, text='Men', showarrow=False, font=dict(size=25)),\n                             dict(x=0.81, y=0.5, text='Women', showarrow=False, font=dict(size=25)) ])\n\nenvironment = dict(data=[men_envi, women_envi], layout=layout6)\niplot(environment)","be4b361a":"def charts(col1,col2,x_title,y_title, data):\n    index = data[col1].dropna().unique()\n    vals = data[col2].unique()\n    layout = go.Layout()\n    trace = []\n    for j,y_axis in enumerate(vals):\n        trace.append(go.Bar(x = data[data[col2] == y_axis][col1].value_counts().index,\n                            y = data[data[col2] == y_axis][col1].sort_values().value_counts().values,\n                opacity = 0.6, name = vals[j]))\n    fig = go.Figure(data = trace, layout = layout)\n    fig.update_layout(\n        title = x_title,\n        yaxis = dict(title = y_title),\n        legend = dict( bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),\n        bargap = 0.15, bargroupgap = 0.1,legend_orientation=\"h\")\n    fig.show()\ncharts(\"Age\",\"Compensation Status\",\"Salary VS age group\",\"Count\",career)","9f4f0a33":"data['Q20'] = data.Q20_Part_1.combine_first(data.Q20_Part_2).combine_first(data.Q20_Part_3).combine_first(data.Q20_Part_4).combine_first(data.Q20_Part_5).combine_first(data.Q20_Part_6).combine_first(data.Q20_Part_7).combine_first(data.Q20_Part_2).combine_first(data.Q20_Part_8).combine_first(data.Q20_Part_9).combine_first(data.Q20_Part_10).combine_first(data.Q20_Part_11)\ncolumn_map = {'Q20':'visualization Libraries'}\ndata = data.rename(columns= column_map)","29661597":"career = data[data['Career'] == 'Data Analyst']\nvisualization = career['visualization Libraries'].value_counts()[:top].reset_index()\nvisualization = go.Pie(labels=visualization['index'],values=visualization['visualization Libraries'],name=\"Libraries\",hole=0.5,domain={'x': [0,0.50]})\nlayout7 = dict(title = 'Top-5 visualization libraries for Data Analyst', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.2, y=0.5, text='Libraries', showarrow=False, font=dict(size=20))])\nenvironment = dict(data=[visualization], layout=layout7)\niplot(environment)","9950d8a8":"data['Q32'] = data.Q32_Part_1.combine_first(data.Q32_Part_2).combine_first(data.Q32_Part_3).combine_first(data.Q32_Part_4).combine_first(data.Q32_Part_5).combine_first(data.Q32_Part_6).combine_first(data.Q32_Part_7).combine_first(data.Q32_Part_8).combine_first(data.Q32_Part_9).combine_first(data.Q32_Part_10).combine_first(data.Q32_Part_11)\ncolm_map = {'Q32':'ML products'}\ndata = data.rename(columns= colm_map)","1661db55":"career = data[data['Career'] == 'Data Analyst']\nproducts = career['ML products'].value_counts()[:top].reset_index()\nproducts = go.Pie(labels=products['index'],values=products['ML products'],name=\"Products\",hole=0.5,domain={'x': [0,0.50]})\nlayout8 = dict(title = 'Top-5 ML products for Data Analyst', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.2, y=0.5, text='Products', showarrow=False, font=dict(size=20))])\nprod = dict(data=[products], layout=layout8)\niplot(prod)","65277f07":"data['Q18'] = data.Q18_Part_1.combine_first(data.Q18_Part_2).combine_first(data.Q18_Part_3).combine_first(data.Q18_Part_4).combine_first(data.Q18_Part_5).combine_first(data.Q18_Part_6).combine_first(data.Q18_Part_7).combine_first(data.Q18_Part_8).combine_first(data.Q18_Part_9).combine_first(data.Q18_Part_10).combine_first(data.Q18_Part_11)\nco_map = {'Q18':'Programming languages'}\ndata = data.rename(columns= co_map)","78ac27e1":"career = data[data['Career'] == 'Data Analyst']\nlang = career['Programming languages'].value_counts()[:top].reset_index()\nlang = go.Pie(labels=lang['index'],values=lang['Programming languages'],name=\"Language\",hole=0.5,domain={'x': [0,0.50]})\nlayout9 = dict(title = 'Top-5 Programming languages of Data Analyst', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.2, y=0.5, text='Language', showarrow=False, font=dict(size=20))])\nprod_lang = dict(data=[lang], layout=layout9)\niplot(prod_lang)","43284dae":"data['Q24'] = data.Q24_Part_1.combine_first(data.Q24_Part_2).combine_first(data.Q24_Part_3).combine_first(data.Q24_Part_4).combine_first(data.Q24_Part_5).combine_first(data.Q24_Part_6).combine_first(data.Q24_Part_7).combine_first(data.Q24_Part_8).combine_first(data.Q24_Part_9).combine_first(data.Q24_Part_10).combine_first(data.Q24_Part_11)\nco_mp = {'Q24':'ML algorithm'}\ndata = data.rename(columns= co_mp)","78051980":"career = data[data['Career'] == 'Data Analyst']\nalgorithm = career['ML algorithm'].value_counts()[:top].reset_index()\nalgorithm = go.Pie(labels=algorithm['index'],values=algorithm['ML algorithm'],name=\"Algorithms\",hole=0.5,domain={'x': [0,0.50]})\nlayout10 = dict(title = 'Top-5 commonly used ML algorithm by Data Analyst', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.18, y=0.5, text='Algorithms', showarrow=False, font=dict(size=20))])\nprod_alg = dict(data=[algorithm], layout=layout10)\niplot(prod_alg)","709ae876":"soft = data[data['Career'] == 'Software Engineer']\ncountry_size = career['Country'].value_counts()[:top].reset_index()\ncountry_size = go.Pie(labels=country_size['index'],values=country_size['Country'],name=\"Country\",hole=0.5,domain={'x': [0,1]})\nlayout3 = dict(title = 'Top 5 country with software engineer as a career', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.5, y=0.5, text='Country', showarrow=False, font=dict(size=20))])\ncoun_size = dict(data=country_size, layout=layout3)\niplot(coun_size)","9f832ea6":"soft = data[data['Career'] == 'Software Engineer']\nsize_count = soft['Company Size'].value_counts()[:top].reset_index()\nsize = go.Pie(labels=size_count['index'],values=size_count['Company Size'],name=\"Company Size\",hole=0.5,domain={'x': [0,1]})\nlayout1 = dict(title = 'Top 5 company size for software engineers', font=dict(size=20), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.5, y=0.5, text='Company Size', showarrow=False, font=dict(size=20))])\ncomp_size = dict(data=size, layout=layout1)\niplot(comp_size)","a2a83620":"soft = data[data['Career'] == 'Software Engineer']\ndegree_count = soft['Degree in two years'].value_counts()[:top].reset_index()\ndegree_size = go.Pie(labels=degree_count['index'],values=degree_count['Degree in two years'],name=\"Degree\",hole=0.5,domain={'x': [0,1]})\nlayout2 = dict(title = 'Top 5 degree for software engineers', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.5, y=0.5, text='Degree', showarrow=False, font=dict(size=20))])\ndeg_size = dict(data=degree_size, layout=layout2)\niplot(deg_size)","66c1eb12":"soft.Age.value_counts()","fc08b954":"soft = data[data['Career'] == 'Software Engineer']\nmale_total = soft[soft['sex'] == 'Male']\nfemale_total = soft[soft['sex'] == 'Female']\nmale_total = male_total['Country'].value_counts()[:top].reset_index()\nfemale_total = female_total['Country'].value_counts()[:top].reset_index()\nmen_coun = go.Pie(labels=male_total['index'],values=male_total['Country'],name=\"Men\",hole=0.5,domain={'x': [0,0.50]})\nwomen_coun = go.Pie(labels=female_total['index'],values=female_total['Country'],name=\"Women\",hole=0.5,domain={'x': [0.50,1]})\nlayout4 = dict(title = 'Top-5 Countries with software engineers', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.215, y=0.5, text='Men', showarrow=False, font=dict(size=25)),\n                             dict(x=0.81, y=0.5, text='Women', showarrow=False, font=dict(size=25)) ])\n\ntop_countries = dict(data=[men_coun, women_coun], layout=layout4)\niplot(top_countries)","3fc13d37":"def charts(col1,col2,x_title,y_title, data):\n    index = data[col1].dropna().unique()\n    vals = data[col2].unique()\n    layout = go.Layout()\n    trace = []\n    for j,y_axis in enumerate(vals):\n        trace.append(go.Bar(x = data[data[col2] == y_axis][col1].value_counts().index,\n                            y = data[data[col2] == y_axis][col1].sort_values().value_counts().values,\n                opacity = 0.6, name = vals[j]))\n    fig = go.Figure(data = trace, layout = layout)\n    fig.update_layout(\n        title = x_title,\n        yaxis = dict(title = y_title),\n        legend = dict( bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),\n        bargap = 0.15, bargroupgap = 0.1,legend_orientation=\"h\")\n    fig.show()\ncharts(\"Company Size\",\"Age\",\"Company size VS age group\",\"Count\",soft)","2c46bfe9":"soft = data[data['Career'] == 'Software Engineer']\nmale_total = soft[soft['sex'] == 'Male']\nfemale_total = soft[soft['sex'] == 'Female']\nmale_total = male_total['Learning'].value_counts()[:top].reset_index()\nfemale_total = female_total['Learning'].value_counts()[:top].reset_index()\nmen_learn = go.Pie(labels=male_learn['index'],values=male_learn['Learning'],name=\"Men\",hole=0.5,domain={'x': [0,0.50]})\nwomen_learn = go.Pie(labels=female_learn['index'],values=female_learn['Learning'],name=\"Women\",hole=0.5,domain={'x': [0.50,1]})\nlayout5 = dict(title = 'Top-5 learning sites for Software Engineers', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.215, y=0.5, text='Men', showarrow=False, font=dict(size=25)),\n                             dict(x=0.81, y=0.5, text='Women', showarrow=False, font=dict(size=25)) ])\n\nlearn = dict(data=[men_learn, women_learn], layout=layout5)\niplot(learn)","24c32833":"def charts(col1,col2,x_title,y_title, data):\n    index = data[col1].dropna().unique()\n    vals = data[col2].unique()\n    layout = go.Layout()\n    trace = []\n    for j,y_axis in enumerate(vals):\n        trace.append(go.Bar(x = data[data[col2] == y_axis][col1].value_counts().index,\n                            y = data[data[col2] == y_axis][col1].sort_values().value_counts().values,\n                opacity = 0.6, name = vals[j]))\n    fig = go.Figure(data = trace, layout = layout)\n    fig.update_layout(\n        title = x_title,\n        yaxis = dict(title = y_title),\n        legend = dict( bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),\n        bargap = 0.15, bargroupgap = 0.1,legend_orientation=\"h\")\n    fig.show()\ncharts(\"Team Size\",\"Company Size\",\"Company size VS Team Size\",\"Count\",soft)","d4559f7e":"soft = data[data['Career'] == 'Software Engineer']\nmale_total = soft[soft['sex'] == 'Male']\nfemale_total = soft[soft['sex'] == 'Female']\nmale_envi = male_total['Developmental Envorinments'].value_counts()[:top].reset_index()\nfemale_envi = female_total['Developmental Envorinments'].value_counts()[:top].reset_index()\nmen_envi = go.Pie(labels=male_envi['index'],values=male_envi['Developmental Envorinments'],name=\"Men\",hole=0.5,domain={'x': [0,0.50]})\nwomen_envi = go.Pie(labels=female_envi['index'],values=female_envi['Developmental Envorinments'],name=\"Women\",hole=0.5,domain={'x': [0.50,1]})\nlayout6 = dict(title = 'Top-5 developmental environments(IDE) for Software Engineers', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.215, y=0.5, text='Men', showarrow=False, font=dict(size=25)),\n                             dict(x=0.81, y=0.5, text='Women', showarrow=False, font=dict(size=25)) ])\n\nenvironment = dict(data=[men_envi, women_envi], layout=layout6)\niplot(environment)","a3f07a8c":"def charts(col1,col2,x_title,y_title, data):\n    index = data[col1].dropna().unique()\n    vals = data[col2].unique()\n    layout = go.Layout()\n    trace = []\n    for j,y_axis in enumerate(vals):\n        trace.append(go.Bar(x = data[data[col2] == y_axis][col1].value_counts().index,\n                            y = data[data[col2] == y_axis][col1].sort_values().value_counts().values,\n                opacity = 0.6, name = vals[j]))\n    fig = go.Figure(data = trace, layout = layout)\n    fig.update_layout(\n        title = x_title,\n        yaxis = dict(title = y_title),\n        legend = dict( bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),\n        bargap = 0.15, bargroupgap = 0.1,legend_orientation=\"h\")\n    fig.show()\ncharts(\"Age\",\"Compensation Status\",\"Salary VS age group\",\"Count\",soft)","2ef2579e":"soft = data[data['Career'] == 'Software Engineer']\nvisualization = soft['visualization Libraries'].value_counts()[:top].reset_index()\nvisualization = go.Pie(labels=visualization['index'],values=visualization['visualization Libraries'],name=\"Libraries\",hole=0.5,domain={'x': [0,0.50]})\nlayout7 = dict(title = 'Top-5 visualization libraries for Software Engineers', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.2, y=0.5, text='Libraries', showarrow=False, font=dict(size=20))])\nenvironment = dict(data=[visualization], layout=layout7)\niplot(environment)","d63357fb":"soft = data[data['Career'] == 'Software Engineer']\nlang = soft['Programming languages'].value_counts()[:top].reset_index()\nlang = go.Pie(labels=lang['index'],values=lang['Programming languages'],name=\"Language\",hole=0.5,domain={'x': [0,0.50]})\nlayout9 = dict(title = 'Top-5 Programming languages of Software Engineers', font=dict(size=15), legend=dict(orientation=\"h\"),\n              annotations = [dict(x=0.2, y=0.5, text='Language', showarrow=False, font=dict(size=20))])\nprod_lang = dict(data=[lang], layout=layout9)\niplot(prod_lang)","7c0b24b2":"from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom collections import Counter","72569169":"df = pd.DataFrame(data,columns = ['Age','sex','Country','Degree in two years','Career','Company Size','Team Size','Learning','Developmental Envoriments','visualization Libraries','ML products', 'Programming languages', 'ML algorithm'])","e84cb34c":"df = df.astype('category')\ndf[\"Age\"] = df[\"Age\"].cat.codes\ndf['sex'] = df[\"sex\"].cat.codes\ndf['Country'] = df[\"Country\"].cat.codes\ndf['Degree in two years'] = df[\"Degree in two years\"].cat.codes\ndf['Career'] = df[\"Career\"].cat.codes\ndf['Company Size'] = df[\"Company Size\"].cat.codes\ndf['Team Size'] = df[\"Team Size\"].cat.codes\ndf['Learning'] = df[\"Learning\"].cat.codes\ndf['Developmental Envoriments'] = df[\"Developmental Envoriments\"].cat.codes\ndf['visualization Libraries'] = df[\"visualization Libraries\"].cat.codes\ndf['ML products'] = df[\"ML products\"].cat.codes\ndf['Programming languages'] = df[\"Programming languages\"].cat.codes\ndf['ML algorithm'] = df[\"ML algorithm\"].cat.codes","37c36bfd":"df.head()","2b9c4b98":"def find_k(X):\n    stat=[]\n    diff=[]\n    no_of_clusters = []\n    K = list(range(2, krange+1))\n    for k in K:\n        if k==2:\n            model = KMeans(n_clusters=k).fit(X)\n            stat.append(model.inertia_)\n            no_of_clusters.append(k)\n        else:\n            model = KMeans(n_clusters=k, random_state=random_state ).fit(X)\n            diff.append((stat[len(stat)-1]-model.inertia_))\n            stat.append(model.inertia_)\n            no_of_clusters.append(k)\n\n    ratio = diff\/ (stat[1] - stat[len(stat)-1])\n    minpos = ((pd.DataFrame(ratio).values<0.1).argmax())\n    optimal_k = minpos+1\n    return optimal_k\n","513a583b":"def create_kmodel(dataset):\n    X  = scaler.fit_transform(dataset.values)\n    k_val = find_k(X) \n    kmodel = KMeans(n_clusters=k_val, random_state=random_state, copy_x=True).fit(X)\n    return kmodel,k_val\n","b1a8bde8":"krange = 3\nrandom_state = 2222\nscaler = StandardScaler()\nkmodel,optimal_k = create_kmodel(df)","3580cadd":"from scipy.spatial.distance import cdist\ndef create_kmodel_metrics(dataset, kmodel):\n    X  = scaler.fit_transform(df.values)\n    dist = np.min(cdist(X, kmodel.cluster_centers_, 'euclidean'),axis=1)\n    dist=pd.DataFrame(dist.tolist(),columns=['dist_from_cc'])\n    labels = pd.DataFrame((kmodel.labels_.astype(str)).tolist(),columns=['cluster_label'])\n    concatdf = pd.concat([labels,dist],axis=1)\n    wss = (concatdf.groupby('cluster_label')['dist_from_cc'].mean().reset_index()[['dist_from_cc']])\n    wss_sd=concatdf.groupby('cluster_label')['dist_from_cc'].std().reset_index()[['dist_from_cc']]\n    wss_sd=wss_sd.fillna(0)\n    df_with_labels=pd.concat([labels,dataset],axis=1)\n    cluster_means=df_with_labels.groupby('cluster_label').mean().reset_index().set_index('cluster_label')\n    members=Counter(kmodel.labels_)\n    return labels,concatdf, wss, wss_sd, cluster_means, members, df_with_labels","fe23f995":"def create_meta(dataset, kmodel):\n    labels,concatdf, wss, wss_sd, cluster_means, members, df_with_labels = create_kmodel_metrics(dataset, kmodel)\n    centers_dict=pd.DataFrame((kmodel.cluster_centers_.astype(str)).tolist(), columns=dataset.columns, index=sorted(labels['cluster_label'].unique().tolist())).to_dict(orient=\"index\")\n    ms_df = pd.DataFrame(index=['feature_means','feature_stddev'], columns=dataset.columns)\n    ms_df.loc['feature_means'] = dataset.mean()\n    ms_df.loc['feature_stddev'] = dataset.std()\n    wss_dict = wss.to_dict(orient='dict')[wss.columns.tolist()[0]]\n    wss_sd_dict = wss_sd.to_dict(orient='dict')[wss_sd.columns.tolist()[0]]\n    kmeta_dict = ms_df.to_dict(orient='index')\n    kmeta_dict['cluster_centers'] = centers_dict\n    kmeta_dict['cluster_means'] = cluster_means.to_dict(orient='index')\n    kmeta_dict['wss'] = wss_dict\n    kmeta_dict['wss_sd']=wss_sd_dict\n    kmeta_dict['cluster_labels'] = sorted(labels['cluster_label'].unique())\n    kmeta_dict['optimal_k']=str(optimal_k)\n    return kmeta_dict\n","3c852bdc":"meta_data = create_meta(df,kmodel)","40914d03":"career = df.groupby(['Career']).apply(lambda x: x.reset_index(drop = True))\nsns.catplot(x=\"Career\", y=\"Programming languages\", hue=\"sex\", kind=\"point\", data=career);\n","830a919b":"data_f = data['Money Spent'].astype('category')\ndf = pd.concat([data_f,df],axis=1)","13c14d6c":"sns.catplot(x=\"Career\", y=\"Money Spent\", hue=\"sex\", kind=\"point\", data=data);","ce1c8277":"sns.catplot(x=\"Money Spent\", y=\"Compensation Status\", kind=\"box\", data=data)","819bc791":"sns.catplot(x=\"Programming languages\", y=\"Money Spent\", hue=\"Compensation Status\", kind=\"point\", data=data)","b13c794c":"# Depicts the top 5 IDE's where men and women develop their products or provide services as a data analyst","70dc8730":"# Depicts Money Spent in 5 years to the compensation Status ","8add2957":"# Depicts top 5 ML countries with software engineers with respect to gender","7218db44":"# Depicts the top 5 visualization ","c11e0746":"# Depicts top 5 programming languages used by data analyst","84095293":"# Depicts top 5 programming languages commonly used by software engineers","d50942fa":"# Depicts top 5 ML algorithms commonly used by data analyst","5cbfef8c":"# Depicts top 5 visualization libraries used by software engineers","ad75b06d":"# A pie chart that shows top 5 countries with respondents and it shows that men and women in India actively participated in this survey","2f3ff87e":"# Depicts Salary distribution by career","963ad647":"# Depicts most used Words in career","30ce454f":"# Depicts top 5 developmental environments(IDE) for software engineers with respect to gender","1c0e8c4d":"# Shows the degree that the respondents will have or start pursuing whose career is currently as a data analyst","269efe46":"# The count plot shows the career pursued or being pursued by the respondents and shows that data analyst job is pursued by the age group 25-29","665c5f79":"# Read Multiple choice response","48928558":"Data science, in simpler terms converting or extracting the data in various forms, to knowledge. So that the business can use this knowledge to make wise decisions to improve the business. Using data science, companies have become intelligent enough to push and sell products.\n\nSoftware engineering is a structured approach to design, develop and maintenance of software, to avoid the low quality of the software product. Software Engineering makes the requirements clear so that the development will be easier to proceed. so let us understand both Data Science and Software Engineering in detail in this post.\n\nThe above visualizations clearly depict the requirements differ from one stream to another and also India proves that it is developing in the stream of data science with lot of data analytics practitioners","3ea87594":"# Depicts top 5 company size of software engineers","b61323de":"# Golden Era for Data Science","0fde4a22":"# This report shows a clear idea about the dataset ","0c943821":"# Depicts top 5 ML products used by data analyst","a3336119":"# Shows the size of the company where the data analysts work. With the pie chart, we can conclude that many data analysts start or pursue their career in the start ups or developing companies","3ad351fa":"# Shows that respondents from India mostly pursue their career as a data analyst","966c28ea":"Kmeans algorithm is an iterative algorithm that tries to partition the dataset into Kpre-defined distinct non-overlapping subgroups (clusters) where each data point belongs to only one group. It tries to make the inter-cluster data points as similar as possible while also keeping the clusters as different (far) as possible. It assigns data points to a cluster such that the sum of the squared distance between the data points and the cluster\u2019s centroid (arithmetic mean of all the data points that belong to that cluster) is at the minimum. The less variation we have within clusters, the more homogeneous (similar) the data points are within the same cluster.\nThe way kmeans algorithm works is as follows:\n*     Specify number of clusters K.\n*     Initialize centroids by first shuffling the dataset and then randomly selecting K data points for the centroids without   replacement.\n*     Keep iterating until there is no change to the centroids. i.e assignment of data points to clusters isn\u2019t changing.\nCompute the sum of the squared distance between data points and all centroids.\nAssign each data point to the closest cluster (centroid).\nCompute the centroids for the clusters by taking the average of the all data points that belong to each cluster.","648a6cbf":"# Depicts Money Spent Distribution","b71e4682":"# Depicts top 5 learning sites for software engineers with respect to gender","cef5039e":"Data science is an ever-evolving industry. Ask any prominent data scientist or an industry expert and he or she would say that an analytics aspirant needs to stay constantly updated about the industry. Be it the programming languages involved in analytics, the industry\u2019s functioning and recruitment process, the tools used, the advancements in its allied fields like IoT, Machine Learning and more, there\u2019s a lot happening around analytics.\n\nGoogle\u2019s TensorFlow Object Detection API:\n \n\nEvery time you visit Google\u2019s research blog, you can find the company working on something out of the world and unbelievable. As part of its Big Data research, it published an article on its working on machine learning systems designed to improve its services and products. The deep learning technology is all about the machines identifying several objects on an image \u2013 yes, on an image.\n\nA Non-technical Guide to Understanding Machine Learning:\n \n\nFor beginners, machine learning has always been complex. While most of the articles on machine learning and its advantages for businesses are oriented towards developers and pros, this article just makes it easy for non-technical people to understand.\n\nData Visualization Community on Reddit:\n \n\nBefore you head to check out this website, we\u2019ve to warn you that this community is like a quicksand. It\u2019s easy to enter but arduous to come out \u2013 so many amazing things out there! It\u2019s a community where data scientists come together and share the best data visualizations they\u2019ve come across.\n\nData Science and Customer Behavior:\n \n\nOne of the toughest mysteries lies is cracking customer behaviour. The very reason why data science fetched such popularity and patronage around the world as it could uncover customer behavior and improve their experience. This article helps you crack that by identifying data sources and implementing ML algorithms.\n\nData Scientist and Your Younger Self:\n \n\nIf had a chance, what would a data scientist ask or say to his younger self? Would he or she be happy for choosing data science or regret the entire decision? What is the knowledge transfer that would happen between the evolved and the evolving? Find out from the eyes of a prominent data scientists.\n\nHow to get started with Python for data analysis?\n \n\nPython is a popular analytics tool that is used globally by data scientists around the world. For a lot of people, especially beginners, it appears a little complex. However, this article helps you get started with Python in the simplest way possible. The article is simple and the one you need to read today.","4abe0970":"# Depicts top 5 ML degrees pursued by software engineers","1bdf277f":"# Depicts the top 5 learning sites where men and women develop themselves as a data analyst","a75a1d0b":"# Depicts top 5 countries with Software Engineers","4ca3ef66":"# Used Encoding to convert categorical to numeric"}}