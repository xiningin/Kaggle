{"cell_type":{"850e1040":"code","d9832d84":"code","54c5261f":"code","be0a3d1e":"code","c294b3af":"code","ccb6725b":"code","243b572b":"code","2ec93524":"code","d0f6662b":"code","508278ba":"code","82c91448":"code","a5255c9e":"code","6f4d4784":"code","4dc33029":"code","d67d17f5":"code","a522293e":"code","09b0e635":"code","5e6bcf48":"code","6dcee3d6":"code","ebd198ba":"code","983ea2a7":"code","513aadc8":"code","75d3fbca":"code","f688c20b":"code","467319b6":"code","dd447a2d":"code","c0536eac":"markdown","094a00f3":"markdown","d4ba41d1":"markdown","ca5a4823":"markdown","b38a70c8":"markdown","b53f8a19":"markdown","2650cb21":"markdown","21407276":"markdown","004bf441":"markdown"},"source":{"850e1040":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nimport seaborn as seabornInstance \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\n%matplotlib inline","d9832d84":"df = pd.read_excel(r'..\/input\/who-life-expectancy\/Life_Expectancy_Data.xlsx')\ndf","54c5261f":"df.columns = df.columns.str.replace(' ', '_')\ndf.columns = df.columns.str.rstrip('_')\ndf","be0a3d1e":"df.drop(df[df[\"Year\"] == 2015].index, inplace= True)","c294b3af":"x = df['Life_expectancy']\nplt.hist(x)\nplt.show","ccb6725b":"df_mean = df['Life_expectancy'].mean()\ndf_mean","243b572b":"df['Life_Exp_log'] = np.log(df['Life_expectancy'])\ny = df['Life_Exp_log']\n\nplt.hist(y)\nplt.show()","2ec93524":"y.mean()","d0f6662b":"# plot data\nfig, ax = plt.subplots(figsize=(12,5))\n# use unstack()\ndf.groupby(['Year','Status']).mean()['Life_expectancy'].unstack().plot(ax=ax)","508278ba":"df_diff = df.groupby(['Year', 'Status']).mean()['Life_expectancy']\ndf_diff = pd.DataFrame(df_diff)\ndf_diff = df_diff.reset_index()\ndf_diff = df_diff.pivot_table('Life_expectancy', ['Year'], 'Status')\ndf_diff","82c91448":"df.plot(y = 'Adult_Mortality' , x = 'Life_expectancy', style = 'o')\nplt.title('Adult_Mortality Vs Life_expectancy')\nplt.xlabel('Life_expectancy')\nplt.ylabel('Adult_Mortality')\nplt.show()","a5255c9e":"df_temp = df.drop(['Country', 'Status', 'Year'], axis = 1)\n\nfig, axes = plt.subplots(nrows = 5, ncols = 4, figsize = (60, 100))\nfor ax, column in zip(axes.flatten(), df_temp.columns):\n    sns.distplot(df_temp[column].dropna(), ax = ax, color = 'darkred')\n    ax.set_title(column, fontsize = 43)\n    ax.tick_params(axis = 'both', which = 'major', labelsize = 35)\n    ax.tick_params(axis = 'both', which = 'minor', labelsize = 35)\n    ax.set_xlabel('')\nfig.tight_layout(rect = [0, 0.03, 1, 0.85])","6f4d4784":"null_columns = df.columns[df.isnull().any()]\ndf[null_columns].isnull().sum()","4dc33029":"df_categorical = df.filter(['Country', 'Status'], axis =1)\ndf = df.drop(['Country', 'Status'], axis =1)\ndf","d67d17f5":"df_categorical = df_categorical.reset_index()\ndf_categorical = df_categorical.filter(['Country', 'Status'])","a522293e":"imputer = SimpleImputer(missing_values = np.nan, strategy ='mean')\nimputer = imputer.fit(df)\ndf_impute = imputer.transform(df)\ndf_impute","09b0e635":"df_impute = pd.DataFrame(df_impute)\ndf_impute = df_impute.rename(columns = {0 : \"Year\", 1: 'Life_expectancy', 2: 'Adult_Mortality', 3: 'infant_deaths', 4: 'Alcohol',\n                                       5: 'percentage_expenditure', 6: 'Hepatitis_B', 7: 'Measles', 8: 'BMI', 9: 'under-five_deaths',\n                                       10: 'Polio', 11: 'Total_expenditure', 12:'Diphtheria', 13: 'HIV\/AIDS', 14: 'GDP', 15: 'Population',\n                                       16: ' thinness_1-19_years', 17: 'thinness_5-9_years', 18: 'Income_composition_of_resources',\n                                       19: 'Schooling', 20 : 'Life_exp_log'})","5e6bcf48":"df = pd.merge(df_categorical, df_impute, left_index = True, right_index = True)\ndf['Year'] = df['Year'].astype(int)\ndf","6dcee3d6":"X = df[['Adult_Mortality', 'infant_deaths', 'Alcohol', 'percentage_expenditure', 'Hepatitis_B', 'Measles', 'BMI', 'Polio','Diphtheria', 'Total_expenditure', 'GDP', 'Population', 'Income_composition_of_resources', 'Schooling']].values\nY = df['Life_exp_log'].values","ebd198ba":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 0)","983ea2a7":"regressor = LinearRegression()\nregressor.fit(X_train, Y_train)","513aadc8":"coeff_df = pd.DataFrame(regressor.coef_, columns=['Coefficient'])  \ncoeff_df","75d3fbca":"Y_pred = regressor.predict(X_test)\ndf_result = pd.DataFrame({'Actual': Y_test, 'Predicted': Y_pred})\ndf_result","f688c20b":"fig, ax = plt.subplots()\nax.scatter(Y_test, Y_pred)\nax.plot([Y_test.min(), Y_test.max()], [Y_test.min(), Y_test.max()], 'k--', lw=3)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()","467319b6":"print(regressor.score(X_test, Y_test))","dd447a2d":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, Y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, Y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, Y_pred)))","c0536eac":"***Using the SimpleImputer - Instead of eliminating the rows and columns with NaN, the values are imputed with MEAN***","094a00f3":"## Multi-Linear Regression","d4ba41d1":"### Average Life Expectancy of Developing and Developed country from 2000 to 2014","ca5a4823":"***Since the Data is Negatively skewed, Normalizing - LOG TRANSFORMATION to the life expectancy parameter would be a right option to improve the model in the preprocessing stage***","b38a70c8":"## Imputation","b53f8a19":"### Adult_Mortality VS Life Expectancy","2650cb21":"## EDA & Preprocessing","21407276":"### Check the distribution curve","004bf441":"### Variable explanation"}}