{"cell_type":{"b6b5f7e8":"code","db89a004":"code","200b4d34":"code","6d198607":"code","8c0516d7":"code","5f0b17ec":"code","59c9478b":"code","dfdbf611":"code","b7c043ed":"code","f2c99b49":"code","c37086c8":"code","5b55a461":"code","1ecef1a9":"code","ff746d6a":"code","88641674":"code","b671af2a":"code","15a6a3b7":"code","2b5a36f8":"code","529f24ed":"markdown","15af046a":"markdown","86bc00e6":"markdown","cc51b067":"markdown","f45708f0":"markdown","aa49b4c1":"markdown","5df09dae":"markdown","797c3c58":"markdown","ea887668":"markdown","f63e4d5e":"markdown","6ca196d3":"markdown","1f9ab5d0":"markdown","9ea02071":"markdown"},"source":{"b6b5f7e8":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport cv2\nimport matplotlib.pyplot as plt\nimport random\n\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Layer, BatchNormalization \nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import Model, Input \nfrom tensorflow.keras.callbacks import EarlyStopping\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport os","db89a004":"captcha_list = []\nimg_shape = (50, 200, 1)\nsymbols = list(map(chr, range(97, 123))) + list(map(chr, range(48, 58))) # the symbols that can be in captcha\n\nlen_symbols = len(symbols) # the number of symbols\nnSamples = len(os.listdir('..\/input\/captcha-version-2-images\/samples\/samples')) # the number of samples 'captchas'\nlen_captcha = 5\n\nX = np.zeros((nSamples, 50, 200, 1)) # 1070 * 50 * 200\ny = np.zeros((5, nSamples, len_symbols)) # 5 * 1070 * 36","200b4d34":"for i, captcha in enumerate(os.listdir('..\/input\/captcha-version-2-images\/samples\/samples')):\n    captcha_code = captcha.split(\".\")[0]\n    captcha_list.append(captcha_code)\n    captcha_cv2 = cv2.imread(os.path.join('..\/input\/captcha-version-2-images\/samples\/samples', captcha), cv2.IMREAD_GRAYSCALE)\n    captcha_cv2 = captcha_cv2 \/ 255.0\n    captcha_cv2 = np.reshape(captcha_cv2, img_shape)\n    targs = np.zeros((len_captcha, len_symbols))\n    \n    for a, b in enumerate(captcha_code):\n        targs[a, symbols.index(b)] = 1\n    \n    X[i] = captcha_cv2\n    y[:, i] = targs","6d198607":"print(\"shape of X:\", X.shape)\nprint(\"shape of y:\", y.shape)","8c0516d7":"1070 * .8","5f0b17ec":"X_train = X[:856] \ny_train = y[:, :856]\nX_test = X[856:]\ny_test = y[:, 856:]","59c9478b":"captcha = Input(shape=(50,200,1))\nx = Conv2D(16, (3,3),padding='same',activation='relu')(captcha)\nx = MaxPooling2D((2,2) , padding='same')(x)\nx = Conv2D(32, (3,3),padding='same',activation='relu')(x)\nx = MaxPooling2D((2,2) , padding='same')(x)\nx = Conv2D(32, (3,3),padding='same',activation='relu')(x)\nx = MaxPooling2D((2,2) , padding='same')(x)\nx = Conv2D(32, (3,3),padding='same',activation='relu')(x)\nx = MaxPooling2D((2,2) , padding='same')(x)\nx = BatchNormalization()(x)\n\n\nflatOutput = Flatten()(x)\n\ndense1 = Dense(64 , activation='relu')(flatOutput)\ndropout1= Dropout(0.5)(dense1)\noutput1 = Dense(len_symbols , activation='sigmoid' , name='char_1')(dropout1)\n\ndense2 = Dense(64 , activation='relu')(flatOutput)\ndropout2= Dropout(0.5)(dense2)\noutput2 = Dense(len_symbols , activation='sigmoid' , name='char_2')(dropout2)\n    \ndense3 = Dense(64 , activation='relu')(flatOutput)\ndropout3= Dropout(0.5)(dense3)\noutput3 = Dense(len_symbols , activation='sigmoid' , name='char_3')(dropout3)\n    \ndense4 = Dense(64 , activation='relu')(flatOutput)\ndropout4= Dropout(0.5)(dense4)\noutput4 = Dense(len_symbols , activation='sigmoid' , name='char_4')(dropout4)\n    \ndense5 = Dense(64 , activation='relu')(flatOutput)\ndropout5= Dropout(0.5)(dense5)\noutput5 = Dense(len_symbols , activation='sigmoid' , name='char_5')(dropout5)\n    \nmodel = Model(inputs = captcha , outputs=[output1 , output2 , output3 , output4 , output5])","dfdbf611":"model.summary()","b7c043ed":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=[\"accuracy\"])\nearlystopping = EarlyStopping(monitor =\"val_loss\",  \n                             mode =\"min\", patience = 5,  \n                             restore_best_weights = True) \n\nhistory = model.fit(X_train, [y_train[0], y_train[1], y_train[2], y_train[3], y_train[4]], batch_size=32, epochs=60, verbose=1, validation_split=0.2, callbacks =[earlystopping])","f2c99b49":"score = model.evaluate(X_test,[y_test[0], y_test[1], y_test[2], y_test[3], y_test[4]],verbose=1)\n\nprint('Test Loss and accuracy:', score)","c37086c8":"plt.figure(figsize=(15,8))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","5b55a461":"def makePredict(captcha):\n    captcha = np.reshape(captcha , (50,200))\n    result = model.predict(np.reshape(captcha, (1,50,200,1)))\n    result = np.reshape(result ,(5,36))\n    indexes =[]\n    for i in result:\n        indexes.append(np.argmax(i))\n        \n    label=''\n    for i in indexes:\n        label += symbols[i]\n        \n    return label","1ecef1a9":"randomlist = []\nfor i in range(0,4):\n    n = random.randint(0,214)\n    randomlist.append(n)\n\nfig, axs = plt.subplots(2, 2, figsize=(15,15))\naxs[0, 0].imshow(X_test[randomlist[0]])\naxs[0, 0].set_title(makePredict(X_test[randomlist[0]]))\n\naxs[0, 1].imshow(X_test[randomlist[1]])\naxs[0, 1].set_title(makePredict(X_test[randomlist[1]]))\n\naxs[1, 0].imshow(X_test[randomlist[2]])\naxs[1, 0].set_title(makePredict(X_test[randomlist[2]]))\n\naxs[1, 1].imshow(X_test[randomlist[3]])\naxs[1, 1].set_title(makePredict(X_test[randomlist[3]]))\nfig.subplots_adjust(hspace=-0.6)\n","ff746d6a":"actual_pred = []\n\nfor i in range(len(captcha_list[856:])):\n    actual_pred.append([captcha_list[i + 856], makePredict(X_test[i])])","88641674":"sameCount = 0\ndiffCount = 0\nletterDiff = {}\ncorrectness = {\"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0}\nfor element in actual_pred:\n    if element[0] == element[1]:\n        sameCount += 1\n    else:\n        diffCount += 1\n        correctnessPoint = 0\n        for i in range(len(actual_pred[0][0])):\n            if element[0][i] != element[1][i] and str(i) not in letterDiff:\n                letterDiff[str(i)] = 1\n            elif element[0][i] != element[1][i] and str(i) in letterDiff:\n                letterDiff[str(i)] += 1\n            if element[0][i] != element[1][i]:\n                correctnessPoint += 1\n        correctness[str(correctnessPoint)] += 1","b671af2a":"x = ['True predicted', 'False predicted']\ny = [sameCount, diffCount]\n\nfig = go.Figure(data=[go.Bar(x = x, y = y)])\nfig.show()","15a6a3b7":"x1 = [\"Character \" + str(x) for x in range(1, 6)]\ny1 = []\n\nfor element in sorted(letterDiff):\n    y1.append(letterDiff[element])\n    \nfig = go.Figure(data=[go.Bar(x = x1, y = y1)])\nfig.show()","2b5a36f8":"x2 = [str(x) + \" incorrect\" for x in correctness.keys()]\ny2 = list(correctness.values())\n\nfig = go.Figure(data=[go.Bar(x = x2, y = y2)])\nfig.show()","529f24ed":"<a id=\"3\"><\/a>\n# Create Model","15af046a":"# Introduction\n\nThis dataset contains CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart) images. Built in 1997 as way for users to identify and block bots (in order to prevent spam, DDOS etc.). They have since then been replace by reCAPTCHA because they are breakable using Artificial Intelligence (as I encourage you to do).\n\nThe images are 5 letter words that can contain numbers. The images have had noise applied to them (blur and a line). They are 200 x 50 PNGs.","86bc00e6":"Here we can see how much we have incorrectness in each index.","cc51b067":"According to the results of our model 139 captchas are completely correct while we have 75 incorrectly identified captchas.","f45708f0":"I got randomly 4 captchas in order to see quickly see the result of model.","aa49b4c1":"<a id=\"4\"><\/a>\n# Results","5df09dae":"# Table of contents:\n\n* [1. Import libraries](#1)\n* [2. Preprocess data](#2)\n* [3. Create model](#3)\n* [4. Results](#4)","797c3c58":"As you know we have 75 false predicted captchas. In order to get count of incorrectness in each word, I plotted this bar chart.  ","ea887668":"<a id=\"2\"><\/a>\n# Preprocess data","f63e4d5e":"**Thank You!** If you have any suggestion or advice or feedback, I will be very appreciated to hear them.","6ca196d3":"<a id=\"1\"><\/a>\n# Import libraries","1f9ab5d0":"Here I got the number of perfectly predicted captchas and incorrectly predicted ones.","9ea02071":"# **Captcha Recognition with Tensorflow**\n\n### In this kernel, I will use Tensorflow for identifying captcha as text from images. If you have any suggestions, advice or correction please don't hesitate to write them.\n\n    \n<center><img src=\"https:\/\/blog.jscrambler.com\/content\/images\/2017\/02\/captcha-1.png\"><\/center>"}}