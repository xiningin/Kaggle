{"cell_type":{"4021048f":"code","46671159":"code","da76d664":"code","03f1c554":"code","51111728":"code","f065d22d":"code","4737d661":"code","e1758db3":"code","38eedaad":"code","57fc39f4":"code","ca652547":"code","df5a08d6":"code","7304180d":"code","9a34c5f1":"code","44cef8d7":"code","bed9f1ad":"code","78aa4be2":"code","2bd40852":"code","800ffcc1":"code","c7a48675":"code","99c7fb21":"code","f400b0da":"code","05c00f3b":"code","feacffd1":"code","e91c17ed":"code","736a807a":"code","b3db9d63":"code","a423739e":"code","97ecda01":"code","004006c2":"code","c08c47da":"code","29881f72":"code","dd18abaf":"code","d354286c":"code","fb9004eb":"code","367ae858":"code","6fad1ace":"code","7d3894ef":"markdown","b8f26903":"markdown","d3436093":"markdown","227d5466":"markdown","1aa85c4a":"markdown","04350f60":"markdown","d81fa949":"markdown","4dfb8fcb":"markdown","85f45d93":"markdown","994a01ca":"markdown","efe8f20c":"markdown","b45708ab":"markdown","5cbb0d6f":"markdown","4662a9e3":"markdown","913ed84d":"markdown","d1c3a10d":"markdown","aef9f4e1":"markdown","db0c59a8":"markdown"},"source":{"4021048f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46671159":"import matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n%matplotlib inline \nimport seaborn as sns\nimport plotly.io as pio\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot","da76d664":"matches = pd.read_csv('\/kaggle\/input\/ipldata\/matches.csv')\ndeliveries = pd.read_csv('\/kaggle\/input\/ipldata\/deliveries.csv')\nmatches.head()","03f1c554":"matches.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant','Delhi Capitals']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PWI','RPS','DCAP'],inplace=True)\n\ndeliveries.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant','Delhi Capitals']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PWI','RPS','DCAP'],inplace=True)\n\nmatches.replace(to_replace = 'Bangalore',value = 'Bengaluru', inplace=True)\nmatches.replace(to_replace = 'DD',value = 'DCAP', inplace=True)\ndeliveries.replace(to_replace = 'DD',value = 'DCAP', inplace=True)","51111728":"def drawbar(x):\n    m = pd.DataFrame(matches[x].value_counts(ascending=False))\n    fig=plt.figure(figsize=(14,8))\n    ax=sns.barplot(y=m.index,x=m.iloc[:,0], data=m, palette='coolwarm')\n    initialx=0\n    for p in ax.patches:\n        ax.text(p.get_width()*1.005,initialx+p.get_height()\/5,'{:1.0f}'.format(p.get_width()))\n        initialx+=1","f065d22d":"drawbar('city')\nplt.xlabel('Number of Games', size=12)\nplt.ylabel('Cities', size=12)\nplt.title('Cities With Most Number of Games', size=14)","4737d661":"mvenue = pd.DataFrame(matches['venue'].value_counts(ascending=False))[:20]\nfig=plt.figure(figsize=(14,8))\nax=sns.barplot(y=mvenue.index,x=mvenue.iloc[:,0], data=mvenue, palette='viridis')\ninitialx=0\nplt.xlabel('Counts', size=12)\nplt.ylabel('Grounds', size=12)\nplt.title('Top 20 Popular Grounds', size=14)\nfor p in ax.patches:\n    ax.text(p.get_width()*1.005,initialx+p.get_height()\/4,'{:1.0f}'.format(p.get_width()))\n    initialx+=1","e1758db3":"drawbar('toss_winner')\nplt.xlabel('Toss Wins', size=12)\nplt.ylabel('Team Names', size=12)\nplt.title('Number of Toss Wins', size=14)","38eedaad":"fig=plt.figure(figsize=(14,8))\nsns.countplot(x='season',hue='toss_decision',data=matches)\nplt.title('Toss Decisions By Seasons')","57fc39f4":"drawbar('winner')\nplt.xlabel('Wins', size=12)\nplt.ylabel('Team Names', size=12)\nplt.title('Number of Victories', size=14)","ca652547":"mplaofmat = pd.DataFrame(matches['player_of_match'].value_counts(ascending=False))[:20]\nfig=plt.figure(figsize=(14,8))\nax=sns.barplot(y=mplaofmat.index,x=mplaofmat.iloc[:,0], data=mplaofmat, palette='viridis')\ninitialx=0\nplt.xlabel('Counts', size=12)\nplt.ylabel('Players', size=12)\nplt.title('Man Of The Match Awards', size=14)\nfor p in ax.patches:\n    ax.text(p.get_width()*1.005,initialx+p.get_height()\/4,'{:1.0f}'.format(p.get_width()))\n    initialx+=1","df5a08d6":"print('IPL matches have been played in',matches['city'].nunique(),'different cities and', matches['venue'].nunique(),'grounds with',matches['player_of_match'].nunique(),'unqiue players winning Man Of The Match Awards')","7304180d":"ump = pd.DataFrame(matches['umpire1'])\nump1 = pd.DataFrame(matches['umpire2']).rename(columns = {'umpire2':'umpire1'})\nump = ump.append(ump1, ignore_index=True)\nump = pd.DataFrame(ump['umpire1'].value_counts(ascending=False))[:20]\nfig=plt.figure(figsize=(14,8))\nax=sns.barplot(y=ump.index,x=ump.iloc[:,0], data=ump, palette='coolwarm')\ninitialx=0\nplt.xlabel('Counts', size=12)\nplt.ylabel('Umpires', size=12)\nplt.title('Top 20 Standing Umpires', size=14)\nfor p in ax.patches:\n    ax.text(p.get_width()*1.005,initialx+p.get_height()\/4,'{:1.0f}'.format(p.get_width()))\n    initialx+=1","9a34c5f1":"matches[matches['win_by_runs'] == matches['win_by_runs'].max()][['season','city','date','team1','team2','toss_winner','player_of_match','win_by_runs']]","44cef8d7":"matches[matches['win_by_wickets'] == matches['win_by_wickets'].max()]","bed9f1ad":"teamgames = pd.DataFrame(matches['team1'])\nteamgames1 = pd.DataFrame(matches['team2']).rename(columns = {'team2':'team1'})\nteamgames = teamgames.append(teamgames1, ignore_index=True)\nteamgames = pd.DataFrame(teamgames['team1'].value_counts(ascending=False)).reset_index().rename(columns= {'index':'team','team1':'matches'})\nteamwins = pd.DataFrame(matches['winner'].value_counts()).reset_index().rename(columns= {'index':'team','winner':'wins'})\nteamwinper = pd.merge(teamgames,\n                 teamwins,\n                 on='team')\nteamwinper['win%'] = (teamwinper['wins']\/teamwinper['matches'])*100\nteamwinper = teamwinper.sort_values(by='win%',ascending=False)\nteamwinper['losses'] = teamwinper['matches'] - teamwinper['wins'] \nteamwinper['win%'] = teamwinper['win%'].round(decimals=1)\nfig=plt.figure(figsize=(14,8))\nclrs = ['#DC460A','#F4FE4E','#0846E4','#F59E07','#3D064A','#0E6FD9','#D90ED2','#C91934','#FF0230','#E66E20','#925228','#CA3E16','#4E7FED','#53C1EE']\nax=sns.barplot(x=teamwinper['team'],y=teamwinper.iloc[:,3], data=teamwinper, palette=clrs)\ninitialx=0\nplt.xlabel('Win Percentage', size=12)\nplt.ylabel('Teams', size=12)\nplt.title('Win Percentage', size=14)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.015, p.get_height() * 1.005), size=13)","78aa4be2":"fig=plt.figure(figsize=(14,8))\nax=sns.barplot(y=teamwinper['team'],x=teamwinper['matches'], data=teamwinper, color='blue')\nax1=sns.barplot(y=teamwinper['team'],x=teamwinper['wins'], data=teamwinper, color='red')\ntopbar = plt.Rectangle((0,0),1,1,fc=\"blue\", edgecolor = 'none')\nbottombar = plt.Rectangle((0,0),1,1,fc='red',  edgecolor = 'none')\nl = plt.legend([bottombar, topbar], ['Wins', 'Mat'], loc=4, ncol = 2, prop={'size':12})","2bd40852":"tmwin = matches[['team1','team2','toss_winner','winner']]\ntmwin['tosseffect'] = np.where(tmwin['toss_winner']==tmwin['winner'], 1, 0)\ntmwin['batfirstresult'] = np.where(tmwin['team1']==tmwin['winner'], 1, 0)\nfig=plt.figure(figsize=(12,5))\nlabels = ['Toss won, match won', \n         'Toss won, match lost']\nslices = [393, 363]\nexplode=(0.1,0)\nplt.rcParams['font.size'] = 13\nplt.pie(slices, labels = labels, startangle=90,shadow=True,explode=(0,0.05), autopct='%1.1f%%', colors=['#063A50','#4BC7FB'])","800ffcc1":"ig=plt.figure(figsize=(12,5))\nlabels = ['Match Won Batting First', \n         'Match Won Chasing']\nslices = [335, 421]\nplt.rcParams['font.size'] = 13\nplt.pie(slices, labels = labels, startangle=90,shadow=True,explode=(0,0.05), autopct='%1.1f%%', colors=['#352087','#866FE1'])","c7a48675":"x=['2008', '2009', '2010','2011', '2012','2013','2014','2015']\ntmwintill2015 = matches[matches['season'].isin(x)]\ntmwintill2015 = tmwintill2015[['team1','team2','toss_winner','winner']]\ntmwintill2015['tosseffect'] = np.where(tmwintill2015['toss_winner']==tmwintill2015['winner'], 1, 0)\ntmwintill2015['batfirstresult'] = np.where(tmwintill2015['team1']==tmwintill2015['winner'], 1, 0)\nfig=plt.figure(figsize=(12,5))\nlabels = ['Match Won Batting First', \n         'Match Won Chasing']\nslices = [239, 278]\nplt.rcParams['font.size'] = 13\nplt.title('From 2008-2015')\nplt.pie(slices, labels = labels, startangle=90,shadow=True,explode=(0,0.05), autopct='%1.1f%%', colors=['#E42542','#E46C7E'])","99c7fb21":"mat = matches\nmat['toss_decision1'] = np.where(mat['toss_decision']=='bat', 1, 0)\ntoss_teamwise = pd.DataFrame(mat.groupby('toss_winner')['toss_decision1'].sum()).reset_index()\ntemp = pd.DataFrame(mat['toss_winner'].value_counts()).reset_index().rename(columns={'index':'toss_winner','toss_winner':'counts'})\ntoss_teamwise = pd.merge(toss_teamwise, temp, on='toss_winner')\ntoss_teamwise = toss_teamwise.rename(columns={'toss_decision1':'bat first'})\ntoss_teamwise['bowl first'] = toss_teamwise['counts'] - toss_teamwise['bat first'] \npal=['#F3CF87','#F31727']\ntoss_teamwise.plot(x=\"toss_winner\",y=[\"bat first\",\"bowl first\"], kind=\"bar\", color = pal, stacked=True, figsize=(14,8)).legend(['Bat','Field'])\nplt.title(\"Toss Decisons By Teams\", size=12)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Toss Decision\")","f400b0da":"mat['toss_win_team_win'] = np.where(mat['toss_winner']==mat['winner'],1,0)\ntoss_win_team_win = pd.DataFrame(mat.groupby('toss_winner')['toss_win_team_win'].sum()).reset_index()\ntemp1 = pd.DataFrame(mat['toss_winner'].value_counts()).reset_index().rename(columns={'index':'toss_winner','toss_winner':'counts'})\ntoss_win_team_win = pd.merge(toss_win_team_win, temp, on='toss_winner')\ntoss_win_team_win['toss_win_team_lost'] = toss_win_team_win['counts'] - toss_win_team_win['toss_win_team_win']\npal=['#09420A','#41EE46']\ntoss_win_team_win.plot(x=\"toss_winner\",y=[\"toss_win_team_win\",\"toss_win_team_lost\"], kind=\"bar\", color=pal, stacked=True, figsize=(14,8)).legend(['Toss Won Match Won','Toss Won Match Lost'])\nplt.title(\"Impact of Toss Decision\", size=12)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Toss Decision Effect\")","05c00f3b":"mat['bat_first_team_win'] = np.where(mat['team1']==mat['winner'],1,0)\nmat['bowl_first_team_win'] = np.where(mat['team2']==mat['winner'],1,0)\nbat_first_team_win = pd.DataFrame(mat.groupby('team1')['bat_first_team_win'].sum()).reset_index()\nbowl_first_team_win = pd.DataFrame(mat.groupby('team1')['bowl_first_team_win'].sum()).reset_index()\nbat_first_team_win = pd.merge(bat_first_team_win, bowl_first_team_win, on=\"team1\")\ntemp2 = pd.DataFrame(mat['team1'].value_counts()).reset_index().rename(columns={'index':'team1','team1':'bat_first'})\ntemp3 = pd.DataFrame(mat['team2'].value_counts()).reset_index().rename(columns={'index':'team1','team2':'bowl_first'})\nbat_first_team_win = pd.merge(bat_first_team_win, temp2, on=\"team1\")\nbat_first_team_win = pd.merge(bat_first_team_win, temp3, on=\"team1\")\nbat_first_team_win['bat_first_lost'] = bat_first_team_win['bat_first'] - bat_first_team_win['bat_first_team_win']\nbat_first_team_win['bowl_first_lost'] = bat_first_team_win['bowl_first'] - bat_first_team_win['bowl_first_team_win']\npal=['#2954EC','#8596D1']\nbat_first_team_win.plot(x=\"team1\",y=[\"bat_first_team_win\",\"bat_first_lost\"], kind=\"bar\", color=pal, stacked=True, figsize=(14,8)).legend(['Won Batting First','Lost Batting First'])\nplt.title(\"Winning Probability While Batting First\", size=12)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Batting First Impact\")","feacffd1":"pal = ['#5F1369','#D479E0']\nbat_first_team_win.plot(x=\"team1\",y=[\"bowl_first_team_win\",\"bowl_first_lost\"], kind=\"bar\", color =pal, stacked=True, figsize=(14,8)).legend(['Won Bowling First','Lost Bowling First'])\nplt.title(\"Winning Probability While Bowling First\", size=12)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Bowling First Impact\")","e91c17ed":"def team_comp(x,y,d,e):\n    a=[x,y]\n    mat_new1 = mat[mat['team1'].isin(a) & mat['team2'].isin(a)][['id', 'season', 'city', 'date', 'team1', 'team2', 'toss_winner',\n       'toss_decision', 'result', 'dl_applied', 'winner', 'win_by_runs',\n       'win_by_wickets', 'player_of_match']]\n    b=[d,e]\n    mat_new2 = mat[mat['team1'].isin(b) & mat['team2'].isin(b)][['id', 'season', 'city', 'date', 'team1', 'team2', 'toss_winner',\n       'toss_decision', 'result', 'dl_applied', 'winner', 'win_by_runs',\n       'win_by_wickets', 'player_of_match']]\n    fig, (ax1,ax2) =plt.subplots(1,2, figsize=(16,6))\n    plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.8, hspace=None)\n    sns.countplot(x='winner', data=mat_new1, ax=ax1)\n    plt.yticks(np.arange(0,20,1))\n    \n    sns.countplot(x='winner', data=mat_new2, ax=ax2)\n    plt.yticks(np.arange(0,20,1))\nteam_comp('MI','CSK','RR','RCB')","736a807a":"def team_comp(x,y,d,e):\n    a=[x,y]\n    mat_new1 = mat[mat['team1'].isin(a) & mat['team2'].isin(a)][['id', 'season', 'city', 'date', 'team1', 'team2', 'toss_winner',\n       'toss_decision', 'result', 'dl_applied', 'winner', 'win_by_runs',\n       'win_by_wickets', 'player_of_match']]\n    b=[d,e]\n    mat_new2 = mat[mat['team1'].isin(b) & mat['team2'].isin(b)][['id', 'season', 'city', 'date', 'team1', 'team2', 'toss_winner',\n       'toss_decision', 'result', 'dl_applied', 'winner', 'win_by_runs',\n       'win_by_wickets', 'player_of_match']]\n    fig, (ax1,ax2) =plt.subplots(1,2, figsize=(16,6))\n    plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.8, hspace=None)\n    sns.countplot(x='season', hue='winner', data=mat_new1, ax=ax1)\n    ax1.set_yticks(np.arange(0,6,1))\n    ax1.set_xlabel('Season')\n    ax1.set_ylabel('Win Count')\n#     ax1.legend(bbox_to_anchor = (0.41,0.52,0.6,0.5))\n    ax1.legend(loc=1)\n    ax1.tick_params(labelsize=10)\n    for tick in ax1.get_xticklabels():\n        tick.set_rotation(90)\n    \n    sns.countplot(x='season', hue='winner', data=mat_new2, ax=ax2)\n    ax2.set_yticks(np.arange(0,6,1))\n    plt.xticks(rotation='vertical')\n    ax2.set_xlabel('Season')\n    ax2.set_ylabel('Win Count')\n    ax2.legend(loc=1)\n    ax2.tick_params(labelsize=10)\n    for tick in ax2.get_xticklabels():\n        tick.set_rotation(90)","b3db9d63":"team_comp('MI','CSK','RR','RCB')","a423739e":"deliv = deliveries\na = mat.rename(columns={'id':'match_id'})\ndeliv = pd.merge(deliv, a[['match_id','season']], on='match_id')\ndeliv['out'] = np.where(pd.isnull(deliv['player_dismissed']),0,1)\ndeliv.head()","97ecda01":"overall_bat = deliv.groupby('batting_team').sum().reset_index()\noverall_bat['runs\/wick'] = (overall_bat['total_runs']\/overall_bat['out']).round(1)\noverall_bat = overall_bat.sort_values(by='runs\/wick', ascending=False)\n\ntemp_overall_bat = deliv.groupby('batting_team').count().reset_index()\ntemp_overall_bat = temp_overall_bat.rename(columns={'ball':'ball_count'})\noverall_bat = pd.merge(overall_bat, temp_overall_bat[['batting_team','ball_count']], on='batting_team')\n\noverall_bat['team_strikerate'] = ((overall_bat['total_runs']\/overall_bat['ball_count'])*100).round()\noverall_bat.head()\n\n\n\noverall_bowl = deliv.groupby('bowling_team').sum().reset_index()\noverall_bowl['runs\/wick'] = (overall_bowl['total_runs']\/overall_bowl['out']).round(1)\noverall_bowl = overall_bowl.sort_values(by='runs\/wick', ascending=False)\n\n\ntemp_overall_bowl = deliv.groupby('bowling_team').count().reset_index()\ntemp_overall_bowl = temp_overall_bowl.rename(columns={'ball':'ball_count'})\noverall_bowl = pd.merge(overall_bowl, temp_overall_bowl[['bowling_team','ball_count']], on='bowling_team')\n\n\noverall_bowl['team_strikerate'] = ((overall_bowl['total_runs']\/overall_bowl['ball_count'])*100).round()\noverall_bowl.head()","004006c2":"fig, ([ax1,ax2],[ax3,ax4]) =plt.subplots(2,2, figsize=(14,8))\npal = ['#1F83F7']\nsns.barplot(y='runs\/wick',x='batting_team', data=overall_bat, palette=pal, ax=ax1)\ninitialx=0\nax1.set_xlabel('Teams')\nax1.set_ylabel('Batting Average')\nax1.set_yticks(np.arange(18,34,1))\nax1.set_ylim([18,34])\nplt.tight_layout()\nfor p in ax1.patches:\n    ax1.annotate(str(p.get_height()), (p.get_x() * 1.015, p.get_height() * 1.005), size=10)\n    \nsns.barplot(y='team_strikerate',x='batting_team', data=overall_bat.sort_values(by='team_strikerate', ascending=False), palette=pal, ax=ax2)\ninitialx=0\nax2.set_xlabel('Teams')\nax2.set_ylabel('Batting Strike Rate')\nax2.set_yticks(np.arange(110,140,2))\nax2.set_ylim([110,140])\nplt.tight_layout()\nfor p in ax2.patches:\n    ax2.annotate(str(p.get_height()), (p.get_x() * 1.015, p.get_height() * 1.005), size=10)\n    \nsns.barplot(y='runs\/wick',x='bowling_team', data=overall_bowl.sort_values(by='runs\/wick', ascending=False), palette=pal, ax=ax3)\ninitialx=0\nax3.set_xlabel('Teams')\nax3.set_ylabel('Bowling Average')\nax3.set_yticks(np.arange(18,36,1))\nax3.set_ylim([18,36])\nplt.tight_layout()\nfor p in ax3.patches:\n    ax3.annotate(str(p.get_height()), (p.get_x() * 1.015, p.get_height() * 1.005), size=10)\n    \nsns.barplot(y='team_strikerate',x='bowling_team', data=overall_bowl.sort_values(by='team_strikerate', ascending=False), palette=pal, ax=ax4)\ninitialx=0\nax4.set_xlabel('Teams')\nax4.set_ylabel('Bowling Strike Rate')\nax4.set_yticks(np.arange(116,140,2))\nax4.set_ylim([115,148])\nplt.tight_layout()\nfor p in ax4.patches:\n    ax4.annotate(str(p.get_height()), (p.get_x() * 1.015, p.get_height() * 1.005), size=10)","c08c47da":"mat_new1 = pd.DataFrame(mat['team1'])\nmat_new2 = pd.DataFrame(mat['team2']).rename(columns={'team2':'team1'})\nmat_new1 = pd.concat([mat_new1, mat_new2])\nmat_count = pd.DataFrame(mat_new1['team1'].value_counts()).reset_index().rename(columns={'index':'bowling_team','team1':'match_count'})\noverall_bowl = pd.merge(overall_bowl, mat_count, on='bowling_team')\n\noverall_bowl['wideruns_game'] = (overall_bowl['wide_runs']\/overall_bowl['match_count']).round(1)\noverall_bowl['byeruns_game'] = (overall_bowl['bye_runs']\/overall_bowl['match_count']).round(2)\noverall_bowl['legbyeruns_game'] = (overall_bowl['legbye_runs']\/overall_bowl['match_count']).round(2)\noverall_bowl['noballruns_game'] = (overall_bowl['noball_runs']\/overall_bowl['match_count']).round(2)\noverall_bowl['extraruns_game'] = (overall_bowl['extra_runs']\/overall_bowl['match_count']).round(1)\noverall_bowl['wideno_game'] = ((overall_bowl['wide_runs']+overall_bowl['noball_runs'])\/(overall_bowl['match_count'])).round(1)\noverall_bowl","29881f72":"fig, ([ax1,ax2],[ax3,ax4]) =plt.subplots(2,2, figsize=(14,8))\nsns.barplot(y='wideruns_game',x='bowling_team', data=overall_bowl.sort_values(by='wideruns_game', ascending=False), palette='viridis', ax=ax1)\ninitialx=0\nax1.set_xlabel('Teams')\nax1.set_ylabel('Wide Runs\/Game')\nplt.tight_layout()\nfor p in ax1.patches:\n    ax1.annotate(str(p.get_height()), (p.get_x() * 1.015, p.get_height() * 1.005), size=10)\n    \nsns.barplot(y='noballruns_game',x='bowling_team', data=overall_bowl.sort_values(by='noballruns_game', ascending=False), palette='viridis', ax=ax2)\ninitialx=0\nax2.set_xlabel('Teams')\nax2.set_ylabel('No Ball Runs\/Game')\nplt.tight_layout()\nfor p in ax2.patches:\n    ax2.annotate(str(p.get_height()), (p.get_x() * 1.015, p.get_height() * 1.005), size=10)\n    \nsns.barplot(y='wideno_game',x='bowling_team', data=overall_bowl.sort_values(by='wideno_game', ascending=False), palette='viridis', ax=ax3)\ninitialx=0\nax3.set_xlabel('Teams')\nax3.set_ylabel('Wide + No Ball Extras')\nplt.tight_layout()\nfor p in ax3.patches:\n    ax3.annotate(str(p.get_height()), (p.get_x() * 1.015, p.get_height() * 1.005), size=10)\n    \nsns.barplot(y='extraruns_game',x='bowling_team', data=overall_bowl.sort_values(by='extraruns_game', ascending=False), palette='viridis', ax=ax4)\ninitialx=0\nax4.set_xlabel('Teams')\nax4.set_ylabel('Total Extra Runs\/Game')\nplt.tight_layout()\nfor p in ax4.patches:\n    ax4.annotate(str(p.get_height()), (p.get_x() * 1.015, p.get_height() * 1.005), size=10)","dd18abaf":"overall_seasonbat = deliv.groupby('season').sum().reset_index()\noverall_seasonbat['runs\/wick'] = (overall_seasonbat['total_runs']\/overall_seasonbat['out']).round(1)\n\ntemp_overall_season = deliv.groupby('season').count().reset_index()\ntemp_overall_season = temp_overall_season.rename(columns={'ball':'ball_count'})\noverall_seasonbat = pd.merge(overall_seasonbat, temp_overall_season[['season','ball_count']], on='season')\noverall_seasonbat['team_strikerate'] = ((overall_seasonbat['total_runs']\/overall_seasonbat['ball_count'])*100).round()\n\nfig, (ax1,ax2) =plt.subplots(1,2, figsize=(18,8))\nsns.lineplot(y='runs\/wick',x='season', data=overall_seasonbat, color='r', ax=ax1)\nplt.subplots_adjust(left=None, bottom=None, right=1, top=None, wspace=None, hspace=None)\ninitialx=0\nfig.suptitle('Season Wise Batting Average and Batting StrikeRate')\nax1.set_xlabel('Season')\nax1.set_ylabel('Batting Average')\n# plt.tight_layout()\nax1.set_yticks(np.arange(20,32,1))\nax1.set_xticks(np.arange(2008,2020,1))\nfor tick in ax1.get_xticklabels():\n    tick.set_rotation(45)\n    \nsns.lineplot(y='team_strikerate',x='season', data=overall_seasonbat, palette='viridis', ax=ax2)\ninitialx=0\nax2.set_xlabel('Season')\nax2.set_ylabel('Batting StrikeRate')\nax2.set_yticks(np.arange(120,146,1))\nax2.set_xticks(np.arange(2008,2020,1))\n# plt.tight_layout()\nfor tick in ax2.get_xticklabels():\n    tick.set_rotation(45)","d354286c":"overall_batseason = deliv.groupby(['season','batting_team']).sum().reset_index()\noverall_batseason['runs\/wick'] = (overall_batseason['total_runs']\/overall_batseason['out']).round(1)\n\ntemp_overall_batseason = deliv.groupby(['season','batting_team']).count().reset_index()\ntemp_overall_batseason = temp_overall_batseason.rename(columns={'ball':'ball_count'})\noverall_batseason = pd.merge(overall_batseason, temp_overall_batseason[['batting_team','ball_count']], on='batting_team')\noverall_batseason['team_strikerate'] = ((overall_batseason['total_runs']\/overall_batseason['ball_count'])*100).round()\n\n\n\nfig, (ax1,ax2) =plt.subplots(2,1, figsize=(18,15))\npal=['#E8F71F','#7F0EF5','#6F0011','#260635','#839192','#0B208D','#F1220D','#09BBF2','#48C9B0','#1C2833','#FF8300','#28FF00','#AA7F98',]\nsns.lineplot(x='season', y='runs\/wick', hue='batting_team', palette=pal, data=overall_batseason, ax=ax1)\nax1.legend(title = 'Teams', loc = 1, fontsize = 15.5)\nax1.set_xlim([2008,2022])\nax1.set_xlabel('Season')\nax1.set_ylabel('Batting Average')\n\nsns.lineplot(x='season', y='team_strikerate', hue='batting_team', palette=pal, ci=None, data=overall_batseason, ax=ax2)\nax2.legend(title = 'Teams', loc = 1, fontsize = 15.5)\nax2.set_xlim([2008,2022])\nax2.set_xlabel('Season')\nax2.set_ylabel('Batting StrikeRate')","fb9004eb":"batsman = deliv.groupby('batsman').sum().reset_index()\ntemp10 = deliv.groupby('batsman').count().reset_index().rename(columns={'ball':'ball_count'})\nbatsman = pd.merge(batsman, temp10[['batsman','ball_count']], on='batsman')\n# batsman['batting_SR'] = ((batsman['batsman_runs']\/batsman['ball_count'])*100).round(2)\ntemp11 = pd.DataFrame(deliv['player_dismissed'].value_counts()).reset_index().rename(columns={'index':'batsman','player_dismissed':'counts'})\nbatsman = pd.merge(batsman, temp11, on='batsman').rename(columns={'counts':'bat_out'})\nbatsman['batting_average'] = (batsman['batsman_runs']\/batsman['bat_out']).round(2)\ntempalls = deliv.groupby('batsman')['batsman_runs'].agg(lambda x: (x==4).sum()).reset_index().rename(columns={'batsman_runs':'4s'})\ntemp6s = deliv.groupby('batsman')['batsman_runs'].agg(lambda x: (x==6).sum()).reset_index().rename(columns={'batsman_runs':'6s'})\ntemp1s = deliv.groupby('batsman')['batsman_runs'].agg(lambda x: (x==1).sum()).reset_index().rename(columns={'batsman_runs':'1s'})\ntemp2s = deliv.groupby('batsman')['batsman_runs'].agg(lambda x: (x==2).sum()).reset_index().rename(columns={'batsman_runs':'2s'})\ntemp3s = deliv.groupby('batsman')['batsman_runs'].agg(lambda x: (x==3).sum()).reset_index().rename(columns={'batsman_runs':'3s'})\ntemp5s = deliv.groupby('batsman')['batsman_runs'].agg(lambda x: (x==5).sum()).reset_index().rename(columns={'batsman_runs':'5s'})\ntemp7s = deliv.groupby('batsman')['batsman_runs'].agg(lambda x: (x==7).sum()).reset_index().rename(columns={'batsman_runs':'7s'})\ntemp0s = deliv.groupby('batsman')['batsman_runs'].agg(lambda x: (x==0).sum()).reset_index().rename(columns={'batsman_runs':'0s'})\ntempalls = pd.merge(tempalls, temp6s, on='batsman')\ntempalls = pd.merge(tempalls, temp1s, on='batsman')\ntempalls = pd.merge(tempalls, temp2s, on='batsman')\ntempalls = pd.merge(tempalls, temp3s, on='batsman')\ntempalls = pd.merge(tempalls, temp5s, on='batsman')\ntempalls = pd.merge(tempalls, temp7s, on='batsman')\ntempalls = pd.merge(tempalls, temp0s, on='batsman')\n\nbatsman = pd.merge(batsman, tempalls, on='batsman')\nbatsman = batsman[['batsman','wide_runs', 'bye_runs', 'legbye_runs', 'noball_runs', 'penalty_runs',\n       'batsman_runs', 'extra_runs', 'total_runs', 'ball_count','bat_out', 'batting_average', '4s', '6s',\n       '1s', '2s', '3s', '5s', '7s', '0s']]\nbatsman['actual_ballsfaced'] = batsman['ball_count'] - batsman['wide_runs']\nbatsman['dots'] = batsman['actual_ballsfaced'] - (batsman['4s'] + batsman['6s'] + batsman['1s'] + batsman['2s'] + batsman['3s']\n                                           + batsman['5s'] + batsman['7s']\n                                           + batsman['legbye_runs'] + batsman['bye_runs'])\nbatsman['batting_SR'] = ((batsman['batsman_runs']\/(batsman['ball_count'] - batsman['wide_runs']))*100).round(2)\nbatsman['dotper'] = ((batsman['dots']\/batsman['actual_ballsfaced'])*100).round(2)\nbatsman['4sper'] = ((batsman['4s']\/batsman['actual_ballsfaced'])*100).round(2)\nbatsman['6sper'] = ((batsman['6s']\/batsman['actual_ballsfaced'])*100).round(2)\nbatsman.head()","367ae858":"fig, (ax1,ax2) =plt.subplots(1,2, figsize=(14,7))\nsns.regplot(x='batting_SR', y='dotper', data=batsman, color='red', ax=ax1)\nplt.subplots_adjust(left=None, bottom=None, right=1, top=None, wspace=None, hspace=1)\nax1.legend(title = 'Dot Ball % vs Batting SR', loc = 1, fontsize = 15.5)\nax1.set_xlabel('Batting SR')\nax1.set_ylabel('Dot Ball Percentage')\n\nsns.regplot(x='batting_SR', y='batting_average', data=batsman, color='orange', ax=ax2)\nax2.legend(title = 'Batting Average vs Batting SR', loc = 0, fontsize = 15.5)\nax2.set_xlabel('Batting SR')\nax2.set_ylabel('Batting Average')","6fad1ace":"fig, ([ax1,ax2],[ax3,ax4], [ax5,ax6], [ax7,ax8]) =plt.subplots(4,2, figsize=(14,18))\nsns.barplot(y='batsman',x='batsman_runs', data=batsman\n            .sort_values(by='batsman_runs', ascending=False)[:10], palette='viridis', ax=ax1)\ninitialx=0\nax1.set_xlabel('Runs')\nax1.set_ylabel('Batsman')\nax1.tick_params(axis=\"y\", labelsize=10)\nax1.set_xlim([4000,5600])\nax1.set_title('Top Run Scorers', size=12)\nplt.tight_layout()\nfor p in ax1.patches:\n    ax1.text(p.get_width()*1.005,initialx+p.get_height()\/5,'{:1.0f}'.format(p.get_width()),size=10)\n    initialx+=1\n    \n\nsns.barplot(y='batsman',x='batting_average', data=batsman[batsman['batsman_runs']>500]\n            .sort_values(by='batting_average', ascending=False)[:10], palette='viridis', ax=ax2)\ninitialx=0\nax2.set_xlabel('Batting Average')\nax2.set_ylabel('Batsman')\nax2.tick_params(axis=\"y\", labelsize=10)\nax2.set_xlim([30,50])\nax2.set_title('Batting Average (Min 500 Runs)', size=12)\nplt.tight_layout()\nfor p in ax2.patches:\n    ax2.text(p.get_width()*1.005,initialx+p.get_height()\/5,'{:1.0f}'.format(p.get_width()),size=10)\n    initialx+=1\n\n    \n    \nsns.barplot(y='batsman',x='batting_SR', data=batsman[batsman['batsman_runs']>500]\n            .sort_values(by='batting_SR', ascending=False)[:10], palette='viridis', ax=ax3)\ninitialx=0\nax3.set_xlabel('Batting Strike Rate')\nax3.set_ylabel('Batsman')\nax3.tick_params(axis=\"y\", labelsize=10)\nax3.set_xlim([145,200])\nax3.set_title('Batting SR (Min 500 Runs)', size=12)\nplt.tight_layout()\nfor p in ax3.patches:\n    ax3.text(p.get_width()*1.005,initialx+p.get_height()\/5,'{:1.0f}'.format(p.get_width()),size=10)\n    initialx+=1\n    \nsns.barplot(y='batsman',x='dotper', data=batsman[batsman['batsman_runs']>500]\n            .sort_values(by='dotper', ascending=False)[:10], palette='viridis', ax=ax4)\ninitialx=0\nax4.set_xlabel('Dot Ball %')\nax4.set_ylabel('Batsman')\nax4.tick_params(axis=\"y\", labelsize=10)\nax4.set_xlim([35,50])\nax4.set_title('Dot Ball % (Min 500 Runs)', size=12)\nplt.tight_layout()\nfor p in ax4.patches:\n    ax4.text(p.get_width()*1.005,initialx+p.get_height()\/5,'{:1.0f}'.format(p.get_width()),size=10)\n    initialx+=1\n    \nsns.barplot(y='batsman',x='4s', data=batsman\n            .sort_values(by='4s', ascending=False)[:10], palette='viridis', ax=ax5)\ninitialx=0\nax5.set_xlabel('Fours')\nax5.set_ylabel('Batsman')\nax5.tick_params(axis=\"y\", labelsize=10)\nax5.set_xlim([350,550])\nax5.set_title('Number of Fours', size=12)\nplt.tight_layout()\nfor p in ax5.patches:\n    ax5.text(p.get_width()*1.005,initialx+p.get_height()\/5,'{:1.0f}'.format(p.get_width()),size=10)\n    initialx+=1\n    \nsns.barplot(y='batsman',x='6s', data=batsman\n            .sort_values(by='6s', ascending=False)[:10], palette='viridis', ax=ax6)\ninitialx=0\nax6.set_xlabel('Sixes')\nax6.set_ylabel('Batsman')\nax6.tick_params(axis=\"y\", labelsize=10)\nax6.set_xlim([150,340])\nax6.set_title('Number of Sixes', size=12)\nplt.tight_layout()\nfor p in ax6.patches:\n    ax6.text(p.get_width()*1.005,initialx+p.get_height()\/5,'{:1.0f}'.format(p.get_width()),size=10)\n    initialx+=1\n\nsns.barplot(y='batsman',x='4sper', data=batsman[batsman['batsman_runs']>500]\n            .sort_values(by='4sper', ascending=False)[:10], palette='viridis', ax=ax7)\ninitialx=0\nax7.set_xlabel('4s %')\nax7.set_ylabel('Batsman')\nax7.tick_params(axis=\"y\", labelsize=10)\nax7.set_xlim([12,25])\nax7.set_title('Fours Percentage (Min 500 Runs, Based on No. of Balls Faced)', size=12)\nplt.tight_layout()\nfor p in ax7.patches:\n    ax7.text(p.get_width()*1.005,initialx+p.get_height()\/5,'{:1.0f}'.format(p.get_width()),size=10)\n    initialx+=1\n\nsns.barplot(y='batsman',x='6sper', data=batsman[batsman['batsman_runs']>500]\n            .sort_values(by='6sper', ascending=False)[:10], palette='viridis', ax=ax8)\ninitialx=0\nax8.set_xlabel('6s %')\nax8.set_ylabel('Batsman')\nax8.tick_params(axis=\"y\", labelsize=10)\nax8.set_xlim([6,20])\nax8.set_title('Sixes Percentage (Min 500 Runs, Based on No. of Balls Faced)', size=12)\nplt.tight_layout()\nfor p in ax8.patches:\n    ax8.text(p.get_width()*1.005,initialx+p.get_height()\/5,'{:1.0f}'.format(p.get_width()),size=10)\n    initialx+=1","7d3894ef":"CSK, KKR and MI have a higher probability of winning the game after winning the toss","b8f26903":"Chris Gayle(WI) and AB de Villiers have won the highest number of Man of the Match Awards and thus are high impact players. If we go through the top 20 MOM winners list, it's easy to observe that it's packed mostly with batsmen followed by allrounder and bowlers. In fact, there are only 2 bowlers (Amit Mishra and Sunil Narine) in this top 20 list. This could be because IPL games are generally heavily tilted towards the batsmen.","d3436093":"RCB has the highest number of wins by 10 wickets. They won in 2010, 2015 and 2018. Unsuprsingly, in 2 of those games, the MOM award went to bowlers (Varun Aaron and Umesh Yadav)","227d5466":"Biggest win by run difference was MI vs DD in 2017 when MI won the game by 146 runs on Delhi's home turf. The MOM award went to Lendl Simmons (WI) who was also instrumental in the win for WI against India in the semi finals of the 2016 T20 WC scoring 82 (51)","1aa85c4a":"At an overall level, toss decisions haven't had much of an impact on the outcome of the game","04350f60":"Teams chasing have a slightly higher probability of winning the game","d81fa949":"Mumbai might be a popular city but Eden Gardens(Kolkata) is the most popular ground followed by Wankhede Stadium (Mumbai) and M Chinnaswamy Stadim(Bengaluru) which also means that the games in Mumbai are not purely restricted to the Wankhede stadium.","4dfb8fcb":"The answer to the question asked above is right here. Apparently, even from 2008-2015, the winning percentage of teams chasing wasn't that high.","85f45d93":"**Shortened the team names and replaced Delhi Daredevils everywhere with Delhi Capitals**","994a01ca":"This is the teamwise batting\/bowling preference. CSK is among the few teams that prefer batting first after winning the toss whereas most other teams like KKR, MI, KXIP, DCAP, RCB tend to bowl first.","efe8f20c":"CSK has the highest win percentage in IPL closely followed by MI. Delhi Capitals, KXIP and RCB have struggled the most.","b45708ab":"S Ravi, HDPK Dharmasena and C Shamshuddin are the most popular umpires. We also see plenty of foreign umpires in this list pointing towards the inclusive nature of the league even among umpires.","5cbb0d6f":"Team H2H Comparator","4662a9e3":"MI, KKR and CSK have won the highest number of games","913ed84d":"**Mumbai, Bengaluru and Kolkata are the most popular cities for IPL games in India**","d1c3a10d":"MI, KKR and CSK seem to have a higher success rate of winning the toss","aef9f4e1":"**Created a simple barplot function**","db0c59a8":"We can clearly see that from 2016 onwards, teams are generally preferring chasing. Could it be because there was a higher win percentage while chasing from 2008-2015? We'll see that later."}}