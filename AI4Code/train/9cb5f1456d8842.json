{"cell_type":{"f576e6bc":"code","b92e482a":"code","0c73dce2":"code","94316a19":"code","d53946b1":"code","1a1fa89f":"code","02a219f3":"code","195e1dc8":"markdown"},"source":{"f576e6bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b92e482a":"df_metadata = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/building_metadata.csv\") \ndf_train_bd = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/train.csv\")\ndf_test_bd = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/test.csv\")\ndf_train_wt = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/weather_train.csv\")\ndf_test_wt = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/weather_test.csv\")\n","0c73dce2":"print(\"info = \")\ndf_train_bd.info()\nprint(\"rows = \", len(df_train_bd))\nprint(\"columns = \", len(df_train_bd.columns))\nprint(df_train_bd.shape)\nprint(df_train_wt.shape)","94316a19":"print(df_train_bd.columns)","d53946b1":"np.sort(df_train_bd[\"building_id\"].unique())","1a1fa89f":"df_train_pre = pd.merge(\n    df_train_bd, df_metadata, on = [\"building_id\"])\ndf_train = pd.merge(df_train_pre, df_train_wt, on = [\"site_id\", \"timestamp\"])\nprint(df_train.shape)","02a219f3":"df_train.head(10)","195e1dc8":"# \u30c7\u30fc\u30bf\u3092\u773a\u3081\u3066\u307f\u308b\n\n#### pandas\u3092\u6d3b\u7528  \n#### df.info, df.columns, df.unique...etc\n"}}