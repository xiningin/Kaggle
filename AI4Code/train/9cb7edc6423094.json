{"cell_type":{"2751c4a6":"code","be88ead3":"code","e4f81a2b":"code","c67e4e62":"code","8b6e2349":"code","c075fd62":"code","6c5f88df":"code","47ac76c3":"code","154969e2":"code","4b862fcd":"code","e71d6fce":"code","7b0155be":"code","909d17d4":"code","14d67615":"code","2cdfa25d":"code","21ff243e":"code","cab1de45":"code","ac8d4141":"code","f1ee6ca6":"code","e2dbea4b":"code","863e26f1":"markdown","0b5be23c":"markdown","37d9eeac":"markdown"},"source":{"2751c4a6":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport seaborn as sns","be88ead3":"ds = pd.read_csv(\"..\/input\/credit-risk\/original.csv\")","e4f81a2b":"ds.head()","c67e4e62":"# Checking for null values\nds.isnull().sum()","8b6e2349":"# Filling Null Values\nds['age'].fillna(int(ds['age'].mean()), inplace=True)","c075fd62":"ds.isnull().sum()","6c5f88df":"# Dropping these items beacuse they do not serve any purpose and have null values\nds.drop(columns =['clientid'],axis =1,inplace=True)","47ac76c3":"ds.head()","154969e2":"ds.shape","4b862fcd":"# Dropping Duplicate Values\nds.drop_duplicates()","e71d6fce":"# Dependent and Independent Variables\nX = ds.iloc[:,:-1] # Independent\ny =ds.iloc[:,-1] # Dependent","7b0155be":"# Feature Importance illustration using random forest\nfrom sklearn.ensemble import RandomForestClassifier\nforest_clf = RandomForestClassifier(n_estimators=100)\nforest_clf.fit(X, y)\n\nimportances = forest_clf.feature_importances_\nindices = np.argsort(importances)[::-1]\n\nplt.figure(figsize=(7,7))\nplt.bar(range(len(indices)),importances[indices])\nplt.xticks(range(len(indices)), indices)\nplt.title(\"Feature importance\")\nplt.xlabel('Index of a feature')\nplt.ylabel('importance')\nplt.show()","909d17d4":"# Train test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","14d67615":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","2cdfa25d":"# Using Naive Baye\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","21ff243e":"#Using Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","cab1de45":"# Using K Nearest Neighbors\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","ac8d4141":"# Using Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","f1ee6ca6":"# Random Forest \nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","e2dbea4b":"# Support vector Classifier\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","863e26f1":"## Model Selection with accuracy score and confusion matrix","0b5be23c":"## Decision Trees give us 98.8% accurate results for this dataset","37d9eeac":"## Task -  Predict whether a particular customer will repay the loan or not\n### Dataset - https:\/\/www.kaggle.com\/upadorprofzs\/credit-risk"}}