{"cell_type":{"d2ef43fc":"code","afcc28fd":"code","9c53e192":"code","9203a688":"code","ed6db2f3":"code","36eac3b6":"code","a6e3d51e":"code","d0906d65":"code","2e76f43e":"code","eafd926a":"code","6447e6e9":"code","8fd59df4":"code","1d961618":"code","72d291f0":"code","e4591a35":"code","aa25c994":"code","33008d35":"code","94802ed2":"code","a1199d0b":"code","ec122faf":"code","d79e4a0a":"code","fcd108df":"code","6f06d25d":"code","09187975":"code","d182a328":"markdown","22b9f7cc":"markdown","b44a073b":"markdown","e2c063d8":"markdown","eef1f62f":"markdown","6c900210":"markdown","0e5b83fa":"markdown","b7d16544":"markdown","1cabbced":"markdown","40860e4f":"markdown","90d57b5f":"markdown","017e9ba0":"markdown","8f0e1031":"markdown","c3bb3e95":"markdown","d4a605d0":"markdown","126672a6":"markdown","eaeec7a9":"markdown","835baeb7":"markdown","9f9c52bd":"markdown","ccc0bf02":"markdown"},"source":{"d2ef43fc":"import numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport albumentations as alb\nimport os\nfrom IPython.display import display, HTML\nfrom tqdm.notebook import tqdm\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","afcc28fd":"train_df = pd.read_csv(\"..\/input\/happy-whale-and-dolphin\/train.csv\")\ntrain_df.head().style.set_table_styles(\n   [{\n       'selector': 'th',\n       'props': [('background-color', '#add8e6')]\n   }])","9c53e192":"train_df.shape","9203a688":"print (\"NUMBER OF UNIQUE SPECIES = \" , train_df['species'].nunique())","ed6db2f3":"print(\"SPECIES NAMES: \" ,list(train_df[\"species\"].unique()))","36eac3b6":"train_df['individual_id'].nunique()","a6e3d51e":"killer_whale = []\nkiler_whale = []\nbottlenose_dolpin = []\nbottlenose_dolphin = []\nfor i in tqdm(range(train_df.shape[0])):\n    if train_df.species[i] == 'killer_whale':\n        killer_whale.append(train_df.individual_id[i])\n    elif train_df.species[i] == 'kiler_whale':\n        kiler_whale.append(train_df.individual_id[i])\n    elif train_df.species[i] == 'bottlenose_dolphin':\n        bottlenose_dolphin.append(train_df.individual_id[i])\n    elif train_df.species[i] == 'bottlenose_dolpin':\n        bottlenose_dolpin.append(train_df.individual_id[i])","d0906d65":"kw_set = set.intersection(set(killer_whale), set(kiler_whale))\nbnd_set = set.intersection(set(bottlenose_dolphin), set(bottlenose_dolpin))\nprint(kw_set , bnd_set)","2e76f43e":"for i in tqdm(range(train_df.shape[0])):\n    if train_df.species[i] == 'kiler_whale':\n        train_df.species[i] = 'killer_whale'\n    elif train_df.species[i] == 'bottlenose_dolpin':\n        train_df.species[i] = 'bottlenose_dolphin'","eafd926a":"train_df['species'].nunique()","6447e6e9":"whale_species = []\ndolphin_species = []\nfor i in tqdm(range(train_df.shape[0])):\n    if ((\"whale\" in train_df['species'][i]) or ('beluga' in train_df['species'][i]) or ('globis' in train_df['species'][i])):\n        if train_df.species[i] not in whale_species: \n            whale_species.append(train_df['species'][i])\n        \n    elif 'dolphin' in train_df.species[i]:\n        if train_df.species[i] not in dolphin_species:\n            dolphin_species.append(train_df['species'][i])    \n    else:\n        continue\n        \nclass_ = ['whale' , 'dolphin']\nfig = px.bar(x=[len(whale_species) , len(dolphin_species)] , y=class_ , color = class_,  title = 'type')\nfig.show()","8fd59df4":"whale_species","1d961618":"dolphin_species","72d291f0":"whale_counter = 0\ndolphin_counter = 0\nfor i in tqdm(range(train_df.shape[0])):\n    if ((\"whale\" in train_df['species'][i]) or ('beluga' in train_df['species'][i]) or ('globis' in train_df['species'][i])):\n        whale_counter += 1\n    else :\n        dolphin_counter += 1\n        \nclass_ = ['whale' , 'dolphin']\nfig = px.bar(x=[whale_counter , dolphin_counter] , y=class_ , color = class_,  title = 'type')\nfig.show()","e4591a35":"data = train_df.species.value_counts().reset_index()\nfig = px.bar(data, x='index', y='species', color='species',title='Species', text_auto=True)\nfig.show()","aa25c994":"print(\"Top 10 individual_id\")\ntrain_df.individual_id.value_counts().head(10)","33008d35":"temp = train_df.groupby([\"species\"])[\"individual_id\"].nunique()\ndf = pd.DataFrame({'Species': temp.index,\n                   'Unique ID Count': temp.values\n                  })\ndf = df.sort_values(['Unique ID Count'], ascending=False)\nplt.figure(figsize = (12,6))\nplt.title('Species distribution - Individual IDs per each species - train dataset')\nsns.set_color_codes(\"pastel\")\ns = sns.barplot(x = 'Species', y=\"Unique ID Count\", data=df)\ns.set_xticklabels(s.get_xticklabels(),rotation=90)\nlocs, labels = plt.xticks()\nplt.show()\n","94802ed2":"train_jpg_directory = '..\/input\/happy-whale-and-dolphin\/train_images'\ntest_jpg_directory = '..\/input\/happy-whale-and-dolphin\/test_images'\n\n#function to retrieve image paths from directories\n\ndef getImgPaths(path):\n    image_names = []\n    for dirname, _, filenames in os.walk(path):\n        for filename in tqdm(filenames):\n            fullpath = os.path.join(dirname, filename)\n            image_names.append(fullpath)\n    return image_names\n\n\ntrain_images_path = getImgPaths(train_jpg_directory)\ntest_images_path = getImgPaths(test_jpg_directory)","a1199d0b":"print(f\"Number of train images: {len(train_images_path)}\\n\")\nprint(f\"Number of test images: {len(test_images_path)}\\n\")","ec122faf":"def display_(images_paths, rows, cols,title):\n    \n    figure, ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,8))  # define the subplots\n    plt.suptitle(title, fontsize=20)                                 # Give the title to the plot\n    for ind,image_path in enumerate(images_paths):                   # begin the for loop to read all the images one by one\n        image = cv2.imread(image_path)                               # read each mage using open cv\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)               # Open CV  reads an image in BGR format. So, we need to convert it to RGB\n        try:                                                         # try except just for good measure\n            ax.ravel()[ind].imshow(image)                           \n            ax.ravel()[ind].set_axis_off()\n        except:\n            continue\n    plt.show()","d79e4a0a":"#Visualizing Train images\ndisplay_(train_images_path[100:125], 5, 5,\"Train images\")","fcd108df":"#Visualizing Test Images\ndisplay_(test_images_path[0:25], 5, 5,\"Test images\")","6f06d25d":"counter = 0\ncmp_list = []\npth_lst = []\nfor i in range(train_df.shape[0]):\n    if train_df.species[i] not in cmp_list:\n        cmp_list.append(train_df.species[i])\n        img_path = train_jpg_directory + '\/' + train_df.image[i]\n        pth_lst.append(img_path)\n        counter += 1\n        if counter == 28:\n            break","09187975":"fig,ax = plt.subplots(4,7,figsize = (20,14))\ncounter = 0\nfor ind, img_path in enumerate(pth_lst):\n    name = cmp_list[counter]\n    counter+=1\n    img = cv2.imread(img_path)                               # read each mage using open cv\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)               # Open CV  reads an image in BGR format. So, we need to convert it to RGB\n    ax.ravel()[ind].imshow(img)                           \n    ax.ravel()[ind].set_axis_off()\n    ax.ravel()[ind].set_title(name)\n            \nplt.show()","d182a328":"<h4> That looks a bit unintuitive. Let's take a look at  a prettier version. <\/h4>","22b9f7cc":"As it is clearly visible, 'killer_whale' and 'kiler_whale' are duplicates and so are 'bottlenose_dolphin' and 'bottlenose_dolpin'. \nI think it is safe to assume that we can consider them as just spelling errors and we can merge those two species. But, it can casue us some troubles if there are overlaps between individual IDs as well. Lets find out if we have some overlapping IDs.","b44a073b":"<h1> <a href = \"https:\/\/www.kaggle.com\/c\/happy-whale-and-dolphin\/overview\"> Happywhale - Whale and Dolphin Identification <\/a> <\/h1>\n\n<h4> Hi There <\/h4>\n<p> Here I have tried to understand the data and try out multiple augmentation techniques for this competition. I will continue adding newer things to this notebook as time goes on. I hope you enjoy! <\/p>\n<b> HAPPY WHALING !!<\/b>","e2c063d8":"Let's check a bit more from the individual_id column. Let's see who is the most popular among all the fish in the sea :P","eef1f62f":"<h2> What do we have to do in this competition ?? <\/h2>\n\n![Untitled 11.png](attachment:e926d59f-f417-4c75-8b2c-1c91dc189d28.png)\n\n<h4>Each one of us has different names. And so do dolphins and whales. Scientists use these to identify and track them. We humans don't speak the language of whales and dolphins. So, we use technology to identify them.<b> In this competition we have to match the pictures of whales and dolphins to their names. <\/b><\/h4>","6c900210":"![Screenshot from 2022-02-03 12-35-18.png](attachment:0925117c-f1ea-43f7-9f33-e7301904edde.png)","0e5b83fa":"So, we have <ul>\n    <li><h3> 10 species of dolphins <\/h3> <\/li>\n    <li><h3>18 species of whales<\/h3><\/li>\n    <\/ul>","b7d16544":"<h3> Let's see of there are any overlaps <\/h3>\n<ul>\n    <li> First we will convert each list to a set <\/li>\n    <li> Then we will find intersection between these sets<\/li>\n    <\/ul>","1cabbced":"## Let's have a look at pics from each species\n\n","40860e4f":"Let's see how many individual ids are there per class","90d57b5f":"<h2> Let's see how many unique species are there and what they are <\/h2>","017e9ba0":"## Enough texts. Let's take a look at our whales and dolphins. We will create (steal from @RUCHI_BHATIA) a function for this.","8f0e1031":"<h3> OBSERVATIONS <\/h3>\n<ul>\n    <li>There are lot less dolphin pics than whale pics <\/li>\n    <li> All the dolphin pics belong to mainly 2 species <ul>\n        <li> Bottlenose Dolphin <\/li>\n        <li> Dusky Dolphin <\/li><\/ul><\/li>\n    <\/ul>\n    \n","c3bb3e95":"<h3> Importing Libraries <\/h3>","d4a605d0":"## Yikes\nThe images are of different sizes and different everything. We will maybe have to use some <b> BBox <\/b>tehcniques to increase the performance of our models.","126672a6":"<h3> Good News !! <\/h3>\n<p> There are no weird overlaps. It's just a small spelling error. Phew <\/p>\n<p> So, now we can just merge these species and remove this error <\/p>","eaeec7a9":"So, now we should have only 28 unique species","835baeb7":"<h3>How many types of whales and how many types of dolphins do we have ? <\/h3>","9f9c52bd":"P.S.\n<p>After writing this part of the code, I found <a href=\"https:\/\/www.kaggle.com\/c\/happy-whale-and-dolphin\/discussion\/304633\">this discussion here<\/a> that discusses on this <\/p>","ccc0bf02":"<h3> How may whales and how many dolphins do we have? <\/h3>"}}