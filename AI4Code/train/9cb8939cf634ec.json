{"cell_type":{"cd3fa18e":"code","571bf59b":"code","a42afacf":"code","e0ab49f6":"code","44379443":"code","6a561c74":"code","d4c07021":"code","6ce32cc9":"code","86823f9c":"code","78442bab":"code","147b29fa":"code","410d3d86":"code","e8b3f19a":"code","365465a6":"code","9e9e58e8":"code","0c6a8670":"code","d4e902ec":"code","25bfd6c6":"code","23cf8e07":"code","9e088b15":"code","7f431e00":"code","4f34f2b1":"code","5b949c06":"code","3054a4bf":"code","72e7b4f8":"code","bdd398c4":"code","26a24a5b":"code","03ed8593":"code","d812aaae":"code","3312cb65":"markdown","e61d6835":"markdown","f64d136c":"markdown","71081c65":"markdown","15b7547b":"markdown","0c2eb4e3":"markdown","7be7d364":"markdown","30d9a13b":"markdown","45b6a8af":"markdown","60303c83":"markdown","40d9f703":"markdown","38ab7963":"markdown"},"source":{"cd3fa18e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","571bf59b":"import numpy as np\nimport pandas as pd\nimport seaborn\nimport matplotlib.pylab as plt\nimport os\nimport random\nimport shutil\nimport glob\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dense, Flatten, BatchNormalization, Conv2D, MaxPool2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import confusion_matrix\nimport itertools","a42afacf":"seaborn.set(rc={'figure.figsize':(25,20)})","e0ab49f6":"from distutils.dir_util import copy_tree\n\nfrom_dir = '\/kaggle\/input\/animal-image-dataset-90-different-animals\/'\nto_dir = '\/kaggle\/working\/'\n\ncopy_tree(from_dir, to_dir)","44379443":"os.chdir(\"\/kaggle\/input\/animal-image-dataset-90-different-animals\/\")\nf = open(\"name of the animals.txt\", \"r\")\nnames = np.loadtxt(f,dtype='str')","6a561c74":"names","d4c07021":"os.chdir(\"\/kaggle\/working\/animals\/animals\/\") #change directory path\nfor animal in names: \n    path=\"\/kaggle\/working\/animals\/animals\/\"+animal\n    for count, filename in enumerate(os.listdir(path)):\n        src = filename #source\n        dst = animal + str(count) + \".jpg\" #destination\n            # rename() function will\n            # rename all the files\n        os.rename(os.path.join(path, src), os.path.join(path, dst)) #use join path to point the correct location","6ce32cc9":"os.chdir(\"\/kaggle\/working\/animals\/animals\/\") #to make sure we are in the correct directory\nfor animal in names: \n    path=\"\/kaggle\/working\/animals\/animals\/\"+animal\n    os.chdir(path)\n    path2=\"\/kaggle\/working\/animals\/\"\n    if os.path.isdir(path2+'train\/'+animal) is False: #make sure that the structure does not exist and then create it\n        os.makedirs(path2+'train\/'+animal)\n        os.makedirs(path2+'test\/'+animal)\n        os.makedirs(path2+'valid\/'+animal)\n        #60 pictures in each folder\n        for c in random.sample(glob.glob(animal+'*'),30): #randomly choose 30 picutres\n            shutil.move(c,path2+'train\/'+animal)\n        for c in random.sample(glob.glob(animal+'*'),20): #randomly choose 20 picutres\n            shutil.move(c,path2+'valid\/'+animal)\n        for c in random.sample(glob.glob(animal+'*'),10): #randomly choose 10 picutres\n            shutil.move(c,path2+'test\/'+animal)","86823f9c":"train_path = \"\/kaggle\/working\/animals\/train\"\ntest_path = \"\/kaggle\/working\/animals\/test\"\nvalid_path = \"\/kaggle\/working\/animals\/valid\"","78442bab":"list_names = names.tolist()\nlist_names","147b29fa":"train_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \\\n    .flow_from_directory(directory=train_path, target_size=(224,224), classes=list_names, batch_size=5)\nvalid_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \\\n    .flow_from_directory(directory=valid_path, target_size=(224,224), classes=list_names, batch_size=5)\ntest_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.vgg16.preprocess_input) \\\n    .flow_from_directory(directory=test_path, target_size=(224,224), classes=list_names, batch_size=5, shuffle=False)","410d3d86":"imgs, labels = next(train_batches)","e8b3f19a":"def plotImages(images_arr):\n    fig, axes = plt.subplots(1, 5, figsize=(20,20))\n    axes = axes.flatten()\n    for img, ax in zip( images_arr, axes):\n        ax.imshow(img)\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()","365465a6":"plotImages(imgs)\nprint(labels)","9e9e58e8":"model = Sequential([\n    Conv2D(filters=32, kernel_size=(3, 3), activation='relu', padding = 'same', input_shape=(224,224,3)),\n    MaxPool2D(pool_size=(2, 2), strides=2),\n    Conv2D(filters=64, kernel_size=(3, 3), activation='relu', padding = 'same'),\n    MaxPool2D(pool_size=(2, 2), strides=2),\n    Flatten(),\n    Dense(units=90, activation='softmax')\n])","0c6a8670":"model.summary()","d4e902ec":"model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])","25bfd6c6":"history = model.fit(x=train_batches,\n    steps_per_epoch=len(train_batches),\n    validation_data=valid_batches,\n    validation_steps=len(valid_batches),\n    epochs=5,\n    verbose=2\n)","23cf8e07":"plt.plot(history.history['accuracy'], linewidth=8)\nplt.plot(history.history['val_accuracy'], linewidth=8)\nplt.title('model accuracy',fontsize=28)\nplt.ylabel('accuracy',fontsize=28)\nplt.xlabel('epoch',fontsize=28)\nplt.xticks(fontsize=18)\nplt.yticks(fontsize=18)\nplt.legend(['training', 'validation'], loc='upper left',fontsize=24)\nplt.show()","9e088b15":"plt.plot(history.history['loss'], linewidth=8)\nplt.plot(history.history['val_loss'], linewidth=8)\nplt.title('model loss',fontsize=28)\nplt.ylabel('loss',fontsize=28)\nplt.xlabel('epoch',fontsize=28)\nplt.xticks(fontsize=18)\nplt.yticks(fontsize=18)\nplt.legend(['training', 'validation'], loc='upper left',fontsize=24)\nplt.show()","7f431e00":"test_imgs, test_labels = next(test_batches)","4f34f2b1":"plotImages(test_imgs)\nprint(test_labels)","5b949c06":"test_batches.classes","3054a4bf":"predictions = model.predict(x=test_batches, steps=len(test_batches), verbose=0)","72e7b4f8":"cm = confusion_matrix(y_true=test_batches.classes, y_pred=np.argmax(predictions, axis=-1))","bdd398c4":"def plot_confusion_matrix(cm, classes,\n                          normalize=True,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45,fontsize=18)\n    plt.yticks(tick_marks, classes,fontsize=18)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n   # thresh = cm.max() \/ 2.\n   # for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n   #     plt.text(j, i, cm[i, j],\n   #         horizontalalignment=\"center\",\n   #         color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label',fontsize=24)\n    plt.xlabel('Predicted label',fontsize=24)","26a24a5b":"test_batches.class_indices","03ed8593":"cm_plot_labels = list_names\nplot_confusion_matrix(cm=cm, classes=cm_plot_labels, title='Confusion Matrix')","d812aaae":"f.close()","3312cb65":"To see how well the model is performing, I plot the accuracy and the loss as a function of the number of epoch.","e61d6835":"Load the names of each directory containing the pictures of the different animals.","f64d136c":"For all animals, a train, test and validation directory is created.","71081c65":"PREPARE DATA AND PREPROCESSING","15b7547b":"Use 'ImageDataGenerator' class to create batches of data from the train, valid, and test directories. To plot the confusion matrix, the labels for the test batches are not shuffle.","0c2eb4e3":"TESTING SET","7be7d364":"Here, each picture in each directory is renamed according to the name of the corresponding animals 'names'+count+'.jpg ","30d9a13b":"Trains the model for a fixed number of epochs (iterations on a dataset)","45b6a8af":"TRAINING SET ","60303c83":"Convolutional Neural Network (cnn) to identify 90 different animals with TensorFlow's Keras <br>\n<br>\nAuthor: jvachier <br>\nCreation date: September 2021 <br>\nPublication date: September 2021 <br>\n<br>\nMy goal is to use convolutional neural network (cnn) to identify 90 different animals. The data set used here can be found on Kaggle (https:\/\/www.kaggle.com\/iamsouravbanerjee\/animal-image-dataset-90-different-animals). \nThe following analysis is organized as follow. Firstly, I import and pre-process the pictures by renaming them. Secondly, I create three directories 'test', 'train' and 'valid' with the picture randomly chosen. Thirdly, I build a CNN model to identify the 90 different animals provided in the data set. Finally, I train and test the CNN model and visualize the results by plotting the confusion matrix.<br>\nReferences:<br>\nhttps:\/\/www.tensorflow.org\/tutorials\/images\/classification#visualize_training_images <br>\nhttps:\/\/deeplizard.com\/learn\/video\/RznKVRTFkBY","40d9f703":"CONVOLUTIONAL NEURAL NETWORK (CNN) IMPLEMENTATION","38ab7963":"Configures the model for training"}}