{"cell_type":{"e1ff2f8e":"code","c3eb4a79":"code","1d59f798":"code","1ea338d9":"code","ddcca8c5":"code","11dd57db":"code","8b51c4e1":"code","53325734":"code","49dd2a0a":"code","b69e1e33":"code","09fd6c2a":"code","ab15534d":"code","c544fcdd":"code","5006c0f6":"code","83b7abcf":"code","95a5ff8f":"code","ae2c7561":"code","252a3810":"code","343d6adb":"code","ccae8d5f":"code","8f9492ce":"code","e01a474f":"code","ebf23148":"code","1042d9f5":"code","49ded664":"code","09460ed7":"code","731119ab":"code","e8f16ad8":"markdown","d9f29a7e":"markdown","9fd2406d":"markdown","0356ac9b":"markdown","3bf09765":"markdown","ac021666":"markdown","00e409b4":"markdown","a103bf8e":"markdown","df747f5a":"markdown","3e78c7fa":"markdown","0c25c20f":"markdown","12e507ab":"markdown","fff84eb2":"markdown","dd84234a":"markdown","9fffc24d":"markdown","c6f00b28":"markdown","3dc0dab7":"markdown","f5fed4ca":"markdown","f6189181":"markdown","cb372c08":"markdown","3d2dd243":"markdown","9e2b79b8":"markdown","e2872139":"markdown","dbfcf473":"markdown","e84334a0":"markdown","2b7b04c1":"markdown","a895de9a":"markdown","059f602c":"markdown","4ae256d4":"markdown","6a69d09e":"markdown","6e7af111":"markdown"},"source":{"e1ff2f8e":"import numpy as np\nimport pandas as pd\nimport random\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\nimport pickle\nfrom prettytable import PrettyTable\nimport operator","c3eb4a79":"def get_cb_players(n):\n    cb_players_info = []\n    players = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')\n    all_cb_playerids = list(players.loc[players.position == 'CB'].nflId.values)\n    #print(len(all_cb_playerids))\n    #sample_cb_playerids = random.sample(all_cb_playerids, n)\n    for cb_pid in all_cb_playerids[:n]:\n        cb_players_info.append([float(cb_pid), players.loc[players.nflId == cb_pid].displayName.values[0]])\n    return cb_players_info\n\ndef random_select_cb_plays(cb_id, n_wk, n):\n    #in order to save time, we merely collect all plays involving a given cb from n_wk weeks (out of 17 weeks)\n    all_cb_plays = []\n    for i in range(1, n_wk + 1):\n        wk_tracking_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week%i.csv' %i)\n        cb_wk_tracking_df = wk_tracking_df.loc[wk_tracking_df.nflId == cb_id]\n        for index, row in cb_wk_tracking_df.iterrows():\n            all_cb_plays.append([i, row['gameId'], row['playId']])\n    #randomly select n plays\n    #print(len(all_cb_plays))\n    if n > len(all_cb_plays):\n        return all_cb_plays\n    else:\n        cb_sample_plays = random.sample(all_cb_plays, n)\n        return cb_sample_plays\n\ndef collect_tracking_data_in_sel_play(sel_play):\n    wk_tracking_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week%i.csv' %sel_play[0])\n    play_tracking_data = wk_tracking_df.loc[(wk_tracking_df.gameId == sel_play[1]) & (wk_tracking_df.playId == sel_play[2])]\n    return play_tracking_data\n\n\ndef get_events_in_play(play_tracking_data):\n    events_in_play = play_tracking_data.loc[(play_tracking_data.event != 'None')]\n    return list(events_in_play.event.unique())\n\ndef get_all_timestamps_in_play(play_tracking_data):\n    timestamps = list(play_tracking_data.time.unique())\n    tes = []\n    for ts in timestamps:\n        e = play_tracking_data.loc[play_tracking_data.time == ts].event.values[0]\n        tes.append([ts, e])\n    return tes\n\ndef collect_timestamps_btw_events(tes, e1, e2):\n    timestamps_btw_events = []\n    flag = False\n    for i in range(len(tes)):\n        if tes[i][1] == e1:\n            flag = True\n            timestamps_btw_events.append(tes[i][0])\n        elif tes[i][1] == e2:\n            timestamps_btw_events.append(tes[i][0])\n            break\n        elif flag:\n            timestamps_btw_events.append(tes[i][0])\n        else:\n            continue\n    return timestamps_btw_events\n\n# event_type:\n# 0: ball_snap-->pass_forward (before passing)\n# 1: pass_forward-->next-non-None-event (ball in the air)\ndef collect_tracking_data_btw_events_in_play(play_tracking_data, event_type):\n    events = get_events_in_play(play_tracking_data)\n    tes = get_all_timestamps_in_play(play_tracking_data)\n    timestamps_btw_event = collect_timestamps_btw_events(tes, events[event_type], events[event_type + 1])\n    play_tracking_data_btw_events = play_tracking_data.loc[play_tracking_data.time.isin(timestamps_btw_event)]\n    return play_tracking_data_btw_events\n\ndef select_play_tracking_data_btw_events_by_positions(play_tracking_data_btw_events, positions):\n    sel_play_tracking_btw_events = play_tracking_data_btw_events.loc[play_tracking_data_btw_events.position.isin(positions)]\n    return sel_play_tracking_btw_events\n\ndef get_players_tracking_data_btw_events(sel_play_tracking_data_btw_events):\n    unique_player_ids = list(sel_play_tracking_data_btw_events.nflId.unique())\n    unique_ts = list(sel_play_tracking_data_btw_events.time.unique())\n    players_tracking_data_btw_events = {}\n    for pid in unique_player_ids:\n        dat = {'x':[], 'y':[], 's':[], 'a':[], 'dis':[], 'o':[], 'dir':[]}\n        for ts in unique_ts:\n            dat['x'].append(sel_play_tracking_data_btw_events.loc[(sel_play_tracking_data_btw_events.time == ts) & \n                                                                 (sel_play_tracking_data_btw_events.nflId == pid)].x.values[0])\n            dat['y'].append(sel_play_tracking_data_btw_events.loc[(sel_play_tracking_data_btw_events.time == ts) & \n                                                                 (sel_play_tracking_data_btw_events.nflId == pid)].y.values[0])\n            dat['s'].append(sel_play_tracking_data_btw_events.loc[(sel_play_tracking_data_btw_events.time == ts) & \n                                                                 (sel_play_tracking_data_btw_events.nflId == pid)].s.values[0])\n            dat['a'].append(sel_play_tracking_data_btw_events.loc[(sel_play_tracking_data_btw_events.time == ts) & \n                                                                 (sel_play_tracking_data_btw_events.nflId == pid)].a.values[0])\n            dat['dis'].append(sel_play_tracking_data_btw_events.loc[(sel_play_tracking_data_btw_events.time == ts) & \n                                                                   (sel_play_tracking_data_btw_events.nflId == pid)].dis.values[0])\n            dat['o'].append(sel_play_tracking_data_btw_events.loc[(sel_play_tracking_data_btw_events.time == ts) & \n                                                                 (sel_play_tracking_data_btw_events.nflId == pid)].o.values[0])\n            dat['dir'].append(sel_play_tracking_data_btw_events.loc[(sel_play_tracking_data_btw_events.time == ts) & \n                                                                   (sel_play_tracking_data_btw_events.nflId == pid)].dir.values[0])\n        players_tracking_data_btw_events[pid] = dat\n    return players_tracking_data_btw_events","1d59f798":"def distances_btw_players_btw_events(x1_btw_events, y1_btw_events, x2_btw_events, y2_btw_events):\n    dists_btw_events = []\n    for i in range(len(x1_btw_events)):\n        dists_btw_events.append(distance.euclidean([y1_btw_events[i], x1_btw_events[i]], [y2_btw_events[i], x2_btw_events[i]]))\n    return dists_btw_events\n\n#identify the closest offensive player at each timestamp for a given cb player\ndef identify_cb_cls_offense(db_tracking_data_btw_events, off_tracking_data_btw_events, cb_id):\n    cls_offenseids = []\n    cls_offensedists = []\n    cb_xs = db_tracking_data_btw_events[cb_id]['x']\n    cb_ys = db_tracking_data_btw_events[cb_id]['y']\n    off_pids = list(off_tracking_data_btw_events.keys())\n    all_off_dists = []\n    for o_pid in off_pids:\n        o_xs = off_tracking_data_btw_events[o_pid]['x']\n        o_ys = off_tracking_data_btw_events[o_pid]['y']\n        all_off_dists.append(distances_btw_players_btw_events(cb_xs, cb_ys, o_xs, o_ys))\n    for i in range(len(cb_xs)):\n        off_dists_at_i = []\n        for j in range(len(off_pids)):\n            off_dists_at_i.append(all_off_dists[j][i])\n        cls_offensedists.append(min(off_dists_at_i))\n        cls_offenseids.append(off_pids[np.argmin(off_dists_at_i)])\n    return {'cls_ids': cls_offenseids, 'cls_dists': cls_offensedists}\n\ndef identify_cb_cls_defense(db_tracking_data_btw_events, cb_id):\n    cls_defenseids = []\n    cls_defensedists = []\n    cb_xs = db_tracking_data_btw_events[cb_id]['x']\n    cb_ys = db_tracking_data_btw_events[cb_id]['y']\n    db_pids = list(db_tracking_data_btw_events.keys())\n    db_pids.remove(cb_id)\n    all_db_dists = []\n    for db_pid in db_pids:\n        db_xs = db_tracking_data_btw_events[db_pid]['x']\n        db_ys = db_tracking_data_btw_events[db_pid]['y']\n        all_db_dists.append(distances_btw_players_btw_events(cb_xs, cb_ys, db_xs, db_ys))\n    for i in range(len(db_xs)):\n        db_dists_at_i = []\n        for j in range(len(db_pids)):\n            db_dists_at_i.append(all_db_dists[j][i])\n        cls_defensedists.append(min(db_dists_at_i))\n        cls_defenseids.append(db_pids[np.argmin(db_dists_at_i)])\n    return {'cls_ids': cls_defenseids, 'cls_dists': cls_defensedists}\n\ndef collect_stat_of_cls_player(players_tracking_data, cb_cls_player_in_play, stat):\n    stat_dat = []\n    for i in range(len(cb_cls_player_in_play['cls_ids'])):\n        cls_id = cb_cls_player_in_play['cls_ids'][i]\n        stat_dat.append(players_tracking_data[cls_id][stat][i])\n    return stat_dat","1ea338d9":"def collect_cb_tracking_data_of_sel_plays(cb_id, n_wk, n, event_type):\n    dat = {'xs':[], 'ys':[], 'ss':[], 'as':[], 'diss':[], 'os':[], 'dirs':[], 'o_cls_xs':[], 'o_cls_ys':[], 'o_cls_ss':[], 'o_cls_as':[], 'o_cls_diss':[],\n          'o_cls_os':[], 'o_cls_dirs':[], 'o_cls_dists':[]}\n           #'d_cls_xs':[], 'd_cls_ys':[], 'd_cls_ss':[], 'd_cls_as':[], 'd_cls_diss':[], 'd_cls_os':[],'d_cls_dirs':[], 'd_cls_dists':[]}\n    #get sample plays\n    cb_sample_plays = random_select_cb_plays(cb_id, n_wk, n)\n    for play in cb_sample_plays:\n        #print('%s %d' %(play[0], play[1]))\n        try:\n            #collect tracking data in a selected play\n            play_tracking_data = collect_tracking_data_in_sel_play(play)\n            #collect tracking data between event\n            play_tracking_data_btw_events = collect_tracking_data_btw_events_in_play(play_tracking_data, event_type)\n        \n            db_play_tracking_btw_events = select_play_tracking_data_btw_events_by_positions(play_tracking_data_btw_events, ['CB'])\n            off_play_tracking_btw_events = select_play_tracking_data_btw_events_by_positions(play_tracking_data_btw_events, ['WR', 'TE'])\n            db_players_tracking_data = get_players_tracking_data_btw_events(db_play_tracking_btw_events)\n            #print(db_players_tracking_data.keys())\n            dat['xs'].append(db_players_tracking_data[cb_id]['x'])\n            dat['ys'].append(db_players_tracking_data[cb_id]['y'])\n            dat['ss'].append(db_players_tracking_data[cb_id]['s'])\n            dat['as'].append(db_players_tracking_data[cb_id]['a'])\n            dat['diss'].append(db_players_tracking_data[cb_id]['dis'])\n            dat['os'].append(db_players_tracking_data[cb_id]['o'])\n            dat['dirs'].append(db_players_tracking_data[cb_id]['dir'])\n        \n            off_players_tracking_data = get_players_tracking_data_btw_events(off_play_tracking_btw_events)\n            cb_cls_offense_in_play = identify_cb_cls_offense(db_players_tracking_data, off_players_tracking_data, cb_id)\n            dat['o_cls_dists'].append(cb_cls_offense_in_play['cls_dists'])\n            dat['o_cls_xs'].append(collect_stat_of_cls_player(off_players_tracking_data, cb_cls_offense_in_play, 'x'))\n            dat['o_cls_ys'].append(collect_stat_of_cls_player(off_players_tracking_data, cb_cls_offense_in_play, 'y'))\n            dat['o_cls_ss'].append(collect_stat_of_cls_player(off_players_tracking_data, cb_cls_offense_in_play, 's'))\n            dat['o_cls_as'].append(collect_stat_of_cls_player(off_players_tracking_data, cb_cls_offense_in_play, 'a'))\n            dat['o_cls_diss'].append(collect_stat_of_cls_player(off_players_tracking_data, cb_cls_offense_in_play, 'dis'))\n            dat['o_cls_os'].append(collect_stat_of_cls_player(off_players_tracking_data, cb_cls_offense_in_play, 'o'))\n            dat['o_cls_dirs'].append(collect_stat_of_cls_player(off_players_tracking_data, cb_cls_offense_in_play, 'dir'))\n        except:\n            continue\n    return dat","ddcca8c5":"#higher is better\ndef max_agility(cb_dat):\n    max_agi = []\n    plays_dirs = cb_dat['dirs']\n    for dir_p in plays_dirs:\n        try:\n            diff_dirs = []\n            for i in range(1, len(dir_p)):\n                diff_dirs.append(abs(dir_p[i-1] - dir_p[i]))\n            max_agi.append(max(diff_dirs))\n        except:\n            continue\n    return np.mean(max_agi)\n\n#higher is better\ndef max_speed(cb_dat):\n    max_spd = []\n    plays_ss = cb_dat['ss']\n    for s_p in plays_ss:\n        max_spd.append(max(s_p))\n    return np.mean(max_spd)\n\n#higher is better\ndef max_acceleration(cb_dat):\n    max_acc = []\n    plays_as = cb_dat['as']\n    for a_p in plays_as:\n        try:\n            diff_as = []\n            for i in range(1, len(a_p)):\n                diff_as.append(a_p[i-1] - a_p[i])\n            max_acc.append(max(diff_as))\n        except:\n            continue\n    return np.mean(max_acc)\n\n#lower is better\ndef mean_cls_dist(cb_dat, threshold):\n    mean_dist = []\n    plays_cls_dists = cb_dat['o_cls_dists']\n    for cls_dist_p in plays_cls_dists:\n        m_cls_dist_p = np.mean(cls_dist_p)\n        if m_cls_dist_p < threshold:\n            mean_dist.append(m_cls_dist_p)\n    return np.mean(mean_dist)\n\n#lower is better\ndef matching_cls_speed(cb_dat, threshold):\n    mean_diff_ss = []\n    plays_cls_dists = cb_dat['o_cls_dists']\n    plays_ss = cb_dat['ss']\n    plays_cls_ss = cb_dat['o_cls_ss']\n    for i in range(len(plays_cls_dists)):\n        m_cls_dist_p = np.mean(plays_cls_dists[i])\n        if m_cls_dist_p < threshold:\n            try:\n                diff_ss = []\n                s_p = plays_ss[i]\n                cls_s_p = plays_cls_ss[i]\n                for j in range(len(s_p)):\n                    diff_ss.append(abs(s_p[j] - cls_s_p[j]))\n                mean_diff_ss.append(np.mean(diff_ss))\n            except:\n                continue\n    return np.mean(mean_diff_ss)\n\n#lower is better\ndef matching_cls_acceleration(cb_dat, threshold):\n    mean_diff_as = []\n    plays_cls_dists = cb_dat['o_cls_dists']\n    plays_as = cb_dat['as']\n    plays_cls_as = cb_dat['o_cls_as']\n    for i in range(len(plays_cls_dists)):\n        m_cls_dist_p = np.mean(plays_cls_dists[i])\n        if m_cls_dist_p < threshold:\n            try:\n                diff_as = []\n                a_p = plays_as[i]\n                cls_a_p = plays_cls_as[i]\n                for j in range(len(a_p)):\n                    diff_as.append(abs(a_p[j] - cls_a_p[j]))\n                mean_diff_as.append(np.mean(diff_as))\n            except:\n                continue\n    return np.mean(mean_diff_as)\n\n#lower is better\ndef matching_cls_orientation(cb_dat, threshold):\n    mean_diff_os = []\n    plays_cls_dists = cb_dat['o_cls_dists']\n    plays_os = cb_dat['os']\n    plays_cls_os = cb_dat['o_cls_os']\n    for i in range(len(plays_cls_dists)):\n        m_cls_dist_p = np.mean(plays_cls_dists[i])\n        if m_cls_dist_p < threshold:\n            try:\n                diff_os = []\n                o_p = plays_os[i]\n                cls_o_p = plays_cls_os[i]\n                for j in range(len(o_p)):\n                    diff_os.append(abs(o_p[j] - cls_o_p[j]))\n                mean_diff_os.append(np.mean(diff_os))\n            except:\n                continue\n    return np.mean(mean_diff_os)\n\n#lower is better\ndef matching_cls_direction(cb_dat, threshold):\n    mean_diff_dirs = []\n    plays_cls_dists = cb_dat['o_cls_dists']\n    plays_dirs = cb_dat['dirs']\n    plays_cls_dirs = cb_dat['o_cls_dirs']\n    for i in range(len(plays_cls_dists)):\n        m_cls_dist_p = np.mean(plays_cls_dists[i])\n        if m_cls_dist_p < threshold:\n            try:\n                diff_dirs = []\n                dir_p = plays_dirs[i]\n                cls_dir_p = plays_cls_dirs[i]\n                for j in range(len(dir_p)):\n                    diff_dirs.append(abs(dir_p[j] - cls_dir_p[j]))\n                mean_diff_dirs.append(np.mean(diff_dirs))\n            except:\n                continue\n    return np.mean(mean_diff_dirs)\n\n#lower is better\ndef pursuit(cb_dat, threshold):\n    min_dists = []\n    plays_cls_dists = cb_dat['o_cls_dists']\n    for cls_dist_p in plays_cls_dists:\n        m_cls_dist_p = np.mean(cls_dist_p)\n        if m_cls_dist_p < threshold:\n            min_dist = min(cls_dist_p)\n            ts = np.argmin(cls_dist_p)\n            if ts == 0:\n                continue\n            min_dists.append(min_dist * ts)\n    return np.mean(min_dists)","11dd57db":"def compute_cb_metrics(cb_ids, cb_dats, t):\n    cbs_metrics = []\n    for cb_id in cb_ids:\n        cb_m = []\n        #personal metrics\n        cb_m.append(max_agility(cb_dats[cb_id]))\n        cb_m.append(max_speed(cb_dats[cb_id]))\n        cb_m.append(max_acceleration(cb_dats[cb_id]))\n        \n        #coverage metrics\n        cb_m.append(mean_cls_dist(cb_dats[cb_id], t))\n        cb_m.append(matching_cls_speed(cb_dats[cb_id], t))\n        cb_m.append(matching_cls_acceleration(cb_dats[cb_id], t))\n        cb_m.append(matching_cls_orientation(cb_dats[cb_id], t))\n        cb_m.append(matching_cls_direction(cb_dats[cb_id], t))\n        cb_m.append(pursuit(cb_dats[cb_id], t))\n        \n        cbs_metrics.append(cb_m)\n    \n    #normalize data for each column\n    cbs_metrics = np.array(cbs_metrics)\n    normed_cbs_metrics = cbs_metrics\/cbs_metrics.max(axis=0)\n    return normed_cbs_metrics\n\ndef cb_personal_score(normed_cb_metrics, w):\n    cb_personal_metrics = normed_cb_metrics[:3]\n    score = 0.0\n    for i in range(len(cb_personal_metrics)):\n        score += (w[i] * cb_personal_metrics[i])\n    return score\n\ndef cb_coverage_score(normed_cb_metrics, w):\n    cb_coverage_metrics = normed_cb_metrics[3:]\n    score = 0.0\n    for i in range(len(cb_coverage_metrics)):\n        score += (w[i] * (1.0 - cb_coverage_metrics[i]))\n    return score\n\ndef cb_overall_score(personal_score, coverage_score, w):\n    score = (w[0] * personal_score) + (w[1] + coverage_score)\n    return score","8b51c4e1":"def compare_personal_metrics(cb_names, cbs_metrics_bfr_pass, cbs_metrics_in_air):\n    fig, axs = plt.subplots(1, 3, figsize=(20,7))\n    fig.suptitle('Compare personal metrics (higher is better)')\n    X = np.arange(len(cb_names))\n    width = 0.35\n    axs[0].bar(X-width\/2, list(cbs_metrics_bfr_pass[:,0]), width, label='bfr pass')\n    axs[0].bar(X+width\/2, list(cbs_metrics_in_air[:, 0]), width, label='in air')\n    axs[0].set_title('Agility')\n    axs[0].set_xticks(X)\n    axs[0].set_xticklabels(cb_names, rotation = 45)\n    axs[0].legend()\n    axs[1].bar(X-width\/2, list(cbs_metrics_bfr_pass[:, 1]), width, label='bfr pass')\n    axs[1].bar(X+width\/2, list(cbs_metrics_in_air[:, 1]), width, label='in air')\n    axs[1].set_title('Speed')\n    axs[1].set_xticks(X)\n    axs[1].set_xticklabels(cb_names, rotation = 45)\n    axs[1].legend()\n    axs[2].bar(X-width\/2, list(cbs_metrics_bfr_pass[:, 2]), width, label='bfr pass')\n    axs[2].bar(X+width\/2, list(cbs_metrics_in_air[:, 2]), width, label='in air')\n    axs[2].set_title('Acceleration')\n    axs[2].set_xticks(X)\n    axs[2].set_xticklabels(cb_names, rotation = 45)\n    axs[2].legend()\n    plt.show()\n\ndef compare_coverage_metrics(cb_names, cbs_metrics_bfr_pass, cbs_metrics_in_air):\n    fig, axs = plt.subplots(2, 3, sharex=True, figsize=(20, 14))\n    fig.suptitle('Compare coverage metrics (lower is better)')\n    X = np.arange(len(cb_names))\n    width = 0.35\n    axs[0, 0].bar(X-width\/2, list(cbs_metrics_bfr_pass[:, 3]), width, label='bfr pass')\n    axs[0, 0].bar(X+width\/2, list(cbs_metrics_in_air[:,3]), width, label='in air')\n    axs[0, 0].set_title('Closest distance')\n    axs[0, 0].set_xticks(X)\n    axs[0, 0].set_xticklabels(cb_names, rotation = 45)\n    axs[0, 0].legend()\n    axs[0, 1].bar(X-width\/2, list(cbs_metrics_bfr_pass[:, 4]), width, label='bfr pass')\n    axs[0, 1].bar(X+width\/2, list(cbs_metrics_in_air[:,4]), width, label='in air')\n    axs[0, 1].set_title('Matching speed')\n    axs[0, 1].set_xticks(X)\n    axs[0, 1].set_xticklabels(cb_names, rotation = 45)\n    axs[0, 1].legend()\n    axs[0, 2].bar(X-width\/2, list(cbs_metrics_bfr_pass[:, 5]), width, label='bfr pass')\n    axs[0, 2].bar(X+width\/2, list(cbs_metrics_in_air[:,5]), width, label='in air')\n    axs[0, 2].set_title('Matching acceleration')\n    axs[0, 2].set_xticks(X)\n    axs[0, 2].set_xticklabels(cb_names, rotation = 45)\n    axs[0, 2].legend()\n    axs[1, 0].bar(X-width\/2, list(cbs_metrics_bfr_pass[:, 6]), width, label='bfr pass')\n    axs[1, 0].bar(X+width\/2, list(cbs_metrics_in_air[:,6]), width, label='in air')\n    axs[1, 0].set_title('Matching orientation')\n    axs[1, 0].set_xticks(X)\n    axs[1, 0].set_xticklabels(cb_names, rotation = 45)\n    axs[1, 0].legend()\n    axs[1, 1].bar(X-width\/2, list(cbs_metrics_bfr_pass[:, 7]), width, label='bfr pass')\n    axs[1, 1].bar(X+width\/2, list(cbs_metrics_in_air[:,7]), width, label='in air')\n    axs[1, 1].set_title('Matching direction')\n    axs[1, 1].set_xticks(X)\n    axs[1, 1].set_xticklabels(cb_names, rotation = 45)\n    axs[1, 1].legend()\n    axs[1, 2].bar(X-width\/2, list(cbs_metrics_bfr_pass[:, 8]), width, label='bfr pass')\n    axs[1, 2].bar(X+width\/2, list(cbs_metrics_in_air[:,8]), width, label='in air')\n    axs[1, 2].set_title('Pursuit')\n    axs[1, 2].set_xticks(X)\n    axs[1, 2].set_xticklabels(cb_names, rotation = 45)\n    axs[1, 2].legend()\n    \n    plt.show()\n\ndef compare_abilities(cb_names, personal_scores_bfr_pass, personal_scores_in_air, coverage_scores_bfr_pass, coverage_scores_in_air):\n    fig, axs = plt.subplots(1, 2, figsize=(20,10))\n    fig.suptitle('Compare personal and coverage abilities of CB for different events')\n    axs[0].scatter(personal_scores_bfr_pass, coverage_scores_bfr_pass)\n    for j, txt in enumerate(cb_names):\n        axs[0].annotate(txt, (personal_scores_bfr_pass[j], coverage_scores_bfr_pass[j]))\n    axs[0].set_title('event: before the ball is thrown')\n    axs[0].set_xlabel('Personal ability')\n    axs[0].set_ylabel('Coverage ability')\n    \n    axs[0].set_xlim([0.0, 1.0])\n    axs[0].set_ylim([0.0, 1.0])\n    \n    axs[1].scatter(personal_scores_in_air, coverage_scores_in_air, color='orange')\n    for j, txt in enumerate(cb_names):\n        axs[1].annotate(txt, (personal_scores_in_air[j], coverage_scores_in_air[j]))\n    axs[1].set_title('event: ball is in the air')\n    axs[1].set_xlabel('Personal ability')\n    axs[1].set_ylabel('Coverage ability')\n    \n    \n    axs[1].set_xlim([0.0, 1.0])\n    axs[1].set_ylim([0.0, 1.0])\n    \n    plt.show()","53325734":"cb_players_info = get_cb_players(100)\n#print(cb_players_info)\ncb_ids = [cb_info[0] for cb_info in cb_players_info]\nn_wk = 5\nn = 50\n\nexample_cb_idx = [35, 42, 58, 59]\nexample_cbs = [cb_players_info[idx] for idx in example_cb_idx]\nexample_cb_ids = [example_cbs[i][0] for i in range(len(example_cbs))]\nexample_cb_names = [example_cbs[i][1] for i in range(len(example_cbs))]\nprint(example_cb_names)","49dd2a0a":"cb_dats_bfr_pass = {}\ncb_dats_in_air = {}\nfor cb_id in example_cb_ids:\n    print(cb_id)\n    cb_dats_bfr_pass[cb_id] = collect_cb_tracking_data_of_sel_plays(cb_id, n_wk, n, 0)\n    cb_dats_in_air[cb_id] = collect_cb_tracking_data_of_sel_plays(cb_id, n_wk, n, 1)","b69e1e33":"t = 10\nnormed_cbs_metrics_bfr_pass = compute_cb_metrics(example_cb_ids, cb_dats_bfr_pass, t)\nnormed_cbs_metrics_in_air = compute_cb_metrics(example_cb_ids, cb_dats_in_air, t)","09fd6c2a":"compare_personal_metrics(example_cb_names, normed_cbs_metrics_bfr_pass, normed_cbs_metrics_in_air)","ab15534d":"compare_coverage_metrics(example_cb_names, normed_cbs_metrics_bfr_pass, normed_cbs_metrics_in_air)","c544fcdd":"pers_abi_w = [0.5, 0.25, 0.25]\ncover_abi_w = [0.3, 0.15, 0.15, 0.0, 0.2, 0.2]\n\npersonal_scores_bfr_pass = []\ncoverage_scores_bfr_pass = []\npersonal_scores_in_air = []\ncoverage_scores_in_air = []\nfor i in range(len(example_cb_names)):\n    personal_scores_bfr_pass.append(cb_personal_score(normed_cbs_metrics_bfr_pass[i], pers_abi_w))\n    coverage_scores_bfr_pass.append(cb_coverage_score(normed_cbs_metrics_bfr_pass[i], cover_abi_w))\n    personal_scores_in_air.append(cb_personal_score(normed_cbs_metrics_in_air[i], pers_abi_w))\n    coverage_scores_in_air.append(cb_coverage_score(normed_cbs_metrics_in_air[i], cover_abi_w))\ncompare_abilities(example_cb_names, personal_scores_bfr_pass, personal_scores_in_air, coverage_scores_bfr_pass, coverage_scores_in_air)","5006c0f6":"abi_w = [0.3, 0.7]\nscores_bfr_pass = []\nscores_in_air = []\nfor i in range(len(example_cb_names)):\n    score_bfr_pass = cb_overall_score(personal_scores_bfr_pass[i], coverage_scores_bfr_pass[i], abi_w)\n    scores_bfr_pass.append(score_bfr_pass)\n    score_in_air = cb_overall_score(personal_scores_in_air[i], coverage_scores_in_air[i], abi_w)\n    scores_in_air.append(score_in_air)\n    total_score = score_bfr_pass + score_in_air\n    print('%s has scores: %.2f (before pass), %.2f (in the air), %.2f (total)' %(example_cb_names[i], score_bfr_pass, score_in_air, total_score))","83b7abcf":"plt.figure(figsize=(10, 10))\nplt.scatter(scores_bfr_pass, scores_in_air)\nfor j, txt in enumerate(example_cb_names):\n    plt.annotate(txt, (scores_bfr_pass[j], scores_in_air[j]))\nplt.xlabel('Score before the ball is passed')\nplt.ylabel('Score during the ball is in the air')\nplt.show()","95a5ff8f":"cb_tracking_dat_0 = pickle.load(open(\"..\/input\/cb-tracking-data\/cb_tracking_dat_0.p\", \"rb\"))\ncb_tracking_dat_1 = pickle.load(open(\"..\/input\/cb-tracking-data\/cb_tracking_dat_1.p\", \"rb\"))","ae2c7561":"first_40_cb_players_info = get_cb_players(40)\n#print(cb_players_info)\nfirst_40_cb_ids = [cb_info[0] for cb_info in first_40_cb_players_info]\nfirst_40_cb_names = [cb_info[1] for cb_info in first_40_cb_players_info]\nprint(first_40_cb_ids)\nprint(first_40_cb_names)","252a3810":"t = 10\nfirst_40_normed_cbs_metrics_bfr_pass = compute_cb_metrics(first_40_cb_ids, cb_tracking_dat_0, t)\nfirst_40_normed_cbs_metrics_in_air = compute_cb_metrics(first_40_cb_ids, cb_tracking_dat_1, t)","343d6adb":"rand_cbs_idx = [0, 2, 9, 17, 20]\nrand_cb_ids = [first_40_cb_players_info[idx][0] for idx in rand_cbs_idx]\nrand_cb_names = [first_40_cb_players_info[idx][1] for idx in rand_cbs_idx]\nprint(rand_cb_names)","ccae8d5f":"rand_normed_cbs_metrics_bfr_pass = []\nrand_normed_cbs_metrics_in_air = []\nfor idx in rand_cbs_idx:\n    rand_normed_cbs_metrics_bfr_pass.append(list(first_40_normed_cbs_metrics_bfr_pass[idx]))\n    rand_normed_cbs_metrics_in_air.append(list(first_40_normed_cbs_metrics_in_air[idx]))\ncompare_personal_metrics(rand_cb_names, np.array(rand_normed_cbs_metrics_bfr_pass), np.array(rand_normed_cbs_metrics_in_air))","8f9492ce":"compare_coverage_metrics(rand_cb_names, np.array(rand_normed_cbs_metrics_bfr_pass), np.array(rand_normed_cbs_metrics_in_air))","e01a474f":"f40_pers_abi_w = [0.5, 0.25, 0.25]\nf40_cover_abi_w = [0.3, 0.15, 0.15, 0.0, 0.2, 0.2]\n\nfirst_40_personal_scores_bfr_pass = []\nfirst_40_coverage_scores_bfr_pass = []\nfirst_40_personal_scores_in_air = []\nfirst_40_coverage_scores_in_air = []\nfor i in range(len(first_40_cb_names)):\n    first_40_personal_scores_bfr_pass.append(cb_personal_score(first_40_normed_cbs_metrics_bfr_pass[i], f40_pers_abi_w))\n    first_40_coverage_scores_bfr_pass.append(cb_coverage_score(first_40_normed_cbs_metrics_bfr_pass[i], f40_cover_abi_w))\n    first_40_personal_scores_in_air.append(cb_personal_score(first_40_normed_cbs_metrics_in_air[i], f40_pers_abi_w))\n    first_40_coverage_scores_in_air.append(cb_coverage_score(first_40_normed_cbs_metrics_in_air[i], f40_cover_abi_w))\ncompare_abilities(first_40_cb_names, first_40_personal_scores_bfr_pass, first_40_personal_scores_in_air, \n                  first_40_coverage_scores_bfr_pass, first_40_coverage_scores_in_air)","ebf23148":"f40_abi_w = [0.3, 0.7]\nbfr_pass_scores_dict = {}\nin_air_scores_dict = {}\ntotal_scores_dict = {}\nfor i in range(len(first_40_cb_names)):\n    score_bfr_pass = cb_overall_score(first_40_personal_scores_bfr_pass[i], first_40_coverage_scores_bfr_pass[i], f40_abi_w)\n    score_in_air = cb_overall_score(first_40_personal_scores_in_air[i], first_40_coverage_scores_in_air[i], f40_abi_w)\n    bfr_pass_scores_dict[first_40_cb_names[i]] = score_bfr_pass\n    in_air_scores_dict[first_40_cb_names[i]] = score_in_air\n    total_scores_dict[first_40_cb_names[i]] = score_bfr_pass + score_in_air\n#sorted \nsorted_bfr_pass_scores_dict = sorted(bfr_pass_scores_dict.items(), key=operator.itemgetter(1), reverse=True)\nsorted_in_air_scores_dict = sorted(in_air_scores_dict.items(), key=operator.itemgetter(1), reverse=True)\nsorted_total_scores_dict = sorted(total_scores_dict.items(), key=operator.itemgetter(1), reverse=True)","1042d9f5":"t_bfr_pass = PrettyTable(['Name', 'Score'])\nfor i in range(10):\n    t_bfr_pass.add_row([sorted_bfr_pass_scores_dict[i][0], sorted_bfr_pass_scores_dict[i][1]])\nprint(t_bfr_pass)","49ded664":"t_in_air = PrettyTable(['Name', 'Score'])\nfor i in range(10):\n    t_in_air.add_row([sorted_in_air_scores_dict[i][0], sorted_in_air_scores_dict[i][1]])\nprint(t_in_air)","09460ed7":"bfr_pass_scores_by_name = [bfr_pass_scores_dict[n] for n in first_40_cb_names]\nin_air_scores_by_name = [in_air_scores_dict[n] for n in first_40_cb_names]\n\nplt.figure(figsize=(10, 10))\nplt.scatter(bfr_pass_scores_by_name, in_air_scores_by_name)\nfor j, txt in enumerate(first_40_cb_names):\n    plt.annotate(txt, (bfr_pass_scores_by_name[j], in_air_scores_by_name[j]))\nplt.xlabel('Score before the ball is passed')\nplt.ylabel('Score during the ball is in the air')\nplt.show()","731119ab":"t_total = PrettyTable(['Name', 'Score'])\nfor i in range(10):\n    t_total.add_row([sorted_total_scores_dict[i][0], sorted_total_scores_dict[i][1]])\nprint(t_total)","e8f16ad8":"plot comparison of all metrics corresponding to the coverage ability","d9f29a7e":"### This notebook aims to employ player tracking data to tackle two main questions:\n- Which cornerbacks are the best at closely tracking receivers as they try to get open before the ball is thrown? \n- Which cornerbacks are the best at closing on receivers when the ball is in the air?\n\nIn order to answer these questions, we developed a simple score for evaluating cornerbacks' performance on each of the following events during a play: \n- from 'ball snap' to 'pass forward' (before the ball is thrown)\n- from 'pass forward' to the next non-None event in the play (ball is in the air). \n\nThis score consists of two components: personal ability and coverage ability, where each component is measured by simple and related metrics defined in terms of player tracking data on different plays.\n\n**Personal ability** is used to measure how good a cornerback is, which is composed of three related metrics as follows:\n- agility is used to measure the ability to change direction of a cornerback during a play, which is defined by the mean of the maximum direction changing of a cornerback on consecutive timestamps during different plays\n- speed is used to measure the fastest speed the cornerback can run, which is defined by the mean of the maximum speed of a cornerback during different plays\n- acceleration is used to measure a rate at which a cornerback will reach his fastest speed, which is defined by the mean of the maximum acceleration changing of a cornerback on consecutive timestamps during different plays\n\nThe personal ability is computed by weighted sum of these three metrics, whose weights are assigned subjectively with respect to importance and the nature of the event being considered\n\n**Coverage ability** is used to measure how good a cornerback can cover the closest offensive player during a play, which is composed of six related metrics as follows:\n- distance tracking is used to measure the ability to get close to his responsible offensive player, which is defined by the mean of the mean distance between a cornerback and the closest offensive player during different plays\n- speed tracking is used to measure the ability to match his speed toward the speed of his responsible offensive player, which is defined by the mean of the mean different speed between a cornerback and the closest offensive player during different plays\n- acceleration tracking is used to measure the ability to match his accerelation toward the acceleration of his responsible offensive player, which is defined by the mean of the mean different acceleration between a cornerback and the closest offensive player during different plays\n- orientation tracking is used to measure the ability to match his orientation toward the orientation of his responsible offensive player, which is defined by the mean of the mean different orientation between a cornerback and the closest offensive player during different plays\n- direction tracking is used to measure the ability to match his direction toward the direction of his responsible offensive player, which is defined by the mean of the mean different direction between a cornerback and the closest offensive player during different plays\n- persuit is used to measure the ability of a cornerbak in closing in his responsible offensive player, which is defined by the closest distance and the time used to reach the closest distance between a cornerback and the closest offensive player during different plays\n\nNote that we consider to use only plays that the mean distance between a cornerback and the closest offensive player is smaller than a given threshold to compute these six metrics as this condition indicates that at least one offensive player is covered by the cornerback\n\nThe coverage ability is computed by weighted sum of these six metrics, whose weights are assigned subjectively with respect to importance and the nature of the event being considered\n\nThe score used to evaluate cornerback's performance is computed by weighted sum of personal and coverage abilities, whose weights are assigned with respect to importance and the nature of the event being considered\n\nHere, we hypothesize that some cornerbacks may perform better than others in closely tracking recievers before the ball is thrown. Some may perform better than others during the ball is in the air. By combining the scores computed from both events, we may be able to pinpoint the best cornerbacks in the game.\n\nWe present the usefulness of the devloped score through experiments on a small set of examples containing a few best cornerbacks in 2018 and a larger set of examples containing first 40 cornerbacks selected from the 'players.csv' ","9fd2406d":"plot comparison of all metrics correponding to the personal ability","0356ac9b":"### Functions used to visualize experimental results, which include comparison of cornerbacks' different metrics on both events, scatter plot illustrating relationship between personal and coverage abilities, etc.","3bf09765":"assign closest distance threshold and compute all metrics on both events for each CB","ac021666":"Plot to show performance of top cornerbacks with respect to their scores corresponding to the particular events (before the ball is passed and during the ball is in the air)","00e409b4":"### experiment with a small set of examples containing a few best cornerbacks during 2018 NFL season (here, we randomly select only 50 plays for each cornerback to save processing time) ","a103bf8e":"From these plots, we can see that Stephen Gilmore can keep the smallest distance to his responsible offensive player and also macth the direction fairly closely to the offensive player, which may indicate the awareness of this player. He can quickly close the gap to the offensive player (persuit) as well.\n\nWe can see that some cornerback may perform differently from event to event. These result points out various coverage schemes and strategies have been deployed by a cornerback during a particular event within a play.","df747f5a":"Select 5 players, and plot comparison of all metrics correponding to the personal ability","3e78c7fa":"From these plots, we can roughly classify cornerbacks into 4 types with respect to their abilities:\n- cornerbacks who have high personal ability but have low coverage ability (e.g., Rasul Douglas (before pass), Ronald Darby (before pass), Damarious Randall (in the air), Leshaun Sims (in the air)); these players may be suitable for playing zone coverage\n- cornerbacks who have low personal ability but have high coverage ability (e.g.,Malcome Butler, Marlon Humphrey, Robert Alford, Anthony Averett (in the air)); these players may have high awareness as they compensate their low personal ability with high experiences in playing man coverage\n- cornerbacks who have high personal and coverage abilities (e.g., Anthony Averett (before pass), Artie Burns (in the air)); these players are good in playing man coverage\n- cornerbacks who have low personal and coverage abilities (e.g., Xavien Howard, Kareem Jackson); these players may be mainly deployed to play zone coverage","0c25c20f":"From these plots, we can also determine a coverage scheme that is regularly deployed by a cornerback during a certain event within a play:\n- Damarious Randall is a cornerback who regularly plays man coverage before the ball is thrown and then changes to zone coverage during the ball is in the air\n- Rasul Douglas, Artie Burns, Ronald Darby, etc. are cornerbacks who regularly play zone coverage before the ball is thrown and then change to man coverge during the ball is in the air\n- Kareem Jackson and Johnathan Joseph, etc. are cornerbacks who regularly play zone coverage during both events\n- Robert Alford, Marlon Humphrey, Malcolm Butler, Anthony Averett, etc. are cornerbacks who regularly play man coverage during both events","12e507ab":"collect tracking data of selected CB on both events","fff84eb2":"plot comparison of all metrics corresponding to the coverage ability","dd84234a":"### Functions used to compute metrics for evaluating cornerback's performance","9fffc24d":"### Functions used to collect tracking data from a set of plays for each cornerback \n\nFor each cornerback, we selected a set of 100 plays as a representation of all plays for the cornerback.\n\nThen the corresponding tracking data of each selected play is collected from the corresponding week.\n\nThe collected tracking data is filtered according to the event being considered, where 0 covers timestamps from ball snap to pass forward events indicating tracking data before the ball is thrown and 1 covers timestamps from pass forward to non-None events indicating tracking data during the ball is in the air.\n\nThe event filtered data is seperated based on the position of players (defense: CB, offense: WR and TE)","c6f00b28":"### Functions used to identify a closest offensive player and another cornerback for each timestamp during a play of a given cornerback","3dc0dab7":"Here, we compute personal ability and coverage abilty for the metrics of each cornerback.\nFor simplicity, we use the same set of weights for both events (i.e., before the ball is thrown and during the ball is in the air).\nNote that a weigth of each metric is assigned subjectively; it can be changed to better indicate the importance of the corresponding metric in measuring the cornerback's ability.","f5fed4ca":"Plot to show performance of 40 cornerbacks with respect to their scores corresponding to the particular events (before the ball is passed and during the ball is in the air)","f6189181":"**As mentioned earlier, the metrics corresponding to a cornerback were computed from merely 100 sample plays, which still left a lot of variance for the whole population unexplained.**\n\n**We believe that computing these metrics from a larger amount of samples should yield us a better score that reflect the true performance of a cornerback!!!**","cb372c08":"Compute score for each event in order to rank cornerbacks who perform best during each event and both events","3d2dd243":"We can see from the scores that Stephon Gilmore is the best one among these top example cornerbacks both when before the ball is thrown and when the ball is in the air (and total score, of course!). Xavien Howard comes second in terms of the total score as he is the second best cornerback when the ball is in the air. Patrick Peterson is the third best cornerback in total score. Jalen Ramsey is the fourth best among these top cornerbacks. Even though he is the second best cornerback before the ball is thrown, he is the last one when the ball is in the air.","9e2b79b8":"Top 10 cornerbacks (out of 40) for both events","e2872139":"### Functions used to collect tracking data corresponding to a given cornerback and his closest offensive player during the specified event within each selected play","dbfcf473":"Here. we compute score to evaluate performance for each cornerback.\nFor simplicity, we use the same set of weights for both events (i.e., before the ball is thrown and during the ball is in the air). ","e84334a0":"Here, we compute personal ability and coverage abilty for the metrics of each cornerback. For simplicity, we use the same set of weights for both events (i.e., before the ball is thrown and during the ball is in the air). Note that a weigth of each metric is assigned subjectively; it can be changed to better indicate the importance of the corresponding metric in measuring the cornerback's ability.","2b7b04c1":"### In order to save time and resources, we have used tracking data of the first 40 cornerbacks in 'players.csv' and randomly selected 100 plays from the first 5 weeks (out of 17 weeks) that associate with each selected cornerback to compute the metrics and his score\n\nThat is we assume that these 100 sample plays are (good) representation of the whole population (all plays that a cornerback has played).\n\nNote that different sets of sample plays could lead to totally different estimations of the metrics associated with a particular cornerback. To better capture the variance of the whole population, therefore we should use more samples to compute the metrics (the best case is using all plays), which should lead to more consistent estimation of each metric.\n\nThe collected tracking data of both events are stored separately using pickle, where cb_tracking_dat_0.p keeps tracking data before the ball is thrown and cb_tracking_dat_1.p keeps tracking data during the ball is in the air.  ","a895de9a":"Top 10 cornerbacks (out of 40) during the ball is in the air","059f602c":"Interestingly, all metrics (except orientation) corresponding to the coverage ability of Damarious Randall significantly decrease from before the ball is thrown to the ball is in the air. Highly declining of these metrics probably indicate that this player usually change coverage schemes from man (before the ball is thrown) to zone (the ball is in the air).","4ae256d4":"assign closest distance threshold and compute all metrics on both events for each CB","6a69d09e":"Top 10 cornerbacks (out of 40) before the ball is passed","6e7af111":"### Weighted sum of the above metrics to measure personal and coverage abilities of a cornerback and weighted sum of both abilities to produce the overall score"}}