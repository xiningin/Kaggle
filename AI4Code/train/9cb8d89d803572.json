{"cell_type":{"892f4665":"code","2438170e":"code","202f0771":"code","dffa120c":"code","daf332ae":"code","91ceb84e":"code","8a1d3a41":"code","5735eac4":"code","30853f63":"code","cd70507f":"code","6f75bbec":"code","106febf7":"code","df3050ba":"code","3d8b82fa":"code","d8ed06ea":"code","7961a658":"code","c0b1064c":"code","90478d35":"markdown","e3a22aa9":"markdown","dd9b3183":"markdown","0073b58a":"markdown","21e754ef":"markdown","047d3dbb":"markdown","bca6e29a":"markdown","e2985019":"markdown","bebb6929":"markdown","fb59e99a":"markdown","6bc32935":"markdown"},"source":{"892f4665":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import LabelEncoder","2438170e":"TRAIN_DIR = '..\/input\/breast-cancer-wisconsin-data\/data.csv'","202f0771":"train = pd.read_csv(TRAIN_DIR, sep=',', header=0)\ntrain = train.drop(['id', 'Unnamed: 32'], axis = 1)","dffa120c":"train.head()","daf332ae":"train.shape","91ceb84e":"train.describe()","8a1d3a41":"X = train.drop(['diagnosis'], axis=1)\ny = train['diagnosis'].apply(lambda x: 1 if x=='M' else -1)\nprint(f'X shape: {X.shape}')\nprint(f'y shape: {y.shape}')","5735eac4":"import matplotlib.pyplot as plt\nimport seaborn as sns","30853f63":"sns.countplot(y)","cd70507f":"fig = plt.figure(figsize=(24, 18))\nfor i in range(len(X.columns)):\n    plt.subplot(5, 6, i+1)\n    plt.title(X.columns[i])\n    plt.hist(X[X.columns[i]][y==-1], bins=25, color='lightblue', label='B-healthy')\n    plt.hist(X[X.columns[i]][y==1], bins=25, color='grey', label='M-bad')","6f75bbec":"from sklearn.model_selection import cross_val_score","106febf7":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\ncross_val_score(logreg, X, y, cv=8).mean()","df3050ba":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(max_depth=6)\ncross_val_score(dt, X, y, cv=8).mean()","3d8b82fa":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=20)\ncross_val_score(rf, X, y, cv=8).mean()","d8ed06ea":"from sklearn.ensemble import AdaBoostClassifier\nada = AdaBoostClassifier(n_estimators=200)\ncross_val_score(ada, X, y, cv=8).mean()","7961a658":"from sklearn.base import BaseEstimator\nclass AdaBoost(BaseEstimator):    \n    def __init__(self, n_estimators):\n        self.n_estimators = n_estimators \n        \n    def fit(self, X, y):\n        self.models = []\n        self.model_weights = []\n        \n        num_samples = X.shape[0]\n        alpha = np.ones(num_samples) \/ num_samples\n        \n        for m in range(self.n_estimators):\n            tree = DecisionTreeClassifier(max_depth=3)\n            tree.fit(X, y, sample_weight=alpha)\n            prediction = tree.predict(X)\n            weighted_error = alpha.dot(prediction != y)\n            \n            model_weight = 0.5 * (np.log(1 - weighted_error) - np.log(weighted_error))\n            \n            alpha = alpha * np.exp(-model_weight * y * prediction)\n            alpha = alpha \/ alpha.sum()\n            \n            self.models.append(tree)\n            self.model_weights.append(model_weight)          \n              \n    def predict(self, X):\n        num_samples = len(X)\n        results = np.zeros(num_samples)\n        for model, model_weight in zip(self.models, self.model_weights):\n            results += model_weight * model.predict(X)\n        return np.sign(results)\n    \n    def score(self, X, y):\n        prediction = self.predict(X)\n        return np.mean(prediction == y)","c0b1064c":"ada2 = AdaBoost(n_estimators=200)\ncross_val_score(ada2, X, y, cv=8).mean()","90478d35":"# Explantory Data Analyisis - Take a look at the Features","e3a22aa9":"Kaggle: https:\/\/www.kaggle.com\/uciml\/breast-cancer-wisconsin-data","dd9b3183":"# Explantory Data Analyisis - Take a look at the Label","0073b58a":"1.Logistic Regression","21e754ef":"4.Adaboost","047d3dbb":"5.AdaBoost (Manual Implementation)","bca6e29a":"# Prepare Data","e2985019":"2.Decision Tree","bebb6929":"# Explantory Data Analyisis - Take a Glance at the Data","fb59e99a":"# Models","6bc32935":"3.Random Forest"}}