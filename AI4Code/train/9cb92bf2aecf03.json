{"cell_type":{"8da8d454":"code","7ec095dd":"code","5d249059":"code","4551be5a":"code","27c1ee53":"code","82afe635":"code","9b545cc2":"code","b47b3ed7":"code","df903104":"code","05bd8cef":"code","6a89038b":"code","e96a0c7f":"code","155646a5":"code","ab02506b":"code","d3091d67":"code","3931d110":"code","0b5c6318":"code","2af23374":"code","3296cd2f":"code","bde0ad0f":"code","b6fa08b1":"code","925043da":"code","77a63965":"code","dd17fa47":"code","68a9e621":"code","f7bd8fa1":"code","bed1b926":"code","e063419a":"code","86632eab":"code","a6cdf470":"code","d40157fd":"code","dfbcc803":"code","9e027830":"code","39a4fbab":"code","a0168597":"code","36679dd7":"code","ef711b76":"code","2a604bbe":"code","7db30a8d":"code","683c3a75":"code","8e4bdc6e":"code","c0d8d6b7":"code","dd9bfacc":"code","3631f68b":"code","5fced80e":"code","e27da347":"code","06b6ee01":"code","ea61cc5b":"code","0d539019":"code","09106442":"code","9f1aba96":"markdown","d2cb281b":"markdown","bc69c204":"markdown","a5906480":"markdown","1d1d8872":"markdown","c5f54af8":"markdown","bae8e182":"markdown","2f58f7ff":"markdown","c045c08e":"markdown","e9b7fc21":"markdown","db225765":"markdown","38bae166":"markdown","e971a281":"markdown","995f6177":"markdown","ae50bd6a":"markdown","4f640ba9":"markdown","28a1a535":"markdown","5a57c4c6":"markdown","96cea51d":"markdown","40044a87":"markdown","1740aacc":"markdown","d2580eee":"markdown","a84b261a":"markdown","fe576600":"markdown","198b8826":"markdown","23418461":"markdown","53d546c4":"markdown"},"source":{"8da8d454":"import os\nos.listdir(\"..\/input\")","7ec095dd":"import pandas as pd\ndatos= pd.read_csv('..\/input\/Consumo_cerveja.csv',index_col='Data')","5d249059":"datos.info()","4551be5a":"datos=datos.dropna()\nimport pandas as pd\ndef convertir(x):\n    y=x.replace(',','.')\n    return pd.to_numeric(y)","27c1ee53":"datos[datos.columns[1]].head()","82afe635":"datos[datos.columns[1]].apply(convertir).head()","9b545cc2":"var=datos.columns[:4]\nfor col in var:\n    datos[col]=datos[col].apply(convertir)","b47b3ed7":"datos.info()","df903104":"import calendar\nfecha=pd.to_datetime('2019-01-15',format='%Y-%m-%d')\ncalendar.day_name[fecha.weekday()]","05bd8cef":"fecha2=pd.to_datetime(datos.index,format='%Y-%m-%d')\n#datos['NomDia']=fecha2.weekday_name.values\ndatos['numDia']=fecha2.dayofweek\ndays = {0:'1.Lun',1:'2.Mar',2:'3.Mie',3:'4.Jue',4:'5.Vie',5:'6.Sab',6:'7.Dom'}\ndatos['NomDia'] =datos['numDia'].apply(lambda x: days[x])\ndatos['NomDia']=pd.Categorical(datos['NomDia'])","6a89038b":"datos.info()","e96a0c7f":"series=datos['Consumo de cerveja (litros)']","155646a5":"import matplotlib.pyplot as plt\nplt.figure(figsize=(14,6))\nplt.plot(series)\nplt.title('Consumo de cerveja (litros)')\nplt.show()","ab02506b":"import statsmodels.api as sm\nimport matplotlib.pyplot as plt\nres = sm.tsa.seasonal_decompose(series,freq=60)\nfig = res.plot()\nfig.set_figheight(8)\nfig.set_figwidth(15)\nplt.show()","d3091d67":"window=3\ny_ajust=series.rolling(window=window).mean()\npd.DataFrame({'Y':series.head(6).values,'Y_ajust':y_ajust.head(6)})","3931d110":"import matplotlib.pyplot as plt \nwindow=60\nseries=datos['Consumo de cerveja (litros)']\nrolling_mean = series.rolling(window=window).mean()\nplt.figure(figsize=(18,4))\nplt.plot(series.values, \"c\", label = \"Actual\")\nplt.title(\"Moving average\\n window size = {}\".format(window))\nplt.plot(rolling_mean,color='red',label=\"MA\")\nplt.legend(loc=\"best\")\nplt.show()","0b5c6318":"def SuavizacionExponencialSimple(series, alpha):\n    result = [series[0]]\n    for n in range(1, len(series)):\n        result.append(alpha * series[n] + (1 - alpha) * result[n-1])\n    return result","2af23374":"def plotSuavizacionExponencialSimple(series, alphas):\n    plt.figure(figsize=(18,4))\n    plt.plot(series.values, \"c\", label = \"Actual\")\n    for alpha in alphas:\n        plt.plot(SuavizacionExponencialSimple(series, alpha), label=\"Alpha {}\".format(alpha),color=\"red\")    \n    plt.legend(loc=\"best\")\n    plt.title(\"Suavizacion Exponencial Simple\",fontsize=16)","3296cd2f":"plotSuavizacionExponencialSimple(series,[0.3])","bde0ad0f":"def SuavizacionHolt(series, alpha, beta):\n    result = [series[0]]\n    for n in range(1, len(series)+1):\n        if n == 1:\n            level, trend = series[0], series[1] - series[0]\n        if n >= len(series):\n            value = result[-1]\n        else:\n            value = series[n]\n        last_level, level = level, alpha*value + (1-alpha)*(level+trend)\n        trend = beta*(level-last_level) + (1-beta)*trend\n        result.append(level+trend)\n    return result","b6fa08b1":"def plotSuavizacionHolt(series, alphas, betas):\n    plt.figure(figsize=(18,4))\n    plt.plot(series.values, \"c\", label = \"Actual\")\n    for alpha in alphas:\n        for beta in betas:\n            plt.plot(SuavizacionHolt(series, alpha, beta), label=\"Alpha {}, beta {}\".format(alpha, beta),color=\"red\")\n    plt.title(\"Suavizaci\u00f3n mediante el m\u00e9todo de Holt\",fontsize=16)\n    plt.legend(loc=\"best\")\n    plt.show()","925043da":"plotSuavizacionHolt(series,alphas=[0.2],betas=[0.1])","77a63965":"import matplotlib.pyplot as plt\n\nseries=datos['Consumo de cerveja (litros)']\nplt.figure(figsize=(20,5))\nplt.plot(series)\nplt.title('Consumo de cerveja (litros)')\nplt.show()","dd17fa47":"import seaborn as sns \nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfig,axes = plt.subplots(1,3,figsize=(18,6))\n#Gr\u00e1fica01\nsns.distplot(datos['Consumo de cerveja (litros)'],ax=axes[0],hist_kws=dict(edgecolor=\"b\", linewidth=2))\naxes[0].set_title('Histograma del Consumo', fontsize=16)\naxes[0].set_xlabel('Consumo de cerveja (litros)',fontsize=16)\n#Gr\u00e1fica02\ncolor=sns.color_palette('husl',7)\nfor i in range(7):\n    sns.kdeplot(datos['Consumo de cerveja (litros)'][(datos[\"numDia\"] ==i)],shade=True,color=color[i],label=days[i],ax=axes[1])\naxes[1].set_title('Consumo por nombre de d\u00eda', fontsize=16)\naxes[1].set_xlabel('Consumo de cerveja (litros)',fontsize=16)\n#Gr\u00e1fica03\nsns.boxplot(y='NomDia',x='Consumo de cerveja (litros)',data=datos,ax=axes[2],palette=color)\naxes[2].set_title('Consumo por nombre de d\u00eda', fontsize=16)\naxes[2].set_ylabel('',fontsize=18)\naxes[2].set_xlabel('Consumo de cerveja (litros)',fontsize=16)\nplt.show()","68a9e621":"from scipy.stats import skew\nfrom scipy.stats import kurtosis\nimport numpy as np\nResumen2=datos.groupby(['NomDia'])['Consumo de cerveja (litros)'].agg([np.mean,np.median,np.std,skew,kurtosis])\nResumen2","f7bd8fa1":"def inversa_boxcox(y, lambda_):\n    return np.exp(y) if lambda_ == 0 else np.exp(np.log(lambda_ * y + 1) \/ lambda_)","bed1b926":"import numpy as np\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split\n\ntrain,test = train_test_split(series, shuffle=False)\ntrain_data,fitted_lambda = stats.boxcox(train)\n\ntest_data = stats.boxcox(test, fitted_lambda)\ntest_datat1= inversa_boxcox(test_data,fitted_lambda)","e063419a":"fig,ax = plt.subplots(1,2,figsize=(18,6))\nax[0].plot(test)\nax[1].plot(test_data)\nplt.show()","86632eab":"import pandas as pd\npd.DataFrame({'Desviaci\u00f3n':['Datos Originales','Transformados'],\n              'Valor':[np.std(test),np.std(test_data)]})","a6cdf470":"fig,ax = plt.subplots(1,2,figsize=(16,6))\nsns.distplot(test, ax=ax[0],hist_kws=dict(edgecolor=\"b\", linewidth=2))\nsns.distplot(test_data, ax=ax[1],hist_kws=dict(edgecolor=\"b\", linewidth=2))\nplt.show()","d40157fd":"import pandas as pd\nrolmean = series.rolling(window=60).mean()\nrolstd = series.rolling(window=60).std()\n\nfig,ax = plt.subplots(figsize=(16,6))\norig = plt.plot(series, color='blue',label='Original')\nmean = plt.plot(rolmean, color='red', label='Rolling Mean')\nstd  = plt.plot(rolstd, color='black', label = 'Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show()","dfbcc803":"from statsmodels.tsa.stattools import adfuller\ntest1 = adfuller(series, autolag='AIC')\ntest1\ndfoutput = pd.Series(test1[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nprint (dfoutput)","9e027830":"import numpy as np\nnp.random.seed(1)\nn_samples = 1000\nx1=w=np.random.normal(size=n_samples)","39a4fbab":"import seaborn as sns \nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfig,ax=plt.subplots(figsize=(10,6))\nsns.distplot(x1,hist_kws=dict(edgecolor=\"b\", linewidth=2))\nplt.show()","a0168597":"for t in range(n_samples):\n    x1[t] = 0.69*x1[t-1]+ w[t]","36679dd7":"import seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfig,ax = plt.subplots(1,2,figsize=(20,6))\nfig = sm.graphics.tsa.plot_acf(x1, lags=60,ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(x1,lags=60,ax=ax[1])","ef711b76":"import seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nx2=w=np.random.normal(size=n_samples)\nfor t in range(n_samples):\n    x2[t] = 0.39*x2[t-1]+0.49*x2[t-2]+w[t]\n\nfig,ax = plt.subplots(1,2,figsize=(20,6))\nfig = sm.graphics.tsa.plot_acf(x2, lags=60,ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(x2,lags=60,ax=ax[1])","2a604bbe":"import seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nx3=w=np.random.normal(size=n_samples)\nfor t in range(n_samples):\n    x3[t] = 0.39*x3[t-1]+0.49*x3[t-7]+w[t]\n\nfig,ax = plt.subplots(1,2,figsize=(20,6))\nfig = sm.graphics.tsa.plot_acf(x3, lags=60,ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(x3,lags=60,ax=ax[1])","7db30a8d":"import seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nx4=w=np.random.normal(size=n_samples)\nfor t in range(n_samples):\n    x4[t] = 0.49*x4[t-1]+0.2*x4[t-7]+0.2*x4[t-14]+w[t]\n\nfig,ax = plt.subplots(1,2,figsize=(20,6))\nfig = sm.graphics.tsa.plot_acf(x4, lags=60,ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(x4,lags=60,ax=ax[1])","683c3a75":"import seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nx5=w=np.random.normal(size=n_samples)\nfor t in range(n_samples):\n    x5[t] = 0.4*x5[t-1]+0.15*x5[t-7]+0.15*x5[t-14]+0.15*x5[t-21]+w[t]\n\nfig,ax = plt.subplots(1,2,figsize=(20,6))\nfig = sm.graphics.tsa.plot_acf(x5, lags=60,ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(x5,lags=60,ax=ax[1])","8e4bdc6e":"import statsmodels.api as sm\nimport matplotlib.pyplot as plt\n\nfig,ax = plt.subplots(2,1,figsize=(20,8))\nfig = sm.graphics.tsa.plot_acf(series, lags=120, ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(series, lags=120, ax=ax[1])\nplt.show()","c0d8d6b7":"import statsmodels.tsa.api as smt\nmodelo1 = smt.AR(x1).fit(maxlag=30, ic='aic', trend='nc')\nprint(modelo1.params)","dd9bfacc":"import statsmodels.tsa.api as smt\nmodelo2 = smt.AR(x2).fit(maxlag=30, ic='aic', trend='nc')\nprint(modelo2.params[0],modelo2.params[1])","3631f68b":"max_lag = 30\nmodelo1 = smt.ARMA(x1, order=(1,0)).fit(maxlag=max_lag, method='mle', trend='nc')\nmodelo1.summary()","5fced80e":"max_lag = 30\nmodelo2 = smt.ARMA(x2, order=(2,0)).fit(maxlag=max_lag, method='mle', trend='nc')\nmodelo2.summary()","e27da347":"import pandas as pd\ndatos1= pd.read_csv('..\/input\/DatosEjemploSeries.csv',sep=\";\")#index_col='Data'\nfechas= pd.read_csv('..\/input\/fechas.csv',sep=\";\")#index_col='Data'","06b6ee01":"datos1=datos1.drop('Date',axis=1).rename(pd.to_datetime(datos1['Date']),axis='index')","ea61cc5b":"datos1.head()","0d539019":"datos1.info()","09106442":"fechas.head()","9f1aba96":"### **DESCOMPOSICI\u00d3N DE UNA SERIE DE TIEMPO**\nPermite identificar los componentes de una serie para posteriormente construir un pron\u00f3stico.\n\n\n![Imagen7](https:\/\/i.imgur.com\/vqYbFII.png)","d2cb281b":"### Graficando la descomposici\u00f3n de la serie de tiempo","bc69c204":"## SIMULACI\u00d3N DE DATOS\n---\n\n### Modelo 01: $Y_{t}=\\alpha_{1} Y_{t-1}+e_{t}$\n\n![Imagen2](https:\/\/i.imgur.com\/hBcPbUS.png)","a5906480":"## **Media m\u00f3vil simple**\n\n## $$\\tilde{Y_t}=\\frac{Y_{t}+Y_{t-1}+Y_{t-r+1}}{r}$$","1d1d8872":"### **COMPONENTES DE UNA SERIE DE TIEMPO**\n\n![Imagen2](https:\/\/i.imgur.com\/g0PQASf.png)\n\n**Conclusi\u00f3n**: Para entender una serie necesitamos descomponerlo en sus componentes.","c5f54af8":"## **CONCEPTOS PRELIMINARES**\n---\nEn un periodo de tiempo podemos encontrarnos con los siguientes grupos:\n\n### **GRUPOS**\n---\n#### **1. COHORTE**\nConjunto de individuos que han experimentado cierto acontecimiento en un mismo periodo de tiempo\n\n\n#### **2. GENERACI\u00d3N**\nConjunto de individuos que han nacido en un periodo de tiempo\n\n### **TIPOS DE DATOS**\n---\nSeg\u00fan (Damodar Gujarati, 2010) los datos pueden ser de distintas naturalezas, entre las que se tiene:\n\n#### ** 1. DATOS LONGITUDINALES**\nCuando fijo el grupo de individuos(Cohorte o Generaci\u00f3n) y se miden sus caracteristicas a trav\u00e9s del tiempo.\n\n#### **2. DATOS TRANSVERSALES**\nCuando fija el periodo de tiempo a estudiar y se recopila la informaci\u00f3n.\n\n#### **3. SERIES TEMPORALES**\nConjunto de observaciones sobre los valores de una variable en diferentes momentos.\n\n### **COMPORTAMIENTOS**\n---\n\n#### **1. TENDENCIA**\n\nSe refiere al patron de crecimiento o declinaci\u00f3n.\n\n![Imagen3](https:\/\/i.imgur.com\/iFfi480.png)\n\n#### **2. ESTACIONALIDAD**\nSe refiere a un patr\u00f3n regularmente recurrente a trav\u00e9s del tiempo (trimestres, mes o semana)\n\n![Imagen4](https:\/\/i.imgur.com\/Kd9GLwB.png)\n\n\n#### **3. ALEATORIEDAD**\nEste comportamiento irregular est\u00e1 compuesto por fluctuaciones causadas por sucesos impredecibles o no peri\u00f3dicos.\n\n![Imagen5](https:\/\/i.imgur.com\/bTRCRvE.png)\n\n#### **4. ESTACIONARIA**\nEs aquella serie de datos cuyas propiedades estad\u00edsticas b\u00e1sica, como media y la varianza, permanecen constantes en el tiempo, se dice que una serie que no presenta crecimiento o declinaci\u00f3n es estacionaria.\n\n![Imagen6](https:\/\/i.imgur.com\/7vuljRx.png)","bae8e182":"### **MODELOS DE REDES NEURONALES**","2f58f7ff":"### **CASO 01**: Ploteo de la Autocorrelaci\u00f3n(AC) y  Autocorrelaci\u00f3n parcial (ACP)","c045c08e":"### **COMPROBRAR ESTACIONARIEDAD**\n\n### **Test Dickey Fuller**\n\n* Ho: La serie es no estacionaria\n* H1: La serie es estacionaria","e9b7fc21":"## **Suavizaci\u00f3n exponencial simple**\n<br>\nEl nivel o media ($\\ell_t$) es estimado mediante:\n### $$\\ell_t = \\alpha \\cdot y_t + (1-\\alpha) \\cdot \\ell_{t-1} $$\n\nFunci\u00f3n de pron\u00f3stico plana, el pron\u00f3stico de horizonte h a partir del tiempo t:\n### $$\\hat{y}_{t+h} = \\ell_t$$\n","db225765":"## **Suavizaci\u00f3n mediante el m\u00e9todo de Holt**\n<br>\nPermite cambios en el nivel y la tasa de crecimiento o decrecimiento:\n\nLa actualizaci\u00f3n del nivel se da mediante: \n### $$\\ell_t = \\alpha y_t + (1-\\alpha)(\\ell_{t-1} + b_{t-1})$$\n\nLa actualizaci\u00f3n de la tasa de cambio se da mediante:\n### $$b_x = \\beta(\\ell_t - \\ell_{t-1}) + (1-\\beta)b_{t-1}$$\n\nEl pron\u00f3stico de horizonte h a partir del tiempo t:\n### $$\\hat{y}_{t+h} = \\ell_t +h\\cdot b_t$$\n","38bae166":"### Modelo 05: $Y_{t}=\\alpha_{1} Y_{t-1}+\\alpha_{2} Y_{t-7}+\\alpha_{3} Y_{t-14}+\\alpha_{4} Y_{t-21}+e_{t}$\n\n![Imagen2](https:\/\/i.imgur.com\/viqnp9o.png)","e971a281":"### Modelo 03: $Y_{t}=\\alpha_{1} Y_{t-1}+\\alpha_{2} Y_{t-7}+e_{t}$\n\n![Imagen2](https:\/\/i.imgur.com\/XXQVeHe.png)\n","995f6177":"![Imagen3](https:\/\/i.imgur.com\/U6dCENV.png)","ae50bd6a":"### **CONCLUSI\u00d3N**:\n\n### Posible Modelo:\n## $$Y_{t}=\\alpha 1 Y_{t-1}+\\alpha 2 Y_{t-7}+\\alpha 3 Y_{t-14}+\\alpha 4 Y_{t-21}+e_t$$\n\n### Graf\u00edca:\n\n![Imagen2](https:\/\/i.imgur.com\/viqnp9o.png)","4f640ba9":"### Modelo 02: $Y_{t}=\\alpha_{1} Y_{t-1}+\\alpha_{2} Y_{t-2}+e_{t}$\n\n![Imagen2](https:\/\/i.imgur.com\/EnUDWRJ.png)","28a1a535":"## **Modelos de suavizaci\u00f3n**\n\nEstos m\u00e9todos eliminan las fluctuaciones aleatorias de la serie de tiempo, proporcionando datos menos distorsionados del comportamiento real de misma.\n\n### **1. Series estacionarias**\n * Media m\u00f3vil simple\n * Suavizaci\u00f3n exponencial simple\n\n### **2. Series con tendencia**\n * Suavizaci\u00f3n mediante el m\u00e9todo de Holt\n\n### **3. Series estacionales con tendencia**\n  * Suavizaci\u00f3n mediante el m\u00e9todo de Holt Winters\n\n","5a57c4c6":"### **TRANSFORMACI\u00d3N DE BOX COX**\n\nAplicaremos la transformaci\u00f3n de Box-Cox a nuestra serie original para estabilizar la varianza.\n\n### $$\n\\begin{equation}\n  boxcox^{(\\lambda)}(y_{i}) = \\begin{cases}\n    \\frac{\\displaystyle y_{i}^{\\lambda} - 1}{\\displaystyle \\lambda} &, \\text{if $\\lambda \\neq 0$}.\\\\\n    ln(y_{i}) &, \\text{if $\\lambda = 0$}.\n  \\end{cases}\n\\end{equation}\n$$\n\nNecesitaremos implementar el inverso de esta funci\u00f3n para poder restaurar la escala de datos original\n\n### $$\n\\begin{equation}\n  invboxcox^{(\\lambda)}(y_{i}) = \\begin{cases}\n    e^{\\left (\\frac{\\displaystyle ln(\\lambda y_{i} + 1)}{\\displaystyle \\lambda} \\right )} &, \\text{if $\\lambda \\neq 0$}.\\\\\n    e^{y_{i}} &, \\text{if $\\lambda = 0$}.\n  \\end{cases}\n\\end{equation}\n$$","96cea51d":"### Exploraci\u00f3n de datos","40044a87":"### **TIPOS DE COMPORTAMIENTOS**\n\n![Imagen1](https:\/\/i.imgur.com\/irGcs5k.png)\n\n**Comportamientos observados:**\n* Serie Estacionaria (sin tendencia y sin estacionalidad)\n* Serie con Tendencia y sin estacionalidad.\n* Serie sin tendencia y con estacionalidad.\n* Serie con tendencia y con estacionalidad.\n\n**Conclusi\u00f3n**: Una serie esta compuesto por varios comportamientos(Componentes)","1740aacc":"### Modelo 04: $Y_{t}=\\alpha_{1} Y_{t-1}+\\alpha_{2} Y_{t-7}+\\alpha_{3} Y_{t-14}+e_{t}$\n\n\n![Imagen2](https:\/\/i.imgur.com\/0HzeuJx.png)\n\n","d2580eee":"### **CASO 01**: Ploteo de la serie","a84b261a":"## METODOLOG\u00cdA BOX JENKINS\n\n![Imagen2](https:\/\/i.imgur.com\/ZQCYdNT.png)","fe576600":"# ** SERIES DE TIEMPO**\n\nUna serie de tiempo $Y_{t}$ es:\n* Un conjunto de observaciones $Y_{t}$ cada una recolectada en un tiempo espec\u00edfico t (Peter Brockwell, 2016).\n","198b8826":"### **CASO 01**: Ploteo de la serie","23418461":"![Imagen2](https:\/\/i.imgur.com\/c5McA0U.png)\n","53d546c4":"### **AUTOCORRELACI\u00d3N Y AUTOCORRELACI\u00d3N PARCIAL DE LAS SERIES DE TIEMPO**\n<br>\n![Imagen2](https:\/\/i.imgur.com\/zP6dIly.png)"}}