{"cell_type":{"36469187":"code","e2ce1d55":"code","e6ce2851":"code","ec14147c":"code","b0199c3a":"code","844558db":"code","3e5967c4":"code","d579b67d":"code","8c9a79aa":"code","7103341a":"code","0e189906":"code","57da511d":"code","1bb2f608":"code","076884cd":"code","8c7c9fc0":"code","f7f76aba":"code","711f3c32":"code","5e95cf30":"code","2c1d351d":"code","8a89071e":"code","4669e1e7":"code","2b0f3fb1":"code","dfb77101":"code","d2105da2":"code","4fe805a5":"code","68af3122":"code","a92f2568":"code","5e0e867d":"code","446dde21":"code","93cec85a":"code","5304f38c":"code","70b676c5":"code","9d43ddad":"code","710eb268":"code","bc6fdac3":"markdown"},"source":{"36469187":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2ce1d55":"import numpy as np\nimport pandas as pd\n\n# data visualization libraries:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n# to ignore warnings:\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to display all columns:\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier \nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nimport numpy as np, pandas as pd, os, gc\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn as sns\nimport lightgbm as lgb\nimport gc\nfrom time import time\nimport datetime\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, TimeSeriesSplit\nfrom sklearn.metrics import roc_auc_score\nwarnings.simplefilter('ignore')\nsns.set()\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np,gc # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\nimport numpy as np\nimport pandas as pd \nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nfrom sklearn.model_selection import StratifiedKFold\n!pip install ycimpute\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import datasets, metrics, model_selection, svm\nimport missingno as msno\nfrom ycimpute.imputer import iterforest,EM\nfrom fancyimpute import KNN\nfrom sklearn.preprocessing import OrdinalEncoder\n\nimport numpy as np\nimport pandas as pd \nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nimport numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import neighbors\nfrom sklearn.svm import SVR\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nfrom lightgbm import LGBMRegressor\nimport xgboost\nfrom xgboost import XGBRegressor\npd.set_option('display.max_columns', None)\nimport gc","e6ce2851":"train=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","ec14147c":"train.head()","b0199c3a":"test.head()","844558db":"# FREQUENCY ENCODE TOGETHER\ndef encode_FE(df1, df2, cols):\n    for col in cols:\n        df = pd.concat([df1[col],df2[col]])\n        vc = df.value_counts(dropna=True, normalize=True).to_dict()\n        vc[-1] = -1\n        nm = col+'_FE'\n        df1[nm] = df1[col].map(vc)\n        df1[nm] = df1[nm].astype('float32')\n        df2[nm] = df2[col].map(vc)\n        df2[nm] = df2[nm].astype('float32')\n        print(nm,', ',end='')\n        \n# LABEL ENCODE\ndef encode_LE(col,train,test,verbose=False):\n    df_comb = pd.concat([train[col],test[col]],axis=0)\n    df_comb,_ = df_comb.factorize(sort=True)\n    nm = col\n    if df_comb.max()>32000: \n        train[nm] = df_comb[:len(train)].astype('int32')\n        test[nm] = df_comb[len(train):].astype('int32')\n    else:\n        train[nm] = df_comb[:len(train)].astype('int16')\n        test[nm] = df_comb[len(train):].astype('int16')\n    del df_comb; x=gc.collect()\n    if verbose: print(nm,', ',end='')\n        \n# GROUP AGGREGATION MEAN AND STD\n# https:\/\/www.kaggle.com\/kyakovlev\/ieee-fe-with-some-eda\ndef encode_AG(main_columns, uids, aggregations, train_df, test_df, \n              fillna=True, usena=False):\n    # AGGREGATION OF MAIN WITH UID FOR GIVEN STATISTICS\n    for main_column in main_columns:  \n        for col in uids:\n            for agg_type in aggregations:\n                new_col_name = main_column+'_'+col+'_'+agg_type\n                temp_df = pd.concat([train_df[[col, main_column]], test_df[[col,main_column]]])\n                if usena: temp_df.loc[temp_df[main_column]==-1,main_column] = np.nan\n                temp_df = temp_df.groupby([col])[main_column].agg([agg_type]).reset_index().rename(\n                                                        columns={agg_type: new_col_name})\n\n                temp_df.index = list(temp_df[col])\n                temp_df = temp_df[new_col_name].to_dict()   \n\n                train_df[new_col_name] = train_df[col].map(temp_df).astype('float32')\n                test_df[new_col_name]  = test_df[col].map(temp_df).astype('float32')\n                \n                if fillna:\n                    train_df[new_col_name].fillna(-1,inplace=True)\n                    test_df[new_col_name].fillna(-1,inplace=True)\n                \n                print(\"'\"+new_col_name+\"'\",', ',end='')\n                \n# COMBINE FEATURES\ndef encode_CB(col1,col2,train,test):\n    nm = str(col1)+'_'+str(col2)\n    train[nm] = train[col1].astype(str)+'_'+train[col2].astype(str)\n    test[nm] = test[col1].astype(str)+'_'+test[col2].astype(str)\n    print(\"'\"+nm+\"'\",', ',end='')\n    encode_LE(nm,train,test)\n# GROUP AGGREGATION NUNIQUE\ndef encode_AG2(main_columns, uids, train_df, test_df):\n    for main_column in main_columns:  \n        for col in uids:\n            comb = pd.concat([train_df[[col]+[main_column]],test_df[[col]+[main_column]]],axis=0)\n            mp = comb.groupby(col)[main_column].agg(['nunique'])['nunique'].to_dict()\n            train_df[col+'_'+main_column+'_ct'] = train_df[col].map(mp).astype('float32')\n            test_df[col+'_'+main_column+'_ct'] = test_df[col].map(mp).astype('float32')\n            print(col+'_'+main_column+'_ct, ',end='')","3e5967c4":"main_columns=test._get_numeric_data().columns.drop(['Id'])\ncategorical_columns=test.columns.drop(main_columns)\ncategorical_columns=categorical_columns.drop(['Id'])","d579b67d":"# FREQUENCY ENCODE TOGETHER\nencode_FE(train, test, [ 'GarageCars', 'ExterQual',\"OverallQual\",\"BsmtQual\",\"Fireplaces\",\"KitchenQual\",\"CentralAir\",\"FullBath\",\"GrLivArea\"])\n# COMBINE FEATURES\nencode_CB('GarageCars', 'ExterQual',train,test)\nencode_CB(\"BsmtQual\",\"OverallQual\",train,test)\nencode_CB(\"Fireplaces\",\"KitchenQual\",train,test)\nencode_CB(\"CentralAir\",\"FullBath\",train,test)\nencode_CB('GarageCars_ExterQual','BsmtQual_OverallQual',train,test)\nencode_CB('Fireplaces_KitchenQual','CentralAir_FullBath' , train,test)\nencode_CB('GarageCars_ExterQual_BsmtQual_OverallQual' , 'Fireplaces_KitchenQual_CentralAir_FullBath' , train,test)\n# GROUP AGGREGATION MEAN AND STD\n#encode_AG(main_columns, ['GarageCars_ExterQual_BsmtQual_OverallQual' , 'Fireplaces_KitchenQual_CentralAir_FullBath' , 'GarageCars_ExterQual_BsmtQual_OverallQual_Fireplaces_KitchenQual_CentralAir_FullBath'], [\"mean\",\"std\"], train, test)\n#GROUP AGGREGATION NUNIQUE\nencode_AG2(categorical_columns, [\"MSSubClass\",\"OverallQual\"], train, test)","8c9a79aa":"train.head()","7103341a":"def make_corr(Vs):\n    cols = Vs.columns\n\n    plt.figure(figsize=(15,15))\n    sns.heatmap(train[cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\n    #plt.title(Vs[0]+' - '+Vs[-1],fontsize=14)\n    plt.show()\nmake_corr(train.loc[:,\"MSSubClass\":\"HouseStyle\"])","0e189906":"#test = pd.get_dummies(test, columns = [\"Neighborhood\"])\n#train=pd.get_dummies(train, columns = [\"Neighborhood\"])","57da511d":"encoder=OrdinalEncoder()\nimputer=KNN()\n\ndef encode(data):\n    '''function to encode non-null data and replace it in the original data'''\n    #retains only non-null values\n    nonulls = np.array(data.dropna())\n    #reshapes the data for encoding\n    impute_reshape = nonulls.reshape(-1,1)\n    #encode date\n    impute_ordinal = encoder.fit_transform(impute_reshape)\n    #Assign back encoded values to non-null values\n    data.loc[data.notnull()] = np.squeeze(impute_ordinal)\n    return data","1bb2f608":"main_columns=test._get_numeric_data().columns.drop(['Id'])\ncategorical_columns=test.columns.drop(main_columns)\ncategorical_columns=categorical_columns.drop(['Id'])","076884cd":"from sklearn import preprocessing\nfor i in categorical_columns:\n    lbe=preprocessing.LabelEncoder()\n    train[i]=lbe.fit_transform(train[i].astype(str))\n    test[i]=lbe.fit_transform(test[i].astype(str))","8c7c9fc0":"#for i in categorical_columns:\n  #      encode(train[i])\n  #      encode(test[i])","f7f76aba":"train=train.fillna(-1)\ntest=test.fillna(-1)","711f3c32":"for i in categorical_columns:\n    if (test[i].max()== train[i].max())&(train[i].max()<10):\n                test = pd.get_dummies(test, columns = [i])\n                train=pd.get_dummies(train, columns = [i])","5e95cf30":"train.shape, test.shape","2c1d351d":"\n\ny = train['SalePrice']\nX= train.drop(['Id',\"SalePrice\"], axis=1)\n\n","8a89071e":"models = [LGBMRegressor,\n          XGBRegressor,\n          GradientBoostingRegressor,\n          RandomForestRegressor,\n          DecisionTreeRegressor,\n          MLPRegressor,\n          KNeighborsRegressor,\n          SVR]","4669e1e7":"def compML(df, y, alg):\n    #train-test ayrimi\n    #for name, clf in zip(names, classifiers):\n    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.30,random_state=42)\n    #modelleme\n \n    model = alg().fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    RMSE = np.sqrt(mean_squared_error(y_test, y_pred))\n    model_name = alg.__name__\n    print(model_name, \"Model Test error:\",RMSE)","2b0f3fb1":"for i in models:\n    compML(X, y, i)","dfb77101":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.30,random_state=42)\nxgb = XGBRegressor().fit(X_train, y_train)\ny_pred = xgb.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","d2105da2":"xgb_params = {\"learning_rate\": [0.1,0.01,0.5],\n             \"max_depth\": [2,3,4,5,8],\n             \"n_estimators\": [100,200,500,1000,3000,6000],\n             \"colsample_bytree\": [0.4,0.7,1],\n             \"min_child_weight\":[0,1,2],\n            \"gamma\":[0.6,0.8,0.2],\n                       \"subsample\":[0.7,0.5,0.9],\n                       \"colsample_bytree\":[0.7,0.01,0.2],\n                       \n                       \"nthread\":[-1,-2],\n                       \"scale_pos_weight\":[1,2,5,7],\n                       \"seed\":[27,5,40,60],\n                       \"reg_alpha\":[0.0000,0.005,0.5,0.00006]}","4fe805a5":"#xgb_cv_model  = GridSearchCV(xgb,xgb_params, cv = 5, n_jobs = -1, verbose = 2).fit(X_train, y_train)","68af3122":"#xgb_cv_model.best_params_","a92f2568":"xgb_tuned = XGBRegressor(learning_rate=0.01,\n                       n_estimators=6000,\n                       max_depth=4,\n                       min_child_weight=0,\n                       gamma=0.6,\n                       subsample=0.7,\n                       colsample_bytree=0.7,\n                       objective='reg:linear',\n                       nthread=-1,\n                       scale_pos_weight=1,\n                       seed=27,\n                       reg_alpha=0.00006,\n                       random_state=42).fit(X_train, y_train)","5e0e867d":"y_pred = xgb_tuned.predict(X_test)","446dde21":"np.sqrt(mean_squared_error(y_test, y_pred))\n","93cec85a":"from sklearn.metrics import mean_absolute_error","5304f38c":"print(\"Mean Absolute Error : \" + str(mean_absolute_error(y_test, y_pred)))","70b676c5":"ids=test[\"Id\"]\ntest= test.drop([\"Id\"], axis=1).astype(\"float64\")","9d43ddad":"prediction=xgb_tuned.predict(test)\noutput=pd.DataFrame({\"Id\":ids, \"SalePrice\":prediction})\noutput.to_csv(\"submission_xgb.csv\", index=False)","710eb268":"ft_weights = pd.DataFrame(xgb_tuned.feature_importances_, columns=['weights'], index=X.columns)\nft_weights=ft_weights.reset_index()\nfeature_imp=ft_weights.head(60)\nfeature_imp.to_excel('feature_importances.xlsx')\nplt.figure(figsize=(20, 10))\nsns.barplot(x='weights', y=\"index\", data=feature_imp.sort_values(['weights'],ascending=False))\nplt.title('XGB Features (avg over folds)')\nplt.tight_layout()\nplt.show()\nplt.savefig('xgb_importances-01.png')","bc6fdac3":"Parameters for Linear Booster (booster=gblinear)\nlambda [default=0, alias: reg_lambda]\n\nL2 regularization term on weights. Increasing this value will make model more conservative. Normalised to number of training examples.\n\nalpha [default=0, alias: reg_alpha]\n\nL1 regularization term on weights. Increasing this value will make model more conservative. Normalised to number of training examples.\n\nupdater [default= shotgun]\n\nChoice of algorithm to fit linear model\n\nshotgun: Parallel coordinate descent algorithm based on shotgun algorithm. Uses \u2018hogwild\u2019 parallelism and therefore produces a nondeterministic solution on each run.\n\ncoord_descent: Ordinary coordinate descent algorithm. Also multithreaded but still produces a deterministic solution.\n\nfeature_selector [default= cyclic]\n\nFeature selection and ordering method\n\ncyclic: Deterministic selection by cycling through features one at a time.\n\nshuffle: Similar to cyclic but with random feature shuffling prior to each update.\n\nrandom: A random (with replacement) coordinate selector.\n\ngreedy: Select coordinate with the greatest gradient magnitude. It has O(num_feature^2) complexity. It is fully deterministic. It allows restricting the selection to top_k features per group with the largest magnitude of univariate weight change, by setting the top_k parameter. Doing so would reduce the complexity to O(num_feature*top_k).\n\nthrifty: Thrifty, approximately-greedy feature selector. Prior to cyclic updates, reorders features in descending magnitude of their univariate weight changes. This operation is multithreaded and is a linear complexity approximation of the quadratic greedy selection. It allows restricting the selection to top_k features per group with the largest magnitude of univariate weight change, by setting the top_k parameter.\n\ntop_k [default=0]\n\nThe number of top features to select in greedy and thrifty feature selector. The value of 0 means using all the features."}}