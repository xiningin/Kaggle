{"cell_type":{"f4c97840":"code","b6ad2462":"code","b1f414b6":"code","4f70fce2":"code","eded8fa8":"code","b81e195f":"code","71742ab3":"code","7123f516":"code","83f772a0":"code","1f1da30d":"markdown","79166305":"markdown","3a15cc6e":"markdown","752d0d8f":"markdown","e32eb43e":"markdown","79554875":"markdown","1ddf8d52":"markdown","f0b63152":"markdown"},"source":{"f4c97840":"# --------------------------------------------------\n# For NLP\nimport spacy\nimport re\n# --------------------------------------------------\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# --------------------------------------------------\n# For Reproducibility - setting the random seed\nimport numpy as np # linear algebra\nimport random\nimport IPython\nimport subprocess\n# --------------------------------------------------","b6ad2462":"# --------------------------------------------------\nMY_SEED = 42\n# --------------------------------------------------\n# set random seeds\nrandom.seed(MY_SEED)\nnp.random.seed(MY_SEED)\n# torch.manual_seed(MY_SEED)\n# transformers.set_seed(MY_SEED)\n# tf.random.set_seed(MY_SEED)\n# --------------------------------------------------\n\n# --------------------------------------------------\n# print system information (but not packages)\nprint(\"=====\"*10)\nprint(\"IPython.sys_info()\")\nprint(IPython.sys_info())\nprint(\"=====\"*10)\n\n# get module information\n!pip freeze > frozen-requirements.txt\n\n# append system information to file\nwith open(\"IPython.sys_info.txt\", \"w\") as file:\n    file.write(IPython.sys_info())\n# --------------------------------------------------\n\n# --------------------------------------------------\n# Check CPU\nprint(\"=====\"*10)\nprint(\"CPU\")\nprint((subprocess.check_output(\"lscpu\", shell=True).strip()).decode())\nprint(\"=====\"*10)\n# --------------------------------------------------\n\n# --------------------------------------------------\n# Check GPU\nprint(\"=====\"*10)\nprint(\"GPU\")\ngpu_info = !nvidia-smi\ngpu_info = '\\n'.join(gpu_info)\nif gpu_info.find('failed') >= 0:\n      print('Settings >> Accelerator >> GPU')\nelse:\n      print(gpu_info)\nprint(\"=====\"*10)\n# --------------------------------------------------","b1f414b6":"CSV_FILE = \"\/kaggle\/input\/syllabus-corpus\/extracted.csv\"\nOUTPUT_CSV = \"logistical_info.csv\"\nnlp = spacy.load(\"en_core_web_sm\")\ndf = pd.read_csv(CSV_FILE)","4f70fce2":"\"\"\"\nNote that all of the following regular expressions have 2 or more matching groups.\nThe results of the 2nd & onward groups will be saved into a dataframe.\n\"\"\"\nINSTRUCTOR_REGEX = r\"^(instructor)[: ]?(.*)$\"\nEMAIL_REGEX = r\"^(email)[: ]?(.*)$\"\nOFFICE_REGEX = r\"^(office)[: ]?(.*)$\"\nPHONE_REGEX = r\"^(phone)[: ]?(.*)$\"\nCOURSE_REGEX = r\"(^)(\\w*[: ]?\\d*)(.*)$\"\nQUARTER_REGEX = r\"^(.*)(winter|spring|summer|fall)[ ]?(.*)$\"\n\nREGEX_FLAGS = re.IGNORECASE | re.MULTILINE","eded8fa8":"\"\"\"\nAll of these functions assume that the regular expressions have 2 or more matching groups.\n\"\"\"\n\ndef _get_first_result(list_of_re_matches, index=0, default=None):\n    if len(list_of_re_matches) == 0:\n        return default\n    else:\n        first_match = list_of_re_matches[index]\n        result = \" \".join(first_match[1:])\n        return result    \n\ndef get_instructor(ocr_text):\n    all_matches = re.findall(INSTRUCTOR_REGEX, str(ocr_text), REGEX_FLAGS)\n    return _get_first_result(all_matches)\n\ndef get_email(ocr_text):\n    all_matches = re.findall(EMAIL_REGEX, str(ocr_text), REGEX_FLAGS)\n    return _get_first_result(all_matches)\n\ndef get_office(ocr_text):\n    all_matches = re.findall(OFFICE_REGEX, str(ocr_text), REGEX_FLAGS)\n    return _get_first_result(all_matches)\n\ndef get_phone(ocr_text):\n    all_matches = re.findall(PHONE_REGEX, str(ocr_text), REGEX_FLAGS)\n    return _get_first_result(all_matches)\n\ndef get_course(ocr_text):\n    all_matches = re.findall(COURSE_REGEX, str(ocr_text), REGEX_FLAGS)\n    return _get_first_result(all_matches)\n\ndef get_quarter(ocr_text):\n    all_matches = re.findall(QUARTER_REGEX, str(ocr_text), REGEX_FLAGS)\n    return _get_first_result(all_matches)","b81e195f":"df[\"instructor\"] = df[\"ocr_text\"].apply(lambda x: get_instructor(x))\ndf[\"email\"] = df[\"ocr_text\"].apply(lambda x: get_email(x))\ndf[\"office\"] = df[\"ocr_text\"].apply(lambda x: get_office(x))\ndf[\"phone\"] = df[\"ocr_text\"].apply(lambda x: get_phone(x))\ndf[\"course\"] = df[\"ocr_text\"].apply(lambda x: get_course(x))\ndf[\"quarter\"] = df[\"ocr_text\"].apply(lambda x: get_quarter(x))","71742ab3":"first_cols = [\"Position\", \"instructor\", \"email\", \"office\", \"phone\", \"course\", \"quarter\"]\ndf = df[ first_cols + [ col for col in df.columns if col not in first_cols ] ]","7123f516":"df.head()","83f772a0":"df.to_csv(OUTPUT_CSV)","1f1da30d":"## Save CSV","79166305":"## [Reproducibility](https:\/\/www.kaggle.com\/rtatman\/reproducible-research-best-practices-jupytercon)","3a15cc6e":"## Imports","752d0d8f":"## Globals \/ Config","e32eb43e":"### Regular Expressions","79554875":"## Apply regex","1ddf8d52":"# Overview\n\nInput: `extracted.csv` \n\nOutput: `logistical_info.csv`\n\n\nGiven the `ocr_text` from `extracted.csv` this notebook will outout simple metadata like\n* Instructor\n* Office Hours\n* email","f0b63152":"## Reorder Columns"}}