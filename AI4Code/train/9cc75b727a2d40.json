{"cell_type":{"bfa46a9c":"code","536229c6":"code","d13a41e0":"code","21978789":"code","5558f5e0":"code","f697c6f2":"code","749c269b":"code","b882312b":"code","1b2a5d68":"code","149b25e7":"markdown","70d80dce":"markdown","4640cb01":"markdown","78d138eb":"markdown","da059fda":"markdown"},"source":{"bfa46a9c":"import tensorflow as tf\n\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D\nfrom tensorflow.keras import Model","536229c6":"\nSCALE_SIZE = 255.0","d13a41e0":"mnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","21978789":"x_train, x_test = x_train \/ SCALE_SIZE, x_test \/ SCALE_SIZE\n\n# Add a channels dimension\nx_train = x_train[..., tf.newaxis].astype(\"float32\")\nx_test = x_test[..., tf.newaxis].astype(\"float32\")","5558f5e0":"train_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(10000).batch(32)\ntest_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(32)","f697c6f2":"FILTER_NUM = 32\nKERNEL_SIZE = 3\nDENSE_UNITS = 128\nOUTPUT_NUM = 10\n\nMID_ACITIVATION = \"relu\"\nFINAL_ACTIVATION = \"relu\"","749c269b":"class MyModel(Model):\n    def __init__(self):\n        super(MyModel, self).__init__()\n        self.conv1 = Conv2D(FILTER_NUM, KERNEL_SIZE, activation=MID_ACITIVATION)\n        self.flatten = Flatten()\n        self.d1 = Dense(DENSE_UNITS, activation=FINAL_ACTIVATION)\n        self.d2 = Dense(OUTPUT_NUM)\n\n    def call(self, x):\n        x = self.conv1(x)\n        x = self.flatten(x)\n        x = self.d1(x)\n        return self.d2(x)\n\n# Create an instance of the model\nmodel = MyModel()","b882312b":"EPOCHS = 5","1b2a5d68":"# functions \nloss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\noptimizer = tf.keras.optimizers.Adam()\n\ntrain_loss = tf.keras.metrics.Mean(name='train_loss')\ntrain_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')\n\ntest_loss = tf.keras.metrics.Mean(name='test_loss')\ntest_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy')\n\n\n# train function\n@tf.function\ndef train_step(images, labels):\n    with tf.GradientTape() as tape:\n        predictions = model(images, training=True)\n        loss = loss_object(labels, predictions)\n        gradients = tape.gradient(loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        train_loss(loss)\n        train_accuracy(labels, predictions)\n\n# test function\n@tf.function\ndef test_step(images, labels):\n    predictions = model(images, training=False)\n    t_loss = loss_object(labels, predictions)\n\n    test_loss(t_loss)\n    test_accuracy(labels, predictions)\n    \n    \nfor epoch in range(EPOCHS):\n    # Reset the metrics at the start of the next epoch\n    train_loss.reset_states()\n    train_accuracy.reset_states()\n    test_loss.reset_states()\n    test_accuracy.reset_states()\n\n    for images, labels in train_ds:\n        train_step(images, labels)\n\n    for test_images, test_labels in test_ds:\n        test_step(test_images, test_labels)\n\n    print(\n    f'Epoch {epoch + 1}, '\n    f'Loss: {train_loss.result()}, '\n    f'Accuracy: {train_accuracy.result() * 100}, '\n    f'Test Loss: {test_loss.result()}, '\n    f'Test Accuracy: {test_accuracy.result() * 100}'\n  )","149b25e7":"# preprocess data (make new dataset)","70d80dce":"# preprocess data (scaling + add dimension)","4640cb01":"# load data ","78d138eb":"# define model","da059fda":"# build model"}}