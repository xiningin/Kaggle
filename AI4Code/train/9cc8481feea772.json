{"cell_type":{"608bee85":"code","2c188723":"code","39dc9ce2":"code","00974afb":"code","d07204df":"code","3983a294":"code","0bf55600":"code","61504f6e":"code","f09d6a73":"code","4f32e2c1":"code","bde9805c":"code","4070a3b3":"code","f09d8175":"code","3d589e4b":"code","2eff04f5":"code","1a9bc88a":"code","99d6c934":"code","18dbf9e6":"code","19186f02":"code","b4264660":"code","94f93c3a":"code","6ca3b737":"code","65f5d7a6":"code","d0e0ccf5":"code","301ea486":"code","6203da4f":"code","b0b4df84":"code","1c08a571":"code","34ad56e7":"code","baf03f72":"code","d9b7614b":"code","685c8a17":"markdown","097d365e":"markdown","fe3fb5c1":"markdown","044858f8":"markdown","99bf80bd":"markdown","c6fa625c":"markdown","baa6e419":"markdown","a954c94c":"markdown","61397a46":"markdown","eb3c6deb":"markdown","0ab31ca3":"markdown","912f8edb":"markdown","cb4eae82":"markdown","08bd3875":"markdown","e56cfb41":"markdown","1774ebb5":"markdown","a5e16ad5":"markdown","3b68d8c8":"markdown","ea4d3c01":"markdown","d1e993ba":"markdown","6c6e5c62":"markdown","fcfb15d7":"markdown","ce4008b9":"markdown","27cbbcc4":"markdown","fc0580ea":"markdown","7d0350c9":"markdown","0a33197d":"markdown","e911a869":"markdown","9de1cf8a":"markdown","20a2088e":"markdown","a9434f00":"markdown","92148173":"markdown","652acc94":"markdown","bf7420bb":"markdown","f280e6d6":"markdown","9c04cc26":"markdown","6f7a0fe1":"markdown","8c1b2885":"markdown","66e81e69":"markdown","a10d5c71":"markdown","123a8bc9":"markdown","bea0627c":"markdown","f4cc21d5":"markdown","29fb732f":"markdown","2e7c472f":"markdown","fc983c3c":"markdown","870175cc":"markdown"},"source":{"608bee85":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","2c188723":"headers = [\"symboling\",\"normalized-losses\",\"make\",\"fuel-type\",\"aspiration\", \"num-of-doors\",\"body-style\",\n         \"drive-wheels\",\"engine-location\",\"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\",\"engine-type\",\n         \"num-of-cylinders\", \"engine-size\",\"fuel-system\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\n         \"peak-rpm\",\"city-mpg\",\"highway-mpg\",\"price\"]\n\ndf = pd.read_csv('..\/input\/auto.csv', names = headers)\ndf.head()","39dc9ce2":"# replace \"?\" to NaN\ndf.replace(\"?\", np.nan, inplace = True)\ndf.head()","00974afb":"missing_data = df.isnull().sum()\nmissing_data.sort_values(inplace=True, ascending=False)\nmissing_data.head()","d07204df":"avg_norm_loss = df[\"normalized-losses\"].astype(\"float\").mean(axis=0)\nprint(\"Average of normalized-losses: \", avg_norm_loss)\n\navg_bore = df['bore'].astype('float').mean(axis=0)\nprint(\"Average of bore: \", avg_bore)\n\navg_stroke = df[\"stroke\"].astype(\"float\").mean(axis = 0)\nprint(\"Average of stroke:\", avg_stroke)\n\navg_horsepower = df['horsepower'].astype('float').mean(axis=0)\nprint(\"Average horsepower:\", avg_horsepower)\n\navg_peakrpm = df['peak-rpm'].astype('float').mean(axis=0)\nprint(\"Average peak rpm:\", avg_peakrpm)","3983a294":"df[\"normalized-losses\"].replace(np.nan, avg_norm_loss, inplace=True)\ndf[\"stroke\"].replace(np.nan, avg_stroke, inplace = True)\ndf[\"bore\"].replace(np.nan, avg_bore, inplace=True)\ndf['horsepower'].replace(np.nan, avg_horsepower, inplace=True)\ndf['peak-rpm'].replace(np.nan, avg_peakrpm, inplace=True)","0bf55600":"df['num-of-doors'].value_counts()","61504f6e":"df['num-of-doors'].value_counts().idxmax()","f09d6a73":"#replace the missing 'num-of-doors' values by the most frequent \ndf[\"num-of-doors\"].replace(np.nan, \"four\", inplace=True)","4f32e2c1":"# simply drop whole row with NaN in \"price\" column\ndf.dropna(subset=[\"price\"], axis=0, inplace=True)\n\n# reset index, because we droped two rows\ndf.reset_index(drop=True, inplace=True)\ndf.head()","bde9805c":"df.dtypes","4070a3b3":"df[[\"bore\", \"stroke\"]] = df[[\"bore\", \"stroke\"]].astype(\"float\")\ndf[[\"normalized-losses\"]] = df[[\"normalized-losses\"]].astype(\"int\")\ndf[[\"price\"]] = df[[\"price\"]].astype(\"float\")\ndf[[\"peak-rpm\"]] = df[[\"peak-rpm\"]].astype(\"float\")","f09d8175":"df.dtypes","3d589e4b":"df.head()","2eff04f5":"# Convert mpg to L\/100km by mathematical operation (235 divided by mpg)\ndf['city-L\/100km'] = 235\/df[\"city-mpg\"]\n\n# check your transformed data \ndf.head()","1a9bc88a":"# transform mpg to L\/100km by mathematical operation (235 divided by mpg)\ndf[\"highway-mpg\"] = 235\/df[\"highway-mpg\"]\n\n# rename column name from \"highway-mpg\" to \"highway-L\/100km\"\ndf.rename(columns={'\"highway-mpg\"':'highway-L\/100km'}, inplace=True)\n\n# check your transformed data \ndf.head()","99d6c934":"# replace (original value) by (original value)\/(maximum value)\ndf['length'] = df['length'] \/ df['length'].max()\ndf['width'] = df['width'] \/ df['width'].max()\ndf['height'] = df['height'] \/ df['height'].max()\n\n# show the scaled columns\ndf[[\"length\",\"width\",\"height\"]].head()","18dbf9e6":"df[\"horsepower\"] = df[\"horsepower\"].astype(int, copy=True)","19186f02":"plt.hist(df[\"horsepower\"])\n\n# set x\/y labels and plot title\nplt.xlabel(\"horsepower\")\nplt.ylabel(\"count\")\nplt.title(\"horsepower bins\")","b4264660":"bins = np.linspace(min(df[\"horsepower\"]), max(df[\"horsepower\"]), 4)\nbins","94f93c3a":"group_names = ['Low', 'Medium', 'High']\ndf['horsepower-binned'] = pd.cut(df['horsepower'], bins, labels=group_names, include_lowest=True )\ndf[['horsepower','horsepower-binned']].head(20)","6ca3b737":"df[\"horsepower-binned\"].value_counts()","65f5d7a6":"plt.bar(group_names, df[\"horsepower-binned\"].value_counts())\n\n# set x\/y labels and plot title\nplt.xlabel(\"horsepower\")\nplt.ylabel(\"count\")\nplt.title(\"horsepower bins\")","d0e0ccf5":"a = (0,1,2)\n\n# draw historgram of attribute \"horsepower\" with bins = 3\nplt.hist(df[\"horsepower\"], bins = 3)\n\n# set x\/y labels and plot title\nplt.xlabel(\"horsepower\")\nplt.ylabel(\"count\")\nplt.title(\"horsepower bins\")","301ea486":"df.columns","6203da4f":"dummy1 = pd.get_dummies(df[\"fuel-type\"])\ndummy1.head()","b0b4df84":"dummy1.rename(columns={'fuel-type-diesel':'gas', 'fuel-type-diesel':'diesel'}, inplace=True)\ndummy1.head()","1c08a571":"# merge data frame \"df\" and \"dummy_variable_1\" \ndf = pd.concat([df, dummy1], axis=1)\n\n# drop original column \"fuel-type\" from \"df\"\ndf.drop(\"fuel-type\", axis = 1, inplace=True)\ndf.head()","34ad56e7":"# get indicator variables of aspiration and assign it to data frame \"dummy2\"\ndummy2 = pd.get_dummies(df['aspiration'])\n\n# change column names for clarity\ndummy2.rename(columns={'std':'aspiration-std', 'turbo': 'aspiration-turbo'}, inplace=True)\n\n# show first 5 instances of data frame \"dummy1\"\ndummy2.head()","baf03f72":"#merge the new dataframe to the original datafram\ndf = pd.concat([df, dummy2], axis=1)\n\n# drop original column \"aspiration\" from \"df\"\ndf.drop('aspiration', axis = 1, inplace=True)","d9b7614b":"df.head()","685c8a17":"<b>What is an indicator variable?<\/b>\n<p>\n    An indicator variable (or dummy variable) is a numerical variable used to label categories. They are called 'dummies' because the numbers themselves don't have inherent meaning. \n<\/p>\n\n<b>Why we use indicator variables?<\/b>\n<p>\n    So we can use categorical variables for regression analysis in the later modules.\n<\/p>\n<b>Example<\/b>\n<p>\n    We see the column \"fuel-type\" has two unique values, \"gas\" or \"diesel\". Regression doesn't understand words, only numbers. To use this attribute in regression analysis, we convert \"fuel-type\" into indicator variables.\n<\/p>\n\n<p>\n    We will use the panda's method 'get_dummies' to assign numerical values to different categories of fuel type. \n<\/p>","097d365e":"We now have the value 0 to represent \"gas\" and 1 to represent \"diesel\" in the column \"fuel-type\". We will now insert this column back into our original dataset. ","fe3fb5c1":"**How to deal with missing data?**\n\n<ol>\n    <li>drop data<br>\n        a. drop the whole row<br>\n        b. drop the whole column\n    <\/li>\n    <li>replace data<br>\n        a. replace it by mean<br>\n        b. replace it by frequency<br>\n        c. replace it based on other functions\n    <\/li>\n<\/ol>","044858f8":"<p>As we can see above, some columns are not of the correct data type. Numerical variables should have type 'float' or 'int', and variables with strings such as categories should have type 'object'. For example, 'bore' and 'stroke' variables are numerical values that describe the engines, so we should expect them to be of the type 'float' or 'int'; however, they are shown as type 'object'. We have to convert data types into a proper format for each column using the \"astype()\" method.<\/p> ","99bf80bd":"<p>\n    Binning is a process of transforming continuous numerical variables into discrete categorical 'bins', for grouped analysis.\n<\/p>\n\n<b>Example: <\/b>\n<p>In our dataset, \"horsepower\" is a real valued variable ranging from 48 to 288, it has 57 unique values. What if we only care about the price difference between cars with high horsepower, medium horsepower, and little horsepower (3 types)? Can we rearrange them into three \u2018bins' to simplify analysis? <\/p>\n\n<p>We will use the Pandas method 'cut' to segment the 'horsepower' column into 3 bins <\/p>","c6fa625c":" Convert data to correct format ","baa6e419":"**Replace \"NaN\" by mean value in columns**","a954c94c":"We finally obtain the cleaned dataset with no missing values and all data in its proper format.","61397a46":"## Binning","eb3c6deb":"**Lets list the data types for each column**","0ab31ca3":"**Evaluating for Missing Data**\n\nThe missing values are converted to Python's default. We use Python's built-in functions to identify these missing values. There are two methods to detect missing data:\n<ol>\n    <li><b>.isnull()<\/b><\/li>\n    <li><b>.notnull()<\/b><\/li>\n<\/ol>\nThe output is a boolean value indicating whether the value that is passed into the argument is in fact missing data.","912f8edb":"## Indicator Variable (or Dummy Variable)","cb4eae82":"# Data Wrangling","08bd3875":"save the new csv file.  \ndf.to_csv('clean_df.csv', float_format='%.4f')","e56cfb41":"<p>The last step in data cleaning is checking and making sure that all data is in the correct format (int, float, text or other).<\/p>\n\nIn Pandas, we use \n<p><b>.dtype()<\/b> to check the data type<\/p>\n<p><b>.astype()<\/b> to change the data type<\/p>","1774ebb5":"## Correct data format","a5e16ad5":"To see which values are present in a particular column, we can use the \".value_counts()\" method:","3b68d8c8":"get indicator variables and assign it to data frame \"dummy1\" ","ea4d3c01":" We set group  names:\n\n We apply the function \"cut\" the determine what each value of \"df['horsepower']\" belongs to. ","d1e993ba":"<p>The formula for unit conversion is<p>\nL\/100km = 235 \/ mpg","6c6e5c62":"Here we can see, we've normalized \"length\", \"width\" and \"height\" in the range of [0,1].","fcfb15d7":"The plot above shows the binning result for attribute \"horsepower\". ","ce4008b9":"<h3>Bins visualization<\/h3>\nNormally, a histogram is used to visualize the distribution of bins we created above. ","27cbbcc4":"**Count missing values in each column**\n<p>\nUsing a for loop in Python, we can quickly figure out the number of missing values in each column. In the body of the for loop the method  \".value_counts()\"  counts the number of \"True\" values. \n<\/p>","fc0580ea":"As we can see, several question marks appeared in the dataframe; those are missing values which may hinder our further analysis. \n<div>So, how do we identify all those missing values and deal with them?<\/div> \n\n\n<b>How to work with missing data?<\/b>\n\nSteps for working with missing data:\n<ol>\n    <li>Identify missing data<\/li>\n    <li>deal with missing data<\/li>\n    <li>correct data format<\/li>\n<\/ol>","7d0350c9":"The last two columns are now the indicator variable representation of the fuel-type variable. It's all 0s and 1s now.","0a33197d":"**Example of Binning Data In Pandas**","e911a869":"<p>We would like 3 bins of equal size bandwidth so we use numpy's <code>linspace(start_value, end_value, numbers_generated<\/code> function.<\/p>\n<p>Since we want to include the minimum value of horsepower we want to set start_value=min(df[\"horsepower\"]).<\/p>\n<p>Since we want to include the maximum value of horsepower we want to set end_value=max(df[\"horsepower\"]).<\/p>\n<p>Since we are building 3 bins of equal length, there should be 4 dividers, so numbers_generated=4.<\/p>","9de1cf8a":"<p>\nData is usually collected from different agencies with different formats.\n(Data Standardization is also a term for a particular type of data normalization, where we subtract the mean and divide by the standard deviation)\n<\/p>\n    \n<b>What is Standardization?<\/b>\n<p>Standardization is the process of transforming data into a common format which allows the researcher to make the meaningful comparison.\n<\/p>\n\n<b>Example<\/b>\n<p>Transform mpg to L\/100km:<\/p>\n<p>In our dataset, the fuel consumption columns \"city-mpg\" and \"highway-mpg\" are represented by mpg (miles per gallon) unit. Assume we are developing an application in a country that accept the fuel consumption with L\/100km standard<\/p>\n<p>We will need to apply <b>data transformation<\/b> to transform mpg into L\/100km?<\/p>","20a2088e":"Lets plot the histogram of horspower, to see what the distribution of horsepower looks like.","a9434f00":"Lets plot the distribution of each bin.","92148173":"Whole columns should be dropped only if most entries in the column are empty. In our dataset, none of the columns are empty enough to drop entirely.\nWe have some freedom in choosing which method to replace data; however, some methods may seem more reasonable than others. We will apply each method to many different columns:\n\n<b>Replace by mean:<\/b>\n<ul>\n    <li>\"normalized-losses\": 41 missing data, replace them with mean<\/li>\n    <li>\"stroke\": 4 missing data, replace them with mean<\/li>\n    <li>\"bore\": 4 missing data, replace them with mean<\/li>\n    <li>\"horsepower\": 2 missing data, replace them with mean<\/li>\n    <li>\"peak-rpm\": 2 missing data, replace them with mean<\/li>\n<\/ul>\n\n<b>Replace by frequency:<\/b>\n<ul>\n    <li>\"num-of-doors\": 2 missing data, replace them with \"four\". \n        <ul>\n            <li>Reason: 84% sedans is four doors. Since four doors is most frequent, it is most likely to occur<\/li>\n        <\/ul>\n    <\/li>\n<\/ul>\n\n<b>Drop the whole row:<\/b>\n<ul>\n    <li>\"price\": 4 missing data, simply delete the whole row\n        <ul>\n            <li>Reason: price is what we want to predict. Any data entry without price data cannot be used for prediction; therefore any row now without price data is not useful to us<\/li>\n        <\/ul>\n    <\/li>\n<\/ul>","652acc94":"## Data Normalization","bf7420bb":"<b>Why normalization?<\/b>\n<p>Normalization is the process of transforming values of several variables into a similar range. Typical normalizations include scaling the variable so the variable average is 0, scaling the variable so the variance is 1, or scaling variable so the variable values range from 0 to 1\n<\/p>\n\n<b>Example<\/b>\n<p>To demonstrate normalization, let's say we want to scale the columns \"length\", \"width\" and \"height\" <\/p>\n<p><b>Target:<\/b>would like to Normalize those variables so their value ranges from 0 to 1.<\/p>\n<p><b>Approach:<\/b> replace original value by (original value)\/(maximum value)<\/p>","f280e6d6":"## Data Standardization ","9c04cc26":"change column names for clarity ","6f7a0fe1":"## Identify & Handle Missing Values","8c1b2885":"**Calculate the average of the columns**","66e81e69":"## Import data","a10d5c71":"We can see that four doors are the most common type. We can also use the \".idxmax()\" method to calculate for us the most common type automatically:","123a8bc9":"The replacement procedure is very similar to what we have seen previously","bea0627c":"## Conclusions\n\nLet me know what you think about my kernel. Happy to hear any kind of feedbacks!","f4cc21d5":"We build a bin array, with a minimum value to a maximum value, with bandwidth calculated above. The bins will be values used to determine when one bin ends and another begins.","29fb732f":"<p>\n    Check the dataframe above carefully, you will find the last column provides the bins for \"horsepower\" with 3 categories (\"Low\",\"Medium\" and \"High\"). \n<\/p>\n<p>\n    We successfully narrow the intervals from 57 to 3!\n<\/p>","2e7c472f":"Lets see the number of vehicles in each bin.","fc983c3c":"**Convert \"?\" to NaN**\n\nIn the car dataset, missing data comes with the question mark \"?\".\nWe replace \"?\" with NaN (Not a Number), which is Python's default missing value marker, for reasons of computational speed and convenience.","870175cc":"Finally, let's drop all rows that do not have price data:"}}