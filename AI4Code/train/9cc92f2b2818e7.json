{"cell_type":{"63445195":"code","a23b3956":"code","0f0e7a30":"code","22ec68ac":"code","886a1c68":"code","474367c3":"code","e4c9066d":"code","a4c14498":"code","a6d67dc7":"code","ed4ff05e":"code","ddb56718":"code","ce113332":"code","9242ce2b":"code","ab8c62e6":"code","b91eeb62":"code","358edb36":"code","5244de3a":"code","3c911133":"code","0a874837":"code","05f0642e":"code","9c8908eb":"code","0ad341e5":"code","4f23ae88":"code","ec97104b":"code","452bd1ed":"code","66fc548e":"markdown","f1ba02bd":"markdown","660e0b02":"markdown","efe17da2":"markdown","2fd1314f":"markdown","55d82eee":"markdown","f10c9365":"markdown","0c4f2e95":"markdown","d51d6c4f":"markdown","faed92b0":"markdown","6fb5822d":"markdown","4fc56a53":"markdown","e43ea03f":"markdown","d6b3cb40":"markdown","768a160a":"markdown","3c9d8393":"markdown","fe348d3e":"markdown","4c121373":"markdown","aea58635":"markdown","e96b1b3f":"markdown","b495c959":"markdown","14c6fea7":"markdown","59dc12ef":"markdown","c5363c85":"markdown","cc105cb9":"markdown","2fbbfcbb":"markdown","32702e8e":"markdown","15c3492c":"markdown","1632a09b":"markdown","98a3085c":"markdown","93fbb3fe":"markdown","e7bfd23a":"markdown"},"source":{"63445195":"import numpy as np\nimport pandas as pd\nimport math\nimport re\nimport datetime\nimport requests\nimport warnings\nimport missingno as msno\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\npd.options.mode.chained_assignment = None  # default='warn'\npd.set_option('display.max_columns', None)\n\nrestaurants_df = pd.read_csv('\/kaggle\/input\/tripadvisor-european-restaurants\/tripadvisor_european_restaurants.csv',\n                             encoding='utf8', low_memory=False)\n\n# adding manually the country code - required for the geographical mapping with plotly\ncountries_dict = {'Austria': 'AUT', 'Belgium': 'BEL', 'Bulgaria': 'BGR', 'Croatia': 'HRV', 'Czech Republic': 'CZE',\n                  'Denmark': 'DNK', 'England': 'GBR', 'Finland': 'FIN', 'France': 'FRA', 'Germany': 'DEU',\n                  'Greece': 'GRC', 'Hungary': 'HUN', 'Ireland': 'IRL', 'Italy': 'ITA', 'Northern Ireland': 'GBR',\n                  'Poland': 'POL', 'Portugal': 'PRT', 'Romania': 'ROU', 'Scotland': 'GBR', 'Slovakia': 'SVK',\n                  'Spain': 'ESP', 'Sweden': 'SWE', 'The Netherlands': 'NLD', 'Wales': 'GBR'}\nrestaurants_df['country_code'] = restaurants_df['country'].map(countries_dict).fillna(restaurants_df['country'])\n\n# average price in euro\nrestaurants_df['minimum_range'] = pd.to_numeric(restaurants_df['price_range'].str.split('-').str[0].str.replace('\u20ac', '').str.replace(',', ''), errors='coerce')\nrestaurants_df['maximum_range'] = pd.to_numeric(restaurants_df['price_range'].str.split('-').str[1].str.replace('\u20ac', '').str.replace(',', ''), errors='coerce')\nrestaurants_df['avg_price'] = (restaurants_df['minimum_range'] + restaurants_df['maximum_range']) \/ 2\n\n# drop the fields used for average_price calculation\nrestaurants_df.drop(['minimum_range', 'maximum_range'], axis=1, inplace=True)\n\nrestaurants_df.head(5)","a23b3956":"null_values_series = restaurants_df.drop(['avg_price'], axis=1).isnull().sum().where(lambda x : x > 0).dropna().astype('Int32')\nprint(null_values_series.to_string()) # to_string() removes the name and dtype from the output\nmsno.matrix(restaurants_df[null_values_series.index.tolist()], figsize=(15, 8));","0f0e7a30":"# converting the price values '\u20ac', '\u20ac\u20ac-\u20ac\u20ac\u20ac', and '\u20ac\u20ac\u20ac\u20ac' into three categories (low, medium, high)\nrestaurants_df['price_level_cat'] = ['low' if x == '\u20ac' else 'medium' if x == '\u20ac\u20ac-\u20ac\u20ac\u20ac' else 'high' if x == '\u20ac\u20ac\u20ac\u20ac' else np.nan for x in restaurants_df['price_level']]\n# taking only the first type of cuisine in the records that includes multiple cuisine values\nrestaurants_df['first_cuisine'] = [x.split(',', 1)[0] if ',' in x else np.nan if x == 'nan' else x for x in restaurants_df['cuisines'].astype('str')]\n\nprint(f'There are {restaurants_df.restaurant_link.nunique():,} unique restaurants in the dataframe')\nprint(f'There are {restaurants_df.country.nunique()} unique countries in the dataframe')\n\n# Count of restaurant countries\nsns.set(style='white')\n\ncountries_count = restaurants_df.country.value_counts()\n\nplt.figure(figsize=(15, 8))\nplt.title('Count of Restaurants by Country', size=20)\nax = sns.barplot(x=countries_count.values, y=countries_count.index, palette='coolwarm')\nplt.xlabel('N. Restaurants', size=15)\nplt.ylabel('Country', size=15)\nfor i, v in enumerate(countries_count.values):\n    plt.text(x=40, y=i+0.2, s=v, color='k', fontsize=12)\nplt.show()","22ec68ac":"# aggregating the data to find insights from the TripAdvisor dataset\nagg_countries_df = restaurants_df.groupby('country').agg(\n    total_restaurants=pd.NamedAgg(column='restaurant_link', aggfunc=np.size),\n    mean_rating=pd.NamedAgg(column='avg_rating', aggfunc=np.mean),\n    mean_food=pd.NamedAgg(column='food', aggfunc=np.mean),\n    mean_service=pd.NamedAgg(column='service', aggfunc=np.mean),\n    mean_values=pd.NamedAgg(column='value', aggfunc=np.mean),\n    mean_athmosphere=pd.NamedAgg(column='atmosphere', aggfunc=np.mean),\n    total_reviews=pd.NamedAgg(column='total_reviews_count', aggfunc=np.sum),\n    mean_reviews_n=pd.NamedAgg(column='total_reviews_count', aggfunc=np.mean),\n    median_reviews_n=pd.NamedAgg(column='total_reviews_count', aggfunc=np.median),\n    mean_price=pd.NamedAgg(column='avg_price', aggfunc=np.mean),\n    median_price=pd.NamedAgg(column='avg_price', aggfunc=np.median),\n    open_days_per_week=pd.NamedAgg(column='open_days_per_week', aggfunc=np.mean),\n    open_hours_per_week=pd.NamedAgg(column='open_hours_per_week', aggfunc=np.mean),\n    working_shifts_per_week=pd.NamedAgg(column='working_shifts_per_week', aggfunc=np.mean)\n).reset_index(level=0).sort_values(by='total_restaurants', ascending=False)\nfor col in agg_countries_df.columns[1:]:\n    agg_countries_df[col] = round(agg_countries_df[col], 3)\nagg_countries_df['country_code'] = agg_countries_df['country'].map(countries_dict).fillna(agg_countries_df['country'])\n\n# Bubble plot with the relationship between total_votes and avg_vote for the European countries\nfig = go.Figure(data=go.Scatter(x=agg_countries_df['total_restaurants'], y=agg_countries_df['mean_rating'],\n                                mode='markers+text', marker=dict(size=agg_countries_df['median_reviews_n'].astype('float64'),\n                                                                 color=agg_countries_df['median_reviews_n']),\n                                text=agg_countries_df['country'], textposition='top center', textfont=dict(size=9),\n                                customdata=agg_countries_df['median_reviews_n'],\n                                hoverlabel=dict(namelength=0), # removes the trace number off to the side of the tooltip box\n                                hovertemplate='<b>%{text}<\/b>:<br>%{x:,} total restaurants<br>%{y:.2f} mean rating<br>%{customdata} median revies'))\nfig.update_layout(title='Mean Rating and Total Restaurants of the 20 top European cities (size by Median Reviews)', template='plotly_white',\n                  title_x=0.5, legend=dict(yanchor='bottom', y=-0.15, xanchor='left', x=0, font=dict(size=10), orientation='h'),\n                  autosize=False, width=800, height=500)\nfig['layout']['xaxis']['title'] = 'Total Restaurants'\nfig['layout']['yaxis']['title'] = 'Mean Rating'\nfig.show()","886a1c68":"# treemap by restaurants count\nfig = px.treemap(agg_countries_df, path=[px.Constant('Europe'), 'country'], values='total_restaurants', color='mean_rating',\n                 width=800, height=500, labels={'mean_rating': 'Mean Rating'})\nfig.update_layout(title_text='Treemap of European countries coloured by Mean Rating', title_x=0.5, title_y=0.97)\nfig.update_layout(margin=dict(l=10, r=10, t=40, b=15))\nfig.show()","474367c3":"def round_decimals_up_or_down(direction:str, number:float, decimals:int=2):\n    if not isinstance(decimals, int):\n        raise TypeError('decimal places must be an integer')\n    elif decimals < 0:\n        raise ValueError('decimal places has to be 0 or more')\n    elif decimals == 0:\n        if direction == 'up':\n            return math.ceil(number)\n        elif direction == 'down':\n            return math.floor(number)\n        else:\n            raise ValueError('direction needs to be up or down')\n    factor = 10 ** decimals\n    if direction == 'up':\n        return math.ceil(number * factor) \/ factor\n    elif direction == 'down':\n        return math.floor(number * factor) \/ factor\n    else:\n        raise ValueError('direction needs to be up or down')","e4c9066d":"top8_countries = agg_countries_df['country'][:8]\ncountry_agg_cols_dict = {'country': 'Country', 'mean_rating': 'Rating', 'mean_food': 'Food', 'mean_service': 'Service', 'mean_values': 'Value',\n                         'mean_athmosphere': 'Athmosphere'}\ntop8_countries_df = agg_countries_df[agg_countries_df['country'].isin(top8_countries)]\ntop8_countries_df = top8_countries_df[list(country_agg_cols_dict.keys())]\ntop8_countries_df.rename(columns=country_agg_cols_dict, inplace=True)\n# melting the various categories, so that the line_polar graph can be easily called\ntop8_countries_df = top8_countries_df.melt(id_vars=['Country'],\n                                           value_vars=['Rating', 'Food', 'Service', 'Value', 'Athmosphere'],\n                                           var_name='Category', value_name='AggValue')\ntop8_countries_df['AggValue'] = round(top8_countries_df['AggValue'], 3)\n\ndecimal_val = 1\nmax_countries_val = round_decimals_up_or_down(direction='up', number=top8_countries_df['AggValue'].max(), decimals=decimal_val)\nmin_countries_val = round_decimals_up_or_down(direction='down', number=top8_countries_df['AggValue'].min(), decimals=decimal_val)\n\n# radar plot with plotly\nfig = px.line_polar(top8_countries_df, r='AggValue', range_r=[min_countries_val, max_countries_val],\n                    theta='Category', color='Country', line_close=True, width=750, height=600, template='seaborn')\nfig.update_layout(title_text='Radar chart of Country aggregate ratings', title_x=0.5, title_y=0.97, margin=dict(l=80, r=10, t=40, b=10))\nfig.show()","a4c14498":"# # seaborn radar chart - way more articulated than plotly and therefore commented out from this notebook\n\n# top5_countries = restaurant_countries_df['country'][:5]\n# country_agg_cols_dict = {'mean_rating': 'Rating', 'mean_food': 'Food', 'mean_service': 'Service', 'mean_values': 'Value', 'mean_athmosphere': 'Athmosphere'}\n# top5_countries_df = restaurant_countries_df[restaurant_countries_df['country'].isin(top5_countries)].set_index('country', drop=True)\n# top5_countries_df = top5_countries_df[list(country_agg_cols_dict.keys())]\n# top5_countries_df.rename(columns=country_agg_cols_dict, inplace=True)\n\n\n# def plot_radar_data(axis_var, df, records_n):\n#     for i in range(records_n):\n#         # create values and angles for each value\n#         val = df.iloc[i].tolist()\n#         val += val[:1]\n#         # angl = [n \/ float(records_n) * 2 * np.pi for n in range(records_n)]\n#         angl = [n \/ float(records_n) * 2 * np.pi for n in range(records_n)]\n#         angl += angl[:1]\n#         # include the values and angles to the radar plot and axis\n#         axis_var.plot(angl, val, linewidth=1, linestyle='solid')\n#         axis_var.fill(angl, val, 'C' + str(i), alpha=0.15)\n#     return angl\n\n\n# # setting the y-ticks values and labels using the min() and max() values in the df\n# decimal_val = 1\n# max_countries_val = round_decimals_up_or_down(direction='up', number=top5_countries_df.to_numpy().max(), decimals=decimal_val)\n# min_countries_val = round_decimals_up_or_down(direction='down', number=top5_countries_df.to_numpy().min(), decimals=decimal_val)\n# radar_y_ticks_values = [round((x * decimal_val\/(10**decimal_val)), 1)\n#                         for x in range(int(min_countries_val*10**decimal_val), int(max_countries_val*10**decimal_val)+1)]\n# radar_y_ticks_labels = [re.sub('\\.{0,1}[0]{1,9}$', '', str(round((x * decimal_val\/(10**decimal_val)), 1)))\n#                         for x in range(int(min_countries_val*10**decimal_val), int(max_countries_val*10**decimal_val)+1)]\n\n# plt.figure(figsize=(10, 10))\n# ax = plt.subplot(111, polar=True)\n# ax.set_rlabel_position(0)\n\n# # plot the values for n records and return the angle values, required for the x-axis ticks\n# angles = plot_radar_data(axis_var=ax, df=top5_countries_df, records_n=len(top5_countries_df.columns))\n\n# plt.xticks(ticks=angles[:-1], labels=top5_countries_df.columns.to_list(), color='black', size=12)\n# plt.yticks(ticks=radar_y_ticks_values, labels=radar_y_ticks_labels, color='black', size=10)\n# plt.ylim(min_countries_val, max_countries_val)\n# legend = ax.legend(top5_countries_df.index.to_list(), loc=(0, 1), labelspacing=0.2, fontsize='large')\n# # set vertical and horizontal alignments\n# for label, angle in zip(ax.get_xticklabels(), angles):\n#     if 0 < angle < np.pi:\n#         label.set_verticalalignment('bottom') # 1sr and 2nd quadrants\n#     else:\n#         label.set_verticalalignment('top') # 3rd and 4th quadrants\n#     if (np.pi \/ 2) < angle < (np.pi * 3 \/ 2):\n#         label.set_horizontalalignment('right') # 2nd and 3rd quadrants\n#     else:\n#         label.set_horizontalalignment('left') # 1sr and 4th quadrants\n# plt.show()","a6d67dc7":"fig = go.Figure(data=go.Scatter(x=agg_countries_df['open_hours_per_week'], y=agg_countries_df['mean_rating'],\n                                mode='markers+text',\n                                marker=dict(size=agg_countries_df['total_restaurants']\/3000, color=agg_countries_df['mean_rating']),\n                                text=agg_countries_df['country'], textposition='top center', textfont=dict(size=9),\n                                customdata=agg_countries_df['total_restaurants'],\n                                hoverlabel=dict(namelength=0), # removes the trace number off to the side of the tooltip box\n                                hovertemplate='<b>%{text}<\/b>:<br>%{customdata:,} total restaurants<br>%{x:.2f} hours open per week<br>%{y:.2f} mean rating'))\nfig.update_layout(title='Countries - Average Rating based on Open Hours per week (size by restaurants count)', title_x=0.5, template='plotly_white',\n                  width=800, height=500, legend=dict(yanchor='bottom', y=-0.15, xanchor='left', x=0, font=dict(size=10), orientation='h'))\nfig['layout']['xaxis']['title'] = 'Open Hours per week'\nfig['layout']['yaxis']['title'] = 'Average Rating'\nfig.show()","ed4ff05e":"# Count of restaurant countrie\nsns.set(style='white')\n\ntop20_cities = restaurants_df['city'].value_counts()[:20]\n\nplt.figure(figsize=(15, 8))\nplt.title('Count of Restaurants by City', size=20)\nax = sns.barplot(x=top20_cities.values, y=top20_cities.index, palette='coolwarm')\nplt.xlabel('N. Restaurants', size=15)\nplt.ylabel('City', size=15)\nfor i, v in enumerate(top20_cities.values):\n    plt.text(x=40, y=i+0.2, s=v, color='k', fontsize=12)\nplt.show()","ddb56718":"with pd.option_context('display.max_colwidth', 400):\n    display(restaurants_df[restaurants_df['original_location'].str.contains('London')][\n        ['restaurant_link', 'restaurant_name', 'original_location', 'country', 'region', 'province', 'city']].head(5))","ce113332":"top20_cities_df = restaurants_df[restaurants_df['city'].isin(restaurants_df['city'].value_counts()[:20].index.to_list())]\n\n# aggregating the data to find insights from the TripAdvisor dataset\nagg_top20_cities_df = top20_cities_df.groupby(['country', 'city']).agg(\n    total_restaurants=pd.NamedAgg(column='restaurant_link', aggfunc=np.size),\n    mean_rating=pd.NamedAgg(column='avg_rating', aggfunc=np.mean),\n    mean_food=pd.NamedAgg(column='food', aggfunc=np.mean),\n    mean_service=pd.NamedAgg(column='service', aggfunc=np.mean),\n    mean_values=pd.NamedAgg(column='value', aggfunc=np.mean),\n    mean_athmosphere=pd.NamedAgg(column='atmosphere', aggfunc=np.mean),\n    total_reviews=pd.NamedAgg(column='total_reviews_count', aggfunc=np.sum),\n    mean_reviews_n=pd.NamedAgg(column='total_reviews_count', aggfunc=np.mean),\n    median_reviews_n=pd.NamedAgg(column='total_reviews_count', aggfunc=np.median),\n    mean_price=pd.NamedAgg(column='avg_price', aggfunc=np.mean),\n    median_price=pd.NamedAgg(column='avg_price', aggfunc=np.median),\n    open_days_per_week=pd.NamedAgg(column='open_days_per_week', aggfunc=np.mean),\n    open_hours_per_week=pd.NamedAgg(column='open_hours_per_week', aggfunc=np.mean),\n    working_shifts_per_week=pd.NamedAgg(column='working_shifts_per_week', aggfunc=np.mean),\n    latitude=pd.NamedAgg(column='latitude', aggfunc=np.mean),\n    longitude=pd.NamedAgg(column='longitude', aggfunc=np.mean)\n).reset_index().sort_values(by='total_restaurants', ascending=False).head(20)\nagg_top20_cities_df['median_reviews_n'] = agg_top20_cities_df['median_reviews_n'].astype('Int32')\nfor col in ['mean_rating', 'mean_reviews_n', 'mean_food', 'mean_service', 'mean_values', 'mean_athmosphere']:\n    agg_top20_cities_df[col] = round(agg_top20_cities_df[col], 3)\n\n# Bubble plot with the relationship between total_votes and avg_vote for the 20 most voted cities\nfig = go.Figure(data=go.Scatter(x=agg_top20_cities_df['total_restaurants'], y=agg_top20_cities_df['mean_rating'],\n                                mode='markers+text', marker=dict(size=agg_top20_cities_df['median_reviews_n'].astype('float64'),\n                                                                 color=agg_top20_cities_df['median_reviews_n']),\n                                text=agg_top20_cities_df['city'], textposition='top center', textfont=dict(size=9),\n                                customdata=agg_top20_cities_df['median_reviews_n'],\n                                hoverlabel=dict(namelength=0), # removes the trace number off to the side of the tooltip box\n                                hovertemplate='<b>%{text}<\/b>:<br>%{x:,} total restaurants<br>%{y:.2f} mean rating<br>%{customdata} median revies'))\nfig.update_layout(title='Mean Rating and Total Restaurants of the 20 top European cities (size by Median Reviews)', template='plotly_white',\n                  title_x=0.5, legend=dict(yanchor='bottom', y=-0.15, xanchor='left', x=0, font=dict(size=10), orientation='h'),\n                  autosize=False, width=800, height=500)\nfig['layout']['xaxis']['title'] = 'Total Restaurants'\nfig['layout']['yaxis']['title'] = 'Mean Rating'\nfig.show()","9242ce2b":"# treemap by restaurants count\nfig = px.treemap(agg_top20_cities_df, path=[px.Constant('Europe'), 'country', 'city'], values='total_restaurants', color='mean_rating',\n                 width=800, height=500, labels={'mean_rating': 'Mean Rating'})\nfig.update_layout(title_text='Treemap of the 20 most popular European cities coloured by Mean Rating', title_x=0.5, title_y=0.97)\nfig.update_layout(margin=dict(l=10, r=10, t=40, b=15))\nfig.show()","ab8c62e6":"top10_cities = agg_top20_cities_df['city'][:10]\ncity_agg_cols_dict = {'city': 'City', 'mean_rating': 'Rating', 'mean_food': 'Food', 'mean_service': 'Service', 'mean_values': 'Value',\n                      'mean_athmosphere': 'Athmosphere'}\ntop10_cities_df = agg_top20_cities_df[agg_top20_cities_df['city'].isin(top10_cities)]\ntop10_cities_df = top10_cities_df[list(city_agg_cols_dict.keys())]\ntop10_cities_df.rename(columns=city_agg_cols_dict, inplace=True)\n\n# melting the various categories, so that the line_polar graph can be easily called\ntop10_cities_df = top10_cities_df.melt(id_vars=['City'],\n                                     value_vars=['Rating', 'Food', 'Service', 'Value', 'Athmosphere'],\n                                     var_name='Category', value_name='AggValue')\ntop10_cities_df['AggValue'] = round(top10_cities_df['AggValue'], 3)\n\ndecimal_val = 1\nmax_cities_val = round_decimals_up_or_down(direction='up', number=top10_cities_df['AggValue'].max(), decimals=decimal_val)\nmin_cities_val = round_decimals_up_or_down(direction='down', number=top10_cities_df['AggValue'].min(), decimals=decimal_val)\n\n# radar plot with plotly\nfig = px.line_polar(top10_cities_df, r='AggValue', range_r=[min_cities_val, max_cities_val],\n                    theta='Category', color='City', line_close=True, width=750, height=600, template='seaborn')\nfig.update_layout(title_text='Radar chart of city aggregate ratings', title_x=0.5, title_y=0.97, margin=dict(l=80, r=10, t=40, b=10))\nfig.show()","b91eeb62":"fig = go.Figure(data=go.Scatter(x=agg_top20_cities_df['open_hours_per_week'], y=agg_top20_cities_df['mean_rating'],\n                                mode='markers+text',\n                                marker=dict(size=agg_top20_cities_df['total_restaurants']\/250, color=agg_top20_cities_df['mean_rating']),\n                                text=agg_top20_cities_df['city'], textposition='top center', textfont=dict(size=9),\n                                customdata=agg_top20_cities_df['total_restaurants'],\n                                hoverlabel=dict(namelength=0), # removes the trace number off to the side of the tooltip box\n                                hovertemplate='<b>%{text}<\/b>:<br>%{customdata:,} total restaurants<br>%{x:.2f} hours open per week<br>%{y:.2f} mean rating'))\nfig.update_layout(title='Cities - Average Rating based on Open Hours per week (size by restaurants count)', title_x=0.5, template='plotly_white',\n                  width=800, height=500)\nfig['layout']['xaxis']['title'] = 'Open Hours per week'\nfig['layout']['yaxis']['title'] = 'Average Rating'\nfig.show()","358edb36":"top10_cuisines_df = restaurants_df[(restaurants_df['first_cuisine'].notnull()) &\n                                   (restaurants_df['first_cuisine'].isin(restaurants_df['first_cuisine'].value_counts()[:10].index.to_list()))]\n\nagg_top10_cuisines_df = top10_cuisines_df.groupby('first_cuisine').agg(\n    total_restaurants=pd.NamedAgg(column='restaurant_link', aggfunc=np.size),\n    mean_rating=pd.NamedAgg(column='avg_rating', aggfunc=np.mean),\n    mean_reviews_n=pd.NamedAgg(column='total_reviews_count', aggfunc=np.mean),\n    median_reviews_n=pd.NamedAgg(column='total_reviews_count', aggfunc=np.median),\n    mean_food=pd.NamedAgg(column='food', aggfunc=np.mean),\n    mean_service=pd.NamedAgg(column='service', aggfunc=np.mean),\n    mean_values=pd.NamedAgg(column='value', aggfunc=np.mean),\n    mean_athmosphere=pd.NamedAgg(column='atmosphere', aggfunc=np.mean)\n).reset_index(level=0).sort_values(by='total_restaurants', ascending=False)\nagg_top10_cuisines_df['median_reviews_n'] = agg_top10_cuisines_df['median_reviews_n'].astype('Int32')\nfor col in ['mean_rating', 'mean_reviews_n', 'mean_food', 'mean_service', 'mean_values', 'mean_athmosphere']:\n    agg_top10_cuisines_df[col] = round(agg_top10_cuisines_df[col], 3)\n\n# Bubble plot with the relationship between total_votes and avg_vote for the 20 most voted movies\nfig = go.Figure(data=go.Scatter(x=agg_top10_cuisines_df['total_restaurants'], y=agg_top10_cuisines_df['mean_rating'],\n                                mode='markers+text', marker=dict(size=agg_top10_cuisines_df['median_reviews_n'].astype('float64'),\n                                                                 color=agg_top10_cuisines_df['median_reviews_n']),\n                                text=agg_top10_cuisines_df['first_cuisine'], textposition='top center', textfont=dict(size=9),\n                                customdata=agg_top10_cuisines_df['median_reviews_n'],\n                                hoverlabel=dict(namelength=0), # removes the trace number off to the side of the tooltip box\n                                hovertemplate='<b>%{text}<\/b>:<br>%{x:,} total restaurants<br>%{y:.1f} mean rating<br>%{customdata} median revies'))\nfig.update_layout(title='Mean Rating and Total Restaurants of the 10 most popular Cuisine types', template='plotly_white',\n                  title_x=0.5, autosize=False, width=800, height=500)\nfig['layout']['xaxis']['title'] = 'Total Restaurants'\nfig['layout']['yaxis']['title'] = 'Mean Rating'\nfig.show()","5244de3a":"# Create a figure instance, and the three subplots\nfig = plt.figure(figsize=(10, 15))\nax1 = fig.add_subplot(311)\nax2 = fig.add_subplot(312)\nax3 = fig.add_subplot(313)\n\nclaimed_restaurants_df = restaurants_df.sort_values(by='claimed')[\n    ['restaurant_link', 'claimed', 'vegetarian_friendly', 'vegan_options', 'gluten_free', 'avg_rating']]\n\nveget = sns.pointplot(data=claimed_restaurants_df, x='vegetarian_friendly', y='avg_rating', hue='claimed', ax=ax1)\nax1.margins(x=0.01)\nax1.set(title='Interaction between Vegetarian, Vegan and Gluten-Free food with Average Rating - Grouped by Claimed',\n        xlabel='Vegetarian Friendly', ylabel='Average Rating')\nveget.legend(loc='upper left', title='Claimed')\n\nvegan = sns.pointplot(data=claimed_restaurants_df, x='vegan_options', y='avg_rating', hue='claimed', ax=ax2)\nax2.margins(x=0.01)\nax2.set(xlabel='Vegan Options', ylabel='Average Rating')\nvegan.legend(loc='upper left', title='Claimed')\n\ngluten = sns.pointplot(data=claimed_restaurants_df, x='gluten_free', y='avg_rating', hue='claimed', ax=ax3)\nax3.margins(x=0.01)\nax3.set(xlabel='Gluten-Free', ylabel='Average Rating')\ngluten.legend(loc='upper left', title='Claimed')\n\nplt.show()","3c911133":"# percentage of restaurants with vegetarian, vegan, and gluten-free options\nfood_options_perc_df = restaurants_df.groupby('country').apply(lambda x: pd.Series(dict(\n    restaurants_count=(x['restaurant_link']).count(),\n    vegetarian_count=(x['vegetarian_friendly'] == 'Y').sum(),\n    vegan_count=(x['vegan_options'] == 'Y').sum(),\n    gluten_free_count=(x['gluten_free'] == 'Y').sum())))\nfor col in ['vegetarian', 'vegan', 'gluten_free']:\n    food_options_perc_df[col + '_perc'] = food_options_perc_df[col + '_count'] \/ food_options_perc_df['restaurants_count']\nfood_options_perc_df = food_options_perc_df[['vegetarian_perc', 'vegan_perc', 'gluten_free_perc']].reset_index()\n\n# adding the percentage fields to the 'agg_country_codes_df' df\nfood_options_perc_df = pd.merge(agg_countries_df, food_options_perc_df, how='inner', on='country')\nfood_options_perc_df.rename(columns={'country': 'country_name'}, inplace=True)\nfood_options_perc_df['reviews_per_restaurant'] = food_options_perc_df['total_reviews'] \/ food_options_perc_df['total_restaurants']\n\n# displaying in a bubble plot the food option percentages and comparing the reviews per restaurants\nfig = plotly.subplots.make_subplots(rows=3, cols=1, subplot_titles=('Vegetarian', 'Vegan', 'Gluten-free'), vertical_spacing = 0.085,\n                                    specs=[[{'type': 'scatter'}], [{'type': 'scatter'}], [{'type': 'scatter'}]])\nfig.add_trace(go.Scatter(x=food_options_perc_df['vegetarian_perc'], y=food_options_perc_df['reviews_per_restaurant'],\n                         marker=dict(size=food_options_perc_df['total_restaurants']\/5000,\n                                     color=food_options_perc_df['reviews_per_restaurant']), mode='markers+text', showlegend=False,\n                         text=food_options_perc_df['country_name'], textposition='top center', textfont=dict(size=9),\n                         hoverlabel=dict(namelength=0), # removes the trace number off to the side of the tooltip box\n                         hovertemplate='%{text}:<br>%{x:.2f} vegetarian %<br>%{y:.1f} reviews p\/restaurant'), row=1, col=1)\nfig.add_trace(go.Scatter(x=food_options_perc_df['vegan_perc'], y=food_options_perc_df['reviews_per_restaurant'],\n                         marker=dict(size=food_options_perc_df['total_restaurants']\/5000,\n                                     color=food_options_perc_df['reviews_per_restaurant']), mode='markers+text', showlegend=False,\n                         text=food_options_perc_df['country_name'], textposition='top center', textfont=dict(size=9),\n                         hoverlabel=dict(namelength=0), # removes the trace number off to the side of the tooltip box\n                         hovertemplate='%{text}:<br>%{x:.2f} vegan %<br>%{y:.1f} reviews p\/restaurant'), row=2, col=1)\nfig.add_trace(go.Scatter(x=food_options_perc_df['gluten_free_perc'], y=food_options_perc_df['reviews_per_restaurant'],\n                         marker=dict(size=food_options_perc_df['total_restaurants']\/5000,\n                                     color=food_options_perc_df['reviews_per_restaurant']), mode='markers+text', showlegend=False,\n                         text=food_options_perc_df['country_name'], textposition='top center', textfont=dict(size=9),\n                         hoverlabel=dict(namelength=0), # removes the trace number off to the side of the tooltip box\n                         hovertemplate='%{text}:<br>%{x:.2f} gluten-free %<br>%{y:.1f} reviews p\/restaurant'), row=3, col=1)\nfig.update_layout(title='Reviews per Restaurant based on Vegetarian %, Vegan %, and Gluten-Free %', title_x=0.5,\n                  width=800, height=1200, margin=dict(l=10, r=10, t=80, b=10))\nfig['layout']['xaxis']['title'] = 'Vegetarian %'\nfig['layout']['xaxis2']['title'] = 'Vegan %'\nfig['layout']['xaxis3']['title'] = 'Gluten-Free %'\nfig.show()","0a874837":"fig = px.scatter_geo(data_frame=agg_top20_cities_df, lat='latitude', lon='longitude', color='mean_rating', hover_name='city',\n                     scope='europe', size='total_restaurants', size_max=40, projection='natural earth', labels={'mean_rating': 'Mean Rating'})\nfig.update_layout(title='European map of the 20 most popular cities (size by total restaurants)', title_x=0.5,\n                  width=800, height=500, margin={'r':0, 'l':0, 'b':0, 'pad':0})\nfig.show()","05f0642e":"fig = px.choropleth(agg_countries_df, locations='country_code', color='open_hours_per_week', hover_name='country',\n                    scope='europe', color_continuous_scale='Viridis', projection='natural earth', labels={'open_hours_per_week': 'Open Hours p\/week'})\nfig.update_layout(title='European map of Countries based on Open Hours per week', title_x=0.5, width=800, height=500, margin={'r':0, 'l':0, 'b':0, 'pad':0})\nfig.show()","9c8908eb":"fig = px.choropleth(agg_countries_df, locations='country_code', color='working_shifts_per_week', hover_name='country',\n                    scope='europe', color_continuous_scale='Viridis', projection='natural earth', labels={'working_shifts_per_week': 'Working Shifts p\/week'})\nfig.update_layout(title='European map of Countries based on Working Shifts per week', title_x=0.5, width=800, height=500, margin={'r':0, 'l':0, 'b':0, 'pad':0})\nfig.show()","0ad341e5":"italian_df = restaurants_df[restaurants_df['country']=='Italy']\n\nprint(f'There are {italian_df.region.nunique()} unique Italian regions in the dataframe')\n\n# Count of restaurant countrie\nsns.set(style='white')\n\nitalian_regions_count = italian_df.region.value_counts()\n\nplt.figure(figsize=(15, 8))\n\nplt.title('Count of Italian restaurants by region', size=20)\nax = sns.barplot(x=italian_regions_count.values, y=italian_regions_count.index, palette='coolwarm')\nplt.xlabel('N. Restaurants', size=15)\nplt.ylabel('Italian Region', size=15)\nfor i, v in enumerate(italian_regions_count.values):\n    plt.text(x=40, y=i+0.2, s=v, color='k', fontsize=12)\nplt.show()","4f23ae88":"italian_regions_df = restaurants_df[restaurants_df['country']=='Italy'].groupby('region').agg(\n    restaurants_count=pd.NamedAgg(column='restaurant_link', aggfunc=np.size),\n    open_days_per_week=pd.NamedAgg(column='open_days_per_week', aggfunc=np.mean),\n    open_hours_per_week=pd.NamedAgg(column='open_hours_per_week', aggfunc=np.mean),\n    working_shifts_per_week=pd.NamedAgg(column='working_shifts_per_week', aggfunc=np.mean),\n    avg_rating=pd.NamedAgg(column='avg_rating', aggfunc=np.mean),\n    reviews_count=pd.NamedAgg(column='total_reviews_count', aggfunc=np.sum),\n    median_price=pd.NamedAgg(column='avg_price', aggfunc=np.median)).reset_index(level=0).sort_values(by='restaurants_count', ascending=False)\n\n# translating some regional names from English (TripAdvisor) to Italian (GitHub)\nitalian_region_names_dict = {'Piedmont': 'Piemonte', 'Lombardy': 'Lombardia', 'Sardinia': 'Sardegna',\n                             'Sicily': 'Sicilia', 'Tuscany': 'Toscana'}\nitalian_regions_df['region_name'] = italian_regions_df['region'].map(italian_region_names_dict).fillna(italian_regions_df['region'])\n\n# restaurants with at least one award\nrestaurant_awards_df = restaurants_df[restaurants_df['awards'].notnull()].groupby('region').agg(\n    {'restaurant_link': 'count'}).reset_index(level=0)\nrestaurant_awards_df.rename(columns={'restaurant_link': 'restaurants_with_award'}, inplace=True)\nitalian_regions_df = pd.merge(italian_regions_df, restaurant_awards_df[['region', 'restaurants_with_award']],\n                              on='region', how='inner')\nitalian_regions_df['restaurants_with_award_perc'] = italian_regions_df['restaurants_with_award'] \/ italian_regions_df['restaurants_count']\n\n# restaurants with at least one Michelin award\nrestaurant_michelin_awards_df = restaurants_df[(~restaurants_df['awards'].isna()) &\n                                               (restaurants_df['awards'].str.contains('Michelin'))].groupby('region').agg(\n    {'restaurant_link': 'count'}).reset_index(level=0)\nrestaurant_michelin_awards_df.rename(columns={'restaurant_link': 'restaurants_with_michelin_award'}, inplace=True)\nitalian_regions_df = pd.merge(italian_regions_df, restaurant_michelin_awards_df[['region', 'restaurants_with_michelin_award']],\n                              on='region', how='inner')\nitalian_regions_df['restaurants_with_michelin_award_perc'] = italian_regions_df['restaurants_with_michelin_award'] \/ italian_regions_df['restaurants_count']\n\n# dropping the count fields that have been used to calculate the percentages\nitalian_regions_df.drop(['restaurants_with_award', 'restaurants_with_michelin_award'], axis=1, inplace=True)\n\n# getting the border data from GitHub\nitalian_regions = ['Piemonte', 'Trentino-Alto Adige', 'Lombardia', 'Puglia', 'Basilicata', 'Friuli Venezia Giulia',\n                   'Liguria', \"Valle d'Aosta\", 'Emilia-Romagna', 'Molise', 'Lazio', 'Veneto', 'Sardegna', 'Sicilia',\n                   'Abruzzo', 'Calabria', 'Toscana', 'Umbria', 'Campania', 'Marche']\nregion_names_df = pd.DataFrame(italian_regions, columns=['NOME_REG']) # df with the region names in the correct order\nregion_names_df = pd.merge(region_names_df, italian_regions_df,\n                           how='inner', left_on='NOME_REG', right_on='region_name').drop(['region_name'], axis=1)\nrepo_url = 'https:\/\/gist.githubusercontent.com\/datajournalism-it\/48e29e7c87dca7eb1d29\/raw\/2636aeef92ba0770a073424853f37690064eb0ea\/regioni.geojson'\nitaly_regions_geo = requests.get(repo_url).json()\n\n# Choropleth representing the restaurants with any award\nfig = px.choropleth(data_frame=region_names_df, geojson=italy_regions_geo, \n                    locations='NOME_REG', # name of dataframe column\n                    featureidkey='properties.NOME_REG',  # path to field in GeoJSON feature object with which to match the values passed in to locations\n                    color='restaurants_with_award_perc', color_continuous_scale='Magma', scope='europe',\n                    labels={'restaurants_with_award_perc': 'Restaurant Awards %'})\nfig.update_geos(showland=True, showcoastlines=False, showcountries=False, fitbounds='locations')\nfig.update_layout(title='Italian Regions - Restaurants with at least one award of any kind (% to Total)', title_x=0.5, width=800, height=500,\n                  margin={'r':0, 'l':0, 'b':0, 'pad':0})\nfig.show()","ec97104b":"# Choropleth representing the restaurants with a Michelin award\nfig = px.choropleth(data_frame=region_names_df, geojson=italy_regions_geo, \n                    locations='NOME_REG', # name of dataframe column\n                    featureidkey='properties.NOME_REG',  # path to field in GeoJSON feature object with which to match the values passed in to locations\n                    color='restaurants_with_michelin_award_perc', color_continuous_scale='Magma', scope='europe',\n                    labels={'restaurants_with_michelin_award_perc': 'Restaurant Michelin Awards %'})\nfig.update_geos(showland=True, showcoastlines=False, showcountries=False, fitbounds='locations')\nfig.update_layout(title='Italian Regions - Restaurants with at least one Michelin award (% to Total)', title_x=0.5, width=800, height=500,\n                  margin={'r':0, 'l':0, 'b':0, 'pad':0})\nfig.show()","452bd1ed":"# Choropleth representing the median restaurant prices\nfig = px.choropleth(data_frame=region_names_df, geojson=italy_regions_geo, \n                    locations='NOME_REG', # name of dataframe column\n                    featureidkey='properties.NOME_REG',  # path to field in GeoJSON feature object with which to match the values passed in to locations\n                    color='median_price', color_continuous_scale='Magma', scope='europe',\n                    labels={'median_price': 'Median Price'})\nfig.update_geos(showland=True, showcoastlines=False, showcountries=False, fitbounds='locations')\nfig.update_layout(title='Italian Regions - Median restaurant prices', title_x=0.5, width=800, height=500, margin={'r':0, 'l':0, 'b':0, 'pad':0})\nfig.show()","66fc548e":"Displaying in a radar chart the comparison between 'avg_rating', 'food', 'service', 'value', and 'athmosphere' for the top 10 cities.\n\n<i>Budapset (Hungary) is the city among the 10 most common ones that exhibits the highest mean food, service, value, and athmosphere rating, while its overall mean rating is in line with Amsterdam (4.14\/5)<\/i>\n<br>\n<i>Analyzing the worst cities, it is evident that Madrid and Milan show different values:<\/i>\n<br>\n<i>- Madrid has a lower overall mean rating (3.82\/5), but higher food (3.92\/5) and service (3.88\/5) average ratings<\/i>\n<br>\n<i>- Milan, on the other hand, has a slightly higher overall mean rating (3.88\/5), but much lower athmosphere (3.67\/5) and value (3.73\/5) average ratings<\/i>","f1ba02bd":"# <a id='3'>3. Exploratory Data Analysis (EDA)<\/a>","660e0b02":"Visualizing the location of European countries based on the Open Hours per week values.\n\n<i>Greece is clearly an outlier - both regarding the ratings and the open hours data - but it is possible to see that Balkan countries tend to have more open hours compared to Western Europe, with France being the country with the lowest open hours per week by far (51.5).<\/i>","efe17da2":"## <a id='34'>3.4. Maps<\/a>","2fd1314f":"## <a id='33'>3.3. Cuisines<\/a>","55d82eee":"Displaying the relationship between country average ratings and total restaurants for each European country.\n\n<i>Italy, France, and England have very similar mean and median ratings among the countries with the highest number of restaurants, while Germany exhibits a much lower median reviews per restaurant.<\/i>\n<br>\n<i>Scotland and Wales are the countries with very high median reviews per restaurants (41 and 37, respectively) but low number of restaurants overall.<\/i>\n<br>\n<i>There is not a clear linear relationship between mean rating and number of restaurants in the TripAdvisor data for the European countries.<\/i>","f10c9365":"## <a id='31'>3.1. Countries<\/a>","0c4f2e95":"TripAdvisor is one of the most popular travel websites, and it includes information regarding hotel bookings, sites of attraction, restaurants reviews, and much more.\n\nThe purpose of this notebook is to analyse the *TripAdvisor European restaurants* dataset available at this [Kaggle link](https:\/\/www.kaggle.com\/stefanoleone992\/tripadvisor-european-restaurants), which provides data about restaurant aspects such as location with coordinates, awards, price levels, types of cuisine, options for vegetarian, vegan and gluten-free food, open hours, average ratings, and total reviews.\n\nOnce the dataset is read with *pandas* and the missing data gets displayed with the *missingno* library, the data is visualized to start obtaining some information on key fields like 'avg_rating' and 'total_reviews_count'.\n\nThe analysis of the whole dataset, focusing on the top cities, the top countries, and then on the cuisine types and the locations visualized with plotly as maps.","d51d6c4f":"Plotting the relationship between total restaurants and averag ratings for the European top 20 cities.\n\n<i>Paris and Rome are the two most common cities and have a similar average rating close to 4\/5, while the following two cities (Madrid and Milan) have an average rating below 3.9\/5.<\/i>\n<br>\n<i>As confirmation that Greek restaurants have been perceived to be superior by TripAdvisor users, Athens is the city with the highest average rating (above 4.2\/5).<\/i>","faed92b0":"Displaying the impact of the 'claimed' field to the food option aspects ('vegetarian_friendly', 'vegan_options', and 'gluten_free').\n\n<i>Claimed restaurants and the ones that offer vegeterian\/vegan\/gluten-free food show higher average ratings.<\/i>\n<br>\n<i>The impact of the 'claimed' field to the average rating is much greater for the vegan_options and gluten_free compared to the vegetarian_friendly.<\/i>","6fb5822d":"# <a id='2'>2. Dataset<\/a>\n\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; line-height: 1.7em\">\n<p>\u26a0\ufe0f <b>Warnings<\/b>:\n<li>The dataset includes all European restaurants available on TripAdvisor - more than a million records!<br>\nGiven that the dataset includes all records and there was no initial filter applied during the scraping script, there are several fields that have most of the values blank<\/li>\n<li>Restaurant ratings are rounded on TripAdvisor to the nearest 0.5\/5 value.<br>\nThis means that the distribution of ratings for all restaurants have gaps of at least 0.5 and the level of accuracy of ratings is not particularly satisfying for a deep analysis on the restaurant ratings<\/li>\n<\/div>","4fc56a53":"Plotting the records count grouped by city, highlighting in the treemap the average restaurant ratings for the 20 most popular European cities.\n\n<i>Most of the countries with more than one city in the top 20 list display similar mean ratings among their cities, with the exception of Spain (Madrid much worse than Palma de Mallorca) and Italy (Milan much worse than Rome).<\/i>\n<br>\n<i>Comparing this treemap with the one displayed for country data, it is evident that Sweden (represented by the city of Stockholm) is no more the country with the worst mean rating, as Madrid (Spain) has the worse value overall.<\/i>","e43ea03f":"Plotting the records count grouped by country, highlighting in the treemap the average restaurant ratings.\n\n<i>Spain is the country among the most common ones that has the lowest average rating.<\/i>\n<br>\n<i>Greece is the European country with the highest average rating (4.33\/5) and Sweden is the lowest (3.86\/5).<\/i>","d6b3cb40":"Visualizing the count of restaurants grouped by the most common 20 European cities.\n\n<i>The European cities with the highest count of restaurants on TripAdvisor are Paris, Rome, Madrid, and Milan.<\/i>\n<br>\n<i>London restaurants are considered on TripAdvisor as part of the 'Greater London' region, while the city values are London's boroughs<\/i>","768a160a":"Reading the dataset using the *pandas* library and displaying the first 5 records.","3c9d8393":"Showing the relationship between average rating and open hours per week for the 20 most popular European cities.\n\n<i>As seen in the country-equivalent plot, there seems to be a direct relationship between open hours per week and average rating, with Madrid representing an outlier as it has restaurants open for more than 70 hours per week but it received the lowest average ratings on TripAdvisor.<\/i>\n<br>\n<i>It is interesting to see that between cities of the same country there might be large difference, as in the French case, with restaurants in Lyon and Marseille open for less than 55 hours per week, in contrast with the Paris mean value of 63 open hours per week.<\/i>","fe348d3e":"Displaying on the Italian map the percentage of restaurants with at least one Michelin award - which is much more rare than the Traveller's Choice one.\n\n<i>Aosta Valley is the Italian region with the highest percentage by far (0.37), while some regions in the centre of the country such as Tuscany and Umbria follow<\/i>","4c121373":"Visualizing the count of restaurants grouped by country.\n\n<i>TripAdvisor stores data mainly for restaurants from Italy, Spain, France, England, and Germany.<\/i>","aea58635":"Showing how the <i>London<\/i> restaurants are displayed on TripAdvisor under the 'original_location' field.","e96b1b3f":"Visualizing the columns with missing values using the *missingno* library.\n\n<i>There are several fields with missing data, and the only one with legitimate NA values is 'awards', since only few restaurants received 'Certificate of Excellence' or 'Michelin' awards.<\/i>\n<br>\n<i>All the other missing values relate to data not made available by TripAdvisor.<\/i>","b495c959":"Displaying in a radar chart the comparison between 'avg_rating', 'food', 'service', 'value', and 'athmosphere' for the top 8 countries.\n\n<i>Greece has significantly higher average ratings for all restaurant categories compared to the other European countries<\/i>\n<br>\n<i>Portugal has also high ratings compared to the other countries, but far lower than Greece, which is a positive anomaly in this comparison<\/i>\n<br>\n<i>It is also worth to note that France has the lowest mean Athmosphere rating (3.84\/5) in the top 20 European countries, whereas Italy has the lowest Service rating (3.98\/5)<\/i>","14c6fea7":"Showing the relationship between average rating and open hours per week for all European countries.\n\n<i>There is a direct relationship between open hours per week and average rating, with Greek restaurants open for more than 90 hours per week, and countries with the lowest average rating open for less than 60 hours per week.<\/i>","59dc12ef":"<center><img src=\"https:\/\/i.imgur.com\/jkFyCHK.jpg\"><\/center>\n\n<br>\n\n<center><h1>\ud83c\udf72 TripAdvisor European restaurants - EDA<\/h1><\/center>\n\n# <a id='0'>Notebook Content<\/a>\n\n### - <a href='#1'>1. Introduction<\/a>\n### - <a href='#2'>2. Dataset<\/a>\n### - <a href='#3'>3. Exploratory Data Analysis (EDA)<\/a>\n#### &ensp; - <a href='#31'>3.1. Countries<\/a>\n#### &ensp; - <a href='#32'>3.2. Cities<\/a>\n#### &ensp; - <a href='#33'>3.3. Cuisines<\/a>\n#### &ensp; - <a href='#34'>3.4. Maps<\/a>","c5363c85":"Counting the restaurants grouped by Italian regions.","cc105cb9":"## <a id='32'>3.2. Cities<\/a>","2fbbfcbb":"Displaying the location of European countries based on the Open Hours per week values.\n\n<i>There is an indirect relationship between the shifts and the open hours: the highest the number of open hours, the lower the number of shifts<\/i>\n<br>\n<i>France and Italy are the countries with the highest number of shifts per week - which are shorter than usual, given that overall their restaurants do not stay open for long.<\/i>","32702e8e":"Plotting the top 10 cuisine types by considering the average rating and the total number of restaurants associated to each cuisine type.\n\n<i>Italian cuisine is the one served by the highest number of restaurants in Europe, while Mediterranean and Bar are the ones with the highest median reviews received.<\/i>\n<br>\n<i>Fast Food restaurants are obviously the ones with the lowest average ratings.<\/i>","15c3492c":"Showing the location of the 20 most popular European cities.\n\n<i>There is no surprise in considering that most of the cities are located not far from each other, as Italy, Spain, France, and Germany are adjacent.<\/i>","1632a09b":"# <a id='1'>1. Introduction<\/a>\n\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; line-height: 1.7em\">\n<p>\ud83c\udfaf <b>Goals<\/b>:\n<li>Generic exploration of the TripAdvisor European restaurants dataset<\/li>\n<li>Effect of cuisine types and vegerian, vegan, and gluten-free options to the restaurant ratings<\/li>\n<li>Geographic distribution of restaurant ratings  - within Europe and within Italy (only country with JSON border data)<\/li>\n<\/p>\n<br>\n<p>\ud83d\udd28 <b>Tools<\/b>:\n<li><i>numpy<\/i> and <i>pandas<\/i> for data manipulation<\/li>\n<li><i>missingno<\/i> to display the missing data in the TripAdvisor dataset<\/li>\n<li><i>seaborn<\/i> and <i>plotly<\/i> for data visualization<\/li>\n<\/p>\n<\/div>","98a3085c":"Plotting on the Italian map the percentage of restaurants with at least one award.\n\n<i>Aosta Valley is the Italian region with the highest percentage by far (0.37), while some regions in the centre of the country such as Tuscany and Umbria follow<\/i>","93fbb3fe":"Showing on the Italian map the median price per region.\n\n<i>Restaurants in the North-East area of Italy are the ones with the highest percentage of awards compared to their median prices, while Aosta Valley is the one with the highest percentage of awards but also the highest median price.<\/i>","e7bfd23a":"Plotting the relationship between percentage of restaurants with specific food options and reviews per restaurant.\n\n<i>In general, countries with higher percentage of restaurants that offer specific food options (vegan, vegetarian, or gluten-free) have higher reviews per restaurants.<\/i>\n<br>\n<i>The only evident outlier is Germany, which has a relatively high percentage of restaurants with vegetarian food, but really low reviews per restaurants.<\/i>"}}