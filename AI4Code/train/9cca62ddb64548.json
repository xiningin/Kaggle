{"cell_type":{"f3a80ed0":"code","d02e8508":"code","dde65f53":"code","6d2becb8":"code","c969d523":"code","5f12e9e8":"code","0fb55df6":"markdown","039dcb3e":"markdown","1c575c5a":"markdown","abbbd536":"markdown","91f7e0dd":"markdown"},"source":{"f3a80ed0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d02e8508":"def msdpd169(lag, msdpd, total_subframes):  # LAG\n    so = np.zeros(total_subframes)\n    ms = np.zeros(13)\n    zy = np.zeros((13, 13))\n    for i in range(total_subframes - 2):\n        so[i] = lag[i + 2] - 2 * lag[i + 1] + lag[i]\n    for i in range(total_subframes - 2):\n        for j in range(-6, 7, 1):\n            if so[i] == j:\n                ms[j + 6] = ms[j + 6] + 1\n    for i in range(total_subframes - 2):\n        for l in range(-6, 7, 1):\n            for k in range(-6, 7, 1):\n                if so[i] == l:\n                    if so[i + 1] == k:\n                        zy[l + 6][k + 6] = zy[l + 6][k + 6] + 1\n    k = 0\n    for i in range(13):\n        for j in range(13):\n            msdpd[k] = float(zy[i][j]) \/ ms[i]\n            if ms[i] == 0:\n                msdpd[k] = 0\n            k = k + 1","dde65f53":"def extract_feature(file, time, emr):\n    total_subframes= int(time*50*4)\n    data = np.array(np.load(file), dtype='float')\n    '''Select Int Pitrch Delay'''\n    data = data[:,:,-8:-4].reshape(len(data), -1)\n    print(data.shape,total_subframes)\n    '''Select feature'''\n    feature_dim=169\n    fea_temp = np.zeros((len(data), feature_dim))\n    len_fea = len(data) * feature_dim\n    for index in tqdm(range(len(data))):\n        msdpd169(data[index, :], fea_temp[index, :], total_subframes)\n    '''expand label dimension'''\n    fea = np.zeros((len(fea_temp), fea_temp.shape[1] + 1))\n    for i in range(len(fea_temp)):\n        if emr == 0:\n            fea[i, 0] = -1\n            fea[i, 1:] = fea_temp[i]\n        else :\n            fea[i, 0] = 1\n            fea[i, 1:] = fea_temp[i]\n    return fea","6d2becb8":"import numpy as np\nfrom tqdm import tqdm \n\ntime = 1\nemr=100\n\ncover_file='..\/input\/amr-steg\/AMRNB_%ds_0_huang.npy'%time\nstego_file='..\/input\/amr-steg\/AMRNB_%ds_%d_huang.npy'%(time,emr)\n\ncover_feature = extract_feature(cover_file, time, 0)\nstego_feature = extract_feature(stego_file, time, emr)","c969d523":"ts = 0.25 \nts_num = int(len(cover_feature) * float(ts))\n\ntrain = np.vstack((stego_feature[ts_num:], cover_feature[ts_num:]))\ntest = np.vstack((stego_feature[:ts_num], cover_feature[:ts_num]))\nnp.random.shuffle(train)\nnp.random.shuffle(test)\ny_test = test[:, 0]\ny_train = train[:, 0]\nx_test = test[:, 1:]\nx_train = train[:, 1:]\nprint(y_test, y_train, y_test.shape, y_train.shape, x_test.shape, x_train.shape)","5f12e9e8":"from sklearn.metrics import accuracy_score, confusion_matrix\nimport random\nfrom sklearn import svm\n\nclf_rbf = svm.SVC(kernel='rbf') \nclf_rbf.fit(x_train, y_train)\ny_pred = clf_rbf.predict(x_test)\naccuracy = accuracy_score(y_test, y_pred)\ntn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\nfpr = fp \/ (fp + tn)\nfnr = fn \/ (fn + tp)\n\nprint('acc={:.3f},fpr={:.3f},fnr={:.3f},tn={},fp={},fn={},tp={}'.format(accuracy, fpr, fnr, tn, fp, fn, tp))","0fb55df6":"# Loading Data & Extract Feature","039dcb3e":"# Extract Feature Function","1c575c5a":"# Train SVM","abbbd536":"# Split Train\/Test Dataset","91f7e0dd":"# cite this work\nRen Y, Yang J, Wang J, et al. AMR steganalysis based on second-order difference of pitch delay[J]. IEEE Transactions on Information Forensics and Security, 2016, 12(6): 1345-1357.\n\nPlease note that we only used the MSDPD feature, which is part of the CSMDPD feature in the paper."}}