{"cell_type":{"04840f07":"code","92ee6faf":"code","63e856e6":"code","2bd82c62":"code","459f7fb1":"code","f53ae1c6":"code","1b043f8b":"code","0224647b":"code","f5f431de":"code","74367974":"code","ab765e01":"code","9d9fb77b":"code","8a8bcb15":"code","de7e7245":"code","c688e1a3":"code","462ba6cb":"code","f9f68396":"code","d25cde9c":"code","9f1ebbb2":"code","3a293f2e":"code","a08a6dad":"code","b3908c04":"code","8aece88b":"code","85c83682":"code","eb59f87d":"code","c9f3b9eb":"code","fd3ce0cf":"markdown","208808df":"markdown","3d665c46":"markdown","64577664":"markdown","25e138f6":"markdown","af4d6edf":"markdown","a9314612":"markdown","308aaa6a":"markdown","3aaf113a":"markdown","8a5ce417":"markdown","2ef7adb2":"markdown","c9d25b47":"markdown","36c8d390":"markdown","536a24d7":"markdown","b7350fea":"markdown","0a2e3b60":"markdown"},"source":{"04840f07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","92ee6faf":"import numpy as np\nimport matplotlib.pyplot as plt\nimport h5py\nimport scipy\nfrom PIL import Image\nfrom scipy import ndimage\n%matplotlib inline","63e856e6":"def load_dataset():\n    train_dataset = h5py.File('..\/input\/train_catvnoncat.h5', \"r\")\n    train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) # your train set features\n    train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) # your train set labels\n\n    test_dataset = h5py.File('..\/input\/test_catvnoncat.h5', \"r\")\n    test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) # your test set features\n    test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) # your test set labels\n\n    classes = np.array(test_dataset[\"list_classes\"][:]) # the list of classes\n    \n    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))\n    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))\n    \n    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes","2bd82c62":"# Loading the dataset\ntrain_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()","459f7fb1":"# Example of a picture\nindex = 60\nplt.imshow(train_set_x_orig[index])\nprint (\"y = \" + str(train_set_y[:, index]) + \", it's a '\" + classes[np.squeeze(train_set_y[:, index])].decode(\"utf-8\") +  \"' picture.\")","f53ae1c6":"m_train = train_set_x_orig.shape[0]\nm_test = test_set_x_orig.shape[0]\nnum_px = train_set_x_orig.shape[1]\n\nprint (\"Number of training examples: m_train = \" + str(m_train))\nprint (\"Number of testing examples: m_test = \" + str(m_test))\nprint (\"Height\/Width of each image: num_px = \" + str(num_px))\nprint (\"Each image is of size: (\" + str(num_px) + \", \" + str(num_px) + \", 3)\")\nprint (\"train_set_x shape: \" + str(train_set_x_orig.shape))\nprint (\"train_set_y shape: \" + str(train_set_y.shape))\nprint (\"test_set_x shape: \" + str(test_set_x_orig.shape))\nprint (\"test_set_y shape: \" + str(test_set_y.shape))","1b043f8b":"train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T\ntest_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T\n\nprint (\"train_set_x_flatten shape: \" + str(train_set_x_flatten.shape))\nprint (\"train_set_y shape: \" + str(train_set_y.shape))\nprint (\"test_set_x_flatten shape: \" + str(test_set_x_flatten.shape))\nprint (\"test_set_y shape: \" + str(test_set_y.shape))\nprint (\"sanity check after reshaping: \" + str(train_set_x_flatten[0:5,0]))","0224647b":"\ntrain_set_x = train_set_x_flatten\/255.\ntest_set_x = test_set_x_flatten\/255.","f5f431de":"def sigmoid(z):\n    s = 1 \/ (1 + np.exp(-z))\n    return s","74367974":"print (\"sigmoid([0, 2]) = \" + str(sigmoid(np.array([0,2]))))","ab765e01":"# Initializing parameters\n# Implement parameter initialization w as a vector of zeros.","9d9fb77b":"def initialize_with_zeros(dim):\n    w = np.zeros((dim, 1))\n    b = 0\n    assert(w.shape == (dim,1))\n    assert(isinstance(b, float) or isinstance(b, int))\n    return w, b","8a8bcb15":"dim = 2\nw, b = initialize_with_zeros(dim)\nprint (\"w = \" + str(w))\nprint (\"b = \" + str(b))","de7e7245":"# A function propogate() that computes the cost function and its gradient\n","c688e1a3":"def propagate(w, b, X, Y):\n    m = X.shape[1]\n    # FORWARD PROPAGATION (FROM X TO COST)\n    # compute activation\n    A = sigmoid(np.dot(w.T, X) + b) \n    # compute cost\n    cost = -1 \/ m * np.sum(Y * np.log(A) + (1 - Y) * np.log(1 - A))\n    \n    # BACKWARD PROPAGATION (TO FIND GRAD)\n    dw = 1 \/ m * np.dot(X, (A - Y).T)\n    db = 1 \/ m * np.sum(A - Y)\n    \n    assert(dw.shape == w.shape)\n    assert(db.dtype == float)\n    cost = np.squeeze(cost)\n    assert(cost.shape == ())\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return grads, cost","462ba6cb":"w, b, X, Y = np.array([[1.],[2.]]), 2., np.array([[1.,2.,-1.],[3.,4.,-3.2]]), np.array([[1,0,1]])\ngrads, cost = propagate(w, b, X, Y)\nprint (\"dw = \" + str(grads[\"dw\"]))\nprint (\"db = \" + str(grads[\"db\"]))\nprint (\"cost = \" + str(cost))","f9f68396":"# Optimization\n# You have initialized your parameters.\n# You are also able to compute a cost function and its gradient.\n# Now, you want to update the parameters using gradient descent.","d25cde9c":"def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):\n    costs = []\n    for i in range(num_iterations):\n        \n        # Cost and gradient calculation \n        grads, cost = propagate(w, b, X, Y)\n        \n        # Retrieve derivatives from grads\n        dw = grads[\"dw\"]\n        db = grads[\"db\"]\n        \n        # update rule \n        w = w - learning_rate * dw\n        b = b - learning_rate * db\n        \n        # Record the costs\n        if i % 100 == 0:\n            costs.append(cost)\n        \n        # Print the cost every 100 training iterations\n        if print_cost and i % 100 == 0:\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    \n    params = {\"w\": w,\n              \"b\": b}\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return params, grads, costs","9f1ebbb2":"params, grads, costs = optimize(w, b, X, Y, num_iterations= 100, learning_rate = 0.009, print_cost = False)\n\nprint (\"w = \" + str(params[\"w\"]))\nprint (\"b = \" + str(params[\"b\"]))\nprint (\"dw = \" + str(grads[\"dw\"]))\nprint (\"db = \" + str(grads[\"db\"]))","3a293f2e":"def predict(w, b, X):\n    \n    m = X.shape[1]\n    Y_prediction = np.zeros((1,m))\n    w = w.reshape(X.shape[0], 1)\n    \n    # Compute vector \"A\" predicting the probabilities of a cat being present in the picture\n    A = sigmoid(np.dot(w.T, X) + b)\n\n    for i in range(A.shape[1]):\n        \n        # Convert probabilities A[0,i] to actual predictions p[0,i]\n        Y_prediction[0, i] = 1 if A[0, i] > 0.5 else 0\n    \n    assert(Y_prediction.shape == (1, m))\n    \n    return Y_prediction\n","a08a6dad":"w = np.array([[0.1124579],[0.23106775]])\nb = -0.3\nX = np.array([[1.,-1.1,-3.2],[1.2,2.,0.1]])\nprint (\"predictions = \" + str(predict(w, b, X)))","b3908c04":"def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):\n    \n    # initialize parameters with zeros (\u2248 1 line of code)\n    w, b = initialize_with_zeros(X_train.shape[0])\n\n    # Gradient descent (\u2248 1 line of code)\n    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)\n    \n    # Retrieve parameters w and b from dictionary \"parameters\"\n    w = parameters[\"w\"]\n    b = parameters[\"b\"]\n    \n    # Predict test\/train set examples (\u2248 2 lines of code)\n    Y_prediction_test = predict(w, b, X_test)\n    Y_prediction_train = predict(w, b, X_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))\n\n    \n    d = {\"costs\": costs,\n         \"Y_prediction_test\": Y_prediction_test, \n         \"Y_prediction_train\" : Y_prediction_train, \n         \"w\" : w, \n         \"b\" : b,\n         \"learning_rate\" : learning_rate,\n         \"num_iterations\": num_iterations}\n    \n    return d","8aece88b":"# training\nd = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)","85c83682":"index = 2\nplt.imshow(test_set_x[:,index].reshape((num_px, num_px, 3)))\nprint (str(test_set_y[0,index]))","eb59f87d":"# Plot learning curve (with costs)\ncosts = np.squeeze(d['costs'])\nplt.plot(costs)\nplt.ylabel('cost')\nplt.xlabel('iterations (per hundreds)')\nplt.title(\"Learning rate =\" + str(d[\"learning_rate\"]))\nplt.show()","c9f3b9eb":"learning_rates = [0.01, 0.001, 0.0001]\nmodels = {}\nfor i in learning_rates:\n    print (\"learning rate is: \" + str(i))\n    models[str(i)] = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 1500, learning_rate = i, print_cost = False)\n    print ('\\n' + \"-------------------------------------------------------\" + '\\n')\n\nfor i in learning_rates:\n    plt.plot(np.squeeze(models[str(i)][\"costs\"]), label= str(models[str(i)][\"learning_rate\"]))\n\nplt.ylabel('cost')\nplt.xlabel('iterations (hundreds)')\n\nlegend = plt.legend(loc='upper center', shadow=True)\nframe = legend.get_frame()\nframe.set_facecolor('0.90')\nplt.show()","fd3ce0cf":"Building parts of our algorithm<br>\nThe main steps for building a Neural Network are:\n- Define the model structure (such as number of input features)\n- Initialize the model's parameters\n- Loop:\n> - Calculate current loss (forward propagation)\n> - Calculate current gradient (backward propagation)\n> - Update parameters (gradient descent)\n\nWe often build 1-3 separately and integrate them into one function we call model().","208808df":"#### Choice of learning rate\nIn order for Gradient Descent to work you must choose the learning rate wisely. The learning rate $\\alpha$ determines how rapidly we update the parameters. If the learning rate is too large we may \"overshoot\" the optimal value. Similarly, if it is too small we will need too many iterations to converge to the best values. That's why it is crucial to use a well-tuned learning rate.\n\nLet's compare the learning curve of our model with several choices of learning rates. Run the cell below. This should take about 1 minute. Feel free also to try different values than the three we have initialized the learning_rates variable to contain, and see what happens.","3d665c46":"- Different learning rates give different costs and thus different predictions results.\n- If the learning rate is too large (0.01), the cost may oscillate up and down. It may even diverge (though in this example, using 0.01 still eventually ends up at a good value for the cost).\n- A lower cost doesn't mean a better model. You have to check if there is possibly overfitting. It happens when the training accuracy is a lot higher than the test accuracy.\n- In deep learning, we usually recommend that you:\n> - Choose the learning rate that better minimizes the cost function.\n> - If your model overfits, use other techniques to reduce overfitting.","64577664":"We add \"\\_orig\" at the end of image datasets (train and Test) because we are going to preprocess them.<br>\nAfter preprocessing , we will end up with train_set_x and test_set_x (the labels train_set_y and test_set_y dont need any preprocessing).\n\nline of your train_set_x_orig and test_set_x_orig is an array representing an image. You can visualize an example by running the following code. Feel free also to change the index value and re-run to see other images.\n\n\n","25e138f6":"Values for:\n- m_train (no of training examples)\n- m_test (no of test examples)\n- num_px (= height = width of a training image)\n\ntrain_set_x_orig is a numpy-array of shape (m_train, numpx, numpx, 3).\nYou can access by writing train_set_x_orig.shape[0].","af4d6edf":"You can see the cost decreasing. It shows that the parameters are being learned. However, you see that you could train the model even more on the training set. Try to increase the number of iterations in the cell above and rerun the cells. You might see that the training set accuracy goes up, but the test set accuracy goes down. This is called overfitting.","a9314612":"We are able to use w and b to predict the labels for a dataset X. Implementing the predict() function. There are two steps to computing predictions:\n\nCalculate $\\hat{Y} = A = \\sigma(w^T X + b)$\n\nConvert the entries of a into 0 (if activation <= 0.5) or 1 (if activation > 0.5), stores the predictions in a vector Y_prediction. If you wish, you can use an if\/else statement in a for loop (though there is also a way to vectorize this).\"","308aaa6a":"A trick when you want to flatten a matrix X of shape (a,b,c,d) to a matrix X_flatten of shape\n(b \\* c \\* d, a) is to use:<br>\nX_flatten = X.reshape(X.shape[0], -1).T","3aaf113a":"- Initialize (w,b)\n- Optimize the loss iteratively to learn parameters (w,b):\n> - computing the cost and its gradient\n> - updating the parameters using gradient descent\n- Use the learned (w,b) to predict the labels for a given set of examples\n","8a5ce417":"Forward Propagation:\n\n- You get X\n- You compute \n> - $A = \\sigma(w^T X + b) = (a^{(1)}, a^{(2)}, ..., a^{(m-1)}, a^{(m)})$\n- You calculate the cost function: $J = -\\frac{1}{m}\\sum_{i=1}^{m}y^{(i)}\\log(a^{(i)})+(1-y^{(i)})\\log(1-a^{(i)})$\n\n\nHere are the two formulas you will be using:\n$$ \\frac{\\partial J}{\\partial w} = \\frac{1}{m}X(A-Y)^T\\tag{7}$$$$ \\frac{\\partial J}{\\partial b} = \\frac{1}{m} \\sum_{i=1}^m (a^{(i)}-y^{(i)})\\tag{8}$$","2ef7adb2":"The goal is to learn $w$ and $b$ by minimizing the cost function $J$. For a parameter $\\theta$, the update rule is $ \\theta = \\theta - \\alpha \\text{ } d\\theta$, where $\\alpha$ is the learning rate.","c9d25b47":"To represent color images, the red, green and blue channels (RGB) must be specified for each pixel, and so the pixel value is actually a vector of three numbers ranging from 0 to 255.\n<br>\nOne common preprocessing step in machine learning is to center and standardize your dataset, meaning that you substract the mean of the whole numpy array from each example, and then divide each example by the standard deviation of the whole numpy array. But for picture datasets, it is simpler and more convenient and works almost as well to just divide every row of the dataset by 255 (the maximum value of a pixel channel).<br>\n\nLet's standardize our dataset.","36c8d390":"Training accuracy is close to 100%. This is a good sanity check: your model is working and has high enough capacity to fit the training data. Test error is 68%. It is actually not bad for this simple model, given the small dataset we used and that logistic regression is a linear classifier. \n\nAlso, you see that the model is clearly overfitting the training data. Later in this specialization you will learn how to reduce overfitting, for example by using regularization. Using the code below (and changing the index variable) you can look at predictions on pictures of the test set.","536a24d7":"We need to compute $sigmoid( w^T x + b) = \\frac{1}{1 + e^{-(w^T x + b)}}$ to make predictions.","b7350fea":"dataset contains\n- a training set of m_train images labeled as cat(y=1) or non-cat(y=0)\n- a test set of m_test images labeled as cat or non-cat\n- each image is of shape (num_px, num_px, 3) where 3 is for 3 channels (RGB). Thus, each image is square (height = num_px) and (width = num_px)","0a2e3b60":"Reshaping images of shape (num_px, num_px, 3) in a numpy-array of shape (num_px \\* num_px \\* 3, 1). After this, our training (and test) dataset is a numpy-array where each column represents a flattened image. There should be m_train (respectively m_test) columns."}}