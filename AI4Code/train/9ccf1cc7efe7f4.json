{"cell_type":{"7f570060":"code","c52f090f":"code","15280259":"code","f84ee4d6":"code","49ed6554":"code","565a8030":"code","4d9d00ed":"code","093ca4ab":"code","c57a1c87":"code","f1c55d5c":"code","72dda286":"code","84cb3326":"code","cf4bfba3":"code","ae33ef6d":"code","70508063":"code","795db1e5":"code","f1f7d2c7":"code","d9981f0b":"code","6ad644e7":"code","757cf7a7":"code","a719a4c2":"code","75c205bd":"code","f259db8d":"code","4622be78":"code","c2501c52":"code","c206025b":"markdown"},"source":{"7f570060":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import skew\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport lightgbm as lgbm\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c52f090f":"train_filepath = \"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\"\ntrain_data = pd.read_csv(train_filepath)\n\ntest_filepath = \"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\"\ntest_data = pd.read_csv(test_filepath)","15280259":"train_data.head(20)","f84ee4d6":"#Fill variables with NaN - train_data\n\ntrain_data['LotFrontage'] = train_data['LotFrontage'].fillna(0)\ntrain_data['Alley'] = train_data['Alley'].fillna(\"No alley\")\ntrain_data['MasVnrType'] = train_data['MasVnrType'].fillna(\"Unknown\")\ntrain_data['MasVnrArea'] = train_data['MasVnrArea'].fillna(0)\ntrain_data['BsmtQual'] = train_data['BsmtQual'].fillna(\"No basement\")\ntrain_data['BsmtCond'] = train_data['BsmtCond'].fillna(\"No basement\")\ntrain_data['BsmtExposure'] = train_data['BsmtExposure'].fillna(\"No basement\")\ntrain_data['BsmtFinType1'] = train_data['BsmtFinType1'].fillna(\"No basement\")\ntrain_data['BsmtFinType2'] = train_data['BsmtFinType2'].fillna(\"No basement\")\ntrain_data['Electrical'] = train_data['Electrical'].fillna(\"Unknown\")\ntrain_data['FireplaceQu'] = train_data['FireplaceQu'].fillna(\"No fireplace\")\ntrain_data['GarageType'] = train_data['GarageType'].fillna(\"No garage\")\ntrain_data['GarageYrBlt'] = train_data['GarageYrBlt'].fillna(0)\ntrain_data['GarageFinish'] = train_data['GarageFinish'].fillna(\"No garage\")\ntrain_data['GarageQual'] = train_data['GarageQual'].fillna(\"No garage\")\ntrain_data['GarageCond'] = train_data['GarageCond'].fillna(\"No garage\")\ntrain_data['PoolQC'] = train_data['PoolQC'].fillna(\"No pool\")\ntrain_data['Fence'] = train_data['Fence'].fillna(\"No fence\")\ntrain_data['MiscFeature'] = train_data['MiscFeature'].fillna(\"None\")","49ed6554":"#New features train dataset\ntrain_data['Pool'] = train_data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ntrain_data['Years_since_construction'] = train_data['YrSold'] - train_data['YearRemodAdd']\ntrain_data['Fireplace'] = train_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\ntrain_data['Garage'] = train_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ntrain_data['Fence'] = train_data['Fence'].apply(lambda x: 1 if x != \"No fence\" else 0)","565a8030":"#Fill variables with NaN - test_data\n\ntest_data['LotFrontage'] = test_data['LotFrontage'].fillna(0)\ntest_data['Alley'] = test_data['Alley'].fillna(\"No alley\")\ntest_data['MasVnrType'] = test_data['MasVnrType'].fillna(\"Unknown\")\ntest_data['MasVnrArea'] = test_data['MasVnrArea'].fillna(0)\ntest_data['BsmtQual'] = test_data['BsmtQual'].fillna(\"No basement\")\ntest_data['BsmtCond'] = test_data['BsmtCond'].fillna(\"No basement\")\ntest_data['BsmtExposure'] = test_data['BsmtExposure'].fillna(\"No basement\")\ntest_data['BsmtFinType1'] = test_data['BsmtFinType1'].fillna(\"No basement\")\ntest_data['BsmtFinType2'] = test_data['BsmtFinType2'].fillna(\"No basement\")\ntest_data['Electrical'] = test_data['Electrical'].fillna(\"Unknown\")\ntest_data['FireplaceQu'] = test_data['FireplaceQu'].fillna(\"No fireplace\")\ntest_data['GarageType'] = test_data['GarageType'].fillna(\"No garage\")\ntest_data['GarageYrBlt'] = test_data['GarageYrBlt'].fillna(0)\ntest_data['GarageFinish'] = test_data['GarageFinish'].fillna(\"No garage\")\ntest_data['GarageQual'] = test_data['GarageQual'].fillna(\"No garage\")\ntest_data['GarageCond'] = test_data['GarageCond'].fillna(\"No garage\")\ntest_data['PoolQC'] = test_data['PoolQC'].fillna(\"No pool\")\ntest_data['Fence'] = test_data['Fence'].fillna(\"No fence\")\ntest_data['MiscFeature'] = test_data['MiscFeature'].fillna(\"None\")\n\ntest_data['MSZoning'] = test_data['MSZoning'].fillna(\"RL\")\ntest_data['Utilities'] = test_data['Utilities'].fillna(\"AllPub\")\ntest_data['Exterior1st'] = test_data['Exterior1st'].fillna(\"VinylSd\")\ntest_data['Exterior2nd'] = test_data['Exterior2nd'].fillna(\"VinylSd\")\ntest_data['BsmtFinSF1'] = test_data['BsmtFinSF1'].fillna(444)\ntest_data['BsmtFinSF2'] = test_data['BsmtFinSF2'].fillna(47)\ntest_data['BsmtUnfSF'] = test_data['BsmtUnfSF'].fillna(567)\ntest_data['TotalBsmtSF'] = test_data['TotalBsmtSF'].fillna(1057)\ntest_data['BsmtFullBath'] = test_data['BsmtFullBath'].fillna(1)\ntest_data['BsmtHalfBath'] = test_data['BsmtHalfBath'].fillna(0)\ntest_data['KitchenQual'] = test_data['KitchenQual'].fillna(\"TA\")\ntest_data['Functional'] = test_data['Functional'].fillna(\"Typ\")\ntest_data['GarageCars'] = test_data['GarageCars'].fillna(2)\ntest_data['GarageArea'] = test_data['GarageArea'].fillna(473)\ntest_data['SaleType'] = test_data['SaleType'].fillna(\"WD\")","4d9d00ed":"#New features test dataset\ntest_data['Pool'] = test_data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ntest_data['Years_since_construction'] = test_data['YrSold'] - train_data['YearRemodAdd']\ntest_data['Fireplace'] = test_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\ntest_data['Garage'] = test_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ntest_data['Fence'] = test_data['Fence'].apply(lambda x: 1 if x != \"No fence\" else 0)","093ca4ab":"corr_data = train_data.copy()\nobject_columns = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n                'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', \n               'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', \n               'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition']","c57a1c87":"encoder = LabelEncoder()\n\nfor col in object_columns:\n    corr_data[col] = encoder.fit_transform(corr_data[col].astype(str))","f1c55d5c":"#correlation_overview = corr_data.corr()\n#correlation_sales = correlation_overview['SalePrice']\n#corr_columns_1 = correlation_sales[correlation_sales > 0.05].index\n#corr_columns_1 = corr_columns_1.to_list()\n#correlation_sales[correlation_sales > 0.00]","72dda286":"#corr_columns_2 = correlation_sales[correlation_sales < -0.05].index\n#corr_columns_2 = corr_columns_2.to_list()\n#correlation_sales[correlation_sales < -0.10]","84cb3326":"#corr_columns = corr_columns_1 + corr_columns_2\n#corr_columns.remove('SalePrice')","cf4bfba3":"x_features = corr_data.columns\nx_features = x_features.to_list()\nx_features.remove('SalePrice')\nx_features.remove('YrSold')\nx_features.remove('Id')\ny_data = corr_data['SalePrice']\nfeature_selection = []\nfeatures = ['YrSold']\nscores = [60000]\n\nfor feature in x_features:\n    features.append(feature)\n    x_data = corr_data[features]\n    model = XGBRegressor(random_state=0, booster='gbtree', eta=0.1, max_depth=8)\n    score = cross_val_score(model, x_data, y_data, cv=5, scoring='neg_mean_absolute_error')\n    final_score = (-1 * score).mean()\n    scores.append(final_score)\n    length_list = len(scores)\n    if final_score < scores[(length_list - 2)]:\n        feature_selection.append(feature)\n    else:\n        features.remove(feature)\n        scores.remove(final_score)\n\n#Je zou hier bij else remove(feature) kunnen doen\ndf_0 = pd.DataFrame({'Features': features, 'Score': scores})\ndf_0.plot.bar(figsize=(30,10), title=\"Feature selection process\")","ae33ef6d":"print(feature_selection)","70508063":"#Preparation for model experimentation\nmodel_experimentation_dataset = train_data.copy()\nmodel_experimentation_dataset_x = model_experimentation_dataset[feature_selection]\nmodel_experimentation_dataset_x = pd.get_dummies(model_experimentation_dataset_x)\nmodel_experimentation_dataset_y = model_experimentation_dataset['SalePrice']","795db1e5":"#Experimentation eta\neta_list = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nvalue = []\nscore = []\n\nfor a in eta_list:\n    model_1 = XGBRegressor(random_state=0, booster='gbtree', eta=a, max_depth=1)\n    scores_1 = cross_val_score(model_1, model_experimentation_dataset_x, model_experimentation_dataset_y, cv=5, scoring='neg_mean_absolute_error')\n    final_score_1 = (-1 * scores_1).mean()\n    value.append(a)\n    score.append(final_score_1)\n\ndf = pd.DataFrame({'Value': value, 'Score': score})","f1f7d2c7":"print(df)","d9981f0b":"df_min = df.min()\nbest_eta = df_min.Value","6ad644e7":"max_depth_list = range(1, 21, 1)\nvalue_1 = []\nscore_1 = []\n\nfor a in max_depth_list:\n    model_1 = XGBRegressor(random_state=0, booster='gbtree', eta=best_eta, max_depth=a)\n    scores_1 = cross_val_score(model_1, model_experimentation_dataset_x, model_experimentation_dataset_y, cv=5, scoring='neg_mean_absolute_error')\n    final_score_1 = (-1 * scores_1).mean()\n    value_1.append(a)\n    score_1.append(final_score_1)\n\ndf_1 = pd.DataFrame({'Value': value_1, 'Score': score_1})","757cf7a7":"print(df_1)","a719a4c2":"df_1_min = df_1.min()\nbest_max_depth = df_1_min.Value\nbest_max_depth = best_max_depth.astype('int64')","75c205bd":"x_train = train_data[feature_selection]\nx_train = pd.get_dummies(x_train)\ny_train = train_data['SalePrice']\n\nx_test = test_data[feature_selection]\nx_test = pd.get_dummies(x_test)","f259db8d":"missing_cols = set(x_train.columns) - set(x_test.columns)\nfor c in missing_cols:\n    x_test[c] = 0\n\nx_test = x_test[x_train.columns]","4622be78":"#model = XGBRegressor(random_state=0, booster='gbtree', eta=0.1, max_depth=8)\nmodel = XGBRegressor(random_state=0, booster='gbtree', eta=best_eta, max_depth=best_max_depth)\nmodel.fit(x_train, y_train)\nprediction = model.predict(x_test)\ntest_data['SalePrice'] = prediction","c2501c52":"submission_features = ['Id', 'SalePrice']\nsubmission_data = test_data[submission_features].sort_values(by=['Id'])\nsubmission_data.to_csv('submission.csv', index=False)","c206025b":"In this data science project we will predict the sales price of houses. In order to make this project successful, we will carry out the following steps:\n1) Investigate the data types; int, objects, etc.\n2) The number of features with null values\n3) Try to fill these features with null values\n4) Identify significant features by exploring the correlation with sales price, as well as trends in the data"}}