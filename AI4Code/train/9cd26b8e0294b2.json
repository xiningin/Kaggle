{"cell_type":{"77e7e52b":"code","9775c48f":"code","280b727a":"code","85e224b1":"code","ca1543f9":"code","255115f0":"code","bd5cc05e":"code","4f2b09a3":"code","15f137d7":"code","30df79eb":"code","e3a91607":"code","2c34fbee":"code","866b4d6c":"code","c0b9ae07":"code","41923418":"code","41af1dfe":"code","096bb522":"code","9ed17f9c":"code","dbda7ef5":"code","f8329ac7":"code","dec678a5":"code","20f7ff78":"code","1f7c0578":"code","e866740a":"code","82093b14":"code","91770771":"code","d004218b":"code","695767b4":"code","9bfb8110":"code","8fb54712":"code","9403fa00":"code","d6eb7b4e":"code","b9928bd1":"code","1cbb1af3":"code","b11675b9":"code","a1f0293b":"code","b6034784":"code","3cc5a03b":"code","d9216bda":"code","d36fc5ca":"code","b70adebe":"markdown","51647a26":"markdown","e3c04973":"markdown","27f0c263":"markdown","82a7b951":"markdown","f07b659f":"markdown","bd3721d6":"markdown","9515f476":"markdown","ea1b282e":"markdown","c91caa21":"markdown","62d4a631":"markdown","077b9245":"markdown"},"source":{"77e7e52b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","9775c48f":"%matplotlib inline\nplt.style.use('seaborn-darkgrid')\npalette =  plt.get_cmap('Set2')","280b727a":"main_df = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\nmain_df.head()","85e224b1":"nullCounts = len(main_df) - main_df.isnull().sum()\nax1 = plt.gca()\ncolor= \"royalblue\"\nfigsize = (20,7)\nfontsize=16\nlog = False\nplot_args = {'figsize': figsize, 'fontsize': fontsize, 'log': log, 'color': color, 'ax': ax1}\n\n(nullCounts \/ len(main_df)).plot.bar(**plot_args)\nplt.title('Visualize Missing Values' , fontsize=30)\nplt.show()","ca1543f9":"main_df.describe(include=[np.int])","255115f0":"main_df.describe(include=[np.object])","bd5cc05e":"main_df.info()","4f2b09a3":"countries = main_df['country'].value_counts()[main_df['country'].value_counts(normalize=True)>0.01]\ncountries","15f137d7":"list_countries= countries.index\nlen(list_countries)","30df79eb":"plt.figure(figsize=(20,10))\nplt.title('Amount of content by country', fontsize=18)\nsns.barplot(y=list_countries, x=countries.values,alpha=0.6)\nplt.show()","e3a91607":"plt.figure(figsize=(14,7))\nfigure = plt.pie(countries.sort_values(ascending=False).iloc[:20], labels=countries.index, autopct=\"%1.1f%%\")\nplt.title('Pie Chart View')\nplt.show()","2c34fbee":"types = main_df['type'].value_counts()\ntypes","866b4d6c":"plt.figure(figsize=(14,7))\nsns.barplot(y=types.values, x=types.index)\nplt.title('Amount of Movies vs Tv shows')\nplt.show()","c0b9ae07":"movies = main_df[main_df['type']=='Movie']\ntv_shows= main_df[main_df['type']== 'TV Show']\n\nmovies","41923418":"movies.duration","41af1dfe":"MoviesProgress = movies['release_year'].value_counts().sort_index()\nTvshowProgress = tv_shows['release_year'].value_counts().sort_index()","096bb522":"plt.figure(figsize=(25,9))\nfontsize=20\n\nplt.plot(MoviesProgress.index, MoviesProgress.values, label='movies' )\nplt.plot(TvshowProgress.index, TvshowProgress.values, label='tv shows')\n\nplt.axvspan(2019,2021, alpha=0.2, color='r', label='Coronavirus')\n\nplt.xticks(list(range(1925,2022,5)))\nplt.title('Growth of content v\/s Time' , fontsize=fontsize)\nplt.xlabel('Time (years)', fontsize=fontsize)\nplt.ylabel('Content', fontsize=fontsize)\nplt.legend()\nplt.show()","9ed17f9c":"ratings = main_df['rating'].value_counts()","dbda7ef5":"plt.figure(figsize=(14,7))\n\nplt.title('Rating chart')\n\nsns.barplot(ratings.values,ratings.index, alpha=0.6)\nplt.show()","f8329ac7":"movies['duration'] = [int(i.split(' ')[0]) for i in movies.duration.dropna()]","dec678a5":"plt.figure(figsize=(30,7))\nplt.ylabel('Number of movies normalised' ,fontsize=fontsize)\nsns.distplot(movies['duration'], bins=60)\nplt.title('Duration distributions of films (Mins)',fontsize=fontsize)\nplt.xlabel(\"Duration (Time)\"  ,fontsize=fontsize)\nplt.legend()\nplt.show()","20f7ff78":"short = movies.sort_values('duration')[['title' ,'duration']].iloc[:20]","1f7c0578":"plt.figure(figsize=(30,9))\nplt.title('Top 20 shortest movies' , fontsize=25)\nplt.tick_params(labelsize=20)\nsns.barplot(y=short['title'], x=short['duration'],alpha=0.6)\nplt.xlabel('Duration (time) ', fontsize=fontsize)\nplt.show()","e866740a":"long = movies.sort_values('duration')[['title' ,'duration']].iloc[-20:]","82093b14":"plt.figure(figsize=(30,9))\nplt.title('Top 20 longest movies' , fontsize=25)\nplt.tick_params(labelsize=20)\nsns.barplot(y=long['title'], x=long['duration'],alpha=0.6)\nplt.xlabel('Duration (time) ', fontsize=fontsize)\nplt.show()","91770771":"tv_shows['duration'] = [int(i.split(' ')[0]) for i in tv_shows.duration]","d004218b":"# Tv-shows with singl season\nsingle_season = tv_shows[tv_shows['duration']==1]['title']\nprint(len(single_season))\nprint(single_season.values[:20])","695767b4":" tv_shows[tv_shows['duration']==4]['title'].values","9bfb8110":" tv_shows[tv_shows['title']=='La casa de papel']","8fb54712":"tv_shows[tv_shows['title']=='La casa de papel']['description'].values","9403fa00":"tvShows_seasons = tv_shows['duration'].value_counts()\nplt.figure(figsize=(30, 8))\nplt.title(\"Tv shows \" , fontsize=fontsize)\nplt.bar(x=tvShows_seasons.index , height=tvShows_seasons.values)\nplt.xlim((0,17))\nplt.xlabel('No. of seasons' , fontsize=fontsize)\nplt.ylabel(\"Counts\" ,fontsize=fontsize)\nplt.plot()","d6eb7b4e":"tv_shows['duration'].value_counts()","b9928bd1":"directors = main_df['director'].value_counts().sort_values(ascending=False)","1cbb1af3":"plt.title(\"Count of content produced by directors\" , fontsize=fontsize)\nplt.pie(directors.values[:10] , labels=directors.index[:10] , autopct='%1.1f%%')\nplt.show()","b11675b9":"directors","a1f0293b":"main_df.columns","b6034784":"indianMovies = movies[movies['country']=='India']\nindianSeries = tv_shows[tv_shows['country']==\"India\"]","3cc5a03b":"indianSeries['date_added']=pd.to_datetime(indianSeries['date_added'])\nindianMovies['date_added']=pd.to_datetime(indianMovies['date_added'])","d9216bda":"# latest 20 indian series \nindianSeries.sort_values(by='date_added' , ascending=False)[:20]","d36fc5ca":"indianMovies.sort_values(by='date_added' , ascending=False)[:20]","b70adebe":"# Visualize rating counts","51647a26":"# displaying a graph based on amount of content in country","e3c04973":"## Imports","27f0c263":"adapted from : https:\/\/www.kaggle.com\/radmirzosimov\/netflix-eda-with-plotly-seaborn","82a7b951":"<div class='alert alert-block alert-info'> <b>Tip:<\/b>\ntv ma is for mature audiences only.<\/div>","f07b659f":"***missing value in director, cast  and country***\n\n# display descriptions of values in columns","bd3721d6":"# Content growth throughout history","9515f476":"## Listing down the short movies","ea1b282e":"# Read Dataset","c91caa21":"# Lets look at the shows with a single season","62d4a631":"# looking at amount of TV shows vs movies","077b9245":"# displaying a bar for missing no"}}