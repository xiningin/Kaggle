{"cell_type":{"ec610e05":"code","8e3d67d5":"code","ae091409":"code","492bd73e":"code","7b166882":"code","59143996":"code","109df1bb":"code","19756864":"code","762af27e":"code","daaa2a75":"code","c43885ec":"code","039ee219":"code","7f80d1e9":"code","e06f8a5a":"code","14b417eb":"code","782f3e92":"code","2b4a91f1":"code","510bf2d4":"code","75858d50":"code","2056e62b":"code","aa7eaf3e":"code","8b65de92":"code","90f25fcb":"code","de5bb7ba":"code","b0acbe37":"code","6be4556f":"code","75ef7b42":"code","17d2c0fc":"code","0e5f4ad9":"code","709bac8f":"code","30b545c8":"code","56bb67b6":"code","a9d7999d":"markdown","8dfbef98":"markdown","e1e7f348":"markdown","6b9e20db":"markdown","6343e1b5":"markdown","2e867eec":"markdown","f8acf1ba":"markdown","9d8db7bf":"markdown","40fef0ee":"markdown","5f9d268d":"markdown","331bdff8":"markdown"},"source":{"ec610e05":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator \nplt.style.use('fivethirtyeight')\n%matplotlib inline","8e3d67d5":"confirmed_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeaths_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nrecoveries_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\n#data1=pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\")","ae091409":"#confirmed_df.head()","492bd73e":"#data1.head()","7b166882":"#data1.describe()\n\ncols = confirmed_df.keys()","59143996":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","109df1bb":"\ndates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \n \nbd_cases = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n    # case studies \n    bd_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Bangladesh'][i].sum())\n    ","19756864":"def daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n\nworld_daily_increase = daily_increase(world_cases)\n\nbd_daily_increase = daily_increase(bd_cases)\n","762af27e":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","daaa2a75":"print(bd_daily_increase)\nprint(bd_cases)","c43885ec":"days_in_future = 30\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-30]","039ee219":"\nstart = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","7f80d1e9":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, bd_cases, test_size=0.2, shuffle=False)","e06f8a5a":"svm_confirmed = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=6, C=0.1)\nsvm_confirmed.fit(X_train_confirmed, y_train_confirmed)\nsvm_pred = svm_confirmed.predict(future_forcast)","14b417eb":"# check against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(y_test_confirmed)\nplt.plot(svm_test_pred)\nplt.legend(['Test Data', 'SVM Predictions'])\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","782f3e92":"# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\npoly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\npoly_future_forcast = poly.fit_transform(future_forcast)","2b4a91f1":"# polynomial regression\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","510bf2d4":"print(linear_model.coef_)","75858d50":"plt.plot(y_test_confirmed)\nplt.plot(test_linear_pred)\nplt.legend(['Test Data', 'Polynomial Regression predictions'])","2056e62b":"# bayesian ridge polynomial regression\ntol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge(fit_intercept=False, normalize=True)\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(poly_X_train_confirmed, y_train_confirmed)","aa7eaf3e":"\nbayesian_search.best_params_","8b65de92":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(poly_X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","90f25fcb":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)\nplt.legend(['Test Data', 'Bayesian Ridge Polynomial Regression Predictions'])\n","de5bb7ba":"adjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(5, 5))\nplt.plot(adjusted_dates, bd_cases)\nplt.title('Num of Coronavirus Cases Over Time (Total)', size=12)\nplt.xlabel('Days Since 1\/22\/2020', size=12)\nplt.ylabel('Num of Cases', size=12)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","b0acbe37":"plt.figure(figsize=(5, 5))\nplt.plot(adjusted_dates, np.log10(bd_cases))\nplt.title('Log of num of Coronavirus Cases Over Time', size=12)\nplt.xlabel('Days Since 1\/22\/2020', size=12)\nplt.ylabel('num of Cases', size=12)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","6be4556f":"plt.figure(figsize=(5, 5))\nplt.bar(adjusted_dates, bd_daily_increase)\nplt.title('BD Daily Increases in Confirmed Cases', size=12)\nplt.xlabel('Days Since 1\/22\/2020', size=12)\nplt.ylabel('num of Cases', size=12)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","75ef7b42":"plt.figure(figsize=(5, 5))\nplt.plot(adjusted_dates, bd_cases)\nplt.plot(future_forcast, svm_pred, linestyle='dashed', color='red')\nplt.title('num of Coronavirus Cases Over Time', size=12)\nplt.xlabel('Days Since 1\/22\/2020', size=12)\nplt.ylabel('num of Cases', size=12)\nplt.legend(['Confirmed Cases', 'SVM predictions'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","17d2c0fc":"\nplt.figure(figsize=(5, 5))\nplt.plot(adjusted_dates, bd_cases)\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='black')\nplt.title('num of Coronavirus Cases Over Time', size=12)\nplt.xlabel('Days Since 1\/22\/2020', size=12)\nplt.ylabel('num of Cases', size=12)\nplt.legend(['Confirmed Cases', 'Polynomial Regression Predictions'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","0e5f4ad9":"plt.figure(figsize=(5, 5))\nplt.plot(adjusted_dates, bd_cases)\nplt.plot(future_forcast, bayesian_pred, linestyle='dashed', color='green')\nplt.title('num of Coronavirus Cases Over Time', size=12)\nplt.xlabel('Time', size=12)\nplt.ylabel('num of Cases', size=12)\nplt.legend(['Confirmed Cases', 'Polynomial Bayesian Ridge Regression Predictions'], prop={'size': 10})\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","709bac8f":"# Future predictions using SVM \nprint('SVM future predictions for next 30 days:')\nset(zip(future_forcast_dates[-30:], np.round(svm_pred[-30:])))","30b545c8":"# Future predictions using Polynomial Regression \nlinear_pred = linear_pred.reshape(1,-1)[0]\nprint('Polynomial regression future predictions for next 30 days:')\nset(zip(future_forcast_dates[-30:], np.round(linear_pred[-30:])))","56bb67b6":"# Future predictions using Linear Regression \nprint('Ridge regression future predictions for next 30 days:')\nset(zip(future_forcast_dates[-30:], np.round(bayesian_pred[-30:])))","a9d7999d":"Import the data","8dfbef98":"Data Preprocessing ","e1e7f348":"Showing the data","6b9e20db":"Forcasting of next 30 days","6343e1b5":"Predictions with SVM","2e867eec":"**>Author: Kazi Amit Hasan**\n\n\n**This notebook represents the impacts of the novel coronavirus in Bangladesh.\n\n****Please follow ther rules of government and stay safe.** \n**\n\nThe documentatiosns will be added soon. Feel free to give me with feedbacks.\n\n\n> Please upvote if you like it.\n\n\n","f8acf1ba":"Polynomial Regression","9d8db7bf":"Num of cases in Bangladesh","40fef0ee":"Import all the libraries","5f9d268d":"I will update this kernal regularly.","331bdff8":"Bayesian Ridge Polynomial Regression"}}