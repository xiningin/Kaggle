{"cell_type":{"c8243c2f":"code","4b6a5b2c":"code","d58f3c84":"code","cdcb245f":"code","28dccfe4":"code","c43d5a25":"code","ab314054":"code","e719b326":"markdown","8c7a5846":"markdown","3e4f86d8":"markdown","42851d70":"markdown","840c1b80":"markdown","5d7fab14":"markdown"},"source":{"c8243c2f":"import os\nimport pandas as pd\nimport numpy as np \n\nfrom PIL import Image\n\nimport torch\nimport torch.nn as nn\nimport torchvision\nfrom torch.utils.data import Dataset\nfrom torchvision import transforms\n\nimport xgboost as xgb\nfrom sklearn.metrics import cohen_kappa_score\n\nimport pickle\n\nDEVICE = torch.device(\"cuda:0\")\nDATA_SOURCE = os.path.join(\"..\",\"input\",\"aptos2019-blindness-detection\")\nDATA_SOURCE = os.path.join(\"..\",\"input\")","4b6a5b2c":"class RetinopathyDatasetTrain(Dataset):\n\n    def __init__(self, eval_set=False, random_state=42):\n        # read data list, split in train and eval, select the set\n        csv_file = os.path.join(DATA_SOURCE, \"train.csv\")\n        df = pd.read_csv(csv_file)\n        df_train = df.sample(n=int(df.shape[0]\/2), random_state=random_state)\n        ix=[i for i in df.index if i not in df_train.index.values.tolist()]  \n        df_eval = df.loc[ix]            \n        if eval_set : df = df_eval\n        else :        df = df_train\n        self.data = df.reset_index(drop=True)\n            \n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        # get image and process it to tensor ready for the model, extract features\n        folder = os.path.join(DATA_SOURCE, \"train_images\")\n        code = str(self.data.loc[idx, 'id_code'])\n        file = code + \".png\"\n        path = os.path.join(folder, file)\n        imgpil = Image.open(path)\n        base_transforms = transforms.Compose([transforms.Resize((224, 224)),\n                                              transforms.ToTensor(),\n                                              transforms.Normalize([0.485, 0.456, 0.406], \n                                                                   [0.229, 0.224, 0.225])])\n        img_tensor = base_transforms(imgpil)\n        label = self.data.loc[idx, \"diagnosis\"]\n        return {'image': img_tensor, 'labels': label}","d58f3c84":"# load the pretrained CNN used as feature extractor\n# no classifier defined, we will take the raw output from the CNN layers\nextractor = torchvision.models.resnet101(pretrained=True)\nextractor.fc = nn.Identity() \nextractor.to(DEVICE)\nextractor.eval()\n\ndata_loader_train = torch.utils.data.DataLoader(RetinopathyDatasetTrain(), \n                            batch_size=64, shuffle=False, num_workers=0, drop_last=False)\ndata_loader_eval = torch.utils.data.DataLoader(RetinopathyDatasetTrain(eval_set=True), \n                            batch_size=64, shuffle=False, num_workers=0, drop_last=False)\n\ndef get_extracted_data(data_loader):\n    for bi, d in enumerate(data_loader):\n        print(\".\", end=\"\")\n        img_tensor = d[\"image\"].to(DEVICE)\n        target = d[\"labels\"].numpy()\n        with torch.no_grad(): feature = extractor(img_tensor)\n        feature = feature.cpu().detach().squeeze(0).numpy()\n        if bi == 0 :\n            features = feature \n            targets = target \n        else :\n            features = np.concatenate([features, feature], axis=0)\n            targets = np.concatenate([targets, target], axis=0)\n    print(\"\")\n    return features, targets\n\nprint(\".............................\")\nfeatures_train, targets_train = get_extracted_data(data_loader_train)\nfeatures_eval, targets_eval = get_extracted_data(data_loader_eval)","cdcb245f":"XGBOOST_PARAM = {\n    \"random_state\" : 42,\n    'objective': 'multi:softmax',\n    \"num_class\" : 5,\n    \"n_estimators\" : 200,\n    \"eval_metric\" : \"mlogloss\"\n}\n\nxgb_model_1 = xgb.XGBClassifier(**XGBOOST_PARAM)\nxgb_model_1 = xgb_model_1.fit(features_train,targets_train.reshape(-1),\n                        eval_set=[(features_eval, targets_eval.reshape(-1))],\n                        early_stopping_rounds=20,\n                        verbose=False)\nprediction = xgb_model_1.predict(features_eval)\n# pred1 = XGBGBDT.predict_proba(features_eval)","28dccfe4":"xgb_model_2 = xgb.XGBClassifier(**XGBOOST_PARAM)\nxgb_model_2 = xgb_model_2.fit(features_eval,targets_eval.reshape(-1),\n                        eval_set=[(features_train, targets_train.reshape(-1))],\n                        early_stopping_rounds=20,\n                        verbose=False)","c43d5a25":"print(\"Cohen Kappa quadratic score\", \n      cohen_kappa_score(targets_eval, prediction, weights=\"quadratic\"))\nxgb.plot_importance(xgb_model_1, max_num_features=12)","ab314054":"torch.save(extractor.state_dict(), \"resnet101.pth\")\npickle.dump(xgb_model_1, open(\"xgb_model_1\", \"wb\"))\npickle.dump(xgb_model_2, open(\"xgb_model_2\", \"wb\"))","e719b326":"# Fit the XGBoost model","8c7a5846":"# Evaluation","3e4f86d8":"# Save models for submission","42851d70":"# Imports, settings and references","840c1b80":"# PyTorch's style data loader defintion\nadapted from : https:\/\/www.kaggle.com\/abhishek\/very-simple-pytorch-training-0-59","5d7fab14":"# Extract features"}}