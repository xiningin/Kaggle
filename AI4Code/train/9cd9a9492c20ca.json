{"cell_type":{"cde8326f":"code","7101c93f":"code","12423982":"code","84ce7bfd":"code","bd83f7c4":"code","e35816d3":"code","01bf0d78":"code","c50d7373":"code","0470a699":"code","069b30dd":"code","9298d78d":"code","f66c196b":"code","741635a3":"code","ca708668":"code","38e685a2":"code","0908ade9":"code","f914a155":"code","1231888f":"code","926cf762":"code","1c3230c1":"code","cf72ea3e":"code","ac5eca14":"code","46cd071a":"code","ebf5e072":"markdown","1ae3628d":"markdown","74a52997":"markdown","47ca774b":"markdown","fdedc21c":"markdown","2ff901ca":"markdown","5a3af17c":"markdown","afcfdf05":"markdown","3e6b0e21":"markdown","ce3bf13f":"markdown","b8cf9f7d":"markdown"},"source":{"cde8326f":"#loading\nimport pandas as pd\nimport numpy as np\nimport missingno as msno\n# Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n!pip install chart_studio\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n#preprocessing \nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom collections import Counter\n# Classification \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","7101c93f":"data = pd.read_csv(\"..\/input\/air-quality-data-in-india\/city_day.csv\")\ndata['Date'] = pd.to_datetime(data['Date'])\ndata.head()","12423982":"data.info()","84ce7bfd":"msno.heatmap(data)","bd83f7c4":"df1 = data.copy()\ndf1['PM2.5']=df1['PM2.5'].fillna((df1['PM2.5'].median()))\ndf1['PM10']=df1['PM10'].fillna((df1['PM10'].median()))\ndf1['NO']=df1['NO'].fillna((df1['NO'].median()))\ndf1['NO2']=df1['NO2'].fillna((df1['NO2'].median()))\ndf1['NOx']=df1['NOx'].fillna((df1['NOx'].median()))\ndf1['NH3']=df1['NH3'].fillna((df1['NH3'].median()))\ndf1['CO']=df1['CO'].fillna((df1['CO'].median()))\ndf1['SO2']=df1['SO2'].fillna((df1['SO2'].median()))\ndf1['O3']=df1['O3'].fillna((df1['O3'].median()))\ndf1['Benzene']=df1['Benzene'].fillna((df1['Benzene'].median()))\ndf1['Toluene']=df1['Toluene'].fillna((df1['Toluene'].median()))\ndf1['Xylene']=df1['Xylene'].fillna((df1['Xylene'].median()))\ndf1['AQI']=df1['AQI'].fillna((df1['AQI'].median()))\ndf1['Air_quality']=df1['Air_quality'].fillna('Moderate')","e35816d3":"df = df1.copy()\ndf = df[df['Date'] <= ('01-01-2020')] \ndf['Vehicular Pollution content'] = df['PM2.5']+df['PM10']+df['NO']+df['NO2']+df['NOx']+df['NH3']+df['CO']\ndf['Industrial Pollution content'] = df['SO2']+df['O3']+df['Benzene']+df['Toluene']+df['Xylene']\ndf = df.drop(['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2',\n       'O3','Benzene','Toluene','Xylene'],axis=1)\ndf.info()","01bf0d78":"def ploting(var):\n    df[var].iplot(title=var,xTitle='Cities',yTitle=var, linecolor='black', )\n    plt.show()\nploting('Vehicular Pollution content')\nploting('Industrial Pollution content')","c50d7373":"def max_bar_plot(var):\n    x1 = df[['City',var]].groupby([\"City\"]).median().sort_values(by = var,\n    ascending = True).tail(10).iplot(kind='bar', xTitle='Cities',yTitle=var, \n                                     linecolor='black', title='{2} {1} {0}'.format(\")\",var,' Most polluted cities('))\n\np1 = max_bar_plot('Industrial Pollution content')\np2 = max_bar_plot('Vehicular Pollution content')","0470a699":"def min_bar_plot(var):\n    x1 = df[['City',var]].groupby([\"City\"]).mean().sort_values(by = var,\n    ascending = True).head(10).iplot(kind='bar', yTitle='Cities',xTitle=var, linecolor='black',title='{2} {1} {0}'.format(\")\",var,' Minimum polluted cities('))\np1 = min_bar_plot('Industrial Pollution content')\np2 = min_bar_plot('Vehicular Pollution content')","069b30dd":"def al(var):\n    cities = [var]\n    filtered_city_day = df1[df1['Date'] <= '2020-04-01']\n    AQI = filtered_city_day[filtered_city_day.City.isin(cities)][['City','Air_quality']]\n    AQI[var] = AQI['Air_quality']\n    k = AQI[var].value_counts()\n    m = pd.DataFrame((round((k\/sum(k))*100)))\n    return m\nc11 = al('Ahmedabad')\nc22 = al('Delhi')\nc33 = al('Kolkata')\nc44 = al('Mumbai')\nc55 = al('Bengaluru')\ndf_row = pd.concat([c11,c22,c33,c44,c55],axis=1)\ndf_row.iplot(kind='bar', align='center',xTitle='Satisfaction level', yTitle='percentage of satisfaction' ,linecolor='black', title='Satisfaction level of people(Pre COVID19)')","9298d78d":"df = df1.copy()\ndf = df[df['Date'] > ('01-01-2020')] \ndf['Vehicular Pollution content'] = df['PM2.5']+df['PM10']+df['NO']+df['NO2']+df['NOx']+df['NH3']+df['CO']\ndf['Industrial Pollution content'] = df['SO2']+df['O3']+df['Benzene']+df['Toluene']+df['Xylene']\ndf = df.drop(['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2',\n       'O3','Benzene','Toluene','Xylene'],axis=1)\ndf.info()","f66c196b":"def ploting(var):\n    df[var].iplot(title=var,xTitle='Cities',yTitle=var, linecolor='black', )\n    plt.show()\nploting('Vehicular Pollution content')\nploting('Industrial Pollution content')","741635a3":"def max_bar_plot(var):\n    x1 = df[['City',var]].groupby([\"City\"]).median().sort_values(by = var,\n    ascending = True).tail(10).iplot(kind='bar', xTitle='Cities',yTitle=var, \n                                     linecolor='black', title='{2} {1} {0}'.format(\")\",var,' Most polluted cities('))\n\np1 = max_bar_plot('Industrial Pollution content')\np2 = max_bar_plot('Vehicular Pollution content')","ca708668":"def min_bar_plot(var):\n    x1 = df[['City',var]].groupby([\"City\"]).mean().sort_values(by = var,\n    ascending = True).head(10).iplot(kind='bar', yTitle='Cities',xTitle=var, linecolor='black',title='{2} {1} {0}'.format(\")\",var,' Minimum polluted cities('))\np1 = min_bar_plot('Industrial Pollution content')\np2 = min_bar_plot('Vehicular Pollution content')","38e685a2":"def al(var):\n    cities = [var]\n    filtered_city_day = df1[df1['Date'] > '2020-04-01']\n    AQI = filtered_city_day[filtered_city_day.City.isin(cities)][['City','Air_quality']]\n    AQI[var] = AQI['Air_quality']\n    k = AQI[var].value_counts()\n    m = pd.DataFrame((round((k\/sum(k))*100)))\n    return m\nc11 = al('Ahmedabad')\nc22 = al('Delhi')\nc33 = al('Kolkata')\nc44 = al('Mumbai')\nc55 = al('Bengaluru')\ndf_row = pd.concat([c11,c22,c33,c44,c55],axis=1)\ndf_row.iplot(kind='bar', align='center',xTitle='Satisfaction level', yTitle='percentage of satisfaction' ,linecolor='black', title='Satisfaction level of people(Post COVID19)')","0908ade9":"categorical_attributes = list(df1.select_dtypes(include=['object']).columns)\nprint(\"categorical_attributes\",categorical_attributes)\nle=LabelEncoder()\ndf1['City']=le.fit_transform(df1['City'].astype(str))\ndf1['Air_quality']=le.fit_transform(df1['Air_quality'].astype(str))\ndf1.info()","f914a155":"cor = df1.corr()\ncor.style.background_gradient(cmap='coolwarm')","1231888f":"y = df1[\"Air_quality\"]\nx = df1[['City', 'PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2',\n       'O3', 'Benzene', 'Toluene', 'Xylene', 'AQI']]\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)","926cf762":"print('Classes and number of values in trainset',Counter(y_train))","1c3230c1":"from imblearn.over_sampling import SMOTE\noversample = SMOTE()\nX_train,y_train = oversample.fit_resample(X_train,y_train)\nprint('Classes and number of values in trainset after SMOTE:',Counter(y_train))","cf72ea3e":"cls=SVC()\ncls.fit(X_train,y_train)\nsvmpred=cls.predict(X_test)\nsvmpred\ncm=confusion_matrix(y_test,svmpred)\nprint(\"confussion matrix\")\nprint(cm)\nprint(\"\\n\")\naccuracy=accuracy_score(y_test,svmpred)\nprint(\"accuracy\",accuracy*100)","ac5eca14":"rf = RandomForestClassifier(n_estimators=20, random_state=23)\nrf.fit(X_train, y_train)\nrf_predict=rf.predict(X_test)\nrf_predict1=rf.predict(X_train)\nrf_conf_matrix = confusion_matrix(y_test, rf_predict)\nrf_acc_score = accuracy_score(y_test, rf_predict)\nprint(\"confussion matrix\")\nprint(rf_conf_matrix)\nprint(\"\\n\")\nprint(\"accuracy\",rf_acc_score*100)","46cd071a":"gbc=XGBClassifier(learning_rate =0.01,n_estimators=100,max_depth=1,\n                  min_child_weight=6,subsample=0.8,seed=13)\ngbc.fit(X_train,y_train)\npred = gbc.predict(X_test)\nxgb_conf_matrix = confusion_matrix(y_test, pred)\naccuracy = accuracy_score(y_test, pred)*100\nprint(\"confussion matrix\")\nprint(xgb_conf_matrix)\nprint(\"\\n\")\nprint(\"accuracy\",accuracy)","ebf5e072":"## Preprocessing","1ae3628d":"## Pre Corona [2016 to 2020]\n\n**Here I divide the data set into two part namely Vehicular Pollution content (PM2.5, PM10, NO2, NH3, CO,) and Industrial Pollution content (CO, SO2, O3, Benzene, Toluene, Xylene) and find how these contents correlated with AQI (air quality index)**","74a52997":"## Post Corona [2020 >]","47ca774b":"## Conclusion\n\n>1. Vehicular pollution contents are more related to air quality index.\n>2. Delhi is the most polluted city in terms of vehicular pollution contents.\n>3. Ahmadabad is the most polluted city in terms of industrial pollution content.\n>4. After COVID19 pandemic there is gradual dicrease in vehicular pollution contents, industrial pollution content.\n>5. Extra Gradient Boost classifier 100% accurately classify the target variable.","fdedc21c":"# Air Quality Analysis\n\n---\n\n> <left><img src=\"https:\/\/i.insider.com\/5e9f6098f242ab242715a696?width=1200&format=jpeg\" width=900 ><\/left>\n\n\n> The novel corona virus disease pandemic poses a cruel choice to the world: the society and economy. It has revealed the vulnerabilities and strengths of every country and has taught us a series of lifelong lessons. India had bad track record in air quality. Here I will present how COVID-19 (before and after) effect on environment especially on air pollution in India and classifying the air quality condition using multiclass classification tools.\n\n---\n\n","2ff901ca":"## Importing Packages and Dataset","5a3af17c":"## Classification","afcfdf05":"**Feel free to ask any question related to this topic. I'm happy to answer. If you like my work kindly upvote.**\n\n**HAPPY LEARNING :-)**","3e6b0e21":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Importing Packages and Dataset\" data-toc-modified-id=\"Importing Packages and Dataset-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Importing Packages and Dataset<\/a><\/span><\/li><li><span><a href=\"#Data\" data-toc-modified-id=\"Data-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Exploratory Data Analysis<\/a><\/span><\/li><li><span><a href=\"#Exploratory Data Analysis\" data-toc-modified-id=\"Exploratory Data Analysis-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Data Visualisation<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Data Visualisation\" data-toc-modified-id=\"Data Visualisation-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Pre COVID19<\/a><\/span><\/li><li><span><a href=\"#Pre COVID19\" data-toc-modified-id=\"Pre COVID19-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;<\/span>Post COVID19<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Post COVID19\" data-toc-modified-id=\"Post COVID19-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Preprocessing<\/a><\/span><li><span><a href=\"#Preprocessing\" data-toc-modified-id=\"Preprocessing-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Classification<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Classification\" data-toc-modified-id=\"Classification-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;<\/span>Support Vector Machine <\/a><\/span><\/li><li><span><a href=\"#Support Vector Machine\" data-toc-modified-id=\"Support Vector Machine-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;<\/span>Random Forest Classifier<\/a><\/span><\/li><li><span><a href=\"#Random Forest Classifier\" data-toc-modified-id=\"Random Forest Classifier-5.3\"><span class=\"toc-item-num\">5.3&nbsp;&nbsp;<\/span>Extra Gradient Booost Classifier<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Conclusion\" data-toc-modified-id=\"Conclusion\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Conclusion<\/a><\/span><\/div>","ce3bf13f":"> **Data Imbalance:**\n\n>  Here we observe that target label is not splitted eqaully. This will cause data imbalance problem. In order to overcome this problem we use the technique called SMOTE(Synthetic Minority Oversampling Technique). This approach solve this problem by oversample the examples in the minority class.","b8cf9f7d":"## **Exploratory Data Analysis**\n\n**Missing value  analysis and Treatment**"}}