{"cell_type":{"3360e48b":"code","40c6f2a2":"code","00f7e9af":"code","58b099b8":"code","7fe0fd22":"code","0b276f3e":"code","99aa0e52":"code","5dcfe448":"code","0f036621":"code","9a0cc456":"code","ab63fe20":"code","f31c7538":"code","4d322da1":"code","b3648a88":"code","de67aa1e":"code","6a1967a7":"code","a884c482":"code","a209d830":"code","638377a4":"code","bafcce0b":"code","a65574a9":"code","e64ab94a":"code","a3f9b45b":"code","f20c05ab":"code","917ea943":"code","e61e287e":"code","f81af6c9":"code","a5429954":"code","18bf1873":"code","85ffa887":"code","7cbabb1d":"code","8a80184f":"code","5c6fbac1":"code","1585bed6":"code","2060ed9c":"code","97dc89f7":"code","8062383a":"code","8d28a3d3":"code","82a2787e":"code","6515d265":"code","76cce274":"code","0edd851d":"code","8d801525":"code","ed23f01f":"code","b2d93e00":"code","89c395f1":"markdown","e804ea34":"markdown","5cb8f1ee":"markdown","3a57121e":"markdown","7a8900bb":"markdown","4a5dac4e":"markdown","7aec88f7":"markdown","7fe0e7c8":"markdown","60a1ca06":"markdown","11a9cd16":"markdown","5d0ba816":"markdown","050c31cb":"markdown","6b34e134":"markdown","a5166646":"markdown","32ff5f57":"markdown","a282e679":"markdown"},"source":{"3360e48b":"cd ..\/input\/european-soccer-csv-files\/","40c6f2a2":"#essential imports\nimport pandas as pd\nfrom math import pi\nimport matplotlib.pyplot as plt\n# plt.rcParams['animation.ffmpeg_path'] = \"C:\\\\ffmpeg\\\\bin\\\\ffmpeg.exe\"\nfrom matplotlib.animation import FuncAnimation\nfrom IPython.display import HTML\n\n%matplotlib inline","00f7e9af":"league_df = pd.read_csv('cleaned_league.csv')\nmatch_stats_df = pd.read_csv('cleaned_stats.csv')\nteam_df = pd.read_csv('cleaned_team.csv')\nteam_attr_df = pd.read_csv('cleaned_team_attrs.csv')\nplayer_df = pd.read_csv('cleaned_player.csv')","58b099b8":"#the save and reload process seems to cancel some of the cleaning procedures that have to be repeated\nmatch_stats_df.date = pd.to_datetime(match_stats_df.date)\nteam_attr_df.date = pd.to_datetime(team_attr_df.date)\ndef eval_goal_inf(goal_info):\n    if pd.isna(goal_info) == False:\n        return eval(goal_info)\n    \nmatch_stats_df.goals_info = match_stats_df.goals_info.apply(lambda val: eval_goal_inf(val))","7fe0fd22":"league_df.name.values","0b276f3e":"EP_league = match_stats_df[match_stats_df.league_id == league_df[league_df.name == 'England Premier League'].id.values[0]]","99aa0e52":"EP_league.season.unique()","5dcfe448":"EP_league_s01 = EP_league[EP_league.season == '2008\/2009'].sort_values('date')","0f036621":"def calc_point(h_goals, a_goals, date, h_id, a_id, df):\n    '''\n    This function calculates teams' points according to the match scores. it assigns 3 points for win, 1 for draw and 0 for loss\n    Args:\n        h_goals -> goals of the home team\n        a_goals -> goals of the away team\n        date -> date of the match\n        h_id -> home team id\n        a_id -> away team id\n        df -> empty data frame to stack the points of each week in the season    \n    '''\n    if h_goals > a_goals:\n        df.loc[date, h_id] = 3\n        df.loc[date, a_id] = 0\n    elif a_goals > h_goals:\n        df.loc[date, a_id] = 3\n        df.loc[date, h_id] = 0\n    else:\n        df.loc[date, h_id] = 1\n        df.loc[date, a_id] = 1","9a0cc456":"#empty df to records the points of each round in the season\nEP_points_s01 = pd.DataFrame(index=EP_league_s01.date.unique())","ab63fe20":"#calculating the points\nEP_league_s01.apply(lambda row: calc_point(row.home_team_goal, row.away_team_goal, row.date, row.home_team_api_id, row.away_team_api_id, EP_points_s01), axis=1);","f31c7538":"#zeros for teams that didn't play in the early rounds or they lost\nEP_points_s01.fillna(value=0, inplace=True)","4d322da1":"#cumlate the points over the rounds\nEP_points_s01 = EP_points_s01.cumsum(axis = 0)","b3648a88":"#replace the team id with the team short name \nEP_points_s01.rename(columns=lambda val: team_df[team_df.team_api_id == val].team_short_name.values[0], inplace= True)","de67aa1e":"EP_points_s01.index.name = 'date';","6a1967a7":"def prepare_data(df, steps=5):\n    df = df.reset_index()\n    df.index = df.index * steps\n    last_idx = df.index[-1] + 1\n    df_expanded = df.reindex(range(last_idx))\n    df_expanded['date'] = df_expanded['date'].fillna(method='ffill')\n    df_expanded = df_expanded.set_index('date')\n    df_rank_expanded = df_expanded.rank(axis=1, method='first')\n    df_expanded = df_expanded.interpolate()\n    df_rank_expanded = df_rank_expanded.interpolate()\n    return df_expanded, df_rank_expanded\n\ndf_expanded, df_rank_expanded = prepare_data(EP_points_s01)\n\ncolors = plt.cm.Dark2(range(10))\nlabels = df_expanded.columns\n\ndef init():\n    ax.clear()\n    ax.set_ylim(.2, 6.8)\n\ndef update(i):\n    for bar in ax.containers:\n        bar.remove()\n    y = df_rank_expanded.iloc[i]\n    width = df_expanded.iloc[i]\n    ax.barh(y=y, width=width, color=colors, tick_label=labels)\n    date_str = df_expanded.index[i].strftime('%m\/%d\/%Y')\n    ax.set_title(f'premier league Season 2008\/2009 points race - {date_str}', fontsize='smaller')\n    \nfig = plt.Figure(figsize=(6, 4), dpi=144)\nax = fig.add_subplot()\nanim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_expanded), \n                     interval=100, repeat=False)","a884c482":"#takes a while to render\nhtml = anim.to_html5_video()\nHTML(html)","a209d830":"#saving the animated video\n# anim.save('EPL_2008_2009.mp4')","638377a4":"seasons = EP_league.season.unique()","bafcce0b":"EPL_teams_points = {}\nseas_n = len(seasons)\nfor i in range(len(seasons)):\n    EP_league_s = EP_league[EP_league.season == seasons[i]].sort_values('date')\n    #empty df to records the points of each round in the season\n    EP_points_s = pd.DataFrame(index=EP_league_s.date.unique())\n    #calculating the points\n    EP_league_s.apply(lambda row: calc_point(row.home_team_goal, row.away_team_goal, row.date, row.home_team_api_id, row.away_team_api_id, EP_points_s), axis=1);\n    #zeros for teams that didn't play in the early rounds or they lost\n    EP_points_s.fillna(value=0, inplace=True)\n    #cumlate the points over the rounds\n    EP_points_s = EP_points_s.cumsum(axis = 0)\n    #replace the team id with the team short name \n    EP_points_s.rename(columns=lambda val: team_df[team_df.team_api_id == val].team_short_name.values[0], inplace= True)\n    for rec in zip(EP_points_s.tail(1).columns, EP_points_s.tail(1).values[0]):\n        try:\n            EPL_teams_points[rec[0]][i] = rec[1]\n        except:\n            EPL_teams_points[rec[0]] = [0] * seas_n\n            EPL_teams_points[rec[0]][i] = rec[1]","a65574a9":"EPL_teams_points","e64ab94a":"#I will choose the teams that won the league at least one time to visulaize\nchamps = list()\nfor i in range(len(seasons)):\n    champs.append(list({k: v for k, v in sorted(EPL_teams_points.items(), key=lambda item: item[1][i])}.keys())[-1])    ","a3f9b45b":"champs","f20c05ab":"EPL_teams_points_filtered = {k:v for k, v in EPL_teams_points.items() if k in champs}","917ea943":"plt.figure(figsize=(10,6))\nfor key in EPL_teams_points_filtered.keys(): \n    plt.plot(seasons, EPL_teams_points_filtered[key], label = key)\n\nplt.legend(loc='lower left')\nplt.title('total points of EPL champs over the 8 seasons')\nplt.show()","e61e287e":"LA_league = match_stats_df[match_stats_df.league_id == league_df[league_df.name == 'Spain LIGA BBVA'].id.values[0]]","f81af6c9":"LA_teams_points = {}\nseas_n = len(seasons)\nfor i in range(len(seasons)):\n    LA_league_s = LA_league[LA_league.season == seasons[i]].sort_values('date')\n    #empty df to records the points of each round in the season\n    LA_points_s = pd.DataFrame(index=LA_league_s.date.unique())\n    #calculating the points\n    LA_league_s.apply(lambda row: calc_point(row.home_team_goal, row.away_team_goal, row.date, row.home_team_api_id, row.away_team_api_id, LA_points_s), axis=1);\n    #zeros for teams that didn't play in the early rounds or they lost\n    LA_points_s.fillna(value=0, inplace=True)\n    #cumlate the points over the rounds\n    LA_points_s = LA_points_s.cumsum(axis = 0)\n    #replace the team id with the team short name \n    LA_points_s.rename(columns=lambda val: team_df[team_df.team_api_id == val].team_short_name.values[0], inplace= True)\n    for rec in zip(LA_points_s.tail(1).columns, LA_points_s.tail(1).values[0]):\n        try:\n            LA_teams_points[rec[0]][i] = rec[1]\n        except:\n            LA_teams_points[rec[0]] = [0] * seas_n\n            LA_teams_points[rec[0]][i] = rec[1]","a5429954":"#I will choose the teams that participated in all the 8 seasons to visulaize\n# LA_teams_points_filtered = {k:v for k, v in LA_teams_points.items() if len(v) == 8}\n#I will choose the teams that won the league at least one time to visulaize\nchamps = list()\nfor i in range(len(seasons)):\n    champs.append(list({k: v for k, v in sorted(LA_teams_points.items(), key=lambda item: item[1][i])}.keys())[-1])    ","18bf1873":"champs","85ffa887":"LA_teams_points_filtered = {k:v for k, v in LA_teams_points.items() if k in champs}","7cbabb1d":"plt.figure(figsize=(10,6))\nfor key in LA_teams_points_filtered.keys(): \n    plt.plot(seasons, LA_teams_points_filtered[key], label = key)\n\nplt.legend(loc='lower left')\nplt.title('total points of the 7 La Liga teams over the 8 seasons')\nplt.show()","8a80184f":"#I order the points dictionary according to the last value (the points of the last season 15-16)\n#to be able to pull the team attributes for the same date 2015 as it is not available for the first season\nEPL_teams_points_filtered_ordered = {k: v for k, v in sorted(EPL_teams_points.items(), key=lambda item: item[1][-1])}","5c6fbac1":"f_place = list(EPL_teams_points_filtered_ordered.keys())[-1]\ns_place = list(EPL_teams_points_filtered_ordered.keys())[-2]","1585bed6":"f_id = team_df[team_df.team_short_name == f_place].team_api_id.values[0]\ns_id = team_df[team_df.team_short_name == s_place].team_api_id.values[0]","2060ed9c":"f_s_attr = team_attr_df[((team_attr_df.team_api_id == f_id) | (team_attr_df.team_api_id == s_id)) & (team_attr_df.date > '2015')]","97dc89f7":"f_s_attr = f_s_attr.set_index('team_api_id').rename({f_id: f_place, s_id: s_place})","8062383a":"f_s_attr = f_s_attr[['buildUpPlaySpeed',\n'buildUpPlayPassing',\n'chanceCreationPassing',\n'chanceCreationShooting',\n'defencePressure',\n'defenceAggression']]","8d28a3d3":"# number of variable\nN = len(f_s_attr.columns)\n\n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n \n# Initialise the spider plot\nax = plt.subplot(111, polar=True)\n \n# If you want the first axis to be on top:\nax.set_theta_offset(pi \/ 2)\nax.set_theta_direction(-1)\n \n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], f_s_attr.columns)\n \n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10,20,30,40,50,60,70], [\"10\",\"20\",\"30\",\"40\",\"50\",\"60\",\"70\"], color=\"grey\", size=7)\nplt.ylim(0,75)\n \nvalues=f_s_attr.loc[f_s_attr.index[0]].values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=f_s_attr.index[0])\nax.fill(angles, values, 'b', alpha=0.1)\n \nvalues=f_s_attr.loc[f_s_attr.index[1]].values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=f_s_attr.index[1])\nax.fill(angles, values, 'r', alpha=0.1)\n \n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\nplt.show()","82a2787e":"SA_league = match_stats_df[match_stats_df.league_id == league_df[league_df.name == 'Italy Serie A'].id.values[0]]","6515d265":"SA_league_s1 = SA_league[SA_league.season == '2011\/2012']","76cce274":"def count_penalties(goal_info, penal_dict):\n    '''\n    The function count the penalties for each player based on match stats\n    Args:\n        goal_info -> a tuble of goal info saves the home goal info and away goal info\n            each tuble is composed of 4 values: time of the goal, id of the scorer, id of the assisstant, goal type\n        penal_dict -> empty dict that would hold the ids of the penalties scorers and the number of penalties they had\n    '''\n    if goal_info != None:\n        for rec in goal_info:\n            for goal in rec:\n                if goal[3] == 'p':\n                    try:\n                        penal_dict[goal[1]] = penal_dict[goal[1]] + 1\n                    except:\n                        penal_dict[goal[1]] = 0\n                        penal_dict[goal[1]] = penal_dict[goal[1]] + 1","0edd851d":"SA_penalties = {}\nSA_league_s1.goals_info.apply(lambda val: count_penalties(val, SA_penalties));","8d801525":"top_penal_player_id = sorted(SA_penalties.items(), key=lambda item: item[1], reverse= True)[0][0]\ntop_penal_number = sorted(SA_penalties.items(), key=lambda item: item[1], reverse= True)[0][1]","ed23f01f":"top_penal_player_name = player_df[player_df.player_api_id == top_penal_player_id].player_name.values[0]","b2d93e00":"print(f'Top penalties scorer for Seria A in season 11\/12 was {top_penal_player_name} with total {top_penal_number} penalties')","89c395f1":"We can point out how Diego Simeone took Atletico Madrid (AMA) to a different level. This is what we can all name it an improvement over time. The first season here (2008\/2009) was the golden season, after which the performace decayed!\n>\n>**Note:** I'm not ignoring the data and start storytelling, but it is so exciting when data makes a certain part of the memory blink :\"D","e804ea34":"Thinking about the team attributes that can lead to winning a league, first thing came in my mind is the FIFA radar chart. helper functions are adopted from [here](https:\/\/python-graph-gallery.com\/391-radar-chart-with-several-individuals\/)\n>\n> I will plot it for the top two teams in the season and this can be scaled for different teams in different leagues","5cb8f1ee":"Visualizing the performance of the preimer league champs teams in terms of the total points over the 8 seasons, we can notice that some of them are on the roller coaster all the time (nature of the priemer league), but we can point out the Leicester City surprised us all in 2015-2016 season. we can aruge if the performance of man city was improving or not as it fluctuated quickly, but we can't deny that it was tough time for Man united. Really hoped that the dataset was updated to 2020 to see the spike of Liverpool and Mancity with Pep during the last couple of seasons ","3a57121e":"from the first look, we can point out the Leicester City introduced wonderful performance in all criteria. Also, the two teams were so close in two key features which are the buildup play speed and the defence pressure and this reflects how they were too close actually in the number of goals scored and received. LEI (68 scored, 36 received). ARS (65 scored, 36 received) [source](https:\/\/en.wikipedia.org\/wiki\/2015%E2%80%9316_Premier_League#League_table)","7a8900bb":"> **steps are:**\n>\n> slice the match_stats_df according to the league of interest and for each season\n>\n> compare the home_team_goal and the away_team_goal and calculate 1 point for draw and 3 for win\n>\n> form a new data frame with date of the match as rows and teams as colums, this data frame can be used to visualize the points race through the same season for each league\n>\n> The final record of this dataframe (the final round of the season) would be stacked in the team dataframe so each record of it will have the team id, team_fifa_id, name, short name, total points in each season","4a5dac4e":"The animation is performed for EPL season 2008\/2009 only due to time limitations, but I will stack the previos steps to form a data frame which each record is the total points for each team for the season, so I can compare how the teams improved","7aec88f7":"## Conclusion and comments\n\n> Although the dataset is quite extensive, it is a rich environment to explore various techniques. As a final comment on the proposed questions:\n>\n> Q1: The analysis introduced very good insights about the performance as long as it is measured in terms of total points at the end of the season and pointed out how LEI city improved his perfromance in that manner. But there are some limitations for this, as the performance can't be only measured based on the total number of points. there are multiple additional aspects such as the number of championships each team is participating in (LEI dedicating all his power for the league is different from another team divides his effort on league and champions), besides other perfromance criteria such as the longest win streak, the longest clean sheet etc.\n> Also... we can't judge the performance and ignoring that during the 8 seasons of interest, some teams rocked more than one time like MAN united.\n>\n> Q2: the comparison between the two teams was too close. My comment here (which can be considered as limitation) is that the team attributes data are pulled from FIFA API. it was not monitored though the season. So, maybe the stats are biased towards the champion with so many buffs (boosts). I am saying this because LEI was not that huge as the stats show, and his main strategy was to let the possession for the other team and depend on the counterattacks making use of the speeds of Mahrez and Vardy. For future analysis, I may work (or suggest working) on proving this using the cleaned possession values\n>\n> Q3: The top penalties scorer can be scaled to all the seasons and leagues. Also, for futre work, we can inspect the relation between the player stat and the goal types he has. Still will be biased stats as FIFA boosts the stats of the well-known football starts :\"D","7fe0e7c8":"### Q2: What team attributes lead to the most victories?","60a1ca06":"if wasn't rendered for any reason, it can be found along with the submission","11a9cd16":"# Project: European Soccer Database\n\nFiles used in this notebook are the cleaned version of the original dataset, please refer to the notebook named \"Data Cleaning\" for more details or for generating the cleaned version from this link:\nhttps:\/\/www.kaggle.com\/aa4raf\/data-cleaning","5d0ba816":"### Q1: What teams improved the most over time in EPL?\nThe same analysis can be applied to other leagues and other seasons","050c31cb":"Meanwhile, I can see this approach is more insightful in the la liga (spain). I will try it","6b34e134":"### Q3: Which players had the most penalties? \nI would go for the Calcio (Seria A) in Italy as it is well-known for the strong defense, let's say for season 2011-2012, ","a5166646":"I found that creating a bar chart race is very suitable for this case, so I searched for implementing it through this [reference](https:\/\/medium.com\/dunder-data\/create-a-bar-chart-race-animation-in-python-with-matplotlib-477ed1590096)\n.The adopted part is the prepare_data function that expands the dataframe to achieve smoothness in the animation ","32ff5f57":"I like what I see! This source [here](https:\/\/www.transfermarkt.com\/zlatan-ibrahimovic\/elfmetertore\/spieler\/3455\/saison_id\/2011\/wettbewerb_id\/IT1#tore) confirms the number and describes those 10 matches' report","a282e679":"**Note:** please pass the correct ffmpeg directory to view the animated bar chart race"}}