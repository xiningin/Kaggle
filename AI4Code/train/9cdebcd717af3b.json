{"cell_type":{"67a91e95":"code","9996cc1d":"code","c922a794":"code","c6a2368a":"code","07aaa470":"code","4c6c8092":"code","7678e33a":"code","12c7e5df":"code","46468294":"code","dac098d2":"code","bd743fba":"markdown","60489a25":"markdown","b2ef1710":"markdown","9a7c9cc2":"markdown","fb66d588":"markdown","49976c55":"markdown","8a55ee97":"markdown","a1fb6f84":"markdown","34c31cb4":"markdown","49431824":"markdown"},"source":{"67a91e95":"! pip install openpyxl\n","9996cc1d":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c922a794":"#read the data\ndf = pd.read_excel('\/kaggle\/input\/air-quality-time-series-data-uci\/AirQualityUCI.xlsx', parse_dates=[['Date', 'Time']])\n\n#check the dtypes\ndf.dtypes","c6a2368a":"df.head()","07aaa470":"df.index = df.Date_Time\ndf.drop(['Date_Time'],axis=1,inplace=True)\ndf.head()","4c6c8092":"cols = df.columns\nfor j in cols:\n    for i in range(0,len(df)):\n        if df[j][i] == -200:\n            df[j][i] = df[j][i-1]\n            \ndf.head()","7678e33a":"from statsmodels.tsa.vector_ar.vecm import coint_johansen\njohan_test_temp = df.drop([ 'CO(GT)'], axis=1)\ncoint_johansen(johan_test_temp,-1,1).eig","12c7e5df":"#creating the train and validation set\ntrain = df[:int(0.8*(len(df)))]\nvalid = df[int(0.8*(len(df))):]\n\n# model\nfrom statsmodels.tsa.vector_ar.var_model import VAR\n\nmodel = VAR(endog=train)\nmodel_fit = model.fit()\n\n# make prediction on validation\nprediction = model_fit.forecast(model_fit.y, steps=len(valid))\n\nprediction","46468294":"#converting predictions to dataframe\npred = pd.DataFrame(index=range(0,len(prediction)),columns=[cols])\nfor j in range(0,13):\n    for i in range(0, len(prediction)):\n        pred.iloc[i][j] = prediction[i][j]\n\n#check rmse\nfor i in cols:\n    print('rmse value for', i, 'is : ', sqrt(mean_squared_error(pred[i], valid[i])))","dac098d2":"model = VAR(endog=df)\nmodel_fit = model.fit()\nyhat = model_fit.forecast(model_fit.y, steps=1)\nprint(yhat)","bd743fba":"# Final Predictions","60489a25":"# Building Model","b2ef1710":"Acknowledgement: Blog post on Multivariate analysis by Aishwarya Singh [blog](https:\/\/www.analyticsvidhya.com\/blog\/2018\/09\/multivariate-time-series-guide-forecasting-modeling-python-codes\/)","9a7c9cc2":"# Checking Stationarity","fb66d588":"The predictions are in the form of an array, where each list represents the predictions of the row. We will transform this into a more presentable format.","49976c55":"Since, Missing values are tagged with -200 value. We will have to impute the missing value with a better number. Consider if the present dew point value is missing, we can safely assume that it will be close to the value of the previous hour.  I will impute -200 with the previous value.","8a55ee97":"# Multivariate Time Series Forecasting","a1fb6f84":"Thanks. Hope you like this notebook.","34c31cb4":"After the testing on validation set, lets fit the model on the complete dataset","49431824":"# Handling Missing values"}}