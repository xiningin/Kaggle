{"cell_type":{"14abc673":"code","c2505ccd":"code","32b49904":"code","eae45cd3":"code","7a4dad94":"code","7af927f0":"code","65babd04":"code","390a1caa":"code","2acaa16b":"code","15e398e6":"markdown","e7915f40":"markdown","68cadab7":"markdown","4c769cd6":"markdown","bb613767":"markdown","f8f214e1":"markdown","a0424544":"markdown"},"source":{"14abc673":"import numpy as np\nimport pandas as pd \nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import LSTM\nfrom keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c2505ccd":"prices_dataset_train =  pd.read_csv('..\/input\/stock-price\/SP500_train.csv')\nprices_dataset_test =  pd.read_csv('..\/input\/stock-price\/SP500_test.csv')\ntrainingset = prices_dataset_train.iloc[:,5:6].values\ntestset = prices_dataset_test.iloc[:,5:6].values","32b49904":"min_max_scaler = MinMaxScaler(feature_range=(0,1))\nscaled_trainingset = min_max_scaler.fit_transform(trainingset)\nX_train = []\ny_train = []","eae45cd3":"for i in range(40,1258):\n    X_train.append(scaled_trainingset[i-40:i,0]) \n    y_train.append(scaled_trainingset[i,0])\n\nX_train = np.array(X_train)\ny_train = np.array(y_train)\nX_train = np.reshape(X_train, (X_train.shape[0],X_train.shape[1],1))","7a4dad94":"model = Sequential()\nmodel.add(LSTM(units=100, return_sequences=True, input_shape=(X_train.shape[1],1)))\nmodel.add(Dropout(0.5))\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(units=1))","7af927f0":"model.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit(X_train, y_train, epochs=100, batch_size=32)","65babd04":"dataset_total = pd.concat((prices_dataset_train['adj_close'],prices_dataset_test['adj_close']), axis=0) \ninputs = dataset_total[len(dataset_total)-len(prices_dataset_test)-40:].values\ninputs = inputs.reshape(-1,1)\ninputs = min_max_scaler.transform(inputs)      \n\nX_test = []","390a1caa":"for i in range(40,len(prices_dataset_test)+40):\n    X_test.append(inputs[i-40:i,0])\n    \nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\n\npredictions = model.predict(X_test)\npredictions = min_max_scaler.inverse_transform(predictions)\npredictions","2acaa16b":"plt.plot(testset, color='blue', label='Actual S&P500 Prices')\nplt.plot(predictions, color='green', label='LSTM Predictions')\nplt.title('S&P500 Predictions with Reccurent Neural Network')\nplt.xlabel('Time')\nplt.ylabel('Price')\nplt.legend()\nplt.show()","15e398e6":"# Creating the training dataset\n\n#### we use the previous 40 prices in order to forecast the next one.","e7915f40":"# Building LSTM model","68cadab7":"# Normalize the data","4c769cd6":"# Plotting predictions","bb613767":"# Testing the algorithm","f8f214e1":"# Import the train and test data","a0424544":"# Training the model"}}