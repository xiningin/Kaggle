{"cell_type":{"642646ac":"code","2633c59e":"code","846e1eea":"code","72404915":"code","7ee936dd":"code","7212b8bf":"code","2e65ae43":"code","95776334":"code","2db09bfe":"code","52b9e4e9":"code","e7e3c029":"code","be24a7d8":"code","c4ffa049":"code","4e4f5789":"code","96273c4f":"code","375f63dc":"code","8072a43d":"code","583560de":"code","31804e18":"code","954ccb08":"code","a9354cd4":"code","e182a077":"code","12317060":"code","08e68d33":"code","b369d799":"code","7115127b":"code","ef2a4fa2":"code","45c6e6d1":"code","aa75aae4":"code","1a14915a":"code","32e09321":"code","241ba5e6":"code","4eb63540":"code","d6ccfd82":"code","11573796":"code","fc51e328":"code","71dc1cd6":"code","4c34c9e2":"code","98825f54":"code","ef1bfea6":"code","e419900b":"code","3836e0f6":"code","4d005e8a":"code","3bb0cee0":"code","57d1ec2e":"code","ca2510d2":"code","0cbbbfe7":"code","a1a068b3":"code","e31d1dcd":"code","af051bbe":"code","114b9b22":"code","5cc52459":"markdown","f56f7a14":"markdown","626a100b":"markdown","f277ae31":"markdown","3604211e":"markdown","b052f70d":"markdown","0bc46c93":"markdown","0f4f80c3":"markdown","ec109622":"markdown","bd8599eb":"markdown","be99de87":"markdown","83a78b72":"markdown","0359e024":"markdown","163a1ba0":"markdown","1e6d9285":"markdown","96fc28d5":"markdown","e08d5dc0":"markdown","500fb0da":"markdown","03377d3e":"markdown","5b32e15e":"markdown","d4eb49a0":"markdown"},"source":{"642646ac":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2633c59e":"data = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\nprint(data.shape)\ndata.head()","846e1eea":"data.info()","72404915":"categorical = [var for var in data.columns if data[var].dtype=='O']\nprint('There are {} categorical variables'.format(len(categorical)))\nprint('The categorical variables are :', categorical)","7ee936dd":"for var in categorical: \n    print(data[var].value_counts())\n    print()","7212b8bf":"data.describe()","2e65ae43":"data['car_year'] = 2021-data['year']\ndata.head()","95776334":"df = data.copy()","2db09bfe":"plt.figure(figsize=(8,8))\nsns.heatmap(df.corr(),square=True,annot=True)","52b9e4e9":"corr = data.corr()\nNum = corr['price'].sort_values(ascending=False).to_frame()\ns = Num.style.background_gradient(cmap='BuGn')\ns","e7e3c029":"sns.lmplot(x='engineSize',y='price',data=df)\nplt.title('Engine-size vs Price')\nplt.xlabel('Engine-size')\nplt.ylabel('Price')","be24a7d8":"sns.lmplot(x='mpg',y='price',data=df)\nplt.title('MPG vs Price')\nplt.xlabel('MPG')\nplt.ylabel('Price')","c4ffa049":"sns.displot(df['price'])","4e4f5789":"sns.jointplot(x=df['engineSize'],y=df['mpg'],hue=df['transmission'])","96273c4f":"plt.figure(figsize=(12,6))\nsns.barplot(x='car_year',y='price',data=df)","375f63dc":"plt.title('transmission')\nsns.countplot(x=df['transmission'],palette='Reds')","8072a43d":"plt.title('FuelType')\nsns.countplot(x=df['fuelType'],palette='Greens')","583560de":"fig = plt.figure(figsize=(25,6))\nsns.barplot(x=df.model,y=df.price)\nplt.title('Price Vs Model')\nplt.ylabel('Prices of Cars',fontweight='bold')\nplt.xlabel('Models',fontweight='bold')","31804e18":"numercial = [var for var in data.columns if data[var].dtype!='O']\nprint('There are {} categorical variables'.format(len(numercial)))\nprint('The categorical variables are :', numercial)","954ccb08":"plt.figure(figsize=(12,8))\nplt.title(\"Numerical Variables in Audi Dataset\")\ndata[numercial].boxplot(color='red')\nplt.show()","a9354cd4":"data[data['mileage'] >= 150000]","e182a077":"i = data[((data.mileage >= 150000))].index\ndata = data.drop(i)","12317060":"print(data['transmission'].unique())\nprint(data['fuelType'].unique())","08e68d33":"data = pd.get_dummies(data,columns=['transmission','fuelType'])\ndata.head()","b369d799":"from sklearn.preprocessing import OrdinalEncoder\n\nencoder = OrdinalEncoder()\ndata['model_code'] = encoder.fit_transform(data[['model']])\ndata[['model','model_code']].head(10)","7115127b":"data.info()","ef2a4fa2":"select = data.iloc[:,2:]\nselect.head()","45c6e6d1":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nstd_select = scaler.fit_transform(select)\nstd_select = pd.DataFrame(std_select,columns=select.columns)\nstd_select.head()","aa75aae4":"features = std_select.drop('price',axis=1)\ntarget = std_select[['price']]\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(features,target,test_size=0.2,random_state=0)","1a14915a":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","32e09321":"from sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor","241ba5e6":"from sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import cross_val_score\n\ndef fit_and_score(models, X_train, X_test, y_train, y_test):\n    \n    np.random.seed(0)\n    \n    model_mse = {}\n    model_mape = {}\n    model_r2 = {}\n    \n    for name, model in models.items():\n        model.fit(X_train,y_train)\n        y_preds = model.predict(X_test)\n        model_mse[name] = mean_squared_error(y_test,y_preds)\n        model_mape[name] = np.mean(np.abs((np.array(y_test) - np.array(y_preds)) \/ np.array(y_test))) *100\n        model_r2[name] = r2_score(y_test,y_preds)\n    \n    model_mse = pd.DataFrame(model_mse, index=['MSE']).transpose()\n    model_mse = model_mse.sort_values('MSE',ascending=False)\n    \n    model_mape = pd.DataFrame(model_mape, index=['MAPE']).transpose()\n    model_mape = model_mape.sort_values('MAPE',ascending=False)\n    \n    model_r2 = pd.DataFrame(model_r2, index=['R2']).transpose()\n    model_r2 = model_r2.sort_values('R2')\n        \n    return model_mse,model_mape,model_r2","4eb63540":"models = {'LinearRegression' : LinearRegression(),\n          'KNeighborsRegressor': KNeighborsRegressor(),\n          'DecisionTreeRegressor': DecisionTreeRegressor(),\n          'RandomForestRegressor':RandomForestRegressor(),\n          'GradientBoostingRegressor': GradientBoostingRegressor(),\n          'XGBRegressor': XGBRegressor(objective='reg:squarederror')}","d6ccfd82":"model_mse,model_mape,model_r2 = fit_and_score(models,X_train,X_test,y_train,y_test)","11573796":"model_mse","fc51e328":"model_mape","71dc1cd6":"model_r2","4c34c9e2":"from sklearn.model_selection import GridSearchCV\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","98825f54":"def gridsearch_cv_scores(models, params, X_train, X_test, y_train, y_test):\n    np.random.seed(42)\n    \n    model_gs_scores = {}\n    model_gs_best_param = {}\n    \n    for name, model in models.items():\n        gs_model = GridSearchCV(model,\n                                param_grid=params[name],\n                                cv=5,\n                                verbose=0)\n        \n        gs_model.fit(X_train,y_train)\n\n        model_gs_scores[name] = gs_model.score(X_test,y_test)\n        model_gs_best_param[name] = gs_model.best_params_\n\n    model_gs_scores = pd.DataFrame(model_gs_scores, index=['Accuracy'])\n    model_gs_scores = model_gs_scores.transpose().sort_values('Accuracy')\n        \n    return model_gs_scores, model_gs_best_param","ef1bfea6":"models = {'RandomForestRegressor':RandomForestRegressor()}\n\nparams = {'RandomForestRegressor': {'n_estimators' : [150,200,300],\n                    'criterion' : ['mse'],\n                    'oob_score' : [False]}}","e419900b":"model_gs_scores_1, model_gs_best_param_1 = gridsearch_cv_scores(models,params,X_train,X_test,y_train,y_test)","3836e0f6":"model_gs_scores_1","4d005e8a":"model_gs_best_param_1","3bb0cee0":"model = RandomForestRegressor(criterion='mse',n_estimators=300,oob_score=False)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)","57d1ec2e":"def rmse(actual, pred):\n    return np.sqrt(mean_squared_error(actual, pred))\n\ndef mape(actual, pred): \n    actual, pred = np.array(actual), np.array(pred)\n    return np.mean(np.abs((actual - pred) \/ actual)) * 100","ca2510d2":"r2 = r2_score(y_test,y_pred)\nrmse = mean_squared_error(y_test,y_pred)\nmape = mape(y_test,y_pred)","0cbbbfe7":"print(f'R2 Score: {r2}')\nprint(f'Root Mean Square Error: {rmse}')\nprint(f'Mean Absolute Percentage Error: {mape}')","a1a068b3":"sns.regplot(x=y_test,y=y_pred)\nplt.title('Predict vs Actual')\nplt.xlabel('Actual')\nplt.ylabel('Predict')","e31d1dcd":"feat_importance = model.feature_importances_\nfeat_importance = pd.DataFrame(feat_importance,columns=['Score'],index=features.columns)","af051bbe":"feat_importance.sort_values(by='Score',ascending=False).style.background_gradient(cmap='Reds')","114b9b22":"plt.figure(figsize=(10,6))\nplt.title('Feature Importances')\nsns.barplot(x=feat_importance.Score,y=feat_importance.index)","5cc52459":"#### Dummy Variable Encoding","f56f7a14":"**Conclusion:**\n\nI got maximum r2 score of 0.961 on **RandomForest regressor model**.","626a100b":"#### Visualization","f277ae31":"## 3. Data Preprocessing","3604211e":"**Build a new column**","b052f70d":"## 2. Data Visualization","0bc46c93":"## 4. Building Model","0f4f80c3":"#### Baseline Models and Scores","ec109622":"#### Spliting Training and Testing datasets","bd8599eb":"## 5.Model Evaluation","be99de87":"#### RandomForest Regressor","83a78b72":"## 1. Reading Dataset","0359e024":"#### Univariate Distribution and Bivariate Distribution","163a1ba0":"#### Selecting Necessary Columns for Modeling","1e6d9285":"#### Feature Importance","96fc28d5":"#### Correlation Between Numerical Features and target price","e08d5dc0":"#### Ordinal Encoding","500fb0da":"#### Hyperparameter Tuning via Grid Search CV","03377d3e":"Since we have done a gird search CV. it's time to build the model for evalution using the full dataset","5b32e15e":"#### Handling Outliers","d4eb49a0":"#### Visualization for Categorical Variables"}}