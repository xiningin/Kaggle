{"cell_type":{"e6b07357":"code","46cecdae":"code","dc5c0855":"code","db256cf5":"code","d6ad49ce":"code","8eeff2b2":"code","0f71520f":"code","a3f63458":"code","09d6c4c1":"code","b2ce1eba":"code","8bea2fdc":"code","4e639ccf":"code","e1c45c56":"code","2331d58d":"code","3533a54a":"code","826f0e06":"code","3212702f":"code","acc2232e":"code","1f9a09af":"code","300c5fde":"code","3046a02f":"code","e8c56e16":"code","31b73286":"code","2cfaa19d":"code","9b3b4133":"code","2ee1fd1f":"code","ee231cb3":"code","4ee09e2d":"code","1d41a7e9":"code","d3e0ad77":"markdown","50383022":"markdown","a2939277":"markdown","5e4706fd":"markdown","f23a1911":"markdown","7bbba037":"markdown","7366b69f":"markdown","a6702ede":"markdown","2e74b410":"markdown","3e8016f8":"markdown","76639f92":"markdown","3b6dc997":"markdown","2342586a":"markdown","77a4881a":"markdown"},"source":{"e6b07357":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46cecdae":"import pandas as pd\n\ntrain_df=pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv\")","dc5c0855":"train_df.head(10)","db256cf5":"train_df.info()","d6ad49ce":"X_train_full=train_df\nX_train_full.head(10)","8eeff2b2":"y_train_full=X_train_full.iloc[:,0]\nX_train_full=X_train_full.iloc[:,1:]\n","0f71520f":"y_train_full.head(10)","a3f63458":"y_train_full.value_counts().sort_index()","09d6c4c1":"X_train_full.shape","b2ce1eba":"X_valid,X_train=X_train_full.iloc[:5491,:]\/255,X_train_full.iloc[5491:,:]\/255\ny_valid,y_train=y_train_full.iloc[:5491],y_train_full.iloc[5491:]\n","8bea2fdc":"(y_valid.value_counts()\/len(y_valid)).sort_index()","4e639ccf":"(y_train.value_counts()\/len(y_train)).sort_index()","e1c45c56":"y_valid=y_valid.to_numpy()\ny_train=y_train.to_numpy()\n\nX_train=X_train.to_numpy()\nX_valid=X_valid.to_numpy()","2331d58d":"import matplotlib.pyplot as plt\n\nplt.imshow(X_train[0].reshape(28,28),interpolation=\"gaussian\")\nplt.axis(\"off\")\nplt.show()","3533a54a":"y_train[0] # The above figure is a 7 in sign language.","826f0e06":"def index_sign_labels(target):\n    labels_index=[None]*25   # to store index of individual labels\n    for i in range(len(target)):\n        labels_index[target[i]]=i\n    return labels_index","3212702f":"idx=index_sign_labels(y_train)\n\nn_rows=5\nn_columns=5\n\ni=0\nplt.figure(figsize=(15,12))\nfor rows in range(n_rows):\n    for columns in range(n_columns):\n        if i!=9:\n            index=n_columns*rows+columns\n            plt.subplot(n_rows,n_columns,index+1)\n            plt.imshow(X_train[idx[i]].reshape(28,28),interpolation=\"gaussian\")\n            plt.axis(\"off\")\n            plt.title(i)\n        i+=1","acc2232e":"import tensorflow as tf\nfrom tensorflow import keras","1f9a09af":"early_stopping_cb=keras.callbacks.EarlyStopping(patience=10,restore_best_weights=True)\n\nmodel=keras.models.Sequential([keras.layers.Dense(128,activation='relu',input_shape=[784]),\n                               keras.layers.Dense(100,activation='relu'),\n                               keras.layers.Dense(100,activation='relu'),\n                               keras.layers.Dense(100,activation='relu'),\n                               keras.layers.Dense(25,activation='softmax')])","300c5fde":"model.summary()","3046a02f":"model.compile(loss='sparse_categorical_crossentropy',optimizer='sgd',metrics=['accuracy'])","e8c56e16":"history=model.fit(X_train,y_train,epochs=150,validation_data=(X_valid,y_valid),callbacks=[early_stopping_cb])","31b73286":"pd.DataFrame(history.history).plot(figsize=(12,8))\nplt.grid(True)\nplt.ylim(0,1.2)\nplt.xlabel(\"Epochs\",fontsize=14)\nplt.ylabel(\"Loss \/ Accuracy\",fontsize=14)\nplt.show()","2cfaa19d":"X_test_full=test_df\n\nX_test=X_test_full.iloc[:,1:]\/255\ny_test=X_test_full.iloc[:,0]\n\nX_test=X_test.to_numpy()\ny_test=y_test.to_numpy()\n\nmodel.evaluate(X_test,y_test)","9b3b4133":"size=len(y_test)\nn_class=24\n\nX_new=X_test[-10:,:]\noutput_probs=model.predict(X_new)\ny_pred=[]\n\nfor i in range(10):\n    m=output_probs[i][0]\n    x=0\n    for j in range(1,n_class):\n        if output_probs[i][j]>m:\n            m=output_probs[i][j]\n            x=j\n    y_pred.append(x)\n\ny_pred","2ee1fd1f":"y_test[-10:]","ee231cb3":"y_pred=np.array(y_pred)","4ee09e2d":"acc=sum(y_pred==y_test)\/len(y_test)\nacc","1d41a7e9":"idx=index_sign_labels(y_test)\n\nn_rows=5\nn_columns=5\n\ni=0\nplt.figure(figsize=(15,12))\nfor rows in range(n_rows):\n    for columns in range(n_columns):\n        if i!=9:\n            index=n_columns*rows+columns\n            plt.subplot(n_rows,n_columns,index+1)\n            plt.imshow(X_train[idx[i]].reshape(28,28),interpolation=\"gaussian\")\n            plt.axis(\"off\")\n            plt.title(i)\n        i+=1","d3e0ad77":"**Early stopping with patience limit 10 epochs for capturing the best weights.","50383022":"****It is clearly evident that the training and testing instances do not match exactly for many target values.Hence is the failure of the model in test set inspite of having excellent validation accuracies inside the training set.****","a2939277":"Accuracy is not as high as expected.Let us see pick first 10 samples of test set and see the accuracy on them.","5e4706fd":"****If you like my notebook,please upvote and also comment for further improvements.","f23a1911":"**All data are converted into numpy arrays for ease of visualization of the sign language picture plots.","7bbba037":"A descent sampling to generate training and validation set.","7366b69f":"When splitting the training data and validation data,all distinct labels should be considered.","a6702ede":"Since both training and testing data misses the label \"9\",there will be no problem.","2e74b410":"Let us plot the test set figures.","3e8016f8":"**The output of the neural network contains softmax activation function.It produces probablities of all the class.","76639f92":"4 out of last 10 instances in the test set are incorrectly classified.","3b6dc997":"Inspite of having good validation accuracy,the model does not perform exceptionally in the test set.Let us see the figures in the test set,to check if they are different from training instances. ","2342586a":"Training data misses label \"9\" in the sign language.","77a4881a":"Let us plot to see all the different sign languages."}}