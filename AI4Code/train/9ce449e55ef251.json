{"cell_type":{"d94a5259":"code","59b2d16b":"code","a43b2b35":"code","3c50edae":"code","22cc7dfe":"code","8481b886":"code","3c4aa518":"code","d2a585cd":"code","7b2a6ae4":"code","9186f998":"code","08261f5a":"code","57d58a4a":"code","ac651de9":"code","a41bc326":"code","8e9c4332":"code","3de8bca8":"code","5c25f4bf":"code","6d84a2c5":"code","39b4aa75":"code","650becac":"code","cc5d7bcf":"code","c153513e":"code","7c585625":"code","ed4a0223":"code","2721251a":"code","27e01d53":"code","98129e25":"code","83f3d5fa":"code","c2a48d0b":"code","122f31c8":"code","09141aa6":"code","30b55b9a":"code","3544b414":"code","5e4088ef":"code","038a3576":"code","86d0e668":"code","34491f1c":"code","3e76661f":"code","2011c405":"code","b3749da1":"code","297bb67d":"code","dbce0f67":"code","37d91b42":"code","00c0c4ad":"code","18bf028f":"code","7403e2bf":"code","d6c84dca":"code","8825d883":"code","76644deb":"code","586c8e24":"code","0d0b4aa2":"code","3855505a":"code","3daccce6":"code","6017e7cc":"code","73de2162":"code","475789d3":"code","2ddb3326":"code","0d36b165":"code","f134d919":"code","51fa9514":"code","23e2c0cd":"code","ded3a468":"code","07ca9799":"code","5226e1fd":"code","f25066e2":"code","d3c24b47":"code","9e778699":"code","d8555066":"code","f0a3d826":"code","97721968":"code","7bb1152c":"code","0ca20641":"code","4cab173b":"code","ccb3ea0a":"code","1450d5a6":"code","fc08b90b":"code","d8e45504":"code","f5e98f6f":"code","53d73ad3":"code","18291417":"code","636737c1":"code","f9d4e81f":"code","ad9342fb":"code","0a9f5fc3":"code","6cb5ec98":"code","024c863f":"code","ddcad346":"code","06241d96":"code","3abc9192":"code","2c565ce4":"code","1e0aaba7":"code","d5d18237":"code","8074dd0a":"code","a6848e74":"code","ba2a9342":"code","2ab8b060":"code","a9310c11":"code","f1b1b206":"code","a2cc1ed5":"markdown","af350068":"markdown","eac88e2b":"markdown","f4fceb6f":"markdown","853d9f40":"markdown","92b39794":"markdown","7660835a":"markdown","b8b59903":"markdown","4b64e27f":"markdown","a88d2e20":"markdown","632acb28":"markdown","e047c620":"markdown","eb9c2ab2":"markdown","636e687e":"markdown","7bd2d6c9":"markdown","666dd35d":"markdown","795633a5":"markdown","b23153b5":"markdown","03d5d7de":"markdown","65e907c4":"markdown","de8b6e9d":"markdown","6aeb43ae":"markdown","d8d99ffa":"markdown","009ba53c":"markdown","a088f36d":"markdown","97f4bc88":"markdown","baf917b4":"markdown","bd2bd708":"markdown","b3e6dcd1":"markdown","cbabe62b":"markdown","bb09c4eb":"markdown","ccf7fbc6":"markdown","bdf04771":"markdown","e92a23ac":"markdown","716293d5":"markdown","67718093":"markdown","3eee96a4":"markdown","c950688b":"markdown","90dbd6d5":"markdown"},"source":{"d94a5259":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59b2d16b":"# Load the files\ndf_pgen1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf_psense1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')","a43b2b35":"df_pgen1.head()","3c50edae":"df_psense1.head()","22cc7dfe":"df_pgen1.info()","8481b886":"df_psense1.info()","3c4aa518":"\ndf_pgen1['DATE_TIME'] = pd.to_datetime(df_pgen1['DATE_TIME'],format = '%d-%m-%Y %H:%M')\ndf_psense1['DATE_TIME'] = pd.to_datetime(df_psense1['DATE_TIME'],format = '%Y-%m-%d %H:%M')\n\ndf_pgen1['DATE'] = df_pgen1['DATE_TIME'].dt.date\ndf_pgen1['TIME'] = df_pgen1['DATE_TIME'].dt.time\n\ndf_psense1['DATE'] = df_psense1['DATE_TIME'].dt.date\ndf_psense1['TIME'] = df_psense1['DATE_TIME'].dt.time\n\n\n","d2a585cd":"df_pgen1['DATE'] = pd.to_datetime(df_pgen1['DATE'],format = '%Y-%m-%d')\ndf_psense1['DATE'] = pd.to_datetime(df_psense1['DATE'],format = '%Y-%m-%d')","7b2a6ae4":"df_pgen1['HOUR'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen1['MINUTES'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.minute\n\ndf_psense1['HOUR'] = pd.to_datetime(df_psense1['TIME'],format='%H:%M:%S').dt.hour\ndf_psense1['MINUTES'] = pd.to_datetime(df_psense1['TIME'],format='%H:%M:%S').dt.minute","9186f998":"df_pgen1.head()","08261f5a":"df_psense1.head()","57d58a4a":"# importing basic libraries for data visualation\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ac651de9":"#for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1.DATE_TIME,\n        df_psense1.AMBIENT_TEMPERATURE.rolling(window=20).mean(),\n        label='Ambient'\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Ambient Temperature')\nplt.xlabel('Date and Time')\nplt.ylabel('Temperature')\nplt.show()\nprint (\"minimum=\"+ str(df_psense1.AMBIENT_TEMPERATURE.min()) )\nprint (\"maximum=\"+ str(df_psense1.AMBIENT_TEMPERATURE.max()) )\nprint (\"mean=\"+ str(df_psense1.AMBIENT_TEMPERATURE.mean()) )","a41bc326":"#for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1.DATE_TIME,\n        df_psense1.MODULE_TEMPERATURE.rolling(window=20).mean(),\n        label='Ambient'\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Module Temperature over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('Temperature')\nplt.show()\n\nprint (\"minimum=\"+ str(df_psense1.MODULE_TEMPERATURE.min()) )\nprint (\"maximum=\"+ str(df_psense1.MODULE_TEMPERATURE.max()) )\nprint (\"mean=\"+ str(df_psense1.MODULE_TEMPERATURE.mean()) )","8e9c4332":"#FOR plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1.DATE_TIME,\n        df_psense1.AMBIENT_TEMPERATURE.rolling(window=20).mean(),\n        label='Ambient'\n       )\n\nax.plot(df_psense1.DATE_TIME,\n        df_psense1.MODULE_TEMPERATURE.rolling(window=20).mean(),\n        label='Module'\n       )\n\nax.plot(df_psense1.DATE_TIME,\n        (df_psense1.MODULE_TEMPERATURE-df_psense1.AMBIENT_TEMPERATURE).rolling(window=20).mean(),\n        label='Difference'\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Ambient Temperature and Module Temperature over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('Temperature')\nplt.show()\n","3de8bca8":"# for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_pgen1.DATE_TIME,\n        df_pgen1.AC_POWER.rolling(window=500).mean(),\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('AC_POWER over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('POWER')\nplt.show()\n\nprint (\"minimum=\"+ str(df_pgen1.AC_POWER.min()) )\nprint (\"maximum=\"+ str(df_pgen1.AC_POWER.max()) )\nprint (\"mean=\"+ str(df_pgen1.AC_POWER.mean()) )","5c25f4bf":"#for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_pgen1.DATE_TIME,\n        (df_pgen1.DC_POWER\/10).rolling(window=500).mean(), #DC POWER divided by 10 because the given data \n        )                                                  # was off by one decimal place\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC_POWER over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('POWER')\nplt.show()\n\nprint (\"minimum=\"+ str((df_pgen1.DC_POWER\/10).min()) )\nprint (\"maximum=\"+ str((df_pgen1.DC_POWER\/10).max()) )\nprint (\"mean=\"+ str((df_pgen1.DC_POWER\/10).mean()) )","6d84a2c5":"#for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_pgen1.DATE_TIME,\n        df_pgen1.AC_POWER.rolling(window=500).mean(),\n        label='AC'\n       )\n\nax.plot(df_pgen1.DATE_TIME,\n       (df_pgen1.DC_POWER\/10).rolling(window=500).mean(),\n        label='DC'\n       )\n\nax.plot(df_pgen1.DATE_TIME,\n       ((df_pgen1.DC_POWER\/10)-df_pgen1.AC_POWER).rolling(window=500).mean(),\n        label='Difference'\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('AC POWER and DC POWER over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('kW')\nplt.show()\n","39b4aa75":"#for plant 1\n\ndf_data = df_psense1[df_psense1['DATE']=='2020-05-23T']\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_data.DATE_TIME,\n        df_data.MODULE_TEMPERATURE,\n        label=\"MODULE\"\n       )\nax.plot(df_data.DATE_TIME,\n        df_data.AMBIENT_TEMPERATURE,\n        label=\"AMBIENT\"\n       )\n\nax.plot(df_data.DATE_TIME,\n      ((df_data.MODULE_TEMPERATURE)-(df_data.AMBIENT_TEMPERATURE)),\n        label=\"Difference\"\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Variance of Module Temperature with Ambient temperature on 23 May')\nplt.xlabel('Date-Time')\nplt.ylabel(' Temperature')\nplt.show()","650becac":"#for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1.DATE_TIME,\n        df_psense1.IRRADIATION.rolling(window=40).mean(),\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('IRRADIATION over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('IRRADIATION')\nplt.show()\n\nprint (\"minimum=\"+ str((df_psense1.IRRADIATION).min()) )\nprint (\"maximum=\"+ str((df_psense1.IRRADIATION).max()) )\nprint (\"mean=\"+ str((df_psense1.IRRADIATION).mean()) )","cc5d7bcf":"# for plant 1\n\ndf_data = df_psense1[df_psense1['DATE']=='2020-05-23T']\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_data.DATE_TIME,\n        df_data.IRRADIATION.rolling(window=1).mean(),\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Variance of Irradiation on 23 May')\nplt.xlabel('Date-Time')\nplt.ylabel(' Temperature')\nplt.show()","c153513e":"# daily yield for 34 days\ndaily_yield=df_pgen1.groupby(\"DATE\").agg(TODAY_YIELD=(\"DAILY_YIELD\",max),\n                                           DATE=(\"DATE\",max)\n                                        )","7c585625":"daily_yield.head()","ed4a0223":"# for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(daily_yield.DATE,\n        daily_yield.TODAY_YIELD\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DAILY YIELD over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('POWER')\nplt.show()\nprint(\"maximum=\" +str( daily_yield['TODAY_YIELD'].max()))\nprint(\"minimum=\" +str( daily_yield['TODAY_YIELD'].min()))\nprint(\"mean=\" +str( daily_yield['TODAY_YIELD'].mean()))","2721251a":"Inverters_performance=df_pgen1.groupby(\"SOURCE_KEY\").agg(LIFETIME_YIELD=(\"TOTAL_YIELD\",max),\n                                           SOURCE_KEY=(\"SOURCE_KEY\",max)\n                                        )","27e01d53":"Inverters_performance.head()","98129e25":"# for plant 1\n\nsns.barplot(x=Inverters_performance[\"SOURCE_KEY\"], y=Inverters_performance[\"LIFETIME_YIELD\"])\n\nprint(\"maximum=\" +str(Inverters_performance['LIFETIME_YIELD'].max()))\nprint(\"minimum=\" +str(Inverters_performance['LIFETIME_YIELD'].min()))\nprint(\"mean=\" +str( Inverters_performance['LIFETIME_YIELD'].mean()))","83f3d5fa":"#for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\n\nax.plot(df_psense1.AMBIENT_TEMPERATURE,\n        df_psense1.MODULE_TEMPERATURE.rolling(window=5).mean(),\n         marker='o',\n            linestyle='',\n            alpha=.5,\n            ms=10,\n         )\n\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Module Temperature varying with Ambient Temperature')\nplt.xlabel('Ambient Temperature')\nplt.ylabel('Module Temperature')\nplt.show()","c2a48d0b":"#for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\n\ndf_data = df_psense1[df_psense1['DATE']=='2020-05-15']\n\nax.plot(df_data.AMBIENT_TEMPERATURE,\n        df_data.MODULE_TEMPERATURE,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Module Temperature varies with Ambient Temperature')\nplt.xlabel('Ambient Temperature')\nplt.ylabel('Module Temperature')\nplt.show()","122f31c8":"#for plant1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1['IRRADIATION'],\n        df_psense1['MODULE_TEMPERATURE'],\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='module temperature')\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Irradiation vs. Module Tempreture')\nplt.xlabel('Irradiation')\nplt.ylabel('Module Tempreture')\nplt.show()","09141aa6":"#for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\n\ndf_data = df_psense1[df_psense1['DATE']=='2020-05-23']\n\nax.plot(df_data.IRRADIATION,\n        df_data.MODULE_TEMPERATURE,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title(' Module Temperature varying with Ambient Temperature on 23rd May')\nplt.xlabel('IRRADIATION')\nplt.ylabel('Module Temperature')\nplt.show()","30b55b9a":"#for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1['IRRADIATION'],\n        df_psense1['AMBIENT_TEMPERATURE'],\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n       )\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Irradiation vs. Ambient Temperature')\nplt.xlabel('Irradiation')\nplt.ylabel('Ambient Temperature')\nplt.show()","3544b414":"#for plant 1\n\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_pgen1.DC_POWER\/10,\n        df_pgen1.AC_POWER,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n       \n       )\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Scatter Plot showing How AC Power varies with DC Power')\nplt.xlabel('DC Power')\nplt.ylabel('AC Power')\nplt.show()","5e4088ef":"comparision=df_pgen1.groupby(\"DATE\").agg(DAILY_YIELD=(\"DAILY_YIELD\",max),\n                                         DC_POWER=(\"DC_POWER\",sum),\n                                         AC_POWER=(\"AC_POWER\",sum),\n                                         DATE=(\"DATE\",max)\n                                         )\ncomparision","038a3576":"# for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\n\n\nax.plot(comparision.DC_POWER,\n        comparision.DAILY_YIELD,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power vs Daily Yield')\nplt.xlabel('DC power')\nplt.ylabel('daily yield')\nplt.show()","86d0e668":"# for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\n\n\nax.plot(comparision.AC_POWER,\n        comparision.DAILY_YIELD,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('AC Power vs Daily Yield')\nplt.xlabel('AC power')\nplt.ylabel('daily yield')\nplt.show()\nplt.show()","34491f1c":"# for plant 1\n\ndates = comparision['DATE'].unique()\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nfor date in dates:\n    df_data = comparision[comparision['DATE']==date]\n\n    ax.plot(df_data.AC_POWER,\n            df_data.DAILY_YIELD,\n            marker='o',\n            linestyle='',\n            alpha=.5,\n            ms=10,\n            label=pd.to_datetime(date,format='%Y-%m-%d').date()\n           )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('AC POWER and DAILY YIELD')\nplt.xlabel('AC POWER')\nplt.ylabel('Daily_Yield')\nplt.show()","3e76661f":"# for plant 1\n\ndates = comparision['DATE'].unique()\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nfor date in dates:\n    df_data = comparision[comparision['DATE']==date]\n\n    ax.plot(df_data.DC_POWER,\n            df_data.DAILY_YIELD,\n            marker='o',\n            linestyle='',\n            alpha=.5,\n            ms=10,\n            label=pd.to_datetime(date,format='%Y-%m-%d').date()\n           )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC POWER and DAILY YIELD')\nplt.xlabel('DC POWER')\nplt.ylabel('Daily_Yield')\nplt.show()","2011c405":"result_outer1 = pd.merge(df_pgen1,df_psense1,on='DATE_TIME',how='outer')","b3749da1":"# for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(result_outer1.IRRADIATION,\n        result_outer1.DC_POWER\/10,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power vs. Irradiation')\nplt.xlabel('Irradiation')\nplt.ylabel('DC Power')\nplt.show()","297bb67d":"# for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(result_outer1.IRRADIATION,\n        result_outer1.AC_POWER,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('AC Power vs. Irradiation')\nplt.xlabel('Irradiation')\nplt.ylabel('AC Power')\nplt.show()","dbce0f67":"# for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(result_outer1.MODULE_TEMPERATURE,\n        result_outer1.DC_POWER\/10,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='DC POWER')\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power vs. Module Temperature')\nplt.xlabel('Temperature')\nplt.ylabel('DC Power')\nplt.show()","37d91b42":"# for plant 1\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(result_outer1.MODULE_TEMPERATURE,\n        result_outer1.AC_POWER,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('AC Power vs. Module Temperature')\nplt.xlabel('Temperature')\nplt.ylabel('AC Power')\nplt.show()","00c0c4ad":"# for plant 1\n\ndates = result_outer1['DATE_x'].unique()\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\n\nfor date in dates:\n    data = result_outer1[(result_outer1['DATE_x']==date)]\n\n    ax.plot(data.MODULE_TEMPERATURE,\n            data.DC_POWER,\n            marker='o',\n            linestyle='',\n            alpha=.5,\n            ms=10,\n            label=pd.to_datetime(date,format='%Y-%m-%d').date()\n           )\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power vs. Module Temperature')\nplt.xlabel('Module Temperature')\nplt.ylabel('DC Power')\nplt.show()","18bf028f":"# for plant 1\n\ndates = result_outer1['DATE_x'].unique()\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\n\n\ndata = result_outer1[(result_outer1['DATE_x']=='2020-05-23')]\n\nax.plot(data.MODULE_TEMPERATURE,\n        data.DC_POWER,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n       )\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power vs. Module Temperature')\nplt.xlabel('Module Temperature')\nplt.ylabel('DC Power')\nplt.show()","7403e2bf":"#UNIVARIATE TIME SERIES FORECASTING USING FBPROPHET AND ARIMA","d6c84dca":"#Import Libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sb\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom scipy.stats import norm, skew #for some statistics\nfrom scipy import stats #qqplot\nimport statsmodels.api as sm #for decomposing the trends, seasonality etc.\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX ","8825d883":"df_dyield = df_pgen1.groupby('DATE')['DAILY_YIELD'].max().reset_index()\n#This gives us the daily yield for the plant.","76644deb":"df_dyield.head()","586c8e24":"#Index the date\ndf_dyield = df_dyield.set_index('DATE')\ndf_dyield.index #Lets check the index","0d0b4aa2":"#We are using the one day as the timestamp so that we can take all 34 days of data.\ny = df_dyield['DAILY_YIELD'].resample('D').mean()","3855505a":"y.head()","3daccce6":"y.plot(figsize=(12,5))\nplt.show()\n\n#Plotting daily yield with time to have a general idea of how daily yield varies over time.","6017e7cc":"#The best part about time series data and decomposition is that you can break down the data into the following:\n#Time Series Decomposition.\n\nfrom pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 16, 8\ndecomposition = sm.tsa.seasonal_decompose(y, model='additive')\nfig = decomposition.plot()\nplt.show()","73de2162":"#GRID SEARCH for Parameter Tuning.\n#Sample parameters for seasonal arima. (SARIMAX).\n\n\nimport itertools\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","475789d3":"#Get the best params for the data. Choose the lowest AIC.\n\n# The Akaike information criterion (AIC) is an estimator of the relative quality of statistical models for a \n# given set of data. \n# AIC measures how well a model fits the data while taking into account the overall complexity of the model.\n# Large AIC: Model fits very well using a lot of features.\n# Small AIC: Model fits similar fit but using lesser features. \n# Hence LOWER THE AIC, the better it is.\n\n#The code tests the given params using sarimax and outputs the AIC scores.\n\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(y,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n\n            results = mod.fit()\n\n            print('SARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue\n            \n            ","2ddb3326":"\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nmod = sm.tsa.statespace.SARIMAX(y,\n                                order=(1, 1, 1),\n                                seasonal_order=(1,0, 0, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","0d36b165":"#Plotting the diagnostics.\n\n#The plot_diagnostics object allows us to quickly generate model diagnostics and investigate for any unusual behavior.\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()\n\n#What to look for?\n#1. Residuals SHOULD be Normally Distributed ; Check\n#Top Right: The (orange colored) KDE line should be closely matched with green colored N(0,1) line. This is the standard notation\n#for normal distribution with mean 0 and sd 1.\n#Bottom Left: The qq plot shows the ordered distribution of residuals (blue dots) follows the linear trend of the samples \n#taken from a standard normal distribution with N(0, 1). \n\n#2. #Residuals are not correlated; Check\n#Top Left: The standard residuals don\u2019t display any obvious seasonality and appear to be white noise. \n#Bottom Right: The autocorrelation (i.e. correlogram) plot on the bottom right, which shows that the time series residuals have \n#low correlation with its own lagged versions.\n","f134d919":"#Lets get the predictions and confidence interval for those predictions.\n#Get the predictions. The forecasts start from the 29th of may 2020 but the previous line shows how it fits to the data.\npred = results.get_prediction(start=pd.to_datetime('2020-5-29'), dynamic=False) #false is when using the entire history.\n#Confidence interval.\npred_ci = pred.conf_int()\n\n#Plotting real and forecasted values.\nax = y['2020':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='blue', alpha=.1)\nax.set_xlabel('Date')\nax.set_ylabel('DAILY YIELD')\nplt.legend()\nplt.show()\n\n#Takeaway: The forecats seems to be fitting well to the data. The Blue\/purple thicker plot shows the confidence level in the forecasts. ","51fa9514":"#Getting the mean squared error (average error of forecasts).\ny_forecasted = pred.predicted_mean\ny_truth = y['2020-6-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('MSE {}'.format(round(mse, 2)))\n\n#Smaller the better.","23e2c0cd":"# root mean squared error\nprint('RMSE: {}'.format(round(np.sqrt(mse), 2)))","ded3a468":"#Mean absolute percentage error\n\nmape=(((y_forecasted - y_truth) \/ y_truth).mean())*100\nprint('MAPE: {}'.format(round(mape, 2)))","07ca9799":"#The time can be changed using steps.\npred_uc = results.get_forecast(steps=10)\npred_ci = pred_uc.conf_int()\nax = y.plot(label='observed', figsize=(14, 8))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('DAILY YIELD')\nplt.legend()\nplt.show()\n\n#Far out values are naturally more prone to variance. The grey area is the confidence we have in the predictions.","5226e1fd":"df_dcpower = df_pgen1.groupby('DATE')['DC_POWER'].sum().reset_index()\n#This gives us the total dc power generated on each day.","f25066e2":"#Index the date\ndf_dcpower = df_dcpower.set_index('DATE')\ndf_dcpower.index #Lets check the index","d3c24b47":"# we are using the each day as the timestamp.\ny = df_dcpower['DC_POWER'].resample('D').mean()","9e778699":"y.plot(figsize=(12,5))\nplt.show()\n\n# plotting DC_POWER vs DATE to have a general idea on how the data(dc_power) varies.","d8555066":"#The best part about time series data and decomposition is that you can break down the data into the following:\n#Time Series Decomposition. \nfrom pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 18, 8\ndecomposition = sm.tsa.seasonal_decompose(y, model='additive')\nfig = decomposition.plot()\nplt.show()","f0a3d826":"for param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(y,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n\n            results = mod.fit()\n\n            print('SARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue\n            ","97721968":"from statsmodels.tsa.statespace.sarimax import SARIMAX\nmod = sm.tsa.statespace.SARIMAX(y,\n                                order=(0 ,1 ,1),\n                                seasonal_order=(1,0 ,1, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])\n","7bb1152c":"#Plotting the diagnostics.\n\n#The plot_diagnostics object allows us to quickly generate model diagnostics and investigate for any unusual behavior.\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()\n\n#What to look for?\n#1. Residuals SHOULD be Normally Distributed ; Check\n#Top Right: The (orange colored) KDE line should be closely matched with green colored N(0,1) line. This is the standard notation\n#for normal distribution with mean 0 and sd 1.\n#Bottom Left: The qq plot shows the ordered distribution of residuals (blue dots) follows the linear trend of the samples \n#taken from a standard normal distribution with N(0, 1). \n\n#2. #Residuals are not correlated; Check\n#Top Left: The standard residuals don\u2019t display any obvious seasonality and appear to be white noise. \n#Bottom Right: The autocorrelation (i.e. correlogram) plot on the bottom right, which shows that the time series residuals have \n#low correlation with its own lagged versions.","0ca20641":"#Lets get the predictions and confidence interval for those predictions.\n#Get the predictions. \npred = results.get_prediction(start=pd.to_datetime('2020-5-29'), dynamic=False) #false is when using the entire history.\n#Confidence interval.\npred_ci = pred.conf_int()","4cab173b":"#Plotting real and forecasted values.\nax = y['2020':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.9, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='blue', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('DC_POWER')\nplt.legend()\nplt.show()\n\n#Takeaway: The forecats seems to be fitting well to the data. The Blue\/purple thicker plot shows the confidence level in the forecasts. \n","ccb3ea0a":"\n#Getting the mean squared error (average error of forecasts).\ny_forecasted = pred.predicted_mean\ny_truth = y['2020-6-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('MSE {}'.format(round(mse, 2)))\n\n#Smaller the better.\n\nprint('RMSE: {}'.format(round(np.sqrt(mse), 2)))\n\nmape=(((y_forecasted - y_truth) \/ y_truth).mean())*100\nprint('MAPE: {}'.format(round(mape, 2)))","1450d5a6":"#The time can be changed using steps.\npred_uc = results.get_forecast(steps=5)\npred_ci = pred_uc.conf_int()\nax = y.plot(label='observed', figsize=(14, 8))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('DC_POWER')\nplt.legend()\nplt.show()\n\n#Far out values are naturally more prone to variance. The grey area is the confidence we have in the predictions.","fc08b90b":"## PREDICTION USING FB PROPHET","d8e45504":"import fbprophet","f5e98f6f":"#predict AMBIENT TEMPERATURE","53d73ad3":"# renaming the columns \nsense1_renamed = df_psense1.rename(columns={'DATE_TIME':'ds', 'AMBIENT_TEMPERATURE':'y'})","18291417":"# Make the prophet model and fit on the data\ngm_prophet = fbprophet.Prophet(changepoint_prior_scale=0.25) \n\ngm_prophet.fit(sense1_renamed)","636737c1":"# Make a future dataframe for 4 days\ngm_forecast = gm_prophet.make_future_dataframe(periods=96, freq='H')\n\n# Make predictions\ngm_forecast = gm_prophet.predict(gm_forecast)","f9d4e81f":"gm_prophet.plot(gm_forecast, xlabel = 'Date', ylabel = 'AMBIENT TEMPERATURE ')\nplt.title('AMBIENT TEMPERATURE Prediction')","ad9342fb":"#predict daily yield(efficiency) for an inverter","0a9f5fc3":"df_pgen1['SOURCE_KEY'].unique()","6cb5ec98":"df_temp=df_pgen1[df_pgen1['SOURCE_KEY']=='1BY6WEcLGh8j5v7']\n# slicing the rows with first source key","024c863f":"df_temp\n","ddcad346":"single_yield = df_pgen1.groupby('DATE').agg(TOTAL_YIELD = ('DAILY_YIELD', max),\n                                         DATE = ('DATE',max)\n                                        )","06241d96":"single_yield.head()","3abc9192":"single_yield = single_yield.rename(columns={'DATE': 'ds', 'TOTAL_YIELD': 'y'})","2c565ce4":"single_yield.head()","1e0aaba7":"# Make the prophet model and fit on the data\ngm_prophet = fbprophet.Prophet(changepoint_prior_scale=0.25) \n\ngm_prophet.fit(single_yield)","d5d18237":"# Make a future dataframe for 4 days\ngm_forecast = gm_prophet.make_future_dataframe(periods=4, freq='D')\n\n# Make predictions\ngm_forecast = gm_prophet.predict(gm_forecast)","8074dd0a":"gm_prophet.plot(gm_forecast, xlabel = 'Date', ylabel = 'yield ')\nplt.title('daily yield prediction for the inverter with source key \"1BY6WEcLGh8j5v7 \"')","a6848e74":"#predict DC_POWER ","ba2a9342":"temp_renamed = df_temp.rename(columns={'DATE_TIME':'ds', 'DC_POWER':'y'})","2ab8b060":"# Make the prophet model and fit on the data\ngm_prophet = fbprophet.Prophet(changepoint_prior_scale=0.25)\n\ngm_prophet.fit(temp_renamed)","a9310c11":"# Make a future dataframe for 4 days\ngm_forecast = gm_prophet.make_future_dataframe(periods=96, freq='H')\n\n# Make predictions\ngm_forecast = gm_prophet.predict(gm_forecast)","f1b1b206":"gm_prophet.plot(gm_forecast, xlabel = 'Date', ylabel = 'DC POWER ')\nplt.title('DC_POWER Prediction')","a2cc1ed5":"This graph shows the relation between AC and DC power. There is not much fluctuations because the DC power is simply converted by the inverter to AC power for usage.","af350068":"The above graph shows how the AC POWER(power conerted by the Inverter) varies with time over 34 days time period. It varies from 0 to 1410 kW with a mean of 307 kW .Here too, the sharp peaks at the top are the maximum power that can be obtained in the daytime. At night time the power is 0 because there is no solar irradiation(input power for solar panel).","eac88e2b":"The above graph shows how the ambient temperature(temperature of the surrounding) varies with time over 34 days time period. It varies from 20.40 degrees to 35.25 degrees with a mean of 25.53 degrees. The sharp peaks at the top are the maximum temperatures that can be observed in the daytime. Some days have shorter peaks which means that the temperature of that day was generally low due to cloudiness\/rain. The sharp peaks at the bottom represent the lowest temperature in the night time. But we do not need to refer to them as solar plants offer power generation at daytime only.","f4fceb6f":"Here, we have predicted the data for next 96 hours(4 days).The dark blue lines are the predicted data. The light blue shadow gives the confidence interval. ","853d9f40":"There is a similar explanation for this graph of DC power vs Module Temperature. Those inverters whose DC power is zero for a given higher temperature may not be functioning. The streaking occurs because there is a single sensor for the whole plant.","92b39794":"This graph shows how DC_POWER varies with irradiation. There are certain points where even though there is some irradiation, the value of DC_POWER is zero. This means that at that point, an inverter was not working. But there are some values for which, even though there is exact same irradiation, the DC_POWER is varying. This is because there is a single irradiation sensor for the whole plant. Due to various reasons, same quality panels may not give same output(eg.one panel might be cleaner than the other). So there seems to be streaking.","7660835a":"The above graph shows how the module temperature(temperature of the panel) varies with time over 34 days time period. It varies from 18.14 degrees to 65.54 degrees with a mean of 31.09 degrees.Here too, the sharp peaks at the top are the maximum temperatures that can be observed in the daytime. The overall module temperature seems to have greater value because panels are built to absorb heat. Thus the sensor reads high temperature.","b8b59903":"This plot was drawn to see how the irradiation varies in one particular day. It is obvious that in daytime, the irradiation is generally high and in night time the irradiation is low. As irradiation depends on current weather, it is supposed to fluctuate. Thus, there are some small peaks during daytime which indicated that the weather was not constant on that particular date. ","4b64e27f":"1. The original graph with daily_yield against time.\n\n2. The trend component at time t, which reflects the long-term progression of the series. A trend exists when there is a persistent increasing or decreasing direction in the data. The trend component does not have to be linear.\n\n3. The seasonal component at time t, reflecting seasonality (seasonal variation). A seasonal pattern exists when a time series is influenced by seasonal factors. Seasonality occurs over a fixed and known period (e.g., the quarter of the year, the month, or day of the week)\n\n4. The irregular component (or \"noise\") at time t, which describes random, irregular influences. It represents the residuals or remainder of the time series after the other components have been removed.","a88d2e20":"Prophet requires the variable names in the time series to be:\n\n- y \u2013 Target\n- ds \u2013 Datetime","632acb28":"The above graph shows how daily yield of inverters varied over 34 day period. It varied from 5506 to 9163 with mean of 7480 over the time period. We can see from the graphs that some days have lower daily yield than other days. This can be due to changes in weather for that certain date.","e047c620":"As we can see the data type of DATE_TIME is object. We need to convert it into date time format.","eb9c2ab2":"**PREDICTING DAILY YIELD**","636e687e":"**PREDICTING DC POWER**","7bd2d6c9":"We did not change TIME column to time format beacause the values on that column will get randomised. \nThus, have also separated time into hours and minutes.","666dd35d":"This graph shows how module temperature varies with irradiation. When irradiation is zero(at night time), the temperature of panel is constant. But when irradiation starts to rise, the temperature of module starts to rise too but in a fairly consistent way then ambient temperature(from below graphs).","795633a5":"Time series forecasting is the use of a model to predict future values based on previously observed values.  \nTime series are widely used for non-stationary data, like economic, weather, stock price, and retail sales as well.","b23153b5":"Here, in this graph, we can see that ambient temperature varies higly even in similar irradiation values. This is because the ambient temperature is the temperature of the surrouding which is bound to change in a very short period of time.","03d5d7de":"The above graph shows how irradiation (amount of sun rays falling in the panel) varies with time over 34 days time period. It varies from 0 to 1.22 with a mean of 0.23  .Here too, the sharp peaks at the top are the maximum amount of irradiation in the daytime. At night time the power is 0 because there is no solar irradiation.Some days seem to have lesser irradiation which may be due to variety of reasons such as cloudy weather or rain.\n\nThere seems to be a similar pattern for the night of 20th and 28th May. The graph shows that for those two days, the irradiation did not drop to zero at night. We can guess that the sensor was malfunctioning for some time frame for those two days. At 28th May, the irradiation fell very low and then quickly follows the pattern which means that the irradiation sensor was not working properly only for short period of time than 20th of May which has larger break of pattern.","65e907c4":"1. The standardized residual is a measure of the strength of the difference between observed and expected values. It's a measure of how significant your cells are to the chi-square value.\n2. This line is called a Kernel-Density-Estimation (KDE). KDE tries to compute the underlying distribution of a variable, which will draw a very smooth line around the histogram. However, KDE will only work if we change the y axis from absolute values to density values.\n3. A Q-Q plot is a scatterplot created by plotting two sets of quantiles against one another. If both sets of quantiles came from the same distribution, we should see the points forming a line that's roughly straight.\n4. Correlation or dependence is any statistical relationship, whether causal or not, between two random variables.","de8b6e9d":"Interpreting the table:\n\ncoeff: Shows weight\/impotance how each feature impacts the time series.\nPvalue: Shows the significance of each feature weight. Can test hypothesis using this.\nIf p value is <.05 then they are statitically significant.\n\nRefresher on null hyp and pvalues.\nBy default we take the null hyp as 'there is no relationship bw them'\nIf p value < .05 (significance level) then you reject the Null Hypthesis\nIf p value > .05 , then you fail to reject the Null Hypothesis.\n","6aeb43ae":"What is the process to find the values of p, d, q?\n\n1. look at an autocorrelation graph of the data (will help if Moving Average (MA) model is appropriate)\n2. look at a partial autocorrelation graph of the data (will help if AutoRegressive (AR) model is appropriate)\n3. look at extended autocorrelation chart of the data (will help if a combination of AR and MA are needed)\n4. try Akaike's Information Criterion (AIC) on a set of models and investigate the models with the lowest AIC values\n5. try the Schwartz Bayesian Information Criterion (BIC) and investigate the models with the lowest BIC values\n\n\n\nWe have done the AIC method","d8d99ffa":"Interpreting the table:\n\ncoeff: Shows weight\/impotance how each feature impacts the time series.\nPvalue: Shows the significance of each feature weight. Can test hypothesis using this.\nIf p value is <.05 then they are statitically significant.\n\nRefresher on null hyp and pvalues.\nBy default we take the null hyp as 'there is no relationship bw them'\nIf p value < .05 (significance level) then you reject the Null Hypthesis\nIf p value > .05 , then you fail to reject the Null Hypothesis.\n\nSo, if the p-value is < .05 then there is a relationship between the response and predictor. Hence, significant.","009ba53c":"1. The standardized residual is a measure of the strength of the difference between observed and expected values. It's a measure of how significant your cells are to the chi-square value.\n2. This line is called a Kernel-Density-Estimation (KDE). KDE tries to compute the underlying distribution of a variable, which will draw a very smooth line around the histogram. However, KDE will only work if we change the y axis from absolute values to density values.\n3. A Q-Q plot is a scatterplot created by plotting two sets of quantiles against one another. If both sets of quantiles came from the same distribution, we should see the points forming a line that's roughly straight.\n4. Correlation or dependence is any statistical relationship, whether causal or not, between two random variables.","a088f36d":"This graph shows how DC power varies with module temperature for 23rd May. As there are no zero DC power values for higher Module temperature values, we can infer that for this day, there were no inverters malfunctioning.","97f4bc88":"This barchart shows how the inverters performed in the 34 days observation. Although the inverters are of same ratings, there seems to be some fluctuations in the performance with maximum of 7846821, minimum of 6426129 and \nmean of 7097397.","baf917b4":"Here, we have predicted the data for next 96 hours(4 days).The dark blue lines are the predicted data. The light blue shadow gives the confidence interval. ","bd2bd708":"We have fitted the daily yield of one specific inverter to the prophet model and predicted its yield for next four days. With only one irradiation\/temperature sensor for the whole plant, we cannot predict the output of each inverter individually. So we have taken the daily yield for the inverter.","b3e6dcd1":"What are p , d and q ?\n\n1. p= Auto-Regressive Parameters\n2. q= Moving Average Parameters\n3. d= Integrative part\n\n\n","cbabe62b":"This graph shows how module temperature varies with DC power colored according to dates.","bb09c4eb":"The lines of AC and DC power overlap and the lines are hard to identify. But we can see the difference in the powers. We can say that only negligible amount of power is wasted by the inverter.","ccf7fbc6":"This graph is plotted to observe how module and ambient temperature varies in a day. For lower temperatures, ambient temperature is slightly higher(difference is negative) whereas for higher temperatures, the module temperature is up by significant temperature. ","bdf04771":"This graph shows how ambient and module temperatures vary in a day frame. At low temperatures( early morning and nights), the temperatures seem to be similar. But when ambient temperature starts to rise gradually, the module temperature starts to rise with greater rate. Again when the ambient temperature falls gradually, the module temperature falls rapidly.","e92a23ac":"The above graph shows how the DC POWER(power input to the Inverter by solar panel) varies with time over 34 days time period. It varies from 0 to 1447 kW with a mean of 314 kW .Here too, the sharp peaks at the top are the maximum power that can be obtained in the daytime. At night time the power is 0 because there is no solar irradiation(input power for solar panel). \nWe can see that the mean value of DC_POWER is slighlty greater than AC_POWER. This is because some power is wasted in inverter to convert DC_POWER to AC_POWER. \n","716293d5":"In order to compare the difference, we combined them in a single plot. ","67718093":"This graph shows how daily yield varies with DC power on a daily basis. Whenever the overall DC POWER for a day is low, it is sure that the yield for that day would also be low.  ","3eee96a4":"From the graph above, we can see how exactly module temperaure varies according to irradiation for a particular date. We can see that for same irradiation values, there are different values of module temperature. There are similar irradiation values for different period of time. When the irradiation is increasing in the morning, the temperature of panels rise quickly, leading to higher module temperature. But when the irradiation starts to decrease in the evening, the temperature of module lowers quickly, resulting in lower module temperature.","c950688b":"This graph shows how module temperature varies with ambient temperature. They seem to have similar values during lower temperatures but start to vary highly when temperature rises. ","90dbd6d5":"1. The original graph with daily_yield against time.\n\n2. The trend component at time t, which reflects the long-term progression of the series. A trend exists when there is a persistent increasing or decreasing direction in the data. The trend component does not have to be linear.\n\n3. The seasonal component at time t, reflecting seasonality (seasonal variation). A seasonal pattern exists when a time series is influenced by seasonal factors. Seasonality occurs over a fixed and known period (e.g., the quarter of the year, the month, or day of the week)\n\n4. The irregular component (or \"noise\") at time t, which describes random, irregular influences. It represents the residuals or remainder of the time series after the other components have been removed."}}