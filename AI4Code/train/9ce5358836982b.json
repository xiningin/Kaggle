{"cell_type":{"68b12c68":"code","8b99b8b9":"code","427d0a0c":"code","253b5863":"code","3f9b7c5e":"code","d065f5a6":"code","31b0205e":"markdown","33f8b18b":"markdown","adc28cb4":"markdown","8b37cc4e":"markdown"},"source":{"68b12c68":"import pandas as pd\nimport ast","8b99b8b9":"expressionString1 = \"{'a': 1, 'b': 2, 'c': 3}\"\nprint(ast.literal_eval(expressionString1))\n\nexpressionString2 = \"[1, 2, 3, 4, 5]\"\nprint(ast.literal_eval(expressionString2))\n\nexpressionString3 = \"[(1,2),(3,4),(5,6)]\"\nprint(ast.literal_eval(expressionString3))\n\nexpressionString4 = \"[{'x': 559, 'y': 213, 'width': 50, 'height': 32}]\"\nprint( ast.literal_eval(expressionString4) )\n\nexpressionString5 = \"[{'x': 100, 'y': 100, 'width': 50, 'height': 50},{'x': 200, 'y': 200, 'width': 30, 'height': 30}]\"\nprint( ast.literal_eval(expressionString5) )\n","427d0a0c":"train = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/train.csv\")\ntrain = train.loc[train[\"annotations\"] != \"[]\"]\ntrain = train.reset_index(drop = True)\ntrain.head(30)","253b5863":"train.info()","3f9b7c5e":"a = train.iloc[0][\"annotations\"] \nb = ast.literal_eval(train.iloc[0][\"annotations\"])\nprint(a , type(a), len(a))\nprint(b, type(b),len(b))","d065f5a6":"a = train.iloc[19][\"annotations\"] \nb = ast.literal_eval(train.iloc[19][\"annotations\"]) \nprint(a , type(a), len(a))\nprint(b, type(b),len(b))","31b0205e":"# type check ","33f8b18b":"# get rows with annotations != []","adc28cb4":"# String => Expression","8b37cc4e":"- annotations type is object.\n- it needs to convert expression"}}