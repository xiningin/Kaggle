{"cell_type":{"6520fdd6":"code","618a6453":"code","c7b9bd9d":"code","86b3b910":"code","cd341438":"code","97baea42":"code","3c0d3af4":"code","8e899c58":"code","e9079078":"code","8c9b562e":"code","38a92286":"code","90e2876c":"code","592a3d86":"code","c6a48a61":"code","fa509a2f":"code","bec93738":"code","cda05b56":"code","6a0933be":"code","a666f122":"code","1b351be7":"code","df129879":"code","f7c9f78e":"code","bfe2fc98":"code","f93ca9b3":"code","8c5a81d9":"code","ecd8b461":"code","35fb729d":"code","f07c98da":"code","c5a48a7b":"code","0887db93":"code","28957d56":"code","234406d4":"code","e327849e":"code","b7ce94e8":"code","e84c867f":"code","27a4f54a":"code","cd0fb46f":"code","2046dbcf":"code","21ddf010":"code","3fdeebcb":"code","cee6fbb4":"code","b102af4b":"code","778a5055":"code","f7ffa256":"code","15e566ae":"code","2360b528":"code","a44677e6":"code","ebac516d":"code","60d4ffd9":"code","f849e054":"code","edaf78d8":"code","c0d92f13":"code","7333e63f":"code","4a88d217":"code","db9dd71a":"code","6ac45739":"code","ea6d32b1":"code","f8b38443":"code","55af0917":"code","297ba328":"code","d8054fa1":"code","9c9cb4d5":"code","9afee353":"code","5b5c065a":"code","4b551d40":"code","520e4e6d":"code","b2b40573":"code","bd815efd":"code","f8dcff3d":"code","afe771e4":"code","c35fab5b":"code","ba724198":"markdown","0b7e8a3e":"markdown","538adb19":"markdown","91a3c6ce":"markdown","4074c806":"markdown","e0c268d6":"markdown","a6cfbdbf":"markdown","76e693c9":"markdown","aa3e4eea":"markdown","c1d9a592":"markdown","4a9dcaf9":"markdown","93501ee8":"markdown","1c457ee3":"markdown","182883f5":"markdown","0c58a4fe":"markdown","63188049":"markdown","aeff4c69":"markdown","33a1f131":"markdown","6a55a0a6":"markdown","53850782":"markdown","09806d56":"markdown","d8d37ef2":"markdown","27daee65":"markdown","651f4f3e":"markdown","8d050b11":"markdown","313cc687":"markdown","0262bcbf":"markdown","8e171639":"markdown","51a078aa":"markdown","85c18984":"markdown","72245ee9":"markdown"},"source":{"6520fdd6":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nmatplotlib.rcParams['figure.figsize']=(10,5)","618a6453":"df = pd.read_csv(\"..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv\")\ndf.head()","c7b9bd9d":"df.shape","86b3b910":"df.isnull().sum()","cd341438":"df.isnull().sum()\/df.shape[0]*100","97baea42":"df['area_type'].unique()","3c0d3af4":"df_area_type_group =df.groupby('area_type')['area_type'].agg(Count='count')\nplt.figure(figsize=(10,5))\narea_type_plot = sns.barplot(x = df_area_type_group.index, y = df_area_type_group['Count'])\nfor i in area_type_plot.patches:\n    area_type_plot.annotate(int(i.get_height()), (i.get_x()+0.25, i.get_height()\/2), va = 'bottom', color='black')","8e899c58":"df.balcony.unique()","e9079078":"df_balcony_group = df.groupby('balcony')['balcony'].agg(Count='count')\nplt.figure(figsize=(10,5))\nbalcony_plot = sns.barplot(x = df_balcony_group.index, y = df_balcony_group['Count'])\nfor i in balcony_plot.patches:\n    balcony_plot.annotate(int(i.get_height()), (i.get_x()+0.25, i.get_height()\/2), va = 'bottom', color='black')","8c9b562e":"df = df.drop(['area_type','balcony','availability','society'],axis='columns')\ndf","38a92286":"# df.to_excel(\"pre_total_sqft.xlsx\")\ndf[50:60]","90e2876c":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","592a3d86":"df.isnull().sum()","c6a48a61":"df.isnull().sum()*100\/df.shape[0]","fa509a2f":"df_bath_group = df.groupby('bath')['bath'].agg(Count='count')\nplt.figure(figsize=(10,5))\nsns.barplot(x=df_bath_group.index, y = df_bath_group.Count)","bec93738":"df = df.dropna()\ndf.isnull().sum()","cda05b56":"df.shape\ndf[50:60]","6a0933be":"import re\ndf['size'] = df['size'].str.replace(r'\\D+', '').astype(int)","a666f122":"df['size'].unique()","1b351be7":"size_plot = sns.countplot(x = 'size',data = df)\nfor i in size_plot.patches:\n    size_plot.annotate(int(i.get_height()),(i.get_x(), i.get_height()+1),va = 'bottom', color='black')","df129879":"df.info()\ndf[50:60]","f7c9f78e":"# temp =df[df['total_sqft'].str.contains(r'[0-9]+[a-zA-Z]+') | df['total_sqft'].str.contains('\\d+ - \\d+')]\ntemp =df[df['total_sqft'].str.contains(r'[0-9]+[a-zA-Z]+') | df['total_sqft'].str.contains('[0-9]+ - [0-9]+')]\ntemp.head(10)","bfe2fc98":"import re\ndef convert_to_sqft(str):\n    tokens=str.split(' - ')\n    if len(tokens)==2:\n        return (float(tokens[0])+float(tokens[1]))\/2 \n    elif len(tokens)==1:\n        if 'Sq. Meter' in tokens[0]:\n            tokens[0] = re.sub(r'\\D+.\\D+', '',tokens[0])\n            return (float(tokens[0])*10.7639)\n        elif 'Perch' in tokens[0]:\n            tokens[0] = re.sub(r'\\D+.\\D+', '',tokens[0])\n            return (float(tokens[0])*272.25)\n        elif 'Sq. Yards' in tokens[0]:\n            tokens[0] = re.sub(r'\\D+.\\D+', '',tokens[0])\n            return (float(tokens[0])*9)\n        elif 'Acres' in tokens[0]:\n            tokens[0] = re.sub(r'\\D+.\\D+', '',tokens[0])\n            return (float(tokens[0])*43560)\n        elif 'Cents' in tokens[0]:\n            tokens[0] = re.sub(r'\\D+.\\D+', '',tokens[0])\n            return (float(tokens[0])*435.5)\n        elif 'Guntha' in tokens[0]:\n            tokens[0] = re.sub(r'\\D+.\\D+', '',tokens[0])\n            return (float(tokens[0])*1089)\n        elif 'Grounds' in tokens[0]:\n            tokens[0] = re.sub(r'\\D+.\\D+', '',tokens[0])\n            return (float(tokens[0])*2400)\n        else:\n            return float(tokens[0])\n    else:\n        return None","f93ca9b3":"df['total_sqft'] = df['total_sqft'].apply(convert_to_sqft)\ndf","8c5a81d9":"df.info()","ecd8b461":"df['Price_per_sqft'] = df['price']*100000\/df['total_sqft']\ndf","35fb729d":"df['Price_per_sqft'].describe()","f07c98da":"sns.kdeplot(df['Price_per_sqft'])","c5a48a7b":"df['location'].unique()","0887db93":"plt.figure(figsize=(10,5))\nlocation_statatistics = df.groupby('location')['location'].agg('value_counts').sort_values(ascending=False)\nsns.histplot(location_statatistics)","28957d56":"location_statatistics.unique()","234406d4":"location_statatistics_less_than_10 = location_statatistics[location_statatistics<=10]\nlocation_statatistics_less_than_10","e327849e":"df.location =df.location.apply(lambda x: 'other' if x in location_statatistics_less_than_10 else x)\nlen(df.location.unique())","b7ce94e8":"df.shape","e84c867f":"df.groupby('location')['location'].agg('value_counts').sort_values(ascending=False)","27a4f54a":"df = df[~((df['total_sqft']\/df['size'])<300)]\ndf","cd0fb46f":"df.Price_per_sqft.describe()","2046dbcf":"df = df[df['Price_per_sqft']>=250]","21ddf010":"df['Price_per_sqft'].describe()","3fdeebcb":"def remove_outliers_per_location(df):\n    df_out = pd.DataFrame()\n    for key, per_location_df in df.groupby('location'):\n        upper_limit = np.mean(per_location_df['Price_per_sqft']) + np.std(per_location_df['Price_per_sqft'])\n        lower_limit = np.mean(per_location_df['Price_per_sqft']) - np.std(per_location_df['Price_per_sqft'])\n        reduced_df = per_location_df[(per_location_df.Price_per_sqft>lower_limit) & (per_location_df.Price_per_sqft<=upper_limit)]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out\ndf = remove_outliers_per_location(df)\ndf.shape","cee6fbb4":"df['Price_per_sqft'].describe()","b102af4b":"def scatter_plot(df,location):\n    bhk2 = df[(df['location']==location) & (df['size'] == 2)]\n    bhk3 = df[(df['location']==location) & (df['size'] == 3)]\n    matplotlib.rcParams['figure.figsize']=(5,5)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)\n    plt.xlabel(\"Total Square Feet Area\")\n    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n    plt.title(location)\n    plt.legend()\nscatter_plot(df,'Raja Rajeshwari Nagar')","778a5055":"def remove_greater_price_outliers(df):\n    exclude_indices =np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_statastics = {}\n        for bhk, bhk_df in location_df.groupby('size'):\n            bhk_statastics[bhk] = {\n                'mean' : np.mean(bhk_df['Price_per_sqft']),\n                'std': np.std(bhk_df['Price_per_sqft']),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('size'):\n            prev_bhk_statastics = bhk_statastics.get(bhk-1)\n            if prev_bhk_statastics and prev_bhk_statastics['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[(bhk_df['Price_per_sqft'])<(prev_bhk_statastics['mean'])].index.values)\n                \n    return df.drop(exclude_indices,axis='index')\ndf = remove_greater_price_outliers(df)","f7ffa256":"df.shape","15e566ae":"scatter_plot(df,'Raja Rajeshwari Nagar')","2360b528":"matplotlib.rcParams['figure.figsize']=(5,5)\nsns.kdeplot(df['Price_per_sqft'])","a44677e6":"df.bath.unique()","ebac516d":"df[df['size']+1<df['bath']]","60d4ffd9":"df = df[df['size']+1>=df['bath']]\ndf = df.drop(['Price_per_sqft'], axis='columns')\ndf.head(5)","f849e054":"df.shape","edaf78d8":"sns.kdeplot(x='size',y='price', data=df)","c0d92f13":"sns.kdeplot(x='bath',y='price', data=df)","7333e63f":"sns.kdeplot(x='total_sqft',y='price', data=df)","4a88d217":"df_onehot = pd.get_dummies(df['location'])\ndf_onehot","db9dd71a":"df_merge = pd.concat([df,df_onehot.drop('other',axis='columns')],axis='columns') \ndf_merge","6ac45739":"df1 = df_merge.drop('location',axis='columns')\ndf1","ea6d32b1":"df_merge = df_merge.drop(['location'],axis='columns')\ndf_merge.shape","f8b38443":"df_merge","55af0917":"X = df_merge.drop(['price'], axis = 'columns')\nY = df_merge['price']\nprint(X.shape)\nprint(Y.shape)","297ba328":"X","d8054fa1":"Y","9c9cb4d5":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state = 10)\nX_train","9afee353":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,Y_train)\nlr_clf.score(X_test,Y_test)","5b5c065a":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(LinearRegression(), X, Y, cv=cv)","4b551d40":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\n\ndef find_bestmodel_using_gridsearchcv(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        },\n        'randomforest': {\n            'model': RandomForestRegressor(),\n            'params': {'n_estimators':[100]}\n        },\n        'SVR_rbf':{\n            'model' : SVR(),\n            'params' : {\n                'kernel':['rbf'], \n                'C':[100],\n                'gamma':[0.1], \n                'epsilon':[0.1]\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,Y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_bestmodel_using_gridsearchcv(X,Y)","520e4e6d":"lr_model = LinearRegression()\nlr_model.fit(X_train,Y_train)\nprint(\"Accuracy Score with training dataset : {}%\".format(lr_model.score(X_train,Y_train)*100))\nprint(\"Accuracy Score with tesing dataset : {}%\".format(lr_model.score(X_test,Y_test)*100))","b2b40573":"def predict_price(location,bhk,total_sqft,bath):    \n    loc_index = np.where(X.columns==location)[0][0]\n\n    x = np.zeros(len(X.columns))\n    x[0] = bhk\n    x[1] = total_sqft\n    x[2] = bath\n    if loc_index >= 0:\n        x[loc_index] = 1\n\n    return lr_model.predict([x])[0]","bd815efd":"predict_price('1st Phase JP Nagar', 2,1180, 2)","f8dcff3d":"predict_price('1st Phase JP Nagar', 3,2180, 3)","afe771e4":"predict_price('Indira Nagar', 3,1700, 3)","c35fab5b":"predict_price('Indira Nagar', 4, 1000, 4)","ba724198":"### Handling Outliers\n<b>As a data scientist when you have a conversation with your business manager (who has expertise in real estate), he will tell you that normally square ft per bedroom is 300 (i.e. 2 bhk apartment is minimum 600 sqft. If you have for example 400 sqft apartment with 2 bhk than that seems suspicious and can be removed as an outlier. We will remove such outliers by keeping our minimum thresold per bhk to be 300 sqft.<\/b>","0b7e8a3e":"## Onehot encoding of categorical feature: <i>Location<\/i>","538adb19":"<b>Again the business manager has a conversation with you (i.e. a data scientist) that if you have <i>x<\/i> bedroom home, then you will have total bath = total bed + 1 maximum bathrooms in home. Anything above that is an outlier or a data error and can be removed.<\/b>","91a3c6ce":"<b>If location count is less than 10, then that particular location should be replaced by 'other' string.<\/b>","4074c806":"### Dimensionality Reduction\n<b>Examine location feature and check dimensionality. If there are more number of rows, we have to apply dimensionality detection techniques(Reducing the number of rows)<\/b>","e0c268d6":"### Import desired libraries","a6cfbdbf":"<b>Split dataset into training and testing dataset<\/b>","76e693c9":"<b>Now, let us analyze location <i>''<\/i> after removing outliers. <\/b>","aa3e4eea":"# Build a model to predict a price","c1d9a592":"<b>If we analyze above table, we found <i>total_sqft<\/i> column contains values in various formats and should be converted in Sqft. Following are various patterns:\n- 1015 \\- 1540: We will take average of such values,\n- 36.64Sq. Meter: 1 Sq. Meter * 10.7639 = 10.7639Sqft\n- 2132Perch : 1 Perch * 272.25 = 272.25 Sqft\n- 1234Sq. Yards: 1Sq. Yards*9 = 1 sqft\n- Acres: 1 Acre * 43560 = 43560sqft\n- Cents: 1 Cent * 435.5 = 435.5sqft\n- Guntha: 1 Guntha * 1089 = 1089sqft\n- Grounds: 1 Grounds*2400 = 2400sqft\n\n    <i>convert_to_sqft()<\/i> function will calculate average of <i>total_sqfit<\/i> range values.<\/b>","4a9dcaf9":"### Feature Engineering\nAdd new feature <i>'Price_per_sqft' column<\/i>.","93501ee8":"## Outlier Removal Using Standard Deviation and Mean","1c457ee3":"<b>Here, we find that min price per sqft is 2.25 rs\/sqft, which is very less. If you have a conversation with your business manager (who has expertise in real estate), he will tell you that normally minimum per square ft price is at least 250 rs\/sqft. So, we will exclude data points which contain per sqft price less than 250 rs\/sqft.<\/b>","182883f5":"Read data from csv file","0c58a4fe":"1. <b>As <i>'bath'<\/i> column is of type missing completely at random(MCAR), it is better to drop null values present in this column.\n2. <i>'location'<\/i> and <i>'size'<\/i>columns contain very less missing values. So, even if we drop these null values from dataset, it will not affect much.<\/b>","63188049":"<b>Before and after removal outliers : Raja Rajeshwari Nagar<\/b>\n![RajajiNagar.png](attachment:RajajiNagar.png)","aeff4c69":"<b>Data Cleaning: Handling missing values<\/b>","33a1f131":"<b>Let's check prices of flats having same sqft area having less number of bedrooms, but have more price than the flats having more number of bedrooms in same location. If such samples are present in dataset, then these are outliers and should be removed from dataset.<\/b>\nFollowing is the analysis of location <b><i>Raja Rajeshwari Nagar<\/i><\/b>. We have plotted a scatter plot from which we can easily understand whether outliers are present or not.","6a55a0a6":"<B>Above statastics shows <i>'society'<\/i> column contains 41.30% missing values. So, it is better to drop <i>'society'<\/i> column.<\/B>","53850782":"<b>From above statistics, we find that min price per sqft is 219.68 rs\/sqft and max price per sqft is 176470rs\/sqft, this shows a wide variation in property prices. We should remove outliers per location using mean and one standard deviation.<\/b>","09806d56":"### Feature Engineerng: Data wrangling","d8d37ef2":"<b><i>'balcony'<\/i> column contains 4.57% missing values and these are missing completely at random. Hence, we can drop <i>'balcony'<\/i> column<i>'availabilty'<\/i> column is not required for the prediction of price of house, so it can be dropped.<\/b>","27daee65":"<b>Drop features that are not required to build our model<\/b>","651f4f3e":"## Find the best model using machine learning\n<b>We will analyze the performance of decision tree regressor, random forest regressor and Support vector machine regressor.\n    <\/b>","8d050b11":"### Outlier removal based on number of bedrooms feature","313cc687":"In size column, value is in string format like '3 BHK', so we have remove alphabets and just retreive integer values.","0262bcbf":"Apply <i>convert_to_sqft()<\/i> function should be applied in <i>'total_sqft'<\/i>.","8e171639":"<b>1. Check Linearity of all independent features.<\/b>","51a078aa":"If we analyze above scatter plot, we say that there are few samples having same total sqft area but less number of bedrooms and more price than the other one having more number bedrooms.\n\nTo remove outliers, we will build a dictionary containing statastics per bhk i.e.\n\n{\n\n    '1' : {\n        'mean': 6485.843278998773,\n        'std: 11248.767983981796,\n        'count': 649\n    },\n    '2' : {\n        'mean': 5175.857042073552,\n        'std: 2076.3946380067705,\n        'count': 5527\n    },    \n}","85c18984":"<b>From above analysis, we can say that linear regressor model gives better performance.<\/b>\n\n### Test the random forest regressor model for few samples","72245ee9":"<b>Above records are outliers<\/b>"}}