{"cell_type":{"88b609b4":"code","6bc90abf":"code","574eba88":"code","8253c221":"code","1e6ad678":"code","d9caf61b":"code","8db4d1f8":"code","eeba16ab":"code","d1c39448":"code","e52c0d1c":"code","c1d2254d":"code","aa4a4a15":"code","08073d61":"code","2f2ceb31":"code","a18eb787":"code","1faeff58":"code","3b872999":"code","0c8a0529":"code","c86c5f5d":"code","7fd892d0":"code","b0555676":"code","6a1ba0e4":"markdown","8c019da1":"markdown","ebd41829":"markdown","0f9cbde5":"markdown","ed01eedc":"markdown","90bc5e70":"markdown"},"source":{"88b609b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom collections import Counter\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6bc90abf":"data = pd.read_csv(\"\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","574eba88":"data.head()","8253c221":"data.info()","1e6ad678":"from sklearn.cluster import KMeans\n\nwcss = []\n\nfor k in range(1,50):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(scaled_df)\n    wcss.append(kmeans.inertia_)\n    \nplt.plot(range(1,50),wcss)\nplt.show()","d9caf61b":"data2=data.copy()","8db4d1f8":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaled_df = scaler.fit_transform(data)","eeba16ab":"kmeans2 = KMeans(n_clusters=10)\n\nclusters = kmeans2.fit_predict(scaled_df)\n\ndata2[\"label\"]= clusters\n\nplt.show()","d1c39448":"data2","e52c0d1c":"data3=data.copy()\nfrom sklearn.pipeline import make_pipeline\nscalar = StandardScaler()\nkmeans3 = KMeans(n_clusters = 10)\npipe = make_pipeline(scalar,kmeans3)\npipe.fit(data3)\nlabels = pipe.predict(data3)\ndata3[\"label\"]= labels","c1d2254d":"data3","aa4a4a15":"plt.scatter(data2.chlorides[data2.label==0],data2.pH[data2.label==0],color=\"red\")\nplt.scatter(data2.chlorides[data2.label==1],data2.pH[data2.label==1],color=\"yellow\")\nplt.scatter(data2.chlorides[data2.label==2],data2.pH[data2.label==2],color=\"green\")\nplt.scatter(data2.chlorides[data2.label==3],data2.pH[data2.label==3],color=\"blue\")\nplt.scatter(data2.chlorides[data2.label==4],data2.pH[data2.label==4],color=\"pink\")\nplt.scatter(data2.chlorides[data2.label==5],data2.pH[data2.label==5],color=\"orange\")\nplt.scatter(data2.chlorides[data2.label==6],data2.pH[data2.label==6],color=\"purple\")\nplt.scatter(data2.chlorides[data2.label==7],data2.pH[data2.label==7])\nplt.scatter(data2.chlorides[data2.label==8],data2.pH[data2.label==8])\nplt.scatter(data2.chlorides[data2.label==9],data2.pH[data2.label==9])\nplt.scatter(data2.chlorides[data2.label==10],data2.pH[data2.label==10])\n\n\n\n","08073d61":"plt.scatter(data3.chlorides[data3.label==0],data3.pH[data3.label==0],color=\"red\")\nplt.scatter(data3.chlorides[data3.label==1],data3.pH[data3.label==1],color=\"yellow\")\nplt.scatter(data3.chlorides[data3.label==2],data3.pH[data3.label==2],color=\"green\")\nplt.scatter(data3.chlorides[data3.label==3],data3.pH[data3.label==3],color=\"blue\")\nplt.scatter(data3.chlorides[data3.label==4],data3.pH[data3.label==4],color=\"pink\")\nplt.scatter(data3.chlorides[data3.label==5],data3.pH[data3.label==5],color=\"orange\")\nplt.scatter(data3.chlorides[data3.label==6],data3.pH[data3.label==6],color=\"purple\")\nplt.scatter(data3.chlorides[data3.label==7],data3.pH[data3.label==7])\nplt.scatter(data3.chlorides[data3.label==8],data3.pH[data3.label==8])\nplt.scatter(data3.chlorides[data3.label==9],data3.pH[data3.label==9])\nplt.scatter(data3.chlorides[data3.label==10],data3.pH[data3.label==10])","2f2ceb31":"data3[data3[\"label\"]==0].count()","a18eb787":"data2[data2[\"label\"]==0].count()","1faeff58":"print(\"data 2 = \",data2[data2[\"label\"]==0].index)\nprint(\"data 3 = \",data3[data3[\"label\"]==0].index)\n    ","3b872999":"print(\"data 2 = \",data2[data2[\"label\"]==1].index)\nprint(\"data 3 = \",data3[data3[\"label\"]==6].index)","0c8a0529":"from scipy.cluster.hierarchy import linkage,dendrogram\n\nmerg = linkage(data.iloc[200:220,:],method = 'single')\ndendrogram(merg, leaf_rotation = 90, leaf_font_size = 6)\nplt.show()","c86c5f5d":"data4=data.copy()\nfrom sklearn.cluster import AgglomerativeClustering\n\nhiyertical_cluster = AgglomerativeClustering(n_clusters =7,affinity=\"euclidean\",linkage=\"ward\")\n\ncluster = hiyertical_cluster.fit_predict(data)\n\ndata4[\"label\"]=cluster\n","7fd892d0":"data4","b0555676":"plt.scatter(data3.chlorides[data4.label==0],data3.pH[data4.label==0],color=\"red\")\nplt.scatter(data3.chlorides[data4.label==1],data3.pH[data4.label==1],color=\"yellow\")\nplt.scatter(data3.chlorides[data4.label==2],data3.pH[data4.label==2],color=\"green\")\nplt.scatter(data3.chlorides[data4.label==3],data3.pH[data4.label==3],color=\"blue\")\nplt.scatter(data3.chlorides[data4.label==4],data3.pH[data4.label==4],color=\"pink\")\nplt.scatter(data3.chlorides[data4.label==5],data3.pH[data4.label==5],color=\"orange\")\nplt.scatter(data3.chlorides[data4.label==6],data3.pH[data4.label==6],color=\"purple\")\nplt.scatter(data3.chlorides[data4.label==7],data3.pH[data4.label==7])","6a1ba0e4":"<a id=\"3\" >\n    \n## First Way","8c019da1":"<a id=\"1\" >\n    \n# Load and Check Data","ebd41829":"<a id=\"5\" >\n\n# Hierarchical Clustering","0f9cbde5":"<a id=\"4\" >\n    \n## Second Way","ed01eedc":"<a id=\"2\" >\n\n# K-means with 2 standardization ways","90bc5e70":"1. [Load and Check Data](#1)\n2. [K-means with 2 standardization ways](#2)\n    * [First Way](#3)\n    * [Second Way](#4)\n    \n3. [Hierarchical Clustering](#5)"}}