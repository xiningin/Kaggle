{"cell_type":{"b98369d6":"code","821245b7":"code","52d6d8c3":"code","46934bfe":"code","adf79d9c":"code","bdfb4cac":"code","3eaba052":"code","2637e2f8":"code","b8c54083":"code","069ca8bf":"code","46bebb8f":"code","294d29d8":"code","76dc2adf":"code","8709591b":"code","bc2b0f40":"code","2d4c003f":"code","115ca61a":"code","70950859":"code","4118ac02":"code","f5d0f3ab":"code","a7c44a18":"code","44a25856":"code","452858dc":"code","b2d6b0db":"code","a44601af":"code","d98064a2":"code","b07e0297":"code","dd703e5e":"code","26f543c9":"code","b98b78c4":"code","1d113d43":"code","c1f0823a":"code","748bffb5":"code","053220d5":"code","23a1fafb":"code","bdf8d833":"code","dc610eda":"code","62e28ad0":"code","87a9eaba":"code","c9fce513":"code","e1b1024a":"code","69d67bdd":"code","7e988bbd":"code","5cbd9fe1":"code","ffe96162":"code","c358188f":"markdown","c0b75c57":"markdown","caef75ab":"markdown","686541d8":"markdown","6bff8a8f":"markdown","b5f676c1":"markdown","5a86625d":"markdown","3119874c":"markdown","e38ecb77":"markdown","7978cc50":"markdown","db73ce0d":"markdown","0285ac75":"markdown","2f4532f2":"markdown"},"source":{"b98369d6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n%precision 2\nimport warnings\nwarnings.filterwarnings('ignore')","821245b7":"confirmed_color = 'navy'\nrecovered_color = 'green'\ndeath_color = 'indianred'\nactive_color = 'purple'","52d6d8c3":"confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/'\n                        'csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeath = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/'\n                    'csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/'\n                        'csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')","46934bfe":"del confirmed['Lat']\ndel confirmed['Long']\ndel confirmed['Province\/State']\ndel death['Lat']\ndel death['Long']\ndel death['Province\/State']\ndel recovered['Province\/State']\ndel recovered['Lat']\ndel recovered['Long']\nconfirmed_agg = confirmed.groupby('Country\/Region').sum()\nrecovered_agg = recovered.groupby('Country\/Region').sum()\ndeath_agg = death.groupby('Country\/Region').sum()\n\ntot_confirmed = pd.DataFrame(confirmed_agg[confirmed_agg.columns[-1]])\ntot_recovered = pd.DataFrame(recovered_agg[recovered_agg.columns[-1]])\ntot_death = pd.DataFrame(death_agg[death_agg.columns[-1]])\n\ntot_confirmed.rename(columns={tot_confirmed.columns[-1]:'Confirmed_tot'},inplace=True)\ntot_recovered.rename(columns={tot_recovered.columns[-1]:'Recovered_tot'},inplace=True)\ntot_death.rename(columns={tot_death.columns[-1]:'Death_tot'},inplace=True)","adf79d9c":"country_wise_tot = tot_confirmed.join(tot_recovered,how='inner')\ncountry_wise_tot = country_wise_tot.join(tot_death,how='inner')\ncountry_wise_tot['Active_tot'] = country_wise_tot.Confirmed_tot-\\\n                                 country_wise_tot['Death_tot']-\\\n                                 country_wise_tot.Recovered_tot","bdfb4cac":"!pip install pycountry_convert\n#Country name into continent\nimport pycountry_convert as pc\ndef country_to_continent(country_name):\n    country_alpha2 = pc.country_name_to_country_alpha2(country_name)\n    country_continent_code = pc.country_alpha2_to_continent_code(country_alpha2)\n    country_continent_name = pc.convert_continent_code_to_continent_name(country_continent_code)\n    return country_continent_name\n\nl = {'Burma':'Asia','Myanmar':'Asia', 'Congo (Brazzaville)':'Africa','Congo (Kinshasa)':'Africa',\n    \"Cote d'Ivoire\":'Africa','Diamond Princess':'Cruise Ship','Holy See':'Europe','Korea, South':'Asia',\n    'Kosovo':'Europe','MS Zaandam':'Cruise Ship','Taiwan*':'Asia','Timor-Leste':'Asia',\n    'US':'North America','West Bank and Gaza':'Asia','Western Sahara':'Africa','Taiwan':'Asia'}\nlis = []\ntemp = []\nfor country in country_wise_tot.index.unique():\n    try:\n        continent = country_to_continent(country)\n    except:\n        try:\n            continent = l[country]\n        except:\n            continent = float('NaN')\n    temp = [country,continent]\n    lis.append(temp)\ndf = pd.DataFrame(lis,columns=['Country\/Region','Continent'])\ndf = df.set_index('Country\/Region')\ncountry_wise_tot = country_wise_tot.join(df,how='inner')\ncountry_wise_tot['RecoveryRate%'] = round(country_wise_tot['Recovered_tot']\/country_wise_tot['Confirmed_tot']*100,2)\ncountry_wise_tot['MortalityRate%'] = round(country_wise_tot.Death_tot\/country_wise_tot.Confirmed_tot*100,2)\ncountry_wise_tot['Active per 100 confirm'] = round(country_wise_tot.Active_tot\/country_wise_tot.Confirmed_tot*100,2)\n#country_wise_tot.head()","3eaba052":"day_wise_confirmed = pd.DataFrame(confirmed_agg.sum(),columns={'Confirmed_dw'})\nday_wise_recovered = pd.DataFrame(recovered_agg.sum(),columns={'Recovered_dw'})\nday_wise_death = pd.DataFrame(death_agg.sum(),columns={'Death_dw'})\nday_wise = day_wise_confirmed.join(day_wise_recovered,how='inner')\nday_wise = day_wise.join(day_wise_death,how='inner')\nday_wise['Active_dw'] = day_wise.Confirmed_dw-day_wise.Recovered_dw-day_wise.Death_dw\nday_wise['7dyMnConfirmed'] = day_wise['Confirmed_dw'].rolling(7).mean().fillna(0).astype(int)\nday_wise['7dyMnRecovered'] = day_wise['Recovered_dw'].rolling(7).mean().fillna(0).astype(int)\nday_wise['7dyMnActive'] = day_wise['Active_dw'].rolling(7).mean().fillna(0).astype(int)\nday_wise['7dyMnDeath'] = day_wise['Death_dw'].rolling(7).mean().fillna(0).astype(int)","2637e2f8":"l = []\nfor i in confirmed_agg.columns:\n    for j in confirmed_agg.index:\n        l.append([i,j,confirmed_agg.loc[j,i],recovered_agg.loc[j,i],death_agg.loc[j,i]])\n        time_series = pd.DataFrame(l,columns=['Date','Country\/Region','Confirmed','Recovered','Death'])                        \ntime_series.tail()","b8c54083":"time_series['Active'] = time_series.Confirmed-time_series.Recovered-time_series.Death\ntime_series.set_index('Date',inplace=True)\n#time_series.tail()","069ca8bf":"time_series_dw = time_series.join(day_wise[['Confirmed_dw','Recovered_dw','Death_dw','Active_dw']],how='inner')\ntime_series_dw['Confirmed%'] = round(time_series_dw.Confirmed\/time_series_dw.Confirmed_dw*100,1)\ntime_series_dw['Recovered%'] = round(time_series_dw.Recovered\/time_series_dw.Recovered_dw*100,1)\ntime_series_dw['Death%'] = round(time_series_dw.Death\/time_series_dw.Death_dw*100,1)\ntime_series_dw['Active%'] = round(time_series_dw.Active\/time_series_dw.Active_dw*100,1)\n#time_series_dw.head()","46bebb8f":"# temp = pd.DataFrame(country_wise_tot[['Confirmed_tot','Recovered_tot','Death_tot','Active_tot']].sum()).T\n# temp = temp.melt(value_vars=['Confirmed_tot','Recovered_tot','Death_tot','Active_tot'])\n# fig = px.treemap(temp, path=[\"variable\"], values=\"value\", height=250, \n#                  color_discrete_sequence=[confirmed_color, recovered_color,active_color,death_color])\n# fig.data[0].textinfo = 'label+text+value'\n# fig.show()","294d29d8":"fig = go.Figure(go.Funnel(\n    x = [country_wise_tot['Confirmed_tot'].sum(),country_wise_tot['Recovered_tot'].sum(),\n         country_wise_tot['Death_tot'].sum()],\n    y = [\"Total Confirmed\", \"Total Recovered\",  \"Total Death\"],\n    textposition = \"inside\",\n    textinfo = \"value\",\n    opacity = 0.8, \n    marker = {\"color\": [confirmed_color,recovered_color,death_color],\n              \"line\": {\"width\": 2.5, \"color\": 'Black'}},\n    connector = {\"line\": {\"color\": \"navy\", \"dash\": \"dot\", \"width\": 2.5}}))\nfig.update_layout(\n    template=\"simple_white\",height=700,\n    title={'text': \"COVID19: Total cases across the globe\",'x':0.5,'y':0.9,       \n        'xanchor': 'center','yanchor': 'top'})\nfig.show()","76dc2adf":"fig = px.choropleth(country_wise_tot, locations=country_wise_tot.index, locationmode='country names', \n                  color='Confirmed_tot', hover_name=country_wise_tot.index, \n                  title='Confirmed', hover_data=['Confirmed_tot'], color_continuous_scale='Blues')\nfig.show()","8709591b":"fig = px.choropleth(country_wise_tot, locations=country_wise_tot.index, locationmode='country names', \n                  color='Recovered_tot', hover_name=country_wise_tot.index, \n                  title='Recovered', hover_data=['Recovered_tot'], color_continuous_scale='Greens')\nfig.show()","bc2b0f40":"fig = px.choropleth(country_wise_tot, locations=country_wise_tot.index, locationmode='country names', \n                  color='Active_tot', hover_name=country_wise_tot.index, \n                  title='Active', hover_data=['Active_tot'], color_continuous_scale='Purp')\n#fig.update_layout(coloraxis_showscale=False)\nfig.show()","2d4c003f":"fig = px.choropleth(country_wise_tot, locations=country_wise_tot.index, locationmode='country names', \n                  color='Death_tot', hover_name=country_wise_tot.index, \n                  title='Death', hover_data=['Death_tot'], color_continuous_scale='Reds')\nfig.show()","115ca61a":"fig = px.bar(day_wise, x=day_wise.index, y='Confirmed_dw',\n             color_discrete_sequence=[confirmed_color],template='simple_white')\nfig.add_scatter(x=day_wise.index,y=day_wise['7dyMnConfirmed'],name='7 day mean Confirmed',\n                marker={'color': 'red','opacity': 0.6,'colorscale': 'Viridis'},)\nfig.update_layout(title='Confirmed', xaxis_title=\"Date\", \n                  yaxis_title=\"No. of Confirmed Cases\")\nfig.show()","70950859":"fig = px.bar(day_wise, x=day_wise.index, y='Recovered_dw',\n             color_discrete_sequence=[recovered_color],template='simple_white')\nfig.add_scatter(x=day_wise.index,y=day_wise['7dyMnRecovered'],name='7 day mean Recovered',\n                marker={'color': 'red','opacity': 0.6,'colorscale': 'Viridis'},)\nfig.update_layout(title='Recovered', xaxis_title=\"Date\",\n                  yaxis_title=\"No. of Recovered Cases\")\nfig.show()","4118ac02":"fig = px.bar(day_wise, x=day_wise.index, y='Active_dw',\n             color_discrete_sequence=[active_color],template='simple_white')\nfig.add_scatter(x=day_wise.index,y=day_wise['7dyMnActive'],name='7 day mean Active',\n                marker={'color': 'red','opacity': 0.6,'colorscale': 'Viridis'},)\nfig.update_layout(title='Active', xaxis_title=\"Date\", yaxis_title=\"No. of Active Cases\")\nfig.show()","f5d0f3ab":"fig = px.bar(day_wise, x=day_wise.index, y='Death_dw',\n             color_discrete_sequence=[death_color],template='simple_white')\nfig.add_scatter(x=day_wise.index,y=day_wise['7dyMnDeath'],name='7 day mean Death',\n                marker={'color': 'black','opacity': 0.6,'colorscale': 'Viridis'},)\nfig.update_layout(title='Death', xaxis_title=\"Date\",\n                  yaxis_title=\"No. of Death Cases\")\nfig.show()","a7c44a18":"fig = px.line(template='simple_white')\nfig.add_scatter(x=day_wise.index,y=day_wise['Confirmed_dw'],name='Confirmed',\n               marker={'color': confirmed_color,'opacity': 0.6,'colorscale': 'Viridis'})\nfig.add_scatter(x= day_wise.index,y=day_wise['Recovered_dw'],name='Recovered',\n                marker={'color': recovered_color,'opacity': 0.6,'colorscale': 'Viridis'},)\nfig.add_scatter(x=day_wise.index,y=day_wise.Active_dw,name='Active',\n                marker={'color': active_color,'opacity': 0.6,'colorscale': 'Viridis'})\nfig.add_scatter(x=day_wise.index,y=day_wise.Death_dw,name='Death',\n                marker={'color': death_color,'opacity': 0.6,'colorscale': 'Viridis'})\nfig.update_layout(title='Day Wise Analysis', xaxis_title=\"Date\", \n                  yaxis_title=\"No. of Cases\")\nfig.show()\n","44a25856":"fig = px.bar(time_series_dw, x=pd.to_datetime(time_series_dw.index), y='Confirmed%', color='Country\/Region', \n             range_y=(0, 100), title='Confirmed', \n             color_discrete_sequence=px.colors.qualitative.Plotly)\nfig.show()","452858dc":"fig = px.bar(time_series_dw, x=pd.to_datetime(time_series_dw.index), y='Recovered%', color='Country\/Region', \n             range_y=(0, 100), title='Recovered', \n             color_discrete_sequence=px.colors.qualitative.Plotly)\nfig.show()","b2d6b0db":"fig = px.bar(time_series_dw, x=pd.to_datetime(time_series_dw.index), y='Active%', color='Country\/Region', \n             range_y=(0, 100), title='Active', \n             color_discrete_sequence=px.colors.qualitative.Plotly)\nfig.show()","a44601af":"country_wise_tot.sort_values('Confirmed_tot', ascending= False).head(21)#['Death_tot'].max() max death cases","d98064a2":"temp = time_series_dw.loc['7\/17\/20']  #percentage of cases in any country on any single day\ntemp[temp['Country\/Region']=='China']","b07e0297":"fig = px.bar(time_series_dw, x=pd.to_datetime(time_series_dw.index), y='Death%', color='Country\/Region', \n             range_y=(0, 100), title='Death', \n             color_discrete_sequence=px.colors.qualitative.Plotly)\nfig.show()","dd703e5e":"country_wise_tot.sort_values('Confirmed_tot', ascending= False).head(21).fillna(0).style\\\n                        .background_gradient(cmap='Blues',subset=[\"Confirmed_tot\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered_tot\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Death_tot\"])\\\n                        .background_gradient(cmap='RdPu',subset=[\"Active_tot\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"RecoveryRate%\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"MortalityRate%\"])\\\n                        .background_gradient(cmap= 'RdPu',subset=[\"Active per 100 confirm\"])\\\n","26f543c9":"temp = country_wise_tot.sort_values('Confirmed_tot').tail(21)\nfig = go.Figure(data=[\n    go.Bar(name='Death', y=temp.head(21).index, x=temp['Death_tot'].head(21),orientation='h',marker_color=death_color),\n    go.Bar(name='Recovered', y=temp.head(21).index, x=temp['Recovered_tot'].head(21),orientation='h',marker_color=recovered_color),\n    go.Bar(name='Confirmed', y=temp.head(21).index, x=temp['Confirmed_tot'].head(21),orientation='h',marker_color=confirmed_color)\n])\nfig.update_layout(barmode='stack',title='Top21 Confirmed\/Recovered\/Death Stacked', xaxis_title=\"Cases\", yaxis_title=\"Country\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide',template='simple_white')\nfig.show()","b98b78c4":"fig = px.bar(country_wise_tot.sort_values('Active_tot').tail(21), \n                 x='Active_tot', y=country_wise_tot.sort_values('Active_tot').tail(21).index, \n                 color='Continent',color_continuous_scale='Blues',\n                 text='Active_tot', orientation='h', \n                 color_discrete_sequence = px.colors.qualitative.T10, \n                 template='simple_white')\nfig.update_layout(title='Top21 Active', xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","1d113d43":"fig = go.Figure()\nfig.add_trace(go.Scatter(y=temp['MortalityRate%'], x=temp.index,\n                    mode='lines+markers',\n                    name='Death\/100 Confirm',marker_color=death_color))\nfig.add_trace(go.Scatter(y=temp['RecoveryRate%'], x=temp.index,\n                    mode='lines+markers',\n                    name='Recovered\/100 Confirm',marker_color=recovered_color))\nfig.add_trace(go.Scatter(y=temp['Active per 100 confirm'], x=temp.index,\n                    mode='lines+markers', name='Active\/100 Confirm',marker_color=active_color))\nfig.update_layout(height=700, title_text=\"Top21 Cases per 100 Confirmed\",template='simple_white')\nfig.show()","c1f0823a":"from plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected = True)\ntop21=country_wise_tot.sort_values('Confirmed_tot').tail(21).index\nfig = make_subplots(rows=7, cols=3, shared_xaxes=False)\nn = 0\nfor row in range(1,8):\n    for col in range(1,4):\n        fig.add_trace(go.Bar(x = pd.to_datetime(time_series_dw.index.unique()),\n        y = time_series_dw.loc[time_series_dw['Country\/Region']==top21[n], 'Confirmed'],name=top21[n]),\n              row, col)\n        n+=1\nfig.update_layout(height=2800, title_text=\"Confirmed cases of top21\",template='simple_white')\nfig.show()","748bffb5":"from plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected = True)\ntop21=country_wise_tot.sort_values('Confirmed_tot').tail(21).index\nfig = make_subplots(rows=7, cols=3, shared_xaxes=False)\nn = 0\nfor row in range(1,8):\n    for col in range(1,4):\n        fig.add_trace(go.Bar(x = pd.to_datetime(time_series_dw.index.unique()),\n        y = time_series_dw.loc[time_series_dw['Country\/Region']==top21[n], 'Recovered'],name=top21[n]),\n              row, col)\n        n+=1\nfig.update_layout(height=2800, title_text=\"Recovered cases of top21\",template='simple_white')\nfig.show()","053220d5":"from plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected = True)\ntop21=country_wise_tot.sort_values('Confirmed_tot').tail(21).index\nfig = make_subplots(rows=7, cols=3, shared_xaxes=False)\nn = 0\nfor row in range(1,8):\n    for col in range(1,4):\n        fig.add_trace(go.Bar(x = pd.to_datetime(time_series_dw.index.unique()),\n        y = time_series_dw.loc[time_series_dw['Country\/Region']==top21[n], 'Death'],name=top21[n]),\n              row, col)\n        n+=1\nfig.update_layout(height=2800, title_text=\"Death cases of top21\",template='simple_white')\nfig.show()","23a1fafb":"top21_confirmed_new = pd.DataFrame(confirmed_agg.loc[top21[0]].diff())\ntop21_recovered_new = pd.DataFrame(recovered_agg.loc[top21[0]].diff())\ntop21_death_new = pd.DataFrame(death_agg.loc[top21[0]].diff())\nfor i,country in enumerate(top21):\n    top21_confirmed_new[country] = confirmed_agg.loc[country].diff()\n    top21_recovered_new[country] = recovered_agg.loc[country].diff()\n    top21_death_new[country] = death_agg.loc[country].diff()\n#top21_death_new","bdf8d833":"fig = go.Figure()\nfor i in top21_confirmed_new:\n    fig.add_trace(go.Scatter(y=top21_confirmed_new[i], x=top21_confirmed_new.index,\n                    mode='lines+markers',\n                    name=i))\nfig.update_layout(height=700, title_text=\"Top21 New Number of Confirmed Cases corresponding to previous day\",template='simple_white')\nfig.show()","dc610eda":"fig = go.Figure()\nfor i in top21_recovered_new:\n    fig.add_trace(go.Scatter(y=top21_recovered_new[i], x=top21_recovered_new.index,\n                    mode='lines+markers',\n                    name=i))\nfig.update_layout(height=700, title_text=\"Top21 New Number of \"\n                  \"Recovered Cases corresponding to previous day\",template='simple_white')\nfig.show()","62e28ad0":"fig = go.Figure()\nfor i in top21_death_new:\n    fig.add_trace(go.Scatter(y=top21_death_new[i], x=top21_death_new.index,\n                    mode='lines+markers',\n                    name=i))\nfig.update_layout(height=700, title_text=\"Top21 New Number of Death Cases \"\n                  \"corresponding to previous day\",template='simple_white')\nfig.show()","87a9eaba":"fig = px.sunburst(country_wise_tot, path=['Continent',country_wise_tot.index],\n                    values='Confirmed_tot', color='Continent',\n                    hover_data=[\"Confirmed_tot\", \"Recovered_tot\",'Death_tot' ]\n                    )\nfig.update_layout(height=1000, title_text=\"Confirmed\")\nfig.show()","c9fce513":"fig = px.sunburst(country_wise_tot, path=['Continent',country_wise_tot.index],\n                    values='Recovered_tot', color='Continent',\n                    hover_data=[\"Confirmed_tot\", \"Recovered_tot\",'Death_tot' ]\n                    )\nfig.update_layout(height=1000, title_text=\"Recovered\")\nfig.show()","e1b1024a":"fig = px.sunburst(country_wise_tot, path=['Continent',country_wise_tot.index],\n                    values='Active_tot', color='Continent',\n                    hover_data=[\"Confirmed_tot\", \"Recovered_tot\",'Death_tot' ]\n                    )\nfig.update_layout(height=1000, title_text=\"Active\")\nfig.show()","69d67bdd":"fig = px.sunburst(country_wise_tot, path=['Continent',country_wise_tot.index],\n                    values='Death_tot', color='Continent',\n                    hover_data=[\"Confirmed_tot\", \"Recovered_tot\",'Death_tot' ]\n                    )\nfig.update_layout(height=1000, title_text=\"Death\")\nfig.show()","7e988bbd":"!pwd","5cbd9fe1":"from IPython.display import FileLink\nFileLink(r'time_series.csv')","ffe96162":"#Access any distribution of any country\nfig = make_subplots(rows=7, cols=3, shared_xaxes=False)\nrow, col = 1,1\nfig.add_trace(go.Bar(x = pd.to_datetime(time_series_dw.index.unique()),\n        y = time_series_dw.loc[time_series_dw['Country\/Region']=='India', 'Death']),\n              row, col)\nfig.update_layout(height=2800,template='simple_white')\n\nfig.show()","c358188f":"### Loading Required Libraries","c0b75c57":"## Global Cases Distribution","caef75ab":"### Data Preparation","686541d8":"## Please upvote and Comment\ud83d\ude0b","6bff8a8f":"## Commulative Day-Wise Global Cases","b5f676c1":"### Top21 Countries - Conditional Formatting","5a86625d":"# Top21 Countries Affected","3119874c":"## Top21 Cases Distribution - Day wise","e38ecb77":"## Continent Wise Cases Distribution","7978cc50":"### Top21 - New Cases Daily Confirmed","db73ce0d":"## Total cases till now","0285ac75":"### Dateset Reference\n**COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University**\n* https:\/\/github.com\/CSSEGISandData\/COVID-19","2f4532f2":"## Percentage wise daily distribution"}}