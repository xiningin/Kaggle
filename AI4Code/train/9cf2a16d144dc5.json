{"cell_type":{"0e769f0c":"code","12a52724":"code","adbfd931":"code","af822a9a":"code","f3eeed4f":"code","d4e75fae":"code","4b157414":"code","18d4d8a8":"code","6543e081":"code","034412f7":"code","f29c4b54":"code","c1a49fd0":"code","c30f45d1":"code","f9b202ea":"code","61b43268":"code","635c69c7":"code","cff31371":"code","aa6a0755":"code","e6863b2c":"code","59fdd693":"code","67e37ce9":"code","6e00bba6":"code","d9651924":"code","c3d9831c":"code","7cf15ec2":"code","3c7d64a2":"code","bcc852ac":"code","f011dcc7":"code","faa6560c":"code","db9ee87f":"code","0a9f171f":"code","e6fcf6d9":"code","1cf4a208":"code","8639c2af":"markdown","6dd14684":"markdown","141b05dc":"markdown","fac982d4":"markdown","a72c4e65":"markdown","e8cdf229":"markdown","234bb698":"markdown","748e28b8":"markdown","6cf8f936":"markdown","0c4fb5d0":"markdown","1be6e639":"markdown","640573ad":"markdown","22a23fdf":"markdown","65cfc80b":"markdown","7eb67fd6":"markdown","58e2b615":"markdown","63a2a52b":"markdown","ac81feea":"markdown","84eb9c96":"markdown","28089f7e":"markdown","a74176c4":"markdown","04036fb1":"markdown","bccf1e95":"markdown","c0f31cf6":"markdown","4961b068":"markdown","1f330103":"markdown","a4d7dfab":"markdown","d6653d9f":"markdown","1077a3df":"markdown"},"source":{"0e769f0c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nfrom folium.plugins import HeatMap","12a52724":"## loading the data\ndata = pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")","adbfd931":"## lets examine at first 3 rows\ndata.head(3)","af822a9a":"## how many rows are present or what size of data we are dealing with\nlen(data)","f3eeed4f":"## how many columns in our data and their types \ndata.dtypes","d4e75fae":"##\n#data.isnull().sum()\n## can be use in different datasets too !!\n## we will use 'total' to save the sorted value in descending order\ntotal = data.isnull().sum().sort_values(ascending=False)\n## now we need to calculate percentage ie. (null_value of column * 100) \/ (total_null values)\npercent = ((data.isnull().sum())*100)\/data.isnull().count().sort_values(ascending=False)\n## now we add these two variables using concat function\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total','Percent'], sort=False).sort_values('Total', ascending=False)\n## print the missing values\nmissing_data.head()","4b157414":"## lets look at last_review column\ndata.last_review.head()","18d4d8a8":"data.drop(['name','host_name','last_review'],axis=1,inplace=True)\n### axis=1 -> remove column\n### inplace=True -> immediate update to our data frame","6543e081":"# Rechecking the data\ndata.head()","034412f7":"## lets add 0 to our reviews_per_month instead of NAN values\ndata.reviews_per_month.fillna(0,inplace=True)\ndata.reviews_per_month.isnull().sum()","f29c4b54":"# Thankyou to Michal Bogacz for commenting : \n# There is no sense to count correlation with ID. \n# This is only ordinary number, not variable.\ncolumns = ['id','host_id']\nnew_data = data.drop(axis=1,labels=columns)\nnew_data.corr().style.background_gradient(cmap=\"coolwarm\")","c1a49fd0":"data.describe().T","c30f45d1":"## lets look at host listings on airbnb\n\n## we will take the top 10 host and look at their listings on airbnb\n\n## lets take value_counts() function and add head(10) so we get the top 10 host in data\nhosts = data.host_id.value_counts().head(10)\nhosts","f9b202ea":"plt.figure(figsize=(10,8))\nh = hosts.plot(kind = 'bar')\nh.set_title(\"Top hosts on AIRBNB in NYC\")\nh.set_xlabel(\"Host ID\")\nh.set_ylabel(\"Listings\")","61b43268":"## we will plot 2 different subplots\n## 1. Pie plot visualization 2. bar graph visualization\n\nf,ax = plt.subplots(1,2,figsize=(15,5))\n## explode -> adds space between each pie wedge\n## autopct -> adds percentage value of each pie wedge\ndata.neighbourhood_group.value_counts().plot.pie(explode=[0.1,0.1,0.1,0.1,0.1],autopct='%1.1f%%',ax=ax[0])\n## easy countplot or bar graph of neighbourhood_group\nsns.countplot(data['neighbourhood_group'])\n\n## plots the graph\nplt.show()","635c69c7":"## creates the figure of size 10 widht and 10 height\nplt.figure(figsize=(10,10))\n## simple scatterplot of different neighbourhood_groups in nyc\n## later we will plot these stuff on actual nyc map\nsns.scatterplot(x='longitude', y='latitude', hue='neighbourhood_group',s=20, data=data, palette=\"muted\")\n\n## we can see different borough in nyc","cff31371":"## setting style for our plots\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\n## ignore -- f, axes = plt.subplots(3, 2, figsize=(10, 10), sharex=True) -- ignore ##\n\n## figure size with 10 width and 5 height\nplt.figure(figsize=(10, 5))\n## create dataframe \"df1\" with all the neighbourhood of Brooklyn and their price\ndf1 = data[data.neighbourhood_group == \"Brooklyn\"][[\"neighbourhood\",\"price\"]]\n## lets take mean of all the prices of neighbouhood\nd = df1.groupby(\"neighbourhood\").mean()\n## distplot -> distribution plot\n## axlabel == xlabel\n## kde_kws -> kernel density estimate keyword arguments -> color=\"black\"\n## hist_kws -> histogram keyword arguments -> histogram type = step\nsns.distplot(d,color='r',axlabel =\"Price Distribution in Brooklyn\",kde_kws={\"color\": \"k\"},\n             hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.plot()","aa6a0755":"plt.figure(figsize=(10, 5))\ndf1 = data[data.neighbourhood_group == \"Manhattan\"][[\"neighbourhood\",\"price\"]]\nd = df1.groupby(\"neighbourhood\").mean()\nsns.distplot(d,color='r',axlabel =\"Price Distribution in Manhattan\",kde_kws={\"color\": \"k\"},\n             hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.plot()","e6863b2c":"plt.figure(figsize=(10, 5))\ndf1 = data[data.neighbourhood_group == \"Queens\"][[\"neighbourhood\",\"price\"]]\nd = df1.groupby(\"neighbourhood\").mean()\nsns.distplot(d,color='r',axlabel =\"Price Distribution in Queens\",kde_kws={\"color\": \"k\"},\n             hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.plot()","59fdd693":"plt.figure(figsize=(10, 5))\ndf1 = data[data.neighbourhood_group == \"Staten Island\"][[\"neighbourhood\",\"price\"]]\nd = df1.groupby(\"neighbourhood\").mean()\nsns.distplot(d,color='r',axlabel =\"Price Distribution in Staten Island\",kde_kws={\"color\": \"k\"},\n             hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.plot()","67e37ce9":"plt.figure(figsize=(10, 5))\ndf1 = data[data.neighbourhood_group == \"Bronx\"][[\"neighbourhood\",\"price\"]]\nd = df1.groupby(\"neighbourhood\").mean()\nsns.distplot(d,color='r',axlabel =\"Price Distribution in Bronx\",kde_kws={\"color\": \"k\"},\n             hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.plot()","6e00bba6":"plt.figure(figsize=(10,5))\ndf=data[data.price<500]\ntt=sns.violinplot(data=df, x='neighbourhood_group', y='price')\ntt.set_title('Distribution of price in neighbourhood')","d9651924":"data['price'].groupby(data[\"neighbourhood_group\"]).describe()","c3d9831c":"f,ax = plt.subplots(1,2,figsize=(15,5))\ndata.room_type.value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%',ax=ax[0],colors = ['#66b3ff','#ff9999','#99ff99'])\nax = sns.countplot(data.room_type,palette=\"Pastel1\")\nplt.show()","7cf15ec2":"plt.figure(figsize=(10,5))\ndf1 = data[data.room_type == \"Private room\"][[\"neighbourhood_group\",\"price\"]]\nd2 = df1.groupby(\"neighbourhood_group\").mean()\nsns.distplot(d2,color='b',axlabel =\"Price Distribution for Private room\",kde_kws={\"color\": \"k\"},\n             hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.show()","3c7d64a2":"plt.figure(figsize=(10,5))\ndf1 = data[data.room_type == \"Shared room\"][[\"neighbourhood_group\",\"price\"]]\nd2 = df1.groupby(\"neighbourhood_group\").mean()\nsns.distplot(d2,color='b',axlabel =\"Price Distribution for Shared room\",kde_kws={\"color\": \"k\"},\n             hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.show()","bcc852ac":"plt.figure(figsize=(10,5))\ndf1 = data[data.room_type == \"Entire home\/apt\"][[\"neighbourhood_group\",\"price\"]]\nd2 = df1.groupby(\"neighbourhood_group\").mean()\nsns.distplot(d2,color='b',axlabel =\"Price Distribution for Entire home\/apt\",kde_kws={\"color\": \"k\"},\n             hist_kws={\"histtype\":\"step\",\"linewidth\": 3})\nplt.show()","f011dcc7":"plt.figure(figsize=(10,5))\ndf=data[data.price<500]\ntt=sns.violinplot(data=df, x='room_type', y='price')\ntt.set_title('Distribution of price for different rooms type')","faa6560c":"plt.figure(figsize=(10,10))\nax = sns.countplot(data['room_type'],hue=data['neighbourhood_group'], palette='muted')","db9ee87f":"data['price'].groupby(data[\"room_type\"]).describe()","0a9f171f":"## create a plot of 10x10\nplt.figure(figsize=(10,10))\n\n## reads the nyc image in nyc_img \nnyc_img = plt.imread(\"..\/input\/new-york-city-airbnb-open-data\/New_York_City_.png\",0)\n\n## plot the nyc_image using \"imshow()\"\n## zorder -> how close our objects to foreground\n## eg - zorder = 0 -> closer to background ,\n##      zorder = 5 -> closer to front\n## we use \"extent\" to aling our latitude and longitude to our image so\n## extent = [latitude_start, latitude_end, longitude_start, longitude_end]\n\n## plt.gca() -> gives current axes of the plot\n\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\nax=plt.gca()\n\n## we take price between 0$ and 300$ so we can remove the outliers\nst = data[data.price<300]\n\n## plotting scatter plot of price on the nyc image\nvt = st.plot(kind=\"scatter\",\n        x=\"longitude\", # data positions x\n        y=\"latitude\",  # data positions y\n        c = \"price\", # sequence\n        cmap = plt.get_cmap('jet'),\n        colorbar=True, # shows the colorbar at right size of image\n        alpha = 0.4, # opacity of the scatter points\n        zorder=5, # zorder = 5 in above the image or closer to front\n        label=\"availability_365\", \n        ax = ax) # axis that we got from plt.gca()\n## shows the legend\nvt.legend()\n# plot the scatter plot\nplt.show()","e6fcf6d9":"## plotting avaliability_365\nf,ax = plt.subplots(figsize=(10,10))\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\nax=plt.gca()\n\nax = sns.scatterplot(\n        x =\"longitude\",\n        y =\"latitude\",\n        hue=\"availability_365\",\n        palette = 'jet',\n        data = data,\n    alpha = 0.4\n)\nplt.show()","1cf4a208":"m=folium.Map([40.7128,-74.0060],zoom_start=10)\nlocation = ['latitude','longitude']\ndf = data[location]\nHeatMap(df.dropna(),radius=8,gradient={.4: 'blue', .65: 'lime', 1: 'red'}).add_to(m)\ndisplay(m)","8639c2af":"<h3>Conclusion<\/h3><\/br>\n<h4>Entire home\/apt is the most expensive room type with US$ 211.79. <\/h4>\n\n<h4>Shared Room is the less expansive room type with US$ 70.13.<\/h4>","6dd14684":"<h4>Violin Plot of price wrt room_type<\/h4>","141b05dc":"<h1>5 NewYork Boroughs<\/h1>\n<h3>This will help us in further data analysis and data visualization <\/h3>","fac982d4":"<h4> As we can see our top host have 327 listing on airbnb <\/h4><br>\n<h3> Lets plot the top 10 hosts listings for better visualization <h3>","a72c4e65":" <h2>***Thankyou for giving my notebook a read*** <\/h2>\n <h2>**Any suggestion on improving the notebook are respected**<\/h2>\n","e8cdf229":"<h4> There are 20% NAN values in reviews_per_month and last_review and host_name and name contains null values too.<br\/>\nWe need to fix these either by removing the columns or replacing the values.<\/h4>","234bb698":"<h4>Price Distribution for Shared room<\/h4>","748e28b8":"<h4>Price Distribution in Queens<\/h4>","6cf8f936":"<h3>Conclusion<\/h3><\/br>\n<h4>Manhattan is the most expensive region, with US$ 196.88 as a mean value<\/h4>\n\n<h4>Bronx is the less expensive region, with US$ 87.50 as a mean value. <\/h4>","0c4fb5d0":"<h3> Lets look at Price distribution for different boroughs <h3><br\/>\n    <h4>Price Distribution in Brooklyn<\/h4>","1be6e639":"<h4>Manhattan have more listings than any other region.<\/h4>","640573ad":"<h3>Importing Libraries<\/h3>","22a23fdf":"<h3>Describing data frame<\/h3>","65cfc80b":"<h3>Lets check for datatype of our columns.<\/h3>","7eb67fd6":"<h3>Room Type Analysis<\/h3>","58e2b615":"<h4> Here we have a good correlation between number of reviews and reviews per month.<\/h4>","63a2a52b":"<h3>Correlation Analysis<\/h3><br\/>\n<h4>\nWe use corr() function to find the correlation of all columns in dataframe its a very handy function because, <br\/>\n1. automatically excludes NAN values <br\/>\n2. Non-numeric data in dataframe is ignored\n<\/h4>","ac81feea":"<h3>Hosting<\/h3>","84eb9c96":"<h3>Lets check for null values.<\/h3>","28089f7e":"<h4>\nMean of price is around 150 <\/br>\nIndividual on Average spents 7 nights <\/br>\nMax hosting is 327\n<\/h4>","a74176c4":"<h4>Price Distribution in Staten Island<\/h4>","04036fb1":"<h3>What size of data are we dealing with? <\/h3>","bccf1e95":"<h4> So last_reveiw is a date.<br\/>\nWe also dont need name & host name because these irrelevant to our analysis.<br\/>\nLets get rid of name, host_name, last_review.<br\/> <\/h4>","c0f31cf6":"<h3>Price Distribution according to room types<\/h3><br\/>\n<h4>Price Distribution for Private room<\/h4>","4961b068":"![](https:\/\/www.foodbanknyc.org\/wp-content\/uploads\/60602cba6bf5bcbdbb753d1bb6a5c292.jpg.png)","1f330103":"<h4>Price Distribution in Bronx<\/h4>","a4d7dfab":"<h3> NYC Borough <h3>","d6653d9f":"<h4>Price Distribution for Entire home\/apt<\/h4>","1077a3df":"<h4>Price Distribution in Manhattan<\/h4>"}}