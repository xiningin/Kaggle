{"cell_type":{"0d054b94":"code","656e7aa3":"code","1d32d12b":"code","9e827442":"code","efed278b":"code","fef624fd":"code","cb1bd2c8":"code","8bc22993":"code","d2e095d9":"code","84202a9a":"code","867888ae":"code","ad635585":"code","7111caee":"code","6648ebcd":"code","07bae1a0":"code","e057a123":"code","c6d59e48":"code","56329f40":"code","cca8ad7d":"code","668a3a31":"code","d8793650":"code","396dc5f8":"code","532897f5":"code","ae819151":"code","64bf3bf0":"code","f1ebb23b":"code","584a9514":"code","417e6a9f":"code","d8c841b6":"markdown","b7aaab4a":"markdown","9dcc3673":"markdown","6183cc77":"markdown","dcf8f810":"markdown","76d837bc":"markdown","b04c316e":"markdown","6b6f211b":"markdown","f38c1ccd":"markdown","2bdf2bd7":"markdown","22f77547":"markdown","7b6cfae3":"markdown","b8b91a03":"markdown","accd162e":"markdown","f414a50e":"markdown","4c11d943":"markdown","ae5ebaef":"markdown"},"source":{"0d054b94":"student1_info = [11202665,\"anmol\" ,\"M\",50 ,55,60 ,80,75 ]\n\nprint(student1_info)","656e7aa3":"# Create lists with different data types  and indexing\n\n# Create a list with integer elements\nnum_lst = [10,20,30,40,50]\nprint(\"num_lst = \" , num_lst) # display entire list\nprint(\"First = %d , Last = %d\" %(num_lst[0],num_lst[4]) ) # Display first and last elements\n\n# Create a list with string elements\nname_lst = [\"kalyan\",\"samridhi\",\"pooja\"]\nprint(\"name_lst = \" , name_lst)\nprint(\"First = %s , Last = %s\" %(name_lst[0],name_lst[2]) )\n\n# Create a list with mixed datatypes \nstudent2_info = [11202667,\"kalyani\" ,\"F\",60 ,55,60 ,80,75 ]\nprint(student2_info)","1d32d12b":"\n#range(start,stop,stepsize)\nprint(range(0,10,1))\n\nfor i in range(0,10,1):\n    print(i)\n\nprint(range(4,9,2))\nfor i in range(4,9,2):\n    print(i)","9e827442":"# create list using range()\nlist1 = range(10)\nprint(list1)\nfor i in list1:\n    print(i , ',', end='')\nprint() # next line\n\n# Create a list with even nums from 0 to 10\nlist2  = range(0,10,2)\nprint(list2)\nfor i in list2:\n    print(i , ',', end='')\nprint() # next line\n\n# Create a list with odd nums from 0 to 10\nlist2  = range(1,10,2)\nprint(list2)\nfor i in list2:\n    print(i , ',', end='')\nprint() # next line","efed278b":"# iteration of list using while and len()\nprint(\"Print all elements of List\")\nprint(\"while loop\")\nprint(list2)\nprint(\"len of list2 = \",len(list2))\ni = 0 # initial value\nwhile (i < len(list2)): #test\n    print(list2[i])\n    i = i+1 # increment the value\n    \nprint(\"for loop\")\nfor element in list2:\n    print(element)\n    ","fef624fd":"lst = list(range(1,5))\nprint(lst)","cb1bd2c8":"lst.append(9)\nprint(lst)","8bc22993":"# update first element\nlst[0] = 7\nprint(lst)","d2e095d9":"lst[1:3] = 10,11\nprint(lst)","84202a9a":"del lst[2] # uses index\nprint(lst)","867888ae":"lst.remove(9) # specify element and list_object.method\nprint(lst)","ad635585":"#reverse\nlst.reverse()\nprint(lst)","7111caee":"# logic to reverse list\nlist = [1,2,3,4,5]\n\nidx = len(list)-1\n\nwhile( idx >= 0):\n    print(list[idx])\n    idx = idx -1","6648ebcd":"idx = -1\nwhile( idx >= -5):\n    print(list[idx])\n    idx= idx-1","07bae1a0":"student_lst_secA = [\"Andy\",\"Charlie\",\"Eliza\"]\nstudent_lst_secB = [\"Patrick\",\"Claire\",\"Thierry\"]\nprint(student_lst_secA + student_lst_secB)\n\nmarks_secA = [20,40,30]\nmarks_secB = [25,35,45]\nprint(marks_secA + marks_secB)","e057a123":"print(marks_secA * 2)\nprint(marks_secB * 3)","c6d59e48":"num_lst = [10,20,30,40,50]\nnumber1 = 40\nprint(number1 in num_lst)","56329f40":"number2 = 45\nprint(number2 in num_lst)","cca8ad7d":"print(number2 not in num_lst)","668a3a31":"x_lst = [10,20,30,40,50]\ny_lst = x_lst\nprint(x_lst)\nprint(y_lst)\n\n\n","d8793650":"x_lst[1] = 99\nprint(x_lst)\nprint(y_lst)","396dc5f8":"x_lst = [10,20,30,40,50]\nprint(x_lst)\n\n#copy by cloning\ny_lst = x_lst[:]\nprint(y_lst)\n\n#modify\nx_lst[1] = 99\nprint(x_lst)\nprint(y_lst)\n\n\n","532897f5":"x_lst = [10,20,30,40,50]\nprint(x_lst)\n\n#copy by cloning\ny_lst = x_lst.copy()\nprint(y_lst)\n\n#modify\nx_lst[1] = 99\nprint(x_lst)\nprint(y_lst)","ae819151":"# Python program to understand List methods\nnum_lst = [10,20,30,40,50]\n\nlen_lst = len(num_lst)\nprint(\"1.Number of elements in list \", len_lst)\n\nnum_lst.append(60)\nprint(\"2. num_lst after appending 60\", num_lst)\n\nnum_lst.insert(0,5)\nprint(\"3. num_lst after inserting 5 at 0 index\", num_lst)\n\nnum_lst1 = num_lst.copy()\nprint(\"4. num_lst1 after copying\", num_lst1)\nprint(\"id of original num_lst \",id(num_lst))\nprint(\"id of new num_lst1\",id(num_lst1))\n\nnum_lst.extend(num_lst1)\nprint(\"5. num_lst after appending num_lst1\", num_lst)\n\ncount_n = num_lst.count(50)\nprint(\"6. No of times 50 is found in num_lst \", count_n)\n\nnum_lst.remove(50)\nprint(\"7. num_lst after removing 50 \", num_lst)\n\n\nnum_lst.pop()\nprint(\"8. num_lst after removing last element \", num_lst)\n\nnum_lst.sort()\nprint(\"9. num_lst after sorting in ascending order \", num_lst)\n\nnum_lst.sort(reverse= True)\nprint(\"10. num_lst after sorting in descending order \", num_lst)\n\nnum_lst.reverse()\nprint(\"11. num_lst after reversing  \", num_lst)\n\n\nnum_lst.clear()\nprint(\"12. num_lst after removing all elements  \", num_lst)\n\nprint(num_lst1)\nmax_num_lst1 = max(num_lst1)\nmin_num_lst1 = min(num_lst1)\nprint(\"13. max = \",max_num_lst1)\nprint(\"14. min = \",min_num_lst1)","64bf3bf0":"# display nested list as a matrix\nmat = [ [1,2,3], [4,5,6] , [7,8,9] ]\n\nprint(\"Display list as it is\")\nprint(mat)\n\nprint(\"Display row by row\")\nfor r in mat:\n    print(r)\n    \nprint(\"Display each column in row 0\")\nfor c in mat[0]:\n    print(\"%d\" %c, end=' ')\nprint()\n\nprint(\"Display all elements using for\")\nfor r in mat:\n    for c in r:\n        print(c, end=\" \")\n    print()    \n    \nprint(\"Display all elements using index\")\nfor i in range(len(mat)):\n    for j in range(len(mat[i])):\n        print(\"%d\"%mat[i][j] ,end=\" \")\n    print()    ","f1ebb23b":"# Create a list of with squares of integers from 1 to 10\nsquares = []\nfor x in range(1,11):\n    squares.append(x**2)\nprint(squares)","584a9514":"squares = [x**2  for x in range(1,11)]\nprint(squares)","417e6a9f":"# We want to take only even numbers from result\n\neven_squares = [x**2 for x in range(1,11) if(x%2==0)]\nprint(even_squares)","d8c841b6":"# Aliasing a list\nUsing assignment '=' operator","b7aaab4a":"list.sum() # Returns sum of alll elements of list \nlist.index(x) # Returns first occurenece of x in list\nlist.append(x) # Appends x at end of list\nlist.insert(i,x) # Inserts x into the list in position specified by i\nlist.copy() #Copies alll elements of list into new list and returns it\nlist.extend(list1) # Appends list1 to list\nlist.count(x) #Returns no of occureneces of x in list\nlist.remove(x) #Removes x from list\nlist.pop() # Removes ending elemnt from list\nlist.sort() # Sorts elements of list in ascending order\nlist.reverse() # Reverses sequence of elements in list\nlist.clear() # Deleets alll elements from list","9dcc3673":"# List are Mutable\nWe can modify contenets of list. We can append, update, delete, remove, reverse elements of list.","6183cc77":"# Repetition\nUses '*' operator","dcf8f810":" # Python List Methods","76d837bc":"# Python List operations\n\n1) Finding length\n\n2) Concatenation\n\n3) Repetition\n\n4) Membership\n\n5) Iteration","b04c316e":"# Membership\nUse 'in' and 'not in' operator","6b6f211b":"# Python List\n\nA list is similar to an array as it also stores a group of elements. But it is differenet from an array as it can store elenets of different types. So it is more versatile and useful.","f38c1ccd":"# Nested Lists as matrices","2bdf2bd7":"List Comprehension consists of square braces containing an expression e.g. [x**2]\n\nAfter the expression a for loop and then some other statments can be written.","22f77547":"# Introduction\n\nA Sequence data type stores and processes a group of elements.\nIn Python Sequence data types are: Strings, lists, tuples and dictionaries.","7b6cfae3":"# Concatenation\n\nUses '+' operator","b8b91a03":"# References \n1. Book \"Core Python Programming\" by Dr. R. Nageswar Rao","accd162e":"# List Comprehension\n\nList Comprehension represents creation of new list from an iterable object (like a list, set, tuple, dictionary and range) that satisfy a given condition.\n\nList Comprehension contains verys compact code ususally single statement to perform that task.\n\n\n","f414a50e":"But if the programmmer wants two independent lists. we go for cloning.\nObtaining exact copy of existing list is called cloning.\nWhen we clone, x and y becomme independent lists> Modifications in one do not effect the other object.","4c11d943":"Same thing can be achieved using copy () method","ae5ebaef":"Here x_lst and y_lst are two names (x_lst being original name and y_lst being alisa name but both pointing or referring to same object). So modification in one will reflect in both name.\n"}}