{"cell_type":{"22a2c319":"code","55c30827":"code","a671077b":"code","5a190b08":"code","6f48e057":"code","a0e051b2":"code","e3fb0388":"code","1d1a0d7e":"code","6d66242b":"code","ca6a6225":"code","4a2a3e33":"code","96c137f4":"code","2b0b24d6":"code","9a76cf21":"code","aa3a1af8":"code","aa2a764b":"code","48eadff8":"code","a3d4c8dd":"code","1b5a0e4f":"code","74b4fdfb":"code","cd9c8f47":"code","6a6a10a1":"code","0edd71a7":"code","8ad3ea06":"code","45ce2425":"code","66d5c7e0":"code","47b4780f":"code","9a1c7a68":"code","f6536809":"code","5de87932":"code","a4629a39":"code","ad364b7e":"code","a0814b89":"code","e813c6de":"code","04daf950":"code","6f76b138":"code","eb3fced9":"code","138ae950":"code","cf938d43":"code","bbbc1369":"code","d6edb41c":"code","cfb7a223":"code","cca0f54d":"code","04f6f9af":"markdown","c5a0c778":"markdown","8b0fcf8f":"markdown","0696457e":"markdown","cd2e3701":"markdown","a1b4433e":"markdown","84c625e0":"markdown","d92aec37":"markdown","ecf0ba3f":"markdown","68712ff0":"markdown","2dcb69dc":"markdown","80ec76c8":"markdown","5502a029":"markdown","e005ee38":"markdown","c20aeb3f":"markdown","dd606530":"markdown","34add631":"markdown","ea1e8b48":"markdown","085d8628":"markdown","f747520a":"markdown","3e7adffa":"markdown","b4cf8aa3":"markdown","314b2132":"markdown","f75ae6a7":"markdown","c8a0c940":"markdown","7be4a043":"markdown","9921723f":"markdown","2b5b365e":"markdown","711d618c":"markdown","14e504f0":"markdown","8b206245":"markdown","e36739c9":"markdown","4aec79dd":"markdown","e6b4878d":"markdown","48ad7cf0":"markdown","22129851":"markdown","df32ec31":"markdown","e256fe0e":"markdown","037f3065":"markdown","ad1ec536":"markdown","c7243ad3":"markdown","05d5da00":"markdown","ea59b79d":"markdown"},"source":{"22a2c319":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55c30827":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n\nimport time\nfrom nltk.stem.snowball import SnowballStemmer\nimport re\nfrom gensim.parsing.preprocessing import remove_stopwords\nfrom bs4 import BeautifulSoup\nfrom sklearn.preprocessing import LabelEncoder\n\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import confusion_matrix,log_loss,accuracy_score\nfrom sklearn.linear_model import LogisticRegression,SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier","a671077b":"fake = pd.read_csv(r'\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')\ntrue = pd.read_csv(r'\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')\nfake.head()","5a190b08":"true.head()","6f48e057":"print(fake.shape)\nprint(true.shape)","a0e051b2":"fake.info()","e3fb0388":"true.info()","1d1a0d7e":"fake['class'] = 0\ntrue['class'] = 1","6d66242b":"plt.figure(figsize=(20,12))\n\nplt.subplot(2,2,1)\nsns.countplot('subject',data=fake)\nplt.title(\"Subjects of news on fake news dataset\")\nplt.grid()\n\nplt.subplot(2,2,2)\nsns.countplot('subject',data=true)\nplt.title(\"Subjects of news on true news dataset\")\nplt.grid()\n\nplt.show()","ca6a6225":"for i in range(len(true['subject'])):\n    if true['subject'][i] == 'politicsNews':\n        true['subject'][i] = 'politics'\n        \ntrue['subject'][10]","4a2a3e33":"data = pd.concat([fake,true],axis=0)\ndata.head()","96c137f4":"data = pd.DataFrame.sort_values(data,by=['date'])\ndata.head()","2b0b24d6":"#dropping unnecessary column : date\ndata = data.reset_index(drop=True)\ndata = data.drop('date',axis=1)\ndata.head()","9a76cf21":"def remove_shortforms(phrase):\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase\n\ndef remove_special_char(text):\n    text = re.sub('[^A-Za-z0-9]+',\" \",text)\n    return text\n\ndef remove_wordswithnum(text):\n    text = re.sub(\"\\S*\\d\\S*\", \"\", text).strip()\n    return text\n\ndef lowercase(text):\n    text = text.lower()\n    return text\n\ndef remove_stop_words(text):\n    text = remove_stopwords(text)\n    return text\n\nst = SnowballStemmer(language='english')\ndef stemming(text):\n    r= []\n    for word in text :\n        a = st.stem(word)\n        r.append(a)\n    return r\n\ndef listToString(s):  \n    str1 = \" \"   \n    return (str1.join(s))","aa3a1af8":"start_time = time.time()\nfor i in range(len(data['text'])):\n    data['text'][i] = remove_shortforms(data['text'][i])\n    data['text'][i] = remove_special_char(data['text'][i])\n    data['text'][i] = remove_wordswithnum(data['text'][i])\n    data['text'][i] = lowercase(data['text'][i])\n    data['text'][i] = remove_stop_words(data['text'][i])\n    text = data['text'][i]\n    text = text.split()\n    data['text'][i] = stemming(text)\n    s = data['text'][i]\n    data['text'][i] = listToString(s)\nprint(\"Time taken to preprocess : \",time.time()-start_time,\" seconds\")","aa2a764b":"start_time = time.time()\nfor i in range(len(data['title'])):\n    data['title'][i] = remove_shortforms(data['title'][i])\n    data['title'][i] = remove_special_char(data['title'][i])\n    data['title'][i] = remove_wordswithnum(data['title'][i])\n    data['title'][i] = lowercase(data['title'][i])\n    data['title'][i] = remove_stop_words(data['title'][i])\n    text = data['title'][i]\n    text = text.split()\n    data['title'][i] = stemming(text)\n    s = data['title'][i]\n    data['title'][i] = listToString(s)\nprint(\"Time taken to preprocess : \",time.time()-start_time,\" seconds\")","48eadff8":"start_time = time.time()\nfor i in range(len(data['subject'])):\n    data['subject'][i] = remove_shortforms(data['subject'][i])\n    data['subject'][i] = remove_special_char(data['subject'][i])\n    data['subject'][i] = remove_wordswithnum(data['subject'][i])\n    data['subject'][i] = lowercase(data['subject'][i])\n    data['subject'][i] = remove_stop_words(data['subject'][i])\n    text = data['subject'][i]\n    text = text.split()\n    data['subject'][i] = stemming(text)\n    s = data['subject'][i]\n    data['subject'][i] = listToString(s)\nprint(\"Time taken to preprocess : \",time.time()-start_time,\" seconds\")","a3d4c8dd":"data.head()","1b5a0e4f":"Combined_text = [None] * len(data['text'])\nfor i in range(len(data['title'])):\n    Combined_text[i] = data['text'][i] + \" \" + data['title'][i] + \" \" + data['subject'][i]\n    \ndata['combined_text'] = Combined_text","74b4fdfb":"#dropping the unnecessary columns\ndata = pd.DataFrame.drop(data,columns=['title','text','subject'],axis=1)\ndata.head()","cd9c8f47":"bow = CountVectorizer(ngram_range=(1,2))\nbow_text = bow.fit_transform(data['combined_text'])","6a6a10a1":"tfidf = TfidfVectorizer(ngram_range=(1,2))\ntfidf_text = tfidf.fit_transform(data['combined_text'])","0edd71a7":"print(bow_text.shape)\nprint(tfidf_text.shape)","8ad3ea06":"labels = data['class'].reset_index(drop=True)\nlabels.shape","45ce2425":"# splitting in 70% train and 30% test\nX_train_bow = bow_text[:31428]\nX_test_bow = bow_text[31428:]\nX_train_tfidf = tfidf_text[:31428]\nX_test_tfidf = tfidf_text[31428:]\nY_train = labels[:31428]\nY_test = labels[31428:]","66d5c7e0":"plt.figure(figsize=(10,8))\n\nplt.subplot(2,2,1)\nsns.countplot(Y_train)\nplt.grid()\n\nplt.subplot(2,2,2)\nsns.countplot(Y_test)\nplt.grid()\n\nplt.show()","47b4780f":"def plot_conf_matrix(Y_test,Y_pred):\n    conf = confusion_matrix(Y_test,Y_pred)\n    recall =(((conf.T)\/(conf.sum(axis=1))).T)\n    precision =(conf\/conf.sum(axis=0))\n\n    class_labels = [0,1]\n    plt.figure(figsize=(10,8))\n    sns.heatmap(conf,annot=True,fmt=\".3f\",cmap=\"YlOrBr\",xticklabels=class_labels,yticklabels=class_labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n\n    plt.figure(figsize=(10,8))\n    sns.heatmap(precision,annot=True,fmt=\".3f\",cmap=\"YlOrBr\",xticklabels=class_labels,yticklabels=class_labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n\n    plt.figure(figsize=(10,8))\n    sns.heatmap(recall,annot=True,fmt=\".3f\",cmap=\"YlOrBr\",xticklabels=class_labels,yticklabels=class_labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()","9a1c7a68":"summary = []","f6536809":"lr = LogisticRegression(max_iter = 1200)\nlr.fit(X_train_bow,Y_train)\n\ntrain_pred = lr.predict(X_train_bow)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = lr.predict(X_test_bow)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nplot_conf_matrix(Y_test,test_pred)\nprint(\"Accuracy :\",lr.score(X_test_bow,Y_test)*100)\n\nsummary.append((\"Logistic Regression with BOW\",lr.score(X_test_bow,Y_test)*100))","5de87932":"lr = LogisticRegression(max_iter=1200)\nlr.fit(X_train_tfidf,Y_train)\n\ntrain_pred = lr.predict(X_train_tfidf)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = lr.predict(X_test_tfidf)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nplot_conf_matrix(Y_test,test_pred)\nprint(\"Accuracy :\",lr.score(X_test_tfidf,Y_test)*100)\n\nsummary.append((\"Logistic Regression with TF-IDF\",lr.score(X_test_bow,Y_test)*100))","a4629a39":"rf = RandomForestClassifier()\nrf.fit(X_train_bow,Y_train)\n\ntrain_pred = rf.predict(X_train_bow)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = rf.predict(X_test_bow)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nplot_conf_matrix(Y_test,test_pred)\nprint(\"Accuracy : \",accuracy_score(Y_test,test_pred)*100)\n\nsummary.append((\"Random Forest with BOW\",accuracy_score(Y_test,test_pred)*100))","ad364b7e":"rf = RandomForestClassifier()\nrf.fit(X_train_tfidf,Y_train)\n\ntrain_pred = rf.predict(X_train_tfidf)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = rf.predict(X_test_tfidf)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nprint(\"Accuracy : \",accuracy_score(Y_test,test_pred)*100)\nplot_conf_matrix(Y_test,test_pred)\n\nsummary.append((\"Random Forest with TF-IDF\",accuracy_score(Y_test,test_pred)*100))","a0814b89":"li_svm = SVC(kernel='linear')\nli_svm.fit(X_train_bow,Y_train)\n\ntrain_pred = li_svm.predict(X_train_bow)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = li_svm.predict(X_test_bow)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nprint(\"Accuracy : \",accuracy_score(Y_test,test_pred)*100)\nplot_conf_matrix(Y_test,test_pred)\n\nsummary.append((\"Linear SVM with BOW\",accuracy_score(Y_test,test_pred)*100))","e813c6de":"li_svm = SVC(kernel='linear')\nli_svm.fit(X_train_tfidf,Y_train)\n\ntrain_pred = li_svm.predict(X_train_tfidf)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = li_svm.predict(X_test_tfidf)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nprint(\"Accuracy : \",accuracy_score(Y_test,test_pred)*100)\nplot_conf_matrix(Y_test,test_pred)\n\nsummary.append((\"Linear SVM with TF-IDF\",accuracy_score(Y_test,test_pred)*100))","04daf950":"rbf_svm = SVC(kernel='rbf')\nrbf_svm.fit(X_train_bow,Y_train)\n\ntrain_pred = rbf_svm.predict(X_train_bow)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = rbf_svm.predict(X_test_bow)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nprint(\"Accuracy : \",accuracy_score(Y_test,test_pred)*100)\nplot_conf_matrix(Y_test,test_pred)\n\nsummary.append((\"RBF-SVM with BOW\",accuracy_score(Y_test,test_pred)*100))","6f76b138":"gbdt = GradientBoostingClassifier()\ngbdt.fit(X_train_bow,Y_train)\n\ntrain_pred = gbdt.predict(X_train_bow)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = gbdt.predict(X_test_bow)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nprint(\"Accuracy : \",accuracy_score(Y_test,test_pred)*100)\nplot_conf_matrix(Y_test,test_pred)\n\nsummary.append((\"GBDT with BOW\",accuracy_score(Y_test,test_pred)*100))","eb3fced9":"dt = DecisionTreeClassifier()\ndt.fit(X_train_bow,Y_train)\n\ntrain_pred = dt.predict(X_train_bow)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = dt.predict(X_test_bow)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nprint(\"Accuracy : \",accuracy_score(Y_test,test_pred)*100)\nplot_conf_matrix(Y_test,test_pred)\n\nsummary.append((\"Decision Tree with BOW\",accuracy_score(Y_test,test_pred)*100))","138ae950":"dt = DecisionTreeClassifier(max_depth=100)\ndt.fit(X_train_tfidf,Y_train)\n\ntrain_pred = dt.predict(X_train_tfidf)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = dt.predict(X_test_tfidf)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nprint(\"Accuracy : \",accuracy_score(Y_test,test_pred)*100)\nplot_conf_matrix(Y_test,test_pred)\n\nsummary.append((\"Decision Tree with TF-IDF\",accuracy_score(Y_test,test_pred)*100))","cf938d43":"sgd = SGDClassifier()\nsgd.fit(X_train_bow,Y_train)\n\ntrain_pred = sgd.predict(X_train_bow)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = sgd.predict(X_test_bow)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nplot_conf_matrix(Y_test,test_pred)\nprint(\"Accuracy :\",accuracy_score(Y_test,test_pred)*100)\n\nsummary.append((\"SGD Classifier with BOW\",lr.score(X_test_bow,Y_test)*100))","bbbc1369":"sgd = SGDClassifier()\nsgd.fit(X_train_tfidf,Y_train)\n\ntrain_pred = sgd.predict(X_train_tfidf)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = sgd.predict(X_test_tfidf)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nplot_conf_matrix(Y_test,test_pred)\nprint(\"Accuracy :\",accuracy_score(Y_test,test_pred)*100)\n\nsummary.append((\"SGD Classifier with TF-IDF\",lr.score(X_test_bow,Y_test)*100))","d6edb41c":"knn = KNeighborsClassifier()\nknn.fit(X_train_bow,Y_train)\n\ntrain_pred = knn.predict(X_train_bow)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = knn.predict(X_test_bow)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nplot_conf_matrix(Y_test,test_pred)\nprint(\"Accuracy :\",accuracy_score(Y_test,test_pred)*100)\n\nsummary.append((\"KNN with BOW\",lr.score(X_test_bow,Y_test)*100))","cfb7a223":"knn = KNeighborsClassifier()\nknn.fit(X_train_tfidf,Y_train)\n\ntrain_pred = knn.predict(X_train_tfidf)\nprint(\"The train loss is : \",log_loss(Y_train,train_pred))\n\ntest_pred = knn.predict(X_test_tfidf)\nprint(\"The test loss is : \",log_loss(Y_test,test_pred))\n\nplot_conf_matrix(Y_test,test_pred)\nprint(\"Accuracy :\",accuracy_score(Y_test,test_pred)*100)\n\nsummary.append((\"KNN with TF-IDF\",lr.score(X_test_bow,Y_test)*100))","cca0f54d":"print(\"Summary :\")\nprint(\"        Model                         ACCURACY  \")\nfor i in range(len(summary)):\n    print(summary[i])","04f6f9af":"# **KNN :**","c5a0c778":"# **Text Preprocessing :**","8b0fcf8f":"With TF-TDF encoding of text :","0696457e":"# **ML Models :**","cd2e3701":"With Bag of words encoding of text :","a1b4433e":"**There are no null values in the dataset**","84c625e0":"# **Gradient Boosing Decision Tree**","d92aec37":"# **SGD Classifier :**","ecf0ba3f":"**subject:politics in the fake news dataset is same as the subject :politicsNews in the true news dataset**\n**Therefore changing them to a common name.**","68712ff0":"With Bag of words encoding of text :","2dcb69dc":"**Also i have put up the training losses along with the test losses for all models so that you can choose which model is overfitting and which is a better model than the rest.**","80ec76c8":"# **Logistic Regression :**","5502a029":"# **Bag Of Words and TF-IDF encoding of the combined text:**","e005ee38":"**Sorting the datasets by date:**","c20aeb3f":"With Bag of words encoding of text :","dd606530":"**Creating class labels :**","34add631":"# **Summary of models :**","ea1e8b48":"With TF-IDF encoding of text :","085d8628":"# **Loading the dataset :**","f747520a":"With TF-TDF encoding of text :","3e7adffa":"With TF-IDF encoding of text :","b4cf8aa3":"# **Random Forest :**","314b2132":"**Its very highly probable that GBDT with TF-IDF runs with a great accuracy too.If it will be possible I will surely update this notebook with it but if i couldn't ,be sure to try that out in case you work with this dataset.**","f75ae6a7":"**Combining the datasets:**","c8a0c940":"**Confusion Matrix along with Precision and Recall matrix :**","7be4a043":"**In my opinion GBDT with BOW encoding is the best model because it does not overfit and provides a very nice accuracy too followed by Logistic Regression with BOW encoding  which also gives a nice accuracy.**","9921723f":"With Bag of words encoding of text :","2b5b365e":"With TF-IDF encoding of text :","711d618c":"# **Linear SVM :**","14e504f0":"# **RBF-SVM :**","8b206245":"**I ran GBDT and RBF-SVM with just the BOW encoding because it already takes a lot of time to run but if you have better systems you can run them on TF-IDF encoding with hyperparameter tuning too but these accuracy are good too.**","e36739c9":"# **Train-Test Split(Time based Splitting) :**","4aec79dd":"With Bag of words encoding of text :","e6b4878d":"With Bag of Words encoding of text :","48ad7cf0":"**Splitted data visualisation :**","22129851":"With TF-IDF encoding of text :","df32ec31":"**Combining the texts,titles and the subjects :**","e256fe0e":"With Bag of words encoding of text :","037f3065":"**If you like my notbook please do upvote.Thanks for viewing.**","ad1ec536":"**There are no null values in the dataset**","c7243ad3":"With Bag of words encoding of text :","05d5da00":"# **Decision Tree :**","ea59b79d":"# **Data Visualisation :**"}}