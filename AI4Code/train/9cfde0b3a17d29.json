{"cell_type":{"059a55bb":"code","cdbd91bb":"code","043a5fbe":"code","3f2c2229":"code","fce3a252":"code","e894d725":"code","dc1f7ae2":"code","91faf74a":"code","eed7f69c":"markdown","fe20388f":"markdown","81198ad3":"markdown","4f6258f7":"markdown","248b1edf":"markdown","ba8ec788":"markdown","b955f893":"markdown","12e8c24f":"markdown","e8b124cb":"markdown","6dbedbe1":"markdown"},"source":{"059a55bb":"import numpy as np \nimport pandas as pd \nimport gc, joblib\n\nfrom sklearn.linear_model import LinearRegression as lr\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.stats import pearsonr as p\n\nimport warnings\nwarnings.simplefilter('ignore')","cdbd91bb":"train = pd.read_pickle('..\/input\/ump195gb\/train.pkl')\ntrain.head(3)","043a5fbe":"df = train.groupby('time_id')['investment_id'].count()\ndf.plot(color='green', ylabel='Number of assets', figsize=(10,7), linewidth=2)\ngc.collect()","3f2c2229":"df_sub = df.drop(df[df.diff() <-200].index, axis=0)[400:]\ndf_sub.plot(color='blue', ylabel='Number of assets', figsize=(10,7), linewidth=2)\n\ndel df\ngc.collect()","fce3a252":"train = train[train.time_id.isin(df_sub.index)].reset_index(drop=True)\ndel df_sub\ngc.collect()\nprint(f'Number of rows in the reduced dataset: {len(train)}')","e894d725":"X = train.drop(['row_id', 'time_id', 'target'], axis=1)\ny = train['target']\n\ndel train\ngc.collect()","dc1f7ae2":"skf = StratifiedKFold(n_splits=5)\nmodels = []\nscores = []\nfor fold, (train_idx, val_idx) in enumerate(skf.split(X, X.investment_id)):\n    print('_'*50)\n    print(f'Fold: {fold}')\n    \n    X_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n    X_val, y_val = X.iloc[val_idx], y.iloc[val_idx]\n    \n    model = lr()\n    model.fit(X_train,y_train)\n    \n    # Save model for inference or future ensemble models\n    models.append(model)\n    joblib.dump(model, f'fold_{fold}.pkl')\n    \n    y_pred = model.predict(X_val)\n    rmse = np.sqrt(mean_squared_error(y_pred, y_val))\n    corr = p(y_pred, y_val)[0]\n    scores.append(corr)\n    print(f'RMSE: {rmse},\\t Pearson correlation score: {corr}')\n    \n    del X_train, y_train, X_val, y_val, model, y_pred, rmse, corr\n    gc.collect()\n    \nprint(f'Average Pearson correlation score: {np.mean(scores, axis=0)}')\ndel X, y\ngc.collect()","91faf74a":"import ubiquant\nenv = ubiquant.make_env()   # initialize the environment\niter_test = env.iter_test()    # an iterator which loops over the test set and sample submission\nfor (test_df, sample_prediction_df) in iter_test:\n    X_test = test_df.drop(['row_id'], axis=1)\n\n    # loop over all the model for prediction and take the mean of all models\n    sample_prediction_df['target'] = np.mean([model.predict(X_test) for model in models], axis=0) \n    \n    env.predict(sample_prediction_df)   # register your predictions\n    \n    display(sample_prediction_df) # display the predicted results","eed7f69c":"We use StratifiedKFold to split the train\/validation subsets with respect to the investment_id. Doing so, we allow the model to predict new assets that may appear in future test set. ","fe20388f":"We reduce the train dataset with respect to the reduced time_ids","81198ad3":"The number of assets is almost constant before a crazy time_id of about 400, then it increases linearly versus time_id. Thefore, we should expect to have more assets in the portfolio. ","4f6258f7":"## Model","248b1edf":"In this study, we will consider only the linear trend (time_id > 400) that is representative for future data. Also, we will remove the time_id where there is a sudden drop in number of assets.","ba8ec788":"## Submission","b955f893":"time_id is actually not considered as a feature","12e8c24f":"# Ubiquant: Linear Regression with CV\n\nThis notebook presents a simple approach using Linear Regression method with CV. As new assets will appear in the future test set, cross-validation across the existing assets would be a good choice to evaluate the model performance and avoid overfitting issue.","e8b124cb":"## Data\n\nA light version of the data is considered (see https:\/\/www.kaggle.com\/c\/ubiquant-market-prediction\/discussion\/302223#1658970)","6dbedbe1":"## End. Please upvote if you like or copy this notebook."}}