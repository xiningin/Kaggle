{"cell_type":{"cce5857a":"code","de651416":"code","fb4074f5":"code","01291319":"code","5e3908e9":"code","27e2345e":"code","cb5d64d2":"code","d45bd1df":"code","4e4452f3":"code","14e34ae7":"code","cb27f8e4":"code","a8cf3782":"code","b90d7cf2":"code","ceb03d59":"code","2b130140":"markdown","fcfd8d7b":"markdown","49316f1e":"markdown","d56a36d4":"markdown","32be1974":"markdown","3faaa9e7":"markdown"},"source":{"cce5857a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de651416":"import seaborn as sns \nimport matplotlib.pyplot as plt","fb4074f5":"bank_df = pd.read_csv(\"..\/input\/bank-customer-retirement\/Bank_Customer_retirement.csv\")\nbank_df","01291319":"bank_df.keys()\n","5e3908e9":"sns.pairplot(bank_df, hue= 'Retire' , vars =['Age','401K Savings'])","27e2345e":"sns.countplot(bank_df['Retire'],label = 'Retirement')","cb5d64d2":"bank_df = bank_df.drop(['Customer ID'], axis =1)\nbank_df","d45bd1df":"X =bank_df.drop(['Retire'], axis = 1)\nX","4e4452f3":"y = bank_df['Retire']\ny","14e34ae7":"from sklearn.model_selection import  train_test_split\nX_train,X_test,y_train, y_test =train_test_split(X,y, test_size= 0.2, random_state= 5)\n","cb27f8e4":"from sklearn.svm import SVC\nfrom sklearn.metrics  import classification_report, confusion_matrix\nsvc_model = SVC()\nsvc_model.fit(X_train, y_train)\n","a8cf3782":"y_predict =svc_model.predict(X_test)\ncm = confusion_matrix(y_test,y_predict)\nprint(classification_report(y_test,y_predict))","b90d7cf2":"y_predict= svc_model.predict(X_test)\ny_predict\ncm= confusion_matrix(y_test, y_predict)\nsns.heatmap(cm, annot= True)","ceb03d59":"import sklearn\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predict)\naccuracy","2b130140":"**import dataset **","fcfd8d7b":"**Now dropping the Retire column as it is not the input**","49316f1e":"**Model Training**","d56a36d4":"**Accuracy is about 90%**","32be1974":"**Evaluating the model**","3faaa9e7":"**Visualize the data **"}}