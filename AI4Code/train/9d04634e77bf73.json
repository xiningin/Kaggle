{"cell_type":{"f803634a":"code","c4d3baa2":"code","5828f923":"code","5678a436":"code","e81dbce2":"code","77730702":"code","f4011b8d":"code","addd50f3":"code","15ff95d9":"markdown","d13adea4":"markdown","3f6fc193":"markdown","d9d6657f":"markdown","71a13578":"markdown"},"source":{"f803634a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4d3baa2":"import matplotlib.pyplot as plt\nimport numpy as np","5828f923":"black = (0,0,0)\nwhite = (1,1,1)\nblue = (0,1,1)\nred = (1,.2,0)","5678a436":"class ChessBoard:\n    def __init__(self):\n        self.grid = np.ones((8, 8, 3))\n        self.grid[::2, ::2] = black\n        self.grid[1::2, 1::2] = black\n        self.red_positions = []\n        self.blue_positions = []\n        \n    def set_color(self, col, row, color):\n        self.grid[col, row] = color\n        \n        \n    def render(self):\n        plt.imshow(self.grid)\n    \n    def add_red(self, col, row):\n        ChessBoard.set_color(self, col, row, red)\n        self.red_positions.append((col, row))\n#         self.grid[col, row] = red\n        \n    def add_blue(self, col, row):\n        ChessBoard.set_color(self, col, row, blue)\n        self.blue_positions.append((col, row))\n#         self.grid[col, row] = blue\n        \n    def is_under_attack(self):\n        if self.red_positions and self.blue_positions: \n            for red_position in self.red_positions:\n                for index,blue_position in enumerate(self.blue_positions):\n                    \n                    if red_position[0] == blue_position[0]:\n                        return True\n                    if red_position[1] == blue_position[1]:\n                        return True\n                    if abs((red_position[0] - blue_position[0])\/ (red_position[1] - blue_position[1])) == 1:\n                        return True   \n            return False\n        else:\n            return \"MISSING RED\/BLUE QUEENS ON THE CHESSBOARD\"\n        \n    ","e81dbce2":"board = ChessBoard()\n#Tests for empty board\nprint(board.is_under_attack())\nboard.render()\n","77730702":"# Tests horizontal attacks\nboard = ChessBoard()\nboard.add_red(3, 0)\nboard.add_blue(3, 7)\nprint(board.is_under_attack())\nboard.render()","f4011b8d":"# Tests vertical attacks\nboard = ChessBoard()\nboard.add_red(0, 3)\nboard.add_blue(7, 3)\nprint(board.is_under_attack())\nboard.render()","addd50f3":"#Tests diagonal attacks\nboard = ChessBoard()\nboard.add_red(3, 3)\nboard.add_blue(4, 4)\nprint(board.is_under_attack())\nboard.render()","15ff95d9":"### TESTS \/ DEMO","d13adea4":"### Required Imports","3f6fc193":"### Logic","d9d6657f":"# README - Numpy\n\n## **Author**: Ediberto Ponce\n\n## Overview\n\n> Your job is to render out chess boards with red and blue queens on them. We\u2019re keeping it really basic here so the only pieces are queens and each queen is represented by a blue or red square. Chess board is an 8 by 8 grid of alternating black and white squares. The queens are red and blue squares. Each board will have one red and one blue queen at different coordinates. In addition to displaying the board you\u2019ll need to identify if the queens are \u201cunder attack\u201d based on their coordinates.\n\n\n## Architecture\n\n- Python 3\n- numpy\n- matplotlib\n\n\n## Credit and Collaborations\n\n- Brandon Mitzutani and Alex Payne\n  * They helped me with the grid tiles logic. I originally had a nested loop.\n- Taylor White\n  * Helped me understand numpy IAW grids\n- Michael Greene\n  * Helped with my test\/demo section\n\n## Resources\n\n- [GeeksForGeeks](https:\/\/www.geeksforgeeks.org\/python-program-print-checkerboard-pattern-nxn-using-numpy\/)\n- [Python enumerate(): Simplify Looping With Counters](https:\/\/realpython.com\/python-enumerate\/)\n- [Python abs() Function](https:\/\/www.guru99.com\/abs-in-python.html)\n\n## Name of feature: Create Chessboard Tiles\n\n- Estimate of time needed to complete: 1 hour\n\n- Start time: 1:45pm\n\n- Finish time: 2:30pm\n\n- Actual time needed to complete: 45 minutes\n\n## Name of feature: Create is_under_attack method\n\n- Estimate of time needed to complete: 2 hours\n\n- Start time: 2:30pm\n\n- Finish time: 3:45pm\n\n- Actual time needed to complete: 1 hour 15 minutes","71a13578":"### Global Variables"}}