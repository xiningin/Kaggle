{"cell_type":{"45c09859":"code","6d7599ff":"code","4d7d4d44":"code","0941d877":"code","c443be20":"code","4b480a70":"code","0fff7f7a":"code","00ed2486":"code","34045e56":"code","e0d7696d":"code","b6e404c3":"code","f47f8ccc":"code","d939b4c8":"code","6b124c7f":"code","617c4cc3":"code","286e9114":"code","25b5329c":"code","c62708aa":"code","5cc29407":"code","29539680":"code","2b134a7b":"code","9d53ece9":"code","6aca64a5":"code","3bea73be":"code","a60bca70":"code","22405fe9":"code","9534ab55":"markdown","5b7fb98a":"markdown","2f29e573":"markdown","b6ae409c":"markdown","c13a6c54":"markdown","eb2ea570":"markdown","61b67435":"markdown","2c4dec3c":"markdown","a824371f":"markdown","4d642155":"markdown","799b410f":"markdown","810a8cd6":"markdown","c8a3fdf3":"markdown"},"source":{"45c09859":"import os\nprint(os.listdir(\"..\/input\"))","6d7599ff":"pi = \"\"\nwith open(\"..\/input\/pi-billion.txt\") as f:\n    pi += f.read()","4d7d4d44":"pi[:1100]","0941d877":"def check(data):\n    global pi\n    i = 0\n    while True:\n        try:\n            if pi[i] == data[i]:\n                i += 1\n            else:\n                break\n        except:\n            break\n    return i","c443be20":"import math\nprint(math.pi)","4b480a70":"print(\"Length: %i\" % (len(str(math.pi).replace(\".\", \"\"))))","0fff7f7a":"def pi_spigot(n):\n    k, a, b, a1, b1 = 2, 4, 1, 12, 4\n    while n > 0:\n        p, q, k = k * k, 2 * k + 1, k + 1\n        a, b, a1, b1 = a1, b1, p * a + q * a1, p * b + q * b1\n        d, d1 = a \/ b, a1 \/ b1\n        while d == d1 and n > 0:\n            yield int(d)\n            n -= 1\n            a, a1 = 10 * (a % b), 10 * (a1 % b1)\n            d, d1 = a \/ b, a1 \/ b1","00ed2486":"print(''.join(map(str, list(pi_spigot(100))))) #Maxes at >10000","34045e56":"from decimal import *","e0d7696d":"getcontext().prec = 2500","b6e404c3":"def factorial(n):\n    if n<1:\n        return 1\n    else:\n        return n * factorial(n-1)","f47f8ccc":"def pi_chudnovsky(n):\n    pi = Decimal(0)\n    k = 0\n    while k < n:\n        pi += (Decimal(-1)**k)*(Decimal(factorial(6*k))\/((factorial(k)**3)*(factorial(3*k)))* (13591409+545140134*k)\/(640320**(3*k)))\n        k += 1\n    pi = pi * Decimal(10005).sqrt()\/4270934400\n    pi = pi**(-1)\n    return pi","d939b4c8":"print(pi_chudnovsky(1000)) #Maxes at >1000","6b124c7f":"def pi_bellard(n):\n    pi = Decimal(0)\n    k = 0\n    while k < n:\n        pi += (Decimal(-1)**k\/(1024**k))*( Decimal(256)\/(10*k+1) + Decimal(1)\/(10*k+9) - Decimal(64)\/(10*k+3) - Decimal(32)\/(4*k+1) - Decimal(4)\/(10*k+5) - Decimal(4)\/(10*k+7) -Decimal(1)\/(4*k+3))\n        k += 1\n    pi = pi * 1\/(2**6)\n    return pi","617c4cc3":"print(pi_bellard(2000)) #Maxes at >1000","286e9114":"print(sum(1\/Decimal(16)**k * \n          (Decimal(4)\/(8*k+1) - \n           Decimal(2)\/(8*k+4) - \n           Decimal(1)\/(8*k+5) -\n           Decimal(1)\/(8*k+6)) for k in range(400)))","25b5329c":"def pi_gauss_legendre():\n    D = Decimal\n    with localcontext() as ctx:\n        ctx.prec += 2                \n        a, b, t, p = 1, 1\/D(2).sqrt(), 1\/D(4), 1                \n        pi = None\n        while 1:\n            an    = (a + b) \/ 2\n            b     = (a * b).sqrt()\n            t    -= p * (a - an) * (a - an)\n            a, p  = an, 2*p\n            piold = pi\n            pi    = (a + b) * (a + b) \/ (4 * t)\n            if pi == piold:  # equal within given precision\n                break\n    return +pi\n\ngetcontext().prec = 10000\nprint(pi_gauss_legendre())","c62708aa":"import mpmath\nimport cmath\n\nctx = mpmath.fp\n# ctx = mpmath.mp\n\nITERATIONS = 100\nPOINTS = 100000\nESCAPE_RADIUS = 4\n\n# Custom plot\nRE = [-2, 0.5]\nIM = [-1, 1]\n\n# Full plot\n# RE = [-2.5, 1.5]\n# IM = [-1.5, 1.5]\n\n# A pretty subplot\n# RE = [-0.96, -0.80]\n# IM = [-0.35, -0.2]\n\ndef mandelbrot(z):\n    c = z\n    for i in range(ITERATIONS):\n        zprev = z\n        z = z*z + c\n        if abs(z) > ESCAPE_RADIUS:\n            return ctx.exp(1j*(i + 1 - ctx.log(ctx.log(abs(z)))\/ctx.log(2)))\n    return 0\n\n_ = ctx.cplot(mandelbrot, RE, IM, points=POINTS, verbose=0)\n","5cc29407":"from mpmath import mp","29539680":"mp.dps = 1000","2b134a7b":"print(len(str(mp.pi).replace(\".\", \"\")))","9d53ece9":"print(check(str(mp.pi)))","6aca64a5":"mp.dps = 10000","3bea73be":"print(check(str(mp.pi)))","a60bca70":"mp.dps = 100000000","22405fe9":"#print(check(str(mp.pi)))","9534ab55":"## Let's Write Our Own Code!","5b7fb98a":"### 1. Spigot Algorithm - https:\/\/en.wikipedia.org\/wiki\/Spigot_algorithm","2f29e573":"That looks a great bit tiny. Here's what we could do with that many digits of Pi - \n\n* JPL uses the exact above number for its interplanetary explorations.\n\nWhen calculating circumference of an object 100 feet of diameter - \n* Pi = 3 will have 4.5% error.\n* Pi = 3.1 will have 1.3% error.\n* Pi = 3.14 will have 0.5% error.\n* Pi = 3.14156 will have 0.000084% error.","b6ae409c":"## Mandlebrot Plotting with mpmath\n","c13a6c54":"Implementation by - deeplook at https:\/\/gist.github.com\/deeplook\/4947835","eb2ea570":"### 4. Bellard's formula - https:\/\/en.wikipedia.org\/wiki\/Bellard's_formula","61b67435":"### 2. Ramanujan\u2013Sato series - https:\/\/en.wikipedia.org\/wiki\/Ramanujan-Sato_series","2c4dec3c":"## mpmath pi","a824371f":"### 3. Chudnovsky algorithm - https:\/\/en.wikipedia.org\/wiki\/Chudnovsky_algorithm","4d642155":"### 5. One Liner BBP","799b410f":"## The Simplest Import","810a8cd6":"### 6. Gauss Legendre Formula - ","c8a3fdf3":"# Pi With Py"}}