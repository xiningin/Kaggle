{"cell_type":{"453fba12":"code","76c8ba1a":"code","5c5a9ebe":"code","42b2b61c":"code","5f9b1a3c":"code","78b81417":"code","0622d1fe":"code","11024de3":"code","8bab9472":"code","c5ada082":"code","2d32fc44":"code","a090b567":"code","49f1281e":"code","23e26954":"code","95253339":"code","e014fea2":"code","e6ad1752":"code","b56f9815":"code","0b2078ac":"code","296e48f8":"code","bdd426ba":"code","8fea2fdf":"code","08c132ef":"code","eb4b144a":"code","1c2e4cb0":"code","4f075d2a":"code","e334cccc":"code","b4016d9a":"code","348fb697":"code","372d54c4":"code","b1a800a8":"code","96c815cc":"markdown","0143842d":"markdown","42ce19b1":"markdown","77f45624":"markdown","7dd7e14a":"markdown","bab3559a":"markdown"},"source":{"453fba12":"import numpy as np \nimport pandas as pd\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport matplotlib.pyplot as plt\n\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import datasets, transforms","76c8ba1a":"train = pd.read_csv('..\/input\/train.csv').values\ntest = pd.read_csv('..\/input\/test.csv').values","5c5a9ebe":"''' doing inheritance from class torch.unils.data.Dataset,\n    look https:\/\/pytorch.org\/tutorials\/beginner\/data_loading_tutorial.html\n'''\nclass MNIST(Dataset):\n\n    def __init__(self, frame, train = True, transform=None):\n        \n        self.frame = frame\n        self.train = train\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.frame)\n\n    def __getitem__(self, idx):\n        if self.train:\n            image = self.frame[idx, 1: ].reshape((28, 28, 1)).astype(np.float32)\n            label = self.frame[idx, 0]\n            sample = {'image': image, 'label': label}\n            if self.transform:\n                sample['image'] = self.transform(sample['image'])\n        else:\n            image = self.frame[idx].reshape((28, 28, 1)).astype(np.float32)\n            sample = image\n            if self.transform:\n                sample = self.transform(sample)\n        \n        return sample","42b2b61c":"mnist = MNIST(frame=train, train=True, transform=transforms.Compose([transforms.ToTensor()]))\n\ndataloader = DataLoader(mnist, batch_size=8,\n                        shuffle=True, num_workers=4)","5f9b1a3c":"torch.backends.cudnn.deterministic = True\ntorch.manual_seed(42)\ntorch.cuda.manual_seed_all(42)","78b81417":"class VanilaCNN(nn.Module):\n    def __init__(self):\n        super(VanilaCNN, self).__init__()\n        self.conv1 = nn.Conv2d(1, 16, 3)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(16, 32, 3)\n        self.fc1 = nn.Linear(32 * 5 * 5, 120)\n        self.fc2 = nn.Linear(120, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 32 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.log_softmax(self.fc2(x))\n        return x","0622d1fe":"cnn = VanilaCNN()","11024de3":"import torch.optim as optim\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(cnn.parameters(), lr=0.001, momentum=0.9)","8bab9472":"import warnings\nwarnings.filterwarnings('ignore')","c5ada082":"for epoch in range(2):\n    \n    running_loss = 0.0\n    for i, data in enumerate(dataloader, 0):\n        inputs, labels = data['image'], data['label']\n        optimizer.zero_grad()\n        outputs = cnn(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        # print statistics\n        running_loss += loss.item()\n        if i % 200 == 199:    # print every 2000 mini-batches\n            print('[%d, %5d] loss: %.3f' %\n                  (epoch + 1, i + 1, running_loss \/ 200))\n            running_loss = 0.0\n\nprint('Finished Training')","2d32fc44":"cnn = VanilaCNN()\ncnn = cnn.to('cuda:0')","a090b567":"criterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(cnn.parameters(), lr=0.001, momentum=0.9)","49f1281e":"for epoch in range(1):\n    running_loss = 0.0\n    for i, data in enumerate(dataloader, 0):\n        inputs, labels = data['image'].to('cuda'), data['label'].to('cuda')\n        optimizer.zero_grad()\n        outputs = cnn(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        # print statistics\n        running_loss += loss.item()\n        if i % 200 == 199:    # print every 2000 mini-batches\n            print('[%d, %5d] loss: %.3f' %\n                  (epoch + 1, i + 1, running_loss \/ 200))\n            running_loss = 0.0\n\nprint('Finished Training')","23e26954":"mnist_test = MNIST(frame=test, train=False, transform=transforms.Compose([transforms.ToTensor()]))\n\ndataloader_test = DataLoader(mnist_test, batch_size=8,\n                        shuffle=False, num_workers=4)","95253339":"res = []\nwith torch.no_grad():\n    for i, data in enumerate(dataloader_test, 0):\n        inputs = data.to('cuda')\n        outputs = torch.exp(cnn(inputs)).argmax(dim=1).tolist()\n        res += outputs\n    print('Finished Training')   ","e014fea2":"len(res)","e6ad1752":"res = np.array(res)","b56f9815":"res = pd.DataFrame(res, columns=['Label'])\nres['ImageId'] = np.arange(1, len(res) + 1)","0b2078ac":"res = res[['ImageId', 'Label']]","296e48f8":"res.head()","bdd426ba":"example_sub = pd.read_csv('..\/input\/sample_submission.csv')","8fea2fdf":"res.to_csv('res.csv', index=False)","08c132ef":"res2 = pd.read_csv('res.csv',)","eb4b144a":"res2.head()","1c2e4cb0":"example_sub.info()","4f075d2a":"example_sub.head()","e334cccc":"!ls","b4016d9a":"import sys","348fb697":"plt.imshow(test[7].reshape((28, 28)))","372d54c4":"plt.imshow(data[7].numpy()[0, : , :])","b1a800a8":"outputs.argmax(dim=1)","96c815cc":"## Cooking dataset and dataloader","0143842d":"## Hi, here we're going to do a simple CNN PyTorch model for MNIST","42ce19b1":"## Making reproducability for our model","77f45624":"## Doing the same but on GPU to speed it up","7dd7e14a":"## Make a prediction ","bab3559a":"## And finally a model"}}