{"cell_type":{"ce5ade54":"code","efa2ec86":"code","cd416449":"code","9f1b470b":"code","4a7989ea":"code","ffa1d1df":"code","3a318919":"code","ad52fc78":"code","da23b86b":"code","a27eac62":"code","6d94369b":"code","4e0144af":"code","c91427cf":"code","1b138684":"code","00ba8295":"code","83bd34b9":"code","87235c17":"code","46d74f38":"code","8940e181":"code","3070cc21":"code","c8815160":"code","a4bb7c60":"code","97d297d9":"code","8b38705e":"code","97a64c96":"code","8539673b":"markdown","fa6969a7":"markdown","10e32220":"markdown","f3e4119a":"markdown","6ea45f97":"markdown","997e411b":"markdown","20059d57":"markdown","88c7c064":"markdown","45bdcfe8":"markdown","3de7831b":"markdown","3d8d389e":"markdown","bda08925":"markdown","ab8f0b2f":"markdown"},"source":{"ce5ade54":"!pip install openpyxl","efa2ec86":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","cd416449":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntrain","9f1b470b":"test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\ntest","4a7989ea":"l_data = pd.read_excel('..\/input\/air-quality-time-series-data-uci\/AirQualityUCI.xlsx')\nl_data.drop(columns = ['NMHC(GT)', 'NO2(GT)'], inplace = True)\n\n# Preprocessing Time Column\nl_data['hour'] = 0\nfor i in range(l_data.shape[0]):\n  l_data['hour'][i] = l_data['Time'][i].hour\n\ntime_se = l_data['Date'].dt.date - l_data['Date'].dt.date.min()\n\n# Making DataFrame to concat with train data!\nleak = pd.DataFrame({\n    'deg_C' : l_data['T'],\n    'relative_humidity' : l_data['RH'],\n    'absolute_humidity' : l_data['AH'],\n    'sensor_1' : l_data['PT08.S1(CO)'],\n    'sensor_2' : l_data['PT08.S2(NMHC)'],\n    'sensor_3' : l_data['PT08.S3(NOx)'],\n    'sensor_4' : l_data['PT08.S4(NO2)'],\n    'sensor_5' : l_data['PT08.S5(O3)'],\n    'target_carbon_monoxide' : l_data['CO(GT)'],\n    'target_benzene' : l_data['C6H6(GT)'],\n    'target_nitrogen_oxides' : l_data['NOx(GT)'],\n    'year' : l_data['Date'].dt.year,\n    'month' : l_data['Date'].dt.month,\n    'week' : l_data['Date'].dt.week,\n    'day' : l_data['Date'].dt.day,\n    'dayofweek' : l_data['Date'].dt.dayofweek,\n    'time' : time_se,\n    'hour' : l_data['hour'],\n    'working_hours' : l_data['hour'].isin(np.arange(8, 21, 1)).astype(\"int\"),\n    'is_weekend' : (l_data[\"Date\"].dt.dayofweek >= 5).astype(\"int\")\n})\nleak['time'] = leak['time'].apply(lambda x : x.days)\nleak","ffa1d1df":"all_data = pd.concat([train, test])\nall_data","3a318919":"all_data.info()","ad52fc78":"all_data['date_time'] = pd.to_datetime(all_data['date_time'])\nall_data['year'] = all_data['date_time'].dt.year\nall_data['month'] = all_data['date_time'].dt.month\nall_data['week'] = all_data['date_time'].dt.week\nall_data['day'] = all_data['date_time'].dt.day\nall_data['dayofweek'] = all_data['date_time'].dt.dayofweek\nall_data['time'] = all_data['date_time'].dt.date - all_data['date_time'].dt.date.min()\nall_data['hour'] = all_data['date_time'].dt.hour\nall_data['time'] = all_data['time'].apply(lambda x : x.days)\n# all_data[\"is_winter\"] = all_data[\"month\"].isin([1, 2, 12])\n# all_data[\"is_sprint\"] = all_data[\"month\"].isin([3, 4, 5])\n# all_data[\"is_summer\"] = all_data[\"month\"].isin([6, 7, 8])\n# all_data[\"is_autumn\"] = all_data[\"month\"].isin([9, 10, 11])\nall_data[\"working_hours\"] =  all_data[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\nall_data[\"is_weekend\"] = (all_data[\"date_time\"].dt.dayofweek >= 5).astype(\"int\")\nall_data.drop(columns = 'date_time', inplace = True)\nall_data","da23b86b":"#Outliers Preprocessing\nleak = leak.reset_index(drop = True)\nall_data = all_data.reset_index(drop = True)\n\nout_index = []\n\nfor col in leak.columns[:8]:\n    out_index.append(leak[leak[col] == -200].index)\n    \nfor i in range(8):\n    leak.loc[out_index[i], leak.columns[i]] = all_data.loc[out_index[i], leak.columns[i]]\n    \nprint('done!')","a27eac62":"all_data['dayofweek'] = all_data['dayofweek'].astype(object)\n# all_data['month_c'] = all_data['month'].astype(object)\n# all_data['hour_c'] = all_data['hour'].astype(object)\nleak['dayofweek'] = leak['dayofweek'].astype(object)","6d94369b":"all_data = pd.get_dummies(all_data)\nleak = pd.get_dummies(leak)","4e0144af":"all_data['SMC'] = (all_data['absolute_humidity'] * 100) \/ all_data['relative_humidity']\nall_data['Dew_Point'] = 243.12*(np.log(all_data['relative_humidity'] * 0.01) + (17.62 * all_data['deg_C'])\/(243.12+all_data['deg_C']))\/(17.62-(np.log(all_data['relative_humidity'] * 0.01)+17.62*all_data['deg_C']\/(243.12+all_data['deg_C'])))\n\nleak['SMC'] = (leak['absolute_humidity'] * 100) \/ leak['relative_humidity']\nleak['Dew_Point'] = 243.12*(np.log(leak['relative_humidity'] * 0.01) + (17.62 * leak['deg_C'])\/(243.12+leak['deg_C']))\/(17.62-(np.log(leak['relative_humidity'] * 0.01)+17.62*leak['deg_C']\/(243.12+leak['deg_C'])))","c91427cf":"train2 = all_data[:len(train)]\ntest2 = all_data[len(train):].reset_index(drop = True)\n\ntrain2 = pd.concat([train2, leak]).reset_index()\ntrain2.drop(columns = 'index', inplace = True)","1b138684":"def log_scaling(col):\n  col = np.log1p(col)\n  return col","00ba8295":"cols = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']\nfor col in cols:\n  train2[col] = log_scaling(train2[col])","83bd34b9":"fig, ax = plt.subplots(len(cols), 2, figsize=(12,12))\nn = 0\nfor i in cols:\n  sns.histplot(train[i], ax=ax[n, 0]);\n  sns.histplot(train2[i], ax = ax[n, 1]);\n  n += 1\n\nfig.tight_layout()\nplt.show()","87235c17":"train_3 = train2.drop(columns = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\ntest_3 = test2.drop(columns = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\n\ntrain_co = train2.drop(columns = ['target_benzene', 'target_nitrogen_oxides'])\ntrain_be = train2.drop(columns = ['target_carbon_monoxide', 'target_nitrogen_oxides'])\ntrain_no = train2.drop(columns = ['target_carbon_monoxide', 'target_benzene'])","46d74f38":"!pip install pycaret","8940e181":"from pycaret.regression import setup, compare_models, blend_models, finalize_model, predict_model, ensemble_model, create_model","3070cc21":"def pycaret_model(train, target, test, n_select, fold, opt, exclude):\n  print('Setup Your Data....')\n  setup(data=train,\n        target=target,\n        normalize = True,\n        numeric_imputation = 'mean',\n        silent= True)\n  \n  print('Comparing Models....')\n  best = compare_models(sort=opt, n_select=n_select, fold = fold, exclude = exclude)\n\n  print('Blending Models....')\n  blended = blend_models(estimator_list= best, fold=fold, optimize=opt)\n  pred_holdout = predict_model(blended)\n\n  print('Finallizing Models....')\n  final_model = finalize_model(blended)\n\n  print('Done...!!!')\n\n  pred_esb = predict_model(final_model, test)\n  re = pred_esb['Label']\n\n  return re","c8815160":"sub = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsub['target_carbon_monoxide'] = np.exp(pycaret_model(train_co, 'target_carbon_monoxide', test_3, 3, 3, 'RMSLE', ['knn', 'xgboost']))-1\nsub['target_benzene'] = np.exp(pycaret_model(train_be, 'target_benzene', test_3, 3, 3, 'RMSLE', ['knn', 'xgboost']))-1\nsub['target_nitrogen_oxides'] = np.exp(pycaret_model(train_no, 'target_nitrogen_oxides', test_3, 3, 3, 'RMSLE', ['xgboost'])) - 1","a4bb7c60":"sub","97d297d9":"leak_sub = pd.read_excel('..\/input\/air-quality-time-series-data-uci\/AirQualityUCI.xlsx')[7110:].reset_index(drop = True)\nleak_sub","8b38705e":"co_out = leak_sub[leak_sub['CO(GT)'] == -200].index\nbe_out = leak_sub[leak_sub['C6H6(GT)'] == -200].index\nni_out = leak_sub[leak_sub['NOx(GT)'] == -200].index\n\nleak_sub.loc[co_out, 'CO(GT)'] = sub.loc[co_out, 'target_carbon_monoxide']\nleak_sub.loc[be_out, 'C6H6(GT)'] = sub.loc[be_out, 'target_benzene']\nleak_sub.loc[ni_out, 'NOx(GT)'] = sub.loc[ni_out, 'target_nitrogen_oxides']\n\nsub['target_carbon_monoxide'] = leak_sub['CO(GT)']\nsub['target_benzene'] = leak_sub['C6H6(GT)']\nsub['target_nitrogen_oxides'] = leak_sub['NOx(GT)']\n\nsub","97a64c96":"sub.to_csv('sub.csv', index = 0)","8539673b":"## **DATA LOAD**","fa6969a7":"#### **Model**","10e32220":"## **Data Preprocessing**\n\n*   There are only numeric columns\n*   Maybe need to use linear regression!!\n\n","f3e4119a":"## **Library Import**","6ea45f97":"## **Modeling**","997e411b":"#### **Compare with Visualization**","20059d57":"### **Datetime Preprocessing**","88c7c064":"#### **Predict Result**","45bdcfe8":"# **TPS - July 2021**\n\n## **[Check Here](https:\/\/www.kaggle.com\/junhyeok99\/eda-leaked-data) For Leaked Data EDA !!**","3de7831b":"#### **Scaler**","3d8d389e":"### **Scaling**\n\n#### **Log Scaling - Target values are skewed**","bda08925":"### **Split DataSets**","ab8f0b2f":"### **Pycaret**"}}