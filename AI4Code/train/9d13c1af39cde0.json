{"cell_type":{"24f6947d":"code","6d125af6":"code","a17516dd":"code","959d34ae":"code","8ce99086":"code","5a5e8853":"code","b6c0f1db":"code","a5288374":"code","ae27ee0d":"code","26d7235b":"code","4cadeb2f":"code","ac96da2f":"code","c95d24ce":"code","c1275751":"code","9f0b674c":"code","6671c253":"code","8e4f1376":"code","d70ae973":"code","a061cb33":"code","03334fbf":"code","9d062735":"code","7a34787a":"code","4c5741c6":"code","296f02cf":"code","3d3688d7":"code","14ee6673":"code","b7576ff1":"code","f44e270c":"code","80b00860":"code","0efd4184":"code","d81bbcad":"code","cbb97d59":"code","4c5c8e61":"markdown","59f906e1":"markdown","12c2dd1f":"markdown","a7f899a7":"markdown","6fd75da4":"markdown","c542e100":"markdown","647c5943":"markdown","216b99e6":"markdown","aa915361":"markdown","81e92b3c":"markdown","ad049088":"markdown","59494e35":"markdown"},"source":{"24f6947d":"import os\n# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly\n# connected=True means it will download the latest version of plotly javascript library.\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport plotly.figure_factory as ff\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nprint(os.listdir(\"..\/input\"))\n","6d125af6":"# A nice way to tidy the notebook - borrowed from - Lavanya Gupta https:\/\/www.kaggle.com\/lava18\/all-that-you-need-to-know-about-the-android-market\n# But quite like the default Kaggle\n\"\"\"from IPython.display import HTML\nHTML('''\n<script>\n  function code_toggle() {\n    if (code_shown){\n      $('div.input').hide('500');\n      $('#toggleButton').val('Show Code')\n    } else {\n      $('div.input').show('500');\n      $('#toggleButton').val('Hide Code')\n    }\n    code_shown = !code_shown\n  }\n\n  $( document ).ready(function(){\n    code_shown=false;\n    $('div.input').hide()\n  });\n<\/script>\n<form action=\"javascript:code_toggle()\"><input type=\"submit\" id=\"toggleButton\" value=\"Show Code\"><\/form>''')\n\"\"\"","a17516dd":"apps_df = pd.read_csv('..\/input\/googleplaystore.csv')\nprint('App table columns and data \\n')\nprint(apps_df.columns.values)\napps_df.head()","959d34ae":"reviews_df = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')\nprint('Review table columns and data \\n')\nprint(reviews_df.columns.values)\nreviews_df.head()","8ce99086":"print('Show then describe the App and Review tables\\n')\napps_df.info()\nprint('_'*40)\nreviews_df.info()","5a5e8853":"print('Describe the numerical values of the App table')\napps_df.describe()\n","b6c0f1db":"print('Describe the non-numberical data of the App table')\napps_df.describe(include=['O'])","a5288374":"print('Describe the numerical values of the Review table')\nreviews_df.describe()\n# Polarity is between -1 and 1 the average is 0.182\n# Subjectivity is between 0 and 1 with the mean at 0.492","ae27ee0d":"print('Describe the non-numberical data of the review table')\nreviews_df.describe(include=['O'])","26d7235b":"print('Cleaning data before we go ahead and drop rows with empty cells')\n# - Installs : Remove + and , from - Lavanya Gupta\napps_df = apps_df[apps_df['Installs'] != 'Free'] # Data in the wrong column\napps_df = apps_df[apps_df['Installs'] != 'Paid'] # Data in the wrong column\n\napps_df['Installs'] = apps_df['Installs'].apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\napps_df['Installs'] = apps_df['Installs'].apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\napps_df['Installs'] = apps_df['Installs'].apply(lambda x: int(x))\n#print(type(apps_df['Installs'].values))","4cadeb2f":"# - Size : Remove 'M', Replace 'k' and divide by 10^-3\n#df['Size'] = df['Size'].fillna(0)\n\napps_df['Size'] = apps_df['Size'].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\n\napps_df['Size'] = apps_df['Size'].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\napps_df['Size'] = apps_df['Size'].apply(lambda x: str(x).replace(',', '') if 'M' in str(x) else x)\napps_df['Size'] = apps_df['Size'].apply(lambda x: float(str(x).replace('k', '')) \/ 1000 if 'k' in str(x) else x)\n\n\napps_df['Size'] = apps_df['Size'].apply(lambda x: float(x))\napps_df['Installs'] = apps_df['Installs'].apply(lambda x: float(x))\n\napps_df['Price'] = apps_df['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\napps_df['Price'] = apps_df['Price'].apply(lambda x: float(x))\n\napps_df['Reviews'] = apps_df['Reviews'].apply(lambda x: int(x))\n","ac96da2f":"print('App Table')\nprint('* Renaming the column with a space')\nprint('* Identifying the rows with empty cells (thanks lastnight)')\napps_df=apps_df.rename(columns = {'Content Rating':'Content_Rating'})\n#missing data (borrowed from lastnight https:\/\/www.kaggle.com\/tanetboss\/how-to-get-high-rating-on-play-store)\ntotal = apps_df.isnull().sum().sort_values(ascending=False)\npercent = (apps_df.isnull().sum()\/apps_df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(6)\n","c95d24ce":"print('Removing the rows with empty cells')\napps_df.dropna(how ='any', inplace = True)","c1275751":"print('Review Table')\nprint('* Renaming the column with a space')\nprint('* Identifying the rows with empty cells (thanks lastnight)')\n#missing data\ntotal = reviews_df.isnull().sum().sort_values(ascending=False)\npercent = (reviews_df.isnull().sum()\/reviews_df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(6)","9f0b674c":"reviews_df.dropna(how ='any', inplace = True)\nprint('Describe the cleaned App and Review tables\\n')\napps_df.info()\nprint('_'*40)\nreviews_df.info()\n","6671c253":"apps_df[['Category', 'Rating']].groupby(['Category'], as_index=False).mean().sort_values(by='Rating', ascending=False)","8e4f1376":"apps_df[['Installs', 'Rating']].groupby(['Installs'], as_index=False).mean().sort_values(by='Rating', ascending=False)","d70ae973":"apps_df[['Type', 'Rating']].groupby(['Type'], as_index=False).mean().sort_values(by='Rating', ascending=False)","a061cb33":"apps_df[['Content_Rating', 'Rating']].groupby(['Content_Rating'], as_index=False).mean().sort_values(by='Rating', ascending=False)","03334fbf":"apps_df[['Genres', 'Rating']].groupby(['Genres'], as_index=False).mean().sort_values(by='Rating', ascending=False)","9d062735":"apps_reviews_df = pd.merge(apps_df, reviews_df, on='App')","7a34787a":"apps_reviews_df.head()","4c5741c6":"apps_reviews_df[['Category', 'Sentiment_Polarity','Sentiment_Subjectivity']].groupby(['Category'], as_index=False).mean().sort_values(by='Sentiment_Polarity', ascending=False)","296f02cf":"apps_reviews_df[['Category','Sentiment_Subjectivity', 'Sentiment_Polarity']].groupby(['Category'], as_index=False).mean().sort_values(by='Sentiment_Subjectivity', ascending=False)","3d3688d7":"apps_reviews_df[['Installs', 'Sentiment_Polarity','Sentiment_Subjectivity']].groupby(['Installs'], as_index=False).mean().sort_values(by='Sentiment_Polarity', ascending=False)","14ee6673":"apps_reviews_df[['Type', 'Sentiment_Polarity','Sentiment_Subjectivity']].groupby(['Type'], as_index=False).mean().sort_values(by='Sentiment_Polarity', ascending=False)","b7576ff1":"apps_reviews_df[['Content_Rating', 'Sentiment_Polarity','Sentiment_Subjectivity']].groupby(['Content_Rating'], as_index=False).mean().sort_values(by='Sentiment_Polarity', ascending=False)","f44e270c":"apps_reviews_df[['Genres', 'Sentiment_Polarity','Sentiment_Subjectivity']].groupby(['Genres'], as_index=False).mean().sort_values(by='Sentiment_Polarity', ascending=False)","80b00860":"x = apps_df['Rating'].dropna()\ny = apps_df['Size'].dropna()\nz = apps_df['Installs'][apps_df.Installs!=0].dropna()\np = apps_df['Reviews'][apps_df.Reviews!=0].dropna()\nt = apps_df['Type'].dropna()\nprice = apps_df['Price']\n\nplot = sns.pairplot(pd.DataFrame(list(zip(x, y, np.log(z), np.log10(p), t, price)), \n                        columns=['Rating','Size', 'Installs (log)', 'Reviews (log)', 'Type', 'Price']), hue='Type', palette=\"Set2\")","0efd4184":"groups = apps_df.groupby('Category').filter(lambda x: len(x) >= 170).reset_index()\n#print(type(groups.item.['BUSINESS']))\nprint('Average rating = ', np.nanmean(list(groups.Rating)))\n#print(len(groups.loc[df.Category == 'DATING']))\nc = ['hsl('+str(h)+',50%'+',50%)' for h in np.linspace(0, 720, len(set(groups.Category)))]\n\n\n#df_sorted = df.groupby('Category').agg({'Rating':'median'}).reset_index().sort_values(by='Rating', ascending=False)\n#print(df_sorted)\n\nlayout = {'title' : 'App ratings across major categories',\n        'xaxis': {'tickangle':-40},\n        'yaxis': {'title': 'Rating'},\n          'plot_bgcolor': 'rgb(250,250,250)',\n          'shapes': [{\n              'type' :'line',\n              'x0': -.5,\n              'y0': np.nanmean(list(groups.Rating)),\n              'x1': 19,\n              'y1': np.nanmean(list(groups.Rating)),\n              'line': { 'dash': 'dashdot'}\n          }]\n          }\n\ndata = [{\n    'y': apps_df.loc[apps_df.Category==category]['Rating'], \n    'type':'violin',\n    'name' : category,\n    'showlegend':False,\n    #'marker': {'color': 'Set2'},\n    } for i,category in enumerate(list(set(groups.Category)))]\n\nplotly.offline.iplot({'data': data, 'layout': layout})","d81bbcad":"# by Lavanya Gupta\n\ngrouped_sentiment_category_count = apps_reviews_df.groupby(['Category', 'Sentiment']).agg({'App': 'count'}).reset_index()\ngrouped_sentiment_category_sum = apps_reviews_df.groupby(['Category']).agg({'Sentiment': 'count'}).reset_index()\n\nnew_df = pd.merge(grouped_sentiment_category_count, grouped_sentiment_category_sum, on=[\"Category\"])\n#print(new_df)\nnew_df['Sentiment_Normalized'] = new_df.App\/new_df.Sentiment_y\nnew_df = new_df.groupby('Category').filter(lambda x: len(x) ==3)\n# new_df = new_df[new_df.Category.isin(['HEALTH_AND_FITNESS', 'GAME', 'FAMILY', 'EDUCATION', 'COMMUNICATION', \n#                                      'ENTERTAINMENT', 'TOOLS', 'SOCIAL', 'TRAVEL_AND_LOCAL'])]\nnew_df\n\ntrace1 = go.Bar(\n    x=list(new_df.Category[::3])[6:-5],\n    y= new_df.Sentiment_Normalized[::3][6:-5],\n    name='Negative',\n    marker=dict(color = 'rgb(209,49,20)')\n)\n\ntrace2 = go.Bar(\n    x=list(new_df.Category[::3])[6:-5],\n    y= new_df.Sentiment_Normalized[1::3][6:-5],\n    name='Neutral',\n    marker=dict(color = 'rgb(49,130,189)')\n)\n\ntrace3 = go.Bar(\n    x=list(new_df.Category[::3])[6:-5],\n    y= new_df.Sentiment_Normalized[2::3][6:-5],\n    name='Positive',\n    marker=dict(color = 'rgb(49,189,120)')\n)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    title = 'Sentiment analysis',\n    barmode='stack',\n    xaxis = {'tickangle': -45},\n    yaxis = {'title': 'Fraction of reviews'}\n)\n\nfig = go.Figure(data=data, layout=layout)\n\nplotly.offline.iplot({'data': data, 'layout': layout})","cbb97d59":"# by Lavanya Gupta\n\nfrom wordcloud import WordCloud\nwc = WordCloud(background_color=\"white\", max_words=200, colormap=\"Set2\")\n# generate word cloud\n\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\nstop = stop + ['app', 'APP' ,'ap', 'App', 'apps', 'application', 'browser', 'website', 'websites', 'chrome', 'click', 'web', 'ip', 'address',\n            'files', 'android', 'browse', 'service', 'use', 'one', 'download', 'email', 'Launcher']\n\n#merged_df = merged_df.dropna(subset=['Translated_Review'])\napps_reviews_df['Translated_Review'] = apps_reviews_df['Translated_Review'].apply(lambda x: \" \".join(x for x in str(x).split(' ') if x not in stop))\n#print(any(merged_df.Translated_Review.isna()))\napps_reviews_df.Translated_Review = apps_reviews_df.Translated_Review.apply(lambda x: x if 'app' not in x.split(' ') else np.nan)\napps_reviews_df.dropna(subset=['Translated_Review'], inplace=True)\n\n\nfree = apps_reviews_df.loc[apps_reviews_df.Type=='Free']['Translated_Review'].apply(lambda x: '' if x=='nan' else x)\nwc.generate(''.join(str(free)))\nplt.figure(figsize=(10, 10))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","4c5c8e61":"### Analysing the review data with the pivot\nTo do this we need to take the apps data that has the categories and apply a left join with the review data on the app names - this will allow us to look at the sentiment analysis around the views - potentially still using the rating too.\n* Comics have the most positive reviews that correlates with the high average rating, the reviews were the most subjective\n* Parents apps also have positive reviws even though they were at the bottom of the average rating\n* At the bottom is Social and Games with neutral comments\n* The business reviews were the least subjective\n* In general it appears that the more installs there are the less positive the reviews, the subjectivity tends to decrease too.\n* Paid apps have better reviews on average\n* Adults only content receives more positive reviews, teen content recieve less positive reviews\n* Comics and creative has the best reviews, Role play is the only one that recieves on average negative sentiment\n\nMy guesses at this stage.\nThere's a weak correlation between rating and sentiment polatity that gets weeker with the number of installs","59f906e1":"### Looking at the data with a pivot table\n* Very high rating alone might not tell you the whole story - the one app with a rating of 5 was downloaded once\n* Dating apps do not recieve a high rating on average\n* Tools maybe the most common category, hoever they don't rate well\n* Events, Education, arts\/design and books\/reference get good ratings\n* Apps with less than 50 downloads have the highest rating\n* Apps with a few thousand have a lower average rating... suggesting they may have hit their peak\n* Paid apps generally have a better rating\n* Adults only content rating has the highest average rating and unrated the lowest\n* Genres - Comic\/ creative, board\/pretend play have the highest average rating while parenting apps get the lowest \n","12c2dd1f":"### WORDCLOUD\nShowing some of the words that frequently appear in the reviews (by Lavanya Gupta)","a7f899a7":"### In apps_df\n#### Which features are categorical?\n* Category\n* Type\n* Content Rating\n* Genres\n* Current Ver\n* Android Ver\n\n#### Which features are numerical?\n* Rating\n\n#### Which values are dates or mixed data?\n* Size (we can convert this to a number)\n* Reviews (we can convert this to a number)\n* Installs (we can convert this to a number)\n* Price (we can convert this to a number)\n* Last Updated (a date value)\n\n### In reviews_df\n#### Which features are categorical?\n* Sentiment\n\n#### Which features are numerical?\n* Sentiment_Polarity\n* Sentiment_Subjectivity\n\n#### Which values are dates or mixed data?\n* Translated_Review\n\n","6fd75da4":"# My first kernel\nThis my first attempt at a Kernel, I started with trying some of the techniques in on of the Titanic Tutorial and then tried to look a bit deeper at some of the parts of the data that looked interesting before borrowing from the community and looking how other people had analysed and visualed the data.\n\n## Acquire data\nGetting the open dataset and importing the essential libaries to look at the data","c542e100":"### Violin plot\nAnother lovely plot by Lavanya Gupta\n* Health and Fitness and Games perform best\n* Dating catergory does not perfomr well\n* Lifestyle, Family and Finance have some very low ratings \n","647c5943":"## Exploratory Data Analysis\nEDA - a new acronym for me - again thanks to the work by Lavanya Gupta https:\/\/www.kaggle.com\/lava18\/all-that-you-need-to-know-about-the-android-market\n\n* Rating for free and paid are distrubuted similarly and skewed to high ratings\n* Most applications are small\n* More free apps are installed than paid\n* Most paid apps are cheap, however there are a couple of very expensive apps ~   $350 & $400\n* Ratings are generally better for paid apps that are small\n* There are less installs and less reviews for paid apps\n* The more installs there are... the more reviews there are\n\n","216b99e6":"### Distribution of the numerical values\n#### Apps -> Rating\n* Rating is the only numeric in apps_df \n* the Average is 4.19 \n* The distribution seems to be between 1 and 5\n* there appears to be incorrect values at there's a max of 19 \n\n#### Review \n* Polarity is between -1 and 1 the average is 0.182\n* Subjectivity is between 0 and 1 with the mean at 0.492","aa915361":"### What is the distribution of categorical features?\n#### Apps \n* App - there are around about 500 apps with the same name \/ dupicate records - there are 9 ROBLOX apps\n* Category - there are 34 categories - Family is the most popular with almost 2000 family apps\n* Reviews - around 60% have reviews\n* Size - there are 462 representations of size - this could be corrected to a numeric value - there are over 1500 that have a different size for different devices so the size is not recorded\n* Installs there are 22 categories \/ levels of installs - most are 1,000,000+\n* Most Apps fall in the free category & there are only 3 types of app\n* There are 6 types of category rating - Most are for \"everyone\"\n* There are 120 Genres - the most popular is tools\n* Most apps were updated on the 3rd of August 2018... an ever moving number I am sure\n* Like with size the version often varies with device\n* Most apps are built for 4.1 and up although there are 33 other noted versions\n#### Reviews\n* 1074 Apps have reviews\n* The most common comment is \"Good\"\n* There are three measure of sentiment, most are positive which is just over half of them","81e92b3c":"### Which features contain blank, null or empty values?\n* apps_df -> Rating has about 10% blanks\n* apps_df -> Type has a single value missing\n* apps_df -> Content Rating has a single value missing\n* apps_df -> Current Ver has less than 10 values missing\n* apps_df -> Android Ver has less than 10 values missing\n* reviews_df ->  Translated_Review about 50% have values 37427 \/ 64295\n* reviews_df -> Sentiment about 50% have values 37432 \/ 64295\n* reviews_df -> Sentiment_Polarity about 50% have values 37432 \/ 64295\n* reviews_df -> Sentiment_Subjectivity about 50% have values 37432 \/ 64295","ad049088":"### Sentiment analysis of the categories","59494e35":"## Describing the data\n### What does the data look like"}}