{"cell_type":{"5813b442":"code","377bbe67":"code","63934865":"code","37ae0589":"code","a1c2289c":"code","43d6de65":"code","1804eaae":"code","28a2c7ed":"code","fff33661":"code","322de25d":"code","1ca166bc":"code","0ae0a921":"code","77d78a4f":"code","72a56435":"code","0768e725":"code","73e44cbe":"code","709c708a":"code","69a44ad1":"code","c137ab85":"code","2bb92332":"code","93617bf1":"code","ee18da10":"code","d85fd37a":"code","71ed7903":"code","a77f3699":"code","fda68b9c":"code","89343740":"code","67962a80":"code","a1c0aa87":"code","71570ebc":"code","01e0a301":"code","7ef193e2":"code","d8796bac":"code","0d484236":"code","af7648d6":"code","520dc77a":"code","3ab1adc9":"code","c67ec572":"code","dfc084c5":"code","9b9e3faa":"code","24f68fbf":"code","b5c93840":"code","eb0f3652":"code","1bfcb294":"code","92b12611":"code","8859c1cd":"code","8a2aa27e":"code","2fd37f23":"code","40ef7937":"code","3436a5bc":"code","7ebe2ab6":"code","1037e5f4":"code","7b87c821":"code","2a85dbf7":"code","27d925a4":"code","1368f0c9":"code","4c0cfe9c":"code","ac9e42bd":"code","e4936567":"code","0f54c9cc":"code","75d076dc":"code","b784d499":"code","c7045269":"code","0e94f48e":"code","0126039f":"code","878dbf1e":"code","e6aeb60c":"code","7f2cfcf3":"code","969a505b":"code","1ef625d0":"code","89783e5b":"code","f33eb08e":"code","786e832d":"code","397e4640":"code","a75e2966":"code","2186a1f3":"code","08a279b4":"markdown"},"source":{"5813b442":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nimport os\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nlbl = LabelEncoder()\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\n%matplotlib inline","377bbe67":"path = '..\/input\/champs-scalar-coupling\/'","63934865":"train = pd.read_csv(path+'\/train.csv')\ntest = pd.read_csv(path+'test.csv')","37ae0589":"train.head()","a1c2289c":"train.shape","43d6de65":"plt.figure(figsize=(8,6))\nsns.countplot(train['type'])\nplt.show()","1804eaae":"plt.figure(figsize=(8,6))\nsns.countplot(train['atom_index_0'])\nplt.show()","28a2c7ed":"plt.figure(figsize=(8,6))\nsns.countplot(train['atom_index_1'])\nplt.show()","fff33661":"train = train.sample(frac=0.09, random_state=5)","322de25d":"test = pd.read_csv(path+'\/test.csv')","1ca166bc":"potential_energy = pd.read_csv(path+'\/potential_energy.csv')","0ae0a921":"train.head(5)","77d78a4f":"pd.isnull(train).sum()","72a56435":"train['type'].unique()","0768e725":"train[['type','scalar_coupling_constant']].groupby(['type'], as_index=False ).mean().sort_values(by='scalar_coupling_constant', ascending=True)","73e44cbe":"train[['atom_index_0','scalar_coupling_constant']].groupby(['atom_index_0'], as_index=False ).mean().sort_values(by='scalar_coupling_constant', ascending=True)","709c708a":"train[['atom_index_1','scalar_coupling_constant']].groupby(['atom_index_1'], as_index=False ).mean().sort_values(by='scalar_coupling_constant', ascending=True)","69a44ad1":"for col in train['type'].unique():\n    sns.distplot(train[train['type'] == col]['scalar_coupling_constant'])\n    plt.show()\n    #print(col)","c137ab85":"potential_energy.head(5)","2bb92332":"potential_energy.isnull().sum()","93617bf1":"train  = pd.merge(train, potential_energy, how='left', on='molecule_name', right_index=False)\ntest  = pd.merge(test, potential_energy, how='left', on='molecule_name', right_index=False )","ee18da10":"#test  = pd.merge(test, potential_energy, how='left', on='molecule_name')","d85fd37a":"train.head(5)","71ed7903":"train = train[['id','molecule_name','atom_index_0','atom_index_1','type','potential_energy','scalar_coupling_constant']]","a77f3699":"structures = pd.read_csv(path+'\/structures.csv')","fda68b9c":"train.columns","89343740":"train['atom1'] = train['type'].str[2]\ntest['atom1'] = test['type'].str[2]","67962a80":"train['atom2'] = train['type'].str[3]\ntest['atom2'] = test['type'].str[3]","a1c0aa87":"train['coupling_type'] = train['type'].str[0:2]\ntest['coupling_type'] = test['type'].str[0:2]","71570ebc":"train.isnull().sum()","01e0a301":"structures.rename(columns={'x':'x1','y':'y1','z':'z1'}, inplace=True)\nstructures.head()","7ef193e2":"train = pd.merge(train, structures, how ='left', left_on=['molecule_name', 'atom_index_0','atom1'], right_on=['molecule_name', 'atom_index','atom'], right_index=False)\ntest = pd.merge(test, structures, how ='left', left_on=['molecule_name', 'atom_index_0','atom1'], right_on=['molecule_name', 'atom_index','atom'], right_index=False)","d8796bac":"structures.rename(columns={'x1':'x2','y1':'y2','z1':'z2'}, inplace=True)","0d484236":"train = pd.merge(train, structures, how ='left', left_on=['molecule_name', 'atom_index_1','atom2'], right_on=['molecule_name', 'atom_index','atom'], right_index=False)\ntest = pd.merge(test, structures, how ='left', left_on=['molecule_name', 'atom_index_1','atom2'], right_on=['molecule_name', 'atom_index','atom'], right_index=False)","af7648d6":"train['x2-x1'] = train['x2']-train['x1']\ntrain['y2-y1'] = train['y2']-train['y1']\ntrain['z2-z1'] = train['z2']-train['z1']\n\ntest['x2-x1'] = test['x2']-test['x1']\ntest['y2-y1'] = test['y2']-test['y1']\ntest['z2-z1'] = test['z2']-test['z1']","520dc77a":"train['pow(x2-x1)'] = train['x2-x1']**2\ntrain['pow(y2-y1)'] = train['y2-y1']**2\ntrain['pow(z2-z1)'] = train['z2-z1']**2\n\ntest['pow(x2-x1)'] = test['x2-x1']**2\ntest['pow(y2-y1)'] = test['y2-y1']**2\ntest['pow(z2-z1)'] = test['z2-z1']**2","3ab1adc9":"train['pow(x2-x1)+pow(y2-y1)+pow(z2-z1)'] = train['pow(x2-x1)']+train['pow(y2-y1)']+train['pow(z2-z1)']\n\ntest['pow(x2-x1)+pow(y2-y1)+pow(z2-z1)'] = test['pow(x2-x1)']+test['pow(y2-y1)']+test['pow(z2-z1)']","c67ec572":"train['distance'] = np.sqrt(train['pow(x2-x1)+pow(y2-y1)+pow(z2-z1)'])\n\ntest['distance'] = np.sqrt(test['pow(x2-x1)+pow(y2-y1)+pow(z2-z1)'])","dfc084c5":"train.columns","9b9e3faa":"print(os.listdir(path))","24f68fbf":"mulliken_charges = pd.read_csv(path+'\/mulliken_charges.csv')","b5c93840":"mulliken_charges.head()","eb0f3652":"train = pd.merge(train, mulliken_charges, how='left', left_on=['molecule_name', 'atom_index_0'], right_on=['molecule_name','atom_index'], right_index=False)\n\ntest = pd.merge(test, mulliken_charges, how='left', left_on=['molecule_name', 'atom_index_0'], right_on=['molecule_name','atom_index'], right_index=False)","1bfcb294":"train.rename(columns ={'mulliken_charge':'mulliken_charge_0'}, inplace=True)","92b12611":"train = pd.merge(train, mulliken_charges, how='left', left_on=['molecule_name', 'atom_index_1'], right_on=['molecule_name','atom_index'], right_index=False)\n\ntest = pd.merge(test, mulliken_charges, how='left', left_on=['molecule_name', 'atom_index_1'], right_on=['molecule_name','atom_index'], right_index=False)","8859c1cd":"train.rename(columns ={'mulliken_charge':'mulliken_charge_1'}, inplace=True)","8a2aa27e":"sc_contributions = pd.read_csv(path+'\/scalar_coupling_contributions.csv')","2fd37f23":"train = pd.merge(train, sc_contributions, how='left', left_on=['molecule_name', 'atom_index_0', 'atom_index_1', 'type'], right_on=['molecule_name', 'atom_index_0', 'atom_index_1', 'type'], right_index=False)\n\ntest = pd.merge(test, sc_contributions, how='left', left_on=['molecule_name', 'atom_index_0', 'atom_index_1', 'type'], right_on=['molecule_name', 'atom_index_0', 'atom_index_1', 'type'], right_index=False)","40ef7937":"dipole_moments = pd.read_csv(path+'\/dipole_moments.csv')","3436a5bc":"dipole_moments.head()","7ebe2ab6":"train = pd.merge(train, dipole_moments, how='left', left_on=['molecule_name'], right_on=['molecule_name'], right_index=False)\n\ntest = pd.merge(test, dipole_moments, how='left', left_on=['molecule_name'], right_on=['molecule_name'], right_index=False)","1037e5f4":"train.head()","7b87c821":"ms_tensors = pd.read_csv(path+'\/magnetic_shielding_tensors.csv')","2a85dbf7":"ms_tensors.head()","27d925a4":"train[['atom1','scalar_coupling_constant']].groupby(['atom1'], as_index=False ).mean().sort_values(by='scalar_coupling_constant', ascending=True)","1368f0c9":"train[['atom2','scalar_coupling_constant']].groupby(['atom2'], as_index=False ).mean().sort_values(by='scalar_coupling_constant', ascending=True)","4c0cfe9c":"train[['coupling_type','scalar_coupling_constant']].groupby(['coupling_type'], as_index=False ).mean().sort_values(by='scalar_coupling_constant', ascending=True)","ac9e42bd":"train1 = train.copy()","e4936567":"train1['atom1'] = lbl.fit_transform(train1['atom1'])\n\ntest['atom1'] = lbl.fit_transform(test['atom1'])","0f54c9cc":"train1['atom2'] = lbl.fit_transform(train1['atom2'])\n\ntest['atom2'] = lbl.fit_transform(test['atom2'])","75d076dc":"train1['coupling_type'] = lbl.fit_transform(train1['coupling_type'])\n\ntest['coupling_type'] = lbl.fit_transform(test['coupling_type'])","b784d499":"train1['potential_energy'] = lbl.fit_transform(train1['potential_energy'])\n\ntest['potential_energy'] = lbl.fit_transform(test['potential_energy'])","c7045269":"#train1['scalar_coupling_constant'] = lbl.fit_transform(train1['scalar_coupling_constant'])","0e94f48e":"train1.head()","0126039f":"X = np.array(train1[['atom_index_0', 'atom_index_1', 'atom1','atom2', 'coupling_type', 'potential_energy']])\nY = np.array(train1['scalar_coupling_constant'])","878dbf1e":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.999900, random_state=52)","e6aeb60c":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","7f2cfcf3":"model_name = []\nmodel_score =[]","969a505b":"'''linsvc = LinearSVC()\nlinsvc.fit(X_train,Y_train)\nlinsvc_score = round(linsvc.score(X_train,Y_train)*100, 2)\nmodel_name.append('LinearSVC')\nmodel_score.append(linsvc_score)\nlinsvc_score'''\n","1ef625d0":"'''svc = SVC()\nsvc.fit(X_train,Y_train)\nsvc_score = round(svc.score(X_train,Y_train)*100, 2)\nmodel_name.append('SVC')\nmodel_score.append(svc_score)\nsvc_score'''","89783e5b":"'''kneighbors = KNeighborsClassifier()\nkneighbors.fit(X_train,Y_train)\nkneighbors_score = round(kneighbors.score(X_train,Y_train)*100, 2)\nmodel_name.append('KNeighborsClassifier')\nmodel_score.append(kneighbors_score)\nkneighbors_score'''","f33eb08e":"randomforest = RandomForestRegressor()\nrandomforest.fit(X_train,Y_train)\nrandomforest_score = round(randomforest.score(X_train,Y_train)*100, 2)\nmodel_name.append('RandomForestRegressor')\nmodel_score.append(randomforest_score)\nrandomforest_score","786e832d":"gradient = GradientBoostingRegressor()\ngradient.fit(X_train,Y_train)\ngradient_score = round(gradient.score(X_train,Y_train)*100, 2)\nmodel_name.append('GradientBoostingRegressor')\nmodel_score.append(gradient_score)\ngradient_score","397e4640":"all_score = pd.DataFrame({'model_name':model_name, 'model_score':model_score})\nall_score","a75e2966":"selected_col = ['atom_index_0', 'atom_index_1', 'atom1','atom2', 'coupling_type', 'potential_energy']\n\npredict_result = randomforest.predict(test[selected_col])","2186a1f3":"submission = pd.DataFrame({'id':test['id'], 'scalar_coupling_constant':predict_result})\nsubmission.to_csv('my_submission.csv', index=False)","08a279b4":"I am using only 5% train data set. I have not find out any missing values and duplicate rows (All Columns). There are duplicate values in single column. \n\n\nI am just start yet kaggle compitition so i don't wish to win this compition but if you like this karnel please up vote me or any suggestion please comment me also notifiy my misstake.\n\n### This kernel is not completed !\n\n## Workflow stages\n<ol>\n    <li>Visualize, Explore the data <\/li>\n    <li> Model, predict <\/li>\n    <li> Supply or submit the results.<\/li>\n<ol>\n"}}