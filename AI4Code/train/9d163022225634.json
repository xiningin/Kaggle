{"cell_type":{"3061b2a0":"code","7f319ee4":"code","b63032f6":"code","ef3f586d":"code","7af1dba8":"code","2e76e9ac":"code","9fcd51e5":"code","91bb7111":"code","e104c865":"code","a885a4d7":"code","341fbce7":"code","763a9733":"code","2f064ec6":"code","7bb5cd15":"code","c46f3c05":"code","30a35030":"code","33d9a13b":"code","78f7ad7d":"code","6238e439":"code","ec76bf44":"code","d6a3b533":"code","5d66fcc6":"code","b5b7000c":"code","40bc512b":"code","09571c5a":"code","21595b4d":"code","7c4e14e7":"code","7751aab4":"code","b08d672f":"code","14bbfbf4":"code","abf203af":"code","b652654a":"code","c251a5ca":"code","0578b8fc":"markdown","aeed3b70":"markdown","827d76bf":"markdown","dfa12eb8":"markdown","b5b8c696":"markdown","bb789168":"markdown","b54f5385":"markdown","b75362b2":"markdown"},"source":{"3061b2a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns #a virtualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7f319ee4":"data = pd.read_csv(\"..\/input\/BlackFriday.csv\")","b63032f6":"#top 5 rows from the dataset\ndata.head()","ef3f586d":"#after loading our data let's see some information about our data\ndata.info()","7af1dba8":"#check if dataset has any NaN value\ndata.isnull().sum()","2e76e9ac":"#we can fill our NaN values.\ndata.fillna(data['Product_Category_1'].dropna().median(), inplace = True)\ndata.fillna(data['Product_Category_2'].dropna().median(), inplace = True)","9fcd51e5":"data.isnull().sum()\n#now our dataframe has 0 null values. ","91bb7111":"#we can drop User_ID, Product_ID from the dataset. \ndata = data.drop([\"User_ID\", \"Product_ID\"], axis = 1)","e104c865":"f,ax = plt.subplots(figsize = (18, 18))\nsns.heatmap(data.corr(), annot = True, linewidths = 1, fmt = \".1f\", ax = ax)\nplt.show()","a885a4d7":"#we can see our data's count, max, min values as well as lower, 50 and upper percentiles with the help of describe function\ndata.describe()\n","341fbce7":"def bargraph(xvalue, yvalue, data):\n    sns.barplot(x = xvalue, y = yvalue, data = data)","763a9733":"bargraph(\"Gender\", \"Purchase\", data)\n#males have bought more than female in black friday","2f064ec6":"bargraph(\"Marital_Status\", \"Purchase\", data)\n#married and single people have bought same quantity of items.","7bb5cd15":"bargraph(\"City_Category\", \"Purchase\", data)","c46f3c05":"fig1, ax1 = plt.subplots(figsize=(12,7))\nsns.set(style=\"darkgrid\")\nsns.countplot(data['Age'],hue=data['Gender'])\nplt.show()","30a35030":"#remove + sign from Stay_In_Current_City colums\ndata.Stay_In_Current_City_Years = data.Stay_In_Current_City_Years.str.replace('+', '')\n","33d9a13b":"#remove + sign from Age\ndata.Age = data.Age.str.replace('+', '')\n","78f7ad7d":"#we can use & symbol for logical and operation\ndata[(data['Purchase'] > 20000) & (data['Gender'] == 'F')]","6238e439":"#or we can use logical_and from numpy library\ndata[np.logical_and(data['Purchase'] > 20000, data['Gender'] == 'M')]","ec76bf44":"data.loc[:50, ['Product_Category_1', 'Product_Category_2', 'Product_Category_3', 'Gender']]","d6a3b533":"gender_mapping = {'M' : 0, 'F' : 1}\ndata['Gender'] = data['Gender'].map(gender_mapping)\ndata.head(10)\n","5d66fcc6":"#frequency of Product 1\nprint(data['Product_Category_1'].value_counts(dropna = False)) #if there are NaN values that also be counted","b5b7000c":"#frequency of Product 2\nprint(data['Product_Category_2'].value_counts(dropna = False))\n","40bc512b":"#frequency of Product 3\nprint(data['Product_Category_3'].value_counts(dropna = False))","09571c5a":"data.boxplot(column = 'Purchase', by='Product_Category_1')","21595b4d":"data.boxplot(column = 'Purchase', by = 'Product_Category_2')","7c4e14e7":"data.boxplot(column = 'Purchase', by = 'Product_Category_3')","7751aab4":"#categorize city \ncity_mapping = {'A': 0, 'B': 1, 'C': 2}\ndata['City_Category'] = data['City_Category'].map(city_mapping)\ndata.head(10)","b08d672f":"#list comprehension\ndata['Age'] = [0 if i == \"0-17\" else 1 if i == \"18-25\" else 2 if i == \"26-35\" else 3 if i == \"36-45\" else 4 if i == \"46-50\" else 5 if i == \"51-55\" else 6 for i in data['Age']]\ndata.head(10)","14bbfbf4":"#we can remove purchase from dataset because we have purchase_level\ndata = data.drop('Purchase', axis = 1)","abf203af":"data.head()","b652654a":"#we can tidy our dataframe with melt function.\nmelted = pd.melt(frame = data, id_vars = 'Purchase_level', value_vars = [\"Product_Category_1\", \"Product_Category_2\", \"Product_Category_3\"])\nmelted","c251a5ca":"#concatenate data\ndata_head = data.head() \ndata_tail = data.tail()\ndata_concatenate = pd.concat([data_head, data_tail], axis = 1, ignore_index = False)\ndata_concatenate","0578b8fc":" Now we check our correlation rate. Let's say the correlation between two features is 1. That means these features are direct proportion.\n\nFor example: \nIf the quantity of a room in a house increase, then the price of the house also increase.","aeed3b70":"Those black dots are represent outliers.","827d76bf":"We got NaN values when we concatenate tables because of the indexing.\n\nhttps:\/\/stackoverflow.com\/questions\/40339886\/pandas-concat-generates-nan-values","dfa12eb8":"1. Above table tells us that we have 537577 rows of data. \n2. We have 12 columns in our data\n3. We have 2 float variables, 5 integers, and 7 string\n4. Size of the data is 49.2 MB or more","b5b8c696":"City C have purchased more item in Black Friday than other cities.","bb789168":"* There is a 0.3 correlation between Purchase and Product_Category_3 in black friday\n* Product_Category_1 and Product_Category_2 there is a negative correlation between Purchase. Which mean that in black friday, Product1 and Product 2's sales decrease.\n\nProduct_Category_1 gets discount in Black Friday.","b54f5385":"An outlier is an observation that is numerically distant from the rest of the data. When reviewing a bloxplot, an outlier is defined as a data point that is located outside the fences of the boxplot. ","b75362b2":"Above graph shows that female purchase less than male in black friday for all age interval. "}}