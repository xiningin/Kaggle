{"cell_type":{"74232ff6":"code","7071b4f2":"code","156f0ecc":"code","8815a8da":"code","491961e5":"code","4271b448":"code","ba6a5040":"code","ad01b058":"code","94b9ff36":"code","2a388b02":"code","89f2c42c":"code","cb05bcac":"code","e747b9bb":"code","226c4462":"markdown","adb45d79":"markdown","2eb4b0d7":"markdown","f0948d3b":"markdown","9730cbb5":"markdown","beabde4c":"markdown","c9a8fd86":"markdown","a33403d1":"markdown"},"source":{"74232ff6":"!pip install autogluon.tabular[all] -q --progress-bar off","7071b4f2":"!pip install scikit-learn-intelex -q --progress-bar off","156f0ecc":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import train_test_split\nfrom timeit import default_timer as timer\nimport warnings\nwarnings.simplefilter(\"ignore\", category=DeprecationWarning)","8815a8da":"competition_prefix = 'tabular-playground-series-jun-2021'\n\ntrain_data = pd.read_csv(f'..\/input\/{competition_prefix}\/train.csv', index_col='id')\ntest_data = pd.read_csv(f'..\/input\/{competition_prefix}\/test.csv', index_col='id')\nsample_submission = pd.read_csv(f'..\/input\/{competition_prefix}\/sample_submission.csv', index_col='id')\n\nrandom_state = 42\ntrain_data, valid_data = train_test_split(train_data, test_size=0.2, random_state=random_state)\n\nprint('Train data shape:', train_data.shape)\nprint('Valid data shape:', valid_data.shape)\nprint('Test data shape:', test_data.shape)","491961e5":"train_data.head(10)","4271b448":"train_data.describe()","ba6a5040":"label = 'target'\nnuniques = train_data.drop([label], axis=1).nunique()\nprint('Maximum number of feature unique values:', nuniques.max())\nprint('Minimum number of feature unique values:', nuniques.min())","ad01b058":"plt.figure(figsize=(8, 6))\nsb.countplot(data=train_data, x=label, order=train_data[label].value_counts().index)\ntrain_data[label].value_counts()","94b9ff36":"from  autogluon.tabular import TabularPredictor\n\n\ntime_limit = 7200 # 2 hours time limit\n\n# copy and modify default parameters from \"fit\" method\n# https:\/\/auto.gluon.ai\/stable\/api\/autogluon.predictor.html#autogluon.tabular.TabularPredictor.fit\n# to fix random states and change n_neighbors parameter for KNN\nhyperparameters = {\n    'NN': {},\n    'GBM': [\n        {'extra_trees': True, 'seed': random_state, 'ag_args': {'name_suffix': 'XT'}},\n        {},\n        'GBMLarge',\n    ],\n    'CAT': {'random_seed': random_state},\n    'XGB': {'seed': random_state},\n    'FASTAI': {},\n    'RF': [\n        {'criterion': 'gini', 'random_state': random_state,\n         'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}},\n        {'criterion': 'entropy', 'random_state': random_state,\n         'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}},\n        {'criterion': 'mse', 'random_state': random_state,\n         'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression']}},\n    ],\n    'XT': [\n        {'criterion': 'gini', 'random_state': random_state,\n         'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}},\n        {'criterion': 'entropy', 'random_state': random_state,\n         'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}},\n        {'criterion': 'mse', 'random_state': random_state,\n         'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression']}},\n    ],\n    'KNN': [\n        {'weights': 'uniform', 'n_neighbors': 1000, 'ag_args': {'name_suffix': 'Unif'}},\n        {'weights': 'distance', 'n_neighbors': 1000, 'ag_args': {'name_suffix': 'Dist'}},\n    ],\n}\n\nt0 = timer()\nautogluon_predictor = TabularPredictor(\n    label=label,\n    eval_metric=\"log_loss\",\n    learner_kwargs={'ignored_columns': ['id']}\n).fit(\n    train_data=train_data,\n    tuning_data=valid_data,\n    time_limit=time_limit,\n    verbosity=0,\n    hyperparameters=hyperparameters\n)\nt1 = timer()\nfitting_time = t1 - t0\n\nleaderboard = autogluon_predictor.leaderboard()","2a388b02":"leaderboard","89f2c42c":"t0 = timer()\npredictions = autogluon_predictor.predict_proba(test_data)\nt1 = timer()\nprediction_time = t1 - t0\npredictions.columns = list(sample_submission.columns)\npredictions.index = sample_submission.index\npredictions.to_csv('tps_jun_2021_autogluon_submission.csv')\n\npredictions.head()","cb05bcac":"print('Fitting time[s]:', round(fitting_time, 3))\nprint('Prediction time[s]:', round(prediction_time, 3))","e747b9bb":"!rm -rf AutogluonModels","226c4462":"# AutoGluon with Intel\u00ae Extension for Scikit-learn* - Kaggle Tabular Playground Series - June 2021\n\nThis is an example how Intel(R) Extension for Scikit-learn improves AutoGluon performance for one of Kaggle Playground competitions ([Kaggle Tabular Playground Series - June 2021](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jun-2021\/overview)). Also, it might be applicable for other classification competitions with little changes.\n\n[Intel(R) Extension for Scikit-learn](https:\/\/github.com\/intel\/scikit-learn-intelex) enables optimized ML kernels from [Intel(R) oneAPI Data Analytics Library](https:\/\/github.com\/oneapi-src\/oneDAL) with just two lines of codes for common cases and zero lines for AutoGluon since it has autopatching if extension is installed.","adb45d79":"## AutoGluon with Intel\u00ae Extension for Scikit-learn\n\nLets run AutoGluon with installed Intel\u00ae Extension for Scikit-learn and default parameters except random state fixing and number of neighbors for kNN algorithm","2eb4b0d7":"### Loading and analysis of data","f0948d3b":"Intel(R) Extension for Scikit-learn gives **1.45x speedup for all AutoGluon fitting time and 4.8x speedup for k-Nearest Neighbors algorithm prediction**.\n\nTo find default AutoGluon result, see [another notebook](https:\/\/www.kaggle.com\/alex97andreev\/tps-jun-default-autogluon).","9730cbb5":"Pay attention to \"Intel(R) Extension for Scikit-learn* enabled (https:\/\/github.com\/intel\/scikit-learn-intelex)\" messages in previous output.","beabde4c":"**AutoGluon installation:**","c9a8fd86":"**Intel\u00ae Extension for Scikit-learn installation:**","a33403d1":"As we can see from models leaderboard, gradient boosting is better for this task."}}