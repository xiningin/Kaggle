{"cell_type":{"12414e43":"code","bc50148f":"code","2d952b44":"code","4956e7d3":"code","057da867":"code","d6b455bb":"code","f123b835":"code","b3b33635":"code","834e69ba":"code","2f9b89bd":"markdown"},"source":{"12414e43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc50148f":"#  this is just to know how much time will it take to run this entire ipython notebook \nfrom datetime import datetime\n# globalstart = datetime.now()\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nmatplotlib.use('nbagg')\n\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.max_open_warning': 0})\n\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport os\nfrom scipy import sparse\nfrom scipy.sparse import csr_matrix\n\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport random","2d952b44":"start = datetime.now()\nif not os.path.isfile('data.csv'):\n    # Create a file 'data.csv' before reading it\n    # Read all the files in netflix and store them in one big file('data.csv')\n    # We re reading from each of the four files and appendig each rating to a global file 'train.csv'\n    data = open('data.csv', mode='w')","4956e7d3":"start = datetime.now()\n# print(\"1\")\n# print(os.path.isfile('\/kaggle\/working\/data.csv') == True)\n# if os.path.isfile('\/kaggle\/working\/data.csv'):\n    # Create a file 'data.csv' before reading it\n    # Read all the files in netflix and store them in one big file('data.csv')\n    # We re reading from each of the four files and appendig each rating to a global file 'train.csv'\n# print(\"1\")\ndata = open('\/kaggle\/working\/data.csv', mode='w')\n\nrow = list()\nfiles=['..\/input\/netflix-prize-data\/combined_data_1.txt','..\/input\/netflix-prize-data\/combined_data_2.txt', \n       '..\/input\/netflix-prize-data\/combined_data_3.txt', '..\/input\/netflix-prize-data\/combined_data_4.txt']\n# print(\"2\")\nfor file in files:\n#     print(\"?\")\n    print(\"Reading ratings from {}...\".format(file))\n    with open(file) as f:\n        for line in f: \n            del row[:] # you don't have to do this.\n            line = line.strip()\n            if line.endswith(':'):\n                # All below are ratings for this movie, until another movie appears.\n                movie_id = line.replace(':', '')\n            else:\n                row = [x for x in line.split(',')]\n                row.insert(0, movie_id)\n                data.write(','.join(row))\n                data.write('\\n')\n    print(\"Done.\\n\")\ndata.close()\nprint('Time taken :', datetime.now() - start)","057da867":"print(\"creating the dataframe from data.csv file..\")\ndf = pd.read_csv('data.csv', sep=',', \n                       names=['movie', 'user','rating','date'])\ndf.date = pd.to_datetime(df.date)\nprint('Done.\\n')\n\n# we are arranging the ratings according to time.\nprint('Sorting the dataframe by date..')\ndf.sort_values(by='date', inplace=True)\nprint('Done..')","d6b455bb":"df.head()","f123b835":"df.describe()['rating']\n","b3b33635":"# just to make sure that all Nan containing rows are deleted..\nprint(\"No of Nan values in our dataframe : \", sum(df.isnull().any()))","834e69ba":"dup_bool = df.duplicated(['movie','user','rating'])\ndups = sum(dup_bool) # by considering all columns..( including timestamp)\nprint(\"There are {} duplicate rating entries in the data..\".format(dups))","2f9b89bd":"# 3.1.2 Checking for NaN values"}}