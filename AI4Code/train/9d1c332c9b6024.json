{"cell_type":{"685549b8":"code","f8381e67":"code","c04f40b3":"code","a751a7e9":"code","c01e1a20":"code","ff78cb2e":"code","7ef30776":"code","f9a16967":"code","7e903408":"code","f82bfaf2":"code","c1f9485b":"code","d06f0d91":"code","be1a6d1d":"code","3ee87f10":"code","d23ee9c3":"code","c4b21480":"code","afd9ba3f":"code","65da6757":"markdown","e910ac2f":"markdown","a4269862":"markdown","79fc7012":"markdown","447a4114":"markdown"},"source":{"685549b8":"import os\nimport numpy as np\nimport pandas as pd\n\nfrom pathlib import *\nfrom fastai.vision import *","f8381e67":"# Create dataset\npath = '\/kaggle\/input\/working-potholes\/kaggle\/working\/pothole-detection-dataset'\n\nfastai_data = ImageDataBunch.from_folder(path, train=\".\",\n                                         valid_pct=0.2, ds_tfms=get_transforms(), \n                                         size=300, num_workers=4, \n                                         bs=32).normalize(imagenet_stats)","c04f40b3":"fastai_data.show_batch(figsize=(7,8))\nfastai_data.classes, fastai_data.c, len(fastai_data.train_ds), len(fastai_data.valid_ds)","a751a7e9":"# Tricking torch not to download resnet\n# Torch did not ran yet so cache directory does not exist\n!mkdir -p \/tmp\/.cache\/torch\/checkpoints\n\n# Copy resnet34.pth into torch cache\n!cp \/kaggle\/input\/resnet34\/resnet34.pth \/tmp\/.cache\/torch\/checkpoints\/resnet34-333f7ec4.pth","c01e1a20":"learn = cnn_learner(fastai_data, models.resnet34, metrics=error_rate, model_dir='\/tmp\/models')","ff78cb2e":"learn.fit_one_cycle(4)","7ef30776":"# Save model before unfreezing\nlearn.save('stage1')","f9a16967":"def plot_confusion_matrix(learner):\n    \"\"\"\n    Ploting a confusion matrix using a fastai cnn learner\n    \"\"\"\n    interp = ClassificationInterpretation.from_learner(learner)\n    interp.plot_confusion_matrix()","7e903408":"plot_confusion_matrix(learn)","f82bfaf2":"unfreezed_learner = learn.load('stage1')","c1f9485b":"unfreezed_learner.unfreeze()","d06f0d91":"unfreezed_learner.fit_one_cycle(3, max_lr=slice(3e-5,3e-4))","be1a6d1d":"plot_confusion_matrix(unfreezed_learner)","3ee87f10":"# Move data to a read\/write dir\n# input_path = \"\/kaggle\/input\/pothole-detection-dataset\/\"\n# !rm -rf \/kaggle\/working\/pothole-detection-dataset\n# !cp -r  {input_path} \/kaggle\/working","d23ee9c3":"# Create paths\n# path = Path(\"\/kaggle\/working\/pothole-detection-dataset\")\n# normal_path = path\/\"normal\"\n# pothole_path = path\/\"potholes\"","c4b21480":"# Verify and delete images it can not open\n# verify_images(path=normal_path, delete=True)\n# verify_images(path=pothole_path, delete=True)","afd9ba3f":"# from zipfile import ZipFile\n\n# Create zip file\n# dirName = \"\/kaggle\/working\/pothole-detection-dataset\"\n\n# with ZipFile('\/tmp\/b.zip', 'w') as zipObj:\n#    # Iterate over all the files in directory\n#    for folderName, subfolders, filenames in os.walk(dirName):\n#        for filename in filenames:\n#            #create complete filepath of file in directory\n#            filePath = os.path.join(folderName, filename)\n#            # Add file to zip\n#            zipObj.write(filePath)\n# Move zip file to a place I can download from\n# !cp  \/tmp\/b.zip \/kaggle\/working\/b.zip","65da6757":"## Transfer Learning\n\nWikipedia [Transfer learning](https:\/\/en.wikipedia.org\/wiki\/Transfer_learning) - (TL) is a research problem in machine learning (ML) that focuses on storing knowledge gained while solving one problem and applying it to a different but related problem.\n\nI'm using the famous [resnet34](https:\/\/www.kaggle.com\/pytorch\/resnet34) pretrained model in order to get better results.\n\nI want my kaggle notebook to work without the internet option so I uploaded resnet .pth file with the + Add Data option.","e910ac2f":"# Solving corrupted images problem\n\n* Copied all images into working dir so I can delete the unrelevant images.\n* Used fastai library verify_images in order to find out which images are valid.\n* Created a zip file that contains all the valid images.\n* Uploaded it as data to the notebook.\n\nNeed to do this once so I left it in comments","a4269862":"## Fastai CNN learner\n\nShort and readable code inorder to create a fastai CNN learner that preforms with 99%+ success rate","79fc7012":"## Freezing and Unfreezing\nWhen training using a pretrained model all the layers except the last one are **freezed**. That means they are going to keep the same values and training is not going to effect them.\nUnfreezing the model lets you train those layers.","447a4114":"## Fit One Cycle\nOne of the most important things in training a deep neural netowrk is the learning rate (LR). The 1 cycle policy is a way do adopt the learning rate during the train of the model. The cycle contains two steps of equal lengths, one going from a low LR to a higher one and than back to the minimum.\n\nFor further reading\n[One Cycle policy](https:\/\/sgugger.github.io\/the-1cycle-policy.html)"}}