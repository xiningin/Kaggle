{"cell_type":{"0494a932":"code","84996fe2":"code","07d39eba":"code","e4451931":"code","b57d1825":"code","91fbc459":"code","d88d4431":"code","3ed7aca4":"code","906cfe09":"code","c9d56cc2":"code","0a4aca78":"code","755e1fa9":"code","ed7c68b5":"code","4543445b":"code","63c147fa":"code","0281ea0e":"code","e1dcc525":"code","eb74b5e8":"code","34962982":"code","5567b69d":"code","7a4922b0":"code","53f898f5":"code","5cc56a76":"code","f46ced1a":"code","583bb1a6":"markdown","59a2ee36":"markdown","7c55f3d9":"markdown"},"source":{"0494a932":"!pip install --use-feature=2020-resolver https:\/\/s3-us-west-2.amazonaws.com\/xgboost-nightly-builds\/xgboost-1.3.0_SNAPSHOT%2Bdda9e1e4879118738d9f9d5094246692c0f6123c-py3-none-manylinux2010_x86_64.whl","84996fe2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport cupy as cp # linear algebra\nimport cudf # data processing, CSV file I\/O (e.g. cudf.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom cuml.metrics import roc_auc_score\nimport shap\nimport gc\nfrom random import shuffle\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07d39eba":"import xgboost\nxgboost.__version__","e4451931":"train = cudf.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest = cudf.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')","b57d1825":"columns = test.columns[1:]","91fbc459":"train.shape","d88d4431":"test.shape","3ed7aca4":"target = cp.hstack([cp.ones(train.shape[0]), cp.zeros(test.shape[0])])","906cfe09":"train_test = cp.vstack([train[columns].values, test[columns].values])","c9d56cc2":"train_test.shape","0a4aca78":"index = list(range(train_test.shape[0]))\nshuffle(index)","755e1fa9":"train_test = train_test[index, :]\ntarget = target[index]","ed7c68b5":"train, test, y_train, y_test = train_test_split(train_test, target, test_size=0.33, random_state=42)","4543445b":"del train_test\ngc.collect()\ngc.collect()","63c147fa":"train = xgboost.DMatrix(train, label=y_train)\ntest = xgboost.DMatrix(test, label=y_test)","0281ea0e":"%%time\nparam = {\n    'eta': 0.05,\n    'max_depth': 10,\n    'subsample': 0.8,\n    'colsample_bytree': 0.7,\n    'objective': 'reg:logistic',\n    'eval_metric': 'auc',\n    'tree_method': 'gpu_hist', \n    'predictor': 'gpu_predictor'\n}\nclf = xgboost.train(param, train, 600)","e1dcc525":"preds = clf.predict(test)","eb74b5e8":"roc_auc_score(y_test, preds)","34962982":"%%time\nshap_preds = clf.predict(test, pred_contribs=True)","5567b69d":"shap_preds.shape","7a4922b0":"shap_preds[:,:-1].shape","53f898f5":"shap.initjs()","5cc56a76":"shap.summary_plot(shap_preds[:,:-1])","f46ced1a":"shap.summary_plot(shap_preds[:,:-1], plot_type=\"bar\")","583bb1a6":"AUC of 0.499 is very low, and statistically indistinguishable from a perfectly shuffled train\/test split. Nonetheless, for the sake of an exercise, let's try to see if we can find which features are the most responsible for the discrepancy. In order to do this, we'll resort to calculating SHAP values, which can be done directly on GPUs with the version 1.3 of XGBoost.","59a2ee36":"Once we remove the offest column, all features seem pretty rendomly distributed, as we would expect from well-mixed training and test sets.","7c55f3d9":"One of the main issues that make Kaggle (and for tahat matter any other) predictive modeling tricky are the discrepancies between the training and the test datasets. In order to get an idea of the magnitude of these differences, one of the more valuable tools to use is adversarial validation. With aversariel validation we try to build an auxiliary model that predicts whether given data points belong to the train and the test set. If we can make predictions with such a model with a high degree of confidence, then that usually means that the train and test sets are significantly different, and we need to be careful to make a model that will take that into the account.\n\nWe will make this adversarial validation notebook with the Rapids library. [Rapids](https:\/\/rapids.ai) is an open-source GPU accelerated Data Sceince and Machine Learning library, developed and mainatained by [Nvidia](https:\/\/www.nvidia.com). It is designed to be compatible with many existing CPU tools, such as Pandas, scikit-learn, numpy, etc. It enables **massive** acceleration of many data-science and machine learning tasks, oftentimes by a factor fo 100X, or even more. \n\nRapids is still undergoing developemnt, and only recently has it become possible to use RAPIDS natively in the Kaggle Docker environment. If you are interested in installing and riunning Rapids locally on your own machine, then you should [refer to the followong instructions](https:\/\/rapids.ai\/start.html).\n\nFor the modeling part we'll use the latest version of XGBoost, which allows for GPU accelerated calculation of Shapely Values. We'll use these \"SHAP\" values to calculate correct feature importances. Starting with the version 1.3, XGBoost supports fast calculation of the SHAP values on GPU. However, as of the time of creating this notebook, that version of XGBoost is still not available in Kaggle Docker, so we'll have to install it."}}