{"cell_type":{"f6f40dbf":"code","a6320452":"code","fc292de0":"code","19b0ddac":"code","cb5c8642":"code","fd4e0c20":"code","38358a59":"code","df9cac33":"code","20b82c9e":"code","08e93152":"code","d2c25186":"code","b8a6cc15":"code","180ae6b3":"code","c754b6a3":"code","e1b8542a":"code","5aa6fced":"code","c18a8b75":"code","a2fa37e9":"code","f84a85fe":"code","b3c54fb3":"code","32667b84":"code","e6d7b019":"code","09a9129f":"code","11d13f5a":"code","6bd601a0":"code","30183df0":"code","6f45cedc":"code","6d3dc919":"code","8793a8f9":"code","752c5171":"code","107419fc":"code","445a187e":"code","8dceb941":"code","f6a10b66":"code","73cc2495":"code","5cc47e66":"code","cf10f2df":"code","c3b6175d":"code","922d1308":"code","5fbdc137":"code","a853186c":"code","428b65eb":"code","26bc49fc":"code","41b1b526":"code","7e15306b":"code","48c49af2":"code","647bb98a":"code","df27032e":"code","d84292da":"code","e7e7c104":"code","b996c1e6":"code","58630997":"code","02f141a7":"code","762bdbbe":"code","06903ca3":"code","084181be":"code","6c457386":"code","6f4ddfd3":"code","f192bb9e":"code","65e1c4ba":"code","3aa08ae7":"code","47eb2e6a":"code","6b47d4d7":"code","892271ed":"code","b3c01b85":"code","b6378345":"code","70c2976b":"code","71c499b2":"code","3f4f572e":"code","44fbfe61":"code","75a611be":"code","80510558":"code","f5b128c9":"code","3ae842c7":"code","d44fda74":"code","c90b3877":"code","ead6afdf":"code","5e511d7e":"markdown","eb283c94":"markdown","adba48a4":"markdown","fed3e60a":"markdown","56dae149":"markdown","458c1d06":"markdown","2cf66184":"markdown","858e9bbb":"markdown","1bb70398":"markdown","9a890adb":"markdown","3bb7a74f":"markdown","c901b836":"markdown","acd34428":"markdown","80e56256":"markdown","83b64361":"markdown","f3e603ef":"markdown","8f39caa9":"markdown","9d77a4eb":"markdown","e7786e62":"markdown"},"source":{"f6f40dbf":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV","a6320452":"df=pd.read_csv(\"..\/input\/cardiovascular-disease-dataset\/cardio_train.csv\",delimiter=\";\",index_col=None)","fc292de0":"df.head()","19b0ddac":"df=df.drop(columns=[\"id\"])\ndf[\"age\"]=df[\"age\"].div(365)","cb5c8642":"print(\"duplicate {}\".format(df.duplicated().sum()))\nprint(df.isnull().sum())","fd4e0c20":"corr= df.corr()\nplt.figure(figsize=(16, 6))\nsns.heatmap(corr,annot=True)","38358a59":"df.drop_duplicates(inplace=True)\nprint(\"duplicate {}\".format(df.duplicated().sum()))","df9cac33":"df.describe()","20b82c9e":"outlier_height=((df[\"height\"]>200) | (df[\"height\"]<140))\ndf=df[~outlier_height]\noutlier_weight=((df[\"weight\"]>150) | (df[\"weight\"]<40))\ndf=df[~outlier_weight]","08e93152":"sns.lmplot(x='weight', y='height', hue='gender', data=df, fit_reg=False, height=6)\ndf[\"bmi\"] = df[\"weight\"]\/ (df[\"height\"]\/100)**2\ndf=df.drop(columns=[\"height\",\"weight\"])","d2c25186":"blood_pressure = df.loc[:,['ap_lo','ap_hi']]\nsns.boxplot(x = 'variable',y = 'value',data = blood_pressure.melt())\nprint(\"Diastolic pressure is higher than systolic one in {0} cases\".format(df[df['ap_lo']> df['ap_hi']].shape[0]))","b8a6cc15":"outlier_bp1= ((df[\"ap_hi\"]>250) | (df[\"ap_lo\"]>160))\noutlier_bp2 = ((df[\"ap_hi\"] < 80) | (df[\"ap_lo\"] < 30))\ndf = df[~outlier_bp1]\ndf= df[~outlier_bp2]","180ae6b3":"print(\"Diastilic pressure is higher than systolic one in {0} cases\".format(df[df['ap_lo']> df['ap_hi']].shape[0]))","c754b6a3":"df.drop(df[(df['ap_hi'] > df['ap_hi'].quantile(0.975)) | (df['ap_hi'] < df['ap_hi'].quantile(0.025))].index,inplace=True)\ndf.drop(df[(df['ap_lo'] > df['ap_lo'].quantile(0.975)) | (df['ap_lo'] < df['ap_lo'].quantile(0.025))].index,inplace=True)","e1b8542a":"print(\"Diastolic pressure is higher than systolic one in {0} cases\".format(df[df['ap_lo']> df['ap_hi']].shape[0]))","5aa6fced":"blood_pressure = df.loc[:,['ap_lo','ap_hi']]\nsns.boxplot(x = 'variable',y = 'value',data = blood_pressure.melt())","c18a8b75":"df.count()","a2fa37e9":"corr= df.corr()\nplt.figure(figsize=(16, 6))\nsns.heatmap(corr,annot=True)","f84a85fe":"fig, ax =plt.subplots(1,2,figsize=(14,6))\nsns.countplot(x=df[\"alco\"],hue=df[\"cholesterol\"],ax=ax[0])\nsns.countplot(x=df[\"smoke\"],hue=df[\"cholesterol\"],ax=ax[1])\nax[0].set_title(\"Alcoholic vs Cholesterol\")\nax[1].set_title(\"Smoker vs Cholesterol\")\nax[0].set_xlabel(\"Acoholic\")\nax[1].set_xlabel(\"Smoker\")\nax[0].set_xticklabels([\"No\",\"Yes\"])\nax[1].set_xticklabels([\"No\",\"Yes\"])\nax[0].legend([\"Low CHolesterol\",\"High Cholesterol\",\"Very High Cholesterol\"],loc=\"center right\")\nax[1].legend([\"Low CHolesterol\",\"High Cholesterol\",\"Very High Cholesterol\"],loc=\"center right\")\nfig.show()","b3c54fb3":"fig, ax =plt.subplots(1,2,figsize=(14,6))\nsns.countplot(x=df[\"alco\"],hue=df[\"cardio\"],ax=ax[0])\nsns.countplot(x=df[\"smoke\"],hue=df[\"cardio\"],ax=ax[1])\nax[0].set_title(\"Alcoholic vs Cardio\")\nax[1].set_title(\"Smoker vs Cardio\")\nax[0].set_xlabel(\"Acoholic\")\nax[1].set_xlabel(\"Smoker\")\nax[0].set_xticklabels([\"No\",\"Yes\"])\nax[1].set_xticklabels([\"No\",\"Yes\"])\nax[0].legend([\"Low CHolesterol\",\"High Cholesterol\",\"Very High Cholesterol\"],loc=\"center right\")\nax[1].legend([\"Low CHolesterol\",\"High Cholesterol\",\"Very High Cholesterol\"],loc=\"center right\")\nfig.show()","32667b84":"fig, ax = plt.subplots(figsize=(10,6))\nax=sns.boxplot(x=df[\"cholesterol\"],y=df[\"bmi\"])\nax.set_title(\"Boxplot of Cholesterol Level against bmi\")\nax.set_xticklabels([\"Low Cholesterol\",\"High Cholesterol\",\"Very High Cholesterol\"])\nax.set_xlabel(\"Cholesterol\")\nax.set_ylabel(\"bmi\")","e6d7b019":"df['cardio'].value_counts()","09a9129f":"X=df.drop(columns=[\"cardio\"])\ny=df[\"cardio\"]","11d13f5a":"X_train,X_test, y_train, y_test = train_test_split(X,y,train_size=0.2,random_state=0)","6bd601a0":"from sklearn.preprocessing import normalize\nX = normalize(X)\nX_train = normalize(X_train)\nX_test = normalize(X_test)","30183df0":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\n\ndec = DecisionTreeClassifier()\nran = RandomForestClassifier()\nknn = KNeighborsClassifier()\nsvm = SVC(random_state=0)\nnaive = GaussianNB()\nlog=LogisticRegression()\n\nmodels = {\"Decision tree\" : dec,\"Random forest\" : ran,\"KNN\" : knn,\"SVM\" : svm,\"Naive bayes\" : naive,\"Logistic regression\": log}\nscores= { }\n\nfor key, value in models.items():    \n    model = value\n    model.fit(X_train, y_train)\n    scores[key] = model.score(X_test, y_test)","6f45cedc":"scores_frame = pd.DataFrame(scores, index=[\"Accuracy Score\"]).T\nscores_frame.sort_values(by=[\"Accuracy Score\"], axis=0,inplace=True)\nscores_frame","6d3dc919":"from sklearn.model_selection import cross_val_score\nacc_random_forest = cross_val_score(estimator=ran,X= X_train,y= y_train, cv=10)\nacc_decission_tree=cross_val_score(estimator=dec, X=X_train, y=y_train, cv=10)\nacc_knn = cross_val_score(estimator=knn, X=X_train, y=y_train, cv=10)\nacc_svm =cross_val_score(estimator=svm ,X=X_train, y=y_train, cv=10)\nprint(\"Random Forest Accuracy: \", acc_random_forest.mean())\nprint(\"Random Forest Standard Deviation: \", acc_random_forest.std())\nprint(\"Decission Tree Accuracy: \",acc_decission_tree.mean())\nprint(\"Decission Tree Standard Deviation: \", acc_decission_tree.std())\nprint(\"KNN Average Accuracy: \", acc_knn.mean())\nprint(\"KNN Standard Deviation: \", acc_knn.std())","8793a8f9":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nDT_pred = DecisionTreeClassifier()#max_depth=3, min_samples_split=50, min_samples_leaf=50, random_state=0\nDT_pred=DT_pred.fit(X_train, y_train)\ny_pred = DT_pred.predict(X_test)\ny_pred","752c5171":"print(\"Confusion Matrix \\n\",confusion_matrix(y_test,y_pred))","107419fc":"print(\"Clasification Accuracies\\n\",classification_report(y_test,y_pred))\nDT_acc = round(accuracy_score(y_test, y_pred), 2)\nprint(\"Overall accuracy score: {} \".format(DT_acc))","445a187e":"from sklearn.metrics import roc_curve, auc\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","8dceb941":"max_depths = np.linspace(1, 10,10, endpoint=True)\ntrain_results = []\ntest_results = []\nfor max_depth in max_depths:\n    dt = DecisionTreeClassifier(max_depth=max_depth)\n    dt.fit(X_train, y_train)\n    train_pred = dt.predict(X_train)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    train_results.append(roc_auc)\n    y_pred = dt.predict(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(max_depths, train_results,\"b\", label=\"Train AUC\")\nline2, = plt.plot(max_depths, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"Tree depth\")\nplt.grid(True)","f6a10b66":"min_samples_splits = np.linspace(0.1, 1.0, 10, endpoint=True)\ntrain_results = []\ntest_results = []\nfor min_samples_split in min_samples_splits:\n    dt = DecisionTreeClassifier(min_samples_split=min_samples_split)\n    dt.fit(X_train, y_train)\n    train_pred = dt.predict(X_train)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    train_results.append(roc_auc)\n    y_pred = dt.predict(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    test_results.append(roc_auc)\n\nline1, = plt.plot(min_samples_splits, train_results,\"b\", label=\"Train AUC\")\nline2, = plt.plot(min_samples_splits, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"Min split\")\nplt.xticks(np.linspace(0.1, 1.0, 10))\nplt.grid(True)","73cc2495":"min_samples_leafs = np.linspace(0.1, 0.5, 5, endpoint=True)\ntrain_results = []\ntest_results = []\nfor min_samples_leaf in min_samples_leafs:\n    dt = DecisionTreeClassifier(min_samples_leaf=min_samples_leaf)\n    dt.fit(X_train, y_train)\n    train_pred = dt.predict(X_train)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    train_results.append(roc_auc)\n    y_pred = dt.predict(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(min_samples_leafs, train_results,\"b\", label=\"Train AUC\")\nline2, = plt.plot(min_samples_leafs, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"Min leaf\")\nplt.grid(True)","5cc47e66":"max_features = list(range(1,X.shape[1]))\ntrain_results = []\ntest_results = []\nfor max_feature in max_features:\n    dt = DecisionTreeClassifier(max_features=max_feature)\n    dt.fit(X_train, y_train)\n    train_pred = dt.predict(X_train)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    train_results.append(roc_auc)\n    y_pred = dt.predict(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(max_features, train_results,\"b\", label=\"Train AUC\")\nline2, = plt.plot(max_features, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"Max feature\")\nplt.grid(True)","cf10f2df":"from sklearn import tree\nfeature=[\"age\",\"gender\",\"ap_hi\",\"ap_lo\",\"cholesterol\",\"gluc\",\"smoke\",\"alco\",\"active\",\"bmi\"]\nfig, ax=plt.subplots(figsize=(16,10))\nclf = DecisionTreeClassifier(criterion=\"gini\", min_samples_split=0.1,max_depth=4,min_samples_leaf= 0.1)\npred=clf.fit(X,y)\nax=tree.plot_tree(pred.fit(X_train,y_train),feature_names=feature)","c3b6175d":"clf = DecisionTreeClassifier(criterion=\"gini\", max_depth=4,min_samples_split=0.1,min_samples_leaf= 0.1)\npred=clf.fit(X,y)\ny_pred=pred.predict(X_test)\ncm=confusion_matrix(y_test, y_pred)\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(cm,fmt=\".0f\", annot=True,linewidths=0.2, linecolor=\"purple\", ax=ax)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nTN = cm[0,0]\nTP = cm[1,1]\nFN = cm[1,0]\nFP = cm[0,1]\nAccuracy=(TP+TN)\/(TP+TN+FN+FP)\nError=(FP+FN)\/(TP+TN+FN+FP)\nPrecision = TP\/(TP+FP)\nRecall = TP\/(TP+FN)\nF1_Score = 2*(Recall * Precision) \/ (Recall + Precision)\npd.DataFrame([[Accuracy,Error,Precision, Recall, F1_Score]],columns=[\"Accuracy\",\"Error\",\"Precision\", \"Recall\", \"F1 Score\"], index=[\"Results\"])","922d1308":"DT_pred = DecisionTreeClassifier(max_depth=4, min_samples_split=0.1, min_samples_leaf=0.1, random_state=0)\nDT_pred=DT_pred.fit(X_train, y_train)\ny_pred = DT_pred.predict(X_test)\ny_pred\nprint(\"Clasification Accuracies\\n\",classification_report(y_test,y_pred))\nDT_acc = round(accuracy_score(y_test, y_pred), 2)\nprint(\"Overall accuracy score: {} \".format(DT_acc))","5fbdc137":"from sklearn.neighbors import KNeighborsClassifier","a853186c":"KNN_pred = KNeighborsClassifier()\nKNN=KNN_pred.fit(X_train, y_train)\ny_pred_knn = KNN.predict(X_test)\ny_pred_knn","428b65eb":"print(\"Confusion Matrix \\n\",confusion_matrix(y_test,y_pred_knn))","26bc49fc":"n_neighbors = np.linspace(1, 30,30, endpoint=True).astype(int)\ntrain_results = []\ntest_results = []\nfor n_neighbor in n_neighbors:\n    dt = KNeighborsClassifier(n_neighbors=n_neighbor)\n    dt.fit(X_train, y_train)\n    train_pred = dt.predict(X_train)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    train_results.append(roc_auc)\n    y_pred = dt.predict(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n\n    test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(n_neighbors, train_results,\"b\", label=\"Train AUC\")\nline2, = plt.plot(n_neighbors, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"N neighbor\")\nplt.grid(True)","41b1b526":"distances = np.linspace(1,5,5,endpoint=True).astype(int)\ntrain_results = []\ntest_results = []\nfig = plt.figure()\nax = fig.add_subplot(111)\nfor distance in distances:\n    dt = KNeighborsClassifier(p=distance)\n    dt.fit(X_train, y_train)\n    train_pred = dt.predict(X_train)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    train_results.append(roc_auc)\n    y_pred = dt.predict(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = ax.plot(distances, train_results,\"b\", label=\"Train AUC\")\nline2, = ax.plot(distances, test_results, \"r\", label=\"Test AUC\")\nymax_train = max(train_results)\nxpos_train = train_results.index(ymax_train)\nxmax_train = distances[xpos_train]\n#ax.annotate('local max', xy=(xmax_train, ymax_train), xytext=(xmax_train, ymax_train+1),\n           # arrowprops=dict(facecolor='black', shrink=0.05),\n            #)\nax.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nax.set_ylabel(\"AUC score\")\nax.set_xlabel(\"Distance\")\nax.grid(True)","7e15306b":"num=np.linspace(1,10,10).astype(int)\nparam_dist={\"n_neighbors\":num,\n           \"weights\":[\"uniform\",\"distance\"],\n           \"algorithm\":[\"ball_tree\", \"kd_tree\", \"brute\"],\n           \"p\":np.linspace(1,2,2)}\nKNN = KNeighborsClassifier()\nKNN_cv=GridSearchCV(KNN,param_dist,cv=5)\nKNN_cv.fit(X_train,y_train)","48c49af2":"print(\"Tuned Parameter: {}\".format(KNN_cv.best_params_))\nprint(\"Best Score: {}\".format(KNN_cv.best_score_))","647bb98a":"clf = KNeighborsClassifier(algorithm=\"ball_tree\", n_neighbors= 9, p= 1.0, weights= 'uniform')\npred=clf.fit(X,y)\ny_pred=pred.predict(X_test)\ncm=confusion_matrix(y_test, y_pred)\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(cm,fmt=\".0f\", annot=True,linewidths=0.2, linecolor=\"purple\", ax=ax)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nTN = cm[0,0]\nTP = cm[1,1]\nFN = cm[1,0]\nFP = cm[0,1]\nAccuracy=(TP+TN)\/(TP+TN+FN+FP)\nError=(FP+FN)\/(TP+TN+FN+FP)\nPrecision = TP\/(TP+FP)\nRecall = TP\/(TP+FN)\nF1_Score = 2*(Recall * Precision) \/ (Recall + Precision)\npd.DataFrame([[Accuracy,Error,Precision, Recall, F1_Score]],columns=[\"Accuracy\",\"Error\",\"Precision\", \"Recall\", \"F1 Score\"], index=[\"Results\"])","df27032e":"random_forest = GridSearchCV(estimator=RandomForestClassifier(), param_grid={'n_estimators': [100, 300]},cv=5).fit(X_train, y_train)\nrandom_forest.fit(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\nprint(acc_random_forest,random_forest.best_params_)\nacc_test_random_forest = round(random_forest.score(X_test, y_test) * 100, 2)\nacc_test_random_forest","d84292da":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train)","e7e7c104":"y_pred = rf.predict(X_test)\ny_pred","b996c1e6":"print(\"Confusion Matrix \\n\",confusion_matrix(y_test,y_pred))","58630997":"from sklearn.metrics import roc_curve, auc\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","02f141a7":"n_estimators = [1, 2, 4, 8, 16, 32, 64, 100, 200]\ntrain_results = []\ntest_results = []\nfor estimator in n_estimators:\n   rf = RandomForestClassifier(n_estimators=estimator, n_jobs=-1)\n   rf.fit(X_train, y_train)\n   train_pred = rf.predict(X_train)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   train_results.append(roc_auc)\n   y_pred = rf.predict(X_test)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(n_estimators, train_results, \"b\", label=\"Train AUC\")\nline2, = plt.plot(n_estimators, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"n_estimators\")\nplt.show()","762bdbbe":"max_depths = np.linspace(1, 32, 32, endpoint=True)\ntrain_results = []\ntest_results = []\nfor max_depth in max_depths:\n   rf = RandomForestClassifier(max_depth=max_depth, n_jobs=-1)\n   rf.fit(X_train, y_train)\n   train_pred = rf.predict(X_train)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   train_results.append(roc_auc)\n   y_pred = rf.predict(X_test)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(max_depths, train_results, \"b\", label=\"Train AUC\")\nline2, = plt.plot(max_depths, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"Tree depth\")\nplt.show()","06903ca3":"min_samples_splits = np.linspace(0.1, 1.0, 10, endpoint=True)\ntrain_results = []\ntest_results = []\nfor min_samples_split in min_samples_splits:\n   rf = RandomForestClassifier(min_samples_split=min_samples_split)\n   rf.fit(X_train, y_train)\n   train_pred = rf.predict(X_train)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   train_results.append(roc_auc)\n   y_pred = rf.predict(X_test)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(min_samples_splits, train_results, \"b\", label=\"Train AUC\")\nline2, = plt.plot(min_samples_splits, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"min samples split\")\nplt.show()","084181be":"max_features = list(range(1,X_train.shape[1]))\ntrain_results = []\ntest_results = []\nfor max_feature in max_features:\n   rf = RandomForestClassifier(max_features=max_feature)\n   rf.fit(X_train, y_train)\n   train_pred = rf.predict(X_train)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   train_results.append(roc_auc)\n   y_pred = rf.predict(X_test)\n   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n   roc_auc = auc(false_positive_rate, true_positive_rate)\n   test_results.append(roc_auc)\nfrom matplotlib.legend_handler import HandlerLine2D\nline1, = plt.plot(max_features, train_results, \"b\", label=\"Train AUC\")\nline2, = plt.plot(max_features, test_results, \"r\", label=\"Test AUC\")\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\nplt.ylabel(\"AUC score\")\nplt.xlabel(\"max features\")\nplt.show()","6c457386":"print(\"Confusion Matrix \\n\",confusion_matrix(y_test,y_pred))","6f4ddfd3":"clf = RandomForestClassifier( bootstrap = True,max_leaf_nodes=33,n_estimators= 188,max_depth=12,min_samples_split=0.6,max_features=\"sqrt\")\n \npred=clf.fit(X,y)\ny_pred=pred.predict(X_test)\ncm=confusion_matrix(y_test, y_pred)\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(cm,fmt=\".0f\", annot=True,linewidths=0.2, linecolor=\"purple\", ax=ax)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nTN = cm[0,0]\nTP = cm[1,1]\nFN = cm[1,0]\nFP = cm[0,1]\nAccuracy=(TP+TN)\/(TP+TN+FN+FP)\nError=(FP+FN)\/(TP+TN+FN+FP)\nPrecision = TP\/(TP+FP)\nRecall = TP\/(TP+FN)\nF1_Score = 2*(Recall * Precision) \/ (Recall + Precision)\npd.DataFrame([[Accuracy,Error,Precision, Recall, F1_Score]],columns=[\"Accuracy\",\"Error\",\"Precision\", \"Recall\", \"F1 Score\"], index=[\"Results\"])","f192bb9e":"from sklearn.model_selection import RandomizedSearchCV\n\n# Hyperparameter grid\nparam_grid = {\n    'n_estimators': np.linspace(10, 200).astype(int),\n    'max_depth': [None] + list(np.linspace(3, 20).astype(int)),\n    'max_features': ['auto', 'sqrt', None] + list(np.arange(0.5, 1, 0.1)),\n    'max_leaf_nodes': [None] + list(np.linspace(10, 50, 500).astype(int)),\n    'min_samples_split': [2, 5, 10],\n    'bootstrap': [True, False]\n}\n\n# Estimator for use in random search\nestimator = RandomForestClassifier(random_state = 0)\n\n# Create the random search model\nrs = RandomizedSearchCV(estimator, param_grid, n_jobs = -1, \n                        scoring = 'roc_auc', cv = 3, \n                        n_iter = 10, verbose = 1, random_state=0)\n\n# Fit \nrs.fit(X_train, y_train)","65e1c4ba":"rs.best_params_","3aa08ae7":"best_model = rs.best_estimator_","47eb2e6a":"n_nodes = []\nmax_depths = []\n\nfor ind_tree in best_model.estimators_:\n    n_nodes.append(ind_tree.tree_.node_count)\n    max_depths.append(ind_tree.tree_.max_depth)\n    \nprint(f'Average number of nodes {int(np.mean(n_nodes))}')\nprint(f'Average maximum depth {int(np.mean(max_depths))}')","6b47d4d7":"from sklearn.metrics import roc_auc_score\n\nsample_leaf_options = [1,2,3,4,5,10,20]\n#X_train=X_train.reshape(1,-1)\n# for loop to iterate for each leaf size\nfor leaf_size in sample_leaf_options :\n    model = RandomForestClassifier(n_estimators = 200, n_jobs = -1,random_state =0, min_samples_leaf = leaf_size)\n    model.fit(X_train,y_train)\n    print(\"\\n Leaf size :\", leaf_size)\n    print (\"AUC - ROC : \", roc_auc_score(y_train,model.predict(X_train)))","892271ed":"clf=RandomForestClassifier(n_estimators = 1000, n_jobs = -1,random_state =0)","b3c01b85":"clf.fit(X_train,y_train)","b6378345":"feature_lbl=[\"age\",\"gender\",\"ap_hi\" ,\"ap_low\",\"cholesterol\",\"gluc\",\"smoke\",\"alco\",\"active\",\"bmi\"]\nfor feature in zip(feature_lbl, clf.feature_importances_):\n    print(feature)","70c2976b":"from sklearn.feature_selection import SelectFromModel\nsfm = SelectFromModel(clf, threshold=0.1)\nsfm.fit(X_train, y_train)","71c499b2":"for feature_list_index in sfm.get_support(indices=True):\n    print(feature_lbl[feature_list_index])","3f4f572e":"X_important_train = sfm.transform(X_train)\nX_important_test = sfm.transform(X_test)","44fbfe61":"clf_important = RandomForestClassifier(n_estimators=1000, random_state=0, n_jobs=-1)\nclf_important.fit(X_important_train, y_train)","75a611be":"y_pred = clf.predict(X_test)\n\naccuracy_score(y_test, y_pred)","80510558":"y_important_pred = clf_important.predict(X_important_test)\n\naccuracy_score(y_test, y_important_pred)","f5b128c9":"clf = RandomForestClassifier(n_estimators=188,min_samples_leaf=1,max_leaf_nodes=33,max_features=4,max_depth=12, random_state=0, n_jobs=-1)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\naccuracy_score(y_test, y_pred)","3ae842c7":"clf_important = RandomForestClassifier(n_estimators=188,max_leaf_nodes=33,max_features=0.799,max_depth=12, random_state=0, n_jobs=-1)\nclf_important.fit(X_important_train, y_train)\ny_important_pred = clf_important.predict(X_important_test)\naccuracy_score(y_test, y_important_pred)","d44fda74":"cm=confusion_matrix(y_test, y_important_pred)\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(cm,fmt=\".0f\", annot=True,linewidths=0.2, linecolor=\"purple\", ax=ax)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nTN = cm[0,0]\nTP = cm[1,1]\nFN = cm[1,0]\nFP = cm[0,1]\nAccuracy=(TP+TN)\/(TP+TN+FN+FP)\nError=(FP+FN)\/(TP+TN+FN+FP)\nPrecision = TP\/(TP+FP)\nRecall = TP\/(TP+FN)\nF1_Score = 2*(Recall * Precision) \/ (Recall + Precision)\npd.DataFrame([[Accuracy,Error,Precision, Recall, F1_Score]],columns=[\"Accuracy\",\"Error\",\"Precision\", \"Recall\", \"F1 Score\"], index=[\"Results\"])","c90b3877":"clf_important = RandomForestClassifier(n_estimators=188,max_leaf_nodes=33,max_depth=12, min_samples_split=0.6,max_features=\"sqrt\",random_state=0, n_jobs=-1)\nclf_important.fit(X_important_train, y_train)\ny_important_pred = clf_important.predict(X_important_test)\naccuracy_score(y_test, y_important_pred)\n#max_features=0.799","ead6afdf":"cm=confusion_matrix(y_test, y_important_pred)\nf, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(cm,fmt=\".0f\", annot=True,linewidths=0.2, linecolor=\"purple\", ax=ax)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nTN = cm[0,0]\nTP = cm[1,1]\nFN = cm[1,0]\nFP = cm[0,1]\nAccuracy=(TP+TN)\/(TP+TN+FN+FP)\nError=(FP+FN)\/(TP+TN+FN+FP)\nPrecision = TP\/(TP+FP)\nRecall = TP\/(TP+FN)\nF1_Score = 2*(Recall * Precision) \/ (Recall + Precision)\npd.DataFrame([[Accuracy,Error,Precision, Recall, F1_Score]],columns=[\"Accuracy\",\"Error\",\"Precision\", \"Recall\", \"F1 Score\"], index=[\"Results\"])","5e511d7e":"The third parameter we are tuning is min_sample_leaf. It tells us that the minimum number of\nsamples to be required at the node, which is the base of the tree. Judging from this AUC\ncurve, the best score is when leaf have a sample leaf of 0.1, which reaching a constant score\nat 0.2 to 0.4, then it decreases over the increment of min_sample_leaf. Train AUC and Test\nAUC intersect when approaching 0.45 and underfitting happening right when the line passes\nthrough min_sample_leaf of 0.45. Therefore, the third desired parameter would be 0.1, or if\nthe line seems too close to overfit, min_sample_leaf between 0.2 to 0.4 can be choosen.","eb283c94":"Depth indicates the depth of tree; it is something we needs to control so that the nodes do not\nexpand too much and become complicated and difficult to analyse. The deeper the tress, the\nmore splitting there is and it will be ended up too deep. Therefore, it is important to select the\ndepth carefully. By looking at the plot, we can see there is underfitting when the depth is\nlower than 3 and overfitting when the depth is bigger than 4. An ideal situation would be for\nthe tree to have a depth between these 2 conditions, which is 4. At the depth of 4, there is no\nunderfitting and overfitting. Therefore, the first hyperparameter is determined.","adba48a4":"The results returned is indeed what we desired. Algorithm best used is ball_tree, n_neighbors\nfalls within the range of 5 to 30, p value of 1 and weight as uniform. We further evaluate the\nmodel performance in confusion matrix.","fed3e60a":"Through GridSearchCV we can find out what is the best parameters for KNN classifier. Since\nwe do not have a specific value for K yet, which we only classify it within a range of 5 to 30.\nWe needed a specific value to tune our model. By adding each hyperparameters into a\ndictionary, the method will return us all the parameters best for tuning. Since it is a method, I\nwill choose 4 parameters which is algorithm, n_neighbors, p and weight.","56dae149":"The next parameter we viewing is p value, which normally only consist of 2 value. When p\nis equal to 1, it refers that the model is using manhattan_distance, where p equals to 2, the\nmodels is using euclidian_distance. So, on this plot we will be only observe distance 1 and\ndistance 2. According to the plot, distance 1 completely outdo distance 2. Although both\nshows overfitting, but we will determine by choosing the best AUC score.  \n  \nTherefore, we will be choosing a number of ranges within 5 to 30 and 1 for n_neighbors, and\n1 for p, which is manhattan_distance.","458c1d06":"Sensitivity is the measure of proportion of actual positive cases got predicted as positive. A\n62 percent of sensitivity tells us that from a population of only people having cardiovascular\ndisease, this model able to predict correctly 62% of the population. Which is actually\nundesirable since the model loses its ability to predict the remaining 38% of the patients. A\nhigher sensitivity is desirable especially in healthcare industry.   \n  \nMeanwhile for specificity, it means the ability to predict healthy people as healthy. The\nrelationship of specificity tells us that the higher the value of specificity, it means higher\nvalue of true negative and lower false positive. While a lower specificity means lower true\nnegative and higher value of false positive. In this case we would prefer high rate of true\nnegative and low false positive. From specificity we can derive false positive rate, which is 1-0.636 = 0.364, a 34 percent of false positive rate. To be able to predict the patient correctly,\nwe must lower the false positive rate as it can cause unnecessary panic among patients.\nTherefore, 63 percent is still acceptable but an improvement would be desired.  \n  \nSince the dataset is balanced, a F1 score is unnecessary","2cf66184":"We can see that id is irrelevant and will not improve our accuracies in our model. Therefore,\nit has to be dropped. Besides that, Age is in days form and it has to be converted to years for\nbetter analytical understanding. After that we can consider merging weight and height to form\nBody Mass Index (BMI), but first we have to remove all outliers first.","858e9bbb":"From the confusion matrix, we obtained a higher accuracy, lower error rate, higher precision\nand better recall. This indicated the fine tuning is indeed important and it shows a significant\nimprovement. Therefore, we would use max_depth=4, min_samples_split=0.1,\nmin_samples_leaf= 0.1 and default on max_feature. Refer to appendix 5 for the plotted\ndecision tree. We can tell that there is a significant increase of Accuracy, from 63 percent to\n71 percent, 64 percent precision increased to 71 percent, 62 percent of sensitivity increased to\n67 perfcent and a lower error rate. Generally the performance of the model after\nhyperparameter tuning is sastifying","1bb70398":"Before we start anything, we have to determine the data is well-balanced. Using the count\nmethod, we know that 33362 (51%) patients do not have cardiovascular disease and 31972\n(49%) have cardiovascular. Since it is a balanced dataset, we can normalize the dataset and\nbegin to decide what type of classification to be used. The purpose of normalizing dataset is\nso that observation can be presented in a normal distribution, an initial transformation applied\nover here is helpful in improving data classification accuracies.\nThen we can split feature and outcome into train and test. By splitting factor of 0.2, 80\npercent will be training data and 20 percent will be testing data.","9a890adb":"Compared to Decision Tree, KNN have a higher sensitivity before tuning. Accuracy and\nprecision are not interchangeable. A model that able to predict a patient health condition\nwithout consistency is not useful. This model able to predict 67 percent of people having\ncardiovascular disease out of all patient that have cardiovascular disease. This model also has\nan average result for specificity, it is able to predict healthy people as healthy. Therefore, this\nmodel predicted 63 percent of healthy people as healthy and 36 percent of healthy people as\nhaving cardiovascular disease. Through model tuning, we wish to increase all of the\npercentages so that lesser errors and higher accuracy and precision.","3bb7a74f":"Features indicates the number of features to be considered during the split. As we can see the\nentire feature is overfitted. In this case we couldn\u2019t decide which value to be used, therefore\nsetting it to be default.","c901b836":"From this curve we can observe that the higher the N neighbour, the lesser the overfitting is.\nThere is a very obvious overfitting from the start. However, test score reached maximum\nafter neighbour value of 10, while train score continues to decreases over the ranges.","acd34428":"Data we are using for this assignment is Cardiovascular Disease and this dataset contains 13\nattributes with 70000 populations. The outcome of this dataset is in binary form which 1\nindicates having cardiovascular disease and 0 represents none.","80e56256":"The next classifier we are tuning is K Nearest Neighbours. According to previous accuracy\ntesting, it has an accuracy of 0.631, which is 0.003 lower compared to decision tree. The first\nthing we would be referring is the Confusion Matrix.","83b64361":"While for diastolic we consider dropping all values bigger than 200 and smaller than 30, and\ndropping all values bigger than 250 and smaller than 80 for systolic blood pressure. The\nabove is considered that having a diastolic 120 and systolic of 180 is considered hypertensive\ncrisis, for conservative purpose, we set it at 160 and 200.\n","f3e603ef":"Age: Age is looking normal for youngest to be 29 and oldest to be 64.   \nHeight: Height of 55 and 250 isn\u2019t normal at all.  \nWeight: Weight of 10kg already tell us there is outlier.  \nSystolic: A negative value of blood pressure is impossible.  \nDiastolic: A negative value of blood pressure is impossible.  ","8f39caa9":"We can observe that from 63 percent accuracy, the model already improved into 74.8 percent\naccuracy, which is an increment of 11%. A 36.4 percent of error rate has dropped to 25\npercent. Precision increased from 64.1 percent to 75.79 percent, an increment of 11.69\npercent. Also, sensitivity increased from 67 percent to 71 percent. These increment in\naccuracies tells us that through fine tuning the model can perform better and quicker.","9d77a4eb":"For height, we can set the range to be 140 and 200, since negative growth could lead to\nshorter height while for weight, a range of 40 to 150 is set.","e7786e62":" we can observe that weight and height is having correlation, therefore we can remove\nweight and height from the dataframe and replace it with a body mass index (BMI)."}}