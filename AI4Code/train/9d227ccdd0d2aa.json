{"cell_type":{"246cde52":"code","23130412":"code","cfbb91ca":"code","d0c37655":"code","c97d2498":"code","27d12acf":"code","b4117bab":"code","949bbd6a":"code","53b5c37e":"code","a52d1414":"code","d31f2511":"code","5fda2ac8":"code","766d6260":"code","6006d5a5":"code","53636ecd":"code","dd46116f":"code","4e2f7990":"code","c112a2ac":"code","b853647d":"code","dbac81d7":"code","3ca83c72":"code","5d22279b":"code","96f69dbe":"code","c725a902":"code","a5ba1f4c":"code","c1875770":"code","0076d514":"code","9453a678":"code","673d1520":"code","75b5f409":"code","c9577cb7":"code","deb40d42":"code","1fa62056":"code","17d187a3":"code","38b8685e":"code","69dd77d4":"code","83e9fa3b":"code","0d0d154b":"code","1d4b796c":"code","ac87542a":"code","3a785ddc":"code","237fada9":"code","97a253c0":"markdown","b6e57a4a":"markdown","9165983e":"markdown","ed66c88a":"markdown","4a06fcbd":"markdown","dd77e7d4":"markdown","3f96c726":"markdown","726bc3ce":"markdown","c0a2592b":"markdown","aae65750":"markdown","fed2f445":"markdown","94cd028c":"markdown","0b0f1213":"markdown","603e3d83":"markdown","5819fec9":"markdown","f6573ecb":"markdown","2468d72e":"markdown","65b5eedc":"markdown","f555734b":"markdown","062178a5":"markdown","45eb6cf0":"markdown","a31e6b22":"markdown","a19c7b73":"markdown","3bbd6098":"markdown","8677ed27":"markdown","c5f818c2":"markdown","55b2f6e1":"markdown","a664335a":"markdown","69fb37fd":"markdown","766ca6d4":"markdown","0c9e97a2":"markdown","1e64d937":"markdown"},"source":{"246cde52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23130412":"autos = pd.read_csv('\/kaggle\/input\/used-cars-database-50000-data-points\/autos.csv', encoding='Latin-1')","cfbb91ca":"autos.head()","d0c37655":"autos.info()","c97d2498":"autos.columns","27d12acf":"autos.rename({'yearOfRegistration': 'registration_year',\n             'monthOfRegistration': 'registration_month',\n             'notRepairedDamage': 'unrepaired_damage',\n             'dateCreated': 'date_created',\n             'dateCrawled': 'date_crawled',\n             'offerType': 'offer_type',\n             'vehicleType': 'vehicle_type',\n             'powerPS': 'power_ps',\n             'fuelType': 'fuel_type',\n             'nrOfPictures': 'num_pictures',\n             'postalCode': 'postal_code',\n             'lastSeen': 'last_seen'}, axis=1, inplace=True)\nautos.columns","b4117bab":"# numerical columns\nautos.describe()","949bbd6a":"# string columns\nautos.describe(include='object')","53b5c37e":"# or .unique()\nautos['price'].value_counts().sort_index()","a52d1414":"autos['price'] = autos['price'].str.replace('$', '').str.replace(',', '')","d31f2511":"autos['price'] = autos['price'].astype(float)","5fda2ac8":"# numerical columns\nautos.describe()","766d6260":"autos['odometer'].value_counts().sort_index(key=lambda x: x.str.replace('km', '').str.replace(',', '').astype(int))","6006d5a5":"autos['odometer'] = autos['odometer'].str.replace('km', '').str.replace(',', '')\nautos['odometer'] = autos['odometer'].astype(int)","53636ecd":"# add unit to the name of odometer column\nautos.rename(columns={'odometer': 'odometer_km'}, inplace=True)\nautos.describe()","dd46116f":"autos['odometer_km'].unique().shape","4e2f7990":"autos['odometer_km'].describe()","c112a2ac":"autos['odometer_km'].value_counts().sort_index()","b853647d":"autos['price'].unique().shape","dbac81d7":"autos['price'].describe()","3ca83c72":"autos['price'].value_counts()","5d22279b":"mid_50 = autos['price'].quantile([.25, .75])\nprice_25, price_75 = mid_50.iloc[0], mid_50.iloc[1]\n\niqr = price_75 - price_25\nlow = price_25 - 1.5 * iqr\nhigh = price_75 + 1.5 * iqr\n\nlow, iqr, high","96f69dbe":"autos = autos.loc[autos['price'] < high]\nprint('Count: ', autos.shape[0], '\\nMin price: ', autos['price'].min(), '\\nMax price:', autos['price'].max())","c725a902":"string_dates = autos[['date_crawled', 'last_seen', 'date_created']]\nstring_dates.head()","a5ba1f4c":"date_created = string_dates['date_created'].str[:10]\ndate_created.value_counts(normalize=True, dropna=False).sort_index()","c1875770":"date_created.describe()","0076d514":"date_created.str[:4].astype(int).describe()","9453a678":"last_seen = string_dates['last_seen'].str[:10]\nlast_seen.value_counts(normalize=True, dropna=False).sort_index()","673d1520":"last_seen.describe()","75b5f409":"last_seen.str[:4].astype(int).describe()","c9577cb7":"date_crawled = string_dates['date_crawled'].str[:10]\ndate_crawled.value_counts(normalize=True, dropna=False).sort_index()","deb40d42":"date_crawled.describe()","1fa62056":"date_crawled.str[:4].astype(int).describe()","17d187a3":"autos['registration_year'].describe()","38b8685e":"autos['registration_year'].astype(str).describe()","69dd77d4":"print(\"Number of entries before: \", autos.shape[0])","83e9fa3b":"# Firstly, the registration year can be later than 2016\nyear_high = 2016\n\n# Secondly, let's assume the earliest year in which a car can be registered was the year 1885 (when the first car was invented)\nyear_low = 1885\n\nautos = autos[autos['registration_year'].between(1885, 2016)]\n\n# Lastly, let's say an ad can't be posted before the car was registered\nautos = autos[autos['registration_year'] <= autos['date_created'].str[:4].astype(int)]\n\nprint(\"Number of entries after: \", autos.shape[0])","0d0d154b":"autos['registration_year'].describe()","1d4b796c":"autos['registration_year'].value_counts(normalize=True, dropna=False).sort_index()","ac87542a":"top_5_brands_list = list(autos['brand'].value_counts(normalize=True).head(6).index)\ntop_5_brands_list","3a785ddc":"top_prices_mileage_info = {}\n\n\nfor brand in top_5_brands_list:\n    mean_price = autos.loc[autos['brand'] == brand, 'price'].mean()\n    min_price = autos.loc[autos['brand'] == brand, 'price'].min()\n    max_price = autos.loc[autos['brand'] == brand, 'price'].max()\n    mileage = autos.loc[autos['brand'] == brand, 'odometer_km'].mean()\n    \n    top_prices_mileage_info[brand] = [\"$\" + str(round(mean_price, 2)),\n                                      \"$\" + str(round(min_price, 2)),\n                                      \"$\" + str(round(max_price, 2)),\n                                      round(mileage, 2)]\n    \n\nfor key, val in top_prices_mileage_info.items():\n    print(key, \":\")\n    print('Average price: ', val[0])\n    print('Min price: ', val[1])\n    print('Max price: ', val[2])\n    print('Average mileage', val[3])\n    print('\\n')","237fada9":"price_mileage = pd.DataFrame(data=top_prices_mileage_info, index=['mean_price', 'min_price', 'max_price', 'mean_mileage'])\nprice_mileage = price_mileage.swapaxes('index', 'columns')\nprice_mileage","97a253c0":"### Start with `odometer_km`","b6e57a4a":"All cars were registered from the 1910 to 2016","9165983e":"### 4. Dealing with columns with dates\nHere's some information about date columns in the dataset we know:\n\n- `date_crawled`: added by the crawler, identified as string\n- `last_seen`: added by the crawler, identified as string\n- `date_created`: from the website, identified as string\n- `registration_month`: from the website, identified as numeric\n- `registration_year`: from the website, identified as numeric","ed66c88a":"### We can see from the output from the cell above that: \n* the dataset contains 5000 entries and 20 columns\n* most columns are of string type except for `yearOfRegistration`, `powerPS`, `monthOfRegistration`, `nrOfPictures` and `postalCode`\n* some columns contain NULL values: `vehicleType`, `gearBox`, `model`, `fuelType` and `notRepairedDamage`\n* inconsistent column naming \n* Some dates are identified as string values with others as numeric values","4a06fcbd":"### First take a look at the 'string dates'","dd77e7d4":"### Let's change the type of `price` column to float","3f96c726":"Some observations:\n- for each brand, the prices of hign end cars are roughly the same, around $16,000\n- `ford` and `opel` have cheaper middle end cars and have relatively less mileage","726bc3ce":"### Observations from the output:\n* a couple of columns contain almost (49999 out of 50000) the same value for all rows: `seller` and `offer_type`\n* some string column can be typed to numberic: `price` and `odometer`","c0a2592b":"We've removed around 2000 entries with invalid `registration_year`","aae65750":"### Finally we do the same with `date_crawled`","fed2f445":"### 3. Look for suspicious data \n\nDo this for `odometer_km` and `price` columns","94cd028c":"### Do the same for `odometer` column","0b0f1213":"## Project Introduction\n\nThe dataset is in regards to used car sales fro eBay Kleinanzeigen, a classifieds section of the German eBay website. The dataset is dirty since it contains scrapped data. I will attempt to clean it and peform some analysis work.","603e3d83":"We'll remove some outliers","5819fec9":"Taking a look at the format","f6573ecb":"Some observations for `date_crawled`:\n\n- The ads were scraped from March 5th, 2016 to April 7th, 2016\n- They were scraped on 34 different days, roughly within a month before April 7th, 2016 \n- The highest number of ads scraped in a day during the period is 1785, on April 3rd, 2016","2468d72e":"### 2. Find potentially redundant or mistyped columns ","65b5eedc":"The first thing we notice is that there seems to be some erroneous data. The registration year can't be `1000` or `9999`. Let's do some cleaning.","f555734b":"Some observations for `date_created`:\n\n- The ads were created from August 10th, 2015 to April 7th, 2016\n- They were created on 73 different days\n- The highest number of ads posted in a day during the period is 1797, on April 3rd, 2016","062178a5":"### Now for `price` column","45eb6cf0":"Get the price and mileage information for each of the 5 brands","a31e6b22":"Some observations for `last_seen`:\n\n- The ads were last viewed from March 5th, 2016 to April 7th, 2016\n- They were last viewed on 34 different days, roughly within a month before April 7th, 2016 \n- Most ads (around 10,000 of them) were last viewed on April 6th, 2016","a19c7b73":"The values look okay.","3bbd6098":"### 4. Next, lets find out what kinds of cars were recorded in the dataset","8677ed27":"We have removed entries with prices higher than $16,350.","c5f818c2":"Change type to float","55b2f6e1":"Remove non-numeric characters","a664335a":"Specifically let's take a look at the top 6 most `brand`s in the dataset","69fb37fd":"### Let's also take a look at one of the columns with numeric dates - `registration_year`","766ca6d4":"### Snoop around the dates for a bit, starting with `date_created`\n\nFirst thing we notice is that only the date is specified (not the time)","0c9e97a2":"### 1. Rename columns\n\nchange all column names to be snakecase","1e64d937":"### Then move on to `last_seen`"}}