{"cell_type":{"14eaf549":"code","0322ccdd":"code","b7497476":"code","165b0a9d":"code","ee6b7794":"code","b7bf9374":"code","6217e69c":"code","2754d721":"code","f76060d5":"code","a899dc93":"code","dffca1e9":"code","5ff07070":"code","73ba5e8d":"code","6ed46bf0":"code","0a15922b":"code","71458469":"code","4749bd1b":"code","f57af82e":"code","cd645df7":"code","5e19c0ec":"code","e93d687f":"code","2d9622ab":"code","8eb1142d":"code","442644ce":"code","0696f671":"code","81db5352":"code","86604cbf":"code","1910ec81":"code","cf068a61":"code","bc57d6a1":"code","c0a17ad5":"code","33a18e3b":"code","44bc4e50":"code","5b5bb389":"code","c3805581":"code","13ca1d63":"code","4ea6c64e":"code","7643a5c3":"code","d04cb20d":"code","77b25d65":"code","987b43c7":"code","1c09b613":"code","2aadc963":"code","a52a3376":"code","e01d3864":"code","b41ccdf2":"code","45653d27":"code","02747524":"code","5abc66e0":"code","b94bbfaf":"code","bca1e476":"code","0d5697d3":"code","51269d72":"code","ca2d0b69":"code","13e3d75c":"code","ed8aa7ee":"code","1e3d0bc8":"code","4fc7a2bd":"code","7ce62740":"code","0586bd13":"code","432cf6f7":"code","4196de2c":"code","6f07599c":"code","7b641f90":"code","2ef115ee":"code","e9252c1c":"code","20424968":"markdown","c68dd9f9":"markdown","5edf5e84":"markdown","fb99d3c4":"markdown"},"source":{"14eaf549":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0322ccdd":"!pip install tensorflow_hub --quiet","b7497476":"import tensorflow as tf\nimport os\nimport cv2\nimport json\nimport pandas as pd\nimport numpy as np\nimport PIL\nfrom PIL import Image\nimport random\nfrom sklearn import preprocessing","165b0a9d":"cd ..","ee6b7794":"ls","b7bf9374":"def angle_sign(x):\n    if x < 0:\n        return 0\n    else:\n        return 1","6217e69c":"scaler = preprocessing.StandardScaler()\n# scaler = preprocessing.Normalizer()","2754d721":"tr_path = 'input\/rdocuments\/rdocuments\/'\ntr_csv = 'input\/rdocuments\/r-images.csv'\n\ntrain_label_df = pd.read_csv(tr_csv)\ntrain_label_df['angle'] = train_label_df['angle'].apply(lambda x: -1*(x))\ntrain_label_df['angle_scaled'] = scaler.fit_transform(train_label_df['angle'].values.reshape(len(train_label_df), 1)) \n(img_width, img_height) = (224, 224)\nBATCH_SIZE = 64\n\ntrain_label_df.head(5)","f76060d5":"scaler.inverse_transform(train_label_df['angle_scaled'][0].reshape(1,1))","a899dc93":"train_label_df['angle_scaled'].plot()","dffca1e9":"datagen = tf.keras.preprocessing.image.ImageDataGenerator(validation_split=0.20, rescale=1\/255)\ntrain_generator = datagen.flow_from_dataframe(dataframe=train_label_df, \n                                              directory=tr_path, \n                                              x_col=\"id\", y_col=\"angle\", \n                                              class_mode=\"raw\",\n                                              subset='training',\n                                              target_size=(img_width, img_height), \n                                              batch_size=BATCH_SIZE)\n\nvalid_generator = datagen.flow_from_dataframe(dataframe=train_label_df, \n                                              directory=tr_path, \n                                              x_col=\"id\", y_col=\"angle\", \n                                              class_mode=\"raw\",\n                                              subset='validation',\n                                              target_size=(img_width, img_height), \n                                              batch_size=BATCH_SIZE)","5ff07070":"%%time\nx_train = []\n\nfor x in train_label_df['id']:\n    img = cv2.imread(os.path.join('input\/rdocuments\/rdocuments\/', x))\n    resized_arr = cv2.resize(img, (img_width, img_height))\n    x_train.append(resized_arr)","73ba5e8d":"x_np = np.array(x_train)\nx_np = x_np.reshape(len(x_train), img_height, img_width, 3)\nx_np = x_np\/255","6ed46bf0":"y_train = train_label_df['angle_scaled'].values\ny_train[0:5]","0a15922b":"c_model = tf.keras.models.Sequential()\nc_model.add(tf.keras.layers.Input(shape=(224, 224, 3)))\nc_model.add(tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 3), \n                                   activation='relu', padding='same'))\nc_model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\nc_model.add(tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), \n                                   activation='relu', padding='same'))\nc_model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\nc_model.add(tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), \n                                   activation='relu', padding='same'))\nc_model.add(tf.keras.layers.GlobalMaxPooling2D())\nc_model.add(tf.keras.layers.Dense(512, activation='relu'))\nc_model.add(tf.keras.layers.Dropout(0.2))\nc_model.add(tf.keras.layers.Dense(256, activation='relu'))\nc_model.add(tf.keras.layers.Dropout(0.2))\nc_model.add(tf.keras.layers.Dense(1, activation=tf.keras.activations.linear))\n\nc_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0005),\n                loss=tf.keras.losses.mean_absolute_error,)\n#                 metrics=[tf.keras.metrics.mean_squared_error])","71458469":"c_hist = c_model.fit(x_np,\n                     y_train,\n                     validation_split=0.2,\n                     batch_size=64,\n                     epochs=50,\n                     verbose=2)","4749bd1b":"his_df = pd.DataFrame(c_hist.history)\npt = his_df[2:].plot(figsize=(10, 8))\nfig = pt.get_figure()\nfig.savefig(\"working\/scaledmae.png\")","f57af82e":"images0 = os.listdir(tr_path)","cd645df7":"images0 = os.listdir(tr_path)\nidx = random.randint(600, 950)\nimage = cv2.imread('input\/rdocuments\/rdocuments\/' + images0[idx])\nimage = cv2.resize(image, (img_width, img_height))\nimage = image.reshape(1, img_height, img_width, 3)\nimage = image\/255\nangle = c_model.predict(image)\nprint(images0[idx])\nprint('-------------------------')\nprint(scaler.inverse_transform(train_label_df[train_label_df['id'] == images0[idx]][['angle_scaled']].values))\n\nprint(scaler.inverse_transform(angle))","5e19c0ec":"!wget -O working\/payload.png https:\/\/miro.medium.com\/max\/1200\/1*xFrTKax5tKxLdGMTU7qUMQ.png","e93d687f":"imge = cv2.imread('working\/payload.png')\nimge = cv2.resize(imge, (img_width, img_height))\nimge = imge.reshape(1, img_height, img_width, 3)\nimge = imge\/255\nangle = c_model.predict(imge)\nrt_angle = scaler.inverse_transform(angle)[0][0]\nprint(rt_angle)","2d9622ab":"import matplotlib.pyplot as plt","8eb1142d":"im1 = Image.open('working\/payload.png')\nim2 = im1.rotate(rt_angle, PIL.Image.NEAREST, expand = 1)\nplt.imshow(im2)","442644ce":"plt.imshow(im1)","0696f671":"c_model.save('working\/scaled_model_b_50eps.h5')","81db5352":"import joblib\njoblib.dump(scaler, 'working\/sscaler.gz')\nmy_scaler = joblib.load('working\/sscaler.gz')","86604cbf":"(train_label_df[train_label_df['id'] == images0[1]]['angle'])","1910ec81":"c_model.save('working\/model_dir\/skew_deduction_angle_100_minmax_relu.h5')","cf068a61":"loaded_model = tf.keras.models.load_model('working\/model_dir\/skew_deduction_angle.h5')","bc57d6a1":"!wget -O working\/model_dir\/skew.jpg 'https:\/\/miro.medium.com\/max\/1400\/1*rvqgsUk19Wi50QsIyvt94Q.png'","c0a17ad5":"imh = cv2.imread(\"working\/model_dir\/skew.jpg\")\nimh = np.resize(imh, (1, 224, 224, 3))\nangle = c_model.predict(imh)[0][0]\nang = angle*(range_angle)\nim = Image.open(\"working\/model_dir\/skew.jpg\")\nim2 = im.rotate(ang, PIL.Image.NEAREST, expand = 1, fillcolor = 'white')","33a18e3b":"import matplotlib.pyplot as plt","44bc4e50":"plt.imshow(im2)","5b5bb389":"plt.imshow(im)","c3805581":"import tensorflow_hub as hub\nimport tensorflow as tf\nimport os\nimport cv2\nimport json\nimport pandas as pd\nimport numpy as np\nimport PIL\nfrom PIL import Image","13ca1d63":"tr_path = 'input\/rdocuments\/rdocuments\/'\ntr_csv = 'input\/rdocuments\/r-images.csv'\n\ntrain_label_df = pd.read_csv(tr_csv)\n\nrange_angle = max(train_label_df['angle']) - min(train_label_df['angle'])\ntrain_label_df['angle'] = (train_label_df['angle'])\/range_angle\n\n(img_width, img_height) = (224, 224)\nBATCH_SIZE = 32\n\ntrain_label_df.shape","4ea6c64e":"datagen = tf.keras.preprocessing.image.ImageDataGenerator(validation_split=0.10)\ntrain_generator = datagen.flow_from_dataframe(dataframe=train_label_df, \n                                              directory=tr_path, \n                                              x_col=\"id\", y_col=\"angle\", \n                                              class_mode=\"raw\",\n                                              subset='training',\n                                              target_size=(img_width, img_height), \n                                              batch_size=BATCH_SIZE)\n\nvalid_generator = datagen.flow_from_dataframe(dataframe=train_label_df, \n                                              directory=tr_path, \n                                              x_col=\"id\", y_col=\"angle\", \n                                              class_mode=\"raw\",\n                                              subset='validation',\n                                              target_size=(img_width, img_height), \n                                              batch_size=BATCH_SIZE)","7643a5c3":"t_model = tf.keras.models.Sequential()\nt_model.add(hub.KerasLayer(\"https:\/\/tfhub.dev\/google\/imagenet\/mobilenet_v3_small_075_224\/feature_vector\/5\",\n                   trainable=False))\nt_model.add(tf.keras.layers.Dense(512, activation='relu'))\nt_model.add(tf.keras.layers.Dropout(0.1))\nt_model.add(tf.keras.layers.Dense(256, activation='relu'))\nt_model.add(tf.keras.layers.Dense(128, activation='linear'))\nt_model.add(tf.keras.layers.Dense(64, activation='linear'))\nt_model.add(tf.keras.layers.Dense(1, activation=tf.keras.activations.linear))\n\nt_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0005),\n                loss=tf.keras.losses.MSE,\n                metrics=[tf.keras.metrics.MAE])","d04cb20d":"t_callbacks = [\n    tf.keras.callbacks.ModelCheckpoint(filepath='working\/model_dir\/modelfinal.h5', \n                                       save_best_only=True,\n                                      monitor='val_mean_absolute_error'),\n    tf.keras.callbacks.TensorBoard(log_dir='working\/model_dir\/logs')\n]","77b25d65":"training_steps_per_epoch = np.ceil(train_generator.samples \/ BATCH_SIZE)\nvalidation_steps_per_epoch = np.ceil(valid_generator.samples \/ BATCH_SIZE)\nepochs = 100","987b43c7":"t_hist = t_model.fit(train_generator,\n                     validation_data=valid_generator,\n                     steps_per_epoch=training_steps_per_epoch,\n                     epochs=60,\n                     verbose=2, \n                     callbacks=t_callbacks)","1c09b613":"import tensorflow as tf\nimport os\nimport cv2\nimport json\nimport pandas as pd\nimport numpy as np\nimport PIL\nfrom PIL import Image\nimport random","2aadc963":"cd ..","a52a3376":"ls","e01d3864":"from sklearn.preprocessing import MinMaxScaler, RobustScaler\nscaler = MinMaxScaler()","b41ccdf2":"def angle_sign(x):\n    if x < 0:\n        return 1\n    else:\n        return 0","45653d27":"tr_path = 'input\/rdocuments\/rdocuments\/'\ntr_csv = 'input\/rdocuments\/r-images.csv'\n\ntrain_label_df = pd.read_csv(tr_csv)\ntrain_label_df['rot_angle'] = train_label_df['angle'].apply(lambda x: -1*(x))\ntrain_label_df['ang_label'] = train_label_df['rot_angle'].apply(lambda x: angle_sign(x))\ntrain_label_df['angle_abs'] = train_label_df['rot_angle'].apply(lambda x: abs(x))\n(img_width, img_height) = (224, 224)\nBATCH_SIZE = 64\ntrain_label_df.head(2)","02747524":"th = 0.3","5abc66e0":"%%time\nx_train = []\n\nfor x in train_label_df['id']:\n    img = cv2.imread(os.path.join('input\/rdocuments\/rdocuments\/', x))\n    resized_arr = cv2.resize(img, (img_width, img_height))\n    x_train.append(resized_arr)","b94bbfaf":"x_np = np.array(x_train)\nx_np = x_np.reshape(len(x_train), img_height, img_width, 3)\nx_np = x_np\/255","bca1e476":"y_np1 = train_label_df['rot_angle'].values.reshape(len(train_label_df), 1)\ny_np1 = scaler.fit_transform(y_np1)\ny_np2 = train_label_df[['ang_label']].values","0d5697d3":"y_np2[0:4]","51269d72":"y_np1[0:4]","ca2d0b69":"inputs = tf.keras.layers.Input(shape=[img_width, img_height, 3], name='main_input')\nmain_branch = tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), \n                                   activation='relu', padding='same')(inputs)\nmain_branch = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(main_branch)\nmain_branch = tf.keras.layers.GlobalMaxPooling2D()(main_branch)\nmain_branch = tf.keras.layers.Dense(1056, activation='relu')(main_branch)\nmain_branch = tf.keras.layers.Dense(512, activation='relu')(main_branch)\nmain_branch = tf.keras.layers.Dropout(0.3)(main_branch)\nmain_branch = tf.keras.layers.Dense(256, activation='relu')(main_branch)\n\nangle_branch = tf.keras.layers.Dense(1, activation=tf.keras.activations.linear, \n                                     name='angle_output')(main_branch)\n\nang_label_branch = tf.keras.layers.Dense(1, activation=tf.keras.activations.sigmoid, \n                                         name='angle_label_output')(main_branch)\n\nmodel = tf.keras.Model(inputs = inputs, outputs = [angle_branch, ang_label_branch])\n# model.summary()","13e3d75c":"# help(tf.keras.losses.BinaryCrossentropy)","ed8aa7ee":"opt = tf.keras.optimizers.Adam(learning_rate=1e-4)\nmodel.compile(optimizer=opt,\n              loss={\n                  'angle_output': tf.keras.losses.mean_squared_error, \n                  'angle_label_output': tf.keras.losses.BinaryCrossentropy(from_logits=False)\n              },\n              metrics={\n                  'angle_output': tf.keras.metrics.mean_squared_error,\n                  'angle_label_output': \"accuracy\"\n              })","1e3d0bc8":"history = model.fit(\n                    {'main_input': x_np},\n                    {'angle_output': y_np1, \n                     'angle_label_output': y_np2},\n                    epochs=50, \n                    batch_size=64,\n                    verbose=2,\n                    validation_split=0.2\n                   )","4fc7a2bd":"hist_df = pd.DataFrame(history.history)\nhist_df.plot(figsize=(15, 10))","7ce62740":"plot = hist_df.plot(figsize=(15, 10))\nfig = plot.get_figure()\nfig.savefig(\"working\/modelminmax.png\")","0586bd13":"images0 = os.listdir(tr_path)\nidx = random.randint(0, 400)\nimage = cv2.imread('input\/rdocuments\/rdocuments\/' + images0[idx])\nimage = np.resize(image, (1, 224, 224, 3))\nimage = image\/255\nprint(images0[idx])\nprint('-------------------------')\nprint(train_label_df[train_label_df['id'] == images0[idx]][['rot_angle', 'ang_label']].values[0][0])\nprint(train_label_df[train_label_df['id'] == images0[idx]][['rot_angle', 'ang_label']].values[0][1])","432cf6f7":"angle, angle_lab = model.predict(image)\nscaler.inverse_transform(angle) , round(angle_lab[0][0],3)","4196de2c":"scaler.inverse_transform(angle)","6f07599c":"model.save('working\/model_dir\/skew_deduction_mtl_MSE_rbs_0.4.h5')","7b641f90":"predictions","2ef115ee":"import joblib\njoblib.dump(scaler, 'working\/rbscaler.gz')\nmy_scaler = joblib.load('working\/rbscaler.gz')","e9252c1c":"my_scaler.inverse_transform(angle)","20424968":"## Model\n\nUsing CNN and building a single regression task model","c68dd9f9":"## Transfer learning","5edf5e84":"## Multi-task model","fb99d3c4":"### inference"}}