{"cell_type":{"1bda1987":"code","cd69a73c":"code","d0eb5c3d":"code","48c08cbf":"code","8a9132fc":"code","6705958d":"code","cd9a854c":"code","437d98b9":"code","f94cd2f8":"code","88ccef0c":"code","2b1914cb":"code","edcb17db":"code","47568aa2":"code","d8f075bc":"code","c044af1f":"code","b5a8e121":"code","b7b8bc2f":"code","3ba7093f":"code","edef1387":"code","cb9356bf":"code","312be8c9":"code","0b31d45a":"code","69644d85":"code","1262dd00":"code","ab193dc3":"code","39037dff":"code","ec2d7a0f":"code","4d105683":"code","006dccd2":"code","a4173d04":"code","29a643b4":"markdown","f35ce971":"markdown","a6a843fb":"markdown","54db95eb":"markdown","dea60e8c":"markdown","95ef5963":"markdown","30a7d536":"markdown"},"source":{"1bda1987":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd69a73c":"ar = pd.read_csv('..\/input\/amazon-fine-food-reviews\/Reviews.csv')\nar.head()","d0eb5c3d":"ar.shape","48c08cbf":"ar.info()","8a9132fc":"ar.describe().transpose()","6705958d":"ar.isna().sum()","cd9a854c":"ar = ar.dropna(subset=['Summary'])","437d98b9":"ar.isnull().sum()","f94cd2f8":"ar.shape","88ccef0c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\ncolor = sns.color_palette()\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2b1914cb":"fig = px.histogram(ar, x=\"Score\")\nfig.update_traces(marker_color=\"turquoise\",marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5)\nfig.update_layout(title_text='Product Score Count')\nfig.show()","edcb17db":"import nltk\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud,STOPWORDS\nstopwords = set(STOPWORDS)\nstopwords.update([\"br\", \"href\"])\ntextt = \" \".join(review for review in ar.Text)\nwordcloud = WordCloud(stopwords=stopwords).generate(textt)\nplt.figure(figsize = (15,10))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.savefig('wordcloud1.png')\nplt.show()","47568aa2":"ar = ar[ar['Score'] != 3]\nar['sentiment'] = ar['Score'].apply(lambda rating : 'Positive' if rating > 3 else 'Negative')\nfig = px.histogram(ar, x=\"Score\")\nfig.update_traces(marker_color=\"turquoise\",marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5)\nfig.update_layout(title_text='Product Score Count')\nfig.show()","d8f075bc":"positive = ar[ar['Score'] > 3]\nnegative = ar[ar['Score'] < 3]","c044af1f":"negative.head()","b5a8e121":"positive.head()","b7b8bc2f":"stopwords = set(STOPWORDS)\nstopwords.update([\"br\", \"href\",\"good\",\"great\"])  \npos = \" \".join(review for review in positive.Summary)\nwordcloud2 = WordCloud(stopwords=stopwords).generate(pos)\nplt.figure(figsize = (15,10))\nplt.imshow(wordcloud2, interpolation='bilinear')\nplt.axis(\"off\")\nprint(\"Positive Words:\\n\\n\")\nplt.show()","3ba7093f":"negative['Summary'] = negative['Summary'].astype('str')","edef1387":"neg = \" \".join(review for review in negative.Summary)\nwordcloud3 = WordCloud(stopwords=stopwords).generate(neg)\nplt.figure(figsize = (15,10))\nplt.imshow(wordcloud3, interpolation='bilinear')\nplt.axis(\"off\")\nprint(\"Negative Words:\\n\\n\")\nplt.show()","cb9356bf":"fig = px.histogram(ar, x=\"sentiment\")\nfig.update_traces(marker_color=\"indianred\",marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5)\nfig.update_layout(title_text='Product Sentiment')\nfig.show()","312be8c9":"def remove_punc(text):\n    final = \"\".join(u for u in text if u not in (\"?\", \".\", \";\", \":\",  \"!\",'\"'))\n    return final\nar['Text'] = ar['Text'].apply(remove_punc)\nar['Summary'] = ar['Summary'].apply(remove_punc)","0b31d45a":"ar1 = ar[['sentiment', 'Summary']]\nar1.head()","69644d85":"ar1['sentiment'] = ar1['sentiment'].apply(lambda senti : +1 if senti == 'Positive' else -1)\nar1.head()","1262dd00":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(ar1['Summary'], ar1['sentiment'], test_size = 0.1)","ab193dc3":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(token_pattern=r'\\b\\w+\\b')\nX_train =  cv.fit_transform(X_train)\nX_test = cv.transform(X_test)","39037dff":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()","ec2d7a0f":"lr.fit(X_train,y_train)","4d105683":"predictions = lr.predict(X_test)","006dccd2":"from sklearn.metrics import confusion_matrix,classification_report\nnew = np.asarray(y_test)\nprint('Confusion Matrix:\\n\\n', confusion_matrix(predictions,y_test))\n","a4173d04":"print('Classification report:\\n\\n', classification_report(predictions,y_test))","29a643b4":"Uploading the dataset","f35ce971":"Prediction analysis of the model.","a6a843fb":"Cleaning and selecting particular data","54db95eb":"Splitting the dataset into positive and negative after removing the neutal values\ni.e. \nneutral: score = 3 \npositive: score > 3 \nnegative: score < 3","dea60e8c":"Training the logistic regression model","95ef5963":"Investigating the dataset","30a7d536":"Splitting data into test and train"}}