{"cell_type":{"04eef75f":"code","7f8f61f9":"code","e05c1eeb":"code","8f48a5a6":"code","13fa38b7":"code","2feb41eb":"code","84bf68d5":"code","0bc1f3e9":"code","183b09cb":"code","40284688":"code","48073611":"code","ccdc1aca":"code","88f08033":"code","5794124b":"code","ffab8a39":"code","a1e4433e":"code","9a828dc4":"code","24be2c87":"markdown","30eb4dcc":"markdown","a934655d":"markdown","89ca6605":"markdown","d05a6559":"markdown","40098a70":"markdown","7f5d9d64":"markdown","434a6c28":"markdown","e53c6058":"markdown","01eba502":"markdown","d690991f":"markdown","10867d27":"markdown","c348980e":"markdown","23283ca0":"markdown","7b8bbc17":"markdown","3f4489c9":"markdown","57e7b8d1":"markdown","c72abd43":"markdown","8e06ee28":"markdown","b3fad272":"markdown","1dc09da1":"markdown","a51daf7d":"markdown","1d8aea8c":"markdown","8fe6616c":"markdown","bff48c42":"markdown","cb8f3691":"markdown","d3c0b4aa":"markdown","8185d0b0":"markdown","1701538e":"markdown"},"source":{"04eef75f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt \n\nimport gc\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")","7f8f61f9":"def make_features(df):\n\n    # Date\n    df['date'] = df['date'].str.replace(r'[\u5e74,\u6708]', '\/')\n    df['date'] = df['date'].str.replace(r'[\u65e5]', '')\n\n    df[['year','month','day']] = df['date'].str.split('\/', expand=True).astype(int)\n\n\n    # Volume\n    df['volume'].fillna(-1,inplace=True)\n    df['volume'] = df['volume'].astype(int)\n\n    # Make target feature\n    df['change'] = df['close'] - df['open']\n\n    df['target'] = np.nan\n\n    df.loc[df[df['change'] > 0].index,'target'] = 1\n    df.loc[df[df['change'] <= 0].index,'target'] = 0\n\n\n    # Shift features - p as previous\n    df['p_volume'] = df['volume'].shift(-1)\n    df['p_close'] = df['close'].shift(-1)\n    df['p_p_close'] = df['close'].shift(-2)\n    df['p_high'] = df['high'].shift(-1)\n    df['p_low'] = df['low'].shift(-1)\n    df['p_open'] = df['open'].shift(-1)\n\n    df = df[['year','month','day','open','close','p_close','p_p_close','p_volume','p_high','p_low','p_open','target']]\n\n    return df\n","e05c1eeb":"def stat_features(df):\n    \n    # Make change in rate from previous open to current one\n    df['change'] = (df['open'] - df['p_close']) \/ df['open']\n\n    durations = [2,5,7]\n\n    for days in durations:\n        df['change_' + str(days) + '_days_sum'] = df['change'].rolling(days).sum()\n\n    # print(df[['year','change','var_3_days']].head(10))\n\n    return df","8f48a5a6":"def volatility_ratio(df):\n    \n    # Current True Range = Maximum\u2212Minimum\n    # Maximum = Average of current day\u2019s high and yesterday\u2019s close\n    df['maximum'] = (df['p_high'] + df['p_p_close']) \/ 2\n    # Minimum= Average of today\u2019s low and yesterday\u2019s close\n    df['minimum'] = (df['p_low'] + df['p_p_close']) \/ 2\n    \n    df['CTR'] = df['maximum'] - df['minimum']\n\n    period = 10\n    \n    # HIGH = Average of the high prices of each day over time period x \n    df['high_sum_'+str(period)] = df['high'].rolling(period).sum() \/ period\n    # LOW = Average of the low prices of each day over time period x\n    df['low_sum_'+str(period)] = df['low'].rolling(period).sum() \/ period\n    \n    # PTR = Previous true range over x number of days\n    df['PTR'] = df['high_sum_'+str(period)] - df['low_sum_'+str(period)]\n    \n    # Volatility Ratio\n    df['vr'] = df['CTR'] \/ df['PTR']\n    \n    df.drop(['p_p_close','maximum','minimum','CTR','high_sum_'+str(period),'low_sum_'+str(period),'PTR'],axis=1,inplace=True)\n\n    ","13fa38b7":"def simple_moving_averages(df):\n    \n    periods = [7,30,120]\n    \n    for period in periods:\n        df['SMA_'+str(period)] = df['p_close'].rolling(period).sum() \/ period\n        \n        # Trake difference and normalize it\n        df['SMA_'+str(period)] = (df['open'] - df['SMA_'+str(period)]) \/ df['open']\n        ","2feb41eb":"def pivot(df):\n    \n    # PP = (close + High + Low) \/ 3\n    df['PP'] = (df['p_close'] + df['p_high'] + df['p_low']) \/ 3\n    \n    # PP + (PP - L)\n    df['R1'] = df['PP']*2 - df['p_low']\n    # Take difference and normalize it\n    df['R1_ratio'] = (df['R1'] - df['open']) \/ df['open']\n    \n    # PP + (PP - H)\n    df['S1'] = df['PP']*2 - df['p_high']\n    # Take difference and normalize it\n    df['S1_ratio'] = (df['open']-df['S1']) \/ df['open']\n    \n    df.drop(['PP'],axis=1,inplace=True)\n    ","84bf68d5":"def rsi(df):\n    \n    # RSI = A\/(A+B)\n    # A = average price of positive difference in 14 days\n    # B = average price of negative difference in 14 days\n    df['diff'] = df['p_close'].diff()\n\n    df['up'] = df['diff'].rolling(14).apply(lambda x: x[x>0].mean())\n    df['down'] = df['diff'].rolling(14).apply(lambda x: x[x<0].mean())\n    \n    df['rsi'] = df['up'] \/ (df['up'] + df['down'])\n    \n    df.drop(['up','down'],axis=1,inplace=True)\n    ","0bc1f3e9":"train = pd.read_csv('..\/input\/nikkei\/nikkei.csv')\n\n# Change newest date \u2192 oldest date to oldest data \u2192 newest date of rows\ntrain = train[::-1]\ntrain.reset_index(drop=True,inplace=True)\n\n# print(train['date'])\n\n# Preproecess features\nmake_features(train)\n\ntrain = train[train['year'] > 2000]\n\nstat_features(train)\nsimple_moving_averages(train)\nvolatility_ratio(train)\npivot(train)\n\n# Get rid of null rows\ntrain = train[14:]\n\nprint(train.head())\nprint(train.columns.values)","183b09cb":"year = 2000\n\ntrain['p_clo_change'] = (train['close']-train['p_close']) \/ train['p_close'] * 100\n\ntemp = train[(train['year'] > year) & (train['year'] != 2008)]\n\n# print(train['ope_change'].value_counts())\n\ns_mean = temp.groupby('month')['p_clo_change'].mean()\ns_var = temp.groupby('month')['p_clo_change'].var()\n\nplt.figure(figsize=(10,5))\nplt.title('Change in price from ' + str(year) + ' to 2020\/02 (%) by day')\n\nsns.barplot(s_mean.index,s_mean)\n\nplt.figure(figsize=(10,5))\nsns.barplot(s_var.index,s_var)\n\nprint(s_mean)\nprint(s_var)\n\nplt.show()\n\ndel temp; gc.collect()\n\n","40284688":"# Change in price = (close - previous close price) (From 2001 to 2020\/02 excluding 2008)\n\ntemp = train[(train['year'] > year) & (train['year'] != 2008)]\n\n# print(train['ope_change'].value_counts())\n\ns_mean = temp.groupby('day')['p_clo_change'].mean()\ns_var = temp.groupby('day')['p_clo_change'].var()\ns_count = temp.groupby('day')['p_clo_change'].count()\n\nplt.figure(figsize=(10,5))\nplt.title('Change in price from ' + str(year) + ' to 2020\/02 (%) by day')\n\nsns.barplot(s_mean.index,s_mean)\n\nplt.figure(figsize=(10,5))\nsns.barplot(s_var.index,s_var)\n\nprint(s_mean)\nprint(s_var)\nprint(s_count)\n\nplt.show()\n\ndel temp; gc.collect()\n","48073611":"# Change in price = (close - previous close price) (From 2001 to 2020\/02 excluding 2008)\n\nyear = 2010\n\ntemp = train[(train['year'] > year) & (train['year'] != 2008) & (train['month'].isin([3,6,9,12]))]\n\n# print(train['ope_change'].value_counts())\n\ns_mean = temp.groupby('day')['p_clo_change'].mean()\ns_var = temp.groupby('day')['p_clo_change'].var()\ns_count = temp.groupby('day')['p_clo_change'].count()\n\nplt.figure(figsize=(10,5))\nplt.title('Change in price from ' + str(year) + ' to 2020\/02 (%) by day')\n\nsns.barplot(s_mean.index,s_mean)\n\nplt.figure(figsize=(10,5))\nsns.barplot(s_var.index,s_var)\n\nprint(s_mean)\nprint(s_var)\nprint(s_count)\n\nplt.show()\n\ndel temp; gc.collect()\n\n","ccdc1aca":"year = 2010\n\ntrain['ope_change'] = (train['close']-train['open']) \/ train['open'] * 100\n\ntemp = train[(train['year'] > year) & (train['year'] != 2008)]\n\n\n# print(train['ope_change'].value_counts())\n\ns_mean = temp.groupby('month')['ope_change'].mean()\ns_var = temp.groupby('month')['ope_change'].var()\n\nplt.figure()\nplt.title('Change in price from ' + str(year) + ' to 2020\/02 (%)')\n\nsns.barplot(s_mean.index,s_mean)\n\nplt.figure()\nsns.barplot(s_var.index,s_var)\n\nplt.show()\n\nprint(s_mean)\nprint(s_var)\n\ndel temp; gc.collect()\n","88f08033":"# R1 = R1 - opening, positive: opening is below R1\n# S1 = opening - S1, positive: opening is above S1\n\nfig,ax = plt.subplots(1,2,figsize=(10,5),sharex=True)\n\nax[0].set_title('R1_ratio vs (closing-opening)')\nax[0].scatter(train['R1_ratio'],train['ope_change'])\nax[0].set_xlabel('R1_ratio')\nax[0].set_ylabel('Change in price')\n\nax[1].set_title('S1_ratio vs (closing-opening)')\nax[1].scatter(train['S1_ratio'],train['ope_change'])\nax[1].set_xlabel('S1_ratio')\nax[1].set_ylabel('Change in price')\n\nplt.show()","5794124b":"fig,ax = plt.subplots(1,3,figsize=(15,5),sharex=True)\n\nsmas = ['SMA_7','SMA_30','SMA_120']\n\nfor i,sma in enumerate(smas):\n    ax[i].set_title(str(sma) + ' vs (closing-opening)')\n    ax[i].scatter(train[sma],train['ope_change'])\n    ax[i].set_xlabel(str(sma))\n    ax[i].set_ylabel('Change in price')\n\nplt.show()","ffab8a39":"fig,ax = plt.subplots(1,1,figsize=(10,5),sharex=True)\n\nax.set_title('Volatility ratio vs (closing-opening)')\nax.scatter(train['vr'],train['ope_change'])\nax.set_xlabel('Volatility')\nax.set_ylabel('Change in price')","a1e4433e":"fig,ax = plt.subplots(1,2,figsize=(15,5),sharex=True)\n\ntrain['p_high_ratio'] = (train['p_high'] - train['open']) \/ train['open'] \ntrain['p_low_ratio'] = (train['open']-train['p_low']) \/ train['open'] \n\nsmas = ['p_high_ratio','p_low_ratio']\n\nfor i,sma in enumerate(smas):\n    ax[i].set_title(str(sma) + ' vs (closing-opening)')\n    ax[i].scatter(train[sma],train['ope_change'])\n    ax[i].set_xlabel(str(sma))\n    ax[i].set_ylabel('Change in price')\n\nplt.show()","9a828dc4":"fig,ax = plt.subplots(1,2,figsize=(15,5),sharex=True)\n\ntrain['p_close_ratio'] = (train['p_close'] - train['open']) \/ train['open'] \ntrain['p_open_ratio'] = (train['p_open'] - train['open']) \/ train['open'] \n\nsmas = ['p_open_ratio','p_close_ratio']\n\nfor i,sma in enumerate(smas):\n    ax[i].set_title(str(sma) + ' vs (closing-opening)')\n    ax[i].scatter(train[sma],train['ope_change'])\n    ax[i].set_xlabel(str(sma))\n    ax[i].set_ylabel('Change in price')\n\nplt.show()","24be2c87":"## previous closing and previous opening ratio ##","30eb4dcc":"## Volatility Ratio ##","a934655d":"Not much difference here.","89ca6605":"Observation\n1. It seems that, around SQ day, there are increasing variance (15th is maximum). This explains intense buying and selling of the futures. \n2. After 17th, after SQ day, it seems that people are more likely to buy stocks and futures. Notice the relatively lower variance of the days after SQ (17th has minimum variance) compared to the variance of the the days before SQ. Count of days are almost same so this seem to be more clear trend.\n3. Notice that the first day of month is more likely to go up while the last day of month is more likely to go down (although the count of 31st is lower). This may explain human psychology which people want to buy stocks at the start of month and sell on the last day of month.","d05a6559":"## Average (close - open price) ##","40098a70":"## Pivot ##","7f5d9d64":"## RSI ##","434a6c28":"(2001~2020\/02 excluding 2008 when Lehman shock was occured)","e53c6058":"### Day in Major SQ Month (3,6,9,12) ###","01eba502":"## Calculate Simple Moving Averages ##","d690991f":"## Average (close - previous close price) ##","10867d27":"# Features #","c348980e":"The variance of change is relatively lower for the later months of the year. This means that the change in price for later months of the year are more stable.\n\nAlso, the variance is lowest on July. This could be because many big traders go to vacation during July and come back at the late of August. During July period, there will be many small traders who usually works at their companies.\n\nFor November, there is expected change in increase of 0.1198%. It may be good idea to buy on September and sell after December.\n\nAlso, notice that there are trends which are going up during September and December, pretty huge drop on January, going up during February and April, going down on May. The price is pretty stable during summer except late August. This leads to the hypothesis that big traders buy stocks and futurs during late August or September and sell them on January. Then, they will start to buy stocks or futurs again on February and sell them on May. On July, they will go to vacations which explains lower variance.","23283ca0":"The pltos seem natural.","7b8bbc17":"Used Data\nhttps:\/\/225labo.com\/modules\/downloads_data\/index.php?page=singlefile&cid=2&lid=112\n\nWe will explore Nikkei futures in this notebook.","3f4489c9":"## Make volatility ratio ##","57e7b8d1":"### Month ###\n\nWe all know that there are pharases such as \"Sell in May and go away.\"\n\nAre these true?","c72abd43":"### Day ###","8e06ee28":"There are possibly some trends. To explain this, we need to know what SQ day is in Nikkei futures.\n\n\"Special Quotation (SQ) The special opening settlement price that determines the value of a Japanese stock index futures or options contract at expiration.\" http:\/\/ifci.ch\/00012865.htm\n\nThis SQ month is important because all futures that traders have will be settled; therefore, some weird movements by big traders could be expected before or after the day of SQ (the second week of Friday in SQ month).\n\nThere are two types of SQ which are mayjor SQ and minor SQ. Major SQ is the SQ for option trading and future trading. Minor SQ is only for option trading.\n\nMajor SQ months: 3,6,9,12.\nMinor SQ months: 1,2,4,5,7,8,10,11.","b3fad272":"## Statistical features ##","1dc09da1":"This Kaggle notebook is continuing to explore more about Nikkei futures. More updates will come in the future.","a51daf7d":"Now if we buy on September and sell on January. We have about 0.315% of change in price which converts to 64 yen (0.64 dollars) assuming nikkei price is 20000 yen (200 dollars) in 1 dollar = 100 yen. For one Nikkei Mini,this amounts to 20000X0.00315\/5X500 = 6500 yen (65 dollars) of profit.","1d8aea8c":"## Moving Average and change in price ##","8fe6616c":"Let's see if opening price starting below R1 or above S1 line affects the change in price.","bff48c42":"## Pivot and Change in Price ##","cb8f3691":"# EDA #","d3c0b4aa":"## Distance from previous High ##","8185d0b0":"## Load data ##","1701538e":"This looks pretty much the same. There aren't much information we can get from such a simple thing."}}