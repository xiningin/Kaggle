{"cell_type":{"dca2e1f4":"code","a395e1ed":"code","1c3ba250":"code","edaea2b8":"code","c729e38f":"code","b230109d":"code","fbefb482":"code","5766e1de":"code","6309a472":"code","d6ee1d75":"code","e89828ea":"code","7d8f90d6":"code","d3134545":"code","035bd696":"code","6ad8e36c":"code","21331e94":"code","ab808457":"code","13b9bd21":"code","2bc156b5":"code","f58c09f4":"code","e0a63319":"code","6d649d90":"code","caab0f17":"markdown","e04686f3":"markdown","413d1a88":"markdown","1095635a":"markdown","6ad357eb":"markdown"},"source":{"dca2e1f4":"import pandas as pd\nfrom PIL import Image\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nimport tensorflow as tf\nfrom tensorflow.data import AUTOTUNE\nfrom tensorflow.keras.models import Model,Sequential\nfrom tensorflow.keras.layers import Dense,Conv2D,Input,Flatten,MaxPool2D,Dropout\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras import initializers\nfrom tensorflow.keras.constraints import max_norm\nfrom tensorflow.keras.layers import MaxPooling2D","a395e1ed":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","1c3ba250":"df.head()","edaea2b8":"X = []\nY = []\nfor i in df.values:\n    X.append(i[1:].reshape((28,28,1)))\n    Y.append(i[0])","c729e38f":"X = np.array(X)\nY = np.array(Y)","b230109d":"X_train,X_next, Y_train, Y_next = train_test_split(X,Y,random_state=46,test_size = 0.4,stratify=Y)\nX_val, X_test, Y_val, Y_test = train_test_split(X_next,Y_next,random_state=46,test_size = 0.3,stratify=Y_next)","fbefb482":"Y_train = to_categorical(Y_train)\nY_val = to_categorical(Y_val)\nY_test = to_categorical(Y_test)","5766e1de":"def create_dataset(dataset):\n    ds=tf.data.Dataset.from_tensor_slices(dataset)\n    ds=ds.batch(32).prefetch(buffer_size=AUTOTUNE)\n    return ds\n\ntrainds = create_dataset((X_train,Y_train))\ntestds = create_dataset((X_test,Y_test))\nvalds = create_dataset((X_val,Y_val))","6309a472":"model = Sequential()\nmodel.add(Conv2D(128, (3,3), padding='same', input_shape=(28,28,1), activation='relu'))\nmodel.add(Conv2D(128, (3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(128, (3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(2))\n\nmodel.add(Conv2D(128, (3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(128, (3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(128, (3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(2))\n\nmodel.add(Conv2D(64, (3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(64, (3,3), padding='same', activation='relu'))\nmodel.add(Conv2D(64, (3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(2))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='softmax'))","d6ee1d75":"model.summary()","e89828ea":"opt = tf.keras.optimizers.Adam(learning_rate=0.0001)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])","7d8f90d6":"model.fit(trainds,epochs=10,validation_data=valds)","d3134545":"model.evaluate(testds)","035bd696":"df1 = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","6ad8e36c":"testX = []\nfor i in df1.values:\n    testX.append(i[:].reshape((28,28,1)))","21331e94":"testX = np.array(testX)","ab808457":"pred = model.predict(testX)","13b9bd21":"result_pred = [np.argmax(x) for x in pred]","2bc156b5":"my_submission = pd.DataFrame({'ImageId': df1.index + 1, 'Label': result_pred})\nmy_submission.head()","f58c09f4":"my_submission.to_csv('submission.csv', index=False)","e0a63319":"import matplotlib.pyplot as plt","6d649d90":"plt.imshow(testX[3])","caab0f17":"# Train Model","e04686f3":"# Create Model CNN","413d1a88":"# Create Dataset","1095635a":"# Read CSV","6ad357eb":"# Test Model To test.csv"}}