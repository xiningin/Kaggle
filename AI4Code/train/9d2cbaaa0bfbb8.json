{"cell_type":{"f4383919":"code","b89eb1f1":"code","e965ea7e":"code","e2fc7e4e":"code","76d7464e":"code","5a36ec01":"code","32cbb258":"code","0dd6cc51":"code","272352f4":"code","2e027f62":"code","fe7cc621":"code","e1564d56":"code","d59bf7a5":"code","7b03783c":"code","1e2afc89":"code","4d987d82":"code","1ff63bc3":"code","9ad67d53":"code","1b4cb226":"code","3f28824e":"code","82d77ba6":"code","b5e920f2":"code","62769e31":"code","9fa24ab5":"code","21c9dc54":"code","27f13bbe":"code","fa036020":"code","cec68dff":"code","8f748606":"code","6754b239":"code","705bac80":"code","91bd350b":"code","7022b8a1":"code","7ac75422":"code","6256af8a":"code","a6f01dd1":"code","1a0e26a8":"code","66e70161":"code","e69da517":"code","b132ae08":"code","76aee36c":"code","aa495ab6":"code","3c7d8841":"code","799e6bdc":"code","9eb7b065":"code","2a7af0be":"code","446106c0":"code","560f91df":"code","23765cf5":"code","a9289db7":"code","34b64e8d":"code","66a4fef3":"code","f52552ba":"code","51c70aa2":"code","8ddfe5cb":"code","25303729":"code","99737a5b":"code","74340404":"code","052ae6ff":"code","83b82509":"code","be49c2a6":"markdown","9c7c0d9c":"markdown","3e5bd198":"markdown","3433e436":"markdown","554c8926":"markdown","bc6feecd":"markdown","5d6a8556":"markdown","e52554a7":"markdown","9b87de87":"markdown","7295b235":"markdown","526ca003":"markdown","0ac8cf24":"markdown","e5ca188a":"markdown","afdd55d5":"markdown","eb090d25":"markdown","4038f460":"markdown","66b01122":"markdown","16ffbaf6":"markdown","d6eb5803":"markdown","49b7d215":"markdown","28761ba1":"markdown","74ae4008":"markdown","b62ab288":"markdown","9effa8d9":"markdown","66422f53":"markdown","a9e61732":"markdown","622ca433":"markdown","6cbe5787":"markdown","e82b4c26":"markdown","84a6e9bf":"markdown","7b835bfa":"markdown","68398049":"markdown","9a46bc6f":"markdown","a8ac173b":"markdown","8f9c61fd":"markdown","c985a0c3":"markdown","0233591f":"markdown","58b5883a":"markdown","46ee92b6":"markdown"},"source":{"f4383919":"from IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))","b89eb1f1":"from collections import Counter\nimport re\nimport os\n\nfrom pylab import *\nimport pandas as pd\nimport seaborn as sns","e965ea7e":"df = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")\ndf.head()","e2fc7e4e":"df.shape","76d7464e":"df.count()","5a36ec01":"df.info()","32cbb258":"df2 = df.copy()","0dd6cc51":"df2[[\"App\", \"Installs\"]]","272352f4":"df2[[\"App\", \"Installs\"]].info()","2e027f62":"Counter(df2['Installs'])","fe7cc621":"# change \"Installs\" column to numeric\n\ndef conv_Installs(n_installs):\n    if n_installs == 'Free':\n        val = 0\n    else:\n        if '+' in n_installs:\n            val = int(n_installs[:-1].replace(',', ''))\n        else:\n            val = int(n_installs)\n    return val\n\ndf2[\"Installs\"] = df2[\"Installs\"].apply(lambda n_installs: conv_Installs(n_installs))","e1564d56":"# sort by 'Installs', 'Rating'\n\ndf2 = df2.sort_values(by=[\"Installs\", \"Rating\"], ascending=False)","d59bf7a5":"# select the first n most popular \"Apps\"\n\nrank = 1\nprev_apps = []\nfor app, installs, rating in df2.iloc[:40][[\"App\", \"Installs\", \"Rating\"]].values:\n    if app not in prev_apps:\n        print(f\"Ranking {rank} | {app} | install: {installs}+ | rating: {rating}\")\n        prev_apps.append(app)\n        rank += 1","7b03783c":"Counter(df2[\"Size\"])","1e2afc89":"# remove rows with 'Varies with device'\n\nindices_varies_with_device = (df2[\"Size\"] != \"Varies with device\").values\ndf2 = df2[indices_varies_with_device]","4d987d82":"# change 'Size' column to numerical values\n\ndef size_coverter(size):\n    size = size.lower()\n    num, eng = float(size[:-1].replace(',', '')), size[-1]\n    \n    eng2multiplier = {'k': 1000, 'm': 1000000, '+': 1}\n    \n    numerical_size = num * eng2multiplier[eng]\n    return numerical_size\n\ndf2[\"Size\"] = df2[\"Size\"].apply(lambda s: size_coverter(s))","1ff63bc3":"n = 0\nprev_apps = []\nfor app, size in df2[[\"App\", \"Size\"]].sort_values(\"Size\", ascending=False).values:\n    if app not in prev_apps:\n        print(f\"Ranking {n+1} | {app} | size: {int(size)}\")\n        n += 1\n        prev_apps.append(app)\n        \n        if n == 10:\n            break","9ad67d53":"import datetime","1b4cb226":"Counter(df2[\"Last Updated\"])","3f28824e":"def covt_date(unique_date):\n    try:\n        month, day, year = re.findall(r\"(\\w+) (\\d+), (\\d+)\", unique_date)[0]\n        pydate = datetime.datetime.strptime(f'{year}-{month}-{day}', '%Y-%B-%d')\n    except IndexError:\n        pydate = np.nan\n    return pydate","82d77ba6":"df2[\"Last Updated\"] = df2[\"Last Updated\"].apply(lambda date: covt_date(date))","b5e920f2":"df2.shape","62769e31":"# remove rows with 'nan' \n\ndf2 = df2.dropna(subset=[\"Last Updated\"])\ndf2.shape","9fa24ab5":"rank = 1\nfor app, last_updated in df2.sort_values(by=\"Last Updated\").iloc[:10][[\"App\", \"Last Updated\"]].values:\n    print(f\"Ranking {rank} | Last Updated: {last_updated} | App: {app}\")\n    rank += 1","21c9dc54":"Counter(df[\"Category\"])","27f13bbe":"df[\"Category\"].values.tolist().index('1.9')","fa036020":"df = df.drop([10472])  # removes typoed-row","cec68dff":"Counter(df[\"Rating\"])","8f748606":"df = df.dropna(subset=[\"Rating\"])","6754b239":"# confirms that Nan is removed.\n\nCounter(df[\"Rating\"])  ","705bac80":"Counter(df[\"Reviews\"])","91bd350b":"df[\"Reviews\"] = df[\"Reviews\"].astype(np.int)","7022b8a1":"Counter(df[\"Size\"])","7ac75422":"# remove rows with 'Varies with device'\n\nindices_varies_with_device = (df[\"Size\"] != \"Varies with device\").values\ndf = df[indices_varies_with_device]","6256af8a":"# change 'Size' column to numerical values\n\ndef size_coverter(size):\n    size = size.lower()\n    num, eng = float(size[:-1].replace(',', '')), size[-1]\n    \n    eng2multiplier = {'k': 1000, 'm': 1000000, '+': 1}\n    \n    numerical_size = num * eng2multiplier[eng]\n    return numerical_size\n\ndf[\"Size\"] = df[\"Size\"].apply(lambda s: size_coverter(s))","a6f01dd1":"# change \"Installs\" column to numeric\n\ndef conv_Installs(n_installs):\n    if n_installs == 'Free':\n        val = 0\n    else:\n        if '+' in n_installs:\n            val = int(n_installs[:-1].replace(',', ''))\n        else:\n            val = int(n_installs)\n    return val\n\ndf[\"Installs\"] = df[\"Installs\"].apply(lambda n_installs: conv_Installs(n_installs))","1a0e26a8":"df[\"Type\"].unique()","66e70161":"df[\"Price\"].unique()","e69da517":"def convt_price(price: str):\n    price = price.replace(\"$\", '')\n    price = np.float(price)\n    return price","b132ae08":"df[\"Price\"] = df[\"Price\"].apply(lambda price: convt_price(price))","76aee36c":"df[\"Content Rating\"].unique()","aa495ab6":"df[\"Genres\"].unique()","3c7d8841":"def covt_date(unique_date):\n    try:\n        month, day, year = re.findall(r\"(\\w+) (\\d+), (\\d+)\", unique_date)[0]\n        pydate = datetime.datetime.strptime(f'{year}-{month}-{day}', '%Y-%B-%d')\n    except IndexError:\n        pydate = np.nan\n    return pydate","799e6bdc":"df[\"Last Updated\"] = df[\"Last Updated\"].apply(lambda date: covt_date(date))","9eb7b065":"# drop this column as 'Last Update' may represent this.","2a7af0be":"df = df.drop(columns=[\"Current Ver\"])","446106c0":"df[\"Android Ver\"].unique()","560f91df":"# drop rows with 'Varies with device'\n\ndf = df[df[\"Android Ver\"] != \"Varies with device\"]","23765cf5":"df.info()  # after cleaned up","a9289db7":"category = pd.DataFrame()\ncategory['category'] = Counter(df[\"Category\"]).keys()\ncategory['val'] = Counter(df[\"Category\"]).values()\ncategory = category.set_index(\"category\")\n\ncategory.plot.pie(y=\"val\", figsize=(20, 5), );\nplt.legend(loc=\"upper right\", bbox_to_anchor=(2, 2));","34b64e8d":"sns.distplot(df.Rating);","66a4fef3":"# correlation\n\ncorr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","f52552ba":"sns.pairplot(df);","51c70aa2":"sns.catplot(\"Category\", \"Rating\", data=df, kind=\"boxen\", aspect=3);\nplt.xticks(rotation=70);","8ddfe5cb":"sns.catplot(\"Type\", \"Rating\", data=df, kind=\"boxen\", aspect=0.7);","25303729":"sns.catplot(\"Type\", \"Rating\", data=df, kind=\"boxen\", \n            hue=\"Content Rating\",\n            aspect=2);","99737a5b":"sns.catplot(\"Genres\", \"Rating\", data=df, kind=\"boxen\", aspect=5)\nplt.xticks(rotation=70);","74340404":"sns.catplot(\"Genres\", \"Rating\", data=df, kind=\"boxen\", \n            col=\"Content Rating\", col_wrap=1,\n            aspect=5)\nplt.xticks(rotation=70);","052ae6ff":"sns.relplot(\"Last Updated\", \"Rating\", data=df, alpha=0.3);","83b82509":"sns.catplot(\"Android Ver\", \"Rating\", data=df, kind=\"boxen\", aspect=3)\nplt.xticks(rotation=70);","be49c2a6":"<b> colum: Rating","9c7c0d9c":"<b> colum: Content Rating","3e5bd198":"DATING-related apps:\n- has the lowest rating on average\n<br><br>\n\nThe following app users have very varying ratings (high variance): \n- BUSINESS\n- DATING\n- FINANCE\n- HEATH_AND_FITNESS\n- LIFESTYLE\n- MEDICAL","3433e436":"should change the type pf 'Reviews' to int","554c8926":"<b> 1) most popular category","bc6feecd":"<b> colum: Installs","5d6a8556":"<b> colum: Reviews","e52554a7":"apps that allow 'Mature 17+' group for rating has particularly higher positive rating when it comes to 'Paid' apps","9b87de87":"## Tasks:\n1) most popular category <br>\n2) app with the largest size<br>\n3) app which hasn't been updated<br>\n4) app with the leargest num of installs<br>","7295b235":"Paid apps have a bit higher ratings. <br>\nMaybe because the paid apps were initially designed better, I suppose.\n\nNonetheless, there's not much difference by the free\/paid","526ca003":"### relationship between 'Genres' & 'Rating' (& 'Content Rating')","0ac8cf24":"### relationship between 'Android Ver' and 'Rating'","e5ca188a":"<b>2) app with the largest size","afdd55d5":"<b>3) app which hasn't been updated","eb090d25":"<b> colum: Price","4038f460":"need to remove 1.9 <- must be typo","66b01122":"## Data Import","16ffbaf6":"### relationship between 'Type (Free\/Paid)' & 'Rating' (& 'Content Rating')","d6eb5803":"<b> colum: Android Ver","49b7d215":"### relationship between 'Category' and 'Rating'","28761ba1":"### relationship between 'Last Updated' and 'Rating'","74ae4008":"<b> colum: Last Updated   ","b62ab288":"It should be noted that there are 'nan' values, which need to be fixed.","9effa8d9":"<b> colum: Current Ver","66422f53":"## Data Anlysis","a9e61732":"From the above scatter, correlation matrices, \n- 'Installs' has a positive-linear relationship with 'Reviews', which makes sense. More download more reviews.","622ca433":"- should remove 'Varies with device' (difficult to standardize..)\n- \"Size\" should be changed to numerical values","6cbe5787":"<b> colum: Genres","e82b4c26":"many ratings are around 4.3","84a6e9bf":"Funny, \n- 'DATING' apps for 'Teen' have a lower rating.\n- 'DATING' apps for 'Mature 17+' have a higher rating.\n\nI guess after 17, people get to have a better chance of getting into some kind of relationship(?), which possibly increases the rating(?)","7b835bfa":"Note that box plots with almost no deviation may be caused due to a small dataset. -> less confident","68398049":"<b> colum: Size","9a46bc6f":"<b> colum: Category","a8ac173b":"### linear relationships between numerical variables","8f9c61fd":"<b> final df.info()","c985a0c3":"### statistical property of each variable","0233591f":"## Data Cleaning","58b5883a":"<b> colum: Type","46ee92b6":"In the datset, there are lots of GAME, FAMILY categories"}}