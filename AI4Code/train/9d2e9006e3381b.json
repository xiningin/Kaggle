{"cell_type":{"676def1f":"code","8fc0ec26":"code","dfcea3b6":"code","649bb713":"code","1ca9c70f":"code","34f82f51":"code","abb600cb":"code","684dd5dd":"code","fa878cbc":"code","1786e5b2":"code","99d66336":"code","4bdd6faa":"code","e9d59b58":"code","664a5917":"code","a74e9c13":"code","3903d4a6":"code","976c3096":"code","1d181a03":"code","261c45dd":"code","a76f3938":"code","d47d20c4":"code","cf1d4489":"markdown","31979599":"markdown","e4b3bc0a":"markdown","f8d8ad88":"markdown"},"source":{"676def1f":"import pandas as pd\nimport tensorflow as tf\nimport numpy as np\n","8fc0ec26":"data = pd.read_csv(\"..\/input\/kick-off\/FIFA_train.csv\")\ndata.head()","dfcea3b6":"traits = [str(i) for i in data['player_traits']]\ntrait = \", \".join(traits)\ntraits = trait.split(\", \")\ntraits = set(traits)\ntraits.remove('nan')\ncopy_traits = traits.copy()\n\nfor phrase in copy_traits:\n    if \"(CPU AI Only)\" in phrase:\n        traits.remove(phrase)\n\ntraits","649bb713":"cols = list(data.columns)\nfloat_cols = cols[cols.index('pace'): cols.index('gk_positioning')+1]\nfloat_cols","1ca9c70f":"cols = list(data.columns)\nadd_cols = cols[cols.index('attacking_crossing'):]\nprint(len(add_cols))\nadd_cols","34f82f51":"positions = set(str(x) for x in data['team_position'])\npositions.remove('nan')\npositions","abb600cb":"data_array = []\nvalues_list = []\nfor i in range(len(data)):\n    if int(data.loc[i, 'value']) == 0:\n        continue\n    curr_list = []\n    curr_list.append(int(data.loc[i, 'age']))\n    curr_list.append(int(data.loc[i, 'height_cm']))\n    curr_list.append(int(data.loc[i, 'weight_kg']))\n    curr_list.append(int(data.loc[i, 'overall']))\n    curr_list.append(int(data.loc[i, 'potential']))\n\n    if str(data.loc[i, 'preferred_foot']) == \"Right\":\n        curr_list.append(1)\n    elif str(data.loc[i, 'preferred_foot']) == \"Left\":\n        curr_list.append(-1)\n    else:\n        curr_list.append(0)\n\n    curr_list.append(int(data.loc[i, 'international_reputation']))\n    curr_list.append(int(data.loc[i, 'weak_foot']))\n    curr_list.append(int(data.loc[i, 'skill_moves']))\n\n    try:\n        curr_list.append(int(data.loc[i, 'release_clause_eur']))\n    except ValueError:\n        curr_list.append(0)\n\n    if str(data.loc[i, 'skill_moves']) == \"Lean\":\n        curr_list.append(-1)\n    elif str(data.loc[i, 'skill_moves']) == \"Normal\":\n        curr_list.append(0)\n    elif str(data.loc[i, 'skill_moves']) == \"Stocky\":\n        curr_list.append(1)\n    else:\n        curr_list.append(0)\n    for col in float_cols:\n        try:\n            curr_list.append(int(data.loc[i, col]))\n        except ValueError:\n            curr_list.append(0)\n    for col in add_cols:\n        val = data.loc[i, col]\n        try:\n            curr_list.append(int(val))\n        except ValueError:\n            try:\n                if '+' in str(val):\n                    a, b = val.split('+')\n                    curr_list.append(int(a) + int(b))\n                elif '-' in str(val):\n                    a, b = val.split('-')\n                    curr_list.append(int(a) - int(b))\n                else:\n                    curr_list.append(0)\n            except TypeError:\n                curr_list.append(0)\n    curr_trait = str(data.loc[i, 'player_traits'])\n    for trait in traits:\n        if trait in curr_trait:\n            curr_list.append(1)\n        else:\n            curr_list.append(0)\n    \n    for pos in positions:\n        if pos is str(data.loc[i, 'team_position']):\n            curr_list.append(1)\n        else:\n            curr_list.append(0)\n\n    values_list.append(float(data.loc[i, 'value'])\/1000000.)\n    data_array.append(curr_list)\n","684dd5dd":"each_len = len(data_array[0])\nfor ls in data_array:\n    assert len(ls) == each_len\nprint(each_len)\nprint(len(data_array))","fa878cbc":"train_list = []\ntrain_out_list = []\ntest_list = []\ntest_out_list = []\nfor i in range(len(data_array)):\n    if (i + 16) % 30 == 0:\n        test_list.append(data_array[i])\n        test_out_list.append(values_list[i])\n    else:\n        train_list.append(data_array[i])\n        train_out_list.append(values_list[i])\n\nprint(len(train_list))\nprint(len(test_list))","1786e5b2":"norm_layer = tf.keras.layers.Normalization(axis=-1)\nnorm_layer.adapt(train_list)","99d66336":"model = tf.keras.models.Sequential([norm_layer,\n                                    tf.keras.layers.Dense(256),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dense(256),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dense(512),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.BatchNormalization(),\n                                    tf.keras.layers.Dropout(0.2),\n                                    tf.keras.layers.Dense(1024),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dense(1024),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dropout(0.2),\n                                    tf.keras.layers.Dense(512),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.BatchNormalization(),\n                                    tf.keras.layers.Dense(256),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dropout(0.2),\n                                    tf.keras.layers.Dense(128),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dense(128),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.BatchNormalization(),\n                                    tf.keras.layers.Dropout(0.2),\n                                    tf.keras.layers.Dense(64),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dense(32),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dense(16),\n                                    tf.keras.layers.BatchNormalization(),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dense(8),\n                                    tf.keras.layers.PReLU(),\n                                    tf.keras.layers.Dense(1)])\n","4bdd6faa":"model.summary()","e9d59b58":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), loss=tf.keras.losses.MeanSquaredError(), metrics=['mean_absolute_error'])","664a5917":"model.fit(train_list, train_out_list, batch_size=128, epochs=1, validation_data=(test_list, test_out_list))","a74e9c13":"model.evaluate(train_list, train_out_list)","3903d4a6":"test_df = pd.read_csv('..\/input\/kick-off\/FIFA_test_player_data.csv', index_col='sofifa_id')\ntest_id_df = pd.read_csv('..\/input\/kick-off\/FIFA_test.csv')\n","976c3096":"test_ids_list = []\nfor i in range(len(test_id_df)):\n    str_list = test_id_df.loc[i, 'player_ids']\n    list_ids_temp = str_list.split(', ')\n    list_ids = []\n    for num in list_ids_temp:\n        list_ids.append(int(num.strip('[').strip(']')))\n    test_ids_list.append(list_ids)\n","1d181a03":"def get_inp_array(id):\n    df = test_df.loc[id]\n    all_lists = []\n    for i in range(len(df)):\n        if str(type(df)) == \"<class 'pandas.core.frame.DataFrame'>\":\n            row = df.iloc[i]\n        else:\n            row = df\n\n        curr_list = []\n        curr_list.append(int(row['age']))\n        curr_list.append(int(row['height_cm']))\n        curr_list.append(int(row['weight_kg']))\n        curr_list.append(int(row['overall']))\n        curr_list.append(int(row['potential']))\n\n        if str(row['preferred_foot']) == \"Right\":\n            curr_list.append(1)\n        elif str(row['preferred_foot']) == \"Left\":\n            curr_list.append(-1)\n        else:\n            curr_list.append(0)\n\n        curr_list.append(int(row['international_reputation']))\n        curr_list.append(int(row['weak_foot']))\n        curr_list.append(int(row['skill_moves']))\n\n        try:\n            curr_list.append(int(row['release_clause_eur']))\n        except ValueError:\n            curr_list.append(0)\n\n        if str(row['skill_moves']) == \"Lean\":\n            curr_list.append(-1)\n        elif str(row['skill_moves']) == \"Normal\":\n            curr_list.append(0)\n        elif str(row['skill_moves']) == \"Stocky\":\n            curr_list.append(1)\n        else:\n            curr_list.append(0)\n        for col in float_cols:\n            try:\n                curr_list.append(int(row[col]))\n            except ValueError:\n                curr_list.append(0)\n        for col in add_cols:\n            val = row[col]\n            try:\n                curr_list.append(int(val))\n            except ValueError:\n                try:\n                    if '+' in str(val):\n                        a, b = val.split('+')\n                        curr_list.append(int(a) + int(b))\n                    elif '-' in str(val):\n                        a, b = val.split('-')\n                        curr_list.append(int(a) - int(b))\n                    else:\n                        curr_list.append(0)\n                except TypeError:\n                    curr_list.append(0)\n        curr_trait = str(row['player_traits'])\n        for trait in traits:\n            if trait in curr_trait:\n                curr_list.append(1)\n            else:\n                curr_list.append(0)\n        \n        for pos in positions:\n            if pos is str(row['team_position']):\n                curr_list.append(1)\n            else:\n                curr_list.append(0)\n\n        all_lists.append(curr_list)\n    return all_lists\n\nlen(get_inp_array(233090)[0])","261c45dd":"def values_dict(ids):\n    id_to_val_dict = {}\n    for id in ids:\n        all_lists = get_inp_array(id)\n        outputs = model.predict(all_lists)\n        length = len(outputs)\n        for i in range(length):\n            id_to_val_dict[f'{id}_{i}'] = outputs[i]\n    return id_to_val_dict","a76f3938":"all_ids = list(test_df.index)\nid_val_dict = values_dict(all_ids)\nid_val_dict_2 = {\"player_ids\": id_val_dict.keys(),\n                \"values\": id_val_dict.values()}\nid_val_df = pd.DataFrame(id_val_dict_2)","d47d20c4":"id_val_df.to_csv(\"fifa_outputs_working_well_v2.csv\")","cf1d4489":"#Output Values","31979599":"#Preprocess","e4b3bc0a":"#Model","f8d8ad88":"Getting the most valuable player is available in the next notebook."}}