{"cell_type":{"24463068":"code","02a89028":"code","ca6ed0be":"code","18611cd7":"code","5905d9c5":"code","a785b043":"code","cb2578ce":"code","a511f76c":"code","5114d298":"code","b6256b2d":"code","98af7479":"code","a569a6f4":"code","9f673736":"code","e6264c47":"code","703a44a8":"code","fb563bd9":"code","0b7c82fd":"code","93480752":"code","7cc16288":"code","96fb9cae":"code","3c399e9d":"code","03b62114":"code","dafcf193":"code","598a3985":"code","2ebda0f5":"code","757882fa":"code","6c524ea0":"code","6326450b":"code","6ab61fb0":"code","8abc0ba7":"markdown","9a45bc07":"markdown","497a2558":"markdown","393ad357":"markdown","eff18367":"markdown","8cebb80a":"markdown","f3aa4d5e":"markdown","089da12d":"markdown"},"source":{"24463068":"import pandas as pd\nimport numpy as numpy\nimport h2o\n#from h2o.estimators.gbm import H2OGradientBoostingEstimator\n#from h2o.grid.grid_search import H2OGridSearch\nfrom h2o.automl import H2OAutoML\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score","02a89028":"h2o.init()","ca6ed0be":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","18611cd7":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","5905d9c5":"train.isnull().sum()","a785b043":"test.isnull().sum()","cb2578ce":"all = pd.concat([train, test], sort = False)\nall.info()","a511f76c":"#Fill Missing numbers with median for Age and Fare\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())\n\n#Treat Embarked\nall['Embarked'] = all['Embarked'].fillna('S')\n\n#Bin Age\n#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 \n\n#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\n\n#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1","5114d298":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","b6256b2d":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","98af7479":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","a569a6f4":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","9f673736":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","e6264c47":"all_train = h2o.H2OFrame(all_dummies[all_dummies['Survived'].notna()])\nall_test = h2o.H2OFrame(all_dummies[all_dummies['Survived'].isna()])","703a44a8":"target = 'Survived'\nfeatures = [f for f in all_train.columns if f not in ['Survived','PassengerId']]","fb563bd9":"train_df, valid_df, test_df = all_train.split_frame(ratios=[0.7, 0.15], seed=2018)","0b7c82fd":"train_df[target] = train_df[target].asfactor()\nvalid_df[target] = valid_df[target].asfactor()\ntest_df[target] = test_df[target].asfactor()","93480752":"predictors = features\n\naml = H2OAutoML(max_models = 50, max_runtime_secs=5000, seed = 1)\naml.train(x=predictors, y=target, training_frame=train_df, validation_frame=valid_df)","7cc16288":"lb = aml.leaderboard\nlb","96fb9cae":"aml.leader.params.keys()","3c399e9d":"aml.leader.model_id","03b62114":"#metalearner = h2o.get_model(aml.metalearner()['name'])","dafcf193":"pred_val = aml.predict(test_df[predictors])[0].as_data_frame()\npred_val","598a3985":"true_val = (test_df[target]).as_data_frame()\nprediction_auc = roc_auc_score(pred_val, true_val)\nprediction_auc","2ebda0f5":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","757882fa":"fin_pred = aml.predict(TestForPred[predictors])[0].as_data_frame()","6c524ea0":"PassengerId = all_test['PassengerId'].as_data_frame()","6326450b":"h2o_Sub = pd.DataFrame({'PassengerId': PassengerId['PassengerId'].tolist(), 'Survived':fin_pred['predict'].tolist() })\nh2o_Sub.head()","6ab61fb0":"h2o_Sub.to_csv(\"1_auto_h2o_50_Submission.csv\", index = False)","8abc0ba7":"## Final Predictions","9a45bc07":"# Import train and test Datasets","497a2558":"## Build Model","393ad357":"# Import Libraries","eff18367":"## Extra Features: Title","8cebb80a":"## Train\/Test Split","f3aa4d5e":"# Treat Missing Values","089da12d":"## Check Accuracy"}}