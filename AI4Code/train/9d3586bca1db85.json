{"cell_type":{"a173b272":"code","07301e67":"code","d2397608":"code","9041d08b":"code","9f9d6a87":"code","8399bcf4":"code","00fab0b8":"code","ad1fe215":"code","bafe8f4c":"code","04b6d376":"code","fc8fd4f0":"code","da7aa176":"code","88303097":"code","38d6f643":"code","64ebe9be":"code","67b0ddd5":"code","11f2a31d":"code","a51296ce":"code","ef30b061":"code","6ef690ef":"code","7919b2af":"code","5ec408f7":"code","c2e5202e":"code","ae178471":"code","3cde95cf":"code","d90735d2":"code","bdf5a757":"code","f4f369f0":"code","8941fa56":"code","8c5d249e":"code","28c555a7":"code","0dab5f44":"code","d8511105":"code","439d6a91":"code","51aaaab4":"code","7e9cf23b":"code","903fc5f0":"code","dd31bedb":"code","05c90513":"markdown","51b8e22b":"markdown","d3cdeb9b":"markdown","27df399d":"markdown","7800decc":"markdown","37bf201f":"markdown","8e6557a9":"markdown","e98f5a59":"markdown","b418971d":"markdown","3c20350e":"markdown","c695f7fd":"markdown","fcd39be6":"markdown","49a111bb":"markdown","01c9b667":"markdown","5a4487fd":"markdown","db447f24":"markdown","358619fd":"markdown","9480d7f6":"markdown","45f52b0e":"markdown","f9747e61":"markdown"},"source":{"a173b272":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport random # random numbers\nimport shutil # zip a folder\n\nimport numpy as np # linear algebra\nimport zipfile # unzip files\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom tqdm import tqdm\nfrom datetime import datetime\nfrom IPython.display import FileLink\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07301e67":"import os\nimport pathlib\n\nimport numpy as np\nimport tensorflow as tf\nimport tensorboard\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split","d2397608":"from tensorflow.data import Dataset\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Flatten, MaxPool2D, Dense, Dropout\nfrom tensorflow.keras.activations import relu\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy, CategoricalCrossentropy\nfrom tensorflow.keras.metrics import Accuracy, sparse_categorical_accuracy, SparseCategoricalAccuracy, CategoricalAccuracy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.regularizers import l2, l1\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","9041d08b":"ls ..\/input\/dogs-vs-cats-redux-kernels-edition\/","9f9d6a87":"zip_ref = zipfile.ZipFile(\"..\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip\", \"r\")\nfilelist = zip_ref.filelist[1:]\nprint(f'{zip_ref.filelist[0].filename} is removed')\nrandom.shuffle(filelist)","8399bcf4":"len(filelist)","00fab0b8":"count_cats = 0\ncount_dogs = 0\ntrainN = int(len(filelist)*0.9)\nvalN = int(len(filelist)*0.1)\n\nfor file_path in tqdm(filelist[0:trainN]):\n    if file_path.filename.endswith(\".jpg\"):\n        file_name = file_path.filename[6:]\n        if file_name.startswith(\"cat\"):\n            zip_ref.extract(file_path.filename, path='train\/cats\/'+file_name)\n            count_cats += 1\n        elif file_name.startswith(\"dog\"):\n            zip_ref.extract(file_path.filename, path='train\/dogs\/'+file_name)\n            count_dogs += 1\n\nfor file_path in tqdm(filelist[trainN:]):\n    if file_path.filename.endswith(\".jpg\"):\n        file_name = file_path.filename[6:]\n        if file_name.startswith(\"cat\"):\n            zip_ref.extract(file_path.filename, path='valid\/cats\/'+file_name)\n            count_cats += 1\n        elif file_name.startswith(\"dog\"):\n            zip_ref.extract(file_path.filename, path='valid\/dogs\/'+file_name)\n            count_dogs += 1","ad1fe215":"!ls train\/cats\/ | wc -l\n!ls train\/dogs\/ | wc -l\n!ls valid\/cats\/ | wc -l\n!ls valid\/dogs\/ | wc -l","bafe8f4c":"def get_shallow_cnn(input_shape=(28, 28, 1)):\n  model = Sequential()\n  model.add(Conv2D(16, 3, activation=relu, input_shape=input_shape))\n  model.add(MaxPool2D())\n  model.add(Conv2D(32, 3, activation=relu))\n  model.add(MaxPool2D())\n  model.add(Flatten())\n  model.add(Dense(128, activation=relu))\n  model.add(Dense(2, activation='softmax'))\n  return model","04b6d376":"def get_shallow_cnn_regu(input_shape=(28, 28, 1), decay_rate=1e-3, dropout=0.1):\n    model = Sequential()\n    model.add(Conv2D(16, 3, activation=relu, input_shape=input_shape,\n                     kernel_regularizer=l2(decay_rate)))\n    model.add(Dropout(dropout))\n    model.add(MaxPool2D())\n    model.add(Conv2D(32, 3, activation=relu, kernel_regularizer=l2(decay_rate)))\n    model.add(Dropout(dropout))\n    model.add(MaxPool2D())\n    model.add(Flatten())\n    model.add(Dense(128, activation=relu, kernel_regularizer=l2(decay_rate)))\n    model.add(Dense(2, activation='softmax'))\n    return model","fc8fd4f0":"def get_shallow2_cnn(input_shape=(28, 28, 1)):\n    model = Sequential()\n    model.add(Conv2D(16, 3, activation=relu, input_shape=input_shape))\n    model.add(MaxPool2D())\n    model.add(Conv2D(32, 3, activation=relu))\n    model.add(MaxPool2D())\n    model.add(Conv2D(64, 3, activation=relu))\n    model.add(MaxPool2D())\n    model.add(Conv2D(64, 3, activation=relu))\n    model.add(MaxPool2D())\n    model.add(Flatten())\n    model.add(Dense(128, activation=relu))\n    model.add(Dense(2, activation='softmax'))\n    return model","da7aa176":"def get_shallow2_cnn_regu(input_shape=(28, 28, 1), decay_rate=1e-3, dropout=0.1):\n    model = Sequential()\n    model.add(Conv2D(16, 3, activation=relu, input_shape=input_shape,\n                     kernel_regularizer=l2(decay_rate)))\n    model.add(Dropout(dropout))\n    model.add(MaxPool2D())\n    model.add(Conv2D(32, 3, activation=relu, kernel_regularizer=l2(decay_rate)))\n    model.add(Dropout(dropout))\n    model.add(MaxPool2D())\n    model.add(Conv2D(64, 3, activation=relu, kernel_regularizer=l2(decay_rate)))\n    model.add(Dropout(dropout))\n    model.add(MaxPool2D())\n    model.add(Conv2D(64, 3, activation=relu, kernel_regularizer=l2(decay_rate)))\n    model.add(Dropout(dropout))\n    model.add(MaxPool2D())\n    model.add(Flatten())\n    model.add(Dense(128, activation=relu))\n    model.add(Dense(2, activation='softmax'))\n    return model","88303097":"batch_size = 32\nimage_gen = ImageDataGenerator(rescale=1\/255.0)\nimage_gen_train = image_gen.flow_from_directory(\"train\", target_size=(64, 64),\n                                                batch_size=batch_size, shuffle=True)\nimage_gen_valid = image_gen.flow_from_directory(\"valid\", target_size=(64, 64),\n                                                batch_size=batch_size, shuffle=True)","38d6f643":"batch_size = 32\nimage_gen_augument = ImageDataGenerator(rescale=1\/255.0, rotation_range=10,\n                                       horizontal_flip=True, zoom_range=0.2)\nimage_gen_augument_train = image_gen_augument.flow_from_directory(\"train\", target_size=(64, 64),\n                                                batch_size=batch_size, shuffle=True)\nimage_gen_augument_valid = image_gen_augument.flow_from_directory(\"valid\", target_size=(64, 64),\n                                                batch_size=batch_size, shuffle=True)","64ebe9be":"for image1, image2 in zip(image_gen_train, image_gen_augument_train):\n    plt.imshow(image1[0][0])\n    plt.figure()\n    plt.imshow(image2[0][0])\n    break","67b0ddd5":"steps_per_epoch = image_gen_train.n\/\/batch_size\nvalidation_steps = image_gen_valid.n\/\/batch_size","11f2a31d":"print(steps_per_epoch, validation_steps)","a51296ce":"model1 = get_shallow_cnn((64, 64, 3))\nmodel1.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss=tf.keras.losses.CategoricalCrossentropy(),\n              metrics=[tf.keras.metrics.BinaryAccuracy(),\n                      'AUC'])","ef30b061":"log_dir = \"logs\/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\nhistory1 = model1.fit(image_gen_train, validation_data=image_gen_valid,\n               steps_per_epoch=steps_per_epoch, callbacks=[tensorboard_callback],\n               epochs=10, validation_steps=validation_steps)","6ef690ef":"model1.save(\"shallow_cnn\")\nshutil.make_archive(\"shallow_cnn\", 'zip', \"shallow_cnn\")\nFileLink('shallow_cnn.zip')","7919b2af":"train_loss_results = history1.history['loss']\nvalid_loss_results = history1.history['val_loss']\ntrain_accuracy_results = history1.history['binary_accuracy']\nvalid_accuracy_results = history1.history['val_binary_accuracy']\ntrain_auc_results = history1.history['auc']\nvalid_auc_results = history1.history['val_auc']","5ec408f7":"plt.style.use('ggplot')\nfig, axes = plt.subplots(1, 3, sharex=True, figsize=(18, 5))\n\naxes[0].set_xlabel(\"Epochs\", fontsize=14)\naxes[0].set_ylabel(\"Loss\", fontsize=14)\naxes[0].set_title('Loss vs epochs')\naxes[0].plot(train_loss_results, label='train_loss')\naxes[0].plot(valid_loss_results, label='valid_loss')\naxes[0].legend()\n\naxes[1].set_title('Accuracy vs epochs')\naxes[1].set_ylabel(\"Accuracy\", fontsize=14)\naxes[1].set_xlabel(\"Epochs\", fontsize=14)\naxes[1].plot(train_accuracy_results, label='train_accuracy')\naxes[1].plot(valid_accuracy_results, label='valid_accuracy')\naxes[1].legend()\n\naxes[2].set_title('AUC vs epochs')\naxes[2].set_ylabel(\"AUC\", fontsize=14)\naxes[2].set_xlabel(\"Epochs\", fontsize=14)\naxes[2].plot(train_accuracy_results, label='train_auc')\naxes[2].plot(valid_accuracy_results, label='valid_auc')\naxes[2].legend()\n\nplt.show()","c2e5202e":"model2 = get_shallow_cnn_regu((64, 64, 3), decay_rate=1e-3, dropout=0.1)\nmodel2.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss=tf.keras.losses.CategoricalCrossentropy(),\n              metrics=[tf.keras.metrics.BinaryAccuracy(),\n                      'AUC'])","ae178471":"log_dir = \"logs\/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\nhistory2 = model2.fit(image_gen_train, validation_data=image_gen_valid,\n               steps_per_epoch=steps_per_epoch, callbacks=[tensorboard_callback],\n               epochs=30, validation_steps=validation_steps)","3cde95cf":"model2.save(\"shallow_cnn_reg\")\nshutil.make_archive(\"shallow_cnn_reg\", 'zip', \"shallow_cnn_reg\")\nFileLink('shallow_cnn_reg.zip')","d90735d2":"!ls shallow_cnn_reg","bdf5a757":"train_loss_results = history2.history['loss']\nvalid_loss_results = history2.history['val_loss']\ntrain_accuracy_results = history2.history['binary_accuracy']\nvalid_accuracy_results = history2.history['val_binary_accuracy']\ntrain_auc_results = history2.history['auc']\nvalid_auc_results = history2.history['val_auc']","f4f369f0":"plt.style.use('ggplot')\nfig, axes = plt.subplots(1, 3, sharex=True, figsize=(18, 5))\n\naxes[0].set_xlabel(\"Epochs\", fontsize=14)\naxes[0].set_ylabel(\"Loss\", fontsize=14)\naxes[0].set_title('Loss vs epochs')\naxes[0].plot(train_loss_results, label='train_loss')\naxes[0].plot(valid_loss_results, label='valid_loss')\naxes[0].legend()\n\naxes[1].set_title('Accuracy vs epochs')\naxes[1].set_ylabel(\"Accuracy\", fontsize=14)\naxes[1].set_xlabel(\"Epochs\", fontsize=14)\naxes[1].plot(train_accuracy_results, label='train_accuracy')\naxes[1].plot(valid_accuracy_results, label='valid_accuracy')\naxes[1].legend()\n\naxes[2].set_title('AUC vs epochs')\naxes[2].set_ylabel(\"AUC\", fontsize=14)\naxes[2].set_xlabel(\"Epochs\", fontsize=14)\naxes[2].plot(train_accuracy_results, label='train_auc')\naxes[2].plot(valid_accuracy_results, label='valid_auc')\naxes[2].legend()\n\nplt.show()","8941fa56":"model3 = get_shallow2_cnn_regu((64, 64, 3), decay_rate=1e-3, dropout=0.1)\nmodel3.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss=tf.keras.losses.CategoricalCrossentropy(),\n              metrics=[tf.keras.metrics.BinaryAccuracy(),\n                      'AUC'])","8c5d249e":"log_dir = \"logs\/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\nhistory3 = model3.fit(image_gen_train, validation_data=image_gen_valid,\n               steps_per_epoch=steps_per_epoch, callbacks=[tensorboard_callback],\n               epochs=30, validation_steps=validation_steps)","28c555a7":"model3.save(\"shallow2_cnn_reg\")\nshutil.make_archive(\"shallow2_cnn_reg\", 'zip', \"shallow2_cnn_reg\")\nFileLink('shallow2_cnn_reg.zip')","0dab5f44":"train_loss_results = history3.history['loss']\nvalid_loss_results = history3.history['val_loss']\ntrain_accuracy_results = history3.history['binary_accuracy']\nvalid_accuracy_results = history3.history['val_binary_accuracy']\ntrain_auc_results = history3.history['auc']\nvalid_auc_results = history3.history['val_auc']","d8511105":"plt.style.use('ggplot')\nfig, axes = plt.subplots(1, 3, sharex=True, figsize=(18, 5))\n\naxes[0].set_xlabel(\"Epochs\", fontsize=14)\naxes[0].set_ylabel(\"Loss\", fontsize=14)\naxes[0].set_title('Loss vs epochs')\naxes[0].plot(train_loss_results, label='train_loss')\naxes[0].plot(valid_loss_results, label='valid_loss')\naxes[0].legend()\n\naxes[1].set_title('Accuracy vs epochs')\naxes[1].set_ylabel(\"Accuracy\", fontsize=14)\naxes[1].set_xlabel(\"Epochs\", fontsize=14)\naxes[1].plot(train_accuracy_results, label='train_accuracy')\naxes[1].plot(valid_accuracy_results, label='valid_accuracy')\naxes[1].legend()\n\naxes[2].set_title('AUC vs epochs')\naxes[2].set_ylabel(\"AUC\", fontsize=14)\naxes[2].set_xlabel(\"Epochs\", fontsize=14)\naxes[2].plot(train_accuracy_results, label='train_auc')\naxes[2].plot(valid_accuracy_results, label='valid_auc')\naxes[2].legend()\n\nplt.show()","439d6a91":"model4 = get_shallow2_cnn_regu((64, 64, 3), decay_rate=1e-3, dropout=0.1)\nmodel4.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss=tf.keras.losses.CategoricalCrossentropy(),\n              metrics=[tf.keras.metrics.BinaryAccuracy(),\n                      'AUC'])","51aaaab4":"log_dir = \"logs\/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\nhistory4 = model4.fit(image_gen_augument_train, validation_data=image_gen_augument_valid,\n               steps_per_epoch=steps_per_epoch, callbacks=[tensorboard_callback],\n               epochs=30, validation_steps=validation_steps)","7e9cf23b":"model4.save(\"shallow2_cnn_reg_aug\")\nshutil.make_archive(\"shallow2_cnn_reg_aug\", 'zip', \"shallow2_cnn_reg_aug\")\nFileLink('shallow2_cnn_reg_aug.zip')","903fc5f0":"train_loss_results = history4.history['loss']\nvalid_loss_results = history4.history['val_loss']\ntrain_accuracy_results = history4.history['binary_accuracy']\nvalid_accuracy_results = history4.history['val_binary_accuracy']\ntrain_auc_results = history4.history['auc']\nvalid_auc_results = history4.history['val_auc']","dd31bedb":"plt.style.use('ggplot')\nfig, axes = plt.subplots(1, 3, sharex=True, figsize=(18, 5))\n\naxes[0].set_xlabel(\"Epochs\", fontsize=14)\naxes[0].set_ylabel(\"Loss\", fontsize=14)\naxes[0].set_title('Loss vs epochs')\naxes[0].plot(train_loss_results, label='train_loss')\naxes[0].plot(valid_loss_results, label='valid_loss')\naxes[0].legend()\n\naxes[1].set_title('Accuracy vs epochs')\naxes[1].set_ylabel(\"Accuracy\", fontsize=14)\naxes[1].set_xlabel(\"Epochs\", fontsize=14)\naxes[1].plot(train_accuracy_results, label='train_accuracy')\naxes[1].plot(valid_accuracy_results, label='valid_accuracy')\naxes[1].legend()\n\naxes[2].set_title('AUC vs epochs')\naxes[2].set_ylabel(\"AUC\", fontsize=14)\naxes[2].set_xlabel(\"Epochs\", fontsize=14)\naxes[2].plot(train_accuracy_results, label='train_auc')\naxes[2].plot(valid_accuracy_results, label='valid_auc')\naxes[2].legend()\n\nplt.show()","05c90513":"<a id=\"train_models\"><\/a>\n## Train models","51b8e22b":"<a id=\"prep_data\"><\/a>\n## Prepare data","d3cdeb9b":"### Shallow CNN with regularization","27df399d":"Clearly there is overfitting, of the model. Also we can increase the complexity of the model as the training error is still way far from 0%","7800decc":"<a id=\"load_data\"><\/a>\n## Load data","37bf201f":"## Visualize the activation maps of hidden layers\n\nEasy: Create a model with outputs as layer outputs of interest","8e6557a9":"## Visualize the input region responsible for classification\n\nDidnt understood how exactly this is done","e98f5a59":"## Visualize the filters learnt by the hidden layers\n\nNeed to do backprop and train","b418971d":"# Table of Contents\n\nIn this notebook we will try various shallow networks that are trained from scratch using tf.keras and ImageDataGenerator module.\n\n* [Imports](#imports)\n* [Prepare data](#prep_data)\n* [Networks](#nets)\n* [Load data](#load_data)\n* [Train Models](#train_models)\n  - [Shallow Model](#shallow_model1)\n  - [Shallow Model with Regularization](#shallow_model2)\n  - [ResNet Model](#resnet_model1)\n  - [InceptionNet Model](#inception_model1)\n* [Visulize Models](#visualize_models)\n* [Conclusion](#conclusion)","3c20350e":"### Shallow CNN-2 with regularization","c695f7fd":"### Shallow CNN with no regularization","fcd39be6":"### Shallow CNN-2 with data-augumentation and regularization","49a111bb":"<a id=\"imports\"><\/a>\n## Imports","01c9b667":"Let us use 90% for training and 10% for testing","5a4487fd":"* So now there is no overfitting problem but we are clearly underfitting.\n\n* The validation accuracy remains the same but training accuracy is much lower as well.\n\n* So we can train for longer or Train a much bigger network","db447f24":"# Questions to ponder?\n\n* Does the input image resolution affect the final outcome??","358619fd":"### Inception Net with data-augumentation and regularization","9480d7f6":"Shows that the approach is working and can try running for more epochs","45f52b0e":"<a id=\"nets\"><\/a>\n## Networks","f9747e61":"### ResNet with data-augumentation and regularization\n\nUse the same network as tf2.2 course week-4"}}