{"cell_type":{"9127560a":"code","d5b73aba":"code","240efe62":"code","96ba0d76":"code","ab8ea090":"code","70683c2e":"code","30e443ee":"code","28946570":"code","3b0654e5":"code","e4a1a17a":"code","44b40d75":"code","8db2aecf":"code","b5b3ef55":"code","b7100dbf":"code","6ed4b0d9":"code","25dc1ebb":"code","ed05994e":"code","9af62745":"code","3685461e":"code","fc2e2c92":"code","700fd822":"code","44edc55b":"code","6af7f49f":"code","a2c56d8c":"code","5e4256c6":"code","56f657f7":"code","0cbbbbf3":"code","7846a60d":"code","d9952b4a":"code","a87ffbad":"code","57eb2832":"code","63da81b2":"code","e12fd666":"markdown","c6f240d9":"markdown","26df3a5f":"markdown","96b8d7f5":"markdown","86214dda":"markdown","22aab0fb":"markdown","ca86a89d":"markdown"},"source":{"9127560a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d5b73aba":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col='Id')\nX_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')\n\n\n\n# Remove rows with missing target, separate target from predictors\n#X.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X.SalePrice              \nX.drop(['SalePrice'], axis=1, inplace=True)\n\n","240efe62":"#cat = ['YearBuilt', 'GarageYrBlt', 'MoSold', 'YrSold', 'YearRemodAdd']\nX['MoSold'] = X['MoSold'].astype('object')\nX_test['MoSold'] = X_test['MoSold'].astype('object')","96ba0d76":"X.shape","ab8ea090":"X['LotArea'].mean()","70683c2e":"# Break off validation set from training data\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)","30e443ee":"X_train, X_valid = X_train.align(X_valid, join='left', axis=1)\nX_train, X_test = X_train.align(X_test, join='left', axis=1)","28946570":"M = X_train.isnull().sum(axis = 0)\nM[M>50].plot(kind = 'barh')\nM","3b0654e5":"col_remov = list(M[M>500].index)\ncol_remov","e4a1a17a":"X_train.drop(col_remov, axis = 1, inplace = True)\nX_valid.drop(col_remov, axis = 1, inplace = True)\nX_test.drop(col_remov, axis = 1, inplace = True)","44b40d75":"X_train.shape","8db2aecf":"from sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_absolute_error","b5b3ef55":"X_train.select_dtypes(exclude=['object']).columns","b7100dbf":"X_train.select_dtypes(include=['object']).columns","6ed4b0d9":"\n# Preprocessing for categorical data\nnumerical_cols = list(X_train.select_dtypes(exclude=['object']).columns)\ncategorical_cols = list(X_train.select_dtypes(include=['object']).columns)","25dc1ebb":"len(numerical_cols)","ed05994e":"import numpy as np\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nimputer = IterativeImputer(max_iter=10, random_state=0)\nimputer.fit(X_train[numerical_cols].values)\nX_train_mat = imputer.transform(X_train[numerical_cols].values)\nX_valid_mat = imputer.transform(X_valid[numerical_cols].values)\nX_test_mat = imputer.transform(X_test[numerical_cols].values)","9af62745":"categorical_transformer = SimpleImputer(strategy='most_frequent')\ncategorical_transformer.fit(X_train[categorical_cols])\nX_train_cat = categorical_transformer.transform(X_train[categorical_cols].values)\nX_valid_cat = categorical_transformer.transform(X_valid[categorical_cols].values)\nX_test_cat = categorical_transformer.transform(X_test[categorical_cols].values) \n","3685461e":"train_X = np.hstack((X_train_mat, X_train_cat))\nvalid_X = np.hstack((X_valid_mat, X_valid_cat))\ntest_X = np.hstack((X_test_mat, X_test_cat))","fc2e2c92":"train_X","700fd822":"train_X_df = pd.DataFrame(train_X, columns = numerical_cols + categorical_cols, index = X_train.index)\nvalid_X_df = pd.DataFrame(valid_X, columns = numerical_cols + categorical_cols, index = X_valid.index)\ntest_X_df = pd.DataFrame(test_X, columns = numerical_cols + categorical_cols, index = X_test.index)\ntrain_X_df.head()","44edc55b":"train_X_df.isnull().sum().sum()","6af7f49f":"embed_cols=[i for i in categorical_cols]\n\nfor i in embed_cols:\n    print(i,train_X_df[i].nunique())","a2c56d8c":"date = train_X_df[['YearBuilt', 'GarageYrBlt', 'MoSold', 'YrSold', 'YearRemodAdd']]\ndate.head()","5e4256c6":"# get a look on the old of house\ndate_min_max = pd.concat([date.min(axis = 0), date.max(axis = 0)],axis = 1)\ndate_min_max.columns = ['Min_date', 'Max_date']\ndate_min_max","56f657f7":"train_X_df.dtypes","0cbbbbf3":"# categoricals features\nfor col in categorical_cols:\n    train_X_df[col] = train_X_df[col].astype(str)\n    valid_X_df[col] = valid_X_df[col].astype(str)\n    test_X_df[col] = test_X_df[col].astype(str)\n\n","7846a60d":"#importing library and building model\nfrom catboost import CatBoostRegressor\nmodel=CatBoostRegressor(iterations=1000, learning_rate=0.05,  loss_function='RMSE', logging_level='Silent')","d9952b4a":"model.fit(train_X_df,y_train,cat_features=categorical_cols,eval_set=(valid_X_df,y_valid),plot=True)","a87ffbad":"from sklearn.metrics import mean_absolute_error\n\npredictions = model.predict(valid_X_df)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_valid)))","57eb2832":"preds_test = model.predict(test_X_df)","63da81b2":"# Save test predictions to file\noutput = pd.DataFrame({'Id': test_X_df.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","e12fd666":"We choose to remove columns with more than 500 missing values","c6f240d9":"## 1.1 Strategy to impute missing values","26df3a5f":"## 1.2 Reconstruct train and test dataframe","96b8d7f5":"May be Every features years and months should be seen as object type or categorical variable.","86214dda":"## 2.1 CatBoost","22aab0fb":"# 2. Machine learning","ca86a89d":"# 1. Data Cleaning"}}