{"cell_type":{"f41a1a45":"code","b493ea5a":"code","33aead43":"code","2e0c5969":"code","a44e702a":"code","d4229528":"code","d1d57ffa":"code","495a0598":"code","e5a5ef38":"code","2610f7ab":"code","5f8dbe70":"code","b9ce46ae":"code","21f1b8d1":"code","025387fe":"code","e7559ccc":"code","0607bc8a":"code","64f2fe50":"code","c708fdaf":"markdown","a8f2ca6b":"markdown","e1059860":"markdown","6d893b76":"markdown","2ac95198":"markdown","f4138bd5":"markdown","4ff0e933":"markdown","5e14009a":"markdown"},"source":{"f41a1a45":"# importing needed libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nimport datetime\nimport gc\nfrom bs4 import BeautifulSoup as bs\nimport requests\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nfrom plotnine import *\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport folium","b493ea5a":"res = requests.get('https:\/\/github.com\/CSSEGISandData\/COVID-19\/tree\/master\/csse_covid_19_data\/csse_covid_19_daily_reports')    \nsoup = bs(res.text, 'lxml')   \nfiles = soup.find_all('a',class_=\"js-navigation-open\")\n\nfilenames = [file.text for file in files]\nfilenames_csv = [csv for csv in filenames if csv.endswith('.csv')]\n\nfinal_df = pd.DataFrame()\n","33aead43":"for i in range(0,len(filenames_csv)):\n    name = \"https:\/\/github.com\/CSSEGISandData\/COVID-19\/raw\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/\"+ str(filenames_csv[i])\n    print(name)\n    df1 = pd.read_csv(name, parse_dates= [2])\n    cols= [ 'Country_Region', 'Country\/Region' ,'Province_State', 'Province\/State' ,'Confirmed','Deaths','Recovered']\n    df = df1.loc[:, df1.columns.isin(cols)]\n    df.columns  = ['Province_State', 'Country_Region', 'Confirmed', 'Deaths', 'Recovered']\n    df['Date'] = pd.to_datetime(filenames_csv[i].strip('.csv'))\n    final_df = final_df.append(df)\n    ","2e0c5969":"final_df_backup = final_df.copy()\nfinal_df.head()","a44e702a":"final_df.shape","d4229528":"final_df.describe()","d1d57ffa":"final_df.info()","495a0598":"print(\"Before Treatment of NULL values \\n\")\nprint(final_df.isna().sum())","e5a5ef38":"print(\"After Treatment of NULL values \\n\")\nfinal_df[['Confirmed', 'Deaths','Recovered']] = final_df[['Confirmed', 'Deaths','Recovered']].fillna(0)\n\nprint(final_df.isna().sum())","2610f7ab":"#Still infected\nfinal_df['Still Infected'] = final_df['Confirmed'] - final_df['Deaths'] - final_df['Recovered']","5f8dbe70":"cols = ['Date', 'Country_Region','Province_State','Confirmed','Deaths','Recovered','Still Infected']\nfinal_df = final_df[cols]","b9ce46ae":"final_df.head()","21f1b8d1":"#Getting the records corresponding to the latest date\n\nmax_date = final_df['Date'].max()\nfinal_df_latest = final_df[final_df['Date']== max_date]\nfinal_df_latest.shape","025387fe":"df_date_level = final_df.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Still Infected'].sum().reset_index()\ndf_date_level.sort_values(by= 'Date', inplace = True)\n\ndf_date_level['Virality'] = df_date_level['Confirmed'].pct_change()*100\ndf_date_level['Death Ratio'] = (df_date_level['Deaths']\/df_date_level['Confirmed'])*100\ndf_date_level['Recovered Ratio'] = (df_date_level['Recovered']\/df_date_level['Confirmed'])*100\ndf_date_level['Still Infected Ratio'] = (df_date_level['Still Infected']\/df_date_level['Confirmed'])*100\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_date_level['Date'], y=df_date_level['Virality'],\n                    mode='lines+markers',\n                    name='Virality'))\nfig.add_trace(go.Scatter(x=df_date_level['Date'], y=df_date_level['Death Ratio'],\n                    mode='lines+markers',\n                    name='Death%'))\nfig.add_trace(go.Scatter(x=df_date_level['Date'], y=df_date_level['Recovered Ratio'],\n                    mode='lines+markers', \n                    name='Recovered%'))\n\nfig.add_trace(go.Scatter(x=df_date_level['Date'], y=df_date_level['Still Infected Ratio'],\n                    mode='lines+markers', \n                    name='Still Infected%'))\n\nfig.update_layout(\n    title=\"Trend over Time\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Metric\",\n    font=dict(\n        size=18\n    )\n)\n\nfig.show()","e7559ccc":"df_country_level = final_df_latest.groupby('Country_Region')['Confirmed', 'Deaths', 'Recovered', 'Still Infected'].sum().reset_index()\n\ndf_country_level['Death%'] = (df_country_level['Deaths']\/df_country_level['Confirmed'])*100\ndf_country_level['Recovered%'] = (df_country_level['Recovered']\/df_country_level['Confirmed'])*100\ndf_country_level['Still Infected%'] = (df_country_level['Still Infected']\/df_country_level['Confirmed'])*100\n\ndf_country_level['text'] = df_country_level['Country_Region'] + '<br>' + \\\n    'Confirmed Cases ' + df_country_level['Confirmed'].astype('str') +  '<br>' + \\\n    'Death % ' + df_country_level['Death%'].astype('str')+ '<br>' + ' Recovered % '  + df_country_level['Recovered%'].astype('str') \n\nfig = go.Figure(data=go.Choropleth(\n    locations = df_country_level['Country_Region'],\n    locationmode='country names',\n    z = df_country_level['Confirmed'],\n    text = df_country_level['text'], \n    autocolorscale=True,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.5,\n))\n\nfig.update_layout(\n    title_text='Total Confirmed Cases',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    )\n)\nfig.show()","0607bc8a":"df_country_date = final_df.groupby(['Date','Country_Region'])['Confirmed', 'Deaths', 'Recovered', 'Still Infected'].sum().reset_index()\n\ndf_country_date['Virality'] = df_country_date.groupby(['Country_Region'])['Confirmed'].pct_change()*100\ndf_country_date['Death%'] = (df_country_date['Deaths']\/df_country_date['Confirmed'])*100\ndf_country_date['Recovered%'] = (df_country_date['Recovered']\/df_country_date['Confirmed'])*100\ndf_country_date['Still Infected%'] = (df_country_date['Still Infected']\/df_country_date['Confirmed'])*100\n\ndf_country_date['size'] = df_country_date['Confirmed'].pow(0.5)\ndf_country_date['size_1'] = df_country_date['Deaths'].pow(0.5)\ndf_country_date['Date'] = df_country_date['Date'].dt.strftime('%m\/%d\/%Y')\ndf_country_date.sort_values('Date', ascending = True).reset_index()\n\nfig = px.scatter_geo(df_country_date, locations=\"Country_Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country_Region\", \n                     range_color= [0, max(df_country_date['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread over time')\nfig.show()\n\nfig = px.scatter_geo(df_country_date, locations=\"Country_Region\", locationmode='country names', \n                     color=\"Deaths\", size='size_1', hover_name=\"Country_Region\", \n                     range_color= [0, max(df_country_date['Deaths'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Deaths over time')\nfig.show()","64f2fe50":"df_country_date_1 = final_df.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Still Infected'].sum().reset_index()\ndf_country_date_1['Date'].max()","c708fdaf":"# EDA and Data visualization","a8f2ca6b":"# Extracting data","e1059860":"# Data Manipulation and Cleaning","6d893b76":"# Treating NULL Values","2ac95198":"<H3> Global Spread <\/H3>","f4138bd5":"# Country and Date level","4ff0e933":"<H3> Country Level ","5e14009a":"Get the list of all the available files from https:\/\/github.com\/CSSEGISandData\/COVID-19\/tree\/master\/csse_covid_19_data\/csse_covid_19_daily_reports"}}