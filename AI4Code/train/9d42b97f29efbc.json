{"cell_type":{"8cc24f28":"code","f90506ce":"code","1b634b32":"code","50410817":"code","01b2898b":"code","5bb2a0a4":"code","673fd629":"code","470e407b":"code","573cc1ec":"code","27327bcc":"code","a37b4910":"code","13208c9e":"code","c2448d63":"code","2cd7ff84":"code","4f225a4d":"code","5c0e7dca":"code","65876534":"code","df7f4992":"code","89f9c8c1":"markdown","99704873":"markdown","ba9bb07b":"markdown","72363fd3":"markdown","e59d3777":"markdown","99e55250":"markdown","bc188fcf":"markdown","b90a9292":"markdown","7dcab71b":"markdown","49f74804":"markdown"},"source":{"8cc24f28":"import numpy as np\nimport pandas as pd\nimport os\nimport holoviews as hv\nfrom holoviews import opts\nhv.extension('bokeh')\nfrom sklearn import linear_model\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression","f90506ce":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1b634b32":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv')\nprint('Train Set Shape = {}'.format(train.shape))\ntrain.head()","50410817":"test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv')\nprint('Test Set Shape = {}'.format(test.shape))\ntest.head()","01b2898b":"print(f'Total reported cases are {len(train)}.')\nprint(f'Total confirmed cases are {int(train[\"ConfirmedCases\"].sum())}.')\nprint(f'Total fatality cases are {int(train[\"Fatalities\"].sum())}.')\nprint(f'Total countries are {len(train[\"Country\/Region\"].unique())}.')\nprint(f'Total provinces\/states are {len(train.dropna(subset=[\"Province\/State\"])[\"Province\/State\"].unique())}.')","5bb2a0a4":"reported_cases_coutry = train[\"Country\/Region\"].value_counts().sort_values()\nhv.Bars(reported_cases_coutry).opts(title=\"The rank of Reported Cases in each countries\", color=\"red\",invert_axes=True, width=800, height=1200,tools=['hover'])","673fd629":"confirmed_cases_country = train.groupby('Country\/Region').sum()['ConfirmedCases'].sort_values()\nhv.Bars(confirmed_cases_country).opts(title=\"The rank of Confirmed Cases in each countries\", color=\"blue\",invert_axes=True, width=800, height=1200,tools=['hover'])","470e407b":"fatality_cases_country = train.groupby('Country\/Region').sum()['Fatalities'].sort_values()\nhv.Bars(fatality_cases_country).opts(title=\"The rank of Fatality Cases in each countries\", color=\"green\",invert_axes=True, width=800, height=1200,tools=['hover'])","573cc1ec":"hasstate = train.dropna(subset=['Province\/State'])\nhasstate.head()","27327bcc":"confirmed_cases_coutry_state = hasstate.groupby('Country\/Region').sum()['ConfirmedCases'].sort_values()\nhv.Bars(confirmed_cases_coutry_state).opts(title=\"The rank of Confirmed Cases in each countries with State\", color=\"red\",invert_axes=True, width=800, height=1200,tools=['hover'])","a37b4910":"china = hasstate[hasstate['Country\/Region']=='China'].groupby('Province\/State').sum()[\"ConfirmedCases\"].sort_values()\nchina_g = hv.Bars(china).opts(title=\"The rank of Confirmed Cases in each state of China\", color=\"blue\")\nchina_g.opts(opts.Bars(invert_axes=True, width=800, height=1000,tools=['hover']))","13208c9e":"us = hasstate[hasstate['Country\/Region']=='US'].groupby('Province\/State').sum()[\"ConfirmedCases\"].sort_values()\nus_g = hv.Bars(us).opts(title=\"The rank of Confirmed Cases in each state of US\", color=\"red\")\nfrance = hasstate[hasstate['Country\/Region']=='France'].groupby('Province\/State').sum()[\"ConfirmedCases\"].sort_values()\nfrance_g = hv.Bars(france).opts(title=\"The rank of Confirmed Cases in each state of France\", color=\"yellow\")\nuk = hasstate[hasstate['Country\/Region']=='United Kingdom'].groupby('Province\/State').sum()[\"ConfirmedCases\"].sort_values()\nuk_g = hv.Bars(uk).opts(title=\"The rank of Confirmed Cases in each state of UK\", color=\"green\")\n\n(us_g + france_g + uk_g).opts(opts.Bars(invert_axes=True, width=600, height=1000,tools=['hover']))","c2448d63":"confirmed_cases_state = hasstate.groupby('Province\/State').sum()['ConfirmedCases'].sort_values()\nhv.Bars(confirmed_cases_state).opts(title=\"The rank of Confirmed Cases in each state of all countries\", color=\"blue\",invert_axes=True, width=800, height=1200,tools=['hover'])","2cd7ff84":"cases_each_day = train.groupby('Date').sum()\nconfirmed_cases_each_day = hv.Curve((cases_each_day.index, cases_each_day['ConfirmedCases']),'time','cases').opts(title=\"The time-series of Confirmed Cases of all countries\", color=\"blue\")\nfatality_cases_each_day = hv.Curve((cases_each_day.index, cases_each_day['Fatalities']),'time','cases').opts(title=\"The time-series of Fatality Cases of all countries\", color=\"red\")\n\n(confirmed_cases_each_day + fatality_cases_each_day).opts(opts.Curve(width=1500, height=500,tools=['hover'],xrotation=45),opts.Layout(shared_axes=False)).cols(1)","4f225a4d":"cases_each_day_china = train[train['Country\/Region']=='China'].groupby('Date').sum()\ncases_each_day_us = train[train['Country\/Region']=='US'].groupby('Date').sum()\ncases_each_day_france = train[train['Country\/Region']=='France'].groupby('Date').sum()\ncases_each_day_uk = train[train['Country\/Region']=='United Kingdom'].groupby('Date').sum()\ncases_each_day_italy = train[train['Country\/Region']=='Italy'].groupby('Date').sum()\ncases_each_day_spain = train[train['Country\/Region']=='Spain'].groupby('Date').sum()\ncases_each_day_korea = train[train['Country\/Region']=='Korea_South'].groupby('Date').sum()\ncases_each_day_japan = train[train['Country\/Region']=='Japan'].groupby('Date').sum()\n\nconfirmed_cases_each_day_china = hv.Curve((cases_each_day_china.index, cases_each_day_china['ConfirmedCases']),'time','cases',label='China').opts(color=\"red\")\nconfirmed_cases_each_day_us = hv.Curve((cases_each_day_us.index, cases_each_day_us['ConfirmedCases']),'time','cases',label='US').opts(color=\"orange\")\nconfirmed_cases_each_day_france = hv.Curve((cases_each_day_france.index, cases_each_day_france['ConfirmedCases']),'time','cases',label='France').opts(color=\"green\")\nconfirmed_cases_each_day_uk = hv.Curve((cases_each_day_uk.index, cases_each_day_uk['ConfirmedCases']),'time','cases',label='UK').opts(color=\"blue\")\nconfirmed_cases_each_day_italy = hv.Curve((cases_each_day_italy.index, cases_each_day_italy['ConfirmedCases']),'time','cases',label='Italy').opts(color=\"purple\")\nconfirmed_cases_each_day_spain = hv.Curve((cases_each_day_spain.index, cases_each_day_spain['ConfirmedCases']),'time','cases',label='Spain').opts(color=\"pink\")\nconfirmed_cases_each_day_korea = hv.Curve((cases_each_day_korea.index, cases_each_day_korea['ConfirmedCases']),'time','cases',label='South Korea').opts(color=\"brown\")\nconfirmed_cases_each_day_japan = hv.Curve((cases_each_day_japan.index, cases_each_day_japan['ConfirmedCases']),'time','cases',label='Japan').opts(color=\"black\")\n\nfatality_cases_each_day_china = hv.Curve((cases_each_day_china.index, cases_each_day_china['Fatalities']),'time','cases',label='China').opts(color=\"red\")\nfatality_cases_each_day_us = hv.Curve((cases_each_day_us.index, cases_each_day_us['Fatalities']),'time','cases',label='US').opts(color=\"orange\")\nfatality_cases_each_day_france = hv.Curve((cases_each_day_france.index, cases_each_day_france['Fatalities']),'time','cases',label='France').opts(color=\"green\")\nfatality_cases_each_day_uk = hv.Curve((cases_each_day_uk.index, cases_each_day_uk['Fatalities']),'time','cases',label='UK').opts(color=\"blue\")\nfatality_cases_each_day_italy = hv.Curve((cases_each_day_italy.index, cases_each_day_italy['Fatalities']),'time','cases',label='Italy').opts(color=\"purple\")\nfatality_cases_each_day_spain = hv.Curve((cases_each_day_spain.index, cases_each_day_spain['Fatalities']),'time','cases',label='Spain').opts(color=\"pink\")\nfatality_cases_each_day_korea = hv.Curve((cases_each_day_korea.index, cases_each_day_korea['Fatalities']),'time','cases',label='South Korea').opts(color=\"brown\")\nfatality_cases_each_day_japan = hv.Curve((cases_each_day_japan.index, cases_each_day_japan['Fatalities']),'time','cases',label='Japan').opts(color=\"black\")\n\n((confirmed_cases_each_day_china * confirmed_cases_each_day_us * confirmed_cases_each_day_france * fatality_cases_each_day_uk * confirmed_cases_each_day_italy \n  * confirmed_cases_each_day_spain * confirmed_cases_each_day_korea * confirmed_cases_each_day_japan).opts(title=\"The time-series of Confirmed Cases\") \n + (fatality_cases_each_day_china * fatality_cases_each_day_us * fatality_cases_each_day_france * fatality_cases_each_day_uk * fatality_cases_each_day_italy \n    * fatality_cases_each_day_spain * fatality_cases_each_day_korea * fatality_cases_each_day_japan).opts(title=\"The time-series of Fatality Cases\")).opts(opts.Curve(width=1500, height=500,tools=['hover'],xrotation=45),opts.Layout(shared_axes=False)).cols(1)","5c0e7dca":"for country in train['Country\/Region'].unique():\n    print ('training model for country ==>'+country)\n    country_pd_train = train[train['Country\/Region']==country]\n    country_pd_test = test[test['Country\/Region']==country]\n    if country_pd_train['Province\/State'].isna().unique()==True:\n        x = np.array(range(len(country_pd_train))).reshape((-1,1))\n        y = country_pd_train['ConfirmedCases']\n        model = Pipeline([('poly', PolynomialFeatures(degree=2)),\n                         ('linear', LinearRegression(fit_intercept=False))])\n        model = model.fit(x, y)\n        predict_x = (np.array(range(len(country_pd_test)))+50).reshape((-1,1))\n        test.loc[test['Country\/Region']==country,'ConfirmedCases'] = model.predict(predict_x)\n    else:\n        for state in country_pd_train['Province\/State'].unique():\n            state_pd = country_pd_train[country_pd_train['Province\/State']==state] \n            state_pd_test = country_pd_test[country_pd_test['Province\/State']==state] \n            x = np.array(range(len(state_pd))).reshape((-1,1))\n            y = state_pd['ConfirmedCases']\n            model = Pipeline([('poly', PolynomialFeatures(degree=2)),\n                         ('linear', LinearRegression(fit_intercept=False))])\n            model = model.fit(x, y)\n            predict_x = (np.array(range(len(state_pd_test)))+50).reshape((-1,1))\n            test.loc[(test['Country\/Region']==country)&(test['Province\/State']==state),'ConfirmedCases'] = model.predict(predict_x)","65876534":"for country in train['Country\/Region'].unique():\n    print ('training model for country ==>'+country)\n    country_pd_train = train[train['Country\/Region']==country]\n    country_pd_test = test[test['Country\/Region']==country]\n    if country_pd_train['Province\/State'].isna().unique()==True:\n        x = np.array(range(len(country_pd_train))).reshape((-1,1))\n        y = country_pd_train['Fatalities']\n        model = Pipeline([('poly', PolynomialFeatures(degree=2)),\n                         ('linear', LinearRegression(fit_intercept=False))])\n        model = model.fit(x, y)\n        predict_x = (np.array(range(len(country_pd_test)))+50).reshape((-1,1))\n        test.loc[test['Country\/Region']==country,'Fatalities'] = model.predict(predict_x)\n    else:\n        for state in country_pd_train['Province\/State'].unique():\n            state_pd = country_pd_train[country_pd_train['Province\/State']==state] \n            state_pd_test = country_pd_test[country_pd_test['Province\/State']==state] \n            x = np.array(range(len(state_pd))).reshape((-1,1))\n            y = state_pd['Fatalities']\n            model = Pipeline([('poly', PolynomialFeatures(degree=2)),\n                         ('linear', LinearRegression(fit_intercept=False))])\n            model = model.fit(x, y)\n            predict_x = (np.array(range(len(state_pd_test)))+50).reshape((-1,1))\n            test.loc[(test['Country\/Region']==country)&(test['Province\/State']==state),'Fatalities'] = model.predict(predict_x)","df7f4992":"submit = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/submission.csv')\nsubmit['Fatalities'] = test['Fatalities'].astype('int')\nsubmit['ConfirmedCases'] = test['ConfirmedCases'].astype('int')\nsubmit.to_csv('submission.csv',index=False)\nsubmit.head()","89f9c8c1":"## The time-series trend in Confirmed & Fatality cases\n* Confirmed cases have been increaing from March sharply generally\n* Looking at the curve of the increase of China, the case suddenly increased in the middle of February and became flattened in the early March\n* But in the other Europian countries the number of cases have been increasing from the middle of March, and this increasing trend in these countries may continue or get worse based on China's trend","99704873":"## The number of cases in each state by countries\n* Looking the rank of confirmed cases by each state, the top 2 countries, which are China & US, are classified in detail into each state.\n* But the other countries are not so well classified, and that means there are some differences in the granularity of collected data in each countries.","ba9bb07b":"# Library Import","72363fd3":"## Comparison of Reported, Confirmed, Fatality Cases in each countries\n* The top country of Reported Cases is **US**, but the top coutry of Confirmed Cases is **China**.\n* In the same way, the second of Confirmed Cases is Italy, but the rank of Italy in Reported Casess is not so high.\n    * Based on above, it can be said that the countries whose rank of Reported Cases is higher than that of Confirmed Cases are successful in **early preventing and testing**.\n* And moreover, those countries like China and Italy mentioned above are at the high rank in Fatality Cases.","e59d3777":"## Submission","99e55250":"# Data Import","bc188fcf":"## The comparison of cases in each provinces and states\n* the countries whose data contains Province & State information are only US, China, Canada, Australia, France, UK, Netherlands and Denmark out of total 163 countries.","b90a9292":"## Modeling","7dcab71b":"# EDA","49f74804":"## Basic Information"}}