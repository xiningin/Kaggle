{"cell_type":{"48645840":"code","01b2030a":"code","5f8c5474":"code","5063d6b7":"code","bb323dcf":"code","b379ecb5":"code","cbb7aa81":"code","c851ddd8":"code","6dbb6270":"code","a3fa3418":"code","42e5867e":"markdown","5a7acb4f":"markdown","1d396c73":"markdown","7209ca83":"markdown"},"source":{"48645840":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","01b2030a":"import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nimport warnings\nfrom datetime import datetime, timedelta\nfrom ipywidgets import interact\nimport itertools\nfrom tabulate import tabulate\n\n\nconfirmedFilename = '\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv'\ndeathsFilename = '\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_deaths_global.csv'\nrecoveredFilename = '\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_recovered_global.csv'\n\n# Countries to ski prediction\nskipPredictionCountriesList = ['China', 'Korea, South', 'Singapore', 'Taiwan*']","5f8c5474":"# Load all 3 csv files\ncovidFrDict = {}\ncovidFrDict['confirmed'] = pd.read_csv(confirmedFilename)\ncovidFrDict['deaths'] = pd.read_csv(deathsFilename)\ncovidFrDict['recovered'] = pd.read_csv(recoveredFilename)","5063d6b7":"# Get list of dates\ncolNamesList = list(covidFrDict['confirmed'])\ndateList = [colName for colName in colNamesList if '\/20' in colName] # Dates always have '\/20' in them\n\n# Create list of datetime objects from date strings\ndateTimeOjectList = [datetime.strptime(timeStr, '%m\/%d\/%y') for timeStr in dateList]","bb323dcf":"# Function to get all three frames for a given country\ndef getCountryCovidFrDict(countryName):\n    countryCovidFrDict = {}\n    for key in covidFrDict.keys():\n        dataFr = covidFrDict[key]\n        countryCovidFrDict[key] = dataFr[dataFr['Country\/Region'] == countryName]\n    return countryCovidFrDict\n\n# Function for plotting country data\ndef plotCountryData(countryName, logScale=False):\n    countryCovidFrDict = getCountryCovidFrDict(countryName)\n    fig = plt.figure(figsize=(8,8))\n    ax = fig.add_subplot(111)\n    for key in countryCovidFrDict.keys():\n        casesByDateDict = dict(countryCovidFrDict[key][dateList].sum(axis=0))\n        # Stop drawing vertical lines on log scale when plotting zero\n        if logScale:\n            for dateKey in casesByDateDict.keys():\n                if casesByDateDict[dateKey] == 0:\n                    casesByDateDict[dateKey] = np.nan\n        ax.plot(list(casesByDateDict.keys()), list(casesByDateDict.values()), marker='o', label=key);\n\n    plt.xticks(rotation=45, ha=\"right\");\n    \n    if logScale:\n        plt.yscale('log')\n\n    every_nth = 4\n    for n, label in enumerate(ax.xaxis.get_ticklabels()):\n        if n % every_nth != 0:\n            label.set_visible(False)\n    ax.legend(loc='upper left');\n    plt.title('Data for {}'.format(countryName), fontsize=26);\n    plt.xlabel('Date', fontsize=18);\n    plt.ylabel('Number of cases', fontsize=18);","b379ecb5":"plotCountryData('US', logScale=False)","cbb7aa81":"def getPredictionsForFuture(countryName,\n                            nDays=5,\n                            invertible=False, # Whether model is invertible or not\n                            plot=True,\n                            logScale=False,\n                            grid=None,\n                            printResults=True,\n                            tablesToUse='all',\n                            returnResults=False):\n   \n    \n    # Extract model parameters\n    p, d, q = (1, 2, 2)\n    countryCovidFrDict = getCountryCovidFrDict(countryName)\n    plotStartedFlag = False\n    if tablesToUse == 'all':\n        keysList = countryCovidFrDict.keys()\n    else:\n        keysList = tablesToUse\n    allData = {}\n    predData = {}\n    for key in keysList:\n        if printResults:\n            print('Table type:', key)\n        data = list(countryCovidFrDict[key][dateList].sum(axis=0))\n        predictionsList = []\n\n        for i in range(nDays):\n            if invertible:\n                model = SARIMAX(data, order=(p, d, q))\n\n                model_fit = model.fit(disp=False)\n\n                # make prediction\n                yhat = model_fit.predict(len(data), len(data), typ='levels')\n            else:\n                model = SARIMAX(data, order=(p, d, q), enforce_invertibility=False)\n\n                model_fit = model.fit(disp=False)\n\n                # make prediction\n                yhat = model_fit.predict(len(data), len(data), typ='levels')\n\n            data.extend(yhat)\n            predictionsList.append(yhat[0])\n            \n        # Required for printing as well as plotting\n        dateTimeOjectForPlotList = dateTimeOjectList.copy()\n        lastDateTimeObject = dateTimeOjectForPlotList[-1]\n        futureDateTimeObjectList = []\n        for i in range(nDays):\n            lastDateTimeObject += timedelta(days=1)\n            dateTimeOjectForPlotList.append(lastDateTimeObject)\n            futureDateTimeObjectList.append(lastDateTimeObject)\n\n        datetimeForPlotList = [dateTimeObject.strftime('%m\/%d\/%y') for dateTimeObject in dateTimeOjectForPlotList]\n        futureDateTimeList = [dateTimeObject.strftime('%m\/%d\/%y') for dateTimeObject in futureDateTimeObjectList]\n        \n        if printResults:\n            print('Predictions for next {} days:'.format(nDays))\n            # Round off predictions for printing\n            predPrintList = [np.around(elem) for elem in predictionsList]\n            datePredList = list(zip(futureDateTimeList, predPrintList))\n            # Convert individual elements of zip to a list\n            datePredList = [list(elem) for elem in datePredList]\n            print(tabulate(datePredList, headers=['Date', 'Prediction'], tablefmt='orgtbl'))\n            \n                \n        if plot:\n            # Start a plot if not already started\n            if plotStartedFlag == False:\n                fig = plt.figure(figsize=(8,8))\n                ax = fig.add_subplot(111)\n                plotStartedFlag = True\n            if logScale:\n                for i in range(len(data)):\n                    if data[i] == 0:\n                        data[i] = np.nan\n            ax.plot(datetimeForPlotList, data, marker='o', label=key);\n            # Circle predictions\n            ax.scatter(futureDateTimeList, predictionsList, s=130, linewidth=2, facecolors='none', edgecolors='k');\n        \n        allDataDict = dict(zip(datetimeForPlotList, data))\n        allData[key] = allDataDict\n\n        predDict = dict(zip(futureDateTimeList, predictionsList))\n        predData[key] = predDict\n    if plot:\n        if logScale:\n            plt.yscale('log')\n        plt.xticks(rotation=45, ha=\"right\");\n        \n        every_nth = 4\n        for n, label in enumerate(ax.xaxis.get_ticklabels()):\n            if n % every_nth != 0:\n                label.set_visible(False)\n        ax.legend(loc='upper left', prop={'size': 18});\n        plt.title('Data for {}\\n(Including predictions for next {} days)'.format(countryName, nDays), fontsize=24);\n        plt.xlabel('Date', fontsize=18);\n        if logScale:\n            plt.ylabel('Number of cases (log scale)', fontsize=18);\n        else:\n            plt.ylabel('Number of cases', fontsize=18);\n        \n        if grid != None:\n            plt.grid(axis=grid)\n        \n    if returnResults:\n        return allData, predData","c851ddd8":"allData, predData = getPredictionsForFuture('US', \n                                            invertible=False,\n                                            plot=True,\n                                            logScale=False, \n                                            printResults=True, \n                                            nDays=5, \n                                            tablesToUse=['confirmed'], \n                                            grid='y',\n                                            returnResults=True)","6dbb6270":"def comparePlotsOfNCountries(countryNameList,\n                             nDays=5,\n                             invertible=False, # Whether model is invertible or not\n                             logScale=False,\n                             grid=None,\n                             printResults=True,\n                             tableToUse='confirmed'):\n    \n    fig = plt.figure(figsize=(8,8))\n    ax = fig.add_subplot(111)\n    printListCreatedFlag = False\n    for countryName in countryNameList:\n        allData, predData = getPredictionsForFuture(countryName,\n                                                    nDays=nDays,\n                                                    invertible=invertible,\n                                                    plot=False,\n                                                    logScale=logScale,\n                                                    grid=grid,\n                                                    printResults=False,\n                                                    tablesToUse=[tableToUse],\n                                                    returnResults=True)\n        allData = allData[tableToUse]\n        predData = predData[tableToUse]\n        ax.plot(list(allData.keys()), list(allData.values()), marker='o', label=countryName);\n        \n        if printListCreatedFlag == False:\n            printListCreatedFlag = True\n            \n            futureDateTimeList = list(predData.keys())\n            predictionsList = list(predData.values())\n            predPrintList = [np.around(elem) for elem in predictionsList]\n            \n            # Zip dates and predictions together\n            datePredList = list(zip(futureDateTimeList, predPrintList))\n            # Convert individual elements of zip to a list\n            datePredList = [list(elem) for elem in datePredList]\n        else:\n            predictionsList = list(predData.values())\n            for i in range(len(datePredList)):\n                datePredList[i].append(np.around(predictionsList[i]))\n                \n        # Circle predictions\n        ax.scatter(futureDateTimeList, predictionsList, s=130, linewidth=2, facecolors='none', edgecolors='k');\n            \n    if printResults:\n        headerList = ['Date']\n        headerList.extend(countryNameList)\n        print(tabulate(datePredList, headers=headerList, tablefmt='orgtbl'))\n            \n        \n    plt.xticks(rotation=45, ha=\"right\");\n    if logScale:\n        plt.yscale('log')\n        \n    every_nth = 4\n    for n, label in enumerate(ax.xaxis.get_ticklabels()):\n        if n % every_nth != 0:\n            label.set_visible(False)\n    ax.legend(loc='upper left', prop={'size': 18});\n    \n    plt.title('Covid-19 data ({})\\nIncluding predictions for next {} days'.format(tableToUse, nDays), fontsize=24);\n    plt.xlabel('Date', fontsize=18);\n    if logScale:\n        plt.ylabel('Number of cases (log scale)', fontsize=18);\n    else:\n        plt.ylabel('Number of cases', fontsize=18);\n        \n    if grid != None:\n        plt.grid(axis=grid)","a3fa3418":"comparePlotsOfNCountries(['US', 'Italy', 'Germany', 'Spain', 'China'], nDays=3, grid='y', tableToUse='deaths')","42e5867e":"The following notebook shows the predicted data for no of case confirmed(might be) in US for next five days.Also the total no of deaths in Us for the next 3 days compared with other countries.The data is visually represented to show the growth of cases and death rate.","5a7acb4f":"Comparision plot of different countries with predicted data for next 3 days****","1d396c73":"General Data represantation of US cases from january to april 15.","7209ca83":"Prediction plot of the cases for Next 5 days."}}