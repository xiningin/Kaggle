{"cell_type":{"87314b53":"code","a24d4311":"code","6b8f2235":"code","5e7d8b84":"code","3006afb3":"markdown","5b815f98":"markdown","003c203a":"markdown","b2c26f65":"markdown"},"source":{"87314b53":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","a24d4311":"df = pd.read_csv(\"..\/input\/2019-2020-turkey-football-club-matches\/tur1920.csv\", encoding=\"utf8\")\ndf.drop(\"region\", axis=1, inplace=True) # All indexes are Turkey so we don't need it.\ndf.rename(columns={\"home_oelo\": \"home_elo_before\",\n                   \"home_nelo\": \"home_elo_after\",\n                   \"away_oelo\": \"away_elo_before\",\n                   \"away_nelo\": \"away_elo_after\"}, inplace=True) # This is better to me. :)\ndf = df.iloc[::-1] # I fixed the df according to the chronological order.\ndf.reset_index(inplace=True, drop=True)\nprint(df.head())","6b8f2235":"FB_all = df[np.logical_or(df[\"home\"] == \"Fenerbah\u00e7e\", df[\"away\"] == \"Fenerbah\u00e7e\")]\nGS_all = df[np.logical_or(df[\"home\"] == \"Galatasaray\", df[\"away\"] == \"Galatasaray\")]\nFB_all.reset_index(inplace=True, drop=True)\nGS_all.reset_index(inplace=True, drop=True)\n\nfig = plt.figure(figsize=[16,5], constrained_layout=True)\nspec = fig.add_gridspec(1, 2)\n\nax1 = fig.add_subplot(spec[0, 0])\nfor i in FB_all.index:\n    if FB_all[\"home\"].iloc[i] == \"Fenerbah\u00e7e\": elo = (FB_all[\"home_elo_before\"].iloc[i], FB_all[\"home_elo_after\"].iloc[i])\n    else: elo = (FB_all[\"away_elo_before\"].iloc[i], FB_all[\"away_elo_after\"].iloc[i])\n    ax1.plot([i, i+1], elo, color=\"blue\")\n\nax1.set_yticks([i for i in range(1700, 1901, 20)])\nax1.set_title(\"Fenerbah\u00e7e\", fontsize=15)\nax1.set_xlabel(\"match\", fontsize=13)\nax1.set_ylabel(\"elo\", fontsize=13)\nax1.grid(linestyle=\"--\", linewidth=1, alpha=0.4)\n\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)\n    \nax2 = fig.add_subplot(spec[0, 1])\nfor i in GS_all.index:\n    if GS_all[\"home\"].iloc[i] == \"Galatasaray\": elo = (GS_all[\"home_elo_before\"].iloc[i], GS_all[\"home_elo_after\"].iloc[i])\n    else: elo = (GS_all[\"away_elo_before\"].iloc[i], GS_all[\"away_elo_after\"].iloc[i])\n    ax2.plot([i, i+1], elo, color=\"red\")\n\nax2.set_title(\"Galatasaray\", fontsize=15)\nax2.set_yticks([i for i in range(1700, 1901, 20)])\nax2.set_xlabel(\"match\", fontsize=13)\nax2.grid(linestyle=\"--\", linewidth=1, alpha=0.4)\n\nax2.spines[\"top\"].set_visible(False)\nax2.spines[\"right\"].set_visible(False)\n\nplt.show()","5e7d8b84":"home_teams = list(df[\"home\"].unique())\naway_teams = list(df[\"away\"].unique())\nteams = home_teams + [i for i in away_teams if i not in home_teams]\n\nfig = plt.figure(figsize=[16,20], constrained_layout=True)\n\nax = fig.add_subplot()\n\nmax_elo_gain, max_elo_loss = [None, 0, 0], [None, 0, 0]\nfor i in range(len(teams)):\n    team = df[np.logical_or(df[\"home\"] == teams[i], df[\"away\"] == teams[i])]\n    if team[\"home\"].iloc[0] == teams[i]: elo = [team[\"home_elo_before\"].iloc[0], None]\n    else: elo = [team[\"away_elo_before\"].iloc[0], None]\n    if team[\"home\"].iloc[-1] == teams[i]: elo[1] = team[\"home_elo_after\"].iloc[-1]\n    else: elo[1] = team[\"away_elo_after\"].iloc[-1]\n    ax.scatter(x=elo[0], y=teams[i], color=\"blue\", alpha=0.8)\n    ax.scatter(x=elo[1], y=teams[i], color=\"blue\", alpha=0.8, marker=(\">\" if elo[1]-elo[0] >= 0 else \"<\"))\n    ax.hlines(y=teams[i], xmin=elo[0], xmax=elo[1], color=\"blue\", alpha=0.8)\n    if elo[1]-elo[0] > max_elo_gain[2]: max_elo_gain = [teams[i], elo[1], elo[1]-elo[0]]\n    if elo[1]-elo[0] < max_elo_loss[2]: max_elo_loss = [teams[i], elo[1], elo[1]-elo[0]]\n\nax.text(x=max_elo_gain[1]+10, y=max_elo_gain[0], s=f\"max elo gain ({max_elo_gain[2]})\", color=\"green\", horizontalalignment=\"left\")\nax.text(x=max_elo_loss[1]-10, y=max_elo_loss[0], s=f\"max elo loss ({abs(max_elo_loss[2])})\", color=\"red\", horizontalalignment=\"right\")\n\nax.hlines(y=teams, xmin=1200, xmax=2300, linewidth=1, linestyle=\"--\", alpha=0.2)\nax.vlines(x=np.arange(1300, 2201, 100), ymin=0, ymax=len(teams)-1, linewidth=1, linestyle=\"--\", alpha=0.2)\n\nax.set_xticks(np.arange(1200, 2301, 100))\n\nax.spines[\"right\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(False)\nax.spines[\"bottom\"].set_position(('data',-1))\nplt.show()\n\n    ","3006afb3":"# 4. Elo difference between the beginning and end of season of all teams","5b815f98":"# 1. Packages","003c203a":"# 3. Elo changes of team Fenerbah\u00e7e and Galatasaray","b2c26f65":"# 2. Data"}}