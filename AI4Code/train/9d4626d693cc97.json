{"cell_type":{"71804ca9":"code","f56f41f6":"code","c6dda415":"code","cabed4fa":"code","8640a782":"code","b0c5dedc":"code","03589227":"code","0f4a6ae4":"code","18f2d5f1":"code","d250b494":"code","abe96982":"code","a3e3abe7":"code","1bebb4d5":"code","2c3e149a":"code","b687be84":"code","a74a9f19":"code","333d1586":"code","1cd8fde8":"code","86658da0":"code","3a4d3529":"code","6e7f997e":"code","b54465b5":"code","af9ec63a":"code","2d13392b":"code","227d5ae2":"code","d9c14509":"code","72ef2cbb":"code","9e36a562":"code","e9acc422":"code","b84700f9":"code","0bb23f03":"code","a536b9ef":"code","51064114":"code","d19790e9":"code","b1940932":"code","e0c12518":"code","600b8e78":"code","2451ed59":"code","218c613e":"code","36cf0b3e":"code","0422ed7f":"code","efc4a16e":"code","b08de458":"code","e9421979":"code","5fe2949c":"code","40108650":"code","96da84ed":"code","b177f9b6":"code","b09f8627":"code","cf2ec7b3":"code","73b9863f":"code","e9a01ecc":"code","8eff30c0":"code","a6750645":"code","21c158eb":"code","d67e7de7":"code","c347e95f":"code","b72b7b60":"code","e8e739e3":"code","b3f0601d":"code","9e3e428a":"code","375b3fa4":"code","a5620c42":"code","aa5d1105":"code","b72c6be6":"code","ad1ca521":"code","62bbebae":"code","8c55a1cf":"code","a558062a":"code","fd112cf4":"code","a6eea719":"code","4d6fa1de":"code","0ed308d9":"code","93d2a27d":"code","b0be80f0":"code","a7f8802e":"code","cb943b7e":"code","d6a27ab7":"code","6fa2f1e2":"code","366265ce":"code","23f15462":"code","74c898db":"code","947843d9":"code","c975437b":"code","e9751e31":"code","1e0600d5":"code","09177959":"code","af2e5b15":"code","453545a3":"code","8ed6fbe9":"code","7255aee7":"code","681490c5":"code","4d6f2bea":"code","4df378d7":"code","bc9ab107":"code","5bdd79a1":"code","dda625e2":"code","7147af1f":"code","45c55ec6":"code","c4a21ee2":"code","72838d04":"code","e34b38ac":"code","4a6c0644":"code","0ede6ad5":"code","6d33da0a":"code","60371725":"code","f8a89499":"code","a7ade0d8":"code","fb255c02":"code","09cc9c21":"code","c391ce9e":"code","59e3135a":"code","3baf1c41":"code","314a0e43":"code","dddf0eba":"code","b0490ed2":"code","5c6abef5":"code","68abf015":"code","924a42fe":"code","d6b12a51":"code","dba5e4b0":"code","d0dc2b40":"code","2947b511":"code","e5f0c1f0":"code","d97f6e93":"code","c6f343d8":"code","86e21223":"code","f2947ea6":"code","8a6a5b19":"code","ceccc310":"code","b35be0a8":"code","f3b92bfb":"code","b4850754":"code","94da3a88":"code","1b66fa9b":"code","4108595a":"code","b83013ce":"code","5fc8af2d":"code","bafd36c4":"code","601a2973":"code","6852c0ce":"code","dffa62e0":"code","f7629a8e":"code","223d1e0c":"code","a304b9a2":"code","80589347":"code","9a8ef0a6":"code","6c7025c6":"code","de825cec":"code","a2c00d5c":"code","9451c617":"code","a3ae1db3":"code","ec9fc346":"markdown","a0d89603":"markdown","9591e169":"markdown","8def6e89":"markdown","88a06330":"markdown","5a506e98":"markdown","dcd49f46":"markdown","156d963b":"markdown","8eccfb9b":"markdown","62511d68":"markdown","f7d2a50c":"markdown","ba5ac39e":"markdown","b70e0f21":"markdown","bda84cc9":"markdown","fbadff42":"markdown","267c0805":"markdown","b94ea56f":"markdown","0475e9b8":"markdown","1feabb47":"markdown","ac3f7d71":"markdown","5a9180e1":"markdown","ccd68af8":"markdown","820d8340":"markdown","3e6d7ca6":"markdown","ca6e7999":"markdown","2237d19c":"markdown","127c1a1d":"markdown","0662d75f":"markdown","d0862c5b":"markdown","00573e74":"markdown","cb2f204a":"markdown","53ffb1f8":"markdown","8a56b44b":"markdown","a7a43dfc":"markdown","8c29d9f8":"markdown","2ba33fb4":"markdown","964f56db":"markdown","d9c2b149":"markdown","8be8dd96":"markdown","78a7dffc":"markdown","240f1d2e":"markdown","cef921f8":"markdown","9f1f15a1":"markdown","0fbfab4f":"markdown","4bf532d1":"markdown","7a30b717":"markdown","79c7246d":"markdown","690c48ba":"markdown","8ee9c613":"markdown","cc6fc6b9":"markdown","9571ea12":"markdown","e32e55bf":"markdown","96b0294b":"markdown","0eae66d1":"markdown","87360e3e":"markdown","fcbab41e":"markdown","aef867ec":"markdown","fc3f2a9d":"markdown","2984dd6c":"markdown","1929520d":"markdown","fd1e5757":"markdown","25a20b66":"markdown","6a9b4b70":"markdown","9dbc6d35":"markdown","e09e026c":"markdown","e365dc1c":"markdown","9c2ae06c":"markdown","3474f3e0":"markdown","c97426f0":"markdown","68c5e210":"markdown","1de4a01a":"markdown","1046576b":"markdown","a39eb044":"markdown","77a44dda":"markdown","ed722230":"markdown","66d4ee05":"markdown","f66f0db3":"markdown","db89f156":"markdown","8f1a3094":"markdown","80388fa4":"markdown","836cf5be":"markdown","11d5b8ea":"markdown","4ca3f321":"markdown","c7b7a111":"markdown","a7c1041a":"markdown"},"source":{"71804ca9":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os\n\n# from plotly import plotly\nimport plotly.offline as offline\nimport plotly.graph_objs as go\noffline.init_notebook_mode()\nfrom collections import Counter\n\n\n# for automatic linebreaks and multi-line cells.\n# pd.set_option('display.max_colwidth', -1)\npd.options.display.max_colwidth = 100","f56f41f6":"# from google.colab import drive\n# drive.mount('\/content\/drive')","c6dda415":"# project_data = pd.read_csv('train_data.csv')\n# resource_data = pd.read_csv('resources.csv')\n\nproject_data = pd.read_csv('..\/input\/train_data.csv')\nresource_data = pd.read_csv('..\/input\/resources.csv')","cabed4fa":"print(\"Number of data points in train data\", project_data.shape)\nprint('-'*50)\nprint(\"The attributes of data :\", project_data.columns.values)","8640a782":"project_data.head(3)","b0c5dedc":"print(\"Number of data points in train data\", resource_data.shape)\nprint(resource_data.columns.values)\nresource_data.head(3)","03589227":"# Check if any null value exist in dataframe\nproject_data.isnull().values.any()","0f4a6ae4":"# check where are nan values pandas ## https:\/\/dzone.com\/articles\/pandas-find-rows-where-columnfield-is-null\nnull_columns=project_data.columns[project_data.isnull().any()]\nproject_data[null_columns].isnull().sum()","18f2d5f1":"# Since project_essay_3 and project_essay_4 are unavailable for later time\n# and teacher_prefix have only 3 rows which have null value \n# so we drop only those rows where techer_prefix's have null value\n\nproject_data.dropna(subset=['teacher_prefix'], inplace=True)\nproject_data.shape","d250b494":"project_data.drop(['Unnamed: 0'], axis=1, inplace=True)","abe96982":"project_data.head(3)","a3e3abe7":"# how to replace elements in list python: https:\/\/stackoverflow.com\/a\/2582163\/4084039\ncols = ['Date' if x=='project_submitted_datetime' else x for x in list(project_data.columns)]\n\n#sort dataframe based on time pandas python: https:\/\/stackoverflow.com\/a\/49702492\/4084039\nproject_data['Date'] = pd.to_datetime(project_data['project_submitted_datetime'])\nproject_data.drop('project_submitted_datetime', axis=1, inplace=True)\nproject_data.sort_values(by=['Date'], inplace=True)\n\n# how to reorder columns pandas python: https:\/\/stackoverflow.com\/a\/13148611\/4084039\nproject_data = project_data[cols]\n\n\nproject_data.head(5)","1bebb4d5":"print(project_data['project_subject_categories'].head(10))","2c3e149a":"catogories = list(project_data['project_subject_categories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\ncat_list = []\nfor i in catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp+=j.strip()+\" \" #\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_') # we are replacing the & value into \n    cat_list.append(temp.strip())\n    \nproject_data['clean_categories'] = cat_list\nproject_data.drop(['project_subject_categories'], axis=1, inplace=True)\n\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_categories'].values:\n    my_counter.update(word.split())\n\ncat_dict = dict(my_counter)\nsorted_cat_dict = dict(sorted(cat_dict.items(), key=lambda kv: kv[1]))\n","b687be84":"print(project_data['clean_categories'].head(10))","a74a9f19":"# list(project_data.columns.values)","333d1586":"print(project_data['project_subject_subcategories'].head(10))","1cd8fde8":"sub_catogories = list(project_data['project_subject_subcategories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\n\nsub_cat_list = []\nfor i in sub_catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp +=j.strip()+\" \"#\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_')\n    sub_cat_list.append(temp.strip())\n\nproject_data['clean_subcategories'] = sub_cat_list\nproject_data.drop(['project_subject_subcategories'], axis=1, inplace=True)\n\n# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nmy_counter = Counter()\nfor word in project_data['clean_subcategories'].values:\n    my_counter.update(word.split())\n    \nsub_cat_dict = dict(my_counter)\nsorted_sub_cat_dict = dict(sorted(sub_cat_dict.items(), key=lambda kv: kv[1]))","86658da0":"print(project_data['clean_subcategories'].head(10))","3a4d3529":"# list(project_data.columns.values)","6e7f997e":"print(project_data[\"teacher_prefix\"].head(10))","b54465b5":"# remove dot from pandas column ## https:\/\/www.reddit.com\/r\/learnpython\/comments\/5ktuhv\/how_do_i_remove_commas_from_data_frame_column\/\nproject_data[\"teacher_prefix\"] = project_data[\"teacher_prefix\"].str.replace(\".\",\"\")","af9ec63a":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nmy_counter = Counter()\nfor word in project_data['teacher_prefix'].values:\n    my_counter.update(word.split())","2d13392b":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\nteacher_prefix_dict = dict(my_counter)\nsorted_teacher_prefix_dict = dict(sorted(teacher_prefix_dict.items(), key=lambda kv: kv[1]))","227d5ae2":"print(project_data[\"teacher_prefix\"].head(10))","d9c14509":"project_data[\"school_state\"] = project_data[\"school_state\"].str.strip()\nproject_data[\"school_state\"] = project_data[\"school_state\"].str.replace(' ', '')","72ef2cbb":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['school_state'].values:\n    my_counter.update(word.split())","9e36a562":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\nstate_dict = dict(my_counter)\nsorted_state_dict = dict(sorted(state_dict.items(), key=lambda kv: kv[1]))","e9acc422":"print(project_data[\"project_grade_category\"].head(10))","b84700f9":"project_data[\"project_grade_category\"] = project_data[\"project_grade_category\"].str.replace(\" \",\"_\")\nproject_data[\"project_grade_category\"] = project_data[\"project_grade_category\"].str.replace(\"-\",\"_to_\")","0bb23f03":"print(project_data[\"project_grade_category\"].head(10))","a536b9ef":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\n# https:\/\/stackoverflow.com\/questions\/45340785\/update-counter-collection-in-python-with-string-not-letter\nmy_counter = Counter()\nfor word in project_data['project_grade_category'].values:\n#     print(word)\n    my_counter.update({word:1})","51064114":"print(my_counter)","d19790e9":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\nproject_grade_category_dict = dict(my_counter)\nsorted_project_grade_category_dict = dict(sorted(project_grade_category_dict.items(), key=lambda kv: kv[1]))","b1940932":"# project_data[\"project_grade_category\"]\nprint(\"\\n\".join(list(project_data[\"project_grade_category\"][:10])))","e0c12518":"# merge two column text dataframe: \nproject_data[\"essay\"] = project_data[\"project_essay_1\"].map(str) +\\\n                        project_data[\"project_essay_2\"].map(str) + \\\n                        project_data[\"project_essay_3\"].map(str) + \\\n                        project_data[\"project_essay_4\"].map(str)","600b8e78":"project_data.head(2)","2451ed59":"# printing some random reviews\nprint(project_data['essay'].values[0])\nprint(\"=\"*50)\nprint(project_data['essay'].values[150])\nprint(\"=\"*50)\nprint(project_data['essay'].values[1000])\nprint(\"=\"*50)\nprint(project_data['essay'].values[20000])\n# print(\"=\"*50)\n# print(project_data['essay'].values[99999])\nprint(\"=\"*50)","218c613e":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","36cf0b3e":"sent = decontracted(project_data['essay'].values[20000])\nprint(sent)\nprint(\"=\"*50)","0422ed7f":"# \\r \\n \\t remove from string python: http:\/\/texthandler.com\/info\/remove-line-breaks-python\/\nsent = sent.replace('\\\\r', ' ')\nsent = sent.replace('\\\\\"', ' ')\nsent = sent.replace('\\\\n', ' ')\nprint(sent)","efc4a16e":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent = re.sub('[^A-Za-z0-9]+', ' ', sent)\nprint(sent)","b08de458":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"]","e9421979":"# Combining all the above stundents \nfrom tqdm import tqdm\npreprocessed_essays = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['essay'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n    preprocessed_essays.append(sent.lower().strip())","5fe2949c":"# after preprocesing\npreprocessed_essays[20000]","40108650":"# project_data.head(5)\nproject_data[\"essay\"].head(5)","96da84ed":"## new column added as preprocessed_essays and older unProcessed essays columns are deleted\nproject_data['preprocessed_essays'] = preprocessed_essays\n\n# Drop duplicate unnessesary features\nproject_data.drop(['essay'], axis=1, inplace=True)\nproject_data.drop(['project_essay_1'], axis=1, inplace=True)\nproject_data.drop(['project_essay_2'], axis=1, inplace=True)\nproject_data.drop(['project_essay_3'], axis=1, inplace=True)\nproject_data.drop(['project_essay_4'], axis=1, inplace=True)","b177f9b6":"print(\"\\n\".join(list(project_data.columns.values)))","b09f8627":"project_data[\"preprocessed_essays\"].head(5)","cf2ec7b3":"from tqdm import tqdm\npreprocessed_project_title = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['project_title'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n    preprocessed_project_title.append(sent.lower().strip())","73b9863f":"project_data['project_title'].head(5)","e9a01ecc":"project_data['preprocessed_title'] = preprocessed_project_title\nproject_data.drop(['project_title'], axis=1, inplace=True)","8eff30c0":"project_data['preprocessed_title'].head(5)","a6750645":"print(\"dataframe attributes :\")\nprint(\"-\"*20)\nprint(\"\\n\".join(list(project_data.columns.values)))","21c158eb":"from tqdm import tqdm\npreprocessed_project_resource_summary = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['project_resource_summary'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n    preprocessed_project_resource_summary.append(sent.lower().strip())","d67e7de7":"project_data['project_resource_summary'].head(10)","c347e95f":"project_data['preprocessed_resource_summary'] = preprocessed_project_resource_summary\nproject_data.drop(['project_resource_summary'], axis=1, inplace=True)","b72b7b60":"project_data['preprocessed_resource_summary'].head(10)","e8e739e3":"print(\"dataframe attributes :\")\nprint(\"-\"*20)\nprint(\"\\n\".join(list(project_data.columns.values)))","b3f0601d":"price_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\nprint(price_data.head(5))","9e3e428a":"project_data = pd.merge(project_data, price_data, on='id', how='left')","375b3fa4":"print(\"\\n\".join(list(project_data.columns.values)))","a5620c42":"## taking random samples of 10k datapoints\nproject_data_sample = project_data.sample(n = 3000) \nprint(project_data_sample.shape)\n\n# y_counts = project_data_sample['project_is_approved'].value_counts()\n# print(\"Number of projects approved :     \", y_counts[1],\" -> \",round(y_counts[1]\/(y_counts[1]+y_counts[0])*100,2),\"%\")\n# print(\"Number of projects not approved : \", y_counts[0],\" -> \",round(y_counts[0]\/(y_counts[1]+y_counts[0])*100,2),\"%\")","aa5d1105":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(\n    project_data_sample,\n    project_data_sample['project_is_approved'],\n    test_size=0.2,\n    random_state=42,\n    stratify=project_data_sample[['project_is_approved']])\n\nprint(\"x_train shape : \",x_train.shape)\nprint(\"x_test shape  : \",x_test.shape)\nprint(\"y_train shape : \",y_train.shape)\nprint(\"y_test shape  : \",y_test.shape)","b72c6be6":"x_train, x_cv, y_train, y_cv = train_test_split(x_train, y_train, test_size=0.25, stratify=y_train)\n\nprint(\"x_train shape : \",x_train.shape)\nprint(\"y_train shape : \",y_train.shape)\nprint(\"x_cv shape    : \",x_cv.shape)\nprint(\"x_cv shape    : \",y_cv.shape)\nprint(\"x_test shape  : \",x_test.shape)\nprint(\"y_test shape  : \",y_test.shape)\n","ad1ca521":"x_train['project_is_approved'].value_counts()","62bbebae":"# class distributions\n\nax1 = plt.axes()\n# color palette sns ## https:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html\n# g = sns.countplot(\"project_is_approved\",data=x_train, hue='project_is_approved', ax = ax1, palette=\"BrBG\")\ng = sns.countplot(\"project_is_approved\",data=x_train, hue='project_is_approved', ax = ax1, palette=\"Blues\")\ng.set_title('Count Plot for Train data imbalance check')\n\nplt.show()\n","8c55a1cf":"y_counts = x_train['project_is_approved'].value_counts()\nprint(\"Number of projects approved     : \", y_counts[1],\" i.e. \",round(y_counts[1]\/(y_counts[1]+y_counts[0])*100,1),\"%\")\nprint(\"Number of projects not approved : \", y_counts[0],\" i.e. \",round(y_counts[0]\/(y_counts[1]+y_counts[0])*100,1),\"%\")","a558062a":"y_cv_counts = x_cv['project_is_approved'].value_counts()\nprint(\"Number of projects that are approved     : \", y_cv_counts[1],\" i.e. \",round(y_cv_counts[1]\/(y_cv_counts[1]+y_cv_counts[0])*100,1),\"%\")\nprint(\"Number of projects that are not approved :  \",y_cv_counts[0],\"  i.e. \",round(y_cv_counts[0]\/(y_cv_counts[1]+y_cv_counts[0])*100,1),\"%\")\nprint(\"\\n\")","fd112cf4":"y_test_counts = x_test['project_is_approved'].value_counts()\nprint(\"Number of projects that are approved :     \", y_test_counts[1],\" i.e. \",round(y_test_counts[1]\/(y_test_counts[1]+y_test_counts[0])*100,1),\"%\")\nprint(\"Number of projects that are not approved : \",y_test_counts[0],\"  i.e. \",round(y_test_counts[0]\/(y_test_counts[1]+y_test_counts[0])*100,1),\"%\")\nprint(\"\\n\")","a6eea719":"# simple upsampling sklearn ## https:\/\/elitedatascience.com\/imbalanced-classes","4d6fa1de":"from sklearn.utils import resample\n\n# Separate majority and minority classes\nx_train_majority=x_train[x_train.project_is_approved==1]\nx_train_minority=x_train[x_train.project_is_approved==0]\n\n\n\n# Upsample minority class\nx_train_minority_upsampled = resample(x_train_minority, \n                                 replace=True,     # sample with replacement\n                                 n_samples=x_train['project_is_approved'].value_counts()[1], # to match majority class\n                                 random_state=123) # reproducible results\n \n# Combine majority class with upsampled minority class\nx_train_upsampled = pd.concat([x_train_majority, x_train_minority_upsampled])\n \n# Display new class counts\nx_train_upsampled['project_is_approved'].value_counts()","0ed308d9":"y_train=x_train_upsampled['project_is_approved'].copy()\nprint(y_train.shape)","93d2a27d":"# class distributions\n\nax1 = plt.axes()\n# color palette sns ## https:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html\n# g = sns.countplot(\"project_is_approved\",data=x_train, hue='project_is_approved', ax = ax1, palette=\"BrBG\")\ng = sns.countplot(\"project_is_approved\",data=x_train_upsampled, hue='project_is_approved', ax = ax1, palette=\"Blues\")\ng.set_title('Count Plot for train data imbalance check')\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.show()","b0be80f0":"project_data.columns","a7f8802e":"# we use count vectorizer to convert the values into one \nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(vocabulary=list(sorted_cat_dict.keys()), lowercase=False, binary=True)\n# categories_one_hot = vectorizer.fit_transform(project_data['clean_categories'].values)\n\nvectorizer.fit(x_train_upsampled['clean_categories'].values)\n\nx_train_categories_one_hot = vectorizer.transform(x_train_upsampled['clean_categories'].values)\nx_cv_categories_one_hot    = vectorizer.transform(x_cv['clean_categories'].values)\nx_test_categories_one_hot  = vectorizer.transform(x_test['clean_categories'].values)\n\nprint(vectorizer.get_feature_names())\nprint(\"-\"*50)\nprint(\"Shape of matrix of x_train_categories_one_hot : \",x_train_categories_one_hot.shape)\nprint(\"Shape of matrix of x_cv_categories_one_hot    : \",x_cv_categories_one_hot.shape)\nprint(\"Shape of matrix of x_test_categories_one_hot  : \",x_test_categories_one_hot.shape)\n# print(categories_one_hot)\n# print(categories_one_hot.toarray())","cb943b7e":"# we use count vectorizer to convert the values into one \nvectorizer = CountVectorizer(vocabulary=list(sorted_sub_cat_dict.keys()), lowercase=False, binary=True)\n\nvectorizer.fit(x_train_upsampled['clean_subcategories'].values)\n\nx_train_sub_categories_one_hot = vectorizer.transform(x_train_upsampled['clean_subcategories'].values)\nx_cv_sub_categories_one_hot    = vectorizer.transform(x_cv['clean_subcategories'].values)\nx_test_sub_categories_one_hot  = vectorizer.transform(x_test['clean_subcategories'].values)\n\nprint(vectorizer.get_feature_names())\nprint(\"-\"*50)\nprint(\"Shape of matrix of x_train_sub_categories_one_hot : \",x_train_sub_categories_one_hot.shape)\nprint(\"Shape of matrix of x_cv_sub_categories_one_hot    : \",x_cv_sub_categories_one_hot.shape)\nprint(\"Shape of matrix of x_test_sub_categories_one_hot  : \",x_test_sub_categories_one_hot.shape)","d6a27ab7":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(sorted_state_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(x_train_upsampled['school_state'])\n\nx_train_school_state_one_hot = vectorizer.transform(x_train_upsampled['school_state'].values)\nx_cv_school_state_one_hot    = vectorizer.transform(x_cv['school_state'].values)\nx_test_school_state_one_hot  = vectorizer.transform(x_test['school_state'].values)\n\nprint(vectorizer.get_feature_names())\nprint(\"-\"*50)\nprint(\"Shape of matrix of x_train_school_state_one_hot : \",x_train_school_state_one_hot.shape)\nprint(\"Shape of matrix of x_cv_school_state_one_hot    : \",x_cv_school_state_one_hot.shape)\nprint(\"Shape of matrix of x_test_school_state_one_hot  : \",x_test_school_state_one_hot.shape)","6fa2f1e2":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(sorted_teacher_prefix_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(x_train_upsampled['teacher_prefix'].values)\n\nx_train_prefix_one_hot = vectorizer.transform(x_train_upsampled['teacher_prefix'].values)\nx_cv_prefix_one_hot    = vectorizer.transform(x_cv['teacher_prefix'].values)\nx_test_prefix_one_hot  = vectorizer.transform(x_test['teacher_prefix'].values)\n\nprint(vectorizer.get_feature_names())\nprint(\"-\"*50)\nprint(\"Shape of matrix of x_train_prefix_one_hot : \",x_train_prefix_one_hot.shape)\nprint(\"Shape of matrix of x_cv_prefix_one_hot    : \",x_cv_prefix_one_hot.shape)\nprint(\"Shape of matrix of x_test_prefix_one_hot  : \",x_test_prefix_one_hot.shape)","366265ce":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(sorted_project_grade_category_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(x_train_upsampled['project_grade_category'].values)\n\nx_train_grade_category_one_hot = vectorizer.transform(x_train_upsampled['project_grade_category'].values)\nx_cv_grade_category_one_hot    = vectorizer.transform(x_cv['project_grade_category'].values)\nx_test_grade_category_one_hot  = vectorizer.transform(x_test['project_grade_category'].values)\n\nprint(vectorizer.get_feature_names())\nprint(\"-\"*50)\nprint(\"Shape of matrix of x_train_grade_category_one_hot : \",x_train_grade_category_one_hot.shape)\nprint(\"Shape of matrix of x_cv_grade_category_one_hot    : \",x_cv_grade_category_one_hot.shape)\nprint(\"Shape of matrix of x_test_grade_category_one_hot  : \",x_test_grade_category_one_hot.shape)","23f15462":"# We are considering only the words which appeared in at least 10 documents(rows or projects).\nvectorizer = CountVectorizer(min_df=10)\nvectorizer.fit(x_train_upsampled['preprocessed_essays'])\n\nx_train_essays_bow = vectorizer.transform(x_train_upsampled['preprocessed_essays'])\nx_cv_essays_bow    = vectorizer.transform(x_cv['preprocessed_essays'])\nx_test_essays_bow  = vectorizer.transform(x_test['preprocessed_essays'])\n\nprint(\"Shape of matrix of x_train_essays_bow : \",x_train_essays_bow.shape)\nprint(\"Shape of matrix of x_cv_essays_bow    : \",x_cv_essays_bow.shape)\nprint(\"Shape of matrix of x_test_essays_bow  : \",x_test_essays_bow.shape)","74c898db":"# We are considering only the words which appeared in at least 10 documents(rows or projects).\nvectorizer = CountVectorizer(min_df=10)\nvectorizer.fit(x_train_upsampled['preprocessed_title'])\n\nx_train_titles_bow = vectorizer.transform(x_train_upsampled['preprocessed_title'])\nx_cv_titles_bow    = vectorizer.transform(x_cv['preprocessed_title'])\nx_test_titles_bow  = vectorizer.transform(x_test['preprocessed_title'])\n\nprint(\"Shape of matrix of x_train_titles_bow : \",x_train_titles_bow.shape)\nprint(\"Shape of matrix of x_cv_titles_bow    : \",x_cv_titles_bow.shape)\nprint(\"Shape of matrix of x_test_titles_bow  : \",x_test_titles_bow.shape)","947843d9":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(min_df=10)\n# text_tfidf = vectorizer.fit_transform(preprocessed_essays)\n# print(\"Shape of matrix after one hot encodig \",text_tfidf.shape)\n\nvectorizer.fit(x_train_upsampled['preprocessed_essays'])\n\nx_train_essays_tfidf = vectorizer.transform(x_train_upsampled['preprocessed_essays'])\nx_cv_essays_tfidf    = vectorizer.transform(x_cv['preprocessed_essays'])\nx_test_essays_tfidf  = vectorizer.transform(x_test['preprocessed_essays'])\n\nprint(\"Shape of matrix of x_train_essays_tfidf : \",x_train_essays_tfidf.shape)\nprint(\"Shape of matrix of x_cv_essays_tfidf    : \",x_cv_essays_tfidf.shape)\nprint(\"Shape of matrix of x_test_essays_tfidf  : \",x_test_essays_tfidf.shape)\n","c975437b":"vectorizer = TfidfVectorizer(min_df=10)\n# title_tfidf = vectorizer.fit_transform(preprocessed_project_title)\n# print(\"Shape of matrix after one hot encodig \",title_tfidf.shape)\n\nvectorizer.fit(x_train_upsampled['preprocessed_title'])\n\nx_train_titles_tfidf = vectorizer.transform(x_train_upsampled['preprocessed_title'])\nx_cv_titles_tfidf    = vectorizer.transform(x_cv['preprocessed_title'])\nx_test_titles_tfidf  = vectorizer.transform(x_test['preprocessed_title'])\n\nprint(\"Shape of matrix of x_train_titles_tfidf : \",x_train_titles_tfidf.shape)\nprint(\"Shape of matrix of x_cv_titles_tfidf    : \",x_cv_titles_tfidf.shape)\nprint(\"Shape of matrix of x_test_titles_tfidf  : \",x_test_titles_tfidf.shape)","e9751e31":"'''\n# Reading glove vectors in python: https:\/\/stackoverflow.com\/a\/38230349\/4084039\ndef loadGloveModel(gloveFile):\n    print (\"Loading Glove Model\")\n    f = open(gloveFile,'r', encoding=\"utf8\")\n    model = {}\n    for line in tqdm(f):\n        splitLine = line.split()\n        word = splitLine[0]\n        embedding = np.array([float(val) for val in splitLine[1:]])\n        model[word] = embedding\n    print (\"Done.\",len(model),\" words loaded!\")\n    return model\nmodel = loadGloveModel('glove.42B.300d.txt')\n\n# ============================\nOutput:\n    \nLoading Glove Model\n1917495it [06:32, 4879.69it\/s]\nDone. 1917495  words loaded!\n\n# ============================\n\nwords = []\nfor i in preproced_texts:\n    words.extend(i.split(' '))\n\nfor i in preproced_titles:\n    words.extend(i.split(' '))\nprint(\"all the words in the coupus\", len(words))\nwords = set(words)\nprint(\"the unique words in the coupus\", len(words))\n\ninter_words = set(model.keys()).intersection(words)\nprint(\"The number of words that are present in both glove vectors and our coupus\", \\\n      len(inter_words),\"(\",np.round(len(inter_words)\/len(words)*100,3),\"%)\")\n\nwords_courpus = {}\nwords_glove = set(model.keys())\nfor i in words:\n    if i in words_glove:\n        words_courpus[i] = model[i]\nprint(\"word 2 vec length\", len(words_courpus))\n\n\n# stronging variables into pickle files python: http:\/\/www.jessicayung.com\/how-to-use-pickle-to-save-and-load-variables-in-python\/\n\nimport pickle\nwith open('glove_vectors', 'wb') as f:\n    pickle.dump(words_courpus, f)\n\n\n'''","1e0600d5":"# stronging variables into pickle files python: http:\/\/www.jessicayung.com\/how-to-use-pickle-to-save-and-load-variables-in-python\/\n# make sure you have the glove_vectors file\nwith open('..\/input\/glove_vectors', 'rb') as f:\n    model = pickle.load(f)\n    glove_words =  set(model.keys())","09177959":"# average Word2Vec\n# compute average word2vec for each review.\nx_train_essays_avg_w2v_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(x_train_upsampled['preprocessed_essays']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    x_train_essays_avg_w2v_vectors.append(vector)\n\nprint(\"Total number of vectors in x_train_essays_avg_w2v_vectors: \",len(x_train_essays_avg_w2v_vectors))\nprint(\"Each vector size : \",len(x_train_essays_avg_w2v_vectors[0]))","af2e5b15":"x_cv_essays_avg_w2v_vectors = [];\nfor sentence in tqdm(x_cv['preprocessed_essays']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    x_cv_essays_avg_w2v_vectors.append(vector)\n\nprint(\"Total number of vectors in x_cv_essays_avg_w2v_vectors: : \",len(x_cv_essays_avg_w2v_vectors))\nprint(\"Each vector size : \",len(x_cv_essays_avg_w2v_vectors[0]))","453545a3":"x_test_essays_avg_w2v_vectors = [];\nfor sentence in tqdm(x_test['preprocessed_essays']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    x_test_essays_avg_w2v_vectors.append(vector)\n\nprint(\"Total number of vectors in x_test_essays_avg_w2v_vectors : \",len(x_test_essays_avg_w2v_vectors))\nprint(\"Each vector size : \",len(x_test_essays_avg_w2v_vectors[0]))","8ed6fbe9":"# average Word2Vec on title\n# compute average word2vec for each review.\nx_train_titles_avg_w2v_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(x_train_upsampled['preprocessed_title']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    x_train_titles_avg_w2v_vectors.append(vector)\n\nprint(\"Total number of vectors in x_train_titles_avg_w2v_vectors : \",len(x_train_titles_avg_w2v_vectors))\nprint(\"Each vector size : \",len(x_train_titles_avg_w2v_vectors[0]))","7255aee7":"x_cv_titles_avg_w2v_vectors = [];\nfor sentence in tqdm(x_cv['preprocessed_title']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    x_cv_titles_avg_w2v_vectors.append(vector)\n\nprint(\"Total number of vectors in x_cv_titles_avg_w2v_vectors : \",len(x_cv_titles_avg_w2v_vectors))\nprint(\"Each vector size : \",len(x_cv_titles_avg_w2v_vectors[0]))","681490c5":"x_test_titles_avg_w2v_vectors = [];\nfor sentence in tqdm(x_test['preprocessed_title']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    x_test_titles_avg_w2v_vectors.append(vector)\n\nprint(\"Total number of vectors in x_test_titles_avg_w2v_vectors : \",len(x_test_titles_avg_w2v_vectors))\nprint(\"Each vector size : \",len(x_test_titles_avg_w2v_vectors[0]))","4d6f2bea":"tfidf_model = TfidfVectorizer()\n# tfidf_model.fit(preprocessed_essays)\ntfidf_model.fit(x_train_upsampled['preprocessed_essays'])\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\ntfidf_words = set(tfidf_model.get_feature_names())","4df378d7":"# average Word2Vec\n# compute average word2vec for each review.\nx_train_essays_tfidf_w2v_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(x_train_upsampled['preprocessed_essays']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_weight =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if (word in glove_words) and (word in tfidf_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_weight += tf_idf\n    if tf_idf_weight != 0:\n        vector \/= tf_idf_weight\n    x_train_essays_tfidf_w2v_vectors.append(vector)\n\nprint(\"Total number of vectors in x_train_essays_tfidf_w2v_vectors : \",len(x_train_essays_tfidf_w2v_vectors))\nprint(\"Each vector size : \",len(x_train_essays_tfidf_w2v_vectors[0]))","bc9ab107":"x_cv_essays_tfidf_w2v_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(x_cv['preprocessed_essays']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_weight =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if (word in glove_words) and (word in tfidf_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_weight += tf_idf\n    if tf_idf_weight != 0:\n        vector \/= tf_idf_weight\n    x_cv_essays_tfidf_w2v_vectors.append(vector)\n    \n\nprint(\"Total number of vectors in x_cv_essays_tfidf_w2v_vectors : \",len(x_cv_essays_tfidf_w2v_vectors))\nprint(\"Each vector size : \",len(x_cv_essays_tfidf_w2v_vectors[0]))\n","5bdd79a1":"x_test_essays_tfidf_w2v_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(x_test['preprocessed_essays']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_weight =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if (word in glove_words) and (word in tfidf_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_weight += tf_idf\n    if tf_idf_weight != 0:\n        vector \/= tf_idf_weight\n    x_test_essays_tfidf_w2v_vectors.append(vector)\n\nprint(\"Total number of vectors in x_test_essays_tfidf_w2v_vectors : \",len(x_test_essays_tfidf_w2v_vectors))\nprint(\"Each vector size : \",len(x_test_essays_tfidf_w2v_vectors[0]))","dda625e2":"tfidf_title_model = TfidfVectorizer()\ntfidf_title_model.fit(x_train_upsampled['preprocessed_title'])\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(tfidf_title_model.get_feature_names(), list(tfidf_title_model.idf_)))\ntfidf_title_words = set(tfidf_title_model.get_feature_names())","7147af1f":"# average Word2Vec\n# compute average word2vec for each title.\nx_train_tfidf_w2v_title_vectors = []; # the avg-w2v for each title is stored in this list\nfor sentence in tqdm(x_train_upsampled['preprocessed_title']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_title_weight =0; # num of words with a valid vector in the title\n    for word in sentence.split(): # for each word in a title\n        if (word in glove_words) and (word in tfidf_title_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_title_weight += tf_idf\n    if tf_idf_title_weight != 0:\n        vector \/= tf_idf_title_weight\n    x_train_tfidf_w2v_title_vectors.append(vector)\n\nprint(\"Total number of vectors in x_train_tfidf_w2v_title_vectors : \",len(x_train_tfidf_w2v_title_vectors))\nprint(\"Each vector size : \",len(x_train_tfidf_w2v_title_vectors[0]))","45c55ec6":"# average Word2Vec\n# compute average word2vec for each title.\nx_cv_tfidf_w2v_title_vectors = []; # the avg-w2v for each title is stored in this list\nfor sentence in tqdm(x_cv['preprocessed_title']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_title_weight =0; # num of words with a valid vector in the title\n    for word in sentence.split(): # for each word in a title\n        if (word in glove_words) and (word in tfidf_title_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_title_weight += tf_idf\n    if tf_idf_title_weight != 0:\n        vector \/= tf_idf_title_weight\n    x_cv_tfidf_w2v_title_vectors.append(vector)\n\nprint(\"Total number of vectors in x_cv_tfidf_w2v_title_vectors : \",len(x_cv_tfidf_w2v_title_vectors))\nprint(\"Each vector size : \",len(x_cv_tfidf_w2v_title_vectors[0]))\n","c4a21ee2":"# average Word2Vec\n# compute average word2vec for each title.\nx_test_tfidf_w2v_title_vectors = []; # the avg-w2v for each title is stored in this list\nfor sentence in tqdm(x_test['preprocessed_title']): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_title_weight =0; # num of words with a valid vector in the title\n    for word in sentence.split(): # for each word in a title\n        if (word in glove_words) and (word in tfidf_title_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_title_weight += tf_idf\n    if tf_idf_title_weight != 0:\n        vector \/= tf_idf_title_weight\n    x_test_tfidf_w2v_title_vectors.append(vector)\n\nprint(\"Total number of vectors in x_test_tfidf_w2v_title_vectors : \",len(x_test_tfidf_w2v_title_vectors))\nprint(\"Each vector size : \",len(x_test_tfidf_w2v_title_vectors[0]))","72838d04":"# price_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\n# project_data = pd.merge(project_data, price_data, on='id', how='left')","e34b38ac":"# check this one: https:\/\/www.youtube.com\/watch?v=0HOqOcln3Z4&t=530s\n# standardization sklearn: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html\nfrom sklearn.preprocessing import StandardScaler\n\nprice_scalar = StandardScaler()\n\nprice_scalar.fit(x_train_upsampled['price'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {price_scalar.mean_[0]}, Standard deviation : {np.sqrt(price_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nx_train_price_standardized = price_scalar.transform(x_train_upsampled['price'].values.reshape(-1, 1))\nx_test_price_standardized  = price_scalar.transform(x_test['price'].values.reshape(-1, 1))\nx_cv_price_standardized    = price_scalar.transform(x_cv['price'].values.reshape(-1, 1))\n\nprint(\"Shape of matrix after standardization, x_train_price_standardized : \",x_train_price_standardized.shape)\nprint(\"Shape of matrix after standardization, x_cv_price_standardized    : \",x_cv_price_standardized.shape)\nprint(\"Shape of matrix after standardization, x_test_price_standardized  : \",x_test_price_standardized.shape)","4a6c0644":"x_train_price_standardized","0ede6ad5":"# teacher_number_of_previously_posted_projects\npreviusly_projects_scalar = StandardScaler()\npreviusly_projects_scalar.fit(x_train_upsampled['teacher_number_of_previously_posted_projects'].astype(float).values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {previusly_projects_scalar.mean_[0]}, Standard deviation : {np.sqrt(previusly_projects_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nx_train_previously_projects_standardized = previusly_projects_scalar.transform(x_train_upsampled['teacher_number_of_previously_posted_projects'].astype(float).values.reshape(-1, 1))\nx_cv_previously_projects_standardized = previusly_projects_scalar.transform(x_cv['teacher_number_of_previously_posted_projects'].astype(float).values.reshape(-1, 1))\nx_test_previously_projects_standardized = previusly_projects_scalar.transform(x_test['teacher_number_of_previously_posted_projects'].astype(float).values.reshape(-1, 1))\n\nprint(\"Shape of matrix after standardization, x_train_previously_projects_standardized :  \",x_train_previously_projects_standardized.shape)\nprint(\"Shape of matrix after standardization, x_cv_previously_projects_standardized    :  \",x_cv_previously_projects_standardized.shape)\nprint(\"Shape of matrix after standardization, x_test_previously_projects_standardized  :  \",x_test_previously_projects_standardized.shape)","6d33da0a":"x_train_previously_projects_standardized","60371725":"# quantity\nquantity_scalar = StandardScaler()\nquantity_scalar.fit(x_train_upsampled['quantity'].astype(float).values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {quantity_scalar.mean_[0]}, Standard deviation : {np.sqrt(quantity_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nx_train_quantity_standardized = previusly_projects_scalar.transform(project_data['quantity'].astype(float).values.reshape(-1, 1))\nx_cv_quantity_standardized = previusly_projects_scalar.transform(project_data['quantity'].astype(float).values.reshape(-1, 1))\nx_test_quantity_standardized = previusly_projects_scalar.transform(project_data['quantity'].astype(float).values.reshape(-1, 1))\n\nprint(\"Shape of matrix after standardization, x_train_quantity_standardized :  \",x_train_quantity_standardized.shape)\nprint(\"Shape of matrix after standardization, x_cv_quantity_standardized    :  \",x_cv_quantity_standardized.shape)\nprint(\"Shape of matrix after standardization, x_test_quantity_standardized  :  \",x_test_quantity_standardized.shape)","f8a89499":"x_train_quantity_standardized","a7ade0d8":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n\n\nx_train_onehot = hstack((x_train_categories_one_hot, \\\n                         x_train_sub_categories_one_hot, \\\n                         x_train_school_state_one_hot, \\\n                         x_train_prefix_one_hot, \\\n                         x_train_grade_category_one_hot, \\\n                         x_train_price_standardized, \\\n                         x_train_previously_projects_standardized))\n\n\nx_cv_onehot    = hstack((x_cv_categories_one_hot, \\\n                         x_cv_sub_categories_one_hot, \\\n                         x_cv_school_state_one_hot, \\\n                         x_cv_prefix_one_hot, \\\n                         x_cv_grade_category_one_hot, \\\n                         x_cv_price_standardized, \\\n                         x_cv_previously_projects_standardized))\n\n\nx_test_onehot  = hstack((x_test_categories_one_hot, \\\n                         x_test_sub_categories_one_hot, \\\n                         x_test_school_state_one_hot, \\\n                         x_test_prefix_one_hot, \\\n                         x_test_grade_category_one_hot, \\\n                         x_test_price_standardized, \\\n                         x_test_previously_projects_standardized))\n\n# print(type(x_train_onehot))\nprint(\"Shape of x_train_onehot : \",x_train_onehot.shape)\nprint(\"Shape of x_cv_onehot    : \",x_cv_onehot.shape)\nprint(\"Shape of x_test_onehot  : \",x_test_onehot.shape)","fb255c02":"x_train_onehot_bow = hstack((x_train_onehot,x_train_titles_bow,x_train_essays_bow)).tocsr()\nx_cv_onehot_bow    = hstack((x_cv_onehot, x_cv_titles_bow, x_cv_essays_bow)).tocsr()\nx_test_onehot_bow  = hstack((x_test_onehot, x_test_titles_bow, x_test_essays_bow)).tocsr()\n\n# print(type(x_train_onehot_bow))\nprint(\"Shape of x_train_cv_test   : \",x_train_onehot_bow.shape)\nprint(\"Shape of x_cv_onehot_bow   : \",x_cv_onehot_bow.shape)\nprint(\"Shape of x_test_onehot_bow : \",x_test_onehot_bow.shape)","09cc9c21":"x_train_onehot_tfidf = hstack((x_train_onehot,x_train_titles_tfidf, x_train_essays_tfidf)).tocsr()\nx_cv_onehot_tfidf    = hstack((x_cv_onehot,x_cv_titles_tfidf, x_cv_essays_tfidf)).tocsr()\nx_test_onehot_tfidf  = hstack((x_test_onehot,x_test_titles_tfidf, x_test_essays_tfidf)).tocsr()\n\nprint(\"Shape of x_train_onehot_tfidf : \",x_train_onehot_tfidf.shape)\nprint(\"Shape of x_cv_onehot_tfidf    : \",x_cv_onehot_tfidf.shape)\nprint(\"Shape of x_test_onehot_tfidf  : \",x_test_onehot_tfidf.shape)","c391ce9e":"x_train_onehot_avg_w2v = hstack((x_train_onehot, x_train_titles_avg_w2v_vectors, x_train_essays_avg_w2v_vectors)).tocsr()\nx_cv_onehot_avg_w2v    = hstack((x_cv_onehot, x_cv_titles_avg_w2v_vectors, x_cv_essays_avg_w2v_vectors)).tocsr()\nx_test_onehot_avg_w2v  = hstack((x_test_onehot, x_test_titles_avg_w2v_vectors, x_test_essays_avg_w2v_vectors)).tocsr()\n\nprint(\"Shape x_train_onehot_avg_w2v : \",x_train_onehot_avg_w2v.shape)\nprint(\"Shape x_cv_onehot_avg_w2v    : \",x_cv_onehot_avg_w2v.shape)\nprint(\"Shape x_test_onehot_avg_w2v  : \",x_test_onehot_avg_w2v.shape)","59e3135a":"x_train_onehot_tfidf_w2v = hstack((x_train_onehot, x_train_tfidf_w2v_title_vectors, x_train_essays_tfidf_w2v_vectors)).tocsr()\nx_cv_onehot_tfidf_w2v    = hstack((x_cv_onehot, x_cv_tfidf_w2v_title_vectors, x_cv_essays_tfidf_w2v_vectors)).tocsr()\nx_test_onehot_tfidf_w2v  = hstack((x_test_onehot, x_test_tfidf_w2v_title_vectors, x_test_essays_tfidf_w2v_vectors)).tocsr()\n\nprint(\"Shape of x_train_onehot_tfidf_w2v  : \",x_train_onehot_tfidf_w2v.shape)\nprint(\"Shape of x_cv_onehot_tfidf_w2v     : \",x_cv_onehot_tfidf_w2v.shape)\nprint(\"Shape of x_test_onehot_tfidf_w2v   : \",x_test_onehot_tfidf_w2v.shape)","3baf1c41":"def batch_predict(clf, data):\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n\n    y_data_pred = []\n    tr_loop = data.shape[0] - data.shape[0]%1000\n    # consider you X_tr shape is 49041, then your tr_loop will be 49041 - 49041%1000 = 49000\n    # in this for loop we will iterate unti the last 1000 multiplier\n    for i in range(0, tr_loop, 1000):\n        y_data_pred.extend(clf.predict_proba(data[i:i+1000])[:,1])\n    # we will be predicting for the last data points\n    if data.shape[0]%1000 !=0:\n        y_data_pred.extend(clf.predict_proba(data[tr_loop:])[:,1])\n    \n    return y_data_pred","314a0e43":"import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n\ntrain_auc = []\ncv_auc = []\n\nK = [3, 5, 7, 9, 19, 27, 31, 35, 39, 51, 67, 73, 83, 97, 111, 123, 147, 159]\n\n        \nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i, n_jobs=-1)\n    neigh.fit(x_train_onehot_bow, y_train)\n\n    y_train_pred = batch_predict(neigh, x_train_onehot_bow)    \n    y_cv_pred = batch_predict(neigh, x_cv_onehot_bow)\n\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs        \n    train_auc.append(roc_auc_score(y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","dddf0eba":"# from the error plot we choose K such that, we will have maximum AUC on cv data and gap between the train and cv is less\n# Note: based on the method you use you might get different hyperparameter values as best one\n# so, you choose according to the method you choose, you use gridsearch if you are having more computing power and note it will take more time\n# if you increase the cv values in the GridSearchCV you will get more rebust results.\n\n#here we are choosing the best_k based on forloop results\nbest_k_bow = 159","b0490ed2":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\nfrom sklearn.metrics import roc_curve, auc\n\nneigh = KNeighborsClassifier(n_neighbors=best_k_bow, n_jobs=-1)\nneigh.fit(x_train_onehot_bow, y_train)\n\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, x_train_onehot_bow)    \ny_test_pred = batch_predict(neigh, x_test_onehot_bow)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n\ntrain_auc_bow = auc(train_fpr, train_tpr)\ntest_auc_bow  = auc(test_fpr, test_tpr)\n\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"False Positive Rate (FPR)\")\nplt.ylabel(\"True Positive Rate (TPR)\")\nplt.title(\"ROC PLOT\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","5c6abef5":"# we are writing our own function for predict, with defined thresould\n# we will pick a threshold that will give the least fpr\ndef find_best_threshold(threshould, fpr, tpr):\n    t = threshould[np.argmax(tpr*(1-fpr))]\n    # (tpr*(1-fpr)) will be maximum if your fpr is very low and tpr is very high\n    print(\"the maximum value of tpr*(1-fpr)\", max(tpr*(1-fpr)), \"for threshold\", np.round(t,3))\n    return t\n\ndef predict_with_best_t(proba, threshould):\n    predictions = []\n    for i in proba:\n        if i>=threshould:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions","68abf015":"from sklearn.metrics import confusion_matrix\nbest_t = find_best_threshold(tr_thresholds, train_fpr, train_tpr)\nprint(\"-\"*50)\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t)))\nprint(\"-\"*50)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t)))","924a42fe":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Blues\", ax = ax )\n\nax.set_title('Confusion Matrix - Train (BOW)')\nplt.show()","d6b12a51":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Reds\", ax = ax )\n\nax.set_title('Confusion Matrix - Test (BOW)')\nplt.show()","dba5e4b0":"import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n\ntrain_auc = []\ncv_auc = []\n\nK = [3, 5, 7, 9, 19, 27, 31, 35, 39, 51, 67, 73, 83, 97, 111, 123, 147, 159]\n       \n        \nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i, n_jobs=-1)\n    neigh.fit(x_train_onehot_tfidf, y_train)\n\n    y_train_pred = batch_predict(neigh, x_train_onehot_tfidf)    \n    y_cv_pred = batch_predict(neigh, x_cv_onehot_tfidf)\n\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs        \n    train_auc.append(roc_auc_score(y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","d0dc2b40":"# from the error plot we choose K such that, we will have maximum AUC on cv data and gap between the train and cv is less\n# Note: based on the method you use you might get different hyperparameter values as best one\n# so, you choose according to the method you choose, you use gridsearch if you are having more computing power and note it will take more time\n# if you increase the cv values in the GridSearchCV you will get more rebust results.\n\n#here we are choosing the best_k based on forloop results\nbest_k_tfidf = 147","2947b511":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\nfrom sklearn.metrics import roc_curve, auc\n\nneigh = KNeighborsClassifier(n_neighbors=best_k_tfidf, n_jobs=-1)\nneigh.fit(x_train_onehot_tfidf, y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, x_train_onehot_tfidf)    \ny_test_pred = batch_predict(neigh, x_test_onehot_tfidf)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n\ntrain_auc_tfidf = auc(train_fpr, train_tpr)\ntest_auc_tfidf  = auc(test_fpr, test_tpr)\n\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"False Positive Rate (FPR)\")\nplt.ylabel(\"True Positive Rate (TPR)\")\nplt.title(\"ROC PLOT\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","e5f0c1f0":"# we are writing our own function for predict, with defined thresould\n# we will pick a threshold that will give the least fpr\ndef find_best_threshold(threshould, fpr, tpr):\n    t = threshould[np.argmax(tpr*(1-fpr))]\n    # (tpr*(1-fpr)) will be maximum if your fpr is very low and tpr is very high\n    print(\"the maximum value of tpr*(1-fpr)\", max(tpr*(1-fpr)), \"for threshold\", np.round(t,3))\n    return t\n\ndef predict_with_best_t(proba, threshould):\n    predictions = []\n    for i in proba:\n        if i>=threshould:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions","d97f6e93":"from sklearn.metrics import confusion_matrix\nbest_t = find_best_threshold(tr_thresholds, train_fpr, train_tpr)\nprint(\"-\"*50)\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t)))\nprint(\"-\"*50)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t)))","c6f343d8":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Blues\", ax = ax )\n\nax.set_title('Confusion Matrix - Train (TF-IDF)')\nplt.show()","86e21223":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Reds\", ax = ax )\n\nax.set_title('Confusion Matrix - Test (TF-IDF)')\nplt.show()","f2947ea6":"import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n\ntrain_auc = []\ncv_auc = []\n\nK = [3, 5, 7, 9, 19, 27, 31, 35, 39, 51, 67, 73, 83, 97, 111, 123, 147, 159]\n       \n        \nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i, n_jobs=-1)\n    neigh.fit(x_train_onehot_avg_w2v, y_train)\n\n    y_train_pred = batch_predict(neigh, x_train_onehot_avg_w2v)    \n    y_cv_pred = batch_predict(neigh, x_cv_onehot_avg_w2v)\n\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs        \n    train_auc.append(roc_auc_score(y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","8a6a5b19":"# from the error plot we choose K such that, we will have maximum AUC on cv data and gap between the train and cv is less\n# Note: based on the method you use you might get different hyperparameter values as best one\n# so, you choose according to the method you choose, you use gridsearch if you are having more computing power and note it will take more time\n# if you increase the cv values in the GridSearchCV you will get more rebust results.\n\n#here we are choosing the best_k based on forloop results\nbest_k_avg_w2v = 159","ceccc310":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\nfrom sklearn.metrics import roc_curve, auc\n\nneigh = KNeighborsClassifier(n_neighbors=best_k_avg_w2v, n_jobs=-1)\nneigh.fit(x_train_onehot_avg_w2v, y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, x_train_onehot_avg_w2v)    \ny_test_pred = batch_predict(neigh, x_test_onehot_avg_w2v)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n\ntrain_auc_avg_w2v = auc(train_fpr, train_tpr)\ntest_auc_avg_w2v  = auc(test_fpr, test_tpr)\n\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"False Positive Rate (FPR)\")\nplt.ylabel(\"True Positive Rate (TPR)\")\nplt.title(\"ROC PLOT\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","b35be0a8":"# we are writing our own function for predict, with defined thresould\n# we will pick a threshold that will give the least fpr\ndef find_best_threshold(threshould, fpr, tpr):\n    t = threshould[np.argmax(tpr*(1-fpr))]\n    # (tpr*(1-fpr)) will be maximum if your fpr is very low and tpr is very high\n    print(\"the maximum value of tpr*(1-fpr)\", max(tpr*(1-fpr)), \"for threshold\", np.round(t,3))\n    return t\n\ndef predict_with_best_t(proba, threshould):\n    predictions = []\n    for i in proba:\n        if i>=threshould:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions","f3b92bfb":"from sklearn.metrics import confusion_matrix\nbest_t = find_best_threshold(tr_thresholds, train_fpr, train_tpr)\nprint(\"-\"*50)\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t)))\nprint(\"-\"*50)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t)))","b4850754":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Blues\", ax = ax )\n\nax.set_title('Confusion Matrix - Train (AVG-W2V)')\nplt.show()","94da3a88":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Reds\", ax = ax )\n\nax.set_title('Confusion Matrix - Test (AVG-W2V)')\nplt.show()","1b66fa9b":"import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n\ntrain_auc = []\ncv_auc = []\n\nK = [3, 5, 7, 9, 19, 27, 31, 35, 39, 51, 67, 73, 83, 97, 111, 123, 147, 159]\n        \n        \nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i, n_jobs=-1)\n    neigh.fit(x_train_onehot_tfidf_w2v, y_train)\n\n    y_train_pred = batch_predict(neigh, x_train_onehot_tfidf_w2v)    \n    y_cv_pred = batch_predict(neigh, x_cv_onehot_tfidf_w2v)\n\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs        \n    train_auc.append(roc_auc_score(y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","4108595a":"# from the error plot we choose K such that, we will have maximum AUC on cv data and gap between the train and cv is less\n# Note: based on the method you use you might get different hyperparameter values as best one\n# so, you choose according to the method you choose, you use gridsearch if you are having more computing power and note it will take more time\n# if you increase the cv values in the GridSearchCV you will get more rebust results.\n\n#here we are choosing the best_k based on forloop results\nbest_k_tfidf_w2v = 147","b83013ce":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\nfrom sklearn.metrics import roc_curve, auc\n\nneigh = KNeighborsClassifier(n_neighbors=best_k_tfidf_w2v, n_jobs=-1)\nneigh.fit(x_train_onehot_tfidf_w2v, y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, x_train_onehot_tfidf_w2v)    \ny_test_pred = batch_predict(neigh, x_test_onehot_tfidf_w2v)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n\ntrain_auc_tfidf_w2v = auc(train_fpr, train_tpr)\ntest_auc_tfidf_w2v  = auc(test_fpr, test_tpr)\n\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"False Positive Rate (FPR)\")\nplt.ylabel(\"True Positive Rate (TPR)\")\nplt.title(\"ROC PLOT\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","5fc8af2d":"# we are writing our own function for predict, with defined thresould\n# we will pick a threshold that will give the least fpr\ndef find_best_threshold(threshould, fpr, tpr):\n    t = threshould[np.argmax(tpr*(1-fpr))]\n    # (tpr*(1-fpr)) will be maximum if your fpr is very low and tpr is very high\n    print(\"the maximum value of tpr*(1-fpr)\", max(tpr*(1-fpr)), \"for threshold\", np.round(t,3))\n    return t\n\ndef predict_with_best_t(proba, threshould):\n    predictions = []\n    for i in proba:\n        if i>=threshould:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions","bafd36c4":"from sklearn.metrics import confusion_matrix\nbest_t = find_best_threshold(tr_thresholds, train_fpr, train_tpr)\nprint(\"-\"*50)\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t)))\nprint(\"-\"*50)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t)))","601a2973":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Blues\", ax = ax )\n\nax.set_title('Confusion Matrix - Train (TF-IDF W2V)')\nplt.show()","6852c0ce":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Reds\", ax = ax )\n\nax.set_title('Confusion Matrix - Test (TF-IDF W2V)')\nplt.show()","dffa62e0":"# selectkbest example \n## https:\/\/stackoverflow.com\/questions\/46927545\/get-feature-names-of-selectkbest-function-python\/46929321#46929321\nfrom sklearn.feature_selection import SelectKBest, chi2, f_classif\n\nimport warnings\nwarnings.simplefilter(\"ignore\", UserWarning)","f7629a8e":"print(\"Shape of x_train_onehot_tfidf          : \", x_train_onehot_tfidf.shape)\nprint(\"Total Features in x_train_onehot_tfidf : \", x_train_onehot_tfidf.shape[1])","223d1e0c":"# Feature Selection\nselector = SelectKBest(f_classif, k=2000)\nselector.fit(x_train_onehot_tfidf, y_train)\n\nx_train_tfidf_2000 = selector.transform(x_train_onehot_tfidf)\nx_cv_tfidf_2000 = selector.transform(x_cv_onehot_tfidf)\nx_test_tfidf_2000 = selector.transform(x_test_onehot_tfidf)\n\nprint(x_train_tfidf_2000.shape)\nprint(x_cv_tfidf_2000.shape)\nprint(x_test_tfidf_2000.shape)","a304b9a2":"import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\"\"\"\ny_true : array, shape = [n_samples] or [n_samples, n_classes]\nTrue binary labels or binary label indicators.\n\ny_score : array, shape = [n_samples] or [n_samples, n_classes]\nTarget scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of\ndecisions (as returned by \u201cdecision_function\u201d on some classifiers). \nFor binary y_true, y_score is supposed to be the score of the class with greater label.\n\n\"\"\"\n\ntrain_auc = []\ncv_auc = []\n\n\nK = [3, 5, 7, 9, 19, 27, 31, 35, 39, 51, 67, 73, 83, 97, 111, 123, 147, 159]        \n        \n        \nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i, n_jobs=-1)\n    neigh.fit(x_train_tfidf_2000, y_train)\n\n    y_train_pred = batch_predict(neigh, x_train_tfidf_2000)    \n    y_cv_pred = batch_predict(neigh, x_cv_tfidf_2000)\n\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs        \n    train_auc.append(roc_auc_score(y_train,y_train_pred))\n    cv_auc.append(roc_auc_score(y_cv, y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\n\nplt.scatter(K, train_auc, label='Train AUC points')\nplt.scatter(K, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","80589347":"# from the error plot we choose K such that, we will have maximum AUC on cv data and gap between the train and cv is less\n# Note: based on the method you use you might get different hyperparameter values as best one\n# so, you choose according to the method you choose, you use gridsearch if you are having more computing power and note it will take more time\n# if you increase the cv values in the GridSearchCV you will get more rebust results.\n\n#here we are choosing the best_k based on forloop results\nbest_k_2000 = 159","9a8ef0a6":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\nfrom sklearn.metrics import roc_curve, auc\n\nneigh = KNeighborsClassifier(n_neighbors=best_k_2000, n_jobs=-1)\nneigh.fit(x_train_tfidf_2000, y_train)\n# roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n# not the predicted outputs\n\ny_train_pred = batch_predict(neigh, x_train_tfidf_2000)    \ny_test_pred = batch_predict(neigh, x_test_tfidf_2000)\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n\ntrain_auc_2000 = auc(train_fpr, train_tpr)\ntest_auc_2000 = auc(test_fpr, test_tpr)\n\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"False Positive Rate (FPR)\")\nplt.ylabel(\"True Positive Rate (TPR)\")\nplt.title(\"ROC PLOT\")\n\n# Put the legend out of the figure \n## https:\/\/stackoverflow.com\/questions\/30490740\/move-legend-outside-figure-in-seaborn-tsplot\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nplt.grid()\nplt.show()","6c7025c6":"# we are writing our own function for predict, with defined thresould\n# we will pick a threshold that will give the least fpr\ndef find_best_threshold(threshould, fpr, tpr):\n    t = threshould[np.argmax(tpr*(1-fpr))]\n    # (tpr*(1-fpr)) will be maximum if your fpr is very low and tpr is very high\n    print(\"the maximum value of tpr*(1-fpr)\", max(tpr*(1-fpr)), \"for threshold\", np.round(t,3))\n    return t\n\ndef predict_with_best_t(proba, threshould):\n    predictions = []\n    for i in proba:\n        if i>=threshould:\n            predictions.append(1)\n        else:\n            predictions.append(0)\n    return predictions","de825cec":"from sklearn.metrics import confusion_matrix\nbest_t = find_best_threshold(tr_thresholds, train_fpr, train_tpr)\nprint(\"-\"*50)\nprint(\"Train confusion matrix\")\nprint(confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t)))\nprint(\"-\"*50)\nprint(\"Test confusion matrix\")\nprint(confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t)))","a2c00d5c":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_train, predict_with_best_t(y_train_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Blues\", ax = ax )\n\nax.set_title('Confusion Matrix - Train (TF-IDF 2000)')\nplt.show()","9451c617":"# confusion matrix sns heatmap \n## https:\/\/www.kaggle.com\/agungor2\/various-confusion-matrix-plots\nax = plt.axes()\ndf_cm = confusion_matrix(y_test, predict_with_best_t(y_test_pred, best_t))\nsns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Reds\", ax = ax )\n\nax.set_title('Confusion Matrix - Test (TF-IDF 2000)')\nplt.show()","a3ae1db3":"from prettytable import PrettyTable    \nx = PrettyTable()\nx.field_names = [\"Vectorizer\", \"Model\", \"Hyperparameter(K)\", \"Train AUC\", \"Test AUC\"]\n\nx.add_row([\"BOW\", \"Brute\", best_k_bow, round(train_auc_bow,2),round(test_auc_bow,2)])\nx.add_row([\"TF-IDF\", \"Brute\", best_k_tfidf, round(train_auc_tfidf,2),round(test_auc_tfidf,2)])\nx.add_row([\"AVG W2V\", \"Brute\", best_k_avg_w2v, round(train_auc_avg_w2v,2),round(test_auc_avg_w2v,2)])\nx.add_row([\"TF-IDF W2V\", \"Brute\", best_k_tfidf_w2v, round(train_auc_tfidf_w2v,2),round(test_auc_tfidf_w2v,2)])\nx.add_row([\"TF-IDF 2000\", \"Brute\", best_k_2000, round(train_auc_2000,2),round(test_auc_2000,2)])\n\nprint(x)","ec9fc346":"#### imbalance check : cv data","a0d89603":"#### 1.4.1.3 One Hot Encode - `school_state`","9591e169":"### Confusion matrix","8def6e89":"### Confusion matrix","88a06330":"### 1.2.9 Preprocessing of `project_title`","5a506e98":"### 1.4.2 Vectorizing Text data","dcd49f46":"### 1.3.3 Check for Data Imbalance","156d963b":"### 1.7.2 `SET 2 : ` Hyper parameter tuning to find best K after feature selection","8eccfb9b":"### 1.6.1 Applying KNN (BruteForce) on `Set 1 - (BoW)`","62511d68":"### 1.2.6 preprocessing of `school_state`","f7d2a50c":"## 1.2 Data Cleaning & Preprocessing","ba5ac39e":"### Notes on the Essay Data\n\n<ul>\nPrior to May 17, 2016, the prompts for the essays were as follows:\n<li>__project_essay_1:__ \"Introduce us to your classroom\"<\/li>\n<li>__project_essay_2:__ \"Tell us more about your students\"<\/li>\n<li>__project_essay_3:__ \"Describe how your students will use the materials you're requesting\"<\/li>\n<li>__project_essay_3:__ \"Close by sharing why your project will make a difference\"<\/li>\n<\/ul>\n\n\n<ul>\nStarting on May 17, 2016, the number of essays was reduced from 4 to 2, and the prompts for the first 2 essays were changed to the following:<br>\n<li>__project_essay_1:__ \"Describe your students: What makes your students special? Specific details about their background, your neighborhood, and your school are all helpful.\"<\/li>\n<li>__project_essay_2:__ \"About your project: How will these materials make a difference in your students' learning and improve their school lives?\"<\/li>\n<br>For all projects with project_submitted_datetime of 2016-05-17 and later, the values of project_essay_3 and project_essay_4 will be NaN.\n<\/ul>\n","b70e0f21":"## 1.5 Merging all the above features","bda84cc9":"### 1.5.4 Set 3: categorical, numerical features + `project_title(AVG W2V)`+ `preprocessed_essay (AVG W2V)`","fbadff42":"#### 1.4.2.4 TFIDF vectorizer - `project_title`","267c0805":"#### x_cv","b94ea56f":"## 1.3 Sampling","0475e9b8":"#### imbalance check : train data ","1feabb47":"### 1.5.3 Set 2: categorical, numerical features + `project_title(TFIDF)`+ `preprocessed_essay (TFIDF)`","ac3f7d71":"#### 1.4.2.5 Using Pretrained Models: `Avg W2V - text`","5a9180e1":"## 1.8 Conclusion","ccd68af8":"#### x_test","820d8340":"#### x_test","3e6d7ca6":"#### 1.4.1.1 One Hot Encode - `clean_categories`","ca6e7999":"### Confusion matrix","2237d19c":"### 1.5.2 Set 1: categorical, numerical features + `project_title(BOW)` + `preprocessed_essay (BOW)`","127c1a1d":"#### 1.4.2.7 Using Pretrained Models: `TFIDF weighted W2V - text`","0662d75f":"#### 1.4.2.8 Using Pretrained Models: `TFIDF weighted W2V - project_title`","d0862c5b":"### 1.2.4 preprocessing of `project_subject_subcategories`","00573e74":"### 1.2.7 preprocessing of `project_grade_category`","cb2f204a":" ### Testing the performance of the model on test data, plotting ROC Curves","53ffb1f8":"### 1.3.4 Upsampling","8a56b44b":"### Add `preprosessed_essay` to dataframe","a7a43dfc":"#### 1.4.2.6 Using Pretrained Models: `Avg W2V - project_title`","8c29d9f8":"### 1.2.3 preprocessing of `project_subject_categories`","2ba33fb4":"we are going to consider\n\n       - school_state : categorical data\n       - clean_categories : categorical data\n       - clean_subcategories : categorical data\n       - project_grade_category : categorical data\n       - teacher_prefix : categorical data\n       \n       - project_title : text data\n       - text : text data\n       - project_resource_summary: text data (optinal)\n       \n       - quantity : numerical (optinal)\n       - teacher_number_of_previously_posted_projects : numerical\n       - price : numerical","964f56db":"#### 1.4.2.2 Bag of words - `project_title`","d9c2b149":"## 1.7 Feature selection with `SelectKBest` ","8be8dd96":"## 1.1 Reading Data","78a7dffc":"### 1.4.3 Vectorizing Numerical features","240f1d2e":"#### x_train","cef921f8":"## About the DonorsChoose Data Set\n\nThe `train.csv` data set provided by DonorsChoose contains the following features:\n\nFeature | Description \n----------|---------------\n**`project_id`** | A unique identifier for the proposed project. **Example:** `p036502`   \n**`project_title`**    | Title of the project. **Examples:**<br><ul><li><code>Art Will Make You Happy!<\/code><\/li><li><code>First Grade Fun<\/code><\/li><\/ul> \n**`project_grade_category`** | Grade level of students for which the project is targeted. One of the following enumerated values: <br\/><ul><li><code>Grades PreK-2<\/code><\/li><li><code>Grades 3-5<\/code><\/li><li><code>Grades 6-8<\/code><\/li><li><code>Grades 9-12<\/code><\/li><\/ul>  \n **`project_subject_categories`** | One or more (comma-separated) subject categories for the project from the following enumerated list of values:  <br\/><ul><li><code>Applied Learning<\/code><\/li><li><code>Care &amp; Hunger<\/code><\/li><li><code>Health &amp; Sports<\/code><\/li><li><code>History &amp; Civics<\/code><\/li><li><code>Literacy &amp; Language<\/code><\/li><li><code>Math &amp; Science<\/code><\/li><li><code>Music &amp; The Arts<\/code><\/li><li><code>Special Needs<\/code><\/li><li><code>Warmth<\/code><\/li><\/ul><br\/> **Examples:** <br\/><ul><li><code>Music &amp; The Arts<\/code><\/li><li><code>Literacy &amp; Language, Math &amp; Science<\/code><\/li>  \n  **`school_state`** | State where school is located ([Two-letter U.S. postal code](https:\/\/en.wikipedia.org\/wiki\/List_of_U.S._state_abbreviations#Postal_codes)). **Example:** `WY`\n**`project_subject_subcategories`** | One or more (comma-separated) subject subcategories for the project. **Examples:** <br\/><ul><li><code>Literacy<\/code><\/li><li><code>Literature &amp; Writing, Social Sciences<\/code><\/li><\/ul> \n**`project_resource_summary`** | An explanation of the resources needed for the project. **Example:** <br\/><ul><li><code>My students need hands on literacy materials to manage sensory needs!<\/code<\/li><\/ul> \n**`project_essay_1`**    | First application essay<sup>*<\/sup>  \n**`project_essay_2`**    | Second application essay<sup>*<\/sup> \n**`project_essay_3`**    | Third application essay<sup>*<\/sup> \n**`project_essay_4`**    | Fourth application essay<sup>*<\/sup> \n**`project_submitted_datetime`** | Datetime when project application was submitted. **Example:** `2016-04-28 12:43:56.245`   \n**`teacher_id`** | A unique identifier for the teacher of the proposed project. **Example:** `bdf8baa8fedef6bfeec7ae4ff1c15c56`  \n**`teacher_prefix`** | Teacher's title. One of the following enumerated values: <br\/><ul><li><code>nan<\/code><\/li><li><code>Dr.<\/code><\/li><li><code>Mr.<\/code><\/li><li><code>Mrs.<\/code><\/li><li><code>Ms.<\/code><\/li><li><code>Teacher.<\/code><\/li><\/ul>  \n**`teacher_number_of_previously_posted_projects`** | Number of project applications previously submitted by the same teacher. **Example:** `2` \n\n<sup>*<\/sup> See the section <b>Notes on the Essay Data<\/b> for more details about these features.\n\nAdditionally, the `resources.csv` data set provides more data about the resources required for each project. Each line in this file represents a resource required by a project:\n\nFeature | Description \n----------|---------------\n**`id`** | A `project_id` value from the `train.csv` file.  **Example:** `p036502`   \n**`description`** | Desciption of the resource. **Example:** `Tenor Saxophone Reeds, Box of 25`   \n**`quantity`** | Quantity of the resource required. **Example:** `3`   \n**`price`** | Price of the resource required. **Example:** `9.95`   \n\n**Note:** Many projects require multiple resources. The `id` value corresponds to a `project_id` in train.csv, so you use it as a key to retrieve all resources needed for a project:\n\nThe data set contains the following label (the value you will attempt to predict):\n\nLabel | Description\n----------|---------------\n`project_is_approved` | A binary flag indicating whether DonorsChoose approved the project. A value of `0` indicates the project was not approved, and a value of `1` indicates the project was approved.","9f1f15a1":"#### 1.4.3.1 Vectorizing `Price`","0fbfab4f":" ### Testing the performance of the model on test data, plotting ROC Curves","4bf532d1":" ### Testing the performance of the model on test data, plotting ROC Curves","7a30b717":"#### x_cv","79c7246d":"#### 1.4.1.4 One Hot Encode - `teacher_prefix` ","690c48ba":" ### Testing the performance of the model on test data, plotting ROC Curves","8ee9c613":"## Due to computational limitation we are using 3,000 data points only.","cc6fc6b9":"### 1.2.2 Handling datetime format & Sort Dataframe on Date basis","9571ea12":"#### 1.4.2.3 TFIDF vectorizer - `text`","e32e55bf":"#### x_test","96b0294b":"### 1.6.3 Applying KNN (BruteForce) on `Set 3 - AVG-W2V`","0eae66d1":" ### Testing the performance of the model on test data, plotting ROC Curves","87360e3e":"### 1.2.5 preprocessing of `teacher_prefix`","fcbab41e":"### 1.4.1 Vectorizing Categorical data","aef867ec":"### 1.2.8 Text preprocessing (essay)","fc3f2a9d":"## 1.4 Preparing data for models","2984dd6c":"### 1.5.5 Set 4: categorical, numerical features + `project_title(TFIDF W2V)`+ `preprocessed_essay (TFIDF W2V)`","1929520d":"<p>\nDonorsChoose.org receives hundreds of thousands of project proposals each year for classroom projects in need of funding. Right now, a large number of volunteers is needed to manually screen each submission before it's approved to be posted on the DonorsChoose.org website.\n<\/p>\n<p>\n    Next year, DonorsChoose.org expects to receive close to 500,000 project proposals. As a result, there are three main problems they need to solve:\n<ul>\n<li>\n    How to scale current manual processes and resources to screen 500,000 projects so that they can be posted as quickly and as efficiently as possible<\/li>\n    <li>How to increase the consistency of project vetting across different volunteers to improve the experience for teachers<\/li>\n    <li>How to focus volunteer time on the applications that need the most assistance<\/li>\n    <\/ul>\n<\/p>    \n<p>\nThe goal of the competition is to predict whether or not a DonorsChoose.org project proposal submitted by a teacher will be approved, using the text of project descriptions as well as additional metadata about the project, teacher, and school. DonorsChoose.org can then use this information to identify projects most likely to need further review before approval.\n<\/p>","fd1e5757":"#### 1.4.3.3 Vectorizing `Quantity`","25a20b66":"### 1.3.1 Taking Sample from `project_data`","6a9b4b70":"### Confusion matrix","9dbc6d35":"### 1.6.2 Applying KNN (BruteForce) on `Set 2 - TF-IDF`","e09e026c":"#### x_train","e365dc1c":"### 1.3.2 Splitting the dataset into Train, CV and Test datasets (60:20:20)","9c2ae06c":"#### 1.4.1.2 One Hot Encode - `clean_subcategories`","3474f3e0":"#### 1.3.2.2 Train and CV Split","c97426f0":"### 1.2.1 Check `NULL` values","68c5e210":"#### 1.4.2.1 Bag of words - `text`","1de4a01a":"## 1.6 Apply KNN","1046576b":"### 1.2.11 Adding `price` and `quantity` attributes to `project_data` from `resource.csv`","a39eb044":"#### x_train","77a44dda":"#### Add  preprocessed `project_resource_summary` to dataframe `project_data`","ed722230":"# DonorsChoose","66d4ee05":"#### x_cv","f66f0db3":"#### 1.3.2.1 Train and Test Split","db89f156":"#### 1.4.1.5 One Hot Encode - `project_grade_category`","8f1a3094":"#### imbalance check : test data ","80388fa4":"### 1.6.4 Applying KNN (BruteForce) on `Set 4 - TF-IDF W2V`","836cf5be":"### Confusion matrix","11d5b8ea":"#### Add `preprocessed_title` to dataframe `project_data`","4ca3f321":"#### 1.4.3.2 Vectorizing `teacher_number_of_previously_posted_projects`","c7b7a111":"### 1.5.1 Merge all categorial and numerical feature","a7c1041a":"### 1.2.10 Preprocessing of `project_resource_summary`"}}