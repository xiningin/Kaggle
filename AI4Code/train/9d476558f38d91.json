{"cell_type":{"79aa8d89":"code","5db970c2":"code","7a37df6c":"code","cd7286a2":"code","081e17f6":"code","2f433d9a":"code","c85ad34c":"code","7d005635":"code","e1e7e83a":"code","302b5f6f":"code","f15243a5":"code","b4903ced":"code","97f5781a":"code","ff735a91":"code","4bb241eb":"code","09db961e":"code","2d254f3c":"code","c55e0d7f":"code","384c7b65":"code","a26c31ea":"code","afae065c":"code","a9c644f7":"code","c787e3c6":"code","78d70475":"markdown","6dbd6cbe":"markdown","a14778fb":"markdown","8176f028":"markdown","3e683a71":"markdown"},"source":{"79aa8d89":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5db970c2":"df=pd.read_csv('..\/input\/body-performance-data\/bodyPerformance.csv')","7a37df6c":"df.head()","cd7286a2":"df.info()","081e17f6":"df.describe()","2f433d9a":"df.isna().sum()","c85ad34c":"df.head()","7d005635":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('darkgrid')\n\n%matplotlib inline","e1e7e83a":"sns.catplot(data=df,x='gender',col='class',y='age',kind='box',hue='gender')","302b5f6f":"from sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder,MinMaxScaler,StandardScaler\nfrom sklearn.pipeline import Pipeline","f15243a5":"o1=OneHotEncoder(drop='if_binary')\no2=OneHotEncoder()\n\nnumpipe=Pipeline([('s1',MinMaxScaler()),('s2',StandardScaler())])\n\nc1=ColumnTransformer(\n    [('encoder',o1,[1]),\n     ('Scaler',numpipe,[0,2,3,4,5,6,7,8,9,10]),\n    ])","b4903ced":"X=df.iloc[:,:-1]\ny=df.iloc[:,-1].values.reshape(-1,1)","97f5781a":"x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.15)","ff735a91":"x_train=c1.fit_transform(x_train)\nx_test=c1.transform(x_test)\n\ny_train=o2.fit_transform(y_train)\ny_test=o2.transform(y_test)\n\ny_train=y_train.toarray()\ny_test=y_test.toarray()","4bb241eb":"x_train","09db961e":"x_train.shape","2d254f3c":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,Input\nfrom tensorflow.keras.callbacks import EarlyStopping\n\ne=EarlyStopping(patience=5,restore_best_weights=True,verbose=1)","c55e0d7f":"n=x_train.shape[1]\nn1=y_train.shape[1]\n\nmodel=Sequential()\n\nmodel.add(Input(shape=x_train.shape))\nmodel.add(Dense(n,activation='relu'))\nmodel.add(Dense(2*n,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2*n,activation='relu'))\nmodel.add(Dense(n1,activation='softmax'))\n\n\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics='accuracy')\n","384c7b65":"history=model.fit(x_train,y_train,epochs=100,callbacks=[e],validation_split=1\/6)","a26c31ea":"model.summary()","afae065c":"model.evaluate(x_test,y_test)","a9c644f7":"from sklearn.metrics import classification_report\n\npred=np.argmax(model.predict(x_test),axis=-1)\n\nprint(classification_report(pred,np.argmax(y_test,axis=-1)))","c787e3c6":"pred","78d70475":"# Data Loading","6dbd6cbe":"# Model Building","a14778fb":"# Null Check","8176f028":"# Data Preprocessing","3e683a71":"# Visualisation"}}