{"cell_type":{"891be331":"code","366717e9":"code","5639d597":"code","552612ba":"code","ecbb9154":"code","99d9c722":"code","d44f6136":"code","9fad9ae8":"code","de4f6dcf":"code","28b28f84":"code","16a50e74":"code","8f53bbe0":"code","801f64b7":"markdown","2f8427bd":"markdown","4951b1df":"markdown","b3547aaa":"markdown","51dde52e":"markdown","b074ab33":"markdown","291d997a":"markdown","1b463d08":"markdown","c4a92871":"markdown","c03f1881":"markdown","83c92767":"markdown","a8502196":"markdown"},"source":{"891be331":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport os\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","366717e9":"# %% Veriseti al\u0131nd\u0131.\ndata = pd.read_csv('..\/input\/column_3C_weka.csv')","5639d597":"# Verisetinin i\u00e7eri\u011finden k\u00fc\u00e7\u00fck bir k\u0131s\u0131m a\u015fa\u011f\u0131da g\u00f6r\u00fclmektedir.\ndata.head()\n\n","552612ba":"#%% Veri say\u0131sal olarak ifade ediliyor.\n\ndata.loc[:,'class'] = [1 if each == 'Normal' else 0 for each in data.loc[:,'class'] ]\nLabels = data.loc[:,'class']\n\nx = data.drop([\"class\"],axis = 1)","ecbb9154":"#%% Normalizasyon..\nx_norm = (x - np.min(x))\/(np.max(x) - np.min(x))\n\nprint(\"NORMAL\u0130ZASYON \u0130\u015eLEM\u0130 \u00d6NCES\u0130:\",\n      \"\\nMin :\")\nprint(np.min(x))\nprint(\"\\nMax :\")\nprint(np.max(x))\n\n\nprint(\"\\n\\nNORMAL\u0130ZASYON \u0130\u015eLEM\u0130 SONRASI:\",\n      \"\\nMin :\")\nprint(np.min(x_norm))\nprint(\"\\nMax :\")\nprint(np.max(x_norm))\n\n","99d9c722":"#%% Veri E\u011fitim ve Test verisi olarak ayr\u0131ld\u0131..\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_norm, Labels, test_size = 0.3, random_state = 1)","d44f6136":"# %% Buradaki fonksiyon 2 nokta aras\u0131ndaki uzakl\u0131\u011f\u0131 hesaplamaktad\u0131r.\n# Distance = Sqrt(Sum((p1-p2)^2)) \n#\ndef Distance(point_1,point_2):\n    total = 0\n    for idx in range(len(point_1)):\n        total = total + (point_1[idx] - point_2[idx])**2\n    return total**0.5\n    \n    ","9fad9ae8":"def K_NNeighbors(k_value, x_train, y_train, x_test):\n    y_predict = []\n    \n    #Herbir test noktas\u0131 i\u00e7in di\u011fer t\u00fcm noktalara olan uzakl\u0131klar hesaplan\u0131yor.\n    #Bulunan uzakl\u0131klar etiketlerle beraber 'Neighbors' de\u011fi\u015fkeninde tutuluyor.\n    for idx_test in range(x_test.shape[0]):\n        Neighbors = []\n        test_point = x_test[idx_test]\n        for idx_rows in range(x_train.shape[0]):\n            train_point = x_train[idx_rows]\n            Neighbors.append([Distance(test_point, train_point),y_train[idx_rows]])\n        \n        # Her bir kom\u015funun test noktas\u0131na olan uzakl\u0131\u011f\u0131 bulunuyor.En yak\u0131n 'K' tane kom\u015fuyu se\u00e7mek i\u00e7in \n        # \u00f6ncelikle kom\u015fular uzakl\u0131klar\u0131na g\u00f6re k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe do\u011fru s\u0131ralan\u0131yor..\n        # Daha sonra k tane kom\u015fu se\u00e7ilip i\u00e7erisinden etiket(label) de\u011ferleri \u00e7ekiliyor.\n        Neighbors.sort()\n        Neighbors = Neighbors[0:k_value]\n        Labels = [n[1] for n in Neighbors]\n        \n        # En yak\u0131n k tane kom\u015funun sahip oldu\u011fu etiketlerin frekanslar\u0131 bulunuyor ve en y\u00fcksek frekansa sahip\n        # etiket test noktas\u0131n\u0131 s\u0131n\u0131flamakta kullan\u0131l\u0131yor.\n        from itertools import groupby\n        Freq = [[len(list(group)), key] for key, group in groupby(Labels)]\n        y_predict.append(max(Freq)[1])\n    return y_predict\n        \n            \n    \n    ","de4f6dcf":"# Yaz\u0131lan KNN algoritmas\u0131 deneniyor.\ny_predicted = K_NNeighbors(5, np.array(x_train), np.array(y_train), np.array(x_test))","28b28f84":"# Yaz\u0131lan algoritman\u0131n do\u011frulu\u011fu \u00f6l\u00e7\u00fcl\u00fcyor.\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_predicted))","16a50e74":"#%% KNN Modeli\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train, y_train)\nprediction = knn.predict(x_test)\n\nprint(\"Accuracy of KNN algorithm: \",knn.score(x_test, y_test))","8f53bbe0":"# Algoritmalar\u0131n Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131.\nscore_list_sklearn = []\nscore_list_myknn = []\n\nfor each in range(1,50):\n    sklearn_knn = KNeighborsClassifier(n_neighbors=each)\n    sklearn_knn.fit(x_train, y_train)\n    \n    y_predicted = K_NNeighbors(each, np.array(x_train), np.array(y_train), np.array(x_test))\n    \n    score_list_myknn.append(accuracy_score(y_test, y_predicted))\n    score_list_sklearn.append(sklearn_knn.score(x_test,y_test))\n \nplt.plot(range(1, 50), score_list_sklearn)\nplt.xlabel(\"k value\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"KNN With Sklearn\")\nplt.show()\n\nplt.plot(range(1, 50), score_list_myknn)\nplt.xlabel(\"k value\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"My KNN\")\nplt.show()","801f64b7":"**ADIM 5: Normalizasyon \u0130\u015flemi.**","2f8427bd":"\n**\nADIM 4: Veri \u0130\u00e7erisinden \u00d6zellikler \u0130le Etiketlerin \u00c7\u0131kart\u0131lmas\u0131 Ve Etiketlerin \u0130nteger De\u011fer Olarak Belirtilmesi.\n**","4951b1df":"\n\n**ADIM 3: Verisetinin \u0130ncelenmesi.**","b3547aaa":"**ADIM 8: Sklearn \u0130le KNN Algoritmas\u0131n\u0131n Kodlanmas\u0131**","51dde52e":"**ADIM 9: Algoritmalar\u0131n Farkl\u0131 k De\u011ferleri \u0130\u00e7in Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131.**","b074ab33":"# G\u0130R\u0130\u015e\n\nBu \u00e7al\u0131\u015fmada \"Biomechanical features of orthopedic patients\" veriseti kullan\u0131larak  KNN Algoritmas\u0131 yaz\u0131lm\u0131\u015f ve yaz\u0131lan bu algoritma sklearn k\u00fct\u00fcphanesindeki KNN s\u0131n\u0131fland\u0131r\u0131c\u0131 ile kar\u015f\u0131la\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r.\n\nS\u0131ras\u0131yla \u015fu ad\u0131mlar izlenmi\u015ftir;\n\n   * K\u00fct\u00fcphanelerin \u0130mport Edilmesi.\n   * Verisetinin Al\u0131nmas\u0131.\n   * Verisetinin \u0130ncelenmesi.\n   * Veri \u0130\u00e7erisinden \u00d6zellikler \u0130le Etiketlerin \u00c7\u0131kart\u0131lmas\u0131 Ve Etiketlerin \u0130nteger De\u011fer Olarak Belirtilmesi.\n   * Normalizasyon \u0130\u015flemi.\n   * Verinin E\u011fitim Ve Test Verisi Olarak Ayr\u0131lmas\u0131.\n   * KNN Algoritmas\u0131n\u0131n Yaz\u0131lmas\u0131.\n      * Fonksiyonlar\u0131n Yaz\u0131lmas\u0131.\n      * Yaz\u0131lan Algoritman\u0131n Denenmesi.\n   * Sklearn \u0130le KNN Algoritmas\u0131n\u0131n Kodlanmas\u0131.\n   * Algoritmalar\u0131n Farkl\u0131 k De\u011ferleri \u0130\u00e7in Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131.","291d997a":"**ADIM 7.1: Fonksiyonlar\u0131n Yaz\u0131lmas\u0131**","1b463d08":"**ADIM 1: K\u00fct\u00fcphanelerin \u0130mport Edilmesi.**","c4a92871":"**ADIM 2: Verisetinin Al\u0131nmas\u0131.**","c03f1881":"**ADIM 7.2: Yaz\u0131lan Algoritman\u0131n Denenmesi**","83c92767":"\n**\nADIM 6: Verinin E\u011fitim ve Test Verisi Olarak Ayr\u0131lmas\u0131.**","a8502196":"**ADIM 7: KNN Algoritmas\u0131n\u0131n Yaz\u0131lmas\u0131.**\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e5\/KNN_detec.JPG)\n***Kaynak : https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e5\/KNN_detec.JPG***\n\nK-Nearest Neighbors (K-En Yak\u0131n Kom\u015fu) algoritmas\u0131 \u015fu \u015fekilde i\u015fler;\n* Test noktas\u0131 se\u00e7ilir.\n* Di\u011fer t\u00fcm noktalar i\u00e7in test noktas\u0131na olan uzakl\u0131klar hesaplan\u0131r.\n* En yak\u0131n \"K\" tane nokta bulunur.\n* Bu \"K\" tane noktan\u0131n etiketine bak\u0131larak test noktas\u0131 s\u0131n\u0131fland\u0131r\u0131l\u0131r. \u00d6rne\u011fin yukar\u0131daki resimde k=3't\u00fcr ve bu 3 kom\u015funun 2 tanesi ikinci s\u0131n\u0131fa, 1 tanesi birici s\u0131n\u0131fa aittir. Dolay\u0131s\u0131yla test noktas\u0131 i\u00e7in \"ikinci s\u0131n\u0131fa aittir\" diyebiliriz."}}