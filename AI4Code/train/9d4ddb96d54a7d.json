{"cell_type":{"44dcf13e":"code","858e0633":"code","4abe28bb":"code","4e6608f7":"code","cc5de079":"code","81f035a1":"code","deaae27b":"code","1a3cbf0a":"code","22105130":"code","25f98239":"code","331405b8":"code","6df68b29":"code","50251974":"code","a2208a09":"code","2bcc98da":"code","fbf74b9f":"code","0c63a526":"code","3fac9a11":"code","36efe7ac":"code","ab9aa8e0":"code","c36d9db7":"code","57e3ed2b":"code","844312a6":"code","6d2df2e6":"code","cbcd33df":"code","29eb8a73":"code","f7903f8d":"code","0474ec82":"code","2b545673":"code","5f774d95":"code","d5e94592":"code","5747f6c9":"code","6565edab":"code","aa321355":"code","f5fc6e69":"code","743e2c32":"code","4357f758":"code","2487ed9f":"code","5819a9b8":"code","1248fc05":"code","ba68913a":"code","ce6ad156":"code","8552b5c0":"code","9f393364":"code","804f2525":"code","62147391":"code","a79e3222":"code","ab4226e1":"code","ea37cac6":"code","e8da57cd":"code","f2dfb889":"code","985ac8fe":"code","acb207f6":"code","e7465ac6":"code","7ebf4d6f":"markdown","2981cfe1":"markdown","e21cfe1e":"markdown","a06e40d6":"markdown","e49878d3":"markdown","a85f7abd":"markdown","5b2857e1":"markdown","4a783dfc":"markdown","ec1072e3":"markdown","48fc1619":"markdown","715fff3e":"markdown"},"source":{"44dcf13e":"import pandas as pd\nimport numpy as np","858e0633":"df_conf      = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ndf_death     = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\ndf_recovered = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\n\nprint(df_conf.shape)\nprint(df_death.shape)\nprint(df_recovered.shape)","4abe28bb":"df_conf","4e6608f7":"df_conf = df_conf.sort_values(by=['Province\/State'])\ndf_conf = df_conf.reset_index(drop=True)\n\ndf_death = df_death.sort_values(by=['Province\/State'])\ndf_death = df_death.reset_index(drop=True)\n\ndf_recovered = df_recovered.sort_values(by=['Province\/State'])\ndf_recovered = df_recovered.reset_index(drop=True)","cc5de079":"df_conf","81f035a1":"print(df_conf[[\"Province\/State\",\"Country\/Region\"]].equals(df_death[[\"Province\/State\",\"Country\/Region\"]]))","deaae27b":"print(df_conf[[\"Province\/State\",\"Country\/Region\"]].equals(df_recovered[[\"Province\/State\",\"Country\/Region\"]]))","1a3cbf0a":"d1= df_conf[['Province\/State','Country\/Region']]\nd2= df_recovered[[\"Province\/State\",\"Country\/Region\"]]\ndf_diff = pd.concat([d1,d2]).drop_duplicates(keep=False)\ndf_diff","22105130":"df_recovered[(df_recovered['Country\/Region'] == 'Canada')]","25f98239":"df_conf[(df_conf['Country\/Region'] == 'Canada')]","331405b8":"dates_conf = df_conf.columns[4:]\ndates_death = df_death.columns[4:]\nprint(dates_conf)\nprint(dates_death)","6df68b29":"dates_conf.equals(dates_death)","50251974":"#store dates as values in a new column\ndf_conf_melted = df_conf.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                              value_vars=dates_conf, \n                              var_name='Date',\n                              value_name='Confirmed')\ndf_conf_melted","a2208a09":"df_death_melted = df_death.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],                                \n                                value_vars=dates_death,\n                                var_name='Date', \n                                value_name='Deaths')\ndf_death_melted","2bcc98da":"df_combined = pd.concat([df_conf_melted, df_death_melted[\"Deaths\"]], axis = 1, sort = False)\ndf_combined","fbf74b9f":"df_combined[\"Percentage\"] = df_combined[\"Deaths\"]\/df_combined[\"Confirmed\"]\ndf_combined","0c63a526":"df_combined.fillna(0, inplace=True)\ndf_combined","3fac9a11":"df_combined.dtypes","36efe7ac":"import datetime\ndef format_time(datetime_str):    \n    d = datetime.datetime.strptime(datetime_str, '%m\/%d\/%y')    \n    return d.date()\n\ndf_combined[\"Date\"] = df_combined[\"Date\"].apply(format_time)\ndf_combined","ab9aa8e0":"grouped_by_date = df_combined.groupby(\"Date\")","c36d9db7":"for date, group in grouped_by_date:\n    print(\"==========\")\n    print(date)\n    print(\"==========\")\n    print(group[[\"Province\/State\",\"Country\/Region\", \"Confirmed\", \"Deaths\"]])","57e3ed2b":"df_daily = df_combined.groupby([\"Date\",\"Country\/Region\"]).aggregate({'Confirmed': 'sum', 'Deaths': 'sum'})\ndf_daily","844312a6":"df_daily.loc[format_time('09\/27\/20')]","6d2df2e6":"df_daily.loc[(format_time('5\/22\/20'),'US')]","cbcd33df":"most_recent_date = df_combined['Date'].max()\nprint(most_recent_date)","29eb8a73":"df_most_recent= df_daily.loc[most_recent_date]\ndf_most_recent","f7903f8d":"df_most_confirmed_recent_sorted = df_most_recent.sort_values(by=\"Confirmed\", ascending=False)\ndf_most_confirmed_recent_sorted.head(10)","0474ec82":"df_most_deaths_recent_sorted = df_most_recent.sort_values(by=\"Deaths\", ascending=False)\ndf_most_deaths_recent_sorted.head(10)","2b545673":"df_most_recent.loc[\"France\"]","5f774d95":"df_most_recent[df_most_recent.index == input(\"Enter country name : \")]","d5e94592":"df_most_recent[df_most_recent.index == \"China\"]","5747f6c9":"df_combined_china = df_combined[df_combined['Country\/Region'] == \"China\"]\ndf_combined_china","6565edab":"df_combined_china_date = df_combined_china.groupby([\"Date\",\"Province\/State\"]).aggregate({'Confirmed': 'sum', 'Deaths': 'sum'})\ndf_combined_china_date","aa321355":"df_combined_china_most_recent = df_combined_china_date.loc[most_recent_date,:]\ndf_combined_china_most_recent","f5fc6e69":"df_combined_china_most_recent_sorted = df_combined_china_most_recent.sort_values(by=\"Confirmed\", ascending=False)\n    \ndf_combined_china_most_recent_sorted.head(10)","743e2c32":"df_recovered_melted = df_recovered.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                              value_vars=dates_conf, \n                              var_name='Date',\n                              value_name='Recovered')\ndf_recovered_melted","4357f758":"df_recovered_melted[\"Date\"] = df_recovered_melted[\"Date\"].apply(format_time)\ndf_recovered_melted","2487ed9f":"df_recovered_melted.fillna(0, inplace=True)\ndf_recovered_melted","5819a9b8":"df_recovered_daily= df_recovered_melted.groupby([\"Date\",\"Country\/Region\"]).aggregate({'Recovered': 'sum'})\ndf_recovered_daily","1248fc05":"df_recovered_daily.shape, df_daily.shape","ba68913a":"df_combined_all = pd.concat([df_daily, df_recovered_daily[\"Recovered\"]], axis = 1, sort = False)\ndf_combined_all","ce6ad156":"df_combined_all[\"Death Percentage\"] = (df_combined_all[\"Deaths\"]\/df_combined_all[\"Confirmed\"]) *100\ndf_combined_all[\"Recovery Percentage\"] = (df_combined_all[\"Recovered\"]\/df_combined_all[\"Confirmed\"]) *100\ndf_combined_all","8552b5c0":"df_combined_all.fillna(0, inplace=True)\ndf_combined_all","9f393364":"df_most_recent= df_combined_all.loc[most_recent_date]\ndf_most_recent","804f2525":"df_most_recovered_recent_sorted = df_most_recent.sort_values(by=\"Recovered\", ascending=False)\ndf_most_recovered_recent_sorted.head(10)","62147391":"import matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\n\n\nfor country, df_country in df_combined_all.groupby(\"Country\/Region\"):    \n    dates = list(df_country.index.get_level_values('Date'))\n    confirmed = list(df_country.Confirmed)\n    deaths = list(df_country.Deaths)\n    recovered= list(df_country.Recovered)\n    plt.figure(figsize=(12,7))\n    plt.bar(dates, confirmed, color='lightblue', label=\"Total number of confirmed cases\")\n    plt.bar(dates, recovered, color='lightgreen',label=\"Total number of recovered cases\")\n    plt.bar(dates, deaths, color='red',label=\"Total number of reported deaths\")\n    plt.xlabel(\"Dates\")\n    plt.ylabel(\"Number\")\n    plt.title(country)\n    plt.legend()\n    plt.show()","a79e3222":"def plot_pie(df, column, title):\n    labels = list(df.index)\n    sizes = list(df[column])\n    explode = [0 for n in range(10)]\n    \n    with plt.style.context(\n        { \"axes.prop_cycle\" : plt.cycler(\"color\", plt.cm.tab20c.colors)}):\n        fig1, ax1 = plt.subplots(figsize=(14,6))\n        ax1.pie(sizes, \n                explode=explode, \n                labels=labels, \n                autopct='%1.2f%%', \n                shadow=False, \n                startangle=0)\n        ax1.axis('equal')  # Un rapport d'aspect \u00e9gal garantit que le diagramme sera dessin\u00e9 en cercle.\n        plt.legend()\n        plt.title(title)\n    \n    centre_circle = plt.Circle((0,0),0.70,fc='white')\n    fig = plt.gcf()\n    fig.gca().add_artist(centre_circle)\n    plt.show()","ab4226e1":"top10_countries_confirmed = df_most_confirmed_recent_sorted.head(10)\nplot_pie(top10_countries_confirmed, \"Confirmed\", \"Top 10 Countries for Confirmed Cases\")","ea37cac6":"plot_pie(df_combined_china_most_recent_sorted.head(10), \"Confirmed\", \"Top 10 Chinese provinces for confirmed cases\")","e8da57cd":"plot_pie(df_most_deaths_recent_sorted.head(10), \"Deaths\", \"Top 10 countries for reported deaths\")","f2dfb889":"plot_pie(df_most_recovered_recent_sorted.head(10), \"Recovered\", \"Top 10 countries for recovered cases\")","985ac8fe":"plt.rcParams[\"figure.figsize\"] = (12,7)\nfor country, df_country in df_combined_all.groupby(level=1):    \n    # extract the daily number of confirmed cases and deaths (reverse cumulative sum)\n    df_unrolled = df_country.diff().fillna(df_country)\n    df_unrolled = df_unrolled.drop(['Death Percentage', 'Recovery Percentage'], axis=1)\n    \n    plt.plot(dates, df_unrolled[\"Confirmed\"], color='blue', label=\"Confirmed cases per day\")\n    plt.plot(dates, df_unrolled[\"Recovered\"], color='green', label=\"Recovered cases per day\")\n    plt.plot(dates, df_unrolled[\"Deaths\"], color='red', label=\"Deaths per day\")\n    plt.xlabel(\"Dates\")\n    plt.ylabel(\"Number\")\n    plt.title(country)\n    plt.legend()\n    plt.show()\n    ","acb207f6":"import folium\n\nfolium_map = folium.Map(location=[33.886917, 9.537499], zoom_start=2)\ncolor=\"#E37222\"\nscale = 200000","e7465ac6":"most_recent_date = df_combined['Date'].max()\ndf_latest_day = df_combined[df_combined.Date==most_recent_date]\n\nfor place in df_latest_day.index:\n    lat = df_latest_day.loc[place][\"Lat\"]\n    lng = df_latest_day.loc[place][\"Long\"]    \n    confirmed = df_latest_day.loc[place][\"Confirmed\"]\n    deaths = df_latest_day.loc[place][\"Deaths\"]\n   \n    # draw a circle on the province \/ state \/ region \/ country\n    marker_confirmed = folium.CircleMarker(location=[lat, lng],radius=confirmed\/scale,color=\"blue\",fill=True)\n    marker_confirmed.add_to(folium_map)\n    \n    marker_deaths = folium.CircleMarker(location=[lat, lng],radius=deaths\/scale,color=\"red\",fill=True)\n    marker_deaths.add_to(folium_map)\n    \ndisplay(folium_map)","7ebf4d6f":"# **Visualization** ","2981cfe1":"**For a specific day and country**","e21cfe1e":"**The most recent data for China by province**","a06e40d6":"**Analyze the control of the situation in each country**","e49878d3":"**Countries with the highest cure rate**","a85f7abd":"**Representation on the world map**","5b2857e1":"**Percentage of deaths**","4a783dfc":"**Total daily number of confirmed cases and deaths for each country**","ec1072e3":"**Daily number of confirmed cases and deaths**","48fc1619":"**Most affected countries**","715fff3e":"**Countries with the highest numbers of deaths**"}}