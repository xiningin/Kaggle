{"cell_type":{"6b86442c":"code","a6901fff":"code","5a9a17a7":"code","c619c793":"code","41ae0ee6":"code","990410b9":"code","48dd35d1":"code","a80fa3f7":"code","7c53e366":"code","cdb0f7ff":"code","b5d17b3f":"code","f2f9ab56":"code","c292acc5":"code","d8771228":"code","842f1009":"code","64b4b28d":"code","de3b149d":"code","b440553f":"code","16003285":"code","eca2d720":"code","777103da":"code","894de817":"code","0714a698":"markdown","53f49e58":"markdown","6ab788bb":"markdown","7855d472":"markdown","7d46e1bb":"markdown"},"source":{"6b86442c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6901fff":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n\nimport matplotlib.cm as cm\n\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split","5a9a17a7":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","c619c793":"df.head()","41ae0ee6":"# converting df\n\nimages = df.iloc[:,1:].values\nimages = images.astype(np.float)\n\n# convert from [0:255] => [0.0:1.0]\nimages = np.multiply(images, 1.0 \/ 255.0)\n\nprint('images({0[0]},{0[1]})'.format(images.shape))","990410b9":"image_size = images.shape[1]\nprint ('image_size => {0}'.format(image_size))\n\n# in this case all images are square\nimage_width = image_height = np.ceil(np.sqrt(image_size)).astype(np.uint8)\n\nprint ('image_width => {0}\\nimage_height => {1}'.format(image_width,image_height))","48dd35d1":"# display image\ndef display(img):\n    \n    # (784) => (28,28)\n    one_image = img.reshape(image_width,image_height)\n    \n    plt.axis('off')\n    plt.imshow(one_image, cmap=cm.binary)\n\n# output image     \ndisplay(images[4197])","a80fa3f7":"labels_flat = df['label'].values.ravel()","7c53e366":"tf.keras.backend.clear_session()","cdb0f7ff":"model = tf.keras.models.Sequential([tf.keras.layers.Flatten(), \n                                    tf.keras.layers.Dense(128, activation=tf.nn.relu), \n                                    tf.keras.layers.Dense(64, activation=tf.nn.relu), \n                                    tf.keras.layers.Dense(32, activation=tf.nn.relu), \n                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])","b5d17b3f":"model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","f2f9ab56":"training_images_data = df.loc[:, df.columns != 'label'] # df_train.iloc[:,1:]\ntraining_labels = df.loc[:, df.columns == 'label']","c292acc5":"X_train, X_val, Y_train, Y_val = train_test_split(training_images_data, training_labels, \n                                                  test_size = 0.2, random_state= 2)","d8771228":"model.fit(training_images_data, training_labels, validation_data=(X_val, Y_val), epochs=15)","842f1009":"y_predict = model.predict(X_val)\nlen(y_predict)","64b4b28d":"y_label = [np.argmax(i) for i in y_predict]","de3b149d":"cf = tf.math.confusion_matrix(labels=Y_val,predictions=y_label)","b440553f":"plt.figure(figsize=(20,14))\nsn.heatmap(cf,annot=True,cmap='magma',fmt='d')","16003285":"test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest.head()","eca2d720":"y_test_predict = model.predict(test)","777103da":"# Submission file\ny_label_test = [np.argmax(i) for i in y_test_predict]\nmy_submission = pd.DataFrame({'ImageId': range(1,28001), 'Label': y_label_test})\nmy_submission.head()","894de817":"# create CSV-file\nmy_submission.to_csv(\"my_submission.csv\",index=False)","0714a698":"------\n#### Submission","53f49e58":"#### Evaluation","6ab788bb":"#### Train Test split","7855d472":"#### Import Librairies","7d46e1bb":"#### Inference"}}