{"cell_type":{"9f0aac79":"code","ef2d31e6":"code","ab9a25bf":"code","42b7b963":"code","fff86930":"code","6b19440a":"code","ebcf9627":"code","e65bb936":"code","fafd5484":"code","126b473d":"code","2974f725":"code","774db74c":"code","ca03ba93":"code","cae00348":"code","4876dcfe":"code","b6adc20d":"code","25528e06":"code","1046062f":"code","ac8e842b":"code","ec04b303":"code","4b740790":"code","2c0bcff7":"code","77affdef":"code","f1c215b2":"code","de0bfa26":"code","56bbd3c2":"code","dc119b76":"code","eb99fad4":"code","ba3c717b":"code","44495db7":"code","c32809ae":"code","ed62d610":"code","993e502f":"code","896b88e1":"code","1b1bfcaa":"code","167815c5":"code","e483fbb7":"code","9337b67f":"code","e1fff68f":"code","5882160b":"code","d37c0f06":"code","1acfcb2c":"code","dd01730d":"markdown","ca206550":"markdown","2cc60844":"markdown","0ae67fa4":"markdown","040e6851":"markdown","22db18f7":"markdown","04b4f1b5":"markdown","63628478":"markdown","a19bd425":"markdown","501897f2":"markdown","a79ad85c":"markdown","37646220":"markdown","6d853c11":"markdown","41be35c9":"markdown","33c425c7":"markdown","f9a4f40e":"markdown","a4b9756a":"markdown","34a82f29":"markdown","2139f6ed":"markdown","c9158e0e":"markdown","df28a64f":"markdown","4e33fd9a":"markdown","e5b03787":"markdown","fcf36462":"markdown","3c7509ed":"markdown","40d77668":"markdown"},"source":{"9f0aac79":"#Lets import the basis libraries for handling the data frames and arrays\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for Visualizations\nimport seaborn as sns # for Visualization\n\n","ef2d31e6":"IPL = pd.read_csv(\"..\/input\/my-first-ipl-project\/IPL Matches 2008-2020.csv\")","ab9a25bf":"#Lets do some EDA for understand the data.\nIPL.columns\n\nIPL.dtypes\nIPL.shape\nIPL.head(10)\nIPL.describe()","42b7b963":"IPL.columns","fff86930":"#Lets delete the ID column as its no more required\nIPL.isna().sum().plot(kind = 'bar' ,color = 'red')","6b19440a":"IPL = IPL.drop(columns =['method'])","ebcf9627":"IPL.isna().sum().plot(kind = 'bar' ,color = 'red')","e65bb936":"#Lets fill the NaN values referring to the Venu name as follows\nIPL['city'][IPL['venue'] == 'Sharjah Cricket Stadium'] = IPL['city'].fillna('Sharjah')\nIPL['city'][IPL['venue'] == 'Dubai International Cricket Stadium'] = IPL['city'].fillna('Dubai')\n\n#And then the result mat=rgin will be filled with 0.\nIPL['result_margin']= IPL['result_margin'].fillna(0)\n\nIPL.isna().sum().plot(kind = 'bar' ,color = 'red')\n","fafd5484":"#From this , we came to know there are 4 records where  we don't have proper information about the winner ,result ,player of the match . Hence we can remove these 4 records from the database.","126b473d":"IPL = IPL[IPL['winner'].isna() == False]\nIPL.reset_index(inplace=True)\nIPL = IPL.drop(columns =['index'])\n\nIPL.isna().sum().plot(kind = 'bar' ,color = 'red')\n","2974f725":"len(IPL.team1.unique())\nIPL = IPL.replace(['Deccan Chargers'] ,'Sunrisers Hyderabad')\nIPL = IPL.replace(['Delhi Daredevils'] ,'Delhi Capitals')\nIPL = IPL.replace(['Pune Warriors'] ,'Rising Pune Supergiants')\nIPL = IPL.replace(['Rising Pune Supergiant'] ,'Rising Pune Supergiants')\nIPL = IPL.replace(['Chennai Super Kings'] ,'Chennai')\nIPL = IPL.replace(['Delhi Capitals'] ,'Delhi')\nIPL = IPL.replace(['Gujarat Lions'] ,'Gujarat')\nIPL = IPL.replace(['Kings XI Punjab'] ,'Punjab')\nIPL = IPL.replace(['Kolkata Knight Riders'] ,'Kolkata')\nIPL = IPL.replace(['Rajasthan Royals'] ,'Rajasthan')\nIPL = IPL.replace(['Royal Challengers Bangalore'] ,'Bangalore')\nIPL = IPL.replace(['Rising Pune Supergiants'] ,'Pune')\nIPL = IPL.replace(['Sunrisers Hyderabad'] ,'Hyderabad')\nIPL = IPL.replace(['Mumbai Indians'] ,'Mumbai')\nIPL = IPL.replace(['Kochi Tuskers Kerala'] ,'Kerala')\n\nlen(IPL.team1.unique())\nlen(IPL.team2.unique())\nlen(IPL.winner.unique())\n","774db74c":"#In the data set we have date column only , lets categorise the data with IPL season using this date column as follows\nIPL.date = pd.to_datetime(IPL.date)\n\n#IPL.iloc[IPL['result_margin'].max()]\n\nn_list = []\nfor i in range(0 , len(IPL['date'])):\n    n_year = IPL['date'][i].strftime(\"%Y\")\n    n_list.append(n_year) \n\nIPL['Season'] = \"Season-\"+ pd.DataFrame(n_list) #Added a new column as Season\n#Dropping the first column\nIPL.info()\n\nIPL['Season'].unique()\n#There are 13 IPL seasons data available for our analysis\n","ca03ba93":"#Lets check the season wise count of matches held in the IPLs\nsns.countplot(x = 'Season' , data = IPL )\nplt.ylabel('Count of Matches held' , fontsize = 15)\nplt.xlabel('Matches held in each season' , fontsize = 15)\nplt.show()\n","cae00348":"last_5_years = ['Season-2016','Season-2017','Season-2018','Season-2019','Season-2020']\nIPL_Last5 = IPL[IPL['Season'].isin (last_5_years)]\nPivot_last5 = IPL_Last5.pivot_table(index = ['team1'] , columns = ['Season'],values = ['winner'], aggfunc ='count',fill_value = 'Not Available',margins = True, margins_name='Total')\n","4876dcfe":"sns.countplot(x = 'winner' , data = IPL_Last5 )\nplt.show()\n","b6adc20d":"IPL_Last5.city.unique()\nIPL_Last5.venue.unique()\nIPL_Last5.team1.unique()\nIPL_Last5.team2.unique()\nIPL_Last5.winner.unique()\n","25528e06":"sns.catplot(x = 'winner' ,data = IPL ,kind = 'count')\nplt.show()\n\nIPL['winner'].value_counts().index[0]\nIPL['winner'].value_counts().max()\n","1046062f":"IPL['result'] = IPL['result'].str.capitalize() \nplt.pie(IPL['result'].value_counts() , autopct = '%1.1f%%' , labels = IPL['result'].value_counts().index)\nplt.title('Modes of Wins by the Teams', fontsize = 15)\nplt.show()\n","ac8e842b":"# Matches win by wickets \nIPL[IPL['result']=='Wickets'].groupby(['winner'])['result_margin'].apply(np.median).sort_values(ascending = False)\npivot = IPL[IPL['result']=='Wickets'].pivot_table( index = ['winner'],values = ['result_margin'] , aggfunc = 'sum')\nsns.barplot(x = pivot.index , y = 'result_margin' ,  data = pivot)\n\n","ec04b303":"sns.boxplot( y = 'winner', x = 'result_margin' , data = IPL[IPL['result']=='Wickets'] )\nplt.title('Winning by Wickets - Team performance')\nplt.show()","4b740790":"IPL[IPL['result']=='Runs'].groupby(['winner'])['result_margin'].apply(np.median).sort_values(ascending = False)\npivot = IPL[IPL['result']=='Runs'].pivot_table( index = ['winner'],values = ['result_margin'] , aggfunc = 'sum')\nsns.barplot(x = pivot.index , y = 'result_margin' ,  data = pivot)\n","2c0bcff7":"sns.boxplot( y = 'winner', x = 'result_margin' , data = IPL[IPL['result']== 'Runs'])\nplt.title('Winning by runs - Team performance')\nplt.show()\n","77affdef":"sns.boxplot( y = 'winner', x = 'result_margin' , data = IPL[(IPL['result']== 'Runs') & (IPL['result_margin'] <= 10)])\nplt.title('Winning by small margins - Team performance')\nplt.show()\n","f1c215b2":"plt.pie(IPL['result'][IPL['winner'] == 'Mumbai' ].value_counts() , autopct = '%1.1f%%' , labels = IPL['result'].value_counts().index)\nplt.legend(fontsize = 15)\nplt.show()\n","de0bfa26":"sns.catplot(x = 'city' ,data = IPL ,kind = 'count')\nplt.title('Cities which Hosted IPL')\nplt.xlabel('Cities Hosted IPL')\nplt.ylabel('Count of Matches')\nplt.show()\n","56bbd3c2":"# As there are larger number of cities , lets consider the cities where more than 10 Matches held \nIPL_City_10 = IPL['city'].value_counts()\nIPL_City_10 = pd.DataFrame(IPL_City_10[IPL_City_10 >= 10])\nIPL_City_10.reset_index(inplace=True)\n","dc119b76":"len(IPL.city.unique())\nCity_list  = ['Bangalore', 'Chandigarh', 'Delhi', 'Mumbai', 'Kolkata', 'Jaipur',\n       'Hyderabad', 'Chennai', 'Cape Town', 'Port Elizabeth', 'Durban',\n       'Centurion', 'East London', 'Johannesburg', 'Kimberley',\n       'Bloemfontein', 'Ahmedabad', 'Cuttack', 'Nagpur', 'Dharamsala',\n       'Kochi', 'Indore', 'Visakhapatnam', 'Pune', 'Raipur', 'Ranchi',\n       'Abu Dhabi', 'Sharjah', 'Dubai', 'Rajkot', 'Kanpur', 'Bengaluru']\n","eb99fad4":"#Lets consider the most famous cities in India who hosted IPL matches\nselected_city = ['Bangalore', 'Chandigarh', 'Delhi', 'Mumbai', 'Kolkata', 'Jaipur',\n       'Hyderabad', 'Chennai','Ahmedabad', 'Cuttack', 'Nagpur', 'Dharamsala',\n       'Kochi', 'Indore', 'Visakhapatnam', 'Pune','Raipur','Ranchi','Rajkot', 'Kanpur', 'Bengaluru']\n","ba3c717b":"len(selected_city)\nIPL_Cities = IPL[IPL['city'].isin (selected_city)]\n\nlen(IPL_Cities['city'].unique())\nIPL_Cities = IPL_Cities.replace(['Bengaluru'] ,'Bangalore')\n\nsns.catplot(x = 'city' ,data = IPL_Cities ,kind = 'count')\nplt.title('The Top IPL Cities in India')\nplt.show()\n","44495db7":"team_best_city = []\npercentage_wins = []\nfor team in IPL['winner'].unique():\n    data = IPL_Cities[IPL['winner']== team]['city'].value_counts(normalize =True)\n    team_best_city.append(f'{team} at {list(data.index)[0]}')\n    percentage_wins.append(data.max()*100)\n","c32809ae":"#formating a bar plot using a list we have created\n\nsns.barplot(x = team_best_city , y = percentage_wins )\nplt.title('Percentage of wins at Home' , fontsize = 15)\nplt.axhline(np.mean(percentage_wins), label = 'Mean', linestyle = '--')\nplt.ylabel('Percentage of wins', fontsize = 15)\nplt.xlabel('Teams at Cities by Wins most', fontsize = 15)\nplt.yticks( [0,10,20,30,40],['0%','10%','20%','30%','40%'],fontsize = 15,color = '#6d597a')\nplt.xticks(rotation = 15)\nplt.legend(fontsize =15)\n","ed62d610":"Toss_Winning = IPL[IPL['toss_winner'] == IPL['winner']]\n","993e502f":"IPL['Toss_vs_Winner'] = ''\nIPL['Toss_vs_Winner'][IPL['toss_winner'] == IPL['winner']] = 'Yes'\nIPL['Toss_vs_Winner'][IPL['toss_winner'] != IPL['winner']] = 'No'\n","896b88e1":"plt.pie(IPL['Toss_vs_Winner'].value_counts() , autopct = '%1.1f%%' , labels = IPL['Toss_vs_Winner'].value_counts().index)\nplt.legend(fontsize = 15)\nplt.show()\n","1b1bfcaa":"#Toss decision in all the matches\nplt.pie(IPL['Toss_Decision'].value_counts() , autopct = '%1.1f%%' , labels = IPL['Toss_Decision'].value_counts().index)\nplt.legend(fontsize = 10)\nplt.title('Toss decision all the teams' , fontsize = 15)\nplt.show()\n","167815c5":"#Toss decision by winner team\nplt.pie(IPL['Toss_Decision'][IPL['toss_winner'] == IPL['winner']].value_counts() , autopct = '%1.1f%%' , labels = IPL['Toss_Decision'].value_counts().index)\nplt.title('Toss decision by the match winner teams' , fontsize = 15)\nplt.legend(fontsize = 10)\nplt.show()","e483fbb7":"#Toss decision by Top performance team\nplt.pie(IPL['Toss_Decision'][IPL['winner'] == 'Mumbai'].value_counts() , autopct = '%1.1f%%' , labels = IPL['Toss_Decision'].value_counts().index)\nplt.title('Toss decision by top performing team in all seasons' , fontsize = 15)\nplt.legend(fontsize = 10)\nplt.show()\n","9337b67f":"sns.catplot(x = 'Toss_Decision' , data = IPL[IPL['result'] != 'Tie'] , col = 'winner',kind = 'count' )\nplt.title('Teams who won the toss')\nplt.show()","e1fff68f":"\nlen(IPL.venue.unique())\nIPL_venue = IPL.pivot_table(index = ['venue' ,'city'], values = ['result_margin'], aggfunc = 'count')\nIPL_venue.result_margin.sort_values(ascending = False)\n","5882160b":"IPL['venue'] = IPL['venue'].replace(['M.Chinnaswamy Stadium','Punjab Cricket Association IS Bindra Stadium, Mohali'],\n                           ['M Chinnaswamy Stadium','Punjab Cricket Association Stadium, Mohali'])\n\n\n\n\n\n","d37c0f06":"sns.catplot(x = 'venue' , data = IPL , kind = 'count' )\nplt.title('Matches by Venue')\nplt.show()","1acfcb2c":"len(IPL.venue.unique())\nIPL_venue = IPL.pivot_table(index = ['venue' ,'city'], values = ['result_margin'], aggfunc = 'count')\nIPL_venue.result_margin.sort_values(ascending = False)","dd01730d":"We can see the method field having most of the null values , lets delete the method column","ca206550":"#From the above plot , we can make out an inference that ,a team has 41% of more advantage in winning the matches while playing at their home town\n\n#Lets Analise whether toss winning helped in match winning\n","2cc60844":"#Over the last 5 years , Mumbai won most of the matches(42) against other teams\n","0ae67fa4":"Eden Gardens , Walkhede stadium and Feroz shah Kotla stadiums hosted the most of the IPL matches in all the sessions.","040e6851":"From the above table , it is clear that , Rajastan and chenai teams not participated in the seasons 2016 and 2017 . where as Pune and Gujurat team involved in these years . And it is viseversa for next three years.\n","22db18f7":"#Banglore tops the chart in wiining the matches by wickets , although kerala seems the highest median , it playes really less number of matches\n\n# Matches win by runs\n","04b4f1b5":"# Now we have only 11 teams in allthe IPL seasons","63628478":"In the matches won by  marginal runs, Mumbai holds the 1 st place followed by Kolkota and Rajastan in 2nd and 3rd place respectively.\n","a19bd425":"From the above plot , we got to see that , except chennai city which is Chinnaswamy stadium ,in all the other pitches choosing fielding is a best decision for winning.\n#Other than most of the teams succed in chasing the runs given by the opposion team and only few teams got suceeded in scoring good runs in the board and won by bowling well. \n","501897f2":"#Mumbai hosted the most of the IPL matches\n\n#Now lets see if the home advantage contributes its winning chances","a79ad85c":"From this graph ,it is clear that 60.7 % of the times toss winning team choose to filed first and only 39.3% times choose to bat first \n","37646220":"Lets import the IPL data set by Matches","6d853c11":"In the year 2013 , Most of the matches conducted compare to other IPL seasons.\n\nOver the last 5 years , the IPL format is same and there is no difference in the teams as well\n","41be35c9":"Result_margin and city have maximum NaN values .","33c425c7":"Now lets check for other fields","f9a4f40e":"Now  all the NaN eliminated and we are good to go with our analysis.\nNow Lets rename the Team names as per the standard names of their franchesis.\nNeed to convert the below names i.e \n     #  Deccan Chargers = Sunrisers Hyderabad - Team Hyderabad\n     #  Delhi Daredevils = Delhi Capitals\n     # Pune Warriors  = Rising Pune Supergiants\n","a4b9756a":"There is no significant difference in the mode of wins by the most winning team verses all the teams\n\nPlots for the cities which hosted IPL\n","34a82f29":"#Modes of wins by the most winning team","2139f6ed":" # Teamwise count plot in all the seasons","c9158e0e":"From the above plot we can derive an insight that winning the toss gives significant advantage in winning the matches.\nLets check which decision makes more likely to win the matches\n","df28a64f":"For this analysis , the dataset that we are going to use is **Indian Premier League from 2008 to 2020** which is posted on **Kaggle Data**  set .\n\nThis analysis is all about finding out the different insights from the dataset and figure out various answers to help the bussiness decisions.\n\nLets check the below various bussiness objects\n* which team had won maximum matches in each session\n* Which team had won by maximum wins\n* Which team had won by maximum wickets\n* Which team had won matches by marinal score\n* Has Toss winning helped in winning matches\n* Has Home Ground helped in winning matches","4e33fd9a":"Lets rename the venue names to get the unique venues.\n","e5b03787":"It is proved that the decision of choosing fielding first is the best decision","fcf36462":"IPL Data Analysis ( 2008 to 2020 ) Basic EDA","3c7509ed":"#We can see here , mumbai holds the distiction of winning most of the mathes in the IPL\n\n# Modes of Wins by top winning team","40d77668":"# Now lets analyse the team performaces by venues"}}