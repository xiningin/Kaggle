{"cell_type":{"814382c8":"code","085d3e45":"code","3ed24f9d":"code","33bf49d7":"code","c5ebd4e9":"code","1b062292":"code","0cfe034a":"markdown"},"source":{"814382c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","085d3e45":"!pip install tensorflow_addons==0.9.1","3ed24f9d":"import tensorflow as tf\nfrom tensorflow.keras.layers import *\nimport random\nfrom tensorflow.keras.callbacks import Callback, LearningRateScheduler\nfrom tensorflow.keras.losses import categorical_crossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras import losses, models, optimizers\nimport tensorflow_addons as tfa\nimport gc\n\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import f1_score\n\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_rows', 500)","33bf49d7":"# configurations and main hyperparammeters\nEPOCHS = 180\nNNBATCHSIZE = 16\nGROUP_BATCH_SIZE = 4000\nSEED = 321\nLR = 0.001\nSPLITS = 5\n\ndef seed_everything(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    tf.random.set_seed(seed)","c5ebd4e9":"def read_data():\n    train_data = pd.read_csv('..\/input\/data-without-drift\/train_clean.csv')\n    clean_train = pd.read_csv('..\/input\/liverpool-noiseremoval\/clean_train_signal.csv')\n    train_oofs = pd.read_csv('..\/input\/liverpool-lgbm-oofs\/oofs_train.csv')\n    test_data = pd.read_csv('..\/input\/data-without-drift\/test_clean.csv')\n    clean_test = pd.read_csv('..\/input\/liverpool-noiseremoval\/clean_test_signal.csv')\n    test_oofs = pd.read_csv('..\/input\/liverpool-lgbm-oofs\/oofs_test.csv')\n    train = pd.DataFrame()\n    train['signal']=clean_train['signal'].values\n    train['open_channels']=train_data['open_channels'].values \n    train['oofs']=train_oofs['oofs'].values\n    test = pd.DataFrame()\n    test['signal'] = clean_test['signal'].values\n    test['oofs'] = test_oofs['oofs'].values\n    sub  = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv', dtype={'time': np.float32})\n\n    return train, test, sub\n\n# create batches of 4000 observations\ndef batching(df, batch_size):\n    df['group'] = df.groupby(df.index\/\/batch_size, sort=False)['signal'].agg(['ngroup']).values\n    df['group'] = df['group'].astype(np.uint16)\n    return df\n\n# normalize the data (standard scaler). We can also try other scalers for a better score!\ndef normalize(train, test):\n    train_input_mean = train.signal.mean()\n    train_input_sigma = train.signal.std()\n    train['signal'] = (train.signal - train_input_mean) \/ train_input_sigma\n    #train_s['signal'] = (train_s.signal - train_input_mean) \/ train_input_sigma\n    test['signal'] = (test.signal - train_input_mean) \/ train_input_sigma\n    #test_b['signal'] = (test_b.signal - train_input_mean) \/ train_input_sigma\n    return train, test\n\n# get lead and lags features\ndef lag_with_pct_change(df, windows):\n    for window in windows:    \n        df['signal_shift_pos_' + str(window)] = df.groupby('group')['signal'].shift(window).fillna(0)\n        df['signal_shift_neg_' + str(window)] = df.groupby('group')['signal'].shift(-1 * window).fillna(0)\n    return df\n\n# main module to run feature engineering. Here you may want to try and add other features and check if your score imporves :).\ndef run_feat_engineering(df, batch_size):\n    # create batches\n    df = batching(df, batch_size = batch_size)\n    # create leads and lags (1, 2, 3 making them 6 features)\n    df = lag_with_pct_change(df, [1, 2, 3])\n    # create signal ** 2 (this is the new feature)\n    df['signal_2'] = df['signal'] ** 2\n    return df\n\n# fillna with the mean and select features for training\ndef feature_selection(train, test):\n    features = [col for col in train.columns if col not in ['index', 'group', 'open_channels', 'time']]\n    train = train.replace([np.inf, -np.inf], np.nan)\n    #train_s = train_s.replace([np.inf, -np.inf], np.nan)\n    test = test.replace([np.inf, -np.inf], np.nan)\n    #test_b = test_b.replace([np.inf, -np.inf], np.nan)\n    for feature in features:\n        feature_mean = pd.concat([train[feature], test[feature]], axis = 0).mean()\n        train[feature] = train[feature].fillna(feature_mean)\n        #train_s[feature] = train_s[feature].fillna(feature_mean)\n        test[feature] = test[feature].fillna(feature_mean)\n        #test_b[feature] = test_b[feature].fillna(feature_mean)\n    return train, test, features\n\n# model function (very important, you can try different arquitectures to get a better score. I believe that top public leaderboard is a 1D Conv + RNN style)\ndef Classifier(shape_):\n    \n    def cbr(x, out_layer, kernel, stride, dilation):\n        x = Conv1D(out_layer, kernel_size=kernel, dilation_rate=dilation, strides=stride, padding=\"same\")(x)\n        x = BatchNormalization()(x)\n        x = Activation(\"relu\")(x)\n        return x\n    \n    def wave_block(x, filters, kernel_size, n):\n        dilation_rates = [2**i for i in range(n)]\n        x = Conv1D(filters = filters,\n                   kernel_size = 1,\n                   padding = 'same')(x)\n        res_x = x\n        for dilation_rate in dilation_rates:\n            tanh_out = Conv1D(filters = filters,\n                              kernel_size = kernel_size,\n                              padding = 'same', \n                              activation = 'tanh', \n                              dilation_rate = dilation_rate)(x)\n            sigm_out = Conv1D(filters = filters,\n                              kernel_size = kernel_size,\n                              padding = 'same',\n                              activation = 'sigmoid', \n                              dilation_rate = dilation_rate)(x)\n            x = Multiply()([tanh_out, sigm_out])\n            x = Conv1D(filters = filters,\n                       kernel_size = 1,\n                       padding = 'same')(x)\n            res_x = Add()([res_x, x])\n        return res_x\n    \n    inp = Input(shape = (shape_))\n    x = cbr(inp, 64, 7, 1, 1)\n    x = BatchNormalization()(x)\n    x = wave_block(x, 16, 3, 12)\n    x = BatchNormalization()(x)\n    x = wave_block(x, 32, 3, 8)\n    x = BatchNormalization()(x)\n    x = wave_block(x, 64, 3, 4)\n    x = BatchNormalization()(x)\n    x = wave_block(x, 128, 3, 1)\n    x = cbr(x, 32, 7, 1, 1)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    out = Dense(11, activation = 'softmax', name = 'out')(x)\n    \n    model = models.Model(inputs = inp, outputs = out)\n    \n    opt = Adam(lr = LR)\n    opt = tfa.optimizers.SWA(opt)\n    model.compile(loss = losses.CategoricalCrossentropy(), optimizer = opt, metrics = ['accuracy'])\n    return model\n\n# function that decrease the learning as epochs increase (i also change this part of the code)\ndef lr_schedule(epoch):\n    if epoch < 30:\n        lr = LR\n    elif epoch < 40:\n        lr = LR \/ 3\n    elif epoch < 50:\n        lr = LR \/ 5\n    elif epoch < 60:\n        lr = LR \/ 7\n    elif epoch < 70:\n        lr = LR \/ 9\n    elif epoch < 80:\n        lr = LR \/ 11\n    elif epoch < 90:\n        lr = LR \/ 13\n    else:\n        lr = LR \/ 100\n    return lr\n\n# class to get macro f1 score. This is not entirely necessary but it's fun to check f1 score of each epoch (be carefull, if you use this function early stopping callback will not work)\nclass MacroF1(Callback):\n    def __init__(self, model, inputs, targets):\n        self.model = model\n        self.inputs = inputs\n        self.targets = np.argmax(targets, axis = 2).reshape(-1)\n        \n    def on_epoch_end(self, epoch, logs):\n        pred = np.argmax(self.model.predict(self.inputs), axis = 2).reshape(-1)\n        score = f1_score(self.targets, pred, average = 'macro')\n        #f1_new = (score[-5]+score[-4]+score[-3]+score[-2]+score[-1])\/5.0\n        print(f'F1 Macro Score: {score:.5f}')\n\n# main function to perfrom groupkfold cross validation (we have 1000 vectores of 4000 rows and 8 features (columns)). Going to make 5 groups with this subgroups.\ndef run_cv_model_by_batch(train, test, splits, batch_col, feats, sample_submission, nn_epochs, nn_batch_size):\n    \n    seed_everything(SEED)\n    K.clear_session()\n    config = tf.compat.v1.ConfigProto(intra_op_parallelism_threads=1,inter_op_parallelism_threads=1)\n    sess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph(), config=config)\n    tf.compat.v1.keras.backend.set_session(sess)\n    #train = pd.concat((train_o, train_s), ignore_index=True)\n    #print(len(train))\n    oof_ = np.zeros((len(train), 11)) # build out of folds matrix with 11 columns, they represent our target variables classes (from 0 to 10)\n    preds_ = np.zeros((len(test), 11))\n    #preds_b_ = np.zeros((len(test_b), 11))\n    target = ['open_channels']\n    group = train['group']\n    kf = GroupKFold(n_splits=5)\n    splits = [x for x in kf.split(train, train[target], group)]\n\n    new_splits = []\n    for sp in splits:\n        new_split = []\n        new_split.append(np.unique(group[sp[0]]))\n        new_split.append(np.unique(group[sp[1]]))\n        new_split.append(sp[1])    \n        new_splits.append(new_split)\n    # pivot target columns to transform the net to a multiclass classification estructure (you can also leave it in 1 vector with sparsecategoricalcrossentropy loss function)\n    tr = pd.concat([pd.get_dummies(train.open_channels), train[['group']]], axis=1)\n\n    tr.columns = ['target_'+str(i) for i in range(11)] + ['group']\n    target_cols = ['target_'+str(i) for i in range(11)]\n    train_tr = np.array(list(tr.groupby('group').apply(lambda x: x[target_cols].values))).astype(np.float32)\n    train = np.array(list(train.groupby('group').apply(lambda x: x[feats].values)))\n    test = np.array(list(test.groupby('group').apply(lambda x: x[feats].values)))\n    #test_b = np.array(list(test_b.groupby('group').apply(lambda x: x[feats].values)))\n\n    for n_fold, (tr_idx, val_idx, val_orig_idx) in enumerate(new_splits[0:], start=0):\n        train_x, train_y = train[tr_idx], train_tr[tr_idx]\n        valid_x, valid_y = train[val_idx], train_tr[val_idx]\n        print(f'Our training dataset shape is {train_x.shape}')\n        print(f'Our validation dataset shape is {valid_x.shape}')\n\n        gc.collect()\n        shape_ = (None, train_x.shape[2]) # input is going to be the number of feature we are using (dimension 2 of 0, 1, 2)\n        model = Classifier(shape_)\n        # using our lr_schedule function\n        cb_lr_schedule = LearningRateScheduler(lr_schedule)\n        model.fit(train_x,train_y,\n                  epochs = nn_epochs,\n                  callbacks = [cb_lr_schedule, MacroF1(model, valid_x, valid_y)], # adding custom evaluation metric for each epoch\n                  batch_size = nn_batch_size,verbose = 2,\n                  validation_data = (valid_x,valid_y))\n        preds_f = model.predict(valid_x)\n        f1_score_ = f1_score(np.argmax(valid_y, axis=2).reshape(-1),  np.argmax(preds_f, axis=2).reshape(-1), average = 'macro') # need to get the class with the biggest probability\n        #f1_6_10_ = (f1_score_[-5]+f1_score_[-4]+f1_score_[-3]+f1_score_[-2]+f1_score_[-1])\/5.0\n        print(f'Training fold {n_fold + 1} completed. macro f1 score : {f1_score_ :1.5f}')\n        preds_f = preds_f.reshape(-1, preds_f.shape[-1])\n        oof_[val_orig_idx,:] += preds_f\n        te_preds = model.predict(test)\n        te_preds = te_preds.reshape(-1, te_preds.shape[-1])           \n        preds_ += te_preds \/ SPLITS\n        #te_preds_b = model.predict(test_b)\n        #te_preds_b = te_preds_b.reshape(-1, te_preds_b.shape[-1])           \n        #preds_b_ += te_preds_b \/ SPLITS\n        \n    # calculate the oof macro f1_score\n    f1_score_ = f1_score(np.argmax(train_tr, axis = 2).reshape(-1),  np.argmax(oof_, axis = 1), average = 'macro') # axis 2 for the 3 Dimension array and axis 1 for the 2 Domension Array (extracting the best class)\n    #f1_6_10_ = (f1_score_[-5]+f1_score_[-4]+f1_score_[-3]+f1_score_[-2]+f1_score_[-1])\/5.0\n    print(f'Training completed. oof macro f1 score: {f1_score_:1.5f}')\n    #pre_train = pd.DataFrame(oof_)\n    #pre_test = pd.DataFrame(preds_)\n    \n    #pre_train.to_csv('train_oofs.csv', index=False, float_format='%.4f')\n    #pre_test.to_csv('test_oofs.csv', index=False, float_format='%.4f')\n    sample_submission['open_channels'] = np.argmax(preds_, axis = 1).astype(int)\n    sample_submission.to_csv('submission_wavenet.csv', index=False, float_format='%.4f')\n    #sample_submission_b['open_channels'] = np.argmax(preds_b_, axis = 1).astype(int)\n    #sample_submission_b.to_csv('submission_wavenet_4_9_b.csv', index=False, float_format='%.4f')\n    \n# this function run our entire program\ndef run_everything():\n    \n    print('Reading Data Started...')\n    train, test, sample_submission = read_data()\n    train, test = normalize(train, test)\n    print('Reading and Normalizing Data Completed')\n        \n    print('Creating Features')\n    print('Feature Engineering Started...')\n    train = run_feat_engineering(train, batch_size = GROUP_BATCH_SIZE)\n    #train_s = run_feat_engineering(train_s, batch_size = GROUP_BATCH_SIZE)\n    test = run_feat_engineering(test, batch_size = GROUP_BATCH_SIZE)\n    #test_b = run_feat_engineering(test_b, batch_size = GROUP_BATCH_SIZE)\n    train, test, features = feature_selection(train, test)\n    print('Feature Engineering Completed...')\n        \n   \n    print(f'Training Wavenet model with {SPLITS} folds of GroupKFold Started...')\n    run_cv_model_by_batch(train, test, SPLITS, 'group', features, sample_submission, EPOCHS, NNBATCHSIZE)\n    print('Training completed...')\n        \nrun_everything()","1b062292":"train_or = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv')\nsub = pd.read_csv('submission_wavenet.csv')\nsub[700000:800000]['open_channels']=sub[700000:800000]['open_channels'].values + train_or[4000000:4100000]['open_channels'].values\nsub.to_csv('final_submission_wavenet.csv', index=False, float_format='%.4f')","0cfe034a":"This is a streamlined solution without any data augmentation. The model has two layers, which build upon each other and one layer uses CPU platform while the other uses GPU platform. We decided that the easiest will be to split this into three kernels, which will be three steps. Please run these three kernels in sequence one after the other as described below.\n \n\n(1) Liverppol_LGBM_oofs\n\n(1.a) This kernal has to be run first.\n\n(1.b) This kernal uses competition data and the public dataset Data Without Drift as input.\n\n(1.c) This kernal uses an LGBM based model to make baseline predictions. \n\n(1.d) This kernal runs on a CPU platform.\n\n(1.e) The runtime for this kernal is approximately 1.7 hrs (it took us 6133.8 sec).\n\n(2) Liverpool_NoiseRemoval\n\n(2.a) This kernal has to be run second.\n\n(2.b) This kernal takes output from the previous kernal as input.\n\n(2.c) This kernal removes 50Hz noise from the signal and we use that clean signal in the next step.\n\n(2.d) This kernal runs on a CPU platform.\n\n(2.d) This runtime for this kernal is approximately 1.2 min (it took us 72.9 sec).\n\n(3) Liverpool_Wavenet\n\n(3.a) This last kernal outputs two csv files, the one named final_submission_wavenet.csv can be submitted to the competition to get a score close to our final private score.\n\n(3.b) This kernal uses a Wavenet based model, which is trained on clean signal\nand makes the final predictions.\n\n(3.c) This kernal runs on a GPU platform.\n\n(3.d) The runtime for this kernal is approximately 2.5 hrs (it took us 8908.9 sec)\n\nDoing this iteratively, i.e generate better predictions and then generate cleaner \nsignal and then use that cleaner signal to make even better prediction captures \nthe basic strategy of our work."}}