{"cell_type":{"0004566a":"code","878140fc":"code","bce37375":"code","6ef62426":"code","ac9cca8e":"code","20646017":"code","c56f335e":"code","a9b737d7":"code","272531f9":"code","fc452c18":"code","8b16afc2":"code","234fdac3":"code","2e8fcc10":"code","dd288418":"code","fb4b2a17":"code","0f8a8c75":"code","283d713b":"code","4f3775ca":"code","4f9ce0fe":"code","20b56e9e":"code","ee00bf26":"code","1d7b1136":"code","e6418fb8":"code","02cf640c":"code","e1a17aa8":"code","e0334942":"code","7b92d1b3":"code","2673c9e9":"code","bb462c61":"code","787b5e76":"code","681d5e85":"code","bc836fef":"code","76f72c55":"code","f87246ee":"code","b51f7278":"code","b182e8b6":"code","9c24736b":"code","39a6d29b":"code","3d211f01":"code","5ead9147":"code","6fc43891":"code","5274db1d":"code","050c3c45":"code","8ee7ba50":"code","012c7fa2":"code","89a148bd":"code","8d6bb710":"code","413d609b":"code","9f9c3d00":"code","b8bfd56b":"code","9516e1ef":"code","8ed3a25f":"code","a9a789ce":"code","4a917476":"code","33916c7d":"code","e9344253":"code","f521c2ce":"code","f42bc9cf":"code","96a73aaf":"code","0c356610":"code","64455d01":"code","7f79f6a8":"code","53cb54fa":"code","8f0f8310":"code","991c70d0":"code","a45dd948":"code","506dbc33":"markdown","2cbd860d":"markdown","3ef34794":"markdown","3bbf6949":"markdown","af89b495":"markdown","9edbab2e":"markdown","e3c6586a":"markdown","8b7681d1":"markdown","35b6f877":"markdown","58beaefb":"markdown","04c71f52":"markdown","3134dcc3":"markdown","f4c481b3":"markdown","14f3f958":"markdown","6e6a4200":"markdown","85aaf6ad":"markdown","a75256e8":"markdown","d2d11fac":"markdown","07ac114d":"markdown","9d509d91":"markdown","b6e335c1":"markdown","b3aea496":"markdown","409f3cd3":"markdown","f64587bd":"markdown","261c2313":"markdown","7dd0f7d1":"markdown","718d9a58":"markdown","3f9455f4":"markdown","6e24b749":"markdown","9aa843b4":"markdown","e83ec8e1":"markdown","61810c53":"markdown","b16f6812":"markdown","bb0fd020":"markdown","329c33e0":"markdown","ccce009a":"markdown","5cda388d":"markdown","ceb20c21":"markdown","9d62c4e8":"markdown","3008de5d":"markdown","5888c4a9":"markdown","c8c27eec":"markdown","67cf5905":"markdown","c4caad80":"markdown","d23e4f42":"markdown","283e3f41":"markdown"},"source":{"0004566a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","878140fc":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier","bce37375":"df = pd.read_csv('..\/input\/zomato-bangalore-restaurants\/zomato.csv')","6ef62426":"df.head()","ac9cca8e":"df.shape","20646017":"df.columns","c56f335e":"df.info()","a9b737d7":"df.describe()","272531f9":"df['approx_cost(for two people)'].unique()","fc452c18":"df['approx_cost(for two people)'] = (df['approx_cost(for two people)'].str.replace(',','')).astype('float64')","8b16afc2":"df.rate.unique()","234fdac3":"df['rate'] = df['rate'].replace('NEW',np.nan)\ndf['rate'] = df['rate'].replace('-',np.nan)\ndf['rate'] = (df['rate'].str.replace('\/5','')).astype('float64')","2e8fcc10":"df.describe()","dd288418":"len(df[df.duplicated()])","fb4b2a17":"df.isnull().sum().sort_values(ascending = False)","0f8a8c75":"(df.isnull().sum() \/ df.shape[0]).sort_values(ascending = False)","283d713b":"df.drop('dish_liked',axis = 1, inplace = True)","4f3775ca":"df.dropna(subset = ['cuisines', 'rest_type', 'approx_cost(for two people)'],inplace = True)","4f9ce0fe":"df.rate.fillna(df.rate.median(), inplace = True)","20b56e9e":"(df.isnull().sum() \/ df.shape[0]).sort_values(ascending = False)","ee00bf26":"to_remove = ['url','address','name','phone','reviews_list','menu_item']\n\ndf.drop(to_remove, axis = 1, inplace = True)","1d7b1136":"(df.isnull().sum() \/ df.shape[0]).sort_values(ascending = False)","e6418fb8":"df.info()","02cf640c":"df['numoftype'] = df.rest_type.str.count(',') + 1\ndf['numofcuisines'] = df.cuisines.str.count(',') + 1","e1a17aa8":"df['numoftype'].fillna(1,inplace = True)\ndf['numofcuisines'].fillna(1,inplace = True)","e0334942":"tresh = df.rate.median()","7b92d1b3":"# Build the target from rate\n# we have tried to use 3 as our treshold but the target output is imbalanced so we use 3.5\/3.6 as our treshold\ndf['success'] = 0\ndf.loc[df['rate'] >= tresh, 'success'] = 1","2673c9e9":"df.head()","bb462c61":"to_encode = ['online_order','book_table','listed_in(type)','listed_in(city)']\nencoder = LabelEncoder()\ndf[to_encode] = df[to_encode].apply(encoder.fit_transform)","787b5e76":"df.head()","681d5e85":"df.corr()['success'].abs().sort_values(ascending = False)","bc836fef":"feature = ['book_table', 'approx_cost(for two people)', 'votes', 'numofcuisines','numoftype']","76f72c55":"x = df[feature]\ny = df['success']","f87246ee":"x.isnull().sum()","b51f7278":"scaler = MinMaxScaler()\nx = scaler.fit_transform(x)","b182e8b6":"x_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.3, random_state = 42)","9c24736b":"test_score = []\nfor i in range(10):\n    model = KNeighborsClassifier(n_neighbors = i+1)\n    model.fit(x_train,y_train)\n    test_score.append(model.score(x_test,y_test))\nplt.plot([i for i in range(1,11)], test_score)","39a6d29b":"model = KNeighborsClassifier(n_neighbors = 1)\nmodel.fit(x_train,y_train)\nmodel.score(x_test,y_test)","3d211f01":"y_pred = model.predict(x_test)","5ead9147":"cm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm, annot = True)","6fc43891":"print(classification_report(y_test,y_pred))","5274db1d":"model = RandomForestClassifier()\nmodel.fit(x_train,y_train)\nmodel.score(x_test,y_test)","050c3c45":"y_pred = model.predict(x_test)","8ee7ba50":"cm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm, annot = True)","012c7fa2":"print(classification_report(y_test,y_pred))","89a148bd":"model.feature_importances_","8d6bb710":"sns.set(rc={'figure.figsize':(10,5)})\nsns.barplot(x = ['book_table', 'approx_cost(for two people)', 'votes', 'numofcuisines','numoftype'], y =model.feature_importances_)","413d609b":"#df[to_encode] = df[to_encode].apply(encoder.inverse_transform)","9f9c3d00":"df['rate'].plot(kind='hist')\nplt.title('Rate Distribution')\nplt.show","b8bfd56b":"df.groupby(['rate'])[['votes']].mean().plot(kind='barh', figsize=(20,10))\nplt.title('Rates of Restaurant based on Votes')\nplt.xlabel('Votes')\nplt.ylabel('Rates')\nplt.show()","9516e1ef":"df.groupby(['rate'])[['numoftype']].mean().plot(kind='barh', figsize=(20,10))\nplt.title('Rates of Restaurant based on Types')\nplt.xlabel('Type')\nplt.ylabel('Rates')\nplt.show()","8ed3a25f":"df.groupby(['rate'])[['numofcuisines']].mean().plot(kind='barh', figsize=(20,10))\nplt.title('Rates of Restaurant based on Number of Cuisines')\nplt.xlabel('Number of Cuisines')\nplt.ylabel('Rates')\nplt.show()","a9a789ce":"df.groupby(['listed_in(city)'])[['rate']].mean().plot(kind='bar', figsize=(20,10))\nplt.title('Rates of Restaurant based on Listed in CIties')\nplt.xlabel('Listed in City')\nplt.ylabel('Rates')\nplt.show()","4a917476":"df.groupby(['listed_in(type)'])[['rate']].mean().plot(kind='bar', figsize=(20,10))\n# plt.axvline(df['rate'].mean(), color = 'r')\nplt.title('Rates of Restaurant based on listed_in(types)')\nplt.xlabel('Listed_in(type)')\nplt.ylabel('Rates')\nplt.show()","33916c7d":"plt.hist(df['rate'].unique(), weights = df.groupby(['rate'])[['approx_cost(for two people)']].mean().values, bins = 10)\n# plt.axhline(df['approx_cost(for two people)'].mean(), color = 'r')\nplt.title('Rates of Restaurant based on Cost for two people')\nplt.xlabel('Rates')\nplt.ylabel('Cost')\nplt.show()","e9344253":"df.groupby(['online_order'])[['votes']].mean().plot(kind='barh', figsize=(10,5))\nplt.title('Votes based on Online Order Availability')\nplt.xlabel('Votes')\nplt.ylabel('Online Order')\nplt.show()","f521c2ce":"df.groupby(['book_table'])[['votes']].mean().plot(kind='barh', figsize=(10,5))\nplt.title('Votes based on Book Table Availability')\nplt.xlabel('Votes')\nplt.ylabel('Book Table Availability')\nplt.show()","f42bc9cf":"df.groupby(['numofcuisines'])[['votes']].mean().plot(kind='barh', figsize=(10,5))\nplt.title('Votes based on Number of Cuisines')\nplt.xlabel('Votes')\nplt.ylabel('Number of Cuisines')\nplt.show()","96a73aaf":"df.groupby(['numoftype'])[['votes']].mean().plot(kind='barh', figsize=(10,5))\nplt.title('Votes based on Number of Types')\nplt.xlabel('Votes')\nplt.ylabel('Type')\nplt.show()","0c356610":"plt.hist(x = df['approx_cost(for two people)'].unique(), weights = df.groupby(['approx_cost(for two people)'])[['votes']].mean().values, bins = 6)\nplt.title('Votes based on Price for Two People')\nplt.xlabel('Price')\nplt.ylabel('Votes')\nplt.show()","64455d01":"sns.countplot(df.book_table)","7f79f6a8":"df.book_table.value_counts(normalize = True)","53cb54fa":"sns.countplot(df.online_order)","8f0f8310":"df.online_order.value_counts(normalize = True)","991c70d0":"sns.set(rc={'figure.figsize':(20,9)})\nsns.countplot(y = df['listed_in(city)'])","a45dd948":"sns.set(rc={'figure.figsize':(11,6)})\nsns.countplot(df['listed_in(type)'])","506dbc33":"### Fit The Random Forest Model","2cbd860d":"## Feature Scaling","3ef34794":"#### By using Random Forest as our prediction model, we obtain the accuracy of 92%. To conclude about our prediction models, both KNN and Random Forest are a great algorithm to be used as prediction model, but in the end Random Forest Model is better in accuraccy than KNN Model","3bbf6949":"#### For determining whether a restaurant is a successful restaurant or not, we use the median of restaurant rates as our threshold. If a restaurant has rating more than the threshold, we will consider that restaurant is a successfull restaurant","af89b495":"#### It brings us to the 2nd question, which is 'What makes a restaurant obtain a huge amount of votes?'","9edbab2e":"### Predict Using KNN Model","e3c6586a":"## Data Cleaning","8b7681d1":"# Initial EDA","35b6f877":"# Final Dataset","58beaefb":"# Gaining Insights","04c71f52":"#### Now on, we obtained clean dataset from what we have already done before","3134dcc3":"## Predicting using Random Forest","f4c481b3":"#### Then, we can see that this dataset has column or data that we do not neet to use for analyzing this dataset and making a prediction using this dataset. That column or data are 'phone', 'url', 'address', 'name', 'reviews_list', and 'menu_item'. So we will just drop that data","14f3f958":"### Classification Report of KNN Model","6e6a4200":"#### Because our data has very diverse values, we need to normalize it to make sure we input a good data for our model","85aaf6ad":"#### By using KNN Model as our prediction model, we obtain the accuracy of 91%. So, this model is considered good to be used as prediction model in the future","a75256e8":"### Missing Data Handling","d2d11fac":"### Confusion Matrix of KNN Model","07ac114d":"# Prediction","9d509d91":"### Predict Using Random Forest Model","b6e335c1":"#### With the code above, we know that there is no duplicate data inside our dataset, so we do not need to do anything about it","b3aea496":"#### To start the Gaining Insights section, to make sure we get to the root of the source of a successfull restaurant seeing from the Rate we will start with the first Question which is 'What makes a restaurant has a good rating?'","409f3cd3":"### Classification Report of Random Forest Model","f64587bd":"#### Later on, the features that we will use for making prediction using our model are 'book_table', 'approx_cost(for two people)', 'votes', 'numberofcuisines', and 'numoftype'. We do not use data after 'numoftype' as we considered it to be too low. The correllation between 'success' and 'rate' are too high, so we do not use it as our feature as it will affect our prediction negatively","261c2313":"### Duplicate Data Handling","7dd0f7d1":"##### As we can see there is ',' on the approx_cost(for two people), it actually indicates thousand for the price. But we can not use that ',' for our data, so we will need to eliminate that ','","718d9a58":"### Feature Engineering","3f9455f4":"#### Conclusion:\n- A restaurant must be able to reserve a table because it can be seen from the graph plot above, it is evident that the ratings of restaurants that can book a table differ greatly from those who cannot\n- Although Online Ordering doesn't seem to have much difference, it's a step better for a restaurant to be ordered online because it can increase the number of votes\n- The type of restaurant is also not only 1, a restaurant must have more than 1 type because it appears that a restaurant that has more than 1 has more votes\n- Affordable prices means high votes, and high means less votes, therefore to build a considered successfull restaurant, one must built it with affordable prices to pay\n\n#### High Votes = High Rate\n##### so our main concern to be considered as a successfull restaurant are getting high number of votes ","6e24b749":"### Data Type Handling","9aa843b4":"# Load Dataset","e83ec8e1":"#### From the graphs above we can obtain a conclusion of what affect a huge amount of Votes are the Availability to Book Table, Number Types, and The Approx Cost for Two People","61810c53":"### Fit The KNN Model","b16f6812":"## Predicting using KNN","bb0fd020":"## Split Dataset ","329c33e0":"#### Before we can use this dataset, we need to do Data Preprocessing which include:\n1. Data Cleaning\n2. Data Manipulation","ccce009a":"# Data Preprocessing","5cda388d":"## Data Manipulation","ceb20c21":"### Confusion Matrix of Random Forest Model","9d62c4e8":"#### To make our dataset even better, we then manipulate our data","3008de5d":"#### As we see from the percentage of missing values, 'dish_liked' has more than 50% missing values which can effect our dataset badly. We need to drop that data from our dataset to make our Data better. 'rate' that has around 19% of missing values, we will just fill that missing values with the median of the restaurant's rating. For columns that have missing values below 1% we will just drop it","5888c4a9":"#### For the data that are considered as categorical type, we will encode it because when we want to analyze the data and making a prediction using this dataset. We can not use string data type to be used as a input of the model, so the data that has categorical value will be encoded.","c8c27eec":"##### Rate values shown above shows that the range of rating of each restaurant from 0-5, for example 4.1\/5 indicates the rating of a restaurant is 4.1 out of 5. But by using \/5 inside our data, it will make our data messy. To make our data more clean we need to eliminate that \/5 and leave the value before as the rating of a restaurant","67cf5905":"#### As we see from the graphs above, we can conclude that it is true that what affect Rate the most is Votes. We can see it from graphs other than relationship between Votes and Rate, the graph have no huge different from each of the Rate. Even though there is some that have a huge different but it do not tells us it has huge impact for the Rate","c4caad80":"### Check for the best K Values","d23e4f42":"## Feature Selection","283e3f41":"#### Now, this graph of feature importance show us that votes are so influential in getting good Rate, but we will still dig in to the data to see whether the feature importance graph is true or not"}}