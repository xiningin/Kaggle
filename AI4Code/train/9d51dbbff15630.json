{"cell_type":{"834a015f":"code","abe9f982":"code","d0a49d5d":"code","9b59c177":"code","eb922ccb":"code","2bd645b7":"code","c5d4ef05":"code","b28bd1ac":"code","9ed02f46":"code","3f53a528":"code","2911203e":"code","0f50b400":"code","180ef4d5":"code","420c74c3":"code","10c52245":"code","ec06b9e0":"code","81d38d81":"code","4863fc77":"code","cb97e8e7":"code","3b034eca":"code","afd2ee03":"code","e3ce4bfb":"code","45a1203c":"code","278809da":"code","ec863465":"code","11deadc4":"markdown","c1898388":"markdown","9ec09fe3":"markdown","98db40e0":"markdown","07b45cac":"markdown","f6689f28":"markdown"},"source":{"834a015f":"import numpy as np\nimport pandas as pd\nimport scipy\nimport sklearn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport string\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","abe9f982":"sms_data = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\")\n#sms_data.rename(columns={\"v1\":\"class\", \"v2\":\"sms\"}, inplace=True)\nsms_data.head()","d0a49d5d":"# Loading the data\n# drop empty columns\n## rename the columns\n\nsms_data = sms_data.iloc[:,:2]\nsms_data.rename(columns={\"v1\":\"class\", \"v2\":\"sms\"}, inplace=True)\nsms_data.head()","9b59c177":"sms_data.shape #(Cols, Rows)","eb922ccb":"sms_data['class'].value_counts()","2bd645b7":"# convert all messages to lower case\nsms_data['sms'] = sms_data['sms'].str.lower()\nsms_data.head(16)","c5d4ef05":"# Countplot for Spam vs. Ham as imbalanced dataset\nplt.figure(figsize=(8,8))\nsns.countplot(x='class', data=sms_data)\nplt.title('Countplot Spam vs Ham SMS')\nplt.xlabel('Spam vs Ham SMS')\nplt.ylabel('Count')","b28bd1ac":"sms_data_spam = sms_data[sms_data['class'] == \"spam\"]\nsms_data_ham  = sms_data[sms_data['class'] == \"ham\"]\n","9ed02f46":"sms_data_spam","3f53a528":"stopwords = set(STOPWORDS)\n\nwordcloud = WordCloud(\n                          background_color='white',\n                          stopwords=stopwords,\n                          #max_words=200,\n                          #max_font_size=80, \n                          random_state=42\n                         ).generate(str(sms_data_spam['sms']))\n\n#print(wordcloud)\nfig = plt.figure(1)\nplt.title(\"words in SPAM SMS\")\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()\n","2911203e":"stopwords = set(STOPWORDS)\n\nwordcloud = WordCloud(\n                          background_color='white',\n                          stopwords=stopwords,\n                          #max_words=200,\n                          #max_font_size=80, \n                          #width=1500,\n                          #height=1500,\n                          random_state=42\n                         ).generate(str(sms_data_ham['sms']))\n\n#print(wordcloud)\nfig = plt.figure(1)\nplt.title(\"words in Normal (HAM) SMS\")\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","0f50b400":"keywords = ['click', 'offer', 'winner', 'buy', 'free',\n            'cash', 'urgent', 'money','password',\n            'winner'] \n\n\nfor key in keywords:\n    # Note that we add spaces around the key so that we're getting the word,\n    # not just pattern matching.\n    sms_data[str(key)] = sms_data.sms.str.contains(\n        ' ' + str(key) + ' ',\n        case=False\n    )","180ef4d5":"sms_data.tail(10)","420c74c3":"sms_data.corr()","10c52245":"# cmap=\"Reds\" to control the color in seaborn heatmaps \nsns.heatmap(sms_data.corr(), cmap=\"Reds\")","ec06b9e0":"sms_data['class']=sms_data['class'].map({'ham':0 , 'spam':1})","81d38d81":"x=sms_data['sms']\ny=sms_data['class']","4863fc77":"from sklearn.model_selection import train_test_split\n\n#split dataset to 80% training, 20% testing\nX_train, X_test, y_train, y_test = train_test_split(x, y,test_size=0.2, random_state=5)\n\nprint(\"(X_train), (y_train) \", X_train.shape, y_train.shape)\nprint(\"(X_test), (y_test) \", X_test.shape,  y_test.shape)","cb97e8e7":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\ntrain_vectors = vectorizer.fit_transform(X_train)\ntest_vectors = vectorizer.transform(X_test)\nprint(train_vectors.shape, test_vectors.shape)","3b034eca":"from sklearn.naive_bayes import MultinomialNB\nfrom  sklearn.metrics  import accuracy_score\nclf=MultinomialNB().fit(train_vectors,y_train)","afd2ee03":"def classify_sms(text):\n    text = vectorizer.transform(text)\n    predicted_sms = clf.predict(text)\n    if predicted_sms==0:\n        print(\"Not Spam (HAM)\")\n    else:\n        print(\"SPAM\")\n        ","e3ce4bfb":"#call classify_sms function passing SMS message as parameter \nmessage1=[\"WINNER!! As a valued network customer you have been selected to receivea \u0622\u00a3900 prize reward! To claim call 09061701461. Claim code KL341. Valid 12 hours only.\"]\nclassify_sms(message1)","45a1203c":"message2=[\"FREE entry into our \u0622\u00a3250 weekly comp just send the word WIN to 80086 NOW. 18 T&C www.txttowin.co.uk\"]\nclassify_sms(message2)","278809da":"message3=[\"I see the letter B on my car\"]\nclassify_sms(message3)","ec863465":"Please consider upvoting if you find it useful to you.\n\nThanks.","11deadc4":"# Build Training Model. SKLearn.","c1898388":"# SMS Spam Collection Data Set\n\n**Classify SMS SPAM-HAM**\n\n**Associated Tasks:** Classification, Clustering.\n\n**Data Set Information:**\nA collection of 425 SMS spam messages was manually extracted from the Grumbletext Web site. The collection is composed by just one text file, where each line has the correct class followed by the raw message. This is a UK forum in which cell phone users make public claims about SMS spam messages.\n\n**Label:**\n\n**spam**: message is spam\n\n**ham**: message is nomral","9ec09fe3":"# Data Visualization","98db40e0":"# Visualizing Text Data Using a Word Cloud","07b45cac":"> convert all messages to lower case","f6689f28":"# EDA"}}