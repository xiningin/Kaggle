{"cell_type":{"6b0f121d":"code","8e1da493":"code","e994c791":"code","110681fa":"code","9ec2d0ab":"code","a23a77dc":"code","236c70a0":"code","6b91f45e":"code","3f09ffef":"markdown","d4cfd91a":"markdown","fd68c2af":"markdown","30d3a8f1":"markdown","fdf5f691":"markdown","700554c8":"markdown","a5bbde1a":"markdown","ea057dcf":"markdown"},"source":{"6b0f121d":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport sqlite3\nimport seaborn as sns\n\n# Set plotting style\nplt.style.use('seaborn-white')\n\n# Metadata saved to output plots\nMETADATA = {\n    \"Contributor\": \"Alexander Gude\",\n    \"Rights\": \"CC-BY-SA 4.0\"\n}\n\ncolors = plt.rcParams['axes.prop_cycle'].by_key()['color']\nblue_line_color = colors[0]\norange_line_color = colors[1]\ngreen_line_color = colors[2]\n\nSTART_YEAR = 2019\nLAST_YEAR = 2020\n\nDATE_COL = \"collision_date\"\nCRASH_COL = \"crashes\"\nFACTOR_COL = \"vehicle_make\"\n\nMAKE_1 = \"ford\"\nMAKE_2 = \"toyota\"\n\n# Date conversion function\ndef date_columns(query):\n    \"\"\"If a date column is included in the query, parse it as a date in the\n    dataframe.\"\"\"\n    dates = []\n    fields = [\"collision_date\", \"process_date\"]\n    if '*' in query:\n        dates = fields\n    else:\n        for date in fields:\n            if date in query:\n                dates.append(date)\n\n        if not dates:\n            dates = None\n\n    return dates\n\ndef run_query(query, sql_file=\"..\/input\/california-traffic-collision-data-from-switrs\/switrs.sqlite\"):\n    \"\"\" Read sqlite query results into a pandas DataFrame. \"\"\"\n    with sqlite3.connect(sql_file) as con:\n        # Construct a Dataframe from the results\n        df = pd.read_sql_query(\n            query,\n            con,\n            parse_dates = date_columns(query),\n        )\n\n        return df\n    \n    # We should be able to just set rcParams, expect Jupyter has a bug:\n# https:\/\/github.com\/jupyter\/notebook\/issues\/3385\n#\n# So we have to call this function every time we want to plot.\n\ndef setup_plot(title=None, xlabel=None, ylabel=None):\n    \"\"\"Set up a simple, single pane plot with custom configuration.\n    \n    Args:\n        title (str, optional): The title of the plot.\n        xlabel (str, optional): The xlabel of the plot.\n        ylabel (str, optional): The ylabel of the plot.\n        \n    Returns:\n        (fig, ax): A Matplotlib figure and axis object.\n        \n    \"\"\"\n    # Plot Size\n    plt.rcParams[\"figure.figsize\"] = (12, 7)  # (Width, height)\n    \n    # Text Size\n    SMALL = 12\n    MEDIUM = 16\n    LARGE = 20\n    HUGE = 28\n    plt.rcParams[\"axes.titlesize\"] = HUGE\n    plt.rcParams[\"figure.titlesize\"] = HUGE\n    plt.rcParams[\"axes.labelsize\"] = LARGE\n    plt.rcParams[\"legend.fontsize\"] = LARGE\n    plt.rcParams[\"xtick.labelsize\"] = MEDIUM\n    plt.rcParams[\"ytick.labelsize\"] = MEDIUM\n    plt.rcParams[\"font.size\"] = SMALL\n    \n    # Legend\n    plt.rcParams[\"legend.frameon\"] = True\n    plt.rcParams[\"legend.framealpha\"] = 1\n    plt.rcParams[\"legend.facecolor\"] = \"white\"\n    plt.rcParams[\"legend.edgecolor\"] = \"black\"\n    \n    # Figure output\n    plt.rcParams[\"savefig.dpi\"] = 300\n    \n    # Make the plol\n    fig, ax = plt.subplots()\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    \n    # Make the title and label area opaque instead of transparent\n    fig.patch.set_facecolor(ax.get_facecolor())\n    \n    return fig, ax\n\ndef normalize_dataframe(df, factor_col=FACTOR_COL, end_date='2019-07-01'):\n    \"\"\"Normalize the dataframe by setting the mean to 1 over the first few months.\"\"\"\n    ford_mean = df[(df[FACTOR_COL]=='ford') & (df.index < end_date)].mean()\n    toyota_mean = df[(df[FACTOR_COL]=='toyota') & (df.index < end_date)].mean()\n    \n    df_normed = df.copy(deep=True)\n    df_normed.loc[df[factor_col]=='ford', \"total\"] \/= ford_mean[0]\n    df_normed.loc[df[FACTOR_COL]=='toyota', \"total\"] \/= toyota_mean[0]\n    \n    return df_normed\n\ndef make_ford_vs_toyota_plot(df, fig, ax, toyota_label_xy, ford_label_xy, stay_at_home_y, norm_label_y=None, y_lim=None, factor_col=FACTOR_COL,):\n\n    sns.lineplot(data=df, x=\"collision_date\", y=\"total\", hue=factor_col, drawstyle=\"steps-post\", linewidth=2)\n\n    # Add labels instead of legend\n    ax.get_legend().remove()\n    ax.text(x=pd.Timestamp(toyota_label_xy[0]), y=toyota_label_xy[1], s=\"Toyota\", color=orange_line_color, fontsize=30)\n    ax.text(x=pd.Timestamp(ford_label_xy[0]), y=ford_label_xy[1], s=\"Ford\", color=blue_line_color, fontsize=30)\n\n    # Add Stay at home order\n    ax.axvline(x=pd.Timestamp(\"2020-03-19\"), color=\"red\", linewidth=2, zorder=1, label=\"Stay at home order\")\n    ax.text(x=pd.Timestamp(\"2020-03-27\"), y=stay_at_home_y, s=\"Stay-at-home Order\", color=\"red\", fontsize=24)\n\n    \n    # Add mean line\n    if norm_label_y is not None:\n        ax.hlines(y=1, xmin=pd.Timestamp(\"2019-01-01\"), xmax=pd.Timestamp(\"2019-06-30\"), linewidth=3, color=green_line_color, zorder=2)\n        ax.text(x=pd.Timestamp(\"2018-12-14\"), y=norm_label_y, s=\"Mean normalized from\\nJanuary through June\", color=green_line_color, fontsize=24)\n\n    # Remove date label\n    ax.xaxis.label.set_visible(False)\n    \n    if y_lim is not None:\n        ax.set_ylim(*y_lim)\n\n    return fig, ax","8e1da493":"query = f\"\"\"\n    SELECT collision_date\n        , {FACTOR_COL}\n        , count(1) as total\n    FROM collisions AS c\n    LEFT JOIN parties as p\n    ON p.case_id = c.case_id\n    WHERE {DATE_COL} IS NOT NULL \n    AND {DATE_COL} BETWEEN '{START_YEAR}-01-01' AND '{LAST_YEAR}-11-30'\n    AND p.{FACTOR_COL} in ('{MAKE_1}', '{MAKE_2}')\n    GROUP BY 1, 2\n    ORDER BY 1, total DESC\n\"\"\"\n\ndf = run_query(query)\n\ndf_grouped = df.groupby([pd.Grouper(key=DATE_COL, freq='W-MON'), FACTOR_COL]).sum().reset_index(FACTOR_COL)\n\nfig, ax = setup_plot(\n    title=\"Collisions During the COVID-19 Pandemic\",\n    ylabel=\"Collisions \/ Week\",\n    xlabel=\"\",\n)\n\nfig, ax = make_ford_vs_toyota_plot(\n    df_grouped, fig, ax, \n    toyota_label_xy=(\"2019-03-01\", 2400), \n    ford_label_xy=(\"2019-03-01\", 1400), \n    stay_at_home_y=2000,\n)","e994c791":"query = f\"\"\"\n    SELECT collision_date\n        , {FACTOR_COL}\n        , count(1) as total\n    FROM collisions AS c\n    LEFT JOIN parties as p\n    ON p.case_id = c.case_id\n    WHERE {DATE_COL} IS NOT NULL \n    AND {DATE_COL} BETWEEN '{START_YEAR}-01-01' AND '{LAST_YEAR}-11-30'\n    AND p.{FACTOR_COL} in ('{MAKE_1}', '{MAKE_2}')\n    GROUP BY 1, 2\n    ORDER BY 1, total DESC\n\"\"\"\n\ndf = run_query(query)\ndf_normed = normalize_dataframe(df_grouped)","110681fa":"fig, ax = setup_plot(\n    title=\"Normalized Collisions Rates During the COVID-19 Pandemic\",\n    ylabel=\"Normalized Collision Rate\",\n    xlabel=\"\",\n)\n\nfig, ax = make_ford_vs_toyota_plot(\n    df_normed, fig, ax, \n    toyota_label_xy=(\"2020-08-01\", 0.27), \n    ford_label_xy=(\"2020-08-01\", 0.63), \n    stay_at_home_y=1,\n    norm_label_y=0.7,\n    y_lim=(0, 1.25),\n)","9ec2d0ab":"query4 = f\"\"\"\n    SELECT collision_date\n        , {FACTOR_COL}\n        , count(1) as total\n    FROM collisions AS c\n    LEFT JOIN parties as p\n    ON p.case_id = c.case_id\n    WHERE {DATE_COL} IS NOT NULL \n    AND {DATE_COL} BETWEEN '{START_YEAR}-01-01' AND '{LAST_YEAR}-11-30'\n    AND p.{FACTOR_COL} in ('{MAKE_1}', '{MAKE_2}')\n    AND statewide_vehicle_type = 'pickup or panel truck'\n    GROUP BY 1, 2\n    ORDER BY 1, total DESC\n\"\"\"\n\ndf4 = run_query(query4)\ndf4_grouped = df4.groupby([pd.Grouper(key=DATE_COL, freq='W-MON'), FACTOR_COL]).sum().reset_index(FACTOR_COL)\ndf4_normed = normalize_dataframe(df4_grouped)\n\nfig, ax = setup_plot(\n    title=\"Normalized Collisions Rates During the COVID-19 Pandemic\\nTrucks Only\",\n    ylabel=\"Normalized Collision Rate\",\n    xlabel=\"\",\n)\n\nfig, ax = make_ford_vs_toyota_plot(\n    df4_normed, fig, ax, \n    toyota_label_xy=(\"2020-08-01\", 0.35), \n    ford_label_xy=(\"2020-08-01\", 1.0), \n    stay_at_home_y=1.3,\n    norm_label_y=0.5,\n    y_lim=(0, 1.5),\n)","a23a77dc":"query2 = f\"\"\"\n    SELECT collision_date\n        , {FACTOR_COL}\n        , count(1) as total\n    FROM collisions AS c\n    LEFT JOIN parties as p\n    ON p.case_id = c.case_id\n    WHERE {DATE_COL} IS NOT NULL \n    AND {DATE_COL} BETWEEN '{START_YEAR}-01-01' AND '{LAST_YEAR}-11-30'\n    AND p.{FACTOR_COL} in ('{MAKE_1}', '{MAKE_2}')\n    AND county_location = 'contra costa'\n    GROUP BY 1, 2\n    ORDER BY 1, total DESC\n\"\"\"\n\ndf2 = run_query(query2)\ndf2_grouped = df2.groupby([pd.Grouper(key=DATE_COL, freq='W-MON'), FACTOR_COL]).sum().reset_index(FACTOR_COL)\ndf2_normed = normalize_dataframe(df2_grouped)\n\nfig, ax = setup_plot(\n    title=\"Normalized Collisions Rates During the COVID-19 Pandemic\\nContra Costa County\",\n    ylabel=\"Normalized Collision Rate\",\n    xlabel=\"\",\n)\n\nfig, ax = make_ford_vs_toyota_plot(\n    df2_normed, fig, ax, \n    toyota_label_xy=(\"2020-08-01\", 0.12), \n    ford_label_xy=(\"2020-08-01\", 1.0), \n    stay_at_home_y=1.3,\n    norm_label_y=0.5,\n    y_lim=(0, 1.5),\n)","236c70a0":"query3 = f\"\"\"\n    SELECT collision_date\n        , {FACTOR_COL}\n        , party_age\n    FROM collisions AS c\n    LEFT JOIN parties as p\n    ON p.case_id = c.case_id\n    WHERE {DATE_COL} IS NOT NULL \n    AND {DATE_COL} BETWEEN '{START_YEAR}-01-01' AND '{LAST_YEAR}-11-30'\n    AND p.{FACTOR_COL} in ('{MAKE_1}', '{MAKE_2}')\n\"\"\"\n\ndf3 = run_query(query3)\n\nfig, ax = setup_plot(\n    title=\"Age Distribution\",\n    ylabel=\"Probability\",\n    xlabel=\"\",\n)\n\nsns.histplot(data=df3, x=\"party_age\", hue=FACTOR_COL, stat=\"probability\", common_norm=False, multiple=\"layer\", binwidth=5, binrange=(16, 100), linewidth=2, zorder=1)\n\nplt.tick_params(labelleft = False)\n\nax.text(x=72, y=0.035, s=\"Toyota\", color=orange_line_color, fontsize=30)\nax.text(x=45, y=0.095, s=\"Ford\", color=blue_line_color, fontsize=30)\n\nax.get_legend().remove()\n\n# Remove date label\nax.xaxis.label.set_visible(False)","6b91f45e":"query5 = f\"\"\"\n    SELECT collision_date\n        , {FACTOR_COL}\n        , count(1) as total\n    FROM collisions AS c\n    LEFT JOIN parties as p\n    ON p.case_id = c.case_id\n    WHERE {DATE_COL} IS NOT NULL \n    AND {DATE_COL} BETWEEN '{START_YEAR}-01-01' AND '{LAST_YEAR}-11-30'\n    AND p.{FACTOR_COL} in ('{MAKE_1}', '{MAKE_2}')\n    AND p.party_age BETWEEN 30 AND 50\n    GROUP BY 1, 2\n    ORDER BY 1, total DESC\n\"\"\"\n\ndf5 = run_query(query5)\ndf5_grouped = df5.groupby([pd.Grouper(key=DATE_COL, freq='W-MON'), FACTOR_COL]).sum().reset_index(FACTOR_COL)\ndf5_normed = normalize_dataframe(df5_grouped)\n\nfig, ax = setup_plot(\n    title=\"Normalized Collisions Rates During the COVID-19 Pandemic\\nDrivers Aged 30 to 50\",\n    ylabel=\"Normalized Collision Rate\",\n    xlabel=\"\", \n)\n\nfig, ax = make_ford_vs_toyota_plot(\n    df5_normed, fig, ax, \n    toyota_label_xy=(\"2020-08-01\", 0.12), \n    ford_label_xy=(\"2020-08-01\", 1.0), \n    stay_at_home_y=1.3,\n    norm_label_y=0.55,\n    y_lim=(0, 1.5),\n)","3f09ffef":"### Putting It All Together\n\nA person's identity is made up of many traits: their age, their politics,\nwhere they live, what job they do, and yes, what car they drive. I looked at\nthree different traits\u2014vehicle type, location, and age\u2014and none of them\nexplain the entirety of the collision rate difference between Toyotas and\nFords after the COVID-19 stay-at-home order. My conclusion is that Ford\ndrivers are just different from Toyota drivers, in multiple ways, each of\nwhich contributes to the trend.","d4cfd91a":"It is the same pattern, but with a lot more noise due to the smaller\npopulation.\n\n### Age\n\nYoung drivers get in more accidents. Perhaps there is a strong age difference\ndriving the trend? There is an age difference, see:\n","fd68c2af":"## Interpretation\n\nThe normalized rates match up well through the [Christmas and New Year\nholidays][xmas], which is the two-week dip caused by people taking time off\nwork and hence not commuting. But right after, the series diverge:\n\n[xmas]: {% post_url 2016-12-02-switrs_crashes_by_date %}\/#day-by-day\n\n- Toyota collisions trend down a few weeks before the stay-at-home\n  order and drop off significantly the week before. Ford collisions stay\n  constant until the order. This suggests that Toyota drivers made a decision\n  to stay home by themselves while Ford drivers waited until the state\n  mandated it.\n- Toyota collisions drop much more the week of the order, likely indicating\n  that more Toyota drivers stayed at home when told to do so.\n- Ford collisions recovered towards their pre-pandemic level faster than\n  Toyota collisions, indicating that Ford drivers were quicker to get back on\n  the road when allowed to.\n\nTaken together, I think these observations suggest the difference is due to a\n[white-collar][white_collar]--[blue-collar][blue_collar] divide. White-collar\nworkers generally have more flexible work arrangements and their jobs are\neasier to do from home, whereas blue-collar workers have to travel to a job\nsite to perform their work. Blue-collar workers are more conservative than\nwhite-collar workers and more likely to buy American branded cars like\nFords. From the [New York Times][nyt_car]:\n\n[white_collar]: https:\/\/en.wikipedia.org\/wiki\/White-collar_worker\n[blue_collar]: https:\/\/en.wikipedia.org\/wiki\/Blue-collar_worker\n[nyt_car]: https:\/\/www.nytimes.com\/2005\/04\/01\/automobiles\/your-car-politics-on-wheels.html\n\n> The most left-leaning models with at least a dozen sightings in Mr.\n> MacMichael's project were the Honda Civic (80-20 left-leaning), Toyota\n> Corolla (78-19) and Toyota Camry (74-26). The list of most right-leaning\n> was led by another Toyota, but a midsize SUV, the Toyota 4Runner\n> (86-14), followed by the Ford Expedition (76-24) and Ford F-150 (75-25).\n\nInitially I thought this difference would be driven purely by the prevalence\nof Ford trucks, but as we shall see it is not just trucks versus cars.\n\n### Trucks\n\nIs it just that there are more Ford trucks? No.\n","30d3a8f1":"# SWITRS: Differences in Vehicle Collision Rates by Manufacturer During COVID-19\n\n_Original posted at [**SWITRS: Differences in Vehicle Collision Rates by Manufacturer During COVID-19**](https:\/\/alexgude.com\/blog\/switrs-ford-vs-toyota-during-covid-19\/)_\n\nAs I prepared to write my post on the [increase in traffic fatalities during\nCOVID-19][last_post], I made some exploratory plots. One plot made me stop and\nstare. Here it is:\n\n[last_post]: https:\/\/alexgude.com\/blog\/switrs-covid-19-lockdown-fatal-traffic-collisions\/","fdf5f691":"I start the data in 2019 because I need a sample from _before_ the pandemic\nchanged behavior, but I didn't want to go too far back because [collision\nrates vary drastically year-to-year][collision_rates]. I cut off the data in\nNovember because the reporting is not yet complete for December.\n\n[collision_rates]: https:\/\/alexgude.com\/blog\/switrs-crashes-by-date\/\/#crashes-per-week\n\n## Normalized Collision Rate\n\nThe number of collisions depends on many factors, primary among them is\n[vehicle miles traveled][vmt]. From the [Minnesota Department of Public Safety][mn_report]:\n\n> Volume of traffic, or vehicle miles traveled (VMT), is a predictor of\n> crash incidence. All other things being equal, as VMT increases, so will\n> traffic crashes. The relationship may not be simple, however; after a\n> point, increasing congestion leads to reduced speeds, changing the\n> proportion of crashes that occur at different severity levels.\n\n[vmt]: https:\/\/en.wikipedia.org\/wiki\/Units_of_transportation_measurement#Fatalities_by_VMT\n[mn_report]: https:\/\/dps.mn.gov\/divisions\/ots\/reports-statistics\/Documents\/2014-crash-facts.pdf\n\nTo help control for VMT, I normalize the mean number of collisions for each make of vehicle from January through June of 2019. This gives me a baseline to compare against. Here is the normalized plot:","700554c8":"This plot isn't perfect\u2014I will fix it below\u2014but even so it is striking.\nBefore the [stay-at-home order][order] the number of collisions involving\n[Toyotas][toyota] was much higher than those involving [Fords][ford]. After\nthe order, the trend flips. Fords have more collisions. I had to figure out\nwhy.\n\n[order]: https:\/\/en.wikipedia.org\/wiki\/California_government_response_to_the_COVID-19_pandemic\n[toyota]: https:\/\/en.wikipedia.org\/wiki\/Toyota\n[ford]: https:\/\/en.wikipedia.org\/wiki\/Ford_Motor_Company\n\n## Data\n\nI select all collisions between 2019 and November 30, 2020 that involve a\nToyota or a Ford, with this query:\n","a5bbde1a":"But that alone doesn't account for the pattern:","ea057dcf":"The same pattern holds, although both makes recover faster, with Fords\nreturning to pre-pandemic levels and Toyota getting to 80%, which is much\nhigher than the 50% Toyota reached when including non-trucks.\n\n### Location\n\nPerhaps Ford owners just live in areas with looser restrictions, like the\nCentral Valley? No. Here is data from Contra Costa County, part of the Bay\nArea:"}}