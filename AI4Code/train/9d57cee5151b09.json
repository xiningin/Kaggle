{"cell_type":{"d51f11d8":"code","2790ab17":"code","9fca337a":"code","d74ebc8a":"code","eea50609":"code","340473d4":"code","7595c942":"code","c23ab451":"code","7d2bf22f":"code","b6453b97":"code","7de3783f":"code","f79d8980":"code","a33216a7":"code","c9eb2562":"code","5923ac58":"code","f856a9d9":"code","0c825bcd":"code","5f8e9ba8":"code","a9030bd6":"code","4a3e99b4":"code","d2ef9083":"code","2b563d26":"code","c777314b":"code","8adef789":"code","2a537d58":"code","925bffcc":"code","0b773a15":"code","ad30972c":"code","36e6d7be":"code","7a8f0e4b":"code","4e10c8b2":"code","5d2e7312":"code","8d914b60":"code","1d270dda":"code","56914fae":"code","167353cd":"code","8a617691":"code","d9f53c6e":"code","c3c352b2":"code","fb80b537":"code","ba3dc048":"code","359a4595":"code","ae869b32":"code","e33338f2":"code","fa1d2ac4":"markdown","d794fe1c":"markdown","5e235dbf":"markdown","e7783b83":"markdown","8518fa9b":"markdown","bb23dbe8":"markdown","22109529":"markdown","edfe7f15":"markdown","5eeb3a8b":"markdown","9d95ddfa":"markdown","a007eaa6":"markdown","a34b9a6a":"markdown","44a3df1f":"markdown","19f60494":"markdown","b9dae645":"markdown","96aa87dd":"markdown","4e7a6aea":"markdown","6f42222c":"markdown","2ad02c89":"markdown"},"source":{"d51f11d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2790ab17":"df_terrorism = pd.read_csv('\/kaggle\/input\/gtd\/globalterrorismdb_0718dist.csv', encoding = \"ISO-8859-1\")\ndf_terrorism = df_terrorism[['eventid','iyear','imonth','iday','extended','country','country_txt','region', 'region_txt','success', 'suicide', 'attacktype1', 'attacktype1_txt', 'targtype1', 'targtype1_txt', 'gname', 'weaptype1', 'weaptype1_txt', 'crit1','latitude' ,'longitude']]\ndf_terrorism.head()","9fca337a":"!pip install scikit-posthocs","d74ebc8a":"!pip3 install factor_analyzer","eea50609":"df_freedom_index = pd.read_csv('\/kaggle\/input\/the-human-freedom-index\/hfi_cc_2019.csv')\n\ndf_freedom_index = df_freedom_index[['year','ISO_code','countries','region','hf_score','hf_rank','pf_ss_women','pf_ss', 'pf_movement_foreign', 'pf_religion', 'pf_association_political_establish','pf_association_political', 'pf_expression_killed', 'pf_expression_jailed','pf_expression_influence','pf_expression_control','pf_expression_newspapers','pf_expression_internet','pf_score','pf_rank','ef_government','ef_legal_judicial','ef_money_growth','ef_money_inflation','ef_money_currency', 'ef_money']]\ndf_freedom_index = df_freedom_index[df_freedom_index['hf_score']!='-']\ndf_freedom_index.head()","340473d4":"import plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot\n\ninit_notebook_mode(connected=True)","7595c942":"import plotly.express as px\ndf_freedom_index['ISO_code'] = df_freedom_index['ISO_code'].astype(str)\ndf_freedom_index['hf_score'] = df_freedom_index['hf_score'].astype(float)\nfig = px.scatter_geo(df_freedom_index, \n                     locations='ISO_code',\n                     color='region',\n                     size=\"hf_score\", hover_name='countries', \n                     projection=\"natural earth\", \n                     animation_frame=\"year\",\n                     title='Human Freedom index over years')\niplot(fig)","c23ab451":"from tqdm import tqdm\ndef count_terrorism(df_terrorism):\n    counts_ = []\n    for i in df_terrorism.groupby(['iyear', 'country_txt'])['eventid'].count():\n        for j in range(i):\n            counts_.append(i)\n    return counts_\n\ndf_terrorism = df_terrorism.sort_values(['iyear', 'country_txt'], ascending=[True, True]) \ndf_terrorism['attacks'] = count_terrorism(df_terrorism)\ndf_terrorism.head()\n","7d2bf22f":"def get_locations(df_terror, df_freedom):\n    dict_ = dict(zip(df_freedom['countries'].unique(), df_freedom['ISO_code'].unique()))\n    codes = []\n    for country in df_terror['country_txt']:\n        if country == 'Dominican Republic':\n            codes.append(dict_['Dominican Rep.'])\n        elif country =='East Germany (GDR)':\n            codes.append(dict_['Germany'])\n        elif country =='West Germany (FRG)':\n            codes.append(dict_['Germany'])\n        elif country == 'South Yemen' or country =='Yemen':\n            codes.append(dict_['Yemen, Rep.'])\n        elif country =='Brunei':\n            codes.append(dict_['Brunei Darussalam'])\n        elif country == 'Czechoslovakia'or country == 'Czech Republic':\n            codes.append(dict_['Czech Rep.'])\n        elif country == \"People's Republic of the Congo\" or country =='Republic of the Congo' or country=='Democratic Republic of the Congo':\n            codes.append(dict_['Congo, Rep. Of'])\n        elif country == 'South Vietnam':\n            codes.append(dict_['Vietnam'])\n        elif country =='West Bank and Gaza Strip':\n             codes.append(dict_['Israel'])\n        elif country =='Zaire':\n            codes.append(dict_['Congo, Rep. Of'])\n        elif country == 'Afghanistan':\n            codes.append('-')\n        elif country =='Yugoslavia':\n            codes.append('-')\n        elif country == 'Andorra':\n            codes.append('-')\n        elif country == 'North Yemen':\n            codes.append(dict_['Yemen, Rep.'])\n        elif country == 'South Korea':\n            codes.append(dict_['Korea, South'])\n        elif country == 'Somalia':\n            codes.append('-')\n        elif country == 'Djibouti':\n            codes.append('-')\n        elif country == 'Rhodesia':\n            codes.append('-')\n        elif country == 'Soviet Union':\n            codes.append('-')\n        elif country == 'Western Sahara':\n            codes.append('-')\n        elif country == 'Grenada':\n            codes.append('-')\n        elif country == 'Guadeloupe':\n            codes.append('-')\n        elif country == 'New Hebrides':\n            codes.append('-')\n        elif country == 'Central African Republic':\n            codes.append(dict_['Central Afr. Rep.'])\n        elif country =='Dominica':\n            codes.append('-')\n        elif country =='Martinique':\n            codes.append('-')\n        elif country == 'Vatican City':\n            codes.append('-')\n        elif country == 'Swaziland':\n            codes.append('-')\n        elif country == 'Falkland Islands':\n            codes.append('-')\n        elif country == 'French Guiana':\n            codes.append('-')\n        elif country == 'New Caledonia':\n            codes.append('-')\n        elif country == 'Maldives':\n            codes.append('-')\n        elif country == 'Papua New Guinea' or country =='Turkmenistan':\n            codes.append('-')\n        elif country == 'Cuba':\n            codes.append('-')\n        elif country == 'Antigua and Barbuda' or country == 'Solomon Islands':\n            codes.append('-')\n        elif country == 'Bosnia-Herzegovina':\n            codes.append(dict_['Bosnia and Herzegovina'])\n        elif country == 'Comoros':\n            codes.append('-')\n        elif country == 'Equatorial Guinea' or country =='Kyrgyzstan':\n            codes.append('-')\n        elif country == 'Ivory Coast':\n            codes.append(dict_['C?te d\\'Ivoire'])\n        elif country == 'Uzbekistan':\n            codes.append('-')\n        elif country =='Gambia'or country =='St. Kitts and Nevis':\n            codes.append('-')\n        elif country =='Macedonia' or country =='Vanuatu' or country =='St. Lucia':\n            codes.append('-')\n        elif country =='North Korea' or country=='Kosovo' or country =='International':\n            codes.append('-')\n        elif country == 'Slovak Republic':\n            codes.append(dict_['Slovak Rep.'])\n        elif country == 'Wallis and Futuna' or country =='Eritrea' or country =='French Polynesia' or country =='Macau':\n            codes.append('-')\n        elif country=='East Timor':\n            codes.append(dict_['Timor-Leste'])\n        elif country == 'Serbia-Montenegro':\n            codes.append(dict_['Serbia'])\n        elif country =='South Sudan':\n            codes.append(dict_['Sudan'])\n        else:\n            codes.append(dict_[country])\n    return codes\ndf_terrorism['attacks'] = df_terrorism['attacks'].astype(int)\ndf_terrorism['ISO_code'] = get_locations(df_terrorism, df_freedom_index)\nanalysis = df_terrorism.drop_duplicates(subset=['country_txt', 'attacks'], keep='first')\nanalysis = analysis[analysis['ISO_code']!='-']\nfig = px.scatter_geo(analysis, \n                     size=\"attacks\", hover_name='country_txt',\n                     locations='ISO_code',\n                     projection=\"natural earth\", \n                     animation_frame=\"iyear\",\n                     color='region_txt',\n                     title='Terrorism Events over years')\niplot(fig) ","b6453b97":"df_terrorism = df_terrorism[df_terrorism['iyear']>=2008]\ndf_terrorism['success'] = df_terrorism['success'].map({1: 'success', 0: 'fail'})\n\ndf_terrorism.head()","7de3783f":"import matplotlib.pyplot as plt\n\nsuccess = df_terrorism[df_terrorism['success']=='success'].shape[0]\nfail = df_terrorism[df_terrorism['success']=='fail'].shape[0]\n\nfig = px.pie(values=[success, fail], labels=['success', 'fail'], hole=0.7)\nfig.show()","f79d8980":"def count_success_attacks(df_terrorism):\n    counts_ = []\n    for i in df_terrorism.groupby(['country_txt'])['eventid'].count():\n        for j in range(i):\n            counts_.append(i)\n    return counts_\n\nsuccess_attacks = df_terrorism[df_terrorism['success']=='success']\nsuccess_attacks = success_attacks.sort_values(['country_txt'], ascending=[True]) \n\nsuccess_attacks = success_attacks[success_attacks['ISO_code']!='-']\nsuccess_attacks['success_attacks'] = count_success_attacks(success_attacks)\n\nsuccess_attacks = success_attacks.drop_duplicates(subset=['country_txt', 'success_attacks'], keep='first')\n\nfig = px.scatter_geo(success_attacks, \n                     size=\"success_attacks\", hover_name='country_txt',\n                     locations='ISO_code',\n                     projection=\"natural earth\", \n                     color='region_txt',\n                     title='Success Attacks')\niplot(fig) ","a33216a7":"df_terrorism = df_terrorism.rename(columns={'iyear':'year'})\nevalue_freedom_terrorism = pd.merge(df_terrorism, df_freedom_index, how='left', on=['ISO_code', 'year'])\nevalue_freedom_terrorism.head()","c9eb2562":"evalue_freedom_terrorism = evalue_freedom_terrorism[evalue_freedom_terrorism['ISO_code']!='-']\nevalue_freedom_terrorism.info()","5923ac58":"test = evalue_freedom_terrorism[~evalue_freedom_terrorism['countries'].isna()]\ntest = test.drop_duplicates(subset=['country_txt', 'hf_score', 'year'], keep='first')","f856a9d9":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=test['hf_score'], marker_color='salmon'))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n        'title': 'Distribution of happiness score',\n})\nfig.show()\n","0c825bcd":"print(test['hf_score'].skew())\nprint(test['hf_score'].kurtosis())","5f8e9ba8":"print(test[test['hf_score']==test['hf_score'].max()]['country_txt'])\nprint(test[test['hf_score']==test['hf_score'].min()]['country_txt'])","a9030bd6":"def get_countries_by_regions(test):\n    regions = {}\n    for region in test['region_txt'].unique():\n        tmp = test[test['region_txt']==region]\n        regions[region] = len(tmp['country_txt'].unique())\n    return regions\n\nregions = get_countries_by_regions(test)\nfig = go.Figure()\nfig.add_trace(go.Bar(y=list(regions.values()), x=list(regions.keys()), marker_color='salmon'))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n        'title': 'Country by region',\n})\nfig.show()","4a3e99b4":"def get_region_mean_std(df):\n    mean = {}\n    std = {}\n    for year in df['year'].unique():\n        tmp = df[df['year']==year]\n        mean[year] = tmp['hf_score'].mean()\n        std[year] = tmp['hf_score'].std()\n    return mean, std\nmean, std = get_region_mean_std(test)\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y = list(mean.values()), x=list(mean.keys()), marker_color='lightcoral'\n))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n        'title': 'Score happiness by score',\n})\nfig.show()","d2ef9083":"fig = go.Figure()\nfig.add_trace(go.Scatter(\n    y=list(std.values()),\n    x=list(std.keys()),\n    mode='markers',\n    marker=dict(size= list(map(lambda x: x * 50, list(std.values()))),\n                color=['lightcoral','salmon','darksalmon',\n                       'lightsalmon','crimson','red','firebrick','darkred',\n                       'coral','tomato','orangered','peachpuff','papayawhip'])\n))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n        'title': 'Happiness Score by region',\n})\nfig.show()","2b563d26":"def get_region_mean_std(df):\n    mean = {}\n    std = {}\n    for region in df['region_txt'].unique():\n        tmp = df[df['region_txt']==region]\n        mean[region] = tmp['hf_score'].mean()\n        std[region] = tmp['hf_score'].std()\n    return mean, std\nmean, std = get_region_mean_std(test)\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y = list(mean.values()), x=list(mean.keys()), marker_color='salmon'\n))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n        'title': 'Mean of happiness score by region',\n})\nfig.show()","c777314b":"fig = go.Figure()\nfig.add_trace(go.Scatter(\n    y=list(std.values()),\n    x=list(std.keys()),\n    mode='markers',\n    marker=dict(size= list(map(lambda x: x * 50, list(std.values()))),\n                color=['lightcoral','salmon','darksalmon',\n                       'lightsalmon','crimson','red','firebrick','darkred',\n                       'coral','tomato','orangered','peachpuff','papayawhip'])\n))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n        'title': 'Happiness Score by region',\n})\nfig.show()","8adef789":"import scipy\nfrom scipy.stats import f_oneway\nfrom sklearn.preprocessing import StandardScaler\n\nb = test[test['region_txt']=='South America']\n\ndef standard(df, column, region):\n    values = []\n    current_region = df[df['region_txt']==region]\n    for year in current_region['year'].unique():\n        tmp = current_region[current_region['year']==year]\n        to_scale = []\n        for value in tmp[column]:\n            to_scale.append([value])\n        scaler = StandardScaler().fit_transform(to_scale)\n        for norm in scaler:\n            values.append(norm[0])\n    return values\n\nb = b.sort_values(by=['year'], ascending=False)\nb['stand'] = standard(b, 'hf_score', 'South America')\n","2a537d58":"from statsmodels.graphics.gofplots import qqplot\ndef qq_plot(b, column):\n    qqplot_data = qqplot(b[column], line='45').gca().lines\n    return qqplot_data\nqq_plot(test, 'hf_score')","925bffcc":"from scipy import stats\nregions =[]\nfor region in test['region_txt'].unique():\n    tmp = test[test['region_txt']==region]\n    regions.append(tmp['hf_score'])\n\nstatistic, p_value = stats.kruskal(regions[0],regions[1],regions[2],regions[3],regions[4],\n                                    regions[5],regions[6],regions[7],regions[8],regions[9],\n                                    regions[10],regions[11])\ncritical_value = 0.05\nif critical_value < p_value:\n    print('All distribution are same')\nelse:\n    print('That are some distribution that is diferent')","0b773a15":"import scikit_posthocs\nframe = scikit_posthocs.posthoc_nemenyi([regions[0],regions[1],regions[2],regions[3],regions[4],\n                                    regions[5],regions[6],regions[7],regions[8],regions[9],\n                                    regions[10],regions[11]])\ndef highlight_max(s):\n    return ['background-color: salmon' if v < 0.05 else '' for v in s]\n\nframe = frame.set_index(test['region_txt'].unique())\nvalues = []\nfor i in range(1, 13):\n    values.append(i)\nmap_ = dict(zip(values, test['region_txt'].unique()))\nframe = frame.rename(columns=map_)\nframe.style.apply(highlight_max)","ad30972c":"hf_frame = test[['hf_score','pf_ss_women','pf_ss', 'pf_movement_foreign', 'pf_religion', 'pf_association_political_establish', 'pf_expression_jailed','pf_expression_influence','pf_expression_control','pf_expression_newspapers','pf_expression_internet','pf_score','ef_government','ef_legal_judicial','ef_money_growth','ef_money_inflation','ef_money_currency', 'ef_money']]\nhf_frame = hf_frame.replace('-', -1)\nhf_frame = hf_frame.apply(pd.to_numeric)\nscaler = StandardScaler().fit_transform(hf_frame)\nhf_frame_std = pd.DataFrame(scaler, columns=hf_frame.columns)\nqq_plot(hf_frame_std, 'hf_score')","36e6d7be":"from factor_analyzer.factor_analyzer import  FactorAnalyzer\nimport matplotlib.pyplot as plt\nfa = FactorAnalyzer()\nfa.fit(hf_frame_std, 25)\n# Check Eigenvalues\nev, v = fa.get_eigenvalues()\nplt.scatter(range(1, hf_frame_std.shape[1]+1),ev)\nplt.plot(range(1, hf_frame_std.shape[1]+1),ev)\nplt.title('Scree Plot')\nplt.xlabel('Factors')\nplt.ylabel('Eigenvalue')\nplt.grid()\nplt.show()","7a8f0e4b":"fa = FactorAnalyzer(n_factors=5)\n\nfa.fit(hf_frame)\nfactors = pd.DataFrame(fa.loadings_, columns=['Factor1', 'Factor2', 'Factor3', 'Factor4','Factor5'])\nfactors = factors.set_index(hf_frame.columns)\ndef highlight_max_(s):\n    return ['background-color: tomato' if v > 0.49 or v < -0.49 else '' for v in s]\n\nfactors.style.apply(highlight_max_)","4e10c8b2":"df_2009 = test[test['year']==2009]\n\ndef plot_scatter(df, column):\n    fig = go.Figure()\n    colors= ['lightcoral','salmon','darksalmon',\n            'lightsalmon','crimson','red','firebrick','darkred',\n            'coral','tomato','orangered','peachpuff','papayawhip']\n\n    for region, color in zip(df['region_txt'].unique(), colors):\n        tmp = df[df['region_txt']==region]\n        fig.add_trace(go.Scatter(\n            y=list(tmp['hf_score']),\n            x=list(tmp[column]),\n            marker=dict(size= list(map(lambda x: x * 3, list(tmp['hf_score']))),\n                        color=color),\n            mode='markers',\n            name=region\n        ))\n    fig.update_layout({\n            'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n            'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n            'title': 'Distribution of happiness score',\n    })\n    fig.show()\n    \nplot_scatter(df_2009, 'ef_money_growth')","5d2e7312":"plot_scatter(df_2009, 'ef_money_currency')","8d914b60":"plot_scatter(df_2009, 'ef_money_inflation')\nplot_scatter(df_2009, 'ef_money')","1d270dda":"def column_correlation(df_tmp, list_):\n    correlation = []\n    for column in list_:\n        df_tmp[column] = df_tmp[column].replace('-', 0)\n        df_tmp[column] = df_tmp[column].astype(float) \n        corr = np.corrcoef(df_tmp[column], df_tmp['hf_score'])[0][1]\n        correlation.append(corr)\n    return correlation\nlist_ = ['ef_money_inflation', 'ef_money', 'ef_money_growth', 'ef_money_currency']\ncorrelation = column_correlation(df_2009, list_)","56914fae":"correlation","167353cd":"fig = px.scatter(test, x=\"pf_score\", y=\"hf_score\", size='attacks', hover_data=['country_txt', 'year'], color='region_txt')\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","8a617691":"import plotly.graph_objects as go\n\ndf_terrorism_gname = df_terrorism.pivot_table(columns='gname', \n                                              aggfunc='size', fill_value=0)\n\nunknown = df_terrorism[df_terrorism['gname']=='Unknown'].shape[0]\nknown = df_terrorism[df_terrorism['gname']!='Unknown'].shape[0]\n\nfig = px.pie(values=[unknown, known], labels=['Unknown', 'Known'], hole=0.7)\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","d9f53c6e":"import plotly.graph_objects as go\nknown = df_terrorism[df_terrorism['gname']!='Unknown']\nknown = known.pivot_table(columns='gname', aggfunc='size', fill_value=0)\nterror_gname = dict(zip(known.index, known[:]))\nterror_gname = sorted(terror_gname.items(), key=lambda kv: kv[1], reverse=True)\nterror_gname = dict(terror_gname)\nterror_gname_100_keys = list(terror_gname.keys())\nterror_gname_100_values = list(terror_gname.values())\nterror_gname_100_values = terror_gname_100_values[:100]\nterror_gname_100_keys =terror_gname_100_keys[0:100]\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y = terror_gname_100_values, x=terror_gname_100_keys, marker_color='salmon'\n))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","c3c352b2":"place_attacks = df_terrorism.pivot_table(columns='targtype1_txt', aggfunc='size', fill_value=0)\nplace_attacks = dict(zip(place_attacks.index, place_attacks[:]))\nplace_attacks = sorted(place_attacks.items(), key=lambda kv: kv[1], reverse=True)\nplace_attacks = dict(place_attacks)\nplace_attacks_keys = list(place_attacks.keys())\nplace_attacks_values = list(place_attacks.values())\nplace_attacks_values = place_attacks_values[:100]\nplace_attacks_keys =place_attacks_keys[0:100]\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y = place_attacks_values, x=place_attacks_keys, marker_color='salmon'\n))\n#fig = go.Figure([go.Bar(x=place_attacks_keys, y=place_attacks_values)])\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","fb80b537":"weapons = df_terrorism.pivot_table(columns='weaptype1_txt', aggfunc='size', fill_value=0)\nweapons = dict(zip(weapons.index, weapons[:]))\nweapons = sorted(weapons.items(), key=lambda kv: kv[1], reverse=True)\nweapons_ = dict(weapons)\nweapons_keys = list(weapons_.keys())\nweapons_values = list(weapons_.values())\nweapons_values = weapons_values[:100]\nweapons_keys = weapons_keys[0:100]\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y = weapons_values, x=weapons_keys, marker_color='salmon'\n))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","ba3dc048":"attacks = df_terrorism.pivot_table(columns='attacktype1_txt', aggfunc='size', fill_value=0)\nattacks = dict(zip(attacks.index, attacks[:]))\nattacks = sorted(attacks.items(), key=lambda kv: kv[1], reverse=True)\nattacks = dict(attacks)\nattacks_keys = list(attacks.keys())\nattacks_values = list(attacks.values())\nattacks_values = attacks_values[:100]\nattacks_keys = attacks_keys[0:100]\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = attacks_keys, y=attacks_values, marker_color='salmon'\n))\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()\n","359a4595":"import plotly.express as px\nfig = px.box(test, x=\"region_txt\", y=\"hf_score\", hover_data={'country_txt'})\nfig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n})\nfig.show()","ae869b32":"from plotly.subplots import make_subplots\n\ndef attack_forms(df, gnames):\n    i = 1\n    fig = make_subplots(rows=len(gnames), cols=5, vertical_spacing=0.09)\n    for name in gnames:\n        tmp = df[df['gname']==name]\n        country_attacks = tmp.pivot_table(columns='region_txt', aggfunc='size', fill_value=0)\n        country_attacks = dict(zip(country_attacks.index, country_attacks[:]))\n        country_attacks = sorted(country_attacks.items(), key=lambda kv: kv[1], reverse=True)\n        country_attacks = dict(country_attacks)\n        country_attacks_keys = list(country_attacks.keys())\n        country_attacks_values = list(country_attacks.values())\n        country_attacks_values = country_attacks_values[:100]\n        country_attacks_keys =country_attacks_keys[0:100]\n        fig.add_trace(go.Bar(x=country_attacks_keys, y=country_attacks_values), i, 1)\n        \n        country_attacks = tmp.pivot_table(columns='country_txt', aggfunc='size', fill_value=0)\n        country_attacks = dict(zip(country_attacks.index, country_attacks[:]))\n        country_attacks = sorted(country_attacks.items(), key=lambda kv: kv[1], reverse=True)\n        country_attacks = dict(country_attacks)\n        country_attacks_keys = list(country_attacks.keys())\n        country_attacks_values = list(country_attacks.values())\n        country_attacks_values = country_attacks_values[:100]\n        country_attacks_keys =country_attacks_keys[0:100]\n        fig.add_trace(go.Bar(x=country_attacks_keys, y=country_attacks_values), i, 2)\n            \n        place_attacks = tmp.pivot_table(columns='targtype1_txt', aggfunc='size', fill_value=0)\n        place_attacks = dict(zip(place_attacks.index, place_attacks[:]))\n        place_attacks = sorted(place_attacks.items(), key=lambda kv: kv[1], reverse=True)\n        place_attacks = dict(place_attacks)\n        place_attacks_keys = list(place_attacks.keys())\n        place_attacks_values = list(place_attacks.values())\n        place_attacks_values = place_attacks_values[:100]\n        place_attacks_keys =place_attacks_keys[0:100]\n        fig.add_trace(go.Bar(x=place_attacks_keys, y=place_attacks_values), i, 3)\n            \n        attacks = tmp.pivot_table(columns='attacktype1_txt', aggfunc='size', fill_value=0)\n        attacks = dict(zip(attacks.index, attacks[:]))\n        attacks = sorted(attacks.items(), key=lambda kv: kv[1], reverse=True)\n        attacks = dict(attacks)\n        attacks_keys = list(attacks.keys())\n        attacks_values = list(attacks.values())\n        attacks_values = attacks_values[:100]\n        attacks_keys = attacks_keys[0:100]\n        fig.add_trace(go.Bar(x=attacks_keys, y=attacks_values), i, 4)\n        \n        weapons = tmp.pivot_table(columns='weaptype1_txt', aggfunc='size', fill_value=0)\n        weapons = dict(zip(weapons.index, weapons[:]))\n        weapons = sorted(weapons.items(), key=lambda kv: kv[1], reverse=True)\n        weapons_ = dict(weapons)\n        weapons_keys = list(weapons_.keys())\n        weapons_values = list(weapons_.values())\n        weapons_values = weapons_values[:100]\n        weapons_keys = weapons_keys[0:100]\n        fig.add_trace(go.Bar(x=weapons_keys, y=weapons_values), i, 5)\n        i+=1\n        fig.update_layout(height=8000, width=1000, showlegend=False, title_text=name + \" Attack forms\")\n    fig.update_layout({\n        'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n        'paper_bgcolor': 'rgba(0, 0, 0, 0)',\n    })\n    fig.show()","e33338f2":"regions = attack_forms(df_terrorism, terror_gname_100_keys[:10])","fa1d2ac4":"<img src='https:\/\/philoforchange.files.wordpress.com\/2017\/01\/alienfreedom_drhurd.jpg?w=900&h=768&crop=1' style='height:400px'>","d794fe1c":"* the principal focus of attacks are private property","5e235dbf":"* Explosives are the most use weapon","e7783b83":"* Terrorism attacks has high success ratio","8518fa9b":"ps: to better understand of terrorism attacks look this kernel https:\/\/www.kaggle.com\/josutk\/identifying-patterns-of-terrorist-attacks","bb23dbe8":"* Taliban is the principal group that are known authorship of the attacks","22109529":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h1 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">&nbsp;Summary Table:<\/h1>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#1\" role=\"tab\" aria-controls=\"profile\">1. EDA<span class=\"badge badge-primary badge-pill\">1<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#2\" role=\"tab\" aria-controls=\"profile\">2. Conclusion<span class=\"badge badge-primary badge-pill\">2<\/span><\/a>\n<\/div>","edfe7f15":"* pf_ss = Security and Safety\n* pf_ss_Women = Women Security\n* pf_religion = Religious freedom\n* pf_movement_foreign = freedom of foreign movement\n* pf_association_political_establish = Freedom to establish political parties\n* pf_expression_influence = Laws and regulation that influence media content\n* pf_expression_jailed = Press jailedM\n* pf_expression_newspapers = Access to foreign newspapers\n* pf_expression_internet = State control over internet\n* pf_score = Personal Freedom (score)\n* ef_governament = Size of government\n* ef_legal_judicial = Judicial Independece\n* ef_money_growth = Money growth\n* ef_money_inflation = Inflation\n* ef_money_currency = Freedom to own foreign currency bank account\n* ef_money = Sound Money\n\n<b> So with this factor we have some features that are resume in each factor, now  i'll expolore eaxh of factor and the relationship with hf_score. Factor1 is about money, Factor2 is about expression freedom, Factor3 is about media expression freedom, Factor4 is about people safaty, Factor5 is about State power<\/b>\n","5eeb3a8b":"<font size=\"+3\" color=\"black\"><b>2 - Conclusion<\/b><\/font><br><a id=\"2\"><\/a>\n\n* When compare the actions of the main terrorist groups are evident that their actions are in regions with a low level of freedom, moreover, countries with low religious freedom tend to have more terrorist attacks in their territories. This can happen because rival religious groups are often labeled. like terrorists.\n* the higher the freedom index, the less attacks occur in countries, terrorism shows a correlation with freedom","9d95ddfa":"* The hf_score dont is a normal distribution\n* So now i will do analysis of variance of each region, but not with anova because my distribution dont fit normal, i will use kruskal test.","a007eaa6":"<font size=\"+3\" color=\"black\"><b>1 - Introduction<\/b><\/font><br><a id=\"1\"><\/a>","a34b9a6a":"* The mark cell identify each region that diff","44a3df1f":"## Factor 1 = Money","19f60494":"* Less the a half of attacks are known the who did or are claimed\n","b9dae645":"* Central america and Oceania has greater consistency when assessing happiness.\n* East Asia has a low number of countries in this region, but there is a high variation in the index of happiness, indicating that in the same region there are great differences.\n","96aa87dd":"* So the test say me that exist some variance between hf_score in region, they dont fit same distribution so now i will identify which are","4e7a6aea":"* Freedom score by region","6f42222c":"* the chart above demonstrate how freedom score and personal score are correlated with attacks occurrence, in general when the valores are low the country has more attacks and when high the number of attacks decreases dramatically\n","2ad02c89":"* the graph shows that the smaller human freedom score in relation to religious freedom the greater the number of attacks can occur\n\n* When the country has greate freedom human score and high pf_religion the attacks occur with smaller frequency"}}