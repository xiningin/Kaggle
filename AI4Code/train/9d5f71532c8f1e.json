{"cell_type":{"b5353519":"code","54445d4b":"code","e726c842":"code","5bd7740a":"markdown","0b05c994":"markdown","d95eefd8":"markdown"},"source":{"b5353519":"# Install:\n# Kaggle environments.\n!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.3 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.3.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","54445d4b":"%%writefile submission.py\nfrom gfootball.env import football_action_set\n\ndef agent(obs):\n    # Get observations for the first (and only one) player we control.\n    o = obs['players_raw'][0]\n    # Make sure player is running.\n    if not o['sticky_actions'][8]:\n        return [13]\n    controlled_player_pos = o['left_team'][o['active']]\n    # Does the player we control have the ball?\n    if o['ball_owned_player'] == o['active'] and o['ball_owned_team'] == 0:\n        # Shot if we are 'close' to the goal (based on 'x' coordinate).\n        if controlled_player_pos[0] > 0.5:\n            return [12]\n        # Run towards the goal otherwise.\n        return [5]\n    else:\n        # Run towards the ball.\n        if o['ball'][0] > controlled_player_pos[0] + 0.05:\n            return [5]\n        if o['ball'][0] < controlled_player_pos[0] - 0.05:\n            return [1]\n        if o['ball'][1] > controlled_player_pos[1] + 0.05:\n            return [7]\n        if o['ball'][1] < controlled_player_pos[1] - 0.05:\n            return [3]\n        return [16]","e726c842":"# Set up the Environment.\nfrom kaggle_environments import make\nenv = make(\"football\", configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True})\nenv.run([\"\/kaggle\/working\/submission.py\", \"do_nothing\"])\nenv.render(mode=\"human\", width=800, height=600)","5bd7740a":"Now it is time to implement a bot. It consists of a single function **agent**, which is called by the Kaggle Environment on each step.\n**Agent** receives Kaggle-specific observations as a parameter, which contain GFootball environment observations under **players_raw** key.\nDetailed description of the GFootball observations is available [here](https:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md).","0b05c994":"# Submit to Competition\n1. \"Save & Run All\" (commit) this Notebook\n1. Go to the notebook viewer\n1. Go to \"Data\" section and find submission.py file.\n1. Click \"Submit to Competition\"\n1. Go to [My Submissions](https:\/\/www.kaggle.com\/c\/football\/submissions) to view your score and episodes being played.","d95eefd8":"# GFootball Template Bot\nBelow we present a simple Bot playing GFootball. The first step is to install required tools:"}}