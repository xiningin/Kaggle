{"cell_type":{"98a5ceed":"code","731ef7cb":"code","e61a7143":"code","b496b1f3":"code","625bddfe":"code","80e699ea":"code","677851e0":"code","136901a0":"code","6566cdfd":"code","50f4ba8f":"code","07fbc614":"code","d7b17870":"code","2332263f":"code","fa5d3fdd":"code","d5e5e74b":"code","c30454bc":"code","40db4a5a":"code","bb038d0e":"code","6ec783f6":"code","dcb3bd4d":"code","7e90d0bc":"code","a4cc42e7":"code","18fd616a":"code","b56e974f":"code","37653f47":"code","af4e8a2b":"code","19a83299":"code","a4a3c49a":"code","1fd73226":"code","643b3e04":"code","dfe0d577":"code","37541503":"code","c394f629":"code","78ce90ff":"code","0bd5b743":"code","fd0b875d":"code","c38c4152":"code","a5e5c100":"markdown","4e7edbf7":"markdown","0be1b087":"markdown","d9c482d4":"markdown","4163b46e":"markdown","39bf9bfa":"markdown","e550eeba":"markdown","5979bbed":"markdown","39784db6":"markdown","d508c044":"markdown","97bdf554":"markdown","a6756c82":"markdown","27142c3f":"markdown","d50d2c94":"markdown","11d1fa78":"markdown","01a40dbb":"markdown","d92ed38b":"markdown"},"source":{"98a5ceed":"import os\nimport pandas as pd\nimport numpy as np\n\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\nimport seaborn as sns\nimport plotly.express as px\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import model_selection\nimport statsmodels.formula.api as smf\nimport statsmodels.api as sm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.tree import DecisionTreeClassifier","731ef7cb":"black_red = [\n    '#1A1A1D', '#4E4E50', '#C5C6C7', '#6F2232', '#950740', '#C3073F'\n]\nplt.style.use('fivethirtyeight')","e61a7143":"df = pd.read_csv('..\/input\/german-credit\/german_credit_data.csv')\ndf.head(10)","b496b1f3":"df.info()","625bddfe":"df.columns","80e699ea":"df.describe()","677851e0":"fig = plt.figure(constrained_layout = True, figsize = (20,9))\n\n#create grid\n\ngrid = gridspec.GridSpec(ncols = 4, nrows = 2, figure = fig)\n\nax1 = fig.add_subplot(grid[0, :2])\nax1.set_title('Checking Status')\n\n\nsns.countplot(df['checking_status'],\n             alpha = 0.9,\n             ax = ax1,\n             color = '#C3073F')\n\nax1.legend()\n\nax2 = fig.add_subplot(grid[0, 2:])\nax2.set_title('Purpose Distribution')\nsns.countplot(df['purpose'],\n             alpha = 0.9,\n             ax = ax2, \n             color = '#C3073F')\nax2.legend()\nplt.xticks(rotation = 50)\nplt.show()","136901a0":"fig = plt.figure(constrained_layout = True, figsize = (15,9))\n\n#create grid\n\ngrid = gridspec.GridSpec(ncols = 1, nrows = 3, figure = fig)\nax1 = fig.add_subplot(grid[0, :])\n\nsns.distplot(df.duration, ax = ax1, color = '#950740')\nax1.set_title('Time Distribution')\n\nax2 = fig.add_subplot(grid[1, :])\nsns.distplot(df.credit_amount, ax = ax2, color = '#C3073F')\nax2.set_title('Credit Amount Distribution')\n\n\nax3 = fig.add_subplot(grid[2, :])\nsns.distplot(df.age, ax = ax3, color = '#6F2232')\nax3.set_title('Age Distribution')\nplt.show()","6566cdfd":"black_red1 = [\n    '#1A1A1D', '#950740', '#C3073F'\n]\nfig = px.sunburst(data_frame = df,\n                 path = [ 'checking_status','class','credit_history'],\n                 color = 'class',\n                 color_discrete_sequence = black_red1,\n                 maxdepth = -1,\n                 title = 'Sunburst Chart Checking Status > Class > Credit History')\nfig.update_traces(textinfo = 'label+percent parent')\nfig.update_layout(margin=dict(t=0, l=0, r=0, b=0))\nfig.show()","50f4ba8f":"\ncategorical_feature_mask = df.dtypes==object\ncategorical_cols = df.columns[categorical_feature_mask].tolist()\nprint(categorical_cols)","07fbc614":"\nle = LabelEncoder()\ndf[categorical_cols] = df[categorical_cols].apply(lambda col: le.fit_transform(col))\ndf.head(10)","d7b17870":"df_new = df.rename(columns={'class': 'label'})","2332263f":"plt.rcParams['figure.figsize']=35,35\ng = sns.heatmap(df_new.corr(),annot=True, fmt = \".1f\", cmap = \"coolwarm\")","fa5d3fdd":"fig = plt.figure(constrained_layout = True, figsize = (20,6))\n\n#create grid\n\ngrid = gridspec.GridSpec(ncols = 6, nrows = 1, figure = fig)\n\nax1 = fig.add_subplot(grid[0, :2])\n\nsns.scatterplot(x=df_new['duration'] , y =df_new['credit_amount'], palette = [black_red[1], black_red[4]], ax = ax1, hue = df_new['label'],\n               style = df_new['label'])\nax1.set_title('Correlation between Duration and Credit Amount')\nax1.legend(loc = 'lower right')","d5e5e74b":"formula = 'label ~ checking_status+duration+credit_history+purpose+credit_amount+savings_status+employment+installment_commitment+personal_status+other_parties+residence_since+property_magnitude+age+other_payment_plans+housing+existing_credits+job+num_dependents+own_telephone+foreign_worker'\nmodel_glm = smf.glm(formula = formula, data=df_new, family=sm.families.Binomial())\nresult = model_glm.fit()\nprint(result.summary())","c30454bc":"formula2 = 'label ~ checking_status+duration+purpose+credit_amount+savings_status+installment_commitment+personal_status'\nmodel_glm2 = smf.glm(formula = formula2, data=df_new, family=sm.families.Binomial())\nresult2 = model_glm2.fit()\nprint(result2.summary())","40db4a5a":"X = df_new[['checking_status', 'duration', 'purpose', 'credit_amount', 'savings_status', 'installment_commitment', 'personal_status']]\nY = df_new['label']\nprint(X.shape, Y.shape)\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, Y, test_size=0.25, random_state=42)","bb038d0e":"logreg = sm.Logit(y_train, sm.add_constant(X_train)).fit()\nprint (logreg.summary())\n","6ec783f6":"# instantiate model\nlogreg = LogisticRegression()\n\n# fit model\nlogreg.fit(X_train, y_train)\ny_pred_train = logreg.predict(X_train)\ny_pred_class = logreg.predict(X_test)","dcb3bd4d":"def acc_val(TP, TN, FP, FN, data):    \n    accuracy = (TP + TN) \/ float(TP + TN + FP + FN)\n    recall = TP \/ float(FN + TP)\n    specificity = TN \/ (TN + FP)\n    false_positive_rate = FP \/ float(TN + FP)\n    precision = TP \/ float(TP + FP)\n    F1 = 2 * (precision * recall) \/ (precision + recall)\n    print('The values for {} are:'.format(data))\n    print('Accuracy: {} ,Recall: {} , Specificity: {} , False Positive Rate: {} , Precision: {}, F1 Score: {}'.format(accuracy, recall, specificity, false_positive_rate,\n                                                                                                                   precision, F1))","7e90d0bc":"confusion = metrics.confusion_matrix(y_test, y_pred_class)\nprint(confusion)\nTP1 = confusion[1, 1]\nTN1 = confusion[0, 0]\nFP1 = confusion[0, 1]\nFN1 = confusion[1, 0]\nacc_val(TP1, TN1, FP1, FN1, 'Test Data')","a4cc42e7":"confusion = metrics.confusion_matrix(y_train, y_pred_train)\nprint(confusion)\nTP2 = confusion[1, 1]\nTN2 = confusion[0, 0]\nFP2 = confusion[0, 1]\nFN2 = confusion[1, 0]\nacc_val(TP2, TN2, FP2, FN2, 'Train Data')","18fd616a":"y_pred_prob = logreg.predict_proba(X_test)[:, 1]\ny_pred_prob_train = logreg.predict_proba(X_train)[:, 1]\nfpr1, tpr1, thresholds1 = metrics.roc_curve(y_test, y_pred_prob)\nfpr2, tpr2, thresholds2 = metrics.roc_curve(y_train, y_pred_prob_train)\n\nrandom_probs = [0 for i in range(len(y_test))]\np_fpr, p_tpr, _ = metrics.roc_curve(y_test, random_probs, pos_label=1)\nplt.style.use('seaborn')\n\n# plot roc curves\nplt.plot(fpr1, tpr1, linestyle='--',color='orange', label='Test Data')\nplt.plot(fpr2, tpr2, linestyle='--',color='green', label='Train_Data')\nplt.plot(p_fpr, p_tpr, linestyle='--', color='blue', label = 'Threshold')\n# title\nplt.title('ROC curve for Logistic Regression')\n# x label\nplt.xlabel('False Positive Rate')\n# y label\nplt.ylabel('True Positive rate')\n\nplt.legend(loc='best')\nplt.savefig('ROC',dpi=300)\nplt.show();","b56e974f":"print('AUC socre for Test data: {}'.format(metrics.roc_auc_score(y_test, y_pred_prob)))\nprint('AUC socre for Train data: {}'.format(metrics.roc_auc_score(y_train, y_pred_prob_train)))","37653f47":"def insample(y_pred_prob, y_test):\n    k = []\n    threshold = 0.2667\n    y = y_pred_prob>0.2667\n    for i in range(0,250):\n        if y[i]!=y_test[i]:\n            k.append(int(1))\n        else:\n            k.append(int(0))\n    return reduce(lambda a, b: a + b, k) \/ len(k) \n                ","af4e8a2b":"from functools import reduce\nmis_error1 = insample(y_pred_prob, list(y_test))\n\nprint('In Sample Misclassification Rate: {}'.format(mis_error1))","19a83299":"tree_model = DecisionTreeClassifier(max_depth = 20)\ntree_model.fit(X_train, y_train)\ny_pred_tree = tree_model.predict(X_test)","a4a3c49a":"from sklearn import tree\ntext_representation = tree.export_text(tree_model)\nprint(text_representation)","1fd73226":"features = ['checking_status', 'duration', 'purpose', 'credit_amount', 'savings_status', 'installment_commitment', 'personal_status']\nlabels = ['good', 'bad']","643b3e04":"\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(tree_model,\n                feature_names = features, \n               class_names=labels,\n               filled = True)","dfe0d577":"tree_confusion = metrics.confusion_matrix(y_test, y_pred_tree)\nprint(tree_confusion)\nTP3 = tree_confusion[1, 1]\nTN3 = tree_confusion[0, 0]\nFP3 = tree_confusion[0, 1]\nFN3 = tree_confusion[1, 0]\nacc_val(TP3, TN3, FP3, FN3, 'Test Data')","37541503":"y_pred_train_tree = tree_model.predict(X_train)\ntree_confusion = metrics.confusion_matrix(y_train, y_pred_train_tree)\nprint(tree_confusion)\nTP4 = tree_confusion[1, 1]\nTN4 = tree_confusion[0, 0]\nFP4 = tree_confusion[0, 1]\nFN4 = tree_confusion[1, 0]\nacc_val(TP4, TN4, FP4, FN4, 'Train Data')\n","c394f629":"y_pred_prob_tree = tree_model.predict_proba(X_test)[:, 1]\ny_pred_prob_train_tree = tree_model.predict_proba(X_train)[:, 1]\nfpr3, tpr3, thresholds3 = metrics.roc_curve(y_test, y_pred_prob_tree)\nfpr4, tpr4, thresholds4 = metrics.roc_curve(y_train, y_pred_prob_train_tree)\n\nrandom_probs = [0 for i in range(len(y_test))]\np_fpr, p_tpr, _ = metrics.roc_curve(y_test, random_probs, pos_label=1)\nplt.style.use('seaborn')\n\n# plot roc curves\nplt.plot(fpr3, tpr3, linestyle='--',color='orange', label='Test Data')\nplt.plot(fpr4, tpr4, linestyle='--',color='green', label='Train_Data')\nplt.plot(p_fpr, p_tpr, linestyle='--', color='blue', label = 'Threshold')\n# title\nplt.title('ROC curve for Decision Tree')\n# x label\nplt.xlabel('False Positive Rate')\n# y label\nplt.ylabel('True Positive rate')\n\nplt.legend(loc='best')\nplt.savefig('ROC',dpi=300)\nplt.show();","78ce90ff":"print('AUC socre for Test data: {}'.format(metrics.roc_auc_score(y_test, y_pred_prob_tree)))\nprint('AUC socre for Train data: {}'.format(metrics.roc_auc_score(y_train, y_pred_prob_train_tree)))","0bd5b743":"from functools import reduce\nmis_error2 = insample(y_pred_prob_tree, list(y_test))\nprint('In Sample Misclassification Rate: {}'.format(mis_error2))\n","fd0b875d":"random_probs = [0 for i in range(len(y_test))]\np_fpr, p_tpr, _ = metrics.roc_curve(y_test, random_probs, pos_label=1)\nplt.style.use('seaborn')\n\n# plot roc curves\nplt.plot(fpr1, tpr1, linestyle='--',color='orange', label='Logistic Regression')\nplt.plot(fpr3, tpr3, linestyle='--',color='green', label='Decision Tree')\nplt.plot(p_fpr, p_tpr, linestyle='--', color='blue', label = 'Threshold')\n# title\nplt.title('ROC curve for Test Data')\n# x label\nplt.xlabel('False Positive Rate')\n# y label\nplt.ylabel('True Positive rate')\n\nplt.legend(loc='best')\nplt.savefig('ROC',dpi=300)\nplt.show();","c38c4152":"random_probs = [0 for i in range(len(y_test))]\np_fpr, p_tpr, _ = metrics.roc_curve(y_test, random_probs, pos_label=1)\nplt.style.use('seaborn')\n\n# plot roc curves\nplt.plot(fpr2, tpr2, linestyle='--',color='orange', label='Logistic Regression')\nplt.plot(fpr4, tpr4, linestyle='--',color='green', label='Decision Tree')\nplt.plot(p_fpr, p_tpr, linestyle='--', color='blue', label = 'Threshold')\n# title\nplt.title('ROC curve for Test Data')\n# x label\nplt.xlabel('False Positive Rate')\n# y label\nplt.ylabel('True Positive rate')\n\nplt.legend(loc='best')\nplt.savefig('ROC',dpi=300)\nplt.show();","a5e5c100":"# Confusion Metrics ","4e7edbf7":"**Sunburst Chart with Checking Status > Class > Credit History**","0be1b087":"# German Credit Data Analysis\n\nThis notebook contains the analysis of Credit Data. Includes EDA, feature selection using Gerneralised Linear Model (GLM) and its prediction using Logistic Regression and Decision Tree with different evaluation metrics.\n![image.png](attachment:image.png)","d9c482d4":"# Correlation between variables. ","4163b46e":"**Thank you for viewing the notebook. Do give your valuable suggestions and feedback.**","39bf9bfa":"# Confusion Metrics","e550eeba":"# In sample Misclassification Rate","5979bbed":"Based on GLM Results only 7 features are selected with p value < 0.05. ","39784db6":"**Data Analysis**","d508c044":"# Decision Tree","97bdf554":"# Exploratory Data Analysis","a6756c82":"# ROC_AUC","27142c3f":"# In Sample Mis-Classification","d50d2c94":"# Comparison","11d1fa78":"# Logistic Regression","01a40dbb":"**Encoding categorical variables using LabelEncoder**","d92ed38b":"# ROC_AUC"}}