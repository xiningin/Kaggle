{"cell_type":{"78c5f6cd":"code","2c2dcc9c":"code","276120cf":"code","f3066ee2":"code","67d6d3a7":"code","ae88a9c6":"code","b08873c8":"markdown","4ca0cf4c":"markdown","80802bb5":"markdown","f2243a01":"markdown","8ff10996":"markdown","820b4756":"markdown","7a3b6581":"markdown"},"source":{"78c5f6cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c2dcc9c":"pop = pd.read_csv('..\/input\/world-population-by-year\/WorldPopulation.csv', header=0, sep=',')\nprint(pop.head(5))","276120cf":"print(pop.info())","f3066ee2":"plt.figure(figsize=(15, 15))\nx = pop['Year']\ny = pop['Population']\nplt.subplot(2,3,1)\nplt.plot(x,y)\nplt.xlabel('Year')\nplt.ylabel('Population')\n\nx = pop['Year']\ny = pop['ChangePerc']\nplt.subplot(2,3,2)\nplt.plot(x,y)\nplt.xlabel('Year')\nplt.ylabel('ChangePerc')\n\nx = pop['Year']\ny = pop['NetChange']\nplt.subplot(2,3,3)\nplt.plot(x,y)\nplt.xlabel('Year')\nplt.ylabel('NetChange')\n\nx = pop['Year']\ny = pop['Density']\nplt.subplot(2,3,4)\nplt.plot(x,y)\nplt.xlabel('Year')\nplt.ylabel('Density')\n\nx = pop['Year']\ny = pop['Urban']\nplt.subplot(2,3,5)\nplt.plot(x,y)\nplt.xlabel('Year')\nplt.ylabel('Urban')\n\nx = pop['Year']\ny = pop['UrbanPerc']\nplt.subplot(2,3,6)\nplt.plot(x,y)\nplt.xlabel('Year')\nplt.ylabel('UrbanPerc')","67d6d3a7":"x = pop['Year']\ny = pop['Population']\npredict_pop = np.poly1d(np.polyfit(x, y, 3))\nprint(r2_score(y, predict_pop(x)))","ae88a9c6":"plt.figure(figsize=(10, 10))\nx = predict_pop(pop['Year'])\ny = pop['Population']\nplt.scatter(x,y, alpha=0.7)\nplt.xlabel('Predicted population')\nplt.ylabel('Actual population')","b08873c8":"# Population Analysis","4ca0cf4c":"Reading the dataset","80802bb5":"**For population forecast, call predict_pop(Year)**","f2243a01":"Finding relation between Year and Population:","8ff10996":"**This results in *99.98%* accuracy**","820b4756":"Analysing change in all variables with respect to the Year,","7a3b6581":"# Population Prediction"}}