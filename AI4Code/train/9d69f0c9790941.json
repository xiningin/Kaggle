{"cell_type":{"42639841":"code","4717241c":"code","f6c25496":"code","41c450e9":"code","2502e259":"code","bf41795e":"code","46814238":"code","028cf198":"code","04810f75":"code","93651b7b":"markdown","dba48cca":"markdown","188fb1ae":"markdown","85f4c757":"markdown","e167cc44":"markdown","88d9a2ec":"markdown","237fecc8":"markdown","423ec0e6":"markdown","c8dac468":"markdown","439801da":"markdown","0d8870ee":"markdown","533ab74e":"markdown","89beacf2":"markdown","b8dac9d1":"markdown","0f0f021b":"markdown","340f6584":"markdown","34a0e2c7":"markdown","02b228de":"markdown","2c2d7667":"markdown","5dfbcd2c":"markdown"},"source":{"42639841":"# Importing the libraries\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt","4717241c":"# Path of the image\nimage_path = '..\/input\/picture\/scenery.jpeg'\n\n# Read the image\nimage = cv2.imread(image_path)","f6c25496":"# Printing the image\nprint(image)","41c450e9":"# Getting the size on the image\nimage_size = image.shape\nprint(image_size)","2502e259":"\n### Use this code if you want to only work with openCv I don't know why but this code is not working on kagggle notebook\n\n\n### Use this code if you want to only work with openCv I don't know why but this code is not working on kagggle notebook\n#while True:\n#    cv2.imshow(\"Image\", image)   ### This will show the pop up window having title as \"Image\" but it is only for 1 mili sec hence we applied the while loop to see it comtinuously\n#    if cv2.waitKey(1) == ord('q'): ### When we press 'q' we exit the loop and image stop displaying but window is not closed\n#        break\n#cv2.destroyAllWindows() ## This Code at last distroys all the windows\n\n## On kaggle notebook we should use\nplt.imshow(image)","bf41795e":"image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # We are converting the color format to RGB\nplt.imshow(image)","46814238":"total_pixel_in_column = image_size[0]\ntotal_pixel_in_row = image_size[1]\n\n# Calculating the number of pixels in top half part of the column\ncolumn_top_half = total_pixel_in_column \/\/ 2\n# Calculating the number of pixels in bottom half part of the column\ncolumn_bottom_half = total_pixel_in_column - column_top_half\n\n# Calculating the number of pixels in left half of the row\nrow_left_half = total_pixel_in_row \/\/ 2\n# Calculating the number of pixels in right half of the row\nrow_right_half = total_pixel_in_row - row_left_half\n\nprint(f'''\nTop Half: {column_top_half}\nBottom Half: {column_bottom_half}\nLeft Half: {row_left_half}\nRight Half: {row_right_half}\n''')\n","028cf198":"# Cropping the image in four pieses\nimage_1 = image[0:column_top_half, 0:row_left_half]\nimage_2 = image[0:column_top_half, row_left_half:]\nimage_3 = image[column_top_half:, 0:row_left_half]\nimage_4 = image[column_top_half:, row_left_half:]\n\n# Displaying the images\nplt.figure()\nf, axarr = plt.subplots(2,2) \n\n\naxarr[0][0].imshow(image_1)\naxarr[0][1].imshow(image_2)\naxarr[1][0].imshow(image_3)\naxarr[1][1].imshow(image_4)","04810f75":"top_image = np.concatenate((image_4, image_3), axis=1)\nbottom_image = np.concatenate((image_2, image_1), axis=1)\n\nrearranged_image = np.concatenate((top_image, bottom_image))\n\n# Display the re-arranged image\nplt.imshow(rearranged_image)","93651b7b":"Now you understand the goals of this task that is to understand about images. Let us see what are the objectives of this task. Objective is noting but path that we are going to follow to complete our task.\n\n## Objectives\n\n1. Introduction of Our Tools\n2. Reading the image\n3. Display the Image\n4. Crop The Image\n5. Re-arrange the Image","dba48cca":"# Working with The Image Using OpenCV and NumPy","188fb1ae":"Now you will be surprised by seeing what is exactly stored in image. This will give the answer to one of your question that how the computer will understand the image. This is how computer see the image. Every image is made by using pixels. Pixel is very tiny block in the image which determines the colour of that perticular area. Each pixel contains the information in about the color in RGB format that is Red-Green-Blue format. These three colour are capable of determining every color. \n![pixel.png](attachment:pixel.png)\nBut OpenCV reads the image in the BGR format that is Bule-Green-Red format. When we read the image then the information of the each pixel get stored in the variable as NumPy Array.\n\nSo let's try to get shape of the NumPy Array which will tell us the number of pixels in that image","85f4c757":"Above we successfully cropped the image into four parts","e167cc44":"## Conclusion\n\nSo, let's see we completed our goals or not. So through this notebook we learned that how to read the image, changing the format of image, cropping the image, mearging two images. And we also learned the basic functionalities of OpenCV and NumPy libraries. Now we understood that how image is stored in the mobile phone or computers. Thank You!","88d9a2ec":"## 2. Reading The Image\n\nWe first need to read the image to work on it and for that we are going to use the OpenCV's imread() function. \nOne important thing is still remained that is we have to import the libraries OpenCV and NumPy in our notebook so that we can use them to work with images.\n\nSo first we will import the important libraries.","237fecc8":"## 5. Re-arrange The Image\n\nNow our last objective is to re-arrange the image in misplaced order. That means image_1 will be at the place of image_4 and vice verca, and image_2 will be at the place of image_3 and vice verca.\n ![rearrange.png](attachment:rearrange.png)\n \nSo how we can do that? To crop the image we had to slice the NumPy array, now to re-arrange the image we have to merge the two arrays. So we will use the NumPy's concatinate function.","423ec0e6":"## 4. Crop The Image\n\nHere the interesting part comes, now we have to crop the image into four pieces. As we know image is nothing but a NumPy array so cropping the image means cutting out some part of that NumPy array. So here also we will do the same thing, we will divide the NumPy array into four parts so the image will also get divided into four parts. \n\nSo we know the size of the image, which is 648 X 1000. This means that there is 648 pixels in one column and 1000 pixels in one row\n![Divide-picture.png](attachment:Divide-picture.png)\n\nAs shown in the image above we will divide the image in four pieces let's say image_1, image_2, image_3 and image_4. So now we ahve to find the size for each cropped image. \n\nTo get the size of pieces we will divide the size of actual image by 2. ","c8dac468":"To display the image in the way that humans can see or understand the image we have to convert the NumPy array into image format. To do that we will use imshow() function from the cv2 library. So let\u2019s understand it by seeing the code.\n\n    while True:\n        cv2.imshow(\"Image\", image)   \n        if cv2.waitKey(1) == ord('q'):\n            break\n    cv2.destroyAllWindows()\n    \nIn the above code function imshow() is in the non ending while loop, because imshow() function creates a pop window having the title as a string passed in the function, but that window remains alive only for 1 mili second then it disappears so it is hard to detect hence we use the while loop that continueously shows the image. Then on the next line of code check the if user enters the 'q' from the keyboard then the loop breaks out and process of displaying the image stops. But the window is still alive hence the last line of code distroys the window.\n","439801da":"As we see above cell didn't give any error. If it gives an error, then it means that you misspelled something, or These libraries are not installed in your system. So to use it you have to first install the libraries.\n\nNow we will read the image for that we will need the path of image. Then we need to pass this image to the .imread() function of the cv2 library.\n","0d8870ee":"So here in this notebook, we are going to work on the images so you all can easily understand what the image is. \nWe will use the OpenCV python package, which is the Computer Vision library of Python language. We will also use Python\u2019s NumPy library to make numerical operations. \nI believe in learning by doing. So here we are not only going to understand concepts but also we will work on one task. So now you will ask, what is the task? So the task is, we are going to crop this image into four parts, and then we will arrange the four pieces in mixed order.\n\nLet's understand the task\n\n![task.png](attachment:task.png)\n\n## Goals\n\nThis are the operations that we will be doing on our image.\nWhile doing the above task we are going to learn:\n1. Understanding the images.\n2. Basic functinalities of OpenCV and NumPy library.\n3. Croping the image and combining the several images to make one image.    ","533ab74e":"\nAfter executing the above cell, we got the result as (648, 1000, 3); let\u2019s understand the meaning of it. The first number determines the number of pixels in one column of pixels (i.e., 648), and the sencond number shows the number of pixels in one row of pixels(i.e., 1000). The last number is for the number of channels present in the image. Channels give information about the color format of the image. Here it has 3 channels means the image is in RGB format. So the total number of pixels in the image is '648 * 1000 = 648000'. \n","89beacf2":"In above cell we divided the total number of pixels in column and rows by 2, therefore we got the values of top half, bottom half, left half, and right half\n![divie-2.png](attachment:divie-2.png)\n\nHence, now we can determine the size of cropped images:\n1. image_1: 324 X 500\n2. image_2: 324 X 500 \n3. image_3: 324 X 500\n4. image_4: 324 X 500\n\nWe will divide the actual image by using simple NumPy Array slicing method.","b8dac9d1":"In above cell we read the image and saved the image in image variable.\n\nLet's try to print the image variable to see what exactly is stored in it.","0f0f021b":"Hello Guys! Imagine you are on a trip and you saw beautiful scenery. It was so beautiful that you felt to capture it using your mobile camera. Then you took a picture of the image. \n![scenery.jpeg](attachment:scenery.jpeg)\nBut suddenly, you got the following questions in your mind. What is this picture? How could it capture the scene in so many details? How could it determine the color? \n","340f6584":"Now now you can see that the image is in proper color format.","34a0e2c7":"## 3. Display The Image\n","02b228de":"## 1. Introduction of Our Tools\n\n![python.png](attachment:python.png)\nAs we discussed previously, we are going to use Python language and its two famous libraries that are OpenCV and NumPy. Python is an interpreted, high-level, general-purpose programming language. Most of the developers in the world use Python to work with Machine Learning, Web Development, App Development, Data Analytics, and much more.\n![opencv.png](attachment:opencv.png)\nOpenCV is one of the most famous libraries in Python, which deals with Computer Vision operations. Developers use OpenCV to process the images. We will be using it to understand the images. \n![numpy.jpeg](attachment:numpy.jpeg)\nNumPy is a library is used to perform complex mathematical operations.\n\n","2c2d7667":"### Hurray!!!!!!\nHere we completed the our all the objectives and totally messed up with the image. ","5dfbcd2c":"What!!! What happend to the color of the image? This is not the same image that we read using OpenCv. \n\nThese are the questions will come in your mind after seeing the output of the above cell. But trust me it's the same image, I will explain what happend to the color just calm down!!\n\nWhat happend here is that when you read the image using OpenCV's imread() function, it reads the image in BGR which is Blue-Green-Red format. But we used matplotlib's imshow() function because we had some problem with OpenCV's imshow() function. Hence Matplotlib library works on the RGB image format hence here when we disply the image the values of blue channel are replaced with red channel and vice-versa.\n\nNow, We understand what is the problem but how to solve it. To solve it we will convert the BGR format of openCV into RGB format."}}