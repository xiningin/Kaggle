{"cell_type":{"f0cfa1c7":"code","65e0e8bd":"code","8ae4673f":"code","9f7be6fc":"code","4f90f79e":"code","79a45449":"code","c7f5f89a":"code","aa3b9b4f":"code","2ed2b6c9":"code","ef36aa27":"code","e243c310":"code","3b6ac3e6":"code","661aad78":"code","c91f61fd":"code","15b12bb7":"code","0c00c37b":"code","a2cf7fdb":"code","5bd8035c":"code","1e2fe7ff":"code","dc1f4e5d":"code","d9ccc0ac":"code","fcb701cb":"code","a0a7d355":"code","ee6b0c56":"code","b9d6dab2":"code","434b988c":"code","238b44d9":"code","65768b58":"code","9d5e14ef":"code","93049490":"code","80091946":"code","2a824083":"code","75878acb":"code","512fa3f5":"code","5f07fa46":"code","4e48c880":"markdown","ad610c62":"markdown","7e920f73":"markdown","0554582a":"markdown","98edbc57":"markdown","a528f7ff":"markdown","6809ad58":"markdown","96d3d4f4":"markdown","a572e256":"markdown"},"source":{"f0cfa1c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","65e0e8bd":"import pandas as pd","8ae4673f":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv')","9f7be6fc":"train.info()","4f90f79e":"test.info()","79a45449":"train.sample(3)","c7f5f89a":"train['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])","aa3b9b4f":"train.info()","2ed2b6c9":"train['Date'] = train['Date'].astype('int64')\ntest['Date'] = test['Date'].astype('int64')","ef36aa27":"train.info()","e243c310":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndef FunLabelEncoder(df):\n    for c in df.columns:\n        if df.dtypes[c] == object:\n            le.fit(df[c].astype(str))\n            df[c] = le.transform(df[c].astype(str))\n    return df","3b6ac3e6":"train = FunLabelEncoder(train)\ntrain.info()\ntrain.iloc[235:300,:]","661aad78":"test = FunLabelEncoder(test)\ntest.info()","c91f61fd":"train.iloc[:,:-2].sample(3)","15b12bb7":"X = train.iloc[:,:-2]\nprint(X.shape)\nX.sample(3)","0c00c37b":"Y = train.iloc[:,-2:]\nprint(Y.shape)\nY.sample(3)","a2cf7fdb":"from sklearn.model_selection import train_test_split \ntrainX , valX, trainY, valY = train_test_split(X, Y, random_state=1)","5bd8035c":"y1Train = trainY.iloc[:,0]\nprint(y1Train.shape)\ny1Train.sample(3)","1e2fe7ff":"y2Train = trainY.iloc[:,1]\ny2Train.sample(3)","dc1f4e5d":"y1Val = valY.iloc[:,0]\ny1Val.sample(3)","d9ccc0ac":"y2Val = valY.iloc[:,1]\ny2Val.sample(3)","fcb701cb":"print(trainX.shape)\ntrainX.sample(3)","a0a7d355":"print(trainX.info())","ee6b0c56":"trainX.iloc[:,1:].sample(3)","b9d6dab2":"from sklearn.tree import DecisionTreeRegressor\nlrModel1 = DecisionTreeRegressor(random_state = 27)\n%time lrModel1.fit(trainX.iloc[:,1:], y1Train)","434b988c":"%time y1Pred = lrModel1.predict(valX.iloc[:,1:])\nprint(y1Pred[:,])","238b44d9":"from sklearn.metrics import mean_absolute_error\n\nprint(\"Accuracy in train set : \", lrModel1.score(trainX.iloc[:,1:], y1Train))\nprint(\"RMSE : \", mean_absolute_error(y1Val, y1Pred)**(0.5))","65768b58":"lrModel2 = DecisionTreeRegressor(random_state = 27)\n%time lrModel2.fit(trainX.iloc[:,1:], y2Train)\n\n%time y2Pred = lrModel2.predict(valX.iloc[:,1:])\n\nprint(\"Accuracy in train set : \", lrModel2.score(trainX.iloc[:,1:], y2Train))\nprint(\"RMSE : \", mean_absolute_error(y2Val, y2Pred)**(0.5))","9d5e14ef":"print(test.shape)\ntest.sample(3)","93049490":"test.iloc[:,1:].sample(3)","80091946":"%time finalPred1 = lrModel1.predict(test.iloc[:,1:])\nprint(finalPred1[:,])","2a824083":"%time finalPred2 = lrModel2.predict(test.iloc[:,1:])\nprint(finalPred2[:,])","75878acb":"outputFile = pd.DataFrame({\"ForecastId\": test.ForecastId,\n                           \"ConfirmedCases\": (finalPred1+0.5).astype('int'),\n                           \"Fatalities\": (finalPred2+0.5).astype('int')})","512fa3f5":"outputFile.sample(3)","5f07fa46":"outputFile.to_csv(\"submission.csv\", index=False)","4e48c880":"## Label encoding:\n### data transformation of non-numeric column \n","ad610c62":"## Prediction using Regression Model\n### Following is a simple approach to transform-non numeric data and using regression technique for prediction.\n\n### Feel free to ask in case of any queries.\n\n### **Please upvote if you found the notebook helpful**","7e920f73":"### Rounding off float values in output columns","0554582a":"## taking on test data","98edbc57":"### The purpose is to give a numeric value for each distinct value of a particular column\n#### We're also cheching if 2 countries are getting 2 different values","a528f7ff":"## data output seggregation","6809ad58":"## train-test split\n### this is being done for the purpose of cross validation","96d3d4f4":"## model2 training : Fatalities","a572e256":"## model1 training : ConfirmedCases"}}