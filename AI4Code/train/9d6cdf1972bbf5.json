{"cell_type":{"4b239705":"code","fa2921f3":"code","27fe282e":"code","1ffeb17e":"code","2693cf66":"code","b5666198":"code","76730567":"code","4de9c7af":"code","6600b25e":"code","0b3f9cde":"code","cfa46e1a":"code","fac3e9d1":"code","be301cb1":"code","c54d053c":"code","c2a02fef":"code","de08b9f5":"code","67481faf":"code","7fa36dd1":"code","1c6898af":"code","011b2122":"code","cf35029b":"markdown","f41530d2":"markdown","14b6ed58":"markdown","b7e6c522":"markdown","9f98857b":"markdown","b1a58b81":"markdown","dafdc1b2":"markdown","1a860231":"markdown","61ba96e7":"markdown"},"source":{"4b239705":"import numpy as np\nimport pandas as pd\nimport keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/working\"))","fa2921f3":"train_data_path = '..\/input\/train.csv'\ntest_data_path = '..\/input\/test.csv'\nweights_file_name = 'mnist_model_weights.h5'\nimg_height = 28\nimg_width = 28","27fe282e":"training_data = pd.read_csv(train_data_path)\ntesting_data = pd.read_csv(test_data_path)","1ffeb17e":"def prepare_image_data(data):        \n    data_copy = data.copy()\n    if 'label' in data_copy.columns:\n            data_copy = data_copy.drop('label', axis=1) \n    data_array = data_copy.values.reshape(-1, img_height, img_width, 1) \/ 255\n    return data_array\n    \ndef prepare_labels(data, number_of_classes):\n    return keras.utils.to_categorical(data.label.values, number_of_classes)\n\ndef show_image(image_array, label):\n    plt.title(str(np.argmax(label)))\n    plt.imshow(image_array.reshape(img_height, img_width))\n    \ndef show_multiple_images(images_array, labels, columns=6, rows=2, figsize=(12,5)):\n    fig = plt.figure(figsize=figsize)\n    for i in range(1, columns*rows +1):\n        fig.add_subplot(rows, columns, i)\n        show_image(images_array[i,:,:,:], labels[i,:])\n    plt.show()","2693cf66":"x = prepare_image_data(training_data)\ny = prepare_labels(training_data, number_of_classes=10)\n\nshow_multiple_images(x, y)","b5666198":"from sklearn.model_selection import train_test_split\nvalidation_percentage = 0.2\n\nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size=validation_percentage)","76730567":"from tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\ndef get_fitted_data_generator(data):\n    data_generator = ImageDataGenerator(rotation_range=5, \n                                        width_shift_range=0.15,\n                                        height_shift_range=0.15, \n                                        zoom_range=0.2)\n    data_generator.fit(data)\n    return data_generator","4de9c7af":"data_generator = get_fitted_data_generator(x[:5,:,:,:])\ngenerated_data_iterator = data_generator.flow(x[:5,:,:,:], y[:5,:], batch_size=1)\nmanipulated_data = [next(generated_data_iterator) for i in range(35)]\n\nmanipulated_images = []\nmanipulated_labels = []\n\nfor item in manipulated_data:\n    manipulated_images.append(item[0])\n    manipulated_labels.append(item[1])\n\nshow_multiple_images(np.array(manipulated_images), np.array(manipulated_labels), rows=5)","6600b25e":"from tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Conv2D, Dense, Flatten, Dropout\nfrom tensorflow.python import keras","0b3f9cde":"nb_filters = 15 # at the moment not used\nstride_size = 2 # at the moment not used\ndense_neurons = 256\nnbr_classes = 10 # from 0 to 9\n\nmnist_model = Sequential()\n\nmnist_model.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu', \n                       input_shape=(img_height, img_width, 1)))\nmnist_model.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu',\n                       strides=2))\nmnist_model.add(Dropout(0.25))\n\nmnist_model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmnist_model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu',\n                      strides=2))\nmnist_model.add(Dropout(0.25))\n                \nmnist_model.add(Flatten())\nmnist_model.add(Dense(dense_neurons, activation='relu'))\nmnist_model.add(Dropout(0.25))\n                \nmnist_model.add(Dense(nbr_classes, activation='softmax'))\n\nmnist_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","cfa46e1a":"nb_filters = 15 # at the moment not used\nstride_size = 2 # at the moment not used\ndense_neurons = 256\nnbr_classes = 10 # from 0 to 9\n\nmnist_sized_up = Sequential()\n\nmnist_sized_up.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu', \n                       input_shape=(img_height, img_width, 1)))\nmnist_sized_up.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu',\n                       strides=2))\nmnist_sized_up.add(Dropout(0.25))\n\nmnist_sized_up.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmnist_sized_up.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmnist_sized_up.add(Dropout(0.25))\n                \nmnist_sized_up.add(Flatten())\nmnist_sized_up.add(Dense(dense_neurons, activation='relu'))\nmnist_sized_up.add(Dropout(0.25))\n\nmnist_sized_up.add(Dense(dense_neurons \/\/ 2, activation='relu'))\nmnist_sized_up.add(Dropout(0.25))\n                \nmnist_sized_up.add(Dense(nbr_classes, activation='softmax'))\n\nmnist_sized_up.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","fac3e9d1":"def fit_model_generator(model, x_train, y_train, epochs=1, batch=36,\n                        use_validation_data=False, val_data=None):\n    \n    image_nbr = np.size(x_train, 0)\n    data_generator = get_fitted_data_generator(x_train)\n    \n    if use_validation_data:\n        return model.fit_generator(data_generator.flow(x_train, y_train, batch_size=batch), \n                                   steps_per_epoch=(image_nbr\/\/batch), epochs=epochs, \n                                   validation_data=val_data, verbose=1)\n    else:\n        return model.fit_generator(data_generator.flow(x_train, y_train, batch_size=batch), \n                                   steps_per_epoch=(image_nbr\/\/batch), epochs=epochs, verbose=1)","be301cb1":"compare_epochs = 30\n\nmnist_model_hist = fit_model_generator(mnist_model, x_train, y_train, epochs=compare_epochs, use_validation_data=True, val_data=(x_val, y_val))\nmnist_sized_up_hist = fit_model_generator(mnist_sized_up, x_train, y_train, epochs=compare_epochs, use_validation_data=True, val_data=(x_val, y_val))","c54d053c":"def plot_model_training_history(training_history):\n    plot_space_compare = plt.figure(figsize=(10, 5))\n\n    plot_space_compare.add_subplot(1, 2, 1)\n    plt.plot(training_history.history['acc'], label='Training')\n    plt.plot(training_history.history['val_acc'], label='Validation')\n    plt.legend(loc='best')\n    plt.title(\"Accuracy\")\n    plt.xlabel(\"Epochs\")\n\n    plot_space_compare.add_subplot(1, 2, 2)\n    plt.plot(training_history.history['loss'], label='Training')\n    plt.plot(training_history.history['val_loss'], label='Validation')\n    plt.legend(loc='best')\n    plt.title(\"Loss\")\n    plt.xlabel(\"Epochs\")\n\n    plt.show()","c2a02fef":"plot_model_training_history(mnist_model_hist)\nplot_model_training_history(mnist_sized_up_hist)","de08b9f5":"epochs = 1\n\nmodel_history = fit_model_generator(mnist_model, x, y, epochs=epochs, use_validation_data=False)","67481faf":"plot_space = plt.figure(figsize=(10, 5))\n\nplot_space.add_subplot(1, 2, 1)\nplt.plot(model_history.history['acc'])\nplt.title(\"Accuracy\")\nplt.xlabel(\"Epochs\")\n\nplot_space.add_subplot(1, 2, 2)\nplt.plot(model_history.history['loss'])\nplt.title(\"Loss\")\nplt.xlabel(\"Epochs\")\n\nplt.show()","7fa36dd1":"validation_x = prepare_image_data(testing_data)\nvalidation_y_one_hot = mnist_model.predict(validation_x)\nvalidation_y = np.array([np.argmax(prediction) for prediction in validation_y_one_hot])","1c6898af":"show_multiple_images(validation_x, validation_y_one_hot)","011b2122":"submission_filename = 'submission_v3.csv'\n\ndata_to_file = pd.DataFrame({'Label':validation_y})\ndata_to_file['ImageId'] = data_to_file.index + 1\ndata_to_file.to_csv(submission_filename, columns=['ImageId', 'Label'], index=False)","cf35029b":"# Fit the model","f41530d2":"# Use model for predictions","14b6ed58":"# Write to file","b7e6c522":"# Compare models","9f98857b":"# Preparing data","b1a58b81":"# Building the models","dafdc1b2":"# Data augmentation","1a860231":"# Parameters","61ba96e7":"# Analyze final model"}}