{"cell_type":{"5c708c41":"code","50bf3dcb":"code","297d8e95":"code","ac6c72c0":"code","4b3db2c4":"code","fa43ec68":"code","71044e84":"code","70c32da0":"code","63bfe47a":"code","6e861395":"code","f9728264":"code","e6bbe7a7":"code","60c9a11d":"code","43c63032":"code","e0f5fd3c":"code","004af858":"code","f4bb29ae":"code","adc420f7":"code","ed30efaf":"code","4044662d":"code","a1973ea5":"code","cb40af52":"code","e5a35663":"code","040782f9":"code","98b8f372":"code","512adb57":"code","f9f5e872":"code","df61a0aa":"code","c58717bb":"code","c8015aab":"code","8705c9f2":"markdown","b392ddf7":"markdown","51695cd3":"markdown","c20b21a0":"markdown"},"source":{"5c708c41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50bf3dcb":"#first get the team standing dataset\nteams = pd.read_csv('..\/input\/formula-1-20102021\/f1_2010-2021\/constructor_standings_2010-2021.csv')\nteams.head()","297d8e95":"teams.info()","ac6c72c0":"#change the index columns to position\nteams.rename(columns={'index':'position'},inplace=True)\n","4b3db2c4":"#change the position to real to real life postions. like 0 to 1 and so on. \nfor i in range(len(teams)):\n    teams['position'][i] = teams['position'][i] + 1  \nteams    ","fa43ec68":"unique_years = teams['year'].nunique()\nunique_years","71044e84":"sum_of_all_points_each_team = teams.groupby(['team'])['points'].sum()\nprint(sum_of_all_points_each_team)","70c32da0":"Average_point_season = (sum_of_all_points_each_team \/ unique_years)\nAverage_point_season = pd.DataFrame(Average_point_season)\nAverage_point_season","63bfe47a":"Average_point_season.reset_index(level=0, inplace=True)\nAverage_point_season","6e861395":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(20,10))\nplt.xticks(rotation=90)\nplt.title(\"Average Points per season\")\nfor i in range(len(Average_point_season)):\n    plt.annotate(str(round(Average_point_season['points'][i],2)), xy=(Average_point_season.index[i],Average_point_season['points'][i]), ha='center', va='bottom')\n\nsns.barplot(x='team',y='points',data=Average_point_season)","f9728264":"#which team scored the maximum point each year\n\nmaximum_point_each_year = pd.DataFrame(teams[teams.groupby(['year'])['points'].transform('max') == teams['points']])\nmaximum_point_each_year","e6bbe7a7":"#fixin the index\nmaximum_point_each_year.reset_index(level=0, inplace=True)\nmaximum_point_each_year.drop('index',axis=1,inplace=True)\nmaximum_point_each_year","60c9a11d":"plt.figure(figsize=(15,10))\nplt.xticks(rotation=90)\nplt.title(\"Which team scored the maximum point each year\")\nfor i in range(len(maximum_point_each_year)):\n    plt.annotate(str(maximum_point_each_year['team'][i]), xy=(maximum_point_each_year.index[i],maximum_point_each_year['points'][i]), ha='center', va='bottom')\n\n\nsns.barplot(x='year',y='points',data=maximum_point_each_year)","43c63032":"drivers = pd.read_csv('..\/input\/formula-1-20102021\/f1_2010-2021\/driver_standings_2010-2021.csv')\ndrivers","e0f5fd3c":"drivers.info()","004af858":"#Again change the column index to position\ndrivers.rename(columns={'index':'position'},inplace=True)\ndrivers","f4bb29ae":"#Change postions to real life positions\nfor i in range(len(drivers)):\n    drivers['position'][i] = drivers['position'][i] + 1  \ndrivers","adc420f7":"#combine name and surname column\ndrivers['name'] = drivers[['name','surname']].agg(\" \".join,axis=1)\ndrivers","ed30efaf":"#drop the surname column\ndrivers.drop('surname',axis=1,inplace=True)\ndrivers","4044662d":"len(drivers)","a1973ea5":"#get which nation won the 1st position in last decade\nmost_wins=[]\nfor i in range(0,(len(drivers))):\n    if drivers['position'][i] == 1:\n        most_wins.append(drivers['nationality'][i])\n        \nmost_wins = pd.DataFrame(most_wins,columns=['wins'])\nmost_wins","cb40af52":"sns.countplot(x='wins',data=most_wins)","e5a35663":"maximum_point_drivers = pd.DataFrame(drivers[drivers.groupby(['year'])['points'].transform('max') == drivers['points']])\nmaximum_point_drivers","040782f9":"Nations = drivers.groupby(['nationality'])['points'].max().sort_values(ascending=False)\nNations = pd.DataFrame(Nations)\nNations.reset_index(level=0,inplace=True)\nNations","98b8f372":"#Which nation won the most races in last decade\nplt.figure(figsize=(15,10))\nplt.title(\"Which nation won the most points in last decade\")\nfor i in range(len(Nations)):\n    plt.annotate(str(Nations['points'][i]), xy=(Nations.index[i],Nations['points'][i]), ha='center', va='bottom')\n\nsns.barplot(x='nationality',y='points',data=Nations)","512adb57":"f1 = pd.read_csv('..\/input\/formula-1-20102021\/f1_2010-2021\/f1_2010-2021.csv')\nf1","f9f5e872":"f1['name'] = f1[['name','surname']].agg(\" \".join,axis=1)\nf1","df61a0aa":"f1.drop('surname',axis=1,inplace=True)\nf1","c58717bb":"f1.info()","c8015aab":"#I want to calculate which driver complete the fastest lap","8705c9f2":"Now we will explore the last csv file","b392ddf7":"Here we can see that data is not updated with the final race of 21 season thats why the points of Max verstappen and Lewis hamiltion are same, so we will leave it here. ","51695cd3":"Now we will explore driver standing dataset","c20b21a0":"This Notebook is still in progress"}}