{"cell_type":{"00bf0676":"code","d09b965a":"code","16129aae":"code","54a4216f":"code","bffdde91":"code","f1421d10":"code","f0964865":"code","323e6386":"code","5b26c2ee":"code","ecf36439":"code","3d77a5a2":"code","bc1a6bdc":"code","6debe961":"code","f5c1fd92":"code","7a152a51":"code","d02d063e":"code","43567ab0":"code","00032714":"code","6a5f925b":"code","073760ef":"markdown","46fc231e":"markdown","2749782b":"markdown","8002094d":"markdown","1f57b404":"markdown","ff430706":"markdown","34283b4a":"markdown","d95b9f18":"markdown","d9b10c8d":"markdown"},"source":{"00bf0676":"%pylab inline\n\nfrom matplotlib.pyplot import style\nimport matplotlib.pyplot as plt\n\n# use custom plots from minibrain\nstyle.use('https:\/\/raw.githubusercontent.com\/JoseGuzman\/minibrain\/master\/minibrain\/paper.mplstyle')\n\nimport pandas as pd","d09b965a":"mydata = pd.read_csv('..\/input\/y79-retinoblastoma-cells\/Y79_data.csv', index_col='uid')\nprint(f'{mydata.shape[0]} observations')\nmydata","16129aae":"from scipy.stats import lognorm","54a4216f":"# Define gaussian mixture\ndef gauss(x,mu,sigma,A):\n    \"\"\"\n    Solves the Gaussian function of the form:\n    f(x; mu, sigma, A), where\n    \n    x is the observation\n    mu is the location of the mean\n    sigma is the standard deviation\n    A is the amplitude of the Gaussian function.\n    \"\"\"\n    return A*exp(-(x-mu)**2\/2\/sigma**2)\n\ndef bimodal(x,mu1,sigma1,A1,mu2,sigma2,A2):\n    return gauss(x,mu1,sigma1,A1)+gauss(x,mu2,sigma2,A2)","bffdde91":"from scipy.optimize import curve_fit","f1421d10":"diameters = mydata.diameter.values\n\nplt.figure(figsize=(6,2))\nmybins = np.arange(0,80,2)\ny, x, _ = plt.hist(diameters, mybins, color='C0', alpha =0.3)\n\nx=(x[1:]+x[:-1])\/2 # for len(x)==len(y)\n\nexpected = (15, 10, 20, 50, 20, 10)\n\nparams,cov = curve_fit(bimodal,x,y,expected)\nxfit = np.linspace(0,80,200)\n\nplt.plot(xfit,bimodal(xfit,*params), color='k', lw=2)\nplt.ylabel('Observations');\nplt.xlabel('Cell diameter ($\\mu$m)');\nplt.xticks(np.arange(0,100,25));\n\nsigma = np.sqrt(np.diag(cov))\nfit_diam = pd.DataFrame(data={'params':params,'sigma':sigma},index=bimodal.__code__.co_varnames[1:])\nfit_diam","f0964865":"vrest = mydata.Vmb.values\n\nplt.figure(figsize=(6,2))\nmybins = np.arange(-80,10,5)\ny, x, _ = plt.hist(vrest, mybins, color='C0', alpha =0.3)\n\nx=(x[1:]+x[:-1])\/2 # for len(x)==len(y)\n\nexpected = (-70, 5, 2, -20, 10, 10)\n\nparams,cov = curve_fit(bimodal,x,y,expected)\nxfit = np.linspace(-80, 10,200)\n\nplt.plot(xfit,bimodal(xfit,*params), color='k', lw=2);\nplt.ylabel('Observations');\nplt.xlabel('Resting membrane potential (mV)');\n\nsigma = np.sqrt(np.diag(cov))\nfit_vrest = pd.DataFrame(data={'params':params,'sigma':sigma},index=bimodal.__code__.co_varnames[1:])\nfit_vrest","323e6386":"fit_diam.params.mu1, fit_vrest.params.mu1","5b26c2ee":"grid = plt.GridSpec(5,5, wspace= 0.05, hspace = 0.05)\nfig = plt.figure(figsize=(4,4))\n\n# scatter plot\ndots = fig.add_subplot(grid[1:5, 0:4])\nmymaks = np.isnan(mydata.Vmb.values)\ny = np.ma.array(mydata.Vmb.values, mask = mymaks).compressed()\nx = np.ma.array(mydata.diameter.values, mask = mymaks).compressed()\n# centroid for \ndots.scatter(x,y,s=4, color='k')\nmymarker = dict(markersize = 12, color='red', alpha = 0.5)\ndots.plot(fit_diam.params.mu1,fit_vrest.params.mu2, marker='X', **mymarker)\ndots.plot(fit_diam.params.mu2,fit_vrest.params.mu1, marker='X', **mymarker)\n\ndots.set_yticks(np.arange(-80,10,20));\ndots.set_xticks(np.arange(0,100,25));\ndots.set_xlim(0,80)\ndots.set_xlabel('Cell diameter ($\\mu$m)', fontsize=12);\ndots.set_ylim(-80, 0)\ndots.set_ylabel('Membrane potential (mV)', fontsize=12)\nmyparams = dict(color='gray', linestyle='-.', lw=1)\ndots.hlines(fit_vrest.params.mu1, xmin = fit_diam.params.mu2, xmax = 80, **myparams)\ndots.hlines(fit_vrest.params.mu2, xmin = fit_diam.params.mu1, xmax = 80, **myparams)\ndots.vlines(fit_diam.params.mu1, ymin = 0, ymax = fit_vrest.params.mu2, **myparams)\ndots.vlines(fit_diam.params.mu2, ymin = 0, ymax = fit_vrest.params.mu1,**myparams)\n\n# up histogram\nup = fig.add_subplot(grid[0, 0:4])\nmybins = np.arange(0,80,3)\ny, x, _ = up.hist(diameters, mybins, color='C0', alpha =0.3)\nx=(x[1:]+x[:-1])\/2 # for len(x)==len(y)\nexpected = (15, 10, 20, 70, 20, 10)\n\nparams,cov = curve_fit(bimodal,x,y,expected)\nxfit = np.linspace(0,80,200)\nup.plot(xfit,bimodal(xfit,*params), color='k', lw=2)\nup.set_xticks(np.arange(0,100,25));\nup.set_xlim(0,80)\nup.axis('off')\n\n# left histogram\nleft = fig.add_subplot(grid[1:5,4:5])\nmybins = np.arange(-80,10,5)\ny, x, _ = left.hist(vrest, mybins, color='C0', alpha =0.3, orientation='horizontal')\nx=(x[1:]+x[:-1])\/2 # for len(x)==len(y)\nexpected = (-70, 5, 2, -20, 10, 10)\n\nparams,cov = curve_fit(bimodal,x,y,expected)\nxfit = np.linspace(-80, 0,200)\nleft.plot(bimodal(xfit,*params), xfit, color='k', lw=2);\n#left.set_xticks(np.arange(0,100,25));\nleft.set_ylim(-80,0);\nleft.axis('off');\n\n","ecf36439":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans","3d77a5a2":"myscaler = StandardScaler()\nz_score = myscaler.fit_transform(mydata)","bc1a6bdc":"myscaler.mean_, myscaler.scale_","6debe961":"cfs = KMeans(n_clusters=2).fit(z_score)","f5c1fd92":"# Add groups and colors\nmydata['kgroup'] = cfs.labels_\n\n\nidx_up   = np.where(cfs.labels_ == cfs.labels_[np.argmax(mydata.Vmb.values)])\nidx_down = np.where(cfs.labels_ == cfs.labels_[np.argmin(mydata.Vmb.values)])[0]\n\nmyblue = '#55a0fb'\nmyred = '#f94040'\n\n# assign color according to index (up is blue, down in red)\nmydata['kcolor'] = myblue\nred_idx = mydata.iloc[idx_down].index\nmydata.loc[red_idx, 'kcolor'] = myred","7a152a51":"from scipy.spatial.distance import cdist\n\ndef plot_radii(mykmeans, X, mycolors, ax = None):\n    \"\"\"\n    Plots k-centroids from a kmeans model\n    \n    Arguments\n    ---------\n    mykmeans (Kmeans object)\n        (sklearn.sklearn.cluster.Kmeans model)\n    \n    X (2D-Numpy array)\n        The observations ith the observations)\n        \n    mycolors (list)\n        a 2-element list with rgbcolors (eg., ['#55a0fb', '#f94040'])\n    \n    ax (an axis object)\n    \"\"\"\n    # plot the input data\n    ax = ax or plt.gca()\n    \n    labels = mykmeans.labels_ # read labels\n\n    centers = myscaler.inverse_transform(mykmeans.cluster_centers_) # centroids corrected for normalization!\n    radii = [cdist(X[labels == i], [center]).max() for i, center in enumerate(centers)]\n    \n    \n    for center, r , mycolor in zip(centers, radii, mycolors):\n        x,y = center\n        print(f'center: {x,y}, radius: {r:2.4f}, color: {mycolor}')\n        \n        mycircle = plt.Circle((x,y), r, color= mycolor, lw=2, alpha=0.15, zorder=1, fill=1)\n        ax.add_patch(mycircle)\n        ax.plot(x,y, marker = 'P', color = mycolor, markersize =10, alpha= .5)","d02d063e":"fig, ax = plt.subplots(1,2, figsize = (8,4))\nfig.tight_layout()\n\nax[0].scatter(mydata.diameter, mydata.Vmb, c = mydata.kcolor, s = 20)\n\nplot_radii(mykmeans = cfs, X = mydata.values[:,0:2], mycolors=[myred, myblue], ax=ax[1])\nax[1].scatter(mydata.diameter, mydata.Vmb, c = mydata.kcolor, s = 20)\n\nfor myax in ax:\n    myax.set_xlabel(\"Cell diameter ($\\mu$m)\");\n    myax.set_ylabel('Membrane potential (mV)');\n    myax.set_yticks(np.arange(-80,10,20));\n    myax.set_xticks(np.arange(0,100,25));\n#plt.savefig('.\/figures\/K-means.tiff', dpi = 300, bbox_inches='tight')","43567ab0":"mydata.head()","00032714":"inertia = list()\nfor k in range(2,20):\n    clf = KMeans(n_clusters = k, init = 'k-means++').fit(z_score)\n    inertia.append( clf.inertia_)\n\n    ","6a5f925b":"idx = np.arange(1, len(inertia) + 1)\n\nfig, ax = plt.subplots(2, 1, figsize=(4,4), sharex=True)\n\nax[0].plot(idx, inertia, '-', color='gray', alpha = 0.4)\nax[0].plot(idx, inertia, 'ko', ms=6)\nax[0].set_xticks([1,2,3,4,5, 10, 15])\n\nax[0].set_ylabel('Inertia');\n\nacceleration = np.diff(np.sqrt(inertia), 2)  # 2nd derivative of the distances\n\nax[1].plot(idx[:-2] + 1, acceleration, 'g-', ms=8)\nax[1].set_ylabel('Acceleration')\nax[1].set_xlabel('K-clusters')\n\n\n# calculate clusters\nk = acceleration.argmax() + 2  # if idx 0 is the max of this we want 2 clusters\nax[0].vlines(x = k, ymin = 0, ymax = inertia[k-1], color='brown', linestyle='--')\nax[1].vlines(x = k, ymin = 0, ymax = acceleration[k-2], color='gray', linestyle='--', alpha=0.7)\n\nprint(f'Number of optimal k-clusters: {k}')","073760ef":"# Load data\n\nThe dataset contains 95 observations of diameters (in micrometers) and membrane potentials (in milivolts).","46fc231e":"# Cluster with two centroids ","2749782b":"# Calculate inertias\n\nThe inertia is the sum of squared distance for each point to it's closest centroid:\n<math>\n$$ \\sum_{i = 1}^{n}{d(x_i, c_k)^2} ,$$\n<\/math>\n\nwhere $n$ is the number of points,  $c_k$ is the k-centroid, and $d()$ is the euclidian distance.\n\nTo detect the minimal number of clusters, we can compute the second derivative of the inertia. Because the inertias are distances, the second derivative can be seen as acceleration, and it gives us an estimation of the largest inertias deviation versus de number of clusters.","8002094d":"## Bimodal distribution of cell diameters","1f57b404":"## Plot all together","ff430706":"The center of mass from the two Gaussian distrubutions (red crosses) are slightly separated from the cloud of\ndata. We will attempt now to classify with a K-means algorithm.","34283b4a":"## Bimodal distribution of cell resting membrane potential","d95b9f18":"We will first attempt to fit both features to gaussian distributions.","d9b10c8d":"# K-means classification\n\nThis notebook will [classify Y79 human retinoblastoma cells](https:\/\/www.wikidata.org\/wiki\/Q54995129) according to cell size and resting membrane potential. The classification will assign each observation to the clusters of observations nearest to a centroid (the center of mass of the distances in a circle)."}}