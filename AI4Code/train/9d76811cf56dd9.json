{"cell_type":{"dfd3fb9d":"code","f4de0061":"code","fda7da44":"code","c0182291":"code","bc8446f2":"code","4d1c4713":"code","2377d9ee":"code","5abf2767":"code","1c4318cc":"code","85445c88":"code","f67a8391":"code","94cc96d3":"code","4b649049":"code","ae8827cc":"code","32deee34":"code","8769fc62":"code","be51f244":"code","6f731659":"code","c46de6a4":"code","7c464346":"code","c9654cde":"code","bde77bbd":"code","4ff55ac7":"code","d443c2ce":"code","a0e19fd4":"code","10d35c57":"code","88db42d2":"code","215720d7":"code","adee9b98":"code","349d6b44":"code","a2716215":"code","6abd78a5":"code","3f482f2a":"code","ba6fb861":"markdown","a34dca88":"markdown","d9b867cc":"markdown","86115048":"markdown","7c32c09f":"markdown","a3723928":"markdown","c46b6fcc":"markdown","297ee5b1":"markdown"},"source":{"dfd3fb9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4de0061":"df_train = pd.read_csv(\"\/kaggle\/input\/mobile-price-classification\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/mobile-price-classification\/test.csv\")","fda7da44":"df_train.head()","c0182291":"df_train.describe()","bc8446f2":"df_test.head()","4d1c4713":"print(\"Train Shape:\",df_train.shape)\nprint(\"Test Shape: \",df_test.shape)","2377d9ee":"df_train.info()","5abf2767":"df_train.isnull().sum()","1c4318cc":"df_test.isnull().sum()","85445c88":"df_train.nunique().sort_values(ascending=False)","f67a8391":"df_test.nunique().sort_values(ascending=False)","94cc96d3":"sns.countplot(x='price_range',data=df_train)","4b649049":"df_train.columns","ae8827cc":"sns.countplot(x='n_cores', data=df_train)","32deee34":"sns.countplot(x='four_g', data=df_train)","8769fc62":"sns.countplot(x='dual_sim', data=df_train)","be51f244":"sns.countplot(x='touch_screen', data=df_train)","6f731659":"sns.countplot(x='wifi', data=df_train)","c46de6a4":"sns.displot(x='ram',y='price_range',data=df_train)","7c464346":"sns.displot(x='px_width',y='price_range',data=df_train)","c9654cde":"sns.displot(x='int_memory',y='price_range',data=df_train)","bde77bbd":"sns.histplot(x='mobile_wt',y='price_range',data=df_train)\nsns.displot(x='clock_speed',y='price_range',data=df_train)\nsns.displot(x='pc',y='price_range',data=df_train)\nsns.displot(x='talk_time',y='price_range',data=df_train)\nsns.displot(x='sc_w',y='price_range',data=df_train)\nsns.displot(x='sc_h',y='price_range',data=df_train)\nsns.displot(x='m_dep',y='price_range',data=df_train)","4ff55ac7":"sns.heatmap(df_train.corr(),cmap=\"RdYlGn\")","d443c2ce":"print(f'Co-Relation High to Low:\\n{df_train.corr().price_range.sort_values(ascending=False)}')","a0e19fd4":"# Load libraries\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn.metrics import accuracy_score #Import scikit-learn metrics module for accuracy score\nfrom sklearn.metrics import confusion_matrix #Import scikit-learn metrics module for confusion metrics\nfrom sklearn.metrics import classification_report","10d35c57":"df_train.columns","88db42d2":"X = df_train[['battery_power', 'blue', 'clock_speed', 'dual_sim', 'fc', 'four_g','int_memory', 'm_dep', 'mobile_wt', 'n_cores', 'pc', 'px_height','px_width', 'ram', 'sc_h', 'sc_w', 'talk_time', 'three_g','touch_screen', 'wifi']]\ny = df_train['price_range']","215720d7":"# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","adee9b98":"# Create Decision Tree classifer object\nclf = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(X_test)","349d6b44":"print(\"Accuracy:\",accuracy_score(y_test, y_pred))","a2716215":"confusion_m = confusion_matrix(y_test, y_pred)\nsns.heatmap(confusion_m,annot=True,cmap=\"RdYlGn\")","6abd78a5":"confusion_m","3f482f2a":"print(classification_report(y_test, y_pred))","ba6fb861":"**Classification Report**","a34dca88":"# Data Co-Relation","d9b867cc":"# EDA","86115048":"# **Mobile Features**\n\n* ID\n* Battery\n* Bluetooth\n* Clock Speed\n* Dual Sim\n* Front Camera\n* 4G\n* Internal Memory\n* Mobile Depth\n* Weight\n* Cores\n* Primary Camera\n* Pixel Resolution Height\n* Pixel Resolution Width\n* Ram\n* Screen Height\n* Screen Width\n* Talk Time\n* 3G\n* Touch Screen\n* Wifi\n* Price Range ","7c32c09f":"**Confusion Matrix**","a3723928":"## Decision Tree Classifier","c46b6fcc":"**Model Accuracy**","297ee5b1":"### Building Decision Tree Model"}}