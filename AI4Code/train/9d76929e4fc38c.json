{"cell_type":{"d4c18cbc":"code","dd3952b6":"code","8518ade0":"code","ed4d902d":"code","578e4305":"code","f58739cf":"code","12ea10ea":"code","b909381e":"code","fff90c90":"code","708c80fe":"code","ffe5da7f":"code","548d297d":"code","b1913e2b":"code","e7107972":"code","fcef23db":"code","c9c5df5a":"code","1bb163c5":"code","2bc8a683":"code","610c7243":"code","d89ba38b":"code","ced67dab":"code","f3a2ed6e":"code","625da827":"code","907e7359":"markdown","08985dc0":"markdown","b882b351":"markdown","abef05c6":"markdown","2956cb22":"markdown","f24dd7f5":"markdown"},"source":{"d4c18cbc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd3952b6":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf.head()","8518ade0":"df.shape","ed4d902d":"df[\"title\"].nunique()","578e4305":"df[\"title\"].value_counts().head()","f58739cf":"# 1000 \u00fczeri yorum yap\u0131lan filmlerin se\u00e7ilmesi\n\ncomment_counts = pd.DataFrame(df[\"title\"].value_counts())\nrare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]\ncommon_movies.shape","12ea10ea":"# User movie df'inin olu\u015fturulmas\u0131.\nuser_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\nuser_movie_df.shape\nuser_movie_df.head(10)\nuser_movie_df.columns\nlen(user_movie_df.columns)\ncommon_movies[\"title\"].nunique()","b909381e":"#Rastgele bir kullan\u0131c\u0131 id buluyoruz ve se\u00e7ti\u011fimiz kullan\u0131c\u0131n\u0131n id numaras\u0131n\u0131n user_movie verisinde ge\u00e7ti\u011fi sat\u0131rlar\u0131 bulup veriyi indirgiyoruz.\nrandom_user = int(pd.Series(user_movie_df.index).sample(1, random_state=45).values)\nrandom_user_df = user_movie_df[user_movie_df.index == random_user]\nrandom_user_df","fff90c90":"movies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\nmovies_watched","708c80fe":"user_movie_df.loc[user_movie_df.index == random_user, user_movie_df.columns == \"American President, The (1995)\"]\nlen(movies_watched)","ffe5da7f":"perc = len(movies_watched)*0.6 #esik deger olarak alinir\nmovies_watched_df = user_movie_df[movies_watched]\nuser_movie_count = movies_watched_df.T.notnull().sum()\nuser_movie_count = user_movie_count.reset_index()\nuser_movie_count.columns = [\"userId\", \"movie_count\"]\n#Ayn\u0131 filmler i\u00e7inden en az 40 tanesini izlemi\u015f ki\u015filer (%60)\nuser_movie_count[user_movie_count[\"movie_count\"] > perc].sort_values(\"movie_count\", ascending=False)\n#Tamamen ayn\u0131 filmleri izleyen ki\u015filer\nuser_movie_count[user_movie_count[\"movie_count\"] == 65].count()\nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc][\"userId\"]\nusers_same_movies.count()\n#1160 kullanici ayni filmleri izlemis.\n\n","548d297d":"users_same_movies.head(10)\n","b1913e2b":"final_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies.index)],\n                      random_user_df[movies_watched]])\nfinal_df.head()","e7107972":"corr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()\ncorr_df.head()","fcef23db":"##%65 korelasyona sahip kisi sayisi:\ntop_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65)][[\"user_id_2\", \"corr\"]].reset_index(drop=True)\n\ntop_users = top_users.sort_values(by='corr', ascending=False)\ntop_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\nrating =pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\ntop_users.head()\n#ayni korelasyona sahip kullanici sayisi 25 ","c9c5df5a":"# weighted_rating'in hesaplanmas\u0131.\n\ntop_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != random_user]","1bb163c5":"top_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\ntop_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\n\nrecommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()","2bc8a683":"#3.7 \u00fczeri puan alan filmler\n\nrecommendation_df[recommendation_df[\"weighted_rating\"] > 3.7].head(10)","610c7243":"movies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 3.7].sort_values(\"weighted_rating\", ascending=False)","d89ba38b":"#Film adlarini bulmay\u0131 hedefledi\u011fimiz takdirde ; \n\nmovie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]]).head(5)","ced67dab":"movie_id = rating[(rating[\"userId\"] == random_user) & (rating[\"rating\"] == 5.0)]. \\\n    sort_values(by = \"timestamp\", ascending = False)[\"movieId\"][0:1].values[0]","f3a2ed6e":"#User Based Kullanarak \u00d6neri\nmovies_to_be_recommend.merge(movie[[\"movieId\",\"title\"]])[\"title\"].head(5)","625da827":"# Item-Based kullanarak \u00f6neri\nmovie_name = movie[movie['movieId'] == movie_id][\"title\"].values[0]\nmovie_name = user_movie_df[movie_name]\nmovie_from_item_based = user_movie_df.corrwith(movie_name).sort_values(ascending = False)\nmovie_from_item_based[1:6].index.to_list()","907e7359":"# G\u00f6rev 4","08985dc0":"# G\u00f6rev 3","b882b351":"# G\u00f6rev 2","abef05c6":"# G\u00f6rev 6","2956cb22":"# G\u00f6rev 5","f24dd7f5":"# G\u00f6rev 1"}}