{"cell_type":{"53f37fb9":"code","0008fadd":"code","537da55e":"code","1648e278":"code","27c62fa3":"code","a5d8c6b2":"code","7e5b3f2e":"code","d61c3a9b":"code","f50c000e":"code","d46d22a3":"code","55a6dff4":"code","5de623ab":"code","bc791595":"code","be4987f7":"code","fab47e1c":"code","65128488":"code","d7f0dbec":"code","d711b697":"code","1aaf849a":"code","96c15de8":"code","efc17d04":"code","283f2ff1":"code","bbad855e":"code","3ca8a20b":"code","355c4e4c":"code","8a0b3e29":"code","2f67e341":"code","9fb7ce89":"code","0d4fce77":"code","bfb116df":"code","5f57c125":"code","939fe507":"code","0a7f436b":"code","d33561e7":"code","f1cac726":"code","e10d9a4b":"code","ac1e4971":"code","86f763d9":"code","9d95ebe3":"code","940b00c6":"code","ab29fed9":"code","660fcb44":"code","cfeef043":"markdown","2e166320":"markdown","778d46ed":"markdown","db5fd360":"markdown","eeb2e82b":"markdown","f3e4640b":"markdown","fb256b18":"markdown","37c2a1f9":"markdown","e29ad637":"markdown","64eacf5f":"markdown","84563eb9":"markdown","51fb0cfe":"markdown","9466f17c":"markdown","b8d15f5d":"markdown","58d45676":"markdown","2ab30236":"markdown","a06c9610":"markdown","03f5ff1f":"markdown","3976fed9":"markdown","2314f37a":"markdown","3f6a1086":"markdown","58bd60ae":"markdown","fc6e98ae":"markdown","284ee868":"markdown","096d69e6":"markdown","05cfb1df":"markdown","669b0e71":"markdown"},"source":{"53f37fb9":"import numpy as np \nimport pandas as pd\nimport pandas_profiling\nimport warnings\nwarnings.filterwarnings('ignore')\nimport datetime\nfrom datetime import date\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set_style(\"whitegrid\")\n\n# import chart_studio.plotly as py\nimport cufflinks as cf\nimport plotly.express as px\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\ncf.go_offline()\n\nimport pandas_profiling\nimport plotly.graph_objects as go\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nimport xgboost as xg\n# from prophet import Prophet","0008fadd":"df=pd.read_csv('..\/input\/daily-website-visitors\/daily-website-visitors.csv')\n\ndf.rename(columns = {'Day.Of.Week':'day_of_week'\n                    ,'Page.Loads':'page_loads'\n                    ,'Unique.Visits':'unique_visits'\n                    ,'First.Time.Visits':'first_visits'\n                    ,'Returning.Visits':'returning_visits'}, inplace = True)\n\ndf=df.replace(',','',regex=True)\n\ndf['page_loads']=df['page_loads'].astype(int)\ndf['unique_visits']=df['unique_visits'].astype(int)\ndf['first_visits']=df['first_visits'].astype(int)\ndf['returning_visits']=df['returning_visits'].astype(int)\n\ndf","537da55e":"df.isna().sum()","1648e278":"df.duplicated().sum()","27c62fa3":"df.info()","a5d8c6b2":"px.line(df,x='Date',y=['page_loads' ,'unique_visits' ,'first_visits' ,'returning_visits'],\n       labels={'value':'Visits'}\n       ,title='Page Loads & visitors over Time')","7e5b3f2e":"px.histogram(df,x='unique_visits',color='Day',title='unique visits for each day')","d61c3a9b":"day_imp=df.groupby(['Day'])['unique_visits'].agg(['sum']).sort_values(by='sum',ascending=False)\npx.bar(day_imp,labels={'value':'sum of unique visits'},title='Sum of Unique visits for each day')","f50c000e":"px.histogram(df,x='Date',y='unique_visits',color='Day',title='Sum of unique visits for each day over Time')","d46d22a3":"sums=df.groupby(['Day'])[['page_loads' ,'unique_visits' ,'first_visits' ,'returning_visits']].sum().sort_values(\n    by='unique_visits',ascending=False)\nsums","55a6dff4":"px.bar(sums,barmode='group',title='Sum of page loads and visits for each of their days')","5de623ab":"px.density_heatmap(df, x='Date',y=['page_loads' ,'unique_visits' ,'first_visits' ,'returning_visits']\n#                    color_continuous_scale=\"Viridis\"\n                   ,marginal_x=\"histogram\", marginal_y=\"histogram\",title='Correlation for each data point')","bc791595":"fig, ax = plt.subplots()\nfig.set_size_inches(8, 6)\nsns.heatmap(df[['page_loads' ,'unique_visits' ,'first_visits' ,'returning_visits']].corr(),\n            annot=True,\n            cmap='viridis_r', \n            fmt='g')","be4987f7":"px.scatter_matrix(df[['page_loads' ,'unique_visits' ,'first_visits' ,'returning_visits']])","fab47e1c":"px.scatter(\n    df, x='first_visits', y='unique_visits',opacity=0.4,\n    trendline='ols', trendline_color_override='purple',title=\"Regression line for unique visits and first visits\"\n)","65128488":"px.violin(df,y=['page_loads' ,'unique_visits' ,'first_visits' ,'returning_visits'],box=True,points='all')","d7f0dbec":"pred_df=df[['page_loads' ,'unique_visits' ,'first_visits' ,'returning_visits','Day']]","d711b697":"pred_df['days_f']=np.where((df['Day']=='Tuesday') | \n                      (df['Day']=='Wednesday') | \n                      (df['Day']=='Thursday') |\n                      (df['Day']=='Monday'),1,0)\n\npred_df","1aaf849a":"pred_df.drop('Day',axis=1,inplace=True)\n# drop the days column as we don't need it anymore","96c15de8":"pred_df.head(5)","efc17d04":"X2=pred_df[['page_loads','first_visits' ,'returning_visits','days_f']]\ny2=pred_df['unique_visits']","283f2ff1":"X_train, X_test, y_train, y_test = train_test_split(X2, y2, test_size=0.3,random_state=42)","bbad855e":"regressor2 = LinearRegression(fit_intercept=False,normalize=True)\nregressor2.fit(X_train, y_train)","3ca8a20b":"y_pred2 = regressor2.predict(X_test)","355c4e4c":"lr2 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred2})\nlr2","8a0b3e29":"plt.figure(figsize=(16,8))\nsns.lineplot(data=lr2)","2f67e341":"regressor2.score(X_test,y_test)*100","9fb7ce89":"svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.00001)\nsvr_rbf.fit(X_train, y_train)","0d4fce77":"y_pred3 = svr_rbf.predict(X_test)","bfb116df":"svr = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred3})\nsvr","5f57c125":"plt.figure(figsize=(16,8))\nsns.lineplot(data=svr)","939fe507":"svr_rbf.score(X_test,y_test)*100","0a7f436b":"dtr = DecisionTreeRegressor(random_state=0)\ndtr.fit(X_train, y_train)","d33561e7":"dtr_pred = dtr.predict(X_test)","f1cac726":"dtr_g = pd.DataFrame({'Actual': y_test, 'Predicted': dtr_pred})\ndtr_g","e10d9a4b":"plt.figure(figsize=(16,8))\nsns.lineplot(data=dtr_g)","ac1e4971":"dtr.score(X_test,y_test)*100","86f763d9":"xgb_r = xg.XGBRegressor(objective ='reg:squarederror',n_estimators = 10, seed = 123)\nxgb_r.fit(X_train, y_train)","9d95ebe3":"xgb_pred = xgb_r.predict(X_test)","940b00c6":"xgb_df = pd.DataFrame({'Actual': y_test, 'Predicted': xgb_pred})\nxgb_df","ab29fed9":"plt.figure(figsize=(16,8))\nsns.lineplot(data=xgb_df)","660fcb44":"xgb_r.score(X_test,y_test)*100","cfeef043":"XGboost regression","2e166320":"split the dataset in train and test samples now","778d46ed":"visualize the actual and predicted values","db5fd360":"Importing the required dataset, renaming the columns, removing the commas from the columns and converting their \ndata types ","eeb2e82b":"Tuesday, wednesday, thursday and monday are the days when our website received the most traffic so we will create a feature days_f of them 1 value will define their existence and 0 will define the rest of the days.","f3e4640b":"get the accuacy score of the model.","fb256b18":"this scatter matrix plot shows the paired plot of page_loads \tunique_visits \tfirst_visits \treturning_visits we can see that unique visits and first visits have a straight upward line, that means that first visits are increasing as the unique visits increase. we can also other pairs and identify their level of correlation visualy.\n\nThe last thing we need is to visualize the trend line.","37c2a1f9":"this grouped bar chart comes from the crosstab above and it shows the sum of page_loads, unique_visits, first_visits, returning_visits for each day ","e29ad637":"Checking for duplicate values if any","64eacf5f":"This is a heatmap graph that shows the correlation of each datapoint from page_loads, unique_visits, first_visits , returning_visits columns, first visits seems to have a great correlation with unique visits.\n\nThe Yellow points indicate a great correlation between first visits and unique visits, but we don't how much let's find that out","84563eb9":"Support Vector Regression","51fb0cfe":"we only need these columns ","9466f17c":"Decision Tree Regression","b8d15f5d":"generating line plot for visualizing the trend of page loads and visits over time series, it seems that page loads and visits have a constant fluctuation, means they have trend over time and are correlated to each other.","58d45676":"Multi Linear Regression model","2ab30236":"there are no outliears that need to be dealt with, data is tightly packed with no dispersion except for returning visits, this column was also less correlated with our target variable.  ","a06c9610":"sum of unique visits for each week day over time series, we know which days get the most traffic but on what time intervals ? this graph answers to that question.\n\ntime intervals are grouped according to their relation with unique visits and days, now we can understand that in  which days, months and years did the website get the most traffic. ","03f5ff1f":"With this bar plot it is clear that tuesday, wednesday, monday and thursday are the days in a week when extensive amount of traffic come to this website  ","3976fed9":"this shows the paired correlation of page_loads \tunique_visits \tfirst_visits \treturning_visits columns with annotated values we know that first visits and unique visits are correlated by 0.99 which is a great correlation and page loads have a good correlation with our target variable as well.\n\nlet's see how the correlation looks like in our next plot.","2314f37a":"Checking for the null values if any","3f6a1086":"separate the independent variable and dependent \/ target variable ","58bd60ae":"Okay now we have the regression line pointing upward which confirms the trend between these two columns","fc6e98ae":"For fully rendered notebook please visit this direct link https:\/\/nbviewer.jupyter.org\/github\/Cybernorse\/WA-jupyter-notebooks\/blob\/main\/web%20traffic%20forcasting.ipynb  \n\npredicting unique visitors for this website http:\/\/statforecasting.com\/ which we have visitor traffic dataset of.\n\nDataset and data description can be found at:\nhttps:\/\/www.kaggle.com\/bobnau\/daily-website-visitors","284ee868":"This histogram plot represent the sum of unique visits for each day in the week against count of unique visits for each day in the week.\n\nbut from this plot it's hard to estimate which day had the most unique visitors, so we will explore more deeper.","096d69e6":"get the sum of page_loads \tunique_visits \tfirst_visits \treturning_visits related to each of their days","05cfb1df":"train the model with train sample","669b0e71":"starting the feature engineering."}}