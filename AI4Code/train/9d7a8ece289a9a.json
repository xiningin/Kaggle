{"cell_type":{"07d167a9":"code","d237674c":"code","12efcd64":"code","852d6287":"code","314954c4":"code","e4a93509":"code","74a4a82c":"code","70bbc1e8":"code","b0059d6e":"code","8fe87892":"code","a964c3f6":"code","1d191fc7":"code","04bce2fb":"code","c3cb32b0":"code","a0015a48":"code","68d5b2b9":"code","0b827fee":"code","e8a1768f":"code","80ef8ac6":"code","a6742b2b":"code","b2d7edcf":"code","026c437c":"code","bd125aac":"code","dab8d86b":"code","47242370":"code","77c80c41":"code","e0d1b6f0":"code","6ada3afd":"code","22ece0cc":"code","7c2d4300":"code","bcf570ae":"code","3d3e35fe":"code","76b2b356":"code","68ae4fe7":"code","f29b2c24":"code","b9357984":"code","10f8412a":"code","90a1f388":"code","4c47ed8c":"code","baf6a55a":"code","80003dd8":"code","2bb788f6":"markdown","aded824f":"markdown","3cae79db":"markdown","1bf062da":"markdown","7454a47a":"markdown","643af4f5":"markdown","378161d3":"markdown","3308ea99":"markdown","53a9b3f9":"markdown","b6fa7baa":"markdown","cbc87a7b":"markdown","96939e98":"markdown","3eb44935":"markdown","ac7afbaa":"markdown","1d846ea2":"markdown","c8b02810":"markdown","67bee892":"markdown","0082c927":"markdown","2015990a":"markdown","c9c48a3f":"markdown"},"source":{"07d167a9":"# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport folium\nfrom matplotlib.dates import DateFormatter","d237674c":"!ls -lt ..\/input\/corona-virus-report","12efcd64":"# # importing datasets\n\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.sort_values('Recovered', ascending=False).head()","852d6287":"# converting to proper date format\nfull_table['Date'] = pd.to_datetime(full_table['Date'])\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values with 0 in columns ('Confirmed', 'Deaths', 'Recovered')\nfull_table[['Confirmed', 'Deaths', 'Recovered']] = full_table[['Confirmed', 'Deaths', 'Recovered']].fillna(0)","314954c4":"# adding two more columns\nfull_table['Deaths to 1000 Confirmed'] = round(full_table['Deaths']\/full_table['Confirmed'], 3)\nfull_table['Recovered to 1000 Confirmed'] = round(full_table['Recovered']\/full_table['Confirmed'], 3)\nfull_table['Recovered to 1000 Deaths'] = round(full_table['Recovered']\/full_table['Deaths'], 3)\n\n# cases in the Diamond Princess cruise ship\nship = full_table[full_table['Province\/State']=='Diamond Princess cruise ship']\n\n########\nfull_table = full_table[full_table['Province\/State']!='Diamond Princess cruise ship']","e4a93509":"full_table.sort_values('Deaths', ascending=False).head()","74a4a82c":"full_table.describe()","70bbc1e8":"china = full_table[full_table['Country\/Region']=='China']\n\nIndia = full_table[full_table['Country\/Region']=='India']\n\nItaly = full_table[full_table['Country\/Region']=='Italy']\nrow = full_table[full_table['Country\/Region']!='India']\n\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nIndia_latest = full_latest[full_latest['Country\/Region'] == 'India']\nItaly_latest = full_latest[full_latest['Country\/Region'] == 'Italy']\nrow_latest = full_latest[full_latest['Country\/Region']!='India']\n\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nIndia_latest_grouped = India_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nItaly_latest_grouped = Italy_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()","b0059d6e":"Italy_latest.head()","8fe87892":"china_latest_grouped.sort_values(by='Deaths', ascending=False).head().style.background_gradient(cmap='Pastel1_r')","a964c3f6":"India_latest_grouped.sort_values(by='Deaths', ascending=False).head().style.background_gradient(cmap='Pastel1_r')","1d191fc7":"temp_f = full_latest_grouped[['Country\/Region', 'Confirmed']].sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\ntemp_f.head(10).style.background_gradient(cmap='Pastel1_r')","04bce2fb":"temp_c = china_latest_grouped[['Province\/State', 'Confirmed']].sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\ntemp_c.head(10).style.background_gradient(cmap='Pastel1_r')","c3cb32b0":"temp_flg = full_latest_grouped[['Country\/Region', 'Deaths']].sort_values(by='Deaths', ascending=False).reset_index(drop=True)\ntemp_flg = temp_flg[temp_flg['Deaths']>0]\ntemp_flg.style.background_gradient(cmap='Pastel1_r')","a0015a48":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index().sort_values('Date', ascending=False)\ntemp.head(1).style.background_gradient(cmap='Pastel1')","68d5b2b9":"# Cases in the Diamond Princess cruise ship","0b827fee":"ship.sort_values(by='Date', ascending=False).head(1)[['Confirmed', 'Deaths', 'Recovered']].style.background_gradient(cmap='Pastel2')","e8a1768f":"# Number of Countries\/Regions to which COVID-19 spread\n\nprint(len(temp_f))","80ef8ac6":"# Number of Province\/State in Mainland China to which COVID-19 spread\n\nlen(temp_c)","a6742b2b":"# Number of countries with deaths reported\n\nlen(temp_flg)","b2d7edcf":"full_table = full_table.fillna(0)\n\nfull_table.sort_values('Deaths', ascending= False).head()","026c437c":"# temp1 = full_table.groupby(\"Country\/Region\")['Date','Confirmed','Deaths','Recovered'].sum().reset_index(drop=True).sort_values('Date', ascending=False).head(1).style.background_gradient(cmap='Pastel1')","bd125aac":"plot_india_over_time = full_table[(full_table['Country\/Region']=='India') & (full_table['Confirmed']!=0)]\n","dab8d86b":"plot_italy_over_time = full_table[(full_table['Country\/Region']=='Italy') & (full_table['Confirmed']!=0)]","47242370":"plot_india_over_time['day'] = pd.to_datetime(plot_india_over_time['Date'], format='%Y-%m-%d')\nplot_italy_over_time['day'] = pd.to_datetime(plot_italy_over_time['Date'], format='%Y-%m-%d')","77c80c41":"# Create figure and plot space\nfig, ax = plt.subplots(figsize=(12, 12))\n\n# Add x-axis and y-axis\nax.bar(plot_india_over_time['day'],\n       plot_india_over_time['Confirmed'],\n       color='purple')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"Confirmed\",\n       title=\"Number of cases confirmed over time in India\")\n\n# Define the date format\ndate_form = DateFormatter(\"%m-%d\")\nax.xaxis.set_major_formatter(date_form)\n\nplt.show()\n","e0d1b6f0":"fig, bx = plt.subplots(figsize=(12, 12))\n\n# Add x-axis and y-axis\nbx.bar(plot_italy_over_time['day'],\n       plot_italy_over_time['Confirmed'],\n       color='purple')\n\n# Set title and labels for axes\nbx.set(xlabel=\"Date\",\n       ylabel=\"Confirmed\",\n       title=\"Number of cases confirmed over time in Italy\")\n\n# Define the date format\ndate_form = DateFormatter(\"%m-%d\")\nbx.xaxis.set_major_formatter(date_form)\n\nplt.show()","6ada3afd":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=2, max_zoom=4, zoom_start=2)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])).add_to(m)\nm","22ece0cc":"# India \nm = folium.Map(location=[20.59, 78.96], tiles='cartodbpositron',\n               min_zoom=3, max_zoom=6, zoom_start=5)\n\nfor i in range(0, len(India_latest)):\n    folium.Circle(\n        location=[India_latest.iloc[i]['Lat'], India_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(India_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(India_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(India_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(India_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(India_latest.iloc[i]['Recovered']),\n        radius=int(India_latest.iloc[i]['Confirmed'])**1).add_to(m)\nm","7c2d4300":"# Italy \n# m = folium.Map(location=[41.87, 12.56], tiles='cartodbpositron',\n#                min_zoom=3, max_zoom=6, zoom_start=5)\n\n# for i in range(0, len(Italy_latest)):\n#     folium.Circle(\n#         location=[Italy_latest.iloc[i]['Lat'], Italy_latest.iloc[i]['Long']],\n#         color='crimson', \n#         tooltip =   '<li><bold>Country : '+str(Italy_latest.iloc[i]['Country\/Region'])+\n#                     '<li><bold>Province : '+str(Italy_latest.iloc[i]['Province\/State'])+\n#                     '<li><bold>Confirmed : '+str(Italy_latest.iloc[i]['Confirmed'])+\n#                     '<li><bold>Deaths : '+str(Italy_latest.iloc[i]['Deaths'])+\n#                     '<li><bold>Recovered : '+str(Italy_latest.iloc[i]['Recovered']),\n#         radius=int(Italy_latest.iloc[i]['Confirmed'])**1).add_to(m)","bcf570ae":"# px.choropleth(full_latest_grouped, locations='Country\/Region', color='Confirmed',color_continuous_scale=\"Viridis\")\n\nfig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", locationmode='country names', \n                    color=\"Confirmed\", hover_name=\"Country\/Region\", range_color=[1,50], color_continuous_scale=\"Sunsetdark\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\nfig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", range_color=[1,50], color_continuous_scale=\"Peach\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","3d3e35fe":"gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index()\nformated_gdf = gdf.copy()\nformated_gdf = formated_gdf[formated_gdf['Country\/Region']!='India']\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(formated_gdf[formated_gdf['Country\/Region']!='India'], locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='Confirmed', hover_name=\"Country\/Region\", range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", title='Spread outside India over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()\n\n# -----------------------------------------------------------------------------------\n\nIndia_map = India.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Lat', 'Long'].max().reset_index()\nIndia_map['size'] = India_map['Confirmed'].pow(0.5)\nIndia_map['Date'] = pd.to_datetime(India_map['Date'])\nIndia_map['Date'] = India_map['Date'].dt.strftime('%m\/%d\/%Y')\nIndia_map.head()\n\nfig = px.scatter_geo(India_map, lat='Lat', lon='Long', scope='asia',\n                     color=\"size\", size='size', hover_name='Confirmed', hover_data=['Confirmed', 'Deaths', 'Recovered'],\n                     projection=\"natural earth\", animation_frame=\"Date\", title='Spread in India over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","76b2b356":"# c_spread.head()","68ae4fe7":"c_spread = pd.DataFrame(china[china['Confirmed']!=0].groupby('Date')['Province\/State'].unique().apply(len)).reset_index()\nfig = px.line(c_spread, x='Date', y='Province\/State', title='Number of Provinces\/States\/Regions of China to which COVID-19 spread over the time')\nfig.show()\n\nspread = pd.DataFrame(full_table[full_table['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len)).reset_index()\nfig = px.line(spread, x='Date', y='Country\/Region', title='Number of Countries\/Regions to which COVID-19 spread over the time')\nfig.show()","f29b2c24":"rl = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrl.head().style.background_gradient(cmap='rainbow')\n\nncl = rl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Country\/Region\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Country\/Region\", x=\"value\", color='variable', orientation='h', height=800,\n             # height=600, width=1000,\n             title='Number of Cases outside China')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n\n# ------------------------------------------\n\ncl = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Province\/State\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Province\/State\", x=\"value\", color='variable', orientation='h', height=800,\n             # height=600, width=1000,\n             title='Number of Cases in China')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","b9357984":"temp = gdf[gdf['Country\/Region']=='China'].reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'])\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', facet_col=\"variable\")\nfig.show()","10f8412a":"temp = gdf[gdf['Country\/Region']!='China'].groupby('Date').sum().reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'])\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', facet_col=\"variable\")\nfig.show()","90a1f388":"fig = px.treemap(china_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n           path=[\"Province\/State\"], values=\"Confirmed\", title='Number of Confirmed Cases in Chinese Provinces')\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n           path=[\"Province\/State\"], values=\"Deaths\", title='Number of Deaths Reported in Chinese Provinces')\nfig.show()\n\nfig = px.treemap(china_latest.sort_values(by='Recovered', ascending=False).reset_index(drop=True), \n           path=[\"Province\/State\"], values=\"Recovered\", title='Number of Recovered Cases in Chinese Provinces')\nfig.show()","4c47ed8c":"fig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Confirmed\", title='Number of Confirmed Cases outside china')\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Deaths\", title='Number of Deaths outside china')\nfig.show()\n\nfig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Recovered\", title='Number of Recovered Cases outside china')\nfig.show()","baf6a55a":"fig = px.bar(china_latest.sort_values(by='Deaths to 1000 Confirmed', ascending=False).reset_index(drop=True), \n       x=\"Province\/State\", y=\"Deaths to 1000 Confirmed\", title='Deaths to Confirmed ratio')\nfig.show()\n\nfig = px.bar(china_latest.sort_values(by='Recovered to 1000 Confirmed', ascending=False).reset_index(drop=True), \n       x=\"Province\/State\", y=\"Recovered to 1000 Confirmed\", title='Recovered to Confirmed ratio')\nfig.show()","80003dd8":"temp = row.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nfig = px.scatter(temp, x=\"Date\", y=\"Confirmed\", color=\"Confirmed\",\n                 size='Confirmed', hover_data=['Confirmed'])\nfig.show()","2bb788f6":"* Massive number of cases are reported in USA Compared to reset of the world\n* The next few countries were infact are the neighbours of China but now are in Europe and USA.","aded824f":"# Visual EDA","3cae79db":"# EDA - Eplorartory data analysis","1bf062da":"## Top 10 Provinces in China with most no. of reported cases","7454a47a":"## Confirmed Cases in India\nlocation cordinates are not present in data. I will add them once updated.","643af4f5":"* There are more recovered cases than deaths at this point of time","378161d3":"****#There are no country where the number of confirmed cases are equal to the number of Recovered cases if confirmed cases are greater than zero.","3308ea99":"## Top 10 Countries with most no. of reported cases","53a9b3f9":"##**Confirmed Cases in Italy**","b6fa7baa":"## Countries with deaths reported","cbc87a7b":"* Outside China, there has been a lot of deaths due to COVID-19 has reported especially in Italy and Spain\n","96939e98":"## Most Recent Stats","3eb44935":"# Data Cleaning and Preprocessing\n\nDiamond princess cruise ship cases are excluded due to obvious reasons.","ac7afbaa":"# Import Dataset","1d846ea2":"Although COVID-19 spread to all the provinces of the China really fast and early, number of countries to which COVID-19 spread hasn't increased after first few weeks","c8b02810":"## Confirmed cases across the world","67bee892":"As recent cases are found in India, I am going to add more viz related to it. Right now I have focused India only in two of them. Soon, I will replace all of china's Viz with India. (I wish cases do not increase here in India.)","0082c927":"## Other Stats","2015990a":"* Even in China most of the cases reported are from a particular Province Hubei.  \n* It is no surprise, because Hubei's capital is **Wuhan**, where the the first cases are reported","c9c48a3f":"# Import Libraries"}}