{"cell_type":{"9a0d51fd":"code","467b45ca":"code","2c787868":"code","9de3d77f":"code","1d6e663f":"code","5fe8ac5c":"code","08a9f610":"code","2b01042a":"code","9b0aca9b":"code","4e776c40":"code","4fdfa809":"code","f8828969":"code","009dd756":"code","124b82d6":"code","f199b384":"code","e511a8f9":"code","5618aec7":"code","feb73ed9":"code","4db3d2d8":"markdown","c3f61042":"markdown","5164795a":"markdown","e56d7e23":"markdown","747b1d38":"markdown","6eebdec4":"markdown","78922be2":"markdown","8baae0cd":"markdown","2e026502":"markdown","94d68813":"markdown","cef821ad":"markdown","3551e6a3":"markdown","5fe957e8":"markdown","a531bfc3":"markdown","6eb0d3f0":"markdown","435b07e3":"markdown","0b97eb33":"markdown","94f0c589":"markdown","a2147b23":"markdown","97fd87fd":"markdown","dfd17c65":"markdown","03e7841d":"markdown","18d19d0a":"markdown","c93ea989":"markdown","e00d4c29":"markdown","7244379a":"markdown","3900aefc":"markdown","9e9ad73a":"markdown"},"source":{"9a0d51fd":"# Import torch and other required modules\nimport torch","467b45ca":"x = torch.tensor([[5, 8], [33, 7],[9,1.]])\nx","2c787868":"# Example 1 - working \nprint(torch.sort(x,0))","9de3d77f":"# Example 2 - working\nprint(torch.sort(x,0,descending=True))","1d6e663f":"# Example 3 - breaking (to illustrate when it breaks)\nprint(torch.sort(x,2,descending=True))","5fe8ac5c":"# Example 1 - working\nx=torch.randn(4, dtype=torch.cfloat)\nprint(x)","08a9f610":"print(torch.imag(x))","2b01042a":"# Example 2 - working\ny=torch.tensor([123+039j,67373-0903j,333.-23j])\nprint(torch.imag(y))","9b0aca9b":"# Example 3 - breaking (to illustrate when it breaks)\nz=torch.tensor([23,65,121])\nprint(torch.imag(z))","4e776c40":"# Example 1 - working\nt1 = torch.randn(3)\nt2 = torch.randn(3)\nprint(t1)\nprint(t2)\ntorch.matmul(t1, t2)","4fdfa809":"# Example 2 - working\nt3 = torch.randn(3,4)\nt4 = torch.randn(4)\nprint(t3)\nprint(t4)\ntorch.matmul(t3, t4)","f8828969":"# Example 3 - breaking (to illustrate when it breaks)\nt5 = torch.randn(4,3)\nt6 = torch.randn(4,3)\nprint(t5)\nprint(t6)\ntorch.matmul(t5, t6)","009dd756":"# Example 1 - working\nt1 = torch.tensor([36,6,3])\nt2 = torch.tensor([5,6,24])\ntorch.gcd(t1,t2)","124b82d6":"# Example 2 - working\nt3 = torch.tensor([6])\ntorch.gcd(t1,t3)","f199b384":"# Example 3 - breaking (to illustrate when it breaks)\nt4 = torch.tensor([1,2,4.])\ntorch.gcd(t1,t4)","e511a8f9":"# Example 1 - working\na = torch.eye(5)\nprint(a)","5618aec7":"# Example 2 - working\nb = torch.eye(5,4)\nprint(b)","feb73ed9":"# Example 3 - breaking (to illustrate when it breaks)\nc = torch.eye(-1)","4db3d2d8":"We can use torch.sort() function when we want to sort tensors all at once with the desired dimensions.","c3f61042":"In this example, the function returned a two dimensional tensor with 5 rows and 4 columns.","5164795a":"## Conclusion\n\nIn this notebook we explored 5 Tensor Functions which could be really helpful to you while working on a project involving tensors and PyTorch. We ran various examples and breaking conditions , so that you have an idea of when the desired function breaks and why. ","e56d7e23":"## Function 2 - torch.imag\n\nThis function returns a new tensor containing imaginary values of the tensor given as the input(also known as self tesnsor).","747b1d38":"## Reference Links\nProvide links to your references and other interesting articles about tensors\n* Official documentation for tensor operations: https:\/\/pytorch.org\/docs\/stable\/torch.html\n* Wikipedia page for PyTorch: https:\/\/en.wikipedia.org\/wiki\/PyTorch\n* asgn-1-5-basic-pytorch-methods by Subham Kumar Sahoo: https:\/\/jovian.ai\/sksplay7\/asgn-1-5-basic-pytorch-methods\/","6eebdec4":"In this example, we initialized two input tensors t1, t2. Then we used the gcd function , and it returned the element-wise GCD. ","78922be2":"This function is used for matrix multiplication. Since, deep learning deals with tensors and matrices this function comes in very handy.","8baae0cd":"Here , the shapes of the input matrices make it impossible to be matrix multplied.","2e026502":"Here, we initialized two tensors with random values. The matrix product is returned .","94d68813":"\n\n\n## Function 1 - torch.sort\n\nThis function sorts the elements of the input tensor along a given dimension in ascending or descending order with respect to the parameter set.\n\n\n---\n\n\nParameters:\n* input (Tensor) \u2013 the input tensor.\n* dim (int, optional) \u2013 the dimension to sort along\n* stable (bool, optional) \u2013 makes the sorting routine stable, which guarantees that the order of equivalent elements is preserved.\n* descending (bool, optional) \u2013 when True ,sorts in descending order\n","cef821ad":"We can see that the tensor x has been sorted for the dimension specified in an ascending order because we have not set the parameter for descending. ","3551e6a3":"In the above example, we initialized t4 with float elements. And then, we used the gcd function. But this function accepts only integer values as input, which lead to the breaking of the function.","5fe957e8":"## Function 5 - torch.eye\n\nIt returns a 2-D tensor with ones on the diagonal and zeros elsewhere.","a531bfc3":"In this example , we have set the parameter descending to True, so the sorted tensor is in descending order.","6eb0d3f0":"It is well understood that x is a 2-dimensional tensor. Hence, when we set the parameter dim to 2 ,when the dim parameter could only be 0 or 1, there is an error and it breaks.","435b07e3":"In the above example, we first created a tensor x with 4 complex float elements, then we used the imag function to retrieve a new function with imaginary values present in x.","0b97eb33":"Here, we created a tensor y with 3 complex elements and used the imag function to get a new tensor with imaginary values of y.","94f0c589":"## Function 3 - torch.matmul\n\nIt gives the Matrix product of two tensors.","a2147b23":"This function can be used when want to seperately analyse the imaginary part of the complex tensors.","97fd87fd":"This function is very helpful to create identity matrices which is used very often.","dfd17c65":"# 5 PyTorch Tensor Functions You Should Know\n\n![](https:\/\/www.analyticsdrift.com\/wp-content\/uploads\/2020\/07\/Installing-PyTorch.png)\n\nPyTorch is an open source machine learning library based on the Torch library, used for applications such as computer vision and natural language processing, primarily developed by Facebook's AI Research lab.\nThese are the 5 functions I've decided to explore on today.\n\n- sort\n- imag\n- matmul\n- gcd\n- eye\n\nBefore we begin, let's install and import PyTorch","03e7841d":"Here, we set the input to a negative number. And we know that the number of rows or columns can't be a negative number. Hence, the function broke.","18d19d0a":"In this example, we created a tensor with integers not complex numbers. And it is mentioned in the official documentation of PyTorch that the function imag only supports complex inputs.","c93ea989":"The gcd function is very useful while finding the element-wise greatest common divisor(GCD) for large multi-dimensional tensors","e00d4c29":"## Function 4 - torch.gcd\n\nComputes the element-wise greatest common divisor (GCD) of input 1 and 2.\nBoth inputs must have integer types.\n\n","7244379a":"Here, we provided just an element in tensor t3. We then applied the gcd function.","3900aefc":"In this example, the function returned a two dimensional tensor with 5 rows. ","9e9ad73a":"In this example, we initialized two tensors randomly with the randn function. Here, both tensors are 1-dimensional hence the dot product (scalar) is returned."}}