{"cell_type":{"c0f15f16":"code","c3dc4720":"code","143c3d89":"code","26670697":"code","e842b818":"code","255cca17":"code","1fc9bdd4":"code","e71f6384":"code","336745e9":"code","a7977d60":"code","f0f30197":"code","3863167b":"code","b88da34d":"code","2b3439f5":"code","6d7eb645":"code","99eca993":"code","994313dc":"code","44807fe0":"code","4c870e5e":"code","fe17e7b6":"code","47b2a262":"code","99325a32":"code","9d2d7d93":"markdown","43c1a58d":"markdown","873f4c30":"markdown","b8323b63":"markdown","0a9bab3c":"markdown","39597518":"markdown","538ceb14":"markdown","75e74876":"markdown","1c87c64a":"markdown","d96767d5":"markdown","c1726c45":"markdown","688ff670":"markdown","582e196c":"markdown"},"source":{"c0f15f16":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport gc\nimport warnings\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nnp.random.seed(2021)","c3dc4720":"cp = \"\/kaggle\/input\/tabular-playground-series-oct-2021\/\"\ndf_train = pd.read_csv(cp + \"train.csv\")\ndf_test = pd.read_csv(cp + \"test.csv\")\nsubmission = pd.read_csv(cp + \"sample_submission.csv\")","143c3d89":"# Labels extraction & redundant columns removal\ntargets = df_train['target']\ndf_train.drop(['id', 'target'], axis = 1, inplace = True)\ndf_test.drop(['id'], axis = 1, inplace = True)","26670697":"df_train.head(3)","e842b818":"df_train.info()","255cca17":"print(f\"df_train shape : {df_train.shape}\")\nprint(f\"df_test shape : {df_test.shape}\")","1fc9bdd4":"print(f\"# of any missing value(s) in df_train \/ df_test: {df_train.isnull().sum().sum() + df_test.isnull().sum().sum()}\")","e71f6384":"del df_test # Just to have some memory available temporarily\ngc.collect()","336745e9":"plt.figure(figsize = (6, 6))\nplt.xticks(size = 12); plt.yticks(size = 12)\nsns.set(style = \"darkgrid\")\nax = sns.countplot(x = targets, linewidth = 5, palette=\"Set2\")\nax.set_title('Target Countplot', fontsize = 20)\nax.set_xlabel('Target', fontsize = 12); ax.set_ylabel('Frequency', fontsize = 12)\ntotal = targets.shape[0]\nfor p in ax.patches:\n    percent = 100 * p.get_height() \/ total\n    percent_t = f\"{percent:.2f}%\"\n    x, y = p.get_x() + p.get_width() \/ 2, p.get_y() + p.get_height() \/ 2\n    ax.annotate(percent_t, (x, y), fontsize = 12, ha = 'center')\n    p.set_width(p.get_width() * 0.5)\n    p.set_x(p.get_x() + p.get_width() * 0.5)\nplt.show()","a7977d60":"binaryColumns = []\nfor idx, col in enumerate(df_train.columns):\n    if len(df_train[col].unique()) == 2:\n        binaryColumns.append(col)\nprint(f\"Number of Binary features : {len(binaryColumns)}\")\nprint(f\"Binary features : {binaryColumns}\")","f0f30197":"df_train.describe().T.style.background_gradient(cmap = 'Blues')\\\n                           .bar(subset = [\"mean\",], color = 'lightgreen')\\\n                           .bar(subset = [\"std\"], color = '#ee1f5f')\\\n                           .bar(subset = [\"max\"], color = '#FFA07A')","3863167b":"corr = df_train.corr()\nf, ax = plt.subplots(figsize = (18, 18))\nax.set_title('Feature Correlation (Train Data)', fontsize = 24, y = 1.05)\nmask = np.triu(np.ones_like(corr, dtype = bool))\nsns.heatmap(corr, annot = False, mask = mask, center=0, linewidths = .5, cmap = \"coolwarm\")#, vmin=-0.05, vmax= 0.05)\nplt.show()","b88da34d":"gc.collect()","2b3439f5":"nonBinaryColumns = [col for col in df_train.columns if col not in binaryColumns]\nskewness_train = df_train.loc[:, nonBinaryColumns].skew(axis = 0, skipna = True)\nkurtosis_train = df_train.loc[:, nonBinaryColumns].kurtosis(axis = 0, skipna = True)","6d7eb645":"sns.set(style = \"darkgrid\")\nfig, ax = plt.subplots(1,2,figsize = (18, 5))\nplt.xticks(size=12); plt.yticks(size = 12)\nax = ax.flatten()\nsns.boxplot(x=skewness_train, ax= ax[0]); sns.boxplot(x=kurtosis_train, ax= ax[1])\nax[0].set_title('Skewness', fontsize=20); ax[1].set_title('Kurtosis', fontsize=20)\nplt.show()","99eca993":"binaryToTargetCorrelations = df_train.loc[:,binaryColumns].apply(lambda x : x.corr(targets))\nbinaryColumnsProportions = df_train.loc[:, binaryColumns].mean()\ndf_binaryCorProp = pd.concat([binaryToTargetCorrelations, binaryColumnsProportions], axis=1)\ndf_binaryCorProp.reset_index(inplace = True)\ndf_binaryCorProp.columns = ['feature', 'correlation', 'proportion']\ndf_binaryCorProp.sort_values(ascending = False, by = ['proportion'], inplace = True)","994313dc":"# plt.figure(figsize = (18, 6))\n# plt.xticks(size = 12); plt.yticks(size = 12)\n# sns.set(style = \"darkgrid\")\n# ax = sns.scatterplot(data = df_binaryCorProp, x = 'feature', y = 'proportion')\n# ax2 = ax.twinx()\n# sns.scatterplot(data = df_binaryCorProp, x = 'feature', y = 'correlation', ax = ax2, color = 'r')\n# features = list(df_binaryCorProp[\"feature\"])\n# ax.set_xticks(features); ax.set_xticklabels(features, rotation = 45)\n# ax.set_xlabel('Feature', fontsize = 12); ax.set_ylabel('Proportion of 1', fontsize = 12); ax2.set_ylabel('Correlation', fontsize = 12)\n# ax.set_title('Proportion of Binary Features & Correlations to the Target', fontsize = 20)\n# plt.show()","44807fe0":"fig, axes = plt.subplots(9,5,figsize = (20, 20))\naxes = axes.flatten()\nfor idx, ax in enumerate(axes):\n    gc.collect()\n    df_temp = df_train.sample(n = 10000)\n    sampleIdx = df_temp.index.tolist()\n    target_temp = targets[sampleIdx]\n    df_temp['target'] = target_temp\n    sns.kdeplot(df_temp[df_temp[\"target\"] == 1][binaryColumns[idx]], shade=True, color=\"blue\", label=\"1\", ax=ax)\n    sns.kdeplot(df_temp[df_temp[\"target\"] == 0][binaryColumns[idx]], shade=True, color=\"green\", label=\"0\", ax=ax)\n    ax.get_yaxis().set_visible(False)\n    ax.set_title(f'f{idx + 121}', loc = 'right', fontsize = 12)\n    ax.legend()\nfig.suptitle(\"Binary Feature vs Target\")\nfig.tight_layout()\nplt.show()","4c870e5e":"gc.collect()\ndf_test = pd.read_csv(cp + \"test.csv\")\ndf_test.drop(['id'], axis = 1, inplace = True)","fe17e7b6":"fig, axes = plt.subplots(11,11,figsize = (20, 15))\naxes = axes.flatten()\nfor idx, ax in enumerate(axes):\n    sns.kdeplot(data = df_train.sample(n = 30000), x = f'f{idx}', fill = True, ax = ax)\n    sns.kdeplot(data = df_test.sample(n = 30000), x = f'f{idx}', fill = True, ax = ax)    \n    ax.set_xticks([]); ax.set_yticks([]); ax.set_xlabel(''); ax.set_ylabel('')\n    ax.set_title(f'f{idx}', loc = 'right', fontsize = 12)\nfig.tight_layout()\nplt.show()","47b2a262":"gc.collect()","99325a32":"fig, axes = plt.subplots(11,11,figsize = (20, 15))\naxes = axes.flatten()\nfor idx, ax in enumerate(axes):\n    sns.kdeplot(data = df_train.sample(n = 30000), x = f'f{idx + 121}', fill = True, ax = ax)\n    sns.kdeplot(data = df_test.sample(n = 30000), x = f'f{idx + 121}', fill = True, ax = ax)    \n    ax.set_xticks([]); ax.set_yticks([]); ax.set_xlabel(''); ax.set_ylabel('')\n    ax.set_title(f'f{idx + 121}', loc = 'right', fontsize = 12)\nfig.tight_layout()\nplt.show()","9d2d7d93":"# General Overview","43c1a58d":"### Shapes","873f4c30":"## Feature Statistics","b8323b63":"# Labels Overview","0a9bab3c":"### Missing Value","39597518":"## Numerical Features Distribution","538ceb14":"The labels (target) are well-balanced.","75e74876":"# Import Libraries & Setup","1c87c64a":"## Binary Features Proportion & Correlation","d96767d5":"# EDA : TPS - Oct 2021\n\n# Important Notes:\n- Binary Classification : Labels (Target) are either 0 or 1, and well-balanced\n- 285 features, 1 label\n- The features dtypes are 240 'float64' columns and 45 'int64' columns\n- 240 features are numerical, and 45 features are categorical:\n    - 'f22', 'f43', and 'f242' ~ 'f284' are binary\n- All the features are normalized that all of them has min = 0, max = 1\n- No missing value in neither train nor test dataset","c1726c45":"## Feature Skewness & Kurtosis","688ff670":"# Features Overview","582e196c":"## Feature Correlation"}}