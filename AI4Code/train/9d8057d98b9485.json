{"cell_type":{"e38ecbe4":"code","ab36ff8c":"code","e272a088":"code","bade22d7":"code","198a6c21":"code","32582120":"code","2db5b567":"code","992a9e60":"code","bc906cbe":"code","cf3e2247":"code","9f35ed9d":"code","09c739b9":"code","0d05d8d1":"code","6a2e8a7c":"code","c250ca88":"code","fc407923":"code","bf7071be":"code","a4eafb80":"code","2e7254b2":"code","fd6237ed":"code","1f6e4de9":"code","3b8b6a9f":"code","b51acb84":"code","1afb8f82":"code","17e70855":"code","dcc02559":"code","a70ef4a3":"code","2317f01d":"code","a8450611":"code","30967f14":"markdown","32037508":"markdown","f8355bb3":"markdown","1007ec02":"markdown","2e15b5bf":"markdown","a7908ea9":"markdown","08b67ec7":"markdown"},"source":{"e38ecbe4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab36ff8c":"train=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain.head()","e272a088":"#for interactive EDA\nimport pandas_profiling","bade22d7":"%pip install autoviz","198a6c21":"#automatic data visualiztion\nfrom autoviz.AutoViz_Class import AutoViz_Class","32582120":"#save time of  EDA \nreport=pandas_profiling.ProfileReport(train)\ndisplay(report)\n# Also, there is an option to generate an .HTML file containing all the information generated by the report.\n# report.to_file(output_file='report.html')","2db5b567":"#auto visualiztion generates vizs with few lines of code\nav=AutoViz_Class()\nreport_=av.AutoViz(\"\/kaggle\/input\/titanic\/train.csv\")","992a9e60":"%pip install ppscore","bc906cbe":"#used to create PPS matrix to find the non-linear relations between columns\nimport ppscore as pps\nimport seaborn as sns","cf3e2247":"matrix_pps=pps.matrix(train)[['x','y','ppscore']].pivot(columns='x',index='y',values='ppscore')\nmatrix_pps=matrix_pps.apply(lambda x : round(x,2))  #rounding matrix values","9f35ed9d":"sns.heatmap(matrix_pps,cmap='Blues',annot=True)","09c739b9":"#create new features    -- feature engineering\n\n#creating new features on the basis of age\ntrain['Age_cat']=''\ntrain['Age_cat'].loc[(train['Age']<18)]='Young'\ntrain['Age_cat'].loc[((train['Age']>=18) &(train['Age']<56))]='Adult'\ntrain['Age_cat'].loc[(train['Age']>=56)]='Senior'\n\n\n#creating new features on the basis of Family sizes\ntrain['family_size']=''\ntrain['family_size'].loc[(train['SibSp'] < 2)]=\"Nuclear\"\ntrain['family_size'].loc[((train['SibSp'] >=2) & (train['SibSp']<5))]=\"Medium\"\ntrain['family_size'].loc[(train['SibSp']>=5)]=\"large\"\n\n#creating new features on the basis of Parch and SibSp\ntrain['is_alone']=''\ntrain['is_alone'].loc[((train['SibSp'])+ (train['Parch']==0))]='yes'\ntrain['is_alone'].loc[((train['SibSp'])+ (train['Parch']>0))]='no'\n\n#creating features on the basis of sex and age\ntrain['SexCat'] = ''\ntrain['SexCat'].loc[(train['Sex'] == 'male') & (train['Age'] <= 21)] = 'youngmale'\ntrain['SexCat'].loc[(train['Sex'] == 'male') & ((train['Age'] > 21) & (train['Age']) < 50)] = 'maturemale'\ntrain['SexCat'].loc[(train['Sex'] == 'male') & (train['Age'] > 50)] = 'seniormale'\ntrain['SexCat'].loc[(train['Sex'] == 'female') & (train['Age'] <= 21)] = 'youngfemale'\ntrain['SexCat'].loc[(train['Sex'] == 'female') & ((train['Age'] > 21) & (train['Age']) < 50)] = 'maturefemale'\ntrain['SexCat'].loc[(train['Sex'] == 'female') & (train['Age'] > 50)] = 'seniorfemale'\n","0d05d8d1":"#creating new features with title\ntrain['Title']=train['Name'].str.split(\",\",expand=True)[1].str.split(\".\",expand=True)[0]","6a2e8a7c":"train['is_married']=0\ntrain['is_married'].loc[train['Title']=='Mrs']=1\ntrain['Title'] = train['Title'].replace(['Miss', 'Mrs','Ms', 'Mlle', 'Lady', 'Mme', 'the Countess', 'Dona'], 'Miss\/Mrs\/Ms')\ntrain['Title'] = train['Title'].replace(['Dr', 'Col', 'Major', 'Jonkheer', 'Capt', 'Sir', 'Don', 'Rev'], 'Dr\/Military\/Noble\/Clergy')","c250ca88":"train['Ticket_Freq']=train.groupby('Ticket')['Ticket'].transform('count')","fc407923":"train.head()","bf7071be":"#now let's drop useless columns\ntarget=train['Survived']\ntrain.drop(['PassengerId','Survived','Name','Cabin','Ticket'],axis=1,inplace=True)","a4eafb80":"# new way of splitting categorical and numerical columns\ncategorical_df=train.select_dtypes(include=['object'])\nnumerical_df=train.select_dtypes(exclude=['object'])\ncategorical_=list(categorical_df.columns)\nnumerical_=list(numerical_df.columns)\nprint(\"Categorical Columns :\" , categorical_)\nprint(\"Numerical Columns :\" , numerical_)","2e7254b2":"#Three common ones are RandomUnderSampling, SMOTE and SMOTEENN. We can try using one of them to balance our data.\ndef Balance_RUS(x_train,y_train):\n    rus=RandomUnderSampler(random_state=7)\n    features_bal , target_bal=rus.fit_resample(x_train,y_train)\n    print(\"Count for each class value under RandomUnderSampler: \",collections.Counter(target_bal))\n    return features_bal ,target_bal","fd6237ed":"#for SMOTE\n#smote=SMOTE(random_state=7)\n#same process as above\n\n#for SMOTEENN\n#smoteen=SMOTEENN(random_state=7)\n#same process as above","1f6e4de9":"#create a function to test our model's performance on test data\ndef results(Classifier , x_test , y_test):\n    predicts=Classifier.predict(x_test)\n    res=[]\n    f1=f1_score(y_test,predicts)\n    prec=precision_score(y_test,predicts)\n    recall=recall_score(y_test,predicts)\n    roc_auc=roc_auc_score(y_test,predicts)\n    accuracy=accuracy_score(y_test,predicts)\n    \n    \n    res.append(f1)\n    res.append(prec)\n    res.append(recall)\n    res.append(roc_auc)\n    res.append(accuracy)\n    \n    \n    print(\" F1 Score Precision Recall ROC_AUC Accuracy\")\n    print(res)\n    \n    return res","3b8b6a9f":"#Construct a pipeline\n\n#Step 1 -   fill null values in Numerical Columns\n#Step 2 -   Normalize the numerical columns\n#Step 3 -   Fill null values in Categorical Columns\n#Step 4 -   Encode the categorical columns\n#Step 5 -   fit a machine learning model and evaluate it\n","b51acb84":"import collections\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom imblearn.combine import SMOTEENN\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom category_encoders import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import SimpleImputer, IterativeImputer\nfrom sklearn.model_selection import KFold, StratifiedKFold, StratifiedShuffleSplit, RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, PolynomialFeatures\nfrom sklearn.metrics import f1_score, precision_score, recall_score, roc_auc_score, accuracy_score, make_scorer\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom xgboost import XGBClassifier, plot_importance as plot_importance_xgb\nfrom lightgbm import LGBMClassifier, plot_importance as plot_importance_lgbm","1afb8f82":"#for this we use pipelines inside RandomSearchCV\ndef bestpipeline(train, target,categorical_1 , numerical_1):\n    #split data before transforming\n    x_train, x_test,y_train,y_test=train_test_split(train, target ,test_size=0.3,random_state=0)\n    y_train=y_train.to_numpy()\n    y_test=y_test.to_numpy()\n    #If Desired , balance the training classes with RandomUnderSampleer or SMOTE or SMOTEENN\n    \n    #Numeric Tranformations\n    pipe1=Pipeline(steps=[('imp',IterativeImputer(max_iter=30,random_state=0)), ('scaler' ,MinMaxScaler())])\n    pipe2=Pipeline(steps=[('imp',IterativeImputer(max_iter=30,random_state=0)), ('scaler' ,StandardScaler())])\n    pipe3=Pipeline(steps=[('imp',SimpleImputer(strategy='mean')), ('scaler' ,MinMaxScaler())])\n    pipe4=Pipeline(steps=[('imp',SimpleImputer(strategy='median')), ('scaler' ,StandardScaler())])\n    \n    #categorical transformation\n    cat_transform=Pipeline(steps=[('freq',SimpleImputer(strategy='most_frequent')), ('onehot',OneHotEncoder(use_cat_names=True))])\n    #combine categorical tranformation and numerical transformations\n    data_transformation1=ColumnTransformer(transformers=[('num',pipe1,numerical_1),\n                                                          ('cat',cat_transform,categorical_1)])\n    data_transformation2=ColumnTransformer(transformers=[('num',pipe2,numerical_1),\n                                                          ('cat',cat_transform,categorical_1)])\n    data_transformation3=ColumnTransformer(transformers=[('num',pipe3,numerical_1),\n                                                          ('cat',cat_transform,categorical_1)])\n    data_transformation4=ColumnTransformer(transformers=[('num',pipe4,numerical_1),\n                                                          ('cat',cat_transform,categorical_1)])\n        \n    #Initalize pipe object with any transformation we want\n    pipe=Pipeline(steps=[('data_transformations',data_transformation1),('feature',PCA()),('clf',SVC())])\n    \n    #Now, we define the grid of parameters that RandomSearchCV will use.\n    # options for each step inside the dictionaries ('data transformations', 'feature_eng', 'clf'\n    # and 'clf parameters'). In the end of it's iterations, RandomSearchCV will return the best options.\n    \n    param_grid=[{'data_transformations':[data_transformation1,data_transformation2,data_transformation3,data_transformation4],\n                'feature':[None,PCA(n_components=round(x_train.shape[1]*0.9)),\n                           PCA(n_components=round(x_train.shape[1]*0.8)),\n                           PCA(n_components=round(x_train.shape[1]*0.7)),\n                           PolynomialFeatures(degree=2),PolynomialFeatures(degree=3)],\n                'clf':[KNeighborsClassifier()],\n                'clf__n_neighbors':stats.randint(1,50),\n                'clf__metric':['minkowski','euclidean']},\n                \n                {'data_transformations':[data_transformation1,data_transformation2,data_transformation3,data_transformation4],\n                'feature':[None,PCA(n_components=round(x_train.shape[1]*0.9)),\n                           PCA(n_components=round(x_train.shape[1]*0.8)),\n                           PCA(n_components=round(x_train.shape[1]*0.7)),\n                           PolynomialFeatures(degree=2),PolynomialFeatures(degree=3)],\n                'clf':[LogisticRegression()],\n                'clf__penalty':['l1','l2'],\n                'clf__C':stats.uniform(0.01,10)},\n                \n                {'data_transformations':[data_transformation1,data_transformation2,data_transformation3,data_transformation4],\n                'feature':[None,PCA(n_components=round(x_train.shape[1]*0.9)),\n                           PCA(n_components=round(x_train.shape[1]*0.8)),\n                           PCA(n_components=round(x_train.shape[1]*0.7)),\n                           PolynomialFeatures(degree=2),PolynomialFeatures(degree=3)],\n                'clf':[SVC()],\n                'clf__C':stats.uniform(0.01,10),\n                'clf__gamma':stats.uniform(0.1,10)},\n                \n                {'data_transformations':[data_transformation1,data_transformation2,data_transformation3,data_transformation4],\n                'feature':[None,PCA(n_components=round(x_train.shape[1]*0.9)),\n                           PCA(n_components=round(x_train.shape[1]*0.8)),\n                           PCA(n_components=round(x_train.shape[1]*0.7)),\n                           PolynomialFeatures(degree=2),PolynomialFeatures(degree=3)],\n                'clf':[DecisionTreeClassifier()],\n                'clf__criterion': ['gini', 'entropy'],\n                'clf__max_features': [None, \"auto\", \"log2\"],\n                'clf__max_depth': [None, stats.randint(1,5)]},\n                \n                {'data_transformations':[data_transformation1,data_transformation2,data_transformation3,data_transformation4],\n                'feature':[None,PCA(n_components=round(x_train.shape[1]*0.9)),\n                           PCA(n_components=round(x_train.shape[1]*0.8)),\n                           PCA(n_components=round(x_train.shape[1]*0.7)),\n                           PolynomialFeatures(degree=2),PolynomialFeatures(degree=3)],\n                'clf':[RandomForestClassifier()],\n                'clf__n_estimators': stats.randint(10,175),\n                'clf__max_features': [None, \"auto\", \"log2\"],\n                'clf__max_depth': [None, stats.randint(1,5)],\n                'clf__random_state':stats.randint(1,49)},\n                \n                {'data_transformations':[data_transformation1,data_transformation2,data_transformation3,data_transformation4],\n                'feature':[None,PCA(n_components=round(x_train.shape[1]*0.9)),\n                           PCA(n_components=round(x_train.shape[1]*0.8)),\n                           PCA(n_components=round(x_train.shape[1]*0.7)),\n                           PolynomialFeatures(degree=2),PolynomialFeatures(degree=3)],\n                'clf':[GradientBoostingClassifier()],\n                'clf__n_estimators': stats.randint(10,100),\n                'clf__learning_rate': stats.uniform(0.01,0.7),\n                'clf__max_depth': [None, stats.randint(1,6)]},\n                \n                {'data_transformations':[data_transformation1,data_transformation2,data_transformation3,data_transformation4],\n                'feature':[None,PCA(n_components=round(x_train.shape[1]*0.9)),\n                           PCA(n_components=round(x_train.shape[1]*0.8)),\n                           PCA(n_components=round(x_train.shape[1]*0.7)),\n                           PolynomialFeatures(degree=2),PolynomialFeatures(degree=3)],\n                'clf':[LGBMClassifier()],\n                'clf__n_estimators': stats.randint(1, 100),\n                'clf__learning_rate': stats.uniform(0.01, 0.7),\n                'clf__max_depth': [None, stats.randint(1, 6)]},\n                \n                {'data_transformations':[data_transformation1,data_transformation2,data_transformation3,data_transformation4],\n                'feature':[None,PCA(n_components=round(x_train.shape[1]*0.9)),\n                           PCA(n_components=round(x_train.shape[1]*0.8)),\n                           PCA(n_components=round(x_train.shape[1]*0.7)),\n                           PolynomialFeatures(degree=2),PolynomialFeatures(degree=3)],\n                'clf':[XGBClassifier()],\n                'clf__n_estimators': stats.randint(5, 125),\n                'clf__eta': stats.uniform(0.01, 1),\n                'clf__max_depth': [None, stats.randint(1, 6)],\n                'clf__gamma': stats.uniform(0.01, 1)}]\n    \n    metrics = ['accuracy', 'precision', 'recall', 'f1', 'roc_auc']\n    \n    \n    #creating cross-validation object using Stratifiedshufflesplit\n    cross_validator = StratifiedShuffleSplit(n_splits=10, train_size=0.8, test_size=0.2, random_state=0)\n    best_pipeline=RandomizedSearchCV(estimator=pipe,param_distributions=param_grid,n_iter=100,scoring=metrics,\n                                     refit='accuracy',n_jobs=-1,cv=cross_validator,random_state=0)\n    best_pipeline.fit(x_train,y_train)\n    \n    #check tthe results\n    print(\"\\n\\n\\nBest Data Transformation Pipeline found \",best_pipeline.best_estimator_[0])\n    print(\"\\n\\n\\nBest Feature Engg Pipeline found \",best_pipeline.best_estimator_[1])\n    print(\"\\n\\n\\nBest Classifier Pipeline found \",best_pipeline.best_estimator_[2])\n    print(\"\\n\\n\\nBest Estimator's avg accuracy score on cv found \",best_pipeline.best_score_)\n    \n    return x_train, x_test,y_train,y_test,best_pipeline","17e70855":"x_train,x_test,y_train,y_test,best_pipeline=bestpipeline(train,target,categorical_,numerical_)\nresults=results(best_pipeline,x_test,y_test)","dcc02559":"# Visualizing all results and metrics, from all models, obtained by the RandomSearchCV steps\n#After going through all steps in RandomSearchCV, \n#we can check the results from it's steps using the \"cvresults\" atrribute.\ndf_results = pd.DataFrame(best_pipeline.cv_results_)\n\ndisplay(df_results)","a70ef4a3":"# Now visualizing all results and metrics obtained only by the best classifier\ndisplay(df_results[df_results['rank_test_accuracy'] == 1])","2317f01d":"# Here, we access the categorical feature names generated by OneHotEncoder, and then concatenate them\n# with the numerical feature names, in the same order our pipeline is applying data transformations.\ncategorical_features_after_onehot = best_pipeline.best_estimator_.named_steps['data_transformations']\\\n                                        .transformers_[1][1].named_steps['onehot'].get_feature_names()\n\nfeature_names_in_order = numerical_ + categorical_features_after_onehot\n\nprint(feature_names_in_order)","a8450611":"#do the same with test\n\n#best_pipeline.predict(x_test)","30967f14":"# Supervised Learning","32037508":"# Data Exploration","f8355bb3":"Instead of doing everything separately , Constrcut a pipeline object that unites them.\nWe don't have to repeat same steps on test data or validation data again.Just call one function and we're done.\nIf combined with RandomSearchCV we can apply differnt pipeline functions on different test data set.","1007ec02":"All PreProcessing is done !!!... finally!!!","2e15b5bf":"# Balancing Data","a7908ea9":"Really Important thing to note!\n\nWhen cross-validation , data should be transformed inside each cv step and note before them . If we transform training set before cross validation , chances are that information is leaked to validation data set and that might lead to biased results.\n\nThe right way is to transform data inside every cv step in training data so that the validation data gives unbiased results.","08b67ec7":"-> Pipeline 1: fill missing values from numeric features by imputing the mean of each column - apply MinMaxScaler - apply OneHotEncoder to categorical features - fits the data into a KNN Classifier with n_neighbors = 15.\n\n-> Pipeline 2: fill missing values from numeric features by imputing the mean of each column - apply StandardScaler - apply OneHotEncoder to categorical features - fits the data into a KNN Classifier with n_neighbors = 30.\n\n-> Pipeline 3: fill missing values from numeric features by imputing the median of each column - apply MinMaxScaler - apply OneHotEncoder to categorical features - fits the data into a Random Forest Classifier with n_estimators = 100.\n\n-> Pipeline 4: fill missing values from numeric features by imputing the median of each column - apply StandardScaler - apply OneHotEncoder to categorical features - fits the data into a Random Forest Classifier with n_estimators = 150."}}