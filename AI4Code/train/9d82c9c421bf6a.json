{"cell_type":{"bce4fe82":"code","50fe4746":"code","4e46f076":"code","c0d93568":"code","c120bcc9":"code","d48335d6":"code","e0e4da86":"code","c9b9e52b":"code","f3b67e02":"code","90eff89d":"code","2954163d":"code","8be39b20":"code","49950a5d":"code","415af53e":"code","491b6055":"code","2729ae2f":"code","305476a5":"code","2fa4cefa":"code","ffaf2034":"code","f40a4aa5":"code","3135b890":"code","0d458b6b":"code","0e638b3b":"code","6faa1e2c":"code","712f758a":"code","f084e3d5":"code","ee41fab4":"code","dc8a88fb":"code","22f7d1d6":"code","687fdde0":"code","afec445c":"markdown"},"source":{"bce4fe82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50fe4746":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4e46f076":"from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold, cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_curve, precision_recall_curve, auc, make_scorer, confusion_matrix, f1_score, fbeta_score","c0d93568":"\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_train.head()","c120bcc9":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_test.head()","d48335d6":"def getMetadata(dataframe) :\n    metadata_matrix = pd.DataFrame({\n                    'Datatype' : dataframe.dtypes, \n                    'Total_Element': dataframe.count(), \n                    'Null_Count': dataframe.isnull().sum(), \n                    'Null_Percentage': round(dataframe.isnull().sum()\/len(dataframe) * 100,2) ,\n                    'Unique_Value': dataframe.nunique()\n                       })\n    return metadata_matrix\ndf_metadata = getMetadata(df_train)\ndf_metadata","e0e4da86":"df_train.describe()","c9b9e52b":"df_train.Embarked.unique()","f3b67e02":"df_train.SibSp.unique()","90eff89d":"df_train.Pclass.unique()","2954163d":"sns.heatmap(df_train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","8be39b20":"sns.catplot(x='Pclass', data=df_train,kind='count', hue='Sex')","49950a5d":"sns.boxplot(x='Pclass', y='Age', data=df_train)","415af53e":"def impute_age(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    \n    if pd.isnull(Age):\n        \n        if Pclass==1:\n            return 37\n        elif Pclass==2:\n            return 29\n        else:\n            return 24\n        \n    else:\n        return Age","491b6055":"df_train['Age'] = df_train[['Age', 'Pclass']].apply(impute_age, axis=1)","2729ae2f":"df_train[[\"Pclass\", \"Age\"]].groupby(\"Pclass\").mean()","305476a5":"df_train.info()","2fa4cefa":"k = 12 #number of variables for heatmap\ncols = df_train.corr().nlargest(k, 'Survived')['Survived'].index\ncm = df_train[cols].corr()\nplt.figure(figsize=(10,6))\nsns.heatmap(cm, annot=True, cmap = 'viridis')","ffaf2034":"df_train.drop(['Name','Ticket','Cabin','Fare'],axis=1,inplace=True)","f40a4aa5":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf_train[['Embarked']] = le.fit_transform(df_train[['Embarked']])","3135b890":"df_train[['Sex']] = le.fit_transform(df_train[['Sex']])","0d458b6b":"df_train.head()","0e638b3b":"X = df_train.drop('Survived', axis = 1)\ny = df_train['Survived']","6faa1e2c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","712f758a":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","f084e3d5":"# from sklearn.ensemble import RandomForestClassifier\n# classifier = RandomForestClassifier(max_depth=50, \n#                                      max_features=\"log2\",\n#                                      min_samples_leaf=1,\n#                                      min_samples_split=5,\n#                                      n_estimators=100)\n# classifier.fit(X_train, y_train)","ee41fab4":"# from sklearn.metrics import confusion_matrix, accuracy_score\n# y_pred = classifier.predict(X_test)\n# cm = confusion_matrix(y_test, y_pred)\n# print(cm)\n# accuracy_score(y_test, y_pred)","dc8a88fb":"# from sklearn.model_selection import cross_val_score\n# accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\n# print(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\n# print(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","22f7d1d6":"from xgboost import XGBClassifier\nclassifier = XGBClassifier(learning_rate=0.02, n_estimators=750,\n                   max_depth= 3, min_child_weight= 1, \n                   colsample_bytree= 0.6, gamma= 0.0, \n                   reg_alpha= 0.001, subsample= 0.8)\nclassifier.fit(X_train, y_train)","687fdde0":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","afec445c":"Numerical Data - [PassengerId, Pclass, Age, Survived, Parch, Sibsp, Fare]\n\nCategorical Data - [Sex, Embarked]\n\nUnknown Data - [Name, Ticket, Cabin]"}}