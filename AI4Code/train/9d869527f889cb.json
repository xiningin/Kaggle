{"cell_type":{"2ead1131":"code","c8e7047f":"code","c4193a27":"code","3d1756a3":"code","bd3dd215":"code","8a51ea08":"code","a46b1d8c":"code","9f4a74d6":"code","dc2161cc":"code","18d21eed":"code","f349278e":"code","a7738876":"code","ca3b2757":"code","48b6660b":"code","b8bbec5d":"code","132a075e":"code","cd7c63d0":"code","8a2172dc":"code","8bc62937":"markdown","c182ffd8":"markdown","33bb12ae":"markdown","a016020c":"markdown","5f3ed2cc":"markdown","ed4c5a04":"markdown","55cb22be":"markdown","876527b2":"markdown","71783f2e":"markdown","f5ca4239":"markdown","8999483d":"markdown","8467515c":"markdown","433781c9":"markdown"},"source":{"2ead1131":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport pandas as pd\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c8e7047f":"#!pip install plotly==4.1.0","c4193a27":"timesData = pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/timesData.csv\")","3d1756a3":"timesData.head()","bd3dd215":"timesData.info()","8a51ea08":"df = timesData.iloc[:100,:]\n\n# trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.university_name)\n# trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.university_name)\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","a46b1d8c":"#DataFrame\ndf2014 = timesData[timesData.year == 2014].iloc[:100,:]\ndf2015 = timesData[timesData.year == 2015].iloc[:100,:]\ndf2016 = timesData[timesData.year == 2016].iloc[:100,:]\n\n#trace1\ntrace1 =go.Scatter(\n                    x = df2014.world_rank, # University rankings for 2014\n                    y = df2014.citations,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 0, 0, 0.8)'),\n                    text= df2014.university_name)\n#trace2\ntrace2 =go.Scatter(\n                    x = df2015.world_rank, # University rankings for 2015\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(0, 255, 0, 0.8)'),\n                    text= df2015.university_name)\n#trace3\ntrace3 =go.Scatter(\n                    x = df2016.world_rank, # University rankings for 2016\n                    y = df2016.citations,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 0, 255, 0.8)'),\n                    text= df2016.university_name)\ndata = [trace1,trace2,trace3] # we combine traces in data\nlayout = dict(title=\"Citation vs Worl Rank of Top 100 Universities with 2014, 2015 and 106 years\",\n             xaxis = dict(title=\"World Rank\", ticklen=5, zeroline=False),\n             yaxis = dict(title=\"Citation\", ticklen=5, zeroline=False)\n             )\nfig = dict(data=data, layout=layout)\niplot(fig)","9f4a74d6":"#DataFrame\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n#trace1\ntrace1 = go.Bar(\n                    x = df2014.university_name, # Top 3 universities in 2014\n                    y = df2014.citations,\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)',\n                                 line=dict(color='rgba(0,0,0)', width=1.5)), #BarPlot color and thickness\n                    text= df2014.country)\n#trace2\ntrace2 = go.Bar(\n                    x = df2014.university_name, \n                    y = df2014.teaching,\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(255, 255, 128, 0.8)',\n                                 line=dict(color='rgba(0,0,0)', width=1.5)), #BarPlot color and thickness\n                    text= df2014.country)\ndata=[trace1,trace2]\nlayout = go.Layout(barmode=\"group\")\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","dc2161cc":"# DataFrame\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\nx = df2014.university_name\n#trace1\ntrace1 = {\n  'x': x,\n  'y': df2014.citations,\n  'name': 'citation',\n  'type': 'bar'\n};\n#trace2\ntrace2 = {\n  'x': x,\n  'y': df2014.teaching,\n  'name': 'teaching',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 universities'},\n  'barmode': 'relative',\n  'title': 'Citations and Teaching of Top 3 Universities in 2014'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","18d21eed":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\npie1 = df2016.num_students\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]  # str(2,4) => str(2.4) = > float(2.4) = 2.4\nlabels = df2016.university_name\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .2,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Universities Number of Students rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","f349278e":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:20,:]\nnum_students_size  = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        'y': df2016.teaching,\n        'x': df2016.world_rank,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': num_students_size,\n            'showscale': True\n        },\n        \"text\" :  df2016.university_name    \n    }\n]\niplot(data)","a7738876":"x2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\n#trace1\ntrace1 = go.Histogram(\n    x = x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker = dict(color= \"rgba(200,250,10,0.6)\"))\n\n#trace2\ntrace2 = go.Histogram(\n    x = x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker = dict(color= \"rgba(10,5,196,0.6)\"))\n\ndata=[trace1,trace2]\nlayout = go.Layout(barmode=\"overlay\",\n                  title = \"Students Staff Ratio in 2011 and 2012\",\n                  xaxis = dict(title=\"Students Staff Ratio\"),\n                  yaxis = dict(title=\"Count\"),\n)\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","ca3b2757":"x2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                        background_color=\"white\",\n                        width=512,\n                        height=384).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.savefig(\"graph.png\")\nplt.show()","48b6660b":"# data preparation\nx2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.total_score,\n    name = 'total score of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.research,\n    name = 'research of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","b8bbec5d":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]] #features\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","132a075e":"#first line plot\ntrace1 = go.Scatter(\n    x = dataframe.world_rank,\n    y = dataframe.teaching,\n    name = \"teaching\",\n    marker = dict(color = \"rgba(16,112,2,0.8)\"),\n)\n\n#second line plot\ntrace2 = go.Scatter(\n    x = dataframe.world_rank,\n    y = dataframe.income,\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    name = \"income\",\n    marker = dict(color = \"rgba(5,5,220,0.8)\"),\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2 = dict(\n        domain = [0.6, 0.95],\n        anchor = \"y2\",\n    ),\n    yaxis2 = dict(\n        domain = [0.6, 0.95],\n        anchor = \"x2\",\n    ),\n    title = \"Income and Teaching vs World Rank of Universities\"\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cd7c63d0":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    z=dataframe.citations,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,10)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","8a2172dc":"trace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    name = \"research\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.citations,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"citations\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"income\"\n)\n\ntrace4 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.total_score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_score\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Research, citation, income and total score VS World Rank of Universities'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","8bc62937":"## Line Charts","c182ffd8":"## Scatter Charts\nScatter Example: Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years","33bb12ae":"## Bubble Charts\nBubble Charts Example: University world rank (first 20) vs teaching score with number of students(size) and international score (color) in 2016","a016020c":"## Scatter Matrix Plots\nScatter Matrix = it helps us to see covariance and relation between more than 2 features","5f3ed2cc":"## Histogram\nLets look at histogram of students-staff ratio in 2011 and 2012 years.","ed4c5a04":"# BoxPlots","55cb22be":"## Pie Charts\nPie Charts Example: Students rate of top 7 universities in 2016","876527b2":"Second Bar Charts Example: citations and teaching of top 3 universities in 2014 (style2)","71783f2e":"## Word Cloud\nLets look at which country is mentioned most in 2011.","f5ca4239":"## 3D Scatter Plot with Colorscaling\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.","8999483d":"## Bar Charts\nFirst Bar Charts Example: citations and teaching of top 3 universities in 2014 (style1)","8467515c":"## Multiple Subplots\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.","433781c9":"## Inset Plots\nInset Matrix = 2 plots are in one frame"}}