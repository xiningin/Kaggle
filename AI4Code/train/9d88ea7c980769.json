{"cell_type":{"408d3fe1":"code","65f13c56":"code","fa4a9fbb":"code","345efce5":"code","730b74b5":"code","1c3f3a79":"code","686039b7":"code","9e878516":"code","0249ff8c":"code","36533901":"markdown"},"source":{"408d3fe1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65f13c56":"!pip install 'kaggle-environments>=0.1.6'","fa4a9fbb":"%%writefile copy_opponent_agent.py\n\ndef copy_opponent_agent(observation, configuration):\n    if observation.step > 0:\n        return observation.lastOpponentAction\n    else:\n        return 0","345efce5":"%%html\n<iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/rudzYPHuewc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","730b74b5":"%%writefile submission.py\n\ndef copy_opponent_agent (observation, configuration):\n    \n    if observation.step > 0:\n        opponent_action = observation.lastOpponentAction\n        your_action = (opponent_action +1) % 3\n        return your_action\n    \n    else:\n        return 1","1c3f3a79":"from kaggle_environments import evaluate, make, utils\nenv = make(\"rps\", debug=True)\nenv.render()","686039b7":"env.reset()\n\nenv.run([\"submission.py\", \"copy_opponent_agent.py\"])\nenv.render(mode=\"ipython\", width=700, height=550)","9e878516":"env.reset()\n\nenv.run([\"submission.py\", \"statistical\"])\nenv.render(mode=\"ipython\", width=700, height=550)","0249ff8c":"kaggle competitions submit -c rock-paper-scissors -f submission.py -m \"Message\"","36533901":"## Explaination of the code-block below :\n\n### An up vote will be highly appreciated. Thanks in advance\n\n**Mapping**\n\n0 : Rock\n\n1 : Paper\n\n2 : Scissors\n\nyour_action = (opponent_action+1)%3\n\n**Simulate**\n\nOpponent --------- You\n\n0(rock)  --------- 1((0+1)%3 = 1 = paper)\n\n1(paper) --------- 2((1+1)%3 = 2 = scissors)\n\n2(scissors) ------ 3((2+1)%3 = 0 = rock)\n\nSo using this method you always tend to win. Your choice is based on opponents last action so tie\/loss occurs when opponent chages move and in the next move you win.\n"}}