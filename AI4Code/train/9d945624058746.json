{"cell_type":{"8da32675":"code","4223df45":"code","81137c0b":"code","5ffa59ef":"code","bd071295":"code","d1227307":"code","5db34b9d":"code","69691371":"code","be9bd255":"code","8f740147":"code","9b30f9d1":"code","59365be0":"code","0692a8ab":"code","da92842e":"code","8cbc01a4":"code","2adda783":"code","17a84ce9":"code","8ac6f4b4":"code","1d24c531":"code","5d106be9":"code","8295a123":"markdown","2d63800e":"markdown","f3ee38a5":"markdown","8cc39b92":"markdown","de7ba1a2":"markdown","e415f5df":"markdown","5393d105":"markdown","67d09d06":"markdown","5c82e393":"markdown","426ae47b":"markdown","f10bcee4":"markdown","74254e16":"markdown","40b909f8":"markdown"},"source":{"8da32675":"import pandas as pd\nimport numpy as np\nfrom scipy.stats import poisson\nfrom glob import glob","4223df45":"# data ingestion - epl matches\nfile = '\/kaggle\/input\/historical-matches-epl-championship\/matches.csv'\nmatches = pd.read_csv(file, usecols=range(1,13))\nmatches.head()","81137c0b":"# data processing\nis_2020 = matches['Date'] > '2019-07'\nlast_10 = matches['Date'] > '2010-07'\n#last_5 = (matches['Date'] > '2013-07') & (matches['Date'] < '2018-07')\nlast_5 = matches['Date'] > '2015-07'\nlast_1 = matches['Date'] > '2019-07'\n\n# aggregate by home away team and return avg home away goals\nmatches[last_10].groupby(['HomeTeam', 'AwayTeam']).mean()","5ffa59ef":"matches[last_10]['HomeTeam'].value_counts()","bd071295":"# head to head between every team pairing in the last 10 seasons\nh2h = matches[last_5].groupby(['HomeTeam', 'AwayTeam']).mean()\nmatches[last_5].groupby(['HomeTeam', 'AwayTeam']).get_group(('Arsenal', 'Chelsea'))\n#h2h.filter(like='Chelsea', axis=0)\n#h2h.loc[('Arsenal', 'Chelsea')]\n#h2h.loc[['Chelsea']]","d1227307":"# epl and championship teams home and away form last season\nhome_form = matches[last_1].groupby(['HomeTeam']).mean()\naway_form = matches[last_1].groupby(['AwayTeam']).mean()\nhome_form.loc['Leeds'], away_form.loc['Leeds']","5db34b9d":"# modeling - get score function\nhome = 'Brighton'\naway = 'Chelsea'\n\ndef get_score(home, away):\n    # head to head results in last 5 seasons\n    home_mean = h2h.loc[(home, away)][0]\n    away_mean = h2h.loc[(home, away)][1]\n    \n    # simulate score by random sampling from parametrized Poisson distribution\n    home_score = poisson.rvs(home_mean, size=1)[0]\n    away_score = poisson.rvs(away_mean, size=1)[0]\n\n    return (home_score, away_score)\n\nget_score(home, away)","69691371":"# simulate score over 10000 trials and plot histogram of most probable result\nsims = {}\ntrials = 100\nfor i in range(trials):\n    score = get_score(home, away)\n    sims[score] = sims.get(score, 0) + 1\n\nhist = []\nfor k, v in sims.items():\n    p = v \/ trials\n    hist.append((v, k, p))\n    \nhist.sort(reverse=True)\nhist","be9bd255":"# helper function returns match result (home win, away win, draw)\ndef get_result(home_score, away_score):\n    if home_score > away_score:\n        result = 'H'\n    elif home_score < away_score:\n        result = 'A'\n    else:\n        result = 'D'\n    return result\n\nget_result(2,1)","8f740147":"# modeling - get score function returns most probable result between two sides\nhome = 'Liverpool'\naway = 'Leeds'\ntrials = 10000\n\ndef get_scores(home, away):\n    # if head to head results exists\n    try:\n        # head to head results in last 5 seasons\n        home_mean = h2h.loc[(home, away)][0]\n        away_mean = h2h.loc[(home, away)][1]\n\n    # if head to head results unavailable e.g. Leeds\n    except KeyError:\n        # home and away form last season\n        home_scored = home_form.loc[home]['FTHG']\n        home_conceded = home_form.loc[home]['FTAG']\n        away_scored = away_form.loc[away]['FTAG']\n        away_conceded = away_form.loc[away]['FTHG']\n        \n        # average over goals for and against each team\n        home_mean = (home_scored + away_conceded) \/ 2\n        away_mean = (away_scored + home_conceded) \/ 2\n\n    # simulate score by random sampling from parametrized Poisson distribution\n    home_scores = poisson.rvs(home_mean, size=trials, random_state=2).astype(str)\n    away_scores = poisson.rvs(away_mean, size=trials, random_state=0).astype(str)\n    \n    # get most probable scoreline and outcome with associated probabilities\n    scores = pd.DataFrame(data={'home':home_scores, 'away':away_scores})\n    scores['result'] = scores['home'] + '-' + scores['away']\n    score_predictions = scores['result'].value_counts()\n    score_probability = round(score_predictions \/ trials * 100, 1)\n    scores['outcome'] = scores.apply(lambda x: get_result(x.home, x.away), axis=1)\n    outcome_predictions = scores['outcome'].value_counts()\n    outcome_probability = round(outcome_predictions \/ trials * 100, 1)\n  \n    return score_predictions.index[0], score_probability[0], outcome_predictions.index[0], outcome_probability[0]\n    \nget_scores(home, away)","9b30f9d1":"# data analysis - simulate 20\/21 season opening week (week 1 games starting 2020-09-12)\nhome_teams = ['Fulham', 'Crystal Palace', 'Liverpool', 'West Ham', 'West Brom', 'Tottenham', 'Sheffield United', 'Brighton']\naway_teams = ['Arsenal', 'Southampton', 'Leeds', 'Newcastle', 'Leicester', 'Everton', 'Wolves', 'Chelsea']\n\nweek1 = pd.DataFrame(data={'Home':home_teams, 'Away':away_teams})\nweek1['Pred. Score'] = week1.apply(lambda x: get_scores(x.Home, x.Away)[0], axis=1)\nweek1['Probability'] = week1.apply(lambda x: get_scores(x.Home, x.Away)[1], axis=1).map('{:,.1f}%'.format)\nweek1['Pred. Result'] = week1.apply(lambda x: get_scores(x.Home, x.Away)[2], axis=1)\nweek1['Prob. (%)'] = week1.apply(lambda x: get_scores(x.Home, x.Away)[3], axis=1).map('{:,.1f}%'.format)\n#week1","59365be0":"week1['Actual Score'] = ['0-3','1-0','4-3','0-2','0-3','0-1','0-2','1-3']\nweek1['Actual Result'] = ['A','H','H','A','A','A','A','A']\nweek1","0692a8ab":"# data analysis - simulate 20\/21 season week 2 \nhome_teams = ['Everton', 'Leeds', 'Man United', 'Arsenal', 'Southampton', 'Newcastle', 'Chelsea', 'Leicester', 'Aston Villa', 'Wolves']\naway_teams = ['West Brom', 'Fulham', 'Crystal Palace', 'West Ham', 'Tottenham', 'Brighton', 'Liverpool', 'Burnley', 'Sheffield United', 'Man City']\n\nweek2 = pd.DataFrame(data={'Home':home_teams, 'Away':away_teams})\nweek2['Pred. Score'] = week2.apply(lambda x: get_scores(x.Home, x.Away)[0], axis=1)\nweek2['Probability'] = week2.apply(lambda x: get_scores(x.Home, x.Away)[1], axis=1).map('{:,.1f}%'.format)\nweek2['Pred. Result'] = week2.apply(lambda x: get_scores(x.Home, x.Away)[2], axis=1)\nweek2['Prob. (%)'] = week2.apply(lambda x: get_scores(x.Home, x.Away)[3], axis=1).map('{:,.1f}%'.format)\nweek2['Actual Score'] = ['5-2','4-3','1-3','2-1','2-5','0-3','0-2','4-2','1-0','1-3']\nweek2['Actual Result'] = ['H','H','A','H','A','A','A','H','H','A']\nweek2","da92842e":"# data analysis - simulate 20\/21 season week 3 \nhome_teams = ['Brighton', 'Crystal Palace', 'West Brom', 'Burnley', 'Sheffield United', 'Tottenham', 'Man City', 'West Ham', 'Fulham', 'Liverpool']\naway_teams = ['Man United', 'Everton', 'Chelsea', 'Southampton', 'Leeds', 'Newcastle', 'Leicester', 'Wolves', 'Aston Villa', 'Arsenal']\n\nweek3 = pd.DataFrame(data={'Home':home_teams, 'Away':away_teams})\nweek3['Pred. Score'] = week3.apply(lambda x: get_scores(x.Home, x.Away)[0], axis=1)\nweek3['Probability'] = week3.apply(lambda x: get_scores(x.Home, x.Away)[1], axis=1).map('{:,.1f}%'.format)\nweek3['Pred. Result'] = week3.apply(lambda x: get_scores(x.Home, x.Away)[2], axis=1)\nweek3['Prob. (%)'] = week3.apply(lambda x: get_scores(x.Home, x.Away)[3], axis=1).map('{:,.1f}%'.format)\nweek3['Actual Score'] = ['2-3','1-2','3-3','0-1','0-1','1-1','2-5','4-0','0-3','3-1']\nweek3['Correct Scoreline'] = week3['Actual Score'] == week3['Pred. Score']\nweek3['Actual Result'] = week3['Actual Score'].apply(lambda x: get_result(x[0], x[-1]))\nweek3['Correct Result'] = week3['Actual Result'] == week3['Pred. Result']\nweek3","8cbc01a4":"print('scoreline accuracy: %f' % (week3['Correct Scoreline'].sum() \/ week3['Correct Scoreline'].count()))\nprint('result accuracy: %f' % (week3['Correct Result'].sum() \/ week3['Correct Result'].count()))","2adda783":"# data analysis - simulate 20\/21 season week 4\nhome_teams = ['Chelsea','Everton','Leeds','Newcastle','Leicester','Southampton','Arsenal','Wolves','Man United','Aston Villa']\naway_teams = ['Crystal Palace','Brighton','Man City','Burnley','West Ham','West Brom','Sheffield United','Fulham','Tottenham','Liverpool']\n\nweek4 = pd.DataFrame(data={'Home':home_teams, 'Away':away_teams})\nweek4['Pred. Score'] = week4.apply(lambda x: get_scores(x.Home, x.Away)[0], axis=1)\nweek4['Probability'] = week4.apply(lambda x: get_scores(x.Home, x.Away)[1], axis=1).map('{:,.1f}%'.format)\nweek4['Pred. Result'] = week4.apply(lambda x: get_scores(x.Home, x.Away)[2], axis=1)\nweek4['Prob. (%)'] = week4.apply(lambda x: get_scores(x.Home, x.Away)[3], axis=1).map('{:,.1f}%'.format)\nweek4['Actual Score'] = ['4-0','4-2','1-1','3-1','0-3','2-0','1-0','2-1','1-6','7-2']\nweek4['Correct Scoreline'] = week4['Actual Score'] == week4['Pred. Score']\nweek4['Actual Result'] = week4['Actual Score'].apply(lambda x: get_result(x[0], x[-1]))\nweek4['Correct Result'] = week4['Actual Result'] == week4['Pred. Result']\nweek4","17a84ce9":"print('scoreline accuracy: %f' % (week4['Correct Scoreline'].sum() \/ week4['Correct Scoreline'].count()))\nprint('result accuracy: %f' % (week4['Correct Result'].sum() \/ week4['Correct Result'].count()))","8ac6f4b4":"# data analysis - simulate 20\/21 season week 5\nhome_teams = ['Everton','Chelsea','Man City','Newcastle','Sheffield United','Crystal Palace','Tottenham','Leicester','West Brom','Leeds']\naway_teams = ['Liverpool','Southampton','Arsenal','Man United','Fulham','Brighton','West Ham','Aston Villa','Burnley','Wolves']\n\nweek5 = pd.DataFrame(data={'Home':home_teams, 'Away':away_teams})\nweek5['Pred. Score'] = week5.apply(lambda x: get_scores(x.Home, x.Away)[0], axis=1)\nweek5['Probability'] = week5.apply(lambda x: get_scores(x.Home, x.Away)[1], axis=1).map('{:,.1f}%'.format)\nweek5['Pred. Result'] = week5.apply(lambda x: get_scores(x.Home, x.Away)[2], axis=1)\nweek5['Prob. (%)'] = week5.apply(lambda x: get_scores(x.Home, x.Away)[3], axis=1).map('{:,.1f}%'.format)\nweek5['Actual Score'] = ['2-2','3-3','1-0','1-4','1-1','1-1','3-3','0-1','0-0','0-1']\nweek5['Correct Scoreline'] = week5['Actual Score'] == week5['Pred. Score']\nweek5['Actual Result'] = week5['Actual Score'].apply(lambda x: get_result(x[0], x[-1]))\nweek5['Correct Result'] = week5['Actual Result'] == week5['Pred. Result']\nweek5","1d24c531":"print('scoreline accuracy: %f' % (week5['Correct Scoreline'].sum() \/ week5['Correct Scoreline'].count()))\nprint('result accuracy: %f' % (week5['Correct Result'].sum() \/ week5['Correct Result'].count()))","5d106be9":"# data analysis - simulate 20\/21 season week 6\nhome_teams = ['Aston Villa','West Ham','Fulham','Man United','Liverpool','Southampton','Wolves','Arsenal','Brighton','Burnley']\naway_teams = ['Leeds','Man City','Crystal Palace','Chelsea','Sheffield United','Everton','Newcastle','Leicester','West Brom','Tottenham']\n\nweek6 = pd.DataFrame(data={'Home':home_teams, 'Away':away_teams})\nweek6['Pred. Score'] = week6.apply(lambda x: get_scores(x.Home, x.Away)[0], axis=1)\nweek6['Probability'] = week6.apply(lambda x: get_scores(x.Home, x.Away)[1], axis=1).map('{:,.1f}%'.format)\nweek6['Pred. Result'] = week6.apply(lambda x: get_scores(x.Home, x.Away)[2], axis=1)\nweek6['Prob. (%)'] = week6.apply(lambda x: get_scores(x.Home, x.Away)[3], axis=1).map('{:,.1f}%'.format)\n#week6['Actual Score'] = []\n#week6['Correct Scoreline'] = week6['Actual Score'] == week6['Pred. Score']\n#week6['Actual Result'] = week6['Actual Score'].apply(lambda x: get_result(x[0], x[-1]))\n#week6['Correct Result'] = week6['Actual Result'] == week6['Pred. Result']\nweek6","8295a123":"# Predicting the 2020\/21 EPL season!!!\nCredit to [Tuan Doan Nguyen](https:\/\/towardsdatascience.com\/o-jogo-bonito-predicting-the-premier-league-with-a-random-model-1b02fa3a7e5a) for inspiration :)   \nBlue is the colour, football is the game...  \nKTBFFH","2d63800e":"Simulate 20\/21 season week 4 - games starting 2020-10-03\n- Chelsea almost certain to start with newly signed keeper Mendy and 50M left-back Chilwell after last week's disappointing defensive display\n- Everton likely to continue its perfect start to the season at home against Brighton and move to the top (77.9%)\n- Mourinho travel to its former club and will look to secure a result this season around as the underdogs (60.7%)","f3ee38a5":"Simulate 20\/21 season week 5 - games starting 2020-10-17\n- Merseyside derby as top of the table Everton host defending champions to break their win-less duck (59.7%)\n- Chelsea without Tiago Silva and Mendy, but Pulisic fit to start, will Saints provide the upset? (41.0%)\n- Man City need to pick up points against in-form Arsenal (71.7%)","8cc39b92":"Simulate 20\/21 season week 6 - games starting 2020-10-23\n- Will Roy Hodgson's in-form Hammers defy title favorites and create the week's biggest upset? (91.6%)\n- Man United host old rivals Chelsea in a match that could set the tone for top-four contention? (71.8%)\n- Leeds successfully overcome Villa to end unbeaten run on the Friday kickoff (37.3%)","de7ba1a2":"Review of Week 2 predictions vs actuals (three things):\n- 1 of 10 correct scorelines \/ GD (10%) - 4 of 10 refs sent players off in a high-scoring week of football with Son scoring a 4 goal hat-trick\n- 7 of 10 correct results (70%) - talismatic Zaha haunts former club on his return to Old Trafford to claim shock victory for Palace\n- 1 close call - Chelsea were almost allowed back into the game despite being a man down had it not been for Kepa and Jorginho blunders\n\nEverton, Leicester, and Arsenal emerge as the form teams coming from behind to win at home in another week without draws","e415f5df":"Review of Week 3 predictions vs actuals (three things):\n- 1 of 10 correct scorelines (20%) - first correct scoreline as Liverpool comeback from a goal down to claim victory at home against in-form Arsenal who immediately avenge their loss by knocking the defending champions out of the Carabao in the round of 16 in what was their third match-up in as many weeks\n- 3 of 10 correct results (30%) - major upsets as Chelsea fought back from a West Brom treble and Vardy hat-trick helped Leicester to an unprecedented 5 goal victory at City\n- 1 close call - Newcastle awarded controversial last minute penalty thanks to new handball rule to earn a point at Tottenham\n\nEverton, Leicester, and Liverpool sit top of the table in what is Leicester's best ever start in the Premier League","5393d105":"Review of Week 1 predictions vs actuals (three things):\n- 2 of 8 correct scorelines \/ GD (25%) - overwhelming away favorites Arsenal and Chelsea (KTBFFH!) delivered against minnows\n- 4 of 8 correct results (50%) - Wolves making the biggest upset, followed by James led Everton against toothless Spurs \n- 1 close calls - Leeds came from behind three times and almost stole a point away at Anfield an evenly matched contest\n\nIn a strange week where 6 of 8 home teams capitulated getting half the results correct puts us ahead of random guessing...","67d09d06":"## Data prep - create kaggle-like data set for all historical EPL match results (1993-)\nsource csv -> http:\/\/www.football-data.co.uk\/englandm.php  \ncheck against -> https:\/\/www.premierleague.com\/results?co=1&se=2&cl=-1","5c82e393":"Come on Chelsea!!!","426ae47b":"Simulate 20\/21 season week 2 - games starting 2020-09-19\n- First full match-week involving all teams incl. both Manchester sides who will be playing their first games of the season where City travel to bogey team Wolves\n- Newly promoted sides Leeds and Fulham will be predicted based on their previous Championship head-to-head\n- Will lacklustre Chelsea lose (50.9%) its first home game of the season against the reigning champions with its leaky backline? ","f10bcee4":"Simulate 20\/21 season week 3 - games starting 2020-09-26\n- Chelsea look to clinch first clean sheet against West Brom with in-form Cabellero likely to displace the out of favor Kepa on the back of mid-week cup heroics\n- Charity Shield rematch will see one of the defending champions drop points this week at Anfield with Liverpool heavy favorites (81.5%)\n- Fulham look likely to secure first win of the season against fellow newly promoted Aston Villa (81.0% Home)","74254e16":"## Data analysis - predict scores using most probable result\nSimulate 20\/21 season opening week - games starting 2020-09-12","40b909f8":"## Modeling - get score function using nothing but the Poisson distribution"}}