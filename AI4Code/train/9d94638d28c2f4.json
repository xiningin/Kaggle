{"cell_type":{"d3c999a6":"code","51ed7b58":"code","5db71d27":"code","4fab60e8":"code","7b829c8f":"code","fd3af034":"code","4b582c7c":"code","c04ea6db":"code","6794e9dd":"code","a4122da9":"code","48150f72":"code","ced7b11d":"code","c8e5741b":"code","3d1827ff":"code","8201ba88":"code","f844d827":"code","d4c459d9":"code","fdd337f2":"code","20295ff4":"code","7e7e4c9d":"code","0031d60f":"markdown","c07e1931":"markdown","c366bdaf":"markdown","235139be":"markdown","f4f1e9ce":"markdown","0e429797":"markdown","8727308b":"markdown","4abe3bbc":"markdown","b706e136":"markdown","2468b90c":"markdown","1e7a0628":"markdown","38e0726d":"markdown"},"source":{"d3c999a6":"import os\nimport numpy as np\nimport pandas as pd\nimport os\nimport sys\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.model_selection import StratifiedKFold\n# from sklearn.model_selection import StratifiedGroupKFold\nimport typing as tp\nimport lightgbm as lgb\nimport time\nfrom contextlib import contextmanager\nfrom sklearn.decomposition import PCA\nimport sklearn.preprocessing\nfrom multiprocessing import Pool, cpu_count\nfrom sklearn.metrics import roc_auc_score","51ed7b58":"pd.set_option('display.max_columns', None)  # \u8868\u793a\u3067\u304d\u308b\u5217\u6570\npd.set_option('display.max_rows', 500)  # \u8868\u793a\u3067\u304d\u308b\u884c\u6570\npd.set_option('display.width', 200)  # \u8868\u793a\u3067\u304d\u308b\u6a2a\u5e45\u3092\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u5408\u308f\u305b\u3066\u5e83\u3052\u308b","5db71d27":"EXEC_LOCAL = False\nif EXEC_LOCAL:\n    # \u30d1\u30b9\u306e\u6307\u5b9a\n    INPUT_DIR = \"input\"\n    OUTPUT_DIR = \"output\"\n    EXP_NAME = os.path.basename(__file__)\nelse:\n    INPUT_DIR = '..\/input\/shigglecup-2nd\/'\n    OUTPUT_DIR = \"..\/output\" \n    EXP_NAME = \"shigglecup2_vXX\"","4fab60e8":"# \u30b7\u30fc\u30c9\u3092\u5b9a\u7fa9\u3000## \u666e\u6bb5\u306f5\u30b7\u30fc\u30c9\u3001\u6700\u7d42\u306f50\u30b7\u30fc\u30c9\n# SEED_LIST = [i + 1 for i in range(50)]\n# SEED_LIST = [1, 2, 7, 12, 17]\nSEED_LIST = [1, 2, 7]","7b829c8f":"# \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5b9a\u7fa9\nMODEL_PARAMS = {\n    \"lgb\": {\n        'objective': 'binary',\n        'metric': 'auc',\n        'boosting': 'gbdt',\n        'verbosity': -1,\n        'learning_rate': 0.05,  ## \u666e\u6bb5\u306f0.05\u3001\u6700\u7d42\u306f0.01\n    },\n}\nFIT_PARAMS = {\n    \"lgb\": {\n        'early_stopping_rounds': 500,\n        'num_boost_round': 2000,\n        'verbose_eval': 500\n    },\n}\nN_SPLITS = 5\nCOL_TARGET = \"target\"\nCOL_ID_LIST = [\"first\", \"second\"]","fd3af034":"# \u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3059\ndf_train = pd.read_csv(os.path.join(INPUT_DIR, \"train.csv\"))\ndf_test = pd.read_csv(os.path.join(INPUT_DIR, \"test.csv\"))\ndf_team = pd.read_csv(os.path.join(INPUT_DIR, \"team_id.csv\"))\ndf_team = df_team.set_index(\"team_id\")\ndf_poke = pd.read_csv(os.path.join(INPUT_DIR, \"pokemon.csv\"))\ndf_poke = df_poke.set_index(\"pokemon_id\")","4b582c7c":"# 2021\/11\/18 type2\u306ftype1\u3067\u88dc\u5b8c\u3059\u308b\ndf_poke[\"Type_2\"].fillna(df_poke[\"Type_1\"], inplace=True)\ndf_typetable = pd.read_csv(os.path.join(INPUT_DIR, \"typetable.csv\"))\ndf_typetable = df_typetable.set_index(\"atck\")","c04ea6db":"# 2021\/11\/18 \u7279\u5fb4\u91cf\u3092\u5168\u4f53\u7684\u306b\u4f5c\u308a\u66ff\u3048\u3001\u81ea\u5206\u306e6\u4f53\u3068\u76f8\u624b\u306e6\u4f53\u3092\u30011\u4f53\u305a\u3064\u3059\u3079\u3066\u6bd4\u8f03\u3057\u3066\u3044\u304f\nlist_id6 = [\"pokemon_id_1\", \"pokemon_id_2\", \"pokemon_id_3\", \"pokemon_id_4\", \"pokemon_id_5\", \"pokemon_id_6\"]\nlist_sum6 = [\"hp\", \"att\", \"def\", \"spa\", \"spd\", \"spe\"]\nfor cnt, i in enumerate(list_id6):\n    df_team[f\"{i}_hp\"] = df_team[i].map(df_poke[\"HP\"])\n    df_team[f\"{i}_att\"] = df_team[i].map(df_poke[\"Attack\"])\n    df_team[f\"{i}_def\"] = df_team[i].map(df_poke[\"Defense\"])\n    df_team[f\"{i}_spa\"] = df_team[i].map(df_poke[\"Sp_Atk\"])\n    df_team[f\"{i}_spd\"] = df_team[i].map(df_poke[\"Sp_Def\"])\n    df_team[f\"{i}_spe\"] = df_team[i].map(df_poke[\"Speed\"])\n    # \u5408\u8a08\u7279\u5fb4\u91cf\u3092\u4f5c\u308b\n    df_team[f\"{i}_sum6\"] = 0\n    for j in list_sum6:\n        df_team[f\"{i}_sum6\"] += df_team[f\"{i}_{j}\"]\n    df_team[f\"{i}_tp1\"] = df_team[i].map(df_poke[\"Type_1\"])\n    df_team[f\"{i}_tp2\"] = df_team[i].map(df_poke[\"Type_2\"])\n    df_team[f\"{i}_lege\"] = df_team[i].map(df_poke[\"Legendary\"])\n    df_team[f\"{i}_sum6lege\"] = df_team[f\"{i}_lege\"] * df_team[f\"{i}_sum6\"]\n    df_team[f\"{i}_kou1\"] = df_team[f\"{i}_att\"] + df_team[f\"{i}_spe\"]\n    df_team[f\"{i}_kou2\"] = df_team[f\"{i}_spa\"] + df_team[f\"{i}_spe\"]\n    df_team[f\"{i}_shu1\"] = df_team[f\"{i}_def\"] + df_team[f\"{i}_hp\"]\n    df_team[f\"{i}_shu2\"] = df_team[f\"{i}_spd\"] + df_team[f\"{i}_hp\"]","6794e9dd":"# \u3053\u3053\u304b\u3089\u7279\u5fb4\u91cf\u3092\u751f\u6210\u3059\u308b\ndf_all = pd.concat([df_train, df_test])\n\n# 2021\/11\/19 \u76f8\u624b\u30c1\u30fc\u30e0\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\ndf_all = pd.concat([df_all, pd.get_dummies(df_all['second'], prefix='second')], axis=1)\n\n# \u30c1\u30fc\u30e0\u60c5\u5831\u3092\u30de\u30fc\u30b8\u3059\u308b\ndf_all = df_all.merge(df_team, left_on=[\"first\"], right_on=[\"team_id\"], how=\"left\")\ndf_all = df_all.merge(df_team, left_on=[\"second\"], right_on=[\"team_id\"], suffixes=['_1st', '_2nd'], how=\"left\")","a4122da9":"# 2021\/11\/19 pokemon_id\u3092dummy\u5316\u3059\u308b \u300c999\u300d\u306b\u3059\u308bpokemon\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b train\u306e\u307f\u3001test\u306e\u307f\u306f999\u306b\u307e\u3068\u3081\u308b\ndf_train = df_all[~df_all[COL_TARGET].isnull()]\ndf_test = df_all[df_all[COL_TARGET].isnull()]\nsr_pokemon_train1st = pd.concat(\n    [df_train[\"pokemon_id_1_1st\"], df_train[\"pokemon_id_2_1st\"], df_train[\"pokemon_id_3_1st\"],\n     df_train[\"pokemon_id_4_1st\"], df_train[\"pokemon_id_5_1st\"], df_train[\"pokemon_id_6_1st\"]])\nsr_pokemon_test1st = pd.concat(\n    [df_test[\"pokemon_id_1_1st\"], df_test[\"pokemon_id_2_1st\"], df_test[\"pokemon_id_3_1st\"],\n     df_test[\"pokemon_id_4_1st\"], df_test[\"pokemon_id_5_1st\"], df_test[\"pokemon_id_6_1st\"]])\nsr_pokemon_train2nd = pd.concat(\n    [df_train[\"pokemon_id_1_2nd\"], df_train[\"pokemon_id_2_2nd\"], df_train[\"pokemon_id_3_2nd\"],\n     df_train[\"pokemon_id_4_2nd\"], df_train[\"pokemon_id_5_2nd\"], df_train[\"pokemon_id_6_2nd\"]])\nsr_pokemon_test2nd = pd.concat(\n    [df_test[\"pokemon_id_1_2nd\"], df_test[\"pokemon_id_2_2nd\"], df_test[\"pokemon_id_3_2nd\"],\n     df_test[\"pokemon_id_4_2nd\"], df_test[\"pokemon_id_5_2nd\"], df_test[\"pokemon_id_6_2nd\"]])\ndf_tmp = pd.concat(\n    [sr_pokemon_train1st.value_counts().rename(\"train1st\"), sr_pokemon_train2nd.value_counts().rename(\"train2nd\"),\n     sr_pokemon_test1st.value_counts().rename(\"test1st\"), sr_pokemon_test2nd.value_counts().rename(\"test2nd\")],\n    axis=1)\n# list_train_only = df_tmp[\n#     df_tmp[\"test1st\"].isnull() & df_tmp[\"train2nd\"].isnull() & df_tmp[\"test2nd\"].isnull()].index.tolist()\nlist_test_only = df_tmp[\n    df_tmp[\"train1st\"].isnull() & df_tmp[\"train2nd\"].isnull() & df_tmp[\"test2nd\"].isnull()].index.tolist()","48150f72":"# 2021\/11\/19 pokemon_id\u3092dummy\u5316\u3059\u308b\nlist_drop_poke = ['pokemon_id_1_1st', 'pokemon_id_2_1st', 'pokemon_id_3_1st', 'pokemon_id_4_1st',\n                  'pokemon_id_5_1st', 'pokemon_id_6_1st',\n                  'pokemon_id_1_2nd', 'pokemon_id_2_2nd', 'pokemon_id_3_2nd', 'pokemon_id_4_2nd',\n                  'pokemon_id_5_2nd', 'pokemon_id_6_2nd']\ndf_tmp = pd.DataFrame()\nfor i in list_drop_poke:\n    # df_tmp[i] = df_all[i].mask(df_all[i].isin(list_train_only) | df_all[i].isin(list_test_only), 999)\n    df_tmp[i] = df_all[i].mask(df_all[i].isin(list_test_only), 999)\ncategories = set(df_tmp['pokemon_id_1_1st'].unique().tolist()\n                 + df_tmp['pokemon_id_2_1st'].unique().tolist()\n                 + df_tmp['pokemon_id_3_1st'].unique().tolist()\n                 + df_tmp['pokemon_id_4_1st'].unique().tolist()\n                 + df_tmp['pokemon_id_5_1st'].unique().tolist()\n                 + df_tmp['pokemon_id_6_1st'].unique().tolist()\n                 + df_tmp['pokemon_id_1_2nd'].unique().tolist()\n                 + df_tmp['pokemon_id_2_2nd'].unique().tolist()\n                 + df_tmp['pokemon_id_3_2nd'].unique().tolist()\n                 + df_tmp['pokemon_id_4_2nd'].unique().tolist()\n                 + df_tmp['pokemon_id_5_2nd'].unique().tolist()\n                 + df_tmp['pokemon_id_6_2nd'].unique().tolist())\n\n# \u30dd\u30b1\u30e2\u30f3\u306e\u6709\u7121\u306e\u5dee\u5206\u3092\u3068\u308b\uff081st\u306e\u307f\u306b\u3044\u308c\u30701\u30012nd\u306e\u307f\u306b\u3044\u308c\u3070-1\uff09\nfor i in [\"1st\", \"2nd\"]:\n    for j in range(6):\n        id_j = j + 1\n        df_tmp[f'pokemon_id_{id_j}_{i}'] = pd.Categorical(df_tmp[f'pokemon_id_{id_j}_{i}'], categories=categories)\n        df_dummy = pd.get_dummies(df_tmp[f'pokemon_id_{id_j}_{i}'], prefix='pid')\n        if i == \"1st\" and id_j == 1:\n            df_dummy_sabun = df_dummy\n        elif i == \"1st\":\n            df_dummy_sabun = df_dummy_sabun + df_dummy\n        else:\n            df_dummy_sabun = df_dummy_sabun + (df_dummy * -1)\ndf_all = pd.concat([df_all, df_dummy_sabun], axis=1)","ced7b11d":"# 2021\/11\/19 1\u4f53\u305a\u3064\u5dee\u5206\u7279\u5fb4\u91cf\u3092\u751f\u6210\u3059\u308b\nlist_winave = []\nlist_sabun = list_sum6 + [\"sum6\", \"sum6lege\", \"kou1\", \"kou2\", \"shu1\", \"shu2\"]\nfor c in list_sabun:\n    print(c)\n    c_sabun = f\"sabun_{c}\"\n    list_winave = list_winave + [c_sabun]\n    for i in range(6):\n        id_a = i + 1\n        for j in range(6):\n            id_b = j + 1\n            cname_a = f\"pokemon_id_{id_a}_{c}_1st\"\n            cname_b = f\"pokemon_id_{id_b}_{c}_2nd\"\n            df_all[\"tmp\"] = df_all[[cname_a, cname_b]].apply(lambda x: x[cname_a] - x[cname_b], axis=1)\n            if id_a == 1 and id_b == 1:\n                df_all[c_sabun] = df_all[\"tmp\"].map(lambda x: [x])\n            else:\n                df_all[c_sabun] = df_all[[c_sabun, \"tmp\"]].apply(lambda x: x[c_sabun] + [x[\"tmp\"]], axis=1)","c8e5741b":"# \u76f8\u6027\u7279\u5fb4\u91cf\u3092\u751f\u6210\u3059\u308b\nlist_aisho = [[\"1st\", \"2nd\"], [\"2nd\", \"1st\"]]\nlist_drop_tmp = [\"tmp\", \"tmp_tp1\", \"tmp_tp2\"]\nfor a, b in list_aisho:\n    print(a, b)\n    c_aisho1 = f\"aisho1_{a}_{b}\"\n    c_aisho2 = f\"aisho2_{a}_{b}\"\n    list_winave = list_winave + [c_aisho1, c_aisho2]\n    for i in range(6):\n        id_a = i + 1\n        print(id_a)\n        for j in range(6):\n            id_b = j + 1\n            # \u76f8\u6027\u3092\u53d6\u308b\n            cname_a1 = f\"pokemon_id_{id_a}_tp1_{a}\"\n            cname_a2 = f\"pokemon_id_{id_a}_tp2_{a}\"\n            cname_b = f\"pokemon_id_{id_b}_tp1_{b}\"\n            df_all[\"tmp_tp1\"] = df_all[[cname_a1, cname_b]].apply(\n                lambda x: df_typetable.at[x[cname_a1], x[cname_b]], axis=1)\n            df_all[\"tmp_tp2\"] = df_all[[cname_a2, cname_b]].apply(\n                lambda x: df_typetable.at[x[cname_a2], x[cname_b]], axis=1)\n            if id_a == 1 and id_b == 1:\n                df_all[c_aisho1] = df_all[\"tmp_tp1\"].map(lambda x: [x])\n                df_all[c_aisho2] = df_all[\"tmp_tp2\"].map(lambda x: [x])\n            else:\n                df_all[c_aisho1] = df_all[[c_aisho1, \"tmp_tp1\"]].apply(lambda x: x[c_aisho1] + [x[\"tmp_tp1\"]],\n                                                                       axis=1)\n                df_all[c_aisho2] = df_all[[c_aisho2, \"tmp_tp2\"]].apply(lambda x: x[c_aisho2] + [x[\"tmp_tp2\"]],\n                                                                       axis=1)","3d1827ff":"# \u5dee\u5206\u7279\u5fb4\u91cf\u3092\u4f5c\u308b\uff08\u2460win\u306e\u6570\u3001\u2461\u5e73\u5747\u5024\uff09\nfor i in list_winave:\n    print(i)\n    print(df_all[i].head(1))\n    df_all[f\"win_{i}\"] = df_all[i].map(lambda x: np.count_nonzero(np.array(x) > 0))\n    df_all[f\"lose_{i}\"] = df_all[i].map(lambda x: np.count_nonzero(np.array(x) < 0))\n    df_all[f\"ave_{i}\"] = df_all[i].map(lambda x: np.mean(np.array(x)))\nprint(df_all.shape)","8201ba88":"# \u4f7f\u308f\u306a\u3044\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3059\u308b\nprint(df_all.shape)\n# \u6587\u5b57\u5217\u578b\u306e\u5217\u306f\u6d88\u3059\nlist_drop_object = df_all.select_dtypes(include=[object]).columns.tolist()\nprint(f\"\u6587\u5b57\u5217\u578b\u306e\u305f\u3081\u524a\u9664\uff1a{list_drop_object}\")\ndf_all.drop(columns=list_drop_object, errors=\"ignore\", inplace=True)\nlist_drop_onaji = [i for i in df_all.columns.tolist() if len(df_all[i].unique()) == 1]\nprint(f\"\u5168\u3066\u540c\u3058\u5024\u306e\u305f\u3081\u524a\u9664\uff1a{list_drop_onaji}\")\ndf_all.drop(columns=list_drop_onaji, errors=\"ignore\", inplace=True)\nlist_drop_pokemon_id = [i for i in df_all.columns.tolist() if \"pokemon_id\" in i]\ndf_all.drop(columns=list_drop_pokemon_id, errors=\"ignore\", inplace=True)\ndf_all.drop(columns=list_drop_tmp, errors=\"ignore\", inplace=True)\ndf_all.drop(columns=list_drop_poke, errors=\"ignore\", inplace=True)\nprint(df_all.shape)","f844d827":"# \u2605\u2605\u2605\u6700\u7d42\u7279\u5fb4\u91cf\u30ea\u30b9\u30c8\u2605\u2605\u2605\nprint(df_all.info())","d4c459d9":"def fit_and_predict(X_id, X, X_test, y, model_params, fit_params, seed, n_splits):\n    \"\"\" \u8a13\u7df4(fit)\u3068\u63a8\u8ad6(predict)\u3092\u884c\u3046 \"\"\"\n    df_feature_importances = pd.DataFrame()\n    score_list = []\n\n    oof_pred = np.zeros(len(X))\n    test_pred_fold = np.zeros(len(X_test))\n    print(test_pred_fold)\n\n    # fold\u65b9\u6cd5\u3092\u6307\u5b9a\u3059\u308b\n    # kf = KFold(n_splits=n_splits, shuffle=True, random_state=seed)\n    # kf = GroupKFold(n_splits=n_splits)\n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)\n    # kf = StratifiedGroupKFold(n_splits=n_splits, shuffle=True, random_state=seed)\n\n    # 2021\/11\/18 StratifiedGroupKfold\u304bStratifiedKfold\u3067\u66f8\u304d\u63db\u3048\u3000\u3053\u3053\u304b\u3089\n    # for fold, (trn_idx, val_idx) in enumerate(kf.split(X, y, groups=X_id)):  # StratifiedGroupKfold\n    for fold, (trn_idx, val_idx) in enumerate(kf.split(X, y)):  # StratifiedKfold\n        # 2021\/11\/18  StratifiedGroupKfold\u304bStratifiedKfold\u3067\u66f8\u304d\u63db\u3048\u3000\u3053\u3053\u307e\u3067\n        print(f\"Seed: {seed} - Fold: {fold} ############################################################\")\n        X_trn = X.loc[trn_idx].reset_index(drop=True)\n        X_val = X.loc[val_idx].reset_index(drop=True)\n        y_trn = y[trn_idx]\n        y_val = y[val_idx]\n\n        # lightGBM\u3092\u5b9a\u7fa9\u3059\u308b\n        model_params[\"seed\"] = seed\n        with timer(\"Model training\"):\n            lgb_trn_data = lgb.Dataset(X_trn, label=y_trn)\n            lgb_val_data = lgb.Dataset(X_val, label=y_val)\n            model = lgb.train(params=model_params,\n                              train_set=lgb_trn_data,\n                              valid_names=['train', 'valid'],\n                              valid_sets=[lgb_trn_data, lgb_val_data],\n                              **fit_params)\n\n        # \u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u3092\u51fa\u529b\u3059\u308b\n        df_fi_tmp = pd.DataFrame()\n        df_fi_tmp[\"feature\"] = X_trn.columns\n        df_fi_tmp[\"importance\"] = model.feature_importance()\n        df_fi_tmp[\"fold\"] = fold\n        df_fi_tmp[\"seed\"] = seed\n        df_feature_importances = df_feature_importances.append(df_fi_tmp)\n\n        # validation\u3092\u63a8\u8ad6\u3059\u308b\n        val_pred = model.predict(X_val)\n        score = roc_auc_score(y_val, val_pred)\n\n        print(f\"score: {score:.5f}\")\n        score_list.append([seed, fold, score])\n\n        # oof\u306b\u30de\u30fc\u30b8\u3059\u308b\n        oof_pred[val_idx] = val_pred\n\n        # test\u3092\u63a8\u8ad6\u3059\u308b\n        test_pred_fold += model.predict(X_test)\n\n    # oof\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\n    oof_score = roc_auc_score(y, oof_pred)\n\n    print(f\"oof score: {oof_score :5f}\")\n    score_list.append([seed, \"oof\", oof_score])\n    df_score = pd.DataFrame(score_list, columns=[\"seed\", \"fold\", \"oof_score\"])\n\n    # \uff08test_pred\u306fmulticlass\u306e\u5834\u5408\u306f2d\u306a\u306e\u3067\u6ce8\u610f\uff09\n    test_pred = test_pred_fold \/ n_splits\n\n    return oof_pred, test_pred, df_score, df_feature_importances","fdd337f2":"# \u5b9f\u884c\u6642\u9593\u8a08\u6e2c\u7528\u30e2\u30b8\u30e5\u30fc\u30eb\n@contextmanager\ndef timer(title=\"\u5b9f\u884c\u6642\u9593\u8a08\u6e2c\"):\n    t0 = time.time()\n    yield\n    t1 = time.time()\n    print(f\"{title} : {t1 - t0}\u79d2\")","20295ff4":"# \u2605\u2605\u2605lightGBM\u5b9f\u884c\u90e8\u5206\u3000\u3053\u3053\u304b\u3089\u2605\u2605\u2605\ndf_sub = pd.read_csv(os.path.join(INPUT_DIR, \"sample_submission.csv\"))\n\n# \u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\ndf_train = df_all[~df_all[COL_TARGET].isnull()].copy()\ndf_test = df_all[df_all[COL_TARGET].isnull()].copy()\n\n# \u3044\u308d\u3044\u308d\u521d\u671f\u8a2d\u5b9a\ndf_test_pred, df_score_lgb_all, df_feat_imps_lgb_all = pd.DataFrame(), pd.DataFrame(), pd.DataFrame()\ny = df_train[COL_TARGET]\nX_id = df_train[COL_ID_LIST[0]]\ncol_drop = COL_ID_LIST + [COL_TARGET]\nX = df_train.drop(columns=col_drop)\nX_test = df_test.drop(columns=col_drop)\nprint(len(X))\nprint(len(y))\nprint(y)\nprint(len(X_test))\n\nseed_list = SEED_LIST\nlist_args = []\nfor seed in seed_list:\n    # LightGBM\u3067\u306e\u5b66\u7fd2\uff06\u63a8\u8ad6\n    print(f\"train_feat: {X.shape}, test_feat: {X_test.shape}\")\n    list_args.append([X_id,\n                      X,\n                      X_test,\n                      y,\n                      MODEL_PARAMS[\"lgb\"],\n                      FIT_PARAMS[\"lgb\"],\n                      seed,\n                      N_SPLITS])\n\n# \u4e26\u5217\u6f14\u7b97\u7528 \u3053\u3053\u304b\u3089\np_num = max(1, min(len(list_args), cpu_count() - 1))\np_num = 1 # 2021\/11\/23 \u306a\u305c\u304b\u30d5\u30ea\u30fc\u30ba\u3059\u308b\u306e\u30671\u56fa\u5b9a\nprint(f\"\u4e26\u5217\u51e6\u7406\uff1a{p_num}\")\nwith Pool(processes=p_num) as p:\n    list_result = p.starmap(fit_and_predict, list_args)  # main()\u306e\u5f15\u6570\u306b\u65e5\u4ed8\u3068\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u3066\u4e26\u5217\u6f14\u7b97\n\noof_pred_lgb = np.zeros(len(X))\ntest_pred_lgb = np.zeros(len(X_test))\nfor oof_pred_lgb_seed, test_pred_lgb_seed, df_score_lgb, df_feat_imps_lgb in list_result:\n    oof_pred_lgb += oof_pred_lgb_seed\n    test_pred_lgb += test_pred_lgb_seed\n    df_score_lgb_all = pd.concat([df_score_lgb_all, df_score_lgb])\n    df_feat_imps_lgb_all = pd.concat([df_feat_imps_lgb_all, df_feat_imps_lgb])\n# \u4e26\u5217\u6f14\u7b97\u7528 \u3053\u3053\u307e\u3067\n\n# \u5168\u3066\u306eseed\u306eoof\u3068test\u3092\u8a08\u7b97\u3059\u308b\noof_pred_lgb \/= len(seed_list)\ntest_pred_lgb \/= len(seed_list)\nall_pred_lgb = np.concatenate((oof_pred_lgb, test_pred_lgb))\ndf_test_pred[COL_TARGET] = test_pred_lgb\ndf_test_pred[COL_TARGET].clip(lower=0, upper=1, inplace=True)\ndf_all[COL_TARGET] = all_pred_lgb\ndf_all[COL_TARGET].clip(lower=0, upper=1, inplace=True)\n\n# \u4e88\u6e2c\u5024\nprint(df_test_pred[COL_TARGET])","7e7e4c9d":"# \u6700\u7d42\u51fa\u529b\navg_score = float(df_score_lgb_all[df_score_lgb_all['fold'] == \"oof\"]['oof_score'].mean())\nprint(f\"avg score: {avg_score :5f}\")\ndf_score_lgb_all.to_csv(os.path.join(OUTPUT_DIR, f\"df_score_{EXP_NAME}_{avg_score :5f}.csv\"), index=False)\ndf_feat_imps_lgb_all.to_csv(os.path.join(OUTPUT_DIR, f\"df_feat_imps_{EXP_NAME}_{avg_score :5f}.csv\"),\n                            index=False)\n\n# submission\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\ndf_sub[COL_TARGET] = df_test_pred[COL_TARGET]\ndf_sub.to_csv(f\"submission_{EXP_NAME}_{avg_score:.5f}.csv\", index=False)\n# \u2605\u2605\u2605lightGBM\u5b9f\u884c\u90e8\u5206\u3000\u3053\u3053\u307e\u3067\u2605\u2605\u2605","0031d60f":"## \u7279\u5fb4\u91cf\u2462","c07e1931":"## \u7279\u5fb4\u91cf\u2461","c366bdaf":"## \u7279\u5fb4\u91cf\u2462\u306e\u7d9a\u304d","235139be":"## \u7279\u5fb4\u91cf\u24606\u4f53vs6\u4f53\u306e\u5dee\u5206\u7279\u5fb4\u91cf  \n \u30fbHP\u3001\u653b\u6483\u3001\u5b88\u5099\u3001\u7279\u653b\u3001\u7279\u5b88\u3001\u7d20\u65e9\u3055  \n \u30fb\u57fa\u672c6\u9805\u76ee\u306e\u5408\u8a08  \n \u30fb\u7d20\u65e9\u3055\uff0b\u653b\u6483  \n \u30fb\u7d20\u65e9\u3055\uff0b\u7279\u653b  \n \u30fbHP\uff0b\u5b88\u5099  \n \u30fbHP\uff0b\u7279\u5b88  \n \u30fb\u4f1d\u8aac\u30d5\u30e9\u30b0\u00d7\u57fa\u672c6\u9805\u76ee\u306e\u5408\u8a08\n \u4e0a\u8a18\u306e12\u9805\u76ee\u00d7[\u52dd\u3061\u3001\u8ca0\u3051\u3001\u5dee\u5206\u306e\u5e73\u5747]\u306e\u300136\u7279\u5fb4\u91cf\u3067\u3059\u3002\n\n## \u7279\u5fb4\u91cf\u24616\u4f53vs6\u4f53\u306e\u76f8\u6027\u7279\u5fb4\u91cf  \n \u30fb\u81ea\u30c1\u30fc\u30e0(type1)\u2192\u6575\u30c1\u30fc\u30e0(type1)  \n \u30fb\u81ea\u30c1\u30fc\u30e0(type2)\u2192\u6575\u30c1\u30fc\u30e0(type1)  \n \u30fb\u6575\u30c1\u30fc\u30e0(type1)\u2192\u81ea\u30c1\u30fc\u30e0(type1)  \n \u30fb\u6575\u30c1\u30fc\u30e0(type2)\u2192\u81ea\u30c1\u30fc\u30e0(type1)  \n \u4e0a\u8a18\u306e4\u9805\u76ee\u00d7[\u52dd\u3061\u3001\u8ca0\u3051\u3001\u5dee\u5206\u306e\u5e73\u5747]\u306e\u300112\u7279\u5fb4\u91cf\u3067\u3059\u3002\n\n## \u7279\u5fb4\u91cf\u2462\u76f8\u624b\u3068\u306e\u30dd\u30b1\u30e2\u30f3\u306e\u6709\u7121\u3092-1\uff5e1\u3067\u8868\u73fe\uff08406\u7279\u5fb4\u91cf\uff09\n\n## \u7279\u5fb4\u91cf\u2463\u76f8\u624b\u30c1\u30fc\u30e0ID\u306e\u30c0\u30df\u30fc\u7279\u5fb4\u91cf\uff0885\u7279\u5fb4\u91cf\uff09","f4f1e9ce":"## LightGBM\u306e\u5b9f\u884c","0e429797":"## \u2191\u2191\u2191\u7279\u5fb4\u91cf\u751f\u6210\u3053\u3053\u307e\u3067\u2191\u2191\u2191","8727308b":"## \u7279\u5fb4\u91cf\u2463","4abe3bbc":"## \u7279\u5fb4\u91cf\u2460","b706e136":"# \u7279\u5fb4\u91cf\u2460\uff5e\u2463\u3092\u4f5c\u3063\u3066LightGBM\u3068\u3044\u3046\u6d41\u308c\u3067\u3059","2468b90c":"## \u7279\u5fb4\u91cf\u2461\u306e\u305f\u3081\u306e\u524d\u51e6\u7406","1e7a0628":"## \u7279\u5fb4\u91cf\u2460\u3001\u2461\u306e\u305f\u3081\u306e\u524d\u51e6\u7406","38e0726d":"## \u7279\u5fb4\u91cf\u2460\u3068\u2461\u306e\u7d9a\u304d"}}