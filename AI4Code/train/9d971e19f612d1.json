{"cell_type":{"667f8740":"code","a1265afa":"code","60108fbb":"code","895c4ac9":"code","aa2bf54c":"code","7075cb26":"code","2ac7b50d":"code","c8065f89":"code","bbf176d1":"code","e5d5e6f3":"code","f108f98a":"code","8e699e69":"code","64804da6":"code","af1613cd":"code","6bfae0fe":"code","5e762af2":"code","c60e0500":"code","7f5a2ad5":"code","85d261d5":"code","2e443097":"code","e3985b2b":"code","22783b8d":"code","887a8e2e":"code","9a35fcb8":"code","c1af0571":"code","32e98346":"code","f645e549":"code","7299d4ee":"code","e94812b6":"code","b1f6cecf":"code","8346f2a8":"code","6c0c205c":"code","8f7bfda7":"markdown","e6490676":"markdown","04ad2bba":"markdown","222f4cce":"markdown","3dfb8ff9":"markdown","acba8257":"markdown","2f1aadd7":"markdown","54ffa21b":"markdown","0dfe9636":"markdown","d89eb593":"markdown","fc8754e8":"markdown","2b2e240b":"markdown","c597175b":"markdown","5edace51":"markdown"},"source":{"667f8740":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings \nwarnings.filterwarnings(\"ignore\")\nimport plotly.express as px #We will use it for animation \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1265afa":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nid_in_test = test_data[\"PassengerId\"]","60108fbb":"train_data.columns","895c4ac9":"train_data.head(10)","aa2bf54c":"print(\"Our data include \", train_data.shape)\ntrain_data.describe()\n","7075cb26":"train_data.info()","2ac7b50d":"def aniplot_plot(variable):\n    #Take the variable\n    var = train_data[variable]\n    #Take the values of a variable\n    varVal= var.value_counts()\n    #Plot the animation\n    ani  = px.histogram(var, x = variable)\n    ani.update_xaxes(type= \"category\")\n    ani.update_xaxes(categoryorder = \"category ascending\")\n    \n    return ani.show()\ndef bar_plot(variable):\n    var = train_data[variable]\n    varVal= var.value_counts()\n    plt.figure(figsize = (17,10))\n    plt.bar(varVal.index , varVal)\n    plt.xticks(varVal.index,varVal.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} :\\n {}\".format(variable,varVal))\n    \n    ","c8065f89":"train_data.PassengerId= train_data.PassengerId.astype(\"float\")\nfor i in train_data.columns :\n    if train_data[i].dtype != \"float\" and i != \"Name\" :\n        aniplot_plot(i)\n        bar_plot(i)\n    #We will plot two types of bar plots, you can choose either of them","bbf176d1":"def hist_plot(variable):\n    var = train_data[variable]\n    var.plot(kind = \"line\", color = \"r\",label=variable,linewidth = 2, alpha= 0.5, linestyle = \"-\", figsize=(17,10))\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    print(\"{}:\\n{}\".format(variable, var.value_counts()))\n    plt.show()\n\n    \n    ","e5d5e6f3":"for i in train_data.columns :\n    if train_data[i].dtype == float : \n        hist_plot(i)","f108f98a":"train_data.corr()","8e699e69":"# We will create a new quantity for our copy dataframe\ncopy = train_data.copy()\nave = copy[\"Fare\"].mean()\ncopy[\"Asset\"] = [\"Rich\"if i >ave else \"Poor\" for i in train_data.Fare]\ncopy[\"Asset\"]","64804da6":"# We will sum Sibsp and Parch and will find number of family members\ncopy[\"Fams\"]= copy.SibSp + copy.Parch","af1613cd":"#heatmap for our correlations\ndef heat(variable):\n    f,ax  = plt.subplots(figsize = (12,7))\n    sns.heatmap(variable,linewidths= .1, fmt= \".3f\", ax= ax, annot = True)\n    ","6bfae0fe":"copy.Asset.value_counts()","5e762af2":"# Correlation between survived and class\nSp = copy[[\"Survived\",\"Pclass\"]].groupby(\"Pclass\").mean().sort_values(by =\"Survived\",ascending = False)\nheat(Sp)","c60e0500":"#Correlation between gender and survived\nGs = copy[[\"Survived\",\"Sex\"]].groupby(\"Sex\").mean().sort_values(by= \"Survived\", ascending = True)\nheat(Gs)","7f5a2ad5":"#Correlation between Survived and Family members\nFs=copy[[\"Survived\",\"Fams\"]].groupby(\"Fams\").mean().sort_values(ascending = True,by = \"Fams\")\nheat(Fs)","85d261d5":"#We must take smaller df so we will change the age data\ncopy[\"New_Age\"] = [\"0-10\" if 10>i>0 else \"10-20\" if 20>i>10 else  \"20-30\" if 30>i>20 else\"30-40\" if 40>i>30 else \"40-50\" if 50>i>40 else \"50-60\" if 60>i>50 else \"60-70\" if 70>i>60 else \">70\" for i in copy.Age]\n\n# Correlation between age and survived\nAs=copy[[\"New_Age\",\"Survived\"]].groupby(\"New_Age\").mean().sort_values(by= \"New_Age\", ascending = True)\nheat(As)","2e443097":"#Correlation between asset and survived\n\nAsu = copy[[\"Asset\",\"Survived\"]].groupby(\"Asset\").mean().sort_values(by=\"Asset\", ascending= True)\nheat(Asu)","e3985b2b":"def outlier_detection(df,features): \n    outlier_list = []\n    for c in features:\n        # 1st quartile\n        q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = q3 - q1\n        #Outlier\n        outlier=  IQR * 1.5\n        #detect outliers and their indexes \n        outlier_list_column = df[df[c] < q1 - outlier].index\n        outlier_list_column1 = df[ df[c]> outlier + q3].index\n    \n        #store indexes\n        outlier_list.extend(outlier_list_column)\n        outlier_list.extend(outlier_list_column1)\n    outlier_list = Counter(outlier_list)\n   \n    multiple_indices = [i for i,v in outlier_list.items() if v>2]\n    return multiple_indices","22783b8d":"\n\ntrain_data.loc[outlier_detection(train_data, [\"Age\",\"Fare\",\"SibSp\",\"Parch\"])]","887a8e2e":"train_data = train_data.drop(outlier_detection(train_data, [\"Age\",\"Fare\",\"SibSp\",\"Parch\"]),axis = 0).reset_index(drop = True)","9a35fcb8":"# We will concat test and train data frames\ntrain_data_len = len(train_data)\ntrain_data = pd.concat([train_data, test_data], axis = 0 ).reset_index(drop = True)","c1af0571":"train_data.tail()","32e98346":"train_data.columns[train_data.isnull().any()]\ntrain_data.isnull().sum()","f645e549":"train_data[train_data[\"Embarked\"].isnull()]","7299d4ee":"train_data[train_data[\"Fare\"].isnull()]","e94812b6":"# Now we will fill this values \n# We will fill embarked by using fare values\ntrain_data.boxplot(column=\"Fare\" ,by =\"Embarked\")\nplt.show()","b1f6cecf":"train_data[\"Embarked\"]=train_data[\"Embarked\"].fillna(\"C\")","8346f2a8":"np.mean(train_data[train_data[\"Pclass\" ]== 3][\"Fare\"])","6c0c205c":"# We will fill fare by using class values\ntrain_data[\"Fare\"]=train_data[\"Fare\"].fillna(np.mean(train_data[train_data[\"Pclass\" ]== 3][\"Fare\"]))","8f7bfda7":"<a id = \"4\" > <\/a>\n#### Categorical Variables\n","e6490676":"<a id=\"8\" ><\/a>\n# 5.Missing Value","04ad2bba":"1. Pclass - Survived\n1. Gender - Survived\n1. Fams(Family Members)  - Survived\n1. Age  - Survived\n1. Asset - Survived","222f4cce":"<a id = \"3\"><\/a>\n#### Numerical Variables","3dfb8ff9":"<a id = \"10\"><\/a>\n## Fill Missing Value","acba8257":"<a id = \"2\"><\/a>\n# 2. IDENTIFYING VARIABLES","2f1aadd7":"<a id =\"3\" ><\/a>\n## Univariate Variables\n* Categorical Variables: Survived, Embarked, PClass, Cabin, Ticket, Name, Sex, Sibsp, Parch\n* Numerical Variables: Age, PassengerId, Fare","54ffa21b":"* 2 Embarked value is missing\n* 1 Fare value is missing","0dfe9636":"***INTRODUCTION***\n\nWe will analyze the sinking of Titanic which happens of 1912. The Titanic had sank after colliding with an iceberg \nThen 1502 out of 2224 Titanic's passengers and crews died. We will analyze and predict crews and passengers which to be able to live. \n\n<font color=\"green\">\n\n**CONTENT:** \n\n<font color = \"Blue\">\n    \n1.  [Loading Dataset](#1)<br>\n1.  [Identifying Variables](#2)\n    * [Univariate Variables](#3)<br>\n        * [Categorical Variables](#4)<br>\n        * [Numerical Variables](#5)<br>\n1.  [Basic Data Analysis](#6)<br>\n1.  [Outlier Detection](#7)<br>\n1.  [Missing Value](#8)<br>\n    * [Find Missing Value](#9)<br>\n    * [Fill Missing Value](#10)","d89eb593":"<a id = \"9\"><\/a>\n## Find Missing Value","fc8754e8":"<a id = \"1\"><\/a>\n# 1. LOADING DATA","2b2e240b":" *VARIABLES*\n1. PassengerId = Individual id for each passenger \n1. Survived = Passenger who survived(1) who died (0)\n1. Pclass = The class of seat for each passenger\n1. Name = Name of passengers\n1. Sex = Gender of passengers\n1. Age = Age of passengers\n1. SibSp = Number of siblings and spous for each passenger\n1. Parch = Number of parents and child for each passenger\n1. Ticket = Ticket Number\n1. Fare = Amount of money for ticket\n1. Cabin = Seated place for passenger\n1. Embarked = The port name which passengers embarked","c597175b":"<a id= \"7\" ><\/a>\n# 4.Outlier Detection\n","5edace51":"<a id = \"6\"><\/a>\n# 3.BASIC DATA ANALYSIS"}}