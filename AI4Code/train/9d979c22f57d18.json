{"cell_type":{"2a0ad6dc":"code","8691b2f4":"code","94864fbe":"code","15478e69":"code","51468b18":"code","4b6f85bd":"code","0eeaed3b":"code","800524bf":"code","caa90b83":"code","44916bf7":"code","b09e4d2f":"code","7db7b957":"code","8849e7b0":"code","3cb35732":"code","b1c24ce4":"markdown","3ef3c17a":"markdown","deea3f14":"markdown","e67442e4":"markdown","166f1399":"markdown","ceb4f856":"markdown","fbb6e05a":"markdown","ec215652":"markdown","b8b7adce":"markdown"},"source":{"2a0ad6dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\nimport xgboost as xgb\nfrom pandas_profiling import ProfileReport\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8691b2f4":"data_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndata_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndata_train.head()","94864fbe":"print(\"Train data size:\", data_train.shape )\nprint(\"Test data size:\", data_test.shape )","15478e69":"for col in data_train:\n    print(col)\n    print(data_train[col].value_counts())\n    print(\"-----------------------------------------------\") ","51468b18":"for col in data_test:\n    print(col)\n    print(data_test[col].value_counts())\n    print(\"-----------------------------------------------\") ","4b6f85bd":"frames = [data_train, data_test ]\ndata = pd.concat(frames)\ndata = data.drop(columns=['Utilities', 'PoolQC', 'MiscFeature', 'Alley'])\ndata = data.fillna(0)\ndata.head()","0eeaed3b":"data[\"Condition2\"] = np.where(data[\"Condition2\"]!=\"Norm\",'Others' , data[\"Condition2\"])\ndata[\"RoofMatl\"] = np.where(data[\"RoofMatl\"]!=\"CompShg\",'Others' , data[\"RoofMatl\"])\ndata[\"Heating\"] = np.where(data[\"Heating\"]!=\"GasA\",'Others' , data[\"Heating\"])\ndata[\"3SsnPorch\"] = np.where(data[\"3SsnPorch\"]!=\"0\",'Others' , data[\"3SsnPorch\"])\ndata[\"PoolArea\"] = np.where(data[\"PoolArea\"]!=\"0\",'Others' , data[\"PoolArea\"])\ndata[\"MiscVal\"] = np.where(data[\"MiscVal\"]!=\"0\",'Others' , data[\"MiscVal\"])","800524bf":"data_onehot = pd.get_dummies(data)","caa90b83":"data_train = data_onehot.loc[data_onehot['Id'] <= 1460]\ndata_test = data_onehot.loc[data_onehot['Id'] > 1460]\ndata_test = data_test.drop(['Id'],axis=1)\ndata_train = data_train.drop(['Id'],axis=1)","44916bf7":"X_train = data_train.drop(['SalePrice'], axis=1)\nY_train= data_train['SalePrice']\nX_train, X_val, Y_train, Y_val = train_test_split(X_train , Y_train, random_state=42, test_size=0.2)","b09e4d2f":"start_time = time.time()\n\n#hyperparametres\neta = np.arange(0.01,0.21,0.01)\neta = eta.tolist()\nmin_child_weight = np.arange(1,11,1)\nmin_child_weight = min_child_weight.tolist()\nmax_depth  = np.arange(2,11,1)\nmax_depth = max_depth.tolist()\ngamma = np.arange(2,11,1)\ngamma = gamma.tolist()\nlambdaa = np.arange(2,11,1)\nlambdaa = lambdaa.tolist()\nalpha = np.arange(2,11,1)\nalpha = alpha.tolist()\ncolsample_bytree = np.arange(0.4,1.1,0.1)\ncolsample_bytree = colsample_bytree.tolist()\n\nparameters = {'booster': ['gbtree'],'eta': eta, 'min_child_weight': min_child_weight,'max_depth': max_depth, 'gamma': gamma,  \n              'colsample_bytree': colsample_bytree,  }\n\n#Training\nmodel = xgb.XGBRegressor()\ngrid = RandomizedSearchCV(model,parameters, n_iter = 30)\ngrid.fit(X_train, Y_train)\n\n#Predicting and accuracy results\nprint(\"Parametres of the best model:\")\nprint(grid.best_params_)\nprint(\"Train accuracy:\")\ngrid_predictions_train = grid.predict(X_train)\nprint((grid.score(X_train,Y_train))*100,\"%\")\nprint(\"Validation accuracy:\")\ngrid_predictions_val = grid.predict(X_val)\nprint((grid.score(X_val,Y_val))*100,\"%\")\nprint(\"Time:\")\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","7db7b957":"data_test = data_test.drop(['SalePrice'],axis=1)\nprice_pred = grid.predict(data_test)","8849e7b0":"prediction = pd.DataFrame()\nprediction[\"Id\"] = np.arange(1461,2920,1)\nprediction[\"SalePrice\"] = price_pred\nprediction","3cb35732":"prediction = prediction.set_index('Id')\nprediction_csv = prediction.to_csv('sub.csv', sep=',')","b1c24ce4":"# **Checking the number of unique values in each variable in train data**","3ef3c17a":"# **Making one-hot vectors from categorial variables**","deea3f14":"# **Training model**","e67442e4":"# **Reading train data**","166f1399":"# **Accumulating values**","ceb4f856":"## As we can see, our train and test set have disbalanced values in some features ('SaleCondition','SaleType', 'MiscVal' etc.) But these features are equally disbalanced in both sets. In some features e.g., 'MiscVal', '3SsnPorch' etc. some value dominates among others. So I've decided to try to accumulate rest of values in 'others' variable.\n## Features which have zeros over 90% of dataset will be deleted ('PoolQC', 'MiscFeature', 'Alley'). Also I'll delete 'Utilities' feature as it has only 1 variable which makes this feature useless.\n## Moreover, I'll replace all NaN values by zeroes.","fbb6e05a":"# **Checking the size of each set**","ec215652":"# **Predicting prices**","b8b7adce":"# **Separating train and test data and deleting 'Id' feature, because it is no needed in training model**"}}