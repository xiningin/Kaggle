{"cell_type":{"033da113":"code","cbeddcfc":"code","2da666e9":"code","f7022cf2":"code","356e180f":"code","c7b94916":"code","b6c683b7":"code","c8af69bc":"code","aae98f30":"code","8198a181":"code","4adee787":"code","81c80804":"code","4cd4f4a4":"code","8b583525":"code","62c47c36":"code","cb3dfb23":"code","f00a0b90":"code","ca3a4d39":"code","55b057c4":"code","bce18d3f":"code","53438de1":"code","1545dbac":"code","69f9af21":"code","0a9f7a32":"code","3eb053ac":"code","3c20fe8b":"code","b5d4f56e":"code","c55859ed":"code","52b3476f":"code","876f266f":"code","c1e0851d":"code","dec767ea":"code","5eb6cfd9":"code","bdf087ac":"code","088da5ec":"code","317bbf1b":"code","184ddd44":"code","b293c8ab":"code","ae37fa55":"code","babdd235":"code","77ed379a":"code","b8593e75":"code","eaf3d264":"code","34fb5345":"code","a4721c58":"code","f3c76db7":"code","0fe428bb":"markdown","31156ff8":"markdown","3e2e6b0f":"markdown","8e531eec":"markdown","b1e71bf8":"markdown"},"source":{"033da113":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbeddcfc":"calender=pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsales_train_evaluation=pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv')\nsample_submission=pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')\nsell_prices=pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsales_train_validation=pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')","2da666e9":"sales_train_validation.head()","f7022cf2":"# sell_prices=sell_prices[:100]\nlen(sell_prices)\nsell_prices.head()","356e180f":"# sales_train_evaluation=sales_train_evaluation[:100]\nprint(len(sales_train_evaluation))\nsales_train_evaluation.head()","c7b94916":"\nprint(len(calender))\ncalender.head()","b6c683b7":"train=sell_prices[:100].merge(calender, on='wm_yr_wk')","c8af69bc":"train.head()","aae98f30":"train_time=train['month']","8198a181":"train_value=train['store_id']","4adee787":"train_value.isnull().sum()","81c80804":"store_sum = train.groupby(['store_id'],).sum().T.reset_index(drop = True)\n# from statsmodels.tsa.seasonal import seasonal_decompose\ndays_per_week = train['d']\n\ntime_series = train['wm_yr_wk']\n# sj_sc = seasonal_decompose(time_series, period = days_per_week)\n# sj_sc.plot()\n\n# plt.show()","4cd4f4a4":"def plot_series(time, series, format=\"-\", start=0, end=None, label=None):\n    plt.plot(time[start:end], series[start:end], format, label=label)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    if label:\n        plt.legend(fontsize=14)\n    plt.grid(True)","8b583525":"import numpy as np\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\n\nplot_series(days_per_week, time_series)\nplt.show()","62c47c36":"time = days_per_week\nseries = time_series\nsplit_time = 500\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]","cb3dfb23":"naive_forecast = series[split_time - 1:-1]","f00a0b90":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid, label=\"Series\")\nplot_series(time_valid, naive_forecast, label=\"Forecast\")","ca3a4d39":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid, start=0, end=150, label=\"Series\")\nplot_series(time_valid, naive_forecast, start=1, end=151, label=\"Forecast\")","55b057c4":"errors = naive_forecast - x_valid\nabs_errors = np.abs(errors)\nmae = abs_errors.mean()\nmae","bce18d3f":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nkeras = tf.keras","53438de1":"def window_dataset(series, window_size, batch_size=32,\n                   shuffle_buffer=1000):\n    dataset = tf.data.Dataset.from_tensor_slices(series)\n    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)\n    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))\n    dataset = dataset.shuffle(shuffle_buffer)\n    dataset = dataset.map(lambda window: (window[:-1], window[-1]))\n    dataset = dataset.batch(batch_size).prefetch(1)\n    return dataset","1545dbac":"def model_forecast(model, series, window_size):\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size, shift=1, drop_remainder=True)\n    ds = ds.flat_map(lambda w: w.batch(window_size))\n    ds = ds.batch(32).prefetch(1)\n    forecast = model.predict(ds)\n    return forecast","69f9af21":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)\n\nwindow_size = 30\ntrain_set = window_dataset(x_train, window_size)\n\nmodel = keras.models.Sequential([\n  keras.layers.Dense(10, activation=\"relu\", input_shape=[window_size]),\n  keras.layers.Dense(10, activation=\"relu\"),\n  keras.layers.Dense(1)\n])\n\nlr_schedule = keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-7 * 10**(epoch \/ 20))\noptimizer = keras.optimizers.SGD(lr=1e-5, momentum=0.9)\nmodel.compile(loss=keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nhistory = model.fit(train_set, epochs=100, callbacks=[lr_schedule])","0a9f7a32":"plt.semilogx(history.history[\"lr\"], history.history[\"loss\"])\nplt.axis([e-5, 5e-3, 0, 30])","3eb053ac":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)\n\nwindow_size = 30\ntrain_set = window_dataset(x_train, window_size)\nvalid_set = window_dataset(x_valid, window_size)\n\nmodel = keras.models.Sequential([\n  keras.layers.Dense(10, activation=\"relu\", input_shape=[window_size]),\n  keras.layers.Dense(10, activation=\"relu\"),\n  keras.layers.Dense(1)\n])\n\noptimizer = keras.optimizers.SGD(lr=1e-6, momentum=0.9)\nmodel.compile(loss=keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nearly_stopping = keras.callbacks.EarlyStopping(patience=10)\nmodel.fit(train_set, epochs=500,\n          validation_data=valid_set,\n          callbacks=[early_stopping])","3c20fe8b":"dense_forecast = model_forecast(\n    model,\n    series[split_time - window_size:-1],\n    window_size)[:, 0]","b5d4f56e":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid)\nplot_series(time_valid, dense_forecast)","c55859ed":"keras.metrics.mean_absolute_error(x_valid, dense_forecast).numpy()","52b3476f":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)\n\nwindow_size = 30\ntrain_set = window_dataset(x_train, window_size, batch_size=128)\n\nmodel = keras.models.Sequential([\n  keras.layers.Lambda(lambda x: tf.expand_dims(x, axis=-1),\n                      input_shape=[None]),\n  keras.layers.SimpleRNN(100, return_sequences=True),\n  keras.layers.SimpleRNN(100),\n  keras.layers.Dense(1),\n  keras.layers.Lambda(lambda x: x * 200.0)\n])\nlr_schedule = keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-7 * 10**(epoch \/ 20))\noptimizer = keras.optimizers.SGD(lr=1e-7, momentum=0.9)\nmodel.compile(loss=keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nhistory = model.fit(train_set, epochs=100, callbacks=[lr_schedule])","876f266f":"plt.semilogx(history.history[\"lr\"], history.history[\"loss\"])\nplt.axis([e-7, 1e-4, 0, 30])","c1e0851d":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)\n\nwindow_size = 30\ntrain_set = window_dataset(x_train, window_size, batch_size=128)\nvalid_set = window_dataset(x_valid, window_size, batch_size=128)\n\nmodel = keras.models.Sequential([\n  keras.layers.Lambda(lambda x: tf.expand_dims(x, axis=-1),\n                      input_shape=[None]),\n  keras.layers.SimpleRNN(100, return_sequences=True),\n  keras.layers.SimpleRNN(100),\n  keras.layers.Dense(1),\n  keras.layers.Lambda(lambda x: x * 200.0)\n])\noptimizer = keras.optimizers.SGD(lr=1e-5, momentum=0.9)\nmodel.compile(loss=keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nearly_stopping = keras.callbacks.EarlyStopping(patience=50)\nmodel_checkpoint = keras.callbacks.ModelCheckpoint(\n    \"my_checkpoint\", save_best_only=True)\nmodel.fit(train_set, epochs=500,\n          validation_data=valid_set,\n          callbacks=[early_stopping, model_checkpoint])","dec767ea":"model = keras.models.load_model(\"my_checkpoint\")","5eb6cfd9":"rnn_forecast = model_forecast(\n    model,\n    series[split_time - window_size:-1],\n    window_size)[:, 0]","bdf087ac":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid)\nplot_series(time_valid, rnn_forecast)","088da5ec":"keras.metrics.mean_absolute_error(x_valid, rnn_forecast).numpy()","317bbf1b":"\ndef sequential_window_dataset(series, window_size):\n    series = tf.expand_dims(series, axis=-1)\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size + 1, shift=window_size, drop_remainder=True)\n    ds = ds.flat_map(lambda window: window.batch(window_size + 1))\n    ds = ds.map(lambda window: (window[:-1], window[1:]))\n    return ds.batch(1).prefetch(1)\n\nclass ResetStatesCallback(keras.callbacks.Callback):\n    def on_epoch_begin(self, epoch, logs):\n        self.model.reset_states()","184ddd44":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)\n\nwindow_size = 30\ntrain_set = sequential_window_dataset(x_train, window_size)\n\nmodel = keras.models.Sequential([\n  keras.layers.LSTM(100, return_sequences=True, stateful=True,\n                    batch_input_shape=[1, None, 1]),\n  keras.layers.LSTM(100, return_sequences=True, stateful=True),\n  keras.layers.Dense(1),\n  keras.layers.Lambda(lambda x: x * 200.0)\n])\nlr_schedule = keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-8 * 10**(epoch \/ 20))\nreset_states = ResetStatesCallback()\noptimizer = keras.optimizers.SGD(lr=1e-8, momentum=0.9)\nmodel.compile(loss=keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nhistory = model.fit(train_set, epochs=100,\n                    callbacks=[lr_schedule, reset_states])","b293c8ab":"plt.semilogx(history.history[\"lr\"], history.history[\"loss\"])\nplt.axis([e-8, 1e-4, 0, 30])","ae37fa55":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)\n\nwindow_size = 30\ntrain_set = sequential_window_dataset(x_train, window_size)\nvalid_set = sequential_window_dataset(x_valid, window_size)\n\nmodel = keras.models.Sequential([\n  keras.layers.LSTM(100, return_sequences=True, stateful=True,\n                         batch_input_shape=[1, None, 1]),\n  keras.layers.LSTM(100, return_sequences=True, stateful=True),\n  keras.layers.Dense(1),\n  keras.layers.Lambda(lambda x: x * 200.0)\n])\noptimizer = keras.optimizers.SGD(lr=1e-5, momentum=0.9)\nmodel.compile(loss=keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nreset_states = ResetStatesCallback()\nmodel_checkpoint = keras.callbacks.ModelCheckpoint(\n    \"my_checkpoint.h5\", save_best_only=True)\nearly_stopping = keras.callbacks.EarlyStopping(patience=50)\nmodel.fit(train_set, epochs=500,\n          validation_data=valid_set,\n          callbacks=[early_stopping, model_checkpoint, reset_states])","babdd235":"model = keras.models.load_model(\"my_checkpoint.h5\")","77ed379a":"rnn_forecast = model.predict(series[np.newaxis, :, np.newaxis])\nrnn_forecast = rnn_forecast[0, split_time - 1:-1, 0]","b8593e75":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid)\nplot_series(time_valid, rnn_forecast)","eaf3d264":"keras.metrics.mean_absolute_error(x_valid, rnn_forecast).numpy()","34fb5345":"def model_forecast(model, series, window_size):\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size, shift=1, drop_remainder=True)\n    ds = ds.flat_map(lambda w: w.batch(window_size))\n    ds = ds.batch(32).prefetch(1)\n    forecast = model.predict(ds)\n    return forecast","a4721c58":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)\n\nwindow_size = 64\ntrain_set = seq2seq_window_dataset(x_train, window_size,\n                                   batch_size=128)\nvalid_set = seq2seq_window_dataset(x_valid, window_size,\n                                   batch_size=128)\n\nmodel = keras.models.Sequential()\nmodel.add(keras.layers.InputLayer(input_shape=[None, 1]))\nfor dilation_rate in (1, 2, 4, 8, 16, 32):\n    model.add(\n      keras.layers.Conv1D(filters=32,\n                          kernel_size=2,\n                          strides=1,\n                          dilation_rate=dilation_rate,\n                          padding=\"causal\",\n                          activation=\"relu\")\n    )\nmodel.add(keras.layers.Conv1D(filters=1, kernel_size=1))\noptimizer = keras.optimizers.Adam(lr=3e-4)\nmodel.compile(loss=keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\n\nmodel_checkpoint = keras.callbacks.ModelCheckpoint(\n    \"my_checkpoint.h5\", save_best_only=True)\nearly_stopping = keras.callbacks.EarlyStopping(patience=50)\nhistory = model.fit(train_set, epochs=500,\n                    validation_data=valid_set,\n                    callbacks=[early_stopping, model_checkpoint])","f3c76db7":"model = keras.models.load_model(\"my_checkpoint.h5\")","0fe428bb":"# Machine learning","31156ff8":"# Naive forecasting","3e2e6b0f":"# LSTM RNN Forecasting","8e531eec":" #  RNN\n","b1e71bf8":"# CNN "}}