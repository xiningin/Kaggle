{"cell_type":{"2d3e8a6a":"code","86271785":"code","56df6dd1":"code","127751c4":"code","682a77fb":"code","e6329aa2":"code","dc971c2a":"code","05458c57":"code","c3515cb4":"code","2ce24fd4":"code","acf2359e":"code","6b0ca813":"code","77e82221":"code","30d1d270":"code","fe24eed7":"code","090bfb79":"code","f22904be":"code","4df69624":"code","2566bae9":"code","5cc82422":"code","c09f3399":"code","3f812aea":"code","7c6b8def":"code","c1dd23a9":"code","f59696f8":"code","7e520b0b":"code","62a80658":"code","de61eda5":"code","766835ea":"code","0799f4da":"code","24d06f39":"code","fdeac579":"code","be796a24":"code","7121bb0c":"code","bf33a29c":"code","937eb238":"code","bb045786":"code","828abc85":"code","9953a34e":"code","d21d577e":"code","10843b73":"code","b3d9e5e8":"code","090b54e6":"code","5b556079":"code","52358c15":"code","a30b4152":"markdown","ce3fb97b":"markdown","79697661":"markdown","ea2eb7b3":"markdown","121324f0":"markdown","ab8afa10":"markdown","1b7affc6":"markdown","ea8d5c0f":"markdown","f15f2196":"markdown","782b333d":"markdown","13e2f6cb":"markdown","66de7322":"markdown","fe6d338d":"markdown","7c4365c5":"markdown","5c9c434f":"markdown","434af703":"markdown","d85c21e1":"markdown","19941434":"markdown","118dd652":"markdown","b9128f00":"markdown","75562ac3":"markdown","ba9fa660":"markdown","23d507e3":"markdown","a34c39cc":"markdown"},"source":{"2d3e8a6a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86271785":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport os","56df6dd1":"data = pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")\ndata.head()","127751c4":"data.info()","682a77fb":"data.describe()","e6329aa2":"numerics = ['int8','int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ndisplay(data.select_dtypes(include=numerics).columns)\nprint(data.select_dtypes(include=numerics).shape)\ndata_num = data.select_dtypes(include=numerics)\ndata_num.head(3)","dc971c2a":"display(data.select_dtypes(include=['object']).columns)\nprint(data.select_dtypes(include=object).shape)\ndata_cat = data.select_dtypes(include=['object'])\ndata_cat.head(3)","05458c57":"data_missing_value = data.isnull().sum().reset_index()\ndata_missing_value.columns = ['feature','missing_value']\ndata_missing_value","c3515cb4":"data = data.dropna(subset=['Publisher', 'Year'], axis=0)\ndata = data.reset_index(drop=True)\ndata.isna().sum()","2ce24fd4":"data.duplicated().sum()","acf2359e":"# Converting float year type to int\ndata['Year'] = data['Year'].astype(int)\ndata['Year'].dtype","6b0ca813":"features = ['Rank', 'Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales','Global_Sales']\nplt.figure(figsize=(15, 7))\nfor i in range(0, len(features)):\n    plt.subplot(1, 7, i+1)\n    sns.boxplot(y=data[features[i]],color='blue',orient='v')\n    plt.tight_layout()\n    \n# plt.savefig('fig\/numerical boxplot.png')","77e82221":"data_num = data[features]\nk = len(data_num.columns)\nn = 3\nm = (k - 1) \/\/ n + 1\nfig, axes = plt.subplots(m, n, figsize=(n * 5, m * 3))\nfor i, (name, col) in enumerate(data_num.iteritems()):\n    r, c = i \/\/ n, i % n\n    ax = axes[r, c]\n    col.hist(ax=ax, color='blue')\n    ax2 = col.plot.kde(ax=ax, secondary_y=True, title=name, color='red')\n    ax2.set_ylim(0)\n\nfig.tight_layout()\n# plt.savefig('fig\/numerical distplot.png')","30d1d270":"data.head(3)","fe24eed7":"corr_= data[features].corr()\ncorr_","090bfb79":"plt.figure(figsize=(16,10))\nsns.heatmap(corr_, annot=True, fmt = \".2f\", cmap = \"BuPu\")","f22904be":"annual_number_of_game = data['Year'].groupby(data['Year']).count()\nannual_number_of_game","4df69624":"\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))","2566bae9":"fig = px.line(annual_number_of_game, x=annual_number_of_game.index, y=annual_number_of_game,\n              labels={\n                  \"index\": \"Year\",\n                  \"y\": \"Number of Games Published\"\n              }\n              )\nfig.show()","5cc82422":"annual_sales = data.groupby('Year')['Global_Sales'].sum()\nannual_sales\n","c09f3399":"fig = px.line(annual_sales, x=annual_sales.index, y=annual_sales,\n              labels={\n                  \"index\": \"Year\",\n                  \"y\": \"Annual of Global Sales\"\n              }\n              )\nfig.show()","3f812aea":"annual_sales_market = data.groupby('Year')[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].sum().reset_index()\nannual_sales_market","7c6b8def":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=annual_sales_market['Year'], y=annual_sales_market['NA_Sales'],\n                         name=\"North America Sales\",\n                         hovertext=annual_sales_market['NA_Sales']))\nfig.add_trace(go.Scatter(x=annual_sales_market['Year'], y=annual_sales_market['EU_Sales'],\n                         name=\"Europe Sales\",\n                         hovertext=annual_sales_market['EU_Sales']))\n\nfig.add_trace(go.Scatter(x=annual_sales_market['Year'], y=annual_sales_market['JP_Sales'],\n                         name=\"Japan Sales\",\n                         hovertext=annual_sales_market['JP_Sales']))\n\nfig.add_trace(go.Scatter(x=annual_sales_market['Year'], y=annual_sales_market['Other_Sales'],\n                         name=\"Other Sales\",\n                         hovertext=annual_sales_market['Other_Sales']))\n\nfig.update_layout(title_text='Video Game Sales for each Market Annually',\n                  title_x=0.5, title_font=dict(size=22))  # Location and the font size of the main title\nfig.update_layout(\n    xaxis_title=\"Years\",\n    yaxis_title=\"Sales (M)\")\n\nfig.show()","c1dd23a9":"GameGlobalSales = data['NA_Sales'].groupby(data['Name']).sum().sort_values(ascending=False).to_frame()\nGameGlobalSales","f59696f8":"GameGlobalSales_top = GameGlobalSales.nlargest(10, 'NA_Sales')[['NA_Sales']]\nGameGlobalSales_top","7e520b0b":"a = data['Name'][:5]\nb = data['Global_Sales'][:5]\n\nplt.figure(figsize=[13, 6])\nplt.title('The 5 most popular video games (by sales) - on their most popular platforms')\nplt.xlabel('Games')\nplt.ylabel('Sales (in millions)')\nplt.bar(a, b, color=['darkviolet', 'blueviolet', 'mediumpurple', 'mediumslateblue', 'royalblue'])\nplt.show()","62a80658":"data_top_genre = data.groupby(['Genre'], as_index=False)['Global_Sales'].sum()\ndata_top_genre = data_top_genre.sort_values(['Global_Sales'], ascending=False).reset_index()\ndata_top_genre","de61eda5":"e = data_top_genre['Genre'][:5]\nf = data_top_genre['Global_Sales'][:5]\n\nplt.figure(figsize=[13, 6])\nplt.title('The 5 most popular videogame genres')\nplt.xlabel('Genres')\nplt.ylabel('Sales (in millions)')\nplt.barh(e, f, color=['darkviolet', 'blueviolet', 'mediumpurple', 'mediumslateblue', 'royalblue'])\nplt.show()","766835ea":"features = ['Rank', 'Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales','Global_Sales']\nplt.figure(figsize=(15, 7))\nfor i in range(0, len(features)):\n    plt.subplot(1, 7, i+1)\n    sns.boxplot(y=data[features[i]],color='blue',orient='v')\n    plt.tight_layout()\n    \n# plt.savefig('fig\/numerical boxplot.png')","0799f4da":"print(f'total raw before outlier filter: {len(data)}')\n\nfiltered_entries = np.array([True] * len(data))\nfor col in ['Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales',\n       'Global_Sales']:\n    Q1 = data[col].quantile(0.25)\n    Q3 = data[col].quantile(0.75)\n    IQR = Q3 - Q1\n    low_limit = Q1 - (IQR * 1.5)\n    high_limit = Q3 + (IQR * 1.5)\n\n    filtered_entries = ((data[col] >= low_limit) & (data[col] <= high_limit)) & filtered_entries\n    \ndata = data[filtered_entries]\n\nprint(f'total raw after outlier filter: {len(data)}')","24d06f39":"features = ['Rank', 'Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales','Global_Sales']\nplt.figure(figsize=(15, 7))\nfor i in range(0, len(features)):\n    plt.subplot(1, 7, i+1)\n    sns.boxplot(y=data[features[i]],color='blue',orient='v')\n    plt.tight_layout()\n    \n# plt.savefig('fig\/numerical boxplot.png')","fdeac579":"from sklearn.preprocessing import MinMaxScaler, StandardScaler","be796a24":"data['NA_Sales'] = MinMaxScaler().fit_transform(data['NA_Sales'].values.reshape(len(data), 1))\ndata['EU_Sales'] = MinMaxScaler().fit_transform(data['EU_Sales'].values.reshape(len(data), 1))\ndata['JP_Sales'] = MinMaxScaler().fit_transform(data['JP_Sales'].values.reshape(len(data), 1))\ndata['Other_Sales'] = MinMaxScaler().fit_transform(data['Other_Sales'].values.reshape(len(data), 1))\ndata['Global_Sales'] = MinMaxScaler().fit_transform(data['Global_Sales'].values.reshape(len(data), 1))\n\n\ndata['Rank'] = StandardScaler().fit_transform(data['Rank'].values.reshape(len(data), 1))\ndata['Year'] = StandardScaler().fit_transform(data['Year'].values.reshape(len(data), 1))","7121bb0c":"data.head()","bf33a29c":"from sklearn.preprocessing import LabelEncoder, StandardScaler","937eb238":"le = LabelEncoder()\n\ndata['Name'] = le.fit_transform(data['Name'])\ndata['Platform'] = le.fit_transform(data['Platform'])\ndata['Genre'] = le.fit_transform(data['Genre'])\ndata['Publisher'] = le.fit_transform(data['Publisher'])","bb045786":"data.head()","828abc85":"data.columns","9953a34e":"x = data.drop(columns=['Global_Sales']) # menggunakan semua feature kecuali target\ny = data['Global_Sales']","d21d577e":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=1\/3, random_state=42) #Splitting the data into Train and Test","10843b73":"#Fitting simple linear regression to the Training Set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(xtrain, ytrain)","b3d9e5e8":"pred = regressor.predict(xtest)","090b54e6":"from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\ndef eval_regression(model, pred, xtrain, ytrain, xtest, ytest):\n    print(\"MAE: %.2f\" % mean_absolute_error(ytest, pred)) # The MAE\n    print(\"RMSE: %.2f\" % mean_squared_error(ytest, pred, squared=False)) # The RMSE\n    print('R2 score: %.2f' % r2_score(ytest, pred)) # Explained variance score: 1 is perfect prediction","5b556079":"pred = regressor.predict(xtest)\n\nprint('Coefficients: \\n', regressor.coef_) # The slope\nprint('Intercept: \\n', regressor.intercept_) # The Intercept\n\neval_regression(regressor, pred, xtrain, ytrain, xtest,ytest)","52358c15":"print(\"train Accuracy : \",regressor.score(xtrain,ytrain))\nprint(\"test Accuracy : \",regressor.score(xtest,ytest))","a30b4152":"## Load and Describe Data","ce3fb97b":"## Finding missing value on the table","79697661":"Data is clear of missing value","ea2eb7b3":"From distribution, we can see that there is outlier, so I decided to clean outler using iqr method","121324f0":"it seems there is no duplicated data","ab8afa10":"the distribution still have outlier but it seems much better","1b7affc6":"## Preprocessing","ea8d5c0f":"## Annual Sales of Games","f15f2196":"## Numerical Data","782b333d":"It shows that the table has missing value on \"Year\" and \"Publisher\" columns, because of small number of missing value, I decided to drop the raw. ","13e2f6cb":"From the heatmap, NA_Sales and EU_Sales has strong correlation with Global_Sales, it may show that these two columns strongly influance global sales","66de7322":"North America was leading on global competition rather than other country, however the flow of sales was fluctuative. Japan has same partern as the other, in 1992-1995 japan could lead sales but it was still under line of graph in rest.","fe6d338d":"the graph shows only in Rank and Year columns which has normal distribution","7c4365c5":"Trying converting \"Year\" column type into integer data type","5c9c434f":"## Data Distribution by Boxplot","434af703":"## Matrix orrelation","d85c21e1":"## Annual Number of Games Published","19941434":"### Describe data","118dd652":"in 2009, Annual published game reach the peak. in contras, Global sales got the top sales in 2008 and started to drop in 2009, however both graph has similarity of flow.","b9128f00":"## Data Duplicate","75562ac3":"## Annual Sales Market For Each Country","ba9fa660":"## Data Insight","23d507e3":"## Non Numerical Data (Categorical)","a34c39cc":"### Load data"}}