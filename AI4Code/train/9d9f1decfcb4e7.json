{"cell_type":{"304d7b4b":"code","25dc3eab":"code","0c76aef2":"code","d777ae96":"code","475a18ce":"code","d14ef22b":"code","5179fbad":"code","0b5ad5a3":"code","1eae891e":"code","dea775f4":"code","f8b439de":"code","00bf8a42":"code","a9a7032d":"code","dc4c94c0":"code","fa0e9015":"code","2a942724":"code","085a80e9":"code","62a1356e":"code","e2f7e668":"code","0a2cb6f5":"code","26f3eb63":"code","c83a9973":"code","621c4b85":"code","c78a4312":"code","203425c2":"code","b61f5dec":"code","a419e2d0":"code","0f28ffed":"code","b9621e16":"code","3d654d9f":"code","8139dcf1":"code","31a66e3f":"code","f16b7fe4":"code","3dedd7bb":"code","2d4855bb":"code","1b05549e":"code","f1139997":"code","850637a4":"code","a17a3d2e":"code","0cc97611":"code","c6a2c102":"code","4f99a45c":"code","028fc650":"code","c324672a":"code","15a3b994":"code","0b54b818":"markdown","67e24c99":"markdown","1afcfa53":"markdown","4b526368":"markdown","ac85ab66":"markdown","8af3dd66":"markdown","92008fe2":"markdown","5a2ea2fd":"markdown","ef69dcbf":"markdown","3418fc85":"markdown","fe16cf2c":"markdown","0884d93b":"markdown","478285cd":"markdown","a6c9683b":"markdown","77bcfe52":"markdown","3cce9e91":"markdown","ba2aa0d4":"markdown","f60bd724":"markdown","baef0728":"markdown","40f676a5":"markdown","1dae05d4":"markdown"},"source":{"304d7b4b":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.metrics import r2_score\n\nimport tensorflow as tf","25dc3eab":"data = pd.read_csv(\"..\/input\/autompg-dataset\/auto-mpg.csv\")","0c76aef2":"data.sample(10)","d777ae96":"data.shape","475a18ce":"#Checking for null values\ndata.isna().sum()","d14ef22b":"#Unique values for every feature\ndata.nunique()","5179fbad":"#Checking the data types\ndata.dtypes","0b5ad5a3":"#'errors = 'coerce\u2019, means any invalid parsing will be set as NaN rather than raising exceptions\ndata['horsepower'] = pd.to_numeric(data.horsepower, errors = 'coerce')","1eae891e":"data.dtypes","dea775f4":"data.isna().sum()","f8b439de":"data = data.dropna()","00bf8a42":"data.describe()","a9a7032d":"#origin feature represents the originality of car \norigin = data.pop('origin')","dc4c94c0":"#Performing One-Hot Encoding manually\ndata['USA'] = (origin == 1)*1.0\ndata['Europe'] = (origin == 2)*1.0\ndata['Japan'] = (origin == 3)*1.0","fa0e9015":"data.head()","2a942724":"data.pop('car name')","085a80e9":"data.head()","62a1356e":"data.dtypes","e2f7e668":"plt.figure(figsize = (10,10))\nsns.heatmap(data.corr(), annot = True)","0a2cb6f5":"sns.pairplot(data[['mpg','cylinders','displacement','horsepower','weight','acceleration']],diag_kind = 'kde')","26f3eb63":"features = ['mpg','cylinders','displacement','horsepower','weight','acceleration']","c83a9973":"plt.figure(figsize = (10,10))\nfor i, feature in enumerate(features):\n    plt.subplot(2,3,i+1)\n    sns.boxplot(x = data[feature])\n    plt.title(feature)","621c4b85":"X = data.drop(['mpg'], axis = 1)\nY = data['mpg']","c78a4312":"scaler = StandardScaler()\ndata[['mpg','cylinders','displacement','weight','acceleration','model year']] = scaler.fit_transform(data[['mpg','cylinders','displacement','weight','acceleration','model year']])","203425c2":"data.head()","b61f5dec":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)","a419e2d0":"x_train.shape","0f28ffed":"x_test.shape","b9621e16":"lr = LinearRegression()","3d654d9f":"lr_model = lr.fit(x_train,y_train)\ny_pred = lr_model.predict(x_test)","8139dcf1":"x = x_test['displacement']","31a66e3f":"sns.regplot(x, y_pred)\nplt.scatter(x, y_test,color = 'g', alpha = 0.5)\nplt.title('mpg v\/s displacement')\nplt.xlabel('Displacement')\nplt.ylabel('mpg')\nplt.legend(['y_pred'])","f16b7fe4":"x = x_test['weight']","3dedd7bb":"sns.regplot(x, y_pred)\nplt.scatter(x, y_test,color = 'g', alpha = 0.5)\nplt.title('mpg v\/s weight')\nplt.xlabel('Weight')\nplt.ylabel('mpg')\nplt.legend(['y_pred'])","2d4855bb":"r2_score(y_test, y_pred)","1b05549e":"pd.DataFrame(list(zip(y_test, y_pred)), columns = ['Actual Values', 'Predicted Values'])","f1139997":"model = tf.keras.Sequential([\n    tf.keras.layers.Dense(units = 64, activation = tf.nn.relu, input_shape = [x_train.shape[1]]),\n    tf.keras.layers.Dense(units = 64, activation = tf.nn.relu),\n    tf.keras.layers.Dense(units = 1)\n    ])","850637a4":"model.compile(loss = 'mse', optimizer = tf.keras.optimizers.RMSprop(0.001), metrics = ['mae','mse'])","a17a3d2e":"model.summary()","0cc97611":"history = model.fit(x_train, y_train, epochs = 500, validation_data=(x_test, y_test))","c6a2c102":"hist = pd.DataFrame(history.history)\nhist.tail()","4f99a45c":"y_pred = model.predict(x_test)","028fc650":"pd.DataFrame(list(zip(y_test,y_pred)), columns = ['Actual Values', 'Predicted Values'])","c324672a":"r2_score(y_test, y_pred)","15a3b994":"loss, mae, mse = model.evaluate(x_test, y_test)","0b54b818":"Clearly, we do not require **car name** feature for modelling.","67e24c99":"Plotting mpg against displacement and weight.  \nSince, they are highly correlated with mpg.","1afcfa53":"### mpg v\/s displacement","4b526368":"# TRAIN-TEST SPLIT","ac85ab66":"# NEURAL NETWORK MODEL","8af3dd66":"Unsuccessfull parsings from string to numeric of horsepower feature are set to null.\nDue to which, now we have 6 null values in our horsepower feature.","92008fe2":"# GOAL\n\n* Predict fuel efficiency using **Artificial Neural Network**\n* Compare it with **Linear Regression** Model","5a2ea2fd":"As our dataset is small, we will take only 20% of the data as test size.","ef69dcbf":"# DATA VISUALIZATION","3418fc85":"# FEATURE SCALING","fe16cf2c":"### CORRELATION PLOT","0884d93b":"# LINEAR REGRESSION MODEL","478285cd":"If do not specify any activation function for a given layer it is considered to be **linear**.\nThat's what we want for a **regression** problem.","a6c9683b":"### OUTLIERS","77bcfe52":"### mpg v\/s weight","3cce9e91":"# DATA DESCRIPTION","ba2aa0d4":"# IMPORTING LIBRARIES","f60bd724":"Important correlations\n1. mpg and displacement (-0.8)\n1. mpg and weight (-0.83)\n1. cylinders and displacement (0.95)\n1. cylinders and weight (0.9)\n1. displacement and weight (0.93)\n","baef0728":"We note that **horsepower** feature is an **object** datatype while semantically it should be numeric.  \nSo, we will convert it into float datatype","40f676a5":"Since, we are going to predict fuel efficiency our target variable will be **mpg (miles per gallons)**","1dae05d4":"### PAIRPLOT"}}