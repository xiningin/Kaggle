{"cell_type":{"8b636b8b":"code","c2232fe8":"code","1d69b282":"code","4d8f3d33":"code","bccb151f":"code","124658f2":"code","1957de97":"code","fdee822d":"code","ecfedbf3":"code","28c02fde":"code","2f28a472":"code","d4ea0bd1":"markdown","7db5f5ab":"markdown","e46afbf0":"markdown","98f8411a":"markdown","6262081a":"markdown","7b9e1b19":"markdown","289f3c14":"markdown","95fceaff":"markdown","4b7e740e":"markdown","e4754c6a":"markdown","de7f404a":"markdown"},"source":{"8b636b8b":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPool2D, UpSampling2D, Activation\nfrom keras import backend as K\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn import manifold\nfrom sklearn import datasets","c2232fe8":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\nX = train.drop(['label'], axis=1)\ny = train['label']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=123)\nX_train, X_validate, y_train, y_validate = train_test_split(X_train, y_train, test_size=0.25, stratify=y_train, random_state=123)\n\n# Zmiana kszta\u0142tu i skalowanie obraz\u00f3w\nX_train = X_train.values.reshape(-1,28,28,1) \/ 255\nX_test = X_test.values.reshape(-1,28,28,1) \/ 255\nX_validate = X_validate.values.reshape(-1,28,28,1) \/ 255","1d69b282":"model = Sequential()\nmodel.add(Conv2D(14, kernel_size=3, padding='same', activation='relu', input_shape=(28,28,1)))\nmodel.add(MaxPool2D((2,2), padding='same'))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(7, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPool2D((2,2), padding='same'))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(7, kernel_size=3, padding='same', activation='relu'))\nmodel.add(UpSampling2D((2,2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(14, kernel_size=3, padding='same', activation='relu'))\nmodel.add(UpSampling2D((2,2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(1, kernel_size=3, padding='same', activation='relu'))\n\nmodel.compile(optimizer='adam', loss=\"mse\")\nmodel.summary()","4d8f3d33":"model.fit(X_train, X_train, epochs=3, batch_size=64, validation_data=(X_validate, X_validate), verbose=1)","bccb151f":"restored_testing_dataset = model.predict(X_test)","124658f2":"plt.figure(figsize=(20,5))\nfor i in range(10):\n    index = y_test.tolist().index(i)\n    plt.subplot(2, 10, i+1)\n    plt.imshow(X_test[index].reshape((28,28)))\n    plt.gray()\n    plt.subplot(2, 10, i+11)\n    plt.imshow(restored_testing_dataset[index].reshape((28,28)))\n    plt.gray()","1957de97":"encoder = K.function([model.layers[0].input], [model.layers[4].output])","fdee822d":"encoded_images = encoder([X_test])[0].reshape(-1,7*7*7)","ecfedbf3":"kmeans = KMeans(n_clusters=10,max_iter=200)\nclustered_training_set = kmeans.fit_predict(encoded_images)","28c02fde":"cm = confusion_matrix(y_test, clustered_training_set)\nplt.figure(figsize=(10, 10))\nsns.heatmap(cm, annot=True, fmt=\"d\")\nplt.title(\"Confusion matrix\", fontsize=30)\nplt.ylabel('True label', fontsize=25)\nplt.xlabel('Clustering label', fontsize=25)\nplt.show()","2f28a472":"fig = plt.figure(figsize=(20,20))\nfor r in range(10):\n    cluster = cm[r].argmax()\n    for c, val in enumerate(X_test[clustered_training_set == cluster][0:10]):\n        fig.add_subplot(10, 10, 10*r+c+1)\n        plt.imshow(val.reshape((28,28)))\n        plt.gray()\n        plt.xticks([])\n        plt.yticks([])\n        plt.xlabel('cluster: '+str(cluster))\n        plt.ylabel('digit: '+str(r))","d4ea0bd1":"## Trenowanie modelu","7db5f5ab":"## Zakodowanie zestawu treningowego","e46afbf0":"## Wyodr\u0119bnienie kodera","98f8411a":"## Obserwacja jako\u015bci zrekonstruowanego obrazu","6262081a":"## Importowanie bibliotek","7b9e1b19":"## Dopasowanie testowego zbioru danych","289f3c14":"## Obserwacja i por\u00f3wnanie wynik\u00f3w grupowania z rzeczywist\u0105 etykiet\u0105, u\u017cywaj\u0105c macierzy pomy\u0142ek","95fceaff":"## Importowanie danych","4b7e740e":"## Wykre\u015blenie rzeczywistych zdj\u0119\u0107 pogrupowanych wed\u0142ug klastr\u00f3w","e4754c6a":"## Budowanie autokodera","de7f404a":"## Zgrupowanie zestawu treningowego"}}