{"cell_type":{"cd7760c6":"code","c9420343":"code","01ac97fe":"code","b6e45f95":"code","fce81542":"code","b68a3014":"code","c28819a5":"code","3d2c175f":"code","1c6ba5bb":"code","4be3d32f":"code","2752bce5":"code","9ca2d09a":"code","00e2782f":"code","1f217b1c":"code","de74d594":"code","e8070090":"code","749988b3":"code","db067ec8":"code","2c233976":"code","4e721a4c":"code","10a7b2c6":"code","1f846145":"code","37840da9":"code","882bfd92":"code","b0fc92dd":"code","856a209c":"code","b626fc3a":"code","49b60b65":"code","99209154":"code","7f227550":"code","fbf72ba2":"code","ed688f4b":"code","9d5ec326":"code","e6e05efe":"code","528e1d2b":"code","819ae5d2":"code","b88a4bf7":"code","81fd33ab":"code","03f72799":"code","25cd1b8f":"code","1569d7b3":"code","244d4127":"code","0301173e":"code","c102bfa9":"code","194a13b1":"code","38e9b524":"code","3ff1ebc9":"code","26f38baf":"code","9cfc1b76":"code","fc28ca8d":"code","a483e39c":"code","f0118f89":"code","a10bb028":"code","6958ce10":"code","adcd4bad":"code","12875812":"code","38d3c075":"code","b9ea1878":"code","df885bbc":"code","40460a8e":"code","5386d2af":"code","94b9198b":"code","9c0a6b02":"code","1c2be92f":"code","6c1d3fde":"code","536beb35":"code","9f3b1c3a":"code","e6bd80df":"code","a784f491":"code","8ff5992e":"code","40d88e7a":"code","a95b8858":"code","dc799b1a":"code","db1d3711":"code","858c49c6":"code","24d42337":"code","a80d53b0":"code","8b24ec42":"code","1dccb5c2":"code","5798f066":"code","9b320f59":"code","68df79a0":"code","ceffefda":"code","25c0c49c":"code","93e73c28":"code","a9cd652a":"code","e95943a6":"code","da9a2ea0":"code","706cd2f1":"code","deee24c2":"code","ec1c4791":"code","6e8298d5":"code","47241b45":"code","5d353205":"code","273aca86":"code","9fb0d705":"code","13d548fc":"code","90b325e9":"code","266e1926":"code","5be4c5f3":"code","4d80f84d":"code","a6101bc6":"code","12173a94":"code","07fd7370":"code","1d10ebe9":"code","60fca95f":"code","cbac8d06":"code","13e290ad":"code","c8e9e4a3":"code","54e43431":"code","8055c83d":"code","2f9c028f":"code","a83638bb":"code","d331a8ec":"code","91d8757b":"code","7465092b":"code","44cb4eff":"code","2743fa88":"code","4164bc9a":"code","25ad09ca":"code","296affda":"code","3543c963":"code","a3cee5de":"code","1b5f5bae":"code","567ba7a3":"code","cf831010":"code","e501e7b5":"code","1c4c16e9":"code","2dec40fd":"code","1a9999ca":"code","614f99fe":"code","1981ebf4":"code","18740949":"code","3c5624ff":"code","1106b097":"code","c8fa41dd":"code","5e273466":"code","bb89a330":"code","2bde663f":"code","5c92c082":"code","fa1b3a1c":"code","ddbf3036":"code","1b347cfb":"code","77740d4d":"code","15555202":"code","aeb6aa2e":"code","de7ee5ae":"code","a7226ea1":"code","5d7f8c09":"code","e1d6cb0d":"code","f3f9e273":"code","03fabe2b":"code","62661e0b":"code","97348f2c":"code","a6df7de5":"code","bf31cb68":"code","04783834":"code","d263ec20":"code","641b53e1":"code","979d0c64":"code","b8db257b":"code","40d6e4d1":"code","2718f0bb":"code","0048c29d":"code","78e05f06":"code","2e3b9bbe":"code","e541279d":"code","cfa9f60a":"code","39d93bed":"code","f3da8fd8":"code","a8503d7c":"code","62dfee6a":"code","82330215":"code","b15db3e3":"code","616a6a12":"code","04fec7d5":"code","cd4b00fe":"code","a878eb53":"code","66f72e4b":"code","cbecd196":"code","7db4512b":"code","840e983c":"code","7cf8e85e":"code","f0792880":"code","4cca4001":"code","c6a56b96":"markdown","1ab54a8e":"markdown","8f0abaef":"markdown","d24a8493":"markdown","0bbec667":"markdown","bd17aaea":"markdown","82dc5e0d":"markdown","dd7226f7":"markdown","2b0bf673":"markdown","2fcb0061":"markdown","b15ea0f5":"markdown","9d4f3bc8":"markdown","b4781a7c":"markdown","962832f9":"markdown"},"source":{"cd7760c6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import RepeatedKFold,KFold, cross_validate, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\n\ndf=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","c9420343":"with open(\"..\/input\/house-prices-advanced-regression-techniques\/data_description.txt\",'r') as data:\n    for line in data:\n        print(line)","01ac97fe":"# MSSubClass is a numerical dataset, but it should be categorical since the higher number of class does not mean positive or negative correlation to the price. Let's see more detail about the data!","b6e45f95":"df.shape","fce81542":"df_test.shape","b68a3014":"df.describe()","c28819a5":"df.info()","3d2c175f":"df.head()","1c6ba5bb":"# df.MSSubClass=df.MSSubClass.astype(str)","4be3d32f":"df.info()","2752bce5":"#num:38, object:43\ncate=df.select_dtypes(include='object')\nnume=df.select_dtypes(exclude='object')","9ca2d09a":"nume","00e2782f":"# I went with whole dataframe at the first trial and since there are too many features, I could not show clear numbers with figures. Thus, I am going to do visualization after handling all the data with separating numerical and categorical features ","1f217b1c":"nume.corr()['SalePrice'].sort_values()","de74d594":"corr_id=nume['Id'].corr(nume['SalePrice'])\ncorr_id","e8070090":"nume=nume.set_index('Id')","749988b3":"#drop the low correlation to saleprice -> even id,which should be random to the price, has -2.1 percents correlation, i dropped out lower correlation than Id.\ndf_lowcor=abs(nume.corr()['SalePrice'])<abs(corr_id)\ndf_lowcor_col=df[df_lowcor.index[df_lowcor]].columns","db067ec8":"df_lowcor_col","2c233976":"nume.drop(nume[df_lowcor_col],axis=1,inplace=True)\ndf.drop(df[df_lowcor_col],axis=1,inplace=True)\ndf_test.drop(df_test[df_lowcor_col],axis=1,inplace=True)","4e721a4c":"nume.MasVnrArea.fillna(nume.MasVnrArea.mode()[0],inplace=True)\ndf.MasVnrArea.fillna(df.MasVnrArea.mode()[0],inplace=True)","10a7b2c6":"nume.GarageYrBlt.value_counts().head(10)","1f846145":"nume.loc[nume.GarageYrBlt.isna()]","37840da9":"nume.corr()['GarageYrBlt'].sort_values()","882bfd92":"nume.YearBuilt #fillna with yearbuilt that has 82.5 percents correlation. means most likely same year to build main property and garage together","b0fc92dd":"nume.GarageYrBlt.fillna(nume.YearBuilt,inplace=True)\ndf.GarageYrBlt.fillna(df.YearBuilt,inplace=True)","856a209c":"nume","b626fc3a":"nume.LotFrontage.isna().sum()","49b60b65":"nume.LotFrontage.value_counts()","99209154":"nume['LotFrontage'].corr(nume['SalePrice']) #0.352","7f227550":"df['LotFrontage'].fillna(df['LotFrontage'].mean(),inplace=True)\nnume['LotFrontage'].fillna(nume['LotFrontage'].mean(),inplace=True)","fbf72ba2":"nume['LotFrontage'].corr(nume['SalePrice']) #0.335.  Dropping 1.7 percents correlation. Fillna with median doesnt harm much with deciding saleprice. ","ed688f4b":"nume","9d5ec326":"nume_corr=nume.corr()","e6e05efe":"plt.figure(figsize=(30,18))\nsns.heatmap(nume_corr,annot=True,cmap='coolwarm')","528e1d2b":"plt.figure(figsize=(10,30))\nfor i in range(len(nume.columns)-1):\n    plt.subplot(11,3,i+1)\n    plt.scatter(nume[nume.columns[i]],nume.SalePrice,s=0.7,c='r')\n    plt.title(\"{}\".format(cate.columns[i]))\nplt.tight_layout()","819ae5d2":"nume.isna().sum()","b88a4bf7":"#yearbuilt and garageyrblt has 0.85 which is pretty high correlation with each features that is potentially harmful for redundant info. However, also 85 percents does not mean identical(in most of my projects, i dropped with 0.9 threshold) to bring further.","81fd33ab":"cate","03f72799":"# identify bias features with one value (over 90 percents) \nleng=len(cate)\nmax_counts={}\nfor i in cate:\n    max_cate=cate[i].value_counts()[0]\/leng\n    max_counts.update({i:max_cate})\nprint(max_counts)    ","25cd1b8f":"sorted(max_counts.items(),key=lambda item:item[1])","1569d7b3":"#Getting rid of columns having too much portion with one value\nbias_col=[]\nfor i in max_counts.items():\n    if i[1] >0.90:\n        bias_col.append(i[0])\n# print(bias_col)\ncate.drop(bias_col,axis=1,inplace=True)\ndf.drop(bias_col,axis=1,inplace=True)\ndf_test.drop(bias_col,axis=1,inplace=True)","244d4127":"cate[cate.columns[cate.isna().sum()!=0]]","0301173e":"(cate.isna().sum()\/len(cate)).sort_values()","c102bfa9":"cate.FireplaceQu.value_counts()","194a13b1":"# drop the columns with more than 40% Nan\ncate.drop(['Alley','PoolQC','Fence','FireplaceQu','MiscFeature'],axis=1,inplace=True)\ndf.drop(['Alley','PoolQC','Fence','FireplaceQu','MiscFeature'],axis=1,inplace=True)\ndf_test.drop(['Alley','PoolQC','Fence','FireplaceQu','MiscFeature'],axis=1,inplace=True)","38e9b524":"(cate.isna().sum()\/len(cate)).sort_values()","3ff1ebc9":"cate.BsmtCond.value_counts()","26f38baf":"cate.BsmtCond.fillna(cate.BsmtCond.mode()[0],inplace=True)\ndf.BsmtCond.fillna(df.BsmtCond.mode()[0],inplace=True)","9cfc1b76":"cate.BsmtFinType2.value_counts()","fc28ca8d":"cate.BsmtFinType2.fillna(cate.BsmtFinType2.mode()[0],inplace=True)\ndf.BsmtFinType2.fillna(df.BsmtFinType2.mode()[0],inplace=True)","a483e39c":"cate.GarageQual.value_counts()","f0118f89":"cate.GarageQual.fillna(cate.GarageQual.mode()[0],inplace=True)\ndf.GarageQual.fillna(df.GarageQual.mode()[0],inplace=True)","a10bb028":"cate.GarageFinish.value_counts()","6958ce10":"cate.GarageFinish.fillna(cate.GarageFinish.mode()[0],inplace=True)\ndf.GarageFinish.fillna(df.GarageFinish.mode()[0],inplace=True)","adcd4bad":"cate.GarageType.value_counts()","12875812":"cate.GarageType.fillna(cate.GarageType.mode()[0],inplace=True)\ndf.GarageType.fillna(df.GarageType.mode()[0],inplace=True)","38d3c075":"cate.BsmtExposure.value_counts()","b9ea1878":"cate.BsmtExposure.fillna(cate.BsmtExposure.mode()[0],inplace=True)\ndf.BsmtExposure.fillna(df.BsmtExposure.mode()[0],inplace=True)","df885bbc":"cate.MasVnrType.value_counts()","40460a8e":"cate.MasVnrType.fillna(cate.MasVnrType.mode()[0],inplace=True)\ndf.MasVnrType.fillna(df.MasVnrType.mode()[0],inplace=True)","5386d2af":"'''\nBsmtFinType1: Rating of basement finished area\n\n   GLQ    Good Living Quarters\n   ALQ    Average Living Quarters\n   BLQ    Below Average Living Quarters    \n   Rec    Average Rec Room\n   LwQ    Low Quality\n   Unf    Unfinshed\n   NA    No Basement\n'''","94b9198b":"cate.BsmtFinType1.value_counts()","9c0a6b02":"cate.BsmtQual.value_counts()","1c2be92f":"cate.isna().sum()","6c1d3fde":"cate_pre_saleprice=cate.copy()\ncate_pre_saleprice['SalePrice']=df['SalePrice']\ncate['SalePrice']=df['SalePrice']","536beb35":"cate_sales=cate_pre_saleprice.loc[cate_pre_saleprice.BsmtQual.isna()]","9f3b1c3a":"cate_sales.sort_values('SalePrice')","e6bd80df":"cate_sales['BsmtFinType1'].loc[(cate_sales['BsmtFinType1'].isna())&(cate_sales['SalePrice']<95000)]='Unf'\ncate_sales['BsmtFinType1'].loc[(cate_sales['BsmtFinType1'].isna()) & (cate_sales['SalePrice']>95000)]='GLQ'\ncate['BsmtFinType1'].loc[(cate['BsmtFinType1'].isna()) & (cate['SalePrice']<95000)]='Unf'\ncate['BsmtFinType1'].loc[(cate['BsmtFinType1'].isna()) & (cate['SalePrice']>95000)]='GLQ'\ndf['BsmtFinType1'].loc[(df['BsmtFinType1'].isna()) & (df['SalePrice']<95000)]='Unf'\ndf['BsmtFinType1'].loc[(df['BsmtFinType1'].isna()) & (df['SalePrice']>95000)]='GLQ'","a784f491":"cate_sales['BsmtQual'].loc[(cate_sales['BsmtQual'].isna())&(cate_sales['SalePrice']<95000)]='TA'\ncate_sales['BsmtQual'].loc[(cate_sales['BsmtQual'].isna()) & (cate_sales['SalePrice']>95000)]='Gd'\ncate['BsmtQual'].loc[(cate['BsmtQual'].isna()) & (cate['SalePrice']<95000)]='TA'\ncate['BsmtQual'].loc[(cate['BsmtQual'].isna()) & (cate['SalePrice']>95000)]='Gd'\ndf['BsmtQual'].loc[(df['BsmtQual'].isna()) & (df['SalePrice']<95000)]='TA'\ndf['BsmtQual'].loc[(df['BsmtQual'].isna()) & (df['SalePrice']>95000)]='Gd'","8ff5992e":"len(cate.columns)","40d88e7a":"plt.figure(figsize=(10,30))\nfor i in range(len(cate.columns)-1):\n    plt.subplot(7,4,i+1)\n    cate[cate.columns[i]].value_counts().plot.bar()\n    plt.title(\"{}\".format(cate.columns[i]))\nplt.tight_layout()","a95b8858":"#preview with encoding labels\nfrom sklearn.preprocessing import LabelEncoder\n\nLE=LabelEncoder()\ncate_labels=cate.iloc[:,:-1].apply(LE.fit_transform)","dc799b1a":"cate_labels['SalePrice']=df['SalePrice']","db1d3711":"abs(cate_labels.corr()['SalePrice']).sort_values()","858c49c6":"cate.drop(['MasVnrType'],axis=1,inplace=True)\ncate_labels.drop(['MasVnrType'],axis=1,inplace=True)\ndf.drop(['MasVnrType'],axis=1,inplace=True)\ndf_test.drop(['MasVnrType'],axis=1,inplace=True)","24d42337":"cate.drop(['LandContour'],axis=1,inplace=True)\ncate_labels.drop(['LandContour'],axis=1,inplace=True)\ndf.drop(['LandContour'],axis=1,inplace=True)\ndf_test.drop(['LandContour'],axis=1,inplace=True)","a80d53b0":"cate","8b24ec42":"cate_corr=cate_labels.corr()","1dccb5c2":"plt.figure(figsize=(30,18))\nsns.heatmap(cate_corr,annot=True,cmap='coolwarm')","5798f066":"#It looks good to go next.","9b320f59":"#Overall correlation","68df79a0":"nume=nume.reset_index()","ceffefda":"overall=pd.concat([nume,cate_labels],axis=1)","25c0c49c":"overall=overall.set_index('Id')","93e73c28":"over_corr=overall.corr()","a9cd652a":"plt.figure(figsize=(30,18))\nsns.heatmap(over_corr,annot=True,cmap='coolwarm')","e95943a6":"df.info()","da9a2ea0":"df_test.isna().sum().sort_values()","706cd2f1":"df_test.GarageYrBlt.fillna(df_test.YearBuilt,inplace=True)","deee24c2":"df_test.GarageFinish.value_counts()","ec1c4791":"df_test.GarageFinish.fillna(df_test.GarageFinish.mode()[0],inplace=True)","6e8298d5":"df_test.GarageType.value_counts()","47241b45":"df_test.GarageType.fillna(df_test.GarageType.mode()[0],inplace=True)","5d353205":"df_test.BsmtExposure.value_counts()","273aca86":"df_test.BsmtExposure.fillna(df_test.BsmtExposure.mode()[0],inplace=True)","9fb0d705":"df_test.MasVnrArea.value_counts()[0]\/len(df_test)\ndf_test.MasVnrArea.fillna(df_test.MasVnrArea.mode()[0],inplace=True)","13d548fc":"df_test.BsmtQual.value_counts()","90b325e9":"df_test.BsmtQual.fillna(df_test.ExterQual,inplace=True)","266e1926":"df_test.BsmtFinType1.value_counts() \n# hardest part for data preprocessing here. I put the most frequent one since it does not have much correlation to the saleprice.","5be4c5f3":"df_test_nan=df_test.loc[df_test.BsmtFinType1.isna()]\ndf_test_nan[['BsmtQual','BsmtExposure','BsmtFullBath']] ","4d80f84d":"df_test.BsmtFinType1.fillna('Unf',inplace=True)\ndf_test.BsmtFullBath.fillna(df_test.BsmtFullBath.mode()[0],inplace=True) # handling with columns with 1 or 2 Nan.-> fill the most frequent value in the nan\ndf_test.BsmtUnfSF.fillna(df_test.BsmtUnfSF.mode()[0],inplace=True)\ndf_test.BsmtFinSF1.fillna(df_test.BsmtFinSF1.mode()[0],inplace=True)\ndf_test.GarageCars.fillna(df_test.GarageCars.mode()[0],inplace=True)\ndf_test.GarageArea.fillna(df_test.GarageArea.mode()[0],inplace=True)\ndf_test.TotalBsmtSF.fillna(df_test.TotalBsmtSF.mode()[0],inplace=True)\ndf_test.Exterior1st.fillna(df_test.Exterior1st.mode()[0],inplace=True)\ndf_test.Exterior2nd.fillna(df_test.Exterior2nd.mode()[0],inplace=True)\ndf_test.KitchenQual.fillna(df_test.KitchenQual.mode()[0],inplace=True)\ndf_test.MSZoning.fillna(df_test.MSZoning.mode()[0],inplace=True)","a6101bc6":"df_test['LotFrontage'].fillna(df_test['LotFrontage'].mean(),inplace=True)","12173a94":"df_test.GarageQual.value_counts()","07fd7370":"df_test.GarageQual.fillna(df_test.GarageQual.mode()[0],inplace=True)","1d10ebe9":"df_test.BsmtCond.value_counts()","60fca95f":"df_test.BsmtCond.fillna(df_test.BsmtCond.mode()[0],inplace=True)","cbac8d06":"df_test.BsmtFinType2.value_counts()","13e290ad":"df_test.BsmtFinType2.fillna(df_test.BsmtFinType2.mode()[0],inplace=True)","c8e9e4a3":"df_test.SaleType.value_counts()","54e43431":"df_test.SaleType.fillna(df_test.SaleType.mode()[0],inplace=True)","8055c83d":"df_test.isna().sum().sort_values()","2f9c028f":"df=df.reset_index(drop=True)","a83638bb":"df=df.set_index('Id')\ndf_test=df_test.set_index('Id')","d331a8ec":"df_train=df.iloc[:,:-1]\ndf_y=df.iloc[:,-1]\ndf_all=pd.concat([df_train,df_test])","91d8757b":"df_all=pd.get_dummies(df_all)","7465092b":"df_train=df_all.iloc[:1460,:]\ndf_test=df_all.iloc[1460:,:]","44cb4eff":"df_train=pd.concat([df_train,df_y],axis=1)","2743fa88":"df_train","4164bc9a":"df_test","25ad09ca":"rkf = RepeatedKFold(n_splits=10, n_repeats=5,random_state=42)\nX_train, y_train= df_train.iloc[:,:-1],df_train['SalePrice']\nX_train,X_val,y_train,y_val=train_test_split(df_train.iloc[:,:-1],df_train['SalePrice'],test_size=0.1,random_state=42,shuffle=True)","296affda":"sc=StandardScaler()","3543c963":"from sklearn.ensemble import RandomForestRegressor\nRf=RandomForestRegressor()\n\nparametersGrid = {\n 'max_depth': [10, 20, 30, 40],\n 'min_samples_split': [2, 5],\n 'n_estimators': [200, 600, 1000]}\ngrid = GridSearchCV(estimator=Rf, param_grid=parametersGrid,scoring='r2', cv=10)\ngrid.fit(X_train,y_train)","a3cee5de":"grid.best_params_","1b5f5bae":"Rf.set_params(**grid.best_params_)\nRf.fit(X_train,y_train)","567ba7a3":"y_val_pred_rf=Rf.predict(X_val)","cf831010":"Rf.score(X_val,y_val)","e501e7b5":"Rf.score(X_train,y_train)","1c4c16e9":"scores_Rf=cross_validate(Rf,X_train,y_train,cv=rkf,scoring=['r2','neg_mean_squared_log_error'])\nscores_Rf['test_r2'].mean()","2dec40fd":"scores_Rf['test_r2']","1a9999ca":"y_test_pred_Rf=Rf.predict(df_test)","614f99fe":"y_test_pred_Rf","1981ebf4":"from lightgbm import LGBMRegressor\n\nLGBM=LGBMRegressor()","18740949":"LGBM.get_params().keys()","3c5624ff":"parametersGrid = {\n    'num_leaves': [31, 127],\n    'reg_alpha': [0.1, 0.5],\n    'min_data_in_leaf': [30, 50, 100, 300, 400],\n    'lambda_l1': [0, 1, 1.5],\n    'lambda_l2': [0, 1]\n    }\ngrid = GridSearchCV(estimator=LGBM, param_grid=parametersGrid,scoring='r2', cv=10)\ngrid.fit(X_train,y_train)","1106b097":"LGBM.set_params(**grid.best_params_)","c8fa41dd":"LGBM.fit(X_train,y_train)","5e273466":"y_val_pred_lgbm=LGBM.predict(X_val)","bb89a330":"LGBM.score(X_val,y_val)","2bde663f":"LGBM.score(X_train,y_train)","5c92c082":"scores_LGBM=cross_validate(LGBM,X_train,y_train,cv=rkf,scoring=['r2','neg_mean_squared_log_error'])\nscores_LGBM['test_r2'].mean()","fa1b3a1c":"scores_LGBM['test_r2']","ddbf3036":"y_test_pred_lgbm=LGBM.predict(df_test)","1b347cfb":"y_test_pred_lgbm","77740d4d":"from xgboost import XGBRegressor","15555202":"xgb=XGBRegressor()","aeb6aa2e":"xgb.get_params().keys()","de7ee5ae":"parameters = { \n              'learning_rate': np.arange(0.01, 0.4, 0.02),\n              'max_depth': [4,5,6,7,8],\n              'gamma': [0.5,0.6,0.7,0.8,0.9]\n}","a7226ea1":"grid = GridSearchCV(estimator=xgb, param_grid=parameters,scoring='r2', cv=10)\ngrid.fit(X_train,y_train)","5d7f8c09":"grid.best_params_","e1d6cb0d":"xgb.set_params(**grid.best_params_)","f3f9e273":"xgb.fit(X_train,y_train)","03fabe2b":"y_val_pred_xgb=xgb.predict(X_val)","62661e0b":"xgb.score(X_val,y_val)","97348f2c":"xgb.score(X_train,y_train)","a6df7de5":"y_test_pred_xgb=xgb.predict(df_test)","bf31cb68":"y_test_pred_xgb","04783834":"scores_XGB=cross_validate(xgb,X_train,y_train,cv=rkf,scoring=['r2'])\nscores_XGB['test_r2'].mean()","d263ec20":"scores_XGB['test_r2']","641b53e1":"from sklearn.ensemble import GradientBoostingRegressor","979d0c64":"GBR=GradientBoostingRegressor()","b8db257b":"GBR.get_params().keys()","40d6e4d1":"parameters = {\n    'max_depth': [80, 90, 100, 110],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'n_estimators': [100, 200, 300, 1000]\n}","2718f0bb":"grid = GridSearchCV(estimator=GBR, param_grid=parameters,scoring='r2', cv=10)\ngrid.fit(X_train,y_train)","0048c29d":"# GBR=GradientBoostingRegressor()\n# GBR.fit(X_train,y_train)","78e05f06":"GBR.set_params(**grid.best_params_)","2e3b9bbe":"GBR.fit(X_train,y_train)","e541279d":"y_val_pred_gbr=GBR.predict(X_val)","cfa9f60a":"GBR.score(X_val,y_val)","39d93bed":"GBR.score(X_train,y_train)","f3da8fd8":"y_test_pred_gbr=GBR.predict(df_test)","a8503d7c":"y_test_pred_gbr","62dfee6a":"scores_GBR=cross_validate(GBR,X_train,y_train,cv=rkf,scoring=['r2','neg_mean_squared_log_error'])\nscores_GBR['test_r2'].mean()","82330215":"np.sqrt(abs(scores_GBR['test_neg_mean_squared_log_error'])).mean()","b15db3e3":"scores_GBR['test_r2']","616a6a12":"#xgb regressor is very good algorithm for complicated features, but easy overfitting. lgbm, gbr and random forest regressors are all good to go. In this dataset, GBR has the best score to predict test data. ","04fec7d5":"answer=df_test.copy()\nanswer['SalePrice']=y_test_pred_gbr\nanswer=answer['SalePrice']","cd4b00fe":"answer.to_csv(\"house_price_prediction_answers2.csv\")","a878eb53":"from sklearn.ensemble import VotingRegressor\nestimators=[('GBR', GBR), ('rf', Rf), ('LGBM', LGBM),('xgb',xgb)]\nensemble = VotingRegressor(estimators)","66f72e4b":"ensemble.fit(X_train,y_train)","cbecd196":"ensemble.score(X_val,y_val)","7db4512b":"scores_voting=cross_validate(ensemble,X_train,y_train,cv=rkf,scoring=['r2'])\nscores_voting['test_r2'].mean()","840e983c":"y_pred_ensemble=ensemble.predict(df_test)","7cf8e85e":"answer=df_test.copy()\nanswer['SalePrice']=y_pred_ensemble\nanswer=answer['SalePrice']","f0792880":"answer.to_csv(\"house_price_prediction_answers_ensemble2.csv\")","4cca4001":"\"\"\"\nOverall, I've got 0.87 score with 0.132 score with test dataset in kaggle. \n\"\"\"","c6a56b96":"### GBR","1ab54a8e":"### Testset fillna","8f0abaef":"### Voting","d24a8493":"## Training","0bbec667":"### XGB","bd17aaea":"### get_dummies","82dc5e0d":"### Fillna & Remove irrelevant features","dd7226f7":"## Data preprocessing","2b0bf673":"#### Categorical features","2fcb0061":"## Train and validation dataset","b15ea0f5":"### LGBM","9d4f3bc8":"# Decision with models' voting!","b4781a7c":"### Random forest","962832f9":"#### Numerical features"}}