{"cell_type":{"08892342":"code","917adaec":"code","3e41b0e4":"code","22392f98":"code","05594ea9":"code","5fdf7a2d":"code","60bd3bf3":"code","9ca24f0d":"code","d391969c":"code","a64b8458":"code","48a55d55":"code","1529f239":"markdown","1f8f893c":"markdown","d77854dd":"markdown","ac12ceed":"markdown","edcb345b":"markdown","25dad264":"markdown","3fc24720":"markdown","79292941":"markdown","ba8d9ccb":"markdown","580b0e79":"markdown","839f8fd9":"markdown","6f8714b4":"markdown","a4ef2284":"markdown"},"source":{"08892342":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport plotly.offline as px\npx.init_notebook_mode(connected=True)\npx.offline.init_notebook_mode(connected=True)\nimport plotly.express as px\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics\nfrom scipy.spatial.distance import cdist\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom kmodes.kmodes import KModes\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","917adaec":"#Reading all data files....\nrates = pd.read_csv('..\/input\/rates.csv')\nreservations = pd.read_csv('..\/input\/reservations.csv')","3e41b0e4":"# Join rates and reservation databases on basis of RateId\nreservation_with_rates= pd.merge(left=reservations, right=rates, left_on='RateId', right_on='RateId')\n# To find Day of Week using given StartUTC.\nreservation_with_rates['StartUtc'] = pd.to_datetime(reservation_with_rates['StartUtc'])\nreservation_with_rates['Day of Week'] = reservation_with_rates['StartUtc'].dt.day_name()\n# Plot popular choices of booking Rates Names\nfig = px.histogram(reservation_with_rates, x=\"RateName\")\nfig.show()","22392f98":"#  Plot booking rate choice with different Customer Segment (eg. AgeGroup, Gender)\nprint(\"AgeGroup v\/s RateName\")\ntest5 = reservation_with_rates.groupby(['RateName','AgeGroup'])['AgeGroup'].count().unstack('RateName').plot(kind='bar', stacked=True)\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.gcf().set_size_inches(15, 10)\nplt.show()","05594ea9":"print(\"Gender v\/s RateName\")\ntest5 = reservation_with_rates.groupby(['RateName','Gender'])['Gender'].count().unstack('RateName').plot(kind='bar', stacked=True)\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.gcf().set_size_inches(15, 10)\nplt.show()","5fdf7a2d":"# selecting guest data who pursue online check-in using column IsOnlineCheckin\nonline_reservation_with_rates = reservation_with_rates[reservation_with_rates.IsOnlineCheckin == 1]\n# Plot typical guests who pursue online check-in using BusinessSegment column.\nfig = px.histogram(online_reservation_with_rates, x=\"BusinessSegment\")\nfig.show()","60bd3bf3":"# Plot variation in typical guests who pursue online check-in using BusinessSegment and Day of Week columns.\nprint(\"Online Check-in v\/s Business Segment v\/s Weekday\")\ntest = online_reservation_with_rates.groupby(['BusinessSegment','Day of Week'])['Day of Week'].count().unstack('BusinessSegment').plot(kind='bar', stacked=True)\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.gcf().set_size_inches(15, 10)\nplt.show()","9ca24f0d":"# Selecting guest data having null value in CancellationReason and 1 in IsOnlineCheckin column\nnon_Cancelled_reservation_with_rates = online_reservation_with_rates[online_reservation_with_rates.CancellationReason.notnull()]\nnon_Cancelled_reservation_with_rates.head()","d391969c":"# Select dataframe which best describes guest segment from given data.\nguest_Segment_df=reservation_with_rates[[\"AgeGroup\",\"Gender\",\"NationalityCode\",\"BusinessSegment\",\"CancellationReason\"]]\n\n# Column NationalityCode has 1096 rows with Null values. Replacing these null values with value 'Other'.\nguest_Segment_df['NationalityCode'].fillna(\"Other\",inplace=True)\n# Column CancellationReason code has 1806 rows with Null values. Replacing these null values with value '100'.\nguest_Segment_df['CancellationReason'].fillna(100,inplace=True)\n\n# Categorical encoding of NationalityCode column. Converting categorical values to binary values using one hot encoding method\nguest_Segment_df['NationalityCode'] = pd.Categorical(guest_Segment_df['NationalityCode'])\ndfDummies_Nationality = pd.get_dummies(guest_Segment_df['NationalityCode'], prefix = 'nationality')\nNationality_guest_Segment_df = pd.concat([guest_Segment_df, dfDummies_Nationality], axis=1)\n\n# Categorical encoding of BusinessSegment column. Converting categorical values to binary values using one hot encoding method\nNationality_guest_Segment_df['BusinessSegment'] = pd.Categorical(Nationality_guest_Segment_df['BusinessSegment'])\ndfDummies_Business = pd.get_dummies(Nationality_guest_Segment_df['BusinessSegment'], prefix = 'business')\nbusiness_Segment_guest_Segment_df = pd.concat([Nationality_guest_Segment_df, dfDummies_Business], axis=1)\n\n# Encoding of CancellationReason column. Converting ordinal values (0<1<2<3..) values to binary values (1s and 0s) using one hot encoding method\nbusiness_Segment_guest_Segment_df['CancellationReason'] = pd.Categorical(business_Segment_guest_Segment_df['CancellationReason'])\ndfDummies_cancellation = pd.get_dummies(business_Segment_guest_Segment_df['CancellationReason'], prefix = 'cancellation')\ncancellation_guest_Segment_df = pd.concat([business_Segment_guest_Segment_df, dfDummies_cancellation], axis=1)\n\n# Encoding of Gender column. Converting ordinal values (0<1<2) values to binary values (1s and 0s) using one hot encoding method\ncancellation_guest_Segment_df['Gender'] = pd.Categorical(cancellation_guest_Segment_df['Gender'])\ndfDummies_gender = pd.get_dummies(cancellation_guest_Segment_df['Gender'], prefix = 'gender')\nencoded_guest_Segment_df = pd.concat([cancellation_guest_Segment_df, dfDummies_gender], axis=1)\n\nlabelencoder = LabelEncoder()\nencoded_guest_Segment_df['AgeGroup'] = labelencoder.fit_transform(encoded_guest_Segment_df['AgeGroup'])\nencoded_guest_Segment_df = encoded_guest_Segment_df.drop([\"BusinessSegment\", \"NationalityCode\", \"CancellationReason\",\"Gender\"], axis=1)","a64b8458":"distortions = []\nK = range(1,10)\nfor k in K:\n    kmodeModel = KModes(n_clusters=k).fit(encoded_guest_Segment_df)\n    kmodeModel.fit(encoded_guest_Segment_df)\n    distortions.append(sum(np.min(cdist(encoded_guest_Segment_df, kmodeModel.cluster_centroids_, 'hamming'), axis=1)) \/ encoded_guest_Segment_df.shape[0])\n\n# Plot the elbow graph\nplt.plot(K, distortions, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method showing the optimal k')\nplt.show()","48a55d55":"# Scaling all the features in the dataframe to normalize the data in a particular range. \nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(encoded_guest_Segment_df)\n# Number of clusters are 4 (derived from elbow method)\nkmodes = KModes(n_clusters=4, random_state=0) \ny = kmodes.fit_predict(X_scaled)\nreservation_with_rates['Cluster_Segment'] = y\n\n# Grouping NightCost_Sum and OccupiedSpace_Sum on the basis of Cluster_Segment\nnightcost_Sum_reservation_with_rates = reservation_with_rates.groupby(\"Cluster_Segment\",as_index=False)[\"NightCost_Sum\",\"OccupiedSpace_Sum\"].sum()\n# Calculating Night Cost per occupied space from above dataframe\nnightcost_Sum_reservation_with_rates['Night Cost per occupied space'] = nightcost_Sum_reservation_with_rates['NightCost_Sum']\/nightcost_Sum_reservation_with_rates['OccupiedSpace_Sum']\nprofit_reservation_with_rates = nightcost_Sum_reservation_with_rates.sort_values('Night Cost per occupied space')\n\n# Plotting Night Cost per occupied space v\/s Cluster_Segment (Most and Least profitable Guest Segment)\nfig = px.bar(profit_reservation_with_rates, x=\"Cluster_Segment\", y=\"Night Cost per occupied space\", orientation='v')\nfig.show()","1529f239":"***Alternate Solution***\n- If we consider that typical guest is the one who does not cancel the booking, then the below mentioned dataframe contains typical guests","1f8f893c":"***Explanation***\n- For Age Group v\/s Rate Name\n\n    1. In all the age groups we can observe that, customers are more likely to book rooms with Fully Flexible rate than any other rates.\n    2. Moreover, age group 0 contribute to more than 50% of customer bookings for given hotel property.\n- For Gender v\/s Rate Name\n\n    1. In all the gender groups we can observe that, customers are more likely to book rooms with Fully Flexible rate followed by Early - 60 days rate and then by Early - 21 days rate compared to other rates.\n    2. Also, gender group 1 contribute to about 50% of customer bookings for given hotel property whereas gender group 2 contributes to least number of customers.","d77854dd":"# 1.a. What are the popular choices of booking rates ?","ac12ceed":"***Explanation***\n- Customers having business segments OTAs followed by OTA Netto and Leisure are typical guests who did online check-in.","edcb345b":"- Customers of segment 2 have highest night cost per occupied space.\n- Customers of segment 3 have least night cost per occupied space.\n\n***Moreover, we can use this analysis for further prediction like by using this data, we can classify our future customer into these segments and we can act accordingly for taking business decision***","25dad264":"***Explanation***\n- We can observe that, Fully Flexible is the most popular rate choice among customer, then followed by Early - 60 days rooms.","3fc24720":"# 1.b. What are the popular choices of booking rates for different segments of customers ?","79292941":"# 2.b. Does it  vary across week days?","ba8d9ccb":"\n***Explanation***\n   * The bookings completed through OTAs are highest throughout the week except on Tuesdays and Wednesdays where bookings through OTA Netto is the highest.\n   * Also, the rooms bookings are highest on Fridays. Whereas there are no room bookings through Direct Business and FIT on Weekends(i.e. Saturdays and Sundays).\n   * Customer with FIT room bookings tend to visit hotels only on Tuesdays, Wednesdays and Fridays.","580b0e79":"# Hotel Customer Segmentation Analysis - Unsupervised Learning and Visualization\n- Segmenting customers into various groups(4) using unsupervised learning methods (K-means clustering).\n- Data Analysis using visualization modules for business insights.  ","839f8fd9":"***Implementing K-mode clustering method to determine customer segments and using elbow method to determine number of clusters***\n- Reason for using K-mode: As the given data is categorical, hence K-mode clustering method is better than K-means clustering method.","6f8714b4":"# 2.a. What are the typical guests who pursue online check-in ?\n","a4ef2284":"# 3. Look at the night cost per occupied space. What guest segment is  the most profitable per occupied space unit? And what guest  segment is the least profitable ? \n"}}