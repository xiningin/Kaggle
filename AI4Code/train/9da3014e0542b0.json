{"cell_type":{"a85fa28c":"code","ffbe0039":"code","0fdf7867":"code","81c61c87":"code","deeef196":"code","7d0f2923":"code","f7bd7fee":"code","7ced21c6":"code","cc9eb48a":"code","2fe39655":"code","3f3af0eb":"code","c59fb51f":"code","ed96037d":"code","1014a441":"code","8b6a5b91":"code","8bdc272f":"code","82737973":"code","c42b9022":"code","0e9f350f":"code","38dadee1":"code","7b2ef3d0":"code","aea65415":"code","b7d455a6":"code","1f1d9373":"code","bf3d5c0b":"code","833e4e6c":"code","659b7fbd":"code","ec6ac03b":"code","a563fc97":"code","61192c82":"code","d834068b":"code","4fc54031":"code","24889ff6":"code","7dc2c4a6":"code","cde22039":"code","04c58e9b":"code","d64a1373":"code","e7c45642":"code","cb813960":"code","9b46f7ca":"markdown","e5640540":"markdown","646450a4":"markdown","3df2aa73":"markdown","e50702a5":"markdown","52b466df":"markdown","a15b0ce7":"markdown","29ff16b3":"markdown"},"source":{"a85fa28c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nplt.style.use('ggplot')","ffbe0039":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","0fdf7867":"train.shape","81c61c87":"test.shape","deeef196":"total = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total,percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","7d0f2923":"test_total = test.isnull().sum().sort_values(ascending=False)\ntest_percent = (test.isnull().sum()\/test.isnull().count()).sort_values(ascending=False)\ntest_missing_data = pd.concat([test_total, test_percent], axis=1, keys=['Total', 'Percent'])\ntest_missing_data.head(35)","f7bd7fee":"col = missing_data[missing_data['Total']>1].index\ntrain = train.drop(col, 1)\ntest = test.drop(col, 1)","7ced21c6":"train.columns","cc9eb48a":"test.columns","2fe39655":"columns = ['Utilities', 'BsmtFullBath', 'BsmtHalfBath','Functional',\n          'SaleType', 'Exterior2nd', 'Exterior1st','KitchenQual']\n\ncolumns1 = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'GarageArea', 'GarageCars']","3f3af0eb":"test['MSZoning'] = test['MSZoning'].fillna(test['MSZoning'].mode()[0])","c59fb51f":"for item in columns:\n    test[item] = test[item].fillna(test[item].mode()[0])\n    \nfor item in columns1:\n    test[item] = test[item].fillna(test[item].median())","ed96037d":"test.drop(columns=['Id'], inplace=True)\ntrain.drop(columns=['Id'], inplace=True)","1014a441":"train = train.drop(train.loc[train['Electrical'].isnull()].index)","8b6a5b91":"train.isnull().any().any()","8bdc272f":"train.shape","82737973":"test.isnull().any().any()","c42b9022":"test.shape","0e9f350f":"columns = ['MSZoning', 'Street', 'LotShape', 'LandContour',\n           'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood',\n           'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n           'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd',\n           'ExterQual', 'ExterCond', 'Foundation', 'Heating',\n           'HeatingQC', 'CentralAir', 'Electrical','KitchenQual',\n           'Functional','PavedDrive', 'SaleType', 'SaleCondition']","38dadee1":"len(columns)","7b2ef3d0":"final_df = pd.concat([train, test], axis=0)","aea65415":"def OneHotEncoding(columns):\n    df_final = final_df\n    i=0\n    for fields in columns:\n        df1 = pd.get_dummies(final_df[fields], drop_first=True)\n        final_df.drop([fields], axis=1, inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            df_final = pd.concat([df_final, df1], axis=1)\n            \n        i=i+1\n        \n        \n    df_final = pd.concat([final_df, df_final], axis=1)\n    return df_final\n","b7d455a6":"final_df = OneHotEncoding(columns)","1f1d9373":"final_df.shape","bf3d5c0b":"final_df = final_df.loc[:, ~final_df.columns.duplicated()]","833e4e6c":"final_df.shape","659b7fbd":"df_train = final_df.iloc[:1459,:]\ndf_test = final_df.iloc[1459:,:]","ec6ac03b":"df_test.drop(['SalePrice'], axis=1, inplace=True)","a563fc97":"X_train = df_train.drop(['SalePrice'], axis=1)\ny_train = df_train['SalePrice']","61192c82":"from sklearn.ensemble import RandomForestClassifier\n\nregressor = RandomForestClassifier()","d834068b":"from sklearn.model_selection import RandomizedSearchCV\n\nn_estimators = [100, 500, 900]\ncriterion = ['gini', 'entropy']\ndepth = [3, 5, 10, 15]\nmin_split = [2, 3, 4]\nmin_leaf = [2, 3, 4]\nbootstrap = ['True', 'False']\nverbose = [5]\n\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth': depth,\n    'criterion': criterion,\n    'bootstrap': bootstrap,\n    'verbose': verbose,\n    'min_samples_split': min_split,\n    'min_samples_leaf': min_leaf\n}\n\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n                              param_distributions = hyperparameter_grid,\n                              cv=5,\n                              scoring = 'neg_mean_absolute_error',\n                              n_jobs = 4,\n                              return_train_score=True,\n                              random_state=42)","4fc54031":"random_cv.fit(X_train, y_train)","24889ff6":"random_cv.best_estimator_","7dc2c4a6":"regressor = RandomForestClassifier(bootstrap='False', class_weight=None,\n                       criterion='entropy', max_depth=10, max_features='auto',\n                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n                       min_impurity_split=None, min_samples_leaf=3,\n                       min_samples_split=3, min_weight_fraction_leaf=0.0,\n                       n_estimators=900, n_jobs=None, oob_score=False,\n                       random_state=None, verbose=5, warm_start=False)","cde22039":"regressor.fit(X_train, y_train)","04c58e9b":"y_pred = regressor.predict(df_test)","d64a1373":"y_pred","e7c45642":"pred = pd.DataFrame(y_pred)\nsamp = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsub = pd.concat([samp['Id'], pred], axis=1)\nsub.columns = ['Id', 'SalePrice']\nsub","cb813960":"sub.to_csv('My_Submission.csv', index=False)","9b46f7ca":"## Hyperparameter Tunning","e5640540":"## Handling Missing Data\n\nWe'll take a look at the dataset and determine how to handle the missing data.","646450a4":"When there is more than 15% missing data, we should discard it instead of trying any trick to fill the data. \n\nAs we can see, in both test and train, the features \n* 'POOLQc'\n* 'MiscFeature'\n* 'Alley'\n\nare missing more than 95% of the values. Instead of trying fixing them, we should discard those variables.\n\nOther variable like 'GarageX' are also very co-related and their most important information is depicted by 'GarageCars', similar goes for 'BasmentX' variables.\n\nRegarding the 'MasVnrArea' and 'MasVnrType', these two have high co-relation coeff with 'YearBuilt'.\n \n","3df2aa73":"Now, we'll work on filling up the data for the Test dataset","e50702a5":"# If you like the notebook, please give it a Upvote!","52b466df":"## Import Dataset","a15b0ce7":"## Feature Engineering by OneHotEncoding","29ff16b3":"## Importing Libraries"}}