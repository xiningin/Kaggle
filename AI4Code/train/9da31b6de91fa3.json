{"cell_type":{"fd23ccb0":"code","49a9f0d8":"code","dbbe4ae1":"code","92c08c36":"code","d9ee813f":"code","7ccfd24d":"code","096c91d9":"code","c11a027c":"code","b9b6b0e7":"code","efeee1fe":"code","b9f09c49":"code","eb955c7c":"code","af4e525b":"code","2a4eecf4":"code","34b79e38":"code","d63bc782":"code","63cc0d5d":"code","b230cc93":"code","c87baf88":"code","d9120f68":"code","168e5cea":"code","edd8f0e6":"code","22ea6560":"code","7fa0c886":"code","1f326acb":"code","ed1e4457":"code","ba88021e":"code","37780b67":"code","060d61e5":"code","3226bbfe":"code","d28c0688":"code","774bc1a5":"code","1efeb9fe":"code","aa27325b":"code","53a2cec1":"code","440106fc":"code","beda01d5":"code","84b22135":"markdown","1090224c":"markdown","2f773624":"markdown","a5f0610f":"markdown","a82e7d29":"markdown","1ef821d3":"markdown","c2059a63":"markdown","0784c585":"markdown","fedbdcd2":"markdown","234acd71":"markdown","74e80d49":"markdown","bd5f0b27":"markdown","432c9de4":"markdown","b5638dff":"markdown","ec7a93be":"markdown","29149ddc":"markdown","2c5151e0":"markdown","7ad5a2ad":"markdown","a84ce531":"markdown","c26ca237":"markdown","3f96f390":"markdown","be659d3a":"markdown","fc4a5630":"markdown"},"source":{"fd23ccb0":"pip install dataprep","49a9f0d8":"import pandas as pd\nimport numpy as np\n\n# data visualization library \nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(context='notebook', style='darkgrid', palette='colorblind', font='sans-serif', font_scale=1, rc=None)\nmatplotlib.rcParams['figure.figsize'] =[8,8]\nmatplotlib.rcParams.update({'font.size': 15})\nmatplotlib.rcParams['font.family'] = 'sans-serif'\n","dbbe4ae1":"# dataprep\nfrom dataprep.eda import *\nfrom dataprep.eda.missing import plot_missing\nfrom dataprep.eda import plot_correlation","92c08c36":"covid = pd.read_csv('..\/input\/symptoms-and-covid-presence\/Covid Dataset.csv')\ncovid","d9ee813f":"covid.info()","7ccfd24d":"covid.describe(include='all')","096c91d9":"covid.columns","c11a027c":"# create a table with data missing \nmissing_values=covid.isnull().sum() # missing values\n\npercent_missing = covid.isnull().sum()\/covid.shape[0]*100 # missing value %\n\nvalue = {\n    'missing_values ':missing_values,\n    'percent_missing %':percent_missing  \n}\nframe=pd.DataFrame(value)\nframe\n","b9b6b0e7":"sns.countplot(x='COVID-19',data=covid)","efeee1fe":"covid[\"COVID-19\"].value_counts().plot.pie(explode=[0.1,0.1],autopct='%1.1f%%',shadow=True)\nplt.title('number of cases');","b9f09c49":"sns.countplot(x='Breathing Problem',data=covid)","eb955c7c":"sns.countplot(x='Breathing Problem',hue='COVID-19',data=covid)","af4e525b":"sns.countplot(x='Fever',hue='COVID-19',data=covid);","2a4eecf4":"sns.countplot(x='Dry Cough',hue='COVID-19',data=covid)","34b79e38":"sns.countplot(x='Sore throat',hue='COVID-19',data=covid)","d63bc782":"from sklearn.preprocessing import LabelEncoder\ne=LabelEncoder()","63cc0d5d":"covid['Breathing Problem']=e.fit_transform(covid['Breathing Problem'])\ncovid['Fever']=e.fit_transform(covid['Fever'])\ncovid['Dry Cough']=e.fit_transform(covid['Dry Cough'])\ncovid['Sore throat']=e.fit_transform(covid['Sore throat'])\ncovid['Running Nose']=e.fit_transform(covid['Running Nose'])\ncovid['Asthma']=e.fit_transform(covid['Asthma'])\ncovid['Chronic Lung Disease']=e.fit_transform(covid['Chronic Lung Disease'])\ncovid['Headache']=e.fit_transform(covid['Headache'])\ncovid['Heart Disease']=e.fit_transform(covid['Heart Disease'])\ncovid['Diabetes']=e.fit_transform(covid['Diabetes'])\ncovid['Hyper Tension']=e.fit_transform(covid['Hyper Tension'])\ncovid['Abroad travel']=e.fit_transform(covid['Abroad travel'])\ncovid['Contact with COVID Patient']=e.fit_transform(covid['Contact with COVID Patient'])\ncovid['Attended Large Gathering']=e.fit_transform(covid['Attended Large Gathering'])\ncovid['Visited Public Exposed Places']=e.fit_transform(covid['Visited Public Exposed Places'])\ncovid['Family working in Public Exposed Places']=e.fit_transform(covid['Family working in Public Exposed Places'])\ncovid['Wearing Masks']=e.fit_transform(covid['Wearing Masks'])\ncovid['Sanitization from Market']=e.fit_transform(covid['Sanitization from Market'])\ncovid['COVID-19']=e.fit_transform(covid['COVID-19'])\ncovid['Dry Cough']=e.fit_transform(covid['Dry Cough'])\ncovid['Sore throat']=e.fit_transform(covid['Sore throat'])\ncovid['Gastrointestinal ']=e.fit_transform(covid['Gastrointestinal '])\ncovid['Fatigue ']=e.fit_transform(covid['Fatigue '])","b230cc93":"covid.head()","c87baf88":"covid.dtypes.value_counts()","d9120f68":"covid.describe(include='all')","168e5cea":"covid.hist(figsize=(20,15));","edd8f0e6":"plot_correlation(covid)","22ea6560":"corr=covid.corr()\ncorr.style.background_gradient(cmap='coolwarm',axis=None)","7fa0c886":"covid=covid.drop('Running Nose',axis=1)\ncovid=covid.drop('Chronic Lung Disease',axis=1)\ncovid=covid.drop('Headache',axis=1)\ncovid=covid.drop('Heart Disease',axis=1)\ncovid=covid.drop('Diabetes',axis=1)\ncovid=covid.drop('Gastrointestinal ',axis=1)\ncovid=covid.drop('Wearing Masks',axis=1)\ncovid=covid.drop('Sanitization from Market',axis=1)\ncovid=covid.drop('Asthma',axis=1)","1f326acb":"covid=covid.drop('Fatigue ',axis=1)","ed1e4457":"corr=covid.corr()\ncorr.style.background_gradient(cmap='coolwarm',axis=None)","ba88021e":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score","37780b67":"x=covid.drop('COVID-19',axis=1)\ny=covid['COVID-19']","060d61e5":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20)","3226bbfe":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\n#Fit the model\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\n#Score\/Accuracy\nacc_logreg=model.score(x_test, y_test)*100\nacc_logreg","d28c0688":"#Train the model\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=1000)\n#Fit\nmodel.fit(x_train, y_train)\n#Score\/Accuracy\nacc_randomforest=model.score(x_test, y_test)*100\nacc_randomforest","774bc1a5":"#Train the model\nfrom sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)\n#Fit\nGBR.fit(x_train, y_train)\nacc_gbk=GBR.score(x_test, y_test)*100\nacc_gbk","1efeb9fe":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=20)\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_test)\n#Score\/Accuracy\nacc_knn=knn.score(x_test, y_test)*100\nacc_knn","aa27325b":"from sklearn import tree\nt = tree.DecisionTreeClassifier()\nt.fit(x_train,y_train)\ny_pred = t.predict(x_test)\n#Score\/Accuracy\nacc_decisiontree=t.score(x_test, y_test)*100\nacc_decisiontree","53a2cec1":"from sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\nmodel.fit(x_train,y_train)\n#Score\/Accuracy\nacc_gaussian= model.score(x_test, y_test)*100\nacc_gaussian","440106fc":"#Import svm model\nfrom sklearn import svm\n#Create a svm Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n#Train the model using the training sets\nclf.fit(x_train, y_train)\n#Predict the response for test dataset\ny_pred = clf.predict(x_test)\n#Score\/Accuracy\nacc_svc=clf.score(x_test, y_test)*100\nacc_svc\n","beda01d5":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes',   \n              'Decision Tree', 'Gradient Boosting Classifier'],\n    'Score': [acc_svc, acc_knn, acc_logreg, \n              acc_randomforest, acc_gaussian, acc_decisiontree,\n               acc_gbk]})\nmodels.sort_values(by='Score', ascending=False)","84b22135":"##  RandomForestRegressor","1090224c":"## svm","2f773624":"## Dry Cough","a5f0610f":"## DecisionTreeClassifier","a82e7d29":"# data analysis","1ef821d3":"### COVID-19 (target)","c2059a63":"#### feature that we gonna delelte :\nRunning Nose \/ Asthma \/Chronic Lung Disease \/ Headache \/ Heart Disease \/ Diabetes \/ Fatigue \/ Gastrointestinal \/ Wearing Masks \/ Sanitization from Market","0784c585":"## Logistic Regression","fedbdcd2":"like we see our data is clean 0 missing values","234acd71":"# import library","74e80d49":"# finding missing value","bd5f0b27":"### Breathing Problem","432c9de4":"# feature transformation","b5638dff":"## GradientBoostingRegressor","ec7a93be":"# correlation betwenn features ","29149ddc":"### KNeighborsClassifier","2c5151e0":"## Fever","7ad5a2ad":"##  naive_bayes","a84ce531":"# data vizualisation","c26ca237":"## Sore throat","3f96f390":"# machine learning algo","be659d3a":"# info about our data after transformation ","fc4a5630":"# feature selection "}}