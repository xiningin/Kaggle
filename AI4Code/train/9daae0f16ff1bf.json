{"cell_type":{"e3dbad33":"code","1e44aec2":"code","16b526f8":"code","05d03072":"code","29472572":"code","d801c225":"code","80655535":"code","87fc81f6":"markdown","651285b0":"markdown","849ece17":"markdown","72e7a0c7":"markdown","cda7c5d2":"markdown","94c470f6":"markdown"},"source":{"e3dbad33":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e44aec2":"from sklearn.model_selection import train_test_split\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np\nfrom sklearn import  ensemble","16b526f8":"data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","05d03072":"enc  = LabelEncoder()\nenc.fit(data['CentralAir'])\ndata['CentralAir'] = enc.transform(data['CentralAir'])\n\nenc1  = LabelEncoder()\nenc1.fit(data['KitchenQual'])\ndata['KitchenQual'] = enc1.transform(data['KitchenQual'])\n\ndata['GarageType']=data['GarageType'].replace(np.nan,'0')\nenc2  = LabelEncoder()\nenc2.fit(data['GarageType'])\ndata['GarageType'] = enc2.transform(data['GarageType'])\n\n\ndata['BsmtCond']=data['BsmtCond'].replace(np.nan,'0')\nenc3  = LabelEncoder()\nenc3.fit(data['BsmtCond'])\ndata['BsmtCond'] = enc3.transform(data['BsmtCond'])\n\n\ndata['Electrical']=data['Electrical'].replace(np.nan,'0')\nenc5  = LabelEncoder()\nenc5.fit(data['Electrical'])\ndata['Electrical'] = enc5.transform(data['Electrical'])","29472572":"#X Data\nX = data[['GrLivArea','GarageArea','TotalBsmtSF','OverallQual','OverallCond','LotArea','BsmtFinSF1','BsmtUnfSF','CentralAir']]\n#y Data\ny =data['SalePrice']\n\n#Splitting data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.21, random_state=44, shuffle =True)\n","d801c225":"params = {'n_estimators': 2000,'max_depth': 6,'min_samples_split': 10,'learning_rate': 0.05,'loss': 'ls'}\nGradientBoostingRegressor = ensemble.GradientBoostingRegressor(**params)\nGradientBoostingRegressor.fit(X_train, y_train)\n\nprint('GradientBoostingRegressor Train Score is : ' , GradientBoostingRegressor.score(X_train, y_train))\nprint('GradientBoostingRegressor Test Score is : ' , GradientBoostingRegressor.score(X_test, y_test))","80655535":"data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nId=data['Id']\nprint(Id)\nenc  = LabelEncoder()\nenc.fit(data['CentralAir'])\ndata['CentralAir'] = enc.transform(data['CentralAir'])\n\ndata['KitchenQual']=data['KitchenQual'].replace(np.nan,'0')\nenc1  = LabelEncoder()\nenc1.fit(data['KitchenQual'])\ndata['KitchenQual'] = enc1.transform(data['KitchenQual'])\n\ndata['GarageType']=data['GarageType'].replace(np.nan,'0')\nenc2  = LabelEncoder()\nenc2.fit(data['GarageType'])\ndata['GarageType'] = enc2.transform(data['GarageType'])\n\n\ndata['BsmtCond']=data['BsmtCond'].replace(np.nan,'0')\nenc3  = LabelEncoder()\nenc3.fit(data['BsmtCond'])\ndata['BsmtCond'] = enc3.transform(data['BsmtCond'])\n\n\ndata['Electrical']=data['Electrical'].replace(np.nan,'0')\nenc5  = LabelEncoder()\nenc5.fit(data['Electrical'])\ndata['Electrical'] = enc5.transform(data['Electrical'])\n\nX_test = data[['GrLivArea','GarageArea','TotalBsmtSF','OverallQual','OverallCond','LotArea','BsmtFinSF1','BsmtUnfSF','CentralAir']]\n\n\n\nfrom sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp = imp.fit(X_test)\nX_test = imp.transform(X_test)\n\n\ny_test= GradientBoostingRegressor.predict(X_test)\n\n#y_test=pd.DataFrame(y_test)\n#print(y_test)\n\n\noutput = pd.DataFrame({'Id': Id, 'SalePrice': y_test})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n","87fc81f6":"**Read and split Data**","651285b0":"**Read Data**","849ece17":"**Start Fitting and get the score**","72e7a0c7":"**Import Library**","cda7c5d2":"**Repeat the step with the test data**","94c470f6":"**Convert Catergoral column(Text) to Number**"}}