{"cell_type":{"0c0b82a1":"code","5cb52325":"code","bd55b89d":"code","2d10daef":"code","e2e6cfdb":"code","d7cd9a65":"code","0a3a0ecf":"code","1bda6c58":"code","518906d6":"code","059fb701":"code","a046b290":"code","d930d7ad":"code","a03304ed":"code","03fc8f42":"code","30981da9":"code","fdea7fd2":"markdown","6d583d36":"markdown","88f779c0":"markdown","69fa4d24":"markdown","90c0c928":"markdown","7b8b9e2b":"markdown","13fb6f84":"markdown","a2ea479d":"markdown","fbe40cfd":"markdown","02ad1de5":"markdown","b8cfe25c":"markdown","b430cdbb":"markdown","029a76af":"markdown","e21f3f1d":"markdown","636e88b6":"markdown"},"source":{"0c0b82a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nspells = pd.read_csv('\/kaggle\/input\/dndspells\/dnd-spells.csv')\nequipment = pd.read_csv('\/kaggle\/input\/equips-in-dungeons-and-dragons-beyond\/dndbeyond_equips.csv')","5cb52325":"spells.head(10)","bd55b89d":"spells.loc[spells.material == 1, ['name','material_cost']].sample(10)","2d10daef":"equipment.sample(10)","e2e6cfdb":"from fuzzywuzzy import fuzz\n\nratio_threshold = 75 # arbitrary threshold I found to work ok\n\n# limit search to spells with a material component, (Powdered corn extract and a twisted loop of parchment)\nfor i, row in spells.loc[spells.material == 1, :].iterrows():\n    \n    # break up each component and search individually, [Powdered corn extract, twisted loop of parchment]\n    for component in row['material_cost'].split('and'):\n        \n        # search each component against equipment list,  O(n^3) weee!        \n        for i, equipment_row in equipment.iterrows():\n            a = component.lower()\n            b = equipment_row['Name'].lower()\n            ratio = fuzz.ratio(a, b)\n            \n            # if threshold is reached, convert to int and catch nans\n            if ratio > ratio_threshold:\n                cost = int(equipment_row['Price (golds)']) if not pd.isnull(equipment_row['Price (golds)']) else 0\n                \n                print(f'{a} likely has a gold cost of {cost}')","d7cd9a65":"piece_count = pd.DataFrame({'sp':0, 'gp':0, 'pp':0, 'coin':0, 'piece':0},  index=['counts'])\n\npiece_count.loc['counts', 'sp'] = spells.material_cost.str.contains('sp').value_counts()[True].sum()\npiece_count.loc['counts', 'gp'] = spells.material_cost.str.contains('gp').value_counts()[True].sum()\npiece_count.loc['counts', 'pp'] = spells.material_cost.str.contains('pp').value_counts()[True].sum()\npiece_count.loc['counts', 'coin'] = spells.material_cost.str.contains('coin').value_counts()[True].sum()\npiece_count.loc['counts', 'piece'] = spells.material_cost.str.contains('piece').value_counts()[True].sum()\n\npiece_count","0a3a0ecf":"import re\n\ndef convert_cost(arg):\n    \"\"\" A conversion function that analyzes a spell's description and tries to extract the quantitative\n        spell value in silver coins\n        \n        arg: spell's material cost\n        \n        return: the spell's cost if any, 0 is returned if nothing is found\n    \"\"\"\n    cost_silver = 0\n    cost_map = {'sp':1, 'gp':10, 'pp':100}\n    \n    if not pd.isnull(arg):\n        # clean the input a little before parsing\n        arg = arg.replace(',', '')\n        arg = arg.replace('gold pieces', 'gp')\n        arg = arg.replace('gold coins', 'gp')\n        \n        # search for occurence of each currency in cost\n        for currency in cost_map:\n            results = re.findall(fr'\\d+ {currency}', arg)\n            \n            # some spells have multiple costs\n            for r in results:\n                # result comes back as '1 gp', so split and take first element as int                \n                amount = int(r.split()[0]) * cost_map[currency]\n                cost_silver += amount\n                \n    return cost_silver\n\nspells['actual_cost'] = spells['material_cost'].apply(convert_cost)","1bda6c58":"spells.loc[spells.material == 1, ['name','material_cost', 'actual_cost']].sample(10)","518906d6":"sns.set_theme(style=\"whitegrid\")\n\nhas_cost = spells[spells.actual_cost > 0]\nsns.displot(has_cost.actual_cost, kde=False)","059fb701":"gucci_spell = has_cost[has_cost.actual_cost > 200_000]\nhas_cost = has_cost[has_cost.actual_cost < 200_000]\ngucci_spell","a046b290":"sns.displot(has_cost.actual_cost, kde=False)\nplt.axvline(x=has_cost.actual_cost.mean(),color='red')\nplt.text(s=f'mean: {int(has_cost.actual_cost.mean())}', x=7_000, y=45)","d930d7ad":"sns.set(rc={'figure.figsize':(15,7)})\nsns.set_theme(style=\"whitegrid\")\n\nsns.stripplot(y='school', x='actual_cost',  data=has_cost, color='k')\nsns.boxplot(y='school', x='actual_cost',  data=has_cost)","a03304ed":"has_cost[has_cost.actual_cost > 30_000]","03fc8f42":"sns.set(rc={'figure.figsize':(15,7)})\nsns.set_theme(style=\"whitegrid\")\n\nsns.stripplot(x='level', y='actual_cost', data=has_cost)\nplt.text(s='?', x=4.15, y=50_000)","30981da9":"has_cost[(has_cost.actual_cost > 30_000) & (has_cost.level == 4)]","fdea7fd2":"# OK\n\nSo it seems that certain spell schools do cost more than others, however looking at the cost per spell level I don't think a Wizard should have much issue affording their spells. By the time a Wizard is high enough level to begin casting the more expensive spells (5th level spells are gained at the Wizard's 9th level) 10,000 silver shouldn't be much of an issue (purely anecdotal).\n\nThat was a fun bit of analysis, hopefully somebody out there learns something new from this, or even continues to the work, I would love to see what others can come up with.","6d583d36":"I was curious the spell's school had any effect on the cost and it does appear that Conjuration, Transmutation, and Necromancy do have a slightly higher cost in general. In particular there a few outliers that might be interesting to look at.","88f779c0":"Interesting, so this spell can be learned relatively early compared to the other more expensive spells but it is mostly a quality of life spell.","69fa4d24":"These do seem to be very useful \/ powerful spells so it seems the cost is justified.","90c0c928":"Ok so let's get to work on a regex that can parse these a little better than just comparing strings, typically when I do something like this I like to map the regex \/ conversion in a function and then use apply on the dataframe, this makes it easy to work on the function and we can still get the speed from using apply (vs iterating over the dataframe). Since there are no copper costs I am going to use silver as the base currency.","7b8b9e2b":"Lets use the **material** feature to get a close look at relevant data. We could drop any nan rows, but I want to keep them around for now. You can see below that some spells require simple materials e.g. a leaf of sumac, a tiny fan, a pinch of dirt, if a Wizard has an **arcane focus** they do not need to provide any of these materials, the only time a Wizard must provide the item is when there is a monetary cost listed.","13fb6f84":"# Hello World\nI feel like there has been plenty of analysis on distributions and types for spells in D&D so I wanted to examine the data from another perspective, how expensive is it to be a spell caster? In the world of D&D spells have requirements to be cast, these are referred to as verbal, somatic, or material components. If a spell has a verbal component it means the spell caster must be able to speak or make sounds for it to be cast, a somatic component requires hand motions, a material component requires a physical object which is sometimes consumed. This means that a spellcaster could have a very expensive day if they cast certain spells often, so I wanted to dig in a little and see what that cost could be.\n\n# df.info - spells\nFirst let's check out the features for the spell data set. Most of them are interesting but the main focus of this study will be the **material_cost** feature, looking at a sample it seems like many spells don't even have a cost to cast.","a2ea479d":"I also assumed that the spell's level would correlate to the cost, and we do see a clear trend line here. What I found interesting is the very expensive 4th level spell, so let's see what that is.","fbe40cfd":"So that was an interesting experiment, but it doesn't seem like we could get any additional information on spell cost using this method as the number of matches is quite low. Additionally there is an interesting discrepency, it appears this data set has **holy symbol** with a cost 0 gp, some sources have a cost listed so it is likely the data was scraped from one of those.\n\n[Holy Symbol with cost](https:\/\/www.dandwiki.com\/wiki\/5e_SRD:Holy_Symbol,_Amulet)\n\n[Holy Symbol without cost](https:\/\/www.dndbeyond.com\/equipment\/holy-symbol)\n\n# Data Modeling and Regex (Obligatory, Now I Have Two Problems)\n\nIn the very first exploration of this data we noticed that not all spells had a cost (and even spells with a cost might not have a consumable portion), so let's try to figure out how many spells we're even looking at here. Spells typically have this listed as a certain number of \"gp\" or \"gold pieces\", so a good way to start is to just count them up.\n\nSomething we will need to be careful about is the word \"piece\", as this could reference a \"gold piece\" or a \"piece of cloth\", additionally \"sp\" could be found in the world \"spell\".","02ad1de5":"We can see the outliers pulling the mean to the right of the mode, but we can say that most spells cost less than 6,360 silver.","b8cfe25c":"# Graph Time\nWe can start looking at pictures now and get a sense at what we have potentially discovered, fist let's just see the distribution of this new feature we have engineered. Before we do anything we can filter out samples that don't have a cost.","b430cdbb":"So far it looks like we have an unimodal right skewed distribution with an extreme outlier, let's remove it so we can better understand the distribution.","029a76af":"# Extra (Fuzzy) Components\nAccording to the rules a material is only needed if a monetary cost is listed, however I was curious if I could get any extra information by comparing the materal components to the D&D equipment costs. I couldn't just do a simple string compare as the equipment names are listed as single items while the material cost is a list of ingredients. Compare this sample with the previous from the spell data set.","e21f3f1d":"Ok let's see if it worked, remember the **actual_cost** is in silver.","636e88b6":"In order to see if I could correlate the two I decided to use the fuzzywuzzy package, among other things let's us compare two strings using a **Levenshtein distance**. This distance is calculated by figuring out how many edits (insert, deletion, substitutions) are require to turn one string into another one. Here is a small example, turning the word dragon to flagons is a **Levenshtin distance** of 3.\n\n**d**ragon -> **f**ragon\n\nf**r**agon -> f**l**agon\n\nfragon -> flagon**s**"}}