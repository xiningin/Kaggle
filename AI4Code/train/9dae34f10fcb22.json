{"cell_type":{"835d133a":"code","d17df9b7":"code","fec00c76":"code","c0b428be":"code","5919f72c":"code","e0f16910":"code","d94f9383":"code","45ddcfda":"code","3ec2eb65":"code","6963ce02":"code","623da8fe":"code","1ec8302e":"code","464dfcad":"code","7290204d":"code","211e4d8a":"code","371ea785":"code","c6e7d672":"code","549c65d4":"code","216d877f":"code","49075a19":"code","72b4bcdf":"code","1e9aa375":"code","e79b51b7":"code","4f823c82":"code","b7f2f033":"code","586f3ece":"code","f23078bd":"code","adc07205":"code","cad336f4":"code","94f8b15c":"code","03d3f0a9":"code","25c73a4f":"code","b146367d":"code","ca9a86cb":"code","9b7d2b9d":"code","4193c3fd":"code","d8e3c755":"code","973c2af8":"code","92c45da8":"code","f49058f9":"code","d78d8b77":"code","7688576b":"code","6a186228":"code","9246b43e":"code","cccad3fa":"code","a8cade36":"code","e4709374":"code","7b874970":"code","021e9a3e":"code","b2a516a3":"code","14a288c1":"code","2c26216b":"code","ecaf06d4":"code","11e04f09":"code","828dddd2":"code","54461132":"code","4978bdf6":"markdown","b11d78fa":"markdown","2da30e98":"markdown","45fe4f58":"markdown","ee0fd384":"markdown","4c69dbea":"markdown","1884acf2":"markdown","8520f3ac":"markdown","6f879224":"markdown","2bc10acd":"markdown","00dde8d4":"markdown","338d4f22":"markdown","f2c0336c":"markdown","1aa42383":"markdown","057139dc":"markdown","25037efd":"markdown","92534d7b":"markdown","0c1eeac3":"markdown","48d95b20":"markdown","fd789e24":"markdown","ec9b1ba8":"markdown","7e4c7364":"markdown","16ea5c27":"markdown","a73e5ff7":"markdown","bdd9a55a":"markdown","c0832459":"markdown","ddd14026":"markdown","ceb5735a":"markdown","b3f29ada":"markdown","8c7af853":"markdown","a2302e62":"markdown","114eac1e":"markdown","d5a18c42":"markdown","39a40329":"markdown","6591b7fe":"markdown","c6b24eb0":"markdown","93783df5":"markdown","298a48e0":"markdown","baaaa3b6":"markdown","cf2baf90":"markdown","a1da4dab":"markdown","d3617202":"markdown","fb3bc6e6":"markdown","97afda90":"markdown","1bdc80f6":"markdown","50e52225":"markdown","a6709c7f":"markdown","20f1453d":"markdown","61d30359":"markdown","885fd36e":"markdown","f08732cb":"markdown","d9d2a670":"markdown","677a0a33":"markdown","83b90c9d":"markdown","ec97a50e":"markdown","41a8329e":"markdown","d498a98a":"markdown","cc6a3195":"markdown","e95b274e":"markdown"},"source":{"835d133a":"print('Bonjour tout le monde !')","d17df9b7":"2+2","fec00c76":"3.14159 * 3**2","c0b428be":"x = 2 ","5919f72c":"x","e0f16910":"y = x+1\nx += 1\nprint(x, y)","d94f9383":"a = 10\nb = 5\nprint(a == a)\nprint(a != b)\nprint(a < b)\nprint(a <= b)\nprint(a > b)\nprint(a >= b)","45ddcfda":"# Table de multiplication par 9\ni = 0\nwhile i<10 :\n    print(i , \" x 9 = \", i*9)\n    i = i+1","3ec2eb65":"for i in range(10) :\n    print(i , \" x 9 = \", i*9)","6963ce02":"for i in range(100,10,-5) :\n    print(i)","623da8fe":"a = 10\nb = 5\nif a > b :\n    print(\"le max est : \", a)\nelse :\n    print(\"le max est : \", b)","1ec8302e":"def maximum(a,b) :\n    \"\"\"Affiche le max de deux \u00e9l\u00e9ments\"\"\"\n    if a > b :\n        print(\"le max est : \", a)\n    else :\n        print(\"le max est : \", b)","464dfcad":"maximum(1,100)","7290204d":"help(maximum)","211e4d8a":"def maximum(a,b) :\n    \"\"\"Renvoie le max de deux \u00e9l\u00e9ments\"\"\"\n    if a > b :\n        max = a\n    else :\n        max = b\n    return max","371ea785":"print(10*maximum(1,100))","c6e7d672":"chiffres = [0,1,2,3,4,5,6,7,8,9]","549c65d4":"chiffres[3]","216d877f":"chiffres[-1]","49075a19":"len(chiffres)","72b4bcdf":"voyelles = ['a','e','i','o','u','y']\nliste = chiffres + voyelles\nprint(liste)","1e9aa375":"chiffres[3:5]","e79b51b7":"chiffres[:5]","4f823c82":"chiffres[5:]","b7f2f033":"liste1 = ['p','y','t','h','o','n']","586f3ece":"liste2 = liste1","f23078bd":"liste1[3] = 1000","adc07205":"print(liste1)\nprint(liste2)","cad336f4":"liste1 = ['p','y','t','h','o','n']","94f8b15c":"liste2 = list(liste1)","03d3f0a9":"liste1[3] = 1000\nprint(liste1)\nprint(liste2)","25c73a4f":"for x in liste :\n    print(x)","b146367d":"envers = []\nfor x in liste :\n    envers = [x] + envers\nprint(envers)","ca9a86cb":"envers = []\ni=0\nwhile i < len(liste) :\n    envers = [liste[i]] + envers\n    i += 1\nprint(envers)","9b7d2b9d":"[2*i for i in range(30,15,-2)]","4193c3fd":"inverse(chiffres)","d8e3c755":"echange(chiffres, 2, 8)","973c2af8":"chiffres","92c45da8":"tri_a_bulles(inverse(voyelles))","f49058f9":"nom = 'Le Cun'\nprenom = 'Yann'","d78d8b77":"print(prenom,nom)","7688576b":"prenom_nom = prenom + ' ' + nom","6a186228":"prenom_nom","9246b43e":"nom[0]","cccad3fa":"for c in nom : \n    print(c)","a8cade36":"list(nom)","e4709374":"palindrome('python')","7b874970":"palindrome('radar')","021e9a3e":"import numpy as np","b2a516a3":"a = np.array(chiffres)\nprint(a)","14a288c1":"a = np.arange(0,16)","2c26216b":"a","ecaf06d4":"b = a.reshape(4,4)\nprint(b)","11e04f09":"b[3,2]","828dddd2":"b[2:4, 1:3]","54461132":"b.reshape(-1)","4978bdf6":"## Listes","b11d78fa":"**len** donne le nombre d'\u00e9l\u00e9ments de la liste :","2da30e98":"Un **tableau** est une liste dont tous les \u00e9l\u00e9ments ont le m\u00eame type  \n(n\u00e9cessite la librairie **numpy**)","45fe4f58":"**Gras**  \n*Italique*\nListe \u00e0 points :  \n* item 1\n* item 2","ee0fd384":"On utilise le symbole **=** pour l'affectation \u00e0 une variable :","4c69dbea":"Une cha\u00eene est une liste de cartact\u00e8res non modifiable","1884acf2":"Une liste peut regrouper des \u00e9l\u00e9ments de types diff\u00e9rents  \n(le symbole **+** permet de concat\u00e9ner (coller) deux listes)","8520f3ac":"Ins\u00e9rer une image :","6f879224":"On ex\u00e9cute le code Python dans une cellule *Code* :","2bc10acd":"Si on modifie la liste1 :","00dde8d4":"# El\u00e9ments de Python","338d4f22":"**return** permet de renvoyer une valeur :","f2c0336c":"<img src=\"https:\/\/i.makeagif.com\/media\/11-24-2015\/gI3nus.gif\">","1aa42383":"L'indice **-1** d\u00e9signe le dernier \u00e9l\u00e9ment :","057139dc":"On peut acc\u00e9der \u00e0 un \u00e9l\u00e9ment d'une liste par son indice (comme dans un tableau) :","25037efd":"L'aide (**help**) affiche le texte entre triple guillemets :","92534d7b":"**np.arange(i,j)** donne un tableau de nombres entre **i** et **j** :","0c1eeac3":"On peut utilise le mot cl\u00e9 **while** pour construire une boucle :","48d95b20":"<img src = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/54\/Sorting_bubblesort_anim.gif\">","fd789e24":"Pour passer \u00e0 la ligne suivante, valider avec les touches **Shift + Entr\u00e9e**","ec9b1ba8":"La liste2 est modifi\u00e9e \u00e9galement :","7e4c7364":"### Exercice\n\u00e9crire une fonction **inverse(liste)** qui renvoie la liste en ordre inverse","16ea5c27":"Pour copier (dupliquer) une liste, on peut utiliser le mot cl\u00e9 **list**","a73e5ff7":"**Gras**  \n*Italique*  \nListe \u00e0 points :  \n* item 1\n* item 2","bdd9a55a":"### Exercice\n\u00e9crire une fonction **echange(liste, i, j)** qui echange les \u00e9l\u00e9ments d'indices i et j dans la liste  \n(la liste est modifi\u00e9e)","c0832459":"Avec une boucle **while** :","ddd14026":"## Jupyter","ceb5735a":"## Exercice\n\u00e9crire une fonction qui *teste* si un mot est un *palindrome* (se lit dans les deux sens)","b3f29ada":"L'it\u00e9rateur **for** permet de parcourir tous les \u00e9l\u00e9ments d'une liste :","8c7af853":"## \"Hello World\" ...","a2302e62":"Une liste est une suite d'\u00e9l\u00e9ments :","114eac1e":"**Remarque** : pour aller \u00e0 la ligne, taper **deux espaces** en fin de ligne","d5a18c42":"On peut \u00e9galement d\u00e9finir une liste \"en compr\u00e9hension\" :","39a40329":"**Attention** : les indentations sont obligatoires en Python","6591b7fe":"## Tableaux","c6b24eb0":"On peut \u00e9galement utiliser l'it\u00e9rateur **for** avec le mot cl\u00e9 **range** :","93783df5":"# Titre 1\n## Titre 2\n### Titre 3","298a48e0":"## Exercice\n\u00e9crire une fonction qui trie une liste (tri \u00e0 bulles)","baaaa3b6":"On d\u00e9finit une fonction avec **def** :","cf2baf90":"tri_a_bulles(T)  \n    pour i allant de (taille de T)-1 \u00e0 1  \n       pour j allant de 0 \u00e0 i-1  \n           si T[j+1] < T[j]  \n               \u00e9changer(T[j+1], T[j])","a1da4dab":"# Titre 1\n## Titre 2\n### Titre 3","d3617202":"Exemples de formattage en *Markdown* :","fb3bc6e6":"On peut effectuer la transformation inverse :","97afda90":"On peut utiliser l'it\u00e9rateur **for** :","1bdc80f6":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c3\/Python-logo-notext.svg\/131px-Python-logo-notext.svg.png\">","50e52225":"Dans Jupyter on a plusieurs type de *cellules* (lignes) :\n* *Code* : permet d'ex\u00e9cuter du code Python\n* *Markdown* : ligne de texte avec un formattage simple (titres, gras, italique, ...)\n* *Raw* : texte brut","a6709c7f":"On peut \u00e9galement utiliser des *slices* sur les matrices :","20f1453d":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c3\/Python-logo-notext.svg\/131px-Python-logo-notext.svg.png\">","61d30359":"## Pour aller plus loin\nLe cours sur OpenClassRoom :  \nhttps:\/\/openclassrooms.com\/fr\/courses\/235344-apprenez-a-programmer-en-python  \n  \nAutres cours :  \nhttps:\/\/openclassrooms.com\/fr\/courses\/6204541-initiez-vous-a-python-pour-lanalyse-de-donnees?status=published  \nhttps:\/\/python.developpez.com\/tutoriels\/apprendre-programmation-python\/les-bases\/?page=le-langage-python#LII-C-1-a  \n  \nPoints d\u00e9licats plus en d\u00e9tail :  \nhttp:\/\/math.mad.free.fr\/depot\/numpy\/base.html  \nhttps:\/\/zestedesavoir.com\/tutoriels\/582\/les-slices-en-python\/\n  \nAide m\u00e9moire Python :  \nhttp:\/\/www.utc.fr\/~jlaforet\/Suppl\/python-cheatsheets.pdf","885fd36e":"On a les op\u00e9rateurs bool\u00e9ens usuels :","f08732cb":"Les d\u00e9clarations de variables et le typage sont implicites en Python ...","d9d2a670":"**Attention** : l'affectation ne *copie pas* la liste, mais fait pointer la variable sur la m\u00eame liste :","677a0a33":"**reshape** permet de changer la forme d'un tableau, par exemple pour convertir un tableau simple en matrice :","83b90c9d":"On peut convertir une cha\u00eene en liste avec le mot cl\u00e9 **list** :","ec97a50e":"Remarque : la forme g\u00e9n\u00e9rale est **range(debut, fin, pas)**. Le pas peut \u00eatre n\u00e9gatif (mais pas nul)","41a8329e":"On peut extraire une \"tranche\" (*slice*) d'une liste :","d498a98a":"## Chaines de caract\u00e8res","cc6a3195":"Par exemple, on peut inverser l'ordre d'une liste :","e95b274e":"La structure alternative s'\u00e9crit **if condition : action1 else : action2**  \nLe **else** est facultatif"}}