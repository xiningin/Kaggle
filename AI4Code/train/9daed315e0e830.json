{"cell_type":{"360c991e":"code","829a6745":"code","84ffd060":"code","49078907":"code","2373ff90":"code","2a3d438c":"code","c4a693e1":"code","dfab8bd9":"code","6f048ef4":"code","be8ce1dd":"code","d85ab6f1":"code","b59ea5d0":"code","d1fb92e3":"code","b788f9d7":"code","5e3a0d5e":"code","59306e95":"code","f96366d8":"code","1a39501c":"code","b7622f0b":"code","a2338eed":"code","e5c296d6":"code","d84a7935":"code","477f3429":"code","68a6f630":"code","af449b8a":"code","6e6a1880":"code","34378dbe":"code","14050c1f":"code","79f61623":"code","2c2365c0":"code","949b3587":"code","4b5b4405":"code","70151101":"markdown","6169c111":"markdown","7cc81809":"markdown","18db0949":"markdown","a3a82618":"markdown","b436c4c8":"markdown","c2fb9053":"markdown","edd979d3":"markdown","3b2beeca":"markdown","16e4d424":"markdown","29760a51":"markdown","75259348":"markdown","9f6afc93":"markdown","d952ff2c":"markdown","6cf6b2a0":"markdown","631f30e2":"markdown","de173e18":"markdown","08e4ad56":"markdown","08304be8":"markdown","c8dd1178":"markdown","54aa8a69":"markdown","8e7fe634":"markdown","66802a4e":"markdown","8c442106":"markdown","c383c605":"markdown","7083ab1c":"markdown","b9f7cfbc":"markdown","1674a4f3":"markdown","e0a19bdc":"markdown","44490028":"markdown","3292b597":"markdown","cef3252e":"markdown","d79272ef":"markdown","ea41fb04":"markdown","36661828":"markdown","e17956ec":"markdown","6e3e6d98":"markdown","643b8da7":"markdown","ffba70a4":"markdown","7037595a":"markdown"},"source":{"360c991e":"import pandas as pd\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n%matplotlib inline","829a6745":"temp = pd.read_csv('..\/input\/GlobalLandTemperaturesByState.csv')","84ffd060":"print (temp.head())\nprint('')\nprint ('Dtypes')\nprint (temp.dtypes)\nprint('')\nprint ('Shape')\nprint (temp.shape)","49078907":"# Counts the number of null values in each column\ntemp.isnull().sum()","2373ff90":"# Creating a new column indicating if we have a null value in the Avg_temp column (1) or not (0)\ntemp['Have_temp_data'] = temp['AverageTemperature'].apply(lambda x: 1 if not pd.isnull(x) else 0)\ntemp.head()","2a3d438c":"# Verifying all null values have 0 \ntemp['Have_temp_data'].value_counts()","c4a693e1":"# Null values by country\ntemp['Have_temp_data'].groupby(temp['Country']).value_counts()","dfab8bd9":"# I want to rename the column names so they are more concise\ntemp.rename(columns={'dt':'Date', 'AverageTemperature':'Avg_temp', 'AverageTemperatureUncertainty':'Temp_confidence_interval'}, inplace=True)\ntemp.head()","6f048ef4":"# Convert the date column to datetime series\ntemp['Date'] = pd.to_datetime(temp['Date'])\ntemp.set_index('Date', inplace=True)\ntemp.index","be8ce1dd":"# I want to extract just the year from the date column and create it's own column.\ntemp['Year'] = temp.index.year\ntemp.head()","d85ab6f1":"# Reviewing if there's null values in the last years of the data grouped by Year\ntemp['Have_temp_data'].groupby(temp.index.year).value_counts().tail(45)","b59ea5d0":"# Statistical information by column\ntemp.describe()","d1fb92e3":"# Filtering by years 1970-2013 because these didn't have many null values\nrecent_temp = temp.loc['1970':'2013']\nrecent_temp.head()","b788f9d7":"#  Statistical information by country\nrecent_temp.groupby('Country').describe()","5e3a0d5e":"# Shows the average temperature by country in descending order\nrecent_temp[['Country','Avg_temp']].groupby(['Country']).mean().sort_values('Avg_temp',ascending=False)","59306e95":"recent_temp[['Avg_temp']].plot(kind='line',title='Temperature Changes from 1970-2013',figsize=(12,6))","f96366d8":"# Resampling annual averages \ntemp_resamp = recent_temp[['Avg_temp']].resample('A').mean()\n\n# Temperature graph \ntemp_resamp.plot(title='Temperature Changes from 1970-2013',figsize=(8,5))\nplt.ylabel('Temperature',fontsize=12)\nplt.xlabel('Year',fontsize=12)\nplt.legend()\n\nplt.tight_layout()","1a39501c":"# Dickey-Fuller test\nfrom statsmodels.tsa.stattools import adfuller\n\nprint ('Dickey-Fuller Test Results:')\ndftest = adfuller(temp_resamp.iloc[:,0].values, autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint (dfoutput)","b7622f0b":"# Decomposing the data\ntemp_decomp = seasonal_decompose(temp_resamp, freq=3)  \n\n# Extracting the components\ntrend = temp_decomp.trend\nseasonal = temp_decomp.seasonal\nresidual = temp_decomp.resid\n\n# Plotting the original time series\nplt.subplot(411)\nplt.plot(temp_resamp)\nplt.xlabel('Original')\nplt.figure(figsize=(6,4))\n\n# Plotting the trend component\nplt.subplot(412)\nplt.plot(trend)\nplt.xlabel('Trend')\nplt.figure(figsize=(6,4))\n\n# Plotting the seasonal component\nplt.subplot(413)\nplt.plot(seasonal)\nplt.xlabel('Seasonal')\nplt.figure(figsize=(6,4))\n\n# Plotting the residual component\nplt.subplot(414)\nplt.plot(residual)\nplt.xlabel('Residual')\nplt.figure(figsize=(6,4))\n\nplt.tight_layout()","a2338eed":"# Graphing just the trend line \ntrend.plot(title='Temperature Trend Line',figsize=(8,4)) \n\n# Graph labels\nplt.xlabel('Year',fontsize=12)\nplt.ylabel('Temperature',fontsize=12)\n\nplt.tight_layout()","e5c296d6":"# Rolling mean \ntemp_rol_mean = temp_resamp.rolling(window=3, center=True).mean()\n\n# Exponentially weighted mean \ntemp_ewm = temp_resamp.ewm(span=3).mean()\n\n# Rolling standard deviation \ntemp_rol_std = temp_resamp.rolling(window=3, center=True).std()\n\n# Creating subplots next to each other\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12,5))\n\n# Temperature graph with rolling mean and exponentially weighted mean\nax1.plot(temp_resamp,label='Original')\nax1.plot(temp_rol_mean,label='Rolling Mean')\nax1.plot(temp_ewm, label='Exponentially Weighted Mean')\nax1.set_title('Temperature Changes from 1970-2013',fontsize=14)\nax1.set_ylabel('Temperature',fontsize=12)\nax1.set_xlabel('Year',fontsize=12)\nax1.legend()\n\n# Temperature graph with rolling STD \nax2.plot(temp_rol_std,label='Rolling STD')\nax2.set_title('Temperature Changes from 1970-2013',fontsize=14)\nax2.set_ylabel('Temperature',fontsize=12)\nax2.set_xlabel('Year',fontsize=12)\nax2.legend()\n\nplt.tight_layout()\nplt.show()","d84a7935":"# Dickey-Fuller test \ntemp_rol_mean.dropna(inplace=True)\ntemp_ewm.dropna(inplace=True)\nprint ('Dickey-Fuller Test for the Rolling Mean:')\ndftest = adfuller(temp_rol_mean.iloc[:,0].values, autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint (dfoutput)\nprint ('')\nprint ('Dickey-Fuller Test for the Exponentially Weighted Mean:')\ndftest = adfuller(temp_ewm.iloc[:,0].values, autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint (dfoutput)","477f3429":"# Difference between the original and the rolling mean \ndiff_rol_mean = temp_resamp - temp_rol_mean\ndiff_rol_mean.dropna(inplace=True)\ndiff_rol_mean.head()","68a6f630":"# Difference between the original and the exponentially weighted mean\ndiff_ewm = temp_resamp - temp_ewm\ndiff_ewm.dropna(inplace=True)\ndiff_ewm.head()","af449b8a":"# Rolling mean of the difference\ntemp_rol_mean_diff = diff_rol_mean.rolling(window=3, center=True).mean()\n\n# Expotentially weighted mean of the difference\ntemp_ewm_diff = diff_ewm.ewm(span=3).mean()\n\n# Creating subplots next to each other\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10,4))\n\n# Difference graph with the rolling mean\nax1.plot(diff_rol_mean,label='Original')\nax1.plot(temp_rol_mean_diff,label='Rolling Mean')\nax1.set_title('Temperature Changes from 1970-2013',fontsize=14)\nax1.set_ylabel('Temperature',fontsize=12)\nax1.set_xlabel('Year',fontsize=12)\nax1.legend()\n\n# Difference graph with the exponentially weighted mean\nax2.plot(diff_ewm,label='Original')\nax2.plot(temp_ewm_diff,label='Exponentially Weighted Mean')\nax2.set_title('Temperature Changes from 1970-2013',fontsize=14)\nax2.set_ylabel('Temperature',fontsize=12)\nax2.set_xlabel('Year',fontsize=12)\nax2.legend()\n\nplt.tight_layout()","6e6a1880":"# Dickey-Fuller test \nprint ('Dickey-Fuller Test for the Difference between the Original and Rolling Mean:')\ndftest = adfuller(diff_rol_mean.iloc[:,0].values, autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint (dfoutput)\nprint ('')\nprint ('Dickey-Fuller Test for the Difference between the Original and Exponentially Weighted Mean:')\ndftest = adfuller(diff_ewm.iloc[:,0].values, autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint (dfoutput)","34378dbe":"# Shifting forward by 1 year\ntemp_shift1 = temp_resamp.shift(1)\ntemp_shift1.head()","14050c1f":"# Difference between the original and time series shifted by 1 year \nshift1_diff = temp_resamp - temp_shift1\nshift1_diff.dropna(inplace=True)\n\n# Rolling mean \ntemp_shift1_diff_rol_mean = shift1_diff.rolling(window=3, center=True).mean()\n\n# Exponentially weighted mean \ntemp_shift1_diff_ewm = shift1_diff.ewm(span=3).mean()\n\n# Rolling standard deviation \ntemp_shift1_diff_rol_std = shift1_diff.rolling(window=3, center=True).std()\n\n# Creating subplots next to each other\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12,5))\n\n# Temperature graph \nax1.plot(shift1_diff,label='Original')\nax1.plot(temp_shift1_diff_rol_mean,label='Rolling Mean')\nax1.plot(temp_shift1_diff_ewm,label='Exponentially Weighted Mean')\nax1.set_title('Shifted By 1 Year Temperature Changes from 1970-2013',fontsize=14)\nax1.set_ylabel('Temperature',fontsize=12)\nax1.set_xlabel('Year',fontsize=12)\nax1.legend()\n\n# Temperature Rolling STD graph\nax2.plot(temp_shift1_diff_rol_std)\nax2.set_title('Shifted By 1 Year Rolling Standard Deviation',fontsize=14)\nax2.set_ylabel('Temperature',fontsize=12)\nax2.set_xlabel('Year',fontsize=12)\n\nplt.tight_layout()\nplt.show()","79f61623":"# Dickey-Fuller test \nprint ('Dickey-Fuller Test for Difference between the Original and Shifted by 1 Year:')\ndftest = adfuller(shift1_diff.iloc[:,0].values, autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint (dfoutput)","2c2365c0":"# Drop N\/A values\nresidual.dropna(inplace=True)\n\n# Residuals rolling mean\nresid_rol_mean = residual.rolling(window=3).mean()\n\n# Residuals exponentially weighted mean\nresid_ewm = residual.ewm(span=3).mean()\n\n# Residuals rolling standard deviation \nresid_rol_std = residual.rolling(window=3, center=True).std()\n\n# Creating subplots next to each other\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12,5))\n\n# Temperature graph with residual rolling mean and exponentially weighted mean\nax1.plot(residual,label='Original')\nax1.plot(resid_rol_mean,label='Rolling Mean')\nax1.plot(resid_ewm, label='Exponentially Weighted Mean')\nax1.set_title('Residuals',fontsize=14)\nax1.set_ylabel('Temperature',fontsize=12)\nax1.set_xlabel('Year',fontsize=12)\nax1.legend()\n\n# Temperature graph with residual rolling STD \nax2.plot(resid_rol_std,label='Rolling STD')\nax2.set_title('Residuals Rolling STD',fontsize=14)\nax2.set_ylabel('Temperature',fontsize=12)\nax2.set_xlabel('Year',fontsize=12)\nax2.legend()\n\nplt.tight_layout()\nplt.show()","949b3587":"# Dickey-Fuller test \nprint ('Dickey-Fuller Test for the Residuals:')\ndftest = adfuller(residual.iloc[:,0].values, autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\nprint (dfoutput)","4b5b4405":"from statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom matplotlib import pyplot\n\n# Plotting the autocorrelation and partial autocorrelation graphs\npyplot.figure(figsize=(10,5))\npyplot.subplot(211)\nplot_acf(temp_resamp, ax=pyplot.gca())\npyplot.subplot(212)\nplot_pacf(temp_resamp, ax=pyplot.gca())\npyplot.show()","70151101":"# Global Temperature Time Series Data","6169c111":"We can see that the test statistic is less than the critical values, therefore we can reject the null hypothesis.","7cc81809":"This data contains average land temperature data by country and state measured monthly since 1750. I received this dataset from Kaggle.\nhttps:\/\/www.kaggle.com\/berkeleyearth\/climate-change-earth-surface-temperature-data\n\nIn this post, I will be carrying out some exploratory data analysis and exploring different ways to make a time series stationary.","18db0949":"A fourth way is to decompose the time series to extract just the residual component (and remove the trend and seasonality components). I had already decomposed the time series in step 3b, so I will graph just the residuals.","a3a82618":"Step 3d: SARIMA ","b436c4c8":"Step 3a: Resample the time series","c2fb9053":"The p parameter will be the first value on the Partial Autocorrelation graph that is signficantly different from the previous values. Here, p could be 28.\n\nThe q parameter is the largest lag on the Autocorrelation plot that is significantly differeent from the previous values. Here, q could be 0 as there are no signficant lags.\n\nNext, the d parameter will be the number of differences taken to make the time series stationary. For example, d could be 1 when using one of the transformations above.\n\nYou can then apply this logic to the seasonality parameters (P,D,Q)!","edd979d3":"Here I'll review how you can find the parameters for the Seasonal Autoregressive Integrated Moving Average (SARIMA) which forecasts a time series similarly to linear regression and has parameters (p,d,q) (P,D,Q). The first set of parameters (p,d,q) is applied to the non-seasonal portion of the time series while the second set (P,D,Q) is applied to the seasonal portion of the time series.","3b2beeca":"The test statistic is less than the critial value for both the rolling mean and exponentially weighted mean, indicating that we can reject the null hypothesis. We can be 99% confident that this data is stationary.","16e4d424":"Steps:\n    1. Structure the data\n    2. Visualize the data\n    3. Complete analysis of the data","29760a51":"Step 3: Check for null values","75259348":"The Test Statstic is greater than the critical value. Therefore, we have failed to reject the null hypothesis at this point. \n\nWe can visualize that the time series isn't stationary yet by separating the trend component.","9f6afc93":"Steps:\n    1. Import the dataset\n    2. Review what information is provided \n    3. Check for any null values\n    4. Clean the data ","d952ff2c":"Step 2: Visualize the time series","6cf6b2a0":"We can then use SARIMA to forecast the time series data.","631f30e2":"Step 3c: Transformation","de173e18":"To determine the p and q parameters, we can use autocorrelation function (ACF) and partial autocorrelation function (PACF).","08e4ad56":"# Preparing the Data","08304be8":"We can reject the null hypothesis because the test statistic is less than the critical value. We can be 99% confident that this data is stationary.","c8dd1178":"The Dickey-Fuller test determines how stationary a time series is. If trends affect the time series (i.e. the mean or variance is not constant), then it is not stationary. This test will show stationary with the Test Statistic less than the critical value.\n\nThe null hypothesis is that the time series is not stationary and is affected by trends.","54aa8a69":"A third way to remove the trend is by shifting values. ","8e7fe634":"We can use differencing to remove the moving average or exponentially weighted mean from the original time series. We can then drop any rows that are N\/A.","66802a4e":"Step 2: Review what information is in the dataset","8c442106":"Step 1: Import the data","c383c605":"# Conclusion","7083ab1c":"There are a few ways to use transformation to make the data stationary:\n    1. Moving average \n    2. Exponential smoothing \n    3. Shifting  \n    4. Discomposing the residuals","b9f7cfbc":"Here both test statistics are greater than the critical values, so we have failed to reject the null hypothesis.","1674a4f3":"The parameters are broken down as:    \n1. Autoregressive (p): looks at the past values. I.e., if the temperature increased over the past 3 years, it's most likely to increase next year as well.\n2. Integrated (d): looks at the difference between the past values and the current value. I.e., if the temperature differed little over the past 3 years, then it's most likely to be the same temperature next year.\n3. Moving average (q): uses a linear combination of errors in past values for the predicted error of the model (errors being the difference between the moving average and actual values). I.e., for q=5, x(t) is e(t-1)...e(t-5).","e0a19bdc":"Step 4: Cleaning the data","44490028":"The increasing trend line in the decomposition proves that this data currently isn't stationary. We want the trend line to be constant over time.","3292b597":"Here I'm going to review how to determine if a time seriees is stationary and if it isn't, then list a few ways to make the series stationary.\n\nSteps:\n\n    a) Resample the time series to create a more distinct line\n\n    b) Test stationary with the Dickey-Fuller Test \n\n    c) Transform the data to make it stationary, if needed \n\n    d) Review SARIMA with ACF and PACF","cef3252e":"It seems that most of the null values are not found towards the end of the time series data (except in 2013 where there are a handful). I'm going to analyze the data based on the years 1970-2013.","d79272ef":"Step 3: Complete analysis of the time series","ea41fb04":"Step 1: Structure the data","36661828":"We showed how to brielfy explore some temperature time series data and then broke down how we can identify if the series is stationary or not by using the Dickey-Fuller Test.","e17956ec":"Because there are many null values, I don't want to just delete them. Instead I'm going to create dummy variables that indicate if we have temperature data for that row or not.","6e3e6d98":"# Analyzing the Data","643b8da7":"Step 3b: Dickey-Fuller Test","ffba70a4":"I'm going to first compare the transformation using both the moving average (rolling mean) and exponential smoothing. The rolling mean will take a window of \"k\" values and average them. The exponentially weighted mean uses \"exponential decay\" which decreases the weight of the previous means over time. ","7037595a":"If a time series data is not stationary, then some ways we can make it stationary is with:\n    1. Moving average\n    2. Exponential smoothing\n    3. Shifting\n    4. Decomposing the residuals"}}