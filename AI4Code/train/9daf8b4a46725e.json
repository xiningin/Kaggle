{"cell_type":{"0b73228f":"code","ba95a665":"code","39249c64":"code","6cf797fb":"code","a9a62bdc":"code","fd9c1b8f":"code","c636eca9":"code","af1f5fc6":"code","f394a8f1":"code","bf2c09bc":"code","200106f3":"code","961e1aa4":"code","0be498b1":"code","91f965d6":"code","6ed2d0f5":"code","97998444":"code","6123ef24":"code","91d8a2f5":"code","73d30b4e":"code","85798935":"markdown","7d1a9b2f":"markdown","47302d77":"markdown","6707a839":"markdown","74eb8ff2":"markdown","40094f95":"markdown","922b099b":"markdown","99a519c5":"markdown","5d910f86":"markdown","c6ab8b5d":"markdown","d3891753":"markdown","8d6276af":"markdown","1d22686f":"markdown"},"source":{"0b73228f":"import pandas as pd\nfrom sklearn import preprocessing  \nfrom sklearn import metrics\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport matplotlib.pyplot as plt","ba95a665":"df = pd.read_csv('..\/input\/churn-risk-rate-hackerearth-ml\/train.csv')\ndf","39249c64":"df.info()","6cf797fb":"df = df.drop(['Name', 'referral_id'], axis=1)  # dropping unnecessary columns \ndf","a9a62bdc":"label_encoder = preprocessing.LabelEncoder()  # encoding data","fd9c1b8f":"a = df.columns\nfor i in a[:-1]:\n  df[i] = df[i].astype('|S')\n  df[i] = label_encoder.fit_transform(df[i])\ndf  ","c636eca9":"df['churn_risk_score'].isnull().any()  # checking for and removing records with null values","af1f5fc6":"df = df.dropna(axis = 0, how ='any')","f394a8f1":"df.isnull().any()","bf2c09bc":"df","200106f3":"# checking the distribution of outcomes\nsns.countplot(x = 'churn_risk_score', data = df)","961e1aa4":"df.columns","0be498b1":"# checking variance\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nvariables = df[['customer_id', 'age', 'gender', 'security_no', 'region_category',\n       'membership_category', 'joining_date', 'joined_through_referral',\n       'preferred_offer_types', 'medium_of_operation', 'internet_option',\n       'last_visit_time', 'days_since_last_login', 'avg_time_spent',\n       'avg_transaction_value', 'avg_frequency_login_days', 'points_in_wallet',\n       'used_special_discount', 'offer_application_preference',\n       'past_complaint', 'complaint_status', 'feedback', 'churn_risk_score']]\nvif = pd.DataFrame()\nvif['VIF'] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\nvif['Features'] = variables.columns","91f965d6":"vif","6ed2d0f5":"data = df.values\nX, y = data[:,:-1], data[:,-1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)  # splitting in the ratio 80:20","97998444":"clf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)","6123ef24":"pred = clf.predict(X_test)","91d8a2f5":"score = clf.score(X_test, y_test)\nscore","73d30b4e":"s = plt.figure(figsize=(20,10))\ntree.plot_tree(clf, max_depth=2, filled=True, fontsize=10)\nplt.title(\"Decision Tree for Customer Churn Data\", fontsize=30)\nplt.show() ","85798935":"# Churn Risk Score Prediction","7d1a9b2f":"### Checking Accuracy","47302d77":"### Visualizing the Decision Tree","6707a839":"### Predictions are 71% accurate.","74eb8ff2":"### Data Visualization","40094f95":"### Making Predictions","922b099b":"### Decision Tree Model ","99a519c5":"### Getting Data","5d910f86":"### Importing Libraries","c6ab8b5d":"### Checking Variance","d3891753":"### Splitting Data for Training and Testing","8d6276af":"### Data Preprocessing","1d22686f":"### VIF is less than 10 for all the attributes, hence, we can keep them all."}}