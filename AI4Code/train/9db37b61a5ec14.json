{"cell_type":{"bd379784":"code","fe6cfd6d":"code","39d17856":"code","88418e6a":"code","64812897":"code","e6f11cbb":"code","f0c48ae2":"code","2b1960e3":"code","6b537561":"code","43d8538f":"code","71ce8e83":"code","cf40301e":"code","ca2e5428":"code","01abd128":"code","8a317820":"code","78595187":"code","acc06f18":"markdown","f182bf65":"markdown","075b6893":"markdown","992fadbe":"markdown","4f94b78e":"markdown","12d55cac":"markdown","1607afd7":"markdown","3b721f1f":"markdown","766a95da":"markdown","844efc00":"markdown","ec945538":"markdown","7d72bf91":"markdown"},"source":{"bd379784":"# Import necessary packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', None)","fe6cfd6d":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n","39d17856":"# Read the data\nsample_sub = pd.read_csv(\"..\/input\/sample_submission.csv\", index_col='Id')\ntrain_data = pd.read_csv('..\/input\/train.csv', index_col='Id')\nX_test = pd.read_csv('..\/input\/test.csv', index_col='Id')\nX = train_data.copy()","88418e6a":"X.head()","64812897":"X.info()","e6f11cbb":"fig, ax = plt.subplots(1, 2, figsize=(12,4))\nsns.distplot(X.SalePrice, ax=ax[0])\nsns.distplot(np.log(X.SalePrice), ax=ax[1])\nplt.tight_layout()\nplt.show()","f0c48ae2":"# Perform log-transform on target data\nX['SalePrice'] = np.log(X['SalePrice'])","2b1960e3":"# Remove rows with missing target, separate target from predictors\ny = X.SalePrice\nX.drop(['SalePrice'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                      random_state=0)\n\n# Select categorical columns with relatively low cardinality\ncategorical_cols = [cname for cname in X.columns if\n                    X[cname].nunique() < 10 and \n                    X[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X.columns if \n                X[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train[my_cols].copy()\nX_valid = X_valid[my_cols].copy()\nX_test = X_test[my_cols].copy()","6b537561":"#X_train.head()\n#X_test.head()\n#X_valid.head()","43d8538f":"# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='median')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","71ce8e83":"# Define model\nxgb_model = XGBRegressor(max_depth = 2, n_estimators=6000, learning_rate=0.024,random_state=0) \n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline_xgb = Pipeline(steps=[('preprocessor', preprocessor),\n                            ('model', xgb_model)\n                             ])\n\n# Multiply by -1 since sklearn calculates *negative* MAE\nscores = -1 * cross_val_score(my_pipeline_xgb, X, y,\n                              cv=5,scoring='neg_mean_absolute_error')\n\nprint(\"MAE score:\\n\", scores)\nprint(\"MAE mean: {}\".format(scores.mean()))","cf40301e":"# Define model\nrf_model = RandomForestRegressor(n_estimators=500, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline_rf = Pipeline(steps=[('preprocessor', preprocessor),\n                            ('model', rf_model)\n                             ])\n\n# Multiply by -1 since sklearn calculates *negative* MAE\nscores = -1 * cross_val_score(my_pipeline_rf, X, y,\n                              cv=5,\n                              scoring='neg_mean_absolute_error')\n\nprint(\"MAE score:\\n\", scores)\nprint(\"MAE mean: {}\".format(scores.mean()))","ca2e5428":"# Fit model\nmy_pipeline_xgb.fit(X_train, y_train)\n\n# Get predictions\npreds = my_pipeline_xgb.predict(X_valid)\n\n# Evaluate the model\nmae_score = mean_absolute_error(y_valid, preds)\nprint('MAE:', mae_score)","01abd128":"# Preprocessing of test data, fit model\npreds_test = my_pipeline_xgb.predict(X_test)","8a317820":"# target is SalePrice_log, we need to inverse-transform to obtain SalePrice\ndef inv_y(transformed_y):\n    return np.exp(transformed_y)","78595187":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': inv_y(preds_test)})\noutput.to_csv('submission.csv', index=False)","acc06f18":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161289) to chat with other Learners.*","f182bf65":"The end. [Back to top](#top)","075b6893":"## Setup","992fadbe":"<a id=\"data-prep\"><\/a>\n## 1. Data Preparation","4f94b78e":"# Housing Prices Prediction (Competition Submission) <a id=\"top\"><\/a>\n\n<img src=\"https:\/\/images.unsplash.com\/photo-1560520653-9e0e4c89eb11?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=966&q=80\" alt=\"Housing dataset image\" width=\"80%\"\/>","12d55cac":"## 2. Exploratory Data Analysis <a id=\"eda\"><\/a>\n\nSkewed data affects the prediction accuracy of regression models. So, we should try minimising any skewness in our dataset. The target data (SalePrice) is skewed to the right, so **log-transform** is used to normalize it. ","1607afd7":"## 4. Data Modelling <a id=\"model\"><\/a>","3b721f1f":"# Table of Contents\n\n1. **[Data Preparation](#data-prep)**\n2. **[Exploratory Data Analysis](#eda)**\n3. **[Data Preprocessing](#preprocess)**\n4. **[Data Modelling](#model)**\n5. **[Generate Test Prediction](#test)**\n","766a95da":"## 5. Generate Test Prediction <a id=\"test\"><\/a>","844efc00":"**XGBRegressor** delivers the lowest mean absolute error, so we are going to use that model.","ec945538":"## 3. Data Preprocessing <a id=\"preprocess\"><\/a>","7d72bf91":"### Competition Description\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.\n\n### Practice Skills\n* Creative feature engineering \n* Advanced regression techniques like random forest and gradient boosting\n"}}