{"cell_type":{"4fc92d02":"code","7d05352a":"code","bf937e4b":"code","db55f534":"code","bc8a3e4d":"code","cc970e50":"code","df73d038":"markdown","3641613d":"markdown","4cc45f8e":"markdown","909fd27d":"markdown","091fd1d0":"markdown","35aff3c7":"markdown","5e96e7f0":"markdown"},"source":{"4fc92d02":"%matplotlib inline\nfrom functools import reduce\nimport pandas as pd\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom IPython.core.display import display, HTML","7d05352a":"task_topics = {\n    'theraputics': ['Effectiveness of drugs being developed and tried to treat COVID-19 patients',\n                    'Clinical and bench trials to investigate less common viral inhibitors against COVID-19 such as naproxen, clarithromycin, and minocyclinethat that may exert effects on viral replication.',\n                    'Capabilities to discover a therapeutic (not vaccine) for the disease, and clinical effectiveness studies to discover therapeutics, to include antiviral agents.',\n                    'Efforts to develop prophylaxis clinical studies and prioritize in healthcare workers'\n                   ],\n    'vaccines': ['Methods evaluating potential complication of Antibody-Dependent Enhancement (ADE) in vaccine recipients.',\n                 'Efforts targeted at a universal coronavirus vaccine.',\n                 'Approaches to evaluate risk for enhanced disease after vaccination',\n                 'Assays to evaluate vaccine immune response and process development for vaccines, alongside suitable animal models [in conjunction with therapeutics]'\n                 ],\n    'animal_models' : ['Exploration of use of best animal models and their predictive value for a human vaccine.',\n                        'Efforts to develop animal models and standardize challenge studies'\n                      ]\n    }","bf937e4b":"N_TITLES = 10  #Number of top titles to print for each task topic\nFILTER_WORDS = ['sars','mers','influenza','respiratory','corona','cov'] #keyword strings used to filter titles","db55f534":"\n\nmetadata = pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/all_sources_metadata_2020-03-13.csv')\nprint(f'meta data shape: {metadata.shape}')\nhas_title = metadata.title.apply(lambda x: str(x)!='nan')\nmetadata = metadata.iloc[has_title.values,:]\nprint(f'meta data shape after dropping docs without titles: {metadata.shape}')\nmetadata.head(n=2).transpose()","bc8a3e4d":"def has_word(title,filter_words):\n    def has_this_word(has_one,word):\n        if has_one:\n            return True\n        else:\n            if word in title:\n                return True\n            else:\n                return False\n    return reduce(has_this_word,filter_words,False)\n\n# filter to titles with relevant words\n\nhave_filter_word = metadata.title.apply(lambda x: has_word(x,FILTER_WORDS))  \nmetadata = metadata[have_filter_word]\n\n# Convert metadata titles to TfIdf matrix\ntfidf = TfidfVectorizer(stop_words='english',max_df = .75,min_df=2)\ntitles_mat = tfidf.fit_transform(metadata.title)\ndisplay(f'TfIdf matrix shape: {titles_mat.shape}')","cc970e50":"\nfor topic,topic_text in task_topics.items():\n    display(HTML(f'Topic:  {topic}'))\n    if isinstance(task_topics[topic], str): #in case of topic of only one str\n        task_topics[topic] = np.array([task_topics[topic]])\n    tasks_mat = tfidf.transform(task_topics[topic])\n    task_rank = pd.DataFrame(np.mean(np.dot(titles_mat,np.transpose(tasks_mat)),axis=1),columns=['Rank'])\n    top_tasks = task_rank.sort_values('Rank',ascending=False)[0:N_TITLES]\n    #is_top_task = [True if x in top_tasks.index else False for x in metadata.index]\n    df_s = metadata.iloc[top_tasks.index,:][['title','abstract','doi']]\n    #convert to html\n    df_s['title'] = '<span style=\"float: left; width: 100%; text-align: left;\">' + df_s['title'] + '<\/span>'\n    df_s['abstract'] = '<span style=\"float: left; width: 80%; text-align: left;\">' + df_s['abstract'] + '<\/span>'\n    df_s['doi'] = '<a href = \"https:\/\/doi.org' + df_s['doi'] + '\" target=\"_blank\">link<\/a>'\n    result = HTML(df_s.to_html(escape=False))\n    display(result)","df73d038":"Red the data set","3641613d":"### Task List\n\nFor 'What do we know about Theraputics And Vaccines', the tasks were grouped into three topics by inspection","4cc45f8e":"## Searching For Papers Matching Tasks\n\nThis notebook implements a simple TfIdf model to find papers which mostly closely match task specifications.\nThis implemented is for the category 'What do we know about Theraputics And Vaccines'","909fd27d":"Find papers most closely matching each topic based on cosine distance","091fd1d0":"### Parameters\n\nTitles are pre-filtered to find papers relevant to coronavirus","35aff3c7":"### Conclusions\n\nThis seems to work ok even given the simplicity. Ideas for improvement include:\n\n* searching abstracts instead of titles\n* finding topics in the abstacts and clustering based on topic similarity\n* scoring by a method other than or in addition to cosine similarity.\n\nIdeas are welcome.\n\n","5e96e7f0":"Create the TfIdf model"}}