{"cell_type":{"065cf32e":"code","de188660":"code","014d7c8d":"code","64d752a8":"code","2e3f442b":"code","c3ba1108":"code","a993013f":"code","84ace6dc":"code","cdc02364":"code","6e9f0637":"code","da4b937a":"code","301c17c8":"code","86bade96":"code","e91e54c9":"code","dc226d75":"code","80347488":"code","1eb33bf1":"code","d1a76416":"code","ce631bf3":"code","527cc6ac":"code","ffeae332":"code","c123dad9":"code","8d32d5f1":"code","4eda9c88":"code","d1effdbf":"code","3c4642b2":"code","db41b356":"markdown","0bd64476":"markdown","0c589435":"markdown","b7cc40cf":"markdown","edddc938":"markdown"},"source":{"065cf32e":"import pandas as pd\nimport numpy as np\nfrom pathlib import Path\nfrom PIL import Image\nimport subprocess\n\nimport plotly.express as px\nimport random\nimport matplotlib.pyplot as plt","de188660":"# load the train file\ntrain = pd.read_csv(\"..\/input\/shopee-product-matching\/train.csv\")\ntrain.head()","014d7c8d":"# adapted from https:\/\/www.kaggle.com\/isaienkov\/shopee-data-understanding-and-analysis","64d752a8":"def plot_images(images_number):\n    plot_list = train['image'].sample(n=images_number).tolist()\n    size = np.sqrt(images_number)\n    if int(size)*int(size) < images_number:\n        size = int(size) + 1\n        \n    plt.figure(figsize=(20, 20))\n    \n    ind=0\n    for image_id in plot_list:\n        plt.subplot(size, size, ind + 1)\n        image = cv2.imread(str(Path('..\/input\/shopee-product-matching\/train_images\/', image_id)))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        plt.imshow(image)\n        plt.title(image_id, fontsize=12)\n        plt.axis(\"off\")\n        ind+=1\n    plt.show()","2e3f442b":"plot_images(16)","c3ba1108":"# number of unique label groups\nn_labels = len(train[\"label_group\"].unique())\nn_ex = len(train)\nprint(f'Num of training examples: {n_ex}\\nNum of labels: {n_labels}')","a993013f":"# plot histogram\ndf_cnt = train[\"label_group\"].value_counts().reset_index()\ndf_cnt.columns = [\"group_name\", \"num_of_objects\"]\ndf_cnt[\"group_name\"] = df_cnt[\"group_name\"].astype(str)\n\nfig = px.histogram(df_cnt, x=\"num_of_objects\", nbins=10,log_y=True)\nfig.show()","84ace6dc":"# read the descriptions for some groups\ndef plot_groups(list_large_groups, images_number=16):\n    group_id = random.sample(list_large_groups, 1)[0]\n    plot_list = train[train[\"label_group\"]==group_id][['image', 'title']].sample(n=images_number)\n    size = np.sqrt(images_number)\n    if int(size)*int(size) < images_number:\n        size = int(size) + 1\n        \n    plt.figure(figsize=(20, 20))\n    \n    ind=0\n    for _, item in plot_list.iterrows():\n        plt.subplot(size, size, ind + 1)\n        image = cv2.imread(str(Path('..\/input\/shopee-product-matching\/train_images\/', item[\"image\"])))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        plt.imshow(image)\n        plt.title(item[\"title\"], fontsize=12)\n        plt.axis(\"off\")\n        ind+=1\n    plt.show()","cdc02364":"df_g =  train[\"label_group\"].value_counts().reset_index()\nlist_large_groups = list(df_g[df_g[\"label_group\"]>20][\"index\"])\n# list_large_groups[:10]","6e9f0637":"plot_groups(list_large_groups, images_number=16)","da4b937a":"!wget -O \/tmp\/lid.176.bin https:\/\/dl.fbaipublicfiles.com\/fasttext\/supervised-models\/lid.176.bin","301c17c8":"import fasttext\nfrom pycountry import languages\n\nPRETRAINED_MODEL_PATH = '\/tmp\/lid.176.bin'\nmodel = fasttext.load_model(PRETRAINED_MODEL_PATH)","86bade96":"sentences = train['title'].tolist()\npredictions = model.predict(sentences)","e91e54c9":"language_code = [x[0].split(\"__label__\")[1] for x,y in zip(predictions[0], predictions[1]) if y[0]>0.5]\nlanguage_name = [languages.get(alpha_2=x) for x in language_code]\nlanguage_name = [x.name if x else \"none\" for x in language_name]","dc226d75":"from collections import Counter\ncnt_lang = Counter(language_name)\ncnt_lang.most_common()\n","80347488":"# I could cross verify the model prdictions if I knew any other language from this list except English.\n# I have seen some titles in English. For other languages, I will trust that the model is right","1eb33bf1":"!pip install tensorflow==1.15\n# Install bert-as-service\n!pip install bert-serving-server==1.10.0\n!pip install bert-serving-client==1.10.0\n# Download and unzip the pre-trained model\n!wget http:\/\/storage.googleapis.com\/bert_models\/2018_10_18\/uncased_L-12_H-768_A-12.zip\n!unzip uncased_L-12_H-768_A-12.zip","d1a76416":"# Start the BERT server\nbert_command = 'bert-serving-start -model_dir \/kaggle\/working\/uncased_L-12_H-768_A-12'\nprocess = subprocess.Popen(bert_command.split(), stdout=subprocess.PIPE)\n# Start the BERT client\nfrom bert_serving.client import BertClient\nbc = BertClient()","ce631bf3":"# read the test file\ndf_test = pd.read_csv(\"..\/input\/shopee-product-matching\/test.csv\")\ndf_test.head()","527cc6ac":"len(df_test)","ffeae332":"titles = df_test['title'].tolist()\nembeddings = bc.encode(titles)","c123dad9":"## Clustering with DBSCAN\nfrom sklearn.cluster import DBSCAN","8d32d5f1":"clustering = DBSCAN(eps=3, min_samples=2).fit_predict(embeddings)","4eda9c88":"def cluster_label_to_submission(labels, df_test):\n    submission = []\n    match_id_dict = {}\n    for idx, label in enumerate(labels):\n        posting_id = df_test.loc[idx, \"posting_id\"]\n        if label == -1:\n            match_id = posting_id\n        else:\n            if label in match_id_dict:\n                match_id = match_id_dict[label]\n            else:\n                match_idx = [idx for idx, l in enumerate(labels) if l==label]\n                match_id = \" \".join(df_text.loc[match_idx, \"posting_id\"].to_list())\n                match_id_dict[label] = match_id\n        submission.append([posting_id, match_id])\n    df = pd.DataFrame(submission, columns = [\"posting_id\", \"matches\"])\n    return df","d1effdbf":"df_submission = cluster_label_to_submission(clustering, df_test)","3c4642b2":"df_submission.to_csv(\".\/submission.csv\")","db41b356":"### Follow up:\n1. I guess it will be okay to use English pretrained model. Even if the title is not in English, some of the product names could be in English.\n2. Other option could be character based NLP model.\n","0bd64476":"### Baseline models using titles\n\nUse BERT to get sentence embeddings, and will do clustering\n\nAdopting from this [notebook](https:\/\/www.kaggle.com\/brendanhasz\/bert-in-kernels)\n","0c589435":"## Identifying the language.\n\nLet's start with something easy :)\nI have refered tothis blog: [link](https:\/\/amitness.com\/2019\/07\/identify-text-language-python\/)","b7cc40cf":"## Follow up:\n### Image model\n1. Should be number invariant\n2. Backgroud invariant\n3. Some photos could have face of models\n4. Model can perform better if it can identify text from the images\n5. Scale invariant\n\n### Text model\n1. Identify the language","edddc938":"I am a newbie to Image Classification with ML. This analysis will help me figure out which model architecture should be picked."}}