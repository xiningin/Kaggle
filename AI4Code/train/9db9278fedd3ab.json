{"cell_type":{"c06aee29":"code","58269a32":"code","327e22dd":"code","7438038c":"code","946de119":"code","34732649":"code","37c96303":"code","429f9c09":"code","b4af1ca4":"code","3236be58":"code","6c84f8bb":"code","9038810d":"code","3f383f57":"code","b10ba0a7":"code","2b58b0e1":"code","9ab5735a":"code","1593aa8f":"code","873f33e6":"code","87a5cbeb":"code","f9be9f31":"code","26692474":"code","e38cc1ce":"markdown","c6b3285a":"markdown","ef8494c9":"markdown","17dfb7a4":"markdown","f5624b8b":"markdown","562a0fe6":"markdown","bfc7132b":"markdown","5193cdd9":"markdown","6d2f56b4":"markdown","8c1107ce":"markdown","34acfa69":"markdown","cba9904a":"markdown","a866ff86":"markdown","7e7618db":"markdown","0f63a03f":"markdown","e08b9248":"markdown","6cc5fbaa":"markdown","11d3cf33":"markdown","31d13470":"markdown"},"source":{"c06aee29":"!pip install nb_black -q","58269a32":"%load_ext nb_black","327e22dd":"import numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport os\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\n\ndata = pd.read_csv(\"\/kaggle\/input\/churn-modeling-dataset\/Churn_Modelling.csv\").drop(\n    [\"RowNumber\", \"CustomerId\", \"Surname\"], axis=1\n)\ndata.head()","7438038c":"from sklearn.preprocessing import OneHotEncoder, MinMaxScaler, LabelEncoder\n\nenc = OneHotEncoder(handle_unknown=\"ignore\")\nminmax_scaler = MinMaxScaler()\nlabel_encoder = LabelEncoder()\n\nX = np.concatenate(\n    (\n        ## OneHotEncoder\n        enc.fit_transform(data[[\"Geography\"]]).toarray(),\n        ## Stander Scaler\n        minmax_scaler.fit_transform(\n            data[\n                [\n                    \"CreditScore\",\n                    \"Age\",\n                    \"Tenure\",\n                    \"Balance\",\n                    \"NumOfProducts\",\n                    \"EstimatedSalary\",\n                ]\n            ]\n        ),\n        ## LabelEncoder\n        label_encoder.fit_transform(data[[\"Gender\"]]).reshape(-1, 1),\n        ## No formatation\n        data[[\"HasCrCard\", \"IsActiveMember\"]].values,\n    ),\n    axis=1,\n)\n\ny = data.Exited.values\nX.shape\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.05, random_state=42, stratify=y\n)","946de119":"columns = (\n    [el for el in enc.categories_[0]]\n    + [\"CreditScore\", \"Age\", \"Tenure\", \"Balance\", \"NumOfProducts\", \"EstimatedSalary\",]\n    + [\"Gender\"]\n    + [\"HasCrCard\", \"IsActiveMember\"]\n    + [\"Exited\"]\n)","34732649":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ntable = pd.DataFrame(np.concatenate([X, y.reshape(-1, 1)], axis=1))\ntable.columns = columns\ntable = table.corr()\nwith sns.axes_style(\"white\"):\n    mask = np.zeros_like(table)\n    mask[np.triu_indices_from(mask)] = True\n    plt.figure(figsize=(10, 10))\n    sns.heatmap(\n        round(table, 2),\n        cmap=\"Reds\",\n        mask=mask,\n        vmax=table.max().max(),\n        vmin=table.min().min(),\n        linewidths=0.5,\n        annot=True,\n        annot_kws={\"size\": 12},\n    ).set_title(\"Correlation Matrix App behavior dataset\")\n\ncolumns.remove(\"Exited\")","37c96303":"from sklearn.ensemble import RandomForestClassifier\n\n\nmodel_rfc = RandomForestClassifier()\nmodel_rfc.fit(X_train, y_train)","429f9c09":"sample = pd.DataFrame(X_test[0]).T\nsample.columns = columns\nsample","b4af1ca4":"import shap\n\nshap.initjs()  # Just to create better graphs =D\nexplainer = shap.TreeExplainer(model_rfc)","3236be58":"prediction = model_rfc.predict_proba(sample)\nprint(\"Direct print:\", prediction)\nprint(\n    \"Probability to be class 0:\",\n    prediction[0][0],\n    \"\\nProbability to be class 1:\",\n    prediction[0][1],\n)","6c84f8bb":"print(explainer.expected_value)","9038810d":"print(\"How is the target balance?\", y_train.mean())","3f383f57":"shap_values = explainer.shap_values(sample.loc[0])\nshap_values","b10ba0a7":"pd.DataFrame(shap_values, columns=columns)","2b58b0e1":"print(\"Direct prediction:\", prediction)\naux = shap_values[0].sum() + explainer.expected_value[0]\nprint(\"Sum of Baseline + Feature Contribuitions:\", aux)","9ab5735a":"shap.force_plot(explainer.expected_value[0], shap_values[0], sample)","1593aa8f":"shap.force_plot(explainer.expected_value[1], shap_values[1], sample)","873f33e6":"import shap\nimport pandas as pd\nimport numpy as np\n\n\n# Train your shap to understand your model\ndef explain_train(model):\n    return shap.TreeExplainer(model)\n\n\n# Here you pass the return of the last function and also the dataframe with the columns model\ndef explain_this(explainer, sample):\n    columns = sample.columns\n    shap_values = explainer.shap_values(sample.iloc[0])\n    aux = pd.DataFrame(shap_values, columns=columns)\n    aux[\"_BASELINE\"] = explainer.expected_value\n    aux[\"_CLASSES\"] = explainer.expected_value\n    return aux","87a5cbeb":"sample","f9be9f31":"explainer = explain_train(model_rfc)","26692474":"shap_values = explain_this(explainer, sample)\nshap_values","e38cc1ce":"#### Probability to be class 1","c6b3285a":"### Explainer, who should explain what happens here.\nTreeExplainer recevies your model then start to explain how works your model. There are similars Explainers...\n- [TreeExplainer](https:\/\/shap.readthedocs.io\/en\/latest\/generated\/shap.TreeExplainer.html#shap.TreeExplainer) -> Uses Tree SHAP algorithms to explain the output of ensemble tree models.\n- [Kernel Explainer](https:\/\/shap.readthedocs.io\/en\/latest\/generated\/shap.KernelExplainer.html#shap.KernelExplainer) -> Uses the Kernel SHAP method to explain the output of any function.\n- [Deep Explainer](https:\/\/shap.readthedocs.io\/en\/latest\/generated\/shap.DeepExplainer.html#shap.DeepExplainer) -> Meant to approximate SHAP values for deep learning models.\n- [Gradient Explainer](https:\/\/shap.readthedocs.io\/en\/latest\/generated\/shap.GradientExplainer.html#shap.GradientExplainer) -> Explains a model using expected gradients (an extension of integrated gradients).\n- [Linear Explainer](https:\/\/shap.readthedocs.io\/en\/latest\/generated\/shap.LinearExplainer.html#shap.LinearExplainer) -> Computes SHAP values for a linear model, optionally accounting for inter-feature correlations.\n- [Partition Explainer](https:\/\/shap.readthedocs.io\/en\/latest\/generated\/shap.PartitionExplainer.html#shap.PartitionExplainer) -> Uses the Partition SHAP method to explain the output of any function.","ef8494c9":"## I wanna know about the sample...\nNow let just se how we can 'understand' a prediction of a sample","17dfb7a4":"## Data formatation\n\n- StandardScaler -> Standardize features by removing the mean and scaling to unit variance The standard score of a sample x is calculated as: z = (x - u) \/ s.\n\n- LabelEncoder -> Encode target labels with value between 0 and n_classes-1.\n\n- OneHotEncoder -> Encode categorical features as a one-hot numeric array.\n\n\nThe data transformation is not my focus now so I just got the work that I did in this [notebook](https:\/\/www.kaggle.com\/mcarujo\/churn-prediction-ann-over-under-sampling) to be use with SHAP.","f5624b8b":"For me 'explainer' is a variable which is able to explain a prediction, in an informal way, is just that. \n\nJust to have in mind the model prediction on the next cell.","562a0fe6":"### Plot possibilities\n\n#### Probability to be class 0\n","bfc7132b":"Just using the training dataset to fit because I would like to see how the SHAPE can explain a prediction of a data which never was seen before.\n\n# SHAP\n\nHAP (SHapley Additive exPlanations) is a game theoretic approach to explain the output of any machine learning model. It connects optimal credit allocation with local explanations using the classic Shapley values from game theory and their related extensions (see papers for details and citations).\n\n[Docs here.](https:\/\/shap.readthedocs.io\/en\/latest\/examples.html#kernel-explainer)\n\n\nJust taking one sample of our test dataset to be predicted and explained.\n","5193cdd9":"Geting the name of our new columns after transformed...","6d2f56b4":"# Importing dataset and Model to use SHAP library.\n\nImporting the dataset 'churn modeling' to try explain what can help or not.\n\n#### Data porfile\n- There is 10 columns;\n- No missing values;\n- Exited column is the target;\n\n#### Columns meaning\n- CreditScore: Customer score in financial context;\n- Geography: Represets the customer contry;\n- Gender: Just customer's sex;\n- Age: Just Age;\n- Tenure: How much time as customer;\n- Balance: How much money in the bank;\n- NumOfProducts: How much products the customer uses;\n- HasCrCard: Does have the customer a credit card?\n- IsActiveMember: Is the customer an active member?\n- EstimetedSalary: How much is the customer salary?\n- Exited: Client churn flag","8c1107ce":"Going to the [documentations](https:\/\/github.com\/slundberg\/shap) you can see so many types of graphs that you can use and explore to help you in your work. \n\nI strongly recommend you go there and check the options.","34acfa69":"The expected_value is an array with 2 floats: where the size of the array means our classes 0 and 1 (binary) and the float number itself means the probability of class N.\n#### JUST A OPINION\n> In my point of view, the baseline for the SHAP is strongly influenced by the bias in your model. Carujo.","cba9904a":"## RandomForestClassifier\n\nIn my last notebook used an ANN, however, get a simpler model is good in this case. Random Forest, for example, is simpler than ANN and also faster. :)","a866ff86":"## Correlation Matrix\nLooking at the correlation matrix is not so easy to how the impact of the features in the target variable, however, we can see a few of them.\n\nGermany is a country where people like to churn in this dataset.\n\n'Age' and 'Exited' have a relationship.\n\n'Balance' has a relation with 'Germany' then because this with 'Exited'.\n\n'France' and 'EstimatedSalary' have a relation with 'Exited' too.","7e7618db":"I mean in a familiar way to understand....","0f63a03f":"### Think about to put in production\n\nWhen we train our model we also can train the SHAP to always be ready to exaplain as you need predict.","e08b9248":"#### Just to image how are Model predict our sample","6cc5fbaa":"## Motivation\n\n\"Explainable AI (XAI) refers to methods and techniques in the application of artificial intelligence technology (AI) such that the results of the solution can be understood by humans.\" \n\nSource - [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Explainable_artificial_intelligence)\n\nI discovery this lib called [SHAP](https:\/\/github.com\/slundberg\/shap) that can help you understand how a prediction is made.\n\nThis notebook book is just an example of \"how to use\" very similar than the documentations if you prefer you just can go there and see by your self.","11d3cf33":"### BaseLine + Contribuitions = Probability Predicted","31d13470":"SHAP start the analisys from a 'baseline' in terms of class prediction.\n\nexpected_value return our baselines and from there we see the impact of our features.\n> This is the reference value that the feature contributions start from. For SHAP values it should\n> be the value of explainer.expected_value. \n> \n[Docs here.](https:\/\/github.com\/slundberg\/shap\/blob\/06c9d18f3dd014e9ed037a084f48bfaf1bc8f75a\/shap\/plots\/force.py#L31)"}}