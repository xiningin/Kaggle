{"cell_type":{"b7eb0fcf":"code","5afa871f":"code","0588b6e7":"code","08dc99f5":"code","a4c3f565":"code","c268cb9d":"code","0b5beae1":"code","b82d8ec5":"code","af08a50a":"code","e9d4e3a2":"code","de894073":"code","b45e2268":"code","25312d62":"code","58e56b6e":"code","4eabb76c":"code","7a182bb9":"code","89188866":"markdown","c91af654":"markdown","d382ab69":"markdown"},"source":{"b7eb0fcf":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom keras import Sequential\nfrom keras.layers import Dense","5afa871f":"data = pd.read_csv('..\/input\/gender-classification-dataset\/gender_classification_v7.csv')","0588b6e7":"data.head()","08dc99f5":"data.info()","a4c3f565":"data['gender'] = pd.get_dummies(data['gender'])","c268cb9d":"X = data.drop('gender', axis=1)\ny = data['gender']","0b5beae1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1) ","b82d8ec5":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test  = scaler.transform(X_test)","af08a50a":"y_train = y_train.to_numpy()\ny_test  = y_test.to_numpy() ","e9d4e3a2":"model = Sequential()\nmodel.add(Dense(7, activation='relu', input_dim=7))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.summary()","de894073":"model.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","b45e2268":"history = model.fit(X_train, y_train, batch_size=5, validation_data=(X_test, y_test), epochs=10, verbose=1)","25312d62":"def learning_curve(history, epoch):\n  epoch_range = range(1, epoch+1)\n  plt.plot(epoch_range, history.history['accuracy'])\n  plt.plot(epoch_range, history.history['val_accuracy'])\n  plt.title('Model Accuracy')\n  plt.ylabel('Accuracy')\n  plt.xlabel('Epochs')\n  plt.legend(['Train', 'Val'], loc='upper left')\n  plt.show()\n\n  plt.plot(epoch_range, history.history['loss'])\n  plt.plot(epoch_range, history.history['val_loss'])\n  plt.title('Model Loss')\n  plt.ylabel('loss')\n  plt.xlabel('Epochs')\n  plt.legend(['Train', 'Val'], loc='upper left')\n  plt.show()","58e56b6e":"learning_curve(history, 10)","4eabb76c":"pred = model.predict(X_test)","7a182bb9":"for i in range(10):\n    print('Actual result: ', y_test[i])\n    print('Predicted result: ', pred[i])\n    print()","89188866":"## Creating ANN ","c91af654":"### Converting categorical data to numerical","d382ab69":"#### Scaling data before passing to nural network"}}