{"cell_type":{"f21b1ab3":"code","76242106":"code","631b1b02":"code","3e343f17":"code","c617a868":"code","e596c9fe":"code","2194a00a":"code","d19c97fb":"code","8d51dda0":"code","72e15108":"code","3b94f411":"code","759f8c02":"code","f2141422":"code","be0e6c60":"code","10ec0485":"markdown","26c5bd04":"markdown","3bbd7718":"markdown"},"source":{"f21b1ab3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76242106":"data = pd.read_csv('..\/input\/covid-19-and-government-responses\/vaccination policy.csv', encoding='utf8')\ndata.tail()","631b1b02":"data.isnull().sum()","3e343f17":"# Lets first handle numerical features with nan value\nnumerical_nan = [feature for feature in data.columns if data[feature].isna().sum()>1 and data[feature].dtypes!='O']\nnumerical_nan","c617a868":"data[numerical_nan].isna().sum()","e596c9fe":"## Replacing the numerical Missing Values\n\nfor feature in numerical_nan:\n    ## We will replace by using median since there are outliers\n    median_value=data[feature].median()\n    \n    data[feature].fillna(median_value,inplace=True)\n    \ndata[numerical_nan].isnull().sum()","2194a00a":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in data.columns:\n    if data[c].dtype=='float16' or  data[c].dtype=='float32' or  data[c].dtype=='float64':\n        data[c].fillna(data[c].mean())\n\n#fill in -999 for categoricals\ndata = data.fillna(-999)\n# Label Encoding\nfor f in data.columns:\n    if data[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(data[f].values))\n        data[f] = lbl.transform(list(data[f].values))\n        \nprint('Labelling done.')","d19c97fb":"data = pd.get_dummies(data)","8d51dda0":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor","72e15108":"x = data.drop(['14Dec2020'], axis = 1)\ny = data.country_code\n\nx_train,x_test,y_train,y_test = train_test_split(x,y, random_state = 0)\nlr = LinearRegression().fit(x_train,y_train)\n\ny_train_pred = lr.predict(x_train)\ny_test_pred = lr.predict(x_test)\n\nprint(lr.score(x_test,y_test))","3b94f411":"X = data.drop(['14Dec2020'], axis = 1)\nY = data.country_code\n\n\n\nquad = PolynomialFeatures (degree = 2)\nx_quad = quad.fit_transform(X)\n\nX_train,X_test,Y_train,Y_test = train_test_split(x_quad,Y, random_state = 0)\n\nplr = LinearRegression().fit(X_train,Y_train)\n\nY_train_pred = plr.predict(X_train)\nY_test_pred = plr.predict(X_test)\n\nprint(plr.score(X_test,Y_test))","759f8c02":"forest = RandomForestRegressor(n_estimators = 100,\n                              criterion = 'mse',\n                              random_state = 1,\n                              n_jobs = -1)\nforest.fit(x_train,y_train)\nforest_train_pred = forest.predict(x_train)\nforest_test_pred = forest.predict(x_test)\n\nprint('MSE train data: %.3f, MSE test data: %.3f' % (\nmean_squared_error(y_train,forest_train_pred),\nmean_squared_error(y_test,forest_test_pred)))\nprint('R2 train data: %.3f, R2 test data: %.3f' % (\nr2_score(y_train,forest_train_pred),\nr2_score(y_test,forest_test_pred)))","f2141422":"import matplotlib.pyplot as pl\n\npl.figure(figsize=(10,6))\n\npl.scatter(forest_train_pred,forest_train_pred - y_train,\n          c = 'black', marker = 'o', s = 35, alpha = 0.5,\n          label = 'Train data')\npl.scatter(forest_test_pred,forest_test_pred - y_test,\n          c = 'c', marker = 'o', s = 35, alpha = 0.7,\n          label = 'Test data')\npl.xlabel('Predicted values')\npl.ylabel('Tailings')\npl.legend(loc = 'upper left')\npl.hlines(y = 0, xmin = 0, xmax = 60000, lw = 2, color = 'red')\npl.show()","be0e6c60":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here' )","10ec0485":"I don't have test file. I chose `country_code` as Y otherwise I should rename a column to fit Y. Probably, it's wrong.","26c5bd04":"#Codes by Dandelion https:\/\/www.kaggle.com\/hely333\/eda-regression\/notebook","3bbd7718":"The largest vaccination campaign in US history got underway Monday as health workers in select hospitals rolled up their sleeves for shots to protect them from Covid-19.\nNew York on Monday inoculated its first healthcare worker, Sandra Lindsay, an intensive care unit.\n![](https:\/\/i.ytimg.com\/vi\/D1GZBxaPnSo\/maxresdefault.jpg)youtube.com"}}