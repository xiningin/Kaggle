{"cell_type":{"f7ab544a":"code","3f73eea5":"code","00ab1001":"code","e1c11860":"code","e53cc2fa":"code","ce8d8407":"code","c5c7b1fe":"code","ca52f77c":"code","14e8a0ce":"code","b81c12e4":"code","d2602003":"code","d065bd85":"code","cc91aa0e":"code","9628269f":"code","aede92b9":"code","223bdc33":"code","b50d9f5f":"code","f2934bf2":"code","7e1f2058":"code","95c07cb3":"code","db106ba6":"code","3170761d":"code","66c30863":"code","ee37c41b":"markdown","de782ae9":"markdown","ed08b622":"markdown","44fe6612":"markdown","159ec044":"markdown","a19ed76a":"markdown","b72a5a46":"markdown","a46e3e2b":"markdown","7d9e64b6":"markdown","93225ac5":"markdown","1a46a223":"markdown","bb16670e":"markdown","4a18e760":"markdown","1d06bf2e":"markdown"},"source":{"f7ab544a":"import pandas as pd\nimport pickle\nimport numpy as np\nfrom fastai.collab import *\nfrom pprint import pprint\nimport matplotlib.pyplot as plt\nimport umap\nfrom scipy import stats\nfrom sklearn.neighbors import NearestNeighbors\n%matplotlib inline","3f73eea5":"# the original csv from https:\/\/raw.githubusercontent.com\/beefsack\/bgg-ranking-historicals\/master\/\n# The column ID is used in API calls to retrieve the game reviews\ngames = pd.read_csv('..\/input\/2019-05-02.csv')\ngames.describe()\ngames.sort_values('Users rated',ascending=False,inplace=True)\ngames.rename(index=str, columns={\"Bayes average\": \"Geekscore\",'Name':'name'}, inplace=True)","00ab1001":"# load the file I composed with all the reviews\nreviews = pd.read_csv('..\/input\/bgg-13m-reviews.csv',index_col=0)\nprint(len(reviews))\nreviews.head()","e1c11860":"games_by_all_users = reviews.groupby('name')['rating'].agg(['mean','count']).sort_values('mean',ascending=False)\ngames_by_all_users['rank']=games_by_all_users.reset_index().index+1\nprint(len(games_by_all_users))","e53cc2fa":"data = CollabDataBunch.from_df(reviews, user_name='user',item_name='name',rating_name='rating',bs=100000, seed = 42)\ndata.show_batch()","ce8d8407":"learner = collab_learner(data, n_factors=50, y_range=(2.,10))","c5c7b1fe":"lr_find(learner)\nlearner.recorder.plot()","ca52f77c":"learner.fit_one_cycle(3, 1e-2, wd=0.15)","14e8a0ce":"#learner.save('5cycles7e-2-bs100000factors50yrange0-105')\n#learner.save('4cycles3e-2-bs100000factors50yrange0-105wd03')\n#learner.save('4cycles2e-2-bs100000factors20yrange1-10wd01')\n#learner.save('3cycles1e-2-bs100000factors50yrange2-10wd005')\n#learner.load('3cycles1e-2-bs100000factors50yrange2-10wd005')\nlearner.model","b81c12e4":"learner.recorder.plot_losses()","d2602003":"mean_ratings = reviews.groupby('name')['rating'].mean().round(2)\ntop_games = games_by_all_users[games_by_all_users['count']>5000].sort_values('mean',ascending=False).index\nprint(len(top_games))\ngame_bias = learner.bias(top_games, is_item=True)\ngame_bias.shapemean_ratings = reviews.groupby('name')['rating'].mean()\ngame_ratings = [(b, i, mean_ratings.loc[i]) for i,b in zip(top_games,game_bias)]\nitem0 = lambda o:o[0]","d065bd85":"sorted(game_ratings, key=item0)[:10]","cc91aa0e":"sorted(game_ratings, key=lambda o: o[0], reverse=True)[:15]","9628269f":"game_weights = learner.weight(top_games, is_item=True)\ngame_weights.shape","aede92b9":"game_pca = game_weights.pca(3)\ngame_pca.shape","223bdc33":"fac0,fac1,fac2 = game_pca.t()\ngame_comp = [(f, i) for f,i in zip(fac0, top_games)]\nprint('highest on this dimension')\npprint(sorted(game_comp, key=itemgetter(0), reverse=True)[:10]) \nprint('lowest on this dimension')\npprint(sorted(game_comp, key=itemgetter(0), reverse=False)[:10]) ","b50d9f5f":"game_comp = [(f, i) for f,i in zip(fac1, top_games)]\nprint('highest on this dimension')\npprint(sorted(game_comp, key=itemgetter(0), reverse=True)[:10])\nprint('lowest on this dimension')\npprint(sorted(game_comp, key=itemgetter(0), reverse=False)[:10])","f2934bf2":"game_comp = [(f, i) for f,i in zip(fac2, top_games)]\nprint('highest on this dimension')\npprint(sorted(game_comp, key=itemgetter(0), reverse=True)[:10])\nprint('lowest on this dimension')\npprint(sorted(game_comp, key=itemgetter(0), reverse=False)[:10])","7e1f2058":"idxs = np.random.choice(len(top_games), 50, replace=False)\nidxs = list(range(50))\nX = fac0[idxs]\nY = fac1[idxs]\nplt.figure(figsize=(15,15))\nplt.scatter(X, Y)\nfor i, x, y in zip(top_games[idxs], X, Y):\n    plt.text(x,y,i, color=np.random.rand(3)*0.7, fontsize=11)\nplt.show()","95c07cb3":"CUTOFF=2000\ntop_games = games_by_all_users[games_by_all_users['count']>CUTOFF].sort_values('mean',ascending=False).reset_index()\nnumber_of_games = len(top_games)\nprint(number_of_games)\ngame_weights = learner.weight(top_games['name'], is_item=True)\ngame_bias = learner.bias(top_games['name'], is_item=True)\nnpweights = game_weights.numpy()\ntop_games['model_score']=game_bias.numpy()\ntop_games['weights_sum']=np.sum(np.abs(npweights),axis=1)\n\nnn = NearestNeighbors(n_neighbors=number_of_games)\nfitnn = nn.fit(npweights)","db106ba6":"res = top_games[top_games['name']=='Chess']\nif len(res)==1:\n    distances,indices = fitnn.kneighbors([npweights[res.index[0]]])\nelse:\n    print(res.head())\ntop_games.iloc[indices[0][:10]].sort_values('model_score',ascending=False)","3170761d":"res = top_games[top_games['name']=='Catan']\nif len(res)==1:\n    distances,indices = fitnn.kneighbors([npweights[res.index[0]]])\nelse:\n    print(res.head())\ntop_games.iloc[indices[0][:10]].sort_values('model_score',ascending=False)","66c30863":"res = top_games[top_games['name']=='Agricola']\nif len(res)==1:\n    distances,indices = fitnn.kneighbors([npweights[res.index[0]]])\nelse:\n    print(res.head())\ntop_games.iloc[indices[0][:10]].sort_values('model_score',ascending=False)","ee37c41b":"# The worst and the best games according to the model\n\nWe are only looking at the most popular games with >5000 reviews. This way the results are more recognizable.","de782ae9":"# The most important dimensions that set games apart from eachother\nNow we explore the latent dimensions in the data. With PCA we reduce the variation to 3 dimensions. We try to understand what the computer has found out within the 3 dimensions by analyzing the games that score extreme on the dimensions.","ed08b622":"This dimension seems to be about simple\/old games vs complex\/new games","44fe6612":"# Find similar games\nNow we can also take the model in all its glory and see which games are most similar using simple nearest neighbors. The work below is also detailed in the app [over here](https:\/\/bgg.onrender.com\/)","159ec044":"The best games according to the model. Model score has a range between -0.4 and +0.4 (most scores are between 0 and 0.3). This is a score that's 'unbiased' for user preferences, such as users giving games a higher score just because they are fan of the genre.\n\nSome surprises here, such as Dune, HeroQuest and GO that all have a much lower rating than their peers on BGG.","a19ed76a":"This dimension seems to be about deep strategy games vs more cooperative or light games.\n\nNow we'll plot the top 50 games on the first two dimensions","b72a5a46":"Well, Agricola is one of my favorite games, but apparently I should play more Puerto Rico. To me it shows that tastes are personal, since I like Agricola much more.\n\nWell that's it, hope you liked it. Comments welcome!","a46e3e2b":"# Collaborative Filtering using Fast.ai library","7d9e64b6":"The worst games according to the model... Don't you hate tic-tac-toe? :)\nThe scores to the right are the BGG averages","93225ac5":"Enjoy the kernel. It's based on the fastai course. \nFor non-datascientist the second part of the analysis, scroll down a bit, starting at the 'best and the worst games' is probably nicest to checkout.\n\nI've also build an app around this to games that are similar but better, see\n[over here](https:\/\/bgg.onrender.com\/)\n\nComments of course very much welcome","1a46a223":"Gloomhaven is apparently a very different game from Puerto Rico :)","bb16670e":"These games are pretty similar to Catan right! Ok one for the road","4a18e760":"Bridge has a mean score of 7.46, 2735 reviews, a score by the model of 0.32\nBridge and Go are pretty similar to Chess, and apparently even better games according to the model. Lets give it another go","1d06bf2e":"This dimension seems to be about friendly worker placement games vs more hardcore themed games"}}