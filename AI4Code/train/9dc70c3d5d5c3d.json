{"cell_type":{"de65ac8e":"code","ff93941b":"code","f971210c":"code","de426127":"code","1a6900f7":"code","db34392d":"code","ae2a0ed3":"code","2bbfc737":"code","00a8ab14":"code","94559012":"code","2ecf253f":"code","cef10de6":"code","db2bafa7":"code","56a774a1":"code","65bfd646":"code","5c456cef":"code","0da17edd":"code","10c395cb":"code","15196709":"code","c4b3c44e":"code","153c8761":"code","6017ec3e":"code","43d28111":"code","5c640ea4":"code","d17785a4":"code","e8ece77e":"code","74c62455":"code","c8cb5a17":"code","e40c2f85":"markdown","93463840":"markdown","67e05719":"markdown","a65a1e9d":"markdown","5b0055f7":"markdown","4a5095b5":"markdown","9386fee7":"markdown","19263d7d":"markdown","65e19860":"markdown","8e47b6b2":"markdown","f64f40a8":"markdown"},"source":{"de65ac8e":"import os, glob, pandas as pd","ff93941b":"# Paths\n\ninput_dir = os.path.abspath('\/kaggle\/input\/')\narticles_dir = input_dir + '\/cord19csv\/'","f971210c":"%%time\n\nli_df = []\n\nfor jt in ['pdf','pmc']:\n    path = f'{articles_dir}\/{jt}*.csv'\n    files = glob.glob(path)\n    \n    for file in files:\n        if jt == \"pdf\":            \n            df_pdf = pd.read_csv(file, index_col=None, header=0)\n            li_df.append(df_pdf)\n        else:\n            df_pmc = pd.read_csv(file, index_col=None, header=0)        \n            li_df.append(df_pmc)\n\n# Combine all papers dataframes in one\ndf = pd.concat(li_df, axis=0, ignore_index=True, sort=False)","de426127":"df.shape","1a6900f7":"df.head()","db34392d":"# Drop duplicated documents by paper_id\ndf.drop_duplicates(subset=\"paper_id\", keep='first', inplace=True)","ae2a0ed3":"# Drop duplicated documents by text\ndf.drop_duplicates(subset=\"doc_text\", keep='first', inplace=True)\ndf.shape","2bbfc737":"# Create the lists of key terms\n\nterms_group_id = \"information_sharing\"\n\nterms1 = [\n    'methods for coordinating data-gathering','data-gathering',\n    'standardized nomenclature'\n]\n\nterms2 = [\n    'sharing response information among planners','planners',\n    'sharing response information among providers','providers',\n    'response information','information sharing'\n]\n\nterms3 = [\n    'understanding barriers to information-sharing',\n    'understanding information-sharing','information-sharing',\n    'mitigating barriers to information-sharing',\n]\n\nterms4 = [\n    'how to recruit, support, and coordinate local expertise',\n    'recruit local expertise','support local expertise',\n    'coordinate local expertise','local expertise'\n    'how to recruit, support, and coordinate local capacity',\n    'recruit local capacity','support local capacity',\n    'coordinate local capacity','local capacity'\n]\n\nterms5 = [    \n    'public health surveillance systems',\n    'public health systems','health surveillance systems',\n    'public surveillance systems','surveillance systems'\n]\n\nterms6 = [\n    'public health response'\n]\n\nterms7 = [   \n    'communicating with target','target high-risk populations',\n    'high-risk populations',\n]\n\nterms8 = [\n    'risk communication and guidelines that are easy to understand',\n    'risk communication easy to understand',\n    'risk communication easy to follow',\n    'risk communication','easy to understand'\n]\n\nterms9 = [\n    'communication','potential risk','risk of disease',\n    'population groups'\n]\n\nterms10 = [\n    'misunderstanding around containment and mitigation',\n    'misunderstanding around containment',\n    'misunderstanding around mitigation',\n    'misunderstanding containment',\n    'misunderstanding mitigation',\n    'containment and mitigation'\n]\n\nterms11 = [\n    'inequity','supported',\n    'access information',\n    'access surveillance',\n    'access treatment'\n]\n\nterms12 = [\n    'measures to reach marginalized and disadvantaged populations',\n    'reach marginalized','reaching marginalized',\n    'measures to reach marginalized populations','marginalized',\n    'measures to reach disadvantaged populations','disadvantaged',\n    'reaching disadvantaged'\n]\n\nterms13 = [\n    'mitigating threats to incarcerated people',\n    'mitigating threats',\n    'threats to incarcerated people','incarcerated people'\n]\n\nterms14 = [   \n    'barriers','opportunities',\n    'testing barriers','testing opportunities',\n    'treatment barriers','treatment opportunities',\n    'care barriers','care opportunities'\n]\n\nterms = terms1 + terms2 + terms3 + terms4 + terms5 \nterms += terms6 + terms7 + terms8 + terms9 + terms10 \nterms += terms11 + terms12 + terms13 + terms14","00a8ab14":"import spacy\n\n# Perform NLP operations on GPU, if available.\nspacy.prefer_gpu()\n\n# Load Spacy english model\nnlp = spacy.load('en', disable=['parser', 'ner', 'textcat'])\nnlp.max_length = 5000000","94559012":"# Create matcher and patterns\n\nfrom spacy.matcher import PhraseMatcher\n\n# Create a Matcher to case insensitive text matching\nmatcher = PhraseMatcher(nlp.vocab, attr='LEMMA')    \n\n# Create patterns from terms\npatterns = [nlp(d) for d in terms]\nmatcher.add(terms_group_id, None, *patterns)","2ecf253f":"# Defines the matcher\n\ndef cord_19_matcher(sample_pct):   \n    # variables to test: test_limt is the total of docs to test; \n    # 0 = test off\n    \n    test_limit = 0\n    counter = 0\n\n    docs = df.sample(frac = sample_pct\/100) if sample_pct < 100 else df\n    tdocs = str(len(docs))\n\n    print(f\"{tdocs} documents to proccess...\")\n        \n    # Maximun allowed length of string text document\n    max_tlen = 100000\n\n    # initialize array and total found variables\n    findings_arr = []\n\n    # loop all articles to match terms\n    for idx, row in docs.iterrows():\n        try:\n            paper_id = row['paper_id']\n            doc_text = row[\"doc_text\"]            \n            \n            doc = nlp(doc_text)\n\n            # get the matches\n            matches = matcher(doc)\n\n            # process all matches found in text\n            if matches:\n                for m in matches:\n                    m_id, start, end = m[0],m[1],m[2]\n                    term_group = nlp.vocab.strings[m_id]\n                    term = doc[start:end].text\n\n                    # put finding into json object\n                    finding = {\n                        \"paper_id\": paper_id,\n                        \"term_group\": term_group,\n                        \"term\": term\n                    }\n\n                    # append finding to findings array\n                    findings_arr.append(finding)                \n\n            counter += 1\n            if counter % 100 == 0:\n                print(f\"{counter} documents proccessed\")\n\n            # breake loop if test control present\n            if test_limit > 0:            \n                if counter == test_limit:\n                    print(test_limit, \"sample count reached\")\n                    break\n\n        except BaseException as e:\n            print(\"Oops!  Error occurred in document loop.\")\n            print(str(e))\n            print(\"Continuing...\")\n            continue\n    \n    return findings_arr","cef10de6":"%%time\n\n# Set sample parameter = % of papers to proccess\nsample_pct = 100\n#sample_pct = 1.2\n#sample_pct = 10\n\nfindings_arr = cord_19_matcher(sample_pct)\n\ntfound = len(findings_arr)\nprint(tfound, \"matches found\\n\")","db2bafa7":"# Put findings array into a dataframe\n\nfindings = pd.DataFrame(findings_arr)\n\n# exclude the following terms originally taken in account\n#exc = ['term1','term2','term3']\n#findings.where(~findings.term.isin(exc), inplace = True)","56a774a1":"findings.info()","65bfd646":"findings.head()","5c456cef":"# Capitalize each term in findings\nfindings[\"term\"] = findings[\"term\"].str.capitalize()","0da17edd":"findings['count'] = ''\ncnt = findings.groupby('term').count()[['count']]\ncnt_s = cnt.sort_values(by='count', ascending=False).copy()","10c395cb":"# Show the bar chart\n\nax = cnt_s.plot(kind='barh', figsize=(12,30), \n                legend=False, color=\"coral\", \n                fontsize=16)\nax.set_alpha(0.8)\nax.set_title(\"What has been published about information sharing and inter-sectoral collaboration?\",\n             fontsize=18)\nax.set_xlabel(\"Term Appearances\", fontsize=16);\nax.set_ylabel(\"Terms\", fontsize=14);\nax.set_xticks([0,200,400,600,800,1000,1200,1400,1600,1800])\n\n# Create a list to collect the plt.patches data\ntotals = []\n\n# Fill totals list\nfor i in ax.patches:\n    totals.append(i.get_width())\n\ntotal = sum(totals)\n\n# Set bar labels using the list\nfor i in ax.patches:\n    c = i.get_width()\n    cnt = f'{c:,} '\n    pct = str(round((c\/total)*100, 2)) + '%'\n    pct_f = \"(\" + pct + \")\"\n    ax.text(c+.3, i.get_y()+.4, cnt + pct_f, \n            fontsize=14, color='dimgrey')\n\n# Invert graph \nax.invert_yaxis()","15196709":"from wordcloud import WordCloud, ImageColorGenerator\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fill the list of words to show\nterm_values = \"\"\nfor term in findings['term']:\n    term_val = str(term).title()\n    term_val = term_val.replace(' ','_')\n    term_val = term_val.replace('-','_')\n    term_values += term_val + ' '\n\n# Generates the wordcloud object\nwordcloud = WordCloud(background_color=\"white\",\n                      collocations=False).generate(term_values)\n\n# Display the generated image\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.figure(figsize=((10,8)))\nplt.show()","c4b3c44e":"findings_sta = findings.groupby([\"term\", \"paper_id\"]).size().reset_index(name=\"count\")\nfindings_sta = findings_sta.sort_values(by=['term','count'], ascending=False)","153c8761":"# Helper\n\ndef get_doc_text(paper_id):\n    doc = df.loc[df[\"paper_id\"]==paper_id].iloc[0]\n    return doc[\"doc_text\"]","6017ec3e":"answers = []\n\nfor term in terms:    \n    term = term.capitalize()\n    try:\n        f = findings_sta[findings_sta[\"term\"]==term]\n        f = f.sort_values(\"count\",ascending=False)\n        for fc in f.iterrows():           \n            paper_id = fc[1][\"paper_id\"]                        \n            doc_text = get_doc_text(paper_id)\n            \n            answer = {\n                \"aspect\": terms_group_id,\n                \"factor\": term,\n                \"paper_id\": paper_id,\n                \"doc_text\": str(doc_text)\n            }\n\n            answers.append(answer)\n            \n            break\n        \n    except BaseException as e:\n        print(str(e))\n        continue\n\nlen(answers)","43d28111":"import ipywidgets as widgets\nfrom ipywidgets import Layout, Button, Box, FloatText, Textarea, Dropdown, Label, IntSlider","5c640ea4":"item_layout = Layout(\n    display='flex',\n    flex_flow='row',\n    justify_content='space-between',\n    width= '100%',\n    height= '200px'\n)","d17785a4":"# Helpers\n\ndef get_text_area(text):\n    ta = widgets.Textarea(\n        value=str(text),\n        placeholder='',\n        description='',\n        layout=item_layout,\n        disabled=True\n    )\n    return ta\n\nimport json\n\ndef get_answer_text(factor):\n    try:\n        factor = factor.capitalize()\n        ans = next(x for x in answers if x[\"factor\"] == factor)\n        ans = json.dumps(ans[\"doc_text\"]).strip(\"'\").strip('\"')\n        ans = ans.replace('\\\\n', '\\n\\n')\n        return ans\n    except BaseException:\n        return \"\"\n    \ndef get_question_answer(t_params):\n    full_text = ''\n    for t_param in t_params:\n        try:\n            doc_text = get_answer_text(t_param)\n            if not doc_text in full_text:\n                if len(full_text) > 0:\n                    full_text += \"\\n\\n\"                \n                full_text += doc_text\n        except BaseException:\n            continue\n    \n    return full_text","e8ece77e":"td1 = 'Methods for coordinating data-gathering with standardized nomenclature.'\ntext = get_question_answer(terms1)\nta1 = get_text_area(text)\n\ntd2 = 'Sharing response information among planners, providers, and others.'\ntext = get_question_answer(terms2)\nta2 = get_text_area(text)\n\ntd3 = 'Understanding and mitigating barriers to information-sharing.'\ntext = get_question_answer(terms3)\nta3 = get_text_area(text)\n\ntd4 = 'How to recruit, support, and coordinate local (non-Federal) expertise and capacity relevant to public health emergency response (public, private, commercial and non-profit, including academic).'\ntext = get_question_answer(terms4)\nta4 = get_text_area(text)\n\ntd5 = 'Integration of federal\/state\/local public health surveillance systems.'\ntext = get_question_answer(terms5)\nta5 = get_text_area(text)\n\ntd6 = 'Value of investments in baseline public health response infrastructure preparedness'\ntext = get_question_answer(terms6)\nta6 = get_text_area(text)\n\ntd7 = 'Modes of communicating with target high-risk populations (elderly, health care workers).'\ntext = get_question_answer(terms7)\nta7 = get_text_area(text)\n\ntd8 = 'Risk communication and guidelines that are easy to understand and follow (include targeting at risk populations\u2019 families too).'\ntext = get_question_answer(terms8)\nta8 = get_text_area(text)\n\ntd9 = 'Communication that indicates potential risk of disease to all population groups.'\ntext = get_question_answer(terms9)\nta9 = get_text_area(text)\n\ntd10 = 'Misunderstanding around containment and mitigation.'\ntext = get_question_answer(terms10)\nta10 = get_text_area(text)\n\ntd11 = 'Action plan to mitigate gaps and problems of inequity in the Nation\u2019s public health capability, capacity, and funding to ensure all citizens in need are supported and can access information, surveillance, and treatment.'\ntext = get_question_answer(terms11)\nta11 = get_text_area(text)\n\ntd12 = 'Measures to reach marginalized and disadvantaged populations. Data systems and research priorities and agendas incorporate attention to the needs and circumstances of disadvantaged populations and underrepresented minorities.'\ntext = get_question_answer(terms12)\nta12 = get_text_area(text)\n\ntd13 = 'Mitigating threats to incarcerated people from COVID-19, assuring access to information, prevention, diagnosis, and treatment.'\ntext = get_question_answer(terms13)\nta13 = get_text_area(text)\n\ntd14 = 'Understanding coverage policies (barriers and opportunities) related to testing, treatment, and care'\ntext = get_question_answer(terms14)\nta14 = get_text_area(text)","74c62455":"ac1_tas = [ta1,ta2,ta3,ta4,ta5,ta6,ta7,\n          ta8,ta9,ta10,ta11,ta12,ta13,ta14]\nac1 = widgets.Accordion(children=ac1_tas)\nac1.set_title(0, td1)\nac1.set_title(1, td2)\nac1.set_title(2, td3)\nac1.set_title(3, td4)\nac1.set_title(4, td5)\nac1.set_title(5, td6)\nac1.set_title(6, td7)\nac1.set_title(7, td8)\nac1.set_title(8, td9)\nac1.set_title(9, td10)\nac1.set_title(10, td11)\nac1.set_title(11, td12)\nac1.set_title(12, td13)\nac1.set_title(13, td14)","c8cb5a17":"ac1","e40c2f85":"Quantify documents by key terms","93463840":"Show the answers in a complete and readable way.","67e05719":"Group findings by key term and sort by key term and count. The first document in each group will be part of the response to the task question.","a65a1e9d":"## Pattern Matching\nObjective: classify all articles according to key terms.","5b0055f7":"Display a bar graph and a word cloud with the totals of findings  by key term.","4a5095b5":"Run the matcher","9386fee7":" # What has been published about information sharing and inter-sectoral collaboration?","19263d7d":"# **INTRODUCTION**\n\nThis work is to help the medical community answer the posted question in Kaggle: [What has been published about information sharing and inter-sectoral collaboration?](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge\/tasks) The resulting model enables to understand and keep up with the large amount of literature contained in the provided dataset, specifically:\n\n1. Methods for coordinating data-gathering with standardized nomenclature.\n2. Sharing response information among planners, providers, and others.\n3. Understanding and mitigating barriers to information-sharing.\n4. How to recruit, support, and coordinate local (non-Federal) expertise and capacity relevant to public health emergency response (public, private, commercial and non-profit, including academic).\n5. Integration of federal\/state\/local public health surveillance systems.\n6. Value of investments in baseline public health response infrastructure preparedness\n7. Modes of communicating with target high-risk populations (elderly, health care workers).\n8. Risk communication and guidelines that are easy to understand and follow (include targeting at risk populations\u2019 families too).\n9. Communication that indicates potential risk of disease to all population groups.\n10. Misunderstanding around containment and mitigation.\n11. Action plan to mitigate gaps and problems of inequity in the Nation\u2019s public health capability, capacity, and funding to ensure all citizens in need are supported and can access information, surveillance, and treatment.\n12. Measures to reach marginalized and disadvantaged populations.\n13. Data systems and research priorities and agendas incorporate attention to the needs and circumstances of disadvantaged populations and underrepresented minorities.\n14. Mitigating threats to incarcerated people from COVID-19, assuring access to information, prevention, diagnosis, and treatment.\n15. Understanding coverage policies (barriers and opportunities) related to testing, treatment, and care\n\nAt the end of this notebook, the question asked is answered by means of each of the aspects listed above. In each case, the original content of the article that most represents the processed aspect is shown.\n\nTo accomplish the goal, the selected approach was to perform text mining on input data, by applying the latest advances in natural language processing (NLP). This was realized by the following steps:\n\n    1. Obtain input data and pre-process it to facilitate analysis.\n    2. Extract the key terms from the task description.\n    3. Match key terms with text contents.\n    4. Group and quantify the findings.\n    5. Show the documents that answer the task questions.\n        \nThe advantage of using NLP to abord this problem is that it is based on language-specific models, saving time and resources for text analysis.\n\nThe key terms was extracted from the task description in the step 2, resulting in a set of rule-based patterns.\n\nThe matching of key terms (step 3) was applied through topic  classification with Spacy library. This work through large sets of the unstructured data to match the patterns obtained in step 2. It is a very fast and scalable process that preferably uses the GPU resource.\n\nThis approach presents the limitation of synonymy, where multiple words and phrases have the same or similar meaning. To counter this, great care was taken in selecting keywords to make up the vocabulary of terms (e.g. COVID-19, SARS-CoV-2, 2019-nCov, SARS Coronavirus 2, or 2019 Novel Coronavirus).\n\nIn other hand, since the [original input data](https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) it is stored in JSON single files, whose structure is likely too complex to directly perform the analysis, this notebook uses the pre-processed data from the dataset [CORD-19-CSV](https:\/\/www.kaggle.com\/huascarmendez1\/cord19csv), also of same authorship of this.\n\nThe preprocessing of the data further consisted of filtering the documents that specifically talk about the covid-19 disease and its other names, as well as that they dealt with related risk factors, among other general data review, counting and cleaning activities.\n\nFinally, as it is clear that the results presented here are not final, it is recommended to assume them as a starting point for a complete understanding of each of the aspects that it tries to address.","65e19860":"## Load Data","8e47b6b2":"Pre-process input data","f64f40a8":"## Get what the literature reports on the task topic"}}