{"cell_type":{"1b61c40f":"code","5894beed":"code","30c54354":"code","b425d30e":"code","7e97cb8d":"code","31aa08db":"code","af89b3fd":"code","f7487342":"code","080183fe":"code","2a2e99a0":"code","6ca5b0b2":"code","5f75d8b2":"code","d3e5a303":"code","db28fbf3":"code","fd0815fd":"markdown","e6b2a98f":"markdown","7db92b40":"markdown","56956d12":"markdown","d355cd91":"markdown","105e43a4":"markdown","49e848fb":"markdown"},"source":{"1b61c40f":"import pandas as pd\nimport numpy as np\nimport os\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom datetime import datetime\nfrom time import time","5894beed":"root = '..\/input\/coronavirusdataset'\nos.listdir(root)","30c54354":"pd.options.display.float_format = '{:.2f}'.format\n\npatient = pd.read_csv(root+'\/patient.csv', engine='python')\ntime_df = pd.read_csv(root+'\/time.csv', engine='python')\nroute = pd.read_csv(root+'\/route.csv', engine='python')\n\npatient.head(3)","b425d30e":"patient.drop_duplicates(subset=['region', 'infection_reason', 'state']).head(3)","7e97cb8d":"fig = plt.figure(figsize=(12,8))\naxes = [None for i in range(6)]\n\naxes[0] = plt.subplot2grid((3,4), (0,0), colspan=4)\naxes[1] = plt.subplot2grid((3,4), (1,0), colspan=1)\naxes[2] = plt.subplot2grid((3,4), (1,1), colspan=1)\naxes[3] = plt.subplot2grid((3,4), (1,2), colspan=1)\naxes[4] = plt.subplot2grid((3,4), (1,3), colspan=1, rowspan=2)\naxes[5] = plt.subplot2grid((3,4), (2,0), colspan=3)\n\nfor i in range(len(axes)):\n    axes[i].set_title(\"figure no.%d\"%i)\n\nfig.tight_layout()\nplt.show()","31aa08db":"patient = patient.sort_values(by='confirmed_date', ascending=True)\npatient['confirmed_date'] = patient['confirmed_date'].apply(lambda x: pd.to_datetime(x))\n# patient['confirmed_date'].fillna(datetime(2020, 3, 3, 0,0,0))\n# patient['region'].fillna('N\/A')\n\ndf = patient.groupby('confirmed_date')['region'].value_counts().unstack().fillna(0).T\n\nplt.figure(figsize=(12,8), dpi=200)\nplt.pcolor(df, cmap='GnBu', edgecolors='white', linewidth=2)\nplt.xticks(np.arange(0.5, len(df.columns), 5), df.columns[::5], fontsize=7, fontfamily='serif')\nplt.yticks(np.arange(0.5, len(df.index), 1), df.index, fontsize=7, fontfamily='serif')\nplt.title(\"Time of Confirmation - Region\", fontsize=15, fontweight='bold', fontfamily='serif', position=(0.25, 1.02))\ncbar = plt.colorbar()\n\ncbar.ax.tick_params(labelsize=8) \ncbar.ax.minorticks_on()\nplt.show()","af89b3fd":"df2 = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\ndf2.head(3)","f7487342":"df2.dropna(subset=['date_added'], inplace=True)","080183fe":"df2['added_month'] = df2['date_added'].apply(lambda x: x.split()[0])\ndf2['added_year'] = df2['date_added'].apply(lambda x: x.split()[-1])\ndf2.drop(columns=['date_added'], inplace=True)","2a2e99a0":"df = df2.groupby('added_year')['rating'].value_counts().unstack().fillna(0).T\n\nplt.figure(figsize=(12,8), dpi=200)\nplt.pcolor(df, cmap='Purples', edgecolors='white', linewidth=2)\nplt.xticks(np.arange(0.5, len(df.columns), 2), df.columns[::2], fontsize=7, fontfamily='serif')\nplt.yticks(np.arange(0.5, len(df.index), 1), df.index, fontsize=7, fontfamily='serif')\nplt.title(\"Release Year - Rating\", fontsize=15, fontweight='bold', fontfamily='serif', position=(0.17, 1.02))\ncbar = plt.colorbar()\n\ncbar.ax.tick_params(labelsize=8) \ncbar.ax.minorticks_on()\nplt.show()","6ca5b0b2":"top_reg = patient['region'].value_counts().sort_values(ascending=False)[:10]\n\nfig, ax = plt.subplots(1,2, figsize=(12,8), dpi=200)\n# sns.set_style('whitegrid')\n\nax[0].bar(top_reg.index, top_reg, color='grey')\nax[0].set_title('Top Regions (Before)')\n\ncmap = ['gray' for i in range(10)]\ncmap[0] = cmap[1] = cmap[2] = '#3caea3'\nax[1].bar(top_reg.index, top_reg, alpha=0.75, width=0.8, linewidth=1.2, edgecolor='black', color=cmap)\nax[1].set_title(\"Top Regions (After)\", fontsize=15, fontweight='bold', fontfamily='serif', position=(0.23, 1.02))\nax[1].set_xticklabels(labels=top_reg.index, rotation=45, fontsize=8)\n\nfor i in top_reg.index:\n    ax[1].annotate(\"{:.0f}\".format(top_reg[i]), xy=(i, top_reg[i]+2), va='center', ha='center', fontweight='bold', color='black')\n    \nplt.suptitle('* Top 3 regions are emphasized.', color='gray', x=0.63, y=0.95, fontsize=7)\nplt.subplots_adjust(left=0.5, right=0.8)\nplt.tight_layout()\nplt.show()","5f75d8b2":"df3 = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf3.head(2)","d3e5a303":"df3 = df3[df3['price']<1050]\ndf3['price_range'] = df3['price'].apply(lambda x: x\/\/50)\ndf3 = df3.sort_values(by='price_range')\nX = df3['price_range'].value_counts().sort_index()\n\nplt.figure(figsize=(14, 8), dpi=200)\nplt.ylim(0, 25000)\nplt.title(\"Newyork City Airbnb Price Distribution\", fontfamily='serif', fontweight='bold', fontsize=14)\nplt.bar(X.index, X, color='gray', edgecolor='black', linewidth=2)\nplt.xticks([2*i for i in range(11)], [100*i for i in range(11)], rotation=40)\nplt.xlabel(xlabel='Price Range (Start)', fontfamily='serif')\nplt.ylabel(ylabel='Frequency', fontfamily='serif')\n\nspan_range = [[0, 4], [5, 10], [11, 20]]\ncolor=['green', 'midnightblue', 'red']\n\n\nfor idx, sub_title in enumerate(['<200', '<500', '>500']):\n    plt.annotate(sub_title,\n                xy=(sum(span_range[idx])\/2 ,22000),\n                xytext=(0,0), textcoords='offset points',\n                va=\"center\", ha=\"center\",\n                color=\"w\", fontsize=16, fontweight='bold',\n                bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n    plt.axvspan(span_range[idx][0]-0.5,span_range[idx][1]+0.5,  color=color[idx], alpha=0.07)\n\n# plt.axvspan(-0.5, 3.5, facecolor='blue', alpha=0.5)\nplt.show()","db28fbf3":"df2 = df2.sort_values(by=['added_year', 'release_year'])\n\nfig, ax = plt.subplots(1,2, figsize=(10,4), dpi=200)\n\nax[0].scatter(df2['release_year'], df2['added_year'], color='gray')\nax[0].set_title(\"Scatterplot (Before)\")\n\nmv = df2[df2['type']=='Movie']\ntv = df2[df2['type']=='TV Show']\nax[1].scatter(mv['release_year'], mv['added_year'], s=9.5, alpha=0.7, color='royalblue', label='Movie')\nax[1].scatter(tv['release_year'], tv['added_year'], s=9.5, alpha=0.7, color='pink', label='TV Show')\nax[1].set_title(\"Comparable Scatterplot (After)\", fontfamily='serif', fontweight='bold', fontsize=13, position=(0.35, 1.05))\nax[1].set_xlabel(\"Release Year\", fontfamily='serif', fontsize=10)\n# ax[1].set_yticklabels(np.arange(0.5, len(set(df2['added_year'])), 2), sorted(list(set(df2['added_year'])))[::2], fontfamily='serif')\nplt.suptitle(\"* Classic movies are appreciated, but not TV shows.\", color='gray', fontsize=6, position=(0.652, 0.9), fontfamily='serif')\nax[1].legend()\n\nplt.tight_layout()\nplt.show()","fd0815fd":"## Comparable Scatterplot","e6b2a98f":"## Barplots with Emphasis","7db92b40":"# Data Visualization\n\n![](https:\/\/i.pcmag.com\/imagery\/articles\/02Xkt5sp3fVl5rGUtk3DXMi-7.fit_scale.size_1028x578.v1569485349.jpg)","56956d12":"Inspiration from https:\/\/www.kaggle.com\/subinium\/simple-matplotlib-visualization-tips <br><br>\nGreat guide for visualization newbies :)","d355cd91":"## Barplot with Span Illustration","105e43a4":"## Creating Figures","49e848fb":"## Sensual Heatmap"}}