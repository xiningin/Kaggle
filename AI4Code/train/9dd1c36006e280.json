{"cell_type":{"9f83d91d":"code","f272a7e1":"code","0b3c4c7f":"code","d4ec61d0":"code","0089ae6b":"code","c5f7cbb0":"code","7abf421f":"code","00539b62":"code","76cae79d":"code","e7fe7326":"code","e9e63ce7":"code","2381620c":"code","ab43f517":"code","1abbd90a":"code","58336cf5":"code","7b0d1fed":"code","85aaa0db":"code","95678b27":"code","9a3ccd53":"code","55ea2496":"code","ce06943d":"code","ca9c44f0":"code","b5a6f192":"code","e1e66ac4":"code","46cd84a5":"code","87a1de05":"code","25280ab7":"code","85dfb451":"code","8056c05a":"code","b5a59fc0":"code","8307da52":"markdown","de2c2014":"markdown","c58cf4ef":"markdown","96b079ee":"markdown","b185ff98":"markdown","66a6d564":"markdown","b8fcdffc":"markdown","dd593922":"markdown","545266c3":"markdown","30057648":"markdown","3bef771d":"markdown","78c3f989":"markdown","93741c2f":"markdown","1763d4fe":"markdown","0b36cbb4":"markdown","3880d986":"markdown","b1cb5f89":"markdown","90fbd130":"markdown","80fa9090":"markdown","b0d62244":"markdown","6b20fc4a":"markdown","ab03b6b9":"markdown","be119e54":"markdown","729c5b9d":"markdown","549a407e":"markdown","ebc66470":"markdown","ab061b36":"markdown","e0ace33a":"markdown","cfdb0b6a":"markdown","ac63eba5":"markdown","e50cde4a":"markdown","96649ffc":"markdown"},"source":{"9f83d91d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.express as px\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objects as go\nfrom plotly import tools\nimport pycountry\nfrom wordcloud import WordCloud, STOPWORDS\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff\n%matplotlib inline","f272a7e1":"kaggle_choice_df = pd.read_csv(\"..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\")\nkaggle_choice_df = kaggle_choice_df[kaggle_choice_df.columns[~kaggle_choice_df.columns.str.contains('OTHER_TEXT')]]\nkaggle_choice_df.drop(kaggle_choice_df.index[0],inplace = True)\nkaggle_choice_df.drop(columns='Time from Start to Finish (seconds)',inplace = True)\ndef simple_graph(col,type_of_graph,color):\n    data_frame = compute_percentage(kaggle_choice_df,col)\n    layout = go.Layout()\n    if type_of_graph == 'bar':\n        data = [go.Bar(\n                x = data_frame.values,\n                y = data_frame.index,\n                opacity = 0.6,\n                orientation='h',\n               marker=dict(color=data_frame.values,colorscale=color) \n            )]\n    elif type_of_graph == 'pie':\n        data = [go.Pie(\n            labels = data_frame.index,\n            values = data_frame.values,\n            textfont = dict(size = 20)\n        )]\n    fig = go.Figure(data = data, layout = layout)\n    py.iplot(fig)\ndef multiple(df,start,stop,color):\n    layout = go.Layout()\n    indexs = []\n    values = []\n    stop_indexs = []\n    for i in range(1,stop + 1):\n        stop_indexs.append(start + str(i))\n    for i in stop_indexs:\n        df = compute_percentage(kaggle_choice_df,i)\n        indexs.append(df.index[0])\n        values.append(df.values[0])\n    data = [go.Bar(\n                x =  values,\n                y =indexs,\n                opacity = 0.6,\n        orientation='h',\n        marker=dict(color=values,colorscale=color)\n            )]\n    fig = go.Figure(data = data, layout = layout)\n    py.iplot(fig)\ndef compute_percentage(df,col):\n    return df[col].value_counts(normalize=True) * 100\ndef bi_variant_chart(col1,col2,x_title,y_title):\n    index = kaggle_choice_df[col1].dropna().unique()\n    vals = kaggle_choice_df[col2].unique()\n    layout = go.Layout()\n    trace = []\n    for j,y_axis in enumerate(vals):\n        trace.append(go.Bar(x = kaggle_choice_df[kaggle_choice_df[col2] == y_axis][col1].value_counts().index,\n                            y = kaggle_choice_df[kaggle_choice_df[col2] == y_axis][col1].sort_values().value_counts().values,\n                opacity = 0.6, name = vals[j]))\n    fig = go.Figure(data = trace, layout = layout)\n    fig.update_layout(\n        title = x_title,\n        yaxis = dict(title = y_title),\n        legend = dict( bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),\n        bargap = 0.15, bargroupgap = 0.1,legend_orientation=\"h\")\n    fig.show()\ndef multiple_col_bi_variant_chart(df,start,stop,col1,col2,x_title = \"\",y_title = \"\"):\n    test_df = pd.DataFrame({col1:[],col2:[]})\n    indexs = []\n    values = []\n    stop_indexs = []\n    for i in range(1,stop + 1):\n        stop_indexs.append(start + str(i))\n        test_df = test_df.append(df[[col1,start + str(i)]].rename(columns={start + str(i):col2}))\n    test_df = test_df.dropna()\n    index = test_df[col1].dropna().unique()\n    vals = test_df[col2].unique()\n    layout = go.Layout()\n    trace = []\n    for j,y_axis in enumerate(vals):\n        trace.append(go.Bar(x = test_df[test_df[col2] == y_axis][col1].value_counts().index,\n                            y = test_df[test_df[col2] == y_axis][col1].value_counts().values,\n                opacity = 0.6, name = vals[j]))\n    fig = go.Figure(data = trace, layout = layout)\n    fig.update_layout(\n        title = x_title,\n        yaxis = dict(title = y_title),\n        legend = dict( bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),\n        bargap = 0.15, bargroupgap = 0.1,legend_orientation=\"h\"\n    )\n    fig.update_layout(legend_orientation=\"h\")\n    fig.show()\ndef aws_gcp_azure(df,col):\n    aws_gcp_azure = pd.melt(df,id_vars=[col],value_vars = [\"Q29_Part_1\",\"Q29_Part_2\",\"Q29_Part_3\"],\n                            value_name=\"Platform\")\n    aws_gcp_azure = aws_gcp_azure[[col,\"Platform\"]].dropna()\n    aws_gcp_azure.replace({\" Microsoft Azure \":\"Azure\",\" Amazon Web Services (AWS) \":\"AWS\",\" Google Cloud Platform (GCP) \":\"GCP\"},inplace = True)\n    gcp_percent = aws_gcp_azure[aws_gcp_azure['Platform'] == \"GCP\"][col].value_counts(normalize = True)*100\n    aws_percent = aws_gcp_azure[aws_gcp_azure['Platform'] == \"AWS\"][col].value_counts(normalize = True)*100\n    azure_percent = aws_gcp_azure[aws_gcp_azure['Platform'] == \"Azure\"][col].value_counts(normalize = True)*100\n    data = []\n    for i in range(len(gcp_percent)):\n        data.append(go.Bar(name=gcp_percent.index[i], x=aws_gcp_azure['Platform'].unique(), y=[aws_percent.values[i],gcp_percent.values[i],azure_percent.values[i]]))\n    fig = go.Figure(data=data)\n    fig.update_layout(\n        legend = dict(bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),\n        bargap = 0.15, bargroupgap = 0.1\n    )\n    fig.update_layout(barmode='stack',legend_orientation=\"h\")\n    fig.show()","0b3c4c7f":"simple_graph(\"Q2\",\"bar\",\"portland\")","d4ec61d0":"simple_graph(\"Q4\",\"bar\",\"temps\")","0089ae6b":"bi_variant_chart(\"Q6\",\"Q1\",\"Company size VS age group\",\"Count\")","c5f7cbb0":"bi_variant_chart(\"Q6\",\"Q5\",\"Company size VS Designation\",\"Count\")","7abf421f":"bi_variant_chart(\"Q6\",\"Q8\",\"Company size VS ML in Production\",\"Count\")","00539b62":"bi_variant_chart(\"Q6\",\"Q10\",\"Company size VS Salary\",\"\")","76cae79d":"bi_variant_chart(\"Q6\",\"Q14\",\"Company size VS Primary tool\",\"Designation \")","e7fe7326":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q9_Part_\",8,\"Q6\",\"Q9\", x_title = \"Employee's role in companies\", y_title = \"\")","e9e63ce7":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q16_Part_\",12,\"Q6\",\"Q16\", x_title = \"IDE's used in companies\", y_title = \"\")","2381620c":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q18_Part_\",12,\"Q6\",\"Q18\", x_title = \"Programing language\", y_title = \"\")","ab43f517":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q20_Part_\",12,\"Q6\",\"Q20\", x_title = \"Vis lib\", y_title = \"\")","1abbd90a":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q26_Part_\",7,\"Q6\",\"Q26\", x_title = \"Purpose of Computer Vision in companies\", y_title = \"\")","58336cf5":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q27_Part_\",6,\"Q6\",\"Q27\", x_title = \"Purpose of NLP in companies\", y_title = \"\")","7b0d1fed":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q28_Part_\",12,\"Q6\",\"Q28\", x_title = \"ML framework in companies\", y_title = \"\")","85aaa0db":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q16_Part_\",12,\"Q15\",\"Q16\", x_title = \"Developer's fav IDE\", y_title = \"\")","95678b27":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q12_Part_\",12,\"Q15\",\"Q12\", x_title = \"Fav media source\", \n                              y_title = \"\")","9a3ccd53":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q18_Part_\",12,\"Q15\",\"Q18\", x_title = \"Fav Programming language\", y_title = \"\")","55ea2496":"multiple_col_bi_variant_chart(kaggle_choice_df,\"Q29_Part_\",12,\"Q15\",\"Q29\", x_title = \"Top ML ALgo\", y_title = \"\")","ce06943d":"# AWS VS GCP VS AZURE\naws_gcp_azure = kaggle_choice_df[[\"Q29_Part_1\",\"Q29_Part_2\",\"Q29_Part_3\",\"Q29_Part_4\",\"Q29_Part_5\",\"Q29_Part_6\",\"Q29_Part_7\",\"Q29_Part_8\",\"Q29_Part_9\",\"Q29_Part_10\",\"Q29_Part_11\",\"Q29_Part_12\"]]\nemp = pd.DataFrame({\"emp\":[]})\nemp = emp[\"emp\"].append(kaggle_choice_df[kaggle_choice_df[\"Q29_Part_1\"] == \" Google Cloud Platform (GCP) \"][\"Q6\"]).append(kaggle_choice_df[kaggle_choice_df[\"Q29_Part_2\"] == \" Amazon Web Services (AWS) \"][\"Q6\"]).append(kaggle_choice_df[kaggle_choice_df[\"Q29_Part_3\"] == \" Microsoft Azure \"][\"Q6\"])\ntitle = pd.DataFrame({\"Title\":[]})\ntitle = title[\"Title\"].append(kaggle_choice_df[kaggle_choice_df[\"Q29_Part_1\"] == \" Google Cloud Platform (GCP) \"][\"Q5\"]).append(kaggle_choice_df[kaggle_choice_df[\"Q29_Part_2\"] == \" Amazon Web Services (AWS) \"][\"Q5\"]).append(kaggle_choice_df[kaggle_choice_df[\"Q29_Part_3\"] == \" Microsoft Azure \"][\"Q5\"])\naws_gcp_azure = pd.DataFrame({\"Aws VS GCP VS Azure\":[],\"Company Size\":[],\"Title\":[]})\naws_gcp_azure[\"Aws VS GCP VS Azure\"] = aws_gcp_azure[\"Aws VS GCP VS Azure\"].append(kaggle_choice_df[\"Q29_Part_1\"].dropna()).append(kaggle_choice_df[\"Q29_Part_2\"].dropna()).append(kaggle_choice_df[\"Q29_Part_3\"].dropna())\naws_gcp_azure['Company Size'] = emp.values\naws_gcp_azure['Title'] = title.values\nfig = px.parallel_categories(aws_gcp_azure[[\"Aws VS GCP VS Azure\",\"Title\",\"Company Size\"]])\nfig.show()","ca9c44f0":"df = kaggle_choice_df[1:]\ncol = \"Q1\"\naws_gcp_azure = pd.melt(df,id_vars=[col],value_vars = [\"Q29_Part_1\",\"Q29_Part_2\",\"Q29_Part_3\"],\n                            value_name=\"Platform\")\naws_gcp_azure = aws_gcp_azure[[col,\"Platform\"]].dropna()\naws_gcp_azure.replace({\" Microsoft Azure \":\"Azure\",\" Amazon Web Services (AWS) \":\"AWS\",\n                       \" Google Cloud Platform (GCP) \":\"GCP\"},inplace = True)\ngcp_percent = aws_gcp_azure[aws_gcp_azure['Q1'] == \"25-29\"][\"Platform\"].value_counts(normalize = True)*100\ndata = []\nfor i in df[col].unique():\n    age = aws_gcp_azure[aws_gcp_azure[col] == i][\"Platform\"].value_counts(normalize = True)*100\n    data.append(go.Bar(name=\"aws\", x=[i], y=[age['AWS']],marker_color='indianred'))\n    data.append(go.Bar(name=\"GCP\", x=[i], y=[age['GCP']], marker_color='lightsalmon'))\n    data.append(go.Bar(name=\"Azure\", x=[i], y=[age['Azure']], marker_color='cornflowerblue'))\nfig = go.Figure(data=data)\nfig.update_layout(bargap = 0.15, bargroupgap = 0.1)\nfig.update_layout(barmode='stack',showlegend=False)\nfig.show()","b5a6f192":"countries = kaggle_choice_df[[\"Q29_Part_1\",\"Q3\"]][1:]\ncountries = countries.dropna()\ncountries = countries.groupby(\"Q3\").size().reset_index(name=\"Count\")\ncountries.loc[2]['code'] = 'test'\nfor i,country in enumerate(countries['Q3']):\n    user_input = country\n    mapping = {country.name: country.alpha_3 for country in pycountry.countries}\n    countries.set_value(i, 'code', mapping.get(user_input))\ndata = [ dict(\n        type = 'choropleth',\n        locations = countries['code'],\n        z = countries['Count'],\n        text = countries['Q3'],\n        colorscale = [[0,\"rgb(5, 10, 172)\"],[0.35,\"rgb(40, 60, 190)\"],[0.5,\"rgb(70, 100, 245)\"],\\\n            [0.6,\"rgb(90, 120, 245)\"],[0.7,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (color = 'rgb(180,180,180)',width = 0.5) ),\n        colorbar = dict(autotick = False,tickprefix = '',title = 'Total Count'),)]\nlayout = dict(\n    title = 'countries using GCP',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(type = 'Mercator')\n    )\n)\nfig = dict( data=data, layout=layout )\npy.iplot( fig, validate=False)","e1e66ac4":"countries = kaggle_choice_df[[\"Q29_Part_2\",\"Q3\"]][1:]\ncountries = countries.dropna()\ncountries = countries.groupby(\"Q3\").size().reset_index(name=\"Count\")\ncountries.loc[2]['code'] = 'test'\nfor i,country in enumerate(countries['Q3']):\n    user_input = country\n    mapping = {country.name: country.alpha_3 for country in pycountry.countries}\n    countries.set_value(i, 'code', mapping.get(user_input))\ndata = [ dict(\n        type = 'choropleth',\n        locations = countries['code'],\n        z = countries['Count'],\n        text = countries['Q3'],\n        colorscale = [[0,\"rgb(5, 10, 172)\"],[0.35,\"rgb(40, 60, 190)\"],[0.5,\"rgb(70, 100, 245)\"],\\\n            [0.6,\"rgb(90, 120, 245)\"],[0.7,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '',\n            title = 'Total Count'),\n      ) ]\n\nlayout = dict(\n    title = 'countries using AWS',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(type = 'Mercator')\n    )\n)\n\nfig = dict( data=data, layout=layout )\npy.iplot( fig, validate=False)","46cd84a5":"countries = kaggle_choice_df[[\"Q29_Part_3\",\"Q3\"]][1:]\ncountries = countries.dropna()\ncountries = countries.groupby(\"Q3\").size().reset_index(name=\"Count\")\ncountries.loc[2]['code'] = 'test'\nfor i,country in enumerate(countries['Q3']):\n    user_input = country\n    mapping = {country.name: country.alpha_3 for country in pycountry.countries}\n    countries.set_value(i, 'code', mapping.get(user_input))\ndata = [ dict(\n        type = 'choropleth',\n        locations = countries['code'],\n        z = countries['Count'],\n        text = countries['Q3'],\n        colorscale = [[0,\"rgb(5, 10, 172)\"],[0.35,\"rgb(40, 60, 190)\"],[0.5,\"rgb(70, 100, 245)\"],\\\n            [0.6,\"rgb(90, 120, 245)\"],[0.7,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (color = 'rgb(180,180,180)',width = 0.5) ),\n        colorbar = dict(autotick = False,tickprefix = '',title = 'Total Count'))]\n\nlayout = dict(\n    title = 'countries using Azure',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(type = 'Mercator')\n    )\n)\n\nfig = dict( data=data, layout=layout )\npy.iplot( fig, validate=False)","87a1de05":"country_salary_design = kaggle_choice_df[(kaggle_choice_df[\"Q3\"] == \"India\") | (kaggle_choice_df[\"Q3\"] == \"United States of America\")]\ncountry_salary_design = country_salary_design[[\"Q3\",\"Q5\",\"Q10\"]].groupby([\"Q3\",\"Q5\",\"Q10\"]).size().reset_index(name=\"count\")\nfig = px.line(country_salary_design, x=\"Q3\", y=\"count\", color=\"Q5\", line_group=\"Q10\", hover_name=\"Q5\",line_shape=\"spline\", render_mode=\"svg\")\nfig.show()","25280ab7":"country_salary_design = kaggle_choice_df[(kaggle_choice_df[\"Q3\"] == \"India\") | (kaggle_choice_df[\"Q3\"] == \"United States of America\")]\ncountry_salary_design = country_salary_design[[\"Q3\",\"Q5\",\"Q10\"]].groupby([\"Q3\",\"Q5\",\"Q10\"]).size().reset_index(name=\"count\")\ncountry_salary_design = country_salary_design.rename(columns={\"Q3\":\"Country\",\"Q5\":\"Designation\",\"Q10\":\"Salary\"})\nfig = px.scatter(country_salary_design, x=\"Salary\", y=\"Designation\",size=\"count\", color=\"Country\")\nfig.show()","85dfb451":"text = \"\"\nfor i in range(1,13):\n    temp_df = kaggle_choice_df['Q24_Part_' + str(i) ][1:].dropna().values\n    temp_df = ' ' .join(val for val in temp_df)\n    text = text + temp_df\ndef generate_wordcloud(text): \n    wordcloud = WordCloud(width=1600, height=800, stopwords = {'None','etc','and','other'}).generate(text)\n    plt.figure(figsize=(20,10), facecolor='k')\n    plt.imshow(wordcloud,interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n    plt.show()\ngenerate_wordcloud(text)","8056c05a":"text = \"\"\nfor i in range(1,13):\n    temp_df = kaggle_choice_df['Q13_Part_' + str(i) ][1:].dropna().values\n    temp_df = ' ' .join(val for val in temp_df)\n    text = text + temp_df\ndef generate_wordcloud(text): \n    wordcloud = WordCloud(width=1600, height=800, stopwords = {'None','etc','and','other'}).generate(text)\n    plt.figure( figsize=(20,10), facecolor='k')\n    plt.imshow(wordcloud,interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n    plt.show()\ngenerate_wordcloud(text)","b5a59fc0":"text = \"\"\nfor i in range(1,8):\n    temp_df = kaggle_choice_df['Q25_Part_' + str(i) ][1:].dropna().values\n    temp_df = ' ' .join(val for val in temp_df)\n    text = text + temp_df\nfor i in range(1,7):\n    temp_df = kaggle_choice_df['Q26_Part_' + str(i) ][1:].dropna().values\n    temp_df = ' ' .join(val for val in temp_df)\n    text = text + temp_df\nfor i in range(1,6):\n    temp_df = kaggle_choice_df['Q27_Part_' + str(i) ][1:].dropna().values\n    temp_df = ' ' .join(val for val in temp_df)\n    text = text + temp_df\ndef generate_wordcloud(text): \n    wordcloud = WordCloud(width=1600, height=800, stopwords = {'None','etc','and','other'}).generate(text)\n    plt.figure( figsize=(20,10), facecolor='k')\n    plt.imshow(wordcloud,interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.tight_layout(pad=0)\n    plt.show()\ngenerate_wordcloud(text)","8307da52":"<img src=\"https:\/\/cdn.app.compendium.com\/uploads\/user\/a7c086f7-9adb-4d2c-90fa-e26177af8317\/c2dea8f7-8c26-44de-ae5f-5dc019485c8c\/Image\/60691dbc9e7de7390b93ea5284177459\/data_analytics_banner.png\"\/> ","de2c2014":"# What Happens in different size of companies","c58cf4ef":"# Where do people apply AI in regular life","96b079ee":"## another view of salary distribution in India and USA","b185ff98":"# Overview <br>\nWelcome to Kaggle's third annual Machine Learning and Data Science Survey \u2015 and our second-ever survey data challenge.<br>\n\nThis year, as in 2017 and 2018, we set out to conduct an industry-wide survey that presents a truly comprehensive view of the state of data science and machine learning. The survey was live for three weeks in October, and after cleaning the data we finished with 19,717 responses!<br>\n\nThere's a lot to explore here. The results include raw numbers about who is working with data, what\u2019s happening with machine learning in different industries, and the best ways for new data scientists to break into the field. We've published the data in as raw a format as possible without compromising anonymization, which makes it an unusual example of a survey dataset.<br>","66a6d564":"# Coders as experience grows","b8fcdffc":"## Let's analyse the data","dd593922":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Scikit-learn tops.\n    * Tight competetion between tensorflow and keras.","545266c3":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * All time favourite Jupyter and R studio tops.\n    * VS code editor tops 2nd in small scale company.","30057648":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Most of the companies use it for word embeddings.","3bef771d":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * 843 employees in startups are getting paid < $999. reason they may be freshers or interns.","78c3f989":"# Favourite place to study data science","93741c2f":"## Cloud platform w.r.t age","1763d4fe":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * From python its matplotlib and seaborn, for R its ggplot.\n    * Plotly is gaining good attention.","0b36cbb4":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Graph looks clumsy would suggest to select one type of designation at a time.\n    * select only Data Scientist in USA 164 ppl get paid between 150,000-199,999$ and in India there are only 3 people.\n    ","3880d986":"# Degree distribution in percentage","b1cb5f89":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Doesn't matter where you work you should know how to use excel.","90fbd130":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Python is most prefered across experience groups.","80fa9090":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Most of the Data Scientist use GCP or AWS.\n    * Small scale Companies spend less on Azure platform.\n    ","b0d62244":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * All group of experience people perfer kaggle and blogs.","6b20fc4a":"# Top ML algorithm used","ab03b6b9":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n - Most of the company employees fall under the age of 25-29 and 30-34\n - Company from 0-49 employee range has 2nd most age group of 22-24.\n - In all the company size we have employees who are aged more than 70. lots of experience can be gained from them.","be119e54":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Most of the companies use it for Image classification or general purpose.","729c5b9d":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * all the age range AWS is mostly prefered\n    * only the age between 18-21 GCP is hig\n    ","549a407e":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Data scientist are more in startups.\n    * Research scientist are more in startups.\n    * Large scale companies have more data analyst than business analyst.","ebc66470":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Start ups are spending more time in research than other scale company\n    * All types of company follows same pattern.","ab061b36":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Startups companies are exploring in the ML.\n    * Big scale companies either are established ML in production or they have started using ML in production.\n    * Most of the companies from range of 50-249 still do not used ML","e0ace33a":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * Python, SQL, R are most widely used.\n    * Happy to see MATLAB still in use.","cfdb0b6a":"<u><span style=\"font-family:12. Comic Sans MS; font-size:1.5em;\">Insights<\/span><\/u>\n\n    * All group of experience ppl uses Jupyter.\n    * Tight competetion between vs code, R studio and pyCharm.","ac63eba5":"# Gender distribution in percentage","e50cde4a":"# Salary difference between India and USA","96649ffc":"# AWS VS GCP VS AZURE"}}