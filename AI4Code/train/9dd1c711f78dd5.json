{"cell_type":{"6eb41961":"code","64523cf6":"code","46825c91":"code","b26d0988":"code","91671464":"code","c9416fd6":"code","c54a3d2e":"code","a200e4ec":"code","d40febe5":"code","7fca4dd6":"code","a3110ec3":"code","4ceb5035":"code","03f13953":"code","0a98a6d7":"code","bbeb93ff":"code","d4809be4":"code","3a749b52":"code","e9fff462":"code","2875d959":"code","a6837920":"code","9dbcb364":"code","c2f61600":"code","e5eb33d7":"code","fc7d84c1":"code","84c409dd":"code","3d5c68ff":"code","ef546d16":"code","a58840bd":"code","22c18919":"code","e6c25979":"code","1ba14b5f":"code","745c9259":"code","b5541140":"code","00997c2a":"code","363c6e94":"code","3549ffbc":"code","4cfea957":"code","815dcd11":"code","a3923a73":"markdown","52c8b715":"markdown","77c437b6":"markdown","7d8bf773":"markdown","2d61dd49":"markdown","292219cd":"markdown","709276ba":"markdown","5bcb4f47":"markdown","c3ba5d40":"markdown","41882d32":"markdown","3dafafa1":"markdown","be49ea16":"markdown","d0b3bead":"markdown","c1227a8f":"markdown","cd015bf0":"markdown","d451706f":"markdown"},"source":{"6eb41961":"import dask.dataframe as dd\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nfrom surprise import Reader\nfrom surprise import Dataset\nfrom surprise.model_selection import cross_validate\nfrom surprise import SlopeOne\nfrom surprise import CoClustering\nfrom surprise import BaselineOnly\nfrom surprise.accuracy import rmse\nfrom surprise import accuracy\nfrom surprise.model_selection import train_test_split\nfrom collections import defaultdict","64523cf6":"ratings = dd.read_csv('..\/input\/anime-recommendations-database\/rating.csv')\nratings.head(2)","46825c91":"#Para evitar confusiones con los nombres\nratings=ratings.rename(columns = {'rating':'user_rating'})","b26d0988":"#importamos la data de anime\nanime = dd.read_csv('..\/input\/anime-recommendations-database\/anime.csv')\nanime.head(2)","91671464":"#Numero de usuarios unicos \nratings.user_id.nunique().compute()","c9416fd6":"#informaci\u00f3n basica sobre sobre ratings\nsns.distplot(ratings.user_rating)\nratings.describe().compute()","c54a3d2e":"users=ratings.groupby('user_id').agg({'user_rating':['mean','count','std']})\nusers.columns=['media','n_puntuaciones','std_puntuaciones']","a200e4ec":"sns.distplot(users.media,kde=False)\nusers.media.describe().compute()","d40febe5":"sns.distplot(users.n_puntuaciones)\nusers.n_puntuaciones.describe().compute()","7fca4dd6":"# Esto significa:\nsin_puntuaciones=ratings.groupby(['user_id']).agg({'user_rating':['count','sum']})\nprint (len(sin_puntuaciones[-sin_puntuaciones['user_rating','sum']==sin_puntuaciones['user_rating','count']]),' usuarios perdidos')","a3110ec3":"#Nos deshacemos de ambos\nratings=ratings[ratings.user_rating>0]","4ceb5035":"users=ratings.groupby('user_id').agg({'user_rating':['mean','count','std']})\nusers.columns=['MPRU','n_puntuaciones','std_puntuaciones']","03f13953":"# %  de perdida de usuarios con solo una puntuaci\u00f3n:\n100*len(users[users.n_puntuaciones<=1])\/len(users)","0a98a6d7":"# % de perdida de usuarios con 2 o menos puntuaciones:\n100*len(users[users.n_puntuaciones<=2])\/len(users)","bbeb93ff":"# % de perdida de usuarios con 3 o menos puntuaciones:\n100*len(users[users.n_puntuaciones<=3])\/len(users)","d4809be4":"#usuarios con 4 o m\u00e1s puntuaciones\nusers=users[users.n_puntuaciones>3]","3a749b52":"#Juntamos los datasets para tener la informacipon completa\ndata=dd.merge(ratings,users,on='user_id',how='inner')","e9fff462":"df=dd.merge(data[['user_id','anime_id','user_rating']],anime[['anime_id','name']],on='anime_id',how='left',indicator=True)\n","2875d959":"df.head()","a6837920":"#Revisemos Cuantos no nos cruzaron.\nlen(data)-len(df[df._merge=='both'])","9dbcb364":"#Esto significa que hay animes id sin nombre correspondiente.\ndf.anime_id[df['_merge']=='left_only'].compute().unique()","c2f61600":"#dejamos fuera aquellas filas cuyo anime_id no se corresponde entre los dos sets.\ndf=df[df._merge=='both']","e5eb33d7":"df_triple=df[['user_id','anime_id','user_rating']]","fc7d84c1":"len(df_triple)","84c409dd":"reader = Reader(rating_scale=(1.0, 10.0))\ndata = Dataset.load_from_df(df_triple[['user_id', 'anime_id', 'user_rating']], reader)","3d5c68ff":"#El performance del algoritmo estara dado por una validaci\u00f3n cruzada de 5 iteraciones.\n#El conjunto de testeo es una valoraci\u00f3n por usuario en el dataset.\nresults = cross_validate(BaselineOnly(), data, measures=['RMSE'], cv=5, verbose=False)\nbasel = pd.DataFrame.from_dict(results).mean(axis=0)\nbasel = basel.append(pd.Series([str(BaselineOnly()).split(' ')[0].split('.')[-1]], index=['BaselineOnly()']))","ef546d16":"basel","a58840bd":"#El performance del algoritmo estara dado por una validaci\u00f3n cruzada de 5 iteraciones.\n#El conjunto de testeo es una valoraci\u00f3n por usuario en el dataset.\nresults = cross_validate(CoClustering(), data, measures=['RMSE'], cv=5, verbose=False)\ncoclus = pd.DataFrame.from_dict(results).mean(axis=0)\ncoclus = coclus.append(pd.Series([str(CoClustering()).split(' ')[0].split('.')[-1]], index=['CoClustering()']))","22c18919":"coclus","e6c25979":"#El performance del algoritmo estara dado por una validaci\u00f3n cruzada de 5 iteraciones.\n#El conjunto de testeo es una valoraci\u00f3n por usuario en el dataset.\nresults = cross_validate(SlopeOne(), data, measures=['RMSE'], cv=5, verbose=False)\nslope = pd.DataFrame.from_dict(results).mean(axis=0)\nslope = slope.append(pd.Series([str(SlopeOne()).split(' ')[0].split('.')[-1]], index=['SlopeOne()']))","1ba14b5f":"slope","745c9259":"trainset, testset = train_test_split(data, test_size=0.20)\nslopeone=SlopeOne()\npredict_test = slopeone.fit(trainset).test(testset)\naccuracy.rmse(predict_test)","b5541140":"def top(user,predict_test=predict_test,anime=anime):\n    anime=anime[['anime_id','name']]\n    predichos=dd.from_pandas(pd.DataFrame.from_records(predict_test), npartitions=6)\n    predichos=predichos[[0,1,2,3]]\n    predichos.columns=['user_id','anime_id','p_real','p_predicha']\n    predichos=predichos[predichos.user_id==user]\n    predichos.p_predicha=predichos.p_predicha.round(decimals=0)\n    predichos=predichos.compute()\n    #Ya lo redujimos lo suficiente como para usar pandas con normalidad.\n    predichos=pd.DataFrame(predichos.sort_values(by='p_predicha',ascending=False).head(3))\n    return(pd.merge(predichos,anime.compute(),on='anime_id',how='inner'))","00997c2a":"predichos=dd.from_pandas(pd.DataFrame.from_records(predict_test), npartitions=6)\npredichos=predichos[[0,1,2,3]]\npredichos.columns=['user_id','anime_id','p_real','p_predicha']","363c6e94":"top(33888)","3549ffbc":"top(28859)","4cfea957":"top(5255)","815dcd11":"top(65451)","a3923a73":"El algoritmo con mejor desempe\u00f1o en terminos de error cuadratico medio del conjunto de testeo es SlopeOne, veamos como se comporta con un set de testeo del 20%.","52c8b715":"#### El anime_id 30913 no tiene un nombre correspondiente, y ha sido puntuado en dos ocasiones.\n\n","77c437b6":"### 5.- Escogiendo el Mejor Algoritmo\nProbaremos 3 algoritmos que por lo general dan buenos resultados, todos disponibles en la libreria \"Surprise\".\n\n### BaselineOnly\nEste algoritmo basico predice de la siguiente forma:\n\n$$b_{ui} = \\mu + b_{u} + b_{i}$$\ndonde $b_{ui}$ es la puntuaci\u00f3n desconocida, $\\mu$ la puntuaci\u00f3n media del anime, $b_{u}$ es la desviaci\u00f3n de puntuaciones del usuario, y $b_{i}$ la desviaci\u00f3n de este anime con respecto a la media del total de puntuaciones.\n\nPor ejemplo, supongamos que queremos una estimaci\u00f3n de la calificaci\u00f3n de Fullmetal Alchemist Brotherhood por un usuario X digamos que la calificaci\u00f3n promedio de todas los animes $\\mu$, es de 8.2 Adem\u00e1s, FMA Brotherhood es mejor que un anime promedio, por lo que digamos que tiene una puntuaci\u00f3n 1.5 por encima del promedio ( $b_{i}$ ). Por otro lado, X es un usuario exigente que tiende a calificar 0.3 m\u00e1s bajo que el promedio ( $b_{u}$ ). Por lo tanto, la estimaci\u00f3n de Baseline ser\u00eda:$$ 8.2-0.3+1.5=9.4$$\n\nhttp:\/\/courses.ischool.berkeley.edu\/i290-dm\/s11\/SECURE\/a1-koren.pdf\n\nhttps:\/\/surprise.readthedocs.io\/en\/stable\/basic_algorithms.html","7d8bf773":"#### Es posible que algunos datos no nos hayam cruzado, revisemos.\n","2d61dd49":"### 4.- Selecci\u00f3n de datos utiles\nNos interesan los usuarios que hayan evaluado almenos 1 anime, y sin considerar las valoraciones -1 ya que no aportan informaci\u00f3n a los ratings. Adem\u00e1s tampoco nos sirven usuarios con muy pocas valoraciones.","292219cd":"#### Un 10.22% nos parece aceptable, por lo que usaremos usuarios con 4 o m\u00e1s puntuaciones.\n","709276ba":"### Hagamos un top por usuario con los resultados","5bcb4f47":"### SlopeOne\nSus predicciones se definen como: $$ \\hat{r}_{ui} = \\mu_u + \\frac{1}{|R_i(u)|}\\sum\\limits_{j \\in R_i(u)} \\text{dev}(i, j)$$ donde$R_i(u)$ es el conjunto de elementos relevantes, es decir, el conjunto de elementos j valorados por por el usuario u que tambi\u00e9n tienen al menos un usuario com\u00fan con i. Adem\u00e1s $\\text{dev}(i, j)$ se define como la diferencia promedio entre las calificaciones de i y las de j.\n\n\"Los algoritmos de Slope One son f\u00e1ciles de implementar, eficientes para consultar, razonablemente precisos y admiten consultas en l\u00ednea y actualizaciones din\u00e1micas, lo que los convierte en buenos candidatos para sistemas del mundo real. El esquema b\u00e1sico de pendiente uno se sugiere como un nuevo esquema de referencia para el filtrado colaborativo. Al tener en cuenta los elementos que a un usuario le gustaron por separado de los elementos que no le gustaron, logramos resultados competitivos...\"\n\nhttps:\/\/arxiv.org\/abs\/cs\/0702144\n\nhttps:\/\/surprise.readthedocs.io\/en\/stable\/slope_one.html#surprise.prediction_algorithms.slope_one.SlopeOne","c3ba5d40":"### Co-Clustering\nTanto a los usuarios como a los elementos se les asignan clusters $C_u$ y $C_i$ respectivamente, y algunos co-clusters $C_{ui}$.\n\nLa predicci\u00f3n se hace de la siguiente forma:$$\\hat{r}_{ui} = \\overline{C_{ui}} + (\\mu_u - \\overline{C_u}) + (\\mu_i- \\overline{C_i})$$donde $\\overline{C_{ui}}$ es la calificaci\u00f3n promedio de los co-clusters. $\\overline{C_u}$ es La calificaci\u00f3n promedio de los clusters de usuarios est\u00e1 denotada y $\\overline{C_u}$ es la calificaci\u00f3n del cluster de elementos (items). $\\mu_u$ es la media de la puntuaci\u00f3n del usuario u, y $\\mu_i$ es la media de puntuaciones dado al item i.\n\nhttps:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.113.6458&rep=rep1&type=pdf\n\nhttps:\/\/surprise.readthedocs.io\/en\/stable\/notation_standards.html#george-2005","41882d32":"\n### 1.- Diccionario de atributos\nanime_id - Identificador de anime de la pagina myanimelist.net's, es unico para cada anime.\n\nname - Nombre Completo del anime.\n\ngenre - Genero del anime.\n\ntype - Serie, pelicula, Ova etc.\n\nepisodes - Cuantos Episodios tiene.\n\nrating - Puntuaci\u00f3n del anime.\n\nmembers - Numero de miembros en su grupo de fans.\n\nuser_id - Codigo de identificaci\u00f3n de usuario, se genera aleatoreamente.\n\nrating - Puntuaci\u00f3n de 1 a 10. El valor -1 denota animes vistos por el usuario pero no puntuados.\n\n","3dafafa1":"Tampoco nos sirven usuarios con muy pocas valoraciones, no nos gustar\u00eda perder m\u00e1s de un 10%\n","be49ea16":"### 3.- Importaci\u00f3n de Datos","d0b3bead":"### 3.1- Exploraci\u00f3n de datos","c1227a8f":"\n### 2.- Importaci\u00f3n de Librerias","cd015bf0":"### 3.2.- Conclusiones de la Exploraci\u00f3n\nLa media de las puntuaciones de los usuarios es 8.2277 con una aumento en la puntuaci\u00f3n 10. A priori se esperar\u00eda puntuaciones m\u00e1s centrado en 5, que no sea as\u00ed puede explicarse suponiendo el sesgo de que esta base est\u00e9 hecha con personas a las que en general simplemente les gusta el anime. Sabemos que las puntuaciones se realizan en numeros enteros, por lo tanto podemos decir que puntuaciones menores qu\u00e9 8 significar\u00edan algo como \"me gust\u00f3 pero no tanto\", mientras que las superiores a 8 son verdaderas medidas de que les gusto, a la vez que la puntuaci\u00f3n 8 significar\u00eda algo como \"me gust\u00f3 lo mismo que la mayor\u00eda\".","d451706f":"**Juguemos un poco ahora**\np_real - Es la puntuaci\u00f3n que realmente dieron, por supuesto el algoritmo no tomo en cuenta estas puntuaciones para su predicci\u00f3n.\n\np_predicha - Es la puntuaci\u00f3n predicha por el algoritmo.[](http:\/\/)"}}