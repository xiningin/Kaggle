{"cell_type":{"80e0039c":"code","13fefa9f":"code","ef6cb95a":"code","650fb7cf":"code","827df5ba":"code","8d131733":"code","8345ae18":"code","382784a8":"code","983a4452":"code","f028ce0d":"code","8cb5cc3f":"code","d4aa193f":"code","95cebaef":"code","ad9831bf":"code","05167b8e":"code","d39a8548":"code","6b7557ac":"code","1689fd43":"code","f1524d93":"code","5c603f6c":"code","c68ae754":"code","eafac86e":"code","1657d4c2":"code","d90a7ab5":"code","b74f1d28":"code","09c52a4b":"code","cdd695b8":"code","73508a53":"code","fd6d1b65":"code","b4daf56c":"code","84594373":"markdown","c9ad03d6":"markdown","6e2f00d6":"markdown","081ab84f":"markdown"},"source":{"80e0039c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","13fefa9f":"data = pd.read_json(\"..\/input\/roam_prescription_based_prediction.jsonl\", lines=True)","ef6cb95a":"data.head(20)","650fb7cf":"data.shape","827df5ba":"### not needed, data already parsed as dictionaries from json\n# https:\/\/stackoverflow.com\/questions\/38231591\/splitting-dictionary-list-inside-a-pandas-column-into-separate-columns\n# data['provider_variables'].map(eval)\ndata.dtypes","8d131733":"provider_data = pd.concat([data.drop(['provider_variables'], axis=1), data['provider_variables'].apply(pd.Series)], axis=1)\n# provider_data = pd.DataFrame([v for v in data[\"provider_variables\"]]) ## ORIG - made a new DF\nprovider_data.shape","8345ae18":"provider_data.head()","382784a8":"provider_data.groupby(\"specialty\")[\"years_practicing\"].mean().sort_values(ascending=False)","983a4452":"provider_data.brand_name_rx_count.describe()","f028ce0d":"provider_data.generic_rx_count.describe()","8cb5cc3f":"# provider_data.drop_duplicates(inplace=True)\n# provider_data = provider_data.loc[(provider_data.generic_rx_count> 9) & (provider_data.brand_name_rx_count > 9) ]\nprovider_data = provider_data.loc[(provider_data.generic_rx_count + provider_data.brand_name_rx_count) > 24 ]\nprovider_data.shape","d4aa193f":"from collections import Counter\n\nrx_counts = Counter()\n\nfor rx_dist in data.cms_prescription_counts:\n    rx_counts.update(rx_dist)\n\nrx_series = pd.Series(rx_counts)\n\nrx_series.sort_values(ascending=False)","95cebaef":"# def merge_counts(dicts):\n#     merged = Counter()\n    \n#     for d in dicts:\n#         merged.update(d)\n#     return merged.most_common(20)\n\n# merged_data = pd.concat([data, provider_data], axis=1)\n\n# merged_data.groupby(\"specialty\")[\"cms_prescription_counts\"].apply(merge_counts)\n# merged_data.head()","ad9831bf":"# merged_data.shape","05167b8e":"# merged_data.groupby(\"specialty\")[\"cms_prescription_counts\"].apply(merge_counts)[\"General Practice\"]","d39a8548":"provider_data[\"specialty\"].value_counts()","6b7557ac":"provider_data.head()","1689fd43":"provider_data[\"specialty\"] = provider_data[\"specialty\"].str.replace(\"Radiation Oncology\",\"Oncology\").str.replace(\"Medical Oncology\",\"Oncology\").str.replace(\"General Practice\",\"General_Practice\")","f1524d93":"provider_data[\"specialty_abbrev\"] = provider_data[\"specialty\"].str.split().str.get(0)","5c603f6c":"provider_data.isna().sum()","c68ae754":"provider_data.columns","eafac86e":"provider_data[[ 'npi', 'settlement_type', 'generic_rx_count',\n       'specialty', 'years_practicing', 'gender', 'region',\n       'brand_name_rx_count', 'specialty_abbrev']].nunique()","1657d4c2":"# get counts of specialities and filter rare ones\nprovider_data[\"specialty_abbrev_counts\"] = provider_data.groupby(\"specialty_abbrev\")[\"years_practicing\"].transform(\"count\")\nprovider_data[\"specialty_abbrev_counts\"].hist()","d90a7ab5":"provider_data[\"specialty_abbrev_counts\"].describe()","b74f1d28":"# filter data for rare specialties!\nprovider_data = provider_data.loc[provider_data.groupby(\"specialty\")[\"years_practicing\"].transform(\"count\") > 40]\n# provider_data = provider_data.loc[provider_data[\"specialty_abbrev_counts\"]>300]\nprovider_data = provider_data.loc[provider_data.groupby(\"specialty_abbrev_counts\")[\"years_practicing\"].transform(\"count\") > 400]\nprovider_data.shape","09c52a4b":"provider_data.groupby(\"specialty\")[\"years_practicing\"].transform(\"count\").describe()","cdd695b8":"provider_data[\"specialty\"].value_counts()","73508a53":"# many all duplicate rows \nprint(provider_data.shape)\nprovider_data.drop_duplicates(inplace=True,subset=['settlement_type', 'generic_rx_count',\n       'specialty', 'years_practicing', 'gender', 'region',\n       'brand_name_rx_count'])\nprint(provider_data.shape)","fd6d1b65":"provider_data.nunique()","b4daf56c":"provider_data.to_csv(\"medical_provider_specialtyFilt.csv.gz\",index=False,compression=\"gzip\")","84594373":"### Expand the inner dictionaries \n* We'll leave the drugs as a dict for now, otherwise it would give us thousands of columns\n","c9ad03d6":"#### Clean specialities: get first word per specialty. VERY messy, but faster than a real ontology\n* https:\/\/stackoverflow.com\/questions\/37504672\/pandas-dataframe-return-first-word-in-string-for-column\n* we'll make an exception for some cases in the first few rows","6e2f00d6":"### Filter by counts per specialty + clean","081ab84f":"*  based on : https:\/\/github.com\/roamanalytics\/roamresearch\/blob\/master\/BlogPosts\/Prescription_based_prediction\/Prescription_based_prediction_post.ipynb\n    * filter doctors for whom we have rich drugprescription history \/ diversity\n      * providers who prescribed at least 10 distinct drugs,"}}