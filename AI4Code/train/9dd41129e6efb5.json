{"cell_type":{"e6e2db12":"code","eb08047c":"code","cfb6b2e2":"code","8a64b779":"code","611c12a6":"code","b13c57c7":"code","b105885f":"code","41b1a641":"code","3b639033":"code","457af0fd":"code","a54ce2a0":"code","cd5b4feb":"code","48a50d8c":"code","1b1d6ea8":"code","e3964b86":"code","e601fff8":"code","ea5f0d09":"code","a204c7b2":"code","479429cd":"code","828c51c5":"code","4f46bf41":"code","4d243bd7":"code","7fb169dc":"code","7f2720c4":"code","f7d24f82":"code","50249d85":"code","0a4b7e9e":"code","3375141a":"code","e7f63893":"code","6163fafc":"code","7222b2de":"code","0492eee2":"code","ca7bbc72":"code","cc94bca0":"code","0bbc4930":"code","6c2e4c63":"code","b4a14bba":"code","dd3a4ea7":"code","8edaab68":"code","d8652155":"code","33367790":"code","4071b5e4":"code","09cf977e":"code","076a91e7":"code","c1514cd8":"code","cf8bd884":"code","0c0f63d9":"code","cdd81fc2":"code","bfb5fc96":"code","dc7e71eb":"code","54cf8885":"markdown","90420848":"markdown","09db503b":"markdown","857826d0":"markdown","58907926":"markdown","4228a58a":"markdown","fe112ec5":"markdown","c427df98":"markdown","c9bdd16c":"markdown","31df3488":"markdown","c71908e9":"markdown","50f5694d":"markdown","f056e220":"markdown","eba9e580":"markdown"},"source":{"e6e2db12":"import warnings\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport pandas_profiling \n\nwarnings.filterwarnings('ignore')\n\n\n%matplotlib inline","eb08047c":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\nsubmission_data = pd.read_csv('..\/input\/gender_submission.csv')\n\n# \u4f55\u304b\u3068\u4f7f\u3046\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001train\u3068test\u3092\u4f75\u305b\u305f\u30c7\u30fc\u30bf\u3082\u4f5c\u3063\u3066\u304a\u304f\ndata = pd.concat((train, test), axis=0)","cfb6b2e2":"train.head()","8a64b779":"train.info()","611c12a6":"pandas_profiling.ProfileReport(train)","b13c57c7":"pandas_profiling.ProfileReport(test)","b105885f":"sns.countplot(x='Pclass',\n              data=train,\n              hue='Survived')","41b1a641":"sns.countplot(x='Parch',\n              hue='Survived',\n              data=train)","3b639033":"train['FamilySize'] = train['SibSp'] + train['Parch']","457af0fd":"train[['SibSp', 'Parch', 'FamilySize']].head()","a54ce2a0":"train['FamilySize'].value_counts()","cd5b4feb":"sns.countplot(x='FamilySize',\n              hue='Survived', # \u5c64\u5316, Stratified, \u5c64\u5225\u89e3\u6790\n              data=train)","48a50d8c":"# Show docstring\n# sns.countplot?","1b1d6ea8":"sns.countplot(x='SibSp',\n              hue='Survived',\n              data=train)","e3964b86":"sns.countplot(x='Sex',\n              hue='Survived',\n              data=train)","e601fff8":"X = train.drop(columns=['PassengerId', 'Survived']).copy()\ny = train['Survived'].copy()","ea5f0d09":"X.head()","a204c7b2":"y","479429cd":"from sklearn.tree import DecisionTreeClassifier\n\n# clf: Classifier\u306e\u7565\u3002\u3088\u304f\u4f7f\u308f\u308c\u308b\u7701\u7565\u3002\n# e.g. model, tree_model, dct, dt\nclf = DecisionTreeClassifier()\n\n# clf.fit(X, y) # ValueError!!!","828c51c5":"X = pd.get_dummies(X)\n\nX.head()","4f46bf41":"train['Name']","4d243bd7":"# clf.fit(X, y) # ValueError!!!","7fb169dc":"train.isnull().sum()","7f2720c4":"train[train['Age'].isnull()]","f7d24f82":"# \u6b20\u640d\u304c\u3042\u308b\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ntrain.isnull().sum()","50249d85":"# Cabin\u306f\u88dc\u5b8c\u304c\u96e3\u3057\u3044\u306e\u3067\u3001\u9664\u5916\u3059\u308b\ntrain.drop(columns='Cabin', inplace=True)","0a4b7e9e":"# \u5168\u4f53\u5e74\u9f62\u306e\u4e2d\u592e\u5024\u3067\u4e00\u6c17\u306b\u88dc\u5b8c\u3059\u308b\ntrain['Age'] = train['Age'].fillna(value=data['Age'].median())","3375141a":"# \u5206\u5e03\u3092\u78ba\u8a8d\u3059\u308b\nsns.distplot(train['Age'])","e7f63893":"train['Embarked'].value_counts()","6163fafc":"train['Embarked'].mode()","7222b2de":"# \u6700\u983b\u5024\u3067\u88dc\u5b8c\u3059\u308b\ntrain['Embarked'] = train['Embarked'].fillna(value=train['Embarked'].mode().values[0])","0492eee2":"train.isnull().sum()","ca7bbc72":"y_train = train['Survived'].copy()","cc94bca0":"# Name, Ticket \u306f\u4eca\u56de\u306f\u9664\u5916\u3059\u308b\ntrain.drop(columns=['Name', 'Ticket'], inplace=True)\ntrain.drop(columns=['Survived', 'PassengerId'], inplace=True)","0bbc4930":"# \u6539\u3081\u3066\u30c0\u30df\u30fc\u5909\u6570\u5316\nX_train = pd.get_dummies(train, drop_first=True) # drop_first\u3092\u3064\u3051\u308b\u65b9\u3067\u9032\u3081\u308b\n\n# \u4e2d\u8eab\u3092\u78ba\u8a8d\nX_train.head()","6c2e4c63":"# \u3044\u3056\u3001\u5b66\u7fd2\nclf = DecisionTreeClassifier(max_depth=4)\n\nclf.fit(X_train, y_train)","b4a14bba":"train_acc = clf.score(X_train, y_train)\n\nprint(f'Training Accuracy: {train_acc:.2f}')","dd3a4ea7":"# !pip install pydotplus","8edaab68":"import pydotplus\nfrom IPython.display import Image\nfrom sklearn.externals.six import StringIO\nfrom sklearn.tree import export_graphviz\n\nexport_graphviz(clf,\n                out_file='tree.dot',\n                feature_names=X_train.columns,\n                class_names=[\"0\", \"1\"],\n                filled=True,\n                rounded=True)\ng = pydotplus.graph_from_dot_file(path='tree.dot')\n\nImage(g.create_png())","d8652155":"clf.feature_importances_","33367790":"# \u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u53ef\u8996\u5316\ndef visualize_feature_importance(model, X_train):\n    df = pd.DataFrame()\n    df['feature_name'] = X_train.columns\n    df['feature_importance'] = model.feature_importances_\n\n    # \u964d\u9806\u306e\u307b\u3046\u304c\u898b\u3084\u3059\u3044\u306e\u3067\u30bd\u30fc\u30c8\n    df.sort_values(by='feature_importance', ascending=False, inplace=True)\n\n    sns.barplot(x='feature_importance',\n                y='feature_name',\n                data=df)\n    \n\nvisualize_feature_importance(clf, X_train)    ","4071b5e4":"X_test = test.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'])","09cf977e":"X_test.isnull().sum()","076a91e7":"# Age\u306e\u88dc\u5b8c\nX_test['Age'] = X_test['Age'].fillna(value=data['Age'].median())\n\n# Fare\u306e\u88dc\u5b8c(\u3053\u308c\u306ftrain\u306f\u4e0d\u8981\u3060\u3063\u305f\u3053\u3068)\nX_test['Fare'] = X_test['Fare'].fillna(value=data['Fare'].median())","c1514cd8":"# \u30c0\u30df\u30fc\u5909\u6570\u5316\nX_test = pd.get_dummies(X_test, drop_first=True)\n\nX_test.head()","cf8bd884":" X_test['FamilySize'] = X_test['SibSp'] + X_test['Parch']","0c0f63d9":"# pred: Prediction\u306e\u7565\u3002\u3053\u308c\u3082\u3088\u304f\u4f7f\u308f\u308c\u308b\u7701\u7565\u3002train\u306e\u4e88\u6e2c\u304btest\u306e\u4e88\u6e2c\u304b\u306f\u5fae\u5999\u306a\u3068\u3053\u308d\u3002\ny_pred = clf.predict(X_test)\n\ny_pred","cdd81fc2":"submission_data","bfb5fc96":"# \u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u306b\u3059\u308b\u3068\u697d\nsubmission_data['Survived'] =  y_pred","dc7e71eb":"submission_data.to_csv('submission_decision_tree_01.csv', index=False)","54cf8885":"## \u6539\u3081\u3066\u5b66\u7fd2\u306b\u6311\u6226\n","90420848":"## \u304b\u306a\u308a\u96d1\u306b\u30c0\u30df\u30fc\u5909\u6570\u5316\u3092\u884c\u3046(\u305d\u308c\u3067\u3082\u30a8\u30e9\u30fc\u306f\u6b8b\u308b)","09db503b":"### \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\n","857826d0":"## \u6c7a\u5b9a\u6728\u306b\u305d\u306e\u307e\u307e\u6d41\u3057\u8fbc\u3080(\u30a8\u30e9\u30fc\u304c\u3067\u308b\u306e\u3092\u78ba\u8a8d\u3059\u308b)\n","58907926":"### \u305d\u308c\u305e\u308c\u306e\u6b20\u640d\u3092\u88dc\u5b8c","4228a58a":"### \u4e88\u6e2c\u3068SubmissionData\u3078\u306e\u6574\u5f62","fe112ec5":"## SubmissionData \u3064\u304f\u308a","c427df98":"## \u6b20\u640d\u5024(NaN)\u304c\u3042\u308b\u3068\u5b66\u7fd2\u3067\u304d\u306a\u3044\u306e\u3067\u88dc\u5b8c\u3092\u884c\u3046\n- \u3061\u306a\u307f\u306b\u82f1\u8a9e\u3092[](http:\/\/)\u899a\u3048\u3066\u304a\u304f\u3068\u30b0\u30b0\u308b\u3068\u304d\u306b\u4fbf\u5229\u306a\u306e\u3067\u7d39\u4ecb\n    - \u6b20\u640d\u5024: Missing Value\n    - \u88dc\u5b8c: imputation","c9bdd16c":"# \u6c7a\u5b9a\u6728\u3067\u751f\u5b58\u8005\u3092\u4e88\u6e2c\u3059\u308b\n- \u6ce8\u610f\u70b9\n      - \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5206\u5272\u306b\u306f\u89e6\u308c\u306a\u3044\n      - \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3082\u3057\u306a\u3044(\u30ab\u30e9\u30e0\u9664\u5916\u3068\u6b20\u640d\u88dc\u5b8c\u3092\u3061\u3087\u3063\u3068\u3084\u308b\u3060\u3051)\n- Commit\u6642\u306b `An error occurred while commiting kernel: The kernel source must be less than 1 megabyte in size.` \u3068\u51fa\u305f\u5834\u5408\u306f\u53ef\u8996\u5316\u30b3\u30fc\u30c9\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308c\u3070\u5927\u4f53\u5927\u4e08\u592b\u3067\u3059\u3002","31df3488":"# \u3068\u308a\u3042\u3048\u305a\u6c7a\u5b9a\u6728","c71908e9":"### \u6728\u306e\u53ef\u8996\u5316","50f5694d":"# Simple EDA(Exploratory Data Analysis\uff09","f056e220":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3082\u540c\u69d8\u306e\u524d\u51e6\u7406\u3092\u884c\u3046","eba9e580":"## \u5165\u529b\u30c7\u30fc\u30bf\u306e\u305f\u3081\u306e\u6574\u5f62"}}