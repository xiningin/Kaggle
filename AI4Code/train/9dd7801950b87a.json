{"cell_type":{"6e8fe85c":"code","926984b6":"code","ddc0444c":"code","fa296d31":"code","cf5799d6":"code","dff4ecf3":"code","f8149bef":"code","b8464ee8":"code","260661de":"code","afef3880":"code","2f68ac38":"code","ef930269":"code","8fc94219":"code","258ced22":"code","80b1a14f":"code","ff6ed496":"code","89b4edbd":"code","63986a0f":"code","09565775":"code","0fd90090":"code","7b4e9b0b":"code","acb0c535":"code","fade7d15":"code","8237b255":"markdown","067c95b3":"markdown","5ce918bd":"markdown","b7684f40":"markdown","617728ba":"markdown","d28db9ee":"markdown"},"source":{"6e8fe85c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","926984b6":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\n\nimport warnings\nwarnings.filterwarnings('ignore')","ddc0444c":"df = pd.read_csv('\/kaggle\/input\/imdb-most-popular-films-and-series\/imdb.csv',thousands=\",\")\ndf.head()","fa296d31":"def df_info(df):\n    print(f'Dataframe Shape: {df.shape}')\n    summary = pd.DataFrame(df.dtypes, columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isna().sum().values\n    summary['Unique'] = df.nunique().values\n    summary['max'] = df.max().values\n    summary['min'] = df.min().values\n    return summary","cf5799d6":"df_info(df)","dff4ecf3":"# Droping Duplicate values\nprint(f'Dataframe has total: {df.duplicated(keep=\"last\").sum()} duplicate values')\ndf = df.drop_duplicates(keep='last')","f8149bef":"def replace_value(df):\n    df = df.replace({'None':0,'Mild':1,'Moderate':2,'Severe':3,'No Rate':0,'-':0,'No Votes':0})\n    return df","b8464ee8":"df = df.apply(replace_value)","260661de":"df['Episodes'] = df['Episodes'].astype('int')\n\ndf['Votes'] = df['Votes'].replace(\",\", \"\", regex=True)\ndf['Votes'] = df['Votes'].astype('int')\n\ndf['Rate'] = df['Rate'].astype('float')","afef3880":"plt.figure(figsize=(15,7))\nsns.heatmap(df.corr(),annot=True, cmap='Blues')","2f68ac38":"fig = make_subplots(rows=2,cols=2,specs=[[{'type':'bar'},{'type':'bar'}],\n                                         [{'type':'bar'},{'type':'pie'}]],\n                   column_widths=[0.45,0.45],row_heights=[0.40,0.40],\n                   subplot_titles=['Votes Distribution','Rating Distribution','Duration Distribution','Type'])\n\nfig.add_traces(go.Histogram(x = df['Votes']),1,1)\n\nfig.add_traces(go.Histogram(x = df['Rate']),1,2)\n\nfig.add_traces(go.Histogram(x = df['Duration']),2,1)\n\nfig.add_traces(go.Pie(labels = df['Type'].value_counts().index,\n                      values = df['Type'].value_counts(),\n                      hole=.6,\n                     textinfo='label+percent'),2,2)\n\nfig.add_annotation(showarrow=False,text='Film Or Series', x=0.81,y=0.2, xref=\"paper\", yref=\"paper\",font=dict(color='grey',size=14))\n\nfig.update_layout(height=900)\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,'t':160},\n                  paper_bgcolor='rgb(248,248,255)',\n                  plot_bgcolor = 'rgb(248,248,255)',\n                  title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },'text':'Univariate Analysis',\n                        'x':0.45,'y':0.9},\n                 showlegend=False)\n\nfig.show()\n\n","ef930269":"genres = pd.DataFrame(df.Genre.str.split(',', expand=True).stack(), columns= ['Genre'])  \ngenres = genres.reset_index(drop = True)  \ngenres['Genre'] = genres['Genre'].str.lstrip()\ngenres['Genre'] = genres['Genre'].str.rstrip()\n\ngenre_count = pd.DataFrame(genres.groupby(by = ['Genre']).size(),columns = ['count'])  \ngenre_count = genre_count.reset_index().sort_values(by='count',ascending=False)\n\nfig = px.bar(x = genre_count['Genre'],\n             y = genre_count['count'],\n            text = genre_count['count'],\n            title='Genre Count')\n\nfig.update_traces(textposition='outside',marker=dict(color=genre_count['count'],colorscale='PuBu'))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0},\n                   paper_bgcolor ='rgb(248,248,255)',\n                   plot_bgcolor = 'rgb(248,248,255)',\n                   title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9})\nfig.show()","8fc94219":"genre_rate = df.groupby('Genre')['Rate'].mean().reset_index().sort_values(by='Rate',ascending=False).head(10)\n\nfig = px.bar(x = genre_rate['Genre'],\n             y = genre_rate['Rate'],\n            text = genre_rate['Rate'])\n\nfig.update_traces(textposition='outside',marker=dict(color=genre_rate['Rate'],colorscale='earth'))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0},\n                   paper_bgcolor ='rgb(248,248,255)',\n                   plot_bgcolor = 'rgb(248,248,255)',\n                   title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },'text':'Top 10 Genres With highest Rating',\n                        'x':0.45,'y':0.9})\nfig.show()","258ced22":"series = df[df['Type'] == 'Series']\nfilm = df[df['Type'] =='Film']\n\nseries_vote = series.groupby('Name')['Votes'].sum().reset_index().sort_values(by='Votes',ascending=False).head(10)\nfilm_vote = film.groupby('Name')['Votes'].sum().reset_index().sort_values(by='Votes',ascending=False).head(10)\n\nseries_rate = series.sort_values(by='Rate',ascending=False).head(10)\nfilm_rate = film.sort_values(by='Rate',ascending=False).head(10)","80b1a14f":"fig = make_subplots(rows = 1, cols=2,subplot_titles=['Top 10 Series With Most Votes','Top 10 Series With Highest Rating'])\n\nfig.add_traces(go.Bar(x = series_vote['Name'],\n             y = series_vote['Votes'],\n             text = series_vote['Votes'],\n             ),1,1)\n\nfig.add_traces(go.Bar(x = series_rate['Name'],\n             y = series_rate['Rate'],\n             text = series_rate['Rate'],),1,2)\n\nfig.update_traces(textposition='outside',marker=dict(color=series_vote['Votes'],colorscale='mint'))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,'t':150},\n                  paper_bgcolor='rgb(248,248,255)',\n                  plot_bgcolor = 'rgb(248,248,255)',\n                   title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },'text':'Top 10 Series ',\n                        'x':0.45,'y':0.9},\n                 height=600)\nfig.show()","ff6ed496":"fig = make_subplots(rows = 1, cols=2,subplot_titles=['Top 10 Movies With Most Votes','Top 10 Movies With Highest Rating'])\n\nfig.add_traces(go.Bar(x = film_vote['Name'],\n             y = film_vote['Votes'],\n             text = film_vote['Votes'],\n             ),1,1)\n\nfig.add_traces(go.Bar(x = film_rate['Name'],\n             y = film_rate['Rate'],\n             text = film_rate['Rate'],),1,2)\n\nfig.update_traces(textposition='outside',marker=dict(color=series_vote['Votes'],colorscale='peach'))\n\nfig.update_layout(margin={'b':0,'l':0,'r':0,'t':150},\n                  paper_bgcolor='rgb(248,248,255)',\n                  plot_bgcolor = 'rgb(248,248,255)',\n                   title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },'text':'Top 10 Movies ',\n                        'x':0.45,'y':0.9},\n                 height=600)\nfig.show()","89b4edbd":"features = (\n    'Nudity','Violence','Profanity','Frightening','Alcohol'\n)\n\nfor feat in features:\n    fig = (px.scatter(x=df[feat], y=df['Rate'], trendline='ols',trendline_color_override='purple',title=feat + str(' VS Rating'))\n          .update_traces(marker = dict(size = 5, color='plum')))\n    fig.update_layout(margin={'b':0,'l':0,'r':0,'t':150},\n                  paper_bgcolor='rgb(248,248,255)',\n                  plot_bgcolor = 'rgb(248,248,255)',\n                   title={'font':{\n                             'family':'monospace',\n                             'size':22,\n                             'color': 'grey'\n                         },\n                        'x':0.45,'y':0.9},\n                 height=600)\n    fig.show()","63986a0f":"df['Certificate'].unique()","09565775":"\nfrom math import pi\nidx = 1\nplt.figure(figsize=(15,45))\nfor certificate_name, feature in df.groupby(df['Certificate'])[features].mean().iterrows():\n    top_features = dict(feature.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(8, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([0,1,2,3], ['0','1','2','3'], color=\"grey\", size=7)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=2, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(certificate_name, size=11, y=1.1)\n    \n    idx += 1","0fd90090":"genre = df.apply(lambda x: pd.Series(x['Genre']),axis=1).stack().reset_index(level=1,drop=True)\n\ngenre.name = 'Genres'\ngenre_df = df.drop('Genre',axis=1).join(genre)","7b4e9b0b":"def get_recomendations(genre,percentile = 0.85):\n    \n    df = genre_df[genre_df['Genres'] == genre]\n    votes = df[df['Votes'].notnull()]['Votes'].astype('int')\n    rate = df[df['Rate'].notnull()]['Rate'].astype('float')\n    r_mean = rate.mean()\n    v_percentile = rate.quantile(percentile)\n    \n    qualified = df[(df['Votes'] >= v_percentile) & (df['Votes'].notnull()) & (df['Rate'].notnull())][['Name','Votes','Rate']]\n    qualified['Votes'] = qualified['Votes'].astype('int')\n    qualified['Rate'] = qualified['Rate'].astype('float')\n    \n    qualified['wr'] = qualified.apply(lambda x: (x['Votes'] \/(x['Votes']+v_percentile) * x['Rate']) + (v_percentile\/(v_percentile+x['Votes'])*r_mean),axis=1)\n    qualified = qualified.sort_values('wr', ascending=False).head(250)\n    \n    return qualified","acb0c535":"get_recomendations('Horror').head(10)","fade7d15":"get_recomendations('Action, Thriller').head(10)","8237b255":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Cleaning Data\n              \n<\/p>\n<\/div>","067c95b3":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            EDA\n              \n<\/p>\n<\/div>","5ce918bd":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            Recommendation System Based On Genre\n              \n<\/p>\n<\/div>","b7684f40":"**Rating with Alcohol is higher compare to other features.**","617728ba":"**There is high Correlation between Alcohol, Violence & Frightening.**","d28db9ee":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:black;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:white;\n              text-align:center;\">\n                            DataFrame Info\n              \n<\/p>\n<\/div>"}}