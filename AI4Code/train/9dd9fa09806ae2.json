{"cell_type":{"e51a9c9b":"code","097500f3":"code","44ab416c":"code","0cd53f2a":"code","5d34dcb8":"code","16237788":"code","e081b925":"code","0c9b39d4":"code","6900a5b8":"code","a9f78ed9":"code","e036969f":"code","09e9a9a8":"code","355f41f8":"code","97ed3429":"code","9fd0de0e":"code","22bd9477":"code","40e60254":"code","7b280111":"code","3db74906":"code","bb3b0a44":"code","44fabc83":"code","2e91539a":"markdown","a682aba8":"markdown","552fbaf7":"markdown","0bf6f78b":"markdown","ba2f149b":"markdown","fc6d293e":"markdown","3829756b":"markdown"},"source":{"e51a9c9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport keras\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","097500f3":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_train.head()","44ab416c":"# Split the training data to X and Y\nX_train = df_train.iloc[:, 1:]\nY_train = df_train.iloc[:, 0]","0cd53f2a":"#Convert input to arrays\nX_train = np.array(X_train)\nY_train = np.array(Y_train)","5d34dcb8":"#Normalize inputs\nX_train = X_train\/255.0","16237788":"def plot_digits(X, Y):\n    for i in range(20):\n        plt.subplot(5, 4, i+1)\n        plt.tight_layout()\n        plt.imshow(X[i].reshape((28, 28)), cmap='gray')\n        plt.title('Digit:{}'.format(Y[i]))\n        plt.xticks([])\n        plt.yticks([])\n    plt.show()","e081b925":"plot_digits(X_train, Y_train)","0c9b39d4":"fig, ax = plt.subplots(figsize=(8, 8))\nsns.countplot(Y_train)\nax.set_title('Distribution of digits', fontsize=12)\nax.set_xlabel('Digits', fontsize=10)\nax.set_ylabel('Count', fontsize=10)\nplt.show()","6900a5b8":"X_dev, X_val, Y_dev, Y_val = train_test_split(X_train, Y_train, test_size=0.03, shuffle=True)","a9f78ed9":"model = Sequential()\nmodel.add(Dense(300, input_dim=784))\nmodel.add(Activation('relu'))\nmodel.add(Dense(100))\nmodel.add(Activation('relu'))\nmodel.add(Dense(100))\nmodel.add(Activation('relu'))\nmodel.add(Dense(100))\nmodel.add(Activation('relu'))\nmodel.add(Dense(200))\nmodel.add(Activation('relu'))\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))","e036969f":"model.build()","09e9a9a8":"model.summary()","355f41f8":"adam = Adam(lr=5e-4)\nmodel.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])","97ed3429":"T_dev = keras.utils.to_categorical(Y_dev, num_classes=10)\nT_val = keras.utils.to_categorical(Y_val, num_classes=10)\nmodel.fit(X_dev, T_dev, epochs=20, batch_size=100)","9fd0de0e":"score = model.evaluate(X_val, T_val, batch_size=100)","22bd9477":"score","40e60254":"df_test = pd.read_csv('..\/input\/test.csv')\nX_test = np.array(df_test)\nX_test = X_test\/255.0","7b280111":"T_test = model.predict(X_test)","3db74906":"Y_test = np.argmax(T_test, axis=1)\nY_test[:5]","bb3b0a44":"df_sample = pd.read_csv('..\/input\/sample_submission.csv')\ndf_sample['Label'] = Y_test\ndf_sample.head()","44fabc83":"df_sample.to_csv('out.csv', index=False)","2e91539a":"# Load Test Data and Predict","a682aba8":"# Deep NN with Keras:\n\nI developing a series of kernels for different Deep Learning Models:\n\n* [L-Layered Neural Network from scratch](https:\/\/www.kaggle.com\/curiousprogrammer\/l-layered-neural-network-from-scratch)\n* [TensorFlow NN with Augmentation](https:\/\/www.kaggle.com\/curiousprogrammer\/digit-recognizer-tensorflow-nn-with-augmentation)\n* [Data Augmentation in Python, TF, Keras, Imgaug](https:\/\/www.kaggle.com\/curiousprogrammer\/data-augmentation-in-python-tf-keras-imgaug)\n* Deep NN with Keras -This one\n* CNN with TensorFlow\n* CNN with Keras\n* AutoEncoders with TensorFlow\n* AutoEncoders with Keras\n* GANs with TensorFlow\n* GANs with Keras\n","552fbaf7":"# Build Model","0bf6f78b":"# Plot images","ba2f149b":"# Load Data","fc6d293e":"# Check Validation score","3829756b":"# Split data to dev and validation sets"}}