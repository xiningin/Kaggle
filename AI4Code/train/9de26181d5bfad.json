{"cell_type":{"882446f8":"code","7c0d7ef6":"code","a5004c67":"code","2c91bbe8":"code","dc702851":"code","944429ec":"code","996ada17":"code","54debe05":"code","8bafb275":"code","f074e912":"code","e3dd6eec":"code","82b2e94b":"code","43167ae8":"code","2aa4d12f":"code","dc60d5c0":"code","49ce2ff1":"code","b455ef46":"code","d82dd8a1":"code","63294c1c":"code","5120daed":"code","bcfec66e":"code","a0030b4c":"code","70ebdc30":"code","ee2b10ad":"code","2944d0fa":"code","030e98c6":"code","64ff9189":"code","51732081":"code","3c309ed0":"code","2c6a225d":"code","f1060fc9":"code","b4b7be89":"code","d0b1463f":"code","28d86ab6":"code","3911d9d8":"code","c645ed74":"code","3c48a6a2":"code","4f967849":"code","708278f3":"code","599b3770":"code","43b7496a":"code","89fd0a91":"code","15823130":"code","e31885c0":"code","7a37b383":"code","1ae3c23f":"code","4d8a0f04":"code","0aafc24d":"code","358ca25e":"code","d0f4e44e":"code","6401ab19":"code","5ba3e35c":"code","eb32cfb2":"code","3da72b7c":"code","d1ee83b3":"code","7ac72ddc":"code","36de1385":"code","b6510d8d":"code","3fec3b69":"code","f77d79c2":"code","5e9b3812":"code","db70a5d1":"code","3e697b47":"markdown","32a06fc1":"markdown","7b5fb41b":"markdown","88fa56d7":"markdown","fdb1908f":"markdown","3b889a0f":"markdown","21d7249f":"markdown","9f451b53":"markdown","cfe6a318":"markdown","c45b6d62":"markdown","af4a638d":"markdown","d3a4a2c5":"markdown","4a3f4372":"markdown","1d12c971":"markdown","ba1995af":"markdown","739648b7":"markdown","109f49ae":"markdown","5ff2c619":"markdown","030e0362":"markdown","892e0f70":"markdown","98fea30d":"markdown","81ce09b1":"markdown","143c61f0":"markdown","38702db1":"markdown","47c6f294":"markdown","50033203":"markdown","8340a0c0":"markdown","4039aab6":"markdown","46d685e2":"markdown"},"source":{"882446f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c0d7ef6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport os\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_colwidth', -1)\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = [18, 8]","a5004c67":"rating = pd.read_csv('\/kaggle\/input\/anime-recommendations-database\/rating.csv')\nanime_df = pd.read_csv('\/kaggle\/input\/anime-recommendations-database\/anime.csv')\nanime_with_synopsis = pd.read_csv('..\/input\/anime-recommendation-database-2020\/anime_with_synopsis.csv')\nanime_with_synopsis.drop(['MAL_ID', 'Score', 'Genders'], axis=1, inplace=True)\nanime_with_synopsis = anime_with_synopsis.rename(columns={\"Name\": \"name\"})\n# anime_with_synopsis.head(5)\n\nprint('rating shape:', rating.shape)\nprint('anime_df shape:', anime_df.shape)","2c91bbe8":"anime_df = anime_df.merge(anime_with_synopsis, on=[\"name\"])\nanime_df.head()","dc702851":"null_features = anime_df.columns[anime_df.isna().any()]\nanime_df[null_features].isna().sum()","944429ec":"anime_df.dropna(inplace=True)","996ada17":"def text_cleaning(text):\n    text = re.sub(r'&quot;', '', text)\n    text = re.sub(r'.hack\/\/', '', text)\n    text = re.sub(r'&#039;', '', text)\n    text = re.sub(r'A&#039;s', '', text)\n    text = re.sub(r'I&#039;', 'I\\'', text)\n    text = re.sub(r'&amp;', 'and', text)\n    \n    return text\n\nanime_df['name'] = anime_df['name'].apply(text_cleaning)","54debe05":"type_count = anime_df['type'].value_counts()\n\nsns.barplot(x=type_count.values,\n            y=type_count.index,\n            palette='magma').set_title('Anime Types')\n\nplt.tight_layout()\nplt.show()\n\n","8bafb275":"import plotly.graph_objects as go\nlabels = anime_df['type'].value_counts().index\nvalues = anime_df['type'].value_counts().values\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\n\nfig.update_layout(\n    title={\n        'text': \"Medium of Streaming\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","f074e912":"from collections import defaultdict\n\nall_genres = defaultdict(int)\n\nfor genres in anime_df['genre']:\n    for genre in genres.split(','):\n        all_genres[genre.strip()] += 1","e3dd6eec":"from wordcloud import WordCloud\n\ngenres_cloud = WordCloud(width=800, height=400, background_color='white', colormap='gnuplot').generate_from_frequencies(all_genres)\n\nplt.imshow(genres_cloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()","82b2e94b":"anime_df[anime_df['episodes'] == 'Unknown']['name'][:5] # \u0442\u0435 \u0430\u043d\u0438\u043c\u0435, \u043a-\u0432\u043e \u044d\u043f\u0438\u0437\u043e\u0434\u043e\u0432\/\u0441\u0435\u0440\u0438\u0439, \u043a-\u0445 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e (\u0432\u0438\u0434\u0438\u043c\u043e \u0438\u0445 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e)","43167ae8":"# \u0442\u0443\u0442 \u0432\u043e\u0442 \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a\u0438\u0435 \u0430\u043d\u0438\u043c\u0435 \u043a-\u0432\u043e\u043c \u0441\u0435\u0440\u0438\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 1500\nepisodes_count = anime_df[anime_df['episodes'] != 'Unknown'][['name', 'episodes']]\nepisodes_count['episodes'] = pd.to_numeric(episodes_count['episodes'])\n\nepisodes_count.query('episodes>1500')","2aa4d12f":"anime_df[['name', 'rating', 'members', 'type']].sort_values(by='rating', ascending=False).query('members>500000')[:5]","dc60d5c0":"anime_df[anime_df['type'] == 'Movie'][['name', 'rating', 'members', 'type']].sort_values(by='rating', ascending=False).query('members>200000')[:5]","49ce2ff1":"anime_df[anime_df['type'] == 'OVA'][['name', 'rating', 'members', 'type']].sort_values(by='rating', ascending=False).query('members>100000')[:5]","b455ef46":"%%time\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nsypnopsis_str = anime_df['sypnopsis'].str.split(',').astype(str)\n\ntfidf = TfidfVectorizer(analyzer='word', ngram_range=(1, 4), min_df=0)\ntfidf_matrix = tfidf.fit_transform(sypnopsis_str)\n\ntfidf_matrix.shape\n\n# tfidf.get_feature_names()","d82dd8a1":"\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n\ncosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\ncosine_sim[:4, :4]","63294c1c":"indices = pd.Series(anime_df.index, index=anime_df['name']) # \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441 \u0430\u043d\u0438\u043c\u0435 \u043f\u043e \u0435\u0433\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e\n\ndef genre_recommendations(title):\n    \n            idx = indices[title] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u0444\u0438\u043b\u044c\u043c\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e\n            sim_scores = list(enumerate(cosine_sim[idx])) # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u043f\u0430\u0440\u043d\u043e\u0433\u043e \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u0432\u0441\u0435\u0445 \u0430\u043d\u0438\u043c\u0435 \u0441 \u044d\u0442\u0438\u043c \u0430\u043d\u0438\u043c\u0435\n            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True) # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0430\u043d\u0438\u043c\u0435 \u043f\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u0445\u043e\u0436\u0435\u0441\u0442\u0438\n            sim_scores = sim_scores[1:11] # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0442\u043e\u043f 10\n        \n        \n            anime_indices = [i[0] for i in sim_scores] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u044d\u0442\u0438\u0445 \u0430\u043d\u0438\u043c\u0435\n            similarity_ = [i[1] for i in sim_scores] \n        \n            return pd.DataFrame({'Anime name': anime_df['name'].iloc[anime_indices].values,\n                                 'Similarity': similarity_,\n                                 'Type': anime_df['type'].iloc[anime_indices].values})  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0436\u0430\u043d\u0440 \u0430\u043d\u0438\u043c\u0435\n        \n  ","5120daed":"%%time\ngenre_recommendations('Fullmetal Alchemist: Brotherhood')","bcfec66e":"%%time\ngenre_recommendations('Naruto: Shippuuden')","a0030b4c":"genres_str1 = anime_df['genre'].str.split(',').astype(str)\n# sypnopsis_str1 = anime_df['sypnopsis'].str.split(',').astype(str)\n# unit =  pd.concat([sypnopsis_str1, genres_str1])\n\ntfidf1 = TfidfVectorizer(analyzer='word', ngram_range=(1, 4), min_df=0)\ntfidf_matrix1 = tfidf1.fit_transform(genres_str1)\n\ntfidf_matrix1.shape\n\n# # tfidf.get_feature_names()","70ebdc30":"cosine_sim1 = cosine_similarity(tfidf_matrix1, tfidf_matrix1)\ncosine_sim[:4, :4]","ee2b10ad":"indices1 = pd.Series(anime_df.index, index=anime_df['name']) # \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441 \u0430\u043d\u0438\u043c\u0435 \u043f\u043e \u0435\u0433\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e\n\ndef genre_recommendations1(title):\n    \n            idx = indices1[title] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u0444\u0438\u043b\u044c\u043c\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e\n            sim_scores = list(enumerate(cosine_sim1[idx])) # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u043f\u0430\u0440\u043d\u043e\u0433\u043e \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u0432\u0441\u0435\u0445 \u0430\u043d\u0438\u043c\u0435 \u0441 \u044d\u0442\u0438\u043c \u0430\u043d\u0438\u043c\u0435\n            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True) # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0430\u043d\u0438\u043c\u0435 \u043f\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u0445\u043e\u0436\u0435\u0441\u0442\u0438\n            sim_scores = sim_scores[1:11] # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0442\u043e\u043f 10\n        \n        \n            anime_indices = [i[0] for i in sim_scores] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u044d\u0442\u0438\u0445 \u0430\u043d\u0438\u043c\u0435\n            similarity_ = [i[1] for i in sim_scores] \n        \n            return pd.DataFrame({'Anime name': anime_df['name'].iloc[anime_indices].values,\n                                 'Similarity': similarity_,\n                                 'Type': anime_df['type'].iloc[anime_indices].values})  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0436\u0430\u043d\u0440 \u0430\u043d\u0438\u043c\u0435\n        \n  ","2944d0fa":"%%time\ngenre_recommendations1('Naruto: Shippuuden')","030e98c6":"rating.head()","64ff9189":"rating_count = rating['rating'].value_counts().sort_index()\n\nsns.barplot(x=rating_count.index,\n            y=rating_count.values,\n            palette='magma').set_title('Comparison of the number of ratings from -1 to 10');","51732081":"\nmask = (rating['rating'] == -1)\nrating = rating.loc[~mask]\nlen(rating)","3c309ed0":"rating_count = rating['rating'].value_counts().sort_index()\n\nsns.barplot(x=rating_count.index,\n            y=rating_count.values,\n            palette='magma').set_title('Comparison of the number of ratings from -1 to 10');","2c6a225d":"rating = rating[rating['user_id'] < 15000] #\u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0435\u043c \u043a-\u0432\u043e \u044e\u0437\u0435\u0440\u043e\u0432","f1060fc9":"from sklearn.preprocessing import LabelEncoder #Encode target labels with value between 0 and n_classes-1.\n\nuser_enc = LabelEncoder()\nrating['user_id'] = user_enc.fit_transform(rating['user_id'])\n\n\nanime_enc = LabelEncoder()\nrating['anime_id'] = anime_enc.fit_transform(rating['anime_id'])\n","b4b7be89":"userid_nunique = rating['user_id'].nunique()\nanime_nunique = rating['anime_id'].nunique()\n\nprint('\u041a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439:', userid_nunique)\nprint('\u041a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 id \u0430\u043d\u0438\u043c\u0435', anime_nunique)","d0b1463f":"### \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e 10000 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0438\u0437-\u0437\u0430 \u0441\u043e\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438\n\nrating = rating[rating['user_id'] < 10000]","28d86ab6":"import tensorflow as tf\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.layers import Input, Embedding, Reshape, Dot, Flatten, concatenate, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\nfrom tensorflow.keras.utils import model_to_dot\nfrom IPython.display import SVG\n\nprint('Using tensorflow version:', tf.__version__)","3911d9d8":"from sklearn.model_selection import train_test_split\n\nX = rating.drop(['rating'], axis=1)\ny = rating['rating']\n\nX_train, X_val, y_train, y_val = train_test_split(X, y,\n                                                  test_size=.1,\n                                                  stratify=y,\n                                                  random_state=2020)\n\nX_train.shape, X_val.shape, y_train.shape, y_val.shape","c645ed74":"def RecommenderV1(n_users, n_movies, n_dim):\n    \n    # User\n    user = Input(shape=(1,))\n    U = Embedding(n_users, n_dim)(user)\n    U = Flatten()(U)\n    \n    # Movie\n    movie = Input(shape=(1,))\n    M = Embedding(n_movies, n_dim)(movie)\n    M = Flatten()(M)\n    \n    # Dot U and M\n    x = Dot(axes=1)([U, M])\n    \n    model1 = Model(inputs=[user, movie], outputs=x)\n    \n    model1.compile(optimizer=Adam(0.0001),\n                  loss='mean_squared_error')\n    \n    return model1","3c48a6a2":"model1 = RecommenderV1(userid_nunique, anime_nunique, 100)\nmodel1.summary()","4f967849":"checkpoint1 = ModelCheckpoint('model1.h5', monitor='val_loss', verbose=0, save_best_only=True)","708278f3":"%%time\nhistory1 = model1.fit(x=[X_train['user_id'], X_train['anime_id']],\n                    y=y_train,\n                    batch_size=64,\n                    epochs=20,\n                    verbose=1,\n                    validation_data=([X_val['user_id'], X_val['anime_id']], y_val),\n                    callbacks=[checkpoint1])","599b3770":"# Get training and test loss histories\ntraining_loss1 = history1.history['loss']\ntest_loss1 = history1.history['val_loss']\n\n# Create count of the number of epochs\nepoch_count = range(1, len(training_loss1) + 1)\n\n# Visualize loss history\nplt.plot(epoch_count, training_loss1, 'r--')\nplt.plot(epoch_count, test_loss1, 'b-')\nplt.legend(['Training Loss', 'Test Loss'])\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.show()","43b7496a":"from keras.models import load_model\nmodel1.save('my_model_new1.h5')","89fd0a91":"modelLoaded1 = tf.keras.models.load_model('my_model1.h5')","15823130":"def Recommender2(n_users, n_movies, n_dim):\n    \n    # User\n    user = Input(shape=(1,))\n    U = Embedding(n_users, n_dim)(user)\n    U = Flatten()(U)\n    \n    # Anime\n    movie = Input(shape=(1,))\n    M = Embedding(n_movies, n_dim)(movie)\n    M = Flatten()(M)\n    \n    # Gabungkan disini\n    merged_vector = concatenate([U, M])\n    dense_1 = Dense(128, activation='relu')(merged_vector)\n    dropout = Dropout(0.5)(dense_1)\n    final = Dense(1)(dropout)\n    \n    model = Model(inputs=[user, movie], outputs=final)\n    \n    model.compile(optimizer=Adam(0.001),\n                  loss='mean_squared_error')\n    \n    return model\n","e31885c0":"model2 = Recommender2(userid_nunique, anime_nunique, 100)\nmodel2.summary()","7a37b383":"# model = RecommenderV2(userid_nunique, anime_nunique, 100)\n\n# SVG(model_to_dot(model2, show_shapes=True, show_layer_names=True).create(prog='dot', format='svg'))","1ae3c23f":"checkpoint2 = ModelCheckpoint('model2.h5', monitor='val_loss', verbose=0, save_best_only=True)","4d8a0f04":"%%time\nhistory2 = model2.fit(x=[X_train['user_id'], X_train['anime_id']],\n                    y=y_train,\n                    batch_size=64,\n                    epochs=20,\n                    verbose=1,\n                    validation_data=([X_val['user_id'], X_val['anime_id']], y_val),\n                    callbacks=[checkpoint2])","0aafc24d":"# Get training and test loss histories\ntraining_loss2 = history2.history['loss']\ntest_loss2 = history2.history['val_loss']\n\n# Create count of the number of epochs\nepoch_count = range(1, len(training_loss2) + 1)\n\n# Visualize loss history\nplt.plot(epoch_count, training_loss2, 'r--')\nplt.plot(epoch_count, test_loss2, 'b-')\nplt.legend(['Training Loss', 'Test Loss'])\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.show()","358ca25e":"from keras.models import load_model\nmodel2.save('my_model_new2.h5')","d0f4e44e":"modelLoaded2 = tf.keras.models.load_model('my_model_new2.h5')","6401ab19":"\ndef Recommender3(n_users, n_movies, n_dim):\n    \n    # User\n    user = Input(shape=(1,))\n    U = Embedding(n_users, n_dim)(user)\n    U = Flatten()(U)\n    U = Dense(64, activation='relu')(U)\n    \n    # Movie\n    movie = Input(shape=(1,))\n    M = Embedding(n_movies, n_dim)(movie)\n    M = Flatten()(M)\n    M = Dense(64, activation='relu')(M)\n    \n    # Dot U and M\n    x = concatenate([U, M])\n    x = Dropout(0.25)(x)\n    x = Dense(64, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    final = Dense(1)(x)\n    \n    model = Model(inputs=[user, movie], outputs=final)\n    \n    model.compile(optimizer=Adam(0.0001),\n                  loss='mean_squared_error')\n    \n    return model","5ba3e35c":"model3 = Recommender3(userid_nunique, anime_nunique, 100)\nmodel3.summary()","eb32cfb2":"checkpoint3 = ModelCheckpoint('model3.h5', monitor='val_loss', verbose=0, save_best_only=True)","3da72b7c":"%%time\nhistory3 = model3.fit(x=[X_train['user_id'], X_train['anime_id']], y=y_train, batch_size=64, epochs=20,\n                      verbose=1, validation_data=([X_val['user_id'], X_val['anime_id']], y_val), callbacks=[checkpoint3])","d1ee83b3":"# Get training and test loss histories\ntraining_loss3 = history3.history['loss']\ntest_loss3 = history3.history['val_loss']\n\n# Create count of the number of epochs\nepoch_count = range(1, len(training_loss3) + 1)\n\n# Visualize loss history\nplt.plot(epoch_count, training_loss3, 'r--')\nplt.plot(epoch_count, test_loss3, 'b-')\nplt.legend(['Training Loss', 'Test Loss'])\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.show()","7ac72ddc":"model3.save('my_model_new3.h5')","36de1385":"modelLoaded3 = tf.keras.models.load_model('my_model_new3.h5')","b6510d8d":"def make_pred(user_id, anime_id, model):\n    return model.predict([np.array([user_id]), np.array([anime_id])])[0][0]\n","3fec3b69":"def get_topN_rec(user_id, model):\n    \n    user_id = int(user_id) - 1\n    user_ratings = rating[rating['user_id'] == user_id]\n    recommendation = rating[~rating['anime_id'].isin(user_ratings['anime_id'])][['anime_id']].drop_duplicates()\n    recommendation['rating_predict'] = recommendation.apply(lambda x: make_pred(user_id, x['anime_id'] , model), axis=1)\n    recommendation.loc[:, 'rating_predict'] = recommendation['rating_predict']  -1 \n    \n    \n    final_rec = recommendation.sort_values(by='rating_predict', ascending=False).merge(anime_df[['anime_id', 'name', 'type', 'members']],\n                                                                                       on='anime_id').head(10)\n    \n    return final_rec.sort_values('rating_predict', ascending=False)[['name', 'type', 'rating_predict']]","f77d79c2":"%%time\nget_topN_rec(123, model1)","5e9b3812":"%%time\nget_topN_rec(123, model2)","db70a5d1":"%%time\nget_topN_rec(123, model3)","3e697b47":"#### \u041e, \u0432\u043e\u0442 \u043f\u043e\u043b\u0443\u0447\u0448\u0435 \u0431\u0443\u0434\u0435\u0442 (\u0445\u043e\u0442\u044f \u0432\u044b\u0434\u0430\u043b\u043e \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u0430\u043d\u0438\u043c\u0435, \u043d\u043e \u0442\u0443\u0442 Similarity \u043f\u043e\u0431\u043e\u043b\u044c\u0448\u0435). \u041f\u0440\u0438\u0445\u043e\u0434\u0438\u043c \u043a \u0432\u044b\u0432\u043e\u0434\u0443, \u0447\u0442\u043e \u0432 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u0445 \u0432\u0430\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0438 \u0436\u0430\u043d\u0440. ","32a06fc1":"# 2 \u0427\u0410\u0421\u0422\u042c Collaborative Filtering","7b5fb41b":"# \u0421\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","88fa56d7":"###  \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0430\u043d\u0438\u043c\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u044f\u043f\u043e\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b \u0438\u043b\u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u0440\u0435\u0448\u0430\u0435\u043c \u044d\u0442\u0443 \u043f\u0440\u043e\u0431\u0435\u043b\u0435\u043c\u0443:\n","fdb1908f":"# Cosine-Similarity\n\u041a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u0435 \u043f\u043e\u0434\u043e\u0431\u0438\u0435 \u0431\u0435\u0440\u0435\u0442 \u0443\u0433\u043e\u043b \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u043c\u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043a\u043e\u0441\u0438\u043d\u0443\u0441 \u044d\u0442\u043e\u0433\u043e \u0443\u0433\u043b\u0430, \u0438 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e \u043a\u0430\u043a \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438.\n\u042d\u0442\u043e\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u0432\u0430\u0440\u044c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043e\u0442 0 \u0434\u043e 1, \u0433\u0434\u0435 0 - \u0441\u0430\u043c\u044b\u0439 \u043d\u0438\u0437\u043a\u0438\u0439 (\u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0439), \u0430 1 - \u0441\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 (\u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u0445\u043e\u0436\u0438\u0439).\n\u0415\u0441\u043b\u0438 \u0443\u0433\u043e\u043b \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d 0 \u00b0, \u0442\u043e \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e \u0431\u0443\u0434\u0435\u0442 1. \u0418 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442, \u0435\u0441\u043b\u0438 \u0443\u0433\u043e\u043b \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d 90 \u00b0, \u0442\u043e \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e 0. \u0414\u043b\u044f \u0434\u0432\u0443\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0441 \u0443\u0433\u043b\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435 90 \u00b0 \u043c\u044b \u0442\u0430\u043a\u0436\u0435 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0445 \u0440\u0430\u0432\u043d\u044b\u043c\u0438 0.","3b889a0f":"# EDA (Exploratory data analysis)","21d7249f":"### \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043d\u043e\u0433\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043d\u0435 \u0445\u043e\u0442\u044f\u0442 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u043e \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d\u0438 \u043b\u0435\u043d\u0438\u0432\u044b. -1 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043c\u043e\u0442\u0440\u0435\u043b \u0430\u043d\u0438\u043c\u0435, \u043d\u043e \u043d\u0435 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043b \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u044d\u0442\u043e.","9f451b53":"# 1 \u043c\u043e\u0434\u0435\u043b\u044c","cfe6a318":"## 3 \u043c\u043e\u0434\u0435\u043b\u044c","c45b6d62":"## \u0414\u0435\u043b\u0430\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044e \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 cosine-similarity","af4a638d":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c null\n### \u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u043d\u0430\u043c \u043f\u0440\u043e\u0449\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439, \u0435\u0441\u043b\u0438 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 NULL. \u0418\u0442\u0430\u043a, \u043c\u044b \u0443\u0434\u0430\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NULL","d3a4a2c5":"TF - \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0441\u043b\u043e\u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430.(\u043f\u0440\u043e\u0441\u0442\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u0441\u043b\u043e\u0432\u0430 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435.) \nIDF - \u044d\u043d\u0432\u0435\u0440\u0441\u0438\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u044b, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0440. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u043c\u044b \u0438\u0449\u0435\u043c \u0432 Google \u00abthe results of latest European Socccer games\u00bb. \u041d\u0435\u0441\u043e\u043c\u043d\u0435\u043d\u043d\u043e, \u0447\u0442\u043e \u00abthe\u00bb \u0431\u0443\u0434\u0435\u0442 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0442\u044c\u0441\u044f \u0447\u0430\u0449\u0435, \u0447\u0435\u043c \u00abSocccer games\u00bb, \u043d\u043e \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c Socccer games \u0432\u044b\u0448\u0435, \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043f\u043e\u0438\u0441\u043a\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n\n\u0412 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0432\u0437\u0432\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 TF-IDF \u0441\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043d\u0435\u0442 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043b\u043e\u0432 \u043f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 (\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430).\n\n#####  \u042d\u0442\u043e \u0434\u0430\u0441\u0442 \u0432\u0430\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043b\u043e\u0432\u043e \u0432 \u043e\u0431\u0437\u043e\u0440\u043d\u043e\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u0435 (\u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u0432 \u043e\u0434\u043d\u043e\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435), \u0430 \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u043c, \u043a\u0430\u043a \u0438 \u0440\u0430\u043d\u044c\u0448\u0435. \u042d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043b\u043e\u0432. \u0432 \u043e\u0431\u0437\u043e\u0440\u0430\u0445 \u0441\u044e\u0436\u0435\u0442\u043e\u0432 \u0438, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0438\u0445 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430.","4a3f4372":"# 2 \u043c\u043e\u0434\u0435\u043b\u044c","1d12c971":"#### \u041c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f 9800 \u0430\u043d\u0438\u043c\u0435 \u0432 \u043d\u0430\u0448\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e 1445801 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432.\n\u0418\u043c\u0435\u044f \u044d\u0442\u0443 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432 \u0440\u0443\u043a\u0430\u0445, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430( \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u0434\u043e\u0431\u0438\u044f \u0435\u0432\u043a\u043b\u0438\u0434\u043e\u0432\u0430, \u041f\u0438\u0440\u0441\u043e\u043d\u0430 \u0438 \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u0430) \u041d\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441, \u043a\u0430\u043a\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043b\u0443\u0447\u0448\u0435. \u0420\u0430\u0437\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0445\u043e\u0440\u043e\u0448\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u0438 \u0447\u0430\u0441\u0442\u043e \u0431\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438.\n\n\u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u0435 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0439 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0430\u043d\u0438\u043c\u0435. \u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0434\u043e\u0431\u0438\u044f \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u0430, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0438 \u0435\u0433\u043e \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u0438 \u0431\u044b\u0441\u0442\u0440\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c. \u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0442\u0430\u043a\u0430\u044f:\n\n![image.png](attachment:b9cfff79-b6e5-4748-ac03-67c11794fdf7.png)\n","ba1995af":"# \u0423 \u043a\u0430\u043a\u043e\u0433\u043e \u0430\u043d\u0438\u043c\u0435 \u0441\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433?\n### \u0421\u044e\u0434\u0430 \u044f \u0432\u043a\u043b\u044e\u0447\u0438\u043b\u0430 \u0430\u043d\u0438\u043c\u0435, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u0435\u0435 500000 community members\n### \u0422\u043e\u043f-5 ","739648b7":"![image.png](attachment:67b547ad-70ce-4951-994f-b63918c515c0.png)","109f49ae":"##### 2) rating_data:\n* user_id - non identifiable randomly generated user id.\n* anime_id - the anime that this user has rated.\n* rating - rating out of 10 this user has assigned (-1 if the user watched it but didn't assign a rating).","5ff2c619":"# 3 \u0427\u0410\u0421\u0422\u042c\n# Deep Learning \u0434\u043b\u044f \u043a\u043e\u043b\u043b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\n* \u041d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 - \u044d\u0442\u043e, \u043f\u043e \u0441\u0443\u0442\u0438, \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\u041c\u0435\u0442\u043e\u0434\u044b \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u043e\u0439 \u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0442\u043e\u0436\u0435 \u0434\u0435\u043b\u0430\u044e\u0442 \u043d\u0435\u0447\u0442\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0435.\n* \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u0432 SVD \u043c\u044b \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u0435\u0441\u043e\u0432, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 SGD, \u0447\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435.\n* \u0421 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043e\u0442\u0440\u044b\u0432\u043e\u043c, Deep Learning \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0432\u0437\u043e\u0439\u0442\u0438 SVD","030e0362":"#### \u0412 \u0446\u0435\u043b\u043e\u043c, \u0432\u043e\u0442 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0438:\n* \u041d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u0445\u043e\u043b\u043e\u0434\u043d\u044b\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u0438\u043b\u0438 \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e.\n* \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0432\u043a\u0443\u0441\u0430\u043c\u0438.\n* \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0438 \u043d\u0435\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u043c\u044b.\n\n#### \u041e\u0434\u043d\u0430\u043a\u043e \u0443 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0435\u0441\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:\n* \u041d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u043d\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0432 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n* \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.\n* \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u0436\u0435 \u0442\u0438\u043f\u043e\u043c \u0444\u0438\u043b\u044c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0438\u0434\u0435\u043b \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u043c.","892e0f70":"![image.png](attachment:858033ac-3642-4498-9028-08dc4d14b1be.png)","98fea30d":"#### \u0422\u0435\u043f\u0435\u0440\u044c \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u043e\u043f\u0430\u0440\u043d\u043e\u0433\u043e \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u0433\u043e \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 10 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u0433\u043e \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430.","81ce09b1":"## \u041a\u0430\u043a\u0438\u0435 \u0436\u0430\u043d\u0440\u044b \u0435\u0441\u0442\u044c \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0430\u043d\u0438\u043c\u0435?","143c61f0":"# 1 \u0427\u0410\u0421\u0422\u042c Content-Based Recommendation-System","38702db1":" ##### 1) anime_data:\n* anime_id - myanimelist.net's unique id identifying an anime.\n* name - full name of anime.\n* genre - comma separated list of genres for this anime.\n* type - movie, TV, OVA, etc.\n* episodes - how many episodes in this show. (1 if movie).\n* rating - average rating out of 10 for this anime.\n* members - number of community members that are in this anime's \"group\".\n","47c6f294":"#### Content-Based Recommender \u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0445\u043e\u0436\u0435\u0441\u0442\u044c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0441\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u0442\u043e \u0432\u0430\u043c \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0438 \u00ab\u043f\u043e\u0445\u043e\u0436\u0438\u0439\u00bb \u043f\u0440\u0435\u0434\u043c\u0435\u0442. \n\n#### \u041a\u043e\u043d\u0442\u0435\u043d\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0445\u043e\u043b\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430. \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u043f\u0435\u0440\u0432\u044b\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443, \u043c\u044b \u0435\u0449\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043e \u043d\u0435\u043c \u043d\u0435 \u0437\u043d\u0430\u0435\u043c. \u041a\u0430\u043a \u0434\u0430\u0442\u044c  \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438? \n* \u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u043f\u043e\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u043c\u044b. \n* \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\/\u043d\u0430\u0436\u043c\u0435\u0442 \u043d\u0430 \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442, \u043c\u044b \u0432\u044b\u0431\u0438\u0440\u0435\u043c \u0444\u0438\u043b\u044c\u043c\u044b \u0441 \u043f\u043e\u0445\u043e\u0436\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c. ","50033203":"#### \u0425\u043e\u0442\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u043d\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043d\u0435 \u0442\u0430\u043a \u0443\u0436 \u0438 \u0432\u044b\u0441\u043e\u043a\u043e (\u043e\u0442\u043a\u0440\u043e\u0432\u0435\u043d\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u044f \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0435:)). \u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u043d\u043e \u0438 \u0436\u0430\u043d\u0440\u044b","8340a0c0":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0435\u0449\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u043c\u0435\u0442\u0440\u0430\u0436\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u043c\u043e\u0432","4039aab6":"# \u0418 \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0434\u043b\u044f OVA (Original Animated Video)\n#### OVA - \u044d\u0442\u043e \u044f\u043f\u043e\u043d\u0441\u043a\u0438\u0435 \u0430\u043d\u0438\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u043c\u044b \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u044b, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0432\u0438\u0434\u0435\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0430\u0445 \u0431\u0435\u0437 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430 \u043d\u0430 \u0442\u0435\u043b\u0435\u0432\u0438\u0434\u0435\u043d\u0438\u0438 \u0438\u043b\u0438 \u0432 \u043a\u0438\u043d\u043e\u0442\u0435\u0430\u0442\u0440\u0430\u0445.","46d685e2":"![image.png](attachment:85a16395-6e31-4282-a7c0-6c5b5eaced3e.png)"}}