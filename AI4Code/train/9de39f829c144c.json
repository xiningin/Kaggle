{"cell_type":{"0d9202d3":"code","8bbe1f3a":"code","d6be08d7":"code","9faee9e9":"code","7c18c9bd":"code","2e0010fb":"code","f0eab749":"code","4a908ab8":"code","44083dd1":"code","521145eb":"code","ffc4d093":"code","05b09b34":"code","d7568178":"code","afa0a88e":"code","50b7eef2":"code","20b87919":"code","cf08981c":"code","1c420343":"code","1d720a4b":"code","a81f1791":"code","241317db":"code","b5ad3576":"code","70ff91cd":"code","065be7f1":"code","55d12e93":"code","2caae937":"code","f16b0be4":"code","9485ddd4":"code","a09a6399":"code","25ed5939":"code","15375a15":"code","5e2c1df7":"code","681acf96":"code","992d2ac2":"code","1b0dbfb1":"code","ff212ed8":"code","cc16c6c4":"code","64a99276":"code","c9daeec1":"code","494b9898":"code","3d7fc84d":"code","9067eb63":"code","9555a33b":"code","0ed1dba6":"code","2aba4f1d":"code","3180e35e":"code","cdc1034b":"code","55ddb3ef":"code","b78f9966":"code","35c7e7df":"code","d6752c90":"code","eb87f62c":"code","b5eb2ab4":"code","a98d0963":"code","e4be93a6":"code","9e4e0fa5":"code","2f92afa4":"code","70ccff8d":"code","db3bb529":"code","436413e4":"code","24529dd3":"code","66625aa6":"code","52b7317e":"code","8af68992":"code","54c20562":"code","13b14d65":"code","af6c16f8":"code","3f2e690a":"code","e735c533":"code","bac3ee9b":"code","d2b69108":"code","30082ffd":"code","fce89ffe":"code","44973ecb":"code","a5cf4ef9":"code","abaa1e99":"code","798039a0":"code","650b8875":"code","188f57c6":"code","05843d00":"code","222b8306":"code","711972f8":"code","4763a3fa":"code","4d30714c":"code","ca153b2e":"code","0f65ebba":"code","17671a97":"code","37ae7e3e":"code","f465fb7d":"code","c53a7fd1":"code","c97cdc53":"code","b09730b0":"markdown","9a86ee3b":"markdown","5ee31b4a":"markdown","ccb03c94":"markdown","6a24f469":"markdown","1b339478":"markdown","54532876":"markdown","c1f554c0":"markdown","88a83199":"markdown","0842f293":"markdown","fbe88ca8":"markdown","4d4de048":"markdown","52507d63":"markdown","7f292fed":"markdown","ca366276":"markdown","b9ae5096":"markdown","5bc93f7d":"markdown"},"source":{"0d9202d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport datetime\nfrom sklearn.metrics import mean_squared_error as rmse\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8bbe1f3a":"df = pd.read_csv(\"..\/input\/air-quality-seoul\/Air_Quality_Seoul_2017-2020.csv\")","d6be08d7":"df['Measurement date'] = pd.to_datetime(df['Measurement date'])","9faee9e9":"df.info()","7c18c9bd":"df","2e0010fb":"dates = [\"2018-03-05 08:00:00\", \"2018-03-05 09:00:00\", \"2018-03-05 09:00:00\", \"2018-03-05 10:00:00\", \"2018-03-06 09:00:00\", \"2018-03-06 10:00:00\"]\nStation = 117\n\nfor date in dates:\n    df.loc[((df['Station code']==Station) & (df['Measurement date']==date)), 'SO2']=df['SO2'].median() \n    df.loc[((df['Station code']==Station) & (df['Measurement date']==date)), 'NO2']=df['NO2'].median() \n    df.loc[((df['Station code']==Station) & (df['Measurement date']==date)), 'O3']=df['O3'].median() \n      ","f0eab749":"entire_seoul = df.groupby(by='Measurement date').sum()","4a908ab8":"entire_seoul.drop('Station code', axis=1, inplace=True)","44083dd1":"entire_seoul.info()","521145eb":"entire_seoul.to_csv(\"Air_Quality_Entire_Seoul_2017-2020_Adjusted.csv\")","ffc4d093":"polluents = {'SO2':[0.02,0.05,0.15,1],\n             'NO2':[0.03,0.06,0.2,2],\n             'CO':[2,9,15,50],\n             'O3':[0.03,0.09,0.15,0.5],\n             'PM2.5':[15,35,75,500],\n             'PM10':[30,80,150,600]}\n\nquality = ['Good','Normal','Bad','Very Bad']\nseoul_standard = pd.DataFrame(polluents, index=quality)\nseoul_standard","05b09b34":"polluents","d7568178":"data = [go.Scatter(x=entire_seoul.index,\n                   y=entire_seoul['SO2'])]\n       \n##layout object\nlayout = go.Layout(title='SO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n\n    \n## Figure object\nfig = go.Figure(data=data, layout=layout)\n\n\n##Adding the text and positioning it\nfig.add_annotation(x='2018-01-01 00:00:00', y=25*polluents['SO2'][0],\n            text=\"Good Level\",\n            showarrow=True,\n            arrowhead=1)\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['SO2'][0],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['SO2'][0],\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\nfig.show()","afa0a88e":"data = [go.Scatter(x=entire_seoul.index,\n                   y=entire_seoul['NO2'])]\n       \n##layout object\nlayout = go.Layout(title='NO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_annotation(x='2017-07-01 00:00:00', y=25*polluents['NO2'][0],\n            text=\"Good Level\",\n            showarrow=True,\n            arrowhead=1)\n\nfig.add_annotation(x='2018-07-01 00:00:00', y=25*polluents['NO2'][1],\n            text=\"Normal Level\",\n            showarrow=True,\n            arrowhead=1)\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['NO2'][0],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['NO2'][0],\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['NO2'][1],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['NO2'][1],\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","50b7eef2":"data = [go.Scatter(x=entire_seoul.index,\n                   y=entire_seoul['O3'])]\n       \n##layout object\nlayout = go.Layout(title='O3 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_annotation(x='2017-07-01 00:00:00', y=25*polluents['O3'][0],\n            text=\"Good Level\",\n            showarrow=True,\n            arrowhead=1)\n\nfig.add_annotation(x='2018-07-01 00:00:00', y=25*polluents['O3'][1],\n            text=\"Normal Level\",\n            showarrow=True,\n            arrowhead=1)\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['O3'][0],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['O3'][0],\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['O3'][1],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['O3'][1],\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","20b87919":"data = [go.Scatter(x=entire_seoul.index,\n                   y=entire_seoul['CO'])]\n       \n##layout object\nlayout = go.Layout(title='CO Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_annotation(x='2017-07-01 00:00:00', y=25*polluents['CO'][0],\n            text=\"Good Level\",\n            showarrow=True,\n            arrowhead=1)\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['CO'][0],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['CO'][0],\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","cf08981c":"data = [go.Scatter(x=entire_seoul.index,\n                   y=entire_seoul['PM2.5'])]\n       \n##layout object\nlayout = go.Layout(title='PM2.5 Levels',\n                    yaxis={'title':'Mircrogram\/m3'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_annotation(x='2017-07-01 00:00:00', y=25*polluents['PM2.5'][0],\n            text=\"Good Level\",\n            showarrow=True,\n            arrowhead=1)\n\nfig.add_annotation(x='2017-12-01 00:00:00', y=25*polluents['PM2.5'][1],\n            text=\"Normal Level\",\n            showarrow=True,\n            arrowhead=1)\n\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['PM2.5'][0],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['PM2.5'][0],\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['PM2.5'][1],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['PM2.5'][1],\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","1c420343":"data = [go.Scatter(x=entire_seoul.index,\n                   y=entire_seoul['PM10'])]\n       \n##layout object\nlayout = go.Layout(title='PM10 Levels',\n                    yaxis={'title':'Mircrogram\/m3'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_annotation(x='2017-07-01 00:00:00', y=25*polluents['PM10'][0],\n            text=\"Good Level\",\n            showarrow=True,\n            arrowhead=1)\n\nfig.add_annotation(x='2017-07-01 00:00:00', y=25*polluents['PM10'][1],\n            text=\"Normal Level\",\n            showarrow=True,\n            arrowhead=1)\n\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['PM10'][0],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['PM10'][0],\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=25*polluents['PM10'][1],\n            x1='2020-12-31 23:00:00',\n            y1=25*polluents['PM10'][1],\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","1d720a4b":"entire_seoul['Year'] = entire_seoul.index.year","a81f1791":"entire_seoul","241317db":"entire_seoul_by_year = entire_seoul.groupby(by='Year').sum()\nentire_seoul_by_year","b5ad3576":"## Data for each gas\n\ntrace0 = [go.Scatter(x=entire_seoul_by_year.index,y=entire_seoul_by_year['SO2'])]\ntrace1 = [go.Scatter(x=entire_seoul_by_year.index,y=entire_seoul_by_year['NO2'])]\ntrace2 = [go.Scatter(x=entire_seoul_by_year.index,y=entire_seoul_by_year['O3'])]\ntrace3 = [go.Scatter(x=entire_seoul_by_year.index,y=entire_seoul_by_year['CO'])]\ntrace4 = [go.Scatter(x=entire_seoul_by_year.index,y=entire_seoul_by_year['PM10'])]\ntrace5 = [go.Scatter(x=entire_seoul_by_year.index,y=entire_seoul_by_year['PM2.5'])]\n\nlayout0 = go.Layout(title='SO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date', 'nticks':4},\n                    )\n\nlayout1 = go.Layout(title='NO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date', 'nticks':4})\n\nlayout2 = go.Layout(title='O3 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date', 'nticks':4})\n\nlayout3 = go.Layout(title='CO Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date', 'nticks':4})\n\nlayout4 = go.Layout(title='PM10 Levels',\n                    yaxis={'title':'Microgram\/m3'},\n                    xaxis={'title':'Date', 'nticks':4})\n\nlayout5 = go.Layout(title='PM2.5 Levels',\n                    yaxis={'title':'Microgram\/m3'},\n                    xaxis={'title':'Date', 'nticks':4})\n\n","70ff91cd":"##layout objects for each gas\nfig = go.Figure(data=trace0, layout=layout0)\npy.iplot(fig)\n\nfig = go.Figure(data=trace1, layout=layout1)\npy.iplot(fig)\n\nfig = go.Figure(data=trace2, layout=layout2)\npy.iplot(fig)\n\nfig = go.Figure(data=trace3, layout=layout3)\npy.iplot(fig)\n\nfig = go.Figure(data=trace4, layout=layout4)\npy.iplot(fig)\n\nfig = go.Figure(data=trace5, layout=layout5)\npy.iplot(fig)","065be7f1":"entire_seoul","55d12e93":"entire_seoul.info()","2caae937":"entire_seoul['Month'] = entire_seoul.index.month","f16b0be4":"entire_seoul","9485ddd4":"entire_seoul['Month-Year'] = entire_seoul.index.strftime('%Y-%m')","a09a6399":"entire_seoul['Month-Year']","25ed5939":"entire_seoul.info()","15375a15":"monthly = entire_seoul[['SO2', 'NO2', 'O3', 'CO', 'PM10', 'PM2.5', 'Month-Year']].groupby(by=entire_seoul['Month-Year']).sum()\nmonthly","5e2c1df7":"trace_monthsSO2 = [go.Scatter(x=monthly.index, y=monthly['SO2'], name='SO2 Monthly Emissions')]\n            \nlayout_monthsSO2 = go.Layout(title='SO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )","681acf96":"fig = go.Figure(data=trace_monthsSO2, layout=layout_monthsSO2)\npy.iplot(fig)","992d2ac2":"trace_monthsNO2 = [go.Scatter(x=monthly.index, y=monthly['NO2'], name='NO2 Monthly Emissions')]\n\n\nlayout_monthsNO2 = go.Layout(title='NO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month',\n                          }\n                    )","1b0dbfb1":"fig = go.Figure(data=trace_monthsNO2, layout=layout_monthsNO2)\npy.iplot(fig)","ff212ed8":"trace_monthsO3 = [go.Scatter(x=monthly.index, y=monthly['O3'], name='O3 Monthly Emissions')]\n\nlayout_monthsO3 = go.Layout(title='O3 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month',\n                           }\n                    )","cc16c6c4":"fig = go.Figure(data=trace_monthsO3, layout=layout_monthsO3)\npy.iplot(fig)","64a99276":"trace_monthsCO = [go.Scatter(x=monthly.index, y=monthly['CO'], name='CO Monthly Emissions')]\n\nlayout_monthsCO = go.Layout(title='CO Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month',\n                           }\n                    )","c9daeec1":"fig = go.Figure(data=trace_monthsCO, layout=layout_monthsCO)\npy.iplot(fig)","494b9898":"trace_monthsPM10 = [go.Scatter(x=monthly.index, y=monthly['PM10'], name='PM10 Monthly Emissions')]\n\nlayout_monthsPM10 = go.Layout(title='PM10 Levels',\n                    yaxis={'title':'Microgram\/m3'},\n                    xaxis={'title':'Month',\n                           }\n                    )","3d7fc84d":"fig = go.Figure(data=trace_monthsPM10, layout=layout_monthsPM10)\n\n\npy.iplot(fig)","9067eb63":"trace_monthsPM25 = [go.Scatter(x=monthly.index, y=monthly['PM2.5'], name='PM2.5 Monthly Emissions')]\n\nlayout_monthsPM25 = go.Layout(title='PM2.5 Levels',\n                    yaxis={'title':'Microgram\/m3'},\n                    xaxis={'title':'Month'}\n                             )","9555a33b":"fig = go.Figure(data=trace_monthsPM25, layout=layout_monthsPM25)\n\npy.iplot(fig)","0ed1dba6":"from pandas.plotting import autocorrelation_plot\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima.model import ARIMA","2aba4f1d":"lengthx, lengthy = monthly.shape\n\ntraining = monthly[0:lengthx-6][:]\nvalidation = monthly[-6:lengthx][:]\n\ntraining.index = pd.to_datetime(training.index)\nvalidation.index = pd.to_datetime(validation.index)","3180e35e":"training","cdc1034b":"validation","55ddb3ef":"monthly","b78f9966":"for i in monthly.columns:\n    result = adfuller(monthly[i])\n    print(\"Current column:\", i)\n    print(\"Adfuller result (p-value<0.05=stationary): \", result[1], \"\\n\")","35c7e7df":"diff_so2 = monthly['SO2'].diff()\ndiff_no2 = monthly['NO2'].diff()\ndiff_o3 = monthly['O3'].diff()\ndiff_PM10 = monthly['PM10'].diff()\n\nto_check = [diff_so2, diff_no2, diff_o3, monthly['CO'], diff_PM10, monthly['PM2.5']]","d6752c90":"for i, j in zip(to_check, monthly.columns):\n    result = adfuller(i.dropna())\n    print(\"Current column:\", j)\n    print(\"Adfuller result (p-value<0.05=stationary): \", result[1], \"\\n\")","eb87f62c":"for i in monthly.columns:\n    title_acf = 'Autocorrelation '+str(i)\n    title_pacf = 'Partial Autocorrelation'+str(i)\n    plot_acf(monthly[i], lags=18, title=title_acf)\n    plot_pacf(monthly[i], lags=12, title=title_pacf)","b5eb2ab4":"##monthly.index = pd.to_datetime(monthly.index)\n##monthly.info()","a98d0963":"for i in monthly.columns:\n    print(\"For :\", i)\n    \n    result = seasonal_decompose(x=training[i], model='additive')\n    result.plot()\n    plt.show()\n    print(\" \\n\\n\")","e4be93a6":"from sklearn.metrics import mean_squared_error as rmse\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9e4e0fa5":"def evaluate_arima_model(dataset, validation, order): ## We'll evaluate over training.columns\n    predictions = []\n    model = ARIMA(dataset, order=order)\n    model_fit = model.fit()\n    predictions = model_fit.forecast(steps=6)\n    rmse_model = rmse(validation,predictions)\n    return rmse_model","2f92afa4":"def evaluate_models(dataset, validation, p_values, d_values, q_values): ## We'll evaluate over training.columns\n    best_score, best_config = float(\"inf\"), None\n    \n    for p in p_values:\n        for d in d_values:\n            for q in q_values:\n                order = (p,d,q)\n                try:\n                    rmse = evaluate_arima_model(dataset, validation, order)\n                    if rmse < best_score:\n                        best_score, best_config = rmse, order\n                    print(\"ARIMA:{} | RMSE:{}\".format(order, rmse))\n                except:\n                    continue\n    print(\"Best ARIMA: {} | Best RMSE: {}\".format(best_config, best_score))  ","70ccff8d":"p_values, d_values, q_values = range(0,8), range(0,2), range(0,13)","db3bb529":"test = evaluate_arima_model(training['SO2'],validation['SO2'], (1,1,1))\ntest","436413e4":"## Manually seen on correlation, autocorrelation plots and differeniation\n\nmodel_SO2_manual = ARIMA(training['SO2'], order=(2,1,1))\nmodel_NO2_manual = ARIMA(training['NO2'], order=(6,1,3))\nmodel_O3_manual = ARIMA(training['O3'], order=(6,1,2))\nmodel_CO_manual = ARIMA(training['CO'], order=(7,0,6))\nmodel_PM10_manual = ARIMA(training['PM10'], order=(7,1,3))\nmodel_PM25_manual = ARIMA(training['PM2.5'], order=(7,0,3))","24529dd3":"## Gridsearch to check best fitting parameters\n\nmodel_SO2 = ARIMA(training['SO2'], order=(7,1,3))\nmodel_NO2 = ARIMA(training['NO2'], order=(3,1,5))\nmodel_O3 = ARIMA(training['O3'], order=(2,0,10))\nmodel_CO = ARIMA(training['CO'], order=(5,0,5))\nmodel_PM10 = ARIMA(training['PM10'], order=(1,1,4))\nmodel_PM25 = ARIMA(training['PM2.5'], order=(7,1,6))","66625aa6":"model_SO2_manual = model_SO2_manual.fit()\nmodel_SO2 = model_SO2.fit()\n\nmodel_NO2_manual = model_NO2_manual.fit()\nmodel_NO2 = model_NO2.fit()\n\nmodel_O3_manual = model_O3_manual.fit()\nmodel_O3 = model_O3.fit()\n\nmodel_CO_manual = model_CO_manual.fit()\nmodel_CO = model_CO.fit()\n\nmodel_PM10_manual = model_PM10_manual.fit()\nmodel_PM10 = model_PM10.fit()\n\nmodel_PM25_manual = model_PM25_manual.fit()\nmodel_PM25 = model_PM25.fit()","52b7317e":"predicted_SO2_manual = model_SO2_manual.forecast(steps=6)\npredicted_SO2 = model_SO2.forecast(steps=6)\n\npredicted_NO2_manual = model_NO2_manual.forecast(steps=6)\npredicted_NO2 = model_NO2.forecast(steps=6)\n\npredicted_O3_manual = model_O3_manual.forecast(steps=6)\npredicted_O3 = model_O3.forecast(steps=6)\n\npredicted_CO_manual = model_CO_manual.forecast(steps=6)\npredicted_CO = model_CO.forecast(steps=6)\n\npredicted_PM10_manual = model_PM10_manual.forecast(steps=6)\npredicted_PM10 = model_PM10.forecast(steps=6)\n\npredicted_PM25_manual = model_PM25_manual.forecast(steps=6)\npredicted_PM25 = model_PM25.forecast(steps=6)","8af68992":"predictedSO2 = [go.Scatter(x=monthly.index, y=monthly['SO2'], name='SO2 Monthly Emissions'),\n                go.Scatter(x=predicted_SO2.index, y=predicted_SO2, name='SO2 GS Predicted Emissions'),\n                go.Scatter(x=predicted_SO2.index, y=predicted_SO2_manual, name='SO2 Predicted Emissions')]\n            \nlayout_predictedSO2 = go.Layout(title='SO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedNO2 = [go.Scatter(x=monthly.index, y=monthly['NO2'], name='NO2 Monthly Emissions'),\n                  go.Scatter(x=predicted_NO2.index, y=predicted_NO2, name='NO2 GS Predicted Emissions'),\n               go.Scatter(x=predicted_NO2.index, y=predicted_NO2_manual, name='NO2 Predicted Emissions')]\n            \nlayout_predictedNO2 = go.Layout(title='NO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedO3 = [go.Scatter(x=monthly.index, y=monthly['O3'], name='O3 Monthly Emissions'),\n               go.Scatter(x=predicted_O3.index, y=predicted_O3, name='O3 GS Predicted Emissions'),\n               go.Scatter(x=predicted_O3.index, y=predicted_O3_manual, name='O3 Predicted Emissions')]\n            \nlayout_predictedO3 = go.Layout(title='O3 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedCO = [go.Scatter(x=monthly.index, y=monthly['CO'], name='CO Monthly Emissions'),\n               go.Scatter(x=predicted_CO.index, y=predicted_CO, name='CO GS Predicted Emissions'),\n               go.Scatter(x=predicted_CO.index, y=predicted_CO_manual, name='CO Predicted Emissions')]\n            \nlayout_predictedCO = go.Layout(title='CO Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedPM10 = [go.Scatter(x=monthly.index, y=monthly['PM10'], name='PM10 Monthly Emissions'),\n                 go.Scatter(x=predicted_PM10.index, y=predicted_PM10, name='PM10 GS Predicted Emissions'),\n                 go.Scatter(x=predicted_PM10.index, y=predicted_PM10_manual, name='PM10 Predicted Emissions')]\n            \nlayout_predictedPM10 = go.Layout(title='PM10 Levels',\n                    yaxis={'title':'Microgram\/m3'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedPM25 = [go.Scatter(x=monthly.index, y=monthly['PM2.5'], name='PM2.5 Monthly Emissions'),\n                 go.Scatter(x=predicted_PM25.index, y=predicted_PM25, name='PM25 GS Predicted Emissions'),\n                 go.Scatter(x=predicted_PM25.index, y=predicted_PM25_manual, name='PM25 Predicted Emissions')]\n            \nlayout_predictedPM25 = go.Layout(title='PM2.5 Levels',\n                    yaxis={'title':'Microgram\/m3'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n","54c20562":"fig = go.Figure(data=predictedSO2, layout=layout_predictedSO2)\npy.iplot(fig)","13b14d65":"fig = go.Figure(data=predictedNO2, layout=layout_predictedNO2)\npy.iplot(fig)","af6c16f8":"fig = go.Figure(data=predictedO3, layout=layout_predictedO3)\npy.iplot(fig)","3f2e690a":"fig = go.Figure(data=predictedCO, layout=layout_predictedCO)\npy.iplot(fig)","e735c533":"fig = go.Figure(data=predictedPM10, layout=layout_predictedPM10)\npy.iplot(fig)","bac3ee9b":"fig = go.Figure(data=predictedPM25, layout=layout_predictedPM25)\npy.iplot(fig)","d2b69108":"from statsmodels.tsa.statespace.sarimax import SARIMAX","30082ffd":"def evaluate_sarima_model(dataset, validation, order, seasonal_order): ## We'll evaluate over training.columns\n    predictions = []\n    model = SARIMAX(dataset, order=order, seasonal_order=seasonal_order)\n    model_fit = model.fit()\n    predictions = model_fit.forecast(steps=6)\n    rmse_model = rmse(validation,predictions)\n    return rmse_model","fce89ffe":"def evaluate_models(dataset, validation, seasonal_order, p_values, q_values): ## We'll evaluate over training.columns\n    best_score, best_config, best_season_order = float(\"inf\"), None, None\n    for season in seasonal_order:\n        for p in p_values:\n            for q in q_values:\n                order = (p,0,q)\n                seasonal_order=(p,0,q,season)\n                try:\n                    rmse = evaluate_sarima_model(dataset, validation, order, seasonal_order)\n                    if rmse < best_score:\n                        best_score, best_config, best_season_order = rmse, order, seasonal_order\n                    print(\"SARIMA:{},{} | RMSE:{}\".format(order, seasonal_order, rmse))\n                except:\n                    continue\n    print(\"Best SARIMA: {}, {} | Best RMSE: {}\".format(best_config, best_season_order, best_score))  ","44973ecb":"p_values, q_values = range(0,9), range(0,7)\nseasonal_order = [9,12]","a5cf4ef9":"## Values based on my previous manually set values\n\nmodel_SO2_manual = SARIMAX(training['SO2'], order=(2,0,1), seasonal_order=(2,0,1,12))\nmodel_NO2_manual = SARIMAX(training['NO2'], order=(6,0,3), seasonal_order=(6,0,3,12))\nmodel_O3_manual = SARIMAX(training['O3'], order=(6, 0, 3), seasonal_order=(6, 0, 3, 9))\nmodel_CO_manual = SARIMAX(training['CO'], order=(7, 0, 6), seasonal_order= (7, 0, 6, 12))\nmodel_PM10_manual = SARIMAX(training['PM10'], order=(7, 0, 3), seasonal_order=(7, 0, 3, 12))\nmodel_PM25_manual = SARIMAX(training['PM2.5'], order=(7, 0, 3), seasonal_order=(7, 0, 3, 12))","abaa1e99":"## Gridsearch values for best RMSE\n\nmodel_SO2 = SARIMAX(training['SO2'], order=(2,0,1), seasonal_order=(2,0,1,12))\nmodel_NO2 = SARIMAX(training['NO2'], order=(2,0,1), seasonal_order=(2,0,1,12))\nmodel_O3 = SARIMAX(training['O3'], order=(5, 0, 1), seasonal_order=(5, 0, 1, 9))\nmodel_CO = SARIMAX(training['CO'], order=(2, 0, 0), seasonal_order= (2, 0, 0, 12))\nmodel_PM10 = SARIMAX(training['PM10'], order=(1, 0, 5), seasonal_order=(1, 0, 5, 12))\nmodel_PM25 = SARIMAX(training['PM2.5'], order=(8, 0, 6), seasonal_order=(8, 0, 6, 9))","798039a0":"model_SO2_manual = model_SO2_manual.fit()\nmodel_SO2 = model_SO2.fit()\n\nmodel_NO2_manual = model_NO2_manual.fit()\nmodel_NO2 = model_NO2.fit()\n\nmodel_O3_manual = model_O3_manual.fit()\nmodel_O3 = model_O3.fit()\n\nmodel_CO_manual = model_CO_manual.fit()\nmodel_CO = model_CO.fit()\n\nmodel_PM10_manual = model_PM10_manual.fit()\nmodel_PM10 = model_PM10.fit()\n\nmodel_PM25_manual = model_PM25_manual.fit()\nmodel_PM25 = model_PM25.fit()","650b8875":"predicted_SO2_manual = model_SO2_manual.forecast(steps=6)\npredicted_SO2 = model_SO2.forecast(steps=6)\n\npredicted_NO2_manual = model_NO2_manual.forecast(steps=6)\npredicted_NO2 = model_NO2.forecast(steps=6)\n\npredicted_O3_manual = model_O3_manual.forecast(steps=6)\npredicted_O3 = model_O3.forecast(steps=6)\n\npredicted_CO_manual = model_CO_manual.forecast(steps=6)\npredicted_CO = model_CO.forecast(steps=6)\n\npredicted_PM10_manual = model_PM10_manual.forecast(steps=6)\npredicted_PM10 = model_PM10.forecast(steps=6)\n\npredicted_PM25_manual = model_PM25_manual.forecast(steps=6)\npredicted_PM25 = model_PM25.forecast(steps=6)","188f57c6":"predictedSO2 = [go.Scatter(x=monthly.index, y=monthly['SO2'], name='SO2 Monthly Emissions'),\n                  go.Scatter(x=predicted_SO2.index, y=predicted_SO2, name='SO2 Predicted Emissions'),\n                go.Scatter(x=predicted_SO2_manual.index, y=predicted_SO2_manual, name='SO2 Predicted Emissions')\n               ]\n            \nlayout_predictedSO2 = go.Layout(title='SO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedNO2 = [go.Scatter(x=monthly.index, y=monthly['NO2'], name='NO2 Monthly Emissions'),\n                  go.Scatter(x=predicted_NO2.index, y=predicted_NO2, name='NO2 GS Predicted Emissions'),\n                go.Scatter(x=predicted_NO2_manual.index, y=predicted_NO2_manual, name='NO2 Predicted Emissions')]\n            \nlayout_predictedNO2 = go.Layout(title='NO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedO3 = [go.Scatter(x=monthly.index, y=monthly['O3'], name='O3 Monthly Emissions'),\n                  go.Scatter(x=predicted_O3.index, y=predicted_O3, name='O3 GS Predicted Emissions'),\n               go.Scatter(x=predicted_O3_manual.index, y=predicted_O3_manual, name='O3 Predicted Emissions')]\n            \nlayout_predictedO3 = go.Layout(title='O3 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedCO = [go.Scatter(x=monthly.index, y=monthly['CO'], name='CO Monthly Emissions'),\n                  go.Scatter(x=predicted_CO.index, y=predicted_CO, name='CO GS Predicted Emissions'),\n              go.Scatter(x=predicted_CO_manual.index, y=predicted_CO_manual, name='CO Predicted Emissions')]\n            \nlayout_predictedCO = go.Layout(title='CO Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedPM10 = [go.Scatter(x=monthly.index, y=monthly['PM10'], name='PM10 Monthly Emissions'),\n                  go.Scatter(x=predicted_PM10.index, y=predicted_PM10, name='PM10 GS Predicted Emissions'),\n                go.Scatter(x=predicted_PM10_manual.index, y=predicted_PM10_manual, name='PM10 Predicted Emissions')]\n            \nlayout_predictedPM10 = go.Layout(title='PM10 Levels',\n                    yaxis={'title':'Microgram\/m3'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n\npredictedPM25 = [go.Scatter(x=monthly.index, y=monthly['PM2.5'], name='PM2.5 Monthly Emissions'),\n                  go.Scatter(x=predicted_PM25.index, y=predicted_PM25, name='PM2.5 GS Predicted Emissions'),\n                go.Scatter(x=predicted_PM25_manual.index, y=predicted_PM25_manual, name='PM2.5 Predicted Emissions')]\n            \nlayout_predictedPM25 = go.Layout(title='PM2.5 Levels',\n                    yaxis={'title':'Microgram\/m3'},\n                    xaxis={'title':'Month'\n                                                   }\n                    )\n","05843d00":"fig = go.Figure(data=predictedSO2, layout=layout_predictedSO2)\npy.iplot(fig)","222b8306":"fig = go.Figure(data=predictedNO2, layout=layout_predictedNO2)\npy.iplot(fig)","711972f8":"fig = go.Figure(data=predictedO3, layout=layout_predictedO3)\npy.iplot(fig)","4763a3fa":"fig = go.Figure(data=predictedCO, layout=layout_predictedCO)\npy.iplot(fig)","4d30714c":"fig = go.Figure(data=predictedPM10, layout=layout_predictedPM10)\npy.iplot(fig)","ca153b2e":"fig = go.Figure(data=predictedPM25, layout=layout_predictedPM25)\npy.iplot(fig)","0f65ebba":"print(\"Manually selected ARIMA Model for SO2: \",evaluate_arima_model(training['SO2'],validation['SO2'], order=(2,1,1)))\nprint(\"Gridserach Model for SO2: \", evaluate_arima_model(training['SO2'],validation['SO2'], order=(7,1,3)))\nprint(\"\\n\")\nprint(\"Manually selected SARIMA Model for SO2: \",evaluate_sarima_model(training['SO2'],validation['SO2'],order=(2,0,1), seasonal_order=(2,0,1,12)))\nprint(\"Gridserach Model for SO2: \", evaluate_sarima_model(training['SO2'],validation['SO2'], order=(2,0,1), seasonal_order=(2,0,1,12)))","17671a97":"print(\"Manually selected ARIMA Model for NO2: \",evaluate_arima_model(training['NO2'],validation['NO2'], order=(6,1,3)))\nprint(\"Gridserach Model for NO2: \", evaluate_arima_model(training['NO2'],validation['NO2'], order=(3,1,5)))\nprint(\"\\n\")\nprint(\"Manually selected SARIMA Model for NO2: \",evaluate_sarima_model(training['NO2'],validation['NO2'],order=(6,0,3), seasonal_order=(6,0,3,12)))\nprint(\"Gridserach Model for NO2: \", evaluate_sarima_model(training['NO2'],validation['NO2'], order=(2,0,1), seasonal_order=(2,0,1,12)))","37ae7e3e":"print(\"Manually selected ARIMA Model for O3: \",evaluate_arima_model(training['O3'],validation['O3'], order=(6,1,2)))\nprint(\"Gridserach Model for O3: \", evaluate_arima_model(training['O3'],validation['O3'], order=(2,0,10)))\nprint(\"\\n\")\nprint(\"Manually selected SARIMA Model for O3: \",evaluate_sarima_model(training['O3'],validation['O3'], order=(6, 0, 3), seasonal_order=(6, 0, 3, 9)))\nprint(\"Gridserach Model for O3: \", evaluate_sarima_model(training['O3'],validation['O3'], order=(5, 0, 1), seasonal_order=(5, 0, 1, 9)))","f465fb7d":"print(\"Manually selected ARIMA Model for CO: \",evaluate_arima_model(training['CO'],validation['CO'], order=(7,0,6)))\nprint(\"Gridserach Model for CO: \", evaluate_arima_model(training['CO'],validation['CO'], order=(5,0,5)))\nprint(\"\\n\")\nprint(\"Manually selected SARIMA Model for CO: \",evaluate_sarima_model(training['CO'],validation['CO'], order=(7, 0, 6), seasonal_order= (7, 0, 6, 12)))\nprint(\"Gridserach Model for CO: \", evaluate_sarima_model(training['CO'],validation['CO'], order=(2, 0, 0), seasonal_order= (2, 0, 0, 12)))","c53a7fd1":"print(\"Manually selected ARIMA Model for PM10: \",evaluate_arima_model(training['PM10'],validation['PM10'], order=(7,1,3)))\nprint(\"Gridserach Model for PM10: \", evaluate_arima_model(training['PM10'],validation['PM10'], order=(1,1,4)))\nprint(\"\\n\")\nprint(\"Manually selected SARIMA Model for PM10: \",evaluate_sarima_model(training['PM10'],validation['PM10'], order=(7, 0, 3), seasonal_order=(7, 0, 3, 12)))\nprint(\"Gridserach Model for PM10: \", evaluate_sarima_model(training['PM10'],validation['PM10'], order=(1, 0, 5), seasonal_order=(1, 0, 5, 12)))","c97cdc53":"print(\"Manually selected ARIMA Model for PM2.5: \",evaluate_arima_model(training['PM2.5'],validation['PM2.5'], order=(7,0,3)))\nprint(\"Gridserach Model for PM10: \", evaluate_arima_model(training['PM2.5'],validation['PM2.5'], order=(7,1,6)))\nprint(\"\\n\")\nprint(\"Manually selected SARIMA Model for PM2.5: \",evaluate_sarima_model(training['PM2.5'],validation['PM2.5'], order=(7, 0, 3), seasonal_order=(7, 0, 3, 12)))\nprint(\"Gridserach Model for PM2.5: \", evaluate_sarima_model(training['PM2.5'],validation['PM2.5'], order=(8, 0, 6), seasonal_order=(8, 0, 6, 9)))","b09730b0":"## 2020 Time Series Predictions based on 2017-2019 Data","9a86ee3b":"Checking this autocorrelation plot, we see that:\n\nFor SO2: There is great correlation around 3 lags (3 months), that will probably be our lag number on the ARIMA model\n\nFor the others: The correlation goes further, for around 7 lags there's still data beyond the confidence level\n\np = 3-4 for SO2\np = 6-8 for others","5ee31b4a":"As the SARIMA model add one extra component for the gridseach, I'll manually search for each column","ccb03c94":"We can see that we'll need to differentiate SO2, NO2, O3 and PM10. The other data is considered stationary\n\n\n- p = 3-4 for SO2\n- p = 6-8 for others","6a24f469":"for column in ['SO2', 'NO2', 'O3', 'CO','PM10', 'PM2.5']:\n    print(\"-------------------Current Column: \",column, \"---------------------\")\n    evaluate_models(training[column],validation[column],seasonal_order, p_values, q_values)\n    print(\"-------------------------------------------------------------------\")","1b339478":"## ARIMA","54532876":"We see that after one differentiation, the data is already stationary, and this should be seen in our gridsearch model","c1f554c0":"----------","88a83199":"We see that for monthly values, the series are not stationary. However, when we take a look at the day by day report, the series is considered stationary, as the p-value of adfuller is lower than 0.05.","0842f293":"As there are missnig days in our dataset, it's not possible to predict with these data, unless I filled those missing data with the median.","fbe88ca8":"## Analysis month by month","4d4de048":"If you want to see more in depth thoughts on this analysis, please visit my blog: https:\/\/datasciencerecruit.com\/","52507d63":"Let's check if the series are estacionary","7f292fed":"for column in ['SO2', 'NO2', 'O3', 'CO','PM10', 'PM2.5']:\n    print(\"-------------------Current Column: \",column, \"---------------------\")\n    evaluate_models(training[column],validation[column],p_values, d_values, q_values)\n    print(\"-------------------------------------------------------------------\")","ca366276":"----------","b9ae5096":"## After the data conversion from the previous files, we'll do an analysis on the complete data as well as predictions for it.","5bc93f7d":"## Analysis year by year"}}