{"cell_type":{"0048b91f":"code","82c3ad12":"code","95bd3b01":"code","2ed734c7":"code","81f23952":"code","57a9eb3a":"code","aad00335":"code","d1b77f24":"markdown","95558b14":"markdown","e4c83afb":"markdown","42fdf009":"markdown","64d31c74":"markdown","0fcaf4f1":"markdown","7e426e7c":"markdown","7e93f614":"markdown","fea15f11":"markdown"},"source":{"0048b91f":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import normalize","82c3ad12":"teste = pd.read_csv('..\/input\/uci-in-txt\/adult_test.txt',\n        names=[\n        \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Marital Status\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\").dropna()\n\ntreino_i = pd.read_csv('..\/input\/uci-in-txt\/adult.txt',\n        names=[\n        \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Marital Status\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\").dropna()","95bd3b01":"treino = treino_i.drop(['fnlwgt',\"Education-Num\", 'Capital Gain', 'Capital Loss'], axis = 1) # Eliminacao de categorias desnecessarias\nmais50 = treino[treino['Target'] == '>50K']\nmenos50 = treino[treino['Target'] == '<=50K']\nfor label in treino.columns[:-1]:\n    dist_total = treino[label].value_counts()\n    dist_pobres = menos50[label].value_counts()\n    \n    prop_pobres = (dist_pobres\/dist_total).sort_values()\n    prop_ricos = 1-prop_pobres\n\n    plt.bar(prop_pobres.index, prop_pobres, label = '<=50K')\n    plt.bar(prop_ricos.index, prop_ricos, bottom = prop_pobres, label = '>50K')\n    plt.title(label)\n    plt.xticks(rotation = 90)\n    plt.legend(loc = 4)\n    plt.show()","2ed734c7":"fatores = ['Age', 'Education', 'Marital Status', 'Country', 'Sex', 'Relationship']\n\nXtreino = treino[fatores]\nXtreino = normalize(OrdinalEncoder().fit_transform(Xtreino))\nYtreino = treino.Target\n\nXteste = teste[fatores]\nXteste = normalize(OrdinalEncoder().fit_transform(Xteste))\nYteste = pd.Series([x[:-1] for x in teste['Target']])","81f23952":"acuracia = 0\nfor k in range(1,31):\n    knn = KNeighborsClassifier(n_neighbors=k)\n  \n    knn.fit(Xtreino,Ytreino)\n    k_acuracia = np.mean(cross_val_score(knn, Xtreino, Ytreino, cv=5))\n    if k_acuracia > acuracia:\n        acuracia = k_acuracia\n        k_f = k\n        knn_f = knn\n    print('Accuracy with k = {}: '.format(k), k_acuracia)","57a9eb3a":"print('Best accuracy, with k = {}, : '.format(k_f), acuracia)","aad00335":"previsao = knn_f.predict(Xteste)\nacuracia_f = accuracy_score(Yteste,previsao)\nprint('Test accuracy = ', acuracia_f)","d1b77f24":"De forma que obteve-se:","95558b14":"Dentre as categorias dispon\u00edveis, algumas imagens mostram padr\u00f5es que evidenciam o contraste entre as propor\u00e7\u00f5es nas parcelas. Principalmente, os contrastes s\u00e3o mais acentuados nas categorias \"Marital Status\", \"Sex\" e \"Relationship\", enquanto h\u00e1 um padr\u00e3o claro entre categorias com \"Age\", \"Education\" e \"Country\". Filtraram-se os conjuntos de treino e teste para incluir somente tais categorias - transformando-os em categorias num\u00e9ricas normalizadas - e separaram-se as colunas do par\u00e2metro-alvo:","e4c83afb":"Com os dados em m\u00e3os, percebeu-se a nececssidade de verificar as propor\u00e7\u00f5es do par\u00e2metro alvo nas varias segmenta\u00e7\u00f5es e categorias da amostra. No caso, esperava-se obter quais categorias teriam diferen\u00e7as mais significativas entre suas parcelas para o par\u00e2metro-alvo, e julgou-se que tal tarefa seria facilitada com uma representa\u00e7\u00e3o gr\u00e1fica.\n\nAssim, preparou-se um loop para produzir gr\u00e1ficos de barra com as propor\u00e7\u00f5es de indiv\u00edduos com rendas >50k e <=50k de cada parcela das categorias:","42fdf009":"# 1. An\u00e1lise preliminar","64d31c74":"Primeiramente, decidiu-se por preparar uma visualiza\u00e7\u00e3o inicial dos dados e como eles se relacionam ao par\u00e2metro-alvo. No c\u00f3digo, come\u00e7ou-se com a importa\u00e7\u00e3o das bibliotecas utilizadas em todo o percurso:","0fcaf4f1":"# 2. Aplica\u00e7\u00e3o do m\u00e9todo","7e426e7c":"Para, em seguida, importar a base de dados UCI (eliminando linhas com elementos desconhecidos):","7e93f614":"Finalmente, definidos os vetores de treino, prosseguiu-se para aplica\u00e7\u00e3o do classificador kNN. Contudo, ainda era necess\u00e1rio determinar o k ideal a ser utilizado na classifica\u00e7\u00e3o do vetor de testes. Para tal, aplicou-se uma valida\u00e7\u00e3o cruzada five-fold a potenciais k entre 1 e 30, escolhendo o melhor k pela m\u00e9dia das propor\u00e7\u00f5es de acertos obtidos em cada um dos 5 testes.","fea15f11":"Com o melhor m\u00e9todo determinado, bastou a aplica\u00e7\u00e3o aos dados de teste, obtendo-se o resultado final:"}}