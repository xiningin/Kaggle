{"cell_type":{"dcdb1606":"code","212cf9c0":"markdown"},"source":{"dcdb1606":"#!\/usr\/bin\/python3\n# coding=utf-8\n#===========================================================================\n# This is a simple script to perform a regression on the kaggle\n# 'House Prices' data set using a grid search, in conjunction with a\n# random forest regressor\n# Carl McBride Ellis (1.V.2020)\n#===========================================================================\n#===========================================================================\n# load up the libraries\n#===========================================================================\nimport pandas as pd\nimport numpy  as np \n\n#===========================================================================\n# read in the data\n#===========================================================================\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data  = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n#===========================================================================\n# select some features of interest (\"ay, there's the rub\", Shakespeare)\n#===========================================================================\nfeatures = ['OverallQual', 'GrLivArea', 'GarageCars',  'TotalBsmtSF']\n\n#===========================================================================\n#===========================================================================\nX_train       = train_data[features]\ny_train       = train_data[\"SalePrice\"]\nfinal_X_test  = test_data[features]\n\n#===========================================================================\n# essential preprocessing: imputation; substitute any 'NaN' with mean value\n#===========================================================================\nX_train      = X_train.fillna(X_train.mean())\nfinal_X_test = final_X_test.fillna(final_X_test.mean())\n\n#===========================================================================\n# hyperparameter grid search using scikit-learn GridSearchCV\n# we use the default 5-fold cross validation\n#===========================================================================\nfrom sklearn.model_selection import GridSearchCV\n# we use the random forest regressor\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor()\ngs = GridSearchCV(cv=5, error_score=np.nan, estimator=regressor,\n# dictionaries containing values to try for the parameters\nparam_grid={'max_depth'   : [ 2,  5,  7, 10],\n            'n_estimators': [20, 30, 50, 75]})\ngs.fit(X_train, y_train)\n\n# grid search has finished, now echo the results to the screen\nprint(\"The best parameters are \",gs.best_params_)\nthe_best_parameters = gs.best_params_\n\n#===========================================================================\n# perform the regression \n#===========================================================================\nregressor = RandomForestRegressor(\n                     n_estimators = the_best_parameters[\"n_estimators\"],\n                     max_depth    = the_best_parameters[\"max_depth\"])\nregressor.fit(X_train, y_train)\n\n#===========================================================================\n# use the model to predict the prices for the test data\n#===========================================================================\npredictions = regressor.predict(final_X_test)\n\n#===========================================================================\n# write out CSV submission file\n#===========================================================================\noutput = pd.DataFrame({\"Id\":test_data.Id, \"SalePrice\":predictions})\noutput.to_csv('submission.csv', index=False)","212cf9c0":"This is a sample code for performing a hyperparameter grid search using *GridSearchCV* from scikit-learn. We use the default 5-fold cross validation. For the regressor we shall use the *RandomForestRegressor*, also from scikit-learn."}}