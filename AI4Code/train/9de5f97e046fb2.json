{"cell_type":{"487aa2d1":"code","f9034d2d":"code","f3c27164":"code","bd9df5c3":"code","14250c0a":"code","c0b1a2b6":"code","59f41707":"code","645bf5e8":"code","2936a96b":"code","6bc4213a":"code","1c0d6bc7":"markdown","ee7d0f3c":"markdown","2831df05":"markdown"},"source":{"487aa2d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f9034d2d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom itertools import cycle\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])","f3c27164":"sars = pd.read_csv('\/kaggle\/input\/sars-outbreak-2003-complete-dataset\/sars_2003_complete_dataset_clean.csv', parse_dates=['Date'])\nsars.sort_values('Date', inplace=True)\nsars = sars.set_index('Date')\nsars.head()","bd9df5c3":"sars.info()","14250c0a":"grouped = sars.groupby(['Country']).max().sort_values(['Cumulative number of case(s)'], ascending=False).reset_index()\ngrouped.head()","c0b1a2b6":"affected= sars.groupby(['Country']).max()['Cumulative number of case(s)'].head(50).sort_values(ascending=True)\ndeaths = sars.groupby(['Country']).max()['Number of deaths'].head(50).reindex(affected.index, axis=0)\nrecovered = sars.groupby(['Country']).max()['Number recovered'].head(50).reindex(affected.index, axis=0)\npos = list(range(len(affected)))\nfig, ax = plt.subplots(figsize=(10,10))\nw = .3\nplt.barh([p+(2*w) for p in pos], deaths, w, color=next(color_cycle), label='Deaths')\nplt.barh([p+w for p in pos], recovered, w, color=next(color_cycle), label='Recovered')\nplt.barh([p for p in pos], affected, w, color=next(color_cycle), label='Affected')\n\nplt.ylim(min(pos)-w, max(pos)+w*4)\nax.set_yticks([p+w for p in pos])\nax.set_yticklabels(affected.index)\nplt.legend()\nplt.show()","59f41707":"fig, ax = plt.subplots(figsize=(10,10))\nsns.barplot(y='Country', x='Cumulative number of case(s)', data=grouped.head(15), color=next(color_cycle),alpha=0.5, label='affected')\nsns.barplot(y='Country', x='Number recovered', data=grouped.head(15), color=next(color_cycle),alpha=0.5, label='recovered')\nsns.barplot(y='Country', x='Number of deaths', data=grouped.head(15), color=next(color_cycle),alpha=0.5, label='deaths')\nplt.legend()\nplt.show()","645bf5e8":"sns.set(rc={'figure.figsize':(12,12)})\nsns.set(style='white')\nfor country in  sars.Country.unique()[0:15]:\n    df = sars[sars.Country==country]['Cumulative number of case(s)']\n    df.plot(label=str(country))\n    plt.legend()","2936a96b":"sns.set(rc={'figure.figsize':(12,12)})\nsns.set(style='white')\nfor country in  sars.Country.unique()[0:15]:\n    df = sars[sars.Country==country]['Number recovered']\n    df.plot(label=str(country))\n    plt.legend()","6bc4213a":"sns.set(rc={'figure.figsize':(12,12)})\nsns.set(style='white')\nfor country in  sars.Country.unique()[0:15]:\n    df = sars[sars.Country==country]['Number of deaths']\n    df.plot(label=str(country))\n    plt.legend()","1c0d6bc7":"### Plotting the Recovered","ee7d0f3c":"### Plotting the Affected","2831df05":"### Plotting the Deaths"}}