{"cell_type":{"7fd4c402":"code","51b1b23b":"code","f94d3cdf":"code","59d39e95":"code","fc547de9":"code","0ebe56af":"code","20e38028":"code","1d2d31fb":"code","fbca0e0f":"code","7b5cc251":"code","e6241574":"code","d9fc04e9":"code","dc963855":"code","4b1788e2":"code","7cea3bc1":"code","672153e2":"markdown","8fee82ac":"markdown","7d23722e":"markdown","ba28a8a1":"markdown","9f6d69d7":"markdown","1b994fbf":"markdown","f3ed382c":"markdown","b6553c8f":"markdown","000c7e69":"markdown","471410a7":"markdown","b1baa034":"markdown","d4e5cbcc":"markdown","44622e07":"markdown"},"source":{"7fd4c402":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dense, Flatten, BatchNormalization, Conv2D, MaxPool2D,GlobalAveragePooling2D\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, TensorBoard\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.applications.xception import Xception\n\nfrom keras.utils import plot_model\nfrom tensorflow.keras import layers\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport os\nimport shutil\nimport random\nimport glob\nimport matplotlib.pyplot as plt\nimport warnings\nimport datetime\n\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport matplotlib.pyplot as plt\n","51b1b23b":"# Organize data into train, test directories\nmain_path = \"\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\"\nwith_mask_path = \"\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/with_mask\"\nincorrect_mask_path = \"\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/incorrect_mask\"\nwithout_mask_path = \"\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/without_mask\"","f94d3cdf":"from distutils.dir_util import copy_tree\n\nif os.path.isdir('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset') is False:\n        \n    os.makedirs('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset')\n    \n    fromDir_main='\/kaggle\/input\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/'\n    fromDir_with='\/kaggle\/input\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/with_mask'\n    fromDir_incorrect='\/kaggle\/input\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/incorrect_mask'\n    fromDir_without='\/kaggle\/input\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/without_mask'\n    \n    toDir_main= '\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset'\n    toDir_with='\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/with_mask'\n    toDir_incorrect='\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/incorrect_mask'\n    toDir_without='\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/without_mask'\n    \n    \n    fromDir_list=[fromDir_main,fromDir_with,fromDir_incorrect,fromDir_without]\n    \n    toDir_list=[toDir_main,toDir_with,toDir_incorrect,toDir_without]\n\n\n    for fromDir,toDir in zip(fromDir_list,toDir_list):\n        copy_tree(fromDir,toDir)","59d39e95":"#Sanity Check\nprint(len(os.listdir(\"\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/with_mask\")))\nprint(len(os.listdir(\"\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/incorrect_mask\")))\nprint(len(os.listdir(\"\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/without_mask\")))","fc547de9":"import os\ntrain_size=540\ntest_size=60\nos.chdir(main_path)\nif os.path.isdir('valid\/with_mask') is False:\n    #train:\n    os.makedirs('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/with_mask')\n    os.makedirs('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/incorrect_mask')\n    os.makedirs('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/without_mask')\n    \n    #test:\n    os.makedirs('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/with_mask')\n    os.makedirs('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/incorrect_mask')\n    os.makedirs('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/without_mask')\n\n    \n    os.chdir(with_mask_path)\n    for i in random.sample(glob.glob('*'), train_size):\n        shutil.move(i,\n                    '\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/with_mask')\n\n    os.chdir(incorrect_mask_path)\n    for i in random.sample(glob.glob('*'), train_size):\n        shutil.move(i,\n                    '\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/incorrect_mask')\n\n    os.chdir(without_mask_path)\n    for i in random.sample(glob.glob('*'), train_size):\n        shutil.move(i,\n                    '\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/without_mask')\n    \n    os.chdir(with_mask_path)\n    for i in random.sample(glob.glob('*'), test_size):\n        shutil.move(i,\n                    '\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/with_mask')\n\n    os.chdir(incorrect_mask_path)\n    for i in random.sample(glob.glob('*'), test_size):\n        shutil.move(i,\n                    '\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/incorrect_mask')\n\n    os.chdir(without_mask_path)\n    for i in random.sample(glob.glob('*'), test_size):\n        shutil.move(i,\n                    '\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/without_mask')\n        \nos.chdir('..\/..\/')","0ebe56af":"#Sanity Check\nprint(len(os.listdir('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/with_mask')))\nprint(len(os.listdir('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/incorrect_mask')))\nprint(len(os.listdir('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/without_mask')))\n\nprint(len(os.listdir('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/with_mask')))\nprint(len(os.listdir('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/incorrect_mask')))\nprint(len(os.listdir('\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/without_mask')))\n","20e38028":"from keras.preprocessing.image import ImageDataGenerator, load_img\n\n\ntrain_dir='\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/train\/'\ntest_dir='\/kaggle\/working\/face-mask-detectormask-not-mask-incorrect-mask\/dataset\/test\/'\n\n\nprint('training images\\n')\nplt.figure(figsize=(14,22))\ni = 1\nfor expression in os.listdir(train_dir):\n    img = load_img((train_dir + expression +'\/'+ os.listdir(train_dir + expression)[5]))\n    plt.subplot(1,7,i)\n    plt.imshow(img)\n    plt.title(expression)\n    plt.axis('off')\n    i += 1\nplt.show()\n\nprint('testing images\\n')\nplt.figure(figsize=(14,22))\ni = 1\nfor expression in os.listdir(test_dir):\n    img = load_img((test_dir + expression +'\/'+ os.listdir(test_dir + expression)[5]))\n    plt.subplot(1,7,i)\n    plt.imshow(img)\n    plt.title(expression)\n    plt.axis('off')\n    i += 1\nplt.show()","1d2d31fb":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   zoom_range=0.3,\n                                   rotation_range=30,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   brightness_range=[0.4,1.5],\n                                   horizontal_flip=True)\n\ntraining_set = train_datagen.flow_from_directory(train_dir,\n                                                batch_size=32,\n                                                target_size=(224,224),\n                                                shuffle=True,\n                                                color_mode='rgb',\n                                                class_mode='categorical')\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_set = test_datagen.flow_from_directory(test_dir,\n                                                batch_size=32,\n                                                target_size=(224,224),\n                                                shuffle=True,\n                                                color_mode='rgb',\n                                                class_mode='categorical')","fbca0e0f":"vgg = VGG16(weights='imagenet', include_top=False,input_shape = (224,224,3))","7b5cc251":"for layer in vgg.layers:\n    layer.trainable = False","e6241574":"vgg16_model = Sequential()\nvgg16_model.add(vgg)\nvgg16_model.add(Flatten())\nvgg16_model.add(Dense( 3, activation = \"softmax\"))\n\nvgg16_model.summary()","d9fc04e9":"plot_model(vgg16_model, to_file='vgg16_diagram.jpg', show_shapes=True, show_layer_names=True)\n","dc963855":"val_steps = test_set.n \/\/ test_set.batch_size\nsteps_per_epoch = training_set.n \/\/ training_set.batch_size\n\ncheckpoint = ModelCheckpoint(\"vgg16.h5\",monitor = \"val_accuracy\",save_best_only = True,verbose=1)\nearlystop = EarlyStopping(monitor=\"val_accuracy\",patience=8,verbose=1)\n\nsgd = SGD(lr=0.01, momentum=0.9, nesterov=True)\nvgg16_model.compile(optimizer=sgd,loss = \"categorical_crossentropy\",metrics = [\"accuracy\"])\n\nhistory = vgg16_model.fit(x=training_set,\n                 validation_data=test_set,\n                 epochs=25,\n                 callbacks=[checkpoint,earlystop],\n                 steps_per_epoch=steps_per_epoch,\n                 validation_steps=val_steps)","4b1788e2":"def plot_res(history): #\n    plt.figure(figsize=(14,5))\n    plt.subplot(1,2,1)\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('model Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend(['train', 'test'], loc='upper left')\n    \n    plt.subplot(1,2,2)\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.title('Model Accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Accuracy')\n    plt.legend(['train', 'test'], loc='upper left')\n    \n    plt.show()","7cea3bc1":"plot_res(history)","672153e2":"Exhibition of exapmple for each label from train and test datasets:","8fee82ac":"# Modeling - VGG16\nI choose VGG16 model for training","7d23722e":"Model Diagram:","ba28a8a1":"# Create Test and Train Dataset","9f6d69d7":"Devision train and test datasets by labels","1b994fbf":"> The Training Itself:","f3ed382c":"Model Initialization:","b6553c8f":"Model Creation:","000c7e69":"Duplication of file from input area to '\/kaggle working directory'","471410a7":"Goal:\nDetection if the person correctly wears a mask, incorrectly wears a mask or doesn't wear a mask.\nUsing VGG16.\n\nDataset:\nDivided into 3 categories:\nPeople wearing mask\nPeople not wearing mask\nPeople wearing mask but in an incorrect manner","b1baa034":"Loss & Accuracy","d4e5cbcc":"Now, we are going to compare between the performences of VGG16 and Xception models.","44622e07":"As we can see the VGG16 model with Adam optimizer is efficient."}}