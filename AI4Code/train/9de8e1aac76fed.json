{"cell_type":{"d65d5791":"code","b1a405d3":"code","2bd62566":"code","b0bcf459":"code","af966e5f":"code","8f25e3ab":"code","654a4964":"markdown","0c6ea0f0":"markdown","d7b6e47f":"markdown"},"source":{"d65d5791":"from collections import deque","b1a405d3":"denominaciones = [100000, 50000, 20000, 10000, 5000, 2000, 1000]\nbandejas = {}\nfor valor in denominaciones:\n    bandejas[valor] = 0","2bd62566":"bandejas[100000] = 5 \nbandejas[50000] = 2\nbandejas[20000] = 1\nbandejas[10000] = 3\nbandejas[5000] = 2\nbandejas[2000] = 0\nbandejas[1000] = 5","b0bcf459":"import random\ndef generate_serial(value):\n \n    if value == 100000:\n        serial = '12'\n    elif value == 50000:\n        serial = '18'\n    elif value == 20000:\n        serial = '15'\n    elif value == 10000:\n        serial = '21'\n    elif value == 5000:\n        serial = '26'\n    elif value == 2000:\n        serial = '34'\n    elif value == 1000:\n        serial = '45'\n    else:\n        return\n    for _ in range(6):\n        serial += str(random.randrange(10))\n\n    return serial","af966e5f":"def calcular_billetes(monto_global, valor):\n    if valor > monto_global:\n        return None, monto_global\n    if valor == 0:\n        return [], monto_global\n    for denominacion, cantidad in bandejas.items():\n        if cantidad > 0:\n            resultado = []\n            if denominacion <= valor:\n                bandejas[denominacion] -= 1\n                monto_global -= denominacion\n                resultado = [(denominacion, generate_serial(denominacion))]\n                billetes = calcular_billetes(monto_global, valor - denominacion)\n                if billetes is not None:\n                    resultado.extend(billetes)\n                    return resultado, monto_global\n                bandejas[denominacion] += 1\n                monto_global += denominacion\n                \n    return None, monto_global\n","8f25e3ab":"bandejas = { 100000: 5, 50000: 2, 20000: 1, 10000: 3, 5000: 2, 2000: 0, 1000: 5 }\nmonto_global = 665000\nbilletes, monto_global = calcular_billetes(monto_global, 478000)\nprint(billetes)\nprint(bandejas)\nprint(monto_global)","654a4964":"\n## Descomponiendo el problema\n\n* \u00bfQu\u00e9 pasa si la cantidad a expresar es 0?\n* \u00bfQu\u00e9 pasa si la cantidad a expresar es menor a cualquier denominaci\u00f3n de billete existente?\n* \u00bfQu\u00e9 pasa si la cantidad a expresar es igual a el valor de un billete existente?\n* \u00bfQu\u00e9 pasa si la cantidad a expresar es mayor al valor de uno de los billetes disponibles?\n","0c6ea0f0":"\n## \u00bfPor qu\u00e9 es un problema complejo?\n\n1. Es un algoritmo cuya complejidad depende de las denominaciones, la cantidad de billetes, la cantidad a expresar.  Ser\u00eda aproximadamente de orden c\u00fabico.\n2. La resoluci\u00f3n r\u00e1pida depende de la observaci\u00f3n y la deducci\u00f3n, es decir, no es solo matem\u00e1ticas.\n3. Hay un n\u00famero limitado de billetes; es decir, empezar por un valor no lleva necesariamente a una soluci\u00f3n.\n\n### Caso del Ejemplo","d7b6e47f":"# El problema de la billetera\n\n## \u00bfCu\u00e1l es la mejor manera de representar una cantidad en billetes?\n\nDado una cantidad de bandejas de billetes, cada una con una denominaci\u00f3n y una cantidad de billetes.  Encontrar la mejor manera de representar un valor en los billetes de las bandejas."}}