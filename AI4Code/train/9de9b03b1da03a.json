{"cell_type":{"a0045f29":"code","2e1330ea":"code","ceb45fac":"code","66cef3c0":"code","5d00fdd0":"code","cd72df14":"code","0d829772":"code","01bdac35":"code","52c36acc":"code","a599eb72":"code","642679ea":"code","da36a613":"code","d86ed0ea":"code","3e84849c":"code","c451c85a":"code","83d0f885":"code","30273f52":"code","b4eced52":"code","eccb51e6":"code","6ea427ee":"code","9e58d2b1":"code","a42f3021":"markdown","1affe439":"markdown","7cfdd6e0":"markdown","c779c89f":"markdown","c60f391b":"markdown"},"source":{"a0045f29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e1330ea":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import tree","ceb45fac":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import svm","66cef3c0":"train_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","5d00fdd0":"train_data.info()","cd72df14":"train_data.describe()","0d829772":"missing = train_data.isnull().sum()\nmissing","01bdac35":"X = train_data.drop(columns=['label'])\ny = train_data['label']","52c36acc":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=137)","a599eb72":"clf = tree.DecisionTreeClassifier(criterion='entropy')\nclf = clf.fit(X_train, y_train)\ny_dt = clf.predict(X_test)\n\nprint(\"Accuracy: {}\".format(accuracy_score(y_test, y_dt)))","642679ea":"gnb = GaussianNB()\ngnb = gnb.fit(X_train, y_train)\ny_nb = gnb.predict(X_test)\nprint('Accuracy: {}'.format(accuracy_score(y_test, y_nb)))","da36a613":"rf = RandomForestClassifier()\nrf = rf.fit(X_train, y_train)\nrf_pred = rf.predict(X_test)\nprint('Accuracy: {}'.format(accuracy_score(y_test, rf_pred)))","d86ed0ea":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","3e84849c":"#KNN\nknn_clf = KNeighborsClassifier(n_neighbors=5)\nknn_clf = knn_clf.fit(X_train, y_train)\ny_knn = knn_clf.predict(X_test)\nprint('Accuracy: {}'.format(accuracy_score(y_test, y_knn)))","c451c85a":"#SVM\nsvm_clf = svm.SVC()\nsvm_clf.fit(X_train, y_train)\ny_svm = svm_clf.predict(X_test)\nprint('Accuracy: {}'.format(accuracy_score(y_test, y_svm)))","83d0f885":"digit_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","30273f52":"digit_test.info()","b4eced52":"digit_test.isnull().sum()","eccb51e6":"digit_test.describe()","6ea427ee":"test_X = digit_test","9e58d2b1":"test_rf = rf.predict(test_X)\noutput = pd.DataFrame({'ImageId': np.arange(1, (test_rf.shape[0] + 1)), 'Label': test_rf})\noutput.to_csv('output.csv', index=False)\nprint('Sucess!')","a42f3021":"Decision Tree\n","1affe439":"RandomForest seems to have the highest accuracy on the training data. This does not mean that it will perform the most robustily on the actual testing data but it is the model that I feel comfortable moving forward with.","7cfdd6e0":"RandomForest","c779c89f":"For the last two models that I will be testing, they perform better if everything is scaled appropriately. So I will be scaling the training and testing sets before running the kNN and SVM models.","c60f391b":"Naive Bayes"}}