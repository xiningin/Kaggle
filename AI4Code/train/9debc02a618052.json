{"cell_type":{"c846908e":"code","82f130da":"code","3ce1b6ac":"code","bcae3d9e":"code","ef14ffbf":"code","028ac334":"code","cc0aee42":"code","e31a277b":"code","df7ca2e9":"code","7cc81dae":"code","441d1b18":"code","9c33debe":"code","ef960715":"code","cbfab5b0":"code","fb702c53":"code","ba2fe932":"code","4c7dd11d":"code","ca198887":"code","e9caace2":"code","bd3d9e5f":"code","1c80ce60":"markdown","5eed45c2":"markdown","e7b2ec65":"markdown","bc806ba9":"markdown","cd99db8c":"markdown","050ce294":"markdown","ab13d6a7":"markdown","9a42f0f8":"markdown","4ec19fd2":"markdown"},"source":{"c846908e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","82f130da":"top_5000_movies=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ntop_5000_movies=top_5000_movies[['title','overview','popularity','release_date','budget','revenue','original_language','runtime','tagline','vote_average','vote_count']]","3ce1b6ac":"top_5000_movies.head()","bcae3d9e":"top_5000_movies = top_5000_movies[top_5000_movies.vote_count>=3000]","ef14ffbf":"top_5000_movies=top_5000_movies.sort_values(by=['vote_average'],ascending=False)","028ac334":"trace1=go.Scatter(\n    x=top_5000_movies.budget,\n    y=top_5000_movies.revenue,\n    mode='markers',\n    marker=dict(color='rgb(89,66,156)')\n)\ndata=[trace1]\nlayout=dict(xaxis=dict(title='Budget of Movies'),yaxis=dict(title='Revenue of Movies'))\nfig=dict(data=data,layout=layout)\niplot(fig)","cc0aee42":"top_5000_movies['rank']=np.arange(1,249)","e31a277b":"top_5000_movies.vote_average.value_counts()","df7ca2e9":"top_5000_movies.head()","7cc81dae":"top_5000_movies.head(10)","441d1b18":"top_5000_movies.info()","9c33debe":"top_100_movies=top_5000_movies.head(100)\ntrace1=go.Scatter3d(\n    x=top_100_movies.budget,\n    y=top_100_movies.revenue,\n    z=top_100_movies.vote_average,\n    mode='markers',\n    marker=dict(size=10,color='red')\n\n)\ndata=[trace1]\nlayout=go.Layout(margin=dict(l=0,r=0,t=0,b=0))\nfig=go.Figure(data=data,layout=layout)\niplot(fig)","ef960715":"import matplotlib.pyplot as plt\nplt.figure(figsize=(18,10))\nsns.barplot(x=top_100_movies.title,y=top_100_movies.vote_average)\nplt.xticks(rotation=90)\nplt.xlabel('Movies')\nplt.show()","cbfab5b0":"top_5000_movies.reset_index()","fb702c53":"top_100_movies['budget']=top_100_movies['budget']\/max(top_100_movies['budget'])\ntop_100_movies.revenue=top_100_movies.revenue\/max(top_100_movies.revenue)\nf,ax1 = plt.subplots(figsize=(20,10))\nsns.pointplot(x=top_100_movies.title,y=top_100_movies.revenue,color='red',alpha=0.8)\nsns.pointplot(x=top_100_movies.title,y=top_100_movies.budget,color='blue',alpha=0.8)\nplt.text(2,0.9,'Budget',color='blue',fontsize=18,style='italic')\nplt.text(2,0.85,'Revenue',color='red',fontsize=18,style='italic')\nplt.xlabel('Movies',fontsize=15,color='green')\nplt.ylabel('Values',fontsize=15,color='cyan')\nplt.xticks(rotation=90)\nplt.title('Revenue vs Budget',fontsize=25)\nplt.grid()\nplt.show()","ba2fe932":"df_x = top_5000_movies.iloc[:4,:]\ntrace1=go.Bar(\n    x=df_x.title,\n    y=df_x.budget,\n    name='Budget',\n    marker=dict(color='rgb(89,66,179)',line=dict(color='white',width=1.5)),\n\n)\ntrace2=go.Bar(\n    x=df_x.title,\n    y=df_x.revenue,\n    name='Revenue',\n    marker=dict(color='rgb(255,1,10)',line=dict(color='white',width=1.5)),\n\n)\ndata=[trace1,trace2]\nlayout=go.Layout(barmode='group')\nfig=go.Figure(data=data,layout=layout)\niplot(fig)","4c7dd11d":"top_5000_movies['popularity']=(top_5000_movies['popularity']\/max(top_5000_movies['popularity']))*80\ninternational_color = [float(each) for each in top_5000_movies.revenue]\ndata=go.Scatter(\n    x=top_5000_movies.vote_average,\n    y=top_5000_movies.budget,\n    mode='markers',\n    marker=dict(color=international_color,size=top_5000_movies['popularity'],showscale=True),\n    text=top_5000_movies.title\n)\ndata=[data]\nlayout=go.Layout(xaxis=dict(title='IMDB Score'),yaxis=dict(title='Budget'))\nfig=go.Figure(data=data,layout=layout)\nplt.savefig('Scat.png')\niplot(fig)\nplt.show()","ca198887":"from wordcloud import WordCloud","e9caace2":"data=top_100_movies.title\nplt.subplots(figsize=(8,8))\nworlcloud=WordCloud(\n        background_color='white',\n        width=512,\n        height=384,).generate(' '.join(data))\nplt.imshow(worlcloud)\nplt.axis('off')\nplt.savefig('movies.png')\nplt.show()\n","bd3d9e5f":"trace1=go.Box(\n    y=top_5000_movies.budget,\n    name='Budgets of Movies',\n    marker=dict(color='rgb(53,5,96)')\n)\ntrace2=go.Box(\n    y=top_5000_movies.revenue,\n    name='Revenues of Movies',\n    marker=dict(color='rgb(99,5,89)')\n)\ndata=[trace1,trace2]\niplot(data)","1c80ce60":"**Scatter Chart**","5eed45c2":"**Line Chart**","e7b2ec65":"**In this kernel , I tried to visualize most watched movies.**","bc806ba9":"**Another Scatter Chart**","cd99db8c":"**Another Bar Chart**","050ce294":"**Box Chart**","ab13d6a7":"**World Cloud**","9a42f0f8":"**Bar Chart**","4ec19fd2":"**3D Scatter Chart**"}}