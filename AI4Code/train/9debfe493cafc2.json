{"cell_type":{"25c0e1cb":"code","0435604d":"code","237a4057":"code","9f62b6d2":"code","6d0b7210":"code","52135e60":"code","5b24bfb7":"code","29331fde":"code","f824067d":"code","f40ff6a9":"code","fbff85b8":"code","413870b5":"code","a3a21644":"code","b28e1f90":"code","9cb2ad01":"code","b85bbbc7":"code","fd19eb7b":"code","7a65adb3":"markdown","f88b2297":"markdown","6d09f7cc":"markdown","b10c843c":"markdown","b83157cb":"markdown","a38f0a80":"markdown","0bb5c05e":"markdown","1fb6526b":"markdown","3c06ba62":"markdown","d64ff1c4":"markdown","e253fe13":"markdown","4d252887":"markdown","7a4ed7c3":"markdown","e9e12812":"markdown","0e78fb87":"markdown","908659ca":"markdown","2049966c":"markdown","f7d1dbe7":"markdown","8909860a":"markdown"},"source":{"25c0e1cb":"import math\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0435604d":"df = pd.read_excel(\"..\/input\/car-consume\/measurements2.xlsx\")\nprint(df)","237a4057":"df_scatter = df.loc[:,[\"consume\", \"distance\", \"speed\", \"temp_inside\", \"temp_outside\"]]\npd.plotting.scatter_matrix(df_scatter, diagonal=\"kde\", figsize=(10.0, 10.0))","9f62b6d2":"# gas_type\ndf[[\"consume\", \"gas_type\"]].boxplot(by=\"gas_type\")","6d0b7210":"# AC\ndf[[\"consume\", \"AC\"]].boxplot(by=\"AC\")","52135e60":"# rain\ndf[[\"consume\", \"rain\"]].boxplot(by=\"rain\")","5b24bfb7":"# sun\ndf[[\"consume\", \"sun\"]].boxplot(by=\"sun\")","29331fde":"x = df[\"distance\"].values\ny = df[\"consume\"].values\n\nplt.scatter(x, y)\nplt.xlabel(\"distance\")\nplt.ylabel(\"consume\")\nplt.show()","f824067d":"plt.scatter(np.reciprocal(x), y)\nplt.xlabel(\"1\/distance\")\nplt.ylabel(\"consume\")\nplt.show()","f40ff6a9":"x = np.reciprocal(x)\nregr = LinearRegression()\n\nx_train = x.reshape(-1,1)\nregr.fit(x_train, y)","fbff85b8":"consume_pred = regr.intercept_ + regr.coef_[0] * x\n\nplt.plot(x, y, \"o\")\nplt.xlabel(\"1\/distance\")\nplt.ylabel(\"consume\")\nplt.plot(x, consume_pred)\nplt.show()","413870b5":"# \u7cbe\u5ea6\u8a55\u4fa1\u7528\u306e\u95a2\u6570\ndef MAE(pred, reference):\n    assert len(pred) == len(reference)\n    diff = pred - reference\n    diff = np.abs(diff)\n    return diff.mean()\n\ndef MSE(pred, reference):\n    assert len(pred) == len(reference)\n    diff = pred - reference\n    diff = diff**2\n    return diff.mean()\n\ndef RMSE(pred, reference):\n    return math.sqrt(MSE(pred, reference))","a3a21644":"mae = MAE(consume_pred, y)\nmse = MSE(consume_pred, y)\nrmse = RMSE(consume_pred, y)\nprint(\"(consume), (1\/distance)\")\nprint(\"MAE = {0:.3f} (0.01 \u00d7 L\/km)\".format(mae))\nprint(\"MSE = {0:.3f} (1.0e-4 \u00d7 L**2\/km**2)\".format(mse))\nprint(\"RMSE = {0:.3f} (0.01 \u00d7 L\/km)\".format(rmse))","b28e1f90":"n_RS = len(df[(df.rain == 1) & (df.sun == 1)])    # \u964d\u96e8\u3042\u308a \u304b\u3064 \u65e5\u5c04\u3042\u308a\nn_Rs = len(df[(df.rain == 1) & (df.sun == 0)])    # \u964d\u96e8\u3042\u308a \u304b\u3064 \u65e5\u5c04\u306a\u3057\nn_rS = len(df[(df.rain == 0) & (df.sun == 1)])    # \u964d\u96e8\u306a\u3057 \u304b\u3064 \u65e5\u5c04\u3042\u308a\nn_rs = len(df[(df.rain == 0) & (df.sun == 0)])    # \u964d\u96e8\u306a\u3057 \u304b\u3064 \u65e5\u5c04\u306a\u3057\n\nprint(\"        \u65e5\u5c04\u3042\u308a, \u65e5\u5c04\u306a\u3057\")\nprint(\"\u964d\u96e8\u3042\u308a{0:8d}, {1:8d}\".format(n_RS, n_Rs))\nprint(\"\u964d\u96e8\u306a\u3057{0:8d}, {1:8d}\".format(n_rS, n_rs))","9cb2ad01":"# rain\nx = df[\"rain\"].values\ny = df[\"consume\"].values\n\nregr = LinearRegression()\nx_train = x.reshape(-1,1)\nregr.fit(x_train, y)\nconsume_pred = regr.intercept_ + regr.coef_[0] * x\n\nplt.plot(x, y, \"o\")\nplt.xlabel(\"rain\")\nplt.ylabel(\"consume\")\nplt.plot(x, consume_pred)\nplt.show()\n\nmae = MAE(consume_pred, y)\nmse = MSE(consume_pred, y)\nrmse = RMSE(consume_pred, y)\nprint(\"(consume), (rain)\")\nprint(\"MAE = {0:.3f} (0.01 \u00d7 L\/km)\".format(mae))\nprint(\"MSE = {0:.3f} (1.0e-4 \u00d7 L**2\/km**2)\".format(mse))\nprint(\"RMSE = {0:.3f} (0.01 \u00d7 L\/km)\".format(rmse))\n","b85bbbc7":"# sun\nx = df[\"sun\"].values\ny = df[\"consume\"].values\n\nregr = LinearRegression()\nx_train = x.reshape(-1,1)\nregr.fit(x_train, y)\nconsume_pred = regr.intercept_ + regr.coef_[0] * x\n\nplt.plot(x, y, \"o\")\nplt.xlabel(\"rain\")\nplt.ylabel(\"consume\")\nplt.plot(x, consume_pred)\nplt.show()\n\nmae = MAE(consume_pred, y)\nmse = MSE(consume_pred, y)\nrmse = RMSE(consume_pred, y)\nprint(\"(consume), (sun)\")\nprint(\"MAE = {0:.3f} (0.01 \u00d7 L\/km)\".format(mae))\nprint(\"MSE = {0:.3f} (1.0e-4 \u00d7 L**2\/km**2)\".format(mse))\nprint(\"RMSE = {0:.3f} (0.01 \u00d7 L\/km)\".format(rmse))","fd19eb7b":"x = df[[\"distance\", \"rain\"]].values\ny = df[\"consume\"].values\nx[:,0] = np.reciprocal(x[:,0])    # distance \u2192 1\/distance\n\nx_train = x\nregr.fit(x_train, y)\n\nconsume_pred = regr.intercept_ + regr.coef_[0] * x[:,0] + regr.coef_[1] * x[:,1]\n\nmae = MAE(consume_pred, y)\nmse = MSE(consume_pred, y)\nrmse = RMSE(consume_pred, y)\nprint(\"(consume), (1\/distance, rain)\")\nprint(\"MAE = {0:.3f} (0.01 \u00d7 L\/km)\".format(mae))\nprint(\"MSE = {0:.3f} (1.0e-4 \u00d7 L**2\/km**2)\".format(mse))\nprint(\"RMSE = {0:.3f} (0.01 \u00d7 L\/km)\".format(rmse))","7a65adb3":"### distance","f88b2297":"\u964d\u96e8\u3068\u65e5\u5c04\u306f\u72ec\u7acb\u3067\u306f\u306a\u3044\u306e\u3067\uff0crain\u3068sun\u3092\u305d\u306e\u307e\u307e\u8aac\u660e\u5909\u6570\u306b\u542b\u3081\u308b\u306e\u306f\u9069\u5207\u3067\u306a\u3044\uff0e\u3053\u3053\u3067\u306f\uff0c\u7dda\u5f62\u56de\u5e30\u306e\u7cbe\u5ea6\u304c\u9ad8\u304f\u306a\u308b\u65b9\u3092\u63a1\u7528\u3059\u308b\uff0e","6d09f7cc":"### \u9023\u7d9a\u91cf\u306e\u6563\u5e03\u56f3\u884c\u5217\nconsume, distance, speed, temp_inside, temp_outside","b10c843c":"\u3053\u308c\u3082\u6bd4\u8f03\u7684\u5f71\u97ff\u304c\u5927\u304d\u3044\u3088\u3046\u306b\u898b\u3048\u308b\uff0e","b83157cb":"* \u30c7\u30fc\u30bf\u306e\u5206\u5e03\u306b\u5927\u304d\u306a\u504f\u308a\u306f\u306a\u3057\uff0e\n* consume\u3068\u76f8\u95a2\u304c\u3042\u308a\u305d\u3046\u306a\u76f8\u624b\uff0c\n    * distance\uff0c\n    * speed\uff0c\n    * \u305f\u3060\u3057\uff0cdistance\u3068speed\u306b\u5f37\u3044\u76f8\u95a2\u3042\u308a\uff0e","a38f0a80":"consume\u3068gas_type\u306e\u95a2\u4fc2\u306f\uff0c\u8a2d\u554f\u306e\u4e3b\u984c\u3067\u3042\u308b\u304c\uff0c\u9855\u8457\u306a\u5dee\u304c\u3042\u308b\u3088\u3046\u306b\u306f\u898b\u3048\u306a\u3044\uff0e","0bb5c05e":"## \u521d\u671f\u5316","1fb6526b":"## \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5206\u5e03","3c06ba62":"### 1\/distance\u3068rain\u306b\u3088\u308b\u91cd\u56de\u5e30","d64ff1c4":"\u50c5\u304b\u3060\u304c\uff0crain\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u305f\u65b9\u304c\u7cbe\u5ea6\u304c\u9ad8\u3044\uff0e","e253fe13":"\u3053\u308c\u3082\u50c5\u304b\u306a\u5dee\uff0e","4d252887":"\u50c5\u304b\u306b\u7cbe\u5ea6\u304c\u5411\u4e0a\u3057\u305f\u306e\u3067\uff0c\u826f\u3057\u3068\u3059\u308b\uff0e","7a4ed7c3":"## \u76f8\u95a2\u95a2\u4fc2\u306e\u78ba\u8a8d","e9e12812":"\u53f3\u80a9\u4e0b\u304c\u308a\u306b\u898b\u3048\u308b\u306e\u3067\u9006\u6570\u3092\u3068\u3063\u3066\u307f\u308b\uff0e","0e78fb87":"\u524d2\u3064\u3068\u6bd4\u3079\u308b\u3068\u5f71\u97ff\u5927\uff0e","908659ca":"## \u3082\u3046\u5c11\u3057\u5206\u6790\n\u5f71\u97ff\u304c\u5927\u304d\u305d\u3046\u306a\u4ee5\u4e0b\u306e3\u3064\u306e\u5909\u6570\u306b\u3064\u3044\u3066\u7dda\u5f62\u56de\u5e30\u3092\u691c\u8a0e\uff0e\n* distance\n* rain\n* sun","2049966c":"# Car Fuel Consumption - Day 1\n\u73fe\u5834\u3067\u4f7f\u3048\u308b\u6a5f\u68b0\u5b66\u7fd2\u30fb\u30c7\u30fc\u30bf\u5206\u6790\u57fa\u790e\u8b1b\u5ea7\uff08DAY1\uff09\u306e\u8ab2\u984c\uff0e","f7d1dbe7":"* distance: \u8d70\u884c\u8ddd\u96e2 (km)\uff0e\n* consume: \u71c3\u8cbb (L\/100 km)\uff0e\n* speed: \u5e73\u5747\u8d70\u884c\u901f\u3055 (km\/h ?)\uff0e\n* temp_inside: \u8eca\u5185\u306e\u8a2d\u5b9a\u6e29\u5ea6 (deg-C ?)\uff0e\n* temp_outside: \u904b\u8ee2\u7d42\u4e86\u6642\u306b\u8a08\u6e2c\u3057\u305f\u5916\u6c17\u6e29 (deg-C) \uff0e\n* specials: \u7279\u8a18\u4e8b\u9805\uff0e\u96e8\u306e\u3068\u304d\"rain\"\uff0c\u96ea\u306e\u3068\u304d\"snow\"\uff0cclimatization\uff08\u7a7a\u8abf\uff1f\uff09\u3092\u4f7f\u7528\u3057\u305f\u3068\u304d\"AC\"\uff0e\n* gas_type: \u6700\u5f8c\u306e\u7d66\u6cb9\u306e\u6642\u306b\u9078\u629e\u3057\u305f\u30ac\u30bd\u30ea\u30f3\u306e\u7a2e\u985e\n* AC: 1 - climatization\uff08\u7a7a\u8abf\uff1f\uff09\u3092\u4f7f\u7528\u3057\u305f\uff0e \/ 0 - \u4f7f\u7528\u3057\u306a\u304b\u3063\u305f\uff0e\n* rain: 1 - \u964d\u96e8\u307e\u305f\u306f\u964d\u96ea\u3042\u308a\uff0e \/ 0 - \u306a\u3057\uff0e\n* sun: 1 - \u6674\u308c\u3066\u3044\u3066\u6696\u304b\u304b\u3063\u305f\uff0e \/ 0 - \u305d\u308c\u4ee5\u5916\uff0e","8909860a":"### rain and sun\n\u964d\u96e8\u3068\u65e5\u5c04\u306f\u6392\u4ed6\u7684\u3067\uff0c\u4f8b\u3048\u3070\uff0c\u300c\u964d\u96e8\u3042\u308a\u300d\u304b\u3064\u300c\u65e5\u5c04\u3042\u308a\u300d\u306f\u5b58\u5728\u3057\u306a\u3044\uff08\u304a\u5929\u6c17\u96e8\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\uff0c\u5c11\u306a\u304f\u3068\u3082\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u306a\u3044\uff09\uff0e"}}