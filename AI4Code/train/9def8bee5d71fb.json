{"cell_type":{"94ca4b64":"code","0bfd74ec":"code","a0f518db":"code","c00fbf04":"code","3424b8f1":"code","8dc101bd":"code","2697114d":"code","b2b075f6":"code","18f58e01":"code","936359ed":"code","e861117c":"code","54f58624":"code","9cab0a94":"code","4326a678":"code","31a757ab":"code","a3a23f5e":"code","cdb55c8c":"markdown","851dc397":"markdown","8c1f3800":"markdown","8a2b1de0":"markdown","3ef29371":"markdown","28fbdad8":"markdown","c8cbfa29":"markdown","49e1c2e3":"markdown","e6d0583d":"markdown","e3deabdd":"markdown","b0cea45a":"markdown","50b666de":"markdown","7a7161b2":"markdown"},"source":{"94ca4b64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0bfd74ec":"import matplotlib.pyplot as plt\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport os\n\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom sklearn.model_selection import train_test_split\n\nprint(os.listdir(\"..\/input\/digit-recognizer\"))","a0f518db":"# load the train and test csv files\ntrain = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","c00fbf04":"# for labels \ntrain_y = train['label']\n# for pixel values\ntrain_x = train.drop(labels=['label'], axis=1)","3424b8f1":"# normalize the data\ntrain_x = train_x \/ 255.0\ntest = test \/ 255.0","8dc101bd":"train_x = train_x.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)","2697114d":"train_y = tf.keras.utils.to_categorical(train_y, num_classes=10)","b2b075f6":"train_X, val_X, train_Y, val_Y = train_test_split(train_x, train_y, test_size = 0.2)","18f58e01":"input_shape = (28, 28, 1)","936359ed":"model = tf.keras.Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\n# model.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n# model.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","e861117c":"model.summary()","54f58624":"model.compile(\n    optimizer = 'adam',#tf.keras.optimizers.RMSprop(),\n    loss = tf.keras.backend.categorical_crossentropy, \n    metrics = ['accuracy']\n)","9cab0a94":"# This callback will stop the training when there is no improvement in\n# the validation accuracy for three consecutive epochs.\ncallback = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=3, min_delta=0.00001)\nhistory = model.fit(train_X, train_Y, \n          batch_size=32,\n          validation_data=(val_X, val_Y),\n          epochs=30, callbacks=[callback])","4326a678":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","31a757ab":"# predict results\nresults = model.predict(test)\n\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","a3a23f5e":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"), results], axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","cdb55c8c":"## CNN Model\n\nHere, we will define our CNN model. We will be using the Sequential() API with Conv2D(). Let's first define the input shape and model, then I will explain the architecture.\n","851dc397":"## Reshape the Data\n\nThe pixels values for any of the digits are all in one row. We nedd to reshape them as 28x28x1. That will be 28 rows, 28 columns and 1 (channel) for the grey scale of the images. It the images would have been colored, then the channel would have been 3 for each of the 3 colors (RGB).\n","8c1f3800":"## Compile the Model\n\nWe will be adam as the optimizer, categorical_crossentropy as the loss and metrics will be accuracy.","8a2b1de0":"## Loading and Preparing the Data","3ef29371":"## Visualize the Loss and Accuracy","28fbdad8":"Now, let's separate the labels and the pixel values into train_x and train_y.","c8cbfa29":"## Import Libraries","49e1c2e3":"Looks like we have hit our target of 99%. Now, we are ready to commit and submit our predictions.","e6d0583d":"Now the labels are one-hot encoded. For example, if the digit is 5, then the list would be, [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]. Only the fifth index will be 1 and the rest will be zero.\n\n## Split the Data into Train and Validation Set","e3deabdd":"Now, we are ready to train the model. We will run the model for 30 epochs.","b0cea45a":"## Normalizing the Data\n\nWe should always normalize the data before feeding it to any neural network. Normalized floating point values will always give better results when working with neural network.\n","50b666de":"## One-Hot Encode the Labels\n\nThe train labels are all the original numbers that correspond to the pixel values (e.g. 1, 2, 3, ...). We need to one-hot encode the labels so that the labels will be 1 for the corresponding digit and 0 for all others. So, each of the rows will contain 9 zeros and 1 one.\n","7a7161b2":"## Kaggle Digit Recognizer\nI have used batch normalization layers to improve accuracy above 99%"}}