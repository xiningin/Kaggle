{"cell_type":{"d7aff504":"code","4d74d7d0":"code","831e1618":"code","74d4a735":"code","638327d8":"code","35055ddd":"code","338c6bd8":"code","3527efd2":"code","97611897":"code","8e747d7b":"markdown","b01efe25":"markdown","3beaa72e":"markdown","ba22bd1a":"markdown","1cf2742f":"markdown","8ef651bf":"markdown","cf0ee6a9":"markdown","6797f153":"markdown","2ace78ff":"markdown"},"source":{"d7aff504":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4d74d7d0":"df = pd.read_csv(\"\/kaggle\/input\/logistic-regression\/Social_Network_Ads.csv\")\n\ndf.drop([\"User ID\",\"Gender\"],axis=1,inplace=True)\n\ny = df.Purchased.values\nx_data = df.drop([\"Purchased\"],axis=1)\n\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","831e1618":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.reshape(-1,1).T\ny_test = y_test.reshape(-1,1).T","74d4a735":"def init_weights_and_bias(dimension):\n    weights = np.full((dimension,1),0.01)\n    bias = 0\n    return weights,bias\n\nweights,bias = init_weights_and_bias(2)\n\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head","638327d8":"def f_b_propagation(weights,bias,x_train,y_train):\n    z = np.dot(weights.T,x_train) + bias\n    \n    y_head = sigmoid(z)\n    \n    loss = -y_train * np.log(y_head) - (1 - y_train) * np.log(1-y_head)\n    \n    cost = (np.sum(loss)) \/ x_train.shape[1]\n    \n    der_weight = (np.dot(x_train, ((y_head - y_train).T))) \/ x_train.shape[1]\n    der_bias = np.sum(y_head - y_train) \/ x_train.shape[1]   \n    \n    gradients = {\"der_weight\": der_weight,\"der_bias\": der_bias}\n    \n    return cost,gradients","35055ddd":"def update(weights,bias,x_train,y_train,learning_rate,number_of_iteration):\n    cost_list = []\n    cost_list_2 = []\n    index = []\n    \n    for i in range(number_of_iteration):\n        cost,gradients = f_b_propagation(weights,bias,x_train,y_train)\n        cost_list.append(cost)\n        \n        weights = weights - learning_rate * gradients[\"der_weight\"]\n        bias = bias - learning_rate * gradients[\"der_bias\"]\n        \n        if i % 10 == 0:\n            cost_list_2.append(cost)\n            index.append(i)\n            print(f\"Cost after iteration {i}:{cost}\")\n            \n    parameters = {\"weights\": weights,\"bias\": bias}\n    plt.plot(index,cost_list_2)\n    \n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","338c6bd8":"def predict(weights,bias,x_test):\n    z = sigmoid(np.dot(weights.T, x_test) + bias)\n    Y_prediction = np.zeros((1, x_test.shape[1]))\n    \n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","3527efd2":"def log_regr(x_train,y_train,x_test,y_test,learning_rate,iter_num):\n    dimension = x_train.shape[0]\n    weights,bias = init_weights_and_bias(dimension)\n    \n    parameters, gradients, cost_list = update(weights, bias, x_train, y_train, learning_rate, iter_num)\n    \n    y_prediction_test = predict(parameters[\"weights\"],parameters[\"bias\"],x_test)\n    \nlog_regr(x_train, y_train, x_test, y_test, learning_rate = 0.01, iter_num = 150)","97611897":"from sklearn.linear_model import LogisticRegression\n\nlogr = LogisticRegression()\n\nlogr.fit(x_train.T,y_train.T)\n\nprint(\"Test accuracy: {}\".format(logr.score(x_test.T,y_test.T)))","8e747d7b":"# Updating Parameters","b01efe25":"# Logistic Regression","3beaa72e":" # Parameter Initializate and Sigmoid Function","ba22bd1a":"# Forward-Backward Propagations","1cf2742f":" # Data\n* First let's make our data ready.","8ef651bf":"# Prediction","cf0ee6a9":"**Please analyze and comment.**","6797f153":" # Train Test Split\n* Let's declare train and test for both of x and y with help of the Sklearn library.","2ace78ff":" # Logistic Regression with Sklearn library"}}