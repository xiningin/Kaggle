{"cell_type":{"35f9889c":"code","24adb114":"code","d1789d3d":"code","282bdc4e":"code","7ec134f5":"code","e78ef410":"code","334b5c70":"code","2e2a3d52":"code","055fe459":"code","c68826e1":"code","09af5461":"code","459c359c":"code","eec8c41e":"code","fd795352":"code","06b0c061":"markdown","99376c57":"markdown","b997d2e3":"markdown","0450ec1a":"markdown","b6130b94":"markdown","13a8b0a5":"markdown","15cba851":"markdown","f4fe7030":"markdown"},"source":{"35f9889c":"import os\nos.listdir(\"..\/input\/plant-diseases-classification-using-alexnet\")","24adb114":"# Importing Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers.normalization import BatchNormalization\n\n# Initializing the CNN\nclassifier = Sequential()\n\n# Convolution Step 1\nclassifier.add(Convolution2D(96, 11, strides = (4, 4), padding = 'valid', input_shape=(224, 224, 3), activation = 'relu'))\n\n# Max Pooling Step 1\nclassifier.add(MaxPooling2D(pool_size = (2, 2), strides = (2, 2), padding = 'valid'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 2\nclassifier.add(Convolution2D(256, 11, strides = (1, 1), padding='valid', activation = 'relu'))\n\n# Max Pooling Step 2\nclassifier.add(MaxPooling2D(pool_size = (2, 2), strides = (2, 2), padding='valid'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 3\nclassifier.add(Convolution2D(384, 3, strides = (1, 1), padding='valid', activation = 'relu'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 4\nclassifier.add(Convolution2D(384, 3, strides = (1, 1), padding='valid', activation = 'relu'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 5\nclassifier.add(Convolution2D(256, 3, strides=(1,1), padding='valid', activation = 'relu'))\n\n# Max Pooling Step 3\nclassifier.add(MaxPooling2D(pool_size = (2, 2), strides = (2, 2), padding = 'valid'))\nclassifier.add(BatchNormalization())\n\n# Flattening Step\nclassifier.add(Flatten())\n\n# Full Connection Step\nclassifier.add(Dense(units = 4096, activation = 'relu'))\nclassifier.add(Dropout(0.4))\nclassifier.add(BatchNormalization())\nclassifier.add(Dense(units = 4096, activation = 'relu'))\nclassifier.add(Dropout(0.4))\nclassifier.add(BatchNormalization())\nclassifier.add(Dense(units = 1000, activation = 'relu'))\nclassifier.add(Dropout(0.2))\nclassifier.add(BatchNormalization())\nclassifier.add(Dense(units = 38, activation = 'softmax'))\nclassifier.summary()","d1789d3d":"classifier.load_weights('..\/input\/plant-diseases-classification-using-alexnet\/best_weights_9.hdf5')","282bdc4e":"# let's visualize layer names and layer indices to see how many layers\n# we should freeze:\nfrom keras import layers\nfor i, layer in enumerate(classifier.layers):\n   print(i, layer.name)","7ec134f5":"# we chose to train the top 2 conv blocks, i.e. we will freeze\n# the first 8 layers and unfreeze the rest:\nprint(\"Freezed layers:\")\nfor i, layer in enumerate(classifier.layers[:20]):\n    print(i, layer.name)\n    layer.trainable = False\n","e78ef410":"#trainable parameters decrease after freezing some bottom layers   \nclassifier.summary()","334b5c70":"# Compiling the Model\nfrom keras import optimizers\nclassifier.compile(optimizer=optimizers.SGD(lr=0.001, momentum=0.9, decay=0.005),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","2e2a3d52":"# image preprocessing\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   fill_mode='nearest')\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\nbatch_size = 128\nbase_dir = \"..\/input\/new-plant-diseases-dataset\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\"\n\ntraining_set = train_datagen.flow_from_directory(base_dir+'\/train',\n                                                 target_size=(224, 224),\n                                                 batch_size=batch_size,\n                                                 class_mode='categorical')\n\nvalid_set = valid_datagen.flow_from_directory(base_dir+'\/valid',\n                                            target_size=(224, 224),\n                                            batch_size=batch_size,\n                                            class_mode='categorical')","055fe459":"class_dict = training_set.class_indices\nprint(class_dict)","c68826e1":"li = list(class_dict.keys())\nprint(li)","09af5461":"train_num = training_set.samples\nvalid_num = valid_set.samples","459c359c":"# checkpoint\nfrom keras.callbacks import ModelCheckpoint\nweightpath = \"best_weights_9.hdf5\"\ncheckpoint = ModelCheckpoint(weightpath, monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=True, mode='max')\ncallbacks_list = [checkpoint]\n\n#fitting images to CNN\nhistory = classifier.fit_generator(training_set,\n                         steps_per_epoch=train_num\/\/batch_size,\n                         validation_data=valid_set,\n                         epochs=25,\n                         validation_steps=valid_num\/\/batch_size,\n                         callbacks=callbacks_list)\n#saving model\nfilepath=\"AlexNetModel.hdf5\"\nclassifier.save(filepath)","eec8c41e":"#plotting training values\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\n\n#accuracy plot\nplt.plot(epochs, acc, color='green', label='Training Accuracy')\nplt.plot(epochs, val_acc, color='blue', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.figure()\n#loss plot\nplt.plot(epochs, loss, color='pink', label='Training Loss')\nplt.plot(epochs, val_loss, color='red', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","fd795352":"# predicting an image\nfrom keras.preprocessing import image\nimport numpy as np\nimage_path = \"..\/input\/new-plant-diseases-dataset\/test\/test\/TomatoEarlyBlight1.JPG\"\nnew_img = image.load_img(image_path, target_size=(224, 224))\nimg = image.img_to_array(new_img)\nimg = np.expand_dims(img, axis=0)\nimg = img\/255\n\nprint(\"Following is our prediction:\")\nprediction = classifier.predict(img)\n# decode the results into a list of tuples (class, description, probability)\n# (one such list for each sample in the batch)\nd = prediction.flatten()\nj = d.max()\nfor index,item in enumerate(d):\n    if item == j:\n        class_name = li[index]\n\n##Another way\n# img_class = classifier.predict_classes(img)\n# img_prob = classifier.predict_proba(img)\n# print(img_class ,img_prob )\n\n\n#ploting image with predicted class name        \nplt.figure(figsize = (4,4))\nplt.imshow(new_img)\nplt.axis('off')\nplt.title(class_name)\nplt.show()","06b0c061":"**Image Preprocessing**","99376c57":"**Compiling the Model**","b997d2e3":"**Visualising Training Progress**","0450ec1a":"**Predicting New Test Image(s)**","b6130b94":"**Loading Weights To The Model**","13a8b0a5":"**Building CNN Based On AlexNet Architecture**","15cba851":"**Fine Tuning By Freezing Some Layers Of Our Model**","f4fe7030":"**Model Summary After Freezing**"}}