{"cell_type":{"2b560a73":"code","a10091c9":"code","56fb5491":"code","27b7e26d":"code","e5f59dad":"code","0185f838":"code","2b9aa6a0":"code","55d6e932":"code","320abcd9":"code","84a93b5a":"code","7376ee01":"markdown","9f803a64":"markdown","21f956b2":"markdown","c2e00e79":"markdown","4260b5d7":"markdown","6da4b43a":"markdown","5d78ccd4":"markdown","e8923f41":"markdown","f25bd159":"markdown","c5776e44":"markdown","ab5c1966":"markdown"},"source":{"2b560a73":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import cross_val_score\nimport matplotlib.pyplot as plt\n%matplotlib inline","a10091c9":"# Read the data\nX_train_full = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')\n\n# Number of rows and columns\nprint(X_train_full.shape)\nprint(X_test_full.shape)\n\n# First 5 entries\nX_train_full.head()","56fb5491":"# Count null values\nprint(X_train_full.isnull().sum().sum())\nprint('')\nprint(X_test_full.isnull().sum().sum())","27b7e26d":"# Labels\nX_train_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_train_full.SalePrice\n\n# Features\nX_train_full.drop(['SalePrice'], axis=1, inplace=True)","e5f59dad":"# Select categorical columns with relatively low cardinality\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Move columns\nnumerical_cols.remove('MSSubClass') # MSSubClass and MoSold are categorical data\nnumerical_cols.remove('MoSold')\n\ncategorical_cols=categorical_cols+['MSSubClass','MoSold']\n\n# Remove unrelated features\nnum_delete=['PoolArea','MiscVal','3SsnPorch','BsmtFinSF2']\ncat_delete=['LandSlope','Utilities','MoSold']\n\nfor i in num_delete:\n    if i in numerical_cols:\n        numerical_cols.remove(i)\n    \nfor j in cat_delete and categorical_cols:\n    if j in numerical_cols:\n        categorical_cols.remove(i)\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","0185f838":"# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='median')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n    ])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Data preprocessing pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor)])\n\n# Transform the data\nX_train = my_pipeline.fit_transform(X_train)\nX_test_preprocessed = my_pipeline.transform(X_test)","2b9aa6a0":"# Parameters grid\ngrid = {'n_estimators': [50, 75, 100, 125, 150, 175, 200, 225, 250], \n        'learning_rate': [0.01, 0.025, 0.05, 0.075, 0.1, 0.125, 0.15]}\n\n# XGBoost model\nmodel=XGBRegressor(random_state=0)\n\n# Grid Search with 4-fold cross validation\ngrid_model = GridSearchCV(model,grid,cv=4)\n\n# Train classifier with optimal parameters\ngrid_model.fit(X_train,y)","55d6e932":"print(\"\\n The best parameters across ALL searched params:\\n\",grid_model.best_params_)\nprint(\"\\n The best score across ALL searched params:\\n\",grid_model.best_score_)","320abcd9":"# Preprocess test data and fit model\npreds_test = grid_model.predict(X_test_preprocessed)\n\n# Save predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\n\n# Check format\noutput.head()","84a93b5a":"output.to_csv('submission.csv', index=False)","7376ee01":"# Background","9f803a64":"# Data","21f956b2":"**Results from Grid Search**","c2e00e79":"# Libraries","4260b5d7":"**Labels and features**","6da4b43a":"# Grid Search","5d78ccd4":"**Check for missing values**","e8923f41":"# Predictions","f25bd159":"# Preprocessing data","c5776e44":"# Feature selection","ab5c1966":"*The aim of this task is to predict the prices of houses in Ames, Iowa given house information such as House size, year built, number of bathrooms etc.*"}}