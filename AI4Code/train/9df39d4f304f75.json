{"cell_type":{"1db84740":"code","5927a104":"code","9a315f4b":"code","e5389b91":"code","a744ab02":"code","0276febf":"code","a00752a3":"code","8e95d3b0":"code","fde0ccb1":"code","4f571f89":"code","5cdf9a71":"code","63019df4":"code","e681e34e":"code","9ac7e8f4":"code","be8f7cae":"code","81ffb128":"code","efa4a9cd":"code","ae79021d":"markdown","b17f7157":"markdown","de209cd8":"markdown"},"source":{"1db84740":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5927a104":"records=pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\nrecords.head()","9a315f4b":"records.info()","e5389b91":"print(\"Max Age {:.2f}\".format(max(records['age'])))\nprint(\"Min Age {:.2f}\".format(min(records['age'])))","a744ab02":"def normalize(dataset):\n    data=(dataset-dataset.min())\/(dataset.max()-dataset.min())\n    data['DEATH_EVENT']=dataset['DEATH_EVENT']\n    return data\nrecord=normalize(records)\nrecord.head()\n    ","0276febf":"record.describe()","a00752a3":"record.corr()","8e95d3b0":"from matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import confusion_matrix,plot_confusion_matrix","fde0ccb1":"sns.heatmap(record.corr(),vmin=-1,vmax=1,center=0,cmap=sns.diverging_palette(20,220,n=200))","4f571f89":"sns.regplot(x='age',y='serum_creatinine',data=record)","5cdf9a71":"sns.regplot(x='time',y='ejection_fraction',data=record)","63019df4":"sns.set(style='ticks')\nsns.pairplot(record[:13])","e681e34e":"Scaler=MinMaxScaler()\nX=records[['age','anaemia','ejection_fraction','high_blood_pressure',\n           'platelets','serum_creatinine','smoking','time']]\nY=records[['DEATH_EVENT']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=0)\nX_train_scale=Scaler.fit_transform(X_train)\nX_test_scale=Scaler.fit_transform(X_test)\n","9ac7e8f4":"rf=RandomForestClassifier(random_state=0,max_features=5).fit(X_train_scale,Y_train)\nran=rf.predict(X_test_scale)\n\nranf=rf.predict(X_test)","be8f7cae":"print('Accuracy Score for Random Forest',accuracy_score(Y_test,ran))\nprint('Precision Score {:.2f}'.format(precision_score(Y_test,ran)))\nprint('F1 Score {:.2f}'.format(f1_score(Y_test,ran)))\nprint('Recall Score {:.2f}'.format(recall_score(Y_test,ran)))","81ffb128":"print(confusion_matrix(Y_test,ran))\nplot_confusion_matrix(rf,X_test_scale,Y_test)","efa4a9cd":"merge=pd.merge(X_test,df,how='inner',left_index=True,right_index=True)\nmerge.head()","ae79021d":"After the infection Age and Serum_creatinine count after proportional to the Heart Failure\nand Time for follow up and ejection rate are highly inverse proportional to the Failure","b17f7157":"Creating a prediction Model using RandomForestClassifier","de209cd8":"Prediction for some patients where 0 means fail and 1 means no fail"}}