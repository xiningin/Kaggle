{"cell_type":{"de239b3c":"code","6955534c":"code","68e79098":"code","85f33a3f":"code","5556e9d9":"code","428f5714":"code","4ff8799b":"code","ba97ee80":"markdown","ed32b13c":"markdown","4f42f6dc":"markdown","e1485807":"markdown","d5f14046":"markdown","6cb375dc":"markdown","c8618379":"markdown"},"source":{"de239b3c":"!pip install moviepy\n!pip install SpeechRecognition","6955534c":"from moviepy import editor         # for video and audio editing\nfrom numpy import linspace         # for diving some interval into number of equal lengh parts.\nimport speech_recognition as sr    # actual speech recognition library\nfrom math import ceil              # ceil function for finding ceil of some float value","68e79098":"class Trie:\n    \"\"\"\n        Creates a Trie and adds words with corresponding time stamps into trie using make_trie function\n    \"\"\"\n    def __init__(self):\n        self.trie = dict()\n        self.ans = dict()\n        \n        \n    def make_trie(self, words:list, time:str) -> None:\n        \"\"\"\n        Inserts the time stamp into the trie at all the words in the list of words\n            words: words to insert into the trie\n            time : time stamp associated with that word\n        \"\"\"\n        for word in words:\n            temp = self.trie\n            for i in range(len(word)):\n                temp = temp.setdefault(word[i], {})\n            if '*' in temp:\n                temp['*'].add(time)\n            else:\n                temp['*'] = {time}\n\n    def find_similar_words(self, temp, letter, text):\n        \"\"\"\n        An utility function for find_words\n        \"\"\"\n        text += letter\n        temp = temp[letter]\n        remaining = list(temp)\n        text_arr = [text] * len(remaining)\n        for i in range(len(remaining)):\n            if remaining[i] == '*':\n                self.ans[text_arr[i]] = temp['*']\n            else:\n                self.find_similar_words(temp, remaining[i], text_arr[i])\n\n    def find_words(self, word:str) -> None:\n        \"\"\"\n        Takes a word as input and searches for its existance in trie. If exists, returns the time stamps associated.\n        finally it returns all the similar words with that prefix and their time stamps.\n        \n            word: a word to search for\n        \"\"\"\n        self.ans.clear()\n        temp = self.trie\n        text = \"\"\n        for letter in word:\n            if letter in temp:\n                temp = temp[letter]\n                text += letter\n        remaining = list(temp)\n        text_arr = [text] * len(remaining)\n        for i in range(len(remaining)):\n            if remaining[i] == '*':\n                self.ans[text_arr[i]] = temp['*']\n            else:\n                self.find_similar_words(temp, remaining[i], text_arr[i])","85f33a3f":"# Reads the video into video variable\nvideo = editor.VideoFileClip('\/kaggle\/input\/video-data\/Pixel.mp4')\n# extract Audio video\nconverted_audio = video.audio\n\n# by writing onto a wav file creating hormony in fps(44100)\nconverted_audio.write_audiofile('spotify.wav', logger = None, verbose = False)\naudio = editor.AudioFileClip('spotify.wav')\n\n# specch recognizer\nr = sr.Recognizer()","5556e9d9":"chunk_duration = 10 # duration of each chunk\n\n\nout_text = \"\"\nobj = Trie()\n\n# divides the while duration into equal length parts of size 10\nspaces = linspace(0, audio.duration, int(ceil(audio.duration\/chunk_duration)))\n# utility variables for time conversion\nhrs, min, sec = 0, 0, 0\n\n# recognition process\nif audio.duration > chunk_duration:\n    for i in range(len(spaces)-1):\n        audio.subclip(spaces[i], spaces[i+1]).write_audiofile('out.wav', verbose=False, logger=None)\n        sec += chunk_duration\n        if sec >= 60:\n            min += 1\n            sec -= 60\n        if min >= 60:\n            hrs += 1\n            min -= 60\n        with sr.AudioFile('out.wav') as source:\n            audio_r = r.listen(source)\n            try:\n                sentence = r.recognize_google(audio_r)\n                sentence = sentence.lower()\n                obj.make_trie(sentence.split(), time=\"%02d:%02d:%02d\"%(hrs, min, sec))\n                out_text += \"%02d:%02d:%02d\"%(hrs, min, sec)+\" \"+sentence+\"\\n\\n\"\n            except:\n                pass\nelse:\n    audio.write_audiofile('out.wav', verbose=False, logger = None)\n    with sr.AudioFile('out.wav') as source:\n        audio_r = r.listen(source)\n        try:\n            sentence = r.recognize_google(audio_r)\n            sentence = sentence.lower()\n            obj.make_trie(sentence.split(\" \"), time=seconds)\n            out_text += \"%02d:%02d:%02d\"%(hrs, min, sec)+\" \"+sentence+\"\\n\\n\"\n        except:\n            pass\n# Debug output\nprint(\"Text: \", out_text)","428f5714":"obj.find_words('pixel')\nfor i in obj.ans:\n    print(i,':')\n    print(sorted(obj.ans[i]))","4ff8799b":"# audio.subclip(0, 5).write_audiofile('out_1.wav')\n# print(audio.duration)\n# print(linspace(0, audio.duration, int(ceil(audio.duration\/5))))\n# audio.subclip(5, 400000).write_audiofile('out_2.wav')","ba97ee80":"# Basic Imports","ed32b13c":"# Test Search","4f42f6dc":"Unlike Normal search for a word in text file, This project enables one to search for occurance of word in word and returns its location with accuracy +\/- 10 seconds.\n\nThis porject uses\n\n    Google Speech Recognitoin model to predict the text from the speech with help of  SpeechRecognition package.\n    moviepy pakage for extracting audio from given video and manipulating the audio.\n    A Trie Data structre to store the words for further searching \n","e1485807":"# Actual Model","d5f14046":"# package installation ","6cb375dc":"# Intro","c8618379":"# Debug Code"}}