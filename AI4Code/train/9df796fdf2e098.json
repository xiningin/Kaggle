{"cell_type":{"150a8161":"code","870974d2":"code","ca81d7ea":"code","78db74e1":"code","44fc1a4c":"code","b5849b8f":"code","9ea985ca":"code","b4eae1ad":"code","c1e13655":"code","c77499a8":"code","2a81a7be":"code","78328aab":"code","0c9e37c3":"markdown","b40e9cfc":"markdown","1695a5c8":"markdown","f2bf6682":"markdown","dfa6bf86":"markdown","1533c3aa":"markdown","ebe6c385":"markdown","e5b40bd5":"markdown","33abf894":"markdown"},"source":{"150a8161":"import pandas as pd\nimport numpy as np\nimport time","870974d2":"final_seconds = 60\nfinal_seconds_30 = 30\nfinal_seconds_10 = 10\nfinal_seconds_5 = 5\nfinal_seconds_3 = 3\nfinal_seconds_2 = 2\nfinal_seconds_1 = 1\nfinal_seconds_0 = 0\n\nkey_columns = ['Season', 'DayNum', 'WTeamID', 'LTeamID', 'WFinalScore', 'LFinalScore']","ca81d7ea":"def sort(in_df):\n    sort_columns = ['Season', 'DayNum', 'WTeamID', 'LTeamID', 'RemainingSeconds']\n    in_df.sort_values(by=sort_columns, ascending=[0, 0, 0, 0, 1], axis=0, inplace=True, ignore_index=True)\n\n\ndef count_final_seconds_events(in_df, remaining_seconds, new_col_name):\n    print('counting events during final seconds ({}s left) ...'.format(remaining_seconds))\n    ending = in_df[in_df['RemainingSeconds'] <= remaining_seconds]\n    in_df[new_col_name] = ending.groupby(key_columns)['ElapsedSeconds'].transform('count').fillna(0)\n\n\ndef reward_final_seconds_events(in_df):\n    # Final seconds are always beautiful. The more happens here, the more emotions the game releases.\n    md1 = in_df['EventType'] == 'made1'\n    md2 = in_df['EventType'] == 'made2'\n    md3 = in_df['EventType'] == 'made3'\n    ms1 = in_df['EventType'] == 'miss1'\n    ms2 = in_df['EventType'] == 'miss2'\n    ms3 = in_df['EventType'] == 'miss3'\n    st1 = in_df['EventType'] == 'steal'\n    to1 = in_df['EventType'] == 'turnover'\n    rb = in_df['EventType'] == 'reb'\n    off = in_df['EventSubType'] == 'off'\n    in_dfns = in_df['EventSubType'] == 'def'\n    ex = in_df['WFinalScore'] - in_df['LFinalScore'] < 4\n    win = in_df['EventTeamID'] == in_df['WTeamID']\n    loss = in_df['EventTeamID'] == in_df['LTeamID']\n    end = in_df['RemainingSeconds'] <= final_seconds\n    print('Calculating points for made 1\/2\/3 points ...')\n    in_df['Made'] = (10.0 \/ (in_df[(md2 | md3 | md1) & ex & end & win]['RemainingSeconds'] + 0.3)).fillna(0.0).round(2)\n    in_df['Made-'] = (5.0 \/ (in_df[(md2 | md3 | md1) & ex & end & loss]['RemainingSeconds'] + 0.3)).fillna(0.0).round(2)\n    print('Calculating points for missed 1\/2\/3 points ...')\n    in_df['Miss'] = (5.0 \/ (in_df[(ms2 | ms3 | ms1) & ex & end & loss]['RemainingSeconds'] + 0.3)).fillna(0.0).round(2)\n    in_df['Miss-'] = (2.5 \/ (in_df[(ms2 | ms3 | ms1) & ex & end & win]['RemainingSeconds'] + 0.3)).fillna(0.0).round(2)\n    print('Calculating points for rebounds ...')\n    in_df['RebDef'] = (3.0 \/ (in_df[rb & in_dfns & ex & end & win]['RemainingSeconds'] + 0.3)).fillna(0.0).round(2)\n    in_df['RebOff'] = (3.0 \/ (in_df[rb & off & ex & end & loss]['RemainingSeconds'] + 0.3)).fillna(0.0).round(2)\n    print('Calculating points for steals and turnovers ...')\n    in_df['Steal-Turnover-Def'] = (3.0 \/ (in_df[(st1 | to1) & ex & end & win]['RemainingSeconds'] + 0.3)).fillna(0.0).round(2)\n    in_df['Steal-Turnover-Hope'] = (3.0 \/ (in_df[(st1 | to1) & ex & end & loss]['RemainingSeconds'] + 0.3)).fillna(0.0).round(2)\n\n\ndef fill_inter_points(in_df):\n    # Calculating current result of the match\n    md1 = in_df['EventType'] == 'made1'\n    md2 = in_df['EventType'] == 'made2'\n    md3 = in_df['EventType'] == 'made3'\n    win = in_df['EventTeamID'] == in_df['WTeamID']\n    loss = in_df['EventTeamID'] == in_df['LTeamID']\n\n    in_df['WScore'] = in_df[win & (md1 | md2 | md3)]['ScoreAttempt'].fillna(0.0)\n    in_df['LScore'] = in_df[loss & (md1 | md2 | md3)]['ScoreAttempt'].fillna(0.0)\n    \n    gb = in_df.groupby(key_columns)\n    in_df['WCurScore'] = gb['WScore'].transform('cumsum').fillna(0)\n    in_df['LCurScore'] = gb['LScore'].transform('cumsum').fillna(0)\n\n\ndef count_breaking_moments(in_df):\n    # Taking into account the moments during a match when the score gap is small and a loosing team \n    # attempts to throw the points that make this team winning. The closer to the end of the game,\n    # the more thrilling these moments are.\n    \n    print('Calculating inter points ...')\n    fill_inter_points(in_df)\n\n    print('Preparing for the break-thru attempts calculations ...')\n    md1 = in_df['EventType'] == 'made1'\n    md2 = in_df['EventType'] == 'made2'\n    md3 = in_df['EventType'] == 'made3'\n    ms1 = in_df['EventType'] == 'miss1'\n    ms2 = in_df['EventType'] == 'miss2'\n    ms3 = in_df['EventType'] == 'miss3'\n\n    break_l = in_df['ScoreAttempt'] >= (in_df['WCurScore']-in_df['WScore']) - (in_df['LCurScore']-in_df['LScore'])\n    lead_w = in_df['WCurScore']-in_df['WScore'] >= in_df['LCurScore']-in_df['LScore']\n    break_w = in_df['ScoreAttempt'] >= (in_df['LCurScore']-in_df['LScore']) - (in_df['WCurScore']-in_df['WScore'])\n    lead_l = in_df['LCurScore']-in_df['LScore'] >= in_df['WCurScore']-in_df['WScore']\n    win = in_df['EventTeamID'] == in_df['WTeamID']\n    loss = in_df['EventTeamID'] == in_df['LTeamID']\n    \n    final_seconds_factor = np.maximum(1.0+(final_seconds-in_df['RemainingSeconds'])\/12.0, np.array([1]*in_df.shape[0]))\n\n    print('Calculating successful break-thru attempts ...')\n    in_df['BreakSuccess'] = (in_df[(md2 | md3 | md1) & ((lead_w & break_l & loss) | (lead_l & break_w & win))]['ScoreAttempt']).fillna(0.0) * final_seconds_factor\n    print('Calculating failed break-thru attempts ...')\n    in_df['BreakFail'] = (in_df[(ms2 | ms3 | ms1) & ((lead_w & break_l & loss) | (lead_l & break_w & win))]['ScoreAttempt']\/2.0).fillna(0.0) * final_seconds_factor\n\n\ndef count_other_match_stats(in_df):\n    # made and missed 3- and 2-pointers (during the entire match)\n    print('Counting other stats (made\/missed throws, score gap) ...')\n    md2 = in_df['EventType'] == 'made2'\n    md3 = in_df['EventType'] == 'made3'\n    ms2 = in_df['EventType'] == 'miss2'\n    ms3 = in_df['EventType'] == 'miss3'\n    in_df['MadePoints'] = in_df[md3 | md2]['ScoreAttempt'].pow(3.0)\/40.0\n    in_df['MissPoints'] = in_df[ms3 | ms2]['ScoreAttempt'].pow(2.0)\/40.0\n    in_df['ScoreGap'] = 40.0\/(in_df['WFinalScore']-in_df['LFinalScore'])\n\n\ndef calculate_thrill(in_df):\n    print('Summing up all thrill factors ...')\n    gb = in_df.groupby(key_columns)\n\n    # max for \"EndingEvents\"\n    in_df['60s'] = gb['EndingEvents60Count'].transform('max')\n    in_df['30s'] = gb['EndingEvents30Count'].transform('max')\n    in_df['10s'] = gb['EndingEvents10Count'].transform('max')\n    in_df['5s'] = gb['EndingEvents5Count'].transform('max')\n    in_df['3s'] = gb['EndingEvents3Count'].transform('max')\n    in_df['2s'] = gb['EndingEvents2Count'].transform('max')\n    in_df['1s'] = gb['EndingEvents1Count'].transform('max')\n    in_df['0s'] = gb['EndingEvents0Count'].transform('max')\n\n    # sum for other columns\n    print('Summing up final seconds \"Made\" points ...')\n    in_df['Made'] = gb['Made'].transform('sum').round(2)\n    in_df['Made-'] = gb['Made-'].transform('sum').round(2)\n    print('Summing up final seconds \"Miss\" points ...')\n    in_df['Miss'] = gb['Miss'].transform('sum').round(2)\n    in_df['Miss-'] = gb['Miss-'].transform('sum').round(2)\n    print('Summing up final seconds \"Rebound\" points ...')\n    in_df['RebDef'] = gb['RebDef'].transform('sum').round(2)\n    in_df['RebOff'] = gb['RebOff'].transform('sum').round(2)\n    print('Summing up final seconds \"Steals\" and \"Turnovers\" points ...')\n    in_df['ST-Def'] = gb['Steal-Turnover-Def'].transform('sum').round(2)\n    in_df['ST-Hope'] = gb['Steal-Turnover-Hope'].transform('sum').round(2)\n    print('Summing up match break-thru moments\" ...')\n    in_df['BreakS'] = gb['BreakSuccess'].transform('sum')\n    in_df['BreakF'] = gb['BreakFail'].transform('sum')\n    print('Summing up entire match \"Made\" points ...')\n    in_df['MatchMade'] = gb['MadePoints'].transform('sum')\n    print('Summing up entire match \"Miss\" points ...')\n    in_df['MatchMiss'] = gb['MissPoints'].transform('sum')\n\n\n\ndef event_count_points(event_count, min_count, mean_count):\n    min_points = min_count ** 1.5 \/ mean_count\n    return event_count ** 1.5 \/ mean_count - min_points","78db74e1":"csv_base = '\/kaggle\/input\/march-madness-analytics-2020'\ncsv_women = []\ncsv_men = []\nfor i in range(2015, 2021):\n    csv_women.append('{}\/WPlayByPlay_Stage2\/WEvents{}.csv'.format(csv_base, i))\n    csv_men.append('{}\/MPlayByPlay_Stage2\/MEvents{}.csv'.format(csv_base, i))\n\ncsv_women","44fc1a4c":"def calculate_thrill_factor(csv):\n    all_data = None\n    for input_file in csv:\n        print('\\n\\nreading a csv {} ...'.format(input_file))\n        df = pd.read_csv(input_file)\n\n        # remove games that have incomplete data (event count < 120)\n        print('Removing games with incomplete data ...')\n        df.fillna('???', inplace=True)\n        tmp = df.groupby(by=['Season', 'DayNum', 'WTeamID', 'LTeamID'])['EventType'].transform('count')\n        df = df[tmp > 120].dropna()\n        # add points for number of events in the game\n        print('Adding points for number of events in the game ...')\n        df['EventCountPoints'] = df.groupby(by=['Season', 'DayNum', 'WTeamID', 'LTeamID'])['EventType'].transform('count')\n        tmp_mean = np.mean(df['EventCountPoints'])\n        tmp_min = np.min(df['EventCountPoints'])\n        tmp_max = np.max(df['EventCountPoints'])\n        df['EventCountPoints'] = event_count_points(df['EventCountPoints'], tmp_min, tmp_mean)\n\n        # add useful columns\n        print('adding GameLength column ...')\n        df['GameLength'] = df.groupby(key_columns)['ElapsedSeconds'].transform('max')\n        print('adding RemainingSeconds column ...')\n        df['RemainingSeconds'] = 2400-df['ElapsedSeconds']\n        # define various game lengths with extra periods\n        game_length_with_extra_period = range(2700, 2400+10*300, 300)\n        for game_length in game_length_with_extra_period:\n            print('correcting \"RemainingSeconds\" for matches lasting {} seconds ...'.format(game_length))\n            df['RemainingSeconds'].mask(df['RemainingSeconds'] < 0, game_length-df['ElapsedSeconds'], inplace=True)\n        print('adding ScoreAttempt column ...')\n        df['ScoreAttempt'] = 0\n        df.loc[df['EventType'].isin(['made1', 'miss1']), 'ScoreAttempt'] = 1\n        df.loc[df['EventType'].isin(['made2', 'miss2']), 'ScoreAttempt'] = 2\n        df.loc[df['EventType'].isin(['made3', 'miss3']), 'ScoreAttempt'] = 3\n        print('sorting ...')\n        # sort by some key columns (ascending) + 'RemainingSeconds' (descending)\n        sort(df)\n\n        reward_final_seconds_events(df)\n\n        # count last seconds events\n        count_final_seconds_events(df, final_seconds, 'EndingEvents60Count')\n        count_final_seconds_events(df, final_seconds_30, 'EndingEvents30Count')\n        count_final_seconds_events(df, final_seconds_10, 'EndingEvents10Count')\n        count_final_seconds_events(df, final_seconds_5, 'EndingEvents5Count')\n        count_final_seconds_events(df, final_seconds_3, 'EndingEvents3Count')\n        count_final_seconds_events(df, final_seconds_2, 'EndingEvents2Count')\n        count_final_seconds_events(df, final_seconds_1, 'EndingEvents1Count')\n        count_final_seconds_events(df, final_seconds_0, 'EndingEvents0Count')\n\n        # count breaking moments\n        count_breaking_moments(df)\n\n        # other match stats\n        count_other_match_stats(df)\n\n        # final preparation\n        calculate_thrill(df)\n\n        # one row per game\n        thrill_columns = ['60s', '30s', '10s', '5s', '3s', '2s', '1s', '0s', 'Made', 'Made-', 'Miss', 'Miss-', 'RebDef', 'ST-Def',\n                          'ST-Hope', 'BreakS', 'BreakF', 'MatchMiss', 'MatchMade', 'EventCountPoints', 'ScoreGap']\n        games = df.drop_duplicates(subset=key_columns, keep='last')[key_columns + thrill_columns]\n        games['Thrill'] = games[thrill_columns].sum(axis=1)\n\n        all_data = pd.concat([all_data, games], ignore_index=True)\n\n    return all_data","b5849b8f":"women_thrill_df = calculate_thrill_factor(csv_women)\nwomen_thrill_df","9ea985ca":"men_thrill_df = calculate_thrill_factor(csv_men)\nmen_thrill_df","b4eae1ad":"from IPython.display import display, Markdown\n\ndef rank_teams_by_thrill(thrill_df, league_gender='W'):\n    teams = dict()\n    for row in thrill_df.itertuples():\n        # count thrill for the winner\n        if not row.WTeamID in teams.keys():\n            teams[row.WTeamID] = [row.Thrill, 1]\n        else:\n            teams[row.WTeamID][0] += row.Thrill\n            teams[row.WTeamID][1] += 1\n        # count thrill for the looser\n        if not row.LTeamID in teams.keys():\n            teams[row.LTeamID] = [row.Thrill, 1]\n        else:\n            teams[row.LTeamID][0] += row.Thrill\n            teams[row.LTeamID][1] += 1\n    team_list = list()\n    for t in teams.items():\n        team_list.append((t[0], t[1][0]\/t[1][1]))\n    team_list.sort(key=lambda tup: tup[1], reverse=True)\n    team_list_df = pd.DataFrame(team_list, columns=['TeamID', 'AvgGameThrill'])\n\n    # let's match each team id with a team name\n    df_teams = pd.read_csv('{f}\/{lg}DataFiles_Stage2\/{lg}Teams.csv'.format(f=csv_base, lg=league_gender))\n    df_thrill_ranking = pd.merge(team_list_df, df_teams, on='TeamID')\n    return df_thrill_ranking","c1e13655":"women_ranking = rank_teams_by_thrill(women_thrill_df, 'W')\nstyle1 = '<span style=\"color:#ffc125\"><strong><font size=\"6\">'\nstyle2 = '<span style=\"color:#C0C0C0\"><strong><font size=\"6\">'\nstyle3 = '<span style=\"color:#cd7f32\"><strong><font size=\"6\">'\nstyle_end = '<\/font><\/strong><\/span>'\nMarkdown(\"# Women's THRILL ranking<br\/><br\/>{}1. {} ({}){}<br\/><br\/>{}2. {} ({}){}<br\/><br\/>{}3. {} ({}){}<br\/><br\/><br\/><br\/>\".format(\n    style1, women_ranking.loc[0, 'TeamName'], round(women_ranking.loc[0, 'AvgGameThrill'], 1), style_end,\n    style2, women_ranking.loc[1, 'TeamName'], round(women_ranking.loc[1, 'AvgGameThrill'], 1), style_end,\n    style3, women_ranking.loc[2, 'TeamName'], round(women_ranking.loc[2, 'AvgGameThrill'], 1), style_end,\n))","c77499a8":"men_ranking = rank_teams_by_thrill(men_thrill_df, 'M')\nstyle1 = '<span style=\"color:#ffc125\"><strong><font size=\"6\">'\nstyle2 = '<span style=\"color:#C0C0C0\"><strong><font size=\"6\">'\nstyle3 = '<span style=\"color:#cd7f32\"><strong><font size=\"6\">'\nstyle_end = '<\/font><\/strong><\/span>'\nMarkdown(\"# Men's THRILL ranking<br\/><br\/>{}1. {} ({}){}<br\/><br\/>{}2. {} ({}){}<br\/><br\/>{}3. {} ({}){}<br\/><br\/><br\/><br\/>\".format(\n    style1, men_ranking.loc[0, 'TeamName'], round(men_ranking.loc[0, 'AvgGameThrill'], 1), style_end,\n    style2, men_ranking.loc[1, 'TeamName'], round(men_ranking.loc[1, 'AvgGameThrill'], 1), style_end,\n    style3, men_ranking.loc[2, 'TeamName'], round(men_ranking.loc[2, 'AvgGameThrill'], 1), style_end,\n))","2a81a7be":"# march madness women\nwomen_mm_df = pd.read_csv('{}\/WDataFiles_Stage2\/WNCAATourneyCompactResults.csv'.format(csv_base))\nwomen_mm_thrill_df = pd.merge(women_mm_df, women_thrill_df, on=['Season', 'WTeamID', 'LTeamID', 'DayNum'])\n\nwomen_ranking_mm = rank_teams_by_thrill(women_mm_thrill_df, 'W')\nstyle1 = '<span style=\"color:#ffc125\"><strong><font size=\"6\">'\nstyle2 = '<span style=\"color:#C0C0C0\"><strong><font size=\"6\">'\nstyle3 = '<span style=\"color:#cd7f32\"><strong><font size=\"6\">'\nstyle_end = '<\/font><\/strong><\/span>'\nMarkdown(\"# March Madness women's THRILL ranking<br\/><br\/>{}1. {} ({}){}<br\/><br\/>{}2. {} ({}){}<br\/><br\/>{}3. {} ({}){}<br\/><br\/><br\/><br\/>\".format(\n    style1, women_ranking_mm.loc[0, 'TeamName'], round(women_ranking_mm.loc[0, 'AvgGameThrill'], 1), style_end,\n    style2, women_ranking_mm.loc[1, 'TeamName'], round(women_ranking_mm.loc[1, 'AvgGameThrill'], 1), style_end,\n    style3, women_ranking_mm.loc[2, 'TeamName'], round(women_ranking_mm.loc[2, 'AvgGameThrill'], 1), style_end,\n))","78328aab":"# march madness men\nmen_mm_df = pd.read_csv('{}\/MDataFiles_Stage2\/MNCAATourneyCompactResults.csv'.format(csv_base))\nmen_mm_thrill_df = pd.merge(men_mm_df, men_thrill_df, on=['Season', 'WTeamID', 'LTeamID', 'DayNum'])\n\nmen_ranking_mm = rank_teams_by_thrill(men_mm_thrill_df, 'M')\nstyle1 = '<span style=\"color:#ffc125\"><strong><font size=\"6\">'\nstyle2 = '<span style=\"color:#C0C0C0\"><strong><font size=\"6\">'\nstyle3 = '<span style=\"color:#cd7f32\"><strong><font size=\"6\">'\nstyle_end = '<\/font><\/strong><\/span>'\nMarkdown(\"# March Madness men's THRILL ranking<br\/><br\/>{}1. {} ({}){}<br\/><br\/>{}2. {} ({}){}<br\/><br\/>{}3. {} ({}){}<br\/><br\/><br\/><br\/>\".format(\n    style1, men_ranking_mm.loc[0, 'TeamName'], round(men_ranking_mm.loc[0, 'AvgGameThrill'], 1), style_end,\n    style2, men_ranking_mm.loc[1, 'TeamName'], round(men_ranking_mm.loc[1, 'AvgGameThrill'], 1), style_end,\n    style3, men_ranking_mm.loc[2, 'TeamName'], round(men_ranking_mm.loc[2, 'AvgGameThrill'], 1), style_end,\n))","0c9e37c3":"![euphoria.jpg](attachment:euphoria.jpg)\n<font size='-1' color=\"blue\">Villanova basketball fans celebrate after Villanova defeated North Carolina. *AP (after <a href='https:\/\/www.foxsports.com.au\/basketball\/villanova-fans-across-the-us-react-to-kris-jenkins-ncaa-championship-winning-buzzerbeater\/news-story\/b58d717fb6366930f8d89ea006925366'>FoxSports<\/a>)*<\/font>","b40e9cfc":"![helplessness.jpg](attachment:helplessness.jpg)\n<font size='-1' color=\"blue\">University of Michigan fans watch as their team trails Villanova during the second half on Monday, April 2, 2018 in the NCAA national championship game during a watch party at Crisler Center in Ann Arbor. *Ryan Garza, Detroit Free Press (after <a href='https:\/\/eu.freep.com\/story\/sports\/college\/university-michigan\/2018\/04\/02\/michigan-villanova-national-championship-ncaa-reaction\/480419002\/'>Detroit Free Press<\/a>)*<\/font>","1695a5c8":"<font size=4>Let's analyze men's and women's games from the seasons 2015-2020 second by second and catch the <\/font><font size=5 color=\"red\">__thrilling factor__<\/font>","f2bf6682":"# Let's take a look at the <font color=\"red\">THRILL<\/font> factor during the <font color=\"red\">March Madness<\/font>. Is it different from the all-season one?","dfa6bf86":"![heartbreak.jpg](attachment:heartbreak.jpg)\n<font size='-1' color=\"blue\">Michigan State fans react at the end of a semifinal round game against Texas Tech in the Final Four NCAA college basketball tournament, Saturday, April 6, 2019, in Minneapolis. *Charlie Neibergall \/ AP (after <a href='https:\/\/nationalpost.com\/pmn\/sports-pmn\/basketball-sports-pmn\/michigan-st-endures-more-final-four-heartbreak-vs-texas-tech'>National Post<\/a>)*<\/font>","1533c3aa":"# march-madness-analytics-2020\n<br\/><br\/>\n<font size='5' color=green>What do we love in basketball?<\/font><br\/><br\/>\n<font color=red size='4'>Smooth team play, accurate three-pointer, quiet splashes, beautifull slam dunks, spectacular alley oops, dynamic steals, stopping blocks?<\/font><br\/><br\/>\n\n<font size='4'>We love it all, because it releases our emotions.<\/font><br\/><br\/>\n\n#### #joy #euphoria #worship #love #pride #hope #relief #disappointment #sadness #helplessness\n\n![ball.jpg](attachment:ball.jpg)","ebe6c385":"# My Godness me!!!\n\n## March Madness' THRILL factor is so huge comparing to the regular season! It is a real <font color=\"red\">MADNESS<\/font>.\n\nSurprisingly a women's team Drake Bulldogs plays in the most thrilling way in the March Madness tourney (even men are unable to reach this level of thrill).","e5b40bd5":"First of all I have focused on the final seconds of the games. All offensive and defensive events count.\n\nThen I have looked for these moments during the match, that had a potential to change the leading team. The closer the final buzzer, the more points it added to the thrilling factor.\n\nAdditionally I have counted all other moments during the match that wake up the emotions (missed and made points, small score gap). \n\n![buzzer.jpg](attachment:buzzer.jpg)\n<font size='-1' color='blue'>Villanova's Kris Jenkins hit a shot that will go down in sports history, winning the NCAA men's basketball championship with a three-pointer at the buzzer. *Ronald Martinez\/Getty Images (after <a href='https:\/\/www.businessinsider.com\/kris-jenkins-won-the-greatest-ncaa-championship-game-ever-2016-4?IR=T'>Business Insider<\/a>)*<\/font>","33abf894":"# Let's have a look which teams play in the most thrilling way"}}