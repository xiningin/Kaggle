{"cell_type":{"43280fc0":"code","ed7851b3":"code","56e1d267":"code","9769e68c":"code","bd51cd4d":"code","f4428d03":"code","f1600cf7":"code","2681b159":"code","aa9d0b7e":"code","1a5333da":"code","709340fb":"code","fd5a6c84":"code","d3e627f4":"code","65ccff80":"code","162d3b38":"code","3cba265c":"code","136f7887":"code","19f59bfd":"code","f55179a6":"code","fa1dce58":"code","27d1114b":"code","2c61877e":"code","67686fc3":"code","930d733d":"code","cc5f2c77":"code","fc2514e2":"code","ce3fe47a":"code","6fabca84":"code","a40806ef":"code","161b96f6":"code","d3b242cc":"code","e067355f":"code","56cd7ec5":"code","43f0bdc7":"code","ec1ecff1":"code","73f8a2d2":"code","daf49c9e":"code","9e59543f":"code","3c0b3238":"code","892efb6d":"code","d1b193f6":"code","20957f45":"code","01d61ea0":"code","f5492869":"code","33deee28":"code","a571a312":"code","17cbc81d":"code","eca0e2dd":"code","d9a8dd65":"code","eee08789":"code","1b40de82":"code","a6d0018a":"code","bd32f331":"code","beadc384":"code","59545273":"code","02361a7f":"code","e7d1510e":"code","8ff77931":"code","70b13d0b":"code","c3e68bb3":"code","d27720ac":"code","8b35dde3":"code","85f9164b":"code","4259c094":"code","7f9e6b3c":"code","5731fcd2":"code","2686ea49":"code","f72d4a55":"code","7327fc3e":"markdown","daa5d56f":"markdown","48974e35":"markdown","90cde0b6":"markdown","15d0e9eb":"markdown","1971d426":"markdown","201f7c7a":"markdown","905f52e6":"markdown","d0d8c045":"markdown","030954a2":"markdown","c338515f":"markdown","3d9057d6":"markdown","2ff22474":"markdown","bbc3ef11":"markdown","7be0fa7f":"markdown","4d9c6d84":"markdown","3d21b35d":"markdown","5297f610":"markdown","69ca5fd9":"markdown","e19beff2":"markdown","842aa91b":"markdown","d21c663f":"markdown","9761c248":"markdown","0e145c52":"markdown","57eaebdb":"markdown"},"source":{"43280fc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ed7851b3":"#import all package needed\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom scipy.stats import normaltest\nimport holoviews as hv\nfrom holoviews import opts\nimport cufflinks as cf\nhv.extension('bokeh')","56e1d267":"file1 = '\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv'\nfile2 = '\/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv'\nfile3 = '\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv'\nfile4 = '\/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv'","9769e68c":"plant1 = pd.read_csv(file1)\nsensor1 = pd.read_csv(file3)","bd51cd4d":"plant2 = pd.read_csv(file2)\nsensor2 = pd.read_csv(file4)","f4428d03":"plant1.tail()","f1600cf7":"sensor1.tail()","2681b159":"plant1.info()","aa9d0b7e":"sensor1.info()","1a5333da":"plant2.tail()","709340fb":"sensor2.tail()","fd5a6c84":"plant2.info()","d3e627f4":"sensor2.info()","65ccff80":"#how many inverters we have in plant I and II\nprint('We have: \\n 1- For plant I: {} Inverters. \\n 2- for Plant II: {} Inverters.'.format(plant1['SOURCE_KEY'].nunique(),\n                                                                                         plant2['SOURCE_KEY'].nunique()))","162d3b38":"plant1.drop(columns = 'PLANT_ID').describe()","3cba265c":"sensor1.drop(columns = 'PLANT_ID').describe()","136f7887":"fig = plt.figure(dpi=100, figsize=(15,10))\nfig.subplots_adjust(wspace=0.2, hspace=0.2)\ncols = list(set(plant1.columns) - set(['PLANT_ID', 'SOURCE_KEY', 'DATE_TIME']))\nfor i in range(1,5):\n    ax = fig.add_subplot(2,2,i)\n    sns.violinplot(plant1[cols[i-1]] , ax=ax)","19f59bfd":"fid = plt.figure(dpi=100, figsize=(15,10))\nfid.subplots_adjust(wspace=0.2, hspace=0.2)\ncls = list(set(sensor1.columns) - set(['PLANT_ID', 'SOURCE_KEY', 'DATE_TIME']))\nfor i in range(1,4):\n    ax = fid.add_subplot(2,2,i)\n    sns.violinplot(sensor1[cls[i-1]] , ax=ax)","f55179a6":"def hist2D(df = None, col1 = None, col2 = None, xlabel = None, ylabel = None):\n    '''\n        df: DataFrame\n        col1, col2: columns from DataFrame\n        xlabel,ylabe for name for plotting\n    '''\n    plt.figure(figsize=(15,5))\n    plt.hist2d(df[col1], df[col2], bins = (30, 30))\n    plt.colorbar()\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    ax = plt.gca()\n    ax.axis('tight')","fa1dce58":"plant2.drop(columns = 'PLANT_ID').describe()","27d1114b":"sensor2.drop(columns = 'PLANT_ID').describe()","2c61877e":"figu = plt.figure(dpi=100, figsize=(15,10))\nfigu.subplots_adjust(wspace=0.2, hspace=0.2)\nfor i in range(1,5):\n    ax = figu.add_subplot(2,2,i)\n    sns.violinplot(plant2[cols[i-1]] , ax=ax)","67686fc3":"fis = plt.figure(dpi=100, figsize=(15,10))\nfis.subplots_adjust(wspace=0.2, hspace=0.2)\nfor i in range(1,4):\n    ax = fis.add_subplot(2,2,i)\n    sns.violinplot(sensor2[cls[i-1]] , ax=ax)","930d733d":"#convert date time object type to datetime\nplant1['DATE_TIME'] = pd.to_datetime(plant1.pop('DATE_TIME'), format='%d-%m-%Y %H:%M')\nplant2['DATE_TIME'] = pd.to_datetime(plant2.pop('DATE_TIME'), format='%Y-%m-%d %H:%M')\nsensor2['DATE_TIME'] = pd.to_datetime(sensor2.pop('DATE_TIME'), format='%Y-%m-%d %H:%M')\nsensor1['DATE_TIME'] = pd.to_datetime(sensor1.pop('DATE_TIME'), format='%Y-%m-%d %H:%M')","cc5f2c77":"#I remove time in Date Time to get only date.\nplant1['DATE'] = plant1.DATE_TIME.dt.date\nplant2['DATE'] = plant2.DATE_TIME.dt.date","fc2514e2":"mean_daily_yield1 = plant1.groupby(by='DATE')['DAILY_YIELD'].agg('mean').reset_index()\nmean_daily_yield2 = plant2.groupby(by='DATE')['DAILY_YIELD'].agg('mean').reset_index()","ce3fe47a":"## we plot a mean","6fabca84":"plt.figure(figsize=(15,5))\nsns.lineplot(x='DATE', y='DAILY_YIELD', data=mean_daily_yield1)\nplt.grid(True)\nplt.title('Mean Daily Yield for Plant I.',  weight='bold')\nplt.ylabel('MEAN DAILY YIELD')\nplt.ylim(2000,5500)\nplt.show()","a40806ef":"plt.figure(figsize=(15,5))\nsns.lineplot(x='DATE', y='DAILY_YIELD', data=mean_daily_yield2)\nplt.grid(True)\nplt.title('Mean Daily Yield for Plant II.',  weight='bold')\nplt.ylabel('MEAN DAILY YIELD')\nplt.ylim(1500,4500)\nplt.show()","161b96f6":"mean = pd.DataFrame()\nmean['Mean_Daily_Yield_PLANTI'] = mean_daily_yield1.mean()\nmean['Mean_Daily_Yield_PLANTII'] = mean_daily_yield2.mean()","d3b242cc":"mean.T.style.background_gradient('viridis')","e067355f":"print('Gap between two plants for mean daily yield is {} KWh.'.\\\n      format(round(abs(mean.Mean_Daily_Yield_PLANTI.values[0] -\n                                                            mean.Mean_Daily_Yield_PLANTII.values[0]),2)))","56cd7ec5":"mean.T.plot(kind='pie', subplots=True, figsize=(15,10))\nplt.title('Mean Daily Yield Comparison',  weight='bold')\nplt.show()","43f0bdc7":"sensor1['DATE'] = sensor1.DATE_TIME.dt.date\nsensor2['DATE'] = sensor2.DATE_TIME.dt.date","ec1ecff1":"total_irradiation1 = sensor1.groupby('DATE')['IRRADIATION'].agg('sum').reset_index()\ntotal_irradiation2 = sensor2.groupby('DATE')['IRRADIATION'].agg('sum').reset_index()","73f8a2d2":"plt.figure(figsize=(15,5))\nsns.lineplot(x='DATE', y='IRRADIATION', data=total_irradiation1)\nplt.grid(True)\nplt.title('TOTAL IRRADIATION PER DAY FOR PLANT I.',  weight='bold')\nplt.ylim(10,30)\nplt.show()","daf49c9e":"plt.figure(figsize=(15,5))\nsns.lineplot(x='DATE', y='IRRADIATION', data=total_irradiation2)\nplt.grid(True)\nplt.title('TOTAL IRRADIATION PER DAY FOR PLANT II.',  weight='bold')\nplt.ylim(10,30)\nplt.show()","9e59543f":"temp = plt.figure(figsize=(20,5), dpi=100)\ntemp.subplots_adjust(wspace=0.1)\nax3 = temp.add_subplot(1,2,1)\nax4 = temp.add_subplot(1,2,2)\nsns.lineplot(x='DATE', y='AMBIENT_TEMPERATURE', data=sensor1, ax=ax3)\nsns.lineplot(x='DATE', y='MODULE_TEMPERATURE', data=sensor1, ax=ax4)\nax3.set_title('TEMPERATURE FOR PLANT I',  weight='bold')\nax4.set_title('TEMPERATURE FOR PLANT I',  weight='bold')\nax3.grid(True)\nax4.grid(True)\nplt.show()","3c0b3238":"te = plt.figure(figsize=(20,5), dpi=100)\nte.subplots_adjust(wspace=0.1)\nax5 = te.add_subplot(1,2,1)\nax6 = te.add_subplot(1,2,2)\nsns.lineplot(x='DATE', y='AMBIENT_TEMPERATURE', data=sensor2, ax=ax5)\nsns.lineplot(x='DATE', y='MODULE_TEMPERATURE', data=sensor2, ax=ax6)\nax5.set_title('TEMPERATURE FOR PLANT II',  weight='bold')\nax6.set_title('TEMPERATURE FOR PLANT II',  weight='bold')\nax5.grid(True)\nax6.grid(True)\nplt.show()","892efb6d":"temp_plant1 = pd.DataFrame(sensor1[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE']].max(), columns=['PLANT I'])\ntemp_plant2 = pd.DataFrame(sensor2[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE']].max(), columns=['PLANT II'])","d1b193f6":"temp_plant1.style.background_gradient('viridis')","20957f45":"temp_plant2.style.background_gradient('viridis')","01d61ea0":"pie = plt.figure(figsize=(20,10))\npie.subplots_adjust(wspace=0.2)\nax7 = pie.add_subplot(1,2,1)\nax8 = pie.add_subplot(1,2,2)\n\ntemp_plant1.plot(kind='pie', subplots=True, ax=ax7)\ntemp_plant2.plot(kind='pie', subplots=True, ax=ax8)\nax7.set_title('Plant I Max Temperature', weight='bold')\nax8.set_title('Plant II Max Temperature',  weight='bold')\nplt.show()","f5492869":"print('Plant I have {} inverters.'.format(plant1['SOURCE_KEY'].nunique()))","33deee28":"print('Plant II have {} inverters.'.format(plant2['SOURCE_KEY'].nunique()))","a571a312":"#the data have been recorded after 15min. But we are transforming it for 1h\nplant1_group = plant1.groupby('DATE_TIME')[['AC_POWER', 'DC_POWER']].agg('sum')","17cbc81d":"# slice [start:stop:step], starting from index 4 take every 5th record.\nplant1_group =  plant1_group[0::4].reset_index()\nplant1_group['Date'] = plant1_group.DATE_TIME.dt.date","eca0e2dd":"date1 = plant1_group.Date.unique()","d9a8dd65":"maximun1 = []\nminimun1 = []\n\nfor dt in date1:\n    maximun1.append(plant1_group[plant1_group.Date==dt].max())\n    minimun1.append(plant1_group[plant1_group.Date==dt].min())","eee08789":"min_plant1 = pd.DataFrame(minimun1)\nmax_plant1 = pd.DataFrame(maximun1)","1b40de82":"min_plant1","a6d0018a":"max_plant1.style.background_gradient('viridis')","bd32f331":"#the data have been recorded after 15min. But we are transforming it for 1h\nplant2_group = plant2.groupby('DATE_TIME')[['AC_POWER', 'DC_POWER']].agg('sum')","beadc384":"# slice [start:stop:step], starting from index 4 take every 5th record.\nplant2_group =  plant2_group[0::4].reset_index()\nplant2_group['Date'] = plant2_group.DATE_TIME.dt.date","59545273":"date2 = plant2_group.Date.unique()","02361a7f":"maximun2 = []\nminimun2 = []\n\nfor dt in date2:\n    maximun2.append(plant2_group[plant2_group.Date==dt].max())\n    minimun2.append(plant2_group[plant2_group.Date==dt].min())","e7d1510e":"min_plant2 = pd.DataFrame(minimun2)\nmax_plant2 = pd.DataFrame(maximun2)","8ff77931":"min_plant2","70b13d0b":"max_plant2.style.background_gradient('viridis')","c3e68bb3":"inverter1 = plant1.groupby('SOURCE_KEY')[['AC_POWER', 'DC_POWER']].agg('sum')\ninverter2 = plant2.groupby('SOURCE_KEY')[['AC_POWER', 'DC_POWER']].agg('sum')","d27720ac":"inverter1.plot(kind='bar', subplots=True, figsize=(20,15))\nplt.show()","8b35dde3":"stop1 = inverter1 == inverter1.max()","85f9164b":"print('The inverter  has produced maximun DC\/AC POWER for plant I is: {}'.format(inverter1.index[stop1.iloc[:,0]].values[0]))","4259c094":"inverter2.plot(kind='bar', subplots=True, figsize=(20,15))\nplt.show()","7f9e6b3c":"stop2 = inverter2 == inverter2.max()","5731fcd2":"print('The inverter  has produced maximun DC\/AC POWER for plant II is: {}'.format(inverter2.index[stop2.iloc[:,0]].values[0]))","2686ea49":"inverter1.sort_values(by=['AC_POWER'], ascending=False).style.background_gradient('viridis')","f72d4a55":"inverter2.sort_values(by=['AC_POWER'], ascending=False).style.background_gradient('viridis')","7327fc3e":"<a id='Q2'><\/a>\n\n# What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?\n\nThe answer are:","daa5d56f":"### Maximun AC\/DC POWER for Plant I","48974e35":"## For plant II","90cde0b6":"### Miminun AC\/DC POWER for Plant I","15d0e9eb":"# 1. Load data","1971d426":"## Plant I","201f7c7a":"## Plant I","905f52e6":"<a id='total'><\/a>\n\n# The total irradiation per day","d0d8c045":"## For plant I","030954a2":"<a id='explore'><\/a>","c338515f":"## Plant II","3d9057d6":"<a id='Q1'><\/a>\n\n# How many inverters are there for each plant?","2ff22474":"<div class= Descriptive Analytics><\/div>\n\nIn this notebook, we are doing descriptive analytics for two solar power plants in India. To do so, we are talking about:\n\n1. [Load data](#load)\n2. [Initial exploration](#explore)\n3. [The mean value of daily yield for each plant](#mean)\n4. [The total irradiation per day](#total)\n5. [The max ambient and module temperature for each plant](#max)\n5. [How many inverters are there for each plant?](#Q1)\n6. [What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?](#Q2)\n7. [Which inverter (source_key) has produced maximum DC\/AC power?](#Q3)\n8. [The Rank of the inverters based on the DC\/AC power they produce](#Q4)\n9. [Find the best solar power plant](#best)\n\nWe start.","bbc3ef11":"# 2. Initial Exploration","7be0fa7f":"<a id = 'Q3'><\/a>\n\n# Which inverter (source_key) has produced maximum DC\/AC power?","4d9c6d84":"<font color=green> We learn: <\/font>\n\n    1. For May month, Plant I gets a maximun mean daily yield but plant II gets also a maximun mean daily yield \n    for June month.\n    2. A gap between mean daily yield for plant I and II is only 9.16 KWh. ","3d21b35d":"<font color=green>We lean:<\/font>\n\n    1. May is the hot month.\n    2. A gap between max ambient temperature for plant I and II is around a 4\u00b0C.\n    3. A gap between max module temperature for plant I and II is around 1\u00b0C.\n    4. Ratio between max module and max ambient temperature is almost same in the two plants.","5297f610":"<a id ='Q4'><\/a>\n\n# The Rank of the inverters based on the DC\/AC power they produce","69ca5fd9":"# Conclusion\n\n1. Distribution of Total yield for plant I and plant II are different but Daily yield are almost same.\n\n2. Sensor for plant I and sensor for plant II have same distribution; but irradiation for plant II decrease.\n\n3. Just only 1\/2 entry data are not null (median=0.0) for plant II and give good yield.\n\n4. Plant I produces a huge DC Power but his AC Power is the same range with AC power for plant II. This means that Plant I loses huge Power in conversion.\n\n5. A gap between mean daily yield for plant I and plant II is only 9.16 KWh.","e19beff2":"<a id='load'><\/a>","842aa91b":"<a id='max'><\/a>\n\n# The max ambient and module temperature for each plant.","d21c663f":"<a id='mean'><\/a>\n\n# The mean value of daily yield for each plant. ","9761c248":"<font color=blue>We learn: <\/font>\n\n    1. Sensor for plant I is similar to sensor for plant II.\n    2. DC POWER and AC POWER for plant II have a median equal to 0 but for plant I is different. This means that 1\/2 entry of generation data DC\/AC POWER for plant II have a value equal to 0. \n    3. DAILY_YIELD for plant II and plant I are similar.\n    4. With only 1\/2 entry DC\/AC POWER generation data notnull , TOTAL YIELD for plant II is very huge than TOTAL YIELD for plant I.","0e145c52":"<font color=red> We learn:<\/font>\n\n    1. Total irradiation per day for Plant I increases in May month after stabilize in June month.\n    2. The monotonic of total irradiation per day for plant II decreases directly May to June.","57eaebdb":"## Plant II"}}